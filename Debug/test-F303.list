
test-F303.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fa3c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002768  0800fbd0  0800fbd0  00010bd0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012338  08012338  00014250  2**0
                  CONTENTS
  4 .ARM          00000008  08012338  08012338  00013338  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012340  08012340  00014250  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012340  08012340  00013340  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08012344  08012344  00013344  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000250  20000000  08012348  00014000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00014250  2**0
                  CONTENTS
 10 .bss          00008fd8  20000250  20000250  00014250  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20009228  20009228  00014250  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00014250  2**0
                  CONTENTS, READONLY
 13 .debug_info   000343f9  00000000  00000000  00014280  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00006d1d  00000000  00000000  00048679  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loclists 00010b37  00000000  00000000  0004f396  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001da8  00000000  00000000  0005fed0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001f88  00000000  00000000  00061c78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00025930  00000000  00000000  00063c00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000326b9  00000000  00000000  00089530  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d7e31  00000000  00000000  000bbbe9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  00193a1a  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00006e20  00000000  00000000  00193a60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000051  00000000  00000000  0019a880  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000250 	.word	0x20000250
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800fbb4 	.word	0x0800fbb4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000254 	.word	0x20000254
 80001cc:	0800fbb4 	.word	0x0800fbb4

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_d2lz>:
 8000ca8:	b538      	push	{r3, r4, r5, lr}
 8000caa:	2200      	movs	r2, #0
 8000cac:	2300      	movs	r3, #0
 8000cae:	4604      	mov	r4, r0
 8000cb0:	460d      	mov	r5, r1
 8000cb2:	f7ff ff23 	bl	8000afc <__aeabi_dcmplt>
 8000cb6:	b928      	cbnz	r0, 8000cc4 <__aeabi_d2lz+0x1c>
 8000cb8:	4620      	mov	r0, r4
 8000cba:	4629      	mov	r1, r5
 8000cbc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cc0:	f000 b80a 	b.w	8000cd8 <__aeabi_d2ulz>
 8000cc4:	4620      	mov	r0, r4
 8000cc6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cca:	f000 f805 	bl	8000cd8 <__aeabi_d2ulz>
 8000cce:	4240      	negs	r0, r0
 8000cd0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cd4:	bd38      	pop	{r3, r4, r5, pc}
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_d2ulz>:
 8000cd8:	b5d0      	push	{r4, r6, r7, lr}
 8000cda:	4b0c      	ldr	r3, [pc, #48]	@ (8000d0c <__aeabi_d2ulz+0x34>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	4606      	mov	r6, r0
 8000ce0:	460f      	mov	r7, r1
 8000ce2:	f7ff fc99 	bl	8000618 <__aeabi_dmul>
 8000ce6:	f7ff ff6f 	bl	8000bc8 <__aeabi_d2uiz>
 8000cea:	4604      	mov	r4, r0
 8000cec:	f7ff fc1a 	bl	8000524 <__aeabi_ui2d>
 8000cf0:	4b07      	ldr	r3, [pc, #28]	@ (8000d10 <__aeabi_d2ulz+0x38>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	f7ff fc90 	bl	8000618 <__aeabi_dmul>
 8000cf8:	4602      	mov	r2, r0
 8000cfa:	460b      	mov	r3, r1
 8000cfc:	4630      	mov	r0, r6
 8000cfe:	4639      	mov	r1, r7
 8000d00:	f7ff fad2 	bl	80002a8 <__aeabi_dsub>
 8000d04:	f7ff ff60 	bl	8000bc8 <__aeabi_d2uiz>
 8000d08:	4621      	mov	r1, r4
 8000d0a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d0c:	3df00000 	.word	0x3df00000
 8000d10:	41f00000 	.word	0x41f00000

08000d14 <coldStart>:
	osDelay(50);	//	50 is OK
	//memset(gnssDmaRingBufferMemory, 0x20, sizeof(gnssDmaRingBufferMemory));	// insert buffer with space character	
	RingBufferDmaU8_initUSARTRx(&GPSRxDMARing, &huart2, gpsSentence, GPS_STACK_SIZE);
}

void coldStart(void){
 8000d14:	b508      	push	{r3, lr}
	HAL_UART_Transmit(&huart2, (uint8_t*)"$PMTK104*37\r\n", strlen("$PMTK104*37\r\n"), 2000);
 8000d16:	4906      	ldr	r1, [pc, #24]	@ (8000d30 <coldStart+0x1c>)
 8000d18:	4806      	ldr	r0, [pc, #24]	@ (8000d34 <coldStart+0x20>)
 8000d1a:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000d1e:	220d      	movs	r2, #13
 8000d20:	f007 f806 	bl	8007d30 <HAL_UART_Transmit>
	osDelay(100);
}
 8000d24:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	osDelay(100);
 8000d28:	2064      	movs	r0, #100	@ 0x64
 8000d2a:	f007 b971 	b.w	8008010 <osDelay>
 8000d2e:	bf00      	nop
 8000d30:	0800fd00 	.word	0x0800fd00
 8000d34:	2000233c 	.word	0x2000233c

08000d38 <validateChecksum>:
	osDelay(1000);

}

// Function to validate the checksum of an NMEA sentence
int validateChecksum(uint8_t *nmeaSentence, size_t len) {
 8000d38:	b538      	push	{r3, r4, r5, lr}
 8000d3a:	4401      	add	r1, r0
 8000d3c:	4603      	mov	r3, r0
    const uint8_t *start = nmeaSentence;  // Start of the sentence (after '$')
    const uint8_t *checksumStart = NULL;

    // Find the checksum part (after '*')
    for (size_t i = 0; i < len; i++) {
 8000d3e:	4299      	cmp	r1, r3
 8000d40:	d101      	bne.n	8000d46 <validateChecksum+0xe>
            break;
        }
    }

    if (!checksumStart) {
        return 0;  // Invalid sentence format
 8000d42:	2000      	movs	r0, #0
 8000d44:	e021      	b.n	8000d8a <validateChecksum+0x52>
        if (nmeaSentence[i] == '*') {
 8000d46:	461c      	mov	r4, r3
 8000d48:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000d4c:	2a2a      	cmp	r2, #42	@ 0x2a
 8000d4e:	d1f6      	bne.n	8000d3e <validateChecksum+0x6>

    uint8_t calculatedChecksum = 0;
    uint8_t receivedChecksum = 1;

    // XOR all characters between '$' and '*', excluding both symbols
    for (const uint8_t *p = start + 1; p < checksumStart; ++p) {
 8000d50:	3001      	adds	r0, #1
    uint8_t calculatedChecksum = 0;
 8000d52:	2500      	movs	r5, #0
    for (const uint8_t *p = start + 1; p < checksumStart; ++p) {
 8000d54:	e002      	b.n	8000d5c <validateChecksum+0x24>
        calculatedChecksum ^= *p;
 8000d56:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000d5a:	405d      	eors	r5, r3
    for (const uint8_t *p = start + 1; p < checksumStart; ++p) {
 8000d5c:	4284      	cmp	r4, r0
 8000d5e:	d8fa      	bhi.n	8000d56 <validateChecksum+0x1e>
    }

    // Extract the received checksum (after '*')
    if (checksumStart + 2 < nmeaSentence + len) {
 8000d60:	1ca3      	adds	r3, r4, #2
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d212      	bcs.n	8000d8c <validateChecksum+0x54>
        receivedChecksum = (uint8_t)strtol((char *)(checksumStart + 1), NULL, 16);
 8000d66:	2210      	movs	r2, #16
 8000d68:	2100      	movs	r1, #0
 8000d6a:	1c60      	adds	r0, r4, #1
 8000d6c:	f009 feaa 	bl	800aac4 <strtol>
 8000d70:	4604      	mov	r4, r0

        // Debugging: Print calculated and received checksums
//        snprintf()
        printf("Calculated checksum: %02x\n", calculatedChecksum);
 8000d72:	4629      	mov	r1, r5
        printf("Received checksum: %02x\n", receivedChecksum);
 8000d74:	b2e4      	uxtb	r4, r4
        printf("Calculated checksum: %02x\n", calculatedChecksum);
 8000d76:	4808      	ldr	r0, [pc, #32]	@ (8000d98 <validateChecksum+0x60>)
 8000d78:	f00a fddc 	bl	800b934 <iprintf>
        printf("Received checksum: %02x\n", receivedChecksum);
 8000d7c:	4807      	ldr	r0, [pc, #28]	@ (8000d9c <validateChecksum+0x64>)
 8000d7e:	4621      	mov	r1, r4
 8000d80:	f00a fdd8 	bl	800b934 <iprintf>

        // Compare the calculated checksum with the received checksum
        return calculatedChecksum == receivedChecksum;
 8000d84:	1b63      	subs	r3, r4, r5
 8000d86:	4258      	negs	r0, r3
 8000d88:	4158      	adcs	r0, r3
    }
    printf("Checksum mismatch: calculated 0x%02X, received 0x%02X\n",
                         calculatedChecksum, receivedChecksum);
    return 0; // Invalid checksum
}
 8000d8a:	bd38      	pop	{r3, r4, r5, pc}
    printf("Checksum mismatch: calculated 0x%02X, received 0x%02X\n",
 8000d8c:	2201      	movs	r2, #1
 8000d8e:	4629      	mov	r1, r5
 8000d90:	4803      	ldr	r0, [pc, #12]	@ (8000da0 <validateChecksum+0x68>)
 8000d92:	f00a fdcf 	bl	800b934 <iprintf>
    return 0; // Invalid checksum
 8000d96:	e7d4      	b.n	8000d42 <validateChecksum+0xa>
 8000d98:	0800fd0e 	.word	0x0800fd0e
 8000d9c:	0800fd29 	.word	0x0800fd29
 8000da0:	0800fd42 	.word	0x0800fd42

08000da4 <display_rmc_data>:

void display_rmc_data() {
 8000da4:	b513      	push	{r0, r1, r4, lr}

    printf("Time: %02d:%02d:%02d\r\n", rmc.tim.hour, rmc.tim.min, rmc.tim.sec);
 8000da6:	4c1d      	ldr	r4, [pc, #116]	@ (8000e1c <display_rmc_data+0x78>)
 8000da8:	481d      	ldr	r0, [pc, #116]	@ (8000e20 <display_rmc_data+0x7c>)
 8000daa:	6821      	ldr	r1, [r4, #0]
 8000dac:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 8000db0:	f00a fdc0 	bl	800b934 <iprintf>

    printf("Date: %02d/%02d/20%02d\r\n", rmc.date.Day, rmc.date.Mon, rmc.date.Yr);
 8000db4:	6921      	ldr	r1, [r4, #16]
 8000db6:	481b      	ldr	r0, [pc, #108]	@ (8000e24 <display_rmc_data+0x80>)
 8000db8:	e9d4 2305 	ldrd	r2, r3, [r4, #20]
 8000dbc:	f00a fdba 	bl	800b934 <iprintf>
	
    printf("Latitude: %.6f %c\r\n", rmc.lcation.latitude, rmc.lcation.NS);
 8000dc0:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 8000dc4:	9300      	str	r3, [sp, #0]
 8000dc6:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	@ 0x38
 8000dca:	4817      	ldr	r0, [pc, #92]	@ (8000e28 <display_rmc_data+0x84>)
 8000dcc:	f00a fdb2 	bl	800b934 <iprintf>

    printf("Longitude: %.6f %c\r\n", rmc.lcation.longitude, rmc.lcation.EW);
 8000dd0:	f894 3050 	ldrb.w	r3, [r4, #80]	@ 0x50
 8000dd4:	9300      	str	r3, [sp, #0]
 8000dd6:	e9d4 2312 	ldrd	r2, r3, [r4, #72]	@ 0x48
 8000dda:	4814      	ldr	r0, [pc, #80]	@ (8000e2c <display_rmc_data+0x88>)
 8000ddc:	f00a fdaa 	bl	800b934 <iprintf>

    printf("Speed: %.1f knots\r\n", rmc.speed);
 8000de0:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8000de2:	f7ff fbc1 	bl	8000568 <__aeabi_f2d>
 8000de6:	4602      	mov	r2, r0
 8000de8:	460b      	mov	r3, r1
 8000dea:	4811      	ldr	r0, [pc, #68]	@ (8000e30 <display_rmc_data+0x8c>)
 8000dec:	f00a fda2 	bl	800b934 <iprintf>

    printf("Course: %.1f\r\n", rmc.course);
 8000df0:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8000df2:	f7ff fbb9 	bl	8000568 <__aeabi_f2d>
 8000df6:	4602      	mov	r2, r0
 8000df8:	460b      	mov	r3, r1
 8000dfa:	480e      	ldr	r0, [pc, #56]	@ (8000e34 <display_rmc_data+0x90>)
 8000dfc:	f00a fd9a 	bl	800b934 <iprintf>

    printf("Validity: %s\r\n", rmc.isValid ? "Valid" : "Invalid");
 8000e00:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8000e02:	4a0d      	ldr	r2, [pc, #52]	@ (8000e38 <display_rmc_data+0x94>)
 8000e04:	4b0d      	ldr	r3, [pc, #52]	@ (8000e3c <display_rmc_data+0x98>)
 8000e06:	480e      	ldr	r0, [pc, #56]	@ (8000e40 <display_rmc_data+0x9c>)
 8000e08:	2900      	cmp	r1, #0
 8000e0a:	bf0c      	ite	eq
 8000e0c:	4611      	moveq	r1, r2
 8000e0e:	4619      	movne	r1, r3
}
 8000e10:	b002      	add	sp, #8
 8000e12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    printf("Validity: %s\r\n", rmc.isValid ? "Valid" : "Invalid");
 8000e16:	f00a bd8d 	b.w	800b934 <iprintf>
 8000e1a:	bf00      	nop
 8000e1c:	200003d0 	.word	0x200003d0
 8000e20:	0800fd87 	.word	0x0800fd87
 8000e24:	0800fd9e 	.word	0x0800fd9e
 8000e28:	0800fdb7 	.word	0x0800fdb7
 8000e2c:	0800fdcb 	.word	0x0800fdcb
 8000e30:	0800fde0 	.word	0x0800fde0
 8000e34:	0800fdf4 	.word	0x0800fdf4
 8000e38:	0800fd7f 	.word	0x0800fd7f
 8000e3c:	0800fd79 	.word	0x0800fd79
 8000e40:	0800fe03 	.word	0x0800fe03

08000e44 <convertToEpoch>:

time_t convertToEpoch(int year, int month, int day, int hour, int min, int sec) {
 8000e44:	b510      	push	{r4, lr}
 8000e46:	b08a      	sub	sp, #40	@ 0x28
    struct tm timeinfo = {0};

    // Set timeinfo fields
    timeinfo.tm_year = year + 100; // Year since 1900
 8000e48:	3064      	adds	r0, #100	@ 0x64
    timeinfo.tm_mon = month - 1;    // Month (0-11, so subtract 1)
    timeinfo.tm_mday = day;         // Day of the month
    timeinfo.tm_hour = hour;        // Hour (0-23)
 8000e4a:	9303      	str	r3, [sp, #12]
    timeinfo.tm_min = min;          // Minute (0-59)
 8000e4c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8000e4e:	9302      	str	r3, [sp, #8]
    timeinfo.tm_sec = sec;          // Second (0-59)
 8000e50:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
    timeinfo.tm_year = year + 100; // Year since 1900
 8000e52:	9006      	str	r0, [sp, #24]
    timeinfo.tm_sec = sec;          // Second (0-59)
 8000e54:	9301      	str	r3, [sp, #4]
    struct tm timeinfo = {0};
 8000e56:	2400      	movs	r4, #0
    timeinfo.tm_isdst = -1;         // Automatically determine Daylight Saving Time
 8000e58:	f04f 33ff 	mov.w	r3, #4294967295
    timeinfo.tm_mon = month - 1;    // Month (0-11, so subtract 1)
 8000e5c:	3901      	subs	r1, #1

    // Convert to epoch time (seconds since 1970-01-01 00:00:00 UTC)
    time_t epoch = mktime(&timeinfo);
 8000e5e:	a801      	add	r0, sp, #4
    struct tm timeinfo = {0};
 8000e60:	e9cd 4407 	strd	r4, r4, [sp, #28]
    timeinfo.tm_mday = day;         // Day of the month
 8000e64:	e9cd 2104 	strd	r2, r1, [sp, #16]
    timeinfo.tm_isdst = -1;         // Automatically determine Daylight Saving Time
 8000e68:	9309      	str	r3, [sp, #36]	@ 0x24
    time_t epoch = mktime(&timeinfo);
 8000e6a:	f00b f86d 	bl	800bf48 <mktime>

    return epoch;
}
 8000e6e:	b00a      	add	sp, #40	@ 0x28
 8000e70:	bd10      	pop	{r4, pc}
 8000e72:	0000      	movs	r0, r0
 8000e74:	0000      	movs	r0, r0
	...

08000e78 <parse_rmc>:

void parse_rmc(uint8_t *rmc_sentence) {
 8000e78:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000e7c:	ed2d 8b02 	vpush	{d8}
 8000e80:	b0a3      	sub	sp, #140	@ 0x8c
    int field = 0;
    uint8_t str_cpy[128];
    strcpy((char*)str_cpy,(char*) rmc_sentence);
 8000e82:	4601      	mov	r1, r0
void parse_rmc(uint8_t *rmc_sentence) {
 8000e84:	4604      	mov	r4, r0
    strcpy((char*)str_cpy,(char*) rmc_sentence);
 8000e86:	a802      	add	r0, sp, #8
 8000e88:	f00b fdc6 	bl	800ca18 <strcpy>
    str_cpy[sizeof(str_cpy) - 1] = '\0';
 8000e8c:	2600      	movs	r6, #0

    printf("\n");
 8000e8e:	200a      	movs	r0, #10
    str_cpy[sizeof(str_cpy) - 1] = '\0';
 8000e90:	f88d 6087 	strb.w	r6, [sp, #135]	@ 0x87
    printf("\n");
 8000e94:	f00a fd60 	bl	800b958 <putchar>
    printf((char *)rmc_sentence);
 8000e98:	4620      	mov	r0, r4
 8000e9a:	f00a fd4b 	bl	800b934 <iprintf>
    printf("\n");
 8000e9e:	200a      	movs	r0, #10
 8000ea0:	f00a fd5a 	bl	800b958 <putchar>

	if(validateChecksum(rmc_sentence, 128) == 0){
 8000ea4:	2180      	movs	r1, #128	@ 0x80
 8000ea6:	4620      	mov	r0, r4
 8000ea8:	f7ff ff46 	bl	8000d38 <validateChecksum>
 8000eac:	b1a0      	cbz	r0, 8000ed8 <parse_rmc+0x60>
 8000eae:	ad02      	add	r5, sp, #8

    uint8_t *ptr = str_cpy;

    while (*ptr) {
        if (*ptr == ',' || *ptr == '*') {
            *ptr = '\0';
 8000eb0:	4637      	mov	r7, r6
    while (*ptr) {
 8000eb2:	f815 3b01 	ldrb.w	r3, [r5], #1
 8000eb6:	b9a3      	cbnz	r3, 8000ee2 <parse_rmc+0x6a>
            rmc_sentence = ptr + 1;
            field++;
        }
        ptr++;
    }
	if(rmc.isValid == 1)
 8000eb8:	4c77      	ldr	r4, [pc, #476]	@ (8001098 <parse_rmc+0x220>)
 8000eba:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8000ebc:	2b01      	cmp	r3, #1
 8000ebe:	d10b      	bne.n	8000ed8 <parse_rmc+0x60>
		rmc.date.epoch = convertToEpoch(rmc.date.Yr, rmc.date.Mon, rmc.date.Day, rmc.tim.hour, rmc.tim.min, rmc.tim.sec);
 8000ec0:	68a3      	ldr	r3, [r4, #8]
 8000ec2:	9301      	str	r3, [sp, #4]
 8000ec4:	6863      	ldr	r3, [r4, #4]
 8000ec6:	9300      	str	r3, [sp, #0]
 8000ec8:	e9d4 2104 	ldrd	r2, r1, [r4, #16]
 8000ecc:	6823      	ldr	r3, [r4, #0]
 8000ece:	69a0      	ldr	r0, [r4, #24]
 8000ed0:	f7ff ffb8 	bl	8000e44 <convertToEpoch>
 8000ed4:	e9c4 0108 	strd	r0, r1, [r4, #32]
}
 8000ed8:	b023      	add	sp, #140	@ 0x8c
 8000eda:	ecbd 8b02 	vpop	{d8}
 8000ede:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (*ptr == ',' || *ptr == '*') {
 8000ee2:	2b2c      	cmp	r3, #44	@ 0x2c
 8000ee4:	d001      	beq.n	8000eea <parse_rmc+0x72>
 8000ee6:	2b2a      	cmp	r3, #42	@ 0x2a
 8000ee8:	d1e3      	bne.n	8000eb2 <parse_rmc+0x3a>
            switch (field) {
 8000eea:	1e73      	subs	r3, r6, #1
            *ptr = '\0';
 8000eec:	f805 7c01 	strb.w	r7, [r5, #-1]
            switch (field) {
 8000ef0:	2b08      	cmp	r3, #8
 8000ef2:	d81d      	bhi.n	8000f30 <parse_rmc+0xb8>
 8000ef4:	e8df f003 	tbb	[pc, r3]
 8000ef8:	5d271f05 	.word	0x5d271f05
 8000efc:	a79d9862 	.word	0xa79d9862
 8000f00:	b1          	.byte	0xb1
 8000f01:	00          	.byte	0x00
                    rmc.tim.hour = (rmc_sentence[0] - '0') * 10 + (rmc_sentence[1] - '0');
 8000f02:	7820      	ldrb	r0, [r4, #0]
 8000f04:	7863      	ldrb	r3, [r4, #1]
 8000f06:	4a64      	ldr	r2, [pc, #400]	@ (8001098 <parse_rmc+0x220>)
 8000f08:	210a      	movs	r1, #10
 8000f0a:	3830      	subs	r0, #48	@ 0x30
 8000f0c:	3b30      	subs	r3, #48	@ 0x30
 8000f0e:	fb01 3300 	mla	r3, r1, r0, r3
 8000f12:	6013      	str	r3, [r2, #0]
                    rmc.tim.min = (rmc_sentence[2] - '0') * 10 + (rmc_sentence[3] - '0');
 8000f14:	78a0      	ldrb	r0, [r4, #2]
 8000f16:	78e3      	ldrb	r3, [r4, #3]
 8000f18:	3830      	subs	r0, #48	@ 0x30
 8000f1a:	3b30      	subs	r3, #48	@ 0x30
 8000f1c:	fb01 3300 	mla	r3, r1, r0, r3
 8000f20:	6053      	str	r3, [r2, #4]
                    rmc.tim.sec = (rmc_sentence[4] - '0') * 10 + (rmc_sentence[5] - '0');
 8000f22:	7920      	ldrb	r0, [r4, #4]
 8000f24:	7963      	ldrb	r3, [r4, #5]
 8000f26:	3830      	subs	r0, #48	@ 0x30
 8000f28:	3b30      	subs	r3, #48	@ 0x30
 8000f2a:	fb01 3300 	mla	r3, r1, r0, r3
 8000f2e:	6093      	str	r3, [r2, #8]
            field++;
 8000f30:	3601      	adds	r6, #1
            rmc_sentence = ptr + 1;
 8000f32:	462c      	mov	r4, r5
        ptr++;
 8000f34:	e7bd      	b.n	8000eb2 <parse_rmc+0x3a>
                    rmc.isValid = (rmc_sentence[0] == 'A') ? 1 : 0;
 8000f36:	7823      	ldrb	r3, [r4, #0]
 8000f38:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8000f3c:	4253      	negs	r3, r2
 8000f3e:	4153      	adcs	r3, r2
 8000f40:	4a55      	ldr	r2, [pc, #340]	@ (8001098 <parse_rmc+0x220>)
 8000f42:	6313      	str	r3, [r2, #48]	@ 0x30
                    break;
 8000f44:	e7f4      	b.n	8000f30 <parse_rmc+0xb8>
                    rmc.lcation.latitude = (atof((char *)rmc_sentence) )/100;
 8000f46:	4620      	mov	r0, r4
 8000f48:	f008 fe64 	bl	8009c14 <atof>
 8000f4c:	4b53      	ldr	r3, [pc, #332]	@ (800109c <parse_rmc+0x224>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	ec51 0b10 	vmov	r0, r1, d0
 8000f54:	f7ff fc8a 	bl	800086c <__aeabi_ddiv>
 8000f58:	4680      	mov	r8, r0
 8000f5a:	4689      	mov	r9, r1
                    int lati_int = (int)floor(rmc.lcation.latitude);
 8000f5c:	ec49 8b10 	vmov	d0, r8, r9
 8000f60:	f00e fd66 	bl	800fa30 <floor>
 8000f64:	ec51 0b10 	vmov	r0, r1, d0
 8000f68:	f7ff fe06 	bl	8000b78 <__aeabi_d2iz>
 8000f6c:	ee08 0a10 	vmov	s16, r0
					float lati_float = rmc.lcation.latitude - lati_int;
 8000f70:	f7ff fae8 	bl	8000544 <__aeabi_i2d>
 8000f74:	4602      	mov	r2, r0
 8000f76:	460b      	mov	r3, r1
 8000f78:	4640      	mov	r0, r8
 8000f7a:	4649      	mov	r1, r9
 8000f7c:	f7ff f994 	bl	80002a8 <__aeabi_dsub>
 8000f80:	f7ff fe42 	bl	8000c08 <__aeabi_d2f>
					lati_float = lati_float/0.6;
 8000f84:	f7ff faf0 	bl	8000568 <__aeabi_f2d>
 8000f88:	a341      	add	r3, pc, #260	@ (adr r3, 8001090 <parse_rmc+0x218>)
 8000f8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f8e:	f7ff fc6d 	bl	800086c <__aeabi_ddiv>
 8000f92:	f7ff fe39 	bl	8000c08 <__aeabi_d2f>
					rmc.lcation.latitude = lati_int + lati_float;
 8000f96:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
					lati_float = lati_float/0.6;
 8000f9a:	ee07 0a90 	vmov	s15, r0
					rmc.lcation.latitude = lati_int + lati_float;
 8000f9e:	ee78 7a27 	vadd.f32	s15, s16, s15
 8000fa2:	ee17 0a90 	vmov	r0, s15
 8000fa6:	f7ff fadf 	bl	8000568 <__aeabi_f2d>
 8000faa:	4b3b      	ldr	r3, [pc, #236]	@ (8001098 <parse_rmc+0x220>)
 8000fac:	e9c3 010e 	strd	r0, r1, [r3, #56]	@ 0x38
                    break;
 8000fb0:	e7be      	b.n	8000f30 <parse_rmc+0xb8>
                    rmc.lcation.NS = rmc_sentence[0];
 8000fb2:	4b39      	ldr	r3, [pc, #228]	@ (8001098 <parse_rmc+0x220>)
 8000fb4:	7822      	ldrb	r2, [r4, #0]
 8000fb6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
                    break;
 8000fba:	e7b9      	b.n	8000f30 <parse_rmc+0xb8>
                    rmc.lcation.longitude = (atof((char *)rmc_sentence))/100;
 8000fbc:	4620      	mov	r0, r4
 8000fbe:	f008 fe29 	bl	8009c14 <atof>
 8000fc2:	4b36      	ldr	r3, [pc, #216]	@ (800109c <parse_rmc+0x224>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	ec51 0b10 	vmov	r0, r1, d0
 8000fca:	f7ff fc4f 	bl	800086c <__aeabi_ddiv>
 8000fce:	4680      	mov	r8, r0
 8000fd0:	4689      	mov	r9, r1
                    int longi_int = (int)floor(rmc.lcation.longitude);
 8000fd2:	ec49 8b10 	vmov	d0, r8, r9
 8000fd6:	f00e fd2b 	bl	800fa30 <floor>
 8000fda:	ec51 0b10 	vmov	r0, r1, d0
 8000fde:	f7ff fdcb 	bl	8000b78 <__aeabi_d2iz>
 8000fe2:	ee08 0a10 	vmov	s16, r0
					float longi_float = rmc.lcation.longitude - longi_int;
 8000fe6:	f7ff faad 	bl	8000544 <__aeabi_i2d>
 8000fea:	4602      	mov	r2, r0
 8000fec:	460b      	mov	r3, r1
 8000fee:	4640      	mov	r0, r8
 8000ff0:	4649      	mov	r1, r9
 8000ff2:	f7ff f959 	bl	80002a8 <__aeabi_dsub>
 8000ff6:	f7ff fe07 	bl	8000c08 <__aeabi_d2f>
					longi_float = longi_float / 0.6;
 8000ffa:	f7ff fab5 	bl	8000568 <__aeabi_f2d>
 8000ffe:	a324      	add	r3, pc, #144	@ (adr r3, 8001090 <parse_rmc+0x218>)
 8001000:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001004:	f7ff fc32 	bl	800086c <__aeabi_ddiv>
 8001008:	f7ff fdfe 	bl	8000c08 <__aeabi_d2f>
					rmc.lcation.longitude = longi_int + longi_float;
 800100c:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
					longi_float = longi_float / 0.6;
 8001010:	ee07 0a90 	vmov	s15, r0
					rmc.lcation.longitude = longi_int + longi_float;
 8001014:	ee78 7a27 	vadd.f32	s15, s16, s15
 8001018:	ee17 0a90 	vmov	r0, s15
 800101c:	f7ff faa4 	bl	8000568 <__aeabi_f2d>
 8001020:	4b1d      	ldr	r3, [pc, #116]	@ (8001098 <parse_rmc+0x220>)
 8001022:	e9c3 0112 	strd	r0, r1, [r3, #72]	@ 0x48
                    break;
 8001026:	e783      	b.n	8000f30 <parse_rmc+0xb8>
                    rmc.lcation.EW = rmc_sentence[0];
 8001028:	4b1b      	ldr	r3, [pc, #108]	@ (8001098 <parse_rmc+0x220>)
 800102a:	7822      	ldrb	r2, [r4, #0]
 800102c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
                    break;
 8001030:	e77e      	b.n	8000f30 <parse_rmc+0xb8>
                    rmc.speed = atof((char *)rmc_sentence);
 8001032:	4620      	mov	r0, r4
 8001034:	f008 fdee 	bl	8009c14 <atof>
 8001038:	ec51 0b10 	vmov	r0, r1, d0
 800103c:	f7ff fde4 	bl	8000c08 <__aeabi_d2f>
 8001040:	4b15      	ldr	r3, [pc, #84]	@ (8001098 <parse_rmc+0x220>)
 8001042:	6298      	str	r0, [r3, #40]	@ 0x28
                    break;
 8001044:	e774      	b.n	8000f30 <parse_rmc+0xb8>
                    rmc.course = atof((char *)rmc_sentence);
 8001046:	4620      	mov	r0, r4
 8001048:	f008 fde4 	bl	8009c14 <atof>
 800104c:	ec51 0b10 	vmov	r0, r1, d0
 8001050:	f7ff fdda 	bl	8000c08 <__aeabi_d2f>
 8001054:	4b10      	ldr	r3, [pc, #64]	@ (8001098 <parse_rmc+0x220>)
 8001056:	62d8      	str	r0, [r3, #44]	@ 0x2c
                    break;
 8001058:	e76a      	b.n	8000f30 <parse_rmc+0xb8>
                    rmc.date.Day = (rmc_sentence[0] - '0') * 10 + (rmc_sentence[1] - '0');
 800105a:	7820      	ldrb	r0, [r4, #0]
 800105c:	7863      	ldrb	r3, [r4, #1]
 800105e:	4a0e      	ldr	r2, [pc, #56]	@ (8001098 <parse_rmc+0x220>)
 8001060:	210a      	movs	r1, #10
 8001062:	3830      	subs	r0, #48	@ 0x30
 8001064:	3b30      	subs	r3, #48	@ 0x30
 8001066:	fb01 3300 	mla	r3, r1, r0, r3
 800106a:	6113      	str	r3, [r2, #16]
                    rmc.date.Mon = (rmc_sentence[2] - '0') * 10 + (rmc_sentence[3] - '0');
 800106c:	78a0      	ldrb	r0, [r4, #2]
 800106e:	78e3      	ldrb	r3, [r4, #3]
 8001070:	3830      	subs	r0, #48	@ 0x30
 8001072:	3b30      	subs	r3, #48	@ 0x30
 8001074:	fb01 3300 	mla	r3, r1, r0, r3
 8001078:	6153      	str	r3, [r2, #20]
                    rmc.date.Yr = (rmc_sentence[4] - '0') * 10 + (rmc_sentence[5] - '0');
 800107a:	7920      	ldrb	r0, [r4, #4]
 800107c:	7963      	ldrb	r3, [r4, #5]
 800107e:	3830      	subs	r0, #48	@ 0x30
 8001080:	3b30      	subs	r3, #48	@ 0x30
 8001082:	fb01 3300 	mla	r3, r1, r0, r3
 8001086:	6193      	str	r3, [r2, #24]
                    break;
 8001088:	e752      	b.n	8000f30 <parse_rmc+0xb8>
 800108a:	bf00      	nop
 800108c:	f3af 8000 	nop.w
 8001090:	33333333 	.word	0x33333333
 8001094:	3fe33333 	.word	0x3fe33333
 8001098:	200003d0 	.word	0x200003d0
 800109c:	40590000 	.word	0x40590000

080010a0 <sendRMCDataToFlash>:


void sendRMCDataToFlash(RMCSTRUCT *rmcData) {
 80010a0:	b570      	push	{r4, r5, r6, lr}
	 RMCSTRUCT *mail = (RMCSTRUCT *)osMailAlloc(RMC_MailQFLASHId, osWaitForever); // Allocate memory for mail
 80010a2:	4e0f      	ldr	r6, [pc, #60]	@ (80010e0 <sendRMCDataToFlash+0x40>)
void sendRMCDataToFlash(RMCSTRUCT *rmcData) {
 80010a4:	4605      	mov	r5, r0
	 RMCSTRUCT *mail = (RMCSTRUCT *)osMailAlloc(RMC_MailQFLASHId, osWaitForever); // Allocate memory for mail
 80010a6:	f04f 31ff 	mov.w	r1, #4294967295
 80010aa:	6830      	ldr	r0, [r6, #0]
 80010ac:	f007 f8ab 	bl	8008206 <osMailAlloc>
 80010b0:	4604      	mov	r4, r0
	if (mail != NULL) {
 80010b2:	b180      	cbz	r0, 80010d6 <sendRMCDataToFlash+0x36>
		*mail = *rmcData; // Copy data into allocated memory
 80010b4:	2258      	movs	r2, #88	@ 0x58
 80010b6:	4629      	mov	r1, r5
 80010b8:	f00b fcb6 	bl	800ca28 <memcpy>
		osStatus status = osMailPut(RMC_MailQFLASHId, mail); // Put message in queue
 80010bc:	4621      	mov	r1, r4
 80010be:	6830      	ldr	r0, [r6, #0]
 80010c0:	f007 f8a6 	bl	8008210 <osMailPut>
		if (status != osOK) {
 80010c4:	4601      	mov	r1, r0
 80010c6:	b120      	cbz	r0, 80010d2 <sendRMCDataToFlash+0x32>
			printf("\n\n-------------------------Failed to send message: %d ------------------------\n\n", status);
 80010c8:	4806      	ldr	r0, [pc, #24]	@ (80010e4 <sendRMCDataToFlash+0x44>)
	}
	else{
		printf("CANNOT MALLOC MAIL");
	}

}
 80010ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			printf("\n\n-------------------------SEND message successfullly at GPS: %d ------------------------\n\n", status);
 80010ce:	f00a bc31 	b.w	800b934 <iprintf>
 80010d2:	4805      	ldr	r0, [pc, #20]	@ (80010e8 <sendRMCDataToFlash+0x48>)
 80010d4:	e7f9      	b.n	80010ca <sendRMCDataToFlash+0x2a>
}
 80010d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		printf("CANNOT MALLOC MAIL");
 80010da:	4804      	ldr	r0, [pc, #16]	@ (80010ec <sendRMCDataToFlash+0x4c>)
 80010dc:	f00a bc2a 	b.w	800b934 <iprintf>
 80010e0:	2000218c 	.word	0x2000218c
 80010e4:	0800fe12 	.word	0x0800fe12
 80010e8:	0800fe63 	.word	0x0800fe63
 80010ec:	0800febf 	.word	0x0800febf

080010f0 <handleIncomingChar>:

int handleIncomingChar(char c) {
 80010f0:	b570      	push	{r4, r5, r6, lr}
    static char tempBuffer[256]; // Increased size for safety
    static uint16_t tempIndex = 0;

    if (c == '\n') { // Sentence delimiter
        tempBuffer[tempIndex] = '\0'; // Null-terminate the string
 80010f2:	4c12      	ldr	r4, [pc, #72]	@ (800113c <handleIncomingChar+0x4c>)
    if (c == '\n') { // Sentence delimiter
 80010f4:	280a      	cmp	r0, #10
        tempBuffer[tempIndex] = '\0'; // Null-terminate the string
 80010f6:	8823      	ldrh	r3, [r4, #0]
    if (c == '\n') { // Sentence delimiter
 80010f8:	d112      	bne.n	8001120 <handleIncomingChar+0x30>
        tempBuffer[tempIndex] = '\0'; // Null-terminate the string
 80010fa:	4d11      	ldr	r5, [pc, #68]	@ (8001140 <handleIncomingChar+0x50>)
        if (strstr(tempBuffer, "$GNRMC")){ // Detect `$GNRMC`
 80010fc:	4911      	ldr	r1, [pc, #68]	@ (8001144 <handleIncomingChar+0x54>)
        tempBuffer[tempIndex] = '\0'; // Null-terminate the string
 80010fe:	2600      	movs	r6, #0
        if (strstr(tempBuffer, "$GNRMC")){ // Detect `$GNRMC`
 8001100:	4628      	mov	r0, r5
        tempBuffer[tempIndex] = '\0'; // Null-terminate the string
 8001102:	54ee      	strb	r6, [r5, r3]
        if (strstr(tempBuffer, "$GNRMC")){ // Detect `$GNRMC`
 8001104:	f00a fe36 	bl	800bd74 <strstr>
 8001108:	b138      	cbz	r0, 800111a <handleIncomingChar+0x2a>
            strncpy((char*)rmc_str, tempBuffer, sizeof(rmc_str)); // Copy sentence
 800110a:	480f      	ldr	r0, [pc, #60]	@ (8001148 <handleIncomingChar+0x58>)
 800110c:	2280      	movs	r2, #128	@ 0x80
 800110e:	4629      	mov	r1, r5
 8001110:	f00a fe07 	bl	800bd22 <strncpy>
            tempIndex = 0;
 8001114:	8026      	strh	r6, [r4, #0]
 8001116:	2001      	movs	r0, #1
    } else {
        printf("Warning: Sentence too long, discarding\n");
        tempIndex = 0; // Reset if line too long
    }
    return 0;
}
 8001118:	bd70      	pop	{r4, r5, r6, pc}
        tempIndex = 0; // Reset for the next sentence
 800111a:	8020      	strh	r0, [r4, #0]
    return 0;
 800111c:	2000      	movs	r0, #0
 800111e:	e7fb      	b.n	8001118 <handleIncomingChar+0x28>
    } else if (tempIndex < sizeof(tempBuffer) - 1) {
 8001120:	2bfe      	cmp	r3, #254	@ 0xfe
 8001122:	d804      	bhi.n	800112e <handleIncomingChar+0x3e>
        tempBuffer[tempIndex++] = c;
 8001124:	1c5a      	adds	r2, r3, #1
 8001126:	8022      	strh	r2, [r4, #0]
 8001128:	4a05      	ldr	r2, [pc, #20]	@ (8001140 <handleIncomingChar+0x50>)
 800112a:	54d0      	strb	r0, [r2, r3]
 800112c:	e7f6      	b.n	800111c <handleIncomingChar+0x2c>
        printf("Warning: Sentence too long, discarding\n");
 800112e:	4807      	ldr	r0, [pc, #28]	@ (800114c <handleIncomingChar+0x5c>)
 8001130:	f00a fc70 	bl	800ba14 <puts>
        tempIndex = 0; // Reset if line too long
 8001134:	2300      	movs	r3, #0
 8001136:	8023      	strh	r3, [r4, #0]
 8001138:	e7f0      	b.n	800111c <handleIncomingChar+0x2c>
 800113a:	bf00      	nop
 800113c:	2000036e 	.word	0x2000036e
 8001140:	2000026e 	.word	0x2000026e
 8001144:	0800fed2 	.word	0x0800fed2
 8001148:	20001ab8 	.word	0x20001ab8
 800114c:	0800fed9 	.word	0x0800fed9

08001150 <getRMC>:

void getRMC() {
    static uint16_t lastReadIndex = 0; // Tracks the last read position in DMA
    uint16_t writeIndex = GPS_STACK_SIZE - __HAL_DMA_GET_COUNTER(&hdma_usart2_rx);
 8001150:	4b3c      	ldr	r3, [pc, #240]	@ (8001244 <getRMC+0xf4>)
 8001152:	681b      	ldr	r3, [r3, #0]
void getRMC() {
 8001154:	b570      	push	{r4, r5, r6, lr}
    uint16_t writeIndex = GPS_STACK_SIZE - __HAL_DMA_GET_COUNTER(&hdma_usart2_rx);
 8001156:	685c      	ldr	r4, [r3, #4]

    // Process new data in the buffer
    while (lastReadIndex != writeIndex) {
 8001158:	4d3b      	ldr	r5, [pc, #236]	@ (8001248 <getRMC+0xf8>)
        char c = gpsSentence[lastReadIndex];
 800115a:	4e3c      	ldr	r6, [pc, #240]	@ (800124c <getRMC+0xfc>)
    uint16_t writeIndex = GPS_STACK_SIZE - __HAL_DMA_GET_COUNTER(&hdma_usart2_rx);
 800115c:	f5c4 54b4 	rsb	r4, r4, #5760	@ 0x1680
 8001160:	b2a4      	uxth	r4, r4
    while (lastReadIndex != writeIndex) {
 8001162:	882b      	ldrh	r3, [r5, #0]
 8001164:	42a3      	cmp	r3, r4
 8001166:	d14b      	bne.n	8001200 <getRMC+0xb0>

        lastReadIndex = (lastReadIndex + 1) % GPS_STACK_SIZE;
    }

    // Process `$GNRMC` sentence if detected
    if (isRMCExist){
 8001168:	4e39      	ldr	r6, [pc, #228]	@ (8001250 <getRMC+0x100>)
 800116a:	4c3a      	ldr	r4, [pc, #232]	@ (8001254 <getRMC+0x104>)
 800116c:	6833      	ldr	r3, [r6, #0]
 800116e:	b1fb      	cbz	r3, 80011b0 <getRMC+0x60>
		parse_rmc(rmc_str);// Parse the `$GNRMC` sentence
		display_rmc_data();
		get_RTC_time_date(&rmc);
 8001170:	4d39      	ldr	r5, [pc, #228]	@ (8001258 <getRMC+0x108>)
		parse_rmc(rmc_str);// Parse the `$GNRMC` sentence
 8001172:	483a      	ldr	r0, [pc, #232]	@ (800125c <getRMC+0x10c>)
 8001174:	f7ff fe80 	bl	8000e78 <parse_rmc>
		display_rmc_data();
 8001178:	f7ff fe14 	bl	8000da4 <display_rmc_data>
		get_RTC_time_date(&rmc);
 800117c:	4628      	mov	r0, r5
 800117e:	f002 f8df 	bl	8003340 <get_RTC_time_date>

//		if (rmc.isValid &&
//			(rmc_saved.isValid == 0 ||
//			 isWithinThreshold(rmc_saved.lcation.latitude, rmc_saved.lcation.longitude,
//							   rmc.lcation.latitude, rmc.lcation.longitude, 1.0))) {
		if (rmc.isValid){
 8001182:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8001184:	2b00      	cmp	r3, #0
 8001186:	d04c      	beq.n	8001222 <getRMC+0xd2>
			printf("\n\n------------ Sending RMC ------------\n\n");
 8001188:	4835      	ldr	r0, [pc, #212]	@ (8001260 <getRMC+0x110>)
 800118a:	f00a fc43 	bl	800ba14 <puts>
			sendRMCDataToFlash(&rmc);
 800118e:	4628      	mov	r0, r5
 8001190:	f7ff ff86 	bl	80010a0 <sendRMCDataToFlash>
			getRMC_time = 0;
 8001194:	2300      	movs	r3, #0
			rmc_saved = rmc;
 8001196:	4833      	ldr	r0, [pc, #204]	@ (8001264 <getRMC+0x114>)
			getRMC_time = 0;
 8001198:	6023      	str	r3, [r4, #0]
			rmc_saved = rmc;
 800119a:	2258      	movs	r2, #88	@ 0x58
 800119c:	4629      	mov	r1, r5
 800119e:	f00b fc43 	bl	800ca28 <memcpy>
			printf("\n\n------------ DATA FROM GPS MODULE IS NOT VALID YET ------------\n\n");
		}


        // Clear RMC data after processing
        memset(rmc_str, 0x00, sizeof(rmc_str));
 80011a2:	482e      	ldr	r0, [pc, #184]	@ (800125c <getRMC+0x10c>)
 80011a4:	2280      	movs	r2, #128	@ 0x80
 80011a6:	2100      	movs	r1, #0
 80011a8:	f00a fd94 	bl	800bcd4 <memset>
        isRMCExist = 0;
 80011ac:	2300      	movs	r3, #0
 80011ae:	6033      	str	r3, [r6, #0]
    }

    // GPS timeout logic
    if (getRMC_time >= 150 && getRMC_time % 150 == 0) {
 80011b0:	6823      	ldr	r3, [r4, #0]
 80011b2:	2b95      	cmp	r3, #149	@ 0x95
 80011b4:	dd0a      	ble.n	80011cc <getRMC+0x7c>
 80011b6:	2296      	movs	r2, #150	@ 0x96
 80011b8:	fb93 f1f2 	sdiv	r1, r3, r2
 80011bc:	fb02 3311 	mls	r3, r2, r1, r3
 80011c0:	b923      	cbnz	r3, 80011cc <getRMC+0x7c>
        printf("\n\n-------------------  COLD START GPS module -----------------------\n\n");
 80011c2:	4829      	ldr	r0, [pc, #164]	@ (8001268 <getRMC+0x118>)
 80011c4:	f00a fc26 	bl	800ba14 <puts>
        coldStart();
 80011c8:	f7ff fda4 	bl	8000d14 <coldStart>
    }

    if (getRMC_time >= 500) {
 80011cc:	6823      	ldr	r3, [r4, #0]
 80011ce:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80011d2:	db0f      	blt.n	80011f4 <getRMC+0xa4>
        GPS_DISABLE();
 80011d4:	2201      	movs	r2, #1
 80011d6:	2104      	movs	r1, #4
 80011d8:	4824      	ldr	r0, [pc, #144]	@ (800126c <getRMC+0x11c>)
 80011da:	f004 fe47 	bl	8005e6c <HAL_GPIO_WritePin>
        osDelay(500);
 80011de:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80011e2:	f006 ff15 	bl	8008010 <osDelay>
        GPS_ENABLE();
 80011e6:	4821      	ldr	r0, [pc, #132]	@ (800126c <getRMC+0x11c>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	2104      	movs	r1, #4
 80011ec:	f004 fe3e 	bl	8005e6c <HAL_GPIO_WritePin>
        getRMC_time = 0;
 80011f0:	2300      	movs	r3, #0
 80011f2:	6023      	str	r3, [r4, #0]
    }

    printf("Elapsed Time: %d\n", getRMC_time);
 80011f4:	6821      	ldr	r1, [r4, #0]
 80011f6:	481e      	ldr	r0, [pc, #120]	@ (8001270 <getRMC+0x120>)
}
 80011f8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    printf("Elapsed Time: %d\n", getRMC_time);
 80011fc:	f00a bb9a 	b.w	800b934 <iprintf>
        if (handleIncomingChar(c)){
 8001200:	5cf0      	ldrb	r0, [r6, r3]
 8001202:	f7ff ff75 	bl	80010f0 <handleIncomingChar>
 8001206:	b110      	cbz	r0, 800120e <getRMC+0xbe>
        	isRMCExist = 1; // `$GNRMC` sentence is ready
 8001208:	4b11      	ldr	r3, [pc, #68]	@ (8001250 <getRMC+0x100>)
 800120a:	2201      	movs	r2, #1
 800120c:	601a      	str	r2, [r3, #0]
        lastReadIndex = (lastReadIndex + 1) % GPS_STACK_SIZE;
 800120e:	882b      	ldrh	r3, [r5, #0]
 8001210:	f44f 52b4 	mov.w	r2, #5760	@ 0x1680
 8001214:	3301      	adds	r3, #1
 8001216:	fbb3 f1f2 	udiv	r1, r3, r2
 800121a:	fb02 3311 	mls	r3, r2, r1, r3
 800121e:	802b      	strh	r3, [r5, #0]
 8001220:	e79f      	b.n	8001162 <getRMC+0x12>
		} else if (rmc_saved.isValid) {
 8001222:	4d10      	ldr	r5, [pc, #64]	@ (8001264 <getRMC+0x114>)
 8001224:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8001226:	b14b      	cbz	r3, 800123c <getRMC+0xec>
			printf("\n\n------------ GPS BUG: Sending latest RMC ------------\n\n");
 8001228:	4812      	ldr	r0, [pc, #72]	@ (8001274 <getRMC+0x124>)
 800122a:	f00a fbf3 	bl	800ba14 <puts>
			get_RTC_time_date(&rmc_saved);
 800122e:	4628      	mov	r0, r5
 8001230:	f002 f886 	bl	8003340 <get_RTC_time_date>
			sendRMCDataToFlash(&rmc_saved);
 8001234:	4628      	mov	r0, r5
 8001236:	f7ff ff33 	bl	80010a0 <sendRMCDataToFlash>
 800123a:	e7b2      	b.n	80011a2 <getRMC+0x52>
			printf("\n\n------------ DATA FROM GPS MODULE IS NOT VALID YET ------------\n\n");
 800123c:	480e      	ldr	r0, [pc, #56]	@ (8001278 <getRMC+0x128>)
 800123e:	f00a fbe9 	bl	800ba14 <puts>
 8001242:	e7ae      	b.n	80011a2 <getRMC+0x52>
 8001244:	200021e8 	.word	0x200021e8
 8001248:	2000026c 	.word	0x2000026c
 800124c:	20000428 	.word	0x20000428
 8001250:	20000374 	.word	0x20000374
 8001254:	20000370 	.word	0x20000370
 8001258:	200003d0 	.word	0x200003d0
 800125c:	20001ab8 	.word	0x20001ab8
 8001260:	0800ff00 	.word	0x0800ff00
 8001264:	20000378 	.word	0x20000378
 8001268:	0800ffa5 	.word	0x0800ffa5
 800126c:	48000800 	.word	0x48000800
 8001270:	0800ffeb 	.word	0x0800ffeb
 8001274:	0800ff29 	.word	0x0800ff29
 8001278:	0800ff62 	.word	0x0800ff62

0800127c <StartGPS>:

void StartGPS(void const * argument)
{
 800127c:	b580      	push	{r7, lr}
	printf("\n\n--------------------STARTING GPS ---------------------\n\n");
 800127e:	481c      	ldr	r0, [pc, #112]	@ (80012f0 <StartGPS+0x74>)

	RingBufferDmaU8_initUSARTRx(&GPSRxDMARing, &huart2, gpsSentence, GPS_STACK_SIZE);
	memset(gpsSentence, 0x00, GPS_STACK_SIZE);
	while(1)
	{
		if (osMutexWait(myMutexHandle, osWaitForever) == osOK){
 8001280:	4e1c      	ldr	r6, [pc, #112]	@ (80012f4 <StartGPS+0x78>)
			printf("\n\n----------------------- Inside GPS ------------------------\n\n");
 8001282:	4f1d      	ldr	r7, [pc, #116]	@ (80012f8 <StartGPS+0x7c>)
	//		uint32_t freeStack2 = osThreadGetStackSpace(GPSHandle);
	//		printf("Thread GPS %p is running low on stack: %04ld bytes remaining\n", GPSHandle, freeStack2);
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 8001284:	4d1d      	ldr	r5, [pc, #116]	@ (80012fc <StartGPS+0x80>)
	printf("\n\n--------------------STARTING GPS ---------------------\n\n");
 8001286:	f00a fbc5 	bl	800ba14 <puts>
	RingBufferDmaU8_initUSARTRx(&GPSRxDMARing, &huart2, gpsSentence, GPS_STACK_SIZE);
 800128a:	4a1d      	ldr	r2, [pc, #116]	@ (8001300 <StartGPS+0x84>)
 800128c:	491d      	ldr	r1, [pc, #116]	@ (8001304 <StartGPS+0x88>)
 800128e:	481e      	ldr	r0, [pc, #120]	@ (8001308 <StartGPS+0x8c>)
 8001290:	f44f 53b4 	mov.w	r3, #5760	@ 0x1680
 8001294:	f002 f810 	bl	80032b8 <RingBufferDmaU8_initUSARTRx>
	memset(gpsSentence, 0x00, GPS_STACK_SIZE);
 8001298:	4819      	ldr	r0, [pc, #100]	@ (8001300 <StartGPS+0x84>)
 800129a:	f44f 52b4 	mov.w	r2, #5760	@ 0x1680
 800129e:	2100      	movs	r1, #0
 80012a0:	f00a fd18 	bl	800bcd4 <memset>
		if (osMutexWait(myMutexHandle, osWaitForever) == osOK){
 80012a4:	6830      	ldr	r0, [r6, #0]
 80012a6:	f04f 31ff 	mov.w	r1, #4294967295
 80012aa:	f006 fec0 	bl	800802e <osMutexWait>
 80012ae:	4604      	mov	r4, r0
 80012b0:	2800      	cmp	r0, #0
 80012b2:	d1f7      	bne.n	80012a4 <StartGPS+0x28>
			printf("\n\n----------------------- Inside GPS ------------------------\n\n");
 80012b4:	4638      	mov	r0, r7
 80012b6:	f00a fbad 	bl	800ba14 <puts>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 80012ba:	2201      	movs	r2, #1
 80012bc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80012c0:	4628      	mov	r0, r5
 80012c2:	f004 fdd3 	bl	8005e6c <HAL_GPIO_WritePin>
			osDelay(500);
 80012c6:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80012ca:	f006 fea1 	bl	8008010 <osDelay>
//			printf("Hello World!!!!\n");
			getRMC();
 80012ce:	f7ff ff3f 	bl	8001150 <getRMC>
			osMutexRelease(myMutexHandle);
 80012d2:	6830      	ldr	r0, [r6, #0]
 80012d4:	f006 fed1 	bl	800807a <osMutexRelease>
//		printf("\n------------------------------ GPS SENTENCE ------------------------------\n");
//		printf((char*) gpsSentence);

			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 80012d8:	4628      	mov	r0, r5
 80012da:	4622      	mov	r2, r4
 80012dc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80012e0:	f004 fdc4 	bl	8005e6c <HAL_GPIO_WritePin>
			osDelay(500);
 80012e4:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80012e8:	f006 fe92 	bl	8008010 <osDelay>
 80012ec:	e7da      	b.n	80012a4 <StartGPS+0x28>
 80012ee:	bf00      	nop
 80012f0:	0800fffd 	.word	0x0800fffd
 80012f4:	20002194 	.word	0x20002194
 80012f8:	08010037 	.word	0x08010037
 80012fc:	48000800 	.word	0x48000800
 8001300:	20000428 	.word	0x20000428
 8001304:	2000233c 	.word	0x2000233c
 8001308:	20001aa8 	.word	0x20001aa8

0800130c <create_terminal_registration>:
RMCSTRUCT rmc_jt = {0};
uint8_t terminal_phone_number[6] = {0};
GSM_MAIL_STRUCT receivedDataGSM = {0};


JT808_TerminalRegistration create_terminal_registration(){
 800130c:	b5f0      	push	{r4, r5, r6, r7, lr}
	JT808_TerminalRegistration reg_msg = {
 800130e:	4b11      	ldr	r3, [pc, #68]	@ (8001354 <create_terminal_registration+0x48>)
JT808_TerminalRegistration create_terminal_registration(){
 8001310:	b091      	sub	sp, #68	@ 0x44
	JT808_TerminalRegistration reg_msg = {
 8001312:	ac01      	add	r4, sp, #4
JT808_TerminalRegistration create_terminal_registration(){
 8001314:	4605      	mov	r5, r0
	JT808_TerminalRegistration reg_msg = {
 8001316:	f103 0738 	add.w	r7, r3, #56	@ 0x38
 800131a:	4622      	mov	r2, r4
 800131c:	6818      	ldr	r0, [r3, #0]
 800131e:	6859      	ldr	r1, [r3, #4]
 8001320:	4626      	mov	r6, r4
 8001322:	c603      	stmia	r6!, {r0, r1}
 8001324:	3308      	adds	r3, #8
 8001326:	42bb      	cmp	r3, r7
 8001328:	4634      	mov	r4, r6
 800132a:	d1f7      	bne.n	800131c <create_terminal_registration+0x10>
 800132c:	6818      	ldr	r0, [r3, #0]
 800132e:	6030      	str	r0, [r6, #0]
        .plate_no = {0x00, 0x00, 0x00, 0x00, 0x35, 0x36, 0x37, 0x38, 0x39, 0x31, 0x20, 0x32, 0x39, 0x4C, 0x31, 0x33, 0x34, 0x31, 0x35, 0x34},
        .check_sum = 0x00,  // Placeholder, will be set by the function
        .end_mask = 0x7E
    };

	return reg_msg;
 8001330:	4613      	mov	r3, r2
 8001332:	ae0f      	add	r6, sp, #60	@ 0x3c
 8001334:	462a      	mov	r2, r5
 8001336:	461c      	mov	r4, r3
 8001338:	cc03      	ldmia	r4!, {r0, r1}
 800133a:	42b4      	cmp	r4, r6
 800133c:	6010      	str	r0, [r2, #0]
 800133e:	6051      	str	r1, [r2, #4]
 8001340:	4623      	mov	r3, r4
 8001342:	f102 0208 	add.w	r2, r2, #8
 8001346:	d1f6      	bne.n	8001336 <create_terminal_registration+0x2a>
 8001348:	6820      	ldr	r0, [r4, #0]
 800134a:	6010      	str	r0, [r2, #0]
}
 800134c:	4628      	mov	r0, r5
 800134e:	b011      	add	sp, #68	@ 0x44
 8001350:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001352:	bf00      	nop
 8001354:	0800fbd0 	.word	0x0800fbd0

08001358 <create_location_info_report>:


JT808_LocationInfoReport create_location_info_report() {
 8001358:	b530      	push	{r4, r5, lr}
	JT808_LocationInfoReport location_info = {
 800135a:	2541      	movs	r5, #65	@ 0x41
JT808_LocationInfoReport create_location_info_report() {
 800135c:	b093      	sub	sp, #76	@ 0x4c
 800135e:	4604      	mov	r4, r0
	JT808_LocationInfoReport location_info = {
 8001360:	462a      	mov	r2, r5
 8001362:	4906      	ldr	r1, [pc, #24]	@ (800137c <create_location_info_report+0x24>)
 8001364:	a801      	add	r0, sp, #4
 8001366:	f00b fb5f 	bl	800ca28 <memcpy>
        .additional = {0x01, 0x00, 0xFD, 0x04, 0x03, 0xF1, 0x00, 0x00, 0x0A}, // 01 00 FD 04 03 F1 00 00 0A
        .end_mask = 0x7E                       // 7E
    };
	// Copy the terminal phone number into the structure

    return location_info;
 800136a:	462a      	mov	r2, r5
 800136c:	a901      	add	r1, sp, #4
 800136e:	4620      	mov	r0, r4
 8001370:	f00b fb5a 	bl	800ca28 <memcpy>
}
 8001374:	4620      	mov	r0, r4
 8001376:	b013      	add	sp, #76	@ 0x4c
 8001378:	bd30      	pop	{r4, r5, pc}
 800137a:	bf00      	nop
 800137c:	0800fc0c 	.word	0x0800fc0c

08001380 <set_status_bit>:
void clearBit(uint8_t *status, int bitPosition) {
    *status &= ~(1 << bitPosition); // Clear the specific bit to 0
}

void set_status_bit(uint8_t *status_bit){
	if(rmc_jt.lcation.NS == 'N') clearBit(status_bit+3, 2);
 8001380:	4a0a      	ldr	r2, [pc, #40]	@ (80013ac <set_status_bit+0x2c>)
    *status &= ~(1 << bitPosition); // Clear the specific bit to 0
 8001382:	78c3      	ldrb	r3, [r0, #3]
	if(rmc_jt.lcation.NS == 'N') clearBit(status_bit+3, 2);
 8001384:	f892 1040 	ldrb.w	r1, [r2, #64]	@ 0x40
 8001388:	294e      	cmp	r1, #78	@ 0x4e
    *status &= ~(1 << bitPosition); // Clear the specific bit to 0
 800138a:	bf0c      	ite	eq
 800138c:	f003 03fb 	andeq.w	r3, r3, #251	@ 0xfb
    *status |= (1 << bitPosition);  // Set the specific bit to 1
 8001390:	f043 0304 	orrne.w	r3, r3, #4
 8001394:	70c3      	strb	r3, [r0, #3]
	else setBit(status_bit+3, 2);

	if(rmc_jt.lcation.EW == 'E') clearBit(status_bit+3, 3);
 8001396:	f892 2050 	ldrb.w	r2, [r2, #80]	@ 0x50
 800139a:	2a45      	cmp	r2, #69	@ 0x45
    *status &= ~(1 << bitPosition); // Clear the specific bit to 0
 800139c:	bf0c      	ite	eq
 800139e:	f003 03f7 	andeq.w	r3, r3, #247	@ 0xf7
    *status |= (1 << bitPosition);  // Set the specific bit to 1
 80013a2:	f043 0308 	orrne.w	r3, r3, #8
 80013a6:	70c3      	strb	r3, [r0, #3]
	else setBit(status_bit+3, 3);
}
 80013a8:	4770      	bx	lr
 80013aa:	bf00      	nop
 80013ac:	20001b40 	.word	0x20001b40

080013b0 <send_AT_command>:
    memcpy(message_array, location_info, *array_length);  // Copy struct data into message array

    return message_array;
}

void send_AT_command(const char *command) {
 80013b0:	b510      	push	{r4, lr}
 80013b2:	4604      	mov	r4, r0
    HAL_UART_Transmit(&huart3, (uint8_t *)command, strlen(command), 5000);
 80013b4:	f7fe ff6c 	bl	8000290 <strlen>
 80013b8:	4621      	mov	r1, r4
 80013ba:	b282      	uxth	r2, r0
}
 80013bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_UART_Transmit(&huart3, (uint8_t *)command, strlen(command), 5000);
 80013c0:	4802      	ldr	r0, [pc, #8]	@ (80013cc <send_AT_command+0x1c>)
 80013c2:	f241 3388 	movw	r3, #5000	@ 0x1388
 80013c6:	f006 bcb3 	b.w	8007d30 <HAL_UART_Transmit>
 80013ca:	bf00      	nop
 80013cc:	200022b4 	.word	0x200022b4

080013d0 <SIM_UART_ReInitializeRxDMA>:

void SIM_UART_ReInitializeRxDMA(void){
 80013d0:	b510      	push	{r4, lr}
	HAL_StatusTypeDef ret = HAL_UART_Abort(&huart3);
 80013d2:	4809      	ldr	r0, [pc, #36]	@ (80013f8 <SIM_UART_ReInitializeRxDMA+0x28>)
 80013d4:	f006 fa3f 	bl	8007856 <HAL_UART_Abort>
	if(ret != HAL_OK)
 80013d8:	b108      	cbz	r0, 80013de <SIM_UART_ReInitializeRxDMA+0xe>
	{
		Error_Handler();			
 80013da:	f002 fb10 	bl	80039fe <Error_Handler>
	}		
	osDelay(50);	//	50 is OK
 80013de:	2032      	movs	r0, #50	@ 0x32
 80013e0:	f006 fe16 	bl	8008010 <osDelay>
	//memset(gnssDmaRingBufferMemory, 0x20, sizeof(gnssDmaRingBufferMemory));	// insert buffer with space character	
	RingBufferDmaU8_initUSARTRx(&SIMRxDMARing, &huart3, response, SIM_RESPONSE_MAX_SIZE);
}
 80013e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	RingBufferDmaU8_initUSARTRx(&SIMRxDMARing, &huart3, response, SIM_RESPONSE_MAX_SIZE);
 80013e8:	4a04      	ldr	r2, [pc, #16]	@ (80013fc <SIM_UART_ReInitializeRxDMA+0x2c>)
 80013ea:	4903      	ldr	r1, [pc, #12]	@ (80013f8 <SIM_UART_ReInitializeRxDMA+0x28>)
 80013ec:	4804      	ldr	r0, [pc, #16]	@ (8001400 <SIM_UART_ReInitializeRxDMA+0x30>)
 80013ee:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80013f2:	f001 bf61 	b.w	80032b8 <RingBufferDmaU8_initUSARTRx>
 80013f6:	bf00      	nop
 80013f8:	200022b4 	.word	0x200022b4
 80013fc:	20001de8 	.word	0x20001de8
 8001400:	20001dd8 	.word	0x20001dd8

08001404 <receive_response>:
	}
	return i;
		
}

void receive_response() {
 8001404:	b508      	push	{r3, lr}
	printf("\n");
 8001406:	200a      	movs	r0, #10
 8001408:	f00a faa6 	bl	800b958 <putchar>
	//while(response[1] == '\0'){}
	printf((char *)response);
 800140c:	4803      	ldr	r0, [pc, #12]	@ (800141c <receive_response+0x18>)
 800140e:	f00a fa91 	bl	800b934 <iprintf>
	printf("\n");
//	osDelay(1000);
}
 8001412:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	printf("\n");
 8001416:	200a      	movs	r0, #10
 8001418:	f00a ba9e 	b.w	800b958 <putchar>
 800141c:	20001de8 	.word	0x20001de8

08001420 <init_SIM_module>:

void init_SIM_module() {
 8001420:	b510      	push	{r4, lr}
    
    // Check if module responds
	SIM_ENABLE();
 8001422:	4c0b      	ldr	r4, [pc, #44]	@ (8001450 <init_SIM_module+0x30>)
 8001424:	2201      	movs	r2, #1
 8001426:	4611      	mov	r1, r2
 8001428:	4620      	mov	r0, r4
 800142a:	f004 fd1f 	bl	8005e6c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 800142e:	2200      	movs	r2, #0
 8001430:	2102      	movs	r1, #2
 8001432:	4620      	mov	r0, r4
 8001434:	f004 fd1a 	bl	8005e6c <HAL_GPIO_WritePin>
	osDelay(2000);
 8001438:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800143c:	f006 fde8 	bl	8008010 <osDelay>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 8001440:	4620      	mov	r0, r4
 8001442:	2201      	movs	r2, #1
}
 8001444:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 8001448:	2102      	movs	r1, #2
 800144a:	f004 bd0f 	b.w	8005e6c <HAL_GPIO_WritePin>
 800144e:	bf00      	nop
 8001450:	48000800 	.word	0x48000800

08001454 <reboot_SIM_module>:

void reboot_SIM_module(){
 8001454:	b510      	push	{r4, lr}
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 8001456:	4c11      	ldr	r4, [pc, #68]	@ (800149c <reboot_SIM_module+0x48>)
 8001458:	2200      	movs	r2, #0
 800145a:	2102      	movs	r1, #2
 800145c:	4620      	mov	r0, r4
 800145e:	f004 fd05 	bl	8005e6c <HAL_GPIO_WritePin>
	osDelay(1500);
 8001462:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8001466:	f006 fdd3 	bl	8008010 <osDelay>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 800146a:	2201      	movs	r2, #1
 800146c:	2102      	movs	r1, #2
 800146e:	4620      	mov	r0, r4
 8001470:	f004 fcfc 	bl	8005e6c <HAL_GPIO_WritePin>
	osDelay(10000);
 8001474:	f242 7010 	movw	r0, #10000	@ 0x2710
 8001478:	f006 fdca 	bl	8008010 <osDelay>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 800147c:	2200      	movs	r2, #0
 800147e:	2102      	movs	r1, #2
 8001480:	4620      	mov	r0, r4
 8001482:	f004 fcf3 	bl	8005e6c <HAL_GPIO_WritePin>
	osDelay(1500);
 8001486:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 800148a:	f006 fdc1 	bl	8008010 <osDelay>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 800148e:	4620      	mov	r0, r4
 8001490:	2201      	movs	r2, #1
}
 8001492:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 8001496:	2102      	movs	r1, #2
 8001498:	f004 bce8 	b.w	8005e6c <HAL_GPIO_WritePin>
 800149c:	48000800 	.word	0x48000800

080014a0 <convert_dec_to_hex_value>:

int convert_dec_to_hex_value(int int_value){
    return (int_value /10*16) + (int_value%10);
 80014a0:	220a      	movs	r2, #10
 80014a2:	fb90 f3f2 	sdiv	r3, r0, r2
 80014a6:	fb02 0013 	mls	r0, r2, r3, r0
}
 80014aa:	eb00 1003 	add.w	r0, r0, r3, lsl #4
 80014ae:	4770      	bx	lr

080014b0 <save_rmc_to_location_info>:


void save_rmc_to_location_info(JT808_LocationInfoReport* location_info){
 80014b0:	b570      	push	{r4, r5, r6, lr}
	location_info->timestamp[0] = (uint8_t)convert_dec_to_hex_value(rmc_jt.date.Yr);  // Assign year (0x23)
 80014b2:	4d43      	ldr	r5, [pc, #268]	@ (80015c0 <save_rmc_to_location_info+0x110>)
void save_rmc_to_location_info(JT808_LocationInfoReport* location_info){
 80014b4:	4604      	mov	r4, r0
	location_info->timestamp[0] = (uint8_t)convert_dec_to_hex_value(rmc_jt.date.Yr);  // Assign year (0x23)
 80014b6:	69a8      	ldr	r0, [r5, #24]
 80014b8:	f7ff fff2 	bl	80014a0 <convert_dec_to_hex_value>
 80014bc:	f884 0023 	strb.w	r0, [r4, #35]	@ 0x23
	location_info->timestamp[1] = (uint8_t)convert_dec_to_hex_value(rmc_jt.date.Mon);          // Assign month (0x11)
 80014c0:	6968      	ldr	r0, [r5, #20]
 80014c2:	f7ff ffed 	bl	80014a0 <convert_dec_to_hex_value>
 80014c6:	f884 0024 	strb.w	r0, [r4, #36]	@ 0x24
	location_info->timestamp[2] = (uint8_t)convert_dec_to_hex_value(rmc_jt.date.Day);            // Assign day (0x08)
 80014ca:	6928      	ldr	r0, [r5, #16]
 80014cc:	f7ff ffe8 	bl	80014a0 <convert_dec_to_hex_value>
 80014d0:	f884 0025 	strb.w	r0, [r4, #37]	@ 0x25
	location_info->timestamp[3] = (uint8_t)convert_dec_to_hex_value(rmc_jt.tim.hour);           // Assign hour (0x14)
 80014d4:	6828      	ldr	r0, [r5, #0]
 80014d6:	f7ff ffe3 	bl	80014a0 <convert_dec_to_hex_value>
 80014da:	f884 0026 	strb.w	r0, [r4, #38]	@ 0x26
	location_info->timestamp[4] = (uint8_t)convert_dec_to_hex_value(rmc_jt.tim.min);         // Assign minute (0x55)
 80014de:	6868      	ldr	r0, [r5, #4]
 80014e0:	f7ff ffde 	bl	80014a0 <convert_dec_to_hex_value>
 80014e4:	f884 0027 	strb.w	r0, [r4, #39]	@ 0x27
	location_info->timestamp[5] = (uint8_t)convert_dec_to_hex_value(rmc_jt.tim.sec);  
 80014e8:	68a8      	ldr	r0, [r5, #8]
 80014ea:	f7ff ffd9 	bl	80014a0 <convert_dec_to_hex_value>
 80014ee:	f884 0028 	strb.w	r0, [r4, #40]	@ 0x28
	double latitude = rmc_jt.lcation.latitude * 1000000;
 80014f2:	e9d5 010e 	ldrd	r0, r1, [r5, #56]	@ 0x38
 80014f6:	a32e      	add	r3, pc, #184	@ (adr r3, 80015b0 <save_rmc_to_location_info+0x100>)
 80014f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014fc:	f7ff f88c 	bl	8000618 <__aeabi_dmul>
	double longitude = rmc_jt.lcation.longitude * 1000000;
	int32_t latitude_int = (int32_t)round(latitude);  // Convert to integer, rounding if needed
 8001500:	ec41 0b10 	vmov	d0, r0, r1
 8001504:	f00e fb10 	bl	800fb28 <round>
 8001508:	ec51 0b10 	vmov	r0, r1, d0
 800150c:	f7ff fb34 	bl	8000b78 <__aeabi_d2iz>
	double longitude = rmc_jt.lcation.longitude * 1000000;
 8001510:	a327      	add	r3, pc, #156	@ (adr r3, 80015b0 <save_rmc_to_location_info+0x100>)
 8001512:	e9d3 2300 	ldrd	r2, r3, [r3]
	int32_t latitude_int = (int32_t)round(latitude);  // Convert to integer, rounding if needed
 8001516:	4606      	mov	r6, r0
	double longitude = rmc_jt.lcation.longitude * 1000000;
 8001518:	e9d5 0112 	ldrd	r0, r1, [r5, #72]	@ 0x48
 800151c:	f7ff f87c 	bl	8000618 <__aeabi_dmul>
	int32_t longitude_int = (int32_t)round(longitude);
 8001520:	ec41 0b10 	vmov	d0, r0, r1
 8001524:	f00e fb00 	bl	800fb28 <round>
 8001528:	ec51 0b10 	vmov	r0, r1, d0
 800152c:	f7ff fb24 	bl	8000b78 <__aeabi_d2iz>
	
	location_info->latitude[0] = (latitude_int >> 24) & 0xFF;  // Most significant byte
 8001530:	0e33      	lsrs	r3, r6, #24
 8001532:	7563      	strb	r3, [r4, #21]
	location_info->latitude[1] = (latitude_int >> 16) & 0xFF;
 8001534:	1433      	asrs	r3, r6, #16
 8001536:	75a3      	strb	r3, [r4, #22]
	location_info->latitude[2] = (latitude_int >> 8) & 0xFF;
 8001538:	1233      	asrs	r3, r6, #8
 800153a:	75e3      	strb	r3, [r4, #23]
	location_info->latitude[3] = latitude_int & 0xFF;
	
	location_info->longitude[0] = (longitude_int >> 24) & 0xFF;  // Most significant byte
 800153c:	0e03      	lsrs	r3, r0, #24
 800153e:	7663      	strb	r3, [r4, #25]
	location_info->longitude[1] = (longitude_int >> 16) & 0xFF;
 8001540:	1403      	asrs	r3, r0, #16
 8001542:	76a3      	strb	r3, [r4, #26]
	location_info->longitude[2] = (longitude_int >> 8) & 0xFF;
 8001544:	1203      	asrs	r3, r0, #8
 8001546:	76e3      	strb	r3, [r4, #27]
	location_info->longitude[3] = longitude_int & 0xFF;
 8001548:	7720      	strb	r0, [r4, #28]
	location_info->latitude[3] = latitude_int & 0xFF;
 800154a:	7626      	strb	r6, [r4, #24]
	
	int speed = round(rmc_jt.speed * 10 * 1.852);
 800154c:	ed95 7a0a 	vldr	s14, [r5, #40]	@ 0x28
 8001550:	eef2 7a04 	vmov.f32	s15, #36	@ 0x41200000  10.0
 8001554:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001558:	ee17 0a90 	vmov	r0, s15
 800155c:	f7ff f804 	bl	8000568 <__aeabi_f2d>
 8001560:	a315      	add	r3, pc, #84	@ (adr r3, 80015b8 <save_rmc_to_location_info+0x108>)
 8001562:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001566:	f7ff f857 	bl	8000618 <__aeabi_dmul>
 800156a:	ec41 0b10 	vmov	d0, r0, r1
 800156e:	f00e fadb 	bl	800fb28 <round>
 8001572:	ec51 0b10 	vmov	r0, r1, d0
 8001576:	f7ff faff 	bl	8000b78 <__aeabi_d2iz>
	location_info->speed[0] = (speed >> 8) & 0xFF;
 800157a:	1203      	asrs	r3, r0, #8
 800157c:	77e3      	strb	r3, [r4, #31]
	location_info->speed[1] =  speed & 0xFF;
 800157e:	f884 0020 	strb.w	r0, [r4, #32]
	
	int direction = round(rmc_jt.course);
 8001582:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 8001584:	f7fe fff0 	bl	8000568 <__aeabi_f2d>
 8001588:	ec41 0b10 	vmov	d0, r0, r1
 800158c:	f00e facc 	bl	800fb28 <round>
 8001590:	ec51 0b10 	vmov	r0, r1, d0
 8001594:	f7ff faf0 	bl	8000b78 <__aeabi_d2iz>
	location_info->direction[0] = (direction >> 8) & 0xFF;
 8001598:	1203      	asrs	r3, r0, #8
	location_info->direction[1] =  direction & 0xFF;
 800159a:	f884 0022 	strb.w	r0, [r4, #34]	@ 0x22
	location_info->direction[0] = (direction >> 8) & 0xFF;
 800159e:	f884 3021 	strb.w	r3, [r4, #33]	@ 0x21
	
	set_status_bit(location_info->status);
 80015a2:	f104 0011 	add.w	r0, r4, #17
}
 80015a6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	set_status_bit(location_info->status);
 80015aa:	f7ff bee9 	b.w	8001380 <set_status_bit>
 80015ae:	bf00      	nop
 80015b0:	00000000 	.word	0x00000000
 80015b4:	412e8480 	.word	0x412e8480
 80015b8:	c083126f 	.word	0xc083126f
 80015bc:	3ffda1ca 	.word	0x3ffda1ca
 80015c0:	20001b40 	.word	0x20001b40

080015c4 <first_check_SIM>:

//AT
int first_check_SIM()
{
 80015c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 80015c6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80015ca:	2100      	movs	r1, #0
 80015cc:	4849      	ldr	r0, [pc, #292]	@ (80016f4 <first_check_SIM+0x130>)
	SIM_UART_ReInitializeRxDMA();
	const char *substring = "PB DONE";
	int count_check = 0;
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
	SIM_UART_ReInitializeRxDMA();
	while(strstr((char *) response, substring) == NULL)
 80015ce:	4d4a      	ldr	r5, [pc, #296]	@ (80016f8 <first_check_SIM+0x134>)
 80015d0:	4c48      	ldr	r4, [pc, #288]	@ (80016f4 <first_check_SIM+0x130>)
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 80015d2:	f00a fb7f 	bl	800bcd4 <memset>
	SIM_UART_ReInitializeRxDMA();
 80015d6:	f7ff fefb 	bl	80013d0 <SIM_UART_ReInitializeRxDMA>
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 80015da:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80015de:	2100      	movs	r1, #0
 80015e0:	4844      	ldr	r0, [pc, #272]	@ (80016f4 <first_check_SIM+0x130>)
 80015e2:	f00a fb77 	bl	800bcd4 <memset>
	SIM_UART_ReInitializeRxDMA();
 80015e6:	f7ff fef3 	bl	80013d0 <SIM_UART_ReInitializeRxDMA>
	while(strstr((char *) response, substring) == NULL)
 80015ea:	4629      	mov	r1, r5
 80015ec:	4620      	mov	r0, r4
 80015ee:	f00a fbc1 	bl	800bd74 <strstr>
 80015f2:	2800      	cmp	r0, #0
 80015f4:	d04d      	beq.n	8001692 <first_check_SIM+0xce>
			memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
			SIM_UART_ReInitializeRxDMA();
			return 0;
		}
	}
	receive_response();
 80015f6:	f7ff ff05 	bl	8001404 <receive_response>
	osDelay(100);
 80015fa:	2064      	movs	r0, #100	@ 0x64
 80015fc:	f006 fd08 	bl	8008010 <osDelay>
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8001600:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001604:	2100      	movs	r1, #0
 8001606:	483b      	ldr	r0, [pc, #236]	@ (80016f4 <first_check_SIM+0x130>)
	count_check = 0;
	osDelay(100);


	for(size_t i = 0; i < 3 ; i++){
		send_AT_command(FIRST_CHECK);
 8001608:	4f3c      	ldr	r7, [pc, #240]	@ (80016fc <first_check_SIM+0x138>)
		osDelay(300);
		receive_response();
		if(strstr((char *) response, CHECK_RESPONSE) != NULL){
 800160a:	4e3d      	ldr	r6, [pc, #244]	@ (8001700 <first_check_SIM+0x13c>)
 800160c:	4d39      	ldr	r5, [pc, #228]	@ (80016f4 <first_check_SIM+0x130>)
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 800160e:	f00a fb61 	bl	800bcd4 <memset>
	SIM_UART_ReInitializeRxDMA();
 8001612:	f7ff fedd 	bl	80013d0 <SIM_UART_ReInitializeRxDMA>
	osDelay(100);
 8001616:	2064      	movs	r0, #100	@ 0x64
 8001618:	f006 fcfa 	bl	8008010 <osDelay>
	for(size_t i = 0; i < 3 ; i++){
 800161c:	2403      	movs	r4, #3
		send_AT_command(FIRST_CHECK);
 800161e:	4638      	mov	r0, r7
 8001620:	f7ff fec6 	bl	80013b0 <send_AT_command>
		osDelay(300);
 8001624:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001628:	f006 fcf2 	bl	8008010 <osDelay>
		receive_response();
 800162c:	f7ff feea 	bl	8001404 <receive_response>
		if(strstr((char *) response, CHECK_RESPONSE) != NULL){
 8001630:	4631      	mov	r1, r6
 8001632:	4628      	mov	r0, r5
 8001634:	f00a fb9e 	bl	800bd74 <strstr>
 8001638:	4601      	mov	r1, r0
 800163a:	b388      	cbz	r0, 80016a0 <first_check_SIM+0xdc>
			printf("SEND AT successfully");
 800163c:	4831      	ldr	r0, [pc, #196]	@ (8001704 <first_check_SIM+0x140>)
		memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
		SIM_UART_ReInitializeRxDMA();
		osDelay(100);
	}
	for(size_t i = 0; i < 3 ; i++){
		send_AT_command("AT+CMEE=2\r\n");
 800163e:	4f32      	ldr	r7, [pc, #200]	@ (8001708 <first_check_SIM+0x144>)
		osDelay(300);
		receive_response();
		if(strstr((char *) response, CHECK_RESPONSE) != NULL){
 8001640:	4e2f      	ldr	r6, [pc, #188]	@ (8001700 <first_check_SIM+0x13c>)
 8001642:	4d2c      	ldr	r5, [pc, #176]	@ (80016f4 <first_check_SIM+0x130>)
			printf("SEND AT successfully");
 8001644:	f00a f976 	bl	800b934 <iprintf>
			memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8001648:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800164c:	2100      	movs	r1, #0
 800164e:	4829      	ldr	r0, [pc, #164]	@ (80016f4 <first_check_SIM+0x130>)
 8001650:	f00a fb40 	bl	800bcd4 <memset>
			SIM_UART_ReInitializeRxDMA();
 8001654:	f7ff febc 	bl	80013d0 <SIM_UART_ReInitializeRxDMA>
	for(size_t i = 0; i < 3 ; i++){
 8001658:	2403      	movs	r4, #3
		send_AT_command("AT+CMEE=2\r\n");
 800165a:	4638      	mov	r0, r7
 800165c:	f7ff fea8 	bl	80013b0 <send_AT_command>
		osDelay(300);
 8001660:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001664:	f006 fcd4 	bl	8008010 <osDelay>
		receive_response();
 8001668:	f7ff fecc 	bl	8001404 <receive_response>
		if(strstr((char *) response, CHECK_RESPONSE) != NULL){
 800166c:	4631      	mov	r1, r6
 800166e:	4628      	mov	r0, r5
 8001670:	f00a fb80 	bl	800bd74 <strstr>
 8001674:	4601      	mov	r1, r0
 8001676:	b368      	cbz	r0, 80016d4 <first_check_SIM+0x110>
			printf("SEND CMEE successfully");
 8001678:	4824      	ldr	r0, [pc, #144]	@ (800170c <first_check_SIM+0x148>)
 800167a:	f00a f95b 	bl	800b934 <iprintf>
			memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 800167e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001682:	2100      	movs	r1, #0
 8001684:	481b      	ldr	r0, [pc, #108]	@ (80016f4 <first_check_SIM+0x130>)
 8001686:	f00a fb25 	bl	800bcd4 <memset>
			SIM_UART_ReInitializeRxDMA();
 800168a:	f7ff fea1 	bl	80013d0 <SIM_UART_ReInitializeRxDMA>
		memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
		SIM_UART_ReInitializeRxDMA();
		osDelay(100);
	}

	return 1;
 800168e:	2001      	movs	r0, #1
}
 8001690:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		receive_response();
 8001692:	f7ff feb7 	bl	8001404 <receive_response>
		osDelay(1000);
 8001696:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800169a:	f006 fcb9 	bl	8008010 <osDelay>
		if (count_check >= 60){
 800169e:	e7a4      	b.n	80015ea <first_check_SIM+0x26>
			if(i == 2){
 80016a0:	3c01      	subs	r4, #1
 80016a2:	d10c      	bne.n	80016be <first_check_SIM+0xfa>
				printf("Send AT failed -> RESTART SIM MODULE\n");
 80016a4:	481a      	ldr	r0, [pc, #104]	@ (8001710 <first_check_SIM+0x14c>)
				printf("Send AT+CMEE failed -> RESTART SIM MODULE\n");
 80016a6:	f00a f9b5 	bl	800ba14 <puts>
				memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 80016aa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80016ae:	4621      	mov	r1, r4
 80016b0:	4810      	ldr	r0, [pc, #64]	@ (80016f4 <first_check_SIM+0x130>)
 80016b2:	f00a fb0f 	bl	800bcd4 <memset>
				SIM_UART_ReInitializeRxDMA();
 80016b6:	f7ff fe8b 	bl	80013d0 <SIM_UART_ReInitializeRxDMA>
				return 0;
 80016ba:	2000      	movs	r0, #0
 80016bc:	e7e8      	b.n	8001690 <first_check_SIM+0xcc>
		memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 80016be:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80016c2:	4628      	mov	r0, r5
 80016c4:	f00a fb06 	bl	800bcd4 <memset>
		SIM_UART_ReInitializeRxDMA();
 80016c8:	f7ff fe82 	bl	80013d0 <SIM_UART_ReInitializeRxDMA>
		osDelay(100);
 80016cc:	2064      	movs	r0, #100	@ 0x64
 80016ce:	f006 fc9f 	bl	8008010 <osDelay>
	for(size_t i = 0; i < 3 ; i++){
 80016d2:	e7a4      	b.n	800161e <first_check_SIM+0x5a>
			if(i == 2){
 80016d4:	3c01      	subs	r4, #1
 80016d6:	d101      	bne.n	80016dc <first_check_SIM+0x118>
				printf("Send AT+CMEE failed -> RESTART SIM MODULE\n");
 80016d8:	480e      	ldr	r0, [pc, #56]	@ (8001714 <first_check_SIM+0x150>)
 80016da:	e7e4      	b.n	80016a6 <first_check_SIM+0xe2>
		memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 80016dc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80016e0:	4628      	mov	r0, r5
 80016e2:	f00a faf7 	bl	800bcd4 <memset>
		SIM_UART_ReInitializeRxDMA();
 80016e6:	f7ff fe73 	bl	80013d0 <SIM_UART_ReInitializeRxDMA>
		osDelay(100);
 80016ea:	2064      	movs	r0, #100	@ 0x64
 80016ec:	f006 fc90 	bl	8008010 <osDelay>
	for(size_t i = 0; i < 3 ; i++){
 80016f0:	e7b3      	b.n	800165a <first_check_SIM+0x96>
 80016f2:	bf00      	nop
 80016f4:	20001de8 	.word	0x20001de8
 80016f8:	08010076 	.word	0x08010076
 80016fc:	080100b8 	.word	0x080100b8
 8001700:	080100bd 	.word	0x080100bd
 8001704:	0801007e 	.word	0x0801007e
 8001708:	08010101 	.word	0x08010101
 800170c:	080100c0 	.word	0x080100c0
 8001710:	08010093 	.word	0x08010093
 8001714:	080100d7 	.word	0x080100d7

08001718 <extract_last_12_digits_bcd>:


void extract_last_12_digits_bcd(const uint8_t *response, uint8_t *output) {
 8001718:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800171a:	460d      	mov	r5, r1
	uint8_t output_buffer[10];
	const uint8_t *start = response;
	while (*start && !(start[0] == 'A' && start[1] == 'T' && start[2] == '+' &&
 800171c:	4602      	mov	r2, r0
 800171e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8001722:	2b00      	cmp	r3, #0
 8001724:	d044      	beq.n	80017b0 <extract_last_12_digits_bcd+0x98>
 8001726:	2b41      	cmp	r3, #65	@ 0x41
 8001728:	d1f8      	bne.n	800171c <extract_last_12_digits_bcd+0x4>
 800172a:	7803      	ldrb	r3, [r0, #0]
 800172c:	2b54      	cmp	r3, #84	@ 0x54
 800172e:	d1f5      	bne.n	800171c <extract_last_12_digits_bcd+0x4>
 8001730:	7843      	ldrb	r3, [r0, #1]
 8001732:	2b2b      	cmp	r3, #43	@ 0x2b
 8001734:	d1f2      	bne.n	800171c <extract_last_12_digits_bcd+0x4>
 8001736:	7883      	ldrb	r3, [r0, #2]
 8001738:	2b43      	cmp	r3, #67	@ 0x43
 800173a:	d1ef      	bne.n	800171c <extract_last_12_digits_bcd+0x4>
					   start[3] == 'C' && start[4] == 'G' && start[5] == 'S' &&
 800173c:	78c3      	ldrb	r3, [r0, #3]
 800173e:	2b47      	cmp	r3, #71	@ 0x47
 8001740:	d1ec      	bne.n	800171c <extract_last_12_digits_bcd+0x4>
 8001742:	7903      	ldrb	r3, [r0, #4]
 8001744:	2b53      	cmp	r3, #83	@ 0x53
 8001746:	d1e9      	bne.n	800171c <extract_last_12_digits_bcd+0x4>
 8001748:	7943      	ldrb	r3, [r0, #5]
 800174a:	2b4e      	cmp	r3, #78	@ 0x4e
 800174c:	d1e6      	bne.n	800171c <extract_last_12_digits_bcd+0x4>
					   start[6] == 'N' && start[7] == '=' && start[8] == '1')) {
 800174e:	7983      	ldrb	r3, [r0, #6]
 8001750:	2b3d      	cmp	r3, #61	@ 0x3d
 8001752:	d1e3      	bne.n	800171c <extract_last_12_digits_bcd+0x4>
	while (*start && !(start[0] == 'A' && start[1] == 'T' && start[2] == '+' &&
 8001754:	79c3      	ldrb	r3, [r0, #7]
 8001756:	2b31      	cmp	r3, #49	@ 0x31
 8001758:	d1e0      	bne.n	800171c <extract_last_12_digits_bcd+0x4>
	}
//	printf("Inside Checking terminal Number: ");
//	printf((char*)start);
	// If "AT+CGSN=1" is found, move to the start of the number (skip "AT+CGSN=1 ")
	if (*start) {
		start += 10;  // Move pointer past "AT+CGSN=1 "
 800175a:	320a      	adds	r2, #10

		// Move past any non-numeric characters
		while (*start && (*start < '0' || *start > '9')) {
 800175c:	7810      	ldrb	r0, [r2, #0]
 800175e:	f1a0 0130 	sub.w	r1, r0, #48	@ 0x30
 8001762:	4613      	mov	r3, r2
 8001764:	b2c9      	uxtb	r1, r1
 8001766:	3201      	adds	r2, #1
 8001768:	b108      	cbz	r0, 800176e <extract_last_12_digits_bcd+0x56>
 800176a:	2909      	cmp	r1, #9
 800176c:	d8f6      	bhi.n	800175c <extract_last_12_digits_bcd+0x44>
 800176e:	461a      	mov	r2, r3
		}

		// Find the length of numeric sequence and start at the last 12 digits
		const uint8_t *end = start;
		size_t digit_count = 0;
		while (*end && (*end >= '0' && *end <= '9')) {
 8001770:	4616      	mov	r6, r2
 8001772:	f812 1b01 	ldrb.w	r1, [r2], #1
 8001776:	3930      	subs	r1, #48	@ 0x30
 8001778:	2909      	cmp	r1, #9
 800177a:	d9f9      	bls.n	8001770 <extract_last_12_digits_bcd+0x58>
 800177c:	1af4      	subs	r4, r6, r3
			end++;
			digit_count++;
		}
		printf("Inside Checking terminal Number-2: LEN ");
 800177e:	480d      	ldr	r0, [pc, #52]	@ (80017b4 <extract_last_12_digits_bcd+0x9c>)
 8001780:	f00a f8d8 	bl	800b934 <iprintf>
		snprintf((char*)output_buffer, 10, "%d", digit_count);
 8001784:	4a0c      	ldr	r2, [pc, #48]	@ (80017b8 <extract_last_12_digits_bcd+0xa0>)
 8001786:	4623      	mov	r3, r4
 8001788:	210a      	movs	r1, #10
 800178a:	a801      	add	r0, sp, #4
 800178c:	f00a f94a 	bl	800ba24 <sniprintf>


		if (digit_count >= 12) {
 8001790:	2c0b      	cmp	r4, #11
 8001792:	d90d      	bls.n	80017b0 <extract_last_12_digits_bcd+0x98>
			const uint8_t *last_12 = end - 12;
 8001794:	f1a6 030c 	sub.w	r3, r6, #12
 8001798:	3d01      	subs	r5, #1

			// Convert each pair of digits to BCD
			for (int i = 0; i < 6; i++) {
				output[i] = ((last_12[i * 2] - '0') << 4) | (last_12[i * 2 + 1] - '0');
 800179a:	7819      	ldrb	r1, [r3, #0]
 800179c:	785a      	ldrb	r2, [r3, #1]
 800179e:	3930      	subs	r1, #48	@ 0x30
 80017a0:	3a30      	subs	r2, #48	@ 0x30
			for (int i = 0; i < 6; i++) {
 80017a2:	3302      	adds	r3, #2
				output[i] = ((last_12[i * 2] - '0') << 4) | (last_12[i * 2 + 1] - '0');
 80017a4:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
			for (int i = 0; i < 6; i++) {
 80017a8:	429e      	cmp	r6, r3
				output[i] = ((last_12[i * 2] - '0') << 4) | (last_12[i * 2 + 1] - '0');
 80017aa:	f805 2f01 	strb.w	r2, [r5, #1]!
			for (int i = 0; i < 6; i++) {
 80017ae:	d1f4      	bne.n	800179a <extract_last_12_digits_bcd+0x82>
		}
	}
//	printf(&huart1, (uint8_t *)" Check terminal Number-0: ");
//	printf(&huart1, output);
//	printf(&huart1, (uint8_t *)" \n");
}
 80017b0:	b004      	add	sp, #16
 80017b2:	bd70      	pop	{r4, r5, r6, pc}
 80017b4:	0801010d 	.word	0x0801010d
 80017b8:	080103d9 	.word	0x080103d9

080017bc <has_number>:
    }
    return -1; // Failure
}

int has_number(const char *str) {
    while (*str) {
 80017bc:	1e43      	subs	r3, r0, #1
 80017be:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 80017c2:	b900      	cbnz	r0, 80017c6 <has_number+0xa>
 80017c4:	4770      	bx	lr
        if (*str >= '0' && *str <= '9') {
 80017c6:	3830      	subs	r0, #48	@ 0x30
 80017c8:	2809      	cmp	r0, #9
 80017ca:	d8f8      	bhi.n	80017be <has_number+0x2>
            return 1; // Found a digit
 80017cc:	2001      	movs	r0, #1
        }
        str++;
    }
    return 0; // No digits found
}
 80017ce:	4770      	bx	lr

080017d0 <check_SIM_ready>:


int check_SIM_ready(){
 80017d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	const int TIME_LIMIT = 5;
	int count_check_sim = 0;
	//GET IMEI
	send_AT_command(GET_IMEI);
 80017d4:	4888      	ldr	r0, [pc, #544]	@ (80019f8 <check_SIM_ready+0x228>)
	while(strstr((char *) response, CHECK_RESPONSE) == NULL && has_number((char*) response) == 0){
 80017d6:	4e89      	ldr	r6, [pc, #548]	@ (80019fc <check_SIM_ready+0x22c>)
 80017d8:	4d89      	ldr	r5, [pc, #548]	@ (8001a00 <check_SIM_ready+0x230>)
	send_AT_command(GET_IMEI);
 80017da:	f7ff fde9 	bl	80013b0 <send_AT_command>
	while(strstr((char *) response, CHECK_RESPONSE) == NULL && has_number((char*) response) == 0){
 80017de:	2405      	movs	r4, #5
 80017e0:	4631      	mov	r1, r6
 80017e2:	4628      	mov	r0, r5
 80017e4:	f00a fac6 	bl	800bd74 <strstr>
 80017e8:	b928      	cbnz	r0, 80017f6 <check_SIM_ready+0x26>
 80017ea:	4628      	mov	r0, r5
 80017ec:	f7ff ffe6 	bl	80017bc <has_number>
 80017f0:	2800      	cmp	r0, #0
 80017f2:	f000 80d8 	beq.w	80019a6 <check_SIM_ready+0x1d6>
			return 0;
		}
//		receive_response();
		osDelay(1000);
	}
	receive_response();
 80017f6:	f7ff fe05 	bl	8001404 <receive_response>
	extract_last_12_digits_bcd(response, terminal_phone_number);
 80017fa:	4982      	ldr	r1, [pc, #520]	@ (8001a04 <check_SIM_ready+0x234>)
 80017fc:	4880      	ldr	r0, [pc, #512]	@ (8001a00 <check_SIM_ready+0x230>)
	count_check_sim = 0;

	// Check if SIM is ready
	send_AT_command(CHECK_SIM_READY);
	osDelay(100);
	while(strstr((char *) response, CHECK_RESPONSE) == NULL){
 80017fe:	4e7f      	ldr	r6, [pc, #508]	@ (80019fc <check_SIM_ready+0x22c>)
 8001800:	4d7f      	ldr	r5, [pc, #508]	@ (8001a00 <check_SIM_ready+0x230>)
	extract_last_12_digits_bcd(response, terminal_phone_number);
 8001802:	f7ff ff89 	bl	8001718 <extract_last_12_digits_bcd>
	printf(" Check terminal Number: %s\n", terminal_phone_number);
 8001806:	497f      	ldr	r1, [pc, #508]	@ (8001a04 <check_SIM_ready+0x234>)
 8001808:	487f      	ldr	r0, [pc, #508]	@ (8001a08 <check_SIM_ready+0x238>)
 800180a:	f00a f893 	bl	800b934 <iprintf>
	osDelay(100);
 800180e:	2064      	movs	r0, #100	@ 0x64
 8001810:	f006 fbfe 	bl	8008010 <osDelay>
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8001814:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001818:	2100      	movs	r1, #0
 800181a:	4879      	ldr	r0, [pc, #484]	@ (8001a00 <check_SIM_ready+0x230>)
 800181c:	f00a fa5a 	bl	800bcd4 <memset>
	SIM_UART_ReInitializeRxDMA();
 8001820:	f7ff fdd6 	bl	80013d0 <SIM_UART_ReInitializeRxDMA>
	send_AT_command(CHECK_SIM_READY);
 8001824:	4879      	ldr	r0, [pc, #484]	@ (8001a0c <check_SIM_ready+0x23c>)
 8001826:	f7ff fdc3 	bl	80013b0 <send_AT_command>
	osDelay(100);
 800182a:	2064      	movs	r0, #100	@ 0x64
 800182c:	f006 fbf0 	bl	8008010 <osDelay>
	while(strstr((char *) response, CHECK_RESPONSE) == NULL){
 8001830:	2405      	movs	r4, #5
 8001832:	4631      	mov	r1, r6
 8001834:	4628      	mov	r0, r5
 8001836:	f00a fa9d 	bl	800bd74 <strstr>
 800183a:	2800      	cmp	r0, #0
 800183c:	f000 80c5 	beq.w	80019ca <check_SIM_ready+0x1fa>
			memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
			SIM_UART_ReInitializeRxDMA();
			return 0;
		}
	}
	receive_response();
 8001840:	f7ff fde0 	bl	8001404 <receive_response>
	osDelay(100);
 8001844:	2064      	movs	r0, #100	@ 0x64
 8001846:	f006 fbe3 	bl	8008010 <osDelay>
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 800184a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800184e:	2100      	movs	r1, #0
 8001850:	486b      	ldr	r0, [pc, #428]	@ (8001a00 <check_SIM_ready+0x230>)
	count_check_sim = 0;


	//GET SIM CCID
	send_AT_command(GET_SIM_CCID);
	while(strstr((char *) response, "+QCCID:") == NULL){
 8001852:	4e6f      	ldr	r6, [pc, #444]	@ (8001a10 <check_SIM_ready+0x240>)
 8001854:	4d6a      	ldr	r5, [pc, #424]	@ (8001a00 <check_SIM_ready+0x230>)
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8001856:	f00a fa3d 	bl	800bcd4 <memset>
	SIM_UART_ReInitializeRxDMA();
 800185a:	f7ff fdb9 	bl	80013d0 <SIM_UART_ReInitializeRxDMA>
	osDelay(100);
 800185e:	2064      	movs	r0, #100	@ 0x64
 8001860:	f006 fbd6 	bl	8008010 <osDelay>
	send_AT_command(GET_SIM_CCID);
 8001864:	486b      	ldr	r0, [pc, #428]	@ (8001a14 <check_SIM_ready+0x244>)
 8001866:	f7ff fda3 	bl	80013b0 <send_AT_command>
	while(strstr((char *) response, "+QCCID:") == NULL){
 800186a:	2405      	movs	r4, #5
 800186c:	4631      	mov	r1, r6
 800186e:	4628      	mov	r0, r5
 8001870:	f00a fa80 	bl	800bd74 <strstr>
 8001874:	2800      	cmp	r0, #0
 8001876:	f000 80b0 	beq.w	80019da <check_SIM_ready+0x20a>
			memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
			SIM_UART_ReInitializeRxDMA();
			return 0;
		}
	}
	receive_response();
 800187a:	f7ff fdc3 	bl	8001404 <receive_response>
	osDelay(100);
 800187e:	2064      	movs	r0, #100	@ 0x64
 8001880:	f006 fbc6 	bl	8008010 <osDelay>
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8001884:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001888:	2100      	movs	r1, #0
 800188a:	485d      	ldr	r0, [pc, #372]	@ (8001a00 <check_SIM_ready+0x230>)
	send_AT_command(CONFIGURE_CS_SERVICE);
	char *first_pointer = NULL;
	char *second_pointer = NULL;
	receive_response("Configuring Network Registration Status (CS Service)");
	while (first_pointer == NULL || second_pointer == NULL){
		send_AT_command("AT+CREG?\r\n");
 800188c:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8001a28 <check_SIM_ready+0x258>
		osDelay(150);
//		receive_response("Check Network Registration Status (CS Service)\n");
		osDelay(1000);
		osDelay(300);
		first_pointer = strstr((char*)response, CHECK_RESPONSE);
 8001890:	4f5a      	ldr	r7, [pc, #360]	@ (80019fc <check_SIM_ready+0x22c>)
 8001892:	f8df 916c 	ldr.w	r9, [pc, #364]	@ 8001a00 <check_SIM_ready+0x230>
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8001896:	f00a fa1d 	bl	800bcd4 <memset>
	SIM_UART_ReInitializeRxDMA();
 800189a:	f7ff fd99 	bl	80013d0 <SIM_UART_ReInitializeRxDMA>
	send_AT_command(CONFIGURE_CS_SERVICE);
 800189e:	485e      	ldr	r0, [pc, #376]	@ (8001a18 <check_SIM_ready+0x248>)
 80018a0:	f7ff fd86 	bl	80013b0 <send_AT_command>
	receive_response("Configuring Network Registration Status (CS Service)");
 80018a4:	485d      	ldr	r0, [pc, #372]	@ (8001a1c <check_SIM_ready+0x24c>)
 80018a6:	f7ff fdad 	bl	8001404 <receive_response>
 80018aa:	2606      	movs	r6, #6
	char *second_pointer = NULL;
 80018ac:	2500      	movs	r5, #0
		send_AT_command("AT+CREG?\r\n");
 80018ae:	4640      	mov	r0, r8
 80018b0:	f7ff fd7e 	bl	80013b0 <send_AT_command>
		osDelay(150);
 80018b4:	2096      	movs	r0, #150	@ 0x96
 80018b6:	f006 fbab 	bl	8008010 <osDelay>
		osDelay(1000);
 80018ba:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80018be:	f006 fba7 	bl	8008010 <osDelay>
		osDelay(300);
 80018c2:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80018c6:	f006 fba3 	bl	8008010 <osDelay>
		first_pointer = strstr((char*)response, CHECK_RESPONSE);
 80018ca:	4639      	mov	r1, r7
 80018cc:	4648      	mov	r0, r9
 80018ce:	f00a fa51 	bl	800bd74 <strstr>
		if(first_pointer != NULL){
 80018d2:	4604      	mov	r4, r0
 80018d4:	b120      	cbz	r0, 80018e0 <check_SIM_ready+0x110>
			second_pointer = strstr(first_pointer+1, CHECK_RESPONSE);
 80018d6:	4639      	mov	r1, r7
 80018d8:	3001      	adds	r0, #1
 80018da:	f00a fa4b 	bl	800bd74 <strstr>
 80018de:	4605      	mov	r5, r0
		}
		if (count_check_sim >= TIME_LIMIT){
 80018e0:	3e01      	subs	r6, #1
 80018e2:	d062      	beq.n	80019aa <check_SIM_ready+0x1da>
	while (first_pointer == NULL || second_pointer == NULL){
 80018e4:	2c00      	cmp	r4, #0
 80018e6:	d0e2      	beq.n	80018ae <check_SIM_ready+0xde>
 80018e8:	2d00      	cmp	r5, #0
 80018ea:	d0e0      	beq.n	80018ae <check_SIM_ready+0xde>
			SIM_UART_ReInitializeRxDMA();
			return 0;
		}
		count_check_sim++;
	}
	receive_response();
 80018ec:	f7ff fd8a 	bl	8001404 <receive_response>
	osDelay(100);
 80018f0:	2064      	movs	r0, #100	@ 0x64
 80018f2:	f006 fb8d 	bl	8008010 <osDelay>
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 80018f6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80018fa:	2100      	movs	r1, #0
 80018fc:	4840      	ldr	r0, [pc, #256]	@ (8001a00 <check_SIM_ready+0x230>)
	send_AT_command(CONFIGURE_PS_SERVICE);
	first_pointer = NULL;
	second_pointer = NULL;
//	receive_response("Configuring Network Registration Status (PS Service)");
	while (first_pointer == NULL || second_pointer == NULL){
		send_AT_command("AT+CGREG?\r\n");
 80018fe:	f8df 812c 	ldr.w	r8, [pc, #300]	@ 8001a2c <check_SIM_ready+0x25c>
		osDelay(150);
//		receive_response("Check Network Registration Status (PS Service)\n");
		osDelay(1000);
		osDelay(300);
		first_pointer = strstr((char*)response, CHECK_RESPONSE);
 8001902:	4f3e      	ldr	r7, [pc, #248]	@ (80019fc <check_SIM_ready+0x22c>)
 8001904:	f8df 90f8 	ldr.w	r9, [pc, #248]	@ 8001a00 <check_SIM_ready+0x230>
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8001908:	f00a f9e4 	bl	800bcd4 <memset>
	SIM_UART_ReInitializeRxDMA();
 800190c:	f7ff fd60 	bl	80013d0 <SIM_UART_ReInitializeRxDMA>
	send_AT_command(CONFIGURE_PS_SERVICE);
 8001910:	4843      	ldr	r0, [pc, #268]	@ (8001a20 <check_SIM_ready+0x250>)
 8001912:	f7ff fd4d 	bl	80013b0 <send_AT_command>
 8001916:	2606      	movs	r6, #6
	second_pointer = NULL;
 8001918:	2500      	movs	r5, #0
		send_AT_command("AT+CGREG?\r\n");
 800191a:	4640      	mov	r0, r8
 800191c:	f7ff fd48 	bl	80013b0 <send_AT_command>
		osDelay(150);
 8001920:	2096      	movs	r0, #150	@ 0x96
 8001922:	f006 fb75 	bl	8008010 <osDelay>
		osDelay(1000);
 8001926:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800192a:	f006 fb71 	bl	8008010 <osDelay>
		osDelay(300);
 800192e:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001932:	f006 fb6d 	bl	8008010 <osDelay>
		first_pointer = strstr((char*)response, CHECK_RESPONSE);
 8001936:	4639      	mov	r1, r7
 8001938:	4648      	mov	r0, r9
 800193a:	f00a fa1b 	bl	800bd74 <strstr>
		if(first_pointer != NULL){
 800193e:	4604      	mov	r4, r0
 8001940:	b120      	cbz	r0, 800194c <check_SIM_ready+0x17c>
			second_pointer = strstr(first_pointer + 1, CHECK_RESPONSE);
 8001942:	4639      	mov	r1, r7
 8001944:	3001      	adds	r0, #1
 8001946:	f00a fa15 	bl	800bd74 <strstr>
 800194a:	4605      	mov	r5, r0
		}
		if (count_check_sim >= TIME_LIMIT){
 800194c:	3e01      	subs	r6, #1
 800194e:	d02c      	beq.n	80019aa <check_SIM_ready+0x1da>
	while (first_pointer == NULL || second_pointer == NULL){
 8001950:	2c00      	cmp	r4, #0
 8001952:	d0e2      	beq.n	800191a <check_SIM_ready+0x14a>
 8001954:	2d00      	cmp	r5, #0
 8001956:	d0e0      	beq.n	800191a <check_SIM_ready+0x14a>
			SIM_UART_ReInitializeRxDMA();
			return 0;
		}
		count_check_sim++;
	}
	receive_response();
 8001958:	f7ff fd54 	bl	8001404 <receive_response>
	osDelay(100);
 800195c:	2064      	movs	r0, #100	@ 0x64
 800195e:	f006 fb57 	bl	8008010 <osDelay>
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8001962:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001966:	2100      	movs	r1, #0
 8001968:	4825      	ldr	r0, [pc, #148]	@ (8001a00 <check_SIM_ready+0x230>)
	count_check_sim = 0;


	//CHECK SIGNAL QUALITY
	send_AT_command(CHECK_SIGNAL_QUALITY);
	while(strstr((char *) response, CHECK_RESPONSE) == NULL){
 800196a:	4e24      	ldr	r6, [pc, #144]	@ (80019fc <check_SIM_ready+0x22c>)
 800196c:	4d24      	ldr	r5, [pc, #144]	@ (8001a00 <check_SIM_ready+0x230>)
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 800196e:	f00a f9b1 	bl	800bcd4 <memset>
	SIM_UART_ReInitializeRxDMA();
 8001972:	f7ff fd2d 	bl	80013d0 <SIM_UART_ReInitializeRxDMA>
	send_AT_command(CHECK_SIGNAL_QUALITY);
 8001976:	482b      	ldr	r0, [pc, #172]	@ (8001a24 <check_SIM_ready+0x254>)
 8001978:	f7ff fd1a 	bl	80013b0 <send_AT_command>
	while(strstr((char *) response, CHECK_RESPONSE) == NULL){
 800197c:	2406      	movs	r4, #6
 800197e:	4631      	mov	r1, r6
 8001980:	4628      	mov	r0, r5
 8001982:	f00a f9f7 	bl	800bd74 <strstr>
 8001986:	b380      	cbz	r0, 80019ea <check_SIM_ready+0x21a>
		}
		count_check_sim++;
		osDelay(1000);
//		receive_response("Check Signal Quality Report\n");
	}
	receive_response();
 8001988:	f7ff fd3c 	bl	8001404 <receive_response>
	osDelay(100);
 800198c:	2064      	movs	r0, #100	@ 0x64
 800198e:	f006 fb3f 	bl	8008010 <osDelay>
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8001992:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001996:	2100      	movs	r1, #0
 8001998:	4819      	ldr	r0, [pc, #100]	@ (8001a00 <check_SIM_ready+0x230>)
 800199a:	f00a f99b 	bl	800bcd4 <memset>
	SIM_UART_ReInitializeRxDMA();
 800199e:	f7ff fd17 	bl	80013d0 <SIM_UART_ReInitializeRxDMA>
	count_check_sim = 0;
	return 1;
 80019a2:	2001      	movs	r0, #1
 80019a4:	e00a      	b.n	80019bc <check_SIM_ready+0x1ec>
		if (count_check_sim >= 5){
 80019a6:	3c01      	subs	r4, #1
 80019a8:	d10a      	bne.n	80019c0 <check_SIM_ready+0x1f0>
			memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 80019aa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80019ae:	2100      	movs	r1, #0
 80019b0:	4813      	ldr	r0, [pc, #76]	@ (8001a00 <check_SIM_ready+0x230>)
 80019b2:	f00a f98f 	bl	800bcd4 <memset>
			SIM_UART_ReInitializeRxDMA();
 80019b6:	f7ff fd0b 	bl	80013d0 <SIM_UART_ReInitializeRxDMA>
			return 0;
 80019ba:	2000      	movs	r0, #0


}
 80019bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		osDelay(1000);
 80019c0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80019c4:	f006 fb24 	bl	8008010 <osDelay>
 80019c8:	e70a      	b.n	80017e0 <check_SIM_ready+0x10>
		osDelay(1000);
 80019ca:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80019ce:	f006 fb1f 	bl	8008010 <osDelay>
		if (count_check_sim >= 5){
 80019d2:	3c01      	subs	r4, #1
 80019d4:	f47f af2d 	bne.w	8001832 <check_SIM_ready+0x62>
 80019d8:	e7e7      	b.n	80019aa <check_SIM_ready+0x1da>
		osDelay(1000);
 80019da:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80019de:	f006 fb17 	bl	8008010 <osDelay>
		if (count_check_sim >= TIME_LIMIT){
 80019e2:	3c01      	subs	r4, #1
 80019e4:	f47f af42 	bne.w	800186c <check_SIM_ready+0x9c>
 80019e8:	e7df      	b.n	80019aa <check_SIM_ready+0x1da>
		if (count_check_sim >= TIME_LIMIT){
 80019ea:	3c01      	subs	r4, #1
 80019ec:	d0dd      	beq.n	80019aa <check_SIM_ready+0x1da>
		osDelay(1000);
 80019ee:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80019f2:	f006 fb0d 	bl	8008010 <osDelay>
 80019f6:	e7c2      	b.n	800197e <check_SIM_ready+0x1ae>
 80019f8:	08010135 	.word	0x08010135
 80019fc:	080100bd 	.word	0x080100bd
 8001a00:	20001de8 	.word	0x20001de8
 8001a04:	20001b38 	.word	0x20001b38
 8001a08:	08010141 	.word	0x08010141
 8001a0c:	0801015d 	.word	0x0801015d
 8001a10:	08010173 	.word	0x08010173
 8001a14:	08010168 	.word	0x08010168
 8001a18:	0801017b 	.word	0x0801017b
 8001a1c:	08010187 	.word	0x08010187
 8001a20:	080101c7 	.word	0x080101c7
 8001a24:	080101e0 	.word	0x080101e0
 8001a28:	080101bc 	.word	0x080101bc
 8001a2c:	080101d4 	.word	0x080101d4

08001a30 <check_configure_APN>:

void check_configure_APN(){
 8001a30:	b508      	push	{r3, lr}
	send_AT_command(CHECK_CONFIGURE_APN);
 8001a32:	4805      	ldr	r0, [pc, #20]	@ (8001a48 <check_configure_APN+0x18>)
 8001a34:	f7ff fcbc 	bl	80013b0 <send_AT_command>
	osDelay(150);
 8001a38:	2096      	movs	r0, #150	@ 0x96
 8001a3a:	f006 fae9 	bl	8008010 <osDelay>
	receive_response();
}
 8001a3e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	receive_response();
 8001a42:	f7ff bcdf 	b.w	8001404 <receive_response>
 8001a46:	bf00      	nop
 8001a48:	080101e9 	.word	0x080101e9

08001a4c <configure_APN>:

int configure_APN(int context_id){
 8001a4c:	b530      	push	{r4, r5, lr}
	uint8_t command[256];
	snprintf((char *)command, sizeof(command), "AT+QICSGP=%d,%d,\"%s\",\"%s\",\"%s\",%d,0\r\n", context_id, 1, APN_NAME, APN_USERNAME, APN_PASSWD, APN_AUTHEN);
 8001a4e:	4917      	ldr	r1, [pc, #92]	@ (8001aac <configure_APN+0x60>)
	char *first_pointer = NULL;
	char *second_pointer = NULL; 	
	while (first_pointer == NULL || second_pointer == NULL){
		check_configure_APN();
		osDelay(1300);
		first_pointer = strstr((char*)response, CHECK_RESPONSE);
 8001a50:	4c17      	ldr	r4, [pc, #92]	@ (8001ab0 <configure_APN+0x64>)
 8001a52:	4d18      	ldr	r5, [pc, #96]	@ (8001ab4 <configure_APN+0x68>)
int configure_APN(int context_id){
 8001a54:	b0c7      	sub	sp, #284	@ 0x11c
	snprintf((char *)command, sizeof(command), "AT+QICSGP=%d,%d,\"%s\",\"%s\",\"%s\",%d,0\r\n", context_id, 1, APN_NAME, APN_USERNAME, APN_PASSWD, APN_AUTHEN);
 8001a56:	e9cd 1102 	strd	r1, r1, [sp, #8]
 8001a5a:	4917      	ldr	r1, [pc, #92]	@ (8001ab8 <configure_APN+0x6c>)
 8001a5c:	2201      	movs	r2, #1
int configure_APN(int context_id){
 8001a5e:	4603      	mov	r3, r0
	snprintf((char *)command, sizeof(command), "AT+QICSGP=%d,%d,\"%s\",\"%s\",\"%s\",%d,0\r\n", context_id, 1, APN_NAME, APN_USERNAME, APN_PASSWD, APN_AUTHEN);
 8001a60:	e9cd 2100 	strd	r2, r1, [sp]
 8001a64:	9204      	str	r2, [sp, #16]
 8001a66:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001a6a:	4a14      	ldr	r2, [pc, #80]	@ (8001abc <configure_APN+0x70>)
 8001a6c:	a806      	add	r0, sp, #24
 8001a6e:	f009 ffd9 	bl	800ba24 <sniprintf>
	send_AT_command((char*)command);
 8001a72:	a806      	add	r0, sp, #24
 8001a74:	f7ff fc9c 	bl	80013b0 <send_AT_command>
	osDelay(150);
 8001a78:	2096      	movs	r0, #150	@ 0x96
 8001a7a:	f006 fac9 	bl	8008010 <osDelay>
	receive_response();
 8001a7e:	f7ff fcc1 	bl	8001404 <receive_response>
		check_configure_APN();
 8001a82:	f7ff ffd5 	bl	8001a30 <check_configure_APN>
		osDelay(1300);
 8001a86:	f240 5014 	movw	r0, #1300	@ 0x514
 8001a8a:	f006 fac1 	bl	8008010 <osDelay>
		first_pointer = strstr((char*)response, CHECK_RESPONSE);
 8001a8e:	4908      	ldr	r1, [pc, #32]	@ (8001ab0 <configure_APN+0x64>)
 8001a90:	4628      	mov	r0, r5
 8001a92:	f00a f96f 	bl	800bd74 <strstr>
		if(first_pointer != NULL){
 8001a96:	2800      	cmp	r0, #0
 8001a98:	d0f3      	beq.n	8001a82 <configure_APN+0x36>
			second_pointer = strstr(first_pointer+1, CHECK_RESPONSE);
 8001a9a:	4621      	mov	r1, r4
 8001a9c:	3001      	adds	r0, #1
 8001a9e:	f00a f969 	bl	800bd74 <strstr>
	while (first_pointer == NULL || second_pointer == NULL){
 8001aa2:	2800      	cmp	r0, #0
 8001aa4:	d0ed      	beq.n	8001a82 <configure_APN+0x36>
		}
	}
	return 1;
}
 8001aa6:	2001      	movs	r0, #1
 8001aa8:	b047      	add	sp, #284	@ 0x11c
 8001aaa:	bd30      	pop	{r4, r5, pc}
 8001aac:	08010fa3 	.word	0x08010fa3
 8001ab0:	080100bd 	.word	0x080100bd
 8001ab4:	20001de8 	.word	0x20001de8
 8001ab8:	0801021d 	.word	0x0801021d
 8001abc:	080101f7 	.word	0x080101f7

08001ac0 <check_activate_context>:

void check_activate_context(){
 8001ac0:	b500      	push	{lr}
 8001ac2:	b0a1      	sub	sp, #132	@ 0x84
	uint8_t command[128];
	snprintf((char *)command, sizeof(command), CHECK_ACTIVATE_CONTEXT);
 8001ac4:	4906      	ldr	r1, [pc, #24]	@ (8001ae0 <check_activate_context+0x20>)
 8001ac6:	4668      	mov	r0, sp
 8001ac8:	f00a ffa6 	bl	800ca18 <strcpy>
	send_AT_command((char*)command);
 8001acc:	4668      	mov	r0, sp
 8001ace:	f7ff fc6f 	bl	80013b0 <send_AT_command>
	receive_response("CHECK Activate CONTEXT\n");
 8001ad2:	4804      	ldr	r0, [pc, #16]	@ (8001ae4 <check_activate_context+0x24>)
 8001ad4:	f7ff fc96 	bl	8001404 <receive_response>
}
 8001ad8:	b021      	add	sp, #132	@ 0x84
 8001ada:	f85d fb04 	ldr.w	pc, [sp], #4
 8001ade:	bf00      	nop
 8001ae0:	08010227 	.word	0x08010227
 8001ae4:	08010233 	.word	0x08010233

08001ae8 <activate_context>:
//		// Wait until the counter reaches 1000
//		while (__HAL_TIM_GET_COUNTER(&htim3) < 1000);
//	}
//	is_40s = 1;
//}
int activate_context(int context_id){
 8001ae8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001aec:	b0a0      	sub	sp, #128	@ 0x80
 8001aee:	4603      	mov	r3, r0
	uint8_t command[128];
	snprintf((char *)command, sizeof(command), "AT+QIACT=%d\r\n", context_id);
 8001af0:	4a2b      	ldr	r2, [pc, #172]	@ (8001ba0 <activate_context+0xb8>)
		if(count_check >= 50){
			count_check = 0;
//			return 0;
			break;
		}
		if (strstr((char*)response, "ERROR") != NULL){
 8001af2:	f8df 80b8 	ldr.w	r8, [pc, #184]	@ 8001bac <activate_context+0xc4>
 8001af6:	4e2b      	ldr	r6, [pc, #172]	@ (8001ba4 <activate_context+0xbc>)
//			return 0;
			break;
		}

		receive_response();
		first_pointer = strstr((char*)response, CHECK_RESPONSE);
 8001af8:	4f2b      	ldr	r7, [pc, #172]	@ (8001ba8 <activate_context+0xc0>)
	snprintf((char *)command, sizeof(command), "AT+QIACT=%d\r\n", context_id);
 8001afa:	2180      	movs	r1, #128	@ 0x80
 8001afc:	4668      	mov	r0, sp
 8001afe:	f009 ff91 	bl	800ba24 <sniprintf>
	send_AT_command((char*)command);
 8001b02:	4668      	mov	r0, sp
 8001b04:	f7ff fc54 	bl	80013b0 <send_AT_command>
	osDelay(150);
 8001b08:	2096      	movs	r0, #150	@ 0x96
 8001b0a:	f006 fa81 	bl	8008010 <osDelay>
	receive_response();
 8001b0e:	f7ff fc79 	bl	8001404 <receive_response>
 8001b12:	2533      	movs	r5, #51	@ 0x33
	int count_error = 0;
 8001b14:	2400      	movs	r4, #0
		check_activate_context();
 8001b16:	f7ff ffd3 	bl	8001ac0 <check_activate_context>
		osDelay(300);
 8001b1a:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001b1e:	f006 fa77 	bl	8008010 <osDelay>
		if(count_check >= 50){
 8001b22:	3d01      	subs	r5, #1
 8001b24:	d021      	beq.n	8001b6a <activate_context+0x82>
		if (strstr((char*)response, "ERROR") != NULL){
 8001b26:	4641      	mov	r1, r8
 8001b28:	4630      	mov	r0, r6
 8001b2a:	f00a f923 	bl	800bd74 <strstr>
 8001b2e:	b340      	cbz	r0, 8001b82 <activate_context+0x9a>
			osDelay(500);
 8001b30:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001b34:	f006 fa6c 	bl	8008010 <osDelay>
			memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8001b38:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001b3c:	2100      	movs	r1, #0
 8001b3e:	4630      	mov	r0, r6
 8001b40:	f00a f8c8 	bl	800bcd4 <memset>
			SIM_UART_ReInitializeRxDMA();
 8001b44:	f7ff fc44 	bl	80013d0 <SIM_UART_ReInitializeRxDMA>
			send_AT_command((char *) command);
 8001b48:	4668      	mov	r0, sp
 8001b4a:	f7ff fc31 	bl	80013b0 <send_AT_command>
			count_error++;
 8001b4e:	3401      	adds	r4, #1
			osDelay(200);
 8001b50:	20c8      	movs	r0, #200	@ 0xc8
 8001b52:	f006 fa5d 	bl	8008010 <osDelay>
		if(count_error >= 3){
 8001b56:	2c03      	cmp	r4, #3
 8001b58:	d113      	bne.n	8001b82 <activate_context+0x9a>
			memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8001b5a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001b5e:	2100      	movs	r1, #0
 8001b60:	4810      	ldr	r0, [pc, #64]	@ (8001ba4 <activate_context+0xbc>)
 8001b62:	f00a f8b7 	bl	800bcd4 <memset>
			SIM_UART_ReInitializeRxDMA();
 8001b66:	f7ff fc33 	bl	80013d0 <SIM_UART_ReInitializeRxDMA>
			second_pointer = strstr(first_pointer+1, CHECK_RESPONSE);
		}
		count_check++;
	}
//	HAL_TIM_Base_Start(&htim3);
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8001b6a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001b6e:	2100      	movs	r1, #0
 8001b70:	480c      	ldr	r0, [pc, #48]	@ (8001ba4 <activate_context+0xbc>)
 8001b72:	f00a f8af 	bl	800bcd4 <memset>
	SIM_UART_ReInitializeRxDMA();
 8001b76:	f7ff fc2b 	bl	80013d0 <SIM_UART_ReInitializeRxDMA>
	return 1;
}
 8001b7a:	2001      	movs	r0, #1
 8001b7c:	b020      	add	sp, #128	@ 0x80
 8001b7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		receive_response();
 8001b82:	f7ff fc3f 	bl	8001404 <receive_response>
		first_pointer = strstr((char*)response, CHECK_RESPONSE);
 8001b86:	4639      	mov	r1, r7
 8001b88:	4630      	mov	r0, r6
 8001b8a:	f00a f8f3 	bl	800bd74 <strstr>
		if(first_pointer != NULL){
 8001b8e:	2800      	cmp	r0, #0
 8001b90:	d0c1      	beq.n	8001b16 <activate_context+0x2e>
			second_pointer = strstr(first_pointer+1, CHECK_RESPONSE);
 8001b92:	4639      	mov	r1, r7
 8001b94:	3001      	adds	r0, #1
 8001b96:	f00a f8ed 	bl	800bd74 <strstr>
	while ((first_pointer == NULL || second_pointer == NULL)){
 8001b9a:	2800      	cmp	r0, #0
 8001b9c:	d0bb      	beq.n	8001b16 <activate_context+0x2e>
 8001b9e:	e7e4      	b.n	8001b6a <activate_context+0x82>
 8001ba0:	0801024b 	.word	0x0801024b
 8001ba4:	20001de8 	.word	0x20001de8
 8001ba8:	080100bd 	.word	0x080100bd
 8001bac:	08011115 	.word	0x08011115

08001bb0 <deactivate_context>:

int deactivate_context(int context_id){
 8001bb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001bb2:	4604      	mov	r4, r0
 8001bb4:	b0a1      	sub	sp, #132	@ 0x84
	uint8_t command[128];
	int count_check = 0;
	osDelay(100);
 8001bb6:	2064      	movs	r0, #100	@ 0x64
 8001bb8:	f006 fa2a 	bl	8008010 <osDelay>
	snprintf((char *)command, sizeof(command), "AT+QIDEACT=%d\r\n", context_id);
 8001bbc:	4623      	mov	r3, r4
 8001bbe:	4a1b      	ldr	r2, [pc, #108]	@ (8001c2c <deactivate_context+0x7c>)
	send_AT_command((char*)command);
	while(strstr((char *) response, CHECK_RESPONSE) == NULL){
 8001bc0:	4e1b      	ldr	r6, [pc, #108]	@ (8001c30 <deactivate_context+0x80>)
 8001bc2:	4d1c      	ldr	r5, [pc, #112]	@ (8001c34 <deactivate_context+0x84>)
//		receive_response("DEACTIVATE CONTEXT\n");
		if (strstr((char *) response, "ERROR") != NULL){
 8001bc4:	4f1c      	ldr	r7, [pc, #112]	@ (8001c38 <deactivate_context+0x88>)
	snprintf((char *)command, sizeof(command), "AT+QIDEACT=%d\r\n", context_id);
 8001bc6:	2180      	movs	r1, #128	@ 0x80
 8001bc8:	4668      	mov	r0, sp
 8001bca:	f009 ff2b 	bl	800ba24 <sniprintf>
	send_AT_command((char*)command);
 8001bce:	4668      	mov	r0, sp
 8001bd0:	f7ff fbee 	bl	80013b0 <send_AT_command>
	while(strstr((char *) response, CHECK_RESPONSE) == NULL){
 8001bd4:	2415      	movs	r4, #21
 8001bd6:	4631      	mov	r1, r6
 8001bd8:	4628      	mov	r0, r5
 8001bda:	f00a f8cb 	bl	800bd74 <strstr>
 8001bde:	b170      	cbz	r0, 8001bfe <deactivate_context+0x4e>
			return 0;
		}
		count_check++;
		osDelay(1200);
	}
	receive_response();
 8001be0:	f7ff fc10 	bl	8001404 <receive_response>
	osDelay(100);
 8001be4:	2064      	movs	r0, #100	@ 0x64
 8001be6:	f006 fa13 	bl	8008010 <osDelay>
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8001bea:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001bee:	2100      	movs	r1, #0
 8001bf0:	4810      	ldr	r0, [pc, #64]	@ (8001c34 <deactivate_context+0x84>)
 8001bf2:	f00a f86f 	bl	800bcd4 <memset>
	SIM_UART_ReInitializeRxDMA();
 8001bf6:	f7ff fbeb 	bl	80013d0 <SIM_UART_ReInitializeRxDMA>
	return 1;
 8001bfa:	2001      	movs	r0, #1
 8001bfc:	e00d      	b.n	8001c1a <deactivate_context+0x6a>
		if (strstr((char *) response, "ERROR") != NULL){
 8001bfe:	4639      	mov	r1, r7
 8001c00:	4628      	mov	r0, r5
 8001c02:	f00a f8b7 	bl	800bd74 <strstr>
 8001c06:	b150      	cbz	r0, 8001c1e <deactivate_context+0x6e>
			memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8001c08:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001c0c:	2100      	movs	r1, #0
 8001c0e:	4809      	ldr	r0, [pc, #36]	@ (8001c34 <deactivate_context+0x84>)
 8001c10:	f00a f860 	bl	800bcd4 <memset>
			SIM_UART_ReInitializeRxDMA();
 8001c14:	f7ff fbdc 	bl	80013d0 <SIM_UART_ReInitializeRxDMA>
			return 0;
 8001c18:	2000      	movs	r0, #0
}
 8001c1a:	b021      	add	sp, #132	@ 0x84
 8001c1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if(count_check >= 20){
 8001c1e:	3c01      	subs	r4, #1
 8001c20:	d0f2      	beq.n	8001c08 <deactivate_context+0x58>
		osDelay(1200);
 8001c22:	f44f 6096 	mov.w	r0, #1200	@ 0x4b0
 8001c26:	f006 f9f3 	bl	8008010 <osDelay>
 8001c2a:	e7d4      	b.n	8001bd6 <deactivate_context+0x26>
 8001c2c:	08010259 	.word	0x08010259
 8001c30:	080100bd 	.word	0x080100bd
 8001c34:	20001de8 	.word	0x20001de8
 8001c38:	08011115 	.word	0x08011115

08001c3c <open_socket_service>:


int open_socket_service(int context_id, int connect_id, int local_port, int access_mode){
 8001c3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001c40:	b0c6      	sub	sp, #280	@ 0x118
	const int timeout_seconds = 50; // Receive response each second
	//TODO: CHANGE timeout to 150 after testing
	int elapsed_time_ms = 0;
	uint8_t command[256];
	snprintf((char *)command, sizeof(command), "AT+QIOPEN=%d,%d,\"%s\",\"%s\",%d,%d,%d\r\n",context_id, connect_id, SERVICE_TYPE, IP_ADDRESS, REMOTE_PORT, local_port, access_mode);
 8001c42:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001c46:	f241 3397 	movw	r3, #5015	@ 0x1397
 8001c4a:	9303      	str	r3, [sp, #12]
 8001c4c:	4b43      	ldr	r3, [pc, #268]	@ (8001d5c <open_socket_service+0x120>)
 8001c4e:	9302      	str	r3, [sp, #8]
 8001c50:	4b43      	ldr	r3, [pc, #268]	@ (8001d60 <open_socket_service+0x124>)
 8001c52:	4a44      	ldr	r2, [pc, #272]	@ (8001d64 <open_socket_service+0x128>)
	//time_t start = time(NULL);
	int count_error = 0;
//	while(elapsed_time_ms < timeout_seconds){
	while(first_pointer == NULL && elapsed_time_ms < timeout_seconds){
//		receive_response();
		if (strstr((char *) response, "ERROR") != NULL){
 8001c54:	f8df 9120 	ldr.w	r9, [pc, #288]	@ 8001d78 <open_socket_service+0x13c>
 8001c58:	f8df 810c 	ldr.w	r8, [pc, #268]	@ 8001d68 <open_socket_service+0x12c>
			memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
			SIM_UART_ReInitializeRxDMA();
			count_error = 0;
			return 0;
		}
		first_pointer = strstr((char*)response, "+QIOPEN:");
 8001c5c:	f8df a11c 	ldr.w	sl, [pc, #284]	@ 8001d7c <open_socket_service+0x140>
	snprintf((char *)command, sizeof(command), "AT+QIOPEN=%d,%d,\"%s\",\"%s\",%d,%d,%d\r\n",context_id, connect_id, SERVICE_TYPE, IP_ADDRESS, REMOTE_PORT, local_port, access_mode);
 8001c60:	e9cd 1300 	strd	r1, r3, [sp]
int open_socket_service(int context_id, int connect_id, int local_port, int access_mode){
 8001c64:	460c      	mov	r4, r1
	snprintf((char *)command, sizeof(command), "AT+QIOPEN=%d,%d,\"%s\",\"%s\",%d,%d,%d\r\n",context_id, connect_id, SERVICE_TYPE, IP_ADDRESS, REMOTE_PORT, local_port, access_mode);
 8001c66:	4603      	mov	r3, r0
 8001c68:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001c6c:	a806      	add	r0, sp, #24
 8001c6e:	f009 fed9 	bl	800ba24 <sniprintf>
	send_AT_command((char *) command);
 8001c72:	a806      	add	r0, sp, #24
 8001c74:	f7ff fb9c 	bl	80013b0 <send_AT_command>
	osDelay(100);
 8001c78:	2064      	movs	r0, #100	@ 0x64
 8001c7a:	f006 f9c9 	bl	8008010 <osDelay>
	int count_error = 0;
 8001c7e:	2700      	movs	r7, #0
	int elapsed_time_ms = 0;
 8001c80:	463e      	mov	r6, r7
		if (strstr((char *) response, "ERROR") != NULL){
 8001c82:	4649      	mov	r1, r9
 8001c84:	4640      	mov	r0, r8
 8001c86:	f00a f875 	bl	800bd74 <strstr>
 8001c8a:	b1e8      	cbz	r0, 8001cc8 <open_socket_service+0x8c>
			memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8001c8c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001c90:	2100      	movs	r1, #0
 8001c92:	4640      	mov	r0, r8
 8001c94:	f00a f81e 	bl	800bcd4 <memset>
			SIM_UART_ReInitializeRxDMA();
 8001c98:	f7ff fb9a 	bl	80013d0 <SIM_UART_ReInitializeRxDMA>
			osDelay(500);
 8001c9c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001ca0:	f006 f9b6 	bl	8008010 <osDelay>
			count_error++;
 8001ca4:	3701      	adds	r7, #1
			send_AT_command((char *) command);
 8001ca6:	a806      	add	r0, sp, #24
 8001ca8:	f7ff fb82 	bl	80013b0 <send_AT_command>
		if(count_error >= 6){
 8001cac:	2f06      	cmp	r7, #6
 8001cae:	d10b      	bne.n	8001cc8 <open_socket_service+0x8c>
			memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8001cb0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001cb4:	2100      	movs	r1, #0
 8001cb6:	482c      	ldr	r0, [pc, #176]	@ (8001d68 <open_socket_service+0x12c>)
 8001cb8:	f00a f80c 	bl	800bcd4 <memset>
			SIM_UART_ReInitializeRxDMA();
 8001cbc:	f7ff fb88 	bl	80013d0 <SIM_UART_ReInitializeRxDMA>
			return 0;
 8001cc0:	2000      	movs	r0, #0
		memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
		SIM_UART_ReInitializeRxDMA();
		return 1;
	}
	else return 0;
}
 8001cc2:	b046      	add	sp, #280	@ 0x118
 8001cc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		first_pointer = strstr((char*)response, "+QIOPEN:");
 8001cc8:	4651      	mov	r1, sl
 8001cca:	4640      	mov	r0, r8
 8001ccc:	f00a f852 	bl	800bd74 <strstr>
		elapsed_time_ms++;
 8001cd0:	3601      	adds	r6, #1
		first_pointer = strstr((char*)response, "+QIOPEN:");
 8001cd2:	4605      	mov	r5, r0
		printf("Elapsed Time: %d\n", elapsed_time_ms);
 8001cd4:	4631      	mov	r1, r6
 8001cd6:	4825      	ldr	r0, [pc, #148]	@ (8001d6c <open_socket_service+0x130>)
 8001cd8:	f009 fe2c 	bl	800b934 <iprintf>
		osDelay(1000);
 8001cdc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001ce0:	f006 f996 	bl	8008010 <osDelay>
	while(first_pointer == NULL && elapsed_time_ms < timeout_seconds){
 8001ce4:	b90d      	cbnz	r5, 8001cea <open_socket_service+0xae>
 8001ce6:	2e32      	cmp	r6, #50	@ 0x32
 8001ce8:	d1cb      	bne.n	8001c82 <open_socket_service+0x46>
	receive_response();
 8001cea:	f7ff fb8b 	bl	8001404 <receive_response>
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8001cee:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001cf2:	2100      	movs	r1, #0
 8001cf4:	481c      	ldr	r0, [pc, #112]	@ (8001d68 <open_socket_service+0x12c>)
 8001cf6:	f009 ffed 	bl	800bcd4 <memset>
	SIM_UART_ReInitializeRxDMA();
 8001cfa:	f7ff fb69 	bl	80013d0 <SIM_UART_ReInitializeRxDMA>
	if(first_pointer != NULL)
 8001cfe:	2d00      	cmp	r5, #0
 8001d00:	d0de      	beq.n	8001cc0 <open_socket_service+0x84>
		snprintf((char *)command, sizeof(command), "AT+QISTATE=1,%d\r\n",connect_id);
 8001d02:	4623      	mov	r3, r4
 8001d04:	4a1a      	ldr	r2, [pc, #104]	@ (8001d70 <open_socket_service+0x134>)
		while(strstr((char *) response, CHECK_RESPONSE) == NULL){
 8001d06:	4d1b      	ldr	r5, [pc, #108]	@ (8001d74 <open_socket_service+0x138>)
 8001d08:	4c17      	ldr	r4, [pc, #92]	@ (8001d68 <open_socket_service+0x12c>)
			if (strstr((char *) response, "ERROR") != NULL){
 8001d0a:	4e1b      	ldr	r6, [pc, #108]	@ (8001d78 <open_socket_service+0x13c>)
		snprintf((char *)command, sizeof(command), "AT+QISTATE=1,%d\r\n",connect_id);
 8001d0c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001d10:	a806      	add	r0, sp, #24
 8001d12:	f009 fe87 	bl	800ba24 <sniprintf>
		send_AT_command((char*) command);
 8001d16:	a806      	add	r0, sp, #24
 8001d18:	f7ff fb4a 	bl	80013b0 <send_AT_command>
		while(strstr((char *) response, CHECK_RESPONSE) == NULL){
 8001d1c:	4629      	mov	r1, r5
 8001d1e:	4620      	mov	r0, r4
 8001d20:	f00a f828 	bl	800bd74 <strstr>
 8001d24:	b170      	cbz	r0, 8001d44 <open_socket_service+0x108>
		receive_response();
 8001d26:	f7ff fb6d 	bl	8001404 <receive_response>
		osDelay(100);
 8001d2a:	2064      	movs	r0, #100	@ 0x64
 8001d2c:	f006 f970 	bl	8008010 <osDelay>
		memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8001d30:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001d34:	2100      	movs	r1, #0
 8001d36:	480c      	ldr	r0, [pc, #48]	@ (8001d68 <open_socket_service+0x12c>)
 8001d38:	f009 ffcc 	bl	800bcd4 <memset>
		SIM_UART_ReInitializeRxDMA();
 8001d3c:	f7ff fb48 	bl	80013d0 <SIM_UART_ReInitializeRxDMA>
		return 1;
 8001d40:	2001      	movs	r0, #1
 8001d42:	e7be      	b.n	8001cc2 <open_socket_service+0x86>
			if (strstr((char *) response, "ERROR") != NULL){
 8001d44:	4631      	mov	r1, r6
 8001d46:	4620      	mov	r0, r4
 8001d48:	f00a f814 	bl	800bd74 <strstr>
 8001d4c:	2800      	cmp	r0, #0
 8001d4e:	d1af      	bne.n	8001cb0 <open_socket_service+0x74>
			osDelay(1000);
 8001d50:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001d54:	f006 f95c 	bl	8008010 <osDelay>
 8001d58:	e7e0      	b.n	8001d1c <open_socket_service+0xe0>
 8001d5a:	bf00      	nop
 8001d5c:	0801028e 	.word	0x0801028e
 8001d60:	0801029b 	.word	0x0801029b
 8001d64:	08010269 	.word	0x08010269
 8001d68:	20001de8 	.word	0x20001de8
 8001d6c:	0800ffeb 	.word	0x0800ffeb
 8001d70:	080102a8 	.word	0x080102a8
 8001d74:	080100bd 	.word	0x080100bd
 8001d78:	08011115 	.word	0x08011115
 8001d7c:	0801029f 	.word	0x0801029f

08001d80 <formatToHexString>:
	SIM_UART_ReInitializeRxDMA();
	return 1;
}

// Function to format data into a hex string
int formatToHexString( const uint8_t* data, int length, char* output, int max_len, int writeIndex) {
 8001d80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    for (int i = 0; i < length; i++) {
 8001d84:	9c08      	ldr	r4, [sp, #32]
        if (writeIndex + 2 >= max_len) {
            // Prevent buffer overflow
            return -1;
        }
        sprintf(output + writeIndex, "%02X", data[i]);
 8001d86:	f8df a034 	ldr.w	sl, [pc, #52]	@ 8001dbc <formatToHexString+0x3c>
int formatToHexString( const uint8_t* data, int length, char* output, int max_len, int writeIndex) {
 8001d8a:	4607      	mov	r7, r0
 8001d8c:	460e      	mov	r6, r1
 8001d8e:	4698      	mov	r8, r3
    for (int i = 0; i < length; i++) {
 8001d90:	2500      	movs	r5, #0
        sprintf(output + writeIndex, "%02X", data[i]);
 8001d92:	f1a2 0902 	sub.w	r9, r2, #2
    for (int i = 0; i < length; i++) {
 8001d96:	42b5      	cmp	r5, r6
 8001d98:	db02      	blt.n	8001da0 <formatToHexString+0x20>
        writeIndex += 2;
    }
    return writeIndex;
}
 8001d9a:	4620      	mov	r0, r4
 8001d9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        if (writeIndex + 2 >= max_len) {
 8001da0:	3402      	adds	r4, #2
 8001da2:	4544      	cmp	r4, r8
 8001da4:	da07      	bge.n	8001db6 <formatToHexString+0x36>
        sprintf(output + writeIndex, "%02X", data[i]);
 8001da6:	5d7a      	ldrb	r2, [r7, r5]
 8001da8:	4651      	mov	r1, sl
 8001daa:	eb09 0004 	add.w	r0, r9, r4
 8001dae:	f009 fe6d 	bl	800ba8c <siprintf>
    for (int i = 0; i < length; i++) {
 8001db2:	3501      	adds	r5, #1
 8001db4:	e7ef      	b.n	8001d96 <formatToHexString+0x16>
            return -1;
 8001db6:	f04f 34ff 	mov.w	r4, #4294967295
 8001dba:	e7ee      	b.n	8001d9a <formatToHexString+0x1a>
 8001dbc:	0801154a 	.word	0x0801154a

08001dc0 <generateRegistrationMessage>:

int generateRegistrationMessage(const JT808_TerminalRegistration *data, char *hexString, int max_len) {
 8001dc0:	b573      	push	{r0, r1, r4, r5, r6, lr}
    int writeIndex = 0;
    writeIndex = formatToHexString(&(data->start_mask), sizeof(data->start_mask), hexString, max_len, writeIndex);
 8001dc2:	2300      	movs	r3, #0
int generateRegistrationMessage(const JT808_TerminalRegistration *data, char *hexString, int max_len) {
 8001dc4:	460c      	mov	r4, r1
 8001dc6:	4615      	mov	r5, r2
    writeIndex = formatToHexString(&(data->start_mask), sizeof(data->start_mask), hexString, max_len, writeIndex);
 8001dc8:	9300      	str	r3, [sp, #0]
 8001dca:	4613      	mov	r3, r2
 8001dcc:	460a      	mov	r2, r1
 8001dce:	2101      	movs	r1, #1
int generateRegistrationMessage(const JT808_TerminalRegistration *data, char *hexString, int max_len) {
 8001dd0:	4606      	mov	r6, r0
    writeIndex = formatToHexString(&(data->start_mask), sizeof(data->start_mask), hexString, max_len, writeIndex);
 8001dd2:	f7ff ffd5 	bl	8001d80 <formatToHexString>
    writeIndex = formatToHexString(data->message_type, sizeof(data->message_type), hexString, max_len, writeIndex);
 8001dd6:	462b      	mov	r3, r5
 8001dd8:	9000      	str	r0, [sp, #0]
 8001dda:	4622      	mov	r2, r4
 8001ddc:	2102      	movs	r1, #2
 8001dde:	1c70      	adds	r0, r6, #1
 8001de0:	f7ff ffce 	bl	8001d80 <formatToHexString>
    writeIndex = formatToHexString(data->message_length, sizeof(data->message_length), hexString, max_len, writeIndex);
 8001de4:	462b      	mov	r3, r5
 8001de6:	9000      	str	r0, [sp, #0]
 8001de8:	4622      	mov	r2, r4
 8001dea:	2102      	movs	r1, #2
 8001dec:	1cf0      	adds	r0, r6, #3
 8001dee:	f7ff ffc7 	bl	8001d80 <formatToHexString>
    writeIndex = formatToHexString(data->terminal_phone_number, sizeof(data->terminal_phone_number), hexString, max_len, writeIndex);
 8001df2:	462b      	mov	r3, r5
 8001df4:	9000      	str	r0, [sp, #0]
 8001df6:	4622      	mov	r2, r4
 8001df8:	2106      	movs	r1, #6
 8001dfa:	1d70      	adds	r0, r6, #5
 8001dfc:	f7ff ffc0 	bl	8001d80 <formatToHexString>
    writeIndex = formatToHexString(data->message_serial_number, sizeof(data->message_serial_number), hexString, max_len, writeIndex);
 8001e00:	462b      	mov	r3, r5
 8001e02:	9000      	str	r0, [sp, #0]
 8001e04:	4622      	mov	r2, r4
 8001e06:	2102      	movs	r1, #2
 8001e08:	f106 000b 	add.w	r0, r6, #11
 8001e0c:	f7ff ffb8 	bl	8001d80 <formatToHexString>
    writeIndex = formatToHexString(data->province_ID, sizeof(data->province_ID), hexString, max_len, writeIndex);
 8001e10:	462b      	mov	r3, r5
 8001e12:	9000      	str	r0, [sp, #0]
 8001e14:	4622      	mov	r2, r4
 8001e16:	2102      	movs	r1, #2
 8001e18:	f106 000d 	add.w	r0, r6, #13
 8001e1c:	f7ff ffb0 	bl	8001d80 <formatToHexString>
    writeIndex = formatToHexString(data->city_ID, sizeof(data->city_ID), hexString, max_len, writeIndex);
 8001e20:	462b      	mov	r3, r5
 8001e22:	9000      	str	r0, [sp, #0]
 8001e24:	4622      	mov	r2, r4
 8001e26:	2102      	movs	r1, #2
 8001e28:	f106 000f 	add.w	r0, r6, #15
 8001e2c:	f7ff ffa8 	bl	8001d80 <formatToHexString>
    writeIndex = formatToHexString(data->manufacturer_ID, sizeof(data->manufacturer_ID), hexString, max_len, writeIndex);
 8001e30:	462b      	mov	r3, r5
 8001e32:	9000      	str	r0, [sp, #0]
 8001e34:	4622      	mov	r2, r4
 8001e36:	2105      	movs	r1, #5
 8001e38:	f106 0011 	add.w	r0, r6, #17
 8001e3c:	f7ff ffa0 	bl	8001d80 <formatToHexString>
    writeIndex = formatToHexString(data->terminal_type, sizeof(data->terminal_type), hexString, max_len, writeIndex);
 8001e40:	462b      	mov	r3, r5
 8001e42:	9000      	str	r0, [sp, #0]
 8001e44:	4622      	mov	r2, r4
 8001e46:	2108      	movs	r1, #8
 8001e48:	f106 0016 	add.w	r0, r6, #22
 8001e4c:	f7ff ff98 	bl	8001d80 <formatToHexString>
    writeIndex = formatToHexString(data->terminal_ID, sizeof(data->terminal_ID), hexString, max_len, writeIndex);
 8001e50:	462b      	mov	r3, r5
 8001e52:	9000      	str	r0, [sp, #0]
 8001e54:	4622      	mov	r2, r4
 8001e56:	2107      	movs	r1, #7
 8001e58:	f106 001e 	add.w	r0, r6, #30
 8001e5c:	f7ff ff90 	bl	8001d80 <formatToHexString>
    writeIndex = formatToHexString(&(data->plate_color), sizeof(data->plate_color), hexString, max_len, writeIndex);
 8001e60:	462b      	mov	r3, r5
 8001e62:	9000      	str	r0, [sp, #0]
 8001e64:	4622      	mov	r2, r4
 8001e66:	2101      	movs	r1, #1
 8001e68:	f106 0025 	add.w	r0, r6, #37	@ 0x25
 8001e6c:	f7ff ff88 	bl	8001d80 <formatToHexString>
    writeIndex = formatToHexString(data->plate_no, sizeof(data->plate_no), hexString, max_len, writeIndex);
 8001e70:	462b      	mov	r3, r5
 8001e72:	9000      	str	r0, [sp, #0]
 8001e74:	4622      	mov	r2, r4
 8001e76:	2114      	movs	r1, #20
 8001e78:	f106 0026 	add.w	r0, r6, #38	@ 0x26
 8001e7c:	f7ff ff80 	bl	8001d80 <formatToHexString>
    writeIndex = formatToHexString(&(data->check_sum), sizeof(data->check_sum), hexString, max_len, writeIndex);
 8001e80:	462b      	mov	r3, r5
 8001e82:	9000      	str	r0, [sp, #0]
 8001e84:	4622      	mov	r2, r4
 8001e86:	2101      	movs	r1, #1
 8001e88:	f106 003a 	add.w	r0, r6, #58	@ 0x3a
 8001e8c:	f7ff ff78 	bl	8001d80 <formatToHexString>
    writeIndex = formatToHexString(&(data->end_mask), sizeof(data->end_mask), hexString, max_len, writeIndex);
 8001e90:	462b      	mov	r3, r5
 8001e92:	9000      	str	r0, [sp, #0]
 8001e94:	4622      	mov	r2, r4
 8001e96:	2101      	movs	r1, #1
 8001e98:	f106 003b 	add.w	r0, r6, #59	@ 0x3b
 8001e9c:	f7ff ff70 	bl	8001d80 <formatToHexString>
    if (writeIndex < 0) {
        // Handle error in formatting
        return -1;
    }
    return writeIndex;
}
 8001ea0:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 8001ea4:	b002      	add	sp, #8
 8001ea6:	bd70      	pop	{r4, r5, r6, pc}

08001ea8 <generateLocationInfoMessage>:

int generateLocationInfoMessage(const JT808_LocationInfoReport* report, char* hexString, int max_len) {
 8001ea8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001eac:	b0aa      	sub	sp, #168	@ 0xa8
   const uint8_t* fields[] = {
        &(report->start_mask), report->message_type, report->message_length,
 8001eae:	1c43      	adds	r3, r0, #1
   const uint8_t* fields[] = {
 8001eb0:	9303      	str	r3, [sp, #12]
        &(report->start_mask), report->message_type, report->message_length,
 8001eb2:	1cc3      	adds	r3, r0, #3
   const uint8_t* fields[] = {
 8001eb4:	9304      	str	r3, [sp, #16]
        report->terminal_phone_number, report->terminal_serial_number, report->alarm,
 8001eb6:	1d43      	adds	r3, r0, #5
   const uint8_t* fields[] = {
 8001eb8:	9305      	str	r3, [sp, #20]
        report->terminal_phone_number, report->terminal_serial_number, report->alarm,
 8001eba:	f100 030b 	add.w	r3, r0, #11
   const uint8_t* fields[] = {
 8001ebe:	9306      	str	r3, [sp, #24]
        report->terminal_phone_number, report->terminal_serial_number, report->alarm,
 8001ec0:	f100 030d 	add.w	r3, r0, #13
   const uint8_t* fields[] = {
 8001ec4:	9307      	str	r3, [sp, #28]
        report->status, report->latitude, report->longitude, report->altitude,
 8001ec6:	f100 0311 	add.w	r3, r0, #17
   const uint8_t* fields[] = {
 8001eca:	9308      	str	r3, [sp, #32]
        report->status, report->latitude, report->longitude, report->altitude,
 8001ecc:	f100 0315 	add.w	r3, r0, #21
   const uint8_t* fields[] = {
 8001ed0:	9309      	str	r3, [sp, #36]	@ 0x24
        report->status, report->latitude, report->longitude, report->altitude,
 8001ed2:	f100 0319 	add.w	r3, r0, #25
   const uint8_t* fields[] = {
 8001ed6:	930a      	str	r3, [sp, #40]	@ 0x28
        report->status, report->latitude, report->longitude, report->altitude,
 8001ed8:	f100 031d 	add.w	r3, r0, #29
   const uint8_t* fields[] = {
 8001edc:	930b      	str	r3, [sp, #44]	@ 0x2c
        report->speed, report->direction, report->timestamp, report->mileage,
 8001ede:	f100 031f 	add.w	r3, r0, #31
   const uint8_t* fields[] = {
 8001ee2:	930c      	str	r3, [sp, #48]	@ 0x30
        report->speed, report->direction, report->timestamp, report->mileage,
 8001ee4:	f100 0321 	add.w	r3, r0, #33	@ 0x21
   const uint8_t* fields[] = {
 8001ee8:	930d      	str	r3, [sp, #52]	@ 0x34
        report->speed, report->direction, report->timestamp, report->mileage,
 8001eea:	f100 0323 	add.w	r3, r0, #35	@ 0x23
   const uint8_t* fields[] = {
 8001eee:	930e      	str	r3, [sp, #56]	@ 0x38
        report->speed, report->direction, report->timestamp, report->mileage,
 8001ef0:	f100 0329 	add.w	r3, r0, #41	@ 0x29
   const uint8_t* fields[] = {
 8001ef4:	930f      	str	r3, [sp, #60]	@ 0x3c
        report->oil, report->driving_record_speed, report->vehicle_id, report->signal,
 8001ef6:	f100 032f 	add.w	r3, r0, #47	@ 0x2f
   const uint8_t* fields[] = {
 8001efa:	9310      	str	r3, [sp, #64]	@ 0x40
        report->oil, report->driving_record_speed, report->vehicle_id, report->signal,
 8001efc:	f100 0331 	add.w	r3, r0, #49	@ 0x31
   const uint8_t* fields[] = {
 8001f00:	9311      	str	r3, [sp, #68]	@ 0x44
        report->oil, report->driving_record_speed, report->vehicle_id, report->signal,
 8001f02:	f100 0333 	add.w	r3, r0, #51	@ 0x33
   const uint8_t* fields[] = {
 8001f06:	9312      	str	r3, [sp, #72]	@ 0x48
        report->oil, report->driving_record_speed, report->vehicle_id, report->signal,
 8001f08:	f100 0336 	add.w	r3, r0, #54	@ 0x36
   const uint8_t* fields[] = {
 8001f0c:	9002      	str	r0, [sp, #8]
 8001f0e:	9313      	str	r3, [sp, #76]	@ 0x4c
        report->additional, &(report->end_mask)
    };
    int lengths[] = { 1, 2, 2, 6, 2, 4, 4, 4, 4, 2, 2, 2, 6, 6, 2, 2, 3, 1, 9, 1 };
 8001f10:	af16      	add	r7, sp, #88	@ 0x58
        report->additional, &(report->end_mask)
 8001f12:	f100 0337 	add.w	r3, r0, #55	@ 0x37
 8001f16:	3040      	adds	r0, #64	@ 0x40
   const uint8_t* fields[] = {
 8001f18:	9015      	str	r0, [sp, #84]	@ 0x54
int generateLocationInfoMessage(const JT808_LocationInfoReport* report, char* hexString, int max_len) {
 8001f1a:	460d      	mov	r5, r1
 8001f1c:	4616      	mov	r6, r2
    int lengths[] = { 1, 2, 2, 6, 2, 4, 4, 4, 4, 2, 2, 2, 6, 6, 2, 2, 3, 1, 9, 1 };
 8001f1e:	490f      	ldr	r1, [pc, #60]	@ (8001f5c <generateLocationInfoMessage+0xb4>)
   const uint8_t* fields[] = {
 8001f20:	9314      	str	r3, [sp, #80]	@ 0x50
    int lengths[] = { 1, 2, 2, 6, 2, 4, 4, 4, 4, 2, 2, 2, 6, 6, 2, 2, 3, 1, 9, 1 };
 8001f22:	2250      	movs	r2, #80	@ 0x50
 8001f24:	4638      	mov	r0, r7

    int writeIndex = 0;
    for (int i = 0; i < sizeof(fields) / sizeof(fields[0]); i++) {
 8001f26:	2400      	movs	r4, #0
    int lengths[] = { 1, 2, 2, 6, 2, 4, 4, 4, 4, 2, 2, 2, 6, 6, 2, 2, 3, 1, 9, 1 };
 8001f28:	f00a fd7e 	bl	800ca28 <memcpy>
        writeIndex = formatToHexString(fields[i], lengths[i], hexString, max_len, writeIndex);
 8001f2c:	f10d 0808 	add.w	r8, sp, #8
    int writeIndex = 0;
 8001f30:	4620      	mov	r0, r4
        writeIndex = formatToHexString(fields[i], lengths[i], hexString, max_len, writeIndex);
 8001f32:	9000      	str	r0, [sp, #0]
 8001f34:	f857 1024 	ldr.w	r1, [r7, r4, lsl #2]
 8001f38:	f858 0024 	ldr.w	r0, [r8, r4, lsl #2]
 8001f3c:	4633      	mov	r3, r6
 8001f3e:	462a      	mov	r2, r5
 8001f40:	f7ff ff1e 	bl	8001d80 <formatToHexString>
        if (writeIndex < 0) return -1;
 8001f44:	2800      	cmp	r0, #0
 8001f46:	db05      	blt.n	8001f54 <generateLocationInfoMessage+0xac>
    for (int i = 0; i < sizeof(fields) / sizeof(fields[0]); i++) {
 8001f48:	3401      	adds	r4, #1
 8001f4a:	2c14      	cmp	r4, #20
 8001f4c:	d1f1      	bne.n	8001f32 <generateLocationInfoMessage+0x8a>
    }
    return writeIndex;
}
 8001f4e:	b02a      	add	sp, #168	@ 0xa8
 8001f50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if (writeIndex < 0) return -1;
 8001f54:	f04f 30ff 	mov.w	r0, #4294967295
 8001f58:	e7f9      	b.n	8001f4e <generateLocationInfoMessage+0xa6>
 8001f5a:	bf00      	nop
 8001f5c:	0800fc50 	.word	0x0800fc50

08001f60 <login_to_server>:



int login_to_server(int connect_id, const JT808_TerminalRegistration *reg_msg){
 8001f60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001f64:	b0e2      	sub	sp, #392	@ 0x188
	uint8_t command[256];  // Increased buffer size
	char hexString[128] = {0};
 8001f66:	2400      	movs	r4, #0
int login_to_server(int connect_id, const JT808_TerminalRegistration *reg_msg){
 8001f68:	460f      	mov	r7, r1
	char hexString[128] = {0};
 8001f6a:	ae02      	add	r6, sp, #8
 8001f6c:	227c      	movs	r2, #124	@ 0x7c
 8001f6e:	4621      	mov	r1, r4
int login_to_server(int connect_id, const JT808_TerminalRegistration *reg_msg){
 8001f70:	4605      	mov	r5, r0
	char hexString[128] = {0};
 8001f72:	a803      	add	r0, sp, #12
 8001f74:	6034      	str	r4, [r6, #0]
 8001f76:	f009 fead 	bl	800bcd4 <memset>
	int count_check = 0;
	int result = generateRegistrationMessage(reg_msg, hexString, 128);
 8001f7a:	2280      	movs	r2, #128	@ 0x80
 8001f7c:	4631      	mov	r1, r6
 8001f7e:	4638      	mov	r0, r7
 8001f80:	f7ff ff1e 	bl	8001dc0 <generateRegistrationMessage>
	if (result < 0) {
 8001f84:	42a0      	cmp	r0, r4
 8001f86:	da04      	bge.n	8001f92 <login_to_server+0x32>
		printf("ERROR: FAILED to generate message string\n");
 8001f88:	482b      	ldr	r0, [pc, #172]	@ (8002038 <login_to_server+0xd8>)
 8001f8a:	f009 fd43 	bl	800ba14 <puts>
		return 1;
 8001f8e:	2001      	movs	r0, #1
 8001f90:	e02e      	b.n	8001ff0 <login_to_server+0x90>
	}

	// Format the AT command with the hex message
	snprintf((char*)command, sizeof(command), "AT+QISENDEX=%d,\"%s\"\r\n", connect_id, hexString);
 8001f92:	4a2a      	ldr	r2, [pc, #168]	@ (800203c <login_to_server+0xdc>)
 8001f94:	9600      	str	r6, [sp, #0]
 8001f96:	462b      	mov	r3, r5
 8001f98:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001f9c:	a822      	add	r0, sp, #136	@ 0x88
 8001f9e:	f009 fd41 	bl	800ba24 <sniprintf>
	//snprintf((char *)command, sizeof(command), "AT+QISENDEX=%d,\"%s\"\r\n", connect_id, message);
	send_AT_command((char*)command);
 8001fa2:	a822      	add	r0, sp, #136	@ 0x88
 8001fa4:	f7ff fa04 	bl	80013b0 <send_AT_command>

//	while(1){
	while(strstr((char *) response, "+QIURC") == NULL){
 8001fa8:	4f25      	ldr	r7, [pc, #148]	@ (8002040 <login_to_server+0xe0>)
 8001faa:	4e26      	ldr	r6, [pc, #152]	@ (8002044 <login_to_server+0xe4>)
			count_check = 0;
			memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
			SIM_UART_ReInitializeRxDMA();
			return 0;
		}
		if (strstr((char*) response, "ERROR") != NULL){
 8001fac:	f8df 80a0 	ldr.w	r8, [pc, #160]	@ 8002050 <login_to_server+0xf0>
	while(strstr((char *) response, "+QIURC") == NULL){
 8001fb0:	4639      	mov	r1, r7
 8001fb2:	4630      	mov	r0, r6
 8001fb4:	f009 fede 	bl	800bd74 <strstr>
 8001fb8:	b168      	cbz	r0, 8001fd6 <login_to_server+0x76>
		count_check++;
		printf("Elapsed Time: %d\n", count_check);
//		receive_response("Check sending to server\n");
		osDelay(100);
	}
	receive_response();
 8001fba:	f7ff fa23 	bl	8001404 <receive_response>
	osDelay(100);
 8001fbe:	2064      	movs	r0, #100	@ 0x64
 8001fc0:	f006 f826 	bl	8008010 <osDelay>
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8001fc4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001fc8:	2100      	movs	r1, #0
 8001fca:	481e      	ldr	r0, [pc, #120]	@ (8002044 <login_to_server+0xe4>)
 8001fcc:	f009 fe82 	bl	800bcd4 <memset>
	SIM_UART_ReInitializeRxDMA();
 8001fd0:	f7ff f9fe 	bl	80013d0 <SIM_UART_ReInitializeRxDMA>
	return 1;
 8001fd4:	e7db      	b.n	8001f8e <login_to_server+0x2e>
		if(count_check >= 50){
 8001fd6:	2c32      	cmp	r4, #50	@ 0x32
 8001fd8:	d10d      	bne.n	8001ff6 <login_to_server+0x96>
			receive_response();
 8001fda:	f7ff fa13 	bl	8001404 <receive_response>
			memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8001fde:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001fe2:	2100      	movs	r1, #0
 8001fe4:	4817      	ldr	r0, [pc, #92]	@ (8002044 <login_to_server+0xe4>)
 8001fe6:	f009 fe75 	bl	800bcd4 <memset>
			SIM_UART_ReInitializeRxDMA();
 8001fea:	f7ff f9f1 	bl	80013d0 <SIM_UART_ReInitializeRxDMA>
			return 0;
 8001fee:	2000      	movs	r0, #0
}
 8001ff0:	b062      	add	sp, #392	@ 0x188
 8001ff2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (strstr((char*) response, "ERROR") != NULL){
 8001ff6:	4641      	mov	r1, r8
 8001ff8:	4630      	mov	r0, r6
 8001ffa:	f009 febb 	bl	800bd74 <strstr>
 8001ffe:	4605      	mov	r5, r0
 8002000:	2800      	cmp	r0, #0
 8002002:	d1ea      	bne.n	8001fda <login_to_server+0x7a>
		if (strstr((char*)response, "closed") != NULL) {
 8002004:	4910      	ldr	r1, [pc, #64]	@ (8002048 <login_to_server+0xe8>)
 8002006:	4630      	mov	r0, r6
 8002008:	f009 feb4 	bl	800bd74 <strstr>
 800200c:	b158      	cbz	r0, 8002026 <login_to_server+0xc6>
			receive_response();
 800200e:	f7ff f9f9 	bl	8001404 <receive_response>
			memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8002012:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002016:	4629      	mov	r1, r5
 8002018:	480a      	ldr	r0, [pc, #40]	@ (8002044 <login_to_server+0xe4>)
 800201a:	f009 fe5b 	bl	800bcd4 <memset>
			SIM_UART_ReInitializeRxDMA();
 800201e:	f7ff f9d7 	bl	80013d0 <SIM_UART_ReInitializeRxDMA>
			return 2;
 8002022:	2002      	movs	r0, #2
 8002024:	e7e4      	b.n	8001ff0 <login_to_server+0x90>
		count_check++;
 8002026:	3401      	adds	r4, #1
		printf("Elapsed Time: %d\n", count_check);
 8002028:	4621      	mov	r1, r4
 800202a:	4808      	ldr	r0, [pc, #32]	@ (800204c <login_to_server+0xec>)
 800202c:	f009 fc82 	bl	800b934 <iprintf>
		osDelay(100);
 8002030:	2064      	movs	r0, #100	@ 0x64
 8002032:	f005 ffed 	bl	8008010 <osDelay>
 8002036:	e7bb      	b.n	8001fb0 <login_to_server+0x50>
 8002038:	080102ba 	.word	0x080102ba
 800203c:	080102e3 	.word	0x080102e3
 8002040:	08010300 	.word	0x08010300
 8002044:	20001de8 	.word	0x20001de8
 8002048:	080102f9 	.word	0x080102f9
 800204c:	0800ffeb 	.word	0x0800ffeb
 8002050:	08011115 	.word	0x08011115

08002054 <send_location_to_server>:

int send_location_to_server(int connect_id, const JT808_LocationInfoReport *location_info){
 8002054:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002058:	b0e4      	sub	sp, #400	@ 0x190
	uint8_t command[256];  // Increased buffer size
	char hexString[131] = {0};
 800205a:	2400      	movs	r4, #0
int send_location_to_server(int connect_id, const JT808_LocationInfoReport *location_info){
 800205c:	460f      	mov	r7, r1
	char hexString[131] = {0};
 800205e:	ae03      	add	r6, sp, #12
 8002060:	227f      	movs	r2, #127	@ 0x7f
 8002062:	4621      	mov	r1, r4
int send_location_to_server(int connect_id, const JT808_LocationInfoReport *location_info){
 8002064:	4605      	mov	r5, r0
	char hexString[131] = {0};
 8002066:	a804      	add	r0, sp, #16
 8002068:	6034      	str	r4, [r6, #0]
 800206a:	f009 fe33 	bl	800bcd4 <memset>
	int count_check = 0;

	int count_resend = 0;
	int result = generateLocationInfoMessage(location_info, hexString, 131);
 800206e:	2283      	movs	r2, #131	@ 0x83
 8002070:	4631      	mov	r1, r6
 8002072:	4638      	mov	r0, r7
 8002074:	f7ff ff18 	bl	8001ea8 <generateLocationInfoMessage>
	if (result < 0) {
 8002078:	42a0      	cmp	r0, r4
 800207a:	da04      	bge.n	8002086 <send_location_to_server+0x32>
		printf("ERROR: FAILED to generate message string\n");
 800207c:	482b      	ldr	r0, [pc, #172]	@ (800212c <send_location_to_server+0xd8>)
 800207e:	f009 fcc9 	bl	800ba14 <puts>
		return 1;
 8002082:	2001      	movs	r0, #1
 8002084:	e032      	b.n	80020ec <send_location_to_server+0x98>
	}

		// Format the AT command with the hex message
	snprintf((char *) command, sizeof(command), "AT+QISENDEX=%d,\"%s\"\r\n", connect_id, hexString);
 8002086:	4a2a      	ldr	r2, [pc, #168]	@ (8002130 <send_location_to_server+0xdc>)
 8002088:	9600      	str	r6, [sp, #0]
 800208a:	462b      	mov	r3, r5
 800208c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002090:	a824      	add	r0, sp, #144	@ 0x90
 8002092:	f009 fcc7 	bl	800ba24 <sniprintf>
	send_AT_command((char*)command);
 8002096:	a824      	add	r0, sp, #144	@ 0x90
 8002098:	f7ff f98a 	bl	80013b0 <send_AT_command>
	while(strstr((char *) response, "+QIURC") == NULL){
 800209c:	4f25      	ldr	r7, [pc, #148]	@ (8002134 <send_location_to_server+0xe0>)
 800209e:	4e26      	ldr	r6, [pc, #152]	@ (8002138 <send_location_to_server+0xe4>)
		osDelay(100);
		if (strstr((char*)response, "closed") != NULL) {
 80020a0:	f8df 80a0 	ldr.w	r8, [pc, #160]	@ 8002144 <send_location_to_server+0xf0>
	while(strstr((char *) response, "+QIURC") == NULL){
 80020a4:	4639      	mov	r1, r7
 80020a6:	4630      	mov	r0, r6
 80020a8:	f009 fe64 	bl	800bd74 <strstr>
 80020ac:	4605      	mov	r5, r0
 80020ae:	b150      	cbz	r0, 80020c6 <send_location_to_server+0x72>
		}
		count_check++;
		printf("Elapsed Time: %d\n", count_check);
		receive_response();
	}
	receive_response();
 80020b0:	f7ff f9a8 	bl	8001404 <receive_response>
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 80020b4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80020b8:	2100      	movs	r1, #0
 80020ba:	481f      	ldr	r0, [pc, #124]	@ (8002138 <send_location_to_server+0xe4>)
 80020bc:	f009 fe0a 	bl	800bcd4 <memset>
	SIM_UART_ReInitializeRxDMA();
 80020c0:	f7ff f986 	bl	80013d0 <SIM_UART_ReInitializeRxDMA>
	return 1;
 80020c4:	e7dd      	b.n	8002082 <send_location_to_server+0x2e>
		osDelay(100);
 80020c6:	2064      	movs	r0, #100	@ 0x64
 80020c8:	f005 ffa2 	bl	8008010 <osDelay>
		if (strstr((char*)response, "closed") != NULL) {
 80020cc:	4641      	mov	r1, r8
 80020ce:	4630      	mov	r0, r6
 80020d0:	f009 fe50 	bl	800bd74 <strstr>
 80020d4:	b168      	cbz	r0, 80020f2 <send_location_to_server+0x9e>
			 receive_response();
 80020d6:	f7ff f995 	bl	8001404 <receive_response>
			 memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 80020da:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80020de:	4629      	mov	r1, r5
 80020e0:	4815      	ldr	r0, [pc, #84]	@ (8002138 <send_location_to_server+0xe4>)
 80020e2:	f009 fdf7 	bl	800bcd4 <memset>
			 SIM_UART_ReInitializeRxDMA();
 80020e6:	f7ff f973 	bl	80013d0 <SIM_UART_ReInitializeRxDMA>
			 return 2;
 80020ea:	2002      	movs	r0, #2
}
 80020ec:	b064      	add	sp, #400	@ 0x190
 80020ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if(count_check >= 50){
 80020f2:	2c32      	cmp	r4, #50	@ 0x32
 80020f4:	d10b      	bne.n	800210e <send_location_to_server+0xba>
			receive_response();
 80020f6:	f7ff f985 	bl	8001404 <receive_response>
			memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 80020fa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80020fe:	2100      	movs	r1, #0
 8002100:	480d      	ldr	r0, [pc, #52]	@ (8002138 <send_location_to_server+0xe4>)
 8002102:	f009 fde7 	bl	800bcd4 <memset>
			SIM_UART_ReInitializeRxDMA();
 8002106:	f7ff f963 	bl	80013d0 <SIM_UART_ReInitializeRxDMA>
			return 0;
 800210a:	2000      	movs	r0, #0
 800210c:	e7ee      	b.n	80020ec <send_location_to_server+0x98>
		if (strstr((char*) response, "ERROR") != NULL){
 800210e:	490b      	ldr	r1, [pc, #44]	@ (800213c <send_location_to_server+0xe8>)
 8002110:	4630      	mov	r0, r6
 8002112:	f009 fe2f 	bl	800bd74 <strstr>
 8002116:	2800      	cmp	r0, #0
 8002118:	d1ed      	bne.n	80020f6 <send_location_to_server+0xa2>
		count_check++;
 800211a:	3401      	adds	r4, #1
		printf("Elapsed Time: %d\n", count_check);
 800211c:	4621      	mov	r1, r4
 800211e:	4808      	ldr	r0, [pc, #32]	@ (8002140 <send_location_to_server+0xec>)
 8002120:	f009 fc08 	bl	800b934 <iprintf>
		receive_response();
 8002124:	f7ff f96e 	bl	8001404 <receive_response>
 8002128:	e7bc      	b.n	80020a4 <send_location_to_server+0x50>
 800212a:	bf00      	nop
 800212c:	080102ba 	.word	0x080102ba
 8002130:	080102e3 	.word	0x080102e3
 8002134:	08010300 	.word	0x08010300
 8002138:	20001de8 	.word	0x20001de8
 800213c:	08011115 	.word	0x08011115
 8002140:	0800ffeb 	.word	0x0800ffeb
 8002144:	080102f9 	.word	0x080102f9

08002148 <acknowledgeResponse>:

int acknowledgeResponse(int connect_id){
 8002148:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint8_t command[256];
	int count_check = 0;
	int count_resend = 0;
 800214c:	2500      	movs	r5, #0

	while(count_resend <= 3){
		is_sent_ok = 1;
		snprintf((char *)command, sizeof(command), "AT+QISEND=%d,0\r\n", connect_id);
		send_AT_command((char*)command);
		printf("\n\n---------------- IN QISEND:0X0 SENDING COUNT: %d ------------------\n\n", count_resend);
 800214e:	f8df 9100 	ldr.w	r9, [pc, #256]	@ 8002250 <acknowledgeResponse+0x108>
		while(strstr((char *) response, CHECK_RESPONSE) == NULL){
 8002152:	4f38      	ldr	r7, [pc, #224]	@ (8002234 <acknowledgeResponse+0xec>)
int acknowledgeResponse(int connect_id){
 8002154:	b0c7      	sub	sp, #284	@ 0x11c
 8002156:	4680      	mov	r8, r0
	int count_check = 0;
 8002158:	462e      	mov	r6, r5
		snprintf((char *)command, sizeof(command), "AT+QISEND=%d,0\r\n", connect_id);
 800215a:	4a37      	ldr	r2, [pc, #220]	@ (8002238 <acknowledgeResponse+0xf0>)
		while(strstr((char *) response, CHECK_RESPONSE) == NULL){
 800215c:	f8df a0f4 	ldr.w	sl, [pc, #244]	@ 8002254 <acknowledgeResponse+0x10c>
				memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
				SIM_UART_ReInitializeRxDMA();
				is_sent_ok = 0;
				break;
			}
			if (strstr((char*) response, "ERROR") != NULL){
 8002160:	f8df b0f4 	ldr.w	fp, [pc, #244]	@ 8002258 <acknowledgeResponse+0x110>
		snprintf((char *)command, sizeof(command), "AT+QISEND=%d,0\r\n", connect_id);
 8002164:	4643      	mov	r3, r8
 8002166:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800216a:	a806      	add	r0, sp, #24
 800216c:	f009 fc5a 	bl	800ba24 <sniprintf>
		send_AT_command((char*)command);
 8002170:	a806      	add	r0, sp, #24
 8002172:	f7ff f91d 	bl	80013b0 <send_AT_command>
		printf("\n\n---------------- IN QISEND:0X0 SENDING COUNT: %d ------------------\n\n", count_resend);
 8002176:	4629      	mov	r1, r5
 8002178:	4648      	mov	r0, r9
 800217a:	f009 fbdb 	bl	800b934 <iprintf>
		while(strstr((char *) response, CHECK_RESPONSE) == NULL){
 800217e:	482d      	ldr	r0, [pc, #180]	@ (8002234 <acknowledgeResponse+0xec>)
 8002180:	4651      	mov	r1, sl
 8002182:	f009 fdf7 	bl	800bd74 <strstr>
 8002186:	4604      	mov	r4, r0
 8002188:	b108      	cbz	r0, 800218e <acknowledgeResponse+0x46>
 800218a:	2401      	movs	r4, #1
 800218c:	e00d      	b.n	80021aa <acknowledgeResponse+0x62>
			osDelay(100);
 800218e:	2064      	movs	r0, #100	@ 0x64
 8002190:	f005 ff3e 	bl	8008010 <osDelay>
			if(count_check >= 50){
 8002194:	2e31      	cmp	r6, #49	@ 0x31
 8002196:	dd10      	ble.n	80021ba <acknowledgeResponse+0x72>
				memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8002198:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800219c:	4621      	mov	r1, r4
 800219e:	4638      	mov	r0, r7
 80021a0:	f009 fd98 	bl	800bcd4 <memset>
				SIM_UART_ReInitializeRxDMA();
 80021a4:	f7ff f914 	bl	80013d0 <SIM_UART_ReInitializeRxDMA>
				is_sent_ok = 0;
 80021a8:	4626      	mov	r6, r4
			count_check++;

			printf("Elapsed Time +QISEND: 0,0: %d\n", count_check);
			receive_response();
		}
		receive_response();
 80021aa:	f7ff f92b 	bl	8001404 <receive_response>
		if(is_sent_ok == 0) {
 80021ae:	b9ec      	cbnz	r4, 80021ec <acknowledgeResponse+0xa4>
		printf("Lost Transmit BYTES: %d\n", unackedBytes);
		memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
		SIM_UART_ReInitializeRxDMA();
		if (result == 3) {
			if (unackedBytes > 0) {
				count_resend++;
 80021b0:	3501      	adds	r5, #1
	while(count_resend <= 3){
 80021b2:	2d04      	cmp	r5, #4
 80021b4:	d1d1      	bne.n	800215a <acknowledgeResponse+0x12>
 80021b6:	2400      	movs	r4, #0
				printf("NO DATA LOSS\n");
				break;
			}
		}
	}
	return is_sent_ok;
 80021b8:	e038      	b.n	800222c <acknowledgeResponse+0xe4>
			if (strstr((char*) response, "ERROR") != NULL){
 80021ba:	4659      	mov	r1, fp
 80021bc:	4638      	mov	r0, r7
 80021be:	f009 fdd9 	bl	800bd74 <strstr>
 80021c2:	b158      	cbz	r0, 80021dc <acknowledgeResponse+0x94>
				printf("\n\n---------------- IN QISEND: 0X0: ERROR ------------------\n\n");
 80021c4:	481d      	ldr	r0, [pc, #116]	@ (800223c <acknowledgeResponse+0xf4>)
 80021c6:	f009 fc25 	bl	800ba14 <puts>
				memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 80021ca:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80021ce:	4621      	mov	r1, r4
 80021d0:	4638      	mov	r0, r7
 80021d2:	f009 fd7f 	bl	800bcd4 <memset>
				SIM_UART_ReInitializeRxDMA();
 80021d6:	f7ff f8fb 	bl	80013d0 <SIM_UART_ReInitializeRxDMA>
				break;
 80021da:	e7e6      	b.n	80021aa <acknowledgeResponse+0x62>
			count_check++;
 80021dc:	3601      	adds	r6, #1
			printf("Elapsed Time +QISEND: 0,0: %d\n", count_check);
 80021de:	4631      	mov	r1, r6
 80021e0:	4817      	ldr	r0, [pc, #92]	@ (8002240 <acknowledgeResponse+0xf8>)
 80021e2:	f009 fba7 	bl	800b934 <iprintf>
			receive_response();
 80021e6:	f7ff f90d 	bl	8001404 <receive_response>
 80021ea:	e7c8      	b.n	800217e <acknowledgeResponse+0x36>
		int result = sscanf((char*)response, "AT+QISEND=0,0 +QISEND: %d,%d,%d", &sentBytes, &ackedBytes, &unackedBytes);
 80021ec:	f10d 0a14 	add.w	sl, sp, #20
 80021f0:	ab04      	add	r3, sp, #16
 80021f2:	aa03      	add	r2, sp, #12
 80021f4:	4913      	ldr	r1, [pc, #76]	@ (8002244 <acknowledgeResponse+0xfc>)
 80021f6:	f8cd a000 	str.w	sl, [sp]
 80021fa:	4638      	mov	r0, r7
 80021fc:	f009 fc66 	bl	800bacc <siscanf>
		printf("Lost Transmit BYTES: %d\n", unackedBytes);
 8002200:	9905      	ldr	r1, [sp, #20]
		int result = sscanf((char*)response, "AT+QISEND=0,0 +QISEND: %d,%d,%d", &sentBytes, &ackedBytes, &unackedBytes);
 8002202:	4683      	mov	fp, r0
		printf("Lost Transmit BYTES: %d\n", unackedBytes);
 8002204:	4810      	ldr	r0, [pc, #64]	@ (8002248 <acknowledgeResponse+0x100>)
 8002206:	f009 fb95 	bl	800b934 <iprintf>
		memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 800220a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800220e:	2100      	movs	r1, #0
 8002210:	4638      	mov	r0, r7
 8002212:	f009 fd5f 	bl	800bcd4 <memset>
		SIM_UART_ReInitializeRxDMA();
 8002216:	f7ff f8db 	bl	80013d0 <SIM_UART_ReInitializeRxDMA>
		if (result == 3) {
 800221a:	f1bb 0f03 	cmp.w	fp, #3
 800221e:	d19c      	bne.n	800215a <acknowledgeResponse+0x12>
			if (unackedBytes > 0) {
 8002220:	9b05      	ldr	r3, [sp, #20]
 8002222:	2b00      	cmp	r3, #0
 8002224:	dcc4      	bgt.n	80021b0 <acknowledgeResponse+0x68>
				printf("NO DATA LOSS\n");
 8002226:	4809      	ldr	r0, [pc, #36]	@ (800224c <acknowledgeResponse+0x104>)
 8002228:	f009 fbf4 	bl	800ba14 <puts>
}
 800222c:	4620      	mov	r0, r4
 800222e:	b047      	add	sp, #284	@ 0x11c
 8002230:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002234:	20001de8 	.word	0x20001de8
 8002238:	08010307 	.word	0x08010307
 800223c:	08010360 	.word	0x08010360
 8002240:	0801039d 	.word	0x0801039d
 8002244:	080103bc 	.word	0x080103bc
 8002248:	080103dc 	.word	0x080103dc
 800224c:	080103f5 	.word	0x080103f5
 8002250:	08010318 	.word	0x08010318
 8002254:	080100bd 	.word	0x080100bd
 8002258:	08011115 	.word	0x08011115

0800225c <getResponseFromServer>:

int getResponseFromServer(int connect_id){
 800225c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002260:	4680      	mov	r8, r0
 8002262:	b0c1      	sub	sp, #260	@ 0x104
	uint8_t command[256];
	int count_check = 0;
	int count_resend = 0;
	int is_sent_ok = 0;
	printf("\n\n---------------- IN QIRD: 0X1500h ------------------\n\n");
 8002264:	4839      	ldr	r0, [pc, #228]	@ (800234c <getResponseFromServer+0xf0>)
	for(size_t i = 0; i < 5; i++){
		snprintf((char *)command, sizeof(command), "AT+QIRD=%d,100\r\n", connect_id);
 8002266:	f8df 9108 	ldr.w	r9, [pc, #264]	@ 8002370 <getResponseFromServer+0x114>
		send_AT_command((char*)command);
		printf("\n\n---------------- IN QIRD:0X100 SENDING COUNT: %d ------------------\n\n", count_resend);
 800226a:	f8df a108 	ldr.w	sl, [pc, #264]	@ 8002374 <getResponseFromServer+0x118>
	printf("\n\n---------------- IN QIRD: 0X1500h ------------------\n\n");
 800226e:	f009 fbd1 	bl	800ba14 <puts>
 8002272:	2605      	movs	r6, #5
		snprintf((char *)command, sizeof(command), "AT+QIRD=%d,100\r\n", connect_id);
 8002274:	4643      	mov	r3, r8
 8002276:	464a      	mov	r2, r9
 8002278:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800227c:	4668      	mov	r0, sp
 800227e:	f009 fbd1 	bl	800ba24 <sniprintf>
		send_AT_command((char*)command);
 8002282:	4668      	mov	r0, sp
 8002284:	f7ff f894 	bl	80013b0 <send_AT_command>
		printf("\n\n---------------- IN QIRD:0X100 SENDING COUNT: %d ------------------\n\n", count_resend);
 8002288:	2100      	movs	r1, #0
 800228a:	4650      	mov	r0, sl
 800228c:	f009 fb52 	bl	800b934 <iprintf>
		is_sent_ok = 1;
		while(strstr((char *) response, "+QIRD") == NULL){
 8002290:	4f2f      	ldr	r7, [pc, #188]	@ (8002350 <getResponseFromServer+0xf4>)
			if (strstr((char*)response, "ERROR") != NULL){
 8002292:	f8df b0e4 	ldr.w	fp, [pc, #228]	@ 8002378 <getResponseFromServer+0x11c>
		while(strstr((char *) response, "+QIRD") == NULL){
 8002296:	2500      	movs	r5, #0
 8002298:	492e      	ldr	r1, [pc, #184]	@ (8002354 <getResponseFromServer+0xf8>)
 800229a:	4638      	mov	r0, r7
 800229c:	f009 fd6a 	bl	800bd74 <strstr>
 80022a0:	4604      	mov	r4, r0
 80022a2:	b1e8      	cbz	r0, 80022e0 <getResponseFromServer+0x84>
			printf( "Elapsed Time +QISEND: 0,0: %d\n", count_check);
			count_check++;
			receive_response();
		}

		receive_response();
 80022a4:	f7ff f8ae 	bl	8001404 <receive_response>
			count_check = 0;
			osDelay(100);
			continue;
		}

		char *token = strstr((char*)response, "+QIRD: ");
 80022a8:	492b      	ldr	r1, [pc, #172]	@ (8002358 <getResponseFromServer+0xfc>)
 80022aa:	4829      	ldr	r0, [pc, #164]	@ (8002350 <getResponseFromServer+0xf4>)
 80022ac:	f009 fd62 	bl	800bd74 <strstr>
		int value = 0;

		if (token != NULL) {
 80022b0:	4604      	mov	r4, r0
 80022b2:	2800      	cmp	r0, #0
 80022b4:	d140      	bne.n	8002338 <getResponseFromServer+0xdc>
			printf("TOKEN in QIRD is not NULL");
			value = atoi(token + 7);  // Move past "+QIRD: " and convert to integer
		}
		printf("\nNumber of character received: %d\n", value);
 80022b6:	4621      	mov	r1, r4
 80022b8:	4828      	ldr	r0, [pc, #160]	@ (800235c <getResponseFromServer+0x100>)
 80022ba:	f009 fb3b 	bl	800b934 <iprintf>

		printf("OUT OF receive data from server\n");
 80022be:	4828      	ldr	r0, [pc, #160]	@ (8002360 <getResponseFromServer+0x104>)
 80022c0:	f009 fba8 	bl	800ba14 <puts>
		memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 80022c4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80022c8:	2100      	movs	r1, #0
 80022ca:	4821      	ldr	r0, [pc, #132]	@ (8002350 <getResponseFromServer+0xf4>)
 80022cc:	f009 fd02 	bl	800bcd4 <memset>
		SIM_UART_ReInitializeRxDMA();
 80022d0:	f7ff f87e 	bl	80013d0 <SIM_UART_ReInitializeRxDMA>
		if(value == 0) {
 80022d4:	bbc4      	cbnz	r4, 8002348 <getResponseFromServer+0xec>
			count_check = 0;
			osDelay(100);
 80022d6:	2064      	movs	r0, #100	@ 0x64
 80022d8:	f005 fe9a 	bl	8008010 <osDelay>
		is_sent_ok = 1;
 80022dc:	2001      	movs	r0, #1
 80022de:	e016      	b.n	800230e <getResponseFromServer+0xb2>
			if (strstr((char*)response, "ERROR") != NULL){
 80022e0:	4659      	mov	r1, fp
 80022e2:	4638      	mov	r0, r7
 80022e4:	f009 fd46 	bl	800bd74 <strstr>
 80022e8:	4601      	mov	r1, r0
 80022ea:	b1a8      	cbz	r0, 8002318 <getResponseFromServer+0xbc>
				printf("\n\n---------------- IN QIRD: 0X1500h: ERROR ------------------\n\n");
 80022ec:	481d      	ldr	r0, [pc, #116]	@ (8002364 <getResponseFromServer+0x108>)
 80022ee:	f009 fb91 	bl	800ba14 <puts>
				memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 80022f2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80022f6:	4621      	mov	r1, r4
				memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 80022f8:	4815      	ldr	r0, [pc, #84]	@ (8002350 <getResponseFromServer+0xf4>)
 80022fa:	f009 fceb 	bl	800bcd4 <memset>
				SIM_UART_ReInitializeRxDMA();
 80022fe:	f7ff f867 	bl	80013d0 <SIM_UART_ReInitializeRxDMA>
		receive_response();
 8002302:	f7ff f87f 	bl	8001404 <receive_response>
			osDelay(100);
 8002306:	2064      	movs	r0, #100	@ 0x64
 8002308:	f005 fe82 	bl	8008010 <osDelay>
			continue;
 800230c:	2000      	movs	r0, #0
	for(size_t i = 0; i < 5; i++){
 800230e:	3e01      	subs	r6, #1
 8002310:	d1b0      	bne.n	8002274 <getResponseFromServer+0x18>
		}
		else break;
	}
	return is_sent_ok;
}
 8002312:	b041      	add	sp, #260	@ 0x104
 8002314:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if(count_check >= 50){
 8002318:	2d32      	cmp	r5, #50	@ 0x32
 800231a:	d102      	bne.n	8002322 <getResponseFromServer+0xc6>
				memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 800231c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002320:	e7ea      	b.n	80022f8 <getResponseFromServer+0x9c>
			osDelay(100);
 8002322:	2064      	movs	r0, #100	@ 0x64
 8002324:	f005 fe74 	bl	8008010 <osDelay>
			printf( "Elapsed Time +QISEND: 0,0: %d\n", count_check);
 8002328:	4629      	mov	r1, r5
 800232a:	480f      	ldr	r0, [pc, #60]	@ (8002368 <getResponseFromServer+0x10c>)
 800232c:	f009 fb02 	bl	800b934 <iprintf>
			count_check++;
 8002330:	3501      	adds	r5, #1
			receive_response();
 8002332:	f7ff f867 	bl	8001404 <receive_response>
 8002336:	e7af      	b.n	8002298 <getResponseFromServer+0x3c>
			printf("TOKEN in QIRD is not NULL");
 8002338:	480c      	ldr	r0, [pc, #48]	@ (800236c <getResponseFromServer+0x110>)
 800233a:	f009 fafb 	bl	800b934 <iprintf>
			value = atoi(token + 7);  // Move past "+QIRD: " and convert to integer
 800233e:	1de0      	adds	r0, r4, #7
 8002340:	f007 fc6b 	bl	8009c1a <atoi>
 8002344:	4604      	mov	r4, r0
 8002346:	e7b6      	b.n	80022b6 <getResponseFromServer+0x5a>
		is_sent_ok = 1;
 8002348:	2001      	movs	r0, #1
	return is_sent_ok;
 800234a:	e7e2      	b.n	8002312 <getResponseFromServer+0xb6>
 800234c:	08010402 	.word	0x08010402
 8002350:	20001de8 	.word	0x20001de8
 8002354:	080104d2 	.word	0x080104d2
 8002358:	080104d8 	.word	0x080104d8
 800235c:	080104fa 	.word	0x080104fa
 8002360:	0801051d 	.word	0x0801051d
 8002364:	08010493 	.word	0x08010493
 8002368:	0801039d 	.word	0x0801039d
 800236c:	080104e0 	.word	0x080104e0
 8002370:	0801043a 	.word	0x0801043a
 8002374:	0801044b 	.word	0x0801044b
 8002378:	08011115 	.word	0x08011115

0800237c <check_data_sent_to_server>:

int check_data_sent_to_server(int connect_id){
 800237c:	b508      	push	{r3, lr}
	if(acknowledgeResponse(0)){
 800237e:	2000      	movs	r0, #0
 8002380:	f7ff fee2 	bl	8002148 <acknowledgeResponse>
 8002384:	b180      	cbz	r0, 80023a8 <check_data_sent_to_server+0x2c>
		printf("\n---------------------------- ACKNOWLEDGE SENDING SUCCESSFULLY -------------------------------\n");
 8002386:	4809      	ldr	r0, [pc, #36]	@ (80023ac <check_data_sent_to_server+0x30>)
 8002388:	f009 fb44 	bl	800ba14 <puts>
		if(getResponseFromServer(0)){
 800238c:	2000      	movs	r0, #0
 800238e:	f7ff ff65 	bl	800225c <getResponseFromServer>
 8002392:	b120      	cbz	r0, 800239e <check_data_sent_to_server+0x22>
			printf("\n------------------------------ GET RESPONSE from SERVER successfully -------------------------------\n");
 8002394:	4806      	ldr	r0, [pc, #24]	@ (80023b0 <check_data_sent_to_server+0x34>)
 8002396:	f009 fb3d 	bl	800ba14 <puts>
			return 1;
 800239a:	2001      	movs	r0, #1
	}
	else{
		printf("\n---------------------------- ACKNOWLEDGE SENDING FAILED -------------------------------\n");
		return 0;
	}
}
 800239c:	bd08      	pop	{r3, pc}
			printf("\n---------------------------- GET RESPONSE FROM SERVER FAILED -------------------------------\n");
 800239e:	4805      	ldr	r0, [pc, #20]	@ (80023b4 <check_data_sent_to_server+0x38>)
		printf("\n---------------------------- ACKNOWLEDGE SENDING FAILED -------------------------------\n");
 80023a0:	f009 fb38 	bl	800ba14 <puts>
			return 0;
 80023a4:	2000      	movs	r0, #0
 80023a6:	e7f9      	b.n	800239c <check_data_sent_to_server+0x20>
		printf("\n---------------------------- ACKNOWLEDGE SENDING FAILED -------------------------------\n");
 80023a8:	4803      	ldr	r0, [pc, #12]	@ (80023b8 <check_data_sent_to_server+0x3c>)
 80023aa:	e7f9      	b.n	80023a0 <check_data_sent_to_server+0x24>
 80023ac:	0801053d 	.word	0x0801053d
 80023b0:	0801059c 	.word	0x0801059c
 80023b4:	08010602 	.word	0x08010602
 80023b8:	08010660 	.word	0x08010660

080023bc <close_connection>:


int close_connection(int connect_id){
 80023bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80023c0:	b0c0      	sub	sp, #256	@ 0x100
 80023c2:	4603      	mov	r3, r0
	uint8_t command[256];
	snprintf((char *)command, sizeof(command), "AT+QICLOSE=%d\r\n", connect_id);
 80023c4:	4a21      	ldr	r2, [pc, #132]	@ (800244c <close_connection+0x90>)
	send_AT_command((char*)command);
	int count_check = 0;
	while(strstr((char *) response, CHECK_RESPONSE) == NULL){
 80023c6:	4f22      	ldr	r7, [pc, #136]	@ (8002450 <close_connection+0x94>)
 80023c8:	4e22      	ldr	r6, [pc, #136]	@ (8002454 <close_connection+0x98>)
		receive_response();
		if (strstr((char*)response, "ERROR") != NULL){
 80023ca:	f8df 8090 	ldr.w	r8, [pc, #144]	@ 800245c <close_connection+0xa0>
	snprintf((char *)command, sizeof(command), "AT+QICLOSE=%d\r\n", connect_id);
 80023ce:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80023d2:	4668      	mov	r0, sp
 80023d4:	f009 fb26 	bl	800ba24 <sniprintf>
	send_AT_command((char*)command);
 80023d8:	4668      	mov	r0, sp
 80023da:	f7fe ffe9 	bl	80013b0 <send_AT_command>
	while(strstr((char *) response, CHECK_RESPONSE) == NULL){
 80023de:	2506      	movs	r5, #6
 80023e0:	481b      	ldr	r0, [pc, #108]	@ (8002450 <close_connection+0x94>)
 80023e2:	4631      	mov	r1, r6
 80023e4:	f009 fcc6 	bl	800bd74 <strstr>
 80023e8:	4604      	mov	r4, r0
 80023ea:	b170      	cbz	r0, 800240a <close_connection+0x4e>
			return 0;
		}
		osDelay(1000);
		count_check++;
	}
	receive_response();
 80023ec:	f7ff f80a 	bl	8001404 <receive_response>
	osDelay(100);
 80023f0:	2064      	movs	r0, #100	@ 0x64
 80023f2:	f005 fe0d 	bl	8008010 <osDelay>
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 80023f6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80023fa:	2100      	movs	r1, #0
 80023fc:	4814      	ldr	r0, [pc, #80]	@ (8002450 <close_connection+0x94>)
 80023fe:	f009 fc69 	bl	800bcd4 <memset>
	SIM_UART_ReInitializeRxDMA();
 8002402:	f7fe ffe5 	bl	80013d0 <SIM_UART_ReInitializeRxDMA>
	return 1;
 8002406:	2001      	movs	r0, #1
 8002408:	e00f      	b.n	800242a <close_connection+0x6e>
		receive_response();
 800240a:	f7fe fffb 	bl	8001404 <receive_response>
		if (strstr((char*)response, "ERROR") != NULL){
 800240e:	4641      	mov	r1, r8
 8002410:	4638      	mov	r0, r7
 8002412:	f009 fcaf 	bl	800bd74 <strstr>
 8002416:	b158      	cbz	r0, 8002430 <close_connection+0x74>
			memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8002418:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800241c:	4621      	mov	r1, r4
			memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 800241e:	480c      	ldr	r0, [pc, #48]	@ (8002450 <close_connection+0x94>)
 8002420:	f009 fc58 	bl	800bcd4 <memset>
			SIM_UART_ReInitializeRxDMA();
 8002424:	f7fe ffd4 	bl	80013d0 <SIM_UART_ReInitializeRxDMA>
			return 0;
 8002428:	2000      	movs	r0, #0
}
 800242a:	b040      	add	sp, #256	@ 0x100
 800242c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if(count_check >= 5){
 8002430:	3d01      	subs	r5, #1
 8002432:	d106      	bne.n	8002442 <close_connection+0x86>
			printf("Close Server failed");
 8002434:	4808      	ldr	r0, [pc, #32]	@ (8002458 <close_connection+0x9c>)
 8002436:	f009 fa7d 	bl	800b934 <iprintf>
			memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 800243a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800243e:	4629      	mov	r1, r5
 8002440:	e7ed      	b.n	800241e <close_connection+0x62>
		osDelay(1000);
 8002442:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002446:	f005 fde3 	bl	8008010 <osDelay>
		count_check++;
 800244a:	e7c9      	b.n	80023e0 <close_connection+0x24>
 800244c:	080106b9 	.word	0x080106b9
 8002450:	20001de8 	.word	0x20001de8
 8002454:	080100bd 	.word	0x080100bd
 8002458:	080106c9 	.word	0x080106c9
 800245c:	08011115 	.word	0x08011115

08002460 <extract_time_CCLK>:


int extract_time_CCLK(uint8_t* message){
 8002460:	b510      	push	{r4, lr}
 8002462:	b08e      	sub	sp, #56	@ 0x38
	int year, month, day, hour, minute, second, timezone;

	sscanf((char*) message, "AT+CCLK?\r\n+CCLK: \"%2d/%2d/%2d,%2d:%2d:%2d%2d\"",
 8002464:	ab0d      	add	r3, sp, #52	@ 0x34
 8002466:	9304      	str	r3, [sp, #16]
 8002468:	ab0c      	add	r3, sp, #48	@ 0x30
 800246a:	9303      	str	r3, [sp, #12]
 800246c:	ab0b      	add	r3, sp, #44	@ 0x2c
 800246e:	9302      	str	r3, [sp, #8]
 8002470:	ab0a      	add	r3, sp, #40	@ 0x28
 8002472:	9301      	str	r3, [sp, #4]
 8002474:	ab09      	add	r3, sp, #36	@ 0x24
 8002476:	9300      	str	r3, [sp, #0]
 8002478:	aa07      	add	r2, sp, #28
 800247a:	ab08      	add	r3, sp, #32
 800247c:	491d      	ldr	r1, [pc, #116]	@ (80024f4 <extract_time_CCLK+0x94>)
 800247e:	f009 fb25 	bl	800bacc <siscanf>
						&year, &month, &day, &hour, &minute, &second, &timezone);
	hour += 1;
 8002482:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8002484:	1c5a      	adds	r2, r3, #1
	if (hour >= 24) {
 8002486:	2a17      	cmp	r2, #23
		hour -= 24;
 8002488:	bfc3      	ittte	gt
 800248a:	3b17      	subgt	r3, #23
 800248c:	930a      	strgt	r3, [sp, #40]	@ 0x28
		day += 1;
 800248e:	9b09      	ldrgt	r3, [sp, #36]	@ 0x24
	hour += 1;
 8002490:	920a      	strle	r2, [sp, #40]	@ 0x28
		day += 1;
 8002492:	bfc4      	itt	gt
 8002494:	3301      	addgt	r3, #1
 8002496:	9309      	strgt	r3, [sp, #36]	@ 0x24
		// Simplified example: Add code here to handle month/day overflow as needed
	}
	if(year < 24) return 0;
 8002498:	9b07      	ldr	r3, [sp, #28]
 800249a:	2b17      	cmp	r3, #23
 800249c:	dd27      	ble.n	80024ee <extract_time_CCLK+0x8e>
	rmc_jt.date.Yr = year;
 800249e:	4c16      	ldr	r4, [pc, #88]	@ (80024f8 <extract_time_CCLK+0x98>)
	rmc_jt.date.Mon = month;
	rmc_jt.date.Day = day;
	rmc_jt.tim.hour = hour;
 80024a0:	980a      	ldr	r0, [sp, #40]	@ 0x28
	rmc_jt.tim.min = minute;
 80024a2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
	rmc_jt.tim.sec = second;
 80024a4:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
	rmc_jt.date.Yr = year;
 80024a6:	61a3      	str	r3, [r4, #24]
	rmc_jt.date.Mon = month;
 80024a8:	9b08      	ldr	r3, [sp, #32]
 80024aa:	6163      	str	r3, [r4, #20]
	rmc_jt.tim.hour = hour;
 80024ac:	6020      	str	r0, [r4, #0]
	rmc_jt.date.Day = day;
 80024ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
	rmc_jt.tim.min = minute;
 80024b0:	6061      	str	r1, [r4, #4]
	rmc_jt.tim.sec = second;
 80024b2:	60a2      	str	r2, [r4, #8]
	set_time(hour, minute, second);
 80024b4:	b2c9      	uxtb	r1, r1
 80024b6:	b2d2      	uxtb	r2, r2
 80024b8:	b2c0      	uxtb	r0, r0
	rmc_jt.date.Day = day;
 80024ba:	6123      	str	r3, [r4, #16]
	set_time(hour, minute, second);
 80024bc:	f000 ff0a 	bl	80032d4 <set_time>
	set_date(year, month, day);
 80024c0:	f89d 2024 	ldrb.w	r2, [sp, #36]	@ 0x24
 80024c4:	f89d 1020 	ldrb.w	r1, [sp, #32]
 80024c8:	f89d 001c 	ldrb.w	r0, [sp, #28]
 80024cc:	f000 ff20 	bl	8003310 <set_date>
	printf("RTC TIME with GMT+8: 20%02d/%02d/%02d, %02d:%02d:%02d\n", rmc_jt.date.Yr, rmc_jt.date.Mon, rmc_jt.date.Day, rmc_jt.tim.hour, rmc_jt.tim.min, rmc_jt.tim.sec);
 80024d0:	68a3      	ldr	r3, [r4, #8]
 80024d2:	9302      	str	r3, [sp, #8]
 80024d4:	6863      	ldr	r3, [r4, #4]
 80024d6:	9301      	str	r3, [sp, #4]
 80024d8:	6823      	ldr	r3, [r4, #0]
 80024da:	9300      	str	r3, [sp, #0]
 80024dc:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 80024e0:	69a1      	ldr	r1, [r4, #24]
 80024e2:	4806      	ldr	r0, [pc, #24]	@ (80024fc <extract_time_CCLK+0x9c>)
 80024e4:	f009 fa26 	bl	800b934 <iprintf>

	return 1;
 80024e8:	2001      	movs	r0, #1
}
 80024ea:	b00e      	add	sp, #56	@ 0x38
 80024ec:	bd10      	pop	{r4, pc}
	if(year < 24) return 0;
 80024ee:	2000      	movs	r0, #0
 80024f0:	e7fb      	b.n	80024ea <extract_time_CCLK+0x8a>
 80024f2:	bf00      	nop
 80024f4:	080106dd 	.word	0x080106dd
 80024f8:	20001b40 	.word	0x20001b40
 80024fc:	0801070b 	.word	0x0801070b

08002500 <getCurrentTime>:


int getCurrentTime(){
 8002500:	b538      	push	{r3, r4, r5, lr}
	int count_check = 0;
	send_AT_command("AT+CCLK?\r\n");
 8002502:	4817      	ldr	r0, [pc, #92]	@ (8002560 <getCurrentTime+0x60>)
	while(strstr((char *) response, CHECK_RESPONSE) == NULL){
 8002504:	4d17      	ldr	r5, [pc, #92]	@ (8002564 <getCurrentTime+0x64>)
	send_AT_command("AT+CCLK?\r\n");
 8002506:	f7fe ff53 	bl	80013b0 <send_AT_command>
	while(strstr((char *) response, CHECK_RESPONSE) == NULL){
 800250a:	2404      	movs	r4, #4
 800250c:	4816      	ldr	r0, [pc, #88]	@ (8002568 <getCurrentTime+0x68>)
 800250e:	4629      	mov	r1, r5
 8002510:	f009 fc30 	bl	800bd74 <strstr>
 8002514:	b188      	cbz	r0, 800253a <getCurrentTime+0x3a>
		}
		receive_response();
		osDelay(100);
		count_check++;
	}
	receive_response();
 8002516:	f7fe ff75 	bl	8001404 <receive_response>
	int result_extract = extract_time_CCLK(response);
 800251a:	4813      	ldr	r0, [pc, #76]	@ (8002568 <getCurrentTime+0x68>)
 800251c:	f7ff ffa0 	bl	8002460 <extract_time_CCLK>
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8002520:	f44f 7200 	mov.w	r2, #512	@ 0x200
	int result_extract = extract_time_CCLK(response);
 8002524:	4604      	mov	r4, r0
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8002526:	2100      	movs	r1, #0
 8002528:	480f      	ldr	r0, [pc, #60]	@ (8002568 <getCurrentTime+0x68>)
 800252a:	f009 fbd3 	bl	800bcd4 <memset>
	SIM_UART_ReInitializeRxDMA();
 800252e:	f7fe ff4f 	bl	80013d0 <SIM_UART_ReInitializeRxDMA>
	if(result_extract)
 8002532:	1e20      	subs	r0, r4, #0
 8002534:	bf18      	it	ne
 8002536:	2001      	movne	r0, #1
 8002538:	e00a      	b.n	8002550 <getCurrentTime+0x50>
		if(count_check >= 3 ){
 800253a:	3c01      	subs	r4, #1
 800253c:	d109      	bne.n	8002552 <getCurrentTime+0x52>
			memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 800253e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002542:	4621      	mov	r1, r4
 8002544:	4808      	ldr	r0, [pc, #32]	@ (8002568 <getCurrentTime+0x68>)
 8002546:	f009 fbc5 	bl	800bcd4 <memset>
			SIM_UART_ReInitializeRxDMA();
 800254a:	f7fe ff41 	bl	80013d0 <SIM_UART_ReInitializeRxDMA>
			return 0;
 800254e:	4620      	mov	r0, r4
		return 1;
	else return 0;
}
 8002550:	bd38      	pop	{r3, r4, r5, pc}
		receive_response();
 8002552:	f7fe ff57 	bl	8001404 <receive_response>
		osDelay(100);
 8002556:	2064      	movs	r0, #100	@ 0x64
 8002558:	f005 fd5a 	bl	8008010 <osDelay>
		count_check++;
 800255c:	e7d6      	b.n	800250c <getCurrentTime+0xc>
 800255e:	bf00      	nop
 8002560:	08010742 	.word	0x08010742
 8002564:	080100bd 	.word	0x080100bd
 8002568:	20001de8 	.word	0x20001de8

0800256c <receiveRMCDataWithAddrGSM>:


void receiveRMCDataWithAddrGSM(){
 800256c:	b5f0      	push	{r4, r5, r6, r7, lr}
	printf("Inside Receiving Data at GSM\n\n");
	osEvent evt = osMailGet(RMC_MailQGSMId, 3000); // Wait for mail
 800256e:	4f40      	ldr	r7, [pc, #256]	@ (8002670 <receiveRMCDataWithAddrGSM+0x104>)
	printf("Inside Receiving Data at GSM\n\n");
 8002570:	4840      	ldr	r0, [pc, #256]	@ (8002674 <receiveRMCDataWithAddrGSM+0x108>)
void receiveRMCDataWithAddrGSM(){
 8002572:	b089      	sub	sp, #36	@ 0x24
	printf("Inside Receiving Data at GSM\n\n");
 8002574:	f009 fa4e 	bl	800ba14 <puts>
	osEvent evt = osMailGet(RMC_MailQGSMId, 3000); // Wait for mail
 8002578:	6839      	ldr	r1, [r7, #0]
 800257a:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 800257e:	a805      	add	r0, sp, #20
 8002580:	f005 fe71 	bl	8008266 <osMailGet>
	if(evt.status == osEventMail){
 8002584:	9b05      	ldr	r3, [sp, #20]
 8002586:	2b20      	cmp	r3, #32
 8002588:	d160      	bne.n	800264c <receiveRMCDataWithAddrGSM+0xe0>
		GSM_MAIL_STRUCT *receivedData = (GSM_MAIL_STRUCT *)evt.value.p;
 800258a:	9d06      	ldr	r5, [sp, #24]
		printf("Address received from MAIL QUEUE: \n");
		current_addr_gsm = receivedData->address;
 800258c:	4e3a      	ldr	r6, [pc, #232]	@ (8002678 <receiveRMCDataWithAddrGSM+0x10c>)
		printf("Address received from MAIL QUEUE: \n");
 800258e:	483b      	ldr	r0, [pc, #236]	@ (800267c <receiveRMCDataWithAddrGSM+0x110>)
 8002590:	f009 fa40 	bl	800ba14 <puts>
		current_addr_gsm = receivedData->address;
 8002594:	6dab      	ldr	r3, [r5, #88]	@ 0x58
 8002596:	6033      	str	r3, [r6, #0]
		if(checkAddrExistInQueue(current_addr_gsm, &result_addr_queue) == 0 || (current_addr_gsm >= end_addr_disconnect && current_addr_gsm <= (FLASH_END_ADDRESS - 0x100))){
 8002598:	6830      	ldr	r0, [r6, #0]
 800259a:	4939      	ldr	r1, [pc, #228]	@ (8002680 <receiveRMCDataWithAddrGSM+0x114>)
 800259c:	f000 fe1c 	bl	80031d8 <checkAddrExistInQueue>
 80025a0:	b140      	cbz	r0, 80025b4 <receiveRMCDataWithAddrGSM+0x48>
 80025a2:	4b38      	ldr	r3, [pc, #224]	@ (8002684 <receiveRMCDataWithAddrGSM+0x118>)
 80025a4:	6832      	ldr	r2, [r6, #0]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	429a      	cmp	r2, r3
 80025aa:	d348      	bcc.n	800263e <receiveRMCDataWithAddrGSM+0xd2>
 80025ac:	6833      	ldr	r3, [r6, #0]
 80025ae:	f5b3 4f9e 	cmp.w	r3, #20224	@ 0x4f00
 80025b2:	d844      	bhi.n	800263e <receiveRMCDataWithAddrGSM+0xd2>
//			current_addr_gsm = receivedDataGSM->address;
			printf("Saving data to variable to send to the server\n");
 80025b4:	4834      	ldr	r0, [pc, #208]	@ (8002688 <receiveRMCDataWithAddrGSM+0x11c>)
			printf("\n---------- Current data accepted at address: %08lx----------\n", current_addr_gsm);
			rmc_jt.lcation.latitude = receivedData->rmc.lcation.latitude;
 80025b6:	4c35      	ldr	r4, [pc, #212]	@ (800268c <receiveRMCDataWithAddrGSM+0x120>)
			printf("Saving data to variable to send to the server\n");
 80025b8:	f009 fa2c 	bl	800ba14 <puts>
			printf("\n---------- Current data accepted at address: %08lx----------\n", current_addr_gsm);
 80025bc:	6831      	ldr	r1, [r6, #0]
 80025be:	4834      	ldr	r0, [pc, #208]	@ (8002690 <receiveRMCDataWithAddrGSM+0x124>)
 80025c0:	f009 f9b8 	bl	800b934 <iprintf>
			rmc_jt.lcation.latitude = receivedData->rmc.lcation.latitude;
 80025c4:	e9d5 230e 	ldrd	r2, r3, [r5, #56]	@ 0x38
 80025c8:	e9c4 230e 	strd	r2, r3, [r4, #56]	@ 0x38
			rmc_jt.lcation.longitude = receivedData->rmc.lcation.longitude;
 80025cc:	e9d5 2312 	ldrd	r2, r3, [r5, #72]	@ 0x48
 80025d0:	e9c4 2312 	strd	r2, r3, [r4, #72]	@ 0x48
			rmc_jt.speed = receivedData->rmc.speed;
 80025d4:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 80025d6:	62a3      	str	r3, [r4, #40]	@ 0x28
			rmc_jt.course = receivedData->rmc.course;
 80025d8:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 80025da:	62e3      	str	r3, [r4, #44]	@ 0x2c
			rmc_jt.lcation.NS = receivedData->rmc.lcation.NS;
 80025dc:	f895 3040 	ldrb.w	r3, [r5, #64]	@ 0x40
 80025e0:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
			rmc_jt.lcation.EW = receivedData->rmc.lcation.EW;
 80025e4:	f895 3050 	ldrb.w	r3, [r5, #80]	@ 0x50
 80025e8:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
			rmc_jt.isValid = receivedData->rmc.isValid;
 80025ec:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80025ee:	6323      	str	r3, [r4, #48]	@ 0x30
			rmc_jt.date.Yr = receivedData->rmc.date.Yr;
 80025f0:	69ab      	ldr	r3, [r5, #24]
 80025f2:	61a3      	str	r3, [r4, #24]
			rmc_jt.date.Mon = receivedData->rmc.date.Mon;
 80025f4:	696b      	ldr	r3, [r5, #20]
 80025f6:	6163      	str	r3, [r4, #20]
			rmc_jt.date.Day = receivedData->rmc.date.Day;
 80025f8:	692b      	ldr	r3, [r5, #16]
 80025fa:	6123      	str	r3, [r4, #16]
			rmc_jt.tim.hour = receivedData->rmc.tim.hour;
 80025fc:	682b      	ldr	r3, [r5, #0]
 80025fe:	6023      	str	r3, [r4, #0]
			rmc_jt.tim.min = receivedData->rmc.tim.min;
 8002600:	686b      	ldr	r3, [r5, #4]
 8002602:	6063      	str	r3, [r4, #4]
			rmc_jt.tim.sec = receivedData->rmc.tim.sec;
			osMailFree(RMC_MailQGSMId, receivedData);
 8002604:	4629      	mov	r1, r5
			rmc_jt.tim.sec = receivedData->rmc.tim.sec;
 8002606:	68ab      	ldr	r3, [r5, #8]
			osMailFree(RMC_MailQGSMId, receivedData);
 8002608:	6838      	ldr	r0, [r7, #0]
			rmc_jt.tim.sec = receivedData->rmc.tim.sec;
 800260a:	60a3      	str	r3, [r4, #8]
			osMailFree(RMC_MailQGSMId, receivedData);
 800260c:	f005 fe64 	bl	80082d8 <osMailFree>
			printf("\n@@@ GSM-> time: %d:%d:%d --------- date: %d/%d/%d  --------- current_addr: %08lx @@@\n", rmc_jt.tim.hour, rmc_jt.tim.min, rmc_jt.tim.sec, rmc_jt.date.Day, rmc_jt.date.Mon, rmc_jt.date.Yr, current_addr_gsm);
 8002610:	6833      	ldr	r3, [r6, #0]
 8002612:	9303      	str	r3, [sp, #12]
 8002614:	69a3      	ldr	r3, [r4, #24]
 8002616:	9302      	str	r3, [sp, #8]
 8002618:	6963      	ldr	r3, [r4, #20]
 800261a:	9301      	str	r3, [sp, #4]
 800261c:	6923      	ldr	r3, [r4, #16]
 800261e:	9300      	str	r3, [sp, #0]
 8002620:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 8002624:	6821      	ldr	r1, [r4, #0]
 8002626:	481b      	ldr	r0, [pc, #108]	@ (8002694 <receiveRMCDataWithAddrGSM+0x128>)
 8002628:	f009 f984 	bl	800b934 <iprintf>

			received_RMC = 1;
 800262c:	4b1a      	ldr	r3, [pc, #104]	@ (8002698 <receiveRMCDataWithAddrGSM+0x12c>)
 800262e:	2201      	movs	r2, #1
 8002630:	601a      	str	r2, [r3, #0]
			count_send_gsm++;
 8002632:	4a1a      	ldr	r2, [pc, #104]	@ (800269c <receiveRMCDataWithAddrGSM+0x130>)
 8002634:	6813      	ldr	r3, [r2, #0]
 8002636:	3301      	adds	r3, #1
 8002638:	6013      	str	r3, [r2, #0]
		if(is_disconnect == 0 && is_using_flash == 1 && is_keep_up == 0) {
			printf("----------------------KEEP UP WITH THE MOST CURRENT DATA ---------------------------");
			is_keep_up = 1;
		}
	}
}
 800263a:	b009      	add	sp, #36	@ 0x24
 800263c:	bdf0      	pop	{r4, r5, r6, r7, pc}
			printf("\n----------------Have sent data in this address successfully already: %08lx ----------------\n", receivedData->address);
 800263e:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8002640:	4817      	ldr	r0, [pc, #92]	@ (80026a0 <receiveRMCDataWithAddrGSM+0x134>)
}
 8002642:	b009      	add	sp, #36	@ 0x24
 8002644:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
			printf("\n----------------Have sent data in this address successfully already: %08lx ----------------\n", receivedData->address);
 8002648:	f009 b974 	b.w	800b934 <iprintf>
		printf("There is no address mail left\n");
 800264c:	4815      	ldr	r0, [pc, #84]	@ (80026a4 <receiveRMCDataWithAddrGSM+0x138>)
 800264e:	f009 f9e1 	bl	800ba14 <puts>
		if(is_disconnect == 0 && is_using_flash == 1 && is_keep_up == 0) {
 8002652:	4b15      	ldr	r3, [pc, #84]	@ (80026a8 <receiveRMCDataWithAddrGSM+0x13c>)
 8002654:	681d      	ldr	r5, [r3, #0]
 8002656:	2d01      	cmp	r5, #1
 8002658:	d1ef      	bne.n	800263a <receiveRMCDataWithAddrGSM+0xce>
 800265a:	4c14      	ldr	r4, [pc, #80]	@ (80026ac <receiveRMCDataWithAddrGSM+0x140>)
 800265c:	4b14      	ldr	r3, [pc, #80]	@ (80026b0 <receiveRMCDataWithAddrGSM+0x144>)
 800265e:	6822      	ldr	r2, [r4, #0]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4313      	orrs	r3, r2
 8002664:	d1e9      	bne.n	800263a <receiveRMCDataWithAddrGSM+0xce>
			printf("----------------------KEEP UP WITH THE MOST CURRENT DATA ---------------------------");
 8002666:	4813      	ldr	r0, [pc, #76]	@ (80026b4 <receiveRMCDataWithAddrGSM+0x148>)
 8002668:	f009 f964 	bl	800b934 <iprintf>
			is_keep_up = 1;
 800266c:	6025      	str	r5, [r4, #0]
}
 800266e:	e7e4      	b.n	800263a <receiveRMCDataWithAddrGSM+0xce>
 8002670:	20002188 	.word	0x20002188
 8002674:	0801074d 	.word	0x0801074d
 8002678:	20001b9c 	.word	0x20001b9c
 800267c:	0801076b 	.word	0x0801076b
 8002680:	20001ba4 	.word	0x20001ba4
 8002684:	20001b98 	.word	0x20001b98
 8002688:	0801078e 	.word	0x0801078e
 800268c:	20001b40 	.word	0x20001b40
 8002690:	080107bc 	.word	0x080107bc
 8002694:	080107fb 	.word	0x080107fb
 8002698:	20001dd4 	.word	0x20001dd4
 800269c:	20001db0 	.word	0x20001db0
 80026a0:	08010852 	.word	0x08010852
 80026a4:	080108b0 	.word	0x080108b0
 80026a8:	20001dc0 	.word	0x20001dc0
 80026ac:	20001dbc 	.word	0x20001dbc
 80026b0:	20001dc4 	.word	0x20001dc4
 80026b4:	080108ce 	.word	0x080108ce

080026b8 <processUploadDataToServer>:

int processUploadDataToServer(JT808_LocationInfoReport *location_info){
 80026b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	int result_send_location = 1;
	int result_check = 0;
	while(count_resend < 3){
//		uint32_t freeStack1 = osThreadGetStackSpace(GSMHandle);
//		printf("\n\n --------------Thread GSM %p is running low on stack: %04ld bytes remaining----------\n\n",GSMHandle, freeStack1);
		printf(" \n\n--------------------------- GOING TO SEND DATA TO SERVER: RESEND COUNT %d -----------------------\n\n", count_resend);
 80026bc:	f8df 80f4 	ldr.w	r8, [pc, #244]	@ 80027b4 <processUploadDataToServer+0xfc>
		else if(result_send_location == 2){
			printf("The connection to server is closed. \n");
			count_resend++;
		}
		else{
			printf("\n\n---------------------  Sending ERROR (SENDING ERROR)  -------------------\n\n");
 80026c0:	f8df 90f4 	ldr.w	r9, [pc, #244]	@ 80027b8 <processUploadDataToServer+0x100>
int processUploadDataToServer(JT808_LocationInfoReport *location_info){
 80026c4:	4607      	mov	r7, r0
 80026c6:	2501      	movs	r5, #1
		printf(" \n\n--------------------------- GOING TO SEND DATA TO SERVER: RESEND COUNT %d -----------------------\n\n", count_resend);
 80026c8:	1e69      	subs	r1, r5, #1
 80026ca:	4640      	mov	r0, r8
 80026cc:	f009 f932 	bl	800b934 <iprintf>
		result_send_location = send_location_to_server(0, location_info);
 80026d0:	4639      	mov	r1, r7
 80026d2:	2000      	movs	r0, #0
 80026d4:	f7ff fcbe 	bl	8002054 <send_location_to_server>
		if(result_send_location == 1){
 80026d8:	2801      	cmp	r0, #1
		result_send_location = send_location_to_server(0, location_info);
 80026da:	4604      	mov	r4, r0
		if(result_send_location == 1){
 80026dc:	d13a      	bne.n	8002754 <processUploadDataToServer+0x9c>
			printf("Inside process: Check Sending Location Report\r\n");
 80026de:	482b      	ldr	r0, [pc, #172]	@ (800278c <processUploadDataToServer+0xd4>)
 80026e0:	f009 f998 	bl	800ba14 <puts>
			result_check = check_data_sent_to_server(0);
 80026e4:	2000      	movs	r0, #0
 80026e6:	f7ff fe49 	bl	800237c <check_data_sent_to_server>
			if(result_check){
 80026ea:	4606      	mov	r6, r0
 80026ec:	b180      	cbz	r0, 8002710 <processUploadDataToServer+0x58>
				printf("Sending SUCCESS\n");
 80026ee:	4828      	ldr	r0, [pc, #160]	@ (8002790 <processUploadDataToServer+0xd8>)
 80026f0:	f009 f990 	bl	800ba14 <puts>
				printf("\n\n--------------------------------- COUNT SEND GSM: %d -------------------------------------------\n\n", count_send_gsm);
 80026f4:	4b27      	ldr	r3, [pc, #156]	@ (8002794 <processUploadDataToServer+0xdc>)
 80026f6:	4828      	ldr	r0, [pc, #160]	@ (8002798 <processUploadDataToServer+0xe0>)
 80026f8:	6819      	ldr	r1, [r3, #0]
 80026fa:	f009 f91b 	bl	800b934 <iprintf>
				memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 80026fe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002702:	2100      	movs	r1, #0
		}
		count_check++;
		osDelay(100);
	}
	receive_response();
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8002704:	4825      	ldr	r0, [pc, #148]	@ (800279c <processUploadDataToServer+0xe4>)
 8002706:	f009 fae5 	bl	800bcd4 <memset>
	SIM_UART_ReInitializeRxDMA();
 800270a:	f7fe fe61 	bl	80013d0 <SIM_UART_ReInitializeRxDMA>

	if(result_send_location == 0 || result_check == 0) return 0;
 800270e:	e036      	b.n	800277e <processUploadDataToServer+0xc6>
				printf("Sending ERROR (CHECKING SENDING RESULT ERROR)\n");
 8002710:	4823      	ldr	r0, [pc, #140]	@ (80027a0 <processUploadDataToServer+0xe8>)
 8002712:	f009 f97f 	bl	800ba14 <puts>
				memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8002716:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800271a:	4631      	mov	r1, r6
 800271c:	481f      	ldr	r0, [pc, #124]	@ (800279c <processUploadDataToServer+0xe4>)
 800271e:	f009 fad9 	bl	800bcd4 <memset>
				SIM_UART_ReInitializeRxDMA();
 8002722:	f7fe fe55 	bl	80013d0 <SIM_UART_ReInitializeRxDMA>
		osDelay(200);
 8002726:	20c8      	movs	r0, #200	@ 0xc8
	while(count_resend < 3){
 8002728:	3501      	adds	r5, #1
		osDelay(200);
 800272a:	f005 fc71 	bl	8008010 <osDelay>
	while(count_resend < 3){
 800272e:	2d04      	cmp	r5, #4
 8002730:	d1ca      	bne.n	80026c8 <processUploadDataToServer+0x10>
	send_AT_command(FIRST_CHECK);
 8002732:	481c      	ldr	r0, [pc, #112]	@ (80027a4 <processUploadDataToServer+0xec>)
	while(strstr((char *) response, CHECK_RESPONSE) != NULL){
 8002734:	4e1c      	ldr	r6, [pc, #112]	@ (80027a8 <processUploadDataToServer+0xf0>)
	send_AT_command(FIRST_CHECK);
 8002736:	f7fe fe3b 	bl	80013b0 <send_AT_command>
	while(strstr((char *) response, CHECK_RESPONSE) != NULL){
 800273a:	250c      	movs	r5, #12
 800273c:	4817      	ldr	r0, [pc, #92]	@ (800279c <processUploadDataToServer+0xe4>)
 800273e:	4631      	mov	r1, r6
 8002740:	f009 fb18 	bl	800bd74 <strstr>
 8002744:	4604      	mov	r4, r0
 8002746:	b960      	cbnz	r0, 8002762 <processUploadDataToServer+0xaa>
	receive_response();
 8002748:	f7fe fe5c 	bl	8001404 <receive_response>
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 800274c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002750:	4621      	mov	r1, r4
 8002752:	e7d7      	b.n	8002704 <processUploadDataToServer+0x4c>
		else if(result_send_location == 2){
 8002754:	2802      	cmp	r0, #2
			printf("The connection to server is closed. \n");
 8002756:	bf0c      	ite	eq
 8002758:	4814      	ldreq	r0, [pc, #80]	@ (80027ac <processUploadDataToServer+0xf4>)
			printf("\n\n---------------------  Sending ERROR (SENDING ERROR)  -------------------\n\n");
 800275a:	4648      	movne	r0, r9
 800275c:	f009 f95a 	bl	800ba14 <puts>
			count_resend++;
 8002760:	e7e1      	b.n	8002726 <processUploadDataToServer+0x6e>
		receive_response();
 8002762:	f7fe fe4f 	bl	8001404 <receive_response>
		if(count_check > 10){
 8002766:	3d01      	subs	r5, #1
 8002768:	d10c      	bne.n	8002784 <processUploadDataToServer+0xcc>
			printf("SIM MODULE BUG");
 800276a:	4811      	ldr	r0, [pc, #68]	@ (80027b0 <processUploadDataToServer+0xf8>)
 800276c:	f009 f8e2 	bl	800b934 <iprintf>
			memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8002770:	480a      	ldr	r0, [pc, #40]	@ (800279c <processUploadDataToServer+0xe4>)
 8002772:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002776:	4629      	mov	r1, r5
 8002778:	f009 faac 	bl	800bcd4 <memset>
			return 2;
 800277c:	2402      	movs	r4, #2
	else if(result_send_location  == 2) return 2;
	else return 0;
}
 800277e:	4620      	mov	r0, r4
 8002780:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		osDelay(100);
 8002784:	2064      	movs	r0, #100	@ 0x64
 8002786:	f005 fc43 	bl	8008010 <osDelay>
 800278a:	e7d7      	b.n	800273c <processUploadDataToServer+0x84>
 800278c:	0801098a 	.word	0x0801098a
 8002790:	080109b9 	.word	0x080109b9
 8002794:	20001db0 	.word	0x20001db0
 8002798:	080109c9 	.word	0x080109c9
 800279c:	20001de8 	.word	0x20001de8
 80027a0:	08010a2e 	.word	0x08010a2e
 80027a4:	080100b8 	.word	0x080100b8
 80027a8:	080100bd 	.word	0x080100bd
 80027ac:	08010a5c 	.word	0x08010a5c
 80027b0:	08010ace 	.word	0x08010ace
 80027b4:	08010923 	.word	0x08010923
 80027b8:	08010a81 	.word	0x08010a81

080027bc <StartGSM>:

void StartGSM(void const * argument)
{
 80027bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  /* USER CODE BEGIN StartGSM */
	printf("------------------------ Starting GSM: Pushing data to Server ------------------------");
 80027c0:	4889      	ldr	r0, [pc, #548]	@ (80029e8 <StartGSM+0x22c>)
						printf("REOPEN CONNECTION TO SERVER\n");
						process = 4;
					}
				}
				else{
					memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 80027c2:	4c8a      	ldr	r4, [pc, #552]	@ (80029ec <StartGSM+0x230>)
						printf("Address going to send to server at GSM:(STACK FROM MAIL QUEUE)  %08lx\n", current_addr_gsm);
 80027c4:	4d8a      	ldr	r5, [pc, #552]	@ (80029f0 <StartGSM+0x234>)
{
 80027c6:	b0a7      	sub	sp, #156	@ 0x9c
	printf("------------------------ Starting GSM: Pushing data to Server ------------------------");
 80027c8:	f009 f8b4 	bl	800b934 <iprintf>
	RingBufferDmaU8_initUSARTRx(&SIMRxDMARing, &huart3, response, SIM_RESPONSE_MAX_SIZE);
 80027cc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80027d0:	4a86      	ldr	r2, [pc, #536]	@ (80029ec <StartGSM+0x230>)
 80027d2:	4988      	ldr	r1, [pc, #544]	@ (80029f4 <StartGSM+0x238>)
 80027d4:	4888      	ldr	r0, [pc, #544]	@ (80029f8 <StartGSM+0x23c>)
 80027d6:	f000 fd6f 	bl	80032b8 <RingBufferDmaU8_initUSARTRx>
	JT808_TerminalRegistration reg_msg = create_terminal_registration();
 80027da:	a806      	add	r0, sp, #24
 80027dc:	f7fe fd96 	bl	800130c <create_terminal_registration>
	JT808_LocationInfoReport location_info = create_location_info_report();
 80027e0:	a815      	add	r0, sp, #84	@ 0x54
 80027e2:	f7fe fdb9 	bl	8001358 <create_location_info_report>
	initQueue_GSM(&result_addr_queue);
 80027e6:	4885      	ldr	r0, [pc, #532]	@ (80029fc <StartGSM+0x240>)
 80027e8:	f000 fc8c 	bl	8003104 <initQueue_GSM>
	init_SIM_module();
 80027ec:	f7fe fe18 	bl	8001420 <init_SIM_module>
	int is_set_uniqueID = 0;
 80027f0:	2300      	movs	r3, #0
 80027f2:	9301      	str	r3, [sp, #4]
	int process = 0;
 80027f4:	461e      	mov	r6, r3
		osDelay(300);
 80027f6:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80027fa:	f005 fc09 	bl	8008010 <osDelay>
		switch(process){
 80027fe:	2e08      	cmp	r6, #8
 8002800:	d862      	bhi.n	80028c8 <StartGSM+0x10c>
 8002802:	e8df f016 	tbh	[pc, r6, lsl #1]
 8002806:	0009      	.short	0x0009
 8002808:	004a0020 	.word	0x004a0020
 800280c:	00a40070 	.word	0x00a40070
 8002810:	00e500cd 	.word	0x00e500cd
 8002814:	045b0121 	.word	0x045b0121
				printf("First CHECK\r\n");
 8002818:	4879      	ldr	r0, [pc, #484]	@ (8002a00 <StartGSM+0x244>)
 800281a:	f009 f8fb 	bl	800ba14 <puts>
				isReady = first_check_SIM();
 800281e:	f7fe fed1 	bl	80015c4 <first_check_SIM>
				if(isReady) process++;
 8002822:	4601      	mov	r1, r0
 8002824:	2800      	cmp	r0, #0
 8002826:	f040 80af 	bne.w	8002988 <StartGSM+0x1cc>
					memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 800282a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800282e:	4620      	mov	r0, r4
 8002830:	f009 fa50 	bl	800bcd4 <memset>
					SIM_UART_ReInitializeRxDMA();
 8002834:	f7fe fdcc 	bl	80013d0 <SIM_UART_ReInitializeRxDMA>
					printf("\n------------------------ Rebooting SIM module -------------------\n");
 8002838:	4872      	ldr	r0, [pc, #456]	@ (8002a04 <StartGSM+0x248>)
					SIM_UART_ReInitializeRxDMA();
					printf("\n ------------------------------ Rebooting SIM module -------------------------\n");
 800283a:	f009 f8eb 	bl	800ba14 <puts>
									process++;
 800283e:	2600      	movs	r6, #0
					reboot_SIM_module();
 8002840:	f7fe fe08 	bl	8001454 <reboot_SIM_module>
					process = 0;
 8002844:	e040      	b.n	80028c8 <StartGSM+0x10c>
				printf("Check EVERYTHING READY\r\n");
 8002846:	4870      	ldr	r0, [pc, #448]	@ (8002a08 <StartGSM+0x24c>)
 8002848:	f009 f8e4 	bl	800ba14 <puts>
				osDelay(100);
 800284c:	2064      	movs	r0, #100	@ 0x64
 800284e:	f005 fbdf 	bl	8008010 <osDelay>
				int check_SIM = check_SIM_ready();
 8002852:	f7fe ffbd 	bl	80017d0 <check_SIM_ready>
				if(is_set_uniqueID == 0 && check_SIM == 1){
 8002856:	9b01      	ldr	r3, [sp, #4]
				int check_SIM = check_SIM_ready();
 8002858:	4607      	mov	r7, r0
				if(is_set_uniqueID == 0 && check_SIM == 1){
 800285a:	b183      	cbz	r3, 800287e <StartGSM+0xc2>
	int process = 0;
 800285c:	9601      	str	r6, [sp, #4]
				osDelay(150);
 800285e:	2096      	movs	r0, #150	@ 0x96
 8002860:	f005 fbd6 	bl	8008010 <osDelay>
				if (check_SIM == 0){
 8002864:	2f00      	cmp	r7, #0
 8002866:	f040 8442 	bne.w	80030ee <StartGSM+0x932>
					memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 800286a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800286e:	4639      	mov	r1, r7
 8002870:	4620      	mov	r0, r4
 8002872:	f009 fa2f 	bl	800bcd4 <memset>
					SIM_UART_ReInitializeRxDMA();
 8002876:	f7fe fdab 	bl	80013d0 <SIM_UART_ReInitializeRxDMA>
					printf("\n --------------------------- Rebooting SIM module --------------------------\n");
 800287a:	4864      	ldr	r0, [pc, #400]	@ (8002a0c <StartGSM+0x250>)
 800287c:	e7dd      	b.n	800283a <StartGSM+0x7e>
				if(is_set_uniqueID == 0 && check_SIM == 1){
 800287e:	2801      	cmp	r0, #1
 8002880:	d1ed      	bne.n	800285e <StartGSM+0xa2>
					memcpy(reg_msg.terminal_phone_number, terminal_phone_number, sizeof(terminal_phone_number));
 8002882:	4b63      	ldr	r3, [pc, #396]	@ (8002a10 <StartGSM+0x254>)
 8002884:	681a      	ldr	r2, [r3, #0]
 8002886:	889b      	ldrh	r3, [r3, #4]
 8002888:	f8cd 201d 	str.w	r2, [sp, #29]
 800288c:	f8ad 3021 	strh.w	r3, [sp, #33]	@ 0x21
					memcpy(location_info.terminal_phone_number, terminal_phone_number, sizeof(terminal_phone_number));
 8002890:	f8cd 2059 	str.w	r2, [sp, #89]	@ 0x59
 8002894:	f8ad 305d 	strh.w	r3, [sp, #93]	@ 0x5d
					is_set_uniqueID = 1;
 8002898:	e7e0      	b.n	800285c <StartGSM+0xa0>
				printf("Inside process: Configure PDP context\r\n");
 800289a:	485e      	ldr	r0, [pc, #376]	@ (8002a14 <StartGSM+0x258>)
 800289c:	f009 f8ba 	bl	800ba14 <puts>
				memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 80028a0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80028a4:	2100      	movs	r1, #0
 80028a6:	4620      	mov	r0, r4
 80028a8:	f009 fa14 	bl	800bcd4 <memset>
				SIM_UART_ReInitializeRxDMA();
 80028ac:	f7fe fd90 	bl	80013d0 <SIM_UART_ReInitializeRxDMA>
				configure_APN(1);
 80028b0:	2001      	movs	r0, #1
 80028b2:	f7ff f8cb 	bl	8001a4c <configure_APN>
				memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 80028b6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80028ba:	2100      	movs	r1, #0
 80028bc:	4620      	mov	r0, r4
 80028be:	f009 fa09 	bl	800bcd4 <memset>
				SIM_UART_ReInitializeRxDMA();
 80028c2:	f7fe fd85 	bl	80013d0 <SIM_UART_ReInitializeRxDMA>
				process++;
 80028c6:	2603      	movs	r6, #3
				}
				break;
		}
		if(is_in_sending == 0 && is_disconnect == 1){
 80028c8:	4f53      	ldr	r7, [pc, #332]	@ (8002a18 <StartGSM+0x25c>)
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	b92b      	cbnz	r3, 80028da <StartGSM+0x11e>
 80028ce:	4b53      	ldr	r3, [pc, #332]	@ (8002a1c <StartGSM+0x260>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	2b01      	cmp	r3, #1
 80028d4:	d18f      	bne.n	80027f6 <StartGSM+0x3a>
			receiveRMCDataWithAddrGSM();
 80028d6:	f7ff fe49 	bl	800256c <receiveRMCDataWithAddrGSM>
		}
		if(is_in_sending == 1){
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	2b01      	cmp	r3, #1
 80028de:	d18a      	bne.n	80027f6 <StartGSM+0x3a>
			is_in_sending = 0;
 80028e0:	2300      	movs	r3, #0
 80028e2:	603b      	str	r3, [r7, #0]
 80028e4:	e787      	b.n	80027f6 <StartGSM+0x3a>
				printf("Inside process: Activate PDP context\r\n");
 80028e6:	484e      	ldr	r0, [pc, #312]	@ (8002a20 <StartGSM+0x264>)
 80028e8:	f009 f894 	bl	800ba14 <puts>
				int receive_activate = activate_context(1);
 80028ec:	2001      	movs	r0, #1
 80028ee:	f7ff f8fb 	bl	8001ae8 <activate_context>
				if(receive_activate){
 80028f2:	4607      	mov	r7, r0
 80028f4:	b188      	cbz	r0, 800291a <StartGSM+0x15e>
					getCurrentTime();
 80028f6:	f7ff fe03 	bl	8002500 <getCurrentTime>
					printf("Activate PDP context successfully\n");
 80028fa:	484a      	ldr	r0, [pc, #296]	@ (8002a24 <StartGSM+0x268>)
 80028fc:	f009 f88a 	bl	800ba14 <puts>
					osDelay(200);
 8002900:	20c8      	movs	r0, #200	@ 0xc8
 8002902:	f005 fb85 	bl	8008010 <osDelay>
					memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8002906:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800290a:	2100      	movs	r1, #0
 800290c:	4620      	mov	r0, r4
 800290e:	f009 f9e1 	bl	800bcd4 <memset>
					SIM_UART_ReInitializeRxDMA();
 8002912:	f7fe fd5d 	bl	80013d0 <SIM_UART_ReInitializeRxDMA>
					process++;
 8002916:	2604      	movs	r6, #4
 8002918:	e7d6      	b.n	80028c8 <StartGSM+0x10c>
					printf("Activate PDP Context Failed\n");
 800291a:	4843      	ldr	r0, [pc, #268]	@ (8002a28 <StartGSM+0x26c>)
 800291c:	f009 f87a 	bl	800ba14 <puts>
					int receive_deactivate = deactivate_context(1);
 8002920:	2001      	movs	r0, #1
 8002922:	f7ff f945 	bl	8001bb0 <deactivate_context>
					memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8002926:	f44f 7200 	mov.w	r2, #512	@ 0x200
					int receive_deactivate = deactivate_context(1);
 800292a:	4606      	mov	r6, r0
					memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 800292c:	4639      	mov	r1, r7
 800292e:	4620      	mov	r0, r4
 8002930:	f009 f9d0 	bl	800bcd4 <memset>
					SIM_UART_ReInitializeRxDMA();
 8002934:	f7fe fd4c 	bl	80013d0 <SIM_UART_ReInitializeRxDMA>
					if (receive_deactivate) process = 1;
 8002938:	bb36      	cbnz	r6, 8002988 <StartGSM+0x1cc>
						memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 800293a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800293e:	4631      	mov	r1, r6
 8002940:	4620      	mov	r0, r4
 8002942:	f009 f9c7 	bl	800bcd4 <memset>
						SIM_UART_ReInitializeRxDMA();
 8002946:	f7fe fd43 	bl	80013d0 <SIM_UART_ReInitializeRxDMA>
						printf("\n --------------------------- Rebooting SIM module ---------------------------\n");
 800294a:	4838      	ldr	r0, [pc, #224]	@ (8002a2c <StartGSM+0x270>)
 800294c:	e775      	b.n	800283a <StartGSM+0x7e>
				printf("Inside process: OPEN SOCKET SERVICE\r\n");
 800294e:	4838      	ldr	r0, [pc, #224]	@ (8002a30 <StartGSM+0x274>)
 8002950:	f009 f860 	bl	800ba14 <puts>
				int received_res = open_socket_service(1, 0, 0, 0);
 8002954:	2300      	movs	r3, #0
 8002956:	461a      	mov	r2, r3
 8002958:	4619      	mov	r1, r3
 800295a:	2001      	movs	r0, #1
 800295c:	f7ff f96e 	bl	8001c3c <open_socket_service>
				if(received_res){
 8002960:	4607      	mov	r7, r0
 8002962:	2800      	cmp	r0, #0
 8002964:	f040 83c6 	bne.w	80030f4 <StartGSM+0x938>
					printf("Connect to Server Failed\n");
 8002968:	4832      	ldr	r0, [pc, #200]	@ (8002a34 <StartGSM+0x278>)
 800296a:	f009 f853 	bl	800ba14 <puts>
					int receive_deactivate = deactivate_context(1);
 800296e:	2001      	movs	r0, #1
 8002970:	f7ff f91e 	bl	8001bb0 <deactivate_context>
					memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8002974:	f44f 7200 	mov.w	r2, #512	@ 0x200
					int receive_deactivate = deactivate_context(1);
 8002978:	4606      	mov	r6, r0
					memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 800297a:	4639      	mov	r1, r7
 800297c:	4620      	mov	r0, r4
 800297e:	f009 f9a9 	bl	800bcd4 <memset>
					SIM_UART_ReInitializeRxDMA();
 8002982:	f7fe fd25 	bl	80013d0 <SIM_UART_ReInitializeRxDMA>
					if (receive_deactivate) process = 1;
 8002986:	b10e      	cbz	r6, 800298c <StartGSM+0x1d0>
					if (receive_deactivate) process = 1;
 8002988:	2601      	movs	r6, #1
 800298a:	e79d      	b.n	80028c8 <StartGSM+0x10c>
						memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 800298c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002990:	4631      	mov	r1, r6
 8002992:	4620      	mov	r0, r4
 8002994:	f009 f99e 	bl	800bcd4 <memset>
						SIM_UART_ReInitializeRxDMA();
 8002998:	f7fe fd1a 	bl	80013d0 <SIM_UART_ReInitializeRxDMA>
						printf("\n ------------------------- Rebooting SIM module -----------------------\n");
 800299c:	4826      	ldr	r0, [pc, #152]	@ (8002a38 <StartGSM+0x27c>)
 800299e:	e74c      	b.n	800283a <StartGSM+0x7e>
				printf("Inside process: Register/Login to the server.\r\n");
 80029a0:	4826      	ldr	r0, [pc, #152]	@ (8002a3c <StartGSM+0x280>)
 80029a2:	f009 f837 	bl	800ba14 <puts>
 80029a6:	2603      	movs	r6, #3
					int result_send_login = login_to_server(0,&reg_msg);
 80029a8:	a906      	add	r1, sp, #24
 80029aa:	2000      	movs	r0, #0
 80029ac:	f7ff fad8 	bl	8001f60 <login_to_server>
 80029b0:	4607      	mov	r7, r0
					receive_response();
 80029b2:	f7fe fd27 	bl	8001404 <receive_response>
					if(result_send_login){
 80029b6:	b127      	cbz	r7, 80029c2 <StartGSM+0x206>
						printf("LOGIN TO SERVER SUCCESSFULLY\n");
 80029b8:	4821      	ldr	r0, [pc, #132]	@ (8002a40 <StartGSM+0x284>)
 80029ba:	f009 f82b 	bl	800ba14 <puts>
				else process++;
 80029be:	2606      	movs	r6, #6
 80029c0:	e782      	b.n	80028c8 <StartGSM+0x10c>
					osDelay(200);
 80029c2:	20c8      	movs	r0, #200	@ 0xc8
 80029c4:	f005 fb24 	bl	8008010 <osDelay>
				while(count_resend_login < 3){
 80029c8:	3e01      	subs	r6, #1
 80029ca:	d1ed      	bne.n	80029a8 <StartGSM+0x1ec>
				else process = 8;
 80029cc:	2608      	movs	r6, #8
 80029ce:	e77b      	b.n	80028c8 <StartGSM+0x10c>
				printf("Inside process: Check Register/Login\r\n");
 80029d0:	481c      	ldr	r0, [pc, #112]	@ (8002a44 <StartGSM+0x288>)
 80029d2:	f009 f81f 	bl	800ba14 <puts>
				int result_check_login = check_data_sent_to_server(0);
 80029d6:	2000      	movs	r0, #0
 80029d8:	f7ff fcd0 	bl	800237c <check_data_sent_to_server>
				if(result_check_login){
 80029dc:	2800      	cmp	r0, #0
 80029de:	d0f5      	beq.n	80029cc <StartGSM+0x210>
					receive_response();
 80029e0:	f7fe fd10 	bl	8001404 <receive_response>
					process++;
 80029e4:	2607      	movs	r6, #7
 80029e6:	e76f      	b.n	80028c8 <StartGSM+0x10c>
 80029e8:	08010add 	.word	0x08010add
 80029ec:	20001de8 	.word	0x20001de8
 80029f0:	20001b9c 	.word	0x20001b9c
 80029f4:	200022b4 	.word	0x200022b4
 80029f8:	20001dd8 	.word	0x20001dd8
 80029fc:	20001ba4 	.word	0x20001ba4
 8002a00:	08010b34 	.word	0x08010b34
 8002a04:	08010b41 	.word	0x08010b41
 8002a08:	08010b84 	.word	0x08010b84
 8002a0c:	08010b9c 	.word	0x08010b9c
 8002a10:	20001b38 	.word	0x20001b38
 8002a14:	08010bea 	.word	0x08010bea
 8002a18:	20001dd0 	.word	0x20001dd0
 8002a1c:	20001dc4 	.word	0x20001dc4
 8002a20:	08010c11 	.word	0x08010c11
 8002a24:	08010c37 	.word	0x08010c37
 8002a28:	08010c59 	.word	0x08010c59
 8002a2c:	08010c75 	.word	0x08010c75
 8002a30:	08010cc4 	.word	0x08010cc4
 8002a34:	08010ce9 	.word	0x08010ce9
 8002a38:	08010d02 	.word	0x08010d02
 8002a3c:	08010d4b 	.word	0x08010d4b
 8002a40:	08010d7a 	.word	0x08010d7a
 8002a44:	08010d97 	.word	0x08010d97
				is_in_sending = 1;
 8002a48:	4ba9      	ldr	r3, [pc, #676]	@ (8002cf0 <StartGSM+0x534>)
				printf("Inside process: Send Location\r\n");
 8002a4a:	48aa      	ldr	r0, [pc, #680]	@ (8002cf4 <StartGSM+0x538>)
				is_in_sending = 1;
 8002a4c:	2201      	movs	r2, #1
 8002a4e:	601a      	str	r2, [r3, #0]
				printf("Inside process: Send Location\r\n");
 8002a50:	f008 ffe0 	bl	800ba14 <puts>
				int result_get_current = getCurrentTime();
 8002a54:	f7ff fd54 	bl	8002500 <getCurrentTime>
				if(result_get_current == 0){
 8002a58:	2800      	cmp	r0, #0
 8002a5a:	d0b7      	beq.n	80029cc <StartGSM+0x210>
					if(received_RMC == 1){
 8002a5c:	f8df 8308 	ldr.w	r8, [pc, #776]	@ 8002d68 <StartGSM+0x5ac>
					receiveRMCDataWithAddrGSM();
 8002a60:	f7ff fd84 	bl	800256c <receiveRMCDataWithAddrGSM>
					if(received_RMC == 1){
 8002a64:	f8d8 3000 	ldr.w	r3, [r8]
 8002a68:	2b01      	cmp	r3, #1
 8002a6a:	d1f9      	bne.n	8002a60 <StartGSM+0x2a4>
						received_RMC = 0;
 8002a6c:	2300      	movs	r3, #0
						printf("RECEIVED RMC DATA AT GSM MODULE\n");
 8002a6e:	48a2      	ldr	r0, [pc, #648]	@ (8002cf8 <StartGSM+0x53c>)
						received_RMC = 0;
 8002a70:	f8c8 3000 	str.w	r3, [r8]
						printf("RECEIVED RMC DATA AT GSM MODULE\n");
 8002a74:	f008 ffce 	bl	800ba14 <puts>
						save_rmc_to_location_info(&location_info);
 8002a78:	a815      	add	r0, sp, #84	@ 0x54
 8002a7a:	f7fe fd19 	bl	80014b0 <save_rmc_to_location_info>
						printf("Address going to send to server at GSM:(STACK FROM MAIL QUEUE)  %08lx\n", current_addr_gsm);
 8002a7e:	6829      	ldr	r1, [r5, #0]
 8002a80:	489e      	ldr	r0, [pc, #632]	@ (8002cfc <StartGSM+0x540>)
							send_AT_command(CHECK_SIGNAL_QUALITY);
 8002a82:	4f9f      	ldr	r7, [pc, #636]	@ (8002d00 <StartGSM+0x544>)
							if(strstr((char *) response, CHECK_RESPONSE) == NULL){
 8002a84:	f8df 92e4 	ldr.w	r9, [pc, #740]	@ 8002d6c <StartGSM+0x5b0>
						printf("Address going to send to server at GSM:(STACK FROM MAIL QUEUE)  %08lx\n", current_addr_gsm);
 8002a88:	f008 ff54 	bl	800b934 <iprintf>
 8002a8c:	2603      	movs	r6, #3
							send_AT_command(CHECK_SIGNAL_QUALITY);
 8002a8e:	4638      	mov	r0, r7
 8002a90:	f7fe fc8e 	bl	80013b0 <send_AT_command>
							osDelay(300);
 8002a94:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8002a98:	f005 faba 	bl	8008010 <osDelay>
							if(strstr((char *) response, CHECK_RESPONSE) == NULL){
 8002a9c:	4649      	mov	r1, r9
 8002a9e:	4620      	mov	r0, r4
 8002aa0:	f009 f968 	bl	800bd74 <strstr>
 8002aa4:	2800      	cmp	r0, #0
 8002aa6:	f040 8091 	bne.w	8002bcc <StartGSM+0x410>
								printf("\n CSQ OK:");
 8002aaa:	4896      	ldr	r0, [pc, #600]	@ (8002d04 <StartGSM+0x548>)
 8002aac:	f008 ff42 	bl	800b934 <iprintf>
								receive_response();
 8002ab0:	f7fe fca8 	bl	8001404 <receive_response>
								printf("\n");
 8002ab4:	200a      	movs	r0, #10
 8002ab6:	f008 ff4f 	bl	800b958 <putchar>
						HAL_TIM_Base_Start(&htim3);
 8002aba:	4f93      	ldr	r7, [pc, #588]	@ (8002d08 <StartGSM+0x54c>)
 8002abc:	4e93      	ldr	r6, [pc, #588]	@ (8002d0c <StartGSM+0x550>)
 8002abe:	4638      	mov	r0, r7
 8002ac0:	f004 fc18 	bl	80072f4 <HAL_TIM_Base_Start>
						__HAL_TIM_SET_COUNTER(&htim3, 0);
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	f04f 0900 	mov.w	r9, #0
 8002aca:	f8c3 9024 	str.w	r9, [r3, #36]	@ 0x24
							result_final = processUploadDataToServer(&location_info);
 8002ace:	a815      	add	r0, sp, #84	@ 0x54
 8002ad0:	f7ff fdf2 	bl	80026b8 <processUploadDataToServer>
 8002ad4:	4b8e      	ldr	r3, [pc, #568]	@ (8002d10 <StartGSM+0x554>)
							if(result_final == 1){
 8002ad6:	2801      	cmp	r0, #1
							result_final = processUploadDataToServer(&location_info);
 8002ad8:	6018      	str	r0, [r3, #0]
							if(result_final == 1){
 8002ada:	f040 814f 	bne.w	8002d7c <StartGSM+0x5c0>
								printf("Sending SUCCESS\n");
 8002ade:	488d      	ldr	r0, [pc, #564]	@ (8002d14 <StartGSM+0x558>)
 8002ae0:	f008 ff98 	bl	800ba14 <puts>
								receive_response();
 8002ae4:	f7fe fc8e 	bl	8001404 <receive_response>
								memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8002ae8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002aec:	4649      	mov	r1, r9
 8002aee:	4620      	mov	r0, r4
 8002af0:	f009 f8f0 	bl	800bcd4 <memset>
								SIM_UART_ReInitializeRxDMA();
 8002af4:	f7fe fc6c 	bl	80013d0 <SIM_UART_ReInitializeRxDMA>
								if(is_disconnect == 1 || is_using_flash == 1){
 8002af8:	6832      	ldr	r2, [r6, #0]
 8002afa:	2a01      	cmp	r2, #1
 8002afc:	d07a      	beq.n	8002bf4 <StartGSM+0x438>
 8002afe:	4b86      	ldr	r3, [pc, #536]	@ (8002d18 <StartGSM+0x55c>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	2b01      	cmp	r3, #1
 8002b04:	f040 80de 	bne.w	8002cc4 <StartGSM+0x508>
									enqueue_GSM(&result_addr_queue, current_addr_gsm);
 8002b08:	f8df 921c 	ldr.w	r9, [pc, #540]	@ 8002d28 <StartGSM+0x56c>
									printf("\n-----------ADDING current address to the result queue----------\n");
 8002b0c:	4883      	ldr	r0, [pc, #524]	@ (8002d1c <StartGSM+0x560>)
									if(is_keep_up == 0) num_in_mail_sent++;
 8002b0e:	f8df a260 	ldr.w	sl, [pc, #608]	@ 8002d70 <StartGSM+0x5b4>
									printf("\n-----------ADDING current address to the result queue----------\n");
 8002b12:	f008 ff7f 	bl	800ba14 <puts>
									enqueue_GSM(&result_addr_queue, current_addr_gsm);
 8002b16:	6829      	ldr	r1, [r5, #0]
 8002b18:	4648      	mov	r0, r9
 8002b1a:	f000 fafb 	bl	8003114 <enqueue_GSM>
									if(is_keep_up == 0) num_in_mail_sent++;
 8002b1e:	f8da 3000 	ldr.w	r3, [sl]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d170      	bne.n	8002c08 <StartGSM+0x44c>
 8002b26:	4a7e      	ldr	r2, [pc, #504]	@ (8002d20 <StartGSM+0x564>)
 8002b28:	6813      	ldr	r3, [r2, #0]
 8002b2a:	3301      	adds	r3, #1
 8002b2c:	6013      	str	r3, [r2, #0]
									printf("\n--------------RESULT ADDRESS QUEUE----------------\n");
 8002b2e:	487d      	ldr	r0, [pc, #500]	@ (8002d24 <StartGSM+0x568>)
									if(start_addr_disconnect >= end_addr_disconnect - 128 && checkAddrExistInQueue(end_addr_disconnect - 128, &result_addr_queue)){
 8002b30:	f8df 920c 	ldr.w	r9, [pc, #524]	@ 8002d40 <StartGSM+0x584>
 8002b34:	f8df b214 	ldr.w	fp, [pc, #532]	@ 8002d4c <StartGSM+0x590>
									printf("\n--------------RESULT ADDRESS QUEUE----------------\n");
 8002b38:	f008 ff6c 	bl	800ba14 <puts>
									printQueue_GSM(&result_addr_queue);
 8002b3c:	487a      	ldr	r0, [pc, #488]	@ (8002d28 <StartGSM+0x56c>)
 8002b3e:	f000 fb19 	bl	8003174 <printQueue_GSM>
									if(start_addr_disconnect >= end_addr_disconnect - 128 && checkAddrExistInQueue(end_addr_disconnect - 128, &result_addr_queue)){
 8002b42:	f8d9 3000 	ldr.w	r3, [r9]
 8002b46:	f8db 1000 	ldr.w	r1, [fp]
 8002b4a:	3b80      	subs	r3, #128	@ 0x80
 8002b4c:	428b      	cmp	r3, r1
 8002b4e:	f200 80c8 	bhi.w	8002ce2 <StartGSM+0x526>
 8002b52:	f8d9 0000 	ldr.w	r0, [r9]
 8002b56:	4974      	ldr	r1, [pc, #464]	@ (8002d28 <StartGSM+0x56c>)
 8002b58:	3880      	subs	r0, #128	@ 0x80
 8002b5a:	f000 fb3d 	bl	80031d8 <checkAddrExistInQueue>
 8002b5e:	2800      	cmp	r0, #0
 8002b60:	f000 80bf 	beq.w	8002ce2 <StartGSM+0x526>
										printf("\n\n\n\n---------------END GETTING FROM FLASH-------------\n\n\n\n");
 8002b64:	4871      	ldr	r0, [pc, #452]	@ (8002d2c <StartGSM+0x570>)
 8002b66:	f008 ff55 	bl	800ba14 <puts>
										is_using_flash = 0;
 8002b6a:	4a6b      	ldr	r2, [pc, #428]	@ (8002d18 <StartGSM+0x55c>)
										clearQueue_GSM(&result_addr_queue);
 8002b6c:	486e      	ldr	r0, [pc, #440]	@ (8002d28 <StartGSM+0x56c>)
										is_using_flash = 0;
 8002b6e:	2300      	movs	r3, #0
 8002b70:	6013      	str	r3, [r2, #0]
										clearQueue_GSM(&result_addr_queue);
 8002b72:	f000 faef 	bl	8003154 <clearQueue_GSM>
										count_shiftleft = 0;
 8002b76:	4a6e      	ldr	r2, [pc, #440]	@ (8002d30 <StartGSM+0x574>)
										printf("\n\n---------------- CLEAR THE MAIL QUEUE ---------------------\n\n");
 8002b78:	486e      	ldr	r0, [pc, #440]	@ (8002d34 <StartGSM+0x578>)
										start_addr_disconnect = 0;
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	f8cb 3000 	str.w	r3, [fp]
										count_shiftleft = 0;
 8002b80:	7013      	strb	r3, [r2, #0]
										end_addr_disconnect = 0;
 8002b82:	f8c9 3000 	str.w	r3, [r9]
										is_keep_up = 0;
 8002b86:	f8ca 3000 	str.w	r3, [sl]
										printf("\n\n---------------- CLEAR THE MAIL QUEUE ---------------------\n\n");
 8002b8a:	f008 ff43 	bl	800ba14 <puts>
											printf("Receiving MAIL\n");
 8002b8e:	f8df b1e4 	ldr.w	fp, [pc, #484]	@ 8002d74 <StartGSM+0x5b8>
											osEvent evt = osMailGet(RMC_MailQGSMId, 3000); // Wait for mail
 8002b92:	f8df 91e4 	ldr.w	r9, [pc, #484]	@ 8002d78 <StartGSM+0x5bc>
											printf("Receiving MAIL\n");
 8002b96:	4658      	mov	r0, fp
 8002b98:	f008 ff3c 	bl	800ba14 <puts>
											osEvent evt = osMailGet(RMC_MailQGSMId, 3000); // Wait for mail
 8002b9c:	f8d9 1000 	ldr.w	r1, [r9]
 8002ba0:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8002ba4:	a803      	add	r0, sp, #12
 8002ba6:	f005 fb5e 	bl	8008266 <osMailGet>
											if(evt.status == osEventMail){// Wait for mail
 8002baa:	9b03      	ldr	r3, [sp, #12]
 8002bac:	2b20      	cmp	r3, #32
 8002bae:	f040 8084 	bne.w	8002cba <StartGSM+0x4fe>
												GSM_MAIL_STRUCT *receivedData = (GSM_MAIL_STRUCT *)evt.value.p;
 8002bb2:	f8dd a010 	ldr.w	sl, [sp, #16]
												printf("Receiving MAIL For CLEARING: %08lx\n", receivedData->address);
 8002bb6:	4860      	ldr	r0, [pc, #384]	@ (8002d38 <StartGSM+0x57c>)
 8002bb8:	f8da 1058 	ldr.w	r1, [sl, #88]	@ 0x58
 8002bbc:	f008 feba 	bl	800b934 <iprintf>
												osMailFree(RMC_MailQGSMId, receivedData);
 8002bc0:	f8d9 0000 	ldr.w	r0, [r9]
 8002bc4:	4651      	mov	r1, sl
 8002bc6:	f005 fb87 	bl	80082d8 <osMailFree>
 8002bca:	e7e4      	b.n	8002b96 <StartGSM+0x3da>
								printf("\n CSQ NOT OK -> RESEND:");
 8002bcc:	485b      	ldr	r0, [pc, #364]	@ (8002d3c <StartGSM+0x580>)
 8002bce:	f008 feb1 	bl	800b934 <iprintf>
								receive_response();
 8002bd2:	f7fe fc17 	bl	8001404 <receive_response>
								printf("\n");
 8002bd6:	200a      	movs	r0, #10
 8002bd8:	f008 febe 	bl	800b958 <putchar>
							memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8002bdc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002be0:	2100      	movs	r1, #0
 8002be2:	4620      	mov	r0, r4
 8002be4:	f009 f876 	bl	800bcd4 <memset>
							SIM_UART_ReInitializeRxDMA();
 8002be8:	f7fe fbf2 	bl	80013d0 <SIM_UART_ReInitializeRxDMA>
						for(size_t i = 0; i < 3 ; i++){
 8002bec:	3e01      	subs	r6, #1
 8002bee:	f47f af4e 	bne.w	8002a8e <StartGSM+0x2d2>
 8002bf2:	e762      	b.n	8002aba <StartGSM+0x2fe>
										end_addr_disconnect = current_addr_gsm;
 8002bf4:	4b52      	ldr	r3, [pc, #328]	@ (8002d40 <StartGSM+0x584>)
 8002bf6:	6829      	ldr	r1, [r5, #0]
 8002bf8:	6019      	str	r1, [r3, #0]
										in_getting_mail_stack = 1;
 8002bfa:	4952      	ldr	r1, [pc, #328]	@ (8002d44 <StartGSM+0x588>)
										printf("End address of network outage. RECONNECTED SUCCESSFULLY: %08lx\n", end_addr_disconnect);
 8002bfc:	4852      	ldr	r0, [pc, #328]	@ (8002d48 <StartGSM+0x58c>)
										in_getting_mail_stack = 1;
 8002bfe:	600a      	str	r2, [r1, #0]
										printf("End address of network outage. RECONNECTED SUCCESSFULLY: %08lx\n", end_addr_disconnect);
 8002c00:	6819      	ldr	r1, [r3, #0]
 8002c02:	f008 fe97 	bl	800b934 <iprintf>
 8002c06:	e77f      	b.n	8002b08 <StartGSM+0x34c>
									if(is_keep_up == 1 && in_getting_mail_stack == 1){
 8002c08:	2b01      	cmp	r3, #1
 8002c0a:	d190      	bne.n	8002b2e <StartGSM+0x372>
 8002c0c:	4b4d      	ldr	r3, [pc, #308]	@ (8002d44 <StartGSM+0x588>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	2b01      	cmp	r3, #1
 8002c12:	d18c      	bne.n	8002b2e <StartGSM+0x372>
										for (int i = 0; i < result_addr_queue.size-1; i++) {
 8002c14:	f8d9 1208 	ldr.w	r1, [r9, #520]	@ 0x208
											int idx = (result_addr_queue.front + i) % MAX_SIZE;
 8002c18:	f8d9 c200 	ldr.w	ip, [r9, #512]	@ 0x200
										for (int i = 0; i < result_addr_queue.size-1; i++) {
 8002c1c:	f04f 0e00 	mov.w	lr, #0
 8002c20:	3901      	subs	r1, #1
										int count_stack = 0;
 8002c22:	4672      	mov	r2, lr
										for (int i = 0; i < result_addr_queue.size-1; i++) {
 8002c24:	4571      	cmp	r1, lr
 8002c26:	dc12      	bgt.n	8002c4e <StartGSM+0x492>
										for (int i = 0; i < result_addr_queue.size-1; i++) {
 8002c28:	f04f 0e00 	mov.w	lr, #0
 8002c2c:	4571      	cmp	r1, lr
 8002c2e:	dc26      	bgt.n	8002c7e <StartGSM+0x4c2>
										start_addr_disconnect -= count_shiftleft * 128;
 8002c30:	4946      	ldr	r1, [pc, #280]	@ (8002d4c <StartGSM+0x590>)
 8002c32:	4a3f      	ldr	r2, [pc, #252]	@ (8002d30 <StartGSM+0x574>)
 8002c34:	680b      	ldr	r3, [r1, #0]
 8002c36:	7810      	ldrb	r0, [r2, #0]
 8002c38:	eba3 13c0 	sub.w	r3, r3, r0, lsl #7
 8002c3c:	600b      	str	r3, [r1, #0]
										count_shiftleft = 0;
 8002c3e:	2300      	movs	r3, #0
 8002c40:	7013      	strb	r3, [r2, #0]
										in_getting_mail_stack = 0;
 8002c42:	4a40      	ldr	r2, [pc, #256]	@ (8002d44 <StartGSM+0x588>)
										printf("\n\n-------------- HAVE SENT ALL THE STACKED DATA IN MAIL QUEUE ----------------\n\n");
 8002c44:	4842      	ldr	r0, [pc, #264]	@ (8002d50 <StartGSM+0x594>)
										in_getting_mail_stack = 0;
 8002c46:	6013      	str	r3, [r2, #0]
										printf("\n\n-------------- HAVE SENT ALL THE STACKED DATA IN MAIL QUEUE ----------------\n\n");
 8002c48:	f008 fee4 	bl	800ba14 <puts>
 8002c4c:	e76f      	b.n	8002b2e <StartGSM+0x372>
											int idx = (result_addr_queue.front + i) % MAX_SIZE;
 8002c4e:	eb0e 030c 	add.w	r3, lr, ip
 8002c52:	4258      	negs	r0, r3
 8002c54:	f000 007f 	and.w	r0, r0, #127	@ 0x7f
 8002c58:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002c5c:	bf58      	it	pl
 8002c5e:	4243      	negpl	r3, r0
											if(result_addr_queue.data[idx] == (FLASH_END_ADDRESS - 0x100) && result_addr_queue.data[idx+1] == (FLASH_END_ADDRESS - 0x100)){
 8002c60:	f859 0023 	ldr.w	r0, [r9, r3, lsl #2]
 8002c64:	f5b0 4f9e 	cmp.w	r0, #20224	@ 0x4f00
 8002c68:	d106      	bne.n	8002c78 <StartGSM+0x4bc>
 8002c6a:	3301      	adds	r3, #1
 8002c6c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8002c70:	f5b3 4f9e 	cmp.w	r3, #20224	@ 0x4f00
												count_stack++;
 8002c74:	bf08      	it	eq
 8002c76:	3201      	addeq	r2, #1
										for (int i = 0; i < result_addr_queue.size-1; i++) {
 8002c78:	f10e 0e01 	add.w	lr, lr, #1
 8002c7c:	e7d2      	b.n	8002c24 <StartGSM+0x468>
											int idx = (result_addr_queue.front + i) % MAX_SIZE;
 8002c7e:	eb0e 000c 	add.w	r0, lr, ip
 8002c82:	4243      	negs	r3, r0
 8002c84:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002c88:	f000 007f 	and.w	r0, r0, #127	@ 0x7f
 8002c8c:	bf58      	it	pl
 8002c8e:	4258      	negpl	r0, r3
											if(result_addr_queue.data[idx] == (FLASH_END_ADDRESS - 0x100) && result_addr_queue.data[idx+1] == (FLASH_END_ADDRESS - 0x100)){
 8002c90:	f859 3020 	ldr.w	r3, [r9, r0, lsl #2]
 8002c94:	f5b3 4f9e 	cmp.w	r3, #20224	@ 0x4f00
 8002c98:	d10c      	bne.n	8002cb4 <StartGSM+0x4f8>
 8002c9a:	1c43      	adds	r3, r0, #1
 8002c9c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8002ca0:	f5b3 4f9e 	cmp.w	r3, #20224	@ 0x4f00
												result_addr_queue.data[idx] -= 128 * count_stack;
 8002ca4:	bf01      	itttt	eq
 8002ca6:	01d3      	lsleq	r3, r2, #7
 8002ca8:	f5c3 439e 	rsbeq	r3, r3, #20224	@ 0x4f00
 8002cac:	f849 3020 	streq.w	r3, [r9, r0, lsl #2]
												count_stack--;
 8002cb0:	f102 32ff 	addeq.w	r2, r2, #4294967295
										for (int i = 0; i < result_addr_queue.size-1; i++) {
 8002cb4:	f10e 0e01 	add.w	lr, lr, #1
 8002cb8:	e7b8      	b.n	8002c2c <StartGSM+0x470>
												printf("Have cleared out all mail queue\n");
 8002cba:	4826      	ldr	r0, [pc, #152]	@ (8002d54 <StartGSM+0x598>)
 8002cbc:	f008 feaa 	bl	800ba14 <puts>
									is_disconnect = 0;
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	6033      	str	r3, [r6, #0]
								is_pushing_data = 0;
 8002cc4:	4b24      	ldr	r3, [pc, #144]	@ (8002d58 <StartGSM+0x59c>)
							printf("\n--------------------Sending to SERVER takes %d -----------------------\n\n",period);
 8002cc6:	4825      	ldr	r0, [pc, #148]	@ (8002d5c <StartGSM+0x5a0>)
								is_pushing_data = 0;
 8002cc8:	2200      	movs	r2, #0
 8002cca:	601a      	str	r2, [r3, #0]
							int period = __HAL_TIM_GET_COUNTER(&htim3);
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	6a59      	ldr	r1, [r3, #36]	@ 0x24
							printf("\n--------------------Sending to SERVER takes %d -----------------------\n\n",period);
 8002cd0:	f008 fe30 	bl	800b934 <iprintf>
							printf("\n--------------------END OF SENDING SERVER --------------------------\n\n");
 8002cd4:	4822      	ldr	r0, [pc, #136]	@ (8002d60 <StartGSM+0x5a4>)
 8002cd6:	f008 fe9d 	bl	800ba14 <puts>
							osDelay(200);
 8002cda:	20c8      	movs	r0, #200	@ 0xc8
 8002cdc:	f005 f998 	bl	8008010 <osDelay>
 8002ce0:	e6be      	b.n	8002a60 <StartGSM+0x2a4>
										printf("\n\n------------------ USING FLASH TO PUSH TO SERVER -----------------\n\n");
 8002ce2:	4820      	ldr	r0, [pc, #128]	@ (8002d64 <StartGSM+0x5a8>)
 8002ce4:	f008 fe96 	bl	800ba14 <puts>
										is_using_flash = 1;
 8002ce8:	4a0b      	ldr	r2, [pc, #44]	@ (8002d18 <StartGSM+0x55c>)
 8002cea:	2301      	movs	r3, #1
 8002cec:	6013      	str	r3, [r2, #0]
 8002cee:	e7e7      	b.n	8002cc0 <StartGSM+0x504>
 8002cf0:	20001dd0 	.word	0x20001dd0
 8002cf4:	08010dbd 	.word	0x08010dbd
 8002cf8:	08010ddc 	.word	0x08010ddc
 8002cfc:	08010dfc 	.word	0x08010dfc
 8002d00:	080101e0 	.word	0x080101e0
 8002d04:	08010e43 	.word	0x08010e43
 8002d08:	2000244c 	.word	0x2000244c
 8002d0c:	20001dc4 	.word	0x20001dc4
 8002d10:	20000000 	.word	0x20000000
 8002d14:	080109b9 	.word	0x080109b9
 8002d18:	20001dc0 	.word	0x20001dc0
 8002d1c:	08010ea5 	.word	0x08010ea5
 8002d20:	20001dc8 	.word	0x20001dc8
 8002d24:	08010f36 	.word	0x08010f36
 8002d28:	20001ba4 	.word	0x20001ba4
 8002d2c:	08010f6a 	.word	0x08010f6a
 8002d30:	20001db8 	.word	0x20001db8
 8002d34:	08010fa4 	.word	0x08010fa4
 8002d38:	08010ff2 	.word	0x08010ff2
 8002d3c:	08010e4d 	.word	0x08010e4d
 8002d40:	20001b98 	.word	0x20001b98
 8002d44:	20001dcc 	.word	0x20001dcc
 8002d48:	08010e65 	.word	0x08010e65
 8002d4c:	20001ba0 	.word	0x20001ba0
 8002d50:	08010ee6 	.word	0x08010ee6
 8002d54:	08011016 	.word	0x08011016
 8002d58:	20001db4 	.word	0x20001db4
 8002d5c:	0801107c 	.word	0x0801107c
 8002d60:	080110c6 	.word	0x080110c6
 8002d64:	08011036 	.word	0x08011036
 8002d68:	20001dd4 	.word	0x20001dd4
 8002d6c:	080100bd 	.word	0x080100bd
 8002d70:	20001dbc 	.word	0x20001dbc
 8002d74:	08010fe3 	.word	0x08010fe3
 8002d78:	20002188 	.word	0x20002188
								printf("Sending ERROR\n");
 8002d7c:	48b7      	ldr	r0, [pc, #732]	@ (800305c <StartGSM+0x8a0>)
 8002d7e:	f8df 8330 	ldr.w	r8, [pc, #816]	@ 80030b0 <StartGSM+0x8f4>
 8002d82:	f008 fe47 	bl	800ba14 <puts>
								memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8002d86:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002d8a:	4649      	mov	r1, r9
 8002d8c:	4620      	mov	r0, r4
 8002d8e:	f008 ffa1 	bl	800bcd4 <memset>
								SIM_UART_ReInitializeRxDMA();
 8002d92:	f7fe fb1d 	bl	80013d0 <SIM_UART_ReInitializeRxDMA>
								if(is_disconnect == 0){
 8002d96:	6833      	ldr	r3, [r6, #0]
 8002d98:	b95b      	cbnz	r3, 8002db2 <StartGSM+0x5f6>
									if(is_using_flash == 0){
 8002d9a:	f8d8 3000 	ldr.w	r3, [r8]
 8002d9e:	b933      	cbnz	r3, 8002dae <StartGSM+0x5f2>
										start_addr_disconnect = current_addr_gsm;
 8002da0:	4baf      	ldr	r3, [pc, #700]	@ (8003060 <StartGSM+0x8a4>)
 8002da2:	682a      	ldr	r2, [r5, #0]
 8002da4:	601a      	str	r2, [r3, #0]
										printf("Saving start address of connection outage: %08lx\n", start_addr_disconnect);
 8002da6:	6819      	ldr	r1, [r3, #0]
 8002da8:	48ae      	ldr	r0, [pc, #696]	@ (8003064 <StartGSM+0x8a8>)
 8002daa:	f008 fdc3 	bl	800b934 <iprintf>
									is_disconnect = 1;
 8002dae:	2301      	movs	r3, #1
 8002db0:	6033      	str	r3, [r6, #0]
								if(is_using_flash == 1){
 8002db2:	f8d8 3000 	ldr.w	r3, [r8]
 8002db6:	2b01      	cmp	r3, #1
 8002db8:	f040 8110 	bne.w	8002fdc <StartGSM+0x820>
									if(is_keep_up){
 8002dbc:	f8df 92f4 	ldr.w	r9, [pc, #756]	@ 80030b4 <StartGSM+0x8f8>
 8002dc0:	4ea9      	ldr	r6, [pc, #676]	@ (8003068 <StartGSM+0x8ac>)
 8002dc2:	f8d9 2000 	ldr.w	r2, [r9]
 8002dc6:	bb42      	cbnz	r2, 8002e1a <StartGSM+0x65e>
										for (int i = 0; i < result_addr_queue.size-1; i++) {
 8002dc8:	f8d6 7208 	ldr.w	r7, [r6, #520]	@ 0x208
											int idx = (result_addr_queue.front + i) % MAX_SIZE;
 8002dcc:	f8d6 c200 	ldr.w	ip, [r6, #512]	@ 0x200
										for (int i = 0; i < result_addr_queue.size-1; i++) {
 8002dd0:	3f01      	subs	r7, #1
 8002dd2:	4696      	mov	lr, r2
										int count_stack = 0;
 8002dd4:	4611      	mov	r1, r2
										for (int i = 0; i < result_addr_queue.size-1; i++) {
 8002dd6:	4577      	cmp	r7, lr
 8002dd8:	f300 80a6 	bgt.w	8002f28 <StartGSM+0x76c>
										for (int i = 0; i < result_addr_queue.size-1; i++) {
 8002ddc:	4297      	cmp	r7, r2
 8002dde:	dd37      	ble.n	8002e50 <StartGSM+0x694>
											int idx = (result_addr_queue.front + i) % MAX_SIZE;
 8002de0:	eb02 000c 	add.w	r0, r2, ip
 8002de4:	4243      	negs	r3, r0
 8002de6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002dea:	f000 007f 	and.w	r0, r0, #127	@ 0x7f
 8002dee:	bf58      	it	pl
 8002df0:	4258      	negpl	r0, r3
											if(result_addr_queue.data[idx] == (FLASH_END_ADDRESS - 0x100) && result_addr_queue.data[idx+1] == (FLASH_END_ADDRESS - 0x100)){
 8002df2:	f856 3020 	ldr.w	r3, [r6, r0, lsl #2]
 8002df6:	f5b3 4f9e 	cmp.w	r3, #20224	@ 0x4f00
 8002dfa:	d10c      	bne.n	8002e16 <StartGSM+0x65a>
 8002dfc:	1c43      	adds	r3, r0, #1
 8002dfe:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8002e02:	f5b3 4f9e 	cmp.w	r3, #20224	@ 0x4f00
												result_addr_queue.data[idx] -= 128 * count_stack;
 8002e06:	bf01      	itttt	eq
 8002e08:	01cb      	lsleq	r3, r1, #7
 8002e0a:	f5c3 439e 	rsbeq	r3, r3, #20224	@ 0x4f00
 8002e0e:	f846 3020 	streq.w	r3, [r6, r0, lsl #2]
												count_stack--;
 8002e12:	f101 31ff 	addeq.w	r1, r1, #4294967295
										for (int i = 0; i < result_addr_queue.size-1; i++) {
 8002e16:	3201      	adds	r2, #1
 8002e18:	e7e0      	b.n	8002ddc <StartGSM+0x620>
										printf("\n-----------------BEFORE update the result address data: GSM --------------\n");
 8002e1a:	4894      	ldr	r0, [pc, #592]	@ (800306c <StartGSM+0x8b0>)
											if(result_addr_queue.data[idx] < start_addr_disconnect){
 8002e1c:	f8df a240 	ldr.w	sl, [pc, #576]	@ 8003060 <StartGSM+0x8a4>
										printf("\n-----------------BEFORE update the result address data: GSM --------------\n");
 8002e20:	f008 fdf8 	bl	800ba14 <puts>
										printQueue_GSM(&result_addr_queue);
 8002e24:	4630      	mov	r0, r6
 8002e26:	f000 f9a5 	bl	8003174 <printQueue_GSM>
										printf("\n--------------- Update the result address data: GSM --------------\n");
 8002e2a:	4891      	ldr	r0, [pc, #580]	@ (8003070 <StartGSM+0x8b4>)
 8002e2c:	f008 fdf2 	bl	800ba14 <puts>
										for (int i = 0; i < result_addr_queue.size; i++) {
 8002e30:	f04f 0b00 	mov.w	fp, #0
 8002e34:	f8d6 1208 	ldr.w	r1, [r6, #520]	@ 0x208
											int idx = (result_addr_queue.front + i) % MAX_SIZE;
 8002e38:	f8d6 7200 	ldr.w	r7, [r6, #512]	@ 0x200
										for (int i = 0; i < result_addr_queue.size; i++) {
 8002e3c:	4559      	cmp	r1, fp
 8002e3e:	dc3f      	bgt.n	8002ec0 <StartGSM+0x704>
										int count_shiftleft_dub = count_shiftleft;
 8002e40:	4b8c      	ldr	r3, [pc, #560]	@ (8003074 <StartGSM+0x8b8>)
 8002e42:	f893 e000 	ldrb.w	lr, [r3]
										for (int i = 0; i < result_addr_queue.size; i++){
 8002e46:	2000      	movs	r0, #0
												result_addr_queue.data[idx] -= 128 * count_shiftleft;
 8002e48:	ea4f 1cce 	mov.w	ip, lr, lsl #7
										for (int i = 0; i < result_addr_queue.size; i++){
 8002e4c:	4281      	cmp	r1, r0
 8002e4e:	dc51      	bgt.n	8002ef4 <StartGSM+0x738>
									printQueue_GSM(&result_addr_queue);
 8002e50:	4885      	ldr	r0, [pc, #532]	@ (8003068 <StartGSM+0x8ac>)
 8002e52:	f000 f98f 	bl	8003174 <printQueue_GSM>
									start_addr_disconnect -= 128 * count_shiftleft;
 8002e56:	4b82      	ldr	r3, [pc, #520]	@ (8003060 <StartGSM+0x8a4>)
 8002e58:	4986      	ldr	r1, [pc, #536]	@ (8003074 <StartGSM+0x8b8>)
 8002e5a:	681a      	ldr	r2, [r3, #0]
 8002e5c:	780f      	ldrb	r7, [r1, #0]
 8002e5e:	eba2 12c7 	sub.w	r2, r2, r7, lsl #7
 8002e62:	601a      	str	r2, [r3, #0]
									if(start_addr_disconnect < 0x3000) start_addr_disconnect = 0x3000;
 8002e64:	681a      	ldr	r2, [r3, #0]
 8002e66:	f5b2 5f40 	cmp.w	r2, #12288	@ 0x3000
									start_addr_disconnect -= 128 * count_shiftleft;
 8002e6a:	ea4f 10c7 	mov.w	r0, r7, lsl #7
									if(start_addr_disconnect < 0x3000) start_addr_disconnect = 0x3000;
 8002e6e:	d373      	bcc.n	8002f58 <StartGSM+0x79c>
									end_addr_disconnect -= 128 *count_shiftleft;
 8002e70:	4a81      	ldr	r2, [pc, #516]	@ (8003078 <StartGSM+0x8bc>)
										printf("Receiving MAIL\n");
 8002e72:	f8df b244 	ldr.w	fp, [pc, #580]	@ 80030b8 <StartGSM+0x8fc>
									end_addr_disconnect -= 128 *count_shiftleft;
 8002e76:	6813      	ldr	r3, [r2, #0]
										osEvent evt = osMailGet(RMC_MailQGSMId, 3000); // Wait for mail
 8002e78:	4f80      	ldr	r7, [pc, #512]	@ (800307c <StartGSM+0x8c0>)
									end_addr_disconnect -= 128 *count_shiftleft;
 8002e7a:	1a1b      	subs	r3, r3, r0
 8002e7c:	6013      	str	r3, [r2, #0]
									printf("\n\n---------------- CLEAR THE MAIL QUEUE ---------------------\n\n");
 8002e7e:	4880      	ldr	r0, [pc, #512]	@ (8003080 <StartGSM+0x8c4>)
									count_shiftleft = 0;
 8002e80:	2300      	movs	r3, #0
 8002e82:	700b      	strb	r3, [r1, #0]
									printf("\n\n---------------- CLEAR THE MAIL QUEUE ---------------------\n\n");
 8002e84:	f008 fdc6 	bl	800ba14 <puts>
										printf("Receiving MAIL\n");
 8002e88:	4658      	mov	r0, fp
 8002e8a:	f008 fdc3 	bl	800ba14 <puts>
										osEvent evt = osMailGet(RMC_MailQGSMId, 3000); // Wait for mail
 8002e8e:	6839      	ldr	r1, [r7, #0]
 8002e90:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8002e94:	a803      	add	r0, sp, #12
 8002e96:	f005 f9e6 	bl	8008266 <osMailGet>
										if(evt.status == osEventMail){
 8002e9a:	9b03      	ldr	r3, [sp, #12]
 8002e9c:	2b20      	cmp	r3, #32
 8002e9e:	d17c      	bne.n	8002f9a <StartGSM+0x7de>
											GSM_MAIL_STRUCT *receivedData = (GSM_MAIL_STRUCT *)evt.value.p;
 8002ea0:	f8dd a010 	ldr.w	sl, [sp, #16]
											printf("Receiving MAIL: %08lx\n", receivedData->address);
 8002ea4:	4877      	ldr	r0, [pc, #476]	@ (8003084 <StartGSM+0x8c8>)
 8002ea6:	f8da 1058 	ldr.w	r1, [sl, #88]	@ 0x58
 8002eaa:	f008 fd43 	bl	800b934 <iprintf>
											if(is_keep_up == 0 && receivedData->address == 0x4F00){
 8002eae:	f8d9 1000 	ldr.w	r1, [r9]
 8002eb2:	2900      	cmp	r1, #0
 8002eb4:	d054      	beq.n	8002f60 <StartGSM+0x7a4>
											osMailFree(RMC_MailQGSMId, receivedData);
 8002eb6:	6838      	ldr	r0, [r7, #0]
 8002eb8:	4651      	mov	r1, sl
 8002eba:	f005 fa0d 	bl	80082d8 <osMailFree>
 8002ebe:	e7e3      	b.n	8002e88 <StartGSM+0x6cc>
											int idx = (result_addr_queue.front + i) % MAX_SIZE;
 8002ec0:	445f      	add	r7, fp
 8002ec2:	427a      	negs	r2, r7
 8002ec4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002ec8:	f007 077f 	and.w	r7, r7, #127	@ 0x7f
 8002ecc:	bf58      	it	pl
 8002ece:	4257      	negpl	r7, r2
											if(result_addr_queue.data[idx] < start_addr_disconnect){
 8002ed0:	f8da 2000 	ldr.w	r2, [sl]
 8002ed4:	f856 1027 	ldr.w	r1, [r6, r7, lsl #2]
 8002ed8:	4291      	cmp	r1, r2
 8002eda:	d208      	bcs.n	8002eee <StartGSM+0x732>
												printf("CURRENT INDEX TO CHECK DELETING: %08lx", result_addr_queue.data[idx]);
 8002edc:	486a      	ldr	r0, [pc, #424]	@ (8003088 <StartGSM+0x8cc>)
 8002ede:	f008 fd29 	bl	800b934 <iprintf>
												deleteMiddle_GSM(&result_addr_queue, idx);
 8002ee2:	4639      	mov	r1, r7
 8002ee4:	4630      	mov	r0, r6
 8002ee6:	f000 f99d 	bl	8003224 <deleteMiddle_GSM>
												i--;
 8002eea:	f10b 3bff 	add.w	fp, fp, #4294967295
										for (int i = 0; i < result_addr_queue.size; i++) {
 8002eee:	f10b 0b01 	add.w	fp, fp, #1
 8002ef2:	e79f      	b.n	8002e34 <StartGSM+0x678>
											int idx = (result_addr_queue.front + i) % MAX_SIZE;
 8002ef4:	19c3      	adds	r3, r0, r7
 8002ef6:	425a      	negs	r2, r3
 8002ef8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002efc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002f00:	bf58      	it	pl
 8002f02:	4253      	negpl	r3, r2
										for (int i = 0; i < result_addr_queue.size; i++){
 8002f04:	3001      	adds	r0, #1
											if(result_addr_queue.data[idx] == FLASH_END_ADDRESS-0x100){
 8002f06:	f856 2023 	ldr.w	r2, [r6, r3, lsl #2]
 8002f0a:	f5b2 4f9e 	cmp.w	r2, #20224	@ 0x4f00
												result_addr_queue.data[idx] -= 128 * count_shiftleft_dub;
 8002f0e:	bf06      	itte	eq
 8002f10:	ea4f 12ce 	moveq.w	r2, lr, lsl #7
 8002f14:	f5c2 429e 	rsbeq	r2, r2, #20224	@ 0x4f00
												result_addr_queue.data[idx] -= 128 * count_shiftleft;
 8002f18:	eba2 020c 	subne.w	r2, r2, ip
 8002f1c:	f846 2023 	str.w	r2, [r6, r3, lsl #2]
												count_shiftleft_dub -= 1;
 8002f20:	bf08      	it	eq
 8002f22:	f10e 3eff 	addeq.w	lr, lr, #4294967295
										for (int i = 0; i < result_addr_queue.size; i++){
 8002f26:	e791      	b.n	8002e4c <StartGSM+0x690>
											int idx = (result_addr_queue.front + i) % MAX_SIZE;
 8002f28:	eb0e 030c 	add.w	r3, lr, ip
 8002f2c:	4258      	negs	r0, r3
 8002f2e:	f000 007f 	and.w	r0, r0, #127	@ 0x7f
 8002f32:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002f36:	bf58      	it	pl
 8002f38:	4243      	negpl	r3, r0
											if(result_addr_queue.data[idx] == (FLASH_END_ADDRESS - 0x100) && result_addr_queue.data[idx+1] == (FLASH_END_ADDRESS - 0x100)){
 8002f3a:	f856 0023 	ldr.w	r0, [r6, r3, lsl #2]
 8002f3e:	f5b0 4f9e 	cmp.w	r0, #20224	@ 0x4f00
 8002f42:	d106      	bne.n	8002f52 <StartGSM+0x796>
 8002f44:	3301      	adds	r3, #1
 8002f46:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8002f4a:	f5b3 4f9e 	cmp.w	r3, #20224	@ 0x4f00
												count_stack++;
 8002f4e:	bf08      	it	eq
 8002f50:	3101      	addeq	r1, #1
										for (int i = 0; i < result_addr_queue.size-1; i++) {
 8002f52:	f10e 0e01 	add.w	lr, lr, #1
 8002f56:	e73e      	b.n	8002dd6 <StartGSM+0x61a>
									if(start_addr_disconnect < 0x3000) start_addr_disconnect = 0x3000;
 8002f58:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
 8002f5c:	601a      	str	r2, [r3, #0]
 8002f5e:	e787      	b.n	8002e70 <StartGSM+0x6b4>
											if(is_keep_up == 0 && receivedData->address == 0x4F00){
 8002f60:	f8da 3058 	ldr.w	r3, [sl, #88]	@ 0x58
 8002f64:	f5b3 4f9e 	cmp.w	r3, #20224	@ 0x4f00
 8002f68:	d1a5      	bne.n	8002eb6 <StartGSM+0x6fa>
												for (int i = 0; i < num_in_mail_sent; i++) {
 8002f6a:	4b48      	ldr	r3, [pc, #288]	@ (800308c <StartGSM+0x8d0>)
 8002f6c:	6818      	ldr	r0, [r3, #0]
													int idx = (result_addr_queue.rear - i + MAX_SIZE) % MAX_SIZE; // Calculate the index in reverse
 8002f6e:	f8d6 3204 	ldr.w	r3, [r6, #516]	@ 0x204
 8002f72:	f103 0c80 	add.w	ip, r3, #128	@ 0x80
												for (int i = 0; i < num_in_mail_sent; i++) {
 8002f76:	4288      	cmp	r0, r1
 8002f78:	dd9d      	ble.n	8002eb6 <StartGSM+0x6fa>
													int idx = (result_addr_queue.rear - i + MAX_SIZE) % MAX_SIZE; // Calculate the index in reverse
 8002f7a:	ebac 0301 	sub.w	r3, ip, r1
 8002f7e:	425a      	negs	r2, r3
 8002f80:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002f84:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002f88:	bf58      	it	pl
 8002f8a:	4253      	negpl	r3, r2
												for (int i = 0; i < num_in_mail_sent; i++) {
 8002f8c:	3101      	adds	r1, #1
													result_addr_queue.data[idx] -= 128;
 8002f8e:	f856 2023 	ldr.w	r2, [r6, r3, lsl #2]
 8002f92:	3a80      	subs	r2, #128	@ 0x80
 8002f94:	f846 2023 	str.w	r2, [r6, r3, lsl #2]
												for (int i = 0; i < num_in_mail_sent; i++) {
 8002f98:	e7ed      	b.n	8002f76 <StartGSM+0x7ba>
											printf("Have cleared out all mail queue\n");
 8002f9a:	483d      	ldr	r0, [pc, #244]	@ (8003090 <StartGSM+0x8d4>)
 8002f9c:	f008 fd3a 	bl	800ba14 <puts>
									is_using_flash = 0;
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	f8c8 3000 	str.w	r3, [r8]
								is_pushing_data = 0;
 8002fa6:	4b3b      	ldr	r3, [pc, #236]	@ (8003094 <StartGSM+0x8d8>)
 8002fa8:	2600      	movs	r6, #0
 8002faa:	601e      	str	r6, [r3, #0]
								if(result_final == 2){
 8002fac:	4b3a      	ldr	r3, [pc, #232]	@ (8003098 <StartGSM+0x8dc>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	2b02      	cmp	r3, #2
 8002fb2:	d14d      	bne.n	8003050 <StartGSM+0x894>
									printf("---------------------SIM ERROR ----------------------\n");
 8002fb4:	4839      	ldr	r0, [pc, #228]	@ (800309c <StartGSM+0x8e0>)
 8002fb6:	f008 fd2d 	bl	800ba14 <puts>
									memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8002fba:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002fbe:	4631      	mov	r1, r6
 8002fc0:	4837      	ldr	r0, [pc, #220]	@ (80030a0 <StartGSM+0x8e4>)
 8002fc2:	f008 fe87 	bl	800bcd4 <memset>
									SIM_UART_ReInitializeRxDMA();
 8002fc6:	f7fe fa03 	bl	80013d0 <SIM_UART_ReInitializeRxDMA>
									printf("Rebooting SIM module\n");
 8002fca:	4836      	ldr	r0, [pc, #216]	@ (80030a4 <StartGSM+0x8e8>)
 8002fcc:	f008 fd22 	bl	800ba14 <puts>
									reboot_SIM_module();
 8002fd0:	f7fe fa40 	bl	8001454 <reboot_SIM_module>
				printf("\n--------------------END OF CASE 7 --------------------------\n\n");
 8002fd4:	4834      	ldr	r0, [pc, #208]	@ (80030a8 <StartGSM+0x8ec>)
 8002fd6:	f008 fd1d 	bl	800ba14 <puts>
				break;
 8002fda:	e475      	b.n	80028c8 <StartGSM+0x10c>
									printf("\n\n---------------- CLEAR THE MAIL QUEUE ---------------------\n\n");
 8002fdc:	4828      	ldr	r0, [pc, #160]	@ (8003080 <StartGSM+0x8c4>)
										printf("Receiving MAIL\n");
 8002fde:	f8df 90d8 	ldr.w	r9, [pc, #216]	@ 80030b8 <StartGSM+0x8fc>
										osEvent evt = osMailGet(RMC_MailQGSMId, 3000); // Wait for mail
 8002fe2:	f8df 8098 	ldr.w	r8, [pc, #152]	@ 800307c <StartGSM+0x8c0>
									printf("\n\n---------------- CLEAR THE MAIL QUEUE ---------------------\n\n");
 8002fe6:	f008 fd15 	bl	800ba14 <puts>
									int count_mail_end_addr = 0;
 8002fea:	2600      	movs	r6, #0
										printf("Receiving MAIL\n");
 8002fec:	4648      	mov	r0, r9
 8002fee:	f008 fd11 	bl	800ba14 <puts>
										osEvent evt = osMailGet(RMC_MailQGSMId, 3000); // Wait for mail
 8002ff2:	f8d8 1000 	ldr.w	r1, [r8]
 8002ff6:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8002ffa:	a803      	add	r0, sp, #12
 8002ffc:	f005 f933 	bl	8008266 <osMailGet>
										if(evt.status == osEventMail){
 8003000:	9b03      	ldr	r3, [sp, #12]
 8003002:	2b20      	cmp	r3, #32
 8003004:	d10f      	bne.n	8003026 <StartGSM+0x86a>
											GSM_MAIL_STRUCT *receivedData = (GSM_MAIL_STRUCT *)evt.value.p;
 8003006:	9f04      	ldr	r7, [sp, #16]
											printf("Receiving MAIL: %08lx\n", receivedData->address);
 8003008:	481e      	ldr	r0, [pc, #120]	@ (8003084 <StartGSM+0x8c8>)
 800300a:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800300c:	f008 fc92 	bl	800b934 <iprintf>
											if(receivedData->address == (FLASH_END_ADDRESS - 0X100)){
 8003010:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
											osMailFree(RMC_MailQGSMId, receivedData);
 8003012:	f8d8 0000 	ldr.w	r0, [r8]
											if(receivedData->address == (FLASH_END_ADDRESS - 0X100)){
 8003016:	f5b3 4f9e 	cmp.w	r3, #20224	@ 0x4f00
											osMailFree(RMC_MailQGSMId, receivedData);
 800301a:	4639      	mov	r1, r7
												count_mail_end_addr++;
 800301c:	bf08      	it	eq
 800301e:	3601      	addeq	r6, #1
											osMailFree(RMC_MailQGSMId, receivedData);
 8003020:	f005 f95a 	bl	80082d8 <osMailFree>
 8003024:	e7e2      	b.n	8002fec <StartGSM+0x830>
											printf("Have cleared out all mail queue\n");
 8003026:	481a      	ldr	r0, [pc, #104]	@ (8003090 <StartGSM+0x8d4>)
 8003028:	f008 fcf4 	bl	800ba14 <puts>
									if(count_mail_end_addr > 0){
 800302c:	2e00      	cmp	r6, #0
 800302e:	d0ba      	beq.n	8002fa6 <StartGSM+0x7ea>
										if(start_addr_disconnect == (FLASH_END_ADDRESS - 0x100)){
 8003030:	4a0b      	ldr	r2, [pc, #44]	@ (8003060 <StartGSM+0x8a4>)
 8003032:	6813      	ldr	r3, [r2, #0]
 8003034:	f5b3 4f9e 	cmp.w	r3, #20224	@ 0x4f00
											start_addr_disconnect -= count_mail_end_addr * 128;
 8003038:	bf0d      	iteet	eq
 800303a:	6813      	ldreq	r3, [r2, #0]
											start_addr_disconnect -= (count_mail_end_addr - 1) * 128;
 800303c:	6811      	ldrne	r1, [r2, #0]
 800303e:	f106 33ff 	addne.w	r3, r6, #4294967295
											start_addr_disconnect -= count_mail_end_addr * 128;
 8003042:	eba3 13c6 	subeq.w	r3, r3, r6, lsl #7
											start_addr_disconnect -= (count_mail_end_addr - 1) * 128;
 8003046:	bf18      	it	ne
 8003048:	eba1 13c3 	subne.w	r3, r1, r3, lsl #7
 800304c:	6013      	str	r3, [r2, #0]
 800304e:	e7aa      	b.n	8002fa6 <StartGSM+0x7ea>
									printf("\n--------------------SENDING ERROR -----------------------\n");
 8003050:	4816      	ldr	r0, [pc, #88]	@ (80030ac <StartGSM+0x8f0>)
 8003052:	f008 fcdf 	bl	800ba14 <puts>
									process++;
 8003056:	2608      	movs	r6, #8
									break;
 8003058:	e7bc      	b.n	8002fd4 <StartGSM+0x818>
 800305a:	bf00      	nop
 800305c:	0801110d 	.word	0x0801110d
 8003060:	20001ba0 	.word	0x20001ba0
 8003064:	0801111b 	.word	0x0801111b
 8003068:	20001ba4 	.word	0x20001ba4
 800306c:	0801114d 	.word	0x0801114d
 8003070:	08011199 	.word	0x08011199
 8003074:	20001db8 	.word	0x20001db8
 8003078:	20001b98 	.word	0x20001b98
 800307c:	20002188 	.word	0x20002188
 8003080:	08010fa4 	.word	0x08010fa4
 8003084:	08011204 	.word	0x08011204
 8003088:	080111dd 	.word	0x080111dd
 800308c:	20001dc8 	.word	0x20001dc8
 8003090:	08011016 	.word	0x08011016
 8003094:	20001db4 	.word	0x20001db4
 8003098:	20000000 	.word	0x20000000
 800309c:	0801121b 	.word	0x0801121b
 80030a0:	20001de8 	.word	0x20001de8
 80030a4:	08011251 	.word	0x08011251
 80030a8:	080112a1 	.word	0x080112a1
 80030ac:	08011266 	.word	0x08011266
 80030b0:	20001dc0 	.word	0x20001dc0
 80030b4:	20001dbc 	.word	0x20001dbc
 80030b8:	08010fe3 	.word	0x08010fe3
				int result_close = close_connection(0);
 80030bc:	2000      	movs	r0, #0
 80030be:	f7ff f97d 	bl	80023bc <close_connection>
					memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 80030c2:	f44f 7200 	mov.w	r2, #512	@ 0x200
				if(result_close){
 80030c6:	4601      	mov	r1, r0
 80030c8:	b148      	cbz	r0, 80030de <StartGSM+0x922>
					memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 80030ca:	2100      	movs	r1, #0
 80030cc:	4620      	mov	r0, r4
 80030ce:	f008 fe01 	bl	800bcd4 <memset>
					SIM_UART_ReInitializeRxDMA();
 80030d2:	f7fe f97d 	bl	80013d0 <SIM_UART_ReInitializeRxDMA>
						printf("REOPEN CONNECTION TO SERVER\n");
 80030d6:	4809      	ldr	r0, [pc, #36]	@ (80030fc <StartGSM+0x940>)
 80030d8:	f008 fc9c 	bl	800ba14 <puts>
						process = 4;
 80030dc:	e41b      	b.n	8002916 <StartGSM+0x15a>
					memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 80030de:	4620      	mov	r0, r4
 80030e0:	f008 fdf8 	bl	800bcd4 <memset>
					SIM_UART_ReInitializeRxDMA();
 80030e4:	f7fe f974 	bl	80013d0 <SIM_UART_ReInitializeRxDMA>
					printf("\n ------------------------------ Rebooting SIM module -------------------------\n");
 80030e8:	4805      	ldr	r0, [pc, #20]	@ (8003100 <StartGSM+0x944>)
 80030ea:	f7ff bba6 	b.w	800283a <StartGSM+0x7e>
				else process++;
 80030ee:	2602      	movs	r6, #2
 80030f0:	f7ff bbea 	b.w	80028c8 <StartGSM+0x10c>
						process++;
 80030f4:	2605      	movs	r6, #5
 80030f6:	f7ff bbe7 	b.w	80028c8 <StartGSM+0x10c>
 80030fa:	bf00      	nop
 80030fc:	080112e0 	.word	0x080112e0
 8003100:	080112fc 	.word	0x080112fc

08003104 <initQueue_GSM>:


// Function to initialize the Queue_GSM
void initQueue_GSM(Queue_GSM* q) {
    q->front = 0;
    q->rear = -1;
 8003104:	2300      	movs	r3, #0
 8003106:	f04f 32ff 	mov.w	r2, #4294967295
 800310a:	e9c0 3280 	strd	r3, r2, [r0, #512]	@ 0x200
    q->size = 0;
 800310e:	f8c0 3208 	str.w	r3, [r0, #520]	@ 0x208
}
 8003112:	4770      	bx	lr

08003114 <enqueue_GSM>:
    return q->size == 0;
}

// Function to check if the Queue_GSM is full
int isFull_GSM(Queue_GSM* q) {
    return q->size == MAX_SIZE;
 8003114:	f8d0 2208 	ldr.w	r2, [r0, #520]	@ 0x208
}

// Function to enqueue (add) a uint32_t value to the Queue_GSM
void enqueue_GSM(Queue_GSM* q, uint32_t value) {
    if (isFull_GSM(q)) {
 8003118:	2a80      	cmp	r2, #128	@ 0x80
void enqueue_GSM(Queue_GSM* q, uint32_t value) {
 800311a:	b410      	push	{r4}
    if (isFull_GSM(q)) {
 800311c:	d104      	bne.n	8003128 <enqueue_GSM+0x14>
        printf("Queue_GSM is full\n");
 800311e:	480c      	ldr	r0, [pc, #48]	@ (8003150 <enqueue_GSM+0x3c>)
        return;
    }
    q->rear = (q->rear + 1) % MAX_SIZE; // Circular increment
    q->data[q->rear] = value;
    q->size++;
}
 8003120:	f85d 4b04 	ldr.w	r4, [sp], #4
        printf("Queue_GSM is full\n");
 8003124:	f008 bc76 	b.w	800ba14 <puts>
    q->rear = (q->rear + 1) % MAX_SIZE; // Circular increment
 8003128:	f8d0 3204 	ldr.w	r3, [r0, #516]	@ 0x204
 800312c:	3301      	adds	r3, #1
 800312e:	425c      	negs	r4, r3
 8003130:	f004 047f 	and.w	r4, r4, #127	@ 0x7f
 8003134:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003138:	bf58      	it	pl
 800313a:	4263      	negpl	r3, r4
    q->size++;
 800313c:	3201      	adds	r2, #1
    q->rear = (q->rear + 1) % MAX_SIZE; // Circular increment
 800313e:	f8c0 3204 	str.w	r3, [r0, #516]	@ 0x204
}
 8003142:	f85d 4b04 	ldr.w	r4, [sp], #4
    q->data[q->rear] = value;
 8003146:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
    q->size++;
 800314a:	f8c0 2208 	str.w	r2, [r0, #520]	@ 0x208
}
 800314e:	4770      	bx	lr
 8003150:	0801134c 	.word	0x0801134c

08003154 <clearQueue_GSM>:
    }
    return q->data[q->front];
}

// Function to clear the entire Queue_GSM
void clearQueue_GSM(Queue_GSM* q) {
 8003154:	b510      	push	{r4, lr}
	for (int i = 0; i < MAX_SIZE; i++) {
		q->data[i] = 0; // Clear the data explicitly
 8003156:	f44f 7200 	mov.w	r2, #512	@ 0x200
void clearQueue_GSM(Queue_GSM* q) {
 800315a:	4604      	mov	r4, r0
		q->data[i] = 0; // Clear the data explicitly
 800315c:	2100      	movs	r1, #0
 800315e:	f008 fdb9 	bl	800bcd4 <memset>
	}
    q->front = 0;
    q->rear = -1;
 8003162:	2300      	movs	r3, #0
 8003164:	f04f 32ff 	mov.w	r2, #4294967295
 8003168:	e9c4 3280 	strd	r3, r2, [r4, #512]	@ 0x200
    q->size = 0;
 800316c:	f8c4 3208 	str.w	r3, [r4, #520]	@ 0x208
}
 8003170:	bd10      	pop	{r4, pc}
	...

08003174 <printQueue_GSM>:

// Function to print the Queue_GSM contents (for debugging)
int printQueue_GSM(Queue_GSM* q) {
 8003174:	b570      	push	{r4, r5, r6, lr}
    return q->size == 0;
 8003176:	f8d0 5208 	ldr.w	r5, [r0, #520]	@ 0x208
int printQueue_GSM(Queue_GSM* q) {
 800317a:	4604      	mov	r4, r0
    if (isEmpty_GSM(q)) {
 800317c:	b925      	cbnz	r5, 8003188 <printQueue_GSM+0x14>
        printf("Queue_GSM is empty\n");
 800317e:	4813      	ldr	r0, [pc, #76]	@ (80031cc <printQueue_GSM+0x58>)
 8003180:	f008 fc48 	bl	800ba14 <puts>
        int idx = (q->front + i) % MAX_SIZE;
        printf("Index %d: %08lx\n", i, q->data[idx]);
    }
    printf("\n");
    return q->size;
}
 8003184:	4628      	mov	r0, r5
 8003186:	bd70      	pop	{r4, r5, r6, pc}
    printf("Queue_GSM contents: \n");
 8003188:	4811      	ldr	r0, [pc, #68]	@ (80031d0 <printQueue_GSM+0x5c>)
        printf("Index %d: %08lx\n", i, q->data[idx]);
 800318a:	4e12      	ldr	r6, [pc, #72]	@ (80031d4 <printQueue_GSM+0x60>)
    printf("Queue_GSM contents: \n");
 800318c:	f008 fc42 	bl	800ba14 <puts>
    for (int i = 0; i < q->size; i++) {
 8003190:	2500      	movs	r5, #0
 8003192:	f8d4 3208 	ldr.w	r3, [r4, #520]	@ 0x208
 8003196:	42ab      	cmp	r3, r5
 8003198:	dc05      	bgt.n	80031a6 <printQueue_GSM+0x32>
    printf("\n");
 800319a:	200a      	movs	r0, #10
 800319c:	f008 fbdc 	bl	800b958 <putchar>
    return q->size;
 80031a0:	f8d4 5208 	ldr.w	r5, [r4, #520]	@ 0x208
 80031a4:	e7ee      	b.n	8003184 <printQueue_GSM+0x10>
        int idx = (q->front + i) % MAX_SIZE;
 80031a6:	f8d4 3200 	ldr.w	r3, [r4, #512]	@ 0x200
 80031aa:	442b      	add	r3, r5
 80031ac:	425a      	negs	r2, r3
 80031ae:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80031b2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80031b6:	bf58      	it	pl
 80031b8:	4253      	negpl	r3, r2
        printf("Index %d: %08lx\n", i, q->data[idx]);
 80031ba:	4629      	mov	r1, r5
 80031bc:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
 80031c0:	4630      	mov	r0, r6
 80031c2:	f008 fbb7 	bl	800b934 <iprintf>
    for (int i = 0; i < q->size; i++) {
 80031c6:	3501      	adds	r5, #1
 80031c8:	e7e3      	b.n	8003192 <printQueue_GSM+0x1e>
 80031ca:	bf00      	nop
 80031cc:	0801135e 	.word	0x0801135e
 80031d0:	08011371 	.word	0x08011371
 80031d4:	08011386 	.word	0x08011386

080031d8 <checkAddrExistInQueue>:

// Function to check if an address exists in the Queue_GSM
int checkAddrExistInQueue(uint32_t addr, Queue_GSM* q) {
 80031d8:	b538      	push	{r3, r4, r5, lr}
    for (int i = 0; i < q->size; i++) {
 80031da:	f8d1 5208 	ldr.w	r5, [r1, #520]	@ 0x208
 80031de:	2200      	movs	r2, #0
 80031e0:	4295      	cmp	r5, r2
 80031e2:	dc05      	bgt.n	80031f0 <checkAddrExistInQueue+0x18>
        }
//        if(addr > q->data[idx] && addr < end_addr){
//        	printf("INVALID ADDRESS: %08lx\n", addr);
//        }
    }
    printf("NOT FOUND ADDRESS: %08lx\n", addr);
 80031e4:	4601      	mov	r1, r0
 80031e6:	480d      	ldr	r0, [pc, #52]	@ (800321c <checkAddrExistInQueue+0x44>)
 80031e8:	f008 fba4 	bl	800b934 <iprintf>
    return 0;
 80031ec:	2000      	movs	r0, #0
 80031ee:	e012      	b.n	8003216 <checkAddrExistInQueue+0x3e>
        int idx = (q->front + i) % MAX_SIZE;
 80031f0:	f8d1 3200 	ldr.w	r3, [r1, #512]	@ 0x200
 80031f4:	4413      	add	r3, r2
 80031f6:	425c      	negs	r4, r3
 80031f8:	f004 047f 	and.w	r4, r4, #127	@ 0x7f
 80031fc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003200:	bf58      	it	pl
 8003202:	4263      	negpl	r3, r4
        if (q->data[idx] == addr) {
 8003204:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003208:	4283      	cmp	r3, r0
 800320a:	d105      	bne.n	8003218 <checkAddrExistInQueue+0x40>
            printf("FOUND ADDRESS: %08lx\n", addr);
 800320c:	4601      	mov	r1, r0
 800320e:	4804      	ldr	r0, [pc, #16]	@ (8003220 <checkAddrExistInQueue+0x48>)
 8003210:	f008 fb90 	bl	800b934 <iprintf>
            return 1;
 8003214:	2001      	movs	r0, #1
}
 8003216:	bd38      	pop	{r3, r4, r5, pc}
    for (int i = 0; i < q->size; i++) {
 8003218:	3201      	adds	r2, #1
 800321a:	e7e1      	b.n	80031e0 <checkAddrExistInQueue+0x8>
 800321c:	08011397 	.word	0x08011397
 8003220:	0801139b 	.word	0x0801139b

08003224 <deleteMiddle_GSM>:

// Function to delete a parameter in the middle of the Queue_GSM
void deleteMiddle_GSM(Queue_GSM* q, int indexToDelete) {
 8003224:	b4f0      	push	{r4, r5, r6, r7}
    return q->size == 0;
 8003226:	f8d0 5208 	ldr.w	r5, [r0, #520]	@ 0x208
    if (isEmpty_GSM(q)) {
 800322a:	b91d      	cbnz	r5, 8003234 <deleteMiddle_GSM+0x10>
        printf("Queue_GSM is empty. Nothing to delete.\n");
 800322c:	481f      	ldr	r0, [pc, #124]	@ (80032ac <deleteMiddle_GSM+0x88>)

    // Update rear and size
    q->rear = (q->rear - 1 + MAX_SIZE) % MAX_SIZE;
    q->size--;
    printf("Element at index %d deleted successfully.\n", indexToDelete);
}
 800322e:	bcf0      	pop	{r4, r5, r6, r7}
        printf("Invalid index. Cannot delete.\n");
 8003230:	f008 bbf0 	b.w	800ba14 <puts>
    if (indexToDelete < 0 || indexToDelete >= q->size) {
 8003234:	2900      	cmp	r1, #0
 8003236:	db01      	blt.n	800323c <deleteMiddle_GSM+0x18>
 8003238:	428d      	cmp	r5, r1
 800323a:	dc01      	bgt.n	8003240 <deleteMiddle_GSM+0x1c>
        printf("Invalid index. Cannot delete.\n");
 800323c:	481c      	ldr	r0, [pc, #112]	@ (80032b0 <deleteMiddle_GSM+0x8c>)
 800323e:	e7f6      	b.n	800322e <deleteMiddle_GSM+0xa>
    int actualIndex = (q->front + indexToDelete) % MAX_SIZE;
 8003240:	f8d0 3200 	ldr.w	r3, [r0, #512]	@ 0x200
 8003244:	440b      	add	r3, r1
 8003246:	425a      	negs	r2, r3
 8003248:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800324c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
    for (int i = 0; i < q->size - 1; i++) {
 8003250:	f04f 0600 	mov.w	r6, #0
    int actualIndex = (q->front + indexToDelete) % MAX_SIZE;
 8003254:	bf58      	it	pl
 8003256:	4253      	negpl	r3, r2
    for (int i = 0; i < q->size - 1; i++) {
 8003258:	3d01      	subs	r5, #1
 800325a:	42b5      	cmp	r5, r6
 800325c:	dc0f      	bgt.n	800327e <deleteMiddle_GSM+0x5a>
    q->rear = (q->rear - 1 + MAX_SIZE) % MAX_SIZE;
 800325e:	f8d0 3204 	ldr.w	r3, [r0, #516]	@ 0x204
 8003262:	337f      	adds	r3, #127	@ 0x7f
 8003264:	425a      	negs	r2, r3
 8003266:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800326a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800326e:	bf58      	it	pl
 8003270:	4253      	negpl	r3, r2
    q->size--;
 8003272:	e9c0 3581 	strd	r3, r5, [r0, #516]	@ 0x204
}
 8003276:	bcf0      	pop	{r4, r5, r6, r7}
    printf("Element at index %d deleted successfully.\n", indexToDelete);
 8003278:	480e      	ldr	r0, [pc, #56]	@ (80032b4 <deleteMiddle_GSM+0x90>)
 800327a:	f008 bb5b 	b.w	800b934 <iprintf>
        int currentIdx = (actualIndex + i) % MAX_SIZE;
 800327e:	199a      	adds	r2, r3, r6
 8003280:	4254      	negs	r4, r2
 8003282:	f004 047f 	and.w	r4, r4, #127	@ 0x7f
 8003286:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800328a:	bf58      	it	pl
 800328c:	4262      	negpl	r2, r4
        int nextIdx = (currentIdx + 1) % MAX_SIZE;
 800328e:	1c54      	adds	r4, r2, #1
 8003290:	4267      	negs	r7, r4
 8003292:	f007 077f 	and.w	r7, r7, #127	@ 0x7f
 8003296:	f004 047f 	and.w	r4, r4, #127	@ 0x7f
 800329a:	bf58      	it	pl
 800329c:	427c      	negpl	r4, r7
    for (int i = 0; i < q->size - 1; i++) {
 800329e:	3601      	adds	r6, #1
        q->data[currentIdx] = q->data[nextIdx];
 80032a0:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
 80032a4:	f840 4022 	str.w	r4, [r0, r2, lsl #2]
    for (int i = 0; i < q->size - 1; i++) {
 80032a8:	e7d7      	b.n	800325a <deleteMiddle_GSM+0x36>
 80032aa:	bf00      	nop
 80032ac:	080113b1 	.word	0x080113b1
 80032b0:	080113d8 	.word	0x080113d8
 80032b4:	080113f6 	.word	0x080113f6

080032b8 <RingBufferDmaU8_initUSARTRx>:
// int daychange = 0;

uint8_t message1[] = "Hello from DSS\n";

void RingBufferDmaU8_initUSARTRx(RingBufferDmaU8_TypeDef* ring, UART_HandleTypeDef* husart, uint8_t* buffer, uint16_t size) // cai dat dma
{
 80032b8:	b410      	push	{r4}
 80032ba:	4604      	mov	r4, r0
 80032bc:	4608      	mov	r0, r1
  ring->buffer = buffer;
  ring->size = size;
 80032be:	80a3      	strh	r3, [r4, #4]
{
 80032c0:	4611      	mov	r1, r2
 80032c2:	461a      	mov	r2, r3
  ring->tailPtr = buffer;
  ring->dmaHandle = husart->hdmarx;
 80032c4:	6f43      	ldr	r3, [r0, #116]	@ 0x74
  ring->buffer = buffer;
 80032c6:	6021      	str	r1, [r4, #0]
  ring->tailPtr = buffer;
 80032c8:	60a1      	str	r1, [r4, #8]
  ring->dmaHandle = husart->hdmarx;
 80032ca:	60e3      	str	r3, [r4, #12]
  HAL_UART_Receive_DMA(husart, buffer, size);
}
 80032cc:	f85d 4b04 	ldr.w	r4, [sp], #4
  HAL_UART_Receive_DMA(husart, buffer, size);
 80032d0:	f004 be54 	b.w	8007f7c <HAL_UART_Receive_DMA>

080032d4 <set_time>:
#include "RTC.h"
#include "system_management.h"
#include "spi_flash.h"

void set_time (uint8_t hr, uint8_t min, uint8_t sec)
{
 80032d4:	b570      	push	{r4, r5, r6, lr}
 80032d6:	b086      	sub	sp, #24
 80032d8:	4606      	mov	r6, r0
 80032da:	460d      	mov	r5, r1
 80032dc:	4614      	mov	r4, r2
	RTC_TimeTypeDef sTime = {0};
 80032de:	2100      	movs	r1, #0
 80032e0:	2211      	movs	r2, #17
 80032e2:	f10d 0007 	add.w	r0, sp, #7
 80032e6:	f008 fcf5 	bl	800bcd4 <memset>
	sTime.Hours = hr;
	sTime.Minutes = min;
	sTime.Seconds = sec;
	sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
	sTime.StoreOperation = RTC_STOREOPERATION_RESET;
	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 80032ea:	4808      	ldr	r0, [pc, #32]	@ (800330c <set_time+0x38>)
	sTime.Hours = hr;
 80032ec:	f88d 6004 	strb.w	r6, [sp, #4]
	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 80032f0:	2200      	movs	r2, #0
 80032f2:	a901      	add	r1, sp, #4
	sTime.Minutes = min;
 80032f4:	f88d 5005 	strb.w	r5, [sp, #5]
	sTime.Seconds = sec;
 80032f8:	f88d 4006 	strb.w	r4, [sp, #6]
	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 80032fc:	f003 fad8 	bl	80068b0 <HAL_RTC_SetTime>
 8003300:	b108      	cbz	r0, 8003306 <set_time+0x32>
	{
		Error_Handler();
 8003302:	f000 fb7c 	bl	80039fe <Error_Handler>
	}
}
 8003306:	b006      	add	sp, #24
 8003308:	bd70      	pop	{r4, r5, r6, pc}
 800330a:	bf00      	nop
 800330c:	20002560 	.word	0x20002560

08003310 <set_date>:

void set_date (uint8_t year, uint8_t month, uint8_t date)  // monday = 1
{
 8003310:	b507      	push	{r0, r1, r2, lr}
	RTC_DateTypeDef sDate = {0};
 8003312:	2300      	movs	r3, #0
	sDate.Month = month;
 8003314:	f88d 1005 	strb.w	r1, [sp, #5]
	sDate.Date = date;
 8003318:	f88d 2006 	strb.w	r2, [sp, #6]
	sDate.Year = year;
 800331c:	f88d 0007 	strb.w	r0, [sp, #7]
	if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8003320:	461a      	mov	r2, r3
 8003322:	4806      	ldr	r0, [pc, #24]	@ (800333c <set_date+0x2c>)
	RTC_DateTypeDef sDate = {0};
 8003324:	f88d 3004 	strb.w	r3, [sp, #4]
	if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8003328:	a901      	add	r1, sp, #4
 800332a:	f003 fb1b 	bl	8006964 <HAL_RTC_SetDate>
 800332e:	b108      	cbz	r0, 8003334 <set_date+0x24>
	{
		Error_Handler();
 8003330:	f000 fb65 	bl	80039fe <Error_Handler>
	}
}
 8003334:	b003      	add	sp, #12
 8003336:	f85d fb04 	ldr.w	pc, [sp], #4
 800333a:	bf00      	nop
 800333c:	20002560 	.word	0x20002560

08003340 <get_RTC_time_date>:

void get_RTC_time_date(RMCSTRUCT *rmc)
{
 8003340:	b530      	push	{r4, r5, lr}
	RTC_DateTypeDef gDate;
	RTC_TimeTypeDef gTime;

	  /* Get the RTC current Time */
	HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BIN);
 8003342:	4d19      	ldr	r5, [pc, #100]	@ (80033a8 <get_RTC_time_date+0x68>)
{
 8003344:	b087      	sub	sp, #28
 8003346:	4604      	mov	r4, r0
	HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BIN);
 8003348:	a901      	add	r1, sp, #4
 800334a:	2200      	movs	r2, #0
 800334c:	4628      	mov	r0, r5
 800334e:	f003 fb59 	bl	8006a04 <HAL_RTC_GetTime>
	/* Get the RTC current Date */
	HAL_RTC_GetDate(&hrtc, &gDate, RTC_FORMAT_BIN);
 8003352:	4669      	mov	r1, sp
 8003354:	2200      	movs	r2, #0
 8003356:	4628      	mov	r0, r5
 8003358:	f003 fb77 	bl	8006a4a <HAL_RTC_GetDate>

  /* Display time Format: hh:mm:ss */
  /* Format time as "HH:MM:SS" */
	printf("%02d:%02d:%02d\n", gTime.Hours, gTime.Minutes, gTime.Seconds);
 800335c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8003360:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8003364:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8003368:	4810      	ldr	r0, [pc, #64]	@ (80033ac <get_RTC_time_date+0x6c>)
 800336a:	f008 fae3 	bl	800b934 <iprintf>

	/* Format date as "YYYY-MM-DD" */
	printf("20%02d-%02d-%02d\n", gDate.Year, gDate.Month, gDate.Date);
 800336e:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8003372:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8003376:	f89d 1003 	ldrb.w	r1, [sp, #3]
 800337a:	480d      	ldr	r0, [pc, #52]	@ (80033b0 <get_RTC_time_date+0x70>)
 800337c:	f008 fada 	bl	800b934 <iprintf>

	rmc->date.Yr = gDate.Year;
 8003380:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8003384:	61a3      	str	r3, [r4, #24]
	rmc->date.Mon = gDate.Month;
 8003386:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800338a:	6163      	str	r3, [r4, #20]
	rmc->date.Day = gDate.Date;
 800338c:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8003390:	6123      	str	r3, [r4, #16]
	rmc->tim.hour = gTime.Hours;
 8003392:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8003396:	6023      	str	r3, [r4, #0]
	rmc->tim.min = gTime.Minutes;
 8003398:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800339c:	6063      	str	r3, [r4, #4]
	rmc->tim.sec = gTime.Seconds;
 800339e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80033a2:	60a3      	str	r3, [r4, #8]

	//save_rmc_to_location_info(location_info);
//	snprintf((char*)output_buffer, 128, "Time to GMT+8 saved to RMC: 20%02d/%02d/%02d, %02d:%02d:%02d\n", rmc->date.Yr, rmc->date.Mon, rmc->date.Day, rmc->tim.hour, rmc->tim.min, rmc->tim.sec);
//	uart_transmit_string(&huart1, (uint8_t*) output_buffer);
}
 80033a4:	b007      	add	sp, #28
 80033a6:	bd30      	pop	{r4, r5, pc}
 80033a8:	20002560 	.word	0x20002560
 80033ac:	08010732 	.word	0x08010732
 80033b0:	08011421 	.word	0x08011421

080033b4 <vApplicationGetIdleTaskMemory>:
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80033b4:	4b03      	ldr	r3, [pc, #12]	@ (80033c4 <vApplicationGetIdleTaskMemory+0x10>)
 80033b6:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80033b8:	4b03      	ldr	r3, [pc, #12]	@ (80033c8 <vApplicationGetIdleTaskMemory+0x14>)
 80033ba:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80033bc:	2340      	movs	r3, #64	@ 0x40
 80033be:	6013      	str	r3, [r2, #0]
  /* place for user code */
}
 80033c0:	4770      	bx	lr
 80033c2:	bf00      	nop
 80033c4:	200020e8 	.word	0x200020e8
 80033c8:	20001fe8 	.word	0x20001fe8

080033cc <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 80033cc:	b507      	push	{r0, r1, r2, lr}
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 1000);
 80033ce:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
{
 80033d2:	9001      	str	r0, [sp, #4]
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 1000);
 80033d4:	2201      	movs	r2, #1
 80033d6:	a901      	add	r1, sp, #4
 80033d8:	4803      	ldr	r0, [pc, #12]	@ (80033e8 <__io_putchar+0x1c>)
 80033da:	f004 fca9 	bl	8007d30 <HAL_UART_Transmit>
  return ch;
}
 80033de:	9801      	ldr	r0, [sp, #4]
 80033e0:	b003      	add	sp, #12
 80033e2:	f85d fb04 	ldr.w	pc, [sp], #4
 80033e6:	bf00      	nop
 80033e8:	200023c4 	.word	0x200023c4

080033ec <Initialize_RTC>:


void Initialize_RTC(void) {
    // Enable Power Clock
    __HAL_RCC_PWR_CLK_ENABLE();
 80033ec:	4b21      	ldr	r3, [pc, #132]	@ (8003474 <Initialize_RTC+0x88>)
void Initialize_RTC(void) {
 80033ee:	b570      	push	{r4, r5, r6, lr}
    __HAL_RCC_PWR_CLK_ENABLE();
 80033f0:	69da      	ldr	r2, [r3, #28]

    // Allow access to the backup domain
    hrtc.Instance = RTC;
 80033f2:	4c21      	ldr	r4, [pc, #132]	@ (8003478 <Initialize_RTC+0x8c>)
 80033f4:	4e21      	ldr	r6, [pc, #132]	@ (800347c <Initialize_RTC+0x90>)
    __HAL_RCC_PWR_CLK_ENABLE();
 80033f6:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80033fa:	61da      	str	r2, [r3, #28]
 80033fc:	69db      	ldr	r3, [r3, #28]
    hrtc.Instance = RTC;
 80033fe:	6026      	str	r6, [r4, #0]
void Initialize_RTC(void) {
 8003400:	b088      	sub	sp, #32
    __HAL_RCC_PWR_CLK_ENABLE();
 8003402:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003406:	9301      	str	r3, [sp, #4]
 8003408:	9b01      	ldr	r3, [sp, #4]
    HAL_PWR_EnableBkUpAccess();
 800340a:	f002 fd35 	bl	8005e78 <HAL_PWR_EnableBkUpAccess>
    if (HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR1) != RTC_INIT_FLAG) {
 800340e:	2101      	movs	r1, #1
 8003410:	4620      	mov	r0, r4
 8003412:	f003 fb3c 	bl	8006a8e <HAL_RTCEx_BKUPRead>
 8003416:	f243 25f2 	movw	r5, #13042	@ 0x32f2
 800341a:	42a8      	cmp	r0, r5
 800341c:	d01a      	beq.n	8003454 <Initialize_RTC+0x68>
    	printf("\n--------------------------------------------- FIRST TIME RTC INITIALISATION ----------------------------------------------\n");
 800341e:	4818      	ldr	r0, [pc, #96]	@ (8003480 <Initialize_RTC+0x94>)
 8003420:	f008 faf8 	bl	800ba14 <puts>

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
  hrtc.Init.AsynchPrediv = 127;
 8003424:	2300      	movs	r3, #0
 8003426:	227f      	movs	r2, #127	@ 0x7f
 8003428:	e9c4 3201 	strd	r3, r2, [r4, #4]
  hrtc.Init.SynchPrediv = 255;
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800342c:	4620      	mov	r0, r4
  hrtc.Init.SynchPrediv = 255;
 800342e:	22ff      	movs	r2, #255	@ 0xff
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8003430:	e9c4 2303 	strd	r2, r3, [r4, #12]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8003434:	e9c4 3305 	strd	r3, r3, [r4, #20]
  hrtc.Instance = RTC;
 8003438:	6026      	str	r6, [r4, #0]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800343a:	f003 f9e6 	bl	800680a <HAL_RTC_Init>
 800343e:	b108      	cbz	r0, 8003444 <Initialize_RTC+0x58>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003440:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003442:	e7fe      	b.n	8003442 <Initialize_RTC+0x56>
        HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, RTC_INIT_FLAG);  // Store initialization flag
 8003444:	462a      	mov	r2, r5
 8003446:	2101      	movs	r1, #1
 8003448:	4620      	mov	r0, r4
}
 800344a:	b008      	add	sp, #32
 800344c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, RTC_INIT_FLAG);  // Store initialization flag
 8003450:	f003 bb18 	b.w	8006a84 <HAL_RTCEx_BKUPWrite>
    	printf("\n-------------------------------------------- BACK UP RTC:  GETTING RTC FROM BACK UP ----------------------------------------\n");
 8003454:	480b      	ldr	r0, [pc, #44]	@ (8003484 <Initialize_RTC+0x98>)
 8003456:	f008 fadd 	bl	800ba14 <puts>
        HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 800345a:	a903      	add	r1, sp, #12
 800345c:	2200      	movs	r2, #0
 800345e:	4620      	mov	r0, r4
 8003460:	f003 fad0 	bl	8006a04 <HAL_RTC_GetTime>
        HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8003464:	2200      	movs	r2, #0
 8003466:	a902      	add	r1, sp, #8
 8003468:	4620      	mov	r0, r4
 800346a:	f003 faee 	bl	8006a4a <HAL_RTC_GetDate>
}
 800346e:	b008      	add	sp, #32
 8003470:	bd70      	pop	{r4, r5, r6, pc}
 8003472:	bf00      	nop
 8003474:	40021000 	.word	0x40021000
 8003478:	20002560 	.word	0x20002560
 800347c:	40002800 	.word	0x40002800
 8003480:	08011433 	.word	0x08011433
 8003484:	080114af 	.word	0x080114af

08003488 <SystemClock_Config>:
{
 8003488:	b500      	push	{lr}
 800348a:	b09f      	sub	sp, #124	@ 0x7c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800348c:	2228      	movs	r2, #40	@ 0x28
 800348e:	2100      	movs	r1, #0
 8003490:	a805      	add	r0, sp, #20
 8003492:	f008 fc1f 	bl	800bcd4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003496:	2214      	movs	r2, #20
 8003498:	2100      	movs	r1, #0
 800349a:	4668      	mov	r0, sp
 800349c:	f008 fc1a 	bl	800bcd4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80034a0:	223c      	movs	r2, #60	@ 0x3c
 80034a2:	2100      	movs	r1, #0
 80034a4:	eb0d 0002 	add.w	r0, sp, r2
 80034a8:	f008 fc14 	bl	800bcd4 <memset>
  HAL_PWR_EnableBkUpAccess();
 80034ac:	f002 fce4 	bl	8005e78 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80034b0:	4a1d      	ldr	r2, [pc, #116]	@ (8003528 <SystemClock_Config+0xa0>)
 80034b2:	6a13      	ldr	r3, [r2, #32]
 80034b4:	f023 0318 	bic.w	r3, r3, #24
 80034b8:	6213      	str	r3, [r2, #32]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 80034ba:	2306      	movs	r3, #6
 80034bc:	9305      	str	r3, [sp, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80034be:	2301      	movs	r3, #1
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80034c0:	e9cd 3308 	strd	r3, r3, [sp, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80034c4:	2310      	movs	r3, #16
 80034c6:	930a      	str	r3, [sp, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80034c8:	2002      	movs	r0, #2
 80034ca:	2300      	movs	r3, #0
 80034cc:	e9cd 030c 	strd	r0, r3, [sp, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 80034d0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80034d4:	a805      	add	r0, sp, #20
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 80034d6:	930e      	str	r3, [sp, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80034d8:	f002 fcd6 	bl	8005e88 <HAL_RCC_OscConfig>
 80034dc:	4601      	mov	r1, r0
 80034de:	b108      	cbz	r0, 80034e4 <SystemClock_Config+0x5c>
 80034e0:	b672      	cpsid	i
  while (1)
 80034e2:	e7fe      	b.n	80034e2 <SystemClock_Config+0x5a>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80034e4:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80034e6:	e9cd 3000 	strd	r3, r0, [sp]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80034ea:	e9cd 0002 	strd	r0, r0, [sp, #8]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80034ee:	9004      	str	r0, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80034f0:	4668      	mov	r0, sp
 80034f2:	f002 ff49 	bl	8006388 <HAL_RCC_ClockConfig>
 80034f6:	b108      	cbz	r0, 80034fc <SystemClock_Config+0x74>
 80034f8:	b672      	cpsid	i
  while (1)
 80034fa:	e7fe      	b.n	80034fa <SystemClock_Config+0x72>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 80034fc:	4b0b      	ldr	r3, [pc, #44]	@ (800352c <SystemClock_Config+0xa4>)
 80034fe:	930f      	str	r3, [sp, #60]	@ 0x3c
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003500:	e9cd 0011 	strd	r0, r0, [sp, #68]	@ 0x44
  PeriphClkInit.Adc34ClockSelection = RCC_ADC34PLLCLK_DIV1;
 8003504:	f44f 7380 	mov.w	r3, #256	@ 0x100
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8003508:	9013      	str	r0, [sp, #76]	@ 0x4c
  PeriphClkInit.Adc34ClockSelection = RCC_ADC34PLLCLK_DIV1;
 800350a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800350e:	a80f      	add	r0, sp, #60	@ 0x3c
  PeriphClkInit.Adc34ClockSelection = RCC_ADC34PLLCLK_DIV1;
 8003510:	e9cd 3218 	strd	r3, r2, [sp, #96]	@ 0x60
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8003514:	9310      	str	r3, [sp, #64]	@ 0x40
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003516:	f003 f82d 	bl	8006574 <HAL_RCCEx_PeriphCLKConfig>
 800351a:	b108      	cbz	r0, 8003520 <SystemClock_Config+0x98>
 800351c:	b672      	cpsid	i
  while (1)
 800351e:	e7fe      	b.n	800351e <SystemClock_Config+0x96>
}
 8003520:	b01f      	add	sp, #124	@ 0x7c
 8003522:	f85d fb04 	ldr.w	pc, [sp], #4
 8003526:	bf00      	nop
 8003528:	40021000 	.word	0x40021000
 800352c:	00010187 	.word	0x00010187

08003530 <main>:
{
 8003530:	b580      	push	{r7, lr}
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003532:	4dbd      	ldr	r5, [pc, #756]	@ (8003828 <main+0x2f8>)
{
 8003534:	b0a8      	sub	sp, #160	@ 0xa0
  HAL_Init();
 8003536:	f001 fd3b 	bl	8004fb0 <HAL_Init>
  SystemClock_Config();
 800353a:	f7ff ffa5 	bl	8003488 <SystemClock_Config>
  	Initialize_RTC();
 800353e:	f7ff ff55 	bl	80033ec <Initialize_RTC>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003542:	2214      	movs	r2, #20
 8003544:	2100      	movs	r1, #0
 8003546:	a821      	add	r0, sp, #132	@ 0x84
 8003548:	f008 fbc4 	bl	800bcd4 <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800354c:	696b      	ldr	r3, [r5, #20]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
 800354e:	48b7      	ldr	r0, [pc, #732]	@ (800382c <main+0x2fc>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003550:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003554:	616b      	str	r3, [r5, #20]
 8003556:	696b      	ldr	r3, [r5, #20]
 8003558:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800355c:	9305      	str	r3, [sp, #20]
 800355e:	9b05      	ldr	r3, [sp, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003560:	696b      	ldr	r3, [r5, #20]
 8003562:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003566:	616b      	str	r3, [r5, #20]
 8003568:	696b      	ldr	r3, [r5, #20]
 800356a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800356e:	9306      	str	r3, [sp, #24]
 8003570:	9b06      	ldr	r3, [sp, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003572:	696b      	ldr	r3, [r5, #20]
 8003574:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003578:	616b      	str	r3, [r5, #20]
 800357a:	696b      	ldr	r3, [r5, #20]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
 800357c:	2201      	movs	r2, #1
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800357e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
 8003582:	4611      	mov	r1, r2
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003584:	9307      	str	r3, [sp, #28]
 8003586:	9b07      	ldr	r3, [sp, #28]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
 8003588:	f002 fc70 	bl	8005e6c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_6
 800358c:	48a7      	ldr	r0, [pc, #668]	@ (800382c <main+0x2fc>)
 800358e:	2200      	movs	r2, #0
 8003590:	f240 3156 	movw	r1, #854	@ 0x356
 8003594:	f002 fc6a 	bl	8005e6c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 8003598:	48a5      	ldr	r0, [pc, #660]	@ (8003830 <main+0x300>)
 800359a:	2200      	movs	r2, #0
 800359c:	2104      	movs	r1, #4
 800359e:	f002 fc65 	bl	8005e6c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 80035a2:	48a3      	ldr	r0, [pc, #652]	@ (8003830 <main+0x300>)
 80035a4:	2201      	movs	r2, #1
 80035a6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80035aa:	f002 fc5f 	bl	8005e6c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
 80035ae:	2201      	movs	r2, #1
 80035b0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80035b4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035b8:	2400      	movs	r4, #0
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
 80035ba:	f002 fc57 	bl	8005e6c <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80035be:	2601      	movs	r6, #1
 80035c0:	f240 2303 	movw	r3, #515	@ 0x203
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80035c4:	4899      	ldr	r0, [pc, #612]	@ (800382c <main+0x2fc>)
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80035c6:	9623      	str	r6, [sp, #140]	@ 0x8c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80035c8:	a921      	add	r1, sp, #132	@ 0x84
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80035ca:	e9cd 3621 	strd	r3, r6, [sp, #132]	@ 0x84
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035ce:	9424      	str	r4, [sp, #144]	@ 0x90
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80035d0:	f002 fb88 	bl	8005ce4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_8;
 80035d4:	f44f 73aa 	mov.w	r3, #340	@ 0x154
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80035d8:	4894      	ldr	r0, [pc, #592]	@ (800382c <main+0x2fc>)
 80035da:	a921      	add	r1, sp, #132	@ 0x84
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80035dc:	e9cd 3621 	strd	r3, r6, [sp, #132]	@ 0x84
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80035e0:	f04f 0802 	mov.w	r8, #2
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035e4:	e9cd 4423 	strd	r4, r4, [sp, #140]	@ 0x8c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80035e8:	f002 fb7c 	bl	8005ce4 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80035ec:	4890      	ldr	r0, [pc, #576]	@ (8003830 <main+0x300>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035ee:	9423      	str	r4, [sp, #140]	@ 0x8c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80035f0:	a921      	add	r1, sp, #132	@ 0x84
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80035f2:	e9cd 8421 	strd	r8, r4, [sp, #132]	@ 0x84
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80035f6:	2704      	movs	r7, #4
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80035f8:	f002 fb74 	bl	8005ce4 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80035fc:	488c      	ldr	r0, [pc, #560]	@ (8003830 <main+0x300>)
 80035fe:	a921      	add	r1, sp, #132	@ 0x84
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003600:	f04f 0a03 	mov.w	sl, #3
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003604:	e9cd 7621 	strd	r7, r6, [sp, #132]	@ 0x84
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003608:	e9cd 4423 	strd	r4, r4, [sp, #140]	@ 0x8c
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 800360c:	f44f 5980 	mov.w	r9, #4096	@ 0x1000
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003610:	f002 fb68 	bl	8005ce4 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003614:	4886      	ldr	r0, [pc, #536]	@ (8003830 <main+0x300>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003616:	f8cd a090 	str.w	sl, [sp, #144]	@ 0x90
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800361a:	a921      	add	r1, sp, #132	@ 0x84
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800361c:	e9cd 9621 	strd	r9, r6, [sp, #132]	@ 0x84
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003620:	9623      	str	r6, [sp, #140]	@ 0x8c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003622:	f002 fb5f 	bl	8005ce4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8003626:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800362a:	a921      	add	r1, sp, #132	@ 0x84
 800362c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003630:	e9cd 3621 	strd	r3, r6, [sp, #132]	@ 0x84
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003634:	e9cd 6a23 	strd	r6, sl, [sp, #140]	@ 0x8c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003638:	f002 fb54 	bl	8005ce4 <HAL_GPIO_Init>
  __HAL_RCC_DMA1_CLK_ENABLE();
 800363c:	696b      	ldr	r3, [r5, #20]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800363e:	f8df a218 	ldr.w	sl, [pc, #536]	@ 8003858 <main+0x328>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003642:	4333      	orrs	r3, r6
 8003644:	616b      	str	r3, [r5, #20]
 8003646:	696b      	ldr	r3, [r5, #20]
 8003648:	4033      	ands	r3, r6
 800364a:	9303      	str	r3, [sp, #12]
 800364c:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_DMA2_CLK_ENABLE();
 800364e:	696b      	ldr	r3, [r5, #20]
 8003650:	ea43 0308 	orr.w	r3, r3, r8
 8003654:	616b      	str	r3, [r5, #20]
 8003656:	696b      	ldr	r3, [r5, #20]
 8003658:	ea03 0308 	and.w	r3, r3, r8
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 5, 0);
 800365c:	4622      	mov	r2, r4
 800365e:	2105      	movs	r1, #5
  __HAL_RCC_DMA2_CLK_ENABLE();
 8003660:	9304      	str	r3, [sp, #16]
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 5, 0);
 8003662:	200d      	movs	r0, #13
  __HAL_RCC_DMA2_CLK_ENABLE();
 8003664:	9b04      	ldr	r3, [sp, #16]
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 5, 0);
 8003666:	f002 fa19 	bl	8005a9c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 800366a:	200d      	movs	r0, #13
 800366c:	f002 fa48 	bl	8005b00 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 5, 0);
 8003670:	4622      	mov	r2, r4
 8003672:	2105      	movs	r1, #5
 8003674:	200e      	movs	r0, #14
 8003676:	f002 fa11 	bl	8005a9c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 800367a:	200e      	movs	r0, #14
 800367c:	f002 fa40 	bl	8005b00 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 5, 0);
 8003680:	4622      	mov	r2, r4
 8003682:	2105      	movs	r1, #5
 8003684:	200f      	movs	r0, #15
 8003686:	f002 fa09 	bl	8005a9c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 800368a:	200f      	movs	r0, #15
 800368c:	f002 fa38 	bl	8005b00 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 5, 0);
 8003690:	4622      	mov	r2, r4
 8003692:	2105      	movs	r1, #5
 8003694:	2010      	movs	r0, #16
 8003696:	f002 fa01 	bl	8005a9c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 800369a:	2010      	movs	r0, #16
 800369c:	f002 fa30 	bl	8005b00 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Channel1_IRQn, 5, 0);
 80036a0:	4622      	mov	r2, r4
 80036a2:	2105      	movs	r1, #5
 80036a4:	2038      	movs	r0, #56	@ 0x38
 80036a6:	f002 f9f9 	bl	8005a9c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 80036aa:	2038      	movs	r0, #56	@ 0x38
 80036ac:	f002 fa28 	bl	8005b00 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Channel5_IRQn, 5, 0);
 80036b0:	4622      	mov	r2, r4
 80036b2:	2105      	movs	r1, #5
 80036b4:	203c      	movs	r0, #60	@ 0x3c
 80036b6:	f002 f9f1 	bl	8005a9c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel5_IRQn);
 80036ba:	203c      	movs	r0, #60	@ 0x3c
 80036bc:	f002 fa20 	bl	8005b00 <HAL_NVIC_EnableIRQ>
  hspi1.Instance = SPI1;
 80036c0:	485c      	ldr	r0, [pc, #368]	@ (8003834 <main+0x304>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80036c2:	f44f 7382 	mov.w	r3, #260	@ 0x104
 80036c6:	e9c0 a300 	strd	sl, r3, [r0]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80036ca:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80036ce:	e9c0 3403 	strd	r3, r4, [r0, #12]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80036d2:	2510      	movs	r5, #16
 80036d4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80036d8:	e9c0 3506 	strd	r3, r5, [r0, #24]
  hspi1.Init.CRCPolynomial = 7;
 80036dc:	2307      	movs	r3, #7
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80036de:	e9c0 340b 	strd	r3, r4, [r0, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80036e2:	2308      	movs	r3, #8
 80036e4:	6343      	str	r3, [r0, #52]	@ 0x34
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80036e6:	e9c0 4408 	strd	r4, r4, [r0, #32]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80036ea:	6084      	str	r4, [r0, #8]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80036ec:	6144      	str	r4, [r0, #20]
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80036ee:	6284      	str	r4, [r0, #40]	@ 0x28
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80036f0:	f003 fae1 	bl	8006cb6 <HAL_SPI_Init>
 80036f4:	4603      	mov	r3, r0
 80036f6:	b108      	cbz	r0, 80036fc <main+0x1cc>
 80036f8:	b672      	cpsid	i
  while (1)
 80036fa:	e7fe      	b.n	80036fa <main+0x1ca>
  huart1.Instance = USART1;
 80036fc:	484e      	ldr	r0, [pc, #312]	@ (8003838 <main+0x308>)
  huart1.Init.BaudRate = 115200;
 80036fe:	4a4f      	ldr	r2, [pc, #316]	@ (800383c <main+0x30c>)
  huart1.Init.Parity = UART_PARITY_NONE;
 8003700:	6103      	str	r3, [r0, #16]
  huart1.Init.BaudRate = 115200;
 8003702:	f44f 34e1 	mov.w	r4, #115200	@ 0x1c200
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003706:	f04f 0a0c 	mov.w	sl, #12
  huart1.Init.StopBits = UART_STOPBITS_1;
 800370a:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800370e:	e9c0 a305 	strd	sl, r3, [r0, #20]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003712:	e9c0 3307 	strd	r3, r3, [r0, #28]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003716:	6243      	str	r3, [r0, #36]	@ 0x24
  huart1.Init.BaudRate = 115200;
 8003718:	e9c0 2400 	strd	r2, r4, [r0]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800371c:	f004 fbb2 	bl	8007e84 <HAL_UART_Init>
 8003720:	4603      	mov	r3, r0
 8003722:	b108      	cbz	r0, 8003728 <main+0x1f8>
 8003724:	b672      	cpsid	i
  while (1)
 8003726:	e7fe      	b.n	8003726 <main+0x1f6>
  huart2.Instance = USART2;
 8003728:	4845      	ldr	r0, [pc, #276]	@ (8003840 <main+0x310>)
  huart2.Init.BaudRate = 9600;
 800372a:	f8df e130 	ldr.w	lr, [pc, #304]	@ 800385c <main+0x32c>
 800372e:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003732:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003736:	e9c0 3a04 	strd	r3, sl, [r0, #16]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800373a:	e9c0 3306 	strd	r3, r3, [r0, #24]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800373e:	e9c0 3308 	strd	r3, r3, [r0, #32]
  huart2.Init.BaudRate = 9600;
 8003742:	e9c0 e200 	strd	lr, r2, [r0]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003746:	f004 fb9d 	bl	8007e84 <HAL_UART_Init>
 800374a:	4603      	mov	r3, r0
 800374c:	b108      	cbz	r0, 8003752 <main+0x222>
 800374e:	b672      	cpsid	i
  while (1)
 8003750:	e7fe      	b.n	8003750 <main+0x220>
  huart3.Instance = USART3;
 8003752:	483c      	ldr	r0, [pc, #240]	@ (8003844 <main+0x314>)
 8003754:	4a3c      	ldr	r2, [pc, #240]	@ (8003848 <main+0x318>)
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003756:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart3.Init.BaudRate = 115200;
 800375a:	e9c0 2400 	strd	r2, r4, [r0]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800375e:	e9c0 3a04 	strd	r3, sl, [r0, #16]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003762:	e9c0 3306 	strd	r3, r3, [r0, #24]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003766:	e9c0 3308 	strd	r3, r3, [r0, #32]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800376a:	f004 fb8b 	bl	8007e84 <HAL_UART_Init>
 800376e:	4604      	mov	r4, r0
 8003770:	b108      	cbz	r0, 8003776 <main+0x246>
 8003772:	b672      	cpsid	i
  while (1)
 8003774:	e7fe      	b.n	8003774 <main+0x244>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003776:	462a      	mov	r2, r5
 8003778:	4601      	mov	r1, r0
 800377a:	a821      	add	r0, sp, #132	@ 0x84
 800377c:	f008 faaa 	bl	800bcd4 <memset>
  htim3.Instance = TIM3;
 8003780:	4d32      	ldr	r5, [pc, #200]	@ (800384c <main+0x31c>)
  htim3.Init.Prescaler = 8000;
 8003782:	f8df c0dc 	ldr.w	ip, [pc, #220]	@ 8003860 <main+0x330>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003786:	941c      	str	r4, [sp, #112]	@ 0x70
  htim3.Init.Prescaler = 8000;
 8003788:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 800378c:	e9c5 c300 	strd	ip, r3, [r5]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003790:	4628      	mov	r0, r5
  htim3.Init.Period = 65535;
 8003792:	f64f 73ff 	movw	r3, #65535	@ 0xffff
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003796:	e9cd 441a 	strd	r4, r4, [sp, #104]	@ 0x68
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800379a:	e9c5 3403 	strd	r3, r4, [r5, #12]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800379e:	60ac      	str	r4, [r5, #8]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80037a0:	61ac      	str	r4, [r5, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80037a2:	f003 ff17 	bl	80075d4 <HAL_TIM_Base_Init>
 80037a6:	b108      	cbz	r0, 80037ac <main+0x27c>
 80037a8:	b672      	cpsid	i
  while (1)
 80037aa:	e7fe      	b.n	80037aa <main+0x27a>
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80037ac:	a921      	add	r1, sp, #132	@ 0x84
 80037ae:	4628      	mov	r0, r5
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80037b0:	f8cd 9084 	str.w	r9, [sp, #132]	@ 0x84
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80037b4:	f003 ff48 	bl	8007648 <HAL_TIM_ConfigClockSource>
 80037b8:	b108      	cbz	r0, 80037be <main+0x28e>
 80037ba:	b672      	cpsid	i
  while (1)
 80037bc:	e7fe      	b.n	80037bc <main+0x28c>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80037be:	901a      	str	r0, [sp, #104]	@ 0x68
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80037c0:	901c      	str	r0, [sp, #112]	@ 0x70
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80037c2:	a91a      	add	r1, sp, #104	@ 0x68
 80037c4:	4628      	mov	r0, r5
 80037c6:	f003 ffd9 	bl	800777c <HAL_TIMEx_MasterConfigSynchronization>
 80037ca:	4605      	mov	r5, r0
 80037cc:	b108      	cbz	r0, 80037d2 <main+0x2a2>
 80037ce:	b672      	cpsid	i
  while (1)
 80037d0:	e7fe      	b.n	80037d0 <main+0x2a0>
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80037d2:	4c1f      	ldr	r4, [pc, #124]	@ (8003850 <main+0x320>)
  ADC_ChannelConfTypeDef sConfig = {0};
 80037d4:	4601      	mov	r1, r0
 80037d6:	2218      	movs	r2, #24
 80037d8:	a821      	add	r0, sp, #132	@ 0x84
 80037da:	f008 fa7b 	bl	800bcd4 <memset>
  hadc2.Instance = ADC2;
 80037de:	4b1d      	ldr	r3, [pc, #116]	@ (8003854 <main+0x324>)
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80037e0:	f884 5020 	strb.w	r5, [r4, #32]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80037e4:	4620      	mov	r0, r4
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80037e6:	e9c4 650a 	strd	r6, r5, [r4, #40]	@ 0x28
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80037ea:	e9c4 3500 	strd	r3, r5, [r4]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80037ee:	e9c4 5502 	strd	r5, r5, [r4, #8]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80037f2:	e9c4 5704 	strd	r5, r7, [r4, #16]
  hadc2.Init.NbrOfConversion = 1;
 80037f6:	61e6      	str	r6, [r4, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80037f8:	f884 5030 	strb.w	r5, [r4, #48]	@ 0x30
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80037fc:	8325      	strh	r5, [r4, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80037fe:	6365      	str	r5, [r4, #52]	@ 0x34
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8003800:	f001 fc30 	bl	8005064 <HAL_ADC_Init>
 8003804:	b108      	cbz	r0, 800380a <main+0x2da>
 8003806:	b672      	cpsid	i
  while (1)
 8003808:	e7fe      	b.n	8003808 <main+0x2d8>
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800380a:	e9cd 0023 	strd	r0, r0, [sp, #140]	@ 0x8c
  sConfig.Offset = 0;
 800380e:	e9cd 0025 	strd	r0, r0, [sp, #148]	@ 0x94
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003812:	a921      	add	r1, sp, #132	@ 0x84
 8003814:	4620      	mov	r0, r4
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003816:	e9cd 8621 	strd	r8, r6, [sp, #132]	@ 0x84
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800381a:	f001 ff25 	bl	8005668 <HAL_ADC_ConfigChannel>
 800381e:	4604      	mov	r4, r0
 8003820:	b300      	cbz	r0, 8003864 <main+0x334>
 8003822:	b672      	cpsid	i
  while (1)
 8003824:	e7fe      	b.n	8003824 <main+0x2f4>
 8003826:	bf00      	nop
 8003828:	40021000 	.word	0x40021000
 800382c:	48000800 	.word	0x48000800
 8003830:	48000400 	.word	0x48000400
 8003834:	200024fc 	.word	0x200024fc
 8003838:	200023c4 	.word	0x200023c4
 800383c:	40013800 	.word	0x40013800
 8003840:	2000233c 	.word	0x2000233c
 8003844:	200022b4 	.word	0x200022b4
 8003848:	40004800 	.word	0x40004800
 800384c:	2000244c 	.word	0x2000244c
 8003850:	20002658 	.word	0x20002658
 8003854:	50000100 	.word	0x50000100
 8003858:	40013000 	.word	0x40013000
 800385c:	40004400 	.word	0x40004400
 8003860:	40000400 	.word	0x40000400
  ADC_MultiModeTypeDef multimode = {0};
 8003864:	e9cd 001a 	strd	r0, r0, [sp, #104]	@ 0x68
 8003868:	901c      	str	r0, [sp, #112]	@ 0x70
  ADC_ChannelConfTypeDef sConfig = {0};
 800386a:	4601      	mov	r1, r0
 800386c:	2218      	movs	r2, #24
 800386e:	a821      	add	r0, sp, #132	@ 0x84
 8003870:	f008 fa30 	bl	800bcd4 <memset>
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8003874:	4852      	ldr	r0, [pc, #328]	@ (80039c0 <main+0x490>)
  hadc3.Instance = ADC3;
 8003876:	4b53      	ldr	r3, [pc, #332]	@ (80039c4 <main+0x494>)
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8003878:	f880 4020 	strb.w	r4, [r0, #32]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800387c:	e9c0 640a 	strd	r6, r4, [r0, #40]	@ 0x28
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8003880:	e9c0 3400 	strd	r3, r4, [r0]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003884:	e9c0 4402 	strd	r4, r4, [r0, #8]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003888:	e9c0 4704 	strd	r4, r7, [r0, #16]
  hadc3.Init.NbrOfConversion = 1;
 800388c:	61c6      	str	r6, [r0, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 800388e:	f880 4030 	strb.w	r4, [r0, #48]	@ 0x30
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8003892:	8304      	strh	r4, [r0, #24]
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8003894:	6344      	str	r4, [r0, #52]	@ 0x34
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8003896:	f001 fbe5 	bl	8005064 <HAL_ADC_Init>
 800389a:	b108      	cbz	r0, 80038a0 <main+0x370>
 800389c:	b672      	cpsid	i
  while (1)
 800389e:	e7fe      	b.n	800389e <main+0x36e>
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80038a0:	2300      	movs	r3, #0
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 80038a2:	4847      	ldr	r0, [pc, #284]	@ (80039c0 <main+0x490>)
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80038a4:	931a      	str	r3, [sp, #104]	@ 0x68
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 80038a6:	a91a      	add	r1, sp, #104	@ 0x68
 80038a8:	f002 f862 	bl	8005970 <HAL_ADCEx_MultiModeConfigChannel>
 80038ac:	b108      	cbz	r0, 80038b2 <main+0x382>
 80038ae:	b672      	cpsid	i
  while (1)
 80038b0:	e7fe      	b.n	80038b0 <main+0x380>
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80038b2:	230c      	movs	r3, #12
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80038b4:	e9cd 0023 	strd	r0, r0, [sp, #140]	@ 0x8c
  sConfig.Offset = 0;
 80038b8:	e9cd 0025 	strd	r0, r0, [sp, #148]	@ 0x94
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80038bc:	2401      	movs	r4, #1
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80038be:	4840      	ldr	r0, [pc, #256]	@ (80039c0 <main+0x490>)
 80038c0:	a921      	add	r1, sp, #132	@ 0x84
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80038c2:	e9cd 3421 	strd	r3, r4, [sp, #132]	@ 0x84
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80038c6:	f001 fecf 	bl	8005668 <HAL_ADC_ConfigChannel>
 80038ca:	4603      	mov	r3, r0
 80038cc:	b108      	cbz	r0, 80038d2 <main+0x3a2>
 80038ce:	b672      	cpsid	i
  while (1)
 80038d0:	e7fe      	b.n	80038d0 <main+0x3a0>
  hspi2.Instance = SPI2;
 80038d2:	483d      	ldr	r0, [pc, #244]	@ (80039c8 <main+0x498>)
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80038d4:	4d3d      	ldr	r5, [pc, #244]	@ (80039cc <main+0x49c>)
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80038d6:	6083      	str	r3, [r0, #8]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80038d8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80038dc:	e9c0 5200 	strd	r5, r2, [r0]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 80038e0:	f44f 7240 	mov.w	r2, #768	@ 0x300
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80038e4:	e9c0 2303 	strd	r2, r3, [r0, #12]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80038e8:	f44f 7200 	mov.w	r2, #512	@ 0x200
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80038ec:	e9c0 2306 	strd	r2, r3, [r0, #24]
  hspi2.Init.CRCPolynomial = 7;
 80038f0:	2207      	movs	r2, #7
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80038f2:	e9c0 3308 	strd	r3, r3, [r0, #32]
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80038f6:	e9c0 230b 	strd	r2, r3, [r0, #44]	@ 0x2c
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80038fa:	6143      	str	r3, [r0, #20]
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80038fc:	6283      	str	r3, [r0, #40]	@ 0x28
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80038fe:	2308      	movs	r3, #8
 8003900:	6343      	str	r3, [r0, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8003902:	f003 f9d8 	bl	8006cb6 <HAL_SPI_Init>
 8003906:	4605      	mov	r5, r0
 8003908:	b108      	cbz	r0, 800390e <main+0x3de>
 800390a:	b672      	cpsid	i
  while (1)
 800390c:	e7fe      	b.n	800390c <main+0x3dc>
  osMutexDef(myMutex);
 800390e:	e9cd 0008 	strd	r0, r0, [sp, #32]
  myMutexHandle = osMutexCreate(osMutex(myMutex));
 8003912:	a808      	add	r0, sp, #32
 8003914:	f004 fb84 	bl	8008020 <osMutexCreate>
 8003918:	4b2d      	ldr	r3, [pc, #180]	@ (80039d0 <main+0x4a0>)
  osMailQDef(GSM_MailQ, 32, GSM_MAIL_STRUCT);
 800391a:	f8cd d030 	str.w	sp, [sp, #48]	@ 0x30
 800391e:	2220      	movs	r2, #32
  myMutexHandle = osMutexCreate(osMutex(myMutex));
 8003920:	6018      	str	r0, [r3, #0]
  RMC_MailQGSMId = osMailCreate(osMailQ(GSM_MailQ), NULL);
 8003922:	4629      	mov	r1, r5
  osMailQDef(GSM_MailQ, 32, GSM_MAIL_STRUCT);
 8003924:	2360      	movs	r3, #96	@ 0x60
  RMC_MailQGSMId = osMailCreate(osMailQ(GSM_MailQ), NULL);
 8003926:	a80a      	add	r0, sp, #40	@ 0x28
  osMailQDef(GSM_MailQ, 32, GSM_MAIL_STRUCT);
 8003928:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
  RMC_MailQGSMId = osMailCreate(osMailQ(GSM_MailQ), NULL);
 800392c:	f004 fc40 	bl	80081b0 <osMailCreate>
 8003930:	4b28      	ldr	r3, [pc, #160]	@ (80039d4 <main+0x4a4>)
  osMailQDef(FLASH_MailQ, 5, RMCSTRUCT);
 8003932:	2105      	movs	r1, #5
  RMC_MailQGSMId = osMailCreate(osMailQ(GSM_MailQ), NULL);
 8003934:	6018      	str	r0, [r3, #0]
  osMailQDef(FLASH_MailQ, 5, RMCSTRUCT);
 8003936:	2358      	movs	r3, #88	@ 0x58
 8003938:	e9cd 130d 	strd	r1, r3, [sp, #52]	@ 0x34
  RMC_MailQFLASHId = osMailCreate(osMailQ(FLASH_MailQ), NULL);
 800393c:	a80d      	add	r0, sp, #52	@ 0x34
  osMailQDef(FLASH_MailQ, 5, RMCSTRUCT);
 800393e:	ab01      	add	r3, sp, #4
  RMC_MailQFLASHId = osMailCreate(osMailQ(FLASH_MailQ), NULL);
 8003940:	4629      	mov	r1, r5
  osMailQDef(FLASH_MailQ, 5, RMCSTRUCT);
 8003942:	930f      	str	r3, [sp, #60]	@ 0x3c
  RMC_MailQFLASHId = osMailCreate(osMailQ(FLASH_MailQ), NULL);
 8003944:	f004 fc34 	bl	80081b0 <osMailCreate>
 8003948:	4b23      	ldr	r3, [pc, #140]	@ (80039d8 <main+0x4a8>)
  osMailQDef(Tax_MailQ, 1, TAX_MAIL_STRUCT);
 800394a:	9410      	str	r4, [sp, #64]	@ 0x40
  RMC_MailQFLASHId = osMailCreate(osMailQ(FLASH_MailQ), NULL);
 800394c:	6018      	str	r0, [r3, #0]
  osMailQDef(Tax_MailQ, 1, TAX_MAIL_STRUCT);
 800394e:	2380      	movs	r3, #128	@ 0x80
 8003950:	9311      	str	r3, [sp, #68]	@ 0x44
  tax_MailQId = osMailCreate(osMailQ(Tax_MailQ), NULL);
 8003952:	4629      	mov	r1, r5
  osMailQDef(Tax_MailQ, 1, TAX_MAIL_STRUCT);
 8003954:	ab02      	add	r3, sp, #8
  tax_MailQId = osMailCreate(osMailQ(Tax_MailQ), NULL);
 8003956:	a810      	add	r0, sp, #64	@ 0x40
  osMailQDef(Tax_MailQ, 1, TAX_MAIL_STRUCT);
 8003958:	9312      	str	r3, [sp, #72]	@ 0x48
  tax_MailQId = osMailCreate(osMailQ(Tax_MailQ), NULL);
 800395a:	f004 fc29 	bl	80081b0 <osMailCreate>
  osThreadDef(SpiFlash, StartSpiFlash, osPriorityLow, 0, 1280);
 800395e:	4c1f      	ldr	r4, [pc, #124]	@ (80039dc <main+0x4ac>)
  tax_MailQId = osMailCreate(osMailQ(Tax_MailQ), NULL);
 8003960:	4b1f      	ldr	r3, [pc, #124]	@ (80039e0 <main+0x4b0>)
 8003962:	6018      	str	r0, [r3, #0]
  osThreadDef(SpiFlash, StartSpiFlash, osPriorityLow, 0, 1280);
 8003964:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003966:	ae13      	add	r6, sp, #76	@ 0x4c
 8003968:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800396a:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800396e:	e886 0007 	stmia.w	r6, {r0, r1, r2}
  SpiFlashHandle = osThreadCreate(osThread(SpiFlash), NULL);
 8003972:	4629      	mov	r1, r5
 8003974:	a813      	add	r0, sp, #76	@ 0x4c
 8003976:	f004 fb23 	bl	8007fc0 <osThreadCreate>
 800397a:	4b1a      	ldr	r3, [pc, #104]	@ (80039e4 <main+0x4b4>)
  osThreadDef(GPS, StartGPS, osPriorityLow, 0, 480);
 800397c:	f104 070c 	add.w	r7, r4, #12
  SpiFlashHandle = osThreadCreate(osThread(SpiFlash), NULL);
 8003980:	6018      	str	r0, [r3, #0]
  osThreadDef(GPS, StartGPS, osPriorityLow, 0, 480);
 8003982:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8003984:	ae1a      	add	r6, sp, #104	@ 0x68
 8003986:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8003988:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 800398c:	e886 0007 	stmia.w	r6, {r0, r1, r2}
  GPSHandle = osThreadCreate(osThread(GPS), NULL);
 8003990:	4629      	mov	r1, r5
 8003992:	a81a      	add	r0, sp, #104	@ 0x68
 8003994:	f004 fb14 	bl	8007fc0 <osThreadCreate>
 8003998:	4b13      	ldr	r3, [pc, #76]	@ (80039e8 <main+0x4b8>)
  osThreadDef(GSM, StartGSM, osPriorityLow, 0, 896);
 800399a:	3428      	adds	r4, #40	@ 0x28
  GPSHandle = osThreadCreate(osThread(GPS), NULL);
 800399c:	6018      	str	r0, [r3, #0]
  osThreadDef(GSM, StartGSM, osPriorityLow, 0, 896);
 800399e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80039a0:	ae21      	add	r6, sp, #132	@ 0x84
 80039a2:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80039a4:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80039a8:	e886 0007 	stmia.w	r6, {r0, r1, r2}
  GSMHandle = osThreadCreate(osThread(GSM), NULL);
 80039ac:	4629      	mov	r1, r5
 80039ae:	a821      	add	r0, sp, #132	@ 0x84
 80039b0:	f004 fb06 	bl	8007fc0 <osThreadCreate>
 80039b4:	4b0d      	ldr	r3, [pc, #52]	@ (80039ec <main+0x4bc>)
 80039b6:	6018      	str	r0, [r3, #0]
  osKernelStart();
 80039b8:	f004 fafd 	bl	8007fb6 <osKernelStart>
  while (1)
 80039bc:	e7fe      	b.n	80039bc <main+0x48c>
 80039be:	bf00      	nop
 80039c0:	20002608 	.word	0x20002608
 80039c4:	50000400 	.word	0x50000400
 80039c8:	20002498 	.word	0x20002498
 80039cc:	40003800 	.word	0x40003800
 80039d0:	20002194 	.word	0x20002194
 80039d4:	20002188 	.word	0x20002188
 80039d8:	2000218c 	.word	0x2000218c
 80039dc:	0800fca0 	.word	0x0800fca0
 80039e0:	20002190 	.word	0x20002190
 80039e4:	200021a0 	.word	0x200021a0
 80039e8:	2000219c 	.word	0x2000219c
 80039ec:	20002198 	.word	0x20002198

080039f0 <HAL_TIM_PeriodElapsedCallback>:
  if (htim->Instance == TIM2) {
 80039f0:	6803      	ldr	r3, [r0, #0]
 80039f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80039f6:	d101      	bne.n	80039fc <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
 80039f8:	f001 baec 	b.w	8004fd4 <HAL_IncTick>
}
 80039fc:	4770      	bx	lr

080039fe <Error_Handler>:
 80039fe:	b672      	cpsid	i
  while (1)
 8003a00:	e7fe      	b.n	8003a00 <Error_Handler+0x2>
	...

08003a04 <W25_ReadStatusReg1>:
	W25_CS_DISABLE();
	W25_DelayWhileBusy(CHIP_ERASE_TIMEOUT);
	return retval;
} // W25_ChipErase()

uint8_t W25_ReadStatusReg1(void) {
 8003a04:	b513      	push	{r0, r1, r4, lr}
	uint8_t cmd = W25_CMD_READ_STATUS_REG_1;
 8003a06:	2305      	movs	r3, #5
	uint8_t status_reg1;
	int retval;
	W25_CS_ENABLE(); // Drive Winbond chip select, /CS low
 8003a08:	2200      	movs	r2, #0
 8003a0a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003a0e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
	uint8_t cmd = W25_CMD_READ_STATUS_REG_1;
 8003a12:	f88d 3006 	strb.w	r3, [sp, #6]
	W25_CS_ENABLE(); // Drive Winbond chip select, /CS low
 8003a16:	f002 fa29 	bl	8005e6c <HAL_GPIO_WritePin>
	retval = HAL_SPI_Transmit(&hspi1, &cmd , sizeof(cmd), TIMEOUT); // Send Read Status Reg 1 command
 8003a1a:	4810      	ldr	r0, [pc, #64]	@ (8003a5c <W25_ReadStatusReg1+0x58>)
 8003a1c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003a20:	2201      	movs	r2, #1
 8003a22:	f10d 0106 	add.w	r1, sp, #6
 8003a26:	f003 f9b4 	bl	8006d92 <HAL_SPI_Transmit>
	if(retval == HAL_OK)
 8003a2a:	4604      	mov	r4, r0
 8003a2c:	b940      	cbnz	r0, 8003a40 <W25_ReadStatusReg1+0x3c>
	retval = HAL_SPI_Receive(&hspi1, &status_reg1, sizeof(status_reg1), TIMEOUT);
 8003a2e:	480b      	ldr	r0, [pc, #44]	@ (8003a5c <W25_ReadStatusReg1+0x58>)
 8003a30:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003a34:	2201      	movs	r2, #1
 8003a36:	f10d 0107 	add.w	r1, sp, #7
 8003a3a:	f003 fba4 	bl	8007186 <HAL_SPI_Receive>
 8003a3e:	4604      	mov	r4, r0
	W25_CS_DISABLE();
 8003a40:	2201      	movs	r2, #1
 8003a42:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003a46:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003a4a:	f002 fa0f 	bl	8005e6c <HAL_GPIO_WritePin>
	return retval == HAL_OK ? status_reg1:0xFF; // return 0xFF if error
 8003a4e:	b91c      	cbnz	r4, 8003a58 <W25_ReadStatusReg1+0x54>
 8003a50:	f89d 0007 	ldrb.w	r0, [sp, #7]
} // W25_ReadStatusReg1()
 8003a54:	b002      	add	sp, #8
 8003a56:	bd10      	pop	{r4, pc}
	return retval == HAL_OK ? status_reg1:0xFF; // return 0xFF if error
 8003a58:	20ff      	movs	r0, #255	@ 0xff
 8003a5a:	e7fb      	b.n	8003a54 <W25_ReadStatusReg1+0x50>
 8003a5c:	200024fc 	.word	0x200024fc

08003a60 <W25_Busy>:

int W25_Busy(void)
{
 8003a60:	b508      	push	{r3, lr}
	return (W25_ReadStatusReg1() & W25_STATUS1_BUSY);
 8003a62:	f7ff ffcf 	bl	8003a04 <W25_ReadStatusReg1>
}
 8003a66:	f000 0001 	and.w	r0, r0, #1
 8003a6a:	bd08      	pop	{r3, pc}

08003a6c <W25_DelayWhileBusy>:

int W25_DelayWhileBusy(uint32_t msTimeout)
{
 8003a6c:	b570      	push	{r4, r5, r6, lr}
 8003a6e:	4605      	mov	r5, r0
	uint32_t initial_count = HAL_GetTick();
 8003a70:	f001 fabc 	bl	8004fec <HAL_GetTick>
 8003a74:	4606      	mov	r6, r0
	int busy;
	uint32_t deltaticks;
	uint32_t count = 0;
	do {
	busy = W25_Busy();
 8003a76:	f7ff fff3 	bl	8003a60 <W25_Busy>
 8003a7a:	4604      	mov	r4, r0
	deltaticks = HAL_GetTick() - initial_count;
 8003a7c:	f001 fab6 	bl	8004fec <HAL_GetTick>
 8003a80:	1b83      	subs	r3, r0, r6
	count++;
	} while(busy && deltaticks < msTimeout);
 8003a82:	b114      	cbz	r4, 8003a8a <W25_DelayWhileBusy+0x1e>
 8003a84:	42ab      	cmp	r3, r5
 8003a86:	d3f6      	bcc.n	8003a76 <W25_DelayWhileBusy+0xa>
	int retval = busy ? HAL_TIMEOUT:HAL_OK;
 8003a88:	2403      	movs	r4, #3
	return retval;
}
 8003a8a:	4620      	mov	r0, r4
 8003a8c:	bd70      	pop	{r4, r5, r6, pc}

08003a8e <W25_Reset>:
void W25_Reset(){
 8003a8e:	b508      	push	{r3, lr}
	W25_CS_ENABLE();
 8003a90:	2200      	movs	r2, #0
 8003a92:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003a96:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003a9a:	f002 f9e7 	bl	8005e6c <HAL_GPIO_WritePin>
	W25_CS_DISABLE();
 8003a9e:	2201      	movs	r2, #1
 8003aa0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003aa4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003aa8:	f002 f9e0 	bl	8005e6c <HAL_GPIO_WritePin>
	W25_CS_ENABLE();
 8003aac:	2200      	movs	r2, #0
 8003aae:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003ab2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003ab6:	f002 f9d9 	bl	8005e6c <HAL_GPIO_WritePin>
	W25_CS_DISABLE();
 8003aba:	2201      	movs	r2, #1
 8003abc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003ac0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003ac4:	f002 f9d2 	bl	8005e6c <HAL_GPIO_WritePin>
	W25_CS_ENABLE();
 8003ac8:	2200      	movs	r2, #0
 8003aca:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003ace:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003ad2:	f002 f9cb 	bl	8005e6c <HAL_GPIO_WritePin>
	W25_CS_DISABLE();
}
 8003ad6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	W25_CS_DISABLE();
 8003ada:	2201      	movs	r2, #1
 8003adc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003ae0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003ae4:	f002 b9c2 	b.w	8005e6c <HAL_GPIO_WritePin>

08003ae8 <W25_ReadJedecID>:

int W25_ReadJedecID() {
 8003ae8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003aea:	b08d      	sub	sp, #52	@ 0x34
	int retval;
	uint8_t idcmd = W25_CMD_READ_JEDEC_ID;
 8003aec:	239f      	movs	r3, #159	@ 0x9f
	uint8_t jdec_id[4];
	char result[11];
	W25_CS_ENABLE(); // Drive Winbond chip select, /CS low
 8003aee:	2200      	movs	r2, #0
 8003af0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003af4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
	uint8_t idcmd = W25_CMD_READ_JEDEC_ID;
 8003af8:	f88d 300b 	strb.w	r3, [sp, #11]
	W25_CS_ENABLE(); // Drive Winbond chip select, /CS low
 8003afc:	f002 f9b6 	bl	8005e6c <HAL_GPIO_WritePin>
	retval = HAL_SPI_TransmitReceive(&hspi1, &idcmd, jdec_id, 4, 4000);
 8003b00:	f44f 637a 	mov.w	r3, #4000	@ 0xfa0
 8003b04:	9300      	str	r3, [sp, #0]
 8003b06:	aa03      	add	r2, sp, #12
 8003b08:	2304      	movs	r3, #4
 8003b0a:	f10d 010b 	add.w	r1, sp, #11
 8003b0e:	4820      	ldr	r0, [pc, #128]	@ (8003b90 <W25_ReadJedecID+0xa8>)
 8003b10:	f003 fa09 	bl	8006f26 <HAL_SPI_TransmitReceive>
	W25_CS_DISABLE();
 8003b14:	2201      	movs	r2, #1
	retval = HAL_SPI_TransmitReceive(&hspi1, &idcmd, jdec_id, 4, 4000);
 8003b16:	4605      	mov	r5, r0
	W25_CS_DISABLE();
 8003b18:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003b1c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003b20:	f002 f9a4 	bl	8005e6c <HAL_GPIO_WritePin>
	char spi_flash_intro[] = "Flash ID received: ";
 8003b24:	4b1b      	ldr	r3, [pc, #108]	@ (8003b94 <W25_ReadJedecID+0xac>)
 8003b26:	aa07      	add	r2, sp, #28
 8003b28:	f103 0710 	add.w	r7, r3, #16
 8003b2c:	4616      	mov	r6, r2
 8003b2e:	6818      	ldr	r0, [r3, #0]
 8003b30:	6859      	ldr	r1, [r3, #4]
 8003b32:	4614      	mov	r4, r2
 8003b34:	c403      	stmia	r4!, {r0, r1}
 8003b36:	3308      	adds	r3, #8
 8003b38:	42bb      	cmp	r3, r7
 8003b3a:	4622      	mov	r2, r4
 8003b3c:	d1f7      	bne.n	8003b2e <W25_ReadJedecID+0x46>
 8003b3e:	6818      	ldr	r0, [r3, #0]
 8003b40:	6020      	str	r0, [r4, #0]
	HAL_UART_Transmit(&huart1, (uint8_t*) spi_flash_intro, strlen(spi_flash_intro), 1000);
 8003b42:	4630      	mov	r0, r6
 8003b44:	f7fc fba4 	bl	8000290 <strlen>
 8003b48:	4631      	mov	r1, r6
 8003b4a:	b282      	uxth	r2, r0
 8003b4c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003b50:	4811      	ldr	r0, [pc, #68]	@ (8003b98 <W25_ReadJedecID+0xb0>)
 8003b52:	f004 f8ed 	bl	8007d30 <HAL_UART_Transmit>

	sprintf(result, "%02X, %02X, %02X", jdec_id[1], jdec_id[2], jdec_id[3]);
 8003b56:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8003b5a:	f89d 200d 	ldrb.w	r2, [sp, #13]
 8003b5e:	9300      	str	r3, [sp, #0]
 8003b60:	490e      	ldr	r1, [pc, #56]	@ (8003b9c <W25_ReadJedecID+0xb4>)
 8003b62:	f89d 300e 	ldrb.w	r3, [sp, #14]
 8003b66:	a804      	add	r0, sp, #16
 8003b68:	f007 ff90 	bl	800ba8c <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*) result, 11, 1000);
 8003b6c:	a904      	add	r1, sp, #16
 8003b6e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003b72:	220b      	movs	r2, #11
 8003b74:	4808      	ldr	r0, [pc, #32]	@ (8003b98 <W25_ReadJedecID+0xb0>)
 8003b76:	f004 f8db 	bl	8007d30 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, (uint8_t*)"\n", 1, 1000);
 8003b7a:	4909      	ldr	r1, [pc, #36]	@ (8003ba0 <W25_ReadJedecID+0xb8>)
 8003b7c:	4806      	ldr	r0, [pc, #24]	@ (8003b98 <W25_ReadJedecID+0xb0>)
 8003b7e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003b82:	2201      	movs	r2, #1
 8003b84:	f004 f8d4 	bl	8007d30 <HAL_UART_Transmit>
	return retval;
} // W25_ReadJEDECID()
 8003b88:	4628      	mov	r0, r5
 8003b8a:	b00d      	add	sp, #52	@ 0x34
 8003b8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003b8e:	bf00      	nop
 8003b90:	200024fc 	.word	0x200024fc
 8003b94:	0801154f 	.word	0x0801154f
 8003b98:	200023c4 	.word	0x200023c4
 8003b9c:	0801153e 	.word	0x0801153e
 8003ba0:	08010fa2 	.word	0x08010fa2

08003ba4 <W25_WriteEnable>:

	return retval;
} // W25_ReadUniqueID()


int W25_WriteEnable(void) {
 8003ba4:	b513      	push	{r0, r1, r4, lr}
	uint8_t cmd = W25_CMD_WRITE_ENABLE;
 8003ba6:	2306      	movs	r3, #6
	W25_CS_ENABLE(); // Drive Winbond chip select, /CS low
 8003ba8:	2200      	movs	r2, #0
 8003baa:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003bae:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
	uint8_t cmd = W25_CMD_WRITE_ENABLE;
 8003bb2:	f88d 3007 	strb.w	r3, [sp, #7]
	W25_CS_ENABLE(); // Drive Winbond chip select, /CS low
 8003bb6:	f002 f959 	bl	8005e6c <HAL_GPIO_WritePin>
	int retval = HAL_SPI_Transmit(&hspi1, &cmd , sizeof(cmd), TIMEOUT); // Send Write Enable command
 8003bba:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003bbe:	f10d 0107 	add.w	r1, sp, #7
 8003bc2:	2201      	movs	r2, #1
 8003bc4:	4806      	ldr	r0, [pc, #24]	@ (8003be0 <W25_WriteEnable+0x3c>)
 8003bc6:	f003 f8e4 	bl	8006d92 <HAL_SPI_Transmit>
	W25_CS_DISABLE();
 8003bca:	2201      	movs	r2, #1
	int retval = HAL_SPI_Transmit(&hspi1, &cmd , sizeof(cmd), TIMEOUT); // Send Write Enable command
 8003bcc:	4604      	mov	r4, r0
	W25_CS_DISABLE();
 8003bce:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003bd2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003bd6:	f002 f949 	bl	8005e6c <HAL_GPIO_WritePin>
	return retval;
} // W25_WriteEnable()
 8003bda:	4620      	mov	r0, r4
 8003bdc:	b002      	add	sp, #8
 8003bde:	bd10      	pop	{r4, pc}
 8003be0:	200024fc 	.word	0x200024fc

08003be4 <W25_SectorErase>:

int W25_SectorErase(uint32_t address)
{
 8003be4:	b513      	push	{r0, r1, r4, lr}
	int retval;
	uint8_t cmdaddr[4] = {W25_CMD_SECTOR_ERASE,address>>16,address>>8,address};
 8003be6:	2320      	movs	r3, #32
 8003be8:	f88d 3004 	strb.w	r3, [sp, #4]
 8003bec:	0c03      	lsrs	r3, r0, #16
 8003bee:	ba40      	rev16	r0, r0
 8003bf0:	f88d 3005 	strb.w	r3, [sp, #5]
 8003bf4:	f8ad 0006 	strh.w	r0, [sp, #6]
	W25_WriteEnable(); // Make sure we can write...
 8003bf8:	f7ff ffd4 	bl	8003ba4 <W25_WriteEnable>
	W25_CS_ENABLE(); // Drive Winbond chip select, /CS low
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003c02:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003c06:	f002 f931 	bl	8005e6c <HAL_GPIO_WritePin>
	retval = HAL_SPI_Transmit(&hspi1, cmdaddr , sizeof(cmdaddr ), TIMEOUT); // Send Sector Erase command with address
 8003c0a:	2204      	movs	r2, #4
 8003c0c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003c10:	eb0d 0102 	add.w	r1, sp, r2
 8003c14:	4808      	ldr	r0, [pc, #32]	@ (8003c38 <W25_SectorErase+0x54>)
 8003c16:	f003 f8bc 	bl	8006d92 <HAL_SPI_Transmit>
	W25_CS_DISABLE();
 8003c1a:	2201      	movs	r2, #1
	retval = HAL_SPI_Transmit(&hspi1, cmdaddr , sizeof(cmdaddr ), TIMEOUT); // Send Sector Erase command with address
 8003c1c:	4604      	mov	r4, r0
	W25_CS_DISABLE();
 8003c1e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003c22:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003c26:	f002 f921 	bl	8005e6c <HAL_GPIO_WritePin>
	W25_DelayWhileBusy(SECTOR_ERASE_TIMEOUT);
 8003c2a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003c2e:	f7ff ff1d 	bl	8003a6c <W25_DelayWhileBusy>
	return retval;
} // W25_SectorErase()
 8003c32:	4620      	mov	r0, r4
 8003c34:	b002      	add	sp, #8
 8003c36:	bd10      	pop	{r4, pc}
 8003c38:	200024fc 	.word	0x200024fc

08003c3c <W25_PageProgram>:

int W25_PageProgram(uint32_t address, uint8_t *buf, uint32_t count)
{
 8003c3c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8003c40:	4606      	mov	r6, r0
 8003c42:	4688      	mov	r8, r1
 8003c44:	4617      	mov	r7, r2
	int retval = HAL_OK;
	W25_WriteEnable(); // Make sure we can write...
 8003c46:	f7ff ffad 	bl	8003ba4 <W25_WriteEnable>
	while(count) {
		uint8_t cmdaddr[4] = {W25_CMD_PAGE_PROGRAM,address>>16,address>>8,address};
		uint32_t space_left_in_page = 0x100 - (address & 0xFF);
		uint32_t count_this_pass = count <= space_left_in_page? count:space_left_in_page;
		W25_CS_ENABLE(); // Drive Winbond chip select, /CS low
		retval = HAL_SPI_Transmit(&hspi1, cmdaddr , sizeof(cmdaddr ), TIMEOUT); // Send Page Program command with address
 8003c4a:	f8df a080 	ldr.w	sl, [pc, #128]	@ 8003ccc <W25_PageProgram+0x90>
	int retval = HAL_OK;
 8003c4e:	2400      	movs	r4, #0
		uint8_t cmdaddr[4] = {W25_CMD_PAGE_PROGRAM,address>>16,address>>8,address};
 8003c50:	f04f 0902 	mov.w	r9, #2
	while(count) {
 8003c54:	b91f      	cbnz	r7, 8003c5e <W25_PageProgram+0x22>
		address += count_this_pass;
		buf += count_this_pass;
		W25_DelayWhileBusy(PAGE_PROGRAM_TIMEOUT);
	}
	return retval;
} 
 8003c56:	4620      	mov	r0, r4
 8003c58:	b002      	add	sp, #8
 8003c5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		uint32_t space_left_in_page = 0x100 - (address & 0xFF);
 8003c5e:	b2f5      	uxtb	r5, r6
		uint8_t cmdaddr[4] = {W25_CMD_PAGE_PROGRAM,address>>16,address>>8,address};
 8003c60:	0c33      	lsrs	r3, r6, #16
		uint32_t space_left_in_page = 0x100 - (address & 0xFF);
 8003c62:	f5c5 7580 	rsb	r5, r5, #256	@ 0x100
		uint32_t count_this_pass = count <= space_left_in_page? count:space_left_in_page;
 8003c66:	42bd      	cmp	r5, r7
		uint8_t cmdaddr[4] = {W25_CMD_PAGE_PROGRAM,address>>16,address>>8,address};
 8003c68:	f88d 3005 	strb.w	r3, [sp, #5]
		W25_CS_ENABLE(); // Drive Winbond chip select, /CS low
 8003c6c:	f04f 0200 	mov.w	r2, #0
		uint8_t cmdaddr[4] = {W25_CMD_PAGE_PROGRAM,address>>16,address>>8,address};
 8003c70:	ba73      	rev16	r3, r6
		W25_CS_ENABLE(); // Drive Winbond chip select, /CS low
 8003c72:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003c76:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
		uint8_t cmdaddr[4] = {W25_CMD_PAGE_PROGRAM,address>>16,address>>8,address};
 8003c7a:	f8ad 3006 	strh.w	r3, [sp, #6]
		uint32_t count_this_pass = count <= space_left_in_page? count:space_left_in_page;
 8003c7e:	bf28      	it	cs
 8003c80:	463d      	movcs	r5, r7
		uint8_t cmdaddr[4] = {W25_CMD_PAGE_PROGRAM,address>>16,address>>8,address};
 8003c82:	f88d 9004 	strb.w	r9, [sp, #4]
		W25_CS_ENABLE(); // Drive Winbond chip select, /CS low
 8003c86:	f002 f8f1 	bl	8005e6c <HAL_GPIO_WritePin>
		retval = HAL_SPI_Transmit(&hspi1, cmdaddr , sizeof(cmdaddr ), TIMEOUT); // Send Page Program command with address
 8003c8a:	2204      	movs	r2, #4
 8003c8c:	480f      	ldr	r0, [pc, #60]	@ (8003ccc <W25_PageProgram+0x90>)
 8003c8e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003c92:	eb0d 0102 	add.w	r1, sp, r2
 8003c96:	f003 f87c 	bl	8006d92 <HAL_SPI_Transmit>
		if(retval == HAL_OK)
 8003c9a:	4604      	mov	r4, r0
 8003c9c:	b938      	cbnz	r0, 8003cae <W25_PageProgram+0x72>
		  retval = HAL_SPI_Transmit(&hspi1, buf, count_this_pass, TIMEOUT); // Write page data
 8003c9e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003ca2:	b2aa      	uxth	r2, r5
 8003ca4:	4641      	mov	r1, r8
 8003ca6:	4650      	mov	r0, sl
 8003ca8:	f003 f873 	bl	8006d92 <HAL_SPI_Transmit>
 8003cac:	4604      	mov	r4, r0
		W25_CS_DISABLE();
 8003cae:	2201      	movs	r2, #1
 8003cb0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003cb4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003cb8:	f002 f8d8 	bl	8005e6c <HAL_GPIO_WritePin>
		W25_DelayWhileBusy(PAGE_PROGRAM_TIMEOUT);
 8003cbc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
		count -= count_this_pass;
 8003cc0:	1b7f      	subs	r7, r7, r5
		address += count_this_pass;
 8003cc2:	442e      	add	r6, r5
		buf += count_this_pass;
 8003cc4:	44a8      	add	r8, r5
		W25_DelayWhileBusy(PAGE_PROGRAM_TIMEOUT);
 8003cc6:	f7ff fed1 	bl	8003a6c <W25_DelayWhileBusy>
 8003cca:	e7c3      	b.n	8003c54 <W25_PageProgram+0x18>
 8003ccc:	200024fc 	.word	0x200024fc

08003cd0 <W25_ReadData>:

// Winbond 8.2.6 Read Data (03h)
// The only limit for quantity of data is memory / device size
int W25_ReadData(uint32_t address, uint8_t *buf, int bufSize)
{
 8003cd0:	b573      	push	{r0, r1, r4, r5, r6, lr}
	int retval;
	uint8_t cmdaddr[4] = {W25_CMD_READ_DATA,address>>16,address>>8,address};
 8003cd2:	2303      	movs	r3, #3
 8003cd4:	f88d 3004 	strb.w	r3, [sp, #4]
 8003cd8:	0c03      	lsrs	r3, r0, #16
 8003cda:	ba40      	rev16	r0, r0
 8003cdc:	f8ad 0006 	strh.w	r0, [sp, #6]
{
 8003ce0:	460d      	mov	r5, r1
	//printf("+%s(Addr 0x%06X, buf 0x%08X, Len 0x%04X)\r\n",__func__,address,buf,bufSize);
	W25_CS_ENABLE(); // Drive Winbond chip select, /CS low
 8003ce2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003ce6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
{
 8003cea:	4616      	mov	r6, r2
	W25_CS_ENABLE(); // Drive Winbond chip select, /CS low
 8003cec:	2200      	movs	r2, #0
	uint8_t cmdaddr[4] = {W25_CMD_READ_DATA,address>>16,address>>8,address};
 8003cee:	f88d 3005 	strb.w	r3, [sp, #5]
	W25_CS_ENABLE(); // Drive Winbond chip select, /CS low
 8003cf2:	f002 f8bb 	bl	8005e6c <HAL_GPIO_WritePin>
	retval = HAL_SPI_Transmit(&hspi1, cmdaddr , sizeof(cmdaddr), 500); // Send Read Data command with address
 8003cf6:	2204      	movs	r2, #4
 8003cf8:	480d      	ldr	r0, [pc, #52]	@ (8003d30 <W25_ReadData+0x60>)
 8003cfa:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8003cfe:	eb0d 0102 	add.w	r1, sp, r2
 8003d02:	f003 f846 	bl	8006d92 <HAL_SPI_Transmit>
	if(retval != HAL_OK) {
 8003d06:	4604      	mov	r4, r0
 8003d08:	b978      	cbnz	r0, 8003d2a <W25_ReadData+0x5a>
		return retval;
	}
	//memset(buf,0,bufSize); // Buffer is transmitted during receive
	retval = HAL_SPI_Receive(&hspi1, buf, bufSize, 2000); // need longer time-outs when using slow SPI clock
 8003d0a:	4809      	ldr	r0, [pc, #36]	@ (8003d30 <W25_ReadData+0x60>)
 8003d0c:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8003d10:	b2b2      	uxth	r2, r6
 8003d12:	4629      	mov	r1, r5
 8003d14:	f003 fa37 	bl	8007186 <HAL_SPI_Receive>
	if(retval != HAL_OK)
 8003d18:	4604      	mov	r4, r0
 8003d1a:	b130      	cbz	r0, 8003d2a <W25_ReadData+0x5a>

	W25_CS_DISABLE();
 8003d1c:	2201      	movs	r2, #1
 8003d1e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003d22:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003d26:	f002 f8a1 	bl	8005e6c <HAL_GPIO_WritePin>

	return retval;
} // W25_ReadData()
 8003d2a:	4620      	mov	r0, r4
 8003d2c:	b002      	add	sp, #8
 8003d2e:	bd70      	pop	{r4, r5, r6, pc}
 8003d30:	200024fc 	.word	0x200024fc

08003d34 <IsPageValid>:


// Function to check if a page contains valid data
int IsPageValid(uint8_t *page) {
 8003d34:	b510      	push	{r4, lr}
    char *last_semicolon = strrchr((char *)page, ';'); // Find the last semicolon
 8003d36:	213b      	movs	r1, #59	@ 0x3b
 8003d38:	f008 f806 	bl	800bd48 <strrchr>
    if (!last_semicolon) {
 8003d3c:	4604      	mov	r4, r0
 8003d3e:	b1a0      	cbz	r0, 8003d6a <IsPageValid+0x36>
        return 0; // No semicolon found, invalid page
    }

    char *last_param = last_semicolon + 1; // Last parameter starts after the last semicolon
    size_t len = strlen(last_param);
 8003d40:	3001      	adds	r0, #1
 8003d42:	f7fc faa5 	bl	8000290 <strlen>

    // Ensure the last parameter is exactly 6 characters and numeric
    if (len < 6) {
 8003d46:	2805      	cmp	r0, #5
 8003d48:	d90f      	bls.n	8003d6a <IsPageValid+0x36>
 8003d4a:	1da2      	adds	r2, r4, #6
        return 0; // Too short to be valid
    }

    for (int i = 0; i < 6; ++i) {
        if ((last_param[i] < '0' || last_param[i] > '9' ) &&
 8003d4c:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8003d50:	f1a3 0130 	sub.w	r1, r3, #48	@ 0x30
 8003d54:	2909      	cmp	r1, #9
 8003d56:	d904      	bls.n	8003d62 <IsPageValid+0x2e>
 8003d58:	f023 0320 	bic.w	r3, r3, #32
 8003d5c:	3b41      	subs	r3, #65	@ 0x41
 8003d5e:	2b05      	cmp	r3, #5
 8003d60:	d803      	bhi.n	8003d6a <IsPageValid+0x36>
    for (int i = 0; i < 6; ++i) {
 8003d62:	4294      	cmp	r4, r2
 8003d64:	d1f2      	bne.n	8003d4c <IsPageValid+0x18>
				(last_param[i] < 'A' || last_param[i] > 'F')) {
            return 0; // Not numeric
        }
    }

    return 1; // Page contains valid data
 8003d66:	2001      	movs	r0, #1
}
 8003d68:	bd10      	pop	{r4, pc}
        return 0; // No semicolon found, invalid page
 8003d6a:	2000      	movs	r0, #0
 8003d6c:	e7fc      	b.n	8003d68 <IsPageValid+0x34>

08003d6e <UpdatePageAddress>:


// Function to update the last parameter of the page (address)
void UpdatePageAddress(uint8_t *page, uint32_t new_address) {
 8003d6e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8003d70:	4604      	mov	r4, r0
    char new_address_str[10];
    Uint32ToHex(new_address, new_address_str, 8);
 8003d72:	2208      	movs	r2, #8
void UpdatePageAddress(uint8_t *page, uint32_t new_address) {
 8003d74:	4608      	mov	r0, r1
    Uint32ToHex(new_address, new_address_str, 8);
 8003d76:	a901      	add	r1, sp, #4
 8003d78:	f001 f87a 	bl	8004e70 <Uint32ToHex>
    memcpy(page + strlen((char *)page) - 6, new_address_str+2, 6); // Overwrite last 6 characters
 8003d7c:	4620      	mov	r0, r4
 8003d7e:	f7fc fa87 	bl	8000290 <strlen>
 8003d82:	3806      	subs	r0, #6
 8003d84:	f8dd 2006 	ldr.w	r2, [sp, #6]
 8003d88:	5022      	str	r2, [r4, r0]
 8003d8a:	1823      	adds	r3, r4, r0
 8003d8c:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 8003d90:	809a      	strh	r2, [r3, #4]
}
 8003d92:	b004      	add	sp, #16
 8003d94:	bd10      	pop	{r4, pc}
	...

08003d98 <W25_ShiftLeftFlashDataByPage>:

int W25_ShiftLeftFlashDataByPage(void) {
 8003d98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    uint32_t current_sector_start = FLASH_START_ADDRESS;

    printf("\n\n ------------------------------ IN SHIFT LEFT: ----------------------------\n\n");
 8003d9c:	483f      	ldr	r0, [pc, #252]	@ (8003e9c <W25_ShiftLeftFlashDataByPage+0x104>)
    while (current_sector_start < FLASH_END_ADDRESS) {
        uint32_t next_sector_start = current_sector_start + SECTOR_SIZE;

        W25_Reset();
        // Step 1: Read the entire current sector into the buffer
        if (W25_ReadData(current_sector_start, current_sector_buffer, SECTOR_SIZE) != HAL_OK) {
 8003d9e:	f8df 910c 	ldr.w	r9, [pc, #268]	@ 8003eac <W25_ShiftLeftFlashDataByPage+0x114>
    printf("\n\n ------------------------------ IN SHIFT LEFT: ----------------------------\n\n");
 8003da2:	f007 fe37 	bl	800ba14 <puts>
    uint32_t current_sector_start = FLASH_START_ADDRESS;
 8003da6:	f44f 5540 	mov.w	r5, #12288	@ 0x3000
        W25_Reset();
 8003daa:	f7ff fe70 	bl	8003a8e <W25_Reset>
        if (W25_ReadData(current_sector_start, current_sector_buffer, SECTOR_SIZE) != HAL_OK) {
 8003dae:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003db2:	4649      	mov	r1, r9
 8003db4:	4628      	mov	r0, r5
        uint32_t next_sector_start = current_sector_start + SECTOR_SIZE;
 8003db6:	f505 5780 	add.w	r7, r5, #4096	@ 0x1000
        if (W25_ReadData(current_sector_start, current_sector_buffer, SECTOR_SIZE) != HAL_OK) {
 8003dba:	f7ff ff89 	bl	8003cd0 <W25_ReadData>
 8003dbe:	b118      	cbz	r0, 8003dc8 <W25_ShiftLeftFlashDataByPage+0x30>
//        	printf("READING ALL THE SECTOR: ERROR\n");
            return HAL_ERROR; // Exit if read fails
 8003dc0:	2401      	movs	r4, #1
        current_sector_start = next_sector_start;
    }

    printf("\n\n ----------------------END OF SHIFT LEFT -----------------------------\n\n");
    return HAL_OK;
}
 8003dc2:	4620      	mov	r0, r4
 8003dc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        if (next_sector_start < FLASH_END_ADDRESS) {
 8003dc8:	f5b7 4fa0 	cmp.w	r7, #20480	@ 0x5000
 8003dcc:	d147      	bne.n	8003e5e <W25_ShiftLeftFlashDataByPage+0xc6>
 8003dce:	f8df 80dc 	ldr.w	r8, [pc, #220]	@ 8003eac <W25_ShiftLeftFlashDataByPage+0x114>
    uint32_t current_sector_start = FLASH_START_ADDRESS;
 8003dd2:	2600      	movs	r6, #0
 8003dd4:	4644      	mov	r4, r8
            if (IsPageValid(current_sector_buffer + offset + PAGE_SIZE)) {
 8003dd6:	46a2      	mov	sl, r4
 8003dd8:	3480      	adds	r4, #128	@ 0x80
 8003dda:	4620      	mov	r0, r4
 8003ddc:	f7ff ffaa 	bl	8003d34 <IsPageValid>
                memcpy(current_sector_buffer + offset, current_sector_buffer + offset + PAGE_SIZE, PAGE_SIZE);
 8003de0:	2280      	movs	r2, #128	@ 0x80
            if (IsPageValid(current_sector_buffer + offset + PAGE_SIZE)) {
 8003de2:	2800      	cmp	r0, #0
 8003de4:	d046      	beq.n	8003e74 <W25_ShiftLeftFlashDataByPage+0xdc>
                memcpy(current_sector_buffer + offset, current_sector_buffer + offset + PAGE_SIZE, PAGE_SIZE);
 8003de6:	4621      	mov	r1, r4
 8003de8:	4650      	mov	r0, sl
 8003dea:	f008 fe1d 	bl	800ca28 <memcpy>
                UpdatePageAddress(current_sector_buffer + offset, current_sector_start + offset);
 8003dee:	1971      	adds	r1, r6, r5
 8003df0:	4650      	mov	r0, sl
 8003df2:	f7ff ffbc 	bl	8003d6e <UpdatePageAddress>
        for (uint32_t offset = 0; offset < SECTOR_SIZE - PAGE_SIZE; offset += PAGE_SIZE) {
 8003df6:	3680      	adds	r6, #128	@ 0x80
 8003df8:	f5b6 6f78 	cmp.w	r6, #3968	@ 0xf80
 8003dfc:	d1eb      	bne.n	8003dd6 <W25_ShiftLeftFlashDataByPage+0x3e>
        if (next_sector_start < FLASH_END_ADDRESS && IsPageValid(next_page_buffer)) {
 8003dfe:	f5b7 4fa0 	cmp.w	r7, #20480	@ 0x5000
 8003e02:	d03c      	beq.n	8003e7e <W25_ShiftLeftFlashDataByPage+0xe6>
 8003e04:	4826      	ldr	r0, [pc, #152]	@ (8003ea0 <W25_ShiftLeftFlashDataByPage+0x108>)
 8003e06:	f7ff ff95 	bl	8003d34 <IsPageValid>
 8003e0a:	2800      	cmp	r0, #0
 8003e0c:	d037      	beq.n	8003e7e <W25_ShiftLeftFlashDataByPage+0xe6>
            memcpy(current_sector_buffer + (SECTOR_SIZE - PAGE_SIZE), next_page_buffer, PAGE_SIZE);
 8003e0e:	4924      	ldr	r1, [pc, #144]	@ (8003ea0 <W25_ShiftLeftFlashDataByPage+0x108>)
 8003e10:	4824      	ldr	r0, [pc, #144]	@ (8003ea4 <W25_ShiftLeftFlashDataByPage+0x10c>)
 8003e12:	2280      	movs	r2, #128	@ 0x80
 8003e14:	f008 fe08 	bl	800ca28 <memcpy>
            UpdatePageAddress(current_sector_buffer + (SECTOR_SIZE - PAGE_SIZE), current_sector_start + (SECTOR_SIZE - PAGE_SIZE));
 8003e18:	4822      	ldr	r0, [pc, #136]	@ (8003ea4 <W25_ShiftLeftFlashDataByPage+0x10c>)
 8003e1a:	f44f 517e 	mov.w	r1, #16256	@ 0x3f80
 8003e1e:	f7ff ffa6 	bl	8003d6e <UpdatePageAddress>
        W25_Reset();
 8003e22:	f7ff fe34 	bl	8003a8e <W25_Reset>
        if (W25_SectorErase(current_sector_start) != HAL_OK) {
 8003e26:	4628      	mov	r0, r5
 8003e28:	f7ff fedc 	bl	8003be4 <W25_SectorErase>
 8003e2c:	4604      	mov	r4, r0
 8003e2e:	2800      	cmp	r0, #0
 8003e30:	d1c6      	bne.n	8003dc0 <W25_ShiftLeftFlashDataByPage+0x28>
        for (uint32_t offset = 0; offset < SECTOR_SIZE; offset += PAGE_SIZE) {
 8003e32:	4606      	mov	r6, r0
        	uint8_t *page_data = current_sector_buffer + offset;
 8003e34:	eb08 0a06 	add.w	sl, r8, r6
        	W25_Reset();
 8003e38:	f7ff fe29 	bl	8003a8e <W25_Reset>
        	if (IsPageValid(page_data)) {
 8003e3c:	4650      	mov	r0, sl
 8003e3e:	f7ff ff79 	bl	8003d34 <IsPageValid>
 8003e42:	bb10      	cbnz	r0, 8003e8a <W25_ShiftLeftFlashDataByPage+0xf2>
        for (uint32_t offset = 0; offset < SECTOR_SIZE; offset += PAGE_SIZE) {
 8003e44:	3680      	adds	r6, #128	@ 0x80
 8003e46:	f5b6 5f80 	cmp.w	r6, #4096	@ 0x1000
 8003e4a:	d1f3      	bne.n	8003e34 <W25_ShiftLeftFlashDataByPage+0x9c>
    while (current_sector_start < FLASH_END_ADDRESS) {
 8003e4c:	f5b7 4fa0 	cmp.w	r7, #20480	@ 0x5000
        uint32_t next_sector_start = current_sector_start + SECTOR_SIZE;
 8003e50:	f44f 4580 	mov.w	r5, #16384	@ 0x4000
    while (current_sector_start < FLASH_END_ADDRESS) {
 8003e54:	d1a9      	bne.n	8003daa <W25_ShiftLeftFlashDataByPage+0x12>
    printf("\n\n ----------------------END OF SHIFT LEFT -----------------------------\n\n");
 8003e56:	4814      	ldr	r0, [pc, #80]	@ (8003ea8 <W25_ShiftLeftFlashDataByPage+0x110>)
 8003e58:	f007 fddc 	bl	800ba14 <puts>
    return HAL_OK;
 8003e5c:	e7b1      	b.n	8003dc2 <W25_ShiftLeftFlashDataByPage+0x2a>
        	W25_Reset();
 8003e5e:	f7ff fe16 	bl	8003a8e <W25_Reset>
            if (W25_ReadData(next_sector_start, next_page_buffer, PAGE_SIZE) != HAL_OK) {
 8003e62:	490f      	ldr	r1, [pc, #60]	@ (8003ea0 <W25_ShiftLeftFlashDataByPage+0x108>)
 8003e64:	2280      	movs	r2, #128	@ 0x80
 8003e66:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8003e6a:	f7ff ff31 	bl	8003cd0 <W25_ReadData>
 8003e6e:	2800      	cmp	r0, #0
 8003e70:	d0ad      	beq.n	8003dce <W25_ShiftLeftFlashDataByPage+0x36>
 8003e72:	e7a5      	b.n	8003dc0 <W25_ShiftLeftFlashDataByPage+0x28>
                memset(current_sector_buffer + offset, 0xFF, PAGE_SIZE); // Invalidate the page
 8003e74:	21ff      	movs	r1, #255	@ 0xff
 8003e76:	4650      	mov	r0, sl
 8003e78:	f007 ff2c 	bl	800bcd4 <memset>
 8003e7c:	e7bb      	b.n	8003df6 <W25_ShiftLeftFlashDataByPage+0x5e>
        	memset(current_sector_buffer + (SECTOR_SIZE - PAGE_SIZE), 0xFF, PAGE_SIZE); // Invalidate the last page
 8003e7e:	2280      	movs	r2, #128	@ 0x80
 8003e80:	21ff      	movs	r1, #255	@ 0xff
 8003e82:	4808      	ldr	r0, [pc, #32]	@ (8003ea4 <W25_ShiftLeftFlashDataByPage+0x10c>)
 8003e84:	f007 ff26 	bl	800bcd4 <memset>
 8003e88:	e7cb      	b.n	8003e22 <W25_ShiftLeftFlashDataByPage+0x8a>
        		if (W25_PageProgram(current_sector_start + offset, current_sector_buffer + offset, PAGE_SIZE) != HAL_OK) {
 8003e8a:	2280      	movs	r2, #128	@ 0x80
 8003e8c:	4651      	mov	r1, sl
 8003e8e:	19a8      	adds	r0, r5, r6
 8003e90:	f7ff fed4 	bl	8003c3c <W25_PageProgram>
 8003e94:	2800      	cmp	r0, #0
 8003e96:	d0d5      	beq.n	8003e44 <W25_ShiftLeftFlashDataByPage+0xac>
 8003e98:	e792      	b.n	8003dc0 <W25_ShiftLeftFlashDataByPage+0x28>
 8003e9a:	bf00      	nop
 8003e9c:	08011563 	.word	0x08011563
 8003ea0:	20002770 	.word	0x20002770
 8003ea4:	20003770 	.word	0x20003770
 8003ea8:	080115b2 	.word	0x080115b2
 8003eac:	200027f0 	.word	0x200027f0

08003eb0 <calculate_epoch_time_utc>:
		address_tax += 128;
		osDelay(1000);
		memset(flashBufferTaxReceived, 0x00,128);
	}
}
uint32_t calculate_epoch_time_utc(DATE *date, TIME *time) {
 8003eb0:	b500      	push	{lr}
    struct tm timeinfo;
    // Set up time structure
    timeinfo.tm_year = date->Yr - 1900; // - 1900 + 2000
 8003eb2:	6883      	ldr	r3, [r0, #8]
uint32_t calculate_epoch_time_utc(DATE *date, TIME *time) {
 8003eb4:	b08b      	sub	sp, #44	@ 0x2c
    timeinfo.tm_year = date->Yr - 1900; // - 1900 + 2000
 8003eb6:	f2a3 736c 	subw	r3, r3, #1900	@ 0x76c
 8003eba:	9306      	str	r3, [sp, #24]
    timeinfo.tm_mon = date->Mon - 1;
 8003ebc:	6843      	ldr	r3, [r0, #4]
 8003ebe:	3b01      	subs	r3, #1
 8003ec0:	9305      	str	r3, [sp, #20]
    timeinfo.tm_mday = date->Day;
 8003ec2:	6803      	ldr	r3, [r0, #0]
 8003ec4:	9304      	str	r3, [sp, #16]
    timeinfo.tm_hour = time->hour;
 8003ec6:	680b      	ldr	r3, [r1, #0]
 8003ec8:	9303      	str	r3, [sp, #12]
    timeinfo.tm_min = time->min;
 8003eca:	684b      	ldr	r3, [r1, #4]
 8003ecc:	9302      	str	r3, [sp, #8]
    timeinfo.tm_sec = time->sec;
 8003ece:	688b      	ldr	r3, [r1, #8]
 8003ed0:	9301      	str	r3, [sp, #4]
    timeinfo.tm_isdst = -1; // Let mktime determine DST if necessary

    // Get the local epoch time and then adjust for timezone offset
    time_t local_epoch = mktime(&timeinfo);
 8003ed2:	a801      	add	r0, sp, #4
    timeinfo.tm_isdst = -1; // Let mktime determine DST if necessary
 8003ed4:	f04f 33ff 	mov.w	r3, #4294967295
 8003ed8:	9309      	str	r3, [sp, #36]	@ 0x24
    time_t local_epoch = mktime(&timeinfo);
 8003eda:	f008 f835 	bl	800bf48 <mktime>
    return (uint32_t)(local_epoch + 25200); // Subtract timezone offset
}
 8003ede:	f500 40c4 	add.w	r0, r0, #25088	@ 0x6200
 8003ee2:	3070      	adds	r0, #112	@ 0x70
 8003ee4:	b00b      	add	sp, #44	@ 0x2c
 8003ee6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08003eec <format_rmc_data>:

void format_rmc_data(RMCSTRUCT *rmc_data, char *output_buffer, size_t buffer_size) {
 8003eec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ef0:	ed2d 8b04 	vpush	{d8-d9}
 8003ef4:	4604      	mov	r4, r0
 8003ef6:	b09b      	sub	sp, #108	@ 0x6c
 8003ef8:	e9cd 1218 	strd	r1, r2, [sp, #96]	@ 0x60
	//uart_transmit_string(&huart1, (uint8_t*) "Format RMC data");
    uint32_t epoch_time = calculate_epoch_time_utc(&rmc_data->date, &rmc_data->tim);
 8003efc:	4601      	mov	r1, r0
 8003efe:	3010      	adds	r0, #16
 8003f00:	f7ff ffd6 	bl	8003eb0 <calculate_epoch_time_utc>

    // Format all fields in a single line with semicolon separation, including date
    snprintf(output_buffer, buffer_size, "%d;%d;%d;%d;%d;%d;%.6f;%c;%.6f;%c;%.1f;%.1f;%s;%lu", rmc_data->date.Yr, rmc_data->date.Mon, rmc_data->date.Day, rmc_data->tim.hour, rmc_data->tim.min, rmc_data->tim.sec, rmc_data->lcation.latitude, rmc_data->lcation.NS, rmc_data->lcation.longitude, rmc_data->lcation.EW, rmc_data->speed, rmc_data->course, rmc_data->isValid ? "Valid" : "Invalid", epoch_time);
 8003f04:	69a3      	ldr	r3, [r4, #24]
 8003f06:	9314      	str	r3, [sp, #80]	@ 0x50
 8003f08:	e9d4 3504 	ldrd	r3, r5, [r4, #16]
    uint32_t epoch_time = calculate_epoch_time_utc(&rmc_data->date, &rmc_data->tim);
 8003f0c:	4607      	mov	r7, r0
    snprintf(output_buffer, buffer_size, "%d;%d;%d;%d;%d;%d;%.6f;%c;%.6f;%c;%.1f;%.1f;%s;%lu", rmc_data->date.Yr, rmc_data->date.Mon, rmc_data->date.Day, rmc_data->tim.hour, rmc_data->tim.min, rmc_data->tim.sec, rmc_data->lcation.latitude, rmc_data->lcation.NS, rmc_data->lcation.longitude, rmc_data->lcation.EW, rmc_data->speed, rmc_data->course, rmc_data->isValid ? "Valid" : "Invalid", epoch_time);
 8003f0e:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8003f10:	9315      	str	r3, [sp, #84]	@ 0x54
 8003f12:	f7fc fb29 	bl	8000568 <__aeabi_f2d>
 8003f16:	e9cd 0116 	strd	r0, r1, [sp, #88]	@ 0x58
 8003f1a:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8003f1c:	f8d4 b008 	ldr.w	fp, [r4, #8]
 8003f20:	f894 6040 	ldrb.w	r6, [r4, #64]	@ 0x40
 8003f24:	f894 8050 	ldrb.w	r8, [r4, #80]	@ 0x50
 8003f28:	f7fc fb1e 	bl	8000568 <__aeabi_f2d>
 8003f2c:	e9d4 9a00 	ldrd	r9, sl, [r4]
 8003f30:	ed94 8b0e 	vldr	d8, [r4, #56]	@ 0x38
 8003f34:	ed94 9b12 	vldr	d9, [r4, #72]	@ 0x48
 8003f38:	ed9d 7b16 	vldr	d7, [sp, #88]	@ 0x58
 8003f3c:	6b24      	ldr	r4, [r4, #48]	@ 0x30
 8003f3e:	f8cd 8030 	str.w	r8, [sp, #48]	@ 0x30
 8003f42:	4602      	mov	r2, r0
 8003f44:	460b      	mov	r3, r1
 8003f46:	4811      	ldr	r0, [pc, #68]	@ (8003f8c <format_rmc_data+0xa0>)
 8003f48:	4911      	ldr	r1, [pc, #68]	@ (8003f90 <format_rmc_data+0xa4>)
 8003f4a:	9608      	str	r6, [sp, #32]
 8003f4c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8003f50:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8003f52:	4a10      	ldr	r2, [pc, #64]	@ (8003f94 <format_rmc_data+0xa8>)
 8003f54:	f8cd 9008 	str.w	r9, [sp, #8]
 8003f58:	2c00      	cmp	r4, #0
 8003f5a:	bf08      	it	eq
 8003f5c:	4601      	moveq	r1, r0
 8003f5e:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8003f62:	e9cd 5300 	strd	r5, r3, [sp]
 8003f66:	e9cd 1712 	strd	r1, r7, [sp, #72]	@ 0x48
 8003f6a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8003f6c:	ed8d 9b0a 	vstr	d9, [sp, #40]	@ 0x28
 8003f70:	ed8d 8b06 	vstr	d8, [sp, #24]
 8003f74:	e9cd ab03 	strd	sl, fp, [sp, #12]
 8003f78:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	@ 0x60
 8003f7c:	f007 fd52 	bl	800ba24 <sniprintf>
}
 8003f80:	b01b      	add	sp, #108	@ 0x6c
 8003f82:	ecbd 8b04 	vpop	{d8-d9}
 8003f86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f8a:	bf00      	nop
 8003f8c:	0800fd7f 	.word	0x0800fd7f
 8003f90:	0800fd79 	.word	0x0800fd79
 8003f94:	080115fc 	.word	0x080115fc

08003f98 <saveRMC>:


void saveRMC(){
 8003f98:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	printf("\n\n Inside SAVING RMC TO FLASH \n\n");
	int k = 0;
	int j = 0;
	W25_Reset();
	if (is_erased_rmc == 0){
 8003f9c:	4cb8      	ldr	r4, [pc, #736]	@ (8004280 <saveRMC+0x2e8>)
	printf("\n\n Inside SAVING RMC TO FLASH \n\n");
 8003f9e:	48b9      	ldr	r0, [pc, #740]	@ (8004284 <saveRMC+0x2ec>)
void saveRMC(){
 8003fa0:	b093      	sub	sp, #76	@ 0x4c
	printf("\n\n Inside SAVING RMC TO FLASH \n\n");
 8003fa2:	f007 fd37 	bl	800ba14 <puts>
	W25_Reset();
 8003fa6:	f7ff fd72 	bl	8003a8e <W25_Reset>
	if (is_erased_rmc == 0){
 8003faa:	6823      	ldr	r3, [r4, #0]
 8003fac:	b92b      	cbnz	r3, 8003fba <saveRMC+0x22>
		W25_SectorErase(address_rmc);
 8003fae:	4bb6      	ldr	r3, [pc, #728]	@ (8004288 <saveRMC+0x2f0>)
 8003fb0:	6818      	ldr	r0, [r3, #0]
 8003fb2:	f7ff fe17 	bl	8003be4 <W25_SectorErase>
		is_erased_rmc = 1;
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	6023      	str	r3, [r4, #0]
	}
	
	for(size_t i = 0; i < 128; i++){
 8003fba:	4ab4      	ldr	r2, [pc, #720]	@ (800428c <saveRMC+0x2f4>)
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	4616      	mov	r6, r2
		if(rmcBufferDemo[i] != 0x00 && rmcBufferDemo[i+1] == 0x00){
 8003fc0:	f812 1b01 	ldrb.w	r1, [r2], #1
 8003fc4:	461d      	mov	r5, r3
 8003fc6:	3301      	adds	r3, #1
 8003fc8:	b109      	cbz	r1, 8003fce <saveRMC+0x36>
 8003fca:	7811      	ldrb	r1, [r2, #0]
 8003fcc:	b111      	cbz	r1, 8003fd4 <saveRMC+0x3c>
	for(size_t i = 0; i < 128; i++){
 8003fce:	2b80      	cmp	r3, #128	@ 0x80
 8003fd0:	d1f6      	bne.n	8003fc0 <saveRMC+0x28>
	int k = 0;
 8003fd2:	2500      	movs	r5, #0
			k = i;
			break;
		}
	}
	Uint32ToHex(address_rmc, addr_out_flash, 8);
 8003fd4:	4fae      	ldr	r7, [pc, #696]	@ (8004290 <saveRMC+0x2f8>)
 8003fd6:	4cac      	ldr	r4, [pc, #688]	@ (8004288 <saveRMC+0x2f0>)
 8003fd8:	2208      	movs	r2, #8
 8003fda:	6820      	ldr	r0, [r4, #0]
 8003fdc:	4639      	mov	r1, r7
 8003fde:	f000 ff47 	bl	8004e70 <Uint32ToHex>
	HAL_UART_Transmit(&huart1, (uint8_t*) addr_out_flash, 8, 1000);
 8003fe2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003fe6:	2208      	movs	r2, #8
 8003fe8:	4639      	mov	r1, r7
 8003fea:	48aa      	ldr	r0, [pc, #680]	@ (8004294 <saveRMC+0x2fc>)
 8003fec:	f003 fea0 	bl	8007d30 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, (uint8_t*)"\r\n", 1, 1000);
 8003ff0:	49a9      	ldr	r1, [pc, #676]	@ (8004298 <saveRMC+0x300>)
 8003ff2:	48a8      	ldr	r0, [pc, #672]	@ (8004294 <saveRMC+0x2fc>)
 8003ff4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003ff8:	2201      	movs	r2, #1
 8003ffa:	f003 fe99 	bl	8007d30 <HAL_UART_Transmit>

	k++;
	rmcBufferDemo[k] = ';';
 8003ffe:	1973      	adds	r3, r6, r5
 8004000:	223b      	movs	r2, #59	@ 0x3b
 8004002:	705a      	strb	r2, [r3, #1]
	for(size_t idx = 6; idx > 0 ; idx--){
		k++;
		rmcBufferDemo[k] = addr_out_flash[8 - idx];
 8004004:	1cab      	adds	r3, r5, #2
 8004006:	f8d7 1002 	ldr.w	r1, [r7, #2]
 800400a:	50f1      	str	r1, [r6, r3]
 800400c:	18f2      	adds	r2, r6, r3
 800400e:	88fb      	ldrh	r3, [r7, #6]
 8004010:	8093      	strh	r3, [r2, #4]
	}
	
	for (j=0;j<110-k-1;j++)
	{
		rmcBufferDemo[j+k+1]=0x00;
 8004012:	f105 0008 	add.w	r0, r5, #8
 8004016:	f1c5 0266 	rsb	r2, r5, #102	@ 0x66
 800401a:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 800401e:	2100      	movs	r1, #0
 8004020:	4430      	add	r0, r6
 8004022:	f007 fe57 	bl	800bcd4 <memset>
	}

	if(address_rmc % 0x1000 == 0x0000){
 8004026:	6820      	ldr	r0, [r4, #0]
 8004028:	f3c0 030b 	ubfx	r3, r0, #0, #12
 800402c:	b90b      	cbnz	r3, 8004032 <saveRMC+0x9a>
//		printf("\n\nErasing SECTOR IN ADVANCE\n");
		W25_SectorErase(address_rmc);
 800402e:	f7ff fdd9 	bl	8003be4 <W25_SectorErase>
	}

	W25_Reset();
 8004032:	f7ff fd2c 	bl	8003a8e <W25_Reset>
	W25_PageProgram(address_rmc, rmcBufferDemo, 128);
//	printf("Buffer before saving to FLASH: ");
//	printf((char*)rmcBufferDemo);
//	printf("\n");

	current_addr = address_rmc;
 8004036:	4d99      	ldr	r5, [pc, #612]	@ (800429c <saveRMC+0x304>)
	W25_PageProgram(address_rmc, rmcBufferDemo, 128);
 8004038:	4994      	ldr	r1, [pc, #592]	@ (800428c <saveRMC+0x2f4>)
 800403a:	6820      	ldr	r0, [r4, #0]
 800403c:	2280      	movs	r2, #128	@ 0x80
 800403e:	f7ff fdfd 	bl	8003c3c <W25_PageProgram>
	current_addr = address_rmc;
 8004042:	6823      	ldr	r3, [r4, #0]
 8004044:	602b      	str	r3, [r5, #0]
//	printf("Buffer after saving to FLASH: ");
	W25_Reset();
 8004046:	f7ff fd22 	bl	8003a8e <W25_Reset>
	W25_ReadData(current_addr, flashBufferRMCReceived, 128);
 800404a:	2280      	movs	r2, #128	@ 0x80
 800404c:	4994      	ldr	r1, [pc, #592]	@ (80042a0 <saveRMC+0x308>)
 800404e:	6828      	ldr	r0, [r5, #0]
 8004050:	f7ff fe3e 	bl	8003cd0 <W25_ReadData>
	char spi_flash_data_intro[] = "Flash DATA received: ";
 8004054:	4b93      	ldr	r3, [pc, #588]	@ (80042a4 <saveRMC+0x30c>)
 8004056:	aa01      	add	r2, sp, #4
 8004058:	f103 0c10 	add.w	ip, r3, #16
 800405c:	4617      	mov	r7, r2
 800405e:	6818      	ldr	r0, [r3, #0]
 8004060:	6859      	ldr	r1, [r3, #4]
 8004062:	4616      	mov	r6, r2
 8004064:	c603      	stmia	r6!, {r0, r1}
 8004066:	3308      	adds	r3, #8
 8004068:	4563      	cmp	r3, ip
 800406a:	4632      	mov	r2, r6
 800406c:	d1f7      	bne.n	800405e <saveRMC+0xc6>
 800406e:	6818      	ldr	r0, [r3, #0]
 8004070:	889b      	ldrh	r3, [r3, #4]
 8004072:	6030      	str	r0, [r6, #0]
 8004074:	80b3      	strh	r3, [r6, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*) spi_flash_data_intro, strlen(spi_flash_data_intro), 1000);
 8004076:	4638      	mov	r0, r7
 8004078:	f7fc f90a 	bl	8000290 <strlen>
 800407c:	4639      	mov	r1, r7
 800407e:	b282      	uxth	r2, r0
 8004080:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004084:	4883      	ldr	r0, [pc, #524]	@ (8004294 <saveRMC+0x2fc>)
 8004086:	f003 fe53 	bl	8007d30 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, flashBufferRMCReceived, sizeof(flashBufferRMCReceived), 1000);
 800408a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800408e:	4984      	ldr	r1, [pc, #528]	@ (80042a0 <saveRMC+0x308>)
 8004090:	4880      	ldr	r0, [pc, #512]	@ (8004294 <saveRMC+0x2fc>)
 8004092:	2280      	movs	r2, #128	@ 0x80
 8004094:	f003 fe4c 	bl	8007d30 <HAL_UART_Transmit>

	memset(flashBufferRMCReceived, 0x00,128);
 8004098:	2280      	movs	r2, #128	@ 0x80
 800409a:	2100      	movs	r1, #0
 800409c:	4880      	ldr	r0, [pc, #512]	@ (80042a0 <saveRMC+0x308>)
 800409e:	f007 fe19 	bl	800bcd4 <memset>


	printf("\n-------------------------- Updating the latest location info----------------\n");
 80040a2:	4881      	ldr	r0, [pc, #516]	@ (80042a8 <saveRMC+0x310>)
 80040a4:	f007 fcb6 	bl	800ba14 <puts>
	W25_Reset();
 80040a8:	f7ff fcf1 	bl	8003a8e <W25_Reset>
	W25_SectorErase(0x9000);
 80040ac:	f44f 4010 	mov.w	r0, #36864	@ 0x9000
 80040b0:	f7ff fd98 	bl	8003be4 <W25_SectorErase>
	W25_Reset();
 80040b4:	f7ff fceb 	bl	8003a8e <W25_Reset>
	W25_PageProgram(0x9000, rmcBufferDemo, 128);
 80040b8:	4974      	ldr	r1, [pc, #464]	@ (800428c <saveRMC+0x2f4>)
 80040ba:	2280      	movs	r2, #128	@ 0x80
 80040bc:	f44f 4010 	mov.w	r0, #36864	@ 0x9000
 80040c0:	f7ff fdbc 	bl	8003c3c <W25_PageProgram>
	W25_ReadData(0x9000, flashBufferRMCReceived, 128);
 80040c4:	2280      	movs	r2, #128	@ 0x80
 80040c6:	4976      	ldr	r1, [pc, #472]	@ (80042a0 <saveRMC+0x308>)
 80040c8:	f44f 4010 	mov.w	r0, #36864	@ 0x9000
 80040cc:	f7ff fe00 	bl	8003cd0 <W25_ReadData>
	char spi_flash_data_intro_backup[] = "Flash DATA received at 0x9000 (BACKUP): ";
 80040d0:	4b76      	ldr	r3, [pc, #472]	@ (80042ac <saveRMC+0x314>)
 80040d2:	aa07      	add	r2, sp, #28
 80040d4:	f103 0c28 	add.w	ip, r3, #40	@ 0x28
 80040d8:	4617      	mov	r7, r2
 80040da:	6818      	ldr	r0, [r3, #0]
 80040dc:	6859      	ldr	r1, [r3, #4]
 80040de:	4616      	mov	r6, r2
 80040e0:	c603      	stmia	r6!, {r0, r1}
 80040e2:	3308      	adds	r3, #8
 80040e4:	4563      	cmp	r3, ip
 80040e6:	4632      	mov	r2, r6
 80040e8:	d1f7      	bne.n	80040da <saveRMC+0x142>
 80040ea:	781b      	ldrb	r3, [r3, #0]
 80040ec:	7033      	strb	r3, [r6, #0]
	HAL_UART_Transmit(&huart1, (uint8_t*) spi_flash_data_intro_backup, strlen(spi_flash_data_intro_backup), 1000);
 80040ee:	4638      	mov	r0, r7
 80040f0:	f7fc f8ce 	bl	8000290 <strlen>
 80040f4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80040f8:	b282      	uxth	r2, r0
 80040fa:	4639      	mov	r1, r7
 80040fc:	4865      	ldr	r0, [pc, #404]	@ (8004294 <saveRMC+0x2fc>)
 80040fe:	f003 fe17 	bl	8007d30 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, flashBufferRMCReceived, sizeof(flashBufferRMCReceived), 1000);
 8004102:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004106:	4966      	ldr	r1, [pc, #408]	@ (80042a0 <saveRMC+0x308>)
 8004108:	4862      	ldr	r0, [pc, #392]	@ (8004294 <saveRMC+0x2fc>)
 800410a:	2280      	movs	r2, #128	@ 0x80
 800410c:	f003 fe10 	bl	8007d30 <HAL_UART_Transmit>
	memset(flashBufferRMCReceived, 0x00,128);
 8004110:	4863      	ldr	r0, [pc, #396]	@ (80042a0 <saveRMC+0x308>)
 8004112:	2280      	movs	r2, #128	@ 0x80
 8004114:	2100      	movs	r1, #0
 8004116:	f007 fddd 	bl	800bcd4 <memset>

	if(address_rmc == FLASH_END_ADDRESS-128){
 800411a:	6823      	ldr	r3, [r4, #0]
 800411c:	f5b3 4f9f 	cmp.w	r3, #20352	@ 0x4f80
 8004120:	4b63      	ldr	r3, [pc, #396]	@ (80042b0 <saveRMC+0x318>)
 8004122:	f040 80aa 	bne.w	800427a <saveRMC+0x2e2>
		is_flash_overflow = 1;
 8004126:	2201      	movs	r2, #1
 8004128:	601a      	str	r2, [r3, #0]
//		printf(" ADDRESS RMC before SHIFT LEFT BY ONE PAGE");
		W25_Reset();
 800412a:	f7ff fcb0 	bl	8003a8e <W25_Reset>
		W25_ReadData(address_rmc, flashBufferRMCReceived, 128);
 800412e:	495c      	ldr	r1, [pc, #368]	@ (80042a0 <saveRMC+0x308>)
 8004130:	6820      	ldr	r0, [r4, #0]
 8004132:	4f60      	ldr	r7, [pc, #384]	@ (80042b4 <saveRMC+0x31c>)
 8004134:	2280      	movs	r2, #128	@ 0x80
 8004136:	f7ff fdcb 	bl	8003cd0 <W25_ReadData>
		printf((char*) flashBufferRMCReceived);
 800413a:	4859      	ldr	r0, [pc, #356]	@ (80042a0 <saveRMC+0x308>)
 800413c:	f007 fbfa 	bl	800b934 <iprintf>

		W25_ShiftLeftFlashDataByPage();
 8004140:	f7ff fe2a 	bl	8003d98 <W25_ShiftLeftFlashDataByPage>
		address_rmc -= 128;
 8004144:	6823      	ldr	r3, [r4, #0]
 8004146:	3b80      	subs	r3, #128	@ 0x80
 8004148:	6023      	str	r3, [r4, #0]
		if(is_using_flash == 0){
 800414a:	4b5b      	ldr	r3, [pc, #364]	@ (80042b8 <saveRMC+0x320>)
 800414c:	f8d3 8000 	ldr.w	r8, [r3]
 8004150:	f1b8 0f00 	cmp.w	r8, #0
 8004154:	f040 808c 	bne.w	8004270 <saveRMC+0x2d8>
			if(start_addr_disconnect > FLASH_START_ADDRESS)
 8004158:	683b      	ldr	r3, [r7, #0]
				start_addr_disconnect -= 128;
			printf("\n-----------------BEFORE update the result address data --------------\n");
			printQueue_GSM(&result_addr_queue);
 800415a:	4e58      	ldr	r6, [pc, #352]	@ (80042bc <saveRMC+0x324>)
			printf("\n-----------------BEFORE update the result address data --------------\n");
 800415c:	4858      	ldr	r0, [pc, #352]	@ (80042c0 <saveRMC+0x328>)
			if(start_addr_disconnect > FLASH_START_ADDRESS)
 800415e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
				start_addr_disconnect -= 128;
 8004162:	bf82      	ittt	hi
 8004164:	683b      	ldrhi	r3, [r7, #0]
 8004166:	3b80      	subhi	r3, #128	@ 0x80
 8004168:	603b      	strhi	r3, [r7, #0]
			printf("\n-----------------BEFORE update the result address data --------------\n");
 800416a:	f007 fc53 	bl	800ba14 <puts>
			printQueue_GSM(&result_addr_queue);
 800416e:	4630      	mov	r0, r6
 8004170:	f7ff f800 	bl	8003174 <printQueue_GSM>
			printf("\n---------------Update the result address data--------------\n");
 8004174:	4853      	ldr	r0, [pc, #332]	@ (80042c4 <saveRMC+0x32c>)
 8004176:	f007 fc4d 	bl	800ba14 <puts>
			for (int i = 0; i < result_addr_queue.size; i++) {
 800417a:	f8d6 0208 	ldr.w	r0, [r6, #520]	@ 0x208
				int idx = (result_addr_queue.front + i) % MAX_SIZE;
 800417e:	f8d6 c200 	ldr.w	ip, [r6, #512]	@ 0x200
			for (int i = 0; i < result_addr_queue.size; i++) {
 8004182:	2200      	movs	r2, #0
 8004184:	4290      	cmp	r0, r2
 8004186:	dc4b      	bgt.n	8004220 <saveRMC+0x288>
					result_addr_queue.data[idx] -= 128;
			}
			for (int i = 0; i < result_addr_queue.size; i++) {
				int idx = (result_addr_queue.front + i) % MAX_SIZE;
				if(result_addr_queue.data[idx] < 0x3000)
					deleteMiddle_GSM(&result_addr_queue, idx);
 8004188:	f8df 9130 	ldr.w	r9, [pc, #304]	@ 80042bc <saveRMC+0x324>
			for (int i = 0; i < result_addr_queue.size; i++) {
 800418c:	f8d6 3208 	ldr.w	r3, [r6, #520]	@ 0x208
 8004190:	4543      	cmp	r3, r8
 8004192:	dc58      	bgt.n	8004246 <saveRMC+0x2ae>
			}
			printQueue_GSM(&result_addr_queue);
 8004194:	4849      	ldr	r0, [pc, #292]	@ (80042bc <saveRMC+0x324>)
 8004196:	f7fe ffed 	bl	8003174 <printQueue_GSM>
			if(end_addr_disconnect > start_addr_disconnect)
 800419a:	4b4b      	ldr	r3, [pc, #300]	@ (80042c8 <saveRMC+0x330>)
 800419c:	6819      	ldr	r1, [r3, #0]
 800419e:	683a      	ldr	r2, [r7, #0]
 80041a0:	4291      	cmp	r1, r2
 80041a2:	d902      	bls.n	80041aa <saveRMC+0x212>
				end_addr_disconnect -= 128;
 80041a4:	681a      	ldr	r2, [r3, #0]
 80041a6:	3a80      	subs	r2, #128	@ 0x80
 80041a8:	601a      	str	r2, [r3, #0]
		}
		else{
			count_shiftleft++;
		}
		Uint32ToHex(start_addr_disconnect, addr_out_flash, 8);
 80041aa:	2208      	movs	r2, #8
 80041ac:	6838      	ldr	r0, [r7, #0]
 80041ae:	4938      	ldr	r1, [pc, #224]	@ (8004290 <saveRMC+0x2f8>)
 80041b0:	f000 fe5e 	bl	8004e70 <Uint32ToHex>
		printf("\n\n------------------ CURRENT START ADDRESS DISCONNECT: %s ---------------\n\n", addr_out_flash);
 80041b4:	4936      	ldr	r1, [pc, #216]	@ (8004290 <saveRMC+0x2f8>)
 80041b6:	4845      	ldr	r0, [pc, #276]	@ (80042cc <saveRMC+0x334>)
 80041b8:	f007 fbbc 	bl	800b934 <iprintf>
		printf("\n--------------SHIFT LEFT COUNT: %d-------------\n", count_shiftleft);
 80041bc:	4b44      	ldr	r3, [pc, #272]	@ (80042d0 <saveRMC+0x338>)
 80041be:	4845      	ldr	r0, [pc, #276]	@ (80042d4 <saveRMC+0x33c>)
 80041c0:	7819      	ldrb	r1, [r3, #0]
 80041c2:	f007 fbb7 	bl	800b934 <iprintf>
		current_addr -= 128;
 80041c6:	682b      	ldr	r3, [r5, #0]
	    printf("\n");
 80041c8:	200a      	movs	r0, #10
		current_addr -= 128;
 80041ca:	3b80      	subs	r3, #128	@ 0x80
 80041cc:	602b      	str	r3, [r5, #0]
	    printf("\n");
 80041ce:	f007 fbc3 	bl	800b958 <putchar>
		printf(" ADDRESS RMC after SHIFT LEFT BY ONE PAGE:");
 80041d2:	4841      	ldr	r0, [pc, #260]	@ (80042d8 <saveRMC+0x340>)
 80041d4:	f007 fbae 	bl	800b934 <iprintf>
		W25_Reset();
 80041d8:	f7ff fc59 	bl	8003a8e <W25_Reset>
		W25_ReadData(address_rmc, flashBufferRMCReceived, 128);
 80041dc:	4930      	ldr	r1, [pc, #192]	@ (80042a0 <saveRMC+0x308>)
 80041de:	6820      	ldr	r0, [r4, #0]
 80041e0:	2280      	movs	r2, #128	@ 0x80
 80041e2:	f7ff fd75 	bl	8003cd0 <W25_ReadData>
		HAL_UART_Transmit(&huart1, flashBufferRMCReceived, sizeof(flashBufferRMCReceived), 1000);
 80041e6:	492e      	ldr	r1, [pc, #184]	@ (80042a0 <saveRMC+0x308>)
 80041e8:	482a      	ldr	r0, [pc, #168]	@ (8004294 <saveRMC+0x2fc>)
 80041ea:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80041ee:	2280      	movs	r2, #128	@ 0x80
 80041f0:	f003 fd9e 	bl	8007d30 <HAL_UART_Transmit>
	}
	else {
		is_flash_overflow = 0;
	}
	if(address_rmc < FLASH_END_ADDRESS-128)
 80041f4:	6823      	ldr	r3, [r4, #0]
 80041f6:	f5b3 4f9f 	cmp.w	r3, #20352	@ 0x4f80
		address_rmc += 128;
 80041fa:	bf38      	it	cc
 80041fc:	3380      	addcc	r3, #128	@ 0x80
	osDelay(1000);
 80041fe:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
		address_rmc += 128;
 8004202:	bf38      	it	cc
 8004204:	6023      	strcc	r3, [r4, #0]
	osDelay(1000);
 8004206:	f003 ff03 	bl	8008010 <osDelay>
	printf("\n");
 800420a:	200a      	movs	r0, #10
 800420c:	f007 fba4 	bl	800b958 <putchar>
	memset(flashBufferRMCReceived, 0x00,128);
 8004210:	4823      	ldr	r0, [pc, #140]	@ (80042a0 <saveRMC+0x308>)
 8004212:	2280      	movs	r2, #128	@ 0x80
 8004214:	2100      	movs	r1, #0
}
 8004216:	b013      	add	sp, #76	@ 0x4c
 8004218:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	memset(flashBufferRMCReceived, 0x00,128);
 800421c:	f007 bd5a 	b.w	800bcd4 <memset>
				int idx = (result_addr_queue.front + i) % MAX_SIZE;
 8004220:	eb02 030c 	add.w	r3, r2, ip
 8004224:	4259      	negs	r1, r3
 8004226:	f001 017f 	and.w	r1, r1, #127	@ 0x7f
 800422a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800422e:	bf58      	it	pl
 8004230:	424b      	negpl	r3, r1
			for (int i = 0; i < result_addr_queue.size; i++) {
 8004232:	3201      	adds	r2, #1
				if(result_addr_queue.data[idx] >= 0x3000)
 8004234:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 8004238:	f5b1 5f40 	cmp.w	r1, #12288	@ 0x3000
					result_addr_queue.data[idx] -= 128;
 800423c:	bf24      	itt	cs
 800423e:	3980      	subcs	r1, #128	@ 0x80
 8004240:	f846 1023 	strcs.w	r1, [r6, r3, lsl #2]
			for (int i = 0; i < result_addr_queue.size; i++) {
 8004244:	e79e      	b.n	8004184 <saveRMC+0x1ec>
				int idx = (result_addr_queue.front + i) % MAX_SIZE;
 8004246:	f8d6 1200 	ldr.w	r1, [r6, #512]	@ 0x200
 800424a:	4441      	add	r1, r8
 800424c:	424b      	negs	r3, r1
 800424e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004252:	f001 017f 	and.w	r1, r1, #127	@ 0x7f
 8004256:	bf58      	it	pl
 8004258:	4259      	negpl	r1, r3
				if(result_addr_queue.data[idx] < 0x3000)
 800425a:	f856 3021 	ldr.w	r3, [r6, r1, lsl #2]
 800425e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004262:	d202      	bcs.n	800426a <saveRMC+0x2d2>
					deleteMiddle_GSM(&result_addr_queue, idx);
 8004264:	4648      	mov	r0, r9
 8004266:	f7fe ffdd 	bl	8003224 <deleteMiddle_GSM>
			for (int i = 0; i < result_addr_queue.size; i++) {
 800426a:	f108 0801 	add.w	r8, r8, #1
 800426e:	e78d      	b.n	800418c <saveRMC+0x1f4>
			count_shiftleft++;
 8004270:	4a17      	ldr	r2, [pc, #92]	@ (80042d0 <saveRMC+0x338>)
 8004272:	7813      	ldrb	r3, [r2, #0]
 8004274:	3301      	adds	r3, #1
 8004276:	7013      	strb	r3, [r2, #0]
 8004278:	e797      	b.n	80041aa <saveRMC+0x212>
		is_flash_overflow = 0;
 800427a:	2200      	movs	r2, #0
 800427c:	601a      	str	r2, [r3, #0]
 800427e:	e7b9      	b.n	80041f4 <saveRMC+0x25c>
 8004280:	200038f0 	.word	0x200038f0
 8004284:	0801162f 	.word	0x0801162f
 8004288:	2000000c 	.word	0x2000000c
 800428c:	200037f0 	.word	0x200037f0
 8004290:	200026ac 	.word	0x200026ac
 8004294:	200023c4 	.word	0x200023c4
 8004298:	080102f6 	.word	0x080102f6
 800429c:	20000008 	.word	0x20000008
 80042a0:	20003870 	.word	0x20003870
 80042a4:	080117ca 	.word	0x080117ca
 80042a8:	0801164f 	.word	0x0801164f
 80042ac:	080117e0 	.word	0x080117e0
 80042b0:	200038f8 	.word	0x200038f8
 80042b4:	20001ba0 	.word	0x20001ba0
 80042b8:	20001dc0 	.word	0x20001dc0
 80042bc:	20001ba4 	.word	0x20001ba4
 80042c0:	0801169d 	.word	0x0801169d
 80042c4:	080116e4 	.word	0x080116e4
 80042c8:	20001b98 	.word	0x20001b98
 80042cc:	08011721 	.word	0x08011721
 80042d0:	20001db8 	.word	0x20001db8
 80042d4:	0801176d 	.word	0x0801176d
 80042d8:	0801179f 	.word	0x0801179f

080042dc <sendRMCDataWithAddrToGSM>:


void sendRMCDataWithAddrToGSM(GSM_MAIL_STRUCT *mail_data){
	if(mail_data->rmc.date.Yr >= 24){
 80042dc:	6983      	ldr	r3, [r0, #24]
 80042de:	2b17      	cmp	r3, #23
void sendRMCDataWithAddrToGSM(GSM_MAIL_STRUCT *mail_data){
 80042e0:	b570      	push	{r4, r5, r6, lr}
 80042e2:	4605      	mov	r5, r0
	if(mail_data->rmc.date.Yr >= 24){
 80042e4:	dd14      	ble.n	8004310 <sendRMCDataWithAddrToGSM+0x34>
		printf("\n\n\nSENDING RMC with Addr TO GSM\n\n");
		GSM_MAIL_STRUCT *mail = (GSM_MAIL_STRUCT *)osMailAlloc(RMC_MailQGSMId, osWaitForever); // Allocate memory for mail
 80042e6:	4e0b      	ldr	r6, [pc, #44]	@ (8004314 <sendRMCDataWithAddrToGSM+0x38>)
		printf("\n\n\nSENDING RMC with Addr TO GSM\n\n");
 80042e8:	480b      	ldr	r0, [pc, #44]	@ (8004318 <sendRMCDataWithAddrToGSM+0x3c>)
 80042ea:	f007 fb93 	bl	800ba14 <puts>
		GSM_MAIL_STRUCT *mail = (GSM_MAIL_STRUCT *)osMailAlloc(RMC_MailQGSMId, osWaitForever); // Allocate memory for mail
 80042ee:	6830      	ldr	r0, [r6, #0]
 80042f0:	f04f 31ff 	mov.w	r1, #4294967295
 80042f4:	f003 ff87 	bl	8008206 <osMailAlloc>
 80042f8:	4604      	mov	r4, r0
		if (mail != NULL) {
 80042fa:	b148      	cbz	r0, 8004310 <sendRMCDataWithAddrToGSM+0x34>
			*mail = *mail_data; // Copy data into allocated memory
 80042fc:	4629      	mov	r1, r5
 80042fe:	2260      	movs	r2, #96	@ 0x60
 8004300:	f008 fb92 	bl	800ca28 <memcpy>
			osMailPut(RMC_MailQGSMId, mail); // Put message in queue
 8004304:	6830      	ldr	r0, [r6, #0]
 8004306:	4621      	mov	r1, r4
		}
	}
}
 8004308:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			osMailPut(RMC_MailQGSMId, mail); // Put message in queue
 800430c:	f003 bf80 	b.w	8008210 <osMailPut>
}
 8004310:	bd70      	pop	{r4, r5, r6, pc}
 8004312:	bf00      	nop
 8004314:	20002188 	.word	0x20002188
 8004318:	08011809 	.word	0x08011809

0800431c <parseRMCString>:

void parseRMCString(uint8_t *str, RMCSTRUCT *rmc) {
 800431c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004320:	b0d4      	sub	sp, #336	@ 0x150
 8004322:	460c      	mov	r4, r1
    // Cast the uint8_t* to char* for string operations
    char buffer[256];
    strncpy(buffer, (char*)str, sizeof(buffer));
 8004324:	22ff      	movs	r2, #255	@ 0xff
 8004326:	4601      	mov	r1, r0
 8004328:	a814      	add	r0, sp, #80	@ 0x50
 800432a:	f007 fcfa 	bl	800bd22 <strncpy>
    buffer[sizeof(buffer) - 1] = '\0'; // Ensure null termination
 800432e:	2500      	movs	r5, #0

    // Remove the last parameter by locating the last ';'
    char *lastSemicolon = strrchr(buffer, ';');
 8004330:	213b      	movs	r1, #59	@ 0x3b
 8004332:	a814      	add	r0, sp, #80	@ 0x50
    buffer[sizeof(buffer) - 1] = '\0'; // Ensure null termination
 8004334:	f88d 514f 	strb.w	r5, [sp, #335]	@ 0x14f
    char *lastSemicolon = strrchr(buffer, ';');
 8004338:	f007 fd06 	bl	800bd48 <strrchr>
    if (lastSemicolon) {
 800433c:	b100      	cbz	r0, 8004340 <parseRMCString+0x24>
        *lastSemicolon = '\0'; // Terminate the string here to exclude the last parameter
 800433e:	7005      	strb	r5, [r0, #0]

    // Parse the string (now excluding the last parameter)
    char validStr[10];
   // unsigned long long epoch;
    int epoch0, epoch1, epoch2;
    sscanf(buffer, "%d;%d;%d;%d;%d;%d;%lf;%c;%lf;%c;%f;%f;%9[^;];%04d%04d%02d",
 8004340:	f104 032c 	add.w	r3, r4, #44	@ 0x2c
 8004344:	9309      	str	r3, [sp, #36]	@ 0x24
 8004346:	f104 0328 	add.w	r3, r4, #40	@ 0x28
 800434a:	9308      	str	r3, [sp, #32]
 800434c:	f104 0350 	add.w	r3, r4, #80	@ 0x50
 8004350:	9307      	str	r3, [sp, #28]
 8004352:	f104 0348 	add.w	r3, r4, #72	@ 0x48
 8004356:	9306      	str	r3, [sp, #24]
 8004358:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 800435c:	9305      	str	r3, [sp, #20]
 800435e:	f104 0338 	add.w	r3, r4, #56	@ 0x38
 8004362:	9304      	str	r3, [sp, #16]
 8004364:	f104 0308 	add.w	r3, r4, #8
 8004368:	9303      	str	r3, [sp, #12]
 800436a:	1d23      	adds	r3, r4, #4
 800436c:	e9cd 4301 	strd	r4, r3, [sp, #4]
 8004370:	f10d 0844 	add.w	r8, sp, #68	@ 0x44
 8004374:	f104 0310 	add.w	r3, r4, #16
 8004378:	ad10      	add	r5, sp, #64	@ 0x40
 800437a:	ae0f      	add	r6, sp, #60	@ 0x3c
 800437c:	af0e      	add	r7, sp, #56	@ 0x38
 800437e:	f104 0218 	add.w	r2, r4, #24
 8004382:	9300      	str	r3, [sp, #0]
 8004384:	4911      	ldr	r1, [pc, #68]	@ (80043cc <parseRMCString+0xb0>)
 8004386:	950d      	str	r5, [sp, #52]	@ 0x34
 8004388:	f104 0314 	add.w	r3, r4, #20
 800438c:	960c      	str	r6, [sp, #48]	@ 0x30
 800438e:	970b      	str	r7, [sp, #44]	@ 0x2c
 8004390:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8004394:	a814      	add	r0, sp, #80	@ 0x50
 8004396:	f007 fb99 	bl	800bacc <siscanf>
		   &epoch1,
		   &epoch2// Epoch time
    );

    // Set validity as an integer (1 for "Valid", 0 for others)
    rmc->isValid = (strcmp(validStr, "Valid") == 0) ? 1 : 0;
 800439a:	490d      	ldr	r1, [pc, #52]	@ (80043d0 <parseRMCString+0xb4>)
 800439c:	4640      	mov	r0, r8
 800439e:	f7fb ff17 	bl	80001d0 <strcmp>

    // Store the epoch value
    rmc->date.epoch = ((uint64_t)epoch0 << 32) | ((uint64_t)epoch1 << 16) | (uint64_t)epoch2;
 80043a2:	e9dd 320e 	ldrd	r3, r2, [sp, #56]	@ 0x38
 80043a6:	17d1      	asrs	r1, r2, #31
 80043a8:	0409      	lsls	r1, r1, #16
 80043aa:	ea41 4112 	orr.w	r1, r1, r2, lsr #16
 80043ae:	430b      	orrs	r3, r1
 80043b0:	9910      	ldr	r1, [sp, #64]	@ 0x40
    rmc->isValid = (strcmp(validStr, "Valid") == 0) ? 1 : 0;
 80043b2:	fab0 f080 	clz	r0, r0
 80043b6:	0940      	lsrs	r0, r0, #5
    rmc->date.epoch = ((uint64_t)epoch0 << 32) | ((uint64_t)epoch1 << 16) | (uint64_t)epoch2;
 80043b8:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 80043bc:	ea43 73e1 	orr.w	r3, r3, r1, asr #31
 80043c0:	e9c4 2308 	strd	r2, r3, [r4, #32]
    rmc->isValid = (strcmp(validStr, "Valid") == 0) ? 1 : 0;
 80043c4:	6320      	str	r0, [r4, #48]	@ 0x30
}
 80043c6:	b054      	add	sp, #336	@ 0x150
 80043c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80043cc:	0801182a 	.word	0x0801182a
 80043d0:	0800fd79 	.word	0x0800fd79

080043d4 <readFlash>:

RMCSTRUCT readFlash(uint32_t addr){
 80043d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80043d6:	460d      	mov	r5, r1
 80043d8:	b0a7      	sub	sp, #156	@ 0x9c
	Uint32ToHex(addr, addr_out_flash, 8);
 80043da:	2208      	movs	r2, #8
 80043dc:	4942      	ldr	r1, [pc, #264]	@ (80044e8 <readFlash+0x114>)
RMCSTRUCT readFlash(uint32_t addr){
 80043de:	4604      	mov	r4, r0
	Uint32ToHex(addr, addr_out_flash, 8);
 80043e0:	4628      	mov	r0, r5
 80043e2:	f000 fd45 	bl	8004e70 <Uint32ToHex>
	printf("Address received from FLASH: %s \n", addr_out_flash);
 80043e6:	4940      	ldr	r1, [pc, #256]	@ (80044e8 <readFlash+0x114>)
 80043e8:	4840      	ldr	r0, [pc, #256]	@ (80044ec <readFlash+0x118>)
 80043ea:	f007 faa3 	bl	800b934 <iprintf>
	W25_Reset();
 80043ee:	f7ff fb4e 	bl	8003a8e <W25_Reset>
	W25_ReadData(addr, flashBufferRMCReceived, 128);
 80043f2:	2280      	movs	r2, #128	@ 0x80
 80043f4:	493e      	ldr	r1, [pc, #248]	@ (80044f0 <readFlash+0x11c>)
 80043f6:	4628      	mov	r0, r5
 80043f8:	f7ff fc6a 	bl	8003cd0 <W25_ReadData>
	char spi_flash_data_intro[] = "Flash DATA at READ FLASH received: ";
 80043fc:	4b3d      	ldr	r3, [pc, #244]	@ (80044f4 <readFlash+0x120>)
 80043fe:	aa07      	add	r2, sp, #28
 8004400:	f103 0720 	add.w	r7, r3, #32
 8004404:	4616      	mov	r6, r2
 8004406:	6818      	ldr	r0, [r3, #0]
 8004408:	6859      	ldr	r1, [r3, #4]
 800440a:	4615      	mov	r5, r2
 800440c:	c503      	stmia	r5!, {r0, r1}
 800440e:	3308      	adds	r3, #8
 8004410:	42bb      	cmp	r3, r7
 8004412:	462a      	mov	r2, r5
 8004414:	d1f7      	bne.n	8004406 <readFlash+0x32>
 8004416:	6818      	ldr	r0, [r3, #0]
 8004418:	6028      	str	r0, [r5, #0]
	HAL_UART_Transmit(&huart1, (uint8_t*) spi_flash_data_intro, strlen(spi_flash_data_intro), 1000);
 800441a:	4630      	mov	r0, r6
 800441c:	f7fb ff38 	bl	8000290 <strlen>
 8004420:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004424:	b282      	uxth	r2, r0
 8004426:	4631      	mov	r1, r6
 8004428:	4833      	ldr	r0, [pc, #204]	@ (80044f8 <readFlash+0x124>)
 800442a:	f003 fc81 	bl	8007d30 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, flashBufferRMCReceived, sizeof(flashBufferRMCReceived), 1000);
 800442e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004432:	492f      	ldr	r1, [pc, #188]	@ (80044f0 <readFlash+0x11c>)
 8004434:	4830      	ldr	r0, [pc, #192]	@ (80044f8 <readFlash+0x124>)
 8004436:	2280      	movs	r2, #128	@ 0x80
 8004438:	f003 fc7a 	bl	8007d30 <HAL_UART_Transmit>

	RMCSTRUCT rmc = {0};
 800443c:	2258      	movs	r2, #88	@ 0x58
 800443e:	2100      	movs	r1, #0
 8004440:	a810      	add	r0, sp, #64	@ 0x40
 8004442:	f007 fc47 	bl	800bcd4 <memset>
	parseRMCString(flashBufferRMCReceived, &rmc);
 8004446:	482a      	ldr	r0, [pc, #168]	@ (80044f0 <readFlash+0x11c>)
 8004448:	a910      	add	r1, sp, #64	@ 0x40
 800444a:	f7ff ff67 	bl	800431c <parseRMCString>

	if(IsPageValid(flashBufferRMCReceived) == 0){
 800444e:	4828      	ldr	r0, [pc, #160]	@ (80044f0 <readFlash+0x11c>)
 8004450:	f7ff fc70 	bl	8003d34 <IsPageValid>
 8004454:	4a29      	ldr	r2, [pc, #164]	@ (80044fc <readFlash+0x128>)
 8004456:	2800      	cmp	r0, #0
 8004458:	d141      	bne.n	80044de <readFlash+0x10a>
		is_read_flash_valid = 0;
 800445a:	6010      	str	r0, [r2, #0]
		rmc.isValid = 0;
 800445c:	901c      	str	r0, [sp, #112]	@ 0x70
		printf("\n\n--------------------- READING FLASH (RMC) ERROR ----------------------------\n\n");
 800445e:	4828      	ldr	r0, [pc, #160]	@ (8004500 <readFlash+0x12c>)
	}
	else{
		is_read_flash_valid = 1;
		rmc.isValid = 1;
		printf("\n\n--------------------- READING FLASH (RMC) SUCCESSFULLY ----------------------------\n\n");
 8004460:	f007 fad8 	bl	800ba14 <puts>
	}

	printf("Date: %02d-%02d-%02d\n", rmc.date.Yr, rmc.date.Mon, rmc.date.Day);
 8004464:	e9dd 3214 	ldrd	r3, r2, [sp, #80]	@ 0x50
 8004468:	9916      	ldr	r1, [sp, #88]	@ 0x58
 800446a:	4826      	ldr	r0, [pc, #152]	@ (8004504 <readFlash+0x130>)
 800446c:	f007 fa62 	bl	800b934 <iprintf>

	printf("Time: %02d:%02d:%02d\n", rmc.tim.hour, rmc.tim.min, rmc.tim.sec);
 8004470:	e9dd 2311 	ldrd	r2, r3, [sp, #68]	@ 0x44
 8004474:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8004476:	4824      	ldr	r0, [pc, #144]	@ (8004508 <readFlash+0x134>)
 8004478:	f007 fa5c 	bl	800b934 <iprintf>

	printf("Location: %.6f %c, %.6f %c\n", rmc.lcation.latitude, rmc.lcation.NS,
 800447c:	f89d 3090 	ldrb.w	r3, [sp, #144]	@ 0x90
 8004480:	9304      	str	r3, [sp, #16]
 8004482:	e9dd 2322 	ldrd	r2, r3, [sp, #136]	@ 0x88
 8004486:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800448a:	f89d 3080 	ldrb.w	r3, [sp, #128]	@ 0x80
 800448e:	9300      	str	r3, [sp, #0]
 8004490:	481e      	ldr	r0, [pc, #120]	@ (800450c <readFlash+0x138>)
 8004492:	e9dd 231e 	ldrd	r2, r3, [sp, #120]	@ 0x78
 8004496:	f007 fa4d 	bl	800b934 <iprintf>
		   rmc.lcation.longitude, rmc.lcation.EW);

	printf("Speed: %.2f\n", rmc.speed);
 800449a:	981a      	ldr	r0, [sp, #104]	@ 0x68
 800449c:	f7fc f864 	bl	8000568 <__aeabi_f2d>
 80044a0:	4602      	mov	r2, r0
 80044a2:	460b      	mov	r3, r1
 80044a4:	481a      	ldr	r0, [pc, #104]	@ (8004510 <readFlash+0x13c>)
 80044a6:	f007 fa45 	bl	800b934 <iprintf>

	printf("Course: %.2f\n", rmc.course);
 80044aa:	981b      	ldr	r0, [sp, #108]	@ 0x6c
 80044ac:	f7fc f85c 	bl	8000568 <__aeabi_f2d>
 80044b0:	4602      	mov	r2, r0
 80044b2:	460b      	mov	r3, r1
 80044b4:	4817      	ldr	r0, [pc, #92]	@ (8004514 <readFlash+0x140>)
 80044b6:	f007 fa3d 	bl	800b934 <iprintf>

	printf("Validity: %s\n", rmc.isValid ? "Valid" : "Invalid");
 80044ba:	4b17      	ldr	r3, [pc, #92]	@ (8004518 <readFlash+0x144>)
 80044bc:	991c      	ldr	r1, [sp, #112]	@ 0x70
 80044be:	4a17      	ldr	r2, [pc, #92]	@ (800451c <readFlash+0x148>)
 80044c0:	4817      	ldr	r0, [pc, #92]	@ (8004520 <readFlash+0x14c>)
 80044c2:	2900      	cmp	r1, #0
 80044c4:	bf0c      	ite	eq
 80044c6:	4611      	moveq	r1, r2
 80044c8:	4619      	movne	r1, r3
 80044ca:	f007 fa33 	bl	800b934 <iprintf>

	return rmc;
 80044ce:	2258      	movs	r2, #88	@ 0x58
 80044d0:	a910      	add	r1, sp, #64	@ 0x40
 80044d2:	4620      	mov	r0, r4
 80044d4:	f008 faa8 	bl	800ca28 <memcpy>
}
 80044d8:	4620      	mov	r0, r4
 80044da:	b027      	add	sp, #156	@ 0x9c
 80044dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		is_read_flash_valid = 1;
 80044de:	2301      	movs	r3, #1
		printf("\n\n--------------------- READING FLASH (RMC) SUCCESSFULLY ----------------------------\n\n");
 80044e0:	4810      	ldr	r0, [pc, #64]	@ (8004524 <readFlash+0x150>)
		is_read_flash_valid = 1;
 80044e2:	6013      	str	r3, [r2, #0]
		rmc.isValid = 1;
 80044e4:	931c      	str	r3, [sp, #112]	@ 0x70
		printf("\n\n--------------------- READING FLASH (RMC) SUCCESSFULLY ----------------------------\n\n");
 80044e6:	e7bb      	b.n	8004460 <readFlash+0x8c>
 80044e8:	200026ac 	.word	0x200026ac
 80044ec:	08011864 	.word	0x08011864
 80044f0:	20003870 	.word	0x20003870
 80044f4:	0801199e 	.word	0x0801199e
 80044f8:	200023c4 	.word	0x200023c4
 80044fc:	20000004 	.word	0x20000004
 8004500:	08011886 	.word	0x08011886
 8004504:	0801192d 	.word	0x0801192d
 8004508:	08011943 	.word	0x08011943
 800450c:	08011959 	.word	0x08011959
 8004510:	08011975 	.word	0x08011975
 8004514:	08011982 	.word	0x08011982
 8004518:	0800fd79 	.word	0x0800fd79
 800451c:	0800fd7f 	.word	0x0800fd7f
 8004520:	08011990 	.word	0x08011990
 8004524:	080118d6 	.word	0x080118d6

08004528 <receiveRMCDataFromGPS>:


void receiveRMCDataFromGPS(void) {
 8004528:	b570      	push	{r4, r5, r6, lr}
	static int countRMCReceived = 0;
//	uint8_t output_buffer[70];

	// Wait until there are at least 10 messages in the queue

	osEvent evt = osMailGet(RMC_MailQFLASHId, 1000); // Wait for mail
 800452a:	4d6b      	ldr	r5, [pc, #428]	@ (80046d8 <receiveRMCDataFromGPS+0x1b0>)
void receiveRMCDataFromGPS(void) {
 800452c:	b09a      	sub	sp, #104	@ 0x68
	osEvent evt = osMailGet(RMC_MailQFLASHId, 1000); // Wait for mail
 800452e:	6829      	ldr	r1, [r5, #0]
 8004530:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004534:	a817      	add	r0, sp, #92	@ 0x5c
 8004536:	f003 fe96 	bl	8008266 <osMailGet>
 800453a:	9917      	ldr	r1, [sp, #92]	@ 0x5c
	if(evt.status == osEventMail){
 800453c:	2920      	cmp	r1, #32
 800453e:	f040 80c4 	bne.w	80046ca <receiveRMCDataFromGPS+0x1a2>
		printf("\nReceived  RMC Data SPI FLASH: \n");
 8004542:	4866      	ldr	r0, [pc, #408]	@ (80046dc <receiveRMCDataFromGPS+0x1b4>)
		RMCSTRUCT *receivedData = (RMCSTRUCT *)evt.value.p;
	//Sending DATA to GSM
		rmc_flash.lcation.latitude = receivedData->lcation.latitude;
 8004544:	4c66      	ldr	r4, [pc, #408]	@ (80046e0 <receiveRMCDataFromGPS+0x1b8>)
		printf("\nReceived  RMC Data SPI FLASH: \n");
 8004546:	f007 fa65 	bl	800ba14 <puts>
		RMCSTRUCT *receivedData = (RMCSTRUCT *)evt.value.p;
 800454a:	9918      	ldr	r1, [sp, #96]	@ 0x60
		rmc_flash.tim.min = receivedData->tim.min;
		rmc_flash.tim.sec = receivedData->tim.sec;
		rmc_flash.date.Yr = receivedData->date.Yr;
		rmc_flash.date.Mon = receivedData->date.Mon;
		rmc_flash.date.Day = receivedData->date.Day;
		osMailFree(RMC_MailQFLASHId, receivedData);
 800454c:	6828      	ldr	r0, [r5, #0]
		rmc_flash.lcation.latitude = receivedData->lcation.latitude;
 800454e:	e9d1 230e 	ldrd	r2, r3, [r1, #56]	@ 0x38
 8004552:	e9c4 230e 	strd	r2, r3, [r4, #56]	@ 0x38
		rmc_flash.lcation.longitude = receivedData->lcation.longitude;
 8004556:	e9d1 2312 	ldrd	r2, r3, [r1, #72]	@ 0x48
 800455a:	e9c4 2312 	strd	r2, r3, [r4, #72]	@ 0x48
		rmc_flash.speed = receivedData->speed;
 800455e:	6a8b      	ldr	r3, [r1, #40]	@ 0x28
 8004560:	62a3      	str	r3, [r4, #40]	@ 0x28
		rmc_flash.course = receivedData->course;
 8004562:	6acb      	ldr	r3, [r1, #44]	@ 0x2c
 8004564:	62e3      	str	r3, [r4, #44]	@ 0x2c
		rmc_flash.lcation.NS = receivedData->lcation.NS;
 8004566:	f891 3040 	ldrb.w	r3, [r1, #64]	@ 0x40
 800456a:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
		rmc_flash.lcation.EW = receivedData->lcation.EW;
 800456e:	f891 3050 	ldrb.w	r3, [r1, #80]	@ 0x50
 8004572:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
		rmc_flash.isValid = receivedData->isValid;
 8004576:	6b0b      	ldr	r3, [r1, #48]	@ 0x30
 8004578:	6323      	str	r3, [r4, #48]	@ 0x30
		rmc_flash.tim.hour = receivedData->tim.hour;
 800457a:	680b      	ldr	r3, [r1, #0]
 800457c:	6023      	str	r3, [r4, #0]
		rmc_flash.tim.min = receivedData->tim.min;
 800457e:	684b      	ldr	r3, [r1, #4]
 8004580:	6063      	str	r3, [r4, #4]
		rmc_flash.tim.sec = receivedData->tim.sec;
 8004582:	688b      	ldr	r3, [r1, #8]
 8004584:	60a3      	str	r3, [r4, #8]
		rmc_flash.date.Yr = receivedData->date.Yr;
 8004586:	698b      	ldr	r3, [r1, #24]
 8004588:	61a3      	str	r3, [r4, #24]
		rmc_flash.date.Mon = receivedData->date.Mon;
 800458a:	694b      	ldr	r3, [r1, #20]
 800458c:	6163      	str	r3, [r4, #20]
		rmc_flash.date.Day = receivedData->date.Day;
 800458e:	690b      	ldr	r3, [r1, #16]
 8004590:	6123      	str	r3, [r4, #16]
		osMailFree(RMC_MailQFLASHId, receivedData);
 8004592:	f003 fea1 	bl	80082d8 <osMailFree>
		if(rmc_flash.date.Yr >= 24){
 8004596:	69a3      	ldr	r3, [r4, #24]
 8004598:	2b17      	cmp	r3, #23
 800459a:	dd47      	ble.n	800462c <receiveRMCDataFromGPS+0x104>
			countRMCReceived++;
 800459c:	4e51      	ldr	r6, [pc, #324]	@ (80046e4 <receiveRMCDataFromGPS+0x1bc>)
			printf("\n\n --------------------------------- COUNT RMC RECEIVED AT SPI FLASH is %d --------------------------\n\n", countRMCReceived);
 800459e:	4852      	ldr	r0, [pc, #328]	@ (80046e8 <receiveRMCDataFromGPS+0x1c0>)
			countRMCReceived++;
 80045a0:	6831      	ldr	r1, [r6, #0]
 80045a2:	3101      	adds	r1, #1
 80045a4:	6031      	str	r1, [r6, #0]
			printf("\n\n --------------------------------- COUNT RMC RECEIVED AT SPI FLASH is %d --------------------------\n\n", countRMCReceived);
 80045a6:	f007 f9c5 	bl	800b934 <iprintf>


			printf("Time Received from GPS AT SPI FLASH: %d:%d:%d\n", rmc_flash.tim.hour, rmc_flash.tim.min, rmc_flash.tim.sec);
 80045aa:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 80045ae:	6821      	ldr	r1, [r4, #0]
 80045b0:	484e      	ldr	r0, [pc, #312]	@ (80046ec <receiveRMCDataFromGPS+0x1c4>)
 80045b2:	f007 f9bf 	bl	800b934 <iprintf>
//
//		printf("Location Received FROM GPS AT SPI FLASH: %.6f %c, %.6f %c\n", rmc_flash.lcation.latitude, rmc_flash.lcation.NS, rmc_flash.lcation.longitude, rmc_flash.lcation.EW);
//
//		printf("Speed FROM GPS AT SPI FLASH: %.2f, Course: %.2f, Valid: %d\n\n\n", rmc_flash.speed, rmc_flash.course, rmc_flash.isValid);

			format_rmc_data(&rmc_flash,(char*) rmcBufferDemo, 128);
 80045b6:	494e      	ldr	r1, [pc, #312]	@ (80046f0 <receiveRMCDataFromGPS+0x1c8>)
 80045b8:	2280      	movs	r2, #128	@ 0x80
 80045ba:	4620      	mov	r0, r4
 80045bc:	f7ff fc96 	bl	8003eec <format_rmc_data>

			if(countRMCReceived == 28){
 80045c0:	6833      	ldr	r3, [r6, #0]
 80045c2:	2b1c      	cmp	r3, #28
 80045c4:	d134      	bne.n	8004630 <receiveRMCDataFromGPS+0x108>

				saveRMC();
 80045c6:	f7ff fce7 	bl	8003f98 <saveRMC>
				printf("---------------------Sending the current data----------------");
 80045ca:	484a      	ldr	r0, [pc, #296]	@ (80046f4 <receiveRMCDataFromGPS+0x1cc>)
				mail_gsm.rmc.lcation.latitude = rmc_flash.lcation.latitude;
 80045cc:	4d4a      	ldr	r5, [pc, #296]	@ (80046f8 <receiveRMCDataFromGPS+0x1d0>)
				printf("---------------------Sending the current data----------------");
 80045ce:	f007 f9b1 	bl	800b934 <iprintf>
				mail_gsm.rmc.lcation.latitude = rmc_flash.lcation.latitude;
 80045d2:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	@ 0x38
 80045d6:	e9c5 230e 	strd	r2, r3, [r5, #56]	@ 0x38
				mail_gsm.rmc.lcation.longitude = rmc_flash.lcation.longitude;
 80045da:	e9d4 2312 	ldrd	r2, r3, [r4, #72]	@ 0x48
 80045de:	e9c5 2312 	strd	r2, r3, [r5, #72]	@ 0x48
				mail_gsm.rmc.speed = rmc_flash.speed;
 80045e2:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80045e4:	62ab      	str	r3, [r5, #40]	@ 0x28
				mail_gsm.rmc.course = rmc_flash.course;
 80045e6:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80045e8:	62eb      	str	r3, [r5, #44]	@ 0x2c
				mail_gsm.rmc.lcation.NS = rmc_flash.lcation.NS;
 80045ea:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 80045ee:	f885 3040 	strb.w	r3, [r5, #64]	@ 0x40
				mail_gsm.rmc.lcation.EW = rmc_flash.lcation.EW;
 80045f2:	f894 3050 	ldrb.w	r3, [r4, #80]	@ 0x50
 80045f6:	f885 3050 	strb.w	r3, [r5, #80]	@ 0x50
				mail_gsm.rmc.isValid = rmc_flash.isValid;
 80045fa:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80045fc:	632b      	str	r3, [r5, #48]	@ 0x30
				mail_gsm.rmc.tim.hour = rmc_flash.tim.hour;
 80045fe:	6823      	ldr	r3, [r4, #0]
 8004600:	602b      	str	r3, [r5, #0]
				mail_gsm.rmc.tim.min = rmc_flash.tim.min;
 8004602:	6863      	ldr	r3, [r4, #4]
 8004604:	606b      	str	r3, [r5, #4]
				mail_gsm.rmc.tim.sec = rmc_flash.tim.sec;
 8004606:	68a3      	ldr	r3, [r4, #8]
 8004608:	60ab      	str	r3, [r5, #8]
				mail_gsm.rmc.date.Yr = rmc_flash.date.Yr;
 800460a:	69a3      	ldr	r3, [r4, #24]
 800460c:	61ab      	str	r3, [r5, #24]
				mail_gsm.rmc.date.Mon = rmc_flash.date.Mon;
 800460e:	6963      	ldr	r3, [r4, #20]
 8004610:	616b      	str	r3, [r5, #20]
				mail_gsm.rmc.date.Day = rmc_flash.date.Day;
 8004612:	6923      	ldr	r3, [r4, #16]
 8004614:	612b      	str	r3, [r5, #16]
				mail_gsm.address = current_addr;
 8004616:	4b39      	ldr	r3, [pc, #228]	@ (80046fc <receiveRMCDataFromGPS+0x1d4>)

				printf("-------------------SENDING CURRENT ADDR DATA: %08lx----------------------", mail_gsm.address);
 8004618:	4839      	ldr	r0, [pc, #228]	@ (8004700 <receiveRMCDataFromGPS+0x1d8>)
				mail_gsm.address = current_addr;
 800461a:	6819      	ldr	r1, [r3, #0]
 800461c:	65a9      	str	r1, [r5, #88]	@ 0x58
				printf("-------------------SENDING CURRENT ADDR DATA: %08lx----------------------", mail_gsm.address);
 800461e:	f007 f989 	bl	800b934 <iprintf>
				sendRMCDataWithAddrToGSM(&mail_gsm);
 8004622:	4628      	mov	r0, r5
 8004624:	f7ff fe5a 	bl	80042dc <sendRMCDataWithAddrToGSM>
				countRMCReceived = 0;
 8004628:	2300      	movs	r3, #0
 800462a:	6033      	str	r3, [r6, #0]
		}
	}
	else{
		printf("\n\n-------------------------- RECEIVED MAIL FROM GPS AT SPI FLASH FAILED: %d ------------------------\n\n",evt.status);
	}
}
 800462c:	b01a      	add	sp, #104	@ 0x68
 800462e:	bd70      	pop	{r4, r5, r6, pc}
				printf("\n\n ---------------------------- There is no mail in SPI FLASH FROM GPS ------------------\n\n");
 8004630:	4834      	ldr	r0, [pc, #208]	@ (8004704 <receiveRMCDataFromGPS+0x1dc>)
 8004632:	f007 f9ef 	bl	800ba14 <puts>
				if(is_using_flash == 1 && is_disconnect == 0 && is_keep_up == 1){
 8004636:	4b34      	ldr	r3, [pc, #208]	@ (8004708 <receiveRMCDataFromGPS+0x1e0>)
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	2b01      	cmp	r3, #1
 800463c:	d1f6      	bne.n	800462c <receiveRMCDataFromGPS+0x104>
 800463e:	4b33      	ldr	r3, [pc, #204]	@ (800470c <receiveRMCDataFromGPS+0x1e4>)
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	2b00      	cmp	r3, #0
 8004644:	d1f2      	bne.n	800462c <receiveRMCDataFromGPS+0x104>
 8004646:	4b32      	ldr	r3, [pc, #200]	@ (8004710 <receiveRMCDataFromGPS+0x1e8>)
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	2b01      	cmp	r3, #1
 800464c:	d1ee      	bne.n	800462c <receiveRMCDataFromGPS+0x104>
					if(checkAddrExistInQueue(start_addr_disconnect, &result_addr_queue) && (start_addr_disconnect <= (FLASH_END_ADDRESS - 0x100))){
 800464e:	4c31      	ldr	r4, [pc, #196]	@ (8004714 <receiveRMCDataFromGPS+0x1ec>)
 8004650:	4931      	ldr	r1, [pc, #196]	@ (8004718 <receiveRMCDataFromGPS+0x1f0>)
 8004652:	6820      	ldr	r0, [r4, #0]
 8004654:	f7fe fdc0 	bl	80031d8 <checkAddrExistInQueue>
 8004658:	b188      	cbz	r0, 800467e <receiveRMCDataFromGPS+0x156>
 800465a:	6823      	ldr	r3, [r4, #0]
 800465c:	f5b3 4f9e 	cmp.w	r3, #20224	@ 0x4f00
 8004660:	d80d      	bhi.n	800467e <receiveRMCDataFromGPS+0x156>
						printf("\n-------SKIPPING address cause it was sent already: %08lx--------\n", start_addr_disconnect);
 8004662:	6821      	ldr	r1, [r4, #0]
 8004664:	482d      	ldr	r0, [pc, #180]	@ (800471c <receiveRMCDataFromGPS+0x1f4>)
 8004666:	f007 f965 	bl	800b934 <iprintf>
						if(start_addr_disconnect <= (current_addr - 128)) start_addr_disconnect +=128;
 800466a:	4b24      	ldr	r3, [pc, #144]	@ (80046fc <receiveRMCDataFromGPS+0x1d4>)
 800466c:	6822      	ldr	r2, [r4, #0]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	3b80      	subs	r3, #128	@ 0x80
 8004672:	4293      	cmp	r3, r2
 8004674:	d3da      	bcc.n	800462c <receiveRMCDataFromGPS+0x104>
 8004676:	6823      	ldr	r3, [r4, #0]
 8004678:	3380      	adds	r3, #128	@ 0x80
 800467a:	6023      	str	r3, [r4, #0]
 800467c:	e7d6      	b.n	800462c <receiveRMCDataFromGPS+0x104>
						addr_to_get_from_FLASH = start_addr_disconnect - (count_shiftleft * 128);
 800467e:	4a28      	ldr	r2, [pc, #160]	@ (8004720 <receiveRMCDataFromGPS+0x1f8>)
 8004680:	6823      	ldr	r3, [r4, #0]
 8004682:	7812      	ldrb	r2, [r2, #0]
 8004684:	4e27      	ldr	r6, [pc, #156]	@ (8004724 <receiveRMCDataFromGPS+0x1fc>)
						printf("\n---------------- Sending data in disconnected phase to GSM: %08lx -------------------\n", start_addr_disconnect);
 8004686:	6821      	ldr	r1, [r4, #0]
						mail_gsm.rmc = readFlash(addr_to_get_from_FLASH);
 8004688:	4d1b      	ldr	r5, [pc, #108]	@ (80046f8 <receiveRMCDataFromGPS+0x1d0>)
						printf("\n---------------- Sending data in disconnected phase to GSM: %08lx -------------------\n", start_addr_disconnect);
 800468a:	4827      	ldr	r0, [pc, #156]	@ (8004728 <receiveRMCDataFromGPS+0x200>)
						addr_to_get_from_FLASH = start_addr_disconnect - (count_shiftleft * 128);
 800468c:	eba3 13c2 	sub.w	r3, r3, r2, lsl #7
						if(addr_to_get_from_FLASH < FLASH_START_ADDRESS) addr_to_get_from_FLASH = FLASH_START_ADDRESS;
 8004690:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004694:	bf38      	it	cc
 8004696:	f44f 5340 	movcc.w	r3, #12288	@ 0x3000
						addr_to_get_from_FLASH = start_addr_disconnect - (count_shiftleft * 128);
 800469a:	6033      	str	r3, [r6, #0]
						printf("\n---------------- Sending data in disconnected phase to GSM: %08lx -------------------\n", start_addr_disconnect);
 800469c:	f007 f94a 	bl	800b934 <iprintf>
						mail_gsm.rmc = readFlash(addr_to_get_from_FLASH);
 80046a0:	6831      	ldr	r1, [r6, #0]
 80046a2:	4668      	mov	r0, sp
 80046a4:	f7ff fe96 	bl	80043d4 <readFlash>
 80046a8:	2258      	movs	r2, #88	@ 0x58
 80046aa:	4669      	mov	r1, sp
 80046ac:	4628      	mov	r0, r5
 80046ae:	f008 f9bb 	bl	800ca28 <memcpy>
						mail_gsm.address = start_addr_disconnect;
 80046b2:	6823      	ldr	r3, [r4, #0]
 80046b4:	65ab      	str	r3, [r5, #88]	@ 0x58
						if(is_read_flash_valid == 1)
 80046b6:	4b1d      	ldr	r3, [pc, #116]	@ (800472c <receiveRMCDataFromGPS+0x204>)
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	2b01      	cmp	r3, #1
 80046bc:	d1b6      	bne.n	800462c <receiveRMCDataFromGPS+0x104>
							sendRMCDataWithAddrToGSM(&mail_gsm);
 80046be:	4628      	mov	r0, r5
}
 80046c0:	b01a      	add	sp, #104	@ 0x68
 80046c2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
							sendRMCDataWithAddrToGSM(&mail_gsm);
 80046c6:	f7ff be09 	b.w	80042dc <sendRMCDataWithAddrToGSM>
		printf("\n\n-------------------------- RECEIVED MAIL FROM GPS AT SPI FLASH FAILED: %d ------------------------\n\n",evt.status);
 80046ca:	4819      	ldr	r0, [pc, #100]	@ (8004730 <receiveRMCDataFromGPS+0x208>)
}
 80046cc:	b01a      	add	sp, #104	@ 0x68
 80046ce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		printf("\n\n-------------------------- RECEIVED MAIL FROM GPS AT SPI FLASH FAILED: %d ------------------------\n\n",evt.status);
 80046d2:	f007 b92f 	b.w	800b934 <iprintf>
 80046d6:	bf00      	nop
 80046d8:	2000218c 	.word	0x2000218c
 80046dc:	080119c2 	.word	0x080119c2
 80046e0:	20002718 	.word	0x20002718
 80046e4:	200026a8 	.word	0x200026a8
 80046e8:	080119e2 	.word	0x080119e2
 80046ec:	08011a4a 	.word	0x08011a4a
 80046f0:	200037f0 	.word	0x200037f0
 80046f4:	08011a79 	.word	0x08011a79
 80046f8:	200026b8 	.word	0x200026b8
 80046fc:	20000008 	.word	0x20000008
 8004700:	08011ab7 	.word	0x08011ab7
 8004704:	08011b01 	.word	0x08011b01
 8004708:	20001dc0 	.word	0x20001dc0
 800470c:	20001dc4 	.word	0x20001dc4
 8004710:	20001dbc 	.word	0x20001dbc
 8004714:	20001ba0 	.word	0x20001ba0
 8004718:	20001ba4 	.word	0x20001ba4
 800471c:	08011b5c 	.word	0x08011b5c
 8004720:	20001db8 	.word	0x20001db8
 8004724:	200038f4 	.word	0x200038f4
 8004728:	08011b9f 	.word	0x08011b9f
 800472c:	20000004 	.word	0x20000004
 8004730:	08011bf7 	.word	0x08011bf7
 8004734:	00000000 	.word	0x00000000

08004738 <StartSpiFlash>:



void StartSpiFlash(void const * argument)
{
 8004738:	b580      	push	{r7, lr}
  /* USER CODE BEGIN StartSpiFlash */
  /* Infinite loop */
	printf("\n\n\n------------------------------- STARTING SPI FLASH ------------------------------\n\n\n");
 800473a:	4847      	ldr	r0, [pc, #284]	@ (8004858 <StartSpiFlash+0x120>)
//	myMutex = osMutexNew(NULL);  // NULL means default attributes
//	if (myMutex == NULL) {
//		printf("\n\n ----------------- Failed to create mutex -----------------\n\n");
//	}
//	printf("\n\n --------------------Creating a MESSAGE QUEUE --------------------- \n\n");
	rmc_saved = readFlash(0x9000);
 800473c:	4c47      	ldr	r4, [pc, #284]	@ (800485c <StartSpiFlash+0x124>)
	current_addr = address_rmc;
 800473e:	4e48      	ldr	r6, [pc, #288]	@ (8004860 <StartSpiFlash+0x128>)
{
 8004740:	b09c      	sub	sp, #112	@ 0x70
	printf("\n\n\n------------------------------- STARTING SPI FLASH ------------------------------\n\n\n");
 8004742:	f007 f967 	bl	800ba14 <puts>
	current_addr = address_rmc;
 8004746:	4b47      	ldr	r3, [pc, #284]	@ (8004864 <StartSpiFlash+0x12c>)
	rmc_saved = readFlash(0x9000);
 8004748:	f44f 4110 	mov.w	r1, #36864	@ 0x9000
	current_addr = address_rmc;
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	6033      	str	r3, [r6, #0]
	rmc_saved = readFlash(0x9000);
 8004750:	4668      	mov	r0, sp
 8004752:	f7ff fe3f 	bl	80043d4 <readFlash>
 8004756:	2258      	movs	r2, #88	@ 0x58
 8004758:	4669      	mov	r1, sp
 800475a:	4620      	mov	r0, r4
 800475c:	f008 f964 	bl	800ca28 <memcpy>
	printf("\n-------------------------- BACK UP GPS FROM FLASH ----------------------- \n");
 8004760:	4841      	ldr	r0, [pc, #260]	@ (8004868 <StartSpiFlash+0x130>)
 8004762:	f007 f957 	bl	800ba14 <puts>
	if(rmc_saved.isValid == 0){
 8004766:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8004768:	b9f5      	cbnz	r5, 80047a8 <StartSpiFlash+0x70>
		printf("There is not back up GPS from FLASH");
 800476a:	4840      	ldr	r0, [pc, #256]	@ (800486c <StartSpiFlash+0x134>)
 800476c:	f007 f8e2 	bl	800b934 <iprintf>
		rmc_saved.tim.hour = 0;
		rmc_saved.tim.min = 0;
		rmc_saved.tim.sec = 0;
		rmc_saved.lcation.latitude = 20.998022;
 8004770:	a335      	add	r3, pc, #212	@ (adr r3, 8004848 <StartSpiFlash+0x110>)
 8004772:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004776:	e9c4 230e 	strd	r2, r3, [r4, #56]	@ 0x38
		rmc_saved.lcation.longitude = 105.794756;
 800477a:	a335      	add	r3, pc, #212	@ (adr r3, 8004850 <StartSpiFlash+0x118>)
 800477c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004780:	e9c4 2312 	strd	r2, r3, [r4, #72]	@ 0x48
		rmc_saved.speed = 22.4;
 8004784:	4b3a      	ldr	r3, [pc, #232]	@ (8004870 <StartSpiFlash+0x138>)
 8004786:	62a3      	str	r3, [r4, #40]	@ 0x28
		rmc_saved.course = 30.5;
 8004788:	4b3a      	ldr	r3, [pc, #232]	@ (8004874 <StartSpiFlash+0x13c>)
 800478a:	62e3      	str	r3, [r4, #44]	@ 0x2c
		rmc_saved.lcation.NS = 'N';
 800478c:	234e      	movs	r3, #78	@ 0x4e
 800478e:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
		rmc_saved.tim.min = 0;
 8004792:	e9c4 5500 	strd	r5, r5, [r4]
		rmc_saved.lcation.EW = 'E';
 8004796:	2345      	movs	r3, #69	@ 0x45
		rmc_saved.isValid = 1;
		rmc_saved.date.Day = 0;
		rmc_saved.date.Mon = 0;
 8004798:	e9c4 5504 	strd	r5, r5, [r4, #16]
		rmc_saved.lcation.EW = 'E';
 800479c:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
		rmc_saved.isValid = 1;
 80047a0:	2301      	movs	r3, #1
		rmc_saved.tim.sec = 0;
 80047a2:	60a5      	str	r5, [r4, #8]
		rmc_saved.isValid = 1;
 80047a4:	6323      	str	r3, [r4, #48]	@ 0x30
		rmc_saved.date.Yr = 0;
 80047a6:	61a5      	str	r5, [r4, #24]
	}

	for(;;){
		if (osMutexWait(myMutexHandle, osWaitForever) == osOK){
 80047a8:	4d33      	ldr	r5, [pc, #204]	@ (8004878 <StartSpiFlash+0x140>)
	//		uint32_t freeStack2 = osThreadGetStackSpace(SpiFlashHandle);
	//		printf("\n\n --------------Thread SPI FLASH %p stack: %04ld bytes remaining----------\n\n", SpiFlashHandle, freeStack2);
			W25_Reset();
			W25_ReadJedecID();
			W25_Reset();
			W25_ReadData(current_addr, flashBufferRMCReceived, 128);
 80047aa:	f8df 80e4 	ldr.w	r8, [pc, #228]	@ 8004890 <StartSpiFlash+0x158>
			char spi_flash_data_intro[] = "Flash DATA received: ";
			HAL_UART_Transmit(&huart1, (uint8_t*) spi_flash_data_intro, strlen(spi_flash_data_intro), 1000);
 80047ae:	4f33      	ldr	r7, [pc, #204]	@ (800487c <StartSpiFlash+0x144>)
		if (osMutexWait(myMutexHandle, osWaitForever) == osOK){
 80047b0:	6828      	ldr	r0, [r5, #0]
 80047b2:	f04f 31ff 	mov.w	r1, #4294967295
 80047b6:	f003 fc3a 	bl	800802e <osMutexWait>
 80047ba:	2800      	cmp	r0, #0
 80047bc:	d1f8      	bne.n	80047b0 <StartSpiFlash+0x78>
			osDelay(500);
 80047be:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80047c2:	f003 fc25 	bl	8008010 <osDelay>
			printf("\n\n--------------------------- INSIDE SPI FLASH --------------------------------\n\n");
 80047c6:	482e      	ldr	r0, [pc, #184]	@ (8004880 <StartSpiFlash+0x148>)
 80047c8:	f007 f924 	bl	800ba14 <puts>
			W25_Reset();
 80047cc:	f7ff f95f 	bl	8003a8e <W25_Reset>
			W25_ReadJedecID();
 80047d0:	f7ff f98a 	bl	8003ae8 <W25_ReadJedecID>
			W25_Reset();
 80047d4:	f7ff f95b 	bl	8003a8e <W25_Reset>
			W25_ReadData(current_addr, flashBufferRMCReceived, 128);
 80047d8:	2280      	movs	r2, #128	@ 0x80
 80047da:	6830      	ldr	r0, [r6, #0]
 80047dc:	4641      	mov	r1, r8
 80047de:	f7ff fa77 	bl	8003cd0 <W25_ReadData>
			char spi_flash_data_intro[] = "Flash DATA received: ";
 80047e2:	4b28      	ldr	r3, [pc, #160]	@ (8004884 <StartSpiFlash+0x14c>)
 80047e4:	aa16      	add	r2, sp, #88	@ 0x58
 80047e6:	f103 0c10 	add.w	ip, r3, #16
 80047ea:	4691      	mov	r9, r2
 80047ec:	6818      	ldr	r0, [r3, #0]
 80047ee:	6859      	ldr	r1, [r3, #4]
 80047f0:	4614      	mov	r4, r2
 80047f2:	c403      	stmia	r4!, {r0, r1}
 80047f4:	3308      	adds	r3, #8
 80047f6:	4563      	cmp	r3, ip
 80047f8:	4622      	mov	r2, r4
 80047fa:	d1f7      	bne.n	80047ec <StartSpiFlash+0xb4>
 80047fc:	6818      	ldr	r0, [r3, #0]
 80047fe:	889b      	ldrh	r3, [r3, #4]
 8004800:	6020      	str	r0, [r4, #0]
 8004802:	80a3      	strh	r3, [r4, #4]
			HAL_UART_Transmit(&huart1, (uint8_t*) spi_flash_data_intro, strlen(spi_flash_data_intro), 1000);
 8004804:	4648      	mov	r0, r9
 8004806:	f7fb fd43 	bl	8000290 <strlen>
 800480a:	4649      	mov	r1, r9
 800480c:	b282      	uxth	r2, r0
 800480e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004812:	4638      	mov	r0, r7
 8004814:	f003 fa8c 	bl	8007d30 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart1, flashBufferRMCReceived, sizeof(flashBufferRMCReceived), 1000);
 8004818:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800481c:	2280      	movs	r2, #128	@ 0x80
 800481e:	4641      	mov	r1, r8
 8004820:	4638      	mov	r0, r7
 8004822:	f003 fa85 	bl	8007d30 <HAL_UART_Transmit>
			printf("\n------------- Current address FLASH: %08lx -------------\n", current_addr);
 8004826:	6831      	ldr	r1, [r6, #0]
 8004828:	4817      	ldr	r0, [pc, #92]	@ (8004888 <StartSpiFlash+0x150>)
 800482a:	f007 f883 	bl	800b934 <iprintf>
			//receiveTaxData();
			receiveRMCDataFromGPS();
 800482e:	f7ff fe7b 	bl	8004528 <receiveRMCDataFromGPS>
			printf("\n\n");
 8004832:	4816      	ldr	r0, [pc, #88]	@ (800488c <StartSpiFlash+0x154>)
 8004834:	f007 f8ee 	bl	800ba14 <puts>
			osMutexRelease(myMutexHandle);
 8004838:	6828      	ldr	r0, [r5, #0]
 800483a:	f003 fc1e 	bl	800807a <osMutexRelease>
			osDelay(500);
 800483e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8004842:	f003 fbe5 	bl	8008010 <osDelay>
 8004846:	e7b3      	b.n	80047b0 <StartSpiFlash+0x78>
 8004848:	5eaab042 	.word	0x5eaab042
 800484c:	4034ff7e 	.word	0x4034ff7e
 8004850:	48451330 	.word	0x48451330
 8004854:	405a72dd 	.word	0x405a72dd
 8004858:	08011c5e 	.word	0x08011c5e
 800485c:	20000378 	.word	0x20000378
 8004860:	20000008 	.word	0x20000008
 8004864:	2000000c 	.word	0x2000000c
 8004868:	08011cb5 	.word	0x08011cb5
 800486c:	08011d01 	.word	0x08011d01
 8004870:	41b33333 	.word	0x41b33333
 8004874:	41f40000 	.word	0x41f40000
 8004878:	20002194 	.word	0x20002194
 800487c:	200023c4 	.word	0x200023c4
 8004880:	08011d25 	.word	0x08011d25
 8004884:	080117ca 	.word	0x080117ca
 8004888:	08011d76 	.word	0x08011d76
 800488c:	08010fa2 	.word	0x08010fa2
 8004890:	20003870 	.word	0x20003870

08004894 <HAL_MspInit>:

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004894:	4b0d      	ldr	r3, [pc, #52]	@ (80048cc <HAL_MspInit+0x38>)
 8004896:	699a      	ldr	r2, [r3, #24]
 8004898:	f042 0201 	orr.w	r2, r2, #1
 800489c:	619a      	str	r2, [r3, #24]
 800489e:	699a      	ldr	r2, [r3, #24]
{
 80048a0:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80048a2:	f002 0201 	and.w	r2, r2, #1
 80048a6:	9200      	str	r2, [sp, #0]
 80048a8:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80048aa:	69da      	ldr	r2, [r3, #28]
 80048ac:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80048b0:	61da      	str	r2, [r3, #28]
 80048b2:	69db      	ldr	r3, [r3, #28]
 80048b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80048b8:	9301      	str	r3, [sp, #4]
 80048ba:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80048bc:	2200      	movs	r2, #0
 80048be:	210f      	movs	r1, #15
 80048c0:	f06f 0001 	mvn.w	r0, #1

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80048c4:	b002      	add	sp, #8
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80048c6:	f001 b8e9 	b.w	8005a9c <HAL_NVIC_SetPriority>
 80048ca:	bf00      	nop
 80048cc:	40021000 	.word	0x40021000

080048d0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80048d0:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80048d2:	2214      	movs	r2, #20
{
 80048d4:	b08a      	sub	sp, #40	@ 0x28
 80048d6:	4605      	mov	r5, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80048d8:	2100      	movs	r1, #0
 80048da:	eb0d 0002 	add.w	r0, sp, r2
 80048de:	f007 f9f9 	bl	800bcd4 <memset>
  if(hadc->Instance==ADC2)
 80048e2:	682b      	ldr	r3, [r5, #0]
 80048e4:	4a3d      	ldr	r2, [pc, #244]	@ (80049dc <HAL_ADC_MspInit+0x10c>)
 80048e6:	4293      	cmp	r3, r2
 80048e8:	d137      	bne.n	800495a <HAL_ADC_MspInit+0x8a>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80048ea:	4b3d      	ldr	r3, [pc, #244]	@ (80049e0 <HAL_ADC_MspInit+0x110>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA2_Channel1;
 80048ec:	4c3d      	ldr	r4, [pc, #244]	@ (80049e4 <HAL_ADC_MspInit+0x114>)
    __HAL_RCC_ADC12_CLK_ENABLE();
 80048ee:	695a      	ldr	r2, [r3, #20]
 80048f0:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80048f4:	615a      	str	r2, [r3, #20]
 80048f6:	695a      	ldr	r2, [r3, #20]
 80048f8:	f002 5280 	and.w	r2, r2, #268435456	@ 0x10000000
 80048fc:	9201      	str	r2, [sp, #4]
 80048fe:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004900:	695a      	ldr	r2, [r3, #20]
 8004902:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8004906:	615a      	str	r2, [r3, #20]
 8004908:	695b      	ldr	r3, [r3, #20]
 800490a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800490e:	9302      	str	r3, [sp, #8]
 8004910:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004912:	2620      	movs	r6, #32
 8004914:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004916:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800491a:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800491c:	e9cd 6305 	strd	r6, r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004920:	f001 f9e0 	bl	8005ce4 <HAL_GPIO_Init>
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004924:	f44f 7280 	mov.w	r2, #256	@ 0x100
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004928:	f8df c0cc 	ldr.w	ip, [pc, #204]	@ 80049f8 <HAL_ADC_MspInit+0x128>
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800492c:	f04f 0e80 	mov.w	lr, #128	@ 0x80
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004930:	2300      	movs	r3, #0
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004932:	e9c4 e203 	strd	lr, r2, [r4, #12]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8004936:	4620      	mov	r0, r4
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004938:	f44f 6280 	mov.w	r2, #1024	@ 0x400
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800493c:	e9c4 c300 	strd	ip, r3, [r4]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8004940:	e9c4 2605 	strd	r2, r6, [r4, #20]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8004944:	60a3      	str	r3, [r4, #8]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8004946:	61e3      	str	r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8004948:	f001 f908 	bl	8005b5c <HAL_DMA_Init>
 800494c:	b108      	cbz	r0, 8004952 <HAL_ADC_MspInit+0x82>
    {
      Error_Handler();
 800494e:	f7ff f856 	bl	80039fe <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8004952:	63ac      	str	r4, [r5, #56]	@ 0x38
 8004954:	6265      	str	r5, [r4, #36]	@ 0x24
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8004956:	b00a      	add	sp, #40	@ 0x28
 8004958:	bd70      	pop	{r4, r5, r6, pc}
  else if(hadc->Instance==ADC3)
 800495a:	4a23      	ldr	r2, [pc, #140]	@ (80049e8 <HAL_ADC_MspInit+0x118>)
 800495c:	4293      	cmp	r3, r2
 800495e:	d1fa      	bne.n	8004956 <HAL_ADC_MspInit+0x86>
    __HAL_RCC_ADC34_CLK_ENABLE();
 8004960:	4b1f      	ldr	r3, [pc, #124]	@ (80049e0 <HAL_ADC_MspInit+0x110>)
    hdma_adc3.Instance = DMA2_Channel5;
 8004962:	4c22      	ldr	r4, [pc, #136]	@ (80049ec <HAL_ADC_MspInit+0x11c>)
    __HAL_RCC_ADC34_CLK_ENABLE();
 8004964:	695a      	ldr	r2, [r3, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004966:	4822      	ldr	r0, [pc, #136]	@ (80049f0 <HAL_ADC_MspInit+0x120>)
    __HAL_RCC_ADC34_CLK_ENABLE();
 8004968:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 800496c:	615a      	str	r2, [r3, #20]
 800496e:	695a      	ldr	r2, [r3, #20]
 8004970:	f002 5200 	and.w	r2, r2, #536870912	@ 0x20000000
 8004974:	9203      	str	r2, [sp, #12]
 8004976:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004978:	695a      	ldr	r2, [r3, #20]
 800497a:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800497e:	615a      	str	r2, [r3, #20]
 8004980:	695b      	ldr	r3, [r3, #20]
 8004982:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004986:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004988:	2201      	movs	r2, #1
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800498a:	9b04      	ldr	r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800498c:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800498e:	2303      	movs	r3, #3
 8004990:	e9cd 2305 	strd	r2, r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004994:	f001 f9a6 	bl	8005ce4 <HAL_GPIO_Init>
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004998:	2080      	movs	r0, #128	@ 0x80
 800499a:	f44f 7280 	mov.w	r2, #256	@ 0x100
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800499e:	4915      	ldr	r1, [pc, #84]	@ (80049f4 <HAL_ADC_MspInit+0x124>)
 80049a0:	2300      	movs	r3, #0
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80049a2:	e9c4 0203 	strd	r0, r2, [r4, #12]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 80049a6:	f44f 6680 	mov.w	r6, #1024	@ 0x400
 80049aa:	2220      	movs	r2, #32
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 80049ac:	4620      	mov	r0, r4
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80049ae:	e9c4 1300 	strd	r1, r3, [r4]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 80049b2:	e9c4 6205 	strd	r6, r2, [r4, #20]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 80049b6:	60a3      	str	r3, [r4, #8]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 80049b8:	61e3      	str	r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 80049ba:	f001 f8cf 	bl	8005b5c <HAL_DMA_Init>
 80049be:	b108      	cbz	r0, 80049c4 <HAL_ADC_MspInit+0xf4>
      Error_Handler();
 80049c0:	f7ff f81d 	bl	80039fe <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 80049c4:	63ac      	str	r4, [r5, #56]	@ 0x38
    HAL_NVIC_SetPriority(ADC3_IRQn, 5, 0);
 80049c6:	2200      	movs	r2, #0
 80049c8:	2105      	movs	r1, #5
 80049ca:	202f      	movs	r0, #47	@ 0x2f
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 80049cc:	6265      	str	r5, [r4, #36]	@ 0x24
    HAL_NVIC_SetPriority(ADC3_IRQn, 5, 0);
 80049ce:	f001 f865 	bl	8005a9c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC3_IRQn);
 80049d2:	202f      	movs	r0, #47	@ 0x2f
 80049d4:	f001 f894 	bl	8005b00 <HAL_NVIC_EnableIRQ>
}
 80049d8:	e7bd      	b.n	8004956 <HAL_ADC_MspInit+0x86>
 80049da:	bf00      	nop
 80049dc:	50000100 	.word	0x50000100
 80049e0:	40021000 	.word	0x40021000
 80049e4:	200025c4 	.word	0x200025c4
 80049e8:	50000400 	.word	0x50000400
 80049ec:	20002580 	.word	0x20002580
 80049f0:	48000400 	.word	0x48000400
 80049f4:	40020458 	.word	0x40020458
 80049f8:	40020408 	.word	0x40020408

080049fc <HAL_RTC_MspInit>:
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
  if(hrtc->Instance==RTC)
 80049fc:	6802      	ldr	r2, [r0, #0]
 80049fe:	4b07      	ldr	r3, [pc, #28]	@ (8004a1c <HAL_RTC_MspInit+0x20>)
 8004a00:	429a      	cmp	r2, r3
 8004a02:	d10a      	bne.n	8004a1a <HAL_RTC_MspInit+0x1e>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a04:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8004a08:	fa92 f2a2 	rbit	r2, r2
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8004a0c:	4b04      	ldr	r3, [pc, #16]	@ (8004a20 <HAL_RTC_MspInit+0x24>)
 8004a0e:	fab2 f282 	clz	r2, r2
 8004a12:	4413      	add	r3, r2
 8004a14:	009b      	lsls	r3, r3, #2
 8004a16:	2201      	movs	r2, #1
 8004a18:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTC_MspInit 1 */

  }

}
 8004a1a:	4770      	bx	lr
 8004a1c:	40002800 	.word	0x40002800
 8004a20:	10908100 	.word	0x10908100

08004a24 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004a24:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a26:	2214      	movs	r2, #20
{
 8004a28:	b08a      	sub	sp, #40	@ 0x28
 8004a2a:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a2c:	2100      	movs	r1, #0
 8004a2e:	eb0d 0002 	add.w	r0, sp, r2
 8004a32:	f007 f94f 	bl	800bcd4 <memset>
  if(hspi->Instance==SPI1)
 8004a36:	6823      	ldr	r3, [r4, #0]
 8004a38:	4a1e      	ldr	r2, [pc, #120]	@ (8004ab4 <HAL_SPI_MspInit+0x90>)
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	d120      	bne.n	8004a80 <HAL_SPI_MspInit+0x5c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004a3e:	4b1e      	ldr	r3, [pc, #120]	@ (8004ab8 <HAL_SPI_MspInit+0x94>)
 8004a40:	699a      	ldr	r2, [r3, #24]
 8004a42:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004a46:	619a      	str	r2, [r3, #24]
 8004a48:	699a      	ldr	r2, [r3, #24]
 8004a4a:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8004a4e:	9201      	str	r2, [sp, #4]
 8004a50:	9a01      	ldr	r2, [sp, #4]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004a52:	695a      	ldr	r2, [r3, #20]
 8004a54:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8004a58:	615a      	str	r2, [r3, #20]
 8004a5a:	695b      	ldr	r3, [r3, #20]
 8004a5c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004a60:	9302      	str	r3, [sp, #8]
 8004a62:	9b02      	ldr	r3, [sp, #8]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8004a64:	2338      	movs	r3, #56	@ 0x38
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8004a66:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a68:	2302      	movs	r3, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004a6a:	2103      	movs	r1, #3
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a6c:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004a6e:	2305      	movs	r3, #5
 8004a70:	e9cd 1308 	strd	r1, r3, [sp, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004a74:	4811      	ldr	r0, [pc, #68]	@ (8004abc <HAL_SPI_MspInit+0x98>)
 8004a76:	a905      	add	r1, sp, #20
 8004a78:	f001 f934 	bl	8005ce4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8004a7c:	b00a      	add	sp, #40	@ 0x28
 8004a7e:	bd10      	pop	{r4, pc}
  else if(hspi->Instance==SPI2)
 8004a80:	4a0f      	ldr	r2, [pc, #60]	@ (8004ac0 <HAL_SPI_MspInit+0x9c>)
 8004a82:	4293      	cmp	r3, r2
 8004a84:	d1fa      	bne.n	8004a7c <HAL_SPI_MspInit+0x58>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8004a86:	4b0c      	ldr	r3, [pc, #48]	@ (8004ab8 <HAL_SPI_MspInit+0x94>)
 8004a88:	69da      	ldr	r2, [r3, #28]
 8004a8a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004a8e:	61da      	str	r2, [r3, #28]
 8004a90:	69da      	ldr	r2, [r3, #28]
 8004a92:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8004a96:	9203      	str	r2, [sp, #12]
 8004a98:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004a9a:	695a      	ldr	r2, [r3, #20]
 8004a9c:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8004aa0:	615a      	str	r2, [r3, #20]
 8004aa2:	695b      	ldr	r3, [r3, #20]
 8004aa4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004aa8:	9304      	str	r3, [sp, #16]
 8004aaa:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8004aac:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8004ab0:	e7d9      	b.n	8004a66 <HAL_SPI_MspInit+0x42>
 8004ab2:	bf00      	nop
 8004ab4:	40013000 	.word	0x40013000
 8004ab8:	40021000 	.word	0x40021000
 8004abc:	48000400 	.word	0x48000400
 8004ac0:	40003800 	.word	0x40003800

08004ac4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004ac4:	b507      	push	{r0, r1, r2, lr}
  if(htim_base->Instance==TIM3)
 8004ac6:	4b0e      	ldr	r3, [pc, #56]	@ (8004b00 <HAL_TIM_Base_MspInit+0x3c>)
 8004ac8:	6802      	ldr	r2, [r0, #0]
 8004aca:	429a      	cmp	r2, r3
 8004acc:	d115      	bne.n	8004afa <HAL_TIM_Base_MspInit+0x36>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004ace:	f503 3303 	add.w	r3, r3, #134144	@ 0x20c00
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8004ad2:	2105      	movs	r1, #5
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004ad4:	69da      	ldr	r2, [r3, #28]
 8004ad6:	f042 0202 	orr.w	r2, r2, #2
 8004ada:	61da      	str	r2, [r3, #28]
 8004adc:	69db      	ldr	r3, [r3, #28]
 8004ade:	f003 0302 	and.w	r3, r3, #2
 8004ae2:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	201d      	movs	r0, #29
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004ae8:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8004aea:	f000 ffd7 	bl	8005a9c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8004aee:	201d      	movs	r0, #29

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 8004af0:	b003      	add	sp, #12
 8004af2:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8004af6:	f001 b803 	b.w	8005b00 <HAL_NVIC_EnableIRQ>
}
 8004afa:	b003      	add	sp, #12
 8004afc:	f85d fb04 	ldr.w	pc, [sp], #4
 8004b00:	40000400 	.word	0x40000400

08004b04 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004b04:	b530      	push	{r4, r5, lr}
 8004b06:	4605      	mov	r5, r0
 8004b08:	b08d      	sub	sp, #52	@ 0x34
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b0a:	2214      	movs	r2, #20
 8004b0c:	2100      	movs	r1, #0
 8004b0e:	a807      	add	r0, sp, #28
 8004b10:	f007 f8e0 	bl	800bcd4 <memset>
  if(huart->Instance==USART1)
 8004b14:	682b      	ldr	r3, [r5, #0]
 8004b16:	4a59      	ldr	r2, [pc, #356]	@ (8004c7c <HAL_UART_MspInit+0x178>)
 8004b18:	4293      	cmp	r3, r2
 8004b1a:	d14d      	bne.n	8004bb8 <HAL_UART_MspInit+0xb4>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004b1c:	4b58      	ldr	r3, [pc, #352]	@ (8004c80 <HAL_UART_MspInit+0x17c>)
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8004b1e:	4c59      	ldr	r4, [pc, #356]	@ (8004c84 <HAL_UART_MspInit+0x180>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8004b20:	699a      	ldr	r2, [r3, #24]
 8004b22:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004b26:	619a      	str	r2, [r3, #24]
 8004b28:	699a      	ldr	r2, [r3, #24]
 8004b2a:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8004b2e:	9201      	str	r2, [sp, #4]
 8004b30:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004b32:	695a      	ldr	r2, [r3, #20]
 8004b34:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8004b38:	615a      	str	r2, [r3, #20]
 8004b3a:	695b      	ldr	r3, [r3, #20]
 8004b3c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b40:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b42:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004b46:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b48:	2302      	movs	r3, #2
 8004b4a:	e9cd 2307 	strd	r2, r3, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004b4e:	2103      	movs	r1, #3
 8004b50:	2307      	movs	r3, #7
 8004b52:	e9cd 130a 	strd	r1, r3, [sp, #40]	@ 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004b56:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004b5a:	a907      	add	r1, sp, #28
 8004b5c:	f001 f8c2 	bl	8005ce4 <HAL_GPIO_Init>
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004b60:	4849      	ldr	r0, [pc, #292]	@ (8004c88 <HAL_UART_MspInit+0x184>)
 8004b62:	2300      	movs	r3, #0
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004b64:	2280      	movs	r2, #128	@ 0x80
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004b66:	e9c4 0300 	strd	r0, r3, [r4]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004b6a:	e9c4 2303 	strd	r2, r3, [r4, #12]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8004b6e:	4620      	mov	r0, r4
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8004b70:	2220      	movs	r2, #32
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004b72:	e9c4 2306 	strd	r2, r3, [r4, #24]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004b76:	60a3      	str	r3, [r4, #8]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004b78:	6163      	str	r3, [r4, #20]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8004b7a:	f000 ffef 	bl	8005b5c <HAL_DMA_Init>
 8004b7e:	b108      	cbz	r0, 8004b84 <HAL_UART_MspInit+0x80>
    {
      Error_Handler();
 8004b80:	f7fe ff3d 	bl	80039fe <Error_Handler>

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004b84:	f8df e124 	ldr.w	lr, [pc, #292]	@ 8004cac <HAL_UART_MspInit+0x1a8>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8004b88:	676c      	str	r4, [r5, #116]	@ 0x74
 8004b8a:	6265      	str	r5, [r4, #36]	@ 0x24
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8004b8c:	4c3f      	ldr	r4, [pc, #252]	@ (8004c8c <HAL_UART_MspInit+0x188>)
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004b8e:	2310      	movs	r3, #16
 8004b90:	e9c4 e300 	strd	lr, r3, [r4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004b94:	2280      	movs	r2, #128	@ 0x80
 8004b96:	2300      	movs	r3, #0
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8004b98:	4620      	mov	r0, r4
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004b9a:	e9c4 3202 	strd	r3, r2, [r4, #8]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004b9e:	e9c4 3304 	strd	r3, r3, [r4, #16]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004ba2:	e9c4 3306 	strd	r3, r3, [r4, #24]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8004ba6:	f000 ffd9 	bl	8005b5c <HAL_DMA_Init>
 8004baa:	b108      	cbz	r0, 8004bb0 <HAL_UART_MspInit+0xac>
    {
      Error_Handler();
 8004bac:	f7fe ff27 	bl	80039fe <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8004bb0:	672c      	str	r4, [r5, #112]	@ 0x70
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
    {
      Error_Handler();
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8004bb2:	6265      	str	r5, [r4, #36]	@ 0x24
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8004bb4:	b00d      	add	sp, #52	@ 0x34
 8004bb6:	bd30      	pop	{r4, r5, pc}
  else if(huart->Instance==USART2)
 8004bb8:	4a35      	ldr	r2, [pc, #212]	@ (8004c90 <HAL_UART_MspInit+0x18c>)
 8004bba:	4293      	cmp	r3, r2
 8004bbc:	d137      	bne.n	8004c2e <HAL_UART_MspInit+0x12a>
    __HAL_RCC_USART2_CLK_ENABLE();
 8004bbe:	4b30      	ldr	r3, [pc, #192]	@ (8004c80 <HAL_UART_MspInit+0x17c>)
 8004bc0:	69da      	ldr	r2, [r3, #28]
 8004bc2:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8004bc6:	61da      	str	r2, [r3, #28]
 8004bc8:	69da      	ldr	r2, [r3, #28]
 8004bca:	f402 3200 	and.w	r2, r2, #131072	@ 0x20000
 8004bce:	9203      	str	r2, [sp, #12]
 8004bd0:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004bd2:	695a      	ldr	r2, [r3, #20]
 8004bd4:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8004bd8:	615a      	str	r2, [r3, #20]
 8004bda:	695b      	ldr	r3, [r3, #20]
 8004bdc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004be0:	9304      	str	r3, [sp, #16]
 8004be2:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004be4:	240c      	movs	r4, #12
 8004be6:	2302      	movs	r3, #2
 8004be8:	e9cd 4307 	strd	r4, r3, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004bec:	f04f 0c03 	mov.w	ip, #3
 8004bf0:	2307      	movs	r3, #7
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004bf2:	a907      	add	r1, sp, #28
 8004bf4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004bf8:	e9cd c30a 	strd	ip, r3, [sp, #40]	@ 0x28
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8004bfc:	4c25      	ldr	r4, [pc, #148]	@ (8004c94 <HAL_UART_MspInit+0x190>)
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004bfe:	f001 f871 	bl	8005ce4 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8004c02:	4b25      	ldr	r3, [pc, #148]	@ (8004c98 <HAL_UART_MspInit+0x194>)
    hdma_usart3_rx.Instance = DMA1_Channel3;
 8004c04:	6023      	str	r3, [r4, #0]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004c06:	2280      	movs	r2, #128	@ 0x80
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004c08:	2300      	movs	r3, #0
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004c0a:	e9c4 2303 	strd	r2, r3, [r4, #12]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004c0e:	e9c4 3301 	strd	r3, r3, [r4, #4]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004c12:	6163      	str	r3, [r4, #20]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8004c14:	2220      	movs	r2, #32
 8004c16:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004c1a:	e9c4 2306 	strd	r2, r3, [r4, #24]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8004c1e:	4620      	mov	r0, r4
 8004c20:	f000 ff9c 	bl	8005b5c <HAL_DMA_Init>
 8004c24:	b108      	cbz	r0, 8004c2a <HAL_UART_MspInit+0x126>
      Error_Handler();
 8004c26:	f7fe feea 	bl	80039fe <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8004c2a:	676c      	str	r4, [r5, #116]	@ 0x74
 8004c2c:	e7c1      	b.n	8004bb2 <HAL_UART_MspInit+0xae>
  else if(huart->Instance==USART3)
 8004c2e:	4a1b      	ldr	r2, [pc, #108]	@ (8004c9c <HAL_UART_MspInit+0x198>)
 8004c30:	4293      	cmp	r3, r2
 8004c32:	d1bf      	bne.n	8004bb4 <HAL_UART_MspInit+0xb0>
    __HAL_RCC_USART3_CLK_ENABLE();
 8004c34:	4b12      	ldr	r3, [pc, #72]	@ (8004c80 <HAL_UART_MspInit+0x17c>)
    hdma_usart3_rx.Instance = DMA1_Channel3;
 8004c36:	4c1a      	ldr	r4, [pc, #104]	@ (8004ca0 <HAL_UART_MspInit+0x19c>)
    __HAL_RCC_USART3_CLK_ENABLE();
 8004c38:	69da      	ldr	r2, [r3, #28]
 8004c3a:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8004c3e:	61da      	str	r2, [r3, #28]
 8004c40:	69da      	ldr	r2, [r3, #28]
 8004c42:	f402 2280 	and.w	r2, r2, #262144	@ 0x40000
 8004c46:	9205      	str	r2, [sp, #20]
 8004c48:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004c4a:	695a      	ldr	r2, [r3, #20]
 8004c4c:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8004c50:	615a      	str	r2, [r3, #20]
 8004c52:	695b      	ldr	r3, [r3, #20]
 8004c54:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004c58:	9306      	str	r3, [sp, #24]
 8004c5a:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c5c:	f44f 6140 	mov.w	r1, #3072	@ 0xc00
 8004c60:	2302      	movs	r3, #2
 8004c62:	e9cd 1307 	strd	r1, r3, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8004c66:	2003      	movs	r0, #3
 8004c68:	2307      	movs	r3, #7
 8004c6a:	e9cd 030a 	strd	r0, r3, [sp, #40]	@ 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004c6e:	a907      	add	r1, sp, #28
 8004c70:	480c      	ldr	r0, [pc, #48]	@ (8004ca4 <HAL_UART_MspInit+0x1a0>)
 8004c72:	f001 f837 	bl	8005ce4 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Channel3;
 8004c76:	4b0c      	ldr	r3, [pc, #48]	@ (8004ca8 <HAL_UART_MspInit+0x1a4>)
 8004c78:	e7c4      	b.n	8004c04 <HAL_UART_MspInit+0x100>
 8004c7a:	bf00      	nop
 8004c7c:	40013800 	.word	0x40013800
 8004c80:	40021000 	.word	0x40021000
 8004c84:	20002270 	.word	0x20002270
 8004c88:	40020058 	.word	0x40020058
 8004c8c:	2000222c 	.word	0x2000222c
 8004c90:	40004400 	.word	0x40004400
 8004c94:	200021e8 	.word	0x200021e8
 8004c98:	4002006c 	.word	0x4002006c
 8004c9c:	40004800 	.word	0x40004800
 8004ca0:	200021a4 	.word	0x200021a4
 8004ca4:	48000400 	.word	0x48000400
 8004ca8:	40020030 	.word	0x40020030
 8004cac:	40020044 	.word	0x40020044

08004cb0 <HAL_InitTick>:
  uint32_t              uwPrescalerValue = 0U;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8004cb0:	4b21      	ldr	r3, [pc, #132]	@ (8004d38 <HAL_InitTick+0x88>)
{
 8004cb2:	b570      	push	{r4, r5, r6, lr}
  __HAL_RCC_TIM2_CLK_ENABLE();
 8004cb4:	69da      	ldr	r2, [r3, #28]
 8004cb6:	f042 0201 	orr.w	r2, r2, #1
 8004cba:	61da      	str	r2, [r3, #28]
 8004cbc:	69db      	ldr	r3, [r3, #28]
{
 8004cbe:	b088      	sub	sp, #32
  __HAL_RCC_TIM2_CLK_ENABLE();
 8004cc0:	f003 0301 	and.w	r3, r3, #1
 8004cc4:	9302      	str	r3, [sp, #8]
{
 8004cc6:	4605      	mov	r5, r0
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8004cc8:	a901      	add	r1, sp, #4
 8004cca:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM2_CLK_ENABLE();
 8004ccc:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8004cce:	f001 fc33 	bl	8006538 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8004cd2:	9b06      	ldr	r3, [sp, #24]
 8004cd4:	bb53      	cbnz	r3, 8004d2c <HAL_InitTick+0x7c>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8004cd6:	f001 fbff 	bl	80064d8 <HAL_RCC_GetPCLK1Freq>

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8004cda:	4e18      	ldr	r6, [pc, #96]	@ (8004d3c <HAL_InitTick+0x8c>)
 8004cdc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8004ce0:	6033      	str	r3, [r6, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8004ce2:	f240 33e7 	movw	r3, #999	@ 0x3e7
 8004ce6:	60f3      	str	r3, [r6, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8004ce8:	4b15      	ldr	r3, [pc, #84]	@ (8004d40 <HAL_InitTick+0x90>)
 8004cea:	fbb0 f3f3 	udiv	r3, r0, r3
 8004cee:	3b01      	subs	r3, #1
  htim2.Init.Prescaler = uwPrescalerValue;
 8004cf0:	6073      	str	r3, [r6, #4]
  htim2.Init.ClockDivision = 0;
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;

  status = HAL_TIM_Base_Init(&htim2);
 8004cf2:	4630      	mov	r0, r6
  htim2.Init.ClockDivision = 0;
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	6133      	str	r3, [r6, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004cf8:	60b3      	str	r3, [r6, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004cfa:	61b3      	str	r3, [r6, #24]
  status = HAL_TIM_Base_Init(&htim2);
 8004cfc:	f002 fc6a 	bl	80075d4 <HAL_TIM_Base_Init>
  if (status == HAL_OK)
 8004d00:	4604      	mov	r4, r0
 8004d02:	b980      	cbnz	r0, 8004d26 <HAL_InitTick+0x76>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 8004d04:	4630      	mov	r0, r6
 8004d06:	f002 fb27 	bl	8007358 <HAL_TIM_Base_Start_IT>
    if (status == HAL_OK)
 8004d0a:	4604      	mov	r4, r0
 8004d0c:	b958      	cbnz	r0, 8004d26 <HAL_InitTick+0x76>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004d0e:	201c      	movs	r0, #28
 8004d10:	f000 fef6 	bl	8005b00 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004d14:	2d0f      	cmp	r5, #15
 8004d16:	d80d      	bhi.n	8004d34 <HAL_InitTick+0x84>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 8004d18:	4622      	mov	r2, r4
 8004d1a:	4629      	mov	r1, r5
 8004d1c:	201c      	movs	r0, #28
 8004d1e:	f000 febd 	bl	8005a9c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004d22:	4b08      	ldr	r3, [pc, #32]	@ (8004d44 <HAL_InitTick+0x94>)
 8004d24:	601d      	str	r5, [r3, #0]
    }
  }

 /* Return function status */
  return status;
}
 8004d26:	4620      	mov	r0, r4
 8004d28:	b008      	add	sp, #32
 8004d2a:	bd70      	pop	{r4, r5, r6, pc}
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8004d2c:	f001 fbd4 	bl	80064d8 <HAL_RCC_GetPCLK1Freq>
 8004d30:	0040      	lsls	r0, r0, #1
 8004d32:	e7d2      	b.n	8004cda <HAL_InitTick+0x2a>
        status = HAL_ERROR;
 8004d34:	2401      	movs	r4, #1
 8004d36:	e7f6      	b.n	8004d26 <HAL_InitTick+0x76>
 8004d38:	40021000 	.word	0x40021000
 8004d3c:	200038fc 	.word	0x200038fc
 8004d40:	000f4240 	.word	0x000f4240
 8004d44:	2000001c 	.word	0x2000001c

08004d48 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004d48:	e7fe      	b.n	8004d48 <NMI_Handler>

08004d4a <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004d4a:	e7fe      	b.n	8004d4a <HardFault_Handler>

08004d4c <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004d4c:	e7fe      	b.n	8004d4c <MemManage_Handler>

08004d4e <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004d4e:	e7fe      	b.n	8004d4e <BusFault_Handler>

08004d50 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004d50:	e7fe      	b.n	8004d50 <UsageFault_Handler>

08004d52 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004d52:	4770      	bx	lr

08004d54 <DMA1_Channel3_IRQHandler>:
void DMA1_Channel3_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8004d54:	4801      	ldr	r0, [pc, #4]	@ (8004d5c <DMA1_Channel3_IRQHandler+0x8>)
 8004d56:	f000 bf7d 	b.w	8005c54 <HAL_DMA_IRQHandler>
 8004d5a:	bf00      	nop
 8004d5c:	200021a4 	.word	0x200021a4

08004d60 <DMA1_Channel4_IRQHandler>:
void DMA1_Channel4_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8004d60:	4801      	ldr	r0, [pc, #4]	@ (8004d68 <DMA1_Channel4_IRQHandler+0x8>)
 8004d62:	f000 bf77 	b.w	8005c54 <HAL_DMA_IRQHandler>
 8004d66:	bf00      	nop
 8004d68:	2000222c 	.word	0x2000222c

08004d6c <DMA1_Channel5_IRQHandler>:
void DMA1_Channel5_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8004d6c:	4801      	ldr	r0, [pc, #4]	@ (8004d74 <DMA1_Channel5_IRQHandler+0x8>)
 8004d6e:	f000 bf71 	b.w	8005c54 <HAL_DMA_IRQHandler>
 8004d72:	bf00      	nop
 8004d74:	20002270 	.word	0x20002270

08004d78 <DMA1_Channel6_IRQHandler>:
void DMA1_Channel6_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8004d78:	4801      	ldr	r0, [pc, #4]	@ (8004d80 <DMA1_Channel6_IRQHandler+0x8>)
 8004d7a:	f000 bf6b 	b.w	8005c54 <HAL_DMA_IRQHandler>
 8004d7e:	bf00      	nop
 8004d80:	200021e8 	.word	0x200021e8

08004d84 <TIM2_IRQHandler>:
void TIM2_IRQHandler(void)
{
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004d84:	4801      	ldr	r0, [pc, #4]	@ (8004d8c <TIM2_IRQHandler+0x8>)
 8004d86:	f002 bb21 	b.w	80073cc <HAL_TIM_IRQHandler>
 8004d8a:	bf00      	nop
 8004d8c:	200038fc 	.word	0x200038fc

08004d90 <TIM3_IRQHandler>:
void TIM3_IRQHandler(void)
{
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8004d90:	4801      	ldr	r0, [pc, #4]	@ (8004d98 <TIM3_IRQHandler+0x8>)
 8004d92:	f002 bb1b 	b.w	80073cc <HAL_TIM_IRQHandler>
 8004d96:	bf00      	nop
 8004d98:	2000244c 	.word	0x2000244c

08004d9c <ADC3_IRQHandler>:
void ADC3_IRQHandler(void)
{
  /* USER CODE BEGIN ADC3_IRQn 0 */

  /* USER CODE END ADC3_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc3);
 8004d9c:	4801      	ldr	r0, [pc, #4]	@ (8004da4 <ADC3_IRQHandler+0x8>)
 8004d9e:	f000 ba81 	b.w	80052a4 <HAL_ADC_IRQHandler>
 8004da2:	bf00      	nop
 8004da4:	20002608 	.word	0x20002608

08004da8 <DMA2_Channel1_IRQHandler>:
void DMA2_Channel1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Channel1_IRQn 0 */

  /* USER CODE END DMA2_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8004da8:	4801      	ldr	r0, [pc, #4]	@ (8004db0 <DMA2_Channel1_IRQHandler+0x8>)
 8004daa:	f000 bf53 	b.w	8005c54 <HAL_DMA_IRQHandler>
 8004dae:	bf00      	nop
 8004db0:	200025c4 	.word	0x200025c4

08004db4 <DMA2_Channel5_IRQHandler>:
void DMA2_Channel5_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Channel5_IRQn 0 */

  /* USER CODE END DMA2_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8004db4:	4801      	ldr	r0, [pc, #4]	@ (8004dbc <DMA2_Channel5_IRQHandler+0x8>)
 8004db6:	f000 bf4d 	b.w	8005c54 <HAL_DMA_IRQHandler>
 8004dba:	bf00      	nop
 8004dbc:	20002580 	.word	0x20002580

08004dc0 <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 8004dc0:	2001      	movs	r0, #1
 8004dc2:	4770      	bx	lr

08004dc4 <_kill>:

int _kill(int pid, int sig)
{
 8004dc4:	b508      	push	{r3, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004dc6:	f007 fdfd 	bl	800c9c4 <__errno>
 8004dca:	2316      	movs	r3, #22
 8004dcc:	6003      	str	r3, [r0, #0]
  return -1;
}
 8004dce:	f04f 30ff 	mov.w	r0, #4294967295
 8004dd2:	bd08      	pop	{r3, pc}

08004dd4 <_exit>:

void _exit (int status)
{
 8004dd4:	b508      	push	{r3, lr}
  errno = EINVAL;
 8004dd6:	f007 fdf5 	bl	800c9c4 <__errno>
 8004dda:	2316      	movs	r3, #22
 8004ddc:	6003      	str	r3, [r0, #0]
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
 8004dde:	e7fe      	b.n	8004dde <_exit+0xa>

08004de0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004de0:	b570      	push	{r4, r5, r6, lr}
 8004de2:	460d      	mov	r5, r1
 8004de4:	4614      	mov	r4, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004de6:	460e      	mov	r6, r1
 8004de8:	1b73      	subs	r3, r6, r5
 8004dea:	429c      	cmp	r4, r3
 8004dec:	dc01      	bgt.n	8004df2 <_read+0x12>
  {
    *ptr++ = __io_getchar();
  }

  return len;
}
 8004dee:	4620      	mov	r0, r4
 8004df0:	bd70      	pop	{r4, r5, r6, pc}
    *ptr++ = __io_getchar();
 8004df2:	f3af 8000 	nop.w
 8004df6:	f806 0b01 	strb.w	r0, [r6], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004dfa:	e7f5      	b.n	8004de8 <_read+0x8>

08004dfc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004dfc:	b570      	push	{r4, r5, r6, lr}
 8004dfe:	460d      	mov	r5, r1
 8004e00:	4614      	mov	r4, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004e02:	460e      	mov	r6, r1
 8004e04:	1b73      	subs	r3, r6, r5
 8004e06:	429c      	cmp	r4, r3
 8004e08:	dc01      	bgt.n	8004e0e <_write+0x12>
  {
    __io_putchar(*ptr++);
  }
  return len;
}
 8004e0a:	4620      	mov	r0, r4
 8004e0c:	bd70      	pop	{r4, r5, r6, pc}
    __io_putchar(*ptr++);
 8004e0e:	f816 0b01 	ldrb.w	r0, [r6], #1
 8004e12:	f7fe fadb 	bl	80033cc <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004e16:	e7f5      	b.n	8004e04 <_write+0x8>

08004e18 <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 8004e18:	f04f 30ff 	mov.w	r0, #4294967295
 8004e1c:	4770      	bx	lr

08004e1e <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 8004e1e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004e22:	604b      	str	r3, [r1, #4]
  return 0;
}
 8004e24:	2000      	movs	r0, #0
 8004e26:	4770      	bx	lr

08004e28 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 8004e28:	2001      	movs	r0, #1
 8004e2a:	4770      	bx	lr

08004e2c <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 8004e2c:	2000      	movs	r0, #0
 8004e2e:	4770      	bx	lr

08004e30 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004e30:	4a0b      	ldr	r2, [pc, #44]	@ (8004e60 <_sbrk+0x30>)
 8004e32:	6811      	ldr	r1, [r2, #0]
{
 8004e34:	b510      	push	{r4, lr}
 8004e36:	4603      	mov	r3, r0
  if (NULL == __sbrk_heap_end)
 8004e38:	b909      	cbnz	r1, 8004e3e <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 8004e3a:	490a      	ldr	r1, [pc, #40]	@ (8004e64 <_sbrk+0x34>)
 8004e3c:	6011      	str	r1, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004e3e:	6810      	ldr	r0, [r2, #0]
 8004e40:	4909      	ldr	r1, [pc, #36]	@ (8004e68 <_sbrk+0x38>)
 8004e42:	4c0a      	ldr	r4, [pc, #40]	@ (8004e6c <_sbrk+0x3c>)
 8004e44:	4403      	add	r3, r0
 8004e46:	1b09      	subs	r1, r1, r4
 8004e48:	428b      	cmp	r3, r1
 8004e4a:	d906      	bls.n	8004e5a <_sbrk+0x2a>
  {
    errno = ENOMEM;
 8004e4c:	f007 fdba 	bl	800c9c4 <__errno>
 8004e50:	230c      	movs	r3, #12
 8004e52:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8004e54:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 8004e58:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 8004e5a:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 8004e5c:	e7fc      	b.n	8004e58 <_sbrk+0x28>
 8004e5e:	bf00      	nop
 8004e60:	2000394c 	.word	0x2000394c
 8004e64:	20009228 	.word	0x20009228
 8004e68:	2000a000 	.word	0x2000a000
 8004e6c:	00000400 	.word	0x00000400

08004e70 <Uint32ToHex>:

uint32_t current_addr_debug = DEBUG_START_ADDRESS;
uint8_t output_debug_buffer[512] = {0};


void Uint32ToHex(uint32_t value, char *output, uint8_t width) {
 8004e70:	b530      	push	{r4, r5, lr}
 8004e72:	1e54      	subs	r4, r2, #1
 8004e74:	1e4d      	subs	r5, r1, #1
 8004e76:	00a4      	lsls	r4, r4, #2
    for (int i = 0; i < width; i++) {
 8004e78:	1d23      	adds	r3, r4, #4
 8004e7a:	d102      	bne.n	8004e82 <Uint32ToHex+0x12>
        uint8_t nibble = (value >> (4 * (width - 1 - i))) & 0xF; // Extract each nibble
        output[i] = (nibble < 10) ? ('0' + nibble) : ('A' + nibble - 10); // Convert to hex char
    }
    output[width] = '\0'; // Null-terminate
 8004e7c:	2300      	movs	r3, #0
 8004e7e:	548b      	strb	r3, [r1, r2]
}
 8004e80:	bd30      	pop	{r4, r5, pc}
        uint8_t nibble = (value >> (4 * (width - 1 - i))) & 0xF; // Extract each nibble
 8004e82:	fa20 f304 	lsr.w	r3, r0, r4
 8004e86:	f003 030f 	and.w	r3, r3, #15
        output[i] = (nibble < 10) ? ('0' + nibble) : ('A' + nibble - 10); // Convert to hex char
 8004e8a:	2b09      	cmp	r3, #9
 8004e8c:	bf94      	ite	ls
 8004e8e:	3330      	addls	r3, #48	@ 0x30
 8004e90:	3337      	addhi	r3, #55	@ 0x37
 8004e92:	f805 3f01 	strb.w	r3, [r5, #1]!
    for (int i = 0; i < width; i++) {
 8004e96:	3c04      	subs	r4, #4
 8004e98:	e7ee      	b.n	8004e78 <Uint32ToHex+0x8>
	...

08004e9c <SystemInit>:
  */
void SystemInit(void)
{
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004e9c:	4a03      	ldr	r2, [pc, #12]	@ (8004eac <SystemInit+0x10>)
 8004e9e:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8004ea2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004ea6:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004eaa:	4770      	bx	lr
 8004eac:	e000ed00 	.word	0xe000ed00

08004eb0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8004eb0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8004ee8 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8004eb4:	f7ff fff2 	bl	8004e9c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004eb8:	480c      	ldr	r0, [pc, #48]	@ (8004eec <LoopForever+0x6>)
  ldr r1, =_edata
 8004eba:	490d      	ldr	r1, [pc, #52]	@ (8004ef0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8004ebc:	4a0d      	ldr	r2, [pc, #52]	@ (8004ef4 <LoopForever+0xe>)
  movs r3, #0
 8004ebe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004ec0:	e002      	b.n	8004ec8 <LoopCopyDataInit>

08004ec2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004ec2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004ec4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004ec6:	3304      	adds	r3, #4

08004ec8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004ec8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004eca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004ecc:	d3f9      	bcc.n	8004ec2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004ece:	4a0a      	ldr	r2, [pc, #40]	@ (8004ef8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8004ed0:	4c0a      	ldr	r4, [pc, #40]	@ (8004efc <LoopForever+0x16>)
  movs r3, #0
 8004ed2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004ed4:	e001      	b.n	8004eda <LoopFillZerobss>

08004ed6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004ed6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004ed8:	3204      	adds	r2, #4

08004eda <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004eda:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004edc:	d3fb      	bcc.n	8004ed6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004ede:	f007 fd77 	bl	800c9d0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8004ee2:	f7fe fb25 	bl	8003530 <main>

08004ee6 <LoopForever>:

LoopForever:
    b LoopForever
 8004ee6:	e7fe      	b.n	8004ee6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8004ee8:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8004eec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004ef0:	20000250 	.word	0x20000250
  ldr r2, =_sidata
 8004ef4:	08012348 	.word	0x08012348
  ldr r2, =_sbss
 8004ef8:	20000250 	.word	0x20000250
  ldr r4, =_ebss
 8004efc:	20009228 	.word	0x20009228

08004f00 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004f00:	e7fe      	b.n	8004f00 <ADC1_2_IRQHandler>

08004f02 <__cxa_guard_abort.part.0>:

/**
  * @brief Acquire STM32 lock
  * @param lock The lock to acquire
  */
static inline void stm32_lock_acquire(LockingData_t *lock)
 8004f02:	b508      	push	{r3, lr}
  __ASM volatile ("cpsid i" : : : "memory");
 8004f04:	b672      	cpsid	i
{
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8004f06:	f7fe fd7a 	bl	80039fe <Error_Handler>
 8004f0a:	e7fe      	b.n	8004f0a <__cxa_guard_abort.part.0+0x8>

08004f0c <stm32_lock_acquire>:
{
 8004f0c:	b508      	push	{r3, lr}
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 8004f0e:	7a03      	ldrb	r3, [r0, #8]
 8004f10:	2b01      	cmp	r3, #1
 8004f12:	d903      	bls.n	8004f1c <stm32_lock_acquire+0x10>
 8004f14:	b672      	cpsid	i
 8004f16:	f7fe fd72 	bl	80039fe <Error_Handler>
 8004f1a:	e7fe      	b.n	8004f1a <stm32_lock_acquire+0xe>
  lock->basepri[lock->nesting_level++] = taskENTER_CRITICAL_FROM_ISR();
 8004f1c:	1c5a      	adds	r2, r3, #1
 8004f1e:	7202      	strb	r2, [r0, #8]

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004f20:	f3ef 8211 	mrs	r2, BASEPRI
 8004f24:	f04f 0150 	mov.w	r1, #80	@ 0x50
 8004f28:	f381 8811 	msr	BASEPRI, r1
 8004f2c:	f3bf 8f6f 	isb	sy
 8004f30:	f3bf 8f4f 	dsb	sy
 8004f34:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8004f38:	bd08      	pop	{r3, pc}

08004f3a <stm32_lock_release>:
/**
  * @brief Release STM32 lock
  * @param lock The lock to release
  */
static inline void stm32_lock_release(LockingData_t *lock)
{
 8004f3a:	b508      	push	{r3, lr}
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
  lock->nesting_level--;
 8004f3c:	7a03      	ldrb	r3, [r0, #8]
 8004f3e:	3b01      	subs	r3, #1
 8004f40:	b2db      	uxtb	r3, r3
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 8004f42:	2b01      	cmp	r3, #1
  lock->nesting_level--;
 8004f44:	7203      	strb	r3, [r0, #8]
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 8004f46:	d903      	bls.n	8004f50 <stm32_lock_release+0x16>
 8004f48:	b672      	cpsid	i
 8004f4a:	f7fe fd58 	bl	80039fe <Error_Handler>
 8004f4e:	e7fe      	b.n	8004f4e <stm32_lock_release+0x14>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004f50:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8004f54:	f383 8811 	msr	BASEPRI, r3
  taskEXIT_CRITICAL_FROM_ISR(lock->basepri[lock->nesting_level]);
}
 8004f58:	bd08      	pop	{r3, pc}

08004f5a <__retarget_lock_init_recursive>:
/**
  * @brief Initialize recursive lock
  * @param lock The lock
  */
void __retarget_lock_init_recursive(_LOCK_T *lock)
{
 8004f5a:	b510      	push	{r4, lr}
  if (lock == NULL)
 8004f5c:	4604      	mov	r4, r0
 8004f5e:	b920      	cbnz	r0, 8004f6a <__retarget_lock_init_recursive+0x10>
  {
    errno = EINVAL;
 8004f60:	f007 fd30 	bl	800c9c4 <__errno>
 8004f64:	2316      	movs	r3, #22
 8004f66:	6003      	str	r3, [r0, #0]
    return;
  }

  /* Unable to allocate memory */
  STM32_LOCK_BLOCK();
}
 8004f68:	bd10      	pop	{r4, pc}
  *lock = (_LOCK_T)malloc(sizeof(struct __lock));
 8004f6a:	200c      	movs	r0, #12
 8004f6c:	f004 fe5a 	bl	8009c24 <malloc>
 8004f70:	6020      	str	r0, [r4, #0]
  if (*lock != NULL)
 8004f72:	b120      	cbz	r0, 8004f7e <__retarget_lock_init_recursive+0x24>
    lock->basepri[i] = 0;
 8004f74:	2300      	movs	r3, #0
 8004f76:	e9c0 3300 	strd	r3, r3, [r0]
  lock->nesting_level = 0;
 8004f7a:	7203      	strb	r3, [r0, #8]
}
 8004f7c:	e7f4      	b.n	8004f68 <__retarget_lock_init_recursive+0xe>
 8004f7e:	f7ff ffc0 	bl	8004f02 <__cxa_guard_abort.part.0>

08004f82 <__retarget_lock_acquire>:
/**
  * @brief Acquire lock
  * @param lock The lock
  */
void __retarget_lock_acquire(_LOCK_T lock)
{
 8004f82:	b508      	push	{r3, lr}
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8004f84:	b908      	cbnz	r0, 8004f8a <__retarget_lock_acquire+0x8>
 8004f86:	f7ff ffbc 	bl	8004f02 <__cxa_guard_abort.part.0>
  stm32_lock_acquire(STM32_LOCK_PARAMETER(lock));
}
 8004f8a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  stm32_lock_acquire(STM32_LOCK_PARAMETER(lock));
 8004f8e:	f7ff bfbd 	b.w	8004f0c <stm32_lock_acquire>

08004f92 <__retarget_lock_acquire_recursive>:
#define __lock_close(lock) __retarget_lock_close(lock)
extern void __retarget_lock_close_recursive(_LOCK_T lock);
#define __lock_close_recursive(lock) __retarget_lock_close_recursive(lock)
extern void __retarget_lock_acquire(_LOCK_T lock);
#define __lock_acquire(lock) __retarget_lock_acquire(lock)
extern void __retarget_lock_acquire_recursive(_LOCK_T lock);
 8004f92:	f7ff bff6 	b.w	8004f82 <__retarget_lock_acquire>

08004f96 <__retarget_lock_release>:
/**
  * @brief Release lock
  * @param lock The lock
  */
void __retarget_lock_release(_LOCK_T lock)
{
 8004f96:	b508      	push	{r3, lr}
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8004f98:	b918      	cbnz	r0, 8004fa2 <__retarget_lock_release+0xc>
 8004f9a:	b672      	cpsid	i
 8004f9c:	f7fe fd2f 	bl	80039fe <Error_Handler>
 8004fa0:	e7fe      	b.n	8004fa0 <__retarget_lock_release+0xa>
  stm32_lock_release(STM32_LOCK_PARAMETER(lock));
}
 8004fa2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  stm32_lock_release(STM32_LOCK_PARAMETER(lock));
 8004fa6:	f7ff bfc8 	b.w	8004f3a <stm32_lock_release>

08004faa <__retarget_lock_release_recursive>:
extern int __retarget_lock_try_acquire_recursive(_LOCK_T lock);
#define __lock_try_acquire_recursive(lock) \
  __retarget_lock_try_acquire_recursive(lock)
extern void __retarget_lock_release(_LOCK_T lock);
#define __lock_release(lock) __retarget_lock_release(lock)
extern void __retarget_lock_release_recursive(_LOCK_T lock);
 8004faa:	f7ff bff4 	b.w	8004f96 <__retarget_lock_release>
	...

08004fb0 <HAL_Init>:
  */
HAL_StatusTypeDef HAL_Init(void)
{
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004fb0:	4a07      	ldr	r2, [pc, #28]	@ (8004fd0 <HAL_Init+0x20>)
{
 8004fb2:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004fb4:	6813      	ldr	r3, [r2, #0]
 8004fb6:	f043 0310 	orr.w	r3, r3, #16
 8004fba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004fbc:	2003      	movs	r0, #3
 8004fbe:	f000 fd5b 	bl	8005a78 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004fc2:	200f      	movs	r0, #15
 8004fc4:	f7ff fe74 	bl	8004cb0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004fc8:	f7ff fc64 	bl	8004894 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8004fcc:	2000      	movs	r0, #0
 8004fce:	bd08      	pop	{r3, pc}
 8004fd0:	40022000 	.word	0x40022000

08004fd4 <HAL_IncTick>:
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8004fd4:	4a03      	ldr	r2, [pc, #12]	@ (8004fe4 <HAL_IncTick+0x10>)
 8004fd6:	4b04      	ldr	r3, [pc, #16]	@ (8004fe8 <HAL_IncTick+0x14>)
 8004fd8:	6811      	ldr	r1, [r2, #0]
 8004fda:	781b      	ldrb	r3, [r3, #0]
 8004fdc:	440b      	add	r3, r1
 8004fde:	6013      	str	r3, [r2, #0]
}
 8004fe0:	4770      	bx	lr
 8004fe2:	bf00      	nop
 8004fe4:	20003980 	.word	0x20003980
 8004fe8:	20000018 	.word	0x20000018

08004fec <HAL_GetTick>:
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;  
 8004fec:	4b01      	ldr	r3, [pc, #4]	@ (8004ff4 <HAL_GetTick+0x8>)
 8004fee:	6818      	ldr	r0, [r3, #0]
}
 8004ff0:	4770      	bx	lr
 8004ff2:	bf00      	nop
 8004ff4:	20003980 	.word	0x20003980

08004ff8 <HAL_ADC_ConvCpltCallback>:
/**
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
 8004ff8:	4770      	bx	lr

08004ffa <HAL_ADC_LevelOutOfWindowCallback>:
/**
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
 8004ffa:	4770      	bx	lr

08004ffc <HAL_ADC_ErrorCallback>:
  * @brief  ADC error callback in non blocking mode
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
 8004ffc:	4770      	bx	lr

08004ffe <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8004ffe:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8005000:	6803      	ldr	r3, [r0, #0]
 8005002:	689a      	ldr	r2, [r3, #8]
 8005004:	f002 0203 	and.w	r2, r2, #3
 8005008:	2a01      	cmp	r2, #1
{
 800500a:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET )
 800500c:	d001      	beq.n	8005012 <ADC_Disable+0x14>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800500e:	2000      	movs	r0, #0
}
 8005010:	bd38      	pop	{r3, r4, r5, pc}
  if (ADC_IS_ENABLE(hadc) != RESET )
 8005012:	681a      	ldr	r2, [r3, #0]
 8005014:	07d1      	lsls	r1, r2, #31
 8005016:	d5fa      	bpl.n	800500e <ADC_Disable+0x10>
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8005018:	689a      	ldr	r2, [r3, #8]
 800501a:	f002 020d 	and.w	r2, r2, #13
 800501e:	2a01      	cmp	r2, #1
 8005020:	d115      	bne.n	800504e <ADC_Disable+0x50>
      __HAL_ADC_DISABLE(hadc);
 8005022:	689a      	ldr	r2, [r3, #8]
 8005024:	f042 0202 	orr.w	r2, r2, #2
 8005028:	609a      	str	r2, [r3, #8]
 800502a:	2203      	movs	r2, #3
 800502c:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 800502e:	f7ff ffdd 	bl	8004fec <HAL_GetTick>
 8005032:	4605      	mov	r5, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8005034:	6823      	ldr	r3, [r4, #0]
 8005036:	689b      	ldr	r3, [r3, #8]
 8005038:	07db      	lsls	r3, r3, #31
 800503a:	d5e8      	bpl.n	800500e <ADC_Disable+0x10>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800503c:	f7ff ffd6 	bl	8004fec <HAL_GetTick>
 8005040:	1b40      	subs	r0, r0, r5
 8005042:	2802      	cmp	r0, #2
 8005044:	d9f6      	bls.n	8005034 <ADC_Disable+0x36>
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8005046:	6823      	ldr	r3, [r4, #0]
 8005048:	689b      	ldr	r3, [r3, #8]
 800504a:	07da      	lsls	r2, r3, #31
 800504c:	d5f2      	bpl.n	8005034 <ADC_Disable+0x36>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800504e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005050:	f043 0310 	orr.w	r3, r3, #16
 8005054:	6423      	str	r3, [r4, #64]	@ 0x40
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005056:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8005058:	f043 0301 	orr.w	r3, r3, #1
 800505c:	6463      	str	r3, [r4, #68]	@ 0x44
      return HAL_ERROR;
 800505e:	2001      	movs	r0, #1
 8005060:	e7d6      	b.n	8005010 <ADC_Disable+0x12>
	...

08005064 <HAL_ADC_Init>:
{
 8005064:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __IO uint32_t wait_loop_index = 0U;
 8005066:	2300      	movs	r3, #0
 8005068:	9301      	str	r3, [sp, #4]
  if(hadc == NULL)
 800506a:	4604      	mov	r4, r0
 800506c:	2800      	cmp	r0, #0
 800506e:	f000 8103 	beq.w	8005278 <HAL_ADC_Init+0x214>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8005072:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 8005074:	06d5      	lsls	r5, r2, #27
 8005076:	d46a      	bmi.n	800514e <HAL_ADC_Init+0xea>
    if (hadc->State == HAL_ADC_STATE_RESET)
 8005078:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800507a:	2b00      	cmp	r3, #0
 800507c:	d035      	beq.n	80050ea <HAL_ADC_Init+0x86>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800507e:	2000      	movs	r0, #0
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8005080:	6823      	ldr	r3, [r4, #0]
 8005082:	689a      	ldr	r2, [r3, #8]
 8005084:	00d2      	lsls	r2, r2, #3
 8005086:	d502      	bpl.n	800508e <HAL_ADC_Init+0x2a>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8005088:	689b      	ldr	r3, [r3, #8]
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 800508a:	009d      	lsls	r5, r3, #2
 800508c:	d50a      	bpl.n	80050a4 <HAL_ADC_Init+0x40>
      ADC_STATE_CLR_SET(hadc->State,
 800508e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005090:	f023 0312 	bic.w	r3, r3, #18
 8005094:	f043 0310 	orr.w	r3, r3, #16
 8005098:	6423      	str	r3, [r4, #64]	@ 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800509a:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800509c:	f043 0301 	orr.w	r3, r3, #1
 80050a0:	6463      	str	r3, [r4, #68]	@ 0x44
      tmp_hal_status = HAL_ERROR;
 80050a2:	2001      	movs	r0, #1
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80050a4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80050a6:	06d9      	lsls	r1, r3, #27
 80050a8:	f100 80e0 	bmi.w	800526c <HAL_ADC_Init+0x208>
 80050ac:	2800      	cmp	r0, #0
 80050ae:	f040 80dd 	bne.w	800526c <HAL_ADC_Init+0x208>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80050b2:	6823      	ldr	r3, [r4, #0]
 80050b4:	689a      	ldr	r2, [r3, #8]
      (tmp_hal_status == HAL_OK)                                &&
 80050b6:	0752      	lsls	r2, r2, #29
 80050b8:	f100 80d8 	bmi.w	800526c <HAL_ADC_Init+0x208>
    ADC_STATE_CLR_SET(hadc->State,
 80050bc:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 80050be:	f422 7281 	bic.w	r2, r2, #258	@ 0x102
 80050c2:	f042 0202 	orr.w	r2, r2, #2
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80050c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
    ADC_STATE_CLR_SET(hadc->State,
 80050ca:	6422      	str	r2, [r4, #64]	@ 0x40
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80050cc:	4a6b      	ldr	r2, [pc, #428]	@ (800527c <HAL_ADC_Init+0x218>)
 80050ce:	d042      	beq.n	8005156 <HAL_ADC_Init+0xf2>
 80050d0:	4293      	cmp	r3, r2
 80050d2:	d03e      	beq.n	8005152 <HAL_ADC_Init+0xee>
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80050d4:	f502 7240 	add.w	r2, r2, #768	@ 0x300
 80050d8:	4293      	cmp	r3, r2
 80050da:	4969      	ldr	r1, [pc, #420]	@ (8005280 <HAL_ADC_Init+0x21c>)
 80050dc:	f000 80b3 	beq.w	8005246 <HAL_ADC_Init+0x1e2>
 80050e0:	428b      	cmp	r3, r1
 80050e2:	bf18      	it	ne
 80050e4:	2200      	movne	r2, #0
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80050e6:	4967      	ldr	r1, [pc, #412]	@ (8005284 <HAL_ADC_Init+0x220>)
 80050e8:	e036      	b.n	8005158 <HAL_ADC_Init+0xf4>
      hadc->InjectionConfig.ContextQueue = 0U;
 80050ea:	e9c0 3312 	strd	r3, r3, [r0, #72]	@ 0x48
      ADC_CLEAR_ERRORCODE(hadc);
 80050ee:	6443      	str	r3, [r0, #68]	@ 0x44
      hadc->Lock = HAL_UNLOCKED;
 80050f0:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_ADC_MspInit(hadc);
 80050f4:	f7ff fbec 	bl	80048d0 <HAL_ADC_MspInit>
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 80050f8:	6823      	ldr	r3, [r4, #0]
 80050fa:	689b      	ldr	r3, [r3, #8]
 80050fc:	00d8      	lsls	r0, r3, #3
 80050fe:	d4be      	bmi.n	800507e <HAL_ADC_Init+0x1a>
        tmp_hal_status = ADC_Disable(hadc);
 8005100:	4620      	mov	r0, r4
 8005102:	f7ff ff7c 	bl	8004ffe <ADC_Disable>
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8005106:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8005108:	06d1      	lsls	r1, r2, #27
 800510a:	d4b9      	bmi.n	8005080 <HAL_ADC_Init+0x1c>
 800510c:	2800      	cmp	r0, #0
 800510e:	d1b7      	bne.n	8005080 <HAL_ADC_Init+0x1c>
          ADC_STATE_CLR_SET(hadc->State,
 8005110:	6c23      	ldr	r3, [r4, #64]	@ 0x40
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8005112:	6822      	ldr	r2, [r4, #0]
          ADC_STATE_CLR_SET(hadc->State,
 8005114:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8005118:	f023 0302 	bic.w	r3, r3, #2
 800511c:	f043 0302 	orr.w	r3, r3, #2
 8005120:	6423      	str	r3, [r4, #64]	@ 0x40
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8005122:	6893      	ldr	r3, [r2, #8]
 8005124:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
 8005128:	6093      	str	r3, [r2, #8]
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 800512a:	6893      	ldr	r3, [r2, #8]
 800512c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005130:	6093      	str	r3, [r2, #8]
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8005132:	4b55      	ldr	r3, [pc, #340]	@ (8005288 <HAL_ADC_Init+0x224>)
 8005134:	4a55      	ldr	r2, [pc, #340]	@ (800528c <HAL_ADC_Init+0x228>)
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	fbb3 f3f2 	udiv	r3, r3, r2
 800513c:	220a      	movs	r2, #10
 800513e:	4353      	muls	r3, r2
            wait_loop_index--;
 8005140:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 8005142:	9b01      	ldr	r3, [sp, #4]
 8005144:	2b00      	cmp	r3, #0
 8005146:	d09a      	beq.n	800507e <HAL_ADC_Init+0x1a>
            wait_loop_index--;
 8005148:	9b01      	ldr	r3, [sp, #4]
 800514a:	3b01      	subs	r3, #1
 800514c:	e7f8      	b.n	8005140 <HAL_ADC_Init+0xdc>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800514e:	4618      	mov	r0, r3
 8005150:	e7a8      	b.n	80050a4 <HAL_ADC_Init+0x40>
 8005152:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005156:	494e      	ldr	r1, [pc, #312]	@ (8005290 <HAL_ADC_Init+0x22c>)
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8005158:	689d      	ldr	r5, [r3, #8]
 800515a:	f005 0503 	and.w	r5, r5, #3
 800515e:	2d01      	cmp	r5, #1
 8005160:	d102      	bne.n	8005168 <HAL_ADC_Init+0x104>
 8005162:	681d      	ldr	r5, [r3, #0]
 8005164:	07ed      	lsls	r5, r5, #31
 8005166:	d40e      	bmi.n	8005186 <HAL_ADC_Init+0x122>
 8005168:	b13a      	cbz	r2, 800517a <HAL_ADC_Init+0x116>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800516a:	6895      	ldr	r5, [r2, #8]
 800516c:	f005 0503 	and.w	r5, r5, #3
 8005170:	2d01      	cmp	r5, #1
 8005172:	d102      	bne.n	800517a <HAL_ADC_Init+0x116>
 8005174:	6812      	ldr	r2, [r2, #0]
 8005176:	07d2      	lsls	r2, r2, #31
 8005178:	d405      	bmi.n	8005186 <HAL_ADC_Init+0x122>
      MODIFY_REG(tmpADC_Common->CCR       ,
 800517a:	688a      	ldr	r2, [r1, #8]
 800517c:	6865      	ldr	r5, [r4, #4]
 800517e:	f422 3240 	bic.w	r2, r2, #196608	@ 0x30000
 8005182:	432a      	orrs	r2, r5
 8005184:	608a      	str	r2, [r1, #8]
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8005186:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 800518a:	430a      	orrs	r2, r1
 800518c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800518e:	7e65      	ldrb	r5, [r4, #25]
 8005190:	3901      	subs	r1, #1
 8005192:	bf18      	it	ne
 8005194:	2101      	movne	r1, #1
 8005196:	ea42 3245 	orr.w	r2, r2, r5, lsl #13
 800519a:	ea42 3201 	orr.w	r2, r2, r1, lsl #12
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800519e:	f894 1020 	ldrb.w	r1, [r4, #32]
 80051a2:	2901      	cmp	r1, #1
 80051a4:	d107      	bne.n	80051b6 <HAL_ADC_Init+0x152>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80051a6:	2d00      	cmp	r5, #0
 80051a8:	d14f      	bne.n	800524a <HAL_ADC_Init+0x1e6>
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 80051aa:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80051ac:	3901      	subs	r1, #1
 80051ae:	ea42 4141 	orr.w	r1, r2, r1, lsl #17
 80051b2:	f441 3280 	orr.w	r2, r1, #65536	@ 0x10000
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80051b6:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 80051b8:	2901      	cmp	r1, #1
 80051ba:	d015      	beq.n	80051e8 <HAL_ADC_Init+0x184>
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 80051bc:	4d35      	ldr	r5, [pc, #212]	@ (8005294 <HAL_ADC_Init+0x230>)
 80051be:	42ab      	cmp	r3, r5
 80051c0:	d003      	beq.n	80051ca <HAL_ADC_Init+0x166>
 80051c2:	f505 7580 	add.w	r5, r5, #256	@ 0x100
 80051c6:	42ab      	cmp	r3, r5
 80051c8:	d10a      	bne.n	80051e0 <HAL_ADC_Init+0x17c>
 80051ca:	f5b1 7f30 	cmp.w	r1, #704	@ 0x2c0
 80051ce:	d047      	beq.n	8005260 <HAL_ADC_Init+0x1fc>
 80051d0:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 80051d4:	d047      	beq.n	8005266 <HAL_ADC_Init+0x202>
 80051d6:	f5b1 7fe0 	cmp.w	r1, #448	@ 0x1c0
 80051da:	bf08      	it	eq
 80051dc:	f44f 7180 	moveq.w	r1, #256	@ 0x100
 80051e0:	6ae5      	ldr	r5, [r4, #44]	@ 0x2c
 80051e2:	4315      	orrs	r5, r2
 80051e4:	ea45 0201 	orr.w	r2, r5, r1
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80051e8:	6899      	ldr	r1, [r3, #8]
 80051ea:	f011 0f0c 	tst.w	r1, #12
 80051ee:	d10c      	bne.n	800520a <HAL_ADC_Init+0x1a6>
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 80051f0:	68d9      	ldr	r1, [r3, #12]
 80051f2:	f421 4180 	bic.w	r1, r1, #16384	@ 0x4000
 80051f6:	f021 0102 	bic.w	r1, r1, #2
 80051fa:	60d9      	str	r1, [r3, #12]
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 80051fc:	f894 1030 	ldrb.w	r1, [r4, #48]	@ 0x30
 8005200:	7e25      	ldrb	r5, [r4, #24]
 8005202:	0049      	lsls	r1, r1, #1
 8005204:	ea41 3185 	orr.w	r1, r1, r5, lsl #14
 8005208:	430a      	orrs	r2, r1
    MODIFY_REG(hadc->Instance->CFGR,
 800520a:	68dd      	ldr	r5, [r3, #12]
 800520c:	4922      	ldr	r1, [pc, #136]	@ (8005298 <HAL_ADC_Init+0x234>)
 800520e:	4029      	ands	r1, r5
 8005210:	4311      	orrs	r1, r2
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8005212:	6922      	ldr	r2, [r4, #16]
    MODIFY_REG(hadc->Instance->CFGR,
 8005214:	60d9      	str	r1, [r3, #12]
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8005216:	2a01      	cmp	r2, #1
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8005218:	bf05      	ittet	eq
 800521a:	6b19      	ldreq	r1, [r3, #48]	@ 0x30
 800521c:	69e2      	ldreq	r2, [r4, #28]
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800521e:	6b1a      	ldrne	r2, [r3, #48]	@ 0x30
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8005220:	f102 32ff 	addeq.w	r2, r2, #4294967295
 8005224:	bf06      	itte	eq
 8005226:	f021 010f 	biceq.w	r1, r1, #15
 800522a:	430a      	orreq	r2, r1
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800522c:	f022 020f 	bicne.w	r2, r2, #15
 8005230:	631a      	str	r2, [r3, #48]	@ 0x30
    ADC_CLEAR_ERRORCODE(hadc);
 8005232:	2300      	movs	r3, #0
 8005234:	6463      	str	r3, [r4, #68]	@ 0x44
    ADC_STATE_CLR_SET(hadc->State,
 8005236:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005238:	f023 0303 	bic.w	r3, r3, #3
 800523c:	f043 0301 	orr.w	r3, r3, #1
 8005240:	6423      	str	r3, [r4, #64]	@ 0x40
}
 8005242:	b003      	add	sp, #12
 8005244:	bd30      	pop	{r4, r5, pc}
 8005246:	460a      	mov	r2, r1
 8005248:	e74d      	b.n	80050e6 <HAL_ADC_Init+0x82>
        ADC_STATE_CLR_SET(hadc->State,
 800524a:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 800524c:	f021 0122 	bic.w	r1, r1, #34	@ 0x22
 8005250:	f041 0120 	orr.w	r1, r1, #32
 8005254:	6421      	str	r1, [r4, #64]	@ 0x40
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005256:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8005258:	f041 0101 	orr.w	r1, r1, #1
 800525c:	6461      	str	r1, [r4, #68]	@ 0x44
 800525e:	e7aa      	b.n	80051b6 <HAL_ADC_Init+0x152>
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8005260:	f44f 71e0 	mov.w	r1, #448	@ 0x1c0
 8005264:	e7bc      	b.n	80051e0 <HAL_ADC_Init+0x17c>
 8005266:	f44f 7130 	mov.w	r1, #704	@ 0x2c0
 800526a:	e7b9      	b.n	80051e0 <HAL_ADC_Init+0x17c>
    ADC_STATE_CLR_SET(hadc->State,
 800526c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800526e:	f023 0312 	bic.w	r3, r3, #18
 8005272:	f043 0310 	orr.w	r3, r3, #16
 8005276:	6423      	str	r3, [r4, #64]	@ 0x40
    return HAL_ERROR;
 8005278:	2001      	movs	r0, #1
 800527a:	e7e2      	b.n	8005242 <HAL_ADC_Init+0x1de>
 800527c:	50000100 	.word	0x50000100
 8005280:	50000500 	.word	0x50000500
 8005284:	50000700 	.word	0x50000700
 8005288:	20000014 	.word	0x20000014
 800528c:	000f4240 	.word	0x000f4240
 8005290:	50000300 	.word	0x50000300
 8005294:	50000400 	.word	0x50000400
 8005298:	fff0c007 	.word	0xfff0c007

0800529c <HAL_ADCEx_InjectedConvCpltCallback>:
}
 800529c:	4770      	bx	lr

0800529e <HAL_ADCEx_InjectedQueueOverflowCallback>:
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef* hadc)
 800529e:	4770      	bx	lr

080052a0 <HAL_ADCEx_LevelOutOfWindow2Callback>:
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef* hadc)
 80052a0:	4770      	bx	lr

080052a2 <HAL_ADCEx_LevelOutOfWindow3Callback>:
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef* hadc)
 80052a2:	4770      	bx	lr

080052a4 <HAL_ADC_IRQHandler>:
  uint32_t tmp_isr = hadc->Instance->ISR;
 80052a4:	6803      	ldr	r3, [r0, #0]
{
 80052a6:	b570      	push	{r4, r5, r6, lr}
  uint32_t tmp_isr = hadc->Instance->ISR;
 80052a8:	681d      	ldr	r5, [r3, #0]
  uint32_t tmp_ier = hadc->Instance->IER;
 80052aa:	685e      	ldr	r6, [r3, #4]
  if( (((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80052ac:	076a      	lsls	r2, r5, #29
{
 80052ae:	4604      	mov	r4, r0
  if( (((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80052b0:	d501      	bpl.n	80052b6 <HAL_ADC_IRQHandler+0x12>
 80052b2:	0770      	lsls	r0, r6, #29
 80052b4:	d403      	bmi.n	80052be <HAL_ADC_IRQHandler+0x1a>
 80052b6:	0729      	lsls	r1, r5, #28
 80052b8:	d543      	bpl.n	8005342 <HAL_ADC_IRQHandler+0x9e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))   )
 80052ba:	0732      	lsls	r2, r6, #28
 80052bc:	d541      	bpl.n	8005342 <HAL_ADC_IRQHandler+0x9e>
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80052be:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 80052c0:	06d0      	lsls	r0, r2, #27
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80052c2:	bf5e      	ittt	pl
 80052c4:	6c22      	ldrpl	r2, [r4, #64]	@ 0x40
 80052c6:	f442 7200 	orrpl.w	r2, r2, #512	@ 0x200
 80052ca:	6422      	strpl	r2, [r4, #64]	@ 0x40
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 80052cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80052d0:	d003      	beq.n	80052da <HAL_ADC_IRQHandler+0x36>
 80052d2:	4a90      	ldr	r2, [pc, #576]	@ (8005514 <HAL_ADC_IRQHandler+0x270>)
 80052d4:	4293      	cmp	r3, r2
 80052d6:	f040 8105 	bne.w	80054e4 <HAL_ADC_IRQHandler+0x240>
 80052da:	4a8f      	ldr	r2, [pc, #572]	@ (8005518 <HAL_ADC_IRQHandler+0x274>)
 80052dc:	6891      	ldr	r1, [r2, #8]
 80052de:	06c9      	lsls	r1, r1, #27
 80052e0:	d00c      	beq.n	80052fc <HAL_ADC_IRQHandler+0x58>
 80052e2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80052e6:	d003      	beq.n	80052f0 <HAL_ADC_IRQHandler+0x4c>
 80052e8:	498a      	ldr	r1, [pc, #552]	@ (8005514 <HAL_ADC_IRQHandler+0x270>)
 80052ea:	428b      	cmp	r3, r1
 80052ec:	f040 80ff 	bne.w	80054ee <HAL_ADC_IRQHandler+0x24a>
 80052f0:	6892      	ldr	r2, [r2, #8]
 80052f2:	f002 021f 	and.w	r2, r2, #31
 80052f6:	2a05      	cmp	r2, #5
 80052f8:	f040 8114 	bne.w	8005524 <HAL_ADC_IRQHandler+0x280>
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 80052fc:	68da      	ldr	r2, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 80052fe:	68d9      	ldr	r1, [r3, #12]
       (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == RESET)  )
 8005300:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 8005304:	f401 6140 	and.w	r1, r1, #3072	@ 0xc00
 8005308:	4311      	orrs	r1, r2
 800530a:	d114      	bne.n	8005336 <HAL_ADC_IRQHandler+0x92>
      if((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS)
 800530c:	0729      	lsls	r1, r5, #28
 800530e:	d512      	bpl.n	8005336 <HAL_ADC_IRQHandler+0x92>
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8005310:	689a      	ldr	r2, [r3, #8]
 8005312:	0752      	lsls	r2, r2, #29
 8005314:	f100 8122 	bmi.w	800555c <HAL_ADC_IRQHandler+0x2b8>
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8005318:	685a      	ldr	r2, [r3, #4]
 800531a:	f022 020c 	bic.w	r2, r2, #12
 800531e:	605a      	str	r2, [r3, #4]
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8005320:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005322:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005326:	6423      	str	r3, [r4, #64]	@ 0x40
          if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005328:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800532a:	04d8      	lsls	r0, r3, #19
 800532c:	d403      	bmi.n	8005336 <HAL_ADC_IRQHandler+0x92>
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800532e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005330:	f043 0301 	orr.w	r3, r3, #1
 8005334:	6423      	str	r3, [r4, #64]	@ 0x40
      HAL_ADC_ConvCpltCallback(hadc);
 8005336:	4620      	mov	r0, r4
 8005338:	f7ff fe5e 	bl	8004ff8 <HAL_ADC_ConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 800533c:	6823      	ldr	r3, [r4, #0]
 800533e:	220c      	movs	r2, #12
 8005340:	601a      	str	r2, [r3, #0]
  if( (((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8005342:	06a9      	lsls	r1, r5, #26
 8005344:	d501      	bpl.n	800534a <HAL_ADC_IRQHandler+0xa6>
 8005346:	06b2      	lsls	r2, r6, #26
 8005348:	d403      	bmi.n	8005352 <HAL_ADC_IRQHandler+0xae>
 800534a:	066b      	lsls	r3, r5, #25
 800534c:	d562      	bpl.n	8005414 <HAL_ADC_IRQHandler+0x170>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS))   )
 800534e:	0670      	lsls	r0, r6, #25
 8005350:	d560      	bpl.n	8005414 <HAL_ADC_IRQHandler+0x170>
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8005352:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005354:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8005358:	6423      	str	r3, [r4, #64]	@ 0x40
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 800535a:	6823      	ldr	r3, [r4, #0]
 800535c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005360:	d003      	beq.n	800536a <HAL_ADC_IRQHandler+0xc6>
 8005362:	4a6c      	ldr	r2, [pc, #432]	@ (8005514 <HAL_ADC_IRQHandler+0x270>)
 8005364:	4293      	cmp	r3, r2
 8005366:	f040 8102 	bne.w	800556e <HAL_ADC_IRQHandler+0x2ca>
 800536a:	4a6b      	ldr	r2, [pc, #428]	@ (8005518 <HAL_ADC_IRQHandler+0x274>)
 800536c:	6891      	ldr	r1, [r2, #8]
 800536e:	06c9      	lsls	r1, r1, #27
 8005370:	d00c      	beq.n	800538c <HAL_ADC_IRQHandler+0xe8>
 8005372:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005376:	d003      	beq.n	8005380 <HAL_ADC_IRQHandler+0xdc>
 8005378:	4966      	ldr	r1, [pc, #408]	@ (8005514 <HAL_ADC_IRQHandler+0x270>)
 800537a:	428b      	cmp	r3, r1
 800537c:	f040 80fc 	bne.w	8005578 <HAL_ADC_IRQHandler+0x2d4>
 8005380:	6892      	ldr	r2, [r2, #8]
 8005382:	f002 021f 	and.w	r2, r2, #31
 8005386:	2a05      	cmp	r2, #5
 8005388:	f040 8108 	bne.w	800559c <HAL_ADC_IRQHandler+0x2f8>
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 800538c:	68da      	ldr	r2, [r3, #12]
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc))
 800538e:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8005390:	f011 0fc0 	tst.w	r1, #192	@ 0xc0
 8005394:	d138      	bne.n	8005408 <HAL_ADC_IRQHandler+0x164>
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 8005396:	0191      	lsls	r1, r2, #6
 8005398:	d506      	bpl.n	80053a8 <HAL_ADC_IRQHandler+0x104>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 800539a:	68d9      	ldr	r1, [r3, #12]
          (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )   )
 800539c:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 80053a0:	f401 6140 	and.w	r1, r1, #3072	@ 0xc00
 80053a4:	4311      	orrs	r1, r2
 80053a6:	d12f      	bne.n	8005408 <HAL_ADC_IRQHandler+0x164>
        if((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS)
 80053a8:	0668      	lsls	r0, r5, #25
 80053aa:	d52d      	bpl.n	8005408 <HAL_ADC_IRQHandler+0x164>
          if (ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc))
 80053ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80053b0:	d003      	beq.n	80053ba <HAL_ADC_IRQHandler+0x116>
 80053b2:	4a58      	ldr	r2, [pc, #352]	@ (8005514 <HAL_ADC_IRQHandler+0x270>)
 80053b4:	4293      	cmp	r3, r2
 80053b6:	f040 810d 	bne.w	80055d4 <HAL_ADC_IRQHandler+0x330>
 80053ba:	4a57      	ldr	r2, [pc, #348]	@ (8005518 <HAL_ADC_IRQHandler+0x274>)
 80053bc:	6891      	ldr	r1, [r2, #8]
 80053be:	06c9      	lsls	r1, r1, #27
 80053c0:	d00c      	beq.n	80053dc <HAL_ADC_IRQHandler+0x138>
 80053c2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80053c6:	d003      	beq.n	80053d0 <HAL_ADC_IRQHandler+0x12c>
 80053c8:	4952      	ldr	r1, [pc, #328]	@ (8005514 <HAL_ADC_IRQHandler+0x270>)
 80053ca:	428b      	cmp	r3, r1
 80053cc:	f040 8107 	bne.w	80055de <HAL_ADC_IRQHandler+0x33a>
 80053d0:	6892      	ldr	r2, [r2, #8]
 80053d2:	f002 021f 	and.w	r2, r2, #31
 80053d6:	2a06      	cmp	r2, #6
 80053d8:	f040 8113 	bne.w	8005602 <HAL_ADC_IRQHandler+0x35e>
            tmp_cfgr_jqm = READ_REG(hadc->Instance->CFGR); 
 80053dc:	68da      	ldr	r2, [r3, #12]
          if(READ_BIT(tmp_cfgr_jqm, ADC_CFGR_JQM) == RESET)
 80053de:	0291      	lsls	r1, r2, #10
 80053e0:	d412      	bmi.n	8005408 <HAL_ADC_IRQHandler+0x164>
            if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 80053e2:	689a      	ldr	r2, [r3, #8]
 80053e4:	0712      	lsls	r2, r2, #28
 80053e6:	f100 8128 	bmi.w	800563a <HAL_ADC_IRQHandler+0x396>
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80053ea:	685a      	ldr	r2, [r3, #4]
 80053ec:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80053f0:	605a      	str	r2, [r3, #4]
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80053f2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80053f4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80053f8:	6423      	str	r3, [r4, #64]	@ 0x40
              if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80053fa:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80053fc:	05d8      	lsls	r0, r3, #23
 80053fe:	d403      	bmi.n	8005408 <HAL_ADC_IRQHandler+0x164>
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005400:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005402:	f043 0301 	orr.w	r3, r3, #1
 8005406:	6423      	str	r3, [r4, #64]	@ 0x40
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8005408:	4620      	mov	r0, r4
 800540a:	f7ff ff47 	bl	800529c <HAL_ADCEx_InjectedConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 800540e:	6823      	ldr	r3, [r4, #0]
 8005410:	2260      	movs	r2, #96	@ 0x60
 8005412:	601a      	str	r2, [r3, #0]
  if(((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8005414:	0629      	lsls	r1, r5, #24
 8005416:	d50b      	bpl.n	8005430 <HAL_ADC_IRQHandler+0x18c>
 8005418:	0632      	lsls	r2, r6, #24
 800541a:	d509      	bpl.n	8005430 <HAL_ADC_IRQHandler+0x18c>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800541c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800541e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005422:	6423      	str	r3, [r4, #64]	@ 0x40
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8005424:	4620      	mov	r0, r4
 8005426:	f7ff fde8 	bl	8004ffa <HAL_ADC_LevelOutOfWindowCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 800542a:	6823      	ldr	r3, [r4, #0]
 800542c:	2280      	movs	r2, #128	@ 0x80
 800542e:	601a      	str	r2, [r3, #0]
  if(((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8005430:	05eb      	lsls	r3, r5, #23
 8005432:	d50c      	bpl.n	800544e <HAL_ADC_IRQHandler+0x1aa>
 8005434:	05f0      	lsls	r0, r6, #23
 8005436:	d50a      	bpl.n	800544e <HAL_ADC_IRQHandler+0x1aa>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8005438:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800543a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800543e:	6423      	str	r3, [r4, #64]	@ 0x40
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8005440:	4620      	mov	r0, r4
 8005442:	f7ff ff2d 	bl	80052a0 <HAL_ADCEx_LevelOutOfWindow2Callback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8005446:	6823      	ldr	r3, [r4, #0]
 8005448:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800544c:	601a      	str	r2, [r3, #0]
  if(((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 800544e:	05a9      	lsls	r1, r5, #22
 8005450:	d50c      	bpl.n	800546c <HAL_ADC_IRQHandler+0x1c8>
 8005452:	05b2      	lsls	r2, r6, #22
 8005454:	d50a      	bpl.n	800546c <HAL_ADC_IRQHandler+0x1c8>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8005456:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005458:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800545c:	6423      	str	r3, [r4, #64]	@ 0x40
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 800545e:	4620      	mov	r0, r4
 8005460:	f7ff ff1f 	bl	80052a2 <HAL_ADCEx_LevelOutOfWindow3Callback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8005464:	6823      	ldr	r3, [r4, #0]
 8005466:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800546a:	601a      	str	r2, [r3, #0]
  if(((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 800546c:	06eb      	lsls	r3, r5, #27
 800546e:	d525      	bpl.n	80054bc <HAL_ADC_IRQHandler+0x218>
 8005470:	06f0      	lsls	r0, r6, #27
 8005472:	d523      	bpl.n	80054bc <HAL_ADC_IRQHandler+0x218>
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8005474:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005476:	2b01      	cmp	r3, #1
 8005478:	d012      	beq.n	80054a0 <HAL_ADC_IRQHandler+0x1fc>
      tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800547a:	6822      	ldr	r2, [r4, #0]
 800547c:	f1b2 4fa0 	cmp.w	r2, #1342177280	@ 0x50000000
 8005480:	f000 80e4 	beq.w	800564c <HAL_ADC_IRQHandler+0x3a8>
 8005484:	4823      	ldr	r0, [pc, #140]	@ (8005514 <HAL_ADC_IRQHandler+0x270>)
 8005486:	4b25      	ldr	r3, [pc, #148]	@ (800551c <HAL_ADC_IRQHandler+0x278>)
 8005488:	4923      	ldr	r1, [pc, #140]	@ (8005518 <HAL_ADC_IRQHandler+0x274>)
 800548a:	4282      	cmp	r2, r0
 800548c:	bf08      	it	eq
 800548e:	460b      	moveq	r3, r1
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8005490:	6899      	ldr	r1, [r3, #8]
 8005492:	06c9      	lsls	r1, r1, #27
 8005494:	f040 80dc 	bne.w	8005650 <HAL_ADC_IRQHandler+0x3ac>
        if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8005498:	68d3      	ldr	r3, [r2, #12]
 800549a:	f013 0f01 	tst.w	r3, #1
        if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 800549e:	d00a      	beq.n	80054b6 <HAL_ADC_IRQHandler+0x212>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80054a0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80054a2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80054a6:	6423      	str	r3, [r4, #64]	@ 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80054a8:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 80054aa:	f043 0302 	orr.w	r3, r3, #2
 80054ae:	6463      	str	r3, [r4, #68]	@ 0x44
      HAL_ADC_ErrorCallback(hadc);
 80054b0:	4620      	mov	r0, r4
 80054b2:	f7ff fda3 	bl	8004ffc <HAL_ADC_ErrorCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80054b6:	6823      	ldr	r3, [r4, #0]
 80054b8:	2210      	movs	r2, #16
 80054ba:	601a      	str	r2, [r3, #0]
  if(((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 80054bc:	056a      	lsls	r2, r5, #21
 80054be:	d510      	bpl.n	80054e2 <HAL_ADC_IRQHandler+0x23e>
 80054c0:	0573      	lsls	r3, r6, #21
 80054c2:	d50e      	bpl.n	80054e2 <HAL_ADC_IRQHandler+0x23e>
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80054c4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80054c6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80054ca:	6423      	str	r3, [r4, #64]	@ 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80054cc:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 80054ce:	f043 0308 	orr.w	r3, r3, #8
 80054d2:	6463      	str	r3, [r4, #68]	@ 0x44
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80054d4:	6823      	ldr	r3, [r4, #0]
 80054d6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80054da:	601a      	str	r2, [r3, #0]
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80054dc:	4620      	mov	r0, r4
 80054de:	f7ff fede 	bl	800529e <HAL_ADCEx_InjectedQueueOverflowCallback>
}
 80054e2:	bd70      	pop	{r4, r5, r6, pc}
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 80054e4:	4a0d      	ldr	r2, [pc, #52]	@ (800551c <HAL_ADC_IRQHandler+0x278>)
 80054e6:	6892      	ldr	r2, [r2, #8]
 80054e8:	06d0      	lsls	r0, r2, #27
 80054ea:	f43f af07 	beq.w	80052fc <HAL_ADC_IRQHandler+0x58>
 80054ee:	4a0b      	ldr	r2, [pc, #44]	@ (800551c <HAL_ADC_IRQHandler+0x278>)
 80054f0:	6892      	ldr	r2, [r2, #8]
 80054f2:	f002 021f 	and.w	r2, r2, #31
 80054f6:	2a05      	cmp	r2, #5
 80054f8:	f43f af00 	beq.w	80052fc <HAL_ADC_IRQHandler+0x58>
 80054fc:	4a07      	ldr	r2, [pc, #28]	@ (800551c <HAL_ADC_IRQHandler+0x278>)
 80054fe:	6892      	ldr	r2, [r2, #8]
 8005500:	f002 021f 	and.w	r2, r2, #31
 8005504:	2a09      	cmp	r2, #9
 8005506:	f43f aef9 	beq.w	80052fc <HAL_ADC_IRQHandler+0x58>
 800550a:	4a05      	ldr	r2, [pc, #20]	@ (8005520 <HAL_ADC_IRQHandler+0x27c>)
 800550c:	4293      	cmp	r3, r2
 800550e:	d123      	bne.n	8005558 <HAL_ADC_IRQHandler+0x2b4>
 8005510:	e6f4      	b.n	80052fc <HAL_ADC_IRQHandler+0x58>
 8005512:	bf00      	nop
 8005514:	50000100 	.word	0x50000100
 8005518:	50000300 	.word	0x50000300
 800551c:	50000700 	.word	0x50000700
 8005520:	50000400 	.word	0x50000400
 8005524:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005528:	d002      	beq.n	8005530 <HAL_ADC_IRQHandler+0x28c>
 800552a:	4a4b      	ldr	r2, [pc, #300]	@ (8005658 <HAL_ADC_IRQHandler+0x3b4>)
 800552c:	4293      	cmp	r3, r2
 800552e:	d1e5      	bne.n	80054fc <HAL_ADC_IRQHandler+0x258>
 8005530:	4a4a      	ldr	r2, [pc, #296]	@ (800565c <HAL_ADC_IRQHandler+0x3b8>)
 8005532:	6892      	ldr	r2, [r2, #8]
 8005534:	f002 021f 	and.w	r2, r2, #31
 8005538:	2a09      	cmp	r2, #9
 800553a:	f43f aedf 	beq.w	80052fc <HAL_ADC_IRQHandler+0x58>
 800553e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005542:	f43f aedb 	beq.w	80052fc <HAL_ADC_IRQHandler+0x58>
 8005546:	4a46      	ldr	r2, [pc, #280]	@ (8005660 <HAL_ADC_IRQHandler+0x3bc>)
 8005548:	4293      	cmp	r3, r2
 800554a:	f43f aed7 	beq.w	80052fc <HAL_ADC_IRQHandler+0x58>
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 800554e:	4942      	ldr	r1, [pc, #264]	@ (8005658 <HAL_ADC_IRQHandler+0x3b4>)
 8005550:	428b      	cmp	r3, r1
 8005552:	bf08      	it	eq
 8005554:	f04f 42a0 	moveq.w	r2, #1342177280	@ 0x50000000
 8005558:	68d2      	ldr	r2, [r2, #12]
 800555a:	e6d0      	b.n	80052fe <HAL_ADC_IRQHandler+0x5a>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800555c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800555e:	f043 0310 	orr.w	r3, r3, #16
 8005562:	6423      	str	r3, [r4, #64]	@ 0x40
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005564:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8005566:	f043 0301 	orr.w	r3, r3, #1
 800556a:	6463      	str	r3, [r4, #68]	@ 0x44
 800556c:	e6e3      	b.n	8005336 <HAL_ADC_IRQHandler+0x92>
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 800556e:	4a3d      	ldr	r2, [pc, #244]	@ (8005664 <HAL_ADC_IRQHandler+0x3c0>)
 8005570:	6892      	ldr	r2, [r2, #8]
 8005572:	06d0      	lsls	r0, r2, #27
 8005574:	f43f af0a 	beq.w	800538c <HAL_ADC_IRQHandler+0xe8>
 8005578:	4a3a      	ldr	r2, [pc, #232]	@ (8005664 <HAL_ADC_IRQHandler+0x3c0>)
 800557a:	6892      	ldr	r2, [r2, #8]
 800557c:	f002 021f 	and.w	r2, r2, #31
 8005580:	2a05      	cmp	r2, #5
 8005582:	f43f af03 	beq.w	800538c <HAL_ADC_IRQHandler+0xe8>
 8005586:	4a37      	ldr	r2, [pc, #220]	@ (8005664 <HAL_ADC_IRQHandler+0x3c0>)
 8005588:	6892      	ldr	r2, [r2, #8]
 800558a:	f002 021f 	and.w	r2, r2, #31
 800558e:	2a09      	cmp	r2, #9
 8005590:	f43f aefc 	beq.w	800538c <HAL_ADC_IRQHandler+0xe8>
 8005594:	4a32      	ldr	r2, [pc, #200]	@ (8005660 <HAL_ADC_IRQHandler+0x3bc>)
 8005596:	4293      	cmp	r3, r2
 8005598:	d11a      	bne.n	80055d0 <HAL_ADC_IRQHandler+0x32c>
 800559a:	e6f7      	b.n	800538c <HAL_ADC_IRQHandler+0xe8>
 800559c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80055a0:	d002      	beq.n	80055a8 <HAL_ADC_IRQHandler+0x304>
 80055a2:	4a2d      	ldr	r2, [pc, #180]	@ (8005658 <HAL_ADC_IRQHandler+0x3b4>)
 80055a4:	4293      	cmp	r3, r2
 80055a6:	d1ee      	bne.n	8005586 <HAL_ADC_IRQHandler+0x2e2>
 80055a8:	4a2c      	ldr	r2, [pc, #176]	@ (800565c <HAL_ADC_IRQHandler+0x3b8>)
 80055aa:	6892      	ldr	r2, [r2, #8]
 80055ac:	f002 021f 	and.w	r2, r2, #31
 80055b0:	2a09      	cmp	r2, #9
 80055b2:	f43f aeeb 	beq.w	800538c <HAL_ADC_IRQHandler+0xe8>
 80055b6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80055ba:	f43f aee7 	beq.w	800538c <HAL_ADC_IRQHandler+0xe8>
 80055be:	4a28      	ldr	r2, [pc, #160]	@ (8005660 <HAL_ADC_IRQHandler+0x3bc>)
 80055c0:	4293      	cmp	r3, r2
 80055c2:	f43f aee3 	beq.w	800538c <HAL_ADC_IRQHandler+0xe8>
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 80055c6:	4924      	ldr	r1, [pc, #144]	@ (8005658 <HAL_ADC_IRQHandler+0x3b4>)
 80055c8:	428b      	cmp	r3, r1
 80055ca:	bf08      	it	eq
 80055cc:	f04f 42a0 	moveq.w	r2, #1342177280	@ 0x50000000
 80055d0:	68d2      	ldr	r2, [r2, #12]
 80055d2:	e6dc      	b.n	800538e <HAL_ADC_IRQHandler+0xea>
          if (ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc))
 80055d4:	4a23      	ldr	r2, [pc, #140]	@ (8005664 <HAL_ADC_IRQHandler+0x3c0>)
 80055d6:	6892      	ldr	r2, [r2, #8]
 80055d8:	06d0      	lsls	r0, r2, #27
 80055da:	f43f aeff 	beq.w	80053dc <HAL_ADC_IRQHandler+0x138>
 80055de:	4a21      	ldr	r2, [pc, #132]	@ (8005664 <HAL_ADC_IRQHandler+0x3c0>)
 80055e0:	6892      	ldr	r2, [r2, #8]
 80055e2:	f002 021f 	and.w	r2, r2, #31
 80055e6:	2a06      	cmp	r2, #6
 80055e8:	f43f aef8 	beq.w	80053dc <HAL_ADC_IRQHandler+0x138>
 80055ec:	4a1d      	ldr	r2, [pc, #116]	@ (8005664 <HAL_ADC_IRQHandler+0x3c0>)
 80055ee:	6892      	ldr	r2, [r2, #8]
 80055f0:	f002 021f 	and.w	r2, r2, #31
 80055f4:	2a07      	cmp	r2, #7
 80055f6:	f43f aef1 	beq.w	80053dc <HAL_ADC_IRQHandler+0x138>
 80055fa:	4a19      	ldr	r2, [pc, #100]	@ (8005660 <HAL_ADC_IRQHandler+0x3bc>)
 80055fc:	4293      	cmp	r3, r2
 80055fe:	d11a      	bne.n	8005636 <HAL_ADC_IRQHandler+0x392>
 8005600:	e6ec      	b.n	80053dc <HAL_ADC_IRQHandler+0x138>
 8005602:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005606:	d002      	beq.n	800560e <HAL_ADC_IRQHandler+0x36a>
 8005608:	4a13      	ldr	r2, [pc, #76]	@ (8005658 <HAL_ADC_IRQHandler+0x3b4>)
 800560a:	4293      	cmp	r3, r2
 800560c:	d1ee      	bne.n	80055ec <HAL_ADC_IRQHandler+0x348>
 800560e:	4a13      	ldr	r2, [pc, #76]	@ (800565c <HAL_ADC_IRQHandler+0x3b8>)
 8005610:	6892      	ldr	r2, [r2, #8]
 8005612:	f002 021f 	and.w	r2, r2, #31
 8005616:	2a07      	cmp	r2, #7
 8005618:	f43f aee0 	beq.w	80053dc <HAL_ADC_IRQHandler+0x138>
 800561c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005620:	f43f aedc 	beq.w	80053dc <HAL_ADC_IRQHandler+0x138>
 8005624:	4a0e      	ldr	r2, [pc, #56]	@ (8005660 <HAL_ADC_IRQHandler+0x3bc>)
 8005626:	4293      	cmp	r3, r2
 8005628:	f43f aed8 	beq.w	80053dc <HAL_ADC_IRQHandler+0x138>
            tmp_cfgr_jqm = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 800562c:	490a      	ldr	r1, [pc, #40]	@ (8005658 <HAL_ADC_IRQHandler+0x3b4>)
 800562e:	428b      	cmp	r3, r1
 8005630:	bf08      	it	eq
 8005632:	f04f 42a0 	moveq.w	r2, #1342177280	@ 0x50000000
 8005636:	68d2      	ldr	r2, [r2, #12]
 8005638:	e6d1      	b.n	80053de <HAL_ADC_IRQHandler+0x13a>
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800563a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800563c:	f043 0310 	orr.w	r3, r3, #16
 8005640:	6423      	str	r3, [r4, #64]	@ 0x40
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005642:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8005644:	f043 0301 	orr.w	r3, r3, #1
 8005648:	6463      	str	r3, [r4, #68]	@ 0x44
 800564a:	e6dd      	b.n	8005408 <HAL_ADC_IRQHandler+0x164>
      tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800564c:	4b03      	ldr	r3, [pc, #12]	@ (800565c <HAL_ADC_IRQHandler+0x3b8>)
 800564e:	e71f      	b.n	8005490 <HAL_ADC_IRQHandler+0x1ec>
        if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 8005650:	689b      	ldr	r3, [r3, #8]
 8005652:	f413 4f40 	tst.w	r3, #49152	@ 0xc000
 8005656:	e722      	b.n	800549e <HAL_ADC_IRQHandler+0x1fa>
 8005658:	50000100 	.word	0x50000100
 800565c:	50000300 	.word	0x50000300
 8005660:	50000400 	.word	0x50000400
 8005664:	50000700 	.word	0x50000700

08005668 <HAL_ADC_ConfigChannel>:
{
 8005668:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800566a:	4605      	mov	r5, r0
  __IO uint32_t wait_loop_index = 0U;
 800566c:	2300      	movs	r3, #0
 800566e:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8005670:	f895 303c 	ldrb.w	r3, [r5, #60]	@ 0x3c
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8005674:	68c8      	ldr	r0, [r1, #12]
  __HAL_LOCK(hadc);
 8005676:	2b01      	cmp	r3, #1
 8005678:	f000 816a 	beq.w	8005950 <HAL_ADC_ConfigChannel+0x2e8>
 800567c:	2301      	movs	r3, #1
 800567e:	f885 303c 	strb.w	r3, [r5, #60]	@ 0x3c
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8005682:	682b      	ldr	r3, [r5, #0]
 8005684:	689a      	ldr	r2, [r3, #8]
 8005686:	0757      	lsls	r7, r2, #29
 8005688:	f100 815c 	bmi.w	8005944 <HAL_ADC_ConfigChannel+0x2dc>
    if (sConfig->Rank < 5U)
 800568c:	684e      	ldr	r6, [r1, #4]
      MODIFY_REG(hadc->Instance->SQR1,
 800568e:	680c      	ldr	r4, [r1, #0]
 8005690:	2206      	movs	r2, #6
    if (sConfig->Rank < 5U)
 8005692:	2e04      	cmp	r6, #4
      MODIFY_REG(hadc->Instance->SQR1,
 8005694:	fb06 f202 	mul.w	r2, r6, r2
    if (sConfig->Rank < 5U)
 8005698:	d82c      	bhi.n	80056f4 <HAL_ADC_ConfigChannel+0x8c>
      MODIFY_REG(hadc->Instance->SQR1,
 800569a:	6b1e      	ldr	r6, [r3, #48]	@ 0x30
 800569c:	271f      	movs	r7, #31
 800569e:	4097      	lsls	r7, r2
 80056a0:	ea26 0607 	bic.w	r6, r6, r7
 80056a4:	fa04 f202 	lsl.w	r2, r4, r2
 80056a8:	4332      	orrs	r2, r6
 80056aa:	631a      	str	r2, [r3, #48]	@ 0x30
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80056ac:	689a      	ldr	r2, [r3, #8]
 80056ae:	f012 0f0c 	tst.w	r2, #12
 80056b2:	d158      	bne.n	8005766 <HAL_ADC_ConfigChannel+0xfe>
    if (sConfig->Channel >= ADC_CHANNEL_10)
 80056b4:	2c09      	cmp	r4, #9
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 80056b6:	f8d1 c008 	ldr.w	ip, [r1, #8]
 80056ba:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 80056be:	f04f 0607 	mov.w	r6, #7
    if (sConfig->Channel >= ADC_CHANNEL_10)
 80056c2:	d93c      	bls.n	800573e <HAL_ADC_ConfigChannel+0xd6>
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 80056c4:	699f      	ldr	r7, [r3, #24]
 80056c6:	3a1e      	subs	r2, #30
 80056c8:	4096      	lsls	r6, r2
 80056ca:	ea27 0606 	bic.w	r6, r7, r6
 80056ce:	fa0c f202 	lsl.w	r2, ip, r2
 80056d2:	4332      	orrs	r2, r6
 80056d4:	619a      	str	r2, [r3, #24]
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 80056d6:	68da      	ldr	r2, [r3, #12]
 80056d8:	694e      	ldr	r6, [r1, #20]
 80056da:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 80056de:	0052      	lsls	r2, r2, #1
 80056e0:	4096      	lsls	r6, r2
    switch (sConfig->OffsetNumber)
 80056e2:	690a      	ldr	r2, [r1, #16]
 80056e4:	3a01      	subs	r2, #1
      MODIFY_REG(hadc->Instance->OFR1               ,
 80056e6:	06a7      	lsls	r7, r4, #26
    switch (sConfig->OffsetNumber)
 80056e8:	2a03      	cmp	r2, #3
 80056ea:	d86b      	bhi.n	80057c4 <HAL_ADC_ConfigChannel+0x15c>
 80056ec:	e8df f002 	tbb	[pc, r2]
 80056f0:	5f544931 	.word	0x5f544931
    else if (sConfig->Rank < 10U)
 80056f4:	2e09      	cmp	r6, #9
 80056f6:	d80a      	bhi.n	800570e <HAL_ADC_ConfigChannel+0xa6>
      MODIFY_REG(hadc->Instance->SQR2,
 80056f8:	6b5e      	ldr	r6, [r3, #52]	@ 0x34
 80056fa:	3a1e      	subs	r2, #30
 80056fc:	271f      	movs	r7, #31
 80056fe:	4097      	lsls	r7, r2
 8005700:	ea26 0607 	bic.w	r6, r6, r7
 8005704:	fa04 f202 	lsl.w	r2, r4, r2
 8005708:	4332      	orrs	r2, r6
 800570a:	635a      	str	r2, [r3, #52]	@ 0x34
 800570c:	e7ce      	b.n	80056ac <HAL_ADC_ConfigChannel+0x44>
    else if (sConfig->Rank < 15U)
 800570e:	2e0e      	cmp	r6, #14
 8005710:	f04f 061f 	mov.w	r6, #31
 8005714:	d809      	bhi.n	800572a <HAL_ADC_ConfigChannel+0xc2>
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8005716:	6b9f      	ldr	r7, [r3, #56]	@ 0x38
 8005718:	3a3c      	subs	r2, #60	@ 0x3c
 800571a:	4096      	lsls	r6, r2
 800571c:	ea27 0606 	bic.w	r6, r7, r6
 8005720:	fa04 f202 	lsl.w	r2, r4, r2
 8005724:	4332      	orrs	r2, r6
 8005726:	639a      	str	r2, [r3, #56]	@ 0x38
 8005728:	e7c0      	b.n	80056ac <HAL_ADC_ConfigChannel+0x44>
      MODIFY_REG(hadc->Instance->SQR4                        ,
 800572a:	6bdf      	ldr	r7, [r3, #60]	@ 0x3c
 800572c:	3a5a      	subs	r2, #90	@ 0x5a
 800572e:	4096      	lsls	r6, r2
 8005730:	ea27 0606 	bic.w	r6, r7, r6
 8005734:	fa04 f202 	lsl.w	r2, r4, r2
 8005738:	4332      	orrs	r2, r6
 800573a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800573c:	e7b6      	b.n	80056ac <HAL_ADC_ConfigChannel+0x44>
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 800573e:	695f      	ldr	r7, [r3, #20]
 8005740:	4096      	lsls	r6, r2
 8005742:	ea27 0606 	bic.w	r6, r7, r6
 8005746:	fa0c fc02 	lsl.w	ip, ip, r2
 800574a:	ea46 060c 	orr.w	r6, r6, ip
 800574e:	615e      	str	r6, [r3, #20]
 8005750:	e7c1      	b.n	80056d6 <HAL_ADC_ConfigChannel+0x6e>
      MODIFY_REG(hadc->Instance->OFR1               ,
 8005752:	f8d3 c060 	ldr.w	ip, [r3, #96]	@ 0x60
 8005756:	4a7f      	ldr	r2, [pc, #508]	@ (8005954 <HAL_ADC_ConfigChannel+0x2ec>)
 8005758:	ea0c 0202 	and.w	r2, ip, r2
 800575c:	433a      	orrs	r2, r7
 800575e:	4332      	orrs	r2, r6
 8005760:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8005764:	661a      	str	r2, [r3, #96]	@ 0x60
  if (ADC_IS_ENABLE(hadc) == RESET)
 8005766:	689a      	ldr	r2, [r3, #8]
 8005768:	f002 0203 	and.w	r2, r2, #3
 800576c:	2a01      	cmp	r2, #1
 800576e:	d14d      	bne.n	800580c <HAL_ADC_ConfigChannel+0x1a4>
 8005770:	681a      	ldr	r2, [r3, #0]
 8005772:	07d6      	lsls	r6, r2, #31
 8005774:	d54a      	bpl.n	800580c <HAL_ADC_ConfigChannel+0x1a4>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005776:	2000      	movs	r0, #0
  __HAL_UNLOCK(hadc);
 8005778:	2300      	movs	r3, #0
 800577a:	f885 303c 	strb.w	r3, [r5, #60]	@ 0x3c
}
 800577e:	b003      	add	sp, #12
 8005780:	bdf0      	pop	{r4, r5, r6, r7, pc}
      MODIFY_REG(hadc->Instance->OFR2               ,
 8005782:	f8d3 c064 	ldr.w	ip, [r3, #100]	@ 0x64
 8005786:	4a73      	ldr	r2, [pc, #460]	@ (8005954 <HAL_ADC_ConfigChannel+0x2ec>)
 8005788:	ea0c 0202 	and.w	r2, ip, r2
 800578c:	433a      	orrs	r2, r7
 800578e:	4332      	orrs	r2, r6
 8005790:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8005794:	665a      	str	r2, [r3, #100]	@ 0x64
      break;
 8005796:	e7e6      	b.n	8005766 <HAL_ADC_ConfigChannel+0xfe>
      MODIFY_REG(hadc->Instance->OFR3               ,
 8005798:	f8d3 c068 	ldr.w	ip, [r3, #104]	@ 0x68
 800579c:	4a6d      	ldr	r2, [pc, #436]	@ (8005954 <HAL_ADC_ConfigChannel+0x2ec>)
 800579e:	ea0c 0202 	and.w	r2, ip, r2
 80057a2:	433a      	orrs	r2, r7
 80057a4:	4332      	orrs	r2, r6
 80057a6:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80057aa:	669a      	str	r2, [r3, #104]	@ 0x68
      break;
 80057ac:	e7db      	b.n	8005766 <HAL_ADC_ConfigChannel+0xfe>
      MODIFY_REG(hadc->Instance->OFR4               ,
 80057ae:	f8d3 c06c 	ldr.w	ip, [r3, #108]	@ 0x6c
 80057b2:	4a68      	ldr	r2, [pc, #416]	@ (8005954 <HAL_ADC_ConfigChannel+0x2ec>)
 80057b4:	ea0c 0202 	and.w	r2, ip, r2
 80057b8:	433a      	orrs	r2, r7
 80057ba:	4332      	orrs	r2, r6
 80057bc:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 80057c0:	66da      	str	r2, [r3, #108]	@ 0x6c
 80057c2:	e7d0      	b.n	8005766 <HAL_ADC_ConfigChannel+0xfe>
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80057c4:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80057c6:	f002 42f8 	and.w	r2, r2, #2080374784	@ 0x7c000000
 80057ca:	42ba      	cmp	r2, r7
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 80057cc:	bf02      	ittt	eq
 80057ce:	6e1a      	ldreq	r2, [r3, #96]	@ 0x60
 80057d0:	f022 4200 	biceq.w	r2, r2, #2147483648	@ 0x80000000
 80057d4:	661a      	streq	r2, [r3, #96]	@ 0x60
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80057d6:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80057d8:	f002 42f8 	and.w	r2, r2, #2080374784	@ 0x7c000000
 80057dc:	42ba      	cmp	r2, r7
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 80057de:	bf02      	ittt	eq
 80057e0:	6e5a      	ldreq	r2, [r3, #100]	@ 0x64
 80057e2:	f022 4200 	biceq.w	r2, r2, #2147483648	@ 0x80000000
 80057e6:	665a      	streq	r2, [r3, #100]	@ 0x64
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80057e8:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80057ea:	f002 42f8 	and.w	r2, r2, #2080374784	@ 0x7c000000
 80057ee:	42ba      	cmp	r2, r7
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 80057f0:	bf02      	ittt	eq
 80057f2:	6e9a      	ldreq	r2, [r3, #104]	@ 0x68
 80057f4:	f022 4200 	biceq.w	r2, r2, #2147483648	@ 0x80000000
 80057f8:	669a      	streq	r2, [r3, #104]	@ 0x68
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80057fa:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80057fc:	f002 42f8 	and.w	r2, r2, #2080374784	@ 0x7c000000
 8005800:	42ba      	cmp	r2, r7
 8005802:	d1b0      	bne.n	8005766 <HAL_ADC_ConfigChannel+0xfe>
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8005804:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8005806:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800580a:	e7d9      	b.n	80057c0 <HAL_ADC_ConfigChannel+0x158>
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800580c:	2201      	movs	r2, #1
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 800580e:	2801      	cmp	r0, #1
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8005810:	fa02 f204 	lsl.w	r2, r2, r4
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8005814:	d047      	beq.n	80058a6 <HAL_ADC_ConfigChannel+0x23e>
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8005816:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 800581a:	ea21 0202 	bic.w	r2, r1, r2
 800581e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005822:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005826:	d164      	bne.n	80058f2 <HAL_ADC_ConfigChannel+0x28a>
 8005828:	494b      	ldr	r1, [pc, #300]	@ (8005958 <HAL_ADC_ConfigChannel+0x2f0>)
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800582a:	2c10      	cmp	r4, #16
 800582c:	d166      	bne.n	80058fc <HAL_ADC_ConfigChannel+0x294>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 800582e:	688a      	ldr	r2, [r1, #8]
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8005830:	f412 0f00 	tst.w	r2, #8388608	@ 0x800000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8005834:	d19f      	bne.n	8005776 <HAL_ADC_ConfigChannel+0x10e>
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8005836:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800583a:	4a48      	ldr	r2, [pc, #288]	@ (800595c <HAL_ADC_ConfigChannel+0x2f4>)
 800583c:	d009      	beq.n	8005852 <HAL_ADC_ConfigChannel+0x1ea>
 800583e:	4293      	cmp	r3, r2
 8005840:	d069      	beq.n	8005916 <HAL_ADC_ConfigChannel+0x2ae>
 8005842:	f502 7240 	add.w	r2, r2, #768	@ 0x300
 8005846:	4293      	cmp	r3, r2
 8005848:	4845      	ldr	r0, [pc, #276]	@ (8005960 <HAL_ADC_ConfigChannel+0x2f8>)
 800584a:	d067      	beq.n	800591c <HAL_ADC_ConfigChannel+0x2b4>
 800584c:	4283      	cmp	r3, r0
 800584e:	bf18      	it	ne
 8005850:	2200      	movne	r2, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8005852:	6898      	ldr	r0, [r3, #8]
 8005854:	f000 0003 	and.w	r0, r0, #3
 8005858:	2801      	cmp	r0, #1
 800585a:	d102      	bne.n	8005862 <HAL_ADC_ConfigChannel+0x1fa>
 800585c:	6818      	ldr	r0, [r3, #0]
 800585e:	07c0      	lsls	r0, r0, #31
 8005860:	d470      	bmi.n	8005944 <HAL_ADC_ConfigChannel+0x2dc>
 8005862:	b13a      	cbz	r2, 8005874 <HAL_ADC_ConfigChannel+0x20c>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8005864:	6890      	ldr	r0, [r2, #8]
 8005866:	f000 0003 	and.w	r0, r0, #3
 800586a:	2801      	cmp	r0, #1
 800586c:	d102      	bne.n	8005874 <HAL_ADC_ConfigChannel+0x20c>
 800586e:	6812      	ldr	r2, [r2, #0]
 8005870:	07d2      	lsls	r2, r2, #31
 8005872:	d467      	bmi.n	8005944 <HAL_ADC_ConfigChannel+0x2dc>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8005874:	2c10      	cmp	r4, #16
 8005876:	d153      	bne.n	8005920 <HAL_ADC_ConfigChannel+0x2b8>
 8005878:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800587c:	f47f af7b 	bne.w	8005776 <HAL_ADC_ConfigChannel+0x10e>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8005880:	688b      	ldr	r3, [r1, #8]
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8005882:	4a38      	ldr	r2, [pc, #224]	@ (8005964 <HAL_ADC_ConfigChannel+0x2fc>)
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8005884:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005888:	608b      	str	r3, [r1, #8]
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800588a:	4b37      	ldr	r3, [pc, #220]	@ (8005968 <HAL_ADC_ConfigChannel+0x300>)
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	fbb3 f3f2 	udiv	r3, r3, r2
 8005892:	220a      	movs	r2, #10
 8005894:	4353      	muls	r3, r2
            wait_loop_index--;
 8005896:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 8005898:	9b01      	ldr	r3, [sp, #4]
 800589a:	2b00      	cmp	r3, #0
 800589c:	f43f af6b 	beq.w	8005776 <HAL_ADC_ConfigChannel+0x10e>
            wait_loop_index--;
 80058a0:	9b01      	ldr	r3, [sp, #4]
 80058a2:	3b01      	subs	r3, #1
 80058a4:	e7f7      	b.n	8005896 <HAL_ADC_ConfigChannel+0x22e>
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80058a6:	f8d3 00b0 	ldr.w	r0, [r3, #176]	@ 0xb0
      if (sConfig->Channel >= ADC_CHANNEL_10)
 80058aa:	2c09      	cmp	r4, #9
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80058ac:	ea42 0200 	orr.w	r2, r2, r0
 80058b0:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 80058b4:	6888      	ldr	r0, [r1, #8]
      if (sConfig->Channel >= ADC_CHANNEL_10)
 80058b6:	d90c      	bls.n	80058d2 <HAL_ADC_ConfigChannel+0x26a>
        MODIFY_REG(hadc->Instance->SMPR2,
 80058b8:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 80058bc:	6999      	ldr	r1, [r3, #24]
 80058be:	3a1b      	subs	r2, #27
 80058c0:	2607      	movs	r6, #7
 80058c2:	4096      	lsls	r6, r2
 80058c4:	ea21 0106 	bic.w	r1, r1, r6
 80058c8:	fa00 f202 	lsl.w	r2, r0, r2
 80058cc:	430a      	orrs	r2, r1
 80058ce:	619a      	str	r2, [r3, #24]
 80058d0:	e7a7      	b.n	8005822 <HAL_ADC_ConfigChannel+0x1ba>
        MODIFY_REG(hadc->Instance->SMPR1,
 80058d2:	1c61      	adds	r1, r4, #1
 80058d4:	695a      	ldr	r2, [r3, #20]
 80058d6:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80058da:	2607      	movs	r6, #7
 80058dc:	408e      	lsls	r6, r1
 80058de:	ea22 0206 	bic.w	r2, r2, r6
 80058e2:	fa00 f101 	lsl.w	r1, r0, r1
 80058e6:	430a      	orrs	r2, r1
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80058e8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
        MODIFY_REG(hadc->Instance->SMPR1,
 80058ec:	615a      	str	r2, [r3, #20]
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80058ee:	f43f af42 	beq.w	8005776 <HAL_ADC_ConfigChannel+0x10e>
 80058f2:	4a1a      	ldr	r2, [pc, #104]	@ (800595c <HAL_ADC_ConfigChannel+0x2f4>)
 80058f4:	4293      	cmp	r3, r2
 80058f6:	d097      	beq.n	8005828 <HAL_ADC_ConfigChannel+0x1c0>
 80058f8:	491c      	ldr	r1, [pc, #112]	@ (800596c <HAL_ADC_ConfigChannel+0x304>)
 80058fa:	e796      	b.n	800582a <HAL_ADC_ConfigChannel+0x1c2>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80058fc:	2c11      	cmp	r4, #17
 80058fe:	d103      	bne.n	8005908 <HAL_ADC_ConfigChannel+0x2a0>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8005900:	688a      	ldr	r2, [r1, #8]
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8005902:	f012 7f80 	tst.w	r2, #16777216	@ 0x1000000
 8005906:	e795      	b.n	8005834 <HAL_ADC_ConfigChannel+0x1cc>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8005908:	2c12      	cmp	r4, #18
 800590a:	f47f af34 	bne.w	8005776 <HAL_ADC_ConfigChannel+0x10e>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 800590e:	688a      	ldr	r2, [r1, #8]
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8005910:	f412 0f80 	tst.w	r2, #4194304	@ 0x400000
 8005914:	e78e      	b.n	8005834 <HAL_ADC_ConfigChannel+0x1cc>
 8005916:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800591a:	e79a      	b.n	8005852 <HAL_ADC_ConfigChannel+0x1ea>
 800591c:	4602      	mov	r2, r0
 800591e:	e798      	b.n	8005852 <HAL_ADC_ConfigChannel+0x1ea>
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8005920:	2c11      	cmp	r4, #17
 8005922:	d108      	bne.n	8005936 <HAL_ADC_ConfigChannel+0x2ce>
 8005924:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005928:	f47f af25 	bne.w	8005776 <HAL_ADC_ConfigChannel+0x10e>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 800592c:	688b      	ldr	r3, [r1, #8]
 800592e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8005932:	608b      	str	r3, [r1, #8]
 8005934:	e71f      	b.n	8005776 <HAL_ADC_ConfigChannel+0x10e>
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8005936:	2c12      	cmp	r4, #18
 8005938:	f47f af1d 	bne.w	8005776 <HAL_ADC_ConfigChannel+0x10e>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 800593c:	688b      	ldr	r3, [r1, #8]
 800593e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8005942:	e7f6      	b.n	8005932 <HAL_ADC_ConfigChannel+0x2ca>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005944:	6c2b      	ldr	r3, [r5, #64]	@ 0x40
 8005946:	f043 0320 	orr.w	r3, r3, #32
 800594a:	642b      	str	r3, [r5, #64]	@ 0x40
    tmp_hal_status = HAL_ERROR;
 800594c:	2001      	movs	r0, #1
 800594e:	e713      	b.n	8005778 <HAL_ADC_ConfigChannel+0x110>
  __HAL_LOCK(hadc);
 8005950:	2002      	movs	r0, #2
 8005952:	e714      	b.n	800577e <HAL_ADC_ConfigChannel+0x116>
 8005954:	83fff000 	.word	0x83fff000
 8005958:	50000300 	.word	0x50000300
 800595c:	50000100 	.word	0x50000100
 8005960:	50000500 	.word	0x50000500
 8005964:	000f4240 	.word	0x000f4240
 8005968:	20000014 	.word	0x20000014
 800596c:	50000700 	.word	0x50000700

08005970 <HAL_ADCEx_MultiModeConfigChannel>:
{
 8005970:	b5f0      	push	{r4, r5, r6, r7, lr}
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8005972:	6804      	ldr	r4, [r0, #0]
 8005974:	4b3c      	ldr	r3, [pc, #240]	@ (8005a68 <HAL_ADCEx_MultiModeConfigChannel+0xf8>)
 8005976:	f1b4 4fa0 	cmp.w	r4, #1342177280	@ 0x50000000
{
 800597a:	4605      	mov	r5, r0
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800597c:	d009      	beq.n	8005992 <HAL_ADCEx_MultiModeConfigChannel+0x22>
 800597e:	429c      	cmp	r4, r3
 8005980:	d047      	beq.n	8005a12 <HAL_ADCEx_MultiModeConfigChannel+0xa2>
 8005982:	4a3a      	ldr	r2, [pc, #232]	@ (8005a6c <HAL_ADCEx_MultiModeConfigChannel+0xfc>)
 8005984:	4294      	cmp	r4, r2
 8005986:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800598a:	d002      	beq.n	8005992 <HAL_ADCEx_MultiModeConfigChannel+0x22>
 800598c:	429c      	cmp	r4, r3
 800598e:	d166      	bne.n	8005a5e <HAL_ADCEx_MultiModeConfigChannel+0xee>
 8005990:	4613      	mov	r3, r2
  __HAL_LOCK(hadc);
 8005992:	f895 203c 	ldrb.w	r2, [r5, #60]	@ 0x3c
 8005996:	2a01      	cmp	r2, #1
 8005998:	d063      	beq.n	8005a62 <HAL_ADCEx_MultiModeConfigChannel+0xf2>
 800599a:	2201      	movs	r2, #1
  if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800599c:	6808      	ldr	r0, [r1, #0]
  __HAL_LOCK(hadc);
 800599e:	f885 203c 	strb.w	r2, [r5, #60]	@ 0x3c
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 80059a2:	68a2      	ldr	r2, [r4, #8]
 80059a4:	0752      	lsls	r2, r2, #29
 80059a6:	d454      	bmi.n	8005a52 <HAL_ADCEx_MultiModeConfigChannel+0xe2>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 80059a8:	689a      	ldr	r2, [r3, #8]
 80059aa:	0757      	lsls	r7, r2, #29
 80059ac:	d451      	bmi.n	8005a52 <HAL_ADCEx_MultiModeConfigChannel+0xe2>
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80059ae:	f1b4 4fa0 	cmp.w	r4, #1342177280	@ 0x50000000
 80059b2:	d031      	beq.n	8005a18 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80059b4:	4f2c      	ldr	r7, [pc, #176]	@ (8005a68 <HAL_ADCEx_MultiModeConfigChannel+0xf8>)
 80059b6:	4a2e      	ldr	r2, [pc, #184]	@ (8005a70 <HAL_ADCEx_MultiModeConfigChannel+0x100>)
 80059b8:	4e2e      	ldr	r6, [pc, #184]	@ (8005a74 <HAL_ADCEx_MultiModeConfigChannel+0x104>)
 80059ba:	42bc      	cmp	r4, r7
 80059bc:	bf08      	it	eq
 80059be:	4632      	moveq	r2, r6
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80059c0:	b360      	cbz	r0, 8005a1c <HAL_ADCEx_MultiModeConfigChannel+0xac>
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 80059c2:	6897      	ldr	r7, [r2, #8]
 80059c4:	f895 c030 	ldrb.w	ip, [r5, #48]	@ 0x30
 80059c8:	684e      	ldr	r6, [r1, #4]
 80059ca:	f427 4760 	bic.w	r7, r7, #57344	@ 0xe000
 80059ce:	ea46 364c 	orr.w	r6, r6, ip, lsl #13
 80059d2:	433e      	orrs	r6, r7
 80059d4:	6096      	str	r6, [r2, #8]
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80059d6:	68a6      	ldr	r6, [r4, #8]
 80059d8:	f006 0603 	and.w	r6, r6, #3
 80059dc:	2e01      	cmp	r6, #1
 80059de:	d102      	bne.n	80059e6 <HAL_ADCEx_MultiModeConfigChannel+0x76>
 80059e0:	6824      	ldr	r4, [r4, #0]
 80059e2:	07e6      	lsls	r6, r4, #31
 80059e4:	d410      	bmi.n	8005a08 <HAL_ADCEx_MultiModeConfigChannel+0x98>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80059e6:	689c      	ldr	r4, [r3, #8]
 80059e8:	f004 0403 	and.w	r4, r4, #3
 80059ec:	2c01      	cmp	r4, #1
 80059ee:	d102      	bne.n	80059f6 <HAL_ADCEx_MultiModeConfigChannel+0x86>
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	07dc      	lsls	r4, r3, #31
 80059f4:	d408      	bmi.n	8005a08 <HAL_ADCEx_MultiModeConfigChannel+0x98>
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 80059f6:	6893      	ldr	r3, [r2, #8]
 80059f8:	6889      	ldr	r1, [r1, #8]
 80059fa:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80059fe:	4308      	orrs	r0, r1
 8005a00:	f023 030f 	bic.w	r3, r3, #15
 8005a04:	4318      	orrs	r0, r3
 8005a06:	6090      	str	r0, [r2, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005a08:	2000      	movs	r0, #0
  __HAL_UNLOCK(hadc);
 8005a0a:	2300      	movs	r3, #0
 8005a0c:	f885 303c 	strb.w	r3, [r5, #60]	@ 0x3c
} 
 8005a10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005a12:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8005a16:	e7bc      	b.n	8005992 <HAL_ADCEx_MultiModeConfigChannel+0x22>
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005a18:	4a16      	ldr	r2, [pc, #88]	@ (8005a74 <HAL_ADCEx_MultiModeConfigChannel+0x104>)
 8005a1a:	e7d1      	b.n	80059c0 <HAL_ADCEx_MultiModeConfigChannel+0x50>
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8005a1c:	6891      	ldr	r1, [r2, #8]
 8005a1e:	f421 4160 	bic.w	r1, r1, #57344	@ 0xe000
 8005a22:	6091      	str	r1, [r2, #8]
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8005a24:	68a1      	ldr	r1, [r4, #8]
 8005a26:	f001 0103 	and.w	r1, r1, #3
 8005a2a:	2901      	cmp	r1, #1
 8005a2c:	d102      	bne.n	8005a34 <HAL_ADCEx_MultiModeConfigChannel+0xc4>
 8005a2e:	6821      	ldr	r1, [r4, #0]
 8005a30:	07c9      	lsls	r1, r1, #31
 8005a32:	d4e9      	bmi.n	8005a08 <HAL_ADCEx_MultiModeConfigChannel+0x98>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8005a34:	6899      	ldr	r1, [r3, #8]
 8005a36:	f001 0103 	and.w	r1, r1, #3
 8005a3a:	2901      	cmp	r1, #1
 8005a3c:	d102      	bne.n	8005a44 <HAL_ADCEx_MultiModeConfigChannel+0xd4>
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	07db      	lsls	r3, r3, #31
 8005a42:	d4e1      	bmi.n	8005a08 <HAL_ADCEx_MultiModeConfigChannel+0x98>
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8005a44:	6893      	ldr	r3, [r2, #8]
 8005a46:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8005a4a:	f023 030f 	bic.w	r3, r3, #15
 8005a4e:	6093      	str	r3, [r2, #8]
 8005a50:	e7da      	b.n	8005a08 <HAL_ADCEx_MultiModeConfigChannel+0x98>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005a52:	6c2b      	ldr	r3, [r5, #64]	@ 0x40
 8005a54:	f043 0320 	orr.w	r3, r3, #32
 8005a58:	642b      	str	r3, [r5, #64]	@ 0x40
    tmp_hal_status = HAL_ERROR;
 8005a5a:	2001      	movs	r0, #1
 8005a5c:	e7d5      	b.n	8005a0a <HAL_ADCEx_MultiModeConfigChannel+0x9a>
    return HAL_ERROR;
 8005a5e:	2001      	movs	r0, #1
 8005a60:	e7d6      	b.n	8005a10 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
  __HAL_LOCK(hadc);
 8005a62:	2002      	movs	r0, #2
 8005a64:	e7d4      	b.n	8005a10 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 8005a66:	bf00      	nop
 8005a68:	50000100 	.word	0x50000100
 8005a6c:	50000400 	.word	0x50000400
 8005a70:	50000700 	.word	0x50000700
 8005a74:	50000300 	.word	0x50000300

08005a78 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005a78:	4907      	ldr	r1, [pc, #28]	@ (8005a98 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8005a7a:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005a7c:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005a80:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005a82:	0412      	lsls	r2, r2, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005a84:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005a88:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005a8a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005a8c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8005a90:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8005a94:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8005a96:	4770      	bx	lr
 8005a98:	e000ed00 	.word	0xe000ed00

08005a9c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005a9c:	4b16      	ldr	r3, [pc, #88]	@ (8005af8 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005a9e:	b530      	push	{r4, r5, lr}
 8005aa0:	68dc      	ldr	r4, [r3, #12]
 8005aa2:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005aa6:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005aaa:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005aac:	2b04      	cmp	r3, #4
 8005aae:	bf28      	it	cs
 8005ab0:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005ab2:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005ab4:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005ab8:	bf8c      	ite	hi
 8005aba:	3c03      	subhi	r4, #3
 8005abc:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005abe:	fa05 f303 	lsl.w	r3, r5, r3
 8005ac2:	ea21 0303 	bic.w	r3, r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005ac6:	40a5      	lsls	r5, r4
 8005ac8:	ea22 0205 	bic.w	r2, r2, r5
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005acc:	40a3      	lsls	r3, r4
  if ((int32_t)(IRQn) >= 0)
 8005ace:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005ad0:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005ad4:	bfac      	ite	ge
 8005ad6:	f100 4060 	addge.w	r0, r0, #3758096384	@ 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005ada:	4a08      	ldrlt	r2, [pc, #32]	@ (8005afc <HAL_NVIC_SetPriority+0x60>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005adc:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005ae0:	bfb8      	it	lt
 8005ae2:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005ae6:	b2db      	uxtb	r3, r3
 8005ae8:	bfaa      	itet	ge
 8005aea:	f500 4061 	addge.w	r0, r0, #57600	@ 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005aee:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005af0:	f880 3300 	strbge.w	r3, [r0, #768]	@ 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8005af4:	bd30      	pop	{r4, r5, pc}
 8005af6:	bf00      	nop
 8005af8:	e000ed00 	.word	0xe000ed00
 8005afc:	e000ed14 	.word	0xe000ed14

08005b00 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8005b00:	2800      	cmp	r0, #0
 8005b02:	db07      	blt.n	8005b14 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005b04:	0941      	lsrs	r1, r0, #5
 8005b06:	4a04      	ldr	r2, [pc, #16]	@ (8005b18 <HAL_NVIC_EnableIRQ+0x18>)
 8005b08:	f000 001f 	and.w	r0, r0, #31
 8005b0c:	2301      	movs	r3, #1
 8005b0e:	4083      	lsls	r3, r0
 8005b10:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8005b14:	4770      	bx	lr
 8005b16:	bf00      	nop
 8005b18:	e000e100 	.word	0xe000e100

08005b1c <DMA_CalcBaseAndBitshift>:
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8005b1c:	6802      	ldr	r2, [r0, #0]
 8005b1e:	4b0a      	ldr	r3, [pc, #40]	@ (8005b48 <DMA_CalcBaseAndBitshift+0x2c>)
 8005b20:	429a      	cmp	r2, r3
 8005b22:	f04f 0114 	mov.w	r1, #20
 8005b26:	d808      	bhi.n	8005b3a <DMA_CalcBaseAndBitshift+0x1e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8005b28:	4b08      	ldr	r3, [pc, #32]	@ (8005b4c <DMA_CalcBaseAndBitshift+0x30>)
 8005b2a:	4413      	add	r3, r2
 8005b2c:	4a08      	ldr	r2, [pc, #32]	@ (8005b50 <DMA_CalcBaseAndBitshift+0x34>)
 8005b2e:	fbb3 f3f1 	udiv	r3, r3, r1
 8005b32:	009b      	lsls	r3, r3, #2
    hdma->DmaBaseAddress = DMA1;
 8005b34:	e9c0 230f 	strd	r2, r3, [r0, #60]	@ 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 8005b38:	4770      	bx	lr
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8005b3a:	4b06      	ldr	r3, [pc, #24]	@ (8005b54 <DMA_CalcBaseAndBitshift+0x38>)
 8005b3c:	4413      	add	r3, r2
 8005b3e:	4a06      	ldr	r2, [pc, #24]	@ (8005b58 <DMA_CalcBaseAndBitshift+0x3c>)
 8005b40:	fbb3 f3f1 	udiv	r3, r3, r1
 8005b44:	009b      	lsls	r3, r3, #2
    hdma->DmaBaseAddress = DMA2;
 8005b46:	e7f5      	b.n	8005b34 <DMA_CalcBaseAndBitshift+0x18>
 8005b48:	40020407 	.word	0x40020407
 8005b4c:	bffdfff8 	.word	0xbffdfff8
 8005b50:	40020000 	.word	0x40020000
 8005b54:	bffdfbf8 	.word	0xbffdfbf8
 8005b58:	40020400 	.word	0x40020400

08005b5c <HAL_DMA_Init>:
{
 8005b5c:	b538      	push	{r3, r4, r5, lr}
  if(NULL == hdma)
 8005b5e:	4604      	mov	r4, r0
 8005b60:	b1e0      	cbz	r0, 8005b9c <HAL_DMA_Init+0x40>
  tmp |=  hdma->Init.Direction        |
 8005b62:	e9d0 3501 	ldrd	r3, r5, [r0, #4]
 8005b66:	432b      	orrs	r3, r5
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005b68:	68c5      	ldr	r5, [r0, #12]
  tmp = hdma->Instance->CCR;
 8005b6a:	6801      	ldr	r1, [r0, #0]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005b6c:	432b      	orrs	r3, r5
 8005b6e:	6905      	ldr	r5, [r0, #16]
  tmp = hdma->Instance->CCR;
 8005b70:	680a      	ldr	r2, [r1, #0]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005b72:	432b      	orrs	r3, r5
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005b74:	6945      	ldr	r5, [r0, #20]
 8005b76:	432b      	orrs	r3, r5
 8005b78:	6985      	ldr	r5, [r0, #24]
 8005b7a:	432b      	orrs	r3, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 8005b7c:	69c5      	ldr	r5, [r0, #28]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8005b7e:	f422 527f 	bic.w	r2, r2, #16320	@ 0x3fc0
 8005b82:	f022 0230 	bic.w	r2, r2, #48	@ 0x30
          hdma->Init.Mode                | hdma->Init.Priority;
 8005b86:	432b      	orrs	r3, r5
  tmp |=  hdma->Init.Direction        |
 8005b88:	4313      	orrs	r3, r2
  hdma->Instance->CCR = tmp;
 8005b8a:	600b      	str	r3, [r1, #0]
  DMA_CalcBaseAndBitshift(hdma);
 8005b8c:	f7ff ffc6 	bl	8005b1c <DMA_CalcBaseAndBitshift>
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005b90:	2000      	movs	r0, #0
  hdma->Lock = HAL_UNLOCKED;
 8005b92:	f44f 7380 	mov.w	r3, #256	@ 0x100
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005b96:	63a0      	str	r0, [r4, #56]	@ 0x38
  hdma->Lock = HAL_UNLOCKED;
 8005b98:	8423      	strh	r3, [r4, #32]
}
 8005b9a:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8005b9c:	2001      	movs	r0, #1
 8005b9e:	e7fc      	b.n	8005b9a <HAL_DMA_Init+0x3e>

08005ba0 <HAL_DMA_Start_IT>:
{
 8005ba0:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hdma);
 8005ba2:	f890 4020 	ldrb.w	r4, [r0, #32]
 8005ba6:	2c01      	cmp	r4, #1
 8005ba8:	d033      	beq.n	8005c12 <HAL_DMA_Start_IT+0x72>
  if(HAL_DMA_STATE_READY == hdma->State)
 8005baa:	f890 5021 	ldrb.w	r5, [r0, #33]	@ 0x21
  __HAL_LOCK(hdma);
 8005bae:	2401      	movs	r4, #1
  if(HAL_DMA_STATE_READY == hdma->State)
 8005bb0:	42a5      	cmp	r5, r4
  __HAL_LOCK(hdma);
 8005bb2:	f880 4020 	strb.w	r4, [r0, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 8005bb6:	f04f 0400 	mov.w	r4, #0
 8005bba:	d128      	bne.n	8005c0e <HAL_DMA_Start_IT+0x6e>
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005bbc:	6384      	str	r4, [r0, #56]	@ 0x38
    hdma->State = HAL_DMA_STATE_BUSY;
 8005bbe:	2602      	movs	r6, #2
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8005bc0:	6804      	ldr	r4, [r0, #0]
    hdma->State = HAL_DMA_STATE_BUSY;
 8005bc2:	f880 6021 	strb.w	r6, [r0, #33]	@ 0x21
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8005bc6:	6826      	ldr	r6, [r4, #0]
 8005bc8:	f026 0601 	bic.w	r6, r6, #1
 8005bcc:	6026      	str	r6, [r4, #0]
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8005bce:	e9d0 670f 	ldrd	r6, r7, [r0, #60]	@ 0x3c
 8005bd2:	40bd      	lsls	r5, r7
 8005bd4:	6075      	str	r5, [r6, #4]
  hdma->Instance->CNDTR = DataLength;
 8005bd6:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005bd8:	6843      	ldr	r3, [r0, #4]
 8005bda:	2b10      	cmp	r3, #16
    if(NULL != hdma->XferHalfCpltCallback )
 8005bdc:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
    hdma->Instance->CPAR = DstAddress;
 8005bde:	bf0b      	itete	eq
 8005be0:	60a2      	streq	r2, [r4, #8]
    hdma->Instance->CPAR = SrcAddress;
 8005be2:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 8005be4:	60e1      	streq	r1, [r4, #12]
    hdma->Instance->CMAR = DstAddress;
 8005be6:	60e2      	strne	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback )
 8005be8:	b14b      	cbz	r3, 8005bfe <HAL_DMA_Start_IT+0x5e>
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8005bea:	6823      	ldr	r3, [r4, #0]
 8005bec:	f043 030e 	orr.w	r3, r3, #14
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8005bf0:	6023      	str	r3, [r4, #0]
    hdma->Instance->CCR |= DMA_CCR_EN;
 8005bf2:	6823      	ldr	r3, [r4, #0]
 8005bf4:	f043 0301 	orr.w	r3, r3, #1
 8005bf8:	6023      	str	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005bfa:	2000      	movs	r0, #0
}
 8005bfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8005bfe:	6823      	ldr	r3, [r4, #0]
 8005c00:	f043 030a 	orr.w	r3, r3, #10
 8005c04:	6023      	str	r3, [r4, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8005c06:	6823      	ldr	r3, [r4, #0]
 8005c08:	f023 0304 	bic.w	r3, r3, #4
 8005c0c:	e7f0      	b.n	8005bf0 <HAL_DMA_Start_IT+0x50>
    __HAL_UNLOCK(hdma);
 8005c0e:	f880 4020 	strb.w	r4, [r0, #32]
  __HAL_LOCK(hdma);
 8005c12:	2002      	movs	r0, #2
 8005c14:	e7f2      	b.n	8005bfc <HAL_DMA_Start_IT+0x5c>

08005c16 <HAL_DMA_Abort>:
  if(NULL == hdma)
 8005c16:	b140      	cbz	r0, 8005c2a <HAL_DMA_Abort+0x14>
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005c18:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 8005c1c:	2b02      	cmp	r3, #2
 8005c1e:	d006      	beq.n	8005c2e <HAL_DMA_Abort+0x18>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005c20:	2304      	movs	r3, #4
 8005c22:	6383      	str	r3, [r0, #56]	@ 0x38
    __HAL_UNLOCK(hdma);
 8005c24:	2300      	movs	r3, #0
 8005c26:	f880 3020 	strb.w	r3, [r0, #32]
    return HAL_ERROR;
 8005c2a:	2001      	movs	r0, #1
 8005c2c:	4770      	bx	lr
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8005c2e:	6803      	ldr	r3, [r0, #0]
 8005c30:	681a      	ldr	r2, [r3, #0]
 8005c32:	f022 020e 	bic.w	r2, r2, #14
 8005c36:	601a      	str	r2, [r3, #0]
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8005c38:	681a      	ldr	r2, [r3, #0]
 8005c3a:	f022 0201 	bic.w	r2, r2, #1
 8005c3e:	601a      	str	r2, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8005c40:	e9d0 210f 	ldrd	r2, r1, [r0, #60]	@ 0x3c
 8005c44:	2301      	movs	r3, #1
 8005c46:	408b      	lsls	r3, r1
 8005c48:	6053      	str	r3, [r2, #4]
  __HAL_UNLOCK(hdma);
 8005c4a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005c4e:	8403      	strh	r3, [r0, #32]
  return HAL_OK;
 8005c50:	2000      	movs	r0, #0
}
 8005c52:	4770      	bx	lr

08005c54 <HAL_DMA_IRQHandler>:
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005c54:	6bc1      	ldr	r1, [r0, #60]	@ 0x3c
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8005c56:	6c02      	ldr	r2, [r0, #64]	@ 0x40
  uint32_t source_it = hdma->Instance->CCR;
 8005c58:	6803      	ldr	r3, [r0, #0]
{
 8005c5a:	b470      	push	{r4, r5, r6}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005c5c:	680e      	ldr	r6, [r1, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8005c5e:	681d      	ldr	r5, [r3, #0]
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8005c60:	2404      	movs	r4, #4
 8005c62:	4094      	lsls	r4, r2
 8005c64:	4234      	tst	r4, r6
 8005c66:	d00e      	beq.n	8005c86 <HAL_DMA_IRQHandler+0x32>
 8005c68:	f015 0f04 	tst.w	r5, #4
 8005c6c:	d00b      	beq.n	8005c86 <HAL_DMA_IRQHandler+0x32>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005c6e:	681a      	ldr	r2, [r3, #0]
 8005c70:	0692      	lsls	r2, r2, #26
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8005c72:	bf5e      	ittt	pl
 8005c74:	681a      	ldrpl	r2, [r3, #0]
 8005c76:	f022 0204 	bicpl.w	r2, r2, #4
 8005c7a:	601a      	strpl	r2, [r3, #0]
    if(hdma->XferHalfCpltCallback != NULL)
 8005c7c:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8005c7e:	604c      	str	r4, [r1, #4]
    if(hdma->XferErrorCallback != NULL)
 8005c80:	b363      	cbz	r3, 8005cdc <HAL_DMA_IRQHandler+0x88>
}
 8005c82:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 8005c84:	4718      	bx	r3
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8005c86:	2402      	movs	r4, #2
 8005c88:	4094      	lsls	r4, r2
 8005c8a:	4234      	tst	r4, r6
 8005c8c:	d012      	beq.n	8005cb4 <HAL_DMA_IRQHandler+0x60>
 8005c8e:	f015 0f02 	tst.w	r5, #2
 8005c92:	d00f      	beq.n	8005cb4 <HAL_DMA_IRQHandler+0x60>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005c94:	681a      	ldr	r2, [r3, #0]
 8005c96:	0695      	lsls	r5, r2, #26
 8005c98:	d406      	bmi.n	8005ca8 <HAL_DMA_IRQHandler+0x54>
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8005c9a:	681a      	ldr	r2, [r3, #0]
 8005c9c:	f022 020a 	bic.w	r2, r2, #10
 8005ca0:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8005ca2:	2301      	movs	r3, #1
 8005ca4:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
    __HAL_UNLOCK(hdma);
 8005ca8:	2300      	movs	r3, #0
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8005caa:	604c      	str	r4, [r1, #4]
    __HAL_UNLOCK(hdma);
 8005cac:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 8005cb0:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8005cb2:	e7e5      	b.n	8005c80 <HAL_DMA_IRQHandler+0x2c>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8005cb4:	2408      	movs	r4, #8
 8005cb6:	4094      	lsls	r4, r2
 8005cb8:	4234      	tst	r4, r6
 8005cba:	d00f      	beq.n	8005cdc <HAL_DMA_IRQHandler+0x88>
 8005cbc:	072c      	lsls	r4, r5, #28
 8005cbe:	d50d      	bpl.n	8005cdc <HAL_DMA_IRQHandler+0x88>
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8005cc0:	681c      	ldr	r4, [r3, #0]
 8005cc2:	f024 040e 	bic.w	r4, r4, #14
 8005cc6:	601c      	str	r4, [r3, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8005cc8:	2301      	movs	r3, #1
 8005cca:	fa03 f202 	lsl.w	r2, r3, r2
 8005cce:	604a      	str	r2, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005cd0:	6383      	str	r3, [r0, #56]	@ 0x38
    __HAL_UNLOCK(hdma);
 8005cd2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005cd6:	8403      	strh	r3, [r0, #32]
    if(hdma->XferErrorCallback != NULL)
 8005cd8:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8005cda:	e7d1      	b.n	8005c80 <HAL_DMA_IRQHandler+0x2c>
}
 8005cdc:	bc70      	pop	{r4, r5, r6}
 8005cde:	4770      	bx	lr

08005ce0 <HAL_DMA_GetError>:
  return hdma->ErrorCode;
 8005ce0:	6b80      	ldr	r0, [r0, #56]	@ 0x38
}
 8005ce2:	4770      	bx	lr

08005ce4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005ce4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005ce8:	f8df 917c 	ldr.w	r9, [pc, #380]	@ 8005e68 <HAL_GPIO_Init+0x184>
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005cec:	4c5c      	ldr	r4, [pc, #368]	@ (8005e60 <HAL_GPIO_Init+0x17c>)
  uint32_t position = 0x00u;
 8005cee:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005cf0:	680a      	ldr	r2, [r1, #0]
 8005cf2:	fa32 f503 	lsrs.w	r5, r2, r3
 8005cf6:	d102      	bne.n	8005cfe <HAL_GPIO_Init+0x1a>
      }
    }

    position++;
  }
}
 8005cf8:	b003      	add	sp, #12
 8005cfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005cfe:	2501      	movs	r5, #1
 8005d00:	fa05 f803 	lsl.w	r8, r5, r3
    if (iocurrent != 0x00u)
 8005d04:	ea18 0202 	ands.w	r2, r8, r2
 8005d08:	f000 80a0 	beq.w	8005e4c <HAL_GPIO_Init+0x168>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005d0c:	684e      	ldr	r6, [r1, #4]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8005d0e:	2703      	movs	r7, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005d10:	f006 0503 	and.w	r5, r6, #3
 8005d14:	ea4f 0e43 	mov.w	lr, r3, lsl #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8005d18:	fa07 fc0e 	lsl.w	ip, r7, lr
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005d1c:	1e6f      	subs	r7, r5, #1
 8005d1e:	2f01      	cmp	r7, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8005d20:	ea6f 0c0c 	mvn.w	ip, ip
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005d24:	d834      	bhi.n	8005d90 <HAL_GPIO_Init+0xac>
        temp = GPIOx->OSPEEDR;
 8005d26:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8005d28:	ea07 0a0c 	and.w	sl, r7, ip
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005d2c:	68cf      	ldr	r7, [r1, #12]
 8005d2e:	fa07 f70e 	lsl.w	r7, r7, lr
 8005d32:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
 8005d36:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8005d38:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005d3a:	ea27 0808 	bic.w	r8, r7, r8
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005d3e:	f3c6 1700 	ubfx	r7, r6, #4, #1
 8005d42:	409f      	lsls	r7, r3
 8005d44:	ea47 0708 	orr.w	r7, r7, r8
        GPIOx->OTYPER = temp;
 8005d48:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 8005d4a:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8005d4c:	ea07 080c 	and.w	r8, r7, ip
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8005d50:	688f      	ldr	r7, [r1, #8]
 8005d52:	fa07 f70e 	lsl.w	r7, r7, lr
 8005d56:	ea47 0708 	orr.w	r7, r7, r8
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005d5a:	2d02      	cmp	r5, #2
        GPIOx->PUPDR = temp;
 8005d5c:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005d5e:	d119      	bne.n	8005d94 <HAL_GPIO_Init+0xb0>
        temp = GPIOx->AFR[position >> 3u];
 8005d60:	ea4f 08d3 	mov.w	r8, r3, lsr #3
 8005d64:	eb00 0888 	add.w	r8, r0, r8, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8005d68:	f003 0a07 	and.w	sl, r3, #7
        temp = GPIOx->AFR[position >> 3u];
 8005d6c:	f8d8 7020 	ldr.w	r7, [r8, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8005d70:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 8005d74:	f04f 0b0f 	mov.w	fp, #15
 8005d78:	fa0b fb0a 	lsl.w	fp, fp, sl
 8005d7c:	ea27 0b0b 	bic.w	fp, r7, fp
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8005d80:	690f      	ldr	r7, [r1, #16]
 8005d82:	fa07 f70a 	lsl.w	r7, r7, sl
 8005d86:	ea47 070b 	orr.w	r7, r7, fp
        GPIOx->AFR[position >> 3u] = temp;
 8005d8a:	f8c8 7020 	str.w	r7, [r8, #32]
 8005d8e:	e001      	b.n	8005d94 <HAL_GPIO_Init+0xb0>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005d90:	2d03      	cmp	r5, #3
 8005d92:	d1da      	bne.n	8005d4a <HAL_GPIO_Init+0x66>
      temp = GPIOx->MODER;
 8005d94:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8005d96:	fa05 f50e 	lsl.w	r5, r5, lr
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8005d9a:	ea07 070c 	and.w	r7, r7, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8005d9e:	433d      	orrs	r5, r7
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005da0:	f416 3f40 	tst.w	r6, #196608	@ 0x30000
      GPIOx->MODER = temp;
 8005da4:	6005      	str	r5, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005da6:	d051      	beq.n	8005e4c <HAL_GPIO_Init+0x168>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005da8:	f8d9 5018 	ldr.w	r5, [r9, #24]
 8005dac:	f045 0501 	orr.w	r5, r5, #1
 8005db0:	f8c9 5018 	str.w	r5, [r9, #24]
 8005db4:	f8d9 5018 	ldr.w	r5, [r9, #24]
 8005db8:	f023 0703 	bic.w	r7, r3, #3
 8005dbc:	f107 4780 	add.w	r7, r7, #1073741824	@ 0x40000000
 8005dc0:	f005 0501 	and.w	r5, r5, #1
 8005dc4:	f507 3780 	add.w	r7, r7, #65536	@ 0x10000
 8005dc8:	9501      	str	r5, [sp, #4]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8005dca:	f003 0c03 	and.w	ip, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005dce:	9d01      	ldr	r5, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2u];
 8005dd0:	68bd      	ldr	r5, [r7, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8005dd2:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8005dd6:	f04f 0e0f 	mov.w	lr, #15
 8005dda:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8005dde:	f1b0 4f90 	cmp.w	r0, #1207959552	@ 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8005de2:	ea25 0e0e 	bic.w	lr, r5, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8005de6:	d033      	beq.n	8005e50 <HAL_GPIO_Init+0x16c>
 8005de8:	4d1e      	ldr	r5, [pc, #120]	@ (8005e64 <HAL_GPIO_Init+0x180>)
 8005dea:	42a8      	cmp	r0, r5
 8005dec:	d032      	beq.n	8005e54 <HAL_GPIO_Init+0x170>
 8005dee:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8005df2:	42a8      	cmp	r0, r5
 8005df4:	d030      	beq.n	8005e58 <HAL_GPIO_Init+0x174>
 8005df6:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8005dfa:	42a8      	cmp	r0, r5
 8005dfc:	d02e      	beq.n	8005e5c <HAL_GPIO_Init+0x178>
 8005dfe:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8005e02:	42a8      	cmp	r0, r5
 8005e04:	bf14      	ite	ne
 8005e06:	2505      	movne	r5, #5
 8005e08:	2504      	moveq	r5, #4
 8005e0a:	fa05 f50c 	lsl.w	r5, r5, ip
 8005e0e:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2u] = temp;
 8005e12:	60bd      	str	r5, [r7, #8]
        temp = EXTI->RTSR;
 8005e14:	68a5      	ldr	r5, [r4, #8]
        temp &= ~(iocurrent);
 8005e16:	43d7      	mvns	r7, r2
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005e18:	f416 1f80 	tst.w	r6, #1048576	@ 0x100000
        temp &= ~(iocurrent);
 8005e1c:	bf0c      	ite	eq
 8005e1e:	403d      	andeq	r5, r7
          temp |= iocurrent;
 8005e20:	4315      	orrne	r5, r2
        EXTI->RTSR = temp;
 8005e22:	60a5      	str	r5, [r4, #8]
        temp = EXTI->FTSR;
 8005e24:	68e5      	ldr	r5, [r4, #12]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005e26:	f416 1f00 	tst.w	r6, #2097152	@ 0x200000
        temp &= ~(iocurrent);
 8005e2a:	bf0c      	ite	eq
 8005e2c:	403d      	andeq	r5, r7
          temp |= iocurrent;
 8005e2e:	4315      	orrne	r5, r2
        EXTI->FTSR = temp;
 8005e30:	60e5      	str	r5, [r4, #12]
        temp = EXTI->EMR;
 8005e32:	6865      	ldr	r5, [r4, #4]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005e34:	f416 3f00 	tst.w	r6, #131072	@ 0x20000
        temp &= ~(iocurrent);
 8005e38:	bf0c      	ite	eq
 8005e3a:	403d      	andeq	r5, r7
          temp |= iocurrent;
 8005e3c:	4315      	orrne	r5, r2
        EXTI->EMR = temp;
 8005e3e:	6065      	str	r5, [r4, #4]
        temp = EXTI->IMR;
 8005e40:	6825      	ldr	r5, [r4, #0]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005e42:	03f6      	lsls	r6, r6, #15
        temp &= ~(iocurrent);
 8005e44:	bf54      	ite	pl
 8005e46:	403d      	andpl	r5, r7
          temp |= iocurrent;
 8005e48:	4315      	orrmi	r5, r2
        EXTI->IMR = temp;
 8005e4a:	6025      	str	r5, [r4, #0]
    position++;
 8005e4c:	3301      	adds	r3, #1
 8005e4e:	e74f      	b.n	8005cf0 <HAL_GPIO_Init+0xc>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8005e50:	2500      	movs	r5, #0
 8005e52:	e7da      	b.n	8005e0a <HAL_GPIO_Init+0x126>
 8005e54:	2501      	movs	r5, #1
 8005e56:	e7d8      	b.n	8005e0a <HAL_GPIO_Init+0x126>
 8005e58:	2502      	movs	r5, #2
 8005e5a:	e7d6      	b.n	8005e0a <HAL_GPIO_Init+0x126>
 8005e5c:	2503      	movs	r5, #3
 8005e5e:	e7d4      	b.n	8005e0a <HAL_GPIO_Init+0x126>
 8005e60:	40010400 	.word	0x40010400
 8005e64:	48000400 	.word	0x48000400
 8005e68:	40021000 	.word	0x40021000

08005e6c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005e6c:	b10a      	cbz	r2, 8005e72 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005e6e:	6181      	str	r1, [r0, #24]
 8005e70:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005e72:	6281      	str	r1, [r0, #40]	@ 0x28
  }
}
 8005e74:	4770      	bx	lr
	...

08005e78 <HAL_PWR_EnableBkUpAccess>:
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  SET_BIT(PWR->CR, PWR_CR_DBP);  
 8005e78:	4a02      	ldr	r2, [pc, #8]	@ (8005e84 <HAL_PWR_EnableBkUpAccess+0xc>)
 8005e7a:	6813      	ldr	r3, [r2, #0]
 8005e7c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005e80:	6013      	str	r3, [r2, #0]
}
 8005e82:	4770      	bx	lr
 8005e84:	40007000 	.word	0x40007000

08005e88 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005e88:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005e8c:	4605      	mov	r5, r0
 8005e8e:	2800      	cmp	r0, #0
 8005e90:	d033      	beq.n	8005efa <HAL_RCC_OscConfig+0x72>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005e92:	6803      	ldr	r3, [r0, #0]
 8005e94:	07da      	lsls	r2, r3, #31
 8005e96:	d411      	bmi.n	8005ebc <HAL_RCC_OscConfig+0x34>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005e98:	682b      	ldr	r3, [r5, #0]
 8005e9a:	079b      	lsls	r3, r3, #30
 8005e9c:	f100 8081 	bmi.w	8005fa2 <HAL_RCC_OscConfig+0x11a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005ea0:	682b      	ldr	r3, [r5, #0]
 8005ea2:	071c      	lsls	r4, r3, #28
 8005ea4:	f100 80eb 	bmi.w	800607e <HAL_RCC_OscConfig+0x1f6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005ea8:	682b      	ldr	r3, [r5, #0]
 8005eaa:	0758      	lsls	r0, r3, #29
 8005eac:	f100 8130 	bmi.w	8006110 <HAL_RCC_OscConfig+0x288>
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005eb0:	69eb      	ldr	r3, [r5, #28]
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	f040 81b5 	bne.w	8006222 <HAL_RCC_OscConfig+0x39a>
        }
      }
    }
  }

  return HAL_OK;
 8005eb8:	2000      	movs	r0, #0
 8005eba:	e047      	b.n	8005f4c <HAL_RCC_OscConfig+0xc4>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8005ebc:	4cb0      	ldr	r4, [pc, #704]	@ (8006180 <HAL_RCC_OscConfig+0x2f8>)
 8005ebe:	6863      	ldr	r3, [r4, #4]
 8005ec0:	f003 030c 	and.w	r3, r3, #12
 8005ec4:	2b04      	cmp	r3, #4
 8005ec6:	d007      	beq.n	8005ed8 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005ec8:	6863      	ldr	r3, [r4, #4]
 8005eca:	f003 030c 	and.w	r3, r3, #12
 8005ece:	2b08      	cmp	r3, #8
 8005ed0:	d115      	bne.n	8005efe <HAL_RCC_OscConfig+0x76>
 8005ed2:	6863      	ldr	r3, [r4, #4]
 8005ed4:	03df      	lsls	r7, r3, #15
 8005ed6:	d512      	bpl.n	8005efe <HAL_RCC_OscConfig+0x76>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ed8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005edc:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005ee0:	6821      	ldr	r1, [r4, #0]
 8005ee2:	fa93 f3a3 	rbit	r3, r3
 8005ee6:	2201      	movs	r2, #1
 8005ee8:	fab3 f383 	clz	r3, r3
 8005eec:	fa02 f303 	lsl.w	r3, r2, r3
 8005ef0:	420b      	tst	r3, r1
 8005ef2:	d0d1      	beq.n	8005e98 <HAL_RCC_OscConfig+0x10>
 8005ef4:	686b      	ldr	r3, [r5, #4]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d1ce      	bne.n	8005e98 <HAL_RCC_OscConfig+0x10>
    return HAL_ERROR;
 8005efa:	2001      	movs	r0, #1
 8005efc:	e026      	b.n	8005f4c <HAL_RCC_OscConfig+0xc4>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005efe:	686a      	ldr	r2, [r5, #4]
 8005f00:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 8005f04:	d125      	bne.n	8005f52 <HAL_RCC_OscConfig+0xca>
 8005f06:	6823      	ldr	r3, [r4, #0]
 8005f08:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005f0c:	6023      	str	r3, [r4, #0]
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005f0e:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8005f10:	68a9      	ldr	r1, [r5, #8]
 8005f12:	f023 030f 	bic.w	r3, r3, #15
 8005f16:	430b      	orrs	r3, r1
 8005f18:	62e3      	str	r3, [r4, #44]	@ 0x2c
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005f1a:	b352      	cbz	r2, 8005f72 <HAL_RCC_OscConfig+0xea>
        tickstart = HAL_GetTick();
 8005f1c:	f7ff f866 	bl	8004fec <HAL_GetTick>
 8005f20:	f44f 3700 	mov.w	r7, #131072	@ 0x20000
 8005f24:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005f26:	f04f 0801 	mov.w	r8, #1
 8005f2a:	fa97 f3a7 	rbit	r3, r7
 8005f2e:	6822      	ldr	r2, [r4, #0]
 8005f30:	fa97 f3a7 	rbit	r3, r7
 8005f34:	fab3 f383 	clz	r3, r3
 8005f38:	fa08 f303 	lsl.w	r3, r8, r3
 8005f3c:	4213      	tst	r3, r2
 8005f3e:	d1ab      	bne.n	8005e98 <HAL_RCC_OscConfig+0x10>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005f40:	f7ff f854 	bl	8004fec <HAL_GetTick>
 8005f44:	1b80      	subs	r0, r0, r6
 8005f46:	2864      	cmp	r0, #100	@ 0x64
 8005f48:	d9ef      	bls.n	8005f2a <HAL_RCC_OscConfig+0xa2>
            return HAL_TIMEOUT;
 8005f4a:	2003      	movs	r0, #3
}
 8005f4c:	b002      	add	sp, #8
 8005f4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005f52:	6823      	ldr	r3, [r4, #0]
 8005f54:	b932      	cbnz	r2, 8005f64 <HAL_RCC_OscConfig+0xdc>
 8005f56:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005f5a:	6023      	str	r3, [r4, #0]
 8005f5c:	6823      	ldr	r3, [r4, #0]
 8005f5e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005f62:	e7d3      	b.n	8005f0c <HAL_RCC_OscConfig+0x84>
 8005f64:	f5b2 2fa0 	cmp.w	r2, #327680	@ 0x50000
 8005f68:	d1f5      	bne.n	8005f56 <HAL_RCC_OscConfig+0xce>
 8005f6a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005f6e:	6023      	str	r3, [r4, #0]
 8005f70:	e7c9      	b.n	8005f06 <HAL_RCC_OscConfig+0x7e>
        tickstart = HAL_GetTick();
 8005f72:	f7ff f83b 	bl	8004fec <HAL_GetTick>
 8005f76:	f44f 3700 	mov.w	r7, #131072	@ 0x20000
 8005f7a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005f7c:	f04f 0801 	mov.w	r8, #1
 8005f80:	fa97 f3a7 	rbit	r3, r7
 8005f84:	6822      	ldr	r2, [r4, #0]
 8005f86:	fa97 f3a7 	rbit	r3, r7
 8005f8a:	fab3 f383 	clz	r3, r3
 8005f8e:	fa08 f303 	lsl.w	r3, r8, r3
 8005f92:	4213      	tst	r3, r2
 8005f94:	d080      	beq.n	8005e98 <HAL_RCC_OscConfig+0x10>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005f96:	f7ff f829 	bl	8004fec <HAL_GetTick>
 8005f9a:	1b80      	subs	r0, r0, r6
 8005f9c:	2864      	cmp	r0, #100	@ 0x64
 8005f9e:	d9ef      	bls.n	8005f80 <HAL_RCC_OscConfig+0xf8>
 8005fa0:	e7d3      	b.n	8005f4a <HAL_RCC_OscConfig+0xc2>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8005fa2:	4c77      	ldr	r4, [pc, #476]	@ (8006180 <HAL_RCC_OscConfig+0x2f8>)
 8005fa4:	6863      	ldr	r3, [r4, #4]
 8005fa6:	f013 0f0c 	tst.w	r3, #12
 8005faa:	d007      	beq.n	8005fbc <HAL_RCC_OscConfig+0x134>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8005fac:	6863      	ldr	r3, [r4, #4]
 8005fae:	f003 030c 	and.w	r3, r3, #12
 8005fb2:	2b08      	cmp	r3, #8
 8005fb4:	d11f      	bne.n	8005ff6 <HAL_RCC_OscConfig+0x16e>
 8005fb6:	6863      	ldr	r3, [r4, #4]
 8005fb8:	03de      	lsls	r6, r3, #15
 8005fba:	d41c      	bmi.n	8005ff6 <HAL_RCC_OscConfig+0x16e>
 8005fbc:	2302      	movs	r3, #2
 8005fbe:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005fc2:	6821      	ldr	r1, [r4, #0]
 8005fc4:	fa93 f3a3 	rbit	r3, r3
 8005fc8:	2201      	movs	r2, #1
 8005fca:	fab3 f383 	clz	r3, r3
 8005fce:	fa02 f303 	lsl.w	r3, r2, r3
 8005fd2:	420b      	tst	r3, r1
 8005fd4:	d002      	beq.n	8005fdc <HAL_RCC_OscConfig+0x154>
 8005fd6:	692b      	ldr	r3, [r5, #16]
 8005fd8:	4293      	cmp	r3, r2
 8005fda:	d18e      	bne.n	8005efa <HAL_RCC_OscConfig+0x72>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005fdc:	6821      	ldr	r1, [r4, #0]
 8005fde:	22f8      	movs	r2, #248	@ 0xf8
 8005fe0:	fa92 f2a2 	rbit	r2, r2
 8005fe4:	696b      	ldr	r3, [r5, #20]
 8005fe6:	fab2 f282 	clz	r2, r2
 8005fea:	4093      	lsls	r3, r2
 8005fec:	f021 02f8 	bic.w	r2, r1, #248	@ 0xf8
 8005ff0:	4313      	orrs	r3, r2
 8005ff2:	6023      	str	r3, [r4, #0]
 8005ff4:	e754      	b.n	8005ea0 <HAL_RCC_OscConfig+0x18>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005ff6:	692a      	ldr	r2, [r5, #16]
 8005ff8:	2601      	movs	r6, #1
 8005ffa:	b1fa      	cbz	r2, 800603c <HAL_RCC_OscConfig+0x1b4>
 8005ffc:	fa96 f3a6 	rbit	r3, r6
        __HAL_RCC_HSI_ENABLE();
 8006000:	fab3 f383 	clz	r3, r3
 8006004:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8006008:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800600c:	009b      	lsls	r3, r3, #2
 800600e:	f04f 0802 	mov.w	r8, #2
 8006012:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 8006014:	f7fe ffea 	bl	8004fec <HAL_GetTick>
 8006018:	4607      	mov	r7, r0
 800601a:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800601e:	6822      	ldr	r2, [r4, #0]
 8006020:	fa98 f3a8 	rbit	r3, r8
 8006024:	fab3 f383 	clz	r3, r3
 8006028:	fa06 f303 	lsl.w	r3, r6, r3
 800602c:	4213      	tst	r3, r2
 800602e:	d1d5      	bne.n	8005fdc <HAL_RCC_OscConfig+0x154>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006030:	f7fe ffdc 	bl	8004fec <HAL_GetTick>
 8006034:	1bc0      	subs	r0, r0, r7
 8006036:	2802      	cmp	r0, #2
 8006038:	d9ef      	bls.n	800601a <HAL_RCC_OscConfig+0x192>
 800603a:	e786      	b.n	8005f4a <HAL_RCC_OscConfig+0xc2>
 800603c:	fa96 f3a6 	rbit	r3, r6
        __HAL_RCC_HSI_DISABLE();
 8006040:	fab3 f383 	clz	r3, r3
 8006044:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8006048:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800604c:	009b      	lsls	r3, r3, #2
 800604e:	f04f 0802 	mov.w	r8, #2
 8006052:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8006054:	f7fe ffca 	bl	8004fec <HAL_GetTick>
 8006058:	4607      	mov	r7, r0
 800605a:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800605e:	6822      	ldr	r2, [r4, #0]
 8006060:	fa98 f3a8 	rbit	r3, r8
 8006064:	fab3 f383 	clz	r3, r3
 8006068:	fa06 f303 	lsl.w	r3, r6, r3
 800606c:	4213      	tst	r3, r2
 800606e:	f43f af17 	beq.w	8005ea0 <HAL_RCC_OscConfig+0x18>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006072:	f7fe ffbb 	bl	8004fec <HAL_GetTick>
 8006076:	1bc0      	subs	r0, r0, r7
 8006078:	2802      	cmp	r0, #2
 800607a:	d9ee      	bls.n	800605a <HAL_RCC_OscConfig+0x1d2>
 800607c:	e765      	b.n	8005f4a <HAL_RCC_OscConfig+0xc2>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800607e:	69aa      	ldr	r2, [r5, #24]
 8006080:	4e3f      	ldr	r6, [pc, #252]	@ (8006180 <HAL_RCC_OscConfig+0x2f8>)
 8006082:	4940      	ldr	r1, [pc, #256]	@ (8006184 <HAL_RCC_OscConfig+0x2fc>)
 8006084:	2401      	movs	r4, #1
 8006086:	b30a      	cbz	r2, 80060cc <HAL_RCC_OscConfig+0x244>
 8006088:	fa94 f3a4 	rbit	r3, r4
      __HAL_RCC_LSI_ENABLE();
 800608c:	fab3 f383 	clz	r3, r3
 8006090:	440b      	add	r3, r1
 8006092:	009b      	lsls	r3, r3, #2
 8006094:	2702      	movs	r7, #2
 8006096:	601c      	str	r4, [r3, #0]
      tickstart = HAL_GetTick();
 8006098:	f7fe ffa8 	bl	8004fec <HAL_GetTick>
 800609c:	4680      	mov	r8, r0
 800609e:	fa97 f3a7 	rbit	r3, r7
 80060a2:	fa97 f3a7 	rbit	r3, r7
 80060a6:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80060aa:	6a72      	ldr	r2, [r6, #36]	@ 0x24
 80060ac:	fa97 f3a7 	rbit	r3, r7
 80060b0:	fab3 f383 	clz	r3, r3
 80060b4:	fa04 f303 	lsl.w	r3, r4, r3
 80060b8:	4213      	tst	r3, r2
 80060ba:	f47f aef5 	bne.w	8005ea8 <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80060be:	f7fe ff95 	bl	8004fec <HAL_GetTick>
 80060c2:	eba0 0008 	sub.w	r0, r0, r8
 80060c6:	2802      	cmp	r0, #2
 80060c8:	d9e9      	bls.n	800609e <HAL_RCC_OscConfig+0x216>
 80060ca:	e73e      	b.n	8005f4a <HAL_RCC_OscConfig+0xc2>
 80060cc:	fa94 f3a4 	rbit	r3, r4
      __HAL_RCC_LSI_DISABLE();
 80060d0:	fab3 f383 	clz	r3, r3
 80060d4:	440b      	add	r3, r1
 80060d6:	009b      	lsls	r3, r3, #2
 80060d8:	2702      	movs	r7, #2
 80060da:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80060dc:	f7fe ff86 	bl	8004fec <HAL_GetTick>
 80060e0:	4680      	mov	r8, r0
 80060e2:	fa97 f3a7 	rbit	r3, r7
 80060e6:	fa97 f3a7 	rbit	r3, r7
 80060ea:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80060ee:	6a72      	ldr	r2, [r6, #36]	@ 0x24
 80060f0:	fa97 f3a7 	rbit	r3, r7
 80060f4:	fab3 f383 	clz	r3, r3
 80060f8:	fa04 f303 	lsl.w	r3, r4, r3
 80060fc:	4213      	tst	r3, r2
 80060fe:	f43f aed3 	beq.w	8005ea8 <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006102:	f7fe ff73 	bl	8004fec <HAL_GetTick>
 8006106:	eba0 0008 	sub.w	r0, r0, r8
 800610a:	2802      	cmp	r0, #2
 800610c:	d9e9      	bls.n	80060e2 <HAL_RCC_OscConfig+0x25a>
 800610e:	e71c      	b.n	8005f4a <HAL_RCC_OscConfig+0xc2>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006110:	4c1b      	ldr	r4, [pc, #108]	@ (8006180 <HAL_RCC_OscConfig+0x2f8>)
 8006112:	69e3      	ldr	r3, [r4, #28]
 8006114:	00d9      	lsls	r1, r3, #3
 8006116:	d431      	bmi.n	800617c <HAL_RCC_OscConfig+0x2f4>
      __HAL_RCC_PWR_CLK_ENABLE();
 8006118:	69e3      	ldr	r3, [r4, #28]
 800611a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800611e:	61e3      	str	r3, [r4, #28]
 8006120:	69e3      	ldr	r3, [r4, #28]
 8006122:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006126:	9301      	str	r3, [sp, #4]
 8006128:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800612a:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800612c:	4f16      	ldr	r7, [pc, #88]	@ (8006188 <HAL_RCC_OscConfig+0x300>)
 800612e:	683b      	ldr	r3, [r7, #0]
 8006130:	05da      	lsls	r2, r3, #23
 8006132:	d52b      	bpl.n	800618c <HAL_RCC_OscConfig+0x304>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006134:	68eb      	ldr	r3, [r5, #12]
 8006136:	2b01      	cmp	r3, #1
 8006138:	d139      	bne.n	80061ae <HAL_RCC_OscConfig+0x326>
 800613a:	6a23      	ldr	r3, [r4, #32]
 800613c:	f043 0301 	orr.w	r3, r3, #1
 8006140:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8006142:	f7fe ff53 	bl	8004fec <HAL_GetTick>
 8006146:	2702      	movs	r7, #2
 8006148:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800614a:	f04f 0901 	mov.w	r9, #1
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800614e:	f241 3a88 	movw	sl, #5000	@ 0x1388
 8006152:	fa97 f3a7 	rbit	r3, r7
 8006156:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800615a:	6a22      	ldr	r2, [r4, #32]
 800615c:	fa97 f3a7 	rbit	r3, r7
 8006160:	fab3 f383 	clz	r3, r3
 8006164:	fa09 f303 	lsl.w	r3, r9, r3
 8006168:	4213      	tst	r3, r2
 800616a:	d053      	beq.n	8006214 <HAL_RCC_OscConfig+0x38c>
    if(pwrclkchanged == SET)
 800616c:	2e00      	cmp	r6, #0
 800616e:	f43f ae9f 	beq.w	8005eb0 <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 8006172:	69e3      	ldr	r3, [r4, #28]
 8006174:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006178:	61e3      	str	r3, [r4, #28]
 800617a:	e699      	b.n	8005eb0 <HAL_RCC_OscConfig+0x28>
    FlagStatus       pwrclkchanged = RESET;
 800617c:	2600      	movs	r6, #0
 800617e:	e7d5      	b.n	800612c <HAL_RCC_OscConfig+0x2a4>
 8006180:	40021000 	.word	0x40021000
 8006184:	10908120 	.word	0x10908120
 8006188:	40007000 	.word	0x40007000
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800618c:	683b      	ldr	r3, [r7, #0]
 800618e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006192:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8006194:	f7fe ff2a 	bl	8004fec <HAL_GetTick>
 8006198:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800619a:	683b      	ldr	r3, [r7, #0]
 800619c:	05db      	lsls	r3, r3, #23
 800619e:	d4c9      	bmi.n	8006134 <HAL_RCC_OscConfig+0x2ac>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80061a0:	f7fe ff24 	bl	8004fec <HAL_GetTick>
 80061a4:	eba0 0008 	sub.w	r0, r0, r8
 80061a8:	2864      	cmp	r0, #100	@ 0x64
 80061aa:	d9f6      	bls.n	800619a <HAL_RCC_OscConfig+0x312>
 80061ac:	e6cd      	b.n	8005f4a <HAL_RCC_OscConfig+0xc2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80061ae:	bb1b      	cbnz	r3, 80061f8 <HAL_RCC_OscConfig+0x370>
 80061b0:	6a23      	ldr	r3, [r4, #32]
 80061b2:	f023 0301 	bic.w	r3, r3, #1
 80061b6:	6223      	str	r3, [r4, #32]
 80061b8:	6a23      	ldr	r3, [r4, #32]
 80061ba:	f023 0304 	bic.w	r3, r3, #4
 80061be:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80061c0:	f7fe ff14 	bl	8004fec <HAL_GetTick>
 80061c4:	2702      	movs	r7, #2
 80061c6:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80061c8:	f04f 0901 	mov.w	r9, #1
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80061cc:	f241 3a88 	movw	sl, #5000	@ 0x1388
 80061d0:	fa97 f3a7 	rbit	r3, r7
 80061d4:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80061d8:	6a22      	ldr	r2, [r4, #32]
 80061da:	fa97 f3a7 	rbit	r3, r7
 80061de:	fab3 f383 	clz	r3, r3
 80061e2:	fa09 f303 	lsl.w	r3, r9, r3
 80061e6:	4213      	tst	r3, r2
 80061e8:	d0c0      	beq.n	800616c <HAL_RCC_OscConfig+0x2e4>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80061ea:	f7fe feff 	bl	8004fec <HAL_GetTick>
 80061ee:	eba0 0008 	sub.w	r0, r0, r8
 80061f2:	4550      	cmp	r0, sl
 80061f4:	d9ec      	bls.n	80061d0 <HAL_RCC_OscConfig+0x348>
 80061f6:	e6a8      	b.n	8005f4a <HAL_RCC_OscConfig+0xc2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80061f8:	2b05      	cmp	r3, #5
 80061fa:	6a23      	ldr	r3, [r4, #32]
 80061fc:	d103      	bne.n	8006206 <HAL_RCC_OscConfig+0x37e>
 80061fe:	f043 0304 	orr.w	r3, r3, #4
 8006202:	6223      	str	r3, [r4, #32]
 8006204:	e799      	b.n	800613a <HAL_RCC_OscConfig+0x2b2>
 8006206:	f023 0301 	bic.w	r3, r3, #1
 800620a:	6223      	str	r3, [r4, #32]
 800620c:	6a23      	ldr	r3, [r4, #32]
 800620e:	f023 0304 	bic.w	r3, r3, #4
 8006212:	e795      	b.n	8006140 <HAL_RCC_OscConfig+0x2b8>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006214:	f7fe feea 	bl	8004fec <HAL_GetTick>
 8006218:	eba0 0008 	sub.w	r0, r0, r8
 800621c:	4550      	cmp	r0, sl
 800621e:	d998      	bls.n	8006152 <HAL_RCC_OscConfig+0x2ca>
 8006220:	e693      	b.n	8005f4a <HAL_RCC_OscConfig+0xc2>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006222:	4c46      	ldr	r4, [pc, #280]	@ (800633c <HAL_RCC_OscConfig+0x4b4>)
 8006224:	6862      	ldr	r2, [r4, #4]
 8006226:	f002 020c 	and.w	r2, r2, #12
 800622a:	2a08      	cmp	r2, #8
 800622c:	d074      	beq.n	8006318 <HAL_RCC_OscConfig+0x490>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800622e:	2b02      	cmp	r3, #2
 8006230:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006234:	d14d      	bne.n	80062d2 <HAL_RCC_OscConfig+0x44a>
 8006236:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 800623a:	fab3 f383 	clz	r3, r3
 800623e:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8006242:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8006246:	009b      	lsls	r3, r3, #2
 8006248:	2200      	movs	r2, #0
 800624a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800624c:	f7fe fece 	bl	8004fec <HAL_GetTick>
 8006250:	f04f 7800 	mov.w	r8, #33554432	@ 0x2000000
 8006254:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006256:	2601      	movs	r6, #1
 8006258:	fa98 f3a8 	rbit	r3, r8
 800625c:	6822      	ldr	r2, [r4, #0]
 800625e:	fa98 f3a8 	rbit	r3, r8
 8006262:	fab3 f383 	clz	r3, r3
 8006266:	fa06 f303 	lsl.w	r3, r6, r3
 800626a:	4213      	tst	r3, r2
 800626c:	d12b      	bne.n	80062c6 <HAL_RCC_OscConfig+0x43e>
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800626e:	e9d5 1308 	ldrd	r1, r3, [r5, #32]
 8006272:	6862      	ldr	r2, [r4, #4]
 8006274:	430b      	orrs	r3, r1
 8006276:	f422 1274 	bic.w	r2, r2, #3997696	@ 0x3d0000
 800627a:	4313      	orrs	r3, r2
 800627c:	6063      	str	r3, [r4, #4]
 800627e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006282:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 8006286:	fab3 f383 	clz	r3, r3
 800628a:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800628e:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8006292:	009b      	lsls	r3, r3, #2
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006294:	2701      	movs	r7, #1
        __HAL_RCC_PLL_ENABLE();
 8006296:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 8006298:	f7fe fea8 	bl	8004fec <HAL_GetTick>
 800629c:	f04f 7600 	mov.w	r6, #33554432	@ 0x2000000
 80062a0:	4605      	mov	r5, r0
 80062a2:	fa96 f3a6 	rbit	r3, r6
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80062a6:	6822      	ldr	r2, [r4, #0]
 80062a8:	fa96 f3a6 	rbit	r3, r6
 80062ac:	fab3 f383 	clz	r3, r3
 80062b0:	fa07 f303 	lsl.w	r3, r7, r3
 80062b4:	4213      	tst	r3, r2
 80062b6:	f47f adff 	bne.w	8005eb8 <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80062ba:	f7fe fe97 	bl	8004fec <HAL_GetTick>
 80062be:	1b40      	subs	r0, r0, r5
 80062c0:	2802      	cmp	r0, #2
 80062c2:	d9ee      	bls.n	80062a2 <HAL_RCC_OscConfig+0x41a>
 80062c4:	e641      	b.n	8005f4a <HAL_RCC_OscConfig+0xc2>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80062c6:	f7fe fe91 	bl	8004fec <HAL_GetTick>
 80062ca:	1bc0      	subs	r0, r0, r7
 80062cc:	2802      	cmp	r0, #2
 80062ce:	d9c3      	bls.n	8006258 <HAL_RCC_OscConfig+0x3d0>
 80062d0:	e63b      	b.n	8005f4a <HAL_RCC_OscConfig+0xc2>
 80062d2:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 80062d6:	fab3 f383 	clz	r3, r3
 80062da:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80062de:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80062e2:	009b      	lsls	r3, r3, #2
 80062e4:	2200      	movs	r2, #0
 80062e6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80062e8:	f7fe fe80 	bl	8004fec <HAL_GetTick>
 80062ec:	f04f 7600 	mov.w	r6, #33554432	@ 0x2000000
 80062f0:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80062f2:	2701      	movs	r7, #1
 80062f4:	fa96 f3a6 	rbit	r3, r6
 80062f8:	6822      	ldr	r2, [r4, #0]
 80062fa:	fa96 f3a6 	rbit	r3, r6
 80062fe:	fab3 f383 	clz	r3, r3
 8006302:	fa07 f303 	lsl.w	r3, r7, r3
 8006306:	4213      	tst	r3, r2
 8006308:	f43f add6 	beq.w	8005eb8 <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800630c:	f7fe fe6e 	bl	8004fec <HAL_GetTick>
 8006310:	1b40      	subs	r0, r0, r5
 8006312:	2802      	cmp	r0, #2
 8006314:	d9ee      	bls.n	80062f4 <HAL_RCC_OscConfig+0x46c>
 8006316:	e618      	b.n	8005f4a <HAL_RCC_OscConfig+0xc2>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006318:	2b01      	cmp	r3, #1
 800631a:	f43f adee 	beq.w	8005efa <HAL_RCC_OscConfig+0x72>
        pll_config = RCC->CFGR;
 800631e:	6860      	ldr	r0, [r4, #4]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8006320:	6a2b      	ldr	r3, [r5, #32]
 8006322:	f400 3280 	and.w	r2, r0, #65536	@ 0x10000
 8006326:	429a      	cmp	r2, r3
 8006328:	f47f ade7 	bne.w	8005efa <HAL_RCC_OscConfig+0x72>
 800632c:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800632e:	f400 1070 	and.w	r0, r0, #3932160	@ 0x3c0000
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8006332:	1ac0      	subs	r0, r0, r3
 8006334:	bf18      	it	ne
 8006336:	2001      	movne	r0, #1
 8006338:	e608      	b.n	8005f4c <HAL_RCC_OscConfig+0xc4>
 800633a:	bf00      	nop
 800633c:	40021000 	.word	0x40021000

08006340 <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 8006340:	4b0c      	ldr	r3, [pc, #48]	@ (8006374 <HAL_RCC_GetSysClockFreq+0x34>)
 8006342:	685a      	ldr	r2, [r3, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006344:	f002 010c 	and.w	r1, r2, #12
 8006348:	2908      	cmp	r1, #8
 800634a:	d111      	bne.n	8006370 <HAL_RCC_GetSysClockFreq+0x30>
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 800634c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800634e:	480a      	ldr	r0, [pc, #40]	@ (8006378 <HAL_RCC_GetSysClockFreq+0x38>)
 8006350:	f3c2 4183 	ubfx	r1, r2, #18, #4
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8006354:	03d2      	lsls	r2, r2, #15
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8006356:	bf44      	itt	mi
 8006358:	f003 030f 	andmi.w	r3, r3, #15
 800635c:	4a07      	ldrmi	r2, [pc, #28]	@ (800637c <HAL_RCC_GetSysClockFreq+0x3c>)
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800635e:	5c40      	ldrb	r0, [r0, r1]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8006360:	bf49      	itett	mi
 8006362:	5cd2      	ldrbmi	r2, [r2, r3]
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8006364:	4b06      	ldrpl	r3, [pc, #24]	@ (8006380 <HAL_RCC_GetSysClockFreq+0x40>)
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8006366:	4b07      	ldrmi	r3, [pc, #28]	@ (8006384 <HAL_RCC_GetSysClockFreq+0x44>)
 8006368:	fbb3 f3f2 	udivmi	r3, r3, r2
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800636c:	4358      	muls	r0, r3
 800636e:	4770      	bx	lr
      sysclockfreq = HSE_VALUE;
 8006370:	4804      	ldr	r0, [pc, #16]	@ (8006384 <HAL_RCC_GetSysClockFreq+0x44>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8006372:	4770      	bx	lr
 8006374:	40021000 	.word	0x40021000
 8006378:	08011dd9 	.word	0x08011dd9
 800637c:	08011dc9 	.word	0x08011dc9
 8006380:	003d0900 	.word	0x003d0900
 8006384:	007a1200 	.word	0x007a1200

08006388 <HAL_RCC_ClockConfig>:
{
 8006388:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800638c:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 800638e:	4604      	mov	r4, r0
 8006390:	b910      	cbnz	r0, 8006398 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8006392:	2001      	movs	r0, #1
}
 8006394:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006398:	4a4a      	ldr	r2, [pc, #296]	@ (80064c4 <HAL_RCC_ClockConfig+0x13c>)
 800639a:	6813      	ldr	r3, [r2, #0]
 800639c:	f003 0307 	and.w	r3, r3, #7
 80063a0:	428b      	cmp	r3, r1
 80063a2:	d32e      	bcc.n	8006402 <HAL_RCC_ClockConfig+0x7a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80063a4:	6822      	ldr	r2, [r4, #0]
 80063a6:	0791      	lsls	r1, r2, #30
 80063a8:	d436      	bmi.n	8006418 <HAL_RCC_ClockConfig+0x90>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80063aa:	07d2      	lsls	r2, r2, #31
 80063ac:	d43c      	bmi.n	8006428 <HAL_RCC_ClockConfig+0xa0>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80063ae:	4a45      	ldr	r2, [pc, #276]	@ (80064c4 <HAL_RCC_ClockConfig+0x13c>)
 80063b0:	6813      	ldr	r3, [r2, #0]
 80063b2:	f003 0307 	and.w	r3, r3, #7
 80063b6:	42ab      	cmp	r3, r5
 80063b8:	d870      	bhi.n	800649c <HAL_RCC_ClockConfig+0x114>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80063ba:	6822      	ldr	r2, [r4, #0]
 80063bc:	4d42      	ldr	r5, [pc, #264]	@ (80064c8 <HAL_RCC_ClockConfig+0x140>)
 80063be:	f012 0f04 	tst.w	r2, #4
 80063c2:	d177      	bne.n	80064b4 <HAL_RCC_ClockConfig+0x12c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80063c4:	0713      	lsls	r3, r2, #28
 80063c6:	d506      	bpl.n	80063d6 <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80063c8:	686b      	ldr	r3, [r5, #4]
 80063ca:	6922      	ldr	r2, [r4, #16]
 80063cc:	f423 5360 	bic.w	r3, r3, #14336	@ 0x3800
 80063d0:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80063d4:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80063d6:	f7ff ffb3 	bl	8006340 <HAL_RCC_GetSysClockFreq>
 80063da:	686b      	ldr	r3, [r5, #4]
 80063dc:	22f0      	movs	r2, #240	@ 0xf0
 80063de:	fa92 f2a2 	rbit	r2, r2
 80063e2:	fab2 f282 	clz	r2, r2
 80063e6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80063ea:	40d3      	lsrs	r3, r2
 80063ec:	4a37      	ldr	r2, [pc, #220]	@ (80064cc <HAL_RCC_ClockConfig+0x144>)
 80063ee:	5cd3      	ldrb	r3, [r2, r3]
 80063f0:	40d8      	lsrs	r0, r3
 80063f2:	4b37      	ldr	r3, [pc, #220]	@ (80064d0 <HAL_RCC_ClockConfig+0x148>)
 80063f4:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 80063f6:	4b37      	ldr	r3, [pc, #220]	@ (80064d4 <HAL_RCC_ClockConfig+0x14c>)
 80063f8:	6818      	ldr	r0, [r3, #0]
 80063fa:	f7fe fc59 	bl	8004cb0 <HAL_InitTick>
  return HAL_OK;
 80063fe:	2000      	movs	r0, #0
 8006400:	e7c8      	b.n	8006394 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006402:	6813      	ldr	r3, [r2, #0]
 8006404:	f023 0307 	bic.w	r3, r3, #7
 8006408:	430b      	orrs	r3, r1
 800640a:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800640c:	6813      	ldr	r3, [r2, #0]
 800640e:	f003 0307 	and.w	r3, r3, #7
 8006412:	428b      	cmp	r3, r1
 8006414:	d1bd      	bne.n	8006392 <HAL_RCC_ClockConfig+0xa>
 8006416:	e7c5      	b.n	80063a4 <HAL_RCC_ClockConfig+0x1c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006418:	492b      	ldr	r1, [pc, #172]	@ (80064c8 <HAL_RCC_ClockConfig+0x140>)
 800641a:	68a0      	ldr	r0, [r4, #8]
 800641c:	684b      	ldr	r3, [r1, #4]
 800641e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006422:	4303      	orrs	r3, r0
 8006424:	604b      	str	r3, [r1, #4]
 8006426:	e7c0      	b.n	80063aa <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006428:	6862      	ldr	r2, [r4, #4]
 800642a:	4e27      	ldr	r6, [pc, #156]	@ (80064c8 <HAL_RCC_ClockConfig+0x140>)
 800642c:	2a01      	cmp	r2, #1
 800642e:	d124      	bne.n	800647a <HAL_RCC_ClockConfig+0xf2>
 8006430:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8006434:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006438:	6831      	ldr	r1, [r6, #0]
 800643a:	fa93 f3a3 	rbit	r3, r3
 800643e:	fab3 f383 	clz	r3, r3
 8006442:	fa02 f303 	lsl.w	r3, r2, r3
 8006446:	420b      	tst	r3, r1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006448:	d0a3      	beq.n	8006392 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800644a:	6873      	ldr	r3, [r6, #4]
 800644c:	f023 0303 	bic.w	r3, r3, #3
 8006450:	4313      	orrs	r3, r2
 8006452:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8006454:	f7fe fdca 	bl	8004fec <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006458:	f241 3888 	movw	r8, #5000	@ 0x1388
    tickstart = HAL_GetTick();
 800645c:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800645e:	6873      	ldr	r3, [r6, #4]
 8006460:	6862      	ldr	r2, [r4, #4]
 8006462:	f003 030c 	and.w	r3, r3, #12
 8006466:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800646a:	d0a0      	beq.n	80063ae <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800646c:	f7fe fdbe 	bl	8004fec <HAL_GetTick>
 8006470:	1bc0      	subs	r0, r0, r7
 8006472:	4540      	cmp	r0, r8
 8006474:	d9f3      	bls.n	800645e <HAL_RCC_ClockConfig+0xd6>
        return HAL_TIMEOUT;
 8006476:	2003      	movs	r0, #3
 8006478:	e78c      	b.n	8006394 <HAL_RCC_ClockConfig+0xc>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800647a:	2a02      	cmp	r2, #2
 800647c:	bf0c      	ite	eq
 800647e:	f04f 7300 	moveq.w	r3, #33554432	@ 0x2000000
 8006482:	2302      	movne	r3, #2
 8006484:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006488:	6830      	ldr	r0, [r6, #0]
 800648a:	fa93 f3a3 	rbit	r3, r3
 800648e:	2101      	movs	r1, #1
 8006490:	fab3 f383 	clz	r3, r3
 8006494:	fa01 f303 	lsl.w	r3, r1, r3
 8006498:	4203      	tst	r3, r0
 800649a:	e7d5      	b.n	8006448 <HAL_RCC_ClockConfig+0xc0>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800649c:	6813      	ldr	r3, [r2, #0]
 800649e:	f023 0307 	bic.w	r3, r3, #7
 80064a2:	432b      	orrs	r3, r5
 80064a4:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80064a6:	6813      	ldr	r3, [r2, #0]
 80064a8:	f003 0307 	and.w	r3, r3, #7
 80064ac:	42ab      	cmp	r3, r5
 80064ae:	f47f af70 	bne.w	8006392 <HAL_RCC_ClockConfig+0xa>
 80064b2:	e782      	b.n	80063ba <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80064b4:	686b      	ldr	r3, [r5, #4]
 80064b6:	68e1      	ldr	r1, [r4, #12]
 80064b8:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80064bc:	430b      	orrs	r3, r1
 80064be:	606b      	str	r3, [r5, #4]
 80064c0:	e780      	b.n	80063c4 <HAL_RCC_ClockConfig+0x3c>
 80064c2:	bf00      	nop
 80064c4:	40022000 	.word	0x40022000
 80064c8:	40021000 	.word	0x40021000
 80064cc:	08011db9 	.word	0x08011db9
 80064d0:	20000014 	.word	0x20000014
 80064d4:	2000001c 	.word	0x2000001c

080064d8 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80064d8:	4b08      	ldr	r3, [pc, #32]	@ (80064fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80064da:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80064de:	685b      	ldr	r3, [r3, #4]
 80064e0:	fa92 f2a2 	rbit	r2, r2
 80064e4:	fab2 f282 	clz	r2, r2
 80064e8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80064ec:	40d3      	lsrs	r3, r2
 80064ee:	4a04      	ldr	r2, [pc, #16]	@ (8006500 <HAL_RCC_GetPCLK1Freq+0x28>)
 80064f0:	5cd3      	ldrb	r3, [r2, r3]
 80064f2:	4a04      	ldr	r2, [pc, #16]	@ (8006504 <HAL_RCC_GetPCLK1Freq+0x2c>)
 80064f4:	6810      	ldr	r0, [r2, #0]
}    
 80064f6:	40d8      	lsrs	r0, r3
 80064f8:	4770      	bx	lr
 80064fa:	bf00      	nop
 80064fc:	40021000 	.word	0x40021000
 8006500:	08011db1 	.word	0x08011db1
 8006504:	20000014 	.word	0x20000014

08006508 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8006508:	4b08      	ldr	r3, [pc, #32]	@ (800652c <HAL_RCC_GetPCLK2Freq+0x24>)
 800650a:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 800650e:	685b      	ldr	r3, [r3, #4]
 8006510:	fa92 f2a2 	rbit	r2, r2
 8006514:	fab2 f282 	clz	r2, r2
 8006518:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 800651c:	40d3      	lsrs	r3, r2
 800651e:	4a04      	ldr	r2, [pc, #16]	@ (8006530 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006520:	5cd3      	ldrb	r3, [r2, r3]
 8006522:	4a04      	ldr	r2, [pc, #16]	@ (8006534 <HAL_RCC_GetPCLK2Freq+0x2c>)
 8006524:	6810      	ldr	r0, [r2, #0]
} 
 8006526:	40d8      	lsrs	r0, r3
 8006528:	4770      	bx	lr
 800652a:	bf00      	nop
 800652c:	40021000 	.word	0x40021000
 8006530:	08011db1 	.word	0x08011db1
 8006534:	20000014 	.word	0x20000014

08006538 <HAL_RCC_GetClockConfig>:
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006538:	230f      	movs	r3, #15
 800653a:	6003      	str	r3, [r0, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800653c:	4b0b      	ldr	r3, [pc, #44]	@ (800656c <HAL_RCC_GetClockConfig+0x34>)
 800653e:	685a      	ldr	r2, [r3, #4]
 8006540:	f002 0203 	and.w	r2, r2, #3
 8006544:	6042      	str	r2, [r0, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8006546:	685a      	ldr	r2, [r3, #4]
 8006548:	f002 02f0 	and.w	r2, r2, #240	@ 0xf0
 800654c:	6082      	str	r2, [r0, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 800654e:	685a      	ldr	r2, [r3, #4]
 8006550:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
 8006554:	60c2      	str	r2, [r0, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8006556:	685b      	ldr	r3, [r3, #4]
 8006558:	08db      	lsrs	r3, r3, #3
 800655a:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800655e:	6103      	str	r3, [r0, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 8006560:	4b03      	ldr	r3, [pc, #12]	@ (8006570 <HAL_RCC_GetClockConfig+0x38>)
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	f003 0307 	and.w	r3, r3, #7
 8006568:	600b      	str	r3, [r1, #0]
}
 800656a:	4770      	bx	lr
 800656c:	40021000 	.word	0x40021000
 8006570:	40022000 	.word	0x40022000

08006574 <HAL_RCCEx_PeriphCLKConfig>:
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006574:	6803      	ldr	r3, [r0, #0]
{
 8006576:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800657a:	03dd      	lsls	r5, r3, #15
{
 800657c:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800657e:	d524      	bpl.n	80065ca <HAL_RCCEx_PeriphCLKConfig+0x56>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006580:	4d78      	ldr	r5, [pc, #480]	@ (8006764 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8006582:	69eb      	ldr	r3, [r5, #28]
 8006584:	00d8      	lsls	r0, r3, #3
 8006586:	f100 8091 	bmi.w	80066ac <HAL_RCCEx_PeriphCLKConfig+0x138>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800658a:	69eb      	ldr	r3, [r5, #28]
 800658c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006590:	61eb      	str	r3, [r5, #28]
 8006592:	69eb      	ldr	r3, [r5, #28]
 8006594:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006598:	9301      	str	r3, [sp, #4]
 800659a:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800659c:	2601      	movs	r6, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800659e:	4f72      	ldr	r7, [pc, #456]	@ (8006768 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 80065a0:	683b      	ldr	r3, [r7, #0]
 80065a2:	05d9      	lsls	r1, r3, #23
 80065a4:	f140 8084 	bpl.w	80066b0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80065a8:	6a2b      	ldr	r3, [r5, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80065aa:	6862      	ldr	r2, [r4, #4]
 80065ac:	f413 7340 	ands.w	r3, r3, #768	@ 0x300
 80065b0:	f040 8093 	bne.w	80066da <HAL_RCCEx_PeriphCLKConfig+0x166>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80065b4:	6a2b      	ldr	r3, [r5, #32]
 80065b6:	6862      	ldr	r2, [r4, #4]
 80065b8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80065bc:	4313      	orrs	r3, r2
 80065be:	622b      	str	r3, [r5, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80065c0:	b11e      	cbz	r6, 80065ca <HAL_RCCEx_PeriphCLKConfig+0x56>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80065c2:	69eb      	ldr	r3, [r5, #28]
 80065c4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80065c8:	61eb      	str	r3, [r5, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80065ca:	6823      	ldr	r3, [r4, #0]
 80065cc:	07df      	lsls	r7, r3, #31
 80065ce:	d506      	bpl.n	80065de <HAL_RCCEx_PeriphCLKConfig+0x6a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80065d0:	4964      	ldr	r1, [pc, #400]	@ (8006764 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 80065d2:	68a0      	ldr	r0, [r4, #8]
 80065d4:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 80065d6:	f022 0203 	bic.w	r2, r2, #3
 80065da:	4302      	orrs	r2, r0
 80065dc:	630a      	str	r2, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80065de:	079e      	lsls	r6, r3, #30
 80065e0:	d506      	bpl.n	80065f0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80065e2:	4960      	ldr	r1, [pc, #384]	@ (8006764 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 80065e4:	68e0      	ldr	r0, [r4, #12]
 80065e6:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 80065e8:	f422 3240 	bic.w	r2, r2, #196608	@ 0x30000
 80065ec:	4302      	orrs	r2, r0
 80065ee:	630a      	str	r2, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80065f0:	075d      	lsls	r5, r3, #29
 80065f2:	d506      	bpl.n	8006602 <HAL_RCCEx_PeriphCLKConfig+0x8e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80065f4:	495b      	ldr	r1, [pc, #364]	@ (8006764 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 80065f6:	6920      	ldr	r0, [r4, #16]
 80065f8:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 80065fa:	f422 2240 	bic.w	r2, r2, #786432	@ 0xc0000
 80065fe:	4302      	orrs	r2, r0
 8006600:	630a      	str	r2, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006602:	0698      	lsls	r0, r3, #26
 8006604:	d506      	bpl.n	8006614 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006606:	4957      	ldr	r1, [pc, #348]	@ (8006764 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8006608:	69e0      	ldr	r0, [r4, #28]
 800660a:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 800660c:	f022 0210 	bic.w	r2, r2, #16
 8006610:	4302      	orrs	r2, r0
 8006612:	630a      	str	r2, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006614:	0399      	lsls	r1, r3, #14
 8006616:	d506      	bpl.n	8006626 <HAL_RCCEx_PeriphCLKConfig+0xb2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8006618:	4952      	ldr	r1, [pc, #328]	@ (8006764 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 800661a:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 800661c:	684a      	ldr	r2, [r1, #4]
 800661e:	f422 0280 	bic.w	r2, r2, #4194304	@ 0x400000
 8006622:	4302      	orrs	r2, r0
 8006624:	604a      	str	r2, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006626:	065a      	lsls	r2, r3, #25
 8006628:	d506      	bpl.n	8006638 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800662a:	494e      	ldr	r1, [pc, #312]	@ (8006764 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 800662c:	6a20      	ldr	r0, [r4, #32]
 800662e:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 8006630:	f022 0220 	bic.w	r2, r2, #32
 8006634:	4302      	orrs	r2, r0
 8006636:	630a      	str	r2, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006638:	071f      	lsls	r7, r3, #28
 800663a:	d506      	bpl.n	800664a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800663c:	4949      	ldr	r1, [pc, #292]	@ (8006764 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 800663e:	6960      	ldr	r0, [r4, #20]
 8006640:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 8006642:	f422 1240 	bic.w	r2, r2, #3145728	@ 0x300000
 8006646:	4302      	orrs	r2, r0
 8006648:	630a      	str	r2, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800664a:	06de      	lsls	r6, r3, #27
 800664c:	d506      	bpl.n	800665c <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800664e:	4945      	ldr	r1, [pc, #276]	@ (8006764 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8006650:	69a0      	ldr	r0, [r4, #24]
 8006652:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 8006654:	f422 0240 	bic.w	r2, r2, #12582912	@ 0xc00000
 8006658:	4302      	orrs	r2, r0
 800665a:	630a      	str	r2, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800665c:	059d      	lsls	r5, r3, #22
 800665e:	d506      	bpl.n	800666e <HAL_RCCEx_PeriphCLKConfig+0xfa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006660:	4940      	ldr	r1, [pc, #256]	@ (8006764 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8006662:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8006664:	684a      	ldr	r2, [r1, #4]
 8006666:	f422 0200 	bic.w	r2, r2, #8388608	@ 0x800000
 800666a:	4302      	orrs	r2, r0
 800666c:	604a      	str	r2, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800666e:	0618      	lsls	r0, r3, #24
 8006670:	d506      	bpl.n	8006680 <HAL_RCCEx_PeriphCLKConfig+0x10c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8006672:	493c      	ldr	r1, [pc, #240]	@ (8006764 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8006674:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8006676:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 8006678:	f422 72f8 	bic.w	r2, r2, #496	@ 0x1f0
 800667c:	4302      	orrs	r2, r0
 800667e:	62ca      	str	r2, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8006680:	05d9      	lsls	r1, r3, #23
 8006682:	d506      	bpl.n	8006692 <HAL_RCCEx_PeriphCLKConfig+0x11e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8006684:	4937      	ldr	r1, [pc, #220]	@ (8006764 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8006686:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8006688:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 800668a:	f422 5278 	bic.w	r2, r2, #15872	@ 0x3e00
 800668e:	4302      	orrs	r2, r0
 8006690:	62ca      	str	r2, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8006692:	04da      	lsls	r2, r3, #19
 8006694:	d506      	bpl.n	80066a4 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8006696:	4933      	ldr	r1, [pc, #204]	@ (8006764 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8006698:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 800669a:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 800669c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80066a0:	4302      	orrs	r2, r0
 80066a2:	630a      	str	r2, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80066a4:	049b      	lsls	r3, r3, #18
 80066a6:	d454      	bmi.n	8006752 <HAL_RCCEx_PeriphCLKConfig+0x1de>
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80066a8:	2000      	movs	r0, #0
 80066aa:	e013      	b.n	80066d4 <HAL_RCCEx_PeriphCLKConfig+0x160>
  FlagStatus       pwrclkchanged = RESET;
 80066ac:	2600      	movs	r6, #0
 80066ae:	e776      	b.n	800659e <HAL_RCCEx_PeriphCLKConfig+0x2a>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80066b0:	683b      	ldr	r3, [r7, #0]
 80066b2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80066b6:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 80066b8:	f7fe fc98 	bl	8004fec <HAL_GetTick>
 80066bc:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80066be:	683b      	ldr	r3, [r7, #0]
 80066c0:	05da      	lsls	r2, r3, #23
 80066c2:	f53f af71 	bmi.w	80065a8 <HAL_RCCEx_PeriphCLKConfig+0x34>
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80066c6:	f7fe fc91 	bl	8004fec <HAL_GetTick>
 80066ca:	eba0 0008 	sub.w	r0, r0, r8
 80066ce:	2864      	cmp	r0, #100	@ 0x64
 80066d0:	d9f5      	bls.n	80066be <HAL_RCCEx_PeriphCLKConfig+0x14a>
          return HAL_TIMEOUT;
 80066d2:	2003      	movs	r0, #3
}
 80066d4:	b002      	add	sp, #8
 80066d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80066da:	f402 7240 	and.w	r2, r2, #768	@ 0x300
 80066de:	429a      	cmp	r2, r3
 80066e0:	f43f af68 	beq.w	80065b4 <HAL_RCCEx_PeriphCLKConfig+0x40>
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80066e4:	6a29      	ldr	r1, [r5, #32]
 80066e6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80066ea:	f421 7040 	bic.w	r0, r1, #768	@ 0x300
 80066ee:	fa93 f2a3 	rbit	r2, r3
      __HAL_RCC_BACKUPRESET_FORCE();
 80066f2:	f8df c078 	ldr.w	ip, [pc, #120]	@ 800676c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80066f6:	fab2 f282 	clz	r2, r2
 80066fa:	4462      	add	r2, ip
 80066fc:	0092      	lsls	r2, r2, #2
 80066fe:	2701      	movs	r7, #1
 8006700:	6017      	str	r7, [r2, #0]
 8006702:	fa93 f3a3 	rbit	r3, r3
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006706:	fab3 f383 	clz	r3, r3
 800670a:	4463      	add	r3, ip
 800670c:	009b      	lsls	r3, r3, #2
 800670e:	2200      	movs	r2, #0
 8006710:	601a      	str	r2, [r3, #0]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8006712:	07cb      	lsls	r3, r1, #31
      RCC->BDCR = temp_reg;
 8006714:	6228      	str	r0, [r5, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8006716:	f57f af4d 	bpl.w	80065b4 <HAL_RCCEx_PeriphCLKConfig+0x40>
        tickstart = HAL_GetTick();
 800671a:	f7fe fc67 	bl	8004fec <HAL_GetTick>
 800671e:	f04f 0802 	mov.w	r8, #2
 8006722:	4681      	mov	r9, r0
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006724:	f241 3a88 	movw	sl, #5000	@ 0x1388
 8006728:	fa98 f3a8 	rbit	r3, r8
 800672c:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006730:	6a2a      	ldr	r2, [r5, #32]
 8006732:	fa98 f3a8 	rbit	r3, r8
 8006736:	fab3 f383 	clz	r3, r3
 800673a:	fa07 f303 	lsl.w	r3, r7, r3
 800673e:	4213      	tst	r3, r2
 8006740:	f47f af38 	bne.w	80065b4 <HAL_RCCEx_PeriphCLKConfig+0x40>
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006744:	f7fe fc52 	bl	8004fec <HAL_GetTick>
 8006748:	eba0 0009 	sub.w	r0, r0, r9
 800674c:	4550      	cmp	r0, sl
 800674e:	d9eb      	bls.n	8006728 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 8006750:	e7bf      	b.n	80066d2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8006752:	4a04      	ldr	r2, [pc, #16]	@ (8006764 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8006754:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006756:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8006758:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800675c:	430b      	orrs	r3, r1
 800675e:	6313      	str	r3, [r2, #48]	@ 0x30
 8006760:	e7a2      	b.n	80066a8 <HAL_RCCEx_PeriphCLKConfig+0x134>
 8006762:	bf00      	nop
 8006764:	40021000 	.word	0x40021000
 8006768:	40007000 	.word	0x40007000
 800676c:	10908100 	.word	0x10908100

08006770 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8006770:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8006772:	6803      	ldr	r3, [r0, #0]
 8006774:	4a09      	ldr	r2, [pc, #36]	@ (800679c <HAL_RTC_WaitForSynchro+0x2c>)
 8006776:	60da      	str	r2, [r3, #12]
{
 8006778:	4604      	mov	r4, r0

  /* Get tick */
  tickstart = HAL_GetTick();
 800677a:	f7fe fc37 	bl	8004fec <HAL_GetTick>
 800677e:	4605      	mov	r5, r0

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006780:	6823      	ldr	r3, [r4, #0]
 8006782:	68db      	ldr	r3, [r3, #12]
 8006784:	069b      	lsls	r3, r3, #26
 8006786:	d501      	bpl.n	800678c <HAL_RTC_WaitForSynchro+0x1c>
    {
      return HAL_TIMEOUT;
    }
  }

  return HAL_OK;
 8006788:	2000      	movs	r0, #0
}
 800678a:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800678c:	f7fe fc2e 	bl	8004fec <HAL_GetTick>
 8006790:	1b40      	subs	r0, r0, r5
 8006792:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8006796:	d9f3      	bls.n	8006780 <HAL_RTC_WaitForSynchro+0x10>
      return HAL_TIMEOUT;
 8006798:	2003      	movs	r0, #3
 800679a:	e7f6      	b.n	800678a <HAL_RTC_WaitForSynchro+0x1a>
 800679c:	0001ff5f 	.word	0x0001ff5f

080067a0 <RTC_EnterInitMode>:
{
  uint32_t tickstart = 0U;
  HAL_StatusTypeDef status = HAL_OK;

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80067a0:	6803      	ldr	r3, [r0, #0]
{
 80067a2:	b570      	push	{r4, r5, r6, lr}
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80067a4:	68dc      	ldr	r4, [r3, #12]
 80067a6:	f014 0440 	ands.w	r4, r4, #64	@ 0x40
{
 80067aa:	4605      	mov	r5, r0
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80067ac:	d117      	bne.n	80067de <RTC_EnterInitMode+0x3e>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80067ae:	68da      	ldr	r2, [r3, #12]
 80067b0:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80067b4:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80067b6:	f7fe fc19 	bl	8004fec <HAL_GetTick>
 80067ba:	4606      	mov	r6, r0

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80067bc:	682b      	ldr	r3, [r5, #0]
 80067be:	68db      	ldr	r3, [r3, #12]
 80067c0:	065b      	lsls	r3, r3, #25
 80067c2:	d400      	bmi.n	80067c6 <RTC_EnterInitMode+0x26>
 80067c4:	b10c      	cbz	r4, 80067ca <RTC_EnterInitMode+0x2a>
      }
    }
  }

  return status;
}
 80067c6:	4620      	mov	r0, r4
 80067c8:	bd70      	pop	{r4, r5, r6, pc}
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80067ca:	f7fe fc0f 	bl	8004fec <HAL_GetTick>
 80067ce:	1b80      	subs	r0, r0, r6
 80067d0:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
        hrtc->State = HAL_RTC_STATE_ERROR;
 80067d4:	bf82      	ittt	hi
 80067d6:	2304      	movhi	r3, #4
 80067d8:	776b      	strbhi	r3, [r5, #29]
        status = HAL_ERROR;
 80067da:	2401      	movhi	r4, #1
 80067dc:	e7ee      	b.n	80067bc <RTC_EnterInitMode+0x1c>
  HAL_StatusTypeDef status = HAL_OK;
 80067de:	2400      	movs	r4, #0
 80067e0:	e7f1      	b.n	80067c6 <RTC_EnterInitMode+0x26>

080067e2 <RTC_ExitInitMode>:
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
  HAL_StatusTypeDef status = HAL_OK;

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80067e2:	6803      	ldr	r3, [r0, #0]
 80067e4:	68da      	ldr	r2, [r3, #12]
 80067e6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
{
 80067ea:	b510      	push	{r4, lr}
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80067ec:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80067ee:	689b      	ldr	r3, [r3, #8]
 80067f0:	069b      	lsls	r3, r3, #26
{
 80067f2:	4604      	mov	r4, r0
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80067f4:	d501      	bpl.n	80067fa <RTC_ExitInitMode+0x18>
  HAL_StatusTypeDef status = HAL_OK;
 80067f6:	2000      	movs	r0, #0
      status = HAL_ERROR;
    }
  }

  return status;
}
 80067f8:	bd10      	pop	{r4, pc}
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80067fa:	f7ff ffb9 	bl	8006770 <HAL_RTC_WaitForSynchro>
 80067fe:	2800      	cmp	r0, #0
 8006800:	d0f9      	beq.n	80067f6 <RTC_ExitInitMode+0x14>
      hrtc->State = HAL_RTC_STATE_ERROR;
 8006802:	2304      	movs	r3, #4
 8006804:	7763      	strb	r3, [r4, #29]
      status = HAL_ERROR;
 8006806:	2001      	movs	r0, #1
 8006808:	e7f6      	b.n	80067f8 <RTC_ExitInitMode+0x16>

0800680a <HAL_RTC_Init>:
{
 800680a:	b510      	push	{r4, lr}
  if (hrtc == NULL)
 800680c:	4604      	mov	r4, r0
 800680e:	2800      	cmp	r0, #0
 8006810:	d041      	beq.n	8006896 <HAL_RTC_Init+0x8c>
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8006812:	7f43      	ldrb	r3, [r0, #29]
 8006814:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8006818:	b913      	cbnz	r3, 8006820 <HAL_RTC_Init+0x16>
    hrtc->Lock = HAL_UNLOCKED;
 800681a:	7702      	strb	r2, [r0, #28]
    HAL_RTC_MspInit(hrtc);
 800681c:	f7fe f8ee 	bl	80049fc <HAL_RTC_MspInit>
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006820:	2302      	movs	r3, #2
 8006822:	7763      	strb	r3, [r4, #29]
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8006824:	6823      	ldr	r3, [r4, #0]
 8006826:	68da      	ldr	r2, [r3, #12]
 8006828:	06d2      	lsls	r2, r2, #27
 800682a:	d503      	bpl.n	8006834 <HAL_RTC_Init+0x2a>
    hrtc->State = HAL_RTC_STATE_READY;
 800682c:	2301      	movs	r3, #1
 800682e:	7763      	strb	r3, [r4, #29]
 8006830:	2000      	movs	r0, #0
}
 8006832:	bd10      	pop	{r4, pc}
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006834:	22ca      	movs	r2, #202	@ 0xca
 8006836:	625a      	str	r2, [r3, #36]	@ 0x24
 8006838:	2253      	movs	r2, #83	@ 0x53
 800683a:	625a      	str	r2, [r3, #36]	@ 0x24
    status = RTC_EnterInitMode(hrtc);
 800683c:	4620      	mov	r0, r4
 800683e:	f7ff ffaf 	bl	80067a0 <RTC_EnterInitMode>
    if (status == HAL_OK)
 8006842:	bb10      	cbnz	r0, 800688a <HAL_RTC_Init+0x80>
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8006844:	6823      	ldr	r3, [r4, #0]
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8006846:	6920      	ldr	r0, [r4, #16]
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8006848:	689a      	ldr	r2, [r3, #8]
 800684a:	f422 02e0 	bic.w	r2, r2, #7340032	@ 0x700000
 800684e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006852:	609a      	str	r2, [r3, #8]
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8006854:	6862      	ldr	r2, [r4, #4]
 8006856:	6899      	ldr	r1, [r3, #8]
 8006858:	4302      	orrs	r2, r0
 800685a:	6960      	ldr	r0, [r4, #20]
 800685c:	4302      	orrs	r2, r0
 800685e:	430a      	orrs	r2, r1
 8006860:	609a      	str	r2, [r3, #8]
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8006862:	68e2      	ldr	r2, [r4, #12]
 8006864:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8006866:	691a      	ldr	r2, [r3, #16]
 8006868:	68a1      	ldr	r1, [r4, #8]
 800686a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800686e:	611a      	str	r2, [r3, #16]
      status = RTC_ExitInitMode(hrtc);
 8006870:	4620      	mov	r0, r4
 8006872:	f7ff ffb6 	bl	80067e2 <RTC_ExitInitMode>
    if (status == HAL_OK)
 8006876:	b940      	cbnz	r0, 800688a <HAL_RTC_Init+0x80>
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8006878:	6823      	ldr	r3, [r4, #0]
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800687a:	69a1      	ldr	r1, [r4, #24]
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 800687c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800687e:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8006882:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8006884:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006886:	430a      	orrs	r2, r1
 8006888:	641a      	str	r2, [r3, #64]	@ 0x40
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800688a:	6823      	ldr	r3, [r4, #0]
 800688c:	22ff      	movs	r2, #255	@ 0xff
 800688e:	625a      	str	r2, [r3, #36]	@ 0x24
  if (status == HAL_OK)
 8006890:	2800      	cmp	r0, #0
 8006892:	d0cb      	beq.n	800682c <HAL_RTC_Init+0x22>
 8006894:	e7cd      	b.n	8006832 <HAL_RTC_Init+0x28>
    return HAL_ERROR;
 8006896:	2001      	movs	r0, #1
 8006898:	e7cb      	b.n	8006832 <HAL_RTC_Init+0x28>

0800689a <RTC_ByteToBcd2>:
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
  uint32_t bcdhigh = 0U;
 800689a:	2300      	movs	r3, #0

  while (number >= 10U)
 800689c:	2809      	cmp	r0, #9
 800689e:	d803      	bhi.n	80068a8 <RTC_ByteToBcd2+0xe>
  {
    bcdhigh++;
    number -= 10U;
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 80068a0:	ea40 1003 	orr.w	r0, r0, r3, lsl #4
}
 80068a4:	b2c0      	uxtb	r0, r0
 80068a6:	4770      	bx	lr
    number -= 10U;
 80068a8:	380a      	subs	r0, #10
    bcdhigh++;
 80068aa:	3301      	adds	r3, #1
    number -= 10U;
 80068ac:	b2c0      	uxtb	r0, r0
 80068ae:	e7f5      	b.n	800689c <RTC_ByteToBcd2+0x2>

080068b0 <HAL_RTC_SetTime>:
{
 80068b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(hrtc);
 80068b4:	7f03      	ldrb	r3, [r0, #28]
 80068b6:	2b01      	cmp	r3, #1
{
 80068b8:	4606      	mov	r6, r0
 80068ba:	460f      	mov	r7, r1
 80068bc:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(hrtc);
 80068c0:	d041      	beq.n	8006946 <HAL_RTC_SetTime+0x96>
 80068c2:	2301      	movs	r3, #1
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80068c4:	6831      	ldr	r1, [r6, #0]
  __HAL_LOCK(hrtc);
 80068c6:	7733      	strb	r3, [r6, #28]
  hrtc->State = HAL_RTC_STATE_BUSY;
 80068c8:	7770      	strb	r0, [r6, #29]
  if (Format == RTC_FORMAT_BIN)
 80068ca:	7838      	ldrb	r0, [r7, #0]
 80068cc:	787d      	ldrb	r5, [r7, #1]
 80068ce:	78bc      	ldrb	r4, [r7, #2]
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80068d0:	688b      	ldr	r3, [r1, #8]
  if (Format == RTC_FORMAT_BIN)
 80068d2:	2a00      	cmp	r2, #0
 80068d4:	d139      	bne.n	800694a <HAL_RTC_SetTime+0x9a>
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80068d6:	f013 0340 	ands.w	r3, r3, #64	@ 0x40
      sTime->TimeFormat = 0x00U;
 80068da:	bf08      	it	eq
 80068dc:	70fb      	strbeq	r3, [r7, #3]
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80068de:	f7ff ffdc 	bl	800689a <RTC_ByteToBcd2>
 80068e2:	4680      	mov	r8, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80068e4:	4628      	mov	r0, r5
 80068e6:	f7ff ffd8 	bl	800689a <RTC_ByteToBcd2>
 80068ea:	4602      	mov	r2, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 80068ec:	4620      	mov	r0, r4
 80068ee:	f7ff ffd4 	bl	800689a <RTC_ByteToBcd2>
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 80068f2:	78fb      	ldrb	r3, [r7, #3]
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80068f4:	ea40 5383 	orr.w	r3, r0, r3, lsl #22
 80068f8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80068fc:	ea43 2402 	orr.w	r4, r3, r2, lsl #8
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006900:	23ca      	movs	r3, #202	@ 0xca
 8006902:	624b      	str	r3, [r1, #36]	@ 0x24
 8006904:	2353      	movs	r3, #83	@ 0x53
 8006906:	624b      	str	r3, [r1, #36]	@ 0x24
  status = RTC_EnterInitMode(hrtc);
 8006908:	4630      	mov	r0, r6
 800690a:	f7ff ff49 	bl	80067a0 <RTC_EnterInitMode>
  if (status == HAL_OK)
 800690e:	b9a8      	cbnz	r0, 800693c <HAL_RTC_SetTime+0x8c>
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8006910:	6832      	ldr	r2, [r6, #0]
 8006912:	f004 347f 	and.w	r4, r4, #2139062143	@ 0x7f7f7f7f
 8006916:	f024 44fe 	bic.w	r4, r4, #2130706432	@ 0x7f000000
 800691a:	6014      	str	r4, [r2, #0]
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800691c:	6893      	ldr	r3, [r2, #8]
 800691e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006922:	6093      	str	r3, [r2, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8006924:	e9d7 3003 	ldrd	r3, r0, [r7, #12]
 8006928:	6891      	ldr	r1, [r2, #8]
 800692a:	4303      	orrs	r3, r0
 800692c:	430b      	orrs	r3, r1
 800692e:	6093      	str	r3, [r2, #8]
    status = RTC_ExitInitMode(hrtc);
 8006930:	4630      	mov	r0, r6
 8006932:	f7ff ff56 	bl	80067e2 <RTC_ExitInitMode>
  if (status == HAL_OK)
 8006936:	b908      	cbnz	r0, 800693c <HAL_RTC_SetTime+0x8c>
    hrtc->State = HAL_RTC_STATE_READY;
 8006938:	2301      	movs	r3, #1
 800693a:	7773      	strb	r3, [r6, #29]
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800693c:	6833      	ldr	r3, [r6, #0]
 800693e:	22ff      	movs	r2, #255	@ 0xff
 8006940:	625a      	str	r2, [r3, #36]	@ 0x24
  __HAL_UNLOCK(hrtc);
 8006942:	2300      	movs	r3, #0
 8006944:	7733      	strb	r3, [r6, #28]
}
 8006946:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800694a:	f013 0340 	ands.w	r3, r3, #64	@ 0x40
      sTime->TimeFormat = 0x00U;
 800694e:	bf08      	it	eq
 8006950:	70fb      	strbeq	r3, [r7, #3]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8006952:	022d      	lsls	r5, r5, #8
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8006954:	78fa      	ldrb	r2, [r7, #3]
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8006956:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800695a:	ea45 0304 	orr.w	r3, r5, r4
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800695e:	ea43 5482 	orr.w	r4, r3, r2, lsl #22
 8006962:	e7cd      	b.n	8006900 <HAL_RTC_SetTime+0x50>

08006964 <HAL_RTC_SetDate>:
{
 8006964:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hrtc);
 8006966:	7f03      	ldrb	r3, [r0, #28]
 8006968:	2b01      	cmp	r3, #1
{
 800696a:	4605      	mov	r5, r0
 800696c:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(hrtc);
 8006970:	d027      	beq.n	80069c2 <HAL_RTC_SetDate+0x5e>
 8006972:	2301      	movs	r3, #1
 8006974:	772b      	strb	r3, [r5, #28]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006976:	7768      	strb	r0, [r5, #29]
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8006978:	780e      	ldrb	r6, [r1, #0]
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800697a:	78c8      	ldrb	r0, [r1, #3]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800697c:	784c      	ldrb	r4, [r1, #1]
                  ((uint32_t) sDate->Date)                      | \
 800697e:	788f      	ldrb	r7, [r1, #2]
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8006980:	0376      	lsls	r6, r6, #13
  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8006982:	b1fa      	cbz	r2, 80069c4 <HAL_RTC_SetDate+0x60>
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8006984:	ea46 4300 	orr.w	r3, r6, r0, lsl #16
 8006988:	433b      	orrs	r3, r7
 800698a:	ea43 2404 	orr.w	r4, r3, r4, lsl #8
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800698e:	682b      	ldr	r3, [r5, #0]
 8006990:	22ca      	movs	r2, #202	@ 0xca
 8006992:	625a      	str	r2, [r3, #36]	@ 0x24
 8006994:	2253      	movs	r2, #83	@ 0x53
 8006996:	625a      	str	r2, [r3, #36]	@ 0x24
  status = RTC_EnterInitMode(hrtc);
 8006998:	4628      	mov	r0, r5
 800699a:	f7ff ff01 	bl	80067a0 <RTC_EnterInitMode>
  if (status == HAL_OK)
 800699e:	b958      	cbnz	r0, 80069b8 <HAL_RTC_SetDate+0x54>
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80069a0:	682a      	ldr	r2, [r5, #0]
 80069a2:	f024 447f 	bic.w	r4, r4, #4278190080	@ 0xff000000
 80069a6:	f024 04c0 	bic.w	r4, r4, #192	@ 0xc0
 80069aa:	6054      	str	r4, [r2, #4]
    status = RTC_ExitInitMode(hrtc);
 80069ac:	4628      	mov	r0, r5
 80069ae:	f7ff ff18 	bl	80067e2 <RTC_ExitInitMode>
  if (status == HAL_OK)
 80069b2:	b908      	cbnz	r0, 80069b8 <HAL_RTC_SetDate+0x54>
    hrtc->State = HAL_RTC_STATE_READY;
 80069b4:	2301      	movs	r3, #1
 80069b6:	776b      	strb	r3, [r5, #29]
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80069b8:	682b      	ldr	r3, [r5, #0]
 80069ba:	22ff      	movs	r2, #255	@ 0xff
 80069bc:	625a      	str	r2, [r3, #36]	@ 0x24
  __HAL_UNLOCK(hrtc);
 80069be:	2300      	movs	r3, #0
 80069c0:	772b      	strb	r3, [r5, #28]
}
 80069c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80069c4:	06e3      	lsls	r3, r4, #27
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80069c6:	bf42      	ittt	mi
 80069c8:	f024 0410 	bicmi.w	r4, r4, #16
 80069cc:	340a      	addmi	r4, #10
 80069ce:	704c      	strbmi	r4, [r1, #1]
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80069d0:	f7ff ff63 	bl	800689a <RTC_ByteToBcd2>
 80069d4:	4604      	mov	r4, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80069d6:	7848      	ldrb	r0, [r1, #1]
 80069d8:	f7ff ff5f 	bl	800689a <RTC_ByteToBcd2>
 80069dc:	4602      	mov	r2, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 80069de:	4638      	mov	r0, r7
 80069e0:	f7ff ff5b 	bl	800689a <RTC_ByteToBcd2>
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80069e4:	ea40 0306 	orr.w	r3, r0, r6
 80069e8:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80069ec:	ea43 2402 	orr.w	r4, r3, r2, lsl #8
 80069f0:	e7cd      	b.n	800698e <HAL_RTC_SetDate+0x2a>

080069f2 <RTC_Bcd2ToByte>:
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
  uint32_t tens = 0U;
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 80069f2:	0903      	lsrs	r3, r0, #4
 80069f4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 80069f8:	f000 000f 	and.w	r0, r0, #15
 80069fc:	eb00 0043 	add.w	r0, r0, r3, lsl #1
}
 8006a00:	b2c0      	uxtb	r0, r0
 8006a02:	4770      	bx	lr

08006a04 <HAL_RTC_GetTime>:
{
 8006a04:	b538      	push	{r3, r4, r5, lr}
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8006a06:	6803      	ldr	r3, [r0, #0]
 8006a08:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8006a0a:	6048      	str	r0, [r1, #4]
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8006a0c:	6918      	ldr	r0, [r3, #16]
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8006a0e:	681b      	ldr	r3, [r3, #0]
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8006a10:	f3c0 000e 	ubfx	r0, r0, #0, #15
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8006a14:	f3c3 2506 	ubfx	r5, r3, #8, #7
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8006a18:	f003 047f 	and.w	r4, r3, #127	@ 0x7f
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8006a1c:	6088      	str	r0, [r1, #8]
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8006a1e:	f3c3 4005 	ubfx	r0, r3, #16, #6
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8006a22:	f3c3 5380 	ubfx	r3, r3, #22, #1
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8006a26:	7008      	strb	r0, [r1, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8006a28:	704d      	strb	r5, [r1, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8006a2a:	708c      	strb	r4, [r1, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8006a2c:	70cb      	strb	r3, [r1, #3]
  if (Format == RTC_FORMAT_BIN)
 8006a2e:	b952      	cbnz	r2, 8006a46 <HAL_RTC_GetTime+0x42>
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8006a30:	f7ff ffdf 	bl	80069f2 <RTC_Bcd2ToByte>
 8006a34:	7008      	strb	r0, [r1, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8006a36:	4628      	mov	r0, r5
 8006a38:	f7ff ffdb 	bl	80069f2 <RTC_Bcd2ToByte>
 8006a3c:	7048      	strb	r0, [r1, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8006a3e:	4620      	mov	r0, r4
 8006a40:	f7ff ffd7 	bl	80069f2 <RTC_Bcd2ToByte>
 8006a44:	7088      	strb	r0, [r1, #2]
}
 8006a46:	2000      	movs	r0, #0
 8006a48:	bd38      	pop	{r3, r4, r5, pc}

08006a4a <HAL_RTC_GetDate>:
{
 8006a4a:	b538      	push	{r3, r4, r5, lr}
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8006a4c:	6803      	ldr	r3, [r0, #0]
 8006a4e:	685b      	ldr	r3, [r3, #4]
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8006a50:	f3c3 4007 	ubfx	r0, r3, #16, #8
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8006a54:	f3c3 2504 	ubfx	r5, r3, #8, #5
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8006a58:	f003 043f 	and.w	r4, r3, #63	@ 0x3f
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8006a5c:	f3c3 3342 	ubfx	r3, r3, #13, #3
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8006a60:	70c8      	strb	r0, [r1, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8006a62:	704d      	strb	r5, [r1, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8006a64:	708c      	strb	r4, [r1, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8006a66:	700b      	strb	r3, [r1, #0]
  if (Format == RTC_FORMAT_BIN)
 8006a68:	b952      	cbnz	r2, 8006a80 <HAL_RTC_GetDate+0x36>
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8006a6a:	f7ff ffc2 	bl	80069f2 <RTC_Bcd2ToByte>
 8006a6e:	70c8      	strb	r0, [r1, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8006a70:	4628      	mov	r0, r5
 8006a72:	f7ff ffbe 	bl	80069f2 <RTC_Bcd2ToByte>
 8006a76:	7048      	strb	r0, [r1, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8006a78:	4620      	mov	r0, r4
 8006a7a:	f7ff ffba 	bl	80069f2 <RTC_Bcd2ToByte>
 8006a7e:	7088      	strb	r0, [r1, #2]
}
 8006a80:	2000      	movs	r0, #0
 8006a82:	bd38      	pop	{r3, r4, r5, pc}

08006a84 <HAL_RTCEx_BKUPWrite>:
  uint32_t tmp = 0U;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) &(hrtc->Instance->BKP0R);
 8006a84:	6803      	ldr	r3, [r0, #0]
 8006a86:	3350      	adds	r3, #80	@ 0x50
  tmp += (BackupRegister * 4U);

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8006a88:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
}
 8006a8c:	4770      	bx	lr

08006a8e <HAL_RTCEx_BKUPRead>:
  uint32_t tmp = 0U;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) &(hrtc->Instance->BKP0R);
 8006a8e:	6803      	ldr	r3, [r0, #0]
 8006a90:	3350      	adds	r3, #80	@ 0x50
  tmp += (BackupRegister * 4U);

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8006a92:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
}
 8006a96:	4770      	bx	lr

08006a98 <SPI_WaitFlagStateUntilTimeout.constprop.0>:
  * @param  State flag state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 8006a98:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006a9a:	460e      	mov	r6, r1
 8006a9c:	4614      	mov	r4, r2
 8006a9e:	4605      	mov	r5, r0
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006aa0:	f7fe faa4 	bl	8004fec <HAL_GetTick>
 8006aa4:	4434      	add	r4, r6
 8006aa6:	1a24      	subs	r4, r4, r0
  tmp_tickstart = HAL_GetTick();
 8006aa8:	f7fe faa0 	bl	8004fec <HAL_GetTick>

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006aac:	4b22      	ldr	r3, [pc, #136]	@ (8006b38 <SPI_WaitFlagStateUntilTimeout.constprop.0+0xa0>)
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 8006ab4:	4363      	muls	r3, r4
  tmp_tickstart = HAL_GetTick();
 8006ab6:	4607      	mov	r7, r0
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006ab8:	9301      	str	r3, [sp, #4]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006aba:	682a      	ldr	r2, [r5, #0]
 8006abc:	6890      	ldr	r0, [r2, #8]
 8006abe:	f010 0080 	ands.w	r0, r0, #128	@ 0x80
 8006ac2:	d02d      	beq.n	8006b20 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x88>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006ac4:	1c73      	adds	r3, r6, #1
 8006ac6:	d0f9      	beq.n	8006abc <SPI_WaitFlagStateUntilTimeout.constprop.0+0x24>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006ac8:	f7fe fa90 	bl	8004fec <HAL_GetTick>
 8006acc:	1bc0      	subs	r0, r0, r7
 8006ace:	42a0      	cmp	r0, r4
 8006ad0:	d328      	bcc.n	8006b24 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x8c>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006ad2:	682b      	ldr	r3, [r5, #0]
 8006ad4:	685a      	ldr	r2, [r3, #4]
 8006ad6:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006ada:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006adc:	686a      	ldr	r2, [r5, #4]
 8006ade:	f5b2 7f82 	cmp.w	r2, #260	@ 0x104
 8006ae2:	d10a      	bne.n	8006afa <SPI_WaitFlagStateUntilTimeout.constprop.0+0x62>
 8006ae4:	68aa      	ldr	r2, [r5, #8]
 8006ae6:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
 8006aea:	d002      	beq.n	8006af2 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x5a>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006aec:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 8006af0:	d103      	bne.n	8006afa <SPI_WaitFlagStateUntilTimeout.constprop.0+0x62>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006af2:	681a      	ldr	r2, [r3, #0]
 8006af4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006af8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006afa:	6aaa      	ldr	r2, [r5, #40]	@ 0x28
 8006afc:	f5b2 5f00 	cmp.w	r2, #8192	@ 0x2000
 8006b00:	d107      	bne.n	8006b12 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x7a>
        {
          SPI_RESET_CRC(hspi);
 8006b02:	681a      	ldr	r2, [r3, #0]
 8006b04:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006b08:	601a      	str	r2, [r3, #0]
 8006b0a:	681a      	ldr	r2, [r3, #0]
 8006b0c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006b10:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006b12:	2301      	movs	r3, #1
 8006b14:	f885 305d 	strb.w	r3, [r5, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006b18:	2300      	movs	r3, #0
 8006b1a:	f885 305c 	strb.w	r3, [r5, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8006b1e:	2003      	movs	r0, #3
      count--;
    }
  }

  return HAL_OK;
}
 8006b20:	b003      	add	sp, #12
 8006b22:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (count == 0U)
 8006b24:	9a01      	ldr	r2, [sp, #4]
      count--;
 8006b26:	9b01      	ldr	r3, [sp, #4]
      if (count == 0U)
 8006b28:	2a00      	cmp	r2, #0
      count--;
 8006b2a:	f103 33ff 	add.w	r3, r3, #4294967295
 8006b2e:	9301      	str	r3, [sp, #4]
 8006b30:	bf08      	it	eq
 8006b32:	4614      	moveq	r4, r2
 8006b34:	e7c1      	b.n	8006aba <SPI_WaitFlagStateUntilTimeout.constprop.0+0x22>
 8006b36:	bf00      	nop
 8006b38:	20000014 	.word	0x20000014

08006b3c <SPI_WaitFifoStateUntilTimeout.constprop.0>:
  * @param  State Fifo state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8006b3c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006b40:	461c      	mov	r4, r3
{
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8006b42:	2300      	movs	r3, #0
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8006b44:	4617      	mov	r7, r2
  __IO uint8_t  tmpreg8 = 0;
 8006b46:	f88d 3003 	strb.w	r3, [sp, #3]
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8006b4a:	4605      	mov	r5, r0
 8006b4c:	460e      	mov	r6, r1

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8006b4e:	f7fe fa4d 	bl	8004fec <HAL_GetTick>
 8006b52:	443c      	add	r4, r7
 8006b54:	1a24      	subs	r4, r4, r0
  tmp_tickstart = HAL_GetTick();
 8006b56:	f7fe fa49 	bl	8004fec <HAL_GetTick>

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006b5a:	4b29      	ldr	r3, [pc, #164]	@ (8006c00 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xc4>)
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8006b5c:	f8d5 9000 	ldr.w	r9, [r5]
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	2223      	movs	r2, #35	@ 0x23
 8006b64:	4353      	muls	r3, r2
 8006b66:	0d1b      	lsrs	r3, r3, #20
 8006b68:	4363      	muls	r3, r4
  tmp_tickstart = HAL_GetTick();
 8006b6a:	4680      	mov	r8, r0
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006b6c:	9301      	str	r3, [sp, #4]

  while ((hspi->Instance->SR & Fifo) != State)
 8006b6e:	682a      	ldr	r2, [r5, #0]
 8006b70:	6890      	ldr	r0, [r2, #8]
 8006b72:	4030      	ands	r0, r6
 8006b74:	d038      	beq.n	8006be8 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xac>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8006b76:	f5b6 6fc0 	cmp.w	r6, #1536	@ 0x600
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8006b7a:	bf01      	itttt	eq
 8006b7c:	f899 300c 	ldrbeq.w	r3, [r9, #12]
 8006b80:	b2db      	uxtbeq	r3, r3
 8006b82:	f88d 3003 	strbeq.w	r3, [sp, #3]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8006b86:	f89d 3003 	ldrbeq.w	r3, [sp, #3]
    }

    if (Timeout != HAL_MAX_DELAY)
 8006b8a:	1c7b      	adds	r3, r7, #1
 8006b8c:	d0f0      	beq.n	8006b70 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x34>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006b8e:	f7fe fa2d 	bl	8004fec <HAL_GetTick>
 8006b92:	eba0 0008 	sub.w	r0, r0, r8
 8006b96:	42a0      	cmp	r0, r4
 8006b98:	d329      	bcc.n	8006bee <SPI_WaitFifoStateUntilTimeout.constprop.0+0xb2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006b9a:	682b      	ldr	r3, [r5, #0]
 8006b9c:	685a      	ldr	r2, [r3, #4]
 8006b9e:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006ba2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006ba4:	686a      	ldr	r2, [r5, #4]
 8006ba6:	f5b2 7f82 	cmp.w	r2, #260	@ 0x104
 8006baa:	d10a      	bne.n	8006bc2 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x86>
 8006bac:	68aa      	ldr	r2, [r5, #8]
 8006bae:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
 8006bb2:	d002      	beq.n	8006bba <SPI_WaitFifoStateUntilTimeout.constprop.0+0x7e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006bb4:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 8006bb8:	d103      	bne.n	8006bc2 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x86>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006bba:	681a      	ldr	r2, [r3, #0]
 8006bbc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006bc0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006bc2:	6aaa      	ldr	r2, [r5, #40]	@ 0x28
 8006bc4:	f5b2 5f00 	cmp.w	r2, #8192	@ 0x2000
 8006bc8:	d107      	bne.n	8006bda <SPI_WaitFifoStateUntilTimeout.constprop.0+0x9e>
        {
          SPI_RESET_CRC(hspi);
 8006bca:	681a      	ldr	r2, [r3, #0]
 8006bcc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006bd0:	601a      	str	r2, [r3, #0]
 8006bd2:	681a      	ldr	r2, [r3, #0]
 8006bd4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006bd8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006bda:	2301      	movs	r3, #1
 8006bdc:	f885 305d 	strb.w	r3, [r5, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006be0:	2300      	movs	r3, #0
 8006be2:	f885 305c 	strb.w	r3, [r5, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8006be6:	2003      	movs	r0, #3
      count--;
    }
  }

  return HAL_OK;
}
 8006be8:	b003      	add	sp, #12
 8006bea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      if (count == 0U)
 8006bee:	9a01      	ldr	r2, [sp, #4]
      count--;
 8006bf0:	9b01      	ldr	r3, [sp, #4]
      if (count == 0U)
 8006bf2:	2a00      	cmp	r2, #0
      count--;
 8006bf4:	f103 33ff 	add.w	r3, r3, #4294967295
 8006bf8:	9301      	str	r3, [sp, #4]
 8006bfa:	bf08      	it	eq
 8006bfc:	4614      	moveq	r4, r2
 8006bfe:	e7b6      	b.n	8006b6e <SPI_WaitFifoStateUntilTimeout.constprop.0+0x32>
 8006c00:	20000014 	.word	0x20000014

08006c04 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006c04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006c06:	6843      	ldr	r3, [r0, #4]
 8006c08:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
{
 8006c0c:	4604      	mov	r4, r0
 8006c0e:	460e      	mov	r6, r1
 8006c10:	4617      	mov	r7, r2
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006c12:	d10b      	bne.n	8006c2c <SPI_EndRxTransaction+0x28>
 8006c14:	6883      	ldr	r3, [r0, #8]
 8006c16:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006c1a:	d002      	beq.n	8006c22 <SPI_EndRxTransaction+0x1e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006c1c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006c20:	d104      	bne.n	8006c2c <SPI_EndRxTransaction+0x28>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006c22:	6822      	ldr	r2, [r4, #0]
 8006c24:	6813      	ldr	r3, [r2, #0]
 8006c26:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006c2a:	6013      	str	r3, [r2, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006c2c:	463a      	mov	r2, r7
 8006c2e:	4631      	mov	r1, r6
 8006c30:	4620      	mov	r0, r4
 8006c32:	f7ff ff31 	bl	8006a98 <SPI_WaitFlagStateUntilTimeout.constprop.0>
 8006c36:	4605      	mov	r5, r0
 8006c38:	b128      	cbz	r0, 8006c46 <SPI_EndRxTransaction+0x42>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006c3a:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8006c3c:	f043 0320 	orr.w	r3, r3, #32
 8006c40:	6623      	str	r3, [r4, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006c42:	2503      	movs	r5, #3
 8006c44:	e013      	b.n	8006c6e <SPI_EndRxTransaction+0x6a>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006c46:	6863      	ldr	r3, [r4, #4]
 8006c48:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006c4c:	d10f      	bne.n	8006c6e <SPI_EndRxTransaction+0x6a>
 8006c4e:	68a3      	ldr	r3, [r4, #8]
 8006c50:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006c54:	d002      	beq.n	8006c5c <SPI_EndRxTransaction+0x58>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006c56:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006c5a:	d108      	bne.n	8006c6e <SPI_EndRxTransaction+0x6a>
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006c5c:	463b      	mov	r3, r7
 8006c5e:	4632      	mov	r2, r6
 8006c60:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8006c64:	4620      	mov	r0, r4
 8006c66:	f7ff ff69 	bl	8006b3c <SPI_WaitFifoStateUntilTimeout.constprop.0>
 8006c6a:	2800      	cmp	r0, #0
 8006c6c:	d1e5      	bne.n	8006c3a <SPI_EndRxTransaction+0x36>
      return HAL_TIMEOUT;
    }
  }
  return HAL_OK;
}
 8006c6e:	4628      	mov	r0, r5
 8006c70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006c72 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006c72:	b570      	push	{r4, r5, r6, lr}
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006c74:	4613      	mov	r3, r2
{
 8006c76:	460d      	mov	r5, r1
 8006c78:	4616      	mov	r6, r2
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006c7a:	460a      	mov	r2, r1
 8006c7c:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
{
 8006c80:	4604      	mov	r4, r0
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006c82:	f7ff ff5b 	bl	8006b3c <SPI_WaitFifoStateUntilTimeout.constprop.0>
 8006c86:	b128      	cbz	r0, 8006c94 <SPI_EndRxTxTransaction+0x22>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006c88:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8006c8a:	f043 0320 	orr.w	r3, r3, #32
 8006c8e:	6623      	str	r3, [r4, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006c90:	2003      	movs	r0, #3
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  return HAL_OK;
}
 8006c92:	bd70      	pop	{r4, r5, r6, pc}
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006c94:	4632      	mov	r2, r6
 8006c96:	4629      	mov	r1, r5
 8006c98:	4620      	mov	r0, r4
 8006c9a:	f7ff fefd 	bl	8006a98 <SPI_WaitFlagStateUntilTimeout.constprop.0>
 8006c9e:	2800      	cmp	r0, #0
 8006ca0:	d1f2      	bne.n	8006c88 <SPI_EndRxTxTransaction+0x16>
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006ca2:	4633      	mov	r3, r6
 8006ca4:	462a      	mov	r2, r5
 8006ca6:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8006caa:	4620      	mov	r0, r4
 8006cac:	f7ff ff46 	bl	8006b3c <SPI_WaitFifoStateUntilTimeout.constprop.0>
 8006cb0:	2800      	cmp	r0, #0
 8006cb2:	d0ee      	beq.n	8006c92 <SPI_EndRxTxTransaction+0x20>
 8006cb4:	e7e8      	b.n	8006c88 <SPI_EndRxTxTransaction+0x16>

08006cb6 <HAL_SPI_Init>:
{
 8006cb6:	b570      	push	{r4, r5, r6, lr}
  if (hspi == NULL)
 8006cb8:	4604      	mov	r4, r0
 8006cba:	2800      	cmp	r0, #0
 8006cbc:	d067      	beq.n	8006d8e <HAL_SPI_Init+0xd8>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006cbe:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d15d      	bne.n	8006d80 <HAL_SPI_Init+0xca>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006cc4:	6842      	ldr	r2, [r0, #4]
 8006cc6:	f5b2 7f82 	cmp.w	r2, #260	@ 0x104
 8006cca:	d000      	beq.n	8006cce <HAL_SPI_Init+0x18>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006ccc:	61c3      	str	r3, [r0, #28]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006cce:	2300      	movs	r3, #0
 8006cd0:	62a3      	str	r3, [r4, #40]	@ 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8006cd2:	f894 305d 	ldrb.w	r3, [r4, #93]	@ 0x5d
 8006cd6:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8006cda:	b923      	cbnz	r3, 8006ce6 <HAL_SPI_Init+0x30>
    hspi->Lock = HAL_UNLOCKED;
 8006cdc:	f884 205c 	strb.w	r2, [r4, #92]	@ 0x5c
    HAL_SPI_MspInit(hspi);
 8006ce0:	4620      	mov	r0, r4
 8006ce2:	f7fd fe9f 	bl	8004a24 <HAL_SPI_MspInit>
  __HAL_SPI_DISABLE(hspi);
 8006ce6:	6822      	ldr	r2, [r4, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006ce8:	68e0      	ldr	r0, [r4, #12]
  hspi->State = HAL_SPI_STATE_BUSY;
 8006cea:	2302      	movs	r3, #2
 8006cec:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
  __HAL_SPI_DISABLE(hspi);
 8006cf0:	6813      	ldr	r3, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006cf2:	f5b0 6fe0 	cmp.w	r0, #1792	@ 0x700
  __HAL_SPI_DISABLE(hspi);
 8006cf6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006cfa:	6013      	str	r3, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006cfc:	f04f 0300 	mov.w	r3, #0
 8006d00:	d942      	bls.n	8006d88 <HAL_SPI_Init+0xd2>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006d02:	461d      	mov	r5, r3
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006d04:	f5b0 6f70 	cmp.w	r0, #3840	@ 0xf00
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006d08:	bf18      	it	ne
 8006d0a:	62a3      	strne	r3, [r4, #40]	@ 0x28
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006d0c:	68a6      	ldr	r6, [r4, #8]
 8006d0e:	6863      	ldr	r3, [r4, #4]
 8006d10:	69a1      	ldr	r1, [r4, #24]
 8006d12:	f406 4604 	and.w	r6, r6, #33792	@ 0x8400
 8006d16:	f403 7382 	and.w	r3, r3, #260	@ 0x104
 8006d1a:	4333      	orrs	r3, r6
 8006d1c:	6926      	ldr	r6, [r4, #16]
 8006d1e:	f006 0602 	and.w	r6, r6, #2
 8006d22:	4333      	orrs	r3, r6
 8006d24:	6966      	ldr	r6, [r4, #20]
 8006d26:	f006 0601 	and.w	r6, r6, #1
 8006d2a:	4333      	orrs	r3, r6
 8006d2c:	f401 7600 	and.w	r6, r1, #512	@ 0x200
 8006d30:	4333      	orrs	r3, r6
 8006d32:	69e6      	ldr	r6, [r4, #28]
 8006d34:	f006 0638 	and.w	r6, r6, #56	@ 0x38
 8006d38:	4333      	orrs	r3, r6
 8006d3a:	6a26      	ldr	r6, [r4, #32]
 8006d3c:	f006 0680 	and.w	r6, r6, #128	@ 0x80
 8006d40:	4333      	orrs	r3, r6
 8006d42:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8006d44:	f406 5600 	and.w	r6, r6, #8192	@ 0x2000
 8006d48:	4333      	orrs	r3, r6
 8006d4a:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006d4c:	6b66      	ldr	r6, [r4, #52]	@ 0x34
 8006d4e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8006d50:	f006 0608 	and.w	r6, r6, #8
 8006d54:	f003 0310 	and.w	r3, r3, #16
 8006d58:	f400 6070 	and.w	r0, r0, #3840	@ 0xf00
 8006d5c:	4333      	orrs	r3, r6
 8006d5e:	0c09      	lsrs	r1, r1, #16
 8006d60:	4303      	orrs	r3, r0
 8006d62:	f001 0104 	and.w	r1, r1, #4
 8006d66:	430b      	orrs	r3, r1
 8006d68:	432b      	orrs	r3, r5
 8006d6a:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006d6c:	69d3      	ldr	r3, [r2, #28]
 8006d6e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006d72:	61d3      	str	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006d74:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 8006d76:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006d78:	6620      	str	r0, [r4, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006d7a:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
}
 8006d7e:	bd70      	pop	{r4, r5, r6, pc}
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006d80:	2300      	movs	r3, #0
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006d82:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006d86:	e7a2      	b.n	8006cce <HAL_SPI_Init+0x18>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006d88:	f44f 5580 	mov.w	r5, #4096	@ 0x1000
 8006d8c:	e7bc      	b.n	8006d08 <HAL_SPI_Init+0x52>
    return HAL_ERROR;
 8006d8e:	2001      	movs	r0, #1
 8006d90:	e7f5      	b.n	8006d7e <HAL_SPI_Init+0xc8>

08006d92 <HAL_SPI_Transmit>:
{
 8006d92:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8006d96:	461f      	mov	r7, r3
  __HAL_LOCK(hspi);
 8006d98:	f890 305c 	ldrb.w	r3, [r0, #92]	@ 0x5c
 8006d9c:	2b01      	cmp	r3, #1
{
 8006d9e:	4604      	mov	r4, r0
 8006da0:	460d      	mov	r5, r1
 8006da2:	4690      	mov	r8, r2
  __HAL_LOCK(hspi);
 8006da4:	f000 80bc 	beq.w	8006f20 <HAL_SPI_Transmit+0x18e>
 8006da8:	2301      	movs	r3, #1
 8006daa:	f880 305c 	strb.w	r3, [r0, #92]	@ 0x5c
  tickstart = HAL_GetTick();
 8006dae:	f7fe f91d 	bl	8004fec <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 8006db2:	f894 305d 	ldrb.w	r3, [r4, #93]	@ 0x5d
 8006db6:	2b01      	cmp	r3, #1
  tickstart = HAL_GetTick();
 8006db8:	4682      	mov	sl, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8006dba:	fa5f f983 	uxtb.w	r9, r3
 8006dbe:	f040 80ac 	bne.w	8006f1a <HAL_SPI_Transmit+0x188>
  if ((pData == NULL) || (Size == 0U))
 8006dc2:	2d00      	cmp	r5, #0
 8006dc4:	d069      	beq.n	8006e9a <HAL_SPI_Transmit+0x108>
 8006dc6:	f1b8 0f00 	cmp.w	r8, #0
 8006dca:	d066      	beq.n	8006e9a <HAL_SPI_Transmit+0x108>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006dcc:	2303      	movs	r3, #3
 8006dce:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006dd2:	2300      	movs	r3, #0
 8006dd4:	6623      	str	r3, [r4, #96]	@ 0x60
  hspi->RxISR       = NULL;
 8006dd6:	e9c4 3313 	strd	r3, r3, [r4, #76]	@ 0x4c
  hspi->TxXferCount = Size;
 8006dda:	f8a4 803e 	strh.w	r8, [r4, #62]	@ 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006dde:	6423      	str	r3, [r4, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8006de0:	f8a4 3044 	strh.w	r3, [r4, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8006de4:	f8a4 3046 	strh.w	r3, [r4, #70]	@ 0x46
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006de8:	68a3      	ldr	r3, [r4, #8]
    __HAL_SPI_DISABLE(hspi);
 8006dea:	6826      	ldr	r6, [r4, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006dec:	63a5      	str	r5, [r4, #56]	@ 0x38
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006dee:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
  hspi->TxXferSize  = Size;
 8006df2:	f8a4 803c 	strh.w	r8, [r4, #60]	@ 0x3c
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006df6:	d107      	bne.n	8006e08 <HAL_SPI_Transmit+0x76>
    __HAL_SPI_DISABLE(hspi);
 8006df8:	6833      	ldr	r3, [r6, #0]
 8006dfa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006dfe:	6033      	str	r3, [r6, #0]
    SPI_1LINE_TX(hspi);
 8006e00:	6833      	ldr	r3, [r6, #0]
 8006e02:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006e06:	6033      	str	r3, [r6, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006e08:	6833      	ldr	r3, [r6, #0]
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006e0a:	6862      	ldr	r2, [r4, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006e0c:	065b      	lsls	r3, r3, #25
    __HAL_SPI_ENABLE(hspi);
 8006e0e:	bf5e      	ittt	pl
 8006e10:	6833      	ldrpl	r3, [r6, #0]
 8006e12:	f043 0340 	orrpl.w	r3, r3, #64	@ 0x40
 8006e16:	6033      	strpl	r3, [r6, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006e18:	68e3      	ldr	r3, [r4, #12]
 8006e1a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006e1e:	d943      	bls.n	8006ea8 <HAL_SPI_Transmit+0x116>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006e20:	b112      	cbz	r2, 8006e28 <HAL_SPI_Transmit+0x96>
 8006e22:	f1b8 0f01 	cmp.w	r8, #1
 8006e26:	d107      	bne.n	8006e38 <HAL_SPI_Transmit+0xa6>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006e28:	f835 3b02 	ldrh.w	r3, [r5], #2
 8006e2c:	60f3      	str	r3, [r6, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006e2e:	63a5      	str	r5, [r4, #56]	@ 0x38
        hspi->TxXferCount--;
 8006e30:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8006e32:	3b01      	subs	r3, #1
 8006e34:	b29b      	uxth	r3, r3
 8006e36:	87e3      	strh	r3, [r4, #62]	@ 0x3e
    while (hspi->TxXferCount > 0U)
 8006e38:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8006e3a:	b29b      	uxth	r3, r3
 8006e3c:	b9b3      	cbnz	r3, 8006e6c <HAL_SPI_Transmit+0xda>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006e3e:	4652      	mov	r2, sl
 8006e40:	4639      	mov	r1, r7
 8006e42:	4620      	mov	r0, r4
 8006e44:	f7ff ff15 	bl	8006c72 <SPI_EndRxTxTransaction>
 8006e48:	2800      	cmp	r0, #0
 8006e4a:	d163      	bne.n	8006f14 <HAL_SPI_Transmit+0x182>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006e4c:	68a3      	ldr	r3, [r4, #8]
 8006e4e:	b933      	cbnz	r3, 8006e5e <HAL_SPI_Transmit+0xcc>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006e50:	9301      	str	r3, [sp, #4]
 8006e52:	6823      	ldr	r3, [r4, #0]
 8006e54:	68da      	ldr	r2, [r3, #12]
 8006e56:	9201      	str	r2, [sp, #4]
 8006e58:	689b      	ldr	r3, [r3, #8]
 8006e5a:	9301      	str	r3, [sp, #4]
 8006e5c:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006e5e:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8006e60:	b9db      	cbnz	r3, 8006e9a <HAL_SPI_Transmit+0x108>
    hspi->State = HAL_SPI_STATE_READY;
 8006e62:	2201      	movs	r2, #1
 8006e64:	f884 205d 	strb.w	r2, [r4, #93]	@ 0x5d
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006e68:	4699      	mov	r9, r3
 8006e6a:	e016      	b.n	8006e9a <HAL_SPI_Transmit+0x108>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006e6c:	6822      	ldr	r2, [r4, #0]
 8006e6e:	6893      	ldr	r3, [r2, #8]
 8006e70:	079d      	lsls	r5, r3, #30
 8006e72:	d505      	bpl.n	8006e80 <HAL_SPI_Transmit+0xee>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006e74:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8006e76:	f833 1b02 	ldrh.w	r1, [r3], #2
 8006e7a:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006e7c:	63a3      	str	r3, [r4, #56]	@ 0x38
 8006e7e:	e7d7      	b.n	8006e30 <HAL_SPI_Transmit+0x9e>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006e80:	f7fe f8b4 	bl	8004fec <HAL_GetTick>
 8006e84:	eba0 000a 	sub.w	r0, r0, sl
 8006e88:	42b8      	cmp	r0, r7
 8006e8a:	d3d5      	bcc.n	8006e38 <HAL_SPI_Transmit+0xa6>
 8006e8c:	1c78      	adds	r0, r7, #1
 8006e8e:	d0d3      	beq.n	8006e38 <HAL_SPI_Transmit+0xa6>
          hspi->State = HAL_SPI_STATE_READY;
 8006e90:	2301      	movs	r3, #1
 8006e92:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
          errorcode = HAL_TIMEOUT;
 8006e96:	f04f 0903 	mov.w	r9, #3
  __HAL_UNLOCK(hspi);
 8006e9a:	2300      	movs	r3, #0
 8006e9c:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
}
 8006ea0:	4648      	mov	r0, r9
 8006ea2:	b002      	add	sp, #8
 8006ea4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006ea8:	b112      	cbz	r2, 8006eb0 <HAL_SPI_Transmit+0x11e>
 8006eaa:	f1b8 0f01 	cmp.w	r8, #1
 8006eae:	d113      	bne.n	8006ed8 <HAL_SPI_Transmit+0x146>
      if (hspi->TxXferCount > 1U)
 8006eb0:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8006eb2:	b29b      	uxth	r3, r3
 8006eb4:	2b01      	cmp	r3, #1
 8006eb6:	d906      	bls.n	8006ec6 <HAL_SPI_Transmit+0x134>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006eb8:	f835 3b02 	ldrh.w	r3, [r5], #2
 8006ebc:	60f3      	str	r3, [r6, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006ebe:	63a5      	str	r5, [r4, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8006ec0:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8006ec2:	3b02      	subs	r3, #2
 8006ec4:	e006      	b.n	8006ed4 <HAL_SPI_Transmit+0x142>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006ec6:	782b      	ldrb	r3, [r5, #0]
 8006ec8:	7333      	strb	r3, [r6, #12]
        hspi->pTxBuffPtr ++;
 8006eca:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8006ecc:	3301      	adds	r3, #1
 8006ece:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->TxXferCount--;
 8006ed0:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8006ed2:	3b01      	subs	r3, #1
 8006ed4:	b29b      	uxth	r3, r3
 8006ed6:	87e3      	strh	r3, [r4, #62]	@ 0x3e
    while (hspi->TxXferCount > 0U)
 8006ed8:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8006eda:	b29b      	uxth	r3, r3
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d0ae      	beq.n	8006e3e <HAL_SPI_Transmit+0xac>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006ee0:	6822      	ldr	r2, [r4, #0]
 8006ee2:	6893      	ldr	r3, [r2, #8]
 8006ee4:	0799      	lsls	r1, r3, #30
 8006ee6:	d50c      	bpl.n	8006f02 <HAL_SPI_Transmit+0x170>
        if (hspi->TxXferCount > 1U)
 8006ee8:	8fe1      	ldrh	r1, [r4, #62]	@ 0x3e
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006eea:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
        if (hspi->TxXferCount > 1U)
 8006eec:	b289      	uxth	r1, r1
 8006eee:	2901      	cmp	r1, #1
 8006ef0:	d904      	bls.n	8006efc <HAL_SPI_Transmit+0x16a>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006ef2:	f833 1b02 	ldrh.w	r1, [r3], #2
 8006ef6:	60d1      	str	r1, [r2, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006ef8:	63a3      	str	r3, [r4, #56]	@ 0x38
 8006efa:	e7e1      	b.n	8006ec0 <HAL_SPI_Transmit+0x12e>
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006efc:	781b      	ldrb	r3, [r3, #0]
 8006efe:	7313      	strb	r3, [r2, #12]
          hspi->pTxBuffPtr++;
 8006f00:	e7e3      	b.n	8006eca <HAL_SPI_Transmit+0x138>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006f02:	f7fe f873 	bl	8004fec <HAL_GetTick>
 8006f06:	eba0 000a 	sub.w	r0, r0, sl
 8006f0a:	42b8      	cmp	r0, r7
 8006f0c:	d3e4      	bcc.n	8006ed8 <HAL_SPI_Transmit+0x146>
 8006f0e:	1c7b      	adds	r3, r7, #1
 8006f10:	d0e2      	beq.n	8006ed8 <HAL_SPI_Transmit+0x146>
 8006f12:	e7bd      	b.n	8006e90 <HAL_SPI_Transmit+0xfe>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006f14:	2320      	movs	r3, #32
 8006f16:	6623      	str	r3, [r4, #96]	@ 0x60
 8006f18:	e798      	b.n	8006e4c <HAL_SPI_Transmit+0xba>
    errorcode = HAL_BUSY;
 8006f1a:	f04f 0902 	mov.w	r9, #2
 8006f1e:	e7bc      	b.n	8006e9a <HAL_SPI_Transmit+0x108>
  __HAL_LOCK(hspi);
 8006f20:	f04f 0902 	mov.w	r9, #2
 8006f24:	e7bc      	b.n	8006ea0 <HAL_SPI_Transmit+0x10e>

08006f26 <HAL_SPI_TransmitReceive>:
{
 8006f26:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006f2a:	461e      	mov	r6, r3
  __HAL_LOCK(hspi);
 8006f2c:	f890 305c 	ldrb.w	r3, [r0, #92]	@ 0x5c
{
 8006f30:	9f08      	ldr	r7, [sp, #32]
  __HAL_LOCK(hspi);
 8006f32:	2b01      	cmp	r3, #1
{
 8006f34:	4604      	mov	r4, r0
 8006f36:	460d      	mov	r5, r1
 8006f38:	4691      	mov	r9, r2
  __HAL_LOCK(hspi);
 8006f3a:	f000 8122 	beq.w	8007182 <HAL_SPI_TransmitReceive+0x25c>
 8006f3e:	2301      	movs	r3, #1
 8006f40:	f880 305c 	strb.w	r3, [r0, #92]	@ 0x5c
  tickstart = HAL_GetTick();
 8006f44:	f7fe f852 	bl	8004fec <HAL_GetTick>
  tmp_state           = hspi->State;
 8006f48:	f894 205d 	ldrb.w	r2, [r4, #93]	@ 0x5d
  tmp_mode            = hspi->Init.Mode;
 8006f4c:	6863      	ldr	r3, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006f4e:	2a01      	cmp	r2, #1
  tickstart = HAL_GetTick();
 8006f50:	4680      	mov	r8, r0
  tmp_state           = hspi->State;
 8006f52:	b2d1      	uxtb	r1, r2
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006f54:	d00a      	beq.n	8006f6c <HAL_SPI_TransmitReceive+0x46>
 8006f56:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006f5a:	f040 8110 	bne.w	800717e <HAL_SPI_TransmitReceive+0x258>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006f5e:	68a2      	ldr	r2, [r4, #8]
 8006f60:	2a00      	cmp	r2, #0
 8006f62:	f040 810c 	bne.w	800717e <HAL_SPI_TransmitReceive+0x258>
 8006f66:	2904      	cmp	r1, #4
 8006f68:	f040 8109 	bne.w	800717e <HAL_SPI_TransmitReceive+0x258>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006f6c:	b92d      	cbnz	r5, 8006f7a <HAL_SPI_TransmitReceive+0x54>
    errorcode = HAL_ERROR;
 8006f6e:	2001      	movs	r0, #1
  __HAL_UNLOCK(hspi);
 8006f70:	2300      	movs	r3, #0
 8006f72:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
}
 8006f76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006f7a:	f1b9 0f00 	cmp.w	r9, #0
 8006f7e:	d0f6      	beq.n	8006f6e <HAL_SPI_TransmitReceive+0x48>
 8006f80:	2e00      	cmp	r6, #0
 8006f82:	d0f4      	beq.n	8006f6e <HAL_SPI_TransmitReceive+0x48>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006f84:	f894 205d 	ldrb.w	r2, [r4, #93]	@ 0x5d
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8006f88:	68e0      	ldr	r0, [r4, #12]
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006f8a:	6821      	ldr	r1, [r4, #0]
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006f8c:	f8c4 9040 	str.w	r9, [r4, #64]	@ 0x40
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006f90:	2a04      	cmp	r2, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006f92:	bf1c      	itt	ne
 8006f94:	2205      	movne	r2, #5
 8006f96:	f884 205d 	strbne.w	r2, [r4, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006f9a:	2200      	movs	r2, #0
 8006f9c:	6622      	str	r2, [r4, #96]	@ 0x60
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8006f9e:	f5b0 6fe0 	cmp.w	r0, #1792	@ 0x700
  hspi->RxXferCount = Size;
 8006fa2:	f8a4 6046 	strh.w	r6, [r4, #70]	@ 0x46
  hspi->TxXferCount = Size;
 8006fa6:	87e6      	strh	r6, [r4, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8006fa8:	e9c4 2213 	strd	r2, r2, [r4, #76]	@ 0x4c
  hspi->RxXferSize  = Size;
 8006fac:	f8a4 6044 	strh.w	r6, [r4, #68]	@ 0x44
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006fb0:	684a      	ldr	r2, [r1, #4]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006fb2:	63a5      	str	r5, [r4, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8006fb4:	87a6      	strh	r6, [r4, #60]	@ 0x3c
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8006fb6:	d801      	bhi.n	8006fbc <HAL_SPI_TransmitReceive+0x96>
 8006fb8:	2e01      	cmp	r6, #1
 8006fba:	d02e      	beq.n	800701a <HAL_SPI_TransmitReceive+0xf4>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006fbc:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006fc0:	604a      	str	r2, [r1, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006fc2:	680a      	ldr	r2, [r1, #0]
 8006fc4:	0652      	lsls	r2, r2, #25
    __HAL_SPI_ENABLE(hspi);
 8006fc6:	bf5e      	ittt	pl
 8006fc8:	680a      	ldrpl	r2, [r1, #0]
 8006fca:	f042 0240 	orrpl.w	r2, r2, #64	@ 0x40
 8006fce:	600a      	strpl	r2, [r1, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006fd0:	f5b0 6fe0 	cmp.w	r0, #1792	@ 0x700
 8006fd4:	d957      	bls.n	8007086 <HAL_SPI_TransmitReceive+0x160>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006fd6:	b10b      	cbz	r3, 8006fdc <HAL_SPI_TransmitReceive+0xb6>
 8006fd8:	2e01      	cmp	r6, #1
 8006fda:	d107      	bne.n	8006fec <HAL_SPI_TransmitReceive+0xc6>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006fdc:	f835 3b02 	ldrh.w	r3, [r5], #2
 8006fe0:	60cb      	str	r3, [r1, #12]
      hspi->TxXferCount--;
 8006fe2:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006fe4:	63a5      	str	r5, [r4, #56]	@ 0x38
      hspi->TxXferCount--;
 8006fe6:	3b01      	subs	r3, #1
 8006fe8:	b29b      	uxth	r3, r3
 8006fea:	87e3      	strh	r3, [r4, #62]	@ 0x3e
        txallowed = 1U;
 8006fec:	2501      	movs	r5, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006fee:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8006ff0:	b29b      	uxth	r3, r3
 8006ff2:	b9ab      	cbnz	r3, 8007020 <HAL_SPI_TransmitReceive+0xfa>
 8006ff4:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 8006ff8:	b29b      	uxth	r3, r3
 8006ffa:	b98b      	cbnz	r3, 8007020 <HAL_SPI_TransmitReceive+0xfa>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006ffc:	4642      	mov	r2, r8
 8006ffe:	4639      	mov	r1, r7
 8007000:	4620      	mov	r0, r4
 8007002:	f7ff fe36 	bl	8006c72 <SPI_EndRxTxTransaction>
 8007006:	2800      	cmp	r0, #0
 8007008:	f040 80b5 	bne.w	8007176 <HAL_SPI_TransmitReceive+0x250>
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800700c:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 800700e:	2b00      	cmp	r3, #0
 8007010:	d1ad      	bne.n	8006f6e <HAL_SPI_TransmitReceive+0x48>
    hspi->State = HAL_SPI_STATE_READY;
 8007012:	2301      	movs	r3, #1
 8007014:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
 8007018:	e7aa      	b.n	8006f70 <HAL_SPI_TransmitReceive+0x4a>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800701a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800701e:	e7cf      	b.n	8006fc0 <HAL_SPI_TransmitReceive+0x9a>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007020:	6821      	ldr	r1, [r4, #0]
 8007022:	688b      	ldr	r3, [r1, #8]
 8007024:	079e      	lsls	r6, r3, #30
 8007026:	d50d      	bpl.n	8007044 <HAL_SPI_TransmitReceive+0x11e>
 8007028:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 800702a:	b29b      	uxth	r3, r3
 800702c:	b153      	cbz	r3, 8007044 <HAL_SPI_TransmitReceive+0x11e>
 800702e:	b145      	cbz	r5, 8007042 <HAL_SPI_TransmitReceive+0x11c>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007030:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8007032:	f833 2b02 	ldrh.w	r2, [r3], #2
 8007036:	60ca      	str	r2, [r1, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007038:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->TxXferCount--;
 800703a:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 800703c:	3b01      	subs	r3, #1
 800703e:	b29b      	uxth	r3, r3
 8007040:	87e3      	strh	r3, [r4, #62]	@ 0x3e
        txallowed = 0U;
 8007042:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007044:	688a      	ldr	r2, [r1, #8]
 8007046:	f012 0201 	ands.w	r2, r2, #1
 800704a:	d00f      	beq.n	800706c <HAL_SPI_TransmitReceive+0x146>
 800704c:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 8007050:	b29b      	uxth	r3, r3
 8007052:	b15b      	cbz	r3, 800706c <HAL_SPI_TransmitReceive+0x146>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007054:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007056:	68c9      	ldr	r1, [r1, #12]
 8007058:	f823 1b02 	strh.w	r1, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800705c:	6423      	str	r3, [r4, #64]	@ 0x40
        hspi->RxXferCount--;
 800705e:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 8007062:	3b01      	subs	r3, #1
 8007064:	b29b      	uxth	r3, r3
 8007066:	f8a4 3046 	strh.w	r3, [r4, #70]	@ 0x46
        txallowed = 1U;
 800706a:	4615      	mov	r5, r2
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800706c:	f7fd ffbe 	bl	8004fec <HAL_GetTick>
 8007070:	eba0 0008 	sub.w	r0, r0, r8
 8007074:	42b8      	cmp	r0, r7
 8007076:	d3ba      	bcc.n	8006fee <HAL_SPI_TransmitReceive+0xc8>
 8007078:	1c78      	adds	r0, r7, #1
 800707a:	d0b8      	beq.n	8006fee <HAL_SPI_TransmitReceive+0xc8>
        hspi->State = HAL_SPI_STATE_READY;
 800707c:	2301      	movs	r3, #1
 800707e:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
        errorcode = HAL_TIMEOUT;
 8007082:	2003      	movs	r0, #3
 8007084:	e774      	b.n	8006f70 <HAL_SPI_TransmitReceive+0x4a>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007086:	b10b      	cbz	r3, 800708c <HAL_SPI_TransmitReceive+0x166>
 8007088:	2e01      	cmp	r6, #1
 800708a:	d10b      	bne.n	80070a4 <HAL_SPI_TransmitReceive+0x17e>
      if (hspi->TxXferCount > 1U)
 800708c:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 800708e:	b29b      	uxth	r3, r3
 8007090:	2b01      	cmp	r3, #1
 8007092:	d909      	bls.n	80070a8 <HAL_SPI_TransmitReceive+0x182>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007094:	f835 3b02 	ldrh.w	r3, [r5], #2
 8007098:	60cb      	str	r3, [r1, #12]
        hspi->TxXferCount -= 2U;
 800709a:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800709c:	63a5      	str	r5, [r4, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800709e:	3b02      	subs	r3, #2
        hspi->TxXferCount--;
 80070a0:	b29b      	uxth	r3, r3
 80070a2:	87e3      	strh	r3, [r4, #62]	@ 0x3e
        txallowed = 1U;
 80070a4:	2501      	movs	r5, #1
 80070a6:	e048      	b.n	800713a <HAL_SPI_TransmitReceive+0x214>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80070a8:	782b      	ldrb	r3, [r5, #0]
 80070aa:	730b      	strb	r3, [r1, #12]
        hspi->pTxBuffPtr++;
 80070ac:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80070ae:	3301      	adds	r3, #1
 80070b0:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->TxXferCount--;
 80070b2:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80070b4:	3b01      	subs	r3, #1
 80070b6:	e7f3      	b.n	80070a0 <HAL_SPI_TransmitReceive+0x17a>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80070b8:	6822      	ldr	r2, [r4, #0]
 80070ba:	6893      	ldr	r3, [r2, #8]
 80070bc:	0799      	lsls	r1, r3, #30
 80070be:	d511      	bpl.n	80070e4 <HAL_SPI_TransmitReceive+0x1be>
 80070c0:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80070c2:	b29b      	uxth	r3, r3
 80070c4:	b173      	cbz	r3, 80070e4 <HAL_SPI_TransmitReceive+0x1be>
 80070c6:	b165      	cbz	r5, 80070e2 <HAL_SPI_TransmitReceive+0x1bc>
        if (hspi->TxXferCount > 1U)
 80070c8:	8fe1      	ldrh	r1, [r4, #62]	@ 0x3e
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80070ca:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
        if (hspi->TxXferCount > 1U)
 80070cc:	b289      	uxth	r1, r1
 80070ce:	2901      	cmp	r1, #1
 80070d0:	d93d      	bls.n	800714e <HAL_SPI_TransmitReceive+0x228>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80070d2:	f833 1b02 	ldrh.w	r1, [r3], #2
 80070d6:	60d1      	str	r1, [r2, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80070d8:	63a3      	str	r3, [r4, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80070da:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80070dc:	3b02      	subs	r3, #2
 80070de:	b29b      	uxth	r3, r3
 80070e0:	87e3      	strh	r3, [r4, #62]	@ 0x3e
        txallowed = 0U;
 80070e2:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80070e4:	6822      	ldr	r2, [r4, #0]
 80070e6:	6891      	ldr	r1, [r2, #8]
 80070e8:	f011 0101 	ands.w	r1, r1, #1
 80070ec:	d01d      	beq.n	800712a <HAL_SPI_TransmitReceive+0x204>
 80070ee:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 80070f2:	b29b      	uxth	r3, r3
 80070f4:	b1cb      	cbz	r3, 800712a <HAL_SPI_TransmitReceive+0x204>
        if (hspi->RxXferCount > 1U)
 80070f6:	f8b4 0046 	ldrh.w	r0, [r4, #70]	@ 0x46
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80070fa:	6c23      	ldr	r3, [r4, #64]	@ 0x40
        if (hspi->RxXferCount > 1U)
 80070fc:	b280      	uxth	r0, r0
 80070fe:	2801      	cmp	r0, #1
 8007100:	d92d      	bls.n	800715e <HAL_SPI_TransmitReceive+0x238>
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007102:	68d0      	ldr	r0, [r2, #12]
 8007104:	f823 0b02 	strh.w	r0, [r3], #2
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8007108:	6423      	str	r3, [r4, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 800710a:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 800710e:	3b02      	subs	r3, #2
 8007110:	b29b      	uxth	r3, r3
 8007112:	f8a4 3046 	strh.w	r3, [r4, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8007116:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 800711a:	b29b      	uxth	r3, r3
 800711c:	2b01      	cmp	r3, #1
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800711e:	bf9e      	ittt	ls
 8007120:	6853      	ldrls	r3, [r2, #4]
 8007122:	f443 5380 	orrls.w	r3, r3, #4096	@ 0x1000
 8007126:	6053      	strls	r3, [r2, #4]
        txallowed = 1U;
 8007128:	460d      	mov	r5, r1
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800712a:	f7fd ff5f 	bl	8004fec <HAL_GetTick>
 800712e:	eba0 0008 	sub.w	r0, r0, r8
 8007132:	42b8      	cmp	r0, r7
 8007134:	d301      	bcc.n	800713a <HAL_SPI_TransmitReceive+0x214>
 8007136:	1c7b      	adds	r3, r7, #1
 8007138:	d1a0      	bne.n	800707c <HAL_SPI_TransmitReceive+0x156>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800713a:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 800713c:	b29b      	uxth	r3, r3
 800713e:	2b00      	cmp	r3, #0
 8007140:	d1ba      	bne.n	80070b8 <HAL_SPI_TransmitReceive+0x192>
 8007142:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 8007146:	b29b      	uxth	r3, r3
 8007148:	2b00      	cmp	r3, #0
 800714a:	d1b5      	bne.n	80070b8 <HAL_SPI_TransmitReceive+0x192>
 800714c:	e756      	b.n	8006ffc <HAL_SPI_TransmitReceive+0xd6>
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800714e:	781b      	ldrb	r3, [r3, #0]
 8007150:	7313      	strb	r3, [r2, #12]
          hspi->pTxBuffPtr++;
 8007152:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8007154:	3301      	adds	r3, #1
 8007156:	63a3      	str	r3, [r4, #56]	@ 0x38
          hspi->TxXferCount--;
 8007158:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 800715a:	3b01      	subs	r3, #1
 800715c:	e7bf      	b.n	80070de <HAL_SPI_TransmitReceive+0x1b8>
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800715e:	7b12      	ldrb	r2, [r2, #12]
 8007160:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8007162:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007164:	3301      	adds	r3, #1
 8007166:	6423      	str	r3, [r4, #64]	@ 0x40
          hspi->RxXferCount--;
 8007168:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 800716c:	3b01      	subs	r3, #1
 800716e:	b29b      	uxth	r3, r3
 8007170:	f8a4 3046 	strh.w	r3, [r4, #70]	@ 0x46
 8007174:	e7d8      	b.n	8007128 <HAL_SPI_TransmitReceive+0x202>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007176:	2320      	movs	r3, #32
 8007178:	6623      	str	r3, [r4, #96]	@ 0x60
    errorcode = HAL_ERROR;
 800717a:	2001      	movs	r0, #1
 800717c:	e746      	b.n	800700c <HAL_SPI_TransmitReceive+0xe6>
    errorcode = HAL_BUSY;
 800717e:	2002      	movs	r0, #2
 8007180:	e6f6      	b.n	8006f70 <HAL_SPI_TransmitReceive+0x4a>
  __HAL_LOCK(hspi);
 8007182:	2002      	movs	r0, #2
 8007184:	e6f7      	b.n	8006f76 <HAL_SPI_TransmitReceive+0x50>

08007186 <HAL_SPI_Receive>:
{
 8007186:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 800718a:	461f      	mov	r7, r3
  if (hspi->State != HAL_SPI_STATE_READY)
 800718c:	f890 305d 	ldrb.w	r3, [r0, #93]	@ 0x5d
 8007190:	2b01      	cmp	r3, #1
{
 8007192:	4604      	mov	r4, r0
 8007194:	468a      	mov	sl, r1
 8007196:	4690      	mov	r8, r2
  if (hspi->State != HAL_SPI_STATE_READY)
 8007198:	b2de      	uxtb	r6, r3
 800719a:	f040 80a7 	bne.w	80072ec <HAL_SPI_Receive+0x166>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800719e:	6843      	ldr	r3, [r0, #4]
 80071a0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80071a4:	d10e      	bne.n	80071c4 <HAL_SPI_Receive+0x3e>
 80071a6:	6883      	ldr	r3, [r0, #8]
 80071a8:	b963      	cbnz	r3, 80071c4 <HAL_SPI_Receive+0x3e>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80071aa:	2304      	movs	r3, #4
 80071ac:	f880 305d 	strb.w	r3, [r0, #93]	@ 0x5d
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80071b0:	4613      	mov	r3, r2
 80071b2:	9700      	str	r7, [sp, #0]
 80071b4:	460a      	mov	r2, r1
 80071b6:	f7ff feb6 	bl	8006f26 <HAL_SPI_TransmitReceive>
 80071ba:	4606      	mov	r6, r0
}
 80071bc:	4630      	mov	r0, r6
 80071be:	b002      	add	sp, #8
 80071c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  __HAL_LOCK(hspi);
 80071c4:	f894 305c 	ldrb.w	r3, [r4, #92]	@ 0x5c
 80071c8:	2b01      	cmp	r3, #1
 80071ca:	f000 8091 	beq.w	80072f0 <HAL_SPI_Receive+0x16a>
 80071ce:	2301      	movs	r3, #1
 80071d0:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
  tickstart = HAL_GetTick();
 80071d4:	f7fd ff0a 	bl	8004fec <HAL_GetTick>
 80071d8:	4681      	mov	r9, r0
  if ((pData == NULL) || (Size == 0U))
 80071da:	f1ba 0f00 	cmp.w	sl, #0
 80071de:	d075      	beq.n	80072cc <HAL_SPI_Receive+0x146>
 80071e0:	f1b8 0f00 	cmp.w	r8, #0
 80071e4:	d072      	beq.n	80072cc <HAL_SPI_Receive+0x146>
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80071e6:	2500      	movs	r5, #0
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80071e8:	2304      	movs	r3, #4
 80071ea:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
  hspi->TxISR       = NULL;
 80071ee:	e9c4 5513 	strd	r5, r5, [r4, #76]	@ 0x4c
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80071f2:	6625      	str	r5, [r4, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80071f4:	63a5      	str	r5, [r4, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80071f6:	f8a4 8046 	strh.w	r8, [r4, #70]	@ 0x46
  hspi->TxXferSize  = 0U;
 80071fa:	87a5      	strh	r5, [r4, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 80071fc:	87e5      	strh	r5, [r4, #62]	@ 0x3e
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80071fe:	6825      	ldr	r5, [r4, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007200:	68e2      	ldr	r2, [r4, #12]
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007202:	686b      	ldr	r3, [r5, #4]
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8007204:	f8c4 a040 	str.w	sl, [r4, #64]	@ 0x40
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007208:	f5b2 6fe0 	cmp.w	r2, #1792	@ 0x700
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800720c:	bf8c      	ite	hi
 800720e:	f423 5380 	bichi.w	r3, r3, #4096	@ 0x1000
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007212:	f443 5380 	orrls.w	r3, r3, #4096	@ 0x1000
  hspi->RxXferSize  = Size;
 8007216:	f8a4 8044 	strh.w	r8, [r4, #68]	@ 0x44
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800721a:	606b      	str	r3, [r5, #4]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800721c:	68a3      	ldr	r3, [r4, #8]
 800721e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007222:	d107      	bne.n	8007234 <HAL_SPI_Receive+0xae>
    __HAL_SPI_DISABLE(hspi);
 8007224:	682b      	ldr	r3, [r5, #0]
 8007226:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800722a:	602b      	str	r3, [r5, #0]
    SPI_1LINE_RX(hspi);
 800722c:	682b      	ldr	r3, [r5, #0]
 800722e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007232:	602b      	str	r3, [r5, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007234:	682b      	ldr	r3, [r5, #0]
 8007236:	065b      	lsls	r3, r3, #25
    __HAL_SPI_ENABLE(hspi);
 8007238:	bf5e      	ittt	pl
 800723a:	682b      	ldrpl	r3, [r5, #0]
 800723c:	f043 0340 	orrpl.w	r3, r3, #64	@ 0x40
 8007240:	602b      	strpl	r3, [r5, #0]
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8007242:	f5b2 6fe0 	cmp.w	r2, #1792	@ 0x700
 8007246:	d923      	bls.n	8007290 <HAL_SPI_Receive+0x10a>
    while (hspi->RxXferCount > 0U)
 8007248:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 800724c:	b29b      	uxth	r3, r3
 800724e:	b323      	cbz	r3, 800729a <HAL_SPI_Receive+0x114>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007250:	6823      	ldr	r3, [r4, #0]
 8007252:	689a      	ldr	r2, [r3, #8]
 8007254:	07d2      	lsls	r2, r2, #31
 8007256:	d53d      	bpl.n	80072d4 <HAL_SPI_Receive+0x14e>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007258:	68da      	ldr	r2, [r3, #12]
 800725a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800725c:	f823 2b02 	strh.w	r2, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007260:	6423      	str	r3, [r4, #64]	@ 0x40
        hspi->RxXferCount--;
 8007262:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 8007266:	3b01      	subs	r3, #1
 8007268:	b29b      	uxth	r3, r3
 800726a:	f8a4 3046 	strh.w	r3, [r4, #70]	@ 0x46
 800726e:	e7eb      	b.n	8007248 <HAL_SPI_Receive+0xc2>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007270:	6823      	ldr	r3, [r4, #0]
 8007272:	689a      	ldr	r2, [r3, #8]
 8007274:	07d0      	lsls	r0, r2, #31
 8007276:	d51d      	bpl.n	80072b4 <HAL_SPI_Receive+0x12e>
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007278:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 800727a:	7b1b      	ldrb	r3, [r3, #12]
 800727c:	7013      	strb	r3, [r2, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800727e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007280:	3301      	adds	r3, #1
 8007282:	6423      	str	r3, [r4, #64]	@ 0x40
        hspi->RxXferCount--;
 8007284:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 8007288:	3b01      	subs	r3, #1
 800728a:	b29b      	uxth	r3, r3
 800728c:	f8a4 3046 	strh.w	r3, [r4, #70]	@ 0x46
    while (hspi->RxXferCount > 0U)
 8007290:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 8007294:	b29b      	uxth	r3, r3
 8007296:	2b00      	cmp	r3, #0
 8007298:	d1ea      	bne.n	8007270 <HAL_SPI_Receive+0xea>
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800729a:	464a      	mov	r2, r9
 800729c:	4639      	mov	r1, r7
 800729e:	4620      	mov	r0, r4
 80072a0:	f7ff fcb0 	bl	8006c04 <SPI_EndRxTransaction>
 80072a4:	b9f8      	cbnz	r0, 80072e6 <HAL_SPI_Receive+0x160>
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80072a6:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 80072a8:	b983      	cbnz	r3, 80072cc <HAL_SPI_Receive+0x146>
    hspi->State = HAL_SPI_STATE_READY;
 80072aa:	2201      	movs	r2, #1
 80072ac:	f884 205d 	strb.w	r2, [r4, #93]	@ 0x5d
  HAL_StatusTypeDef errorcode = HAL_OK;
 80072b0:	461e      	mov	r6, r3
 80072b2:	e00b      	b.n	80072cc <HAL_SPI_Receive+0x146>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80072b4:	f7fd fe9a 	bl	8004fec <HAL_GetTick>
 80072b8:	eba0 0009 	sub.w	r0, r0, r9
 80072bc:	42b8      	cmp	r0, r7
 80072be:	d3e7      	bcc.n	8007290 <HAL_SPI_Receive+0x10a>
 80072c0:	1c79      	adds	r1, r7, #1
 80072c2:	d0e5      	beq.n	8007290 <HAL_SPI_Receive+0x10a>
          hspi->State = HAL_SPI_STATE_READY;
 80072c4:	2301      	movs	r3, #1
 80072c6:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
          errorcode = HAL_TIMEOUT;
 80072ca:	2603      	movs	r6, #3
  __HAL_UNLOCK(hspi);
 80072cc:	2300      	movs	r3, #0
 80072ce:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
  return errorcode;
 80072d2:	e773      	b.n	80071bc <HAL_SPI_Receive+0x36>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80072d4:	f7fd fe8a 	bl	8004fec <HAL_GetTick>
 80072d8:	eba0 0009 	sub.w	r0, r0, r9
 80072dc:	42b8      	cmp	r0, r7
 80072de:	d3b3      	bcc.n	8007248 <HAL_SPI_Receive+0xc2>
 80072e0:	1c7b      	adds	r3, r7, #1
 80072e2:	d0b1      	beq.n	8007248 <HAL_SPI_Receive+0xc2>
 80072e4:	e7ee      	b.n	80072c4 <HAL_SPI_Receive+0x13e>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80072e6:	2320      	movs	r3, #32
 80072e8:	6623      	str	r3, [r4, #96]	@ 0x60
 80072ea:	e7dc      	b.n	80072a6 <HAL_SPI_Receive+0x120>
    errorcode = HAL_BUSY;
 80072ec:	2602      	movs	r6, #2
 80072ee:	e7ed      	b.n	80072cc <HAL_SPI_Receive+0x146>
  __HAL_LOCK(hspi);
 80072f0:	2602      	movs	r6, #2
 80072f2:	e763      	b.n	80071bc <HAL_SPI_Receive+0x36>

080072f4 <HAL_TIM_Base_Start>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80072f4:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 80072f8:	2b01      	cmp	r3, #1
 80072fa:	d127      	bne.n	800734c <HAL_TIM_Base_Start+0x58>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80072fc:	2302      	movs	r3, #2

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80072fe:	4a14      	ldr	r2, [pc, #80]	@ (8007350 <HAL_TIM_Base_Start+0x5c>)
  htim->State = HAL_TIM_STATE_BUSY;
 8007300:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007304:	6803      	ldr	r3, [r0, #0]
 8007306:	4293      	cmp	r3, r2
 8007308:	d012      	beq.n	8007330 <HAL_TIM_Base_Start+0x3c>
 800730a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800730e:	d00f      	beq.n	8007330 <HAL_TIM_Base_Start+0x3c>
 8007310:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 8007314:	4293      	cmp	r3, r2
 8007316:	d00b      	beq.n	8007330 <HAL_TIM_Base_Start+0x3c>
 8007318:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800731c:	4293      	cmp	r3, r2
 800731e:	d007      	beq.n	8007330 <HAL_TIM_Base_Start+0x3c>
 8007320:	f502 3296 	add.w	r2, r2, #76800	@ 0x12c00
 8007324:	4293      	cmp	r3, r2
 8007326:	d003      	beq.n	8007330 <HAL_TIM_Base_Start+0x3c>
 8007328:	f502 6240 	add.w	r2, r2, #3072	@ 0xc00
 800732c:	4293      	cmp	r3, r2
 800732e:	d107      	bne.n	8007340 <HAL_TIM_Base_Start+0x4c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007330:	6899      	ldr	r1, [r3, #8]
 8007332:	4a08      	ldr	r2, [pc, #32]	@ (8007354 <HAL_TIM_Base_Start+0x60>)
 8007334:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007336:	2a06      	cmp	r2, #6
 8007338:	d006      	beq.n	8007348 <HAL_TIM_Base_Start+0x54>
 800733a:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 800733e:	d003      	beq.n	8007348 <HAL_TIM_Base_Start+0x54>
    {
      __HAL_TIM_ENABLE(htim);
 8007340:	681a      	ldr	r2, [r3, #0]
 8007342:	f042 0201 	orr.w	r2, r2, #1
 8007346:	601a      	str	r2, [r3, #0]
  {
    __HAL_TIM_ENABLE(htim);
  }

  /* Return function status */
  return HAL_OK;
 8007348:	2000      	movs	r0, #0
 800734a:	4770      	bx	lr
    return HAL_ERROR;
 800734c:	2001      	movs	r0, #1
}
 800734e:	4770      	bx	lr
 8007350:	40012c00 	.word	0x40012c00
 8007354:	00010007 	.word	0x00010007

08007358 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007358:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800735c:	2b01      	cmp	r3, #1
 800735e:	d12b      	bne.n	80073b8 <HAL_TIM_Base_Start_IT+0x60>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007360:	2302      	movs	r3, #2
 8007362:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007366:	6803      	ldr	r3, [r0, #0]
 8007368:	68da      	ldr	r2, [r3, #12]
 800736a:	f042 0201 	orr.w	r2, r2, #1
 800736e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007370:	4a12      	ldr	r2, [pc, #72]	@ (80073bc <HAL_TIM_Base_Start_IT+0x64>)
 8007372:	4293      	cmp	r3, r2
 8007374:	d012      	beq.n	800739c <HAL_TIM_Base_Start_IT+0x44>
 8007376:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800737a:	d00f      	beq.n	800739c <HAL_TIM_Base_Start_IT+0x44>
 800737c:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 8007380:	4293      	cmp	r3, r2
 8007382:	d00b      	beq.n	800739c <HAL_TIM_Base_Start_IT+0x44>
 8007384:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8007388:	4293      	cmp	r3, r2
 800738a:	d007      	beq.n	800739c <HAL_TIM_Base_Start_IT+0x44>
 800738c:	f502 3296 	add.w	r2, r2, #76800	@ 0x12c00
 8007390:	4293      	cmp	r3, r2
 8007392:	d003      	beq.n	800739c <HAL_TIM_Base_Start_IT+0x44>
 8007394:	f502 6240 	add.w	r2, r2, #3072	@ 0xc00
 8007398:	4293      	cmp	r3, r2
 800739a:	d107      	bne.n	80073ac <HAL_TIM_Base_Start_IT+0x54>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800739c:	6899      	ldr	r1, [r3, #8]
 800739e:	4a08      	ldr	r2, [pc, #32]	@ (80073c0 <HAL_TIM_Base_Start_IT+0x68>)
 80073a0:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80073a2:	2a06      	cmp	r2, #6
 80073a4:	d006      	beq.n	80073b4 <HAL_TIM_Base_Start_IT+0x5c>
 80073a6:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 80073aa:	d003      	beq.n	80073b4 <HAL_TIM_Base_Start_IT+0x5c>
    {
      __HAL_TIM_ENABLE(htim);
 80073ac:	681a      	ldr	r2, [r3, #0]
 80073ae:	f042 0201 	orr.w	r2, r2, #1
 80073b2:	601a      	str	r2, [r3, #0]
  {
    __HAL_TIM_ENABLE(htim);
  }

  /* Return function status */
  return HAL_OK;
 80073b4:	2000      	movs	r0, #0
 80073b6:	4770      	bx	lr
    return HAL_ERROR;
 80073b8:	2001      	movs	r0, #1
}
 80073ba:	4770      	bx	lr
 80073bc:	40012c00 	.word	0x40012c00
 80073c0:	00010007 	.word	0x00010007

080073c4 <HAL_TIM_OC_DelayElapsedCallback>:
/**
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
 80073c4:	4770      	bx	lr

080073c6 <HAL_TIM_IC_CaptureCallback>:
/**
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
 80073c6:	4770      	bx	lr

080073c8 <HAL_TIM_PWM_PulseFinishedCallback>:
/**
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
 80073c8:	4770      	bx	lr

080073ca <HAL_TIM_TriggerCallback>:
/**
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
 80073ca:	4770      	bx	lr

080073cc <HAL_TIM_IRQHandler>:
  uint32_t itsource = htim->Instance->DIER;
 80073cc:	6803      	ldr	r3, [r0, #0]
{
 80073ce:	b570      	push	{r4, r5, r6, lr}
  uint32_t itsource = htim->Instance->DIER;
 80073d0:	68dd      	ldr	r5, [r3, #12]
  uint32_t itflag   = htim->Instance->SR;
 80073d2:	691e      	ldr	r6, [r3, #16]
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80073d4:	07b2      	lsls	r2, r6, #30
{
 80073d6:	4604      	mov	r4, r0
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80073d8:	d50d      	bpl.n	80073f6 <HAL_TIM_IRQHandler+0x2a>
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80073da:	07a9      	lsls	r1, r5, #30
 80073dc:	d50b      	bpl.n	80073f6 <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80073de:	f06f 0202 	mvn.w	r2, #2
 80073e2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80073e4:	2201      	movs	r2, #1
 80073e6:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80073e8:	699b      	ldr	r3, [r3, #24]
 80073ea:	079a      	lsls	r2, r3, #30
 80073ec:	d074      	beq.n	80074d8 <HAL_TIM_IRQHandler+0x10c>
          HAL_TIM_IC_CaptureCallback(htim);
 80073ee:	f7ff ffea 	bl	80073c6 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80073f2:	2300      	movs	r3, #0
 80073f4:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80073f6:	0773      	lsls	r3, r6, #29
 80073f8:	d510      	bpl.n	800741c <HAL_TIM_IRQHandler+0x50>
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80073fa:	0768      	lsls	r0, r5, #29
 80073fc:	d50e      	bpl.n	800741c <HAL_TIM_IRQHandler+0x50>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80073fe:	6823      	ldr	r3, [r4, #0]
 8007400:	f06f 0204 	mvn.w	r2, #4
 8007404:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007406:	2202      	movs	r2, #2
 8007408:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800740a:	699b      	ldr	r3, [r3, #24]
 800740c:	f413 7f40 	tst.w	r3, #768	@ 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8007410:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007412:	d067      	beq.n	80074e4 <HAL_TIM_IRQHandler+0x118>
        HAL_TIM_IC_CaptureCallback(htim);
 8007414:	f7ff ffd7 	bl	80073c6 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007418:	2300      	movs	r3, #0
 800741a:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800741c:	0731      	lsls	r1, r6, #28
 800741e:	d50f      	bpl.n	8007440 <HAL_TIM_IRQHandler+0x74>
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007420:	072a      	lsls	r2, r5, #28
 8007422:	d50d      	bpl.n	8007440 <HAL_TIM_IRQHandler+0x74>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007424:	6823      	ldr	r3, [r4, #0]
 8007426:	f06f 0208 	mvn.w	r2, #8
 800742a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800742c:	2204      	movs	r2, #4
 800742e:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007430:	69db      	ldr	r3, [r3, #28]
 8007432:	079b      	lsls	r3, r3, #30
        HAL_TIM_IC_CaptureCallback(htim);
 8007434:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007436:	d05b      	beq.n	80074f0 <HAL_TIM_IRQHandler+0x124>
        HAL_TIM_IC_CaptureCallback(htim);
 8007438:	f7ff ffc5 	bl	80073c6 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800743c:	2300      	movs	r3, #0
 800743e:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007440:	06f0      	lsls	r0, r6, #27
 8007442:	d510      	bpl.n	8007466 <HAL_TIM_IRQHandler+0x9a>
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007444:	06e9      	lsls	r1, r5, #27
 8007446:	d50e      	bpl.n	8007466 <HAL_TIM_IRQHandler+0x9a>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007448:	6823      	ldr	r3, [r4, #0]
 800744a:	f06f 0210 	mvn.w	r2, #16
 800744e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007450:	2208      	movs	r2, #8
 8007452:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007454:	69db      	ldr	r3, [r3, #28]
 8007456:	f413 7f40 	tst.w	r3, #768	@ 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 800745a:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800745c:	d04e      	beq.n	80074fc <HAL_TIM_IRQHandler+0x130>
        HAL_TIM_IC_CaptureCallback(htim);
 800745e:	f7ff ffb2 	bl	80073c6 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007462:	2300      	movs	r3, #0
 8007464:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007466:	07f2      	lsls	r2, r6, #31
 8007468:	d508      	bpl.n	800747c <HAL_TIM_IRQHandler+0xb0>
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800746a:	07eb      	lsls	r3, r5, #31
 800746c:	d506      	bpl.n	800747c <HAL_TIM_IRQHandler+0xb0>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800746e:	6823      	ldr	r3, [r4, #0]
 8007470:	f06f 0201 	mvn.w	r2, #1
 8007474:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8007476:	4620      	mov	r0, r4
 8007478:	f7fc faba 	bl	80039f0 <HAL_TIM_PeriodElapsedCallback>
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800747c:	0630      	lsls	r0, r6, #24
 800747e:	d508      	bpl.n	8007492 <HAL_TIM_IRQHandler+0xc6>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007480:	0629      	lsls	r1, r5, #24
 8007482:	d506      	bpl.n	8007492 <HAL_TIM_IRQHandler+0xc6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8007484:	6823      	ldr	r3, [r4, #0]
 8007486:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800748a:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800748c:	4620      	mov	r0, r4
 800748e:	f000 f9b8 	bl	8007802 <HAL_TIMEx_BreakCallback>
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8007492:	05f2      	lsls	r2, r6, #23
 8007494:	d508      	bpl.n	80074a8 <HAL_TIM_IRQHandler+0xdc>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007496:	062b      	lsls	r3, r5, #24
 8007498:	d506      	bpl.n	80074a8 <HAL_TIM_IRQHandler+0xdc>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800749a:	6823      	ldr	r3, [r4, #0]
 800749c:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80074a0:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 80074a2:	4620      	mov	r0, r4
 80074a4:	f000 f9ae 	bl	8007804 <HAL_TIMEx_Break2Callback>
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80074a8:	0670      	lsls	r0, r6, #25
 80074aa:	d508      	bpl.n	80074be <HAL_TIM_IRQHandler+0xf2>
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80074ac:	0669      	lsls	r1, r5, #25
 80074ae:	d506      	bpl.n	80074be <HAL_TIM_IRQHandler+0xf2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80074b0:	6823      	ldr	r3, [r4, #0]
 80074b2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80074b6:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80074b8:	4620      	mov	r0, r4
 80074ba:	f7ff ff86 	bl	80073ca <HAL_TIM_TriggerCallback>
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80074be:	06b2      	lsls	r2, r6, #26
 80074c0:	d522      	bpl.n	8007508 <HAL_TIM_IRQHandler+0x13c>
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80074c2:	06ab      	lsls	r3, r5, #26
 80074c4:	d520      	bpl.n	8007508 <HAL_TIM_IRQHandler+0x13c>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80074c6:	6823      	ldr	r3, [r4, #0]
 80074c8:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 80074cc:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80074ce:	611a      	str	r2, [r3, #16]
}
 80074d0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      HAL_TIMEx_CommutCallback(htim);
 80074d4:	f000 b994 	b.w	8007800 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80074d8:	f7ff ff74 	bl	80073c4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80074dc:	4620      	mov	r0, r4
 80074de:	f7ff ff73 	bl	80073c8 <HAL_TIM_PWM_PulseFinishedCallback>
 80074e2:	e786      	b.n	80073f2 <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80074e4:	f7ff ff6e 	bl	80073c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80074e8:	4620      	mov	r0, r4
 80074ea:	f7ff ff6d 	bl	80073c8 <HAL_TIM_PWM_PulseFinishedCallback>
 80074ee:	e793      	b.n	8007418 <HAL_TIM_IRQHandler+0x4c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80074f0:	f7ff ff68 	bl	80073c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80074f4:	4620      	mov	r0, r4
 80074f6:	f7ff ff67 	bl	80073c8 <HAL_TIM_PWM_PulseFinishedCallback>
 80074fa:	e79f      	b.n	800743c <HAL_TIM_IRQHandler+0x70>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80074fc:	f7ff ff62 	bl	80073c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007500:	4620      	mov	r0, r4
 8007502:	f7ff ff61 	bl	80073c8 <HAL_TIM_PWM_PulseFinishedCallback>
 8007506:	e7ac      	b.n	8007462 <HAL_TIM_IRQHandler+0x96>
}
 8007508:	bd70      	pop	{r4, r5, r6, pc}
	...

0800750c <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800750c:	4a2f      	ldr	r2, [pc, #188]	@ (80075cc <TIM_Base_SetConfig+0xc0>)
  tmpcr1 = TIMx->CR1;
 800750e:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007510:	4290      	cmp	r0, r2
 8007512:	d00e      	beq.n	8007532 <TIM_Base_SetConfig+0x26>
 8007514:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8007518:	d00b      	beq.n	8007532 <TIM_Base_SetConfig+0x26>
 800751a:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 800751e:	4290      	cmp	r0, r2
 8007520:	d007      	beq.n	8007532 <TIM_Base_SetConfig+0x26>
 8007522:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8007526:	4290      	cmp	r0, r2
 8007528:	d003      	beq.n	8007532 <TIM_Base_SetConfig+0x26>
 800752a:	f502 3296 	add.w	r2, r2, #76800	@ 0x12c00
 800752e:	4290      	cmp	r0, r2
 8007530:	d115      	bne.n	800755e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8007532:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007534:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8007538:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800753a:	4a24      	ldr	r2, [pc, #144]	@ (80075cc <TIM_Base_SetConfig+0xc0>)
 800753c:	4290      	cmp	r0, r2
 800753e:	d019      	beq.n	8007574 <TIM_Base_SetConfig+0x68>
 8007540:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8007544:	d016      	beq.n	8007574 <TIM_Base_SetConfig+0x68>
 8007546:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 800754a:	4290      	cmp	r0, r2
 800754c:	d012      	beq.n	8007574 <TIM_Base_SetConfig+0x68>
 800754e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8007552:	4290      	cmp	r0, r2
 8007554:	d00e      	beq.n	8007574 <TIM_Base_SetConfig+0x68>
 8007556:	f502 3296 	add.w	r2, r2, #76800	@ 0x12c00
 800755a:	4290      	cmp	r0, r2
 800755c:	d00a      	beq.n	8007574 <TIM_Base_SetConfig+0x68>
 800755e:	4a1c      	ldr	r2, [pc, #112]	@ (80075d0 <TIM_Base_SetConfig+0xc4>)
 8007560:	4290      	cmp	r0, r2
 8007562:	d007      	beq.n	8007574 <TIM_Base_SetConfig+0x68>
 8007564:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8007568:	4290      	cmp	r0, r2
 800756a:	d003      	beq.n	8007574 <TIM_Base_SetConfig+0x68>
 800756c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8007570:	4290      	cmp	r0, r2
 8007572:	d103      	bne.n	800757c <TIM_Base_SetConfig+0x70>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007574:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8007576:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800757a:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800757c:	694a      	ldr	r2, [r1, #20]
 800757e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007582:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8007584:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007586:	688b      	ldr	r3, [r1, #8]
 8007588:	62c3      	str	r3, [r0, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800758a:	680b      	ldr	r3, [r1, #0]
 800758c:	6283      	str	r3, [r0, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800758e:	4b0f      	ldr	r3, [pc, #60]	@ (80075cc <TIM_Base_SetConfig+0xc0>)
 8007590:	4298      	cmp	r0, r3
 8007592:	d00f      	beq.n	80075b4 <TIM_Base_SetConfig+0xa8>
 8007594:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007598:	4298      	cmp	r0, r3
 800759a:	d00b      	beq.n	80075b4 <TIM_Base_SetConfig+0xa8>
 800759c:	f503 6340 	add.w	r3, r3, #3072	@ 0xc00
 80075a0:	4298      	cmp	r0, r3
 80075a2:	d007      	beq.n	80075b4 <TIM_Base_SetConfig+0xa8>
 80075a4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80075a8:	4298      	cmp	r0, r3
 80075aa:	d003      	beq.n	80075b4 <TIM_Base_SetConfig+0xa8>
 80075ac:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80075b0:	4298      	cmp	r0, r3
 80075b2:	d101      	bne.n	80075b8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80075b4:	690b      	ldr	r3, [r1, #16]
 80075b6:	6303      	str	r3, [r0, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80075b8:	2301      	movs	r3, #1
 80075ba:	6143      	str	r3, [r0, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80075bc:	6903      	ldr	r3, [r0, #16]
 80075be:	07db      	lsls	r3, r3, #31
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80075c0:	bf42      	ittt	mi
 80075c2:	6903      	ldrmi	r3, [r0, #16]
 80075c4:	f023 0301 	bicmi.w	r3, r3, #1
 80075c8:	6103      	strmi	r3, [r0, #16]
  }
}
 80075ca:	4770      	bx	lr
 80075cc:	40012c00 	.word	0x40012c00
 80075d0:	40014000 	.word	0x40014000

080075d4 <HAL_TIM_Base_Init>:
{
 80075d4:	b510      	push	{r4, lr}
  if (htim == NULL)
 80075d6:	4604      	mov	r4, r0
 80075d8:	b350      	cbz	r0, 8007630 <HAL_TIM_Base_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 80075da:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 80075de:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 80075e2:	b91b      	cbnz	r3, 80075ec <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 80075e4:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 80075e8:	f7fd fa6c 	bl	8004ac4 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 80075ec:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80075ee:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80075f0:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80075f4:	1d21      	adds	r1, r4, #4
 80075f6:	f7ff ff89 	bl	800750c <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80075fa:	2301      	movs	r3, #1
 80075fc:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
  return HAL_OK;
 8007600:	2000      	movs	r0, #0
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007602:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8007606:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 800760a:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 800760e:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 8007612:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007616:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800761a:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 800761e:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 8007622:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
 8007626:	f884 3047 	strb.w	r3, [r4, #71]	@ 0x47
  htim->State = HAL_TIM_STATE_READY;
 800762a:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
}
 800762e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8007630:	2001      	movs	r0, #1
 8007632:	e7fc      	b.n	800762e <HAL_TIM_Base_Init+0x5a>

08007634 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007634:	b510      	push	{r4, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007636:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007638:	430a      	orrs	r2, r1
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800763a:	f424 447f 	bic.w	r4, r4, #65280	@ 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800763e:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8007642:	4322      	orrs	r2, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007644:	6082      	str	r2, [r0, #8]
}
 8007646:	bd10      	pop	{r4, pc}

08007648 <HAL_TIM_ConfigClockSource>:
{
 8007648:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 800764a:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 800764e:	2b01      	cmp	r3, #1
{
 8007650:	4604      	mov	r4, r0
 8007652:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 8007656:	f000 808c 	beq.w	8007772 <HAL_TIM_ConfigClockSource+0x12a>
  htim->State = HAL_TIM_STATE_BUSY;
 800765a:	f884 003d 	strb.w	r0, [r4, #61]	@ 0x3d
  __HAL_LOCK(htim);
 800765e:	2201      	movs	r2, #1
  tmpsmcr = htim->Instance->SMCR;
 8007660:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(htim);
 8007662:	f884 203c 	strb.w	r2, [r4, #60]	@ 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8007666:	6885      	ldr	r5, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007668:	4b43      	ldr	r3, [pc, #268]	@ (8007778 <HAL_TIM_ConfigClockSource+0x130>)
 800766a:	402b      	ands	r3, r5
  htim->Instance->SMCR = tmpsmcr;
 800766c:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 800766e:	680b      	ldr	r3, [r1, #0]
 8007670:	2b60      	cmp	r3, #96	@ 0x60
 8007672:	d04f      	beq.n	8007714 <HAL_TIM_ConfigClockSource+0xcc>
 8007674:	d832      	bhi.n	80076dc <HAL_TIM_ConfigClockSource+0x94>
 8007676:	2b40      	cmp	r3, #64	@ 0x40
 8007678:	d064      	beq.n	8007744 <HAL_TIM_ConfigClockSource+0xfc>
 800767a:	d816      	bhi.n	80076aa <HAL_TIM_ConfigClockSource+0x62>
 800767c:	2b20      	cmp	r3, #32
 800767e:	d00d      	beq.n	800769c <HAL_TIM_ConfigClockSource+0x54>
 8007680:	d80a      	bhi.n	8007698 <HAL_TIM_ConfigClockSource+0x50>
 8007682:	f033 0110 	bics.w	r1, r3, #16
 8007686:	d009      	beq.n	800769c <HAL_TIM_ConfigClockSource+0x54>
  htim->State = HAL_TIM_STATE_READY;
 8007688:	2301      	movs	r3, #1
 800768a:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 800768e:	2300      	movs	r3, #0
 8007690:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 8007694:	4610      	mov	r0, r2
 8007696:	bd38      	pop	{r3, r4, r5, pc}
  switch (sClockSourceConfig->ClockSource)
 8007698:	2b30      	cmp	r3, #48	@ 0x30
 800769a:	d1f5      	bne.n	8007688 <HAL_TIM_ConfigClockSource+0x40>
  tmpsmcr = TIMx->SMCR;
 800769c:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800769e:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80076a2:	4313      	orrs	r3, r2
 80076a4:	f043 0307 	orr.w	r3, r3, #7
  TIMx->SMCR = tmpsmcr;
 80076a8:	e028      	b.n	80076fc <HAL_TIM_ConfigClockSource+0xb4>
  switch (sClockSourceConfig->ClockSource)
 80076aa:	2b50      	cmp	r3, #80	@ 0x50
 80076ac:	d1ec      	bne.n	8007688 <HAL_TIM_ConfigClockSource+0x40>
                               sClockSourceConfig->ClockPolarity,
 80076ae:	684a      	ldr	r2, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 80076b0:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 80076b2:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80076b4:	6a03      	ldr	r3, [r0, #32]
 80076b6:	f023 0301 	bic.w	r3, r3, #1
 80076ba:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80076bc:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80076be:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80076c2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80076c6:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccer |= TIM_ICPolarity;
 80076ca:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 80076cc:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 80076ce:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 80076d0:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80076d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80076d6:	f043 0357 	orr.w	r3, r3, #87	@ 0x57
  TIMx->SMCR = tmpsmcr;
 80076da:	e00f      	b.n	80076fc <HAL_TIM_ConfigClockSource+0xb4>
  switch (sClockSourceConfig->ClockSource)
 80076dc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80076e0:	d00d      	beq.n	80076fe <HAL_TIM_ConfigClockSource+0xb6>
 80076e2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80076e6:	d00c      	beq.n	8007702 <HAL_TIM_ConfigClockSource+0xba>
 80076e8:	2b70      	cmp	r3, #112	@ 0x70
 80076ea:	d1cd      	bne.n	8007688 <HAL_TIM_ConfigClockSource+0x40>
      TIM_ETR_SetConfig(htim->Instance,
 80076ec:	68cb      	ldr	r3, [r1, #12]
 80076ee:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 80076f2:	f7ff ff9f 	bl	8007634 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80076f6:	6883      	ldr	r3, [r0, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80076f8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
      htim->Instance->SMCR = tmpsmcr;
 80076fc:	6083      	str	r3, [r0, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80076fe:	2200      	movs	r2, #0
 8007700:	e7c2      	b.n	8007688 <HAL_TIM_ConfigClockSource+0x40>
      TIM_ETR_SetConfig(htim->Instance,
 8007702:	68cb      	ldr	r3, [r1, #12]
 8007704:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8007708:	f7ff ff94 	bl	8007634 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800770c:	6883      	ldr	r3, [r0, #8]
 800770e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007712:	e7f3      	b.n	80076fc <HAL_TIM_ConfigClockSource+0xb4>
  tmpccer = TIMx->CCER;
 8007714:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007716:	6a02      	ldr	r2, [r0, #32]
                               sClockSourceConfig->ClockPolarity,
 8007718:	684d      	ldr	r5, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 800771a:	68c9      	ldr	r1, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800771c:	f022 0210 	bic.w	r2, r2, #16
 8007720:	6202      	str	r2, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007722:	6982      	ldr	r2, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007724:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007728:	f422 4270 	bic.w	r2, r2, #61440	@ 0xf000
  tmpccer |= (TIM_ICPolarity << 4U);
 800772c:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007730:	ea42 3201 	orr.w	r2, r2, r1, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8007734:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8007736:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8007738:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800773a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800773e:	f043 0367 	orr.w	r3, r3, #103	@ 0x67
  TIMx->SMCR = tmpsmcr;
 8007742:	e7db      	b.n	80076fc <HAL_TIM_ConfigClockSource+0xb4>
                               sClockSourceConfig->ClockPolarity,
 8007744:	684a      	ldr	r2, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8007746:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 8007748:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800774a:	6a03      	ldr	r3, [r0, #32]
 800774c:	f023 0301 	bic.w	r3, r3, #1
 8007750:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007752:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007754:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007758:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800775c:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccer |= TIM_ICPolarity;
 8007760:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 8007762:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8007764:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8007766:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8007768:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800776c:	f043 0347 	orr.w	r3, r3, #71	@ 0x47
  TIMx->SMCR = tmpsmcr;
 8007770:	e7c4      	b.n	80076fc <HAL_TIM_ConfigClockSource+0xb4>
  __HAL_LOCK(htim);
 8007772:	4602      	mov	r2, r0
 8007774:	e78e      	b.n	8007694 <HAL_TIM_ConfigClockSource+0x4c>
 8007776:	bf00      	nop
 8007778:	fffe0088 	.word	0xfffe0088

0800777c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800777c:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800777e:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8007782:	2b01      	cmp	r3, #1
{
 8007784:	4604      	mov	r4, r0
 8007786:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 800778a:	d032      	beq.n	80077f2 <HAL_TIMEx_MasterConfigSynchronization+0x76>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800778c:	6823      	ldr	r3, [r4, #0]
  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800778e:	4d19      	ldr	r5, [pc, #100]	@ (80077f4 <HAL_TIMEx_MasterConfigSynchronization+0x78>)
  htim->State = HAL_TIM_STATE_BUSY;
 8007790:	f884 003d 	strb.w	r0, [r4, #61]	@ 0x3d
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007794:	42ab      	cmp	r3, r5
  tmpcr2 = htim->Instance->CR2;
 8007796:	685a      	ldr	r2, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;
 8007798:	6898      	ldr	r0, [r3, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800779a:	d002      	beq.n	80077a2 <HAL_TIMEx_MasterConfigSynchronization+0x26>
 800779c:	4e16      	ldr	r6, [pc, #88]	@ (80077f8 <HAL_TIMEx_MasterConfigSynchronization+0x7c>)
 800779e:	42b3      	cmp	r3, r6
 80077a0:	d103      	bne.n	80077aa <HAL_TIMEx_MasterConfigSynchronization+0x2e>
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80077a2:	684e      	ldr	r6, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 80077a4:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80077a8:	4332      	orrs	r2, r6
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80077aa:	680e      	ldr	r6, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 80077ac:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80077b0:	4332      	orrs	r2, r6

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80077b2:	42ab      	cmp	r3, r5
  htim->Instance->CR2 = tmpcr2;
 80077b4:	605a      	str	r2, [r3, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80077b6:	d011      	beq.n	80077dc <HAL_TIMEx_MasterConfigSynchronization+0x60>
 80077b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80077bc:	d00e      	beq.n	80077dc <HAL_TIMEx_MasterConfigSynchronization+0x60>
 80077be:	4a0f      	ldr	r2, [pc, #60]	@ (80077fc <HAL_TIMEx_MasterConfigSynchronization+0x80>)
 80077c0:	4293      	cmp	r3, r2
 80077c2:	d00b      	beq.n	80077dc <HAL_TIMEx_MasterConfigSynchronization+0x60>
 80077c4:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80077c8:	4293      	cmp	r3, r2
 80077ca:	d007      	beq.n	80077dc <HAL_TIMEx_MasterConfigSynchronization+0x60>
 80077cc:	f502 3296 	add.w	r2, r2, #76800	@ 0x12c00
 80077d0:	4293      	cmp	r3, r2
 80077d2:	d003      	beq.n	80077dc <HAL_TIMEx_MasterConfigSynchronization+0x60>
 80077d4:	f502 6240 	add.w	r2, r2, #3072	@ 0xc00
 80077d8:	4293      	cmp	r3, r2
 80077da:	d104      	bne.n	80077e6 <HAL_TIMEx_MasterConfigSynchronization+0x6a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80077dc:	6889      	ldr	r1, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 80077de:	f020 0280 	bic.w	r2, r0, #128	@ 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80077e2:	430a      	orrs	r2, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80077e4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80077e6:	2301      	movs	r3, #1

  __HAL_UNLOCK(htim);
 80077e8:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80077ea:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 80077ee:	f884 003c 	strb.w	r0, [r4, #60]	@ 0x3c

  return HAL_OK;
}
 80077f2:	bd70      	pop	{r4, r5, r6, pc}
 80077f4:	40012c00 	.word	0x40012c00
 80077f8:	40013400 	.word	0x40013400
 80077fc:	40000400 	.word	0x40000400

08007800 <HAL_TIMEx_CommutCallback>:
/**
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
 8007800:	4770      	bx	lr

08007802 <HAL_TIMEx_BreakCallback>:
/**
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
 8007802:	4770      	bx	lr

08007804 <HAL_TIMEx_Break2Callback>:
/**
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
 8007804:	4770      	bx	lr

08007806 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007806:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007808:	e852 3f00 	ldrex	r3, [r2]
 800780c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007810:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 8007814:	6802      	ldr	r2, [r0, #0]
 8007816:	2900      	cmp	r1, #0
 8007818:	d1f5      	bne.n	8007806 <UART_EndRxTransfer>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800781a:	f102 0308 	add.w	r3, r2, #8
 800781e:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007822:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007826:	f102 0c08 	add.w	ip, r2, #8
 800782a:	e84c 3100 	strex	r1, r3, [ip]
 800782e:	2900      	cmp	r1, #0
 8007830:	d1f3      	bne.n	800781a <UART_EndRxTransfer+0x14>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007832:	6e03      	ldr	r3, [r0, #96]	@ 0x60
 8007834:	2b01      	cmp	r3, #1
 8007836:	d107      	bne.n	8007848 <UART_EndRxTransfer+0x42>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007838:	e852 3f00 	ldrex	r3, [r2]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800783c:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007840:	e842 3100 	strex	r1, r3, [r2]
 8007844:	2900      	cmp	r1, #0
 8007846:	d1f7      	bne.n	8007838 <UART_EndRxTransfer+0x32>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007848:	2320      	movs	r3, #32
 800784a:	f8c0 3080 	str.w	r3, [r0, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800784e:	2300      	movs	r3, #0
 8007850:	6603      	str	r3, [r0, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007852:	6683      	str	r3, [r0, #104]	@ 0x68
}
 8007854:	4770      	bx	lr

08007856 <HAL_UART_Abort>:
{
 8007856:	b510      	push	{r4, lr}
 8007858:	4604      	mov	r4, r0
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 800785a:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800785c:	e852 3f00 	ldrex	r3, [r2]
 8007860:	f423 73f0 	bic.w	r3, r3, #480	@ 0x1e0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007864:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 8007868:	6823      	ldr	r3, [r4, #0]
 800786a:	2900      	cmp	r1, #0
 800786c:	d1f5      	bne.n	800785a <HAL_UART_Abort+0x4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800786e:	f103 0208 	add.w	r2, r3, #8
 8007872:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007876:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800787a:	f103 0008 	add.w	r0, r3, #8
 800787e:	e840 2100 	strex	r1, r2, [r0]
 8007882:	2900      	cmp	r1, #0
 8007884:	d1f3      	bne.n	800786e <HAL_UART_Abort+0x18>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007886:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 8007888:	2a01      	cmp	r2, #1
 800788a:	d107      	bne.n	800789c <HAL_UART_Abort+0x46>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800788c:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8007890:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007894:	e843 2100 	strex	r1, r2, [r3]
 8007898:	2900      	cmp	r1, #0
 800789a:	d1f7      	bne.n	800788c <HAL_UART_Abort+0x36>
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800789c:	689a      	ldr	r2, [r3, #8]
 800789e:	0612      	lsls	r2, r2, #24
 80078a0:	d51b      	bpl.n	80078da <HAL_UART_Abort+0x84>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078a2:	f103 0208 	add.w	r2, r3, #8
 80078a6:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80078aa:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078ae:	f103 0008 	add.w	r0, r3, #8
 80078b2:	e840 2100 	strex	r1, r2, [r0]
 80078b6:	2900      	cmp	r1, #0
 80078b8:	d1f3      	bne.n	80078a2 <HAL_UART_Abort+0x4c>
    if (huart->hdmatx != NULL)
 80078ba:	6f20      	ldr	r0, [r4, #112]	@ 0x70
 80078bc:	b168      	cbz	r0, 80078da <HAL_UART_Abort+0x84>
      huart->hdmatx->XferAbortCallback = NULL;
 80078be:	6341      	str	r1, [r0, #52]	@ 0x34
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 80078c0:	f7fe f9a9 	bl	8005c16 <HAL_DMA_Abort>
 80078c4:	b148      	cbz	r0, 80078da <HAL_UART_Abort+0x84>
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 80078c6:	6f20      	ldr	r0, [r4, #112]	@ 0x70
 80078c8:	f7fe fa0a 	bl	8005ce0 <HAL_DMA_GetError>
 80078cc:	2820      	cmp	r0, #32
 80078ce:	d104      	bne.n	80078da <HAL_UART_Abort+0x84>
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80078d0:	2310      	movs	r3, #16
 80078d2:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
          return HAL_TIMEOUT;
 80078d6:	2003      	movs	r0, #3
}
 80078d8:	bd10      	pop	{r4, pc}
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80078da:	6822      	ldr	r2, [r4, #0]
 80078dc:	6893      	ldr	r3, [r2, #8]
 80078de:	065b      	lsls	r3, r3, #25
 80078e0:	d516      	bpl.n	8007910 <HAL_UART_Abort+0xba>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078e2:	f102 0308 	add.w	r3, r2, #8
 80078e6:	e853 3f00 	ldrex	r3, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80078ea:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078ee:	f102 0008 	add.w	r0, r2, #8
 80078f2:	e840 3100 	strex	r1, r3, [r0]
 80078f6:	2900      	cmp	r1, #0
 80078f8:	d1f3      	bne.n	80078e2 <HAL_UART_Abort+0x8c>
    if (huart->hdmarx != NULL)
 80078fa:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 80078fc:	b140      	cbz	r0, 8007910 <HAL_UART_Abort+0xba>
      huart->hdmarx->XferAbortCallback = NULL;
 80078fe:	6341      	str	r1, [r0, #52]	@ 0x34
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8007900:	f7fe f989 	bl	8005c16 <HAL_DMA_Abort>
 8007904:	b120      	cbz	r0, 8007910 <HAL_UART_Abort+0xba>
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8007906:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 8007908:	f7fe f9ea 	bl	8005ce0 <HAL_DMA_GetError>
 800790c:	2820      	cmp	r0, #32
 800790e:	d0df      	beq.n	80078d0 <HAL_UART_Abort+0x7a>
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8007910:	6823      	ldr	r3, [r4, #0]
  huart->TxXferCount = 0U;
 8007912:	2000      	movs	r0, #0
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8007914:	220f      	movs	r2, #15
  huart->TxXferCount = 0U;
 8007916:	f8a4 0052 	strh.w	r0, [r4, #82]	@ 0x52
  huart->RxXferCount = 0U;
 800791a:	f8a4 005a 	strh.w	r0, [r4, #90]	@ 0x5a
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800791e:	621a      	str	r2, [r3, #32]
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007920:	699a      	ldr	r2, [r3, #24]
 8007922:	f042 0208 	orr.w	r2, r2, #8
 8007926:	619a      	str	r2, [r3, #24]
  huart->gState  = HAL_UART_STATE_READY;
 8007928:	2320      	movs	r3, #32
 800792a:	67e3      	str	r3, [r4, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800792c:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007930:	6620      	str	r0, [r4, #96]	@ 0x60
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007932:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
  return HAL_OK;
 8007936:	e7cf      	b.n	80078d8 <HAL_UART_Abort+0x82>

08007938 <HAL_UART_RxCpltCallback>:
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
 8007938:	4770      	bx	lr

0800793a <HAL_UART_RxHalfCpltCallback>:
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
 800793a:	4770      	bx	lr

0800793c <HAL_UART_ErrorCallback>:
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
 800793c:	4770      	bx	lr

0800793e <UART_DMAError>:
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800793e:	6a40      	ldr	r0, [r0, #36]	@ 0x24

  const HAL_UART_StateTypeDef gstate = huart->gState;
  const HAL_UART_StateTypeDef rxstate = huart->RxState;

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8007940:	6803      	ldr	r3, [r0, #0]
  const HAL_UART_StateTypeDef gstate = huart->gState;
 8007942:	6fc2      	ldr	r2, [r0, #124]	@ 0x7c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8007944:	f8d0 1080 	ldr.w	r1, [r0, #128]	@ 0x80
{
 8007948:	b510      	push	{r4, lr}
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800794a:	689c      	ldr	r4, [r3, #8]
 800794c:	0624      	lsls	r4, r4, #24
 800794e:	d50e      	bpl.n	800796e <UART_DMAError+0x30>
 8007950:	2a21      	cmp	r2, #33	@ 0x21
 8007952:	d10c      	bne.n	800796e <UART_DMAError+0x30>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8007954:	2200      	movs	r2, #0
 8007956:	f8a0 2052 	strh.w	r2, [r0, #82]	@ 0x52
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800795a:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800795e:	f022 02c0 	bic.w	r2, r2, #192	@ 0xc0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007962:	e843 2400 	strex	r4, r2, [r3]
 8007966:	2c00      	cmp	r4, #0
 8007968:	d1f7      	bne.n	800795a <UART_DMAError+0x1c>
  huart->gState = HAL_UART_STATE_READY;
 800796a:	2220      	movs	r2, #32
 800796c:	67c2      	str	r2, [r0, #124]	@ 0x7c
    UART_EndTxTransfer(huart);
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800796e:	689b      	ldr	r3, [r3, #8]
 8007970:	065b      	lsls	r3, r3, #25
 8007972:	d506      	bpl.n	8007982 <UART_DMAError+0x44>
 8007974:	2922      	cmp	r1, #34	@ 0x22
 8007976:	d104      	bne.n	8007982 <UART_DMAError+0x44>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8007978:	2300      	movs	r3, #0
 800797a:	f8a0 305a 	strh.w	r3, [r0, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 800797e:	f7ff ff42 	bl	8007806 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007982:	f8d0 3084 	ldr.w	r3, [r0, #132]	@ 0x84
 8007986:	f043 0310 	orr.w	r3, r3, #16
 800798a:	f8c0 3084 	str.w	r3, [r0, #132]	@ 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800798e:	f7ff ffd5 	bl	800793c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007992:	bd10      	pop	{r4, pc}

08007994 <HAL_UARTEx_RxEventCallback>:
}
 8007994:	4770      	bx	lr

08007996 <UART_DMARxHalfCplt>:
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007996:	6a40      	ldr	r0, [r0, #36]	@ 0x24
{
 8007998:	b508      	push	{r3, lr}
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800799a:	2301      	movs	r3, #1
 800799c:	6643      	str	r3, [r0, #100]	@ 0x64
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800799e:	6e03      	ldr	r3, [r0, #96]	@ 0x60
 80079a0:	2b01      	cmp	r3, #1
 80079a2:	d105      	bne.n	80079b0 <UART_DMARxHalfCplt+0x1a>
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80079a4:	f8b0 1058 	ldrh.w	r1, [r0, #88]	@ 0x58
 80079a8:	0849      	lsrs	r1, r1, #1
 80079aa:	f7ff fff3 	bl	8007994 <HAL_UARTEx_RxEventCallback>
}
 80079ae:	bd08      	pop	{r3, pc}
    HAL_UART_RxHalfCpltCallback(huart);
 80079b0:	f7ff ffc3 	bl	800793a <HAL_UART_RxHalfCpltCallback>
}
 80079b4:	e7fb      	b.n	80079ae <UART_DMARxHalfCplt+0x18>

080079b6 <UART_DMAReceiveCplt>:
{
 80079b6:	b508      	push	{r3, lr}
 80079b8:	4603      	mov	r3, r0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80079ba:	6a40      	ldr	r0, [r0, #36]	@ 0x24
  if (hdma->Init.Mode != DMA_CIRCULAR)
 80079bc:	699b      	ldr	r3, [r3, #24]
 80079be:	2b20      	cmp	r3, #32
 80079c0:	d032      	beq.n	8007a28 <UART_DMAReceiveCplt+0x72>
    huart->RxXferCount = 0U;
 80079c2:	2300      	movs	r3, #0
 80079c4:	f8a0 305a 	strh.w	r3, [r0, #90]	@ 0x5a
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80079c8:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079ca:	e852 3f00 	ldrex	r3, [r2]
 80079ce:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079d2:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 80079d6:	6803      	ldr	r3, [r0, #0]
 80079d8:	2900      	cmp	r1, #0
 80079da:	d1f5      	bne.n	80079c8 <UART_DMAReceiveCplt+0x12>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079dc:	f103 0208 	add.w	r2, r3, #8
 80079e0:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80079e4:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079e8:	f103 0c08 	add.w	ip, r3, #8
 80079ec:	e84c 2100 	strex	r1, r2, [ip]
 80079f0:	2900      	cmp	r1, #0
 80079f2:	d1f3      	bne.n	80079dc <UART_DMAReceiveCplt+0x26>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079f4:	f103 0208 	add.w	r2, r3, #8
 80079f8:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80079fc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a00:	f103 0c08 	add.w	ip, r3, #8
 8007a04:	e84c 2100 	strex	r1, r2, [ip]
 8007a08:	2900      	cmp	r1, #0
 8007a0a:	d1f3      	bne.n	80079f4 <UART_DMAReceiveCplt+0x3e>
    huart->RxState = HAL_UART_STATE_READY;
 8007a0c:	2220      	movs	r2, #32
 8007a0e:	f8c0 2080 	str.w	r2, [r0, #128]	@ 0x80
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007a12:	6e02      	ldr	r2, [r0, #96]	@ 0x60
 8007a14:	2a01      	cmp	r2, #1
 8007a16:	d107      	bne.n	8007a28 <UART_DMAReceiveCplt+0x72>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a18:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a1c:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a20:	e843 2100 	strex	r1, r2, [r3]
 8007a24:	2900      	cmp	r1, #0
 8007a26:	d1f7      	bne.n	8007a18 <UART_DMAReceiveCplt+0x62>
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007a28:	2300      	movs	r3, #0
 8007a2a:	6643      	str	r3, [r0, #100]	@ 0x64
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007a2c:	6e03      	ldr	r3, [r0, #96]	@ 0x60
 8007a2e:	2b01      	cmp	r3, #1
 8007a30:	d104      	bne.n	8007a3c <UART_DMAReceiveCplt+0x86>
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007a32:	f8b0 1058 	ldrh.w	r1, [r0, #88]	@ 0x58
 8007a36:	f7ff ffad 	bl	8007994 <HAL_UARTEx_RxEventCallback>
}
 8007a3a:	bd08      	pop	{r3, pc}
    HAL_UART_RxCpltCallback(huart);
 8007a3c:	f7ff ff7c 	bl	8007938 <HAL_UART_RxCpltCallback>
}
 8007a40:	e7fb      	b.n	8007a3a <UART_DMAReceiveCplt+0x84>
	...

08007a44 <UART_SetConfig>:
{
 8007a44:	b538      	push	{r3, r4, r5, lr}
 8007a46:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007a48:	69c0      	ldr	r0, [r0, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007a4a:	6823      	ldr	r3, [r4, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007a4c:	6925      	ldr	r5, [r4, #16]
 8007a4e:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007a50:	6819      	ldr	r1, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007a52:	432a      	orrs	r2, r5
 8007a54:	6965      	ldr	r5, [r4, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007a56:	f421 4116 	bic.w	r1, r1, #38400	@ 0x9600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007a5a:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007a5c:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007a60:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007a62:	430a      	orrs	r2, r1
 8007a64:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007a66:	685a      	ldr	r2, [r3, #4]
 8007a68:	68e1      	ldr	r1, [r4, #12]
  tmpreg |= huart->Init.OneBitSampling;
 8007a6a:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007a6c:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 8007a70:	430a      	orrs	r2, r1
 8007a72:	605a      	str	r2, [r3, #4]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007a74:	6899      	ldr	r1, [r3, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007a76:	69a2      	ldr	r2, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007a78:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
  tmpreg |= huart->Init.OneBitSampling;
 8007a7c:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007a7e:	430a      	orrs	r2, r1
 8007a80:	609a      	str	r2, [r3, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007a82:	4a56      	ldr	r2, [pc, #344]	@ (8007bdc <UART_SetConfig+0x198>)
 8007a84:	4293      	cmp	r3, r2
 8007a86:	d112      	bne.n	8007aae <UART_SetConfig+0x6a>
 8007a88:	4b55      	ldr	r3, [pc, #340]	@ (8007be0 <UART_SetConfig+0x19c>)
 8007a8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a8c:	f003 0303 	and.w	r3, r3, #3
 8007a90:	2b02      	cmp	r3, #2
 8007a92:	f000 8091 	beq.w	8007bb8 <UART_SetConfig+0x174>
 8007a96:	2b03      	cmp	r3, #3
 8007a98:	d022      	beq.n	8007ae0 <UART_SetConfig+0x9c>
 8007a9a:	2b01      	cmp	r3, #1
 8007a9c:	f040 8092 	bne.w	8007bc4 <UART_SetConfig+0x180>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007aa0:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8007aa4:	f040 8085 	bne.w	8007bb2 <UART_SetConfig+0x16e>
        pclk = HAL_RCC_GetSysClockFreq();
 8007aa8:	f7fe fc4a 	bl	8006340 <HAL_RCC_GetSysClockFreq>
        break;
 8007aac:	e06b      	b.n	8007b86 <UART_SetConfig+0x142>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007aae:	4a4d      	ldr	r2, [pc, #308]	@ (8007be4 <UART_SetConfig+0x1a0>)
 8007ab0:	4293      	cmp	r3, r2
 8007ab2:	d12e      	bne.n	8007b12 <UART_SetConfig+0xce>
 8007ab4:	4b4a      	ldr	r3, [pc, #296]	@ (8007be0 <UART_SetConfig+0x19c>)
 8007ab6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ab8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8007abc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007ac0:	d07a      	beq.n	8007bb8 <UART_SetConfig+0x174>
 8007ac2:	d80a      	bhi.n	8007ada <UART_SetConfig+0x96>
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	f000 8083 	beq.w	8007bd0 <UART_SetConfig+0x18c>
 8007aca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007ace:	d0e7      	beq.n	8007aa0 <UART_SetConfig+0x5c>
        ret = HAL_ERROR;
 8007ad0:	2001      	movs	r0, #1
  huart->RxISR = NULL;
 8007ad2:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 8007ad4:	e9c4 331a 	strd	r3, r3, [r4, #104]	@ 0x68
}
 8007ad8:	bd38      	pop	{r3, r4, r5, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007ada:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007ade:	d1f7      	bne.n	8007ad0 <UART_SetConfig+0x8c>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007ae0:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8007ae4:	4840      	ldr	r0, [pc, #256]	@ (8007be8 <UART_SetConfig+0x1a4>)
 8007ae6:	d156      	bne.n	8007b96 <UART_SetConfig+0x152>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007ae8:	6862      	ldr	r2, [r4, #4]
 8007aea:	0853      	lsrs	r3, r2, #1
 8007aec:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8007af0:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007af4:	f64f 72ef 	movw	r2, #65519	@ 0xffef
 8007af8:	f1a3 0110 	sub.w	r1, r3, #16
 8007afc:	4291      	cmp	r1, r2
 8007afe:	d8e7      	bhi.n	8007ad0 <UART_SetConfig+0x8c>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007b00:	f023 020f 	bic.w	r2, r3, #15
        huart->Instance->BRR = brrtemp;
 8007b04:	6821      	ldr	r1, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007b06:	b292      	uxth	r2, r2
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007b08:	f3c3 0342 	ubfx	r3, r3, #1, #3
        huart->Instance->BRR = brrtemp;
 8007b0c:	4313      	orrs	r3, r2
 8007b0e:	60cb      	str	r3, [r1, #12]
 8007b10:	e03b      	b.n	8007b8a <UART_SetConfig+0x146>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007b12:	4a36      	ldr	r2, [pc, #216]	@ (8007bec <UART_SetConfig+0x1a8>)
 8007b14:	4293      	cmp	r3, r2
 8007b16:	d10f      	bne.n	8007b38 <UART_SetConfig+0xf4>
 8007b18:	4b31      	ldr	r3, [pc, #196]	@ (8007be0 <UART_SetConfig+0x19c>)
 8007b1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b1c:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8007b20:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8007b24:	d048      	beq.n	8007bb8 <UART_SetConfig+0x174>
 8007b26:	d804      	bhi.n	8007b32 <UART_SetConfig+0xee>
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d051      	beq.n	8007bd0 <UART_SetConfig+0x18c>
 8007b2c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007b30:	e7cd      	b.n	8007ace <UART_SetConfig+0x8a>
 8007b32:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8007b36:	e7d2      	b.n	8007ade <UART_SetConfig+0x9a>
 8007b38:	4a2d      	ldr	r2, [pc, #180]	@ (8007bf0 <UART_SetConfig+0x1ac>)
 8007b3a:	4293      	cmp	r3, r2
 8007b3c:	d10f      	bne.n	8007b5e <UART_SetConfig+0x11a>
 8007b3e:	4b28      	ldr	r3, [pc, #160]	@ (8007be0 <UART_SetConfig+0x19c>)
 8007b40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b42:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8007b46:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007b4a:	d035      	beq.n	8007bb8 <UART_SetConfig+0x174>
 8007b4c:	d804      	bhi.n	8007b58 <UART_SetConfig+0x114>
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d03e      	beq.n	8007bd0 <UART_SetConfig+0x18c>
 8007b52:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007b56:	e7ba      	b.n	8007ace <UART_SetConfig+0x8a>
 8007b58:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007b5c:	e7bf      	b.n	8007ade <UART_SetConfig+0x9a>
 8007b5e:	4a25      	ldr	r2, [pc, #148]	@ (8007bf4 <UART_SetConfig+0x1b0>)
 8007b60:	4293      	cmp	r3, r2
 8007b62:	d1b5      	bne.n	8007ad0 <UART_SetConfig+0x8c>
 8007b64:	4b1e      	ldr	r3, [pc, #120]	@ (8007be0 <UART_SetConfig+0x19c>)
 8007b66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b68:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8007b6c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007b70:	d022      	beq.n	8007bb8 <UART_SetConfig+0x174>
 8007b72:	d803      	bhi.n	8007b7c <UART_SetConfig+0x138>
 8007b74:	b363      	cbz	r3, 8007bd0 <UART_SetConfig+0x18c>
 8007b76:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007b7a:	e7a8      	b.n	8007ace <UART_SetConfig+0x8a>
 8007b7c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8007b80:	e7ad      	b.n	8007ade <UART_SetConfig+0x9a>
        pclk = HAL_RCC_GetPCLK2Freq();
 8007b82:	f7fe fcc1 	bl	8006508 <HAL_RCC_GetPCLK2Freq>
    if (pclk != 0U)
 8007b86:	2800      	cmp	r0, #0
 8007b88:	d1ae      	bne.n	8007ae8 <UART_SetConfig+0xa4>
        pclk = (uint32_t) HSI_VALUE;
 8007b8a:	2000      	movs	r0, #0
 8007b8c:	e7a1      	b.n	8007ad2 <UART_SetConfig+0x8e>
        pclk = HAL_RCC_GetPCLK1Freq();
 8007b8e:	f7fe fca3 	bl	80064d8 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8007b92:	2800      	cmp	r0, #0
 8007b94:	d0f9      	beq.n	8007b8a <UART_SetConfig+0x146>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007b96:	6862      	ldr	r2, [r4, #4]
 8007b98:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 8007b9c:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007ba0:	f64f 72ef 	movw	r2, #65519	@ 0xffef
 8007ba4:	f1a3 0110 	sub.w	r1, r3, #16
 8007ba8:	4291      	cmp	r1, r2
 8007baa:	d891      	bhi.n	8007ad0 <UART_SetConfig+0x8c>
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007bac:	6822      	ldr	r2, [r4, #0]
 8007bae:	60d3      	str	r3, [r2, #12]
 8007bb0:	e7eb      	b.n	8007b8a <UART_SetConfig+0x146>
        pclk = HAL_RCC_GetSysClockFreq();
 8007bb2:	f7fe fbc5 	bl	8006340 <HAL_RCC_GetSysClockFreq>
        break;
 8007bb6:	e7ec      	b.n	8007b92 <UART_SetConfig+0x14e>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007bb8:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8007bbc:	d094      	beq.n	8007ae8 <UART_SetConfig+0xa4>
 8007bbe:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8007bc2:	e7e8      	b.n	8007b96 <UART_SetConfig+0x152>
 8007bc4:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8007bc8:	d0db      	beq.n	8007b82 <UART_SetConfig+0x13e>
        pclk = HAL_RCC_GetPCLK2Freq();
 8007bca:	f7fe fc9d 	bl	8006508 <HAL_RCC_GetPCLK2Freq>
        break;
 8007bce:	e7e0      	b.n	8007b92 <UART_SetConfig+0x14e>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007bd0:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8007bd4:	d1db      	bne.n	8007b8e <UART_SetConfig+0x14a>
        pclk = HAL_RCC_GetPCLK1Freq();
 8007bd6:	f7fe fc7f 	bl	80064d8 <HAL_RCC_GetPCLK1Freq>
        break;
 8007bda:	e7d4      	b.n	8007b86 <UART_SetConfig+0x142>
 8007bdc:	40013800 	.word	0x40013800
 8007be0:	40021000 	.word	0x40021000
 8007be4:	40004400 	.word	0x40004400
 8007be8:	007a1200 	.word	0x007a1200
 8007bec:	40004800 	.word	0x40004800
 8007bf0:	40004c00 	.word	0x40004c00
 8007bf4:	40005000 	.word	0x40005000

08007bf8 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007bf8:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8007bfa:	071a      	lsls	r2, r3, #28
{
 8007bfc:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007bfe:	d506      	bpl.n	8007c0e <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007c00:	6801      	ldr	r1, [r0, #0]
 8007c02:	6b44      	ldr	r4, [r0, #52]	@ 0x34
 8007c04:	684a      	ldr	r2, [r1, #4]
 8007c06:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007c0a:	4322      	orrs	r2, r4
 8007c0c:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007c0e:	07dc      	lsls	r4, r3, #31
 8007c10:	d506      	bpl.n	8007c20 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007c12:	6801      	ldr	r1, [r0, #0]
 8007c14:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 8007c16:	684a      	ldr	r2, [r1, #4]
 8007c18:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8007c1c:	4322      	orrs	r2, r4
 8007c1e:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007c20:	0799      	lsls	r1, r3, #30
 8007c22:	d506      	bpl.n	8007c32 <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007c24:	6801      	ldr	r1, [r0, #0]
 8007c26:	6ac4      	ldr	r4, [r0, #44]	@ 0x2c
 8007c28:	684a      	ldr	r2, [r1, #4]
 8007c2a:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8007c2e:	4322      	orrs	r2, r4
 8007c30:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007c32:	075a      	lsls	r2, r3, #29
 8007c34:	d506      	bpl.n	8007c44 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007c36:	6801      	ldr	r1, [r0, #0]
 8007c38:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 8007c3a:	684a      	ldr	r2, [r1, #4]
 8007c3c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8007c40:	4322      	orrs	r2, r4
 8007c42:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007c44:	06dc      	lsls	r4, r3, #27
 8007c46:	d506      	bpl.n	8007c56 <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007c48:	6801      	ldr	r1, [r0, #0]
 8007c4a:	6b84      	ldr	r4, [r0, #56]	@ 0x38
 8007c4c:	688a      	ldr	r2, [r1, #8]
 8007c4e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8007c52:	4322      	orrs	r2, r4
 8007c54:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007c56:	0699      	lsls	r1, r3, #26
 8007c58:	d506      	bpl.n	8007c68 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007c5a:	6801      	ldr	r1, [r0, #0]
 8007c5c:	6bc4      	ldr	r4, [r0, #60]	@ 0x3c
 8007c5e:	688a      	ldr	r2, [r1, #8]
 8007c60:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007c64:	4322      	orrs	r2, r4
 8007c66:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007c68:	065a      	lsls	r2, r3, #25
 8007c6a:	d50f      	bpl.n	8007c8c <UART_AdvFeatureConfig+0x94>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007c6c:	6801      	ldr	r1, [r0, #0]
 8007c6e:	6c04      	ldr	r4, [r0, #64]	@ 0x40
 8007c70:	684a      	ldr	r2, [r1, #4]
 8007c72:	f422 1280 	bic.w	r2, r2, #1048576	@ 0x100000
 8007c76:	4322      	orrs	r2, r4
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007c78:	f5b4 1f80 	cmp.w	r4, #1048576	@ 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007c7c:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007c7e:	d105      	bne.n	8007c8c <UART_AdvFeatureConfig+0x94>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007c80:	684a      	ldr	r2, [r1, #4]
 8007c82:	6c44      	ldr	r4, [r0, #68]	@ 0x44
 8007c84:	f422 02c0 	bic.w	r2, r2, #6291456	@ 0x600000
 8007c88:	4322      	orrs	r2, r4
 8007c8a:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007c8c:	061b      	lsls	r3, r3, #24
 8007c8e:	d506      	bpl.n	8007c9e <UART_AdvFeatureConfig+0xa6>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007c90:	6802      	ldr	r2, [r0, #0]
 8007c92:	6c81      	ldr	r1, [r0, #72]	@ 0x48
 8007c94:	6853      	ldr	r3, [r2, #4]
 8007c96:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 8007c9a:	430b      	orrs	r3, r1
 8007c9c:	6053      	str	r3, [r2, #4]
}
 8007c9e:	bd10      	pop	{r4, pc}

08007ca0 <UART_WaitOnFlagUntilTimeout>:
{
 8007ca0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007ca4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007ca8:	4604      	mov	r4, r0
 8007caa:	460d      	mov	r5, r1
 8007cac:	4617      	mov	r7, r2
 8007cae:	4698      	mov	r8, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007cb0:	6822      	ldr	r2, [r4, #0]
 8007cb2:	69d3      	ldr	r3, [r2, #28]
 8007cb4:	ea35 0303 	bics.w	r3, r5, r3
 8007cb8:	bf0c      	ite	eq
 8007cba:	2301      	moveq	r3, #1
 8007cbc:	2300      	movne	r3, #0
 8007cbe:	42bb      	cmp	r3, r7
 8007cc0:	d001      	beq.n	8007cc6 <UART_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
 8007cc2:	2000      	movs	r0, #0
 8007cc4:	e022      	b.n	8007d0c <UART_WaitOnFlagUntilTimeout+0x6c>
    if (Timeout != HAL_MAX_DELAY)
 8007cc6:	f1b9 3fff 	cmp.w	r9, #4294967295
 8007cca:	d0f2      	beq.n	8007cb2 <UART_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007ccc:	f7fd f98e 	bl	8004fec <HAL_GetTick>
 8007cd0:	eba0 0008 	sub.w	r0, r0, r8
 8007cd4:	4548      	cmp	r0, r9
 8007cd6:	d829      	bhi.n	8007d2c <UART_WaitOnFlagUntilTimeout+0x8c>
 8007cd8:	f1b9 0f00 	cmp.w	r9, #0
 8007cdc:	d026      	beq.n	8007d2c <UART_WaitOnFlagUntilTimeout+0x8c>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007cde:	6821      	ldr	r1, [r4, #0]
 8007ce0:	680b      	ldr	r3, [r1, #0]
 8007ce2:	075a      	lsls	r2, r3, #29
 8007ce4:	d5e4      	bpl.n	8007cb0 <UART_WaitOnFlagUntilTimeout+0x10>
 8007ce6:	2d80      	cmp	r5, #128	@ 0x80
 8007ce8:	d0e2      	beq.n	8007cb0 <UART_WaitOnFlagUntilTimeout+0x10>
 8007cea:	2d40      	cmp	r5, #64	@ 0x40
 8007cec:	d0e0      	beq.n	8007cb0 <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007cee:	69ce      	ldr	r6, [r1, #28]
 8007cf0:	f016 0608 	ands.w	r6, r6, #8
 8007cf4:	d00c      	beq.n	8007d10 <UART_WaitOnFlagUntilTimeout+0x70>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007cf6:	2508      	movs	r5, #8
          UART_EndRxTransfer(huart);
 8007cf8:	4620      	mov	r0, r4
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007cfa:	620d      	str	r5, [r1, #32]
          UART_EndRxTransfer(huart);
 8007cfc:	f7ff fd83 	bl	8007806 <UART_EndRxTransfer>
          __HAL_UNLOCK(huart);
 8007d00:	2300      	movs	r3, #0
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007d02:	f8c4 5084 	str.w	r5, [r4, #132]	@ 0x84
          __HAL_UNLOCK(huart);
 8007d06:	f884 3078 	strb.w	r3, [r4, #120]	@ 0x78
          return HAL_ERROR;
 8007d0a:	2001      	movs	r0, #1
}
 8007d0c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007d10:	69cb      	ldr	r3, [r1, #28]
 8007d12:	051b      	lsls	r3, r3, #20
 8007d14:	d5cc      	bpl.n	8007cb0 <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007d16:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8007d1a:	620b      	str	r3, [r1, #32]
          UART_EndRxTransfer(huart);
 8007d1c:	4620      	mov	r0, r4
 8007d1e:	f7ff fd72 	bl	8007806 <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007d22:	2320      	movs	r3, #32
 8007d24:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
          __HAL_UNLOCK(huart);
 8007d28:	f884 6078 	strb.w	r6, [r4, #120]	@ 0x78
        return HAL_TIMEOUT;
 8007d2c:	2003      	movs	r0, #3
 8007d2e:	e7ed      	b.n	8007d0c <UART_WaitOnFlagUntilTimeout+0x6c>

08007d30 <HAL_UART_Transmit>:
{
 8007d30:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007d34:	4698      	mov	r8, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8007d36:	6fc3      	ldr	r3, [r0, #124]	@ 0x7c
 8007d38:	2b20      	cmp	r3, #32
{
 8007d3a:	4604      	mov	r4, r0
 8007d3c:	460e      	mov	r6, r1
 8007d3e:	4617      	mov	r7, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8007d40:	d143      	bne.n	8007dca <HAL_UART_Transmit+0x9a>
    if ((pData == NULL) || (Size == 0U))
 8007d42:	2900      	cmp	r1, #0
 8007d44:	d043      	beq.n	8007dce <HAL_UART_Transmit+0x9e>
 8007d46:	2a00      	cmp	r2, #0
 8007d48:	d041      	beq.n	8007dce <HAL_UART_Transmit+0x9e>
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007d4a:	2321      	movs	r3, #33	@ 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d4c:	2500      	movs	r5, #0
 8007d4e:	f8c0 5084 	str.w	r5, [r0, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007d52:	67c3      	str	r3, [r0, #124]	@ 0x7c
    tickstart = HAL_GetTick();
 8007d54:	f7fd f94a 	bl	8004fec <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007d58:	68a3      	ldr	r3, [r4, #8]
    huart->TxXferSize  = Size;
 8007d5a:	f8a4 7050 	strh.w	r7, [r4, #80]	@ 0x50
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007d5e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
    tickstart = HAL_GetTick();
 8007d62:	4681      	mov	r9, r0
    huart->TxXferCount = Size;
 8007d64:	f8a4 7052 	strh.w	r7, [r4, #82]	@ 0x52
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007d68:	d103      	bne.n	8007d72 <HAL_UART_Transmit+0x42>
 8007d6a:	6923      	ldr	r3, [r4, #16]
 8007d6c:	b90b      	cbnz	r3, 8007d72 <HAL_UART_Transmit+0x42>
 8007d6e:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 8007d70:	461e      	mov	r6, r3
    while (huart->TxXferCount > 0U)
 8007d72:	f8b4 2052 	ldrh.w	r2, [r4, #82]	@ 0x52
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007d76:	f8cd 8000 	str.w	r8, [sp]
    while (huart->TxXferCount > 0U)
 8007d7a:	b292      	uxth	r2, r2
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007d7c:	464b      	mov	r3, r9
    while (huart->TxXferCount > 0U)
 8007d7e:	b93a      	cbnz	r2, 8007d90 <HAL_UART_Transmit+0x60>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007d80:	2140      	movs	r1, #64	@ 0x40
 8007d82:	4620      	mov	r0, r4
 8007d84:	f7ff ff8c 	bl	8007ca0 <UART_WaitOnFlagUntilTimeout>
 8007d88:	2320      	movs	r3, #32
 8007d8a:	b940      	cbnz	r0, 8007d9e <HAL_UART_Transmit+0x6e>
    huart->gState = HAL_UART_STATE_READY;
 8007d8c:	67e3      	str	r3, [r4, #124]	@ 0x7c
    return HAL_OK;
 8007d8e:	e008      	b.n	8007da2 <HAL_UART_Transmit+0x72>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007d90:	2200      	movs	r2, #0
 8007d92:	2180      	movs	r1, #128	@ 0x80
 8007d94:	4620      	mov	r0, r4
 8007d96:	f7ff ff83 	bl	8007ca0 <UART_WaitOnFlagUntilTimeout>
 8007d9a:	b128      	cbz	r0, 8007da8 <HAL_UART_Transmit+0x78>
        huart->gState = HAL_UART_STATE_READY;
 8007d9c:	2320      	movs	r3, #32
 8007d9e:	67e3      	str	r3, [r4, #124]	@ 0x7c
        return HAL_TIMEOUT;
 8007da0:	2003      	movs	r0, #3
}
 8007da2:	b003      	add	sp, #12
 8007da4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007da8:	6822      	ldr	r2, [r4, #0]
      if (pdata8bits == NULL)
 8007daa:	b95e      	cbnz	r6, 8007dc4 <HAL_UART_Transmit+0x94>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007dac:	f835 3b02 	ldrh.w	r3, [r5], #2
 8007db0:	f3c3 0308 	ubfx	r3, r3, #0, #9
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007db4:	8513      	strh	r3, [r2, #40]	@ 0x28
      huart->TxXferCount--;
 8007db6:	f8b4 2052 	ldrh.w	r2, [r4, #82]	@ 0x52
 8007dba:	3a01      	subs	r2, #1
 8007dbc:	b292      	uxth	r2, r2
 8007dbe:	f8a4 2052 	strh.w	r2, [r4, #82]	@ 0x52
 8007dc2:	e7d6      	b.n	8007d72 <HAL_UART_Transmit+0x42>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007dc4:	f816 3b01 	ldrb.w	r3, [r6], #1
 8007dc8:	e7f4      	b.n	8007db4 <HAL_UART_Transmit+0x84>
    return HAL_BUSY;
 8007dca:	2002      	movs	r0, #2
 8007dcc:	e7e9      	b.n	8007da2 <HAL_UART_Transmit+0x72>
      return  HAL_ERROR;
 8007dce:	2001      	movs	r0, #1
 8007dd0:	e7e7      	b.n	8007da2 <HAL_UART_Transmit+0x72>

08007dd2 <UART_CheckIdleState>:
{
 8007dd2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007dd4:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007dd6:	2600      	movs	r6, #0
 8007dd8:	f8c0 6084 	str.w	r6, [r0, #132]	@ 0x84
  tickstart = HAL_GetTick();
 8007ddc:	f7fd f906 	bl	8004fec <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007de0:	6823      	ldr	r3, [r4, #0]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	071a      	lsls	r2, r3, #28
  tickstart = HAL_GetTick();
 8007de6:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007de8:	d51b      	bpl.n	8007e22 <UART_CheckIdleState+0x50>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007dea:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007dee:	9300      	str	r3, [sp, #0]
 8007df0:	4632      	mov	r2, r6
 8007df2:	4603      	mov	r3, r0
 8007df4:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007df8:	4620      	mov	r0, r4
 8007dfa:	f7ff ff51 	bl	8007ca0 <UART_WaitOnFlagUntilTimeout>
 8007dfe:	b180      	cbz	r0, 8007e22 <UART_CheckIdleState+0x50>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8007e00:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e02:	e852 3f00 	ldrex	r3, [r2]
 8007e06:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e0a:	e842 3100 	strex	r1, r3, [r2]
 8007e0e:	2900      	cmp	r1, #0
 8007e10:	d1f6      	bne.n	8007e00 <UART_CheckIdleState+0x2e>
      huart->gState = HAL_UART_STATE_READY;
 8007e12:	2320      	movs	r3, #32
 8007e14:	67e3      	str	r3, [r4, #124]	@ 0x7c
      return HAL_TIMEOUT;
 8007e16:	2003      	movs	r0, #3
      __HAL_UNLOCK(huart);
 8007e18:	2300      	movs	r3, #0
 8007e1a:	f884 3078 	strb.w	r3, [r4, #120]	@ 0x78
}
 8007e1e:	b002      	add	sp, #8
 8007e20:	bd70      	pop	{r4, r5, r6, pc}
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007e22:	6823      	ldr	r3, [r4, #0]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	075b      	lsls	r3, r3, #29
 8007e28:	d524      	bpl.n	8007e74 <UART_CheckIdleState+0xa2>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007e2a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007e2e:	9300      	str	r3, [sp, #0]
 8007e30:	2200      	movs	r2, #0
 8007e32:	462b      	mov	r3, r5
 8007e34:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007e38:	4620      	mov	r0, r4
 8007e3a:	f7ff ff31 	bl	8007ca0 <UART_WaitOnFlagUntilTimeout>
 8007e3e:	b1c8      	cbz	r0, 8007e74 <UART_CheckIdleState+0xa2>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007e40:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e42:	e852 3f00 	ldrex	r3, [r2]
 8007e46:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e4a:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 8007e4e:	6822      	ldr	r2, [r4, #0]
 8007e50:	2900      	cmp	r1, #0
 8007e52:	d1f5      	bne.n	8007e40 <UART_CheckIdleState+0x6e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e54:	f102 0308 	add.w	r3, r2, #8
 8007e58:	e853 3f00 	ldrex	r3, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e5c:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e60:	f102 0008 	add.w	r0, r2, #8
 8007e64:	e840 3100 	strex	r1, r3, [r0]
 8007e68:	2900      	cmp	r1, #0
 8007e6a:	d1f3      	bne.n	8007e54 <UART_CheckIdleState+0x82>
      huart->RxState = HAL_UART_STATE_READY;
 8007e6c:	2320      	movs	r3, #32
 8007e6e:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
      return HAL_TIMEOUT;
 8007e72:	e7d0      	b.n	8007e16 <UART_CheckIdleState+0x44>
  huart->gState = HAL_UART_STATE_READY;
 8007e74:	2320      	movs	r3, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e76:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8007e78:	67e3      	str	r3, [r4, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007e7a:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e7e:	6620      	str	r0, [r4, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007e80:	6660      	str	r0, [r4, #100]	@ 0x64
  return HAL_OK;
 8007e82:	e7c9      	b.n	8007e18 <UART_CheckIdleState+0x46>

08007e84 <HAL_UART_Init>:
{
 8007e84:	b510      	push	{r4, lr}
  if (huart == NULL)
 8007e86:	4604      	mov	r4, r0
 8007e88:	b340      	cbz	r0, 8007edc <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 8007e8a:	6fc3      	ldr	r3, [r0, #124]	@ 0x7c
 8007e8c:	b91b      	cbnz	r3, 8007e96 <HAL_UART_Init+0x12>
    huart->Lock = HAL_UNLOCKED;
 8007e8e:	f880 3078 	strb.w	r3, [r0, #120]	@ 0x78
    HAL_UART_MspInit(huart);
 8007e92:	f7fc fe37 	bl	8004b04 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8007e96:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8007e98:	2324      	movs	r3, #36	@ 0x24
 8007e9a:	67e3      	str	r3, [r4, #124]	@ 0x7c
  __HAL_UART_DISABLE(huart);
 8007e9c:	6813      	ldr	r3, [r2, #0]
 8007e9e:	f023 0301 	bic.w	r3, r3, #1
 8007ea2:	6013      	str	r3, [r2, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007ea4:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8007ea6:	b113      	cbz	r3, 8007eae <HAL_UART_Init+0x2a>
    UART_AdvFeatureConfig(huart);
 8007ea8:	4620      	mov	r0, r4
 8007eaa:	f7ff fea5 	bl	8007bf8 <UART_AdvFeatureConfig>
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007eae:	4620      	mov	r0, r4
 8007eb0:	f7ff fdc8 	bl	8007a44 <UART_SetConfig>
 8007eb4:	2801      	cmp	r0, #1
 8007eb6:	d011      	beq.n	8007edc <HAL_UART_Init+0x58>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007eb8:	6823      	ldr	r3, [r4, #0]
 8007eba:	685a      	ldr	r2, [r3, #4]
 8007ebc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007ec0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007ec2:	689a      	ldr	r2, [r3, #8]
 8007ec4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007ec8:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8007eca:	681a      	ldr	r2, [r3, #0]
 8007ecc:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 8007ed0:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 8007ed2:	601a      	str	r2, [r3, #0]
}
 8007ed4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 8007ed8:	f7ff bf7b 	b.w	8007dd2 <UART_CheckIdleState>
}
 8007edc:	2001      	movs	r0, #1
 8007ede:	bd10      	pop	{r4, pc}

08007ee0 <UART_Start_Receive_DMA>:
{
 8007ee0:	b570      	push	{r4, r5, r6, lr}
 8007ee2:	4613      	mov	r3, r2
 8007ee4:	4604      	mov	r4, r0
  huart->RxXferSize = Size;
 8007ee6:	f8a0 2058 	strh.w	r2, [r0, #88]	@ 0x58
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007eea:	2200      	movs	r2, #0
  huart->pRxBuffPtr = pData;
 8007eec:	6541      	str	r1, [r0, #84]	@ 0x54
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007eee:	f8c0 2084 	str.w	r2, [r0, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007ef2:	2022      	movs	r0, #34	@ 0x22
 8007ef4:	f8c4 0080 	str.w	r0, [r4, #128]	@ 0x80
  if (huart->hdmarx != NULL)
 8007ef8:	6f60      	ldr	r0, [r4, #116]	@ 0x74
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8007efa:	6825      	ldr	r5, [r4, #0]
  if (huart->hdmarx != NULL)
 8007efc:	b1a0      	cbz	r0, 8007f28 <UART_Start_Receive_DMA+0x48>
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007efe:	4e1c      	ldr	r6, [pc, #112]	@ (8007f70 <UART_Start_Receive_DMA+0x90>)
 8007f00:	6286      	str	r6, [r0, #40]	@ 0x28
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007f02:	4e1c      	ldr	r6, [pc, #112]	@ (8007f74 <UART_Start_Receive_DMA+0x94>)
 8007f04:	62c6      	str	r6, [r0, #44]	@ 0x2c
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007f06:	4e1c      	ldr	r6, [pc, #112]	@ (8007f78 <UART_Start_Receive_DMA+0x98>)
    huart->hdmarx->XferAbortCallback = NULL;
 8007f08:	e9c0 620c 	strd	r6, r2, [r0, #48]	@ 0x30
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8007f0c:	460a      	mov	r2, r1
 8007f0e:	f105 0124 	add.w	r1, r5, #36	@ 0x24
 8007f12:	f7fd fe45 	bl	8005ba0 <HAL_DMA_Start_IT>
 8007f16:	b138      	cbz	r0, 8007f28 <UART_Start_Receive_DMA+0x48>
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007f18:	2310      	movs	r3, #16
 8007f1a:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
      huart->RxState = HAL_UART_STATE_READY;
 8007f1e:	2320      	movs	r3, #32
 8007f20:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
      return HAL_ERROR;
 8007f24:	2001      	movs	r0, #1
}
 8007f26:	bd70      	pop	{r4, r5, r6, pc}
  if (huart->Init.Parity != UART_PARITY_NONE)
 8007f28:	6922      	ldr	r2, [r4, #16]
 8007f2a:	6823      	ldr	r3, [r4, #0]
 8007f2c:	b13a      	cbz	r2, 8007f3e <UART_Start_Receive_DMA+0x5e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f2e:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007f32:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f36:	e843 2100 	strex	r1, r2, [r3]
 8007f3a:	2900      	cmp	r1, #0
 8007f3c:	d1f7      	bne.n	8007f2e <UART_Start_Receive_DMA+0x4e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f3e:	f103 0208 	add.w	r2, r3, #8
 8007f42:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f46:	f042 0201 	orr.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f4a:	f103 0008 	add.w	r0, r3, #8
 8007f4e:	e840 2100 	strex	r1, r2, [r0]
 8007f52:	2900      	cmp	r1, #0
 8007f54:	d1f3      	bne.n	8007f3e <UART_Start_Receive_DMA+0x5e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f56:	f103 0208 	add.w	r2, r3, #8
 8007f5a:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007f5e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f62:	f103 0108 	add.w	r1, r3, #8
 8007f66:	e841 2000 	strex	r0, r2, [r1]
 8007f6a:	2800      	cmp	r0, #0
 8007f6c:	d1f3      	bne.n	8007f56 <UART_Start_Receive_DMA+0x76>
 8007f6e:	e7da      	b.n	8007f26 <UART_Start_Receive_DMA+0x46>
 8007f70:	080079b7 	.word	0x080079b7
 8007f74:	08007997 	.word	0x08007997
 8007f78:	0800793f 	.word	0x0800793f

08007f7c <HAL_UART_Receive_DMA>:
  if (huart->RxState == HAL_UART_STATE_READY)
 8007f7c:	f8d0 3080 	ldr.w	r3, [r0, #128]	@ 0x80
 8007f80:	2b20      	cmp	r3, #32
{
 8007f82:	b430      	push	{r4, r5}
  if (huart->RxState == HAL_UART_STATE_READY)
 8007f84:	d112      	bne.n	8007fac <HAL_UART_Receive_DMA+0x30>
    if ((pData == NULL) || (Size == 0U))
 8007f86:	b1a1      	cbz	r1, 8007fb2 <HAL_UART_Receive_DMA+0x36>
 8007f88:	b19a      	cbz	r2, 8007fb2 <HAL_UART_Receive_DMA+0x36>
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f8a:	2300      	movs	r3, #0
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007f8c:	6804      	ldr	r4, [r0, #0]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f8e:	6603      	str	r3, [r0, #96]	@ 0x60
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007f90:	6863      	ldr	r3, [r4, #4]
 8007f92:	021b      	lsls	r3, r3, #8
 8007f94:	d507      	bpl.n	8007fa6 <HAL_UART_Receive_DMA+0x2a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f96:	e854 3f00 	ldrex	r3, [r4]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007f9a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f9e:	e844 3500 	strex	r5, r3, [r4]
 8007fa2:	2d00      	cmp	r5, #0
 8007fa4:	d1f7      	bne.n	8007f96 <HAL_UART_Receive_DMA+0x1a>
}
 8007fa6:	bc30      	pop	{r4, r5}
    return (UART_Start_Receive_DMA(huart, pData, Size));
 8007fa8:	f7ff bf9a 	b.w	8007ee0 <UART_Start_Receive_DMA>
    return HAL_BUSY;
 8007fac:	2002      	movs	r0, #2
}
 8007fae:	bc30      	pop	{r4, r5}
 8007fb0:	4770      	bx	lr
      return HAL_ERROR;
 8007fb2:	2001      	movs	r0, #1
 8007fb4:	e7fb      	b.n	8007fae <HAL_UART_Receive_DMA+0x32>

08007fb6 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8007fb6:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 8007fb8:	f001 f81a 	bl	8008ff0 <vTaskStartScheduler>
  
  return osOK;
}
 8007fbc:	2000      	movs	r0, #0
 8007fbe:	bd08      	pop	{r3, pc}

08007fc0 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8007fc0:	b570      	push	{r4, r5, r6, lr}
 8007fc2:	4605      	mov	r5, r0
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8007fc4:	6946      	ldr	r6, [r0, #20]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007fc6:	692a      	ldr	r2, [r5, #16]
 8007fc8:	f9b5 4008 	ldrsh.w	r4, [r5, #8]
{
 8007fcc:	460b      	mov	r3, r1
 8007fce:	b086      	sub	sp, #24
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007fd0:	e9d0 1000 	ldrd	r1, r0, [r0]
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8007fd4:	b176      	cbz	r6, 8007ff4 <osThreadCreate+0x34>
 8007fd6:	69ad      	ldr	r5, [r5, #24]
 8007fd8:	b165      	cbz	r5, 8007ff4 <osThreadCreate+0x34>
  if (priority != osPriorityError) {
 8007fda:	2c84      	cmp	r4, #132	@ 0x84
    fpriority += (priority - osPriorityIdle);
 8007fdc:	bf14      	ite	ne
 8007fde:	3403      	addne	r4, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8007fe0:	2400      	moveq	r4, #0
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007fe2:	e9cd 6501 	strd	r6, r5, [sp, #4]
 8007fe6:	9400      	str	r4, [sp, #0]
 8007fe8:	f000 ff9c 	bl	8008f24 <xTaskCreateStatic>
 8007fec:	9005      	str	r0, [sp, #20]
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8007fee:	9805      	ldr	r0, [sp, #20]
}
 8007ff0:	b006      	add	sp, #24
 8007ff2:	bd70      	pop	{r4, r5, r6, pc}
  if (priority != osPriorityError) {
 8007ff4:	2c84      	cmp	r4, #132	@ 0x84
    fpriority += (priority - osPriorityIdle);
 8007ff6:	bf14      	ite	ne
 8007ff8:	3403      	addne	r4, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8007ffa:	2400      	moveq	r4, #0
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007ffc:	ad05      	add	r5, sp, #20
 8007ffe:	e9cd 4500 	strd	r4, r5, [sp]
 8008002:	b292      	uxth	r2, r2
 8008004:	f000 ffc5 	bl	8008f92 <xTaskCreate>
 8008008:	2801      	cmp	r0, #1
 800800a:	d0f0      	beq.n	8007fee <osThreadCreate+0x2e>
      return NULL;
 800800c:	2000      	movs	r0, #0
 800800e:	e7ef      	b.n	8007ff0 <osThreadCreate+0x30>

08008010 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8008010:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8008012:	2801      	cmp	r0, #1
 8008014:	bf38      	it	cc
 8008016:	2001      	movcc	r0, #1
 8008018:	f001 f942 	bl	80092a0 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800801c:	2000      	movs	r0, #0
 800801e:	bd08      	pop	{r3, pc}

08008020 <osMutexCreate>:
{
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8008020:	6841      	ldr	r1, [r0, #4]
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8008022:	2001      	movs	r0, #1
  if (mutex_def->controlblock != NULL) {
 8008024:	b109      	cbz	r1, 800802a <osMutexCreate+0xa>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8008026:	f000 bb87 	b.w	8008738 <xQueueCreateMutexStatic>
     }
  else {
    return xSemaphoreCreateMutex(); 
 800802a:	f000 bb9a 	b.w	8008762 <xQueueCreateMutex>

0800802e <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 800802e:	b507      	push	{r0, r1, r2, lr}
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8008030:	2300      	movs	r3, #0
 8008032:	9301      	str	r3, [sp, #4]
  
  
  if (mutex_id == NULL) {
 8008034:	b1f8      	cbz	r0, 8008076 <osMutexWait+0x48>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008036:	f3ef 8205 	mrs	r2, IPSR
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 800803a:	b1ba      	cbz	r2, 800806c <osMutexWait+0x3e>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800803c:	aa01      	add	r2, sp, #4
 800803e:	4619      	mov	r1, r3
 8008040:	f000 fdb1 	bl	8008ba6 <xQueueReceiveFromISR>
 8008044:	2801      	cmp	r0, #1
 8008046:	d003      	beq.n	8008050 <osMutexWait+0x22>
      return osErrorOS;
 8008048:	20ff      	movs	r0, #255	@ 0xff
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
    return osErrorOS;
  }
  
  return osOK;
}
 800804a:	b003      	add	sp, #12
 800804c:	f85d fb04 	ldr.w	pc, [sp], #4
	portEND_SWITCHING_ISR(taskWoken);
 8008050:	9b01      	ldr	r3, [sp, #4]
 8008052:	b14b      	cbz	r3, 8008068 <osMutexWait+0x3a>
 8008054:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8008058:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800805c:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8008060:	f3bf 8f4f 	dsb	sy
 8008064:	f3bf 8f6f 	isb	sy
  return osOK;
 8008068:	2000      	movs	r0, #0
 800806a:	e7ee      	b.n	800804a <osMutexWait+0x1c>
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 800806c:	f000 fcde 	bl	8008a2c <xQueueSemaphoreTake>
 8008070:	2801      	cmp	r0, #1
 8008072:	d0f9      	beq.n	8008068 <osMutexWait+0x3a>
 8008074:	e7e8      	b.n	8008048 <osMutexWait+0x1a>
    return osErrorParameter;
 8008076:	2080      	movs	r0, #128	@ 0x80
 8008078:	e7e7      	b.n	800804a <osMutexWait+0x1c>

0800807a <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 800807a:	b507      	push	{r0, r1, r2, lr}
  osStatus result = osOK;
  portBASE_TYPE taskWoken = pdFALSE;
 800807c:	2300      	movs	r3, #0
 800807e:	9301      	str	r3, [sp, #4]
 8008080:	f3ef 8305 	mrs	r3, IPSR
  
  if (inHandlerMode()) {
 8008084:	b1b3      	cbz	r3, 80080b4 <osMutexRelease+0x3a>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8008086:	a901      	add	r1, sp, #4
 8008088:	f000 fbe1 	bl	800884e <xQueueGiveFromISR>
 800808c:	2801      	cmp	r0, #1
 800808e:	d003      	beq.n	8008098 <osMutexRelease+0x1e>
      return osErrorOS;
 8008090:	20ff      	movs	r0, #255	@ 0xff
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
  {
    result = osErrorOS;
  }
  return result;
}
 8008092:	b003      	add	sp, #12
 8008094:	f85d fb04 	ldr.w	pc, [sp], #4
    portEND_SWITCHING_ISR(taskWoken);
 8008098:	9b01      	ldr	r3, [sp, #4]
 800809a:	b14b      	cbz	r3, 80080b0 <osMutexRelease+0x36>
 800809c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80080a0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80080a4:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80080a8:	f3bf 8f4f 	dsb	sy
 80080ac:	f3bf 8f6f 	isb	sy
  osStatus result = osOK;
 80080b0:	2000      	movs	r0, #0
 80080b2:	e7ee      	b.n	8008092 <osMutexRelease+0x18>
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 80080b4:	461a      	mov	r2, r3
 80080b6:	4619      	mov	r1, r3
 80080b8:	f000 fa8c 	bl	80085d4 <xQueueGenericSend>
 80080bc:	2801      	cmp	r0, #1
 80080be:	d1e7      	bne.n	8008090 <osMutexRelease+0x16>
 80080c0:	e7f6      	b.n	80080b0 <osMutexRelease+0x36>

080080c2 <osPoolCreate>:
* @param  pool_def      memory pool definition referenced with \ref osPool.
* @retval  memory pool ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osPoolCreate shall be consistent in every CMSIS-RTOS.
*/
osPoolId osPoolCreate (const osPoolDef_t *pool_def)
{
 80080c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
  osPoolId thePool;
  int itemSize = 4 * ((pool_def->item_sz + 3) / 4);
 80080c4:	6847      	ldr	r7, [r0, #4]
{
 80080c6:	4606      	mov	r6, r0
  uint32_t i;
  
  /* First have to allocate memory for the pool control block. */
 thePool = pvPortMalloc(sizeof(os_pool_cb_t));
 80080c8:	2014      	movs	r0, #20
 80080ca:	f001 fcd9 	bl	8009a80 <pvPortMalloc>

  
  if (thePool) {
 80080ce:	4604      	mov	r4, r0
 80080d0:	b1b8      	cbz	r0, 8008102 <osPoolCreate+0x40>
    thePool->pool_sz = pool_def->pool_sz;
 80080d2:	6830      	ldr	r0, [r6, #0]
  int itemSize = 4 * ((pool_def->item_sz + 3) / 4);
 80080d4:	3703      	adds	r7, #3
 80080d6:	f027 0703 	bic.w	r7, r7, #3
    thePool->item_sz = itemSize;
    thePool->currentIndex = 0;
 80080da:	2500      	movs	r5, #0
    thePool->item_sz = itemSize;
 80080dc:	e9c4 0702 	strd	r0, r7, [r4, #8]
    thePool->currentIndex = 0;
 80080e0:	6125      	str	r5, [r4, #16]
    
    /* Memory for markers */
    thePool->markers = pvPortMalloc(pool_def->pool_sz);
 80080e2:	f001 fccd 	bl	8009a80 <pvPortMalloc>
 80080e6:	6060      	str	r0, [r4, #4]
   
    if (thePool->markers) {
 80080e8:	b140      	cbz	r0, 80080fc <osPoolCreate+0x3a>
      /* Now allocate the pool itself. */
     thePool->pool = pvPortMalloc(pool_def->pool_sz * itemSize);
 80080ea:	6830      	ldr	r0, [r6, #0]
 80080ec:	4378      	muls	r0, r7
 80080ee:	f001 fcc7 	bl	8009a80 <pvPortMalloc>
 80080f2:	6020      	str	r0, [r4, #0]
      
      if (thePool->pool) {
 80080f4:	b978      	cbnz	r0, 8008116 <osPoolCreate+0x54>
        for (i = 0; i < pool_def->pool_sz; i++) {
          thePool->markers[i] = 0;
        }
      }
      else {
        vPortFree(thePool->markers);
 80080f6:	6860      	ldr	r0, [r4, #4]
 80080f8:	f001 fd54 	bl	8009ba4 <vPortFree>
        vPortFree(thePool);
 80080fc:	4620      	mov	r0, r4
 80080fe:	f001 fd51 	bl	8009ba4 <vPortFree>
 thePool = pvPortMalloc(sizeof(os_pool_cb_t));
 8008102:	2400      	movs	r4, #0
 8008104:	e005      	b.n	8008112 <osPoolCreate+0x50>
          thePool->markers[i] = 0;
 8008106:	6862      	ldr	r2, [r4, #4]
 8008108:	54d1      	strb	r1, [r2, r3]
        for (i = 0; i < pool_def->pool_sz; i++) {
 800810a:	3301      	adds	r3, #1
 800810c:	6832      	ldr	r2, [r6, #0]
 800810e:	429a      	cmp	r2, r3
 8008110:	d8f9      	bhi.n	8008106 <osPoolCreate+0x44>
  return thePool;
 
#else
  return NULL;
#endif
}
 8008112:	4620      	mov	r0, r4
 8008114:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        for (i = 0; i < pool_def->pool_sz; i++) {
 8008116:	462b      	mov	r3, r5
          thePool->markers[i] = 0;
 8008118:	4629      	mov	r1, r5
 800811a:	e7f7      	b.n	800810c <osPoolCreate+0x4a>

0800811c <osPoolAlloc>:
* @param pool_id       memory pool ID obtain referenced with \ref osPoolCreate.
* @retval  address of the allocated memory block or NULL in case of no memory available.
* @note   MUST REMAIN UNCHANGED: \b osPoolAlloc shall be consistent in every CMSIS-RTOS.
*/
void *osPoolAlloc (osPoolId pool_id)
{
 800811c:	b570      	push	{r4, r5, r6, lr}
 800811e:	4604      	mov	r4, r0
 8008120:	f3ef 8605 	mrs	r6, IPSR
  int dummy = 0;
  void *p = NULL;
  uint32_t i;
  uint32_t index;
  
  if (inHandlerMode()) {
 8008124:	b186      	cbz	r6, 8008148 <osPoolAlloc+0x2c>
	__asm volatile
 8008126:	f3ef 8511 	mrs	r5, BASEPRI
 800812a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800812e:	f383 8811 	msr	BASEPRI, r3
 8008132:	f3bf 8f6f 	isb	sy
 8008136:	f3bf 8f4f 	dsb	sy
    dummy = portSET_INTERRUPT_MASK_FROM_ISR();
 800813a:	462e      	mov	r6, r5
  }
  else {
    vPortEnterCritical();
  }
  
  for (i = 0; i < pool_id->pool_sz; i++) {
 800813c:	68a1      	ldr	r1, [r4, #8]
 800813e:	2200      	movs	r2, #0
 8008140:	4291      	cmp	r1, r2
 8008142:	d104      	bne.n	800814e <osPoolAlloc+0x32>
  void *p = NULL;
 8008144:	2500      	movs	r5, #0
 8008146:	e012      	b.n	800816e <osPoolAlloc+0x52>
    vPortEnterCritical();
 8008148:	f001 fb34 	bl	80097b4 <vPortEnterCritical>
 800814c:	e7f6      	b.n	800813c <osPoolAlloc+0x20>
    index = (pool_id->currentIndex + i) % pool_id->pool_sz;
 800814e:	6923      	ldr	r3, [r4, #16]
 8008150:	4413      	add	r3, r2
 8008152:	fbb3 f0f1 	udiv	r0, r3, r1
 8008156:	fb01 3310 	mls	r3, r1, r0, r3
    
    if (pool_id->markers[index] == 0) {
 800815a:	6860      	ldr	r0, [r4, #4]
 800815c:	5cc5      	ldrb	r5, [r0, r3]
 800815e:	b96d      	cbnz	r5, 800817c <osPoolAlloc+0x60>
      pool_id->markers[index] = 1;
 8008160:	2201      	movs	r2, #1
 8008162:	54c2      	strb	r2, [r0, r3]
      p = (void *)((uint32_t)(pool_id->pool) + (index * pool_id->item_sz));
 8008164:	68e2      	ldr	r2, [r4, #12]
 8008166:	6825      	ldr	r5, [r4, #0]
      pool_id->currentIndex = index;
 8008168:	6123      	str	r3, [r4, #16]
      p = (void *)((uint32_t)(pool_id->pool) + (index * pool_id->item_sz));
 800816a:	fb02 5503 	mla	r5, r2, r3, r5
 800816e:	f3ef 8305 	mrs	r3, IPSR
      break;
    }
  }
  
  if (inHandlerMode()) {
 8008172:	b12b      	cbz	r3, 8008180 <osPoolAlloc+0x64>
	__asm volatile
 8008174:	f386 8811 	msr	BASEPRI, r6
  else {
    vPortExitCritical();
  }
  
  return p;
}
 8008178:	4628      	mov	r0, r5
 800817a:	bd70      	pop	{r4, r5, r6, pc}
  for (i = 0; i < pool_id->pool_sz; i++) {
 800817c:	3201      	adds	r2, #1
 800817e:	e7df      	b.n	8008140 <osPoolAlloc+0x24>
    vPortExitCritical();
 8008180:	f001 fb38 	bl	80097f4 <vPortExitCritical>
  return p;
 8008184:	e7f8      	b.n	8008178 <osPoolAlloc+0x5c>

08008186 <osPoolFree>:
*/
osStatus osPoolFree (osPoolId pool_id, void *block)
{
  uint32_t index;
  
  if (pool_id == NULL) {
 8008186:	4603      	mov	r3, r0
 8008188:	b180      	cbz	r0, 80081ac <osPoolFree+0x26>
    return osErrorParameter;
  }
  
  if (block == NULL) {
 800818a:	b179      	cbz	r1, 80081ac <osPoolFree+0x26>
    return osErrorParameter;
  }
  
  if (block < pool_id->pool) {
 800818c:	6802      	ldr	r2, [r0, #0]
 800818e:	428a      	cmp	r2, r1
 8008190:	d80c      	bhi.n	80081ac <osPoolFree+0x26>
    return osErrorParameter;
  }
  
  index = (uint32_t)block - (uint32_t)(pool_id->pool);
  if (index % pool_id->item_sz) {
 8008192:	68c0      	ldr	r0, [r0, #12]
  index = (uint32_t)block - (uint32_t)(pool_id->pool);
 8008194:	1a89      	subs	r1, r1, r2
  if (index % pool_id->item_sz) {
 8008196:	fbb1 f2f0 	udiv	r2, r1, r0
 800819a:	fb00 1012 	mls	r0, r0, r2, r1
 800819e:	b928      	cbnz	r0, 80081ac <osPoolFree+0x26>
    return osErrorParameter;
  }
  index = index / pool_id->item_sz;
  if (index >= pool_id->pool_sz) {
 80081a0:	6899      	ldr	r1, [r3, #8]
 80081a2:	4291      	cmp	r1, r2
 80081a4:	d902      	bls.n	80081ac <osPoolFree+0x26>
    return osErrorParameter;
  }
  
  pool_id->markers[index] = 0;
 80081a6:	685b      	ldr	r3, [r3, #4]
 80081a8:	5498      	strb	r0, [r3, r2]
  
  return osOK;
 80081aa:	4770      	bx	lr
    return osErrorParameter;
 80081ac:	2080      	movs	r0, #128	@ 0x80
}
 80081ae:	4770      	bx	lr

080081b0 <osMailCreate>:
* @param   thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval mail queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMailCreate shall be consistent in every CMSIS-RTOS.
*/
osMailQId osMailCreate (const osMailQDef_t *queue_def, osThreadId thread_id)
{
 80081b0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
  (void) thread_id;
  
  osPoolDef_t pool_def = {queue_def->queue_sz, queue_def->item_sz, NULL};
 80081b2:	6803      	ldr	r3, [r0, #0]
  
  /* Create a mail queue control block */

  *(queue_def->cb) = pvPortMalloc(sizeof(struct os_mailQ_cb));
 80081b4:	6885      	ldr	r5, [r0, #8]
  osPoolDef_t pool_def = {queue_def->queue_sz, queue_def->item_sz, NULL};
 80081b6:	9301      	str	r3, [sp, #4]
{
 80081b8:	4604      	mov	r4, r0
  osPoolDef_t pool_def = {queue_def->queue_sz, queue_def->item_sz, NULL};
 80081ba:	6843      	ldr	r3, [r0, #4]
 80081bc:	9302      	str	r3, [sp, #8]
 80081be:	2600      	movs	r6, #0
  *(queue_def->cb) = pvPortMalloc(sizeof(struct os_mailQ_cb));
 80081c0:	200c      	movs	r0, #12
  osPoolDef_t pool_def = {queue_def->queue_sz, queue_def->item_sz, NULL};
 80081c2:	9603      	str	r6, [sp, #12]
  *(queue_def->cb) = pvPortMalloc(sizeof(struct os_mailQ_cb));
 80081c4:	f001 fc5c 	bl	8009a80 <pvPortMalloc>

  if (*(queue_def->cb) == NULL) {
 80081c8:	68a3      	ldr	r3, [r4, #8]
  *(queue_def->cb) = pvPortMalloc(sizeof(struct os_mailQ_cb));
 80081ca:	6028      	str	r0, [r5, #0]
  if (*(queue_def->cb) == NULL) {
 80081cc:	681d      	ldr	r5, [r3, #0]
 80081ce:	b16d      	cbz	r5, 80081ec <osMailCreate+0x3c>
    return NULL;
  }
  (*(queue_def->cb))->queue_def = queue_def;
 80081d0:	602c      	str	r4, [r5, #0]
  
  /* Create a queue in FreeRTOS */
  (*(queue_def->cb))->handle = xQueueCreate(queue_def->queue_sz, sizeof(void *));
 80081d2:	6820      	ldr	r0, [r4, #0]
 80081d4:	4632      	mov	r2, r6
 80081d6:	2104      	movs	r1, #4
 80081d8:	f000 f9d8 	bl	800858c <xQueueGenericCreate>


  if ((*(queue_def->cb))->handle == NULL) {
 80081dc:	68a3      	ldr	r3, [r4, #8]
  (*(queue_def->cb))->handle = xQueueCreate(queue_def->queue_sz, sizeof(void *));
 80081de:	6068      	str	r0, [r5, #4]
  if ((*(queue_def->cb))->handle == NULL) {
 80081e0:	681d      	ldr	r5, [r3, #0]
 80081e2:	686b      	ldr	r3, [r5, #4]
 80081e4:	b92b      	cbnz	r3, 80081f2 <osMailCreate+0x42>
    vPortFree(*(queue_def->cb));
 80081e6:	4628      	mov	r0, r5
 80081e8:	f001 fcdc 	bl	8009ba4 <vPortFree>
    return NULL;
 80081ec:	2000      	movs	r0, #0
  
  return *(queue_def->cb);
#else
  return NULL;
#endif
}
 80081ee:	b004      	add	sp, #16
 80081f0:	bd70      	pop	{r4, r5, r6, pc}
  (*(queue_def->cb))->pool = osPoolCreate(&pool_def);
 80081f2:	a801      	add	r0, sp, #4
 80081f4:	f7ff ff65 	bl	80080c2 <osPoolCreate>
  if ((*(queue_def->cb))->pool == NULL) {
 80081f8:	68a3      	ldr	r3, [r4, #8]
  (*(queue_def->cb))->pool = osPoolCreate(&pool_def);
 80081fa:	60a8      	str	r0, [r5, #8]
  if ((*(queue_def->cb))->pool == NULL) {
 80081fc:	6818      	ldr	r0, [r3, #0]
 80081fe:	6883      	ldr	r3, [r0, #8]
 8008200:	2b00      	cmp	r3, #0
 8008202:	d1f4      	bne.n	80081ee <osMailCreate+0x3e>
 8008204:	e7f0      	b.n	80081e8 <osMailCreate+0x38>

08008206 <osMailAlloc>:
{
  (void) millisec;
  void *p;
  
  
  if (queue_id == NULL) {
 8008206:	b110      	cbz	r0, 800820e <osMailAlloc+0x8>
    return NULL;
  }
  
  p = osPoolAlloc(queue_id->pool);
 8008208:	6880      	ldr	r0, [r0, #8]
 800820a:	f7ff bf87 	b.w	800811c <osPoolAlloc>
  
  return p;
}
 800820e:	4770      	bx	lr

08008210 <osMailPut>:
* @param  mail          memory block previously allocated with \ref osMailAlloc or \ref osMailCAlloc.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMailPut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMailPut (osMailQId queue_id, void *mail)
{
 8008210:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008212:	9101      	str	r1, [sp, #4]
  portBASE_TYPE taskWoken;
  
  
  if (queue_id == NULL) {
 8008214:	b328      	cbz	r0, 8008262 <osMailPut+0x52>
    return osErrorParameter;
  }
  
  taskWoken = pdFALSE;
 8008216:	2200      	movs	r2, #0
 8008218:	9203      	str	r2, [sp, #12]
 800821a:	f3ef 8305 	mrs	r3, IPSR
  
  if (inHandlerMode()) {
    if (xQueueSendFromISR(queue_id->handle, &mail, &taskWoken) != pdTRUE) {
 800821e:	6840      	ldr	r0, [r0, #4]
  if (inHandlerMode()) {
 8008220:	b1c3      	cbz	r3, 8008254 <osMailPut+0x44>
    if (xQueueSendFromISR(queue_id->handle, &mail, &taskWoken) != pdTRUE) {
 8008222:	4613      	mov	r3, r2
 8008224:	a901      	add	r1, sp, #4
 8008226:	aa03      	add	r2, sp, #12
 8008228:	f000 fab5 	bl	8008796 <xQueueGenericSendFromISR>
 800822c:	2801      	cmp	r0, #1
 800822e:	d003      	beq.n	8008238 <osMailPut+0x28>
      return osErrorOS;
 8008230:	20ff      	movs	r0, #255	@ 0xff
      return osErrorOS;
    }
  }
  
  return osOK;
}
 8008232:	b005      	add	sp, #20
 8008234:	f85d fb04 	ldr.w	pc, [sp], #4
    portEND_SWITCHING_ISR(taskWoken);
 8008238:	9b03      	ldr	r3, [sp, #12]
 800823a:	b14b      	cbz	r3, 8008250 <osMailPut+0x40>
 800823c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8008240:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008244:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8008248:	f3bf 8f4f 	dsb	sy
 800824c:	f3bf 8f6f 	isb	sy
  return osOK;
 8008250:	2000      	movs	r0, #0
 8008252:	e7ee      	b.n	8008232 <osMailPut+0x22>
    if (xQueueSend(queue_id->handle, &mail, 0) != pdTRUE) { 
 8008254:	461a      	mov	r2, r3
 8008256:	a901      	add	r1, sp, #4
 8008258:	f000 f9bc 	bl	80085d4 <xQueueGenericSend>
 800825c:	2801      	cmp	r0, #1
 800825e:	d0f7      	beq.n	8008250 <osMailPut+0x40>
 8008260:	e7e6      	b.n	8008230 <osMailPut+0x20>
    return osErrorParameter;
 8008262:	2080      	movs	r0, #128	@ 0x80
 8008264:	e7e5      	b.n	8008232 <osMailPut+0x22>

08008266 <osMailGet>:
* @param millisec    timeout value or 0 in case of no time-out
* @retval event that contains mail information or error code.
* @note   MUST REMAIN UNCHANGED: \b osMailGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMailGet (osMailQId queue_id, uint32_t millisec)
{
 8008266:	b530      	push	{r4, r5, lr}
 8008268:	b085      	sub	sp, #20
 800826a:	4605      	mov	r5, r0
 800826c:	4614      	mov	r4, r2
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.mail_id = queue_id;
 800826e:	9103      	str	r1, [sp, #12]
  
  if (queue_id == NULL) {
 8008270:	b911      	cbnz	r1, 8008278 <osMailGet+0x12>
    event.status = osErrorParameter;
 8008272:	2380      	movs	r3, #128	@ 0x80
    portEND_SWITCHING_ISR(taskWoken);
  }
  else {
    if (xQueueReceive(queue_id->handle, &event.value.p, ticks) == pdTRUE) {
      /* We have mail */
      event.status = osEventMail;
 8008274:	9301      	str	r3, [sp, #4]
 8008276:	e01a      	b.n	80082ae <osMailGet+0x48>
  taskWoken = pdFALSE;
 8008278:	2300      	movs	r3, #0
 800827a:	9300      	str	r3, [sp, #0]
 800827c:	f3ef 8305 	mrs	r3, IPSR
    if (xQueueReceiveFromISR(queue_id->handle, &event.value.p, &taskWoken) == pdTRUE) {
 8008280:	6848      	ldr	r0, [r1, #4]
  if (inHandlerMode()) {
 8008282:	b1e3      	cbz	r3, 80082be <osMailGet+0x58>
    if (xQueueReceiveFromISR(queue_id->handle, &event.value.p, &taskWoken) == pdTRUE) {
 8008284:	466a      	mov	r2, sp
 8008286:	a902      	add	r1, sp, #8
 8008288:	f000 fc8d 	bl	8008ba6 <xQueueReceiveFromISR>
 800828c:	1e43      	subs	r3, r0, #1
 800828e:	4258      	negs	r0, r3
 8008290:	4158      	adcs	r0, r3
    portEND_SWITCHING_ISR(taskWoken);
 8008292:	9b00      	ldr	r3, [sp, #0]
    if (xQueueReceiveFromISR(queue_id->handle, &event.value.p, &taskWoken) == pdTRUE) {
 8008294:	0140      	lsls	r0, r0, #5
 8008296:	9001      	str	r0, [sp, #4]
    portEND_SWITCHING_ISR(taskWoken);
 8008298:	b14b      	cbz	r3, 80082ae <osMailGet+0x48>
 800829a:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800829e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80082a2:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80082a6:	f3bf 8f4f 	dsb	sy
 80082aa:	f3bf 8f6f 	isb	sy
    return event;
 80082ae:	ab04      	add	r3, sp, #16
 80082b0:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 80082b4:	e885 0007 	stmia.w	r5, {r0, r1, r2}
      event.status = (ticks == 0) ? osOK : osEventTimeout;
    }
  }
  
  return event;
}
 80082b8:	4628      	mov	r0, r5
 80082ba:	b005      	add	sp, #20
 80082bc:	bd30      	pop	{r4, r5, pc}
    if (xQueueReceive(queue_id->handle, &event.value.p, ticks) == pdTRUE) {
 80082be:	a902      	add	r1, sp, #8
 80082c0:	f000 fb16 	bl	80088f0 <xQueueReceive>
 80082c4:	2801      	cmp	r0, #1
 80082c6:	d101      	bne.n	80082cc <osMailGet+0x66>
      event.status = osEventMail;
 80082c8:	2320      	movs	r3, #32
 80082ca:	e7d3      	b.n	8008274 <osMailGet+0xe>
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 80082cc:	3c00      	subs	r4, #0
 80082ce:	bf18      	it	ne
 80082d0:	2401      	movne	r4, #1
 80082d2:	01a4      	lsls	r4, r4, #6
 80082d4:	9401      	str	r4, [sp, #4]
  return event;
 80082d6:	e7ea      	b.n	80082ae <osMailGet+0x48>

080082d8 <osMailFree>:
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMailFree shall be consistent in every CMSIS-RTOS.
*/
osStatus osMailFree (osMailQId queue_id, void *mail)
{
  if (queue_id == NULL) {
 80082d8:	b110      	cbz	r0, 80082e0 <osMailFree+0x8>
    return osErrorParameter;
  }
  
  return osPoolFree(queue_id->pool, mail);
 80082da:	6880      	ldr	r0, [r0, #8]
 80082dc:	f7ff bf53 	b.w	8008186 <osPoolFree>
}
 80082e0:	2080      	movs	r0, #128	@ 0x80
 80082e2:	4770      	bx	lr

080082e4 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80082e4:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80082e8:	f04f 32ff 	mov.w	r2, #4294967295

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80082ec:	e9c0 2302 	strd	r2, r3, [r0, #8]
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80082f0:	6043      	str	r3, [r0, #4]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80082f2:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80082f4:	2300      	movs	r3, #0
 80082f6:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80082f8:	4770      	bx	lr

080082fa <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80082fa:	2300      	movs	r3, #0
 80082fc:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80082fe:	4770      	bx	lr

08008300 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8008300:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008302:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008304:	689a      	ldr	r2, [r3, #8]
 8008306:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008308:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800830a:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 800830c:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 800830e:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8008310:	3301      	adds	r3, #1
 8008312:	6003      	str	r3, [r0, #0]
}
 8008314:	4770      	bx	lr

08008316 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008316:	b530      	push	{r4, r5, lr}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008318:	680c      	ldr	r4, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800831a:	1c63      	adds	r3, r4, #1
 800831c:	d10a      	bne.n	8008334 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800831e:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008320:	685a      	ldr	r2, [r3, #4]
 8008322:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008324:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008326:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8008328:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 800832a:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 800832c:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 800832e:	3301      	adds	r3, #1
 8008330:	6003      	str	r3, [r0, #0]
}
 8008332:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008334:	f100 0208 	add.w	r2, r0, #8
 8008338:	4613      	mov	r3, r2
 800833a:	6852      	ldr	r2, [r2, #4]
 800833c:	6815      	ldr	r5, [r2, #0]
 800833e:	42a5      	cmp	r5, r4
 8008340:	d9fa      	bls.n	8008338 <vListInsert+0x22>
 8008342:	e7ed      	b.n	8008320 <vListInsert+0xa>

08008344 <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008344:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8008348:	6903      	ldr	r3, [r0, #16]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800834a:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800834c:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800834e:	6859      	ldr	r1, [r3, #4]
 8008350:	4281      	cmp	r1, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008352:	bf08      	it	eq
 8008354:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8008356:	2200      	movs	r2, #0
 8008358:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 800835a:	681a      	ldr	r2, [r3, #0]
 800835c:	3a01      	subs	r2, #1
 800835e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008360:	6818      	ldr	r0, [r3, #0]
}
 8008362:	4770      	bx	lr

08008364 <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008364:	b510      	push	{r4, lr}
 8008366:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008368:	f001 fa24 	bl	80097b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800836c:	6ba4      	ldr	r4, [r4, #56]	@ 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 800836e:	f001 fa41 	bl	80097f4 <vPortExitCritical>

	return xReturn;
}
 8008372:	fab4 f084 	clz	r0, r4
 8008376:	0940      	lsrs	r0, r0, #5
 8008378:	bd10      	pop	{r4, pc}

0800837a <prvCopyDataToQueue>:
{
 800837a:	b570      	push	{r4, r5, r6, lr}
 800837c:	4616      	mov	r6, r2
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800837e:	6c02      	ldr	r2, [r0, #64]	@ 0x40
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008380:	6b85      	ldr	r5, [r0, #56]	@ 0x38
{
 8008382:	4604      	mov	r4, r0
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008384:	b942      	cbnz	r2, 8008398 <prvCopyDataToQueue+0x1e>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008386:	6806      	ldr	r6, [r0, #0]
 8008388:	b99e      	cbnz	r6, 80083b2 <prvCopyDataToQueue+0x38>
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800838a:	6840      	ldr	r0, [r0, #4]
 800838c:	f001 f8f6 	bl	800957c <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 8008390:	6066      	str	r6, [r4, #4]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008392:	3501      	adds	r5, #1
 8008394:	63a5      	str	r5, [r4, #56]	@ 0x38
}
 8008396:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 8008398:	b96e      	cbnz	r6, 80083b6 <prvCopyDataToQueue+0x3c>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800839a:	6880      	ldr	r0, [r0, #8]
 800839c:	f004 fb44 	bl	800ca28 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80083a0:	68a3      	ldr	r3, [r4, #8]
 80083a2:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 80083a4:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80083a6:	6862      	ldr	r2, [r4, #4]
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80083a8:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80083aa:	4293      	cmp	r3, r2
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80083ac:	bf24      	itt	cs
 80083ae:	6823      	ldrcs	r3, [r4, #0]
 80083b0:	60a3      	strcs	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
 80083b2:	2000      	movs	r0, #0
 80083b4:	e7ed      	b.n	8008392 <prvCopyDataToQueue+0x18>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80083b6:	68c0      	ldr	r0, [r0, #12]
 80083b8:	f004 fb36 	bl	800ca28 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80083bc:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 80083be:	68e3      	ldr	r3, [r4, #12]
 80083c0:	4251      	negs	r1, r2
 80083c2:	1a9b      	subs	r3, r3, r2
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80083c4:	6822      	ldr	r2, [r4, #0]
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80083c6:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80083c8:	4293      	cmp	r3, r2
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80083ca:	bf3e      	ittt	cc
 80083cc:	6863      	ldrcc	r3, [r4, #4]
 80083ce:	185b      	addcc	r3, r3, r1
 80083d0:	60e3      	strcc	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 80083d2:	2e02      	cmp	r6, #2
 80083d4:	d1ed      	bne.n	80083b2 <prvCopyDataToQueue+0x38>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80083d6:	b10d      	cbz	r5, 80083dc <prvCopyDataToQueue+0x62>
				--uxMessagesWaiting;
 80083d8:	3d01      	subs	r5, #1
 80083da:	e7ea      	b.n	80083b2 <prvCopyDataToQueue+0x38>
BaseType_t xReturn = pdFALSE;
 80083dc:	4628      	mov	r0, r5
 80083de:	e7d8      	b.n	8008392 <prvCopyDataToQueue+0x18>

080083e0 <prvCopyDataFromQueue>:
{
 80083e0:	4603      	mov	r3, r0
 80083e2:	b410      	push	{r4}
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80083e4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
{
 80083e6:	4608      	mov	r0, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80083e8:	b16a      	cbz	r2, 8008406 <prvCopyDataFromQueue+0x26>
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80083ea:	68dc      	ldr	r4, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80083ec:	6859      	ldr	r1, [r3, #4]
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80083ee:	4414      	add	r4, r2
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80083f0:	428c      	cmp	r4, r1
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80083f2:	bf28      	it	cs
 80083f4:	6819      	ldrcs	r1, [r3, #0]
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80083f6:	60dc      	str	r4, [r3, #12]
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80083f8:	bf28      	it	cs
 80083fa:	60d9      	strcs	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80083fc:	68d9      	ldr	r1, [r3, #12]
}
 80083fe:	f85d 4b04 	ldr.w	r4, [sp], #4
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8008402:	f004 bb11 	b.w	800ca28 <memcpy>
}
 8008406:	f85d 4b04 	ldr.w	r4, [sp], #4
 800840a:	4770      	bx	lr

0800840c <prvUnlockQueue>:
{
 800840c:	b570      	push	{r4, r5, r6, lr}
 800840e:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8008410:	f001 f9d0 	bl	80097b4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8008414:	f894 5045 	ldrb.w	r5, [r4, #69]	@ 0x45
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008418:	f104 0624 	add.w	r6, r4, #36	@ 0x24
		int8_t cTxLock = pxQueue->cTxLock;
 800841c:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800841e:	2d00      	cmp	r5, #0
 8008420:	dc14      	bgt.n	800844c <prvUnlockQueue+0x40>
		pxQueue->cTxLock = queueUNLOCKED;
 8008422:	23ff      	movs	r3, #255	@ 0xff
 8008424:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
	taskEXIT_CRITICAL();
 8008428:	f001 f9e4 	bl	80097f4 <vPortExitCritical>
	taskENTER_CRITICAL();
 800842c:	f001 f9c2 	bl	80097b4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8008430:	f894 5044 	ldrb.w	r5, [r4, #68]	@ 0x44
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008434:	f104 0610 	add.w	r6, r4, #16
		int8_t cRxLock = pxQueue->cRxLock;
 8008438:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800843a:	2d00      	cmp	r5, #0
 800843c:	dc12      	bgt.n	8008464 <prvUnlockQueue+0x58>
		pxQueue->cRxLock = queueUNLOCKED;
 800843e:	23ff      	movs	r3, #255	@ 0xff
 8008440:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
}
 8008444:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 8008448:	f001 b9d4 	b.w	80097f4 <vPortExitCritical>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800844c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800844e:	2b00      	cmp	r3, #0
 8008450:	d0e7      	beq.n	8008422 <prvUnlockQueue+0x16>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008452:	4630      	mov	r0, r6
 8008454:	f000 ffa2 	bl	800939c <xTaskRemoveFromEventList>
 8008458:	b108      	cbz	r0, 800845e <prvUnlockQueue+0x52>
						vTaskMissedYield();
 800845a:	f001 f829 	bl	80094b0 <vTaskMissedYield>
			--cTxLock;
 800845e:	3d01      	subs	r5, #1
 8008460:	b26d      	sxtb	r5, r5
 8008462:	e7dc      	b.n	800841e <prvUnlockQueue+0x12>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008464:	6923      	ldr	r3, [r4, #16]
 8008466:	2b00      	cmp	r3, #0
 8008468:	d0e9      	beq.n	800843e <prvUnlockQueue+0x32>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800846a:	4630      	mov	r0, r6
 800846c:	f000 ff96 	bl	800939c <xTaskRemoveFromEventList>
 8008470:	b108      	cbz	r0, 8008476 <prvUnlockQueue+0x6a>
					vTaskMissedYield();
 8008472:	f001 f81d 	bl	80094b0 <vTaskMissedYield>
				--cRxLock;
 8008476:	3d01      	subs	r5, #1
 8008478:	b26d      	sxtb	r5, r5
 800847a:	e7de      	b.n	800843a <prvUnlockQueue+0x2e>

0800847c <xQueueGenericReset>:
{
 800847c:	b538      	push	{r3, r4, r5, lr}
 800847e:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 8008480:	4604      	mov	r4, r0
 8008482:	b940      	cbnz	r0, 8008496 <xQueueGenericReset+0x1a>
	__asm volatile
 8008484:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008488:	f383 8811 	msr	BASEPRI, r3
 800848c:	f3bf 8f6f 	isb	sy
 8008490:	f3bf 8f4f 	dsb	sy
 8008494:	e7fe      	b.n	8008494 <xQueueGenericReset+0x18>
	taskENTER_CRITICAL();
 8008496:	f001 f98d 	bl	80097b4 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800849a:	e9d4 310f 	ldrd	r3, r1, [r4, #60]	@ 0x3c
 800849e:	6822      	ldr	r2, [r4, #0]
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80084a0:	60a2      	str	r2, [r4, #8]
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80084a2:	434b      	muls	r3, r1
 80084a4:	18d0      	adds	r0, r2, r3
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80084a6:	1a5b      	subs	r3, r3, r1
 80084a8:	441a      	add	r2, r3
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80084aa:	6060      	str	r0, [r4, #4]
		pxQueue->cRxLock = queueUNLOCKED;
 80084ac:	23ff      	movs	r3, #255	@ 0xff
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80084ae:	2000      	movs	r0, #0
 80084b0:	63a0      	str	r0, [r4, #56]	@ 0x38
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80084b2:	60e2      	str	r2, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80084b4:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80084b8:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
		if( xNewQueue == pdFALSE )
 80084bc:	b9a5      	cbnz	r5, 80084e8 <xQueueGenericReset+0x6c>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80084be:	6923      	ldr	r3, [r4, #16]
 80084c0:	b173      	cbz	r3, 80084e0 <xQueueGenericReset+0x64>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80084c2:	f104 0010 	add.w	r0, r4, #16
 80084c6:	f000 ff69 	bl	800939c <xTaskRemoveFromEventList>
 80084ca:	b148      	cbz	r0, 80084e0 <xQueueGenericReset+0x64>
					queueYIELD_IF_USING_PREEMPTION();
 80084cc:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80084d0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80084d4:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80084d8:	f3bf 8f4f 	dsb	sy
 80084dc:	f3bf 8f6f 	isb	sy
	taskEXIT_CRITICAL();
 80084e0:	f001 f988 	bl	80097f4 <vPortExitCritical>
}
 80084e4:	2001      	movs	r0, #1
 80084e6:	bd38      	pop	{r3, r4, r5, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80084e8:	f104 0010 	add.w	r0, r4, #16
 80084ec:	f7ff fefa 	bl	80082e4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80084f0:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 80084f4:	f7ff fef6 	bl	80082e4 <vListInitialise>
 80084f8:	e7f2      	b.n	80084e0 <xQueueGenericReset+0x64>

080084fa <xQueueGenericCreateStatic>:
	{
 80084fa:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80084fc:	460d      	mov	r5, r1
 80084fe:	461c      	mov	r4, r3
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008500:	b940      	cbnz	r0, 8008514 <xQueueGenericCreateStatic+0x1a>
 8008502:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008506:	f383 8811 	msr	BASEPRI, r3
 800850a:	f3bf 8f6f 	isb	sy
 800850e:	f3bf 8f4f 	dsb	sy
 8008512:	e7fe      	b.n	8008512 <xQueueGenericCreateStatic+0x18>
		configASSERT( pxStaticQueue != NULL );
 8008514:	b943      	cbnz	r3, 8008528 <xQueueGenericCreateStatic+0x2e>
 8008516:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800851a:	f383 8811 	msr	BASEPRI, r3
 800851e:	f3bf 8f6f 	isb	sy
 8008522:	f3bf 8f4f 	dsb	sy
 8008526:	e7fe      	b.n	8008526 <xQueueGenericCreateStatic+0x2c>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008528:	b14a      	cbz	r2, 800853e <xQueueGenericCreateStatic+0x44>
 800852a:	b991      	cbnz	r1, 8008552 <xQueueGenericCreateStatic+0x58>
 800852c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008530:	f383 8811 	msr	BASEPRI, r3
 8008534:	f3bf 8f6f 	isb	sy
 8008538:	f3bf 8f4f 	dsb	sy
 800853c:	e7fe      	b.n	800853c <xQueueGenericCreateStatic+0x42>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800853e:	b141      	cbz	r1, 8008552 <xQueueGenericCreateStatic+0x58>
 8008540:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008544:	f383 8811 	msr	BASEPRI, r3
 8008548:	f3bf 8f6f 	isb	sy
 800854c:	f3bf 8f4f 	dsb	sy
 8008550:	e7fe      	b.n	8008550 <xQueueGenericCreateStatic+0x56>
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008552:	2348      	movs	r3, #72	@ 0x48
 8008554:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008556:	9b01      	ldr	r3, [sp, #4]
 8008558:	2b48      	cmp	r3, #72	@ 0x48
 800855a:	d008      	beq.n	800856e <xQueueGenericCreateStatic+0x74>
 800855c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008560:	f383 8811 	msr	BASEPRI, r3
 8008564:	f3bf 8f6f 	isb	sy
 8008568:	f3bf 8f4f 	dsb	sy
 800856c:	e7fe      	b.n	800856c <xQueueGenericCreateStatic+0x72>
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800856e:	2101      	movs	r1, #1
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008570:	2d00      	cmp	r5, #0
 8008572:	bf08      	it	eq
 8008574:	4622      	moveq	r2, r4
	pxNewQueue->uxItemSize = uxItemSize;
 8008576:	e9c4 050f 	strd	r0, r5, [r4, #60]	@ 0x3c
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800857a:	f884 1046 	strb.w	r1, [r4, #70]	@ 0x46
	if( uxItemSize == ( UBaseType_t ) 0 )
 800857e:	6022      	str	r2, [r4, #0]
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008580:	4620      	mov	r0, r4
 8008582:	f7ff ff7b 	bl	800847c <xQueueGenericReset>
	}
 8008586:	4620      	mov	r0, r4
 8008588:	b003      	add	sp, #12
 800858a:	bd30      	pop	{r4, r5, pc}

0800858c <xQueueGenericCreate>:
	{
 800858c:	b570      	push	{r4, r5, r6, lr}
 800858e:	460d      	mov	r5, r1
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008590:	4606      	mov	r6, r0
 8008592:	b940      	cbnz	r0, 80085a6 <xQueueGenericCreate+0x1a>
 8008594:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008598:	f383 8811 	msr	BASEPRI, r3
 800859c:	f3bf 8f6f 	isb	sy
 80085a0:	f3bf 8f4f 	dsb	sy
 80085a4:	e7fe      	b.n	80085a4 <xQueueGenericCreate+0x18>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80085a6:	4348      	muls	r0, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 80085a8:	3048      	adds	r0, #72	@ 0x48
 80085aa:	f001 fa69 	bl	8009a80 <pvPortMalloc>
		if( pxNewQueue != NULL )
 80085ae:	4604      	mov	r4, r0
 80085b0:	b160      	cbz	r0, 80085cc <xQueueGenericCreate+0x40>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80085b2:	2300      	movs	r3, #0
 80085b4:	f880 3046 	strb.w	r3, [r0, #70]	@ 0x46
	if( uxItemSize == ( UBaseType_t ) 0 )
 80085b8:	b155      	cbz	r5, 80085d0 <xQueueGenericCreate+0x44>
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 80085ba:	f100 0348 	add.w	r3, r0, #72	@ 0x48
	pxNewQueue->uxItemSize = uxItemSize;
 80085be:	e9c4 650f 	strd	r6, r5, [r4, #60]	@ 0x3c
 80085c2:	6023      	str	r3, [r4, #0]
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80085c4:	2101      	movs	r1, #1
 80085c6:	4620      	mov	r0, r4
 80085c8:	f7ff ff58 	bl	800847c <xQueueGenericReset>
	}
 80085cc:	4620      	mov	r0, r4
 80085ce:	bd70      	pop	{r4, r5, r6, pc}
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80085d0:	4603      	mov	r3, r0
 80085d2:	e7f4      	b.n	80085be <xQueueGenericCreate+0x32>

080085d4 <xQueueGenericSend>:
{
 80085d4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80085d8:	460f      	mov	r7, r1
 80085da:	9201      	str	r2, [sp, #4]
 80085dc:	461e      	mov	r6, r3
	configASSERT( pxQueue );
 80085de:	4604      	mov	r4, r0
 80085e0:	b940      	cbnz	r0, 80085f4 <xQueueGenericSend+0x20>
 80085e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085e6:	f383 8811 	msr	BASEPRI, r3
 80085ea:	f3bf 8f6f 	isb	sy
 80085ee:	f3bf 8f4f 	dsb	sy
 80085f2:	e7fe      	b.n	80085f2 <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80085f4:	b951      	cbnz	r1, 800860c <xQueueGenericSend+0x38>
 80085f6:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 80085f8:	b143      	cbz	r3, 800860c <xQueueGenericSend+0x38>
 80085fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085fe:	f383 8811 	msr	BASEPRI, r3
 8008602:	f3bf 8f6f 	isb	sy
 8008606:	f3bf 8f4f 	dsb	sy
 800860a:	e7fe      	b.n	800860a <xQueueGenericSend+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800860c:	2e02      	cmp	r6, #2
 800860e:	d10b      	bne.n	8008628 <xQueueGenericSend+0x54>
 8008610:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8008612:	2b01      	cmp	r3, #1
 8008614:	d008      	beq.n	8008628 <xQueueGenericSend+0x54>
 8008616:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800861a:	f383 8811 	msr	BASEPRI, r3
 800861e:	f3bf 8f6f 	isb	sy
 8008622:	f3bf 8f4f 	dsb	sy
 8008626:	e7fe      	b.n	8008626 <xQueueGenericSend+0x52>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008628:	f000 ff48 	bl	80094bc <xTaskGetSchedulerState>
 800862c:	4605      	mov	r5, r0
 800862e:	b330      	cbz	r0, 800867e <xQueueGenericSend+0xaa>
 8008630:	2500      	movs	r5, #0
		prvLockQueue( pxQueue );
 8008632:	f04f 0800 	mov.w	r8, #0
		taskENTER_CRITICAL();
 8008636:	f001 f8bd 	bl	80097b4 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800863a:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800863c:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800863e:	429a      	cmp	r2, r3
 8008640:	d301      	bcc.n	8008646 <xQueueGenericSend+0x72>
 8008642:	2e02      	cmp	r6, #2
 8008644:	d127      	bne.n	8008696 <xQueueGenericSend+0xc2>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008646:	4632      	mov	r2, r6
 8008648:	4639      	mov	r1, r7
 800864a:	4620      	mov	r0, r4
 800864c:	f7ff fe95 	bl	800837a <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008650:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8008652:	b11b      	cbz	r3, 800865c <xQueueGenericSend+0x88>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008654:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8008658:	f000 fea0 	bl	800939c <xTaskRemoveFromEventList>
					else if( xYieldRequired != pdFALSE )
 800865c:	b148      	cbz	r0, 8008672 <xQueueGenericSend+0x9e>
						queueYIELD_IF_USING_PREEMPTION();
 800865e:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8008662:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008666:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800866a:	f3bf 8f4f 	dsb	sy
 800866e:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8008672:	f001 f8bf 	bl	80097f4 <vPortExitCritical>
				return pdPASS;
 8008676:	2001      	movs	r0, #1
}
 8008678:	b004      	add	sp, #16
 800867a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800867e:	9b01      	ldr	r3, [sp, #4]
 8008680:	2b00      	cmp	r3, #0
 8008682:	d0d6      	beq.n	8008632 <xQueueGenericSend+0x5e>
 8008684:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008688:	f383 8811 	msr	BASEPRI, r3
 800868c:	f3bf 8f6f 	isb	sy
 8008690:	f3bf 8f4f 	dsb	sy
 8008694:	e7fe      	b.n	8008694 <xQueueGenericSend+0xc0>
				if( xTicksToWait == ( TickType_t ) 0 )
 8008696:	9b01      	ldr	r3, [sp, #4]
 8008698:	b91b      	cbnz	r3, 80086a2 <xQueueGenericSend+0xce>
					taskEXIT_CRITICAL();
 800869a:	f001 f8ab 	bl	80097f4 <vPortExitCritical>
					return errQUEUE_FULL;
 800869e:	2000      	movs	r0, #0
 80086a0:	e7ea      	b.n	8008678 <xQueueGenericSend+0xa4>
				else if( xEntryTimeSet == pdFALSE )
 80086a2:	b915      	cbnz	r5, 80086aa <xQueueGenericSend+0xd6>
					vTaskInternalSetTimeOutState( &xTimeOut );
 80086a4:	a802      	add	r0, sp, #8
 80086a6:	f000 febb 	bl	8009420 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 80086aa:	f001 f8a3 	bl	80097f4 <vPortExitCritical>
		vTaskSuspendAll();
 80086ae:	f000 fce1 	bl	8009074 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80086b2:	f001 f87f 	bl	80097b4 <vPortEnterCritical>
 80086b6:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 80086ba:	2bff      	cmp	r3, #255	@ 0xff
 80086bc:	bf08      	it	eq
 80086be:	f884 8044 	strbeq.w	r8, [r4, #68]	@ 0x44
 80086c2:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 80086c6:	2bff      	cmp	r3, #255	@ 0xff
 80086c8:	bf08      	it	eq
 80086ca:	f884 8045 	strbeq.w	r8, [r4, #69]	@ 0x45
 80086ce:	f001 f891 	bl	80097f4 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80086d2:	a901      	add	r1, sp, #4
 80086d4:	a802      	add	r0, sp, #8
 80086d6:	f000 feaf 	bl	8009438 <xTaskCheckForTimeOut>
 80086da:	bb38      	cbnz	r0, 800872c <xQueueGenericSend+0x158>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80086dc:	f001 f86a 	bl	80097b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80086e0:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80086e2:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80086e4:	429a      	cmp	r2, r3
 80086e6:	d10e      	bne.n	8008706 <xQueueGenericSend+0x132>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 80086e8:	f001 f884 	bl	80097f4 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80086ec:	9901      	ldr	r1, [sp, #4]
 80086ee:	f104 0010 	add.w	r0, r4, #16
 80086f2:	f000 fe39 	bl	8009368 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80086f6:	4620      	mov	r0, r4
 80086f8:	f7ff fe88 	bl	800840c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80086fc:	f000 fd5a 	bl	80091b4 <xTaskResumeAll>
 8008700:	b148      	cbz	r0, 8008716 <xQueueGenericSend+0x142>
 8008702:	2501      	movs	r5, #1
 8008704:	e797      	b.n	8008636 <xQueueGenericSend+0x62>
	taskEXIT_CRITICAL();
 8008706:	f001 f875 	bl	80097f4 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 800870a:	4620      	mov	r0, r4
 800870c:	f7ff fe7e 	bl	800840c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008710:	f000 fd50 	bl	80091b4 <xTaskResumeAll>
 8008714:	e7f5      	b.n	8008702 <xQueueGenericSend+0x12e>
					portYIELD_WITHIN_API();
 8008716:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800871a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800871e:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8008722:	f3bf 8f4f 	dsb	sy
 8008726:	f3bf 8f6f 	isb	sy
 800872a:	e7ea      	b.n	8008702 <xQueueGenericSend+0x12e>
			prvUnlockQueue( pxQueue );
 800872c:	4620      	mov	r0, r4
 800872e:	f7ff fe6d 	bl	800840c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008732:	f000 fd3f 	bl	80091b4 <xTaskResumeAll>
			return errQUEUE_FULL;
 8008736:	e7b2      	b.n	800869e <xQueueGenericSend+0xca>

08008738 <xQueueCreateMutexStatic>:
	{
 8008738:	b513      	push	{r0, r1, r4, lr}
		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800873a:	2200      	movs	r2, #0
	{
 800873c:	460b      	mov	r3, r1
		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800873e:	9000      	str	r0, [sp, #0]
 8008740:	4611      	mov	r1, r2
 8008742:	2001      	movs	r0, #1
 8008744:	f7ff fed9 	bl	80084fa <xQueueGenericCreateStatic>
		if( pxNewQueue != NULL )
 8008748:	4604      	mov	r4, r0
 800874a:	b138      	cbz	r0, 800875c <xQueueCreateMutexStatic+0x24>
			pxNewQueue->pxMutexHolder = NULL;
 800874c:	2300      	movs	r3, #0
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800874e:	e9c0 3300 	strd	r3, r3, [r0]
			pxNewQueue->u.uxRecursiveCallCount = 0;
 8008752:	60c3      	str	r3, [r0, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8008754:	461a      	mov	r2, r3
 8008756:	4619      	mov	r1, r3
 8008758:	f7ff ff3c 	bl	80085d4 <xQueueGenericSend>
	}
 800875c:	4620      	mov	r0, r4
 800875e:	b002      	add	sp, #8
 8008760:	bd10      	pop	{r4, pc}

08008762 <xQueueCreateMutex>:
	{
 8008762:	b538      	push	{r3, r4, r5, lr}
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8008764:	2048      	movs	r0, #72	@ 0x48
 8008766:	f001 f98b 	bl	8009a80 <pvPortMalloc>
		if( pxNewQueue != NULL )
 800876a:	4604      	mov	r4, r0
 800876c:	b188      	cbz	r0, 8008792 <xQueueCreateMutex+0x30>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800876e:	2500      	movs	r5, #0
	pxNewQueue->uxLength = uxQueueLength;
 8008770:	2101      	movs	r1, #1
	pxNewQueue->uxItemSize = uxItemSize;
 8008772:	e9c0 150f 	strd	r1, r5, [r0, #60]	@ 0x3c
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8008776:	f880 5046 	strb.w	r5, [r0, #70]	@ 0x46
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800877a:	6000      	str	r0, [r0, #0]
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800877c:	f7ff fe7e 	bl	800847c <xQueueGenericReset>
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8008780:	e9c4 5500 	strd	r5, r5, [r4]
			pxNewQueue->u.uxRecursiveCallCount = 0;
 8008784:	60e5      	str	r5, [r4, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8008786:	462b      	mov	r3, r5
 8008788:	462a      	mov	r2, r5
 800878a:	4629      	mov	r1, r5
 800878c:	4620      	mov	r0, r4
 800878e:	f7ff ff21 	bl	80085d4 <xQueueGenericSend>
	}
 8008792:	4620      	mov	r0, r4
 8008794:	bd38      	pop	{r3, r4, r5, pc}

08008796 <xQueueGenericSendFromISR>:
{
 8008796:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800879a:	4689      	mov	r9, r1
 800879c:	4617      	mov	r7, r2
 800879e:	461e      	mov	r6, r3
	configASSERT( pxQueue );
 80087a0:	4604      	mov	r4, r0
 80087a2:	b940      	cbnz	r0, 80087b6 <xQueueGenericSendFromISR+0x20>
 80087a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087a8:	f383 8811 	msr	BASEPRI, r3
 80087ac:	f3bf 8f6f 	isb	sy
 80087b0:	f3bf 8f4f 	dsb	sy
 80087b4:	e7fe      	b.n	80087b4 <xQueueGenericSendFromISR+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80087b6:	b951      	cbnz	r1, 80087ce <xQueueGenericSendFromISR+0x38>
 80087b8:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 80087ba:	b143      	cbz	r3, 80087ce <xQueueGenericSendFromISR+0x38>
 80087bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087c0:	f383 8811 	msr	BASEPRI, r3
 80087c4:	f3bf 8f6f 	isb	sy
 80087c8:	f3bf 8f4f 	dsb	sy
 80087cc:	e7fe      	b.n	80087cc <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80087ce:	2e02      	cmp	r6, #2
 80087d0:	d10b      	bne.n	80087ea <xQueueGenericSendFromISR+0x54>
 80087d2:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80087d4:	2b01      	cmp	r3, #1
 80087d6:	d008      	beq.n	80087ea <xQueueGenericSendFromISR+0x54>
 80087d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087dc:	f383 8811 	msr	BASEPRI, r3
 80087e0:	f3bf 8f6f 	isb	sy
 80087e4:	f3bf 8f4f 	dsb	sy
 80087e8:	e7fe      	b.n	80087e8 <xQueueGenericSendFromISR+0x52>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80087ea:	f001 f8f5 	bl	80099d8 <vPortValidateInterruptPriority>
	__asm volatile
 80087ee:	f3ef 8811 	mrs	r8, BASEPRI
 80087f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087f6:	f383 8811 	msr	BASEPRI, r3
 80087fa:	f3bf 8f6f 	isb	sy
 80087fe:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008802:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8008804:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8008806:	429a      	cmp	r2, r3
 8008808:	d301      	bcc.n	800880e <xQueueGenericSendFromISR+0x78>
 800880a:	2e02      	cmp	r6, #2
 800880c:	d11d      	bne.n	800884a <xQueueGenericSendFromISR+0xb4>
			const int8_t cTxLock = pxQueue->cTxLock;
 800880e:	f894 5045 	ldrb.w	r5, [r4, #69]	@ 0x45
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008812:	4632      	mov	r2, r6
			const int8_t cTxLock = pxQueue->cTxLock;
 8008814:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008816:	4649      	mov	r1, r9
 8008818:	4620      	mov	r0, r4
 800881a:	f7ff fdae 	bl	800837a <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 800881e:	1c6b      	adds	r3, r5, #1
 8008820:	d10e      	bne.n	8008840 <xQueueGenericSendFromISR+0xaa>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008822:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8008824:	b13b      	cbz	r3, 8008836 <xQueueGenericSendFromISR+0xa0>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008826:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800882a:	f000 fdb7 	bl	800939c <xTaskRemoveFromEventList>
 800882e:	b110      	cbz	r0, 8008836 <xQueueGenericSendFromISR+0xa0>
							if( pxHigherPriorityTaskWoken != NULL )
 8008830:	b10f      	cbz	r7, 8008836 <xQueueGenericSendFromISR+0xa0>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008832:	2301      	movs	r3, #1
 8008834:	603b      	str	r3, [r7, #0]
			xReturn = pdPASS;
 8008836:	2001      	movs	r0, #1
	__asm volatile
 8008838:	f388 8811 	msr	BASEPRI, r8
}
 800883c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008840:	3501      	adds	r5, #1
 8008842:	b26d      	sxtb	r5, r5
 8008844:	f884 5045 	strb.w	r5, [r4, #69]	@ 0x45
 8008848:	e7f5      	b.n	8008836 <xQueueGenericSendFromISR+0xa0>
			xReturn = errQUEUE_FULL;
 800884a:	2000      	movs	r0, #0
 800884c:	e7f4      	b.n	8008838 <xQueueGenericSendFromISR+0xa2>

0800884e <xQueueGiveFromISR>:
{
 800884e:	b570      	push	{r4, r5, r6, lr}
 8008850:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 8008852:	4604      	mov	r4, r0
 8008854:	b940      	cbnz	r0, 8008868 <xQueueGiveFromISR+0x1a>
	__asm volatile
 8008856:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800885a:	f383 8811 	msr	BASEPRI, r3
 800885e:	f3bf 8f6f 	isb	sy
 8008862:	f3bf 8f4f 	dsb	sy
 8008866:	e7fe      	b.n	8008866 <xQueueGiveFromISR+0x18>
	configASSERT( pxQueue->uxItemSize == 0 );
 8008868:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800886a:	b143      	cbz	r3, 800887e <xQueueGiveFromISR+0x30>
 800886c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008870:	f383 8811 	msr	BASEPRI, r3
 8008874:	f3bf 8f6f 	isb	sy
 8008878:	f3bf 8f4f 	dsb	sy
 800887c:	e7fe      	b.n	800887c <xQueueGiveFromISR+0x2e>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 800887e:	6803      	ldr	r3, [r0, #0]
 8008880:	b953      	cbnz	r3, 8008898 <xQueueGiveFromISR+0x4a>
 8008882:	6843      	ldr	r3, [r0, #4]
 8008884:	b143      	cbz	r3, 8008898 <xQueueGiveFromISR+0x4a>
 8008886:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800888a:	f383 8811 	msr	BASEPRI, r3
 800888e:	f3bf 8f6f 	isb	sy
 8008892:	f3bf 8f4f 	dsb	sy
 8008896:	e7fe      	b.n	8008896 <xQueueGiveFromISR+0x48>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008898:	f001 f89e 	bl	80099d8 <vPortValidateInterruptPriority>
	__asm volatile
 800889c:	f3ef 8611 	mrs	r6, BASEPRI
 80088a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088a4:	f383 8811 	msr	BASEPRI, r3
 80088a8:	f3bf 8f6f 	isb	sy
 80088ac:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80088b0:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 80088b2:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80088b4:	4293      	cmp	r3, r2
 80088b6:	d919      	bls.n	80088ec <xQueueGiveFromISR+0x9e>
			const int8_t cTxLock = pxQueue->cTxLock;
 80088b8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80088bc:	3201      	adds	r2, #1
			if( cTxLock == queueUNLOCKED )
 80088be:	29ff      	cmp	r1, #255	@ 0xff
			const int8_t cTxLock = pxQueue->cTxLock;
 80088c0:	b24b      	sxtb	r3, r1
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80088c2:	63a2      	str	r2, [r4, #56]	@ 0x38
			if( cTxLock == queueUNLOCKED )
 80088c4:	d10d      	bne.n	80088e2 <xQueueGiveFromISR+0x94>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80088c6:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80088c8:	b13b      	cbz	r3, 80088da <xQueueGiveFromISR+0x8c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80088ca:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 80088ce:	f000 fd65 	bl	800939c <xTaskRemoveFromEventList>
 80088d2:	b110      	cbz	r0, 80088da <xQueueGiveFromISR+0x8c>
							if( pxHigherPriorityTaskWoken != NULL )
 80088d4:	b10d      	cbz	r5, 80088da <xQueueGiveFromISR+0x8c>
								*pxHigherPriorityTaskWoken = pdTRUE;
 80088d6:	2301      	movs	r3, #1
 80088d8:	602b      	str	r3, [r5, #0]
			xReturn = pdPASS;
 80088da:	2001      	movs	r0, #1
	__asm volatile
 80088dc:	f386 8811 	msr	BASEPRI, r6
}
 80088e0:	bd70      	pop	{r4, r5, r6, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80088e2:	3301      	adds	r3, #1
 80088e4:	b25b      	sxtb	r3, r3
 80088e6:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 80088ea:	e7f6      	b.n	80088da <xQueueGiveFromISR+0x8c>
			xReturn = errQUEUE_FULL;
 80088ec:	2000      	movs	r0, #0
 80088ee:	e7f5      	b.n	80088dc <xQueueGiveFromISR+0x8e>

080088f0 <xQueueReceive>:
{
 80088f0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80088f4:	460e      	mov	r6, r1
 80088f6:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 80088f8:	4604      	mov	r4, r0
 80088fa:	b940      	cbnz	r0, 800890e <xQueueReceive+0x1e>
	__asm volatile
 80088fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008900:	f383 8811 	msr	BASEPRI, r3
 8008904:	f3bf 8f6f 	isb	sy
 8008908:	f3bf 8f4f 	dsb	sy
 800890c:	e7fe      	b.n	800890c <xQueueReceive+0x1c>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800890e:	b951      	cbnz	r1, 8008926 <xQueueReceive+0x36>
 8008910:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8008912:	b143      	cbz	r3, 8008926 <xQueueReceive+0x36>
 8008914:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008918:	f383 8811 	msr	BASEPRI, r3
 800891c:	f3bf 8f6f 	isb	sy
 8008920:	f3bf 8f4f 	dsb	sy
 8008924:	e7fe      	b.n	8008924 <xQueueReceive+0x34>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008926:	f000 fdc9 	bl	80094bc <xTaskGetSchedulerState>
 800892a:	4605      	mov	r5, r0
 800892c:	b318      	cbz	r0, 8008976 <xQueueReceive+0x86>
 800892e:	2500      	movs	r5, #0
		prvLockQueue( pxQueue );
 8008930:	f04f 0800 	mov.w	r8, #0
		taskENTER_CRITICAL();
 8008934:	f000 ff3e 	bl	80097b4 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008938:	6ba7      	ldr	r7, [r4, #56]	@ 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800893a:	b347      	cbz	r7, 800898e <xQueueReceive+0x9e>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800893c:	4631      	mov	r1, r6
 800893e:	4620      	mov	r0, r4
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008940:	3f01      	subs	r7, #1
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008942:	f7ff fd4d 	bl	80083e0 <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008946:	63a7      	str	r7, [r4, #56]	@ 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008948:	6923      	ldr	r3, [r4, #16]
 800894a:	b173      	cbz	r3, 800896a <xQueueReceive+0x7a>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800894c:	f104 0010 	add.w	r0, r4, #16
 8008950:	f000 fd24 	bl	800939c <xTaskRemoveFromEventList>
 8008954:	b148      	cbz	r0, 800896a <xQueueReceive+0x7a>
						queueYIELD_IF_USING_PREEMPTION();
 8008956:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800895a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800895e:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8008962:	f3bf 8f4f 	dsb	sy
 8008966:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 800896a:	f000 ff43 	bl	80097f4 <vPortExitCritical>
				return pdPASS;
 800896e:	2001      	movs	r0, #1
}
 8008970:	b004      	add	sp, #16
 8008972:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008976:	9b01      	ldr	r3, [sp, #4]
 8008978:	2b00      	cmp	r3, #0
 800897a:	d0d9      	beq.n	8008930 <xQueueReceive+0x40>
 800897c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008980:	f383 8811 	msr	BASEPRI, r3
 8008984:	f3bf 8f6f 	isb	sy
 8008988:	f3bf 8f4f 	dsb	sy
 800898c:	e7fe      	b.n	800898c <xQueueReceive+0x9c>
				if( xTicksToWait == ( TickType_t ) 0 )
 800898e:	9b01      	ldr	r3, [sp, #4]
 8008990:	b91b      	cbnz	r3, 800899a <xQueueReceive+0xaa>
					taskEXIT_CRITICAL();
 8008992:	f000 ff2f 	bl	80097f4 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8008996:	2000      	movs	r0, #0
 8008998:	e7ea      	b.n	8008970 <xQueueReceive+0x80>
				else if( xEntryTimeSet == pdFALSE )
 800899a:	b915      	cbnz	r5, 80089a2 <xQueueReceive+0xb2>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800899c:	a802      	add	r0, sp, #8
 800899e:	f000 fd3f 	bl	8009420 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 80089a2:	f000 ff27 	bl	80097f4 <vPortExitCritical>
		vTaskSuspendAll();
 80089a6:	f000 fb65 	bl	8009074 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80089aa:	f000 ff03 	bl	80097b4 <vPortEnterCritical>
 80089ae:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 80089b2:	2bff      	cmp	r3, #255	@ 0xff
 80089b4:	bf08      	it	eq
 80089b6:	f884 8044 	strbeq.w	r8, [r4, #68]	@ 0x44
 80089ba:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 80089be:	2bff      	cmp	r3, #255	@ 0xff
 80089c0:	bf08      	it	eq
 80089c2:	f884 8045 	strbeq.w	r8, [r4, #69]	@ 0x45
 80089c6:	f000 ff15 	bl	80097f4 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80089ca:	a901      	add	r1, sp, #4
 80089cc:	a802      	add	r0, sp, #8
 80089ce:	f000 fd33 	bl	8009438 <xTaskCheckForTimeOut>
 80089d2:	bb00      	cbnz	r0, 8008a16 <xQueueReceive+0x126>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80089d4:	4620      	mov	r0, r4
 80089d6:	f7ff fcc5 	bl	8008364 <prvIsQueueEmpty>
 80089da:	b1b0      	cbz	r0, 8008a0a <xQueueReceive+0x11a>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80089dc:	9901      	ldr	r1, [sp, #4]
 80089de:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 80089e2:	f000 fcc1 	bl	8009368 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80089e6:	4620      	mov	r0, r4
 80089e8:	f7ff fd10 	bl	800840c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80089ec:	f000 fbe2 	bl	80091b4 <xTaskResumeAll>
 80089f0:	b948      	cbnz	r0, 8008a06 <xQueueReceive+0x116>
					portYIELD_WITHIN_API();
 80089f2:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80089f6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80089fa:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80089fe:	f3bf 8f4f 	dsb	sy
 8008a02:	f3bf 8f6f 	isb	sy
 8008a06:	2501      	movs	r5, #1
 8008a08:	e794      	b.n	8008934 <xQueueReceive+0x44>
				prvUnlockQueue( pxQueue );
 8008a0a:	4620      	mov	r0, r4
 8008a0c:	f7ff fcfe 	bl	800840c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008a10:	f000 fbd0 	bl	80091b4 <xTaskResumeAll>
 8008a14:	e7f7      	b.n	8008a06 <xQueueReceive+0x116>
			prvUnlockQueue( pxQueue );
 8008a16:	4620      	mov	r0, r4
 8008a18:	f7ff fcf8 	bl	800840c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008a1c:	f000 fbca 	bl	80091b4 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008a20:	4620      	mov	r0, r4
 8008a22:	f7ff fc9f 	bl	8008364 <prvIsQueueEmpty>
 8008a26:	2800      	cmp	r0, #0
 8008a28:	d0ed      	beq.n	8008a06 <xQueueReceive+0x116>
 8008a2a:	e7b4      	b.n	8008996 <xQueueReceive+0xa6>

08008a2c <xQueueSemaphoreTake>:
{
 8008a2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008a2e:	b085      	sub	sp, #20
	configASSERT( ( pxQueue ) );
 8008a30:	4604      	mov	r4, r0
{
 8008a32:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 8008a34:	b940      	cbnz	r0, 8008a48 <xQueueSemaphoreTake+0x1c>
 8008a36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a3a:	f383 8811 	msr	BASEPRI, r3
 8008a3e:	f3bf 8f6f 	isb	sy
 8008a42:	f3bf 8f4f 	dsb	sy
 8008a46:	e7fe      	b.n	8008a46 <xQueueSemaphoreTake+0x1a>
	configASSERT( pxQueue->uxItemSize == 0 );
 8008a48:	6c05      	ldr	r5, [r0, #64]	@ 0x40
 8008a4a:	b145      	cbz	r5, 8008a5e <xQueueSemaphoreTake+0x32>
 8008a4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a50:	f383 8811 	msr	BASEPRI, r3
 8008a54:	f3bf 8f6f 	isb	sy
 8008a58:	f3bf 8f4f 	dsb	sy
 8008a5c:	e7fe      	b.n	8008a5c <xQueueSemaphoreTake+0x30>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008a5e:	f000 fd2d 	bl	80094bc <xTaskGetSchedulerState>
 8008a62:	4606      	mov	r6, r0
 8008a64:	b320      	cbz	r0, 8008ab0 <xQueueSemaphoreTake+0x84>
 8008a66:	462e      	mov	r6, r5
		prvLockQueue( pxQueue );
 8008a68:	2700      	movs	r7, #0
		taskENTER_CRITICAL();
 8008a6a:	f000 fea3 	bl	80097b4 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8008a6e:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8008a70:	b353      	cbz	r3, 8008ac8 <xQueueSemaphoreTake+0x9c>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8008a72:	3b01      	subs	r3, #1
 8008a74:	63a3      	str	r3, [r4, #56]	@ 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008a76:	6823      	ldr	r3, [r4, #0]
 8008a78:	b913      	cbnz	r3, 8008a80 <xQueueSemaphoreTake+0x54>
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8008a7a:	f000 fe29 	bl	80096d0 <pvTaskIncrementMutexHeldCount>
 8008a7e:	6060      	str	r0, [r4, #4]
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008a80:	6923      	ldr	r3, [r4, #16]
 8008a82:	b173      	cbz	r3, 8008aa2 <xQueueSemaphoreTake+0x76>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008a84:	f104 0010 	add.w	r0, r4, #16
 8008a88:	f000 fc88 	bl	800939c <xTaskRemoveFromEventList>
 8008a8c:	b148      	cbz	r0, 8008aa2 <xQueueSemaphoreTake+0x76>
						queueYIELD_IF_USING_PREEMPTION();
 8008a8e:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8008a92:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008a96:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8008a9a:	f3bf 8f4f 	dsb	sy
 8008a9e:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8008aa2:	f000 fea7 	bl	80097f4 <vPortExitCritical>
				return pdPASS;
 8008aa6:	2001      	movs	r0, #1
}
 8008aa8:	b005      	add	sp, #20
 8008aaa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008aac:	4635      	mov	r5, r6
 8008aae:	e7db      	b.n	8008a68 <xQueueSemaphoreTake+0x3c>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008ab0:	9b01      	ldr	r3, [sp, #4]
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d0fa      	beq.n	8008aac <xQueueSemaphoreTake+0x80>
 8008ab6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008aba:	f383 8811 	msr	BASEPRI, r3
 8008abe:	f3bf 8f6f 	isb	sy
 8008ac2:	f3bf 8f4f 	dsb	sy
 8008ac6:	e7fe      	b.n	8008ac6 <xQueueSemaphoreTake+0x9a>
				if( xTicksToWait == ( TickType_t ) 0 )
 8008ac8:	9b01      	ldr	r3, [sp, #4]
 8008aca:	b953      	cbnz	r3, 8008ae2 <xQueueSemaphoreTake+0xb6>
						configASSERT( xInheritanceOccurred == pdFALSE );
 8008acc:	2d00      	cmp	r5, #0
 8008ace:	d066      	beq.n	8008b9e <xQueueSemaphoreTake+0x172>
 8008ad0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ad4:	f383 8811 	msr	BASEPRI, r3
 8008ad8:	f3bf 8f6f 	isb	sy
 8008adc:	f3bf 8f4f 	dsb	sy
 8008ae0:	e7fe      	b.n	8008ae0 <xQueueSemaphoreTake+0xb4>
				else if( xEntryTimeSet == pdFALSE )
 8008ae2:	b916      	cbnz	r6, 8008aea <xQueueSemaphoreTake+0xbe>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008ae4:	a802      	add	r0, sp, #8
 8008ae6:	f000 fc9b 	bl	8009420 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8008aea:	f000 fe83 	bl	80097f4 <vPortExitCritical>
		vTaskSuspendAll();
 8008aee:	f000 fac1 	bl	8009074 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008af2:	f000 fe5f 	bl	80097b4 <vPortEnterCritical>
 8008af6:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8008afa:	2bff      	cmp	r3, #255	@ 0xff
 8008afc:	bf08      	it	eq
 8008afe:	f884 7044 	strbeq.w	r7, [r4, #68]	@ 0x44
 8008b02:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8008b06:	2bff      	cmp	r3, #255	@ 0xff
 8008b08:	bf08      	it	eq
 8008b0a:	f884 7045 	strbeq.w	r7, [r4, #69]	@ 0x45
 8008b0e:	f000 fe71 	bl	80097f4 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008b12:	a901      	add	r1, sp, #4
 8008b14:	a802      	add	r0, sp, #8
 8008b16:	f000 fc8f 	bl	8009438 <xTaskCheckForTimeOut>
 8008b1a:	bb50      	cbnz	r0, 8008b72 <xQueueSemaphoreTake+0x146>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008b1c:	4620      	mov	r0, r4
 8008b1e:	f7ff fc21 	bl	8008364 <prvIsQueueEmpty>
 8008b22:	b300      	cbz	r0, 8008b66 <xQueueSemaphoreTake+0x13a>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008b24:	6823      	ldr	r3, [r4, #0]
 8008b26:	b93b      	cbnz	r3, 8008b38 <xQueueSemaphoreTake+0x10c>
						taskENTER_CRITICAL();
 8008b28:	f000 fe44 	bl	80097b4 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8008b2c:	6860      	ldr	r0, [r4, #4]
 8008b2e:	f000 fcd5 	bl	80094dc <xTaskPriorityInherit>
 8008b32:	4605      	mov	r5, r0
						taskEXIT_CRITICAL();
 8008b34:	f000 fe5e 	bl	80097f4 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008b38:	9901      	ldr	r1, [sp, #4]
 8008b3a:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8008b3e:	f000 fc13 	bl	8009368 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008b42:	4620      	mov	r0, r4
 8008b44:	f7ff fc62 	bl	800840c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008b48:	f000 fb34 	bl	80091b4 <xTaskResumeAll>
 8008b4c:	b948      	cbnz	r0, 8008b62 <xQueueSemaphoreTake+0x136>
					portYIELD_WITHIN_API();
 8008b4e:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8008b52:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008b56:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8008b5a:	f3bf 8f4f 	dsb	sy
 8008b5e:	f3bf 8f6f 	isb	sy
 8008b62:	2601      	movs	r6, #1
 8008b64:	e781      	b.n	8008a6a <xQueueSemaphoreTake+0x3e>
				prvUnlockQueue( pxQueue );
 8008b66:	4620      	mov	r0, r4
 8008b68:	f7ff fc50 	bl	800840c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008b6c:	f000 fb22 	bl	80091b4 <xTaskResumeAll>
 8008b70:	e7f7      	b.n	8008b62 <xQueueSemaphoreTake+0x136>
			prvUnlockQueue( pxQueue );
 8008b72:	4620      	mov	r0, r4
 8008b74:	f7ff fc4a 	bl	800840c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008b78:	f000 fb1c 	bl	80091b4 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008b7c:	4620      	mov	r0, r4
 8008b7e:	f7ff fbf1 	bl	8008364 <prvIsQueueEmpty>
 8008b82:	2800      	cmp	r0, #0
 8008b84:	d0ed      	beq.n	8008b62 <xQueueSemaphoreTake+0x136>
					if( xInheritanceOccurred != pdFALSE )
 8008b86:	b165      	cbz	r5, 8008ba2 <xQueueSemaphoreTake+0x176>
						taskENTER_CRITICAL();
 8008b88:	f000 fe14 	bl	80097b4 <vPortEnterCritical>
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8008b8c:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8008b8e:	b119      	cbz	r1, 8008b98 <xQueueSemaphoreTake+0x16c>
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8008b90:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8008b92:	6819      	ldr	r1, [r3, #0]
 8008b94:	f1c1 0107 	rsb	r1, r1, #7
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8008b98:	6860      	ldr	r0, [r4, #4]
 8008b9a:	f000 fd3f 	bl	800961c <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
 8008b9e:	f000 fe29 	bl	80097f4 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8008ba2:	2000      	movs	r0, #0
 8008ba4:	e780      	b.n	8008aa8 <xQueueSemaphoreTake+0x7c>

08008ba6 <xQueueReceiveFromISR>:
{
 8008ba6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008baa:	4689      	mov	r9, r1
 8008bac:	4690      	mov	r8, r2
	configASSERT( pxQueue );
 8008bae:	4604      	mov	r4, r0
 8008bb0:	b940      	cbnz	r0, 8008bc4 <xQueueReceiveFromISR+0x1e>
 8008bb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008bb6:	f383 8811 	msr	BASEPRI, r3
 8008bba:	f3bf 8f6f 	isb	sy
 8008bbe:	f3bf 8f4f 	dsb	sy
 8008bc2:	e7fe      	b.n	8008bc2 <xQueueReceiveFromISR+0x1c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008bc4:	b951      	cbnz	r1, 8008bdc <xQueueReceiveFromISR+0x36>
 8008bc6:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8008bc8:	b143      	cbz	r3, 8008bdc <xQueueReceiveFromISR+0x36>
 8008bca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008bce:	f383 8811 	msr	BASEPRI, r3
 8008bd2:	f3bf 8f6f 	isb	sy
 8008bd6:	f3bf 8f4f 	dsb	sy
 8008bda:	e7fe      	b.n	8008bda <xQueueReceiveFromISR+0x34>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008bdc:	f000 fefc 	bl	80099d8 <vPortValidateInterruptPriority>
	__asm volatile
 8008be0:	f3ef 8711 	mrs	r7, BASEPRI
 8008be4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008be8:	f383 8811 	msr	BASEPRI, r3
 8008bec:	f3bf 8f6f 	isb	sy
 8008bf0:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008bf4:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008bf6:	b30d      	cbz	r5, 8008c3c <xQueueReceiveFromISR+0x96>
			const int8_t cRxLock = pxQueue->cRxLock;
 8008bf8:	f894 6044 	ldrb.w	r6, [r4, #68]	@ 0x44
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008bfc:	4649      	mov	r1, r9
			const int8_t cRxLock = pxQueue->cRxLock;
 8008bfe:	b276      	sxtb	r6, r6
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008c00:	4620      	mov	r0, r4
 8008c02:	f7ff fbed 	bl	80083e0 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008c06:	3d01      	subs	r5, #1
			if( cRxLock == queueUNLOCKED )
 8008c08:	1c73      	adds	r3, r6, #1
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008c0a:	63a5      	str	r5, [r4, #56]	@ 0x38
			if( cRxLock == queueUNLOCKED )
 8008c0c:	d111      	bne.n	8008c32 <xQueueReceiveFromISR+0x8c>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008c0e:	6923      	ldr	r3, [r4, #16]
 8008c10:	b153      	cbz	r3, 8008c28 <xQueueReceiveFromISR+0x82>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008c12:	f104 0010 	add.w	r0, r4, #16
 8008c16:	f000 fbc1 	bl	800939c <xTaskRemoveFromEventList>
 8008c1a:	b128      	cbz	r0, 8008c28 <xQueueReceiveFromISR+0x82>
						if( pxHigherPriorityTaskWoken != NULL )
 8008c1c:	f1b8 0f00 	cmp.w	r8, #0
 8008c20:	d002      	beq.n	8008c28 <xQueueReceiveFromISR+0x82>
							*pxHigherPriorityTaskWoken = pdTRUE;
 8008c22:	2301      	movs	r3, #1
 8008c24:	f8c8 3000 	str.w	r3, [r8]
			xReturn = pdPASS;
 8008c28:	2001      	movs	r0, #1
	__asm volatile
 8008c2a:	f387 8811 	msr	BASEPRI, r7
}
 8008c2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8008c32:	3601      	adds	r6, #1
 8008c34:	b276      	sxtb	r6, r6
 8008c36:	f884 6044 	strb.w	r6, [r4, #68]	@ 0x44
 8008c3a:	e7f5      	b.n	8008c28 <xQueueReceiveFromISR+0x82>
			xReturn = pdFAIL;
 8008c3c:	4628      	mov	r0, r5
 8008c3e:	e7f4      	b.n	8008c2a <xQueueReceiveFromISR+0x84>

08008c40 <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008c40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c44:	4604      	mov	r4, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008c46:	f000 fdb5 	bl	80097b4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008c4a:	4b2f      	ldr	r3, [pc, #188]	@ (8008d08 <prvAddNewTaskToReadyList+0xc8>)
		if( pxCurrentTCB == NULL )
 8008c4c:	4e2f      	ldr	r6, [pc, #188]	@ (8008d0c <prvAddNewTaskToReadyList+0xcc>)
		uxCurrentNumberOfTasks++;
 8008c4e:	681a      	ldr	r2, [r3, #0]
 8008c50:	4f2f      	ldr	r7, [pc, #188]	@ (8008d10 <prvAddNewTaskToReadyList+0xd0>)
 8008c52:	3201      	adds	r2, #1
 8008c54:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8008c56:	6835      	ldr	r5, [r6, #0]
 8008c58:	2d00      	cmp	r5, #0
 8008c5a:	d14a      	bne.n	8008cf2 <prvAddNewTaskToReadyList+0xb2>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008c5c:	6034      	str	r4, [r6, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	2b01      	cmp	r3, #1
 8008c62:	d11f      	bne.n	8008ca4 <prvAddNewTaskToReadyList+0x64>
 8008c64:	46b8      	mov	r8, r7
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008c66:	4640      	mov	r0, r8
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008c68:	3501      	adds	r5, #1
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008c6a:	f7ff fb3b 	bl	80082e4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008c6e:	2d07      	cmp	r5, #7
 8008c70:	f108 0814 	add.w	r8, r8, #20
 8008c74:	d1f7      	bne.n	8008c66 <prvAddNewTaskToReadyList+0x26>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008c76:	f8df 80c0 	ldr.w	r8, [pc, #192]	@ 8008d38 <prvAddNewTaskToReadyList+0xf8>
	vListInitialise( &xDelayedTaskList2 );
 8008c7a:	4d26      	ldr	r5, [pc, #152]	@ (8008d14 <prvAddNewTaskToReadyList+0xd4>)
	vListInitialise( &xDelayedTaskList1 );
 8008c7c:	4640      	mov	r0, r8
 8008c7e:	f7ff fb31 	bl	80082e4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008c82:	4628      	mov	r0, r5
 8008c84:	f7ff fb2e 	bl	80082e4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008c88:	4823      	ldr	r0, [pc, #140]	@ (8008d18 <prvAddNewTaskToReadyList+0xd8>)
 8008c8a:	f7ff fb2b 	bl	80082e4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008c8e:	4823      	ldr	r0, [pc, #140]	@ (8008d1c <prvAddNewTaskToReadyList+0xdc>)
 8008c90:	f7ff fb28 	bl	80082e4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008c94:	4822      	ldr	r0, [pc, #136]	@ (8008d20 <prvAddNewTaskToReadyList+0xe0>)
 8008c96:	f7ff fb25 	bl	80082e4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008c9a:	4b22      	ldr	r3, [pc, #136]	@ (8008d24 <prvAddNewTaskToReadyList+0xe4>)
 8008c9c:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008ca0:	4b21      	ldr	r3, [pc, #132]	@ (8008d28 <prvAddNewTaskToReadyList+0xe8>)
 8008ca2:	601d      	str	r5, [r3, #0]
		uxTaskNumber++;
 8008ca4:	4a21      	ldr	r2, [pc, #132]	@ (8008d2c <prvAddNewTaskToReadyList+0xec>)
		prvAddTaskToReadyList( pxNewTCB );
 8008ca6:	4922      	ldr	r1, [pc, #136]	@ (8008d30 <prvAddNewTaskToReadyList+0xf0>)
		uxTaskNumber++;
 8008ca8:	6813      	ldr	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8008caa:	6808      	ldr	r0, [r1, #0]
		uxTaskNumber++;
 8008cac:	3301      	adds	r3, #1
 8008cae:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8008cb0:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8008cb2:	2301      	movs	r3, #1
 8008cb4:	4093      	lsls	r3, r2
 8008cb6:	4303      	orrs	r3, r0
 8008cb8:	2014      	movs	r0, #20
 8008cba:	600b      	str	r3, [r1, #0]
 8008cbc:	fb00 7002 	mla	r0, r0, r2, r7
 8008cc0:	1d21      	adds	r1, r4, #4
 8008cc2:	f7ff fb1d 	bl	8008300 <vListInsertEnd>
	taskEXIT_CRITICAL();
 8008cc6:	f000 fd95 	bl	80097f4 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8008cca:	4b1a      	ldr	r3, [pc, #104]	@ (8008d34 <prvAddNewTaskToReadyList+0xf4>)
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	b173      	cbz	r3, 8008cee <prvAddNewTaskToReadyList+0xae>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008cd0:	6833      	ldr	r3, [r6, #0]
 8008cd2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008cd4:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8008cd6:	429a      	cmp	r2, r3
 8008cd8:	d209      	bcs.n	8008cee <prvAddNewTaskToReadyList+0xae>
			taskYIELD_IF_USING_PREEMPTION();
 8008cda:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8008cde:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008ce2:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8008ce6:	f3bf 8f4f 	dsb	sy
 8008cea:	f3bf 8f6f 	isb	sy
}
 8008cee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( xSchedulerRunning == pdFALSE )
 8008cf2:	4b10      	ldr	r3, [pc, #64]	@ (8008d34 <prvAddNewTaskToReadyList+0xf4>)
 8008cf4:	681a      	ldr	r2, [r3, #0]
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008cf6:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
			if( xSchedulerRunning == pdFALSE )
 8008cf8:	2a00      	cmp	r2, #0
 8008cfa:	d1d3      	bne.n	8008ca4 <prvAddNewTaskToReadyList+0x64>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008cfc:	6832      	ldr	r2, [r6, #0]
 8008cfe:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8008d00:	429a      	cmp	r2, r3
					pxCurrentTCB = pxNewTCB;
 8008d02:	bf98      	it	ls
 8008d04:	6034      	strls	r4, [r6, #0]
 8008d06:	e7cd      	b.n	8008ca4 <prvAddNewTaskToReadyList+0x64>
 8008d08:	200039a8 	.word	0x200039a8
 8008d0c:	20003aa8 	.word	0x20003aa8
 8008d10:	20003a1c 	.word	0x20003a1c
 8008d14:	200039f4 	.word	0x200039f4
 8008d18:	200039d8 	.word	0x200039d8
 8008d1c:	200039c4 	.word	0x200039c4
 8008d20:	200039ac 	.word	0x200039ac
 8008d24:	200039f0 	.word	0x200039f0
 8008d28:	200039ec 	.word	0x200039ec
 8008d2c:	2000398c 	.word	0x2000398c
 8008d30:	200039a0 	.word	0x200039a0
 8008d34:	2000399c 	.word	0x2000399c
 8008d38:	20003a08 	.word	0x20003a08

08008d3c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008d3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008d3e:	4b1a      	ldr	r3, [pc, #104]	@ (8008da8 <prvAddCurrentTaskToDelayedList+0x6c>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008d40:	4d1a      	ldr	r5, [pc, #104]	@ (8008dac <prvAddCurrentTaskToDelayedList+0x70>)
const TickType_t xConstTickCount = xTickCount;
 8008d42:	681c      	ldr	r4, [r3, #0]
{
 8008d44:	4606      	mov	r6, r0
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008d46:	6828      	ldr	r0, [r5, #0]
 8008d48:	3004      	adds	r0, #4
{
 8008d4a:	460f      	mov	r7, r1
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008d4c:	f7ff fafa 	bl	8008344 <uxListRemove>
 8008d50:	b940      	cbnz	r0, 8008d64 <prvAddCurrentTaskToDelayedList+0x28>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8008d52:	682a      	ldr	r2, [r5, #0]
 8008d54:	4916      	ldr	r1, [pc, #88]	@ (8008db0 <prvAddCurrentTaskToDelayedList+0x74>)
 8008d56:	6ad0      	ldr	r0, [r2, #44]	@ 0x2c
 8008d58:	680b      	ldr	r3, [r1, #0]
 8008d5a:	2201      	movs	r2, #1
 8008d5c:	4082      	lsls	r2, r0
 8008d5e:	ea23 0302 	bic.w	r3, r3, r2
 8008d62:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008d64:	1c73      	adds	r3, r6, #1
 8008d66:	d107      	bne.n	8008d78 <prvAddCurrentTaskToDelayedList+0x3c>
 8008d68:	b137      	cbz	r7, 8008d78 <prvAddCurrentTaskToDelayedList+0x3c>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008d6a:	6829      	ldr	r1, [r5, #0]
 8008d6c:	4811      	ldr	r0, [pc, #68]	@ (8008db4 <prvAddCurrentTaskToDelayedList+0x78>)

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008d6e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008d72:	3104      	adds	r1, #4
 8008d74:	f7ff bac4 	b.w	8008300 <vListInsertEnd>
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008d78:	682b      	ldr	r3, [r5, #0]
 8008d7a:	19a4      	adds	r4, r4, r6
 8008d7c:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008d7e:	d307      	bcc.n	8008d90 <prvAddCurrentTaskToDelayedList+0x54>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008d80:	4b0d      	ldr	r3, [pc, #52]	@ (8008db8 <prvAddCurrentTaskToDelayedList+0x7c>)
 8008d82:	6818      	ldr	r0, [r3, #0]
 8008d84:	6829      	ldr	r1, [r5, #0]
}
 8008d86:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008d8a:	3104      	adds	r1, #4
 8008d8c:	f7ff bac3 	b.w	8008316 <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008d90:	4b0a      	ldr	r3, [pc, #40]	@ (8008dbc <prvAddCurrentTaskToDelayedList+0x80>)
 8008d92:	6818      	ldr	r0, [r3, #0]
 8008d94:	6829      	ldr	r1, [r5, #0]
 8008d96:	3104      	adds	r1, #4
 8008d98:	f7ff fabd 	bl	8008316 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008d9c:	4b08      	ldr	r3, [pc, #32]	@ (8008dc0 <prvAddCurrentTaskToDelayedList+0x84>)
 8008d9e:	681a      	ldr	r2, [r3, #0]
 8008da0:	42a2      	cmp	r2, r4
					xNextTaskUnblockTime = xTimeToWake;
 8008da2:	bf88      	it	hi
 8008da4:	601c      	strhi	r4, [r3, #0]
}
 8008da6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008da8:	200039a4 	.word	0x200039a4
 8008dac:	20003aa8 	.word	0x20003aa8
 8008db0:	200039a0 	.word	0x200039a0
 8008db4:	200039ac 	.word	0x200039ac
 8008db8:	200039ec 	.word	0x200039ec
 8008dbc:	200039f0 	.word	0x200039f0
 8008dc0:	20003988 	.word	0x20003988

08008dc4 <prvResetNextTaskUnblockTime>:
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008dc4:	4a06      	ldr	r2, [pc, #24]	@ (8008de0 <prvResetNextTaskUnblockTime+0x1c>)
 8008dc6:	6813      	ldr	r3, [r2, #0]
 8008dc8:	6819      	ldr	r1, [r3, #0]
 8008dca:	4b06      	ldr	r3, [pc, #24]	@ (8008de4 <prvResetNextTaskUnblockTime+0x20>)
 8008dcc:	b919      	cbnz	r1, 8008dd6 <prvResetNextTaskUnblockTime+0x12>
		xNextTaskUnblockTime = portMAX_DELAY;
 8008dce:	f04f 32ff 	mov.w	r2, #4294967295
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008dd2:	601a      	str	r2, [r3, #0]
}
 8008dd4:	4770      	bx	lr
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8008dd6:	6812      	ldr	r2, [r2, #0]
 8008dd8:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008dda:	68d2      	ldr	r2, [r2, #12]
 8008ddc:	6852      	ldr	r2, [r2, #4]
 8008dde:	e7f8      	b.n	8008dd2 <prvResetNextTaskUnblockTime+0xe>
 8008de0:	200039f0 	.word	0x200039f0
 8008de4:	20003988 	.word	0x20003988

08008de8 <prvDeleteTCB>:
	{
 8008de8:	b510      	push	{r4, lr}
 8008dea:	4604      	mov	r4, r0
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8008dec:	304c      	adds	r0, #76	@ 0x4c
 8008dee:	f003 fd4d 	bl	800c88c <_reclaim_reent>
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008df2:	f894 309d 	ldrb.w	r3, [r4, #157]	@ 0x9d
 8008df6:	b93b      	cbnz	r3, 8008e08 <prvDeleteTCB+0x20>
				vPortFree( pxTCB->pxStack );
 8008df8:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8008dfa:	f000 fed3 	bl	8009ba4 <vPortFree>
				vPortFree( pxTCB );
 8008dfe:	4620      	mov	r0, r4
	}
 8008e00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				vPortFree( pxTCB );
 8008e04:	f000 bece 	b.w	8009ba4 <vPortFree>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008e08:	2b01      	cmp	r3, #1
 8008e0a:	d0f8      	beq.n	8008dfe <prvDeleteTCB+0x16>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008e0c:	2b02      	cmp	r3, #2
 8008e0e:	d008      	beq.n	8008e22 <prvDeleteTCB+0x3a>
	__asm volatile
 8008e10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e14:	f383 8811 	msr	BASEPRI, r3
 8008e18:	f3bf 8f6f 	isb	sy
 8008e1c:	f3bf 8f4f 	dsb	sy
 8008e20:	e7fe      	b.n	8008e20 <prvDeleteTCB+0x38>
	}
 8008e22:	bd10      	pop	{r4, pc}

08008e24 <prvIdleTask>:
{
 8008e24:	b580      	push	{r7, lr}
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008e26:	4c13      	ldr	r4, [pc, #76]	@ (8008e74 <prvIdleTask+0x50>)
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8008e28:	4f13      	ldr	r7, [pc, #76]	@ (8008e78 <prvIdleTask+0x54>)
				--uxCurrentNumberOfTasks;
 8008e2a:	4d14      	ldr	r5, [pc, #80]	@ (8008e7c <prvIdleTask+0x58>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008e2c:	6823      	ldr	r3, [r4, #0]
 8008e2e:	b973      	cbnz	r3, 8008e4e <prvIdleTask+0x2a>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008e30:	4b13      	ldr	r3, [pc, #76]	@ (8008e80 <prvIdleTask+0x5c>)
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	2b01      	cmp	r3, #1
 8008e36:	d9f8      	bls.n	8008e2a <prvIdleTask+0x6>
				taskYIELD();
 8008e38:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8008e3c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008e40:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8008e44:	f3bf 8f4f 	dsb	sy
 8008e48:	f3bf 8f6f 	isb	sy
 8008e4c:	e7ed      	b.n	8008e2a <prvIdleTask+0x6>
			taskENTER_CRITICAL();
 8008e4e:	f000 fcb1 	bl	80097b4 <vPortEnterCritical>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	68de      	ldr	r6, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008e56:	1d30      	adds	r0, r6, #4
 8008e58:	f7ff fa74 	bl	8008344 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008e5c:	682b      	ldr	r3, [r5, #0]
 8008e5e:	3b01      	subs	r3, #1
 8008e60:	602b      	str	r3, [r5, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008e62:	6823      	ldr	r3, [r4, #0]
 8008e64:	3b01      	subs	r3, #1
 8008e66:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 8008e68:	f000 fcc4 	bl	80097f4 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 8008e6c:	4630      	mov	r0, r6
 8008e6e:	f7ff ffbb 	bl	8008de8 <prvDeleteTCB>
 8008e72:	e7db      	b.n	8008e2c <prvIdleTask+0x8>
 8008e74:	200039c0 	.word	0x200039c0
 8008e78:	200039c4 	.word	0x200039c4
 8008e7c:	200039a8 	.word	0x200039a8
 8008e80:	20003a1c 	.word	0x20003a1c

08008e84 <prvInitialiseNewTask.constprop.0>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8008e84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008e88:	e9dd 9409 	ldrd	r9, r4, [sp, #36]	@ 0x24
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8008e8c:	f102 4280 	add.w	r2, r2, #1073741824	@ 0x40000000
 8008e90:	6b26      	ldr	r6, [r4, #48]	@ 0x30
 8008e92:	3a01      	subs	r2, #1
 8008e94:	eb06 0682 	add.w	r6, r6, r2, lsl #2
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8008e98:	4698      	mov	r8, r3
 8008e9a:	4607      	mov	r7, r0
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8008e9c:	1e4b      	subs	r3, r1, #1
 8008e9e:	f026 0607 	bic.w	r6, r6, #7
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008ea2:	f104 0233 	add.w	r2, r4, #51	@ 0x33
 8008ea6:	310f      	adds	r1, #15
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008ea8:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 8008eac:	f802 0f01 	strb.w	r0, [r2, #1]!
		if( pcName[ x ] == 0x00 )
 8008eb0:	b108      	cbz	r0, 8008eb6 <prvInitialiseNewTask.constprop.0+0x32>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008eb2:	428b      	cmp	r3, r1
 8008eb4:	d1f8      	bne.n	8008ea8 <prvInitialiseNewTask.constprop.0+0x24>
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008eb6:	9d08      	ldr	r5, [sp, #32]
 8008eb8:	2d06      	cmp	r5, #6
 8008eba:	bf28      	it	cs
 8008ebc:	2506      	movcs	r5, #6
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008ebe:	f04f 0a00 	mov.w	sl, #0
		pxNewTCB->uxMutexesHeld = 0;
 8008ec2:	e9c4 5a11 	strd	r5, sl, [r4, #68]	@ 0x44
	pxNewTCB->uxPriority = uxPriority;
 8008ec6:	62e5      	str	r5, [r4, #44]	@ 0x2c
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008ec8:	1d20      	adds	r0, r4, #4
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008eca:	f884 a043 	strb.w	sl, [r4, #67]	@ 0x43
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008ece:	f7ff fa14 	bl	80082fa <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008ed2:	f104 0018 	add.w	r0, r4, #24
 8008ed6:	f7ff fa10 	bl	80082fa <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008eda:	f1c5 0507 	rsb	r5, r5, #7
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8008ede:	224c      	movs	r2, #76	@ 0x4c
		pxNewTCB->ulNotifiedValue = 0;
 8008ee0:	f8c4 a098 	str.w	sl, [r4, #152]	@ 0x98
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8008ee4:	4651      	mov	r1, sl
 8008ee6:	18a0      	adds	r0, r4, r2
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008ee8:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008eea:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008eec:	6264      	str	r4, [r4, #36]	@ 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008eee:	f884 a09c 	strb.w	sl, [r4, #156]	@ 0x9c
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8008ef2:	f002 feef 	bl	800bcd4 <memset>
 8008ef6:	4b0a      	ldr	r3, [pc, #40]	@ (8008f20 <prvInitialiseNewTask.constprop.0+0x9c>)
 8008ef8:	6523      	str	r3, [r4, #80]	@ 0x50
 8008efa:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008efe:	33d0      	adds	r3, #208	@ 0xd0
 8008f00:	6562      	str	r2, [r4, #84]	@ 0x54
 8008f02:	65a3      	str	r3, [r4, #88]	@ 0x58
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008f04:	4642      	mov	r2, r8
 8008f06:	4639      	mov	r1, r7
 8008f08:	4630      	mov	r0, r6
 8008f0a:	f000 fc2b 	bl	8009764 <pxPortInitialiseStack>
 8008f0e:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 8008f10:	f1b9 0f00 	cmp.w	r9, #0
 8008f14:	d001      	beq.n	8008f1a <prvInitialiseNewTask.constprop.0+0x96>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008f16:	f8c9 4000 	str.w	r4, [r9]
}
 8008f1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f1e:	bf00      	nop
 8008f20:	200090c4 	.word	0x200090c4

08008f24 <xTaskCreateStatic>:
	{
 8008f24:	b570      	push	{r4, r5, r6, lr}
 8008f26:	b086      	sub	sp, #24
 8008f28:	e9dd 540b 	ldrd	r5, r4, [sp, #44]	@ 0x2c
		configASSERT( puxStackBuffer != NULL );
 8008f2c:	b945      	cbnz	r5, 8008f40 <xTaskCreateStatic+0x1c>
 8008f2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f32:	f383 8811 	msr	BASEPRI, r3
 8008f36:	f3bf 8f6f 	isb	sy
 8008f3a:	f3bf 8f4f 	dsb	sy
 8008f3e:	e7fe      	b.n	8008f3e <xTaskCreateStatic+0x1a>
		configASSERT( pxTaskBuffer != NULL );
 8008f40:	b944      	cbnz	r4, 8008f54 <xTaskCreateStatic+0x30>
 8008f42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f46:	f383 8811 	msr	BASEPRI, r3
 8008f4a:	f3bf 8f6f 	isb	sy
 8008f4e:	f3bf 8f4f 	dsb	sy
 8008f52:	e7fe      	b.n	8008f52 <xTaskCreateStatic+0x2e>
			volatile size_t xSize = sizeof( StaticTask_t );
 8008f54:	26a0      	movs	r6, #160	@ 0xa0
 8008f56:	9605      	str	r6, [sp, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008f58:	9e05      	ldr	r6, [sp, #20]
 8008f5a:	2ea0      	cmp	r6, #160	@ 0xa0
 8008f5c:	d008      	beq.n	8008f70 <xTaskCreateStatic+0x4c>
 8008f5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f62:	f383 8811 	msr	BASEPRI, r3
 8008f66:	f3bf 8f6f 	isb	sy
 8008f6a:	f3bf 8f4f 	dsb	sy
 8008f6e:	e7fe      	b.n	8008f6e <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008f70:	6325      	str	r5, [r4, #48]	@ 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008f72:	2502      	movs	r5, #2
 8008f74:	f884 509d 	strb.w	r5, [r4, #157]	@ 0x9d
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008f78:	ad04      	add	r5, sp, #16
 8008f7a:	9501      	str	r5, [sp, #4]
 8008f7c:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8008f7e:	9402      	str	r4, [sp, #8]
 8008f80:	9500      	str	r5, [sp, #0]
 8008f82:	f7ff ff7f 	bl	8008e84 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008f86:	4620      	mov	r0, r4
 8008f88:	f7ff fe5a 	bl	8008c40 <prvAddNewTaskToReadyList>
	}
 8008f8c:	9804      	ldr	r0, [sp, #16]
 8008f8e:	b006      	add	sp, #24
 8008f90:	bd70      	pop	{r4, r5, r6, pc}

08008f92 <xTaskCreate>:
	{
 8008f92:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008f96:	4607      	mov	r7, r0
 8008f98:	b085      	sub	sp, #20
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008f9a:	0090      	lsls	r0, r2, #2
	{
 8008f9c:	4688      	mov	r8, r1
 8008f9e:	4616      	mov	r6, r2
 8008fa0:	4699      	mov	r9, r3
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008fa2:	f000 fd6d 	bl	8009a80 <pvPortMalloc>
			if( pxStack != NULL )
 8008fa6:	4605      	mov	r5, r0
 8008fa8:	b920      	cbnz	r0, 8008fb4 <xTaskCreate+0x22>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008faa:	f04f 30ff 	mov.w	r0, #4294967295
	}
 8008fae:	b005      	add	sp, #20
 8008fb0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8008fb4:	20a0      	movs	r0, #160	@ 0xa0
 8008fb6:	f000 fd63 	bl	8009a80 <pvPortMalloc>
				if( pxNewTCB != NULL )
 8008fba:	4604      	mov	r4, r0
 8008fbc:	b198      	cbz	r0, 8008fe6 <xTaskCreate+0x54>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008fbe:	2300      	movs	r3, #0
 8008fc0:	f880 309d 	strb.w	r3, [r0, #157]	@ 0x9d
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008fc4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
					pxNewTCB->pxStack = pxStack;
 8008fc6:	6305      	str	r5, [r0, #48]	@ 0x30
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008fc8:	9301      	str	r3, [sp, #4]
 8008fca:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008fcc:	9002      	str	r0, [sp, #8]
 8008fce:	9300      	str	r3, [sp, #0]
 8008fd0:	4632      	mov	r2, r6
 8008fd2:	464b      	mov	r3, r9
 8008fd4:	4641      	mov	r1, r8
 8008fd6:	4638      	mov	r0, r7
 8008fd8:	f7ff ff54 	bl	8008e84 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008fdc:	4620      	mov	r0, r4
 8008fde:	f7ff fe2f 	bl	8008c40 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008fe2:	2001      	movs	r0, #1
 8008fe4:	e7e3      	b.n	8008fae <xTaskCreate+0x1c>
					vPortFree( pxStack );
 8008fe6:	4628      	mov	r0, r5
 8008fe8:	f000 fddc 	bl	8009ba4 <vPortFree>
		if( pxNewTCB != NULL )
 8008fec:	e7dd      	b.n	8008faa <xTaskCreate+0x18>
	...

08008ff0 <vTaskStartScheduler>:
{
 8008ff0:	b510      	push	{r4, lr}
 8008ff2:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008ff4:	2400      	movs	r4, #0
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008ff6:	aa07      	add	r2, sp, #28
 8008ff8:	a906      	add	r1, sp, #24
 8008ffa:	a805      	add	r0, sp, #20
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008ffc:	e9cd 4405 	strd	r4, r4, [sp, #20]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009000:	f7fa f9d8 	bl	80033b4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009004:	9b05      	ldr	r3, [sp, #20]
 8009006:	9302      	str	r3, [sp, #8]
 8009008:	9b06      	ldr	r3, [sp, #24]
 800900a:	9a07      	ldr	r2, [sp, #28]
 800900c:	4912      	ldr	r1, [pc, #72]	@ (8009058 <vTaskStartScheduler+0x68>)
 800900e:	4813      	ldr	r0, [pc, #76]	@ (800905c <vTaskStartScheduler+0x6c>)
 8009010:	e9cd 4300 	strd	r4, r3, [sp]
 8009014:	4623      	mov	r3, r4
 8009016:	f7ff ff85 	bl	8008f24 <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 800901a:	b1d0      	cbz	r0, 8009052 <vTaskStartScheduler+0x62>
 800901c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009020:	f383 8811 	msr	BASEPRI, r3
 8009024:	f3bf 8f6f 	isb	sy
 8009028:	f3bf 8f4f 	dsb	sy
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800902c:	4b0c      	ldr	r3, [pc, #48]	@ (8009060 <vTaskStartScheduler+0x70>)
 800902e:	4a0d      	ldr	r2, [pc, #52]	@ (8009064 <vTaskStartScheduler+0x74>)
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	334c      	adds	r3, #76	@ 0x4c
 8009034:	6013      	str	r3, [r2, #0]
		xNextTaskUnblockTime = portMAX_DELAY;
 8009036:	4b0c      	ldr	r3, [pc, #48]	@ (8009068 <vTaskStartScheduler+0x78>)
 8009038:	f04f 32ff 	mov.w	r2, #4294967295
 800903c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800903e:	4b0b      	ldr	r3, [pc, #44]	@ (800906c <vTaskStartScheduler+0x7c>)
 8009040:	2201      	movs	r2, #1
 8009042:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8009044:	4b0a      	ldr	r3, [pc, #40]	@ (8009070 <vTaskStartScheduler+0x80>)
 8009046:	601c      	str	r4, [r3, #0]
}
 8009048:	b008      	add	sp, #32
 800904a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if( xPortStartScheduler() != pdFALSE )
 800904e:	f000 bc41 	b.w	80098d4 <xPortStartScheduler>
}
 8009052:	b008      	add	sp, #32
 8009054:	bd10      	pop	{r4, pc}
 8009056:	bf00      	nop
 8009058:	08011de9 	.word	0x08011de9
 800905c:	08008e25 	.word	0x08008e25
 8009060:	20003aa8 	.word	0x20003aa8
 8009064:	200001a4 	.word	0x200001a4
 8009068:	20003988 	.word	0x20003988
 800906c:	2000399c 	.word	0x2000399c
 8009070:	200039a4 	.word	0x200039a4

08009074 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8009074:	4a02      	ldr	r2, [pc, #8]	@ (8009080 <vTaskSuspendAll+0xc>)
 8009076:	6813      	ldr	r3, [r2, #0]
 8009078:	3301      	adds	r3, #1
 800907a:	6013      	str	r3, [r2, #0]
}
 800907c:	4770      	bx	lr
 800907e:	bf00      	nop
 8009080:	20003984 	.word	0x20003984

08009084 <xTaskIncrementTick>:
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009084:	4b40      	ldr	r3, [pc, #256]	@ (8009188 <xTaskIncrementTick+0x104>)
 8009086:	681b      	ldr	r3, [r3, #0]
{
 8009088:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800908c:	2b00      	cmp	r3, #0
 800908e:	d174      	bne.n	800917a <xTaskIncrementTick+0xf6>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009090:	4b3e      	ldr	r3, [pc, #248]	@ (800918c <xTaskIncrementTick+0x108>)
 8009092:	681c      	ldr	r4, [r3, #0]
 8009094:	3401      	adds	r4, #1
		xTickCount = xConstTickCount;
 8009096:	601c      	str	r4, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009098:	b9bc      	cbnz	r4, 80090ca <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 800909a:	4b3d      	ldr	r3, [pc, #244]	@ (8009190 <xTaskIncrementTick+0x10c>)
 800909c:	681a      	ldr	r2, [r3, #0]
 800909e:	6812      	ldr	r2, [r2, #0]
 80090a0:	b142      	cbz	r2, 80090b4 <xTaskIncrementTick+0x30>
 80090a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090a6:	f383 8811 	msr	BASEPRI, r3
 80090aa:	f3bf 8f6f 	isb	sy
 80090ae:	f3bf 8f4f 	dsb	sy
 80090b2:	e7fe      	b.n	80090b2 <xTaskIncrementTick+0x2e>
 80090b4:	4a37      	ldr	r2, [pc, #220]	@ (8009194 <xTaskIncrementTick+0x110>)
 80090b6:	6819      	ldr	r1, [r3, #0]
 80090b8:	6810      	ldr	r0, [r2, #0]
 80090ba:	6018      	str	r0, [r3, #0]
 80090bc:	6011      	str	r1, [r2, #0]
 80090be:	4a36      	ldr	r2, [pc, #216]	@ (8009198 <xTaskIncrementTick+0x114>)
 80090c0:	6813      	ldr	r3, [r2, #0]
 80090c2:	3301      	adds	r3, #1
 80090c4:	6013      	str	r3, [r2, #0]
 80090c6:	f7ff fe7d 	bl	8008dc4 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 80090ca:	4d34      	ldr	r5, [pc, #208]	@ (800919c <xTaskIncrementTick+0x118>)
 80090cc:	4e34      	ldr	r6, [pc, #208]	@ (80091a0 <xTaskIncrementTick+0x11c>)
 80090ce:	682b      	ldr	r3, [r5, #0]
 80090d0:	4f34      	ldr	r7, [pc, #208]	@ (80091a4 <xTaskIncrementTick+0x120>)
 80090d2:	42a3      	cmp	r3, r4
BaseType_t xSwitchRequired = pdFALSE;
 80090d4:	f04f 0b00 	mov.w	fp, #0
		if( xConstTickCount >= xNextTaskUnblockTime )
 80090d8:	d911      	bls.n	80090fe <xTaskIncrementTick+0x7a>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80090da:	683a      	ldr	r2, [r7, #0]
 80090dc:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80090de:	2114      	movs	r1, #20
 80090e0:	434a      	muls	r2, r1
 80090e2:	58b2      	ldr	r2, [r6, r2]
				xSwitchRequired = pdTRUE;
 80090e4:	2a02      	cmp	r2, #2
 80090e6:	bf28      	it	cs
 80090e8:	f04f 0b01 	movcs.w	fp, #1
		if( xYieldPending != pdFALSE )
 80090ec:	4a2e      	ldr	r2, [pc, #184]	@ (80091a8 <xTaskIncrementTick+0x124>)
 80090ee:	6812      	ldr	r2, [r2, #0]
			xSwitchRequired = pdTRUE;
 80090f0:	2a00      	cmp	r2, #0
}
 80090f2:	bf0c      	ite	eq
 80090f4:	4658      	moveq	r0, fp
 80090f6:	2001      	movne	r0, #1
 80090f8:	b003      	add	sp, #12
 80090fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80090fe:	f8df a090 	ldr.w	sl, [pc, #144]	@ 8009190 <xTaskIncrementTick+0x10c>
					prvAddTaskToReadyList( pxTCB );
 8009102:	f8df 90ac 	ldr.w	r9, [pc, #172]	@ 80091b0 <xTaskIncrementTick+0x12c>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009106:	f8da 2000 	ldr.w	r2, [sl]
 800910a:	6812      	ldr	r2, [r2, #0]
 800910c:	b91a      	cbnz	r2, 8009116 <xTaskIncrementTick+0x92>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800910e:	f04f 32ff 	mov.w	r2, #4294967295
 8009112:	602a      	str	r2, [r5, #0]
					break;
 8009114:	e7e1      	b.n	80090da <xTaskIncrementTick+0x56>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8009116:	f8da 2000 	ldr.w	r2, [sl]
 800911a:	68d2      	ldr	r2, [r2, #12]
 800911c:	f8d2 800c 	ldr.w	r8, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009120:	f8d8 1004 	ldr.w	r1, [r8, #4]
					if( xConstTickCount < xItemValue )
 8009124:	428c      	cmp	r4, r1
 8009126:	d201      	bcs.n	800912c <xTaskIncrementTick+0xa8>
						xNextTaskUnblockTime = xItemValue;
 8009128:	6029      	str	r1, [r5, #0]
						break;
 800912a:	e7d6      	b.n	80090da <xTaskIncrementTick+0x56>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800912c:	f108 0304 	add.w	r3, r8, #4
 8009130:	4618      	mov	r0, r3
 8009132:	9301      	str	r3, [sp, #4]
 8009134:	f7ff f906 	bl	8008344 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009138:	f8d8 1028 	ldr.w	r1, [r8, #40]	@ 0x28
 800913c:	b119      	cbz	r1, 8009146 <xTaskIncrementTick+0xc2>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800913e:	f108 0018 	add.w	r0, r8, #24
 8009142:	f7ff f8ff 	bl	8008344 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009146:	f8d8 002c 	ldr.w	r0, [r8, #44]	@ 0x2c
 800914a:	f8d9 3000 	ldr.w	r3, [r9]
 800914e:	2201      	movs	r2, #1
 8009150:	fa02 f100 	lsl.w	r1, r2, r0
 8009154:	4319      	orrs	r1, r3
 8009156:	f04f 0c14 	mov.w	ip, #20
 800915a:	f8c9 1000 	str.w	r1, [r9]
 800915e:	fb0c 6000 	mla	r0, ip, r0, r6
 8009162:	9901      	ldr	r1, [sp, #4]
 8009164:	f7ff f8cc 	bl	8008300 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009168:	6838      	ldr	r0, [r7, #0]
 800916a:	f8d8 102c 	ldr.w	r1, [r8, #44]	@ 0x2c
 800916e:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
							xSwitchRequired = pdTRUE;
 8009170:	4291      	cmp	r1, r2
 8009172:	bf28      	it	cs
 8009174:	f04f 0b01 	movcs.w	fp, #1
 8009178:	e7c5      	b.n	8009106 <xTaskIncrementTick+0x82>
		++uxPendedTicks;
 800917a:	4a0c      	ldr	r2, [pc, #48]	@ (80091ac <xTaskIncrementTick+0x128>)
 800917c:	6813      	ldr	r3, [r2, #0]
 800917e:	3301      	adds	r3, #1
 8009180:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 8009182:	f04f 0b00 	mov.w	fp, #0
 8009186:	e7b1      	b.n	80090ec <xTaskIncrementTick+0x68>
 8009188:	20003984 	.word	0x20003984
 800918c:	200039a4 	.word	0x200039a4
 8009190:	200039f0 	.word	0x200039f0
 8009194:	200039ec 	.word	0x200039ec
 8009198:	20003990 	.word	0x20003990
 800919c:	20003988 	.word	0x20003988
 80091a0:	20003a1c 	.word	0x20003a1c
 80091a4:	20003aa8 	.word	0x20003aa8
 80091a8:	20003994 	.word	0x20003994
 80091ac:	20003998 	.word	0x20003998
 80091b0:	200039a0 	.word	0x200039a0

080091b4 <xTaskResumeAll>:
{
 80091b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( uxSchedulerSuspended );
 80091b8:	4c31      	ldr	r4, [pc, #196]	@ (8009280 <xTaskResumeAll+0xcc>)
 80091ba:	6823      	ldr	r3, [r4, #0]
 80091bc:	b943      	cbnz	r3, 80091d0 <xTaskResumeAll+0x1c>
 80091be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091c2:	f383 8811 	msr	BASEPRI, r3
 80091c6:	f3bf 8f6f 	isb	sy
 80091ca:	f3bf 8f4f 	dsb	sy
 80091ce:	e7fe      	b.n	80091ce <xTaskResumeAll+0x1a>
	taskENTER_CRITICAL();
 80091d0:	f000 faf0 	bl	80097b4 <vPortEnterCritical>
		--uxSchedulerSuspended;
 80091d4:	6823      	ldr	r3, [r4, #0]
 80091d6:	3b01      	subs	r3, #1
 80091d8:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80091da:	6824      	ldr	r4, [r4, #0]
 80091dc:	b12c      	cbz	r4, 80091ea <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 80091de:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 80091e0:	f000 fb08 	bl	80097f4 <vPortExitCritical>
}
 80091e4:	4620      	mov	r0, r4
 80091e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80091ea:	4b26      	ldr	r3, [pc, #152]	@ (8009284 <xTaskResumeAll+0xd0>)
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d0f5      	beq.n	80091de <xTaskResumeAll+0x2a>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80091f2:	4d25      	ldr	r5, [pc, #148]	@ (8009288 <xTaskResumeAll+0xd4>)
					prvAddTaskToReadyList( pxTCB );
 80091f4:	4e25      	ldr	r6, [pc, #148]	@ (800928c <xTaskResumeAll+0xd8>)
 80091f6:	f8df 80a4 	ldr.w	r8, [pc, #164]	@ 800929c <xTaskResumeAll+0xe8>
 80091fa:	e01f      	b.n	800923c <xTaskResumeAll+0x88>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80091fc:	68eb      	ldr	r3, [r5, #12]
 80091fe:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009200:	f104 0904 	add.w	r9, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009204:	f104 0018 	add.w	r0, r4, #24
 8009208:	f7ff f89c 	bl	8008344 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800920c:	4648      	mov	r0, r9
 800920e:	f7ff f899 	bl	8008344 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009212:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8009214:	6831      	ldr	r1, [r6, #0]
 8009216:	2701      	movs	r7, #1
 8009218:	fa07 f302 	lsl.w	r3, r7, r2
 800921c:	2014      	movs	r0, #20
 800921e:	430b      	orrs	r3, r1
 8009220:	fb00 8002 	mla	r0, r0, r2, r8
 8009224:	4649      	mov	r1, r9
 8009226:	6033      	str	r3, [r6, #0]
 8009228:	f7ff f86a 	bl	8008300 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800922c:	4b18      	ldr	r3, [pc, #96]	@ (8009290 <xTaskResumeAll+0xdc>)
 800922e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009234:	429a      	cmp	r2, r3
 8009236:	d301      	bcc.n	800923c <xTaskResumeAll+0x88>
						xYieldPending = pdTRUE;
 8009238:	4b16      	ldr	r3, [pc, #88]	@ (8009294 <xTaskResumeAll+0xe0>)
 800923a:	601f      	str	r7, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800923c:	682b      	ldr	r3, [r5, #0]
 800923e:	2b00      	cmp	r3, #0
 8009240:	d1dc      	bne.n	80091fc <xTaskResumeAll+0x48>
				if( pxTCB != NULL )
 8009242:	b10c      	cbz	r4, 8009248 <xTaskResumeAll+0x94>
					prvResetNextTaskUnblockTime();
 8009244:	f7ff fdbe 	bl	8008dc4 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8009248:	4d13      	ldr	r5, [pc, #76]	@ (8009298 <xTaskResumeAll+0xe4>)
 800924a:	682c      	ldr	r4, [r5, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800924c:	b144      	cbz	r4, 8009260 <xTaskResumeAll+0xac>
								xYieldPending = pdTRUE;
 800924e:	4e11      	ldr	r6, [pc, #68]	@ (8009294 <xTaskResumeAll+0xe0>)
 8009250:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 8009252:	f7ff ff17 	bl	8009084 <xTaskIncrementTick>
 8009256:	b100      	cbz	r0, 800925a <xTaskResumeAll+0xa6>
								xYieldPending = pdTRUE;
 8009258:	6037      	str	r7, [r6, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800925a:	3c01      	subs	r4, #1
 800925c:	d1f9      	bne.n	8009252 <xTaskResumeAll+0x9e>
						uxPendedTicks = 0;
 800925e:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 8009260:	4b0c      	ldr	r3, [pc, #48]	@ (8009294 <xTaskResumeAll+0xe0>)
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	2b00      	cmp	r3, #0
 8009266:	d0ba      	beq.n	80091de <xTaskResumeAll+0x2a>
					taskYIELD_IF_USING_PREEMPTION();
 8009268:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800926c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009270:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8009274:	f3bf 8f4f 	dsb	sy
 8009278:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 800927c:	2401      	movs	r4, #1
 800927e:	e7af      	b.n	80091e0 <xTaskResumeAll+0x2c>
 8009280:	20003984 	.word	0x20003984
 8009284:	200039a8 	.word	0x200039a8
 8009288:	200039d8 	.word	0x200039d8
 800928c:	200039a0 	.word	0x200039a0
 8009290:	20003aa8 	.word	0x20003aa8
 8009294:	20003994 	.word	0x20003994
 8009298:	20003998 	.word	0x20003998
 800929c:	20003a1c 	.word	0x20003a1c

080092a0 <vTaskDelay>:
	{
 80092a0:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 80092a2:	b950      	cbnz	r0, 80092ba <vTaskDelay+0x1a>
			portYIELD_WITHIN_API();
 80092a4:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80092a8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80092ac:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80092b0:	f3bf 8f4f 	dsb	sy
 80092b4:	f3bf 8f6f 	isb	sy
	}
 80092b8:	bd08      	pop	{r3, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 80092ba:	4b0a      	ldr	r3, [pc, #40]	@ (80092e4 <vTaskDelay+0x44>)
 80092bc:	6819      	ldr	r1, [r3, #0]
 80092be:	b141      	cbz	r1, 80092d2 <vTaskDelay+0x32>
 80092c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092c4:	f383 8811 	msr	BASEPRI, r3
 80092c8:	f3bf 8f6f 	isb	sy
 80092cc:	f3bf 8f4f 	dsb	sy
 80092d0:	e7fe      	b.n	80092d0 <vTaskDelay+0x30>
			vTaskSuspendAll();
 80092d2:	f7ff fecf 	bl	8009074 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80092d6:	f7ff fd31 	bl	8008d3c <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 80092da:	f7ff ff6b 	bl	80091b4 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 80092de:	2800      	cmp	r0, #0
 80092e0:	d0e0      	beq.n	80092a4 <vTaskDelay+0x4>
 80092e2:	e7e9      	b.n	80092b8 <vTaskDelay+0x18>
 80092e4:	20003984 	.word	0x20003984

080092e8 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80092e8:	4b19      	ldr	r3, [pc, #100]	@ (8009350 <vTaskSwitchContext+0x68>)
 80092ea:	681a      	ldr	r2, [r3, #0]
 80092ec:	4b19      	ldr	r3, [pc, #100]	@ (8009354 <vTaskSwitchContext+0x6c>)
{
 80092ee:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80092f0:	b112      	cbz	r2, 80092f8 <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 80092f2:	2201      	movs	r2, #1
 80092f4:	601a      	str	r2, [r3, #0]
}
 80092f6:	bd10      	pop	{r4, pc}
		xYieldPending = pdFALSE;
 80092f8:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80092fa:	4b17      	ldr	r3, [pc, #92]	@ (8009358 <vTaskSwitchContext+0x70>)
 80092fc:	681a      	ldr	r2, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80092fe:	fab2 f282 	clz	r2, r2
 8009302:	b2d2      	uxtb	r2, r2
 8009304:	f1c2 021f 	rsb	r2, r2, #31
 8009308:	2314      	movs	r3, #20
 800930a:	4914      	ldr	r1, [pc, #80]	@ (800935c <vTaskSwitchContext+0x74>)
 800930c:	4353      	muls	r3, r2
 800930e:	18c8      	adds	r0, r1, r3
 8009310:	58cc      	ldr	r4, [r1, r3]
 8009312:	b944      	cbnz	r4, 8009326 <vTaskSwitchContext+0x3e>
	__asm volatile
 8009314:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009318:	f383 8811 	msr	BASEPRI, r3
 800931c:	f3bf 8f6f 	isb	sy
 8009320:	f3bf 8f4f 	dsb	sy
 8009324:	e7fe      	b.n	8009324 <vTaskSwitchContext+0x3c>
 8009326:	6844      	ldr	r4, [r0, #4]
 8009328:	3308      	adds	r3, #8
 800932a:	6864      	ldr	r4, [r4, #4]
 800932c:	6044      	str	r4, [r0, #4]
 800932e:	440b      	add	r3, r1
 8009330:	429c      	cmp	r4, r3
 8009332:	bf04      	itt	eq
 8009334:	6863      	ldreq	r3, [r4, #4]
 8009336:	6043      	streq	r3, [r0, #4]
 8009338:	2314      	movs	r3, #20
 800933a:	fb03 1102 	mla	r1, r3, r2, r1
 800933e:	684b      	ldr	r3, [r1, #4]
 8009340:	68da      	ldr	r2, [r3, #12]
 8009342:	4b07      	ldr	r3, [pc, #28]	@ (8009360 <vTaskSwitchContext+0x78>)
 8009344:	601a      	str	r2, [r3, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	4a06      	ldr	r2, [pc, #24]	@ (8009364 <vTaskSwitchContext+0x7c>)
 800934a:	334c      	adds	r3, #76	@ 0x4c
 800934c:	6013      	str	r3, [r2, #0]
}
 800934e:	e7d2      	b.n	80092f6 <vTaskSwitchContext+0xe>
 8009350:	20003984 	.word	0x20003984
 8009354:	20003994 	.word	0x20003994
 8009358:	200039a0 	.word	0x200039a0
 800935c:	20003a1c 	.word	0x20003a1c
 8009360:	20003aa8 	.word	0x20003aa8
 8009364:	200001a4 	.word	0x200001a4

08009368 <vTaskPlaceOnEventList>:
{
 8009368:	b510      	push	{r4, lr}
 800936a:	460c      	mov	r4, r1
	configASSERT( pxEventList );
 800936c:	b940      	cbnz	r0, 8009380 <vTaskPlaceOnEventList+0x18>
 800936e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009372:	f383 8811 	msr	BASEPRI, r3
 8009376:	f3bf 8f6f 	isb	sy
 800937a:	f3bf 8f4f 	dsb	sy
 800937e:	e7fe      	b.n	800937e <vTaskPlaceOnEventList+0x16>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009380:	4b05      	ldr	r3, [pc, #20]	@ (8009398 <vTaskPlaceOnEventList+0x30>)
 8009382:	6819      	ldr	r1, [r3, #0]
 8009384:	3118      	adds	r1, #24
 8009386:	f7fe ffc6 	bl	8008316 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800938a:	4620      	mov	r0, r4
 800938c:	2101      	movs	r1, #1
}
 800938e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009392:	f7ff bcd3 	b.w	8008d3c <prvAddCurrentTaskToDelayedList>
 8009396:	bf00      	nop
 8009398:	20003aa8 	.word	0x20003aa8

0800939c <xTaskRemoveFromEventList>:
{
 800939c:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800939e:	68c3      	ldr	r3, [r0, #12]
 80093a0:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 80093a2:	b944      	cbnz	r4, 80093b6 <xTaskRemoveFromEventList+0x1a>
 80093a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80093a8:	f383 8811 	msr	BASEPRI, r3
 80093ac:	f3bf 8f6f 	isb	sy
 80093b0:	f3bf 8f4f 	dsb	sy
 80093b4:	e7fe      	b.n	80093b4 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80093b6:	f104 0518 	add.w	r5, r4, #24
 80093ba:	4628      	mov	r0, r5
 80093bc:	f7fe ffc2 	bl	8008344 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80093c0:	4b11      	ldr	r3, [pc, #68]	@ (8009408 <xTaskRemoveFromEventList+0x6c>)
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	b9e3      	cbnz	r3, 8009400 <xTaskRemoveFromEventList+0x64>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80093c6:	1d25      	adds	r5, r4, #4
 80093c8:	4628      	mov	r0, r5
 80093ca:	f7fe ffbb 	bl	8008344 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80093ce:	490f      	ldr	r1, [pc, #60]	@ (800940c <xTaskRemoveFromEventList+0x70>)
 80093d0:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80093d2:	6808      	ldr	r0, [r1, #0]
 80093d4:	2301      	movs	r3, #1
 80093d6:	4093      	lsls	r3, r2
 80093d8:	4303      	orrs	r3, r0
 80093da:	600b      	str	r3, [r1, #0]
 80093dc:	4b0c      	ldr	r3, [pc, #48]	@ (8009410 <xTaskRemoveFromEventList+0x74>)
 80093de:	2014      	movs	r0, #20
 80093e0:	4629      	mov	r1, r5
 80093e2:	fb00 3002 	mla	r0, r0, r2, r3
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80093e6:	f7fe ff8b 	bl	8008300 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80093ea:	4b0a      	ldr	r3, [pc, #40]	@ (8009414 <xTaskRemoveFromEventList+0x78>)
 80093ec:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80093f2:	429a      	cmp	r2, r3
		xYieldPending = pdTRUE;
 80093f4:	bf83      	ittte	hi
 80093f6:	4b08      	ldrhi	r3, [pc, #32]	@ (8009418 <xTaskRemoveFromEventList+0x7c>)
 80093f8:	2001      	movhi	r0, #1
 80093fa:	6018      	strhi	r0, [r3, #0]
		xReturn = pdFALSE;
 80093fc:	2000      	movls	r0, #0
}
 80093fe:	bd38      	pop	{r3, r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009400:	4806      	ldr	r0, [pc, #24]	@ (800941c <xTaskRemoveFromEventList+0x80>)
 8009402:	4629      	mov	r1, r5
 8009404:	e7ef      	b.n	80093e6 <xTaskRemoveFromEventList+0x4a>
 8009406:	bf00      	nop
 8009408:	20003984 	.word	0x20003984
 800940c:	200039a0 	.word	0x200039a0
 8009410:	20003a1c 	.word	0x20003a1c
 8009414:	20003aa8 	.word	0x20003aa8
 8009418:	20003994 	.word	0x20003994
 800941c:	200039d8 	.word	0x200039d8

08009420 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009420:	4b03      	ldr	r3, [pc, #12]	@ (8009430 <vTaskInternalSetTimeOutState+0x10>)
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009426:	4b03      	ldr	r3, [pc, #12]	@ (8009434 <vTaskInternalSetTimeOutState+0x14>)
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	6043      	str	r3, [r0, #4]
}
 800942c:	4770      	bx	lr
 800942e:	bf00      	nop
 8009430:	20003990 	.word	0x20003990
 8009434:	200039a4 	.word	0x200039a4

08009438 <xTaskCheckForTimeOut>:
{
 8009438:	b570      	push	{r4, r5, r6, lr}
 800943a:	460c      	mov	r4, r1
	configASSERT( pxTimeOut );
 800943c:	4605      	mov	r5, r0
 800943e:	b940      	cbnz	r0, 8009452 <xTaskCheckForTimeOut+0x1a>
 8009440:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009444:	f383 8811 	msr	BASEPRI, r3
 8009448:	f3bf 8f6f 	isb	sy
 800944c:	f3bf 8f4f 	dsb	sy
 8009450:	e7fe      	b.n	8009450 <xTaskCheckForTimeOut+0x18>
	configASSERT( pxTicksToWait );
 8009452:	b941      	cbnz	r1, 8009466 <xTaskCheckForTimeOut+0x2e>
 8009454:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009458:	f383 8811 	msr	BASEPRI, r3
 800945c:	f3bf 8f6f 	isb	sy
 8009460:	f3bf 8f4f 	dsb	sy
 8009464:	e7fe      	b.n	8009464 <xTaskCheckForTimeOut+0x2c>
	taskENTER_CRITICAL();
 8009466:	f000 f9a5 	bl	80097b4 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 800946a:	4b0f      	ldr	r3, [pc, #60]	@ (80094a8 <xTaskCheckForTimeOut+0x70>)
 800946c:	6819      	ldr	r1, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 800946e:	6823      	ldr	r3, [r4, #0]
 8009470:	1c5a      	adds	r2, r3, #1
 8009472:	d010      	beq.n	8009496 <xTaskCheckForTimeOut+0x5e>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009474:	480d      	ldr	r0, [pc, #52]	@ (80094ac <xTaskCheckForTimeOut+0x74>)
 8009476:	682e      	ldr	r6, [r5, #0]
 8009478:	6800      	ldr	r0, [r0, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800947a:	686a      	ldr	r2, [r5, #4]
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800947c:	4286      	cmp	r6, r0
 800947e:	d001      	beq.n	8009484 <xTaskCheckForTimeOut+0x4c>
 8009480:	428a      	cmp	r2, r1
 8009482:	d90f      	bls.n	80094a4 <xTaskCheckForTimeOut+0x6c>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009484:	1a88      	subs	r0, r1, r2
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009486:	4283      	cmp	r3, r0
 8009488:	d90a      	bls.n	80094a0 <xTaskCheckForTimeOut+0x68>
			*pxTicksToWait -= xElapsedTime;
 800948a:	1a5b      	subs	r3, r3, r1
 800948c:	4413      	add	r3, r2
 800948e:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009490:	4628      	mov	r0, r5
 8009492:	f7ff ffc5 	bl	8009420 <vTaskInternalSetTimeOutState>
				xReturn = pdFALSE;
 8009496:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8009498:	f000 f9ac 	bl	80097f4 <vPortExitCritical>
}
 800949c:	4620      	mov	r0, r4
 800949e:	bd70      	pop	{r4, r5, r6, pc}
			*pxTicksToWait = 0;
 80094a0:	2300      	movs	r3, #0
 80094a2:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 80094a4:	2401      	movs	r4, #1
 80094a6:	e7f7      	b.n	8009498 <xTaskCheckForTimeOut+0x60>
 80094a8:	200039a4 	.word	0x200039a4
 80094ac:	20003990 	.word	0x20003990

080094b0 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 80094b0:	4b01      	ldr	r3, [pc, #4]	@ (80094b8 <vTaskMissedYield+0x8>)
 80094b2:	2201      	movs	r2, #1
 80094b4:	601a      	str	r2, [r3, #0]
}
 80094b6:	4770      	bx	lr
 80094b8:	20003994 	.word	0x20003994

080094bc <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 80094bc:	4b05      	ldr	r3, [pc, #20]	@ (80094d4 <xTaskGetSchedulerState+0x18>)
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	b133      	cbz	r3, 80094d0 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80094c2:	4b05      	ldr	r3, [pc, #20]	@ (80094d8 <xTaskGetSchedulerState+0x1c>)
 80094c4:	6818      	ldr	r0, [r3, #0]
 80094c6:	fab0 f080 	clz	r0, r0
 80094ca:	0940      	lsrs	r0, r0, #5
 80094cc:	0040      	lsls	r0, r0, #1
 80094ce:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 80094d0:	2001      	movs	r0, #1
	}
 80094d2:	4770      	bx	lr
 80094d4:	2000399c 	.word	0x2000399c
 80094d8:	20003984 	.word	0x20003984

080094dc <xTaskPriorityInherit>:
	{
 80094dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		if( pxMutexHolder != NULL )
 80094e0:	4604      	mov	r4, r0
 80094e2:	2800      	cmp	r0, #0
 80094e4:	d02e      	beq.n	8009544 <xTaskPriorityInherit+0x68>
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80094e6:	4d22      	ldr	r5, [pc, #136]	@ (8009570 <xTaskPriorityInherit+0x94>)
 80094e8:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 80094ea:	682a      	ldr	r2, [r5, #0]
 80094ec:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80094ee:	4293      	cmp	r3, r2
 80094f0:	d236      	bcs.n	8009560 <xTaskPriorityInherit+0x84>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80094f2:	6982      	ldr	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80094f4:	4f1f      	ldr	r7, [pc, #124]	@ (8009574 <xTaskPriorityInherit+0x98>)
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80094f6:	2a00      	cmp	r2, #0
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80094f8:	bfa1      	itttt	ge
 80094fa:	682a      	ldrge	r2, [r5, #0]
 80094fc:	6ad2      	ldrge	r2, [r2, #44]	@ 0x2c
 80094fe:	f1c2 0207 	rsbge	r2, r2, #7
 8009502:	6182      	strge	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8009504:	2614      	movs	r6, #20
 8009506:	6942      	ldr	r2, [r0, #20]
 8009508:	fb06 7303 	mla	r3, r6, r3, r7
 800950c:	429a      	cmp	r2, r3
 800950e:	d115      	bne.n	800953c <xTaskPriorityInherit+0x60>
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009510:	f100 0804 	add.w	r8, r0, #4
 8009514:	4640      	mov	r0, r8
 8009516:	f7fe ff15 	bl	8008344 <uxListRemove>
 800951a:	4a17      	ldr	r2, [pc, #92]	@ (8009578 <xTaskPriorityInherit+0x9c>)
 800951c:	b1a0      	cbz	r0, 8009548 <xTaskPriorityInherit+0x6c>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800951e:	682b      	ldr	r3, [r5, #0]
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8009520:	6811      	ldr	r1, [r2, #0]
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009522:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8009524:	62e0      	str	r0, [r4, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8009526:	2301      	movs	r3, #1
 8009528:	4083      	lsls	r3, r0
 800952a:	430b      	orrs	r3, r1
 800952c:	6013      	str	r3, [r2, #0]
 800952e:	2314      	movs	r3, #20
 8009530:	4641      	mov	r1, r8
 8009532:	fb03 7000 	mla	r0, r3, r0, r7
 8009536:	f7fe fee3 	bl	8008300 <vListInsertEnd>
 800953a:	e002      	b.n	8009542 <xTaskPriorityInherit+0x66>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800953c:	682b      	ldr	r3, [r5, #0]
 800953e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009540:	62c3      	str	r3, [r0, #44]	@ 0x2c
				xReturn = pdTRUE;
 8009542:	2001      	movs	r0, #1
	}
 8009544:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8009548:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 800954a:	4346      	muls	r6, r0
 800954c:	59bb      	ldr	r3, [r7, r6]
 800954e:	2b00      	cmp	r3, #0
 8009550:	d1e5      	bne.n	800951e <xTaskPriorityInherit+0x42>
 8009552:	6813      	ldr	r3, [r2, #0]
 8009554:	2101      	movs	r1, #1
 8009556:	4081      	lsls	r1, r0
 8009558:	ea23 0301 	bic.w	r3, r3, r1
 800955c:	6013      	str	r3, [r2, #0]
 800955e:	e7de      	b.n	800951e <xTaskPriorityInherit+0x42>
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8009560:	682b      	ldr	r3, [r5, #0]
 8009562:	6c40      	ldr	r0, [r0, #68]	@ 0x44
 8009564:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009566:	4298      	cmp	r0, r3
 8009568:	bf2c      	ite	cs
 800956a:	2000      	movcs	r0, #0
 800956c:	2001      	movcc	r0, #1
 800956e:	e7e9      	b.n	8009544 <xTaskPriorityInherit+0x68>
 8009570:	20003aa8 	.word	0x20003aa8
 8009574:	20003a1c 	.word	0x20003a1c
 8009578:	200039a0 	.word	0x200039a0

0800957c <xTaskPriorityDisinherit>:
	{
 800957c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if( pxMutexHolder != NULL )
 800957e:	4604      	mov	r4, r0
 8009580:	b908      	cbnz	r0, 8009586 <xTaskPriorityDisinherit+0xa>
	BaseType_t xReturn = pdFALSE;
 8009582:	2000      	movs	r0, #0
	}
 8009584:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			configASSERT( pxTCB == pxCurrentTCB );
 8009586:	4b22      	ldr	r3, [pc, #136]	@ (8009610 <xTaskPriorityDisinherit+0x94>)
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	4283      	cmp	r3, r0
 800958c:	d008      	beq.n	80095a0 <xTaskPriorityDisinherit+0x24>
 800958e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009592:	f383 8811 	msr	BASEPRI, r3
 8009596:	f3bf 8f6f 	isb	sy
 800959a:	f3bf 8f4f 	dsb	sy
 800959e:	e7fe      	b.n	800959e <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 80095a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80095a2:	b943      	cbnz	r3, 80095b6 <xTaskPriorityDisinherit+0x3a>
 80095a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095a8:	f383 8811 	msr	BASEPRI, r3
 80095ac:	f3bf 8f6f 	isb	sy
 80095b0:	f3bf 8f4f 	dsb	sy
 80095b4:	e7fe      	b.n	80095b4 <xTaskPriorityDisinherit+0x38>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80095b6:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 80095b8:	6c42      	ldr	r2, [r0, #68]	@ 0x44
			( pxTCB->uxMutexesHeld )--;
 80095ba:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80095bc:	4291      	cmp	r1, r2
			( pxTCB->uxMutexesHeld )--;
 80095be:	6483      	str	r3, [r0, #72]	@ 0x48
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80095c0:	d0df      	beq.n	8009582 <xTaskPriorityDisinherit+0x6>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d1dd      	bne.n	8009582 <xTaskPriorityDisinherit+0x6>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80095c6:	1d06      	adds	r6, r0, #4
 80095c8:	4630      	mov	r0, r6
 80095ca:	f7fe febb 	bl	8008344 <uxListRemove>
 80095ce:	4f11      	ldr	r7, [pc, #68]	@ (8009614 <xTaskPriorityDisinherit+0x98>)
 80095d0:	4a11      	ldr	r2, [pc, #68]	@ (8009618 <xTaskPriorityDisinherit+0x9c>)
 80095d2:	b950      	cbnz	r0, 80095ea <xTaskPriorityDisinherit+0x6e>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80095d4:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80095d6:	2314      	movs	r3, #20
 80095d8:	434b      	muls	r3, r1
 80095da:	58fb      	ldr	r3, [r7, r3]
 80095dc:	b92b      	cbnz	r3, 80095ea <xTaskPriorityDisinherit+0x6e>
 80095de:	6813      	ldr	r3, [r2, #0]
 80095e0:	2501      	movs	r5, #1
 80095e2:	408d      	lsls	r5, r1
 80095e4:	ea23 0305 	bic.w	r3, r3, r5
 80095e8:	6013      	str	r3, [r2, #0]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80095ea:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 80095ec:	62e3      	str	r3, [r4, #44]	@ 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80095ee:	f1c3 0107 	rsb	r1, r3, #7
 80095f2:	61a1      	str	r1, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 80095f4:	6811      	ldr	r1, [r2, #0]
 80095f6:	2401      	movs	r4, #1
 80095f8:	fa04 f503 	lsl.w	r5, r4, r3
 80095fc:	2014      	movs	r0, #20
 80095fe:	430d      	orrs	r5, r1
 8009600:	fb00 7003 	mla	r0, r0, r3, r7
 8009604:	4631      	mov	r1, r6
 8009606:	6015      	str	r5, [r2, #0]
 8009608:	f7fe fe7a 	bl	8008300 <vListInsertEnd>
					xReturn = pdTRUE;
 800960c:	4620      	mov	r0, r4
		return xReturn;
 800960e:	e7b9      	b.n	8009584 <xTaskPriorityDisinherit+0x8>
 8009610:	20003aa8 	.word	0x20003aa8
 8009614:	20003a1c 	.word	0x20003a1c
 8009618:	200039a0 	.word	0x200039a0

0800961c <vTaskPriorityDisinheritAfterTimeout>:
	{
 800961c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if( pxMutexHolder != NULL )
 800961e:	4604      	mov	r4, r0
 8009620:	2800      	cmp	r0, #0
 8009622:	d04d      	beq.n	80096c0 <vTaskPriorityDisinheritAfterTimeout+0xa4>
			configASSERT( pxTCB->uxMutexesHeld );
 8009624:	6c82      	ldr	r2, [r0, #72]	@ 0x48
 8009626:	b942      	cbnz	r2, 800963a <vTaskPriorityDisinheritAfterTimeout+0x1e>
 8009628:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800962c:	f383 8811 	msr	BASEPRI, r3
 8009630:	f3bf 8f6f 	isb	sy
 8009634:	f3bf 8f4f 	dsb	sy
 8009638:	e7fe      	b.n	8009638 <vTaskPriorityDisinheritAfterTimeout+0x1c>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800963a:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 800963c:	4299      	cmp	r1, r3
 800963e:	bf38      	it	cc
 8009640:	4619      	movcc	r1, r3
			if( pxTCB->uxPriority != uxPriorityToUse )
 8009642:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8009644:	428b      	cmp	r3, r1
 8009646:	d03b      	beq.n	80096c0 <vTaskPriorityDisinheritAfterTimeout+0xa4>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8009648:	2a01      	cmp	r2, #1
 800964a:	d139      	bne.n	80096c0 <vTaskPriorityDisinheritAfterTimeout+0xa4>
					configASSERT( pxTCB != pxCurrentTCB );
 800964c:	4a1d      	ldr	r2, [pc, #116]	@ (80096c4 <vTaskPriorityDisinheritAfterTimeout+0xa8>)
 800964e:	6812      	ldr	r2, [r2, #0]
 8009650:	4282      	cmp	r2, r0
 8009652:	d108      	bne.n	8009666 <vTaskPriorityDisinheritAfterTimeout+0x4a>
 8009654:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009658:	f383 8811 	msr	BASEPRI, r3
 800965c:	f3bf 8f6f 	isb	sy
 8009660:	f3bf 8f4f 	dsb	sy
 8009664:	e7fe      	b.n	8009664 <vTaskPriorityDisinheritAfterTimeout+0x48>
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009666:	6982      	ldr	r2, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8009668:	4e17      	ldr	r6, [pc, #92]	@ (80096c8 <vTaskPriorityDisinheritAfterTimeout+0xac>)
					pxTCB->uxPriority = uxPriorityToUse;
 800966a:	62c1      	str	r1, [r0, #44]	@ 0x2c
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800966c:	2a00      	cmp	r2, #0
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800966e:	f04f 0514 	mov.w	r5, #20
 8009672:	6942      	ldr	r2, [r0, #20]
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009674:	bfa8      	it	ge
 8009676:	f1c1 0107 	rsbge	r1, r1, #7
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800967a:	fb05 6303 	mla	r3, r5, r3, r6
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800967e:	bfa8      	it	ge
 8009680:	6181      	strge	r1, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8009682:	429a      	cmp	r2, r3
 8009684:	d11c      	bne.n	80096c0 <vTaskPriorityDisinheritAfterTimeout+0xa4>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009686:	1d07      	adds	r7, r0, #4
 8009688:	4638      	mov	r0, r7
 800968a:	f7fe fe5b 	bl	8008344 <uxListRemove>
 800968e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8009690:	4c0e      	ldr	r4, [pc, #56]	@ (80096cc <vTaskPriorityDisinheritAfterTimeout+0xb0>)
 8009692:	b940      	cbnz	r0, 80096a6 <vTaskPriorityDisinheritAfterTimeout+0x8a>
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8009694:	4355      	muls	r5, r2
 8009696:	5973      	ldr	r3, [r6, r5]
 8009698:	b92b      	cbnz	r3, 80096a6 <vTaskPriorityDisinheritAfterTimeout+0x8a>
 800969a:	6823      	ldr	r3, [r4, #0]
 800969c:	2101      	movs	r1, #1
 800969e:	4091      	lsls	r1, r2
 80096a0:	ea23 0301 	bic.w	r3, r3, r1
 80096a4:	6023      	str	r3, [r4, #0]
						prvAddTaskToReadyList( pxTCB );
 80096a6:	6821      	ldr	r1, [r4, #0]
 80096a8:	2301      	movs	r3, #1
 80096aa:	4093      	lsls	r3, r2
 80096ac:	430b      	orrs	r3, r1
 80096ae:	2014      	movs	r0, #20
 80096b0:	6023      	str	r3, [r4, #0]
 80096b2:	4639      	mov	r1, r7
 80096b4:	fb00 6002 	mla	r0, r0, r2, r6
	}
 80096b8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
						prvAddTaskToReadyList( pxTCB );
 80096bc:	f7fe be20 	b.w	8008300 <vListInsertEnd>
	}
 80096c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80096c2:	bf00      	nop
 80096c4:	20003aa8 	.word	0x20003aa8
 80096c8:	20003a1c 	.word	0x20003a1c
 80096cc:	200039a0 	.word	0x200039a0

080096d0 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 80096d0:	4b04      	ldr	r3, [pc, #16]	@ (80096e4 <pvTaskIncrementMutexHeldCount+0x14>)
 80096d2:	681a      	ldr	r2, [r3, #0]
 80096d4:	b11a      	cbz	r2, 80096de <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
 80096d6:	6819      	ldr	r1, [r3, #0]
 80096d8:	6c8a      	ldr	r2, [r1, #72]	@ 0x48
 80096da:	3201      	adds	r2, #1
 80096dc:	648a      	str	r2, [r1, #72]	@ 0x48
		return pxCurrentTCB;
 80096de:	6818      	ldr	r0, [r3, #0]
	}
 80096e0:	4770      	bx	lr
 80096e2:	bf00      	nop
 80096e4:	20003aa8 	.word	0x20003aa8

080096e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80096e8:	4808      	ldr	r0, [pc, #32]	@ (800970c <prvPortStartFirstTask+0x24>)
 80096ea:	6800      	ldr	r0, [r0, #0]
 80096ec:	6800      	ldr	r0, [r0, #0]
 80096ee:	f380 8808 	msr	MSP, r0
 80096f2:	f04f 0000 	mov.w	r0, #0
 80096f6:	f380 8814 	msr	CONTROL, r0
 80096fa:	b662      	cpsie	i
 80096fc:	b661      	cpsie	f
 80096fe:	f3bf 8f4f 	dsb	sy
 8009702:	f3bf 8f6f 	isb	sy
 8009706:	df00      	svc	0
 8009708:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800970a:	0000      	.short	0x0000
 800970c:	e000ed08 	.word	0xe000ed08

08009710 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009710:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8009720 <vPortEnableVFP+0x10>
 8009714:	6801      	ldr	r1, [r0, #0]
 8009716:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800971a:	6001      	str	r1, [r0, #0]
 800971c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800971e:	0000      	.short	0x0000
 8009720:	e000ed88 	.word	0xe000ed88

08009724 <prvTaskExitError>:
{
 8009724:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 8009726:	2300      	movs	r3, #0
 8009728:	9301      	str	r3, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
 800972a:	4b0d      	ldr	r3, [pc, #52]	@ (8009760 <prvTaskExitError+0x3c>)
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	3301      	adds	r3, #1
 8009730:	d008      	beq.n	8009744 <prvTaskExitError+0x20>
 8009732:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009736:	f383 8811 	msr	BASEPRI, r3
 800973a:	f3bf 8f6f 	isb	sy
 800973e:	f3bf 8f4f 	dsb	sy
 8009742:	e7fe      	b.n	8009742 <prvTaskExitError+0x1e>
 8009744:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009748:	f383 8811 	msr	BASEPRI, r3
 800974c:	f3bf 8f6f 	isb	sy
 8009750:	f3bf 8f4f 	dsb	sy
	while( ulDummy == 0 )
 8009754:	9b01      	ldr	r3, [sp, #4]
 8009756:	2b00      	cmp	r3, #0
 8009758:	d0fc      	beq.n	8009754 <prvTaskExitError+0x30>
}
 800975a:	b002      	add	sp, #8
 800975c:	4770      	bx	lr
 800975e:	bf00      	nop
 8009760:	20000020 	.word	0x20000020

08009764 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009764:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8009768:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800976c:	4b07      	ldr	r3, [pc, #28]	@ (800978c <pxPortInitialiseStack+0x28>)
 800976e:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009772:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009776:	f06f 0302 	mvn.w	r3, #2
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800977a:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800977e:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009782:	f840 3c24 	str.w	r3, [r0, #-36]
}
 8009786:	3844      	subs	r0, #68	@ 0x44
 8009788:	4770      	bx	lr
 800978a:	bf00      	nop
 800978c:	08009725 	.word	0x08009725

08009790 <SVC_Handler>:
	__asm volatile (
 8009790:	4b07      	ldr	r3, [pc, #28]	@ (80097b0 <pxCurrentTCBConst2>)
 8009792:	6819      	ldr	r1, [r3, #0]
 8009794:	6808      	ldr	r0, [r1, #0]
 8009796:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800979a:	f380 8809 	msr	PSP, r0
 800979e:	f3bf 8f6f 	isb	sy
 80097a2:	f04f 0000 	mov.w	r0, #0
 80097a6:	f380 8811 	msr	BASEPRI, r0
 80097aa:	4770      	bx	lr
 80097ac:	f3af 8000 	nop.w

080097b0 <pxCurrentTCBConst2>:
 80097b0:	20003aa8 	.word	0x20003aa8

080097b4 <vPortEnterCritical>:
 80097b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097b8:	f383 8811 	msr	BASEPRI, r3
 80097bc:	f3bf 8f6f 	isb	sy
 80097c0:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 80097c4:	4a0a      	ldr	r2, [pc, #40]	@ (80097f0 <vPortEnterCritical+0x3c>)
 80097c6:	6813      	ldr	r3, [r2, #0]
 80097c8:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 80097ca:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 80097cc:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 80097ce:	d10e      	bne.n	80097ee <vPortEnterCritical+0x3a>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80097d0:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80097d4:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	@ 0xd04
 80097d8:	b2db      	uxtb	r3, r3
 80097da:	b143      	cbz	r3, 80097ee <vPortEnterCritical+0x3a>
 80097dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097e0:	f383 8811 	msr	BASEPRI, r3
 80097e4:	f3bf 8f6f 	isb	sy
 80097e8:	f3bf 8f4f 	dsb	sy
 80097ec:	e7fe      	b.n	80097ec <vPortEnterCritical+0x38>
}
 80097ee:	4770      	bx	lr
 80097f0:	20000020 	.word	0x20000020

080097f4 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 80097f4:	4a08      	ldr	r2, [pc, #32]	@ (8009818 <vPortExitCritical+0x24>)
 80097f6:	6813      	ldr	r3, [r2, #0]
 80097f8:	b943      	cbnz	r3, 800980c <vPortExitCritical+0x18>
 80097fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097fe:	f383 8811 	msr	BASEPRI, r3
 8009802:	f3bf 8f6f 	isb	sy
 8009806:	f3bf 8f4f 	dsb	sy
 800980a:	e7fe      	b.n	800980a <vPortExitCritical+0x16>
	uxCriticalNesting--;
 800980c:	3b01      	subs	r3, #1
 800980e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009810:	b90b      	cbnz	r3, 8009816 <vPortExitCritical+0x22>
	__asm volatile
 8009812:	f383 8811 	msr	BASEPRI, r3
}
 8009816:	4770      	bx	lr
 8009818:	20000020 	.word	0x20000020
 800981c:	00000000 	.word	0x00000000

08009820 <PendSV_Handler>:
	__asm volatile
 8009820:	f3ef 8009 	mrs	r0, PSP
 8009824:	f3bf 8f6f 	isb	sy
 8009828:	4b15      	ldr	r3, [pc, #84]	@ (8009880 <pxCurrentTCBConst>)
 800982a:	681a      	ldr	r2, [r3, #0]
 800982c:	f01e 0f10 	tst.w	lr, #16
 8009830:	bf08      	it	eq
 8009832:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009836:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800983a:	6010      	str	r0, [r2, #0]
 800983c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009840:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8009844:	f380 8811 	msr	BASEPRI, r0
 8009848:	f3bf 8f4f 	dsb	sy
 800984c:	f3bf 8f6f 	isb	sy
 8009850:	f7ff fd4a 	bl	80092e8 <vTaskSwitchContext>
 8009854:	f04f 0000 	mov.w	r0, #0
 8009858:	f380 8811 	msr	BASEPRI, r0
 800985c:	bc09      	pop	{r0, r3}
 800985e:	6819      	ldr	r1, [r3, #0]
 8009860:	6808      	ldr	r0, [r1, #0]
 8009862:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009866:	f01e 0f10 	tst.w	lr, #16
 800986a:	bf08      	it	eq
 800986c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009870:	f380 8809 	msr	PSP, r0
 8009874:	f3bf 8f6f 	isb	sy
 8009878:	4770      	bx	lr
 800987a:	bf00      	nop
 800987c:	f3af 8000 	nop.w

08009880 <pxCurrentTCBConst>:
 8009880:	20003aa8 	.word	0x20003aa8

08009884 <SysTick_Handler>:
{
 8009884:	b508      	push	{r3, lr}
	__asm volatile
 8009886:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800988a:	f383 8811 	msr	BASEPRI, r3
 800988e:	f3bf 8f6f 	isb	sy
 8009892:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 8009896:	f7ff fbf5 	bl	8009084 <xTaskIncrementTick>
 800989a:	b128      	cbz	r0, 80098a8 <SysTick_Handler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800989c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80098a0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80098a4:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
	__asm volatile
 80098a8:	2300      	movs	r3, #0
 80098aa:	f383 8811 	msr	BASEPRI, r3
}
 80098ae:	bd08      	pop	{r3, pc}

080098b0 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80098b0:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
 80098b4:	2300      	movs	r3, #0
 80098b6:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80098b8:	6193      	str	r3, [r2, #24]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80098ba:	4b05      	ldr	r3, [pc, #20]	@ (80098d0 <vPortSetupTimerInterrupt+0x20>)
 80098bc:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80098c6:	3b01      	subs	r3, #1
 80098c8:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80098ca:	2307      	movs	r3, #7
 80098cc:	6113      	str	r3, [r2, #16]
}
 80098ce:	4770      	bx	lr
 80098d0:	20000014 	.word	0x20000014

080098d4 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80098d4:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
{
 80098d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80098da:	f8d3 1d00 	ldr.w	r1, [r3, #3328]	@ 0xd00
 80098de:	4a38      	ldr	r2, [pc, #224]	@ (80099c0 <xPortStartScheduler+0xec>)
 80098e0:	4291      	cmp	r1, r2
 80098e2:	d108      	bne.n	80098f6 <xPortStartScheduler+0x22>
	__asm volatile
 80098e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80098e8:	f383 8811 	msr	BASEPRI, r3
 80098ec:	f3bf 8f6f 	isb	sy
 80098f0:	f3bf 8f4f 	dsb	sy
 80098f4:	e7fe      	b.n	80098f4 <xPortStartScheduler+0x20>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80098f6:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 80098fa:	4b32      	ldr	r3, [pc, #200]	@ (80099c4 <xPortStartScheduler+0xf0>)
 80098fc:	429a      	cmp	r2, r3
 80098fe:	d108      	bne.n	8009912 <xPortStartScheduler+0x3e>
 8009900:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009904:	f383 8811 	msr	BASEPRI, r3
 8009908:	f3bf 8f6f 	isb	sy
 800990c:	f3bf 8f4f 	dsb	sy
 8009910:	e7fe      	b.n	8009910 <xPortStartScheduler+0x3c>
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009912:	4b2d      	ldr	r3, [pc, #180]	@ (80099c8 <xPortStartScheduler+0xf4>)
 8009914:	781a      	ldrb	r2, [r3, #0]
 8009916:	b2d2      	uxtb	r2, r2
 8009918:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800991a:	22ff      	movs	r2, #255	@ 0xff
 800991c:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800991e:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009920:	4a2a      	ldr	r2, [pc, #168]	@ (80099cc <xPortStartScheduler+0xf8>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009922:	b2db      	uxtb	r3, r3
 8009924:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009928:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800992c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8009930:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009932:	4a27      	ldr	r2, [pc, #156]	@ (80099d0 <xPortStartScheduler+0xfc>)
 8009934:	2307      	movs	r3, #7
 8009936:	6013      	str	r3, [r2, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009938:	f89d 1003 	ldrb.w	r1, [sp, #3]
			ulMaxPRIGROUPValue--;
 800993c:	6813      	ldr	r3, [r2, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800993e:	0609      	lsls	r1, r1, #24
 8009940:	d40a      	bmi.n	8009958 <xPortStartScheduler+0x84>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009942:	2b03      	cmp	r3, #3
 8009944:	d011      	beq.n	800996a <xPortStartScheduler+0x96>
 8009946:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800994a:	f383 8811 	msr	BASEPRI, r3
 800994e:	f3bf 8f6f 	isb	sy
 8009952:	f3bf 8f4f 	dsb	sy
 8009956:	e7fe      	b.n	8009956 <xPortStartScheduler+0x82>
			ulMaxPRIGROUPValue--;
 8009958:	3b01      	subs	r3, #1
 800995a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800995c:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8009960:	005b      	lsls	r3, r3, #1
 8009962:	b2db      	uxtb	r3, r3
 8009964:	f88d 3003 	strb.w	r3, [sp, #3]
 8009968:	e7e6      	b.n	8009938 <xPortStartScheduler+0x64>
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800996a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800996e:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009970:	9b01      	ldr	r3, [sp, #4]
 8009972:	4a15      	ldr	r2, [pc, #84]	@ (80099c8 <xPortStartScheduler+0xf4>)
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009974:	f04f 24e0 	mov.w	r4, #3758153728	@ 0xe000e000
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009978:	b2db      	uxtb	r3, r3
 800997a:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800997c:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 8009980:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8009984:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009988:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 800998c:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8009990:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	vPortSetupTimerInterrupt();
 8009994:	f7ff ff8c 	bl	80098b0 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8009998:	4b0e      	ldr	r3, [pc, #56]	@ (80099d4 <xPortStartScheduler+0x100>)
 800999a:	2500      	movs	r5, #0
 800999c:	601d      	str	r5, [r3, #0]
	vPortEnableVFP();
 800999e:	f7ff feb7 	bl	8009710 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80099a2:	f8d4 3f34 	ldr.w	r3, [r4, #3892]	@ 0xf34
 80099a6:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80099aa:	f8c4 3f34 	str.w	r3, [r4, #3892]	@ 0xf34
	prvPortStartFirstTask();
 80099ae:	f7ff fe9b 	bl	80096e8 <prvPortStartFirstTask>
	vTaskSwitchContext();
 80099b2:	f7ff fc99 	bl	80092e8 <vTaskSwitchContext>
	prvTaskExitError();
 80099b6:	f7ff feb5 	bl	8009724 <prvTaskExitError>
}
 80099ba:	4628      	mov	r0, r5
 80099bc:	b003      	add	sp, #12
 80099be:	bd30      	pop	{r4, r5, pc}
 80099c0:	410fc271 	.word	0x410fc271
 80099c4:	410fc270 	.word	0x410fc270
 80099c8:	e000e400 	.word	0xe000e400
 80099cc:	20003ab0 	.word	0x20003ab0
 80099d0:	20003aac 	.word	0x20003aac
 80099d4:	20000020 	.word	0x20000020

080099d8 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80099d8:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80099dc:	2b0f      	cmp	r3, #15
 80099de:	d90e      	bls.n	80099fe <vPortValidateInterruptPriority+0x26>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80099e0:	4a11      	ldr	r2, [pc, #68]	@ (8009a28 <vPortValidateInterruptPriority+0x50>)
 80099e2:	5c9b      	ldrb	r3, [r3, r2]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80099e4:	4a11      	ldr	r2, [pc, #68]	@ (8009a2c <vPortValidateInterruptPriority+0x54>)
 80099e6:	7812      	ldrb	r2, [r2, #0]
 80099e8:	429a      	cmp	r2, r3
 80099ea:	d908      	bls.n	80099fe <vPortValidateInterruptPriority+0x26>
 80099ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80099f0:	f383 8811 	msr	BASEPRI, r3
 80099f4:	f3bf 8f6f 	isb	sy
 80099f8:	f3bf 8f4f 	dsb	sy
 80099fc:	e7fe      	b.n	80099fc <vPortValidateInterruptPriority+0x24>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80099fe:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8009a02:	4a0b      	ldr	r2, [pc, #44]	@ (8009a30 <vPortValidateInterruptPriority+0x58>)
 8009a04:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	@ 0xd0c
 8009a08:	6812      	ldr	r2, [r2, #0]
 8009a0a:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009a0e:	4293      	cmp	r3, r2
 8009a10:	d908      	bls.n	8009a24 <vPortValidateInterruptPriority+0x4c>
 8009a12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a16:	f383 8811 	msr	BASEPRI, r3
 8009a1a:	f3bf 8f6f 	isb	sy
 8009a1e:	f3bf 8f4f 	dsb	sy
 8009a22:	e7fe      	b.n	8009a22 <vPortValidateInterruptPriority+0x4a>
	}
 8009a24:	4770      	bx	lr
 8009a26:	bf00      	nop
 8009a28:	e000e3f0 	.word	0xe000e3f0
 8009a2c:	20003ab0 	.word	0x20003ab0
 8009a30:	20003aac 	.word	0x20003aac

08009a34 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009a34:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009a36:	4b10      	ldr	r3, [pc, #64]	@ (8009a78 <prvInsertBlockIntoFreeList+0x44>)
 8009a38:	461a      	mov	r2, r3
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	4283      	cmp	r3, r0
 8009a3e:	d3fb      	bcc.n	8009a38 <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009a40:	6854      	ldr	r4, [r2, #4]
 8009a42:	1911      	adds	r1, r2, r4
 8009a44:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009a46:	bf01      	itttt	eq
 8009a48:	6841      	ldreq	r1, [r0, #4]
 8009a4a:	4610      	moveq	r0, r2
 8009a4c:	1909      	addeq	r1, r1, r4
 8009a4e:	6051      	streq	r1, [r2, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009a50:	6844      	ldr	r4, [r0, #4]
 8009a52:	1901      	adds	r1, r0, r4
 8009a54:	428b      	cmp	r3, r1
 8009a56:	d10c      	bne.n	8009a72 <prvInsertBlockIntoFreeList+0x3e>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009a58:	4908      	ldr	r1, [pc, #32]	@ (8009a7c <prvInsertBlockIntoFreeList+0x48>)
 8009a5a:	6809      	ldr	r1, [r1, #0]
 8009a5c:	428b      	cmp	r3, r1
 8009a5e:	d003      	beq.n	8009a68 <prvInsertBlockIntoFreeList+0x34>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009a60:	6859      	ldr	r1, [r3, #4]
 8009a62:	4421      	add	r1, r4
 8009a64:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009a66:	6819      	ldr	r1, [r3, #0]
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009a68:	6001      	str	r1, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009a6a:	4290      	cmp	r0, r2
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009a6c:	bf18      	it	ne
 8009a6e:	6010      	strne	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009a70:	bd10      	pop	{r4, pc}
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009a72:	4619      	mov	r1, r3
 8009a74:	e7f8      	b.n	8009a68 <prvInsertBlockIntoFreeList+0x34>
 8009a76:	bf00      	nop
 8009a78:	20003ac4 	.word	0x20003ac4
 8009a7c:	20003ac0 	.word	0x20003ac0

08009a80 <pvPortMalloc>:
{
 8009a80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a84:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8009a86:	f7ff faf5 	bl	8009074 <vTaskSuspendAll>
		if( pxEnd == NULL )
 8009a8a:	493f      	ldr	r1, [pc, #252]	@ (8009b88 <pvPortMalloc+0x108>)
 8009a8c:	4d3f      	ldr	r5, [pc, #252]	@ (8009b8c <pvPortMalloc+0x10c>)
 8009a8e:	680b      	ldr	r3, [r1, #0]
 8009a90:	b9fb      	cbnz	r3, 8009ad2 <pvPortMalloc+0x52>
	uxAddress = ( size_t ) ucHeap;
 8009a92:	4a3f      	ldr	r2, [pc, #252]	@ (8009b90 <pvPortMalloc+0x110>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009a94:	0756      	lsls	r6, r2, #29
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009a96:	bf1c      	itt	ne
 8009a98:	3207      	addne	r2, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009a9a:	4b3e      	ldrne	r3, [pc, #248]	@ (8009b94 <pvPortMalloc+0x114>)
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009a9c:	4e3e      	ldr	r6, [pc, #248]	@ (8009b98 <pvPortMalloc+0x118>)
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009a9e:	bf1a      	itte	ne
 8009aa0:	f022 0207 	bicne.w	r2, r2, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009aa4:	1a9b      	subne	r3, r3, r2
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009aa6:	f245 53f0 	movweq	r3, #22000	@ 0x55f0
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009aaa:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 8009aac:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009aae:	f023 0307 	bic.w	r3, r3, #7
	xStart.xBlockSize = ( size_t ) 0;
 8009ab2:	2000      	movs	r0, #0
 8009ab4:	6070      	str	r0, [r6, #4]
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009ab6:	6032      	str	r2, [r6, #0]
	pxEnd->pxNextFreeBlock = NULL;
 8009ab8:	e9c3 0000 	strd	r0, r0, [r3]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009abc:	1a98      	subs	r0, r3, r2
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009abe:	e9c2 3000 	strd	r3, r0, [r2]
	pxEnd = ( void * ) uxAddress;
 8009ac2:	600b      	str	r3, [r1, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009ac4:	4b35      	ldr	r3, [pc, #212]	@ (8009b9c <pvPortMalloc+0x11c>)
 8009ac6:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009ac8:	4b35      	ldr	r3, [pc, #212]	@ (8009ba0 <pvPortMalloc+0x120>)
 8009aca:	6018      	str	r0, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009acc:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8009ad0:	602b      	str	r3, [r5, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009ad2:	682e      	ldr	r6, [r5, #0]
 8009ad4:	4226      	tst	r6, r4
 8009ad6:	d152      	bne.n	8009b7e <pvPortMalloc+0xfe>
			if( xWantedSize > 0 )
 8009ad8:	2c00      	cmp	r4, #0
 8009ada:	d043      	beq.n	8009b64 <pvPortMalloc+0xe4>
				xWantedSize += xHeapStructSize;
 8009adc:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009ae0:	0760      	lsls	r0, r4, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009ae2:	bf1c      	itt	ne
 8009ae4:	f023 0307 	bicne.w	r3, r3, #7
 8009ae8:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d047      	beq.n	8009b7e <pvPortMalloc+0xfe>
 8009aee:	4f2c      	ldr	r7, [pc, #176]	@ (8009ba0 <pvPortMalloc+0x120>)
 8009af0:	683c      	ldr	r4, [r7, #0]
 8009af2:	429c      	cmp	r4, r3
 8009af4:	d343      	bcc.n	8009b7e <pvPortMalloc+0xfe>
				pxBlock = xStart.pxNextFreeBlock;
 8009af6:	4a28      	ldr	r2, [pc, #160]	@ (8009b98 <pvPortMalloc+0x118>)
 8009af8:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009afa:	6868      	ldr	r0, [r5, #4]
 8009afc:	4298      	cmp	r0, r3
 8009afe:	d204      	bcs.n	8009b0a <pvPortMalloc+0x8a>
 8009b00:	f8d5 c000 	ldr.w	ip, [r5]
 8009b04:	f1bc 0f00 	cmp.w	ip, #0
 8009b08:	d115      	bne.n	8009b36 <pvPortMalloc+0xb6>
				if( pxBlock != pxEnd )
 8009b0a:	6809      	ldr	r1, [r1, #0]
 8009b0c:	42a9      	cmp	r1, r5
 8009b0e:	d036      	beq.n	8009b7e <pvPortMalloc+0xfe>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009b10:	6829      	ldr	r1, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009b12:	f8d2 8000 	ldr.w	r8, [r2]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009b16:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009b18:	1ac2      	subs	r2, r0, r3
 8009b1a:	2a10      	cmp	r2, #16
 8009b1c:	d912      	bls.n	8009b44 <pvPortMalloc+0xc4>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009b1e:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009b20:	0741      	lsls	r1, r0, #29
 8009b22:	d00b      	beq.n	8009b3c <pvPortMalloc+0xbc>
 8009b24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b28:	f383 8811 	msr	BASEPRI, r3
 8009b2c:	f3bf 8f6f 	isb	sy
 8009b30:	f3bf 8f4f 	dsb	sy
 8009b34:	e7fe      	b.n	8009b34 <pvPortMalloc+0xb4>
 8009b36:	462a      	mov	r2, r5
 8009b38:	4665      	mov	r5, ip
 8009b3a:	e7de      	b.n	8009afa <pvPortMalloc+0x7a>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009b3c:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009b3e:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009b40:	f7ff ff78 	bl	8009a34 <prvInsertBlockIntoFreeList>
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009b44:	4915      	ldr	r1, [pc, #84]	@ (8009b9c <pvPortMalloc+0x11c>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009b46:	686a      	ldr	r2, [r5, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009b48:	6808      	ldr	r0, [r1, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009b4a:	1aa4      	subs	r4, r4, r2
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009b4c:	4284      	cmp	r4, r0
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009b4e:	ea46 0602 	orr.w	r6, r6, r2
					pxBlock->pxNextFreeBlock = NULL;
 8009b52:	f04f 0300 	mov.w	r3, #0
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009b56:	603c      	str	r4, [r7, #0]
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009b58:	bf38      	it	cc
 8009b5a:	600c      	strcc	r4, [r1, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009b5c:	606e      	str	r6, [r5, #4]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009b5e:	f108 0408 	add.w	r4, r8, #8
					pxBlock->pxNextFreeBlock = NULL;
 8009b62:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
 8009b64:	f7ff fb26 	bl	80091b4 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009b68:	0763      	lsls	r3, r4, #29
 8009b6a:	d00a      	beq.n	8009b82 <pvPortMalloc+0x102>
 8009b6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b70:	f383 8811 	msr	BASEPRI, r3
 8009b74:	f3bf 8f6f 	isb	sy
 8009b78:	f3bf 8f4f 	dsb	sy
 8009b7c:	e7fe      	b.n	8009b7c <pvPortMalloc+0xfc>
void *pvReturn = NULL;
 8009b7e:	2400      	movs	r4, #0
 8009b80:	e7f0      	b.n	8009b64 <pvPortMalloc+0xe4>
}
 8009b82:	4620      	mov	r0, r4
 8009b84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009b88:	20003ac0 	.word	0x20003ac0
 8009b8c:	20003ab4 	.word	0x20003ab4
 8009b90:	20003acc 	.word	0x20003acc
 8009b94:	200090bc 	.word	0x200090bc
 8009b98:	20003ac4 	.word	0x20003ac4
 8009b9c:	20003ab8 	.word	0x20003ab8
 8009ba0:	20003abc 	.word	0x20003abc

08009ba4 <vPortFree>:
{
 8009ba4:	b510      	push	{r4, lr}
	if( pv != NULL )
 8009ba6:	4604      	mov	r4, r0
 8009ba8:	b370      	cbz	r0, 8009c08 <vPortFree+0x64>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009baa:	4a18      	ldr	r2, [pc, #96]	@ (8009c0c <vPortFree+0x68>)
 8009bac:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8009bb0:	6812      	ldr	r2, [r2, #0]
 8009bb2:	4213      	tst	r3, r2
 8009bb4:	d108      	bne.n	8009bc8 <vPortFree+0x24>
 8009bb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009bba:	f383 8811 	msr	BASEPRI, r3
 8009bbe:	f3bf 8f6f 	isb	sy
 8009bc2:	f3bf 8f4f 	dsb	sy
 8009bc6:	e7fe      	b.n	8009bc6 <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009bc8:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8009bcc:	b141      	cbz	r1, 8009be0 <vPortFree+0x3c>
 8009bce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009bd2:	f383 8811 	msr	BASEPRI, r3
 8009bd6:	f3bf 8f6f 	isb	sy
 8009bda:	f3bf 8f4f 	dsb	sy
 8009bde:	e7fe      	b.n	8009bde <vPortFree+0x3a>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009be0:	ea23 0302 	bic.w	r3, r3, r2
 8009be4:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 8009be8:	f7ff fa44 	bl	8009074 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009bec:	4a08      	ldr	r2, [pc, #32]	@ (8009c10 <vPortFree+0x6c>)
 8009bee:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8009bf2:	6811      	ldr	r1, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009bf4:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009bf8:	440b      	add	r3, r1
 8009bfa:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009bfc:	f7ff ff1a 	bl	8009a34 <prvInsertBlockIntoFreeList>
}
 8009c00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 8009c04:	f7ff bad6 	b.w	80091b4 <xTaskResumeAll>
}
 8009c08:	bd10      	pop	{r4, pc}
 8009c0a:	bf00      	nop
 8009c0c:	20003ab4 	.word	0x20003ab4
 8009c10:	20003abc 	.word	0x20003abc

08009c14 <atof>:
 8009c14:	2100      	movs	r1, #0
 8009c16:	f000 becd 	b.w	800a9b4 <strtod>

08009c1a <atoi>:
 8009c1a:	220a      	movs	r2, #10
 8009c1c:	2100      	movs	r1, #0
 8009c1e:	f000 bf51 	b.w	800aac4 <strtol>
	...

08009c24 <malloc>:
 8009c24:	4b02      	ldr	r3, [pc, #8]	@ (8009c30 <malloc+0xc>)
 8009c26:	4601      	mov	r1, r0
 8009c28:	6818      	ldr	r0, [r3, #0]
 8009c2a:	f000 b82d 	b.w	8009c88 <_malloc_r>
 8009c2e:	bf00      	nop
 8009c30:	200001a4 	.word	0x200001a4

08009c34 <free>:
 8009c34:	4b02      	ldr	r3, [pc, #8]	@ (8009c40 <free+0xc>)
 8009c36:	4601      	mov	r1, r0
 8009c38:	6818      	ldr	r0, [r3, #0]
 8009c3a:	f003 bd69 	b.w	800d710 <_free_r>
 8009c3e:	bf00      	nop
 8009c40:	200001a4 	.word	0x200001a4

08009c44 <sbrk_aligned>:
 8009c44:	b570      	push	{r4, r5, r6, lr}
 8009c46:	4e0f      	ldr	r6, [pc, #60]	@ (8009c84 <sbrk_aligned+0x40>)
 8009c48:	460c      	mov	r4, r1
 8009c4a:	6831      	ldr	r1, [r6, #0]
 8009c4c:	4605      	mov	r5, r0
 8009c4e:	b911      	cbnz	r1, 8009c56 <sbrk_aligned+0x12>
 8009c50:	f002 fe96 	bl	800c980 <_sbrk_r>
 8009c54:	6030      	str	r0, [r6, #0]
 8009c56:	4621      	mov	r1, r4
 8009c58:	4628      	mov	r0, r5
 8009c5a:	f002 fe91 	bl	800c980 <_sbrk_r>
 8009c5e:	1c43      	adds	r3, r0, #1
 8009c60:	d103      	bne.n	8009c6a <sbrk_aligned+0x26>
 8009c62:	f04f 34ff 	mov.w	r4, #4294967295
 8009c66:	4620      	mov	r0, r4
 8009c68:	bd70      	pop	{r4, r5, r6, pc}
 8009c6a:	1cc4      	adds	r4, r0, #3
 8009c6c:	f024 0403 	bic.w	r4, r4, #3
 8009c70:	42a0      	cmp	r0, r4
 8009c72:	d0f8      	beq.n	8009c66 <sbrk_aligned+0x22>
 8009c74:	1a21      	subs	r1, r4, r0
 8009c76:	4628      	mov	r0, r5
 8009c78:	f002 fe82 	bl	800c980 <_sbrk_r>
 8009c7c:	3001      	adds	r0, #1
 8009c7e:	d1f2      	bne.n	8009c66 <sbrk_aligned+0x22>
 8009c80:	e7ef      	b.n	8009c62 <sbrk_aligned+0x1e>
 8009c82:	bf00      	nop
 8009c84:	200090bc 	.word	0x200090bc

08009c88 <_malloc_r>:
 8009c88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009c8c:	1ccd      	adds	r5, r1, #3
 8009c8e:	f025 0503 	bic.w	r5, r5, #3
 8009c92:	3508      	adds	r5, #8
 8009c94:	2d0c      	cmp	r5, #12
 8009c96:	bf38      	it	cc
 8009c98:	250c      	movcc	r5, #12
 8009c9a:	2d00      	cmp	r5, #0
 8009c9c:	4606      	mov	r6, r0
 8009c9e:	db01      	blt.n	8009ca4 <_malloc_r+0x1c>
 8009ca0:	42a9      	cmp	r1, r5
 8009ca2:	d904      	bls.n	8009cae <_malloc_r+0x26>
 8009ca4:	230c      	movs	r3, #12
 8009ca6:	6033      	str	r3, [r6, #0]
 8009ca8:	2000      	movs	r0, #0
 8009caa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009cae:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009d84 <_malloc_r+0xfc>
 8009cb2:	f000 f869 	bl	8009d88 <__malloc_lock>
 8009cb6:	f8d8 3000 	ldr.w	r3, [r8]
 8009cba:	461c      	mov	r4, r3
 8009cbc:	bb44      	cbnz	r4, 8009d10 <_malloc_r+0x88>
 8009cbe:	4629      	mov	r1, r5
 8009cc0:	4630      	mov	r0, r6
 8009cc2:	f7ff ffbf 	bl	8009c44 <sbrk_aligned>
 8009cc6:	1c43      	adds	r3, r0, #1
 8009cc8:	4604      	mov	r4, r0
 8009cca:	d158      	bne.n	8009d7e <_malloc_r+0xf6>
 8009ccc:	f8d8 4000 	ldr.w	r4, [r8]
 8009cd0:	4627      	mov	r7, r4
 8009cd2:	2f00      	cmp	r7, #0
 8009cd4:	d143      	bne.n	8009d5e <_malloc_r+0xd6>
 8009cd6:	2c00      	cmp	r4, #0
 8009cd8:	d04b      	beq.n	8009d72 <_malloc_r+0xea>
 8009cda:	6823      	ldr	r3, [r4, #0]
 8009cdc:	4639      	mov	r1, r7
 8009cde:	4630      	mov	r0, r6
 8009ce0:	eb04 0903 	add.w	r9, r4, r3
 8009ce4:	f002 fe4c 	bl	800c980 <_sbrk_r>
 8009ce8:	4581      	cmp	r9, r0
 8009cea:	d142      	bne.n	8009d72 <_malloc_r+0xea>
 8009cec:	6821      	ldr	r1, [r4, #0]
 8009cee:	1a6d      	subs	r5, r5, r1
 8009cf0:	4629      	mov	r1, r5
 8009cf2:	4630      	mov	r0, r6
 8009cf4:	f7ff ffa6 	bl	8009c44 <sbrk_aligned>
 8009cf8:	3001      	adds	r0, #1
 8009cfa:	d03a      	beq.n	8009d72 <_malloc_r+0xea>
 8009cfc:	6823      	ldr	r3, [r4, #0]
 8009cfe:	442b      	add	r3, r5
 8009d00:	6023      	str	r3, [r4, #0]
 8009d02:	f8d8 3000 	ldr.w	r3, [r8]
 8009d06:	685a      	ldr	r2, [r3, #4]
 8009d08:	bb62      	cbnz	r2, 8009d64 <_malloc_r+0xdc>
 8009d0a:	f8c8 7000 	str.w	r7, [r8]
 8009d0e:	e00f      	b.n	8009d30 <_malloc_r+0xa8>
 8009d10:	6822      	ldr	r2, [r4, #0]
 8009d12:	1b52      	subs	r2, r2, r5
 8009d14:	d420      	bmi.n	8009d58 <_malloc_r+0xd0>
 8009d16:	2a0b      	cmp	r2, #11
 8009d18:	d917      	bls.n	8009d4a <_malloc_r+0xc2>
 8009d1a:	1961      	adds	r1, r4, r5
 8009d1c:	42a3      	cmp	r3, r4
 8009d1e:	6025      	str	r5, [r4, #0]
 8009d20:	bf18      	it	ne
 8009d22:	6059      	strne	r1, [r3, #4]
 8009d24:	6863      	ldr	r3, [r4, #4]
 8009d26:	bf08      	it	eq
 8009d28:	f8c8 1000 	streq.w	r1, [r8]
 8009d2c:	5162      	str	r2, [r4, r5]
 8009d2e:	604b      	str	r3, [r1, #4]
 8009d30:	4630      	mov	r0, r6
 8009d32:	f000 f82f 	bl	8009d94 <__malloc_unlock>
 8009d36:	f104 000b 	add.w	r0, r4, #11
 8009d3a:	1d23      	adds	r3, r4, #4
 8009d3c:	f020 0007 	bic.w	r0, r0, #7
 8009d40:	1ac2      	subs	r2, r0, r3
 8009d42:	bf1c      	itt	ne
 8009d44:	1a1b      	subne	r3, r3, r0
 8009d46:	50a3      	strne	r3, [r4, r2]
 8009d48:	e7af      	b.n	8009caa <_malloc_r+0x22>
 8009d4a:	6862      	ldr	r2, [r4, #4]
 8009d4c:	42a3      	cmp	r3, r4
 8009d4e:	bf0c      	ite	eq
 8009d50:	f8c8 2000 	streq.w	r2, [r8]
 8009d54:	605a      	strne	r2, [r3, #4]
 8009d56:	e7eb      	b.n	8009d30 <_malloc_r+0xa8>
 8009d58:	4623      	mov	r3, r4
 8009d5a:	6864      	ldr	r4, [r4, #4]
 8009d5c:	e7ae      	b.n	8009cbc <_malloc_r+0x34>
 8009d5e:	463c      	mov	r4, r7
 8009d60:	687f      	ldr	r7, [r7, #4]
 8009d62:	e7b6      	b.n	8009cd2 <_malloc_r+0x4a>
 8009d64:	461a      	mov	r2, r3
 8009d66:	685b      	ldr	r3, [r3, #4]
 8009d68:	42a3      	cmp	r3, r4
 8009d6a:	d1fb      	bne.n	8009d64 <_malloc_r+0xdc>
 8009d6c:	2300      	movs	r3, #0
 8009d6e:	6053      	str	r3, [r2, #4]
 8009d70:	e7de      	b.n	8009d30 <_malloc_r+0xa8>
 8009d72:	230c      	movs	r3, #12
 8009d74:	6033      	str	r3, [r6, #0]
 8009d76:	4630      	mov	r0, r6
 8009d78:	f000 f80c 	bl	8009d94 <__malloc_unlock>
 8009d7c:	e794      	b.n	8009ca8 <_malloc_r+0x20>
 8009d7e:	6005      	str	r5, [r0, #0]
 8009d80:	e7d6      	b.n	8009d30 <_malloc_r+0xa8>
 8009d82:	bf00      	nop
 8009d84:	200090c0 	.word	0x200090c0

08009d88 <__malloc_lock>:
 8009d88:	4801      	ldr	r0, [pc, #4]	@ (8009d90 <__malloc_lock+0x8>)
 8009d8a:	f7fb b902 	b.w	8004f92 <__retarget_lock_acquire_recursive>
 8009d8e:	bf00      	nop
 8009d90:	20003968 	.word	0x20003968

08009d94 <__malloc_unlock>:
 8009d94:	4801      	ldr	r0, [pc, #4]	@ (8009d9c <__malloc_unlock+0x8>)
 8009d96:	f7fb b908 	b.w	8004faa <__retarget_lock_release_recursive>
 8009d9a:	bf00      	nop
 8009d9c:	20003968 	.word	0x20003968

08009da0 <sulp>:
 8009da0:	b570      	push	{r4, r5, r6, lr}
 8009da2:	4604      	mov	r4, r0
 8009da4:	460d      	mov	r5, r1
 8009da6:	ec45 4b10 	vmov	d0, r4, r5
 8009daa:	4616      	mov	r6, r2
 8009dac:	f004 fbfe 	bl	800e5ac <__ulp>
 8009db0:	ec51 0b10 	vmov	r0, r1, d0
 8009db4:	b17e      	cbz	r6, 8009dd6 <sulp+0x36>
 8009db6:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8009dba:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	dd09      	ble.n	8009dd6 <sulp+0x36>
 8009dc2:	051b      	lsls	r3, r3, #20
 8009dc4:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8009dc8:	2400      	movs	r4, #0
 8009dca:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8009dce:	4622      	mov	r2, r4
 8009dd0:	462b      	mov	r3, r5
 8009dd2:	f7f6 fc21 	bl	8000618 <__aeabi_dmul>
 8009dd6:	ec41 0b10 	vmov	d0, r0, r1
 8009dda:	bd70      	pop	{r4, r5, r6, pc}
 8009ddc:	0000      	movs	r0, r0
	...

08009de0 <_strtod_l>:
 8009de0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009de4:	b09f      	sub	sp, #124	@ 0x7c
 8009de6:	460c      	mov	r4, r1
 8009de8:	9217      	str	r2, [sp, #92]	@ 0x5c
 8009dea:	2200      	movs	r2, #0
 8009dec:	921a      	str	r2, [sp, #104]	@ 0x68
 8009dee:	9005      	str	r0, [sp, #20]
 8009df0:	f04f 0a00 	mov.w	sl, #0
 8009df4:	f04f 0b00 	mov.w	fp, #0
 8009df8:	460a      	mov	r2, r1
 8009dfa:	9219      	str	r2, [sp, #100]	@ 0x64
 8009dfc:	7811      	ldrb	r1, [r2, #0]
 8009dfe:	292b      	cmp	r1, #43	@ 0x2b
 8009e00:	d04a      	beq.n	8009e98 <_strtod_l+0xb8>
 8009e02:	d838      	bhi.n	8009e76 <_strtod_l+0x96>
 8009e04:	290d      	cmp	r1, #13
 8009e06:	d832      	bhi.n	8009e6e <_strtod_l+0x8e>
 8009e08:	2908      	cmp	r1, #8
 8009e0a:	d832      	bhi.n	8009e72 <_strtod_l+0x92>
 8009e0c:	2900      	cmp	r1, #0
 8009e0e:	d03b      	beq.n	8009e88 <_strtod_l+0xa8>
 8009e10:	2200      	movs	r2, #0
 8009e12:	920b      	str	r2, [sp, #44]	@ 0x2c
 8009e14:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8009e16:	782a      	ldrb	r2, [r5, #0]
 8009e18:	2a30      	cmp	r2, #48	@ 0x30
 8009e1a:	f040 80b3 	bne.w	8009f84 <_strtod_l+0x1a4>
 8009e1e:	786a      	ldrb	r2, [r5, #1]
 8009e20:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8009e24:	2a58      	cmp	r2, #88	@ 0x58
 8009e26:	d16e      	bne.n	8009f06 <_strtod_l+0x126>
 8009e28:	9302      	str	r3, [sp, #8]
 8009e2a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009e2c:	9301      	str	r3, [sp, #4]
 8009e2e:	ab1a      	add	r3, sp, #104	@ 0x68
 8009e30:	9300      	str	r3, [sp, #0]
 8009e32:	4a8e      	ldr	r2, [pc, #568]	@ (800a06c <_strtod_l+0x28c>)
 8009e34:	9805      	ldr	r0, [sp, #20]
 8009e36:	ab1b      	add	r3, sp, #108	@ 0x6c
 8009e38:	a919      	add	r1, sp, #100	@ 0x64
 8009e3a:	f003 fd1b 	bl	800d874 <__gethex>
 8009e3e:	f010 060f 	ands.w	r6, r0, #15
 8009e42:	4604      	mov	r4, r0
 8009e44:	d005      	beq.n	8009e52 <_strtod_l+0x72>
 8009e46:	2e06      	cmp	r6, #6
 8009e48:	d128      	bne.n	8009e9c <_strtod_l+0xbc>
 8009e4a:	3501      	adds	r5, #1
 8009e4c:	2300      	movs	r3, #0
 8009e4e:	9519      	str	r5, [sp, #100]	@ 0x64
 8009e50:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009e52:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	f040 858e 	bne.w	800a976 <_strtod_l+0xb96>
 8009e5a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009e5c:	b1cb      	cbz	r3, 8009e92 <_strtod_l+0xb2>
 8009e5e:	4652      	mov	r2, sl
 8009e60:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8009e64:	ec43 2b10 	vmov	d0, r2, r3
 8009e68:	b01f      	add	sp, #124	@ 0x7c
 8009e6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e6e:	2920      	cmp	r1, #32
 8009e70:	d1ce      	bne.n	8009e10 <_strtod_l+0x30>
 8009e72:	3201      	adds	r2, #1
 8009e74:	e7c1      	b.n	8009dfa <_strtod_l+0x1a>
 8009e76:	292d      	cmp	r1, #45	@ 0x2d
 8009e78:	d1ca      	bne.n	8009e10 <_strtod_l+0x30>
 8009e7a:	2101      	movs	r1, #1
 8009e7c:	910b      	str	r1, [sp, #44]	@ 0x2c
 8009e7e:	1c51      	adds	r1, r2, #1
 8009e80:	9119      	str	r1, [sp, #100]	@ 0x64
 8009e82:	7852      	ldrb	r2, [r2, #1]
 8009e84:	2a00      	cmp	r2, #0
 8009e86:	d1c5      	bne.n	8009e14 <_strtod_l+0x34>
 8009e88:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009e8a:	9419      	str	r4, [sp, #100]	@ 0x64
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	f040 8570 	bne.w	800a972 <_strtod_l+0xb92>
 8009e92:	4652      	mov	r2, sl
 8009e94:	465b      	mov	r3, fp
 8009e96:	e7e5      	b.n	8009e64 <_strtod_l+0x84>
 8009e98:	2100      	movs	r1, #0
 8009e9a:	e7ef      	b.n	8009e7c <_strtod_l+0x9c>
 8009e9c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8009e9e:	b13a      	cbz	r2, 8009eb0 <_strtod_l+0xd0>
 8009ea0:	2135      	movs	r1, #53	@ 0x35
 8009ea2:	a81c      	add	r0, sp, #112	@ 0x70
 8009ea4:	f004 fc7c 	bl	800e7a0 <__copybits>
 8009ea8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009eaa:	9805      	ldr	r0, [sp, #20]
 8009eac:	f004 f84a 	bl	800df44 <_Bfree>
 8009eb0:	3e01      	subs	r6, #1
 8009eb2:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8009eb4:	2e04      	cmp	r6, #4
 8009eb6:	d806      	bhi.n	8009ec6 <_strtod_l+0xe6>
 8009eb8:	e8df f006 	tbb	[pc, r6]
 8009ebc:	201d0314 	.word	0x201d0314
 8009ec0:	14          	.byte	0x14
 8009ec1:	00          	.byte	0x00
 8009ec2:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8009ec6:	05e1      	lsls	r1, r4, #23
 8009ec8:	bf48      	it	mi
 8009eca:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8009ece:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009ed2:	0d1b      	lsrs	r3, r3, #20
 8009ed4:	051b      	lsls	r3, r3, #20
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d1bb      	bne.n	8009e52 <_strtod_l+0x72>
 8009eda:	f002 fd73 	bl	800c9c4 <__errno>
 8009ede:	2322      	movs	r3, #34	@ 0x22
 8009ee0:	6003      	str	r3, [r0, #0]
 8009ee2:	e7b6      	b.n	8009e52 <_strtod_l+0x72>
 8009ee4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8009ee8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8009eec:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8009ef0:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8009ef4:	e7e7      	b.n	8009ec6 <_strtod_l+0xe6>
 8009ef6:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800a074 <_strtod_l+0x294>
 8009efa:	e7e4      	b.n	8009ec6 <_strtod_l+0xe6>
 8009efc:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8009f00:	f04f 3aff 	mov.w	sl, #4294967295
 8009f04:	e7df      	b.n	8009ec6 <_strtod_l+0xe6>
 8009f06:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009f08:	1c5a      	adds	r2, r3, #1
 8009f0a:	9219      	str	r2, [sp, #100]	@ 0x64
 8009f0c:	785b      	ldrb	r3, [r3, #1]
 8009f0e:	2b30      	cmp	r3, #48	@ 0x30
 8009f10:	d0f9      	beq.n	8009f06 <_strtod_l+0x126>
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	d09d      	beq.n	8009e52 <_strtod_l+0x72>
 8009f16:	2301      	movs	r3, #1
 8009f18:	9309      	str	r3, [sp, #36]	@ 0x24
 8009f1a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009f1c:	930c      	str	r3, [sp, #48]	@ 0x30
 8009f1e:	2300      	movs	r3, #0
 8009f20:	9308      	str	r3, [sp, #32]
 8009f22:	930a      	str	r3, [sp, #40]	@ 0x28
 8009f24:	461f      	mov	r7, r3
 8009f26:	220a      	movs	r2, #10
 8009f28:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8009f2a:	7805      	ldrb	r5, [r0, #0]
 8009f2c:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8009f30:	b2d9      	uxtb	r1, r3
 8009f32:	2909      	cmp	r1, #9
 8009f34:	d928      	bls.n	8009f88 <_strtod_l+0x1a8>
 8009f36:	494e      	ldr	r1, [pc, #312]	@ (800a070 <_strtod_l+0x290>)
 8009f38:	2201      	movs	r2, #1
 8009f3a:	f001 fee0 	bl	800bcfe <strncmp>
 8009f3e:	2800      	cmp	r0, #0
 8009f40:	d032      	beq.n	8009fa8 <_strtod_l+0x1c8>
 8009f42:	2000      	movs	r0, #0
 8009f44:	462a      	mov	r2, r5
 8009f46:	4681      	mov	r9, r0
 8009f48:	463d      	mov	r5, r7
 8009f4a:	4603      	mov	r3, r0
 8009f4c:	2a65      	cmp	r2, #101	@ 0x65
 8009f4e:	d001      	beq.n	8009f54 <_strtod_l+0x174>
 8009f50:	2a45      	cmp	r2, #69	@ 0x45
 8009f52:	d114      	bne.n	8009f7e <_strtod_l+0x19e>
 8009f54:	b91d      	cbnz	r5, 8009f5e <_strtod_l+0x17e>
 8009f56:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009f58:	4302      	orrs	r2, r0
 8009f5a:	d095      	beq.n	8009e88 <_strtod_l+0xa8>
 8009f5c:	2500      	movs	r5, #0
 8009f5e:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8009f60:	1c62      	adds	r2, r4, #1
 8009f62:	9219      	str	r2, [sp, #100]	@ 0x64
 8009f64:	7862      	ldrb	r2, [r4, #1]
 8009f66:	2a2b      	cmp	r2, #43	@ 0x2b
 8009f68:	d077      	beq.n	800a05a <_strtod_l+0x27a>
 8009f6a:	2a2d      	cmp	r2, #45	@ 0x2d
 8009f6c:	d07b      	beq.n	800a066 <_strtod_l+0x286>
 8009f6e:	f04f 0c00 	mov.w	ip, #0
 8009f72:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8009f76:	2909      	cmp	r1, #9
 8009f78:	f240 8082 	bls.w	800a080 <_strtod_l+0x2a0>
 8009f7c:	9419      	str	r4, [sp, #100]	@ 0x64
 8009f7e:	f04f 0800 	mov.w	r8, #0
 8009f82:	e0a2      	b.n	800a0ca <_strtod_l+0x2ea>
 8009f84:	2300      	movs	r3, #0
 8009f86:	e7c7      	b.n	8009f18 <_strtod_l+0x138>
 8009f88:	2f08      	cmp	r7, #8
 8009f8a:	bfd5      	itete	le
 8009f8c:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8009f8e:	9908      	ldrgt	r1, [sp, #32]
 8009f90:	fb02 3301 	mlale	r3, r2, r1, r3
 8009f94:	fb02 3301 	mlagt	r3, r2, r1, r3
 8009f98:	f100 0001 	add.w	r0, r0, #1
 8009f9c:	bfd4      	ite	le
 8009f9e:	930a      	strle	r3, [sp, #40]	@ 0x28
 8009fa0:	9308      	strgt	r3, [sp, #32]
 8009fa2:	3701      	adds	r7, #1
 8009fa4:	9019      	str	r0, [sp, #100]	@ 0x64
 8009fa6:	e7bf      	b.n	8009f28 <_strtod_l+0x148>
 8009fa8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009faa:	1c5a      	adds	r2, r3, #1
 8009fac:	9219      	str	r2, [sp, #100]	@ 0x64
 8009fae:	785a      	ldrb	r2, [r3, #1]
 8009fb0:	b37f      	cbz	r7, 800a012 <_strtod_l+0x232>
 8009fb2:	4681      	mov	r9, r0
 8009fb4:	463d      	mov	r5, r7
 8009fb6:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8009fba:	2b09      	cmp	r3, #9
 8009fbc:	d912      	bls.n	8009fe4 <_strtod_l+0x204>
 8009fbe:	2301      	movs	r3, #1
 8009fc0:	e7c4      	b.n	8009f4c <_strtod_l+0x16c>
 8009fc2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009fc4:	1c5a      	adds	r2, r3, #1
 8009fc6:	9219      	str	r2, [sp, #100]	@ 0x64
 8009fc8:	785a      	ldrb	r2, [r3, #1]
 8009fca:	3001      	adds	r0, #1
 8009fcc:	2a30      	cmp	r2, #48	@ 0x30
 8009fce:	d0f8      	beq.n	8009fc2 <_strtod_l+0x1e2>
 8009fd0:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8009fd4:	2b08      	cmp	r3, #8
 8009fd6:	f200 84d3 	bhi.w	800a980 <_strtod_l+0xba0>
 8009fda:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009fdc:	930c      	str	r3, [sp, #48]	@ 0x30
 8009fde:	4681      	mov	r9, r0
 8009fe0:	2000      	movs	r0, #0
 8009fe2:	4605      	mov	r5, r0
 8009fe4:	3a30      	subs	r2, #48	@ 0x30
 8009fe6:	f100 0301 	add.w	r3, r0, #1
 8009fea:	d02a      	beq.n	800a042 <_strtod_l+0x262>
 8009fec:	4499      	add	r9, r3
 8009fee:	eb00 0c05 	add.w	ip, r0, r5
 8009ff2:	462b      	mov	r3, r5
 8009ff4:	210a      	movs	r1, #10
 8009ff6:	4563      	cmp	r3, ip
 8009ff8:	d10d      	bne.n	800a016 <_strtod_l+0x236>
 8009ffa:	1c69      	adds	r1, r5, #1
 8009ffc:	4401      	add	r1, r0
 8009ffe:	4428      	add	r0, r5
 800a000:	2808      	cmp	r0, #8
 800a002:	dc16      	bgt.n	800a032 <_strtod_l+0x252>
 800a004:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800a006:	230a      	movs	r3, #10
 800a008:	fb03 2300 	mla	r3, r3, r0, r2
 800a00c:	930a      	str	r3, [sp, #40]	@ 0x28
 800a00e:	2300      	movs	r3, #0
 800a010:	e018      	b.n	800a044 <_strtod_l+0x264>
 800a012:	4638      	mov	r0, r7
 800a014:	e7da      	b.n	8009fcc <_strtod_l+0x1ec>
 800a016:	2b08      	cmp	r3, #8
 800a018:	f103 0301 	add.w	r3, r3, #1
 800a01c:	dc03      	bgt.n	800a026 <_strtod_l+0x246>
 800a01e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800a020:	434e      	muls	r6, r1
 800a022:	960a      	str	r6, [sp, #40]	@ 0x28
 800a024:	e7e7      	b.n	8009ff6 <_strtod_l+0x216>
 800a026:	2b10      	cmp	r3, #16
 800a028:	bfde      	ittt	le
 800a02a:	9e08      	ldrle	r6, [sp, #32]
 800a02c:	434e      	mulle	r6, r1
 800a02e:	9608      	strle	r6, [sp, #32]
 800a030:	e7e1      	b.n	8009ff6 <_strtod_l+0x216>
 800a032:	280f      	cmp	r0, #15
 800a034:	dceb      	bgt.n	800a00e <_strtod_l+0x22e>
 800a036:	9808      	ldr	r0, [sp, #32]
 800a038:	230a      	movs	r3, #10
 800a03a:	fb03 2300 	mla	r3, r3, r0, r2
 800a03e:	9308      	str	r3, [sp, #32]
 800a040:	e7e5      	b.n	800a00e <_strtod_l+0x22e>
 800a042:	4629      	mov	r1, r5
 800a044:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a046:	1c50      	adds	r0, r2, #1
 800a048:	9019      	str	r0, [sp, #100]	@ 0x64
 800a04a:	7852      	ldrb	r2, [r2, #1]
 800a04c:	4618      	mov	r0, r3
 800a04e:	460d      	mov	r5, r1
 800a050:	e7b1      	b.n	8009fb6 <_strtod_l+0x1d6>
 800a052:	f04f 0900 	mov.w	r9, #0
 800a056:	2301      	movs	r3, #1
 800a058:	e77d      	b.n	8009f56 <_strtod_l+0x176>
 800a05a:	f04f 0c00 	mov.w	ip, #0
 800a05e:	1ca2      	adds	r2, r4, #2
 800a060:	9219      	str	r2, [sp, #100]	@ 0x64
 800a062:	78a2      	ldrb	r2, [r4, #2]
 800a064:	e785      	b.n	8009f72 <_strtod_l+0x192>
 800a066:	f04f 0c01 	mov.w	ip, #1
 800a06a:	e7f8      	b.n	800a05e <_strtod_l+0x27e>
 800a06c:	08011e04 	.word	0x08011e04
 800a070:	080113d6 	.word	0x080113d6
 800a074:	7ff00000 	.word	0x7ff00000
 800a078:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a07a:	1c51      	adds	r1, r2, #1
 800a07c:	9119      	str	r1, [sp, #100]	@ 0x64
 800a07e:	7852      	ldrb	r2, [r2, #1]
 800a080:	2a30      	cmp	r2, #48	@ 0x30
 800a082:	d0f9      	beq.n	800a078 <_strtod_l+0x298>
 800a084:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800a088:	2908      	cmp	r1, #8
 800a08a:	f63f af78 	bhi.w	8009f7e <_strtod_l+0x19e>
 800a08e:	3a30      	subs	r2, #48	@ 0x30
 800a090:	920e      	str	r2, [sp, #56]	@ 0x38
 800a092:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a094:	920f      	str	r2, [sp, #60]	@ 0x3c
 800a096:	f04f 080a 	mov.w	r8, #10
 800a09a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a09c:	1c56      	adds	r6, r2, #1
 800a09e:	9619      	str	r6, [sp, #100]	@ 0x64
 800a0a0:	7852      	ldrb	r2, [r2, #1]
 800a0a2:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800a0a6:	f1be 0f09 	cmp.w	lr, #9
 800a0aa:	d939      	bls.n	800a120 <_strtod_l+0x340>
 800a0ac:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800a0ae:	1a76      	subs	r6, r6, r1
 800a0b0:	2e08      	cmp	r6, #8
 800a0b2:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800a0b6:	dc03      	bgt.n	800a0c0 <_strtod_l+0x2e0>
 800a0b8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800a0ba:	4588      	cmp	r8, r1
 800a0bc:	bfa8      	it	ge
 800a0be:	4688      	movge	r8, r1
 800a0c0:	f1bc 0f00 	cmp.w	ip, #0
 800a0c4:	d001      	beq.n	800a0ca <_strtod_l+0x2ea>
 800a0c6:	f1c8 0800 	rsb	r8, r8, #0
 800a0ca:	2d00      	cmp	r5, #0
 800a0cc:	d14e      	bne.n	800a16c <_strtod_l+0x38c>
 800a0ce:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a0d0:	4308      	orrs	r0, r1
 800a0d2:	f47f aebe 	bne.w	8009e52 <_strtod_l+0x72>
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	f47f aed6 	bne.w	8009e88 <_strtod_l+0xa8>
 800a0dc:	2a69      	cmp	r2, #105	@ 0x69
 800a0de:	d028      	beq.n	800a132 <_strtod_l+0x352>
 800a0e0:	dc25      	bgt.n	800a12e <_strtod_l+0x34e>
 800a0e2:	2a49      	cmp	r2, #73	@ 0x49
 800a0e4:	d025      	beq.n	800a132 <_strtod_l+0x352>
 800a0e6:	2a4e      	cmp	r2, #78	@ 0x4e
 800a0e8:	f47f aece 	bne.w	8009e88 <_strtod_l+0xa8>
 800a0ec:	499b      	ldr	r1, [pc, #620]	@ (800a35c <_strtod_l+0x57c>)
 800a0ee:	a819      	add	r0, sp, #100	@ 0x64
 800a0f0:	f003 fde2 	bl	800dcb8 <__match>
 800a0f4:	2800      	cmp	r0, #0
 800a0f6:	f43f aec7 	beq.w	8009e88 <_strtod_l+0xa8>
 800a0fa:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a0fc:	781b      	ldrb	r3, [r3, #0]
 800a0fe:	2b28      	cmp	r3, #40	@ 0x28
 800a100:	d12e      	bne.n	800a160 <_strtod_l+0x380>
 800a102:	4997      	ldr	r1, [pc, #604]	@ (800a360 <_strtod_l+0x580>)
 800a104:	aa1c      	add	r2, sp, #112	@ 0x70
 800a106:	a819      	add	r0, sp, #100	@ 0x64
 800a108:	f003 fdea 	bl	800dce0 <__hexnan>
 800a10c:	2805      	cmp	r0, #5
 800a10e:	d127      	bne.n	800a160 <_strtod_l+0x380>
 800a110:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800a112:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800a116:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800a11a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800a11e:	e698      	b.n	8009e52 <_strtod_l+0x72>
 800a120:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800a122:	fb08 2101 	mla	r1, r8, r1, r2
 800a126:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800a12a:	920e      	str	r2, [sp, #56]	@ 0x38
 800a12c:	e7b5      	b.n	800a09a <_strtod_l+0x2ba>
 800a12e:	2a6e      	cmp	r2, #110	@ 0x6e
 800a130:	e7da      	b.n	800a0e8 <_strtod_l+0x308>
 800a132:	498c      	ldr	r1, [pc, #560]	@ (800a364 <_strtod_l+0x584>)
 800a134:	a819      	add	r0, sp, #100	@ 0x64
 800a136:	f003 fdbf 	bl	800dcb8 <__match>
 800a13a:	2800      	cmp	r0, #0
 800a13c:	f43f aea4 	beq.w	8009e88 <_strtod_l+0xa8>
 800a140:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a142:	4989      	ldr	r1, [pc, #548]	@ (800a368 <_strtod_l+0x588>)
 800a144:	3b01      	subs	r3, #1
 800a146:	a819      	add	r0, sp, #100	@ 0x64
 800a148:	9319      	str	r3, [sp, #100]	@ 0x64
 800a14a:	f003 fdb5 	bl	800dcb8 <__match>
 800a14e:	b910      	cbnz	r0, 800a156 <_strtod_l+0x376>
 800a150:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a152:	3301      	adds	r3, #1
 800a154:	9319      	str	r3, [sp, #100]	@ 0x64
 800a156:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800a378 <_strtod_l+0x598>
 800a15a:	f04f 0a00 	mov.w	sl, #0
 800a15e:	e678      	b.n	8009e52 <_strtod_l+0x72>
 800a160:	4882      	ldr	r0, [pc, #520]	@ (800a36c <_strtod_l+0x58c>)
 800a162:	f002 fc71 	bl	800ca48 <nan>
 800a166:	ec5b ab10 	vmov	sl, fp, d0
 800a16a:	e672      	b.n	8009e52 <_strtod_l+0x72>
 800a16c:	eba8 0309 	sub.w	r3, r8, r9
 800a170:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800a172:	9309      	str	r3, [sp, #36]	@ 0x24
 800a174:	2f00      	cmp	r7, #0
 800a176:	bf08      	it	eq
 800a178:	462f      	moveq	r7, r5
 800a17a:	2d10      	cmp	r5, #16
 800a17c:	462c      	mov	r4, r5
 800a17e:	bfa8      	it	ge
 800a180:	2410      	movge	r4, #16
 800a182:	f7f6 f9cf 	bl	8000524 <__aeabi_ui2d>
 800a186:	2d09      	cmp	r5, #9
 800a188:	4682      	mov	sl, r0
 800a18a:	468b      	mov	fp, r1
 800a18c:	dc13      	bgt.n	800a1b6 <_strtod_l+0x3d6>
 800a18e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a190:	2b00      	cmp	r3, #0
 800a192:	f43f ae5e 	beq.w	8009e52 <_strtod_l+0x72>
 800a196:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a198:	dd78      	ble.n	800a28c <_strtod_l+0x4ac>
 800a19a:	2b16      	cmp	r3, #22
 800a19c:	dc5f      	bgt.n	800a25e <_strtod_l+0x47e>
 800a19e:	4974      	ldr	r1, [pc, #464]	@ (800a370 <_strtod_l+0x590>)
 800a1a0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a1a4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a1a8:	4652      	mov	r2, sl
 800a1aa:	465b      	mov	r3, fp
 800a1ac:	f7f6 fa34 	bl	8000618 <__aeabi_dmul>
 800a1b0:	4682      	mov	sl, r0
 800a1b2:	468b      	mov	fp, r1
 800a1b4:	e64d      	b.n	8009e52 <_strtod_l+0x72>
 800a1b6:	4b6e      	ldr	r3, [pc, #440]	@ (800a370 <_strtod_l+0x590>)
 800a1b8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a1bc:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800a1c0:	f7f6 fa2a 	bl	8000618 <__aeabi_dmul>
 800a1c4:	4682      	mov	sl, r0
 800a1c6:	9808      	ldr	r0, [sp, #32]
 800a1c8:	468b      	mov	fp, r1
 800a1ca:	f7f6 f9ab 	bl	8000524 <__aeabi_ui2d>
 800a1ce:	4602      	mov	r2, r0
 800a1d0:	460b      	mov	r3, r1
 800a1d2:	4650      	mov	r0, sl
 800a1d4:	4659      	mov	r1, fp
 800a1d6:	f7f6 f869 	bl	80002ac <__adddf3>
 800a1da:	2d0f      	cmp	r5, #15
 800a1dc:	4682      	mov	sl, r0
 800a1de:	468b      	mov	fp, r1
 800a1e0:	ddd5      	ble.n	800a18e <_strtod_l+0x3ae>
 800a1e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a1e4:	1b2c      	subs	r4, r5, r4
 800a1e6:	441c      	add	r4, r3
 800a1e8:	2c00      	cmp	r4, #0
 800a1ea:	f340 8096 	ble.w	800a31a <_strtod_l+0x53a>
 800a1ee:	f014 030f 	ands.w	r3, r4, #15
 800a1f2:	d00a      	beq.n	800a20a <_strtod_l+0x42a>
 800a1f4:	495e      	ldr	r1, [pc, #376]	@ (800a370 <_strtod_l+0x590>)
 800a1f6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a1fa:	4652      	mov	r2, sl
 800a1fc:	465b      	mov	r3, fp
 800a1fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a202:	f7f6 fa09 	bl	8000618 <__aeabi_dmul>
 800a206:	4682      	mov	sl, r0
 800a208:	468b      	mov	fp, r1
 800a20a:	f034 040f 	bics.w	r4, r4, #15
 800a20e:	d073      	beq.n	800a2f8 <_strtod_l+0x518>
 800a210:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800a214:	dd48      	ble.n	800a2a8 <_strtod_l+0x4c8>
 800a216:	2400      	movs	r4, #0
 800a218:	46a0      	mov	r8, r4
 800a21a:	940a      	str	r4, [sp, #40]	@ 0x28
 800a21c:	46a1      	mov	r9, r4
 800a21e:	9a05      	ldr	r2, [sp, #20]
 800a220:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800a378 <_strtod_l+0x598>
 800a224:	2322      	movs	r3, #34	@ 0x22
 800a226:	6013      	str	r3, [r2, #0]
 800a228:	f04f 0a00 	mov.w	sl, #0
 800a22c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a22e:	2b00      	cmp	r3, #0
 800a230:	f43f ae0f 	beq.w	8009e52 <_strtod_l+0x72>
 800a234:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a236:	9805      	ldr	r0, [sp, #20]
 800a238:	f003 fe84 	bl	800df44 <_Bfree>
 800a23c:	9805      	ldr	r0, [sp, #20]
 800a23e:	4649      	mov	r1, r9
 800a240:	f003 fe80 	bl	800df44 <_Bfree>
 800a244:	9805      	ldr	r0, [sp, #20]
 800a246:	4641      	mov	r1, r8
 800a248:	f003 fe7c 	bl	800df44 <_Bfree>
 800a24c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a24e:	9805      	ldr	r0, [sp, #20]
 800a250:	f003 fe78 	bl	800df44 <_Bfree>
 800a254:	9805      	ldr	r0, [sp, #20]
 800a256:	4621      	mov	r1, r4
 800a258:	f003 fe74 	bl	800df44 <_Bfree>
 800a25c:	e5f9      	b.n	8009e52 <_strtod_l+0x72>
 800a25e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a260:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800a264:	4293      	cmp	r3, r2
 800a266:	dbbc      	blt.n	800a1e2 <_strtod_l+0x402>
 800a268:	4c41      	ldr	r4, [pc, #260]	@ (800a370 <_strtod_l+0x590>)
 800a26a:	f1c5 050f 	rsb	r5, r5, #15
 800a26e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800a272:	4652      	mov	r2, sl
 800a274:	465b      	mov	r3, fp
 800a276:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a27a:	f7f6 f9cd 	bl	8000618 <__aeabi_dmul>
 800a27e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a280:	1b5d      	subs	r5, r3, r5
 800a282:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800a286:	e9d4 2300 	ldrd	r2, r3, [r4]
 800a28a:	e78f      	b.n	800a1ac <_strtod_l+0x3cc>
 800a28c:	3316      	adds	r3, #22
 800a28e:	dba8      	blt.n	800a1e2 <_strtod_l+0x402>
 800a290:	4b37      	ldr	r3, [pc, #220]	@ (800a370 <_strtod_l+0x590>)
 800a292:	eba9 0808 	sub.w	r8, r9, r8
 800a296:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800a29a:	e9d8 2300 	ldrd	r2, r3, [r8]
 800a29e:	4650      	mov	r0, sl
 800a2a0:	4659      	mov	r1, fp
 800a2a2:	f7f6 fae3 	bl	800086c <__aeabi_ddiv>
 800a2a6:	e783      	b.n	800a1b0 <_strtod_l+0x3d0>
 800a2a8:	4b32      	ldr	r3, [pc, #200]	@ (800a374 <_strtod_l+0x594>)
 800a2aa:	9308      	str	r3, [sp, #32]
 800a2ac:	2300      	movs	r3, #0
 800a2ae:	1124      	asrs	r4, r4, #4
 800a2b0:	4650      	mov	r0, sl
 800a2b2:	4659      	mov	r1, fp
 800a2b4:	461e      	mov	r6, r3
 800a2b6:	2c01      	cmp	r4, #1
 800a2b8:	dc21      	bgt.n	800a2fe <_strtod_l+0x51e>
 800a2ba:	b10b      	cbz	r3, 800a2c0 <_strtod_l+0x4e0>
 800a2bc:	4682      	mov	sl, r0
 800a2be:	468b      	mov	fp, r1
 800a2c0:	492c      	ldr	r1, [pc, #176]	@ (800a374 <_strtod_l+0x594>)
 800a2c2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800a2c6:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800a2ca:	4652      	mov	r2, sl
 800a2cc:	465b      	mov	r3, fp
 800a2ce:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a2d2:	f7f6 f9a1 	bl	8000618 <__aeabi_dmul>
 800a2d6:	4b28      	ldr	r3, [pc, #160]	@ (800a378 <_strtod_l+0x598>)
 800a2d8:	460a      	mov	r2, r1
 800a2da:	400b      	ands	r3, r1
 800a2dc:	4927      	ldr	r1, [pc, #156]	@ (800a37c <_strtod_l+0x59c>)
 800a2de:	428b      	cmp	r3, r1
 800a2e0:	4682      	mov	sl, r0
 800a2e2:	d898      	bhi.n	800a216 <_strtod_l+0x436>
 800a2e4:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800a2e8:	428b      	cmp	r3, r1
 800a2ea:	bf86      	itte	hi
 800a2ec:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800a380 <_strtod_l+0x5a0>
 800a2f0:	f04f 3aff 	movhi.w	sl, #4294967295
 800a2f4:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800a2f8:	2300      	movs	r3, #0
 800a2fa:	9308      	str	r3, [sp, #32]
 800a2fc:	e07a      	b.n	800a3f4 <_strtod_l+0x614>
 800a2fe:	07e2      	lsls	r2, r4, #31
 800a300:	d505      	bpl.n	800a30e <_strtod_l+0x52e>
 800a302:	9b08      	ldr	r3, [sp, #32]
 800a304:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a308:	f7f6 f986 	bl	8000618 <__aeabi_dmul>
 800a30c:	2301      	movs	r3, #1
 800a30e:	9a08      	ldr	r2, [sp, #32]
 800a310:	3208      	adds	r2, #8
 800a312:	3601      	adds	r6, #1
 800a314:	1064      	asrs	r4, r4, #1
 800a316:	9208      	str	r2, [sp, #32]
 800a318:	e7cd      	b.n	800a2b6 <_strtod_l+0x4d6>
 800a31a:	d0ed      	beq.n	800a2f8 <_strtod_l+0x518>
 800a31c:	4264      	negs	r4, r4
 800a31e:	f014 020f 	ands.w	r2, r4, #15
 800a322:	d00a      	beq.n	800a33a <_strtod_l+0x55a>
 800a324:	4b12      	ldr	r3, [pc, #72]	@ (800a370 <_strtod_l+0x590>)
 800a326:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a32a:	4650      	mov	r0, sl
 800a32c:	4659      	mov	r1, fp
 800a32e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a332:	f7f6 fa9b 	bl	800086c <__aeabi_ddiv>
 800a336:	4682      	mov	sl, r0
 800a338:	468b      	mov	fp, r1
 800a33a:	1124      	asrs	r4, r4, #4
 800a33c:	d0dc      	beq.n	800a2f8 <_strtod_l+0x518>
 800a33e:	2c1f      	cmp	r4, #31
 800a340:	dd20      	ble.n	800a384 <_strtod_l+0x5a4>
 800a342:	2400      	movs	r4, #0
 800a344:	46a0      	mov	r8, r4
 800a346:	940a      	str	r4, [sp, #40]	@ 0x28
 800a348:	46a1      	mov	r9, r4
 800a34a:	9a05      	ldr	r2, [sp, #20]
 800a34c:	2322      	movs	r3, #34	@ 0x22
 800a34e:	f04f 0a00 	mov.w	sl, #0
 800a352:	f04f 0b00 	mov.w	fp, #0
 800a356:	6013      	str	r3, [r2, #0]
 800a358:	e768      	b.n	800a22c <_strtod_l+0x44c>
 800a35a:	bf00      	nop
 800a35c:	08011f4e 	.word	0x08011f4e
 800a360:	08011df0 	.word	0x08011df0
 800a364:	08011f46 	.word	0x08011f46
 800a368:	0801202f 	.word	0x0801202f
 800a36c:	08010fa3 	.word	0x08010fa3
 800a370:	080121a8 	.word	0x080121a8
 800a374:	08012180 	.word	0x08012180
 800a378:	7ff00000 	.word	0x7ff00000
 800a37c:	7ca00000 	.word	0x7ca00000
 800a380:	7fefffff 	.word	0x7fefffff
 800a384:	f014 0310 	ands.w	r3, r4, #16
 800a388:	bf18      	it	ne
 800a38a:	236a      	movne	r3, #106	@ 0x6a
 800a38c:	4ea9      	ldr	r6, [pc, #676]	@ (800a634 <_strtod_l+0x854>)
 800a38e:	9308      	str	r3, [sp, #32]
 800a390:	4650      	mov	r0, sl
 800a392:	4659      	mov	r1, fp
 800a394:	2300      	movs	r3, #0
 800a396:	07e2      	lsls	r2, r4, #31
 800a398:	d504      	bpl.n	800a3a4 <_strtod_l+0x5c4>
 800a39a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a39e:	f7f6 f93b 	bl	8000618 <__aeabi_dmul>
 800a3a2:	2301      	movs	r3, #1
 800a3a4:	1064      	asrs	r4, r4, #1
 800a3a6:	f106 0608 	add.w	r6, r6, #8
 800a3aa:	d1f4      	bne.n	800a396 <_strtod_l+0x5b6>
 800a3ac:	b10b      	cbz	r3, 800a3b2 <_strtod_l+0x5d2>
 800a3ae:	4682      	mov	sl, r0
 800a3b0:	468b      	mov	fp, r1
 800a3b2:	9b08      	ldr	r3, [sp, #32]
 800a3b4:	b1b3      	cbz	r3, 800a3e4 <_strtod_l+0x604>
 800a3b6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800a3ba:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	4659      	mov	r1, fp
 800a3c2:	dd0f      	ble.n	800a3e4 <_strtod_l+0x604>
 800a3c4:	2b1f      	cmp	r3, #31
 800a3c6:	dd55      	ble.n	800a474 <_strtod_l+0x694>
 800a3c8:	2b34      	cmp	r3, #52	@ 0x34
 800a3ca:	bfde      	ittt	le
 800a3cc:	f04f 33ff 	movle.w	r3, #4294967295
 800a3d0:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800a3d4:	4093      	lslle	r3, r2
 800a3d6:	f04f 0a00 	mov.w	sl, #0
 800a3da:	bfcc      	ite	gt
 800a3dc:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800a3e0:	ea03 0b01 	andle.w	fp, r3, r1
 800a3e4:	2200      	movs	r2, #0
 800a3e6:	2300      	movs	r3, #0
 800a3e8:	4650      	mov	r0, sl
 800a3ea:	4659      	mov	r1, fp
 800a3ec:	f7f6 fb7c 	bl	8000ae8 <__aeabi_dcmpeq>
 800a3f0:	2800      	cmp	r0, #0
 800a3f2:	d1a6      	bne.n	800a342 <_strtod_l+0x562>
 800a3f4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a3f6:	9300      	str	r3, [sp, #0]
 800a3f8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800a3fa:	9805      	ldr	r0, [sp, #20]
 800a3fc:	462b      	mov	r3, r5
 800a3fe:	463a      	mov	r2, r7
 800a400:	f003 fe08 	bl	800e014 <__s2b>
 800a404:	900a      	str	r0, [sp, #40]	@ 0x28
 800a406:	2800      	cmp	r0, #0
 800a408:	f43f af05 	beq.w	800a216 <_strtod_l+0x436>
 800a40c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a40e:	2a00      	cmp	r2, #0
 800a410:	eba9 0308 	sub.w	r3, r9, r8
 800a414:	bfa8      	it	ge
 800a416:	2300      	movge	r3, #0
 800a418:	9312      	str	r3, [sp, #72]	@ 0x48
 800a41a:	2400      	movs	r4, #0
 800a41c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800a420:	9316      	str	r3, [sp, #88]	@ 0x58
 800a422:	46a0      	mov	r8, r4
 800a424:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a426:	9805      	ldr	r0, [sp, #20]
 800a428:	6859      	ldr	r1, [r3, #4]
 800a42a:	f003 fd4b 	bl	800dec4 <_Balloc>
 800a42e:	4681      	mov	r9, r0
 800a430:	2800      	cmp	r0, #0
 800a432:	f43f aef4 	beq.w	800a21e <_strtod_l+0x43e>
 800a436:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a438:	691a      	ldr	r2, [r3, #16]
 800a43a:	3202      	adds	r2, #2
 800a43c:	f103 010c 	add.w	r1, r3, #12
 800a440:	0092      	lsls	r2, r2, #2
 800a442:	300c      	adds	r0, #12
 800a444:	f002 faf0 	bl	800ca28 <memcpy>
 800a448:	ec4b ab10 	vmov	d0, sl, fp
 800a44c:	9805      	ldr	r0, [sp, #20]
 800a44e:	aa1c      	add	r2, sp, #112	@ 0x70
 800a450:	a91b      	add	r1, sp, #108	@ 0x6c
 800a452:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800a456:	f004 f919 	bl	800e68c <__d2b>
 800a45a:	901a      	str	r0, [sp, #104]	@ 0x68
 800a45c:	2800      	cmp	r0, #0
 800a45e:	f43f aede 	beq.w	800a21e <_strtod_l+0x43e>
 800a462:	9805      	ldr	r0, [sp, #20]
 800a464:	2101      	movs	r1, #1
 800a466:	f003 fe6b 	bl	800e140 <__i2b>
 800a46a:	4680      	mov	r8, r0
 800a46c:	b948      	cbnz	r0, 800a482 <_strtod_l+0x6a2>
 800a46e:	f04f 0800 	mov.w	r8, #0
 800a472:	e6d4      	b.n	800a21e <_strtod_l+0x43e>
 800a474:	f04f 32ff 	mov.w	r2, #4294967295
 800a478:	fa02 f303 	lsl.w	r3, r2, r3
 800a47c:	ea03 0a0a 	and.w	sl, r3, sl
 800a480:	e7b0      	b.n	800a3e4 <_strtod_l+0x604>
 800a482:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800a484:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800a486:	2d00      	cmp	r5, #0
 800a488:	bfab      	itete	ge
 800a48a:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800a48c:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800a48e:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800a490:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800a492:	bfac      	ite	ge
 800a494:	18ef      	addge	r7, r5, r3
 800a496:	1b5e      	sublt	r6, r3, r5
 800a498:	9b08      	ldr	r3, [sp, #32]
 800a49a:	1aed      	subs	r5, r5, r3
 800a49c:	4415      	add	r5, r2
 800a49e:	4b66      	ldr	r3, [pc, #408]	@ (800a638 <_strtod_l+0x858>)
 800a4a0:	3d01      	subs	r5, #1
 800a4a2:	429d      	cmp	r5, r3
 800a4a4:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800a4a8:	da50      	bge.n	800a54c <_strtod_l+0x76c>
 800a4aa:	1b5b      	subs	r3, r3, r5
 800a4ac:	2b1f      	cmp	r3, #31
 800a4ae:	eba2 0203 	sub.w	r2, r2, r3
 800a4b2:	f04f 0101 	mov.w	r1, #1
 800a4b6:	dc3d      	bgt.n	800a534 <_strtod_l+0x754>
 800a4b8:	fa01 f303 	lsl.w	r3, r1, r3
 800a4bc:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a4be:	2300      	movs	r3, #0
 800a4c0:	9310      	str	r3, [sp, #64]	@ 0x40
 800a4c2:	18bd      	adds	r5, r7, r2
 800a4c4:	9b08      	ldr	r3, [sp, #32]
 800a4c6:	42af      	cmp	r7, r5
 800a4c8:	4416      	add	r6, r2
 800a4ca:	441e      	add	r6, r3
 800a4cc:	463b      	mov	r3, r7
 800a4ce:	bfa8      	it	ge
 800a4d0:	462b      	movge	r3, r5
 800a4d2:	42b3      	cmp	r3, r6
 800a4d4:	bfa8      	it	ge
 800a4d6:	4633      	movge	r3, r6
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	bfc2      	ittt	gt
 800a4dc:	1aed      	subgt	r5, r5, r3
 800a4de:	1af6      	subgt	r6, r6, r3
 800a4e0:	1aff      	subgt	r7, r7, r3
 800a4e2:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	dd16      	ble.n	800a516 <_strtod_l+0x736>
 800a4e8:	4641      	mov	r1, r8
 800a4ea:	9805      	ldr	r0, [sp, #20]
 800a4ec:	461a      	mov	r2, r3
 800a4ee:	f003 fee7 	bl	800e2c0 <__pow5mult>
 800a4f2:	4680      	mov	r8, r0
 800a4f4:	2800      	cmp	r0, #0
 800a4f6:	d0ba      	beq.n	800a46e <_strtod_l+0x68e>
 800a4f8:	4601      	mov	r1, r0
 800a4fa:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800a4fc:	9805      	ldr	r0, [sp, #20]
 800a4fe:	f003 fe35 	bl	800e16c <__multiply>
 800a502:	900e      	str	r0, [sp, #56]	@ 0x38
 800a504:	2800      	cmp	r0, #0
 800a506:	f43f ae8a 	beq.w	800a21e <_strtod_l+0x43e>
 800a50a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a50c:	9805      	ldr	r0, [sp, #20]
 800a50e:	f003 fd19 	bl	800df44 <_Bfree>
 800a512:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a514:	931a      	str	r3, [sp, #104]	@ 0x68
 800a516:	2d00      	cmp	r5, #0
 800a518:	dc1d      	bgt.n	800a556 <_strtod_l+0x776>
 800a51a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	dd23      	ble.n	800a568 <_strtod_l+0x788>
 800a520:	4649      	mov	r1, r9
 800a522:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800a524:	9805      	ldr	r0, [sp, #20]
 800a526:	f003 fecb 	bl	800e2c0 <__pow5mult>
 800a52a:	4681      	mov	r9, r0
 800a52c:	b9e0      	cbnz	r0, 800a568 <_strtod_l+0x788>
 800a52e:	f04f 0900 	mov.w	r9, #0
 800a532:	e674      	b.n	800a21e <_strtod_l+0x43e>
 800a534:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800a538:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800a53c:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800a540:	35e2      	adds	r5, #226	@ 0xe2
 800a542:	fa01 f305 	lsl.w	r3, r1, r5
 800a546:	9310      	str	r3, [sp, #64]	@ 0x40
 800a548:	9113      	str	r1, [sp, #76]	@ 0x4c
 800a54a:	e7ba      	b.n	800a4c2 <_strtod_l+0x6e2>
 800a54c:	2300      	movs	r3, #0
 800a54e:	9310      	str	r3, [sp, #64]	@ 0x40
 800a550:	2301      	movs	r3, #1
 800a552:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a554:	e7b5      	b.n	800a4c2 <_strtod_l+0x6e2>
 800a556:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a558:	9805      	ldr	r0, [sp, #20]
 800a55a:	462a      	mov	r2, r5
 800a55c:	f003 ff0a 	bl	800e374 <__lshift>
 800a560:	901a      	str	r0, [sp, #104]	@ 0x68
 800a562:	2800      	cmp	r0, #0
 800a564:	d1d9      	bne.n	800a51a <_strtod_l+0x73a>
 800a566:	e65a      	b.n	800a21e <_strtod_l+0x43e>
 800a568:	2e00      	cmp	r6, #0
 800a56a:	dd07      	ble.n	800a57c <_strtod_l+0x79c>
 800a56c:	4649      	mov	r1, r9
 800a56e:	9805      	ldr	r0, [sp, #20]
 800a570:	4632      	mov	r2, r6
 800a572:	f003 feff 	bl	800e374 <__lshift>
 800a576:	4681      	mov	r9, r0
 800a578:	2800      	cmp	r0, #0
 800a57a:	d0d8      	beq.n	800a52e <_strtod_l+0x74e>
 800a57c:	2f00      	cmp	r7, #0
 800a57e:	dd08      	ble.n	800a592 <_strtod_l+0x7b2>
 800a580:	4641      	mov	r1, r8
 800a582:	9805      	ldr	r0, [sp, #20]
 800a584:	463a      	mov	r2, r7
 800a586:	f003 fef5 	bl	800e374 <__lshift>
 800a58a:	4680      	mov	r8, r0
 800a58c:	2800      	cmp	r0, #0
 800a58e:	f43f ae46 	beq.w	800a21e <_strtod_l+0x43e>
 800a592:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a594:	9805      	ldr	r0, [sp, #20]
 800a596:	464a      	mov	r2, r9
 800a598:	f003 ff74 	bl	800e484 <__mdiff>
 800a59c:	4604      	mov	r4, r0
 800a59e:	2800      	cmp	r0, #0
 800a5a0:	f43f ae3d 	beq.w	800a21e <_strtod_l+0x43e>
 800a5a4:	68c3      	ldr	r3, [r0, #12]
 800a5a6:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a5a8:	2300      	movs	r3, #0
 800a5aa:	60c3      	str	r3, [r0, #12]
 800a5ac:	4641      	mov	r1, r8
 800a5ae:	f003 ff4d 	bl	800e44c <__mcmp>
 800a5b2:	2800      	cmp	r0, #0
 800a5b4:	da46      	bge.n	800a644 <_strtod_l+0x864>
 800a5b6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a5b8:	ea53 030a 	orrs.w	r3, r3, sl
 800a5bc:	d16c      	bne.n	800a698 <_strtod_l+0x8b8>
 800a5be:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	d168      	bne.n	800a698 <_strtod_l+0x8b8>
 800a5c6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a5ca:	0d1b      	lsrs	r3, r3, #20
 800a5cc:	051b      	lsls	r3, r3, #20
 800a5ce:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800a5d2:	d961      	bls.n	800a698 <_strtod_l+0x8b8>
 800a5d4:	6963      	ldr	r3, [r4, #20]
 800a5d6:	b913      	cbnz	r3, 800a5de <_strtod_l+0x7fe>
 800a5d8:	6923      	ldr	r3, [r4, #16]
 800a5da:	2b01      	cmp	r3, #1
 800a5dc:	dd5c      	ble.n	800a698 <_strtod_l+0x8b8>
 800a5de:	4621      	mov	r1, r4
 800a5e0:	2201      	movs	r2, #1
 800a5e2:	9805      	ldr	r0, [sp, #20]
 800a5e4:	f003 fec6 	bl	800e374 <__lshift>
 800a5e8:	4641      	mov	r1, r8
 800a5ea:	4604      	mov	r4, r0
 800a5ec:	f003 ff2e 	bl	800e44c <__mcmp>
 800a5f0:	2800      	cmp	r0, #0
 800a5f2:	dd51      	ble.n	800a698 <_strtod_l+0x8b8>
 800a5f4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a5f8:	9a08      	ldr	r2, [sp, #32]
 800a5fa:	0d1b      	lsrs	r3, r3, #20
 800a5fc:	051b      	lsls	r3, r3, #20
 800a5fe:	2a00      	cmp	r2, #0
 800a600:	d06b      	beq.n	800a6da <_strtod_l+0x8fa>
 800a602:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800a606:	d868      	bhi.n	800a6da <_strtod_l+0x8fa>
 800a608:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800a60c:	f67f ae9d 	bls.w	800a34a <_strtod_l+0x56a>
 800a610:	4b0a      	ldr	r3, [pc, #40]	@ (800a63c <_strtod_l+0x85c>)
 800a612:	4650      	mov	r0, sl
 800a614:	4659      	mov	r1, fp
 800a616:	2200      	movs	r2, #0
 800a618:	f7f5 fffe 	bl	8000618 <__aeabi_dmul>
 800a61c:	4b08      	ldr	r3, [pc, #32]	@ (800a640 <_strtod_l+0x860>)
 800a61e:	400b      	ands	r3, r1
 800a620:	4682      	mov	sl, r0
 800a622:	468b      	mov	fp, r1
 800a624:	2b00      	cmp	r3, #0
 800a626:	f47f ae05 	bne.w	800a234 <_strtod_l+0x454>
 800a62a:	9a05      	ldr	r2, [sp, #20]
 800a62c:	2322      	movs	r3, #34	@ 0x22
 800a62e:	6013      	str	r3, [r2, #0]
 800a630:	e600      	b.n	800a234 <_strtod_l+0x454>
 800a632:	bf00      	nop
 800a634:	08011e18 	.word	0x08011e18
 800a638:	fffffc02 	.word	0xfffffc02
 800a63c:	39500000 	.word	0x39500000
 800a640:	7ff00000 	.word	0x7ff00000
 800a644:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800a648:	d165      	bne.n	800a716 <_strtod_l+0x936>
 800a64a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800a64c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a650:	b35a      	cbz	r2, 800a6aa <_strtod_l+0x8ca>
 800a652:	4a9f      	ldr	r2, [pc, #636]	@ (800a8d0 <_strtod_l+0xaf0>)
 800a654:	4293      	cmp	r3, r2
 800a656:	d12b      	bne.n	800a6b0 <_strtod_l+0x8d0>
 800a658:	9b08      	ldr	r3, [sp, #32]
 800a65a:	4651      	mov	r1, sl
 800a65c:	b303      	cbz	r3, 800a6a0 <_strtod_l+0x8c0>
 800a65e:	4b9d      	ldr	r3, [pc, #628]	@ (800a8d4 <_strtod_l+0xaf4>)
 800a660:	465a      	mov	r2, fp
 800a662:	4013      	ands	r3, r2
 800a664:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800a668:	f04f 32ff 	mov.w	r2, #4294967295
 800a66c:	d81b      	bhi.n	800a6a6 <_strtod_l+0x8c6>
 800a66e:	0d1b      	lsrs	r3, r3, #20
 800a670:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800a674:	fa02 f303 	lsl.w	r3, r2, r3
 800a678:	4299      	cmp	r1, r3
 800a67a:	d119      	bne.n	800a6b0 <_strtod_l+0x8d0>
 800a67c:	4b96      	ldr	r3, [pc, #600]	@ (800a8d8 <_strtod_l+0xaf8>)
 800a67e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a680:	429a      	cmp	r2, r3
 800a682:	d102      	bne.n	800a68a <_strtod_l+0x8aa>
 800a684:	3101      	adds	r1, #1
 800a686:	f43f adca 	beq.w	800a21e <_strtod_l+0x43e>
 800a68a:	4b92      	ldr	r3, [pc, #584]	@ (800a8d4 <_strtod_l+0xaf4>)
 800a68c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a68e:	401a      	ands	r2, r3
 800a690:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800a694:	f04f 0a00 	mov.w	sl, #0
 800a698:	9b08      	ldr	r3, [sp, #32]
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	d1b8      	bne.n	800a610 <_strtod_l+0x830>
 800a69e:	e5c9      	b.n	800a234 <_strtod_l+0x454>
 800a6a0:	f04f 33ff 	mov.w	r3, #4294967295
 800a6a4:	e7e8      	b.n	800a678 <_strtod_l+0x898>
 800a6a6:	4613      	mov	r3, r2
 800a6a8:	e7e6      	b.n	800a678 <_strtod_l+0x898>
 800a6aa:	ea53 030a 	orrs.w	r3, r3, sl
 800a6ae:	d0a1      	beq.n	800a5f4 <_strtod_l+0x814>
 800a6b0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800a6b2:	b1db      	cbz	r3, 800a6ec <_strtod_l+0x90c>
 800a6b4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a6b6:	4213      	tst	r3, r2
 800a6b8:	d0ee      	beq.n	800a698 <_strtod_l+0x8b8>
 800a6ba:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a6bc:	9a08      	ldr	r2, [sp, #32]
 800a6be:	4650      	mov	r0, sl
 800a6c0:	4659      	mov	r1, fp
 800a6c2:	b1bb      	cbz	r3, 800a6f4 <_strtod_l+0x914>
 800a6c4:	f7ff fb6c 	bl	8009da0 <sulp>
 800a6c8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a6cc:	ec53 2b10 	vmov	r2, r3, d0
 800a6d0:	f7f5 fdec 	bl	80002ac <__adddf3>
 800a6d4:	4682      	mov	sl, r0
 800a6d6:	468b      	mov	fp, r1
 800a6d8:	e7de      	b.n	800a698 <_strtod_l+0x8b8>
 800a6da:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800a6de:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800a6e2:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800a6e6:	f04f 3aff 	mov.w	sl, #4294967295
 800a6ea:	e7d5      	b.n	800a698 <_strtod_l+0x8b8>
 800a6ec:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a6ee:	ea13 0f0a 	tst.w	r3, sl
 800a6f2:	e7e1      	b.n	800a6b8 <_strtod_l+0x8d8>
 800a6f4:	f7ff fb54 	bl	8009da0 <sulp>
 800a6f8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a6fc:	ec53 2b10 	vmov	r2, r3, d0
 800a700:	f7f5 fdd2 	bl	80002a8 <__aeabi_dsub>
 800a704:	2200      	movs	r2, #0
 800a706:	2300      	movs	r3, #0
 800a708:	4682      	mov	sl, r0
 800a70a:	468b      	mov	fp, r1
 800a70c:	f7f6 f9ec 	bl	8000ae8 <__aeabi_dcmpeq>
 800a710:	2800      	cmp	r0, #0
 800a712:	d0c1      	beq.n	800a698 <_strtod_l+0x8b8>
 800a714:	e619      	b.n	800a34a <_strtod_l+0x56a>
 800a716:	4641      	mov	r1, r8
 800a718:	4620      	mov	r0, r4
 800a71a:	f004 f80f 	bl	800e73c <__ratio>
 800a71e:	ec57 6b10 	vmov	r6, r7, d0
 800a722:	2200      	movs	r2, #0
 800a724:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800a728:	4630      	mov	r0, r6
 800a72a:	4639      	mov	r1, r7
 800a72c:	f7f6 f9f0 	bl	8000b10 <__aeabi_dcmple>
 800a730:	2800      	cmp	r0, #0
 800a732:	d06f      	beq.n	800a814 <_strtod_l+0xa34>
 800a734:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a736:	2b00      	cmp	r3, #0
 800a738:	d17a      	bne.n	800a830 <_strtod_l+0xa50>
 800a73a:	f1ba 0f00 	cmp.w	sl, #0
 800a73e:	d158      	bne.n	800a7f2 <_strtod_l+0xa12>
 800a740:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a742:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a746:	2b00      	cmp	r3, #0
 800a748:	d15a      	bne.n	800a800 <_strtod_l+0xa20>
 800a74a:	4b64      	ldr	r3, [pc, #400]	@ (800a8dc <_strtod_l+0xafc>)
 800a74c:	2200      	movs	r2, #0
 800a74e:	4630      	mov	r0, r6
 800a750:	4639      	mov	r1, r7
 800a752:	f7f6 f9d3 	bl	8000afc <__aeabi_dcmplt>
 800a756:	2800      	cmp	r0, #0
 800a758:	d159      	bne.n	800a80e <_strtod_l+0xa2e>
 800a75a:	4630      	mov	r0, r6
 800a75c:	4639      	mov	r1, r7
 800a75e:	4b60      	ldr	r3, [pc, #384]	@ (800a8e0 <_strtod_l+0xb00>)
 800a760:	2200      	movs	r2, #0
 800a762:	f7f5 ff59 	bl	8000618 <__aeabi_dmul>
 800a766:	4606      	mov	r6, r0
 800a768:	460f      	mov	r7, r1
 800a76a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800a76e:	9606      	str	r6, [sp, #24]
 800a770:	9307      	str	r3, [sp, #28]
 800a772:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a776:	4d57      	ldr	r5, [pc, #348]	@ (800a8d4 <_strtod_l+0xaf4>)
 800a778:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800a77c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a77e:	401d      	ands	r5, r3
 800a780:	4b58      	ldr	r3, [pc, #352]	@ (800a8e4 <_strtod_l+0xb04>)
 800a782:	429d      	cmp	r5, r3
 800a784:	f040 80b2 	bne.w	800a8ec <_strtod_l+0xb0c>
 800a788:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a78a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800a78e:	ec4b ab10 	vmov	d0, sl, fp
 800a792:	f003 ff0b 	bl	800e5ac <__ulp>
 800a796:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a79a:	ec51 0b10 	vmov	r0, r1, d0
 800a79e:	f7f5 ff3b 	bl	8000618 <__aeabi_dmul>
 800a7a2:	4652      	mov	r2, sl
 800a7a4:	465b      	mov	r3, fp
 800a7a6:	f7f5 fd81 	bl	80002ac <__adddf3>
 800a7aa:	460b      	mov	r3, r1
 800a7ac:	4949      	ldr	r1, [pc, #292]	@ (800a8d4 <_strtod_l+0xaf4>)
 800a7ae:	4a4e      	ldr	r2, [pc, #312]	@ (800a8e8 <_strtod_l+0xb08>)
 800a7b0:	4019      	ands	r1, r3
 800a7b2:	4291      	cmp	r1, r2
 800a7b4:	4682      	mov	sl, r0
 800a7b6:	d942      	bls.n	800a83e <_strtod_l+0xa5e>
 800a7b8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800a7ba:	4b47      	ldr	r3, [pc, #284]	@ (800a8d8 <_strtod_l+0xaf8>)
 800a7bc:	429a      	cmp	r2, r3
 800a7be:	d103      	bne.n	800a7c8 <_strtod_l+0x9e8>
 800a7c0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a7c2:	3301      	adds	r3, #1
 800a7c4:	f43f ad2b 	beq.w	800a21e <_strtod_l+0x43e>
 800a7c8:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800a8d8 <_strtod_l+0xaf8>
 800a7cc:	f04f 3aff 	mov.w	sl, #4294967295
 800a7d0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a7d2:	9805      	ldr	r0, [sp, #20]
 800a7d4:	f003 fbb6 	bl	800df44 <_Bfree>
 800a7d8:	9805      	ldr	r0, [sp, #20]
 800a7da:	4649      	mov	r1, r9
 800a7dc:	f003 fbb2 	bl	800df44 <_Bfree>
 800a7e0:	9805      	ldr	r0, [sp, #20]
 800a7e2:	4641      	mov	r1, r8
 800a7e4:	f003 fbae 	bl	800df44 <_Bfree>
 800a7e8:	9805      	ldr	r0, [sp, #20]
 800a7ea:	4621      	mov	r1, r4
 800a7ec:	f003 fbaa 	bl	800df44 <_Bfree>
 800a7f0:	e618      	b.n	800a424 <_strtod_l+0x644>
 800a7f2:	f1ba 0f01 	cmp.w	sl, #1
 800a7f6:	d103      	bne.n	800a800 <_strtod_l+0xa20>
 800a7f8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	f43f ada5 	beq.w	800a34a <_strtod_l+0x56a>
 800a800:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800a8b0 <_strtod_l+0xad0>
 800a804:	4f35      	ldr	r7, [pc, #212]	@ (800a8dc <_strtod_l+0xafc>)
 800a806:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a80a:	2600      	movs	r6, #0
 800a80c:	e7b1      	b.n	800a772 <_strtod_l+0x992>
 800a80e:	4f34      	ldr	r7, [pc, #208]	@ (800a8e0 <_strtod_l+0xb00>)
 800a810:	2600      	movs	r6, #0
 800a812:	e7aa      	b.n	800a76a <_strtod_l+0x98a>
 800a814:	4b32      	ldr	r3, [pc, #200]	@ (800a8e0 <_strtod_l+0xb00>)
 800a816:	4630      	mov	r0, r6
 800a818:	4639      	mov	r1, r7
 800a81a:	2200      	movs	r2, #0
 800a81c:	f7f5 fefc 	bl	8000618 <__aeabi_dmul>
 800a820:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a822:	4606      	mov	r6, r0
 800a824:	460f      	mov	r7, r1
 800a826:	2b00      	cmp	r3, #0
 800a828:	d09f      	beq.n	800a76a <_strtod_l+0x98a>
 800a82a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800a82e:	e7a0      	b.n	800a772 <_strtod_l+0x992>
 800a830:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800a8b8 <_strtod_l+0xad8>
 800a834:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a838:	ec57 6b17 	vmov	r6, r7, d7
 800a83c:	e799      	b.n	800a772 <_strtod_l+0x992>
 800a83e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800a842:	9b08      	ldr	r3, [sp, #32]
 800a844:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800a848:	2b00      	cmp	r3, #0
 800a84a:	d1c1      	bne.n	800a7d0 <_strtod_l+0x9f0>
 800a84c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a850:	0d1b      	lsrs	r3, r3, #20
 800a852:	051b      	lsls	r3, r3, #20
 800a854:	429d      	cmp	r5, r3
 800a856:	d1bb      	bne.n	800a7d0 <_strtod_l+0x9f0>
 800a858:	4630      	mov	r0, r6
 800a85a:	4639      	mov	r1, r7
 800a85c:	f7f6 fa24 	bl	8000ca8 <__aeabi_d2lz>
 800a860:	f7f5 feac 	bl	80005bc <__aeabi_l2d>
 800a864:	4602      	mov	r2, r0
 800a866:	460b      	mov	r3, r1
 800a868:	4630      	mov	r0, r6
 800a86a:	4639      	mov	r1, r7
 800a86c:	f7f5 fd1c 	bl	80002a8 <__aeabi_dsub>
 800a870:	460b      	mov	r3, r1
 800a872:	4602      	mov	r2, r0
 800a874:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800a878:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800a87c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a87e:	ea46 060a 	orr.w	r6, r6, sl
 800a882:	431e      	orrs	r6, r3
 800a884:	d06f      	beq.n	800a966 <_strtod_l+0xb86>
 800a886:	a30e      	add	r3, pc, #56	@ (adr r3, 800a8c0 <_strtod_l+0xae0>)
 800a888:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a88c:	f7f6 f936 	bl	8000afc <__aeabi_dcmplt>
 800a890:	2800      	cmp	r0, #0
 800a892:	f47f accf 	bne.w	800a234 <_strtod_l+0x454>
 800a896:	a30c      	add	r3, pc, #48	@ (adr r3, 800a8c8 <_strtod_l+0xae8>)
 800a898:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a89c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a8a0:	f7f6 f94a 	bl	8000b38 <__aeabi_dcmpgt>
 800a8a4:	2800      	cmp	r0, #0
 800a8a6:	d093      	beq.n	800a7d0 <_strtod_l+0x9f0>
 800a8a8:	e4c4      	b.n	800a234 <_strtod_l+0x454>
 800a8aa:	bf00      	nop
 800a8ac:	f3af 8000 	nop.w
 800a8b0:	00000000 	.word	0x00000000
 800a8b4:	bff00000 	.word	0xbff00000
 800a8b8:	00000000 	.word	0x00000000
 800a8bc:	3ff00000 	.word	0x3ff00000
 800a8c0:	94a03595 	.word	0x94a03595
 800a8c4:	3fdfffff 	.word	0x3fdfffff
 800a8c8:	35afe535 	.word	0x35afe535
 800a8cc:	3fe00000 	.word	0x3fe00000
 800a8d0:	000fffff 	.word	0x000fffff
 800a8d4:	7ff00000 	.word	0x7ff00000
 800a8d8:	7fefffff 	.word	0x7fefffff
 800a8dc:	3ff00000 	.word	0x3ff00000
 800a8e0:	3fe00000 	.word	0x3fe00000
 800a8e4:	7fe00000 	.word	0x7fe00000
 800a8e8:	7c9fffff 	.word	0x7c9fffff
 800a8ec:	9b08      	ldr	r3, [sp, #32]
 800a8ee:	b323      	cbz	r3, 800a93a <_strtod_l+0xb5a>
 800a8f0:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800a8f4:	d821      	bhi.n	800a93a <_strtod_l+0xb5a>
 800a8f6:	a328      	add	r3, pc, #160	@ (adr r3, 800a998 <_strtod_l+0xbb8>)
 800a8f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8fc:	4630      	mov	r0, r6
 800a8fe:	4639      	mov	r1, r7
 800a900:	f7f6 f906 	bl	8000b10 <__aeabi_dcmple>
 800a904:	b1a0      	cbz	r0, 800a930 <_strtod_l+0xb50>
 800a906:	4639      	mov	r1, r7
 800a908:	4630      	mov	r0, r6
 800a90a:	f7f6 f95d 	bl	8000bc8 <__aeabi_d2uiz>
 800a90e:	2801      	cmp	r0, #1
 800a910:	bf38      	it	cc
 800a912:	2001      	movcc	r0, #1
 800a914:	f7f5 fe06 	bl	8000524 <__aeabi_ui2d>
 800a918:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a91a:	4606      	mov	r6, r0
 800a91c:	460f      	mov	r7, r1
 800a91e:	b9fb      	cbnz	r3, 800a960 <_strtod_l+0xb80>
 800a920:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a924:	9014      	str	r0, [sp, #80]	@ 0x50
 800a926:	9315      	str	r3, [sp, #84]	@ 0x54
 800a928:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800a92c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800a930:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a932:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800a936:	1b5b      	subs	r3, r3, r5
 800a938:	9311      	str	r3, [sp, #68]	@ 0x44
 800a93a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800a93e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800a942:	f003 fe33 	bl	800e5ac <__ulp>
 800a946:	4650      	mov	r0, sl
 800a948:	ec53 2b10 	vmov	r2, r3, d0
 800a94c:	4659      	mov	r1, fp
 800a94e:	f7f5 fe63 	bl	8000618 <__aeabi_dmul>
 800a952:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800a956:	f7f5 fca9 	bl	80002ac <__adddf3>
 800a95a:	4682      	mov	sl, r0
 800a95c:	468b      	mov	fp, r1
 800a95e:	e770      	b.n	800a842 <_strtod_l+0xa62>
 800a960:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800a964:	e7e0      	b.n	800a928 <_strtod_l+0xb48>
 800a966:	a30e      	add	r3, pc, #56	@ (adr r3, 800a9a0 <_strtod_l+0xbc0>)
 800a968:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a96c:	f7f6 f8c6 	bl	8000afc <__aeabi_dcmplt>
 800a970:	e798      	b.n	800a8a4 <_strtod_l+0xac4>
 800a972:	2300      	movs	r3, #0
 800a974:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a976:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800a978:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a97a:	6013      	str	r3, [r2, #0]
 800a97c:	f7ff ba6d 	b.w	8009e5a <_strtod_l+0x7a>
 800a980:	2a65      	cmp	r2, #101	@ 0x65
 800a982:	f43f ab66 	beq.w	800a052 <_strtod_l+0x272>
 800a986:	2a45      	cmp	r2, #69	@ 0x45
 800a988:	f43f ab63 	beq.w	800a052 <_strtod_l+0x272>
 800a98c:	2301      	movs	r3, #1
 800a98e:	f7ff bb9e 	b.w	800a0ce <_strtod_l+0x2ee>
 800a992:	bf00      	nop
 800a994:	f3af 8000 	nop.w
 800a998:	ffc00000 	.word	0xffc00000
 800a99c:	41dfffff 	.word	0x41dfffff
 800a9a0:	94a03595 	.word	0x94a03595
 800a9a4:	3fcfffff 	.word	0x3fcfffff

0800a9a8 <_strtod_r>:
 800a9a8:	4b01      	ldr	r3, [pc, #4]	@ (800a9b0 <_strtod_r+0x8>)
 800a9aa:	f7ff ba19 	b.w	8009de0 <_strtod_l>
 800a9ae:	bf00      	nop
 800a9b0:	20000038 	.word	0x20000038

0800a9b4 <strtod>:
 800a9b4:	460a      	mov	r2, r1
 800a9b6:	4601      	mov	r1, r0
 800a9b8:	4802      	ldr	r0, [pc, #8]	@ (800a9c4 <strtod+0x10>)
 800a9ba:	4b03      	ldr	r3, [pc, #12]	@ (800a9c8 <strtod+0x14>)
 800a9bc:	6800      	ldr	r0, [r0, #0]
 800a9be:	f7ff ba0f 	b.w	8009de0 <_strtod_l>
 800a9c2:	bf00      	nop
 800a9c4:	200001a4 	.word	0x200001a4
 800a9c8:	20000038 	.word	0x20000038

0800a9cc <_strtol_l.constprop.0>:
 800a9cc:	2b24      	cmp	r3, #36	@ 0x24
 800a9ce:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a9d2:	4686      	mov	lr, r0
 800a9d4:	4690      	mov	r8, r2
 800a9d6:	d801      	bhi.n	800a9dc <_strtol_l.constprop.0+0x10>
 800a9d8:	2b01      	cmp	r3, #1
 800a9da:	d106      	bne.n	800a9ea <_strtol_l.constprop.0+0x1e>
 800a9dc:	f001 fff2 	bl	800c9c4 <__errno>
 800a9e0:	2316      	movs	r3, #22
 800a9e2:	6003      	str	r3, [r0, #0]
 800a9e4:	2000      	movs	r0, #0
 800a9e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a9ea:	4834      	ldr	r0, [pc, #208]	@ (800aabc <_strtol_l.constprop.0+0xf0>)
 800a9ec:	460d      	mov	r5, r1
 800a9ee:	462a      	mov	r2, r5
 800a9f0:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a9f4:	5d06      	ldrb	r6, [r0, r4]
 800a9f6:	f016 0608 	ands.w	r6, r6, #8
 800a9fa:	d1f8      	bne.n	800a9ee <_strtol_l.constprop.0+0x22>
 800a9fc:	2c2d      	cmp	r4, #45	@ 0x2d
 800a9fe:	d12d      	bne.n	800aa5c <_strtol_l.constprop.0+0x90>
 800aa00:	782c      	ldrb	r4, [r5, #0]
 800aa02:	2601      	movs	r6, #1
 800aa04:	1c95      	adds	r5, r2, #2
 800aa06:	f033 0210 	bics.w	r2, r3, #16
 800aa0a:	d109      	bne.n	800aa20 <_strtol_l.constprop.0+0x54>
 800aa0c:	2c30      	cmp	r4, #48	@ 0x30
 800aa0e:	d12a      	bne.n	800aa66 <_strtol_l.constprop.0+0x9a>
 800aa10:	782a      	ldrb	r2, [r5, #0]
 800aa12:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800aa16:	2a58      	cmp	r2, #88	@ 0x58
 800aa18:	d125      	bne.n	800aa66 <_strtol_l.constprop.0+0x9a>
 800aa1a:	786c      	ldrb	r4, [r5, #1]
 800aa1c:	2310      	movs	r3, #16
 800aa1e:	3502      	adds	r5, #2
 800aa20:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800aa24:	f10c 3cff 	add.w	ip, ip, #4294967295
 800aa28:	2200      	movs	r2, #0
 800aa2a:	fbbc f9f3 	udiv	r9, ip, r3
 800aa2e:	4610      	mov	r0, r2
 800aa30:	fb03 ca19 	mls	sl, r3, r9, ip
 800aa34:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800aa38:	2f09      	cmp	r7, #9
 800aa3a:	d81b      	bhi.n	800aa74 <_strtol_l.constprop.0+0xa8>
 800aa3c:	463c      	mov	r4, r7
 800aa3e:	42a3      	cmp	r3, r4
 800aa40:	dd27      	ble.n	800aa92 <_strtol_l.constprop.0+0xc6>
 800aa42:	1c57      	adds	r7, r2, #1
 800aa44:	d007      	beq.n	800aa56 <_strtol_l.constprop.0+0x8a>
 800aa46:	4581      	cmp	r9, r0
 800aa48:	d320      	bcc.n	800aa8c <_strtol_l.constprop.0+0xc0>
 800aa4a:	d101      	bne.n	800aa50 <_strtol_l.constprop.0+0x84>
 800aa4c:	45a2      	cmp	sl, r4
 800aa4e:	db1d      	blt.n	800aa8c <_strtol_l.constprop.0+0xc0>
 800aa50:	fb00 4003 	mla	r0, r0, r3, r4
 800aa54:	2201      	movs	r2, #1
 800aa56:	f815 4b01 	ldrb.w	r4, [r5], #1
 800aa5a:	e7eb      	b.n	800aa34 <_strtol_l.constprop.0+0x68>
 800aa5c:	2c2b      	cmp	r4, #43	@ 0x2b
 800aa5e:	bf04      	itt	eq
 800aa60:	782c      	ldrbeq	r4, [r5, #0]
 800aa62:	1c95      	addeq	r5, r2, #2
 800aa64:	e7cf      	b.n	800aa06 <_strtol_l.constprop.0+0x3a>
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	d1da      	bne.n	800aa20 <_strtol_l.constprop.0+0x54>
 800aa6a:	2c30      	cmp	r4, #48	@ 0x30
 800aa6c:	bf0c      	ite	eq
 800aa6e:	2308      	moveq	r3, #8
 800aa70:	230a      	movne	r3, #10
 800aa72:	e7d5      	b.n	800aa20 <_strtol_l.constprop.0+0x54>
 800aa74:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800aa78:	2f19      	cmp	r7, #25
 800aa7a:	d801      	bhi.n	800aa80 <_strtol_l.constprop.0+0xb4>
 800aa7c:	3c37      	subs	r4, #55	@ 0x37
 800aa7e:	e7de      	b.n	800aa3e <_strtol_l.constprop.0+0x72>
 800aa80:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800aa84:	2f19      	cmp	r7, #25
 800aa86:	d804      	bhi.n	800aa92 <_strtol_l.constprop.0+0xc6>
 800aa88:	3c57      	subs	r4, #87	@ 0x57
 800aa8a:	e7d8      	b.n	800aa3e <_strtol_l.constprop.0+0x72>
 800aa8c:	f04f 32ff 	mov.w	r2, #4294967295
 800aa90:	e7e1      	b.n	800aa56 <_strtol_l.constprop.0+0x8a>
 800aa92:	1c53      	adds	r3, r2, #1
 800aa94:	d108      	bne.n	800aaa8 <_strtol_l.constprop.0+0xdc>
 800aa96:	2322      	movs	r3, #34	@ 0x22
 800aa98:	f8ce 3000 	str.w	r3, [lr]
 800aa9c:	4660      	mov	r0, ip
 800aa9e:	f1b8 0f00 	cmp.w	r8, #0
 800aaa2:	d0a0      	beq.n	800a9e6 <_strtol_l.constprop.0+0x1a>
 800aaa4:	1e69      	subs	r1, r5, #1
 800aaa6:	e006      	b.n	800aab6 <_strtol_l.constprop.0+0xea>
 800aaa8:	b106      	cbz	r6, 800aaac <_strtol_l.constprop.0+0xe0>
 800aaaa:	4240      	negs	r0, r0
 800aaac:	f1b8 0f00 	cmp.w	r8, #0
 800aab0:	d099      	beq.n	800a9e6 <_strtol_l.constprop.0+0x1a>
 800aab2:	2a00      	cmp	r2, #0
 800aab4:	d1f6      	bne.n	800aaa4 <_strtol_l.constprop.0+0xd8>
 800aab6:	f8c8 1000 	str.w	r1, [r8]
 800aaba:	e794      	b.n	800a9e6 <_strtol_l.constprop.0+0x1a>
 800aabc:	08011e41 	.word	0x08011e41

0800aac0 <_strtol_r>:
 800aac0:	f7ff bf84 	b.w	800a9cc <_strtol_l.constprop.0>

0800aac4 <strtol>:
 800aac4:	4613      	mov	r3, r2
 800aac6:	460a      	mov	r2, r1
 800aac8:	4601      	mov	r1, r0
 800aaca:	4802      	ldr	r0, [pc, #8]	@ (800aad4 <strtol+0x10>)
 800aacc:	6800      	ldr	r0, [r0, #0]
 800aace:	f7ff bf7d 	b.w	800a9cc <_strtol_l.constprop.0>
 800aad2:	bf00      	nop
 800aad4:	200001a4 	.word	0x200001a4

0800aad8 <__cvt>:
 800aad8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800aadc:	ec57 6b10 	vmov	r6, r7, d0
 800aae0:	2f00      	cmp	r7, #0
 800aae2:	460c      	mov	r4, r1
 800aae4:	4619      	mov	r1, r3
 800aae6:	463b      	mov	r3, r7
 800aae8:	bfbb      	ittet	lt
 800aaea:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800aaee:	461f      	movlt	r7, r3
 800aaf0:	2300      	movge	r3, #0
 800aaf2:	232d      	movlt	r3, #45	@ 0x2d
 800aaf4:	700b      	strb	r3, [r1, #0]
 800aaf6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800aaf8:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800aafc:	4691      	mov	r9, r2
 800aafe:	f023 0820 	bic.w	r8, r3, #32
 800ab02:	bfbc      	itt	lt
 800ab04:	4632      	movlt	r2, r6
 800ab06:	4616      	movlt	r6, r2
 800ab08:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800ab0c:	d005      	beq.n	800ab1a <__cvt+0x42>
 800ab0e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800ab12:	d100      	bne.n	800ab16 <__cvt+0x3e>
 800ab14:	3401      	adds	r4, #1
 800ab16:	2102      	movs	r1, #2
 800ab18:	e000      	b.n	800ab1c <__cvt+0x44>
 800ab1a:	2103      	movs	r1, #3
 800ab1c:	ab03      	add	r3, sp, #12
 800ab1e:	9301      	str	r3, [sp, #4]
 800ab20:	ab02      	add	r3, sp, #8
 800ab22:	9300      	str	r3, [sp, #0]
 800ab24:	ec47 6b10 	vmov	d0, r6, r7
 800ab28:	4653      	mov	r3, sl
 800ab2a:	4622      	mov	r2, r4
 800ab2c:	f002 f82c 	bl	800cb88 <_dtoa_r>
 800ab30:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800ab34:	4605      	mov	r5, r0
 800ab36:	d119      	bne.n	800ab6c <__cvt+0x94>
 800ab38:	f019 0f01 	tst.w	r9, #1
 800ab3c:	d00e      	beq.n	800ab5c <__cvt+0x84>
 800ab3e:	eb00 0904 	add.w	r9, r0, r4
 800ab42:	2200      	movs	r2, #0
 800ab44:	2300      	movs	r3, #0
 800ab46:	4630      	mov	r0, r6
 800ab48:	4639      	mov	r1, r7
 800ab4a:	f7f5 ffcd 	bl	8000ae8 <__aeabi_dcmpeq>
 800ab4e:	b108      	cbz	r0, 800ab54 <__cvt+0x7c>
 800ab50:	f8cd 900c 	str.w	r9, [sp, #12]
 800ab54:	2230      	movs	r2, #48	@ 0x30
 800ab56:	9b03      	ldr	r3, [sp, #12]
 800ab58:	454b      	cmp	r3, r9
 800ab5a:	d31e      	bcc.n	800ab9a <__cvt+0xc2>
 800ab5c:	9b03      	ldr	r3, [sp, #12]
 800ab5e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ab60:	1b5b      	subs	r3, r3, r5
 800ab62:	4628      	mov	r0, r5
 800ab64:	6013      	str	r3, [r2, #0]
 800ab66:	b004      	add	sp, #16
 800ab68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab6c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800ab70:	eb00 0904 	add.w	r9, r0, r4
 800ab74:	d1e5      	bne.n	800ab42 <__cvt+0x6a>
 800ab76:	7803      	ldrb	r3, [r0, #0]
 800ab78:	2b30      	cmp	r3, #48	@ 0x30
 800ab7a:	d10a      	bne.n	800ab92 <__cvt+0xba>
 800ab7c:	2200      	movs	r2, #0
 800ab7e:	2300      	movs	r3, #0
 800ab80:	4630      	mov	r0, r6
 800ab82:	4639      	mov	r1, r7
 800ab84:	f7f5 ffb0 	bl	8000ae8 <__aeabi_dcmpeq>
 800ab88:	b918      	cbnz	r0, 800ab92 <__cvt+0xba>
 800ab8a:	f1c4 0401 	rsb	r4, r4, #1
 800ab8e:	f8ca 4000 	str.w	r4, [sl]
 800ab92:	f8da 3000 	ldr.w	r3, [sl]
 800ab96:	4499      	add	r9, r3
 800ab98:	e7d3      	b.n	800ab42 <__cvt+0x6a>
 800ab9a:	1c59      	adds	r1, r3, #1
 800ab9c:	9103      	str	r1, [sp, #12]
 800ab9e:	701a      	strb	r2, [r3, #0]
 800aba0:	e7d9      	b.n	800ab56 <__cvt+0x7e>

0800aba2 <__exponent>:
 800aba2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800aba4:	2900      	cmp	r1, #0
 800aba6:	bfba      	itte	lt
 800aba8:	4249      	neglt	r1, r1
 800abaa:	232d      	movlt	r3, #45	@ 0x2d
 800abac:	232b      	movge	r3, #43	@ 0x2b
 800abae:	2909      	cmp	r1, #9
 800abb0:	7002      	strb	r2, [r0, #0]
 800abb2:	7043      	strb	r3, [r0, #1]
 800abb4:	dd29      	ble.n	800ac0a <__exponent+0x68>
 800abb6:	f10d 0307 	add.w	r3, sp, #7
 800abba:	461d      	mov	r5, r3
 800abbc:	270a      	movs	r7, #10
 800abbe:	461a      	mov	r2, r3
 800abc0:	fbb1 f6f7 	udiv	r6, r1, r7
 800abc4:	fb07 1416 	mls	r4, r7, r6, r1
 800abc8:	3430      	adds	r4, #48	@ 0x30
 800abca:	f802 4c01 	strb.w	r4, [r2, #-1]
 800abce:	460c      	mov	r4, r1
 800abd0:	2c63      	cmp	r4, #99	@ 0x63
 800abd2:	f103 33ff 	add.w	r3, r3, #4294967295
 800abd6:	4631      	mov	r1, r6
 800abd8:	dcf1      	bgt.n	800abbe <__exponent+0x1c>
 800abda:	3130      	adds	r1, #48	@ 0x30
 800abdc:	1e94      	subs	r4, r2, #2
 800abde:	f803 1c01 	strb.w	r1, [r3, #-1]
 800abe2:	1c41      	adds	r1, r0, #1
 800abe4:	4623      	mov	r3, r4
 800abe6:	42ab      	cmp	r3, r5
 800abe8:	d30a      	bcc.n	800ac00 <__exponent+0x5e>
 800abea:	f10d 0309 	add.w	r3, sp, #9
 800abee:	1a9b      	subs	r3, r3, r2
 800abf0:	42ac      	cmp	r4, r5
 800abf2:	bf88      	it	hi
 800abf4:	2300      	movhi	r3, #0
 800abf6:	3302      	adds	r3, #2
 800abf8:	4403      	add	r3, r0
 800abfa:	1a18      	subs	r0, r3, r0
 800abfc:	b003      	add	sp, #12
 800abfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ac00:	f813 6b01 	ldrb.w	r6, [r3], #1
 800ac04:	f801 6f01 	strb.w	r6, [r1, #1]!
 800ac08:	e7ed      	b.n	800abe6 <__exponent+0x44>
 800ac0a:	2330      	movs	r3, #48	@ 0x30
 800ac0c:	3130      	adds	r1, #48	@ 0x30
 800ac0e:	7083      	strb	r3, [r0, #2]
 800ac10:	70c1      	strb	r1, [r0, #3]
 800ac12:	1d03      	adds	r3, r0, #4
 800ac14:	e7f1      	b.n	800abfa <__exponent+0x58>
	...

0800ac18 <_printf_float>:
 800ac18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac1c:	b08d      	sub	sp, #52	@ 0x34
 800ac1e:	460c      	mov	r4, r1
 800ac20:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800ac24:	4616      	mov	r6, r2
 800ac26:	461f      	mov	r7, r3
 800ac28:	4605      	mov	r5, r0
 800ac2a:	f001 fe1b 	bl	800c864 <_localeconv_r>
 800ac2e:	6803      	ldr	r3, [r0, #0]
 800ac30:	9304      	str	r3, [sp, #16]
 800ac32:	4618      	mov	r0, r3
 800ac34:	f7f5 fb2c 	bl	8000290 <strlen>
 800ac38:	2300      	movs	r3, #0
 800ac3a:	930a      	str	r3, [sp, #40]	@ 0x28
 800ac3c:	f8d8 3000 	ldr.w	r3, [r8]
 800ac40:	9005      	str	r0, [sp, #20]
 800ac42:	3307      	adds	r3, #7
 800ac44:	f023 0307 	bic.w	r3, r3, #7
 800ac48:	f103 0208 	add.w	r2, r3, #8
 800ac4c:	f894 a018 	ldrb.w	sl, [r4, #24]
 800ac50:	f8d4 b000 	ldr.w	fp, [r4]
 800ac54:	f8c8 2000 	str.w	r2, [r8]
 800ac58:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ac5c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800ac60:	9307      	str	r3, [sp, #28]
 800ac62:	f8cd 8018 	str.w	r8, [sp, #24]
 800ac66:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800ac6a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ac6e:	4b9c      	ldr	r3, [pc, #624]	@ (800aee0 <_printf_float+0x2c8>)
 800ac70:	f04f 32ff 	mov.w	r2, #4294967295
 800ac74:	f7f5 ff6a 	bl	8000b4c <__aeabi_dcmpun>
 800ac78:	bb70      	cbnz	r0, 800acd8 <_printf_float+0xc0>
 800ac7a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ac7e:	4b98      	ldr	r3, [pc, #608]	@ (800aee0 <_printf_float+0x2c8>)
 800ac80:	f04f 32ff 	mov.w	r2, #4294967295
 800ac84:	f7f5 ff44 	bl	8000b10 <__aeabi_dcmple>
 800ac88:	bb30      	cbnz	r0, 800acd8 <_printf_float+0xc0>
 800ac8a:	2200      	movs	r2, #0
 800ac8c:	2300      	movs	r3, #0
 800ac8e:	4640      	mov	r0, r8
 800ac90:	4649      	mov	r1, r9
 800ac92:	f7f5 ff33 	bl	8000afc <__aeabi_dcmplt>
 800ac96:	b110      	cbz	r0, 800ac9e <_printf_float+0x86>
 800ac98:	232d      	movs	r3, #45	@ 0x2d
 800ac9a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ac9e:	4a91      	ldr	r2, [pc, #580]	@ (800aee4 <_printf_float+0x2cc>)
 800aca0:	4b91      	ldr	r3, [pc, #580]	@ (800aee8 <_printf_float+0x2d0>)
 800aca2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800aca6:	bf94      	ite	ls
 800aca8:	4690      	movls	r8, r2
 800acaa:	4698      	movhi	r8, r3
 800acac:	2303      	movs	r3, #3
 800acae:	6123      	str	r3, [r4, #16]
 800acb0:	f02b 0304 	bic.w	r3, fp, #4
 800acb4:	6023      	str	r3, [r4, #0]
 800acb6:	f04f 0900 	mov.w	r9, #0
 800acba:	9700      	str	r7, [sp, #0]
 800acbc:	4633      	mov	r3, r6
 800acbe:	aa0b      	add	r2, sp, #44	@ 0x2c
 800acc0:	4621      	mov	r1, r4
 800acc2:	4628      	mov	r0, r5
 800acc4:	f000 f9d2 	bl	800b06c <_printf_common>
 800acc8:	3001      	adds	r0, #1
 800acca:	f040 808d 	bne.w	800ade8 <_printf_float+0x1d0>
 800acce:	f04f 30ff 	mov.w	r0, #4294967295
 800acd2:	b00d      	add	sp, #52	@ 0x34
 800acd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800acd8:	4642      	mov	r2, r8
 800acda:	464b      	mov	r3, r9
 800acdc:	4640      	mov	r0, r8
 800acde:	4649      	mov	r1, r9
 800ace0:	f7f5 ff34 	bl	8000b4c <__aeabi_dcmpun>
 800ace4:	b140      	cbz	r0, 800acf8 <_printf_float+0xe0>
 800ace6:	464b      	mov	r3, r9
 800ace8:	2b00      	cmp	r3, #0
 800acea:	bfbc      	itt	lt
 800acec:	232d      	movlt	r3, #45	@ 0x2d
 800acee:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800acf2:	4a7e      	ldr	r2, [pc, #504]	@ (800aeec <_printf_float+0x2d4>)
 800acf4:	4b7e      	ldr	r3, [pc, #504]	@ (800aef0 <_printf_float+0x2d8>)
 800acf6:	e7d4      	b.n	800aca2 <_printf_float+0x8a>
 800acf8:	6863      	ldr	r3, [r4, #4]
 800acfa:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800acfe:	9206      	str	r2, [sp, #24]
 800ad00:	1c5a      	adds	r2, r3, #1
 800ad02:	d13b      	bne.n	800ad7c <_printf_float+0x164>
 800ad04:	2306      	movs	r3, #6
 800ad06:	6063      	str	r3, [r4, #4]
 800ad08:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800ad0c:	2300      	movs	r3, #0
 800ad0e:	6022      	str	r2, [r4, #0]
 800ad10:	9303      	str	r3, [sp, #12]
 800ad12:	ab0a      	add	r3, sp, #40	@ 0x28
 800ad14:	e9cd a301 	strd	sl, r3, [sp, #4]
 800ad18:	ab09      	add	r3, sp, #36	@ 0x24
 800ad1a:	9300      	str	r3, [sp, #0]
 800ad1c:	6861      	ldr	r1, [r4, #4]
 800ad1e:	ec49 8b10 	vmov	d0, r8, r9
 800ad22:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800ad26:	4628      	mov	r0, r5
 800ad28:	f7ff fed6 	bl	800aad8 <__cvt>
 800ad2c:	9b06      	ldr	r3, [sp, #24]
 800ad2e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ad30:	2b47      	cmp	r3, #71	@ 0x47
 800ad32:	4680      	mov	r8, r0
 800ad34:	d129      	bne.n	800ad8a <_printf_float+0x172>
 800ad36:	1cc8      	adds	r0, r1, #3
 800ad38:	db02      	blt.n	800ad40 <_printf_float+0x128>
 800ad3a:	6863      	ldr	r3, [r4, #4]
 800ad3c:	4299      	cmp	r1, r3
 800ad3e:	dd41      	ble.n	800adc4 <_printf_float+0x1ac>
 800ad40:	f1aa 0a02 	sub.w	sl, sl, #2
 800ad44:	fa5f fa8a 	uxtb.w	sl, sl
 800ad48:	3901      	subs	r1, #1
 800ad4a:	4652      	mov	r2, sl
 800ad4c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800ad50:	9109      	str	r1, [sp, #36]	@ 0x24
 800ad52:	f7ff ff26 	bl	800aba2 <__exponent>
 800ad56:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ad58:	1813      	adds	r3, r2, r0
 800ad5a:	2a01      	cmp	r2, #1
 800ad5c:	4681      	mov	r9, r0
 800ad5e:	6123      	str	r3, [r4, #16]
 800ad60:	dc02      	bgt.n	800ad68 <_printf_float+0x150>
 800ad62:	6822      	ldr	r2, [r4, #0]
 800ad64:	07d2      	lsls	r2, r2, #31
 800ad66:	d501      	bpl.n	800ad6c <_printf_float+0x154>
 800ad68:	3301      	adds	r3, #1
 800ad6a:	6123      	str	r3, [r4, #16]
 800ad6c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	d0a2      	beq.n	800acba <_printf_float+0xa2>
 800ad74:	232d      	movs	r3, #45	@ 0x2d
 800ad76:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ad7a:	e79e      	b.n	800acba <_printf_float+0xa2>
 800ad7c:	9a06      	ldr	r2, [sp, #24]
 800ad7e:	2a47      	cmp	r2, #71	@ 0x47
 800ad80:	d1c2      	bne.n	800ad08 <_printf_float+0xf0>
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	d1c0      	bne.n	800ad08 <_printf_float+0xf0>
 800ad86:	2301      	movs	r3, #1
 800ad88:	e7bd      	b.n	800ad06 <_printf_float+0xee>
 800ad8a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800ad8e:	d9db      	bls.n	800ad48 <_printf_float+0x130>
 800ad90:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800ad94:	d118      	bne.n	800adc8 <_printf_float+0x1b0>
 800ad96:	2900      	cmp	r1, #0
 800ad98:	6863      	ldr	r3, [r4, #4]
 800ad9a:	dd0b      	ble.n	800adb4 <_printf_float+0x19c>
 800ad9c:	6121      	str	r1, [r4, #16]
 800ad9e:	b913      	cbnz	r3, 800ada6 <_printf_float+0x18e>
 800ada0:	6822      	ldr	r2, [r4, #0]
 800ada2:	07d0      	lsls	r0, r2, #31
 800ada4:	d502      	bpl.n	800adac <_printf_float+0x194>
 800ada6:	3301      	adds	r3, #1
 800ada8:	440b      	add	r3, r1
 800adaa:	6123      	str	r3, [r4, #16]
 800adac:	65a1      	str	r1, [r4, #88]	@ 0x58
 800adae:	f04f 0900 	mov.w	r9, #0
 800adb2:	e7db      	b.n	800ad6c <_printf_float+0x154>
 800adb4:	b913      	cbnz	r3, 800adbc <_printf_float+0x1a4>
 800adb6:	6822      	ldr	r2, [r4, #0]
 800adb8:	07d2      	lsls	r2, r2, #31
 800adba:	d501      	bpl.n	800adc0 <_printf_float+0x1a8>
 800adbc:	3302      	adds	r3, #2
 800adbe:	e7f4      	b.n	800adaa <_printf_float+0x192>
 800adc0:	2301      	movs	r3, #1
 800adc2:	e7f2      	b.n	800adaa <_printf_float+0x192>
 800adc4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800adc8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800adca:	4299      	cmp	r1, r3
 800adcc:	db05      	blt.n	800adda <_printf_float+0x1c2>
 800adce:	6823      	ldr	r3, [r4, #0]
 800add0:	6121      	str	r1, [r4, #16]
 800add2:	07d8      	lsls	r0, r3, #31
 800add4:	d5ea      	bpl.n	800adac <_printf_float+0x194>
 800add6:	1c4b      	adds	r3, r1, #1
 800add8:	e7e7      	b.n	800adaa <_printf_float+0x192>
 800adda:	2900      	cmp	r1, #0
 800addc:	bfd4      	ite	le
 800adde:	f1c1 0202 	rsble	r2, r1, #2
 800ade2:	2201      	movgt	r2, #1
 800ade4:	4413      	add	r3, r2
 800ade6:	e7e0      	b.n	800adaa <_printf_float+0x192>
 800ade8:	6823      	ldr	r3, [r4, #0]
 800adea:	055a      	lsls	r2, r3, #21
 800adec:	d407      	bmi.n	800adfe <_printf_float+0x1e6>
 800adee:	6923      	ldr	r3, [r4, #16]
 800adf0:	4642      	mov	r2, r8
 800adf2:	4631      	mov	r1, r6
 800adf4:	4628      	mov	r0, r5
 800adf6:	47b8      	blx	r7
 800adf8:	3001      	adds	r0, #1
 800adfa:	d12b      	bne.n	800ae54 <_printf_float+0x23c>
 800adfc:	e767      	b.n	800acce <_printf_float+0xb6>
 800adfe:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800ae02:	f240 80dd 	bls.w	800afc0 <_printf_float+0x3a8>
 800ae06:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800ae0a:	2200      	movs	r2, #0
 800ae0c:	2300      	movs	r3, #0
 800ae0e:	f7f5 fe6b 	bl	8000ae8 <__aeabi_dcmpeq>
 800ae12:	2800      	cmp	r0, #0
 800ae14:	d033      	beq.n	800ae7e <_printf_float+0x266>
 800ae16:	4a37      	ldr	r2, [pc, #220]	@ (800aef4 <_printf_float+0x2dc>)
 800ae18:	2301      	movs	r3, #1
 800ae1a:	4631      	mov	r1, r6
 800ae1c:	4628      	mov	r0, r5
 800ae1e:	47b8      	blx	r7
 800ae20:	3001      	adds	r0, #1
 800ae22:	f43f af54 	beq.w	800acce <_printf_float+0xb6>
 800ae26:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800ae2a:	4543      	cmp	r3, r8
 800ae2c:	db02      	blt.n	800ae34 <_printf_float+0x21c>
 800ae2e:	6823      	ldr	r3, [r4, #0]
 800ae30:	07d8      	lsls	r0, r3, #31
 800ae32:	d50f      	bpl.n	800ae54 <_printf_float+0x23c>
 800ae34:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ae38:	4631      	mov	r1, r6
 800ae3a:	4628      	mov	r0, r5
 800ae3c:	47b8      	blx	r7
 800ae3e:	3001      	adds	r0, #1
 800ae40:	f43f af45 	beq.w	800acce <_printf_float+0xb6>
 800ae44:	f04f 0900 	mov.w	r9, #0
 800ae48:	f108 38ff 	add.w	r8, r8, #4294967295
 800ae4c:	f104 0a1a 	add.w	sl, r4, #26
 800ae50:	45c8      	cmp	r8, r9
 800ae52:	dc09      	bgt.n	800ae68 <_printf_float+0x250>
 800ae54:	6823      	ldr	r3, [r4, #0]
 800ae56:	079b      	lsls	r3, r3, #30
 800ae58:	f100 8103 	bmi.w	800b062 <_printf_float+0x44a>
 800ae5c:	68e0      	ldr	r0, [r4, #12]
 800ae5e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ae60:	4298      	cmp	r0, r3
 800ae62:	bfb8      	it	lt
 800ae64:	4618      	movlt	r0, r3
 800ae66:	e734      	b.n	800acd2 <_printf_float+0xba>
 800ae68:	2301      	movs	r3, #1
 800ae6a:	4652      	mov	r2, sl
 800ae6c:	4631      	mov	r1, r6
 800ae6e:	4628      	mov	r0, r5
 800ae70:	47b8      	blx	r7
 800ae72:	3001      	adds	r0, #1
 800ae74:	f43f af2b 	beq.w	800acce <_printf_float+0xb6>
 800ae78:	f109 0901 	add.w	r9, r9, #1
 800ae7c:	e7e8      	b.n	800ae50 <_printf_float+0x238>
 800ae7e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	dc39      	bgt.n	800aef8 <_printf_float+0x2e0>
 800ae84:	4a1b      	ldr	r2, [pc, #108]	@ (800aef4 <_printf_float+0x2dc>)
 800ae86:	2301      	movs	r3, #1
 800ae88:	4631      	mov	r1, r6
 800ae8a:	4628      	mov	r0, r5
 800ae8c:	47b8      	blx	r7
 800ae8e:	3001      	adds	r0, #1
 800ae90:	f43f af1d 	beq.w	800acce <_printf_float+0xb6>
 800ae94:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800ae98:	ea59 0303 	orrs.w	r3, r9, r3
 800ae9c:	d102      	bne.n	800aea4 <_printf_float+0x28c>
 800ae9e:	6823      	ldr	r3, [r4, #0]
 800aea0:	07d9      	lsls	r1, r3, #31
 800aea2:	d5d7      	bpl.n	800ae54 <_printf_float+0x23c>
 800aea4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800aea8:	4631      	mov	r1, r6
 800aeaa:	4628      	mov	r0, r5
 800aeac:	47b8      	blx	r7
 800aeae:	3001      	adds	r0, #1
 800aeb0:	f43f af0d 	beq.w	800acce <_printf_float+0xb6>
 800aeb4:	f04f 0a00 	mov.w	sl, #0
 800aeb8:	f104 0b1a 	add.w	fp, r4, #26
 800aebc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aebe:	425b      	negs	r3, r3
 800aec0:	4553      	cmp	r3, sl
 800aec2:	dc01      	bgt.n	800aec8 <_printf_float+0x2b0>
 800aec4:	464b      	mov	r3, r9
 800aec6:	e793      	b.n	800adf0 <_printf_float+0x1d8>
 800aec8:	2301      	movs	r3, #1
 800aeca:	465a      	mov	r2, fp
 800aecc:	4631      	mov	r1, r6
 800aece:	4628      	mov	r0, r5
 800aed0:	47b8      	blx	r7
 800aed2:	3001      	adds	r0, #1
 800aed4:	f43f aefb 	beq.w	800acce <_printf_float+0xb6>
 800aed8:	f10a 0a01 	add.w	sl, sl, #1
 800aedc:	e7ee      	b.n	800aebc <_printf_float+0x2a4>
 800aede:	bf00      	nop
 800aee0:	7fefffff 	.word	0x7fefffff
 800aee4:	08011f41 	.word	0x08011f41
 800aee8:	08011f45 	.word	0x08011f45
 800aeec:	08011f49 	.word	0x08011f49
 800aef0:	08011f4d 	.word	0x08011f4d
 800aef4:	08012297 	.word	0x08012297
 800aef8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800aefa:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800aefe:	4553      	cmp	r3, sl
 800af00:	bfa8      	it	ge
 800af02:	4653      	movge	r3, sl
 800af04:	2b00      	cmp	r3, #0
 800af06:	4699      	mov	r9, r3
 800af08:	dc36      	bgt.n	800af78 <_printf_float+0x360>
 800af0a:	f04f 0b00 	mov.w	fp, #0
 800af0e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800af12:	f104 021a 	add.w	r2, r4, #26
 800af16:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800af18:	9306      	str	r3, [sp, #24]
 800af1a:	eba3 0309 	sub.w	r3, r3, r9
 800af1e:	455b      	cmp	r3, fp
 800af20:	dc31      	bgt.n	800af86 <_printf_float+0x36e>
 800af22:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800af24:	459a      	cmp	sl, r3
 800af26:	dc3a      	bgt.n	800af9e <_printf_float+0x386>
 800af28:	6823      	ldr	r3, [r4, #0]
 800af2a:	07da      	lsls	r2, r3, #31
 800af2c:	d437      	bmi.n	800af9e <_printf_float+0x386>
 800af2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800af30:	ebaa 0903 	sub.w	r9, sl, r3
 800af34:	9b06      	ldr	r3, [sp, #24]
 800af36:	ebaa 0303 	sub.w	r3, sl, r3
 800af3a:	4599      	cmp	r9, r3
 800af3c:	bfa8      	it	ge
 800af3e:	4699      	movge	r9, r3
 800af40:	f1b9 0f00 	cmp.w	r9, #0
 800af44:	dc33      	bgt.n	800afae <_printf_float+0x396>
 800af46:	f04f 0800 	mov.w	r8, #0
 800af4a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800af4e:	f104 0b1a 	add.w	fp, r4, #26
 800af52:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800af54:	ebaa 0303 	sub.w	r3, sl, r3
 800af58:	eba3 0309 	sub.w	r3, r3, r9
 800af5c:	4543      	cmp	r3, r8
 800af5e:	f77f af79 	ble.w	800ae54 <_printf_float+0x23c>
 800af62:	2301      	movs	r3, #1
 800af64:	465a      	mov	r2, fp
 800af66:	4631      	mov	r1, r6
 800af68:	4628      	mov	r0, r5
 800af6a:	47b8      	blx	r7
 800af6c:	3001      	adds	r0, #1
 800af6e:	f43f aeae 	beq.w	800acce <_printf_float+0xb6>
 800af72:	f108 0801 	add.w	r8, r8, #1
 800af76:	e7ec      	b.n	800af52 <_printf_float+0x33a>
 800af78:	4642      	mov	r2, r8
 800af7a:	4631      	mov	r1, r6
 800af7c:	4628      	mov	r0, r5
 800af7e:	47b8      	blx	r7
 800af80:	3001      	adds	r0, #1
 800af82:	d1c2      	bne.n	800af0a <_printf_float+0x2f2>
 800af84:	e6a3      	b.n	800acce <_printf_float+0xb6>
 800af86:	2301      	movs	r3, #1
 800af88:	4631      	mov	r1, r6
 800af8a:	4628      	mov	r0, r5
 800af8c:	9206      	str	r2, [sp, #24]
 800af8e:	47b8      	blx	r7
 800af90:	3001      	adds	r0, #1
 800af92:	f43f ae9c 	beq.w	800acce <_printf_float+0xb6>
 800af96:	9a06      	ldr	r2, [sp, #24]
 800af98:	f10b 0b01 	add.w	fp, fp, #1
 800af9c:	e7bb      	b.n	800af16 <_printf_float+0x2fe>
 800af9e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800afa2:	4631      	mov	r1, r6
 800afa4:	4628      	mov	r0, r5
 800afa6:	47b8      	blx	r7
 800afa8:	3001      	adds	r0, #1
 800afaa:	d1c0      	bne.n	800af2e <_printf_float+0x316>
 800afac:	e68f      	b.n	800acce <_printf_float+0xb6>
 800afae:	9a06      	ldr	r2, [sp, #24]
 800afb0:	464b      	mov	r3, r9
 800afb2:	4442      	add	r2, r8
 800afb4:	4631      	mov	r1, r6
 800afb6:	4628      	mov	r0, r5
 800afb8:	47b8      	blx	r7
 800afba:	3001      	adds	r0, #1
 800afbc:	d1c3      	bne.n	800af46 <_printf_float+0x32e>
 800afbe:	e686      	b.n	800acce <_printf_float+0xb6>
 800afc0:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800afc4:	f1ba 0f01 	cmp.w	sl, #1
 800afc8:	dc01      	bgt.n	800afce <_printf_float+0x3b6>
 800afca:	07db      	lsls	r3, r3, #31
 800afcc:	d536      	bpl.n	800b03c <_printf_float+0x424>
 800afce:	2301      	movs	r3, #1
 800afd0:	4642      	mov	r2, r8
 800afd2:	4631      	mov	r1, r6
 800afd4:	4628      	mov	r0, r5
 800afd6:	47b8      	blx	r7
 800afd8:	3001      	adds	r0, #1
 800afda:	f43f ae78 	beq.w	800acce <_printf_float+0xb6>
 800afde:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800afe2:	4631      	mov	r1, r6
 800afe4:	4628      	mov	r0, r5
 800afe6:	47b8      	blx	r7
 800afe8:	3001      	adds	r0, #1
 800afea:	f43f ae70 	beq.w	800acce <_printf_float+0xb6>
 800afee:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800aff2:	2200      	movs	r2, #0
 800aff4:	2300      	movs	r3, #0
 800aff6:	f10a 3aff 	add.w	sl, sl, #4294967295
 800affa:	f7f5 fd75 	bl	8000ae8 <__aeabi_dcmpeq>
 800affe:	b9c0      	cbnz	r0, 800b032 <_printf_float+0x41a>
 800b000:	4653      	mov	r3, sl
 800b002:	f108 0201 	add.w	r2, r8, #1
 800b006:	4631      	mov	r1, r6
 800b008:	4628      	mov	r0, r5
 800b00a:	47b8      	blx	r7
 800b00c:	3001      	adds	r0, #1
 800b00e:	d10c      	bne.n	800b02a <_printf_float+0x412>
 800b010:	e65d      	b.n	800acce <_printf_float+0xb6>
 800b012:	2301      	movs	r3, #1
 800b014:	465a      	mov	r2, fp
 800b016:	4631      	mov	r1, r6
 800b018:	4628      	mov	r0, r5
 800b01a:	47b8      	blx	r7
 800b01c:	3001      	adds	r0, #1
 800b01e:	f43f ae56 	beq.w	800acce <_printf_float+0xb6>
 800b022:	f108 0801 	add.w	r8, r8, #1
 800b026:	45d0      	cmp	r8, sl
 800b028:	dbf3      	blt.n	800b012 <_printf_float+0x3fa>
 800b02a:	464b      	mov	r3, r9
 800b02c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800b030:	e6df      	b.n	800adf2 <_printf_float+0x1da>
 800b032:	f04f 0800 	mov.w	r8, #0
 800b036:	f104 0b1a 	add.w	fp, r4, #26
 800b03a:	e7f4      	b.n	800b026 <_printf_float+0x40e>
 800b03c:	2301      	movs	r3, #1
 800b03e:	4642      	mov	r2, r8
 800b040:	e7e1      	b.n	800b006 <_printf_float+0x3ee>
 800b042:	2301      	movs	r3, #1
 800b044:	464a      	mov	r2, r9
 800b046:	4631      	mov	r1, r6
 800b048:	4628      	mov	r0, r5
 800b04a:	47b8      	blx	r7
 800b04c:	3001      	adds	r0, #1
 800b04e:	f43f ae3e 	beq.w	800acce <_printf_float+0xb6>
 800b052:	f108 0801 	add.w	r8, r8, #1
 800b056:	68e3      	ldr	r3, [r4, #12]
 800b058:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b05a:	1a5b      	subs	r3, r3, r1
 800b05c:	4543      	cmp	r3, r8
 800b05e:	dcf0      	bgt.n	800b042 <_printf_float+0x42a>
 800b060:	e6fc      	b.n	800ae5c <_printf_float+0x244>
 800b062:	f04f 0800 	mov.w	r8, #0
 800b066:	f104 0919 	add.w	r9, r4, #25
 800b06a:	e7f4      	b.n	800b056 <_printf_float+0x43e>

0800b06c <_printf_common>:
 800b06c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b070:	4616      	mov	r6, r2
 800b072:	4698      	mov	r8, r3
 800b074:	688a      	ldr	r2, [r1, #8]
 800b076:	690b      	ldr	r3, [r1, #16]
 800b078:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b07c:	4293      	cmp	r3, r2
 800b07e:	bfb8      	it	lt
 800b080:	4613      	movlt	r3, r2
 800b082:	6033      	str	r3, [r6, #0]
 800b084:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b088:	4607      	mov	r7, r0
 800b08a:	460c      	mov	r4, r1
 800b08c:	b10a      	cbz	r2, 800b092 <_printf_common+0x26>
 800b08e:	3301      	adds	r3, #1
 800b090:	6033      	str	r3, [r6, #0]
 800b092:	6823      	ldr	r3, [r4, #0]
 800b094:	0699      	lsls	r1, r3, #26
 800b096:	bf42      	ittt	mi
 800b098:	6833      	ldrmi	r3, [r6, #0]
 800b09a:	3302      	addmi	r3, #2
 800b09c:	6033      	strmi	r3, [r6, #0]
 800b09e:	6825      	ldr	r5, [r4, #0]
 800b0a0:	f015 0506 	ands.w	r5, r5, #6
 800b0a4:	d106      	bne.n	800b0b4 <_printf_common+0x48>
 800b0a6:	f104 0a19 	add.w	sl, r4, #25
 800b0aa:	68e3      	ldr	r3, [r4, #12]
 800b0ac:	6832      	ldr	r2, [r6, #0]
 800b0ae:	1a9b      	subs	r3, r3, r2
 800b0b0:	42ab      	cmp	r3, r5
 800b0b2:	dc26      	bgt.n	800b102 <_printf_common+0x96>
 800b0b4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b0b8:	6822      	ldr	r2, [r4, #0]
 800b0ba:	3b00      	subs	r3, #0
 800b0bc:	bf18      	it	ne
 800b0be:	2301      	movne	r3, #1
 800b0c0:	0692      	lsls	r2, r2, #26
 800b0c2:	d42b      	bmi.n	800b11c <_printf_common+0xb0>
 800b0c4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b0c8:	4641      	mov	r1, r8
 800b0ca:	4638      	mov	r0, r7
 800b0cc:	47c8      	blx	r9
 800b0ce:	3001      	adds	r0, #1
 800b0d0:	d01e      	beq.n	800b110 <_printf_common+0xa4>
 800b0d2:	6823      	ldr	r3, [r4, #0]
 800b0d4:	6922      	ldr	r2, [r4, #16]
 800b0d6:	f003 0306 	and.w	r3, r3, #6
 800b0da:	2b04      	cmp	r3, #4
 800b0dc:	bf02      	ittt	eq
 800b0de:	68e5      	ldreq	r5, [r4, #12]
 800b0e0:	6833      	ldreq	r3, [r6, #0]
 800b0e2:	1aed      	subeq	r5, r5, r3
 800b0e4:	68a3      	ldr	r3, [r4, #8]
 800b0e6:	bf0c      	ite	eq
 800b0e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b0ec:	2500      	movne	r5, #0
 800b0ee:	4293      	cmp	r3, r2
 800b0f0:	bfc4      	itt	gt
 800b0f2:	1a9b      	subgt	r3, r3, r2
 800b0f4:	18ed      	addgt	r5, r5, r3
 800b0f6:	2600      	movs	r6, #0
 800b0f8:	341a      	adds	r4, #26
 800b0fa:	42b5      	cmp	r5, r6
 800b0fc:	d11a      	bne.n	800b134 <_printf_common+0xc8>
 800b0fe:	2000      	movs	r0, #0
 800b100:	e008      	b.n	800b114 <_printf_common+0xa8>
 800b102:	2301      	movs	r3, #1
 800b104:	4652      	mov	r2, sl
 800b106:	4641      	mov	r1, r8
 800b108:	4638      	mov	r0, r7
 800b10a:	47c8      	blx	r9
 800b10c:	3001      	adds	r0, #1
 800b10e:	d103      	bne.n	800b118 <_printf_common+0xac>
 800b110:	f04f 30ff 	mov.w	r0, #4294967295
 800b114:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b118:	3501      	adds	r5, #1
 800b11a:	e7c6      	b.n	800b0aa <_printf_common+0x3e>
 800b11c:	18e1      	adds	r1, r4, r3
 800b11e:	1c5a      	adds	r2, r3, #1
 800b120:	2030      	movs	r0, #48	@ 0x30
 800b122:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b126:	4422      	add	r2, r4
 800b128:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b12c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b130:	3302      	adds	r3, #2
 800b132:	e7c7      	b.n	800b0c4 <_printf_common+0x58>
 800b134:	2301      	movs	r3, #1
 800b136:	4622      	mov	r2, r4
 800b138:	4641      	mov	r1, r8
 800b13a:	4638      	mov	r0, r7
 800b13c:	47c8      	blx	r9
 800b13e:	3001      	adds	r0, #1
 800b140:	d0e6      	beq.n	800b110 <_printf_common+0xa4>
 800b142:	3601      	adds	r6, #1
 800b144:	e7d9      	b.n	800b0fa <_printf_common+0x8e>
	...

0800b148 <_printf_i>:
 800b148:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b14c:	7e0f      	ldrb	r7, [r1, #24]
 800b14e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b150:	2f78      	cmp	r7, #120	@ 0x78
 800b152:	4691      	mov	r9, r2
 800b154:	4680      	mov	r8, r0
 800b156:	460c      	mov	r4, r1
 800b158:	469a      	mov	sl, r3
 800b15a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b15e:	d807      	bhi.n	800b170 <_printf_i+0x28>
 800b160:	2f62      	cmp	r7, #98	@ 0x62
 800b162:	d80a      	bhi.n	800b17a <_printf_i+0x32>
 800b164:	2f00      	cmp	r7, #0
 800b166:	f000 80d2 	beq.w	800b30e <_printf_i+0x1c6>
 800b16a:	2f58      	cmp	r7, #88	@ 0x58
 800b16c:	f000 80b9 	beq.w	800b2e2 <_printf_i+0x19a>
 800b170:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b174:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b178:	e03a      	b.n	800b1f0 <_printf_i+0xa8>
 800b17a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b17e:	2b15      	cmp	r3, #21
 800b180:	d8f6      	bhi.n	800b170 <_printf_i+0x28>
 800b182:	a101      	add	r1, pc, #4	@ (adr r1, 800b188 <_printf_i+0x40>)
 800b184:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b188:	0800b1e1 	.word	0x0800b1e1
 800b18c:	0800b1f5 	.word	0x0800b1f5
 800b190:	0800b171 	.word	0x0800b171
 800b194:	0800b171 	.word	0x0800b171
 800b198:	0800b171 	.word	0x0800b171
 800b19c:	0800b171 	.word	0x0800b171
 800b1a0:	0800b1f5 	.word	0x0800b1f5
 800b1a4:	0800b171 	.word	0x0800b171
 800b1a8:	0800b171 	.word	0x0800b171
 800b1ac:	0800b171 	.word	0x0800b171
 800b1b0:	0800b171 	.word	0x0800b171
 800b1b4:	0800b2f5 	.word	0x0800b2f5
 800b1b8:	0800b21f 	.word	0x0800b21f
 800b1bc:	0800b2af 	.word	0x0800b2af
 800b1c0:	0800b171 	.word	0x0800b171
 800b1c4:	0800b171 	.word	0x0800b171
 800b1c8:	0800b317 	.word	0x0800b317
 800b1cc:	0800b171 	.word	0x0800b171
 800b1d0:	0800b21f 	.word	0x0800b21f
 800b1d4:	0800b171 	.word	0x0800b171
 800b1d8:	0800b171 	.word	0x0800b171
 800b1dc:	0800b2b7 	.word	0x0800b2b7
 800b1e0:	6833      	ldr	r3, [r6, #0]
 800b1e2:	1d1a      	adds	r2, r3, #4
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	6032      	str	r2, [r6, #0]
 800b1e8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b1ec:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b1f0:	2301      	movs	r3, #1
 800b1f2:	e09d      	b.n	800b330 <_printf_i+0x1e8>
 800b1f4:	6833      	ldr	r3, [r6, #0]
 800b1f6:	6820      	ldr	r0, [r4, #0]
 800b1f8:	1d19      	adds	r1, r3, #4
 800b1fa:	6031      	str	r1, [r6, #0]
 800b1fc:	0606      	lsls	r6, r0, #24
 800b1fe:	d501      	bpl.n	800b204 <_printf_i+0xbc>
 800b200:	681d      	ldr	r5, [r3, #0]
 800b202:	e003      	b.n	800b20c <_printf_i+0xc4>
 800b204:	0645      	lsls	r5, r0, #25
 800b206:	d5fb      	bpl.n	800b200 <_printf_i+0xb8>
 800b208:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b20c:	2d00      	cmp	r5, #0
 800b20e:	da03      	bge.n	800b218 <_printf_i+0xd0>
 800b210:	232d      	movs	r3, #45	@ 0x2d
 800b212:	426d      	negs	r5, r5
 800b214:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b218:	4859      	ldr	r0, [pc, #356]	@ (800b380 <_printf_i+0x238>)
 800b21a:	230a      	movs	r3, #10
 800b21c:	e011      	b.n	800b242 <_printf_i+0xfa>
 800b21e:	6821      	ldr	r1, [r4, #0]
 800b220:	6833      	ldr	r3, [r6, #0]
 800b222:	0608      	lsls	r0, r1, #24
 800b224:	f853 5b04 	ldr.w	r5, [r3], #4
 800b228:	d402      	bmi.n	800b230 <_printf_i+0xe8>
 800b22a:	0649      	lsls	r1, r1, #25
 800b22c:	bf48      	it	mi
 800b22e:	b2ad      	uxthmi	r5, r5
 800b230:	2f6f      	cmp	r7, #111	@ 0x6f
 800b232:	4853      	ldr	r0, [pc, #332]	@ (800b380 <_printf_i+0x238>)
 800b234:	6033      	str	r3, [r6, #0]
 800b236:	bf14      	ite	ne
 800b238:	230a      	movne	r3, #10
 800b23a:	2308      	moveq	r3, #8
 800b23c:	2100      	movs	r1, #0
 800b23e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b242:	6866      	ldr	r6, [r4, #4]
 800b244:	60a6      	str	r6, [r4, #8]
 800b246:	2e00      	cmp	r6, #0
 800b248:	bfa2      	ittt	ge
 800b24a:	6821      	ldrge	r1, [r4, #0]
 800b24c:	f021 0104 	bicge.w	r1, r1, #4
 800b250:	6021      	strge	r1, [r4, #0]
 800b252:	b90d      	cbnz	r5, 800b258 <_printf_i+0x110>
 800b254:	2e00      	cmp	r6, #0
 800b256:	d04b      	beq.n	800b2f0 <_printf_i+0x1a8>
 800b258:	4616      	mov	r6, r2
 800b25a:	fbb5 f1f3 	udiv	r1, r5, r3
 800b25e:	fb03 5711 	mls	r7, r3, r1, r5
 800b262:	5dc7      	ldrb	r7, [r0, r7]
 800b264:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b268:	462f      	mov	r7, r5
 800b26a:	42bb      	cmp	r3, r7
 800b26c:	460d      	mov	r5, r1
 800b26e:	d9f4      	bls.n	800b25a <_printf_i+0x112>
 800b270:	2b08      	cmp	r3, #8
 800b272:	d10b      	bne.n	800b28c <_printf_i+0x144>
 800b274:	6823      	ldr	r3, [r4, #0]
 800b276:	07df      	lsls	r7, r3, #31
 800b278:	d508      	bpl.n	800b28c <_printf_i+0x144>
 800b27a:	6923      	ldr	r3, [r4, #16]
 800b27c:	6861      	ldr	r1, [r4, #4]
 800b27e:	4299      	cmp	r1, r3
 800b280:	bfde      	ittt	le
 800b282:	2330      	movle	r3, #48	@ 0x30
 800b284:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b288:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b28c:	1b92      	subs	r2, r2, r6
 800b28e:	6122      	str	r2, [r4, #16]
 800b290:	f8cd a000 	str.w	sl, [sp]
 800b294:	464b      	mov	r3, r9
 800b296:	aa03      	add	r2, sp, #12
 800b298:	4621      	mov	r1, r4
 800b29a:	4640      	mov	r0, r8
 800b29c:	f7ff fee6 	bl	800b06c <_printf_common>
 800b2a0:	3001      	adds	r0, #1
 800b2a2:	d14a      	bne.n	800b33a <_printf_i+0x1f2>
 800b2a4:	f04f 30ff 	mov.w	r0, #4294967295
 800b2a8:	b004      	add	sp, #16
 800b2aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b2ae:	6823      	ldr	r3, [r4, #0]
 800b2b0:	f043 0320 	orr.w	r3, r3, #32
 800b2b4:	6023      	str	r3, [r4, #0]
 800b2b6:	4833      	ldr	r0, [pc, #204]	@ (800b384 <_printf_i+0x23c>)
 800b2b8:	2778      	movs	r7, #120	@ 0x78
 800b2ba:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b2be:	6823      	ldr	r3, [r4, #0]
 800b2c0:	6831      	ldr	r1, [r6, #0]
 800b2c2:	061f      	lsls	r7, r3, #24
 800b2c4:	f851 5b04 	ldr.w	r5, [r1], #4
 800b2c8:	d402      	bmi.n	800b2d0 <_printf_i+0x188>
 800b2ca:	065f      	lsls	r7, r3, #25
 800b2cc:	bf48      	it	mi
 800b2ce:	b2ad      	uxthmi	r5, r5
 800b2d0:	6031      	str	r1, [r6, #0]
 800b2d2:	07d9      	lsls	r1, r3, #31
 800b2d4:	bf44      	itt	mi
 800b2d6:	f043 0320 	orrmi.w	r3, r3, #32
 800b2da:	6023      	strmi	r3, [r4, #0]
 800b2dc:	b11d      	cbz	r5, 800b2e6 <_printf_i+0x19e>
 800b2de:	2310      	movs	r3, #16
 800b2e0:	e7ac      	b.n	800b23c <_printf_i+0xf4>
 800b2e2:	4827      	ldr	r0, [pc, #156]	@ (800b380 <_printf_i+0x238>)
 800b2e4:	e7e9      	b.n	800b2ba <_printf_i+0x172>
 800b2e6:	6823      	ldr	r3, [r4, #0]
 800b2e8:	f023 0320 	bic.w	r3, r3, #32
 800b2ec:	6023      	str	r3, [r4, #0]
 800b2ee:	e7f6      	b.n	800b2de <_printf_i+0x196>
 800b2f0:	4616      	mov	r6, r2
 800b2f2:	e7bd      	b.n	800b270 <_printf_i+0x128>
 800b2f4:	6833      	ldr	r3, [r6, #0]
 800b2f6:	6825      	ldr	r5, [r4, #0]
 800b2f8:	6961      	ldr	r1, [r4, #20]
 800b2fa:	1d18      	adds	r0, r3, #4
 800b2fc:	6030      	str	r0, [r6, #0]
 800b2fe:	062e      	lsls	r6, r5, #24
 800b300:	681b      	ldr	r3, [r3, #0]
 800b302:	d501      	bpl.n	800b308 <_printf_i+0x1c0>
 800b304:	6019      	str	r1, [r3, #0]
 800b306:	e002      	b.n	800b30e <_printf_i+0x1c6>
 800b308:	0668      	lsls	r0, r5, #25
 800b30a:	d5fb      	bpl.n	800b304 <_printf_i+0x1bc>
 800b30c:	8019      	strh	r1, [r3, #0]
 800b30e:	2300      	movs	r3, #0
 800b310:	6123      	str	r3, [r4, #16]
 800b312:	4616      	mov	r6, r2
 800b314:	e7bc      	b.n	800b290 <_printf_i+0x148>
 800b316:	6833      	ldr	r3, [r6, #0]
 800b318:	1d1a      	adds	r2, r3, #4
 800b31a:	6032      	str	r2, [r6, #0]
 800b31c:	681e      	ldr	r6, [r3, #0]
 800b31e:	6862      	ldr	r2, [r4, #4]
 800b320:	2100      	movs	r1, #0
 800b322:	4630      	mov	r0, r6
 800b324:	f7f4 ff64 	bl	80001f0 <memchr>
 800b328:	b108      	cbz	r0, 800b32e <_printf_i+0x1e6>
 800b32a:	1b80      	subs	r0, r0, r6
 800b32c:	6060      	str	r0, [r4, #4]
 800b32e:	6863      	ldr	r3, [r4, #4]
 800b330:	6123      	str	r3, [r4, #16]
 800b332:	2300      	movs	r3, #0
 800b334:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b338:	e7aa      	b.n	800b290 <_printf_i+0x148>
 800b33a:	6923      	ldr	r3, [r4, #16]
 800b33c:	4632      	mov	r2, r6
 800b33e:	4649      	mov	r1, r9
 800b340:	4640      	mov	r0, r8
 800b342:	47d0      	blx	sl
 800b344:	3001      	adds	r0, #1
 800b346:	d0ad      	beq.n	800b2a4 <_printf_i+0x15c>
 800b348:	6823      	ldr	r3, [r4, #0]
 800b34a:	079b      	lsls	r3, r3, #30
 800b34c:	d413      	bmi.n	800b376 <_printf_i+0x22e>
 800b34e:	68e0      	ldr	r0, [r4, #12]
 800b350:	9b03      	ldr	r3, [sp, #12]
 800b352:	4298      	cmp	r0, r3
 800b354:	bfb8      	it	lt
 800b356:	4618      	movlt	r0, r3
 800b358:	e7a6      	b.n	800b2a8 <_printf_i+0x160>
 800b35a:	2301      	movs	r3, #1
 800b35c:	4632      	mov	r2, r6
 800b35e:	4649      	mov	r1, r9
 800b360:	4640      	mov	r0, r8
 800b362:	47d0      	blx	sl
 800b364:	3001      	adds	r0, #1
 800b366:	d09d      	beq.n	800b2a4 <_printf_i+0x15c>
 800b368:	3501      	adds	r5, #1
 800b36a:	68e3      	ldr	r3, [r4, #12]
 800b36c:	9903      	ldr	r1, [sp, #12]
 800b36e:	1a5b      	subs	r3, r3, r1
 800b370:	42ab      	cmp	r3, r5
 800b372:	dcf2      	bgt.n	800b35a <_printf_i+0x212>
 800b374:	e7eb      	b.n	800b34e <_printf_i+0x206>
 800b376:	2500      	movs	r5, #0
 800b378:	f104 0619 	add.w	r6, r4, #25
 800b37c:	e7f5      	b.n	800b36a <_printf_i+0x222>
 800b37e:	bf00      	nop
 800b380:	08011f51 	.word	0x08011f51
 800b384:	08011f62 	.word	0x08011f62

0800b388 <_scanf_float>:
 800b388:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b38c:	b087      	sub	sp, #28
 800b38e:	4617      	mov	r7, r2
 800b390:	9303      	str	r3, [sp, #12]
 800b392:	688b      	ldr	r3, [r1, #8]
 800b394:	1e5a      	subs	r2, r3, #1
 800b396:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800b39a:	bf81      	itttt	hi
 800b39c:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800b3a0:	eb03 0b05 	addhi.w	fp, r3, r5
 800b3a4:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800b3a8:	608b      	strhi	r3, [r1, #8]
 800b3aa:	680b      	ldr	r3, [r1, #0]
 800b3ac:	460a      	mov	r2, r1
 800b3ae:	f04f 0500 	mov.w	r5, #0
 800b3b2:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800b3b6:	f842 3b1c 	str.w	r3, [r2], #28
 800b3ba:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800b3be:	4680      	mov	r8, r0
 800b3c0:	460c      	mov	r4, r1
 800b3c2:	bf98      	it	ls
 800b3c4:	f04f 0b00 	movls.w	fp, #0
 800b3c8:	9201      	str	r2, [sp, #4]
 800b3ca:	4616      	mov	r6, r2
 800b3cc:	46aa      	mov	sl, r5
 800b3ce:	46a9      	mov	r9, r5
 800b3d0:	9502      	str	r5, [sp, #8]
 800b3d2:	68a2      	ldr	r2, [r4, #8]
 800b3d4:	b152      	cbz	r2, 800b3ec <_scanf_float+0x64>
 800b3d6:	683b      	ldr	r3, [r7, #0]
 800b3d8:	781b      	ldrb	r3, [r3, #0]
 800b3da:	2b4e      	cmp	r3, #78	@ 0x4e
 800b3dc:	d864      	bhi.n	800b4a8 <_scanf_float+0x120>
 800b3de:	2b40      	cmp	r3, #64	@ 0x40
 800b3e0:	d83c      	bhi.n	800b45c <_scanf_float+0xd4>
 800b3e2:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800b3e6:	b2c8      	uxtb	r0, r1
 800b3e8:	280e      	cmp	r0, #14
 800b3ea:	d93a      	bls.n	800b462 <_scanf_float+0xda>
 800b3ec:	f1b9 0f00 	cmp.w	r9, #0
 800b3f0:	d003      	beq.n	800b3fa <_scanf_float+0x72>
 800b3f2:	6823      	ldr	r3, [r4, #0]
 800b3f4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b3f8:	6023      	str	r3, [r4, #0]
 800b3fa:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b3fe:	f1ba 0f01 	cmp.w	sl, #1
 800b402:	f200 8117 	bhi.w	800b634 <_scanf_float+0x2ac>
 800b406:	9b01      	ldr	r3, [sp, #4]
 800b408:	429e      	cmp	r6, r3
 800b40a:	f200 8108 	bhi.w	800b61e <_scanf_float+0x296>
 800b40e:	2001      	movs	r0, #1
 800b410:	b007      	add	sp, #28
 800b412:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b416:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800b41a:	2a0d      	cmp	r2, #13
 800b41c:	d8e6      	bhi.n	800b3ec <_scanf_float+0x64>
 800b41e:	a101      	add	r1, pc, #4	@ (adr r1, 800b424 <_scanf_float+0x9c>)
 800b420:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800b424:	0800b56b 	.word	0x0800b56b
 800b428:	0800b3ed 	.word	0x0800b3ed
 800b42c:	0800b3ed 	.word	0x0800b3ed
 800b430:	0800b3ed 	.word	0x0800b3ed
 800b434:	0800b5cb 	.word	0x0800b5cb
 800b438:	0800b5a3 	.word	0x0800b5a3
 800b43c:	0800b3ed 	.word	0x0800b3ed
 800b440:	0800b3ed 	.word	0x0800b3ed
 800b444:	0800b579 	.word	0x0800b579
 800b448:	0800b3ed 	.word	0x0800b3ed
 800b44c:	0800b3ed 	.word	0x0800b3ed
 800b450:	0800b3ed 	.word	0x0800b3ed
 800b454:	0800b3ed 	.word	0x0800b3ed
 800b458:	0800b531 	.word	0x0800b531
 800b45c:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800b460:	e7db      	b.n	800b41a <_scanf_float+0x92>
 800b462:	290e      	cmp	r1, #14
 800b464:	d8c2      	bhi.n	800b3ec <_scanf_float+0x64>
 800b466:	a001      	add	r0, pc, #4	@ (adr r0, 800b46c <_scanf_float+0xe4>)
 800b468:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800b46c:	0800b521 	.word	0x0800b521
 800b470:	0800b3ed 	.word	0x0800b3ed
 800b474:	0800b521 	.word	0x0800b521
 800b478:	0800b5b7 	.word	0x0800b5b7
 800b47c:	0800b3ed 	.word	0x0800b3ed
 800b480:	0800b4c9 	.word	0x0800b4c9
 800b484:	0800b507 	.word	0x0800b507
 800b488:	0800b507 	.word	0x0800b507
 800b48c:	0800b507 	.word	0x0800b507
 800b490:	0800b507 	.word	0x0800b507
 800b494:	0800b507 	.word	0x0800b507
 800b498:	0800b507 	.word	0x0800b507
 800b49c:	0800b507 	.word	0x0800b507
 800b4a0:	0800b507 	.word	0x0800b507
 800b4a4:	0800b507 	.word	0x0800b507
 800b4a8:	2b6e      	cmp	r3, #110	@ 0x6e
 800b4aa:	d809      	bhi.n	800b4c0 <_scanf_float+0x138>
 800b4ac:	2b60      	cmp	r3, #96	@ 0x60
 800b4ae:	d8b2      	bhi.n	800b416 <_scanf_float+0x8e>
 800b4b0:	2b54      	cmp	r3, #84	@ 0x54
 800b4b2:	d07b      	beq.n	800b5ac <_scanf_float+0x224>
 800b4b4:	2b59      	cmp	r3, #89	@ 0x59
 800b4b6:	d199      	bne.n	800b3ec <_scanf_float+0x64>
 800b4b8:	2d07      	cmp	r5, #7
 800b4ba:	d197      	bne.n	800b3ec <_scanf_float+0x64>
 800b4bc:	2508      	movs	r5, #8
 800b4be:	e02c      	b.n	800b51a <_scanf_float+0x192>
 800b4c0:	2b74      	cmp	r3, #116	@ 0x74
 800b4c2:	d073      	beq.n	800b5ac <_scanf_float+0x224>
 800b4c4:	2b79      	cmp	r3, #121	@ 0x79
 800b4c6:	e7f6      	b.n	800b4b6 <_scanf_float+0x12e>
 800b4c8:	6821      	ldr	r1, [r4, #0]
 800b4ca:	05c8      	lsls	r0, r1, #23
 800b4cc:	d51b      	bpl.n	800b506 <_scanf_float+0x17e>
 800b4ce:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800b4d2:	6021      	str	r1, [r4, #0]
 800b4d4:	f109 0901 	add.w	r9, r9, #1
 800b4d8:	f1bb 0f00 	cmp.w	fp, #0
 800b4dc:	d003      	beq.n	800b4e6 <_scanf_float+0x15e>
 800b4de:	3201      	adds	r2, #1
 800b4e0:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b4e4:	60a2      	str	r2, [r4, #8]
 800b4e6:	68a3      	ldr	r3, [r4, #8]
 800b4e8:	3b01      	subs	r3, #1
 800b4ea:	60a3      	str	r3, [r4, #8]
 800b4ec:	6923      	ldr	r3, [r4, #16]
 800b4ee:	3301      	adds	r3, #1
 800b4f0:	6123      	str	r3, [r4, #16]
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	3b01      	subs	r3, #1
 800b4f6:	2b00      	cmp	r3, #0
 800b4f8:	607b      	str	r3, [r7, #4]
 800b4fa:	f340 8087 	ble.w	800b60c <_scanf_float+0x284>
 800b4fe:	683b      	ldr	r3, [r7, #0]
 800b500:	3301      	adds	r3, #1
 800b502:	603b      	str	r3, [r7, #0]
 800b504:	e765      	b.n	800b3d2 <_scanf_float+0x4a>
 800b506:	eb1a 0105 	adds.w	r1, sl, r5
 800b50a:	f47f af6f 	bne.w	800b3ec <_scanf_float+0x64>
 800b50e:	6822      	ldr	r2, [r4, #0]
 800b510:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800b514:	6022      	str	r2, [r4, #0]
 800b516:	460d      	mov	r5, r1
 800b518:	468a      	mov	sl, r1
 800b51a:	f806 3b01 	strb.w	r3, [r6], #1
 800b51e:	e7e2      	b.n	800b4e6 <_scanf_float+0x15e>
 800b520:	6822      	ldr	r2, [r4, #0]
 800b522:	0610      	lsls	r0, r2, #24
 800b524:	f57f af62 	bpl.w	800b3ec <_scanf_float+0x64>
 800b528:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800b52c:	6022      	str	r2, [r4, #0]
 800b52e:	e7f4      	b.n	800b51a <_scanf_float+0x192>
 800b530:	f1ba 0f00 	cmp.w	sl, #0
 800b534:	d10e      	bne.n	800b554 <_scanf_float+0x1cc>
 800b536:	f1b9 0f00 	cmp.w	r9, #0
 800b53a:	d10e      	bne.n	800b55a <_scanf_float+0x1d2>
 800b53c:	6822      	ldr	r2, [r4, #0]
 800b53e:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800b542:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800b546:	d108      	bne.n	800b55a <_scanf_float+0x1d2>
 800b548:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800b54c:	6022      	str	r2, [r4, #0]
 800b54e:	f04f 0a01 	mov.w	sl, #1
 800b552:	e7e2      	b.n	800b51a <_scanf_float+0x192>
 800b554:	f1ba 0f02 	cmp.w	sl, #2
 800b558:	d055      	beq.n	800b606 <_scanf_float+0x27e>
 800b55a:	2d01      	cmp	r5, #1
 800b55c:	d002      	beq.n	800b564 <_scanf_float+0x1dc>
 800b55e:	2d04      	cmp	r5, #4
 800b560:	f47f af44 	bne.w	800b3ec <_scanf_float+0x64>
 800b564:	3501      	adds	r5, #1
 800b566:	b2ed      	uxtb	r5, r5
 800b568:	e7d7      	b.n	800b51a <_scanf_float+0x192>
 800b56a:	f1ba 0f01 	cmp.w	sl, #1
 800b56e:	f47f af3d 	bne.w	800b3ec <_scanf_float+0x64>
 800b572:	f04f 0a02 	mov.w	sl, #2
 800b576:	e7d0      	b.n	800b51a <_scanf_float+0x192>
 800b578:	b97d      	cbnz	r5, 800b59a <_scanf_float+0x212>
 800b57a:	f1b9 0f00 	cmp.w	r9, #0
 800b57e:	f47f af38 	bne.w	800b3f2 <_scanf_float+0x6a>
 800b582:	6822      	ldr	r2, [r4, #0]
 800b584:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800b588:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800b58c:	f040 8108 	bne.w	800b7a0 <_scanf_float+0x418>
 800b590:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800b594:	6022      	str	r2, [r4, #0]
 800b596:	2501      	movs	r5, #1
 800b598:	e7bf      	b.n	800b51a <_scanf_float+0x192>
 800b59a:	2d03      	cmp	r5, #3
 800b59c:	d0e2      	beq.n	800b564 <_scanf_float+0x1dc>
 800b59e:	2d05      	cmp	r5, #5
 800b5a0:	e7de      	b.n	800b560 <_scanf_float+0x1d8>
 800b5a2:	2d02      	cmp	r5, #2
 800b5a4:	f47f af22 	bne.w	800b3ec <_scanf_float+0x64>
 800b5a8:	2503      	movs	r5, #3
 800b5aa:	e7b6      	b.n	800b51a <_scanf_float+0x192>
 800b5ac:	2d06      	cmp	r5, #6
 800b5ae:	f47f af1d 	bne.w	800b3ec <_scanf_float+0x64>
 800b5b2:	2507      	movs	r5, #7
 800b5b4:	e7b1      	b.n	800b51a <_scanf_float+0x192>
 800b5b6:	6822      	ldr	r2, [r4, #0]
 800b5b8:	0591      	lsls	r1, r2, #22
 800b5ba:	f57f af17 	bpl.w	800b3ec <_scanf_float+0x64>
 800b5be:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800b5c2:	6022      	str	r2, [r4, #0]
 800b5c4:	f8cd 9008 	str.w	r9, [sp, #8]
 800b5c8:	e7a7      	b.n	800b51a <_scanf_float+0x192>
 800b5ca:	6822      	ldr	r2, [r4, #0]
 800b5cc:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800b5d0:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800b5d4:	d006      	beq.n	800b5e4 <_scanf_float+0x25c>
 800b5d6:	0550      	lsls	r0, r2, #21
 800b5d8:	f57f af08 	bpl.w	800b3ec <_scanf_float+0x64>
 800b5dc:	f1b9 0f00 	cmp.w	r9, #0
 800b5e0:	f000 80de 	beq.w	800b7a0 <_scanf_float+0x418>
 800b5e4:	0591      	lsls	r1, r2, #22
 800b5e6:	bf58      	it	pl
 800b5e8:	9902      	ldrpl	r1, [sp, #8]
 800b5ea:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800b5ee:	bf58      	it	pl
 800b5f0:	eba9 0101 	subpl.w	r1, r9, r1
 800b5f4:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800b5f8:	bf58      	it	pl
 800b5fa:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800b5fe:	6022      	str	r2, [r4, #0]
 800b600:	f04f 0900 	mov.w	r9, #0
 800b604:	e789      	b.n	800b51a <_scanf_float+0x192>
 800b606:	f04f 0a03 	mov.w	sl, #3
 800b60a:	e786      	b.n	800b51a <_scanf_float+0x192>
 800b60c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800b610:	4639      	mov	r1, r7
 800b612:	4640      	mov	r0, r8
 800b614:	4798      	blx	r3
 800b616:	2800      	cmp	r0, #0
 800b618:	f43f aedb 	beq.w	800b3d2 <_scanf_float+0x4a>
 800b61c:	e6e6      	b.n	800b3ec <_scanf_float+0x64>
 800b61e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b622:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b626:	463a      	mov	r2, r7
 800b628:	4640      	mov	r0, r8
 800b62a:	4798      	blx	r3
 800b62c:	6923      	ldr	r3, [r4, #16]
 800b62e:	3b01      	subs	r3, #1
 800b630:	6123      	str	r3, [r4, #16]
 800b632:	e6e8      	b.n	800b406 <_scanf_float+0x7e>
 800b634:	1e6b      	subs	r3, r5, #1
 800b636:	2b06      	cmp	r3, #6
 800b638:	d824      	bhi.n	800b684 <_scanf_float+0x2fc>
 800b63a:	2d02      	cmp	r5, #2
 800b63c:	d836      	bhi.n	800b6ac <_scanf_float+0x324>
 800b63e:	9b01      	ldr	r3, [sp, #4]
 800b640:	429e      	cmp	r6, r3
 800b642:	f67f aee4 	bls.w	800b40e <_scanf_float+0x86>
 800b646:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b64a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b64e:	463a      	mov	r2, r7
 800b650:	4640      	mov	r0, r8
 800b652:	4798      	blx	r3
 800b654:	6923      	ldr	r3, [r4, #16]
 800b656:	3b01      	subs	r3, #1
 800b658:	6123      	str	r3, [r4, #16]
 800b65a:	e7f0      	b.n	800b63e <_scanf_float+0x2b6>
 800b65c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b660:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800b664:	463a      	mov	r2, r7
 800b666:	4640      	mov	r0, r8
 800b668:	4798      	blx	r3
 800b66a:	6923      	ldr	r3, [r4, #16]
 800b66c:	3b01      	subs	r3, #1
 800b66e:	6123      	str	r3, [r4, #16]
 800b670:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b674:	fa5f fa8a 	uxtb.w	sl, sl
 800b678:	f1ba 0f02 	cmp.w	sl, #2
 800b67c:	d1ee      	bne.n	800b65c <_scanf_float+0x2d4>
 800b67e:	3d03      	subs	r5, #3
 800b680:	b2ed      	uxtb	r5, r5
 800b682:	1b76      	subs	r6, r6, r5
 800b684:	6823      	ldr	r3, [r4, #0]
 800b686:	05da      	lsls	r2, r3, #23
 800b688:	d530      	bpl.n	800b6ec <_scanf_float+0x364>
 800b68a:	055b      	lsls	r3, r3, #21
 800b68c:	d511      	bpl.n	800b6b2 <_scanf_float+0x32a>
 800b68e:	9b01      	ldr	r3, [sp, #4]
 800b690:	429e      	cmp	r6, r3
 800b692:	f67f aebc 	bls.w	800b40e <_scanf_float+0x86>
 800b696:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b69a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b69e:	463a      	mov	r2, r7
 800b6a0:	4640      	mov	r0, r8
 800b6a2:	4798      	blx	r3
 800b6a4:	6923      	ldr	r3, [r4, #16]
 800b6a6:	3b01      	subs	r3, #1
 800b6a8:	6123      	str	r3, [r4, #16]
 800b6aa:	e7f0      	b.n	800b68e <_scanf_float+0x306>
 800b6ac:	46aa      	mov	sl, r5
 800b6ae:	46b3      	mov	fp, r6
 800b6b0:	e7de      	b.n	800b670 <_scanf_float+0x2e8>
 800b6b2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800b6b6:	6923      	ldr	r3, [r4, #16]
 800b6b8:	2965      	cmp	r1, #101	@ 0x65
 800b6ba:	f103 33ff 	add.w	r3, r3, #4294967295
 800b6be:	f106 35ff 	add.w	r5, r6, #4294967295
 800b6c2:	6123      	str	r3, [r4, #16]
 800b6c4:	d00c      	beq.n	800b6e0 <_scanf_float+0x358>
 800b6c6:	2945      	cmp	r1, #69	@ 0x45
 800b6c8:	d00a      	beq.n	800b6e0 <_scanf_float+0x358>
 800b6ca:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b6ce:	463a      	mov	r2, r7
 800b6d0:	4640      	mov	r0, r8
 800b6d2:	4798      	blx	r3
 800b6d4:	6923      	ldr	r3, [r4, #16]
 800b6d6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800b6da:	3b01      	subs	r3, #1
 800b6dc:	1eb5      	subs	r5, r6, #2
 800b6de:	6123      	str	r3, [r4, #16]
 800b6e0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b6e4:	463a      	mov	r2, r7
 800b6e6:	4640      	mov	r0, r8
 800b6e8:	4798      	blx	r3
 800b6ea:	462e      	mov	r6, r5
 800b6ec:	6822      	ldr	r2, [r4, #0]
 800b6ee:	f012 0210 	ands.w	r2, r2, #16
 800b6f2:	d001      	beq.n	800b6f8 <_scanf_float+0x370>
 800b6f4:	2000      	movs	r0, #0
 800b6f6:	e68b      	b.n	800b410 <_scanf_float+0x88>
 800b6f8:	7032      	strb	r2, [r6, #0]
 800b6fa:	6823      	ldr	r3, [r4, #0]
 800b6fc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800b700:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b704:	d11c      	bne.n	800b740 <_scanf_float+0x3b8>
 800b706:	9b02      	ldr	r3, [sp, #8]
 800b708:	454b      	cmp	r3, r9
 800b70a:	eba3 0209 	sub.w	r2, r3, r9
 800b70e:	d123      	bne.n	800b758 <_scanf_float+0x3d0>
 800b710:	9901      	ldr	r1, [sp, #4]
 800b712:	2200      	movs	r2, #0
 800b714:	4640      	mov	r0, r8
 800b716:	f7ff f947 	bl	800a9a8 <_strtod_r>
 800b71a:	9b03      	ldr	r3, [sp, #12]
 800b71c:	6821      	ldr	r1, [r4, #0]
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	f011 0f02 	tst.w	r1, #2
 800b724:	ec57 6b10 	vmov	r6, r7, d0
 800b728:	f103 0204 	add.w	r2, r3, #4
 800b72c:	d01f      	beq.n	800b76e <_scanf_float+0x3e6>
 800b72e:	9903      	ldr	r1, [sp, #12]
 800b730:	600a      	str	r2, [r1, #0]
 800b732:	681b      	ldr	r3, [r3, #0]
 800b734:	e9c3 6700 	strd	r6, r7, [r3]
 800b738:	68e3      	ldr	r3, [r4, #12]
 800b73a:	3301      	adds	r3, #1
 800b73c:	60e3      	str	r3, [r4, #12]
 800b73e:	e7d9      	b.n	800b6f4 <_scanf_float+0x36c>
 800b740:	9b04      	ldr	r3, [sp, #16]
 800b742:	2b00      	cmp	r3, #0
 800b744:	d0e4      	beq.n	800b710 <_scanf_float+0x388>
 800b746:	9905      	ldr	r1, [sp, #20]
 800b748:	230a      	movs	r3, #10
 800b74a:	3101      	adds	r1, #1
 800b74c:	4640      	mov	r0, r8
 800b74e:	f7ff f9b7 	bl	800aac0 <_strtol_r>
 800b752:	9b04      	ldr	r3, [sp, #16]
 800b754:	9e05      	ldr	r6, [sp, #20]
 800b756:	1ac2      	subs	r2, r0, r3
 800b758:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800b75c:	429e      	cmp	r6, r3
 800b75e:	bf28      	it	cs
 800b760:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800b764:	4910      	ldr	r1, [pc, #64]	@ (800b7a8 <_scanf_float+0x420>)
 800b766:	4630      	mov	r0, r6
 800b768:	f000 f990 	bl	800ba8c <siprintf>
 800b76c:	e7d0      	b.n	800b710 <_scanf_float+0x388>
 800b76e:	f011 0f04 	tst.w	r1, #4
 800b772:	9903      	ldr	r1, [sp, #12]
 800b774:	600a      	str	r2, [r1, #0]
 800b776:	d1dc      	bne.n	800b732 <_scanf_float+0x3aa>
 800b778:	681d      	ldr	r5, [r3, #0]
 800b77a:	4632      	mov	r2, r6
 800b77c:	463b      	mov	r3, r7
 800b77e:	4630      	mov	r0, r6
 800b780:	4639      	mov	r1, r7
 800b782:	f7f5 f9e3 	bl	8000b4c <__aeabi_dcmpun>
 800b786:	b128      	cbz	r0, 800b794 <_scanf_float+0x40c>
 800b788:	4808      	ldr	r0, [pc, #32]	@ (800b7ac <_scanf_float+0x424>)
 800b78a:	f001 f965 	bl	800ca58 <nanf>
 800b78e:	ed85 0a00 	vstr	s0, [r5]
 800b792:	e7d1      	b.n	800b738 <_scanf_float+0x3b0>
 800b794:	4630      	mov	r0, r6
 800b796:	4639      	mov	r1, r7
 800b798:	f7f5 fa36 	bl	8000c08 <__aeabi_d2f>
 800b79c:	6028      	str	r0, [r5, #0]
 800b79e:	e7cb      	b.n	800b738 <_scanf_float+0x3b0>
 800b7a0:	f04f 0900 	mov.w	r9, #0
 800b7a4:	e629      	b.n	800b3fa <_scanf_float+0x72>
 800b7a6:	bf00      	nop
 800b7a8:	08011f73 	.word	0x08011f73
 800b7ac:	08010fa3 	.word	0x08010fa3

0800b7b0 <std>:
 800b7b0:	2300      	movs	r3, #0
 800b7b2:	b510      	push	{r4, lr}
 800b7b4:	4604      	mov	r4, r0
 800b7b6:	e9c0 3300 	strd	r3, r3, [r0]
 800b7ba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b7be:	6083      	str	r3, [r0, #8]
 800b7c0:	8181      	strh	r1, [r0, #12]
 800b7c2:	6643      	str	r3, [r0, #100]	@ 0x64
 800b7c4:	81c2      	strh	r2, [r0, #14]
 800b7c6:	6183      	str	r3, [r0, #24]
 800b7c8:	4619      	mov	r1, r3
 800b7ca:	2208      	movs	r2, #8
 800b7cc:	305c      	adds	r0, #92	@ 0x5c
 800b7ce:	f000 fa81 	bl	800bcd4 <memset>
 800b7d2:	4b0d      	ldr	r3, [pc, #52]	@ (800b808 <std+0x58>)
 800b7d4:	6263      	str	r3, [r4, #36]	@ 0x24
 800b7d6:	4b0d      	ldr	r3, [pc, #52]	@ (800b80c <std+0x5c>)
 800b7d8:	62a3      	str	r3, [r4, #40]	@ 0x28
 800b7da:	4b0d      	ldr	r3, [pc, #52]	@ (800b810 <std+0x60>)
 800b7dc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800b7de:	4b0d      	ldr	r3, [pc, #52]	@ (800b814 <std+0x64>)
 800b7e0:	6323      	str	r3, [r4, #48]	@ 0x30
 800b7e2:	4b0d      	ldr	r3, [pc, #52]	@ (800b818 <std+0x68>)
 800b7e4:	6224      	str	r4, [r4, #32]
 800b7e6:	429c      	cmp	r4, r3
 800b7e8:	d006      	beq.n	800b7f8 <std+0x48>
 800b7ea:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800b7ee:	4294      	cmp	r4, r2
 800b7f0:	d002      	beq.n	800b7f8 <std+0x48>
 800b7f2:	33d0      	adds	r3, #208	@ 0xd0
 800b7f4:	429c      	cmp	r4, r3
 800b7f6:	d105      	bne.n	800b804 <std+0x54>
 800b7f8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800b7fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b800:	f7f9 bbab 	b.w	8004f5a <__retarget_lock_init_recursive>
 800b804:	bd10      	pop	{r4, pc}
 800b806:	bf00      	nop
 800b808:	0800bb21 	.word	0x0800bb21
 800b80c:	0800bb47 	.word	0x0800bb47
 800b810:	0800bb7f 	.word	0x0800bb7f
 800b814:	0800bba3 	.word	0x0800bba3
 800b818:	200090c4 	.word	0x200090c4

0800b81c <stdio_exit_handler>:
 800b81c:	4a02      	ldr	r2, [pc, #8]	@ (800b828 <stdio_exit_handler+0xc>)
 800b81e:	4903      	ldr	r1, [pc, #12]	@ (800b82c <stdio_exit_handler+0x10>)
 800b820:	4803      	ldr	r0, [pc, #12]	@ (800b830 <stdio_exit_handler+0x14>)
 800b822:	f000 b869 	b.w	800b8f8 <_fwalk_sglue>
 800b826:	bf00      	nop
 800b828:	20000024 	.word	0x20000024
 800b82c:	0800f5a5 	.word	0x0800f5a5
 800b830:	200001a8 	.word	0x200001a8

0800b834 <cleanup_stdio>:
 800b834:	6841      	ldr	r1, [r0, #4]
 800b836:	4b0c      	ldr	r3, [pc, #48]	@ (800b868 <cleanup_stdio+0x34>)
 800b838:	4299      	cmp	r1, r3
 800b83a:	b510      	push	{r4, lr}
 800b83c:	4604      	mov	r4, r0
 800b83e:	d001      	beq.n	800b844 <cleanup_stdio+0x10>
 800b840:	f003 feb0 	bl	800f5a4 <_fflush_r>
 800b844:	68a1      	ldr	r1, [r4, #8]
 800b846:	4b09      	ldr	r3, [pc, #36]	@ (800b86c <cleanup_stdio+0x38>)
 800b848:	4299      	cmp	r1, r3
 800b84a:	d002      	beq.n	800b852 <cleanup_stdio+0x1e>
 800b84c:	4620      	mov	r0, r4
 800b84e:	f003 fea9 	bl	800f5a4 <_fflush_r>
 800b852:	68e1      	ldr	r1, [r4, #12]
 800b854:	4b06      	ldr	r3, [pc, #24]	@ (800b870 <cleanup_stdio+0x3c>)
 800b856:	4299      	cmp	r1, r3
 800b858:	d004      	beq.n	800b864 <cleanup_stdio+0x30>
 800b85a:	4620      	mov	r0, r4
 800b85c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b860:	f003 bea0 	b.w	800f5a4 <_fflush_r>
 800b864:	bd10      	pop	{r4, pc}
 800b866:	bf00      	nop
 800b868:	200090c4 	.word	0x200090c4
 800b86c:	2000912c 	.word	0x2000912c
 800b870:	20009194 	.word	0x20009194

0800b874 <global_stdio_init.part.0>:
 800b874:	b510      	push	{r4, lr}
 800b876:	4b0b      	ldr	r3, [pc, #44]	@ (800b8a4 <global_stdio_init.part.0+0x30>)
 800b878:	4c0b      	ldr	r4, [pc, #44]	@ (800b8a8 <global_stdio_init.part.0+0x34>)
 800b87a:	4a0c      	ldr	r2, [pc, #48]	@ (800b8ac <global_stdio_init.part.0+0x38>)
 800b87c:	601a      	str	r2, [r3, #0]
 800b87e:	4620      	mov	r0, r4
 800b880:	2200      	movs	r2, #0
 800b882:	2104      	movs	r1, #4
 800b884:	f7ff ff94 	bl	800b7b0 <std>
 800b888:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800b88c:	2201      	movs	r2, #1
 800b88e:	2109      	movs	r1, #9
 800b890:	f7ff ff8e 	bl	800b7b0 <std>
 800b894:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800b898:	2202      	movs	r2, #2
 800b89a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b89e:	2112      	movs	r1, #18
 800b8a0:	f7ff bf86 	b.w	800b7b0 <std>
 800b8a4:	200091fc 	.word	0x200091fc
 800b8a8:	200090c4 	.word	0x200090c4
 800b8ac:	0800b81d 	.word	0x0800b81d

0800b8b0 <__sfp_lock_acquire>:
 800b8b0:	4801      	ldr	r0, [pc, #4]	@ (800b8b8 <__sfp_lock_acquire+0x8>)
 800b8b2:	f7f9 bb6e 	b.w	8004f92 <__retarget_lock_acquire_recursive>
 800b8b6:	bf00      	nop
 800b8b8:	20003974 	.word	0x20003974

0800b8bc <__sfp_lock_release>:
 800b8bc:	4801      	ldr	r0, [pc, #4]	@ (800b8c4 <__sfp_lock_release+0x8>)
 800b8be:	f7f9 bb74 	b.w	8004faa <__retarget_lock_release_recursive>
 800b8c2:	bf00      	nop
 800b8c4:	20003974 	.word	0x20003974

0800b8c8 <__sinit>:
 800b8c8:	b510      	push	{r4, lr}
 800b8ca:	4604      	mov	r4, r0
 800b8cc:	f7ff fff0 	bl	800b8b0 <__sfp_lock_acquire>
 800b8d0:	6a23      	ldr	r3, [r4, #32]
 800b8d2:	b11b      	cbz	r3, 800b8dc <__sinit+0x14>
 800b8d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b8d8:	f7ff bff0 	b.w	800b8bc <__sfp_lock_release>
 800b8dc:	4b04      	ldr	r3, [pc, #16]	@ (800b8f0 <__sinit+0x28>)
 800b8de:	6223      	str	r3, [r4, #32]
 800b8e0:	4b04      	ldr	r3, [pc, #16]	@ (800b8f4 <__sinit+0x2c>)
 800b8e2:	681b      	ldr	r3, [r3, #0]
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	d1f5      	bne.n	800b8d4 <__sinit+0xc>
 800b8e8:	f7ff ffc4 	bl	800b874 <global_stdio_init.part.0>
 800b8ec:	e7f2      	b.n	800b8d4 <__sinit+0xc>
 800b8ee:	bf00      	nop
 800b8f0:	0800b835 	.word	0x0800b835
 800b8f4:	200091fc 	.word	0x200091fc

0800b8f8 <_fwalk_sglue>:
 800b8f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b8fc:	4607      	mov	r7, r0
 800b8fe:	4688      	mov	r8, r1
 800b900:	4614      	mov	r4, r2
 800b902:	2600      	movs	r6, #0
 800b904:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b908:	f1b9 0901 	subs.w	r9, r9, #1
 800b90c:	d505      	bpl.n	800b91a <_fwalk_sglue+0x22>
 800b90e:	6824      	ldr	r4, [r4, #0]
 800b910:	2c00      	cmp	r4, #0
 800b912:	d1f7      	bne.n	800b904 <_fwalk_sglue+0xc>
 800b914:	4630      	mov	r0, r6
 800b916:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b91a:	89ab      	ldrh	r3, [r5, #12]
 800b91c:	2b01      	cmp	r3, #1
 800b91e:	d907      	bls.n	800b930 <_fwalk_sglue+0x38>
 800b920:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b924:	3301      	adds	r3, #1
 800b926:	d003      	beq.n	800b930 <_fwalk_sglue+0x38>
 800b928:	4629      	mov	r1, r5
 800b92a:	4638      	mov	r0, r7
 800b92c:	47c0      	blx	r8
 800b92e:	4306      	orrs	r6, r0
 800b930:	3568      	adds	r5, #104	@ 0x68
 800b932:	e7e9      	b.n	800b908 <_fwalk_sglue+0x10>

0800b934 <iprintf>:
 800b934:	b40f      	push	{r0, r1, r2, r3}
 800b936:	b507      	push	{r0, r1, r2, lr}
 800b938:	4906      	ldr	r1, [pc, #24]	@ (800b954 <iprintf+0x20>)
 800b93a:	ab04      	add	r3, sp, #16
 800b93c:	6808      	ldr	r0, [r1, #0]
 800b93e:	f853 2b04 	ldr.w	r2, [r3], #4
 800b942:	6881      	ldr	r1, [r0, #8]
 800b944:	9301      	str	r3, [sp, #4]
 800b946:	f003 fb43 	bl	800efd0 <_vfiprintf_r>
 800b94a:	b003      	add	sp, #12
 800b94c:	f85d eb04 	ldr.w	lr, [sp], #4
 800b950:	b004      	add	sp, #16
 800b952:	4770      	bx	lr
 800b954:	200001a4 	.word	0x200001a4

0800b958 <putchar>:
 800b958:	4b02      	ldr	r3, [pc, #8]	@ (800b964 <putchar+0xc>)
 800b95a:	4601      	mov	r1, r0
 800b95c:	6818      	ldr	r0, [r3, #0]
 800b95e:	6882      	ldr	r2, [r0, #8]
 800b960:	f003 beaa 	b.w	800f6b8 <_putc_r>
 800b964:	200001a4 	.word	0x200001a4

0800b968 <_puts_r>:
 800b968:	6a03      	ldr	r3, [r0, #32]
 800b96a:	b570      	push	{r4, r5, r6, lr}
 800b96c:	6884      	ldr	r4, [r0, #8]
 800b96e:	4605      	mov	r5, r0
 800b970:	460e      	mov	r6, r1
 800b972:	b90b      	cbnz	r3, 800b978 <_puts_r+0x10>
 800b974:	f7ff ffa8 	bl	800b8c8 <__sinit>
 800b978:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b97a:	07db      	lsls	r3, r3, #31
 800b97c:	d405      	bmi.n	800b98a <_puts_r+0x22>
 800b97e:	89a3      	ldrh	r3, [r4, #12]
 800b980:	0598      	lsls	r0, r3, #22
 800b982:	d402      	bmi.n	800b98a <_puts_r+0x22>
 800b984:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b986:	f7f9 fb04 	bl	8004f92 <__retarget_lock_acquire_recursive>
 800b98a:	89a3      	ldrh	r3, [r4, #12]
 800b98c:	0719      	lsls	r1, r3, #28
 800b98e:	d502      	bpl.n	800b996 <_puts_r+0x2e>
 800b990:	6923      	ldr	r3, [r4, #16]
 800b992:	2b00      	cmp	r3, #0
 800b994:	d135      	bne.n	800ba02 <_puts_r+0x9a>
 800b996:	4621      	mov	r1, r4
 800b998:	4628      	mov	r0, r5
 800b99a:	f000 f945 	bl	800bc28 <__swsetup_r>
 800b99e:	b380      	cbz	r0, 800ba02 <_puts_r+0x9a>
 800b9a0:	f04f 35ff 	mov.w	r5, #4294967295
 800b9a4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b9a6:	07da      	lsls	r2, r3, #31
 800b9a8:	d405      	bmi.n	800b9b6 <_puts_r+0x4e>
 800b9aa:	89a3      	ldrh	r3, [r4, #12]
 800b9ac:	059b      	lsls	r3, r3, #22
 800b9ae:	d402      	bmi.n	800b9b6 <_puts_r+0x4e>
 800b9b0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b9b2:	f7f9 fafa 	bl	8004faa <__retarget_lock_release_recursive>
 800b9b6:	4628      	mov	r0, r5
 800b9b8:	bd70      	pop	{r4, r5, r6, pc}
 800b9ba:	2b00      	cmp	r3, #0
 800b9bc:	da04      	bge.n	800b9c8 <_puts_r+0x60>
 800b9be:	69a2      	ldr	r2, [r4, #24]
 800b9c0:	429a      	cmp	r2, r3
 800b9c2:	dc17      	bgt.n	800b9f4 <_puts_r+0x8c>
 800b9c4:	290a      	cmp	r1, #10
 800b9c6:	d015      	beq.n	800b9f4 <_puts_r+0x8c>
 800b9c8:	6823      	ldr	r3, [r4, #0]
 800b9ca:	1c5a      	adds	r2, r3, #1
 800b9cc:	6022      	str	r2, [r4, #0]
 800b9ce:	7019      	strb	r1, [r3, #0]
 800b9d0:	68a3      	ldr	r3, [r4, #8]
 800b9d2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800b9d6:	3b01      	subs	r3, #1
 800b9d8:	60a3      	str	r3, [r4, #8]
 800b9da:	2900      	cmp	r1, #0
 800b9dc:	d1ed      	bne.n	800b9ba <_puts_r+0x52>
 800b9de:	2b00      	cmp	r3, #0
 800b9e0:	da11      	bge.n	800ba06 <_puts_r+0x9e>
 800b9e2:	4622      	mov	r2, r4
 800b9e4:	210a      	movs	r1, #10
 800b9e6:	4628      	mov	r0, r5
 800b9e8:	f000 f8df 	bl	800bbaa <__swbuf_r>
 800b9ec:	3001      	adds	r0, #1
 800b9ee:	d0d7      	beq.n	800b9a0 <_puts_r+0x38>
 800b9f0:	250a      	movs	r5, #10
 800b9f2:	e7d7      	b.n	800b9a4 <_puts_r+0x3c>
 800b9f4:	4622      	mov	r2, r4
 800b9f6:	4628      	mov	r0, r5
 800b9f8:	f000 f8d7 	bl	800bbaa <__swbuf_r>
 800b9fc:	3001      	adds	r0, #1
 800b9fe:	d1e7      	bne.n	800b9d0 <_puts_r+0x68>
 800ba00:	e7ce      	b.n	800b9a0 <_puts_r+0x38>
 800ba02:	3e01      	subs	r6, #1
 800ba04:	e7e4      	b.n	800b9d0 <_puts_r+0x68>
 800ba06:	6823      	ldr	r3, [r4, #0]
 800ba08:	1c5a      	adds	r2, r3, #1
 800ba0a:	6022      	str	r2, [r4, #0]
 800ba0c:	220a      	movs	r2, #10
 800ba0e:	701a      	strb	r2, [r3, #0]
 800ba10:	e7ee      	b.n	800b9f0 <_puts_r+0x88>
	...

0800ba14 <puts>:
 800ba14:	4b02      	ldr	r3, [pc, #8]	@ (800ba20 <puts+0xc>)
 800ba16:	4601      	mov	r1, r0
 800ba18:	6818      	ldr	r0, [r3, #0]
 800ba1a:	f7ff bfa5 	b.w	800b968 <_puts_r>
 800ba1e:	bf00      	nop
 800ba20:	200001a4 	.word	0x200001a4

0800ba24 <sniprintf>:
 800ba24:	b40c      	push	{r2, r3}
 800ba26:	b530      	push	{r4, r5, lr}
 800ba28:	4b17      	ldr	r3, [pc, #92]	@ (800ba88 <sniprintf+0x64>)
 800ba2a:	1e0c      	subs	r4, r1, #0
 800ba2c:	681d      	ldr	r5, [r3, #0]
 800ba2e:	b09d      	sub	sp, #116	@ 0x74
 800ba30:	da08      	bge.n	800ba44 <sniprintf+0x20>
 800ba32:	238b      	movs	r3, #139	@ 0x8b
 800ba34:	602b      	str	r3, [r5, #0]
 800ba36:	f04f 30ff 	mov.w	r0, #4294967295
 800ba3a:	b01d      	add	sp, #116	@ 0x74
 800ba3c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ba40:	b002      	add	sp, #8
 800ba42:	4770      	bx	lr
 800ba44:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800ba48:	f8ad 3014 	strh.w	r3, [sp, #20]
 800ba4c:	bf14      	ite	ne
 800ba4e:	f104 33ff 	addne.w	r3, r4, #4294967295
 800ba52:	4623      	moveq	r3, r4
 800ba54:	9304      	str	r3, [sp, #16]
 800ba56:	9307      	str	r3, [sp, #28]
 800ba58:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800ba5c:	9002      	str	r0, [sp, #8]
 800ba5e:	9006      	str	r0, [sp, #24]
 800ba60:	f8ad 3016 	strh.w	r3, [sp, #22]
 800ba64:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800ba66:	ab21      	add	r3, sp, #132	@ 0x84
 800ba68:	a902      	add	r1, sp, #8
 800ba6a:	4628      	mov	r0, r5
 800ba6c:	9301      	str	r3, [sp, #4]
 800ba6e:	f002 ffbd 	bl	800e9ec <_svfiprintf_r>
 800ba72:	1c43      	adds	r3, r0, #1
 800ba74:	bfbc      	itt	lt
 800ba76:	238b      	movlt	r3, #139	@ 0x8b
 800ba78:	602b      	strlt	r3, [r5, #0]
 800ba7a:	2c00      	cmp	r4, #0
 800ba7c:	d0dd      	beq.n	800ba3a <sniprintf+0x16>
 800ba7e:	9b02      	ldr	r3, [sp, #8]
 800ba80:	2200      	movs	r2, #0
 800ba82:	701a      	strb	r2, [r3, #0]
 800ba84:	e7d9      	b.n	800ba3a <sniprintf+0x16>
 800ba86:	bf00      	nop
 800ba88:	200001a4 	.word	0x200001a4

0800ba8c <siprintf>:
 800ba8c:	b40e      	push	{r1, r2, r3}
 800ba8e:	b500      	push	{lr}
 800ba90:	b09c      	sub	sp, #112	@ 0x70
 800ba92:	ab1d      	add	r3, sp, #116	@ 0x74
 800ba94:	9002      	str	r0, [sp, #8]
 800ba96:	9006      	str	r0, [sp, #24]
 800ba98:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800ba9c:	4809      	ldr	r0, [pc, #36]	@ (800bac4 <siprintf+0x38>)
 800ba9e:	9107      	str	r1, [sp, #28]
 800baa0:	9104      	str	r1, [sp, #16]
 800baa2:	4909      	ldr	r1, [pc, #36]	@ (800bac8 <siprintf+0x3c>)
 800baa4:	f853 2b04 	ldr.w	r2, [r3], #4
 800baa8:	9105      	str	r1, [sp, #20]
 800baaa:	6800      	ldr	r0, [r0, #0]
 800baac:	9301      	str	r3, [sp, #4]
 800baae:	a902      	add	r1, sp, #8
 800bab0:	f002 ff9c 	bl	800e9ec <_svfiprintf_r>
 800bab4:	9b02      	ldr	r3, [sp, #8]
 800bab6:	2200      	movs	r2, #0
 800bab8:	701a      	strb	r2, [r3, #0]
 800baba:	b01c      	add	sp, #112	@ 0x70
 800babc:	f85d eb04 	ldr.w	lr, [sp], #4
 800bac0:	b003      	add	sp, #12
 800bac2:	4770      	bx	lr
 800bac4:	200001a4 	.word	0x200001a4
 800bac8:	ffff0208 	.word	0xffff0208

0800bacc <siscanf>:
 800bacc:	b40e      	push	{r1, r2, r3}
 800bace:	b530      	push	{r4, r5, lr}
 800bad0:	b09c      	sub	sp, #112	@ 0x70
 800bad2:	ac1f      	add	r4, sp, #124	@ 0x7c
 800bad4:	f44f 7201 	mov.w	r2, #516	@ 0x204
 800bad8:	f854 5b04 	ldr.w	r5, [r4], #4
 800badc:	f8ad 2014 	strh.w	r2, [sp, #20]
 800bae0:	9002      	str	r0, [sp, #8]
 800bae2:	9006      	str	r0, [sp, #24]
 800bae4:	f7f4 fbd4 	bl	8000290 <strlen>
 800bae8:	4b0b      	ldr	r3, [pc, #44]	@ (800bb18 <siscanf+0x4c>)
 800baea:	9003      	str	r0, [sp, #12]
 800baec:	9007      	str	r0, [sp, #28]
 800baee:	930b      	str	r3, [sp, #44]	@ 0x2c
 800baf0:	480a      	ldr	r0, [pc, #40]	@ (800bb1c <siscanf+0x50>)
 800baf2:	9401      	str	r4, [sp, #4]
 800baf4:	2300      	movs	r3, #0
 800baf6:	930f      	str	r3, [sp, #60]	@ 0x3c
 800baf8:	9314      	str	r3, [sp, #80]	@ 0x50
 800bafa:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800bafe:	f8ad 3016 	strh.w	r3, [sp, #22]
 800bb02:	462a      	mov	r2, r5
 800bb04:	4623      	mov	r3, r4
 800bb06:	a902      	add	r1, sp, #8
 800bb08:	6800      	ldr	r0, [r0, #0]
 800bb0a:	f003 f8c3 	bl	800ec94 <__ssvfiscanf_r>
 800bb0e:	b01c      	add	sp, #112	@ 0x70
 800bb10:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bb14:	b003      	add	sp, #12
 800bb16:	4770      	bx	lr
 800bb18:	0800bb43 	.word	0x0800bb43
 800bb1c:	200001a4 	.word	0x200001a4

0800bb20 <__sread>:
 800bb20:	b510      	push	{r4, lr}
 800bb22:	460c      	mov	r4, r1
 800bb24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bb28:	f000 ff18 	bl	800c95c <_read_r>
 800bb2c:	2800      	cmp	r0, #0
 800bb2e:	bfab      	itete	ge
 800bb30:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800bb32:	89a3      	ldrhlt	r3, [r4, #12]
 800bb34:	181b      	addge	r3, r3, r0
 800bb36:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800bb3a:	bfac      	ite	ge
 800bb3c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800bb3e:	81a3      	strhlt	r3, [r4, #12]
 800bb40:	bd10      	pop	{r4, pc}

0800bb42 <__seofread>:
 800bb42:	2000      	movs	r0, #0
 800bb44:	4770      	bx	lr

0800bb46 <__swrite>:
 800bb46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bb4a:	461f      	mov	r7, r3
 800bb4c:	898b      	ldrh	r3, [r1, #12]
 800bb4e:	05db      	lsls	r3, r3, #23
 800bb50:	4605      	mov	r5, r0
 800bb52:	460c      	mov	r4, r1
 800bb54:	4616      	mov	r6, r2
 800bb56:	d505      	bpl.n	800bb64 <__swrite+0x1e>
 800bb58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bb5c:	2302      	movs	r3, #2
 800bb5e:	2200      	movs	r2, #0
 800bb60:	f000 feea 	bl	800c938 <_lseek_r>
 800bb64:	89a3      	ldrh	r3, [r4, #12]
 800bb66:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bb6a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800bb6e:	81a3      	strh	r3, [r4, #12]
 800bb70:	4632      	mov	r2, r6
 800bb72:	463b      	mov	r3, r7
 800bb74:	4628      	mov	r0, r5
 800bb76:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bb7a:	f000 bf11 	b.w	800c9a0 <_write_r>

0800bb7e <__sseek>:
 800bb7e:	b510      	push	{r4, lr}
 800bb80:	460c      	mov	r4, r1
 800bb82:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bb86:	f000 fed7 	bl	800c938 <_lseek_r>
 800bb8a:	1c43      	adds	r3, r0, #1
 800bb8c:	89a3      	ldrh	r3, [r4, #12]
 800bb8e:	bf15      	itete	ne
 800bb90:	6560      	strne	r0, [r4, #84]	@ 0x54
 800bb92:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800bb96:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800bb9a:	81a3      	strheq	r3, [r4, #12]
 800bb9c:	bf18      	it	ne
 800bb9e:	81a3      	strhne	r3, [r4, #12]
 800bba0:	bd10      	pop	{r4, pc}

0800bba2 <__sclose>:
 800bba2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bba6:	f000 be61 	b.w	800c86c <_close_r>

0800bbaa <__swbuf_r>:
 800bbaa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bbac:	460e      	mov	r6, r1
 800bbae:	4614      	mov	r4, r2
 800bbb0:	4605      	mov	r5, r0
 800bbb2:	b118      	cbz	r0, 800bbbc <__swbuf_r+0x12>
 800bbb4:	6a03      	ldr	r3, [r0, #32]
 800bbb6:	b90b      	cbnz	r3, 800bbbc <__swbuf_r+0x12>
 800bbb8:	f7ff fe86 	bl	800b8c8 <__sinit>
 800bbbc:	69a3      	ldr	r3, [r4, #24]
 800bbbe:	60a3      	str	r3, [r4, #8]
 800bbc0:	89a3      	ldrh	r3, [r4, #12]
 800bbc2:	071a      	lsls	r2, r3, #28
 800bbc4:	d501      	bpl.n	800bbca <__swbuf_r+0x20>
 800bbc6:	6923      	ldr	r3, [r4, #16]
 800bbc8:	b943      	cbnz	r3, 800bbdc <__swbuf_r+0x32>
 800bbca:	4621      	mov	r1, r4
 800bbcc:	4628      	mov	r0, r5
 800bbce:	f000 f82b 	bl	800bc28 <__swsetup_r>
 800bbd2:	b118      	cbz	r0, 800bbdc <__swbuf_r+0x32>
 800bbd4:	f04f 37ff 	mov.w	r7, #4294967295
 800bbd8:	4638      	mov	r0, r7
 800bbda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bbdc:	6823      	ldr	r3, [r4, #0]
 800bbde:	6922      	ldr	r2, [r4, #16]
 800bbe0:	1a98      	subs	r0, r3, r2
 800bbe2:	6963      	ldr	r3, [r4, #20]
 800bbe4:	b2f6      	uxtb	r6, r6
 800bbe6:	4283      	cmp	r3, r0
 800bbe8:	4637      	mov	r7, r6
 800bbea:	dc05      	bgt.n	800bbf8 <__swbuf_r+0x4e>
 800bbec:	4621      	mov	r1, r4
 800bbee:	4628      	mov	r0, r5
 800bbf0:	f003 fcd8 	bl	800f5a4 <_fflush_r>
 800bbf4:	2800      	cmp	r0, #0
 800bbf6:	d1ed      	bne.n	800bbd4 <__swbuf_r+0x2a>
 800bbf8:	68a3      	ldr	r3, [r4, #8]
 800bbfa:	3b01      	subs	r3, #1
 800bbfc:	60a3      	str	r3, [r4, #8]
 800bbfe:	6823      	ldr	r3, [r4, #0]
 800bc00:	1c5a      	adds	r2, r3, #1
 800bc02:	6022      	str	r2, [r4, #0]
 800bc04:	701e      	strb	r6, [r3, #0]
 800bc06:	6962      	ldr	r2, [r4, #20]
 800bc08:	1c43      	adds	r3, r0, #1
 800bc0a:	429a      	cmp	r2, r3
 800bc0c:	d004      	beq.n	800bc18 <__swbuf_r+0x6e>
 800bc0e:	89a3      	ldrh	r3, [r4, #12]
 800bc10:	07db      	lsls	r3, r3, #31
 800bc12:	d5e1      	bpl.n	800bbd8 <__swbuf_r+0x2e>
 800bc14:	2e0a      	cmp	r6, #10
 800bc16:	d1df      	bne.n	800bbd8 <__swbuf_r+0x2e>
 800bc18:	4621      	mov	r1, r4
 800bc1a:	4628      	mov	r0, r5
 800bc1c:	f003 fcc2 	bl	800f5a4 <_fflush_r>
 800bc20:	2800      	cmp	r0, #0
 800bc22:	d0d9      	beq.n	800bbd8 <__swbuf_r+0x2e>
 800bc24:	e7d6      	b.n	800bbd4 <__swbuf_r+0x2a>
	...

0800bc28 <__swsetup_r>:
 800bc28:	b538      	push	{r3, r4, r5, lr}
 800bc2a:	4b29      	ldr	r3, [pc, #164]	@ (800bcd0 <__swsetup_r+0xa8>)
 800bc2c:	4605      	mov	r5, r0
 800bc2e:	6818      	ldr	r0, [r3, #0]
 800bc30:	460c      	mov	r4, r1
 800bc32:	b118      	cbz	r0, 800bc3c <__swsetup_r+0x14>
 800bc34:	6a03      	ldr	r3, [r0, #32]
 800bc36:	b90b      	cbnz	r3, 800bc3c <__swsetup_r+0x14>
 800bc38:	f7ff fe46 	bl	800b8c8 <__sinit>
 800bc3c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bc40:	0719      	lsls	r1, r3, #28
 800bc42:	d422      	bmi.n	800bc8a <__swsetup_r+0x62>
 800bc44:	06da      	lsls	r2, r3, #27
 800bc46:	d407      	bmi.n	800bc58 <__swsetup_r+0x30>
 800bc48:	2209      	movs	r2, #9
 800bc4a:	602a      	str	r2, [r5, #0]
 800bc4c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bc50:	81a3      	strh	r3, [r4, #12]
 800bc52:	f04f 30ff 	mov.w	r0, #4294967295
 800bc56:	e033      	b.n	800bcc0 <__swsetup_r+0x98>
 800bc58:	0758      	lsls	r0, r3, #29
 800bc5a:	d512      	bpl.n	800bc82 <__swsetup_r+0x5a>
 800bc5c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bc5e:	b141      	cbz	r1, 800bc72 <__swsetup_r+0x4a>
 800bc60:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800bc64:	4299      	cmp	r1, r3
 800bc66:	d002      	beq.n	800bc6e <__swsetup_r+0x46>
 800bc68:	4628      	mov	r0, r5
 800bc6a:	f001 fd51 	bl	800d710 <_free_r>
 800bc6e:	2300      	movs	r3, #0
 800bc70:	6363      	str	r3, [r4, #52]	@ 0x34
 800bc72:	89a3      	ldrh	r3, [r4, #12]
 800bc74:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800bc78:	81a3      	strh	r3, [r4, #12]
 800bc7a:	2300      	movs	r3, #0
 800bc7c:	6063      	str	r3, [r4, #4]
 800bc7e:	6923      	ldr	r3, [r4, #16]
 800bc80:	6023      	str	r3, [r4, #0]
 800bc82:	89a3      	ldrh	r3, [r4, #12]
 800bc84:	f043 0308 	orr.w	r3, r3, #8
 800bc88:	81a3      	strh	r3, [r4, #12]
 800bc8a:	6923      	ldr	r3, [r4, #16]
 800bc8c:	b94b      	cbnz	r3, 800bca2 <__swsetup_r+0x7a>
 800bc8e:	89a3      	ldrh	r3, [r4, #12]
 800bc90:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800bc94:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bc98:	d003      	beq.n	800bca2 <__swsetup_r+0x7a>
 800bc9a:	4621      	mov	r1, r4
 800bc9c:	4628      	mov	r0, r5
 800bc9e:	f003 fccf 	bl	800f640 <__smakebuf_r>
 800bca2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bca6:	f013 0201 	ands.w	r2, r3, #1
 800bcaa:	d00a      	beq.n	800bcc2 <__swsetup_r+0x9a>
 800bcac:	2200      	movs	r2, #0
 800bcae:	60a2      	str	r2, [r4, #8]
 800bcb0:	6962      	ldr	r2, [r4, #20]
 800bcb2:	4252      	negs	r2, r2
 800bcb4:	61a2      	str	r2, [r4, #24]
 800bcb6:	6922      	ldr	r2, [r4, #16]
 800bcb8:	b942      	cbnz	r2, 800bccc <__swsetup_r+0xa4>
 800bcba:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800bcbe:	d1c5      	bne.n	800bc4c <__swsetup_r+0x24>
 800bcc0:	bd38      	pop	{r3, r4, r5, pc}
 800bcc2:	0799      	lsls	r1, r3, #30
 800bcc4:	bf58      	it	pl
 800bcc6:	6962      	ldrpl	r2, [r4, #20]
 800bcc8:	60a2      	str	r2, [r4, #8]
 800bcca:	e7f4      	b.n	800bcb6 <__swsetup_r+0x8e>
 800bccc:	2000      	movs	r0, #0
 800bcce:	e7f7      	b.n	800bcc0 <__swsetup_r+0x98>
 800bcd0:	200001a4 	.word	0x200001a4

0800bcd4 <memset>:
 800bcd4:	4402      	add	r2, r0
 800bcd6:	4603      	mov	r3, r0
 800bcd8:	4293      	cmp	r3, r2
 800bcda:	d100      	bne.n	800bcde <memset+0xa>
 800bcdc:	4770      	bx	lr
 800bcde:	f803 1b01 	strb.w	r1, [r3], #1
 800bce2:	e7f9      	b.n	800bcd8 <memset+0x4>

0800bce4 <strchr>:
 800bce4:	b2c9      	uxtb	r1, r1
 800bce6:	4603      	mov	r3, r0
 800bce8:	4618      	mov	r0, r3
 800bcea:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bcee:	b112      	cbz	r2, 800bcf6 <strchr+0x12>
 800bcf0:	428a      	cmp	r2, r1
 800bcf2:	d1f9      	bne.n	800bce8 <strchr+0x4>
 800bcf4:	4770      	bx	lr
 800bcf6:	2900      	cmp	r1, #0
 800bcf8:	bf18      	it	ne
 800bcfa:	2000      	movne	r0, #0
 800bcfc:	4770      	bx	lr

0800bcfe <strncmp>:
 800bcfe:	b510      	push	{r4, lr}
 800bd00:	b16a      	cbz	r2, 800bd1e <strncmp+0x20>
 800bd02:	3901      	subs	r1, #1
 800bd04:	1884      	adds	r4, r0, r2
 800bd06:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bd0a:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800bd0e:	429a      	cmp	r2, r3
 800bd10:	d103      	bne.n	800bd1a <strncmp+0x1c>
 800bd12:	42a0      	cmp	r0, r4
 800bd14:	d001      	beq.n	800bd1a <strncmp+0x1c>
 800bd16:	2a00      	cmp	r2, #0
 800bd18:	d1f5      	bne.n	800bd06 <strncmp+0x8>
 800bd1a:	1ad0      	subs	r0, r2, r3
 800bd1c:	bd10      	pop	{r4, pc}
 800bd1e:	4610      	mov	r0, r2
 800bd20:	e7fc      	b.n	800bd1c <strncmp+0x1e>

0800bd22 <strncpy>:
 800bd22:	b510      	push	{r4, lr}
 800bd24:	3901      	subs	r1, #1
 800bd26:	4603      	mov	r3, r0
 800bd28:	b132      	cbz	r2, 800bd38 <strncpy+0x16>
 800bd2a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800bd2e:	f803 4b01 	strb.w	r4, [r3], #1
 800bd32:	3a01      	subs	r2, #1
 800bd34:	2c00      	cmp	r4, #0
 800bd36:	d1f7      	bne.n	800bd28 <strncpy+0x6>
 800bd38:	441a      	add	r2, r3
 800bd3a:	2100      	movs	r1, #0
 800bd3c:	4293      	cmp	r3, r2
 800bd3e:	d100      	bne.n	800bd42 <strncpy+0x20>
 800bd40:	bd10      	pop	{r4, pc}
 800bd42:	f803 1b01 	strb.w	r1, [r3], #1
 800bd46:	e7f9      	b.n	800bd3c <strncpy+0x1a>

0800bd48 <strrchr>:
 800bd48:	b538      	push	{r3, r4, r5, lr}
 800bd4a:	f011 04ff 	ands.w	r4, r1, #255	@ 0xff
 800bd4e:	4603      	mov	r3, r0
 800bd50:	d10e      	bne.n	800bd70 <strrchr+0x28>
 800bd52:	4621      	mov	r1, r4
 800bd54:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bd58:	f7ff bfc4 	b.w	800bce4 <strchr>
 800bd5c:	1c43      	adds	r3, r0, #1
 800bd5e:	4605      	mov	r5, r0
 800bd60:	4621      	mov	r1, r4
 800bd62:	4618      	mov	r0, r3
 800bd64:	f7ff ffbe 	bl	800bce4 <strchr>
 800bd68:	2800      	cmp	r0, #0
 800bd6a:	d1f7      	bne.n	800bd5c <strrchr+0x14>
 800bd6c:	4628      	mov	r0, r5
 800bd6e:	bd38      	pop	{r3, r4, r5, pc}
 800bd70:	2500      	movs	r5, #0
 800bd72:	e7f5      	b.n	800bd60 <strrchr+0x18>

0800bd74 <strstr>:
 800bd74:	780a      	ldrb	r2, [r1, #0]
 800bd76:	b570      	push	{r4, r5, r6, lr}
 800bd78:	b96a      	cbnz	r2, 800bd96 <strstr+0x22>
 800bd7a:	bd70      	pop	{r4, r5, r6, pc}
 800bd7c:	429a      	cmp	r2, r3
 800bd7e:	d109      	bne.n	800bd94 <strstr+0x20>
 800bd80:	460c      	mov	r4, r1
 800bd82:	4605      	mov	r5, r0
 800bd84:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800bd88:	2b00      	cmp	r3, #0
 800bd8a:	d0f6      	beq.n	800bd7a <strstr+0x6>
 800bd8c:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800bd90:	429e      	cmp	r6, r3
 800bd92:	d0f7      	beq.n	800bd84 <strstr+0x10>
 800bd94:	3001      	adds	r0, #1
 800bd96:	7803      	ldrb	r3, [r0, #0]
 800bd98:	2b00      	cmp	r3, #0
 800bd9a:	d1ef      	bne.n	800bd7c <strstr+0x8>
 800bd9c:	4618      	mov	r0, r3
 800bd9e:	e7ec      	b.n	800bd7a <strstr+0x6>

0800bda0 <validate_structure>:
 800bda0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bda2:	6801      	ldr	r1, [r0, #0]
 800bda4:	293b      	cmp	r1, #59	@ 0x3b
 800bda6:	4604      	mov	r4, r0
 800bda8:	d911      	bls.n	800bdce <validate_structure+0x2e>
 800bdaa:	223c      	movs	r2, #60	@ 0x3c
 800bdac:	4668      	mov	r0, sp
 800bdae:	f000 fe59 	bl	800ca64 <div>
 800bdb2:	9a01      	ldr	r2, [sp, #4]
 800bdb4:	6863      	ldr	r3, [r4, #4]
 800bdb6:	9900      	ldr	r1, [sp, #0]
 800bdb8:	2a00      	cmp	r2, #0
 800bdba:	440b      	add	r3, r1
 800bdbc:	6063      	str	r3, [r4, #4]
 800bdbe:	bfbb      	ittet	lt
 800bdc0:	323c      	addlt	r2, #60	@ 0x3c
 800bdc2:	f103 33ff 	addlt.w	r3, r3, #4294967295
 800bdc6:	6022      	strge	r2, [r4, #0]
 800bdc8:	6022      	strlt	r2, [r4, #0]
 800bdca:	bfb8      	it	lt
 800bdcc:	6063      	strlt	r3, [r4, #4]
 800bdce:	6861      	ldr	r1, [r4, #4]
 800bdd0:	293b      	cmp	r1, #59	@ 0x3b
 800bdd2:	d911      	bls.n	800bdf8 <validate_structure+0x58>
 800bdd4:	223c      	movs	r2, #60	@ 0x3c
 800bdd6:	4668      	mov	r0, sp
 800bdd8:	f000 fe44 	bl	800ca64 <div>
 800bddc:	9a01      	ldr	r2, [sp, #4]
 800bdde:	68a3      	ldr	r3, [r4, #8]
 800bde0:	9900      	ldr	r1, [sp, #0]
 800bde2:	2a00      	cmp	r2, #0
 800bde4:	440b      	add	r3, r1
 800bde6:	60a3      	str	r3, [r4, #8]
 800bde8:	bfbb      	ittet	lt
 800bdea:	323c      	addlt	r2, #60	@ 0x3c
 800bdec:	f103 33ff 	addlt.w	r3, r3, #4294967295
 800bdf0:	6062      	strge	r2, [r4, #4]
 800bdf2:	6062      	strlt	r2, [r4, #4]
 800bdf4:	bfb8      	it	lt
 800bdf6:	60a3      	strlt	r3, [r4, #8]
 800bdf8:	68a1      	ldr	r1, [r4, #8]
 800bdfa:	2917      	cmp	r1, #23
 800bdfc:	d911      	bls.n	800be22 <validate_structure+0x82>
 800bdfe:	2218      	movs	r2, #24
 800be00:	4668      	mov	r0, sp
 800be02:	f000 fe2f 	bl	800ca64 <div>
 800be06:	9a01      	ldr	r2, [sp, #4]
 800be08:	68e3      	ldr	r3, [r4, #12]
 800be0a:	9900      	ldr	r1, [sp, #0]
 800be0c:	2a00      	cmp	r2, #0
 800be0e:	440b      	add	r3, r1
 800be10:	60e3      	str	r3, [r4, #12]
 800be12:	bfbb      	ittet	lt
 800be14:	3218      	addlt	r2, #24
 800be16:	f103 33ff 	addlt.w	r3, r3, #4294967295
 800be1a:	60a2      	strge	r2, [r4, #8]
 800be1c:	60a2      	strlt	r2, [r4, #8]
 800be1e:	bfb8      	it	lt
 800be20:	60e3      	strlt	r3, [r4, #12]
 800be22:	6921      	ldr	r1, [r4, #16]
 800be24:	290b      	cmp	r1, #11
 800be26:	d911      	bls.n	800be4c <validate_structure+0xac>
 800be28:	220c      	movs	r2, #12
 800be2a:	4668      	mov	r0, sp
 800be2c:	f000 fe1a 	bl	800ca64 <div>
 800be30:	9a01      	ldr	r2, [sp, #4]
 800be32:	6963      	ldr	r3, [r4, #20]
 800be34:	9900      	ldr	r1, [sp, #0]
 800be36:	2a00      	cmp	r2, #0
 800be38:	440b      	add	r3, r1
 800be3a:	6163      	str	r3, [r4, #20]
 800be3c:	bfbb      	ittet	lt
 800be3e:	320c      	addlt	r2, #12
 800be40:	f103 33ff 	addlt.w	r3, r3, #4294967295
 800be44:	6122      	strge	r2, [r4, #16]
 800be46:	6122      	strlt	r2, [r4, #16]
 800be48:	bfb8      	it	lt
 800be4a:	6163      	strlt	r3, [r4, #20]
 800be4c:	6963      	ldr	r3, [r4, #20]
 800be4e:	079a      	lsls	r2, r3, #30
 800be50:	d11c      	bne.n	800be8c <validate_structure+0xec>
 800be52:	2164      	movs	r1, #100	@ 0x64
 800be54:	fb93 f2f1 	sdiv	r2, r3, r1
 800be58:	fb01 3212 	mls	r2, r1, r2, r3
 800be5c:	b9c2      	cbnz	r2, 800be90 <validate_structure+0xf0>
 800be5e:	f203 736c 	addw	r3, r3, #1900	@ 0x76c
 800be62:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800be66:	fb93 f1f2 	sdiv	r1, r3, r2
 800be6a:	fb02 3311 	mls	r3, r2, r1, r3
 800be6e:	2b00      	cmp	r3, #0
 800be70:	bf14      	ite	ne
 800be72:	231c      	movne	r3, #28
 800be74:	231d      	moveq	r3, #29
 800be76:	68e2      	ldr	r2, [r4, #12]
 800be78:	2a00      	cmp	r2, #0
 800be7a:	dc0b      	bgt.n	800be94 <validate_structure+0xf4>
 800be7c:	4d31      	ldr	r5, [pc, #196]	@ (800bf44 <validate_structure+0x1a4>)
 800be7e:	200b      	movs	r0, #11
 800be80:	2164      	movs	r1, #100	@ 0x64
 800be82:	68e6      	ldr	r6, [r4, #12]
 800be84:	2e00      	cmp	r6, #0
 800be86:	dd30      	ble.n	800beea <validate_structure+0x14a>
 800be88:	b003      	add	sp, #12
 800be8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800be8c:	231c      	movs	r3, #28
 800be8e:	e7f2      	b.n	800be76 <validate_structure+0xd6>
 800be90:	231d      	movs	r3, #29
 800be92:	e7f0      	b.n	800be76 <validate_structure+0xd6>
 800be94:	4d2b      	ldr	r5, [pc, #172]	@ (800bf44 <validate_structure+0x1a4>)
 800be96:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
 800be9a:	2a01      	cmp	r2, #1
 800be9c:	bf14      	ite	ne
 800be9e:	f855 0022 	ldrne.w	r0, [r5, r2, lsl #2]
 800bea2:	4618      	moveq	r0, r3
 800bea4:	4281      	cmp	r1, r0
 800bea6:	ddef      	ble.n	800be88 <validate_structure+0xe8>
 800bea8:	3201      	adds	r2, #1
 800beaa:	1a09      	subs	r1, r1, r0
 800beac:	2a0c      	cmp	r2, #12
 800beae:	60e1      	str	r1, [r4, #12]
 800beb0:	6122      	str	r2, [r4, #16]
 800beb2:	d1f0      	bne.n	800be96 <validate_structure+0xf6>
 800beb4:	6963      	ldr	r3, [r4, #20]
 800beb6:	2100      	movs	r1, #0
 800beb8:	1c5a      	adds	r2, r3, #1
 800beba:	6121      	str	r1, [r4, #16]
 800bebc:	0791      	lsls	r1, r2, #30
 800bebe:	6162      	str	r2, [r4, #20]
 800bec0:	d13c      	bne.n	800bf3c <validate_structure+0x19c>
 800bec2:	2164      	movs	r1, #100	@ 0x64
 800bec4:	fb92 f0f1 	sdiv	r0, r2, r1
 800bec8:	fb01 2210 	mls	r2, r1, r0, r2
 800becc:	2a00      	cmp	r2, #0
 800bece:	d137      	bne.n	800bf40 <validate_structure+0x1a0>
 800bed0:	f203 736d 	addw	r3, r3, #1901	@ 0x76d
 800bed4:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800bed8:	fb93 f1f2 	sdiv	r1, r3, r2
 800bedc:	fb02 3311 	mls	r3, r2, r1, r3
 800bee0:	2b00      	cmp	r3, #0
 800bee2:	bf14      	ite	ne
 800bee4:	231c      	movne	r3, #28
 800bee6:	231d      	moveq	r3, #29
 800bee8:	e7d5      	b.n	800be96 <validate_structure+0xf6>
 800beea:	6922      	ldr	r2, [r4, #16]
 800beec:	3a01      	subs	r2, #1
 800beee:	6122      	str	r2, [r4, #16]
 800bef0:	3201      	adds	r2, #1
 800bef2:	d116      	bne.n	800bf22 <validate_structure+0x182>
 800bef4:	6963      	ldr	r3, [r4, #20]
 800bef6:	1e5a      	subs	r2, r3, #1
 800bef8:	0797      	lsls	r7, r2, #30
 800befa:	e9c4 0204 	strd	r0, r2, [r4, #16]
 800befe:	d119      	bne.n	800bf34 <validate_structure+0x194>
 800bf00:	fb92 f7f1 	sdiv	r7, r2, r1
 800bf04:	fb01 2217 	mls	r2, r1, r7, r2
 800bf08:	b9b2      	cbnz	r2, 800bf38 <validate_structure+0x198>
 800bf0a:	f203 736b 	addw	r3, r3, #1899	@ 0x76b
 800bf0e:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800bf12:	fb93 f7f2 	sdiv	r7, r3, r2
 800bf16:	fb02 3317 	mls	r3, r2, r7, r3
 800bf1a:	2b00      	cmp	r3, #0
 800bf1c:	bf14      	ite	ne
 800bf1e:	231c      	movne	r3, #28
 800bf20:	231d      	moveq	r3, #29
 800bf22:	6922      	ldr	r2, [r4, #16]
 800bf24:	2a01      	cmp	r2, #1
 800bf26:	bf14      	ite	ne
 800bf28:	f855 2022 	ldrne.w	r2, [r5, r2, lsl #2]
 800bf2c:	461a      	moveq	r2, r3
 800bf2e:	4432      	add	r2, r6
 800bf30:	60e2      	str	r2, [r4, #12]
 800bf32:	e7a6      	b.n	800be82 <validate_structure+0xe2>
 800bf34:	231c      	movs	r3, #28
 800bf36:	e7f4      	b.n	800bf22 <validate_structure+0x182>
 800bf38:	231d      	movs	r3, #29
 800bf3a:	e7f2      	b.n	800bf22 <validate_structure+0x182>
 800bf3c:	231c      	movs	r3, #28
 800bf3e:	e7aa      	b.n	800be96 <validate_structure+0xf6>
 800bf40:	231d      	movs	r3, #29
 800bf42:	e7a8      	b.n	800be96 <validate_structure+0xf6>
 800bf44:	08011fa8 	.word	0x08011fa8

0800bf48 <mktime>:
 800bf48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf4c:	b085      	sub	sp, #20
 800bf4e:	4607      	mov	r7, r0
 800bf50:	f003 fc74 	bl	800f83c <__gettzinfo>
 800bf54:	4681      	mov	r9, r0
 800bf56:	4638      	mov	r0, r7
 800bf58:	f7ff ff22 	bl	800bda0 <validate_structure>
 800bf5c:	e9d7 4300 	ldrd	r4, r3, [r7]
 800bf60:	223c      	movs	r2, #60	@ 0x3c
 800bf62:	fb02 4403 	mla	r4, r2, r3, r4
 800bf66:	68bb      	ldr	r3, [r7, #8]
 800bf68:	697d      	ldr	r5, [r7, #20]
 800bf6a:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 800bf6e:	fb02 4403 	mla	r4, r2, r3, r4
 800bf72:	e9d7 6303 	ldrd	r6, r3, [r7, #12]
 800bf76:	4ac1      	ldr	r2, [pc, #772]	@ (800c27c <mktime+0x334>)
 800bf78:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800bf7c:	3e01      	subs	r6, #1
 800bf7e:	2b01      	cmp	r3, #1
 800bf80:	4416      	add	r6, r2
 800bf82:	dd11      	ble.n	800bfa8 <mktime+0x60>
 800bf84:	07a9      	lsls	r1, r5, #30
 800bf86:	d10f      	bne.n	800bfa8 <mktime+0x60>
 800bf88:	2264      	movs	r2, #100	@ 0x64
 800bf8a:	fb95 f3f2 	sdiv	r3, r5, r2
 800bf8e:	fb02 5313 	mls	r3, r2, r3, r5
 800bf92:	b943      	cbnz	r3, 800bfa6 <mktime+0x5e>
 800bf94:	f205 736c 	addw	r3, r5, #1900	@ 0x76c
 800bf98:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800bf9c:	fb93 f1f2 	sdiv	r1, r3, r2
 800bfa0:	fb02 3311 	mls	r3, r2, r1, r3
 800bfa4:	b903      	cbnz	r3, 800bfa8 <mktime+0x60>
 800bfa6:	3601      	adds	r6, #1
 800bfa8:	f505 531c 	add.w	r3, r5, #9984	@ 0x2700
 800bfac:	3310      	adds	r3, #16
 800bfae:	f644 6220 	movw	r2, #20000	@ 0x4e20
 800bfb2:	4293      	cmp	r3, r2
 800bfb4:	61fe      	str	r6, [r7, #28]
 800bfb6:	f200 8167 	bhi.w	800c288 <mktime+0x340>
 800bfba:	2d46      	cmp	r5, #70	@ 0x46
 800bfbc:	f340 808e 	ble.w	800c0dc <mktime+0x194>
 800bfc0:	2346      	movs	r3, #70	@ 0x46
 800bfc2:	f240 1c6d 	movw	ip, #365	@ 0x16d
 800bfc6:	2164      	movs	r1, #100	@ 0x64
 800bfc8:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 800bfcc:	079a      	lsls	r2, r3, #30
 800bfce:	d17f      	bne.n	800c0d0 <mktime+0x188>
 800bfd0:	fb93 f2f1 	sdiv	r2, r3, r1
 800bfd4:	fb01 3212 	mls	r2, r1, r2, r3
 800bfd8:	2a00      	cmp	r2, #0
 800bfda:	d17c      	bne.n	800c0d6 <mktime+0x18e>
 800bfdc:	f203 726c 	addw	r2, r3, #1900	@ 0x76c
 800bfe0:	fb92 fef0 	sdiv	lr, r2, r0
 800bfe4:	fb00 221e 	mls	r2, r0, lr, r2
 800bfe8:	2a00      	cmp	r2, #0
 800bfea:	bf14      	ite	ne
 800bfec:	4662      	movne	r2, ip
 800bfee:	f44f 72b7 	moveq.w	r2, #366	@ 0x16e
 800bff2:	3301      	adds	r3, #1
 800bff4:	429d      	cmp	r5, r3
 800bff6:	4416      	add	r6, r2
 800bff8:	d1e8      	bne.n	800bfcc <mktime+0x84>
 800bffa:	4ba1      	ldr	r3, [pc, #644]	@ (800c280 <mktime+0x338>)
 800bffc:	ea4f 78e4 	mov.w	r8, r4, asr #31
 800c000:	fbc6 4803 	smlal	r4, r8, r6, r3
 800c004:	f000 f9fa 	bl	800c3fc <__tz_lock>
 800c008:	f000 fa04 	bl	800c414 <_tzset_unlocked>
 800c00c:	4b9d      	ldr	r3, [pc, #628]	@ (800c284 <mktime+0x33c>)
 800c00e:	681b      	ldr	r3, [r3, #0]
 800c010:	2b00      	cmp	r3, #0
 800c012:	f000 8140 	beq.w	800c296 <mktime+0x34e>
 800c016:	f8d7 a020 	ldr.w	sl, [r7, #32]
 800c01a:	6978      	ldr	r0, [r7, #20]
 800c01c:	4653      	mov	r3, sl
 800c01e:	2b01      	cmp	r3, #1
 800c020:	bfa8      	it	ge
 800c022:	2301      	movge	r3, #1
 800c024:	9301      	str	r3, [sp, #4]
 800c026:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800c02a:	f200 706c 	addw	r0, r0, #1900	@ 0x76c
 800c02e:	4283      	cmp	r3, r0
 800c030:	f040 8096 	bne.w	800c160 <mktime+0x218>
 800c034:	e9d9 2108 	ldrd	r2, r1, [r9, #32]
 800c038:	f8d9 0050 	ldr.w	r0, [r9, #80]	@ 0x50
 800c03c:	f8d9 c04c 	ldr.w	ip, [r9, #76]	@ 0x4c
 800c040:	1a13      	subs	r3, r2, r0
 800c042:	9303      	str	r3, [sp, #12]
 800c044:	f8d9 3048 	ldr.w	r3, [r9, #72]	@ 0x48
 800c048:	9302      	str	r3, [sp, #8]
 800c04a:	9a02      	ldr	r2, [sp, #8]
 800c04c:	f8d9 3028 	ldr.w	r3, [r9, #40]	@ 0x28
 800c050:	eb61 7be0 	sbc.w	fp, r1, r0, asr #31
 800c054:	ebb2 0e03 	subs.w	lr, r2, r3
 800c058:	eb6c 71e3 	sbc.w	r1, ip, r3, asr #31
 800c05c:	4574      	cmp	r4, lr
 800c05e:	eb78 0201 	sbcs.w	r2, r8, r1
 800c062:	f280 8085 	bge.w	800c170 <mktime+0x228>
 800c066:	f8d9 2000 	ldr.w	r2, [r9]
 800c06a:	2a00      	cmp	r2, #0
 800c06c:	f000 808d 	beq.w	800c18a <mktime+0x242>
 800c070:	9a03      	ldr	r2, [sp, #12]
 800c072:	4294      	cmp	r4, r2
 800c074:	eb78 020b 	sbcs.w	r2, r8, fp
 800c078:	f2c0 810a 	blt.w	800c290 <mktime+0x348>
 800c07c:	4574      	cmp	r4, lr
 800c07e:	eb78 0101 	sbcs.w	r1, r8, r1
 800c082:	bfb4      	ite	lt
 800c084:	f04f 0b01 	movlt.w	fp, #1
 800c088:	f04f 0b00 	movge.w	fp, #0
 800c08c:	f1ba 0f00 	cmp.w	sl, #0
 800c090:	f280 8087 	bge.w	800c1a2 <mktime+0x25a>
 800c094:	f1bb 0f01 	cmp.w	fp, #1
 800c098:	f040 80ff 	bne.w	800c29a <mktime+0x352>
 800c09c:	f8d9 3050 	ldr.w	r3, [r9, #80]	@ 0x50
 800c0a0:	191c      	adds	r4, r3, r4
 800c0a2:	eb48 78e3 	adc.w	r8, r8, r3, asr #31
 800c0a6:	f04f 0b01 	mov.w	fp, #1
 800c0aa:	f000 f9ad 	bl	800c408 <__tz_unlock>
 800c0ae:	3604      	adds	r6, #4
 800c0b0:	2307      	movs	r3, #7
 800c0b2:	fb96 f3f3 	sdiv	r3, r6, r3
 800c0b6:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800c0ba:	1af6      	subs	r6, r6, r3
 800c0bc:	f100 80db 	bmi.w	800c276 <mktime+0x32e>
 800c0c0:	f8c7 b020 	str.w	fp, [r7, #32]
 800c0c4:	61be      	str	r6, [r7, #24]
 800c0c6:	4620      	mov	r0, r4
 800c0c8:	4641      	mov	r1, r8
 800c0ca:	b005      	add	sp, #20
 800c0cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c0d0:	f240 126d 	movw	r2, #365	@ 0x16d
 800c0d4:	e78d      	b.n	800bff2 <mktime+0xaa>
 800c0d6:	f44f 72b7 	mov.w	r2, #366	@ 0x16e
 800c0da:	e78a      	b.n	800bff2 <mktime+0xaa>
 800c0dc:	d08d      	beq.n	800bffa <mktime+0xb2>
 800c0de:	2345      	movs	r3, #69	@ 0x45
 800c0e0:	f240 1c6d 	movw	ip, #365	@ 0x16d
 800c0e4:	2164      	movs	r1, #100	@ 0x64
 800c0e6:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 800c0ea:	e012      	b.n	800c112 <mktime+0x1ca>
 800c0ec:	bb62      	cbnz	r2, 800c148 <mktime+0x200>
 800c0ee:	fb93 f2f1 	sdiv	r2, r3, r1
 800c0f2:	fb01 3212 	mls	r2, r1, r2, r3
 800c0f6:	bb52      	cbnz	r2, 800c14e <mktime+0x206>
 800c0f8:	f203 726c 	addw	r2, r3, #1900	@ 0x76c
 800c0fc:	fb92 fef0 	sdiv	lr, r2, r0
 800c100:	fb00 221e 	mls	r2, r0, lr, r2
 800c104:	2a00      	cmp	r2, #0
 800c106:	bf14      	ite	ne
 800c108:	4662      	movne	r2, ip
 800c10a:	f44f 72b7 	moveq.w	r2, #366	@ 0x16e
 800c10e:	1ab6      	subs	r6, r6, r2
 800c110:	3b01      	subs	r3, #1
 800c112:	429d      	cmp	r5, r3
 800c114:	f003 0203 	and.w	r2, r3, #3
 800c118:	dbe8      	blt.n	800c0ec <mktime+0x1a4>
 800c11a:	b9da      	cbnz	r2, 800c154 <mktime+0x20c>
 800c11c:	2264      	movs	r2, #100	@ 0x64
 800c11e:	fb95 f3f2 	sdiv	r3, r5, r2
 800c122:	fb02 5313 	mls	r3, r2, r3, r5
 800c126:	b9c3      	cbnz	r3, 800c15a <mktime+0x212>
 800c128:	f205 736c 	addw	r3, r5, #1900	@ 0x76c
 800c12c:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800c130:	fb93 f1f2 	sdiv	r1, r3, r2
 800c134:	fb02 3311 	mls	r3, r2, r1, r3
 800c138:	2b00      	cmp	r3, #0
 800c13a:	f240 136d 	movw	r3, #365	@ 0x16d
 800c13e:	bf08      	it	eq
 800c140:	f44f 73b7 	moveq.w	r3, #366	@ 0x16e
 800c144:	1af6      	subs	r6, r6, r3
 800c146:	e758      	b.n	800bffa <mktime+0xb2>
 800c148:	f240 126d 	movw	r2, #365	@ 0x16d
 800c14c:	e7df      	b.n	800c10e <mktime+0x1c6>
 800c14e:	f44f 72b7 	mov.w	r2, #366	@ 0x16e
 800c152:	e7dc      	b.n	800c10e <mktime+0x1c6>
 800c154:	f240 136d 	movw	r3, #365	@ 0x16d
 800c158:	e7f4      	b.n	800c144 <mktime+0x1fc>
 800c15a:	f44f 73b7 	mov.w	r3, #366	@ 0x16e
 800c15e:	e7f1      	b.n	800c144 <mktime+0x1fc>
 800c160:	f000 f8a2 	bl	800c2a8 <__tzcalc_limits>
 800c164:	2800      	cmp	r0, #0
 800c166:	f47f af65 	bne.w	800c034 <mktime+0xec>
 800c16a:	f8dd b004 	ldr.w	fp, [sp, #4]
 800c16e:	e791      	b.n	800c094 <mktime+0x14c>
 800c170:	9a02      	ldr	r2, [sp, #8]
 800c172:	1a12      	subs	r2, r2, r0
 800c174:	9202      	str	r2, [sp, #8]
 800c176:	ea4f 72e0 	mov.w	r2, r0, asr #31
 800c17a:	eb6c 0c02 	sbc.w	ip, ip, r2
 800c17e:	9a02      	ldr	r2, [sp, #8]
 800c180:	4294      	cmp	r4, r2
 800c182:	eb78 0c0c 	sbcs.w	ip, r8, ip
 800c186:	dbf0      	blt.n	800c16a <mktime+0x222>
 800c188:	e76d      	b.n	800c066 <mktime+0x11e>
 800c18a:	9a03      	ldr	r2, [sp, #12]
 800c18c:	4294      	cmp	r4, r2
 800c18e:	eb78 020b 	sbcs.w	r2, r8, fp
 800c192:	f6ff af73 	blt.w	800c07c <mktime+0x134>
 800c196:	f1ba 0f00 	cmp.w	sl, #0
 800c19a:	f6ff af7f 	blt.w	800c09c <mktime+0x154>
 800c19e:	f04f 0b01 	mov.w	fp, #1
 800c1a2:	9a01      	ldr	r2, [sp, #4]
 800c1a4:	ea82 020b 	eor.w	r2, r2, fp
 800c1a8:	2a01      	cmp	r2, #1
 800c1aa:	f47f af73 	bne.w	800c094 <mktime+0x14c>
 800c1ae:	f1bb 0f00 	cmp.w	fp, #0
 800c1b2:	d035      	beq.n	800c220 <mktime+0x2d8>
 800c1b4:	1a1b      	subs	r3, r3, r0
 800c1b6:	683a      	ldr	r2, [r7, #0]
 800c1b8:	f8d7 a00c 	ldr.w	sl, [r7, #12]
 800c1bc:	441a      	add	r2, r3
 800c1be:	191c      	adds	r4, r3, r4
 800c1c0:	603a      	str	r2, [r7, #0]
 800c1c2:	4638      	mov	r0, r7
 800c1c4:	eb48 78e3 	adc.w	r8, r8, r3, asr #31
 800c1c8:	f7ff fdea 	bl	800bda0 <validate_structure>
 800c1cc:	68fa      	ldr	r2, [r7, #12]
 800c1ce:	ebb2 020a 	subs.w	r2, r2, sl
 800c1d2:	f43f af5f 	beq.w	800c094 <mktime+0x14c>
 800c1d6:	2a01      	cmp	r2, #1
 800c1d8:	dc24      	bgt.n	800c224 <mktime+0x2dc>
 800c1da:	1c93      	adds	r3, r2, #2
 800c1dc:	bfd8      	it	le
 800c1de:	2201      	movle	r2, #1
 800c1e0:	69fb      	ldr	r3, [r7, #28]
 800c1e2:	18d3      	adds	r3, r2, r3
 800c1e4:	d527      	bpl.n	800c236 <mktime+0x2ee>
 800c1e6:	1e6b      	subs	r3, r5, #1
 800c1e8:	0798      	lsls	r0, r3, #30
 800c1ea:	d11e      	bne.n	800c22a <mktime+0x2e2>
 800c1ec:	2164      	movs	r1, #100	@ 0x64
 800c1ee:	fb93 f0f1 	sdiv	r0, r3, r1
 800c1f2:	fb01 3310 	mls	r3, r1, r0, r3
 800c1f6:	b9db      	cbnz	r3, 800c230 <mktime+0x2e8>
 800c1f8:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 800c1fc:	f205 756b 	addw	r5, r5, #1899	@ 0x76b
 800c200:	fb95 f1f3 	sdiv	r1, r5, r3
 800c204:	fb03 5511 	mls	r5, r3, r1, r5
 800c208:	2d00      	cmp	r5, #0
 800c20a:	f240 136d 	movw	r3, #365	@ 0x16d
 800c20e:	bf18      	it	ne
 800c210:	f44f 73b6 	movne.w	r3, #364	@ 0x16c
 800c214:	61fb      	str	r3, [r7, #28]
 800c216:	4416      	add	r6, r2
 800c218:	e73c      	b.n	800c094 <mktime+0x14c>
 800c21a:	f04f 0b00 	mov.w	fp, #0
 800c21e:	e7c0      	b.n	800c1a2 <mktime+0x25a>
 800c220:	1ac3      	subs	r3, r0, r3
 800c222:	e7c8      	b.n	800c1b6 <mktime+0x26e>
 800c224:	f04f 32ff 	mov.w	r2, #4294967295
 800c228:	e7da      	b.n	800c1e0 <mktime+0x298>
 800c22a:	f44f 73b6 	mov.w	r3, #364	@ 0x16c
 800c22e:	e7f1      	b.n	800c214 <mktime+0x2cc>
 800c230:	f240 136d 	movw	r3, #365	@ 0x16d
 800c234:	e7ee      	b.n	800c214 <mktime+0x2cc>
 800c236:	07a9      	lsls	r1, r5, #30
 800c238:	d117      	bne.n	800c26a <mktime+0x322>
 800c23a:	2064      	movs	r0, #100	@ 0x64
 800c23c:	fb95 f1f0 	sdiv	r1, r5, r0
 800c240:	fb00 5111 	mls	r1, r0, r1, r5
 800c244:	b9a1      	cbnz	r1, 800c270 <mktime+0x328>
 800c246:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 800c24a:	f205 756c 	addw	r5, r5, #1900	@ 0x76c
 800c24e:	fb95 f0f1 	sdiv	r0, r5, r1
 800c252:	fb01 5510 	mls	r5, r1, r0, r5
 800c256:	2d00      	cmp	r5, #0
 800c258:	f240 116d 	movw	r1, #365	@ 0x16d
 800c25c:	bf08      	it	eq
 800c25e:	f44f 71b7 	moveq.w	r1, #366	@ 0x16e
 800c262:	428b      	cmp	r3, r1
 800c264:	bfa8      	it	ge
 800c266:	1a5b      	subge	r3, r3, r1
 800c268:	e7d4      	b.n	800c214 <mktime+0x2cc>
 800c26a:	f240 116d 	movw	r1, #365	@ 0x16d
 800c26e:	e7f8      	b.n	800c262 <mktime+0x31a>
 800c270:	f44f 71b7 	mov.w	r1, #366	@ 0x16e
 800c274:	e7f5      	b.n	800c262 <mktime+0x31a>
 800c276:	3607      	adds	r6, #7
 800c278:	e722      	b.n	800c0c0 <mktime+0x178>
 800c27a:	bf00      	nop
 800c27c:	08011f78 	.word	0x08011f78
 800c280:	00015180 	.word	0x00015180
 800c284:	20009220 	.word	0x20009220
 800c288:	f04f 34ff 	mov.w	r4, #4294967295
 800c28c:	46a0      	mov	r8, r4
 800c28e:	e71a      	b.n	800c0c6 <mktime+0x17e>
 800c290:	f1ba 0f00 	cmp.w	sl, #0
 800c294:	dac1      	bge.n	800c21a <mktime+0x2d2>
 800c296:	f04f 0b00 	mov.w	fp, #0
 800c29a:	f8d9 3028 	ldr.w	r3, [r9, #40]	@ 0x28
 800c29e:	191c      	adds	r4, r3, r4
 800c2a0:	eb48 78e3 	adc.w	r8, r8, r3, asr #31
 800c2a4:	e701      	b.n	800c0aa <mktime+0x162>
 800c2a6:	bf00      	nop

0800c2a8 <__tzcalc_limits>:
 800c2a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c2ac:	4604      	mov	r4, r0
 800c2ae:	f003 fac5 	bl	800f83c <__gettzinfo>
 800c2b2:	f240 73b1 	movw	r3, #1969	@ 0x7b1
 800c2b6:	429c      	cmp	r4, r3
 800c2b8:	f340 8099 	ble.w	800c3ee <__tzcalc_limits+0x146>
 800c2bc:	f46f 67f6 	mvn.w	r7, #1968	@ 0x7b0
 800c2c0:	19e5      	adds	r5, r4, r7
 800c2c2:	f2a4 73b2 	subw	r3, r4, #1970	@ 0x7b2
 800c2c6:	f240 126d 	movw	r2, #365	@ 0x16d
 800c2ca:	10ad      	asrs	r5, r5, #2
 800c2cc:	fb02 5503 	mla	r5, r2, r3, r5
 800c2d0:	f46f 6cc8 	mvn.w	ip, #1600	@ 0x640
 800c2d4:	f06f 0263 	mvn.w	r2, #99	@ 0x63
 800c2d8:	f2a4 736d 	subw	r3, r4, #1901	@ 0x76d
 800c2dc:	4f45      	ldr	r7, [pc, #276]	@ (800c3f4 <__tzcalc_limits+0x14c>)
 800c2de:	fb93 f3f2 	sdiv	r3, r3, r2
 800c2e2:	441d      	add	r5, r3
 800c2e4:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800c2e8:	eb04 030c 	add.w	r3, r4, ip
 800c2ec:	6044      	str	r4, [r0, #4]
 800c2ee:	fbb3 f3f2 	udiv	r3, r3, r2
 800c2f2:	4601      	mov	r1, r0
 800c2f4:	441d      	add	r5, r3
 800c2f6:	f100 0c50 	add.w	ip, r0, #80	@ 0x50
 800c2fa:	7a0b      	ldrb	r3, [r1, #8]
 800c2fc:	694a      	ldr	r2, [r1, #20]
 800c2fe:	2b4a      	cmp	r3, #74	@ 0x4a
 800c300:	d133      	bne.n	800c36a <__tzcalc_limits+0xc2>
 800c302:	07a6      	lsls	r6, r4, #30
 800c304:	eb05 0302 	add.w	r3, r5, r2
 800c308:	d106      	bne.n	800c318 <__tzcalc_limits+0x70>
 800c30a:	f04f 0e64 	mov.w	lr, #100	@ 0x64
 800c30e:	fb94 f6fe 	sdiv	r6, r4, lr
 800c312:	fb0e 4616 	mls	r6, lr, r6, r4
 800c316:	b936      	cbnz	r6, 800c326 <__tzcalc_limits+0x7e>
 800c318:	f44f 7ec8 	mov.w	lr, #400	@ 0x190
 800c31c:	fb94 f6fe 	sdiv	r6, r4, lr
 800c320:	fb0e 4616 	mls	r6, lr, r6, r4
 800c324:	b9fe      	cbnz	r6, 800c366 <__tzcalc_limits+0xbe>
 800c326:	2a3b      	cmp	r2, #59	@ 0x3b
 800c328:	bfd4      	ite	le
 800c32a:	2200      	movle	r2, #0
 800c32c:	2201      	movgt	r2, #1
 800c32e:	4413      	add	r3, r2
 800c330:	3b01      	subs	r3, #1
 800c332:	698a      	ldr	r2, [r1, #24]
 800c334:	17d6      	asrs	r6, r2, #31
 800c336:	fbc3 2607 	smlal	r2, r6, r3, r7
 800c33a:	6a8b      	ldr	r3, [r1, #40]	@ 0x28
 800c33c:	18d2      	adds	r2, r2, r3
 800c33e:	eb46 73e3 	adc.w	r3, r6, r3, asr #31
 800c342:	e9c1 2308 	strd	r2, r3, [r1, #32]
 800c346:	3128      	adds	r1, #40	@ 0x28
 800c348:	458c      	cmp	ip, r1
 800c34a:	d1d6      	bne.n	800c2fa <__tzcalc_limits+0x52>
 800c34c:	e9d0 4308 	ldrd	r4, r3, [r0, #32]
 800c350:	e9d0 1212 	ldrd	r1, r2, [r0, #72]	@ 0x48
 800c354:	428c      	cmp	r4, r1
 800c356:	4193      	sbcs	r3, r2
 800c358:	bfb4      	ite	lt
 800c35a:	2301      	movlt	r3, #1
 800c35c:	2300      	movge	r3, #0
 800c35e:	6003      	str	r3, [r0, #0]
 800c360:	2001      	movs	r0, #1
 800c362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c366:	2200      	movs	r2, #0
 800c368:	e7e1      	b.n	800c32e <__tzcalc_limits+0x86>
 800c36a:	2b44      	cmp	r3, #68	@ 0x44
 800c36c:	d101      	bne.n	800c372 <__tzcalc_limits+0xca>
 800c36e:	18ab      	adds	r3, r5, r2
 800c370:	e7df      	b.n	800c332 <__tzcalc_limits+0x8a>
 800c372:	07a3      	lsls	r3, r4, #30
 800c374:	d105      	bne.n	800c382 <__tzcalc_limits+0xda>
 800c376:	2664      	movs	r6, #100	@ 0x64
 800c378:	fb94 f3f6 	sdiv	r3, r4, r6
 800c37c:	fb06 4313 	mls	r3, r6, r3, r4
 800c380:	bb7b      	cbnz	r3, 800c3e2 <__tzcalc_limits+0x13a>
 800c382:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 800c386:	fb94 f6f3 	sdiv	r6, r4, r3
 800c38a:	fb03 4616 	mls	r6, r3, r6, r4
 800c38e:	fab6 f686 	clz	r6, r6
 800c392:	0976      	lsrs	r6, r6, #5
 800c394:	f8df e060 	ldr.w	lr, [pc, #96]	@ 800c3f8 <__tzcalc_limits+0x150>
 800c398:	f8d1 900c 	ldr.w	r9, [r1, #12]
 800c39c:	f04f 0a30 	mov.w	sl, #48	@ 0x30
 800c3a0:	462b      	mov	r3, r5
 800c3a2:	f04f 0800 	mov.w	r8, #0
 800c3a6:	fb0a e606 	mla	r6, sl, r6, lr
 800c3aa:	f108 0801 	add.w	r8, r8, #1
 800c3ae:	45c1      	cmp	r9, r8
 800c3b0:	f856 e028 	ldr.w	lr, [r6, r8, lsl #2]
 800c3b4:	dc17      	bgt.n	800c3e6 <__tzcalc_limits+0x13e>
 800c3b6:	f103 0804 	add.w	r8, r3, #4
 800c3ba:	2607      	movs	r6, #7
 800c3bc:	fb98 f6f6 	sdiv	r6, r8, r6
 800c3c0:	ebc6 06c6 	rsb	r6, r6, r6, lsl #3
 800c3c4:	eba8 0606 	sub.w	r6, r8, r6
 800c3c8:	1b92      	subs	r2, r2, r6
 800c3ca:	690e      	ldr	r6, [r1, #16]
 800c3cc:	f106 36ff 	add.w	r6, r6, #4294967295
 800c3d0:	bf48      	it	mi
 800c3d2:	3207      	addmi	r2, #7
 800c3d4:	ebc6 06c6 	rsb	r6, r6, r6, lsl #3
 800c3d8:	4432      	add	r2, r6
 800c3da:	4572      	cmp	r2, lr
 800c3dc:	da05      	bge.n	800c3ea <__tzcalc_limits+0x142>
 800c3de:	4413      	add	r3, r2
 800c3e0:	e7a7      	b.n	800c332 <__tzcalc_limits+0x8a>
 800c3e2:	2601      	movs	r6, #1
 800c3e4:	e7d6      	b.n	800c394 <__tzcalc_limits+0xec>
 800c3e6:	4473      	add	r3, lr
 800c3e8:	e7df      	b.n	800c3aa <__tzcalc_limits+0x102>
 800c3ea:	3a07      	subs	r2, #7
 800c3ec:	e7f5      	b.n	800c3da <__tzcalc_limits+0x132>
 800c3ee:	2000      	movs	r0, #0
 800c3f0:	e7b7      	b.n	800c362 <__tzcalc_limits+0xba>
 800c3f2:	bf00      	nop
 800c3f4:	00015180 	.word	0x00015180
 800c3f8:	08012298 	.word	0x08012298

0800c3fc <__tz_lock>:
 800c3fc:	4801      	ldr	r0, [pc, #4]	@ (800c404 <__tz_lock+0x8>)
 800c3fe:	f7f8 bdc0 	b.w	8004f82 <__retarget_lock_acquire>
 800c402:	bf00      	nop
 800c404:	20003950 	.word	0x20003950

0800c408 <__tz_unlock>:
 800c408:	4801      	ldr	r0, [pc, #4]	@ (800c410 <__tz_unlock+0x8>)
 800c40a:	f7f8 bdc4 	b.w	8004f96 <__retarget_lock_release>
 800c40e:	bf00      	nop
 800c410:	20003950 	.word	0x20003950

0800c414 <_tzset_unlocked>:
 800c414:	4b01      	ldr	r3, [pc, #4]	@ (800c41c <_tzset_unlocked+0x8>)
 800c416:	6818      	ldr	r0, [r3, #0]
 800c418:	f000 b802 	b.w	800c420 <_tzset_unlocked_r>
 800c41c:	200001a4 	.word	0x200001a4

0800c420 <_tzset_unlocked_r>:
 800c420:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c424:	b08d      	sub	sp, #52	@ 0x34
 800c426:	4607      	mov	r7, r0
 800c428:	f003 fa08 	bl	800f83c <__gettzinfo>
 800c42c:	49bc      	ldr	r1, [pc, #752]	@ (800c720 <_tzset_unlocked_r+0x300>)
 800c42e:	4dbd      	ldr	r5, [pc, #756]	@ (800c724 <_tzset_unlocked_r+0x304>)
 800c430:	4604      	mov	r4, r0
 800c432:	4638      	mov	r0, r7
 800c434:	f001 fd2c 	bl	800de90 <_getenv_r>
 800c438:	4606      	mov	r6, r0
 800c43a:	bb10      	cbnz	r0, 800c482 <_tzset_unlocked_r+0x62>
 800c43c:	4bba      	ldr	r3, [pc, #744]	@ (800c728 <_tzset_unlocked_r+0x308>)
 800c43e:	4abb      	ldr	r2, [pc, #748]	@ (800c72c <_tzset_unlocked_r+0x30c>)
 800c440:	6018      	str	r0, [r3, #0]
 800c442:	4bbb      	ldr	r3, [pc, #748]	@ (800c730 <_tzset_unlocked_r+0x310>)
 800c444:	62a0      	str	r0, [r4, #40]	@ 0x28
 800c446:	6018      	str	r0, [r3, #0]
 800c448:	4bba      	ldr	r3, [pc, #744]	@ (800c734 <_tzset_unlocked_r+0x314>)
 800c44a:	6520      	str	r0, [r4, #80]	@ 0x50
 800c44c:	e9c3 2200 	strd	r2, r2, [r3]
 800c450:	214a      	movs	r1, #74	@ 0x4a
 800c452:	2200      	movs	r2, #0
 800c454:	2300      	movs	r3, #0
 800c456:	e9c4 0003 	strd	r0, r0, [r4, #12]
 800c45a:	e9c4 0005 	strd	r0, r0, [r4, #20]
 800c45e:	e9c4 000d 	strd	r0, r0, [r4, #52]	@ 0x34
 800c462:	e9c4 000f 	strd	r0, r0, [r4, #60]	@ 0x3c
 800c466:	e9c4 2308 	strd	r2, r3, [r4, #32]
 800c46a:	e9c4 2312 	strd	r2, r3, [r4, #72]	@ 0x48
 800c46e:	6828      	ldr	r0, [r5, #0]
 800c470:	7221      	strb	r1, [r4, #8]
 800c472:	f884 1030 	strb.w	r1, [r4, #48]	@ 0x30
 800c476:	f7fd fbdd 	bl	8009c34 <free>
 800c47a:	602e      	str	r6, [r5, #0]
 800c47c:	b00d      	add	sp, #52	@ 0x34
 800c47e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c482:	6829      	ldr	r1, [r5, #0]
 800c484:	2900      	cmp	r1, #0
 800c486:	f040 808e 	bne.w	800c5a6 <_tzset_unlocked_r+0x186>
 800c48a:	6828      	ldr	r0, [r5, #0]
 800c48c:	f7fd fbd2 	bl	8009c34 <free>
 800c490:	4630      	mov	r0, r6
 800c492:	f7f3 fefd 	bl	8000290 <strlen>
 800c496:	1c41      	adds	r1, r0, #1
 800c498:	4638      	mov	r0, r7
 800c49a:	f7fd fbf5 	bl	8009c88 <_malloc_r>
 800c49e:	6028      	str	r0, [r5, #0]
 800c4a0:	2800      	cmp	r0, #0
 800c4a2:	f040 8086 	bne.w	800c5b2 <_tzset_unlocked_r+0x192>
 800c4a6:	4aa2      	ldr	r2, [pc, #648]	@ (800c730 <_tzset_unlocked_r+0x310>)
 800c4a8:	f8df 8288 	ldr.w	r8, [pc, #648]	@ 800c734 <_tzset_unlocked_r+0x314>
 800c4ac:	f8df a278 	ldr.w	sl, [pc, #632]	@ 800c728 <_tzset_unlocked_r+0x308>
 800c4b0:	2300      	movs	r3, #0
 800c4b2:	6013      	str	r3, [r2, #0]
 800c4b4:	4aa0      	ldr	r2, [pc, #640]	@ (800c738 <_tzset_unlocked_r+0x318>)
 800c4b6:	f8ca 3000 	str.w	r3, [sl]
 800c4ba:	2000      	movs	r0, #0
 800c4bc:	2100      	movs	r1, #0
 800c4be:	e9c8 2200 	strd	r2, r2, [r8]
 800c4c2:	e9c4 3303 	strd	r3, r3, [r4, #12]
 800c4c6:	e9c4 3305 	strd	r3, r3, [r4, #20]
 800c4ca:	e9c4 0108 	strd	r0, r1, [r4, #32]
 800c4ce:	e9c4 330d 	strd	r3, r3, [r4, #52]	@ 0x34
 800c4d2:	e9c4 330f 	strd	r3, r3, [r4, #60]	@ 0x3c
 800c4d6:	e9c4 0112 	strd	r0, r1, [r4, #72]	@ 0x48
 800c4da:	224a      	movs	r2, #74	@ 0x4a
 800c4dc:	7222      	strb	r2, [r4, #8]
 800c4de:	62a3      	str	r3, [r4, #40]	@ 0x28
 800c4e0:	f884 2030 	strb.w	r2, [r4, #48]	@ 0x30
 800c4e4:	6523      	str	r3, [r4, #80]	@ 0x50
 800c4e6:	7833      	ldrb	r3, [r6, #0]
 800c4e8:	2b3a      	cmp	r3, #58	@ 0x3a
 800c4ea:	bf08      	it	eq
 800c4ec:	3601      	addeq	r6, #1
 800c4ee:	7833      	ldrb	r3, [r6, #0]
 800c4f0:	2b3c      	cmp	r3, #60	@ 0x3c
 800c4f2:	d162      	bne.n	800c5ba <_tzset_unlocked_r+0x19a>
 800c4f4:	1c75      	adds	r5, r6, #1
 800c4f6:	4a91      	ldr	r2, [pc, #580]	@ (800c73c <_tzset_unlocked_r+0x31c>)
 800c4f8:	4991      	ldr	r1, [pc, #580]	@ (800c740 <_tzset_unlocked_r+0x320>)
 800c4fa:	ab0a      	add	r3, sp, #40	@ 0x28
 800c4fc:	4628      	mov	r0, r5
 800c4fe:	f7ff fae5 	bl	800bacc <siscanf>
 800c502:	2800      	cmp	r0, #0
 800c504:	ddba      	ble.n	800c47c <_tzset_unlocked_r+0x5c>
 800c506:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c508:	1eda      	subs	r2, r3, #3
 800c50a:	2a07      	cmp	r2, #7
 800c50c:	d8b6      	bhi.n	800c47c <_tzset_unlocked_r+0x5c>
 800c50e:	5ceb      	ldrb	r3, [r5, r3]
 800c510:	2b3e      	cmp	r3, #62	@ 0x3e
 800c512:	d1b3      	bne.n	800c47c <_tzset_unlocked_r+0x5c>
 800c514:	3602      	adds	r6, #2
 800c516:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c518:	18f5      	adds	r5, r6, r3
 800c51a:	5cf3      	ldrb	r3, [r6, r3]
 800c51c:	2b2d      	cmp	r3, #45	@ 0x2d
 800c51e:	d15a      	bne.n	800c5d6 <_tzset_unlocked_r+0x1b6>
 800c520:	3501      	adds	r5, #1
 800c522:	f04f 39ff 	mov.w	r9, #4294967295
 800c526:	2300      	movs	r3, #0
 800c528:	f8ad 301e 	strh.w	r3, [sp, #30]
 800c52c:	f8ad 3020 	strh.w	r3, [sp, #32]
 800c530:	af08      	add	r7, sp, #32
 800c532:	ab0a      	add	r3, sp, #40	@ 0x28
 800c534:	e9cd 3701 	strd	r3, r7, [sp, #4]
 800c538:	9303      	str	r3, [sp, #12]
 800c53a:	f10d 031e 	add.w	r3, sp, #30
 800c53e:	9300      	str	r3, [sp, #0]
 800c540:	4980      	ldr	r1, [pc, #512]	@ (800c744 <_tzset_unlocked_r+0x324>)
 800c542:	ab0a      	add	r3, sp, #40	@ 0x28
 800c544:	aa07      	add	r2, sp, #28
 800c546:	4628      	mov	r0, r5
 800c548:	f7ff fac0 	bl	800bacc <siscanf>
 800c54c:	2800      	cmp	r0, #0
 800c54e:	dd95      	ble.n	800c47c <_tzset_unlocked_r+0x5c>
 800c550:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 800c554:	f8bd 6020 	ldrh.w	r6, [sp, #32]
 800c558:	223c      	movs	r2, #60	@ 0x3c
 800c55a:	fb02 6603 	mla	r6, r2, r3, r6
 800c55e:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 800c562:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 800c566:	fb02 6603 	mla	r6, r2, r3, r6
 800c56a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c56c:	fb09 f606 	mul.w	r6, r9, r6
 800c570:	eb05 0903 	add.w	r9, r5, r3
 800c574:	5ceb      	ldrb	r3, [r5, r3]
 800c576:	2b3c      	cmp	r3, #60	@ 0x3c
 800c578:	f040 80ee 	bne.w	800c758 <_tzset_unlocked_r+0x338>
 800c57c:	f109 0501 	add.w	r5, r9, #1
 800c580:	4a71      	ldr	r2, [pc, #452]	@ (800c748 <_tzset_unlocked_r+0x328>)
 800c582:	496f      	ldr	r1, [pc, #444]	@ (800c740 <_tzset_unlocked_r+0x320>)
 800c584:	ab0a      	add	r3, sp, #40	@ 0x28
 800c586:	4628      	mov	r0, r5
 800c588:	f7ff faa0 	bl	800bacc <siscanf>
 800c58c:	2800      	cmp	r0, #0
 800c58e:	dc28      	bgt.n	800c5e2 <_tzset_unlocked_r+0x1c2>
 800c590:	f899 3001 	ldrb.w	r3, [r9, #1]
 800c594:	2b3e      	cmp	r3, #62	@ 0x3e
 800c596:	d124      	bne.n	800c5e2 <_tzset_unlocked_r+0x1c2>
 800c598:	4b68      	ldr	r3, [pc, #416]	@ (800c73c <_tzset_unlocked_r+0x31c>)
 800c59a:	62a6      	str	r6, [r4, #40]	@ 0x28
 800c59c:	e9c8 3300 	strd	r3, r3, [r8]
 800c5a0:	f8ca 6000 	str.w	r6, [sl]
 800c5a4:	e76a      	b.n	800c47c <_tzset_unlocked_r+0x5c>
 800c5a6:	f7f3 fe13 	bl	80001d0 <strcmp>
 800c5aa:	2800      	cmp	r0, #0
 800c5ac:	f47f af6d 	bne.w	800c48a <_tzset_unlocked_r+0x6a>
 800c5b0:	e764      	b.n	800c47c <_tzset_unlocked_r+0x5c>
 800c5b2:	4631      	mov	r1, r6
 800c5b4:	f000 fa30 	bl	800ca18 <strcpy>
 800c5b8:	e775      	b.n	800c4a6 <_tzset_unlocked_r+0x86>
 800c5ba:	4a60      	ldr	r2, [pc, #384]	@ (800c73c <_tzset_unlocked_r+0x31c>)
 800c5bc:	4963      	ldr	r1, [pc, #396]	@ (800c74c <_tzset_unlocked_r+0x32c>)
 800c5be:	ab0a      	add	r3, sp, #40	@ 0x28
 800c5c0:	4630      	mov	r0, r6
 800c5c2:	f7ff fa83 	bl	800bacc <siscanf>
 800c5c6:	2800      	cmp	r0, #0
 800c5c8:	f77f af58 	ble.w	800c47c <_tzset_unlocked_r+0x5c>
 800c5cc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c5ce:	3b03      	subs	r3, #3
 800c5d0:	2b07      	cmp	r3, #7
 800c5d2:	d9a0      	bls.n	800c516 <_tzset_unlocked_r+0xf6>
 800c5d4:	e752      	b.n	800c47c <_tzset_unlocked_r+0x5c>
 800c5d6:	2b2b      	cmp	r3, #43	@ 0x2b
 800c5d8:	bf08      	it	eq
 800c5da:	3501      	addeq	r5, #1
 800c5dc:	f04f 0901 	mov.w	r9, #1
 800c5e0:	e7a1      	b.n	800c526 <_tzset_unlocked_r+0x106>
 800c5e2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c5e4:	1eda      	subs	r2, r3, #3
 800c5e6:	2a07      	cmp	r2, #7
 800c5e8:	f63f af48 	bhi.w	800c47c <_tzset_unlocked_r+0x5c>
 800c5ec:	5ceb      	ldrb	r3, [r5, r3]
 800c5ee:	2b3e      	cmp	r3, #62	@ 0x3e
 800c5f0:	f47f af44 	bne.w	800c47c <_tzset_unlocked_r+0x5c>
 800c5f4:	f109 0902 	add.w	r9, r9, #2
 800c5f8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c5fa:	eb09 0503 	add.w	r5, r9, r3
 800c5fe:	f819 3003 	ldrb.w	r3, [r9, r3]
 800c602:	2b2d      	cmp	r3, #45	@ 0x2d
 800c604:	f040 80b7 	bne.w	800c776 <_tzset_unlocked_r+0x356>
 800c608:	3501      	adds	r5, #1
 800c60a:	f04f 39ff 	mov.w	r9, #4294967295
 800c60e:	2300      	movs	r3, #0
 800c610:	f8ad 301c 	strh.w	r3, [sp, #28]
 800c614:	f8ad 301e 	strh.w	r3, [sp, #30]
 800c618:	f8ad 3020 	strh.w	r3, [sp, #32]
 800c61c:	930a      	str	r3, [sp, #40]	@ 0x28
 800c61e:	ab0a      	add	r3, sp, #40	@ 0x28
 800c620:	e9cd 7302 	strd	r7, r3, [sp, #8]
 800c624:	9301      	str	r3, [sp, #4]
 800c626:	f10d 031e 	add.w	r3, sp, #30
 800c62a:	9300      	str	r3, [sp, #0]
 800c62c:	4945      	ldr	r1, [pc, #276]	@ (800c744 <_tzset_unlocked_r+0x324>)
 800c62e:	ab0a      	add	r3, sp, #40	@ 0x28
 800c630:	aa07      	add	r2, sp, #28
 800c632:	4628      	mov	r0, r5
 800c634:	f7ff fa4a 	bl	800bacc <siscanf>
 800c638:	2800      	cmp	r0, #0
 800c63a:	f300 80a2 	bgt.w	800c782 <_tzset_unlocked_r+0x362>
 800c63e:	f5a6 6361 	sub.w	r3, r6, #3600	@ 0xe10
 800c642:	9304      	str	r3, [sp, #16]
 800c644:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c646:	4627      	mov	r7, r4
 800c648:	441d      	add	r5, r3
 800c64a:	f04f 0b00 	mov.w	fp, #0
 800c64e:	782b      	ldrb	r3, [r5, #0]
 800c650:	2b2c      	cmp	r3, #44	@ 0x2c
 800c652:	bf08      	it	eq
 800c654:	3501      	addeq	r5, #1
 800c656:	f895 9000 	ldrb.w	r9, [r5]
 800c65a:	f1b9 0f4d 	cmp.w	r9, #77	@ 0x4d
 800c65e:	f040 80a3 	bne.w	800c7a8 <_tzset_unlocked_r+0x388>
 800c662:	ab0a      	add	r3, sp, #40	@ 0x28
 800c664:	f10d 0226 	add.w	r2, sp, #38	@ 0x26
 800c668:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800c66c:	aa09      	add	r2, sp, #36	@ 0x24
 800c66e:	9200      	str	r2, [sp, #0]
 800c670:	4937      	ldr	r1, [pc, #220]	@ (800c750 <_tzset_unlocked_r+0x330>)
 800c672:	9303      	str	r3, [sp, #12]
 800c674:	f10d 0222 	add.w	r2, sp, #34	@ 0x22
 800c678:	4628      	mov	r0, r5
 800c67a:	f7ff fa27 	bl	800bacc <siscanf>
 800c67e:	2803      	cmp	r0, #3
 800c680:	f47f aefc 	bne.w	800c47c <_tzset_unlocked_r+0x5c>
 800c684:	f8bd 1022 	ldrh.w	r1, [sp, #34]	@ 0x22
 800c688:	1e4b      	subs	r3, r1, #1
 800c68a:	2b0b      	cmp	r3, #11
 800c68c:	f63f aef6 	bhi.w	800c47c <_tzset_unlocked_r+0x5c>
 800c690:	f8bd 2024 	ldrh.w	r2, [sp, #36]	@ 0x24
 800c694:	1e53      	subs	r3, r2, #1
 800c696:	2b04      	cmp	r3, #4
 800c698:	f63f aef0 	bhi.w	800c47c <_tzset_unlocked_r+0x5c>
 800c69c:	f8bd 3026 	ldrh.w	r3, [sp, #38]	@ 0x26
 800c6a0:	2b06      	cmp	r3, #6
 800c6a2:	f63f aeeb 	bhi.w	800c47c <_tzset_unlocked_r+0x5c>
 800c6a6:	e9c7 1203 	strd	r1, r2, [r7, #12]
 800c6aa:	f887 9008 	strb.w	r9, [r7, #8]
 800c6ae:	617b      	str	r3, [r7, #20]
 800c6b0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c6b2:	eb05 0903 	add.w	r9, r5, r3
 800c6b6:	2500      	movs	r5, #0
 800c6b8:	f04f 0302 	mov.w	r3, #2
 800c6bc:	f8ad 301c 	strh.w	r3, [sp, #28]
 800c6c0:	f8ad 501e 	strh.w	r5, [sp, #30]
 800c6c4:	f8ad 5020 	strh.w	r5, [sp, #32]
 800c6c8:	950a      	str	r5, [sp, #40]	@ 0x28
 800c6ca:	f899 3000 	ldrb.w	r3, [r9]
 800c6ce:	2b2f      	cmp	r3, #47	@ 0x2f
 800c6d0:	f040 8096 	bne.w	800c800 <_tzset_unlocked_r+0x3e0>
 800c6d4:	ab0a      	add	r3, sp, #40	@ 0x28
 800c6d6:	aa08      	add	r2, sp, #32
 800c6d8:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800c6dc:	f10d 021e 	add.w	r2, sp, #30
 800c6e0:	9200      	str	r2, [sp, #0]
 800c6e2:	491c      	ldr	r1, [pc, #112]	@ (800c754 <_tzset_unlocked_r+0x334>)
 800c6e4:	9303      	str	r3, [sp, #12]
 800c6e6:	aa07      	add	r2, sp, #28
 800c6e8:	4648      	mov	r0, r9
 800c6ea:	f7ff f9ef 	bl	800bacc <siscanf>
 800c6ee:	42a8      	cmp	r0, r5
 800c6f0:	f300 8086 	bgt.w	800c800 <_tzset_unlocked_r+0x3e0>
 800c6f4:	214a      	movs	r1, #74	@ 0x4a
 800c6f6:	2200      	movs	r2, #0
 800c6f8:	2300      	movs	r3, #0
 800c6fa:	e9c4 5503 	strd	r5, r5, [r4, #12]
 800c6fe:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800c702:	e9c4 2308 	strd	r2, r3, [r4, #32]
 800c706:	e9c4 550d 	strd	r5, r5, [r4, #52]	@ 0x34
 800c70a:	e9c4 550f 	strd	r5, r5, [r4, #60]	@ 0x3c
 800c70e:	e9c4 2312 	strd	r2, r3, [r4, #72]	@ 0x48
 800c712:	7221      	strb	r1, [r4, #8]
 800c714:	62a5      	str	r5, [r4, #40]	@ 0x28
 800c716:	f884 1030 	strb.w	r1, [r4, #48]	@ 0x30
 800c71a:	6525      	str	r5, [r4, #80]	@ 0x50
 800c71c:	e6ae      	b.n	800c47c <_tzset_unlocked_r+0x5c>
 800c71e:	bf00      	nop
 800c720:	08011fd8 	.word	0x08011fd8
 800c724:	20009200 	.word	0x20009200
 800c728:	2000921c 	.word	0x2000921c
 800c72c:	08011fdb 	.word	0x08011fdb
 800c730:	20009220 	.word	0x20009220
 800c734:	20000030 	.word	0x20000030
 800c738:	08010fa3 	.word	0x08010fa3
 800c73c:	20009210 	.word	0x20009210
 800c740:	08011fdf 	.word	0x08011fdf
 800c744:	08012014 	.word	0x08012014
 800c748:	20009204 	.word	0x20009204
 800c74c:	08011ff2 	.word	0x08011ff2
 800c750:	08012000 	.word	0x08012000
 800c754:	08012013 	.word	0x08012013
 800c758:	4a3e      	ldr	r2, [pc, #248]	@ (800c854 <_tzset_unlocked_r+0x434>)
 800c75a:	493f      	ldr	r1, [pc, #252]	@ (800c858 <_tzset_unlocked_r+0x438>)
 800c75c:	ab0a      	add	r3, sp, #40	@ 0x28
 800c75e:	4648      	mov	r0, r9
 800c760:	f7ff f9b4 	bl	800bacc <siscanf>
 800c764:	2800      	cmp	r0, #0
 800c766:	f77f af17 	ble.w	800c598 <_tzset_unlocked_r+0x178>
 800c76a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c76c:	3b03      	subs	r3, #3
 800c76e:	2b07      	cmp	r3, #7
 800c770:	f67f af42 	bls.w	800c5f8 <_tzset_unlocked_r+0x1d8>
 800c774:	e682      	b.n	800c47c <_tzset_unlocked_r+0x5c>
 800c776:	2b2b      	cmp	r3, #43	@ 0x2b
 800c778:	bf08      	it	eq
 800c77a:	3501      	addeq	r5, #1
 800c77c:	f04f 0901 	mov.w	r9, #1
 800c780:	e745      	b.n	800c60e <_tzset_unlocked_r+0x1ee>
 800c782:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 800c786:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 800c78a:	213c      	movs	r1, #60	@ 0x3c
 800c78c:	fb01 3302 	mla	r3, r1, r2, r3
 800c790:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 800c794:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 800c798:	fb01 3302 	mla	r3, r1, r2, r3
 800c79c:	fb09 f303 	mul.w	r3, r9, r3
 800c7a0:	e74f      	b.n	800c642 <_tzset_unlocked_r+0x222>
 800c7a2:	f04f 0b01 	mov.w	fp, #1
 800c7a6:	e752      	b.n	800c64e <_tzset_unlocked_r+0x22e>
 800c7a8:	f1b9 0f4a 	cmp.w	r9, #74	@ 0x4a
 800c7ac:	bf06      	itte	eq
 800c7ae:	3501      	addeq	r5, #1
 800c7b0:	464b      	moveq	r3, r9
 800c7b2:	2344      	movne	r3, #68	@ 0x44
 800c7b4:	220a      	movs	r2, #10
 800c7b6:	a90b      	add	r1, sp, #44	@ 0x2c
 800c7b8:	4628      	mov	r0, r5
 800c7ba:	9305      	str	r3, [sp, #20]
 800c7bc:	f002 f8a4 	bl	800e908 <strtoul>
 800c7c0:	f8dd 902c 	ldr.w	r9, [sp, #44]	@ 0x2c
 800c7c4:	9b05      	ldr	r3, [sp, #20]
 800c7c6:	f8ad 0026 	strh.w	r0, [sp, #38]	@ 0x26
 800c7ca:	45a9      	cmp	r9, r5
 800c7cc:	d114      	bne.n	800c7f8 <_tzset_unlocked_r+0x3d8>
 800c7ce:	234d      	movs	r3, #77	@ 0x4d
 800c7d0:	f1bb 0f00 	cmp.w	fp, #0
 800c7d4:	d107      	bne.n	800c7e6 <_tzset_unlocked_r+0x3c6>
 800c7d6:	7223      	strb	r3, [r4, #8]
 800c7d8:	2103      	movs	r1, #3
 800c7da:	2302      	movs	r3, #2
 800c7dc:	e9c4 1303 	strd	r1, r3, [r4, #12]
 800c7e0:	f8c4 b014 	str.w	fp, [r4, #20]
 800c7e4:	e767      	b.n	800c6b6 <_tzset_unlocked_r+0x296>
 800c7e6:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
 800c7ea:	220b      	movs	r2, #11
 800c7ec:	2301      	movs	r3, #1
 800c7ee:	e9c4 230d 	strd	r2, r3, [r4, #52]	@ 0x34
 800c7f2:	2300      	movs	r3, #0
 800c7f4:	63e3      	str	r3, [r4, #60]	@ 0x3c
 800c7f6:	e75e      	b.n	800c6b6 <_tzset_unlocked_r+0x296>
 800c7f8:	b280      	uxth	r0, r0
 800c7fa:	723b      	strb	r3, [r7, #8]
 800c7fc:	6178      	str	r0, [r7, #20]
 800c7fe:	e75a      	b.n	800c6b6 <_tzset_unlocked_r+0x296>
 800c800:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 800c804:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 800c808:	213c      	movs	r1, #60	@ 0x3c
 800c80a:	fb01 3302 	mla	r3, r1, r2, r3
 800c80e:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 800c812:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 800c816:	fb01 3302 	mla	r3, r1, r2, r3
 800c81a:	61bb      	str	r3, [r7, #24]
 800c81c:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 800c81e:	3728      	adds	r7, #40	@ 0x28
 800c820:	444d      	add	r5, r9
 800c822:	f1bb 0f00 	cmp.w	fp, #0
 800c826:	d0bc      	beq.n	800c7a2 <_tzset_unlocked_r+0x382>
 800c828:	9b04      	ldr	r3, [sp, #16]
 800c82a:	6523      	str	r3, [r4, #80]	@ 0x50
 800c82c:	4b0b      	ldr	r3, [pc, #44]	@ (800c85c <_tzset_unlocked_r+0x43c>)
 800c82e:	f8c8 3000 	str.w	r3, [r8]
 800c832:	6860      	ldr	r0, [r4, #4]
 800c834:	4b07      	ldr	r3, [pc, #28]	@ (800c854 <_tzset_unlocked_r+0x434>)
 800c836:	62a6      	str	r6, [r4, #40]	@ 0x28
 800c838:	f8c8 3004 	str.w	r3, [r8, #4]
 800c83c:	f7ff fd34 	bl	800c2a8 <__tzcalc_limits>
 800c840:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800c842:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 800c844:	f8ca 2000 	str.w	r2, [sl]
 800c848:	1a9b      	subs	r3, r3, r2
 800c84a:	4a05      	ldr	r2, [pc, #20]	@ (800c860 <_tzset_unlocked_r+0x440>)
 800c84c:	bf18      	it	ne
 800c84e:	2301      	movne	r3, #1
 800c850:	6013      	str	r3, [r2, #0]
 800c852:	e613      	b.n	800c47c <_tzset_unlocked_r+0x5c>
 800c854:	20009204 	.word	0x20009204
 800c858:	08011ff2 	.word	0x08011ff2
 800c85c:	20009210 	.word	0x20009210
 800c860:	20009220 	.word	0x20009220

0800c864 <_localeconv_r>:
 800c864:	4800      	ldr	r0, [pc, #0]	@ (800c868 <_localeconv_r+0x4>)
 800c866:	4770      	bx	lr
 800c868:	20000128 	.word	0x20000128

0800c86c <_close_r>:
 800c86c:	b538      	push	{r3, r4, r5, lr}
 800c86e:	4d06      	ldr	r5, [pc, #24]	@ (800c888 <_close_r+0x1c>)
 800c870:	2300      	movs	r3, #0
 800c872:	4604      	mov	r4, r0
 800c874:	4608      	mov	r0, r1
 800c876:	602b      	str	r3, [r5, #0]
 800c878:	f7f8 face 	bl	8004e18 <_close>
 800c87c:	1c43      	adds	r3, r0, #1
 800c87e:	d102      	bne.n	800c886 <_close_r+0x1a>
 800c880:	682b      	ldr	r3, [r5, #0]
 800c882:	b103      	cbz	r3, 800c886 <_close_r+0x1a>
 800c884:	6023      	str	r3, [r4, #0]
 800c886:	bd38      	pop	{r3, r4, r5, pc}
 800c888:	20009224 	.word	0x20009224

0800c88c <_reclaim_reent>:
 800c88c:	4b29      	ldr	r3, [pc, #164]	@ (800c934 <_reclaim_reent+0xa8>)
 800c88e:	681b      	ldr	r3, [r3, #0]
 800c890:	4283      	cmp	r3, r0
 800c892:	b570      	push	{r4, r5, r6, lr}
 800c894:	4604      	mov	r4, r0
 800c896:	d04b      	beq.n	800c930 <_reclaim_reent+0xa4>
 800c898:	69c3      	ldr	r3, [r0, #28]
 800c89a:	b1ab      	cbz	r3, 800c8c8 <_reclaim_reent+0x3c>
 800c89c:	68db      	ldr	r3, [r3, #12]
 800c89e:	b16b      	cbz	r3, 800c8bc <_reclaim_reent+0x30>
 800c8a0:	2500      	movs	r5, #0
 800c8a2:	69e3      	ldr	r3, [r4, #28]
 800c8a4:	68db      	ldr	r3, [r3, #12]
 800c8a6:	5959      	ldr	r1, [r3, r5]
 800c8a8:	2900      	cmp	r1, #0
 800c8aa:	d13b      	bne.n	800c924 <_reclaim_reent+0x98>
 800c8ac:	3504      	adds	r5, #4
 800c8ae:	2d80      	cmp	r5, #128	@ 0x80
 800c8b0:	d1f7      	bne.n	800c8a2 <_reclaim_reent+0x16>
 800c8b2:	69e3      	ldr	r3, [r4, #28]
 800c8b4:	4620      	mov	r0, r4
 800c8b6:	68d9      	ldr	r1, [r3, #12]
 800c8b8:	f000 ff2a 	bl	800d710 <_free_r>
 800c8bc:	69e3      	ldr	r3, [r4, #28]
 800c8be:	6819      	ldr	r1, [r3, #0]
 800c8c0:	b111      	cbz	r1, 800c8c8 <_reclaim_reent+0x3c>
 800c8c2:	4620      	mov	r0, r4
 800c8c4:	f000 ff24 	bl	800d710 <_free_r>
 800c8c8:	6961      	ldr	r1, [r4, #20]
 800c8ca:	b111      	cbz	r1, 800c8d2 <_reclaim_reent+0x46>
 800c8cc:	4620      	mov	r0, r4
 800c8ce:	f000 ff1f 	bl	800d710 <_free_r>
 800c8d2:	69e1      	ldr	r1, [r4, #28]
 800c8d4:	b111      	cbz	r1, 800c8dc <_reclaim_reent+0x50>
 800c8d6:	4620      	mov	r0, r4
 800c8d8:	f000 ff1a 	bl	800d710 <_free_r>
 800c8dc:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800c8de:	b111      	cbz	r1, 800c8e6 <_reclaim_reent+0x5a>
 800c8e0:	4620      	mov	r0, r4
 800c8e2:	f000 ff15 	bl	800d710 <_free_r>
 800c8e6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c8e8:	b111      	cbz	r1, 800c8f0 <_reclaim_reent+0x64>
 800c8ea:	4620      	mov	r0, r4
 800c8ec:	f000 ff10 	bl	800d710 <_free_r>
 800c8f0:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800c8f2:	b111      	cbz	r1, 800c8fa <_reclaim_reent+0x6e>
 800c8f4:	4620      	mov	r0, r4
 800c8f6:	f000 ff0b 	bl	800d710 <_free_r>
 800c8fa:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800c8fc:	b111      	cbz	r1, 800c904 <_reclaim_reent+0x78>
 800c8fe:	4620      	mov	r0, r4
 800c900:	f000 ff06 	bl	800d710 <_free_r>
 800c904:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800c906:	b111      	cbz	r1, 800c90e <_reclaim_reent+0x82>
 800c908:	4620      	mov	r0, r4
 800c90a:	f000 ff01 	bl	800d710 <_free_r>
 800c90e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800c910:	b111      	cbz	r1, 800c918 <_reclaim_reent+0x8c>
 800c912:	4620      	mov	r0, r4
 800c914:	f000 fefc 	bl	800d710 <_free_r>
 800c918:	6a23      	ldr	r3, [r4, #32]
 800c91a:	b14b      	cbz	r3, 800c930 <_reclaim_reent+0xa4>
 800c91c:	4620      	mov	r0, r4
 800c91e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c922:	4718      	bx	r3
 800c924:	680e      	ldr	r6, [r1, #0]
 800c926:	4620      	mov	r0, r4
 800c928:	f000 fef2 	bl	800d710 <_free_r>
 800c92c:	4631      	mov	r1, r6
 800c92e:	e7bb      	b.n	800c8a8 <_reclaim_reent+0x1c>
 800c930:	bd70      	pop	{r4, r5, r6, pc}
 800c932:	bf00      	nop
 800c934:	200001a4 	.word	0x200001a4

0800c938 <_lseek_r>:
 800c938:	b538      	push	{r3, r4, r5, lr}
 800c93a:	4d07      	ldr	r5, [pc, #28]	@ (800c958 <_lseek_r+0x20>)
 800c93c:	4604      	mov	r4, r0
 800c93e:	4608      	mov	r0, r1
 800c940:	4611      	mov	r1, r2
 800c942:	2200      	movs	r2, #0
 800c944:	602a      	str	r2, [r5, #0]
 800c946:	461a      	mov	r2, r3
 800c948:	f7f8 fa70 	bl	8004e2c <_lseek>
 800c94c:	1c43      	adds	r3, r0, #1
 800c94e:	d102      	bne.n	800c956 <_lseek_r+0x1e>
 800c950:	682b      	ldr	r3, [r5, #0]
 800c952:	b103      	cbz	r3, 800c956 <_lseek_r+0x1e>
 800c954:	6023      	str	r3, [r4, #0]
 800c956:	bd38      	pop	{r3, r4, r5, pc}
 800c958:	20009224 	.word	0x20009224

0800c95c <_read_r>:
 800c95c:	b538      	push	{r3, r4, r5, lr}
 800c95e:	4d07      	ldr	r5, [pc, #28]	@ (800c97c <_read_r+0x20>)
 800c960:	4604      	mov	r4, r0
 800c962:	4608      	mov	r0, r1
 800c964:	4611      	mov	r1, r2
 800c966:	2200      	movs	r2, #0
 800c968:	602a      	str	r2, [r5, #0]
 800c96a:	461a      	mov	r2, r3
 800c96c:	f7f8 fa38 	bl	8004de0 <_read>
 800c970:	1c43      	adds	r3, r0, #1
 800c972:	d102      	bne.n	800c97a <_read_r+0x1e>
 800c974:	682b      	ldr	r3, [r5, #0]
 800c976:	b103      	cbz	r3, 800c97a <_read_r+0x1e>
 800c978:	6023      	str	r3, [r4, #0]
 800c97a:	bd38      	pop	{r3, r4, r5, pc}
 800c97c:	20009224 	.word	0x20009224

0800c980 <_sbrk_r>:
 800c980:	b538      	push	{r3, r4, r5, lr}
 800c982:	4d06      	ldr	r5, [pc, #24]	@ (800c99c <_sbrk_r+0x1c>)
 800c984:	2300      	movs	r3, #0
 800c986:	4604      	mov	r4, r0
 800c988:	4608      	mov	r0, r1
 800c98a:	602b      	str	r3, [r5, #0]
 800c98c:	f7f8 fa50 	bl	8004e30 <_sbrk>
 800c990:	1c43      	adds	r3, r0, #1
 800c992:	d102      	bne.n	800c99a <_sbrk_r+0x1a>
 800c994:	682b      	ldr	r3, [r5, #0]
 800c996:	b103      	cbz	r3, 800c99a <_sbrk_r+0x1a>
 800c998:	6023      	str	r3, [r4, #0]
 800c99a:	bd38      	pop	{r3, r4, r5, pc}
 800c99c:	20009224 	.word	0x20009224

0800c9a0 <_write_r>:
 800c9a0:	b538      	push	{r3, r4, r5, lr}
 800c9a2:	4d07      	ldr	r5, [pc, #28]	@ (800c9c0 <_write_r+0x20>)
 800c9a4:	4604      	mov	r4, r0
 800c9a6:	4608      	mov	r0, r1
 800c9a8:	4611      	mov	r1, r2
 800c9aa:	2200      	movs	r2, #0
 800c9ac:	602a      	str	r2, [r5, #0]
 800c9ae:	461a      	mov	r2, r3
 800c9b0:	f7f8 fa24 	bl	8004dfc <_write>
 800c9b4:	1c43      	adds	r3, r0, #1
 800c9b6:	d102      	bne.n	800c9be <_write_r+0x1e>
 800c9b8:	682b      	ldr	r3, [r5, #0]
 800c9ba:	b103      	cbz	r3, 800c9be <_write_r+0x1e>
 800c9bc:	6023      	str	r3, [r4, #0]
 800c9be:	bd38      	pop	{r3, r4, r5, pc}
 800c9c0:	20009224 	.word	0x20009224

0800c9c4 <__errno>:
 800c9c4:	4b01      	ldr	r3, [pc, #4]	@ (800c9cc <__errno+0x8>)
 800c9c6:	6818      	ldr	r0, [r3, #0]
 800c9c8:	4770      	bx	lr
 800c9ca:	bf00      	nop
 800c9cc:	200001a4 	.word	0x200001a4

0800c9d0 <__libc_init_array>:
 800c9d0:	b570      	push	{r4, r5, r6, lr}
 800c9d2:	4d0d      	ldr	r5, [pc, #52]	@ (800ca08 <__libc_init_array+0x38>)
 800c9d4:	4c0d      	ldr	r4, [pc, #52]	@ (800ca0c <__libc_init_array+0x3c>)
 800c9d6:	1b64      	subs	r4, r4, r5
 800c9d8:	10a4      	asrs	r4, r4, #2
 800c9da:	2600      	movs	r6, #0
 800c9dc:	42a6      	cmp	r6, r4
 800c9de:	d109      	bne.n	800c9f4 <__libc_init_array+0x24>
 800c9e0:	4d0b      	ldr	r5, [pc, #44]	@ (800ca10 <__libc_init_array+0x40>)
 800c9e2:	4c0c      	ldr	r4, [pc, #48]	@ (800ca14 <__libc_init_array+0x44>)
 800c9e4:	f003 f8e6 	bl	800fbb4 <_init>
 800c9e8:	1b64      	subs	r4, r4, r5
 800c9ea:	10a4      	asrs	r4, r4, #2
 800c9ec:	2600      	movs	r6, #0
 800c9ee:	42a6      	cmp	r6, r4
 800c9f0:	d105      	bne.n	800c9fe <__libc_init_array+0x2e>
 800c9f2:	bd70      	pop	{r4, r5, r6, pc}
 800c9f4:	f855 3b04 	ldr.w	r3, [r5], #4
 800c9f8:	4798      	blx	r3
 800c9fa:	3601      	adds	r6, #1
 800c9fc:	e7ee      	b.n	800c9dc <__libc_init_array+0xc>
 800c9fe:	f855 3b04 	ldr.w	r3, [r5], #4
 800ca02:	4798      	blx	r3
 800ca04:	3601      	adds	r6, #1
 800ca06:	e7f2      	b.n	800c9ee <__libc_init_array+0x1e>
 800ca08:	08012340 	.word	0x08012340
 800ca0c:	08012340 	.word	0x08012340
 800ca10:	08012340 	.word	0x08012340
 800ca14:	08012344 	.word	0x08012344

0800ca18 <strcpy>:
 800ca18:	4603      	mov	r3, r0
 800ca1a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ca1e:	f803 2b01 	strb.w	r2, [r3], #1
 800ca22:	2a00      	cmp	r2, #0
 800ca24:	d1f9      	bne.n	800ca1a <strcpy+0x2>
 800ca26:	4770      	bx	lr

0800ca28 <memcpy>:
 800ca28:	440a      	add	r2, r1
 800ca2a:	4291      	cmp	r1, r2
 800ca2c:	f100 33ff 	add.w	r3, r0, #4294967295
 800ca30:	d100      	bne.n	800ca34 <memcpy+0xc>
 800ca32:	4770      	bx	lr
 800ca34:	b510      	push	{r4, lr}
 800ca36:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ca3a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ca3e:	4291      	cmp	r1, r2
 800ca40:	d1f9      	bne.n	800ca36 <memcpy+0xe>
 800ca42:	bd10      	pop	{r4, pc}
 800ca44:	0000      	movs	r0, r0
	...

0800ca48 <nan>:
 800ca48:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800ca50 <nan+0x8>
 800ca4c:	4770      	bx	lr
 800ca4e:	bf00      	nop
 800ca50:	00000000 	.word	0x00000000
 800ca54:	7ff80000 	.word	0x7ff80000

0800ca58 <nanf>:
 800ca58:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800ca60 <nanf+0x8>
 800ca5c:	4770      	bx	lr
 800ca5e:	bf00      	nop
 800ca60:	7fc00000 	.word	0x7fc00000

0800ca64 <div>:
 800ca64:	b510      	push	{r4, lr}
 800ca66:	fb91 f4f2 	sdiv	r4, r1, r2
 800ca6a:	fb02 1114 	mls	r1, r2, r4, r1
 800ca6e:	6004      	str	r4, [r0, #0]
 800ca70:	6041      	str	r1, [r0, #4]
 800ca72:	bd10      	pop	{r4, pc}

0800ca74 <quorem>:
 800ca74:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca78:	6903      	ldr	r3, [r0, #16]
 800ca7a:	690c      	ldr	r4, [r1, #16]
 800ca7c:	42a3      	cmp	r3, r4
 800ca7e:	4607      	mov	r7, r0
 800ca80:	db7e      	blt.n	800cb80 <quorem+0x10c>
 800ca82:	3c01      	subs	r4, #1
 800ca84:	f101 0814 	add.w	r8, r1, #20
 800ca88:	00a3      	lsls	r3, r4, #2
 800ca8a:	f100 0514 	add.w	r5, r0, #20
 800ca8e:	9300      	str	r3, [sp, #0]
 800ca90:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ca94:	9301      	str	r3, [sp, #4]
 800ca96:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800ca9a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ca9e:	3301      	adds	r3, #1
 800caa0:	429a      	cmp	r2, r3
 800caa2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800caa6:	fbb2 f6f3 	udiv	r6, r2, r3
 800caaa:	d32e      	bcc.n	800cb0a <quorem+0x96>
 800caac:	f04f 0a00 	mov.w	sl, #0
 800cab0:	46c4      	mov	ip, r8
 800cab2:	46ae      	mov	lr, r5
 800cab4:	46d3      	mov	fp, sl
 800cab6:	f85c 3b04 	ldr.w	r3, [ip], #4
 800caba:	b298      	uxth	r0, r3
 800cabc:	fb06 a000 	mla	r0, r6, r0, sl
 800cac0:	0c02      	lsrs	r2, r0, #16
 800cac2:	0c1b      	lsrs	r3, r3, #16
 800cac4:	fb06 2303 	mla	r3, r6, r3, r2
 800cac8:	f8de 2000 	ldr.w	r2, [lr]
 800cacc:	b280      	uxth	r0, r0
 800cace:	b292      	uxth	r2, r2
 800cad0:	1a12      	subs	r2, r2, r0
 800cad2:	445a      	add	r2, fp
 800cad4:	f8de 0000 	ldr.w	r0, [lr]
 800cad8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800cadc:	b29b      	uxth	r3, r3
 800cade:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800cae2:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800cae6:	b292      	uxth	r2, r2
 800cae8:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800caec:	45e1      	cmp	r9, ip
 800caee:	f84e 2b04 	str.w	r2, [lr], #4
 800caf2:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800caf6:	d2de      	bcs.n	800cab6 <quorem+0x42>
 800caf8:	9b00      	ldr	r3, [sp, #0]
 800cafa:	58eb      	ldr	r3, [r5, r3]
 800cafc:	b92b      	cbnz	r3, 800cb0a <quorem+0x96>
 800cafe:	9b01      	ldr	r3, [sp, #4]
 800cb00:	3b04      	subs	r3, #4
 800cb02:	429d      	cmp	r5, r3
 800cb04:	461a      	mov	r2, r3
 800cb06:	d32f      	bcc.n	800cb68 <quorem+0xf4>
 800cb08:	613c      	str	r4, [r7, #16]
 800cb0a:	4638      	mov	r0, r7
 800cb0c:	f001 fc9e 	bl	800e44c <__mcmp>
 800cb10:	2800      	cmp	r0, #0
 800cb12:	db25      	blt.n	800cb60 <quorem+0xec>
 800cb14:	4629      	mov	r1, r5
 800cb16:	2000      	movs	r0, #0
 800cb18:	f858 2b04 	ldr.w	r2, [r8], #4
 800cb1c:	f8d1 c000 	ldr.w	ip, [r1]
 800cb20:	fa1f fe82 	uxth.w	lr, r2
 800cb24:	fa1f f38c 	uxth.w	r3, ip
 800cb28:	eba3 030e 	sub.w	r3, r3, lr
 800cb2c:	4403      	add	r3, r0
 800cb2e:	0c12      	lsrs	r2, r2, #16
 800cb30:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800cb34:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800cb38:	b29b      	uxth	r3, r3
 800cb3a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cb3e:	45c1      	cmp	r9, r8
 800cb40:	f841 3b04 	str.w	r3, [r1], #4
 800cb44:	ea4f 4022 	mov.w	r0, r2, asr #16
 800cb48:	d2e6      	bcs.n	800cb18 <quorem+0xa4>
 800cb4a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800cb4e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800cb52:	b922      	cbnz	r2, 800cb5e <quorem+0xea>
 800cb54:	3b04      	subs	r3, #4
 800cb56:	429d      	cmp	r5, r3
 800cb58:	461a      	mov	r2, r3
 800cb5a:	d30b      	bcc.n	800cb74 <quorem+0x100>
 800cb5c:	613c      	str	r4, [r7, #16]
 800cb5e:	3601      	adds	r6, #1
 800cb60:	4630      	mov	r0, r6
 800cb62:	b003      	add	sp, #12
 800cb64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb68:	6812      	ldr	r2, [r2, #0]
 800cb6a:	3b04      	subs	r3, #4
 800cb6c:	2a00      	cmp	r2, #0
 800cb6e:	d1cb      	bne.n	800cb08 <quorem+0x94>
 800cb70:	3c01      	subs	r4, #1
 800cb72:	e7c6      	b.n	800cb02 <quorem+0x8e>
 800cb74:	6812      	ldr	r2, [r2, #0]
 800cb76:	3b04      	subs	r3, #4
 800cb78:	2a00      	cmp	r2, #0
 800cb7a:	d1ef      	bne.n	800cb5c <quorem+0xe8>
 800cb7c:	3c01      	subs	r4, #1
 800cb7e:	e7ea      	b.n	800cb56 <quorem+0xe2>
 800cb80:	2000      	movs	r0, #0
 800cb82:	e7ee      	b.n	800cb62 <quorem+0xee>
 800cb84:	0000      	movs	r0, r0
	...

0800cb88 <_dtoa_r>:
 800cb88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb8c:	69c7      	ldr	r7, [r0, #28]
 800cb8e:	b099      	sub	sp, #100	@ 0x64
 800cb90:	ed8d 0b02 	vstr	d0, [sp, #8]
 800cb94:	ec55 4b10 	vmov	r4, r5, d0
 800cb98:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800cb9a:	9109      	str	r1, [sp, #36]	@ 0x24
 800cb9c:	4683      	mov	fp, r0
 800cb9e:	920e      	str	r2, [sp, #56]	@ 0x38
 800cba0:	9313      	str	r3, [sp, #76]	@ 0x4c
 800cba2:	b97f      	cbnz	r7, 800cbc4 <_dtoa_r+0x3c>
 800cba4:	2010      	movs	r0, #16
 800cba6:	f7fd f83d 	bl	8009c24 <malloc>
 800cbaa:	4602      	mov	r2, r0
 800cbac:	f8cb 001c 	str.w	r0, [fp, #28]
 800cbb0:	b920      	cbnz	r0, 800cbbc <_dtoa_r+0x34>
 800cbb2:	4ba7      	ldr	r3, [pc, #668]	@ (800ce50 <_dtoa_r+0x2c8>)
 800cbb4:	21ef      	movs	r1, #239	@ 0xef
 800cbb6:	48a7      	ldr	r0, [pc, #668]	@ (800ce54 <_dtoa_r+0x2cc>)
 800cbb8:	f002 fe66 	bl	800f888 <__assert_func>
 800cbbc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800cbc0:	6007      	str	r7, [r0, #0]
 800cbc2:	60c7      	str	r7, [r0, #12]
 800cbc4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800cbc8:	6819      	ldr	r1, [r3, #0]
 800cbca:	b159      	cbz	r1, 800cbe4 <_dtoa_r+0x5c>
 800cbcc:	685a      	ldr	r2, [r3, #4]
 800cbce:	604a      	str	r2, [r1, #4]
 800cbd0:	2301      	movs	r3, #1
 800cbd2:	4093      	lsls	r3, r2
 800cbd4:	608b      	str	r3, [r1, #8]
 800cbd6:	4658      	mov	r0, fp
 800cbd8:	f001 f9b4 	bl	800df44 <_Bfree>
 800cbdc:	f8db 301c 	ldr.w	r3, [fp, #28]
 800cbe0:	2200      	movs	r2, #0
 800cbe2:	601a      	str	r2, [r3, #0]
 800cbe4:	1e2b      	subs	r3, r5, #0
 800cbe6:	bfb9      	ittee	lt
 800cbe8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800cbec:	9303      	strlt	r3, [sp, #12]
 800cbee:	2300      	movge	r3, #0
 800cbf0:	6033      	strge	r3, [r6, #0]
 800cbf2:	9f03      	ldr	r7, [sp, #12]
 800cbf4:	4b98      	ldr	r3, [pc, #608]	@ (800ce58 <_dtoa_r+0x2d0>)
 800cbf6:	bfbc      	itt	lt
 800cbf8:	2201      	movlt	r2, #1
 800cbfa:	6032      	strlt	r2, [r6, #0]
 800cbfc:	43bb      	bics	r3, r7
 800cbfe:	d112      	bne.n	800cc26 <_dtoa_r+0x9e>
 800cc00:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800cc02:	f242 730f 	movw	r3, #9999	@ 0x270f
 800cc06:	6013      	str	r3, [r2, #0]
 800cc08:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800cc0c:	4323      	orrs	r3, r4
 800cc0e:	f000 854d 	beq.w	800d6ac <_dtoa_r+0xb24>
 800cc12:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800cc14:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800ce6c <_dtoa_r+0x2e4>
 800cc18:	2b00      	cmp	r3, #0
 800cc1a:	f000 854f 	beq.w	800d6bc <_dtoa_r+0xb34>
 800cc1e:	f10a 0303 	add.w	r3, sl, #3
 800cc22:	f000 bd49 	b.w	800d6b8 <_dtoa_r+0xb30>
 800cc26:	ed9d 7b02 	vldr	d7, [sp, #8]
 800cc2a:	2200      	movs	r2, #0
 800cc2c:	ec51 0b17 	vmov	r0, r1, d7
 800cc30:	2300      	movs	r3, #0
 800cc32:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800cc36:	f7f3 ff57 	bl	8000ae8 <__aeabi_dcmpeq>
 800cc3a:	4680      	mov	r8, r0
 800cc3c:	b158      	cbz	r0, 800cc56 <_dtoa_r+0xce>
 800cc3e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800cc40:	2301      	movs	r3, #1
 800cc42:	6013      	str	r3, [r2, #0]
 800cc44:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800cc46:	b113      	cbz	r3, 800cc4e <_dtoa_r+0xc6>
 800cc48:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800cc4a:	4b84      	ldr	r3, [pc, #528]	@ (800ce5c <_dtoa_r+0x2d4>)
 800cc4c:	6013      	str	r3, [r2, #0]
 800cc4e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800ce70 <_dtoa_r+0x2e8>
 800cc52:	f000 bd33 	b.w	800d6bc <_dtoa_r+0xb34>
 800cc56:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800cc5a:	aa16      	add	r2, sp, #88	@ 0x58
 800cc5c:	a917      	add	r1, sp, #92	@ 0x5c
 800cc5e:	4658      	mov	r0, fp
 800cc60:	f001 fd14 	bl	800e68c <__d2b>
 800cc64:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800cc68:	4681      	mov	r9, r0
 800cc6a:	2e00      	cmp	r6, #0
 800cc6c:	d077      	beq.n	800cd5e <_dtoa_r+0x1d6>
 800cc6e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800cc70:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800cc74:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800cc78:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800cc7c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800cc80:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800cc84:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800cc88:	4619      	mov	r1, r3
 800cc8a:	2200      	movs	r2, #0
 800cc8c:	4b74      	ldr	r3, [pc, #464]	@ (800ce60 <_dtoa_r+0x2d8>)
 800cc8e:	f7f3 fb0b 	bl	80002a8 <__aeabi_dsub>
 800cc92:	a369      	add	r3, pc, #420	@ (adr r3, 800ce38 <_dtoa_r+0x2b0>)
 800cc94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc98:	f7f3 fcbe 	bl	8000618 <__aeabi_dmul>
 800cc9c:	a368      	add	r3, pc, #416	@ (adr r3, 800ce40 <_dtoa_r+0x2b8>)
 800cc9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cca2:	f7f3 fb03 	bl	80002ac <__adddf3>
 800cca6:	4604      	mov	r4, r0
 800cca8:	4630      	mov	r0, r6
 800ccaa:	460d      	mov	r5, r1
 800ccac:	f7f3 fc4a 	bl	8000544 <__aeabi_i2d>
 800ccb0:	a365      	add	r3, pc, #404	@ (adr r3, 800ce48 <_dtoa_r+0x2c0>)
 800ccb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccb6:	f7f3 fcaf 	bl	8000618 <__aeabi_dmul>
 800ccba:	4602      	mov	r2, r0
 800ccbc:	460b      	mov	r3, r1
 800ccbe:	4620      	mov	r0, r4
 800ccc0:	4629      	mov	r1, r5
 800ccc2:	f7f3 faf3 	bl	80002ac <__adddf3>
 800ccc6:	4604      	mov	r4, r0
 800ccc8:	460d      	mov	r5, r1
 800ccca:	f7f3 ff55 	bl	8000b78 <__aeabi_d2iz>
 800ccce:	2200      	movs	r2, #0
 800ccd0:	4607      	mov	r7, r0
 800ccd2:	2300      	movs	r3, #0
 800ccd4:	4620      	mov	r0, r4
 800ccd6:	4629      	mov	r1, r5
 800ccd8:	f7f3 ff10 	bl	8000afc <__aeabi_dcmplt>
 800ccdc:	b140      	cbz	r0, 800ccf0 <_dtoa_r+0x168>
 800ccde:	4638      	mov	r0, r7
 800cce0:	f7f3 fc30 	bl	8000544 <__aeabi_i2d>
 800cce4:	4622      	mov	r2, r4
 800cce6:	462b      	mov	r3, r5
 800cce8:	f7f3 fefe 	bl	8000ae8 <__aeabi_dcmpeq>
 800ccec:	b900      	cbnz	r0, 800ccf0 <_dtoa_r+0x168>
 800ccee:	3f01      	subs	r7, #1
 800ccf0:	2f16      	cmp	r7, #22
 800ccf2:	d851      	bhi.n	800cd98 <_dtoa_r+0x210>
 800ccf4:	4b5b      	ldr	r3, [pc, #364]	@ (800ce64 <_dtoa_r+0x2dc>)
 800ccf6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800ccfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccfe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800cd02:	f7f3 fefb 	bl	8000afc <__aeabi_dcmplt>
 800cd06:	2800      	cmp	r0, #0
 800cd08:	d048      	beq.n	800cd9c <_dtoa_r+0x214>
 800cd0a:	3f01      	subs	r7, #1
 800cd0c:	2300      	movs	r3, #0
 800cd0e:	9312      	str	r3, [sp, #72]	@ 0x48
 800cd10:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800cd12:	1b9b      	subs	r3, r3, r6
 800cd14:	1e5a      	subs	r2, r3, #1
 800cd16:	bf44      	itt	mi
 800cd18:	f1c3 0801 	rsbmi	r8, r3, #1
 800cd1c:	2300      	movmi	r3, #0
 800cd1e:	9208      	str	r2, [sp, #32]
 800cd20:	bf54      	ite	pl
 800cd22:	f04f 0800 	movpl.w	r8, #0
 800cd26:	9308      	strmi	r3, [sp, #32]
 800cd28:	2f00      	cmp	r7, #0
 800cd2a:	db39      	blt.n	800cda0 <_dtoa_r+0x218>
 800cd2c:	9b08      	ldr	r3, [sp, #32]
 800cd2e:	970f      	str	r7, [sp, #60]	@ 0x3c
 800cd30:	443b      	add	r3, r7
 800cd32:	9308      	str	r3, [sp, #32]
 800cd34:	2300      	movs	r3, #0
 800cd36:	930a      	str	r3, [sp, #40]	@ 0x28
 800cd38:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cd3a:	2b09      	cmp	r3, #9
 800cd3c:	d864      	bhi.n	800ce08 <_dtoa_r+0x280>
 800cd3e:	2b05      	cmp	r3, #5
 800cd40:	bfc4      	itt	gt
 800cd42:	3b04      	subgt	r3, #4
 800cd44:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800cd46:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cd48:	f1a3 0302 	sub.w	r3, r3, #2
 800cd4c:	bfcc      	ite	gt
 800cd4e:	2400      	movgt	r4, #0
 800cd50:	2401      	movle	r4, #1
 800cd52:	2b03      	cmp	r3, #3
 800cd54:	d863      	bhi.n	800ce1e <_dtoa_r+0x296>
 800cd56:	e8df f003 	tbb	[pc, r3]
 800cd5a:	372a      	.short	0x372a
 800cd5c:	5535      	.short	0x5535
 800cd5e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800cd62:	441e      	add	r6, r3
 800cd64:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800cd68:	2b20      	cmp	r3, #32
 800cd6a:	bfc1      	itttt	gt
 800cd6c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800cd70:	409f      	lslgt	r7, r3
 800cd72:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800cd76:	fa24 f303 	lsrgt.w	r3, r4, r3
 800cd7a:	bfd6      	itet	le
 800cd7c:	f1c3 0320 	rsble	r3, r3, #32
 800cd80:	ea47 0003 	orrgt.w	r0, r7, r3
 800cd84:	fa04 f003 	lslle.w	r0, r4, r3
 800cd88:	f7f3 fbcc 	bl	8000524 <__aeabi_ui2d>
 800cd8c:	2201      	movs	r2, #1
 800cd8e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800cd92:	3e01      	subs	r6, #1
 800cd94:	9214      	str	r2, [sp, #80]	@ 0x50
 800cd96:	e777      	b.n	800cc88 <_dtoa_r+0x100>
 800cd98:	2301      	movs	r3, #1
 800cd9a:	e7b8      	b.n	800cd0e <_dtoa_r+0x186>
 800cd9c:	9012      	str	r0, [sp, #72]	@ 0x48
 800cd9e:	e7b7      	b.n	800cd10 <_dtoa_r+0x188>
 800cda0:	427b      	negs	r3, r7
 800cda2:	930a      	str	r3, [sp, #40]	@ 0x28
 800cda4:	2300      	movs	r3, #0
 800cda6:	eba8 0807 	sub.w	r8, r8, r7
 800cdaa:	930f      	str	r3, [sp, #60]	@ 0x3c
 800cdac:	e7c4      	b.n	800cd38 <_dtoa_r+0x1b0>
 800cdae:	2300      	movs	r3, #0
 800cdb0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800cdb2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cdb4:	2b00      	cmp	r3, #0
 800cdb6:	dc35      	bgt.n	800ce24 <_dtoa_r+0x29c>
 800cdb8:	2301      	movs	r3, #1
 800cdba:	9300      	str	r3, [sp, #0]
 800cdbc:	9307      	str	r3, [sp, #28]
 800cdbe:	461a      	mov	r2, r3
 800cdc0:	920e      	str	r2, [sp, #56]	@ 0x38
 800cdc2:	e00b      	b.n	800cddc <_dtoa_r+0x254>
 800cdc4:	2301      	movs	r3, #1
 800cdc6:	e7f3      	b.n	800cdb0 <_dtoa_r+0x228>
 800cdc8:	2300      	movs	r3, #0
 800cdca:	930b      	str	r3, [sp, #44]	@ 0x2c
 800cdcc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cdce:	18fb      	adds	r3, r7, r3
 800cdd0:	9300      	str	r3, [sp, #0]
 800cdd2:	3301      	adds	r3, #1
 800cdd4:	2b01      	cmp	r3, #1
 800cdd6:	9307      	str	r3, [sp, #28]
 800cdd8:	bfb8      	it	lt
 800cdda:	2301      	movlt	r3, #1
 800cddc:	f8db 001c 	ldr.w	r0, [fp, #28]
 800cde0:	2100      	movs	r1, #0
 800cde2:	2204      	movs	r2, #4
 800cde4:	f102 0514 	add.w	r5, r2, #20
 800cde8:	429d      	cmp	r5, r3
 800cdea:	d91f      	bls.n	800ce2c <_dtoa_r+0x2a4>
 800cdec:	6041      	str	r1, [r0, #4]
 800cdee:	4658      	mov	r0, fp
 800cdf0:	f001 f868 	bl	800dec4 <_Balloc>
 800cdf4:	4682      	mov	sl, r0
 800cdf6:	2800      	cmp	r0, #0
 800cdf8:	d13c      	bne.n	800ce74 <_dtoa_r+0x2ec>
 800cdfa:	4b1b      	ldr	r3, [pc, #108]	@ (800ce68 <_dtoa_r+0x2e0>)
 800cdfc:	4602      	mov	r2, r0
 800cdfe:	f240 11af 	movw	r1, #431	@ 0x1af
 800ce02:	e6d8      	b.n	800cbb6 <_dtoa_r+0x2e>
 800ce04:	2301      	movs	r3, #1
 800ce06:	e7e0      	b.n	800cdca <_dtoa_r+0x242>
 800ce08:	2401      	movs	r4, #1
 800ce0a:	2300      	movs	r3, #0
 800ce0c:	9309      	str	r3, [sp, #36]	@ 0x24
 800ce0e:	940b      	str	r4, [sp, #44]	@ 0x2c
 800ce10:	f04f 33ff 	mov.w	r3, #4294967295
 800ce14:	9300      	str	r3, [sp, #0]
 800ce16:	9307      	str	r3, [sp, #28]
 800ce18:	2200      	movs	r2, #0
 800ce1a:	2312      	movs	r3, #18
 800ce1c:	e7d0      	b.n	800cdc0 <_dtoa_r+0x238>
 800ce1e:	2301      	movs	r3, #1
 800ce20:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ce22:	e7f5      	b.n	800ce10 <_dtoa_r+0x288>
 800ce24:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ce26:	9300      	str	r3, [sp, #0]
 800ce28:	9307      	str	r3, [sp, #28]
 800ce2a:	e7d7      	b.n	800cddc <_dtoa_r+0x254>
 800ce2c:	3101      	adds	r1, #1
 800ce2e:	0052      	lsls	r2, r2, #1
 800ce30:	e7d8      	b.n	800cde4 <_dtoa_r+0x25c>
 800ce32:	bf00      	nop
 800ce34:	f3af 8000 	nop.w
 800ce38:	636f4361 	.word	0x636f4361
 800ce3c:	3fd287a7 	.word	0x3fd287a7
 800ce40:	8b60c8b3 	.word	0x8b60c8b3
 800ce44:	3fc68a28 	.word	0x3fc68a28
 800ce48:	509f79fb 	.word	0x509f79fb
 800ce4c:	3fd34413 	.word	0x3fd34413
 800ce50:	08012039 	.word	0x08012039
 800ce54:	08012050 	.word	0x08012050
 800ce58:	7ff00000 	.word	0x7ff00000
 800ce5c:	08012298 	.word	0x08012298
 800ce60:	3ff80000 	.word	0x3ff80000
 800ce64:	080121a8 	.word	0x080121a8
 800ce68:	080120a8 	.word	0x080120a8
 800ce6c:	08012035 	.word	0x08012035
 800ce70:	08012297 	.word	0x08012297
 800ce74:	f8db 301c 	ldr.w	r3, [fp, #28]
 800ce78:	6018      	str	r0, [r3, #0]
 800ce7a:	9b07      	ldr	r3, [sp, #28]
 800ce7c:	2b0e      	cmp	r3, #14
 800ce7e:	f200 80a4 	bhi.w	800cfca <_dtoa_r+0x442>
 800ce82:	2c00      	cmp	r4, #0
 800ce84:	f000 80a1 	beq.w	800cfca <_dtoa_r+0x442>
 800ce88:	2f00      	cmp	r7, #0
 800ce8a:	dd33      	ble.n	800cef4 <_dtoa_r+0x36c>
 800ce8c:	4bad      	ldr	r3, [pc, #692]	@ (800d144 <_dtoa_r+0x5bc>)
 800ce8e:	f007 020f 	and.w	r2, r7, #15
 800ce92:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ce96:	ed93 7b00 	vldr	d7, [r3]
 800ce9a:	05f8      	lsls	r0, r7, #23
 800ce9c:	ed8d 7b04 	vstr	d7, [sp, #16]
 800cea0:	ea4f 1427 	mov.w	r4, r7, asr #4
 800cea4:	d516      	bpl.n	800ced4 <_dtoa_r+0x34c>
 800cea6:	4ba8      	ldr	r3, [pc, #672]	@ (800d148 <_dtoa_r+0x5c0>)
 800cea8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ceac:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ceb0:	f7f3 fcdc 	bl	800086c <__aeabi_ddiv>
 800ceb4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ceb8:	f004 040f 	and.w	r4, r4, #15
 800cebc:	2603      	movs	r6, #3
 800cebe:	4da2      	ldr	r5, [pc, #648]	@ (800d148 <_dtoa_r+0x5c0>)
 800cec0:	b954      	cbnz	r4, 800ced8 <_dtoa_r+0x350>
 800cec2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cec6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ceca:	f7f3 fccf 	bl	800086c <__aeabi_ddiv>
 800cece:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ced2:	e028      	b.n	800cf26 <_dtoa_r+0x39e>
 800ced4:	2602      	movs	r6, #2
 800ced6:	e7f2      	b.n	800cebe <_dtoa_r+0x336>
 800ced8:	07e1      	lsls	r1, r4, #31
 800ceda:	d508      	bpl.n	800ceee <_dtoa_r+0x366>
 800cedc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800cee0:	e9d5 2300 	ldrd	r2, r3, [r5]
 800cee4:	f7f3 fb98 	bl	8000618 <__aeabi_dmul>
 800cee8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ceec:	3601      	adds	r6, #1
 800ceee:	1064      	asrs	r4, r4, #1
 800cef0:	3508      	adds	r5, #8
 800cef2:	e7e5      	b.n	800cec0 <_dtoa_r+0x338>
 800cef4:	f000 80d2 	beq.w	800d09c <_dtoa_r+0x514>
 800cef8:	427c      	negs	r4, r7
 800cefa:	4b92      	ldr	r3, [pc, #584]	@ (800d144 <_dtoa_r+0x5bc>)
 800cefc:	4d92      	ldr	r5, [pc, #584]	@ (800d148 <_dtoa_r+0x5c0>)
 800cefe:	f004 020f 	and.w	r2, r4, #15
 800cf02:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cf06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf0a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800cf0e:	f7f3 fb83 	bl	8000618 <__aeabi_dmul>
 800cf12:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cf16:	1124      	asrs	r4, r4, #4
 800cf18:	2300      	movs	r3, #0
 800cf1a:	2602      	movs	r6, #2
 800cf1c:	2c00      	cmp	r4, #0
 800cf1e:	f040 80b2 	bne.w	800d086 <_dtoa_r+0x4fe>
 800cf22:	2b00      	cmp	r3, #0
 800cf24:	d1d3      	bne.n	800cece <_dtoa_r+0x346>
 800cf26:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800cf28:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800cf2c:	2b00      	cmp	r3, #0
 800cf2e:	f000 80b7 	beq.w	800d0a0 <_dtoa_r+0x518>
 800cf32:	4b86      	ldr	r3, [pc, #536]	@ (800d14c <_dtoa_r+0x5c4>)
 800cf34:	2200      	movs	r2, #0
 800cf36:	4620      	mov	r0, r4
 800cf38:	4629      	mov	r1, r5
 800cf3a:	f7f3 fddf 	bl	8000afc <__aeabi_dcmplt>
 800cf3e:	2800      	cmp	r0, #0
 800cf40:	f000 80ae 	beq.w	800d0a0 <_dtoa_r+0x518>
 800cf44:	9b07      	ldr	r3, [sp, #28]
 800cf46:	2b00      	cmp	r3, #0
 800cf48:	f000 80aa 	beq.w	800d0a0 <_dtoa_r+0x518>
 800cf4c:	9b00      	ldr	r3, [sp, #0]
 800cf4e:	2b00      	cmp	r3, #0
 800cf50:	dd37      	ble.n	800cfc2 <_dtoa_r+0x43a>
 800cf52:	1e7b      	subs	r3, r7, #1
 800cf54:	9304      	str	r3, [sp, #16]
 800cf56:	4620      	mov	r0, r4
 800cf58:	4b7d      	ldr	r3, [pc, #500]	@ (800d150 <_dtoa_r+0x5c8>)
 800cf5a:	2200      	movs	r2, #0
 800cf5c:	4629      	mov	r1, r5
 800cf5e:	f7f3 fb5b 	bl	8000618 <__aeabi_dmul>
 800cf62:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cf66:	9c00      	ldr	r4, [sp, #0]
 800cf68:	3601      	adds	r6, #1
 800cf6a:	4630      	mov	r0, r6
 800cf6c:	f7f3 faea 	bl	8000544 <__aeabi_i2d>
 800cf70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cf74:	f7f3 fb50 	bl	8000618 <__aeabi_dmul>
 800cf78:	4b76      	ldr	r3, [pc, #472]	@ (800d154 <_dtoa_r+0x5cc>)
 800cf7a:	2200      	movs	r2, #0
 800cf7c:	f7f3 f996 	bl	80002ac <__adddf3>
 800cf80:	4605      	mov	r5, r0
 800cf82:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800cf86:	2c00      	cmp	r4, #0
 800cf88:	f040 808d 	bne.w	800d0a6 <_dtoa_r+0x51e>
 800cf8c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cf90:	4b71      	ldr	r3, [pc, #452]	@ (800d158 <_dtoa_r+0x5d0>)
 800cf92:	2200      	movs	r2, #0
 800cf94:	f7f3 f988 	bl	80002a8 <__aeabi_dsub>
 800cf98:	4602      	mov	r2, r0
 800cf9a:	460b      	mov	r3, r1
 800cf9c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800cfa0:	462a      	mov	r2, r5
 800cfa2:	4633      	mov	r3, r6
 800cfa4:	f7f3 fdc8 	bl	8000b38 <__aeabi_dcmpgt>
 800cfa8:	2800      	cmp	r0, #0
 800cfaa:	f040 828b 	bne.w	800d4c4 <_dtoa_r+0x93c>
 800cfae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cfb2:	462a      	mov	r2, r5
 800cfb4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800cfb8:	f7f3 fda0 	bl	8000afc <__aeabi_dcmplt>
 800cfbc:	2800      	cmp	r0, #0
 800cfbe:	f040 8128 	bne.w	800d212 <_dtoa_r+0x68a>
 800cfc2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800cfc6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800cfca:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800cfcc:	2b00      	cmp	r3, #0
 800cfce:	f2c0 815a 	blt.w	800d286 <_dtoa_r+0x6fe>
 800cfd2:	2f0e      	cmp	r7, #14
 800cfd4:	f300 8157 	bgt.w	800d286 <_dtoa_r+0x6fe>
 800cfd8:	4b5a      	ldr	r3, [pc, #360]	@ (800d144 <_dtoa_r+0x5bc>)
 800cfda:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800cfde:	ed93 7b00 	vldr	d7, [r3]
 800cfe2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cfe4:	2b00      	cmp	r3, #0
 800cfe6:	ed8d 7b00 	vstr	d7, [sp]
 800cfea:	da03      	bge.n	800cff4 <_dtoa_r+0x46c>
 800cfec:	9b07      	ldr	r3, [sp, #28]
 800cfee:	2b00      	cmp	r3, #0
 800cff0:	f340 8101 	ble.w	800d1f6 <_dtoa_r+0x66e>
 800cff4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800cff8:	4656      	mov	r6, sl
 800cffa:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cffe:	4620      	mov	r0, r4
 800d000:	4629      	mov	r1, r5
 800d002:	f7f3 fc33 	bl	800086c <__aeabi_ddiv>
 800d006:	f7f3 fdb7 	bl	8000b78 <__aeabi_d2iz>
 800d00a:	4680      	mov	r8, r0
 800d00c:	f7f3 fa9a 	bl	8000544 <__aeabi_i2d>
 800d010:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d014:	f7f3 fb00 	bl	8000618 <__aeabi_dmul>
 800d018:	4602      	mov	r2, r0
 800d01a:	460b      	mov	r3, r1
 800d01c:	4620      	mov	r0, r4
 800d01e:	4629      	mov	r1, r5
 800d020:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800d024:	f7f3 f940 	bl	80002a8 <__aeabi_dsub>
 800d028:	f806 4b01 	strb.w	r4, [r6], #1
 800d02c:	9d07      	ldr	r5, [sp, #28]
 800d02e:	eba6 040a 	sub.w	r4, r6, sl
 800d032:	42a5      	cmp	r5, r4
 800d034:	4602      	mov	r2, r0
 800d036:	460b      	mov	r3, r1
 800d038:	f040 8117 	bne.w	800d26a <_dtoa_r+0x6e2>
 800d03c:	f7f3 f936 	bl	80002ac <__adddf3>
 800d040:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d044:	4604      	mov	r4, r0
 800d046:	460d      	mov	r5, r1
 800d048:	f7f3 fd76 	bl	8000b38 <__aeabi_dcmpgt>
 800d04c:	2800      	cmp	r0, #0
 800d04e:	f040 80f9 	bne.w	800d244 <_dtoa_r+0x6bc>
 800d052:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d056:	4620      	mov	r0, r4
 800d058:	4629      	mov	r1, r5
 800d05a:	f7f3 fd45 	bl	8000ae8 <__aeabi_dcmpeq>
 800d05e:	b118      	cbz	r0, 800d068 <_dtoa_r+0x4e0>
 800d060:	f018 0f01 	tst.w	r8, #1
 800d064:	f040 80ee 	bne.w	800d244 <_dtoa_r+0x6bc>
 800d068:	4649      	mov	r1, r9
 800d06a:	4658      	mov	r0, fp
 800d06c:	f000 ff6a 	bl	800df44 <_Bfree>
 800d070:	2300      	movs	r3, #0
 800d072:	7033      	strb	r3, [r6, #0]
 800d074:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800d076:	3701      	adds	r7, #1
 800d078:	601f      	str	r7, [r3, #0]
 800d07a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800d07c:	2b00      	cmp	r3, #0
 800d07e:	f000 831d 	beq.w	800d6bc <_dtoa_r+0xb34>
 800d082:	601e      	str	r6, [r3, #0]
 800d084:	e31a      	b.n	800d6bc <_dtoa_r+0xb34>
 800d086:	07e2      	lsls	r2, r4, #31
 800d088:	d505      	bpl.n	800d096 <_dtoa_r+0x50e>
 800d08a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d08e:	f7f3 fac3 	bl	8000618 <__aeabi_dmul>
 800d092:	3601      	adds	r6, #1
 800d094:	2301      	movs	r3, #1
 800d096:	1064      	asrs	r4, r4, #1
 800d098:	3508      	adds	r5, #8
 800d09a:	e73f      	b.n	800cf1c <_dtoa_r+0x394>
 800d09c:	2602      	movs	r6, #2
 800d09e:	e742      	b.n	800cf26 <_dtoa_r+0x39e>
 800d0a0:	9c07      	ldr	r4, [sp, #28]
 800d0a2:	9704      	str	r7, [sp, #16]
 800d0a4:	e761      	b.n	800cf6a <_dtoa_r+0x3e2>
 800d0a6:	4b27      	ldr	r3, [pc, #156]	@ (800d144 <_dtoa_r+0x5bc>)
 800d0a8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800d0aa:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d0ae:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800d0b2:	4454      	add	r4, sl
 800d0b4:	2900      	cmp	r1, #0
 800d0b6:	d053      	beq.n	800d160 <_dtoa_r+0x5d8>
 800d0b8:	4928      	ldr	r1, [pc, #160]	@ (800d15c <_dtoa_r+0x5d4>)
 800d0ba:	2000      	movs	r0, #0
 800d0bc:	f7f3 fbd6 	bl	800086c <__aeabi_ddiv>
 800d0c0:	4633      	mov	r3, r6
 800d0c2:	462a      	mov	r2, r5
 800d0c4:	f7f3 f8f0 	bl	80002a8 <__aeabi_dsub>
 800d0c8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800d0cc:	4656      	mov	r6, sl
 800d0ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d0d2:	f7f3 fd51 	bl	8000b78 <__aeabi_d2iz>
 800d0d6:	4605      	mov	r5, r0
 800d0d8:	f7f3 fa34 	bl	8000544 <__aeabi_i2d>
 800d0dc:	4602      	mov	r2, r0
 800d0de:	460b      	mov	r3, r1
 800d0e0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d0e4:	f7f3 f8e0 	bl	80002a8 <__aeabi_dsub>
 800d0e8:	3530      	adds	r5, #48	@ 0x30
 800d0ea:	4602      	mov	r2, r0
 800d0ec:	460b      	mov	r3, r1
 800d0ee:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d0f2:	f806 5b01 	strb.w	r5, [r6], #1
 800d0f6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800d0fa:	f7f3 fcff 	bl	8000afc <__aeabi_dcmplt>
 800d0fe:	2800      	cmp	r0, #0
 800d100:	d171      	bne.n	800d1e6 <_dtoa_r+0x65e>
 800d102:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d106:	4911      	ldr	r1, [pc, #68]	@ (800d14c <_dtoa_r+0x5c4>)
 800d108:	2000      	movs	r0, #0
 800d10a:	f7f3 f8cd 	bl	80002a8 <__aeabi_dsub>
 800d10e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800d112:	f7f3 fcf3 	bl	8000afc <__aeabi_dcmplt>
 800d116:	2800      	cmp	r0, #0
 800d118:	f040 8095 	bne.w	800d246 <_dtoa_r+0x6be>
 800d11c:	42a6      	cmp	r6, r4
 800d11e:	f43f af50 	beq.w	800cfc2 <_dtoa_r+0x43a>
 800d122:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800d126:	4b0a      	ldr	r3, [pc, #40]	@ (800d150 <_dtoa_r+0x5c8>)
 800d128:	2200      	movs	r2, #0
 800d12a:	f7f3 fa75 	bl	8000618 <__aeabi_dmul>
 800d12e:	4b08      	ldr	r3, [pc, #32]	@ (800d150 <_dtoa_r+0x5c8>)
 800d130:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800d134:	2200      	movs	r2, #0
 800d136:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d13a:	f7f3 fa6d 	bl	8000618 <__aeabi_dmul>
 800d13e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d142:	e7c4      	b.n	800d0ce <_dtoa_r+0x546>
 800d144:	080121a8 	.word	0x080121a8
 800d148:	08012180 	.word	0x08012180
 800d14c:	3ff00000 	.word	0x3ff00000
 800d150:	40240000 	.word	0x40240000
 800d154:	401c0000 	.word	0x401c0000
 800d158:	40140000 	.word	0x40140000
 800d15c:	3fe00000 	.word	0x3fe00000
 800d160:	4631      	mov	r1, r6
 800d162:	4628      	mov	r0, r5
 800d164:	f7f3 fa58 	bl	8000618 <__aeabi_dmul>
 800d168:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800d16c:	9415      	str	r4, [sp, #84]	@ 0x54
 800d16e:	4656      	mov	r6, sl
 800d170:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d174:	f7f3 fd00 	bl	8000b78 <__aeabi_d2iz>
 800d178:	4605      	mov	r5, r0
 800d17a:	f7f3 f9e3 	bl	8000544 <__aeabi_i2d>
 800d17e:	4602      	mov	r2, r0
 800d180:	460b      	mov	r3, r1
 800d182:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d186:	f7f3 f88f 	bl	80002a8 <__aeabi_dsub>
 800d18a:	3530      	adds	r5, #48	@ 0x30
 800d18c:	f806 5b01 	strb.w	r5, [r6], #1
 800d190:	4602      	mov	r2, r0
 800d192:	460b      	mov	r3, r1
 800d194:	42a6      	cmp	r6, r4
 800d196:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d19a:	f04f 0200 	mov.w	r2, #0
 800d19e:	d124      	bne.n	800d1ea <_dtoa_r+0x662>
 800d1a0:	4bac      	ldr	r3, [pc, #688]	@ (800d454 <_dtoa_r+0x8cc>)
 800d1a2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800d1a6:	f7f3 f881 	bl	80002ac <__adddf3>
 800d1aa:	4602      	mov	r2, r0
 800d1ac:	460b      	mov	r3, r1
 800d1ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d1b2:	f7f3 fcc1 	bl	8000b38 <__aeabi_dcmpgt>
 800d1b6:	2800      	cmp	r0, #0
 800d1b8:	d145      	bne.n	800d246 <_dtoa_r+0x6be>
 800d1ba:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800d1be:	49a5      	ldr	r1, [pc, #660]	@ (800d454 <_dtoa_r+0x8cc>)
 800d1c0:	2000      	movs	r0, #0
 800d1c2:	f7f3 f871 	bl	80002a8 <__aeabi_dsub>
 800d1c6:	4602      	mov	r2, r0
 800d1c8:	460b      	mov	r3, r1
 800d1ca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d1ce:	f7f3 fc95 	bl	8000afc <__aeabi_dcmplt>
 800d1d2:	2800      	cmp	r0, #0
 800d1d4:	f43f aef5 	beq.w	800cfc2 <_dtoa_r+0x43a>
 800d1d8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800d1da:	1e73      	subs	r3, r6, #1
 800d1dc:	9315      	str	r3, [sp, #84]	@ 0x54
 800d1de:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800d1e2:	2b30      	cmp	r3, #48	@ 0x30
 800d1e4:	d0f8      	beq.n	800d1d8 <_dtoa_r+0x650>
 800d1e6:	9f04      	ldr	r7, [sp, #16]
 800d1e8:	e73e      	b.n	800d068 <_dtoa_r+0x4e0>
 800d1ea:	4b9b      	ldr	r3, [pc, #620]	@ (800d458 <_dtoa_r+0x8d0>)
 800d1ec:	f7f3 fa14 	bl	8000618 <__aeabi_dmul>
 800d1f0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d1f4:	e7bc      	b.n	800d170 <_dtoa_r+0x5e8>
 800d1f6:	d10c      	bne.n	800d212 <_dtoa_r+0x68a>
 800d1f8:	4b98      	ldr	r3, [pc, #608]	@ (800d45c <_dtoa_r+0x8d4>)
 800d1fa:	2200      	movs	r2, #0
 800d1fc:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d200:	f7f3 fa0a 	bl	8000618 <__aeabi_dmul>
 800d204:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d208:	f7f3 fc8c 	bl	8000b24 <__aeabi_dcmpge>
 800d20c:	2800      	cmp	r0, #0
 800d20e:	f000 8157 	beq.w	800d4c0 <_dtoa_r+0x938>
 800d212:	2400      	movs	r4, #0
 800d214:	4625      	mov	r5, r4
 800d216:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d218:	43db      	mvns	r3, r3
 800d21a:	9304      	str	r3, [sp, #16]
 800d21c:	4656      	mov	r6, sl
 800d21e:	2700      	movs	r7, #0
 800d220:	4621      	mov	r1, r4
 800d222:	4658      	mov	r0, fp
 800d224:	f000 fe8e 	bl	800df44 <_Bfree>
 800d228:	2d00      	cmp	r5, #0
 800d22a:	d0dc      	beq.n	800d1e6 <_dtoa_r+0x65e>
 800d22c:	b12f      	cbz	r7, 800d23a <_dtoa_r+0x6b2>
 800d22e:	42af      	cmp	r7, r5
 800d230:	d003      	beq.n	800d23a <_dtoa_r+0x6b2>
 800d232:	4639      	mov	r1, r7
 800d234:	4658      	mov	r0, fp
 800d236:	f000 fe85 	bl	800df44 <_Bfree>
 800d23a:	4629      	mov	r1, r5
 800d23c:	4658      	mov	r0, fp
 800d23e:	f000 fe81 	bl	800df44 <_Bfree>
 800d242:	e7d0      	b.n	800d1e6 <_dtoa_r+0x65e>
 800d244:	9704      	str	r7, [sp, #16]
 800d246:	4633      	mov	r3, r6
 800d248:	461e      	mov	r6, r3
 800d24a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d24e:	2a39      	cmp	r2, #57	@ 0x39
 800d250:	d107      	bne.n	800d262 <_dtoa_r+0x6da>
 800d252:	459a      	cmp	sl, r3
 800d254:	d1f8      	bne.n	800d248 <_dtoa_r+0x6c0>
 800d256:	9a04      	ldr	r2, [sp, #16]
 800d258:	3201      	adds	r2, #1
 800d25a:	9204      	str	r2, [sp, #16]
 800d25c:	2230      	movs	r2, #48	@ 0x30
 800d25e:	f88a 2000 	strb.w	r2, [sl]
 800d262:	781a      	ldrb	r2, [r3, #0]
 800d264:	3201      	adds	r2, #1
 800d266:	701a      	strb	r2, [r3, #0]
 800d268:	e7bd      	b.n	800d1e6 <_dtoa_r+0x65e>
 800d26a:	4b7b      	ldr	r3, [pc, #492]	@ (800d458 <_dtoa_r+0x8d0>)
 800d26c:	2200      	movs	r2, #0
 800d26e:	f7f3 f9d3 	bl	8000618 <__aeabi_dmul>
 800d272:	2200      	movs	r2, #0
 800d274:	2300      	movs	r3, #0
 800d276:	4604      	mov	r4, r0
 800d278:	460d      	mov	r5, r1
 800d27a:	f7f3 fc35 	bl	8000ae8 <__aeabi_dcmpeq>
 800d27e:	2800      	cmp	r0, #0
 800d280:	f43f aebb 	beq.w	800cffa <_dtoa_r+0x472>
 800d284:	e6f0      	b.n	800d068 <_dtoa_r+0x4e0>
 800d286:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800d288:	2a00      	cmp	r2, #0
 800d28a:	f000 80db 	beq.w	800d444 <_dtoa_r+0x8bc>
 800d28e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d290:	2a01      	cmp	r2, #1
 800d292:	f300 80bf 	bgt.w	800d414 <_dtoa_r+0x88c>
 800d296:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800d298:	2a00      	cmp	r2, #0
 800d29a:	f000 80b7 	beq.w	800d40c <_dtoa_r+0x884>
 800d29e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800d2a2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800d2a4:	4646      	mov	r6, r8
 800d2a6:	9a08      	ldr	r2, [sp, #32]
 800d2a8:	2101      	movs	r1, #1
 800d2aa:	441a      	add	r2, r3
 800d2ac:	4658      	mov	r0, fp
 800d2ae:	4498      	add	r8, r3
 800d2b0:	9208      	str	r2, [sp, #32]
 800d2b2:	f000 ff45 	bl	800e140 <__i2b>
 800d2b6:	4605      	mov	r5, r0
 800d2b8:	b15e      	cbz	r6, 800d2d2 <_dtoa_r+0x74a>
 800d2ba:	9b08      	ldr	r3, [sp, #32]
 800d2bc:	2b00      	cmp	r3, #0
 800d2be:	dd08      	ble.n	800d2d2 <_dtoa_r+0x74a>
 800d2c0:	42b3      	cmp	r3, r6
 800d2c2:	9a08      	ldr	r2, [sp, #32]
 800d2c4:	bfa8      	it	ge
 800d2c6:	4633      	movge	r3, r6
 800d2c8:	eba8 0803 	sub.w	r8, r8, r3
 800d2cc:	1af6      	subs	r6, r6, r3
 800d2ce:	1ad3      	subs	r3, r2, r3
 800d2d0:	9308      	str	r3, [sp, #32]
 800d2d2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d2d4:	b1f3      	cbz	r3, 800d314 <_dtoa_r+0x78c>
 800d2d6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d2d8:	2b00      	cmp	r3, #0
 800d2da:	f000 80b7 	beq.w	800d44c <_dtoa_r+0x8c4>
 800d2de:	b18c      	cbz	r4, 800d304 <_dtoa_r+0x77c>
 800d2e0:	4629      	mov	r1, r5
 800d2e2:	4622      	mov	r2, r4
 800d2e4:	4658      	mov	r0, fp
 800d2e6:	f000 ffeb 	bl	800e2c0 <__pow5mult>
 800d2ea:	464a      	mov	r2, r9
 800d2ec:	4601      	mov	r1, r0
 800d2ee:	4605      	mov	r5, r0
 800d2f0:	4658      	mov	r0, fp
 800d2f2:	f000 ff3b 	bl	800e16c <__multiply>
 800d2f6:	4649      	mov	r1, r9
 800d2f8:	9004      	str	r0, [sp, #16]
 800d2fa:	4658      	mov	r0, fp
 800d2fc:	f000 fe22 	bl	800df44 <_Bfree>
 800d300:	9b04      	ldr	r3, [sp, #16]
 800d302:	4699      	mov	r9, r3
 800d304:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d306:	1b1a      	subs	r2, r3, r4
 800d308:	d004      	beq.n	800d314 <_dtoa_r+0x78c>
 800d30a:	4649      	mov	r1, r9
 800d30c:	4658      	mov	r0, fp
 800d30e:	f000 ffd7 	bl	800e2c0 <__pow5mult>
 800d312:	4681      	mov	r9, r0
 800d314:	2101      	movs	r1, #1
 800d316:	4658      	mov	r0, fp
 800d318:	f000 ff12 	bl	800e140 <__i2b>
 800d31c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d31e:	4604      	mov	r4, r0
 800d320:	2b00      	cmp	r3, #0
 800d322:	f000 81cf 	beq.w	800d6c4 <_dtoa_r+0xb3c>
 800d326:	461a      	mov	r2, r3
 800d328:	4601      	mov	r1, r0
 800d32a:	4658      	mov	r0, fp
 800d32c:	f000 ffc8 	bl	800e2c0 <__pow5mult>
 800d330:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d332:	2b01      	cmp	r3, #1
 800d334:	4604      	mov	r4, r0
 800d336:	f300 8095 	bgt.w	800d464 <_dtoa_r+0x8dc>
 800d33a:	9b02      	ldr	r3, [sp, #8]
 800d33c:	2b00      	cmp	r3, #0
 800d33e:	f040 8087 	bne.w	800d450 <_dtoa_r+0x8c8>
 800d342:	9b03      	ldr	r3, [sp, #12]
 800d344:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d348:	2b00      	cmp	r3, #0
 800d34a:	f040 8089 	bne.w	800d460 <_dtoa_r+0x8d8>
 800d34e:	9b03      	ldr	r3, [sp, #12]
 800d350:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800d354:	0d1b      	lsrs	r3, r3, #20
 800d356:	051b      	lsls	r3, r3, #20
 800d358:	b12b      	cbz	r3, 800d366 <_dtoa_r+0x7de>
 800d35a:	9b08      	ldr	r3, [sp, #32]
 800d35c:	3301      	adds	r3, #1
 800d35e:	9308      	str	r3, [sp, #32]
 800d360:	f108 0801 	add.w	r8, r8, #1
 800d364:	2301      	movs	r3, #1
 800d366:	930a      	str	r3, [sp, #40]	@ 0x28
 800d368:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d36a:	2b00      	cmp	r3, #0
 800d36c:	f000 81b0 	beq.w	800d6d0 <_dtoa_r+0xb48>
 800d370:	6923      	ldr	r3, [r4, #16]
 800d372:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800d376:	6918      	ldr	r0, [r3, #16]
 800d378:	f000 fe96 	bl	800e0a8 <__hi0bits>
 800d37c:	f1c0 0020 	rsb	r0, r0, #32
 800d380:	9b08      	ldr	r3, [sp, #32]
 800d382:	4418      	add	r0, r3
 800d384:	f010 001f 	ands.w	r0, r0, #31
 800d388:	d077      	beq.n	800d47a <_dtoa_r+0x8f2>
 800d38a:	f1c0 0320 	rsb	r3, r0, #32
 800d38e:	2b04      	cmp	r3, #4
 800d390:	dd6b      	ble.n	800d46a <_dtoa_r+0x8e2>
 800d392:	9b08      	ldr	r3, [sp, #32]
 800d394:	f1c0 001c 	rsb	r0, r0, #28
 800d398:	4403      	add	r3, r0
 800d39a:	4480      	add	r8, r0
 800d39c:	4406      	add	r6, r0
 800d39e:	9308      	str	r3, [sp, #32]
 800d3a0:	f1b8 0f00 	cmp.w	r8, #0
 800d3a4:	dd05      	ble.n	800d3b2 <_dtoa_r+0x82a>
 800d3a6:	4649      	mov	r1, r9
 800d3a8:	4642      	mov	r2, r8
 800d3aa:	4658      	mov	r0, fp
 800d3ac:	f000 ffe2 	bl	800e374 <__lshift>
 800d3b0:	4681      	mov	r9, r0
 800d3b2:	9b08      	ldr	r3, [sp, #32]
 800d3b4:	2b00      	cmp	r3, #0
 800d3b6:	dd05      	ble.n	800d3c4 <_dtoa_r+0x83c>
 800d3b8:	4621      	mov	r1, r4
 800d3ba:	461a      	mov	r2, r3
 800d3bc:	4658      	mov	r0, fp
 800d3be:	f000 ffd9 	bl	800e374 <__lshift>
 800d3c2:	4604      	mov	r4, r0
 800d3c4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800d3c6:	2b00      	cmp	r3, #0
 800d3c8:	d059      	beq.n	800d47e <_dtoa_r+0x8f6>
 800d3ca:	4621      	mov	r1, r4
 800d3cc:	4648      	mov	r0, r9
 800d3ce:	f001 f83d 	bl	800e44c <__mcmp>
 800d3d2:	2800      	cmp	r0, #0
 800d3d4:	da53      	bge.n	800d47e <_dtoa_r+0x8f6>
 800d3d6:	1e7b      	subs	r3, r7, #1
 800d3d8:	9304      	str	r3, [sp, #16]
 800d3da:	4649      	mov	r1, r9
 800d3dc:	2300      	movs	r3, #0
 800d3de:	220a      	movs	r2, #10
 800d3e0:	4658      	mov	r0, fp
 800d3e2:	f000 fdd1 	bl	800df88 <__multadd>
 800d3e6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d3e8:	4681      	mov	r9, r0
 800d3ea:	2b00      	cmp	r3, #0
 800d3ec:	f000 8172 	beq.w	800d6d4 <_dtoa_r+0xb4c>
 800d3f0:	2300      	movs	r3, #0
 800d3f2:	4629      	mov	r1, r5
 800d3f4:	220a      	movs	r2, #10
 800d3f6:	4658      	mov	r0, fp
 800d3f8:	f000 fdc6 	bl	800df88 <__multadd>
 800d3fc:	9b00      	ldr	r3, [sp, #0]
 800d3fe:	2b00      	cmp	r3, #0
 800d400:	4605      	mov	r5, r0
 800d402:	dc67      	bgt.n	800d4d4 <_dtoa_r+0x94c>
 800d404:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d406:	2b02      	cmp	r3, #2
 800d408:	dc41      	bgt.n	800d48e <_dtoa_r+0x906>
 800d40a:	e063      	b.n	800d4d4 <_dtoa_r+0x94c>
 800d40c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800d40e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800d412:	e746      	b.n	800d2a2 <_dtoa_r+0x71a>
 800d414:	9b07      	ldr	r3, [sp, #28]
 800d416:	1e5c      	subs	r4, r3, #1
 800d418:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d41a:	42a3      	cmp	r3, r4
 800d41c:	bfbf      	itttt	lt
 800d41e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800d420:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800d422:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800d424:	1ae3      	sublt	r3, r4, r3
 800d426:	bfb4      	ite	lt
 800d428:	18d2      	addlt	r2, r2, r3
 800d42a:	1b1c      	subge	r4, r3, r4
 800d42c:	9b07      	ldr	r3, [sp, #28]
 800d42e:	bfbc      	itt	lt
 800d430:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800d432:	2400      	movlt	r4, #0
 800d434:	2b00      	cmp	r3, #0
 800d436:	bfb5      	itete	lt
 800d438:	eba8 0603 	sublt.w	r6, r8, r3
 800d43c:	9b07      	ldrge	r3, [sp, #28]
 800d43e:	2300      	movlt	r3, #0
 800d440:	4646      	movge	r6, r8
 800d442:	e730      	b.n	800d2a6 <_dtoa_r+0x71e>
 800d444:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800d446:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800d448:	4646      	mov	r6, r8
 800d44a:	e735      	b.n	800d2b8 <_dtoa_r+0x730>
 800d44c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d44e:	e75c      	b.n	800d30a <_dtoa_r+0x782>
 800d450:	2300      	movs	r3, #0
 800d452:	e788      	b.n	800d366 <_dtoa_r+0x7de>
 800d454:	3fe00000 	.word	0x3fe00000
 800d458:	40240000 	.word	0x40240000
 800d45c:	40140000 	.word	0x40140000
 800d460:	9b02      	ldr	r3, [sp, #8]
 800d462:	e780      	b.n	800d366 <_dtoa_r+0x7de>
 800d464:	2300      	movs	r3, #0
 800d466:	930a      	str	r3, [sp, #40]	@ 0x28
 800d468:	e782      	b.n	800d370 <_dtoa_r+0x7e8>
 800d46a:	d099      	beq.n	800d3a0 <_dtoa_r+0x818>
 800d46c:	9a08      	ldr	r2, [sp, #32]
 800d46e:	331c      	adds	r3, #28
 800d470:	441a      	add	r2, r3
 800d472:	4498      	add	r8, r3
 800d474:	441e      	add	r6, r3
 800d476:	9208      	str	r2, [sp, #32]
 800d478:	e792      	b.n	800d3a0 <_dtoa_r+0x818>
 800d47a:	4603      	mov	r3, r0
 800d47c:	e7f6      	b.n	800d46c <_dtoa_r+0x8e4>
 800d47e:	9b07      	ldr	r3, [sp, #28]
 800d480:	9704      	str	r7, [sp, #16]
 800d482:	2b00      	cmp	r3, #0
 800d484:	dc20      	bgt.n	800d4c8 <_dtoa_r+0x940>
 800d486:	9300      	str	r3, [sp, #0]
 800d488:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d48a:	2b02      	cmp	r3, #2
 800d48c:	dd1e      	ble.n	800d4cc <_dtoa_r+0x944>
 800d48e:	9b00      	ldr	r3, [sp, #0]
 800d490:	2b00      	cmp	r3, #0
 800d492:	f47f aec0 	bne.w	800d216 <_dtoa_r+0x68e>
 800d496:	4621      	mov	r1, r4
 800d498:	2205      	movs	r2, #5
 800d49a:	4658      	mov	r0, fp
 800d49c:	f000 fd74 	bl	800df88 <__multadd>
 800d4a0:	4601      	mov	r1, r0
 800d4a2:	4604      	mov	r4, r0
 800d4a4:	4648      	mov	r0, r9
 800d4a6:	f000 ffd1 	bl	800e44c <__mcmp>
 800d4aa:	2800      	cmp	r0, #0
 800d4ac:	f77f aeb3 	ble.w	800d216 <_dtoa_r+0x68e>
 800d4b0:	4656      	mov	r6, sl
 800d4b2:	2331      	movs	r3, #49	@ 0x31
 800d4b4:	f806 3b01 	strb.w	r3, [r6], #1
 800d4b8:	9b04      	ldr	r3, [sp, #16]
 800d4ba:	3301      	adds	r3, #1
 800d4bc:	9304      	str	r3, [sp, #16]
 800d4be:	e6ae      	b.n	800d21e <_dtoa_r+0x696>
 800d4c0:	9c07      	ldr	r4, [sp, #28]
 800d4c2:	9704      	str	r7, [sp, #16]
 800d4c4:	4625      	mov	r5, r4
 800d4c6:	e7f3      	b.n	800d4b0 <_dtoa_r+0x928>
 800d4c8:	9b07      	ldr	r3, [sp, #28]
 800d4ca:	9300      	str	r3, [sp, #0]
 800d4cc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d4ce:	2b00      	cmp	r3, #0
 800d4d0:	f000 8104 	beq.w	800d6dc <_dtoa_r+0xb54>
 800d4d4:	2e00      	cmp	r6, #0
 800d4d6:	dd05      	ble.n	800d4e4 <_dtoa_r+0x95c>
 800d4d8:	4629      	mov	r1, r5
 800d4da:	4632      	mov	r2, r6
 800d4dc:	4658      	mov	r0, fp
 800d4de:	f000 ff49 	bl	800e374 <__lshift>
 800d4e2:	4605      	mov	r5, r0
 800d4e4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d4e6:	2b00      	cmp	r3, #0
 800d4e8:	d05a      	beq.n	800d5a0 <_dtoa_r+0xa18>
 800d4ea:	6869      	ldr	r1, [r5, #4]
 800d4ec:	4658      	mov	r0, fp
 800d4ee:	f000 fce9 	bl	800dec4 <_Balloc>
 800d4f2:	4606      	mov	r6, r0
 800d4f4:	b928      	cbnz	r0, 800d502 <_dtoa_r+0x97a>
 800d4f6:	4b84      	ldr	r3, [pc, #528]	@ (800d708 <_dtoa_r+0xb80>)
 800d4f8:	4602      	mov	r2, r0
 800d4fa:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800d4fe:	f7ff bb5a 	b.w	800cbb6 <_dtoa_r+0x2e>
 800d502:	692a      	ldr	r2, [r5, #16]
 800d504:	3202      	adds	r2, #2
 800d506:	0092      	lsls	r2, r2, #2
 800d508:	f105 010c 	add.w	r1, r5, #12
 800d50c:	300c      	adds	r0, #12
 800d50e:	f7ff fa8b 	bl	800ca28 <memcpy>
 800d512:	2201      	movs	r2, #1
 800d514:	4631      	mov	r1, r6
 800d516:	4658      	mov	r0, fp
 800d518:	f000 ff2c 	bl	800e374 <__lshift>
 800d51c:	f10a 0301 	add.w	r3, sl, #1
 800d520:	9307      	str	r3, [sp, #28]
 800d522:	9b00      	ldr	r3, [sp, #0]
 800d524:	4453      	add	r3, sl
 800d526:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d528:	9b02      	ldr	r3, [sp, #8]
 800d52a:	f003 0301 	and.w	r3, r3, #1
 800d52e:	462f      	mov	r7, r5
 800d530:	930a      	str	r3, [sp, #40]	@ 0x28
 800d532:	4605      	mov	r5, r0
 800d534:	9b07      	ldr	r3, [sp, #28]
 800d536:	4621      	mov	r1, r4
 800d538:	3b01      	subs	r3, #1
 800d53a:	4648      	mov	r0, r9
 800d53c:	9300      	str	r3, [sp, #0]
 800d53e:	f7ff fa99 	bl	800ca74 <quorem>
 800d542:	4639      	mov	r1, r7
 800d544:	9002      	str	r0, [sp, #8]
 800d546:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800d54a:	4648      	mov	r0, r9
 800d54c:	f000 ff7e 	bl	800e44c <__mcmp>
 800d550:	462a      	mov	r2, r5
 800d552:	9008      	str	r0, [sp, #32]
 800d554:	4621      	mov	r1, r4
 800d556:	4658      	mov	r0, fp
 800d558:	f000 ff94 	bl	800e484 <__mdiff>
 800d55c:	68c2      	ldr	r2, [r0, #12]
 800d55e:	4606      	mov	r6, r0
 800d560:	bb02      	cbnz	r2, 800d5a4 <_dtoa_r+0xa1c>
 800d562:	4601      	mov	r1, r0
 800d564:	4648      	mov	r0, r9
 800d566:	f000 ff71 	bl	800e44c <__mcmp>
 800d56a:	4602      	mov	r2, r0
 800d56c:	4631      	mov	r1, r6
 800d56e:	4658      	mov	r0, fp
 800d570:	920e      	str	r2, [sp, #56]	@ 0x38
 800d572:	f000 fce7 	bl	800df44 <_Bfree>
 800d576:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d578:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d57a:	9e07      	ldr	r6, [sp, #28]
 800d57c:	ea43 0102 	orr.w	r1, r3, r2
 800d580:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d582:	4319      	orrs	r1, r3
 800d584:	d110      	bne.n	800d5a8 <_dtoa_r+0xa20>
 800d586:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800d58a:	d029      	beq.n	800d5e0 <_dtoa_r+0xa58>
 800d58c:	9b08      	ldr	r3, [sp, #32]
 800d58e:	2b00      	cmp	r3, #0
 800d590:	dd02      	ble.n	800d598 <_dtoa_r+0xa10>
 800d592:	9b02      	ldr	r3, [sp, #8]
 800d594:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800d598:	9b00      	ldr	r3, [sp, #0]
 800d59a:	f883 8000 	strb.w	r8, [r3]
 800d59e:	e63f      	b.n	800d220 <_dtoa_r+0x698>
 800d5a0:	4628      	mov	r0, r5
 800d5a2:	e7bb      	b.n	800d51c <_dtoa_r+0x994>
 800d5a4:	2201      	movs	r2, #1
 800d5a6:	e7e1      	b.n	800d56c <_dtoa_r+0x9e4>
 800d5a8:	9b08      	ldr	r3, [sp, #32]
 800d5aa:	2b00      	cmp	r3, #0
 800d5ac:	db04      	blt.n	800d5b8 <_dtoa_r+0xa30>
 800d5ae:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800d5b0:	430b      	orrs	r3, r1
 800d5b2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d5b4:	430b      	orrs	r3, r1
 800d5b6:	d120      	bne.n	800d5fa <_dtoa_r+0xa72>
 800d5b8:	2a00      	cmp	r2, #0
 800d5ba:	dded      	ble.n	800d598 <_dtoa_r+0xa10>
 800d5bc:	4649      	mov	r1, r9
 800d5be:	2201      	movs	r2, #1
 800d5c0:	4658      	mov	r0, fp
 800d5c2:	f000 fed7 	bl	800e374 <__lshift>
 800d5c6:	4621      	mov	r1, r4
 800d5c8:	4681      	mov	r9, r0
 800d5ca:	f000 ff3f 	bl	800e44c <__mcmp>
 800d5ce:	2800      	cmp	r0, #0
 800d5d0:	dc03      	bgt.n	800d5da <_dtoa_r+0xa52>
 800d5d2:	d1e1      	bne.n	800d598 <_dtoa_r+0xa10>
 800d5d4:	f018 0f01 	tst.w	r8, #1
 800d5d8:	d0de      	beq.n	800d598 <_dtoa_r+0xa10>
 800d5da:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800d5de:	d1d8      	bne.n	800d592 <_dtoa_r+0xa0a>
 800d5e0:	9a00      	ldr	r2, [sp, #0]
 800d5e2:	2339      	movs	r3, #57	@ 0x39
 800d5e4:	7013      	strb	r3, [r2, #0]
 800d5e6:	4633      	mov	r3, r6
 800d5e8:	461e      	mov	r6, r3
 800d5ea:	3b01      	subs	r3, #1
 800d5ec:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800d5f0:	2a39      	cmp	r2, #57	@ 0x39
 800d5f2:	d052      	beq.n	800d69a <_dtoa_r+0xb12>
 800d5f4:	3201      	adds	r2, #1
 800d5f6:	701a      	strb	r2, [r3, #0]
 800d5f8:	e612      	b.n	800d220 <_dtoa_r+0x698>
 800d5fa:	2a00      	cmp	r2, #0
 800d5fc:	dd07      	ble.n	800d60e <_dtoa_r+0xa86>
 800d5fe:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800d602:	d0ed      	beq.n	800d5e0 <_dtoa_r+0xa58>
 800d604:	9a00      	ldr	r2, [sp, #0]
 800d606:	f108 0301 	add.w	r3, r8, #1
 800d60a:	7013      	strb	r3, [r2, #0]
 800d60c:	e608      	b.n	800d220 <_dtoa_r+0x698>
 800d60e:	9b07      	ldr	r3, [sp, #28]
 800d610:	9a07      	ldr	r2, [sp, #28]
 800d612:	f803 8c01 	strb.w	r8, [r3, #-1]
 800d616:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d618:	4293      	cmp	r3, r2
 800d61a:	d028      	beq.n	800d66e <_dtoa_r+0xae6>
 800d61c:	4649      	mov	r1, r9
 800d61e:	2300      	movs	r3, #0
 800d620:	220a      	movs	r2, #10
 800d622:	4658      	mov	r0, fp
 800d624:	f000 fcb0 	bl	800df88 <__multadd>
 800d628:	42af      	cmp	r7, r5
 800d62a:	4681      	mov	r9, r0
 800d62c:	f04f 0300 	mov.w	r3, #0
 800d630:	f04f 020a 	mov.w	r2, #10
 800d634:	4639      	mov	r1, r7
 800d636:	4658      	mov	r0, fp
 800d638:	d107      	bne.n	800d64a <_dtoa_r+0xac2>
 800d63a:	f000 fca5 	bl	800df88 <__multadd>
 800d63e:	4607      	mov	r7, r0
 800d640:	4605      	mov	r5, r0
 800d642:	9b07      	ldr	r3, [sp, #28]
 800d644:	3301      	adds	r3, #1
 800d646:	9307      	str	r3, [sp, #28]
 800d648:	e774      	b.n	800d534 <_dtoa_r+0x9ac>
 800d64a:	f000 fc9d 	bl	800df88 <__multadd>
 800d64e:	4629      	mov	r1, r5
 800d650:	4607      	mov	r7, r0
 800d652:	2300      	movs	r3, #0
 800d654:	220a      	movs	r2, #10
 800d656:	4658      	mov	r0, fp
 800d658:	f000 fc96 	bl	800df88 <__multadd>
 800d65c:	4605      	mov	r5, r0
 800d65e:	e7f0      	b.n	800d642 <_dtoa_r+0xaba>
 800d660:	9b00      	ldr	r3, [sp, #0]
 800d662:	2b00      	cmp	r3, #0
 800d664:	bfcc      	ite	gt
 800d666:	461e      	movgt	r6, r3
 800d668:	2601      	movle	r6, #1
 800d66a:	4456      	add	r6, sl
 800d66c:	2700      	movs	r7, #0
 800d66e:	4649      	mov	r1, r9
 800d670:	2201      	movs	r2, #1
 800d672:	4658      	mov	r0, fp
 800d674:	f000 fe7e 	bl	800e374 <__lshift>
 800d678:	4621      	mov	r1, r4
 800d67a:	4681      	mov	r9, r0
 800d67c:	f000 fee6 	bl	800e44c <__mcmp>
 800d680:	2800      	cmp	r0, #0
 800d682:	dcb0      	bgt.n	800d5e6 <_dtoa_r+0xa5e>
 800d684:	d102      	bne.n	800d68c <_dtoa_r+0xb04>
 800d686:	f018 0f01 	tst.w	r8, #1
 800d68a:	d1ac      	bne.n	800d5e6 <_dtoa_r+0xa5e>
 800d68c:	4633      	mov	r3, r6
 800d68e:	461e      	mov	r6, r3
 800d690:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d694:	2a30      	cmp	r2, #48	@ 0x30
 800d696:	d0fa      	beq.n	800d68e <_dtoa_r+0xb06>
 800d698:	e5c2      	b.n	800d220 <_dtoa_r+0x698>
 800d69a:	459a      	cmp	sl, r3
 800d69c:	d1a4      	bne.n	800d5e8 <_dtoa_r+0xa60>
 800d69e:	9b04      	ldr	r3, [sp, #16]
 800d6a0:	3301      	adds	r3, #1
 800d6a2:	9304      	str	r3, [sp, #16]
 800d6a4:	2331      	movs	r3, #49	@ 0x31
 800d6a6:	f88a 3000 	strb.w	r3, [sl]
 800d6aa:	e5b9      	b.n	800d220 <_dtoa_r+0x698>
 800d6ac:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800d6ae:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800d70c <_dtoa_r+0xb84>
 800d6b2:	b11b      	cbz	r3, 800d6bc <_dtoa_r+0xb34>
 800d6b4:	f10a 0308 	add.w	r3, sl, #8
 800d6b8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800d6ba:	6013      	str	r3, [r2, #0]
 800d6bc:	4650      	mov	r0, sl
 800d6be:	b019      	add	sp, #100	@ 0x64
 800d6c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d6c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d6c6:	2b01      	cmp	r3, #1
 800d6c8:	f77f ae37 	ble.w	800d33a <_dtoa_r+0x7b2>
 800d6cc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d6ce:	930a      	str	r3, [sp, #40]	@ 0x28
 800d6d0:	2001      	movs	r0, #1
 800d6d2:	e655      	b.n	800d380 <_dtoa_r+0x7f8>
 800d6d4:	9b00      	ldr	r3, [sp, #0]
 800d6d6:	2b00      	cmp	r3, #0
 800d6d8:	f77f aed6 	ble.w	800d488 <_dtoa_r+0x900>
 800d6dc:	4656      	mov	r6, sl
 800d6de:	4621      	mov	r1, r4
 800d6e0:	4648      	mov	r0, r9
 800d6e2:	f7ff f9c7 	bl	800ca74 <quorem>
 800d6e6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800d6ea:	f806 8b01 	strb.w	r8, [r6], #1
 800d6ee:	9b00      	ldr	r3, [sp, #0]
 800d6f0:	eba6 020a 	sub.w	r2, r6, sl
 800d6f4:	4293      	cmp	r3, r2
 800d6f6:	ddb3      	ble.n	800d660 <_dtoa_r+0xad8>
 800d6f8:	4649      	mov	r1, r9
 800d6fa:	2300      	movs	r3, #0
 800d6fc:	220a      	movs	r2, #10
 800d6fe:	4658      	mov	r0, fp
 800d700:	f000 fc42 	bl	800df88 <__multadd>
 800d704:	4681      	mov	r9, r0
 800d706:	e7ea      	b.n	800d6de <_dtoa_r+0xb56>
 800d708:	080120a8 	.word	0x080120a8
 800d70c:	0801202c 	.word	0x0801202c

0800d710 <_free_r>:
 800d710:	b538      	push	{r3, r4, r5, lr}
 800d712:	4605      	mov	r5, r0
 800d714:	2900      	cmp	r1, #0
 800d716:	d041      	beq.n	800d79c <_free_r+0x8c>
 800d718:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d71c:	1f0c      	subs	r4, r1, #4
 800d71e:	2b00      	cmp	r3, #0
 800d720:	bfb8      	it	lt
 800d722:	18e4      	addlt	r4, r4, r3
 800d724:	f7fc fb30 	bl	8009d88 <__malloc_lock>
 800d728:	4a1d      	ldr	r2, [pc, #116]	@ (800d7a0 <_free_r+0x90>)
 800d72a:	6813      	ldr	r3, [r2, #0]
 800d72c:	b933      	cbnz	r3, 800d73c <_free_r+0x2c>
 800d72e:	6063      	str	r3, [r4, #4]
 800d730:	6014      	str	r4, [r2, #0]
 800d732:	4628      	mov	r0, r5
 800d734:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d738:	f7fc bb2c 	b.w	8009d94 <__malloc_unlock>
 800d73c:	42a3      	cmp	r3, r4
 800d73e:	d908      	bls.n	800d752 <_free_r+0x42>
 800d740:	6820      	ldr	r0, [r4, #0]
 800d742:	1821      	adds	r1, r4, r0
 800d744:	428b      	cmp	r3, r1
 800d746:	bf01      	itttt	eq
 800d748:	6819      	ldreq	r1, [r3, #0]
 800d74a:	685b      	ldreq	r3, [r3, #4]
 800d74c:	1809      	addeq	r1, r1, r0
 800d74e:	6021      	streq	r1, [r4, #0]
 800d750:	e7ed      	b.n	800d72e <_free_r+0x1e>
 800d752:	461a      	mov	r2, r3
 800d754:	685b      	ldr	r3, [r3, #4]
 800d756:	b10b      	cbz	r3, 800d75c <_free_r+0x4c>
 800d758:	42a3      	cmp	r3, r4
 800d75a:	d9fa      	bls.n	800d752 <_free_r+0x42>
 800d75c:	6811      	ldr	r1, [r2, #0]
 800d75e:	1850      	adds	r0, r2, r1
 800d760:	42a0      	cmp	r0, r4
 800d762:	d10b      	bne.n	800d77c <_free_r+0x6c>
 800d764:	6820      	ldr	r0, [r4, #0]
 800d766:	4401      	add	r1, r0
 800d768:	1850      	adds	r0, r2, r1
 800d76a:	4283      	cmp	r3, r0
 800d76c:	6011      	str	r1, [r2, #0]
 800d76e:	d1e0      	bne.n	800d732 <_free_r+0x22>
 800d770:	6818      	ldr	r0, [r3, #0]
 800d772:	685b      	ldr	r3, [r3, #4]
 800d774:	6053      	str	r3, [r2, #4]
 800d776:	4408      	add	r0, r1
 800d778:	6010      	str	r0, [r2, #0]
 800d77a:	e7da      	b.n	800d732 <_free_r+0x22>
 800d77c:	d902      	bls.n	800d784 <_free_r+0x74>
 800d77e:	230c      	movs	r3, #12
 800d780:	602b      	str	r3, [r5, #0]
 800d782:	e7d6      	b.n	800d732 <_free_r+0x22>
 800d784:	6820      	ldr	r0, [r4, #0]
 800d786:	1821      	adds	r1, r4, r0
 800d788:	428b      	cmp	r3, r1
 800d78a:	bf04      	itt	eq
 800d78c:	6819      	ldreq	r1, [r3, #0]
 800d78e:	685b      	ldreq	r3, [r3, #4]
 800d790:	6063      	str	r3, [r4, #4]
 800d792:	bf04      	itt	eq
 800d794:	1809      	addeq	r1, r1, r0
 800d796:	6021      	streq	r1, [r4, #0]
 800d798:	6054      	str	r4, [r2, #4]
 800d79a:	e7ca      	b.n	800d732 <_free_r+0x22>
 800d79c:	bd38      	pop	{r3, r4, r5, pc}
 800d79e:	bf00      	nop
 800d7a0:	200090c0 	.word	0x200090c0

0800d7a4 <rshift>:
 800d7a4:	6903      	ldr	r3, [r0, #16]
 800d7a6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800d7aa:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d7ae:	ea4f 1261 	mov.w	r2, r1, asr #5
 800d7b2:	f100 0414 	add.w	r4, r0, #20
 800d7b6:	dd45      	ble.n	800d844 <rshift+0xa0>
 800d7b8:	f011 011f 	ands.w	r1, r1, #31
 800d7bc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800d7c0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800d7c4:	d10c      	bne.n	800d7e0 <rshift+0x3c>
 800d7c6:	f100 0710 	add.w	r7, r0, #16
 800d7ca:	4629      	mov	r1, r5
 800d7cc:	42b1      	cmp	r1, r6
 800d7ce:	d334      	bcc.n	800d83a <rshift+0x96>
 800d7d0:	1a9b      	subs	r3, r3, r2
 800d7d2:	009b      	lsls	r3, r3, #2
 800d7d4:	1eea      	subs	r2, r5, #3
 800d7d6:	4296      	cmp	r6, r2
 800d7d8:	bf38      	it	cc
 800d7da:	2300      	movcc	r3, #0
 800d7dc:	4423      	add	r3, r4
 800d7de:	e015      	b.n	800d80c <rshift+0x68>
 800d7e0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800d7e4:	f1c1 0820 	rsb	r8, r1, #32
 800d7e8:	40cf      	lsrs	r7, r1
 800d7ea:	f105 0e04 	add.w	lr, r5, #4
 800d7ee:	46a1      	mov	r9, r4
 800d7f0:	4576      	cmp	r6, lr
 800d7f2:	46f4      	mov	ip, lr
 800d7f4:	d815      	bhi.n	800d822 <rshift+0x7e>
 800d7f6:	1a9a      	subs	r2, r3, r2
 800d7f8:	0092      	lsls	r2, r2, #2
 800d7fa:	3a04      	subs	r2, #4
 800d7fc:	3501      	adds	r5, #1
 800d7fe:	42ae      	cmp	r6, r5
 800d800:	bf38      	it	cc
 800d802:	2200      	movcc	r2, #0
 800d804:	18a3      	adds	r3, r4, r2
 800d806:	50a7      	str	r7, [r4, r2]
 800d808:	b107      	cbz	r7, 800d80c <rshift+0x68>
 800d80a:	3304      	adds	r3, #4
 800d80c:	1b1a      	subs	r2, r3, r4
 800d80e:	42a3      	cmp	r3, r4
 800d810:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800d814:	bf08      	it	eq
 800d816:	2300      	moveq	r3, #0
 800d818:	6102      	str	r2, [r0, #16]
 800d81a:	bf08      	it	eq
 800d81c:	6143      	streq	r3, [r0, #20]
 800d81e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d822:	f8dc c000 	ldr.w	ip, [ip]
 800d826:	fa0c fc08 	lsl.w	ip, ip, r8
 800d82a:	ea4c 0707 	orr.w	r7, ip, r7
 800d82e:	f849 7b04 	str.w	r7, [r9], #4
 800d832:	f85e 7b04 	ldr.w	r7, [lr], #4
 800d836:	40cf      	lsrs	r7, r1
 800d838:	e7da      	b.n	800d7f0 <rshift+0x4c>
 800d83a:	f851 cb04 	ldr.w	ip, [r1], #4
 800d83e:	f847 cf04 	str.w	ip, [r7, #4]!
 800d842:	e7c3      	b.n	800d7cc <rshift+0x28>
 800d844:	4623      	mov	r3, r4
 800d846:	e7e1      	b.n	800d80c <rshift+0x68>

0800d848 <__hexdig_fun>:
 800d848:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800d84c:	2b09      	cmp	r3, #9
 800d84e:	d802      	bhi.n	800d856 <__hexdig_fun+0xe>
 800d850:	3820      	subs	r0, #32
 800d852:	b2c0      	uxtb	r0, r0
 800d854:	4770      	bx	lr
 800d856:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800d85a:	2b05      	cmp	r3, #5
 800d85c:	d801      	bhi.n	800d862 <__hexdig_fun+0x1a>
 800d85e:	3847      	subs	r0, #71	@ 0x47
 800d860:	e7f7      	b.n	800d852 <__hexdig_fun+0xa>
 800d862:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800d866:	2b05      	cmp	r3, #5
 800d868:	d801      	bhi.n	800d86e <__hexdig_fun+0x26>
 800d86a:	3827      	subs	r0, #39	@ 0x27
 800d86c:	e7f1      	b.n	800d852 <__hexdig_fun+0xa>
 800d86e:	2000      	movs	r0, #0
 800d870:	4770      	bx	lr
	...

0800d874 <__gethex>:
 800d874:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d878:	b085      	sub	sp, #20
 800d87a:	468a      	mov	sl, r1
 800d87c:	9302      	str	r3, [sp, #8]
 800d87e:	680b      	ldr	r3, [r1, #0]
 800d880:	9001      	str	r0, [sp, #4]
 800d882:	4690      	mov	r8, r2
 800d884:	1c9c      	adds	r4, r3, #2
 800d886:	46a1      	mov	r9, r4
 800d888:	f814 0b01 	ldrb.w	r0, [r4], #1
 800d88c:	2830      	cmp	r0, #48	@ 0x30
 800d88e:	d0fa      	beq.n	800d886 <__gethex+0x12>
 800d890:	eba9 0303 	sub.w	r3, r9, r3
 800d894:	f1a3 0b02 	sub.w	fp, r3, #2
 800d898:	f7ff ffd6 	bl	800d848 <__hexdig_fun>
 800d89c:	4605      	mov	r5, r0
 800d89e:	2800      	cmp	r0, #0
 800d8a0:	d168      	bne.n	800d974 <__gethex+0x100>
 800d8a2:	49a0      	ldr	r1, [pc, #640]	@ (800db24 <__gethex+0x2b0>)
 800d8a4:	2201      	movs	r2, #1
 800d8a6:	4648      	mov	r0, r9
 800d8a8:	f7fe fa29 	bl	800bcfe <strncmp>
 800d8ac:	4607      	mov	r7, r0
 800d8ae:	2800      	cmp	r0, #0
 800d8b0:	d167      	bne.n	800d982 <__gethex+0x10e>
 800d8b2:	f899 0001 	ldrb.w	r0, [r9, #1]
 800d8b6:	4626      	mov	r6, r4
 800d8b8:	f7ff ffc6 	bl	800d848 <__hexdig_fun>
 800d8bc:	2800      	cmp	r0, #0
 800d8be:	d062      	beq.n	800d986 <__gethex+0x112>
 800d8c0:	4623      	mov	r3, r4
 800d8c2:	7818      	ldrb	r0, [r3, #0]
 800d8c4:	2830      	cmp	r0, #48	@ 0x30
 800d8c6:	4699      	mov	r9, r3
 800d8c8:	f103 0301 	add.w	r3, r3, #1
 800d8cc:	d0f9      	beq.n	800d8c2 <__gethex+0x4e>
 800d8ce:	f7ff ffbb 	bl	800d848 <__hexdig_fun>
 800d8d2:	fab0 f580 	clz	r5, r0
 800d8d6:	096d      	lsrs	r5, r5, #5
 800d8d8:	f04f 0b01 	mov.w	fp, #1
 800d8dc:	464a      	mov	r2, r9
 800d8de:	4616      	mov	r6, r2
 800d8e0:	3201      	adds	r2, #1
 800d8e2:	7830      	ldrb	r0, [r6, #0]
 800d8e4:	f7ff ffb0 	bl	800d848 <__hexdig_fun>
 800d8e8:	2800      	cmp	r0, #0
 800d8ea:	d1f8      	bne.n	800d8de <__gethex+0x6a>
 800d8ec:	498d      	ldr	r1, [pc, #564]	@ (800db24 <__gethex+0x2b0>)
 800d8ee:	2201      	movs	r2, #1
 800d8f0:	4630      	mov	r0, r6
 800d8f2:	f7fe fa04 	bl	800bcfe <strncmp>
 800d8f6:	2800      	cmp	r0, #0
 800d8f8:	d13f      	bne.n	800d97a <__gethex+0x106>
 800d8fa:	b944      	cbnz	r4, 800d90e <__gethex+0x9a>
 800d8fc:	1c74      	adds	r4, r6, #1
 800d8fe:	4622      	mov	r2, r4
 800d900:	4616      	mov	r6, r2
 800d902:	3201      	adds	r2, #1
 800d904:	7830      	ldrb	r0, [r6, #0]
 800d906:	f7ff ff9f 	bl	800d848 <__hexdig_fun>
 800d90a:	2800      	cmp	r0, #0
 800d90c:	d1f8      	bne.n	800d900 <__gethex+0x8c>
 800d90e:	1ba4      	subs	r4, r4, r6
 800d910:	00a7      	lsls	r7, r4, #2
 800d912:	7833      	ldrb	r3, [r6, #0]
 800d914:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800d918:	2b50      	cmp	r3, #80	@ 0x50
 800d91a:	d13e      	bne.n	800d99a <__gethex+0x126>
 800d91c:	7873      	ldrb	r3, [r6, #1]
 800d91e:	2b2b      	cmp	r3, #43	@ 0x2b
 800d920:	d033      	beq.n	800d98a <__gethex+0x116>
 800d922:	2b2d      	cmp	r3, #45	@ 0x2d
 800d924:	d034      	beq.n	800d990 <__gethex+0x11c>
 800d926:	1c71      	adds	r1, r6, #1
 800d928:	2400      	movs	r4, #0
 800d92a:	7808      	ldrb	r0, [r1, #0]
 800d92c:	f7ff ff8c 	bl	800d848 <__hexdig_fun>
 800d930:	1e43      	subs	r3, r0, #1
 800d932:	b2db      	uxtb	r3, r3
 800d934:	2b18      	cmp	r3, #24
 800d936:	d830      	bhi.n	800d99a <__gethex+0x126>
 800d938:	f1a0 0210 	sub.w	r2, r0, #16
 800d93c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800d940:	f7ff ff82 	bl	800d848 <__hexdig_fun>
 800d944:	f100 3cff 	add.w	ip, r0, #4294967295
 800d948:	fa5f fc8c 	uxtb.w	ip, ip
 800d94c:	f1bc 0f18 	cmp.w	ip, #24
 800d950:	f04f 030a 	mov.w	r3, #10
 800d954:	d91e      	bls.n	800d994 <__gethex+0x120>
 800d956:	b104      	cbz	r4, 800d95a <__gethex+0xe6>
 800d958:	4252      	negs	r2, r2
 800d95a:	4417      	add	r7, r2
 800d95c:	f8ca 1000 	str.w	r1, [sl]
 800d960:	b1ed      	cbz	r5, 800d99e <__gethex+0x12a>
 800d962:	f1bb 0f00 	cmp.w	fp, #0
 800d966:	bf0c      	ite	eq
 800d968:	2506      	moveq	r5, #6
 800d96a:	2500      	movne	r5, #0
 800d96c:	4628      	mov	r0, r5
 800d96e:	b005      	add	sp, #20
 800d970:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d974:	2500      	movs	r5, #0
 800d976:	462c      	mov	r4, r5
 800d978:	e7b0      	b.n	800d8dc <__gethex+0x68>
 800d97a:	2c00      	cmp	r4, #0
 800d97c:	d1c7      	bne.n	800d90e <__gethex+0x9a>
 800d97e:	4627      	mov	r7, r4
 800d980:	e7c7      	b.n	800d912 <__gethex+0x9e>
 800d982:	464e      	mov	r6, r9
 800d984:	462f      	mov	r7, r5
 800d986:	2501      	movs	r5, #1
 800d988:	e7c3      	b.n	800d912 <__gethex+0x9e>
 800d98a:	2400      	movs	r4, #0
 800d98c:	1cb1      	adds	r1, r6, #2
 800d98e:	e7cc      	b.n	800d92a <__gethex+0xb6>
 800d990:	2401      	movs	r4, #1
 800d992:	e7fb      	b.n	800d98c <__gethex+0x118>
 800d994:	fb03 0002 	mla	r0, r3, r2, r0
 800d998:	e7ce      	b.n	800d938 <__gethex+0xc4>
 800d99a:	4631      	mov	r1, r6
 800d99c:	e7de      	b.n	800d95c <__gethex+0xe8>
 800d99e:	eba6 0309 	sub.w	r3, r6, r9
 800d9a2:	3b01      	subs	r3, #1
 800d9a4:	4629      	mov	r1, r5
 800d9a6:	2b07      	cmp	r3, #7
 800d9a8:	dc0a      	bgt.n	800d9c0 <__gethex+0x14c>
 800d9aa:	9801      	ldr	r0, [sp, #4]
 800d9ac:	f000 fa8a 	bl	800dec4 <_Balloc>
 800d9b0:	4604      	mov	r4, r0
 800d9b2:	b940      	cbnz	r0, 800d9c6 <__gethex+0x152>
 800d9b4:	4b5c      	ldr	r3, [pc, #368]	@ (800db28 <__gethex+0x2b4>)
 800d9b6:	4602      	mov	r2, r0
 800d9b8:	21e4      	movs	r1, #228	@ 0xe4
 800d9ba:	485c      	ldr	r0, [pc, #368]	@ (800db2c <__gethex+0x2b8>)
 800d9bc:	f001 ff64 	bl	800f888 <__assert_func>
 800d9c0:	3101      	adds	r1, #1
 800d9c2:	105b      	asrs	r3, r3, #1
 800d9c4:	e7ef      	b.n	800d9a6 <__gethex+0x132>
 800d9c6:	f100 0a14 	add.w	sl, r0, #20
 800d9ca:	2300      	movs	r3, #0
 800d9cc:	4655      	mov	r5, sl
 800d9ce:	469b      	mov	fp, r3
 800d9d0:	45b1      	cmp	r9, r6
 800d9d2:	d337      	bcc.n	800da44 <__gethex+0x1d0>
 800d9d4:	f845 bb04 	str.w	fp, [r5], #4
 800d9d8:	eba5 050a 	sub.w	r5, r5, sl
 800d9dc:	10ad      	asrs	r5, r5, #2
 800d9de:	6125      	str	r5, [r4, #16]
 800d9e0:	4658      	mov	r0, fp
 800d9e2:	f000 fb61 	bl	800e0a8 <__hi0bits>
 800d9e6:	016d      	lsls	r5, r5, #5
 800d9e8:	f8d8 6000 	ldr.w	r6, [r8]
 800d9ec:	1a2d      	subs	r5, r5, r0
 800d9ee:	42b5      	cmp	r5, r6
 800d9f0:	dd54      	ble.n	800da9c <__gethex+0x228>
 800d9f2:	1bad      	subs	r5, r5, r6
 800d9f4:	4629      	mov	r1, r5
 800d9f6:	4620      	mov	r0, r4
 800d9f8:	f000 fef5 	bl	800e7e6 <__any_on>
 800d9fc:	4681      	mov	r9, r0
 800d9fe:	b178      	cbz	r0, 800da20 <__gethex+0x1ac>
 800da00:	1e6b      	subs	r3, r5, #1
 800da02:	1159      	asrs	r1, r3, #5
 800da04:	f003 021f 	and.w	r2, r3, #31
 800da08:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800da0c:	f04f 0901 	mov.w	r9, #1
 800da10:	fa09 f202 	lsl.w	r2, r9, r2
 800da14:	420a      	tst	r2, r1
 800da16:	d003      	beq.n	800da20 <__gethex+0x1ac>
 800da18:	454b      	cmp	r3, r9
 800da1a:	dc36      	bgt.n	800da8a <__gethex+0x216>
 800da1c:	f04f 0902 	mov.w	r9, #2
 800da20:	4629      	mov	r1, r5
 800da22:	4620      	mov	r0, r4
 800da24:	f7ff febe 	bl	800d7a4 <rshift>
 800da28:	442f      	add	r7, r5
 800da2a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800da2e:	42bb      	cmp	r3, r7
 800da30:	da42      	bge.n	800dab8 <__gethex+0x244>
 800da32:	9801      	ldr	r0, [sp, #4]
 800da34:	4621      	mov	r1, r4
 800da36:	f000 fa85 	bl	800df44 <_Bfree>
 800da3a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800da3c:	2300      	movs	r3, #0
 800da3e:	6013      	str	r3, [r2, #0]
 800da40:	25a3      	movs	r5, #163	@ 0xa3
 800da42:	e793      	b.n	800d96c <__gethex+0xf8>
 800da44:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800da48:	2a2e      	cmp	r2, #46	@ 0x2e
 800da4a:	d012      	beq.n	800da72 <__gethex+0x1fe>
 800da4c:	2b20      	cmp	r3, #32
 800da4e:	d104      	bne.n	800da5a <__gethex+0x1e6>
 800da50:	f845 bb04 	str.w	fp, [r5], #4
 800da54:	f04f 0b00 	mov.w	fp, #0
 800da58:	465b      	mov	r3, fp
 800da5a:	7830      	ldrb	r0, [r6, #0]
 800da5c:	9303      	str	r3, [sp, #12]
 800da5e:	f7ff fef3 	bl	800d848 <__hexdig_fun>
 800da62:	9b03      	ldr	r3, [sp, #12]
 800da64:	f000 000f 	and.w	r0, r0, #15
 800da68:	4098      	lsls	r0, r3
 800da6a:	ea4b 0b00 	orr.w	fp, fp, r0
 800da6e:	3304      	adds	r3, #4
 800da70:	e7ae      	b.n	800d9d0 <__gethex+0x15c>
 800da72:	45b1      	cmp	r9, r6
 800da74:	d8ea      	bhi.n	800da4c <__gethex+0x1d8>
 800da76:	492b      	ldr	r1, [pc, #172]	@ (800db24 <__gethex+0x2b0>)
 800da78:	9303      	str	r3, [sp, #12]
 800da7a:	2201      	movs	r2, #1
 800da7c:	4630      	mov	r0, r6
 800da7e:	f7fe f93e 	bl	800bcfe <strncmp>
 800da82:	9b03      	ldr	r3, [sp, #12]
 800da84:	2800      	cmp	r0, #0
 800da86:	d1e1      	bne.n	800da4c <__gethex+0x1d8>
 800da88:	e7a2      	b.n	800d9d0 <__gethex+0x15c>
 800da8a:	1ea9      	subs	r1, r5, #2
 800da8c:	4620      	mov	r0, r4
 800da8e:	f000 feaa 	bl	800e7e6 <__any_on>
 800da92:	2800      	cmp	r0, #0
 800da94:	d0c2      	beq.n	800da1c <__gethex+0x1a8>
 800da96:	f04f 0903 	mov.w	r9, #3
 800da9a:	e7c1      	b.n	800da20 <__gethex+0x1ac>
 800da9c:	da09      	bge.n	800dab2 <__gethex+0x23e>
 800da9e:	1b75      	subs	r5, r6, r5
 800daa0:	4621      	mov	r1, r4
 800daa2:	9801      	ldr	r0, [sp, #4]
 800daa4:	462a      	mov	r2, r5
 800daa6:	f000 fc65 	bl	800e374 <__lshift>
 800daaa:	1b7f      	subs	r7, r7, r5
 800daac:	4604      	mov	r4, r0
 800daae:	f100 0a14 	add.w	sl, r0, #20
 800dab2:	f04f 0900 	mov.w	r9, #0
 800dab6:	e7b8      	b.n	800da2a <__gethex+0x1b6>
 800dab8:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800dabc:	42bd      	cmp	r5, r7
 800dabe:	dd6f      	ble.n	800dba0 <__gethex+0x32c>
 800dac0:	1bed      	subs	r5, r5, r7
 800dac2:	42ae      	cmp	r6, r5
 800dac4:	dc34      	bgt.n	800db30 <__gethex+0x2bc>
 800dac6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800daca:	2b02      	cmp	r3, #2
 800dacc:	d022      	beq.n	800db14 <__gethex+0x2a0>
 800dace:	2b03      	cmp	r3, #3
 800dad0:	d024      	beq.n	800db1c <__gethex+0x2a8>
 800dad2:	2b01      	cmp	r3, #1
 800dad4:	d115      	bne.n	800db02 <__gethex+0x28e>
 800dad6:	42ae      	cmp	r6, r5
 800dad8:	d113      	bne.n	800db02 <__gethex+0x28e>
 800dada:	2e01      	cmp	r6, #1
 800dadc:	d10b      	bne.n	800daf6 <__gethex+0x282>
 800dade:	9a02      	ldr	r2, [sp, #8]
 800dae0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800dae4:	6013      	str	r3, [r2, #0]
 800dae6:	2301      	movs	r3, #1
 800dae8:	6123      	str	r3, [r4, #16]
 800daea:	f8ca 3000 	str.w	r3, [sl]
 800daee:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800daf0:	2562      	movs	r5, #98	@ 0x62
 800daf2:	601c      	str	r4, [r3, #0]
 800daf4:	e73a      	b.n	800d96c <__gethex+0xf8>
 800daf6:	1e71      	subs	r1, r6, #1
 800daf8:	4620      	mov	r0, r4
 800dafa:	f000 fe74 	bl	800e7e6 <__any_on>
 800dafe:	2800      	cmp	r0, #0
 800db00:	d1ed      	bne.n	800dade <__gethex+0x26a>
 800db02:	9801      	ldr	r0, [sp, #4]
 800db04:	4621      	mov	r1, r4
 800db06:	f000 fa1d 	bl	800df44 <_Bfree>
 800db0a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800db0c:	2300      	movs	r3, #0
 800db0e:	6013      	str	r3, [r2, #0]
 800db10:	2550      	movs	r5, #80	@ 0x50
 800db12:	e72b      	b.n	800d96c <__gethex+0xf8>
 800db14:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800db16:	2b00      	cmp	r3, #0
 800db18:	d1f3      	bne.n	800db02 <__gethex+0x28e>
 800db1a:	e7e0      	b.n	800dade <__gethex+0x26a>
 800db1c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800db1e:	2b00      	cmp	r3, #0
 800db20:	d1dd      	bne.n	800dade <__gethex+0x26a>
 800db22:	e7ee      	b.n	800db02 <__gethex+0x28e>
 800db24:	080113d6 	.word	0x080113d6
 800db28:	080120a8 	.word	0x080120a8
 800db2c:	080120b9 	.word	0x080120b9
 800db30:	1e6f      	subs	r7, r5, #1
 800db32:	f1b9 0f00 	cmp.w	r9, #0
 800db36:	d130      	bne.n	800db9a <__gethex+0x326>
 800db38:	b127      	cbz	r7, 800db44 <__gethex+0x2d0>
 800db3a:	4639      	mov	r1, r7
 800db3c:	4620      	mov	r0, r4
 800db3e:	f000 fe52 	bl	800e7e6 <__any_on>
 800db42:	4681      	mov	r9, r0
 800db44:	117a      	asrs	r2, r7, #5
 800db46:	2301      	movs	r3, #1
 800db48:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800db4c:	f007 071f 	and.w	r7, r7, #31
 800db50:	40bb      	lsls	r3, r7
 800db52:	4213      	tst	r3, r2
 800db54:	4629      	mov	r1, r5
 800db56:	4620      	mov	r0, r4
 800db58:	bf18      	it	ne
 800db5a:	f049 0902 	orrne.w	r9, r9, #2
 800db5e:	f7ff fe21 	bl	800d7a4 <rshift>
 800db62:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800db66:	1b76      	subs	r6, r6, r5
 800db68:	2502      	movs	r5, #2
 800db6a:	f1b9 0f00 	cmp.w	r9, #0
 800db6e:	d047      	beq.n	800dc00 <__gethex+0x38c>
 800db70:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800db74:	2b02      	cmp	r3, #2
 800db76:	d015      	beq.n	800dba4 <__gethex+0x330>
 800db78:	2b03      	cmp	r3, #3
 800db7a:	d017      	beq.n	800dbac <__gethex+0x338>
 800db7c:	2b01      	cmp	r3, #1
 800db7e:	d109      	bne.n	800db94 <__gethex+0x320>
 800db80:	f019 0f02 	tst.w	r9, #2
 800db84:	d006      	beq.n	800db94 <__gethex+0x320>
 800db86:	f8da 3000 	ldr.w	r3, [sl]
 800db8a:	ea49 0903 	orr.w	r9, r9, r3
 800db8e:	f019 0f01 	tst.w	r9, #1
 800db92:	d10e      	bne.n	800dbb2 <__gethex+0x33e>
 800db94:	f045 0510 	orr.w	r5, r5, #16
 800db98:	e032      	b.n	800dc00 <__gethex+0x38c>
 800db9a:	f04f 0901 	mov.w	r9, #1
 800db9e:	e7d1      	b.n	800db44 <__gethex+0x2d0>
 800dba0:	2501      	movs	r5, #1
 800dba2:	e7e2      	b.n	800db6a <__gethex+0x2f6>
 800dba4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800dba6:	f1c3 0301 	rsb	r3, r3, #1
 800dbaa:	930f      	str	r3, [sp, #60]	@ 0x3c
 800dbac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800dbae:	2b00      	cmp	r3, #0
 800dbb0:	d0f0      	beq.n	800db94 <__gethex+0x320>
 800dbb2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800dbb6:	f104 0314 	add.w	r3, r4, #20
 800dbba:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800dbbe:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800dbc2:	f04f 0c00 	mov.w	ip, #0
 800dbc6:	4618      	mov	r0, r3
 800dbc8:	f853 2b04 	ldr.w	r2, [r3], #4
 800dbcc:	f1b2 3fff 	cmp.w	r2, #4294967295
 800dbd0:	d01b      	beq.n	800dc0a <__gethex+0x396>
 800dbd2:	3201      	adds	r2, #1
 800dbd4:	6002      	str	r2, [r0, #0]
 800dbd6:	2d02      	cmp	r5, #2
 800dbd8:	f104 0314 	add.w	r3, r4, #20
 800dbdc:	d13c      	bne.n	800dc58 <__gethex+0x3e4>
 800dbde:	f8d8 2000 	ldr.w	r2, [r8]
 800dbe2:	3a01      	subs	r2, #1
 800dbe4:	42b2      	cmp	r2, r6
 800dbe6:	d109      	bne.n	800dbfc <__gethex+0x388>
 800dbe8:	1171      	asrs	r1, r6, #5
 800dbea:	2201      	movs	r2, #1
 800dbec:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800dbf0:	f006 061f 	and.w	r6, r6, #31
 800dbf4:	fa02 f606 	lsl.w	r6, r2, r6
 800dbf8:	421e      	tst	r6, r3
 800dbfa:	d13a      	bne.n	800dc72 <__gethex+0x3fe>
 800dbfc:	f045 0520 	orr.w	r5, r5, #32
 800dc00:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800dc02:	601c      	str	r4, [r3, #0]
 800dc04:	9b02      	ldr	r3, [sp, #8]
 800dc06:	601f      	str	r7, [r3, #0]
 800dc08:	e6b0      	b.n	800d96c <__gethex+0xf8>
 800dc0a:	4299      	cmp	r1, r3
 800dc0c:	f843 cc04 	str.w	ip, [r3, #-4]
 800dc10:	d8d9      	bhi.n	800dbc6 <__gethex+0x352>
 800dc12:	68a3      	ldr	r3, [r4, #8]
 800dc14:	459b      	cmp	fp, r3
 800dc16:	db17      	blt.n	800dc48 <__gethex+0x3d4>
 800dc18:	6861      	ldr	r1, [r4, #4]
 800dc1a:	9801      	ldr	r0, [sp, #4]
 800dc1c:	3101      	adds	r1, #1
 800dc1e:	f000 f951 	bl	800dec4 <_Balloc>
 800dc22:	4681      	mov	r9, r0
 800dc24:	b918      	cbnz	r0, 800dc2e <__gethex+0x3ba>
 800dc26:	4b1a      	ldr	r3, [pc, #104]	@ (800dc90 <__gethex+0x41c>)
 800dc28:	4602      	mov	r2, r0
 800dc2a:	2184      	movs	r1, #132	@ 0x84
 800dc2c:	e6c5      	b.n	800d9ba <__gethex+0x146>
 800dc2e:	6922      	ldr	r2, [r4, #16]
 800dc30:	3202      	adds	r2, #2
 800dc32:	f104 010c 	add.w	r1, r4, #12
 800dc36:	0092      	lsls	r2, r2, #2
 800dc38:	300c      	adds	r0, #12
 800dc3a:	f7fe fef5 	bl	800ca28 <memcpy>
 800dc3e:	4621      	mov	r1, r4
 800dc40:	9801      	ldr	r0, [sp, #4]
 800dc42:	f000 f97f 	bl	800df44 <_Bfree>
 800dc46:	464c      	mov	r4, r9
 800dc48:	6923      	ldr	r3, [r4, #16]
 800dc4a:	1c5a      	adds	r2, r3, #1
 800dc4c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800dc50:	6122      	str	r2, [r4, #16]
 800dc52:	2201      	movs	r2, #1
 800dc54:	615a      	str	r2, [r3, #20]
 800dc56:	e7be      	b.n	800dbd6 <__gethex+0x362>
 800dc58:	6922      	ldr	r2, [r4, #16]
 800dc5a:	455a      	cmp	r2, fp
 800dc5c:	dd0b      	ble.n	800dc76 <__gethex+0x402>
 800dc5e:	2101      	movs	r1, #1
 800dc60:	4620      	mov	r0, r4
 800dc62:	f7ff fd9f 	bl	800d7a4 <rshift>
 800dc66:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800dc6a:	3701      	adds	r7, #1
 800dc6c:	42bb      	cmp	r3, r7
 800dc6e:	f6ff aee0 	blt.w	800da32 <__gethex+0x1be>
 800dc72:	2501      	movs	r5, #1
 800dc74:	e7c2      	b.n	800dbfc <__gethex+0x388>
 800dc76:	f016 061f 	ands.w	r6, r6, #31
 800dc7a:	d0fa      	beq.n	800dc72 <__gethex+0x3fe>
 800dc7c:	4453      	add	r3, sl
 800dc7e:	f1c6 0620 	rsb	r6, r6, #32
 800dc82:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800dc86:	f000 fa0f 	bl	800e0a8 <__hi0bits>
 800dc8a:	42b0      	cmp	r0, r6
 800dc8c:	dbe7      	blt.n	800dc5e <__gethex+0x3ea>
 800dc8e:	e7f0      	b.n	800dc72 <__gethex+0x3fe>
 800dc90:	080120a8 	.word	0x080120a8

0800dc94 <L_shift>:
 800dc94:	f1c2 0208 	rsb	r2, r2, #8
 800dc98:	0092      	lsls	r2, r2, #2
 800dc9a:	b570      	push	{r4, r5, r6, lr}
 800dc9c:	f1c2 0620 	rsb	r6, r2, #32
 800dca0:	6843      	ldr	r3, [r0, #4]
 800dca2:	6804      	ldr	r4, [r0, #0]
 800dca4:	fa03 f506 	lsl.w	r5, r3, r6
 800dca8:	432c      	orrs	r4, r5
 800dcaa:	40d3      	lsrs	r3, r2
 800dcac:	6004      	str	r4, [r0, #0]
 800dcae:	f840 3f04 	str.w	r3, [r0, #4]!
 800dcb2:	4288      	cmp	r0, r1
 800dcb4:	d3f4      	bcc.n	800dca0 <L_shift+0xc>
 800dcb6:	bd70      	pop	{r4, r5, r6, pc}

0800dcb8 <__match>:
 800dcb8:	b530      	push	{r4, r5, lr}
 800dcba:	6803      	ldr	r3, [r0, #0]
 800dcbc:	3301      	adds	r3, #1
 800dcbe:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dcc2:	b914      	cbnz	r4, 800dcca <__match+0x12>
 800dcc4:	6003      	str	r3, [r0, #0]
 800dcc6:	2001      	movs	r0, #1
 800dcc8:	bd30      	pop	{r4, r5, pc}
 800dcca:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dcce:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800dcd2:	2d19      	cmp	r5, #25
 800dcd4:	bf98      	it	ls
 800dcd6:	3220      	addls	r2, #32
 800dcd8:	42a2      	cmp	r2, r4
 800dcda:	d0f0      	beq.n	800dcbe <__match+0x6>
 800dcdc:	2000      	movs	r0, #0
 800dcde:	e7f3      	b.n	800dcc8 <__match+0x10>

0800dce0 <__hexnan>:
 800dce0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dce4:	680b      	ldr	r3, [r1, #0]
 800dce6:	6801      	ldr	r1, [r0, #0]
 800dce8:	115e      	asrs	r6, r3, #5
 800dcea:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800dcee:	f013 031f 	ands.w	r3, r3, #31
 800dcf2:	b087      	sub	sp, #28
 800dcf4:	bf18      	it	ne
 800dcf6:	3604      	addne	r6, #4
 800dcf8:	2500      	movs	r5, #0
 800dcfa:	1f37      	subs	r7, r6, #4
 800dcfc:	4682      	mov	sl, r0
 800dcfe:	4690      	mov	r8, r2
 800dd00:	9301      	str	r3, [sp, #4]
 800dd02:	f846 5c04 	str.w	r5, [r6, #-4]
 800dd06:	46b9      	mov	r9, r7
 800dd08:	463c      	mov	r4, r7
 800dd0a:	9502      	str	r5, [sp, #8]
 800dd0c:	46ab      	mov	fp, r5
 800dd0e:	784a      	ldrb	r2, [r1, #1]
 800dd10:	1c4b      	adds	r3, r1, #1
 800dd12:	9303      	str	r3, [sp, #12]
 800dd14:	b342      	cbz	r2, 800dd68 <__hexnan+0x88>
 800dd16:	4610      	mov	r0, r2
 800dd18:	9105      	str	r1, [sp, #20]
 800dd1a:	9204      	str	r2, [sp, #16]
 800dd1c:	f7ff fd94 	bl	800d848 <__hexdig_fun>
 800dd20:	2800      	cmp	r0, #0
 800dd22:	d151      	bne.n	800ddc8 <__hexnan+0xe8>
 800dd24:	9a04      	ldr	r2, [sp, #16]
 800dd26:	9905      	ldr	r1, [sp, #20]
 800dd28:	2a20      	cmp	r2, #32
 800dd2a:	d818      	bhi.n	800dd5e <__hexnan+0x7e>
 800dd2c:	9b02      	ldr	r3, [sp, #8]
 800dd2e:	459b      	cmp	fp, r3
 800dd30:	dd13      	ble.n	800dd5a <__hexnan+0x7a>
 800dd32:	454c      	cmp	r4, r9
 800dd34:	d206      	bcs.n	800dd44 <__hexnan+0x64>
 800dd36:	2d07      	cmp	r5, #7
 800dd38:	dc04      	bgt.n	800dd44 <__hexnan+0x64>
 800dd3a:	462a      	mov	r2, r5
 800dd3c:	4649      	mov	r1, r9
 800dd3e:	4620      	mov	r0, r4
 800dd40:	f7ff ffa8 	bl	800dc94 <L_shift>
 800dd44:	4544      	cmp	r4, r8
 800dd46:	d952      	bls.n	800ddee <__hexnan+0x10e>
 800dd48:	2300      	movs	r3, #0
 800dd4a:	f1a4 0904 	sub.w	r9, r4, #4
 800dd4e:	f844 3c04 	str.w	r3, [r4, #-4]
 800dd52:	f8cd b008 	str.w	fp, [sp, #8]
 800dd56:	464c      	mov	r4, r9
 800dd58:	461d      	mov	r5, r3
 800dd5a:	9903      	ldr	r1, [sp, #12]
 800dd5c:	e7d7      	b.n	800dd0e <__hexnan+0x2e>
 800dd5e:	2a29      	cmp	r2, #41	@ 0x29
 800dd60:	d157      	bne.n	800de12 <__hexnan+0x132>
 800dd62:	3102      	adds	r1, #2
 800dd64:	f8ca 1000 	str.w	r1, [sl]
 800dd68:	f1bb 0f00 	cmp.w	fp, #0
 800dd6c:	d051      	beq.n	800de12 <__hexnan+0x132>
 800dd6e:	454c      	cmp	r4, r9
 800dd70:	d206      	bcs.n	800dd80 <__hexnan+0xa0>
 800dd72:	2d07      	cmp	r5, #7
 800dd74:	dc04      	bgt.n	800dd80 <__hexnan+0xa0>
 800dd76:	462a      	mov	r2, r5
 800dd78:	4649      	mov	r1, r9
 800dd7a:	4620      	mov	r0, r4
 800dd7c:	f7ff ff8a 	bl	800dc94 <L_shift>
 800dd80:	4544      	cmp	r4, r8
 800dd82:	d936      	bls.n	800ddf2 <__hexnan+0x112>
 800dd84:	f1a8 0204 	sub.w	r2, r8, #4
 800dd88:	4623      	mov	r3, r4
 800dd8a:	f853 1b04 	ldr.w	r1, [r3], #4
 800dd8e:	f842 1f04 	str.w	r1, [r2, #4]!
 800dd92:	429f      	cmp	r7, r3
 800dd94:	d2f9      	bcs.n	800dd8a <__hexnan+0xaa>
 800dd96:	1b3b      	subs	r3, r7, r4
 800dd98:	f023 0303 	bic.w	r3, r3, #3
 800dd9c:	3304      	adds	r3, #4
 800dd9e:	3401      	adds	r4, #1
 800dda0:	3e03      	subs	r6, #3
 800dda2:	42b4      	cmp	r4, r6
 800dda4:	bf88      	it	hi
 800dda6:	2304      	movhi	r3, #4
 800dda8:	4443      	add	r3, r8
 800ddaa:	2200      	movs	r2, #0
 800ddac:	f843 2b04 	str.w	r2, [r3], #4
 800ddb0:	429f      	cmp	r7, r3
 800ddb2:	d2fb      	bcs.n	800ddac <__hexnan+0xcc>
 800ddb4:	683b      	ldr	r3, [r7, #0]
 800ddb6:	b91b      	cbnz	r3, 800ddc0 <__hexnan+0xe0>
 800ddb8:	4547      	cmp	r7, r8
 800ddba:	d128      	bne.n	800de0e <__hexnan+0x12e>
 800ddbc:	2301      	movs	r3, #1
 800ddbe:	603b      	str	r3, [r7, #0]
 800ddc0:	2005      	movs	r0, #5
 800ddc2:	b007      	add	sp, #28
 800ddc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ddc8:	3501      	adds	r5, #1
 800ddca:	2d08      	cmp	r5, #8
 800ddcc:	f10b 0b01 	add.w	fp, fp, #1
 800ddd0:	dd06      	ble.n	800dde0 <__hexnan+0x100>
 800ddd2:	4544      	cmp	r4, r8
 800ddd4:	d9c1      	bls.n	800dd5a <__hexnan+0x7a>
 800ddd6:	2300      	movs	r3, #0
 800ddd8:	f844 3c04 	str.w	r3, [r4, #-4]
 800dddc:	2501      	movs	r5, #1
 800ddde:	3c04      	subs	r4, #4
 800dde0:	6822      	ldr	r2, [r4, #0]
 800dde2:	f000 000f 	and.w	r0, r0, #15
 800dde6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800ddea:	6020      	str	r0, [r4, #0]
 800ddec:	e7b5      	b.n	800dd5a <__hexnan+0x7a>
 800ddee:	2508      	movs	r5, #8
 800ddf0:	e7b3      	b.n	800dd5a <__hexnan+0x7a>
 800ddf2:	9b01      	ldr	r3, [sp, #4]
 800ddf4:	2b00      	cmp	r3, #0
 800ddf6:	d0dd      	beq.n	800ddb4 <__hexnan+0xd4>
 800ddf8:	f1c3 0320 	rsb	r3, r3, #32
 800ddfc:	f04f 32ff 	mov.w	r2, #4294967295
 800de00:	40da      	lsrs	r2, r3
 800de02:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800de06:	4013      	ands	r3, r2
 800de08:	f846 3c04 	str.w	r3, [r6, #-4]
 800de0c:	e7d2      	b.n	800ddb4 <__hexnan+0xd4>
 800de0e:	3f04      	subs	r7, #4
 800de10:	e7d0      	b.n	800ddb4 <__hexnan+0xd4>
 800de12:	2004      	movs	r0, #4
 800de14:	e7d5      	b.n	800ddc2 <__hexnan+0xe2>
	...

0800de18 <_findenv_r>:
 800de18:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de1c:	f8df a06c 	ldr.w	sl, [pc, #108]	@ 800de8c <_findenv_r+0x74>
 800de20:	4606      	mov	r6, r0
 800de22:	4689      	mov	r9, r1
 800de24:	4617      	mov	r7, r2
 800de26:	f001 fd61 	bl	800f8ec <__env_lock>
 800de2a:	f8da 4000 	ldr.w	r4, [sl]
 800de2e:	b134      	cbz	r4, 800de3e <_findenv_r+0x26>
 800de30:	464b      	mov	r3, r9
 800de32:	4698      	mov	r8, r3
 800de34:	f813 2b01 	ldrb.w	r2, [r3], #1
 800de38:	b13a      	cbz	r2, 800de4a <_findenv_r+0x32>
 800de3a:	2a3d      	cmp	r2, #61	@ 0x3d
 800de3c:	d1f9      	bne.n	800de32 <_findenv_r+0x1a>
 800de3e:	4630      	mov	r0, r6
 800de40:	f001 fd5a 	bl	800f8f8 <__env_unlock>
 800de44:	2000      	movs	r0, #0
 800de46:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800de4a:	eba8 0809 	sub.w	r8, r8, r9
 800de4e:	46a3      	mov	fp, r4
 800de50:	f854 0b04 	ldr.w	r0, [r4], #4
 800de54:	2800      	cmp	r0, #0
 800de56:	d0f2      	beq.n	800de3e <_findenv_r+0x26>
 800de58:	4642      	mov	r2, r8
 800de5a:	4649      	mov	r1, r9
 800de5c:	f7fd ff4f 	bl	800bcfe <strncmp>
 800de60:	2800      	cmp	r0, #0
 800de62:	d1f4      	bne.n	800de4e <_findenv_r+0x36>
 800de64:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800de68:	eb03 0508 	add.w	r5, r3, r8
 800de6c:	f813 3008 	ldrb.w	r3, [r3, r8]
 800de70:	2b3d      	cmp	r3, #61	@ 0x3d
 800de72:	d1ec      	bne.n	800de4e <_findenv_r+0x36>
 800de74:	f8da 3000 	ldr.w	r3, [sl]
 800de78:	ebab 0303 	sub.w	r3, fp, r3
 800de7c:	109b      	asrs	r3, r3, #2
 800de7e:	4630      	mov	r0, r6
 800de80:	603b      	str	r3, [r7, #0]
 800de82:	f001 fd39 	bl	800f8f8 <__env_unlock>
 800de86:	1c68      	adds	r0, r5, #1
 800de88:	e7dd      	b.n	800de46 <_findenv_r+0x2e>
 800de8a:	bf00      	nop
 800de8c:	20000010 	.word	0x20000010

0800de90 <_getenv_r>:
 800de90:	b507      	push	{r0, r1, r2, lr}
 800de92:	aa01      	add	r2, sp, #4
 800de94:	f7ff ffc0 	bl	800de18 <_findenv_r>
 800de98:	b003      	add	sp, #12
 800de9a:	f85d fb04 	ldr.w	pc, [sp], #4

0800de9e <__ascii_mbtowc>:
 800de9e:	b082      	sub	sp, #8
 800dea0:	b901      	cbnz	r1, 800dea4 <__ascii_mbtowc+0x6>
 800dea2:	a901      	add	r1, sp, #4
 800dea4:	b142      	cbz	r2, 800deb8 <__ascii_mbtowc+0x1a>
 800dea6:	b14b      	cbz	r3, 800debc <__ascii_mbtowc+0x1e>
 800dea8:	7813      	ldrb	r3, [r2, #0]
 800deaa:	600b      	str	r3, [r1, #0]
 800deac:	7812      	ldrb	r2, [r2, #0]
 800deae:	1e10      	subs	r0, r2, #0
 800deb0:	bf18      	it	ne
 800deb2:	2001      	movne	r0, #1
 800deb4:	b002      	add	sp, #8
 800deb6:	4770      	bx	lr
 800deb8:	4610      	mov	r0, r2
 800deba:	e7fb      	b.n	800deb4 <__ascii_mbtowc+0x16>
 800debc:	f06f 0001 	mvn.w	r0, #1
 800dec0:	e7f8      	b.n	800deb4 <__ascii_mbtowc+0x16>
	...

0800dec4 <_Balloc>:
 800dec4:	b570      	push	{r4, r5, r6, lr}
 800dec6:	69c6      	ldr	r6, [r0, #28]
 800dec8:	4604      	mov	r4, r0
 800deca:	460d      	mov	r5, r1
 800decc:	b976      	cbnz	r6, 800deec <_Balloc+0x28>
 800dece:	2010      	movs	r0, #16
 800ded0:	f7fb fea8 	bl	8009c24 <malloc>
 800ded4:	4602      	mov	r2, r0
 800ded6:	61e0      	str	r0, [r4, #28]
 800ded8:	b920      	cbnz	r0, 800dee4 <_Balloc+0x20>
 800deda:	4b18      	ldr	r3, [pc, #96]	@ (800df3c <_Balloc+0x78>)
 800dedc:	4818      	ldr	r0, [pc, #96]	@ (800df40 <_Balloc+0x7c>)
 800dede:	216b      	movs	r1, #107	@ 0x6b
 800dee0:	f001 fcd2 	bl	800f888 <__assert_func>
 800dee4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800dee8:	6006      	str	r6, [r0, #0]
 800deea:	60c6      	str	r6, [r0, #12]
 800deec:	69e6      	ldr	r6, [r4, #28]
 800deee:	68f3      	ldr	r3, [r6, #12]
 800def0:	b183      	cbz	r3, 800df14 <_Balloc+0x50>
 800def2:	69e3      	ldr	r3, [r4, #28]
 800def4:	68db      	ldr	r3, [r3, #12]
 800def6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800defa:	b9b8      	cbnz	r0, 800df2c <_Balloc+0x68>
 800defc:	2101      	movs	r1, #1
 800defe:	fa01 f605 	lsl.w	r6, r1, r5
 800df02:	1d72      	adds	r2, r6, #5
 800df04:	0092      	lsls	r2, r2, #2
 800df06:	4620      	mov	r0, r4
 800df08:	f001 fcdc 	bl	800f8c4 <_calloc_r>
 800df0c:	b160      	cbz	r0, 800df28 <_Balloc+0x64>
 800df0e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800df12:	e00e      	b.n	800df32 <_Balloc+0x6e>
 800df14:	2221      	movs	r2, #33	@ 0x21
 800df16:	2104      	movs	r1, #4
 800df18:	4620      	mov	r0, r4
 800df1a:	f001 fcd3 	bl	800f8c4 <_calloc_r>
 800df1e:	69e3      	ldr	r3, [r4, #28]
 800df20:	60f0      	str	r0, [r6, #12]
 800df22:	68db      	ldr	r3, [r3, #12]
 800df24:	2b00      	cmp	r3, #0
 800df26:	d1e4      	bne.n	800def2 <_Balloc+0x2e>
 800df28:	2000      	movs	r0, #0
 800df2a:	bd70      	pop	{r4, r5, r6, pc}
 800df2c:	6802      	ldr	r2, [r0, #0]
 800df2e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800df32:	2300      	movs	r3, #0
 800df34:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800df38:	e7f7      	b.n	800df2a <_Balloc+0x66>
 800df3a:	bf00      	nop
 800df3c:	08012039 	.word	0x08012039
 800df40:	08012119 	.word	0x08012119

0800df44 <_Bfree>:
 800df44:	b570      	push	{r4, r5, r6, lr}
 800df46:	69c6      	ldr	r6, [r0, #28]
 800df48:	4605      	mov	r5, r0
 800df4a:	460c      	mov	r4, r1
 800df4c:	b976      	cbnz	r6, 800df6c <_Bfree+0x28>
 800df4e:	2010      	movs	r0, #16
 800df50:	f7fb fe68 	bl	8009c24 <malloc>
 800df54:	4602      	mov	r2, r0
 800df56:	61e8      	str	r0, [r5, #28]
 800df58:	b920      	cbnz	r0, 800df64 <_Bfree+0x20>
 800df5a:	4b09      	ldr	r3, [pc, #36]	@ (800df80 <_Bfree+0x3c>)
 800df5c:	4809      	ldr	r0, [pc, #36]	@ (800df84 <_Bfree+0x40>)
 800df5e:	218f      	movs	r1, #143	@ 0x8f
 800df60:	f001 fc92 	bl	800f888 <__assert_func>
 800df64:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800df68:	6006      	str	r6, [r0, #0]
 800df6a:	60c6      	str	r6, [r0, #12]
 800df6c:	b13c      	cbz	r4, 800df7e <_Bfree+0x3a>
 800df6e:	69eb      	ldr	r3, [r5, #28]
 800df70:	6862      	ldr	r2, [r4, #4]
 800df72:	68db      	ldr	r3, [r3, #12]
 800df74:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800df78:	6021      	str	r1, [r4, #0]
 800df7a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800df7e:	bd70      	pop	{r4, r5, r6, pc}
 800df80:	08012039 	.word	0x08012039
 800df84:	08012119 	.word	0x08012119

0800df88 <__multadd>:
 800df88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800df8c:	690d      	ldr	r5, [r1, #16]
 800df8e:	4607      	mov	r7, r0
 800df90:	460c      	mov	r4, r1
 800df92:	461e      	mov	r6, r3
 800df94:	f101 0c14 	add.w	ip, r1, #20
 800df98:	2000      	movs	r0, #0
 800df9a:	f8dc 3000 	ldr.w	r3, [ip]
 800df9e:	b299      	uxth	r1, r3
 800dfa0:	fb02 6101 	mla	r1, r2, r1, r6
 800dfa4:	0c1e      	lsrs	r6, r3, #16
 800dfa6:	0c0b      	lsrs	r3, r1, #16
 800dfa8:	fb02 3306 	mla	r3, r2, r6, r3
 800dfac:	b289      	uxth	r1, r1
 800dfae:	3001      	adds	r0, #1
 800dfb0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800dfb4:	4285      	cmp	r5, r0
 800dfb6:	f84c 1b04 	str.w	r1, [ip], #4
 800dfba:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800dfbe:	dcec      	bgt.n	800df9a <__multadd+0x12>
 800dfc0:	b30e      	cbz	r6, 800e006 <__multadd+0x7e>
 800dfc2:	68a3      	ldr	r3, [r4, #8]
 800dfc4:	42ab      	cmp	r3, r5
 800dfc6:	dc19      	bgt.n	800dffc <__multadd+0x74>
 800dfc8:	6861      	ldr	r1, [r4, #4]
 800dfca:	4638      	mov	r0, r7
 800dfcc:	3101      	adds	r1, #1
 800dfce:	f7ff ff79 	bl	800dec4 <_Balloc>
 800dfd2:	4680      	mov	r8, r0
 800dfd4:	b928      	cbnz	r0, 800dfe2 <__multadd+0x5a>
 800dfd6:	4602      	mov	r2, r0
 800dfd8:	4b0c      	ldr	r3, [pc, #48]	@ (800e00c <__multadd+0x84>)
 800dfda:	480d      	ldr	r0, [pc, #52]	@ (800e010 <__multadd+0x88>)
 800dfdc:	21ba      	movs	r1, #186	@ 0xba
 800dfde:	f001 fc53 	bl	800f888 <__assert_func>
 800dfe2:	6922      	ldr	r2, [r4, #16]
 800dfe4:	3202      	adds	r2, #2
 800dfe6:	f104 010c 	add.w	r1, r4, #12
 800dfea:	0092      	lsls	r2, r2, #2
 800dfec:	300c      	adds	r0, #12
 800dfee:	f7fe fd1b 	bl	800ca28 <memcpy>
 800dff2:	4621      	mov	r1, r4
 800dff4:	4638      	mov	r0, r7
 800dff6:	f7ff ffa5 	bl	800df44 <_Bfree>
 800dffa:	4644      	mov	r4, r8
 800dffc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e000:	3501      	adds	r5, #1
 800e002:	615e      	str	r6, [r3, #20]
 800e004:	6125      	str	r5, [r4, #16]
 800e006:	4620      	mov	r0, r4
 800e008:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e00c:	080120a8 	.word	0x080120a8
 800e010:	08012119 	.word	0x08012119

0800e014 <__s2b>:
 800e014:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e018:	460c      	mov	r4, r1
 800e01a:	4615      	mov	r5, r2
 800e01c:	461f      	mov	r7, r3
 800e01e:	2209      	movs	r2, #9
 800e020:	3308      	adds	r3, #8
 800e022:	4606      	mov	r6, r0
 800e024:	fb93 f3f2 	sdiv	r3, r3, r2
 800e028:	2100      	movs	r1, #0
 800e02a:	2201      	movs	r2, #1
 800e02c:	429a      	cmp	r2, r3
 800e02e:	db09      	blt.n	800e044 <__s2b+0x30>
 800e030:	4630      	mov	r0, r6
 800e032:	f7ff ff47 	bl	800dec4 <_Balloc>
 800e036:	b940      	cbnz	r0, 800e04a <__s2b+0x36>
 800e038:	4602      	mov	r2, r0
 800e03a:	4b19      	ldr	r3, [pc, #100]	@ (800e0a0 <__s2b+0x8c>)
 800e03c:	4819      	ldr	r0, [pc, #100]	@ (800e0a4 <__s2b+0x90>)
 800e03e:	21d3      	movs	r1, #211	@ 0xd3
 800e040:	f001 fc22 	bl	800f888 <__assert_func>
 800e044:	0052      	lsls	r2, r2, #1
 800e046:	3101      	adds	r1, #1
 800e048:	e7f0      	b.n	800e02c <__s2b+0x18>
 800e04a:	9b08      	ldr	r3, [sp, #32]
 800e04c:	6143      	str	r3, [r0, #20]
 800e04e:	2d09      	cmp	r5, #9
 800e050:	f04f 0301 	mov.w	r3, #1
 800e054:	6103      	str	r3, [r0, #16]
 800e056:	dd16      	ble.n	800e086 <__s2b+0x72>
 800e058:	f104 0909 	add.w	r9, r4, #9
 800e05c:	46c8      	mov	r8, r9
 800e05e:	442c      	add	r4, r5
 800e060:	f818 3b01 	ldrb.w	r3, [r8], #1
 800e064:	4601      	mov	r1, r0
 800e066:	3b30      	subs	r3, #48	@ 0x30
 800e068:	220a      	movs	r2, #10
 800e06a:	4630      	mov	r0, r6
 800e06c:	f7ff ff8c 	bl	800df88 <__multadd>
 800e070:	45a0      	cmp	r8, r4
 800e072:	d1f5      	bne.n	800e060 <__s2b+0x4c>
 800e074:	f1a5 0408 	sub.w	r4, r5, #8
 800e078:	444c      	add	r4, r9
 800e07a:	1b2d      	subs	r5, r5, r4
 800e07c:	1963      	adds	r3, r4, r5
 800e07e:	42bb      	cmp	r3, r7
 800e080:	db04      	blt.n	800e08c <__s2b+0x78>
 800e082:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e086:	340a      	adds	r4, #10
 800e088:	2509      	movs	r5, #9
 800e08a:	e7f6      	b.n	800e07a <__s2b+0x66>
 800e08c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800e090:	4601      	mov	r1, r0
 800e092:	3b30      	subs	r3, #48	@ 0x30
 800e094:	220a      	movs	r2, #10
 800e096:	4630      	mov	r0, r6
 800e098:	f7ff ff76 	bl	800df88 <__multadd>
 800e09c:	e7ee      	b.n	800e07c <__s2b+0x68>
 800e09e:	bf00      	nop
 800e0a0:	080120a8 	.word	0x080120a8
 800e0a4:	08012119 	.word	0x08012119

0800e0a8 <__hi0bits>:
 800e0a8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800e0ac:	4603      	mov	r3, r0
 800e0ae:	bf36      	itet	cc
 800e0b0:	0403      	lslcc	r3, r0, #16
 800e0b2:	2000      	movcs	r0, #0
 800e0b4:	2010      	movcc	r0, #16
 800e0b6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800e0ba:	bf3c      	itt	cc
 800e0bc:	021b      	lslcc	r3, r3, #8
 800e0be:	3008      	addcc	r0, #8
 800e0c0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800e0c4:	bf3c      	itt	cc
 800e0c6:	011b      	lslcc	r3, r3, #4
 800e0c8:	3004      	addcc	r0, #4
 800e0ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e0ce:	bf3c      	itt	cc
 800e0d0:	009b      	lslcc	r3, r3, #2
 800e0d2:	3002      	addcc	r0, #2
 800e0d4:	2b00      	cmp	r3, #0
 800e0d6:	db05      	blt.n	800e0e4 <__hi0bits+0x3c>
 800e0d8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800e0dc:	f100 0001 	add.w	r0, r0, #1
 800e0e0:	bf08      	it	eq
 800e0e2:	2020      	moveq	r0, #32
 800e0e4:	4770      	bx	lr

0800e0e6 <__lo0bits>:
 800e0e6:	6803      	ldr	r3, [r0, #0]
 800e0e8:	4602      	mov	r2, r0
 800e0ea:	f013 0007 	ands.w	r0, r3, #7
 800e0ee:	d00b      	beq.n	800e108 <__lo0bits+0x22>
 800e0f0:	07d9      	lsls	r1, r3, #31
 800e0f2:	d421      	bmi.n	800e138 <__lo0bits+0x52>
 800e0f4:	0798      	lsls	r0, r3, #30
 800e0f6:	bf49      	itett	mi
 800e0f8:	085b      	lsrmi	r3, r3, #1
 800e0fa:	089b      	lsrpl	r3, r3, #2
 800e0fc:	2001      	movmi	r0, #1
 800e0fe:	6013      	strmi	r3, [r2, #0]
 800e100:	bf5c      	itt	pl
 800e102:	6013      	strpl	r3, [r2, #0]
 800e104:	2002      	movpl	r0, #2
 800e106:	4770      	bx	lr
 800e108:	b299      	uxth	r1, r3
 800e10a:	b909      	cbnz	r1, 800e110 <__lo0bits+0x2a>
 800e10c:	0c1b      	lsrs	r3, r3, #16
 800e10e:	2010      	movs	r0, #16
 800e110:	b2d9      	uxtb	r1, r3
 800e112:	b909      	cbnz	r1, 800e118 <__lo0bits+0x32>
 800e114:	3008      	adds	r0, #8
 800e116:	0a1b      	lsrs	r3, r3, #8
 800e118:	0719      	lsls	r1, r3, #28
 800e11a:	bf04      	itt	eq
 800e11c:	091b      	lsreq	r3, r3, #4
 800e11e:	3004      	addeq	r0, #4
 800e120:	0799      	lsls	r1, r3, #30
 800e122:	bf04      	itt	eq
 800e124:	089b      	lsreq	r3, r3, #2
 800e126:	3002      	addeq	r0, #2
 800e128:	07d9      	lsls	r1, r3, #31
 800e12a:	d403      	bmi.n	800e134 <__lo0bits+0x4e>
 800e12c:	085b      	lsrs	r3, r3, #1
 800e12e:	f100 0001 	add.w	r0, r0, #1
 800e132:	d003      	beq.n	800e13c <__lo0bits+0x56>
 800e134:	6013      	str	r3, [r2, #0]
 800e136:	4770      	bx	lr
 800e138:	2000      	movs	r0, #0
 800e13a:	4770      	bx	lr
 800e13c:	2020      	movs	r0, #32
 800e13e:	4770      	bx	lr

0800e140 <__i2b>:
 800e140:	b510      	push	{r4, lr}
 800e142:	460c      	mov	r4, r1
 800e144:	2101      	movs	r1, #1
 800e146:	f7ff febd 	bl	800dec4 <_Balloc>
 800e14a:	4602      	mov	r2, r0
 800e14c:	b928      	cbnz	r0, 800e15a <__i2b+0x1a>
 800e14e:	4b05      	ldr	r3, [pc, #20]	@ (800e164 <__i2b+0x24>)
 800e150:	4805      	ldr	r0, [pc, #20]	@ (800e168 <__i2b+0x28>)
 800e152:	f240 1145 	movw	r1, #325	@ 0x145
 800e156:	f001 fb97 	bl	800f888 <__assert_func>
 800e15a:	2301      	movs	r3, #1
 800e15c:	6144      	str	r4, [r0, #20]
 800e15e:	6103      	str	r3, [r0, #16]
 800e160:	bd10      	pop	{r4, pc}
 800e162:	bf00      	nop
 800e164:	080120a8 	.word	0x080120a8
 800e168:	08012119 	.word	0x08012119

0800e16c <__multiply>:
 800e16c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e170:	4614      	mov	r4, r2
 800e172:	690a      	ldr	r2, [r1, #16]
 800e174:	6923      	ldr	r3, [r4, #16]
 800e176:	429a      	cmp	r2, r3
 800e178:	bfa8      	it	ge
 800e17a:	4623      	movge	r3, r4
 800e17c:	460f      	mov	r7, r1
 800e17e:	bfa4      	itt	ge
 800e180:	460c      	movge	r4, r1
 800e182:	461f      	movge	r7, r3
 800e184:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800e188:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800e18c:	68a3      	ldr	r3, [r4, #8]
 800e18e:	6861      	ldr	r1, [r4, #4]
 800e190:	eb0a 0609 	add.w	r6, sl, r9
 800e194:	42b3      	cmp	r3, r6
 800e196:	b085      	sub	sp, #20
 800e198:	bfb8      	it	lt
 800e19a:	3101      	addlt	r1, #1
 800e19c:	f7ff fe92 	bl	800dec4 <_Balloc>
 800e1a0:	b930      	cbnz	r0, 800e1b0 <__multiply+0x44>
 800e1a2:	4602      	mov	r2, r0
 800e1a4:	4b44      	ldr	r3, [pc, #272]	@ (800e2b8 <__multiply+0x14c>)
 800e1a6:	4845      	ldr	r0, [pc, #276]	@ (800e2bc <__multiply+0x150>)
 800e1a8:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800e1ac:	f001 fb6c 	bl	800f888 <__assert_func>
 800e1b0:	f100 0514 	add.w	r5, r0, #20
 800e1b4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800e1b8:	462b      	mov	r3, r5
 800e1ba:	2200      	movs	r2, #0
 800e1bc:	4543      	cmp	r3, r8
 800e1be:	d321      	bcc.n	800e204 <__multiply+0x98>
 800e1c0:	f107 0114 	add.w	r1, r7, #20
 800e1c4:	f104 0214 	add.w	r2, r4, #20
 800e1c8:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800e1cc:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800e1d0:	9302      	str	r3, [sp, #8]
 800e1d2:	1b13      	subs	r3, r2, r4
 800e1d4:	3b15      	subs	r3, #21
 800e1d6:	f023 0303 	bic.w	r3, r3, #3
 800e1da:	3304      	adds	r3, #4
 800e1dc:	f104 0715 	add.w	r7, r4, #21
 800e1e0:	42ba      	cmp	r2, r7
 800e1e2:	bf38      	it	cc
 800e1e4:	2304      	movcc	r3, #4
 800e1e6:	9301      	str	r3, [sp, #4]
 800e1e8:	9b02      	ldr	r3, [sp, #8]
 800e1ea:	9103      	str	r1, [sp, #12]
 800e1ec:	428b      	cmp	r3, r1
 800e1ee:	d80c      	bhi.n	800e20a <__multiply+0x9e>
 800e1f0:	2e00      	cmp	r6, #0
 800e1f2:	dd03      	ble.n	800e1fc <__multiply+0x90>
 800e1f4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800e1f8:	2b00      	cmp	r3, #0
 800e1fa:	d05b      	beq.n	800e2b4 <__multiply+0x148>
 800e1fc:	6106      	str	r6, [r0, #16]
 800e1fe:	b005      	add	sp, #20
 800e200:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e204:	f843 2b04 	str.w	r2, [r3], #4
 800e208:	e7d8      	b.n	800e1bc <__multiply+0x50>
 800e20a:	f8b1 a000 	ldrh.w	sl, [r1]
 800e20e:	f1ba 0f00 	cmp.w	sl, #0
 800e212:	d024      	beq.n	800e25e <__multiply+0xf2>
 800e214:	f104 0e14 	add.w	lr, r4, #20
 800e218:	46a9      	mov	r9, r5
 800e21a:	f04f 0c00 	mov.w	ip, #0
 800e21e:	f85e 7b04 	ldr.w	r7, [lr], #4
 800e222:	f8d9 3000 	ldr.w	r3, [r9]
 800e226:	fa1f fb87 	uxth.w	fp, r7
 800e22a:	b29b      	uxth	r3, r3
 800e22c:	fb0a 330b 	mla	r3, sl, fp, r3
 800e230:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800e234:	f8d9 7000 	ldr.w	r7, [r9]
 800e238:	4463      	add	r3, ip
 800e23a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800e23e:	fb0a c70b 	mla	r7, sl, fp, ip
 800e242:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800e246:	b29b      	uxth	r3, r3
 800e248:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800e24c:	4572      	cmp	r2, lr
 800e24e:	f849 3b04 	str.w	r3, [r9], #4
 800e252:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800e256:	d8e2      	bhi.n	800e21e <__multiply+0xb2>
 800e258:	9b01      	ldr	r3, [sp, #4]
 800e25a:	f845 c003 	str.w	ip, [r5, r3]
 800e25e:	9b03      	ldr	r3, [sp, #12]
 800e260:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800e264:	3104      	adds	r1, #4
 800e266:	f1b9 0f00 	cmp.w	r9, #0
 800e26a:	d021      	beq.n	800e2b0 <__multiply+0x144>
 800e26c:	682b      	ldr	r3, [r5, #0]
 800e26e:	f104 0c14 	add.w	ip, r4, #20
 800e272:	46ae      	mov	lr, r5
 800e274:	f04f 0a00 	mov.w	sl, #0
 800e278:	f8bc b000 	ldrh.w	fp, [ip]
 800e27c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800e280:	fb09 770b 	mla	r7, r9, fp, r7
 800e284:	4457      	add	r7, sl
 800e286:	b29b      	uxth	r3, r3
 800e288:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800e28c:	f84e 3b04 	str.w	r3, [lr], #4
 800e290:	f85c 3b04 	ldr.w	r3, [ip], #4
 800e294:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e298:	f8be 3000 	ldrh.w	r3, [lr]
 800e29c:	fb09 330a 	mla	r3, r9, sl, r3
 800e2a0:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800e2a4:	4562      	cmp	r2, ip
 800e2a6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e2aa:	d8e5      	bhi.n	800e278 <__multiply+0x10c>
 800e2ac:	9f01      	ldr	r7, [sp, #4]
 800e2ae:	51eb      	str	r3, [r5, r7]
 800e2b0:	3504      	adds	r5, #4
 800e2b2:	e799      	b.n	800e1e8 <__multiply+0x7c>
 800e2b4:	3e01      	subs	r6, #1
 800e2b6:	e79b      	b.n	800e1f0 <__multiply+0x84>
 800e2b8:	080120a8 	.word	0x080120a8
 800e2bc:	08012119 	.word	0x08012119

0800e2c0 <__pow5mult>:
 800e2c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e2c4:	4615      	mov	r5, r2
 800e2c6:	f012 0203 	ands.w	r2, r2, #3
 800e2ca:	4607      	mov	r7, r0
 800e2cc:	460e      	mov	r6, r1
 800e2ce:	d007      	beq.n	800e2e0 <__pow5mult+0x20>
 800e2d0:	4c25      	ldr	r4, [pc, #148]	@ (800e368 <__pow5mult+0xa8>)
 800e2d2:	3a01      	subs	r2, #1
 800e2d4:	2300      	movs	r3, #0
 800e2d6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e2da:	f7ff fe55 	bl	800df88 <__multadd>
 800e2de:	4606      	mov	r6, r0
 800e2e0:	10ad      	asrs	r5, r5, #2
 800e2e2:	d03d      	beq.n	800e360 <__pow5mult+0xa0>
 800e2e4:	69fc      	ldr	r4, [r7, #28]
 800e2e6:	b97c      	cbnz	r4, 800e308 <__pow5mult+0x48>
 800e2e8:	2010      	movs	r0, #16
 800e2ea:	f7fb fc9b 	bl	8009c24 <malloc>
 800e2ee:	4602      	mov	r2, r0
 800e2f0:	61f8      	str	r0, [r7, #28]
 800e2f2:	b928      	cbnz	r0, 800e300 <__pow5mult+0x40>
 800e2f4:	4b1d      	ldr	r3, [pc, #116]	@ (800e36c <__pow5mult+0xac>)
 800e2f6:	481e      	ldr	r0, [pc, #120]	@ (800e370 <__pow5mult+0xb0>)
 800e2f8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800e2fc:	f001 fac4 	bl	800f888 <__assert_func>
 800e300:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e304:	6004      	str	r4, [r0, #0]
 800e306:	60c4      	str	r4, [r0, #12]
 800e308:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800e30c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e310:	b94c      	cbnz	r4, 800e326 <__pow5mult+0x66>
 800e312:	f240 2171 	movw	r1, #625	@ 0x271
 800e316:	4638      	mov	r0, r7
 800e318:	f7ff ff12 	bl	800e140 <__i2b>
 800e31c:	2300      	movs	r3, #0
 800e31e:	f8c8 0008 	str.w	r0, [r8, #8]
 800e322:	4604      	mov	r4, r0
 800e324:	6003      	str	r3, [r0, #0]
 800e326:	f04f 0900 	mov.w	r9, #0
 800e32a:	07eb      	lsls	r3, r5, #31
 800e32c:	d50a      	bpl.n	800e344 <__pow5mult+0x84>
 800e32e:	4631      	mov	r1, r6
 800e330:	4622      	mov	r2, r4
 800e332:	4638      	mov	r0, r7
 800e334:	f7ff ff1a 	bl	800e16c <__multiply>
 800e338:	4631      	mov	r1, r6
 800e33a:	4680      	mov	r8, r0
 800e33c:	4638      	mov	r0, r7
 800e33e:	f7ff fe01 	bl	800df44 <_Bfree>
 800e342:	4646      	mov	r6, r8
 800e344:	106d      	asrs	r5, r5, #1
 800e346:	d00b      	beq.n	800e360 <__pow5mult+0xa0>
 800e348:	6820      	ldr	r0, [r4, #0]
 800e34a:	b938      	cbnz	r0, 800e35c <__pow5mult+0x9c>
 800e34c:	4622      	mov	r2, r4
 800e34e:	4621      	mov	r1, r4
 800e350:	4638      	mov	r0, r7
 800e352:	f7ff ff0b 	bl	800e16c <__multiply>
 800e356:	6020      	str	r0, [r4, #0]
 800e358:	f8c0 9000 	str.w	r9, [r0]
 800e35c:	4604      	mov	r4, r0
 800e35e:	e7e4      	b.n	800e32a <__pow5mult+0x6a>
 800e360:	4630      	mov	r0, r6
 800e362:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e366:	bf00      	nop
 800e368:	08012174 	.word	0x08012174
 800e36c:	08012039 	.word	0x08012039
 800e370:	08012119 	.word	0x08012119

0800e374 <__lshift>:
 800e374:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e378:	460c      	mov	r4, r1
 800e37a:	6849      	ldr	r1, [r1, #4]
 800e37c:	6923      	ldr	r3, [r4, #16]
 800e37e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e382:	68a3      	ldr	r3, [r4, #8]
 800e384:	4607      	mov	r7, r0
 800e386:	4691      	mov	r9, r2
 800e388:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e38c:	f108 0601 	add.w	r6, r8, #1
 800e390:	42b3      	cmp	r3, r6
 800e392:	db0b      	blt.n	800e3ac <__lshift+0x38>
 800e394:	4638      	mov	r0, r7
 800e396:	f7ff fd95 	bl	800dec4 <_Balloc>
 800e39a:	4605      	mov	r5, r0
 800e39c:	b948      	cbnz	r0, 800e3b2 <__lshift+0x3e>
 800e39e:	4602      	mov	r2, r0
 800e3a0:	4b28      	ldr	r3, [pc, #160]	@ (800e444 <__lshift+0xd0>)
 800e3a2:	4829      	ldr	r0, [pc, #164]	@ (800e448 <__lshift+0xd4>)
 800e3a4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800e3a8:	f001 fa6e 	bl	800f888 <__assert_func>
 800e3ac:	3101      	adds	r1, #1
 800e3ae:	005b      	lsls	r3, r3, #1
 800e3b0:	e7ee      	b.n	800e390 <__lshift+0x1c>
 800e3b2:	2300      	movs	r3, #0
 800e3b4:	f100 0114 	add.w	r1, r0, #20
 800e3b8:	f100 0210 	add.w	r2, r0, #16
 800e3bc:	4618      	mov	r0, r3
 800e3be:	4553      	cmp	r3, sl
 800e3c0:	db33      	blt.n	800e42a <__lshift+0xb6>
 800e3c2:	6920      	ldr	r0, [r4, #16]
 800e3c4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e3c8:	f104 0314 	add.w	r3, r4, #20
 800e3cc:	f019 091f 	ands.w	r9, r9, #31
 800e3d0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e3d4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800e3d8:	d02b      	beq.n	800e432 <__lshift+0xbe>
 800e3da:	f1c9 0e20 	rsb	lr, r9, #32
 800e3de:	468a      	mov	sl, r1
 800e3e0:	2200      	movs	r2, #0
 800e3e2:	6818      	ldr	r0, [r3, #0]
 800e3e4:	fa00 f009 	lsl.w	r0, r0, r9
 800e3e8:	4310      	orrs	r0, r2
 800e3ea:	f84a 0b04 	str.w	r0, [sl], #4
 800e3ee:	f853 2b04 	ldr.w	r2, [r3], #4
 800e3f2:	459c      	cmp	ip, r3
 800e3f4:	fa22 f20e 	lsr.w	r2, r2, lr
 800e3f8:	d8f3      	bhi.n	800e3e2 <__lshift+0x6e>
 800e3fa:	ebac 0304 	sub.w	r3, ip, r4
 800e3fe:	3b15      	subs	r3, #21
 800e400:	f023 0303 	bic.w	r3, r3, #3
 800e404:	3304      	adds	r3, #4
 800e406:	f104 0015 	add.w	r0, r4, #21
 800e40a:	4584      	cmp	ip, r0
 800e40c:	bf38      	it	cc
 800e40e:	2304      	movcc	r3, #4
 800e410:	50ca      	str	r2, [r1, r3]
 800e412:	b10a      	cbz	r2, 800e418 <__lshift+0xa4>
 800e414:	f108 0602 	add.w	r6, r8, #2
 800e418:	3e01      	subs	r6, #1
 800e41a:	4638      	mov	r0, r7
 800e41c:	612e      	str	r6, [r5, #16]
 800e41e:	4621      	mov	r1, r4
 800e420:	f7ff fd90 	bl	800df44 <_Bfree>
 800e424:	4628      	mov	r0, r5
 800e426:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e42a:	f842 0f04 	str.w	r0, [r2, #4]!
 800e42e:	3301      	adds	r3, #1
 800e430:	e7c5      	b.n	800e3be <__lshift+0x4a>
 800e432:	3904      	subs	r1, #4
 800e434:	f853 2b04 	ldr.w	r2, [r3], #4
 800e438:	f841 2f04 	str.w	r2, [r1, #4]!
 800e43c:	459c      	cmp	ip, r3
 800e43e:	d8f9      	bhi.n	800e434 <__lshift+0xc0>
 800e440:	e7ea      	b.n	800e418 <__lshift+0xa4>
 800e442:	bf00      	nop
 800e444:	080120a8 	.word	0x080120a8
 800e448:	08012119 	.word	0x08012119

0800e44c <__mcmp>:
 800e44c:	690a      	ldr	r2, [r1, #16]
 800e44e:	4603      	mov	r3, r0
 800e450:	6900      	ldr	r0, [r0, #16]
 800e452:	1a80      	subs	r0, r0, r2
 800e454:	b530      	push	{r4, r5, lr}
 800e456:	d10e      	bne.n	800e476 <__mcmp+0x2a>
 800e458:	3314      	adds	r3, #20
 800e45a:	3114      	adds	r1, #20
 800e45c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800e460:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800e464:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800e468:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800e46c:	4295      	cmp	r5, r2
 800e46e:	d003      	beq.n	800e478 <__mcmp+0x2c>
 800e470:	d205      	bcs.n	800e47e <__mcmp+0x32>
 800e472:	f04f 30ff 	mov.w	r0, #4294967295
 800e476:	bd30      	pop	{r4, r5, pc}
 800e478:	42a3      	cmp	r3, r4
 800e47a:	d3f3      	bcc.n	800e464 <__mcmp+0x18>
 800e47c:	e7fb      	b.n	800e476 <__mcmp+0x2a>
 800e47e:	2001      	movs	r0, #1
 800e480:	e7f9      	b.n	800e476 <__mcmp+0x2a>
	...

0800e484 <__mdiff>:
 800e484:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e488:	4689      	mov	r9, r1
 800e48a:	4606      	mov	r6, r0
 800e48c:	4611      	mov	r1, r2
 800e48e:	4648      	mov	r0, r9
 800e490:	4614      	mov	r4, r2
 800e492:	f7ff ffdb 	bl	800e44c <__mcmp>
 800e496:	1e05      	subs	r5, r0, #0
 800e498:	d112      	bne.n	800e4c0 <__mdiff+0x3c>
 800e49a:	4629      	mov	r1, r5
 800e49c:	4630      	mov	r0, r6
 800e49e:	f7ff fd11 	bl	800dec4 <_Balloc>
 800e4a2:	4602      	mov	r2, r0
 800e4a4:	b928      	cbnz	r0, 800e4b2 <__mdiff+0x2e>
 800e4a6:	4b3f      	ldr	r3, [pc, #252]	@ (800e5a4 <__mdiff+0x120>)
 800e4a8:	f240 2137 	movw	r1, #567	@ 0x237
 800e4ac:	483e      	ldr	r0, [pc, #248]	@ (800e5a8 <__mdiff+0x124>)
 800e4ae:	f001 f9eb 	bl	800f888 <__assert_func>
 800e4b2:	2301      	movs	r3, #1
 800e4b4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800e4b8:	4610      	mov	r0, r2
 800e4ba:	b003      	add	sp, #12
 800e4bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e4c0:	bfbc      	itt	lt
 800e4c2:	464b      	movlt	r3, r9
 800e4c4:	46a1      	movlt	r9, r4
 800e4c6:	4630      	mov	r0, r6
 800e4c8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800e4cc:	bfba      	itte	lt
 800e4ce:	461c      	movlt	r4, r3
 800e4d0:	2501      	movlt	r5, #1
 800e4d2:	2500      	movge	r5, #0
 800e4d4:	f7ff fcf6 	bl	800dec4 <_Balloc>
 800e4d8:	4602      	mov	r2, r0
 800e4da:	b918      	cbnz	r0, 800e4e4 <__mdiff+0x60>
 800e4dc:	4b31      	ldr	r3, [pc, #196]	@ (800e5a4 <__mdiff+0x120>)
 800e4de:	f240 2145 	movw	r1, #581	@ 0x245
 800e4e2:	e7e3      	b.n	800e4ac <__mdiff+0x28>
 800e4e4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800e4e8:	6926      	ldr	r6, [r4, #16]
 800e4ea:	60c5      	str	r5, [r0, #12]
 800e4ec:	f109 0310 	add.w	r3, r9, #16
 800e4f0:	f109 0514 	add.w	r5, r9, #20
 800e4f4:	f104 0e14 	add.w	lr, r4, #20
 800e4f8:	f100 0b14 	add.w	fp, r0, #20
 800e4fc:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800e500:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800e504:	9301      	str	r3, [sp, #4]
 800e506:	46d9      	mov	r9, fp
 800e508:	f04f 0c00 	mov.w	ip, #0
 800e50c:	9b01      	ldr	r3, [sp, #4]
 800e50e:	f85e 0b04 	ldr.w	r0, [lr], #4
 800e512:	f853 af04 	ldr.w	sl, [r3, #4]!
 800e516:	9301      	str	r3, [sp, #4]
 800e518:	fa1f f38a 	uxth.w	r3, sl
 800e51c:	4619      	mov	r1, r3
 800e51e:	b283      	uxth	r3, r0
 800e520:	1acb      	subs	r3, r1, r3
 800e522:	0c00      	lsrs	r0, r0, #16
 800e524:	4463      	add	r3, ip
 800e526:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800e52a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800e52e:	b29b      	uxth	r3, r3
 800e530:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800e534:	4576      	cmp	r6, lr
 800e536:	f849 3b04 	str.w	r3, [r9], #4
 800e53a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800e53e:	d8e5      	bhi.n	800e50c <__mdiff+0x88>
 800e540:	1b33      	subs	r3, r6, r4
 800e542:	3b15      	subs	r3, #21
 800e544:	f023 0303 	bic.w	r3, r3, #3
 800e548:	3415      	adds	r4, #21
 800e54a:	3304      	adds	r3, #4
 800e54c:	42a6      	cmp	r6, r4
 800e54e:	bf38      	it	cc
 800e550:	2304      	movcc	r3, #4
 800e552:	441d      	add	r5, r3
 800e554:	445b      	add	r3, fp
 800e556:	461e      	mov	r6, r3
 800e558:	462c      	mov	r4, r5
 800e55a:	4544      	cmp	r4, r8
 800e55c:	d30e      	bcc.n	800e57c <__mdiff+0xf8>
 800e55e:	f108 0103 	add.w	r1, r8, #3
 800e562:	1b49      	subs	r1, r1, r5
 800e564:	f021 0103 	bic.w	r1, r1, #3
 800e568:	3d03      	subs	r5, #3
 800e56a:	45a8      	cmp	r8, r5
 800e56c:	bf38      	it	cc
 800e56e:	2100      	movcc	r1, #0
 800e570:	440b      	add	r3, r1
 800e572:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e576:	b191      	cbz	r1, 800e59e <__mdiff+0x11a>
 800e578:	6117      	str	r7, [r2, #16]
 800e57a:	e79d      	b.n	800e4b8 <__mdiff+0x34>
 800e57c:	f854 1b04 	ldr.w	r1, [r4], #4
 800e580:	46e6      	mov	lr, ip
 800e582:	0c08      	lsrs	r0, r1, #16
 800e584:	fa1c fc81 	uxtah	ip, ip, r1
 800e588:	4471      	add	r1, lr
 800e58a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800e58e:	b289      	uxth	r1, r1
 800e590:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800e594:	f846 1b04 	str.w	r1, [r6], #4
 800e598:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800e59c:	e7dd      	b.n	800e55a <__mdiff+0xd6>
 800e59e:	3f01      	subs	r7, #1
 800e5a0:	e7e7      	b.n	800e572 <__mdiff+0xee>
 800e5a2:	bf00      	nop
 800e5a4:	080120a8 	.word	0x080120a8
 800e5a8:	08012119 	.word	0x08012119

0800e5ac <__ulp>:
 800e5ac:	b082      	sub	sp, #8
 800e5ae:	ed8d 0b00 	vstr	d0, [sp]
 800e5b2:	9a01      	ldr	r2, [sp, #4]
 800e5b4:	4b0f      	ldr	r3, [pc, #60]	@ (800e5f4 <__ulp+0x48>)
 800e5b6:	4013      	ands	r3, r2
 800e5b8:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800e5bc:	2b00      	cmp	r3, #0
 800e5be:	dc08      	bgt.n	800e5d2 <__ulp+0x26>
 800e5c0:	425b      	negs	r3, r3
 800e5c2:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800e5c6:	ea4f 5223 	mov.w	r2, r3, asr #20
 800e5ca:	da04      	bge.n	800e5d6 <__ulp+0x2a>
 800e5cc:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800e5d0:	4113      	asrs	r3, r2
 800e5d2:	2200      	movs	r2, #0
 800e5d4:	e008      	b.n	800e5e8 <__ulp+0x3c>
 800e5d6:	f1a2 0314 	sub.w	r3, r2, #20
 800e5da:	2b1e      	cmp	r3, #30
 800e5dc:	bfda      	itte	le
 800e5de:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800e5e2:	40da      	lsrle	r2, r3
 800e5e4:	2201      	movgt	r2, #1
 800e5e6:	2300      	movs	r3, #0
 800e5e8:	4619      	mov	r1, r3
 800e5ea:	4610      	mov	r0, r2
 800e5ec:	ec41 0b10 	vmov	d0, r0, r1
 800e5f0:	b002      	add	sp, #8
 800e5f2:	4770      	bx	lr
 800e5f4:	7ff00000 	.word	0x7ff00000

0800e5f8 <__b2d>:
 800e5f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e5fc:	6906      	ldr	r6, [r0, #16]
 800e5fe:	f100 0814 	add.w	r8, r0, #20
 800e602:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800e606:	1f37      	subs	r7, r6, #4
 800e608:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800e60c:	4610      	mov	r0, r2
 800e60e:	f7ff fd4b 	bl	800e0a8 <__hi0bits>
 800e612:	f1c0 0320 	rsb	r3, r0, #32
 800e616:	280a      	cmp	r0, #10
 800e618:	600b      	str	r3, [r1, #0]
 800e61a:	491b      	ldr	r1, [pc, #108]	@ (800e688 <__b2d+0x90>)
 800e61c:	dc15      	bgt.n	800e64a <__b2d+0x52>
 800e61e:	f1c0 0c0b 	rsb	ip, r0, #11
 800e622:	fa22 f30c 	lsr.w	r3, r2, ip
 800e626:	45b8      	cmp	r8, r7
 800e628:	ea43 0501 	orr.w	r5, r3, r1
 800e62c:	bf34      	ite	cc
 800e62e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800e632:	2300      	movcs	r3, #0
 800e634:	3015      	adds	r0, #21
 800e636:	fa02 f000 	lsl.w	r0, r2, r0
 800e63a:	fa23 f30c 	lsr.w	r3, r3, ip
 800e63e:	4303      	orrs	r3, r0
 800e640:	461c      	mov	r4, r3
 800e642:	ec45 4b10 	vmov	d0, r4, r5
 800e646:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e64a:	45b8      	cmp	r8, r7
 800e64c:	bf3a      	itte	cc
 800e64e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800e652:	f1a6 0708 	subcc.w	r7, r6, #8
 800e656:	2300      	movcs	r3, #0
 800e658:	380b      	subs	r0, #11
 800e65a:	d012      	beq.n	800e682 <__b2d+0x8a>
 800e65c:	f1c0 0120 	rsb	r1, r0, #32
 800e660:	fa23 f401 	lsr.w	r4, r3, r1
 800e664:	4082      	lsls	r2, r0
 800e666:	4322      	orrs	r2, r4
 800e668:	4547      	cmp	r7, r8
 800e66a:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800e66e:	bf8c      	ite	hi
 800e670:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800e674:	2200      	movls	r2, #0
 800e676:	4083      	lsls	r3, r0
 800e678:	40ca      	lsrs	r2, r1
 800e67a:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800e67e:	4313      	orrs	r3, r2
 800e680:	e7de      	b.n	800e640 <__b2d+0x48>
 800e682:	ea42 0501 	orr.w	r5, r2, r1
 800e686:	e7db      	b.n	800e640 <__b2d+0x48>
 800e688:	3ff00000 	.word	0x3ff00000

0800e68c <__d2b>:
 800e68c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e690:	460f      	mov	r7, r1
 800e692:	2101      	movs	r1, #1
 800e694:	ec59 8b10 	vmov	r8, r9, d0
 800e698:	4616      	mov	r6, r2
 800e69a:	f7ff fc13 	bl	800dec4 <_Balloc>
 800e69e:	4604      	mov	r4, r0
 800e6a0:	b930      	cbnz	r0, 800e6b0 <__d2b+0x24>
 800e6a2:	4602      	mov	r2, r0
 800e6a4:	4b23      	ldr	r3, [pc, #140]	@ (800e734 <__d2b+0xa8>)
 800e6a6:	4824      	ldr	r0, [pc, #144]	@ (800e738 <__d2b+0xac>)
 800e6a8:	f240 310f 	movw	r1, #783	@ 0x30f
 800e6ac:	f001 f8ec 	bl	800f888 <__assert_func>
 800e6b0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800e6b4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e6b8:	b10d      	cbz	r5, 800e6be <__d2b+0x32>
 800e6ba:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800e6be:	9301      	str	r3, [sp, #4]
 800e6c0:	f1b8 0300 	subs.w	r3, r8, #0
 800e6c4:	d023      	beq.n	800e70e <__d2b+0x82>
 800e6c6:	4668      	mov	r0, sp
 800e6c8:	9300      	str	r3, [sp, #0]
 800e6ca:	f7ff fd0c 	bl	800e0e6 <__lo0bits>
 800e6ce:	e9dd 1200 	ldrd	r1, r2, [sp]
 800e6d2:	b1d0      	cbz	r0, 800e70a <__d2b+0x7e>
 800e6d4:	f1c0 0320 	rsb	r3, r0, #32
 800e6d8:	fa02 f303 	lsl.w	r3, r2, r3
 800e6dc:	430b      	orrs	r3, r1
 800e6de:	40c2      	lsrs	r2, r0
 800e6e0:	6163      	str	r3, [r4, #20]
 800e6e2:	9201      	str	r2, [sp, #4]
 800e6e4:	9b01      	ldr	r3, [sp, #4]
 800e6e6:	61a3      	str	r3, [r4, #24]
 800e6e8:	2b00      	cmp	r3, #0
 800e6ea:	bf0c      	ite	eq
 800e6ec:	2201      	moveq	r2, #1
 800e6ee:	2202      	movne	r2, #2
 800e6f0:	6122      	str	r2, [r4, #16]
 800e6f2:	b1a5      	cbz	r5, 800e71e <__d2b+0x92>
 800e6f4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800e6f8:	4405      	add	r5, r0
 800e6fa:	603d      	str	r5, [r7, #0]
 800e6fc:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800e700:	6030      	str	r0, [r6, #0]
 800e702:	4620      	mov	r0, r4
 800e704:	b003      	add	sp, #12
 800e706:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e70a:	6161      	str	r1, [r4, #20]
 800e70c:	e7ea      	b.n	800e6e4 <__d2b+0x58>
 800e70e:	a801      	add	r0, sp, #4
 800e710:	f7ff fce9 	bl	800e0e6 <__lo0bits>
 800e714:	9b01      	ldr	r3, [sp, #4]
 800e716:	6163      	str	r3, [r4, #20]
 800e718:	3020      	adds	r0, #32
 800e71a:	2201      	movs	r2, #1
 800e71c:	e7e8      	b.n	800e6f0 <__d2b+0x64>
 800e71e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e722:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800e726:	6038      	str	r0, [r7, #0]
 800e728:	6918      	ldr	r0, [r3, #16]
 800e72a:	f7ff fcbd 	bl	800e0a8 <__hi0bits>
 800e72e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800e732:	e7e5      	b.n	800e700 <__d2b+0x74>
 800e734:	080120a8 	.word	0x080120a8
 800e738:	08012119 	.word	0x08012119

0800e73c <__ratio>:
 800e73c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e740:	b085      	sub	sp, #20
 800e742:	e9cd 1000 	strd	r1, r0, [sp]
 800e746:	a902      	add	r1, sp, #8
 800e748:	f7ff ff56 	bl	800e5f8 <__b2d>
 800e74c:	9800      	ldr	r0, [sp, #0]
 800e74e:	a903      	add	r1, sp, #12
 800e750:	ec55 4b10 	vmov	r4, r5, d0
 800e754:	f7ff ff50 	bl	800e5f8 <__b2d>
 800e758:	9b01      	ldr	r3, [sp, #4]
 800e75a:	6919      	ldr	r1, [r3, #16]
 800e75c:	9b00      	ldr	r3, [sp, #0]
 800e75e:	691b      	ldr	r3, [r3, #16]
 800e760:	1ac9      	subs	r1, r1, r3
 800e762:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800e766:	1a9b      	subs	r3, r3, r2
 800e768:	ec5b ab10 	vmov	sl, fp, d0
 800e76c:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800e770:	2b00      	cmp	r3, #0
 800e772:	bfce      	itee	gt
 800e774:	462a      	movgt	r2, r5
 800e776:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800e77a:	465a      	movle	r2, fp
 800e77c:	462f      	mov	r7, r5
 800e77e:	46d9      	mov	r9, fp
 800e780:	bfcc      	ite	gt
 800e782:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800e786:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800e78a:	464b      	mov	r3, r9
 800e78c:	4652      	mov	r2, sl
 800e78e:	4620      	mov	r0, r4
 800e790:	4639      	mov	r1, r7
 800e792:	f7f2 f86b 	bl	800086c <__aeabi_ddiv>
 800e796:	ec41 0b10 	vmov	d0, r0, r1
 800e79a:	b005      	add	sp, #20
 800e79c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e7a0 <__copybits>:
 800e7a0:	3901      	subs	r1, #1
 800e7a2:	b570      	push	{r4, r5, r6, lr}
 800e7a4:	1149      	asrs	r1, r1, #5
 800e7a6:	6914      	ldr	r4, [r2, #16]
 800e7a8:	3101      	adds	r1, #1
 800e7aa:	f102 0314 	add.w	r3, r2, #20
 800e7ae:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800e7b2:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800e7b6:	1f05      	subs	r5, r0, #4
 800e7b8:	42a3      	cmp	r3, r4
 800e7ba:	d30c      	bcc.n	800e7d6 <__copybits+0x36>
 800e7bc:	1aa3      	subs	r3, r4, r2
 800e7be:	3b11      	subs	r3, #17
 800e7c0:	f023 0303 	bic.w	r3, r3, #3
 800e7c4:	3211      	adds	r2, #17
 800e7c6:	42a2      	cmp	r2, r4
 800e7c8:	bf88      	it	hi
 800e7ca:	2300      	movhi	r3, #0
 800e7cc:	4418      	add	r0, r3
 800e7ce:	2300      	movs	r3, #0
 800e7d0:	4288      	cmp	r0, r1
 800e7d2:	d305      	bcc.n	800e7e0 <__copybits+0x40>
 800e7d4:	bd70      	pop	{r4, r5, r6, pc}
 800e7d6:	f853 6b04 	ldr.w	r6, [r3], #4
 800e7da:	f845 6f04 	str.w	r6, [r5, #4]!
 800e7de:	e7eb      	b.n	800e7b8 <__copybits+0x18>
 800e7e0:	f840 3b04 	str.w	r3, [r0], #4
 800e7e4:	e7f4      	b.n	800e7d0 <__copybits+0x30>

0800e7e6 <__any_on>:
 800e7e6:	f100 0214 	add.w	r2, r0, #20
 800e7ea:	6900      	ldr	r0, [r0, #16]
 800e7ec:	114b      	asrs	r3, r1, #5
 800e7ee:	4298      	cmp	r0, r3
 800e7f0:	b510      	push	{r4, lr}
 800e7f2:	db11      	blt.n	800e818 <__any_on+0x32>
 800e7f4:	dd0a      	ble.n	800e80c <__any_on+0x26>
 800e7f6:	f011 011f 	ands.w	r1, r1, #31
 800e7fa:	d007      	beq.n	800e80c <__any_on+0x26>
 800e7fc:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800e800:	fa24 f001 	lsr.w	r0, r4, r1
 800e804:	fa00 f101 	lsl.w	r1, r0, r1
 800e808:	428c      	cmp	r4, r1
 800e80a:	d10b      	bne.n	800e824 <__any_on+0x3e>
 800e80c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e810:	4293      	cmp	r3, r2
 800e812:	d803      	bhi.n	800e81c <__any_on+0x36>
 800e814:	2000      	movs	r0, #0
 800e816:	bd10      	pop	{r4, pc}
 800e818:	4603      	mov	r3, r0
 800e81a:	e7f7      	b.n	800e80c <__any_on+0x26>
 800e81c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e820:	2900      	cmp	r1, #0
 800e822:	d0f5      	beq.n	800e810 <__any_on+0x2a>
 800e824:	2001      	movs	r0, #1
 800e826:	e7f6      	b.n	800e816 <__any_on+0x30>

0800e828 <_strtoul_l.constprop.0>:
 800e828:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e82c:	4e34      	ldr	r6, [pc, #208]	@ (800e900 <_strtoul_l.constprop.0+0xd8>)
 800e82e:	4686      	mov	lr, r0
 800e830:	460d      	mov	r5, r1
 800e832:	4628      	mov	r0, r5
 800e834:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e838:	5d37      	ldrb	r7, [r6, r4]
 800e83a:	f017 0708 	ands.w	r7, r7, #8
 800e83e:	d1f8      	bne.n	800e832 <_strtoul_l.constprop.0+0xa>
 800e840:	2c2d      	cmp	r4, #45	@ 0x2d
 800e842:	d12f      	bne.n	800e8a4 <_strtoul_l.constprop.0+0x7c>
 800e844:	782c      	ldrb	r4, [r5, #0]
 800e846:	2701      	movs	r7, #1
 800e848:	1c85      	adds	r5, r0, #2
 800e84a:	f033 0010 	bics.w	r0, r3, #16
 800e84e:	d109      	bne.n	800e864 <_strtoul_l.constprop.0+0x3c>
 800e850:	2c30      	cmp	r4, #48	@ 0x30
 800e852:	d12c      	bne.n	800e8ae <_strtoul_l.constprop.0+0x86>
 800e854:	7828      	ldrb	r0, [r5, #0]
 800e856:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 800e85a:	2858      	cmp	r0, #88	@ 0x58
 800e85c:	d127      	bne.n	800e8ae <_strtoul_l.constprop.0+0x86>
 800e85e:	786c      	ldrb	r4, [r5, #1]
 800e860:	2310      	movs	r3, #16
 800e862:	3502      	adds	r5, #2
 800e864:	f04f 38ff 	mov.w	r8, #4294967295
 800e868:	2600      	movs	r6, #0
 800e86a:	fbb8 f8f3 	udiv	r8, r8, r3
 800e86e:	fb03 f908 	mul.w	r9, r3, r8
 800e872:	ea6f 0909 	mvn.w	r9, r9
 800e876:	4630      	mov	r0, r6
 800e878:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 800e87c:	f1bc 0f09 	cmp.w	ip, #9
 800e880:	d81c      	bhi.n	800e8bc <_strtoul_l.constprop.0+0x94>
 800e882:	4664      	mov	r4, ip
 800e884:	42a3      	cmp	r3, r4
 800e886:	dd2a      	ble.n	800e8de <_strtoul_l.constprop.0+0xb6>
 800e888:	f1b6 3fff 	cmp.w	r6, #4294967295
 800e88c:	d007      	beq.n	800e89e <_strtoul_l.constprop.0+0x76>
 800e88e:	4580      	cmp	r8, r0
 800e890:	d322      	bcc.n	800e8d8 <_strtoul_l.constprop.0+0xb0>
 800e892:	d101      	bne.n	800e898 <_strtoul_l.constprop.0+0x70>
 800e894:	45a1      	cmp	r9, r4
 800e896:	db1f      	blt.n	800e8d8 <_strtoul_l.constprop.0+0xb0>
 800e898:	fb00 4003 	mla	r0, r0, r3, r4
 800e89c:	2601      	movs	r6, #1
 800e89e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e8a2:	e7e9      	b.n	800e878 <_strtoul_l.constprop.0+0x50>
 800e8a4:	2c2b      	cmp	r4, #43	@ 0x2b
 800e8a6:	bf04      	itt	eq
 800e8a8:	782c      	ldrbeq	r4, [r5, #0]
 800e8aa:	1c85      	addeq	r5, r0, #2
 800e8ac:	e7cd      	b.n	800e84a <_strtoul_l.constprop.0+0x22>
 800e8ae:	2b00      	cmp	r3, #0
 800e8b0:	d1d8      	bne.n	800e864 <_strtoul_l.constprop.0+0x3c>
 800e8b2:	2c30      	cmp	r4, #48	@ 0x30
 800e8b4:	bf0c      	ite	eq
 800e8b6:	2308      	moveq	r3, #8
 800e8b8:	230a      	movne	r3, #10
 800e8ba:	e7d3      	b.n	800e864 <_strtoul_l.constprop.0+0x3c>
 800e8bc:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 800e8c0:	f1bc 0f19 	cmp.w	ip, #25
 800e8c4:	d801      	bhi.n	800e8ca <_strtoul_l.constprop.0+0xa2>
 800e8c6:	3c37      	subs	r4, #55	@ 0x37
 800e8c8:	e7dc      	b.n	800e884 <_strtoul_l.constprop.0+0x5c>
 800e8ca:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 800e8ce:	f1bc 0f19 	cmp.w	ip, #25
 800e8d2:	d804      	bhi.n	800e8de <_strtoul_l.constprop.0+0xb6>
 800e8d4:	3c57      	subs	r4, #87	@ 0x57
 800e8d6:	e7d5      	b.n	800e884 <_strtoul_l.constprop.0+0x5c>
 800e8d8:	f04f 36ff 	mov.w	r6, #4294967295
 800e8dc:	e7df      	b.n	800e89e <_strtoul_l.constprop.0+0x76>
 800e8de:	1c73      	adds	r3, r6, #1
 800e8e0:	d106      	bne.n	800e8f0 <_strtoul_l.constprop.0+0xc8>
 800e8e2:	2322      	movs	r3, #34	@ 0x22
 800e8e4:	f8ce 3000 	str.w	r3, [lr]
 800e8e8:	4630      	mov	r0, r6
 800e8ea:	b932      	cbnz	r2, 800e8fa <_strtoul_l.constprop.0+0xd2>
 800e8ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e8f0:	b107      	cbz	r7, 800e8f4 <_strtoul_l.constprop.0+0xcc>
 800e8f2:	4240      	negs	r0, r0
 800e8f4:	2a00      	cmp	r2, #0
 800e8f6:	d0f9      	beq.n	800e8ec <_strtoul_l.constprop.0+0xc4>
 800e8f8:	b106      	cbz	r6, 800e8fc <_strtoul_l.constprop.0+0xd4>
 800e8fa:	1e69      	subs	r1, r5, #1
 800e8fc:	6011      	str	r1, [r2, #0]
 800e8fe:	e7f5      	b.n	800e8ec <_strtoul_l.constprop.0+0xc4>
 800e900:	08011e41 	.word	0x08011e41

0800e904 <_strtoul_r>:
 800e904:	f7ff bf90 	b.w	800e828 <_strtoul_l.constprop.0>

0800e908 <strtoul>:
 800e908:	4613      	mov	r3, r2
 800e90a:	460a      	mov	r2, r1
 800e90c:	4601      	mov	r1, r0
 800e90e:	4802      	ldr	r0, [pc, #8]	@ (800e918 <strtoul+0x10>)
 800e910:	6800      	ldr	r0, [r0, #0]
 800e912:	f7ff bf89 	b.w	800e828 <_strtoul_l.constprop.0>
 800e916:	bf00      	nop
 800e918:	200001a4 	.word	0x200001a4

0800e91c <__ascii_wctomb>:
 800e91c:	4603      	mov	r3, r0
 800e91e:	4608      	mov	r0, r1
 800e920:	b141      	cbz	r1, 800e934 <__ascii_wctomb+0x18>
 800e922:	2aff      	cmp	r2, #255	@ 0xff
 800e924:	d904      	bls.n	800e930 <__ascii_wctomb+0x14>
 800e926:	228a      	movs	r2, #138	@ 0x8a
 800e928:	601a      	str	r2, [r3, #0]
 800e92a:	f04f 30ff 	mov.w	r0, #4294967295
 800e92e:	4770      	bx	lr
 800e930:	700a      	strb	r2, [r1, #0]
 800e932:	2001      	movs	r0, #1
 800e934:	4770      	bx	lr

0800e936 <__ssputs_r>:
 800e936:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e93a:	688e      	ldr	r6, [r1, #8]
 800e93c:	461f      	mov	r7, r3
 800e93e:	42be      	cmp	r6, r7
 800e940:	680b      	ldr	r3, [r1, #0]
 800e942:	4682      	mov	sl, r0
 800e944:	460c      	mov	r4, r1
 800e946:	4690      	mov	r8, r2
 800e948:	d82d      	bhi.n	800e9a6 <__ssputs_r+0x70>
 800e94a:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e94e:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800e952:	d026      	beq.n	800e9a2 <__ssputs_r+0x6c>
 800e954:	6965      	ldr	r5, [r4, #20]
 800e956:	6909      	ldr	r1, [r1, #16]
 800e958:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e95c:	eba3 0901 	sub.w	r9, r3, r1
 800e960:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e964:	1c7b      	adds	r3, r7, #1
 800e966:	444b      	add	r3, r9
 800e968:	106d      	asrs	r5, r5, #1
 800e96a:	429d      	cmp	r5, r3
 800e96c:	bf38      	it	cc
 800e96e:	461d      	movcc	r5, r3
 800e970:	0553      	lsls	r3, r2, #21
 800e972:	d527      	bpl.n	800e9c4 <__ssputs_r+0x8e>
 800e974:	4629      	mov	r1, r5
 800e976:	f7fb f987 	bl	8009c88 <_malloc_r>
 800e97a:	4606      	mov	r6, r0
 800e97c:	b360      	cbz	r0, 800e9d8 <__ssputs_r+0xa2>
 800e97e:	6921      	ldr	r1, [r4, #16]
 800e980:	464a      	mov	r2, r9
 800e982:	f7fe f851 	bl	800ca28 <memcpy>
 800e986:	89a3      	ldrh	r3, [r4, #12]
 800e988:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800e98c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e990:	81a3      	strh	r3, [r4, #12]
 800e992:	6126      	str	r6, [r4, #16]
 800e994:	6165      	str	r5, [r4, #20]
 800e996:	444e      	add	r6, r9
 800e998:	eba5 0509 	sub.w	r5, r5, r9
 800e99c:	6026      	str	r6, [r4, #0]
 800e99e:	60a5      	str	r5, [r4, #8]
 800e9a0:	463e      	mov	r6, r7
 800e9a2:	42be      	cmp	r6, r7
 800e9a4:	d900      	bls.n	800e9a8 <__ssputs_r+0x72>
 800e9a6:	463e      	mov	r6, r7
 800e9a8:	6820      	ldr	r0, [r4, #0]
 800e9aa:	4632      	mov	r2, r6
 800e9ac:	4641      	mov	r1, r8
 800e9ae:	f000 ff2a 	bl	800f806 <memmove>
 800e9b2:	68a3      	ldr	r3, [r4, #8]
 800e9b4:	1b9b      	subs	r3, r3, r6
 800e9b6:	60a3      	str	r3, [r4, #8]
 800e9b8:	6823      	ldr	r3, [r4, #0]
 800e9ba:	4433      	add	r3, r6
 800e9bc:	6023      	str	r3, [r4, #0]
 800e9be:	2000      	movs	r0, #0
 800e9c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e9c4:	462a      	mov	r2, r5
 800e9c6:	f000 ff9d 	bl	800f904 <_realloc_r>
 800e9ca:	4606      	mov	r6, r0
 800e9cc:	2800      	cmp	r0, #0
 800e9ce:	d1e0      	bne.n	800e992 <__ssputs_r+0x5c>
 800e9d0:	6921      	ldr	r1, [r4, #16]
 800e9d2:	4650      	mov	r0, sl
 800e9d4:	f7fe fe9c 	bl	800d710 <_free_r>
 800e9d8:	230c      	movs	r3, #12
 800e9da:	f8ca 3000 	str.w	r3, [sl]
 800e9de:	89a3      	ldrh	r3, [r4, #12]
 800e9e0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e9e4:	81a3      	strh	r3, [r4, #12]
 800e9e6:	f04f 30ff 	mov.w	r0, #4294967295
 800e9ea:	e7e9      	b.n	800e9c0 <__ssputs_r+0x8a>

0800e9ec <_svfiprintf_r>:
 800e9ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e9f0:	4698      	mov	r8, r3
 800e9f2:	898b      	ldrh	r3, [r1, #12]
 800e9f4:	061b      	lsls	r3, r3, #24
 800e9f6:	b09d      	sub	sp, #116	@ 0x74
 800e9f8:	4607      	mov	r7, r0
 800e9fa:	460d      	mov	r5, r1
 800e9fc:	4614      	mov	r4, r2
 800e9fe:	d510      	bpl.n	800ea22 <_svfiprintf_r+0x36>
 800ea00:	690b      	ldr	r3, [r1, #16]
 800ea02:	b973      	cbnz	r3, 800ea22 <_svfiprintf_r+0x36>
 800ea04:	2140      	movs	r1, #64	@ 0x40
 800ea06:	f7fb f93f 	bl	8009c88 <_malloc_r>
 800ea0a:	6028      	str	r0, [r5, #0]
 800ea0c:	6128      	str	r0, [r5, #16]
 800ea0e:	b930      	cbnz	r0, 800ea1e <_svfiprintf_r+0x32>
 800ea10:	230c      	movs	r3, #12
 800ea12:	603b      	str	r3, [r7, #0]
 800ea14:	f04f 30ff 	mov.w	r0, #4294967295
 800ea18:	b01d      	add	sp, #116	@ 0x74
 800ea1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ea1e:	2340      	movs	r3, #64	@ 0x40
 800ea20:	616b      	str	r3, [r5, #20]
 800ea22:	2300      	movs	r3, #0
 800ea24:	9309      	str	r3, [sp, #36]	@ 0x24
 800ea26:	2320      	movs	r3, #32
 800ea28:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ea2c:	f8cd 800c 	str.w	r8, [sp, #12]
 800ea30:	2330      	movs	r3, #48	@ 0x30
 800ea32:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800ebd0 <_svfiprintf_r+0x1e4>
 800ea36:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ea3a:	f04f 0901 	mov.w	r9, #1
 800ea3e:	4623      	mov	r3, r4
 800ea40:	469a      	mov	sl, r3
 800ea42:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ea46:	b10a      	cbz	r2, 800ea4c <_svfiprintf_r+0x60>
 800ea48:	2a25      	cmp	r2, #37	@ 0x25
 800ea4a:	d1f9      	bne.n	800ea40 <_svfiprintf_r+0x54>
 800ea4c:	ebba 0b04 	subs.w	fp, sl, r4
 800ea50:	d00b      	beq.n	800ea6a <_svfiprintf_r+0x7e>
 800ea52:	465b      	mov	r3, fp
 800ea54:	4622      	mov	r2, r4
 800ea56:	4629      	mov	r1, r5
 800ea58:	4638      	mov	r0, r7
 800ea5a:	f7ff ff6c 	bl	800e936 <__ssputs_r>
 800ea5e:	3001      	adds	r0, #1
 800ea60:	f000 80a7 	beq.w	800ebb2 <_svfiprintf_r+0x1c6>
 800ea64:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ea66:	445a      	add	r2, fp
 800ea68:	9209      	str	r2, [sp, #36]	@ 0x24
 800ea6a:	f89a 3000 	ldrb.w	r3, [sl]
 800ea6e:	2b00      	cmp	r3, #0
 800ea70:	f000 809f 	beq.w	800ebb2 <_svfiprintf_r+0x1c6>
 800ea74:	2300      	movs	r3, #0
 800ea76:	f04f 32ff 	mov.w	r2, #4294967295
 800ea7a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ea7e:	f10a 0a01 	add.w	sl, sl, #1
 800ea82:	9304      	str	r3, [sp, #16]
 800ea84:	9307      	str	r3, [sp, #28]
 800ea86:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ea8a:	931a      	str	r3, [sp, #104]	@ 0x68
 800ea8c:	4654      	mov	r4, sl
 800ea8e:	2205      	movs	r2, #5
 800ea90:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ea94:	484e      	ldr	r0, [pc, #312]	@ (800ebd0 <_svfiprintf_r+0x1e4>)
 800ea96:	f7f1 fbab 	bl	80001f0 <memchr>
 800ea9a:	9a04      	ldr	r2, [sp, #16]
 800ea9c:	b9d8      	cbnz	r0, 800ead6 <_svfiprintf_r+0xea>
 800ea9e:	06d0      	lsls	r0, r2, #27
 800eaa0:	bf44      	itt	mi
 800eaa2:	2320      	movmi	r3, #32
 800eaa4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800eaa8:	0711      	lsls	r1, r2, #28
 800eaaa:	bf44      	itt	mi
 800eaac:	232b      	movmi	r3, #43	@ 0x2b
 800eaae:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800eab2:	f89a 3000 	ldrb.w	r3, [sl]
 800eab6:	2b2a      	cmp	r3, #42	@ 0x2a
 800eab8:	d015      	beq.n	800eae6 <_svfiprintf_r+0xfa>
 800eaba:	9a07      	ldr	r2, [sp, #28]
 800eabc:	4654      	mov	r4, sl
 800eabe:	2000      	movs	r0, #0
 800eac0:	f04f 0c0a 	mov.w	ip, #10
 800eac4:	4621      	mov	r1, r4
 800eac6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800eaca:	3b30      	subs	r3, #48	@ 0x30
 800eacc:	2b09      	cmp	r3, #9
 800eace:	d94b      	bls.n	800eb68 <_svfiprintf_r+0x17c>
 800ead0:	b1b0      	cbz	r0, 800eb00 <_svfiprintf_r+0x114>
 800ead2:	9207      	str	r2, [sp, #28]
 800ead4:	e014      	b.n	800eb00 <_svfiprintf_r+0x114>
 800ead6:	eba0 0308 	sub.w	r3, r0, r8
 800eada:	fa09 f303 	lsl.w	r3, r9, r3
 800eade:	4313      	orrs	r3, r2
 800eae0:	9304      	str	r3, [sp, #16]
 800eae2:	46a2      	mov	sl, r4
 800eae4:	e7d2      	b.n	800ea8c <_svfiprintf_r+0xa0>
 800eae6:	9b03      	ldr	r3, [sp, #12]
 800eae8:	1d19      	adds	r1, r3, #4
 800eaea:	681b      	ldr	r3, [r3, #0]
 800eaec:	9103      	str	r1, [sp, #12]
 800eaee:	2b00      	cmp	r3, #0
 800eaf0:	bfbb      	ittet	lt
 800eaf2:	425b      	neglt	r3, r3
 800eaf4:	f042 0202 	orrlt.w	r2, r2, #2
 800eaf8:	9307      	strge	r3, [sp, #28]
 800eafa:	9307      	strlt	r3, [sp, #28]
 800eafc:	bfb8      	it	lt
 800eafe:	9204      	strlt	r2, [sp, #16]
 800eb00:	7823      	ldrb	r3, [r4, #0]
 800eb02:	2b2e      	cmp	r3, #46	@ 0x2e
 800eb04:	d10a      	bne.n	800eb1c <_svfiprintf_r+0x130>
 800eb06:	7863      	ldrb	r3, [r4, #1]
 800eb08:	2b2a      	cmp	r3, #42	@ 0x2a
 800eb0a:	d132      	bne.n	800eb72 <_svfiprintf_r+0x186>
 800eb0c:	9b03      	ldr	r3, [sp, #12]
 800eb0e:	1d1a      	adds	r2, r3, #4
 800eb10:	681b      	ldr	r3, [r3, #0]
 800eb12:	9203      	str	r2, [sp, #12]
 800eb14:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800eb18:	3402      	adds	r4, #2
 800eb1a:	9305      	str	r3, [sp, #20]
 800eb1c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800ebe0 <_svfiprintf_r+0x1f4>
 800eb20:	7821      	ldrb	r1, [r4, #0]
 800eb22:	2203      	movs	r2, #3
 800eb24:	4650      	mov	r0, sl
 800eb26:	f7f1 fb63 	bl	80001f0 <memchr>
 800eb2a:	b138      	cbz	r0, 800eb3c <_svfiprintf_r+0x150>
 800eb2c:	9b04      	ldr	r3, [sp, #16]
 800eb2e:	eba0 000a 	sub.w	r0, r0, sl
 800eb32:	2240      	movs	r2, #64	@ 0x40
 800eb34:	4082      	lsls	r2, r0
 800eb36:	4313      	orrs	r3, r2
 800eb38:	3401      	adds	r4, #1
 800eb3a:	9304      	str	r3, [sp, #16]
 800eb3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eb40:	4824      	ldr	r0, [pc, #144]	@ (800ebd4 <_svfiprintf_r+0x1e8>)
 800eb42:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800eb46:	2206      	movs	r2, #6
 800eb48:	f7f1 fb52 	bl	80001f0 <memchr>
 800eb4c:	2800      	cmp	r0, #0
 800eb4e:	d036      	beq.n	800ebbe <_svfiprintf_r+0x1d2>
 800eb50:	4b21      	ldr	r3, [pc, #132]	@ (800ebd8 <_svfiprintf_r+0x1ec>)
 800eb52:	bb1b      	cbnz	r3, 800eb9c <_svfiprintf_r+0x1b0>
 800eb54:	9b03      	ldr	r3, [sp, #12]
 800eb56:	3307      	adds	r3, #7
 800eb58:	f023 0307 	bic.w	r3, r3, #7
 800eb5c:	3308      	adds	r3, #8
 800eb5e:	9303      	str	r3, [sp, #12]
 800eb60:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800eb62:	4433      	add	r3, r6
 800eb64:	9309      	str	r3, [sp, #36]	@ 0x24
 800eb66:	e76a      	b.n	800ea3e <_svfiprintf_r+0x52>
 800eb68:	fb0c 3202 	mla	r2, ip, r2, r3
 800eb6c:	460c      	mov	r4, r1
 800eb6e:	2001      	movs	r0, #1
 800eb70:	e7a8      	b.n	800eac4 <_svfiprintf_r+0xd8>
 800eb72:	2300      	movs	r3, #0
 800eb74:	3401      	adds	r4, #1
 800eb76:	9305      	str	r3, [sp, #20]
 800eb78:	4619      	mov	r1, r3
 800eb7a:	f04f 0c0a 	mov.w	ip, #10
 800eb7e:	4620      	mov	r0, r4
 800eb80:	f810 2b01 	ldrb.w	r2, [r0], #1
 800eb84:	3a30      	subs	r2, #48	@ 0x30
 800eb86:	2a09      	cmp	r2, #9
 800eb88:	d903      	bls.n	800eb92 <_svfiprintf_r+0x1a6>
 800eb8a:	2b00      	cmp	r3, #0
 800eb8c:	d0c6      	beq.n	800eb1c <_svfiprintf_r+0x130>
 800eb8e:	9105      	str	r1, [sp, #20]
 800eb90:	e7c4      	b.n	800eb1c <_svfiprintf_r+0x130>
 800eb92:	fb0c 2101 	mla	r1, ip, r1, r2
 800eb96:	4604      	mov	r4, r0
 800eb98:	2301      	movs	r3, #1
 800eb9a:	e7f0      	b.n	800eb7e <_svfiprintf_r+0x192>
 800eb9c:	ab03      	add	r3, sp, #12
 800eb9e:	9300      	str	r3, [sp, #0]
 800eba0:	462a      	mov	r2, r5
 800eba2:	4b0e      	ldr	r3, [pc, #56]	@ (800ebdc <_svfiprintf_r+0x1f0>)
 800eba4:	a904      	add	r1, sp, #16
 800eba6:	4638      	mov	r0, r7
 800eba8:	f7fc f836 	bl	800ac18 <_printf_float>
 800ebac:	1c42      	adds	r2, r0, #1
 800ebae:	4606      	mov	r6, r0
 800ebb0:	d1d6      	bne.n	800eb60 <_svfiprintf_r+0x174>
 800ebb2:	89ab      	ldrh	r3, [r5, #12]
 800ebb4:	065b      	lsls	r3, r3, #25
 800ebb6:	f53f af2d 	bmi.w	800ea14 <_svfiprintf_r+0x28>
 800ebba:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ebbc:	e72c      	b.n	800ea18 <_svfiprintf_r+0x2c>
 800ebbe:	ab03      	add	r3, sp, #12
 800ebc0:	9300      	str	r3, [sp, #0]
 800ebc2:	462a      	mov	r2, r5
 800ebc4:	4b05      	ldr	r3, [pc, #20]	@ (800ebdc <_svfiprintf_r+0x1f0>)
 800ebc6:	a904      	add	r1, sp, #16
 800ebc8:	4638      	mov	r0, r7
 800ebca:	f7fc fabd 	bl	800b148 <_printf_i>
 800ebce:	e7ed      	b.n	800ebac <_svfiprintf_r+0x1c0>
 800ebd0:	08012270 	.word	0x08012270
 800ebd4:	0801227a 	.word	0x0801227a
 800ebd8:	0800ac19 	.word	0x0800ac19
 800ebdc:	0800e937 	.word	0x0800e937
 800ebe0:	08012276 	.word	0x08012276

0800ebe4 <_sungetc_r>:
 800ebe4:	b538      	push	{r3, r4, r5, lr}
 800ebe6:	1c4b      	adds	r3, r1, #1
 800ebe8:	4614      	mov	r4, r2
 800ebea:	d103      	bne.n	800ebf4 <_sungetc_r+0x10>
 800ebec:	f04f 35ff 	mov.w	r5, #4294967295
 800ebf0:	4628      	mov	r0, r5
 800ebf2:	bd38      	pop	{r3, r4, r5, pc}
 800ebf4:	8993      	ldrh	r3, [r2, #12]
 800ebf6:	f023 0320 	bic.w	r3, r3, #32
 800ebfa:	8193      	strh	r3, [r2, #12]
 800ebfc:	6853      	ldr	r3, [r2, #4]
 800ebfe:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800ec00:	b2cd      	uxtb	r5, r1
 800ec02:	b18a      	cbz	r2, 800ec28 <_sungetc_r+0x44>
 800ec04:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800ec06:	429a      	cmp	r2, r3
 800ec08:	dd08      	ble.n	800ec1c <_sungetc_r+0x38>
 800ec0a:	6823      	ldr	r3, [r4, #0]
 800ec0c:	1e5a      	subs	r2, r3, #1
 800ec0e:	6022      	str	r2, [r4, #0]
 800ec10:	f803 5c01 	strb.w	r5, [r3, #-1]
 800ec14:	6863      	ldr	r3, [r4, #4]
 800ec16:	3301      	adds	r3, #1
 800ec18:	6063      	str	r3, [r4, #4]
 800ec1a:	e7e9      	b.n	800ebf0 <_sungetc_r+0xc>
 800ec1c:	4621      	mov	r1, r4
 800ec1e:	f000 fdb8 	bl	800f792 <__submore>
 800ec22:	2800      	cmp	r0, #0
 800ec24:	d0f1      	beq.n	800ec0a <_sungetc_r+0x26>
 800ec26:	e7e1      	b.n	800ebec <_sungetc_r+0x8>
 800ec28:	6921      	ldr	r1, [r4, #16]
 800ec2a:	6822      	ldr	r2, [r4, #0]
 800ec2c:	b141      	cbz	r1, 800ec40 <_sungetc_r+0x5c>
 800ec2e:	4291      	cmp	r1, r2
 800ec30:	d206      	bcs.n	800ec40 <_sungetc_r+0x5c>
 800ec32:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 800ec36:	42a9      	cmp	r1, r5
 800ec38:	d102      	bne.n	800ec40 <_sungetc_r+0x5c>
 800ec3a:	3a01      	subs	r2, #1
 800ec3c:	6022      	str	r2, [r4, #0]
 800ec3e:	e7ea      	b.n	800ec16 <_sungetc_r+0x32>
 800ec40:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 800ec44:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ec48:	6363      	str	r3, [r4, #52]	@ 0x34
 800ec4a:	2303      	movs	r3, #3
 800ec4c:	63a3      	str	r3, [r4, #56]	@ 0x38
 800ec4e:	4623      	mov	r3, r4
 800ec50:	f803 5f46 	strb.w	r5, [r3, #70]!
 800ec54:	6023      	str	r3, [r4, #0]
 800ec56:	2301      	movs	r3, #1
 800ec58:	e7de      	b.n	800ec18 <_sungetc_r+0x34>

0800ec5a <__ssrefill_r>:
 800ec5a:	b510      	push	{r4, lr}
 800ec5c:	460c      	mov	r4, r1
 800ec5e:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800ec60:	b169      	cbz	r1, 800ec7e <__ssrefill_r+0x24>
 800ec62:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ec66:	4299      	cmp	r1, r3
 800ec68:	d001      	beq.n	800ec6e <__ssrefill_r+0x14>
 800ec6a:	f7fe fd51 	bl	800d710 <_free_r>
 800ec6e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800ec70:	6063      	str	r3, [r4, #4]
 800ec72:	2000      	movs	r0, #0
 800ec74:	6360      	str	r0, [r4, #52]	@ 0x34
 800ec76:	b113      	cbz	r3, 800ec7e <__ssrefill_r+0x24>
 800ec78:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800ec7a:	6023      	str	r3, [r4, #0]
 800ec7c:	bd10      	pop	{r4, pc}
 800ec7e:	6923      	ldr	r3, [r4, #16]
 800ec80:	6023      	str	r3, [r4, #0]
 800ec82:	2300      	movs	r3, #0
 800ec84:	6063      	str	r3, [r4, #4]
 800ec86:	89a3      	ldrh	r3, [r4, #12]
 800ec88:	f043 0320 	orr.w	r3, r3, #32
 800ec8c:	81a3      	strh	r3, [r4, #12]
 800ec8e:	f04f 30ff 	mov.w	r0, #4294967295
 800ec92:	e7f3      	b.n	800ec7c <__ssrefill_r+0x22>

0800ec94 <__ssvfiscanf_r>:
 800ec94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ec98:	460c      	mov	r4, r1
 800ec9a:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 800ec9e:	2100      	movs	r1, #0
 800eca0:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 800eca4:	49a5      	ldr	r1, [pc, #660]	@ (800ef3c <__ssvfiscanf_r+0x2a8>)
 800eca6:	91a0      	str	r1, [sp, #640]	@ 0x280
 800eca8:	f10d 0804 	add.w	r8, sp, #4
 800ecac:	49a4      	ldr	r1, [pc, #656]	@ (800ef40 <__ssvfiscanf_r+0x2ac>)
 800ecae:	4fa5      	ldr	r7, [pc, #660]	@ (800ef44 <__ssvfiscanf_r+0x2b0>)
 800ecb0:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 800ecb4:	4606      	mov	r6, r0
 800ecb6:	91a1      	str	r1, [sp, #644]	@ 0x284
 800ecb8:	9300      	str	r3, [sp, #0]
 800ecba:	7813      	ldrb	r3, [r2, #0]
 800ecbc:	2b00      	cmp	r3, #0
 800ecbe:	f000 8158 	beq.w	800ef72 <__ssvfiscanf_r+0x2de>
 800ecc2:	5cf9      	ldrb	r1, [r7, r3]
 800ecc4:	f011 0108 	ands.w	r1, r1, #8
 800ecc8:	f102 0501 	add.w	r5, r2, #1
 800eccc:	d019      	beq.n	800ed02 <__ssvfiscanf_r+0x6e>
 800ecce:	6863      	ldr	r3, [r4, #4]
 800ecd0:	2b00      	cmp	r3, #0
 800ecd2:	dd0f      	ble.n	800ecf4 <__ssvfiscanf_r+0x60>
 800ecd4:	6823      	ldr	r3, [r4, #0]
 800ecd6:	781a      	ldrb	r2, [r3, #0]
 800ecd8:	5cba      	ldrb	r2, [r7, r2]
 800ecda:	0712      	lsls	r2, r2, #28
 800ecdc:	d401      	bmi.n	800ece2 <__ssvfiscanf_r+0x4e>
 800ecde:	462a      	mov	r2, r5
 800ece0:	e7eb      	b.n	800ecba <__ssvfiscanf_r+0x26>
 800ece2:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800ece4:	3201      	adds	r2, #1
 800ece6:	9245      	str	r2, [sp, #276]	@ 0x114
 800ece8:	6862      	ldr	r2, [r4, #4]
 800ecea:	3301      	adds	r3, #1
 800ecec:	3a01      	subs	r2, #1
 800ecee:	6062      	str	r2, [r4, #4]
 800ecf0:	6023      	str	r3, [r4, #0]
 800ecf2:	e7ec      	b.n	800ecce <__ssvfiscanf_r+0x3a>
 800ecf4:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800ecf6:	4621      	mov	r1, r4
 800ecf8:	4630      	mov	r0, r6
 800ecfa:	4798      	blx	r3
 800ecfc:	2800      	cmp	r0, #0
 800ecfe:	d0e9      	beq.n	800ecd4 <__ssvfiscanf_r+0x40>
 800ed00:	e7ed      	b.n	800ecde <__ssvfiscanf_r+0x4a>
 800ed02:	2b25      	cmp	r3, #37	@ 0x25
 800ed04:	d012      	beq.n	800ed2c <__ssvfiscanf_r+0x98>
 800ed06:	4699      	mov	r9, r3
 800ed08:	6863      	ldr	r3, [r4, #4]
 800ed0a:	2b00      	cmp	r3, #0
 800ed0c:	f340 8093 	ble.w	800ee36 <__ssvfiscanf_r+0x1a2>
 800ed10:	6822      	ldr	r2, [r4, #0]
 800ed12:	7813      	ldrb	r3, [r2, #0]
 800ed14:	454b      	cmp	r3, r9
 800ed16:	f040 812c 	bne.w	800ef72 <__ssvfiscanf_r+0x2de>
 800ed1a:	6863      	ldr	r3, [r4, #4]
 800ed1c:	3b01      	subs	r3, #1
 800ed1e:	6063      	str	r3, [r4, #4]
 800ed20:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 800ed22:	3201      	adds	r2, #1
 800ed24:	3301      	adds	r3, #1
 800ed26:	6022      	str	r2, [r4, #0]
 800ed28:	9345      	str	r3, [sp, #276]	@ 0x114
 800ed2a:	e7d8      	b.n	800ecde <__ssvfiscanf_r+0x4a>
 800ed2c:	9141      	str	r1, [sp, #260]	@ 0x104
 800ed2e:	9143      	str	r1, [sp, #268]	@ 0x10c
 800ed30:	7853      	ldrb	r3, [r2, #1]
 800ed32:	2b2a      	cmp	r3, #42	@ 0x2a
 800ed34:	bf02      	ittt	eq
 800ed36:	2310      	moveq	r3, #16
 800ed38:	1c95      	addeq	r5, r2, #2
 800ed3a:	9341      	streq	r3, [sp, #260]	@ 0x104
 800ed3c:	220a      	movs	r2, #10
 800ed3e:	46a9      	mov	r9, r5
 800ed40:	f819 1b01 	ldrb.w	r1, [r9], #1
 800ed44:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 800ed48:	2b09      	cmp	r3, #9
 800ed4a:	d91e      	bls.n	800ed8a <__ssvfiscanf_r+0xf6>
 800ed4c:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 800ef48 <__ssvfiscanf_r+0x2b4>
 800ed50:	2203      	movs	r2, #3
 800ed52:	4650      	mov	r0, sl
 800ed54:	f7f1 fa4c 	bl	80001f0 <memchr>
 800ed58:	b138      	cbz	r0, 800ed6a <__ssvfiscanf_r+0xd6>
 800ed5a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800ed5c:	eba0 000a 	sub.w	r0, r0, sl
 800ed60:	2301      	movs	r3, #1
 800ed62:	4083      	lsls	r3, r0
 800ed64:	4313      	orrs	r3, r2
 800ed66:	9341      	str	r3, [sp, #260]	@ 0x104
 800ed68:	464d      	mov	r5, r9
 800ed6a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800ed6e:	2b78      	cmp	r3, #120	@ 0x78
 800ed70:	d806      	bhi.n	800ed80 <__ssvfiscanf_r+0xec>
 800ed72:	2b57      	cmp	r3, #87	@ 0x57
 800ed74:	d810      	bhi.n	800ed98 <__ssvfiscanf_r+0x104>
 800ed76:	2b25      	cmp	r3, #37	@ 0x25
 800ed78:	d0c5      	beq.n	800ed06 <__ssvfiscanf_r+0x72>
 800ed7a:	d857      	bhi.n	800ee2c <__ssvfiscanf_r+0x198>
 800ed7c:	2b00      	cmp	r3, #0
 800ed7e:	d065      	beq.n	800ee4c <__ssvfiscanf_r+0x1b8>
 800ed80:	2303      	movs	r3, #3
 800ed82:	9347      	str	r3, [sp, #284]	@ 0x11c
 800ed84:	230a      	movs	r3, #10
 800ed86:	9342      	str	r3, [sp, #264]	@ 0x108
 800ed88:	e078      	b.n	800ee7c <__ssvfiscanf_r+0x1e8>
 800ed8a:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 800ed8c:	fb02 1103 	mla	r1, r2, r3, r1
 800ed90:	3930      	subs	r1, #48	@ 0x30
 800ed92:	9143      	str	r1, [sp, #268]	@ 0x10c
 800ed94:	464d      	mov	r5, r9
 800ed96:	e7d2      	b.n	800ed3e <__ssvfiscanf_r+0xaa>
 800ed98:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 800ed9c:	2a20      	cmp	r2, #32
 800ed9e:	d8ef      	bhi.n	800ed80 <__ssvfiscanf_r+0xec>
 800eda0:	a101      	add	r1, pc, #4	@ (adr r1, 800eda8 <__ssvfiscanf_r+0x114>)
 800eda2:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800eda6:	bf00      	nop
 800eda8:	0800ee5b 	.word	0x0800ee5b
 800edac:	0800ed81 	.word	0x0800ed81
 800edb0:	0800ed81 	.word	0x0800ed81
 800edb4:	0800eeb5 	.word	0x0800eeb5
 800edb8:	0800ed81 	.word	0x0800ed81
 800edbc:	0800ed81 	.word	0x0800ed81
 800edc0:	0800ed81 	.word	0x0800ed81
 800edc4:	0800ed81 	.word	0x0800ed81
 800edc8:	0800ed81 	.word	0x0800ed81
 800edcc:	0800ed81 	.word	0x0800ed81
 800edd0:	0800ed81 	.word	0x0800ed81
 800edd4:	0800eecb 	.word	0x0800eecb
 800edd8:	0800eeb1 	.word	0x0800eeb1
 800eddc:	0800ee33 	.word	0x0800ee33
 800ede0:	0800ee33 	.word	0x0800ee33
 800ede4:	0800ee33 	.word	0x0800ee33
 800ede8:	0800ed81 	.word	0x0800ed81
 800edec:	0800ee6d 	.word	0x0800ee6d
 800edf0:	0800ed81 	.word	0x0800ed81
 800edf4:	0800ed81 	.word	0x0800ed81
 800edf8:	0800ed81 	.word	0x0800ed81
 800edfc:	0800ed81 	.word	0x0800ed81
 800ee00:	0800eedb 	.word	0x0800eedb
 800ee04:	0800ee75 	.word	0x0800ee75
 800ee08:	0800ee53 	.word	0x0800ee53
 800ee0c:	0800ed81 	.word	0x0800ed81
 800ee10:	0800ed81 	.word	0x0800ed81
 800ee14:	0800eed7 	.word	0x0800eed7
 800ee18:	0800ed81 	.word	0x0800ed81
 800ee1c:	0800eeb1 	.word	0x0800eeb1
 800ee20:	0800ed81 	.word	0x0800ed81
 800ee24:	0800ed81 	.word	0x0800ed81
 800ee28:	0800ee5b 	.word	0x0800ee5b
 800ee2c:	3b45      	subs	r3, #69	@ 0x45
 800ee2e:	2b02      	cmp	r3, #2
 800ee30:	d8a6      	bhi.n	800ed80 <__ssvfiscanf_r+0xec>
 800ee32:	2305      	movs	r3, #5
 800ee34:	e021      	b.n	800ee7a <__ssvfiscanf_r+0x1e6>
 800ee36:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800ee38:	4621      	mov	r1, r4
 800ee3a:	4630      	mov	r0, r6
 800ee3c:	4798      	blx	r3
 800ee3e:	2800      	cmp	r0, #0
 800ee40:	f43f af66 	beq.w	800ed10 <__ssvfiscanf_r+0x7c>
 800ee44:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800ee46:	2800      	cmp	r0, #0
 800ee48:	f040 808b 	bne.w	800ef62 <__ssvfiscanf_r+0x2ce>
 800ee4c:	f04f 30ff 	mov.w	r0, #4294967295
 800ee50:	e08b      	b.n	800ef6a <__ssvfiscanf_r+0x2d6>
 800ee52:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800ee54:	f042 0220 	orr.w	r2, r2, #32
 800ee58:	9241      	str	r2, [sp, #260]	@ 0x104
 800ee5a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800ee5c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800ee60:	9241      	str	r2, [sp, #260]	@ 0x104
 800ee62:	2210      	movs	r2, #16
 800ee64:	2b6e      	cmp	r3, #110	@ 0x6e
 800ee66:	9242      	str	r2, [sp, #264]	@ 0x108
 800ee68:	d902      	bls.n	800ee70 <__ssvfiscanf_r+0x1dc>
 800ee6a:	e005      	b.n	800ee78 <__ssvfiscanf_r+0x1e4>
 800ee6c:	2300      	movs	r3, #0
 800ee6e:	9342      	str	r3, [sp, #264]	@ 0x108
 800ee70:	2303      	movs	r3, #3
 800ee72:	e002      	b.n	800ee7a <__ssvfiscanf_r+0x1e6>
 800ee74:	2308      	movs	r3, #8
 800ee76:	9342      	str	r3, [sp, #264]	@ 0x108
 800ee78:	2304      	movs	r3, #4
 800ee7a:	9347      	str	r3, [sp, #284]	@ 0x11c
 800ee7c:	6863      	ldr	r3, [r4, #4]
 800ee7e:	2b00      	cmp	r3, #0
 800ee80:	dd39      	ble.n	800eef6 <__ssvfiscanf_r+0x262>
 800ee82:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800ee84:	0659      	lsls	r1, r3, #25
 800ee86:	d404      	bmi.n	800ee92 <__ssvfiscanf_r+0x1fe>
 800ee88:	6823      	ldr	r3, [r4, #0]
 800ee8a:	781a      	ldrb	r2, [r3, #0]
 800ee8c:	5cba      	ldrb	r2, [r7, r2]
 800ee8e:	0712      	lsls	r2, r2, #28
 800ee90:	d438      	bmi.n	800ef04 <__ssvfiscanf_r+0x270>
 800ee92:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 800ee94:	2b02      	cmp	r3, #2
 800ee96:	dc47      	bgt.n	800ef28 <__ssvfiscanf_r+0x294>
 800ee98:	466b      	mov	r3, sp
 800ee9a:	4622      	mov	r2, r4
 800ee9c:	a941      	add	r1, sp, #260	@ 0x104
 800ee9e:	4630      	mov	r0, r6
 800eea0:	f000 f9ae 	bl	800f200 <_scanf_chars>
 800eea4:	2801      	cmp	r0, #1
 800eea6:	d064      	beq.n	800ef72 <__ssvfiscanf_r+0x2de>
 800eea8:	2802      	cmp	r0, #2
 800eeaa:	f47f af18 	bne.w	800ecde <__ssvfiscanf_r+0x4a>
 800eeae:	e7c9      	b.n	800ee44 <__ssvfiscanf_r+0x1b0>
 800eeb0:	220a      	movs	r2, #10
 800eeb2:	e7d7      	b.n	800ee64 <__ssvfiscanf_r+0x1d0>
 800eeb4:	4629      	mov	r1, r5
 800eeb6:	4640      	mov	r0, r8
 800eeb8:	f000 fc32 	bl	800f720 <__sccl>
 800eebc:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800eebe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800eec2:	9341      	str	r3, [sp, #260]	@ 0x104
 800eec4:	4605      	mov	r5, r0
 800eec6:	2301      	movs	r3, #1
 800eec8:	e7d7      	b.n	800ee7a <__ssvfiscanf_r+0x1e6>
 800eeca:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800eecc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800eed0:	9341      	str	r3, [sp, #260]	@ 0x104
 800eed2:	2300      	movs	r3, #0
 800eed4:	e7d1      	b.n	800ee7a <__ssvfiscanf_r+0x1e6>
 800eed6:	2302      	movs	r3, #2
 800eed8:	e7cf      	b.n	800ee7a <__ssvfiscanf_r+0x1e6>
 800eeda:	9841      	ldr	r0, [sp, #260]	@ 0x104
 800eedc:	06c3      	lsls	r3, r0, #27
 800eede:	f53f aefe 	bmi.w	800ecde <__ssvfiscanf_r+0x4a>
 800eee2:	9b00      	ldr	r3, [sp, #0]
 800eee4:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800eee6:	1d19      	adds	r1, r3, #4
 800eee8:	9100      	str	r1, [sp, #0]
 800eeea:	681b      	ldr	r3, [r3, #0]
 800eeec:	07c0      	lsls	r0, r0, #31
 800eeee:	bf4c      	ite	mi
 800eef0:	801a      	strhmi	r2, [r3, #0]
 800eef2:	601a      	strpl	r2, [r3, #0]
 800eef4:	e6f3      	b.n	800ecde <__ssvfiscanf_r+0x4a>
 800eef6:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800eef8:	4621      	mov	r1, r4
 800eefa:	4630      	mov	r0, r6
 800eefc:	4798      	blx	r3
 800eefe:	2800      	cmp	r0, #0
 800ef00:	d0bf      	beq.n	800ee82 <__ssvfiscanf_r+0x1ee>
 800ef02:	e79f      	b.n	800ee44 <__ssvfiscanf_r+0x1b0>
 800ef04:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800ef06:	3201      	adds	r2, #1
 800ef08:	9245      	str	r2, [sp, #276]	@ 0x114
 800ef0a:	6862      	ldr	r2, [r4, #4]
 800ef0c:	3a01      	subs	r2, #1
 800ef0e:	2a00      	cmp	r2, #0
 800ef10:	6062      	str	r2, [r4, #4]
 800ef12:	dd02      	ble.n	800ef1a <__ssvfiscanf_r+0x286>
 800ef14:	3301      	adds	r3, #1
 800ef16:	6023      	str	r3, [r4, #0]
 800ef18:	e7b6      	b.n	800ee88 <__ssvfiscanf_r+0x1f4>
 800ef1a:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800ef1c:	4621      	mov	r1, r4
 800ef1e:	4630      	mov	r0, r6
 800ef20:	4798      	blx	r3
 800ef22:	2800      	cmp	r0, #0
 800ef24:	d0b0      	beq.n	800ee88 <__ssvfiscanf_r+0x1f4>
 800ef26:	e78d      	b.n	800ee44 <__ssvfiscanf_r+0x1b0>
 800ef28:	2b04      	cmp	r3, #4
 800ef2a:	dc0f      	bgt.n	800ef4c <__ssvfiscanf_r+0x2b8>
 800ef2c:	466b      	mov	r3, sp
 800ef2e:	4622      	mov	r2, r4
 800ef30:	a941      	add	r1, sp, #260	@ 0x104
 800ef32:	4630      	mov	r0, r6
 800ef34:	f000 f9be 	bl	800f2b4 <_scanf_i>
 800ef38:	e7b4      	b.n	800eea4 <__ssvfiscanf_r+0x210>
 800ef3a:	bf00      	nop
 800ef3c:	0800ebe5 	.word	0x0800ebe5
 800ef40:	0800ec5b 	.word	0x0800ec5b
 800ef44:	08011e41 	.word	0x08011e41
 800ef48:	08012276 	.word	0x08012276
 800ef4c:	4b0a      	ldr	r3, [pc, #40]	@ (800ef78 <__ssvfiscanf_r+0x2e4>)
 800ef4e:	2b00      	cmp	r3, #0
 800ef50:	f43f aec5 	beq.w	800ecde <__ssvfiscanf_r+0x4a>
 800ef54:	466b      	mov	r3, sp
 800ef56:	4622      	mov	r2, r4
 800ef58:	a941      	add	r1, sp, #260	@ 0x104
 800ef5a:	4630      	mov	r0, r6
 800ef5c:	f7fc fa14 	bl	800b388 <_scanf_float>
 800ef60:	e7a0      	b.n	800eea4 <__ssvfiscanf_r+0x210>
 800ef62:	89a3      	ldrh	r3, [r4, #12]
 800ef64:	065b      	lsls	r3, r3, #25
 800ef66:	f53f af71 	bmi.w	800ee4c <__ssvfiscanf_r+0x1b8>
 800ef6a:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 800ef6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ef72:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800ef74:	e7f9      	b.n	800ef6a <__ssvfiscanf_r+0x2d6>
 800ef76:	bf00      	nop
 800ef78:	0800b389 	.word	0x0800b389

0800ef7c <__sfputc_r>:
 800ef7c:	6893      	ldr	r3, [r2, #8]
 800ef7e:	3b01      	subs	r3, #1
 800ef80:	2b00      	cmp	r3, #0
 800ef82:	b410      	push	{r4}
 800ef84:	6093      	str	r3, [r2, #8]
 800ef86:	da08      	bge.n	800ef9a <__sfputc_r+0x1e>
 800ef88:	6994      	ldr	r4, [r2, #24]
 800ef8a:	42a3      	cmp	r3, r4
 800ef8c:	db01      	blt.n	800ef92 <__sfputc_r+0x16>
 800ef8e:	290a      	cmp	r1, #10
 800ef90:	d103      	bne.n	800ef9a <__sfputc_r+0x1e>
 800ef92:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ef96:	f7fc be08 	b.w	800bbaa <__swbuf_r>
 800ef9a:	6813      	ldr	r3, [r2, #0]
 800ef9c:	1c58      	adds	r0, r3, #1
 800ef9e:	6010      	str	r0, [r2, #0]
 800efa0:	7019      	strb	r1, [r3, #0]
 800efa2:	4608      	mov	r0, r1
 800efa4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800efa8:	4770      	bx	lr

0800efaa <__sfputs_r>:
 800efaa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800efac:	4606      	mov	r6, r0
 800efae:	460f      	mov	r7, r1
 800efb0:	4614      	mov	r4, r2
 800efb2:	18d5      	adds	r5, r2, r3
 800efb4:	42ac      	cmp	r4, r5
 800efb6:	d101      	bne.n	800efbc <__sfputs_r+0x12>
 800efb8:	2000      	movs	r0, #0
 800efba:	e007      	b.n	800efcc <__sfputs_r+0x22>
 800efbc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800efc0:	463a      	mov	r2, r7
 800efc2:	4630      	mov	r0, r6
 800efc4:	f7ff ffda 	bl	800ef7c <__sfputc_r>
 800efc8:	1c43      	adds	r3, r0, #1
 800efca:	d1f3      	bne.n	800efb4 <__sfputs_r+0xa>
 800efcc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800efd0 <_vfiprintf_r>:
 800efd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800efd4:	460d      	mov	r5, r1
 800efd6:	b09d      	sub	sp, #116	@ 0x74
 800efd8:	4614      	mov	r4, r2
 800efda:	4698      	mov	r8, r3
 800efdc:	4606      	mov	r6, r0
 800efde:	b118      	cbz	r0, 800efe8 <_vfiprintf_r+0x18>
 800efe0:	6a03      	ldr	r3, [r0, #32]
 800efe2:	b90b      	cbnz	r3, 800efe8 <_vfiprintf_r+0x18>
 800efe4:	f7fc fc70 	bl	800b8c8 <__sinit>
 800efe8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800efea:	07d9      	lsls	r1, r3, #31
 800efec:	d405      	bmi.n	800effa <_vfiprintf_r+0x2a>
 800efee:	89ab      	ldrh	r3, [r5, #12]
 800eff0:	059a      	lsls	r2, r3, #22
 800eff2:	d402      	bmi.n	800effa <_vfiprintf_r+0x2a>
 800eff4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800eff6:	f7f5 ffcc 	bl	8004f92 <__retarget_lock_acquire_recursive>
 800effa:	89ab      	ldrh	r3, [r5, #12]
 800effc:	071b      	lsls	r3, r3, #28
 800effe:	d501      	bpl.n	800f004 <_vfiprintf_r+0x34>
 800f000:	692b      	ldr	r3, [r5, #16]
 800f002:	b99b      	cbnz	r3, 800f02c <_vfiprintf_r+0x5c>
 800f004:	4629      	mov	r1, r5
 800f006:	4630      	mov	r0, r6
 800f008:	f7fc fe0e 	bl	800bc28 <__swsetup_r>
 800f00c:	b170      	cbz	r0, 800f02c <_vfiprintf_r+0x5c>
 800f00e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f010:	07dc      	lsls	r4, r3, #31
 800f012:	d504      	bpl.n	800f01e <_vfiprintf_r+0x4e>
 800f014:	f04f 30ff 	mov.w	r0, #4294967295
 800f018:	b01d      	add	sp, #116	@ 0x74
 800f01a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f01e:	89ab      	ldrh	r3, [r5, #12]
 800f020:	0598      	lsls	r0, r3, #22
 800f022:	d4f7      	bmi.n	800f014 <_vfiprintf_r+0x44>
 800f024:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f026:	f7f5 ffc0 	bl	8004faa <__retarget_lock_release_recursive>
 800f02a:	e7f3      	b.n	800f014 <_vfiprintf_r+0x44>
 800f02c:	2300      	movs	r3, #0
 800f02e:	9309      	str	r3, [sp, #36]	@ 0x24
 800f030:	2320      	movs	r3, #32
 800f032:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f036:	f8cd 800c 	str.w	r8, [sp, #12]
 800f03a:	2330      	movs	r3, #48	@ 0x30
 800f03c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800f1ec <_vfiprintf_r+0x21c>
 800f040:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f044:	f04f 0901 	mov.w	r9, #1
 800f048:	4623      	mov	r3, r4
 800f04a:	469a      	mov	sl, r3
 800f04c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f050:	b10a      	cbz	r2, 800f056 <_vfiprintf_r+0x86>
 800f052:	2a25      	cmp	r2, #37	@ 0x25
 800f054:	d1f9      	bne.n	800f04a <_vfiprintf_r+0x7a>
 800f056:	ebba 0b04 	subs.w	fp, sl, r4
 800f05a:	d00b      	beq.n	800f074 <_vfiprintf_r+0xa4>
 800f05c:	465b      	mov	r3, fp
 800f05e:	4622      	mov	r2, r4
 800f060:	4629      	mov	r1, r5
 800f062:	4630      	mov	r0, r6
 800f064:	f7ff ffa1 	bl	800efaa <__sfputs_r>
 800f068:	3001      	adds	r0, #1
 800f06a:	f000 80a7 	beq.w	800f1bc <_vfiprintf_r+0x1ec>
 800f06e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f070:	445a      	add	r2, fp
 800f072:	9209      	str	r2, [sp, #36]	@ 0x24
 800f074:	f89a 3000 	ldrb.w	r3, [sl]
 800f078:	2b00      	cmp	r3, #0
 800f07a:	f000 809f 	beq.w	800f1bc <_vfiprintf_r+0x1ec>
 800f07e:	2300      	movs	r3, #0
 800f080:	f04f 32ff 	mov.w	r2, #4294967295
 800f084:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f088:	f10a 0a01 	add.w	sl, sl, #1
 800f08c:	9304      	str	r3, [sp, #16]
 800f08e:	9307      	str	r3, [sp, #28]
 800f090:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800f094:	931a      	str	r3, [sp, #104]	@ 0x68
 800f096:	4654      	mov	r4, sl
 800f098:	2205      	movs	r2, #5
 800f09a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f09e:	4853      	ldr	r0, [pc, #332]	@ (800f1ec <_vfiprintf_r+0x21c>)
 800f0a0:	f7f1 f8a6 	bl	80001f0 <memchr>
 800f0a4:	9a04      	ldr	r2, [sp, #16]
 800f0a6:	b9d8      	cbnz	r0, 800f0e0 <_vfiprintf_r+0x110>
 800f0a8:	06d1      	lsls	r1, r2, #27
 800f0aa:	bf44      	itt	mi
 800f0ac:	2320      	movmi	r3, #32
 800f0ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f0b2:	0713      	lsls	r3, r2, #28
 800f0b4:	bf44      	itt	mi
 800f0b6:	232b      	movmi	r3, #43	@ 0x2b
 800f0b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f0bc:	f89a 3000 	ldrb.w	r3, [sl]
 800f0c0:	2b2a      	cmp	r3, #42	@ 0x2a
 800f0c2:	d015      	beq.n	800f0f0 <_vfiprintf_r+0x120>
 800f0c4:	9a07      	ldr	r2, [sp, #28]
 800f0c6:	4654      	mov	r4, sl
 800f0c8:	2000      	movs	r0, #0
 800f0ca:	f04f 0c0a 	mov.w	ip, #10
 800f0ce:	4621      	mov	r1, r4
 800f0d0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f0d4:	3b30      	subs	r3, #48	@ 0x30
 800f0d6:	2b09      	cmp	r3, #9
 800f0d8:	d94b      	bls.n	800f172 <_vfiprintf_r+0x1a2>
 800f0da:	b1b0      	cbz	r0, 800f10a <_vfiprintf_r+0x13a>
 800f0dc:	9207      	str	r2, [sp, #28]
 800f0de:	e014      	b.n	800f10a <_vfiprintf_r+0x13a>
 800f0e0:	eba0 0308 	sub.w	r3, r0, r8
 800f0e4:	fa09 f303 	lsl.w	r3, r9, r3
 800f0e8:	4313      	orrs	r3, r2
 800f0ea:	9304      	str	r3, [sp, #16]
 800f0ec:	46a2      	mov	sl, r4
 800f0ee:	e7d2      	b.n	800f096 <_vfiprintf_r+0xc6>
 800f0f0:	9b03      	ldr	r3, [sp, #12]
 800f0f2:	1d19      	adds	r1, r3, #4
 800f0f4:	681b      	ldr	r3, [r3, #0]
 800f0f6:	9103      	str	r1, [sp, #12]
 800f0f8:	2b00      	cmp	r3, #0
 800f0fa:	bfbb      	ittet	lt
 800f0fc:	425b      	neglt	r3, r3
 800f0fe:	f042 0202 	orrlt.w	r2, r2, #2
 800f102:	9307      	strge	r3, [sp, #28]
 800f104:	9307      	strlt	r3, [sp, #28]
 800f106:	bfb8      	it	lt
 800f108:	9204      	strlt	r2, [sp, #16]
 800f10a:	7823      	ldrb	r3, [r4, #0]
 800f10c:	2b2e      	cmp	r3, #46	@ 0x2e
 800f10e:	d10a      	bne.n	800f126 <_vfiprintf_r+0x156>
 800f110:	7863      	ldrb	r3, [r4, #1]
 800f112:	2b2a      	cmp	r3, #42	@ 0x2a
 800f114:	d132      	bne.n	800f17c <_vfiprintf_r+0x1ac>
 800f116:	9b03      	ldr	r3, [sp, #12]
 800f118:	1d1a      	adds	r2, r3, #4
 800f11a:	681b      	ldr	r3, [r3, #0]
 800f11c:	9203      	str	r2, [sp, #12]
 800f11e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f122:	3402      	adds	r4, #2
 800f124:	9305      	str	r3, [sp, #20]
 800f126:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800f1fc <_vfiprintf_r+0x22c>
 800f12a:	7821      	ldrb	r1, [r4, #0]
 800f12c:	2203      	movs	r2, #3
 800f12e:	4650      	mov	r0, sl
 800f130:	f7f1 f85e 	bl	80001f0 <memchr>
 800f134:	b138      	cbz	r0, 800f146 <_vfiprintf_r+0x176>
 800f136:	9b04      	ldr	r3, [sp, #16]
 800f138:	eba0 000a 	sub.w	r0, r0, sl
 800f13c:	2240      	movs	r2, #64	@ 0x40
 800f13e:	4082      	lsls	r2, r0
 800f140:	4313      	orrs	r3, r2
 800f142:	3401      	adds	r4, #1
 800f144:	9304      	str	r3, [sp, #16]
 800f146:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f14a:	4829      	ldr	r0, [pc, #164]	@ (800f1f0 <_vfiprintf_r+0x220>)
 800f14c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800f150:	2206      	movs	r2, #6
 800f152:	f7f1 f84d 	bl	80001f0 <memchr>
 800f156:	2800      	cmp	r0, #0
 800f158:	d03f      	beq.n	800f1da <_vfiprintf_r+0x20a>
 800f15a:	4b26      	ldr	r3, [pc, #152]	@ (800f1f4 <_vfiprintf_r+0x224>)
 800f15c:	bb1b      	cbnz	r3, 800f1a6 <_vfiprintf_r+0x1d6>
 800f15e:	9b03      	ldr	r3, [sp, #12]
 800f160:	3307      	adds	r3, #7
 800f162:	f023 0307 	bic.w	r3, r3, #7
 800f166:	3308      	adds	r3, #8
 800f168:	9303      	str	r3, [sp, #12]
 800f16a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f16c:	443b      	add	r3, r7
 800f16e:	9309      	str	r3, [sp, #36]	@ 0x24
 800f170:	e76a      	b.n	800f048 <_vfiprintf_r+0x78>
 800f172:	fb0c 3202 	mla	r2, ip, r2, r3
 800f176:	460c      	mov	r4, r1
 800f178:	2001      	movs	r0, #1
 800f17a:	e7a8      	b.n	800f0ce <_vfiprintf_r+0xfe>
 800f17c:	2300      	movs	r3, #0
 800f17e:	3401      	adds	r4, #1
 800f180:	9305      	str	r3, [sp, #20]
 800f182:	4619      	mov	r1, r3
 800f184:	f04f 0c0a 	mov.w	ip, #10
 800f188:	4620      	mov	r0, r4
 800f18a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f18e:	3a30      	subs	r2, #48	@ 0x30
 800f190:	2a09      	cmp	r2, #9
 800f192:	d903      	bls.n	800f19c <_vfiprintf_r+0x1cc>
 800f194:	2b00      	cmp	r3, #0
 800f196:	d0c6      	beq.n	800f126 <_vfiprintf_r+0x156>
 800f198:	9105      	str	r1, [sp, #20]
 800f19a:	e7c4      	b.n	800f126 <_vfiprintf_r+0x156>
 800f19c:	fb0c 2101 	mla	r1, ip, r1, r2
 800f1a0:	4604      	mov	r4, r0
 800f1a2:	2301      	movs	r3, #1
 800f1a4:	e7f0      	b.n	800f188 <_vfiprintf_r+0x1b8>
 800f1a6:	ab03      	add	r3, sp, #12
 800f1a8:	9300      	str	r3, [sp, #0]
 800f1aa:	462a      	mov	r2, r5
 800f1ac:	4b12      	ldr	r3, [pc, #72]	@ (800f1f8 <_vfiprintf_r+0x228>)
 800f1ae:	a904      	add	r1, sp, #16
 800f1b0:	4630      	mov	r0, r6
 800f1b2:	f7fb fd31 	bl	800ac18 <_printf_float>
 800f1b6:	4607      	mov	r7, r0
 800f1b8:	1c78      	adds	r0, r7, #1
 800f1ba:	d1d6      	bne.n	800f16a <_vfiprintf_r+0x19a>
 800f1bc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f1be:	07d9      	lsls	r1, r3, #31
 800f1c0:	d405      	bmi.n	800f1ce <_vfiprintf_r+0x1fe>
 800f1c2:	89ab      	ldrh	r3, [r5, #12]
 800f1c4:	059a      	lsls	r2, r3, #22
 800f1c6:	d402      	bmi.n	800f1ce <_vfiprintf_r+0x1fe>
 800f1c8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f1ca:	f7f5 feee 	bl	8004faa <__retarget_lock_release_recursive>
 800f1ce:	89ab      	ldrh	r3, [r5, #12]
 800f1d0:	065b      	lsls	r3, r3, #25
 800f1d2:	f53f af1f 	bmi.w	800f014 <_vfiprintf_r+0x44>
 800f1d6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f1d8:	e71e      	b.n	800f018 <_vfiprintf_r+0x48>
 800f1da:	ab03      	add	r3, sp, #12
 800f1dc:	9300      	str	r3, [sp, #0]
 800f1de:	462a      	mov	r2, r5
 800f1e0:	4b05      	ldr	r3, [pc, #20]	@ (800f1f8 <_vfiprintf_r+0x228>)
 800f1e2:	a904      	add	r1, sp, #16
 800f1e4:	4630      	mov	r0, r6
 800f1e6:	f7fb ffaf 	bl	800b148 <_printf_i>
 800f1ea:	e7e4      	b.n	800f1b6 <_vfiprintf_r+0x1e6>
 800f1ec:	08012270 	.word	0x08012270
 800f1f0:	0801227a 	.word	0x0801227a
 800f1f4:	0800ac19 	.word	0x0800ac19
 800f1f8:	0800efab 	.word	0x0800efab
 800f1fc:	08012276 	.word	0x08012276

0800f200 <_scanf_chars>:
 800f200:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f204:	4615      	mov	r5, r2
 800f206:	688a      	ldr	r2, [r1, #8]
 800f208:	4680      	mov	r8, r0
 800f20a:	460c      	mov	r4, r1
 800f20c:	b932      	cbnz	r2, 800f21c <_scanf_chars+0x1c>
 800f20e:	698a      	ldr	r2, [r1, #24]
 800f210:	2a00      	cmp	r2, #0
 800f212:	bf14      	ite	ne
 800f214:	f04f 32ff 	movne.w	r2, #4294967295
 800f218:	2201      	moveq	r2, #1
 800f21a:	608a      	str	r2, [r1, #8]
 800f21c:	6822      	ldr	r2, [r4, #0]
 800f21e:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 800f2b0 <_scanf_chars+0xb0>
 800f222:	06d1      	lsls	r1, r2, #27
 800f224:	bf5f      	itttt	pl
 800f226:	681a      	ldrpl	r2, [r3, #0]
 800f228:	1d11      	addpl	r1, r2, #4
 800f22a:	6019      	strpl	r1, [r3, #0]
 800f22c:	6816      	ldrpl	r6, [r2, #0]
 800f22e:	2700      	movs	r7, #0
 800f230:	69a0      	ldr	r0, [r4, #24]
 800f232:	b188      	cbz	r0, 800f258 <_scanf_chars+0x58>
 800f234:	2801      	cmp	r0, #1
 800f236:	d107      	bne.n	800f248 <_scanf_chars+0x48>
 800f238:	682b      	ldr	r3, [r5, #0]
 800f23a:	781a      	ldrb	r2, [r3, #0]
 800f23c:	6963      	ldr	r3, [r4, #20]
 800f23e:	5c9b      	ldrb	r3, [r3, r2]
 800f240:	b953      	cbnz	r3, 800f258 <_scanf_chars+0x58>
 800f242:	2f00      	cmp	r7, #0
 800f244:	d031      	beq.n	800f2aa <_scanf_chars+0xaa>
 800f246:	e022      	b.n	800f28e <_scanf_chars+0x8e>
 800f248:	2802      	cmp	r0, #2
 800f24a:	d120      	bne.n	800f28e <_scanf_chars+0x8e>
 800f24c:	682b      	ldr	r3, [r5, #0]
 800f24e:	781b      	ldrb	r3, [r3, #0]
 800f250:	f819 3003 	ldrb.w	r3, [r9, r3]
 800f254:	071b      	lsls	r3, r3, #28
 800f256:	d41a      	bmi.n	800f28e <_scanf_chars+0x8e>
 800f258:	6823      	ldr	r3, [r4, #0]
 800f25a:	06da      	lsls	r2, r3, #27
 800f25c:	bf5e      	ittt	pl
 800f25e:	682b      	ldrpl	r3, [r5, #0]
 800f260:	781b      	ldrbpl	r3, [r3, #0]
 800f262:	f806 3b01 	strbpl.w	r3, [r6], #1
 800f266:	682a      	ldr	r2, [r5, #0]
 800f268:	686b      	ldr	r3, [r5, #4]
 800f26a:	3201      	adds	r2, #1
 800f26c:	602a      	str	r2, [r5, #0]
 800f26e:	68a2      	ldr	r2, [r4, #8]
 800f270:	3b01      	subs	r3, #1
 800f272:	3a01      	subs	r2, #1
 800f274:	606b      	str	r3, [r5, #4]
 800f276:	3701      	adds	r7, #1
 800f278:	60a2      	str	r2, [r4, #8]
 800f27a:	b142      	cbz	r2, 800f28e <_scanf_chars+0x8e>
 800f27c:	2b00      	cmp	r3, #0
 800f27e:	dcd7      	bgt.n	800f230 <_scanf_chars+0x30>
 800f280:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800f284:	4629      	mov	r1, r5
 800f286:	4640      	mov	r0, r8
 800f288:	4798      	blx	r3
 800f28a:	2800      	cmp	r0, #0
 800f28c:	d0d0      	beq.n	800f230 <_scanf_chars+0x30>
 800f28e:	6823      	ldr	r3, [r4, #0]
 800f290:	f013 0310 	ands.w	r3, r3, #16
 800f294:	d105      	bne.n	800f2a2 <_scanf_chars+0xa2>
 800f296:	68e2      	ldr	r2, [r4, #12]
 800f298:	3201      	adds	r2, #1
 800f29a:	60e2      	str	r2, [r4, #12]
 800f29c:	69a2      	ldr	r2, [r4, #24]
 800f29e:	b102      	cbz	r2, 800f2a2 <_scanf_chars+0xa2>
 800f2a0:	7033      	strb	r3, [r6, #0]
 800f2a2:	6923      	ldr	r3, [r4, #16]
 800f2a4:	443b      	add	r3, r7
 800f2a6:	6123      	str	r3, [r4, #16]
 800f2a8:	2000      	movs	r0, #0
 800f2aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f2ae:	bf00      	nop
 800f2b0:	08011e41 	.word	0x08011e41

0800f2b4 <_scanf_i>:
 800f2b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f2b8:	4698      	mov	r8, r3
 800f2ba:	4b74      	ldr	r3, [pc, #464]	@ (800f48c <_scanf_i+0x1d8>)
 800f2bc:	460c      	mov	r4, r1
 800f2be:	4682      	mov	sl, r0
 800f2c0:	4616      	mov	r6, r2
 800f2c2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800f2c6:	b087      	sub	sp, #28
 800f2c8:	ab03      	add	r3, sp, #12
 800f2ca:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800f2ce:	4b70      	ldr	r3, [pc, #448]	@ (800f490 <_scanf_i+0x1dc>)
 800f2d0:	69a1      	ldr	r1, [r4, #24]
 800f2d2:	4a70      	ldr	r2, [pc, #448]	@ (800f494 <_scanf_i+0x1e0>)
 800f2d4:	2903      	cmp	r1, #3
 800f2d6:	bf08      	it	eq
 800f2d8:	461a      	moveq	r2, r3
 800f2da:	68a3      	ldr	r3, [r4, #8]
 800f2dc:	9201      	str	r2, [sp, #4]
 800f2de:	1e5a      	subs	r2, r3, #1
 800f2e0:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800f2e4:	bf88      	it	hi
 800f2e6:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800f2ea:	4627      	mov	r7, r4
 800f2ec:	bf82      	ittt	hi
 800f2ee:	eb03 0905 	addhi.w	r9, r3, r5
 800f2f2:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800f2f6:	60a3      	strhi	r3, [r4, #8]
 800f2f8:	f857 3b1c 	ldr.w	r3, [r7], #28
 800f2fc:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 800f300:	bf98      	it	ls
 800f302:	f04f 0900 	movls.w	r9, #0
 800f306:	6023      	str	r3, [r4, #0]
 800f308:	463d      	mov	r5, r7
 800f30a:	f04f 0b00 	mov.w	fp, #0
 800f30e:	6831      	ldr	r1, [r6, #0]
 800f310:	ab03      	add	r3, sp, #12
 800f312:	7809      	ldrb	r1, [r1, #0]
 800f314:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800f318:	2202      	movs	r2, #2
 800f31a:	f7f0 ff69 	bl	80001f0 <memchr>
 800f31e:	b328      	cbz	r0, 800f36c <_scanf_i+0xb8>
 800f320:	f1bb 0f01 	cmp.w	fp, #1
 800f324:	d159      	bne.n	800f3da <_scanf_i+0x126>
 800f326:	6862      	ldr	r2, [r4, #4]
 800f328:	b92a      	cbnz	r2, 800f336 <_scanf_i+0x82>
 800f32a:	6822      	ldr	r2, [r4, #0]
 800f32c:	2108      	movs	r1, #8
 800f32e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800f332:	6061      	str	r1, [r4, #4]
 800f334:	6022      	str	r2, [r4, #0]
 800f336:	6822      	ldr	r2, [r4, #0]
 800f338:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 800f33c:	6022      	str	r2, [r4, #0]
 800f33e:	68a2      	ldr	r2, [r4, #8]
 800f340:	1e51      	subs	r1, r2, #1
 800f342:	60a1      	str	r1, [r4, #8]
 800f344:	b192      	cbz	r2, 800f36c <_scanf_i+0xb8>
 800f346:	6832      	ldr	r2, [r6, #0]
 800f348:	1c51      	adds	r1, r2, #1
 800f34a:	6031      	str	r1, [r6, #0]
 800f34c:	7812      	ldrb	r2, [r2, #0]
 800f34e:	f805 2b01 	strb.w	r2, [r5], #1
 800f352:	6872      	ldr	r2, [r6, #4]
 800f354:	3a01      	subs	r2, #1
 800f356:	2a00      	cmp	r2, #0
 800f358:	6072      	str	r2, [r6, #4]
 800f35a:	dc07      	bgt.n	800f36c <_scanf_i+0xb8>
 800f35c:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 800f360:	4631      	mov	r1, r6
 800f362:	4650      	mov	r0, sl
 800f364:	4790      	blx	r2
 800f366:	2800      	cmp	r0, #0
 800f368:	f040 8085 	bne.w	800f476 <_scanf_i+0x1c2>
 800f36c:	f10b 0b01 	add.w	fp, fp, #1
 800f370:	f1bb 0f03 	cmp.w	fp, #3
 800f374:	d1cb      	bne.n	800f30e <_scanf_i+0x5a>
 800f376:	6863      	ldr	r3, [r4, #4]
 800f378:	b90b      	cbnz	r3, 800f37e <_scanf_i+0xca>
 800f37a:	230a      	movs	r3, #10
 800f37c:	6063      	str	r3, [r4, #4]
 800f37e:	6863      	ldr	r3, [r4, #4]
 800f380:	4945      	ldr	r1, [pc, #276]	@ (800f498 <_scanf_i+0x1e4>)
 800f382:	6960      	ldr	r0, [r4, #20]
 800f384:	1ac9      	subs	r1, r1, r3
 800f386:	f000 f9cb 	bl	800f720 <__sccl>
 800f38a:	f04f 0b00 	mov.w	fp, #0
 800f38e:	68a3      	ldr	r3, [r4, #8]
 800f390:	6822      	ldr	r2, [r4, #0]
 800f392:	2b00      	cmp	r3, #0
 800f394:	d03d      	beq.n	800f412 <_scanf_i+0x15e>
 800f396:	6831      	ldr	r1, [r6, #0]
 800f398:	6960      	ldr	r0, [r4, #20]
 800f39a:	f891 c000 	ldrb.w	ip, [r1]
 800f39e:	f810 000c 	ldrb.w	r0, [r0, ip]
 800f3a2:	2800      	cmp	r0, #0
 800f3a4:	d035      	beq.n	800f412 <_scanf_i+0x15e>
 800f3a6:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 800f3aa:	d124      	bne.n	800f3f6 <_scanf_i+0x142>
 800f3ac:	0510      	lsls	r0, r2, #20
 800f3ae:	d522      	bpl.n	800f3f6 <_scanf_i+0x142>
 800f3b0:	f10b 0b01 	add.w	fp, fp, #1
 800f3b4:	f1b9 0f00 	cmp.w	r9, #0
 800f3b8:	d003      	beq.n	800f3c2 <_scanf_i+0x10e>
 800f3ba:	3301      	adds	r3, #1
 800f3bc:	f109 39ff 	add.w	r9, r9, #4294967295
 800f3c0:	60a3      	str	r3, [r4, #8]
 800f3c2:	6873      	ldr	r3, [r6, #4]
 800f3c4:	3b01      	subs	r3, #1
 800f3c6:	2b00      	cmp	r3, #0
 800f3c8:	6073      	str	r3, [r6, #4]
 800f3ca:	dd1b      	ble.n	800f404 <_scanf_i+0x150>
 800f3cc:	6833      	ldr	r3, [r6, #0]
 800f3ce:	3301      	adds	r3, #1
 800f3d0:	6033      	str	r3, [r6, #0]
 800f3d2:	68a3      	ldr	r3, [r4, #8]
 800f3d4:	3b01      	subs	r3, #1
 800f3d6:	60a3      	str	r3, [r4, #8]
 800f3d8:	e7d9      	b.n	800f38e <_scanf_i+0xda>
 800f3da:	f1bb 0f02 	cmp.w	fp, #2
 800f3de:	d1ae      	bne.n	800f33e <_scanf_i+0x8a>
 800f3e0:	6822      	ldr	r2, [r4, #0]
 800f3e2:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 800f3e6:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 800f3ea:	d1bf      	bne.n	800f36c <_scanf_i+0xb8>
 800f3ec:	2110      	movs	r1, #16
 800f3ee:	6061      	str	r1, [r4, #4]
 800f3f0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800f3f4:	e7a2      	b.n	800f33c <_scanf_i+0x88>
 800f3f6:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 800f3fa:	6022      	str	r2, [r4, #0]
 800f3fc:	780b      	ldrb	r3, [r1, #0]
 800f3fe:	f805 3b01 	strb.w	r3, [r5], #1
 800f402:	e7de      	b.n	800f3c2 <_scanf_i+0x10e>
 800f404:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800f408:	4631      	mov	r1, r6
 800f40a:	4650      	mov	r0, sl
 800f40c:	4798      	blx	r3
 800f40e:	2800      	cmp	r0, #0
 800f410:	d0df      	beq.n	800f3d2 <_scanf_i+0x11e>
 800f412:	6823      	ldr	r3, [r4, #0]
 800f414:	05d9      	lsls	r1, r3, #23
 800f416:	d50d      	bpl.n	800f434 <_scanf_i+0x180>
 800f418:	42bd      	cmp	r5, r7
 800f41a:	d909      	bls.n	800f430 <_scanf_i+0x17c>
 800f41c:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800f420:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f424:	4632      	mov	r2, r6
 800f426:	4650      	mov	r0, sl
 800f428:	4798      	blx	r3
 800f42a:	f105 39ff 	add.w	r9, r5, #4294967295
 800f42e:	464d      	mov	r5, r9
 800f430:	42bd      	cmp	r5, r7
 800f432:	d028      	beq.n	800f486 <_scanf_i+0x1d2>
 800f434:	6822      	ldr	r2, [r4, #0]
 800f436:	f012 0210 	ands.w	r2, r2, #16
 800f43a:	d113      	bne.n	800f464 <_scanf_i+0x1b0>
 800f43c:	702a      	strb	r2, [r5, #0]
 800f43e:	6863      	ldr	r3, [r4, #4]
 800f440:	9e01      	ldr	r6, [sp, #4]
 800f442:	4639      	mov	r1, r7
 800f444:	4650      	mov	r0, sl
 800f446:	47b0      	blx	r6
 800f448:	f8d8 3000 	ldr.w	r3, [r8]
 800f44c:	6821      	ldr	r1, [r4, #0]
 800f44e:	1d1a      	adds	r2, r3, #4
 800f450:	f8c8 2000 	str.w	r2, [r8]
 800f454:	f011 0f20 	tst.w	r1, #32
 800f458:	681b      	ldr	r3, [r3, #0]
 800f45a:	d00f      	beq.n	800f47c <_scanf_i+0x1c8>
 800f45c:	6018      	str	r0, [r3, #0]
 800f45e:	68e3      	ldr	r3, [r4, #12]
 800f460:	3301      	adds	r3, #1
 800f462:	60e3      	str	r3, [r4, #12]
 800f464:	6923      	ldr	r3, [r4, #16]
 800f466:	1bed      	subs	r5, r5, r7
 800f468:	445d      	add	r5, fp
 800f46a:	442b      	add	r3, r5
 800f46c:	6123      	str	r3, [r4, #16]
 800f46e:	2000      	movs	r0, #0
 800f470:	b007      	add	sp, #28
 800f472:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f476:	f04f 0b00 	mov.w	fp, #0
 800f47a:	e7ca      	b.n	800f412 <_scanf_i+0x15e>
 800f47c:	07ca      	lsls	r2, r1, #31
 800f47e:	bf4c      	ite	mi
 800f480:	8018      	strhmi	r0, [r3, #0]
 800f482:	6018      	strpl	r0, [r3, #0]
 800f484:	e7eb      	b.n	800f45e <_scanf_i+0x1aa>
 800f486:	2001      	movs	r0, #1
 800f488:	e7f2      	b.n	800f470 <_scanf_i+0x1bc>
 800f48a:	bf00      	nop
 800f48c:	0800fcf4 	.word	0x0800fcf4
 800f490:	0800aac1 	.word	0x0800aac1
 800f494:	0800e905 	.word	0x0800e905
 800f498:	08012291 	.word	0x08012291

0800f49c <__sflush_r>:
 800f49c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800f4a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f4a4:	0716      	lsls	r6, r2, #28
 800f4a6:	4605      	mov	r5, r0
 800f4a8:	460c      	mov	r4, r1
 800f4aa:	d454      	bmi.n	800f556 <__sflush_r+0xba>
 800f4ac:	684b      	ldr	r3, [r1, #4]
 800f4ae:	2b00      	cmp	r3, #0
 800f4b0:	dc02      	bgt.n	800f4b8 <__sflush_r+0x1c>
 800f4b2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800f4b4:	2b00      	cmp	r3, #0
 800f4b6:	dd48      	ble.n	800f54a <__sflush_r+0xae>
 800f4b8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f4ba:	2e00      	cmp	r6, #0
 800f4bc:	d045      	beq.n	800f54a <__sflush_r+0xae>
 800f4be:	2300      	movs	r3, #0
 800f4c0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800f4c4:	682f      	ldr	r7, [r5, #0]
 800f4c6:	6a21      	ldr	r1, [r4, #32]
 800f4c8:	602b      	str	r3, [r5, #0]
 800f4ca:	d030      	beq.n	800f52e <__sflush_r+0x92>
 800f4cc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800f4ce:	89a3      	ldrh	r3, [r4, #12]
 800f4d0:	0759      	lsls	r1, r3, #29
 800f4d2:	d505      	bpl.n	800f4e0 <__sflush_r+0x44>
 800f4d4:	6863      	ldr	r3, [r4, #4]
 800f4d6:	1ad2      	subs	r2, r2, r3
 800f4d8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800f4da:	b10b      	cbz	r3, 800f4e0 <__sflush_r+0x44>
 800f4dc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800f4de:	1ad2      	subs	r2, r2, r3
 800f4e0:	2300      	movs	r3, #0
 800f4e2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f4e4:	6a21      	ldr	r1, [r4, #32]
 800f4e6:	4628      	mov	r0, r5
 800f4e8:	47b0      	blx	r6
 800f4ea:	1c43      	adds	r3, r0, #1
 800f4ec:	89a3      	ldrh	r3, [r4, #12]
 800f4ee:	d106      	bne.n	800f4fe <__sflush_r+0x62>
 800f4f0:	6829      	ldr	r1, [r5, #0]
 800f4f2:	291d      	cmp	r1, #29
 800f4f4:	d82b      	bhi.n	800f54e <__sflush_r+0xb2>
 800f4f6:	4a2a      	ldr	r2, [pc, #168]	@ (800f5a0 <__sflush_r+0x104>)
 800f4f8:	410a      	asrs	r2, r1
 800f4fa:	07d6      	lsls	r6, r2, #31
 800f4fc:	d427      	bmi.n	800f54e <__sflush_r+0xb2>
 800f4fe:	2200      	movs	r2, #0
 800f500:	6062      	str	r2, [r4, #4]
 800f502:	04d9      	lsls	r1, r3, #19
 800f504:	6922      	ldr	r2, [r4, #16]
 800f506:	6022      	str	r2, [r4, #0]
 800f508:	d504      	bpl.n	800f514 <__sflush_r+0x78>
 800f50a:	1c42      	adds	r2, r0, #1
 800f50c:	d101      	bne.n	800f512 <__sflush_r+0x76>
 800f50e:	682b      	ldr	r3, [r5, #0]
 800f510:	b903      	cbnz	r3, 800f514 <__sflush_r+0x78>
 800f512:	6560      	str	r0, [r4, #84]	@ 0x54
 800f514:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f516:	602f      	str	r7, [r5, #0]
 800f518:	b1b9      	cbz	r1, 800f54a <__sflush_r+0xae>
 800f51a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f51e:	4299      	cmp	r1, r3
 800f520:	d002      	beq.n	800f528 <__sflush_r+0x8c>
 800f522:	4628      	mov	r0, r5
 800f524:	f7fe f8f4 	bl	800d710 <_free_r>
 800f528:	2300      	movs	r3, #0
 800f52a:	6363      	str	r3, [r4, #52]	@ 0x34
 800f52c:	e00d      	b.n	800f54a <__sflush_r+0xae>
 800f52e:	2301      	movs	r3, #1
 800f530:	4628      	mov	r0, r5
 800f532:	47b0      	blx	r6
 800f534:	4602      	mov	r2, r0
 800f536:	1c50      	adds	r0, r2, #1
 800f538:	d1c9      	bne.n	800f4ce <__sflush_r+0x32>
 800f53a:	682b      	ldr	r3, [r5, #0]
 800f53c:	2b00      	cmp	r3, #0
 800f53e:	d0c6      	beq.n	800f4ce <__sflush_r+0x32>
 800f540:	2b1d      	cmp	r3, #29
 800f542:	d001      	beq.n	800f548 <__sflush_r+0xac>
 800f544:	2b16      	cmp	r3, #22
 800f546:	d11e      	bne.n	800f586 <__sflush_r+0xea>
 800f548:	602f      	str	r7, [r5, #0]
 800f54a:	2000      	movs	r0, #0
 800f54c:	e022      	b.n	800f594 <__sflush_r+0xf8>
 800f54e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f552:	b21b      	sxth	r3, r3
 800f554:	e01b      	b.n	800f58e <__sflush_r+0xf2>
 800f556:	690f      	ldr	r7, [r1, #16]
 800f558:	2f00      	cmp	r7, #0
 800f55a:	d0f6      	beq.n	800f54a <__sflush_r+0xae>
 800f55c:	0793      	lsls	r3, r2, #30
 800f55e:	680e      	ldr	r6, [r1, #0]
 800f560:	bf08      	it	eq
 800f562:	694b      	ldreq	r3, [r1, #20]
 800f564:	600f      	str	r7, [r1, #0]
 800f566:	bf18      	it	ne
 800f568:	2300      	movne	r3, #0
 800f56a:	eba6 0807 	sub.w	r8, r6, r7
 800f56e:	608b      	str	r3, [r1, #8]
 800f570:	f1b8 0f00 	cmp.w	r8, #0
 800f574:	dde9      	ble.n	800f54a <__sflush_r+0xae>
 800f576:	6a21      	ldr	r1, [r4, #32]
 800f578:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800f57a:	4643      	mov	r3, r8
 800f57c:	463a      	mov	r2, r7
 800f57e:	4628      	mov	r0, r5
 800f580:	47b0      	blx	r6
 800f582:	2800      	cmp	r0, #0
 800f584:	dc08      	bgt.n	800f598 <__sflush_r+0xfc>
 800f586:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f58a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f58e:	81a3      	strh	r3, [r4, #12]
 800f590:	f04f 30ff 	mov.w	r0, #4294967295
 800f594:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f598:	4407      	add	r7, r0
 800f59a:	eba8 0800 	sub.w	r8, r8, r0
 800f59e:	e7e7      	b.n	800f570 <__sflush_r+0xd4>
 800f5a0:	dfbffffe 	.word	0xdfbffffe

0800f5a4 <_fflush_r>:
 800f5a4:	b538      	push	{r3, r4, r5, lr}
 800f5a6:	690b      	ldr	r3, [r1, #16]
 800f5a8:	4605      	mov	r5, r0
 800f5aa:	460c      	mov	r4, r1
 800f5ac:	b913      	cbnz	r3, 800f5b4 <_fflush_r+0x10>
 800f5ae:	2500      	movs	r5, #0
 800f5b0:	4628      	mov	r0, r5
 800f5b2:	bd38      	pop	{r3, r4, r5, pc}
 800f5b4:	b118      	cbz	r0, 800f5be <_fflush_r+0x1a>
 800f5b6:	6a03      	ldr	r3, [r0, #32]
 800f5b8:	b90b      	cbnz	r3, 800f5be <_fflush_r+0x1a>
 800f5ba:	f7fc f985 	bl	800b8c8 <__sinit>
 800f5be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f5c2:	2b00      	cmp	r3, #0
 800f5c4:	d0f3      	beq.n	800f5ae <_fflush_r+0xa>
 800f5c6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800f5c8:	07d0      	lsls	r0, r2, #31
 800f5ca:	d404      	bmi.n	800f5d6 <_fflush_r+0x32>
 800f5cc:	0599      	lsls	r1, r3, #22
 800f5ce:	d402      	bmi.n	800f5d6 <_fflush_r+0x32>
 800f5d0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f5d2:	f7f5 fcde 	bl	8004f92 <__retarget_lock_acquire_recursive>
 800f5d6:	4628      	mov	r0, r5
 800f5d8:	4621      	mov	r1, r4
 800f5da:	f7ff ff5f 	bl	800f49c <__sflush_r>
 800f5de:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f5e0:	07da      	lsls	r2, r3, #31
 800f5e2:	4605      	mov	r5, r0
 800f5e4:	d4e4      	bmi.n	800f5b0 <_fflush_r+0xc>
 800f5e6:	89a3      	ldrh	r3, [r4, #12]
 800f5e8:	059b      	lsls	r3, r3, #22
 800f5ea:	d4e1      	bmi.n	800f5b0 <_fflush_r+0xc>
 800f5ec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f5ee:	f7f5 fcdc 	bl	8004faa <__retarget_lock_release_recursive>
 800f5f2:	e7dd      	b.n	800f5b0 <_fflush_r+0xc>

0800f5f4 <__swhatbuf_r>:
 800f5f4:	b570      	push	{r4, r5, r6, lr}
 800f5f6:	460c      	mov	r4, r1
 800f5f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f5fc:	2900      	cmp	r1, #0
 800f5fe:	b096      	sub	sp, #88	@ 0x58
 800f600:	4615      	mov	r5, r2
 800f602:	461e      	mov	r6, r3
 800f604:	da0d      	bge.n	800f622 <__swhatbuf_r+0x2e>
 800f606:	89a3      	ldrh	r3, [r4, #12]
 800f608:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800f60c:	f04f 0100 	mov.w	r1, #0
 800f610:	bf14      	ite	ne
 800f612:	2340      	movne	r3, #64	@ 0x40
 800f614:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800f618:	2000      	movs	r0, #0
 800f61a:	6031      	str	r1, [r6, #0]
 800f61c:	602b      	str	r3, [r5, #0]
 800f61e:	b016      	add	sp, #88	@ 0x58
 800f620:	bd70      	pop	{r4, r5, r6, pc}
 800f622:	466a      	mov	r2, sp
 800f624:	f000 f90e 	bl	800f844 <_fstat_r>
 800f628:	2800      	cmp	r0, #0
 800f62a:	dbec      	blt.n	800f606 <__swhatbuf_r+0x12>
 800f62c:	9901      	ldr	r1, [sp, #4]
 800f62e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800f632:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800f636:	4259      	negs	r1, r3
 800f638:	4159      	adcs	r1, r3
 800f63a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f63e:	e7eb      	b.n	800f618 <__swhatbuf_r+0x24>

0800f640 <__smakebuf_r>:
 800f640:	898b      	ldrh	r3, [r1, #12]
 800f642:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f644:	079d      	lsls	r5, r3, #30
 800f646:	4606      	mov	r6, r0
 800f648:	460c      	mov	r4, r1
 800f64a:	d507      	bpl.n	800f65c <__smakebuf_r+0x1c>
 800f64c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800f650:	6023      	str	r3, [r4, #0]
 800f652:	6123      	str	r3, [r4, #16]
 800f654:	2301      	movs	r3, #1
 800f656:	6163      	str	r3, [r4, #20]
 800f658:	b003      	add	sp, #12
 800f65a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f65c:	ab01      	add	r3, sp, #4
 800f65e:	466a      	mov	r2, sp
 800f660:	f7ff ffc8 	bl	800f5f4 <__swhatbuf_r>
 800f664:	9f00      	ldr	r7, [sp, #0]
 800f666:	4605      	mov	r5, r0
 800f668:	4639      	mov	r1, r7
 800f66a:	4630      	mov	r0, r6
 800f66c:	f7fa fb0c 	bl	8009c88 <_malloc_r>
 800f670:	b948      	cbnz	r0, 800f686 <__smakebuf_r+0x46>
 800f672:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f676:	059a      	lsls	r2, r3, #22
 800f678:	d4ee      	bmi.n	800f658 <__smakebuf_r+0x18>
 800f67a:	f023 0303 	bic.w	r3, r3, #3
 800f67e:	f043 0302 	orr.w	r3, r3, #2
 800f682:	81a3      	strh	r3, [r4, #12]
 800f684:	e7e2      	b.n	800f64c <__smakebuf_r+0xc>
 800f686:	89a3      	ldrh	r3, [r4, #12]
 800f688:	6020      	str	r0, [r4, #0]
 800f68a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f68e:	81a3      	strh	r3, [r4, #12]
 800f690:	9b01      	ldr	r3, [sp, #4]
 800f692:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800f696:	b15b      	cbz	r3, 800f6b0 <__smakebuf_r+0x70>
 800f698:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f69c:	4630      	mov	r0, r6
 800f69e:	f000 f8e3 	bl	800f868 <_isatty_r>
 800f6a2:	b128      	cbz	r0, 800f6b0 <__smakebuf_r+0x70>
 800f6a4:	89a3      	ldrh	r3, [r4, #12]
 800f6a6:	f023 0303 	bic.w	r3, r3, #3
 800f6aa:	f043 0301 	orr.w	r3, r3, #1
 800f6ae:	81a3      	strh	r3, [r4, #12]
 800f6b0:	89a3      	ldrh	r3, [r4, #12]
 800f6b2:	431d      	orrs	r5, r3
 800f6b4:	81a5      	strh	r5, [r4, #12]
 800f6b6:	e7cf      	b.n	800f658 <__smakebuf_r+0x18>

0800f6b8 <_putc_r>:
 800f6b8:	b570      	push	{r4, r5, r6, lr}
 800f6ba:	460d      	mov	r5, r1
 800f6bc:	4614      	mov	r4, r2
 800f6be:	4606      	mov	r6, r0
 800f6c0:	b118      	cbz	r0, 800f6ca <_putc_r+0x12>
 800f6c2:	6a03      	ldr	r3, [r0, #32]
 800f6c4:	b90b      	cbnz	r3, 800f6ca <_putc_r+0x12>
 800f6c6:	f7fc f8ff 	bl	800b8c8 <__sinit>
 800f6ca:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f6cc:	07d8      	lsls	r0, r3, #31
 800f6ce:	d405      	bmi.n	800f6dc <_putc_r+0x24>
 800f6d0:	89a3      	ldrh	r3, [r4, #12]
 800f6d2:	0599      	lsls	r1, r3, #22
 800f6d4:	d402      	bmi.n	800f6dc <_putc_r+0x24>
 800f6d6:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f6d8:	f7f5 fc5b 	bl	8004f92 <__retarget_lock_acquire_recursive>
 800f6dc:	68a3      	ldr	r3, [r4, #8]
 800f6de:	3b01      	subs	r3, #1
 800f6e0:	2b00      	cmp	r3, #0
 800f6e2:	60a3      	str	r3, [r4, #8]
 800f6e4:	da05      	bge.n	800f6f2 <_putc_r+0x3a>
 800f6e6:	69a2      	ldr	r2, [r4, #24]
 800f6e8:	4293      	cmp	r3, r2
 800f6ea:	db12      	blt.n	800f712 <_putc_r+0x5a>
 800f6ec:	b2eb      	uxtb	r3, r5
 800f6ee:	2b0a      	cmp	r3, #10
 800f6f0:	d00f      	beq.n	800f712 <_putc_r+0x5a>
 800f6f2:	6823      	ldr	r3, [r4, #0]
 800f6f4:	1c5a      	adds	r2, r3, #1
 800f6f6:	6022      	str	r2, [r4, #0]
 800f6f8:	701d      	strb	r5, [r3, #0]
 800f6fa:	b2ed      	uxtb	r5, r5
 800f6fc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f6fe:	07da      	lsls	r2, r3, #31
 800f700:	d405      	bmi.n	800f70e <_putc_r+0x56>
 800f702:	89a3      	ldrh	r3, [r4, #12]
 800f704:	059b      	lsls	r3, r3, #22
 800f706:	d402      	bmi.n	800f70e <_putc_r+0x56>
 800f708:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f70a:	f7f5 fc4e 	bl	8004faa <__retarget_lock_release_recursive>
 800f70e:	4628      	mov	r0, r5
 800f710:	bd70      	pop	{r4, r5, r6, pc}
 800f712:	4629      	mov	r1, r5
 800f714:	4622      	mov	r2, r4
 800f716:	4630      	mov	r0, r6
 800f718:	f7fc fa47 	bl	800bbaa <__swbuf_r>
 800f71c:	4605      	mov	r5, r0
 800f71e:	e7ed      	b.n	800f6fc <_putc_r+0x44>

0800f720 <__sccl>:
 800f720:	b570      	push	{r4, r5, r6, lr}
 800f722:	780b      	ldrb	r3, [r1, #0]
 800f724:	4604      	mov	r4, r0
 800f726:	2b5e      	cmp	r3, #94	@ 0x5e
 800f728:	bf0b      	itete	eq
 800f72a:	784b      	ldrbeq	r3, [r1, #1]
 800f72c:	1c4a      	addne	r2, r1, #1
 800f72e:	1c8a      	addeq	r2, r1, #2
 800f730:	2100      	movne	r1, #0
 800f732:	bf08      	it	eq
 800f734:	2101      	moveq	r1, #1
 800f736:	3801      	subs	r0, #1
 800f738:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 800f73c:	f800 1f01 	strb.w	r1, [r0, #1]!
 800f740:	42a8      	cmp	r0, r5
 800f742:	d1fb      	bne.n	800f73c <__sccl+0x1c>
 800f744:	b90b      	cbnz	r3, 800f74a <__sccl+0x2a>
 800f746:	1e50      	subs	r0, r2, #1
 800f748:	bd70      	pop	{r4, r5, r6, pc}
 800f74a:	f081 0101 	eor.w	r1, r1, #1
 800f74e:	54e1      	strb	r1, [r4, r3]
 800f750:	4610      	mov	r0, r2
 800f752:	4602      	mov	r2, r0
 800f754:	f812 5b01 	ldrb.w	r5, [r2], #1
 800f758:	2d2d      	cmp	r5, #45	@ 0x2d
 800f75a:	d005      	beq.n	800f768 <__sccl+0x48>
 800f75c:	2d5d      	cmp	r5, #93	@ 0x5d
 800f75e:	d016      	beq.n	800f78e <__sccl+0x6e>
 800f760:	2d00      	cmp	r5, #0
 800f762:	d0f1      	beq.n	800f748 <__sccl+0x28>
 800f764:	462b      	mov	r3, r5
 800f766:	e7f2      	b.n	800f74e <__sccl+0x2e>
 800f768:	7846      	ldrb	r6, [r0, #1]
 800f76a:	2e5d      	cmp	r6, #93	@ 0x5d
 800f76c:	d0fa      	beq.n	800f764 <__sccl+0x44>
 800f76e:	42b3      	cmp	r3, r6
 800f770:	dcf8      	bgt.n	800f764 <__sccl+0x44>
 800f772:	3002      	adds	r0, #2
 800f774:	461a      	mov	r2, r3
 800f776:	3201      	adds	r2, #1
 800f778:	4296      	cmp	r6, r2
 800f77a:	54a1      	strb	r1, [r4, r2]
 800f77c:	dcfb      	bgt.n	800f776 <__sccl+0x56>
 800f77e:	1af2      	subs	r2, r6, r3
 800f780:	3a01      	subs	r2, #1
 800f782:	1c5d      	adds	r5, r3, #1
 800f784:	42b3      	cmp	r3, r6
 800f786:	bfa8      	it	ge
 800f788:	2200      	movge	r2, #0
 800f78a:	18ab      	adds	r3, r5, r2
 800f78c:	e7e1      	b.n	800f752 <__sccl+0x32>
 800f78e:	4610      	mov	r0, r2
 800f790:	e7da      	b.n	800f748 <__sccl+0x28>

0800f792 <__submore>:
 800f792:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f796:	460c      	mov	r4, r1
 800f798:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800f79a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f79e:	4299      	cmp	r1, r3
 800f7a0:	d11d      	bne.n	800f7de <__submore+0x4c>
 800f7a2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800f7a6:	f7fa fa6f 	bl	8009c88 <_malloc_r>
 800f7aa:	b918      	cbnz	r0, 800f7b4 <__submore+0x22>
 800f7ac:	f04f 30ff 	mov.w	r0, #4294967295
 800f7b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f7b4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f7b8:	63a3      	str	r3, [r4, #56]	@ 0x38
 800f7ba:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 800f7be:	6360      	str	r0, [r4, #52]	@ 0x34
 800f7c0:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 800f7c4:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800f7c8:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 800f7cc:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800f7d0:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 800f7d4:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 800f7d8:	6020      	str	r0, [r4, #0]
 800f7da:	2000      	movs	r0, #0
 800f7dc:	e7e8      	b.n	800f7b0 <__submore+0x1e>
 800f7de:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 800f7e0:	0077      	lsls	r7, r6, #1
 800f7e2:	463a      	mov	r2, r7
 800f7e4:	f000 f88e 	bl	800f904 <_realloc_r>
 800f7e8:	4605      	mov	r5, r0
 800f7ea:	2800      	cmp	r0, #0
 800f7ec:	d0de      	beq.n	800f7ac <__submore+0x1a>
 800f7ee:	eb00 0806 	add.w	r8, r0, r6
 800f7f2:	4601      	mov	r1, r0
 800f7f4:	4632      	mov	r2, r6
 800f7f6:	4640      	mov	r0, r8
 800f7f8:	f7fd f916 	bl	800ca28 <memcpy>
 800f7fc:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 800f800:	f8c4 8000 	str.w	r8, [r4]
 800f804:	e7e9      	b.n	800f7da <__submore+0x48>

0800f806 <memmove>:
 800f806:	4288      	cmp	r0, r1
 800f808:	b510      	push	{r4, lr}
 800f80a:	eb01 0402 	add.w	r4, r1, r2
 800f80e:	d902      	bls.n	800f816 <memmove+0x10>
 800f810:	4284      	cmp	r4, r0
 800f812:	4623      	mov	r3, r4
 800f814:	d807      	bhi.n	800f826 <memmove+0x20>
 800f816:	1e43      	subs	r3, r0, #1
 800f818:	42a1      	cmp	r1, r4
 800f81a:	d008      	beq.n	800f82e <memmove+0x28>
 800f81c:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f820:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f824:	e7f8      	b.n	800f818 <memmove+0x12>
 800f826:	4402      	add	r2, r0
 800f828:	4601      	mov	r1, r0
 800f82a:	428a      	cmp	r2, r1
 800f82c:	d100      	bne.n	800f830 <memmove+0x2a>
 800f82e:	bd10      	pop	{r4, pc}
 800f830:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f834:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f838:	e7f7      	b.n	800f82a <memmove+0x24>
	...

0800f83c <__gettzinfo>:
 800f83c:	4800      	ldr	r0, [pc, #0]	@ (800f840 <__gettzinfo+0x4>)
 800f83e:	4770      	bx	lr
 800f840:	200001f8 	.word	0x200001f8

0800f844 <_fstat_r>:
 800f844:	b538      	push	{r3, r4, r5, lr}
 800f846:	4d07      	ldr	r5, [pc, #28]	@ (800f864 <_fstat_r+0x20>)
 800f848:	2300      	movs	r3, #0
 800f84a:	4604      	mov	r4, r0
 800f84c:	4608      	mov	r0, r1
 800f84e:	4611      	mov	r1, r2
 800f850:	602b      	str	r3, [r5, #0]
 800f852:	f7f5 fae4 	bl	8004e1e <_fstat>
 800f856:	1c43      	adds	r3, r0, #1
 800f858:	d102      	bne.n	800f860 <_fstat_r+0x1c>
 800f85a:	682b      	ldr	r3, [r5, #0]
 800f85c:	b103      	cbz	r3, 800f860 <_fstat_r+0x1c>
 800f85e:	6023      	str	r3, [r4, #0]
 800f860:	bd38      	pop	{r3, r4, r5, pc}
 800f862:	bf00      	nop
 800f864:	20009224 	.word	0x20009224

0800f868 <_isatty_r>:
 800f868:	b538      	push	{r3, r4, r5, lr}
 800f86a:	4d06      	ldr	r5, [pc, #24]	@ (800f884 <_isatty_r+0x1c>)
 800f86c:	2300      	movs	r3, #0
 800f86e:	4604      	mov	r4, r0
 800f870:	4608      	mov	r0, r1
 800f872:	602b      	str	r3, [r5, #0]
 800f874:	f7f5 fad8 	bl	8004e28 <_isatty>
 800f878:	1c43      	adds	r3, r0, #1
 800f87a:	d102      	bne.n	800f882 <_isatty_r+0x1a>
 800f87c:	682b      	ldr	r3, [r5, #0]
 800f87e:	b103      	cbz	r3, 800f882 <_isatty_r+0x1a>
 800f880:	6023      	str	r3, [r4, #0]
 800f882:	bd38      	pop	{r3, r4, r5, pc}
 800f884:	20009224 	.word	0x20009224

0800f888 <__assert_func>:
 800f888:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f88a:	4614      	mov	r4, r2
 800f88c:	461a      	mov	r2, r3
 800f88e:	4b09      	ldr	r3, [pc, #36]	@ (800f8b4 <__assert_func+0x2c>)
 800f890:	681b      	ldr	r3, [r3, #0]
 800f892:	4605      	mov	r5, r0
 800f894:	68d8      	ldr	r0, [r3, #12]
 800f896:	b954      	cbnz	r4, 800f8ae <__assert_func+0x26>
 800f898:	4b07      	ldr	r3, [pc, #28]	@ (800f8b8 <__assert_func+0x30>)
 800f89a:	461c      	mov	r4, r3
 800f89c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f8a0:	9100      	str	r1, [sp, #0]
 800f8a2:	462b      	mov	r3, r5
 800f8a4:	4905      	ldr	r1, [pc, #20]	@ (800f8bc <__assert_func+0x34>)
 800f8a6:	f000 f85b 	bl	800f960 <fiprintf>
 800f8aa:	f000 f86b 	bl	800f984 <abort>
 800f8ae:	4b04      	ldr	r3, [pc, #16]	@ (800f8c0 <__assert_func+0x38>)
 800f8b0:	e7f4      	b.n	800f89c <__assert_func+0x14>
 800f8b2:	bf00      	nop
 800f8b4:	200001a4 	.word	0x200001a4
 800f8b8:	08010fa3 	.word	0x08010fa3
 800f8bc:	08012309 	.word	0x08012309
 800f8c0:	080122fc 	.word	0x080122fc

0800f8c4 <_calloc_r>:
 800f8c4:	b570      	push	{r4, r5, r6, lr}
 800f8c6:	fba1 5402 	umull	r5, r4, r1, r2
 800f8ca:	b93c      	cbnz	r4, 800f8dc <_calloc_r+0x18>
 800f8cc:	4629      	mov	r1, r5
 800f8ce:	f7fa f9db 	bl	8009c88 <_malloc_r>
 800f8d2:	4606      	mov	r6, r0
 800f8d4:	b928      	cbnz	r0, 800f8e2 <_calloc_r+0x1e>
 800f8d6:	2600      	movs	r6, #0
 800f8d8:	4630      	mov	r0, r6
 800f8da:	bd70      	pop	{r4, r5, r6, pc}
 800f8dc:	220c      	movs	r2, #12
 800f8de:	6002      	str	r2, [r0, #0]
 800f8e0:	e7f9      	b.n	800f8d6 <_calloc_r+0x12>
 800f8e2:	462a      	mov	r2, r5
 800f8e4:	4621      	mov	r1, r4
 800f8e6:	f7fc f9f5 	bl	800bcd4 <memset>
 800f8ea:	e7f5      	b.n	800f8d8 <_calloc_r+0x14>

0800f8ec <__env_lock>:
 800f8ec:	4801      	ldr	r0, [pc, #4]	@ (800f8f4 <__env_lock+0x8>)
 800f8ee:	f7f5 bb50 	b.w	8004f92 <__retarget_lock_acquire_recursive>
 800f8f2:	bf00      	nop
 800f8f4:	2000395c 	.word	0x2000395c

0800f8f8 <__env_unlock>:
 800f8f8:	4801      	ldr	r0, [pc, #4]	@ (800f900 <__env_unlock+0x8>)
 800f8fa:	f7f5 bb56 	b.w	8004faa <__retarget_lock_release_recursive>
 800f8fe:	bf00      	nop
 800f900:	2000395c 	.word	0x2000395c

0800f904 <_realloc_r>:
 800f904:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f908:	4680      	mov	r8, r0
 800f90a:	4615      	mov	r5, r2
 800f90c:	460c      	mov	r4, r1
 800f90e:	b921      	cbnz	r1, 800f91a <_realloc_r+0x16>
 800f910:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f914:	4611      	mov	r1, r2
 800f916:	f7fa b9b7 	b.w	8009c88 <_malloc_r>
 800f91a:	b92a      	cbnz	r2, 800f928 <_realloc_r+0x24>
 800f91c:	f7fd fef8 	bl	800d710 <_free_r>
 800f920:	2400      	movs	r4, #0
 800f922:	4620      	mov	r0, r4
 800f924:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f928:	f000 f833 	bl	800f992 <_malloc_usable_size_r>
 800f92c:	4285      	cmp	r5, r0
 800f92e:	4606      	mov	r6, r0
 800f930:	d802      	bhi.n	800f938 <_realloc_r+0x34>
 800f932:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800f936:	d8f4      	bhi.n	800f922 <_realloc_r+0x1e>
 800f938:	4629      	mov	r1, r5
 800f93a:	4640      	mov	r0, r8
 800f93c:	f7fa f9a4 	bl	8009c88 <_malloc_r>
 800f940:	4607      	mov	r7, r0
 800f942:	2800      	cmp	r0, #0
 800f944:	d0ec      	beq.n	800f920 <_realloc_r+0x1c>
 800f946:	42b5      	cmp	r5, r6
 800f948:	462a      	mov	r2, r5
 800f94a:	4621      	mov	r1, r4
 800f94c:	bf28      	it	cs
 800f94e:	4632      	movcs	r2, r6
 800f950:	f7fd f86a 	bl	800ca28 <memcpy>
 800f954:	4621      	mov	r1, r4
 800f956:	4640      	mov	r0, r8
 800f958:	f7fd feda 	bl	800d710 <_free_r>
 800f95c:	463c      	mov	r4, r7
 800f95e:	e7e0      	b.n	800f922 <_realloc_r+0x1e>

0800f960 <fiprintf>:
 800f960:	b40e      	push	{r1, r2, r3}
 800f962:	b503      	push	{r0, r1, lr}
 800f964:	4601      	mov	r1, r0
 800f966:	ab03      	add	r3, sp, #12
 800f968:	4805      	ldr	r0, [pc, #20]	@ (800f980 <fiprintf+0x20>)
 800f96a:	f853 2b04 	ldr.w	r2, [r3], #4
 800f96e:	6800      	ldr	r0, [r0, #0]
 800f970:	9301      	str	r3, [sp, #4]
 800f972:	f7ff fb2d 	bl	800efd0 <_vfiprintf_r>
 800f976:	b002      	add	sp, #8
 800f978:	f85d eb04 	ldr.w	lr, [sp], #4
 800f97c:	b003      	add	sp, #12
 800f97e:	4770      	bx	lr
 800f980:	200001a4 	.word	0x200001a4

0800f984 <abort>:
 800f984:	b508      	push	{r3, lr}
 800f986:	2006      	movs	r0, #6
 800f988:	f000 f834 	bl	800f9f4 <raise>
 800f98c:	2001      	movs	r0, #1
 800f98e:	f7f5 fa21 	bl	8004dd4 <_exit>

0800f992 <_malloc_usable_size_r>:
 800f992:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f996:	1f18      	subs	r0, r3, #4
 800f998:	2b00      	cmp	r3, #0
 800f99a:	bfbc      	itt	lt
 800f99c:	580b      	ldrlt	r3, [r1, r0]
 800f99e:	18c0      	addlt	r0, r0, r3
 800f9a0:	4770      	bx	lr

0800f9a2 <_raise_r>:
 800f9a2:	291f      	cmp	r1, #31
 800f9a4:	b538      	push	{r3, r4, r5, lr}
 800f9a6:	4605      	mov	r5, r0
 800f9a8:	460c      	mov	r4, r1
 800f9aa:	d904      	bls.n	800f9b6 <_raise_r+0x14>
 800f9ac:	2316      	movs	r3, #22
 800f9ae:	6003      	str	r3, [r0, #0]
 800f9b0:	f04f 30ff 	mov.w	r0, #4294967295
 800f9b4:	bd38      	pop	{r3, r4, r5, pc}
 800f9b6:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800f9b8:	b112      	cbz	r2, 800f9c0 <_raise_r+0x1e>
 800f9ba:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f9be:	b94b      	cbnz	r3, 800f9d4 <_raise_r+0x32>
 800f9c0:	4628      	mov	r0, r5
 800f9c2:	f000 f831 	bl	800fa28 <_getpid_r>
 800f9c6:	4622      	mov	r2, r4
 800f9c8:	4601      	mov	r1, r0
 800f9ca:	4628      	mov	r0, r5
 800f9cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f9d0:	f000 b818 	b.w	800fa04 <_kill_r>
 800f9d4:	2b01      	cmp	r3, #1
 800f9d6:	d00a      	beq.n	800f9ee <_raise_r+0x4c>
 800f9d8:	1c59      	adds	r1, r3, #1
 800f9da:	d103      	bne.n	800f9e4 <_raise_r+0x42>
 800f9dc:	2316      	movs	r3, #22
 800f9de:	6003      	str	r3, [r0, #0]
 800f9e0:	2001      	movs	r0, #1
 800f9e2:	e7e7      	b.n	800f9b4 <_raise_r+0x12>
 800f9e4:	2100      	movs	r1, #0
 800f9e6:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800f9ea:	4620      	mov	r0, r4
 800f9ec:	4798      	blx	r3
 800f9ee:	2000      	movs	r0, #0
 800f9f0:	e7e0      	b.n	800f9b4 <_raise_r+0x12>
	...

0800f9f4 <raise>:
 800f9f4:	4b02      	ldr	r3, [pc, #8]	@ (800fa00 <raise+0xc>)
 800f9f6:	4601      	mov	r1, r0
 800f9f8:	6818      	ldr	r0, [r3, #0]
 800f9fa:	f7ff bfd2 	b.w	800f9a2 <_raise_r>
 800f9fe:	bf00      	nop
 800fa00:	200001a4 	.word	0x200001a4

0800fa04 <_kill_r>:
 800fa04:	b538      	push	{r3, r4, r5, lr}
 800fa06:	4d07      	ldr	r5, [pc, #28]	@ (800fa24 <_kill_r+0x20>)
 800fa08:	2300      	movs	r3, #0
 800fa0a:	4604      	mov	r4, r0
 800fa0c:	4608      	mov	r0, r1
 800fa0e:	4611      	mov	r1, r2
 800fa10:	602b      	str	r3, [r5, #0]
 800fa12:	f7f5 f9d7 	bl	8004dc4 <_kill>
 800fa16:	1c43      	adds	r3, r0, #1
 800fa18:	d102      	bne.n	800fa20 <_kill_r+0x1c>
 800fa1a:	682b      	ldr	r3, [r5, #0]
 800fa1c:	b103      	cbz	r3, 800fa20 <_kill_r+0x1c>
 800fa1e:	6023      	str	r3, [r4, #0]
 800fa20:	bd38      	pop	{r3, r4, r5, pc}
 800fa22:	bf00      	nop
 800fa24:	20009224 	.word	0x20009224

0800fa28 <_getpid_r>:
 800fa28:	f7f5 b9ca 	b.w	8004dc0 <_getpid>
 800fa2c:	0000      	movs	r0, r0
	...

0800fa30 <floor>:
 800fa30:	ec51 0b10 	vmov	r0, r1, d0
 800fa34:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800fa38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fa3c:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 800fa40:	2e13      	cmp	r6, #19
 800fa42:	460c      	mov	r4, r1
 800fa44:	4605      	mov	r5, r0
 800fa46:	4680      	mov	r8, r0
 800fa48:	dc34      	bgt.n	800fab4 <floor+0x84>
 800fa4a:	2e00      	cmp	r6, #0
 800fa4c:	da17      	bge.n	800fa7e <floor+0x4e>
 800fa4e:	a332      	add	r3, pc, #200	@ (adr r3, 800fb18 <floor+0xe8>)
 800fa50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa54:	f7f0 fc2a 	bl	80002ac <__adddf3>
 800fa58:	2200      	movs	r2, #0
 800fa5a:	2300      	movs	r3, #0
 800fa5c:	f7f1 f86c 	bl	8000b38 <__aeabi_dcmpgt>
 800fa60:	b150      	cbz	r0, 800fa78 <floor+0x48>
 800fa62:	2c00      	cmp	r4, #0
 800fa64:	da55      	bge.n	800fb12 <floor+0xe2>
 800fa66:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 800fa6a:	432c      	orrs	r4, r5
 800fa6c:	2500      	movs	r5, #0
 800fa6e:	42ac      	cmp	r4, r5
 800fa70:	4c2b      	ldr	r4, [pc, #172]	@ (800fb20 <floor+0xf0>)
 800fa72:	bf08      	it	eq
 800fa74:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 800fa78:	4621      	mov	r1, r4
 800fa7a:	4628      	mov	r0, r5
 800fa7c:	e023      	b.n	800fac6 <floor+0x96>
 800fa7e:	4f29      	ldr	r7, [pc, #164]	@ (800fb24 <floor+0xf4>)
 800fa80:	4137      	asrs	r7, r6
 800fa82:	ea01 0307 	and.w	r3, r1, r7
 800fa86:	4303      	orrs	r3, r0
 800fa88:	d01d      	beq.n	800fac6 <floor+0x96>
 800fa8a:	a323      	add	r3, pc, #140	@ (adr r3, 800fb18 <floor+0xe8>)
 800fa8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa90:	f7f0 fc0c 	bl	80002ac <__adddf3>
 800fa94:	2200      	movs	r2, #0
 800fa96:	2300      	movs	r3, #0
 800fa98:	f7f1 f84e 	bl	8000b38 <__aeabi_dcmpgt>
 800fa9c:	2800      	cmp	r0, #0
 800fa9e:	d0eb      	beq.n	800fa78 <floor+0x48>
 800faa0:	2c00      	cmp	r4, #0
 800faa2:	bfbe      	ittt	lt
 800faa4:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 800faa8:	4133      	asrlt	r3, r6
 800faaa:	18e4      	addlt	r4, r4, r3
 800faac:	ea24 0407 	bic.w	r4, r4, r7
 800fab0:	2500      	movs	r5, #0
 800fab2:	e7e1      	b.n	800fa78 <floor+0x48>
 800fab4:	2e33      	cmp	r6, #51	@ 0x33
 800fab6:	dd0a      	ble.n	800face <floor+0x9e>
 800fab8:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 800fabc:	d103      	bne.n	800fac6 <floor+0x96>
 800fabe:	4602      	mov	r2, r0
 800fac0:	460b      	mov	r3, r1
 800fac2:	f7f0 fbf3 	bl	80002ac <__adddf3>
 800fac6:	ec41 0b10 	vmov	d0, r0, r1
 800faca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800face:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 800fad2:	f04f 37ff 	mov.w	r7, #4294967295
 800fad6:	40df      	lsrs	r7, r3
 800fad8:	4207      	tst	r7, r0
 800fada:	d0f4      	beq.n	800fac6 <floor+0x96>
 800fadc:	a30e      	add	r3, pc, #56	@ (adr r3, 800fb18 <floor+0xe8>)
 800fade:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fae2:	f7f0 fbe3 	bl	80002ac <__adddf3>
 800fae6:	2200      	movs	r2, #0
 800fae8:	2300      	movs	r3, #0
 800faea:	f7f1 f825 	bl	8000b38 <__aeabi_dcmpgt>
 800faee:	2800      	cmp	r0, #0
 800faf0:	d0c2      	beq.n	800fa78 <floor+0x48>
 800faf2:	2c00      	cmp	r4, #0
 800faf4:	da0a      	bge.n	800fb0c <floor+0xdc>
 800faf6:	2e14      	cmp	r6, #20
 800faf8:	d101      	bne.n	800fafe <floor+0xce>
 800fafa:	3401      	adds	r4, #1
 800fafc:	e006      	b.n	800fb0c <floor+0xdc>
 800fafe:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 800fb02:	2301      	movs	r3, #1
 800fb04:	40b3      	lsls	r3, r6
 800fb06:	441d      	add	r5, r3
 800fb08:	4545      	cmp	r5, r8
 800fb0a:	d3f6      	bcc.n	800fafa <floor+0xca>
 800fb0c:	ea25 0507 	bic.w	r5, r5, r7
 800fb10:	e7b2      	b.n	800fa78 <floor+0x48>
 800fb12:	2500      	movs	r5, #0
 800fb14:	462c      	mov	r4, r5
 800fb16:	e7af      	b.n	800fa78 <floor+0x48>
 800fb18:	8800759c 	.word	0x8800759c
 800fb1c:	7e37e43c 	.word	0x7e37e43c
 800fb20:	bff00000 	.word	0xbff00000
 800fb24:	000fffff 	.word	0x000fffff

0800fb28 <round>:
 800fb28:	ec51 0b10 	vmov	r0, r1, d0
 800fb2c:	b570      	push	{r4, r5, r6, lr}
 800fb2e:	f3c1 540a 	ubfx	r4, r1, #20, #11
 800fb32:	f2a4 32ff 	subw	r2, r4, #1023	@ 0x3ff
 800fb36:	2a13      	cmp	r2, #19
 800fb38:	460b      	mov	r3, r1
 800fb3a:	4605      	mov	r5, r0
 800fb3c:	dc1b      	bgt.n	800fb76 <round+0x4e>
 800fb3e:	2a00      	cmp	r2, #0
 800fb40:	da0b      	bge.n	800fb5a <round+0x32>
 800fb42:	f001 4300 	and.w	r3, r1, #2147483648	@ 0x80000000
 800fb46:	3201      	adds	r2, #1
 800fb48:	bf04      	itt	eq
 800fb4a:	f043 537f 	orreq.w	r3, r3, #1069547520	@ 0x3fc00000
 800fb4e:	f443 1340 	orreq.w	r3, r3, #3145728	@ 0x300000
 800fb52:	2200      	movs	r2, #0
 800fb54:	4619      	mov	r1, r3
 800fb56:	4610      	mov	r0, r2
 800fb58:	e015      	b.n	800fb86 <round+0x5e>
 800fb5a:	4c15      	ldr	r4, [pc, #84]	@ (800fbb0 <round+0x88>)
 800fb5c:	4114      	asrs	r4, r2
 800fb5e:	ea04 0601 	and.w	r6, r4, r1
 800fb62:	4306      	orrs	r6, r0
 800fb64:	d00f      	beq.n	800fb86 <round+0x5e>
 800fb66:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 800fb6a:	fa41 f202 	asr.w	r2, r1, r2
 800fb6e:	4413      	add	r3, r2
 800fb70:	ea23 0304 	bic.w	r3, r3, r4
 800fb74:	e7ed      	b.n	800fb52 <round+0x2a>
 800fb76:	2a33      	cmp	r2, #51	@ 0x33
 800fb78:	dd08      	ble.n	800fb8c <round+0x64>
 800fb7a:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 800fb7e:	d102      	bne.n	800fb86 <round+0x5e>
 800fb80:	4602      	mov	r2, r0
 800fb82:	f7f0 fb93 	bl	80002ac <__adddf3>
 800fb86:	ec41 0b10 	vmov	d0, r0, r1
 800fb8a:	bd70      	pop	{r4, r5, r6, pc}
 800fb8c:	f2a4 4613 	subw	r6, r4, #1043	@ 0x413
 800fb90:	f04f 34ff 	mov.w	r4, #4294967295
 800fb94:	40f4      	lsrs	r4, r6
 800fb96:	4204      	tst	r4, r0
 800fb98:	d0f5      	beq.n	800fb86 <round+0x5e>
 800fb9a:	f1c2 0133 	rsb	r1, r2, #51	@ 0x33
 800fb9e:	2201      	movs	r2, #1
 800fba0:	408a      	lsls	r2, r1
 800fba2:	1952      	adds	r2, r2, r5
 800fba4:	bf28      	it	cs
 800fba6:	3301      	addcs	r3, #1
 800fba8:	ea22 0204 	bic.w	r2, r2, r4
 800fbac:	e7d2      	b.n	800fb54 <round+0x2c>
 800fbae:	bf00      	nop
 800fbb0:	000fffff 	.word	0x000fffff

0800fbb4 <_init>:
 800fbb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fbb6:	bf00      	nop
 800fbb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fbba:	bc08      	pop	{r3}
 800fbbc:	469e      	mov	lr, r3
 800fbbe:	4770      	bx	lr

0800fbc0 <_fini>:
 800fbc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fbc2:	bf00      	nop
 800fbc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fbc6:	bc08      	pop	{r3}
 800fbc8:	469e      	mov	lr, r3
 800fbca:	4770      	bx	lr
