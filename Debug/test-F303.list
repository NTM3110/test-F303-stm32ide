
test-F303.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000eb24  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001bd8  0800ecb8  0800ecb8  0000fcb8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010890  08010890  00012248  2**0
                  CONTENTS
  4 .ARM          00000008  08010890  08010890  00011890  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010898  08010898  00012248  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010898  08010898  00011898  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801089c  0801089c  0001189c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000248  20000000  080108a0  00012000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00012248  2**0
                  CONTENTS
 10 .bss          00008b0c  20000248  20000248  00012248  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  20008d54  20008d54  00012248  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00012248  2**0
                  CONTENTS, READONLY
 13 .debug_info   00030d45  00000000  00000000  00012278  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000067e8  00000000  00000000  00042fbd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loclists 0000f98e  00000000  00000000  000497a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001bf0  00000000  00000000  00059138  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001d48  00000000  00000000  0005ad28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00025037  00000000  00000000  0005ca70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0002f57b  00000000  00000000  00081aa7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d72e6  00000000  00000000  000b1022  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  00188308  2**0
                  CONTENTS, READONLY
 22 .debug_frame  000067b8  00000000  00000000  0018834c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000051  00000000  00000000  0018eb04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000248 	.word	0x20000248
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800ec9c 	.word	0x0800ec9c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000024c 	.word	0x2000024c
 80001cc:	0800ec9c 	.word	0x0800ec9c

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_d2lz>:
 8000ca8:	b538      	push	{r3, r4, r5, lr}
 8000caa:	2200      	movs	r2, #0
 8000cac:	2300      	movs	r3, #0
 8000cae:	4604      	mov	r4, r0
 8000cb0:	460d      	mov	r5, r1
 8000cb2:	f7ff ff23 	bl	8000afc <__aeabi_dcmplt>
 8000cb6:	b928      	cbnz	r0, 8000cc4 <__aeabi_d2lz+0x1c>
 8000cb8:	4620      	mov	r0, r4
 8000cba:	4629      	mov	r1, r5
 8000cbc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cc0:	f000 b80a 	b.w	8000cd8 <__aeabi_d2ulz>
 8000cc4:	4620      	mov	r0, r4
 8000cc6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cca:	f000 f805 	bl	8000cd8 <__aeabi_d2ulz>
 8000cce:	4240      	negs	r0, r0
 8000cd0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cd4:	bd38      	pop	{r3, r4, r5, pc}
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_d2ulz>:
 8000cd8:	b5d0      	push	{r4, r6, r7, lr}
 8000cda:	4b0c      	ldr	r3, [pc, #48]	@ (8000d0c <__aeabi_d2ulz+0x34>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	4606      	mov	r6, r0
 8000ce0:	460f      	mov	r7, r1
 8000ce2:	f7ff fc99 	bl	8000618 <__aeabi_dmul>
 8000ce6:	f7ff ff6f 	bl	8000bc8 <__aeabi_d2uiz>
 8000cea:	4604      	mov	r4, r0
 8000cec:	f7ff fc1a 	bl	8000524 <__aeabi_ui2d>
 8000cf0:	4b07      	ldr	r3, [pc, #28]	@ (8000d10 <__aeabi_d2ulz+0x38>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	f7ff fc90 	bl	8000618 <__aeabi_dmul>
 8000cf8:	4602      	mov	r2, r0
 8000cfa:	460b      	mov	r3, r1
 8000cfc:	4630      	mov	r0, r6
 8000cfe:	4639      	mov	r1, r7
 8000d00:	f7ff fad2 	bl	80002a8 <__aeabi_dsub>
 8000d04:	f7ff ff60 	bl	8000bc8 <__aeabi_d2uiz>
 8000d08:	4621      	mov	r1, r4
 8000d0a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d0c:	3df00000 	.word	0x3df00000
 8000d10:	41f00000 	.word	0x41f00000

08000d14 <sendRMCDataToFlash>:
	if(rmc.isValid == 1)
		rmc.date.epoch = convertToEpoch(rmc.date.Yr, rmc.date.Mon, rmc.date.Day, rmc.tim.hour, rmc.tim.min, rmc.tim.sec);
}


void sendRMCDataToFlash(RMCSTRUCT *rmcData) {
 8000d14:	b570      	push	{r4, r5, r6, lr}
	HAL_UART_Transmit(&huart1, (uint8_t*) "SENDING RMC TO FLASH\n",  strlen("SENDING RMC\n") , HAL_MAX_DELAY);
    RMCSTRUCT *mail = (RMCSTRUCT *)osMailAlloc(RMC_MailQFLASHId, osWaitForever); // Allocate memory for mail
 8000d16:	4e0d      	ldr	r6, [pc, #52]	@ (8000d4c <sendRMCDataToFlash+0x38>)
	HAL_UART_Transmit(&huart1, (uint8_t*) "SENDING RMC TO FLASH\n",  strlen("SENDING RMC\n") , HAL_MAX_DELAY);
 8000d18:	490d      	ldr	r1, [pc, #52]	@ (8000d50 <sendRMCDataToFlash+0x3c>)
 8000d1a:	f04f 33ff 	mov.w	r3, #4294967295
 8000d1e:	220c      	movs	r2, #12
void sendRMCDataToFlash(RMCSTRUCT *rmcData) {
 8000d20:	4605      	mov	r5, r0
	HAL_UART_Transmit(&huart1, (uint8_t*) "SENDING RMC TO FLASH\n",  strlen("SENDING RMC\n") , HAL_MAX_DELAY);
 8000d22:	480c      	ldr	r0, [pc, #48]	@ (8000d54 <sendRMCDataToFlash+0x40>)
 8000d24:	f006 fc16 	bl	8007554 <HAL_UART_Transmit>
    RMCSTRUCT *mail = (RMCSTRUCT *)osMailAlloc(RMC_MailQFLASHId, osWaitForever); // Allocate memory for mail
 8000d28:	6830      	ldr	r0, [r6, #0]
 8000d2a:	f04f 31ff 	mov.w	r1, #4294967295
 8000d2e:	f006 fe4d 	bl	80079cc <osMailAlloc>
 8000d32:	4604      	mov	r4, r0
    if (mail != NULL) {
 8000d34:	b148      	cbz	r0, 8000d4a <sendRMCDataToFlash+0x36>
        *mail = *rmcData; // Copy data into allocated memory
 8000d36:	4629      	mov	r1, r5
 8000d38:	2258      	movs	r2, #88	@ 0x58
 8000d3a:	f00a ff0b 	bl	800bb54 <memcpy>
        osMailPut(RMC_MailQFLASHId, mail); // Put message in queue
 8000d3e:	6830      	ldr	r0, [r6, #0]
 8000d40:	4621      	mov	r1, r4
    }
}
 8000d42:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        osMailPut(RMC_MailQFLASHId, mail); // Put message in queue
 8000d46:	f006 be46 	b.w	80079d6 <osMailPut>
}
 8000d4a:	bd70      	pop	{r4, r5, r6, pc}
 8000d4c:	200002c8 	.word	0x200002c8
 8000d50:	0800ede8 	.word	0x0800ede8
 8000d54:	200013c4 	.word	0x200013c4

08000d58 <getRMC>:


void getRMC(){
 8000d58:	b570      	push	{r4, r5, r6, lr}
	int idx = 0;
	getRMC_time++;
 8000d5a:	4c3a      	ldr	r4, [pc, #232]	@ (8000e44 <getRMC+0xec>)
 8000d5c:	6823      	ldr	r3, [r4, #0]
 8000d5e:	3301      	adds	r3, #1
 8000d60:	6023      	str	r3, [r4, #0]
	int length = 0;
	for(size_t i = 0; i < GPS_STACK_SIZE; i++){
 8000d62:	4b39      	ldr	r3, [pc, #228]	@ (8000e48 <getRMC+0xf0>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	461e      	mov	r6, r3
		if (gpsSentence[i] == '$' && gpsSentence[i+1] == 'G' && gpsSentence[i+2] == 'N' && gpsSentence[i+3] == 'R' && gpsSentence[i+4] == 'M' && gpsSentence[i+5] == 'C'
 8000d68:	f813 1b01 	ldrb.w	r1, [r3], #1
 8000d6c:	2924      	cmp	r1, #36	@ 0x24
 8000d6e:	4615      	mov	r5, r2
 8000d70:	f102 0201 	add.w	r2, r2, #1
 8000d74:	d160      	bne.n	8000e38 <getRMC+0xe0>
 8000d76:	7819      	ldrb	r1, [r3, #0]
 8000d78:	2947      	cmp	r1, #71	@ 0x47
 8000d7a:	d15d      	bne.n	8000e38 <getRMC+0xe0>
 8000d7c:	7859      	ldrb	r1, [r3, #1]
 8000d7e:	294e      	cmp	r1, #78	@ 0x4e
 8000d80:	d15a      	bne.n	8000e38 <getRMC+0xe0>
 8000d82:	7899      	ldrb	r1, [r3, #2]
 8000d84:	2952      	cmp	r1, #82	@ 0x52
 8000d86:	d157      	bne.n	8000e38 <getRMC+0xe0>
 8000d88:	78d9      	ldrb	r1, [r3, #3]
 8000d8a:	294d      	cmp	r1, #77	@ 0x4d
 8000d8c:	d154      	bne.n	8000e38 <getRMC+0xe0>
 8000d8e:	7919      	ldrb	r1, [r3, #4]
 8000d90:	2943      	cmp	r1, #67	@ 0x43
 8000d92:	d151      	bne.n	8000e38 <getRMC+0xe0>
			&& (GPS_STACK_SIZE -i) > 200 ){
 8000d94:	f5c2 6100 	rsb	r1, r2, #2048	@ 0x800
 8000d98:	3101      	adds	r1, #1
 8000d9a:	29c8      	cmp	r1, #200	@ 0xc8
 8000d9c:	d94c      	bls.n	8000e38 <getRMC+0xe0>
			isRMCExist = 1;
 8000d9e:	4b2b      	ldr	r3, [pc, #172]	@ (8000e4c <getRMC+0xf4>)
			HAL_UART_Transmit(&huart1, (uint8_t *)"Getting RMC\n", strlen("Getting RMC\n"), 1000);
 8000da0:	492b      	ldr	r1, [pc, #172]	@ (8000e50 <getRMC+0xf8>)
 8000da2:	482c      	ldr	r0, [pc, #176]	@ (8000e54 <getRMC+0xfc>)
			isRMCExist = 1;
 8000da4:	2201      	movs	r2, #1
 8000da6:	601a      	str	r2, [r3, #0]
			HAL_UART_Transmit(&huart1, (uint8_t *)"Getting RMC\n", strlen("Getting RMC\n"), 1000);
 8000da8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000dac:	220c      	movs	r2, #12
 8000dae:	f006 fbd1 	bl	8007554 <HAL_UART_Transmit>
			while(gpsSentence[i+1] != 0x0A ){
 8000db2:	4a29      	ldr	r2, [pc, #164]	@ (8000e58 <getRMC+0x100>)
 8000db4:	1973      	adds	r3, r6, r5
	int idx = 0;
 8000db6:	2000      	movs	r0, #0
			while(gpsSentence[i+1] != 0x0A ){
 8000db8:	7859      	ldrb	r1, [r3, #1]
 8000dba:	290a      	cmp	r1, #10
 8000dbc:	461d      	mov	r5, r3
 8000dbe:	d135      	bne.n	8000e2c <getRMC+0xd4>
			idx = 0;
			break;
		}
	 }
	for(size_t i = length; i < 128; i++){
		rmc_str[i] = 0;
 8000dc0:	4b25      	ldr	r3, [pc, #148]	@ (8000e58 <getRMC+0x100>)
	}
	if(isRMCExist == 1){
 8000dc2:	4d22      	ldr	r5, [pc, #136]	@ (8000e4c <getRMC+0xf4>)
		rmc_str[i] = 0;
 8000dc4:	f1c0 0280 	rsb	r2, r0, #128	@ 0x80
 8000dc8:	2100      	movs	r1, #0
 8000dca:	4418      	add	r0, r3
 8000dcc:	f00a f86e 	bl	800aeac <memset>
	if(isRMCExist == 1){
 8000dd0:	682b      	ldr	r3, [r5, #0]
 8000dd2:	2b01      	cmp	r3, #1
 8000dd4:	d109      	bne.n	8000dea <getRMC+0x92>
//		parse_rmc(rmc_str);
//		display_rmc_data(&huart1);
//		set_time(rmc.tim.hour, rmc.tim.min, rmc.tim.sec);
//		set_date(rmc.date.Yr, rmc.date.Mon, rmc.date.Day);
		if(rmc.isValid == 1){
 8000dd6:	4821      	ldr	r0, [pc, #132]	@ (8000e5c <getRMC+0x104>)
 8000dd8:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8000dda:	2b01      	cmp	r3, #1
 8000ddc:	d103      	bne.n	8000de6 <getRMC+0x8e>
			sendRMCDataToFlash(&rmc);
 8000dde:	f7ff ff99 	bl	8000d14 <sendRMCDataToFlash>
			getRMC_time = 0;
 8000de2:	2300      	movs	r3, #0
 8000de4:	6023      	str	r3, [r4, #0]
		}
		isRMCExist = 0;
 8000de6:	2300      	movs	r3, #0
 8000de8:	602b      	str	r3, [r5, #0]
	}
	if(getRMC_time >= 500){
 8000dea:	6823      	ldr	r3, [r4, #0]
 8000dec:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000df0:	db0f      	blt.n	8000e12 <getRMC+0xba>
		GPS_DISABLE();
 8000df2:	2201      	movs	r2, #1
 8000df4:	2104      	movs	r1, #4
 8000df6:	481a      	ldr	r0, [pc, #104]	@ (8000e60 <getRMC+0x108>)
 8000df8:	f004 fc86 	bl	8005708 <HAL_GPIO_WritePin>
		osDelay(500);
 8000dfc:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000e00:	f006 fd18 	bl	8007834 <osDelay>
		GPS_ENABLE();
 8000e04:	4816      	ldr	r0, [pc, #88]	@ (8000e60 <getRMC+0x108>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	2104      	movs	r1, #4
 8000e0a:	f004 fc7d 	bl	8005708 <HAL_GPIO_WritePin>
		getRMC_time = 0;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	6023      	str	r3, [r4, #0]
	}
	Debug_printf("Elapsed Time blabla: %d\n", getRMC_time);
 8000e12:	6821      	ldr	r1, [r4, #0]
 8000e14:	4813      	ldr	r0, [pc, #76]	@ (8000e64 <getRMC+0x10c>)
 8000e16:	f003 fc63 	bl	80046e0 <Debug_printf>
	HAL_UART_Transmit(&huart1, rmc_str, 128,1000);
}
 8000e1a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	HAL_UART_Transmit(&huart1, rmc_str, 128,1000);
 8000e1e:	490e      	ldr	r1, [pc, #56]	@ (8000e58 <getRMC+0x100>)
 8000e20:	480c      	ldr	r0, [pc, #48]	@ (8000e54 <getRMC+0xfc>)
 8000e22:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e26:	2280      	movs	r2, #128	@ 0x80
 8000e28:	f006 bb94 	b.w	8007554 <HAL_UART_Transmit>
				rmc_str[idx] = gpsSentence[i];
 8000e2c:	7829      	ldrb	r1, [r5, #0]
 8000e2e:	f802 1b01 	strb.w	r1, [r2], #1
				idx++;
 8000e32:	3301      	adds	r3, #1
 8000e34:	3001      	adds	r0, #1
				i++;
 8000e36:	e7bf      	b.n	8000db8 <getRMC+0x60>
	for(size_t i = 0; i < GPS_STACK_SIZE; i++){
 8000e38:	f5b2 6f00 	cmp.w	r2, #2048	@ 0x800
 8000e3c:	d194      	bne.n	8000d68 <getRMC+0x10>
	int length = 0;
 8000e3e:	2000      	movs	r0, #0
 8000e40:	e7be      	b.n	8000dc0 <getRMC+0x68>
 8000e42:	bf00      	nop
 8000e44:	20000264 	.word	0x20000264
 8000e48:	200002cc 	.word	0x200002cc
 8000e4c:	20000268 	.word	0x20000268
 8000e50:	0800edfe 	.word	0x0800edfe
 8000e54:	200013c4 	.word	0x200013c4
 8000e58:	20000adc 	.word	0x20000adc
 8000e5c:	20000270 	.word	0x20000270
 8000e60:	48000800 	.word	0x48000800
 8000e64:	0800ee0b 	.word	0x0800ee0b

08000e68 <StartGPS>:


void StartGPS(void const * argument)
{
 8000e68:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	HAL_UART_Transmit(&huart1,(uint8_t*) "STARTING GPS", strlen("STARTING GPS"), 1000);
 8000e6a:	492f      	ldr	r1, [pc, #188]	@ (8000f28 <StartGPS+0xc0>)
 8000e6c:	482f      	ldr	r0, [pc, #188]	@ (8000f2c <StartGPS+0xc4>)
 8000e6e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e72:	220c      	movs	r2, #12
 8000e74:	f006 fb6e 	bl	8007554 <HAL_UART_Transmit>
	/* USER CODE BEGIN StartGPS */
	RingBufferDmaU8_initUSARTRx(&GPSRxDMARing, &huart2, gpsSentence, GPS_STACK_SIZE);
 8000e78:	4a2d      	ldr	r2, [pc, #180]	@ (8000f30 <StartGPS+0xc8>)
 8000e7a:	492e      	ldr	r1, [pc, #184]	@ (8000f34 <StartGPS+0xcc>)
 8000e7c:	482e      	ldr	r0, [pc, #184]	@ (8000f38 <StartGPS+0xd0>)
 8000e7e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000e82:	f001 ff09 	bl	8002c98 <RingBufferDmaU8_initUSARTRx>
//	/* Infinite loop */
	rmc.tim.hour = 0;
 8000e86:	4b2d      	ldr	r3, [pc, #180]	@ (8000f3c <StartGPS+0xd4>)
	rmc.tim.min = 0;
	rmc.tim.sec = 0;
	rmc.lcation.latitude = 20.998022;
	rmc.lcation.longitude = 105.794756;
	rmc.speed = 22.4;
 8000e88:	4a2d      	ldr	r2, [pc, #180]	@ (8000f40 <StartGPS+0xd8>)
 8000e8a:	629a      	str	r2, [r3, #40]	@ 0x28
	rmc.lcation.latitude = 20.998022;
 8000e8c:	a122      	add	r1, pc, #136	@ (adr r1, 8000f18 <StartGPS+0xb0>)
 8000e8e:	e9d1 0100 	ldrd	r0, r1, [r1]
	rmc.course = 30.5;
 8000e92:	4a2c      	ldr	r2, [pc, #176]	@ (8000f44 <StartGPS+0xdc>)
 8000e94:	62da      	str	r2, [r3, #44]	@ 0x2c
	rmc.lcation.latitude = 20.998022;
 8000e96:	e9c3 010e 	strd	r0, r1, [r3, #56]	@ 0x38
	rmc.lcation.NS = 'N';
 8000e9a:	224e      	movs	r2, #78	@ 0x4e
	rmc.lcation.longitude = 105.794756;
 8000e9c:	a120      	add	r1, pc, #128	@ (adr r1, 8000f20 <StartGPS+0xb8>)
 8000e9e:	e9d1 0100 	ldrd	r0, r1, [r1]
	rmc.lcation.NS = 'N';
 8000ea2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
	rmc.lcation.EW = 'E';
 8000ea6:	2245      	movs	r2, #69	@ 0x45
	rmc.tim.hour = 0;
 8000ea8:	2400      	movs	r4, #0
	rmc.lcation.EW = 'E';
 8000eaa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
	rmc.isValid = 1;
 8000eae:	2201      	movs	r2, #1
	rmc.lcation.longitude = 105.794756;
 8000eb0:	e9c3 0112 	strd	r0, r1, [r3, #72]	@ 0x48
	rmc.tim.min = 0;
 8000eb4:	e9c3 4400 	strd	r4, r4, [r3]
	rmc.date.Day = 0;
	rmc.date.Mon = 0;
 8000eb8:	e9c3 4404 	strd	r4, r4, [r3, #16]
	rmc.tim.sec = 0;
 8000ebc:	609c      	str	r4, [r3, #8]
	rmc.isValid = 1;
 8000ebe:	631a      	str	r2, [r3, #48]	@ 0x30
	rmc.date.Yr = 0;
 8000ec0:	619c      	str	r4, [r3, #24]
	osMailQDef(FLASH_MailQ, 5, RMCSTRUCT);
 8000ec2:	2205      	movs	r2, #5
 8000ec4:	2358      	movs	r3, #88	@ 0x58
	RMC_MailQFLASHId = osMailCreate(osMailQ(FLASH_MailQ), NULL);
 8000ec6:	4621      	mov	r1, r4
 8000ec8:	a801      	add	r0, sp, #4
	osMailQDef(FLASH_MailQ, 5, RMCSTRUCT);
 8000eca:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8000ece:	f8cd d00c 	str.w	sp, [sp, #12]
	RMC_MailQFLASHId = osMailCreate(osMailQ(FLASH_MailQ), NULL);
 8000ed2:	f006 fd50 	bl	8007976 <osMailCreate>
 8000ed6:	4b1c      	ldr	r3, [pc, #112]	@ (8000f48 <StartGPS+0xe0>)

	memset(gpsSentence, 0x00, GPS_STACK_SIZE);
 8000ed8:	4621      	mov	r1, r4
	RMC_MailQFLASHId = osMailCreate(osMailQ(FLASH_MailQ), NULL);
 8000eda:	6018      	str	r0, [r3, #0]
	memset(gpsSentence, 0x00, GPS_STACK_SIZE);
 8000edc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000ee0:	4813      	ldr	r0, [pc, #76]	@ (8000f30 <StartGPS+0xc8>)
	while(1)
	{
//		Debug_printf("\n\n\n----------------------- Inside GPS ------------------------\n\n\n");
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 8000ee2:	4c1a      	ldr	r4, [pc, #104]	@ (8000f4c <StartGPS+0xe4>)
	memset(gpsSentence, 0x00, GPS_STACK_SIZE);
 8000ee4:	f009 ffe2 	bl	800aeac <memset>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 8000ee8:	2201      	movs	r2, #1
 8000eea:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000eee:	4620      	mov	r0, r4
 8000ef0:	f004 fc0a 	bl	8005708 <HAL_GPIO_WritePin>
		HAL_Delay(500);
 8000ef4:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000ef8:	f003 fcb8 	bl	800486c <HAL_Delay>
		getRMC();
 8000efc:	f7ff ff2c 	bl	8000d58 <getRMC>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 8000f00:	4620      	mov	r0, r4
 8000f02:	2200      	movs	r2, #0
 8000f04:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000f08:	f004 fbfe 	bl	8005708 <HAL_GPIO_WritePin>
		HAL_Delay(500);
 8000f0c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000f10:	f003 fcac 	bl	800486c <HAL_Delay>
	while(1)
 8000f14:	e7e8      	b.n	8000ee8 <StartGPS+0x80>
 8000f16:	bf00      	nop
 8000f18:	5eaab042 	.word	0x5eaab042
 8000f1c:	4034ff7e 	.word	0x4034ff7e
 8000f20:	48451330 	.word	0x48451330
 8000f24:	405a72dd 	.word	0x405a72dd
 8000f28:	0800ee24 	.word	0x0800ee24
 8000f2c:	200013c4 	.word	0x200013c4
 8000f30:	200002cc 	.word	0x200002cc
 8000f34:	2000133c 	.word	0x2000133c
 8000f38:	20000acc 	.word	0x20000acc
 8000f3c:	20000270 	.word	0x20000270
 8000f40:	41b33333 	.word	0x41b33333
 8000f44:	41f40000 	.word	0x41f40000
 8000f48:	200002c8 	.word	0x200002c8
 8000f4c:	48000800 	.word	0x48000800

08000f50 <create_terminal_registration>:
//int is_40s = 0;
RMCSTRUCT rmc_jt;
uint8_t terminal_phone_number[6] = {0};


JT808_TerminalRegistration create_terminal_registration(){
 8000f50:	b5f0      	push	{r4, r5, r6, r7, lr}
	JT808_TerminalRegistration reg_msg = {
 8000f52:	4b11      	ldr	r3, [pc, #68]	@ (8000f98 <create_terminal_registration+0x48>)
JT808_TerminalRegistration create_terminal_registration(){
 8000f54:	b091      	sub	sp, #68	@ 0x44
	JT808_TerminalRegistration reg_msg = {
 8000f56:	ac01      	add	r4, sp, #4
JT808_TerminalRegistration create_terminal_registration(){
 8000f58:	4605      	mov	r5, r0
	JT808_TerminalRegistration reg_msg = {
 8000f5a:	f103 0738 	add.w	r7, r3, #56	@ 0x38
 8000f5e:	4622      	mov	r2, r4
 8000f60:	6818      	ldr	r0, [r3, #0]
 8000f62:	6859      	ldr	r1, [r3, #4]
 8000f64:	4626      	mov	r6, r4
 8000f66:	c603      	stmia	r6!, {r0, r1}
 8000f68:	3308      	adds	r3, #8
 8000f6a:	42bb      	cmp	r3, r7
 8000f6c:	4634      	mov	r4, r6
 8000f6e:	d1f7      	bne.n	8000f60 <create_terminal_registration+0x10>
 8000f70:	6818      	ldr	r0, [r3, #0]
 8000f72:	6030      	str	r0, [r6, #0]
        .plate_no = {0x00, 0x00, 0x00, 0x00, 0x35, 0x36, 0x37, 0x38, 0x39, 0x31, 0x20, 0x32, 0x39, 0x4C, 0x31, 0x33, 0x34, 0x31, 0x35, 0x34},
        .check_sum = 0x00,  // Placeholder, will be set by the function
        .end_mask = 0x7E
    };

	return reg_msg;
 8000f74:	4613      	mov	r3, r2
 8000f76:	ae0f      	add	r6, sp, #60	@ 0x3c
 8000f78:	462a      	mov	r2, r5
 8000f7a:	461c      	mov	r4, r3
 8000f7c:	cc03      	ldmia	r4!, {r0, r1}
 8000f7e:	42b4      	cmp	r4, r6
 8000f80:	6010      	str	r0, [r2, #0]
 8000f82:	6051      	str	r1, [r2, #4]
 8000f84:	4623      	mov	r3, r4
 8000f86:	f102 0208 	add.w	r2, r2, #8
 8000f8a:	d1f6      	bne.n	8000f7a <create_terminal_registration+0x2a>
 8000f8c:	6820      	ldr	r0, [r4, #0]
 8000f8e:	6010      	str	r0, [r2, #0]
}
 8000f90:	4628      	mov	r0, r5
 8000f92:	b011      	add	sp, #68	@ 0x44
 8000f94:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f96:	bf00      	nop
 8000f98:	0800ecb8 	.word	0x0800ecb8

08000f9c <create_location_info_report>:


JT808_LocationInfoReport create_location_info_report() {
 8000f9c:	b530      	push	{r4, r5, lr}
	JT808_LocationInfoReport location_info = {
 8000f9e:	2541      	movs	r5, #65	@ 0x41
JT808_LocationInfoReport create_location_info_report() {
 8000fa0:	b093      	sub	sp, #76	@ 0x4c
 8000fa2:	4604      	mov	r4, r0
	JT808_LocationInfoReport location_info = {
 8000fa4:	462a      	mov	r2, r5
 8000fa6:	4906      	ldr	r1, [pc, #24]	@ (8000fc0 <create_location_info_report+0x24>)
 8000fa8:	a801      	add	r0, sp, #4
 8000faa:	f00a fdd3 	bl	800bb54 <memcpy>
        .signal = {0x31},                      // 31
        .additional = {0x01, 0x00, 0xFD, 0x04, 0x03, 0xF1, 0x00, 0x00, 0x0A}, // 01 00 FD 04 03 F1 00 00 0A
        .end_mask = 0x7E                       // 7E
    };
    
    return location_info;
 8000fae:	462a      	mov	r2, r5
 8000fb0:	a901      	add	r1, sp, #4
 8000fb2:	4620      	mov	r0, r4
 8000fb4:	f00a fdce 	bl	800bb54 <memcpy>
}
 8000fb8:	4620      	mov	r0, r4
 8000fba:	b013      	add	sp, #76	@ 0x4c
 8000fbc:	bd30      	pop	{r4, r5, pc}
 8000fbe:	bf00      	nop
 8000fc0:	0800ecf4 	.word	0x0800ecf4

08000fc4 <set_status_bit>:
void clearBit(uint8_t *status, int bitPosition) {
    *status &= ~(1 << bitPosition); // Clear the specific bit to 0
}

void set_status_bit(uint8_t *status_bit){
	if(rmc_jt.lcation.NS == 'N') clearBit(status_bit+3, 2);
 8000fc4:	4a0a      	ldr	r2, [pc, #40]	@ (8000ff0 <set_status_bit+0x2c>)
    *status &= ~(1 << bitPosition); // Clear the specific bit to 0
 8000fc6:	78c3      	ldrb	r3, [r0, #3]
	if(rmc_jt.lcation.NS == 'N') clearBit(status_bit+3, 2);
 8000fc8:	f892 1040 	ldrb.w	r1, [r2, #64]	@ 0x40
 8000fcc:	294e      	cmp	r1, #78	@ 0x4e
    *status &= ~(1 << bitPosition); // Clear the specific bit to 0
 8000fce:	bf0c      	ite	eq
 8000fd0:	f003 03fb 	andeq.w	r3, r3, #251	@ 0xfb
    *status |= (1 << bitPosition);  // Set the specific bit to 1
 8000fd4:	f043 0304 	orrne.w	r3, r3, #4
 8000fd8:	70c3      	strb	r3, [r0, #3]
	else setBit(status_bit+3, 2);

	if(rmc_jt.lcation.EW == 'E') clearBit(status_bit+3, 3);
 8000fda:	f892 2050 	ldrb.w	r2, [r2, #80]	@ 0x50
 8000fde:	2a45      	cmp	r2, #69	@ 0x45
    *status &= ~(1 << bitPosition); // Clear the specific bit to 0
 8000fe0:	bf0c      	ite	eq
 8000fe2:	f003 03f7 	andeq.w	r3, r3, #247	@ 0xf7
    *status |= (1 << bitPosition);  // Set the specific bit to 1
 8000fe6:	f043 0308 	orrne.w	r3, r3, #8
 8000fea:	70c3      	strb	r3, [r0, #3]
	else setBit(status_bit+3, 3);
}
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop
 8000ff0:	20000b68 	.word	0x20000b68

08000ff4 <send_AT_command>:
    memcpy(message_array, location_info, *array_length);  // Copy struct data into message array

    return message_array;
}

void send_AT_command(const char *command) {
 8000ff4:	b510      	push	{r4, lr}
 8000ff6:	4604      	mov	r4, r0
    HAL_UART_Transmit(&huart3, (uint8_t *)command, strlen(command), HAL_MAX_DELAY);
 8000ff8:	f7ff f94a 	bl	8000290 <strlen>
 8000ffc:	4621      	mov	r1, r4
 8000ffe:	b282      	uxth	r2, r0
}
 8001000:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_UART_Transmit(&huart3, (uint8_t *)command, strlen(command), HAL_MAX_DELAY);
 8001004:	4802      	ldr	r0, [pc, #8]	@ (8001010 <send_AT_command+0x1c>)
 8001006:	f04f 33ff 	mov.w	r3, #4294967295
 800100a:	f006 baa3 	b.w	8007554 <HAL_UART_Transmit>
 800100e:	bf00      	nop
 8001010:	200012b4 	.word	0x200012b4

08001014 <SIM_UART_ReInitializeRxDMA>:

void SIM_UART_ReInitializeRxDMA(void){
 8001014:	b510      	push	{r4, lr}
	HAL_StatusTypeDef ret = HAL_UART_Abort(&huart3);
 8001016:	4809      	ldr	r0, [pc, #36]	@ (800103c <SIM_UART_ReInitializeRxDMA+0x28>)
 8001018:	f006 f82f 	bl	800707a <HAL_UART_Abort>
	if(ret != HAL_OK)
 800101c:	b108      	cbz	r0, 8001022 <SIM_UART_ReInitializeRxDMA+0xe>
	{
		Error_Handler();			
 800101e:	f002 f9a6 	bl	800336e <Error_Handler>
	}		
	osDelay(50);	//	50 is OK
 8001022:	2032      	movs	r0, #50	@ 0x32
 8001024:	f006 fc06 	bl	8007834 <osDelay>
	//memset(gnssDmaRingBufferMemory, 0x20, sizeof(gnssDmaRingBufferMemory));	// insert buffer with space character	
	RingBufferDmaU8_initUSARTRx(&SIMRxDMARing, &huart3, response, SIM_RESPONSE_MAX_SIZE);
}
 8001028:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	RingBufferDmaU8_initUSARTRx(&SIMRxDMARing, &huart3, response, SIM_RESPONSE_MAX_SIZE);
 800102c:	4a04      	ldr	r2, [pc, #16]	@ (8001040 <SIM_UART_ReInitializeRxDMA+0x2c>)
 800102e:	4903      	ldr	r1, [pc, #12]	@ (800103c <SIM_UART_ReInitializeRxDMA+0x28>)
 8001030:	4804      	ldr	r0, [pc, #16]	@ (8001044 <SIM_UART_ReInitializeRxDMA+0x30>)
 8001032:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8001036:	f001 be2f 	b.w	8002c98 <RingBufferDmaU8_initUSARTRx>
 800103a:	bf00      	nop
 800103c:	200012b4 	.word	0x200012b4
 8001040:	20000bd8 	.word	0x20000bd8
 8001044:	20000bc8 	.word	0x20000bc8

08001048 <find_length>:

int find_length(uint8_t *str){
	int i = 0;
	while(str[i] != 0x00){
 8001048:	f7ff b922 	b.w	8000290 <strlen>

0800104c <receive_response>:
	}
	return i;
		
}

void receive_response(char *cmd_str) {
 800104c:	b530      	push	{r4, r5, lr}
	uint8_t output_buffer[128];
	snprintf((char *)output_buffer, 128, "Response at command: %s\n", cmd_str);
	uart_transmit_string(&huart1, output_buffer);
 800104e:	4c10      	ldr	r4, [pc, #64]	@ (8001090 <receive_response+0x44>)
	snprintf((char *)output_buffer, 128, "Response at command: %s\n", cmd_str);
 8001050:	4a10      	ldr	r2, [pc, #64]	@ (8001094 <receive_response+0x48>)
	//while(response[1] == '\0'){}

	HAL_UART_Transmit(&huart1, response, find_length(response), 1000);
 8001052:	4d11      	ldr	r5, [pc, #68]	@ (8001098 <receive_response+0x4c>)
void receive_response(char *cmd_str) {
 8001054:	b0a1      	sub	sp, #132	@ 0x84
 8001056:	4603      	mov	r3, r0
	snprintf((char *)output_buffer, 128, "Response at command: %s\n", cmd_str);
 8001058:	2180      	movs	r1, #128	@ 0x80
 800105a:	4668      	mov	r0, sp
 800105c:	f009 fe2a 	bl	800acb4 <sniprintf>
	uart_transmit_string(&huart1, output_buffer);
 8001060:	4669      	mov	r1, sp
 8001062:	4620      	mov	r0, r4
 8001064:	f003 fb2c 	bl	80046c0 <uart_transmit_string>
	HAL_UART_Transmit(&huart1, response, find_length(response), 1000);
 8001068:	4628      	mov	r0, r5
 800106a:	f7ff ffed 	bl	8001048 <find_length>
 800106e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001072:	b282      	uxth	r2, r0
 8001074:	4629      	mov	r1, r5
 8001076:	4620      	mov	r0, r4
 8001078:	f006 fa6c 	bl	8007554 <HAL_UART_Transmit>
	uart_transmit_string(&huart1, (uint8_t*)"\n");
 800107c:	4907      	ldr	r1, [pc, #28]	@ (800109c <receive_response+0x50>)
 800107e:	4620      	mov	r0, r4
 8001080:	f003 fb1e 	bl	80046c0 <uart_transmit_string>
	osDelay(1000);
 8001084:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001088:	f006 fbd4 	bl	8007834 <osDelay>
}
 800108c:	b021      	add	sp, #132	@ 0x84
 800108e:	bd30      	pop	{r4, r5, pc}
 8001090:	200013c4 	.word	0x200013c4
 8001094:	0800ee31 	.word	0x0800ee31
 8001098:	20000bd8 	.word	0x20000bd8
 800109c:	0800faec 	.word	0x0800faec

080010a0 <init_SIM_module>:

void init_SIM_module() {
 80010a0:	b510      	push	{r4, lr}
    
    // Check if module responds
	SIM_ENABLE();
 80010a2:	4c0b      	ldr	r4, [pc, #44]	@ (80010d0 <init_SIM_module+0x30>)
 80010a4:	2201      	movs	r2, #1
 80010a6:	4611      	mov	r1, r2
 80010a8:	4620      	mov	r0, r4
 80010aa:	f004 fb2d 	bl	8005708 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 80010ae:	2200      	movs	r2, #0
 80010b0:	2102      	movs	r1, #2
 80010b2:	4620      	mov	r0, r4
 80010b4:	f004 fb28 	bl	8005708 <HAL_GPIO_WritePin>
	osDelay(2000);
 80010b8:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80010bc:	f006 fbba 	bl	8007834 <osDelay>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 80010c0:	4620      	mov	r0, r4
 80010c2:	2201      	movs	r2, #1
}
 80010c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 80010c8:	2102      	movs	r1, #2
 80010ca:	f004 bb1d 	b.w	8005708 <HAL_GPIO_WritePin>
 80010ce:	bf00      	nop
 80010d0:	48000800 	.word	0x48000800

080010d4 <reboot_SIM_module>:

void reboot_SIM_module(){
 80010d4:	b510      	push	{r4, lr}
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 80010d6:	4c11      	ldr	r4, [pc, #68]	@ (800111c <reboot_SIM_module+0x48>)
 80010d8:	2200      	movs	r2, #0
 80010da:	2102      	movs	r1, #2
 80010dc:	4620      	mov	r0, r4
 80010de:	f004 fb13 	bl	8005708 <HAL_GPIO_WritePin>
	osDelay(1500);
 80010e2:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 80010e6:	f006 fba5 	bl	8007834 <osDelay>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 80010ea:	2201      	movs	r2, #1
 80010ec:	2102      	movs	r1, #2
 80010ee:	4620      	mov	r0, r4
 80010f0:	f004 fb0a 	bl	8005708 <HAL_GPIO_WritePin>
	osDelay(10000);
 80010f4:	f242 7010 	movw	r0, #10000	@ 0x2710
 80010f8:	f006 fb9c 	bl	8007834 <osDelay>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 80010fc:	2200      	movs	r2, #0
 80010fe:	2102      	movs	r1, #2
 8001100:	4620      	mov	r0, r4
 8001102:	f004 fb01 	bl	8005708 <HAL_GPIO_WritePin>
	osDelay(1500);
 8001106:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 800110a:	f006 fb93 	bl	8007834 <osDelay>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 800110e:	4620      	mov	r0, r4
 8001110:	2201      	movs	r2, #1
}
 8001112:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 8001116:	2102      	movs	r1, #2
 8001118:	f004 baf6 	b.w	8005708 <HAL_GPIO_WritePin>
 800111c:	48000800 	.word	0x48000800

08001120 <convert_dec_to_hex_value>:

int convert_dec_to_hex_value(int int_value){
    return (int_value /10*16) + (int_value%10);
 8001120:	220a      	movs	r2, #10
 8001122:	fb90 f3f2 	sdiv	r3, r0, r2
 8001126:	fb02 0013 	mls	r0, r2, r3, r0
}
 800112a:	eb00 1003 	add.w	r0, r0, r3, lsl #4
 800112e:	4770      	bx	lr

08001130 <save_rmc_to_location_info>:


void save_rmc_to_location_info(JT808_LocationInfoReport* location_info){
 8001130:	b570      	push	{r4, r5, r6, lr}
	location_info->timestamp[0] = (uint8_t)convert_dec_to_hex_value(rmc_jt.date.Yr);  // Assign year (0x23)
 8001132:	4d43      	ldr	r5, [pc, #268]	@ (8001240 <save_rmc_to_location_info+0x110>)
void save_rmc_to_location_info(JT808_LocationInfoReport* location_info){
 8001134:	4604      	mov	r4, r0
	location_info->timestamp[0] = (uint8_t)convert_dec_to_hex_value(rmc_jt.date.Yr);  // Assign year (0x23)
 8001136:	69a8      	ldr	r0, [r5, #24]
 8001138:	f7ff fff2 	bl	8001120 <convert_dec_to_hex_value>
 800113c:	f884 0023 	strb.w	r0, [r4, #35]	@ 0x23
	location_info->timestamp[1] = (uint8_t)convert_dec_to_hex_value(rmc_jt.date.Mon);          // Assign month (0x11)
 8001140:	6968      	ldr	r0, [r5, #20]
 8001142:	f7ff ffed 	bl	8001120 <convert_dec_to_hex_value>
 8001146:	f884 0024 	strb.w	r0, [r4, #36]	@ 0x24
	location_info->timestamp[2] = (uint8_t)convert_dec_to_hex_value(rmc_jt.date.Day);            // Assign day (0x08)
 800114a:	6928      	ldr	r0, [r5, #16]
 800114c:	f7ff ffe8 	bl	8001120 <convert_dec_to_hex_value>
 8001150:	f884 0025 	strb.w	r0, [r4, #37]	@ 0x25
	location_info->timestamp[3] = (uint8_t)convert_dec_to_hex_value(rmc_jt.tim.hour);           // Assign hour (0x14)
 8001154:	6828      	ldr	r0, [r5, #0]
 8001156:	f7ff ffe3 	bl	8001120 <convert_dec_to_hex_value>
 800115a:	f884 0026 	strb.w	r0, [r4, #38]	@ 0x26
	location_info->timestamp[4] = (uint8_t)convert_dec_to_hex_value(rmc_jt.tim.min);         // Assign minute (0x55)
 800115e:	6868      	ldr	r0, [r5, #4]
 8001160:	f7ff ffde 	bl	8001120 <convert_dec_to_hex_value>
 8001164:	f884 0027 	strb.w	r0, [r4, #39]	@ 0x27
	location_info->timestamp[5] = (uint8_t)convert_dec_to_hex_value(rmc_jt.tim.sec);  
 8001168:	68a8      	ldr	r0, [r5, #8]
 800116a:	f7ff ffd9 	bl	8001120 <convert_dec_to_hex_value>
 800116e:	f884 0028 	strb.w	r0, [r4, #40]	@ 0x28
	double latitude = rmc_jt.lcation.latitude * 1000000;
 8001172:	e9d5 010e 	ldrd	r0, r1, [r5, #56]	@ 0x38
 8001176:	a32e      	add	r3, pc, #184	@ (adr r3, 8001230 <save_rmc_to_location_info+0x100>)
 8001178:	e9d3 2300 	ldrd	r2, r3, [r3]
 800117c:	f7ff fa4c 	bl	8000618 <__aeabi_dmul>
	double longitude = rmc_jt.lcation.longitude * 1000000;
	int32_t latitude_int = (int32_t)round(latitude);  // Convert to integer, rounding if needed
 8001180:	ec41 0b10 	vmov	d0, r0, r1
 8001184:	f00d fd44 	bl	800ec10 <round>
 8001188:	ec51 0b10 	vmov	r0, r1, d0
 800118c:	f7ff fcf4 	bl	8000b78 <__aeabi_d2iz>
	double longitude = rmc_jt.lcation.longitude * 1000000;
 8001190:	a327      	add	r3, pc, #156	@ (adr r3, 8001230 <save_rmc_to_location_info+0x100>)
 8001192:	e9d3 2300 	ldrd	r2, r3, [r3]
	int32_t latitude_int = (int32_t)round(latitude);  // Convert to integer, rounding if needed
 8001196:	4606      	mov	r6, r0
	double longitude = rmc_jt.lcation.longitude * 1000000;
 8001198:	e9d5 0112 	ldrd	r0, r1, [r5, #72]	@ 0x48
 800119c:	f7ff fa3c 	bl	8000618 <__aeabi_dmul>
	int32_t longitude_int = (int32_t)round(longitude);
 80011a0:	ec41 0b10 	vmov	d0, r0, r1
 80011a4:	f00d fd34 	bl	800ec10 <round>
 80011a8:	ec51 0b10 	vmov	r0, r1, d0
 80011ac:	f7ff fce4 	bl	8000b78 <__aeabi_d2iz>
	
	location_info->latitude[0] = (latitude_int >> 24) & 0xFF;  // Most significant byte
 80011b0:	0e33      	lsrs	r3, r6, #24
 80011b2:	7563      	strb	r3, [r4, #21]
	location_info->latitude[1] = (latitude_int >> 16) & 0xFF;
 80011b4:	1433      	asrs	r3, r6, #16
 80011b6:	75a3      	strb	r3, [r4, #22]
	location_info->latitude[2] = (latitude_int >> 8) & 0xFF;
 80011b8:	1233      	asrs	r3, r6, #8
 80011ba:	75e3      	strb	r3, [r4, #23]
	location_info->latitude[3] = latitude_int & 0xFF;
	
	location_info->longitude[0] = (longitude_int >> 24) & 0xFF;  // Most significant byte
 80011bc:	0e03      	lsrs	r3, r0, #24
 80011be:	7663      	strb	r3, [r4, #25]
	location_info->longitude[1] = (longitude_int >> 16) & 0xFF;
 80011c0:	1403      	asrs	r3, r0, #16
 80011c2:	76a3      	strb	r3, [r4, #26]
	location_info->longitude[2] = (longitude_int >> 8) & 0xFF;
 80011c4:	1203      	asrs	r3, r0, #8
 80011c6:	76e3      	strb	r3, [r4, #27]
	location_info->longitude[3] = longitude_int & 0xFF;
 80011c8:	7720      	strb	r0, [r4, #28]
	location_info->latitude[3] = latitude_int & 0xFF;
 80011ca:	7626      	strb	r6, [r4, #24]
	
	int speed = round(rmc_jt.speed * 10 * 1.852);
 80011cc:	ed95 7a0a 	vldr	s14, [r5, #40]	@ 0x28
 80011d0:	eef2 7a04 	vmov.f32	s15, #36	@ 0x41200000  10.0
 80011d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011d8:	ee17 0a90 	vmov	r0, s15
 80011dc:	f7ff f9c4 	bl	8000568 <__aeabi_f2d>
 80011e0:	a315      	add	r3, pc, #84	@ (adr r3, 8001238 <save_rmc_to_location_info+0x108>)
 80011e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011e6:	f7ff fa17 	bl	8000618 <__aeabi_dmul>
 80011ea:	ec41 0b10 	vmov	d0, r0, r1
 80011ee:	f00d fd0f 	bl	800ec10 <round>
 80011f2:	ec51 0b10 	vmov	r0, r1, d0
 80011f6:	f7ff fcbf 	bl	8000b78 <__aeabi_d2iz>
	location_info->speed[0] = (speed >> 8) & 0xFF;
 80011fa:	1203      	asrs	r3, r0, #8
 80011fc:	77e3      	strb	r3, [r4, #31]
	location_info->speed[1] =  speed & 0xFF;
 80011fe:	f884 0020 	strb.w	r0, [r4, #32]
	
	int direction = round(rmc_jt.course);
 8001202:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 8001204:	f7ff f9b0 	bl	8000568 <__aeabi_f2d>
 8001208:	ec41 0b10 	vmov	d0, r0, r1
 800120c:	f00d fd00 	bl	800ec10 <round>
 8001210:	ec51 0b10 	vmov	r0, r1, d0
 8001214:	f7ff fcb0 	bl	8000b78 <__aeabi_d2iz>
	location_info->direction[0] = (direction >> 8) & 0xFF;
 8001218:	1203      	asrs	r3, r0, #8
	location_info->direction[1] =  direction & 0xFF;
 800121a:	f884 0022 	strb.w	r0, [r4, #34]	@ 0x22
	location_info->direction[0] = (direction >> 8) & 0xFF;
 800121e:	f884 3021 	strb.w	r3, [r4, #33]	@ 0x21
	
	set_status_bit(location_info->status);
 8001222:	f104 0011 	add.w	r0, r4, #17
}
 8001226:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	set_status_bit(location_info->status);
 800122a:	f7ff becb 	b.w	8000fc4 <set_status_bit>
 800122e:	bf00      	nop
 8001230:	00000000 	.word	0x00000000
 8001234:	412e8480 	.word	0x412e8480
 8001238:	c083126f 	.word	0xc083126f
 800123c:	3ffda1ca 	.word	0x3ffda1ca
 8001240:	20000b68 	.word	0x20000b68

08001244 <first_check_SIM>:

//AT
int first_check_SIM()
{
 8001244:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8001246:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 800124a:	2100      	movs	r1, #0
 800124c:	482f      	ldr	r0, [pc, #188]	@ (800130c <first_check_SIM+0xc8>)
	SIM_UART_ReInitializeRxDMA();
	const char *substring = "PB DONE";
	int count_check = 0;
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
	SIM_UART_ReInitializeRxDMA();
	while(strstr((char *) response, substring) == NULL)
 800124e:	4d30      	ldr	r5, [pc, #192]	@ (8001310 <first_check_SIM+0xcc>)
 8001250:	4c2e      	ldr	r4, [pc, #184]	@ (800130c <first_check_SIM+0xc8>)
	{
		receive_response("WAITING FOR SIM MODULE TO BE READY\n");
 8001252:	4e30      	ldr	r6, [pc, #192]	@ (8001314 <first_check_SIM+0xd0>)
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8001254:	f009 fe2a 	bl	800aeac <memset>
	SIM_UART_ReInitializeRxDMA();
 8001258:	f7ff fedc 	bl	8001014 <SIM_UART_ReInitializeRxDMA>
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 800125c:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8001260:	2100      	movs	r1, #0
 8001262:	482a      	ldr	r0, [pc, #168]	@ (800130c <first_check_SIM+0xc8>)
 8001264:	f009 fe22 	bl	800aeac <memset>
	SIM_UART_ReInitializeRxDMA();
 8001268:	f7ff fed4 	bl	8001014 <SIM_UART_ReInitializeRxDMA>
	while(strstr((char *) response, substring) == NULL)
 800126c:	4629      	mov	r1, r5
 800126e:	4620      	mov	r0, r4
 8001270:	f009 fe6c 	bl	800af4c <strstr>
 8001274:	2800      	cmp	r0, #0
 8001276:	d03a      	beq.n	80012ee <first_check_SIM+0xaa>
		if(count_check >= 40) return 0;
		osDelay(200);
	}
	receive_response("WAITING FOR SIM MODULE TO BE READY\n");
 8001278:	4826      	ldr	r0, [pc, #152]	@ (8001314 <first_check_SIM+0xd0>)

	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
	SIM_UART_ReInitializeRxDMA();

	send_AT_command(FIRST_CHECK);
	while(strstr((char *) response, CHECK_RESPONSE) != NULL){
 800127a:	4e27      	ldr	r6, [pc, #156]	@ (8001318 <first_check_SIM+0xd4>)
 800127c:	4d23      	ldr	r5, [pc, #140]	@ (800130c <first_check_SIM+0xc8>)
		receive_response("First check SIM MODULE\n");
 800127e:	4f27      	ldr	r7, [pc, #156]	@ (800131c <first_check_SIM+0xd8>)
	receive_response("WAITING FOR SIM MODULE TO BE READY\n");
 8001280:	f7ff fee4 	bl	800104c <receive_response>
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8001284:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8001288:	2100      	movs	r1, #0
 800128a:	4820      	ldr	r0, [pc, #128]	@ (800130c <first_check_SIM+0xc8>)
 800128c:	f009 fe0e 	bl	800aeac <memset>
	SIM_UART_ReInitializeRxDMA();
 8001290:	f7ff fec0 	bl	8001014 <SIM_UART_ReInitializeRxDMA>
	send_AT_command(FIRST_CHECK);
 8001294:	4822      	ldr	r0, [pc, #136]	@ (8001320 <first_check_SIM+0xdc>)
 8001296:	f7ff fead 	bl	8000ff4 <send_AT_command>
	while(strstr((char *) response, CHECK_RESPONSE) != NULL){
 800129a:	4631      	mov	r1, r6
 800129c:	4628      	mov	r0, r5
 800129e:	f009 fe55 	bl	800af4c <strstr>
 80012a2:	4604      	mov	r4, r0
 80012a4:	bb50      	cbnz	r0, 80012fc <first_check_SIM+0xb8>
	}
	receive_response("First check SIM MODULE\n");
 80012a6:	481d      	ldr	r0, [pc, #116]	@ (800131c <first_check_SIM+0xd8>)
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
	SIM_UART_ReInitializeRxDMA();

	send_AT_command("AT+CPAS\r\n");
	while(strstr((char *) response, CHECK_RESPONSE) != NULL){
 80012a8:	4e1b      	ldr	r6, [pc, #108]	@ (8001318 <first_check_SIM+0xd4>)
 80012aa:	4d18      	ldr	r5, [pc, #96]	@ (800130c <first_check_SIM+0xc8>)
		receive_response("Check status of SIM MODULE\n");
 80012ac:	4f1d      	ldr	r7, [pc, #116]	@ (8001324 <first_check_SIM+0xe0>)
	receive_response("First check SIM MODULE\n");
 80012ae:	f7ff fecd 	bl	800104c <receive_response>
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 80012b2:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 80012b6:	4621      	mov	r1, r4
 80012b8:	4814      	ldr	r0, [pc, #80]	@ (800130c <first_check_SIM+0xc8>)
 80012ba:	f009 fdf7 	bl	800aeac <memset>
	SIM_UART_ReInitializeRxDMA();
 80012be:	f7ff fea9 	bl	8001014 <SIM_UART_ReInitializeRxDMA>
	send_AT_command("AT+CPAS\r\n");
 80012c2:	4819      	ldr	r0, [pc, #100]	@ (8001328 <first_check_SIM+0xe4>)
 80012c4:	f7ff fe96 	bl	8000ff4 <send_AT_command>
	while(strstr((char *) response, CHECK_RESPONSE) != NULL){
 80012c8:	4631      	mov	r1, r6
 80012ca:	4628      	mov	r0, r5
 80012cc:	f009 fe3e 	bl	800af4c <strstr>
 80012d0:	4604      	mov	r4, r0
 80012d2:	b9b8      	cbnz	r0, 8001304 <first_check_SIM+0xc0>
	}
	receive_response("Check status of SIM MODULE\n");
 80012d4:	4813      	ldr	r0, [pc, #76]	@ (8001324 <first_check_SIM+0xe0>)
 80012d6:	f7ff feb9 	bl	800104c <receive_response>
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 80012da:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 80012de:	4621      	mov	r1, r4
 80012e0:	480a      	ldr	r0, [pc, #40]	@ (800130c <first_check_SIM+0xc8>)
 80012e2:	f009 fde3 	bl	800aeac <memset>
	SIM_UART_ReInitializeRxDMA();
 80012e6:	f7ff fe95 	bl	8001014 <SIM_UART_ReInitializeRxDMA>

	return 1;
}
 80012ea:	2001      	movs	r0, #1
 80012ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		receive_response("WAITING FOR SIM MODULE TO BE READY\n");
 80012ee:	4630      	mov	r0, r6
 80012f0:	f7ff feac 	bl	800104c <receive_response>
		osDelay(200);
 80012f4:	20c8      	movs	r0, #200	@ 0xc8
 80012f6:	f006 fa9d 	bl	8007834 <osDelay>
 80012fa:	e7b7      	b.n	800126c <first_check_SIM+0x28>
		receive_response("First check SIM MODULE\n");
 80012fc:	4638      	mov	r0, r7
 80012fe:	f7ff fea5 	bl	800104c <receive_response>
 8001302:	e7ca      	b.n	800129a <first_check_SIM+0x56>
		receive_response("Check status of SIM MODULE\n");
 8001304:	4638      	mov	r0, r7
 8001306:	f7ff fea1 	bl	800104c <receive_response>
 800130a:	e7dd      	b.n	80012c8 <first_check_SIM+0x84>
 800130c:	20000bd8 	.word	0x20000bd8
 8001310:	0800ee6e 	.word	0x0800ee6e
 8001314:	0800ee4a 	.word	0x0800ee4a
 8001318:	0800ee93 	.word	0x0800ee93
 800131c:	0800ee7b 	.word	0x0800ee7b
 8001320:	0800ee76 	.word	0x0800ee76
 8001324:	0800eea0 	.word	0x0800eea0
 8001328:	0800ee96 	.word	0x0800ee96

0800132c <extract_last_12_digits_bcd>:


void extract_last_12_digits_bcd(const uint8_t *response, uint8_t *output) {
 800132c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800132e:	460d      	mov	r5, r1
	uint8_t output_buffer[10];
	const uint8_t *start = response;
	while (*start && !(start[0] == 'A' && start[1] == 'T' && start[2] == '+' &&
 8001330:	4604      	mov	r4, r0
 8001332:	f810 3b01 	ldrb.w	r3, [r0], #1
 8001336:	b1cb      	cbz	r3, 800136c <extract_last_12_digits_bcd+0x40>
 8001338:	2b41      	cmp	r3, #65	@ 0x41
 800133a:	d1f9      	bne.n	8001330 <extract_last_12_digits_bcd+0x4>
 800133c:	7803      	ldrb	r3, [r0, #0]
 800133e:	2b54      	cmp	r3, #84	@ 0x54
 8001340:	d1f6      	bne.n	8001330 <extract_last_12_digits_bcd+0x4>
 8001342:	7843      	ldrb	r3, [r0, #1]
 8001344:	2b2b      	cmp	r3, #43	@ 0x2b
 8001346:	d1f3      	bne.n	8001330 <extract_last_12_digits_bcd+0x4>
 8001348:	7883      	ldrb	r3, [r0, #2]
 800134a:	2b43      	cmp	r3, #67	@ 0x43
 800134c:	d1f0      	bne.n	8001330 <extract_last_12_digits_bcd+0x4>
					   start[3] == 'C' && start[4] == 'G' && start[5] == 'S' &&
 800134e:	78c3      	ldrb	r3, [r0, #3]
 8001350:	2b47      	cmp	r3, #71	@ 0x47
 8001352:	d1ed      	bne.n	8001330 <extract_last_12_digits_bcd+0x4>
 8001354:	7903      	ldrb	r3, [r0, #4]
 8001356:	2b53      	cmp	r3, #83	@ 0x53
 8001358:	d1ea      	bne.n	8001330 <extract_last_12_digits_bcd+0x4>
 800135a:	7943      	ldrb	r3, [r0, #5]
 800135c:	2b4e      	cmp	r3, #78	@ 0x4e
 800135e:	d1e7      	bne.n	8001330 <extract_last_12_digits_bcd+0x4>
					   start[6] == 'N' && start[7] == '=' && start[8] == '1')) {
 8001360:	7983      	ldrb	r3, [r0, #6]
 8001362:	2b3d      	cmp	r3, #61	@ 0x3d
 8001364:	d1e4      	bne.n	8001330 <extract_last_12_digits_bcd+0x4>
	while (*start && !(start[0] == 'A' && start[1] == 'T' && start[2] == '+' &&
 8001366:	79c3      	ldrb	r3, [r0, #7]
 8001368:	2b31      	cmp	r3, #49	@ 0x31
 800136a:	d1e1      	bne.n	8001330 <extract_last_12_digits_bcd+0x4>
		start++;
	}
	uart_transmit_string(&huart1, (uint8_t *)"Inside Checking terminal Number: ");
 800136c:	4922      	ldr	r1, [pc, #136]	@ (80013f8 <extract_last_12_digits_bcd+0xcc>)
 800136e:	4823      	ldr	r0, [pc, #140]	@ (80013fc <extract_last_12_digits_bcd+0xd0>)
 8001370:	f003 f9a6 	bl	80046c0 <uart_transmit_string>
	uart_transmit_string( &huart1,(uint8_t *) start);
 8001374:	4821      	ldr	r0, [pc, #132]	@ (80013fc <extract_last_12_digits_bcd+0xd0>)
 8001376:	4621      	mov	r1, r4
 8001378:	f003 f9a2 	bl	80046c0 <uart_transmit_string>
	// If "AT+CGSN=1" is found, move to the start of the number (skip "AT+CGSN=1 ")
	if (*start) {
 800137c:	7823      	ldrb	r3, [r4, #0]
 800137e:	b96b      	cbnz	r3, 800139c <extract_last_12_digits_bcd+0x70>
			for (int i = 0; i < 6; i++) {
				output[i] = ((last_12[i * 2] - '0') << 4) | (last_12[i * 2 + 1] - '0');
			}
		}
	}
	uart_transmit_string(&huart1, (uint8_t *)" Check terminal Number-0: ");
 8001380:	491f      	ldr	r1, [pc, #124]	@ (8001400 <extract_last_12_digits_bcd+0xd4>)
 8001382:	481e      	ldr	r0, [pc, #120]	@ (80013fc <extract_last_12_digits_bcd+0xd0>)
 8001384:	f003 f99c 	bl	80046c0 <uart_transmit_string>
	uart_transmit_string(&huart1, output);
 8001388:	4629      	mov	r1, r5
 800138a:	481c      	ldr	r0, [pc, #112]	@ (80013fc <extract_last_12_digits_bcd+0xd0>)
 800138c:	f003 f998 	bl	80046c0 <uart_transmit_string>
	uart_transmit_string(&huart1, (uint8_t *)" \n");
 8001390:	491c      	ldr	r1, [pc, #112]	@ (8001404 <extract_last_12_digits_bcd+0xd8>)
 8001392:	481a      	ldr	r0, [pc, #104]	@ (80013fc <extract_last_12_digits_bcd+0xd0>)
 8001394:	f003 f994 	bl	80046c0 <uart_transmit_string>
}
 8001398:	b004      	add	sp, #16
 800139a:	bd70      	pop	{r4, r5, r6, pc}
		start += 10;  // Move pointer past "AT+CGSN=1 "
 800139c:	340a      	adds	r4, #10
		while (*start && (*start < '0' || *start > '9')) {
 800139e:	7821      	ldrb	r1, [r4, #0]
 80013a0:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 80013a4:	4623      	mov	r3, r4
 80013a6:	b2d2      	uxtb	r2, r2
 80013a8:	3401      	adds	r4, #1
 80013aa:	b109      	cbz	r1, 80013b0 <extract_last_12_digits_bcd+0x84>
 80013ac:	2a09      	cmp	r2, #9
 80013ae:	d8f6      	bhi.n	800139e <extract_last_12_digits_bcd+0x72>
 80013b0:	461a      	mov	r2, r3
		while (*end && (*end >= '0' && *end <= '9')) {
 80013b2:	4616      	mov	r6, r2
 80013b4:	f812 1b01 	ldrb.w	r1, [r2], #1
 80013b8:	3930      	subs	r1, #48	@ 0x30
 80013ba:	2909      	cmp	r1, #9
 80013bc:	d9f9      	bls.n	80013b2 <extract_last_12_digits_bcd+0x86>
 80013be:	1af4      	subs	r4, r6, r3
		uart_transmit_string(&huart1, (uint8_t *)"Inside Checking terminal Number-2: LEN ");
 80013c0:	4911      	ldr	r1, [pc, #68]	@ (8001408 <extract_last_12_digits_bcd+0xdc>)
 80013c2:	480e      	ldr	r0, [pc, #56]	@ (80013fc <extract_last_12_digits_bcd+0xd0>)
 80013c4:	f003 f97c 	bl	80046c0 <uart_transmit_string>
		snprintf((char*)output_buffer, 10, "%d", digit_count);
 80013c8:	4a10      	ldr	r2, [pc, #64]	@ (800140c <extract_last_12_digits_bcd+0xe0>)
 80013ca:	4623      	mov	r3, r4
 80013cc:	210a      	movs	r1, #10
 80013ce:	a801      	add	r0, sp, #4
 80013d0:	f009 fc70 	bl	800acb4 <sniprintf>
		if (digit_count >= 12) {
 80013d4:	2c0b      	cmp	r4, #11
 80013d6:	d9d3      	bls.n	8001380 <extract_last_12_digits_bcd+0x54>
			const uint8_t *last_12 = end - 12;
 80013d8:	f1a6 030c 	sub.w	r3, r6, #12
 80013dc:	1e68      	subs	r0, r5, #1
				output[i] = ((last_12[i * 2] - '0') << 4) | (last_12[i * 2 + 1] - '0');
 80013de:	7819      	ldrb	r1, [r3, #0]
 80013e0:	785a      	ldrb	r2, [r3, #1]
 80013e2:	3930      	subs	r1, #48	@ 0x30
 80013e4:	3a30      	subs	r2, #48	@ 0x30
			for (int i = 0; i < 6; i++) {
 80013e6:	3302      	adds	r3, #2
				output[i] = ((last_12[i * 2] - '0') << 4) | (last_12[i * 2 + 1] - '0');
 80013e8:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
			for (int i = 0; i < 6; i++) {
 80013ec:	429e      	cmp	r6, r3
				output[i] = ((last_12[i * 2] - '0') << 4) | (last_12[i * 2 + 1] - '0');
 80013ee:	f800 2f01 	strb.w	r2, [r0, #1]!
			for (int i = 0; i < 6; i++) {
 80013f2:	d1f4      	bne.n	80013de <extract_last_12_digits_bcd+0xb2>
 80013f4:	e7c4      	b.n	8001380 <extract_last_12_digits_bcd+0x54>
 80013f6:	bf00      	nop
 80013f8:	0800eebc 	.word	0x0800eebc
 80013fc:	200013c4 	.word	0x200013c4
 8001400:	0800eede 	.word	0x0800eede
 8001404:	0800f4df 	.word	0x0800f4df
 8001408:	0800eef9 	.word	0x0800eef9
 800140c:	0800f329 	.word	0x0800f329

08001410 <check_SIM_ready>:
        }
    }
    return -1; // Failure
}

int check_SIM_ready(){
 8001410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	const int TIME_LIMIT = 5;
	int count_check_sim = 0;
	//GET IMEI
	send_AT_command(GET_IMEI);
 8001412:	488f      	ldr	r0, [pc, #572]	@ (8001650 <check_SIM_ready+0x240>)
	while(strstr((char *) response, CHECK_RESPONSE) == NULL){
 8001414:	4d8f      	ldr	r5, [pc, #572]	@ (8001654 <check_SIM_ready+0x244>)
 8001416:	4c90      	ldr	r4, [pc, #576]	@ (8001658 <check_SIM_ready+0x248>)
		receive_response("Check IMEI-0:\n");
 8001418:	4e90      	ldr	r6, [pc, #576]	@ (800165c <check_SIM_ready+0x24c>)
	send_AT_command(GET_IMEI);
 800141a:	f7ff fdeb 	bl	8000ff4 <send_AT_command>
	while(strstr((char *) response, CHECK_RESPONSE) == NULL){
 800141e:	4629      	mov	r1, r5
 8001420:	4620      	mov	r0, r4
 8001422:	f009 fd93 	bl	800af4c <strstr>
 8001426:	2800      	cmp	r0, #0
 8001428:	f000 80ef 	beq.w	800160a <check_SIM_ready+0x1fa>
	}
	receive_response("Check IMEI-0:\n");
 800142c:	488b      	ldr	r0, [pc, #556]	@ (800165c <check_SIM_ready+0x24c>)
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
	SIM_UART_ReInitializeRxDMA();

	//GET MODEL IDENTIFICATION
	send_AT_command(GET_MODEL_IDENTI);
	while(strstr((char *) response, CHECK_RESPONSE) == NULL){
 800142e:	4d89      	ldr	r5, [pc, #548]	@ (8001654 <check_SIM_ready+0x244>)
 8001430:	4c89      	ldr	r4, [pc, #548]	@ (8001658 <check_SIM_ready+0x248>)
		receive_response("Check MODEL IDENTIFICATION\n");
 8001432:	4e8b      	ldr	r6, [pc, #556]	@ (8001660 <check_SIM_ready+0x250>)
	receive_response("Check IMEI-0:\n");
 8001434:	f7ff fe0a 	bl	800104c <receive_response>
	extract_last_12_digits_bcd(response, terminal_phone_number);
 8001438:	498a      	ldr	r1, [pc, #552]	@ (8001664 <check_SIM_ready+0x254>)
 800143a:	4887      	ldr	r0, [pc, #540]	@ (8001658 <check_SIM_ready+0x248>)
 800143c:	f7ff ff76 	bl	800132c <extract_last_12_digits_bcd>
	uart_transmit_string(&huart1, (uint8_t *)" Check terminal Number: ");
 8001440:	4989      	ldr	r1, [pc, #548]	@ (8001668 <check_SIM_ready+0x258>)
 8001442:	488a      	ldr	r0, [pc, #552]	@ (800166c <check_SIM_ready+0x25c>)
 8001444:	f003 f93c 	bl	80046c0 <uart_transmit_string>
	uart_transmit_string(&huart1, terminal_phone_number);
 8001448:	4986      	ldr	r1, [pc, #536]	@ (8001664 <check_SIM_ready+0x254>)
 800144a:	4888      	ldr	r0, [pc, #544]	@ (800166c <check_SIM_ready+0x25c>)
 800144c:	f003 f938 	bl	80046c0 <uart_transmit_string>
	uart_transmit_string(&huart1, (uint8_t *)" \n");
 8001450:	4987      	ldr	r1, [pc, #540]	@ (8001670 <check_SIM_ready+0x260>)
 8001452:	4886      	ldr	r0, [pc, #536]	@ (800166c <check_SIM_ready+0x25c>)
 8001454:	f003 f934 	bl	80046c0 <uart_transmit_string>
	osDelay(100);
 8001458:	2064      	movs	r0, #100	@ 0x64
 800145a:	f006 f9eb 	bl	8007834 <osDelay>
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 800145e:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8001462:	2100      	movs	r1, #0
 8001464:	487c      	ldr	r0, [pc, #496]	@ (8001658 <check_SIM_ready+0x248>)
 8001466:	f009 fd21 	bl	800aeac <memset>
	SIM_UART_ReInitializeRxDMA();
 800146a:	f7ff fdd3 	bl	8001014 <SIM_UART_ReInitializeRxDMA>
	send_AT_command(GET_MODEL_IDENTI);
 800146e:	4881      	ldr	r0, [pc, #516]	@ (8001674 <check_SIM_ready+0x264>)
 8001470:	f7ff fdc0 	bl	8000ff4 <send_AT_command>
	while(strstr((char *) response, CHECK_RESPONSE) == NULL){
 8001474:	4629      	mov	r1, r5
 8001476:	4620      	mov	r0, r4
 8001478:	f009 fd68 	bl	800af4c <strstr>
 800147c:	2800      	cmp	r0, #0
 800147e:	f000 80c8 	beq.w	8001612 <check_SIM_ready+0x202>
	}
	receive_response("Check MODEL IDENTIFICATION\n");
 8001482:	4877      	ldr	r0, [pc, #476]	@ (8001660 <check_SIM_ready+0x250>)


	// Check if SIM is ready
	send_AT_command(CHECK_SIM_READY);
	osDelay(100);
	while(strstr((char *) response, CHECK_RESPONSE) == NULL){
 8001484:	4e73      	ldr	r6, [pc, #460]	@ (8001654 <check_SIM_ready+0x244>)
 8001486:	4d74      	ldr	r5, [pc, #464]	@ (8001658 <check_SIM_ready+0x248>)
		receive_response("Check SIM\n");
 8001488:	4f7b      	ldr	r7, [pc, #492]	@ (8001678 <check_SIM_ready+0x268>)
	receive_response("Check MODEL IDENTIFICATION\n");
 800148a:	f7ff fddf 	bl	800104c <receive_response>
	osDelay(100);
 800148e:	2064      	movs	r0, #100	@ 0x64
 8001490:	f006 f9d0 	bl	8007834 <osDelay>
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8001494:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8001498:	2100      	movs	r1, #0
 800149a:	486f      	ldr	r0, [pc, #444]	@ (8001658 <check_SIM_ready+0x248>)
 800149c:	f009 fd06 	bl	800aeac <memset>
	SIM_UART_ReInitializeRxDMA();
 80014a0:	f7ff fdb8 	bl	8001014 <SIM_UART_ReInitializeRxDMA>
	send_AT_command(CHECK_SIM_READY);
 80014a4:	4875      	ldr	r0, [pc, #468]	@ (800167c <check_SIM_ready+0x26c>)
 80014a6:	f7ff fda5 	bl	8000ff4 <send_AT_command>
	osDelay(100);
 80014aa:	2064      	movs	r0, #100	@ 0x64
 80014ac:	f006 f9c2 	bl	8007834 <osDelay>
	while(strstr((char *) response, CHECK_RESPONSE) == NULL){
 80014b0:	2405      	movs	r4, #5
 80014b2:	4631      	mov	r1, r6
 80014b4:	4628      	mov	r0, r5
 80014b6:	f009 fd49 	bl	800af4c <strstr>
 80014ba:	2800      	cmp	r0, #0
 80014bc:	f000 80ad 	beq.w	800161a <check_SIM_ready+0x20a>
			memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
			SIM_UART_ReInitializeRxDMA();
			return 0;
		}
	}
	receive_response("Check SIM\n");
 80014c0:	486d      	ldr	r0, [pc, #436]	@ (8001678 <check_SIM_ready+0x268>)
	count_check_sim = 0;


	//GET SIM CCID
	send_AT_command(GET_SIM_CCID);
	while(strstr((char *) response, "+QCCID:") == NULL){
 80014c2:	4e6f      	ldr	r6, [pc, #444]	@ (8001680 <check_SIM_ready+0x270>)
 80014c4:	4d64      	ldr	r5, [pc, #400]	@ (8001658 <check_SIM_ready+0x248>)
		receive_response("Check SIM CCID\n");
 80014c6:	4f6f      	ldr	r7, [pc, #444]	@ (8001684 <check_SIM_ready+0x274>)
	receive_response("Check SIM\n");
 80014c8:	f7ff fdc0 	bl	800104c <receive_response>
	osDelay(100);
 80014cc:	2064      	movs	r0, #100	@ 0x64
 80014ce:	f006 f9b1 	bl	8007834 <osDelay>
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 80014d2:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 80014d6:	2100      	movs	r1, #0
 80014d8:	485f      	ldr	r0, [pc, #380]	@ (8001658 <check_SIM_ready+0x248>)
 80014da:	f009 fce7 	bl	800aeac <memset>
	SIM_UART_ReInitializeRxDMA();
 80014de:	f7ff fd99 	bl	8001014 <SIM_UART_ReInitializeRxDMA>
	osDelay(100);
 80014e2:	2064      	movs	r0, #100	@ 0x64
 80014e4:	f006 f9a6 	bl	8007834 <osDelay>
	send_AT_command(GET_SIM_CCID);
 80014e8:	4867      	ldr	r0, [pc, #412]	@ (8001688 <check_SIM_ready+0x278>)
 80014ea:	f7ff fd83 	bl	8000ff4 <send_AT_command>
	while(strstr((char *) response, "+QCCID:") == NULL){
 80014ee:	2405      	movs	r4, #5
 80014f0:	4631      	mov	r1, r6
 80014f2:	4628      	mov	r0, r5
 80014f4:	f009 fd2a 	bl	800af4c <strstr>
 80014f8:	2800      	cmp	r0, #0
 80014fa:	f000 809e 	beq.w	800163a <check_SIM_ready+0x22a>
			memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
			SIM_UART_ReInitializeRxDMA();
			return 0;
		}
	}
	receive_response("Check SIM CCID\n");
 80014fe:	4861      	ldr	r0, [pc, #388]	@ (8001684 <check_SIM_ready+0x274>)
	send_AT_command(CONFIGURE_CS_SERVICE);
	char *first_pointer = NULL;
	char *second_pointer = NULL;
	receive_response("Configuring Network Registration Status (CS Service)");
	while (first_pointer == NULL || second_pointer == NULL){
		send_AT_command("AT+CREG?\r\n");
 8001500:	4d62      	ldr	r5, [pc, #392]	@ (800168c <check_SIM_ready+0x27c>)
		osDelay(150);
		receive_response("Check Network Registration Status (CS Service)\n");
 8001502:	4e63      	ldr	r6, [pc, #396]	@ (8001690 <check_SIM_ready+0x280>)
		osDelay(300);
		first_pointer = strstr((char*)response, CHECK_RESPONSE);
 8001504:	4c53      	ldr	r4, [pc, #332]	@ (8001654 <check_SIM_ready+0x244>)
	receive_response("Check SIM CCID\n");
 8001506:	f7ff fda1 	bl	800104c <receive_response>
	osDelay(100);
 800150a:	2064      	movs	r0, #100	@ 0x64
 800150c:	f006 f992 	bl	8007834 <osDelay>
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8001510:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8001514:	2100      	movs	r1, #0
 8001516:	4850      	ldr	r0, [pc, #320]	@ (8001658 <check_SIM_ready+0x248>)
 8001518:	f009 fcc8 	bl	800aeac <memset>
	SIM_UART_ReInitializeRxDMA();
 800151c:	f7ff fd7a 	bl	8001014 <SIM_UART_ReInitializeRxDMA>
	send_AT_command(CONFIGURE_CS_SERVICE);
 8001520:	485c      	ldr	r0, [pc, #368]	@ (8001694 <check_SIM_ready+0x284>)
 8001522:	f7ff fd67 	bl	8000ff4 <send_AT_command>
	receive_response("Configuring Network Registration Status (CS Service)");
 8001526:	485c      	ldr	r0, [pc, #368]	@ (8001698 <check_SIM_ready+0x288>)
 8001528:	f7ff fd90 	bl	800104c <receive_response>
		send_AT_command("AT+CREG?\r\n");
 800152c:	4628      	mov	r0, r5
 800152e:	f7ff fd61 	bl	8000ff4 <send_AT_command>
		osDelay(150);
 8001532:	2096      	movs	r0, #150	@ 0x96
 8001534:	f006 f97e 	bl	8007834 <osDelay>
		receive_response("Check Network Registration Status (CS Service)\n");
 8001538:	4630      	mov	r0, r6
 800153a:	f7ff fd87 	bl	800104c <receive_response>
		osDelay(300);
 800153e:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001542:	f006 f977 	bl	8007834 <osDelay>
		first_pointer = strstr((char*)response, CHECK_RESPONSE);
 8001546:	4844      	ldr	r0, [pc, #272]	@ (8001658 <check_SIM_ready+0x248>)
 8001548:	4621      	mov	r1, r4
 800154a:	f009 fcff 	bl	800af4c <strstr>
		if(first_pointer != NULL){
 800154e:	2800      	cmp	r0, #0
 8001550:	d0ec      	beq.n	800152c <check_SIM_ready+0x11c>
			second_pointer = strstr(first_pointer+1, CHECK_RESPONSE);
 8001552:	4621      	mov	r1, r4
 8001554:	3001      	adds	r0, #1
 8001556:	f009 fcf9 	bl	800af4c <strstr>
	while (first_pointer == NULL || second_pointer == NULL){
 800155a:	2800      	cmp	r0, #0
 800155c:	d0e6      	beq.n	800152c <check_SIM_ready+0x11c>
			memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
			SIM_UART_ReInitializeRxDMA();
			return 0;
		}
	}
	osDelay(100);
 800155e:	2064      	movs	r0, #100	@ 0x64
 8001560:	f006 f968 	bl	8007834 <osDelay>
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8001564:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8001568:	2100      	movs	r1, #0
 800156a:	483b      	ldr	r0, [pc, #236]	@ (8001658 <check_SIM_ready+0x248>)
	send_AT_command(CONFIGURE_PS_SERVICE);
	first_pointer = NULL;
	second_pointer = NULL;
	receive_response("Configuring Network Registration Status (PS Service)");
	while (first_pointer == NULL || second_pointer == NULL){
		send_AT_command("AT+CGREG?\r\n");
 800156c:	4d4b      	ldr	r5, [pc, #300]	@ (800169c <check_SIM_ready+0x28c>)
		osDelay(150);
		receive_response("Check Network Registration Status (PS Service)\n");
 800156e:	4e4c      	ldr	r6, [pc, #304]	@ (80016a0 <check_SIM_ready+0x290>)
		osDelay(300);
		first_pointer = strstr((char*)response, CHECK_RESPONSE);
 8001570:	4c38      	ldr	r4, [pc, #224]	@ (8001654 <check_SIM_ready+0x244>)
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8001572:	f009 fc9b 	bl	800aeac <memset>
	SIM_UART_ReInitializeRxDMA();
 8001576:	f7ff fd4d 	bl	8001014 <SIM_UART_ReInitializeRxDMA>
	send_AT_command(CONFIGURE_PS_SERVICE);
 800157a:	484a      	ldr	r0, [pc, #296]	@ (80016a4 <check_SIM_ready+0x294>)
 800157c:	f7ff fd3a 	bl	8000ff4 <send_AT_command>
	receive_response("Configuring Network Registration Status (PS Service)");
 8001580:	4849      	ldr	r0, [pc, #292]	@ (80016a8 <check_SIM_ready+0x298>)
 8001582:	f7ff fd63 	bl	800104c <receive_response>
		send_AT_command("AT+CGREG?\r\n");
 8001586:	4628      	mov	r0, r5
 8001588:	f7ff fd34 	bl	8000ff4 <send_AT_command>
		osDelay(150);
 800158c:	2096      	movs	r0, #150	@ 0x96
 800158e:	f006 f951 	bl	8007834 <osDelay>
		receive_response("Check Network Registration Status (PS Service)\n");
 8001592:	4630      	mov	r0, r6
 8001594:	f7ff fd5a 	bl	800104c <receive_response>
		osDelay(300);
 8001598:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800159c:	f006 f94a 	bl	8007834 <osDelay>
		first_pointer = strstr((char*)response, CHECK_RESPONSE);
 80015a0:	482d      	ldr	r0, [pc, #180]	@ (8001658 <check_SIM_ready+0x248>)
 80015a2:	4621      	mov	r1, r4
 80015a4:	f009 fcd2 	bl	800af4c <strstr>
		if(first_pointer != NULL){
 80015a8:	2800      	cmp	r0, #0
 80015aa:	d0ec      	beq.n	8001586 <check_SIM_ready+0x176>
			second_pointer = strstr(first_pointer + 1, CHECK_RESPONSE);
 80015ac:	4621      	mov	r1, r4
 80015ae:	3001      	adds	r0, #1
 80015b0:	f009 fccc 	bl	800af4c <strstr>
	while (first_pointer == NULL || second_pointer == NULL){
 80015b4:	2800      	cmp	r0, #0
 80015b6:	d0e6      	beq.n	8001586 <check_SIM_ready+0x176>
			memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
			SIM_UART_ReInitializeRxDMA();
			return 0;
		}
	}
	osDelay(100);
 80015b8:	2064      	movs	r0, #100	@ 0x64
 80015ba:	f006 f93b 	bl	8007834 <osDelay>
	receive_response("Check Network Registration Status (PS Service)\n");
 80015be:	4838      	ldr	r0, [pc, #224]	@ (80016a0 <check_SIM_ready+0x290>)
	count_check_sim = 0;


	//CHECK SIGNAL QUALITY
	send_AT_command(CHECK_SIGNAL_QUALITY);
	while(strstr((char *) response, CHECK_RESPONSE) == NULL){
 80015c0:	4d24      	ldr	r5, [pc, #144]	@ (8001654 <check_SIM_ready+0x244>)
 80015c2:	4c25      	ldr	r4, [pc, #148]	@ (8001658 <check_SIM_ready+0x248>)
		receive_response("Check Signal Quality Report\n");
 80015c4:	4e39      	ldr	r6, [pc, #228]	@ (80016ac <check_SIM_ready+0x29c>)
	receive_response("Check Network Registration Status (PS Service)\n");
 80015c6:	f7ff fd41 	bl	800104c <receive_response>
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 80015ca:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 80015ce:	2100      	movs	r1, #0
 80015d0:	4821      	ldr	r0, [pc, #132]	@ (8001658 <check_SIM_ready+0x248>)
 80015d2:	f009 fc6b 	bl	800aeac <memset>
	SIM_UART_ReInitializeRxDMA();
 80015d6:	f7ff fd1d 	bl	8001014 <SIM_UART_ReInitializeRxDMA>
	send_AT_command(CHECK_SIGNAL_QUALITY);
 80015da:	4835      	ldr	r0, [pc, #212]	@ (80016b0 <check_SIM_ready+0x2a0>)
 80015dc:	f7ff fd0a 	bl	8000ff4 <send_AT_command>
	while(strstr((char *) response, CHECK_RESPONSE) == NULL){
 80015e0:	4629      	mov	r1, r5
 80015e2:	4620      	mov	r0, r4
 80015e4:	f009 fcb2 	bl	800af4c <strstr>
 80015e8:	b370      	cbz	r0, 8001648 <check_SIM_ready+0x238>
	}
	receive_response("Check Signal Quality Report\n");
 80015ea:	4830      	ldr	r0, [pc, #192]	@ (80016ac <check_SIM_ready+0x29c>)
 80015ec:	f7ff fd2e 	bl	800104c <receive_response>
	osDelay(100);
 80015f0:	2064      	movs	r0, #100	@ 0x64
 80015f2:	f006 f91f 	bl	8007834 <osDelay>
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 80015f6:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 80015fa:	2100      	movs	r1, #0
 80015fc:	4816      	ldr	r0, [pc, #88]	@ (8001658 <check_SIM_ready+0x248>)
 80015fe:	f009 fc55 	bl	800aeac <memset>
	SIM_UART_ReInitializeRxDMA();
 8001602:	f7ff fd07 	bl	8001014 <SIM_UART_ReInitializeRxDMA>
	

	return 1;
 8001606:	2001      	movs	r0, #1
 8001608:	e016      	b.n	8001638 <check_SIM_ready+0x228>
		receive_response("Check IMEI-0:\n");
 800160a:	4630      	mov	r0, r6
 800160c:	f7ff fd1e 	bl	800104c <receive_response>
 8001610:	e705      	b.n	800141e <check_SIM_ready+0xe>
		receive_response("Check MODEL IDENTIFICATION\n");
 8001612:	4630      	mov	r0, r6
 8001614:	f7ff fd1a 	bl	800104c <receive_response>
 8001618:	e72c      	b.n	8001474 <check_SIM_ready+0x64>
		receive_response("Check SIM\n");
 800161a:	4638      	mov	r0, r7
 800161c:	f7ff fd16 	bl	800104c <receive_response>
		if (count_check_sim >= 5){
 8001620:	3c01      	subs	r4, #1
 8001622:	f47f af46 	bne.w	80014b2 <check_SIM_ready+0xa2>
			memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8001626:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 800162a:	2100      	movs	r1, #0
 800162c:	480a      	ldr	r0, [pc, #40]	@ (8001658 <check_SIM_ready+0x248>)
 800162e:	f009 fc3d 	bl	800aeac <memset>
			SIM_UART_ReInitializeRxDMA();
 8001632:	f7ff fcef 	bl	8001014 <SIM_UART_ReInitializeRxDMA>
			return 0;
 8001636:	2000      	movs	r0, #0
}
 8001638:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		receive_response("Check SIM CCID\n");
 800163a:	4638      	mov	r0, r7
 800163c:	f7ff fd06 	bl	800104c <receive_response>
		if (count_check_sim >= TIME_LIMIT){
 8001640:	3c01      	subs	r4, #1
 8001642:	f47f af55 	bne.w	80014f0 <check_SIM_ready+0xe0>
 8001646:	e7ee      	b.n	8001626 <check_SIM_ready+0x216>
		receive_response("Check Signal Quality Report\n");
 8001648:	4630      	mov	r0, r6
 800164a:	f7ff fcff 	bl	800104c <receive_response>
 800164e:	e7c7      	b.n	80015e0 <check_SIM_ready+0x1d0>
 8001650:	0800ef21 	.word	0x0800ef21
 8001654:	0800ee93 	.word	0x0800ee93
 8001658:	20000bd8 	.word	0x20000bd8
 800165c:	0800ef2d 	.word	0x0800ef2d
 8001660:	0800ef5f 	.word	0x0800ef5f
 8001664:	20000b5c 	.word	0x20000b5c
 8001668:	0800ef3c 	.word	0x0800ef3c
 800166c:	200013c4 	.word	0x200013c4
 8001670:	0800f4df 	.word	0x0800f4df
 8001674:	0800ef55 	.word	0x0800ef55
 8001678:	0800ef86 	.word	0x0800ef86
 800167c:	0800ef7b 	.word	0x0800ef7b
 8001680:	0800efac 	.word	0x0800efac
 8001684:	0800ef9c 	.word	0x0800ef9c
 8001688:	0800ef91 	.word	0x0800ef91
 800168c:	0800eff5 	.word	0x0800eff5
 8001690:	0800f000 	.word	0x0800f000
 8001694:	0800efb4 	.word	0x0800efb4
 8001698:	0800efc0 	.word	0x0800efc0
 800169c:	0800f072 	.word	0x0800f072
 80016a0:	0800f07e 	.word	0x0800f07e
 80016a4:	0800f030 	.word	0x0800f030
 80016a8:	0800f03d 	.word	0x0800f03d
 80016ac:	0800f0b7 	.word	0x0800f0b7
 80016b0:	0800f0ae 	.word	0x0800f0ae

080016b4 <check_configure_APN>:

void check_configure_APN(){
 80016b4:	b508      	push	{r3, lr}
	send_AT_command(CHECK_CONFIGURE_APN);
 80016b6:	4805      	ldr	r0, [pc, #20]	@ (80016cc <check_configure_APN+0x18>)
 80016b8:	f7ff fc9c 	bl	8000ff4 <send_AT_command>
	osDelay(150);
 80016bc:	2096      	movs	r0, #150	@ 0x96
 80016be:	f006 f8b9 	bl	8007834 <osDelay>
	receive_response("Check Configuring APN\n");
}
 80016c2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	receive_response("Check Configuring APN\n");
 80016c6:	4802      	ldr	r0, [pc, #8]	@ (80016d0 <check_configure_APN+0x1c>)
 80016c8:	f7ff bcc0 	b.w	800104c <receive_response>
 80016cc:	0800f0d4 	.word	0x0800f0d4
 80016d0:	0800f0e2 	.word	0x0800f0e2

080016d4 <configure_APN>:

int configure_APN(int context_id){
 80016d4:	b530      	push	{r4, r5, lr}
 80016d6:	b0c7      	sub	sp, #284	@ 0x11c
	uint8_t command[256];
	snprintf((char *)command, sizeof(command), "AT+QICSGP=%d,%d,\"%s\",\"%s\",\"%s\",%d,0\r\n", context_id, 1, APN_NAME, APN_USERNAME, APN_PASSWD, APN_AUTHEN);
 80016d8:	2200      	movs	r2, #0
 80016da:	9204      	str	r2, [sp, #16]
 80016dc:	4a16      	ldr	r2, [pc, #88]	@ (8001738 <configure_APN+0x64>)
	char *first_pointer = NULL;
	char *second_pointer = NULL; 	
	while (first_pointer == NULL || second_pointer == NULL){
		check_configure_APN();
		osDelay(300);
		first_pointer = strstr((char*)response, CHECK_RESPONSE);
 80016de:	4c17      	ldr	r4, [pc, #92]	@ (800173c <configure_APN+0x68>)
 80016e0:	4d17      	ldr	r5, [pc, #92]	@ (8001740 <configure_APN+0x6c>)
	snprintf((char *)command, sizeof(command), "AT+QICSGP=%d,%d,\"%s\",\"%s\",\"%s\",%d,0\r\n", context_id, 1, APN_NAME, APN_USERNAME, APN_PASSWD, APN_AUTHEN);
 80016e2:	e9cd 2202 	strd	r2, r2, [sp, #8]
 80016e6:	4a17      	ldr	r2, [pc, #92]	@ (8001744 <configure_APN+0x70>)
 80016e8:	9201      	str	r2, [sp, #4]
 80016ea:	2201      	movs	r2, #1
int configure_APN(int context_id){
 80016ec:	4603      	mov	r3, r0
	snprintf((char *)command, sizeof(command), "AT+QICSGP=%d,%d,\"%s\",\"%s\",\"%s\",%d,0\r\n", context_id, 1, APN_NAME, APN_USERNAME, APN_PASSWD, APN_AUTHEN);
 80016ee:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80016f2:	9200      	str	r2, [sp, #0]
 80016f4:	a806      	add	r0, sp, #24
 80016f6:	4a14      	ldr	r2, [pc, #80]	@ (8001748 <configure_APN+0x74>)
 80016f8:	f009 fadc 	bl	800acb4 <sniprintf>
	send_AT_command((char*)command);
 80016fc:	a806      	add	r0, sp, #24
 80016fe:	f7ff fc79 	bl	8000ff4 <send_AT_command>
	osDelay(150);
 8001702:	2096      	movs	r0, #150	@ 0x96
 8001704:	f006 f896 	bl	8007834 <osDelay>
	receive_response("CONFIGURE APN\n");
 8001708:	4810      	ldr	r0, [pc, #64]	@ (800174c <configure_APN+0x78>)
 800170a:	f7ff fc9f 	bl	800104c <receive_response>
		check_configure_APN();
 800170e:	f7ff ffd1 	bl	80016b4 <check_configure_APN>
		osDelay(300);
 8001712:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001716:	f006 f88d 	bl	8007834 <osDelay>
		first_pointer = strstr((char*)response, CHECK_RESPONSE);
 800171a:	4908      	ldr	r1, [pc, #32]	@ (800173c <configure_APN+0x68>)
 800171c:	4628      	mov	r0, r5
 800171e:	f009 fc15 	bl	800af4c <strstr>
		if(first_pointer != NULL){
 8001722:	2800      	cmp	r0, #0
 8001724:	d0f3      	beq.n	800170e <configure_APN+0x3a>
			second_pointer = strstr(first_pointer+1, CHECK_RESPONSE);
 8001726:	4621      	mov	r1, r4
 8001728:	3001      	adds	r0, #1
 800172a:	f009 fc0f 	bl	800af4c <strstr>
	while (first_pointer == NULL || second_pointer == NULL){
 800172e:	2800      	cmp	r0, #0
 8001730:	d0ed      	beq.n	800170e <configure_APN+0x3a>
		}
	}
	return 1;
}
 8001732:	2001      	movs	r0, #1
 8001734:	b047      	add	sp, #284	@ 0x11c
 8001736:	bd30      	pop	{r4, r5, pc}
 8001738:	0800faed 	.word	0x0800faed
 800173c:	0800ee93 	.word	0x0800ee93
 8001740:	20000bd8 	.word	0x20000bd8
 8001744:	0800f11f 	.word	0x0800f11f
 8001748:	0800f0f9 	.word	0x0800f0f9
 800174c:	0800f129 	.word	0x0800f129

08001750 <check_activate_context>:

void check_activate_context(){
 8001750:	b500      	push	{lr}
 8001752:	b0a1      	sub	sp, #132	@ 0x84
	uint8_t command[128];
	snprintf((char *)command, sizeof(command), CHECK_ACTIVATE_CONTEXT);
 8001754:	4906      	ldr	r1, [pc, #24]	@ (8001770 <check_activate_context+0x20>)
 8001756:	4668      	mov	r0, sp
 8001758:	f00a f9f4 	bl	800bb44 <strcpy>
	send_AT_command((char*)command);
 800175c:	4668      	mov	r0, sp
 800175e:	f7ff fc49 	bl	8000ff4 <send_AT_command>
	receive_response("CHECK Activate CONTEXT\n");
 8001762:	4804      	ldr	r0, [pc, #16]	@ (8001774 <check_activate_context+0x24>)
 8001764:	f7ff fc72 	bl	800104c <receive_response>
}
 8001768:	b021      	add	sp, #132	@ 0x84
 800176a:	f85d fb04 	ldr.w	pc, [sp], #4
 800176e:	bf00      	nop
 8001770:	0800f138 	.word	0x0800f138
 8001774:	0800f144 	.word	0x0800f144

08001778 <activate_context>:
//		// Wait until the counter reaches 1000
//		while (__HAL_TIM_GET_COUNTER(&htim3) < 1000);
//	}
//	is_40s = 1;
//}
int activate_context(int context_id){
 8001778:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800177c:	b0a0      	sub	sp, #128	@ 0x80
 800177e:	4603      	mov	r3, r0
	uint8_t command[128];
	snprintf((char *)command, sizeof(command), "AT+QIACT=%d\r\n", context_id);
 8001780:	4a2d      	ldr	r2, [pc, #180]	@ (8001838 <activate_context+0xc0>)
		osDelay(300);
		if(count_check >= 50){
			count_check = 0;
			return 0;
		}
		if (strstr((char*)response, "ERROR") != NULL){
 8001782:	4f2e      	ldr	r7, [pc, #184]	@ (800183c <activate_context+0xc4>)
 8001784:	4e2e      	ldr	r6, [pc, #184]	@ (8001840 <activate_context+0xc8>)
			SIM_UART_ReInitializeRxDMA();
			count_error = 0;
			return 0;
		}

		receive_response("Check Activate Context\r\n");
 8001786:	f8df 80c4 	ldr.w	r8, [pc, #196]	@ 800184c <activate_context+0xd4>
	snprintf((char *)command, sizeof(command), "AT+QIACT=%d\r\n", context_id);
 800178a:	2180      	movs	r1, #128	@ 0x80
 800178c:	4668      	mov	r0, sp
 800178e:	f009 fa91 	bl	800acb4 <sniprintf>
	send_AT_command((char*)command);
 8001792:	4668      	mov	r0, sp
 8001794:	f7ff fc2e 	bl	8000ff4 <send_AT_command>
	osDelay(150);
 8001798:	2096      	movs	r0, #150	@ 0x96
 800179a:	f006 f84b 	bl	8007834 <osDelay>
	receive_response("Activate Context\r\n");
 800179e:	4829      	ldr	r0, [pc, #164]	@ (8001844 <activate_context+0xcc>)
 80017a0:	f7ff fc54 	bl	800104c <receive_response>
 80017a4:	2533      	movs	r5, #51	@ 0x33
	int count_error = 0;
 80017a6:	2400      	movs	r4, #0
		check_activate_context();
 80017a8:	f7ff ffd2 	bl	8001750 <check_activate_context>
		osDelay(300);
 80017ac:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80017b0:	f006 f840 	bl	8007834 <osDelay>
		if(count_check >= 50){
 80017b4:	3d01      	subs	r5, #1
 80017b6:	d021      	beq.n	80017fc <activate_context+0x84>
		if (strstr((char*)response, "ERROR") != NULL){
 80017b8:	4639      	mov	r1, r7
 80017ba:	4630      	mov	r0, r6
 80017bc:	f009 fbc6 	bl	800af4c <strstr>
 80017c0:	b300      	cbz	r0, 8001804 <activate_context+0x8c>
			osDelay(500);
 80017c2:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80017c6:	f006 f835 	bl	8007834 <osDelay>
			memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 80017ca:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 80017ce:	2100      	movs	r1, #0
 80017d0:	4630      	mov	r0, r6
 80017d2:	f009 fb6b 	bl	800aeac <memset>
			SIM_UART_ReInitializeRxDMA();
 80017d6:	f7ff fc1d 	bl	8001014 <SIM_UART_ReInitializeRxDMA>
			send_AT_command((char *) command);
 80017da:	4668      	mov	r0, sp
 80017dc:	f7ff fc0a 	bl	8000ff4 <send_AT_command>
			count_error++;
 80017e0:	3401      	adds	r4, #1
			osDelay(200);
 80017e2:	20c8      	movs	r0, #200	@ 0xc8
 80017e4:	f006 f826 	bl	8007834 <osDelay>
		if(count_error >=3){
 80017e8:	2c03      	cmp	r4, #3
 80017ea:	d10b      	bne.n	8001804 <activate_context+0x8c>
			memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 80017ec:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 80017f0:	2100      	movs	r1, #0
 80017f2:	4813      	ldr	r0, [pc, #76]	@ (8001840 <activate_context+0xc8>)
 80017f4:	f009 fb5a 	bl	800aeac <memset>
			SIM_UART_ReInitializeRxDMA();
 80017f8:	f7ff fc0c 	bl	8001014 <SIM_UART_ReInitializeRxDMA>
			return 0;
 80017fc:	2000      	movs	r0, #0
	}
//	HAL_TIM_Base_Start(&htim3);
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
	SIM_UART_ReInitializeRxDMA();
	return 1;
}
 80017fe:	b020      	add	sp, #128	@ 0x80
 8001800:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		receive_response("Check Activate Context\r\n");
 8001804:	4640      	mov	r0, r8
 8001806:	f7ff fc21 	bl	800104c <receive_response>
		first_pointer = strstr((char*)response, CHECK_RESPONSE);
 800180a:	490f      	ldr	r1, [pc, #60]	@ (8001848 <activate_context+0xd0>)
 800180c:	4630      	mov	r0, r6
 800180e:	f009 fb9d 	bl	800af4c <strstr>
		if(first_pointer != NULL){
 8001812:	2800      	cmp	r0, #0
 8001814:	d0c8      	beq.n	80017a8 <activate_context+0x30>
			second_pointer = strstr(first_pointer+1, CHECK_RESPONSE);
 8001816:	490c      	ldr	r1, [pc, #48]	@ (8001848 <activate_context+0xd0>)
 8001818:	3001      	adds	r0, #1
 800181a:	f009 fb97 	bl	800af4c <strstr>
	while ((first_pointer == NULL || second_pointer == NULL)){
 800181e:	2800      	cmp	r0, #0
 8001820:	d0c2      	beq.n	80017a8 <activate_context+0x30>
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8001822:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8001826:	2100      	movs	r1, #0
 8001828:	4805      	ldr	r0, [pc, #20]	@ (8001840 <activate_context+0xc8>)
 800182a:	f009 fb3f 	bl	800aeac <memset>
	SIM_UART_ReInitializeRxDMA();
 800182e:	f7ff fbf1 	bl	8001014 <SIM_UART_ReInitializeRxDMA>
	return 1;
 8001832:	2001      	movs	r0, #1
 8001834:	e7e3      	b.n	80017fe <activate_context+0x86>
 8001836:	bf00      	nop
 8001838:	0800f15c 	.word	0x0800f15c
 800183c:	0800f16a 	.word	0x0800f16a
 8001840:	20000bd8 	.word	0x20000bd8
 8001844:	0800f176 	.word	0x0800f176
 8001848:	0800ee93 	.word	0x0800ee93
 800184c:	0800f170 	.word	0x0800f170

08001850 <deactivate_context>:

int deactivate_context(int context_id){
 8001850:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001852:	4604      	mov	r4, r0
 8001854:	b0a1      	sub	sp, #132	@ 0x84
	uint8_t command[128];
	int count_check = 0;
	osDelay(100);
 8001856:	2064      	movs	r0, #100	@ 0x64
 8001858:	f005 ffec 	bl	8007834 <osDelay>
	snprintf((char *)command, sizeof(command), "AT+QIDEACT=%d\r\n", context_id);
 800185c:	4623      	mov	r3, r4
 800185e:	4a1d      	ldr	r2, [pc, #116]	@ (80018d4 <deactivate_context+0x84>)
	send_AT_command((char*)command);
	while(strstr((char *) response, CHECK_RESPONSE) == NULL){
 8001860:	4e1d      	ldr	r6, [pc, #116]	@ (80018d8 <deactivate_context+0x88>)
 8001862:	4d1e      	ldr	r5, [pc, #120]	@ (80018dc <deactivate_context+0x8c>)
		receive_response("DEACTIVATE CONTEXT\n");
 8001864:	4f1e      	ldr	r7, [pc, #120]	@ (80018e0 <deactivate_context+0x90>)
	snprintf((char *)command, sizeof(command), "AT+QIDEACT=%d\r\n", context_id);
 8001866:	2180      	movs	r1, #128	@ 0x80
 8001868:	4668      	mov	r0, sp
 800186a:	f009 fa23 	bl	800acb4 <sniprintf>
	send_AT_command((char*)command);
 800186e:	4668      	mov	r0, sp
 8001870:	f7ff fbc0 	bl	8000ff4 <send_AT_command>
	while(strstr((char *) response, CHECK_RESPONSE) == NULL){
 8001874:	2415      	movs	r4, #21
 8001876:	4631      	mov	r1, r6
 8001878:	4628      	mov	r0, r5
 800187a:	f009 fb67 	bl	800af4c <strstr>
 800187e:	b178      	cbz	r0, 80018a0 <deactivate_context+0x50>
			return 0;
		}
		count_check++;
		osDelay(200);
	}
	receive_response("DEACTIVATE CONTEXT\n");
 8001880:	4817      	ldr	r0, [pc, #92]	@ (80018e0 <deactivate_context+0x90>)
 8001882:	f7ff fbe3 	bl	800104c <receive_response>
	osDelay(100);
 8001886:	2064      	movs	r0, #100	@ 0x64
 8001888:	f005 ffd4 	bl	8007834 <osDelay>
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 800188c:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8001890:	2100      	movs	r1, #0
 8001892:	4812      	ldr	r0, [pc, #72]	@ (80018dc <deactivate_context+0x8c>)
 8001894:	f009 fb0a 	bl	800aeac <memset>
	SIM_UART_ReInitializeRxDMA();
 8001898:	f7ff fbbc 	bl	8001014 <SIM_UART_ReInitializeRxDMA>
	return 1;
 800189c:	2001      	movs	r0, #1
 800189e:	e010      	b.n	80018c2 <deactivate_context+0x72>
		receive_response("DEACTIVATE CONTEXT\n");
 80018a0:	4638      	mov	r0, r7
 80018a2:	f7ff fbd3 	bl	800104c <receive_response>
		if (strstr((char *) response, "ERROR") != NULL){
 80018a6:	490f      	ldr	r1, [pc, #60]	@ (80018e4 <deactivate_context+0x94>)
 80018a8:	4628      	mov	r0, r5
 80018aa:	f009 fb4f 	bl	800af4c <strstr>
 80018ae:	b150      	cbz	r0, 80018c6 <deactivate_context+0x76>
			memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 80018b0:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 80018b4:	2100      	movs	r1, #0
 80018b6:	4809      	ldr	r0, [pc, #36]	@ (80018dc <deactivate_context+0x8c>)
 80018b8:	f009 faf8 	bl	800aeac <memset>
			SIM_UART_ReInitializeRxDMA();
 80018bc:	f7ff fbaa 	bl	8001014 <SIM_UART_ReInitializeRxDMA>
			return 0;
 80018c0:	2000      	movs	r0, #0
}
 80018c2:	b021      	add	sp, #132	@ 0x84
 80018c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if(count_check >= 20){
 80018c6:	3c01      	subs	r4, #1
 80018c8:	d0f2      	beq.n	80018b0 <deactivate_context+0x60>
		osDelay(200);
 80018ca:	20c8      	movs	r0, #200	@ 0xc8
 80018cc:	f005 ffb2 	bl	8007834 <osDelay>
 80018d0:	e7d1      	b.n	8001876 <deactivate_context+0x26>
 80018d2:	bf00      	nop
 80018d4:	0800f189 	.word	0x0800f189
 80018d8:	0800ee93 	.word	0x0800ee93
 80018dc:	20000bd8 	.word	0x20000bd8
 80018e0:	0800f199 	.word	0x0800f199
 80018e4:	0800f16a 	.word	0x0800f16a

080018e8 <open_socket_service>:


int open_socket_service(int context_id, int connect_id, int local_port, int access_mode){
 80018e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80018ec:	b0e6      	sub	sp, #408	@ 0x198
	const int timeout_seconds = 50; // Receive response each second
	//TODO: CHANGE timeout to 150 after testing
	int elapsed_time_ms = 0;
	uint8_t command[256];
	snprintf((char *)command, sizeof(command), "AT+QIOPEN=%d,%d,\"%s\",\"%s\",%d,%d,%d\r\n",context_id, connect_id, SERVICE_TYPE, IP_ADDRESS, REMOTE_PORT, local_port, access_mode);
 80018ee:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80018f2:	f241 3397 	movw	r3, #5015	@ 0x1397
 80018f6:	9303      	str	r3, [sp, #12]
 80018f8:	4b4a      	ldr	r3, [pc, #296]	@ (8001a24 <open_socket_service+0x13c>)
 80018fa:	9302      	str	r3, [sp, #8]
 80018fc:	4b4a      	ldr	r3, [pc, #296]	@ (8001a28 <open_socket_service+0x140>)
 80018fe:	4a4b      	ldr	r2, [pc, #300]	@ (8001a2c <open_socket_service+0x144>)
	//time_t start = time(NULL);
	int count_error = 0;
	uart_transmit_string(&huart1, (uint8_t *) "Init start TIME\n");
	while(first_pointer == NULL && elapsed_time_ms < timeout_seconds){
		char output_elapsed[128];
		receive_response("Check OPEN socket service: \r\n");
 8001900:	f8df 9140 	ldr.w	r9, [pc, #320]	@ 8001a44 <open_socket_service+0x15c>
		if (strstr((char *) response, "ERROR") != NULL){
 8001904:	f8df a14c 	ldr.w	sl, [pc, #332]	@ 8001a54 <open_socket_service+0x16c>
 8001908:	f8df 812c 	ldr.w	r8, [pc, #300]	@ 8001a38 <open_socket_service+0x150>
	snprintf((char *)command, sizeof(command), "AT+QIOPEN=%d,%d,\"%s\",\"%s\",%d,%d,%d\r\n",context_id, connect_id, SERVICE_TYPE, IP_ADDRESS, REMOTE_PORT, local_port, access_mode);
 800190c:	e9cd 1300 	strd	r1, r3, [sp]
int open_socket_service(int context_id, int connect_id, int local_port, int access_mode){
 8001910:	460c      	mov	r4, r1
	snprintf((char *)command, sizeof(command), "AT+QIOPEN=%d,%d,\"%s\",\"%s\",%d,%d,%d\r\n",context_id, connect_id, SERVICE_TYPE, IP_ADDRESS, REMOTE_PORT, local_port, access_mode);
 8001912:	4603      	mov	r3, r0
 8001914:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001918:	a826      	add	r0, sp, #152	@ 0x98
 800191a:	f009 f9cb 	bl	800acb4 <sniprintf>
	send_AT_command((char *) command);
 800191e:	a826      	add	r0, sp, #152	@ 0x98
 8001920:	f7ff fb68 	bl	8000ff4 <send_AT_command>
	osDelay(100);
 8001924:	2064      	movs	r0, #100	@ 0x64
 8001926:	f005 ff85 	bl	8007834 <osDelay>
	uart_transmit_string(&huart1, (uint8_t *) "Init start TIME\n");
 800192a:	4941      	ldr	r1, [pc, #260]	@ (8001a30 <open_socket_service+0x148>)
 800192c:	4841      	ldr	r0, [pc, #260]	@ (8001a34 <open_socket_service+0x14c>)
 800192e:	f002 fec7 	bl	80046c0 <uart_transmit_string>
	int count_error = 0;
 8001932:	2700      	movs	r7, #0
	int elapsed_time_ms = 0;
 8001934:	463e      	mov	r6, r7
		receive_response("Check OPEN socket service: \r\n");
 8001936:	4648      	mov	r0, r9
 8001938:	f7ff fb88 	bl	800104c <receive_response>
		if (strstr((char *) response, "ERROR") != NULL){
 800193c:	4651      	mov	r1, sl
 800193e:	4640      	mov	r0, r8
 8001940:	f009 fb04 	bl	800af4c <strstr>
 8001944:	b1e8      	cbz	r0, 8001982 <open_socket_service+0x9a>
			memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8001946:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 800194a:	2100      	movs	r1, #0
 800194c:	4640      	mov	r0, r8
 800194e:	f009 faad 	bl	800aeac <memset>
			SIM_UART_ReInitializeRxDMA();
 8001952:	f7ff fb5f 	bl	8001014 <SIM_UART_ReInitializeRxDMA>
			count_error++;
			osDelay(500);
 8001956:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800195a:	f005 ff6b 	bl	8007834 <osDelay>
			count_error++;
 800195e:	3701      	adds	r7, #1
			send_AT_command((char *) command);
 8001960:	a826      	add	r0, sp, #152	@ 0x98
 8001962:	f7ff fb47 	bl	8000ff4 <send_AT_command>
		}
		if(count_error >= 6){
 8001966:	2f06      	cmp	r7, #6
 8001968:	d10b      	bne.n	8001982 <open_socket_service+0x9a>
			memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 800196a:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 800196e:	2100      	movs	r1, #0
		snprintf((char *)command, sizeof(command), "AT+QISTATE=1,%d\r\n",connect_id);
		send_AT_command((char*) command);
		while(strstr((char *) response, CHECK_RESPONSE) == NULL){
			receive_response("Check SOCKET CONNECTION\n");
			if (strstr((char *) response, "ERROR") != NULL){
				memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8001970:	4831      	ldr	r0, [pc, #196]	@ (8001a38 <open_socket_service+0x150>)
 8001972:	f009 fa9b 	bl	800aeac <memset>
				SIM_UART_ReInitializeRxDMA();
 8001976:	f7ff fb4d 	bl	8001014 <SIM_UART_ReInitializeRxDMA>
			return 0;
 800197a:	2000      	movs	r0, #0
		memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
		SIM_UART_ReInitializeRxDMA();
		return 1;
	}
	else return 0;
}
 800197c:	b066      	add	sp, #408	@ 0x198
 800197e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		first_pointer = strstr((char*)response, "+QIOPEN:");
 8001982:	492e      	ldr	r1, [pc, #184]	@ (8001a3c <open_socket_service+0x154>)
 8001984:	4640      	mov	r0, r8
 8001986:	f009 fae1 	bl	800af4c <strstr>
		elapsed_time_ms++;
 800198a:	3601      	adds	r6, #1
		snprintf(output_elapsed, 128, "Elapsed Time: %d\n", elapsed_time_ms);
 800198c:	4a2c      	ldr	r2, [pc, #176]	@ (8001a40 <open_socket_service+0x158>)
		first_pointer = strstr((char*)response, "+QIOPEN:");
 800198e:	4605      	mov	r5, r0
		snprintf(output_elapsed, 128, "Elapsed Time: %d\n", elapsed_time_ms);
 8001990:	4633      	mov	r3, r6
 8001992:	2180      	movs	r1, #128	@ 0x80
 8001994:	a806      	add	r0, sp, #24
 8001996:	f009 f98d 	bl	800acb4 <sniprintf>
		uart_transmit_string(&huart1, (uint8_t *)output_elapsed);
 800199a:	4826      	ldr	r0, [pc, #152]	@ (8001a34 <open_socket_service+0x14c>)
 800199c:	a906      	add	r1, sp, #24
 800199e:	f002 fe8f 	bl	80046c0 <uart_transmit_string>
		osDelay(300);
 80019a2:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80019a6:	f005 ff45 	bl	8007834 <osDelay>
	while(first_pointer == NULL && elapsed_time_ms < timeout_seconds){
 80019aa:	b90d      	cbnz	r5, 80019b0 <open_socket_service+0xc8>
 80019ac:	2e32      	cmp	r6, #50	@ 0x32
 80019ae:	d1c2      	bne.n	8001936 <open_socket_service+0x4e>
	receive_response("Check OPEN socket service: \r\n");
 80019b0:	4824      	ldr	r0, [pc, #144]	@ (8001a44 <open_socket_service+0x15c>)
 80019b2:	f7ff fb4b 	bl	800104c <receive_response>
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 80019b6:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 80019ba:	2100      	movs	r1, #0
 80019bc:	481e      	ldr	r0, [pc, #120]	@ (8001a38 <open_socket_service+0x150>)
 80019be:	f009 fa75 	bl	800aeac <memset>
	SIM_UART_ReInitializeRxDMA();
 80019c2:	f7ff fb27 	bl	8001014 <SIM_UART_ReInitializeRxDMA>
	if(first_pointer != NULL)
 80019c6:	2d00      	cmp	r5, #0
 80019c8:	d0d7      	beq.n	800197a <open_socket_service+0x92>
		snprintf((char *)command, sizeof(command), "AT+QISTATE=1,%d\r\n",connect_id);
 80019ca:	4a1f      	ldr	r2, [pc, #124]	@ (8001a48 <open_socket_service+0x160>)
		while(strstr((char *) response, CHECK_RESPONSE) == NULL){
 80019cc:	4e1f      	ldr	r6, [pc, #124]	@ (8001a4c <open_socket_service+0x164>)
 80019ce:	4d1a      	ldr	r5, [pc, #104]	@ (8001a38 <open_socket_service+0x150>)
			receive_response("Check SOCKET CONNECTION\n");
 80019d0:	4f1f      	ldr	r7, [pc, #124]	@ (8001a50 <open_socket_service+0x168>)
		snprintf((char *)command, sizeof(command), "AT+QISTATE=1,%d\r\n",connect_id);
 80019d2:	4623      	mov	r3, r4
 80019d4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80019d8:	a826      	add	r0, sp, #152	@ 0x98
 80019da:	f009 f96b 	bl	800acb4 <sniprintf>
		send_AT_command((char*) command);
 80019de:	a826      	add	r0, sp, #152	@ 0x98
 80019e0:	f7ff fb08 	bl	8000ff4 <send_AT_command>
		while(strstr((char *) response, CHECK_RESPONSE) == NULL){
 80019e4:	4631      	mov	r1, r6
 80019e6:	4628      	mov	r0, r5
 80019e8:	f009 fab0 	bl	800af4c <strstr>
 80019ec:	4604      	mov	r4, r0
 80019ee:	b160      	cbz	r0, 8001a0a <open_socket_service+0x122>
		osDelay(100);
 80019f0:	2064      	movs	r0, #100	@ 0x64
 80019f2:	f005 ff1f 	bl	8007834 <osDelay>
		memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 80019f6:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 80019fa:	2100      	movs	r1, #0
 80019fc:	480e      	ldr	r0, [pc, #56]	@ (8001a38 <open_socket_service+0x150>)
 80019fe:	f009 fa55 	bl	800aeac <memset>
		SIM_UART_ReInitializeRxDMA();
 8001a02:	f7ff fb07 	bl	8001014 <SIM_UART_ReInitializeRxDMA>
		return 1;
 8001a06:	2001      	movs	r0, #1
 8001a08:	e7b8      	b.n	800197c <open_socket_service+0x94>
			receive_response("Check SOCKET CONNECTION\n");
 8001a0a:	4638      	mov	r0, r7
 8001a0c:	f7ff fb1e 	bl	800104c <receive_response>
			if (strstr((char *) response, "ERROR") != NULL){
 8001a10:	4910      	ldr	r1, [pc, #64]	@ (8001a54 <open_socket_service+0x16c>)
 8001a12:	4628      	mov	r0, r5
 8001a14:	f009 fa9a 	bl	800af4c <strstr>
 8001a18:	2800      	cmp	r0, #0
 8001a1a:	d0e3      	beq.n	80019e4 <open_socket_service+0xfc>
				memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8001a1c:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8001a20:	4621      	mov	r1, r4
 8001a22:	e7a5      	b.n	8001970 <open_socket_service+0x88>
 8001a24:	0800f1d2 	.word	0x0800f1d2
 8001a28:	0800f1e1 	.word	0x0800f1e1
 8001a2c:	0800f1ad 	.word	0x0800f1ad
 8001a30:	0800f1e5 	.word	0x0800f1e5
 8001a34:	200013c4 	.word	0x200013c4
 8001a38:	20000bd8 	.word	0x20000bd8
 8001a3c:	0800f214 	.word	0x0800f214
 8001a40:	0800f21d 	.word	0x0800f21d
 8001a44:	0800f1f6 	.word	0x0800f1f6
 8001a48:	0800f22f 	.word	0x0800f22f
 8001a4c:	0800ee93 	.word	0x0800ee93
 8001a50:	0800f241 	.word	0x0800f241
 8001a54:	0800f16a 	.word	0x0800f16a

08001a58 <check_socket_connection>:

//QPING command
int check_socket_connection(int context_ID){
 8001a58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001a5c:	b0c3      	sub	sp, #268	@ 0x10c
	uint8_t command[256];
	int count_check =0;
	snprintf((char *)command, sizeof(command), "AT+QPING=%d,\"%s\"\r\n",context_ID, IP_ADDRESS);
 8001a5e:	4a34      	ldr	r2, [pc, #208]	@ (8001b30 <check_socket_connection+0xd8>)
 8001a60:	9200      	str	r2, [sp, #0]
int check_socket_connection(int context_ID){
 8001a62:	4603      	mov	r3, r0
	snprintf((char *)command, sizeof(command), "AT+QPING=%d,\"%s\"\r\n",context_ID, IP_ADDRESS);
 8001a64:	4a33      	ldr	r2, [pc, #204]	@ (8001b34 <check_socket_connection+0xdc>)
			memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
			SIM_UART_ReInitializeRxDMA();
			count_check = 0;
			return 0;
		}
		first_pointer = strstr((char*)response, "+QPING:");
 8001a66:	f8df 80d8 	ldr.w	r8, [pc, #216]	@ 8001b40 <check_socket_connection+0xe8>
 8001a6a:	f8df b0d0 	ldr.w	fp, [pc, #208]	@ 8001b3c <check_socket_connection+0xe4>
	snprintf((char *)command, sizeof(command), "AT+QPING=%d,\"%s\"\r\n",context_ID, IP_ADDRESS);
 8001a6e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001a72:	a802      	add	r0, sp, #8
 8001a74:	f009 f91e 	bl	800acb4 <sniprintf>
	send_AT_command((char*)command);
 8001a78:	a802      	add	r0, sp, #8
 8001a7a:	f7ff fabb 	bl	8000ff4 <send_AT_command>
	char *fifth_pointer = NULL;
 8001a7e:	2400      	movs	r4, #0
	char *fourth_pointer = NULL;
 8001a80:	4627      	mov	r7, r4
	char *third_pointer = NULL;
 8001a82:	4626      	mov	r6, r4
	char *second_pointer = NULL;
 8001a84:	4625      	mov	r5, r4
	int count_check =0;
 8001a86:	46a2      	mov	sl, r4
		receive_response("Check SOCKET CONNECTION\n");
 8001a88:	482b      	ldr	r0, [pc, #172]	@ (8001b38 <check_socket_connection+0xe0>)
 8001a8a:	f7ff fadf 	bl	800104c <receive_response>
		if(count_check > 7){
 8001a8e:	f1ba 0f08 	cmp.w	sl, #8
 8001a92:	d10b      	bne.n	8001aac <check_socket_connection+0x54>
			memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8001a94:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8001a98:	2100      	movs	r1, #0
 8001a9a:	4828      	ldr	r0, [pc, #160]	@ (8001b3c <check_socket_connection+0xe4>)
 8001a9c:	f009 fa06 	bl	800aeac <memset>
			SIM_UART_ReInitializeRxDMA();
 8001aa0:	f7ff fab8 	bl	8001014 <SIM_UART_ReInitializeRxDMA>
			return 0;
 8001aa4:	2000      	movs	r0, #0
	receive_response("Check SOCKET CONNECTION\n");
	osDelay(100);
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
	SIM_UART_ReInitializeRxDMA();
	return 1;
}
 8001aa6:	b043      	add	sp, #268	@ 0x10c
 8001aa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		first_pointer = strstr((char*)response, "+QPING:");
 8001aac:	4641      	mov	r1, r8
 8001aae:	4658      	mov	r0, fp
 8001ab0:	f009 fa4c 	bl	800af4c <strstr>
		if(first_pointer != NULL){
 8001ab4:	4681      	mov	r9, r0
 8001ab6:	b130      	cbz	r0, 8001ac6 <check_socket_connection+0x6e>
			 second_pointer = strstr(first_pointer+1, "+QPING:");
 8001ab8:	4641      	mov	r1, r8
 8001aba:	3001      	adds	r0, #1
 8001abc:	f009 fa46 	bl	800af4c <strstr>
			 count_check = 0;
 8001ac0:	f04f 0a00 	mov.w	sl, #0
			 second_pointer = strstr(first_pointer+1, "+QPING:");
 8001ac4:	4605      	mov	r5, r0
		if(second_pointer != NULL){
 8001ac6:	b135      	cbz	r5, 8001ad6 <check_socket_connection+0x7e>
			 third_pointer = strstr(second_pointer+1, "+QPING:");
 8001ac8:	4641      	mov	r1, r8
 8001aca:	1c68      	adds	r0, r5, #1
 8001acc:	f009 fa3e 	bl	800af4c <strstr>
			 count_check = 0;
 8001ad0:	f04f 0a00 	mov.w	sl, #0
			 third_pointer = strstr(second_pointer+1, "+QPING:");
 8001ad4:	4606      	mov	r6, r0
		if(third_pointer != NULL){
 8001ad6:	b136      	cbz	r6, 8001ae6 <check_socket_connection+0x8e>
			 fourth_pointer = strstr(third_pointer+1, "+QPING:");
 8001ad8:	4641      	mov	r1, r8
 8001ada:	1c70      	adds	r0, r6, #1
 8001adc:	f009 fa36 	bl	800af4c <strstr>
			 count_check = 0;
 8001ae0:	f04f 0a00 	mov.w	sl, #0
			 fourth_pointer = strstr(third_pointer+1, "+QPING:");
 8001ae4:	4607      	mov	r7, r0
		if(fourth_pointer != NULL){
 8001ae6:	b137      	cbz	r7, 8001af6 <check_socket_connection+0x9e>
			 fifth_pointer = strstr(fourth_pointer+1, "+QPING:");
 8001ae8:	4641      	mov	r1, r8
 8001aea:	1c78      	adds	r0, r7, #1
 8001aec:	f009 fa2e 	bl	800af4c <strstr>
			 count_check = 0;
 8001af0:	f04f 0a00 	mov.w	sl, #0
			 fifth_pointer = strstr(fourth_pointer+1, "+QPING:");
 8001af4:	4604      	mov	r4, r0
		count_check++;
 8001af6:	f10a 0a01 	add.w	sl, sl, #1
	while(first_pointer == NULL || second_pointer == NULL || third_pointer == NULL || fourth_pointer == NULL || fifth_pointer == NULL){
 8001afa:	f1b9 0f00 	cmp.w	r9, #0
 8001afe:	d0c3      	beq.n	8001a88 <check_socket_connection+0x30>
 8001b00:	2d00      	cmp	r5, #0
 8001b02:	d0c1      	beq.n	8001a88 <check_socket_connection+0x30>
 8001b04:	2e00      	cmp	r6, #0
 8001b06:	d0bf      	beq.n	8001a88 <check_socket_connection+0x30>
 8001b08:	2f00      	cmp	r7, #0
 8001b0a:	d0bd      	beq.n	8001a88 <check_socket_connection+0x30>
 8001b0c:	2c00      	cmp	r4, #0
 8001b0e:	d0bb      	beq.n	8001a88 <check_socket_connection+0x30>
	receive_response("Check SOCKET CONNECTION\n");
 8001b10:	4809      	ldr	r0, [pc, #36]	@ (8001b38 <check_socket_connection+0xe0>)
 8001b12:	f7ff fa9b 	bl	800104c <receive_response>
	osDelay(100);
 8001b16:	2064      	movs	r0, #100	@ 0x64
 8001b18:	f005 fe8c 	bl	8007834 <osDelay>
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8001b1c:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8001b20:	2100      	movs	r1, #0
 8001b22:	4806      	ldr	r0, [pc, #24]	@ (8001b3c <check_socket_connection+0xe4>)
 8001b24:	f009 f9c2 	bl	800aeac <memset>
	SIM_UART_ReInitializeRxDMA();
 8001b28:	f7ff fa74 	bl	8001014 <SIM_UART_ReInitializeRxDMA>
	return 1;
 8001b2c:	2001      	movs	r0, #1
 8001b2e:	e7ba      	b.n	8001aa6 <check_socket_connection+0x4e>
 8001b30:	0800f1d2 	.word	0x0800f1d2
 8001b34:	0800f25a 	.word	0x0800f25a
 8001b38:	0800f241 	.word	0x0800f241
 8001b3c:	20000bd8 	.word	0x20000bd8
 8001b40:	0800f26d 	.word	0x0800f26d

08001b44 <formatToHexString>:

// Function to format data into a hex string
int formatToHexString( const uint8_t* data, int length, char* output, int max_len, int writeIndex) {
 8001b44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    for (int i = 0; i < length; i++) {
 8001b48:	9c08      	ldr	r4, [sp, #32]
        if (writeIndex + 2 >= max_len) {
            // Prevent buffer overflow
            return -1;
        }
        sprintf(output + writeIndex, "%02X", data[i]);
 8001b4a:	f8df a034 	ldr.w	sl, [pc, #52]	@ 8001b80 <formatToHexString+0x3c>
int formatToHexString( const uint8_t* data, int length, char* output, int max_len, int writeIndex) {
 8001b4e:	4607      	mov	r7, r0
 8001b50:	460e      	mov	r6, r1
 8001b52:	4698      	mov	r8, r3
    for (int i = 0; i < length; i++) {
 8001b54:	2500      	movs	r5, #0
        sprintf(output + writeIndex, "%02X", data[i]);
 8001b56:	f1a2 0902 	sub.w	r9, r2, #2
    for (int i = 0; i < length; i++) {
 8001b5a:	42b5      	cmp	r5, r6
 8001b5c:	db02      	blt.n	8001b64 <formatToHexString+0x20>
        writeIndex += 2;
    }
    return writeIndex;
}
 8001b5e:	4620      	mov	r0, r4
 8001b60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        if (writeIndex + 2 >= max_len) {
 8001b64:	3402      	adds	r4, #2
 8001b66:	4544      	cmp	r4, r8
 8001b68:	da07      	bge.n	8001b7a <formatToHexString+0x36>
        sprintf(output + writeIndex, "%02X", data[i]);
 8001b6a:	5d7a      	ldrb	r2, [r7, r5]
 8001b6c:	4651      	mov	r1, sl
 8001b6e:	eb09 0004 	add.w	r0, r9, r4
 8001b72:	f009 f8d3 	bl	800ad1c <siprintf>
    for (int i = 0; i < length; i++) {
 8001b76:	3501      	adds	r5, #1
 8001b78:	e7ef      	b.n	8001b5a <formatToHexString+0x16>
            return -1;
 8001b7a:	f04f 34ff 	mov.w	r4, #4294967295
 8001b7e:	e7ee      	b.n	8001b5e <formatToHexString+0x1a>
 8001b80:	0800fdac 	.word	0x0800fdac

08001b84 <generateRegistrationMessage>:

int generateRegistrationMessage(const JT808_TerminalRegistration *data, char *hexString, int max_len) {
 8001b84:	b573      	push	{r0, r1, r4, r5, r6, lr}
    int writeIndex = 0;
    writeIndex = formatToHexString(&(data->start_mask), sizeof(data->start_mask), hexString, max_len, writeIndex);
 8001b86:	2300      	movs	r3, #0
int generateRegistrationMessage(const JT808_TerminalRegistration *data, char *hexString, int max_len) {
 8001b88:	460c      	mov	r4, r1
 8001b8a:	4615      	mov	r5, r2
    writeIndex = formatToHexString(&(data->start_mask), sizeof(data->start_mask), hexString, max_len, writeIndex);
 8001b8c:	9300      	str	r3, [sp, #0]
 8001b8e:	4613      	mov	r3, r2
 8001b90:	460a      	mov	r2, r1
 8001b92:	2101      	movs	r1, #1
int generateRegistrationMessage(const JT808_TerminalRegistration *data, char *hexString, int max_len) {
 8001b94:	4606      	mov	r6, r0
    writeIndex = formatToHexString(&(data->start_mask), sizeof(data->start_mask), hexString, max_len, writeIndex);
 8001b96:	f7ff ffd5 	bl	8001b44 <formatToHexString>
    writeIndex = formatToHexString(data->message_type, sizeof(data->message_type), hexString, max_len, writeIndex);
 8001b9a:	462b      	mov	r3, r5
 8001b9c:	9000      	str	r0, [sp, #0]
 8001b9e:	4622      	mov	r2, r4
 8001ba0:	2102      	movs	r1, #2
 8001ba2:	1c70      	adds	r0, r6, #1
 8001ba4:	f7ff ffce 	bl	8001b44 <formatToHexString>
    writeIndex = formatToHexString(data->message_length, sizeof(data->message_length), hexString, max_len, writeIndex);
 8001ba8:	462b      	mov	r3, r5
 8001baa:	9000      	str	r0, [sp, #0]
 8001bac:	4622      	mov	r2, r4
 8001bae:	2102      	movs	r1, #2
 8001bb0:	1cf0      	adds	r0, r6, #3
 8001bb2:	f7ff ffc7 	bl	8001b44 <formatToHexString>
    writeIndex = formatToHexString(data->terminal_phone_number, sizeof(data->terminal_phone_number), hexString, max_len, writeIndex);
 8001bb6:	462b      	mov	r3, r5
 8001bb8:	9000      	str	r0, [sp, #0]
 8001bba:	4622      	mov	r2, r4
 8001bbc:	2106      	movs	r1, #6
 8001bbe:	1d70      	adds	r0, r6, #5
 8001bc0:	f7ff ffc0 	bl	8001b44 <formatToHexString>
    writeIndex = formatToHexString(data->message_serial_number, sizeof(data->message_serial_number), hexString, max_len, writeIndex);
 8001bc4:	462b      	mov	r3, r5
 8001bc6:	9000      	str	r0, [sp, #0]
 8001bc8:	4622      	mov	r2, r4
 8001bca:	2102      	movs	r1, #2
 8001bcc:	f106 000b 	add.w	r0, r6, #11
 8001bd0:	f7ff ffb8 	bl	8001b44 <formatToHexString>
    writeIndex = formatToHexString(data->province_ID, sizeof(data->province_ID), hexString, max_len, writeIndex);
 8001bd4:	462b      	mov	r3, r5
 8001bd6:	9000      	str	r0, [sp, #0]
 8001bd8:	4622      	mov	r2, r4
 8001bda:	2102      	movs	r1, #2
 8001bdc:	f106 000d 	add.w	r0, r6, #13
 8001be0:	f7ff ffb0 	bl	8001b44 <formatToHexString>
    writeIndex = formatToHexString(data->city_ID, sizeof(data->city_ID), hexString, max_len, writeIndex);
 8001be4:	462b      	mov	r3, r5
 8001be6:	9000      	str	r0, [sp, #0]
 8001be8:	4622      	mov	r2, r4
 8001bea:	2102      	movs	r1, #2
 8001bec:	f106 000f 	add.w	r0, r6, #15
 8001bf0:	f7ff ffa8 	bl	8001b44 <formatToHexString>
    writeIndex = formatToHexString(data->manufacturer_ID, sizeof(data->manufacturer_ID), hexString, max_len, writeIndex);
 8001bf4:	462b      	mov	r3, r5
 8001bf6:	9000      	str	r0, [sp, #0]
 8001bf8:	4622      	mov	r2, r4
 8001bfa:	2105      	movs	r1, #5
 8001bfc:	f106 0011 	add.w	r0, r6, #17
 8001c00:	f7ff ffa0 	bl	8001b44 <formatToHexString>
    writeIndex = formatToHexString(data->terminal_type, sizeof(data->terminal_type), hexString, max_len, writeIndex);
 8001c04:	462b      	mov	r3, r5
 8001c06:	9000      	str	r0, [sp, #0]
 8001c08:	4622      	mov	r2, r4
 8001c0a:	2108      	movs	r1, #8
 8001c0c:	f106 0016 	add.w	r0, r6, #22
 8001c10:	f7ff ff98 	bl	8001b44 <formatToHexString>
    writeIndex = formatToHexString(data->terminal_ID, sizeof(data->terminal_ID), hexString, max_len, writeIndex);
 8001c14:	462b      	mov	r3, r5
 8001c16:	9000      	str	r0, [sp, #0]
 8001c18:	4622      	mov	r2, r4
 8001c1a:	2107      	movs	r1, #7
 8001c1c:	f106 001e 	add.w	r0, r6, #30
 8001c20:	f7ff ff90 	bl	8001b44 <formatToHexString>
    writeIndex = formatToHexString(&(data->plate_color), sizeof(data->plate_color), hexString, max_len, writeIndex);
 8001c24:	462b      	mov	r3, r5
 8001c26:	9000      	str	r0, [sp, #0]
 8001c28:	4622      	mov	r2, r4
 8001c2a:	2101      	movs	r1, #1
 8001c2c:	f106 0025 	add.w	r0, r6, #37	@ 0x25
 8001c30:	f7ff ff88 	bl	8001b44 <formatToHexString>
    writeIndex = formatToHexString(data->plate_no, sizeof(data->plate_no), hexString, max_len, writeIndex);
 8001c34:	462b      	mov	r3, r5
 8001c36:	9000      	str	r0, [sp, #0]
 8001c38:	4622      	mov	r2, r4
 8001c3a:	2114      	movs	r1, #20
 8001c3c:	f106 0026 	add.w	r0, r6, #38	@ 0x26
 8001c40:	f7ff ff80 	bl	8001b44 <formatToHexString>
    writeIndex = formatToHexString(&(data->check_sum), sizeof(data->check_sum), hexString, max_len, writeIndex);
 8001c44:	462b      	mov	r3, r5
 8001c46:	9000      	str	r0, [sp, #0]
 8001c48:	4622      	mov	r2, r4
 8001c4a:	2101      	movs	r1, #1
 8001c4c:	f106 003a 	add.w	r0, r6, #58	@ 0x3a
 8001c50:	f7ff ff78 	bl	8001b44 <formatToHexString>
    writeIndex = formatToHexString(&(data->end_mask), sizeof(data->end_mask), hexString, max_len, writeIndex);
 8001c54:	462b      	mov	r3, r5
 8001c56:	9000      	str	r0, [sp, #0]
 8001c58:	4622      	mov	r2, r4
 8001c5a:	2101      	movs	r1, #1
 8001c5c:	f106 003b 	add.w	r0, r6, #59	@ 0x3b
 8001c60:	f7ff ff70 	bl	8001b44 <formatToHexString>
    if (writeIndex < 0) {
        // Handle error in formatting
        return -1;
    }
    return writeIndex;
}
 8001c64:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 8001c68:	b002      	add	sp, #8
 8001c6a:	bd70      	pop	{r4, r5, r6, pc}

08001c6c <generateLocationInfoMessage>:

int generateLocationInfoMessage(const JT808_LocationInfoReport* report, char* hexString, int max_len) {
 8001c6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001c70:	b0aa      	sub	sp, #168	@ 0xa8
   const uint8_t* fields[] = {
        &(report->start_mask), report->message_type, report->message_length,
 8001c72:	1c43      	adds	r3, r0, #1
   const uint8_t* fields[] = {
 8001c74:	9303      	str	r3, [sp, #12]
        &(report->start_mask), report->message_type, report->message_length,
 8001c76:	1cc3      	adds	r3, r0, #3
   const uint8_t* fields[] = {
 8001c78:	9304      	str	r3, [sp, #16]
        report->terminal_phone_number, report->terminal_serial_number, report->alarm,
 8001c7a:	1d43      	adds	r3, r0, #5
   const uint8_t* fields[] = {
 8001c7c:	9305      	str	r3, [sp, #20]
        report->terminal_phone_number, report->terminal_serial_number, report->alarm,
 8001c7e:	f100 030b 	add.w	r3, r0, #11
   const uint8_t* fields[] = {
 8001c82:	9306      	str	r3, [sp, #24]
        report->terminal_phone_number, report->terminal_serial_number, report->alarm,
 8001c84:	f100 030d 	add.w	r3, r0, #13
   const uint8_t* fields[] = {
 8001c88:	9307      	str	r3, [sp, #28]
        report->status, report->latitude, report->longitude, report->altitude,
 8001c8a:	f100 0311 	add.w	r3, r0, #17
   const uint8_t* fields[] = {
 8001c8e:	9308      	str	r3, [sp, #32]
        report->status, report->latitude, report->longitude, report->altitude,
 8001c90:	f100 0315 	add.w	r3, r0, #21
   const uint8_t* fields[] = {
 8001c94:	9309      	str	r3, [sp, #36]	@ 0x24
        report->status, report->latitude, report->longitude, report->altitude,
 8001c96:	f100 0319 	add.w	r3, r0, #25
   const uint8_t* fields[] = {
 8001c9a:	930a      	str	r3, [sp, #40]	@ 0x28
        report->status, report->latitude, report->longitude, report->altitude,
 8001c9c:	f100 031d 	add.w	r3, r0, #29
   const uint8_t* fields[] = {
 8001ca0:	930b      	str	r3, [sp, #44]	@ 0x2c
        report->speed, report->direction, report->timestamp, report->mileage,
 8001ca2:	f100 031f 	add.w	r3, r0, #31
   const uint8_t* fields[] = {
 8001ca6:	930c      	str	r3, [sp, #48]	@ 0x30
        report->speed, report->direction, report->timestamp, report->mileage,
 8001ca8:	f100 0321 	add.w	r3, r0, #33	@ 0x21
   const uint8_t* fields[] = {
 8001cac:	930d      	str	r3, [sp, #52]	@ 0x34
        report->speed, report->direction, report->timestamp, report->mileage,
 8001cae:	f100 0323 	add.w	r3, r0, #35	@ 0x23
   const uint8_t* fields[] = {
 8001cb2:	930e      	str	r3, [sp, #56]	@ 0x38
        report->speed, report->direction, report->timestamp, report->mileage,
 8001cb4:	f100 0329 	add.w	r3, r0, #41	@ 0x29
   const uint8_t* fields[] = {
 8001cb8:	930f      	str	r3, [sp, #60]	@ 0x3c
        report->oil, report->driving_record_speed, report->vehicle_id, report->signal,
 8001cba:	f100 032f 	add.w	r3, r0, #47	@ 0x2f
   const uint8_t* fields[] = {
 8001cbe:	9310      	str	r3, [sp, #64]	@ 0x40
        report->oil, report->driving_record_speed, report->vehicle_id, report->signal,
 8001cc0:	f100 0331 	add.w	r3, r0, #49	@ 0x31
   const uint8_t* fields[] = {
 8001cc4:	9311      	str	r3, [sp, #68]	@ 0x44
        report->oil, report->driving_record_speed, report->vehicle_id, report->signal,
 8001cc6:	f100 0333 	add.w	r3, r0, #51	@ 0x33
   const uint8_t* fields[] = {
 8001cca:	9312      	str	r3, [sp, #72]	@ 0x48
        report->oil, report->driving_record_speed, report->vehicle_id, report->signal,
 8001ccc:	f100 0336 	add.w	r3, r0, #54	@ 0x36
   const uint8_t* fields[] = {
 8001cd0:	9002      	str	r0, [sp, #8]
 8001cd2:	9313      	str	r3, [sp, #76]	@ 0x4c
        report->additional, &(report->end_mask)
    };
    int lengths[] = { 1, 2, 2, 6, 2, 4, 4, 4, 4, 2, 2, 2, 6, 6, 2, 2, 3, 1, 9, 1 };
 8001cd4:	af16      	add	r7, sp, #88	@ 0x58
        report->additional, &(report->end_mask)
 8001cd6:	f100 0337 	add.w	r3, r0, #55	@ 0x37
 8001cda:	3040      	adds	r0, #64	@ 0x40
   const uint8_t* fields[] = {
 8001cdc:	9015      	str	r0, [sp, #84]	@ 0x54
int generateLocationInfoMessage(const JT808_LocationInfoReport* report, char* hexString, int max_len) {
 8001cde:	460d      	mov	r5, r1
 8001ce0:	4616      	mov	r6, r2
    int lengths[] = { 1, 2, 2, 6, 2, 4, 4, 4, 4, 2, 2, 2, 6, 6, 2, 2, 3, 1, 9, 1 };
 8001ce2:	490f      	ldr	r1, [pc, #60]	@ (8001d20 <generateLocationInfoMessage+0xb4>)
   const uint8_t* fields[] = {
 8001ce4:	9314      	str	r3, [sp, #80]	@ 0x50
    int lengths[] = { 1, 2, 2, 6, 2, 4, 4, 4, 4, 2, 2, 2, 6, 6, 2, 2, 3, 1, 9, 1 };
 8001ce6:	2250      	movs	r2, #80	@ 0x50
 8001ce8:	4638      	mov	r0, r7

    int writeIndex = 0;
    for (int i = 0; i < sizeof(fields) / sizeof(fields[0]); i++) {
 8001cea:	2400      	movs	r4, #0
    int lengths[] = { 1, 2, 2, 6, 2, 4, 4, 4, 4, 2, 2, 2, 6, 6, 2, 2, 3, 1, 9, 1 };
 8001cec:	f009 ff32 	bl	800bb54 <memcpy>
        writeIndex = formatToHexString(fields[i], lengths[i], hexString, max_len, writeIndex);
 8001cf0:	f10d 0808 	add.w	r8, sp, #8
    int writeIndex = 0;
 8001cf4:	4620      	mov	r0, r4
        writeIndex = formatToHexString(fields[i], lengths[i], hexString, max_len, writeIndex);
 8001cf6:	9000      	str	r0, [sp, #0]
 8001cf8:	f857 1024 	ldr.w	r1, [r7, r4, lsl #2]
 8001cfc:	f858 0024 	ldr.w	r0, [r8, r4, lsl #2]
 8001d00:	4633      	mov	r3, r6
 8001d02:	462a      	mov	r2, r5
 8001d04:	f7ff ff1e 	bl	8001b44 <formatToHexString>
        if (writeIndex < 0) return -1;
 8001d08:	2800      	cmp	r0, #0
 8001d0a:	db05      	blt.n	8001d18 <generateLocationInfoMessage+0xac>
    for (int i = 0; i < sizeof(fields) / sizeof(fields[0]); i++) {
 8001d0c:	3401      	adds	r4, #1
 8001d0e:	2c14      	cmp	r4, #20
 8001d10:	d1f1      	bne.n	8001cf6 <generateLocationInfoMessage+0x8a>
    }
    return writeIndex;
}
 8001d12:	b02a      	add	sp, #168	@ 0xa8
 8001d14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if (writeIndex < 0) return -1;
 8001d18:	f04f 30ff 	mov.w	r0, #4294967295
 8001d1c:	e7f9      	b.n	8001d12 <generateLocationInfoMessage+0xa6>
 8001d1e:	bf00      	nop
 8001d20:	0800ed38 	.word	0x0800ed38

08001d24 <login_to_server>:



int login_to_server(int connect_id, const JT808_TerminalRegistration *reg_msg){
 8001d24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d26:	f5ad 7d03 	sub.w	sp, sp, #524	@ 0x20c
	uint8_t command[256];  // Increased buffer size
	char hexString[128] = {0};
 8001d2a:	2400      	movs	r4, #0
int login_to_server(int connect_id, const JT808_TerminalRegistration *reg_msg){
 8001d2c:	460f      	mov	r7, r1
	char hexString[128] = {0};
 8001d2e:	ae02      	add	r6, sp, #8
 8001d30:	227c      	movs	r2, #124	@ 0x7c
 8001d32:	4621      	mov	r1, r4
int login_to_server(int connect_id, const JT808_TerminalRegistration *reg_msg){
 8001d34:	4605      	mov	r5, r0
	char hexString[128] = {0};
 8001d36:	a803      	add	r0, sp, #12
 8001d38:	6034      	str	r4, [r6, #0]
 8001d3a:	f009 f8b7 	bl	800aeac <memset>
	int count_check = 0;
	int result = generateRegistrationMessage(reg_msg, hexString, 128);
 8001d3e:	2280      	movs	r2, #128	@ 0x80
 8001d40:	4631      	mov	r1, r6
 8001d42:	4638      	mov	r0, r7
 8001d44:	f7ff ff1e 	bl	8001b84 <generateRegistrationMessage>
	if (result < 0) {
 8001d48:	42a0      	cmp	r0, r4
 8001d4a:	da05      	bge.n	8001d58 <login_to_server+0x34>
		uart_transmit_string(&huart1,(uint8_t*) "ERROR: FAILED to generate message string\n");
 8001d4c:	4926      	ldr	r1, [pc, #152]	@ (8001de8 <login_to_server+0xc4>)
 8001d4e:	4827      	ldr	r0, [pc, #156]	@ (8001dec <login_to_server+0xc8>)
 8001d50:	f002 fcb6 	bl	80046c0 <uart_transmit_string>
		return 1;
 8001d54:	2001      	movs	r0, #1
 8001d56:	e02f      	b.n	8001db8 <login_to_server+0x94>
	}

	// Format the AT command with the hex message
	snprintf((char*)command, sizeof(command), "AT+QISENDEX=%d,\"%s\"\r\n", connect_id, hexString);
 8001d58:	462b      	mov	r3, r5
 8001d5a:	4a25      	ldr	r2, [pc, #148]	@ (8001df0 <login_to_server+0xcc>)
 8001d5c:	9600      	str	r6, [sp, #0]
 8001d5e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001d62:	a842      	add	r0, sp, #264	@ 0x108
 8001d64:	f008 ffa6 	bl	800acb4 <sniprintf>
	//snprintf((char *)command, sizeof(command), "AT+QISENDEX=%d,\"%s\"\r\n", connect_id, message);
	send_AT_command((char*)command);
 8001d68:	a842      	add	r0, sp, #264	@ 0x108
 8001d6a:	f7ff f943 	bl	8000ff4 <send_AT_command>

	while(strstr((char *) response, CHECK_RESPONSE) == NULL){
 8001d6e:	4e21      	ldr	r6, [pc, #132]	@ (8001df4 <login_to_server+0xd0>)
 8001d70:	4d21      	ldr	r5, [pc, #132]	@ (8001df8 <login_to_server+0xd4>)
		char output_elapsed[128];
		receive_response("Check sending to server\n");
 8001d72:	4f22      	ldr	r7, [pc, #136]	@ (8001dfc <login_to_server+0xd8>)
	while(strstr((char *) response, CHECK_RESPONSE) == NULL){
 8001d74:	4631      	mov	r1, r6
 8001d76:	4628      	mov	r0, r5
 8001d78:	f009 f8e8 	bl	800af4c <strstr>
 8001d7c:	b170      	cbz	r0, 8001d9c <login_to_server+0x78>
		count_check++;
		snprintf(output_elapsed, 128, "Elapsed Time: %d\n", count_check);
		uart_transmit_string(&huart1, (uint8_t *)output_elapsed);
		osDelay(200);
	}
	receive_response("Check sending to server\n");
 8001d7e:	481f      	ldr	r0, [pc, #124]	@ (8001dfc <login_to_server+0xd8>)
 8001d80:	f7ff f964 	bl	800104c <receive_response>
	osDelay(100);
 8001d84:	2064      	movs	r0, #100	@ 0x64
 8001d86:	f005 fd55 	bl	8007834 <osDelay>
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8001d8a:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8001d8e:	2100      	movs	r1, #0
 8001d90:	4819      	ldr	r0, [pc, #100]	@ (8001df8 <login_to_server+0xd4>)
 8001d92:	f009 f88b 	bl	800aeac <memset>
	SIM_UART_ReInitializeRxDMA();
 8001d96:	f7ff f93d 	bl	8001014 <SIM_UART_ReInitializeRxDMA>
	return 1;
 8001d9a:	e7db      	b.n	8001d54 <login_to_server+0x30>
		receive_response("Check sending to server\n");
 8001d9c:	4638      	mov	r0, r7
 8001d9e:	f7ff f955 	bl	800104c <receive_response>
		if(count_check >= 3){
 8001da2:	2c03      	cmp	r4, #3
 8001da4:	d10b      	bne.n	8001dbe <login_to_server+0x9a>
			memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8001da6:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8001daa:	2100      	movs	r1, #0
 8001dac:	4812      	ldr	r0, [pc, #72]	@ (8001df8 <login_to_server+0xd4>)
 8001dae:	f009 f87d 	bl	800aeac <memset>
			SIM_UART_ReInitializeRxDMA();
 8001db2:	f7ff f92f 	bl	8001014 <SIM_UART_ReInitializeRxDMA>
			return 0;
 8001db6:	2000      	movs	r0, #0
}
 8001db8:	f50d 7d03 	add.w	sp, sp, #524	@ 0x20c
 8001dbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (strstr((char*) response, "ERROR") != NULL){
 8001dbe:	4910      	ldr	r1, [pc, #64]	@ (8001e00 <login_to_server+0xdc>)
 8001dc0:	4628      	mov	r0, r5
 8001dc2:	f009 f8c3 	bl	800af4c <strstr>
 8001dc6:	2800      	cmp	r0, #0
 8001dc8:	d1ed      	bne.n	8001da6 <login_to_server+0x82>
		count_check++;
 8001dca:	3401      	adds	r4, #1
		snprintf(output_elapsed, 128, "Elapsed Time: %d\n", count_check);
 8001dcc:	4a0d      	ldr	r2, [pc, #52]	@ (8001e04 <login_to_server+0xe0>)
 8001dce:	4623      	mov	r3, r4
 8001dd0:	2180      	movs	r1, #128	@ 0x80
 8001dd2:	a822      	add	r0, sp, #136	@ 0x88
 8001dd4:	f008 ff6e 	bl	800acb4 <sniprintf>
		uart_transmit_string(&huart1, (uint8_t *)output_elapsed);
 8001dd8:	4804      	ldr	r0, [pc, #16]	@ (8001dec <login_to_server+0xc8>)
 8001dda:	a922      	add	r1, sp, #136	@ 0x88
 8001ddc:	f002 fc70 	bl	80046c0 <uart_transmit_string>
		osDelay(200);
 8001de0:	20c8      	movs	r0, #200	@ 0xc8
 8001de2:	f005 fd27 	bl	8007834 <osDelay>
 8001de6:	e7c5      	b.n	8001d74 <login_to_server+0x50>
 8001de8:	0800f275 	.word	0x0800f275
 8001dec:	200013c4 	.word	0x200013c4
 8001df0:	0800f29f 	.word	0x0800f29f
 8001df4:	0800ee93 	.word	0x0800ee93
 8001df8:	20000bd8 	.word	0x20000bd8
 8001dfc:	0800f2b5 	.word	0x0800f2b5
 8001e00:	0800f16a 	.word	0x0800f16a
 8001e04:	0800f21d 	.word	0x0800f21d

08001e08 <send_location_to_server>:

int send_location_to_server(int connect_id, const JT808_LocationInfoReport *location_info){
 8001e08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001e0c:	f5ad 7d04 	sub.w	sp, sp, #528	@ 0x210
	uint8_t command[256];  // Increased buffer size
	char hexString[131] = {0};
 8001e10:	2400      	movs	r4, #0
int send_location_to_server(int connect_id, const JT808_LocationInfoReport *location_info){
 8001e12:	460f      	mov	r7, r1
	char hexString[131] = {0};
 8001e14:	ae23      	add	r6, sp, #140	@ 0x8c
 8001e16:	227f      	movs	r2, #127	@ 0x7f
 8001e18:	4621      	mov	r1, r4
int send_location_to_server(int connect_id, const JT808_LocationInfoReport *location_info){
 8001e1a:	4605      	mov	r5, r0
	char hexString[131] = {0};
 8001e1c:	a824      	add	r0, sp, #144	@ 0x90
 8001e1e:	6034      	str	r4, [r6, #0]
 8001e20:	f009 f844 	bl	800aeac <memset>
	int count_check = 0;
	int result = generateLocationInfoMessage(location_info, hexString, 131);
 8001e24:	2283      	movs	r2, #131	@ 0x83
 8001e26:	4631      	mov	r1, r6
 8001e28:	4638      	mov	r0, r7
 8001e2a:	f7ff ff1f 	bl	8001c6c <generateLocationInfoMessage>
	if (result < 0) {
 8001e2e:	42a0      	cmp	r0, r4
 8001e30:	da05      	bge.n	8001e3e <send_location_to_server+0x36>
		uart_transmit_string(&huart1,(uint8_t*) "ERROR: FAILED to generate message string\n");
 8001e32:	4930      	ldr	r1, [pc, #192]	@ (8001ef4 <send_location_to_server+0xec>)
 8001e34:	4830      	ldr	r0, [pc, #192]	@ (8001ef8 <send_location_to_server+0xf0>)
 8001e36:	f002 fc43 	bl	80046c0 <uart_transmit_string>
		return 1;
 8001e3a:	2001      	movs	r0, #1
 8001e3c:	e030      	b.n	8001ea0 <send_location_to_server+0x98>
	}

	// Format the AT command with the hex message
	snprintf((char *) command, sizeof(command), "AT+QISENDEX=%d,\"%s\"\r\n", connect_id, hexString);
 8001e3e:	4a2f      	ldr	r2, [pc, #188]	@ (8001efc <send_location_to_server+0xf4>)
 8001e40:	9600      	str	r6, [sp, #0]
 8001e42:	462b      	mov	r3, r5
 8001e44:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001e48:	a844      	add	r0, sp, #272	@ 0x110
 8001e4a:	f008 ff33 	bl	800acb4 <sniprintf>
	//snprintf((char *)command, sizeof(command), "AT+QISENDEX=%d,\"%s\"\r\n", connect_id, message);
	send_AT_command((char*)command);
 8001e4e:	a844      	add	r0, sp, #272	@ 0x110
 8001e50:	f7ff f8d0 	bl	8000ff4 <send_AT_command>

	while(strstr((char *) response, "+QIURC") == NULL){
 8001e54:	4f2a      	ldr	r7, [pc, #168]	@ (8001f00 <send_location_to_server+0xf8>)
 8001e56:	4e2b      	ldr	r6, [pc, #172]	@ (8001f04 <send_location_to_server+0xfc>)
		char output_elapsed[128];
		receive_response("Check sending to server\n");
 8001e58:	f8df 80ac 	ldr.w	r8, [pc, #172]	@ 8001f08 <send_location_to_server+0x100>
	while(strstr((char *) response, "+QIURC") == NULL){
 8001e5c:	4639      	mov	r1, r7
 8001e5e:	4630      	mov	r0, r6
 8001e60:	f009 f874 	bl	800af4c <strstr>
 8001e64:	b170      	cbz	r0, 8001e84 <send_location_to_server+0x7c>
		count_check++;
		snprintf(output_elapsed, 128, "Elapsed Time: %d\n", count_check);
		uart_transmit_string(&huart1, (uint8_t *)output_elapsed);
		osDelay(200);
	}
	receive_response("Check sending to server\n");
 8001e66:	4828      	ldr	r0, [pc, #160]	@ (8001f08 <send_location_to_server+0x100>)
 8001e68:	f7ff f8f0 	bl	800104c <receive_response>
	osDelay(100);
 8001e6c:	2064      	movs	r0, #100	@ 0x64
 8001e6e:	f005 fce1 	bl	8007834 <osDelay>
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8001e72:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8001e76:	2100      	movs	r1, #0
 8001e78:	4822      	ldr	r0, [pc, #136]	@ (8001f04 <send_location_to_server+0xfc>)
 8001e7a:	f009 f817 	bl	800aeac <memset>
	SIM_UART_ReInitializeRxDMA();
 8001e7e:	f7ff f8c9 	bl	8001014 <SIM_UART_ReInitializeRxDMA>
	return 1;
 8001e82:	e7da      	b.n	8001e3a <send_location_to_server+0x32>
		receive_response("Check sending to server\n");
 8001e84:	4640      	mov	r0, r8
 8001e86:	f7ff f8e1 	bl	800104c <receive_response>
		if(count_check >= 6){
 8001e8a:	2c06      	cmp	r4, #6
 8001e8c:	d10c      	bne.n	8001ea8 <send_location_to_server+0xa0>
			memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8001e8e:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8001e92:	2100      	movs	r1, #0
 8001e94:	481b      	ldr	r0, [pc, #108]	@ (8001f04 <send_location_to_server+0xfc>)
 8001e96:	f009 f809 	bl	800aeac <memset>
			SIM_UART_ReInitializeRxDMA();
 8001e9a:	f7ff f8bb 	bl	8001014 <SIM_UART_ReInitializeRxDMA>
			return 0;
 8001e9e:	2000      	movs	r0, #0
}
 8001ea0:	f50d 7d04 	add.w	sp, sp, #528	@ 0x210
 8001ea4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (strstr((char*) response, "ERROR") != NULL){
 8001ea8:	4918      	ldr	r1, [pc, #96]	@ (8001f0c <send_location_to_server+0x104>)
 8001eaa:	4630      	mov	r0, r6
 8001eac:	f009 f84e 	bl	800af4c <strstr>
 8001eb0:	4605      	mov	r5, r0
 8001eb2:	2800      	cmp	r0, #0
 8001eb4:	d1eb      	bne.n	8001e8e <send_location_to_server+0x86>
		 if (strstr((char*)response, "closed") != NULL) {
 8001eb6:	4916      	ldr	r1, [pc, #88]	@ (8001f10 <send_location_to_server+0x108>)
 8001eb8:	4630      	mov	r0, r6
 8001eba:	f009 f847 	bl	800af4c <strstr>
 8001ebe:	b148      	cbz	r0, 8001ed4 <send_location_to_server+0xcc>
			 memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8001ec0:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8001ec4:	4629      	mov	r1, r5
 8001ec6:	480f      	ldr	r0, [pc, #60]	@ (8001f04 <send_location_to_server+0xfc>)
 8001ec8:	f008 fff0 	bl	800aeac <memset>
			 SIM_UART_ReInitializeRxDMA();
 8001ecc:	f7ff f8a2 	bl	8001014 <SIM_UART_ReInitializeRxDMA>
			 return 2;
 8001ed0:	2002      	movs	r0, #2
 8001ed2:	e7e5      	b.n	8001ea0 <send_location_to_server+0x98>
		count_check++;
 8001ed4:	3401      	adds	r4, #1
		snprintf(output_elapsed, 128, "Elapsed Time: %d\n", count_check);
 8001ed6:	4a0f      	ldr	r2, [pc, #60]	@ (8001f14 <send_location_to_server+0x10c>)
 8001ed8:	4623      	mov	r3, r4
 8001eda:	2180      	movs	r1, #128	@ 0x80
 8001edc:	a803      	add	r0, sp, #12
 8001ede:	f008 fee9 	bl	800acb4 <sniprintf>
		uart_transmit_string(&huart1, (uint8_t *)output_elapsed);
 8001ee2:	4805      	ldr	r0, [pc, #20]	@ (8001ef8 <send_location_to_server+0xf0>)
 8001ee4:	a903      	add	r1, sp, #12
 8001ee6:	f002 fbeb 	bl	80046c0 <uart_transmit_string>
		osDelay(200);
 8001eea:	20c8      	movs	r0, #200	@ 0xc8
 8001eec:	f005 fca2 	bl	8007834 <osDelay>
 8001ef0:	e7b4      	b.n	8001e5c <send_location_to_server+0x54>
 8001ef2:	bf00      	nop
 8001ef4:	0800f275 	.word	0x0800f275
 8001ef8:	200013c4 	.word	0x200013c4
 8001efc:	0800f29f 	.word	0x0800f29f
 8001f00:	0800f2d5 	.word	0x0800f2d5
 8001f04:	20000bd8 	.word	0x20000bd8
 8001f08:	0800f2b5 	.word	0x0800f2b5
 8001f0c:	0800f16a 	.word	0x0800f16a
 8001f10:	0800f2ce 	.word	0x0800f2ce
 8001f14:	0800f21d 	.word	0x0800f21d

08001f18 <check_data_sent_to_server>:


int check_data_sent_to_server(int connect_id){
 8001f18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001f1c:	b0e6      	sub	sp, #408	@ 0x198
	uint8_t command[256];
	int count_check = 0;
	uint8_t output[128];
	snprintf((char *)command, sizeof(command), "AT+QISEND=%d,0\r\n", connect_id);
 8001f1e:	4603      	mov	r3, r0
 8001f20:	4a57      	ldr	r2, [pc, #348]	@ (8002080 <check_data_sent_to_server+0x168>)
	send_AT_command((char*)command);
	while(strstr((char *) response, CHECK_RESPONSE) == NULL){
 8001f22:	4f58      	ldr	r7, [pc, #352]	@ (8002084 <check_data_sent_to_server+0x16c>)
 8001f24:	4e58      	ldr	r6, [pc, #352]	@ (8002088 <check_data_sent_to_server+0x170>)
			count_check = 0;
			memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
			SIM_UART_ReInitializeRxDMA();
			return 0;
		}
		if (strstr((char*) response, "ERROR") != NULL){
 8001f26:	f8df 8178 	ldr.w	r8, [pc, #376]	@ 80020a0 <check_data_sent_to_server+0x188>
	snprintf((char *)command, sizeof(command), "AT+QISEND=%d,0\r\n", connect_id);
 8001f2a:	f44f 7180 	mov.w	r1, #256	@ 0x100
int check_data_sent_to_server(int connect_id){
 8001f2e:	4604      	mov	r4, r0
	snprintf((char *)command, sizeof(command), "AT+QISEND=%d,0\r\n", connect_id);
 8001f30:	a826      	add	r0, sp, #152	@ 0x98
 8001f32:	f008 febf 	bl	800acb4 <sniprintf>
	send_AT_command((char*)command);
 8001f36:	a826      	add	r0, sp, #152	@ 0x98
 8001f38:	f7ff f85c 	bl	8000ff4 <send_AT_command>
	int count_check = 0;
 8001f3c:	2500      	movs	r5, #0
	while(strstr((char *) response, CHECK_RESPONSE) == NULL){
 8001f3e:	4639      	mov	r1, r7
 8001f40:	4630      	mov	r0, r6
 8001f42:	f009 f803 	bl	800af4c <strstr>
 8001f46:	2800      	cmp	r0, #0
 8001f48:	d063      	beq.n	8002012 <check_data_sent_to_server+0xfa>
		receive_response("Check sending to server\n");
	}

	int sentBytes, ackedBytes, unackedBytes;

	int result = sscanf((char*)response, "AT+QISEND=0,0 +QISEND: %d,%d,%d", &sentBytes, &ackedBytes, &unackedBytes);
 8001f4a:	ad05      	add	r5, sp, #20
 8001f4c:	494f      	ldr	r1, [pc, #316]	@ (800208c <check_data_sent_to_server+0x174>)
 8001f4e:	484e      	ldr	r0, [pc, #312]	@ (8002088 <check_data_sent_to_server+0x170>)
 8001f50:	9500      	str	r5, [sp, #0]
 8001f52:	ab04      	add	r3, sp, #16
 8001f54:	aa03      	add	r2, sp, #12
 8001f56:	f008 ff01 	bl	800ad5c <siscanf>
	snprintf((char *)output, 128, "Lost Transmit BYTES: %d\n", unackedBytes);
 8001f5a:	9b05      	ldr	r3, [sp, #20]
 8001f5c:	4a4c      	ldr	r2, [pc, #304]	@ (8002090 <check_data_sent_to_server+0x178>)
	int result = sscanf((char*)response, "AT+QISEND=0,0 +QISEND: %d,%d,%d", &sentBytes, &ackedBytes, &unackedBytes);
 8001f5e:	4606      	mov	r6, r0
	snprintf((char *)output, 128, "Lost Transmit BYTES: %d\n", unackedBytes);
 8001f60:	2180      	movs	r1, #128	@ 0x80
 8001f62:	a806      	add	r0, sp, #24
 8001f64:	f008 fea6 	bl	800acb4 <sniprintf>
	uart_transmit_string(&huart1, output);
 8001f68:	484a      	ldr	r0, [pc, #296]	@ (8002094 <check_data_sent_to_server+0x17c>)
 8001f6a:	a906      	add	r1, sp, #24
 8001f6c:	f002 fba8 	bl	80046c0 <uart_transmit_string>

	if (result == 3) {
 8001f70:	2e03      	cmp	r6, #3
 8001f72:	d102      	bne.n	8001f7a <check_data_sent_to_server+0x62>
		if (unackedBytes > 0) {
 8001f74:	9b05      	ldr	r3, [sp, #20]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	dc55      	bgt.n	8002026 <check_data_sent_to_server+0x10e>
			return 0;
		}
	}
	receive_response("Check sending to server\n");
 8001f7a:	4847      	ldr	r0, [pc, #284]	@ (8002098 <check_data_sent_to_server+0x180>)
	osDelay(200);

	count_check = 0;
	snprintf((char *)command, sizeof(command), "AT+QIRD=%d,1500\r\n", connect_id);
	send_AT_command((char*)command);
	while(strstr((char *) response, "+QIRD") == NULL){
 8001f7c:	4e47      	ldr	r6, [pc, #284]	@ (800209c <check_data_sent_to_server+0x184>)
 8001f7e:	4d42      	ldr	r5, [pc, #264]	@ (8002088 <check_data_sent_to_server+0x170>)
		osDelay(300);
		if (strstr((char*)response, "ERROR") != NULL){
 8001f80:	4f47      	ldr	r7, [pc, #284]	@ (80020a0 <check_data_sent_to_server+0x188>)
	receive_response("Check sending to server\n");
 8001f82:	f7ff f863 	bl	800104c <receive_response>
	osDelay(100);
 8001f86:	2064      	movs	r0, #100	@ 0x64
 8001f88:	f005 fc54 	bl	8007834 <osDelay>
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8001f8c:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8001f90:	2100      	movs	r1, #0
 8001f92:	483d      	ldr	r0, [pc, #244]	@ (8002088 <check_data_sent_to_server+0x170>)
 8001f94:	f008 ff8a 	bl	800aeac <memset>
	SIM_UART_ReInitializeRxDMA();
 8001f98:	f7ff f83c 	bl	8001014 <SIM_UART_ReInitializeRxDMA>
	osDelay(200);
 8001f9c:	20c8      	movs	r0, #200	@ 0xc8
 8001f9e:	f005 fc49 	bl	8007834 <osDelay>
	snprintf((char *)command, sizeof(command), "AT+QIRD=%d,1500\r\n", connect_id);
 8001fa2:	4a40      	ldr	r2, [pc, #256]	@ (80020a4 <check_data_sent_to_server+0x18c>)
 8001fa4:	4623      	mov	r3, r4
 8001fa6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001faa:	a826      	add	r0, sp, #152	@ 0x98
 8001fac:	f008 fe82 	bl	800acb4 <sniprintf>
	send_AT_command((char*)command);
 8001fb0:	a826      	add	r0, sp, #152	@ 0x98
 8001fb2:	f7ff f81f 	bl	8000ff4 <send_AT_command>
	while(strstr((char *) response, "+QIRD") == NULL){
 8001fb6:	4631      	mov	r1, r6
 8001fb8:	4628      	mov	r0, r5
 8001fba:	f008 ffc7 	bl	800af4c <strstr>
 8001fbe:	2800      	cmp	r0, #0
 8001fc0:	d04d      	beq.n	800205e <check_data_sent_to_server+0x146>
			return 0;
		}
		osDelay(200);
		receive_response("Check received data from server\n");
	}
	receive_response("Check received data from server\n");
 8001fc2:	4839      	ldr	r0, [pc, #228]	@ (80020a8 <check_data_sent_to_server+0x190>)
 8001fc4:	f7ff f842 	bl	800104c <receive_response>
	char *token = strstr((char*)response, "+QIRD: ");
 8001fc8:	4938      	ldr	r1, [pc, #224]	@ (80020ac <check_data_sent_to_server+0x194>)
 8001fca:	482f      	ldr	r0, [pc, #188]	@ (8002088 <check_data_sent_to_server+0x170>)
 8001fcc:	f008 ffbe 	bl	800af4c <strstr>
	int value = 0;

	if (token != NULL) {
 8001fd0:	b110      	cbz	r0, 8001fd8 <check_data_sent_to_server+0xc0>
		value = atoi(token + 7);  // Move past "+QIRD: " and convert to integer
 8001fd2:	3007      	adds	r0, #7
 8001fd4:	f006 ffee 	bl	8008fb4 <atoi>
	int value = 0;
 8001fd8:	4604      	mov	r4, r0
	}
	snprintf((char*)output, 128, "\nNumber of character received: %d\n", value);
 8001fda:	4603      	mov	r3, r0
 8001fdc:	2180      	movs	r1, #128	@ 0x80
 8001fde:	4a34      	ldr	r2, [pc, #208]	@ (80020b0 <check_data_sent_to_server+0x198>)
 8001fe0:	a806      	add	r0, sp, #24
 8001fe2:	f008 fe67 	bl	800acb4 <sniprintf>
	uart_transmit_string(&huart1, output);
 8001fe6:	482b      	ldr	r0, [pc, #172]	@ (8002094 <check_data_sent_to_server+0x17c>)
 8001fe8:	a906      	add	r1, sp, #24
 8001fea:	f002 fb69 	bl	80046c0 <uart_transmit_string>
	if(value == 0) return 0;
 8001fee:	b1d4      	cbz	r4, 8002026 <check_data_sent_to_server+0x10e>

	osDelay(100);
 8001ff0:	2064      	movs	r0, #100	@ 0x64
 8001ff2:	f005 fc1f 	bl	8007834 <osDelay>
	uart_transmit_string(&huart1, (uint8_t*) "OUT OF receive data from server\n");
 8001ff6:	492f      	ldr	r1, [pc, #188]	@ (80020b4 <check_data_sent_to_server+0x19c>)
 8001ff8:	4826      	ldr	r0, [pc, #152]	@ (8002094 <check_data_sent_to_server+0x17c>)
 8001ffa:	f002 fb61 	bl	80046c0 <uart_transmit_string>
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8001ffe:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8002002:	2100      	movs	r1, #0
 8002004:	4820      	ldr	r0, [pc, #128]	@ (8002088 <check_data_sent_to_server+0x170>)
 8002006:	f008 ff51 	bl	800aeac <memset>
	SIM_UART_ReInitializeRxDMA();
 800200a:	f7ff f803 	bl	8001014 <SIM_UART_ReInitializeRxDMA>
	return 1;
 800200e:	2001      	movs	r0, #1
 8002010:	e00a      	b.n	8002028 <check_data_sent_to_server+0x110>
		if(count_check >= 6){
 8002012:	2d06      	cmp	r5, #6
 8002014:	d10b      	bne.n	800202e <check_data_sent_to_server+0x116>
			memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8002016:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 800201a:	2100      	movs	r1, #0
 800201c:	481a      	ldr	r0, [pc, #104]	@ (8002088 <check_data_sent_to_server+0x170>)
 800201e:	f008 ff45 	bl	800aeac <memset>
			SIM_UART_ReInitializeRxDMA();
 8002022:	f7fe fff7 	bl	8001014 <SIM_UART_ReInitializeRxDMA>
	int value = 0;
 8002026:	2000      	movs	r0, #0
}
 8002028:	b066      	add	sp, #408	@ 0x198
 800202a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (strstr((char*) response, "ERROR") != NULL){
 800202e:	4641      	mov	r1, r8
 8002030:	4630      	mov	r0, r6
 8002032:	f008 ff8b 	bl	800af4c <strstr>
 8002036:	2800      	cmp	r0, #0
 8002038:	d1ed      	bne.n	8002016 <check_data_sent_to_server+0xfe>
		count_check++;
 800203a:	3501      	adds	r5, #1
		osDelay(200);
 800203c:	20c8      	movs	r0, #200	@ 0xc8
 800203e:	f005 fbf9 	bl	8007834 <osDelay>
		snprintf(output_elapsed, 128, "Elapsed Time +QISEND: 0,0: %d\n", count_check);
 8002042:	4a1d      	ldr	r2, [pc, #116]	@ (80020b8 <check_data_sent_to_server+0x1a0>)
 8002044:	462b      	mov	r3, r5
 8002046:	2180      	movs	r1, #128	@ 0x80
 8002048:	a806      	add	r0, sp, #24
 800204a:	f008 fe33 	bl	800acb4 <sniprintf>
		uart_transmit_string(&huart1, (uint8_t *)output_elapsed);
 800204e:	4811      	ldr	r0, [pc, #68]	@ (8002094 <check_data_sent_to_server+0x17c>)
 8002050:	a906      	add	r1, sp, #24
 8002052:	f002 fb35 	bl	80046c0 <uart_transmit_string>
		receive_response("Check sending to server\n");
 8002056:	4810      	ldr	r0, [pc, #64]	@ (8002098 <check_data_sent_to_server+0x180>)
 8002058:	f7fe fff8 	bl	800104c <receive_response>
 800205c:	e76f      	b.n	8001f3e <check_data_sent_to_server+0x26>
		osDelay(300);
 800205e:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8002062:	f005 fbe7 	bl	8007834 <osDelay>
		if (strstr((char*)response, "ERROR") != NULL){
 8002066:	4639      	mov	r1, r7
 8002068:	4628      	mov	r0, r5
 800206a:	f008 ff6f 	bl	800af4c <strstr>
 800206e:	2800      	cmp	r0, #0
 8002070:	d1d1      	bne.n	8002016 <check_data_sent_to_server+0xfe>
		osDelay(200);
 8002072:	20c8      	movs	r0, #200	@ 0xc8
 8002074:	f005 fbde 	bl	8007834 <osDelay>
		receive_response("Check received data from server\n");
 8002078:	480b      	ldr	r0, [pc, #44]	@ (80020a8 <check_data_sent_to_server+0x190>)
 800207a:	f7fe ffe7 	bl	800104c <receive_response>
 800207e:	e79a      	b.n	8001fb6 <check_data_sent_to_server+0x9e>
 8002080:	0800f2dc 	.word	0x0800f2dc
 8002084:	0800ee93 	.word	0x0800ee93
 8002088:	20000bd8 	.word	0x20000bd8
 800208c:	0800f30c 	.word	0x0800f30c
 8002090:	0800f32c 	.word	0x0800f32c
 8002094:	200013c4 	.word	0x200013c4
 8002098:	0800f2b5 	.word	0x0800f2b5
 800209c:	0800f378 	.word	0x0800f378
 80020a0:	0800f16a 	.word	0x0800f16a
 80020a4:	0800f345 	.word	0x0800f345
 80020a8:	0800f357 	.word	0x0800f357
 80020ac:	0800f37e 	.word	0x0800f37e
 80020b0:	0800f386 	.word	0x0800f386
 80020b4:	0800f3a9 	.word	0x0800f3a9
 80020b8:	0800f2ed 	.word	0x0800f2ed

080020bc <close_connection>:


int close_connection(int connect_id){
 80020bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020be:	b0c1      	sub	sp, #260	@ 0x104
 80020c0:	4603      	mov	r3, r0
	uint8_t command[256];
	snprintf((char *)command, sizeof(command), "AT+QICLOSE=%d\r\n", connect_id);
 80020c2:	4a1c      	ldr	r2, [pc, #112]	@ (8002134 <close_connection+0x78>)
	send_AT_command((char*)command);
	int count_check = 0;
	while(strstr((char *) response, CHECK_RESPONSE) == NULL){
 80020c4:	4e1c      	ldr	r6, [pc, #112]	@ (8002138 <close_connection+0x7c>)
 80020c6:	4d1d      	ldr	r5, [pc, #116]	@ (800213c <close_connection+0x80>)
		receive_response("Check CLOSING to server\n");
 80020c8:	4f1d      	ldr	r7, [pc, #116]	@ (8002140 <close_connection+0x84>)
	snprintf((char *)command, sizeof(command), "AT+QICLOSE=%d\r\n", connect_id);
 80020ca:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80020ce:	4668      	mov	r0, sp
 80020d0:	f008 fdf0 	bl	800acb4 <sniprintf>
	send_AT_command((char*)command);
 80020d4:	4668      	mov	r0, sp
 80020d6:	f7fe ff8d 	bl	8000ff4 <send_AT_command>
	while(strstr((char *) response, CHECK_RESPONSE) == NULL){
 80020da:	2406      	movs	r4, #6
 80020dc:	4631      	mov	r1, r6
 80020de:	4628      	mov	r0, r5
 80020e0:	f008 ff34 	bl	800af4c <strstr>
 80020e4:	b178      	cbz	r0, 8002106 <close_connection+0x4a>
			SIM_UART_ReInitializeRxDMA();
			return 0;
		}
		count_check++;
	}
	receive_response("Check CLOSING to server\n");
 80020e6:	4816      	ldr	r0, [pc, #88]	@ (8002140 <close_connection+0x84>)
 80020e8:	f7fe ffb0 	bl	800104c <receive_response>
	osDelay(100);
 80020ec:	2064      	movs	r0, #100	@ 0x64
 80020ee:	f005 fba1 	bl	8007834 <osDelay>
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 80020f2:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 80020f6:	2100      	movs	r1, #0
 80020f8:	4810      	ldr	r0, [pc, #64]	@ (800213c <close_connection+0x80>)
 80020fa:	f008 fed7 	bl	800aeac <memset>
	SIM_UART_ReInitializeRxDMA();
 80020fe:	f7fe ff89 	bl	8001014 <SIM_UART_ReInitializeRxDMA>
	return 1;
 8002102:	2001      	movs	r0, #1
 8002104:	e010      	b.n	8002128 <close_connection+0x6c>
		receive_response("Check CLOSING to server\n");
 8002106:	4638      	mov	r0, r7
 8002108:	f7fe ffa0 	bl	800104c <receive_response>
		if (strstr((char*)response, "ERROR") != NULL){
 800210c:	490d      	ldr	r1, [pc, #52]	@ (8002144 <close_connection+0x88>)
 800210e:	4628      	mov	r0, r5
 8002110:	f008 ff1c 	bl	800af4c <strstr>
 8002114:	b150      	cbz	r0, 800212c <close_connection+0x70>
			memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8002116:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 800211a:	2100      	movs	r1, #0
 800211c:	4807      	ldr	r0, [pc, #28]	@ (800213c <close_connection+0x80>)
 800211e:	f008 fec5 	bl	800aeac <memset>
			SIM_UART_ReInitializeRxDMA();
 8002122:	f7fe ff77 	bl	8001014 <SIM_UART_ReInitializeRxDMA>
			return 0;
 8002126:	2000      	movs	r0, #0
}
 8002128:	b041      	add	sp, #260	@ 0x104
 800212a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if(count_check >=5){
 800212c:	3c01      	subs	r4, #1
 800212e:	d1d5      	bne.n	80020dc <close_connection+0x20>
 8002130:	e7f1      	b.n	8002116 <close_connection+0x5a>
 8002132:	bf00      	nop
 8002134:	0800f3ca 	.word	0x0800f3ca
 8002138:	0800ee93 	.word	0x0800ee93
 800213c:	20000bd8 	.word	0x20000bd8
 8002140:	0800f3da 	.word	0x0800f3da
 8002144:	0800f16a 	.word	0x0800f16a

08002148 <extract_time_CCLK>:


int extract_time_CCLK(uint8_t* message){
 8002148:	b510      	push	{r4, lr}
 800214a:	b0ae      	sub	sp, #184	@ 0xb8
	int year, month, day, hour, minute, second, timezone;
	uint8_t output_buffer[128];

	sscanf((char*) message, "AT+CCLK?\r\n+CCLK: \"%2d/%2d/%2d,%2d:%2d:%2d%2d\"",
 800214c:	ab0d      	add	r3, sp, #52	@ 0x34
 800214e:	9304      	str	r3, [sp, #16]
 8002150:	ab0c      	add	r3, sp, #48	@ 0x30
 8002152:	9303      	str	r3, [sp, #12]
 8002154:	ab0b      	add	r3, sp, #44	@ 0x2c
 8002156:	9302      	str	r3, [sp, #8]
 8002158:	ab0a      	add	r3, sp, #40	@ 0x28
 800215a:	9301      	str	r3, [sp, #4]
 800215c:	ab09      	add	r3, sp, #36	@ 0x24
 800215e:	9300      	str	r3, [sp, #0]
 8002160:	aa07      	add	r2, sp, #28
 8002162:	ab08      	add	r3, sp, #32
 8002164:	4925      	ldr	r1, [pc, #148]	@ (80021fc <extract_time_CCLK+0xb4>)
 8002166:	f008 fdf9 	bl	800ad5c <siscanf>
						&year, &month, &day, &hour, &minute, &second, &timezone);
	hour += 1;
 800216a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800216c:	1c5a      	adds	r2, r3, #1
	if (hour >= 24) {
 800216e:	2a17      	cmp	r2, #23
		hour -= 24;
 8002170:	bfc3      	ittte	gt
 8002172:	3b17      	subgt	r3, #23
 8002174:	930a      	strgt	r3, [sp, #40]	@ 0x28
		day += 1;
 8002176:	9b09      	ldrgt	r3, [sp, #36]	@ 0x24
	hour += 1;
 8002178:	920a      	strle	r2, [sp, #40]	@ 0x28
		day += 1;
 800217a:	bfc4      	itt	gt
 800217c:	3301      	addgt	r3, #1
 800217e:	9309      	strgt	r3, [sp, #36]	@ 0x24
		// Simplified example: Add code here to handle month/day overflow as needed
	}
	if(year < 24) return 0;
 8002180:	9b07      	ldr	r3, [sp, #28]
 8002182:	2b17      	cmp	r3, #23
 8002184:	dd37      	ble.n	80021f6 <extract_time_CCLK+0xae>
	rmc_jt.date.Yr = year;
 8002186:	4c1e      	ldr	r4, [pc, #120]	@ (8002200 <extract_time_CCLK+0xb8>)
	rmc_jt.date.Mon = month;
	rmc_jt.date.Day = day;
	rmc_jt.tim.hour = hour;
 8002188:	980a      	ldr	r0, [sp, #40]	@ 0x28
	rmc_jt.tim.min = minute;
 800218a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
	rmc_jt.tim.sec = second;
 800218c:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
	rmc_jt.date.Yr = year;
 800218e:	61a3      	str	r3, [r4, #24]
	rmc_jt.date.Mon = month;
 8002190:	9b08      	ldr	r3, [sp, #32]
 8002192:	6163      	str	r3, [r4, #20]
	rmc_jt.tim.hour = hour;
 8002194:	6020      	str	r0, [r4, #0]
	rmc_jt.date.Day = day;
 8002196:	9b09      	ldr	r3, [sp, #36]	@ 0x24
	rmc_jt.tim.min = minute;
 8002198:	6061      	str	r1, [r4, #4]
	rmc_jt.tim.sec = second;
 800219a:	60a2      	str	r2, [r4, #8]
	set_time(hour, minute, second);
 800219c:	b2c9      	uxtb	r1, r1
 800219e:	b2d2      	uxtb	r2, r2
 80021a0:	b2c0      	uxtb	r0, r0
	rmc_jt.date.Day = day;
 80021a2:	6123      	str	r3, [r4, #16]
	set_time(hour, minute, second);
 80021a4:	f000 fd86 	bl	8002cb4 <set_time>
	set_date(year, month, day);
 80021a8:	f89d 2024 	ldrb.w	r2, [sp, #36]	@ 0x24
 80021ac:	f89d 1020 	ldrb.w	r1, [sp, #32]
 80021b0:	f89d 001c 	ldrb.w	r0, [sp, #28]
 80021b4:	f000 fd9c 	bl	8002cf0 <set_date>
	snprintf((char*)output_buffer, 128, "Adjusted time to GMT+8: 20%02d/%02d/%02d, %02d:%02d:%02d\n", rmc_jt.date.Yr, rmc_jt.date.Mon, rmc_jt.date.Day, rmc_jt.tim.hour, rmc_jt.tim.min, rmc_jt.tim.sec);
 80021b8:	68a3      	ldr	r3, [r4, #8]
 80021ba:	9304      	str	r3, [sp, #16]
 80021bc:	6863      	ldr	r3, [r4, #4]
 80021be:	9303      	str	r3, [sp, #12]
 80021c0:	6823      	ldr	r3, [r4, #0]
 80021c2:	9302      	str	r3, [sp, #8]
 80021c4:	6923      	ldr	r3, [r4, #16]
 80021c6:	9301      	str	r3, [sp, #4]
 80021c8:	6963      	ldr	r3, [r4, #20]
 80021ca:	9300      	str	r3, [sp, #0]
 80021cc:	69a3      	ldr	r3, [r4, #24]
 80021ce:	4a0d      	ldr	r2, [pc, #52]	@ (8002204 <extract_time_CCLK+0xbc>)
 80021d0:	2180      	movs	r1, #128	@ 0x80
 80021d2:	a80e      	add	r0, sp, #56	@ 0x38
 80021d4:	f008 fd6e 	bl	800acb4 <sniprintf>
	uart_transmit_string(&huart1, (uint8_t*) "RTC Time: ");
 80021d8:	490b      	ldr	r1, [pc, #44]	@ (8002208 <extract_time_CCLK+0xc0>)
 80021da:	480c      	ldr	r0, [pc, #48]	@ (800220c <extract_time_CCLK+0xc4>)
 80021dc:	f002 fa70 	bl	80046c0 <uart_transmit_string>
	uart_transmit_string(&huart1, (uint8_t*) "\n");
 80021e0:	490b      	ldr	r1, [pc, #44]	@ (8002210 <extract_time_CCLK+0xc8>)
 80021e2:	480a      	ldr	r0, [pc, #40]	@ (800220c <extract_time_CCLK+0xc4>)
 80021e4:	f002 fa6c 	bl	80046c0 <uart_transmit_string>
	uart_transmit_string(&huart1, output_buffer);
 80021e8:	4808      	ldr	r0, [pc, #32]	@ (800220c <extract_time_CCLK+0xc4>)
 80021ea:	a90e      	add	r1, sp, #56	@ 0x38
 80021ec:	f002 fa68 	bl	80046c0 <uart_transmit_string>
	return 1;
 80021f0:	2001      	movs	r0, #1
}
 80021f2:	b02e      	add	sp, #184	@ 0xb8
 80021f4:	bd10      	pop	{r4, pc}
	if(year < 24) return 0;
 80021f6:	2000      	movs	r0, #0
 80021f8:	e7fb      	b.n	80021f2 <extract_time_CCLK+0xaa>
 80021fa:	bf00      	nop
 80021fc:	0800f3f3 	.word	0x0800f3f3
 8002200:	20000b68 	.word	0x20000b68
 8002204:	0800f421 	.word	0x0800f421
 8002208:	0800f45b 	.word	0x0800f45b
 800220c:	200013c4 	.word	0x200013c4
 8002210:	0800faec 	.word	0x0800faec

08002214 <getCurrentTime>:


int getCurrentTime(){
 8002214:	b570      	push	{r4, r5, r6, lr}
	int count_check = 0;
	send_AT_command("AT+CCLK?\r\n");
 8002216:	4818      	ldr	r0, [pc, #96]	@ (8002278 <getCurrentTime+0x64>)
	while(strstr((char *) response, CHECK_RESPONSE) == NULL){
 8002218:	4d18      	ldr	r5, [pc, #96]	@ (800227c <getCurrentTime+0x68>)
			count_check = 0;
			memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
			SIM_UART_ReInitializeRxDMA();
			return 0;
		}
		receive_response("Get time\n");
 800221a:	4e19      	ldr	r6, [pc, #100]	@ (8002280 <getCurrentTime+0x6c>)
	send_AT_command("AT+CCLK?\r\n");
 800221c:	f7fe feea 	bl	8000ff4 <send_AT_command>
	while(strstr((char *) response, CHECK_RESPONSE) == NULL){
 8002220:	2404      	movs	r4, #4
 8002222:	4818      	ldr	r0, [pc, #96]	@ (8002284 <getCurrentTime+0x70>)
 8002224:	4629      	mov	r1, r5
 8002226:	f008 fe91 	bl	800af4c <strstr>
 800222a:	b190      	cbz	r0, 8002252 <getCurrentTime+0x3e>
		osDelay(100);
		count_check++;
	}
	receive_response("Get time\n");
 800222c:	4814      	ldr	r0, [pc, #80]	@ (8002280 <getCurrentTime+0x6c>)
 800222e:	f7fe ff0d 	bl	800104c <receive_response>
	int result_extract = extract_time_CCLK(response);
 8002232:	4814      	ldr	r0, [pc, #80]	@ (8002284 <getCurrentTime+0x70>)
 8002234:	f7ff ff88 	bl	8002148 <extract_time_CCLK>
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8002238:	f44f 72c0 	mov.w	r2, #384	@ 0x180
	int result_extract = extract_time_CCLK(response);
 800223c:	4604      	mov	r4, r0
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 800223e:	2100      	movs	r1, #0
 8002240:	4810      	ldr	r0, [pc, #64]	@ (8002284 <getCurrentTime+0x70>)
 8002242:	f008 fe33 	bl	800aeac <memset>
	SIM_UART_ReInitializeRxDMA();
 8002246:	f7fe fee5 	bl	8001014 <SIM_UART_ReInitializeRxDMA>
	if(result_extract)
 800224a:	1e20      	subs	r0, r4, #0
 800224c:	bf18      	it	ne
 800224e:	2001      	movne	r0, #1
 8002250:	e00a      	b.n	8002268 <getCurrentTime+0x54>
		if(count_check >= 3 ){
 8002252:	3c01      	subs	r4, #1
 8002254:	d109      	bne.n	800226a <getCurrentTime+0x56>
			memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8002256:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 800225a:	4621      	mov	r1, r4
 800225c:	4809      	ldr	r0, [pc, #36]	@ (8002284 <getCurrentTime+0x70>)
 800225e:	f008 fe25 	bl	800aeac <memset>
			SIM_UART_ReInitializeRxDMA();
 8002262:	f7fe fed7 	bl	8001014 <SIM_UART_ReInitializeRxDMA>
			return 0;
 8002266:	4620      	mov	r0, r4
		return 1;
	else return 0;
}
 8002268:	bd70      	pop	{r4, r5, r6, pc}
		receive_response("Get time\n");
 800226a:	4630      	mov	r0, r6
 800226c:	f7fe feee 	bl	800104c <receive_response>
		osDelay(100);
 8002270:	2064      	movs	r0, #100	@ 0x64
 8002272:	f005 fadf 	bl	8007834 <osDelay>
		count_check++;
 8002276:	e7d4      	b.n	8002222 <getCurrentTime+0xe>
 8002278:	0800f466 	.word	0x0800f466
 800227c:	0800ee93 	.word	0x0800ee93
 8002280:	0800f471 	.word	0x0800f471
 8002284:	20000bd8 	.word	0x20000bd8

08002288 <receiveRMCDataWithAddrGSM>:


void receiveRMCDataWithAddrGSM(){
 8002288:	b570      	push	{r4, r5, r6, lr}
	uint8_t output_buffer[70];
	uart_transmit_string(&huart1, (uint8_t*)"\\Inside Receiving Data at GSM\n\n");
	osEvent evt = osMailGet(RMC_MailQGSMId, 3000); // Wait for mail
 800228a:	4e54      	ldr	r6, [pc, #336]	@ (80023dc <receiveRMCDataWithAddrGSM+0x154>)
	uart_transmit_string(&huart1, (uint8_t*)"\\Inside Receiving Data at GSM\n\n");
 800228c:	4954      	ldr	r1, [pc, #336]	@ (80023e0 <receiveRMCDataWithAddrGSM+0x158>)
 800228e:	4855      	ldr	r0, [pc, #340]	@ (80023e4 <receiveRMCDataWithAddrGSM+0x15c>)
void receiveRMCDataWithAddrGSM(){
 8002290:	b09e      	sub	sp, #120	@ 0x78
	uart_transmit_string(&huart1, (uint8_t*)"\\Inside Receiving Data at GSM\n\n");
 8002292:	f002 fa15 	bl	80046c0 <uart_transmit_string>
	osEvent evt = osMailGet(RMC_MailQGSMId, 3000); // Wait for mail
 8002296:	6831      	ldr	r1, [r6, #0]
 8002298:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 800229c:	a809      	add	r0, sp, #36	@ 0x24
 800229e:	f005 fbc5 	bl	8007a2c <osMailGet>
	if(evt.status == osEventMail){
 80022a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80022a4:	2b20      	cmp	r3, #32
 80022a6:	f040 8093 	bne.w	80023d0 <receiveRMCDataWithAddrGSM+0x148>
		uart_transmit_string(&huart1, (uint8_t*)"\n\nReceived  ADDRESS Data at GSM: \n");
 80022aa:	494f      	ldr	r1, [pc, #316]	@ (80023e8 <receiveRMCDataWithAddrGSM+0x160>)
 80022ac:	484d      	ldr	r0, [pc, #308]	@ (80023e4 <receiveRMCDataWithAddrGSM+0x15c>)
		uart_transmit_string(&huart1, (uint8_t*)"Address received from MAIL QUEUE: \n");
		GSM_MAIL_STRUCT *receivedData = (GSM_MAIL_STRUCT *)evt.value.p;
		current_addr_gsm = receivedData->address;
 80022ae:	4c4f      	ldr	r4, [pc, #316]	@ (80023ec <receiveRMCDataWithAddrGSM+0x164>)
		uart_transmit_string(&huart1, (uint8_t*)"\n\nReceived  ADDRESS Data at GSM: \n");
 80022b0:	f002 fa06 	bl	80046c0 <uart_transmit_string>
		uart_transmit_string(&huart1, (uint8_t*)"Address received from MAIL QUEUE: \n");
 80022b4:	494e      	ldr	r1, [pc, #312]	@ (80023f0 <receiveRMCDataWithAddrGSM+0x168>)
 80022b6:	484b      	ldr	r0, [pc, #300]	@ (80023e4 <receiveRMCDataWithAddrGSM+0x15c>)
 80022b8:	f002 fa02 	bl	80046c0 <uart_transmit_string>
		GSM_MAIL_STRUCT *receivedData = (GSM_MAIL_STRUCT *)evt.value.p;
 80022bc:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
		if(checkAddrExistInQueue(current_addr_gsm, &result_addr_queue) == 0 || current_addr_gsm >= end_addr_disconnect){
 80022be:	494d      	ldr	r1, [pc, #308]	@ (80023f4 <receiveRMCDataWithAddrGSM+0x16c>)
		current_addr_gsm = receivedData->address;
 80022c0:	6dab      	ldr	r3, [r5, #88]	@ 0x58
 80022c2:	6023      	str	r3, [r4, #0]
		if(checkAddrExistInQueue(current_addr_gsm, &result_addr_queue) == 0 || current_addr_gsm >= end_addr_disconnect){
 80022c4:	6820      	ldr	r0, [r4, #0]
 80022c6:	f000 fc77 	bl	8002bb8 <checkAddrExistInQueue>
 80022ca:	b120      	cbz	r0, 80022d6 <receiveRMCDataWithAddrGSM+0x4e>
 80022cc:	4b4a      	ldr	r3, [pc, #296]	@ (80023f8 <receiveRMCDataWithAddrGSM+0x170>)
 80022ce:	6822      	ldr	r2, [r4, #0]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	429a      	cmp	r2, r3
 80022d4:	d377      	bcc.n	80023c6 <receiveRMCDataWithAddrGSM+0x13e>
//			current_addr_gsm = receivedData->address;
			Debug_printf("Saving data to variable to send to the server\n");
 80022d6:	4849      	ldr	r0, [pc, #292]	@ (80023fc <receiveRMCDataWithAddrGSM+0x174>)
 80022d8:	f002 fa02 	bl	80046e0 <Debug_printf>
			Debug_printf("\n---------- Current data accepted at address: %08lx----------\n", current_addr_gsm);
 80022dc:	6821      	ldr	r1, [r4, #0]
 80022de:	4848      	ldr	r0, [pc, #288]	@ (8002400 <receiveRMCDataWithAddrGSM+0x178>)
			rmc_jt.lcation.latitude = receivedData->rmc.lcation.latitude;
 80022e0:	4c48      	ldr	r4, [pc, #288]	@ (8002404 <receiveRMCDataWithAddrGSM+0x17c>)
			Debug_printf("\n---------- Current data accepted at address: %08lx----------\n", current_addr_gsm);
 80022e2:	f002 f9fd 	bl	80046e0 <Debug_printf>
			rmc_jt.lcation.latitude = receivedData->rmc.lcation.latitude;
 80022e6:	e9d5 230e 	ldrd	r2, r3, [r5, #56]	@ 0x38
 80022ea:	e9c4 230e 	strd	r2, r3, [r4, #56]	@ 0x38
			rmc_jt.lcation.longitude = receivedData->rmc.lcation.longitude;
 80022ee:	e9d5 2312 	ldrd	r2, r3, [r5, #72]	@ 0x48
 80022f2:	e9c4 2312 	strd	r2, r3, [r4, #72]	@ 0x48
			rmc_jt.speed = receivedData->rmc.speed;
 80022f6:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 80022f8:	62a3      	str	r3, [r4, #40]	@ 0x28
			rmc_jt.course = receivedData->rmc.course;
 80022fa:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 80022fc:	62e3      	str	r3, [r4, #44]	@ 0x2c
			rmc_jt.lcation.NS = receivedData->rmc.lcation.NS;
 80022fe:	f895 3040 	ldrb.w	r3, [r5, #64]	@ 0x40
 8002302:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
			rmc_jt.lcation.EW = receivedData->rmc.lcation.EW;
 8002306:	f895 3050 	ldrb.w	r3, [r5, #80]	@ 0x50
 800230a:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
			rmc_jt.isValid = receivedData->rmc.isValid;
 800230e:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8002310:	6323      	str	r3, [r4, #48]	@ 0x30
			rmc_jt.date.Yr = receivedData->rmc.date.Yr;
 8002312:	69ab      	ldr	r3, [r5, #24]
 8002314:	61a3      	str	r3, [r4, #24]
			rmc_jt.date.Mon = receivedData->rmc.date.Mon;
 8002316:	696b      	ldr	r3, [r5, #20]
			rmc_jt.date.Day = receivedData->rmc.date.Day;
			rmc_jt.tim.hour = receivedData->rmc.tim.hour;
			rmc_jt.tim.min = receivedData->rmc.tim.min;
 8002318:	686a      	ldr	r2, [r5, #4]
			rmc_jt.tim.sec = receivedData->rmc.tim.sec;
 800231a:	68a9      	ldr	r1, [r5, #8]
			rmc_jt.date.Mon = receivedData->rmc.date.Mon;
 800231c:	6163      	str	r3, [r4, #20]
			rmc_jt.date.Day = receivedData->rmc.date.Day;
 800231e:	692b      	ldr	r3, [r5, #16]
 8002320:	6123      	str	r3, [r4, #16]
			rmc_jt.tim.hour = receivedData->rmc.tim.hour;
 8002322:	682b      	ldr	r3, [r5, #0]
 8002324:	6023      	str	r3, [r4, #0]
			rmc_jt.tim.min = receivedData->rmc.tim.min;
 8002326:	6062      	str	r2, [r4, #4]
			rmc_jt.tim.sec = receivedData->rmc.tim.sec;
 8002328:	60a1      	str	r1, [r4, #8]

			snprintf((char *)output_buffer, sizeof(output_buffer), "Time SENDING TO SERVER at GSM: %d:%d:%d\n", rmc_jt.tim.hour, rmc_jt.tim.min, rmc_jt.tim.sec);
 800232a:	a80c      	add	r0, sp, #48	@ 0x30
 800232c:	e9cd 2100 	strd	r2, r1, [sp]
 8002330:	4a35      	ldr	r2, [pc, #212]	@ (8002408 <receiveRMCDataWithAddrGSM+0x180>)
 8002332:	2146      	movs	r1, #70	@ 0x46
 8002334:	f008 fcbe 	bl	800acb4 <sniprintf>
			uart_transmit_string(&huart1, output_buffer);
 8002338:	482a      	ldr	r0, [pc, #168]	@ (80023e4 <receiveRMCDataWithAddrGSM+0x15c>)
 800233a:	a90c      	add	r1, sp, #48	@ 0x30
 800233c:	f002 f9c0 	bl	80046c0 <uart_transmit_string>

			snprintf((char *)output_buffer, sizeof(output_buffer), "Date SENDING TO SERVER at GSM: %d/%d/%d\n", rmc_jt.date.Day, rmc_jt.date.Mon, rmc_jt.date.Yr);
 8002340:	69a3      	ldr	r3, [r4, #24]
 8002342:	9301      	str	r3, [sp, #4]
 8002344:	6963      	ldr	r3, [r4, #20]
 8002346:	9300      	str	r3, [sp, #0]
 8002348:	6923      	ldr	r3, [r4, #16]
 800234a:	4a30      	ldr	r2, [pc, #192]	@ (800240c <receiveRMCDataWithAddrGSM+0x184>)
 800234c:	2146      	movs	r1, #70	@ 0x46
 800234e:	a80c      	add	r0, sp, #48	@ 0x30
 8002350:	f008 fcb0 	bl	800acb4 <sniprintf>
			uart_transmit_string(&huart1, output_buffer);
 8002354:	4823      	ldr	r0, [pc, #140]	@ (80023e4 <receiveRMCDataWithAddrGSM+0x15c>)
 8002356:	a90c      	add	r1, sp, #48	@ 0x30
 8002358:	f002 f9b2 	bl	80046c0 <uart_transmit_string>

			snprintf((char *)output_buffer, sizeof(output_buffer), "Location SENDING TO SERVER at GSM: %.6f %c, %.6f %c\n", rmc_jt.lcation.latitude, rmc_jt.lcation.NS, rmc_jt.lcation.longitude, receivedData->rmc.lcation.EW);
 800235c:	f895 3050 	ldrb.w	r3, [r5, #80]	@ 0x50
 8002360:	9306      	str	r3, [sp, #24]
 8002362:	e9d4 2312 	ldrd	r2, r3, [r4, #72]	@ 0x48
 8002366:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800236a:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 800236e:	9302      	str	r3, [sp, #8]
 8002370:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	@ 0x38
 8002374:	2146      	movs	r1, #70	@ 0x46
 8002376:	e9cd 2300 	strd	r2, r3, [sp]
 800237a:	a80c      	add	r0, sp, #48	@ 0x30
 800237c:	4a24      	ldr	r2, [pc, #144]	@ (8002410 <receiveRMCDataWithAddrGSM+0x188>)
 800237e:	f008 fc99 	bl	800acb4 <sniprintf>
			uart_transmit_string(&huart1, output_buffer);
 8002382:	4818      	ldr	r0, [pc, #96]	@ (80023e4 <receiveRMCDataWithAddrGSM+0x15c>)
 8002384:	a90c      	add	r1, sp, #48	@ 0x30
 8002386:	f002 f99b 	bl	80046c0 <uart_transmit_string>

			snprintf((char *)output_buffer, sizeof(output_buffer),"Speed SENDING TO SERVER at GSM: %.2f, Course: %.2f, Valid: %d\n", rmc_jt.speed, rmc_jt.course, rmc_jt.isValid);
 800238a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800238c:	9304      	str	r3, [sp, #16]
 800238e:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8002390:	f7fe f8ea 	bl	8000568 <__aeabi_f2d>
 8002394:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002398:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 800239a:	f7fe f8e5 	bl	8000568 <__aeabi_f2d>
 800239e:	4a1d      	ldr	r2, [pc, #116]	@ (8002414 <receiveRMCDataWithAddrGSM+0x18c>)
 80023a0:	e9cd 0100 	strd	r0, r1, [sp]
 80023a4:	2146      	movs	r1, #70	@ 0x46
 80023a6:	a80c      	add	r0, sp, #48	@ 0x30
 80023a8:	f008 fc84 	bl	800acb4 <sniprintf>
			uart_transmit_string(&huart1, output_buffer);
 80023ac:	480d      	ldr	r0, [pc, #52]	@ (80023e4 <receiveRMCDataWithAddrGSM+0x15c>)
 80023ae:	a90c      	add	r1, sp, #48	@ 0x30
 80023b0:	f002 f986 	bl	80046c0 <uart_transmit_string>

			received_RMC = 1;
 80023b4:	4b18      	ldr	r3, [pc, #96]	@ (8002418 <receiveRMCDataWithAddrGSM+0x190>)
 80023b6:	2201      	movs	r2, #1
 80023b8:	601a      	str	r2, [r3, #0]
		}
		else{
			Debug_printf("\n----------------Have sent data in this address successfully already: %08lx ----------------\n", receivedData->address);
		}
		osMailFree(RMC_MailQGSMId, receivedData);
 80023ba:	6830      	ldr	r0, [r6, #0]
 80023bc:	4629      	mov	r1, r5
 80023be:	f005 fb6e 	bl	8007a9e <osMailFree>
	}
	else{
		Debug_printf("There is no address mail left\n");
	}
}
 80023c2:	b01e      	add	sp, #120	@ 0x78
 80023c4:	bd70      	pop	{r4, r5, r6, pc}
			Debug_printf("\n----------------Have sent data in this address successfully already: %08lx ----------------\n", receivedData->address);
 80023c6:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 80023c8:	4814      	ldr	r0, [pc, #80]	@ (800241c <receiveRMCDataWithAddrGSM+0x194>)
 80023ca:	f002 f989 	bl	80046e0 <Debug_printf>
 80023ce:	e7f4      	b.n	80023ba <receiveRMCDataWithAddrGSM+0x132>
		Debug_printf("There is no address mail left\n");
 80023d0:	4813      	ldr	r0, [pc, #76]	@ (8002420 <receiveRMCDataWithAddrGSM+0x198>)
}
 80023d2:	b01e      	add	sp, #120	@ 0x78
 80023d4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		Debug_printf("There is no address mail left\n");
 80023d8:	f002 b982 	b.w	80046e0 <Debug_printf>
 80023dc:	20000f80 	.word	0x20000f80
 80023e0:	0800f47b 	.word	0x0800f47b
 80023e4:	200013c4 	.word	0x200013c4
 80023e8:	0800f49b 	.word	0x0800f49b
 80023ec:	20000d5c 	.word	0x20000d5c
 80023f0:	0800f4be 	.word	0x0800f4be
 80023f4:	20000d74 	.word	0x20000d74
 80023f8:	20000d58 	.word	0x20000d58
 80023fc:	0800f4e2 	.word	0x0800f4e2
 8002400:	0800f511 	.word	0x0800f511
 8002404:	20000b68 	.word	0x20000b68
 8002408:	0800f550 	.word	0x0800f550
 800240c:	0800f579 	.word	0x0800f579
 8002410:	0800f5a2 	.word	0x0800f5a2
 8002414:	0800f5d7 	.word	0x0800f5d7
 8002418:	20000bc4 	.word	0x20000bc4
 800241c:	0800f616 	.word	0x0800f616
 8002420:	0800f674 	.word	0x0800f674

08002424 <processUploadDataToServer>:

int processUploadDataToServer(JT808_LocationInfoReport *location_info){
 8002424:	b510      	push	{r4, lr}
 8002426:	4601      	mov	r1, r0
	int result_send_location = send_location_to_server(0, location_info);
 8002428:	2000      	movs	r0, #0
 800242a:	f7ff fced 	bl	8001e08 <send_location_to_server>

	if(result_send_location){
 800242e:	b338      	cbz	r0, 8002480 <processUploadDataToServer+0x5c>
		uart_transmit_string(&huart1, (uint8_t *)"Inside process: Check Sending Location Report\r\n");
 8002430:	4916      	ldr	r1, [pc, #88]	@ (800248c <processUploadDataToServer+0x68>)
 8002432:	4817      	ldr	r0, [pc, #92]	@ (8002490 <processUploadDataToServer+0x6c>)
 8002434:	f002 f944 	bl	80046c0 <uart_transmit_string>
		int result_check = check_data_sent_to_server(0);
 8002438:	2000      	movs	r0, #0
 800243a:	f7ff fd6d 	bl	8001f18 <check_data_sent_to_server>
		if(result_check){
 800243e:	4604      	mov	r4, r0
 8002440:	b180      	cbz	r0, 8002464 <processUploadDataToServer+0x40>
			uart_transmit_string(&huart1, (uint8_t *)"Sending SUCCESS\n");
 8002442:	4914      	ldr	r1, [pc, #80]	@ (8002494 <processUploadDataToServer+0x70>)
 8002444:	4812      	ldr	r0, [pc, #72]	@ (8002490 <processUploadDataToServer+0x6c>)
 8002446:	f002 f93b 	bl	80046c0 <uart_transmit_string>
			receive_response("Check location report\n");
 800244a:	4813      	ldr	r0, [pc, #76]	@ (8002498 <processUploadDataToServer+0x74>)
 800244c:	f7fe fdfe 	bl	800104c <receive_response>
			memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8002450:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8002454:	2100      	movs	r1, #0
 8002456:	4811      	ldr	r0, [pc, #68]	@ (800249c <processUploadDataToServer+0x78>)
 8002458:	f008 fd28 	bl	800aeac <memset>
			SIM_UART_ReInitializeRxDMA();
 800245c:	f7fe fdda 	bl	8001014 <SIM_UART_ReInitializeRxDMA>
			return 1;
 8002460:	2001      	movs	r0, #1
	}
	else{
		uart_transmit_string(&huart1, (uint8_t *)"Sending ERROR (SENDING ERROR)\n");
		return 0;
	}
}
 8002462:	bd10      	pop	{r4, pc}
			uart_transmit_string(&huart1, (uint8_t *)"Sending ERROR  (CHECKING SENDING RESULT ERROR)\n");
 8002464:	490e      	ldr	r1, [pc, #56]	@ (80024a0 <processUploadDataToServer+0x7c>)
 8002466:	480a      	ldr	r0, [pc, #40]	@ (8002490 <processUploadDataToServer+0x6c>)
 8002468:	f002 f92a 	bl	80046c0 <uart_transmit_string>
			memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 800246c:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8002470:	4621      	mov	r1, r4
 8002472:	480a      	ldr	r0, [pc, #40]	@ (800249c <processUploadDataToServer+0x78>)
 8002474:	f008 fd1a 	bl	800aeac <memset>
			SIM_UART_ReInitializeRxDMA();
 8002478:	f7fe fdcc 	bl	8001014 <SIM_UART_ReInitializeRxDMA>
			return 0;
 800247c:	2000      	movs	r0, #0
 800247e:	e7f0      	b.n	8002462 <processUploadDataToServer+0x3e>
		uart_transmit_string(&huart1, (uint8_t *)"Sending ERROR (SENDING ERROR)\n");
 8002480:	4908      	ldr	r1, [pc, #32]	@ (80024a4 <processUploadDataToServer+0x80>)
 8002482:	4803      	ldr	r0, [pc, #12]	@ (8002490 <processUploadDataToServer+0x6c>)
 8002484:	f002 f91c 	bl	80046c0 <uart_transmit_string>
		return 0;
 8002488:	e7f8      	b.n	800247c <processUploadDataToServer+0x58>
 800248a:	bf00      	nop
 800248c:	0800f693 	.word	0x0800f693
 8002490:	200013c4 	.word	0x200013c4
 8002494:	0800f6c3 	.word	0x0800f6c3
 8002498:	0800f6d4 	.word	0x0800f6d4
 800249c:	20000bd8 	.word	0x20000bd8
 80024a0:	0800f6eb 	.word	0x0800f6eb
 80024a4:	0800f71b 	.word	0x0800f71b

080024a8 <StartGSM>:

void StartGSM(void const * argument)
{
 80024a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  /* USER CODE BEGIN StartGSM */
	Debug_printf("------------------------ Starting GSM: Pushing data to Server ------------------------");
 80024ac:	488a      	ldr	r0, [pc, #552]	@ (80026d8 <StartGSM+0x230>)
						received_RMC = 0;
						uart_transmit_string(&huart1, (uint8_t *)"RECEIVED RMC DATA AT GSM MODULE\n");
						save_rmc_to_location_info(&location_info);
						char addr_out[128];
						Debug_printf("Current stack address to be sent to the server: \n");
						sprintf(addr_out, "Address going to send to server at GSM:(STACK FROM MAIL QUEUE)  %08lx \n", current_addr_gsm);
 80024ae:	4f8b      	ldr	r7, [pc, #556]	@ (80026dc <StartGSM+0x234>)
{
 80024b0:	b0c5      	sub	sp, #276	@ 0x114
	Debug_printf("------------------------ Starting GSM: Pushing data to Server ------------------------");
 80024b2:	f002 f915 	bl	80046e0 <Debug_printf>
	RingBufferDmaU8_initUSARTRx(&SIMRxDMARing, &huart3, response, SIM_RESPONSE_MAX_SIZE);
 80024b6:	4a8a      	ldr	r2, [pc, #552]	@ (80026e0 <StartGSM+0x238>)
 80024b8:	498a      	ldr	r1, [pc, #552]	@ (80026e4 <StartGSM+0x23c>)
 80024ba:	488b      	ldr	r0, [pc, #556]	@ (80026e8 <StartGSM+0x240>)
 80024bc:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 80024c0:	f000 fbea 	bl	8002c98 <RingBufferDmaU8_initUSARTRx>
	JT808_TerminalRegistration reg_msg = create_terminal_registration();
 80024c4:	a804      	add	r0, sp, #16
 80024c6:	f7fe fd43 	bl	8000f50 <create_terminal_registration>
	JT808_LocationInfoReport location_info = create_location_info_report();
 80024ca:	a813      	add	r0, sp, #76	@ 0x4c
 80024cc:	f7fe fd66 	bl	8000f9c <create_location_info_report>
	initQueue_GSM(&result_addr_queue);
 80024d0:	4886      	ldr	r0, [pc, #536]	@ (80026ec <StartGSM+0x244>)
 80024d2:	f000 fb05 	bl	8002ae0 <initQueue_GSM>
	init_SIM_module();
 80024d6:	f7fe fde3 	bl	80010a0 <init_SIM_module>
	int is_set_uniqueID = 0;
 80024da:	2600      	movs	r6, #0
	int countReconnect = 0;
 80024dc:	4635      	mov	r5, r6
	int process = 0;
 80024de:	4634      	mov	r4, r6
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 80024e0:	4883      	ldr	r0, [pc, #524]	@ (80026f0 <StartGSM+0x248>)
 80024e2:	f8df 8258 	ldr.w	r8, [pc, #600]	@ 800273c <StartGSM+0x294>
 80024e6:	2201      	movs	r2, #1
 80024e8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80024ec:	f003 f90c 	bl	8005708 <HAL_GPIO_WritePin>
		osDelay(300);
 80024f0:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80024f4:	f005 f99e 	bl	8007834 <osDelay>
		switch(process){
 80024f8:	2c08      	cmp	r4, #8
 80024fa:	d869      	bhi.n	80025d0 <StartGSM+0x128>
 80024fc:	e8df f014 	tbh	[pc, r4, lsl #1]
 8002500:	00220009 	.word	0x00220009
 8002504:	00850050 	.word	0x00850050
 8002508:	00d100b6 	.word	0x00d100b6
 800250c:	012000de 	.word	0x012000de
 8002510:	02cc      	.short	0x02cc
				uart_transmit_string(&huart1, (uint8_t *)"First CHECK\r\n");
 8002512:	4978      	ldr	r1, [pc, #480]	@ (80026f4 <StartGSM+0x24c>)
 8002514:	4878      	ldr	r0, [pc, #480]	@ (80026f8 <StartGSM+0x250>)
 8002516:	f002 f8d3 	bl	80046c0 <uart_transmit_string>
				isReady = first_check_SIM();
 800251a:	f7fe fe93 	bl	8001244 <first_check_SIM>
				if(isReady) process++;
 800251e:	4605      	mov	r5, r0
 8002520:	2800      	cmp	r0, #0
 8002522:	f040 82d0 	bne.w	8002ac6 <StartGSM+0x61e>
						memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8002526:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 800252a:	2100      	movs	r1, #0
 800252c:	486c      	ldr	r0, [pc, #432]	@ (80026e0 <StartGSM+0x238>)
 800252e:	f008 fcbd 	bl	800aeac <memset>
						SIM_UART_ReInitializeRxDMA();
 8002532:	f7fe fd6f 	bl	8001014 <SIM_UART_ReInitializeRxDMA>
						uart_transmit_string(&huart1,(uint8_t*) "Rebooting SIM module\n");
 8002536:	4971      	ldr	r1, [pc, #452]	@ (80026fc <StartGSM+0x254>)
 8002538:	486f      	ldr	r0, [pc, #444]	@ (80026f8 <StartGSM+0x250>)
 800253a:	f002 f8c1 	bl	80046c0 <uart_transmit_string>
						reboot_SIM_module();
 800253e:	f7fe fdc9 	bl	80010d4 <reboot_SIM_module>
						process = 0;
 8002542:	e02b      	b.n	800259c <StartGSM+0xf4>
				uart_transmit_string(&huart1, (uint8_t *)"Check EVERYTHING READY\r\n");
 8002544:	496e      	ldr	r1, [pc, #440]	@ (8002700 <StartGSM+0x258>)
 8002546:	486c      	ldr	r0, [pc, #432]	@ (80026f8 <StartGSM+0x250>)
 8002548:	f002 f8ba 	bl	80046c0 <uart_transmit_string>
				osDelay(100);
 800254c:	2064      	movs	r0, #100	@ 0x64
 800254e:	f005 f971 	bl	8007834 <osDelay>
				int check_SIM = check_SIM_ready();
 8002552:	f7fe ff5d 	bl	8001410 <check_SIM_ready>
 8002556:	4681      	mov	r9, r0
				if(is_set_uniqueID == 0){
 8002558:	b956      	cbnz	r6, 8002570 <StartGSM+0xc8>
					memcpy(reg_msg.terminal_phone_number, terminal_phone_number, sizeof(terminal_phone_number));
 800255a:	4b6a      	ldr	r3, [pc, #424]	@ (8002704 <StartGSM+0x25c>)
 800255c:	681a      	ldr	r2, [r3, #0]
 800255e:	889b      	ldrh	r3, [r3, #4]
 8002560:	f8cd 2015 	str.w	r2, [sp, #21]
 8002564:	f8ad 3019 	strh.w	r3, [sp, #25]
					memcpy(location_info.terminal_phone_number, terminal_phone_number, sizeof(terminal_phone_number));
 8002568:	f8cd 2051 	str.w	r2, [sp, #81]	@ 0x51
 800256c:	f8ad 3055 	strh.w	r3, [sp, #85]	@ 0x55
				osDelay(150);
 8002570:	2096      	movs	r0, #150	@ 0x96
 8002572:	f005 f95f 	bl	8007834 <osDelay>
				if (check_SIM == 0){
 8002576:	f1b9 0f00 	cmp.w	r9, #0
 800257a:	f040 82a6 	bne.w	8002aca <StartGSM+0x622>
					memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 800257e:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8002582:	4649      	mov	r1, r9
 8002584:	4856      	ldr	r0, [pc, #344]	@ (80026e0 <StartGSM+0x238>)
 8002586:	f008 fc91 	bl	800aeac <memset>
					SIM_UART_ReInitializeRxDMA();
 800258a:	f7fe fd43 	bl	8001014 <SIM_UART_ReInitializeRxDMA>
					uart_transmit_string(&huart1,(uint8_t*) "Rebooting SIM module");
 800258e:	495e      	ldr	r1, [pc, #376]	@ (8002708 <StartGSM+0x260>)
 8002590:	4859      	ldr	r0, [pc, #356]	@ (80026f8 <StartGSM+0x250>)
 8002592:	f002 f895 	bl	80046c0 <uart_transmit_string>
					reboot_SIM_module();
 8002596:	f7fe fd9d 	bl	80010d4 <reboot_SIM_module>
					process = 0;
 800259a:	4626      	mov	r6, r4
						process = 0;
 800259c:	2400      	movs	r4, #0
 800259e:	e017      	b.n	80025d0 <StartGSM+0x128>
				uart_transmit_string(&huart1, (uint8_t *)"Inside process: Configure PDP context\r\n");
 80025a0:	495a      	ldr	r1, [pc, #360]	@ (800270c <StartGSM+0x264>)
 80025a2:	4855      	ldr	r0, [pc, #340]	@ (80026f8 <StartGSM+0x250>)
 80025a4:	f002 f88c 	bl	80046c0 <uart_transmit_string>
				memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 80025a8:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 80025ac:	2100      	movs	r1, #0
 80025ae:	484c      	ldr	r0, [pc, #304]	@ (80026e0 <StartGSM+0x238>)
 80025b0:	f008 fc7c 	bl	800aeac <memset>
				SIM_UART_ReInitializeRxDMA();
 80025b4:	f7fe fd2e 	bl	8001014 <SIM_UART_ReInitializeRxDMA>
				configure_APN(1);
 80025b8:	2001      	movs	r0, #1
 80025ba:	f7ff f88b 	bl	80016d4 <configure_APN>
				memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 80025be:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 80025c2:	2100      	movs	r1, #0
 80025c4:	4846      	ldr	r0, [pc, #280]	@ (80026e0 <StartGSM+0x238>)
 80025c6:	f008 fc71 	bl	800aeac <memset>
				SIM_UART_ReInitializeRxDMA();
 80025ca:	f7fe fd23 	bl	8001014 <SIM_UART_ReInitializeRxDMA>
				process++;
 80025ce:	2403      	movs	r4, #3
					reboot_SIM_module();
					process = 0;
				}
				break;
		}
		if(is_in_sending == 0){
 80025d0:	f8d8 3000 	ldr.w	r3, [r8]
 80025d4:	b90b      	cbnz	r3, 80025da <StartGSM+0x132>
			receiveRMCDataWithAddrGSM();
 80025d6:	f7ff fe57 	bl	8002288 <receiveRMCDataWithAddrGSM>
		}
		if(is_in_sending == 1){
 80025da:	f8d8 3000 	ldr.w	r3, [r8]
			is_in_sending = 0;
		}
		Debug_printf("\nHello from GSM\n");
 80025de:	484c      	ldr	r0, [pc, #304]	@ (8002710 <StartGSM+0x268>)
		if(is_in_sending == 1){
 80025e0:	2b01      	cmp	r3, #1
			is_in_sending = 0;
 80025e2:	bf04      	itt	eq
 80025e4:	2300      	moveq	r3, #0
 80025e6:	f8c8 3000 	streq.w	r3, [r8]
		Debug_printf("\nHello from GSM\n");
 80025ea:	f002 f879 	bl	80046e0 <Debug_printf>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 80025ee:	2200      	movs	r2, #0
 80025f0:	483f      	ldr	r0, [pc, #252]	@ (80026f0 <StartGSM+0x248>)
 80025f2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80025f6:	f003 f887 	bl	8005708 <HAL_GPIO_WritePin>
		uart_transmit_string(&huart1,(uint8_t*) "\n\n");
 80025fa:	4946      	ldr	r1, [pc, #280]	@ (8002714 <StartGSM+0x26c>)
 80025fc:	483e      	ldr	r0, [pc, #248]	@ (80026f8 <StartGSM+0x250>)
 80025fe:	f002 f85f 	bl	80046c0 <uart_transmit_string>
		osDelay(200);
 8002602:	20c8      	movs	r0, #200	@ 0xc8
 8002604:	f005 f916 	bl	8007834 <osDelay>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 8002608:	e76a      	b.n	80024e0 <StartGSM+0x38>
				uart_transmit_string(&huart1, (uint8_t *)"Inside process: Activate PDP context\r\n");
 800260a:	4943      	ldr	r1, [pc, #268]	@ (8002718 <StartGSM+0x270>)
 800260c:	483a      	ldr	r0, [pc, #232]	@ (80026f8 <StartGSM+0x250>)
 800260e:	f002 f857 	bl	80046c0 <uart_transmit_string>
				int receive_activate = activate_context(1);
 8002612:	2001      	movs	r0, #1
 8002614:	f7ff f8b0 	bl	8001778 <activate_context>
				if(receive_activate){
 8002618:	4681      	mov	r9, r0
 800261a:	b190      	cbz	r0, 8002642 <StartGSM+0x19a>
					getCurrentTime();
 800261c:	f7ff fdfa 	bl	8002214 <getCurrentTime>
					uart_transmit_string(&huart1, (uint8_t*) "Activate PDP context successfully\n");
 8002620:	493e      	ldr	r1, [pc, #248]	@ (800271c <StartGSM+0x274>)
 8002622:	4835      	ldr	r0, [pc, #212]	@ (80026f8 <StartGSM+0x250>)
 8002624:	f002 f84c 	bl	80046c0 <uart_transmit_string>
					osDelay(200);
 8002628:	20c8      	movs	r0, #200	@ 0xc8
 800262a:	f005 f903 	bl	8007834 <osDelay>
					memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 800262e:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8002632:	2100      	movs	r1, #0
 8002634:	482a      	ldr	r0, [pc, #168]	@ (80026e0 <StartGSM+0x238>)
 8002636:	f008 fc39 	bl	800aeac <memset>
					SIM_UART_ReInitializeRxDMA();
 800263a:	f7fe fceb 	bl	8001014 <SIM_UART_ReInitializeRxDMA>
					process++;
 800263e:	2404      	movs	r4, #4
 8002640:	e7c6      	b.n	80025d0 <StartGSM+0x128>
					uart_transmit_string(&huart1, (uint8_t*) "Activate PDP Context Failed\n");
 8002642:	4937      	ldr	r1, [pc, #220]	@ (8002720 <StartGSM+0x278>)
					uart_transmit_string(&huart1, (uint8_t*) "Connect to Server Failed\n");
 8002644:	482c      	ldr	r0, [pc, #176]	@ (80026f8 <StartGSM+0x250>)
 8002646:	f002 f83b 	bl	80046c0 <uart_transmit_string>
					int receive_deactivate = deactivate_context(1);
 800264a:	2001      	movs	r0, #1
 800264c:	f7ff f900 	bl	8001850 <deactivate_context>
					memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8002650:	f44f 72c0 	mov.w	r2, #384	@ 0x180
					int receive_deactivate = deactivate_context(1);
 8002654:	4604      	mov	r4, r0
					memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8002656:	4649      	mov	r1, r9
 8002658:	4821      	ldr	r0, [pc, #132]	@ (80026e0 <StartGSM+0x238>)
 800265a:	f008 fc27 	bl	800aeac <memset>
					SIM_UART_ReInitializeRxDMA();
 800265e:	f7fe fcd9 	bl	8001014 <SIM_UART_ReInitializeRxDMA>
					if (receive_deactivate) process = 1;
 8002662:	2c00      	cmp	r4, #0
 8002664:	f43f af5f 	beq.w	8002526 <StartGSM+0x7e>
					if (receive_deactivate) process = 1;
 8002668:	2401      	movs	r4, #1
 800266a:	e7b1      	b.n	80025d0 <StartGSM+0x128>
				uart_transmit_string(&huart1, (uint8_t *)"Inside process: OPEN SOCKET SERVICE\r\n");
 800266c:	492d      	ldr	r1, [pc, #180]	@ (8002724 <StartGSM+0x27c>)
 800266e:	4822      	ldr	r0, [pc, #136]	@ (80026f8 <StartGSM+0x250>)
 8002670:	f002 f826 	bl	80046c0 <uart_transmit_string>
				int received_res = open_socket_service(1, 0, 0, 0);
 8002674:	2300      	movs	r3, #0
 8002676:	461a      	mov	r2, r3
 8002678:	4619      	mov	r1, r3
 800267a:	2001      	movs	r0, #1
 800267c:	f7ff f934 	bl	80018e8 <open_socket_service>
				if(received_res){
 8002680:	4681      	mov	r9, r0
 8002682:	b160      	cbz	r0, 800269e <StartGSM+0x1f6>
					uart_transmit_string(&huart1, (uint8_t*) "Connect to Server successfully\n");
 8002684:	4928      	ldr	r1, [pc, #160]	@ (8002728 <StartGSM+0x280>)
 8002686:	481c      	ldr	r0, [pc, #112]	@ (80026f8 <StartGSM+0x250>)
 8002688:	f002 f81a 	bl	80046c0 <uart_transmit_string>
					int result_check_connect = check_socket_connection(1);
 800268c:	2001      	movs	r0, #1
 800268e:	f7ff f9e3 	bl	8001a58 <check_socket_connection>
					if(result_check_connect == 1){
 8002692:	2801      	cmp	r0, #1
 8002694:	f47f af47 	bne.w	8002526 <StartGSM+0x7e>
						countReconnect++;
 8002698:	3501      	adds	r5, #1
						process++;
 800269a:	2405      	movs	r4, #5
 800269c:	e798      	b.n	80025d0 <StartGSM+0x128>
					uart_transmit_string(&huart1, (uint8_t*) "Connect to Server Failed\n");
 800269e:	4923      	ldr	r1, [pc, #140]	@ (800272c <StartGSM+0x284>)
 80026a0:	e7d0      	b.n	8002644 <StartGSM+0x19c>
				uart_transmit_string(&huart1, (uint8_t *)"Inside process: Register/Login to the server.\r\n");
 80026a2:	4923      	ldr	r1, [pc, #140]	@ (8002730 <StartGSM+0x288>)
 80026a4:	4814      	ldr	r0, [pc, #80]	@ (80026f8 <StartGSM+0x250>)
 80026a6:	f002 f80b 	bl	80046c0 <uart_transmit_string>
				int result_send_login = login_to_server(0,&reg_msg);
 80026aa:	a904      	add	r1, sp, #16
 80026ac:	2000      	movs	r0, #0
 80026ae:	f7ff fb39 	bl	8001d24 <login_to_server>
				if(result_send_login){
 80026b2:	2800      	cmp	r0, #0
 80026b4:	f040 820c 	bne.w	8002ad0 <StartGSM+0x628>
							process++;
 80026b8:	2408      	movs	r4, #8
				break;
 80026ba:	e789      	b.n	80025d0 <StartGSM+0x128>
				uart_transmit_string(&huart1, (uint8_t *)"Inside process: Check Register/Login\r\n");
 80026bc:	480e      	ldr	r0, [pc, #56]	@ (80026f8 <StartGSM+0x250>)
 80026be:	491d      	ldr	r1, [pc, #116]	@ (8002734 <StartGSM+0x28c>)
 80026c0:	f001 fffe 	bl	80046c0 <uart_transmit_string>
				int result_check_login = check_data_sent_to_server(0);
 80026c4:	2000      	movs	r0, #0
 80026c6:	f7ff fc27 	bl	8001f18 <check_data_sent_to_server>
				if(result_check_login){
 80026ca:	2800      	cmp	r0, #0
 80026cc:	d0f4      	beq.n	80026b8 <StartGSM+0x210>
					receive_response("Check terminal register\n");
 80026ce:	481a      	ldr	r0, [pc, #104]	@ (8002738 <StartGSM+0x290>)
 80026d0:	f7fe fcbc 	bl	800104c <receive_response>
					process++;
 80026d4:	2407      	movs	r4, #7
 80026d6:	e77b      	b.n	80025d0 <StartGSM+0x128>
 80026d8:	0800f73a 	.word	0x0800f73a
 80026dc:	20000d5c 	.word	0x20000d5c
 80026e0:	20000bd8 	.word	0x20000bd8
 80026e4:	200012b4 	.word	0x200012b4
 80026e8:	20000bc8 	.word	0x20000bc8
 80026ec:	20000d74 	.word	0x20000d74
 80026f0:	48000800 	.word	0x48000800
 80026f4:	0800f791 	.word	0x0800f791
 80026f8:	200013c4 	.word	0x200013c4
 80026fc:	0800f79f 	.word	0x0800f79f
 8002700:	0800f7b5 	.word	0x0800f7b5
 8002704:	20000b5c 	.word	0x20000b5c
 8002708:	0800f7ce 	.word	0x0800f7ce
 800270c:	0800f7e3 	.word	0x0800f7e3
 8002710:	0800fc59 	.word	0x0800fc59
 8002714:	0800faeb 	.word	0x0800faeb
 8002718:	0800f80b 	.word	0x0800f80b
 800271c:	0800f832 	.word	0x0800f832
 8002720:	0800f855 	.word	0x0800f855
 8002724:	0800f872 	.word	0x0800f872
 8002728:	0800f898 	.word	0x0800f898
 800272c:	0800f8b8 	.word	0x0800f8b8
 8002730:	0800f8d2 	.word	0x0800f8d2
 8002734:	0800f902 	.word	0x0800f902
 8002738:	0800f929 	.word	0x0800f929
 800273c:	20000bc0 	.word	0x20000bc0
				is_in_sending = 1;
 8002740:	2301      	movs	r3, #1
				uart_transmit_string(&huart1, (uint8_t *)"Inside process: Send Location\r\n");
 8002742:	49b7      	ldr	r1, [pc, #732]	@ (8002a20 <StartGSM+0x578>)
 8002744:	48b7      	ldr	r0, [pc, #732]	@ (8002a24 <StartGSM+0x57c>)
				is_in_sending = 1;
 8002746:	f8c8 3000 	str.w	r3, [r8]
				uart_transmit_string(&huart1, (uint8_t *)"Inside process: Send Location\r\n");
 800274a:	f001 ffb9 	bl	80046c0 <uart_transmit_string>
				int result_get_current = getCurrentTime();
 800274e:	f7ff fd61 	bl	8002214 <getCurrentTime>
				if(result_get_current == 0){
 8002752:	2800      	cmp	r0, #0
 8002754:	d0b0      	beq.n	80026b8 <StartGSM+0x210>
					receiveRMCDataWithAddrGSM();
 8002756:	f7ff fd97 	bl	8002288 <receiveRMCDataWithAddrGSM>
					if(received_RMC == 1){
 800275a:	4bb3      	ldr	r3, [pc, #716]	@ (8002a28 <StartGSM+0x580>)
 800275c:	f8d3 a000 	ldr.w	sl, [r3]
 8002760:	f1ba 0f01 	cmp.w	sl, #1
 8002764:	f040 8098 	bne.w	8002898 <StartGSM+0x3f0>
						uart_transmit_string(&huart1, (uint8_t *)"RECEIVED RMC DATA AT GSM MODULE\n");
 8002768:	49b0      	ldr	r1, [pc, #704]	@ (8002a2c <StartGSM+0x584>)
 800276a:	48ae      	ldr	r0, [pc, #696]	@ (8002a24 <StartGSM+0x57c>)
						received_RMC = 0;
 800276c:	2400      	movs	r4, #0
 800276e:	601c      	str	r4, [r3, #0]
						uart_transmit_string(&huart1, (uint8_t *)"RECEIVED RMC DATA AT GSM MODULE\n");
 8002770:	f001 ffa6 	bl	80046c0 <uart_transmit_string>
						save_rmc_to_location_info(&location_info);
 8002774:	a813      	add	r0, sp, #76	@ 0x4c
 8002776:	f7fe fcdb 	bl	8001130 <save_rmc_to_location_info>
						Debug_printf("Current stack address to be sent to the server: \n");
 800277a:	48ad      	ldr	r0, [pc, #692]	@ (8002a30 <StartGSM+0x588>)
 800277c:	f001 ffb0 	bl	80046e0 <Debug_printf>
						sprintf(addr_out, "Address going to send to server at GSM:(STACK FROM MAIL QUEUE)  %08lx \n", current_addr_gsm);
 8002780:	683a      	ldr	r2, [r7, #0]
 8002782:	49ac      	ldr	r1, [pc, #688]	@ (8002a34 <StartGSM+0x58c>)
 8002784:	a824      	add	r0, sp, #144	@ 0x90
 8002786:	f008 fac9 	bl	800ad1c <siprintf>
						HAL_UART_Transmit(&huart1, (uint8_t*) addr_out, 128, 1000);
 800278a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800278e:	2280      	movs	r2, #128	@ 0x80
 8002790:	a924      	add	r1, sp, #144	@ 0x90
 8002792:	48a4      	ldr	r0, [pc, #656]	@ (8002a24 <StartGSM+0x57c>)
 8002794:	f004 fede 	bl	8007554 <HAL_UART_Transmit>
						HAL_UART_Transmit(&huart1, (uint8_t*)"\r\n", 1, 1000);
 8002798:	49a7      	ldr	r1, [pc, #668]	@ (8002a38 <StartGSM+0x590>)
 800279a:	48a2      	ldr	r0, [pc, #648]	@ (8002a24 <StartGSM+0x57c>)
 800279c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80027a0:	4652      	mov	r2, sl
 80027a2:	f004 fed7 	bl	8007554 <HAL_UART_Transmit>
						int result_final = processUploadDataToServer(&location_info);
 80027a6:	a813      	add	r0, sp, #76	@ 0x4c
 80027a8:	f7ff fe3c 	bl	8002424 <processUploadDataToServer>
						if(result_final == 1){
 80027ac:	2801      	cmp	r0, #1
 80027ae:	d17a      	bne.n	80028a6 <StartGSM+0x3fe>
							uart_transmit_string(&huart1, (uint8_t *)"Sending SUCCESS\n");
 80027b0:	49a2      	ldr	r1, [pc, #648]	@ (8002a3c <StartGSM+0x594>)
 80027b2:	489c      	ldr	r0, [pc, #624]	@ (8002a24 <StartGSM+0x57c>)
							if(is_disconnect == 1 || is_using_flash == 1){
 80027b4:	f8df a2d4 	ldr.w	sl, [pc, #724]	@ 8002a8c <StartGSM+0x5e4>
 80027b8:	4da1      	ldr	r5, [pc, #644]	@ (8002a40 <StartGSM+0x598>)
							uart_transmit_string(&huart1, (uint8_t *)"Sending SUCCESS\n");
 80027ba:	f001 ff81 	bl	80046c0 <uart_transmit_string>
							receive_response("Check location report\n");
 80027be:	48a1      	ldr	r0, [pc, #644]	@ (8002a44 <StartGSM+0x59c>)
 80027c0:	f7fe fc44 	bl	800104c <receive_response>
							memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 80027c4:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 80027c8:	4621      	mov	r1, r4
 80027ca:	489f      	ldr	r0, [pc, #636]	@ (8002a48 <StartGSM+0x5a0>)
 80027cc:	f008 fb6e 	bl	800aeac <memset>
							SIM_UART_ReInitializeRxDMA();
 80027d0:	f7fe fc20 	bl	8001014 <SIM_UART_ReInitializeRxDMA>
							if(is_disconnect == 1 || is_using_flash == 1){
 80027d4:	f8da 3000 	ldr.w	r3, [sl]
 80027d8:	2b01      	cmp	r3, #1
 80027da:	d04e      	beq.n	800287a <StartGSM+0x3d2>
 80027dc:	682b      	ldr	r3, [r5, #0]
 80027de:	2b01      	cmp	r3, #1
 80027e0:	d159      	bne.n	8002896 <StartGSM+0x3ee>
								Debug_printf("\n-----------ADDING current address to the result queue----------\n");
 80027e2:	489a      	ldr	r0, [pc, #616]	@ (8002a4c <StartGSM+0x5a4>)
								if(start_addr_disconnect >= end_addr_disconnect - 128 && checkAddrExistInQueue(end_addr_disconnect - 128, &result_addr_queue)){
 80027e4:	f8df 9280 	ldr.w	r9, [pc, #640]	@ 8002a68 <StartGSM+0x5c0>
 80027e8:	f8df b298 	ldr.w	fp, [pc, #664]	@ 8002a84 <StartGSM+0x5dc>
								Debug_printf("\n-----------ADDING current address to the result queue----------\n");
 80027ec:	f001 ff78 	bl	80046e0 <Debug_printf>
								enqueue_GSM(&result_addr_queue, current_addr_gsm);
 80027f0:	6839      	ldr	r1, [r7, #0]
 80027f2:	4897      	ldr	r0, [pc, #604]	@ (8002a50 <StartGSM+0x5a8>)
 80027f4:	f000 f97c 	bl	8002af0 <enqueue_GSM>
								Debug_printf("\n--------------RESULT ADDRESS QUEUE----------------\n");
 80027f8:	4896      	ldr	r0, [pc, #600]	@ (8002a54 <StartGSM+0x5ac>)
 80027fa:	f001 ff71 	bl	80046e0 <Debug_printf>
								printQueue_GSM(&result_addr_queue);
 80027fe:	4894      	ldr	r0, [pc, #592]	@ (8002a50 <StartGSM+0x5a8>)
 8002800:	f000 f9a6 	bl	8002b50 <printQueue_GSM>
								if(start_addr_disconnect >= end_addr_disconnect - 128 && checkAddrExistInQueue(end_addr_disconnect - 128, &result_addr_queue)){
 8002804:	f8d9 2000 	ldr.w	r2, [r9]
 8002808:	f8db 1000 	ldr.w	r1, [fp]
 800280c:	3a80      	subs	r2, #128	@ 0x80
 800280e:	428a      	cmp	r2, r1
 8002810:	d846      	bhi.n	80028a0 <StartGSM+0x3f8>
 8002812:	f8d9 0000 	ldr.w	r0, [r9]
 8002816:	498e      	ldr	r1, [pc, #568]	@ (8002a50 <StartGSM+0x5a8>)
 8002818:	3880      	subs	r0, #128	@ 0x80
 800281a:	f000 f9cd 	bl	8002bb8 <checkAddrExistInQueue>
 800281e:	2800      	cmp	r0, #0
 8002820:	d03e      	beq.n	80028a0 <StartGSM+0x3f8>
									Debug_printf("\n\n\n\n---------------END GETTING FROM FLASH-------------\n\n\n\n");
 8002822:	488d      	ldr	r0, [pc, #564]	@ (8002a58 <StartGSM+0x5b0>)
									is_using_flash = 0;
 8002824:	2400      	movs	r4, #0
									Debug_printf("\n\n\n\n---------------END GETTING FROM FLASH-------------\n\n\n\n");
 8002826:	f001 ff5b 	bl	80046e0 <Debug_printf>
									clearQueue_GSM(&result_addr_queue);
 800282a:	4889      	ldr	r0, [pc, #548]	@ (8002a50 <StartGSM+0x5a8>)
									is_using_flash = 0;
 800282c:	602c      	str	r4, [r5, #0]
									clearQueue_GSM(&result_addr_queue);
 800282e:	f000 f97f 	bl	8002b30 <clearQueue_GSM>
									count_shiftleft = 0;
 8002832:	4b8a      	ldr	r3, [pc, #552]	@ (8002a5c <StartGSM+0x5b4>)
									Debug_printf("\n\n---------------- CLEAR THE MAIL QUEUE ---------------------\n\n");
 8002834:	488a      	ldr	r0, [pc, #552]	@ (8002a60 <StartGSM+0x5b8>)
									start_addr_disconnect = 0;
 8002836:	f8cb 4000 	str.w	r4, [fp]
									count_shiftleft = 0;
 800283a:	601c      	str	r4, [r3, #0]
									end_addr_disconnect = 0;
 800283c:	f8c9 4000 	str.w	r4, [r9]
									Debug_printf("\n\n---------------- CLEAR THE MAIL QUEUE ---------------------\n\n");
 8002840:	f001 ff4e 	bl	80046e0 <Debug_printf>
										Debug_printf("Receiving MAIL\n");
 8002844:	f8df b24c 	ldr.w	fp, [pc, #588]	@ 8002a94 <StartGSM+0x5ec>
										osEvent evt = osMailGet(RMC_MailQGSMId, 2000); // Get a message
 8002848:	4c86      	ldr	r4, [pc, #536]	@ (8002a64 <StartGSM+0x5bc>)
											Debug_printf("Receiving MAIL: %08lx\n", receivedData->address);
 800284a:	f8df 923c 	ldr.w	r9, [pc, #572]	@ 8002a88 <StartGSM+0x5e0>
										Debug_printf("Receiving MAIL\n");
 800284e:	4658      	mov	r0, fp
 8002850:	f001 ff46 	bl	80046e0 <Debug_printf>
										osEvent evt = osMailGet(RMC_MailQGSMId, 2000); // Get a message
 8002854:	6821      	ldr	r1, [r4, #0]
 8002856:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 800285a:	a801      	add	r0, sp, #4
 800285c:	f005 f8e6 	bl	8007a2c <osMailGet>
										if(evt.status == osEventMail){
 8002860:	9b01      	ldr	r3, [sp, #4]
 8002862:	2b20      	cmp	r3, #32
 8002864:	d111      	bne.n	800288a <StartGSM+0x3e2>
											GSM_MAIL_STRUCT *receivedData = (GSM_MAIL_STRUCT *)evt.value.p;
 8002866:	9d02      	ldr	r5, [sp, #8]
											Debug_printf("Receiving MAIL: %08lx\n", receivedData->address);
 8002868:	4648      	mov	r0, r9
 800286a:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 800286c:	f001 ff38 	bl	80046e0 <Debug_printf>
											osMailFree(RMC_MailQGSMId, receivedData);  // Discards the message
 8002870:	6820      	ldr	r0, [r4, #0]
 8002872:	4629      	mov	r1, r5
 8002874:	f005 f913 	bl	8007a9e <osMailFree>
 8002878:	e7e9      	b.n	800284e <StartGSM+0x3a6>
									end_addr_disconnect = current_addr_gsm;
 800287a:	4b7b      	ldr	r3, [pc, #492]	@ (8002a68 <StartGSM+0x5c0>)
 800287c:	683a      	ldr	r2, [r7, #0]
 800287e:	601a      	str	r2, [r3, #0]
									Debug_printf("End address of network outage. RECONNECTED SUCCESSFULLY: %08x\n", end_addr_disconnect);
 8002880:	6819      	ldr	r1, [r3, #0]
 8002882:	487a      	ldr	r0, [pc, #488]	@ (8002a6c <StartGSM+0x5c4>)
 8002884:	f001 ff2c 	bl	80046e0 <Debug_printf>
 8002888:	e7ab      	b.n	80027e2 <StartGSM+0x33a>
											Debug_printf("Have cleared out all mail queue\n");
 800288a:	4879      	ldr	r0, [pc, #484]	@ (8002a70 <StartGSM+0x5c8>)
 800288c:	f001 ff28 	bl	80046e0 <Debug_printf>
								is_disconnect = 0;
 8002890:	2300      	movs	r3, #0
 8002892:	f8ca 3000 	str.w	r3, [sl]
							countReconnect = 0;
 8002896:	2500      	movs	r5, #0
					osDelay(200);
 8002898:	20c8      	movs	r0, #200	@ 0xc8
 800289a:	f004 ffcb 	bl	8007834 <osDelay>
					receiveRMCDataWithAddrGSM();
 800289e:	e75a      	b.n	8002756 <StartGSM+0x2ae>
									is_using_flash = 1;
 80028a0:	2301      	movs	r3, #1
 80028a2:	602b      	str	r3, [r5, #0]
 80028a4:	e7f4      	b.n	8002890 <StartGSM+0x3e8>
						else if(result_final == 2){
 80028a6:	2802      	cmp	r0, #2
 80028a8:	d10e      	bne.n	80028c8 <StartGSM+0x420>
							memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 80028aa:	f44f 72c0 	mov.w	r2, #384	@ 0x180
					memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 80028ae:	4621      	mov	r1, r4
 80028b0:	4865      	ldr	r0, [pc, #404]	@ (8002a48 <StartGSM+0x5a0>)
 80028b2:	f008 fafb 	bl	800aeac <memset>
					SIM_UART_ReInitializeRxDMA();
 80028b6:	f7fe fbad 	bl	8001014 <SIM_UART_ReInitializeRxDMA>
					uart_transmit_string(&huart1,(uint8_t*) "Rebooting SIM module\n");
 80028ba:	496e      	ldr	r1, [pc, #440]	@ (8002a74 <StartGSM+0x5cc>)
 80028bc:	4859      	ldr	r0, [pc, #356]	@ (8002a24 <StartGSM+0x57c>)
 80028be:	f001 feff 	bl	80046c0 <uart_transmit_string>
					reboot_SIM_module();
 80028c2:	f7fe fc07 	bl	80010d4 <reboot_SIM_module>
					process = 0;
 80028c6:	e683      	b.n	80025d0 <StartGSM+0x128>
							uart_transmit_string(&huart1, (uint8_t *)"Sending ERROR\n");
 80028c8:	496b      	ldr	r1, [pc, #428]	@ (8002a78 <StartGSM+0x5d0>)
 80028ca:	4856      	ldr	r0, [pc, #344]	@ (8002a24 <StartGSM+0x57c>)
							if(is_using_flash == 1){
 80028cc:	f8df 9170 	ldr.w	r9, [pc, #368]	@ 8002a40 <StartGSM+0x598>
							uart_transmit_string(&huart1, (uint8_t *)"Sending ERROR\n");
 80028d0:	f001 fef6 	bl	80046c0 <uart_transmit_string>
							memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 80028d4:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 80028d8:	4621      	mov	r1, r4
 80028da:	485b      	ldr	r0, [pc, #364]	@ (8002a48 <StartGSM+0x5a0>)
 80028dc:	f008 fae6 	bl	800aeac <memset>
							SIM_UART_ReInitializeRxDMA();
 80028e0:	f7fe fb98 	bl	8001014 <SIM_UART_ReInitializeRxDMA>
							if(is_using_flash == 1){
 80028e4:	f8d9 3000 	ldr.w	r3, [r9]
 80028e8:	2b01      	cmp	r3, #1
 80028ea:	f040 8083 	bne.w	80029f4 <StartGSM+0x54c>
								Debug_printf("\n-----------------BEFORE update the result address data --------------\n");
 80028ee:	4863      	ldr	r0, [pc, #396]	@ (8002a7c <StartGSM+0x5d4>)
								for (int i = 0; i < result_addr_queue.size; i++) {
 80028f0:	f8df b15c 	ldr.w	fp, [pc, #348]	@ 8002a50 <StartGSM+0x5a8>
									if(result_addr_queue.data[idx] < start_addr_disconnect){
 80028f4:	f8df a18c 	ldr.w	sl, [pc, #396]	@ 8002a84 <StartGSM+0x5dc>
								Debug_printf("\n-----------------BEFORE update the result address data --------------\n");
 80028f8:	f001 fef2 	bl	80046e0 <Debug_printf>
								printQueue_GSM(&result_addr_queue);
 80028fc:	4854      	ldr	r0, [pc, #336]	@ (8002a50 <StartGSM+0x5a8>)
 80028fe:	f000 f927 	bl	8002b50 <printQueue_GSM>
								Debug_printf("\n---------------Update the result address data--------------\n");
 8002902:	485f      	ldr	r0, [pc, #380]	@ (8002a80 <StartGSM+0x5d8>)
 8002904:	f001 feec 	bl	80046e0 <Debug_printf>
								for (int i = 0; i < result_addr_queue.size; i++) {
 8002908:	f8db c208 	ldr.w	ip, [fp, #520]	@ 0x208
									int idx = (result_addr_queue.front + i) % MAX_SIZE;
 800290c:	f8db 1200 	ldr.w	r1, [fp, #512]	@ 0x200
								for (int i = 0; i < result_addr_queue.size; i++) {
 8002910:	45a4      	cmp	ip, r4
 8002912:	dc3f      	bgt.n	8002994 <StartGSM+0x4ec>
								int count_shiftleft_dub = count_shiftleft;
 8002914:	4c51      	ldr	r4, [pc, #324]	@ (8002a5c <StartGSM+0x5b4>)
									if(result_addr_queue.data[idx] == FLASH_END_ADDRESS-0x100){
 8002916:	f8df a138 	ldr.w	sl, [pc, #312]	@ 8002a50 <StartGSM+0x5a8>
								int count_shiftleft_dub = count_shiftleft;
 800291a:	f8d4 e000 	ldr.w	lr, [r4]
								for (int i = 0; i < result_addr_queue.size; i++) {
 800291e:	2000      	movs	r0, #0
										result_addr_queue.data[idx] -= 128 * count_shiftleft;
 8002920:	ea4f 1bce 	mov.w	fp, lr, lsl #7
								for (int i = 0; i < result_addr_queue.size; i++) {
 8002924:	4584      	cmp	ip, r0
 8002926:	dc48      	bgt.n	80029ba <StartGSM+0x512>
								printQueue_GSM(&result_addr_queue);
 8002928:	4849      	ldr	r0, [pc, #292]	@ (8002a50 <StartGSM+0x5a8>)
									Debug_printf("Receiving MAIL\n");
 800292a:	f8df b168 	ldr.w	fp, [pc, #360]	@ 8002a94 <StartGSM+0x5ec>
								printQueue_GSM(&result_addr_queue);
 800292e:	f000 f90f 	bl	8002b50 <printQueue_GSM>
								start_addr_disconnect -= 128 * count_shiftleft;
 8002932:	4b54      	ldr	r3, [pc, #336]	@ (8002a84 <StartGSM+0x5dc>)
 8002934:	6821      	ldr	r1, [r4, #0]
 8002936:	681a      	ldr	r2, [r3, #0]
									osEvent evt = osMailGet(RMC_MailQGSMId, 2000); // Get a message
 8002938:	4c4a      	ldr	r4, [pc, #296]	@ (8002a64 <StartGSM+0x5bc>)
								start_addr_disconnect -= 128 * count_shiftleft;
 800293a:	eba2 12c1 	sub.w	r2, r2, r1, lsl #7
 800293e:	601a      	str	r2, [r3, #0]
								if(start_addr_disconnect < 0x3000) start_addr_disconnect = 0x3000;
 8002940:	681a      	ldr	r2, [r3, #0]
 8002942:	f5b2 5f40 	cmp.w	r2, #12288	@ 0x3000
 8002946:	bf3c      	itt	cc
 8002948:	f44f 5240 	movcc.w	r2, #12288	@ 0x3000
 800294c:	601a      	strcc	r2, [r3, #0]
								end_addr_disconnect -= 128 *count_shiftleft;
 800294e:	4a46      	ldr	r2, [pc, #280]	@ (8002a68 <StartGSM+0x5c0>)
 8002950:	6813      	ldr	r3, [r2, #0]
								start_addr_disconnect -= 128 * count_shiftleft;
 8002952:	01c8      	lsls	r0, r1, #7
								end_addr_disconnect -= 128 *count_shiftleft;
 8002954:	1a1b      	subs	r3, r3, r0
 8002956:	6013      	str	r3, [r2, #0]
								count_shiftleft = 0;
 8002958:	4b40      	ldr	r3, [pc, #256]	@ (8002a5c <StartGSM+0x5b4>)
								Debug_printf("\n\n---------------- CLEAR THE MAIL QUEUE ---------------------\n\n");
 800295a:	4841      	ldr	r0, [pc, #260]	@ (8002a60 <StartGSM+0x5b8>)
								count_shiftleft = 0;
 800295c:	2200      	movs	r2, #0
 800295e:	601a      	str	r2, [r3, #0]
								Debug_printf("\n\n---------------- CLEAR THE MAIL QUEUE ---------------------\n\n");
 8002960:	f001 febe 	bl	80046e0 <Debug_printf>
									Debug_printf("Receiving MAIL\n");
 8002964:	4658      	mov	r0, fp
 8002966:	f001 febb 	bl	80046e0 <Debug_printf>
									osEvent evt = osMailGet(RMC_MailQGSMId, 2000); // Get a message
 800296a:	6821      	ldr	r1, [r4, #0]
 800296c:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8002970:	a801      	add	r0, sp, #4
 8002972:	f005 f85b 	bl	8007a2c <osMailGet>
									if(evt.status == osEventMail){
 8002976:	9b01      	ldr	r3, [sp, #4]
 8002978:	2b20      	cmp	r3, #32
 800297a:	d138      	bne.n	80029ee <StartGSM+0x546>
										GSM_MAIL_STRUCT *receivedData = (GSM_MAIL_STRUCT *)evt.value.p;
 800297c:	f8dd a008 	ldr.w	sl, [sp, #8]
										Debug_printf("Receiving MAIL: %08lx\n", receivedData->address);
 8002980:	4841      	ldr	r0, [pc, #260]	@ (8002a88 <StartGSM+0x5e0>)
 8002982:	f8da 1058 	ldr.w	r1, [sl, #88]	@ 0x58
 8002986:	f001 feab 	bl	80046e0 <Debug_printf>
										osMailFree(RMC_MailQGSMId, receivedData);  // Discards the message
 800298a:	6820      	ldr	r0, [r4, #0]
 800298c:	4651      	mov	r1, sl
 800298e:	f005 f886 	bl	8007a9e <osMailFree>
 8002992:	e7e7      	b.n	8002964 <StartGSM+0x4bc>
									int idx = (result_addr_queue.front + i) % MAX_SIZE;
 8002994:	4421      	add	r1, r4
 8002996:	424b      	negs	r3, r1
 8002998:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800299c:	f001 017f 	and.w	r1, r1, #127	@ 0x7f
 80029a0:	bf58      	it	pl
 80029a2:	4259      	negpl	r1, r3
									if(result_addr_queue.data[idx] < start_addr_disconnect){
 80029a4:	f8da 2000 	ldr.w	r2, [sl]
 80029a8:	f85b 3021 	ldr.w	r3, [fp, r1, lsl #2]
 80029ac:	4293      	cmp	r3, r2
 80029ae:	d202      	bcs.n	80029b6 <StartGSM+0x50e>
										deleteMiddle_GSM(&result_addr_queue, idx);
 80029b0:	4658      	mov	r0, fp
 80029b2:	f000 f927 	bl	8002c04 <deleteMiddle_GSM>
								for (int i = 0; i < result_addr_queue.size; i++) {
 80029b6:	3401      	adds	r4, #1
 80029b8:	e7a6      	b.n	8002908 <StartGSM+0x460>
									int idx = (result_addr_queue.front + i) % MAX_SIZE;
 80029ba:	1843      	adds	r3, r0, r1
 80029bc:	425a      	negs	r2, r3
 80029be:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80029c2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80029c6:	bf58      	it	pl
 80029c8:	4253      	negpl	r3, r2
								for (int i = 0; i < result_addr_queue.size; i++) {
 80029ca:	3001      	adds	r0, #1
									if(result_addr_queue.data[idx] == FLASH_END_ADDRESS-0x100){
 80029cc:	f85a 2023 	ldr.w	r2, [sl, r3, lsl #2]
 80029d0:	f5b2 5f7c 	cmp.w	r2, #16128	@ 0x3f00
										result_addr_queue.data[idx] -= 128 * count_shiftleft_dub;
 80029d4:	bf06      	itte	eq
 80029d6:	ea4f 12ce 	moveq.w	r2, lr, lsl #7
 80029da:	f5c2 527c 	rsbeq	r2, r2, #16128	@ 0x3f00
										result_addr_queue.data[idx] -= 128 * count_shiftleft;
 80029de:	eba2 020b 	subne.w	r2, r2, fp
 80029e2:	f84a 2023 	str.w	r2, [sl, r3, lsl #2]
										count_shiftleft_dub -= 1;
 80029e6:	bf08      	it	eq
 80029e8:	f10e 3eff 	addeq.w	lr, lr, #4294967295
								for (int i = 0; i < result_addr_queue.size; i++) {
 80029ec:	e79a      	b.n	8002924 <StartGSM+0x47c>
										Debug_printf("Have cleared out all mail queue\n");
 80029ee:	4820      	ldr	r0, [pc, #128]	@ (8002a70 <StartGSM+0x5c8>)
 80029f0:	f001 fe76 	bl	80046e0 <Debug_printf>
							if(is_disconnect == 0){
 80029f4:	4c25      	ldr	r4, [pc, #148]	@ (8002a8c <StartGSM+0x5e4>)
 80029f6:	6823      	ldr	r3, [r4, #0]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	f47f ae5d 	bne.w	80026b8 <StartGSM+0x210>
								if(is_using_flash == 0){
 80029fe:	f8d9 3000 	ldr.w	r3, [r9]
 8002a02:	b933      	cbnz	r3, 8002a12 <StartGSM+0x56a>
									start_addr_disconnect = current_addr_gsm;
 8002a04:	4b1f      	ldr	r3, [pc, #124]	@ (8002a84 <StartGSM+0x5dc>)
 8002a06:	683a      	ldr	r2, [r7, #0]
 8002a08:	601a      	str	r2, [r3, #0]
									Debug_printf("Saving start address of connection outage: %08x\n", start_addr_disconnect);
 8002a0a:	6819      	ldr	r1, [r3, #0]
 8002a0c:	4820      	ldr	r0, [pc, #128]	@ (8002a90 <StartGSM+0x5e8>)
 8002a0e:	f001 fe67 	bl	80046e0 <Debug_printf>
								is_disconnect = 1;
 8002a12:	2301      	movs	r3, #1
 8002a14:	6023      	str	r3, [r4, #0]
								is_using_flash = 0;
 8002a16:	2300      	movs	r3, #0
 8002a18:	f8c9 3000 	str.w	r3, [r9]
 8002a1c:	e64c      	b.n	80026b8 <StartGSM+0x210>
 8002a1e:	bf00      	nop
 8002a20:	0800f942 	.word	0x0800f942
 8002a24:	200013c4 	.word	0x200013c4
 8002a28:	20000bc4 	.word	0x20000bc4
 8002a2c:	0800f962 	.word	0x0800f962
 8002a30:	0800f983 	.word	0x0800f983
 8002a34:	0800f9b5 	.word	0x0800f9b5
 8002a38:	0800f211 	.word	0x0800f211
 8002a3c:	0800f6c3 	.word	0x0800f6c3
 8002a40:	20000d6c 	.word	0x20000d6c
 8002a44:	0800f6d4 	.word	0x0800f6d4
 8002a48:	20000bd8 	.word	0x20000bd8
 8002a4c:	0800fa3c 	.word	0x0800fa3c
 8002a50:	20000d74 	.word	0x20000d74
 8002a54:	0800fa7e 	.word	0x0800fa7e
 8002a58:	0800fab3 	.word	0x0800fab3
 8002a5c:	20000d68 	.word	0x20000d68
 8002a60:	0800faee 	.word	0x0800faee
 8002a64:	20000f80 	.word	0x20000f80
 8002a68:	20000d58 	.word	0x20000d58
 8002a6c:	0800f9fd 	.word	0x0800f9fd
 8002a70:	0800fb55 	.word	0x0800fb55
 8002a74:	0800f79f 	.word	0x0800f79f
 8002a78:	0800fb76 	.word	0x0800fb76
 8002a7c:	0800fb85 	.word	0x0800fb85
 8002a80:	0800fbcd 	.word	0x0800fbcd
 8002a84:	20000d60 	.word	0x20000d60
 8002a88:	0800fb3e 	.word	0x0800fb3e
 8002a8c:	20000d70 	.word	0x20000d70
 8002a90:	0800fc0b 	.word	0x0800fc0b
 8002a94:	0800fb2e 	.word	0x0800fb2e
				int result_close = close_connection(0);
 8002a98:	2000      	movs	r0, #0
 8002a9a:	f7ff fb0f 	bl	80020bc <close_connection>
					memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8002a9e:	f44f 72c0 	mov.w	r2, #384	@ 0x180
				if(result_close){
 8002aa2:	4604      	mov	r4, r0
 8002aa4:	2800      	cmp	r0, #0
 8002aa6:	f43f af02 	beq.w	80028ae <StartGSM+0x406>
					memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8002aaa:	2100      	movs	r1, #0
 8002aac:	4809      	ldr	r0, [pc, #36]	@ (8002ad4 <StartGSM+0x62c>)
 8002aae:	f008 f9fd 	bl	800aeac <memset>
					SIM_UART_ReInitializeRxDMA();
 8002ab2:	f7fe faaf 	bl	8001014 <SIM_UART_ReInitializeRxDMA>
					if(countReconnect > 20){
 8002ab6:	2d14      	cmp	r5, #20
 8002ab8:	f73f ad3d 	bgt.w	8002536 <StartGSM+0x8e>
						uart_transmit_string(&huart1,(uint8_t*) "REOPEN CONNECTION TO SERVER\n");
 8002abc:	4906      	ldr	r1, [pc, #24]	@ (8002ad8 <StartGSM+0x630>)
 8002abe:	4807      	ldr	r0, [pc, #28]	@ (8002adc <StartGSM+0x634>)
 8002ac0:	f001 fdfe 	bl	80046c0 <uart_transmit_string>
						process = 4;
 8002ac4:	e5bb      	b.n	800263e <StartGSM+0x196>
				countReconnect = 0;
 8002ac6:	4625      	mov	r5, r4
 8002ac8:	e5ce      	b.n	8002668 <StartGSM+0x1c0>
 8002aca:	4626      	mov	r6, r4
				else process++;
 8002acc:	2402      	movs	r4, #2
 8002ace:	e57f      	b.n	80025d0 <StartGSM+0x128>
					process++;
 8002ad0:	2406      	movs	r4, #6
 8002ad2:	e57d      	b.n	80025d0 <StartGSM+0x128>
 8002ad4:	20000bd8 	.word	0x20000bd8
 8002ad8:	0800fc3c 	.word	0x0800fc3c
 8002adc:	200013c4 	.word	0x200013c4

08002ae0 <initQueue_GSM>:


// Function to initialize the Queue_GSM
void initQueue_GSM(Queue_GSM* q) {
    q->front = 0;
    q->rear = -1;
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	f04f 32ff 	mov.w	r2, #4294967295
 8002ae6:	e9c0 3280 	strd	r3, r2, [r0, #512]	@ 0x200
    q->size = 0;
 8002aea:	f8c0 3208 	str.w	r3, [r0, #520]	@ 0x208
}
 8002aee:	4770      	bx	lr

08002af0 <enqueue_GSM>:
    return q->size == 0;
}

// Function to check if the Queue_GSM is full
int isFull_GSM(Queue_GSM* q) {
    return q->size == MAX_SIZE;
 8002af0:	f8d0 2208 	ldr.w	r2, [r0, #520]	@ 0x208
}

// Function to enqueue (add) a uint32_t value to the Queue_GSM
void enqueue_GSM(Queue_GSM* q, uint32_t value) {
    if (isFull_GSM(q)) {
 8002af4:	2a80      	cmp	r2, #128	@ 0x80
void enqueue_GSM(Queue_GSM* q, uint32_t value) {
 8002af6:	b410      	push	{r4}
    if (isFull_GSM(q)) {
 8002af8:	d104      	bne.n	8002b04 <enqueue_GSM+0x14>
        Debug_printf("Queue_GSM is full\n");
 8002afa:	480c      	ldr	r0, [pc, #48]	@ (8002b2c <enqueue_GSM+0x3c>)
        return;
    }
    q->rear = (q->rear + 1) % MAX_SIZE; // Circular increment
    q->data[q->rear] = value;
    q->size++;
}
 8002afc:	f85d 4b04 	ldr.w	r4, [sp], #4
        Debug_printf("Queue_GSM is full\n");
 8002b00:	f001 bdee 	b.w	80046e0 <Debug_printf>
    q->rear = (q->rear + 1) % MAX_SIZE; // Circular increment
 8002b04:	f8d0 3204 	ldr.w	r3, [r0, #516]	@ 0x204
 8002b08:	3301      	adds	r3, #1
 8002b0a:	425c      	negs	r4, r3
 8002b0c:	f004 047f 	and.w	r4, r4, #127	@ 0x7f
 8002b10:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002b14:	bf58      	it	pl
 8002b16:	4263      	negpl	r3, r4
    q->size++;
 8002b18:	3201      	adds	r2, #1
    q->rear = (q->rear + 1) % MAX_SIZE; // Circular increment
 8002b1a:	f8c0 3204 	str.w	r3, [r0, #516]	@ 0x204
}
 8002b1e:	f85d 4b04 	ldr.w	r4, [sp], #4
    q->data[q->rear] = value;
 8002b22:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
    q->size++;
 8002b26:	f8c0 2208 	str.w	r2, [r0, #520]	@ 0x208
}
 8002b2a:	4770      	bx	lr
 8002b2c:	0800fc6a 	.word	0x0800fc6a

08002b30 <clearQueue_GSM>:
    }
    return q->data[q->front];
}

// Function to clear the entire Queue_GSM
void clearQueue_GSM(Queue_GSM* q) {
 8002b30:	b510      	push	{r4, lr}
	for (int i = 0; i < MAX_SIZE; i++) {
		q->data[i] = 0; // Clear the data explicitly
 8002b32:	f44f 7200 	mov.w	r2, #512	@ 0x200
void clearQueue_GSM(Queue_GSM* q) {
 8002b36:	4604      	mov	r4, r0
		q->data[i] = 0; // Clear the data explicitly
 8002b38:	2100      	movs	r1, #0
 8002b3a:	f008 f9b7 	bl	800aeac <memset>
	}
    q->front = 0;
    q->rear = -1;
 8002b3e:	2300      	movs	r3, #0
 8002b40:	f04f 32ff 	mov.w	r2, #4294967295
 8002b44:	e9c4 3280 	strd	r3, r2, [r4, #512]	@ 0x200
    q->size = 0;
 8002b48:	f8c4 3208 	str.w	r3, [r4, #520]	@ 0x208
}
 8002b4c:	bd10      	pop	{r4, pc}
	...

08002b50 <printQueue_GSM>:

// Function to print the Queue_GSM contents (for debugging)
int printQueue_GSM(Queue_GSM* q) {
 8002b50:	b570      	push	{r4, r5, r6, lr}
    return q->size == 0;
 8002b52:	f8d0 5208 	ldr.w	r5, [r0, #520]	@ 0x208
int printQueue_GSM(Queue_GSM* q) {
 8002b56:	4604      	mov	r4, r0
    if (isEmpty_GSM(q)) {
 8002b58:	b925      	cbnz	r5, 8002b64 <printQueue_GSM+0x14>
        Debug_printf("Queue_GSM is empty\n");
 8002b5a:	4813      	ldr	r0, [pc, #76]	@ (8002ba8 <printQueue_GSM+0x58>)
 8002b5c:	f001 fdc0 	bl	80046e0 <Debug_printf>
        int idx = (q->front + i) % MAX_SIZE;
        Debug_printf("Index %d: %08x\n", i, q->data[idx]);
    }
    Debug_printf("\n");
    return q->size;
}
 8002b60:	4628      	mov	r0, r5
 8002b62:	bd70      	pop	{r4, r5, r6, pc}
    Debug_printf("Queue_GSM contents: \n");
 8002b64:	4811      	ldr	r0, [pc, #68]	@ (8002bac <printQueue_GSM+0x5c>)
        Debug_printf("Index %d: %08x\n", i, q->data[idx]);
 8002b66:	4e12      	ldr	r6, [pc, #72]	@ (8002bb0 <printQueue_GSM+0x60>)
    Debug_printf("Queue_GSM contents: \n");
 8002b68:	f001 fdba 	bl	80046e0 <Debug_printf>
    for (int i = 0; i < q->size; i++) {
 8002b6c:	2500      	movs	r5, #0
 8002b6e:	f8d4 3208 	ldr.w	r3, [r4, #520]	@ 0x208
 8002b72:	42ab      	cmp	r3, r5
 8002b74:	dc05      	bgt.n	8002b82 <printQueue_GSM+0x32>
    Debug_printf("\n");
 8002b76:	480f      	ldr	r0, [pc, #60]	@ (8002bb4 <printQueue_GSM+0x64>)
 8002b78:	f001 fdb2 	bl	80046e0 <Debug_printf>
    return q->size;
 8002b7c:	f8d4 5208 	ldr.w	r5, [r4, #520]	@ 0x208
 8002b80:	e7ee      	b.n	8002b60 <printQueue_GSM+0x10>
        int idx = (q->front + i) % MAX_SIZE;
 8002b82:	f8d4 3200 	ldr.w	r3, [r4, #512]	@ 0x200
 8002b86:	442b      	add	r3, r5
 8002b88:	425a      	negs	r2, r3
 8002b8a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002b8e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002b92:	bf58      	it	pl
 8002b94:	4253      	negpl	r3, r2
        Debug_printf("Index %d: %08x\n", i, q->data[idx]);
 8002b96:	4629      	mov	r1, r5
 8002b98:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
 8002b9c:	4630      	mov	r0, r6
 8002b9e:	f001 fd9f 	bl	80046e0 <Debug_printf>
    for (int i = 0; i < q->size; i++) {
 8002ba2:	3501      	adds	r5, #1
 8002ba4:	e7e3      	b.n	8002b6e <printQueue_GSM+0x1e>
 8002ba6:	bf00      	nop
 8002ba8:	0800fc7d 	.word	0x0800fc7d
 8002bac:	0800fc91 	.word	0x0800fc91
 8002bb0:	0800fca7 	.word	0x0800fca7
 8002bb4:	0800faec 	.word	0x0800faec

08002bb8 <checkAddrExistInQueue>:

// Function to check if an address exists in the Queue_GSM
int checkAddrExistInQueue(uint32_t addr, Queue_GSM* q) {
 8002bb8:	b538      	push	{r3, r4, r5, lr}
    for (int i = 0; i < q->size; i++) {
 8002bba:	f8d1 5208 	ldr.w	r5, [r1, #520]	@ 0x208
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	4295      	cmp	r5, r2
 8002bc2:	dc05      	bgt.n	8002bd0 <checkAddrExistInQueue+0x18>
        }
//        if(addr > q->data[idx] && addr < end_addr){
//        	Debug_printf("INVALID ADDRESS: %08lx\n", addr);
//        }
    }
    Debug_printf("NOT FOUND ADDRESS: %08lx\n", addr);
 8002bc4:	4601      	mov	r1, r0
 8002bc6:	480d      	ldr	r0, [pc, #52]	@ (8002bfc <checkAddrExistInQueue+0x44>)
 8002bc8:	f001 fd8a 	bl	80046e0 <Debug_printf>
    return 0;
 8002bcc:	2000      	movs	r0, #0
 8002bce:	e012      	b.n	8002bf6 <checkAddrExistInQueue+0x3e>
        int idx = (q->front + i) % MAX_SIZE;
 8002bd0:	f8d1 3200 	ldr.w	r3, [r1, #512]	@ 0x200
 8002bd4:	4413      	add	r3, r2
 8002bd6:	425c      	negs	r4, r3
 8002bd8:	f004 047f 	and.w	r4, r4, #127	@ 0x7f
 8002bdc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002be0:	bf58      	it	pl
 8002be2:	4263      	negpl	r3, r4
        if (q->data[idx] == addr) {
 8002be4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002be8:	4283      	cmp	r3, r0
 8002bea:	d105      	bne.n	8002bf8 <checkAddrExistInQueue+0x40>
            Debug_printf("FOUND ADDRESS: %08lx\n", addr);
 8002bec:	4601      	mov	r1, r0
 8002bee:	4804      	ldr	r0, [pc, #16]	@ (8002c00 <checkAddrExistInQueue+0x48>)
 8002bf0:	f001 fd76 	bl	80046e0 <Debug_printf>
            return 1;
 8002bf4:	2001      	movs	r0, #1
}
 8002bf6:	bd38      	pop	{r3, r4, r5, pc}
    for (int i = 0; i < q->size; i++) {
 8002bf8:	3201      	adds	r2, #1
 8002bfa:	e7e1      	b.n	8002bc0 <checkAddrExistInQueue+0x8>
 8002bfc:	0800fcb7 	.word	0x0800fcb7
 8002c00:	0800fcbb 	.word	0x0800fcbb

08002c04 <deleteMiddle_GSM>:

// Function to delete a parameter in the middle of the Queue_GSM
void deleteMiddle_GSM(Queue_GSM* q, int indexToDelete) {
 8002c04:	b4f0      	push	{r4, r5, r6, r7}
    return q->size == 0;
 8002c06:	f8d0 5208 	ldr.w	r5, [r0, #520]	@ 0x208
    if (isEmpty_GSM(q)) {
 8002c0a:	b91d      	cbnz	r5, 8002c14 <deleteMiddle_GSM+0x10>
        Debug_printf("Queue_GSM is empty. Nothing to delete.\n");
 8002c0c:	481f      	ldr	r0, [pc, #124]	@ (8002c8c <deleteMiddle_GSM+0x88>)

    // Update rear and size
    q->rear = (q->rear - 1 + MAX_SIZE) % MAX_SIZE;
    q->size--;
    Debug_printf("Element at index %d deleted successfully.\n", indexToDelete);
}
 8002c0e:	bcf0      	pop	{r4, r5, r6, r7}
        Debug_printf("Invalid index. Cannot delete.\n");
 8002c10:	f001 bd66 	b.w	80046e0 <Debug_printf>
    if (indexToDelete < 0 || indexToDelete >= q->size) {
 8002c14:	2900      	cmp	r1, #0
 8002c16:	db01      	blt.n	8002c1c <deleteMiddle_GSM+0x18>
 8002c18:	428d      	cmp	r5, r1
 8002c1a:	dc01      	bgt.n	8002c20 <deleteMiddle_GSM+0x1c>
        Debug_printf("Invalid index. Cannot delete.\n");
 8002c1c:	481c      	ldr	r0, [pc, #112]	@ (8002c90 <deleteMiddle_GSM+0x8c>)
 8002c1e:	e7f6      	b.n	8002c0e <deleteMiddle_GSM+0xa>
    int actualIndex = (q->front + indexToDelete) % MAX_SIZE;
 8002c20:	f8d0 3200 	ldr.w	r3, [r0, #512]	@ 0x200
 8002c24:	440b      	add	r3, r1
 8002c26:	425a      	negs	r2, r3
 8002c28:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002c2c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
    for (int i = 0; i < q->size - 1; i++) {
 8002c30:	f04f 0600 	mov.w	r6, #0
    int actualIndex = (q->front + indexToDelete) % MAX_SIZE;
 8002c34:	bf58      	it	pl
 8002c36:	4253      	negpl	r3, r2
    for (int i = 0; i < q->size - 1; i++) {
 8002c38:	3d01      	subs	r5, #1
 8002c3a:	42b5      	cmp	r5, r6
 8002c3c:	dc0f      	bgt.n	8002c5e <deleteMiddle_GSM+0x5a>
    q->rear = (q->rear - 1 + MAX_SIZE) % MAX_SIZE;
 8002c3e:	f8d0 3204 	ldr.w	r3, [r0, #516]	@ 0x204
 8002c42:	337f      	adds	r3, #127	@ 0x7f
 8002c44:	425a      	negs	r2, r3
 8002c46:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002c4a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002c4e:	bf58      	it	pl
 8002c50:	4253      	negpl	r3, r2
    q->size--;
 8002c52:	e9c0 3581 	strd	r3, r5, [r0, #516]	@ 0x204
}
 8002c56:	bcf0      	pop	{r4, r5, r6, r7}
    Debug_printf("Element at index %d deleted successfully.\n", indexToDelete);
 8002c58:	480e      	ldr	r0, [pc, #56]	@ (8002c94 <deleteMiddle_GSM+0x90>)
 8002c5a:	f001 bd41 	b.w	80046e0 <Debug_printf>
        int currentIdx = (actualIndex + i) % MAX_SIZE;
 8002c5e:	199a      	adds	r2, r3, r6
 8002c60:	4254      	negs	r4, r2
 8002c62:	f004 047f 	and.w	r4, r4, #127	@ 0x7f
 8002c66:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002c6a:	bf58      	it	pl
 8002c6c:	4262      	negpl	r2, r4
        int nextIdx = (currentIdx + 1) % MAX_SIZE;
 8002c6e:	1c54      	adds	r4, r2, #1
 8002c70:	4267      	negs	r7, r4
 8002c72:	f007 077f 	and.w	r7, r7, #127	@ 0x7f
 8002c76:	f004 047f 	and.w	r4, r4, #127	@ 0x7f
 8002c7a:	bf58      	it	pl
 8002c7c:	427c      	negpl	r4, r7
    for (int i = 0; i < q->size - 1; i++) {
 8002c7e:	3601      	adds	r6, #1
        q->data[currentIdx] = q->data[nextIdx];
 8002c80:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
 8002c84:	f840 4022 	str.w	r4, [r0, r2, lsl #2]
    for (int i = 0; i < q->size - 1; i++) {
 8002c88:	e7d7      	b.n	8002c3a <deleteMiddle_GSM+0x36>
 8002c8a:	bf00      	nop
 8002c8c:	0800fcd1 	.word	0x0800fcd1
 8002c90:	0800fcf9 	.word	0x0800fcf9
 8002c94:	0800fd18 	.word	0x0800fd18

08002c98 <RingBufferDmaU8_initUSARTRx>:
// int daychange = 0;

uint8_t message1[] = "Hello from DSS\n";

void RingBufferDmaU8_initUSARTRx(RingBufferDmaU8_TypeDef* ring, UART_HandleTypeDef* husart, uint8_t* buffer, uint16_t size) // cai dat dma
{
 8002c98:	b410      	push	{r4}
 8002c9a:	4604      	mov	r4, r0
 8002c9c:	4608      	mov	r0, r1
  ring->buffer = buffer;
  ring->size = size;
 8002c9e:	80a3      	strh	r3, [r4, #4]
{
 8002ca0:	4611      	mov	r1, r2
 8002ca2:	461a      	mov	r2, r3
  ring->tailPtr = buffer;
  ring->dmaHandle = husart->hdmarx;
 8002ca4:	6f43      	ldr	r3, [r0, #116]	@ 0x74
  ring->buffer = buffer;
 8002ca6:	6021      	str	r1, [r4, #0]
  ring->tailPtr = buffer;
 8002ca8:	60a1      	str	r1, [r4, #8]
  ring->dmaHandle = husart->hdmarx;
 8002caa:	60e3      	str	r3, [r4, #12]
  HAL_UART_Receive_DMA(husart, buffer, size);
}
 8002cac:	f85d 4b04 	ldr.w	r4, [sp], #4
  HAL_UART_Receive_DMA(husart, buffer, size);
 8002cb0:	f004 bd76 	b.w	80077a0 <HAL_UART_Receive_DMA>

08002cb4 <set_time>:
#include "RTC.h"
#include "system_management.h"
#include "spi_flash.h"

void set_time (uint8_t hr, uint8_t min, uint8_t sec)
{
 8002cb4:	b570      	push	{r4, r5, r6, lr}
 8002cb6:	b086      	sub	sp, #24
 8002cb8:	4606      	mov	r6, r0
 8002cba:	460d      	mov	r5, r1
 8002cbc:	4614      	mov	r4, r2
	RTC_TimeTypeDef sTime = {0};
 8002cbe:	2100      	movs	r1, #0
 8002cc0:	2211      	movs	r2, #17
 8002cc2:	f10d 0007 	add.w	r0, sp, #7
 8002cc6:	f008 f8f1 	bl	800aeac <memset>
	sTime.Hours = hr;
	sTime.Minutes = min;
	sTime.Seconds = sec;
	sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
	sTime.StoreOperation = RTC_STOREOPERATION_RESET;
	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8002cca:	4808      	ldr	r0, [pc, #32]	@ (8002cec <set_time+0x38>)
	sTime.Hours = hr;
 8002ccc:	f88d 6004 	strb.w	r6, [sp, #4]
	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	a901      	add	r1, sp, #4
	sTime.Minutes = min;
 8002cd4:	f88d 5005 	strb.w	r5, [sp, #5]
	sTime.Seconds = sec;
 8002cd8:	f88d 4006 	strb.w	r4, [sp, #6]
	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8002cdc:	f003 fa36 	bl	800614c <HAL_RTC_SetTime>
 8002ce0:	b108      	cbz	r0, 8002ce6 <set_time+0x32>
	{
		Error_Handler();
 8002ce2:	f000 fb44 	bl	800336e <Error_Handler>
	}
}
 8002ce6:	b006      	add	sp, #24
 8002ce8:	bd70      	pop	{r4, r5, r6, pc}
 8002cea:	bf00      	nop
 8002cec:	20001560 	.word	0x20001560

08002cf0 <set_date>:

void set_date (uint8_t year, uint8_t month, uint8_t date)  // monday = 1
{
 8002cf0:	b507      	push	{r0, r1, r2, lr}
	RTC_DateTypeDef sDate = {0};
 8002cf2:	2300      	movs	r3, #0
	sDate.Month = month;
 8002cf4:	f88d 1005 	strb.w	r1, [sp, #5]
	sDate.Date = date;
 8002cf8:	f88d 2006 	strb.w	r2, [sp, #6]
	sDate.Year = year;
 8002cfc:	f88d 0007 	strb.w	r0, [sp, #7]
	if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8002d00:	461a      	mov	r2, r3
 8002d02:	4806      	ldr	r0, [pc, #24]	@ (8002d1c <set_date+0x2c>)
	RTC_DateTypeDef sDate = {0};
 8002d04:	f88d 3004 	strb.w	r3, [sp, #4]
	if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8002d08:	a901      	add	r1, sp, #4
 8002d0a:	f003 fa79 	bl	8006200 <HAL_RTC_SetDate>
 8002d0e:	b108      	cbz	r0, 8002d14 <set_date+0x24>
	{
		Error_Handler();
 8002d10:	f000 fb2d 	bl	800336e <Error_Handler>
	}
}
 8002d14:	b003      	add	sp, #12
 8002d16:	f85d fb04 	ldr.w	pc, [sp], #4
 8002d1a:	bf00      	nop
 8002d1c:	20001560 	.word	0x20001560

08002d20 <get_RTC_time_date>:

void get_RTC_time_date(RMCSTRUCT *rmc)
{
 8002d20:	b5f0      	push	{r4, r5, r6, r7, lr}
	char date[12]; // "YYYY-MM-DD" format, 10 characters + null terminator
	RTC_DateTypeDef gDate;
	RTC_TimeTypeDef gTime;

	  /* Get the RTC current Time */
	HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BIN);
 8002d22:	4d29      	ldr	r5, [pc, #164]	@ (8002dc8 <get_RTC_time_date+0xa8>)
{
 8002d24:	b0b3      	sub	sp, #204	@ 0xcc
 8002d26:	4604      	mov	r4, r0
	HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BIN);
 8002d28:	a90d      	add	r1, sp, #52	@ 0x34
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	4628      	mov	r0, r5
 8002d2e:	f003 fab7 	bl	80062a0 <HAL_RTC_GetTime>
	/* Get the RTC current Date */
	HAL_RTC_GetDate(&hrtc, &gDate, RTC_FORMAT_BIN);
 8002d32:	a906      	add	r1, sp, #24
 8002d34:	2200      	movs	r2, #0
 8002d36:	4628      	mov	r0, r5
 8002d38:	f003 fad5 	bl	80062e6 <HAL_RTC_GetDate>

  /* Display time Format: hh:mm:ss */
  /* Format time as "HH:MM:SS" */
	snprintf(time, sizeof(time), "%02d:%02d:%02d\n", gTime.Hours, gTime.Minutes, gTime.Seconds);
 8002d3c:	f89d 3036 	ldrb.w	r3, [sp, #54]	@ 0x36
	uart_transmit_string(&huart1,(uint8_t*) time);
 8002d40:	4d22      	ldr	r5, [pc, #136]	@ (8002dcc <get_RTC_time_date+0xac>)
	snprintf(time, sizeof(time), "%02d:%02d:%02d\n", gTime.Hours, gTime.Minutes, gTime.Seconds);
 8002d42:	9301      	str	r3, [sp, #4]
 8002d44:	f89d 3035 	ldrb.w	r3, [sp, #53]	@ 0x35
 8002d48:	4a21      	ldr	r2, [pc, #132]	@ (8002dd0 <get_RTC_time_date+0xb0>)
 8002d4a:	9300      	str	r3, [sp, #0]
 8002d4c:	210a      	movs	r1, #10
 8002d4e:	f89d 3034 	ldrb.w	r3, [sp, #52]	@ 0x34
 8002d52:	a807      	add	r0, sp, #28
 8002d54:	f007 ffae 	bl	800acb4 <sniprintf>
	uart_transmit_string(&huart1,(uint8_t*) time);
 8002d58:	a907      	add	r1, sp, #28
 8002d5a:	4628      	mov	r0, r5
 8002d5c:	f001 fcb0 	bl	80046c0 <uart_transmit_string>

	/* Format date as "YYYY-MM-DD" */
	snprintf(date, sizeof(date), "20%02d-%02d-%02d\n", gDate.Year, gDate.Month, gDate.Date);
 8002d60:	f89d 301a 	ldrb.w	r3, [sp, #26]
 8002d64:	9301      	str	r3, [sp, #4]
 8002d66:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8002d6a:	4a1a      	ldr	r2, [pc, #104]	@ (8002dd4 <get_RTC_time_date+0xb4>)
 8002d6c:	9300      	str	r3, [sp, #0]
 8002d6e:	210c      	movs	r1, #12
 8002d70:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8002d74:	a80a      	add	r0, sp, #40	@ 0x28
 8002d76:	f007 ff9d 	bl	800acb4 <sniprintf>
	uart_transmit_string(&huart1,(uint8_t*) date);
 8002d7a:	a90a      	add	r1, sp, #40	@ 0x28
 8002d7c:	4628      	mov	r0, r5
 8002d7e:	f001 fc9f 	bl	80046c0 <uart_transmit_string>

	rmc->date.Yr = gDate.Year;
	rmc->date.Mon = gDate.Month;
	rmc->date.Day = gDate.Date;
 8002d82:	f89d 101a 	ldrb.w	r1, [sp, #26]
	rmc->tim.hour = gTime.Hours;
 8002d86:	f89d 0034 	ldrb.w	r0, [sp, #52]	@ 0x34
	rmc->tim.min = gTime.Minutes;
 8002d8a:	f89d 6035 	ldrb.w	r6, [sp, #53]	@ 0x35
	rmc->tim.sec = gTime.Seconds;
 8002d8e:	f89d 7036 	ldrb.w	r7, [sp, #54]	@ 0x36
	rmc->date.Mon = gDate.Month;
 8002d92:	f89d 2019 	ldrb.w	r2, [sp, #25]
	rmc->date.Yr = gDate.Year;
 8002d96:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8002d9a:	61a3      	str	r3, [r4, #24]
	rmc->date.Mon = gDate.Month;
 8002d9c:	6162      	str	r2, [r4, #20]
	rmc->date.Day = gDate.Date;
 8002d9e:	6121      	str	r1, [r4, #16]
	rmc->tim.hour = gTime.Hours;
 8002da0:	6020      	str	r0, [r4, #0]
	rmc->tim.min = gTime.Minutes;
 8002da2:	6066      	str	r6, [r4, #4]
	rmc->tim.sec = gTime.Seconds;
 8002da4:	60a7      	str	r7, [r4, #8]

	//save_rmc_to_location_info(location_info);
	snprintf((char*)output_buffer, 128, "Time to GMT+8 saved to RMC: 20%02d/%02d/%02d, %02d:%02d:%02d\n", rmc->date.Yr, rmc->date.Mon, rmc->date.Day, rmc->tim.hour, rmc->tim.min, rmc->tim.sec);
 8002da6:	e9cd 1001 	strd	r1, r0, [sp, #4]
 8002daa:	9200      	str	r2, [sp, #0]
 8002dac:	e9cd 6703 	strd	r6, r7, [sp, #12]
 8002db0:	4a09      	ldr	r2, [pc, #36]	@ (8002dd8 <get_RTC_time_date+0xb8>)
 8002db2:	2180      	movs	r1, #128	@ 0x80
 8002db4:	a812      	add	r0, sp, #72	@ 0x48
 8002db6:	f007 ff7d 	bl	800acb4 <sniprintf>
	uart_transmit_string(&huart1, (uint8_t*) output_buffer);
 8002dba:	a912      	add	r1, sp, #72	@ 0x48
 8002dbc:	4628      	mov	r0, r5
 8002dbe:	f001 fc7f 	bl	80046c0 <uart_transmit_string>
}
 8002dc2:	b033      	add	sp, #204	@ 0xcc
 8002dc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002dc6:	bf00      	nop
 8002dc8:	20001560 	.word	0x20001560
 8002dcc:	200013c4 	.word	0x200013c4
 8002dd0:	0800f44b 	.word	0x0800f44b
 8002dd4:	0800fd43 	.word	0x0800fd43
 8002dd8:	0800fd55 	.word	0x0800fd55

08002ddc <vApplicationGetIdleTaskMemory>:
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8002ddc:	4b03      	ldr	r3, [pc, #12]	@ (8002dec <vApplicationGetIdleTaskMemory+0x10>)
 8002dde:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8002de0:	4b03      	ldr	r3, [pc, #12]	@ (8002df0 <vApplicationGetIdleTaskMemory+0x14>)
 8002de2:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8002de4:	2380      	movs	r3, #128	@ 0x80
 8002de6:	6013      	str	r3, [r2, #0]
  /* place for user code */
}
 8002de8:	4770      	bx	lr
 8002dea:	bf00      	nop
 8002dec:	20001184 	.word	0x20001184
 8002df0:	20000f84 	.word	0x20000f84

08002df4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002df4:	b500      	push	{lr}
 8002df6:	b09f      	sub	sp, #124	@ 0x7c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002df8:	2228      	movs	r2, #40	@ 0x28
 8002dfa:	2100      	movs	r1, #0
 8002dfc:	a805      	add	r0, sp, #20
 8002dfe:	f008 f855 	bl	800aeac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002e02:	2214      	movs	r2, #20
 8002e04:	2100      	movs	r1, #0
 8002e06:	4668      	mov	r0, sp
 8002e08:	f008 f850 	bl	800aeac <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002e0c:	223c      	movs	r2, #60	@ 0x3c
 8002e0e:	2100      	movs	r1, #0
 8002e10:	eb0d 0002 	add.w	r0, sp, r2
 8002e14:	f008 f84a 	bl	800aeac <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8002e18:	f002 fc7c 	bl	8005714 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8002e1c:	4a1d      	ldr	r2, [pc, #116]	@ (8002e94 <SystemClock_Config+0xa0>)
 8002e1e:	6a13      	ldr	r3, [r2, #32]
 8002e20:	f023 0318 	bic.w	r3, r3, #24
 8002e24:	6213      	str	r3, [r2, #32]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 8002e26:	2306      	movs	r3, #6
 8002e28:	9305      	str	r3, [sp, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8002e2a:	2301      	movs	r3, #1
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002e2c:	e9cd 3308 	strd	r3, r3, [sp, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002e30:	2310      	movs	r3, #16
 8002e32:	930a      	str	r3, [sp, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002e34:	2002      	movs	r0, #2
 8002e36:	2300      	movs	r3, #0
 8002e38:	e9cd 030c 	strd	r0, r3, [sp, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 8002e3c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002e40:	a805      	add	r0, sp, #20
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 8002e42:	930e      	str	r3, [sp, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002e44:	f002 fc6e 	bl	8005724 <HAL_RCC_OscConfig>
 8002e48:	4601      	mov	r1, r0
 8002e4a:	b108      	cbz	r0, 8002e50 <SystemClock_Config+0x5c>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002e4c:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002e4e:	e7fe      	b.n	8002e4e <SystemClock_Config+0x5a>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002e50:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002e52:	e9cd 3000 	strd	r3, r0, [sp]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002e56:	e9cd 0002 	strd	r0, r0, [sp, #8]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002e5a:	9004      	str	r0, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002e5c:	4668      	mov	r0, sp
 8002e5e:	f002 fee1 	bl	8005c24 <HAL_RCC_ClockConfig>
 8002e62:	b108      	cbz	r0, 8002e68 <SystemClock_Config+0x74>
 8002e64:	b672      	cpsid	i
  while (1)
 8002e66:	e7fe      	b.n	8002e66 <SystemClock_Config+0x72>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 8002e68:	4b0b      	ldr	r3, [pc, #44]	@ (8002e98 <SystemClock_Config+0xa4>)
 8002e6a:	930f      	str	r3, [sp, #60]	@ 0x3c
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002e6c:	e9cd 0011 	strd	r0, r0, [sp, #68]	@ 0x44
  PeriphClkInit.Adc34ClockSelection = RCC_ADC34PLLCLK_DIV1;
 8002e70:	f44f 7380 	mov.w	r3, #256	@ 0x100
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002e74:	9013      	str	r0, [sp, #76]	@ 0x4c
  PeriphClkInit.Adc34ClockSelection = RCC_ADC34PLLCLK_DIV1;
 8002e76:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002e7a:	a80f      	add	r0, sp, #60	@ 0x3c
  PeriphClkInit.Adc34ClockSelection = RCC_ADC34PLLCLK_DIV1;
 8002e7c:	e9cd 3218 	strd	r3, r2, [sp, #96]	@ 0x60
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8002e80:	9310      	str	r3, [sp, #64]	@ 0x40
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002e82:	f002 ffc5 	bl	8005e10 <HAL_RCCEx_PeriphCLKConfig>
 8002e86:	b108      	cbz	r0, 8002e8c <SystemClock_Config+0x98>
 8002e88:	b672      	cpsid	i
  while (1)
 8002e8a:	e7fe      	b.n	8002e8a <SystemClock_Config+0x96>
}
 8002e8c:	b01f      	add	sp, #124	@ 0x7c
 8002e8e:	f85d fb04 	ldr.w	pc, [sp], #4
 8002e92:	bf00      	nop
 8002e94:	40021000 	.word	0x40021000
 8002e98:	00010187 	.word	0x00010187

08002e9c <main>:
{
 8002e9c:	b580      	push	{r7, lr}
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e9e:	4db9      	ldr	r5, [pc, #740]	@ (8003184 <main+0x2e8>)
{
 8002ea0:	b09c      	sub	sp, #112	@ 0x70
  HAL_Init();
 8002ea2:	f001 fcbf 	bl	8004824 <HAL_Init>
  SystemClock_Config();
 8002ea6:	f7ff ffa5 	bl	8002df4 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002eaa:	2214      	movs	r2, #20
 8002eac:	2100      	movs	r1, #0
 8002eae:	a815      	add	r0, sp, #84	@ 0x54
 8002eb0:	f007 fffc 	bl	800aeac <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002eb4:	696b      	ldr	r3, [r5, #20]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
 8002eb6:	48b4      	ldr	r0, [pc, #720]	@ (8003188 <main+0x2ec>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002eb8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8002ebc:	616b      	str	r3, [r5, #20]
 8002ebe:	696b      	ldr	r3, [r5, #20]
 8002ec0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002ec4:	9302      	str	r3, [sp, #8]
 8002ec6:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ec8:	696b      	ldr	r3, [r5, #20]
 8002eca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002ece:	616b      	str	r3, [r5, #20]
 8002ed0:	696b      	ldr	r3, [r5, #20]
 8002ed2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ed6:	9303      	str	r3, [sp, #12]
 8002ed8:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002eda:	696b      	ldr	r3, [r5, #20]
 8002edc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002ee0:	616b      	str	r3, [r5, #20]
 8002ee2:	696b      	ldr	r3, [r5, #20]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
 8002ee4:	2201      	movs	r2, #1
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ee6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
 8002eea:	4611      	mov	r1, r2
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002eec:	9304      	str	r3, [sp, #16]
 8002eee:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
 8002ef0:	f002 fc0a 	bl	8005708 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_6
 8002ef4:	48a4      	ldr	r0, [pc, #656]	@ (8003188 <main+0x2ec>)
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	f240 2156 	movw	r1, #598	@ 0x256
 8002efc:	f002 fc04 	bl	8005708 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 8002f00:	48a2      	ldr	r0, [pc, #648]	@ (800318c <main+0x2f0>)
 8002f02:	2200      	movs	r2, #0
 8002f04:	2104      	movs	r1, #4
 8002f06:	f002 fbff 	bl	8005708 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8002f0a:	48a0      	ldr	r0, [pc, #640]	@ (800318c <main+0x2f0>)
 8002f0c:	2201      	movs	r2, #1
 8002f0e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002f12:	f002 fbf9 	bl	8005708 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
 8002f16:	2201      	movs	r2, #1
 8002f18:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002f1c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f20:	2400      	movs	r4, #0
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
 8002f22:	f002 fbf1 	bl	8005708 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f26:	2701      	movs	r7, #1
 8002f28:	f240 2303 	movw	r3, #515	@ 0x203
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002f2c:	4896      	ldr	r0, [pc, #600]	@ (8003188 <main+0x2ec>)
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002f2e:	9717      	str	r7, [sp, #92]	@ 0x5c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002f30:	a915      	add	r1, sp, #84	@ 0x54
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f32:	e9cd 3715 	strd	r3, r7, [sp, #84]	@ 0x54
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f36:	9418      	str	r4, [sp, #96]	@ 0x60
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002f38:	f002 fb22 	bl	8005580 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_6;
 8002f3c:	2354      	movs	r3, #84	@ 0x54
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002f3e:	eb0d 0103 	add.w	r1, sp, r3
 8002f42:	4891      	ldr	r0, [pc, #580]	@ (8003188 <main+0x2ec>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f44:	e9cd 3715 	strd	r3, r7, [sp, #84]	@ 0x54
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f48:	e9cd 4417 	strd	r4, r4, [sp, #92]	@ 0x5c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002f4c:	f002 fb18 	bl	8005580 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002f50:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f52:	488e      	ldr	r0, [pc, #568]	@ (800318c <main+0x2f0>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f54:	9417      	str	r4, [sp, #92]	@ 0x5c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f56:	a915      	add	r1, sp, #84	@ 0x54
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002f58:	e9cd 3415 	strd	r3, r4, [sp, #84]	@ 0x54
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f5c:	f002 fb10 	bl	8005580 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002f60:	2304      	movs	r3, #4
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f62:	488a      	ldr	r0, [pc, #552]	@ (800318c <main+0x2f0>)
 8002f64:	a915      	add	r1, sp, #84	@ 0x54
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f66:	e9cd 3715 	strd	r3, r7, [sp, #84]	@ 0x54
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002f6a:	f04f 0803 	mov.w	r8, #3
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f6e:	e9cd 4417 	strd	r4, r4, [sp, #92]	@ 0x5c
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002f72:	f44f 5680 	mov.w	r6, #4096	@ 0x1000
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f76:	f002 fb03 	bl	8005580 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f7a:	4884      	ldr	r0, [pc, #528]	@ (800318c <main+0x2f0>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002f7c:	f8cd 8060 	str.w	r8, [sp, #96]	@ 0x60
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f80:	a915      	add	r1, sp, #84	@ 0x54
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f82:	e9cd 6715 	strd	r6, r7, [sp, #84]	@ 0x54
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002f86:	9717      	str	r7, [sp, #92]	@ 0x5c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f88:	f002 fafa 	bl	8005580 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002f8c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f90:	a915      	add	r1, sp, #84	@ 0x54
 8002f92:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f96:	e9cd 3715 	strd	r3, r7, [sp, #84]	@ 0x54
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002f9a:	e9cd 7817 	strd	r7, r8, [sp, #92]	@ 0x5c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f9e:	f002 faef 	bl	8005580 <HAL_GPIO_Init>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002fa2:	696b      	ldr	r3, [r5, #20]
 8002fa4:	433b      	orrs	r3, r7
 8002fa6:	616b      	str	r3, [r5, #20]
 8002fa8:	696b      	ldr	r3, [r5, #20]
 8002faa:	403b      	ands	r3, r7
 8002fac:	9300      	str	r3, [sp, #0]
 8002fae:	9b00      	ldr	r3, [sp, #0]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002fb0:	696b      	ldr	r3, [r5, #20]
 8002fb2:	f043 0302 	orr.w	r3, r3, #2
 8002fb6:	616b      	str	r3, [r5, #20]
 8002fb8:	696b      	ldr	r3, [r5, #20]
  hrtc.Instance = RTC;
 8002fba:	4d75      	ldr	r5, [pc, #468]	@ (8003190 <main+0x2f4>)
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002fbc:	f003 0302 	and.w	r3, r3, #2
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 5, 0);
 8002fc0:	4622      	mov	r2, r4
 8002fc2:	2105      	movs	r1, #5
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002fc4:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 5, 0);
 8002fc6:	200d      	movs	r0, #13
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002fc8:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 5, 0);
 8002fca:	f002 f9b5 	bl	8005338 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8002fce:	200d      	movs	r0, #13
 8002fd0:	f002 f9e4 	bl	800539c <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 5, 0);
 8002fd4:	4622      	mov	r2, r4
 8002fd6:	2105      	movs	r1, #5
 8002fd8:	200f      	movs	r0, #15
 8002fda:	f002 f9ad 	bl	8005338 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8002fde:	200f      	movs	r0, #15
 8002fe0:	f002 f9dc 	bl	800539c <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 5, 0);
 8002fe4:	4622      	mov	r2, r4
 8002fe6:	2105      	movs	r1, #5
 8002fe8:	2010      	movs	r0, #16
 8002fea:	f002 f9a5 	bl	8005338 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8002fee:	2010      	movs	r0, #16
 8002ff0:	f002 f9d4 	bl	800539c <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Channel1_IRQn, 5, 0);
 8002ff4:	4622      	mov	r2, r4
 8002ff6:	2105      	movs	r1, #5
 8002ff8:	2038      	movs	r0, #56	@ 0x38
 8002ffa:	f002 f99d 	bl	8005338 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 8002ffe:	2038      	movs	r0, #56	@ 0x38
 8003000:	f002 f9cc 	bl	800539c <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Channel5_IRQn, 5, 0);
 8003004:	4622      	mov	r2, r4
 8003006:	2105      	movs	r1, #5
 8003008:	203c      	movs	r0, #60	@ 0x3c
 800300a:	f002 f995 	bl	8005338 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel5_IRQn);
 800300e:	203c      	movs	r0, #60	@ 0x3c
 8003010:	f002 f9c4 	bl	800539c <HAL_NVIC_EnableIRQ>
  RTC_TimeTypeDef sTime = {0};
 8003014:	2214      	movs	r2, #20
 8003016:	4621      	mov	r1, r4
 8003018:	a815      	add	r0, sp, #84	@ 0x54
 800301a:	f007 ff47 	bl	800aeac <memset>
  hrtc.Instance = RTC;
 800301e:	4b5d      	ldr	r3, [pc, #372]	@ (8003194 <main+0x2f8>)
  RTC_DateTypeDef sDate = {0};
 8003020:	940e      	str	r4, [sp, #56]	@ 0x38
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8003022:	e9c5 3400 	strd	r3, r4, [r5]
  hrtc.Init.SynchPrediv = 255;
 8003026:	f04f 087f 	mov.w	r8, #127	@ 0x7f
 800302a:	23ff      	movs	r3, #255	@ 0xff
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800302c:	4628      	mov	r0, r5
  hrtc.Init.SynchPrediv = 255;
 800302e:	e9c5 8302 	strd	r8, r3, [r5, #8]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8003032:	e9c5 4404 	strd	r4, r4, [r5, #16]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8003036:	61ac      	str	r4, [r5, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8003038:	f003 f835 	bl	80060a6 <HAL_RTC_Init>
 800303c:	b108      	cbz	r0, 8003042 <main+0x1a6>
 800303e:	b672      	cpsid	i
  while (1)
 8003040:	e7fe      	b.n	8003040 <main+0x1a4>
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8003042:	e9cd 0018 	strd	r0, r0, [sp, #96]	@ 0x60
  sTime.Hours = 0x0;
 8003046:	f8ad 0054 	strh.w	r0, [sp, #84]	@ 0x54
  sTime.Seconds = 0x0;
 800304a:	f88d 0056 	strb.w	r0, [sp, #86]	@ 0x56
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800304e:	463a      	mov	r2, r7
 8003050:	a915      	add	r1, sp, #84	@ 0x54
 8003052:	4628      	mov	r0, r5
 8003054:	f003 f87a 	bl	800614c <HAL_RTC_SetTime>
 8003058:	b108      	cbz	r0, 800305e <main+0x1c2>
 800305a:	b672      	cpsid	i
  while (1)
 800305c:	e7fe      	b.n	800305c <main+0x1c0>
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800305e:	4b4e      	ldr	r3, [pc, #312]	@ (8003198 <main+0x2fc>)
 8003060:	930e      	str	r3, [sp, #56]	@ 0x38
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8003062:	463a      	mov	r2, r7
 8003064:	a90e      	add	r1, sp, #56	@ 0x38
 8003066:	4628      	mov	r0, r5
 8003068:	f003 f8ca 	bl	8006200 <HAL_RTC_SetDate>
 800306c:	4603      	mov	r3, r0
 800306e:	b108      	cbz	r0, 8003074 <main+0x1d8>
 8003070:	b672      	cpsid	i
  while (1)
 8003072:	e7fe      	b.n	8003072 <main+0x1d6>
  hspi1.Instance = SPI1;
 8003074:	4849      	ldr	r0, [pc, #292]	@ (800319c <main+0x300>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003076:	f8df e144 	ldr.w	lr, [pc, #324]	@ 80031bc <main+0x320>
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800307a:	6083      	str	r3, [r0, #8]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800307c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003080:	e9c0 e200 	strd	lr, r2, [r0]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003084:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003088:	e9c0 2303 	strd	r2, r3, [r0, #12]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800308c:	2510      	movs	r5, #16
 800308e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003092:	e9c0 2506 	strd	r2, r5, [r0, #24]
  hspi1.Init.CRCPolynomial = 7;
 8003096:	2207      	movs	r2, #7
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003098:	e9c0 3308 	strd	r3, r3, [r0, #32]
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800309c:	e9c0 230b 	strd	r2, r3, [r0, #44]	@ 0x2c
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80030a0:	6143      	str	r3, [r0, #20]
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80030a2:	6283      	str	r3, [r0, #40]	@ 0x28
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80030a4:	2308      	movs	r3, #8
 80030a6:	6343      	str	r3, [r0, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80030a8:	f003 fa49 	bl	800653e <HAL_SPI_Init>
 80030ac:	4603      	mov	r3, r0
 80030ae:	b108      	cbz	r0, 80030b4 <main+0x218>
 80030b0:	b672      	cpsid	i
  while (1)
 80030b2:	e7fe      	b.n	80030b2 <main+0x216>
  huart1.Instance = USART1;
 80030b4:	483a      	ldr	r0, [pc, #232]	@ (80031a0 <main+0x304>)
  huart1.Init.BaudRate = 115200;
 80030b6:	4a3b      	ldr	r2, [pc, #236]	@ (80031a4 <main+0x308>)
  huart1.Init.Parity = UART_PARITY_NONE;
 80030b8:	6103      	str	r3, [r0, #16]
  huart1.Init.BaudRate = 115200;
 80030ba:	f44f 34e1 	mov.w	r4, #115200	@ 0x1c200
  huart1.Init.Mode = UART_MODE_TX_RX;
 80030be:	270c      	movs	r7, #12
  huart1.Init.StopBits = UART_STOPBITS_1;
 80030c0:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80030c4:	e9c0 7305 	strd	r7, r3, [r0, #20]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80030c8:	e9c0 3307 	strd	r3, r3, [r0, #28]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80030cc:	6243      	str	r3, [r0, #36]	@ 0x24
  huart1.Init.BaudRate = 115200;
 80030ce:	e9c0 2400 	strd	r2, r4, [r0]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80030d2:	f004 fae9 	bl	80076a8 <HAL_UART_Init>
 80030d6:	4603      	mov	r3, r0
 80030d8:	b108      	cbz	r0, 80030de <main+0x242>
 80030da:	b672      	cpsid	i
  while (1)
 80030dc:	e7fe      	b.n	80030dc <main+0x240>
  huart2.Instance = USART2;
 80030de:	4832      	ldr	r0, [pc, #200]	@ (80031a8 <main+0x30c>)
  huart2.Init.BaudRate = 9600;
 80030e0:	f8df c0dc 	ldr.w	ip, [pc, #220]	@ 80031c0 <main+0x324>
 80030e4:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
  huart2.Init.StopBits = UART_STOPBITS_1;
 80030e8:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80030ec:	e9c0 3704 	strd	r3, r7, [r0, #16]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80030f0:	e9c0 3306 	strd	r3, r3, [r0, #24]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80030f4:	e9c0 3308 	strd	r3, r3, [r0, #32]
  huart2.Init.BaudRate = 9600;
 80030f8:	e9c0 c200 	strd	ip, r2, [r0]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80030fc:	f004 fad4 	bl	80076a8 <HAL_UART_Init>
 8003100:	4603      	mov	r3, r0
 8003102:	b108      	cbz	r0, 8003108 <main+0x26c>
 8003104:	b672      	cpsid	i
  while (1)
 8003106:	e7fe      	b.n	8003106 <main+0x26a>
  huart3.Instance = USART3;
 8003108:	4828      	ldr	r0, [pc, #160]	@ (80031ac <main+0x310>)
 800310a:	4a29      	ldr	r2, [pc, #164]	@ (80031b0 <main+0x314>)
  huart3.Init.StopBits = UART_STOPBITS_1;
 800310c:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart3.Init.BaudRate = 115200;
 8003110:	e9c0 2400 	strd	r2, r4, [r0]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003114:	e9c0 3704 	strd	r3, r7, [r0, #16]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003118:	e9c0 3306 	strd	r3, r3, [r0, #24]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800311c:	e9c0 3308 	strd	r3, r3, [r0, #32]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8003120:	f004 fac2 	bl	80076a8 <HAL_UART_Init>
 8003124:	4604      	mov	r4, r0
 8003126:	b108      	cbz	r0, 800312c <main+0x290>
 8003128:	b672      	cpsid	i
  while (1)
 800312a:	e7fe      	b.n	800312a <main+0x28e>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800312c:	462a      	mov	r2, r5
 800312e:	4601      	mov	r1, r0
 8003130:	a815      	add	r0, sp, #84	@ 0x54
 8003132:	f007 febb 	bl	800aeac <memset>
  htim3.Instance = TIM3;
 8003136:	4d1f      	ldr	r5, [pc, #124]	@ (80031b4 <main+0x318>)
  htim3.Init.Prescaler = 8000;
 8003138:	481f      	ldr	r0, [pc, #124]	@ (80031b8 <main+0x31c>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800313a:	9410      	str	r4, [sp, #64]	@ 0x40
  htim3.Init.Prescaler = 8000;
 800313c:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8003140:	e9c5 0300 	strd	r0, r3, [r5]
  htim3.Init.Period = 65535;
 8003144:	f64f 73ff 	movw	r3, #65535	@ 0xffff
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003148:	4628      	mov	r0, r5
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800314a:	e9cd 440e 	strd	r4, r4, [sp, #56]	@ 0x38
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800314e:	e9c5 3403 	strd	r3, r4, [r5, #12]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003152:	60ac      	str	r4, [r5, #8]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003154:	61ac      	str	r4, [r5, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003156:	f003 fe4f 	bl	8006df8 <HAL_TIM_Base_Init>
 800315a:	b108      	cbz	r0, 8003160 <main+0x2c4>
 800315c:	b672      	cpsid	i
  while (1)
 800315e:	e7fe      	b.n	800315e <main+0x2c2>
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003160:	a915      	add	r1, sp, #84	@ 0x54
 8003162:	4628      	mov	r0, r5
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003164:	9615      	str	r6, [sp, #84]	@ 0x54
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003166:	f003 fe81 	bl	8006e6c <HAL_TIM_ConfigClockSource>
 800316a:	b108      	cbz	r0, 8003170 <main+0x2d4>
 800316c:	b672      	cpsid	i
  while (1)
 800316e:	e7fe      	b.n	800316e <main+0x2d2>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003170:	900e      	str	r0, [sp, #56]	@ 0x38
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003172:	9010      	str	r0, [sp, #64]	@ 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003174:	a90e      	add	r1, sp, #56	@ 0x38
 8003176:	4628      	mov	r0, r5
 8003178:	f003 ff12 	bl	8006fa0 <HAL_TIMEx_MasterConfigSynchronization>
 800317c:	b310      	cbz	r0, 80031c4 <main+0x328>
 800317e:	b672      	cpsid	i
  while (1)
 8003180:	e7fe      	b.n	8003180 <main+0x2e4>
 8003182:	bf00      	nop
 8003184:	40021000 	.word	0x40021000
 8003188:	48000800 	.word	0x48000800
 800318c:	48000400 	.word	0x48000400
 8003190:	20001560 	.word	0x20001560
 8003194:	40002800 	.word	0x40002800
 8003198:	00010101 	.word	0x00010101
 800319c:	200014fc 	.word	0x200014fc
 80031a0:	200013c4 	.word	0x200013c4
 80031a4:	40013800 	.word	0x40013800
 80031a8:	2000133c 	.word	0x2000133c
 80031ac:	200012b4 	.word	0x200012b4
 80031b0:	40004800 	.word	0x40004800
 80031b4:	2000144c 	.word	0x2000144c
 80031b8:	40000400 	.word	0x40000400
 80031bc:	40013000 	.word	0x40013000
 80031c0:	40004400 	.word	0x40004400
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80031c4:	4c5b      	ldr	r4, [pc, #364]	@ (8003334 <main+0x498>)
  ADC_ChannelConfTypeDef sConfig = {0};
 80031c6:	2218      	movs	r2, #24
 80031c8:	2100      	movs	r1, #0
 80031ca:	a815      	add	r0, sp, #84	@ 0x54
 80031cc:	f007 fe6e 	bl	800aeac <memset>
  hadc2.Instance = ADC2;
 80031d0:	4a59      	ldr	r2, [pc, #356]	@ (8003338 <main+0x49c>)
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80031d2:	2300      	movs	r3, #0
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80031d4:	2601      	movs	r6, #1
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80031d6:	2704      	movs	r7, #4
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80031d8:	4620      	mov	r0, r4
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80031da:	e9c4 2300 	strd	r2, r3, [r4]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80031de:	e9c4 3302 	strd	r3, r3, [r4, #8]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80031e2:	f884 3020 	strb.w	r3, [r4, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80031e6:	62e3      	str	r3, [r4, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80031e8:	62a6      	str	r6, [r4, #40]	@ 0x28
  hadc2.Init.NbrOfConversion = 1;
 80031ea:	61e6      	str	r6, [r4, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80031ec:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80031f0:	6123      	str	r3, [r4, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80031f2:	6167      	str	r7, [r4, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80031f4:	8323      	strh	r3, [r4, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80031f6:	6363      	str	r3, [r4, #52]	@ 0x34
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80031f8:	f001 fb82 	bl	8004900 <HAL_ADC_Init>
 80031fc:	b108      	cbz	r0, 8003202 <main+0x366>
 80031fe:	b672      	cpsid	i
  while (1)
 8003200:	e7fe      	b.n	8003200 <main+0x364>
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8003202:	e9cd 0017 	strd	r0, r0, [sp, #92]	@ 0x5c
  sConfig.Offset = 0;
 8003206:	e9cd 0019 	strd	r0, r0, [sp, #100]	@ 0x64
  sConfig.Channel = ADC_CHANNEL_2;
 800320a:	2302      	movs	r3, #2
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800320c:	a915      	add	r1, sp, #84	@ 0x54
 800320e:	4620      	mov	r0, r4
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003210:	e9cd 3615 	strd	r3, r6, [sp, #84]	@ 0x54
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003214:	f001 fe76 	bl	8004f04 <HAL_ADC_ConfigChannel>
 8003218:	4605      	mov	r5, r0
 800321a:	b108      	cbz	r0, 8003220 <main+0x384>
 800321c:	b672      	cpsid	i
  while (1)
 800321e:	e7fe      	b.n	800321e <main+0x382>
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8003220:	4c46      	ldr	r4, [pc, #280]	@ (800333c <main+0x4a0>)
  ADC_MultiModeTypeDef multimode = {0};
 8003222:	9010      	str	r0, [sp, #64]	@ 0x40
 8003224:	e9cd 000e 	strd	r0, r0, [sp, #56]	@ 0x38
  ADC_ChannelConfTypeDef sConfig = {0};
 8003228:	4601      	mov	r1, r0
 800322a:	2218      	movs	r2, #24
 800322c:	a815      	add	r0, sp, #84	@ 0x54
 800322e:	f007 fe3d 	bl	800aeac <memset>
  hadc3.Instance = ADC3;
 8003232:	4b43      	ldr	r3, [pc, #268]	@ (8003340 <main+0x4a4>)
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8003234:	f884 5020 	strb.w	r5, [r4, #32]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8003238:	4620      	mov	r0, r4
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800323a:	e9c4 650a 	strd	r6, r5, [r4, #40]	@ 0x28
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800323e:	e9c4 3500 	strd	r3, r5, [r4]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003242:	e9c4 5502 	strd	r5, r5, [r4, #8]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003246:	e9c4 5704 	strd	r5, r7, [r4, #16]
  hadc3.Init.NbrOfConversion = 1;
 800324a:	61e6      	str	r6, [r4, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 800324c:	f884 5030 	strb.w	r5, [r4, #48]	@ 0x30
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8003250:	8325      	strh	r5, [r4, #24]
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8003252:	6365      	str	r5, [r4, #52]	@ 0x34
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8003254:	f001 fb54 	bl	8004900 <HAL_ADC_Init>
 8003258:	b108      	cbz	r0, 800325e <main+0x3c2>
 800325a:	b672      	cpsid	i
  while (1)
 800325c:	e7fe      	b.n	800325c <main+0x3c0>
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800325e:	900e      	str	r0, [sp, #56]	@ 0x38
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 8003260:	a90e      	add	r1, sp, #56	@ 0x38
 8003262:	4620      	mov	r0, r4
 8003264:	f001 ffd2 	bl	800520c <HAL_ADCEx_MultiModeConfigChannel>
 8003268:	b108      	cbz	r0, 800326e <main+0x3d2>
 800326a:	b672      	cpsid	i
  while (1)
 800326c:	e7fe      	b.n	800326c <main+0x3d0>
  sConfig.Channel = ADC_CHANNEL_12;
 800326e:	230c      	movs	r3, #12
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8003270:	e9cd 0017 	strd	r0, r0, [sp, #92]	@ 0x5c
  sConfig.Offset = 0;
 8003274:	e9cd 0019 	strd	r0, r0, [sp, #100]	@ 0x64
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8003278:	a915      	add	r1, sp, #84	@ 0x54
 800327a:	4620      	mov	r0, r4
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800327c:	e9cd 3615 	strd	r3, r6, [sp, #84]	@ 0x54
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8003280:	f001 fe40 	bl	8004f04 <HAL_ADC_ConfigChannel>
 8003284:	4603      	mov	r3, r0
 8003286:	b108      	cbz	r0, 800328c <main+0x3f0>
 8003288:	b672      	cpsid	i
  while (1)
 800328a:	e7fe      	b.n	800328a <main+0x3ee>
  hspi2.Instance = SPI2;
 800328c:	482d      	ldr	r0, [pc, #180]	@ (8003344 <main+0x4a8>)
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800328e:	492e      	ldr	r1, [pc, #184]	@ (8003348 <main+0x4ac>)
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8003290:	6083      	str	r3, [r0, #8]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8003292:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003296:	e9c0 1200 	strd	r1, r2, [r0]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 800329a:	f44f 7240 	mov.w	r2, #768	@ 0x300
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800329e:	e9c0 2303 	strd	r2, r3, [r0, #12]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80032a2:	f44f 7200 	mov.w	r2, #512	@ 0x200
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80032a6:	e9c0 2306 	strd	r2, r3, [r0, #24]
  hspi2.Init.CRCPolynomial = 7;
 80032aa:	2207      	movs	r2, #7
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80032ac:	e9c0 3308 	strd	r3, r3, [r0, #32]
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80032b0:	e9c0 230b 	strd	r2, r3, [r0, #44]	@ 0x2c
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80032b4:	6143      	str	r3, [r0, #20]
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80032b6:	6283      	str	r3, [r0, #40]	@ 0x28
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80032b8:	2308      	movs	r3, #8
 80032ba:	6343      	str	r3, [r0, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80032bc:	f003 f93f 	bl	800653e <HAL_SPI_Init>
 80032c0:	4607      	mov	r7, r0
 80032c2:	b108      	cbz	r0, 80032c8 <main+0x42c>
 80032c4:	b672      	cpsid	i
  while (1)
 80032c6:	e7fe      	b.n	80032c6 <main+0x42a>
  ShiftLeftSemHandle = osSemaphoreCreate(osSemaphore(ShiftLeftSem), 1);
 80032c8:	4631      	mov	r1, r6
  osSemaphoreDef(ShiftLeftSem);
 80032ca:	e9cd 0005 	strd	r0, r0, [sp, #20]
  ShiftLeftSemHandle = osSemaphoreCreate(osSemaphore(ShiftLeftSem), 1);
 80032ce:	a805      	add	r0, sp, #20
 80032d0:	f004 fab8 	bl	8007844 <osSemaphoreCreate>
  osThreadDef(SpiFlash, StartSpiFlash, osPriorityIdle, 0, 1024);
 80032d4:	4c1d      	ldr	r4, [pc, #116]	@ (800334c <main+0x4b0>)
  ShiftLeftSemHandle = osSemaphoreCreate(osSemaphore(ShiftLeftSem), 1);
 80032d6:	4b1e      	ldr	r3, [pc, #120]	@ (8003350 <main+0x4b4>)
 80032d8:	6018      	str	r0, [r3, #0]
  osThreadDef(SpiFlash, StartSpiFlash, osPriorityIdle, 0, 1024);
 80032da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80032dc:	ad07      	add	r5, sp, #28
 80032de:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80032e0:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80032e4:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  SpiFlashHandle = osThreadCreate(osThread(SpiFlash), NULL);
 80032e8:	4639      	mov	r1, r7
 80032ea:	a807      	add	r0, sp, #28
 80032ec:	f004 fa7a 	bl	80077e4 <osThreadCreate>
 80032f0:	4b18      	ldr	r3, [pc, #96]	@ (8003354 <main+0x4b8>)
  osThreadDef(GPS, StartGPS, osPriorityIdle, 0, 480);
 80032f2:	f104 060c 	add.w	r6, r4, #12
  SpiFlashHandle = osThreadCreate(osThread(SpiFlash), NULL);
 80032f6:	6018      	str	r0, [r3, #0]
  osThreadDef(GPS, StartGPS, osPriorityIdle, 0, 480);
 80032f8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80032fa:	ad0e      	add	r5, sp, #56	@ 0x38
 80032fc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80032fe:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8003302:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  GPSHandle = osThreadCreate(osThread(GPS), NULL);
 8003306:	4639      	mov	r1, r7
 8003308:	a80e      	add	r0, sp, #56	@ 0x38
 800330a:	f004 fa6b 	bl	80077e4 <osThreadCreate>
 800330e:	4b12      	ldr	r3, [pc, #72]	@ (8003358 <main+0x4bc>)
  osThreadDef(GSM, StartGSM, osPriorityIdle, 0, 1024);
 8003310:	3428      	adds	r4, #40	@ 0x28
  GPSHandle = osThreadCreate(osThread(GPS), NULL);
 8003312:	6018      	str	r0, [r3, #0]
  osThreadDef(GSM, StartGSM, osPriorityIdle, 0, 1024);
 8003314:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003316:	ad15      	add	r5, sp, #84	@ 0x54
 8003318:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800331a:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800331e:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  GSMHandle = osThreadCreate(osThread(GSM), NULL);
 8003322:	4639      	mov	r1, r7
 8003324:	a815      	add	r0, sp, #84	@ 0x54
 8003326:	f004 fa5d 	bl	80077e4 <osThreadCreate>
 800332a:	4b0c      	ldr	r3, [pc, #48]	@ (800335c <main+0x4c0>)
 800332c:	6018      	str	r0, [r3, #0]
  osKernelStart();
 800332e:	f004 fa54 	bl	80077da <osKernelStart>
  while (1)
 8003332:	e7fe      	b.n	8003332 <main+0x496>
 8003334:	20001658 	.word	0x20001658
 8003338:	50000100 	.word	0x50000100
 800333c:	20001608 	.word	0x20001608
 8003340:	50000400 	.word	0x50000400
 8003344:	20001498 	.word	0x20001498
 8003348:	40003800 	.word	0x40003800
 800334c:	0800ed88 	.word	0x0800ed88
 8003350:	200011d8 	.word	0x200011d8
 8003354:	200011e4 	.word	0x200011e4
 8003358:	200011e0 	.word	0x200011e0
 800335c:	200011dc 	.word	0x200011dc

08003360 <HAL_TIM_PeriodElapsedCallback>:
  if (htim->Instance == TIM2) {
 8003360:	6803      	ldr	r3, [r0, #0]
 8003362:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003366:	d101      	bne.n	800336c <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
 8003368:	f001 ba6e 	b.w	8004848 <HAL_IncTick>
}
 800336c:	4770      	bx	lr

0800336e <Error_Handler>:
 800336e:	b672      	cpsid	i
  while (1)
 8003370:	e7fe      	b.n	8003370 <Error_Handler+0x2>
	...

08003374 <W25_ReadStatusReg1>:
	W25_CS_DISABLE();
	W25_DelayWhileBusy(CHIP_ERASE_TIMEOUT);
	return retval;
} // W25_ChipErase()

uint8_t W25_ReadStatusReg1(void) {
 8003374:	b513      	push	{r0, r1, r4, lr}
	uint8_t cmd = W25_CMD_READ_STATUS_REG_1;
 8003376:	2305      	movs	r3, #5
	uint8_t status_reg1;
	int retval;
	W25_CS_ENABLE(); // Drive Winbond chip select, /CS low
 8003378:	2200      	movs	r2, #0
 800337a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800337e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
	uint8_t cmd = W25_CMD_READ_STATUS_REG_1;
 8003382:	f88d 3006 	strb.w	r3, [sp, #6]
	W25_CS_ENABLE(); // Drive Winbond chip select, /CS low
 8003386:	f002 f9bf 	bl	8005708 <HAL_GPIO_WritePin>
	retval = HAL_SPI_Transmit(&hspi1, &cmd , sizeof(cmd), TIMEOUT); // Send Read Status Reg 1 command
 800338a:	4810      	ldr	r0, [pc, #64]	@ (80033cc <W25_ReadStatusReg1+0x58>)
 800338c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003390:	2201      	movs	r2, #1
 8003392:	f10d 0106 	add.w	r1, sp, #6
 8003396:	f003 f940 	bl	800661a <HAL_SPI_Transmit>
	if(retval == HAL_OK)
 800339a:	4604      	mov	r4, r0
 800339c:	b940      	cbnz	r0, 80033b0 <W25_ReadStatusReg1+0x3c>
	retval = HAL_SPI_Receive(&hspi1, &status_reg1, sizeof(status_reg1), TIMEOUT);
 800339e:	480b      	ldr	r0, [pc, #44]	@ (80033cc <W25_ReadStatusReg1+0x58>)
 80033a0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80033a4:	2201      	movs	r2, #1
 80033a6:	f10d 0107 	add.w	r1, sp, #7
 80033aa:	f003 fb30 	bl	8006a0e <HAL_SPI_Receive>
 80033ae:	4604      	mov	r4, r0
	W25_CS_DISABLE();
 80033b0:	2201      	movs	r2, #1
 80033b2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80033b6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80033ba:	f002 f9a5 	bl	8005708 <HAL_GPIO_WritePin>
	return retval == HAL_OK ? status_reg1:0xFF; // return 0xFF if error
 80033be:	b91c      	cbnz	r4, 80033c8 <W25_ReadStatusReg1+0x54>
 80033c0:	f89d 0007 	ldrb.w	r0, [sp, #7]
} // W25_ReadStatusReg1()
 80033c4:	b002      	add	sp, #8
 80033c6:	bd10      	pop	{r4, pc}
	return retval == HAL_OK ? status_reg1:0xFF; // return 0xFF if error
 80033c8:	20ff      	movs	r0, #255	@ 0xff
 80033ca:	e7fb      	b.n	80033c4 <W25_ReadStatusReg1+0x50>
 80033cc:	200014fc 	.word	0x200014fc

080033d0 <W25_Busy>:

int W25_Busy(void)
{
 80033d0:	b508      	push	{r3, lr}
	return (W25_ReadStatusReg1() & W25_STATUS1_BUSY);
 80033d2:	f7ff ffcf 	bl	8003374 <W25_ReadStatusReg1>
}
 80033d6:	f000 0001 	and.w	r0, r0, #1
 80033da:	bd08      	pop	{r3, pc}

080033dc <W25_DelayWhileBusy>:

int W25_DelayWhileBusy(uint32_t msTimeout)
{
 80033dc:	b570      	push	{r4, r5, r6, lr}
 80033de:	4605      	mov	r5, r0
	uint32_t initial_count = HAL_GetTick();
 80033e0:	f001 fa3e 	bl	8004860 <HAL_GetTick>
 80033e4:	4606      	mov	r6, r0
	int busy;
	uint32_t deltaticks;
	uint32_t count = 0;
	do {
	busy = W25_Busy();
 80033e6:	f7ff fff3 	bl	80033d0 <W25_Busy>
 80033ea:	4604      	mov	r4, r0
	deltaticks = HAL_GetTick() - initial_count;
 80033ec:	f001 fa38 	bl	8004860 <HAL_GetTick>
 80033f0:	1b83      	subs	r3, r0, r6
	count++;
	} while(busy && deltaticks < msTimeout);
 80033f2:	b114      	cbz	r4, 80033fa <W25_DelayWhileBusy+0x1e>
 80033f4:	42ab      	cmp	r3, r5
 80033f6:	d3f6      	bcc.n	80033e6 <W25_DelayWhileBusy+0xa>
	int retval = busy ? HAL_TIMEOUT:HAL_OK;
 80033f8:	2403      	movs	r4, #3
	return retval;
}
 80033fa:	4620      	mov	r0, r4
 80033fc:	bd70      	pop	{r4, r5, r6, pc}

080033fe <W25_Reset>:
void W25_Reset(){
 80033fe:	b508      	push	{r3, lr}
	W25_CS_ENABLE();
 8003400:	2200      	movs	r2, #0
 8003402:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003406:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800340a:	f002 f97d 	bl	8005708 <HAL_GPIO_WritePin>
	W25_CS_DISABLE();
 800340e:	2201      	movs	r2, #1
 8003410:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003414:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003418:	f002 f976 	bl	8005708 <HAL_GPIO_WritePin>
	W25_CS_ENABLE();
 800341c:	2200      	movs	r2, #0
 800341e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003422:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003426:	f002 f96f 	bl	8005708 <HAL_GPIO_WritePin>
	W25_CS_DISABLE();
 800342a:	2201      	movs	r2, #1
 800342c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003430:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003434:	f002 f968 	bl	8005708 <HAL_GPIO_WritePin>
	W25_CS_ENABLE();
 8003438:	2200      	movs	r2, #0
 800343a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800343e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003442:	f002 f961 	bl	8005708 <HAL_GPIO_WritePin>
	W25_CS_DISABLE();
}
 8003446:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	W25_CS_DISABLE();
 800344a:	2201      	movs	r2, #1
 800344c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003450:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003454:	f002 b958 	b.w	8005708 <HAL_GPIO_WritePin>

08003458 <W25_ReadJedecID>:

int W25_ReadJedecID() {
 8003458:	b5f0      	push	{r4, r5, r6, r7, lr}
 800345a:	b08d      	sub	sp, #52	@ 0x34
	int retval;
	uint8_t idcmd = W25_CMD_READ_JEDEC_ID;
 800345c:	239f      	movs	r3, #159	@ 0x9f
	uint8_t jdec_id[4];
	char result[11];
	W25_CS_ENABLE(); // Drive Winbond chip select, /CS low
 800345e:	2200      	movs	r2, #0
 8003460:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003464:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
	uint8_t idcmd = W25_CMD_READ_JEDEC_ID;
 8003468:	f88d 300b 	strb.w	r3, [sp, #11]
	W25_CS_ENABLE(); // Drive Winbond chip select, /CS low
 800346c:	f002 f94c 	bl	8005708 <HAL_GPIO_WritePin>
	retval = HAL_SPI_TransmitReceive(&hspi1, &idcmd, jdec_id, 4, 4000);
 8003470:	f44f 637a 	mov.w	r3, #4000	@ 0xfa0
 8003474:	9300      	str	r3, [sp, #0]
 8003476:	aa03      	add	r2, sp, #12
 8003478:	2304      	movs	r3, #4
 800347a:	f10d 010b 	add.w	r1, sp, #11
 800347e:	4820      	ldr	r0, [pc, #128]	@ (8003500 <W25_ReadJedecID+0xa8>)
 8003480:	f003 f995 	bl	80067ae <HAL_SPI_TransmitReceive>
	W25_CS_DISABLE();
 8003484:	2201      	movs	r2, #1
	retval = HAL_SPI_TransmitReceive(&hspi1, &idcmd, jdec_id, 4, 4000);
 8003486:	4605      	mov	r5, r0
	W25_CS_DISABLE();
 8003488:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800348c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003490:	f002 f93a 	bl	8005708 <HAL_GPIO_WritePin>
	char spi_flash_intro[] = "Flash ID received: ";
 8003494:	4b1b      	ldr	r3, [pc, #108]	@ (8003504 <W25_ReadJedecID+0xac>)
 8003496:	aa07      	add	r2, sp, #28
 8003498:	f103 0710 	add.w	r7, r3, #16
 800349c:	4616      	mov	r6, r2
 800349e:	6818      	ldr	r0, [r3, #0]
 80034a0:	6859      	ldr	r1, [r3, #4]
 80034a2:	4614      	mov	r4, r2
 80034a4:	c403      	stmia	r4!, {r0, r1}
 80034a6:	3308      	adds	r3, #8
 80034a8:	42bb      	cmp	r3, r7
 80034aa:	4622      	mov	r2, r4
 80034ac:	d1f7      	bne.n	800349e <W25_ReadJedecID+0x46>
 80034ae:	6818      	ldr	r0, [r3, #0]
 80034b0:	6020      	str	r0, [r4, #0]
	HAL_UART_Transmit(&huart1, (uint8_t*) spi_flash_intro, strlen(spi_flash_intro), 1000);
 80034b2:	4630      	mov	r0, r6
 80034b4:	f7fc feec 	bl	8000290 <strlen>
 80034b8:	4631      	mov	r1, r6
 80034ba:	b282      	uxth	r2, r0
 80034bc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80034c0:	4811      	ldr	r0, [pc, #68]	@ (8003508 <W25_ReadJedecID+0xb0>)
 80034c2:	f004 f847 	bl	8007554 <HAL_UART_Transmit>

	sprintf(result, "%02X, %02X, %02X", jdec_id[1], jdec_id[2], jdec_id[3]);
 80034c6:	f89d 300f 	ldrb.w	r3, [sp, #15]
 80034ca:	f89d 200d 	ldrb.w	r2, [sp, #13]
 80034ce:	9300      	str	r3, [sp, #0]
 80034d0:	490e      	ldr	r1, [pc, #56]	@ (800350c <W25_ReadJedecID+0xb4>)
 80034d2:	f89d 300e 	ldrb.w	r3, [sp, #14]
 80034d6:	a804      	add	r0, sp, #16
 80034d8:	f007 fc20 	bl	800ad1c <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*) result, 11, 1000);
 80034dc:	a904      	add	r1, sp, #16
 80034de:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80034e2:	220b      	movs	r2, #11
 80034e4:	4808      	ldr	r0, [pc, #32]	@ (8003508 <W25_ReadJedecID+0xb0>)
 80034e6:	f004 f835 	bl	8007554 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, (uint8_t*)"\r", 1, 1000);
 80034ea:	4909      	ldr	r1, [pc, #36]	@ (8003510 <W25_ReadJedecID+0xb8>)
 80034ec:	4806      	ldr	r0, [pc, #24]	@ (8003508 <W25_ReadJedecID+0xb0>)
 80034ee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80034f2:	2201      	movs	r2, #1
 80034f4:	f004 f82e 	bl	8007554 <HAL_UART_Transmit>
	return retval;
} // W25_ReadJEDECID()
 80034f8:	4628      	mov	r0, r5
 80034fa:	b00d      	add	sp, #52	@ 0x34
 80034fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80034fe:	bf00      	nop
 8003500:	200014fc 	.word	0x200014fc
 8003504:	0800fdb3 	.word	0x0800fdb3
 8003508:	200013c4 	.word	0x200013c4
 800350c:	0800fda0 	.word	0x0800fda0
 8003510:	0800fdb1 	.word	0x0800fdb1

08003514 <W25_WriteEnable>:

	return retval;
} // W25_ReadUniqueID()


int W25_WriteEnable(void) {
 8003514:	b513      	push	{r0, r1, r4, lr}
	uint8_t cmd = W25_CMD_WRITE_ENABLE;
 8003516:	2306      	movs	r3, #6
	W25_CS_ENABLE(); // Drive Winbond chip select, /CS low
 8003518:	2200      	movs	r2, #0
 800351a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800351e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
	uint8_t cmd = W25_CMD_WRITE_ENABLE;
 8003522:	f88d 3007 	strb.w	r3, [sp, #7]
	W25_CS_ENABLE(); // Drive Winbond chip select, /CS low
 8003526:	f002 f8ef 	bl	8005708 <HAL_GPIO_WritePin>
	int retval = HAL_SPI_Transmit(&hspi1, &cmd , sizeof(cmd), TIMEOUT); // Send Write Enable command
 800352a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800352e:	f10d 0107 	add.w	r1, sp, #7
 8003532:	2201      	movs	r2, #1
 8003534:	4806      	ldr	r0, [pc, #24]	@ (8003550 <W25_WriteEnable+0x3c>)
 8003536:	f003 f870 	bl	800661a <HAL_SPI_Transmit>
	W25_CS_DISABLE();
 800353a:	2201      	movs	r2, #1
	int retval = HAL_SPI_Transmit(&hspi1, &cmd , sizeof(cmd), TIMEOUT); // Send Write Enable command
 800353c:	4604      	mov	r4, r0
	W25_CS_DISABLE();
 800353e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003542:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003546:	f002 f8df 	bl	8005708 <HAL_GPIO_WritePin>
	return retval;
} // W25_WriteEnable()
 800354a:	4620      	mov	r0, r4
 800354c:	b002      	add	sp, #8
 800354e:	bd10      	pop	{r4, pc}
 8003550:	200014fc 	.word	0x200014fc

08003554 <W25_SectorErase>:

int W25_SectorErase(uint32_t address)
{
 8003554:	b513      	push	{r0, r1, r4, lr}
	int retval;
	uint8_t cmdaddr[4] = {W25_CMD_SECTOR_ERASE,address>>16,address>>8,address};
 8003556:	2320      	movs	r3, #32
 8003558:	f88d 3004 	strb.w	r3, [sp, #4]
 800355c:	0c03      	lsrs	r3, r0, #16
 800355e:	ba40      	rev16	r0, r0
 8003560:	f88d 3005 	strb.w	r3, [sp, #5]
 8003564:	f8ad 0006 	strh.w	r0, [sp, #6]
	W25_WriteEnable(); // Make sure we can write...
 8003568:	f7ff ffd4 	bl	8003514 <W25_WriteEnable>
	W25_CS_ENABLE(); // Drive Winbond chip select, /CS low
 800356c:	2200      	movs	r2, #0
 800356e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003572:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003576:	f002 f8c7 	bl	8005708 <HAL_GPIO_WritePin>
	retval = HAL_SPI_Transmit(&hspi1, cmdaddr , sizeof(cmdaddr ), TIMEOUT); // Send Sector Erase command with address
 800357a:	2204      	movs	r2, #4
 800357c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003580:	eb0d 0102 	add.w	r1, sp, r2
 8003584:	4808      	ldr	r0, [pc, #32]	@ (80035a8 <W25_SectorErase+0x54>)
 8003586:	f003 f848 	bl	800661a <HAL_SPI_Transmit>
	W25_CS_DISABLE();
 800358a:	2201      	movs	r2, #1
	retval = HAL_SPI_Transmit(&hspi1, cmdaddr , sizeof(cmdaddr ), TIMEOUT); // Send Sector Erase command with address
 800358c:	4604      	mov	r4, r0
	W25_CS_DISABLE();
 800358e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003592:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003596:	f002 f8b7 	bl	8005708 <HAL_GPIO_WritePin>
	W25_DelayWhileBusy(SECTOR_ERASE_TIMEOUT);
 800359a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800359e:	f7ff ff1d 	bl	80033dc <W25_DelayWhileBusy>
	return retval;
} // W25_SectorErase()
 80035a2:	4620      	mov	r0, r4
 80035a4:	b002      	add	sp, #8
 80035a6:	bd10      	pop	{r4, pc}
 80035a8:	200014fc 	.word	0x200014fc

080035ac <W25_PageProgram>:

int W25_PageProgram(uint32_t address, uint8_t *buf, uint32_t count)
{
 80035ac:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80035b0:	4606      	mov	r6, r0
 80035b2:	4688      	mov	r8, r1
 80035b4:	4617      	mov	r7, r2
	int retval = HAL_OK;
	W25_WriteEnable(); // Make sure we can write...
 80035b6:	f7ff ffad 	bl	8003514 <W25_WriteEnable>
	while(count) {
		uint8_t cmdaddr[4] = {W25_CMD_PAGE_PROGRAM,address>>16,address>>8,address};
		uint32_t space_left_in_page = 0x100 - (address & 0xFF);
		uint32_t count_this_pass = count <= space_left_in_page? count:space_left_in_page;
		W25_CS_ENABLE(); // Drive Winbond chip select, /CS low
		retval = HAL_SPI_Transmit(&hspi1, cmdaddr , sizeof(cmdaddr ), TIMEOUT); // Send Page Program command with address
 80035ba:	f8df a080 	ldr.w	sl, [pc, #128]	@ 800363c <W25_PageProgram+0x90>
	int retval = HAL_OK;
 80035be:	2400      	movs	r4, #0
		uint8_t cmdaddr[4] = {W25_CMD_PAGE_PROGRAM,address>>16,address>>8,address};
 80035c0:	f04f 0902 	mov.w	r9, #2
	while(count) {
 80035c4:	b91f      	cbnz	r7, 80035ce <W25_PageProgram+0x22>
		address += count_this_pass;
		buf += count_this_pass;
		W25_DelayWhileBusy(PAGE_PROGRAM_TIMEOUT);
	}
	return retval;
} 
 80035c6:	4620      	mov	r0, r4
 80035c8:	b002      	add	sp, #8
 80035ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		uint32_t space_left_in_page = 0x100 - (address & 0xFF);
 80035ce:	b2f5      	uxtb	r5, r6
		uint8_t cmdaddr[4] = {W25_CMD_PAGE_PROGRAM,address>>16,address>>8,address};
 80035d0:	0c33      	lsrs	r3, r6, #16
		uint32_t space_left_in_page = 0x100 - (address & 0xFF);
 80035d2:	f5c5 7580 	rsb	r5, r5, #256	@ 0x100
		uint32_t count_this_pass = count <= space_left_in_page? count:space_left_in_page;
 80035d6:	42bd      	cmp	r5, r7
		uint8_t cmdaddr[4] = {W25_CMD_PAGE_PROGRAM,address>>16,address>>8,address};
 80035d8:	f88d 3005 	strb.w	r3, [sp, #5]
		W25_CS_ENABLE(); // Drive Winbond chip select, /CS low
 80035dc:	f04f 0200 	mov.w	r2, #0
		uint8_t cmdaddr[4] = {W25_CMD_PAGE_PROGRAM,address>>16,address>>8,address};
 80035e0:	ba73      	rev16	r3, r6
		W25_CS_ENABLE(); // Drive Winbond chip select, /CS low
 80035e2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80035e6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
		uint8_t cmdaddr[4] = {W25_CMD_PAGE_PROGRAM,address>>16,address>>8,address};
 80035ea:	f8ad 3006 	strh.w	r3, [sp, #6]
		uint32_t count_this_pass = count <= space_left_in_page? count:space_left_in_page;
 80035ee:	bf28      	it	cs
 80035f0:	463d      	movcs	r5, r7
		uint8_t cmdaddr[4] = {W25_CMD_PAGE_PROGRAM,address>>16,address>>8,address};
 80035f2:	f88d 9004 	strb.w	r9, [sp, #4]
		W25_CS_ENABLE(); // Drive Winbond chip select, /CS low
 80035f6:	f002 f887 	bl	8005708 <HAL_GPIO_WritePin>
		retval = HAL_SPI_Transmit(&hspi1, cmdaddr , sizeof(cmdaddr ), TIMEOUT); // Send Page Program command with address
 80035fa:	2204      	movs	r2, #4
 80035fc:	480f      	ldr	r0, [pc, #60]	@ (800363c <W25_PageProgram+0x90>)
 80035fe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003602:	eb0d 0102 	add.w	r1, sp, r2
 8003606:	f003 f808 	bl	800661a <HAL_SPI_Transmit>
		if(retval == HAL_OK)
 800360a:	4604      	mov	r4, r0
 800360c:	b938      	cbnz	r0, 800361e <W25_PageProgram+0x72>
		  retval = HAL_SPI_Transmit(&hspi1, buf, count_this_pass, TIMEOUT); // Write page data
 800360e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003612:	b2aa      	uxth	r2, r5
 8003614:	4641      	mov	r1, r8
 8003616:	4650      	mov	r0, sl
 8003618:	f002 ffff 	bl	800661a <HAL_SPI_Transmit>
 800361c:	4604      	mov	r4, r0
		W25_CS_DISABLE();
 800361e:	2201      	movs	r2, #1
 8003620:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003624:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003628:	f002 f86e 	bl	8005708 <HAL_GPIO_WritePin>
		W25_DelayWhileBusy(PAGE_PROGRAM_TIMEOUT);
 800362c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
		count -= count_this_pass;
 8003630:	1b7f      	subs	r7, r7, r5
		address += count_this_pass;
 8003632:	442e      	add	r6, r5
		buf += count_this_pass;
 8003634:	44a8      	add	r8, r5
		W25_DelayWhileBusy(PAGE_PROGRAM_TIMEOUT);
 8003636:	f7ff fed1 	bl	80033dc <W25_DelayWhileBusy>
 800363a:	e7c3      	b.n	80035c4 <W25_PageProgram+0x18>
 800363c:	200014fc 	.word	0x200014fc

08003640 <W25_ReadData>:

// Winbond 8.2.6 Read Data (03h)
// The only limit for quantity of data is memory / device size
int W25_ReadData(uint32_t address, uint8_t *buf, int bufSize)
{
 8003640:	b573      	push	{r0, r1, r4, r5, r6, lr}
	int retval;
	uint8_t cmdaddr[4] = {W25_CMD_READ_DATA,address>>16,address>>8,address};
 8003642:	2303      	movs	r3, #3
 8003644:	f88d 3004 	strb.w	r3, [sp, #4]
 8003648:	0c03      	lsrs	r3, r0, #16
 800364a:	ba40      	rev16	r0, r0
 800364c:	f8ad 0006 	strh.w	r0, [sp, #6]
{
 8003650:	460d      	mov	r5, r1
	//printf("+%s(Addr 0x%06X, buf 0x%08X, Len 0x%04X)\r\n",__func__,address,buf,bufSize);
	W25_CS_ENABLE(); // Drive Winbond chip select, /CS low
 8003652:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003656:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
{
 800365a:	4616      	mov	r6, r2
	W25_CS_ENABLE(); // Drive Winbond chip select, /CS low
 800365c:	2200      	movs	r2, #0
	uint8_t cmdaddr[4] = {W25_CMD_READ_DATA,address>>16,address>>8,address};
 800365e:	f88d 3005 	strb.w	r3, [sp, #5]
	W25_CS_ENABLE(); // Drive Winbond chip select, /CS low
 8003662:	f002 f851 	bl	8005708 <HAL_GPIO_WritePin>
	retval = HAL_SPI_Transmit(&hspi1, cmdaddr , sizeof(cmdaddr), 500); // Send Read Data command with address
 8003666:	2204      	movs	r2, #4
 8003668:	480d      	ldr	r0, [pc, #52]	@ (80036a0 <W25_ReadData+0x60>)
 800366a:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800366e:	eb0d 0102 	add.w	r1, sp, r2
 8003672:	f002 ffd2 	bl	800661a <HAL_SPI_Transmit>
	if(retval != HAL_OK) {
 8003676:	4604      	mov	r4, r0
 8003678:	b978      	cbnz	r0, 800369a <W25_ReadData+0x5a>
		return retval;
	}
	//memset(buf,0,bufSize); // Buffer is transmitted during receive
	retval = HAL_SPI_Receive(&hspi1, buf, bufSize, 2000); // need longer time-outs when using slow SPI clock
 800367a:	4809      	ldr	r0, [pc, #36]	@ (80036a0 <W25_ReadData+0x60>)
 800367c:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8003680:	b2b2      	uxth	r2, r6
 8003682:	4629      	mov	r1, r5
 8003684:	f003 f9c3 	bl	8006a0e <HAL_SPI_Receive>
	if(retval != HAL_OK)
 8003688:	4604      	mov	r4, r0
 800368a:	b130      	cbz	r0, 800369a <W25_ReadData+0x5a>

	W25_CS_DISABLE();
 800368c:	2201      	movs	r2, #1
 800368e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003692:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003696:	f002 f837 	bl	8005708 <HAL_GPIO_WritePin>

	return retval;
} // W25_ReadData()
 800369a:	4620      	mov	r0, r4
 800369c:	b002      	add	sp, #8
 800369e:	bd70      	pop	{r4, r5, r6, pc}
 80036a0:	200014fc 	.word	0x200014fc

080036a4 <IsPageValid>:


// Function to check if a page contains valid data
int IsPageValid(uint8_t *page) {
 80036a4:	b510      	push	{r4, lr}
    char *last_semicolon = strrchr((char *)page, ';'); // Find the last semicolon
 80036a6:	213b      	movs	r1, #59	@ 0x3b
 80036a8:	f007 fc3a 	bl	800af20 <strrchr>
    if (!last_semicolon) {
 80036ac:	4604      	mov	r4, r0
 80036ae:	b190      	cbz	r0, 80036d6 <IsPageValid+0x32>
        return 0; // No semicolon found, invalid page
    }

    char *last_param = last_semicolon + 1; // Last parameter starts after the last semicolon
    size_t len = strlen(last_param);
 80036b0:	3001      	adds	r0, #1
 80036b2:	f7fc fded 	bl	8000290 <strlen>

    // Ensure the last parameter is exactly 6 characters and numeric
    if (len < 6) {
 80036b6:	2805      	cmp	r0, #5
 80036b8:	d90d      	bls.n	80036d6 <IsPageValid+0x32>
 80036ba:	1da2      	adds	r2, r4, #6
        return 0; // Too short to be valid
    }

    for (int i = 0; i < 6; ++i) {
        if ((last_param[i] < '0' || last_param[i] > '9' ) &&
 80036bc:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80036c0:	f1a3 0130 	sub.w	r1, r3, #48	@ 0x30
 80036c4:	2909      	cmp	r1, #9
 80036c6:	d902      	bls.n	80036ce <IsPageValid+0x2a>
 80036c8:	3b61      	subs	r3, #97	@ 0x61
 80036ca:	2b05      	cmp	r3, #5
 80036cc:	d803      	bhi.n	80036d6 <IsPageValid+0x32>
    for (int i = 0; i < 6; ++i) {
 80036ce:	4294      	cmp	r4, r2
 80036d0:	d1f4      	bne.n	80036bc <IsPageValid+0x18>
                (last_param[i] < 'a' || last_param[i] > 'f')) {
            return 0; // Not numeric
        }
    }

    return 1; // Page contains valid data
 80036d2:	2001      	movs	r0, #1
}
 80036d4:	bd10      	pop	{r4, pc}
        return 0; // No semicolon found, invalid page
 80036d6:	2000      	movs	r0, #0
 80036d8:	e7fc      	b.n	80036d4 <IsPageValid+0x30>
	...

080036dc <UpdatePageAddress>:


// Function to update the last parameter of the page (address)
void UpdatePageAddress(uint8_t *page, uint32_t new_address) {
 80036dc:	b513      	push	{r0, r1, r4, lr}
 80036de:	460b      	mov	r3, r1
 80036e0:	4604      	mov	r4, r0
    char new_address_str[7];
    snprintf(new_address_str, sizeof(new_address_str), "%06lx", new_address);
 80036e2:	4a08      	ldr	r2, [pc, #32]	@ (8003704 <UpdatePageAddress+0x28>)
 80036e4:	2107      	movs	r1, #7
 80036e6:	4668      	mov	r0, sp
 80036e8:	f007 fae4 	bl	800acb4 <sniprintf>
    memcpy(page + strlen((char *)page) - 6, new_address_str, 6); // Overwrite last 6 characters
 80036ec:	4620      	mov	r0, r4
 80036ee:	f7fc fdcf 	bl	8000290 <strlen>
 80036f2:	1f83      	subs	r3, r0, #6
 80036f4:	9800      	ldr	r0, [sp, #0]
 80036f6:	50e0      	str	r0, [r4, r3]
 80036f8:	18e2      	adds	r2, r4, r3
 80036fa:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80036fe:	8093      	strh	r3, [r2, #4]
}
 8003700:	b002      	add	sp, #8
 8003702:	bd10      	pop	{r4, pc}
 8003704:	0800fdc7 	.word	0x0800fdc7

08003708 <W25_ShiftLeftFlashDataByPage>:

int W25_ShiftLeftFlashDataByPage(void) {
 8003708:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800370c:	b08f      	sub	sp, #60	@ 0x3c
    uint32_t current_sector_start = FLASH_START_ADDRESS;

    while (current_sector_start < FLASH_END_ADDRESS) {
        uint32_t next_sector_start = current_sector_start + SECTOR_SIZE;

        W25_Reset();
 800370e:	f7ff fe76 	bl	80033fe <W25_Reset>
        // Step 1: Read the entire current sector into the buffer
        if (W25_ReadData(current_sector_start, current_sector_buffer, SECTOR_SIZE) != HAL_OK) {
 8003712:	496a      	ldr	r1, [pc, #424]	@ (80038bc <W25_ShiftLeftFlashDataByPage+0x1b4>)
 8003714:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003718:	f44f 5040 	mov.w	r0, #12288	@ 0x3000
 800371c:	f7ff ff90 	bl	8003640 <W25_ReadData>
 8003720:	b138      	cbz	r0, 8003732 <W25_ShiftLeftFlashDataByPage+0x2a>
        	Debug_printf("READING ALL THE SECTOR: ERROR\n");
 8003722:	4867      	ldr	r0, [pc, #412]	@ (80038c0 <W25_ShiftLeftFlashDataByPage+0x1b8>)
        }

        // Step 5: Erase the current sector
        W25_Reset();
        if (W25_SectorErase(current_sector_start) != HAL_OK) {
        	Debug_printf("Erase ALL CURRENT SECTOR: ERROR\n");
 8003724:	f000 ffdc 	bl	80046e0 <Debug_printf>
            return HAL_ERROR; // Exit if read fails
 8003728:	2401      	movs	r4, #1
        // Move to the next sector
        current_sector_start = next_sector_start;
    }

    return HAL_OK;
}
 800372a:	4620      	mov	r0, r4
 800372c:	b00f      	add	sp, #60	@ 0x3c
 800372e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        	char spi_flash_data_intro[] = "First page of Flash DATA at Reading All Sector: \n";
 8003732:	4b64      	ldr	r3, [pc, #400]	@ (80038c4 <W25_ShiftLeftFlashDataByPage+0x1bc>)
 8003734:	aa01      	add	r2, sp, #4
 8003736:	f103 0630 	add.w	r6, r3, #48	@ 0x30
 800373a:	4614      	mov	r4, r2
 800373c:	6818      	ldr	r0, [r3, #0]
 800373e:	6859      	ldr	r1, [r3, #4]
 8003740:	4615      	mov	r5, r2
 8003742:	c503      	stmia	r5!, {r0, r1}
 8003744:	3308      	adds	r3, #8
 8003746:	42b3      	cmp	r3, r6
 8003748:	462a      	mov	r2, r5
 800374a:	d1f7      	bne.n	800373c <W25_ShiftLeftFlashDataByPage+0x34>
 800374c:	881b      	ldrh	r3, [r3, #0]
 800374e:	802b      	strh	r3, [r5, #0]
			HAL_UART_Transmit(&huart1, (uint8_t*) spi_flash_data_intro, strlen(spi_flash_data_intro), 1000);
 8003750:	4620      	mov	r0, r4
 8003752:	f7fc fd9d 	bl	8000290 <strlen>
			HAL_UART_Transmit(&huart1, current_sector_buffer, 128, 1000);
 8003756:	f8df 8164 	ldr.w	r8, [pc, #356]	@ 80038bc <W25_ShiftLeftFlashDataByPage+0x1b4>
				HAL_UART_Transmit(&huart1, (uint8_t*) spi_flash_data_intro, strlen(spi_flash_data_intro), 1000);
 800375a:	4f5b      	ldr	r7, [pc, #364]	@ (80038c8 <W25_ShiftLeftFlashDataByPage+0x1c0>)
				Debug_printf("\n");
 800375c:	f8df a18c 	ldr.w	sl, [pc, #396]	@ 80038ec <W25_ShiftLeftFlashDataByPage+0x1e4>
			HAL_UART_Transmit(&huart1, (uint8_t*) spi_flash_data_intro, strlen(spi_flash_data_intro), 1000);
 8003760:	b282      	uxth	r2, r0
 8003762:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003766:	4621      	mov	r1, r4
 8003768:	4857      	ldr	r0, [pc, #348]	@ (80038c8 <W25_ShiftLeftFlashDataByPage+0x1c0>)
 800376a:	f003 fef3 	bl	8007554 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart1, current_sector_buffer, 128, 1000);
 800376e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003772:	2280      	movs	r2, #128	@ 0x80
 8003774:	4641      	mov	r1, r8
 8003776:	4854      	ldr	r0, [pc, #336]	@ (80038c8 <W25_ShiftLeftFlashDataByPage+0x1c0>)
 8003778:	f003 feec 	bl	8007554 <HAL_UART_Transmit>
			Debug_printf("\n\n");
 800377c:	4853      	ldr	r0, [pc, #332]	@ (80038cc <W25_ShiftLeftFlashDataByPage+0x1c4>)
 800377e:	f000 ffaf 	bl	80046e0 <Debug_printf>
        for (uint32_t offset = 0; offset < SECTOR_SIZE - PAGE_SIZE; offset += PAGE_SIZE) {
 8003782:	4645      	mov	r5, r8
 8003784:	2600      	movs	r6, #0
            if (IsPageValid(current_sector_buffer + offset + PAGE_SIZE)) {
 8003786:	46a9      	mov	r9, r5
 8003788:	3580      	adds	r5, #128	@ 0x80
 800378a:	4628      	mov	r0, r5
 800378c:	f7ff ff8a 	bl	80036a4 <IsPageValid>
 8003790:	46b3      	mov	fp, r6
 8003792:	3680      	adds	r6, #128	@ 0x80
            	Debug_printf("------VALID PAGE at %08lx-------\n", offset+PAGE_SIZE);
 8003794:	4631      	mov	r1, r6
            if (IsPageValid(current_sector_buffer + offset + PAGE_SIZE)) {
 8003796:	2800      	cmp	r0, #0
 8003798:	d045      	beq.n	8003826 <W25_ShiftLeftFlashDataByPage+0x11e>
            	Debug_printf("------VALID PAGE at %08lx-------\n", offset+PAGE_SIZE);
 800379a:	484d      	ldr	r0, [pc, #308]	@ (80038d0 <W25_ShiftLeftFlashDataByPage+0x1c8>)
 800379c:	f000 ffa0 	bl	80046e0 <Debug_printf>
            	char spi_flash_data_intro[] = "Valid Page Data: \n";
 80037a0:	4b4c      	ldr	r3, [pc, #304]	@ (80038d4 <W25_ShiftLeftFlashDataByPage+0x1cc>)
 80037a2:	4622      	mov	r2, r4
 80037a4:	f103 0e10 	add.w	lr, r3, #16
 80037a8:	6818      	ldr	r0, [r3, #0]
 80037aa:	6859      	ldr	r1, [r3, #4]
 80037ac:	4694      	mov	ip, r2
 80037ae:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 80037b2:	3308      	adds	r3, #8
 80037b4:	4573      	cmp	r3, lr
 80037b6:	4662      	mov	r2, ip
 80037b8:	d1f6      	bne.n	80037a8 <W25_ShiftLeftFlashDataByPage+0xa0>
 80037ba:	8819      	ldrh	r1, [r3, #0]
 80037bc:	789b      	ldrb	r3, [r3, #2]
 80037be:	f8ac 1000 	strh.w	r1, [ip]
 80037c2:	f88c 3002 	strb.w	r3, [ip, #2]
				HAL_UART_Transmit(&huart1, (uint8_t*) spi_flash_data_intro, strlen(spi_flash_data_intro), 1000);
 80037c6:	4620      	mov	r0, r4
 80037c8:	f7fc fd62 	bl	8000290 <strlen>
 80037cc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80037d0:	b282      	uxth	r2, r0
 80037d2:	4621      	mov	r1, r4
 80037d4:	4638      	mov	r0, r7
 80037d6:	f003 febd 	bl	8007554 <HAL_UART_Transmit>
				HAL_UART_Transmit(&huart1, current_sector_buffer + offset+ PAGE_SIZE, 128, 1000);
 80037da:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80037de:	2280      	movs	r2, #128	@ 0x80
 80037e0:	4629      	mov	r1, r5
 80037e2:	4638      	mov	r0, r7
 80037e4:	f003 feb6 	bl	8007554 <HAL_UART_Transmit>
				Debug_printf("\n");
 80037e8:	4650      	mov	r0, sl
 80037ea:	f000 ff79 	bl	80046e0 <Debug_printf>
                memcpy(current_sector_buffer + offset, current_sector_buffer + offset + PAGE_SIZE, PAGE_SIZE);
 80037ee:	4629      	mov	r1, r5
 80037f0:	2280      	movs	r2, #128	@ 0x80
 80037f2:	4648      	mov	r0, r9
 80037f4:	f008 f9ae 	bl	800bb54 <memcpy>
                UpdatePageAddress(current_sector_buffer + offset, current_sector_start + offset);
 80037f8:	f50b 5140 	add.w	r1, fp, #12288	@ 0x3000
 80037fc:	4648      	mov	r0, r9
 80037fe:	f7ff ff6d 	bl	80036dc <UpdatePageAddress>
        for (uint32_t offset = 0; offset < SECTOR_SIZE - PAGE_SIZE; offset += PAGE_SIZE) {
 8003802:	f5b6 6f78 	cmp.w	r6, #3968	@ 0xf80
 8003806:	d1be      	bne.n	8003786 <W25_ShiftLeftFlashDataByPage+0x7e>
        	memset(current_sector_buffer + (SECTOR_SIZE - PAGE_SIZE), 0xFF, PAGE_SIZE); // Invalidate the last page
 8003808:	2280      	movs	r2, #128	@ 0x80
 800380a:	21ff      	movs	r1, #255	@ 0xff
 800380c:	4832      	ldr	r0, [pc, #200]	@ (80038d8 <W25_ShiftLeftFlashDataByPage+0x1d0>)
 800380e:	f007 fb4d 	bl	800aeac <memset>
        W25_Reset();
 8003812:	f7ff fdf4 	bl	80033fe <W25_Reset>
        if (W25_SectorErase(current_sector_start) != HAL_OK) {
 8003816:	f44f 5040 	mov.w	r0, #12288	@ 0x3000
 800381a:	f7ff fe9b 	bl	8003554 <W25_SectorErase>
 800381e:	4604      	mov	r4, r0
 8003820:	b388      	cbz	r0, 8003886 <W25_ShiftLeftFlashDataByPage+0x17e>
        	Debug_printf("Erase ALL CURRENT SECTOR: ERROR\n");
 8003822:	482e      	ldr	r0, [pc, #184]	@ (80038dc <W25_ShiftLeftFlashDataByPage+0x1d4>)
 8003824:	e77e      	b.n	8003724 <W25_ShiftLeftFlashDataByPage+0x1c>
            	Debug_printf("-------INVALID PAGE at %08lx-------\n", offset+PAGE_SIZE);
 8003826:	482e      	ldr	r0, [pc, #184]	@ (80038e0 <W25_ShiftLeftFlashDataByPage+0x1d8>)
 8003828:	f000 ff5a 	bl	80046e0 <Debug_printf>
            	char spi_flash_data_intro[] = "Invalid Page Data: \n";
 800382c:	4b2d      	ldr	r3, [pc, #180]	@ (80038e4 <W25_ShiftLeftFlashDataByPage+0x1dc>)
 800382e:	4622      	mov	r2, r4
 8003830:	f103 0e10 	add.w	lr, r3, #16
 8003834:	6818      	ldr	r0, [r3, #0]
 8003836:	6859      	ldr	r1, [r3, #4]
 8003838:	4694      	mov	ip, r2
 800383a:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 800383e:	3308      	adds	r3, #8
 8003840:	4573      	cmp	r3, lr
 8003842:	4662      	mov	r2, ip
 8003844:	d1f6      	bne.n	8003834 <W25_ShiftLeftFlashDataByPage+0x12c>
 8003846:	6818      	ldr	r0, [r3, #0]
 8003848:	791b      	ldrb	r3, [r3, #4]
 800384a:	f8cc 0000 	str.w	r0, [ip]
 800384e:	f88c 3004 	strb.w	r3, [ip, #4]
				HAL_UART_Transmit(&huart1, (uint8_t*) spi_flash_data_intro, strlen(spi_flash_data_intro), 1000);
 8003852:	4620      	mov	r0, r4
 8003854:	f7fc fd1c 	bl	8000290 <strlen>
 8003858:	4621      	mov	r1, r4
 800385a:	b282      	uxth	r2, r0
 800385c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003860:	4638      	mov	r0, r7
 8003862:	f003 fe77 	bl	8007554 <HAL_UART_Transmit>
				HAL_UART_Transmit(&huart1, current_sector_buffer + offset +PAGE_SIZE, 128, 1000);
 8003866:	4629      	mov	r1, r5
 8003868:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800386c:	2280      	movs	r2, #128	@ 0x80
 800386e:	4638      	mov	r0, r7
 8003870:	f003 fe70 	bl	8007554 <HAL_UART_Transmit>
				Debug_printf("\n");
 8003874:	4650      	mov	r0, sl
 8003876:	f000 ff33 	bl	80046e0 <Debug_printf>
                memset(current_sector_buffer + offset, 0xFF, PAGE_SIZE); // Invalidate the page
 800387a:	2280      	movs	r2, #128	@ 0x80
 800387c:	21ff      	movs	r1, #255	@ 0xff
 800387e:	4648      	mov	r0, r9
 8003880:	f007 fb14 	bl	800aeac <memset>
 8003884:	e7bd      	b.n	8003802 <W25_ShiftLeftFlashDataByPage+0xfa>
        for (uint32_t offset = 0; offset < SECTOR_SIZE; offset += PAGE_SIZE) {
 8003886:	4605      	mov	r5, r0
        	uint8_t *page_data = current_sector_buffer + offset;
 8003888:	eb08 0605 	add.w	r6, r8, r5
        	W25_Reset();
 800388c:	f7ff fdb7 	bl	80033fe <W25_Reset>
        	if (IsPageValid(page_data)) {
 8003890:	4630      	mov	r0, r6
 8003892:	f7ff ff07 	bl	80036a4 <IsPageValid>
 8003896:	b158      	cbz	r0, 80038b0 <W25_ShiftLeftFlashDataByPage+0x1a8>
        		if (W25_PageProgram(current_sector_start + offset, current_sector_buffer + offset, PAGE_SIZE) != HAL_OK) {
 8003898:	2280      	movs	r2, #128	@ 0x80
 800389a:	4631      	mov	r1, r6
 800389c:	f505 5040 	add.w	r0, r5, #12288	@ 0x3000
 80038a0:	f7ff fe84 	bl	80035ac <W25_PageProgram>
 80038a4:	b120      	cbz	r0, 80038b0 <W25_ShiftLeftFlashDataByPage+0x1a8>
					Debug_printf("PAGE PROGRAM: ERROR at page offset %08lx\n", offset);
 80038a6:	4810      	ldr	r0, [pc, #64]	@ (80038e8 <W25_ShiftLeftFlashDataByPage+0x1e0>)
 80038a8:	4629      	mov	r1, r5
 80038aa:	f000 ff19 	bl	80046e0 <Debug_printf>
					return HAL_ERROR; // Exit if write fails
 80038ae:	e73b      	b.n	8003728 <W25_ShiftLeftFlashDataByPage+0x20>
        for (uint32_t offset = 0; offset < SECTOR_SIZE; offset += PAGE_SIZE) {
 80038b0:	3580      	adds	r5, #128	@ 0x80
 80038b2:	f5b5 5f80 	cmp.w	r5, #4096	@ 0x1000
 80038b6:	d1e7      	bne.n	8003888 <W25_ShiftLeftFlashDataByPage+0x180>
 80038b8:	e737      	b.n	800372a <W25_ShiftLeftFlashDataByPage+0x22>
 80038ba:	bf00      	nop
 80038bc:	20001870 	.word	0x20001870
 80038c0:	0800fdcd 	.word	0x0800fdcd
 80038c4:	0800fe7e 	.word	0x0800fe7e
 80038c8:	200013c4 	.word	0x200013c4
 80038cc:	0800faeb 	.word	0x0800faeb
 80038d0:	0800fdec 	.word	0x0800fdec
 80038d4:	0800feb0 	.word	0x0800feb0
 80038d8:	200027f0 	.word	0x200027f0
 80038dc:	0800fe33 	.word	0x0800fe33
 80038e0:	0800fe0e 	.word	0x0800fe0e
 80038e4:	0800fec3 	.word	0x0800fec3
 80038e8:	0800fe54 	.word	0x0800fe54
 80038ec:	0800faec 	.word	0x0800faec

080038f0 <calculate_epoch_time_utc>:
		HAL_Delay(1000);
		memset(flashBufferTaxReceived, 0x00,128);
	}
}

uint32_t calculate_epoch_time_utc(DATE *date, TIME *time) {
 80038f0:	b500      	push	{lr}
    struct tm timeinfo;
    // Set up time structure
    timeinfo.tm_year = date->Yr - 1900; // - 1900 + 2000
 80038f2:	6883      	ldr	r3, [r0, #8]
uint32_t calculate_epoch_time_utc(DATE *date, TIME *time) {
 80038f4:	b08b      	sub	sp, #44	@ 0x2c
    timeinfo.tm_year = date->Yr - 1900; // - 1900 + 2000
 80038f6:	f2a3 736c 	subw	r3, r3, #1900	@ 0x76c
 80038fa:	9306      	str	r3, [sp, #24]
    timeinfo.tm_mon = date->Mon - 1;
 80038fc:	6843      	ldr	r3, [r0, #4]
 80038fe:	3b01      	subs	r3, #1
 8003900:	9305      	str	r3, [sp, #20]
    timeinfo.tm_mday = date->Day;
 8003902:	6803      	ldr	r3, [r0, #0]
 8003904:	9304      	str	r3, [sp, #16]
    timeinfo.tm_hour = time->hour;
 8003906:	680b      	ldr	r3, [r1, #0]
 8003908:	9303      	str	r3, [sp, #12]
    timeinfo.tm_min = time->min;
 800390a:	684b      	ldr	r3, [r1, #4]
 800390c:	9302      	str	r3, [sp, #8]
    timeinfo.tm_sec = time->sec;
 800390e:	688b      	ldr	r3, [r1, #8]
 8003910:	9301      	str	r3, [sp, #4]
    timeinfo.tm_isdst = -1; // Let mktime determine DST if necessary

    // Get the local epoch time and then adjust for timezone offset
    time_t local_epoch = mktime(&timeinfo);
 8003912:	a801      	add	r0, sp, #4
    timeinfo.tm_isdst = -1; // Let mktime determine DST if necessary
 8003914:	f04f 33ff 	mov.w	r3, #4294967295
 8003918:	9309      	str	r3, [sp, #36]	@ 0x24
    time_t local_epoch = mktime(&timeinfo);
 800391a:	f007 fc01 	bl	800b120 <mktime>
    return (uint32_t)(local_epoch + 25200); // Subtract timezone offset
}
 800391e:	f500 40c4 	add.w	r0, r0, #25088	@ 0x6200
 8003922:	3070      	adds	r0, #112	@ 0x70
 8003924:	b00b      	add	sp, #44	@ 0x2c
 8003926:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800392c <format_rmc_data>:

void format_rmc_data(RMCSTRUCT *rmc_data, char *output_buffer, size_t buffer_size) {
 800392c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003930:	ed2d 8b04 	vpush	{d8-d9}
 8003934:	4604      	mov	r4, r0
 8003936:	b09b      	sub	sp, #108	@ 0x6c
 8003938:	e9cd 1218 	strd	r1, r2, [sp, #96]	@ 0x60
	//uart_transmit_string(&huart1, (uint8_t*) "Format RMC data");
    uint32_t epoch_time = calculate_epoch_time_utc(&rmc_data->date, &rmc_data->tim);
 800393c:	4601      	mov	r1, r0
 800393e:	3010      	adds	r0, #16
 8003940:	f7ff ffd6 	bl	80038f0 <calculate_epoch_time_utc>

    // Format all fields in a single line with semicolon separation, including date
    snprintf(output_buffer, buffer_size, "%d;%d;%d;%d;%d;%d;%.6f;%c;%.6f;%c;%.1f;%.1f;%s;%lu", rmc_data->date.Yr, rmc_data->date.Mon, rmc_data->date.Day, rmc_data->tim.hour, rmc_data->tim.min, rmc_data->tim.sec, rmc_data->lcation.latitude, rmc_data->lcation.NS, rmc_data->lcation.longitude, rmc_data->lcation.EW, rmc_data->speed, rmc_data->course, rmc_data->isValid ? "Valid" : "Invalid", epoch_time);
 8003944:	69a3      	ldr	r3, [r4, #24]
 8003946:	9314      	str	r3, [sp, #80]	@ 0x50
 8003948:	e9d4 3504 	ldrd	r3, r5, [r4, #16]
    uint32_t epoch_time = calculate_epoch_time_utc(&rmc_data->date, &rmc_data->tim);
 800394c:	4607      	mov	r7, r0
    snprintf(output_buffer, buffer_size, "%d;%d;%d;%d;%d;%d;%.6f;%c;%.6f;%c;%.1f;%.1f;%s;%lu", rmc_data->date.Yr, rmc_data->date.Mon, rmc_data->date.Day, rmc_data->tim.hour, rmc_data->tim.min, rmc_data->tim.sec, rmc_data->lcation.latitude, rmc_data->lcation.NS, rmc_data->lcation.longitude, rmc_data->lcation.EW, rmc_data->speed, rmc_data->course, rmc_data->isValid ? "Valid" : "Invalid", epoch_time);
 800394e:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8003950:	9315      	str	r3, [sp, #84]	@ 0x54
 8003952:	f7fc fe09 	bl	8000568 <__aeabi_f2d>
 8003956:	e9cd 0116 	strd	r0, r1, [sp, #88]	@ 0x58
 800395a:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 800395c:	f8d4 b008 	ldr.w	fp, [r4, #8]
 8003960:	f894 6040 	ldrb.w	r6, [r4, #64]	@ 0x40
 8003964:	f894 8050 	ldrb.w	r8, [r4, #80]	@ 0x50
 8003968:	f7fc fdfe 	bl	8000568 <__aeabi_f2d>
 800396c:	e9d4 9a00 	ldrd	r9, sl, [r4]
 8003970:	ed94 8b0e 	vldr	d8, [r4, #56]	@ 0x38
 8003974:	ed94 9b12 	vldr	d9, [r4, #72]	@ 0x48
 8003978:	ed9d 7b16 	vldr	d7, [sp, #88]	@ 0x58
 800397c:	6b24      	ldr	r4, [r4, #48]	@ 0x30
 800397e:	f8cd 8030 	str.w	r8, [sp, #48]	@ 0x30
 8003982:	4602      	mov	r2, r0
 8003984:	460b      	mov	r3, r1
 8003986:	4811      	ldr	r0, [pc, #68]	@ (80039cc <format_rmc_data+0xa0>)
 8003988:	4911      	ldr	r1, [pc, #68]	@ (80039d0 <format_rmc_data+0xa4>)
 800398a:	9608      	str	r6, [sp, #32]
 800398c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8003990:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8003992:	4a10      	ldr	r2, [pc, #64]	@ (80039d4 <format_rmc_data+0xa8>)
 8003994:	f8cd 9008 	str.w	r9, [sp, #8]
 8003998:	2c00      	cmp	r4, #0
 800399a:	bf08      	it	eq
 800399c:	4601      	moveq	r1, r0
 800399e:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 80039a2:	e9cd 5300 	strd	r5, r3, [sp]
 80039a6:	e9cd 1712 	strd	r1, r7, [sp, #72]	@ 0x48
 80039aa:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80039ac:	ed8d 9b0a 	vstr	d9, [sp, #40]	@ 0x28
 80039b0:	ed8d 8b06 	vstr	d8, [sp, #24]
 80039b4:	e9cd ab03 	strd	sl, fp, [sp, #12]
 80039b8:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	@ 0x60
 80039bc:	f007 f97a 	bl	800acb4 <sniprintf>
}
 80039c0:	b01b      	add	sp, #108	@ 0x6c
 80039c2:	ecbd 8b04 	vpop	{d8-d9}
 80039c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80039ca:	bf00      	nop
 80039cc:	0800ff11 	.word	0x0800ff11
 80039d0:	0800ff0b 	.word	0x0800ff0b
 80039d4:	0800ff19 	.word	0x0800ff19

080039d8 <saveRMC>:


void saveRMC(){
 80039d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	Debug_printf("\n\n Inside SAVING RMC TO FLASH \n\n");
	int k = 0;
	int j = 0;
	W25_Reset();
	if (is_erased_rmc == 0){
 80039dc:	4c95      	ldr	r4, [pc, #596]	@ (8003c34 <saveRMC+0x25c>)
	Debug_printf("\n\n Inside SAVING RMC TO FLASH \n\n");
 80039de:	4896      	ldr	r0, [pc, #600]	@ (8003c38 <saveRMC+0x260>)
void saveRMC(){
 80039e0:	b085      	sub	sp, #20
	Debug_printf("\n\n Inside SAVING RMC TO FLASH \n\n");
 80039e2:	f000 fe7d 	bl	80046e0 <Debug_printf>
	W25_Reset();
 80039e6:	f7ff fd0a 	bl	80033fe <W25_Reset>
	if (is_erased_rmc == 0){
 80039ea:	6823      	ldr	r3, [r4, #0]
 80039ec:	b92b      	cbnz	r3, 80039fa <saveRMC+0x22>
		W25_SectorErase(address_rmc);
 80039ee:	4b93      	ldr	r3, [pc, #588]	@ (8003c3c <saveRMC+0x264>)
 80039f0:	6818      	ldr	r0, [r3, #0]
 80039f2:	f7ff fdaf 	bl	8003554 <W25_SectorErase>
		is_erased_rmc = 1;
 80039f6:	2301      	movs	r3, #1
 80039f8:	6023      	str	r3, [r4, #0]
	}
	
	for(size_t i = 0; i < 128; i++){
 80039fa:	4a91      	ldr	r2, [pc, #580]	@ (8003c40 <saveRMC+0x268>)
 80039fc:	2300      	movs	r3, #0
 80039fe:	4616      	mov	r6, r2
		if(rmcBufferDemo[i] != 0x00 && rmcBufferDemo[i+1] == 0x00){
 8003a00:	f812 1b01 	ldrb.w	r1, [r2], #1
 8003a04:	461d      	mov	r5, r3
 8003a06:	3301      	adds	r3, #1
 8003a08:	b109      	cbz	r1, 8003a0e <saveRMC+0x36>
 8003a0a:	7811      	ldrb	r1, [r2, #0]
 8003a0c:	b111      	cbz	r1, 8003a14 <saveRMC+0x3c>
	for(size_t i = 0; i < 128; i++){
 8003a0e:	2b80      	cmp	r3, #128	@ 0x80
 8003a10:	d1f6      	bne.n	8003a00 <saveRMC+0x28>
	int k = 0;
 8003a12:	2500      	movs	r5, #0
			k = i;
			break;
		}
	}
	char addr_out[10];
	sprintf(addr_out, "%08lx", address_rmc);
 8003a14:	4c89      	ldr	r4, [pc, #548]	@ (8003c3c <saveRMC+0x264>)
 8003a16:	498b      	ldr	r1, [pc, #556]	@ (8003c44 <saveRMC+0x26c>)
 8003a18:	6822      	ldr	r2, [r4, #0]
 8003a1a:	a801      	add	r0, sp, #4
 8003a1c:	f007 f97e 	bl	800ad1c <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*) addr_out, 8, 1000);
 8003a20:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003a24:	2208      	movs	r2, #8
 8003a26:	a901      	add	r1, sp, #4
 8003a28:	4887      	ldr	r0, [pc, #540]	@ (8003c48 <saveRMC+0x270>)
 8003a2a:	f003 fd93 	bl	8007554 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, (uint8_t*)"\r\n", 1, 1000);
 8003a2e:	4987      	ldr	r1, [pc, #540]	@ (8003c4c <saveRMC+0x274>)
 8003a30:	4885      	ldr	r0, [pc, #532]	@ (8003c48 <saveRMC+0x270>)
 8003a32:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003a36:	2201      	movs	r2, #1
 8003a38:	f003 fd8c 	bl	8007554 <HAL_UART_Transmit>
	
	k++;
	rmcBufferDemo[k] = ';';
 8003a3c:	1973      	adds	r3, r6, r5
 8003a3e:	223b      	movs	r2, #59	@ 0x3b
 8003a40:	705a      	strb	r2, [r3, #1]
	for(size_t idx = 6; idx > 0 ; idx--){
		k++;
		rmcBufferDemo[k] = addr_out[8 - idx];
 8003a42:	1cab      	adds	r3, r5, #2
 8003a44:	f8dd 1006 	ldr.w	r1, [sp, #6]
 8003a48:	50f1      	str	r1, [r6, r3]
 8003a4a:	18f2      	adds	r2, r6, r3
 8003a4c:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8003a50:	8093      	strh	r3, [r2, #4]
	}
	
	for (j=0;j<110-k-1;j++)
	{
		rmcBufferDemo[j+k+1]=0x00;
 8003a52:	f105 0008 	add.w	r0, r5, #8
 8003a56:	f1c5 0266 	rsb	r2, r5, #102	@ 0x66
 8003a5a:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 8003a5e:	2100      	movs	r1, #0
 8003a60:	4430      	add	r0, r6
 8003a62:	f007 fa23 	bl	800aeac <memset>
	}

	if(address_rmc % 0x1000 == 0x0000){
 8003a66:	6823      	ldr	r3, [r4, #0]
 8003a68:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a6c:	b92b      	cbnz	r3, 8003a7a <saveRMC+0xa2>
		Debug_printf("\n\nErasing SECTOR IN ADVANCE\n");
 8003a6e:	4878      	ldr	r0, [pc, #480]	@ (8003c50 <saveRMC+0x278>)
 8003a70:	f000 fe36 	bl	80046e0 <Debug_printf>
		W25_SectorErase(address_rmc);
 8003a74:	6820      	ldr	r0, [r4, #0]
 8003a76:	f7ff fd6d 	bl	8003554 <W25_SectorErase>
	}

	W25_Reset();
 8003a7a:	f7ff fcc0 	bl	80033fe <W25_Reset>
	W25_PageProgram(address_rmc, rmcBufferDemo, 128);
 8003a7e:	2280      	movs	r2, #128	@ 0x80
 8003a80:	496f      	ldr	r1, [pc, #444]	@ (8003c40 <saveRMC+0x268>)
 8003a82:	6820      	ldr	r0, [r4, #0]
	uart_transmit_string(&huart1, (uint8_t*) "Buffer before saving to FLASH: ");
	uart_transmit_string(&huart1, rmcBufferDemo);
	current_addr = address_rmc;
 8003a84:	f8df 8208 	ldr.w	r8, [pc, #520]	@ 8003c90 <saveRMC+0x2b8>
	W25_PageProgram(address_rmc, rmcBufferDemo, 128);
 8003a88:	f7ff fd90 	bl	80035ac <W25_PageProgram>
	uart_transmit_string(&huart1, (uint8_t*) "Buffer before saving to FLASH: ");
 8003a8c:	4971      	ldr	r1, [pc, #452]	@ (8003c54 <saveRMC+0x27c>)
 8003a8e:	486e      	ldr	r0, [pc, #440]	@ (8003c48 <saveRMC+0x270>)
 8003a90:	f000 fe16 	bl	80046c0 <uart_transmit_string>
	uart_transmit_string(&huart1, rmcBufferDemo);
 8003a94:	496a      	ldr	r1, [pc, #424]	@ (8003c40 <saveRMC+0x268>)
 8003a96:	486c      	ldr	r0, [pc, #432]	@ (8003c48 <saveRMC+0x270>)
 8003a98:	f000 fe12 	bl	80046c0 <uart_transmit_string>
	current_addr = address_rmc;
 8003a9c:	6821      	ldr	r1, [r4, #0]
 8003a9e:	4b6e      	ldr	r3, [pc, #440]	@ (8003c58 <saveRMC+0x280>)
 8003aa0:	f8c8 1000 	str.w	r1, [r8]
	if(address_rmc == FLASH_END_ADDRESS-128){
 8003aa4:	f5b1 5f7e 	cmp.w	r1, #16256	@ 0x3f80
 8003aa8:	f040 80c1 	bne.w	8003c2e <saveRMC+0x256>
		is_flash_overflow = 1;
 8003aac:	2201      	movs	r2, #1
		Debug_printf(" ADDRESS RMC before SHIFT LEFT BY ONE PAGE: %08lx", address_rmc);
 8003aae:	486b      	ldr	r0, [pc, #428]	@ (8003c5c <saveRMC+0x284>)
		is_flash_overflow = 1;
 8003ab0:	601a      	str	r2, [r3, #0]
		Debug_printf(" ADDRESS RMC before SHIFT LEFT BY ONE PAGE: %08lx", address_rmc);
 8003ab2:	f000 fe15 	bl	80046e0 <Debug_printf>
		W25_Reset();
 8003ab6:	f7ff fca2 	bl	80033fe <W25_Reset>
		W25_ReadData(address_rmc, flashBufferRMCReceived, 128);
 8003aba:	4969      	ldr	r1, [pc, #420]	@ (8003c60 <saveRMC+0x288>)
 8003abc:	6820      	ldr	r0, [r4, #0]
		HAL_UART_Transmit(&huart1, flashBufferRMCReceived, sizeof(flashBufferRMCReceived), 1000);

		W25_ShiftLeftFlashDataByPage();
		address_rmc -= 128;
		if(is_using_flash == 0){
 8003abe:	f8df 91d4 	ldr.w	r9, [pc, #468]	@ 8003c94 <saveRMC+0x2bc>
 8003ac2:	4e68      	ldr	r6, [pc, #416]	@ (8003c64 <saveRMC+0x28c>)
		W25_ReadData(address_rmc, flashBufferRMCReceived, 128);
 8003ac4:	2280      	movs	r2, #128	@ 0x80
 8003ac6:	f7ff fdbb 	bl	8003640 <W25_ReadData>
		HAL_UART_Transmit(&huart1, flashBufferRMCReceived, sizeof(flashBufferRMCReceived), 1000);
 8003aca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003ace:	4964      	ldr	r1, [pc, #400]	@ (8003c60 <saveRMC+0x288>)
 8003ad0:	485d      	ldr	r0, [pc, #372]	@ (8003c48 <saveRMC+0x270>)
 8003ad2:	2280      	movs	r2, #128	@ 0x80
 8003ad4:	f003 fd3e 	bl	8007554 <HAL_UART_Transmit>
		W25_ShiftLeftFlashDataByPage();
 8003ad8:	f7ff fe16 	bl	8003708 <W25_ShiftLeftFlashDataByPage>
		address_rmc -= 128;
 8003adc:	6823      	ldr	r3, [r4, #0]
		if(is_using_flash == 0){
 8003ade:	f8d9 7000 	ldr.w	r7, [r9]
		address_rmc -= 128;
 8003ae2:	3b80      	subs	r3, #128	@ 0x80
 8003ae4:	6023      	str	r3, [r4, #0]
		if(is_using_flash == 0){
 8003ae6:	bb37      	cbnz	r7, 8003b36 <saveRMC+0x15e>
			if(start_addr_disconnect > FLASH_START_ADDRESS)
 8003ae8:	6833      	ldr	r3, [r6, #0]
				start_addr_disconnect -= 128;
			Debug_printf("\n-----------------BEFORE update the result address data --------------\n");
 8003aea:	485f      	ldr	r0, [pc, #380]	@ (8003c68 <saveRMC+0x290>)
			printQueue_GSM(&result_addr_queue);
			Debug_printf("\n---------------Update the result address data--------------\n");
			for (int i = 0; i < result_addr_queue.size; i++) {
 8003aec:	f8df b180 	ldr.w	fp, [pc, #384]	@ 8003c70 <saveRMC+0x298>
				int idx = (result_addr_queue.front + i) % MAX_SIZE;
				if(result_addr_queue.data[idx] >= 0x3000)
					result_addr_queue.data[idx] -= 128;
//				Debug_printf("Index %d: %08x\n", i, result_addr_queue.data[idx]);
 8003af0:	4d5e      	ldr	r5, [pc, #376]	@ (8003c6c <saveRMC+0x294>)
			if(start_addr_disconnect > FLASH_START_ADDRESS)
 8003af2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
				start_addr_disconnect -= 128;
 8003af6:	bf82      	ittt	hi
 8003af8:	6833      	ldrhi	r3, [r6, #0]
 8003afa:	3b80      	subhi	r3, #128	@ 0x80
 8003afc:	6033      	strhi	r3, [r6, #0]
			Debug_printf("\n-----------------BEFORE update the result address data --------------\n");
 8003afe:	f000 fdef 	bl	80046e0 <Debug_printf>
			printQueue_GSM(&result_addr_queue);
 8003b02:	485b      	ldr	r0, [pc, #364]	@ (8003c70 <saveRMC+0x298>)
 8003b04:	f7ff f824 	bl	8002b50 <printQueue_GSM>
			Debug_printf("\n---------------Update the result address data--------------\n");
 8003b08:	485a      	ldr	r0, [pc, #360]	@ (8003c74 <saveRMC+0x29c>)
 8003b0a:	f000 fde9 	bl	80046e0 <Debug_printf>
			for (int i = 0; i < result_addr_queue.size; i++) {
 8003b0e:	f04f 0a00 	mov.w	sl, #0
 8003b12:	f8db 2208 	ldr.w	r2, [fp, #520]	@ 0x208
 8003b16:	4552      	cmp	r2, sl
 8003b18:	dc53      	bgt.n	8003bc2 <saveRMC+0x1ea>
			}
			for (int i = 0; i < result_addr_queue.size; i++) {
				int idx = (result_addr_queue.front + i) % MAX_SIZE;
				if(result_addr_queue.data[idx] < 0x3000)
					deleteMiddle_GSM(&result_addr_queue, idx);
 8003b1a:	f8df a154 	ldr.w	sl, [pc, #340]	@ 8003c70 <saveRMC+0x298>
			for (int i = 0; i < result_addr_queue.size; i++) {
 8003b1e:	f8db 2208 	ldr.w	r2, [fp, #520]	@ 0x208
 8003b22:	42ba      	cmp	r2, r7
 8003b24:	dc68      	bgt.n	8003bf8 <saveRMC+0x220>
				Debug_printf("Index %d: %08x\n", i, result_addr_queue.data[idx]);
			}
			if(end_addr_disconnect > start_addr_disconnect)
 8003b26:	4b54      	ldr	r3, [pc, #336]	@ (8003c78 <saveRMC+0x2a0>)
 8003b28:	6819      	ldr	r1, [r3, #0]
 8003b2a:	6832      	ldr	r2, [r6, #0]
 8003b2c:	4291      	cmp	r1, r2
				end_addr_disconnect -= 128;
 8003b2e:	bf82      	ittt	hi
 8003b30:	681a      	ldrhi	r2, [r3, #0]
 8003b32:	3a80      	subhi	r2, #128	@ 0x80
 8003b34:	601a      	strhi	r2, [r3, #0]
		}
		Debug_printf("\n--------------CURRENT START ADDRESS DISCONNECT: %08lx-------------\n", start_addr_disconnect);
 8003b36:	6831      	ldr	r1, [r6, #0]
 8003b38:	4850      	ldr	r0, [pc, #320]	@ (8003c7c <saveRMC+0x2a4>)
 8003b3a:	f000 fdd1 	bl	80046e0 <Debug_printf>
		if( is_using_flash == 1 && (start_addr_disconnect - count_shiftleft * 128) >= FLASH_START_ADDRESS){
 8003b3e:	f8d9 3000 	ldr.w	r3, [r9]
 8003b42:	4a4f      	ldr	r2, [pc, #316]	@ (8003c80 <saveRMC+0x2a8>)
 8003b44:	2b01      	cmp	r3, #1
 8003b46:	d108      	bne.n	8003b5a <saveRMC+0x182>
 8003b48:	6813      	ldr	r3, [r2, #0]
 8003b4a:	6831      	ldr	r1, [r6, #0]
 8003b4c:	eba1 11c3 	sub.w	r1, r1, r3, lsl #7
 8003b50:	f5b1 5f40 	cmp.w	r1, #12288	@ 0x3000
			count_shiftleft++;
 8003b54:	bf24      	itt	cs
 8003b56:	3301      	addcs	r3, #1
 8003b58:	6013      	strcs	r3, [r2, #0]
		}
		Debug_printf("\n--------------SHIFT LEFT COUNT: %d-------------\n", count_shiftleft);
 8003b5a:	6811      	ldr	r1, [r2, #0]
 8003b5c:	4849      	ldr	r0, [pc, #292]	@ (8003c84 <saveRMC+0x2ac>)
 8003b5e:	f000 fdbf 	bl	80046e0 <Debug_printf>
		current_addr -= 128;
 8003b62:	f8d8 3000 	ldr.w	r3, [r8]
	    Debug_printf("\n");
 8003b66:	4848      	ldr	r0, [pc, #288]	@ (8003c88 <saveRMC+0x2b0>)
		current_addr -= 128;
 8003b68:	3b80      	subs	r3, #128	@ 0x80
 8003b6a:	f8c8 3000 	str.w	r3, [r8]
	    Debug_printf("\n");
 8003b6e:	f000 fdb7 	bl	80046e0 <Debug_printf>
		Debug_printf(" ADDRESS RMC after SHIFT LEFT BY ONE PAGE: %08lx", address_rmc);
 8003b72:	6821      	ldr	r1, [r4, #0]
 8003b74:	4845      	ldr	r0, [pc, #276]	@ (8003c8c <saveRMC+0x2b4>)
 8003b76:	f000 fdb3 	bl	80046e0 <Debug_printf>
		W25_Reset();
 8003b7a:	f7ff fc40 	bl	80033fe <W25_Reset>
		W25_ReadData(address_rmc, flashBufferRMCReceived, 128);
 8003b7e:	4938      	ldr	r1, [pc, #224]	@ (8003c60 <saveRMC+0x288>)
 8003b80:	6820      	ldr	r0, [r4, #0]
 8003b82:	2280      	movs	r2, #128	@ 0x80
 8003b84:	f7ff fd5c 	bl	8003640 <W25_ReadData>
		HAL_UART_Transmit(&huart1, flashBufferRMCReceived, sizeof(flashBufferRMCReceived), 1000);
 8003b88:	4935      	ldr	r1, [pc, #212]	@ (8003c60 <saveRMC+0x288>)
 8003b8a:	482f      	ldr	r0, [pc, #188]	@ (8003c48 <saveRMC+0x270>)
 8003b8c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003b90:	2280      	movs	r2, #128	@ 0x80
 8003b92:	f003 fcdf 	bl	8007554 <HAL_UART_Transmit>
	}
	else {
		is_flash_overflow = 0;
	}
	if(address_rmc < FLASH_END_ADDRESS-128)
 8003b96:	6823      	ldr	r3, [r4, #0]
 8003b98:	f5b3 5f7e 	cmp.w	r3, #16256	@ 0x3f80
		address_rmc += 128;
 8003b9c:	bf38      	it	cc
 8003b9e:	3380      	addcc	r3, #128	@ 0x80
	HAL_Delay(1000);
 8003ba0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
		address_rmc += 128;
 8003ba4:	bf38      	it	cc
 8003ba6:	6023      	strcc	r3, [r4, #0]
	HAL_Delay(1000);
 8003ba8:	f000 fe60 	bl	800486c <HAL_Delay>
	Debug_printf("\n");
 8003bac:	4836      	ldr	r0, [pc, #216]	@ (8003c88 <saveRMC+0x2b0>)
 8003bae:	f000 fd97 	bl	80046e0 <Debug_printf>
	memset(flashBufferRMCReceived, 0x00,128);
 8003bb2:	482b      	ldr	r0, [pc, #172]	@ (8003c60 <saveRMC+0x288>)
 8003bb4:	2280      	movs	r2, #128	@ 0x80
 8003bb6:	2100      	movs	r1, #0
}
 8003bb8:	b005      	add	sp, #20
 8003bba:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	memset(flashBufferRMCReceived, 0x00,128);
 8003bbe:	f007 b975 	b.w	800aeac <memset>
				int idx = (result_addr_queue.front + i) % MAX_SIZE;
 8003bc2:	f8db 2200 	ldr.w	r2, [fp, #512]	@ 0x200
 8003bc6:	4452      	add	r2, sl
 8003bc8:	4251      	negs	r1, r2
 8003bca:	f001 017f 	and.w	r1, r1, #127	@ 0x7f
 8003bce:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003bd2:	bf58      	it	pl
 8003bd4:	424a      	negpl	r2, r1
//				Debug_printf("Index %d: %08x\n", i, result_addr_queue.data[idx]);
 8003bd6:	4628      	mov	r0, r5
				if(result_addr_queue.data[idx] >= 0x3000)
 8003bd8:	f85b 1022 	ldr.w	r1, [fp, r2, lsl #2]
 8003bdc:	f5b1 5f40 	cmp.w	r1, #12288	@ 0x3000
					result_addr_queue.data[idx] -= 128;
 8003be0:	bf24      	itt	cs
 8003be2:	3980      	subcs	r1, #128	@ 0x80
 8003be4:	f84b 1022 	strcs.w	r1, [fp, r2, lsl #2]
//				Debug_printf("Index %d: %08x\n", i, result_addr_queue.data[idx]);
 8003be8:	4651      	mov	r1, sl
 8003bea:	f85b 2022 	ldr.w	r2, [fp, r2, lsl #2]
 8003bee:	f000 fd77 	bl	80046e0 <Debug_printf>
			for (int i = 0; i < result_addr_queue.size; i++) {
 8003bf2:	f10a 0a01 	add.w	sl, sl, #1
 8003bf6:	e78c      	b.n	8003b12 <saveRMC+0x13a>
				int idx = (result_addr_queue.front + i) % MAX_SIZE;
 8003bf8:	f8db 5200 	ldr.w	r5, [fp, #512]	@ 0x200
 8003bfc:	443d      	add	r5, r7
 8003bfe:	426a      	negs	r2, r5
 8003c00:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003c04:	f005 057f 	and.w	r5, r5, #127	@ 0x7f
 8003c08:	bf58      	it	pl
 8003c0a:	4255      	negpl	r5, r2
				if(result_addr_queue.data[idx] < 0x3000)
 8003c0c:	f85b 2025 	ldr.w	r2, [fp, r5, lsl #2]
 8003c10:	f5b2 5f40 	cmp.w	r2, #12288	@ 0x3000
 8003c14:	d203      	bcs.n	8003c1e <saveRMC+0x246>
					deleteMiddle_GSM(&result_addr_queue, idx);
 8003c16:	4629      	mov	r1, r5
 8003c18:	4650      	mov	r0, sl
 8003c1a:	f7fe fff3 	bl	8002c04 <deleteMiddle_GSM>
				Debug_printf("Index %d: %08x\n", i, result_addr_queue.data[idx]);
 8003c1e:	4639      	mov	r1, r7
 8003c20:	f85b 2025 	ldr.w	r2, [fp, r5, lsl #2]
 8003c24:	4811      	ldr	r0, [pc, #68]	@ (8003c6c <saveRMC+0x294>)
 8003c26:	f000 fd5b 	bl	80046e0 <Debug_printf>
			for (int i = 0; i < result_addr_queue.size; i++) {
 8003c2a:	3701      	adds	r7, #1
 8003c2c:	e777      	b.n	8003b1e <saveRMC+0x146>
		is_flash_overflow = 0;
 8003c2e:	2200      	movs	r2, #0
 8003c30:	601a      	str	r2, [r3, #0]
 8003c32:	e7b0      	b.n	8003b96 <saveRMC+0x1be>
 8003c34:	20001868 	.word	0x20001868
 8003c38:	0800ff4c 	.word	0x0800ff4c
 8003c3c:	20000004 	.word	0x20000004
 8003c40:	20001768 	.word	0x20001768
 8003c44:	0800ffd6 	.word	0x0800ffd6
 8003c48:	200013c4 	.word	0x200013c4
 8003c4c:	0800f211 	.word	0x0800f211
 8003c50:	0800ff6d 	.word	0x0800ff6d
 8003c54:	0800ff8a 	.word	0x0800ff8a
 8003c58:	20000d64 	.word	0x20000d64
 8003c5c:	0800ffaa 	.word	0x0800ffaa
 8003c60:	200017e8 	.word	0x200017e8
 8003c64:	20000d60 	.word	0x20000d60
 8003c68:	0800fb85 	.word	0x0800fb85
 8003c6c:	0800fca7 	.word	0x0800fca7
 8003c70:	20000d74 	.word	0x20000d74
 8003c74:	0800fbcd 	.word	0x0800fbcd
 8003c78:	20000d58 	.word	0x20000d58
 8003c7c:	0800ffdc 	.word	0x0800ffdc
 8003c80:	20000d68 	.word	0x20000d68
 8003c84:	08010021 	.word	0x08010021
 8003c88:	0800faec 	.word	0x0800faec
 8003c8c:	08010053 	.word	0x08010053
 8003c90:	20000000 	.word	0x20000000
 8003c94:	20000d6c 	.word	0x20000d6c

08003c98 <sendRMCDataWithAddrToGSM>:


void sendRMCDataWithAddrToGSM(GSM_MAIL_STRUCT *mail_data){
	if(mail_data->rmc.date.Yr >= 24){
 8003c98:	6983      	ldr	r3, [r0, #24]
 8003c9a:	2b17      	cmp	r3, #23
void sendRMCDataWithAddrToGSM(GSM_MAIL_STRUCT *mail_data){
 8003c9c:	b570      	push	{r4, r5, r6, lr}
 8003c9e:	4605      	mov	r5, r0
	if(mail_data->rmc.date.Yr >= 24){
 8003ca0:	dd18      	ble.n	8003cd4 <sendRMCDataWithAddrToGSM+0x3c>
		HAL_UART_Transmit(&huart1, (uint8_t*) "\n\n\nSENDING RMC with Addr TO GSM\n\n",  strlen("\n\n\nSENDING RMC with Addr TO GSM\n\n") , HAL_MAX_DELAY);
		GSM_MAIL_STRUCT *mail = (GSM_MAIL_STRUCT *)osMailAlloc(RMC_MailQGSMId, osWaitForever); // Allocate memory for mail
 8003ca2:	4e0d      	ldr	r6, [pc, #52]	@ (8003cd8 <sendRMCDataWithAddrToGSM+0x40>)
		HAL_UART_Transmit(&huart1, (uint8_t*) "\n\n\nSENDING RMC with Addr TO GSM\n\n",  strlen("\n\n\nSENDING RMC with Addr TO GSM\n\n") , HAL_MAX_DELAY);
 8003ca4:	490d      	ldr	r1, [pc, #52]	@ (8003cdc <sendRMCDataWithAddrToGSM+0x44>)
 8003ca6:	480e      	ldr	r0, [pc, #56]	@ (8003ce0 <sendRMCDataWithAddrToGSM+0x48>)
 8003ca8:	f04f 33ff 	mov.w	r3, #4294967295
 8003cac:	2221      	movs	r2, #33	@ 0x21
 8003cae:	f003 fc51 	bl	8007554 <HAL_UART_Transmit>
		GSM_MAIL_STRUCT *mail = (GSM_MAIL_STRUCT *)osMailAlloc(RMC_MailQGSMId, osWaitForever); // Allocate memory for mail
 8003cb2:	6830      	ldr	r0, [r6, #0]
 8003cb4:	f04f 31ff 	mov.w	r1, #4294967295
 8003cb8:	f003 fe88 	bl	80079cc <osMailAlloc>
 8003cbc:	4604      	mov	r4, r0
		if (mail != NULL) {
 8003cbe:	b148      	cbz	r0, 8003cd4 <sendRMCDataWithAddrToGSM+0x3c>
			*mail = *mail_data; // Copy data into allocated memory
 8003cc0:	4629      	mov	r1, r5
 8003cc2:	2260      	movs	r2, #96	@ 0x60
 8003cc4:	f007 ff46 	bl	800bb54 <memcpy>
			osMailPut(RMC_MailQGSMId, mail); // Put message in queue
 8003cc8:	6830      	ldr	r0, [r6, #0]
 8003cca:	4621      	mov	r1, r4
		}
	}
}
 8003ccc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			osMailPut(RMC_MailQGSMId, mail); // Put message in queue
 8003cd0:	f003 be81 	b.w	80079d6 <osMailPut>
}
 8003cd4:	bd70      	pop	{r4, r5, r6, pc}
 8003cd6:	bf00      	nop
 8003cd8:	20000f80 	.word	0x20000f80
 8003cdc:	08010084 	.word	0x08010084
 8003ce0:	200013c4 	.word	0x200013c4

08003ce4 <parseRMCString>:

void parseRMCString(uint8_t *str, RMCSTRUCT *rmc) {
 8003ce4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003ce8:	b0d4      	sub	sp, #336	@ 0x150
 8003cea:	460c      	mov	r4, r1
    // Cast the uint8_t* to char* for string operations
    char buffer[256];
    strncpy(buffer, (char*)str, sizeof(buffer));
 8003cec:	22ff      	movs	r2, #255	@ 0xff
 8003cee:	4601      	mov	r1, r0
 8003cf0:	a814      	add	r0, sp, #80	@ 0x50
 8003cf2:	f007 f902 	bl	800aefa <strncpy>
    buffer[sizeof(buffer) - 1] = '\0'; // Ensure null termination
 8003cf6:	2500      	movs	r5, #0

    // Remove the last parameter by locating the last ';'
    char *lastSemicolon = strrchr(buffer, ';');
 8003cf8:	213b      	movs	r1, #59	@ 0x3b
 8003cfa:	a814      	add	r0, sp, #80	@ 0x50
    buffer[sizeof(buffer) - 1] = '\0'; // Ensure null termination
 8003cfc:	f88d 514f 	strb.w	r5, [sp, #335]	@ 0x14f
    char *lastSemicolon = strrchr(buffer, ';');
 8003d00:	f007 f90e 	bl	800af20 <strrchr>
    if (lastSemicolon) {
 8003d04:	b100      	cbz	r0, 8003d08 <parseRMCString+0x24>
        *lastSemicolon = '\0'; // Terminate the string here to exclude the last parameter
 8003d06:	7005      	strb	r5, [r0, #0]

    // Parse the string (now excluding the last parameter)
    char validStr[10];
   // unsigned long long epoch;
    int epoch0, epoch1, epoch2;
    sscanf(buffer, "%d;%d;%d;%d;%d;%d;%lf;%c;%lf;%c;%f;%f;%9[^;];%04d%04d%02d",
 8003d08:	f104 032c 	add.w	r3, r4, #44	@ 0x2c
 8003d0c:	9309      	str	r3, [sp, #36]	@ 0x24
 8003d0e:	f104 0328 	add.w	r3, r4, #40	@ 0x28
 8003d12:	9308      	str	r3, [sp, #32]
 8003d14:	f104 0350 	add.w	r3, r4, #80	@ 0x50
 8003d18:	9307      	str	r3, [sp, #28]
 8003d1a:	f104 0348 	add.w	r3, r4, #72	@ 0x48
 8003d1e:	9306      	str	r3, [sp, #24]
 8003d20:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 8003d24:	9305      	str	r3, [sp, #20]
 8003d26:	f104 0338 	add.w	r3, r4, #56	@ 0x38
 8003d2a:	9304      	str	r3, [sp, #16]
 8003d2c:	f104 0308 	add.w	r3, r4, #8
 8003d30:	9303      	str	r3, [sp, #12]
 8003d32:	1d23      	adds	r3, r4, #4
 8003d34:	e9cd 4301 	strd	r4, r3, [sp, #4]
 8003d38:	f10d 0844 	add.w	r8, sp, #68	@ 0x44
 8003d3c:	f104 0310 	add.w	r3, r4, #16
 8003d40:	ad10      	add	r5, sp, #64	@ 0x40
 8003d42:	ae0f      	add	r6, sp, #60	@ 0x3c
 8003d44:	af0e      	add	r7, sp, #56	@ 0x38
 8003d46:	f104 0218 	add.w	r2, r4, #24
 8003d4a:	9300      	str	r3, [sp, #0]
 8003d4c:	4911      	ldr	r1, [pc, #68]	@ (8003d94 <parseRMCString+0xb0>)
 8003d4e:	950d      	str	r5, [sp, #52]	@ 0x34
 8003d50:	f104 0314 	add.w	r3, r4, #20
 8003d54:	960c      	str	r6, [sp, #48]	@ 0x30
 8003d56:	970b      	str	r7, [sp, #44]	@ 0x2c
 8003d58:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8003d5c:	a814      	add	r0, sp, #80	@ 0x50
 8003d5e:	f006 fffd 	bl	800ad5c <siscanf>
		   &epoch1,
		   &epoch2// Epoch time
    );

    // Set validity as an integer (1 for "Valid", 0 for others)
    rmc->isValid = (strcmp(validStr, "Valid") == 0) ? 1 : 0;
 8003d62:	490d      	ldr	r1, [pc, #52]	@ (8003d98 <parseRMCString+0xb4>)
 8003d64:	4640      	mov	r0, r8
 8003d66:	f7fc fa33 	bl	80001d0 <strcmp>

    // Store the epoch value
    rmc->date.epoch = ((uint64_t)epoch0 << 32) | ((uint64_t)epoch1 << 16) | (uint64_t)epoch2;
 8003d6a:	e9dd 320e 	ldrd	r3, r2, [sp, #56]	@ 0x38
 8003d6e:	17d1      	asrs	r1, r2, #31
 8003d70:	0409      	lsls	r1, r1, #16
 8003d72:	ea41 4112 	orr.w	r1, r1, r2, lsr #16
 8003d76:	430b      	orrs	r3, r1
 8003d78:	9910      	ldr	r1, [sp, #64]	@ 0x40
    rmc->isValid = (strcmp(validStr, "Valid") == 0) ? 1 : 0;
 8003d7a:	fab0 f080 	clz	r0, r0
 8003d7e:	0940      	lsrs	r0, r0, #5
    rmc->date.epoch = ((uint64_t)epoch0 << 32) | ((uint64_t)epoch1 << 16) | (uint64_t)epoch2;
 8003d80:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 8003d84:	ea43 73e1 	orr.w	r3, r3, r1, asr #31
 8003d88:	e9c4 2308 	strd	r2, r3, [r4, #32]
    rmc->isValid = (strcmp(validStr, "Valid") == 0) ? 1 : 0;
 8003d8c:	6320      	str	r0, [r4, #48]	@ 0x30
}
 8003d8e:	b054      	add	sp, #336	@ 0x150
 8003d90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003d94:	080100a6 	.word	0x080100a6
 8003d98:	0800ff0b 	.word	0x0800ff0b

08003d9c <readFlash>:

RMCSTRUCT readFlash(uint32_t addr){
 8003d9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d9e:	460d      	mov	r5, r1
 8003da0:	b0a9      	sub	sp, #164	@ 0xa4
 8003da2:	4604      	mov	r4, r0
//	char addr_out[10];
	Debug_printf("Address received from FLASH: %08lx \n", addr);
 8003da4:	4835      	ldr	r0, [pc, #212]	@ (8003e7c <readFlash+0xe0>)
 8003da6:	f000 fc9b 	bl	80046e0 <Debug_printf>
	W25_Reset();
 8003daa:	f7ff fb28 	bl	80033fe <W25_Reset>
	W25_ReadData(addr, flashBufferRMCReceived, 128);
 8003dae:	2280      	movs	r2, #128	@ 0x80
 8003db0:	4933      	ldr	r1, [pc, #204]	@ (8003e80 <readFlash+0xe4>)
 8003db2:	4628      	mov	r0, r5
 8003db4:	f7ff fc44 	bl	8003640 <W25_ReadData>
	char spi_flash_data_intro[] = "Flash DATA at CONTROLLING LED received: ";
 8003db8:	4b32      	ldr	r3, [pc, #200]	@ (8003e84 <readFlash+0xe8>)
 8003dba:	aa07      	add	r2, sp, #28
 8003dbc:	f103 0728 	add.w	r7, r3, #40	@ 0x28
 8003dc0:	4616      	mov	r6, r2
 8003dc2:	6818      	ldr	r0, [r3, #0]
 8003dc4:	6859      	ldr	r1, [r3, #4]
 8003dc6:	4615      	mov	r5, r2
 8003dc8:	c503      	stmia	r5!, {r0, r1}
 8003dca:	3308      	adds	r3, #8
 8003dcc:	42bb      	cmp	r3, r7
 8003dce:	462a      	mov	r2, r5
 8003dd0:	d1f7      	bne.n	8003dc2 <readFlash+0x26>
 8003dd2:	781b      	ldrb	r3, [r3, #0]
 8003dd4:	702b      	strb	r3, [r5, #0]
	HAL_UART_Transmit(&huart1, (uint8_t*) spi_flash_data_intro, strlen(spi_flash_data_intro), 1000);
 8003dd6:	4630      	mov	r0, r6
 8003dd8:	f7fc fa5a 	bl	8000290 <strlen>
 8003ddc:	4631      	mov	r1, r6
 8003dde:	b282      	uxth	r2, r0
 8003de0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003de4:	4828      	ldr	r0, [pc, #160]	@ (8003e88 <readFlash+0xec>)
 8003de6:	f003 fbb5 	bl	8007554 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, flashBufferRMCReceived, sizeof(flashBufferRMCReceived), 1000);
 8003dea:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003dee:	2280      	movs	r2, #128	@ 0x80
 8003df0:	4923      	ldr	r1, [pc, #140]	@ (8003e80 <readFlash+0xe4>)
 8003df2:	4825      	ldr	r0, [pc, #148]	@ (8003e88 <readFlash+0xec>)
 8003df4:	f003 fbae 	bl	8007554 <HAL_UART_Transmit>

	RMCSTRUCT rmc;
	parseRMCString(flashBufferRMCReceived, &rmc);
 8003df8:	a912      	add	r1, sp, #72	@ 0x48
 8003dfa:	4821      	ldr	r0, [pc, #132]	@ (8003e80 <readFlash+0xe4>)
 8003dfc:	f7ff ff72 	bl	8003ce4 <parseRMCString>

	Debug_printf("Date: %02d-%02d-%02d\n", rmc.date.Yr, rmc.date.Mon, rmc.date.Day);
 8003e00:	e9dd 3216 	ldrd	r3, r2, [sp, #88]	@ 0x58
 8003e04:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8003e06:	4821      	ldr	r0, [pc, #132]	@ (8003e8c <readFlash+0xf0>)
 8003e08:	f000 fc6a 	bl	80046e0 <Debug_printf>

	Debug_printf("Time: %02d:%02d:%02d\n", rmc.tim.hour, rmc.tim.min, rmc.tim.sec);
 8003e0c:	e9dd 2313 	ldrd	r2, r3, [sp, #76]	@ 0x4c
 8003e10:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8003e12:	481f      	ldr	r0, [pc, #124]	@ (8003e90 <readFlash+0xf4>)
 8003e14:	f000 fc64 	bl	80046e0 <Debug_printf>

	Debug_printf("Location: %.6f %c, %.6f %c\n", rmc.lcation.latitude, rmc.lcation.NS,
 8003e18:	f89d 3098 	ldrb.w	r3, [sp, #152]	@ 0x98
 8003e1c:	9304      	str	r3, [sp, #16]
 8003e1e:	e9dd 2324 	ldrd	r2, r3, [sp, #144]	@ 0x90
 8003e22:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003e26:	f89d 3088 	ldrb.w	r3, [sp, #136]	@ 0x88
 8003e2a:	9300      	str	r3, [sp, #0]
 8003e2c:	4819      	ldr	r0, [pc, #100]	@ (8003e94 <readFlash+0xf8>)
 8003e2e:	e9dd 2320 	ldrd	r2, r3, [sp, #128]	@ 0x80
 8003e32:	f000 fc55 	bl	80046e0 <Debug_printf>
		   rmc.lcation.longitude, rmc.lcation.EW);

	Debug_printf("Speed: %.2f\n", rmc.speed);
 8003e36:	981c      	ldr	r0, [sp, #112]	@ 0x70
 8003e38:	f7fc fb96 	bl	8000568 <__aeabi_f2d>
 8003e3c:	4602      	mov	r2, r0
 8003e3e:	460b      	mov	r3, r1
 8003e40:	4815      	ldr	r0, [pc, #84]	@ (8003e98 <readFlash+0xfc>)
 8003e42:	f000 fc4d 	bl	80046e0 <Debug_printf>

	Debug_printf("Course: %.2f\n", rmc.course);
 8003e46:	981d      	ldr	r0, [sp, #116]	@ 0x74
 8003e48:	f7fc fb8e 	bl	8000568 <__aeabi_f2d>
 8003e4c:	4602      	mov	r2, r0
 8003e4e:	460b      	mov	r3, r1
 8003e50:	4812      	ldr	r0, [pc, #72]	@ (8003e9c <readFlash+0x100>)
 8003e52:	f000 fc45 	bl	80046e0 <Debug_printf>

	Debug_printf("Validity: %s\n", rmc.isValid ? "Valid" : "Invalid");
 8003e56:	4b12      	ldr	r3, [pc, #72]	@ (8003ea0 <readFlash+0x104>)
 8003e58:	991e      	ldr	r1, [sp, #120]	@ 0x78
 8003e5a:	4a12      	ldr	r2, [pc, #72]	@ (8003ea4 <readFlash+0x108>)
 8003e5c:	4812      	ldr	r0, [pc, #72]	@ (8003ea8 <readFlash+0x10c>)
 8003e5e:	2900      	cmp	r1, #0
 8003e60:	bf0c      	ite	eq
 8003e62:	4611      	moveq	r1, r2
 8003e64:	4619      	movne	r1, r3
 8003e66:	f000 fc3b 	bl	80046e0 <Debug_printf>

	return rmc;
 8003e6a:	2258      	movs	r2, #88	@ 0x58
 8003e6c:	a912      	add	r1, sp, #72	@ 0x48
 8003e6e:	4620      	mov	r0, r4
 8003e70:	f007 fe70 	bl	800bb54 <memcpy>
}
 8003e74:	4620      	mov	r0, r4
 8003e76:	b029      	add	sp, #164	@ 0xa4
 8003e78:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003e7a:	bf00      	nop
 8003e7c:	080100e0 	.word	0x080100e0
 8003e80:	200017e8 	.word	0x200017e8
 8003e84:	08010176 	.word	0x08010176
 8003e88:	200013c4 	.word	0x200013c4
 8003e8c:	08010105 	.word	0x08010105
 8003e90:	0801011b 	.word	0x0801011b
 8003e94:	08010131 	.word	0x08010131
 8003e98:	0801014d 	.word	0x0801014d
 8003e9c:	0801015a 	.word	0x0801015a
 8003ea0:	0800ff0b 	.word	0x0800ff0b
 8003ea4:	0800ff11 	.word	0x0800ff11
 8003ea8:	08010168 	.word	0x08010168

08003eac <receiveRMCDataFromGPS>:


void receiveRMCDataFromGPS(void) {
 8003eac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	static int countRMCReceived = 0;
//	uint8_t output_buffer[70];

	// Wait until there are at least 10 messages in the queue
//	Debug_printf("Inside Receiving RMC Data SPI FLASH\n");
	osEvent evt = osMailGet(RMC_MailQFLASHId, osWaitForever); // Wait for mail
 8003eb0:	4f5c      	ldr	r7, [pc, #368]	@ (8004024 <receiveRMCDataFromGPS+0x178>)
void receiveRMCDataFromGPS(void) {
 8003eb2:	b09b      	sub	sp, #108	@ 0x6c
	osEvent evt = osMailGet(RMC_MailQFLASHId, osWaitForever); // Wait for mail
 8003eb4:	6839      	ldr	r1, [r7, #0]
 8003eb6:	f04f 32ff 	mov.w	r2, #4294967295
 8003eba:	a817      	add	r0, sp, #92	@ 0x5c
 8003ebc:	f003 fdb6 	bl	8007a2c <osMailGet>
	if(evt.status == osEventMail){
 8003ec0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8003ec2:	2b20      	cmp	r3, #32
 8003ec4:	d170      	bne.n	8003fa8 <receiveRMCDataFromGPS+0xfc>
		uart_transmit_string(&huart1, (uint8_t*)"\nReceived  RMC Data SPI FLASH: \n");
 8003ec6:	4958      	ldr	r1, [pc, #352]	@ (8004028 <receiveRMCDataFromGPS+0x17c>)
 8003ec8:	4858      	ldr	r0, [pc, #352]	@ (800402c <receiveRMCDataFromGPS+0x180>)
		RMCSTRUCT *receivedData = (RMCSTRUCT *)evt.value.p;
		//Sending DATA to GSM
		rmc_flash.lcation.latitude = receivedData->lcation.latitude;
 8003eca:	4c59      	ldr	r4, [pc, #356]	@ (8004030 <receiveRMCDataFromGPS+0x184>)
		uart_transmit_string(&huart1, (uint8_t*)"\nReceived  RMC Data SPI FLASH: \n");
 8003ecc:	f000 fbf8 	bl	80046c0 <uart_transmit_string>
		RMCSTRUCT *receivedData = (RMCSTRUCT *)evt.value.p;
 8003ed0:	9d18      	ldr	r5, [sp, #96]	@ 0x60
		rmc_flash.lcation.latitude = receivedData->lcation.latitude;
 8003ed2:	e9d5 230e 	ldrd	r2, r3, [r5, #56]	@ 0x38
 8003ed6:	e9c4 230e 	strd	r2, r3, [r4, #56]	@ 0x38
		rmc_flash.lcation.longitude = receivedData->lcation.longitude;
 8003eda:	e9d5 2312 	ldrd	r2, r3, [r5, #72]	@ 0x48
 8003ede:	e9c4 2312 	strd	r2, r3, [r4, #72]	@ 0x48
		rmc_flash.speed = receivedData->speed;
 8003ee2:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 8003ee4:	62a3      	str	r3, [r4, #40]	@ 0x28
		rmc_flash.course = receivedData->course;
 8003ee6:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8003ee8:	62e3      	str	r3, [r4, #44]	@ 0x2c
		rmc_flash.lcation.NS = receivedData->lcation.NS;
 8003eea:	f895 3040 	ldrb.w	r3, [r5, #64]	@ 0x40
 8003eee:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
		rmc_flash.lcation.EW = receivedData->lcation.EW;
 8003ef2:	f895 3050 	ldrb.w	r3, [r5, #80]	@ 0x50
 8003ef6:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
		rmc_flash.isValid = receivedData->isValid;
 8003efa:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8003efc:	6323      	str	r3, [r4, #48]	@ 0x30
		rmc_flash.tim.hour = receivedData->tim.hour;
 8003efe:	682b      	ldr	r3, [r5, #0]
 8003f00:	6023      	str	r3, [r4, #0]
		rmc_flash.tim.min = receivedData->tim.min;
 8003f02:	686b      	ldr	r3, [r5, #4]
 8003f04:	6063      	str	r3, [r4, #4]
		rmc_flash.tim.sec = receivedData->tim.sec;
 8003f06:	68ab      	ldr	r3, [r5, #8]
 8003f08:	60a3      	str	r3, [r4, #8]
		rmc_flash.date.Yr = receivedData->date.Yr;
 8003f0a:	69ab      	ldr	r3, [r5, #24]
 8003f0c:	61a3      	str	r3, [r4, #24]
		rmc_flash.date.Mon = receivedData->date.Mon;
 8003f0e:	696b      	ldr	r3, [r5, #20]
 8003f10:	6163      	str	r3, [r4, #20]
		rmc_flash.date.Day = receivedData->date.Day;


		get_RTC_time_date(&rmc_flash);
 8003f12:	4620      	mov	r0, r4
		rmc_flash.date.Day = receivedData->date.Day;
 8003f14:	692b      	ldr	r3, [r5, #16]
 8003f16:	6123      	str	r3, [r4, #16]
		get_RTC_time_date(&rmc_flash);
 8003f18:	f7fe ff02 	bl	8002d20 <get_RTC_time_date>
//
//		Debug_printf("Location Received FROM GPS AT SPI FLASH: %.6f %c, %.6f %c\n", rmc_flash.lcation.latitude, rmc_flash.lcation.NS, rmc_flash.lcation.longitude, rmc_flash.lcation.EW);
//
//		Debug_printf("Speed FROM GPS AT SPI FLASH: %.2f, Course: %.2f, Valid: %d\n\n\n", rmc_flash.speed, rmc_flash.course, rmc_flash.isValid);

		format_rmc_data(&rmc_flash,(char*) rmcBufferDemo, 128);
 8003f1c:	4945      	ldr	r1, [pc, #276]	@ (8004034 <receiveRMCDataFromGPS+0x188>)
 8003f1e:	2280      	movs	r2, #128	@ 0x80
 8003f20:	4620      	mov	r0, r4
 8003f22:	f7ff fd03 	bl	800392c <format_rmc_data>

		if(rmc_flash.date.Yr >= 24){
 8003f26:	69a3      	ldr	r3, [r4, #24]
 8003f28:	2b17      	cmp	r3, #23
 8003f2a:	dd32      	ble.n	8003f92 <receiveRMCDataFromGPS+0xe6>
			if(countRMCReceived == 17){
 8003f2c:	4e42      	ldr	r6, [pc, #264]	@ (8004038 <receiveRMCDataFromGPS+0x18c>)
 8003f2e:	6833      	ldr	r3, [r6, #0]
 8003f30:	2b11      	cmp	r3, #17
 8003f32:	d13c      	bne.n	8003fae <receiveRMCDataFromGPS+0x102>

				saveRMC();
 8003f34:	f7ff fd50 	bl	80039d8 <saveRMC>
				Debug_printf("---------------------Sending the current data----------------");
 8003f38:	4840      	ldr	r0, [pc, #256]	@ (800403c <receiveRMCDataFromGPS+0x190>)
 8003f3a:	f000 fbd1 	bl	80046e0 <Debug_printf>
				mail_gsm.rmc.lcation.latitude = rmc_flash.lcation.latitude;
 8003f3e:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	@ 0x38
 8003f42:	483f      	ldr	r0, [pc, #252]	@ (8004040 <receiveRMCDataFromGPS+0x194>)
 8003f44:	e9c0 230e 	strd	r2, r3, [r0, #56]	@ 0x38
				mail_gsm.rmc.lcation.longitude = rmc_flash.lcation.longitude;
 8003f48:	e9d4 2312 	ldrd	r2, r3, [r4, #72]	@ 0x48
 8003f4c:	e9c0 2312 	strd	r2, r3, [r0, #72]	@ 0x48
				mail_gsm.rmc.speed = rmc_flash.speed;
 8003f50:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8003f52:	6283      	str	r3, [r0, #40]	@ 0x28
				mail_gsm.rmc.course = rmc_flash.course;
 8003f54:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8003f56:	62c3      	str	r3, [r0, #44]	@ 0x2c
				mail_gsm.rmc.lcation.NS = rmc_flash.lcation.NS;
 8003f58:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 8003f5c:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
				mail_gsm.rmc.lcation.EW = rmc_flash.lcation.EW;
 8003f60:	f894 3050 	ldrb.w	r3, [r4, #80]	@ 0x50
 8003f64:	f880 3050 	strb.w	r3, [r0, #80]	@ 0x50
				mail_gsm.rmc.isValid = rmc_flash.isValid;
 8003f68:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8003f6a:	6303      	str	r3, [r0, #48]	@ 0x30
				mail_gsm.rmc.tim.hour = rmc_flash.tim.hour;
 8003f6c:	6823      	ldr	r3, [r4, #0]
 8003f6e:	6003      	str	r3, [r0, #0]
				mail_gsm.rmc.tim.min = rmc_flash.tim.min;
 8003f70:	6863      	ldr	r3, [r4, #4]
 8003f72:	6043      	str	r3, [r0, #4]
				mail_gsm.rmc.tim.sec = rmc_flash.tim.sec;
 8003f74:	68a3      	ldr	r3, [r4, #8]
 8003f76:	6083      	str	r3, [r0, #8]
				mail_gsm.rmc.date.Yr = rmc_flash.date.Yr;
 8003f78:	69a3      	ldr	r3, [r4, #24]
 8003f7a:	6183      	str	r3, [r0, #24]
				mail_gsm.rmc.date.Mon = rmc_flash.date.Mon;
 8003f7c:	6963      	ldr	r3, [r4, #20]
 8003f7e:	6143      	str	r3, [r0, #20]
				mail_gsm.rmc.date.Day = rmc_flash.date.Day;
 8003f80:	6923      	ldr	r3, [r4, #16]
 8003f82:	6103      	str	r3, [r0, #16]
				mail_gsm.address = current_addr;
 8003f84:	4b2f      	ldr	r3, [pc, #188]	@ (8004044 <receiveRMCDataFromGPS+0x198>)
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	6583      	str	r3, [r0, #88]	@ 0x58
				sendRMCDataWithAddrToGSM(&mail_gsm);
 8003f8a:	f7ff fe85 	bl	8003c98 <sendRMCDataWithAddrToGSM>
				countRMCReceived = 0;
 8003f8e:	2300      	movs	r3, #0
				 * CASE 2: When disconnect and reconnect have sent the data from queue then disconnect again so update the end address
				 */
				if(is_using_flash == 1 && is_disconnect == 0){
					if(checkAddrExistInQueue(start_addr_disconnect, &result_addr_queue)){
						Debug_printf("\n-------SKIPPING address cause it was sent already: %08lx--------\n", start_addr_disconnect);
						start_addr_disconnect +=128;
 8003f90:	6033      	str	r3, [r6, #0]
					}
				}
				//is_over_flow = 0;
			}
		}
		osMailFree(RMC_MailQFLASHId, receivedData);
 8003f92:	6838      	ldr	r0, [r7, #0]
 8003f94:	4629      	mov	r1, r5
 8003f96:	f003 fd82 	bl	8007a9e <osMailFree>
		// Free memory after use
		if(rmc_flash.date.Yr >= 24)
 8003f9a:	69a3      	ldr	r3, [r4, #24]
 8003f9c:	2b17      	cmp	r3, #23
			countRMCReceived++;
 8003f9e:	bfc1      	itttt	gt
 8003fa0:	4a25      	ldrgt	r2, [pc, #148]	@ (8004038 <receiveRMCDataFromGPS+0x18c>)
 8003fa2:	6813      	ldrgt	r3, [r2, #0]
 8003fa4:	3301      	addgt	r3, #1
 8003fa6:	6013      	strgt	r3, [r2, #0]
	}
}
 8003fa8:	b01b      	add	sp, #108	@ 0x6c
 8003faa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				if(is_using_flash == 1 && is_disconnect == 0){
 8003fae:	4b26      	ldr	r3, [pc, #152]	@ (8004048 <receiveRMCDataFromGPS+0x19c>)
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	2b01      	cmp	r3, #1
 8003fb4:	d1ed      	bne.n	8003f92 <receiveRMCDataFromGPS+0xe6>
 8003fb6:	4b25      	ldr	r3, [pc, #148]	@ (800404c <receiveRMCDataFromGPS+0x1a0>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d1e9      	bne.n	8003f92 <receiveRMCDataFromGPS+0xe6>
					if(checkAddrExistInQueue(start_addr_disconnect, &result_addr_queue)){
 8003fbe:	4e24      	ldr	r6, [pc, #144]	@ (8004050 <receiveRMCDataFromGPS+0x1a4>)
 8003fc0:	4924      	ldr	r1, [pc, #144]	@ (8004054 <receiveRMCDataFromGPS+0x1a8>)
 8003fc2:	6830      	ldr	r0, [r6, #0]
 8003fc4:	f7fe fdf8 	bl	8002bb8 <checkAddrExistInQueue>
 8003fc8:	b130      	cbz	r0, 8003fd8 <receiveRMCDataFromGPS+0x12c>
						Debug_printf("\n-------SKIPPING address cause it was sent already: %08lx--------\n", start_addr_disconnect);
 8003fca:	6831      	ldr	r1, [r6, #0]
 8003fcc:	4822      	ldr	r0, [pc, #136]	@ (8004058 <receiveRMCDataFromGPS+0x1ac>)
 8003fce:	f000 fb87 	bl	80046e0 <Debug_printf>
						start_addr_disconnect +=128;
 8003fd2:	6833      	ldr	r3, [r6, #0]
 8003fd4:	3380      	adds	r3, #128	@ 0x80
 8003fd6:	e7db      	b.n	8003f90 <receiveRMCDataFromGPS+0xe4>
						addr_to_get_from_FLASH = start_addr_disconnect - (count_shiftleft * 128);
 8003fd8:	4a20      	ldr	r2, [pc, #128]	@ (800405c <receiveRMCDataFromGPS+0x1b0>)
 8003fda:	6833      	ldr	r3, [r6, #0]
 8003fdc:	6812      	ldr	r2, [r2, #0]
 8003fde:	f8df 9084 	ldr.w	r9, [pc, #132]	@ 8004064 <receiveRMCDataFromGPS+0x1b8>
						mail_gsm.rmc = readFlash(addr_to_get_from_FLASH);
 8003fe2:	f8df 805c 	ldr.w	r8, [pc, #92]	@ 8004040 <receiveRMCDataFromGPS+0x194>
						Debug_printf("\n---------------- Sending data in disconnected phase to GSM: %08lx -------------------\n", start_addr_disconnect);
 8003fe6:	6831      	ldr	r1, [r6, #0]
 8003fe8:	481d      	ldr	r0, [pc, #116]	@ (8004060 <receiveRMCDataFromGPS+0x1b4>)
						addr_to_get_from_FLASH = start_addr_disconnect - (count_shiftleft * 128);
 8003fea:	eba3 13c2 	sub.w	r3, r3, r2, lsl #7
						if(addr_to_get_from_FLASH < FLASH_START_ADDRESS) addr_to_get_from_FLASH = FLASH_START_ADDRESS;
 8003fee:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003ff2:	bf38      	it	cc
 8003ff4:	f44f 5340 	movcc.w	r3, #12288	@ 0x3000
						addr_to_get_from_FLASH = start_addr_disconnect - (count_shiftleft * 128);
 8003ff8:	f8c9 3000 	str.w	r3, [r9]
						Debug_printf("\n---------------- Sending data in disconnected phase to GSM: %08lx -------------------\n", start_addr_disconnect);
 8003ffc:	f000 fb70 	bl	80046e0 <Debug_printf>
						mail_gsm.rmc = readFlash(addr_to_get_from_FLASH);
 8004000:	f8d9 1000 	ldr.w	r1, [r9]
 8004004:	4668      	mov	r0, sp
 8004006:	f7ff fec9 	bl	8003d9c <readFlash>
 800400a:	2258      	movs	r2, #88	@ 0x58
 800400c:	4669      	mov	r1, sp
 800400e:	4640      	mov	r0, r8
 8004010:	f007 fda0 	bl	800bb54 <memcpy>
						mail_gsm.address = start_addr_disconnect;
 8004014:	6833      	ldr	r3, [r6, #0]
 8004016:	f8c8 3058 	str.w	r3, [r8, #88]	@ 0x58
						sendRMCDataWithAddrToGSM(&mail_gsm);
 800401a:	4640      	mov	r0, r8
 800401c:	f7ff fe3c 	bl	8003c98 <sendRMCDataWithAddrToGSM>
 8004020:	e7b7      	b.n	8003f92 <receiveRMCDataFromGPS+0xe6>
 8004022:	bf00      	nop
 8004024:	200002c8 	.word	0x200002c8
 8004028:	0801019f 	.word	0x0801019f
 800402c:	200013c4 	.word	0x200013c4
 8004030:	20001710 	.word	0x20001710
 8004034:	20001768 	.word	0x20001768
 8004038:	200016a8 	.word	0x200016a8
 800403c:	080101c0 	.word	0x080101c0
 8004040:	200016b0 	.word	0x200016b0
 8004044:	20000000 	.word	0x20000000
 8004048:	20000d6c 	.word	0x20000d6c
 800404c:	20000d70 	.word	0x20000d70
 8004050:	20000d60 	.word	0x20000d60
 8004054:	20000d74 	.word	0x20000d74
 8004058:	080101fe 	.word	0x080101fe
 800405c:	20000d68 	.word	0x20000d68
 8004060:	08010241 	.word	0x08010241
 8004064:	2000186c 	.word	0x2000186c

08004068 <StartSpiFlash>:


void StartSpiFlash(void const * argument)
{
 8004068:	b580      	push	{r7, lr}
  /* USER CODE BEGIN StartSpiFlash */
  /* Infinite loop */
	Debug_printf("\n\n\n------------------------------- STARTING SPI FLASH ------------------------------\n\n\n");
 800406a:	482a      	ldr	r0, [pc, #168]	@ (8004114 <StartSpiFlash+0xac>)
	current_addr = address_rmc;
 800406c:	f8df 80c0 	ldr.w	r8, [pc, #192]	@ 8004130 <StartSpiFlash+0xc8>
		osDelay(500);
//		uart_transmit_string(&huart1, (uint8_t*) "\n\n\n--------------------- INSIDE SPI FLASH ------------------------\n\n\n");
		W25_Reset();
		W25_ReadJedecID();
		W25_Reset();
		W25_ReadData(current_addr, flashBufferRMCReceived, 128);
 8004070:	4e29      	ldr	r6, [pc, #164]	@ (8004118 <StartSpiFlash+0xb0>)
		char spi_flash_data_intro[] = "Flash DATA received: ";
		HAL_UART_Transmit(&huart1, (uint8_t*) spi_flash_data_intro, strlen(spi_flash_data_intro), 1000);
 8004072:	4d2a      	ldr	r5, [pc, #168]	@ (800411c <StartSpiFlash+0xb4>)
{
 8004074:	b08a      	sub	sp, #40	@ 0x28
	Debug_printf("\n\n\n------------------------------- STARTING SPI FLASH ------------------------------\n\n\n");
 8004076:	f000 fb33 	bl	80046e0 <Debug_printf>
	current_addr = address_rmc;
 800407a:	4b29      	ldr	r3, [pc, #164]	@ (8004120 <StartSpiFlash+0xb8>)
	osMailQDef(GSM_MailQ, 128, GSM_MAIL_STRUCT);
 800407c:	f8cd d00c 	str.w	sp, [sp, #12]
	current_addr = address_rmc;
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f8c8 3000 	str.w	r3, [r8]
	osMailQDef(GSM_MailQ, 128, GSM_MAIL_STRUCT);
 8004086:	2280      	movs	r2, #128	@ 0x80
 8004088:	2360      	movs	r3, #96	@ 0x60
	RMC_MailQGSMId = osMailCreate(osMailQ(GSM_MailQ), NULL);
 800408a:	2100      	movs	r1, #0
 800408c:	a801      	add	r0, sp, #4
	osMailQDef(GSM_MailQ, 128, GSM_MAIL_STRUCT);
 800408e:	e9cd 2301 	strd	r2, r3, [sp, #4]
	RMC_MailQGSMId = osMailCreate(osMailQ(GSM_MailQ), NULL);
 8004092:	f003 fc70 	bl	8007976 <osMailCreate>
 8004096:	4b23      	ldr	r3, [pc, #140]	@ (8004124 <StartSpiFlash+0xbc>)
 8004098:	6018      	str	r0, [r3, #0]
		osDelay(500);
 800409a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800409e:	f003 fbc9 	bl	8007834 <osDelay>
		W25_Reset();
 80040a2:	f7ff f9ac 	bl	80033fe <W25_Reset>
		W25_ReadJedecID();
 80040a6:	f7ff f9d7 	bl	8003458 <W25_ReadJedecID>
		W25_Reset();
 80040aa:	f7ff f9a8 	bl	80033fe <W25_Reset>
		W25_ReadData(current_addr, flashBufferRMCReceived, 128);
 80040ae:	2280      	movs	r2, #128	@ 0x80
 80040b0:	f8d8 0000 	ldr.w	r0, [r8]
 80040b4:	4631      	mov	r1, r6
 80040b6:	f7ff fac3 	bl	8003640 <W25_ReadData>
		char spi_flash_data_intro[] = "Flash DATA received: ";
 80040ba:	4b1b      	ldr	r3, [pc, #108]	@ (8004128 <StartSpiFlash+0xc0>)
 80040bc:	aa04      	add	r2, sp, #16
 80040be:	f103 0c10 	add.w	ip, r3, #16
 80040c2:	4617      	mov	r7, r2
 80040c4:	6818      	ldr	r0, [r3, #0]
 80040c6:	6859      	ldr	r1, [r3, #4]
 80040c8:	4614      	mov	r4, r2
 80040ca:	c403      	stmia	r4!, {r0, r1}
 80040cc:	3308      	adds	r3, #8
 80040ce:	4563      	cmp	r3, ip
 80040d0:	4622      	mov	r2, r4
 80040d2:	d1f7      	bne.n	80040c4 <StartSpiFlash+0x5c>
 80040d4:	6818      	ldr	r0, [r3, #0]
 80040d6:	889b      	ldrh	r3, [r3, #4]
 80040d8:	6020      	str	r0, [r4, #0]
 80040da:	80a3      	strh	r3, [r4, #4]
		HAL_UART_Transmit(&huart1, (uint8_t*) spi_flash_data_intro, strlen(spi_flash_data_intro), 1000);
 80040dc:	4638      	mov	r0, r7
 80040de:	f7fc f8d7 	bl	8000290 <strlen>
 80040e2:	4639      	mov	r1, r7
 80040e4:	b282      	uxth	r2, r0
 80040e6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80040ea:	4628      	mov	r0, r5
 80040ec:	f003 fa32 	bl	8007554 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart1, flashBufferRMCReceived, sizeof(flashBufferRMCReceived), 1000);
 80040f0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80040f4:	2280      	movs	r2, #128	@ 0x80
 80040f6:	4631      	mov	r1, r6
 80040f8:	4628      	mov	r0, r5
 80040fa:	f003 fa2b 	bl	8007554 <HAL_UART_Transmit>
		//receiveTaxData();
		receiveRMCDataFromGPS();
 80040fe:	f7ff fed5 	bl	8003eac <receiveRMCDataFromGPS>
		uart_transmit_string(&huart1,(uint8_t*) "\n\n");
 8004102:	4628      	mov	r0, r5
 8004104:	4909      	ldr	r1, [pc, #36]	@ (800412c <StartSpiFlash+0xc4>)
 8004106:	f000 fadb 	bl	80046c0 <uart_transmit_string>
		osDelay(500);
 800410a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800410e:	f003 fb91 	bl	8007834 <osDelay>
	for(;;){
 8004112:	e7c2      	b.n	800409a <StartSpiFlash+0x32>
 8004114:	08010299 	.word	0x08010299
 8004118:	200017e8 	.word	0x200017e8
 800411c:	200013c4 	.word	0x200013c4
 8004120:	20000004 	.word	0x20000004
 8004124:	20000f80 	.word	0x20000f80
 8004128:	080102f1 	.word	0x080102f1
 800412c:	0800faeb 	.word	0x0800faeb
 8004130:	20000000 	.word	0x20000000

08004134 <HAL_MspInit>:

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004134:	4b0d      	ldr	r3, [pc, #52]	@ (800416c <HAL_MspInit+0x38>)
 8004136:	699a      	ldr	r2, [r3, #24]
 8004138:	f042 0201 	orr.w	r2, r2, #1
 800413c:	619a      	str	r2, [r3, #24]
 800413e:	699a      	ldr	r2, [r3, #24]
{
 8004140:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004142:	f002 0201 	and.w	r2, r2, #1
 8004146:	9200      	str	r2, [sp, #0]
 8004148:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800414a:	69da      	ldr	r2, [r3, #28]
 800414c:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8004150:	61da      	str	r2, [r3, #28]
 8004152:	69db      	ldr	r3, [r3, #28]
 8004154:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004158:	9301      	str	r3, [sp, #4]
 800415a:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800415c:	2200      	movs	r2, #0
 800415e:	210f      	movs	r1, #15
 8004160:	f06f 0001 	mvn.w	r0, #1

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004164:	b002      	add	sp, #8
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8004166:	f001 b8e7 	b.w	8005338 <HAL_NVIC_SetPriority>
 800416a:	bf00      	nop
 800416c:	40021000 	.word	0x40021000

08004170 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004170:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004172:	2214      	movs	r2, #20
{
 8004174:	b08a      	sub	sp, #40	@ 0x28
 8004176:	4605      	mov	r5, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004178:	2100      	movs	r1, #0
 800417a:	eb0d 0002 	add.w	r0, sp, r2
 800417e:	f006 fe95 	bl	800aeac <memset>
  if(hadc->Instance==ADC2)
 8004182:	682b      	ldr	r3, [r5, #0]
 8004184:	4a3d      	ldr	r2, [pc, #244]	@ (800427c <HAL_ADC_MspInit+0x10c>)
 8004186:	4293      	cmp	r3, r2
 8004188:	d137      	bne.n	80041fa <HAL_ADC_MspInit+0x8a>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800418a:	4b3d      	ldr	r3, [pc, #244]	@ (8004280 <HAL_ADC_MspInit+0x110>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA2_Channel1;
 800418c:	4c3d      	ldr	r4, [pc, #244]	@ (8004284 <HAL_ADC_MspInit+0x114>)
    __HAL_RCC_ADC12_CLK_ENABLE();
 800418e:	695a      	ldr	r2, [r3, #20]
 8004190:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8004194:	615a      	str	r2, [r3, #20]
 8004196:	695a      	ldr	r2, [r3, #20]
 8004198:	f002 5280 	and.w	r2, r2, #268435456	@ 0x10000000
 800419c:	9201      	str	r2, [sp, #4]
 800419e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80041a0:	695a      	ldr	r2, [r3, #20]
 80041a2:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 80041a6:	615a      	str	r2, [r3, #20]
 80041a8:	695b      	ldr	r3, [r3, #20]
 80041aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041ae:	9302      	str	r3, [sp, #8]
 80041b0:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80041b2:	2620      	movs	r6, #32
 80041b4:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80041b6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80041ba:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80041bc:	e9cd 6305 	strd	r6, r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80041c0:	f001 f9de 	bl	8005580 <HAL_GPIO_Init>
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80041c4:	f44f 7280 	mov.w	r2, #256	@ 0x100
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80041c8:	f8df c0cc 	ldr.w	ip, [pc, #204]	@ 8004298 <HAL_ADC_MspInit+0x128>
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80041cc:	f04f 0e80 	mov.w	lr, #128	@ 0x80
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80041d0:	2300      	movs	r3, #0
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80041d2:	e9c4 e203 	strd	lr, r2, [r4, #12]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 80041d6:	4620      	mov	r0, r4
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80041d8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80041dc:	e9c4 c300 	strd	ip, r3, [r4]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 80041e0:	e9c4 2605 	strd	r2, r6, [r4, #20]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 80041e4:	60a3      	str	r3, [r4, #8]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 80041e6:	61e3      	str	r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 80041e8:	f001 f906 	bl	80053f8 <HAL_DMA_Init>
 80041ec:	b108      	cbz	r0, 80041f2 <HAL_ADC_MspInit+0x82>
    {
      Error_Handler();
 80041ee:	f7ff f8be 	bl	800336e <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 80041f2:	63ac      	str	r4, [r5, #56]	@ 0x38
 80041f4:	6265      	str	r5, [r4, #36]	@ 0x24
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 80041f6:	b00a      	add	sp, #40	@ 0x28
 80041f8:	bd70      	pop	{r4, r5, r6, pc}
  else if(hadc->Instance==ADC3)
 80041fa:	4a23      	ldr	r2, [pc, #140]	@ (8004288 <HAL_ADC_MspInit+0x118>)
 80041fc:	4293      	cmp	r3, r2
 80041fe:	d1fa      	bne.n	80041f6 <HAL_ADC_MspInit+0x86>
    __HAL_RCC_ADC34_CLK_ENABLE();
 8004200:	4b1f      	ldr	r3, [pc, #124]	@ (8004280 <HAL_ADC_MspInit+0x110>)
    hdma_adc3.Instance = DMA2_Channel5;
 8004202:	4c22      	ldr	r4, [pc, #136]	@ (800428c <HAL_ADC_MspInit+0x11c>)
    __HAL_RCC_ADC34_CLK_ENABLE();
 8004204:	695a      	ldr	r2, [r3, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004206:	4822      	ldr	r0, [pc, #136]	@ (8004290 <HAL_ADC_MspInit+0x120>)
    __HAL_RCC_ADC34_CLK_ENABLE();
 8004208:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 800420c:	615a      	str	r2, [r3, #20]
 800420e:	695a      	ldr	r2, [r3, #20]
 8004210:	f002 5200 	and.w	r2, r2, #536870912	@ 0x20000000
 8004214:	9203      	str	r2, [sp, #12]
 8004216:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004218:	695a      	ldr	r2, [r3, #20]
 800421a:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800421e:	615a      	str	r2, [r3, #20]
 8004220:	695b      	ldr	r3, [r3, #20]
 8004222:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004226:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004228:	2201      	movs	r2, #1
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800422a:	9b04      	ldr	r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800422c:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800422e:	2303      	movs	r3, #3
 8004230:	e9cd 2305 	strd	r2, r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004234:	f001 f9a4 	bl	8005580 <HAL_GPIO_Init>
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004238:	2080      	movs	r0, #128	@ 0x80
 800423a:	f44f 7280 	mov.w	r2, #256	@ 0x100
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800423e:	4915      	ldr	r1, [pc, #84]	@ (8004294 <HAL_ADC_MspInit+0x124>)
 8004240:	2300      	movs	r3, #0
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004242:	e9c4 0203 	strd	r0, r2, [r4, #12]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8004246:	f44f 6680 	mov.w	r6, #1024	@ 0x400
 800424a:	2220      	movs	r2, #32
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 800424c:	4620      	mov	r0, r4
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800424e:	e9c4 1300 	strd	r1, r3, [r4]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8004252:	e9c4 6205 	strd	r6, r2, [r4, #20]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8004256:	60a3      	str	r3, [r4, #8]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8004258:	61e3      	str	r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 800425a:	f001 f8cd 	bl	80053f8 <HAL_DMA_Init>
 800425e:	b108      	cbz	r0, 8004264 <HAL_ADC_MspInit+0xf4>
      Error_Handler();
 8004260:	f7ff f885 	bl	800336e <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8004264:	63ac      	str	r4, [r5, #56]	@ 0x38
    HAL_NVIC_SetPriority(ADC3_IRQn, 5, 0);
 8004266:	2200      	movs	r2, #0
 8004268:	2105      	movs	r1, #5
 800426a:	202f      	movs	r0, #47	@ 0x2f
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 800426c:	6265      	str	r5, [r4, #36]	@ 0x24
    HAL_NVIC_SetPriority(ADC3_IRQn, 5, 0);
 800426e:	f001 f863 	bl	8005338 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC3_IRQn);
 8004272:	202f      	movs	r0, #47	@ 0x2f
 8004274:	f001 f892 	bl	800539c <HAL_NVIC_EnableIRQ>
}
 8004278:	e7bd      	b.n	80041f6 <HAL_ADC_MspInit+0x86>
 800427a:	bf00      	nop
 800427c:	50000100 	.word	0x50000100
 8004280:	40021000 	.word	0x40021000
 8004284:	200015c4 	.word	0x200015c4
 8004288:	50000400 	.word	0x50000400
 800428c:	20001580 	.word	0x20001580
 8004290:	48000400 	.word	0x48000400
 8004294:	40020458 	.word	0x40020458
 8004298:	40020408 	.word	0x40020408

0800429c <HAL_RTC_MspInit>:
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
  if(hrtc->Instance==RTC)
 800429c:	6802      	ldr	r2, [r0, #0]
 800429e:	4b07      	ldr	r3, [pc, #28]	@ (80042bc <HAL_RTC_MspInit+0x20>)
 80042a0:	429a      	cmp	r2, r3
 80042a2:	d10a      	bne.n	80042ba <HAL_RTC_MspInit+0x1e>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042a4:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80042a8:	fa92 f2a2 	rbit	r2, r2
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80042ac:	4b04      	ldr	r3, [pc, #16]	@ (80042c0 <HAL_RTC_MspInit+0x24>)
 80042ae:	fab2 f282 	clz	r2, r2
 80042b2:	4413      	add	r3, r2
 80042b4:	009b      	lsls	r3, r3, #2
 80042b6:	2201      	movs	r2, #1
 80042b8:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTC_MspInit 1 */

  }

}
 80042ba:	4770      	bx	lr
 80042bc:	40002800 	.word	0x40002800
 80042c0:	10908100 	.word	0x10908100

080042c4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80042c4:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80042c6:	2214      	movs	r2, #20
{
 80042c8:	b08a      	sub	sp, #40	@ 0x28
 80042ca:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80042cc:	2100      	movs	r1, #0
 80042ce:	eb0d 0002 	add.w	r0, sp, r2
 80042d2:	f006 fdeb 	bl	800aeac <memset>
  if(hspi->Instance==SPI1)
 80042d6:	6823      	ldr	r3, [r4, #0]
 80042d8:	4a1e      	ldr	r2, [pc, #120]	@ (8004354 <HAL_SPI_MspInit+0x90>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	d120      	bne.n	8004320 <HAL_SPI_MspInit+0x5c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80042de:	4b1e      	ldr	r3, [pc, #120]	@ (8004358 <HAL_SPI_MspInit+0x94>)
 80042e0:	699a      	ldr	r2, [r3, #24]
 80042e2:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80042e6:	619a      	str	r2, [r3, #24]
 80042e8:	699a      	ldr	r2, [r3, #24]
 80042ea:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 80042ee:	9201      	str	r2, [sp, #4]
 80042f0:	9a01      	ldr	r2, [sp, #4]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80042f2:	695a      	ldr	r2, [r3, #20]
 80042f4:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 80042f8:	615a      	str	r2, [r3, #20]
 80042fa:	695b      	ldr	r3, [r3, #20]
 80042fc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004300:	9302      	str	r3, [sp, #8]
 8004302:	9b02      	ldr	r3, [sp, #8]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8004304:	2338      	movs	r3, #56	@ 0x38
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8004306:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004308:	2302      	movs	r3, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800430a:	2103      	movs	r1, #3
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800430c:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800430e:	2305      	movs	r3, #5
 8004310:	e9cd 1308 	strd	r1, r3, [sp, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004314:	4811      	ldr	r0, [pc, #68]	@ (800435c <HAL_SPI_MspInit+0x98>)
 8004316:	a905      	add	r1, sp, #20
 8004318:	f001 f932 	bl	8005580 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800431c:	b00a      	add	sp, #40	@ 0x28
 800431e:	bd10      	pop	{r4, pc}
  else if(hspi->Instance==SPI2)
 8004320:	4a0f      	ldr	r2, [pc, #60]	@ (8004360 <HAL_SPI_MspInit+0x9c>)
 8004322:	4293      	cmp	r3, r2
 8004324:	d1fa      	bne.n	800431c <HAL_SPI_MspInit+0x58>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8004326:	4b0c      	ldr	r3, [pc, #48]	@ (8004358 <HAL_SPI_MspInit+0x94>)
 8004328:	69da      	ldr	r2, [r3, #28]
 800432a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800432e:	61da      	str	r2, [r3, #28]
 8004330:	69da      	ldr	r2, [r3, #28]
 8004332:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8004336:	9203      	str	r2, [sp, #12]
 8004338:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800433a:	695a      	ldr	r2, [r3, #20]
 800433c:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8004340:	615a      	str	r2, [r3, #20]
 8004342:	695b      	ldr	r3, [r3, #20]
 8004344:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004348:	9304      	str	r3, [sp, #16]
 800434a:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800434c:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8004350:	e7d9      	b.n	8004306 <HAL_SPI_MspInit+0x42>
 8004352:	bf00      	nop
 8004354:	40013000 	.word	0x40013000
 8004358:	40021000 	.word	0x40021000
 800435c:	48000400 	.word	0x48000400
 8004360:	40003800 	.word	0x40003800

08004364 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004364:	b507      	push	{r0, r1, r2, lr}
  if(htim_base->Instance==TIM3)
 8004366:	4b0e      	ldr	r3, [pc, #56]	@ (80043a0 <HAL_TIM_Base_MspInit+0x3c>)
 8004368:	6802      	ldr	r2, [r0, #0]
 800436a:	429a      	cmp	r2, r3
 800436c:	d115      	bne.n	800439a <HAL_TIM_Base_MspInit+0x36>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800436e:	f503 3303 	add.w	r3, r3, #134144	@ 0x20c00
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8004372:	2105      	movs	r1, #5
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004374:	69da      	ldr	r2, [r3, #28]
 8004376:	f042 0202 	orr.w	r2, r2, #2
 800437a:	61da      	str	r2, [r3, #28]
 800437c:	69db      	ldr	r3, [r3, #28]
 800437e:	f003 0302 	and.w	r3, r3, #2
 8004382:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8004384:	2200      	movs	r2, #0
 8004386:	201d      	movs	r0, #29
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004388:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 800438a:	f000 ffd5 	bl	8005338 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800438e:	201d      	movs	r0, #29

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 8004390:	b003      	add	sp, #12
 8004392:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8004396:	f001 b801 	b.w	800539c <HAL_NVIC_EnableIRQ>
}
 800439a:	b003      	add	sp, #12
 800439c:	f85d fb04 	ldr.w	pc, [sp], #4
 80043a0:	40000400 	.word	0x40000400

080043a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80043a4:	b530      	push	{r4, r5, lr}
 80043a6:	4605      	mov	r5, r0
 80043a8:	b08d      	sub	sp, #52	@ 0x34
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80043aa:	2214      	movs	r2, #20
 80043ac:	2100      	movs	r1, #0
 80043ae:	a807      	add	r0, sp, #28
 80043b0:	f006 fd7c 	bl	800aeac <memset>
  if(huart->Instance==USART1)
 80043b4:	682b      	ldr	r3, [r5, #0]
 80043b6:	4a4a      	ldr	r2, [pc, #296]	@ (80044e0 <HAL_UART_MspInit+0x13c>)
 80043b8:	4293      	cmp	r3, r2
 80043ba:	d137      	bne.n	800442c <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80043bc:	4b49      	ldr	r3, [pc, #292]	@ (80044e4 <HAL_UART_MspInit+0x140>)
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 80043be:	4c4a      	ldr	r4, [pc, #296]	@ (80044e8 <HAL_UART_MspInit+0x144>)
    __HAL_RCC_USART1_CLK_ENABLE();
 80043c0:	699a      	ldr	r2, [r3, #24]
 80043c2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80043c6:	619a      	str	r2, [r3, #24]
 80043c8:	699a      	ldr	r2, [r3, #24]
 80043ca:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 80043ce:	9201      	str	r2, [sp, #4]
 80043d0:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80043d2:	695a      	ldr	r2, [r3, #20]
 80043d4:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 80043d8:	615a      	str	r2, [r3, #20]
 80043da:	695b      	ldr	r3, [r3, #20]
 80043dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043e0:	9302      	str	r3, [sp, #8]
 80043e2:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043e4:	f44f 6ec0 	mov.w	lr, #1536	@ 0x600
 80043e8:	2302      	movs	r3, #2
 80043ea:	e9cd e307 	strd	lr, r3, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80043ee:	2203      	movs	r2, #3
 80043f0:	2307      	movs	r3, #7
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80043f2:	a907      	add	r1, sp, #28
 80043f4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80043f8:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80043fc:	f001 f8c0 	bl	8005580 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8004400:	4b3a      	ldr	r3, [pc, #232]	@ (80044ec <HAL_UART_MspInit+0x148>)
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8004402:	6023      	str	r3, [r4, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004404:	2300      	movs	r3, #0
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004406:	2280      	movs	r2, #128	@ 0x80
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004408:	e9c4 3301 	strd	r3, r3, [r4, #4]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800440c:	e9c4 2303 	strd	r2, r3, [r4, #12]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8004410:	2220      	movs	r2, #32
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004412:	6163      	str	r3, [r4, #20]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8004414:	61a2      	str	r2, [r4, #24]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8004416:	61e3      	str	r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8004418:	4620      	mov	r0, r4
 800441a:	f000 ffed 	bl	80053f8 <HAL_DMA_Init>
 800441e:	b108      	cbz	r0, 8004424 <HAL_UART_MspInit+0x80>
    {
      Error_Handler();
 8004420:	f7fe ffa5 	bl	800336e <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8004424:	676c      	str	r4, [r5, #116]	@ 0x74
 8004426:	6265      	str	r5, [r4, #36]	@ 0x24
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8004428:	b00d      	add	sp, #52	@ 0x34
 800442a:	bd30      	pop	{r4, r5, pc}
  else if(huart->Instance==USART2)
 800442c:	4a30      	ldr	r2, [pc, #192]	@ (80044f0 <HAL_UART_MspInit+0x14c>)
 800442e:	4293      	cmp	r3, r2
 8004430:	d123      	bne.n	800447a <HAL_UART_MspInit+0xd6>
    __HAL_RCC_USART2_CLK_ENABLE();
 8004432:	4b2c      	ldr	r3, [pc, #176]	@ (80044e4 <HAL_UART_MspInit+0x140>)
 8004434:	69da      	ldr	r2, [r3, #28]
 8004436:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800443a:	61da      	str	r2, [r3, #28]
 800443c:	69da      	ldr	r2, [r3, #28]
 800443e:	f402 3200 	and.w	r2, r2, #131072	@ 0x20000
 8004442:	9203      	str	r2, [sp, #12]
 8004444:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004446:	695a      	ldr	r2, [r3, #20]
 8004448:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800444c:	615a      	str	r2, [r3, #20]
 800444e:	695b      	ldr	r3, [r3, #20]
 8004450:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004454:	9304      	str	r3, [sp, #16]
 8004456:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004458:	240c      	movs	r4, #12
 800445a:	2302      	movs	r3, #2
 800445c:	e9cd 4307 	strd	r4, r3, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004460:	f04f 0c03 	mov.w	ip, #3
 8004464:	2307      	movs	r3, #7
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004466:	a907      	add	r1, sp, #28
 8004468:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800446c:	e9cd c30a 	strd	ip, r3, [sp, #40]	@ 0x28
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8004470:	4c20      	ldr	r4, [pc, #128]	@ (80044f4 <HAL_UART_MspInit+0x150>)
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004472:	f001 f885 	bl	8005580 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8004476:	4b20      	ldr	r3, [pc, #128]	@ (80044f8 <HAL_UART_MspInit+0x154>)
 8004478:	e7c3      	b.n	8004402 <HAL_UART_MspInit+0x5e>
  else if(huart->Instance==USART3)
 800447a:	4a20      	ldr	r2, [pc, #128]	@ (80044fc <HAL_UART_MspInit+0x158>)
 800447c:	4293      	cmp	r3, r2
 800447e:	d1d3      	bne.n	8004428 <HAL_UART_MspInit+0x84>
    __HAL_RCC_USART3_CLK_ENABLE();
 8004480:	4b18      	ldr	r3, [pc, #96]	@ (80044e4 <HAL_UART_MspInit+0x140>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004482:	481f      	ldr	r0, [pc, #124]	@ (8004500 <HAL_UART_MspInit+0x15c>)
    __HAL_RCC_USART3_CLK_ENABLE();
 8004484:	69da      	ldr	r2, [r3, #28]
    hdma_usart3_rx.Instance = DMA1_Channel3;
 8004486:	4c1f      	ldr	r4, [pc, #124]	@ (8004504 <HAL_UART_MspInit+0x160>)
    __HAL_RCC_USART3_CLK_ENABLE();
 8004488:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800448c:	61da      	str	r2, [r3, #28]
 800448e:	69da      	ldr	r2, [r3, #28]
 8004490:	f402 2280 	and.w	r2, r2, #262144	@ 0x40000
 8004494:	9205      	str	r2, [sp, #20]
 8004496:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004498:	695a      	ldr	r2, [r3, #20]
 800449a:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800449e:	615a      	str	r2, [r3, #20]
 80044a0:	695b      	ldr	r3, [r3, #20]
 80044a2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80044a6:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044a8:	f44f 6240 	mov.w	r2, #3072	@ 0xc00
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80044ac:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044ae:	2302      	movs	r3, #2
 80044b0:	e9cd 2307 	strd	r2, r3, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80044b4:	2103      	movs	r1, #3
 80044b6:	2307      	movs	r3, #7
 80044b8:	e9cd 130a 	strd	r1, r3, [sp, #40]	@ 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80044bc:	a907      	add	r1, sp, #28
 80044be:	f001 f85f 	bl	8005580 <HAL_GPIO_Init>
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80044c2:	4811      	ldr	r0, [pc, #68]	@ (8004508 <HAL_UART_MspInit+0x164>)
 80044c4:	2300      	movs	r3, #0
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80044c6:	2280      	movs	r2, #128	@ 0x80
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80044c8:	e9c4 0300 	strd	r0, r3, [r4]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80044cc:	e9c4 2303 	strd	r2, r3, [r4, #12]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80044d0:	60a3      	str	r3, [r4, #8]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80044d2:	6163      	str	r3, [r4, #20]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 80044d4:	2320      	movs	r3, #32
 80044d6:	61a3      	str	r3, [r4, #24]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80044d8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80044dc:	e79b      	b.n	8004416 <HAL_UART_MspInit+0x72>
 80044de:	bf00      	nop
 80044e0:	40013800 	.word	0x40013800
 80044e4:	40021000 	.word	0x40021000
 80044e8:	20001270 	.word	0x20001270
 80044ec:	40020058 	.word	0x40020058
 80044f0:	40004400 	.word	0x40004400
 80044f4:	2000122c 	.word	0x2000122c
 80044f8:	4002006c 	.word	0x4002006c
 80044fc:	40004800 	.word	0x40004800
 8004500:	48000400 	.word	0x48000400
 8004504:	200011e8 	.word	0x200011e8
 8004508:	40020030 	.word	0x40020030

0800450c <HAL_InitTick>:
  uint32_t              uwPrescalerValue = 0U;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 800450c:	4b21      	ldr	r3, [pc, #132]	@ (8004594 <HAL_InitTick+0x88>)
{
 800450e:	b570      	push	{r4, r5, r6, lr}
  __HAL_RCC_TIM2_CLK_ENABLE();
 8004510:	69da      	ldr	r2, [r3, #28]
 8004512:	f042 0201 	orr.w	r2, r2, #1
 8004516:	61da      	str	r2, [r3, #28]
 8004518:	69db      	ldr	r3, [r3, #28]
{
 800451a:	b088      	sub	sp, #32
  __HAL_RCC_TIM2_CLK_ENABLE();
 800451c:	f003 0301 	and.w	r3, r3, #1
 8004520:	9302      	str	r3, [sp, #8]
{
 8004522:	4605      	mov	r5, r0
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8004524:	a901      	add	r1, sp, #4
 8004526:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM2_CLK_ENABLE();
 8004528:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800452a:	f001 fc53 	bl	8005dd4 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800452e:	9b06      	ldr	r3, [sp, #24]
 8004530:	bb53      	cbnz	r3, 8004588 <HAL_InitTick+0x7c>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8004532:	f001 fc1f 	bl	8005d74 <HAL_RCC_GetPCLK1Freq>

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8004536:	4e18      	ldr	r6, [pc, #96]	@ (8004598 <HAL_InitTick+0x8c>)
 8004538:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800453c:	6033      	str	r3, [r6, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 800453e:	f240 33e7 	movw	r3, #999	@ 0x3e7
 8004542:	60f3      	str	r3, [r6, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8004544:	4b15      	ldr	r3, [pc, #84]	@ (800459c <HAL_InitTick+0x90>)
 8004546:	fbb0 f3f3 	udiv	r3, r0, r3
 800454a:	3b01      	subs	r3, #1
  htim2.Init.Prescaler = uwPrescalerValue;
 800454c:	6073      	str	r3, [r6, #4]
  htim2.Init.ClockDivision = 0;
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;

  status = HAL_TIM_Base_Init(&htim2);
 800454e:	4630      	mov	r0, r6
  htim2.Init.ClockDivision = 0;
 8004550:	2300      	movs	r3, #0
 8004552:	6133      	str	r3, [r6, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004554:	60b3      	str	r3, [r6, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004556:	61b3      	str	r3, [r6, #24]
  status = HAL_TIM_Base_Init(&htim2);
 8004558:	f002 fc4e 	bl	8006df8 <HAL_TIM_Base_Init>
  if (status == HAL_OK)
 800455c:	4604      	mov	r4, r0
 800455e:	b980      	cbnz	r0, 8004582 <HAL_InitTick+0x76>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 8004560:	4630      	mov	r0, r6
 8004562:	f002 fb0b 	bl	8006b7c <HAL_TIM_Base_Start_IT>
    if (status == HAL_OK)
 8004566:	4604      	mov	r4, r0
 8004568:	b958      	cbnz	r0, 8004582 <HAL_InitTick+0x76>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800456a:	201c      	movs	r0, #28
 800456c:	f000 ff16 	bl	800539c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004570:	2d0f      	cmp	r5, #15
 8004572:	d80d      	bhi.n	8004590 <HAL_InitTick+0x84>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 8004574:	4622      	mov	r2, r4
 8004576:	4629      	mov	r1, r5
 8004578:	201c      	movs	r0, #28
 800457a:	f000 fedd 	bl	8005338 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800457e:	4b08      	ldr	r3, [pc, #32]	@ (80045a0 <HAL_InitTick+0x94>)
 8004580:	601d      	str	r5, [r3, #0]
    }
  }

 /* Return function status */
  return status;
}
 8004582:	4620      	mov	r0, r4
 8004584:	b008      	add	sp, #32
 8004586:	bd70      	pop	{r4, r5, r6, pc}
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8004588:	f001 fbf4 	bl	8005d74 <HAL_RCC_GetPCLK1Freq>
 800458c:	0040      	lsls	r0, r0, #1
 800458e:	e7d2      	b.n	8004536 <HAL_InitTick+0x2a>
        status = HAL_ERROR;
 8004590:	2401      	movs	r4, #1
 8004592:	e7f6      	b.n	8004582 <HAL_InitTick+0x76>
 8004594:	40021000 	.word	0x40021000
 8004598:	20002870 	.word	0x20002870
 800459c:	000f4240 	.word	0x000f4240
 80045a0:	20000014 	.word	0x20000014

080045a4 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80045a4:	e7fe      	b.n	80045a4 <NMI_Handler>

080045a6 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80045a6:	e7fe      	b.n	80045a6 <HardFault_Handler>

080045a8 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80045a8:	e7fe      	b.n	80045a8 <MemManage_Handler>

080045aa <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80045aa:	e7fe      	b.n	80045aa <BusFault_Handler>

080045ac <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80045ac:	e7fe      	b.n	80045ac <UsageFault_Handler>

080045ae <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80045ae:	4770      	bx	lr

080045b0 <DMA1_Channel3_IRQHandler>:
void DMA1_Channel3_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80045b0:	4801      	ldr	r0, [pc, #4]	@ (80045b8 <DMA1_Channel3_IRQHandler+0x8>)
 80045b2:	f000 bf9d 	b.w	80054f0 <HAL_DMA_IRQHandler>
 80045b6:	bf00      	nop
 80045b8:	200011e8 	.word	0x200011e8

080045bc <DMA1_Channel5_IRQHandler>:
void DMA1_Channel5_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80045bc:	4801      	ldr	r0, [pc, #4]	@ (80045c4 <DMA1_Channel5_IRQHandler+0x8>)
 80045be:	f000 bf97 	b.w	80054f0 <HAL_DMA_IRQHandler>
 80045c2:	bf00      	nop
 80045c4:	20001270 	.word	0x20001270

080045c8 <DMA1_Channel6_IRQHandler>:
void DMA1_Channel6_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80045c8:	4801      	ldr	r0, [pc, #4]	@ (80045d0 <DMA1_Channel6_IRQHandler+0x8>)
 80045ca:	f000 bf91 	b.w	80054f0 <HAL_DMA_IRQHandler>
 80045ce:	bf00      	nop
 80045d0:	2000122c 	.word	0x2000122c

080045d4 <TIM2_IRQHandler>:
void TIM2_IRQHandler(void)
{
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80045d4:	4801      	ldr	r0, [pc, #4]	@ (80045dc <TIM2_IRQHandler+0x8>)
 80045d6:	f002 bb0b 	b.w	8006bf0 <HAL_TIM_IRQHandler>
 80045da:	bf00      	nop
 80045dc:	20002870 	.word	0x20002870

080045e0 <TIM3_IRQHandler>:
void TIM3_IRQHandler(void)
{
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80045e0:	4801      	ldr	r0, [pc, #4]	@ (80045e8 <TIM3_IRQHandler+0x8>)
 80045e2:	f002 bb05 	b.w	8006bf0 <HAL_TIM_IRQHandler>
 80045e6:	bf00      	nop
 80045e8:	2000144c 	.word	0x2000144c

080045ec <ADC3_IRQHandler>:
void ADC3_IRQHandler(void)
{
  /* USER CODE BEGIN ADC3_IRQn 0 */

  /* USER CODE END ADC3_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc3);
 80045ec:	4801      	ldr	r0, [pc, #4]	@ (80045f4 <ADC3_IRQHandler+0x8>)
 80045ee:	f000 baa7 	b.w	8004b40 <HAL_ADC_IRQHandler>
 80045f2:	bf00      	nop
 80045f4:	20001608 	.word	0x20001608

080045f8 <DMA2_Channel1_IRQHandler>:
void DMA2_Channel1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Channel1_IRQn 0 */

  /* USER CODE END DMA2_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 80045f8:	4801      	ldr	r0, [pc, #4]	@ (8004600 <DMA2_Channel1_IRQHandler+0x8>)
 80045fa:	f000 bf79 	b.w	80054f0 <HAL_DMA_IRQHandler>
 80045fe:	bf00      	nop
 8004600:	200015c4 	.word	0x200015c4

08004604 <DMA2_Channel5_IRQHandler>:
void DMA2_Channel5_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Channel5_IRQn 0 */

  /* USER CODE END DMA2_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8004604:	4801      	ldr	r0, [pc, #4]	@ (800460c <DMA2_Channel5_IRQHandler+0x8>)
 8004606:	f000 bf73 	b.w	80054f0 <HAL_DMA_IRQHandler>
 800460a:	bf00      	nop
 800460c:	20001580 	.word	0x20001580

08004610 <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 8004610:	2001      	movs	r0, #1
 8004612:	4770      	bx	lr

08004614 <_kill>:

int _kill(int pid, int sig)
{
 8004614:	b508      	push	{r3, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004616:	f007 fa6b 	bl	800baf0 <__errno>
 800461a:	2316      	movs	r3, #22
 800461c:	6003      	str	r3, [r0, #0]
  return -1;
}
 800461e:	f04f 30ff 	mov.w	r0, #4294967295
 8004622:	bd08      	pop	{r3, pc}

08004624 <_exit>:

void _exit (int status)
{
 8004624:	b508      	push	{r3, lr}
  errno = EINVAL;
 8004626:	f007 fa63 	bl	800baf0 <__errno>
 800462a:	2316      	movs	r3, #22
 800462c:	6003      	str	r3, [r0, #0]
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
 800462e:	e7fe      	b.n	800462e <_exit+0xa>

08004630 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004630:	b570      	push	{r4, r5, r6, lr}
 8004632:	460d      	mov	r5, r1
 8004634:	4614      	mov	r4, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004636:	460e      	mov	r6, r1
 8004638:	1b73      	subs	r3, r6, r5
 800463a:	429c      	cmp	r4, r3
 800463c:	dc01      	bgt.n	8004642 <_read+0x12>
  {
    *ptr++ = __io_getchar();
  }

  return len;
}
 800463e:	4620      	mov	r0, r4
 8004640:	bd70      	pop	{r4, r5, r6, pc}
    *ptr++ = __io_getchar();
 8004642:	f3af 8000 	nop.w
 8004646:	f806 0b01 	strb.w	r0, [r6], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800464a:	e7f5      	b.n	8004638 <_read+0x8>

0800464c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800464c:	b570      	push	{r4, r5, r6, lr}
 800464e:	460d      	mov	r5, r1
 8004650:	4614      	mov	r4, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004652:	460e      	mov	r6, r1
 8004654:	1b73      	subs	r3, r6, r5
 8004656:	429c      	cmp	r4, r3
 8004658:	dc01      	bgt.n	800465e <_write+0x12>
  {
    __io_putchar(*ptr++);
  }
  return len;
}
 800465a:	4620      	mov	r0, r4
 800465c:	bd70      	pop	{r4, r5, r6, pc}
    __io_putchar(*ptr++);
 800465e:	f816 0b01 	ldrb.w	r0, [r6], #1
 8004662:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004666:	e7f5      	b.n	8004654 <_write+0x8>

08004668 <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 8004668:	f04f 30ff 	mov.w	r0, #4294967295
 800466c:	4770      	bx	lr

0800466e <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 800466e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004672:	604b      	str	r3, [r1, #4]
  return 0;
}
 8004674:	2000      	movs	r0, #0
 8004676:	4770      	bx	lr

08004678 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 8004678:	2001      	movs	r0, #1
 800467a:	4770      	bx	lr

0800467c <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 800467c:	2000      	movs	r0, #0
 800467e:	4770      	bx	lr

08004680 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004680:	4a0b      	ldr	r2, [pc, #44]	@ (80046b0 <_sbrk+0x30>)
 8004682:	6811      	ldr	r1, [r2, #0]
{
 8004684:	b510      	push	{r4, lr}
 8004686:	4603      	mov	r3, r0
  if (NULL == __sbrk_heap_end)
 8004688:	b909      	cbnz	r1, 800468e <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 800468a:	490a      	ldr	r1, [pc, #40]	@ (80046b4 <_sbrk+0x34>)
 800468c:	6011      	str	r1, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800468e:	6810      	ldr	r0, [r2, #0]
 8004690:	4909      	ldr	r1, [pc, #36]	@ (80046b8 <_sbrk+0x38>)
 8004692:	4c0a      	ldr	r4, [pc, #40]	@ (80046bc <_sbrk+0x3c>)
 8004694:	4403      	add	r3, r0
 8004696:	1b09      	subs	r1, r1, r4
 8004698:	428b      	cmp	r3, r1
 800469a:	d906      	bls.n	80046aa <_sbrk+0x2a>
  {
    errno = ENOMEM;
 800469c:	f007 fa28 	bl	800baf0 <__errno>
 80046a0:	230c      	movs	r3, #12
 80046a2:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 80046a4:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 80046a8:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 80046aa:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 80046ac:	e7fc      	b.n	80046a8 <_sbrk+0x28>
 80046ae:	bf00      	nop
 80046b0:	200028c0 	.word	0x200028c0
 80046b4:	20008d58 	.word	0x20008d58
 80046b8:	2000a000 	.word	0x2000a000
 80046bc:	00000400 	.word	0x00000400

080046c0 <uart_transmit_string>:
#include "system_management.h"
#include <stdio.h>
#include <stdarg.h>
#include <string.h>

void uart_transmit_string(UART_HandleTypeDef *huart, uint8_t *string) {
 80046c0:	b570      	push	{r4, r5, r6, lr}
 80046c2:	4605      	mov	r5, r0
    HAL_UART_Transmit(huart, string, strlen((char *)string), 1000);
 80046c4:	4608      	mov	r0, r1
void uart_transmit_string(UART_HandleTypeDef *huart, uint8_t *string) {
 80046c6:	460c      	mov	r4, r1
    HAL_UART_Transmit(huart, string, strlen((char *)string), 1000);
 80046c8:	f7fb fde2 	bl	8000290 <strlen>
 80046cc:	4621      	mov	r1, r4
 80046ce:	b282      	uxth	r2, r0
 80046d0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80046d4:	4628      	mov	r0, r5
}
 80046d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UART_Transmit(huart, string, strlen((char *)string), 1000);
 80046da:	f002 bf3b 	b.w	8007554 <HAL_UART_Transmit>
	...

080046e0 <Debug_printf>:


void Debug_printf(const char *format, ...) {
 80046e0:	b40f      	push	{r0, r1, r2, r3}
 80046e2:	b500      	push	{lr}
 80046e4:	b0c3      	sub	sp, #268	@ 0x10c
 80046e6:	ab44      	add	r3, sp, #272	@ 0x110

    // Start processing the variadic arguments
    va_start(args, format);

    // Format the string
    vsnprintf(output_buffer, sizeof(output_buffer), format, args);
 80046e8:	f44f 7180 	mov.w	r1, #256	@ 0x100
void Debug_printf(const char *format, ...) {
 80046ec:	f853 2b04 	ldr.w	r2, [r3], #4
    va_start(args, format);
 80046f0:	9301      	str	r3, [sp, #4]
    vsnprintf(output_buffer, sizeof(output_buffer), format, args);
 80046f2:	a802      	add	r0, sp, #8
 80046f4:	f006 fbcc 	bl	800ae90 <vsniprintf>

    // End processing the arguments
    va_end(args);

    // Transmit the formatted string over UART
    uart_transmit_string(&huart1,(uint8_t*) output_buffer);
 80046f8:	4804      	ldr	r0, [pc, #16]	@ (800470c <Debug_printf+0x2c>)
 80046fa:	a902      	add	r1, sp, #8
 80046fc:	f7ff ffe0 	bl	80046c0 <uart_transmit_string>
}
 8004700:	b043      	add	sp, #268	@ 0x10c
 8004702:	f85d eb04 	ldr.w	lr, [sp], #4
 8004706:	b004      	add	sp, #16
 8004708:	4770      	bx	lr
 800470a:	bf00      	nop
 800470c:	200013c4 	.word	0x200013c4

08004710 <SystemInit>:
  */
void SystemInit(void)
{
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004710:	4a03      	ldr	r2, [pc, #12]	@ (8004720 <SystemInit+0x10>)
 8004712:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8004716:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800471a:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800471e:	4770      	bx	lr
 8004720:	e000ed00 	.word	0xe000ed00

08004724 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8004724:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800475c <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8004728:	f7ff fff2 	bl	8004710 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800472c:	480c      	ldr	r0, [pc, #48]	@ (8004760 <LoopForever+0x6>)
  ldr r1, =_edata
 800472e:	490d      	ldr	r1, [pc, #52]	@ (8004764 <LoopForever+0xa>)
  ldr r2, =_sidata
 8004730:	4a0d      	ldr	r2, [pc, #52]	@ (8004768 <LoopForever+0xe>)
  movs r3, #0
 8004732:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004734:	e002      	b.n	800473c <LoopCopyDataInit>

08004736 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004736:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004738:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800473a:	3304      	adds	r3, #4

0800473c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800473c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800473e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004740:	d3f9      	bcc.n	8004736 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004742:	4a0a      	ldr	r2, [pc, #40]	@ (800476c <LoopForever+0x12>)
  ldr r4, =_ebss
 8004744:	4c0a      	ldr	r4, [pc, #40]	@ (8004770 <LoopForever+0x16>)
  movs r3, #0
 8004746:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004748:	e001      	b.n	800474e <LoopFillZerobss>

0800474a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800474a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800474c:	3204      	adds	r2, #4

0800474e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800474e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004750:	d3fb      	bcc.n	800474a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004752:	f007 f9d3 	bl	800bafc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8004756:	f7fe fba1 	bl	8002e9c <main>

0800475a <LoopForever>:

LoopForever:
    b LoopForever
 800475a:	e7fe      	b.n	800475a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800475c:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8004760:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004764:	20000248 	.word	0x20000248
  ldr r2, =_sidata
 8004768:	080108a0 	.word	0x080108a0
  ldr r2, =_sbss
 800476c:	20000248 	.word	0x20000248
  ldr r4, =_ebss
 8004770:	20008d54 	.word	0x20008d54

08004774 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004774:	e7fe      	b.n	8004774 <ADC1_2_IRQHandler>

08004776 <__cxa_guard_abort.part.0>:

/**
  * @brief Acquire STM32 lock
  * @param lock The lock to acquire
  */
static inline void stm32_lock_acquire(LockingData_t *lock)
 8004776:	b508      	push	{r3, lr}
  __ASM volatile ("cpsid i" : : : "memory");
 8004778:	b672      	cpsid	i
{
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 800477a:	f7fe fdf8 	bl	800336e <Error_Handler>
 800477e:	e7fe      	b.n	800477e <__cxa_guard_abort.part.0+0x8>

08004780 <stm32_lock_acquire>:
{
 8004780:	b508      	push	{r3, lr}
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 8004782:	7a03      	ldrb	r3, [r0, #8]
 8004784:	2b01      	cmp	r3, #1
 8004786:	d903      	bls.n	8004790 <stm32_lock_acquire+0x10>
 8004788:	b672      	cpsid	i
 800478a:	f7fe fdf0 	bl	800336e <Error_Handler>
 800478e:	e7fe      	b.n	800478e <stm32_lock_acquire+0xe>
  lock->basepri[lock->nesting_level++] = taskENTER_CRITICAL_FROM_ISR();
 8004790:	1c5a      	adds	r2, r3, #1
 8004792:	7202      	strb	r2, [r0, #8]

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004794:	f3ef 8211 	mrs	r2, BASEPRI
 8004798:	f04f 0150 	mov.w	r1, #80	@ 0x50
 800479c:	f381 8811 	msr	BASEPRI, r1
 80047a0:	f3bf 8f6f 	isb	sy
 80047a4:	f3bf 8f4f 	dsb	sy
 80047a8:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 80047ac:	bd08      	pop	{r3, pc}

080047ae <stm32_lock_release>:
/**
  * @brief Release STM32 lock
  * @param lock The lock to release
  */
static inline void stm32_lock_release(LockingData_t *lock)
{
 80047ae:	b508      	push	{r3, lr}
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
  lock->nesting_level--;
 80047b0:	7a03      	ldrb	r3, [r0, #8]
 80047b2:	3b01      	subs	r3, #1
 80047b4:	b2db      	uxtb	r3, r3
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 80047b6:	2b01      	cmp	r3, #1
  lock->nesting_level--;
 80047b8:	7203      	strb	r3, [r0, #8]
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 80047ba:	d903      	bls.n	80047c4 <stm32_lock_release+0x16>
 80047bc:	b672      	cpsid	i
 80047be:	f7fe fdd6 	bl	800336e <Error_Handler>
 80047c2:	e7fe      	b.n	80047c2 <stm32_lock_release+0x14>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80047c4:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80047c8:	f383 8811 	msr	BASEPRI, r3
  taskEXIT_CRITICAL_FROM_ISR(lock->basepri[lock->nesting_level]);
}
 80047cc:	bd08      	pop	{r3, pc}

080047ce <__retarget_lock_init_recursive>:
/**
  * @brief Initialize recursive lock
  * @param lock The lock
  */
void __retarget_lock_init_recursive(_LOCK_T *lock)
{
 80047ce:	b510      	push	{r4, lr}
  if (lock == NULL)
 80047d0:	4604      	mov	r4, r0
 80047d2:	b920      	cbnz	r0, 80047de <__retarget_lock_init_recursive+0x10>
  {
    errno = EINVAL;
 80047d4:	f007 f98c 	bl	800baf0 <__errno>
 80047d8:	2316      	movs	r3, #22
 80047da:	6003      	str	r3, [r0, #0]
    return;
  }

  /* Unable to allocate memory */
  STM32_LOCK_BLOCK();
}
 80047dc:	bd10      	pop	{r4, pc}
  *lock = (_LOCK_T)malloc(sizeof(struct __lock));
 80047de:	200c      	movs	r0, #12
 80047e0:	f004 fbec 	bl	8008fbc <malloc>
 80047e4:	6020      	str	r0, [r4, #0]
  if (*lock != NULL)
 80047e6:	b120      	cbz	r0, 80047f2 <__retarget_lock_init_recursive+0x24>
    lock->basepri[i] = 0;
 80047e8:	2300      	movs	r3, #0
 80047ea:	e9c0 3300 	strd	r3, r3, [r0]
  lock->nesting_level = 0;
 80047ee:	7203      	strb	r3, [r0, #8]
}
 80047f0:	e7f4      	b.n	80047dc <__retarget_lock_init_recursive+0xe>
 80047f2:	f7ff ffc0 	bl	8004776 <__cxa_guard_abort.part.0>

080047f6 <__retarget_lock_acquire>:
/**
  * @brief Acquire lock
  * @param lock The lock
  */
void __retarget_lock_acquire(_LOCK_T lock)
{
 80047f6:	b508      	push	{r3, lr}
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 80047f8:	b908      	cbnz	r0, 80047fe <__retarget_lock_acquire+0x8>
 80047fa:	f7ff ffbc 	bl	8004776 <__cxa_guard_abort.part.0>
  stm32_lock_acquire(STM32_LOCK_PARAMETER(lock));
}
 80047fe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  stm32_lock_acquire(STM32_LOCK_PARAMETER(lock));
 8004802:	f7ff bfbd 	b.w	8004780 <stm32_lock_acquire>

08004806 <__retarget_lock_acquire_recursive>:
#define __lock_close(lock) __retarget_lock_close(lock)
extern void __retarget_lock_close_recursive(_LOCK_T lock);
#define __lock_close_recursive(lock) __retarget_lock_close_recursive(lock)
extern void __retarget_lock_acquire(_LOCK_T lock);
#define __lock_acquire(lock) __retarget_lock_acquire(lock)
extern void __retarget_lock_acquire_recursive(_LOCK_T lock);
 8004806:	f7ff bff6 	b.w	80047f6 <__retarget_lock_acquire>

0800480a <__retarget_lock_release>:
/**
  * @brief Release lock
  * @param lock The lock
  */
void __retarget_lock_release(_LOCK_T lock)
{
 800480a:	b508      	push	{r3, lr}
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 800480c:	b918      	cbnz	r0, 8004816 <__retarget_lock_release+0xc>
 800480e:	b672      	cpsid	i
 8004810:	f7fe fdad 	bl	800336e <Error_Handler>
 8004814:	e7fe      	b.n	8004814 <__retarget_lock_release+0xa>
  stm32_lock_release(STM32_LOCK_PARAMETER(lock));
}
 8004816:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  stm32_lock_release(STM32_LOCK_PARAMETER(lock));
 800481a:	f7ff bfc8 	b.w	80047ae <stm32_lock_release>

0800481e <__retarget_lock_release_recursive>:
extern int __retarget_lock_try_acquire_recursive(_LOCK_T lock);
#define __lock_try_acquire_recursive(lock) \
  __retarget_lock_try_acquire_recursive(lock)
extern void __retarget_lock_release(_LOCK_T lock);
#define __lock_release(lock) __retarget_lock_release(lock)
extern void __retarget_lock_release_recursive(_LOCK_T lock);
 800481e:	f7ff bff4 	b.w	800480a <__retarget_lock_release>
	...

08004824 <HAL_Init>:
  */
HAL_StatusTypeDef HAL_Init(void)
{
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004824:	4a07      	ldr	r2, [pc, #28]	@ (8004844 <HAL_Init+0x20>)
{
 8004826:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004828:	6813      	ldr	r3, [r2, #0]
 800482a:	f043 0310 	orr.w	r3, r3, #16
 800482e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004830:	2003      	movs	r0, #3
 8004832:	f000 fd6f 	bl	8005314 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004836:	200f      	movs	r0, #15
 8004838:	f7ff fe68 	bl	800450c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800483c:	f7ff fc7a 	bl	8004134 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8004840:	2000      	movs	r0, #0
 8004842:	bd08      	pop	{r3, pc}
 8004844:	40022000 	.word	0x40022000

08004848 <HAL_IncTick>:
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8004848:	4a03      	ldr	r2, [pc, #12]	@ (8004858 <HAL_IncTick+0x10>)
 800484a:	4b04      	ldr	r3, [pc, #16]	@ (800485c <HAL_IncTick+0x14>)
 800484c:	6811      	ldr	r1, [r2, #0]
 800484e:	781b      	ldrb	r3, [r3, #0]
 8004850:	440b      	add	r3, r1
 8004852:	6013      	str	r3, [r2, #0]
}
 8004854:	4770      	bx	lr
 8004856:	bf00      	nop
 8004858:	200028f4 	.word	0x200028f4
 800485c:	20000010 	.word	0x20000010

08004860 <HAL_GetTick>:
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;  
 8004860:	4b01      	ldr	r3, [pc, #4]	@ (8004868 <HAL_GetTick+0x8>)
 8004862:	6818      	ldr	r0, [r3, #0]
}
 8004864:	4770      	bx	lr
 8004866:	bf00      	nop
 8004868:	200028f4 	.word	0x200028f4

0800486c <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800486c:	b538      	push	{r3, r4, r5, lr}
 800486e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8004870:	f7ff fff6 	bl	8004860 <HAL_GetTick>
  uint32_t wait = Delay;
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004874:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8004876:	bf1c      	itt	ne
 8004878:	4b05      	ldrne	r3, [pc, #20]	@ (8004890 <HAL_Delay+0x24>)
 800487a:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 800487c:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 800487e:	bf18      	it	ne
 8004880:	18e4      	addne	r4, r4, r3
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8004882:	f7ff ffed 	bl	8004860 <HAL_GetTick>
 8004886:	1b43      	subs	r3, r0, r5
 8004888:	42a3      	cmp	r3, r4
 800488a:	d3fa      	bcc.n	8004882 <HAL_Delay+0x16>
  {
  }
}
 800488c:	bd38      	pop	{r3, r4, r5, pc}
 800488e:	bf00      	nop
 8004890:	20000010 	.word	0x20000010

08004894 <HAL_ADC_ConvCpltCallback>:
/**
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
 8004894:	4770      	bx	lr

08004896 <HAL_ADC_LevelOutOfWindowCallback>:
/**
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
 8004896:	4770      	bx	lr

08004898 <HAL_ADC_ErrorCallback>:
  * @brief  ADC error callback in non blocking mode
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
 8004898:	4770      	bx	lr

0800489a <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 800489a:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 800489c:	6803      	ldr	r3, [r0, #0]
 800489e:	689a      	ldr	r2, [r3, #8]
 80048a0:	f002 0203 	and.w	r2, r2, #3
 80048a4:	2a01      	cmp	r2, #1
{
 80048a6:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET )
 80048a8:	d001      	beq.n	80048ae <ADC_Disable+0x14>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80048aa:	2000      	movs	r0, #0
}
 80048ac:	bd38      	pop	{r3, r4, r5, pc}
  if (ADC_IS_ENABLE(hadc) != RESET )
 80048ae:	681a      	ldr	r2, [r3, #0]
 80048b0:	07d1      	lsls	r1, r2, #31
 80048b2:	d5fa      	bpl.n	80048aa <ADC_Disable+0x10>
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80048b4:	689a      	ldr	r2, [r3, #8]
 80048b6:	f002 020d 	and.w	r2, r2, #13
 80048ba:	2a01      	cmp	r2, #1
 80048bc:	d115      	bne.n	80048ea <ADC_Disable+0x50>
      __HAL_ADC_DISABLE(hadc);
 80048be:	689a      	ldr	r2, [r3, #8]
 80048c0:	f042 0202 	orr.w	r2, r2, #2
 80048c4:	609a      	str	r2, [r3, #8]
 80048c6:	2203      	movs	r2, #3
 80048c8:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 80048ca:	f7ff ffc9 	bl	8004860 <HAL_GetTick>
 80048ce:	4605      	mov	r5, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80048d0:	6823      	ldr	r3, [r4, #0]
 80048d2:	689b      	ldr	r3, [r3, #8]
 80048d4:	07db      	lsls	r3, r3, #31
 80048d6:	d5e8      	bpl.n	80048aa <ADC_Disable+0x10>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80048d8:	f7ff ffc2 	bl	8004860 <HAL_GetTick>
 80048dc:	1b40      	subs	r0, r0, r5
 80048de:	2802      	cmp	r0, #2
 80048e0:	d9f6      	bls.n	80048d0 <ADC_Disable+0x36>
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80048e2:	6823      	ldr	r3, [r4, #0]
 80048e4:	689b      	ldr	r3, [r3, #8]
 80048e6:	07da      	lsls	r2, r3, #31
 80048e8:	d5f2      	bpl.n	80048d0 <ADC_Disable+0x36>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80048ea:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80048ec:	f043 0310 	orr.w	r3, r3, #16
 80048f0:	6423      	str	r3, [r4, #64]	@ 0x40
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80048f2:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 80048f4:	f043 0301 	orr.w	r3, r3, #1
 80048f8:	6463      	str	r3, [r4, #68]	@ 0x44
      return HAL_ERROR;
 80048fa:	2001      	movs	r0, #1
 80048fc:	e7d6      	b.n	80048ac <ADC_Disable+0x12>
	...

08004900 <HAL_ADC_Init>:
{
 8004900:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __IO uint32_t wait_loop_index = 0U;
 8004902:	2300      	movs	r3, #0
 8004904:	9301      	str	r3, [sp, #4]
  if(hadc == NULL)
 8004906:	4604      	mov	r4, r0
 8004908:	2800      	cmp	r0, #0
 800490a:	f000 8103 	beq.w	8004b14 <HAL_ADC_Init+0x214>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800490e:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 8004910:	06d5      	lsls	r5, r2, #27
 8004912:	d46a      	bmi.n	80049ea <HAL_ADC_Init+0xea>
    if (hadc->State == HAL_ADC_STATE_RESET)
 8004914:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8004916:	2b00      	cmp	r3, #0
 8004918:	d035      	beq.n	8004986 <HAL_ADC_Init+0x86>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800491a:	2000      	movs	r0, #0
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 800491c:	6823      	ldr	r3, [r4, #0]
 800491e:	689a      	ldr	r2, [r3, #8]
 8004920:	00d2      	lsls	r2, r2, #3
 8004922:	d502      	bpl.n	800492a <HAL_ADC_Init+0x2a>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8004924:	689b      	ldr	r3, [r3, #8]
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8004926:	009d      	lsls	r5, r3, #2
 8004928:	d50a      	bpl.n	8004940 <HAL_ADC_Init+0x40>
      ADC_STATE_CLR_SET(hadc->State,
 800492a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800492c:	f023 0312 	bic.w	r3, r3, #18
 8004930:	f043 0310 	orr.w	r3, r3, #16
 8004934:	6423      	str	r3, [r4, #64]	@ 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004936:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8004938:	f043 0301 	orr.w	r3, r3, #1
 800493c:	6463      	str	r3, [r4, #68]	@ 0x44
      tmp_hal_status = HAL_ERROR;
 800493e:	2001      	movs	r0, #1
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8004940:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004942:	06d9      	lsls	r1, r3, #27
 8004944:	f100 80e0 	bmi.w	8004b08 <HAL_ADC_Init+0x208>
 8004948:	2800      	cmp	r0, #0
 800494a:	f040 80dd 	bne.w	8004b08 <HAL_ADC_Init+0x208>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 800494e:	6823      	ldr	r3, [r4, #0]
 8004950:	689a      	ldr	r2, [r3, #8]
      (tmp_hal_status == HAL_OK)                                &&
 8004952:	0752      	lsls	r2, r2, #29
 8004954:	f100 80d8 	bmi.w	8004b08 <HAL_ADC_Init+0x208>
    ADC_STATE_CLR_SET(hadc->State,
 8004958:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 800495a:	f422 7281 	bic.w	r2, r2, #258	@ 0x102
 800495e:	f042 0202 	orr.w	r2, r2, #2
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004962:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
    ADC_STATE_CLR_SET(hadc->State,
 8004966:	6422      	str	r2, [r4, #64]	@ 0x40
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004968:	4a6b      	ldr	r2, [pc, #428]	@ (8004b18 <HAL_ADC_Init+0x218>)
 800496a:	d042      	beq.n	80049f2 <HAL_ADC_Init+0xf2>
 800496c:	4293      	cmp	r3, r2
 800496e:	d03e      	beq.n	80049ee <HAL_ADC_Init+0xee>
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8004970:	f502 7240 	add.w	r2, r2, #768	@ 0x300
 8004974:	4293      	cmp	r3, r2
 8004976:	4969      	ldr	r1, [pc, #420]	@ (8004b1c <HAL_ADC_Init+0x21c>)
 8004978:	f000 80b3 	beq.w	8004ae2 <HAL_ADC_Init+0x1e2>
 800497c:	428b      	cmp	r3, r1
 800497e:	bf18      	it	ne
 8004980:	2200      	movne	r2, #0
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004982:	4967      	ldr	r1, [pc, #412]	@ (8004b20 <HAL_ADC_Init+0x220>)
 8004984:	e036      	b.n	80049f4 <HAL_ADC_Init+0xf4>
      hadc->InjectionConfig.ContextQueue = 0U;
 8004986:	e9c0 3312 	strd	r3, r3, [r0, #72]	@ 0x48
      ADC_CLEAR_ERRORCODE(hadc);
 800498a:	6443      	str	r3, [r0, #68]	@ 0x44
      hadc->Lock = HAL_UNLOCKED;
 800498c:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_ADC_MspInit(hadc);
 8004990:	f7ff fbee 	bl	8004170 <HAL_ADC_MspInit>
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8004994:	6823      	ldr	r3, [r4, #0]
 8004996:	689b      	ldr	r3, [r3, #8]
 8004998:	00d8      	lsls	r0, r3, #3
 800499a:	d4be      	bmi.n	800491a <HAL_ADC_Init+0x1a>
        tmp_hal_status = ADC_Disable(hadc);
 800499c:	4620      	mov	r0, r4
 800499e:	f7ff ff7c 	bl	800489a <ADC_Disable>
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80049a2:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 80049a4:	06d1      	lsls	r1, r2, #27
 80049a6:	d4b9      	bmi.n	800491c <HAL_ADC_Init+0x1c>
 80049a8:	2800      	cmp	r0, #0
 80049aa:	d1b7      	bne.n	800491c <HAL_ADC_Init+0x1c>
          ADC_STATE_CLR_SET(hadc->State,
 80049ac:	6c23      	ldr	r3, [r4, #64]	@ 0x40
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 80049ae:	6822      	ldr	r2, [r4, #0]
          ADC_STATE_CLR_SET(hadc->State,
 80049b0:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80049b4:	f023 0302 	bic.w	r3, r3, #2
 80049b8:	f043 0302 	orr.w	r3, r3, #2
 80049bc:	6423      	str	r3, [r4, #64]	@ 0x40
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 80049be:	6893      	ldr	r3, [r2, #8]
 80049c0:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
 80049c4:	6093      	str	r3, [r2, #8]
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 80049c6:	6893      	ldr	r3, [r2, #8]
 80049c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80049cc:	6093      	str	r3, [r2, #8]
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80049ce:	4b55      	ldr	r3, [pc, #340]	@ (8004b24 <HAL_ADC_Init+0x224>)
 80049d0:	4a55      	ldr	r2, [pc, #340]	@ (8004b28 <HAL_ADC_Init+0x228>)
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	fbb3 f3f2 	udiv	r3, r3, r2
 80049d8:	220a      	movs	r2, #10
 80049da:	4353      	muls	r3, r2
            wait_loop_index--;
 80049dc:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 80049de:	9b01      	ldr	r3, [sp, #4]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d09a      	beq.n	800491a <HAL_ADC_Init+0x1a>
            wait_loop_index--;
 80049e4:	9b01      	ldr	r3, [sp, #4]
 80049e6:	3b01      	subs	r3, #1
 80049e8:	e7f8      	b.n	80049dc <HAL_ADC_Init+0xdc>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80049ea:	4618      	mov	r0, r3
 80049ec:	e7a8      	b.n	8004940 <HAL_ADC_Init+0x40>
 80049ee:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80049f2:	494e      	ldr	r1, [pc, #312]	@ (8004b2c <HAL_ADC_Init+0x22c>)
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80049f4:	689d      	ldr	r5, [r3, #8]
 80049f6:	f005 0503 	and.w	r5, r5, #3
 80049fa:	2d01      	cmp	r5, #1
 80049fc:	d102      	bne.n	8004a04 <HAL_ADC_Init+0x104>
 80049fe:	681d      	ldr	r5, [r3, #0]
 8004a00:	07ed      	lsls	r5, r5, #31
 8004a02:	d40e      	bmi.n	8004a22 <HAL_ADC_Init+0x122>
 8004a04:	b13a      	cbz	r2, 8004a16 <HAL_ADC_Init+0x116>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8004a06:	6895      	ldr	r5, [r2, #8]
 8004a08:	f005 0503 	and.w	r5, r5, #3
 8004a0c:	2d01      	cmp	r5, #1
 8004a0e:	d102      	bne.n	8004a16 <HAL_ADC_Init+0x116>
 8004a10:	6812      	ldr	r2, [r2, #0]
 8004a12:	07d2      	lsls	r2, r2, #31
 8004a14:	d405      	bmi.n	8004a22 <HAL_ADC_Init+0x122>
      MODIFY_REG(tmpADC_Common->CCR       ,
 8004a16:	688a      	ldr	r2, [r1, #8]
 8004a18:	6865      	ldr	r5, [r4, #4]
 8004a1a:	f422 3240 	bic.w	r2, r2, #196608	@ 0x30000
 8004a1e:	432a      	orrs	r2, r5
 8004a20:	608a      	str	r2, [r1, #8]
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8004a22:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 8004a26:	430a      	orrs	r2, r1
 8004a28:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004a2a:	7e65      	ldrb	r5, [r4, #25]
 8004a2c:	3901      	subs	r1, #1
 8004a2e:	bf18      	it	ne
 8004a30:	2101      	movne	r1, #1
 8004a32:	ea42 3245 	orr.w	r2, r2, r5, lsl #13
 8004a36:	ea42 3201 	orr.w	r2, r2, r1, lsl #12
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004a3a:	f894 1020 	ldrb.w	r1, [r4, #32]
 8004a3e:	2901      	cmp	r1, #1
 8004a40:	d107      	bne.n	8004a52 <HAL_ADC_Init+0x152>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8004a42:	2d00      	cmp	r5, #0
 8004a44:	d14f      	bne.n	8004ae6 <HAL_ADC_Init+0x1e6>
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8004a46:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8004a48:	3901      	subs	r1, #1
 8004a4a:	ea42 4141 	orr.w	r1, r2, r1, lsl #17
 8004a4e:	f441 3280 	orr.w	r2, r1, #65536	@ 0x10000
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004a52:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8004a54:	2901      	cmp	r1, #1
 8004a56:	d015      	beq.n	8004a84 <HAL_ADC_Init+0x184>
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8004a58:	4d35      	ldr	r5, [pc, #212]	@ (8004b30 <HAL_ADC_Init+0x230>)
 8004a5a:	42ab      	cmp	r3, r5
 8004a5c:	d003      	beq.n	8004a66 <HAL_ADC_Init+0x166>
 8004a5e:	f505 7580 	add.w	r5, r5, #256	@ 0x100
 8004a62:	42ab      	cmp	r3, r5
 8004a64:	d10a      	bne.n	8004a7c <HAL_ADC_Init+0x17c>
 8004a66:	f5b1 7f30 	cmp.w	r1, #704	@ 0x2c0
 8004a6a:	d047      	beq.n	8004afc <HAL_ADC_Init+0x1fc>
 8004a6c:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 8004a70:	d047      	beq.n	8004b02 <HAL_ADC_Init+0x202>
 8004a72:	f5b1 7fe0 	cmp.w	r1, #448	@ 0x1c0
 8004a76:	bf08      	it	eq
 8004a78:	f44f 7180 	moveq.w	r1, #256	@ 0x100
 8004a7c:	6ae5      	ldr	r5, [r4, #44]	@ 0x2c
 8004a7e:	4315      	orrs	r5, r2
 8004a80:	ea45 0201 	orr.w	r2, r5, r1
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8004a84:	6899      	ldr	r1, [r3, #8]
 8004a86:	f011 0f0c 	tst.w	r1, #12
 8004a8a:	d10c      	bne.n	8004aa6 <HAL_ADC_Init+0x1a6>
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8004a8c:	68d9      	ldr	r1, [r3, #12]
 8004a8e:	f421 4180 	bic.w	r1, r1, #16384	@ 0x4000
 8004a92:	f021 0102 	bic.w	r1, r1, #2
 8004a96:	60d9      	str	r1, [r3, #12]
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8004a98:	f894 1030 	ldrb.w	r1, [r4, #48]	@ 0x30
 8004a9c:	7e25      	ldrb	r5, [r4, #24]
 8004a9e:	0049      	lsls	r1, r1, #1
 8004aa0:	ea41 3185 	orr.w	r1, r1, r5, lsl #14
 8004aa4:	430a      	orrs	r2, r1
    MODIFY_REG(hadc->Instance->CFGR,
 8004aa6:	68dd      	ldr	r5, [r3, #12]
 8004aa8:	4922      	ldr	r1, [pc, #136]	@ (8004b34 <HAL_ADC_Init+0x234>)
 8004aaa:	4029      	ands	r1, r5
 8004aac:	4311      	orrs	r1, r2
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004aae:	6922      	ldr	r2, [r4, #16]
    MODIFY_REG(hadc->Instance->CFGR,
 8004ab0:	60d9      	str	r1, [r3, #12]
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004ab2:	2a01      	cmp	r2, #1
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8004ab4:	bf05      	ittet	eq
 8004ab6:	6b19      	ldreq	r1, [r3, #48]	@ 0x30
 8004ab8:	69e2      	ldreq	r2, [r4, #28]
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004aba:	6b1a      	ldrne	r2, [r3, #48]	@ 0x30
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8004abc:	f102 32ff 	addeq.w	r2, r2, #4294967295
 8004ac0:	bf06      	itte	eq
 8004ac2:	f021 010f 	biceq.w	r1, r1, #15
 8004ac6:	430a      	orreq	r2, r1
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004ac8:	f022 020f 	bicne.w	r2, r2, #15
 8004acc:	631a      	str	r2, [r3, #48]	@ 0x30
    ADC_CLEAR_ERRORCODE(hadc);
 8004ace:	2300      	movs	r3, #0
 8004ad0:	6463      	str	r3, [r4, #68]	@ 0x44
    ADC_STATE_CLR_SET(hadc->State,
 8004ad2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004ad4:	f023 0303 	bic.w	r3, r3, #3
 8004ad8:	f043 0301 	orr.w	r3, r3, #1
 8004adc:	6423      	str	r3, [r4, #64]	@ 0x40
}
 8004ade:	b003      	add	sp, #12
 8004ae0:	bd30      	pop	{r4, r5, pc}
 8004ae2:	460a      	mov	r2, r1
 8004ae4:	e74d      	b.n	8004982 <HAL_ADC_Init+0x82>
        ADC_STATE_CLR_SET(hadc->State,
 8004ae6:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 8004ae8:	f021 0122 	bic.w	r1, r1, #34	@ 0x22
 8004aec:	f041 0120 	orr.w	r1, r1, #32
 8004af0:	6421      	str	r1, [r4, #64]	@ 0x40
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004af2:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8004af4:	f041 0101 	orr.w	r1, r1, #1
 8004af8:	6461      	str	r1, [r4, #68]	@ 0x44
 8004afa:	e7aa      	b.n	8004a52 <HAL_ADC_Init+0x152>
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8004afc:	f44f 71e0 	mov.w	r1, #448	@ 0x1c0
 8004b00:	e7bc      	b.n	8004a7c <HAL_ADC_Init+0x17c>
 8004b02:	f44f 7130 	mov.w	r1, #704	@ 0x2c0
 8004b06:	e7b9      	b.n	8004a7c <HAL_ADC_Init+0x17c>
    ADC_STATE_CLR_SET(hadc->State,
 8004b08:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004b0a:	f023 0312 	bic.w	r3, r3, #18
 8004b0e:	f043 0310 	orr.w	r3, r3, #16
 8004b12:	6423      	str	r3, [r4, #64]	@ 0x40
    return HAL_ERROR;
 8004b14:	2001      	movs	r0, #1
 8004b16:	e7e2      	b.n	8004ade <HAL_ADC_Init+0x1de>
 8004b18:	50000100 	.word	0x50000100
 8004b1c:	50000500 	.word	0x50000500
 8004b20:	50000700 	.word	0x50000700
 8004b24:	2000000c 	.word	0x2000000c
 8004b28:	000f4240 	.word	0x000f4240
 8004b2c:	50000300 	.word	0x50000300
 8004b30:	50000400 	.word	0x50000400
 8004b34:	fff0c007 	.word	0xfff0c007

08004b38 <HAL_ADCEx_InjectedConvCpltCallback>:
}
 8004b38:	4770      	bx	lr

08004b3a <HAL_ADCEx_InjectedQueueOverflowCallback>:
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef* hadc)
 8004b3a:	4770      	bx	lr

08004b3c <HAL_ADCEx_LevelOutOfWindow2Callback>:
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef* hadc)
 8004b3c:	4770      	bx	lr

08004b3e <HAL_ADCEx_LevelOutOfWindow3Callback>:
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef* hadc)
 8004b3e:	4770      	bx	lr

08004b40 <HAL_ADC_IRQHandler>:
  uint32_t tmp_isr = hadc->Instance->ISR;
 8004b40:	6803      	ldr	r3, [r0, #0]
{
 8004b42:	b570      	push	{r4, r5, r6, lr}
  uint32_t tmp_isr = hadc->Instance->ISR;
 8004b44:	681d      	ldr	r5, [r3, #0]
  uint32_t tmp_ier = hadc->Instance->IER;
 8004b46:	685e      	ldr	r6, [r3, #4]
  if( (((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8004b48:	076a      	lsls	r2, r5, #29
{
 8004b4a:	4604      	mov	r4, r0
  if( (((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8004b4c:	d501      	bpl.n	8004b52 <HAL_ADC_IRQHandler+0x12>
 8004b4e:	0770      	lsls	r0, r6, #29
 8004b50:	d403      	bmi.n	8004b5a <HAL_ADC_IRQHandler+0x1a>
 8004b52:	0729      	lsls	r1, r5, #28
 8004b54:	d543      	bpl.n	8004bde <HAL_ADC_IRQHandler+0x9e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))   )
 8004b56:	0732      	lsls	r2, r6, #28
 8004b58:	d541      	bpl.n	8004bde <HAL_ADC_IRQHandler+0x9e>
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004b5a:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8004b5c:	06d0      	lsls	r0, r2, #27
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8004b5e:	bf5e      	ittt	pl
 8004b60:	6c22      	ldrpl	r2, [r4, #64]	@ 0x40
 8004b62:	f442 7200 	orrpl.w	r2, r2, #512	@ 0x200
 8004b66:	6422      	strpl	r2, [r4, #64]	@ 0x40
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8004b68:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004b6c:	d003      	beq.n	8004b76 <HAL_ADC_IRQHandler+0x36>
 8004b6e:	4a90      	ldr	r2, [pc, #576]	@ (8004db0 <HAL_ADC_IRQHandler+0x270>)
 8004b70:	4293      	cmp	r3, r2
 8004b72:	f040 8105 	bne.w	8004d80 <HAL_ADC_IRQHandler+0x240>
 8004b76:	4a8f      	ldr	r2, [pc, #572]	@ (8004db4 <HAL_ADC_IRQHandler+0x274>)
 8004b78:	6891      	ldr	r1, [r2, #8]
 8004b7a:	06c9      	lsls	r1, r1, #27
 8004b7c:	d00c      	beq.n	8004b98 <HAL_ADC_IRQHandler+0x58>
 8004b7e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004b82:	d003      	beq.n	8004b8c <HAL_ADC_IRQHandler+0x4c>
 8004b84:	498a      	ldr	r1, [pc, #552]	@ (8004db0 <HAL_ADC_IRQHandler+0x270>)
 8004b86:	428b      	cmp	r3, r1
 8004b88:	f040 80ff 	bne.w	8004d8a <HAL_ADC_IRQHandler+0x24a>
 8004b8c:	6892      	ldr	r2, [r2, #8]
 8004b8e:	f002 021f 	and.w	r2, r2, #31
 8004b92:	2a05      	cmp	r2, #5
 8004b94:	f040 8114 	bne.w	8004dc0 <HAL_ADC_IRQHandler+0x280>
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8004b98:	68da      	ldr	r2, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 8004b9a:	68d9      	ldr	r1, [r3, #12]
       (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == RESET)  )
 8004b9c:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 8004ba0:	f401 6140 	and.w	r1, r1, #3072	@ 0xc00
 8004ba4:	4311      	orrs	r1, r2
 8004ba6:	d114      	bne.n	8004bd2 <HAL_ADC_IRQHandler+0x92>
      if((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS)
 8004ba8:	0729      	lsls	r1, r5, #28
 8004baa:	d512      	bpl.n	8004bd2 <HAL_ADC_IRQHandler+0x92>
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8004bac:	689a      	ldr	r2, [r3, #8]
 8004bae:	0752      	lsls	r2, r2, #29
 8004bb0:	f100 8122 	bmi.w	8004df8 <HAL_ADC_IRQHandler+0x2b8>
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8004bb4:	685a      	ldr	r2, [r3, #4]
 8004bb6:	f022 020c 	bic.w	r2, r2, #12
 8004bba:	605a      	str	r2, [r3, #4]
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004bbc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004bbe:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004bc2:	6423      	str	r3, [r4, #64]	@ 0x40
          if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004bc4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004bc6:	04d8      	lsls	r0, r3, #19
 8004bc8:	d403      	bmi.n	8004bd2 <HAL_ADC_IRQHandler+0x92>
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004bca:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004bcc:	f043 0301 	orr.w	r3, r3, #1
 8004bd0:	6423      	str	r3, [r4, #64]	@ 0x40
      HAL_ADC_ConvCpltCallback(hadc);
 8004bd2:	4620      	mov	r0, r4
 8004bd4:	f7ff fe5e 	bl	8004894 <HAL_ADC_ConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 8004bd8:	6823      	ldr	r3, [r4, #0]
 8004bda:	220c      	movs	r2, #12
 8004bdc:	601a      	str	r2, [r3, #0]
  if( (((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8004bde:	06a9      	lsls	r1, r5, #26
 8004be0:	d501      	bpl.n	8004be6 <HAL_ADC_IRQHandler+0xa6>
 8004be2:	06b2      	lsls	r2, r6, #26
 8004be4:	d403      	bmi.n	8004bee <HAL_ADC_IRQHandler+0xae>
 8004be6:	066b      	lsls	r3, r5, #25
 8004be8:	d562      	bpl.n	8004cb0 <HAL_ADC_IRQHandler+0x170>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS))   )
 8004bea:	0670      	lsls	r0, r6, #25
 8004bec:	d560      	bpl.n	8004cb0 <HAL_ADC_IRQHandler+0x170>
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8004bee:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004bf0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8004bf4:	6423      	str	r3, [r4, #64]	@ 0x40
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8004bf6:	6823      	ldr	r3, [r4, #0]
 8004bf8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004bfc:	d003      	beq.n	8004c06 <HAL_ADC_IRQHandler+0xc6>
 8004bfe:	4a6c      	ldr	r2, [pc, #432]	@ (8004db0 <HAL_ADC_IRQHandler+0x270>)
 8004c00:	4293      	cmp	r3, r2
 8004c02:	f040 8102 	bne.w	8004e0a <HAL_ADC_IRQHandler+0x2ca>
 8004c06:	4a6b      	ldr	r2, [pc, #428]	@ (8004db4 <HAL_ADC_IRQHandler+0x274>)
 8004c08:	6891      	ldr	r1, [r2, #8]
 8004c0a:	06c9      	lsls	r1, r1, #27
 8004c0c:	d00c      	beq.n	8004c28 <HAL_ADC_IRQHandler+0xe8>
 8004c0e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004c12:	d003      	beq.n	8004c1c <HAL_ADC_IRQHandler+0xdc>
 8004c14:	4966      	ldr	r1, [pc, #408]	@ (8004db0 <HAL_ADC_IRQHandler+0x270>)
 8004c16:	428b      	cmp	r3, r1
 8004c18:	f040 80fc 	bne.w	8004e14 <HAL_ADC_IRQHandler+0x2d4>
 8004c1c:	6892      	ldr	r2, [r2, #8]
 8004c1e:	f002 021f 	and.w	r2, r2, #31
 8004c22:	2a05      	cmp	r2, #5
 8004c24:	f040 8108 	bne.w	8004e38 <HAL_ADC_IRQHandler+0x2f8>
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8004c28:	68da      	ldr	r2, [r3, #12]
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc))
 8004c2a:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8004c2c:	f011 0fc0 	tst.w	r1, #192	@ 0xc0
 8004c30:	d138      	bne.n	8004ca4 <HAL_ADC_IRQHandler+0x164>
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 8004c32:	0191      	lsls	r1, r2, #6
 8004c34:	d506      	bpl.n	8004c44 <HAL_ADC_IRQHandler+0x104>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 8004c36:	68d9      	ldr	r1, [r3, #12]
          (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )   )
 8004c38:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 8004c3c:	f401 6140 	and.w	r1, r1, #3072	@ 0xc00
 8004c40:	4311      	orrs	r1, r2
 8004c42:	d12f      	bne.n	8004ca4 <HAL_ADC_IRQHandler+0x164>
        if((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS)
 8004c44:	0668      	lsls	r0, r5, #25
 8004c46:	d52d      	bpl.n	8004ca4 <HAL_ADC_IRQHandler+0x164>
          if (ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc))
 8004c48:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004c4c:	d003      	beq.n	8004c56 <HAL_ADC_IRQHandler+0x116>
 8004c4e:	4a58      	ldr	r2, [pc, #352]	@ (8004db0 <HAL_ADC_IRQHandler+0x270>)
 8004c50:	4293      	cmp	r3, r2
 8004c52:	f040 810d 	bne.w	8004e70 <HAL_ADC_IRQHandler+0x330>
 8004c56:	4a57      	ldr	r2, [pc, #348]	@ (8004db4 <HAL_ADC_IRQHandler+0x274>)
 8004c58:	6891      	ldr	r1, [r2, #8]
 8004c5a:	06c9      	lsls	r1, r1, #27
 8004c5c:	d00c      	beq.n	8004c78 <HAL_ADC_IRQHandler+0x138>
 8004c5e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004c62:	d003      	beq.n	8004c6c <HAL_ADC_IRQHandler+0x12c>
 8004c64:	4952      	ldr	r1, [pc, #328]	@ (8004db0 <HAL_ADC_IRQHandler+0x270>)
 8004c66:	428b      	cmp	r3, r1
 8004c68:	f040 8107 	bne.w	8004e7a <HAL_ADC_IRQHandler+0x33a>
 8004c6c:	6892      	ldr	r2, [r2, #8]
 8004c6e:	f002 021f 	and.w	r2, r2, #31
 8004c72:	2a06      	cmp	r2, #6
 8004c74:	f040 8113 	bne.w	8004e9e <HAL_ADC_IRQHandler+0x35e>
            tmp_cfgr_jqm = READ_REG(hadc->Instance->CFGR); 
 8004c78:	68da      	ldr	r2, [r3, #12]
          if(READ_BIT(tmp_cfgr_jqm, ADC_CFGR_JQM) == RESET)
 8004c7a:	0291      	lsls	r1, r2, #10
 8004c7c:	d412      	bmi.n	8004ca4 <HAL_ADC_IRQHandler+0x164>
            if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 8004c7e:	689a      	ldr	r2, [r3, #8]
 8004c80:	0712      	lsls	r2, r2, #28
 8004c82:	f100 8128 	bmi.w	8004ed6 <HAL_ADC_IRQHandler+0x396>
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8004c86:	685a      	ldr	r2, [r3, #4]
 8004c88:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004c8c:	605a      	str	r2, [r3, #4]
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8004c8e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004c90:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004c94:	6423      	str	r3, [r4, #64]	@ 0x40
              if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8004c96:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004c98:	05d8      	lsls	r0, r3, #23
 8004c9a:	d403      	bmi.n	8004ca4 <HAL_ADC_IRQHandler+0x164>
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004c9c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004c9e:	f043 0301 	orr.w	r3, r3, #1
 8004ca2:	6423      	str	r3, [r4, #64]	@ 0x40
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8004ca4:	4620      	mov	r0, r4
 8004ca6:	f7ff ff47 	bl	8004b38 <HAL_ADCEx_InjectedConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8004caa:	6823      	ldr	r3, [r4, #0]
 8004cac:	2260      	movs	r2, #96	@ 0x60
 8004cae:	601a      	str	r2, [r3, #0]
  if(((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8004cb0:	0629      	lsls	r1, r5, #24
 8004cb2:	d50b      	bpl.n	8004ccc <HAL_ADC_IRQHandler+0x18c>
 8004cb4:	0632      	lsls	r2, r6, #24
 8004cb6:	d509      	bpl.n	8004ccc <HAL_ADC_IRQHandler+0x18c>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8004cb8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004cba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004cbe:	6423      	str	r3, [r4, #64]	@ 0x40
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8004cc0:	4620      	mov	r0, r4
 8004cc2:	f7ff fde8 	bl	8004896 <HAL_ADC_LevelOutOfWindowCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8004cc6:	6823      	ldr	r3, [r4, #0]
 8004cc8:	2280      	movs	r2, #128	@ 0x80
 8004cca:	601a      	str	r2, [r3, #0]
  if(((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8004ccc:	05eb      	lsls	r3, r5, #23
 8004cce:	d50c      	bpl.n	8004cea <HAL_ADC_IRQHandler+0x1aa>
 8004cd0:	05f0      	lsls	r0, r6, #23
 8004cd2:	d50a      	bpl.n	8004cea <HAL_ADC_IRQHandler+0x1aa>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8004cd4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004cd6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004cda:	6423      	str	r3, [r4, #64]	@ 0x40
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8004cdc:	4620      	mov	r0, r4
 8004cde:	f7ff ff2d 	bl	8004b3c <HAL_ADCEx_LevelOutOfWindow2Callback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8004ce2:	6823      	ldr	r3, [r4, #0]
 8004ce4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004ce8:	601a      	str	r2, [r3, #0]
  if(((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8004cea:	05a9      	lsls	r1, r5, #22
 8004cec:	d50c      	bpl.n	8004d08 <HAL_ADC_IRQHandler+0x1c8>
 8004cee:	05b2      	lsls	r2, r6, #22
 8004cf0:	d50a      	bpl.n	8004d08 <HAL_ADC_IRQHandler+0x1c8>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8004cf2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004cf4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004cf8:	6423      	str	r3, [r4, #64]	@ 0x40
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8004cfa:	4620      	mov	r0, r4
 8004cfc:	f7ff ff1f 	bl	8004b3e <HAL_ADCEx_LevelOutOfWindow3Callback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8004d00:	6823      	ldr	r3, [r4, #0]
 8004d02:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004d06:	601a      	str	r2, [r3, #0]
  if(((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8004d08:	06eb      	lsls	r3, r5, #27
 8004d0a:	d525      	bpl.n	8004d58 <HAL_ADC_IRQHandler+0x218>
 8004d0c:	06f0      	lsls	r0, r6, #27
 8004d0e:	d523      	bpl.n	8004d58 <HAL_ADC_IRQHandler+0x218>
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8004d10:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004d12:	2b01      	cmp	r3, #1
 8004d14:	d012      	beq.n	8004d3c <HAL_ADC_IRQHandler+0x1fc>
      tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004d16:	6822      	ldr	r2, [r4, #0]
 8004d18:	f1b2 4fa0 	cmp.w	r2, #1342177280	@ 0x50000000
 8004d1c:	f000 80e4 	beq.w	8004ee8 <HAL_ADC_IRQHandler+0x3a8>
 8004d20:	4823      	ldr	r0, [pc, #140]	@ (8004db0 <HAL_ADC_IRQHandler+0x270>)
 8004d22:	4b25      	ldr	r3, [pc, #148]	@ (8004db8 <HAL_ADC_IRQHandler+0x278>)
 8004d24:	4923      	ldr	r1, [pc, #140]	@ (8004db4 <HAL_ADC_IRQHandler+0x274>)
 8004d26:	4282      	cmp	r2, r0
 8004d28:	bf08      	it	eq
 8004d2a:	460b      	moveq	r3, r1
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8004d2c:	6899      	ldr	r1, [r3, #8]
 8004d2e:	06c9      	lsls	r1, r1, #27
 8004d30:	f040 80dc 	bne.w	8004eec <HAL_ADC_IRQHandler+0x3ac>
        if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8004d34:	68d3      	ldr	r3, [r2, #12]
 8004d36:	f013 0f01 	tst.w	r3, #1
        if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 8004d3a:	d00a      	beq.n	8004d52 <HAL_ADC_IRQHandler+0x212>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8004d3c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004d3e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004d42:	6423      	str	r3, [r4, #64]	@ 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8004d44:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8004d46:	f043 0302 	orr.w	r3, r3, #2
 8004d4a:	6463      	str	r3, [r4, #68]	@ 0x44
      HAL_ADC_ErrorCallback(hadc);
 8004d4c:	4620      	mov	r0, r4
 8004d4e:	f7ff fda3 	bl	8004898 <HAL_ADC_ErrorCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8004d52:	6823      	ldr	r3, [r4, #0]
 8004d54:	2210      	movs	r2, #16
 8004d56:	601a      	str	r2, [r3, #0]
  if(((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8004d58:	056a      	lsls	r2, r5, #21
 8004d5a:	d510      	bpl.n	8004d7e <HAL_ADC_IRQHandler+0x23e>
 8004d5c:	0573      	lsls	r3, r6, #21
 8004d5e:	d50e      	bpl.n	8004d7e <HAL_ADC_IRQHandler+0x23e>
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8004d60:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004d62:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004d66:	6423      	str	r3, [r4, #64]	@ 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8004d68:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8004d6a:	f043 0308 	orr.w	r3, r3, #8
 8004d6e:	6463      	str	r3, [r4, #68]	@ 0x44
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8004d70:	6823      	ldr	r3, [r4, #0]
 8004d72:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004d76:	601a      	str	r2, [r3, #0]
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8004d78:	4620      	mov	r0, r4
 8004d7a:	f7ff fede 	bl	8004b3a <HAL_ADCEx_InjectedQueueOverflowCallback>
}
 8004d7e:	bd70      	pop	{r4, r5, r6, pc}
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8004d80:	4a0d      	ldr	r2, [pc, #52]	@ (8004db8 <HAL_ADC_IRQHandler+0x278>)
 8004d82:	6892      	ldr	r2, [r2, #8]
 8004d84:	06d0      	lsls	r0, r2, #27
 8004d86:	f43f af07 	beq.w	8004b98 <HAL_ADC_IRQHandler+0x58>
 8004d8a:	4a0b      	ldr	r2, [pc, #44]	@ (8004db8 <HAL_ADC_IRQHandler+0x278>)
 8004d8c:	6892      	ldr	r2, [r2, #8]
 8004d8e:	f002 021f 	and.w	r2, r2, #31
 8004d92:	2a05      	cmp	r2, #5
 8004d94:	f43f af00 	beq.w	8004b98 <HAL_ADC_IRQHandler+0x58>
 8004d98:	4a07      	ldr	r2, [pc, #28]	@ (8004db8 <HAL_ADC_IRQHandler+0x278>)
 8004d9a:	6892      	ldr	r2, [r2, #8]
 8004d9c:	f002 021f 	and.w	r2, r2, #31
 8004da0:	2a09      	cmp	r2, #9
 8004da2:	f43f aef9 	beq.w	8004b98 <HAL_ADC_IRQHandler+0x58>
 8004da6:	4a05      	ldr	r2, [pc, #20]	@ (8004dbc <HAL_ADC_IRQHandler+0x27c>)
 8004da8:	4293      	cmp	r3, r2
 8004daa:	d123      	bne.n	8004df4 <HAL_ADC_IRQHandler+0x2b4>
 8004dac:	e6f4      	b.n	8004b98 <HAL_ADC_IRQHandler+0x58>
 8004dae:	bf00      	nop
 8004db0:	50000100 	.word	0x50000100
 8004db4:	50000300 	.word	0x50000300
 8004db8:	50000700 	.word	0x50000700
 8004dbc:	50000400 	.word	0x50000400
 8004dc0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004dc4:	d002      	beq.n	8004dcc <HAL_ADC_IRQHandler+0x28c>
 8004dc6:	4a4b      	ldr	r2, [pc, #300]	@ (8004ef4 <HAL_ADC_IRQHandler+0x3b4>)
 8004dc8:	4293      	cmp	r3, r2
 8004dca:	d1e5      	bne.n	8004d98 <HAL_ADC_IRQHandler+0x258>
 8004dcc:	4a4a      	ldr	r2, [pc, #296]	@ (8004ef8 <HAL_ADC_IRQHandler+0x3b8>)
 8004dce:	6892      	ldr	r2, [r2, #8]
 8004dd0:	f002 021f 	and.w	r2, r2, #31
 8004dd4:	2a09      	cmp	r2, #9
 8004dd6:	f43f aedf 	beq.w	8004b98 <HAL_ADC_IRQHandler+0x58>
 8004dda:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004dde:	f43f aedb 	beq.w	8004b98 <HAL_ADC_IRQHandler+0x58>
 8004de2:	4a46      	ldr	r2, [pc, #280]	@ (8004efc <HAL_ADC_IRQHandler+0x3bc>)
 8004de4:	4293      	cmp	r3, r2
 8004de6:	f43f aed7 	beq.w	8004b98 <HAL_ADC_IRQHandler+0x58>
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8004dea:	4942      	ldr	r1, [pc, #264]	@ (8004ef4 <HAL_ADC_IRQHandler+0x3b4>)
 8004dec:	428b      	cmp	r3, r1
 8004dee:	bf08      	it	eq
 8004df0:	f04f 42a0 	moveq.w	r2, #1342177280	@ 0x50000000
 8004df4:	68d2      	ldr	r2, [r2, #12]
 8004df6:	e6d0      	b.n	8004b9a <HAL_ADC_IRQHandler+0x5a>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004df8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004dfa:	f043 0310 	orr.w	r3, r3, #16
 8004dfe:	6423      	str	r3, [r4, #64]	@ 0x40
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004e00:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8004e02:	f043 0301 	orr.w	r3, r3, #1
 8004e06:	6463      	str	r3, [r4, #68]	@ 0x44
 8004e08:	e6e3      	b.n	8004bd2 <HAL_ADC_IRQHandler+0x92>
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8004e0a:	4a3d      	ldr	r2, [pc, #244]	@ (8004f00 <HAL_ADC_IRQHandler+0x3c0>)
 8004e0c:	6892      	ldr	r2, [r2, #8]
 8004e0e:	06d0      	lsls	r0, r2, #27
 8004e10:	f43f af0a 	beq.w	8004c28 <HAL_ADC_IRQHandler+0xe8>
 8004e14:	4a3a      	ldr	r2, [pc, #232]	@ (8004f00 <HAL_ADC_IRQHandler+0x3c0>)
 8004e16:	6892      	ldr	r2, [r2, #8]
 8004e18:	f002 021f 	and.w	r2, r2, #31
 8004e1c:	2a05      	cmp	r2, #5
 8004e1e:	f43f af03 	beq.w	8004c28 <HAL_ADC_IRQHandler+0xe8>
 8004e22:	4a37      	ldr	r2, [pc, #220]	@ (8004f00 <HAL_ADC_IRQHandler+0x3c0>)
 8004e24:	6892      	ldr	r2, [r2, #8]
 8004e26:	f002 021f 	and.w	r2, r2, #31
 8004e2a:	2a09      	cmp	r2, #9
 8004e2c:	f43f aefc 	beq.w	8004c28 <HAL_ADC_IRQHandler+0xe8>
 8004e30:	4a32      	ldr	r2, [pc, #200]	@ (8004efc <HAL_ADC_IRQHandler+0x3bc>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d11a      	bne.n	8004e6c <HAL_ADC_IRQHandler+0x32c>
 8004e36:	e6f7      	b.n	8004c28 <HAL_ADC_IRQHandler+0xe8>
 8004e38:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004e3c:	d002      	beq.n	8004e44 <HAL_ADC_IRQHandler+0x304>
 8004e3e:	4a2d      	ldr	r2, [pc, #180]	@ (8004ef4 <HAL_ADC_IRQHandler+0x3b4>)
 8004e40:	4293      	cmp	r3, r2
 8004e42:	d1ee      	bne.n	8004e22 <HAL_ADC_IRQHandler+0x2e2>
 8004e44:	4a2c      	ldr	r2, [pc, #176]	@ (8004ef8 <HAL_ADC_IRQHandler+0x3b8>)
 8004e46:	6892      	ldr	r2, [r2, #8]
 8004e48:	f002 021f 	and.w	r2, r2, #31
 8004e4c:	2a09      	cmp	r2, #9
 8004e4e:	f43f aeeb 	beq.w	8004c28 <HAL_ADC_IRQHandler+0xe8>
 8004e52:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004e56:	f43f aee7 	beq.w	8004c28 <HAL_ADC_IRQHandler+0xe8>
 8004e5a:	4a28      	ldr	r2, [pc, #160]	@ (8004efc <HAL_ADC_IRQHandler+0x3bc>)
 8004e5c:	4293      	cmp	r3, r2
 8004e5e:	f43f aee3 	beq.w	8004c28 <HAL_ADC_IRQHandler+0xe8>
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8004e62:	4924      	ldr	r1, [pc, #144]	@ (8004ef4 <HAL_ADC_IRQHandler+0x3b4>)
 8004e64:	428b      	cmp	r3, r1
 8004e66:	bf08      	it	eq
 8004e68:	f04f 42a0 	moveq.w	r2, #1342177280	@ 0x50000000
 8004e6c:	68d2      	ldr	r2, [r2, #12]
 8004e6e:	e6dc      	b.n	8004c2a <HAL_ADC_IRQHandler+0xea>
          if (ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc))
 8004e70:	4a23      	ldr	r2, [pc, #140]	@ (8004f00 <HAL_ADC_IRQHandler+0x3c0>)
 8004e72:	6892      	ldr	r2, [r2, #8]
 8004e74:	06d0      	lsls	r0, r2, #27
 8004e76:	f43f aeff 	beq.w	8004c78 <HAL_ADC_IRQHandler+0x138>
 8004e7a:	4a21      	ldr	r2, [pc, #132]	@ (8004f00 <HAL_ADC_IRQHandler+0x3c0>)
 8004e7c:	6892      	ldr	r2, [r2, #8]
 8004e7e:	f002 021f 	and.w	r2, r2, #31
 8004e82:	2a06      	cmp	r2, #6
 8004e84:	f43f aef8 	beq.w	8004c78 <HAL_ADC_IRQHandler+0x138>
 8004e88:	4a1d      	ldr	r2, [pc, #116]	@ (8004f00 <HAL_ADC_IRQHandler+0x3c0>)
 8004e8a:	6892      	ldr	r2, [r2, #8]
 8004e8c:	f002 021f 	and.w	r2, r2, #31
 8004e90:	2a07      	cmp	r2, #7
 8004e92:	f43f aef1 	beq.w	8004c78 <HAL_ADC_IRQHandler+0x138>
 8004e96:	4a19      	ldr	r2, [pc, #100]	@ (8004efc <HAL_ADC_IRQHandler+0x3bc>)
 8004e98:	4293      	cmp	r3, r2
 8004e9a:	d11a      	bne.n	8004ed2 <HAL_ADC_IRQHandler+0x392>
 8004e9c:	e6ec      	b.n	8004c78 <HAL_ADC_IRQHandler+0x138>
 8004e9e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004ea2:	d002      	beq.n	8004eaa <HAL_ADC_IRQHandler+0x36a>
 8004ea4:	4a13      	ldr	r2, [pc, #76]	@ (8004ef4 <HAL_ADC_IRQHandler+0x3b4>)
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	d1ee      	bne.n	8004e88 <HAL_ADC_IRQHandler+0x348>
 8004eaa:	4a13      	ldr	r2, [pc, #76]	@ (8004ef8 <HAL_ADC_IRQHandler+0x3b8>)
 8004eac:	6892      	ldr	r2, [r2, #8]
 8004eae:	f002 021f 	and.w	r2, r2, #31
 8004eb2:	2a07      	cmp	r2, #7
 8004eb4:	f43f aee0 	beq.w	8004c78 <HAL_ADC_IRQHandler+0x138>
 8004eb8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004ebc:	f43f aedc 	beq.w	8004c78 <HAL_ADC_IRQHandler+0x138>
 8004ec0:	4a0e      	ldr	r2, [pc, #56]	@ (8004efc <HAL_ADC_IRQHandler+0x3bc>)
 8004ec2:	4293      	cmp	r3, r2
 8004ec4:	f43f aed8 	beq.w	8004c78 <HAL_ADC_IRQHandler+0x138>
            tmp_cfgr_jqm = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8004ec8:	490a      	ldr	r1, [pc, #40]	@ (8004ef4 <HAL_ADC_IRQHandler+0x3b4>)
 8004eca:	428b      	cmp	r3, r1
 8004ecc:	bf08      	it	eq
 8004ece:	f04f 42a0 	moveq.w	r2, #1342177280	@ 0x50000000
 8004ed2:	68d2      	ldr	r2, [r2, #12]
 8004ed4:	e6d1      	b.n	8004c7a <HAL_ADC_IRQHandler+0x13a>
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004ed6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004ed8:	f043 0310 	orr.w	r3, r3, #16
 8004edc:	6423      	str	r3, [r4, #64]	@ 0x40
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004ede:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8004ee0:	f043 0301 	orr.w	r3, r3, #1
 8004ee4:	6463      	str	r3, [r4, #68]	@ 0x44
 8004ee6:	e6dd      	b.n	8004ca4 <HAL_ADC_IRQHandler+0x164>
      tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004ee8:	4b03      	ldr	r3, [pc, #12]	@ (8004ef8 <HAL_ADC_IRQHandler+0x3b8>)
 8004eea:	e71f      	b.n	8004d2c <HAL_ADC_IRQHandler+0x1ec>
        if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 8004eec:	689b      	ldr	r3, [r3, #8]
 8004eee:	f413 4f40 	tst.w	r3, #49152	@ 0xc000
 8004ef2:	e722      	b.n	8004d3a <HAL_ADC_IRQHandler+0x1fa>
 8004ef4:	50000100 	.word	0x50000100
 8004ef8:	50000300 	.word	0x50000300
 8004efc:	50000400 	.word	0x50000400
 8004f00:	50000700 	.word	0x50000700

08004f04 <HAL_ADC_ConfigChannel>:
{
 8004f04:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004f06:	4605      	mov	r5, r0
  __IO uint32_t wait_loop_index = 0U;
 8004f08:	2300      	movs	r3, #0
 8004f0a:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8004f0c:	f895 303c 	ldrb.w	r3, [r5, #60]	@ 0x3c
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8004f10:	68c8      	ldr	r0, [r1, #12]
  __HAL_LOCK(hadc);
 8004f12:	2b01      	cmp	r3, #1
 8004f14:	f000 816a 	beq.w	80051ec <HAL_ADC_ConfigChannel+0x2e8>
 8004f18:	2301      	movs	r3, #1
 8004f1a:	f885 303c 	strb.w	r3, [r5, #60]	@ 0x3c
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8004f1e:	682b      	ldr	r3, [r5, #0]
 8004f20:	689a      	ldr	r2, [r3, #8]
 8004f22:	0757      	lsls	r7, r2, #29
 8004f24:	f100 815c 	bmi.w	80051e0 <HAL_ADC_ConfigChannel+0x2dc>
    if (sConfig->Rank < 5U)
 8004f28:	684e      	ldr	r6, [r1, #4]
      MODIFY_REG(hadc->Instance->SQR1,
 8004f2a:	680c      	ldr	r4, [r1, #0]
 8004f2c:	2206      	movs	r2, #6
    if (sConfig->Rank < 5U)
 8004f2e:	2e04      	cmp	r6, #4
      MODIFY_REG(hadc->Instance->SQR1,
 8004f30:	fb06 f202 	mul.w	r2, r6, r2
    if (sConfig->Rank < 5U)
 8004f34:	d82c      	bhi.n	8004f90 <HAL_ADC_ConfigChannel+0x8c>
      MODIFY_REG(hadc->Instance->SQR1,
 8004f36:	6b1e      	ldr	r6, [r3, #48]	@ 0x30
 8004f38:	271f      	movs	r7, #31
 8004f3a:	4097      	lsls	r7, r2
 8004f3c:	ea26 0607 	bic.w	r6, r6, r7
 8004f40:	fa04 f202 	lsl.w	r2, r4, r2
 8004f44:	4332      	orrs	r2, r6
 8004f46:	631a      	str	r2, [r3, #48]	@ 0x30
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8004f48:	689a      	ldr	r2, [r3, #8]
 8004f4a:	f012 0f0c 	tst.w	r2, #12
 8004f4e:	d158      	bne.n	8005002 <HAL_ADC_ConfigChannel+0xfe>
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8004f50:	2c09      	cmp	r4, #9
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8004f52:	f8d1 c008 	ldr.w	ip, [r1, #8]
 8004f56:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 8004f5a:	f04f 0607 	mov.w	r6, #7
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8004f5e:	d93c      	bls.n	8004fda <HAL_ADC_ConfigChannel+0xd6>
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8004f60:	699f      	ldr	r7, [r3, #24]
 8004f62:	3a1e      	subs	r2, #30
 8004f64:	4096      	lsls	r6, r2
 8004f66:	ea27 0606 	bic.w	r6, r7, r6
 8004f6a:	fa0c f202 	lsl.w	r2, ip, r2
 8004f6e:	4332      	orrs	r2, r6
 8004f70:	619a      	str	r2, [r3, #24]
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8004f72:	68da      	ldr	r2, [r3, #12]
 8004f74:	694e      	ldr	r6, [r1, #20]
 8004f76:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 8004f7a:	0052      	lsls	r2, r2, #1
 8004f7c:	4096      	lsls	r6, r2
    switch (sConfig->OffsetNumber)
 8004f7e:	690a      	ldr	r2, [r1, #16]
 8004f80:	3a01      	subs	r2, #1
      MODIFY_REG(hadc->Instance->OFR1               ,
 8004f82:	06a7      	lsls	r7, r4, #26
    switch (sConfig->OffsetNumber)
 8004f84:	2a03      	cmp	r2, #3
 8004f86:	d86b      	bhi.n	8005060 <HAL_ADC_ConfigChannel+0x15c>
 8004f88:	e8df f002 	tbb	[pc, r2]
 8004f8c:	5f544931 	.word	0x5f544931
    else if (sConfig->Rank < 10U)
 8004f90:	2e09      	cmp	r6, #9
 8004f92:	d80a      	bhi.n	8004faa <HAL_ADC_ConfigChannel+0xa6>
      MODIFY_REG(hadc->Instance->SQR2,
 8004f94:	6b5e      	ldr	r6, [r3, #52]	@ 0x34
 8004f96:	3a1e      	subs	r2, #30
 8004f98:	271f      	movs	r7, #31
 8004f9a:	4097      	lsls	r7, r2
 8004f9c:	ea26 0607 	bic.w	r6, r6, r7
 8004fa0:	fa04 f202 	lsl.w	r2, r4, r2
 8004fa4:	4332      	orrs	r2, r6
 8004fa6:	635a      	str	r2, [r3, #52]	@ 0x34
 8004fa8:	e7ce      	b.n	8004f48 <HAL_ADC_ConfigChannel+0x44>
    else if (sConfig->Rank < 15U)
 8004faa:	2e0e      	cmp	r6, #14
 8004fac:	f04f 061f 	mov.w	r6, #31
 8004fb0:	d809      	bhi.n	8004fc6 <HAL_ADC_ConfigChannel+0xc2>
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8004fb2:	6b9f      	ldr	r7, [r3, #56]	@ 0x38
 8004fb4:	3a3c      	subs	r2, #60	@ 0x3c
 8004fb6:	4096      	lsls	r6, r2
 8004fb8:	ea27 0606 	bic.w	r6, r7, r6
 8004fbc:	fa04 f202 	lsl.w	r2, r4, r2
 8004fc0:	4332      	orrs	r2, r6
 8004fc2:	639a      	str	r2, [r3, #56]	@ 0x38
 8004fc4:	e7c0      	b.n	8004f48 <HAL_ADC_ConfigChannel+0x44>
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8004fc6:	6bdf      	ldr	r7, [r3, #60]	@ 0x3c
 8004fc8:	3a5a      	subs	r2, #90	@ 0x5a
 8004fca:	4096      	lsls	r6, r2
 8004fcc:	ea27 0606 	bic.w	r6, r7, r6
 8004fd0:	fa04 f202 	lsl.w	r2, r4, r2
 8004fd4:	4332      	orrs	r2, r6
 8004fd6:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004fd8:	e7b6      	b.n	8004f48 <HAL_ADC_ConfigChannel+0x44>
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8004fda:	695f      	ldr	r7, [r3, #20]
 8004fdc:	4096      	lsls	r6, r2
 8004fde:	ea27 0606 	bic.w	r6, r7, r6
 8004fe2:	fa0c fc02 	lsl.w	ip, ip, r2
 8004fe6:	ea46 060c 	orr.w	r6, r6, ip
 8004fea:	615e      	str	r6, [r3, #20]
 8004fec:	e7c1      	b.n	8004f72 <HAL_ADC_ConfigChannel+0x6e>
      MODIFY_REG(hadc->Instance->OFR1               ,
 8004fee:	f8d3 c060 	ldr.w	ip, [r3, #96]	@ 0x60
 8004ff2:	4a7f      	ldr	r2, [pc, #508]	@ (80051f0 <HAL_ADC_ConfigChannel+0x2ec>)
 8004ff4:	ea0c 0202 	and.w	r2, ip, r2
 8004ff8:	433a      	orrs	r2, r7
 8004ffa:	4332      	orrs	r2, r6
 8004ffc:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8005000:	661a      	str	r2, [r3, #96]	@ 0x60
  if (ADC_IS_ENABLE(hadc) == RESET)
 8005002:	689a      	ldr	r2, [r3, #8]
 8005004:	f002 0203 	and.w	r2, r2, #3
 8005008:	2a01      	cmp	r2, #1
 800500a:	d14d      	bne.n	80050a8 <HAL_ADC_ConfigChannel+0x1a4>
 800500c:	681a      	ldr	r2, [r3, #0]
 800500e:	07d6      	lsls	r6, r2, #31
 8005010:	d54a      	bpl.n	80050a8 <HAL_ADC_ConfigChannel+0x1a4>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005012:	2000      	movs	r0, #0
  __HAL_UNLOCK(hadc);
 8005014:	2300      	movs	r3, #0
 8005016:	f885 303c 	strb.w	r3, [r5, #60]	@ 0x3c
}
 800501a:	b003      	add	sp, #12
 800501c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      MODIFY_REG(hadc->Instance->OFR2               ,
 800501e:	f8d3 c064 	ldr.w	ip, [r3, #100]	@ 0x64
 8005022:	4a73      	ldr	r2, [pc, #460]	@ (80051f0 <HAL_ADC_ConfigChannel+0x2ec>)
 8005024:	ea0c 0202 	and.w	r2, ip, r2
 8005028:	433a      	orrs	r2, r7
 800502a:	4332      	orrs	r2, r6
 800502c:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8005030:	665a      	str	r2, [r3, #100]	@ 0x64
      break;
 8005032:	e7e6      	b.n	8005002 <HAL_ADC_ConfigChannel+0xfe>
      MODIFY_REG(hadc->Instance->OFR3               ,
 8005034:	f8d3 c068 	ldr.w	ip, [r3, #104]	@ 0x68
 8005038:	4a6d      	ldr	r2, [pc, #436]	@ (80051f0 <HAL_ADC_ConfigChannel+0x2ec>)
 800503a:	ea0c 0202 	and.w	r2, ip, r2
 800503e:	433a      	orrs	r2, r7
 8005040:	4332      	orrs	r2, r6
 8005042:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8005046:	669a      	str	r2, [r3, #104]	@ 0x68
      break;
 8005048:	e7db      	b.n	8005002 <HAL_ADC_ConfigChannel+0xfe>
      MODIFY_REG(hadc->Instance->OFR4               ,
 800504a:	f8d3 c06c 	ldr.w	ip, [r3, #108]	@ 0x6c
 800504e:	4a68      	ldr	r2, [pc, #416]	@ (80051f0 <HAL_ADC_ConfigChannel+0x2ec>)
 8005050:	ea0c 0202 	and.w	r2, ip, r2
 8005054:	433a      	orrs	r2, r7
 8005056:	4332      	orrs	r2, r6
 8005058:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 800505c:	66da      	str	r2, [r3, #108]	@ 0x6c
 800505e:	e7d0      	b.n	8005002 <HAL_ADC_ConfigChannel+0xfe>
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005060:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8005062:	f002 42f8 	and.w	r2, r2, #2080374784	@ 0x7c000000
 8005066:	42ba      	cmp	r2, r7
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8005068:	bf02      	ittt	eq
 800506a:	6e1a      	ldreq	r2, [r3, #96]	@ 0x60
 800506c:	f022 4200 	biceq.w	r2, r2, #2147483648	@ 0x80000000
 8005070:	661a      	streq	r2, [r3, #96]	@ 0x60
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005072:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8005074:	f002 42f8 	and.w	r2, r2, #2080374784	@ 0x7c000000
 8005078:	42ba      	cmp	r2, r7
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 800507a:	bf02      	ittt	eq
 800507c:	6e5a      	ldreq	r2, [r3, #100]	@ 0x64
 800507e:	f022 4200 	biceq.w	r2, r2, #2147483648	@ 0x80000000
 8005082:	665a      	streq	r2, [r3, #100]	@ 0x64
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005084:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8005086:	f002 42f8 	and.w	r2, r2, #2080374784	@ 0x7c000000
 800508a:	42ba      	cmp	r2, r7
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 800508c:	bf02      	ittt	eq
 800508e:	6e9a      	ldreq	r2, [r3, #104]	@ 0x68
 8005090:	f022 4200 	biceq.w	r2, r2, #2147483648	@ 0x80000000
 8005094:	669a      	streq	r2, [r3, #104]	@ 0x68
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005096:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8005098:	f002 42f8 	and.w	r2, r2, #2080374784	@ 0x7c000000
 800509c:	42ba      	cmp	r2, r7
 800509e:	d1b0      	bne.n	8005002 <HAL_ADC_ConfigChannel+0xfe>
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 80050a0:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80050a2:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80050a6:	e7d9      	b.n	800505c <HAL_ADC_ConfigChannel+0x158>
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80050a8:	2201      	movs	r2, #1
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80050aa:	2801      	cmp	r0, #1
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80050ac:	fa02 f204 	lsl.w	r2, r2, r4
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80050b0:	d047      	beq.n	8005142 <HAL_ADC_ConfigChannel+0x23e>
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80050b2:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 80050b6:	ea21 0202 	bic.w	r2, r1, r2
 80050ba:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80050be:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80050c2:	d164      	bne.n	800518e <HAL_ADC_ConfigChannel+0x28a>
 80050c4:	494b      	ldr	r1, [pc, #300]	@ (80051f4 <HAL_ADC_ConfigChannel+0x2f0>)
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80050c6:	2c10      	cmp	r4, #16
 80050c8:	d166      	bne.n	8005198 <HAL_ADC_ConfigChannel+0x294>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80050ca:	688a      	ldr	r2, [r1, #8]
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80050cc:	f412 0f00 	tst.w	r2, #8388608	@ 0x800000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80050d0:	d19f      	bne.n	8005012 <HAL_ADC_ConfigChannel+0x10e>
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80050d2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80050d6:	4a48      	ldr	r2, [pc, #288]	@ (80051f8 <HAL_ADC_ConfigChannel+0x2f4>)
 80050d8:	d009      	beq.n	80050ee <HAL_ADC_ConfigChannel+0x1ea>
 80050da:	4293      	cmp	r3, r2
 80050dc:	d069      	beq.n	80051b2 <HAL_ADC_ConfigChannel+0x2ae>
 80050de:	f502 7240 	add.w	r2, r2, #768	@ 0x300
 80050e2:	4293      	cmp	r3, r2
 80050e4:	4845      	ldr	r0, [pc, #276]	@ (80051fc <HAL_ADC_ConfigChannel+0x2f8>)
 80050e6:	d067      	beq.n	80051b8 <HAL_ADC_ConfigChannel+0x2b4>
 80050e8:	4283      	cmp	r3, r0
 80050ea:	bf18      	it	ne
 80050ec:	2200      	movne	r2, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80050ee:	6898      	ldr	r0, [r3, #8]
 80050f0:	f000 0003 	and.w	r0, r0, #3
 80050f4:	2801      	cmp	r0, #1
 80050f6:	d102      	bne.n	80050fe <HAL_ADC_ConfigChannel+0x1fa>
 80050f8:	6818      	ldr	r0, [r3, #0]
 80050fa:	07c0      	lsls	r0, r0, #31
 80050fc:	d470      	bmi.n	80051e0 <HAL_ADC_ConfigChannel+0x2dc>
 80050fe:	b13a      	cbz	r2, 8005110 <HAL_ADC_ConfigChannel+0x20c>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8005100:	6890      	ldr	r0, [r2, #8]
 8005102:	f000 0003 	and.w	r0, r0, #3
 8005106:	2801      	cmp	r0, #1
 8005108:	d102      	bne.n	8005110 <HAL_ADC_ConfigChannel+0x20c>
 800510a:	6812      	ldr	r2, [r2, #0]
 800510c:	07d2      	lsls	r2, r2, #31
 800510e:	d467      	bmi.n	80051e0 <HAL_ADC_ConfigChannel+0x2dc>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8005110:	2c10      	cmp	r4, #16
 8005112:	d153      	bne.n	80051bc <HAL_ADC_ConfigChannel+0x2b8>
 8005114:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005118:	f47f af7b 	bne.w	8005012 <HAL_ADC_ConfigChannel+0x10e>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 800511c:	688b      	ldr	r3, [r1, #8]
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800511e:	4a38      	ldr	r2, [pc, #224]	@ (8005200 <HAL_ADC_ConfigChannel+0x2fc>)
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8005120:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005124:	608b      	str	r3, [r1, #8]
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8005126:	4b37      	ldr	r3, [pc, #220]	@ (8005204 <HAL_ADC_ConfigChannel+0x300>)
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	fbb3 f3f2 	udiv	r3, r3, r2
 800512e:	220a      	movs	r2, #10
 8005130:	4353      	muls	r3, r2
            wait_loop_index--;
 8005132:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 8005134:	9b01      	ldr	r3, [sp, #4]
 8005136:	2b00      	cmp	r3, #0
 8005138:	f43f af6b 	beq.w	8005012 <HAL_ADC_ConfigChannel+0x10e>
            wait_loop_index--;
 800513c:	9b01      	ldr	r3, [sp, #4]
 800513e:	3b01      	subs	r3, #1
 8005140:	e7f7      	b.n	8005132 <HAL_ADC_ConfigChannel+0x22e>
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8005142:	f8d3 00b0 	ldr.w	r0, [r3, #176]	@ 0xb0
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8005146:	2c09      	cmp	r4, #9
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8005148:	ea42 0200 	orr.w	r2, r2, r0
 800514c:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8005150:	6888      	ldr	r0, [r1, #8]
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8005152:	d90c      	bls.n	800516e <HAL_ADC_ConfigChannel+0x26a>
        MODIFY_REG(hadc->Instance->SMPR2,
 8005154:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 8005158:	6999      	ldr	r1, [r3, #24]
 800515a:	3a1b      	subs	r2, #27
 800515c:	2607      	movs	r6, #7
 800515e:	4096      	lsls	r6, r2
 8005160:	ea21 0106 	bic.w	r1, r1, r6
 8005164:	fa00 f202 	lsl.w	r2, r0, r2
 8005168:	430a      	orrs	r2, r1
 800516a:	619a      	str	r2, [r3, #24]
 800516c:	e7a7      	b.n	80050be <HAL_ADC_ConfigChannel+0x1ba>
        MODIFY_REG(hadc->Instance->SMPR1,
 800516e:	1c61      	adds	r1, r4, #1
 8005170:	695a      	ldr	r2, [r3, #20]
 8005172:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8005176:	2607      	movs	r6, #7
 8005178:	408e      	lsls	r6, r1
 800517a:	ea22 0206 	bic.w	r2, r2, r6
 800517e:	fa00 f101 	lsl.w	r1, r0, r1
 8005182:	430a      	orrs	r2, r1
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005184:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
        MODIFY_REG(hadc->Instance->SMPR1,
 8005188:	615a      	str	r2, [r3, #20]
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800518a:	f43f af42 	beq.w	8005012 <HAL_ADC_ConfigChannel+0x10e>
 800518e:	4a1a      	ldr	r2, [pc, #104]	@ (80051f8 <HAL_ADC_ConfigChannel+0x2f4>)
 8005190:	4293      	cmp	r3, r2
 8005192:	d097      	beq.n	80050c4 <HAL_ADC_ConfigChannel+0x1c0>
 8005194:	491c      	ldr	r1, [pc, #112]	@ (8005208 <HAL_ADC_ConfigChannel+0x304>)
 8005196:	e796      	b.n	80050c6 <HAL_ADC_ConfigChannel+0x1c2>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8005198:	2c11      	cmp	r4, #17
 800519a:	d103      	bne.n	80051a4 <HAL_ADC_ConfigChannel+0x2a0>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 800519c:	688a      	ldr	r2, [r1, #8]
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 800519e:	f012 7f80 	tst.w	r2, #16777216	@ 0x1000000
 80051a2:	e795      	b.n	80050d0 <HAL_ADC_ConfigChannel+0x1cc>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80051a4:	2c12      	cmp	r4, #18
 80051a6:	f47f af34 	bne.w	8005012 <HAL_ADC_ConfigChannel+0x10e>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 80051aa:	688a      	ldr	r2, [r1, #8]
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80051ac:	f412 0f80 	tst.w	r2, #4194304	@ 0x400000
 80051b0:	e78e      	b.n	80050d0 <HAL_ADC_ConfigChannel+0x1cc>
 80051b2:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80051b6:	e79a      	b.n	80050ee <HAL_ADC_ConfigChannel+0x1ea>
 80051b8:	4602      	mov	r2, r0
 80051ba:	e798      	b.n	80050ee <HAL_ADC_ConfigChannel+0x1ea>
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 80051bc:	2c11      	cmp	r4, #17
 80051be:	d108      	bne.n	80051d2 <HAL_ADC_ConfigChannel+0x2ce>
 80051c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80051c4:	f47f af25 	bne.w	8005012 <HAL_ADC_ConfigChannel+0x10e>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 80051c8:	688b      	ldr	r3, [r1, #8]
 80051ca:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 80051ce:	608b      	str	r3, [r1, #8]
 80051d0:	e71f      	b.n	8005012 <HAL_ADC_ConfigChannel+0x10e>
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 80051d2:	2c12      	cmp	r4, #18
 80051d4:	f47f af1d 	bne.w	8005012 <HAL_ADC_ConfigChannel+0x10e>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 80051d8:	688b      	ldr	r3, [r1, #8]
 80051da:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80051de:	e7f6      	b.n	80051ce <HAL_ADC_ConfigChannel+0x2ca>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80051e0:	6c2b      	ldr	r3, [r5, #64]	@ 0x40
 80051e2:	f043 0320 	orr.w	r3, r3, #32
 80051e6:	642b      	str	r3, [r5, #64]	@ 0x40
    tmp_hal_status = HAL_ERROR;
 80051e8:	2001      	movs	r0, #1
 80051ea:	e713      	b.n	8005014 <HAL_ADC_ConfigChannel+0x110>
  __HAL_LOCK(hadc);
 80051ec:	2002      	movs	r0, #2
 80051ee:	e714      	b.n	800501a <HAL_ADC_ConfigChannel+0x116>
 80051f0:	83fff000 	.word	0x83fff000
 80051f4:	50000300 	.word	0x50000300
 80051f8:	50000100 	.word	0x50000100
 80051fc:	50000500 	.word	0x50000500
 8005200:	000f4240 	.word	0x000f4240
 8005204:	2000000c 	.word	0x2000000c
 8005208:	50000700 	.word	0x50000700

0800520c <HAL_ADCEx_MultiModeConfigChannel>:
{
 800520c:	b5f0      	push	{r4, r5, r6, r7, lr}
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800520e:	6804      	ldr	r4, [r0, #0]
 8005210:	4b3c      	ldr	r3, [pc, #240]	@ (8005304 <HAL_ADCEx_MultiModeConfigChannel+0xf8>)
 8005212:	f1b4 4fa0 	cmp.w	r4, #1342177280	@ 0x50000000
{
 8005216:	4605      	mov	r5, r0
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8005218:	d009      	beq.n	800522e <HAL_ADCEx_MultiModeConfigChannel+0x22>
 800521a:	429c      	cmp	r4, r3
 800521c:	d047      	beq.n	80052ae <HAL_ADCEx_MultiModeConfigChannel+0xa2>
 800521e:	4a3a      	ldr	r2, [pc, #232]	@ (8005308 <HAL_ADCEx_MultiModeConfigChannel+0xfc>)
 8005220:	4294      	cmp	r4, r2
 8005222:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005226:	d002      	beq.n	800522e <HAL_ADCEx_MultiModeConfigChannel+0x22>
 8005228:	429c      	cmp	r4, r3
 800522a:	d166      	bne.n	80052fa <HAL_ADCEx_MultiModeConfigChannel+0xee>
 800522c:	4613      	mov	r3, r2
  __HAL_LOCK(hadc);
 800522e:	f895 203c 	ldrb.w	r2, [r5, #60]	@ 0x3c
 8005232:	2a01      	cmp	r2, #1
 8005234:	d063      	beq.n	80052fe <HAL_ADCEx_MultiModeConfigChannel+0xf2>
 8005236:	2201      	movs	r2, #1
  if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8005238:	6808      	ldr	r0, [r1, #0]
  __HAL_LOCK(hadc);
 800523a:	f885 203c 	strb.w	r2, [r5, #60]	@ 0x3c
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 800523e:	68a2      	ldr	r2, [r4, #8]
 8005240:	0752      	lsls	r2, r2, #29
 8005242:	d454      	bmi.n	80052ee <HAL_ADCEx_MultiModeConfigChannel+0xe2>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8005244:	689a      	ldr	r2, [r3, #8]
 8005246:	0757      	lsls	r7, r2, #29
 8005248:	d451      	bmi.n	80052ee <HAL_ADCEx_MultiModeConfigChannel+0xe2>
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800524a:	f1b4 4fa0 	cmp.w	r4, #1342177280	@ 0x50000000
 800524e:	d031      	beq.n	80052b4 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8005250:	4f2c      	ldr	r7, [pc, #176]	@ (8005304 <HAL_ADCEx_MultiModeConfigChannel+0xf8>)
 8005252:	4a2e      	ldr	r2, [pc, #184]	@ (800530c <HAL_ADCEx_MultiModeConfigChannel+0x100>)
 8005254:	4e2e      	ldr	r6, [pc, #184]	@ (8005310 <HAL_ADCEx_MultiModeConfigChannel+0x104>)
 8005256:	42bc      	cmp	r4, r7
 8005258:	bf08      	it	eq
 800525a:	4632      	moveq	r2, r6
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800525c:	b360      	cbz	r0, 80052b8 <HAL_ADCEx_MultiModeConfigChannel+0xac>
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 800525e:	6897      	ldr	r7, [r2, #8]
 8005260:	f895 c030 	ldrb.w	ip, [r5, #48]	@ 0x30
 8005264:	684e      	ldr	r6, [r1, #4]
 8005266:	f427 4760 	bic.w	r7, r7, #57344	@ 0xe000
 800526a:	ea46 364c 	orr.w	r6, r6, ip, lsl #13
 800526e:	433e      	orrs	r6, r7
 8005270:	6096      	str	r6, [r2, #8]
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8005272:	68a6      	ldr	r6, [r4, #8]
 8005274:	f006 0603 	and.w	r6, r6, #3
 8005278:	2e01      	cmp	r6, #1
 800527a:	d102      	bne.n	8005282 <HAL_ADCEx_MultiModeConfigChannel+0x76>
 800527c:	6824      	ldr	r4, [r4, #0]
 800527e:	07e6      	lsls	r6, r4, #31
 8005280:	d410      	bmi.n	80052a4 <HAL_ADCEx_MultiModeConfigChannel+0x98>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8005282:	689c      	ldr	r4, [r3, #8]
 8005284:	f004 0403 	and.w	r4, r4, #3
 8005288:	2c01      	cmp	r4, #1
 800528a:	d102      	bne.n	8005292 <HAL_ADCEx_MultiModeConfigChannel+0x86>
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	07dc      	lsls	r4, r3, #31
 8005290:	d408      	bmi.n	80052a4 <HAL_ADCEx_MultiModeConfigChannel+0x98>
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8005292:	6893      	ldr	r3, [r2, #8]
 8005294:	6889      	ldr	r1, [r1, #8]
 8005296:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800529a:	4308      	orrs	r0, r1
 800529c:	f023 030f 	bic.w	r3, r3, #15
 80052a0:	4318      	orrs	r0, r3
 80052a2:	6090      	str	r0, [r2, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80052a4:	2000      	movs	r0, #0
  __HAL_UNLOCK(hadc);
 80052a6:	2300      	movs	r3, #0
 80052a8:	f885 303c 	strb.w	r3, [r5, #60]	@ 0x3c
} 
 80052ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80052ae:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80052b2:	e7bc      	b.n	800522e <HAL_ADCEx_MultiModeConfigChannel+0x22>
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80052b4:	4a16      	ldr	r2, [pc, #88]	@ (8005310 <HAL_ADCEx_MultiModeConfigChannel+0x104>)
 80052b6:	e7d1      	b.n	800525c <HAL_ADCEx_MultiModeConfigChannel+0x50>
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80052b8:	6891      	ldr	r1, [r2, #8]
 80052ba:	f421 4160 	bic.w	r1, r1, #57344	@ 0xe000
 80052be:	6091      	str	r1, [r2, #8]
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80052c0:	68a1      	ldr	r1, [r4, #8]
 80052c2:	f001 0103 	and.w	r1, r1, #3
 80052c6:	2901      	cmp	r1, #1
 80052c8:	d102      	bne.n	80052d0 <HAL_ADCEx_MultiModeConfigChannel+0xc4>
 80052ca:	6821      	ldr	r1, [r4, #0]
 80052cc:	07c9      	lsls	r1, r1, #31
 80052ce:	d4e9      	bmi.n	80052a4 <HAL_ADCEx_MultiModeConfigChannel+0x98>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80052d0:	6899      	ldr	r1, [r3, #8]
 80052d2:	f001 0103 	and.w	r1, r1, #3
 80052d6:	2901      	cmp	r1, #1
 80052d8:	d102      	bne.n	80052e0 <HAL_ADCEx_MultiModeConfigChannel+0xd4>
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	07db      	lsls	r3, r3, #31
 80052de:	d4e1      	bmi.n	80052a4 <HAL_ADCEx_MultiModeConfigChannel+0x98>
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 80052e0:	6893      	ldr	r3, [r2, #8]
 80052e2:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80052e6:	f023 030f 	bic.w	r3, r3, #15
 80052ea:	6093      	str	r3, [r2, #8]
 80052ec:	e7da      	b.n	80052a4 <HAL_ADCEx_MultiModeConfigChannel+0x98>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80052ee:	6c2b      	ldr	r3, [r5, #64]	@ 0x40
 80052f0:	f043 0320 	orr.w	r3, r3, #32
 80052f4:	642b      	str	r3, [r5, #64]	@ 0x40
    tmp_hal_status = HAL_ERROR;
 80052f6:	2001      	movs	r0, #1
 80052f8:	e7d5      	b.n	80052a6 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
    return HAL_ERROR;
 80052fa:	2001      	movs	r0, #1
 80052fc:	e7d6      	b.n	80052ac <HAL_ADCEx_MultiModeConfigChannel+0xa0>
  __HAL_LOCK(hadc);
 80052fe:	2002      	movs	r0, #2
 8005300:	e7d4      	b.n	80052ac <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 8005302:	bf00      	nop
 8005304:	50000100 	.word	0x50000100
 8005308:	50000400 	.word	0x50000400
 800530c:	50000700 	.word	0x50000700
 8005310:	50000300 	.word	0x50000300

08005314 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005314:	4907      	ldr	r1, [pc, #28]	@ (8005334 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8005316:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005318:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800531c:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800531e:	0412      	lsls	r2, r2, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005320:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005324:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005326:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005328:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800532c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8005330:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8005332:	4770      	bx	lr
 8005334:	e000ed00 	.word	0xe000ed00

08005338 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005338:	4b16      	ldr	r3, [pc, #88]	@ (8005394 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800533a:	b530      	push	{r4, r5, lr}
 800533c:	68dc      	ldr	r4, [r3, #12]
 800533e:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005342:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005346:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005348:	2b04      	cmp	r3, #4
 800534a:	bf28      	it	cs
 800534c:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800534e:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005350:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005354:	bf8c      	ite	hi
 8005356:	3c03      	subhi	r4, #3
 8005358:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800535a:	fa05 f303 	lsl.w	r3, r5, r3
 800535e:	ea21 0303 	bic.w	r3, r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005362:	40a5      	lsls	r5, r4
 8005364:	ea22 0205 	bic.w	r2, r2, r5
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005368:	40a3      	lsls	r3, r4
  if ((int32_t)(IRQn) >= 0)
 800536a:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800536c:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005370:	bfac      	ite	ge
 8005372:	f100 4060 	addge.w	r0, r0, #3758096384	@ 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005376:	4a08      	ldrlt	r2, [pc, #32]	@ (8005398 <HAL_NVIC_SetPriority+0x60>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005378:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800537c:	bfb8      	it	lt
 800537e:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005382:	b2db      	uxtb	r3, r3
 8005384:	bfaa      	itet	ge
 8005386:	f500 4061 	addge.w	r0, r0, #57600	@ 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800538a:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800538c:	f880 3300 	strbge.w	r3, [r0, #768]	@ 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8005390:	bd30      	pop	{r4, r5, pc}
 8005392:	bf00      	nop
 8005394:	e000ed00 	.word	0xe000ed00
 8005398:	e000ed14 	.word	0xe000ed14

0800539c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800539c:	2800      	cmp	r0, #0
 800539e:	db07      	blt.n	80053b0 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80053a0:	0941      	lsrs	r1, r0, #5
 80053a2:	4a04      	ldr	r2, [pc, #16]	@ (80053b4 <HAL_NVIC_EnableIRQ+0x18>)
 80053a4:	f000 001f 	and.w	r0, r0, #31
 80053a8:	2301      	movs	r3, #1
 80053aa:	4083      	lsls	r3, r0
 80053ac:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80053b0:	4770      	bx	lr
 80053b2:	bf00      	nop
 80053b4:	e000e100 	.word	0xe000e100

080053b8 <DMA_CalcBaseAndBitshift>:
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80053b8:	6802      	ldr	r2, [r0, #0]
 80053ba:	4b0a      	ldr	r3, [pc, #40]	@ (80053e4 <DMA_CalcBaseAndBitshift+0x2c>)
 80053bc:	429a      	cmp	r2, r3
 80053be:	f04f 0114 	mov.w	r1, #20
 80053c2:	d808      	bhi.n	80053d6 <DMA_CalcBaseAndBitshift+0x1e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80053c4:	4b08      	ldr	r3, [pc, #32]	@ (80053e8 <DMA_CalcBaseAndBitshift+0x30>)
 80053c6:	4413      	add	r3, r2
 80053c8:	4a08      	ldr	r2, [pc, #32]	@ (80053ec <DMA_CalcBaseAndBitshift+0x34>)
 80053ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80053ce:	009b      	lsls	r3, r3, #2
    hdma->DmaBaseAddress = DMA1;
 80053d0:	e9c0 230f 	strd	r2, r3, [r0, #60]	@ 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 80053d4:	4770      	bx	lr
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80053d6:	4b06      	ldr	r3, [pc, #24]	@ (80053f0 <DMA_CalcBaseAndBitshift+0x38>)
 80053d8:	4413      	add	r3, r2
 80053da:	4a06      	ldr	r2, [pc, #24]	@ (80053f4 <DMA_CalcBaseAndBitshift+0x3c>)
 80053dc:	fbb3 f3f1 	udiv	r3, r3, r1
 80053e0:	009b      	lsls	r3, r3, #2
    hdma->DmaBaseAddress = DMA2;
 80053e2:	e7f5      	b.n	80053d0 <DMA_CalcBaseAndBitshift+0x18>
 80053e4:	40020407 	.word	0x40020407
 80053e8:	bffdfff8 	.word	0xbffdfff8
 80053ec:	40020000 	.word	0x40020000
 80053f0:	bffdfbf8 	.word	0xbffdfbf8
 80053f4:	40020400 	.word	0x40020400

080053f8 <HAL_DMA_Init>:
{
 80053f8:	b538      	push	{r3, r4, r5, lr}
  if(NULL == hdma)
 80053fa:	4604      	mov	r4, r0
 80053fc:	b1e0      	cbz	r0, 8005438 <HAL_DMA_Init+0x40>
  tmp |=  hdma->Init.Direction        |
 80053fe:	e9d0 3501 	ldrd	r3, r5, [r0, #4]
 8005402:	432b      	orrs	r3, r5
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005404:	68c5      	ldr	r5, [r0, #12]
  tmp = hdma->Instance->CCR;
 8005406:	6801      	ldr	r1, [r0, #0]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005408:	432b      	orrs	r3, r5
 800540a:	6905      	ldr	r5, [r0, #16]
  tmp = hdma->Instance->CCR;
 800540c:	680a      	ldr	r2, [r1, #0]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800540e:	432b      	orrs	r3, r5
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005410:	6945      	ldr	r5, [r0, #20]
 8005412:	432b      	orrs	r3, r5
 8005414:	6985      	ldr	r5, [r0, #24]
 8005416:	432b      	orrs	r3, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 8005418:	69c5      	ldr	r5, [r0, #28]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800541a:	f422 527f 	bic.w	r2, r2, #16320	@ 0x3fc0
 800541e:	f022 0230 	bic.w	r2, r2, #48	@ 0x30
          hdma->Init.Mode                | hdma->Init.Priority;
 8005422:	432b      	orrs	r3, r5
  tmp |=  hdma->Init.Direction        |
 8005424:	4313      	orrs	r3, r2
  hdma->Instance->CCR = tmp;
 8005426:	600b      	str	r3, [r1, #0]
  DMA_CalcBaseAndBitshift(hdma);
 8005428:	f7ff ffc6 	bl	80053b8 <DMA_CalcBaseAndBitshift>
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800542c:	2000      	movs	r0, #0
  hdma->Lock = HAL_UNLOCKED;
 800542e:	f44f 7380 	mov.w	r3, #256	@ 0x100
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005432:	63a0      	str	r0, [r4, #56]	@ 0x38
  hdma->Lock = HAL_UNLOCKED;
 8005434:	8423      	strh	r3, [r4, #32]
}
 8005436:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8005438:	2001      	movs	r0, #1
 800543a:	e7fc      	b.n	8005436 <HAL_DMA_Init+0x3e>

0800543c <HAL_DMA_Start_IT>:
{
 800543c:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hdma);
 800543e:	f890 4020 	ldrb.w	r4, [r0, #32]
 8005442:	2c01      	cmp	r4, #1
 8005444:	d033      	beq.n	80054ae <HAL_DMA_Start_IT+0x72>
  if(HAL_DMA_STATE_READY == hdma->State)
 8005446:	f890 5021 	ldrb.w	r5, [r0, #33]	@ 0x21
  __HAL_LOCK(hdma);
 800544a:	2401      	movs	r4, #1
  if(HAL_DMA_STATE_READY == hdma->State)
 800544c:	42a5      	cmp	r5, r4
  __HAL_LOCK(hdma);
 800544e:	f880 4020 	strb.w	r4, [r0, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 8005452:	f04f 0400 	mov.w	r4, #0
 8005456:	d128      	bne.n	80054aa <HAL_DMA_Start_IT+0x6e>
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005458:	6384      	str	r4, [r0, #56]	@ 0x38
    hdma->State = HAL_DMA_STATE_BUSY;
 800545a:	2602      	movs	r6, #2
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800545c:	6804      	ldr	r4, [r0, #0]
    hdma->State = HAL_DMA_STATE_BUSY;
 800545e:	f880 6021 	strb.w	r6, [r0, #33]	@ 0x21
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8005462:	6826      	ldr	r6, [r4, #0]
 8005464:	f026 0601 	bic.w	r6, r6, #1
 8005468:	6026      	str	r6, [r4, #0]
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800546a:	e9d0 670f 	ldrd	r6, r7, [r0, #60]	@ 0x3c
 800546e:	40bd      	lsls	r5, r7
 8005470:	6075      	str	r5, [r6, #4]
  hdma->Instance->CNDTR = DataLength;
 8005472:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005474:	6843      	ldr	r3, [r0, #4]
 8005476:	2b10      	cmp	r3, #16
    if(NULL != hdma->XferHalfCpltCallback )
 8005478:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
    hdma->Instance->CPAR = DstAddress;
 800547a:	bf0b      	itete	eq
 800547c:	60a2      	streq	r2, [r4, #8]
    hdma->Instance->CPAR = SrcAddress;
 800547e:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 8005480:	60e1      	streq	r1, [r4, #12]
    hdma->Instance->CMAR = DstAddress;
 8005482:	60e2      	strne	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback )
 8005484:	b14b      	cbz	r3, 800549a <HAL_DMA_Start_IT+0x5e>
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8005486:	6823      	ldr	r3, [r4, #0]
 8005488:	f043 030e 	orr.w	r3, r3, #14
      hdma->Instance->CCR &= ~DMA_IT_HT;
 800548c:	6023      	str	r3, [r4, #0]
    hdma->Instance->CCR |= DMA_CCR_EN;
 800548e:	6823      	ldr	r3, [r4, #0]
 8005490:	f043 0301 	orr.w	r3, r3, #1
 8005494:	6023      	str	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005496:	2000      	movs	r0, #0
}
 8005498:	bdf0      	pop	{r4, r5, r6, r7, pc}
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 800549a:	6823      	ldr	r3, [r4, #0]
 800549c:	f043 030a 	orr.w	r3, r3, #10
 80054a0:	6023      	str	r3, [r4, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 80054a2:	6823      	ldr	r3, [r4, #0]
 80054a4:	f023 0304 	bic.w	r3, r3, #4
 80054a8:	e7f0      	b.n	800548c <HAL_DMA_Start_IT+0x50>
    __HAL_UNLOCK(hdma);
 80054aa:	f880 4020 	strb.w	r4, [r0, #32]
  __HAL_LOCK(hdma);
 80054ae:	2002      	movs	r0, #2
 80054b0:	e7f2      	b.n	8005498 <HAL_DMA_Start_IT+0x5c>

080054b2 <HAL_DMA_Abort>:
  if(NULL == hdma)
 80054b2:	b140      	cbz	r0, 80054c6 <HAL_DMA_Abort+0x14>
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80054b4:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 80054b8:	2b02      	cmp	r3, #2
 80054ba:	d006      	beq.n	80054ca <HAL_DMA_Abort+0x18>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80054bc:	2304      	movs	r3, #4
 80054be:	6383      	str	r3, [r0, #56]	@ 0x38
    __HAL_UNLOCK(hdma);
 80054c0:	2300      	movs	r3, #0
 80054c2:	f880 3020 	strb.w	r3, [r0, #32]
    return HAL_ERROR;
 80054c6:	2001      	movs	r0, #1
 80054c8:	4770      	bx	lr
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80054ca:	6803      	ldr	r3, [r0, #0]
 80054cc:	681a      	ldr	r2, [r3, #0]
 80054ce:	f022 020e 	bic.w	r2, r2, #14
 80054d2:	601a      	str	r2, [r3, #0]
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80054d4:	681a      	ldr	r2, [r3, #0]
 80054d6:	f022 0201 	bic.w	r2, r2, #1
 80054da:	601a      	str	r2, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80054dc:	e9d0 210f 	ldrd	r2, r1, [r0, #60]	@ 0x3c
 80054e0:	2301      	movs	r3, #1
 80054e2:	408b      	lsls	r3, r1
 80054e4:	6053      	str	r3, [r2, #4]
  __HAL_UNLOCK(hdma);
 80054e6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80054ea:	8403      	strh	r3, [r0, #32]
  return HAL_OK;
 80054ec:	2000      	movs	r0, #0
}
 80054ee:	4770      	bx	lr

080054f0 <HAL_DMA_IRQHandler>:
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80054f0:	6bc1      	ldr	r1, [r0, #60]	@ 0x3c
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80054f2:	6c02      	ldr	r2, [r0, #64]	@ 0x40
  uint32_t source_it = hdma->Instance->CCR;
 80054f4:	6803      	ldr	r3, [r0, #0]
{
 80054f6:	b470      	push	{r4, r5, r6}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80054f8:	680e      	ldr	r6, [r1, #0]
  uint32_t source_it = hdma->Instance->CCR;
 80054fa:	681d      	ldr	r5, [r3, #0]
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80054fc:	2404      	movs	r4, #4
 80054fe:	4094      	lsls	r4, r2
 8005500:	4234      	tst	r4, r6
 8005502:	d00e      	beq.n	8005522 <HAL_DMA_IRQHandler+0x32>
 8005504:	f015 0f04 	tst.w	r5, #4
 8005508:	d00b      	beq.n	8005522 <HAL_DMA_IRQHandler+0x32>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800550a:	681a      	ldr	r2, [r3, #0]
 800550c:	0692      	lsls	r2, r2, #26
      hdma->Instance->CCR &= ~DMA_IT_HT;
 800550e:	bf5e      	ittt	pl
 8005510:	681a      	ldrpl	r2, [r3, #0]
 8005512:	f022 0204 	bicpl.w	r2, r2, #4
 8005516:	601a      	strpl	r2, [r3, #0]
    if(hdma->XferHalfCpltCallback != NULL)
 8005518:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 800551a:	604c      	str	r4, [r1, #4]
    if(hdma->XferErrorCallback != NULL)
 800551c:	b363      	cbz	r3, 8005578 <HAL_DMA_IRQHandler+0x88>
}
 800551e:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 8005520:	4718      	bx	r3
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8005522:	2402      	movs	r4, #2
 8005524:	4094      	lsls	r4, r2
 8005526:	4234      	tst	r4, r6
 8005528:	d012      	beq.n	8005550 <HAL_DMA_IRQHandler+0x60>
 800552a:	f015 0f02 	tst.w	r5, #2
 800552e:	d00f      	beq.n	8005550 <HAL_DMA_IRQHandler+0x60>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005530:	681a      	ldr	r2, [r3, #0]
 8005532:	0695      	lsls	r5, r2, #26
 8005534:	d406      	bmi.n	8005544 <HAL_DMA_IRQHandler+0x54>
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8005536:	681a      	ldr	r2, [r3, #0]
 8005538:	f022 020a 	bic.w	r2, r2, #10
 800553c:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 800553e:	2301      	movs	r3, #1
 8005540:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
    __HAL_UNLOCK(hdma);
 8005544:	2300      	movs	r3, #0
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8005546:	604c      	str	r4, [r1, #4]
    __HAL_UNLOCK(hdma);
 8005548:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 800554c:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800554e:	e7e5      	b.n	800551c <HAL_DMA_IRQHandler+0x2c>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8005550:	2408      	movs	r4, #8
 8005552:	4094      	lsls	r4, r2
 8005554:	4234      	tst	r4, r6
 8005556:	d00f      	beq.n	8005578 <HAL_DMA_IRQHandler+0x88>
 8005558:	072c      	lsls	r4, r5, #28
 800555a:	d50d      	bpl.n	8005578 <HAL_DMA_IRQHandler+0x88>
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800555c:	681c      	ldr	r4, [r3, #0]
 800555e:	f024 040e 	bic.w	r4, r4, #14
 8005562:	601c      	str	r4, [r3, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8005564:	2301      	movs	r3, #1
 8005566:	fa03 f202 	lsl.w	r2, r3, r2
 800556a:	604a      	str	r2, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800556c:	6383      	str	r3, [r0, #56]	@ 0x38
    __HAL_UNLOCK(hdma);
 800556e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005572:	8403      	strh	r3, [r0, #32]
    if(hdma->XferErrorCallback != NULL)
 8005574:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8005576:	e7d1      	b.n	800551c <HAL_DMA_IRQHandler+0x2c>
}
 8005578:	bc70      	pop	{r4, r5, r6}
 800557a:	4770      	bx	lr

0800557c <HAL_DMA_GetError>:
  return hdma->ErrorCode;
 800557c:	6b80      	ldr	r0, [r0, #56]	@ 0x38
}
 800557e:	4770      	bx	lr

08005580 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005580:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005584:	f8df 917c 	ldr.w	r9, [pc, #380]	@ 8005704 <HAL_GPIO_Init+0x184>
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005588:	4c5c      	ldr	r4, [pc, #368]	@ (80056fc <HAL_GPIO_Init+0x17c>)
  uint32_t position = 0x00u;
 800558a:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800558c:	680a      	ldr	r2, [r1, #0]
 800558e:	fa32 f503 	lsrs.w	r5, r2, r3
 8005592:	d102      	bne.n	800559a <HAL_GPIO_Init+0x1a>
      }
    }

    position++;
  }
}
 8005594:	b003      	add	sp, #12
 8005596:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800559a:	2501      	movs	r5, #1
 800559c:	fa05 f803 	lsl.w	r8, r5, r3
    if (iocurrent != 0x00u)
 80055a0:	ea18 0202 	ands.w	r2, r8, r2
 80055a4:	f000 80a0 	beq.w	80056e8 <HAL_GPIO_Init+0x168>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80055a8:	684e      	ldr	r6, [r1, #4]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80055aa:	2703      	movs	r7, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80055ac:	f006 0503 	and.w	r5, r6, #3
 80055b0:	ea4f 0e43 	mov.w	lr, r3, lsl #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80055b4:	fa07 fc0e 	lsl.w	ip, r7, lr
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80055b8:	1e6f      	subs	r7, r5, #1
 80055ba:	2f01      	cmp	r7, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80055bc:	ea6f 0c0c 	mvn.w	ip, ip
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80055c0:	d834      	bhi.n	800562c <HAL_GPIO_Init+0xac>
        temp = GPIOx->OSPEEDR;
 80055c2:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80055c4:	ea07 0a0c 	and.w	sl, r7, ip
        temp |= (GPIO_Init->Speed << (position * 2u));
 80055c8:	68cf      	ldr	r7, [r1, #12]
 80055ca:	fa07 f70e 	lsl.w	r7, r7, lr
 80055ce:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
 80055d2:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 80055d4:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80055d6:	ea27 0808 	bic.w	r8, r7, r8
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80055da:	f3c6 1700 	ubfx	r7, r6, #4, #1
 80055de:	409f      	lsls	r7, r3
 80055e0:	ea47 0708 	orr.w	r7, r7, r8
        GPIOx->OTYPER = temp;
 80055e4:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 80055e6:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80055e8:	ea07 080c 	and.w	r8, r7, ip
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80055ec:	688f      	ldr	r7, [r1, #8]
 80055ee:	fa07 f70e 	lsl.w	r7, r7, lr
 80055f2:	ea47 0708 	orr.w	r7, r7, r8
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80055f6:	2d02      	cmp	r5, #2
        GPIOx->PUPDR = temp;
 80055f8:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80055fa:	d119      	bne.n	8005630 <HAL_GPIO_Init+0xb0>
        temp = GPIOx->AFR[position >> 3u];
 80055fc:	ea4f 08d3 	mov.w	r8, r3, lsr #3
 8005600:	eb00 0888 	add.w	r8, r0, r8, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8005604:	f003 0a07 	and.w	sl, r3, #7
        temp = GPIOx->AFR[position >> 3u];
 8005608:	f8d8 7020 	ldr.w	r7, [r8, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800560c:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 8005610:	f04f 0b0f 	mov.w	fp, #15
 8005614:	fa0b fb0a 	lsl.w	fp, fp, sl
 8005618:	ea27 0b0b 	bic.w	fp, r7, fp
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800561c:	690f      	ldr	r7, [r1, #16]
 800561e:	fa07 f70a 	lsl.w	r7, r7, sl
 8005622:	ea47 070b 	orr.w	r7, r7, fp
        GPIOx->AFR[position >> 3u] = temp;
 8005626:	f8c8 7020 	str.w	r7, [r8, #32]
 800562a:	e001      	b.n	8005630 <HAL_GPIO_Init+0xb0>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800562c:	2d03      	cmp	r5, #3
 800562e:	d1da      	bne.n	80055e6 <HAL_GPIO_Init+0x66>
      temp = GPIOx->MODER;
 8005630:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8005632:	fa05 f50e 	lsl.w	r5, r5, lr
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8005636:	ea07 070c 	and.w	r7, r7, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800563a:	433d      	orrs	r5, r7
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800563c:	f416 3f40 	tst.w	r6, #196608	@ 0x30000
      GPIOx->MODER = temp;
 8005640:	6005      	str	r5, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005642:	d051      	beq.n	80056e8 <HAL_GPIO_Init+0x168>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005644:	f8d9 5018 	ldr.w	r5, [r9, #24]
 8005648:	f045 0501 	orr.w	r5, r5, #1
 800564c:	f8c9 5018 	str.w	r5, [r9, #24]
 8005650:	f8d9 5018 	ldr.w	r5, [r9, #24]
 8005654:	f023 0703 	bic.w	r7, r3, #3
 8005658:	f107 4780 	add.w	r7, r7, #1073741824	@ 0x40000000
 800565c:	f005 0501 	and.w	r5, r5, #1
 8005660:	f507 3780 	add.w	r7, r7, #65536	@ 0x10000
 8005664:	9501      	str	r5, [sp, #4]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8005666:	f003 0c03 	and.w	ip, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800566a:	9d01      	ldr	r5, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2u];
 800566c:	68bd      	ldr	r5, [r7, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800566e:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8005672:	f04f 0e0f 	mov.w	lr, #15
 8005676:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800567a:	f1b0 4f90 	cmp.w	r0, #1207959552	@ 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800567e:	ea25 0e0e 	bic.w	lr, r5, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8005682:	d033      	beq.n	80056ec <HAL_GPIO_Init+0x16c>
 8005684:	4d1e      	ldr	r5, [pc, #120]	@ (8005700 <HAL_GPIO_Init+0x180>)
 8005686:	42a8      	cmp	r0, r5
 8005688:	d032      	beq.n	80056f0 <HAL_GPIO_Init+0x170>
 800568a:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 800568e:	42a8      	cmp	r0, r5
 8005690:	d030      	beq.n	80056f4 <HAL_GPIO_Init+0x174>
 8005692:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8005696:	42a8      	cmp	r0, r5
 8005698:	d02e      	beq.n	80056f8 <HAL_GPIO_Init+0x178>
 800569a:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 800569e:	42a8      	cmp	r0, r5
 80056a0:	bf14      	ite	ne
 80056a2:	2505      	movne	r5, #5
 80056a4:	2504      	moveq	r5, #4
 80056a6:	fa05 f50c 	lsl.w	r5, r5, ip
 80056aa:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2u] = temp;
 80056ae:	60bd      	str	r5, [r7, #8]
        temp = EXTI->RTSR;
 80056b0:	68a5      	ldr	r5, [r4, #8]
        temp &= ~(iocurrent);
 80056b2:	43d7      	mvns	r7, r2
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80056b4:	f416 1f80 	tst.w	r6, #1048576	@ 0x100000
        temp &= ~(iocurrent);
 80056b8:	bf0c      	ite	eq
 80056ba:	403d      	andeq	r5, r7
          temp |= iocurrent;
 80056bc:	4315      	orrne	r5, r2
        EXTI->RTSR = temp;
 80056be:	60a5      	str	r5, [r4, #8]
        temp = EXTI->FTSR;
 80056c0:	68e5      	ldr	r5, [r4, #12]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80056c2:	f416 1f00 	tst.w	r6, #2097152	@ 0x200000
        temp &= ~(iocurrent);
 80056c6:	bf0c      	ite	eq
 80056c8:	403d      	andeq	r5, r7
          temp |= iocurrent;
 80056ca:	4315      	orrne	r5, r2
        EXTI->FTSR = temp;
 80056cc:	60e5      	str	r5, [r4, #12]
        temp = EXTI->EMR;
 80056ce:	6865      	ldr	r5, [r4, #4]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80056d0:	f416 3f00 	tst.w	r6, #131072	@ 0x20000
        temp &= ~(iocurrent);
 80056d4:	bf0c      	ite	eq
 80056d6:	403d      	andeq	r5, r7
          temp |= iocurrent;
 80056d8:	4315      	orrne	r5, r2
        EXTI->EMR = temp;
 80056da:	6065      	str	r5, [r4, #4]
        temp = EXTI->IMR;
 80056dc:	6825      	ldr	r5, [r4, #0]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80056de:	03f6      	lsls	r6, r6, #15
        temp &= ~(iocurrent);
 80056e0:	bf54      	ite	pl
 80056e2:	403d      	andpl	r5, r7
          temp |= iocurrent;
 80056e4:	4315      	orrmi	r5, r2
        EXTI->IMR = temp;
 80056e6:	6025      	str	r5, [r4, #0]
    position++;
 80056e8:	3301      	adds	r3, #1
 80056ea:	e74f      	b.n	800558c <HAL_GPIO_Init+0xc>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80056ec:	2500      	movs	r5, #0
 80056ee:	e7da      	b.n	80056a6 <HAL_GPIO_Init+0x126>
 80056f0:	2501      	movs	r5, #1
 80056f2:	e7d8      	b.n	80056a6 <HAL_GPIO_Init+0x126>
 80056f4:	2502      	movs	r5, #2
 80056f6:	e7d6      	b.n	80056a6 <HAL_GPIO_Init+0x126>
 80056f8:	2503      	movs	r5, #3
 80056fa:	e7d4      	b.n	80056a6 <HAL_GPIO_Init+0x126>
 80056fc:	40010400 	.word	0x40010400
 8005700:	48000400 	.word	0x48000400
 8005704:	40021000 	.word	0x40021000

08005708 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005708:	b10a      	cbz	r2, 800570e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800570a:	6181      	str	r1, [r0, #24]
 800570c:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800570e:	6281      	str	r1, [r0, #40]	@ 0x28
  }
}
 8005710:	4770      	bx	lr
	...

08005714 <HAL_PWR_EnableBkUpAccess>:
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  SET_BIT(PWR->CR, PWR_CR_DBP);  
 8005714:	4a02      	ldr	r2, [pc, #8]	@ (8005720 <HAL_PWR_EnableBkUpAccess+0xc>)
 8005716:	6813      	ldr	r3, [r2, #0]
 8005718:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800571c:	6013      	str	r3, [r2, #0]
}
 800571e:	4770      	bx	lr
 8005720:	40007000 	.word	0x40007000

08005724 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005724:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005728:	4605      	mov	r5, r0
 800572a:	2800      	cmp	r0, #0
 800572c:	d033      	beq.n	8005796 <HAL_RCC_OscConfig+0x72>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800572e:	6803      	ldr	r3, [r0, #0]
 8005730:	07da      	lsls	r2, r3, #31
 8005732:	d411      	bmi.n	8005758 <HAL_RCC_OscConfig+0x34>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005734:	682b      	ldr	r3, [r5, #0]
 8005736:	079b      	lsls	r3, r3, #30
 8005738:	f100 8081 	bmi.w	800583e <HAL_RCC_OscConfig+0x11a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800573c:	682b      	ldr	r3, [r5, #0]
 800573e:	071c      	lsls	r4, r3, #28
 8005740:	f100 80eb 	bmi.w	800591a <HAL_RCC_OscConfig+0x1f6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005744:	682b      	ldr	r3, [r5, #0]
 8005746:	0758      	lsls	r0, r3, #29
 8005748:	f100 8130 	bmi.w	80059ac <HAL_RCC_OscConfig+0x288>
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800574c:	69eb      	ldr	r3, [r5, #28]
 800574e:	2b00      	cmp	r3, #0
 8005750:	f040 81b5 	bne.w	8005abe <HAL_RCC_OscConfig+0x39a>
        }
      }
    }
  }

  return HAL_OK;
 8005754:	2000      	movs	r0, #0
 8005756:	e047      	b.n	80057e8 <HAL_RCC_OscConfig+0xc4>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8005758:	4cb0      	ldr	r4, [pc, #704]	@ (8005a1c <HAL_RCC_OscConfig+0x2f8>)
 800575a:	6863      	ldr	r3, [r4, #4]
 800575c:	f003 030c 	and.w	r3, r3, #12
 8005760:	2b04      	cmp	r3, #4
 8005762:	d007      	beq.n	8005774 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005764:	6863      	ldr	r3, [r4, #4]
 8005766:	f003 030c 	and.w	r3, r3, #12
 800576a:	2b08      	cmp	r3, #8
 800576c:	d115      	bne.n	800579a <HAL_RCC_OscConfig+0x76>
 800576e:	6863      	ldr	r3, [r4, #4]
 8005770:	03df      	lsls	r7, r3, #15
 8005772:	d512      	bpl.n	800579a <HAL_RCC_OscConfig+0x76>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005774:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005778:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800577c:	6821      	ldr	r1, [r4, #0]
 800577e:	fa93 f3a3 	rbit	r3, r3
 8005782:	2201      	movs	r2, #1
 8005784:	fab3 f383 	clz	r3, r3
 8005788:	fa02 f303 	lsl.w	r3, r2, r3
 800578c:	420b      	tst	r3, r1
 800578e:	d0d1      	beq.n	8005734 <HAL_RCC_OscConfig+0x10>
 8005790:	686b      	ldr	r3, [r5, #4]
 8005792:	2b00      	cmp	r3, #0
 8005794:	d1ce      	bne.n	8005734 <HAL_RCC_OscConfig+0x10>
    return HAL_ERROR;
 8005796:	2001      	movs	r0, #1
 8005798:	e026      	b.n	80057e8 <HAL_RCC_OscConfig+0xc4>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800579a:	686a      	ldr	r2, [r5, #4]
 800579c:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 80057a0:	d125      	bne.n	80057ee <HAL_RCC_OscConfig+0xca>
 80057a2:	6823      	ldr	r3, [r4, #0]
 80057a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80057a8:	6023      	str	r3, [r4, #0]
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80057aa:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80057ac:	68a9      	ldr	r1, [r5, #8]
 80057ae:	f023 030f 	bic.w	r3, r3, #15
 80057b2:	430b      	orrs	r3, r1
 80057b4:	62e3      	str	r3, [r4, #44]	@ 0x2c
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80057b6:	b352      	cbz	r2, 800580e <HAL_RCC_OscConfig+0xea>
        tickstart = HAL_GetTick();
 80057b8:	f7ff f852 	bl	8004860 <HAL_GetTick>
 80057bc:	f44f 3700 	mov.w	r7, #131072	@ 0x20000
 80057c0:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80057c2:	f04f 0801 	mov.w	r8, #1
 80057c6:	fa97 f3a7 	rbit	r3, r7
 80057ca:	6822      	ldr	r2, [r4, #0]
 80057cc:	fa97 f3a7 	rbit	r3, r7
 80057d0:	fab3 f383 	clz	r3, r3
 80057d4:	fa08 f303 	lsl.w	r3, r8, r3
 80057d8:	4213      	tst	r3, r2
 80057da:	d1ab      	bne.n	8005734 <HAL_RCC_OscConfig+0x10>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80057dc:	f7ff f840 	bl	8004860 <HAL_GetTick>
 80057e0:	1b80      	subs	r0, r0, r6
 80057e2:	2864      	cmp	r0, #100	@ 0x64
 80057e4:	d9ef      	bls.n	80057c6 <HAL_RCC_OscConfig+0xa2>
            return HAL_TIMEOUT;
 80057e6:	2003      	movs	r0, #3
}
 80057e8:	b002      	add	sp, #8
 80057ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80057ee:	6823      	ldr	r3, [r4, #0]
 80057f0:	b932      	cbnz	r2, 8005800 <HAL_RCC_OscConfig+0xdc>
 80057f2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80057f6:	6023      	str	r3, [r4, #0]
 80057f8:	6823      	ldr	r3, [r4, #0]
 80057fa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80057fe:	e7d3      	b.n	80057a8 <HAL_RCC_OscConfig+0x84>
 8005800:	f5b2 2fa0 	cmp.w	r2, #327680	@ 0x50000
 8005804:	d1f5      	bne.n	80057f2 <HAL_RCC_OscConfig+0xce>
 8005806:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800580a:	6023      	str	r3, [r4, #0]
 800580c:	e7c9      	b.n	80057a2 <HAL_RCC_OscConfig+0x7e>
        tickstart = HAL_GetTick();
 800580e:	f7ff f827 	bl	8004860 <HAL_GetTick>
 8005812:	f44f 3700 	mov.w	r7, #131072	@ 0x20000
 8005816:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005818:	f04f 0801 	mov.w	r8, #1
 800581c:	fa97 f3a7 	rbit	r3, r7
 8005820:	6822      	ldr	r2, [r4, #0]
 8005822:	fa97 f3a7 	rbit	r3, r7
 8005826:	fab3 f383 	clz	r3, r3
 800582a:	fa08 f303 	lsl.w	r3, r8, r3
 800582e:	4213      	tst	r3, r2
 8005830:	d080      	beq.n	8005734 <HAL_RCC_OscConfig+0x10>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005832:	f7ff f815 	bl	8004860 <HAL_GetTick>
 8005836:	1b80      	subs	r0, r0, r6
 8005838:	2864      	cmp	r0, #100	@ 0x64
 800583a:	d9ef      	bls.n	800581c <HAL_RCC_OscConfig+0xf8>
 800583c:	e7d3      	b.n	80057e6 <HAL_RCC_OscConfig+0xc2>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800583e:	4c77      	ldr	r4, [pc, #476]	@ (8005a1c <HAL_RCC_OscConfig+0x2f8>)
 8005840:	6863      	ldr	r3, [r4, #4]
 8005842:	f013 0f0c 	tst.w	r3, #12
 8005846:	d007      	beq.n	8005858 <HAL_RCC_OscConfig+0x134>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8005848:	6863      	ldr	r3, [r4, #4]
 800584a:	f003 030c 	and.w	r3, r3, #12
 800584e:	2b08      	cmp	r3, #8
 8005850:	d11f      	bne.n	8005892 <HAL_RCC_OscConfig+0x16e>
 8005852:	6863      	ldr	r3, [r4, #4]
 8005854:	03de      	lsls	r6, r3, #15
 8005856:	d41c      	bmi.n	8005892 <HAL_RCC_OscConfig+0x16e>
 8005858:	2302      	movs	r3, #2
 800585a:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800585e:	6821      	ldr	r1, [r4, #0]
 8005860:	fa93 f3a3 	rbit	r3, r3
 8005864:	2201      	movs	r2, #1
 8005866:	fab3 f383 	clz	r3, r3
 800586a:	fa02 f303 	lsl.w	r3, r2, r3
 800586e:	420b      	tst	r3, r1
 8005870:	d002      	beq.n	8005878 <HAL_RCC_OscConfig+0x154>
 8005872:	692b      	ldr	r3, [r5, #16]
 8005874:	4293      	cmp	r3, r2
 8005876:	d18e      	bne.n	8005796 <HAL_RCC_OscConfig+0x72>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005878:	6821      	ldr	r1, [r4, #0]
 800587a:	22f8      	movs	r2, #248	@ 0xf8
 800587c:	fa92 f2a2 	rbit	r2, r2
 8005880:	696b      	ldr	r3, [r5, #20]
 8005882:	fab2 f282 	clz	r2, r2
 8005886:	4093      	lsls	r3, r2
 8005888:	f021 02f8 	bic.w	r2, r1, #248	@ 0xf8
 800588c:	4313      	orrs	r3, r2
 800588e:	6023      	str	r3, [r4, #0]
 8005890:	e754      	b.n	800573c <HAL_RCC_OscConfig+0x18>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005892:	692a      	ldr	r2, [r5, #16]
 8005894:	2601      	movs	r6, #1
 8005896:	b1fa      	cbz	r2, 80058d8 <HAL_RCC_OscConfig+0x1b4>
 8005898:	fa96 f3a6 	rbit	r3, r6
        __HAL_RCC_HSI_ENABLE();
 800589c:	fab3 f383 	clz	r3, r3
 80058a0:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80058a4:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80058a8:	009b      	lsls	r3, r3, #2
 80058aa:	f04f 0802 	mov.w	r8, #2
 80058ae:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 80058b0:	f7fe ffd6 	bl	8004860 <HAL_GetTick>
 80058b4:	4607      	mov	r7, r0
 80058b6:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80058ba:	6822      	ldr	r2, [r4, #0]
 80058bc:	fa98 f3a8 	rbit	r3, r8
 80058c0:	fab3 f383 	clz	r3, r3
 80058c4:	fa06 f303 	lsl.w	r3, r6, r3
 80058c8:	4213      	tst	r3, r2
 80058ca:	d1d5      	bne.n	8005878 <HAL_RCC_OscConfig+0x154>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80058cc:	f7fe ffc8 	bl	8004860 <HAL_GetTick>
 80058d0:	1bc0      	subs	r0, r0, r7
 80058d2:	2802      	cmp	r0, #2
 80058d4:	d9ef      	bls.n	80058b6 <HAL_RCC_OscConfig+0x192>
 80058d6:	e786      	b.n	80057e6 <HAL_RCC_OscConfig+0xc2>
 80058d8:	fa96 f3a6 	rbit	r3, r6
        __HAL_RCC_HSI_DISABLE();
 80058dc:	fab3 f383 	clz	r3, r3
 80058e0:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80058e4:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80058e8:	009b      	lsls	r3, r3, #2
 80058ea:	f04f 0802 	mov.w	r8, #2
 80058ee:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80058f0:	f7fe ffb6 	bl	8004860 <HAL_GetTick>
 80058f4:	4607      	mov	r7, r0
 80058f6:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80058fa:	6822      	ldr	r2, [r4, #0]
 80058fc:	fa98 f3a8 	rbit	r3, r8
 8005900:	fab3 f383 	clz	r3, r3
 8005904:	fa06 f303 	lsl.w	r3, r6, r3
 8005908:	4213      	tst	r3, r2
 800590a:	f43f af17 	beq.w	800573c <HAL_RCC_OscConfig+0x18>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800590e:	f7fe ffa7 	bl	8004860 <HAL_GetTick>
 8005912:	1bc0      	subs	r0, r0, r7
 8005914:	2802      	cmp	r0, #2
 8005916:	d9ee      	bls.n	80058f6 <HAL_RCC_OscConfig+0x1d2>
 8005918:	e765      	b.n	80057e6 <HAL_RCC_OscConfig+0xc2>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800591a:	69aa      	ldr	r2, [r5, #24]
 800591c:	4e3f      	ldr	r6, [pc, #252]	@ (8005a1c <HAL_RCC_OscConfig+0x2f8>)
 800591e:	4940      	ldr	r1, [pc, #256]	@ (8005a20 <HAL_RCC_OscConfig+0x2fc>)
 8005920:	2401      	movs	r4, #1
 8005922:	b30a      	cbz	r2, 8005968 <HAL_RCC_OscConfig+0x244>
 8005924:	fa94 f3a4 	rbit	r3, r4
      __HAL_RCC_LSI_ENABLE();
 8005928:	fab3 f383 	clz	r3, r3
 800592c:	440b      	add	r3, r1
 800592e:	009b      	lsls	r3, r3, #2
 8005930:	2702      	movs	r7, #2
 8005932:	601c      	str	r4, [r3, #0]
      tickstart = HAL_GetTick();
 8005934:	f7fe ff94 	bl	8004860 <HAL_GetTick>
 8005938:	4680      	mov	r8, r0
 800593a:	fa97 f3a7 	rbit	r3, r7
 800593e:	fa97 f3a7 	rbit	r3, r7
 8005942:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005946:	6a72      	ldr	r2, [r6, #36]	@ 0x24
 8005948:	fa97 f3a7 	rbit	r3, r7
 800594c:	fab3 f383 	clz	r3, r3
 8005950:	fa04 f303 	lsl.w	r3, r4, r3
 8005954:	4213      	tst	r3, r2
 8005956:	f47f aef5 	bne.w	8005744 <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800595a:	f7fe ff81 	bl	8004860 <HAL_GetTick>
 800595e:	eba0 0008 	sub.w	r0, r0, r8
 8005962:	2802      	cmp	r0, #2
 8005964:	d9e9      	bls.n	800593a <HAL_RCC_OscConfig+0x216>
 8005966:	e73e      	b.n	80057e6 <HAL_RCC_OscConfig+0xc2>
 8005968:	fa94 f3a4 	rbit	r3, r4
      __HAL_RCC_LSI_DISABLE();
 800596c:	fab3 f383 	clz	r3, r3
 8005970:	440b      	add	r3, r1
 8005972:	009b      	lsls	r3, r3, #2
 8005974:	2702      	movs	r7, #2
 8005976:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8005978:	f7fe ff72 	bl	8004860 <HAL_GetTick>
 800597c:	4680      	mov	r8, r0
 800597e:	fa97 f3a7 	rbit	r3, r7
 8005982:	fa97 f3a7 	rbit	r3, r7
 8005986:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800598a:	6a72      	ldr	r2, [r6, #36]	@ 0x24
 800598c:	fa97 f3a7 	rbit	r3, r7
 8005990:	fab3 f383 	clz	r3, r3
 8005994:	fa04 f303 	lsl.w	r3, r4, r3
 8005998:	4213      	tst	r3, r2
 800599a:	f43f aed3 	beq.w	8005744 <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800599e:	f7fe ff5f 	bl	8004860 <HAL_GetTick>
 80059a2:	eba0 0008 	sub.w	r0, r0, r8
 80059a6:	2802      	cmp	r0, #2
 80059a8:	d9e9      	bls.n	800597e <HAL_RCC_OscConfig+0x25a>
 80059aa:	e71c      	b.n	80057e6 <HAL_RCC_OscConfig+0xc2>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80059ac:	4c1b      	ldr	r4, [pc, #108]	@ (8005a1c <HAL_RCC_OscConfig+0x2f8>)
 80059ae:	69e3      	ldr	r3, [r4, #28]
 80059b0:	00d9      	lsls	r1, r3, #3
 80059b2:	d431      	bmi.n	8005a18 <HAL_RCC_OscConfig+0x2f4>
      __HAL_RCC_PWR_CLK_ENABLE();
 80059b4:	69e3      	ldr	r3, [r4, #28]
 80059b6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80059ba:	61e3      	str	r3, [r4, #28]
 80059bc:	69e3      	ldr	r3, [r4, #28]
 80059be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80059c2:	9301      	str	r3, [sp, #4]
 80059c4:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80059c6:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80059c8:	4f16      	ldr	r7, [pc, #88]	@ (8005a24 <HAL_RCC_OscConfig+0x300>)
 80059ca:	683b      	ldr	r3, [r7, #0]
 80059cc:	05da      	lsls	r2, r3, #23
 80059ce:	d52b      	bpl.n	8005a28 <HAL_RCC_OscConfig+0x304>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80059d0:	68eb      	ldr	r3, [r5, #12]
 80059d2:	2b01      	cmp	r3, #1
 80059d4:	d139      	bne.n	8005a4a <HAL_RCC_OscConfig+0x326>
 80059d6:	6a23      	ldr	r3, [r4, #32]
 80059d8:	f043 0301 	orr.w	r3, r3, #1
 80059dc:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80059de:	f7fe ff3f 	bl	8004860 <HAL_GetTick>
 80059e2:	2702      	movs	r7, #2
 80059e4:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80059e6:	f04f 0901 	mov.w	r9, #1
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80059ea:	f241 3a88 	movw	sl, #5000	@ 0x1388
 80059ee:	fa97 f3a7 	rbit	r3, r7
 80059f2:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80059f6:	6a22      	ldr	r2, [r4, #32]
 80059f8:	fa97 f3a7 	rbit	r3, r7
 80059fc:	fab3 f383 	clz	r3, r3
 8005a00:	fa09 f303 	lsl.w	r3, r9, r3
 8005a04:	4213      	tst	r3, r2
 8005a06:	d053      	beq.n	8005ab0 <HAL_RCC_OscConfig+0x38c>
    if(pwrclkchanged == SET)
 8005a08:	2e00      	cmp	r6, #0
 8005a0a:	f43f ae9f 	beq.w	800574c <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 8005a0e:	69e3      	ldr	r3, [r4, #28]
 8005a10:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005a14:	61e3      	str	r3, [r4, #28]
 8005a16:	e699      	b.n	800574c <HAL_RCC_OscConfig+0x28>
    FlagStatus       pwrclkchanged = RESET;
 8005a18:	2600      	movs	r6, #0
 8005a1a:	e7d5      	b.n	80059c8 <HAL_RCC_OscConfig+0x2a4>
 8005a1c:	40021000 	.word	0x40021000
 8005a20:	10908120 	.word	0x10908120
 8005a24:	40007000 	.word	0x40007000
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005a28:	683b      	ldr	r3, [r7, #0]
 8005a2a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005a2e:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8005a30:	f7fe ff16 	bl	8004860 <HAL_GetTick>
 8005a34:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a36:	683b      	ldr	r3, [r7, #0]
 8005a38:	05db      	lsls	r3, r3, #23
 8005a3a:	d4c9      	bmi.n	80059d0 <HAL_RCC_OscConfig+0x2ac>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005a3c:	f7fe ff10 	bl	8004860 <HAL_GetTick>
 8005a40:	eba0 0008 	sub.w	r0, r0, r8
 8005a44:	2864      	cmp	r0, #100	@ 0x64
 8005a46:	d9f6      	bls.n	8005a36 <HAL_RCC_OscConfig+0x312>
 8005a48:	e6cd      	b.n	80057e6 <HAL_RCC_OscConfig+0xc2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005a4a:	bb1b      	cbnz	r3, 8005a94 <HAL_RCC_OscConfig+0x370>
 8005a4c:	6a23      	ldr	r3, [r4, #32]
 8005a4e:	f023 0301 	bic.w	r3, r3, #1
 8005a52:	6223      	str	r3, [r4, #32]
 8005a54:	6a23      	ldr	r3, [r4, #32]
 8005a56:	f023 0304 	bic.w	r3, r3, #4
 8005a5a:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8005a5c:	f7fe ff00 	bl	8004860 <HAL_GetTick>
 8005a60:	2702      	movs	r7, #2
 8005a62:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005a64:	f04f 0901 	mov.w	r9, #1
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005a68:	f241 3a88 	movw	sl, #5000	@ 0x1388
 8005a6c:	fa97 f3a7 	rbit	r3, r7
 8005a70:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005a74:	6a22      	ldr	r2, [r4, #32]
 8005a76:	fa97 f3a7 	rbit	r3, r7
 8005a7a:	fab3 f383 	clz	r3, r3
 8005a7e:	fa09 f303 	lsl.w	r3, r9, r3
 8005a82:	4213      	tst	r3, r2
 8005a84:	d0c0      	beq.n	8005a08 <HAL_RCC_OscConfig+0x2e4>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005a86:	f7fe feeb 	bl	8004860 <HAL_GetTick>
 8005a8a:	eba0 0008 	sub.w	r0, r0, r8
 8005a8e:	4550      	cmp	r0, sl
 8005a90:	d9ec      	bls.n	8005a6c <HAL_RCC_OscConfig+0x348>
 8005a92:	e6a8      	b.n	80057e6 <HAL_RCC_OscConfig+0xc2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005a94:	2b05      	cmp	r3, #5
 8005a96:	6a23      	ldr	r3, [r4, #32]
 8005a98:	d103      	bne.n	8005aa2 <HAL_RCC_OscConfig+0x37e>
 8005a9a:	f043 0304 	orr.w	r3, r3, #4
 8005a9e:	6223      	str	r3, [r4, #32]
 8005aa0:	e799      	b.n	80059d6 <HAL_RCC_OscConfig+0x2b2>
 8005aa2:	f023 0301 	bic.w	r3, r3, #1
 8005aa6:	6223      	str	r3, [r4, #32]
 8005aa8:	6a23      	ldr	r3, [r4, #32]
 8005aaa:	f023 0304 	bic.w	r3, r3, #4
 8005aae:	e795      	b.n	80059dc <HAL_RCC_OscConfig+0x2b8>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005ab0:	f7fe fed6 	bl	8004860 <HAL_GetTick>
 8005ab4:	eba0 0008 	sub.w	r0, r0, r8
 8005ab8:	4550      	cmp	r0, sl
 8005aba:	d998      	bls.n	80059ee <HAL_RCC_OscConfig+0x2ca>
 8005abc:	e693      	b.n	80057e6 <HAL_RCC_OscConfig+0xc2>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005abe:	4c46      	ldr	r4, [pc, #280]	@ (8005bd8 <HAL_RCC_OscConfig+0x4b4>)
 8005ac0:	6862      	ldr	r2, [r4, #4]
 8005ac2:	f002 020c 	and.w	r2, r2, #12
 8005ac6:	2a08      	cmp	r2, #8
 8005ac8:	d074      	beq.n	8005bb4 <HAL_RCC_OscConfig+0x490>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005aca:	2b02      	cmp	r3, #2
 8005acc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005ad0:	d14d      	bne.n	8005b6e <HAL_RCC_OscConfig+0x44a>
 8005ad2:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8005ad6:	fab3 f383 	clz	r3, r3
 8005ada:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8005ade:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8005ae2:	009b      	lsls	r3, r3, #2
 8005ae4:	2200      	movs	r2, #0
 8005ae6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8005ae8:	f7fe feba 	bl	8004860 <HAL_GetTick>
 8005aec:	f04f 7800 	mov.w	r8, #33554432	@ 0x2000000
 8005af0:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005af2:	2601      	movs	r6, #1
 8005af4:	fa98 f3a8 	rbit	r3, r8
 8005af8:	6822      	ldr	r2, [r4, #0]
 8005afa:	fa98 f3a8 	rbit	r3, r8
 8005afe:	fab3 f383 	clz	r3, r3
 8005b02:	fa06 f303 	lsl.w	r3, r6, r3
 8005b06:	4213      	tst	r3, r2
 8005b08:	d12b      	bne.n	8005b62 <HAL_RCC_OscConfig+0x43e>
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005b0a:	e9d5 1308 	ldrd	r1, r3, [r5, #32]
 8005b0e:	6862      	ldr	r2, [r4, #4]
 8005b10:	430b      	orrs	r3, r1
 8005b12:	f422 1274 	bic.w	r2, r2, #3997696	@ 0x3d0000
 8005b16:	4313      	orrs	r3, r2
 8005b18:	6063      	str	r3, [r4, #4]
 8005b1a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005b1e:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 8005b22:	fab3 f383 	clz	r3, r3
 8005b26:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8005b2a:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8005b2e:	009b      	lsls	r3, r3, #2
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005b30:	2701      	movs	r7, #1
        __HAL_RCC_PLL_ENABLE();
 8005b32:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 8005b34:	f7fe fe94 	bl	8004860 <HAL_GetTick>
 8005b38:	f04f 7600 	mov.w	r6, #33554432	@ 0x2000000
 8005b3c:	4605      	mov	r5, r0
 8005b3e:	fa96 f3a6 	rbit	r3, r6
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005b42:	6822      	ldr	r2, [r4, #0]
 8005b44:	fa96 f3a6 	rbit	r3, r6
 8005b48:	fab3 f383 	clz	r3, r3
 8005b4c:	fa07 f303 	lsl.w	r3, r7, r3
 8005b50:	4213      	tst	r3, r2
 8005b52:	f47f adff 	bne.w	8005754 <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005b56:	f7fe fe83 	bl	8004860 <HAL_GetTick>
 8005b5a:	1b40      	subs	r0, r0, r5
 8005b5c:	2802      	cmp	r0, #2
 8005b5e:	d9ee      	bls.n	8005b3e <HAL_RCC_OscConfig+0x41a>
 8005b60:	e641      	b.n	80057e6 <HAL_RCC_OscConfig+0xc2>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005b62:	f7fe fe7d 	bl	8004860 <HAL_GetTick>
 8005b66:	1bc0      	subs	r0, r0, r7
 8005b68:	2802      	cmp	r0, #2
 8005b6a:	d9c3      	bls.n	8005af4 <HAL_RCC_OscConfig+0x3d0>
 8005b6c:	e63b      	b.n	80057e6 <HAL_RCC_OscConfig+0xc2>
 8005b6e:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8005b72:	fab3 f383 	clz	r3, r3
 8005b76:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8005b7a:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8005b7e:	009b      	lsls	r3, r3, #2
 8005b80:	2200      	movs	r2, #0
 8005b82:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8005b84:	f7fe fe6c 	bl	8004860 <HAL_GetTick>
 8005b88:	f04f 7600 	mov.w	r6, #33554432	@ 0x2000000
 8005b8c:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005b8e:	2701      	movs	r7, #1
 8005b90:	fa96 f3a6 	rbit	r3, r6
 8005b94:	6822      	ldr	r2, [r4, #0]
 8005b96:	fa96 f3a6 	rbit	r3, r6
 8005b9a:	fab3 f383 	clz	r3, r3
 8005b9e:	fa07 f303 	lsl.w	r3, r7, r3
 8005ba2:	4213      	tst	r3, r2
 8005ba4:	f43f add6 	beq.w	8005754 <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005ba8:	f7fe fe5a 	bl	8004860 <HAL_GetTick>
 8005bac:	1b40      	subs	r0, r0, r5
 8005bae:	2802      	cmp	r0, #2
 8005bb0:	d9ee      	bls.n	8005b90 <HAL_RCC_OscConfig+0x46c>
 8005bb2:	e618      	b.n	80057e6 <HAL_RCC_OscConfig+0xc2>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005bb4:	2b01      	cmp	r3, #1
 8005bb6:	f43f adee 	beq.w	8005796 <HAL_RCC_OscConfig+0x72>
        pll_config = RCC->CFGR;
 8005bba:	6860      	ldr	r0, [r4, #4]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8005bbc:	6a2b      	ldr	r3, [r5, #32]
 8005bbe:	f400 3280 	and.w	r2, r0, #65536	@ 0x10000
 8005bc2:	429a      	cmp	r2, r3
 8005bc4:	f47f ade7 	bne.w	8005796 <HAL_RCC_OscConfig+0x72>
 8005bc8:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8005bca:	f400 1070 	and.w	r0, r0, #3932160	@ 0x3c0000
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8005bce:	1ac0      	subs	r0, r0, r3
 8005bd0:	bf18      	it	ne
 8005bd2:	2001      	movne	r0, #1
 8005bd4:	e608      	b.n	80057e8 <HAL_RCC_OscConfig+0xc4>
 8005bd6:	bf00      	nop
 8005bd8:	40021000 	.word	0x40021000

08005bdc <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 8005bdc:	4b0c      	ldr	r3, [pc, #48]	@ (8005c10 <HAL_RCC_GetSysClockFreq+0x34>)
 8005bde:	685a      	ldr	r2, [r3, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005be0:	f002 010c 	and.w	r1, r2, #12
 8005be4:	2908      	cmp	r1, #8
 8005be6:	d111      	bne.n	8005c0c <HAL_RCC_GetSysClockFreq+0x30>
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8005be8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8005bea:	480a      	ldr	r0, [pc, #40]	@ (8005c14 <HAL_RCC_GetSysClockFreq+0x38>)
 8005bec:	f3c2 4183 	ubfx	r1, r2, #18, #4
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8005bf0:	03d2      	lsls	r2, r2, #15
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8005bf2:	bf44      	itt	mi
 8005bf4:	f003 030f 	andmi.w	r3, r3, #15
 8005bf8:	4a07      	ldrmi	r2, [pc, #28]	@ (8005c18 <HAL_RCC_GetSysClockFreq+0x3c>)
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8005bfa:	5c40      	ldrb	r0, [r0, r1]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8005bfc:	bf49      	itett	mi
 8005bfe:	5cd2      	ldrbmi	r2, [r2, r3]
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8005c00:	4b06      	ldrpl	r3, [pc, #24]	@ (8005c1c <HAL_RCC_GetSysClockFreq+0x40>)
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005c02:	4b07      	ldrmi	r3, [pc, #28]	@ (8005c20 <HAL_RCC_GetSysClockFreq+0x44>)
 8005c04:	fbb3 f3f2 	udivmi	r3, r3, r2
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8005c08:	4358      	muls	r0, r3
 8005c0a:	4770      	bx	lr
      sysclockfreq = HSE_VALUE;
 8005c0c:	4804      	ldr	r0, [pc, #16]	@ (8005c20 <HAL_RCC_GetSysClockFreq+0x44>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8005c0e:	4770      	bx	lr
 8005c10:	40021000 	.word	0x40021000
 8005c14:	0801032f 	.word	0x0801032f
 8005c18:	0801031f 	.word	0x0801031f
 8005c1c:	003d0900 	.word	0x003d0900
 8005c20:	007a1200 	.word	0x007a1200

08005c24 <HAL_RCC_ClockConfig>:
{
 8005c24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c28:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8005c2a:	4604      	mov	r4, r0
 8005c2c:	b910      	cbnz	r0, 8005c34 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8005c2e:	2001      	movs	r0, #1
}
 8005c30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005c34:	4a4a      	ldr	r2, [pc, #296]	@ (8005d60 <HAL_RCC_ClockConfig+0x13c>)
 8005c36:	6813      	ldr	r3, [r2, #0]
 8005c38:	f003 0307 	and.w	r3, r3, #7
 8005c3c:	428b      	cmp	r3, r1
 8005c3e:	d32e      	bcc.n	8005c9e <HAL_RCC_ClockConfig+0x7a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005c40:	6822      	ldr	r2, [r4, #0]
 8005c42:	0791      	lsls	r1, r2, #30
 8005c44:	d436      	bmi.n	8005cb4 <HAL_RCC_ClockConfig+0x90>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005c46:	07d2      	lsls	r2, r2, #31
 8005c48:	d43c      	bmi.n	8005cc4 <HAL_RCC_ClockConfig+0xa0>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005c4a:	4a45      	ldr	r2, [pc, #276]	@ (8005d60 <HAL_RCC_ClockConfig+0x13c>)
 8005c4c:	6813      	ldr	r3, [r2, #0]
 8005c4e:	f003 0307 	and.w	r3, r3, #7
 8005c52:	42ab      	cmp	r3, r5
 8005c54:	d870      	bhi.n	8005d38 <HAL_RCC_ClockConfig+0x114>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c56:	6822      	ldr	r2, [r4, #0]
 8005c58:	4d42      	ldr	r5, [pc, #264]	@ (8005d64 <HAL_RCC_ClockConfig+0x140>)
 8005c5a:	f012 0f04 	tst.w	r2, #4
 8005c5e:	d177      	bne.n	8005d50 <HAL_RCC_ClockConfig+0x12c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c60:	0713      	lsls	r3, r2, #28
 8005c62:	d506      	bpl.n	8005c72 <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005c64:	686b      	ldr	r3, [r5, #4]
 8005c66:	6922      	ldr	r2, [r4, #16]
 8005c68:	f423 5360 	bic.w	r3, r3, #14336	@ 0x3800
 8005c6c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8005c70:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8005c72:	f7ff ffb3 	bl	8005bdc <HAL_RCC_GetSysClockFreq>
 8005c76:	686b      	ldr	r3, [r5, #4]
 8005c78:	22f0      	movs	r2, #240	@ 0xf0
 8005c7a:	fa92 f2a2 	rbit	r2, r2
 8005c7e:	fab2 f282 	clz	r2, r2
 8005c82:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005c86:	40d3      	lsrs	r3, r2
 8005c88:	4a37      	ldr	r2, [pc, #220]	@ (8005d68 <HAL_RCC_ClockConfig+0x144>)
 8005c8a:	5cd3      	ldrb	r3, [r2, r3]
 8005c8c:	40d8      	lsrs	r0, r3
 8005c8e:	4b37      	ldr	r3, [pc, #220]	@ (8005d6c <HAL_RCC_ClockConfig+0x148>)
 8005c90:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 8005c92:	4b37      	ldr	r3, [pc, #220]	@ (8005d70 <HAL_RCC_ClockConfig+0x14c>)
 8005c94:	6818      	ldr	r0, [r3, #0]
 8005c96:	f7fe fc39 	bl	800450c <HAL_InitTick>
  return HAL_OK;
 8005c9a:	2000      	movs	r0, #0
 8005c9c:	e7c8      	b.n	8005c30 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c9e:	6813      	ldr	r3, [r2, #0]
 8005ca0:	f023 0307 	bic.w	r3, r3, #7
 8005ca4:	430b      	orrs	r3, r1
 8005ca6:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005ca8:	6813      	ldr	r3, [r2, #0]
 8005caa:	f003 0307 	and.w	r3, r3, #7
 8005cae:	428b      	cmp	r3, r1
 8005cb0:	d1bd      	bne.n	8005c2e <HAL_RCC_ClockConfig+0xa>
 8005cb2:	e7c5      	b.n	8005c40 <HAL_RCC_ClockConfig+0x1c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005cb4:	492b      	ldr	r1, [pc, #172]	@ (8005d64 <HAL_RCC_ClockConfig+0x140>)
 8005cb6:	68a0      	ldr	r0, [r4, #8]
 8005cb8:	684b      	ldr	r3, [r1, #4]
 8005cba:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005cbe:	4303      	orrs	r3, r0
 8005cc0:	604b      	str	r3, [r1, #4]
 8005cc2:	e7c0      	b.n	8005c46 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005cc4:	6862      	ldr	r2, [r4, #4]
 8005cc6:	4e27      	ldr	r6, [pc, #156]	@ (8005d64 <HAL_RCC_ClockConfig+0x140>)
 8005cc8:	2a01      	cmp	r2, #1
 8005cca:	d124      	bne.n	8005d16 <HAL_RCC_ClockConfig+0xf2>
 8005ccc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005cd0:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005cd4:	6831      	ldr	r1, [r6, #0]
 8005cd6:	fa93 f3a3 	rbit	r3, r3
 8005cda:	fab3 f383 	clz	r3, r3
 8005cde:	fa02 f303 	lsl.w	r3, r2, r3
 8005ce2:	420b      	tst	r3, r1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ce4:	d0a3      	beq.n	8005c2e <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005ce6:	6873      	ldr	r3, [r6, #4]
 8005ce8:	f023 0303 	bic.w	r3, r3, #3
 8005cec:	4313      	orrs	r3, r2
 8005cee:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8005cf0:	f7fe fdb6 	bl	8004860 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005cf4:	f241 3888 	movw	r8, #5000	@ 0x1388
    tickstart = HAL_GetTick();
 8005cf8:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005cfa:	6873      	ldr	r3, [r6, #4]
 8005cfc:	6862      	ldr	r2, [r4, #4]
 8005cfe:	f003 030c 	and.w	r3, r3, #12
 8005d02:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8005d06:	d0a0      	beq.n	8005c4a <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005d08:	f7fe fdaa 	bl	8004860 <HAL_GetTick>
 8005d0c:	1bc0      	subs	r0, r0, r7
 8005d0e:	4540      	cmp	r0, r8
 8005d10:	d9f3      	bls.n	8005cfa <HAL_RCC_ClockConfig+0xd6>
        return HAL_TIMEOUT;
 8005d12:	2003      	movs	r0, #3
 8005d14:	e78c      	b.n	8005c30 <HAL_RCC_ClockConfig+0xc>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005d16:	2a02      	cmp	r2, #2
 8005d18:	bf0c      	ite	eq
 8005d1a:	f04f 7300 	moveq.w	r3, #33554432	@ 0x2000000
 8005d1e:	2302      	movne	r3, #2
 8005d20:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005d24:	6830      	ldr	r0, [r6, #0]
 8005d26:	fa93 f3a3 	rbit	r3, r3
 8005d2a:	2101      	movs	r1, #1
 8005d2c:	fab3 f383 	clz	r3, r3
 8005d30:	fa01 f303 	lsl.w	r3, r1, r3
 8005d34:	4203      	tst	r3, r0
 8005d36:	e7d5      	b.n	8005ce4 <HAL_RCC_ClockConfig+0xc0>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d38:	6813      	ldr	r3, [r2, #0]
 8005d3a:	f023 0307 	bic.w	r3, r3, #7
 8005d3e:	432b      	orrs	r3, r5
 8005d40:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d42:	6813      	ldr	r3, [r2, #0]
 8005d44:	f003 0307 	and.w	r3, r3, #7
 8005d48:	42ab      	cmp	r3, r5
 8005d4a:	f47f af70 	bne.w	8005c2e <HAL_RCC_ClockConfig+0xa>
 8005d4e:	e782      	b.n	8005c56 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005d50:	686b      	ldr	r3, [r5, #4]
 8005d52:	68e1      	ldr	r1, [r4, #12]
 8005d54:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8005d58:	430b      	orrs	r3, r1
 8005d5a:	606b      	str	r3, [r5, #4]
 8005d5c:	e780      	b.n	8005c60 <HAL_RCC_ClockConfig+0x3c>
 8005d5e:	bf00      	nop
 8005d60:	40022000 	.word	0x40022000
 8005d64:	40021000 	.word	0x40021000
 8005d68:	0801030f 	.word	0x0801030f
 8005d6c:	2000000c 	.word	0x2000000c
 8005d70:	20000014 	.word	0x20000014

08005d74 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8005d74:	4b08      	ldr	r3, [pc, #32]	@ (8005d98 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005d76:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8005d7a:	685b      	ldr	r3, [r3, #4]
 8005d7c:	fa92 f2a2 	rbit	r2, r2
 8005d80:	fab2 f282 	clz	r2, r2
 8005d84:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005d88:	40d3      	lsrs	r3, r2
 8005d8a:	4a04      	ldr	r2, [pc, #16]	@ (8005d9c <HAL_RCC_GetPCLK1Freq+0x28>)
 8005d8c:	5cd3      	ldrb	r3, [r2, r3]
 8005d8e:	4a04      	ldr	r2, [pc, #16]	@ (8005da0 <HAL_RCC_GetPCLK1Freq+0x2c>)
 8005d90:	6810      	ldr	r0, [r2, #0]
}    
 8005d92:	40d8      	lsrs	r0, r3
 8005d94:	4770      	bx	lr
 8005d96:	bf00      	nop
 8005d98:	40021000 	.word	0x40021000
 8005d9c:	08010307 	.word	0x08010307
 8005da0:	2000000c 	.word	0x2000000c

08005da4 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8005da4:	4b08      	ldr	r3, [pc, #32]	@ (8005dc8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005da6:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8005daa:	685b      	ldr	r3, [r3, #4]
 8005dac:	fa92 f2a2 	rbit	r2, r2
 8005db0:	fab2 f282 	clz	r2, r2
 8005db4:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8005db8:	40d3      	lsrs	r3, r2
 8005dba:	4a04      	ldr	r2, [pc, #16]	@ (8005dcc <HAL_RCC_GetPCLK2Freq+0x28>)
 8005dbc:	5cd3      	ldrb	r3, [r2, r3]
 8005dbe:	4a04      	ldr	r2, [pc, #16]	@ (8005dd0 <HAL_RCC_GetPCLK2Freq+0x2c>)
 8005dc0:	6810      	ldr	r0, [r2, #0]
} 
 8005dc2:	40d8      	lsrs	r0, r3
 8005dc4:	4770      	bx	lr
 8005dc6:	bf00      	nop
 8005dc8:	40021000 	.word	0x40021000
 8005dcc:	08010307 	.word	0x08010307
 8005dd0:	2000000c 	.word	0x2000000c

08005dd4 <HAL_RCC_GetClockConfig>:
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005dd4:	230f      	movs	r3, #15
 8005dd6:	6003      	str	r3, [r0, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005dd8:	4b0b      	ldr	r3, [pc, #44]	@ (8005e08 <HAL_RCC_GetClockConfig+0x34>)
 8005dda:	685a      	ldr	r2, [r3, #4]
 8005ddc:	f002 0203 	and.w	r2, r2, #3
 8005de0:	6042      	str	r2, [r0, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8005de2:	685a      	ldr	r2, [r3, #4]
 8005de4:	f002 02f0 	and.w	r2, r2, #240	@ 0xf0
 8005de8:	6082      	str	r2, [r0, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 8005dea:	685a      	ldr	r2, [r3, #4]
 8005dec:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
 8005df0:	60c2      	str	r2, [r0, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005df2:	685b      	ldr	r3, [r3, #4]
 8005df4:	08db      	lsrs	r3, r3, #3
 8005df6:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005dfa:	6103      	str	r3, [r0, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 8005dfc:	4b03      	ldr	r3, [pc, #12]	@ (8005e0c <HAL_RCC_GetClockConfig+0x38>)
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f003 0307 	and.w	r3, r3, #7
 8005e04:	600b      	str	r3, [r1, #0]
}
 8005e06:	4770      	bx	lr
 8005e08:	40021000 	.word	0x40021000
 8005e0c:	40022000 	.word	0x40022000

08005e10 <HAL_RCCEx_PeriphCLKConfig>:
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005e10:	6803      	ldr	r3, [r0, #0]
{
 8005e12:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005e16:	03dd      	lsls	r5, r3, #15
{
 8005e18:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005e1a:	d524      	bpl.n	8005e66 <HAL_RCCEx_PeriphCLKConfig+0x56>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005e1c:	4d78      	ldr	r5, [pc, #480]	@ (8006000 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8005e1e:	69eb      	ldr	r3, [r5, #28]
 8005e20:	00d8      	lsls	r0, r3, #3
 8005e22:	f100 8091 	bmi.w	8005f48 <HAL_RCCEx_PeriphCLKConfig+0x138>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005e26:	69eb      	ldr	r3, [r5, #28]
 8005e28:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005e2c:	61eb      	str	r3, [r5, #28]
 8005e2e:	69eb      	ldr	r3, [r5, #28]
 8005e30:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005e34:	9301      	str	r3, [sp, #4]
 8005e36:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8005e38:	2601      	movs	r6, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e3a:	4f72      	ldr	r7, [pc, #456]	@ (8006004 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8005e3c:	683b      	ldr	r3, [r7, #0]
 8005e3e:	05d9      	lsls	r1, r3, #23
 8005e40:	f140 8084 	bpl.w	8005f4c <HAL_RCCEx_PeriphCLKConfig+0x13c>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005e44:	6a2b      	ldr	r3, [r5, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005e46:	6862      	ldr	r2, [r4, #4]
 8005e48:	f413 7340 	ands.w	r3, r3, #768	@ 0x300
 8005e4c:	f040 8093 	bne.w	8005f76 <HAL_RCCEx_PeriphCLKConfig+0x166>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8005e50:	6a2b      	ldr	r3, [r5, #32]
 8005e52:	6862      	ldr	r2, [r4, #4]
 8005e54:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005e58:	4313      	orrs	r3, r2
 8005e5a:	622b      	str	r3, [r5, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005e5c:	b11e      	cbz	r6, 8005e66 <HAL_RCCEx_PeriphCLKConfig+0x56>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005e5e:	69eb      	ldr	r3, [r5, #28]
 8005e60:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005e64:	61eb      	str	r3, [r5, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005e66:	6823      	ldr	r3, [r4, #0]
 8005e68:	07df      	lsls	r7, r3, #31
 8005e6a:	d506      	bpl.n	8005e7a <HAL_RCCEx_PeriphCLKConfig+0x6a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005e6c:	4964      	ldr	r1, [pc, #400]	@ (8006000 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8005e6e:	68a0      	ldr	r0, [r4, #8]
 8005e70:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 8005e72:	f022 0203 	bic.w	r2, r2, #3
 8005e76:	4302      	orrs	r2, r0
 8005e78:	630a      	str	r2, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005e7a:	079e      	lsls	r6, r3, #30
 8005e7c:	d506      	bpl.n	8005e8c <HAL_RCCEx_PeriphCLKConfig+0x7c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005e7e:	4960      	ldr	r1, [pc, #384]	@ (8006000 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8005e80:	68e0      	ldr	r0, [r4, #12]
 8005e82:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 8005e84:	f422 3240 	bic.w	r2, r2, #196608	@ 0x30000
 8005e88:	4302      	orrs	r2, r0
 8005e8a:	630a      	str	r2, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005e8c:	075d      	lsls	r5, r3, #29
 8005e8e:	d506      	bpl.n	8005e9e <HAL_RCCEx_PeriphCLKConfig+0x8e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005e90:	495b      	ldr	r1, [pc, #364]	@ (8006000 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8005e92:	6920      	ldr	r0, [r4, #16]
 8005e94:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 8005e96:	f422 2240 	bic.w	r2, r2, #786432	@ 0xc0000
 8005e9a:	4302      	orrs	r2, r0
 8005e9c:	630a      	str	r2, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005e9e:	0698      	lsls	r0, r3, #26
 8005ea0:	d506      	bpl.n	8005eb0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005ea2:	4957      	ldr	r1, [pc, #348]	@ (8006000 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8005ea4:	69e0      	ldr	r0, [r4, #28]
 8005ea6:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 8005ea8:	f022 0210 	bic.w	r2, r2, #16
 8005eac:	4302      	orrs	r2, r0
 8005eae:	630a      	str	r2, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005eb0:	0399      	lsls	r1, r3, #14
 8005eb2:	d506      	bpl.n	8005ec2 <HAL_RCCEx_PeriphCLKConfig+0xb2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8005eb4:	4952      	ldr	r1, [pc, #328]	@ (8006000 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8005eb6:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8005eb8:	684a      	ldr	r2, [r1, #4]
 8005eba:	f422 0280 	bic.w	r2, r2, #4194304	@ 0x400000
 8005ebe:	4302      	orrs	r2, r0
 8005ec0:	604a      	str	r2, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005ec2:	065a      	lsls	r2, r3, #25
 8005ec4:	d506      	bpl.n	8005ed4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005ec6:	494e      	ldr	r1, [pc, #312]	@ (8006000 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8005ec8:	6a20      	ldr	r0, [r4, #32]
 8005eca:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 8005ecc:	f022 0220 	bic.w	r2, r2, #32
 8005ed0:	4302      	orrs	r2, r0
 8005ed2:	630a      	str	r2, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005ed4:	071f      	lsls	r7, r3, #28
 8005ed6:	d506      	bpl.n	8005ee6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005ed8:	4949      	ldr	r1, [pc, #292]	@ (8006000 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8005eda:	6960      	ldr	r0, [r4, #20]
 8005edc:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 8005ede:	f422 1240 	bic.w	r2, r2, #3145728	@ 0x300000
 8005ee2:	4302      	orrs	r2, r0
 8005ee4:	630a      	str	r2, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005ee6:	06de      	lsls	r6, r3, #27
 8005ee8:	d506      	bpl.n	8005ef8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005eea:	4945      	ldr	r1, [pc, #276]	@ (8006000 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8005eec:	69a0      	ldr	r0, [r4, #24]
 8005eee:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 8005ef0:	f422 0240 	bic.w	r2, r2, #12582912	@ 0xc00000
 8005ef4:	4302      	orrs	r2, r0
 8005ef6:	630a      	str	r2, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005ef8:	059d      	lsls	r5, r3, #22
 8005efa:	d506      	bpl.n	8005f0a <HAL_RCCEx_PeriphCLKConfig+0xfa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005efc:	4940      	ldr	r1, [pc, #256]	@ (8006000 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8005efe:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8005f00:	684a      	ldr	r2, [r1, #4]
 8005f02:	f422 0200 	bic.w	r2, r2, #8388608	@ 0x800000
 8005f06:	4302      	orrs	r2, r0
 8005f08:	604a      	str	r2, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005f0a:	0618      	lsls	r0, r3, #24
 8005f0c:	d506      	bpl.n	8005f1c <HAL_RCCEx_PeriphCLKConfig+0x10c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005f0e:	493c      	ldr	r1, [pc, #240]	@ (8006000 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8005f10:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8005f12:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 8005f14:	f422 72f8 	bic.w	r2, r2, #496	@ 0x1f0
 8005f18:	4302      	orrs	r2, r0
 8005f1a:	62ca      	str	r2, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8005f1c:	05d9      	lsls	r1, r3, #23
 8005f1e:	d506      	bpl.n	8005f2e <HAL_RCCEx_PeriphCLKConfig+0x11e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8005f20:	4937      	ldr	r1, [pc, #220]	@ (8006000 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8005f22:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8005f24:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 8005f26:	f422 5278 	bic.w	r2, r2, #15872	@ 0x3e00
 8005f2a:	4302      	orrs	r2, r0
 8005f2c:	62ca      	str	r2, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8005f2e:	04da      	lsls	r2, r3, #19
 8005f30:	d506      	bpl.n	8005f40 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8005f32:	4933      	ldr	r1, [pc, #204]	@ (8006000 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8005f34:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8005f36:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 8005f38:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005f3c:	4302      	orrs	r2, r0
 8005f3e:	630a      	str	r2, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8005f40:	049b      	lsls	r3, r3, #18
 8005f42:	d454      	bmi.n	8005fee <HAL_RCCEx_PeriphCLKConfig+0x1de>
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8005f44:	2000      	movs	r0, #0
 8005f46:	e013      	b.n	8005f70 <HAL_RCCEx_PeriphCLKConfig+0x160>
  FlagStatus       pwrclkchanged = RESET;
 8005f48:	2600      	movs	r6, #0
 8005f4a:	e776      	b.n	8005e3a <HAL_RCCEx_PeriphCLKConfig+0x2a>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005f4c:	683b      	ldr	r3, [r7, #0]
 8005f4e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005f52:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8005f54:	f7fe fc84 	bl	8004860 <HAL_GetTick>
 8005f58:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f5a:	683b      	ldr	r3, [r7, #0]
 8005f5c:	05da      	lsls	r2, r3, #23
 8005f5e:	f53f af71 	bmi.w	8005e44 <HAL_RCCEx_PeriphCLKConfig+0x34>
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005f62:	f7fe fc7d 	bl	8004860 <HAL_GetTick>
 8005f66:	eba0 0008 	sub.w	r0, r0, r8
 8005f6a:	2864      	cmp	r0, #100	@ 0x64
 8005f6c:	d9f5      	bls.n	8005f5a <HAL_RCCEx_PeriphCLKConfig+0x14a>
          return HAL_TIMEOUT;
 8005f6e:	2003      	movs	r0, #3
}
 8005f70:	b002      	add	sp, #8
 8005f72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005f76:	f402 7240 	and.w	r2, r2, #768	@ 0x300
 8005f7a:	429a      	cmp	r2, r3
 8005f7c:	f43f af68 	beq.w	8005e50 <HAL_RCCEx_PeriphCLKConfig+0x40>
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005f80:	6a29      	ldr	r1, [r5, #32]
 8005f82:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8005f86:	f421 7040 	bic.w	r0, r1, #768	@ 0x300
 8005f8a:	fa93 f2a3 	rbit	r2, r3
      __HAL_RCC_BACKUPRESET_FORCE();
 8005f8e:	f8df c078 	ldr.w	ip, [pc, #120]	@ 8006008 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8005f92:	fab2 f282 	clz	r2, r2
 8005f96:	4462      	add	r2, ip
 8005f98:	0092      	lsls	r2, r2, #2
 8005f9a:	2701      	movs	r7, #1
 8005f9c:	6017      	str	r7, [r2, #0]
 8005f9e:	fa93 f3a3 	rbit	r3, r3
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005fa2:	fab3 f383 	clz	r3, r3
 8005fa6:	4463      	add	r3, ip
 8005fa8:	009b      	lsls	r3, r3, #2
 8005faa:	2200      	movs	r2, #0
 8005fac:	601a      	str	r2, [r3, #0]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005fae:	07cb      	lsls	r3, r1, #31
      RCC->BDCR = temp_reg;
 8005fb0:	6228      	str	r0, [r5, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005fb2:	f57f af4d 	bpl.w	8005e50 <HAL_RCCEx_PeriphCLKConfig+0x40>
        tickstart = HAL_GetTick();
 8005fb6:	f7fe fc53 	bl	8004860 <HAL_GetTick>
 8005fba:	f04f 0802 	mov.w	r8, #2
 8005fbe:	4681      	mov	r9, r0
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005fc0:	f241 3a88 	movw	sl, #5000	@ 0x1388
 8005fc4:	fa98 f3a8 	rbit	r3, r8
 8005fc8:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005fcc:	6a2a      	ldr	r2, [r5, #32]
 8005fce:	fa98 f3a8 	rbit	r3, r8
 8005fd2:	fab3 f383 	clz	r3, r3
 8005fd6:	fa07 f303 	lsl.w	r3, r7, r3
 8005fda:	4213      	tst	r3, r2
 8005fdc:	f47f af38 	bne.w	8005e50 <HAL_RCCEx_PeriphCLKConfig+0x40>
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005fe0:	f7fe fc3e 	bl	8004860 <HAL_GetTick>
 8005fe4:	eba0 0009 	sub.w	r0, r0, r9
 8005fe8:	4550      	cmp	r0, sl
 8005fea:	d9eb      	bls.n	8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 8005fec:	e7bf      	b.n	8005f6e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8005fee:	4a04      	ldr	r2, [pc, #16]	@ (8006000 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8005ff0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005ff2:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8005ff4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005ff8:	430b      	orrs	r3, r1
 8005ffa:	6313      	str	r3, [r2, #48]	@ 0x30
 8005ffc:	e7a2      	b.n	8005f44 <HAL_RCCEx_PeriphCLKConfig+0x134>
 8005ffe:	bf00      	nop
 8006000:	40021000 	.word	0x40021000
 8006004:	40007000 	.word	0x40007000
 8006008:	10908100 	.word	0x10908100

0800600c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800600c:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 800600e:	6803      	ldr	r3, [r0, #0]
 8006010:	4a09      	ldr	r2, [pc, #36]	@ (8006038 <HAL_RTC_WaitForSynchro+0x2c>)
 8006012:	60da      	str	r2, [r3, #12]
{
 8006014:	4604      	mov	r4, r0

  /* Get tick */
  tickstart = HAL_GetTick();
 8006016:	f7fe fc23 	bl	8004860 <HAL_GetTick>
 800601a:	4605      	mov	r5, r0

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800601c:	6823      	ldr	r3, [r4, #0]
 800601e:	68db      	ldr	r3, [r3, #12]
 8006020:	069b      	lsls	r3, r3, #26
 8006022:	d501      	bpl.n	8006028 <HAL_RTC_WaitForSynchro+0x1c>
    {
      return HAL_TIMEOUT;
    }
  }

  return HAL_OK;
 8006024:	2000      	movs	r0, #0
}
 8006026:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006028:	f7fe fc1a 	bl	8004860 <HAL_GetTick>
 800602c:	1b40      	subs	r0, r0, r5
 800602e:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8006032:	d9f3      	bls.n	800601c <HAL_RTC_WaitForSynchro+0x10>
      return HAL_TIMEOUT;
 8006034:	2003      	movs	r0, #3
 8006036:	e7f6      	b.n	8006026 <HAL_RTC_WaitForSynchro+0x1a>
 8006038:	0001ff5f 	.word	0x0001ff5f

0800603c <RTC_EnterInitMode>:
{
  uint32_t tickstart = 0U;
  HAL_StatusTypeDef status = HAL_OK;

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 800603c:	6803      	ldr	r3, [r0, #0]
{
 800603e:	b570      	push	{r4, r5, r6, lr}
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8006040:	68dc      	ldr	r4, [r3, #12]
 8006042:	f014 0440 	ands.w	r4, r4, #64	@ 0x40
{
 8006046:	4605      	mov	r5, r0
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8006048:	d117      	bne.n	800607a <RTC_EnterInitMode+0x3e>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800604a:	68da      	ldr	r2, [r3, #12]
 800604c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8006050:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006052:	f7fe fc05 	bl	8004860 <HAL_GetTick>
 8006056:	4606      	mov	r6, r0

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8006058:	682b      	ldr	r3, [r5, #0]
 800605a:	68db      	ldr	r3, [r3, #12]
 800605c:	065b      	lsls	r3, r3, #25
 800605e:	d400      	bmi.n	8006062 <RTC_EnterInitMode+0x26>
 8006060:	b10c      	cbz	r4, 8006066 <RTC_EnterInitMode+0x2a>
      }
    }
  }

  return status;
}
 8006062:	4620      	mov	r0, r4
 8006064:	bd70      	pop	{r4, r5, r6, pc}
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006066:	f7fe fbfb 	bl	8004860 <HAL_GetTick>
 800606a:	1b80      	subs	r0, r0, r6
 800606c:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
        hrtc->State = HAL_RTC_STATE_ERROR;
 8006070:	bf82      	ittt	hi
 8006072:	2304      	movhi	r3, #4
 8006074:	776b      	strbhi	r3, [r5, #29]
        status = HAL_ERROR;
 8006076:	2401      	movhi	r4, #1
 8006078:	e7ee      	b.n	8006058 <RTC_EnterInitMode+0x1c>
  HAL_StatusTypeDef status = HAL_OK;
 800607a:	2400      	movs	r4, #0
 800607c:	e7f1      	b.n	8006062 <RTC_EnterInitMode+0x26>

0800607e <RTC_ExitInitMode>:
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
  HAL_StatusTypeDef status = HAL_OK;

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800607e:	6803      	ldr	r3, [r0, #0]
 8006080:	68da      	ldr	r2, [r3, #12]
 8006082:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
{
 8006086:	b510      	push	{r4, lr}
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8006088:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800608a:	689b      	ldr	r3, [r3, #8]
 800608c:	069b      	lsls	r3, r3, #26
{
 800608e:	4604      	mov	r4, r0
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8006090:	d501      	bpl.n	8006096 <RTC_ExitInitMode+0x18>
  HAL_StatusTypeDef status = HAL_OK;
 8006092:	2000      	movs	r0, #0
      status = HAL_ERROR;
    }
  }

  return status;
}
 8006094:	bd10      	pop	{r4, pc}
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006096:	f7ff ffb9 	bl	800600c <HAL_RTC_WaitForSynchro>
 800609a:	2800      	cmp	r0, #0
 800609c:	d0f9      	beq.n	8006092 <RTC_ExitInitMode+0x14>
      hrtc->State = HAL_RTC_STATE_ERROR;
 800609e:	2304      	movs	r3, #4
 80060a0:	7763      	strb	r3, [r4, #29]
      status = HAL_ERROR;
 80060a2:	2001      	movs	r0, #1
 80060a4:	e7f6      	b.n	8006094 <RTC_ExitInitMode+0x16>

080060a6 <HAL_RTC_Init>:
{
 80060a6:	b510      	push	{r4, lr}
  if (hrtc == NULL)
 80060a8:	4604      	mov	r4, r0
 80060aa:	2800      	cmp	r0, #0
 80060ac:	d041      	beq.n	8006132 <HAL_RTC_Init+0x8c>
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80060ae:	7f43      	ldrb	r3, [r0, #29]
 80060b0:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 80060b4:	b913      	cbnz	r3, 80060bc <HAL_RTC_Init+0x16>
    hrtc->Lock = HAL_UNLOCKED;
 80060b6:	7702      	strb	r2, [r0, #28]
    HAL_RTC_MspInit(hrtc);
 80060b8:	f7fe f8f0 	bl	800429c <HAL_RTC_MspInit>
  hrtc->State = HAL_RTC_STATE_BUSY;
 80060bc:	2302      	movs	r3, #2
 80060be:	7763      	strb	r3, [r4, #29]
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80060c0:	6823      	ldr	r3, [r4, #0]
 80060c2:	68da      	ldr	r2, [r3, #12]
 80060c4:	06d2      	lsls	r2, r2, #27
 80060c6:	d503      	bpl.n	80060d0 <HAL_RTC_Init+0x2a>
    hrtc->State = HAL_RTC_STATE_READY;
 80060c8:	2301      	movs	r3, #1
 80060ca:	7763      	strb	r3, [r4, #29]
 80060cc:	2000      	movs	r0, #0
}
 80060ce:	bd10      	pop	{r4, pc}
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80060d0:	22ca      	movs	r2, #202	@ 0xca
 80060d2:	625a      	str	r2, [r3, #36]	@ 0x24
 80060d4:	2253      	movs	r2, #83	@ 0x53
 80060d6:	625a      	str	r2, [r3, #36]	@ 0x24
    status = RTC_EnterInitMode(hrtc);
 80060d8:	4620      	mov	r0, r4
 80060da:	f7ff ffaf 	bl	800603c <RTC_EnterInitMode>
    if (status == HAL_OK)
 80060de:	bb10      	cbnz	r0, 8006126 <HAL_RTC_Init+0x80>
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80060e0:	6823      	ldr	r3, [r4, #0]
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80060e2:	6920      	ldr	r0, [r4, #16]
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80060e4:	689a      	ldr	r2, [r3, #8]
 80060e6:	f422 02e0 	bic.w	r2, r2, #7340032	@ 0x700000
 80060ea:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80060ee:	609a      	str	r2, [r3, #8]
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80060f0:	6862      	ldr	r2, [r4, #4]
 80060f2:	6899      	ldr	r1, [r3, #8]
 80060f4:	4302      	orrs	r2, r0
 80060f6:	6960      	ldr	r0, [r4, #20]
 80060f8:	4302      	orrs	r2, r0
 80060fa:	430a      	orrs	r2, r1
 80060fc:	609a      	str	r2, [r3, #8]
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80060fe:	68e2      	ldr	r2, [r4, #12]
 8006100:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8006102:	691a      	ldr	r2, [r3, #16]
 8006104:	68a1      	ldr	r1, [r4, #8]
 8006106:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800610a:	611a      	str	r2, [r3, #16]
      status = RTC_ExitInitMode(hrtc);
 800610c:	4620      	mov	r0, r4
 800610e:	f7ff ffb6 	bl	800607e <RTC_ExitInitMode>
    if (status == HAL_OK)
 8006112:	b940      	cbnz	r0, 8006126 <HAL_RTC_Init+0x80>
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8006114:	6823      	ldr	r3, [r4, #0]
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8006116:	69a1      	ldr	r1, [r4, #24]
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8006118:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800611a:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800611e:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8006120:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006122:	430a      	orrs	r2, r1
 8006124:	641a      	str	r2, [r3, #64]	@ 0x40
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006126:	6823      	ldr	r3, [r4, #0]
 8006128:	22ff      	movs	r2, #255	@ 0xff
 800612a:	625a      	str	r2, [r3, #36]	@ 0x24
  if (status == HAL_OK)
 800612c:	2800      	cmp	r0, #0
 800612e:	d0cb      	beq.n	80060c8 <HAL_RTC_Init+0x22>
 8006130:	e7cd      	b.n	80060ce <HAL_RTC_Init+0x28>
    return HAL_ERROR;
 8006132:	2001      	movs	r0, #1
 8006134:	e7cb      	b.n	80060ce <HAL_RTC_Init+0x28>

08006136 <RTC_ByteToBcd2>:
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
  uint32_t bcdhigh = 0U;
 8006136:	2300      	movs	r3, #0

  while (number >= 10U)
 8006138:	2809      	cmp	r0, #9
 800613a:	d803      	bhi.n	8006144 <RTC_ByteToBcd2+0xe>
  {
    bcdhigh++;
    number -= 10U;
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 800613c:	ea40 1003 	orr.w	r0, r0, r3, lsl #4
}
 8006140:	b2c0      	uxtb	r0, r0
 8006142:	4770      	bx	lr
    number -= 10U;
 8006144:	380a      	subs	r0, #10
    bcdhigh++;
 8006146:	3301      	adds	r3, #1
    number -= 10U;
 8006148:	b2c0      	uxtb	r0, r0
 800614a:	e7f5      	b.n	8006138 <RTC_ByteToBcd2+0x2>

0800614c <HAL_RTC_SetTime>:
{
 800614c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(hrtc);
 8006150:	7f03      	ldrb	r3, [r0, #28]
 8006152:	2b01      	cmp	r3, #1
{
 8006154:	4606      	mov	r6, r0
 8006156:	460f      	mov	r7, r1
 8006158:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(hrtc);
 800615c:	d041      	beq.n	80061e2 <HAL_RTC_SetTime+0x96>
 800615e:	2301      	movs	r3, #1
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006160:	6831      	ldr	r1, [r6, #0]
  __HAL_LOCK(hrtc);
 8006162:	7733      	strb	r3, [r6, #28]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006164:	7770      	strb	r0, [r6, #29]
  if (Format == RTC_FORMAT_BIN)
 8006166:	7838      	ldrb	r0, [r7, #0]
 8006168:	787d      	ldrb	r5, [r7, #1]
 800616a:	78bc      	ldrb	r4, [r7, #2]
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800616c:	688b      	ldr	r3, [r1, #8]
  if (Format == RTC_FORMAT_BIN)
 800616e:	2a00      	cmp	r2, #0
 8006170:	d139      	bne.n	80061e6 <HAL_RTC_SetTime+0x9a>
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006172:	f013 0340 	ands.w	r3, r3, #64	@ 0x40
      sTime->TimeFormat = 0x00U;
 8006176:	bf08      	it	eq
 8006178:	70fb      	strbeq	r3, [r7, #3]
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800617a:	f7ff ffdc 	bl	8006136 <RTC_ByteToBcd2>
 800617e:	4680      	mov	r8, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006180:	4628      	mov	r0, r5
 8006182:	f7ff ffd8 	bl	8006136 <RTC_ByteToBcd2>
 8006186:	4602      	mov	r2, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8006188:	4620      	mov	r0, r4
 800618a:	f7ff ffd4 	bl	8006136 <RTC_ByteToBcd2>
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 800618e:	78fb      	ldrb	r3, [r7, #3]
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8006190:	ea40 5383 	orr.w	r3, r0, r3, lsl #22
 8006194:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8006198:	ea43 2402 	orr.w	r4, r3, r2, lsl #8
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800619c:	23ca      	movs	r3, #202	@ 0xca
 800619e:	624b      	str	r3, [r1, #36]	@ 0x24
 80061a0:	2353      	movs	r3, #83	@ 0x53
 80061a2:	624b      	str	r3, [r1, #36]	@ 0x24
  status = RTC_EnterInitMode(hrtc);
 80061a4:	4630      	mov	r0, r6
 80061a6:	f7ff ff49 	bl	800603c <RTC_EnterInitMode>
  if (status == HAL_OK)
 80061aa:	b9a8      	cbnz	r0, 80061d8 <HAL_RTC_SetTime+0x8c>
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80061ac:	6832      	ldr	r2, [r6, #0]
 80061ae:	f004 347f 	and.w	r4, r4, #2139062143	@ 0x7f7f7f7f
 80061b2:	f024 44fe 	bic.w	r4, r4, #2130706432	@ 0x7f000000
 80061b6:	6014      	str	r4, [r2, #0]
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 80061b8:	6893      	ldr	r3, [r2, #8]
 80061ba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80061be:	6093      	str	r3, [r2, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80061c0:	e9d7 3003 	ldrd	r3, r0, [r7, #12]
 80061c4:	6891      	ldr	r1, [r2, #8]
 80061c6:	4303      	orrs	r3, r0
 80061c8:	430b      	orrs	r3, r1
 80061ca:	6093      	str	r3, [r2, #8]
    status = RTC_ExitInitMode(hrtc);
 80061cc:	4630      	mov	r0, r6
 80061ce:	f7ff ff56 	bl	800607e <RTC_ExitInitMode>
  if (status == HAL_OK)
 80061d2:	b908      	cbnz	r0, 80061d8 <HAL_RTC_SetTime+0x8c>
    hrtc->State = HAL_RTC_STATE_READY;
 80061d4:	2301      	movs	r3, #1
 80061d6:	7773      	strb	r3, [r6, #29]
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80061d8:	6833      	ldr	r3, [r6, #0]
 80061da:	22ff      	movs	r2, #255	@ 0xff
 80061dc:	625a      	str	r2, [r3, #36]	@ 0x24
  __HAL_UNLOCK(hrtc);
 80061de:	2300      	movs	r3, #0
 80061e0:	7733      	strb	r3, [r6, #28]
}
 80061e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80061e6:	f013 0340 	ands.w	r3, r3, #64	@ 0x40
      sTime->TimeFormat = 0x00U;
 80061ea:	bf08      	it	eq
 80061ec:	70fb      	strbeq	r3, [r7, #3]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80061ee:	022d      	lsls	r5, r5, #8
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80061f0:	78fa      	ldrb	r2, [r7, #3]
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80061f2:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80061f6:	ea45 0304 	orr.w	r3, r5, r4
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80061fa:	ea43 5482 	orr.w	r4, r3, r2, lsl #22
 80061fe:	e7cd      	b.n	800619c <HAL_RTC_SetTime+0x50>

08006200 <HAL_RTC_SetDate>:
{
 8006200:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hrtc);
 8006202:	7f03      	ldrb	r3, [r0, #28]
 8006204:	2b01      	cmp	r3, #1
{
 8006206:	4605      	mov	r5, r0
 8006208:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(hrtc);
 800620c:	d027      	beq.n	800625e <HAL_RTC_SetDate+0x5e>
 800620e:	2301      	movs	r3, #1
 8006210:	772b      	strb	r3, [r5, #28]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006212:	7768      	strb	r0, [r5, #29]
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8006214:	780e      	ldrb	r6, [r1, #0]
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8006216:	78c8      	ldrb	r0, [r1, #3]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8006218:	784c      	ldrb	r4, [r1, #1]
                  ((uint32_t) sDate->Date)                      | \
 800621a:	788f      	ldrb	r7, [r1, #2]
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800621c:	0376      	lsls	r6, r6, #13
  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800621e:	b1fa      	cbz	r2, 8006260 <HAL_RTC_SetDate+0x60>
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8006220:	ea46 4300 	orr.w	r3, r6, r0, lsl #16
 8006224:	433b      	orrs	r3, r7
 8006226:	ea43 2404 	orr.w	r4, r3, r4, lsl #8
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800622a:	682b      	ldr	r3, [r5, #0]
 800622c:	22ca      	movs	r2, #202	@ 0xca
 800622e:	625a      	str	r2, [r3, #36]	@ 0x24
 8006230:	2253      	movs	r2, #83	@ 0x53
 8006232:	625a      	str	r2, [r3, #36]	@ 0x24
  status = RTC_EnterInitMode(hrtc);
 8006234:	4628      	mov	r0, r5
 8006236:	f7ff ff01 	bl	800603c <RTC_EnterInitMode>
  if (status == HAL_OK)
 800623a:	b958      	cbnz	r0, 8006254 <HAL_RTC_SetDate+0x54>
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800623c:	682a      	ldr	r2, [r5, #0]
 800623e:	f024 447f 	bic.w	r4, r4, #4278190080	@ 0xff000000
 8006242:	f024 04c0 	bic.w	r4, r4, #192	@ 0xc0
 8006246:	6054      	str	r4, [r2, #4]
    status = RTC_ExitInitMode(hrtc);
 8006248:	4628      	mov	r0, r5
 800624a:	f7ff ff18 	bl	800607e <RTC_ExitInitMode>
  if (status == HAL_OK)
 800624e:	b908      	cbnz	r0, 8006254 <HAL_RTC_SetDate+0x54>
    hrtc->State = HAL_RTC_STATE_READY;
 8006250:	2301      	movs	r3, #1
 8006252:	776b      	strb	r3, [r5, #29]
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006254:	682b      	ldr	r3, [r5, #0]
 8006256:	22ff      	movs	r2, #255	@ 0xff
 8006258:	625a      	str	r2, [r3, #36]	@ 0x24
  __HAL_UNLOCK(hrtc);
 800625a:	2300      	movs	r3, #0
 800625c:	772b      	strb	r3, [r5, #28]
}
 800625e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8006260:	06e3      	lsls	r3, r4, #27
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8006262:	bf42      	ittt	mi
 8006264:	f024 0410 	bicmi.w	r4, r4, #16
 8006268:	340a      	addmi	r4, #10
 800626a:	704c      	strbmi	r4, [r1, #1]
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800626c:	f7ff ff63 	bl	8006136 <RTC_ByteToBcd2>
 8006270:	4604      	mov	r4, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8006272:	7848      	ldrb	r0, [r1, #1]
 8006274:	f7ff ff5f 	bl	8006136 <RTC_ByteToBcd2>
 8006278:	4602      	mov	r2, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 800627a:	4638      	mov	r0, r7
 800627c:	f7ff ff5b 	bl	8006136 <RTC_ByteToBcd2>
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8006280:	ea40 0306 	orr.w	r3, r0, r6
 8006284:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8006288:	ea43 2402 	orr.w	r4, r3, r2, lsl #8
 800628c:	e7cd      	b.n	800622a <HAL_RTC_SetDate+0x2a>

0800628e <RTC_Bcd2ToByte>:
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
  uint32_t tens = 0U;
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 800628e:	0903      	lsrs	r3, r0, #4
 8006290:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 8006294:	f000 000f 	and.w	r0, r0, #15
 8006298:	eb00 0043 	add.w	r0, r0, r3, lsl #1
}
 800629c:	b2c0      	uxtb	r0, r0
 800629e:	4770      	bx	lr

080062a0 <HAL_RTC_GetTime>:
{
 80062a0:	b538      	push	{r3, r4, r5, lr}
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80062a2:	6803      	ldr	r3, [r0, #0]
 80062a4:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 80062a6:	6048      	str	r0, [r1, #4]
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80062a8:	6918      	ldr	r0, [r3, #16]
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80062aa:	681b      	ldr	r3, [r3, #0]
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80062ac:	f3c0 000e 	ubfx	r0, r0, #0, #15
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 80062b0:	f3c3 2506 	ubfx	r5, r3, #8, #7
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 80062b4:	f003 047f 	and.w	r4, r3, #127	@ 0x7f
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80062b8:	6088      	str	r0, [r1, #8]
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 80062ba:	f3c3 4005 	ubfx	r0, r3, #16, #6
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 80062be:	f3c3 5380 	ubfx	r3, r3, #22, #1
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 80062c2:	7008      	strb	r0, [r1, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 80062c4:	704d      	strb	r5, [r1, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 80062c6:	708c      	strb	r4, [r1, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 80062c8:	70cb      	strb	r3, [r1, #3]
  if (Format == RTC_FORMAT_BIN)
 80062ca:	b952      	cbnz	r2, 80062e2 <HAL_RTC_GetTime+0x42>
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80062cc:	f7ff ffdf 	bl	800628e <RTC_Bcd2ToByte>
 80062d0:	7008      	strb	r0, [r1, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80062d2:	4628      	mov	r0, r5
 80062d4:	f7ff ffdb 	bl	800628e <RTC_Bcd2ToByte>
 80062d8:	7048      	strb	r0, [r1, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80062da:	4620      	mov	r0, r4
 80062dc:	f7ff ffd7 	bl	800628e <RTC_Bcd2ToByte>
 80062e0:	7088      	strb	r0, [r1, #2]
}
 80062e2:	2000      	movs	r0, #0
 80062e4:	bd38      	pop	{r3, r4, r5, pc}

080062e6 <HAL_RTC_GetDate>:
{
 80062e6:	b538      	push	{r3, r4, r5, lr}
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80062e8:	6803      	ldr	r3, [r0, #0]
 80062ea:	685b      	ldr	r3, [r3, #4]
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80062ec:	f3c3 4007 	ubfx	r0, r3, #16, #8
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80062f0:	f3c3 2504 	ubfx	r5, r3, #8, #5
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 80062f4:	f003 043f 	and.w	r4, r3, #63	@ 0x3f
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 80062f8:	f3c3 3342 	ubfx	r3, r3, #13, #3
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80062fc:	70c8      	strb	r0, [r1, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80062fe:	704d      	strb	r5, [r1, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8006300:	708c      	strb	r4, [r1, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8006302:	700b      	strb	r3, [r1, #0]
  if (Format == RTC_FORMAT_BIN)
 8006304:	b952      	cbnz	r2, 800631c <HAL_RTC_GetDate+0x36>
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8006306:	f7ff ffc2 	bl	800628e <RTC_Bcd2ToByte>
 800630a:	70c8      	strb	r0, [r1, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800630c:	4628      	mov	r0, r5
 800630e:	f7ff ffbe 	bl	800628e <RTC_Bcd2ToByte>
 8006312:	7048      	strb	r0, [r1, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8006314:	4620      	mov	r0, r4
 8006316:	f7ff ffba 	bl	800628e <RTC_Bcd2ToByte>
 800631a:	7088      	strb	r0, [r1, #2]
}
 800631c:	2000      	movs	r0, #0
 800631e:	bd38      	pop	{r3, r4, r5, pc}

08006320 <SPI_WaitFlagStateUntilTimeout.constprop.0>:
  * @param  State flag state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 8006320:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006322:	460e      	mov	r6, r1
 8006324:	4614      	mov	r4, r2
 8006326:	4605      	mov	r5, r0
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006328:	f7fe fa9a 	bl	8004860 <HAL_GetTick>
 800632c:	4434      	add	r4, r6
 800632e:	1a24      	subs	r4, r4, r0
  tmp_tickstart = HAL_GetTick();
 8006330:	f7fe fa96 	bl	8004860 <HAL_GetTick>

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006334:	4b22      	ldr	r3, [pc, #136]	@ (80063c0 <SPI_WaitFlagStateUntilTimeout.constprop.0+0xa0>)
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 800633c:	4363      	muls	r3, r4
  tmp_tickstart = HAL_GetTick();
 800633e:	4607      	mov	r7, r0
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006340:	9301      	str	r3, [sp, #4]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006342:	682a      	ldr	r2, [r5, #0]
 8006344:	6890      	ldr	r0, [r2, #8]
 8006346:	f010 0080 	ands.w	r0, r0, #128	@ 0x80
 800634a:	d02d      	beq.n	80063a8 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x88>
  {
    if (Timeout != HAL_MAX_DELAY)
 800634c:	1c73      	adds	r3, r6, #1
 800634e:	d0f9      	beq.n	8006344 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x24>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006350:	f7fe fa86 	bl	8004860 <HAL_GetTick>
 8006354:	1bc0      	subs	r0, r0, r7
 8006356:	42a0      	cmp	r0, r4
 8006358:	d328      	bcc.n	80063ac <SPI_WaitFlagStateUntilTimeout.constprop.0+0x8c>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800635a:	682b      	ldr	r3, [r5, #0]
 800635c:	685a      	ldr	r2, [r3, #4]
 800635e:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006362:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006364:	686a      	ldr	r2, [r5, #4]
 8006366:	f5b2 7f82 	cmp.w	r2, #260	@ 0x104
 800636a:	d10a      	bne.n	8006382 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x62>
 800636c:	68aa      	ldr	r2, [r5, #8]
 800636e:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
 8006372:	d002      	beq.n	800637a <SPI_WaitFlagStateUntilTimeout.constprop.0+0x5a>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006374:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 8006378:	d103      	bne.n	8006382 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x62>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800637a:	681a      	ldr	r2, [r3, #0]
 800637c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006380:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006382:	6aaa      	ldr	r2, [r5, #40]	@ 0x28
 8006384:	f5b2 5f00 	cmp.w	r2, #8192	@ 0x2000
 8006388:	d107      	bne.n	800639a <SPI_WaitFlagStateUntilTimeout.constprop.0+0x7a>
        {
          SPI_RESET_CRC(hspi);
 800638a:	681a      	ldr	r2, [r3, #0]
 800638c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006390:	601a      	str	r2, [r3, #0]
 8006392:	681a      	ldr	r2, [r3, #0]
 8006394:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006398:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800639a:	2301      	movs	r3, #1
 800639c:	f885 305d 	strb.w	r3, [r5, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80063a0:	2300      	movs	r3, #0
 80063a2:	f885 305c 	strb.w	r3, [r5, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80063a6:	2003      	movs	r0, #3
      count--;
    }
  }

  return HAL_OK;
}
 80063a8:	b003      	add	sp, #12
 80063aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (count == 0U)
 80063ac:	9a01      	ldr	r2, [sp, #4]
      count--;
 80063ae:	9b01      	ldr	r3, [sp, #4]
      if (count == 0U)
 80063b0:	2a00      	cmp	r2, #0
      count--;
 80063b2:	f103 33ff 	add.w	r3, r3, #4294967295
 80063b6:	9301      	str	r3, [sp, #4]
 80063b8:	bf08      	it	eq
 80063ba:	4614      	moveq	r4, r2
 80063bc:	e7c1      	b.n	8006342 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x22>
 80063be:	bf00      	nop
 80063c0:	2000000c 	.word	0x2000000c

080063c4 <SPI_WaitFifoStateUntilTimeout.constprop.0>:
  * @param  State Fifo state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 80063c4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80063c8:	461c      	mov	r4, r3
{
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80063ca:	2300      	movs	r3, #0
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 80063cc:	4617      	mov	r7, r2
  __IO uint8_t  tmpreg8 = 0;
 80063ce:	f88d 3003 	strb.w	r3, [sp, #3]
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 80063d2:	4605      	mov	r5, r0
 80063d4:	460e      	mov	r6, r1

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80063d6:	f7fe fa43 	bl	8004860 <HAL_GetTick>
 80063da:	443c      	add	r4, r7
 80063dc:	1a24      	subs	r4, r4, r0
  tmp_tickstart = HAL_GetTick();
 80063de:	f7fe fa3f 	bl	8004860 <HAL_GetTick>

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80063e2:	4b29      	ldr	r3, [pc, #164]	@ (8006488 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xc4>)
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80063e4:	f8d5 9000 	ldr.w	r9, [r5]
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	2223      	movs	r2, #35	@ 0x23
 80063ec:	4353      	muls	r3, r2
 80063ee:	0d1b      	lsrs	r3, r3, #20
 80063f0:	4363      	muls	r3, r4
  tmp_tickstart = HAL_GetTick();
 80063f2:	4680      	mov	r8, r0
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80063f4:	9301      	str	r3, [sp, #4]

  while ((hspi->Instance->SR & Fifo) != State)
 80063f6:	682a      	ldr	r2, [r5, #0]
 80063f8:	6890      	ldr	r0, [r2, #8]
 80063fa:	4030      	ands	r0, r6
 80063fc:	d038      	beq.n	8006470 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xac>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80063fe:	f5b6 6fc0 	cmp.w	r6, #1536	@ 0x600
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8006402:	bf01      	itttt	eq
 8006404:	f899 300c 	ldrbeq.w	r3, [r9, #12]
 8006408:	b2db      	uxtbeq	r3, r3
 800640a:	f88d 3003 	strbeq.w	r3, [sp, #3]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800640e:	f89d 3003 	ldrbeq.w	r3, [sp, #3]
    }

    if (Timeout != HAL_MAX_DELAY)
 8006412:	1c7b      	adds	r3, r7, #1
 8006414:	d0f0      	beq.n	80063f8 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x34>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006416:	f7fe fa23 	bl	8004860 <HAL_GetTick>
 800641a:	eba0 0008 	sub.w	r0, r0, r8
 800641e:	42a0      	cmp	r0, r4
 8006420:	d329      	bcc.n	8006476 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xb2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006422:	682b      	ldr	r3, [r5, #0]
 8006424:	685a      	ldr	r2, [r3, #4]
 8006426:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800642a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800642c:	686a      	ldr	r2, [r5, #4]
 800642e:	f5b2 7f82 	cmp.w	r2, #260	@ 0x104
 8006432:	d10a      	bne.n	800644a <SPI_WaitFifoStateUntilTimeout.constprop.0+0x86>
 8006434:	68aa      	ldr	r2, [r5, #8]
 8006436:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
 800643a:	d002      	beq.n	8006442 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x7e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800643c:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 8006440:	d103      	bne.n	800644a <SPI_WaitFifoStateUntilTimeout.constprop.0+0x86>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006442:	681a      	ldr	r2, [r3, #0]
 8006444:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006448:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800644a:	6aaa      	ldr	r2, [r5, #40]	@ 0x28
 800644c:	f5b2 5f00 	cmp.w	r2, #8192	@ 0x2000
 8006450:	d107      	bne.n	8006462 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x9e>
        {
          SPI_RESET_CRC(hspi);
 8006452:	681a      	ldr	r2, [r3, #0]
 8006454:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006458:	601a      	str	r2, [r3, #0]
 800645a:	681a      	ldr	r2, [r3, #0]
 800645c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006460:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006462:	2301      	movs	r3, #1
 8006464:	f885 305d 	strb.w	r3, [r5, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006468:	2300      	movs	r3, #0
 800646a:	f885 305c 	strb.w	r3, [r5, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800646e:	2003      	movs	r0, #3
      count--;
    }
  }

  return HAL_OK;
}
 8006470:	b003      	add	sp, #12
 8006472:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      if (count == 0U)
 8006476:	9a01      	ldr	r2, [sp, #4]
      count--;
 8006478:	9b01      	ldr	r3, [sp, #4]
      if (count == 0U)
 800647a:	2a00      	cmp	r2, #0
      count--;
 800647c:	f103 33ff 	add.w	r3, r3, #4294967295
 8006480:	9301      	str	r3, [sp, #4]
 8006482:	bf08      	it	eq
 8006484:	4614      	moveq	r4, r2
 8006486:	e7b6      	b.n	80063f6 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x32>
 8006488:	2000000c 	.word	0x2000000c

0800648c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800648c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800648e:	6843      	ldr	r3, [r0, #4]
 8006490:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
{
 8006494:	4604      	mov	r4, r0
 8006496:	460e      	mov	r6, r1
 8006498:	4617      	mov	r7, r2
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800649a:	d10b      	bne.n	80064b4 <SPI_EndRxTransaction+0x28>
 800649c:	6883      	ldr	r3, [r0, #8]
 800649e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80064a2:	d002      	beq.n	80064aa <SPI_EndRxTransaction+0x1e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80064a4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80064a8:	d104      	bne.n	80064b4 <SPI_EndRxTransaction+0x28>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80064aa:	6822      	ldr	r2, [r4, #0]
 80064ac:	6813      	ldr	r3, [r2, #0]
 80064ae:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80064b2:	6013      	str	r3, [r2, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80064b4:	463a      	mov	r2, r7
 80064b6:	4631      	mov	r1, r6
 80064b8:	4620      	mov	r0, r4
 80064ba:	f7ff ff31 	bl	8006320 <SPI_WaitFlagStateUntilTimeout.constprop.0>
 80064be:	4605      	mov	r5, r0
 80064c0:	b128      	cbz	r0, 80064ce <SPI_EndRxTransaction+0x42>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80064c2:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 80064c4:	f043 0320 	orr.w	r3, r3, #32
 80064c8:	6623      	str	r3, [r4, #96]	@ 0x60
    return HAL_TIMEOUT;
 80064ca:	2503      	movs	r5, #3
 80064cc:	e013      	b.n	80064f6 <SPI_EndRxTransaction+0x6a>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80064ce:	6863      	ldr	r3, [r4, #4]
 80064d0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80064d4:	d10f      	bne.n	80064f6 <SPI_EndRxTransaction+0x6a>
 80064d6:	68a3      	ldr	r3, [r4, #8]
 80064d8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80064dc:	d002      	beq.n	80064e4 <SPI_EndRxTransaction+0x58>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80064de:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80064e2:	d108      	bne.n	80064f6 <SPI_EndRxTransaction+0x6a>
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80064e4:	463b      	mov	r3, r7
 80064e6:	4632      	mov	r2, r6
 80064e8:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80064ec:	4620      	mov	r0, r4
 80064ee:	f7ff ff69 	bl	80063c4 <SPI_WaitFifoStateUntilTimeout.constprop.0>
 80064f2:	2800      	cmp	r0, #0
 80064f4:	d1e5      	bne.n	80064c2 <SPI_EndRxTransaction+0x36>
      return HAL_TIMEOUT;
    }
  }
  return HAL_OK;
}
 80064f6:	4628      	mov	r0, r5
 80064f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080064fa <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80064fa:	b570      	push	{r4, r5, r6, lr}
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80064fc:	4613      	mov	r3, r2
{
 80064fe:	460d      	mov	r5, r1
 8006500:	4616      	mov	r6, r2
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006502:	460a      	mov	r2, r1
 8006504:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
{
 8006508:	4604      	mov	r4, r0
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800650a:	f7ff ff5b 	bl	80063c4 <SPI_WaitFifoStateUntilTimeout.constprop.0>
 800650e:	b128      	cbz	r0, 800651c <SPI_EndRxTxTransaction+0x22>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006510:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8006512:	f043 0320 	orr.w	r3, r3, #32
 8006516:	6623      	str	r3, [r4, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006518:	2003      	movs	r0, #3
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  return HAL_OK;
}
 800651a:	bd70      	pop	{r4, r5, r6, pc}
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800651c:	4632      	mov	r2, r6
 800651e:	4629      	mov	r1, r5
 8006520:	4620      	mov	r0, r4
 8006522:	f7ff fefd 	bl	8006320 <SPI_WaitFlagStateUntilTimeout.constprop.0>
 8006526:	2800      	cmp	r0, #0
 8006528:	d1f2      	bne.n	8006510 <SPI_EndRxTxTransaction+0x16>
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800652a:	4633      	mov	r3, r6
 800652c:	462a      	mov	r2, r5
 800652e:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8006532:	4620      	mov	r0, r4
 8006534:	f7ff ff46 	bl	80063c4 <SPI_WaitFifoStateUntilTimeout.constprop.0>
 8006538:	2800      	cmp	r0, #0
 800653a:	d0ee      	beq.n	800651a <SPI_EndRxTxTransaction+0x20>
 800653c:	e7e8      	b.n	8006510 <SPI_EndRxTxTransaction+0x16>

0800653e <HAL_SPI_Init>:
{
 800653e:	b570      	push	{r4, r5, r6, lr}
  if (hspi == NULL)
 8006540:	4604      	mov	r4, r0
 8006542:	2800      	cmp	r0, #0
 8006544:	d067      	beq.n	8006616 <HAL_SPI_Init+0xd8>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006546:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8006548:	2b00      	cmp	r3, #0
 800654a:	d15d      	bne.n	8006608 <HAL_SPI_Init+0xca>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800654c:	6842      	ldr	r2, [r0, #4]
 800654e:	f5b2 7f82 	cmp.w	r2, #260	@ 0x104
 8006552:	d000      	beq.n	8006556 <HAL_SPI_Init+0x18>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006554:	61c3      	str	r3, [r0, #28]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006556:	2300      	movs	r3, #0
 8006558:	62a3      	str	r3, [r4, #40]	@ 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 800655a:	f894 305d 	ldrb.w	r3, [r4, #93]	@ 0x5d
 800655e:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8006562:	b923      	cbnz	r3, 800656e <HAL_SPI_Init+0x30>
    hspi->Lock = HAL_UNLOCKED;
 8006564:	f884 205c 	strb.w	r2, [r4, #92]	@ 0x5c
    HAL_SPI_MspInit(hspi);
 8006568:	4620      	mov	r0, r4
 800656a:	f7fd feab 	bl	80042c4 <HAL_SPI_MspInit>
  __HAL_SPI_DISABLE(hspi);
 800656e:	6822      	ldr	r2, [r4, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006570:	68e0      	ldr	r0, [r4, #12]
  hspi->State = HAL_SPI_STATE_BUSY;
 8006572:	2302      	movs	r3, #2
 8006574:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
  __HAL_SPI_DISABLE(hspi);
 8006578:	6813      	ldr	r3, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800657a:	f5b0 6fe0 	cmp.w	r0, #1792	@ 0x700
  __HAL_SPI_DISABLE(hspi);
 800657e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006582:	6013      	str	r3, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006584:	f04f 0300 	mov.w	r3, #0
 8006588:	d942      	bls.n	8006610 <HAL_SPI_Init+0xd2>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800658a:	461d      	mov	r5, r3
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800658c:	f5b0 6f70 	cmp.w	r0, #3840	@ 0xf00
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006590:	bf18      	it	ne
 8006592:	62a3      	strne	r3, [r4, #40]	@ 0x28
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006594:	68a6      	ldr	r6, [r4, #8]
 8006596:	6863      	ldr	r3, [r4, #4]
 8006598:	69a1      	ldr	r1, [r4, #24]
 800659a:	f406 4604 	and.w	r6, r6, #33792	@ 0x8400
 800659e:	f403 7382 	and.w	r3, r3, #260	@ 0x104
 80065a2:	4333      	orrs	r3, r6
 80065a4:	6926      	ldr	r6, [r4, #16]
 80065a6:	f006 0602 	and.w	r6, r6, #2
 80065aa:	4333      	orrs	r3, r6
 80065ac:	6966      	ldr	r6, [r4, #20]
 80065ae:	f006 0601 	and.w	r6, r6, #1
 80065b2:	4333      	orrs	r3, r6
 80065b4:	f401 7600 	and.w	r6, r1, #512	@ 0x200
 80065b8:	4333      	orrs	r3, r6
 80065ba:	69e6      	ldr	r6, [r4, #28]
 80065bc:	f006 0638 	and.w	r6, r6, #56	@ 0x38
 80065c0:	4333      	orrs	r3, r6
 80065c2:	6a26      	ldr	r6, [r4, #32]
 80065c4:	f006 0680 	and.w	r6, r6, #128	@ 0x80
 80065c8:	4333      	orrs	r3, r6
 80065ca:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80065cc:	f406 5600 	and.w	r6, r6, #8192	@ 0x2000
 80065d0:	4333      	orrs	r3, r6
 80065d2:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80065d4:	6b66      	ldr	r6, [r4, #52]	@ 0x34
 80065d6:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80065d8:	f006 0608 	and.w	r6, r6, #8
 80065dc:	f003 0310 	and.w	r3, r3, #16
 80065e0:	f400 6070 	and.w	r0, r0, #3840	@ 0xf00
 80065e4:	4333      	orrs	r3, r6
 80065e6:	0c09      	lsrs	r1, r1, #16
 80065e8:	4303      	orrs	r3, r0
 80065ea:	f001 0104 	and.w	r1, r1, #4
 80065ee:	430b      	orrs	r3, r1
 80065f0:	432b      	orrs	r3, r5
 80065f2:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80065f4:	69d3      	ldr	r3, [r2, #28]
 80065f6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80065fa:	61d3      	str	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80065fc:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 80065fe:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006600:	6620      	str	r0, [r4, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006602:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
}
 8006606:	bd70      	pop	{r4, r5, r6, pc}
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006608:	2300      	movs	r3, #0
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800660a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800660e:	e7a2      	b.n	8006556 <HAL_SPI_Init+0x18>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006610:	f44f 5580 	mov.w	r5, #4096	@ 0x1000
 8006614:	e7bc      	b.n	8006590 <HAL_SPI_Init+0x52>
    return HAL_ERROR;
 8006616:	2001      	movs	r0, #1
 8006618:	e7f5      	b.n	8006606 <HAL_SPI_Init+0xc8>

0800661a <HAL_SPI_Transmit>:
{
 800661a:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 800661e:	461f      	mov	r7, r3
  __HAL_LOCK(hspi);
 8006620:	f890 305c 	ldrb.w	r3, [r0, #92]	@ 0x5c
 8006624:	2b01      	cmp	r3, #1
{
 8006626:	4604      	mov	r4, r0
 8006628:	460d      	mov	r5, r1
 800662a:	4690      	mov	r8, r2
  __HAL_LOCK(hspi);
 800662c:	f000 80bc 	beq.w	80067a8 <HAL_SPI_Transmit+0x18e>
 8006630:	2301      	movs	r3, #1
 8006632:	f880 305c 	strb.w	r3, [r0, #92]	@ 0x5c
  tickstart = HAL_GetTick();
 8006636:	f7fe f913 	bl	8004860 <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 800663a:	f894 305d 	ldrb.w	r3, [r4, #93]	@ 0x5d
 800663e:	2b01      	cmp	r3, #1
  tickstart = HAL_GetTick();
 8006640:	4682      	mov	sl, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8006642:	fa5f f983 	uxtb.w	r9, r3
 8006646:	f040 80ac 	bne.w	80067a2 <HAL_SPI_Transmit+0x188>
  if ((pData == NULL) || (Size == 0U))
 800664a:	2d00      	cmp	r5, #0
 800664c:	d069      	beq.n	8006722 <HAL_SPI_Transmit+0x108>
 800664e:	f1b8 0f00 	cmp.w	r8, #0
 8006652:	d066      	beq.n	8006722 <HAL_SPI_Transmit+0x108>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006654:	2303      	movs	r3, #3
 8006656:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800665a:	2300      	movs	r3, #0
 800665c:	6623      	str	r3, [r4, #96]	@ 0x60
  hspi->RxISR       = NULL;
 800665e:	e9c4 3313 	strd	r3, r3, [r4, #76]	@ 0x4c
  hspi->TxXferCount = Size;
 8006662:	f8a4 803e 	strh.w	r8, [r4, #62]	@ 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006666:	6423      	str	r3, [r4, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8006668:	f8a4 3044 	strh.w	r3, [r4, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 800666c:	f8a4 3046 	strh.w	r3, [r4, #70]	@ 0x46
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006670:	68a3      	ldr	r3, [r4, #8]
    __HAL_SPI_DISABLE(hspi);
 8006672:	6826      	ldr	r6, [r4, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006674:	63a5      	str	r5, [r4, #56]	@ 0x38
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006676:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
  hspi->TxXferSize  = Size;
 800667a:	f8a4 803c 	strh.w	r8, [r4, #60]	@ 0x3c
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800667e:	d107      	bne.n	8006690 <HAL_SPI_Transmit+0x76>
    __HAL_SPI_DISABLE(hspi);
 8006680:	6833      	ldr	r3, [r6, #0]
 8006682:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006686:	6033      	str	r3, [r6, #0]
    SPI_1LINE_TX(hspi);
 8006688:	6833      	ldr	r3, [r6, #0]
 800668a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800668e:	6033      	str	r3, [r6, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006690:	6833      	ldr	r3, [r6, #0]
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006692:	6862      	ldr	r2, [r4, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006694:	065b      	lsls	r3, r3, #25
    __HAL_SPI_ENABLE(hspi);
 8006696:	bf5e      	ittt	pl
 8006698:	6833      	ldrpl	r3, [r6, #0]
 800669a:	f043 0340 	orrpl.w	r3, r3, #64	@ 0x40
 800669e:	6033      	strpl	r3, [r6, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80066a0:	68e3      	ldr	r3, [r4, #12]
 80066a2:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80066a6:	d943      	bls.n	8006730 <HAL_SPI_Transmit+0x116>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80066a8:	b112      	cbz	r2, 80066b0 <HAL_SPI_Transmit+0x96>
 80066aa:	f1b8 0f01 	cmp.w	r8, #1
 80066ae:	d107      	bne.n	80066c0 <HAL_SPI_Transmit+0xa6>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80066b0:	f835 3b02 	ldrh.w	r3, [r5], #2
 80066b4:	60f3      	str	r3, [r6, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80066b6:	63a5      	str	r5, [r4, #56]	@ 0x38
        hspi->TxXferCount--;
 80066b8:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80066ba:	3b01      	subs	r3, #1
 80066bc:	b29b      	uxth	r3, r3
 80066be:	87e3      	strh	r3, [r4, #62]	@ 0x3e
    while (hspi->TxXferCount > 0U)
 80066c0:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80066c2:	b29b      	uxth	r3, r3
 80066c4:	b9b3      	cbnz	r3, 80066f4 <HAL_SPI_Transmit+0xda>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80066c6:	4652      	mov	r2, sl
 80066c8:	4639      	mov	r1, r7
 80066ca:	4620      	mov	r0, r4
 80066cc:	f7ff ff15 	bl	80064fa <SPI_EndRxTxTransaction>
 80066d0:	2800      	cmp	r0, #0
 80066d2:	d163      	bne.n	800679c <HAL_SPI_Transmit+0x182>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80066d4:	68a3      	ldr	r3, [r4, #8]
 80066d6:	b933      	cbnz	r3, 80066e6 <HAL_SPI_Transmit+0xcc>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80066d8:	9301      	str	r3, [sp, #4]
 80066da:	6823      	ldr	r3, [r4, #0]
 80066dc:	68da      	ldr	r2, [r3, #12]
 80066de:	9201      	str	r2, [sp, #4]
 80066e0:	689b      	ldr	r3, [r3, #8]
 80066e2:	9301      	str	r3, [sp, #4]
 80066e4:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80066e6:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 80066e8:	b9db      	cbnz	r3, 8006722 <HAL_SPI_Transmit+0x108>
    hspi->State = HAL_SPI_STATE_READY;
 80066ea:	2201      	movs	r2, #1
 80066ec:	f884 205d 	strb.w	r2, [r4, #93]	@ 0x5d
  HAL_StatusTypeDef errorcode = HAL_OK;
 80066f0:	4699      	mov	r9, r3
 80066f2:	e016      	b.n	8006722 <HAL_SPI_Transmit+0x108>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80066f4:	6822      	ldr	r2, [r4, #0]
 80066f6:	6893      	ldr	r3, [r2, #8]
 80066f8:	079d      	lsls	r5, r3, #30
 80066fa:	d505      	bpl.n	8006708 <HAL_SPI_Transmit+0xee>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80066fc:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80066fe:	f833 1b02 	ldrh.w	r1, [r3], #2
 8006702:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006704:	63a3      	str	r3, [r4, #56]	@ 0x38
 8006706:	e7d7      	b.n	80066b8 <HAL_SPI_Transmit+0x9e>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006708:	f7fe f8aa 	bl	8004860 <HAL_GetTick>
 800670c:	eba0 000a 	sub.w	r0, r0, sl
 8006710:	42b8      	cmp	r0, r7
 8006712:	d3d5      	bcc.n	80066c0 <HAL_SPI_Transmit+0xa6>
 8006714:	1c78      	adds	r0, r7, #1
 8006716:	d0d3      	beq.n	80066c0 <HAL_SPI_Transmit+0xa6>
          hspi->State = HAL_SPI_STATE_READY;
 8006718:	2301      	movs	r3, #1
 800671a:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
          errorcode = HAL_TIMEOUT;
 800671e:	f04f 0903 	mov.w	r9, #3
  __HAL_UNLOCK(hspi);
 8006722:	2300      	movs	r3, #0
 8006724:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
}
 8006728:	4648      	mov	r0, r9
 800672a:	b002      	add	sp, #8
 800672c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006730:	b112      	cbz	r2, 8006738 <HAL_SPI_Transmit+0x11e>
 8006732:	f1b8 0f01 	cmp.w	r8, #1
 8006736:	d113      	bne.n	8006760 <HAL_SPI_Transmit+0x146>
      if (hspi->TxXferCount > 1U)
 8006738:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 800673a:	b29b      	uxth	r3, r3
 800673c:	2b01      	cmp	r3, #1
 800673e:	d906      	bls.n	800674e <HAL_SPI_Transmit+0x134>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006740:	f835 3b02 	ldrh.w	r3, [r5], #2
 8006744:	60f3      	str	r3, [r6, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006746:	63a5      	str	r5, [r4, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8006748:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 800674a:	3b02      	subs	r3, #2
 800674c:	e006      	b.n	800675c <HAL_SPI_Transmit+0x142>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800674e:	782b      	ldrb	r3, [r5, #0]
 8006750:	7333      	strb	r3, [r6, #12]
        hspi->pTxBuffPtr ++;
 8006752:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8006754:	3301      	adds	r3, #1
 8006756:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->TxXferCount--;
 8006758:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 800675a:	3b01      	subs	r3, #1
 800675c:	b29b      	uxth	r3, r3
 800675e:	87e3      	strh	r3, [r4, #62]	@ 0x3e
    while (hspi->TxXferCount > 0U)
 8006760:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8006762:	b29b      	uxth	r3, r3
 8006764:	2b00      	cmp	r3, #0
 8006766:	d0ae      	beq.n	80066c6 <HAL_SPI_Transmit+0xac>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006768:	6822      	ldr	r2, [r4, #0]
 800676a:	6893      	ldr	r3, [r2, #8]
 800676c:	0799      	lsls	r1, r3, #30
 800676e:	d50c      	bpl.n	800678a <HAL_SPI_Transmit+0x170>
        if (hspi->TxXferCount > 1U)
 8006770:	8fe1      	ldrh	r1, [r4, #62]	@ 0x3e
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006772:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
        if (hspi->TxXferCount > 1U)
 8006774:	b289      	uxth	r1, r1
 8006776:	2901      	cmp	r1, #1
 8006778:	d904      	bls.n	8006784 <HAL_SPI_Transmit+0x16a>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800677a:	f833 1b02 	ldrh.w	r1, [r3], #2
 800677e:	60d1      	str	r1, [r2, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006780:	63a3      	str	r3, [r4, #56]	@ 0x38
 8006782:	e7e1      	b.n	8006748 <HAL_SPI_Transmit+0x12e>
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006784:	781b      	ldrb	r3, [r3, #0]
 8006786:	7313      	strb	r3, [r2, #12]
          hspi->pTxBuffPtr++;
 8006788:	e7e3      	b.n	8006752 <HAL_SPI_Transmit+0x138>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800678a:	f7fe f869 	bl	8004860 <HAL_GetTick>
 800678e:	eba0 000a 	sub.w	r0, r0, sl
 8006792:	42b8      	cmp	r0, r7
 8006794:	d3e4      	bcc.n	8006760 <HAL_SPI_Transmit+0x146>
 8006796:	1c7b      	adds	r3, r7, #1
 8006798:	d0e2      	beq.n	8006760 <HAL_SPI_Transmit+0x146>
 800679a:	e7bd      	b.n	8006718 <HAL_SPI_Transmit+0xfe>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800679c:	2320      	movs	r3, #32
 800679e:	6623      	str	r3, [r4, #96]	@ 0x60
 80067a0:	e798      	b.n	80066d4 <HAL_SPI_Transmit+0xba>
    errorcode = HAL_BUSY;
 80067a2:	f04f 0902 	mov.w	r9, #2
 80067a6:	e7bc      	b.n	8006722 <HAL_SPI_Transmit+0x108>
  __HAL_LOCK(hspi);
 80067a8:	f04f 0902 	mov.w	r9, #2
 80067ac:	e7bc      	b.n	8006728 <HAL_SPI_Transmit+0x10e>

080067ae <HAL_SPI_TransmitReceive>:
{
 80067ae:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80067b2:	461e      	mov	r6, r3
  __HAL_LOCK(hspi);
 80067b4:	f890 305c 	ldrb.w	r3, [r0, #92]	@ 0x5c
{
 80067b8:	9f08      	ldr	r7, [sp, #32]
  __HAL_LOCK(hspi);
 80067ba:	2b01      	cmp	r3, #1
{
 80067bc:	4604      	mov	r4, r0
 80067be:	460d      	mov	r5, r1
 80067c0:	4691      	mov	r9, r2
  __HAL_LOCK(hspi);
 80067c2:	f000 8122 	beq.w	8006a0a <HAL_SPI_TransmitReceive+0x25c>
 80067c6:	2301      	movs	r3, #1
 80067c8:	f880 305c 	strb.w	r3, [r0, #92]	@ 0x5c
  tickstart = HAL_GetTick();
 80067cc:	f7fe f848 	bl	8004860 <HAL_GetTick>
  tmp_state           = hspi->State;
 80067d0:	f894 205d 	ldrb.w	r2, [r4, #93]	@ 0x5d
  tmp_mode            = hspi->Init.Mode;
 80067d4:	6863      	ldr	r3, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80067d6:	2a01      	cmp	r2, #1
  tickstart = HAL_GetTick();
 80067d8:	4680      	mov	r8, r0
  tmp_state           = hspi->State;
 80067da:	b2d1      	uxtb	r1, r2
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80067dc:	d00a      	beq.n	80067f4 <HAL_SPI_TransmitReceive+0x46>
 80067de:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80067e2:	f040 8110 	bne.w	8006a06 <HAL_SPI_TransmitReceive+0x258>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80067e6:	68a2      	ldr	r2, [r4, #8]
 80067e8:	2a00      	cmp	r2, #0
 80067ea:	f040 810c 	bne.w	8006a06 <HAL_SPI_TransmitReceive+0x258>
 80067ee:	2904      	cmp	r1, #4
 80067f0:	f040 8109 	bne.w	8006a06 <HAL_SPI_TransmitReceive+0x258>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80067f4:	b92d      	cbnz	r5, 8006802 <HAL_SPI_TransmitReceive+0x54>
    errorcode = HAL_ERROR;
 80067f6:	2001      	movs	r0, #1
  __HAL_UNLOCK(hspi);
 80067f8:	2300      	movs	r3, #0
 80067fa:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
}
 80067fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006802:	f1b9 0f00 	cmp.w	r9, #0
 8006806:	d0f6      	beq.n	80067f6 <HAL_SPI_TransmitReceive+0x48>
 8006808:	2e00      	cmp	r6, #0
 800680a:	d0f4      	beq.n	80067f6 <HAL_SPI_TransmitReceive+0x48>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800680c:	f894 205d 	ldrb.w	r2, [r4, #93]	@ 0x5d
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8006810:	68e0      	ldr	r0, [r4, #12]
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006812:	6821      	ldr	r1, [r4, #0]
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006814:	f8c4 9040 	str.w	r9, [r4, #64]	@ 0x40
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006818:	2a04      	cmp	r2, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800681a:	bf1c      	itt	ne
 800681c:	2205      	movne	r2, #5
 800681e:	f884 205d 	strbne.w	r2, [r4, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006822:	2200      	movs	r2, #0
 8006824:	6622      	str	r2, [r4, #96]	@ 0x60
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8006826:	f5b0 6fe0 	cmp.w	r0, #1792	@ 0x700
  hspi->RxXferCount = Size;
 800682a:	f8a4 6046 	strh.w	r6, [r4, #70]	@ 0x46
  hspi->TxXferCount = Size;
 800682e:	87e6      	strh	r6, [r4, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8006830:	e9c4 2213 	strd	r2, r2, [r4, #76]	@ 0x4c
  hspi->RxXferSize  = Size;
 8006834:	f8a4 6044 	strh.w	r6, [r4, #68]	@ 0x44
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006838:	684a      	ldr	r2, [r1, #4]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800683a:	63a5      	str	r5, [r4, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800683c:	87a6      	strh	r6, [r4, #60]	@ 0x3c
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800683e:	d801      	bhi.n	8006844 <HAL_SPI_TransmitReceive+0x96>
 8006840:	2e01      	cmp	r6, #1
 8006842:	d02e      	beq.n	80068a2 <HAL_SPI_TransmitReceive+0xf4>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006844:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006848:	604a      	str	r2, [r1, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800684a:	680a      	ldr	r2, [r1, #0]
 800684c:	0652      	lsls	r2, r2, #25
    __HAL_SPI_ENABLE(hspi);
 800684e:	bf5e      	ittt	pl
 8006850:	680a      	ldrpl	r2, [r1, #0]
 8006852:	f042 0240 	orrpl.w	r2, r2, #64	@ 0x40
 8006856:	600a      	strpl	r2, [r1, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006858:	f5b0 6fe0 	cmp.w	r0, #1792	@ 0x700
 800685c:	d957      	bls.n	800690e <HAL_SPI_TransmitReceive+0x160>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800685e:	b10b      	cbz	r3, 8006864 <HAL_SPI_TransmitReceive+0xb6>
 8006860:	2e01      	cmp	r6, #1
 8006862:	d107      	bne.n	8006874 <HAL_SPI_TransmitReceive+0xc6>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006864:	f835 3b02 	ldrh.w	r3, [r5], #2
 8006868:	60cb      	str	r3, [r1, #12]
      hspi->TxXferCount--;
 800686a:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800686c:	63a5      	str	r5, [r4, #56]	@ 0x38
      hspi->TxXferCount--;
 800686e:	3b01      	subs	r3, #1
 8006870:	b29b      	uxth	r3, r3
 8006872:	87e3      	strh	r3, [r4, #62]	@ 0x3e
        txallowed = 1U;
 8006874:	2501      	movs	r5, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006876:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8006878:	b29b      	uxth	r3, r3
 800687a:	b9ab      	cbnz	r3, 80068a8 <HAL_SPI_TransmitReceive+0xfa>
 800687c:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 8006880:	b29b      	uxth	r3, r3
 8006882:	b98b      	cbnz	r3, 80068a8 <HAL_SPI_TransmitReceive+0xfa>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006884:	4642      	mov	r2, r8
 8006886:	4639      	mov	r1, r7
 8006888:	4620      	mov	r0, r4
 800688a:	f7ff fe36 	bl	80064fa <SPI_EndRxTxTransaction>
 800688e:	2800      	cmp	r0, #0
 8006890:	f040 80b5 	bne.w	80069fe <HAL_SPI_TransmitReceive+0x250>
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006894:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8006896:	2b00      	cmp	r3, #0
 8006898:	d1ad      	bne.n	80067f6 <HAL_SPI_TransmitReceive+0x48>
    hspi->State = HAL_SPI_STATE_READY;
 800689a:	2301      	movs	r3, #1
 800689c:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
 80068a0:	e7aa      	b.n	80067f8 <HAL_SPI_TransmitReceive+0x4a>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80068a2:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80068a6:	e7cf      	b.n	8006848 <HAL_SPI_TransmitReceive+0x9a>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80068a8:	6821      	ldr	r1, [r4, #0]
 80068aa:	688b      	ldr	r3, [r1, #8]
 80068ac:	079e      	lsls	r6, r3, #30
 80068ae:	d50d      	bpl.n	80068cc <HAL_SPI_TransmitReceive+0x11e>
 80068b0:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80068b2:	b29b      	uxth	r3, r3
 80068b4:	b153      	cbz	r3, 80068cc <HAL_SPI_TransmitReceive+0x11e>
 80068b6:	b145      	cbz	r5, 80068ca <HAL_SPI_TransmitReceive+0x11c>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80068b8:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80068ba:	f833 2b02 	ldrh.w	r2, [r3], #2
 80068be:	60ca      	str	r2, [r1, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80068c0:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->TxXferCount--;
 80068c2:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80068c4:	3b01      	subs	r3, #1
 80068c6:	b29b      	uxth	r3, r3
 80068c8:	87e3      	strh	r3, [r4, #62]	@ 0x3e
        txallowed = 0U;
 80068ca:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80068cc:	688a      	ldr	r2, [r1, #8]
 80068ce:	f012 0201 	ands.w	r2, r2, #1
 80068d2:	d00f      	beq.n	80068f4 <HAL_SPI_TransmitReceive+0x146>
 80068d4:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 80068d8:	b29b      	uxth	r3, r3
 80068da:	b15b      	cbz	r3, 80068f4 <HAL_SPI_TransmitReceive+0x146>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80068dc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80068de:	68c9      	ldr	r1, [r1, #12]
 80068e0:	f823 1b02 	strh.w	r1, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80068e4:	6423      	str	r3, [r4, #64]	@ 0x40
        hspi->RxXferCount--;
 80068e6:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 80068ea:	3b01      	subs	r3, #1
 80068ec:	b29b      	uxth	r3, r3
 80068ee:	f8a4 3046 	strh.w	r3, [r4, #70]	@ 0x46
        txallowed = 1U;
 80068f2:	4615      	mov	r5, r2
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80068f4:	f7fd ffb4 	bl	8004860 <HAL_GetTick>
 80068f8:	eba0 0008 	sub.w	r0, r0, r8
 80068fc:	42b8      	cmp	r0, r7
 80068fe:	d3ba      	bcc.n	8006876 <HAL_SPI_TransmitReceive+0xc8>
 8006900:	1c78      	adds	r0, r7, #1
 8006902:	d0b8      	beq.n	8006876 <HAL_SPI_TransmitReceive+0xc8>
        hspi->State = HAL_SPI_STATE_READY;
 8006904:	2301      	movs	r3, #1
 8006906:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
        errorcode = HAL_TIMEOUT;
 800690a:	2003      	movs	r0, #3
 800690c:	e774      	b.n	80067f8 <HAL_SPI_TransmitReceive+0x4a>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800690e:	b10b      	cbz	r3, 8006914 <HAL_SPI_TransmitReceive+0x166>
 8006910:	2e01      	cmp	r6, #1
 8006912:	d10b      	bne.n	800692c <HAL_SPI_TransmitReceive+0x17e>
      if (hspi->TxXferCount > 1U)
 8006914:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8006916:	b29b      	uxth	r3, r3
 8006918:	2b01      	cmp	r3, #1
 800691a:	d909      	bls.n	8006930 <HAL_SPI_TransmitReceive+0x182>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800691c:	f835 3b02 	ldrh.w	r3, [r5], #2
 8006920:	60cb      	str	r3, [r1, #12]
        hspi->TxXferCount -= 2U;
 8006922:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006924:	63a5      	str	r5, [r4, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8006926:	3b02      	subs	r3, #2
        hspi->TxXferCount--;
 8006928:	b29b      	uxth	r3, r3
 800692a:	87e3      	strh	r3, [r4, #62]	@ 0x3e
        txallowed = 1U;
 800692c:	2501      	movs	r5, #1
 800692e:	e048      	b.n	80069c2 <HAL_SPI_TransmitReceive+0x214>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006930:	782b      	ldrb	r3, [r5, #0]
 8006932:	730b      	strb	r3, [r1, #12]
        hspi->pTxBuffPtr++;
 8006934:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8006936:	3301      	adds	r3, #1
 8006938:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->TxXferCount--;
 800693a:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 800693c:	3b01      	subs	r3, #1
 800693e:	e7f3      	b.n	8006928 <HAL_SPI_TransmitReceive+0x17a>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006940:	6822      	ldr	r2, [r4, #0]
 8006942:	6893      	ldr	r3, [r2, #8]
 8006944:	0799      	lsls	r1, r3, #30
 8006946:	d511      	bpl.n	800696c <HAL_SPI_TransmitReceive+0x1be>
 8006948:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 800694a:	b29b      	uxth	r3, r3
 800694c:	b173      	cbz	r3, 800696c <HAL_SPI_TransmitReceive+0x1be>
 800694e:	b165      	cbz	r5, 800696a <HAL_SPI_TransmitReceive+0x1bc>
        if (hspi->TxXferCount > 1U)
 8006950:	8fe1      	ldrh	r1, [r4, #62]	@ 0x3e
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006952:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
        if (hspi->TxXferCount > 1U)
 8006954:	b289      	uxth	r1, r1
 8006956:	2901      	cmp	r1, #1
 8006958:	d93d      	bls.n	80069d6 <HAL_SPI_TransmitReceive+0x228>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800695a:	f833 1b02 	ldrh.w	r1, [r3], #2
 800695e:	60d1      	str	r1, [r2, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006960:	63a3      	str	r3, [r4, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8006962:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8006964:	3b02      	subs	r3, #2
 8006966:	b29b      	uxth	r3, r3
 8006968:	87e3      	strh	r3, [r4, #62]	@ 0x3e
        txallowed = 0U;
 800696a:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800696c:	6822      	ldr	r2, [r4, #0]
 800696e:	6891      	ldr	r1, [r2, #8]
 8006970:	f011 0101 	ands.w	r1, r1, #1
 8006974:	d01d      	beq.n	80069b2 <HAL_SPI_TransmitReceive+0x204>
 8006976:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 800697a:	b29b      	uxth	r3, r3
 800697c:	b1cb      	cbz	r3, 80069b2 <HAL_SPI_TransmitReceive+0x204>
        if (hspi->RxXferCount > 1U)
 800697e:	f8b4 0046 	ldrh.w	r0, [r4, #70]	@ 0x46
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006982:	6c23      	ldr	r3, [r4, #64]	@ 0x40
        if (hspi->RxXferCount > 1U)
 8006984:	b280      	uxth	r0, r0
 8006986:	2801      	cmp	r0, #1
 8006988:	d92d      	bls.n	80069e6 <HAL_SPI_TransmitReceive+0x238>
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800698a:	68d0      	ldr	r0, [r2, #12]
 800698c:	f823 0b02 	strh.w	r0, [r3], #2
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8006990:	6423      	str	r3, [r4, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8006992:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 8006996:	3b02      	subs	r3, #2
 8006998:	b29b      	uxth	r3, r3
 800699a:	f8a4 3046 	strh.w	r3, [r4, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 800699e:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 80069a2:	b29b      	uxth	r3, r3
 80069a4:	2b01      	cmp	r3, #1
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80069a6:	bf9e      	ittt	ls
 80069a8:	6853      	ldrls	r3, [r2, #4]
 80069aa:	f443 5380 	orrls.w	r3, r3, #4096	@ 0x1000
 80069ae:	6053      	strls	r3, [r2, #4]
        txallowed = 1U;
 80069b0:	460d      	mov	r5, r1
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80069b2:	f7fd ff55 	bl	8004860 <HAL_GetTick>
 80069b6:	eba0 0008 	sub.w	r0, r0, r8
 80069ba:	42b8      	cmp	r0, r7
 80069bc:	d301      	bcc.n	80069c2 <HAL_SPI_TransmitReceive+0x214>
 80069be:	1c7b      	adds	r3, r7, #1
 80069c0:	d1a0      	bne.n	8006904 <HAL_SPI_TransmitReceive+0x156>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80069c2:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80069c4:	b29b      	uxth	r3, r3
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d1ba      	bne.n	8006940 <HAL_SPI_TransmitReceive+0x192>
 80069ca:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 80069ce:	b29b      	uxth	r3, r3
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d1b5      	bne.n	8006940 <HAL_SPI_TransmitReceive+0x192>
 80069d4:	e756      	b.n	8006884 <HAL_SPI_TransmitReceive+0xd6>
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80069d6:	781b      	ldrb	r3, [r3, #0]
 80069d8:	7313      	strb	r3, [r2, #12]
          hspi->pTxBuffPtr++;
 80069da:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80069dc:	3301      	adds	r3, #1
 80069de:	63a3      	str	r3, [r4, #56]	@ 0x38
          hspi->TxXferCount--;
 80069e0:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80069e2:	3b01      	subs	r3, #1
 80069e4:	e7bf      	b.n	8006966 <HAL_SPI_TransmitReceive+0x1b8>
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80069e6:	7b12      	ldrb	r2, [r2, #12]
 80069e8:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80069ea:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80069ec:	3301      	adds	r3, #1
 80069ee:	6423      	str	r3, [r4, #64]	@ 0x40
          hspi->RxXferCount--;
 80069f0:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 80069f4:	3b01      	subs	r3, #1
 80069f6:	b29b      	uxth	r3, r3
 80069f8:	f8a4 3046 	strh.w	r3, [r4, #70]	@ 0x46
 80069fc:	e7d8      	b.n	80069b0 <HAL_SPI_TransmitReceive+0x202>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80069fe:	2320      	movs	r3, #32
 8006a00:	6623      	str	r3, [r4, #96]	@ 0x60
    errorcode = HAL_ERROR;
 8006a02:	2001      	movs	r0, #1
 8006a04:	e746      	b.n	8006894 <HAL_SPI_TransmitReceive+0xe6>
    errorcode = HAL_BUSY;
 8006a06:	2002      	movs	r0, #2
 8006a08:	e6f6      	b.n	80067f8 <HAL_SPI_TransmitReceive+0x4a>
  __HAL_LOCK(hspi);
 8006a0a:	2002      	movs	r0, #2
 8006a0c:	e6f7      	b.n	80067fe <HAL_SPI_TransmitReceive+0x50>

08006a0e <HAL_SPI_Receive>:
{
 8006a0e:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8006a12:	461f      	mov	r7, r3
  if (hspi->State != HAL_SPI_STATE_READY)
 8006a14:	f890 305d 	ldrb.w	r3, [r0, #93]	@ 0x5d
 8006a18:	2b01      	cmp	r3, #1
{
 8006a1a:	4604      	mov	r4, r0
 8006a1c:	468a      	mov	sl, r1
 8006a1e:	4690      	mov	r8, r2
  if (hspi->State != HAL_SPI_STATE_READY)
 8006a20:	b2de      	uxtb	r6, r3
 8006a22:	f040 80a7 	bne.w	8006b74 <HAL_SPI_Receive+0x166>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006a26:	6843      	ldr	r3, [r0, #4]
 8006a28:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006a2c:	d10e      	bne.n	8006a4c <HAL_SPI_Receive+0x3e>
 8006a2e:	6883      	ldr	r3, [r0, #8]
 8006a30:	b963      	cbnz	r3, 8006a4c <HAL_SPI_Receive+0x3e>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006a32:	2304      	movs	r3, #4
 8006a34:	f880 305d 	strb.w	r3, [r0, #93]	@ 0x5d
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006a38:	4613      	mov	r3, r2
 8006a3a:	9700      	str	r7, [sp, #0]
 8006a3c:	460a      	mov	r2, r1
 8006a3e:	f7ff feb6 	bl	80067ae <HAL_SPI_TransmitReceive>
 8006a42:	4606      	mov	r6, r0
}
 8006a44:	4630      	mov	r0, r6
 8006a46:	b002      	add	sp, #8
 8006a48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  __HAL_LOCK(hspi);
 8006a4c:	f894 305c 	ldrb.w	r3, [r4, #92]	@ 0x5c
 8006a50:	2b01      	cmp	r3, #1
 8006a52:	f000 8091 	beq.w	8006b78 <HAL_SPI_Receive+0x16a>
 8006a56:	2301      	movs	r3, #1
 8006a58:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
  tickstart = HAL_GetTick();
 8006a5c:	f7fd ff00 	bl	8004860 <HAL_GetTick>
 8006a60:	4681      	mov	r9, r0
  if ((pData == NULL) || (Size == 0U))
 8006a62:	f1ba 0f00 	cmp.w	sl, #0
 8006a66:	d075      	beq.n	8006b54 <HAL_SPI_Receive+0x146>
 8006a68:	f1b8 0f00 	cmp.w	r8, #0
 8006a6c:	d072      	beq.n	8006b54 <HAL_SPI_Receive+0x146>
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006a6e:	2500      	movs	r5, #0
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006a70:	2304      	movs	r3, #4
 8006a72:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
  hspi->TxISR       = NULL;
 8006a76:	e9c4 5513 	strd	r5, r5, [r4, #76]	@ 0x4c
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006a7a:	6625      	str	r5, [r4, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006a7c:	63a5      	str	r5, [r4, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8006a7e:	f8a4 8046 	strh.w	r8, [r4, #70]	@ 0x46
  hspi->TxXferSize  = 0U;
 8006a82:	87a5      	strh	r5, [r4, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 8006a84:	87e5      	strh	r5, [r4, #62]	@ 0x3e
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006a86:	6825      	ldr	r5, [r4, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006a88:	68e2      	ldr	r2, [r4, #12]
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006a8a:	686b      	ldr	r3, [r5, #4]
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006a8c:	f8c4 a040 	str.w	sl, [r4, #64]	@ 0x40
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006a90:	f5b2 6fe0 	cmp.w	r2, #1792	@ 0x700
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006a94:	bf8c      	ite	hi
 8006a96:	f423 5380 	bichi.w	r3, r3, #4096	@ 0x1000
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006a9a:	f443 5380 	orrls.w	r3, r3, #4096	@ 0x1000
  hspi->RxXferSize  = Size;
 8006a9e:	f8a4 8044 	strh.w	r8, [r4, #68]	@ 0x44
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006aa2:	606b      	str	r3, [r5, #4]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006aa4:	68a3      	ldr	r3, [r4, #8]
 8006aa6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006aaa:	d107      	bne.n	8006abc <HAL_SPI_Receive+0xae>
    __HAL_SPI_DISABLE(hspi);
 8006aac:	682b      	ldr	r3, [r5, #0]
 8006aae:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006ab2:	602b      	str	r3, [r5, #0]
    SPI_1LINE_RX(hspi);
 8006ab4:	682b      	ldr	r3, [r5, #0]
 8006ab6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006aba:	602b      	str	r3, [r5, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006abc:	682b      	ldr	r3, [r5, #0]
 8006abe:	065b      	lsls	r3, r3, #25
    __HAL_SPI_ENABLE(hspi);
 8006ac0:	bf5e      	ittt	pl
 8006ac2:	682b      	ldrpl	r3, [r5, #0]
 8006ac4:	f043 0340 	orrpl.w	r3, r3, #64	@ 0x40
 8006ac8:	602b      	strpl	r3, [r5, #0]
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8006aca:	f5b2 6fe0 	cmp.w	r2, #1792	@ 0x700
 8006ace:	d923      	bls.n	8006b18 <HAL_SPI_Receive+0x10a>
    while (hspi->RxXferCount > 0U)
 8006ad0:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 8006ad4:	b29b      	uxth	r3, r3
 8006ad6:	b323      	cbz	r3, 8006b22 <HAL_SPI_Receive+0x114>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006ad8:	6823      	ldr	r3, [r4, #0]
 8006ada:	689a      	ldr	r2, [r3, #8]
 8006adc:	07d2      	lsls	r2, r2, #31
 8006ade:	d53d      	bpl.n	8006b5c <HAL_SPI_Receive+0x14e>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006ae0:	68da      	ldr	r2, [r3, #12]
 8006ae2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006ae4:	f823 2b02 	strh.w	r2, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006ae8:	6423      	str	r3, [r4, #64]	@ 0x40
        hspi->RxXferCount--;
 8006aea:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 8006aee:	3b01      	subs	r3, #1
 8006af0:	b29b      	uxth	r3, r3
 8006af2:	f8a4 3046 	strh.w	r3, [r4, #70]	@ 0x46
 8006af6:	e7eb      	b.n	8006ad0 <HAL_SPI_Receive+0xc2>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006af8:	6823      	ldr	r3, [r4, #0]
 8006afa:	689a      	ldr	r2, [r3, #8]
 8006afc:	07d0      	lsls	r0, r2, #31
 8006afe:	d51d      	bpl.n	8006b3c <HAL_SPI_Receive+0x12e>
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006b00:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8006b02:	7b1b      	ldrb	r3, [r3, #12]
 8006b04:	7013      	strb	r3, [r2, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006b06:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006b08:	3301      	adds	r3, #1
 8006b0a:	6423      	str	r3, [r4, #64]	@ 0x40
        hspi->RxXferCount--;
 8006b0c:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 8006b10:	3b01      	subs	r3, #1
 8006b12:	b29b      	uxth	r3, r3
 8006b14:	f8a4 3046 	strh.w	r3, [r4, #70]	@ 0x46
    while (hspi->RxXferCount > 0U)
 8006b18:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 8006b1c:	b29b      	uxth	r3, r3
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d1ea      	bne.n	8006af8 <HAL_SPI_Receive+0xea>
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006b22:	464a      	mov	r2, r9
 8006b24:	4639      	mov	r1, r7
 8006b26:	4620      	mov	r0, r4
 8006b28:	f7ff fcb0 	bl	800648c <SPI_EndRxTransaction>
 8006b2c:	b9f8      	cbnz	r0, 8006b6e <HAL_SPI_Receive+0x160>
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006b2e:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8006b30:	b983      	cbnz	r3, 8006b54 <HAL_SPI_Receive+0x146>
    hspi->State = HAL_SPI_STATE_READY;
 8006b32:	2201      	movs	r2, #1
 8006b34:	f884 205d 	strb.w	r2, [r4, #93]	@ 0x5d
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006b38:	461e      	mov	r6, r3
 8006b3a:	e00b      	b.n	8006b54 <HAL_SPI_Receive+0x146>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006b3c:	f7fd fe90 	bl	8004860 <HAL_GetTick>
 8006b40:	eba0 0009 	sub.w	r0, r0, r9
 8006b44:	42b8      	cmp	r0, r7
 8006b46:	d3e7      	bcc.n	8006b18 <HAL_SPI_Receive+0x10a>
 8006b48:	1c79      	adds	r1, r7, #1
 8006b4a:	d0e5      	beq.n	8006b18 <HAL_SPI_Receive+0x10a>
          hspi->State = HAL_SPI_STATE_READY;
 8006b4c:	2301      	movs	r3, #1
 8006b4e:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
          errorcode = HAL_TIMEOUT;
 8006b52:	2603      	movs	r6, #3
  __HAL_UNLOCK(hspi);
 8006b54:	2300      	movs	r3, #0
 8006b56:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
  return errorcode;
 8006b5a:	e773      	b.n	8006a44 <HAL_SPI_Receive+0x36>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006b5c:	f7fd fe80 	bl	8004860 <HAL_GetTick>
 8006b60:	eba0 0009 	sub.w	r0, r0, r9
 8006b64:	42b8      	cmp	r0, r7
 8006b66:	d3b3      	bcc.n	8006ad0 <HAL_SPI_Receive+0xc2>
 8006b68:	1c7b      	adds	r3, r7, #1
 8006b6a:	d0b1      	beq.n	8006ad0 <HAL_SPI_Receive+0xc2>
 8006b6c:	e7ee      	b.n	8006b4c <HAL_SPI_Receive+0x13e>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006b6e:	2320      	movs	r3, #32
 8006b70:	6623      	str	r3, [r4, #96]	@ 0x60
 8006b72:	e7dc      	b.n	8006b2e <HAL_SPI_Receive+0x120>
    errorcode = HAL_BUSY;
 8006b74:	2602      	movs	r6, #2
 8006b76:	e7ed      	b.n	8006b54 <HAL_SPI_Receive+0x146>
  __HAL_LOCK(hspi);
 8006b78:	2602      	movs	r6, #2
 8006b7a:	e763      	b.n	8006a44 <HAL_SPI_Receive+0x36>

08006b7c <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006b7c:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8006b80:	2b01      	cmp	r3, #1
 8006b82:	d12b      	bne.n	8006bdc <HAL_TIM_Base_Start_IT+0x60>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b84:	2302      	movs	r3, #2
 8006b86:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006b8a:	6803      	ldr	r3, [r0, #0]
 8006b8c:	68da      	ldr	r2, [r3, #12]
 8006b8e:	f042 0201 	orr.w	r2, r2, #1
 8006b92:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006b94:	4a12      	ldr	r2, [pc, #72]	@ (8006be0 <HAL_TIM_Base_Start_IT+0x64>)
 8006b96:	4293      	cmp	r3, r2
 8006b98:	d012      	beq.n	8006bc0 <HAL_TIM_Base_Start_IT+0x44>
 8006b9a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006b9e:	d00f      	beq.n	8006bc0 <HAL_TIM_Base_Start_IT+0x44>
 8006ba0:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 8006ba4:	4293      	cmp	r3, r2
 8006ba6:	d00b      	beq.n	8006bc0 <HAL_TIM_Base_Start_IT+0x44>
 8006ba8:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006bac:	4293      	cmp	r3, r2
 8006bae:	d007      	beq.n	8006bc0 <HAL_TIM_Base_Start_IT+0x44>
 8006bb0:	f502 3296 	add.w	r2, r2, #76800	@ 0x12c00
 8006bb4:	4293      	cmp	r3, r2
 8006bb6:	d003      	beq.n	8006bc0 <HAL_TIM_Base_Start_IT+0x44>
 8006bb8:	f502 6240 	add.w	r2, r2, #3072	@ 0xc00
 8006bbc:	4293      	cmp	r3, r2
 8006bbe:	d107      	bne.n	8006bd0 <HAL_TIM_Base_Start_IT+0x54>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006bc0:	6899      	ldr	r1, [r3, #8]
 8006bc2:	4a08      	ldr	r2, [pc, #32]	@ (8006be4 <HAL_TIM_Base_Start_IT+0x68>)
 8006bc4:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006bc6:	2a06      	cmp	r2, #6
 8006bc8:	d006      	beq.n	8006bd8 <HAL_TIM_Base_Start_IT+0x5c>
 8006bca:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 8006bce:	d003      	beq.n	8006bd8 <HAL_TIM_Base_Start_IT+0x5c>
    {
      __HAL_TIM_ENABLE(htim);
 8006bd0:	681a      	ldr	r2, [r3, #0]
 8006bd2:	f042 0201 	orr.w	r2, r2, #1
 8006bd6:	601a      	str	r2, [r3, #0]
  {
    __HAL_TIM_ENABLE(htim);
  }

  /* Return function status */
  return HAL_OK;
 8006bd8:	2000      	movs	r0, #0
 8006bda:	4770      	bx	lr
    return HAL_ERROR;
 8006bdc:	2001      	movs	r0, #1
}
 8006bde:	4770      	bx	lr
 8006be0:	40012c00 	.word	0x40012c00
 8006be4:	00010007 	.word	0x00010007

08006be8 <HAL_TIM_OC_DelayElapsedCallback>:
/**
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
 8006be8:	4770      	bx	lr

08006bea <HAL_TIM_IC_CaptureCallback>:
/**
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
 8006bea:	4770      	bx	lr

08006bec <HAL_TIM_PWM_PulseFinishedCallback>:
/**
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
 8006bec:	4770      	bx	lr

08006bee <HAL_TIM_TriggerCallback>:
/**
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
 8006bee:	4770      	bx	lr

08006bf0 <HAL_TIM_IRQHandler>:
  uint32_t itsource = htim->Instance->DIER;
 8006bf0:	6803      	ldr	r3, [r0, #0]
{
 8006bf2:	b570      	push	{r4, r5, r6, lr}
  uint32_t itsource = htim->Instance->DIER;
 8006bf4:	68dd      	ldr	r5, [r3, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006bf6:	691e      	ldr	r6, [r3, #16]
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006bf8:	07b2      	lsls	r2, r6, #30
{
 8006bfa:	4604      	mov	r4, r0
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006bfc:	d50d      	bpl.n	8006c1a <HAL_TIM_IRQHandler+0x2a>
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006bfe:	07a9      	lsls	r1, r5, #30
 8006c00:	d50b      	bpl.n	8006c1a <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006c02:	f06f 0202 	mvn.w	r2, #2
 8006c06:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006c08:	2201      	movs	r2, #1
 8006c0a:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006c0c:	699b      	ldr	r3, [r3, #24]
 8006c0e:	079a      	lsls	r2, r3, #30
 8006c10:	d074      	beq.n	8006cfc <HAL_TIM_IRQHandler+0x10c>
          HAL_TIM_IC_CaptureCallback(htim);
 8006c12:	f7ff ffea 	bl	8006bea <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c16:	2300      	movs	r3, #0
 8006c18:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006c1a:	0773      	lsls	r3, r6, #29
 8006c1c:	d510      	bpl.n	8006c40 <HAL_TIM_IRQHandler+0x50>
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006c1e:	0768      	lsls	r0, r5, #29
 8006c20:	d50e      	bpl.n	8006c40 <HAL_TIM_IRQHandler+0x50>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006c22:	6823      	ldr	r3, [r4, #0]
 8006c24:	f06f 0204 	mvn.w	r2, #4
 8006c28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006c2a:	2202      	movs	r2, #2
 8006c2c:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006c2e:	699b      	ldr	r3, [r3, #24]
 8006c30:	f413 7f40 	tst.w	r3, #768	@ 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8006c34:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006c36:	d067      	beq.n	8006d08 <HAL_TIM_IRQHandler+0x118>
        HAL_TIM_IC_CaptureCallback(htim);
 8006c38:	f7ff ffd7 	bl	8006bea <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c3c:	2300      	movs	r3, #0
 8006c3e:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006c40:	0731      	lsls	r1, r6, #28
 8006c42:	d50f      	bpl.n	8006c64 <HAL_TIM_IRQHandler+0x74>
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006c44:	072a      	lsls	r2, r5, #28
 8006c46:	d50d      	bpl.n	8006c64 <HAL_TIM_IRQHandler+0x74>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006c48:	6823      	ldr	r3, [r4, #0]
 8006c4a:	f06f 0208 	mvn.w	r2, #8
 8006c4e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006c50:	2204      	movs	r2, #4
 8006c52:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006c54:	69db      	ldr	r3, [r3, #28]
 8006c56:	079b      	lsls	r3, r3, #30
        HAL_TIM_IC_CaptureCallback(htim);
 8006c58:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006c5a:	d05b      	beq.n	8006d14 <HAL_TIM_IRQHandler+0x124>
        HAL_TIM_IC_CaptureCallback(htim);
 8006c5c:	f7ff ffc5 	bl	8006bea <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c60:	2300      	movs	r3, #0
 8006c62:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006c64:	06f0      	lsls	r0, r6, #27
 8006c66:	d510      	bpl.n	8006c8a <HAL_TIM_IRQHandler+0x9a>
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006c68:	06e9      	lsls	r1, r5, #27
 8006c6a:	d50e      	bpl.n	8006c8a <HAL_TIM_IRQHandler+0x9a>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006c6c:	6823      	ldr	r3, [r4, #0]
 8006c6e:	f06f 0210 	mvn.w	r2, #16
 8006c72:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006c74:	2208      	movs	r2, #8
 8006c76:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006c78:	69db      	ldr	r3, [r3, #28]
 8006c7a:	f413 7f40 	tst.w	r3, #768	@ 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8006c7e:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006c80:	d04e      	beq.n	8006d20 <HAL_TIM_IRQHandler+0x130>
        HAL_TIM_IC_CaptureCallback(htim);
 8006c82:	f7ff ffb2 	bl	8006bea <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c86:	2300      	movs	r3, #0
 8006c88:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006c8a:	07f2      	lsls	r2, r6, #31
 8006c8c:	d508      	bpl.n	8006ca0 <HAL_TIM_IRQHandler+0xb0>
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006c8e:	07eb      	lsls	r3, r5, #31
 8006c90:	d506      	bpl.n	8006ca0 <HAL_TIM_IRQHandler+0xb0>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006c92:	6823      	ldr	r3, [r4, #0]
 8006c94:	f06f 0201 	mvn.w	r2, #1
 8006c98:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8006c9a:	4620      	mov	r0, r4
 8006c9c:	f7fc fb60 	bl	8003360 <HAL_TIM_PeriodElapsedCallback>
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8006ca0:	0630      	lsls	r0, r6, #24
 8006ca2:	d508      	bpl.n	8006cb6 <HAL_TIM_IRQHandler+0xc6>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006ca4:	0629      	lsls	r1, r5, #24
 8006ca6:	d506      	bpl.n	8006cb6 <HAL_TIM_IRQHandler+0xc6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8006ca8:	6823      	ldr	r3, [r4, #0]
 8006caa:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8006cae:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8006cb0:	4620      	mov	r0, r4
 8006cb2:	f000 f9b8 	bl	8007026 <HAL_TIMEx_BreakCallback>
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8006cb6:	05f2      	lsls	r2, r6, #23
 8006cb8:	d508      	bpl.n	8006ccc <HAL_TIM_IRQHandler+0xdc>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006cba:	062b      	lsls	r3, r5, #24
 8006cbc:	d506      	bpl.n	8006ccc <HAL_TIM_IRQHandler+0xdc>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006cbe:	6823      	ldr	r3, [r4, #0]
 8006cc0:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8006cc4:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8006cc6:	4620      	mov	r0, r4
 8006cc8:	f000 f9ae 	bl	8007028 <HAL_TIMEx_Break2Callback>
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006ccc:	0670      	lsls	r0, r6, #25
 8006cce:	d508      	bpl.n	8006ce2 <HAL_TIM_IRQHandler+0xf2>
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006cd0:	0669      	lsls	r1, r5, #25
 8006cd2:	d506      	bpl.n	8006ce2 <HAL_TIM_IRQHandler+0xf2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006cd4:	6823      	ldr	r3, [r4, #0]
 8006cd6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006cda:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8006cdc:	4620      	mov	r0, r4
 8006cde:	f7ff ff86 	bl	8006bee <HAL_TIM_TriggerCallback>
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006ce2:	06b2      	lsls	r2, r6, #26
 8006ce4:	d522      	bpl.n	8006d2c <HAL_TIM_IRQHandler+0x13c>
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006ce6:	06ab      	lsls	r3, r5, #26
 8006ce8:	d520      	bpl.n	8006d2c <HAL_TIM_IRQHandler+0x13c>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006cea:	6823      	ldr	r3, [r4, #0]
 8006cec:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 8006cf0:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006cf2:	611a      	str	r2, [r3, #16]
}
 8006cf4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      HAL_TIMEx_CommutCallback(htim);
 8006cf8:	f000 b994 	b.w	8007024 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006cfc:	f7ff ff74 	bl	8006be8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d00:	4620      	mov	r0, r4
 8006d02:	f7ff ff73 	bl	8006bec <HAL_TIM_PWM_PulseFinishedCallback>
 8006d06:	e786      	b.n	8006c16 <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d08:	f7ff ff6e 	bl	8006be8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d0c:	4620      	mov	r0, r4
 8006d0e:	f7ff ff6d 	bl	8006bec <HAL_TIM_PWM_PulseFinishedCallback>
 8006d12:	e793      	b.n	8006c3c <HAL_TIM_IRQHandler+0x4c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d14:	f7ff ff68 	bl	8006be8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d18:	4620      	mov	r0, r4
 8006d1a:	f7ff ff67 	bl	8006bec <HAL_TIM_PWM_PulseFinishedCallback>
 8006d1e:	e79f      	b.n	8006c60 <HAL_TIM_IRQHandler+0x70>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d20:	f7ff ff62 	bl	8006be8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d24:	4620      	mov	r0, r4
 8006d26:	f7ff ff61 	bl	8006bec <HAL_TIM_PWM_PulseFinishedCallback>
 8006d2a:	e7ac      	b.n	8006c86 <HAL_TIM_IRQHandler+0x96>
}
 8006d2c:	bd70      	pop	{r4, r5, r6, pc}
	...

08006d30 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006d30:	4a2f      	ldr	r2, [pc, #188]	@ (8006df0 <TIM_Base_SetConfig+0xc0>)
  tmpcr1 = TIMx->CR1;
 8006d32:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006d34:	4290      	cmp	r0, r2
 8006d36:	d00e      	beq.n	8006d56 <TIM_Base_SetConfig+0x26>
 8006d38:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8006d3c:	d00b      	beq.n	8006d56 <TIM_Base_SetConfig+0x26>
 8006d3e:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 8006d42:	4290      	cmp	r0, r2
 8006d44:	d007      	beq.n	8006d56 <TIM_Base_SetConfig+0x26>
 8006d46:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006d4a:	4290      	cmp	r0, r2
 8006d4c:	d003      	beq.n	8006d56 <TIM_Base_SetConfig+0x26>
 8006d4e:	f502 3296 	add.w	r2, r2, #76800	@ 0x12c00
 8006d52:	4290      	cmp	r0, r2
 8006d54:	d115      	bne.n	8006d82 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8006d56:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006d58:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8006d5c:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006d5e:	4a24      	ldr	r2, [pc, #144]	@ (8006df0 <TIM_Base_SetConfig+0xc0>)
 8006d60:	4290      	cmp	r0, r2
 8006d62:	d019      	beq.n	8006d98 <TIM_Base_SetConfig+0x68>
 8006d64:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8006d68:	d016      	beq.n	8006d98 <TIM_Base_SetConfig+0x68>
 8006d6a:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 8006d6e:	4290      	cmp	r0, r2
 8006d70:	d012      	beq.n	8006d98 <TIM_Base_SetConfig+0x68>
 8006d72:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006d76:	4290      	cmp	r0, r2
 8006d78:	d00e      	beq.n	8006d98 <TIM_Base_SetConfig+0x68>
 8006d7a:	f502 3296 	add.w	r2, r2, #76800	@ 0x12c00
 8006d7e:	4290      	cmp	r0, r2
 8006d80:	d00a      	beq.n	8006d98 <TIM_Base_SetConfig+0x68>
 8006d82:	4a1c      	ldr	r2, [pc, #112]	@ (8006df4 <TIM_Base_SetConfig+0xc4>)
 8006d84:	4290      	cmp	r0, r2
 8006d86:	d007      	beq.n	8006d98 <TIM_Base_SetConfig+0x68>
 8006d88:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006d8c:	4290      	cmp	r0, r2
 8006d8e:	d003      	beq.n	8006d98 <TIM_Base_SetConfig+0x68>
 8006d90:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006d94:	4290      	cmp	r0, r2
 8006d96:	d103      	bne.n	8006da0 <TIM_Base_SetConfig+0x70>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006d98:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8006d9a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006d9e:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006da0:	694a      	ldr	r2, [r1, #20]
 8006da2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006da6:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8006da8:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006daa:	688b      	ldr	r3, [r1, #8]
 8006dac:	62c3      	str	r3, [r0, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006dae:	680b      	ldr	r3, [r1, #0]
 8006db0:	6283      	str	r3, [r0, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006db2:	4b0f      	ldr	r3, [pc, #60]	@ (8006df0 <TIM_Base_SetConfig+0xc0>)
 8006db4:	4298      	cmp	r0, r3
 8006db6:	d00f      	beq.n	8006dd8 <TIM_Base_SetConfig+0xa8>
 8006db8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006dbc:	4298      	cmp	r0, r3
 8006dbe:	d00b      	beq.n	8006dd8 <TIM_Base_SetConfig+0xa8>
 8006dc0:	f503 6340 	add.w	r3, r3, #3072	@ 0xc00
 8006dc4:	4298      	cmp	r0, r3
 8006dc6:	d007      	beq.n	8006dd8 <TIM_Base_SetConfig+0xa8>
 8006dc8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006dcc:	4298      	cmp	r0, r3
 8006dce:	d003      	beq.n	8006dd8 <TIM_Base_SetConfig+0xa8>
 8006dd0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006dd4:	4298      	cmp	r0, r3
 8006dd6:	d101      	bne.n	8006ddc <TIM_Base_SetConfig+0xac>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006dd8:	690b      	ldr	r3, [r1, #16]
 8006dda:	6303      	str	r3, [r0, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006ddc:	2301      	movs	r3, #1
 8006dde:	6143      	str	r3, [r0, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006de0:	6903      	ldr	r3, [r0, #16]
 8006de2:	07db      	lsls	r3, r3, #31
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006de4:	bf42      	ittt	mi
 8006de6:	6903      	ldrmi	r3, [r0, #16]
 8006de8:	f023 0301 	bicmi.w	r3, r3, #1
 8006dec:	6103      	strmi	r3, [r0, #16]
  }
}
 8006dee:	4770      	bx	lr
 8006df0:	40012c00 	.word	0x40012c00
 8006df4:	40014000 	.word	0x40014000

08006df8 <HAL_TIM_Base_Init>:
{
 8006df8:	b510      	push	{r4, lr}
  if (htim == NULL)
 8006dfa:	4604      	mov	r4, r0
 8006dfc:	b350      	cbz	r0, 8006e54 <HAL_TIM_Base_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 8006dfe:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8006e02:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8006e06:	b91b      	cbnz	r3, 8006e10 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8006e08:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 8006e0c:	f7fd faaa 	bl	8004364 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8006e10:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006e12:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8006e14:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006e18:	1d21      	adds	r1, r4, #4
 8006e1a:	f7ff ff89 	bl	8006d30 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006e1e:	2301      	movs	r3, #1
 8006e20:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
  return HAL_OK;
 8006e24:	2000      	movs	r0, #0
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006e26:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8006e2a:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8006e2e:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8006e32:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 8006e36:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006e3a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006e3e:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8006e42:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 8006e46:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
 8006e4a:	f884 3047 	strb.w	r3, [r4, #71]	@ 0x47
  htim->State = HAL_TIM_STATE_READY;
 8006e4e:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
}
 8006e52:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8006e54:	2001      	movs	r0, #1
 8006e56:	e7fc      	b.n	8006e52 <HAL_TIM_Base_Init+0x5a>

08006e58 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006e58:	b510      	push	{r4, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006e5a:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006e5c:	430a      	orrs	r2, r1
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006e5e:	f424 447f 	bic.w	r4, r4, #65280	@ 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006e62:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8006e66:	4322      	orrs	r2, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006e68:	6082      	str	r2, [r0, #8]
}
 8006e6a:	bd10      	pop	{r4, pc}

08006e6c <HAL_TIM_ConfigClockSource>:
{
 8006e6c:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8006e6e:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8006e72:	2b01      	cmp	r3, #1
{
 8006e74:	4604      	mov	r4, r0
 8006e76:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 8006e7a:	f000 808c 	beq.w	8006f96 <HAL_TIM_ConfigClockSource+0x12a>
  htim->State = HAL_TIM_STATE_BUSY;
 8006e7e:	f884 003d 	strb.w	r0, [r4, #61]	@ 0x3d
  __HAL_LOCK(htim);
 8006e82:	2201      	movs	r2, #1
  tmpsmcr = htim->Instance->SMCR;
 8006e84:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(htim);
 8006e86:	f884 203c 	strb.w	r2, [r4, #60]	@ 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8006e8a:	6885      	ldr	r5, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006e8c:	4b43      	ldr	r3, [pc, #268]	@ (8006f9c <HAL_TIM_ConfigClockSource+0x130>)
 8006e8e:	402b      	ands	r3, r5
  htim->Instance->SMCR = tmpsmcr;
 8006e90:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 8006e92:	680b      	ldr	r3, [r1, #0]
 8006e94:	2b60      	cmp	r3, #96	@ 0x60
 8006e96:	d04f      	beq.n	8006f38 <HAL_TIM_ConfigClockSource+0xcc>
 8006e98:	d832      	bhi.n	8006f00 <HAL_TIM_ConfigClockSource+0x94>
 8006e9a:	2b40      	cmp	r3, #64	@ 0x40
 8006e9c:	d064      	beq.n	8006f68 <HAL_TIM_ConfigClockSource+0xfc>
 8006e9e:	d816      	bhi.n	8006ece <HAL_TIM_ConfigClockSource+0x62>
 8006ea0:	2b20      	cmp	r3, #32
 8006ea2:	d00d      	beq.n	8006ec0 <HAL_TIM_ConfigClockSource+0x54>
 8006ea4:	d80a      	bhi.n	8006ebc <HAL_TIM_ConfigClockSource+0x50>
 8006ea6:	f033 0110 	bics.w	r1, r3, #16
 8006eaa:	d009      	beq.n	8006ec0 <HAL_TIM_ConfigClockSource+0x54>
  htim->State = HAL_TIM_STATE_READY;
 8006eac:	2301      	movs	r3, #1
 8006eae:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 8006eb2:	2300      	movs	r3, #0
 8006eb4:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 8006eb8:	4610      	mov	r0, r2
 8006eba:	bd38      	pop	{r3, r4, r5, pc}
  switch (sClockSourceConfig->ClockSource)
 8006ebc:	2b30      	cmp	r3, #48	@ 0x30
 8006ebe:	d1f5      	bne.n	8006eac <HAL_TIM_ConfigClockSource+0x40>
  tmpsmcr = TIMx->SMCR;
 8006ec0:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8006ec2:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006ec6:	4313      	orrs	r3, r2
 8006ec8:	f043 0307 	orr.w	r3, r3, #7
  TIMx->SMCR = tmpsmcr;
 8006ecc:	e028      	b.n	8006f20 <HAL_TIM_ConfigClockSource+0xb4>
  switch (sClockSourceConfig->ClockSource)
 8006ece:	2b50      	cmp	r3, #80	@ 0x50
 8006ed0:	d1ec      	bne.n	8006eac <HAL_TIM_ConfigClockSource+0x40>
                               sClockSourceConfig->ClockPolarity,
 8006ed2:	684a      	ldr	r2, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8006ed4:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 8006ed6:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006ed8:	6a03      	ldr	r3, [r0, #32]
 8006eda:	f023 0301 	bic.w	r3, r3, #1
 8006ede:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006ee0:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006ee2:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006ee6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006eea:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccer |= TIM_ICPolarity;
 8006eee:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 8006ef0:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8006ef2:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8006ef4:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8006ef6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006efa:	f043 0357 	orr.w	r3, r3, #87	@ 0x57
  TIMx->SMCR = tmpsmcr;
 8006efe:	e00f      	b.n	8006f20 <HAL_TIM_ConfigClockSource+0xb4>
  switch (sClockSourceConfig->ClockSource)
 8006f00:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006f04:	d00d      	beq.n	8006f22 <HAL_TIM_ConfigClockSource+0xb6>
 8006f06:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006f0a:	d00c      	beq.n	8006f26 <HAL_TIM_ConfigClockSource+0xba>
 8006f0c:	2b70      	cmp	r3, #112	@ 0x70
 8006f0e:	d1cd      	bne.n	8006eac <HAL_TIM_ConfigClockSource+0x40>
      TIM_ETR_SetConfig(htim->Instance,
 8006f10:	68cb      	ldr	r3, [r1, #12]
 8006f12:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8006f16:	f7ff ff9f 	bl	8006e58 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006f1a:	6883      	ldr	r3, [r0, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006f1c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
      htim->Instance->SMCR = tmpsmcr;
 8006f20:	6083      	str	r3, [r0, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8006f22:	2200      	movs	r2, #0
 8006f24:	e7c2      	b.n	8006eac <HAL_TIM_ConfigClockSource+0x40>
      TIM_ETR_SetConfig(htim->Instance,
 8006f26:	68cb      	ldr	r3, [r1, #12]
 8006f28:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8006f2c:	f7ff ff94 	bl	8006e58 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006f30:	6883      	ldr	r3, [r0, #8]
 8006f32:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006f36:	e7f3      	b.n	8006f20 <HAL_TIM_ConfigClockSource+0xb4>
  tmpccer = TIMx->CCER;
 8006f38:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006f3a:	6a02      	ldr	r2, [r0, #32]
                               sClockSourceConfig->ClockPolarity,
 8006f3c:	684d      	ldr	r5, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8006f3e:	68c9      	ldr	r1, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006f40:	f022 0210 	bic.w	r2, r2, #16
 8006f44:	6202      	str	r2, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006f46:	6982      	ldr	r2, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006f48:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006f4c:	f422 4270 	bic.w	r2, r2, #61440	@ 0xf000
  tmpccer |= (TIM_ICPolarity << 4U);
 8006f50:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006f54:	ea42 3201 	orr.w	r2, r2, r1, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8006f58:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8006f5a:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8006f5c:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8006f5e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006f62:	f043 0367 	orr.w	r3, r3, #103	@ 0x67
  TIMx->SMCR = tmpsmcr;
 8006f66:	e7db      	b.n	8006f20 <HAL_TIM_ConfigClockSource+0xb4>
                               sClockSourceConfig->ClockPolarity,
 8006f68:	684a      	ldr	r2, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8006f6a:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 8006f6c:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006f6e:	6a03      	ldr	r3, [r0, #32]
 8006f70:	f023 0301 	bic.w	r3, r3, #1
 8006f74:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006f76:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006f78:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006f7c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006f80:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccer |= TIM_ICPolarity;
 8006f84:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 8006f86:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8006f88:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8006f8a:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8006f8c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006f90:	f043 0347 	orr.w	r3, r3, #71	@ 0x47
  TIMx->SMCR = tmpsmcr;
 8006f94:	e7c4      	b.n	8006f20 <HAL_TIM_ConfigClockSource+0xb4>
  __HAL_LOCK(htim);
 8006f96:	4602      	mov	r2, r0
 8006f98:	e78e      	b.n	8006eb8 <HAL_TIM_ConfigClockSource+0x4c>
 8006f9a:	bf00      	nop
 8006f9c:	fffe0088 	.word	0xfffe0088

08006fa0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006fa0:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006fa2:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8006fa6:	2b01      	cmp	r3, #1
{
 8006fa8:	4604      	mov	r4, r0
 8006faa:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 8006fae:	d032      	beq.n	8007016 <HAL_TIMEx_MasterConfigSynchronization+0x76>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006fb0:	6823      	ldr	r3, [r4, #0]
  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006fb2:	4d19      	ldr	r5, [pc, #100]	@ (8007018 <HAL_TIMEx_MasterConfigSynchronization+0x78>)
  htim->State = HAL_TIM_STATE_BUSY;
 8006fb4:	f884 003d 	strb.w	r0, [r4, #61]	@ 0x3d
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006fb8:	42ab      	cmp	r3, r5
  tmpcr2 = htim->Instance->CR2;
 8006fba:	685a      	ldr	r2, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;
 8006fbc:	6898      	ldr	r0, [r3, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006fbe:	d002      	beq.n	8006fc6 <HAL_TIMEx_MasterConfigSynchronization+0x26>
 8006fc0:	4e16      	ldr	r6, [pc, #88]	@ (800701c <HAL_TIMEx_MasterConfigSynchronization+0x7c>)
 8006fc2:	42b3      	cmp	r3, r6
 8006fc4:	d103      	bne.n	8006fce <HAL_TIMEx_MasterConfigSynchronization+0x2e>
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006fc6:	684e      	ldr	r6, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006fc8:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006fcc:	4332      	orrs	r2, r6
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006fce:	680e      	ldr	r6, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 8006fd0:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006fd4:	4332      	orrs	r2, r6

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006fd6:	42ab      	cmp	r3, r5
  htim->Instance->CR2 = tmpcr2;
 8006fd8:	605a      	str	r2, [r3, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006fda:	d011      	beq.n	8007000 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 8006fdc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006fe0:	d00e      	beq.n	8007000 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 8006fe2:	4a0f      	ldr	r2, [pc, #60]	@ (8007020 <HAL_TIMEx_MasterConfigSynchronization+0x80>)
 8006fe4:	4293      	cmp	r3, r2
 8006fe6:	d00b      	beq.n	8007000 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 8006fe8:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006fec:	4293      	cmp	r3, r2
 8006fee:	d007      	beq.n	8007000 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 8006ff0:	f502 3296 	add.w	r2, r2, #76800	@ 0x12c00
 8006ff4:	4293      	cmp	r3, r2
 8006ff6:	d003      	beq.n	8007000 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 8006ff8:	f502 6240 	add.w	r2, r2, #3072	@ 0xc00
 8006ffc:	4293      	cmp	r3, r2
 8006ffe:	d104      	bne.n	800700a <HAL_TIMEx_MasterConfigSynchronization+0x6a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007000:	6889      	ldr	r1, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007002:	f020 0280 	bic.w	r2, r0, #128	@ 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007006:	430a      	orrs	r2, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007008:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800700a:	2301      	movs	r3, #1

  __HAL_UNLOCK(htim);
 800700c:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800700e:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 8007012:	f884 003c 	strb.w	r0, [r4, #60]	@ 0x3c

  return HAL_OK;
}
 8007016:	bd70      	pop	{r4, r5, r6, pc}
 8007018:	40012c00 	.word	0x40012c00
 800701c:	40013400 	.word	0x40013400
 8007020:	40000400 	.word	0x40000400

08007024 <HAL_TIMEx_CommutCallback>:
/**
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
 8007024:	4770      	bx	lr

08007026 <HAL_TIMEx_BreakCallback>:
/**
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
 8007026:	4770      	bx	lr

08007028 <HAL_TIMEx_Break2Callback>:
/**
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
 8007028:	4770      	bx	lr

0800702a <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800702a:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800702c:	e852 3f00 	ldrex	r3, [r2]
 8007030:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007034:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 8007038:	6802      	ldr	r2, [r0, #0]
 800703a:	2900      	cmp	r1, #0
 800703c:	d1f5      	bne.n	800702a <UART_EndRxTransfer>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800703e:	f102 0308 	add.w	r3, r2, #8
 8007042:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007046:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800704a:	f102 0c08 	add.w	ip, r2, #8
 800704e:	e84c 3100 	strex	r1, r3, [ip]
 8007052:	2900      	cmp	r1, #0
 8007054:	d1f3      	bne.n	800703e <UART_EndRxTransfer+0x14>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007056:	6e03      	ldr	r3, [r0, #96]	@ 0x60
 8007058:	2b01      	cmp	r3, #1
 800705a:	d107      	bne.n	800706c <UART_EndRxTransfer+0x42>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800705c:	e852 3f00 	ldrex	r3, [r2]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007060:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007064:	e842 3100 	strex	r1, r3, [r2]
 8007068:	2900      	cmp	r1, #0
 800706a:	d1f7      	bne.n	800705c <UART_EndRxTransfer+0x32>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800706c:	2320      	movs	r3, #32
 800706e:	f8c0 3080 	str.w	r3, [r0, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007072:	2300      	movs	r3, #0
 8007074:	6603      	str	r3, [r0, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007076:	6683      	str	r3, [r0, #104]	@ 0x68
}
 8007078:	4770      	bx	lr

0800707a <HAL_UART_Abort>:
{
 800707a:	b510      	push	{r4, lr}
 800707c:	4604      	mov	r4, r0
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 800707e:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007080:	e852 3f00 	ldrex	r3, [r2]
 8007084:	f423 73f0 	bic.w	r3, r3, #480	@ 0x1e0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007088:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 800708c:	6823      	ldr	r3, [r4, #0]
 800708e:	2900      	cmp	r1, #0
 8007090:	d1f5      	bne.n	800707e <HAL_UART_Abort+0x4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007092:	f103 0208 	add.w	r2, r3, #8
 8007096:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800709a:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800709e:	f103 0008 	add.w	r0, r3, #8
 80070a2:	e840 2100 	strex	r1, r2, [r0]
 80070a6:	2900      	cmp	r1, #0
 80070a8:	d1f3      	bne.n	8007092 <HAL_UART_Abort+0x18>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80070aa:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 80070ac:	2a01      	cmp	r2, #1
 80070ae:	d107      	bne.n	80070c0 <HAL_UART_Abort+0x46>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070b0:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 80070b4:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070b8:	e843 2100 	strex	r1, r2, [r3]
 80070bc:	2900      	cmp	r1, #0
 80070be:	d1f7      	bne.n	80070b0 <HAL_UART_Abort+0x36>
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 80070c0:	689a      	ldr	r2, [r3, #8]
 80070c2:	0612      	lsls	r2, r2, #24
 80070c4:	d51b      	bpl.n	80070fe <HAL_UART_Abort+0x84>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070c6:	f103 0208 	add.w	r2, r3, #8
 80070ca:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80070ce:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070d2:	f103 0008 	add.w	r0, r3, #8
 80070d6:	e840 2100 	strex	r1, r2, [r0]
 80070da:	2900      	cmp	r1, #0
 80070dc:	d1f3      	bne.n	80070c6 <HAL_UART_Abort+0x4c>
    if (huart->hdmatx != NULL)
 80070de:	6f20      	ldr	r0, [r4, #112]	@ 0x70
 80070e0:	b168      	cbz	r0, 80070fe <HAL_UART_Abort+0x84>
      huart->hdmatx->XferAbortCallback = NULL;
 80070e2:	6341      	str	r1, [r0, #52]	@ 0x34
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 80070e4:	f7fe f9e5 	bl	80054b2 <HAL_DMA_Abort>
 80070e8:	b148      	cbz	r0, 80070fe <HAL_UART_Abort+0x84>
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 80070ea:	6f20      	ldr	r0, [r4, #112]	@ 0x70
 80070ec:	f7fe fa46 	bl	800557c <HAL_DMA_GetError>
 80070f0:	2820      	cmp	r0, #32
 80070f2:	d104      	bne.n	80070fe <HAL_UART_Abort+0x84>
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80070f4:	2310      	movs	r3, #16
 80070f6:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
          return HAL_TIMEOUT;
 80070fa:	2003      	movs	r0, #3
}
 80070fc:	bd10      	pop	{r4, pc}
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80070fe:	6822      	ldr	r2, [r4, #0]
 8007100:	6893      	ldr	r3, [r2, #8]
 8007102:	065b      	lsls	r3, r3, #25
 8007104:	d516      	bpl.n	8007134 <HAL_UART_Abort+0xba>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007106:	f102 0308 	add.w	r3, r2, #8
 800710a:	e853 3f00 	ldrex	r3, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800710e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007112:	f102 0008 	add.w	r0, r2, #8
 8007116:	e840 3100 	strex	r1, r3, [r0]
 800711a:	2900      	cmp	r1, #0
 800711c:	d1f3      	bne.n	8007106 <HAL_UART_Abort+0x8c>
    if (huart->hdmarx != NULL)
 800711e:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 8007120:	b140      	cbz	r0, 8007134 <HAL_UART_Abort+0xba>
      huart->hdmarx->XferAbortCallback = NULL;
 8007122:	6341      	str	r1, [r0, #52]	@ 0x34
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8007124:	f7fe f9c5 	bl	80054b2 <HAL_DMA_Abort>
 8007128:	b120      	cbz	r0, 8007134 <HAL_UART_Abort+0xba>
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800712a:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 800712c:	f7fe fa26 	bl	800557c <HAL_DMA_GetError>
 8007130:	2820      	cmp	r0, #32
 8007132:	d0df      	beq.n	80070f4 <HAL_UART_Abort+0x7a>
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8007134:	6823      	ldr	r3, [r4, #0]
  huart->TxXferCount = 0U;
 8007136:	2000      	movs	r0, #0
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8007138:	220f      	movs	r2, #15
  huart->TxXferCount = 0U;
 800713a:	f8a4 0052 	strh.w	r0, [r4, #82]	@ 0x52
  huart->RxXferCount = 0U;
 800713e:	f8a4 005a 	strh.w	r0, [r4, #90]	@ 0x5a
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8007142:	621a      	str	r2, [r3, #32]
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007144:	699a      	ldr	r2, [r3, #24]
 8007146:	f042 0208 	orr.w	r2, r2, #8
 800714a:	619a      	str	r2, [r3, #24]
  huart->gState  = HAL_UART_STATE_READY;
 800714c:	2320      	movs	r3, #32
 800714e:	67e3      	str	r3, [r4, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007150:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007154:	6620      	str	r0, [r4, #96]	@ 0x60
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007156:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
  return HAL_OK;
 800715a:	e7cf      	b.n	80070fc <HAL_UART_Abort+0x82>

0800715c <HAL_UART_RxCpltCallback>:
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
 800715c:	4770      	bx	lr

0800715e <HAL_UART_RxHalfCpltCallback>:
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
 800715e:	4770      	bx	lr

08007160 <HAL_UART_ErrorCallback>:
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
 8007160:	4770      	bx	lr

08007162 <UART_DMAError>:
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007162:	6a40      	ldr	r0, [r0, #36]	@ 0x24

  const HAL_UART_StateTypeDef gstate = huart->gState;
  const HAL_UART_StateTypeDef rxstate = huart->RxState;

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8007164:	6803      	ldr	r3, [r0, #0]
  const HAL_UART_StateTypeDef gstate = huart->gState;
 8007166:	6fc2      	ldr	r2, [r0, #124]	@ 0x7c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8007168:	f8d0 1080 	ldr.w	r1, [r0, #128]	@ 0x80
{
 800716c:	b510      	push	{r4, lr}
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800716e:	689c      	ldr	r4, [r3, #8]
 8007170:	0624      	lsls	r4, r4, #24
 8007172:	d50e      	bpl.n	8007192 <UART_DMAError+0x30>
 8007174:	2a21      	cmp	r2, #33	@ 0x21
 8007176:	d10c      	bne.n	8007192 <UART_DMAError+0x30>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8007178:	2200      	movs	r2, #0
 800717a:	f8a0 2052 	strh.w	r2, [r0, #82]	@ 0x52
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800717e:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007182:	f022 02c0 	bic.w	r2, r2, #192	@ 0xc0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007186:	e843 2400 	strex	r4, r2, [r3]
 800718a:	2c00      	cmp	r4, #0
 800718c:	d1f7      	bne.n	800717e <UART_DMAError+0x1c>
  huart->gState = HAL_UART_STATE_READY;
 800718e:	2220      	movs	r2, #32
 8007190:	67c2      	str	r2, [r0, #124]	@ 0x7c
    UART_EndTxTransfer(huart);
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8007192:	689b      	ldr	r3, [r3, #8]
 8007194:	065b      	lsls	r3, r3, #25
 8007196:	d506      	bpl.n	80071a6 <UART_DMAError+0x44>
 8007198:	2922      	cmp	r1, #34	@ 0x22
 800719a:	d104      	bne.n	80071a6 <UART_DMAError+0x44>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800719c:	2300      	movs	r3, #0
 800719e:	f8a0 305a 	strh.w	r3, [r0, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 80071a2:	f7ff ff42 	bl	800702a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80071a6:	f8d0 3084 	ldr.w	r3, [r0, #132]	@ 0x84
 80071aa:	f043 0310 	orr.w	r3, r3, #16
 80071ae:	f8c0 3084 	str.w	r3, [r0, #132]	@ 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80071b2:	f7ff ffd5 	bl	8007160 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80071b6:	bd10      	pop	{r4, pc}

080071b8 <HAL_UARTEx_RxEventCallback>:
}
 80071b8:	4770      	bx	lr

080071ba <UART_DMARxHalfCplt>:
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80071ba:	6a40      	ldr	r0, [r0, #36]	@ 0x24
{
 80071bc:	b508      	push	{r3, lr}
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80071be:	2301      	movs	r3, #1
 80071c0:	6643      	str	r3, [r0, #100]	@ 0x64
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80071c2:	6e03      	ldr	r3, [r0, #96]	@ 0x60
 80071c4:	2b01      	cmp	r3, #1
 80071c6:	d105      	bne.n	80071d4 <UART_DMARxHalfCplt+0x1a>
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80071c8:	f8b0 1058 	ldrh.w	r1, [r0, #88]	@ 0x58
 80071cc:	0849      	lsrs	r1, r1, #1
 80071ce:	f7ff fff3 	bl	80071b8 <HAL_UARTEx_RxEventCallback>
}
 80071d2:	bd08      	pop	{r3, pc}
    HAL_UART_RxHalfCpltCallback(huart);
 80071d4:	f7ff ffc3 	bl	800715e <HAL_UART_RxHalfCpltCallback>
}
 80071d8:	e7fb      	b.n	80071d2 <UART_DMARxHalfCplt+0x18>

080071da <UART_DMAReceiveCplt>:
{
 80071da:	b508      	push	{r3, lr}
 80071dc:	4603      	mov	r3, r0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80071de:	6a40      	ldr	r0, [r0, #36]	@ 0x24
  if (hdma->Init.Mode != DMA_CIRCULAR)
 80071e0:	699b      	ldr	r3, [r3, #24]
 80071e2:	2b20      	cmp	r3, #32
 80071e4:	d032      	beq.n	800724c <UART_DMAReceiveCplt+0x72>
    huart->RxXferCount = 0U;
 80071e6:	2300      	movs	r3, #0
 80071e8:	f8a0 305a 	strh.w	r3, [r0, #90]	@ 0x5a
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80071ec:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071ee:	e852 3f00 	ldrex	r3, [r2]
 80071f2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071f6:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 80071fa:	6803      	ldr	r3, [r0, #0]
 80071fc:	2900      	cmp	r1, #0
 80071fe:	d1f5      	bne.n	80071ec <UART_DMAReceiveCplt+0x12>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007200:	f103 0208 	add.w	r2, r3, #8
 8007204:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007208:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800720c:	f103 0c08 	add.w	ip, r3, #8
 8007210:	e84c 2100 	strex	r1, r2, [ip]
 8007214:	2900      	cmp	r1, #0
 8007216:	d1f3      	bne.n	8007200 <UART_DMAReceiveCplt+0x26>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007218:	f103 0208 	add.w	r2, r3, #8
 800721c:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007220:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007224:	f103 0c08 	add.w	ip, r3, #8
 8007228:	e84c 2100 	strex	r1, r2, [ip]
 800722c:	2900      	cmp	r1, #0
 800722e:	d1f3      	bne.n	8007218 <UART_DMAReceiveCplt+0x3e>
    huart->RxState = HAL_UART_STATE_READY;
 8007230:	2220      	movs	r2, #32
 8007232:	f8c0 2080 	str.w	r2, [r0, #128]	@ 0x80
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007236:	6e02      	ldr	r2, [r0, #96]	@ 0x60
 8007238:	2a01      	cmp	r2, #1
 800723a:	d107      	bne.n	800724c <UART_DMAReceiveCplt+0x72>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800723c:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007240:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007244:	e843 2100 	strex	r1, r2, [r3]
 8007248:	2900      	cmp	r1, #0
 800724a:	d1f7      	bne.n	800723c <UART_DMAReceiveCplt+0x62>
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800724c:	2300      	movs	r3, #0
 800724e:	6643      	str	r3, [r0, #100]	@ 0x64
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007250:	6e03      	ldr	r3, [r0, #96]	@ 0x60
 8007252:	2b01      	cmp	r3, #1
 8007254:	d104      	bne.n	8007260 <UART_DMAReceiveCplt+0x86>
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007256:	f8b0 1058 	ldrh.w	r1, [r0, #88]	@ 0x58
 800725a:	f7ff ffad 	bl	80071b8 <HAL_UARTEx_RxEventCallback>
}
 800725e:	bd08      	pop	{r3, pc}
    HAL_UART_RxCpltCallback(huart);
 8007260:	f7ff ff7c 	bl	800715c <HAL_UART_RxCpltCallback>
}
 8007264:	e7fb      	b.n	800725e <UART_DMAReceiveCplt+0x84>
	...

08007268 <UART_SetConfig>:
{
 8007268:	b538      	push	{r3, r4, r5, lr}
 800726a:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800726c:	69c0      	ldr	r0, [r0, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800726e:	6823      	ldr	r3, [r4, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007270:	6925      	ldr	r5, [r4, #16]
 8007272:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007274:	6819      	ldr	r1, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007276:	432a      	orrs	r2, r5
 8007278:	6965      	ldr	r5, [r4, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800727a:	f421 4116 	bic.w	r1, r1, #38400	@ 0x9600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800727e:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007280:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007284:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007286:	430a      	orrs	r2, r1
 8007288:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800728a:	685a      	ldr	r2, [r3, #4]
 800728c:	68e1      	ldr	r1, [r4, #12]
  tmpreg |= huart->Init.OneBitSampling;
 800728e:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007290:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 8007294:	430a      	orrs	r2, r1
 8007296:	605a      	str	r2, [r3, #4]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007298:	6899      	ldr	r1, [r3, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800729a:	69a2      	ldr	r2, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800729c:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
  tmpreg |= huart->Init.OneBitSampling;
 80072a0:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80072a2:	430a      	orrs	r2, r1
 80072a4:	609a      	str	r2, [r3, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 80072a6:	4a56      	ldr	r2, [pc, #344]	@ (8007400 <UART_SetConfig+0x198>)
 80072a8:	4293      	cmp	r3, r2
 80072aa:	d112      	bne.n	80072d2 <UART_SetConfig+0x6a>
 80072ac:	4b55      	ldr	r3, [pc, #340]	@ (8007404 <UART_SetConfig+0x19c>)
 80072ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072b0:	f003 0303 	and.w	r3, r3, #3
 80072b4:	2b02      	cmp	r3, #2
 80072b6:	f000 8091 	beq.w	80073dc <UART_SetConfig+0x174>
 80072ba:	2b03      	cmp	r3, #3
 80072bc:	d022      	beq.n	8007304 <UART_SetConfig+0x9c>
 80072be:	2b01      	cmp	r3, #1
 80072c0:	f040 8092 	bne.w	80073e8 <UART_SetConfig+0x180>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80072c4:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 80072c8:	f040 8085 	bne.w	80073d6 <UART_SetConfig+0x16e>
        pclk = HAL_RCC_GetSysClockFreq();
 80072cc:	f7fe fc86 	bl	8005bdc <HAL_RCC_GetSysClockFreq>
        break;
 80072d0:	e06b      	b.n	80073aa <UART_SetConfig+0x142>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80072d2:	4a4d      	ldr	r2, [pc, #308]	@ (8007408 <UART_SetConfig+0x1a0>)
 80072d4:	4293      	cmp	r3, r2
 80072d6:	d12e      	bne.n	8007336 <UART_SetConfig+0xce>
 80072d8:	4b4a      	ldr	r3, [pc, #296]	@ (8007404 <UART_SetConfig+0x19c>)
 80072da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072dc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80072e0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80072e4:	d07a      	beq.n	80073dc <UART_SetConfig+0x174>
 80072e6:	d80a      	bhi.n	80072fe <UART_SetConfig+0x96>
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	f000 8083 	beq.w	80073f4 <UART_SetConfig+0x18c>
 80072ee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80072f2:	d0e7      	beq.n	80072c4 <UART_SetConfig+0x5c>
        ret = HAL_ERROR;
 80072f4:	2001      	movs	r0, #1
  huart->RxISR = NULL;
 80072f6:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 80072f8:	e9c4 331a 	strd	r3, r3, [r4, #104]	@ 0x68
}
 80072fc:	bd38      	pop	{r3, r4, r5, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 80072fe:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007302:	d1f7      	bne.n	80072f4 <UART_SetConfig+0x8c>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007304:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8007308:	4840      	ldr	r0, [pc, #256]	@ (800740c <UART_SetConfig+0x1a4>)
 800730a:	d156      	bne.n	80073ba <UART_SetConfig+0x152>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800730c:	6862      	ldr	r2, [r4, #4]
 800730e:	0853      	lsrs	r3, r2, #1
 8007310:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8007314:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007318:	f64f 72ef 	movw	r2, #65519	@ 0xffef
 800731c:	f1a3 0110 	sub.w	r1, r3, #16
 8007320:	4291      	cmp	r1, r2
 8007322:	d8e7      	bhi.n	80072f4 <UART_SetConfig+0x8c>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007324:	f023 020f 	bic.w	r2, r3, #15
        huart->Instance->BRR = brrtemp;
 8007328:	6821      	ldr	r1, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800732a:	b292      	uxth	r2, r2
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800732c:	f3c3 0342 	ubfx	r3, r3, #1, #3
        huart->Instance->BRR = brrtemp;
 8007330:	4313      	orrs	r3, r2
 8007332:	60cb      	str	r3, [r1, #12]
 8007334:	e03b      	b.n	80073ae <UART_SetConfig+0x146>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007336:	4a36      	ldr	r2, [pc, #216]	@ (8007410 <UART_SetConfig+0x1a8>)
 8007338:	4293      	cmp	r3, r2
 800733a:	d10f      	bne.n	800735c <UART_SetConfig+0xf4>
 800733c:	4b31      	ldr	r3, [pc, #196]	@ (8007404 <UART_SetConfig+0x19c>)
 800733e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007340:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8007344:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8007348:	d048      	beq.n	80073dc <UART_SetConfig+0x174>
 800734a:	d804      	bhi.n	8007356 <UART_SetConfig+0xee>
 800734c:	2b00      	cmp	r3, #0
 800734e:	d051      	beq.n	80073f4 <UART_SetConfig+0x18c>
 8007350:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007354:	e7cd      	b.n	80072f2 <UART_SetConfig+0x8a>
 8007356:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800735a:	e7d2      	b.n	8007302 <UART_SetConfig+0x9a>
 800735c:	4a2d      	ldr	r2, [pc, #180]	@ (8007414 <UART_SetConfig+0x1ac>)
 800735e:	4293      	cmp	r3, r2
 8007360:	d10f      	bne.n	8007382 <UART_SetConfig+0x11a>
 8007362:	4b28      	ldr	r3, [pc, #160]	@ (8007404 <UART_SetConfig+0x19c>)
 8007364:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007366:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800736a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800736e:	d035      	beq.n	80073dc <UART_SetConfig+0x174>
 8007370:	d804      	bhi.n	800737c <UART_SetConfig+0x114>
 8007372:	2b00      	cmp	r3, #0
 8007374:	d03e      	beq.n	80073f4 <UART_SetConfig+0x18c>
 8007376:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800737a:	e7ba      	b.n	80072f2 <UART_SetConfig+0x8a>
 800737c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007380:	e7bf      	b.n	8007302 <UART_SetConfig+0x9a>
 8007382:	4a25      	ldr	r2, [pc, #148]	@ (8007418 <UART_SetConfig+0x1b0>)
 8007384:	4293      	cmp	r3, r2
 8007386:	d1b5      	bne.n	80072f4 <UART_SetConfig+0x8c>
 8007388:	4b1e      	ldr	r3, [pc, #120]	@ (8007404 <UART_SetConfig+0x19c>)
 800738a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800738c:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8007390:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007394:	d022      	beq.n	80073dc <UART_SetConfig+0x174>
 8007396:	d803      	bhi.n	80073a0 <UART_SetConfig+0x138>
 8007398:	b363      	cbz	r3, 80073f4 <UART_SetConfig+0x18c>
 800739a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800739e:	e7a8      	b.n	80072f2 <UART_SetConfig+0x8a>
 80073a0:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80073a4:	e7ad      	b.n	8007302 <UART_SetConfig+0x9a>
        pclk = HAL_RCC_GetPCLK2Freq();
 80073a6:	f7fe fcfd 	bl	8005da4 <HAL_RCC_GetPCLK2Freq>
    if (pclk != 0U)
 80073aa:	2800      	cmp	r0, #0
 80073ac:	d1ae      	bne.n	800730c <UART_SetConfig+0xa4>
        pclk = (uint32_t) HSI_VALUE;
 80073ae:	2000      	movs	r0, #0
 80073b0:	e7a1      	b.n	80072f6 <UART_SetConfig+0x8e>
        pclk = HAL_RCC_GetPCLK1Freq();
 80073b2:	f7fe fcdf 	bl	8005d74 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 80073b6:	2800      	cmp	r0, #0
 80073b8:	d0f9      	beq.n	80073ae <UART_SetConfig+0x146>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80073ba:	6862      	ldr	r2, [r4, #4]
 80073bc:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 80073c0:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80073c4:	f64f 72ef 	movw	r2, #65519	@ 0xffef
 80073c8:	f1a3 0110 	sub.w	r1, r3, #16
 80073cc:	4291      	cmp	r1, r2
 80073ce:	d891      	bhi.n	80072f4 <UART_SetConfig+0x8c>
        huart->Instance->BRR = (uint16_t)usartdiv;
 80073d0:	6822      	ldr	r2, [r4, #0]
 80073d2:	60d3      	str	r3, [r2, #12]
 80073d4:	e7eb      	b.n	80073ae <UART_SetConfig+0x146>
        pclk = HAL_RCC_GetSysClockFreq();
 80073d6:	f7fe fc01 	bl	8005bdc <HAL_RCC_GetSysClockFreq>
        break;
 80073da:	e7ec      	b.n	80073b6 <UART_SetConfig+0x14e>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80073dc:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 80073e0:	d094      	beq.n	800730c <UART_SetConfig+0xa4>
 80073e2:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 80073e6:	e7e8      	b.n	80073ba <UART_SetConfig+0x152>
 80073e8:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 80073ec:	d0db      	beq.n	80073a6 <UART_SetConfig+0x13e>
        pclk = HAL_RCC_GetPCLK2Freq();
 80073ee:	f7fe fcd9 	bl	8005da4 <HAL_RCC_GetPCLK2Freq>
        break;
 80073f2:	e7e0      	b.n	80073b6 <UART_SetConfig+0x14e>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80073f4:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 80073f8:	d1db      	bne.n	80073b2 <UART_SetConfig+0x14a>
        pclk = HAL_RCC_GetPCLK1Freq();
 80073fa:	f7fe fcbb 	bl	8005d74 <HAL_RCC_GetPCLK1Freq>
        break;
 80073fe:	e7d4      	b.n	80073aa <UART_SetConfig+0x142>
 8007400:	40013800 	.word	0x40013800
 8007404:	40021000 	.word	0x40021000
 8007408:	40004400 	.word	0x40004400
 800740c:	007a1200 	.word	0x007a1200
 8007410:	40004800 	.word	0x40004800
 8007414:	40004c00 	.word	0x40004c00
 8007418:	40005000 	.word	0x40005000

0800741c <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800741c:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800741e:	071a      	lsls	r2, r3, #28
{
 8007420:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007422:	d506      	bpl.n	8007432 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007424:	6801      	ldr	r1, [r0, #0]
 8007426:	6b44      	ldr	r4, [r0, #52]	@ 0x34
 8007428:	684a      	ldr	r2, [r1, #4]
 800742a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800742e:	4322      	orrs	r2, r4
 8007430:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007432:	07dc      	lsls	r4, r3, #31
 8007434:	d506      	bpl.n	8007444 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007436:	6801      	ldr	r1, [r0, #0]
 8007438:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 800743a:	684a      	ldr	r2, [r1, #4]
 800743c:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8007440:	4322      	orrs	r2, r4
 8007442:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007444:	0799      	lsls	r1, r3, #30
 8007446:	d506      	bpl.n	8007456 <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007448:	6801      	ldr	r1, [r0, #0]
 800744a:	6ac4      	ldr	r4, [r0, #44]	@ 0x2c
 800744c:	684a      	ldr	r2, [r1, #4]
 800744e:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8007452:	4322      	orrs	r2, r4
 8007454:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007456:	075a      	lsls	r2, r3, #29
 8007458:	d506      	bpl.n	8007468 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800745a:	6801      	ldr	r1, [r0, #0]
 800745c:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 800745e:	684a      	ldr	r2, [r1, #4]
 8007460:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8007464:	4322      	orrs	r2, r4
 8007466:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007468:	06dc      	lsls	r4, r3, #27
 800746a:	d506      	bpl.n	800747a <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800746c:	6801      	ldr	r1, [r0, #0]
 800746e:	6b84      	ldr	r4, [r0, #56]	@ 0x38
 8007470:	688a      	ldr	r2, [r1, #8]
 8007472:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8007476:	4322      	orrs	r2, r4
 8007478:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800747a:	0699      	lsls	r1, r3, #26
 800747c:	d506      	bpl.n	800748c <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800747e:	6801      	ldr	r1, [r0, #0]
 8007480:	6bc4      	ldr	r4, [r0, #60]	@ 0x3c
 8007482:	688a      	ldr	r2, [r1, #8]
 8007484:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007488:	4322      	orrs	r2, r4
 800748a:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800748c:	065a      	lsls	r2, r3, #25
 800748e:	d50f      	bpl.n	80074b0 <UART_AdvFeatureConfig+0x94>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007490:	6801      	ldr	r1, [r0, #0]
 8007492:	6c04      	ldr	r4, [r0, #64]	@ 0x40
 8007494:	684a      	ldr	r2, [r1, #4]
 8007496:	f422 1280 	bic.w	r2, r2, #1048576	@ 0x100000
 800749a:	4322      	orrs	r2, r4
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800749c:	f5b4 1f80 	cmp.w	r4, #1048576	@ 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80074a0:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80074a2:	d105      	bne.n	80074b0 <UART_AdvFeatureConfig+0x94>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80074a4:	684a      	ldr	r2, [r1, #4]
 80074a6:	6c44      	ldr	r4, [r0, #68]	@ 0x44
 80074a8:	f422 02c0 	bic.w	r2, r2, #6291456	@ 0x600000
 80074ac:	4322      	orrs	r2, r4
 80074ae:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80074b0:	061b      	lsls	r3, r3, #24
 80074b2:	d506      	bpl.n	80074c2 <UART_AdvFeatureConfig+0xa6>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80074b4:	6802      	ldr	r2, [r0, #0]
 80074b6:	6c81      	ldr	r1, [r0, #72]	@ 0x48
 80074b8:	6853      	ldr	r3, [r2, #4]
 80074ba:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 80074be:	430b      	orrs	r3, r1
 80074c0:	6053      	str	r3, [r2, #4]
}
 80074c2:	bd10      	pop	{r4, pc}

080074c4 <UART_WaitOnFlagUntilTimeout>:
{
 80074c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80074c8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80074cc:	4604      	mov	r4, r0
 80074ce:	460d      	mov	r5, r1
 80074d0:	4617      	mov	r7, r2
 80074d2:	4698      	mov	r8, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80074d4:	6822      	ldr	r2, [r4, #0]
 80074d6:	69d3      	ldr	r3, [r2, #28]
 80074d8:	ea35 0303 	bics.w	r3, r5, r3
 80074dc:	bf0c      	ite	eq
 80074de:	2301      	moveq	r3, #1
 80074e0:	2300      	movne	r3, #0
 80074e2:	42bb      	cmp	r3, r7
 80074e4:	d001      	beq.n	80074ea <UART_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
 80074e6:	2000      	movs	r0, #0
 80074e8:	e022      	b.n	8007530 <UART_WaitOnFlagUntilTimeout+0x6c>
    if (Timeout != HAL_MAX_DELAY)
 80074ea:	f1b9 3fff 	cmp.w	r9, #4294967295
 80074ee:	d0f2      	beq.n	80074d6 <UART_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80074f0:	f7fd f9b6 	bl	8004860 <HAL_GetTick>
 80074f4:	eba0 0008 	sub.w	r0, r0, r8
 80074f8:	4548      	cmp	r0, r9
 80074fa:	d829      	bhi.n	8007550 <UART_WaitOnFlagUntilTimeout+0x8c>
 80074fc:	f1b9 0f00 	cmp.w	r9, #0
 8007500:	d026      	beq.n	8007550 <UART_WaitOnFlagUntilTimeout+0x8c>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007502:	6821      	ldr	r1, [r4, #0]
 8007504:	680b      	ldr	r3, [r1, #0]
 8007506:	075a      	lsls	r2, r3, #29
 8007508:	d5e4      	bpl.n	80074d4 <UART_WaitOnFlagUntilTimeout+0x10>
 800750a:	2d80      	cmp	r5, #128	@ 0x80
 800750c:	d0e2      	beq.n	80074d4 <UART_WaitOnFlagUntilTimeout+0x10>
 800750e:	2d40      	cmp	r5, #64	@ 0x40
 8007510:	d0e0      	beq.n	80074d4 <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007512:	69ce      	ldr	r6, [r1, #28]
 8007514:	f016 0608 	ands.w	r6, r6, #8
 8007518:	d00c      	beq.n	8007534 <UART_WaitOnFlagUntilTimeout+0x70>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800751a:	2508      	movs	r5, #8
          UART_EndRxTransfer(huart);
 800751c:	4620      	mov	r0, r4
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800751e:	620d      	str	r5, [r1, #32]
          UART_EndRxTransfer(huart);
 8007520:	f7ff fd83 	bl	800702a <UART_EndRxTransfer>
          __HAL_UNLOCK(huart);
 8007524:	2300      	movs	r3, #0
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007526:	f8c4 5084 	str.w	r5, [r4, #132]	@ 0x84
          __HAL_UNLOCK(huart);
 800752a:	f884 3078 	strb.w	r3, [r4, #120]	@ 0x78
          return HAL_ERROR;
 800752e:	2001      	movs	r0, #1
}
 8007530:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007534:	69cb      	ldr	r3, [r1, #28]
 8007536:	051b      	lsls	r3, r3, #20
 8007538:	d5cc      	bpl.n	80074d4 <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800753a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800753e:	620b      	str	r3, [r1, #32]
          UART_EndRxTransfer(huart);
 8007540:	4620      	mov	r0, r4
 8007542:	f7ff fd72 	bl	800702a <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007546:	2320      	movs	r3, #32
 8007548:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
          __HAL_UNLOCK(huart);
 800754c:	f884 6078 	strb.w	r6, [r4, #120]	@ 0x78
        return HAL_TIMEOUT;
 8007550:	2003      	movs	r0, #3
 8007552:	e7ed      	b.n	8007530 <UART_WaitOnFlagUntilTimeout+0x6c>

08007554 <HAL_UART_Transmit>:
{
 8007554:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007558:	4698      	mov	r8, r3
  if (huart->gState == HAL_UART_STATE_READY)
 800755a:	6fc3      	ldr	r3, [r0, #124]	@ 0x7c
 800755c:	2b20      	cmp	r3, #32
{
 800755e:	4604      	mov	r4, r0
 8007560:	460e      	mov	r6, r1
 8007562:	4617      	mov	r7, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8007564:	d143      	bne.n	80075ee <HAL_UART_Transmit+0x9a>
    if ((pData == NULL) || (Size == 0U))
 8007566:	2900      	cmp	r1, #0
 8007568:	d043      	beq.n	80075f2 <HAL_UART_Transmit+0x9e>
 800756a:	2a00      	cmp	r2, #0
 800756c:	d041      	beq.n	80075f2 <HAL_UART_Transmit+0x9e>
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800756e:	2321      	movs	r3, #33	@ 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007570:	2500      	movs	r5, #0
 8007572:	f8c0 5084 	str.w	r5, [r0, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007576:	67c3      	str	r3, [r0, #124]	@ 0x7c
    tickstart = HAL_GetTick();
 8007578:	f7fd f972 	bl	8004860 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800757c:	68a3      	ldr	r3, [r4, #8]
    huart->TxXferSize  = Size;
 800757e:	f8a4 7050 	strh.w	r7, [r4, #80]	@ 0x50
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007582:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
    tickstart = HAL_GetTick();
 8007586:	4681      	mov	r9, r0
    huart->TxXferCount = Size;
 8007588:	f8a4 7052 	strh.w	r7, [r4, #82]	@ 0x52
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800758c:	d103      	bne.n	8007596 <HAL_UART_Transmit+0x42>
 800758e:	6923      	ldr	r3, [r4, #16]
 8007590:	b90b      	cbnz	r3, 8007596 <HAL_UART_Transmit+0x42>
 8007592:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 8007594:	461e      	mov	r6, r3
    while (huart->TxXferCount > 0U)
 8007596:	f8b4 2052 	ldrh.w	r2, [r4, #82]	@ 0x52
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800759a:	f8cd 8000 	str.w	r8, [sp]
    while (huart->TxXferCount > 0U)
 800759e:	b292      	uxth	r2, r2
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80075a0:	464b      	mov	r3, r9
    while (huart->TxXferCount > 0U)
 80075a2:	b93a      	cbnz	r2, 80075b4 <HAL_UART_Transmit+0x60>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80075a4:	2140      	movs	r1, #64	@ 0x40
 80075a6:	4620      	mov	r0, r4
 80075a8:	f7ff ff8c 	bl	80074c4 <UART_WaitOnFlagUntilTimeout>
 80075ac:	2320      	movs	r3, #32
 80075ae:	b940      	cbnz	r0, 80075c2 <HAL_UART_Transmit+0x6e>
    huart->gState = HAL_UART_STATE_READY;
 80075b0:	67e3      	str	r3, [r4, #124]	@ 0x7c
    return HAL_OK;
 80075b2:	e008      	b.n	80075c6 <HAL_UART_Transmit+0x72>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80075b4:	2200      	movs	r2, #0
 80075b6:	2180      	movs	r1, #128	@ 0x80
 80075b8:	4620      	mov	r0, r4
 80075ba:	f7ff ff83 	bl	80074c4 <UART_WaitOnFlagUntilTimeout>
 80075be:	b128      	cbz	r0, 80075cc <HAL_UART_Transmit+0x78>
        huart->gState = HAL_UART_STATE_READY;
 80075c0:	2320      	movs	r3, #32
 80075c2:	67e3      	str	r3, [r4, #124]	@ 0x7c
        return HAL_TIMEOUT;
 80075c4:	2003      	movs	r0, #3
}
 80075c6:	b003      	add	sp, #12
 80075c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80075cc:	6822      	ldr	r2, [r4, #0]
      if (pdata8bits == NULL)
 80075ce:	b95e      	cbnz	r6, 80075e8 <HAL_UART_Transmit+0x94>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80075d0:	f835 3b02 	ldrh.w	r3, [r5], #2
 80075d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80075d8:	8513      	strh	r3, [r2, #40]	@ 0x28
      huart->TxXferCount--;
 80075da:	f8b4 2052 	ldrh.w	r2, [r4, #82]	@ 0x52
 80075de:	3a01      	subs	r2, #1
 80075e0:	b292      	uxth	r2, r2
 80075e2:	f8a4 2052 	strh.w	r2, [r4, #82]	@ 0x52
 80075e6:	e7d6      	b.n	8007596 <HAL_UART_Transmit+0x42>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80075e8:	f816 3b01 	ldrb.w	r3, [r6], #1
 80075ec:	e7f4      	b.n	80075d8 <HAL_UART_Transmit+0x84>
    return HAL_BUSY;
 80075ee:	2002      	movs	r0, #2
 80075f0:	e7e9      	b.n	80075c6 <HAL_UART_Transmit+0x72>
      return  HAL_ERROR;
 80075f2:	2001      	movs	r0, #1
 80075f4:	e7e7      	b.n	80075c6 <HAL_UART_Transmit+0x72>

080075f6 <UART_CheckIdleState>:
{
 80075f6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80075f8:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80075fa:	2600      	movs	r6, #0
 80075fc:	f8c0 6084 	str.w	r6, [r0, #132]	@ 0x84
  tickstart = HAL_GetTick();
 8007600:	f7fd f92e 	bl	8004860 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007604:	6823      	ldr	r3, [r4, #0]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	071a      	lsls	r2, r3, #28
  tickstart = HAL_GetTick();
 800760a:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800760c:	d51b      	bpl.n	8007646 <UART_CheckIdleState+0x50>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800760e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007612:	9300      	str	r3, [sp, #0]
 8007614:	4632      	mov	r2, r6
 8007616:	4603      	mov	r3, r0
 8007618:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800761c:	4620      	mov	r0, r4
 800761e:	f7ff ff51 	bl	80074c4 <UART_WaitOnFlagUntilTimeout>
 8007622:	b180      	cbz	r0, 8007646 <UART_CheckIdleState+0x50>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8007624:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007626:	e852 3f00 	ldrex	r3, [r2]
 800762a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800762e:	e842 3100 	strex	r1, r3, [r2]
 8007632:	2900      	cmp	r1, #0
 8007634:	d1f6      	bne.n	8007624 <UART_CheckIdleState+0x2e>
      huart->gState = HAL_UART_STATE_READY;
 8007636:	2320      	movs	r3, #32
 8007638:	67e3      	str	r3, [r4, #124]	@ 0x7c
      return HAL_TIMEOUT;
 800763a:	2003      	movs	r0, #3
      __HAL_UNLOCK(huart);
 800763c:	2300      	movs	r3, #0
 800763e:	f884 3078 	strb.w	r3, [r4, #120]	@ 0x78
}
 8007642:	b002      	add	sp, #8
 8007644:	bd70      	pop	{r4, r5, r6, pc}
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007646:	6823      	ldr	r3, [r4, #0]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	075b      	lsls	r3, r3, #29
 800764c:	d524      	bpl.n	8007698 <UART_CheckIdleState+0xa2>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800764e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007652:	9300      	str	r3, [sp, #0]
 8007654:	2200      	movs	r2, #0
 8007656:	462b      	mov	r3, r5
 8007658:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800765c:	4620      	mov	r0, r4
 800765e:	f7ff ff31 	bl	80074c4 <UART_WaitOnFlagUntilTimeout>
 8007662:	b1c8      	cbz	r0, 8007698 <UART_CheckIdleState+0xa2>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007664:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007666:	e852 3f00 	ldrex	r3, [r2]
 800766a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800766e:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 8007672:	6822      	ldr	r2, [r4, #0]
 8007674:	2900      	cmp	r1, #0
 8007676:	d1f5      	bne.n	8007664 <UART_CheckIdleState+0x6e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007678:	f102 0308 	add.w	r3, r2, #8
 800767c:	e853 3f00 	ldrex	r3, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007680:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007684:	f102 0008 	add.w	r0, r2, #8
 8007688:	e840 3100 	strex	r1, r3, [r0]
 800768c:	2900      	cmp	r1, #0
 800768e:	d1f3      	bne.n	8007678 <UART_CheckIdleState+0x82>
      huart->RxState = HAL_UART_STATE_READY;
 8007690:	2320      	movs	r3, #32
 8007692:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
      return HAL_TIMEOUT;
 8007696:	e7d0      	b.n	800763a <UART_CheckIdleState+0x44>
  huart->gState = HAL_UART_STATE_READY;
 8007698:	2320      	movs	r3, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800769a:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 800769c:	67e3      	str	r3, [r4, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800769e:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80076a2:	6620      	str	r0, [r4, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80076a4:	6660      	str	r0, [r4, #100]	@ 0x64
  return HAL_OK;
 80076a6:	e7c9      	b.n	800763c <UART_CheckIdleState+0x46>

080076a8 <HAL_UART_Init>:
{
 80076a8:	b510      	push	{r4, lr}
  if (huart == NULL)
 80076aa:	4604      	mov	r4, r0
 80076ac:	b340      	cbz	r0, 8007700 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 80076ae:	6fc3      	ldr	r3, [r0, #124]	@ 0x7c
 80076b0:	b91b      	cbnz	r3, 80076ba <HAL_UART_Init+0x12>
    huart->Lock = HAL_UNLOCKED;
 80076b2:	f880 3078 	strb.w	r3, [r0, #120]	@ 0x78
    HAL_UART_MspInit(huart);
 80076b6:	f7fc fe75 	bl	80043a4 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 80076ba:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80076bc:	2324      	movs	r3, #36	@ 0x24
 80076be:	67e3      	str	r3, [r4, #124]	@ 0x7c
  __HAL_UART_DISABLE(huart);
 80076c0:	6813      	ldr	r3, [r2, #0]
 80076c2:	f023 0301 	bic.w	r3, r3, #1
 80076c6:	6013      	str	r3, [r2, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80076c8:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80076ca:	b113      	cbz	r3, 80076d2 <HAL_UART_Init+0x2a>
    UART_AdvFeatureConfig(huart);
 80076cc:	4620      	mov	r0, r4
 80076ce:	f7ff fea5 	bl	800741c <UART_AdvFeatureConfig>
  if (UART_SetConfig(huart) == HAL_ERROR)
 80076d2:	4620      	mov	r0, r4
 80076d4:	f7ff fdc8 	bl	8007268 <UART_SetConfig>
 80076d8:	2801      	cmp	r0, #1
 80076da:	d011      	beq.n	8007700 <HAL_UART_Init+0x58>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80076dc:	6823      	ldr	r3, [r4, #0]
 80076de:	685a      	ldr	r2, [r3, #4]
 80076e0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80076e4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80076e6:	689a      	ldr	r2, [r3, #8]
 80076e8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80076ec:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 80076ee:	681a      	ldr	r2, [r3, #0]
 80076f0:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 80076f4:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 80076f6:	601a      	str	r2, [r3, #0]
}
 80076f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 80076fc:	f7ff bf7b 	b.w	80075f6 <UART_CheckIdleState>
}
 8007700:	2001      	movs	r0, #1
 8007702:	bd10      	pop	{r4, pc}

08007704 <UART_Start_Receive_DMA>:
{
 8007704:	b570      	push	{r4, r5, r6, lr}
 8007706:	4613      	mov	r3, r2
 8007708:	4604      	mov	r4, r0
  huart->RxXferSize = Size;
 800770a:	f8a0 2058 	strh.w	r2, [r0, #88]	@ 0x58
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800770e:	2200      	movs	r2, #0
  huart->pRxBuffPtr = pData;
 8007710:	6541      	str	r1, [r0, #84]	@ 0x54
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007712:	f8c0 2084 	str.w	r2, [r0, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007716:	2022      	movs	r0, #34	@ 0x22
 8007718:	f8c4 0080 	str.w	r0, [r4, #128]	@ 0x80
  if (huart->hdmarx != NULL)
 800771c:	6f60      	ldr	r0, [r4, #116]	@ 0x74
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800771e:	6825      	ldr	r5, [r4, #0]
  if (huart->hdmarx != NULL)
 8007720:	b1a0      	cbz	r0, 800774c <UART_Start_Receive_DMA+0x48>
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007722:	4e1c      	ldr	r6, [pc, #112]	@ (8007794 <UART_Start_Receive_DMA+0x90>)
 8007724:	6286      	str	r6, [r0, #40]	@ 0x28
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007726:	4e1c      	ldr	r6, [pc, #112]	@ (8007798 <UART_Start_Receive_DMA+0x94>)
 8007728:	62c6      	str	r6, [r0, #44]	@ 0x2c
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800772a:	4e1c      	ldr	r6, [pc, #112]	@ (800779c <UART_Start_Receive_DMA+0x98>)
    huart->hdmarx->XferAbortCallback = NULL;
 800772c:	e9c0 620c 	strd	r6, r2, [r0, #48]	@ 0x30
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8007730:	460a      	mov	r2, r1
 8007732:	f105 0124 	add.w	r1, r5, #36	@ 0x24
 8007736:	f7fd fe81 	bl	800543c <HAL_DMA_Start_IT>
 800773a:	b138      	cbz	r0, 800774c <UART_Start_Receive_DMA+0x48>
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800773c:	2310      	movs	r3, #16
 800773e:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
      huart->RxState = HAL_UART_STATE_READY;
 8007742:	2320      	movs	r3, #32
 8007744:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
      return HAL_ERROR;
 8007748:	2001      	movs	r0, #1
}
 800774a:	bd70      	pop	{r4, r5, r6, pc}
  if (huart->Init.Parity != UART_PARITY_NONE)
 800774c:	6922      	ldr	r2, [r4, #16]
 800774e:	6823      	ldr	r3, [r4, #0]
 8007750:	b13a      	cbz	r2, 8007762 <UART_Start_Receive_DMA+0x5e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007752:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007756:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800775a:	e843 2100 	strex	r1, r2, [r3]
 800775e:	2900      	cmp	r1, #0
 8007760:	d1f7      	bne.n	8007752 <UART_Start_Receive_DMA+0x4e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007762:	f103 0208 	add.w	r2, r3, #8
 8007766:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800776a:	f042 0201 	orr.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800776e:	f103 0008 	add.w	r0, r3, #8
 8007772:	e840 2100 	strex	r1, r2, [r0]
 8007776:	2900      	cmp	r1, #0
 8007778:	d1f3      	bne.n	8007762 <UART_Start_Receive_DMA+0x5e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800777a:	f103 0208 	add.w	r2, r3, #8
 800777e:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007782:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007786:	f103 0108 	add.w	r1, r3, #8
 800778a:	e841 2000 	strex	r0, r2, [r1]
 800778e:	2800      	cmp	r0, #0
 8007790:	d1f3      	bne.n	800777a <UART_Start_Receive_DMA+0x76>
 8007792:	e7da      	b.n	800774a <UART_Start_Receive_DMA+0x46>
 8007794:	080071db 	.word	0x080071db
 8007798:	080071bb 	.word	0x080071bb
 800779c:	08007163 	.word	0x08007163

080077a0 <HAL_UART_Receive_DMA>:
  if (huart->RxState == HAL_UART_STATE_READY)
 80077a0:	f8d0 3080 	ldr.w	r3, [r0, #128]	@ 0x80
 80077a4:	2b20      	cmp	r3, #32
{
 80077a6:	b430      	push	{r4, r5}
  if (huart->RxState == HAL_UART_STATE_READY)
 80077a8:	d112      	bne.n	80077d0 <HAL_UART_Receive_DMA+0x30>
    if ((pData == NULL) || (Size == 0U))
 80077aa:	b1a1      	cbz	r1, 80077d6 <HAL_UART_Receive_DMA+0x36>
 80077ac:	b19a      	cbz	r2, 80077d6 <HAL_UART_Receive_DMA+0x36>
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80077ae:	2300      	movs	r3, #0
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80077b0:	6804      	ldr	r4, [r0, #0]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80077b2:	6603      	str	r3, [r0, #96]	@ 0x60
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80077b4:	6863      	ldr	r3, [r4, #4]
 80077b6:	021b      	lsls	r3, r3, #8
 80077b8:	d507      	bpl.n	80077ca <HAL_UART_Receive_DMA+0x2a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077ba:	e854 3f00 	ldrex	r3, [r4]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80077be:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077c2:	e844 3500 	strex	r5, r3, [r4]
 80077c6:	2d00      	cmp	r5, #0
 80077c8:	d1f7      	bne.n	80077ba <HAL_UART_Receive_DMA+0x1a>
}
 80077ca:	bc30      	pop	{r4, r5}
    return (UART_Start_Receive_DMA(huart, pData, Size));
 80077cc:	f7ff bf9a 	b.w	8007704 <UART_Start_Receive_DMA>
    return HAL_BUSY;
 80077d0:	2002      	movs	r0, #2
}
 80077d2:	bc30      	pop	{r4, r5}
 80077d4:	4770      	bx	lr
      return HAL_ERROR;
 80077d6:	2001      	movs	r0, #1
 80077d8:	e7fb      	b.n	80077d2 <HAL_UART_Receive_DMA+0x32>

080077da <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80077da:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 80077dc:	f000 fe9c 	bl	8008518 <vTaskStartScheduler>
  
  return osOK;
}
 80077e0:	2000      	movs	r0, #0
 80077e2:	bd08      	pop	{r3, pc}

080077e4 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80077e4:	b570      	push	{r4, r5, r6, lr}
 80077e6:	4605      	mov	r5, r0
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80077e8:	6946      	ldr	r6, [r0, #20]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80077ea:	692a      	ldr	r2, [r5, #16]
 80077ec:	f9b5 4008 	ldrsh.w	r4, [r5, #8]
{
 80077f0:	460b      	mov	r3, r1
 80077f2:	b086      	sub	sp, #24
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80077f4:	e9d0 1000 	ldrd	r1, r0, [r0]
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80077f8:	b176      	cbz	r6, 8007818 <osThreadCreate+0x34>
 80077fa:	69ad      	ldr	r5, [r5, #24]
 80077fc:	b165      	cbz	r5, 8007818 <osThreadCreate+0x34>
  if (priority != osPriorityError) {
 80077fe:	2c84      	cmp	r4, #132	@ 0x84
    fpriority += (priority - osPriorityIdle);
 8007800:	bf14      	ite	ne
 8007802:	3403      	addne	r4, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8007804:	2400      	moveq	r4, #0
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007806:	e9cd 6501 	strd	r6, r5, [sp, #4]
 800780a:	9400      	str	r4, [sp, #0]
 800780c:	f000 fe1f 	bl	800844e <xTaskCreateStatic>
 8007810:	9005      	str	r0, [sp, #20]
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8007812:	9805      	ldr	r0, [sp, #20]
}
 8007814:	b006      	add	sp, #24
 8007816:	bd70      	pop	{r4, r5, r6, pc}
  if (priority != osPriorityError) {
 8007818:	2c84      	cmp	r4, #132	@ 0x84
    fpriority += (priority - osPriorityIdle);
 800781a:	bf14      	ite	ne
 800781c:	3403      	addne	r4, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800781e:	2400      	moveq	r4, #0
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007820:	ad05      	add	r5, sp, #20
 8007822:	e9cd 4500 	strd	r4, r5, [sp]
 8007826:	b292      	uxth	r2, r2
 8007828:	f000 fe48 	bl	80084bc <xTaskCreate>
 800782c:	2801      	cmp	r0, #1
 800782e:	d0f0      	beq.n	8007812 <osThreadCreate+0x2e>
      return NULL;
 8007830:	2000      	movs	r0, #0
 8007832:	e7ef      	b.n	8007814 <osThreadCreate+0x30>

08007834 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8007834:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8007836:	2801      	cmp	r0, #1
 8007838:	bf38      	it	cc
 800783a:	2001      	movcc	r0, #1
 800783c:	f000 ffba 	bl	80087b4 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8007840:	2000      	movs	r0, #0
 8007842:	bd08      	pop	{r3, pc}

08007844 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8007844:	4603      	mov	r3, r0
 8007846:	b537      	push	{r0, r1, r2, r4, r5, lr}
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8007848:	685d      	ldr	r5, [r3, #4]
{ 
 800784a:	4608      	mov	r0, r1
  if (semaphore_def->controlblock != NULL){
 800784c:	b165      	cbz	r5, 8007868 <osSemaphoreCreate+0x24>
    if (count == 1) {
 800784e:	2901      	cmp	r1, #1
 8007850:	d112      	bne.n	8007878 <osSemaphoreCreate+0x34>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8007852:	2303      	movs	r3, #3
 8007854:	2200      	movs	r2, #0
 8007856:	9300      	str	r3, [sp, #0]
 8007858:	4611      	mov	r1, r2
 800785a:	462b      	mov	r3, r5
 800785c:	f000 fa30 	bl	8007cc0 <xQueueGenericCreateStatic>
 8007860:	4604      	mov	r4, r0
#else
    return NULL;
#endif
  }
#endif
}
 8007862:	4620      	mov	r0, r4
 8007864:	b003      	add	sp, #12
 8007866:	bd30      	pop	{r4, r5, pc}
    if (count == 1) {
 8007868:	2901      	cmp	r1, #1
 800786a:	d105      	bne.n	8007878 <osSemaphoreCreate+0x34>
      vSemaphoreCreateBinary(sema);
 800786c:	2203      	movs	r2, #3
 800786e:	4629      	mov	r1, r5
 8007870:	f000 fa6f 	bl	8007d52 <xQueueGenericCreate>
 8007874:	4604      	mov	r4, r0
 8007876:	b908      	cbnz	r0, 800787c <osSemaphoreCreate+0x38>
{ 
 8007878:	2400      	movs	r4, #0
 800787a:	e7f2      	b.n	8007862 <osSemaphoreCreate+0x1e>
      vSemaphoreCreateBinary(sema);
 800787c:	462b      	mov	r3, r5
 800787e:	462a      	mov	r2, r5
 8007880:	4629      	mov	r1, r5
 8007882:	f000 fa8a 	bl	8007d9a <xQueueGenericSend>
 8007886:	e7ec      	b.n	8007862 <osSemaphoreCreate+0x1e>

08007888 <osPoolCreate>:
* @param  pool_def      memory pool definition referenced with \ref osPool.
* @retval  memory pool ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osPoolCreate shall be consistent in every CMSIS-RTOS.
*/
osPoolId osPoolCreate (const osPoolDef_t *pool_def)
{
 8007888:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
  osPoolId thePool;
  int itemSize = 4 * ((pool_def->item_sz + 3) / 4);
 800788a:	6847      	ldr	r7, [r0, #4]
{
 800788c:	4606      	mov	r6, r0
  uint32_t i;
  
  /* First have to allocate memory for the pool control block. */
 thePool = pvPortMalloc(sizeof(os_pool_cb_t));
 800788e:	2014      	movs	r0, #20
 8007890:	f001 fac6 	bl	8008e20 <pvPortMalloc>

  
  if (thePool) {
 8007894:	4604      	mov	r4, r0
 8007896:	b1b8      	cbz	r0, 80078c8 <osPoolCreate+0x40>
    thePool->pool_sz = pool_def->pool_sz;
 8007898:	6830      	ldr	r0, [r6, #0]
  int itemSize = 4 * ((pool_def->item_sz + 3) / 4);
 800789a:	3703      	adds	r7, #3
 800789c:	f027 0703 	bic.w	r7, r7, #3
    thePool->item_sz = itemSize;
    thePool->currentIndex = 0;
 80078a0:	2500      	movs	r5, #0
    thePool->item_sz = itemSize;
 80078a2:	e9c4 0702 	strd	r0, r7, [r4, #8]
    thePool->currentIndex = 0;
 80078a6:	6125      	str	r5, [r4, #16]
    
    /* Memory for markers */
    thePool->markers = pvPortMalloc(pool_def->pool_sz);
 80078a8:	f001 faba 	bl	8008e20 <pvPortMalloc>
 80078ac:	6060      	str	r0, [r4, #4]
   
    if (thePool->markers) {
 80078ae:	b140      	cbz	r0, 80078c2 <osPoolCreate+0x3a>
      /* Now allocate the pool itself. */
     thePool->pool = pvPortMalloc(pool_def->pool_sz * itemSize);
 80078b0:	6830      	ldr	r0, [r6, #0]
 80078b2:	4378      	muls	r0, r7
 80078b4:	f001 fab4 	bl	8008e20 <pvPortMalloc>
 80078b8:	6020      	str	r0, [r4, #0]
      
      if (thePool->pool) {
 80078ba:	b978      	cbnz	r0, 80078dc <osPoolCreate+0x54>
        for (i = 0; i < pool_def->pool_sz; i++) {
          thePool->markers[i] = 0;
        }
      }
      else {
        vPortFree(thePool->markers);
 80078bc:	6860      	ldr	r0, [r4, #4]
 80078be:	f001 fb41 	bl	8008f44 <vPortFree>
        vPortFree(thePool);
 80078c2:	4620      	mov	r0, r4
 80078c4:	f001 fb3e 	bl	8008f44 <vPortFree>
 thePool = pvPortMalloc(sizeof(os_pool_cb_t));
 80078c8:	2400      	movs	r4, #0
 80078ca:	e005      	b.n	80078d8 <osPoolCreate+0x50>
          thePool->markers[i] = 0;
 80078cc:	6862      	ldr	r2, [r4, #4]
 80078ce:	54d1      	strb	r1, [r2, r3]
        for (i = 0; i < pool_def->pool_sz; i++) {
 80078d0:	3301      	adds	r3, #1
 80078d2:	6832      	ldr	r2, [r6, #0]
 80078d4:	429a      	cmp	r2, r3
 80078d6:	d8f9      	bhi.n	80078cc <osPoolCreate+0x44>
  return thePool;
 
#else
  return NULL;
#endif
}
 80078d8:	4620      	mov	r0, r4
 80078da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        for (i = 0; i < pool_def->pool_sz; i++) {
 80078dc:	462b      	mov	r3, r5
          thePool->markers[i] = 0;
 80078de:	4629      	mov	r1, r5
 80078e0:	e7f7      	b.n	80078d2 <osPoolCreate+0x4a>

080078e2 <osPoolAlloc>:
* @param pool_id       memory pool ID obtain referenced with \ref osPoolCreate.
* @retval  address of the allocated memory block or NULL in case of no memory available.
* @note   MUST REMAIN UNCHANGED: \b osPoolAlloc shall be consistent in every CMSIS-RTOS.
*/
void *osPoolAlloc (osPoolId pool_id)
{
 80078e2:	b570      	push	{r4, r5, r6, lr}
 80078e4:	4604      	mov	r4, r0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80078e6:	f3ef 8605 	mrs	r6, IPSR
  int dummy = 0;
  void *p = NULL;
  uint32_t i;
  uint32_t index;
  
  if (inHandlerMode()) {
 80078ea:	b186      	cbz	r6, 800790e <osPoolAlloc+0x2c>
	__asm volatile
 80078ec:	f3ef 8511 	mrs	r5, BASEPRI
 80078f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078f4:	f383 8811 	msr	BASEPRI, r3
 80078f8:	f3bf 8f6f 	isb	sy
 80078fc:	f3bf 8f4f 	dsb	sy
    dummy = portSET_INTERRUPT_MASK_FROM_ISR();
 8007900:	462e      	mov	r6, r5
  }
  else {
    vPortEnterCritical();
  }
  
  for (i = 0; i < pool_id->pool_sz; i++) {
 8007902:	68a1      	ldr	r1, [r4, #8]
 8007904:	2200      	movs	r2, #0
 8007906:	4291      	cmp	r1, r2
 8007908:	d104      	bne.n	8007914 <osPoolAlloc+0x32>
  void *p = NULL;
 800790a:	2500      	movs	r5, #0
 800790c:	e012      	b.n	8007934 <osPoolAlloc+0x52>
    vPortEnterCritical();
 800790e:	f001 f921 	bl	8008b54 <vPortEnterCritical>
 8007912:	e7f6      	b.n	8007902 <osPoolAlloc+0x20>
    index = (pool_id->currentIndex + i) % pool_id->pool_sz;
 8007914:	6923      	ldr	r3, [r4, #16]
 8007916:	4413      	add	r3, r2
 8007918:	fbb3 f0f1 	udiv	r0, r3, r1
 800791c:	fb01 3310 	mls	r3, r1, r0, r3
    
    if (pool_id->markers[index] == 0) {
 8007920:	6860      	ldr	r0, [r4, #4]
 8007922:	5cc5      	ldrb	r5, [r0, r3]
 8007924:	b96d      	cbnz	r5, 8007942 <osPoolAlloc+0x60>
      pool_id->markers[index] = 1;
 8007926:	2201      	movs	r2, #1
 8007928:	54c2      	strb	r2, [r0, r3]
      p = (void *)((uint32_t)(pool_id->pool) + (index * pool_id->item_sz));
 800792a:	68e2      	ldr	r2, [r4, #12]
 800792c:	6825      	ldr	r5, [r4, #0]
      pool_id->currentIndex = index;
 800792e:	6123      	str	r3, [r4, #16]
      p = (void *)((uint32_t)(pool_id->pool) + (index * pool_id->item_sz));
 8007930:	fb02 5503 	mla	r5, r2, r3, r5
 8007934:	f3ef 8305 	mrs	r3, IPSR
      break;
    }
  }
  
  if (inHandlerMode()) {
 8007938:	b12b      	cbz	r3, 8007946 <osPoolAlloc+0x64>
	__asm volatile
 800793a:	f386 8811 	msr	BASEPRI, r6
  else {
    vPortExitCritical();
  }
  
  return p;
}
 800793e:	4628      	mov	r0, r5
 8007940:	bd70      	pop	{r4, r5, r6, pc}
  for (i = 0; i < pool_id->pool_sz; i++) {
 8007942:	3201      	adds	r2, #1
 8007944:	e7df      	b.n	8007906 <osPoolAlloc+0x24>
    vPortExitCritical();
 8007946:	f001 f925 	bl	8008b94 <vPortExitCritical>
  return p;
 800794a:	e7f8      	b.n	800793e <osPoolAlloc+0x5c>

0800794c <osPoolFree>:
*/
osStatus osPoolFree (osPoolId pool_id, void *block)
{
  uint32_t index;
  
  if (pool_id == NULL) {
 800794c:	4603      	mov	r3, r0
 800794e:	b180      	cbz	r0, 8007972 <osPoolFree+0x26>
    return osErrorParameter;
  }
  
  if (block == NULL) {
 8007950:	b179      	cbz	r1, 8007972 <osPoolFree+0x26>
    return osErrorParameter;
  }
  
  if (block < pool_id->pool) {
 8007952:	6802      	ldr	r2, [r0, #0]
 8007954:	428a      	cmp	r2, r1
 8007956:	d80c      	bhi.n	8007972 <osPoolFree+0x26>
    return osErrorParameter;
  }
  
  index = (uint32_t)block - (uint32_t)(pool_id->pool);
  if (index % pool_id->item_sz) {
 8007958:	68c0      	ldr	r0, [r0, #12]
  index = (uint32_t)block - (uint32_t)(pool_id->pool);
 800795a:	1a89      	subs	r1, r1, r2
  if (index % pool_id->item_sz) {
 800795c:	fbb1 f2f0 	udiv	r2, r1, r0
 8007960:	fb00 1012 	mls	r0, r0, r2, r1
 8007964:	b928      	cbnz	r0, 8007972 <osPoolFree+0x26>
    return osErrorParameter;
  }
  index = index / pool_id->item_sz;
  if (index >= pool_id->pool_sz) {
 8007966:	6899      	ldr	r1, [r3, #8]
 8007968:	4291      	cmp	r1, r2
 800796a:	d902      	bls.n	8007972 <osPoolFree+0x26>
    return osErrorParameter;
  }
  
  pool_id->markers[index] = 0;
 800796c:	685b      	ldr	r3, [r3, #4]
 800796e:	5498      	strb	r0, [r3, r2]
  
  return osOK;
 8007970:	4770      	bx	lr
    return osErrorParameter;
 8007972:	2080      	movs	r0, #128	@ 0x80
}
 8007974:	4770      	bx	lr

08007976 <osMailCreate>:
* @param   thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval mail queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMailCreate shall be consistent in every CMSIS-RTOS.
*/
osMailQId osMailCreate (const osMailQDef_t *queue_def, osThreadId thread_id)
{
 8007976:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
  (void) thread_id;
  
  osPoolDef_t pool_def = {queue_def->queue_sz, queue_def->item_sz, NULL};
 8007978:	6803      	ldr	r3, [r0, #0]
  
  /* Create a mail queue control block */

  *(queue_def->cb) = pvPortMalloc(sizeof(struct os_mailQ_cb));
 800797a:	6885      	ldr	r5, [r0, #8]
  osPoolDef_t pool_def = {queue_def->queue_sz, queue_def->item_sz, NULL};
 800797c:	9301      	str	r3, [sp, #4]
{
 800797e:	4604      	mov	r4, r0
  osPoolDef_t pool_def = {queue_def->queue_sz, queue_def->item_sz, NULL};
 8007980:	6843      	ldr	r3, [r0, #4]
 8007982:	9302      	str	r3, [sp, #8]
 8007984:	2600      	movs	r6, #0
  *(queue_def->cb) = pvPortMalloc(sizeof(struct os_mailQ_cb));
 8007986:	200c      	movs	r0, #12
  osPoolDef_t pool_def = {queue_def->queue_sz, queue_def->item_sz, NULL};
 8007988:	9603      	str	r6, [sp, #12]
  *(queue_def->cb) = pvPortMalloc(sizeof(struct os_mailQ_cb));
 800798a:	f001 fa49 	bl	8008e20 <pvPortMalloc>

  if (*(queue_def->cb) == NULL) {
 800798e:	68a3      	ldr	r3, [r4, #8]
  *(queue_def->cb) = pvPortMalloc(sizeof(struct os_mailQ_cb));
 8007990:	6028      	str	r0, [r5, #0]
  if (*(queue_def->cb) == NULL) {
 8007992:	681d      	ldr	r5, [r3, #0]
 8007994:	b16d      	cbz	r5, 80079b2 <osMailCreate+0x3c>
    return NULL;
  }
  (*(queue_def->cb))->queue_def = queue_def;
 8007996:	602c      	str	r4, [r5, #0]
  
  /* Create a queue in FreeRTOS */
  (*(queue_def->cb))->handle = xQueueCreate(queue_def->queue_sz, sizeof(void *));
 8007998:	6820      	ldr	r0, [r4, #0]
 800799a:	4632      	mov	r2, r6
 800799c:	2104      	movs	r1, #4
 800799e:	f000 f9d8 	bl	8007d52 <xQueueGenericCreate>


  if ((*(queue_def->cb))->handle == NULL) {
 80079a2:	68a3      	ldr	r3, [r4, #8]
  (*(queue_def->cb))->handle = xQueueCreate(queue_def->queue_sz, sizeof(void *));
 80079a4:	6068      	str	r0, [r5, #4]
  if ((*(queue_def->cb))->handle == NULL) {
 80079a6:	681d      	ldr	r5, [r3, #0]
 80079a8:	686b      	ldr	r3, [r5, #4]
 80079aa:	b92b      	cbnz	r3, 80079b8 <osMailCreate+0x42>
    vPortFree(*(queue_def->cb));
 80079ac:	4628      	mov	r0, r5
 80079ae:	f001 fac9 	bl	8008f44 <vPortFree>
    return NULL;
 80079b2:	2000      	movs	r0, #0
  
  return *(queue_def->cb);
#else
  return NULL;
#endif
}
 80079b4:	b004      	add	sp, #16
 80079b6:	bd70      	pop	{r4, r5, r6, pc}
  (*(queue_def->cb))->pool = osPoolCreate(&pool_def);
 80079b8:	a801      	add	r0, sp, #4
 80079ba:	f7ff ff65 	bl	8007888 <osPoolCreate>
  if ((*(queue_def->cb))->pool == NULL) {
 80079be:	68a3      	ldr	r3, [r4, #8]
  (*(queue_def->cb))->pool = osPoolCreate(&pool_def);
 80079c0:	60a8      	str	r0, [r5, #8]
  if ((*(queue_def->cb))->pool == NULL) {
 80079c2:	6818      	ldr	r0, [r3, #0]
 80079c4:	6883      	ldr	r3, [r0, #8]
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d1f4      	bne.n	80079b4 <osMailCreate+0x3e>
 80079ca:	e7f0      	b.n	80079ae <osMailCreate+0x38>

080079cc <osMailAlloc>:
{
  (void) millisec;
  void *p;
  
  
  if (queue_id == NULL) {
 80079cc:	b110      	cbz	r0, 80079d4 <osMailAlloc+0x8>
    return NULL;
  }
  
  p = osPoolAlloc(queue_id->pool);
 80079ce:	6880      	ldr	r0, [r0, #8]
 80079d0:	f7ff bf87 	b.w	80078e2 <osPoolAlloc>
  
  return p;
}
 80079d4:	4770      	bx	lr

080079d6 <osMailPut>:
* @param  mail          memory block previously allocated with \ref osMailAlloc or \ref osMailCAlloc.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMailPut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMailPut (osMailQId queue_id, void *mail)
{
 80079d6:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80079d8:	9101      	str	r1, [sp, #4]
  portBASE_TYPE taskWoken;
  
  
  if (queue_id == NULL) {
 80079da:	b328      	cbz	r0, 8007a28 <osMailPut+0x52>
    return osErrorParameter;
  }
  
  taskWoken = pdFALSE;
 80079dc:	2200      	movs	r2, #0
 80079de:	9203      	str	r2, [sp, #12]
 80079e0:	f3ef 8305 	mrs	r3, IPSR
  
  if (inHandlerMode()) {
    if (xQueueSendFromISR(queue_id->handle, &mail, &taskWoken) != pdTRUE) {
 80079e4:	6840      	ldr	r0, [r0, #4]
  if (inHandlerMode()) {
 80079e6:	b1c3      	cbz	r3, 8007a1a <osMailPut+0x44>
    if (xQueueSendFromISR(queue_id->handle, &mail, &taskWoken) != pdTRUE) {
 80079e8:	4613      	mov	r3, r2
 80079ea:	a901      	add	r1, sp, #4
 80079ec:	aa03      	add	r2, sp, #12
 80079ee:	f000 fa86 	bl	8007efe <xQueueGenericSendFromISR>
 80079f2:	2801      	cmp	r0, #1
 80079f4:	d003      	beq.n	80079fe <osMailPut+0x28>
      return osErrorOS;
 80079f6:	20ff      	movs	r0, #255	@ 0xff
      return osErrorOS;
    }
  }
  
  return osOK;
}
 80079f8:	b005      	add	sp, #20
 80079fa:	f85d fb04 	ldr.w	pc, [sp], #4
    portEND_SWITCHING_ISR(taskWoken);
 80079fe:	9b03      	ldr	r3, [sp, #12]
 8007a00:	b14b      	cbz	r3, 8007a16 <osMailPut+0x40>
 8007a02:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8007a06:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007a0a:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8007a0e:	f3bf 8f4f 	dsb	sy
 8007a12:	f3bf 8f6f 	isb	sy
  return osOK;
 8007a16:	2000      	movs	r0, #0
 8007a18:	e7ee      	b.n	80079f8 <osMailPut+0x22>
    if (xQueueSend(queue_id->handle, &mail, 0) != pdTRUE) { 
 8007a1a:	461a      	mov	r2, r3
 8007a1c:	a901      	add	r1, sp, #4
 8007a1e:	f000 f9bc 	bl	8007d9a <xQueueGenericSend>
 8007a22:	2801      	cmp	r0, #1
 8007a24:	d0f7      	beq.n	8007a16 <osMailPut+0x40>
 8007a26:	e7e6      	b.n	80079f6 <osMailPut+0x20>
    return osErrorParameter;
 8007a28:	2080      	movs	r0, #128	@ 0x80
 8007a2a:	e7e5      	b.n	80079f8 <osMailPut+0x22>

08007a2c <osMailGet>:
* @param millisec    timeout value or 0 in case of no time-out
* @retval event that contains mail information or error code.
* @note   MUST REMAIN UNCHANGED: \b osMailGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMailGet (osMailQId queue_id, uint32_t millisec)
{
 8007a2c:	b530      	push	{r4, r5, lr}
 8007a2e:	b085      	sub	sp, #20
 8007a30:	4605      	mov	r5, r0
 8007a32:	4614      	mov	r4, r2
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.mail_id = queue_id;
 8007a34:	9103      	str	r1, [sp, #12]
  
  if (queue_id == NULL) {
 8007a36:	b911      	cbnz	r1, 8007a3e <osMailGet+0x12>
    event.status = osErrorParameter;
 8007a38:	2380      	movs	r3, #128	@ 0x80
    portEND_SWITCHING_ISR(taskWoken);
  }
  else {
    if (xQueueReceive(queue_id->handle, &event.value.p, ticks) == pdTRUE) {
      /* We have mail */
      event.status = osEventMail;
 8007a3a:	9301      	str	r3, [sp, #4]
 8007a3c:	e01a      	b.n	8007a74 <osMailGet+0x48>
  taskWoken = pdFALSE;
 8007a3e:	2300      	movs	r3, #0
 8007a40:	9300      	str	r3, [sp, #0]
 8007a42:	f3ef 8305 	mrs	r3, IPSR
    if (xQueueReceiveFromISR(queue_id->handle, &event.value.p, &taskWoken) == pdTRUE) {
 8007a46:	6848      	ldr	r0, [r1, #4]
  if (inHandlerMode()) {
 8007a48:	b1e3      	cbz	r3, 8007a84 <osMailGet+0x58>
    if (xQueueReceiveFromISR(queue_id->handle, &event.value.p, &taskWoken) == pdTRUE) {
 8007a4a:	466a      	mov	r2, sp
 8007a4c:	a902      	add	r1, sp, #8
 8007a4e:	f000 fb50 	bl	80080f2 <xQueueReceiveFromISR>
 8007a52:	1e43      	subs	r3, r0, #1
 8007a54:	4258      	negs	r0, r3
 8007a56:	4158      	adcs	r0, r3
    portEND_SWITCHING_ISR(taskWoken);
 8007a58:	9b00      	ldr	r3, [sp, #0]
    if (xQueueReceiveFromISR(queue_id->handle, &event.value.p, &taskWoken) == pdTRUE) {
 8007a5a:	0140      	lsls	r0, r0, #5
 8007a5c:	9001      	str	r0, [sp, #4]
    portEND_SWITCHING_ISR(taskWoken);
 8007a5e:	b14b      	cbz	r3, 8007a74 <osMailGet+0x48>
 8007a60:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8007a64:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007a68:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8007a6c:	f3bf 8f4f 	dsb	sy
 8007a70:	f3bf 8f6f 	isb	sy
    return event;
 8007a74:	ab04      	add	r3, sp, #16
 8007a76:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8007a7a:	e885 0007 	stmia.w	r5, {r0, r1, r2}
      event.status = (ticks == 0) ? osOK : osEventTimeout;
    }
  }
  
  return event;
}
 8007a7e:	4628      	mov	r0, r5
 8007a80:	b005      	add	sp, #20
 8007a82:	bd30      	pop	{r4, r5, pc}
    if (xQueueReceive(queue_id->handle, &event.value.p, ticks) == pdTRUE) {
 8007a84:	a902      	add	r1, sp, #8
 8007a86:	f000 fa96 	bl	8007fb6 <xQueueReceive>
 8007a8a:	2801      	cmp	r0, #1
 8007a8c:	d101      	bne.n	8007a92 <osMailGet+0x66>
      event.status = osEventMail;
 8007a8e:	2320      	movs	r3, #32
 8007a90:	e7d3      	b.n	8007a3a <osMailGet+0xe>
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8007a92:	3c00      	subs	r4, #0
 8007a94:	bf18      	it	ne
 8007a96:	2401      	movne	r4, #1
 8007a98:	01a4      	lsls	r4, r4, #6
 8007a9a:	9401      	str	r4, [sp, #4]
  return event;
 8007a9c:	e7ea      	b.n	8007a74 <osMailGet+0x48>

08007a9e <osMailFree>:
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMailFree shall be consistent in every CMSIS-RTOS.
*/
osStatus osMailFree (osMailQId queue_id, void *mail)
{
  if (queue_id == NULL) {
 8007a9e:	b110      	cbz	r0, 8007aa6 <osMailFree+0x8>
    return osErrorParameter;
  }
  
  return osPoolFree(queue_id->pool, mail);
 8007aa0:	6880      	ldr	r0, [r0, #8]
 8007aa2:	f7ff bf53 	b.w	800794c <osPoolFree>
}
 8007aa6:	2080      	movs	r0, #128	@ 0x80
 8007aa8:	4770      	bx	lr

08007aaa <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007aaa:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007aae:	f04f 32ff 	mov.w	r2, #4294967295

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007ab2:	e9c0 2302 	strd	r2, r3, [r0, #8]
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007ab6:	6043      	str	r3, [r0, #4]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007ab8:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007aba:	2300      	movs	r3, #0
 8007abc:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007abe:	4770      	bx	lr

08007ac0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8007ac0:	2300      	movs	r3, #0
 8007ac2:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007ac4:	4770      	bx	lr

08007ac6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8007ac6:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007ac8:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007aca:	689a      	ldr	r2, [r3, #8]
 8007acc:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007ace:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007ad0:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8007ad2:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 8007ad4:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8007ad6:	3301      	adds	r3, #1
 8007ad8:	6003      	str	r3, [r0, #0]
}
 8007ada:	4770      	bx	lr

08007adc <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007adc:	b530      	push	{r4, r5, lr}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007ade:	680c      	ldr	r4, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007ae0:	1c63      	adds	r3, r4, #1
 8007ae2:	d10a      	bne.n	8007afa <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007ae4:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007ae6:	685a      	ldr	r2, [r3, #4]
 8007ae8:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007aea:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007aec:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8007aee:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8007af0:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 8007af2:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8007af4:	3301      	adds	r3, #1
 8007af6:	6003      	str	r3, [r0, #0]
}
 8007af8:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007afa:	f100 0208 	add.w	r2, r0, #8
 8007afe:	4613      	mov	r3, r2
 8007b00:	6852      	ldr	r2, [r2, #4]
 8007b02:	6815      	ldr	r5, [r2, #0]
 8007b04:	42a5      	cmp	r5, r4
 8007b06:	d9fa      	bls.n	8007afe <vListInsert+0x22>
 8007b08:	e7ed      	b.n	8007ae6 <vListInsert+0xa>

08007b0a <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007b0a:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8007b0e:	6903      	ldr	r3, [r0, #16]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007b10:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007b12:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007b14:	6859      	ldr	r1, [r3, #4]
 8007b16:	4281      	cmp	r1, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007b18:	bf08      	it	eq
 8007b1a:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8007b1c:	2200      	movs	r2, #0
 8007b1e:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8007b20:	681a      	ldr	r2, [r3, #0]
 8007b22:	3a01      	subs	r2, #1
 8007b24:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007b26:	6818      	ldr	r0, [r3, #0]
}
 8007b28:	4770      	bx	lr

08007b2a <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007b2a:	b510      	push	{r4, lr}
 8007b2c:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007b2e:	f001 f811 	bl	8008b54 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007b32:	6ba4      	ldr	r4, [r4, #56]	@ 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8007b34:	f001 f82e 	bl	8008b94 <vPortExitCritical>

	return xReturn;
}
 8007b38:	fab4 f084 	clz	r0, r4
 8007b3c:	0940      	lsrs	r0, r0, #5
 8007b3e:	bd10      	pop	{r4, pc}

08007b40 <prvCopyDataToQueue>:
{
 8007b40:	b570      	push	{r4, r5, r6, lr}
 8007b42:	4616      	mov	r6, r2
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007b44:	6c02      	ldr	r2, [r0, #64]	@ 0x40
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007b46:	6b85      	ldr	r5, [r0, #56]	@ 0x38
{
 8007b48:	4604      	mov	r4, r0
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007b4a:	b942      	cbnz	r2, 8007b5e <prvCopyDataToQueue+0x1e>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007b4c:	6806      	ldr	r6, [r0, #0]
 8007b4e:	b99e      	cbnz	r6, 8007b78 <prvCopyDataToQueue+0x38>
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8007b50:	6840      	ldr	r0, [r0, #4]
 8007b52:	f000 ff47 	bl	80089e4 <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 8007b56:	6066      	str	r6, [r4, #4]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007b58:	3501      	adds	r5, #1
 8007b5a:	63a5      	str	r5, [r4, #56]	@ 0x38
}
 8007b5c:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 8007b5e:	b96e      	cbnz	r6, 8007b7c <prvCopyDataToQueue+0x3c>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8007b60:	6880      	ldr	r0, [r0, #8]
 8007b62:	f003 fff7 	bl	800bb54 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8007b66:	68a3      	ldr	r3, [r4, #8]
 8007b68:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8007b6a:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007b6c:	6862      	ldr	r2, [r4, #4]
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8007b6e:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007b70:	4293      	cmp	r3, r2
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007b72:	bf24      	itt	cs
 8007b74:	6823      	ldrcs	r3, [r4, #0]
 8007b76:	60a3      	strcs	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
 8007b78:	2000      	movs	r0, #0
 8007b7a:	e7ed      	b.n	8007b58 <prvCopyDataToQueue+0x18>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007b7c:	68c0      	ldr	r0, [r0, #12]
 8007b7e:	f003 ffe9 	bl	800bb54 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8007b82:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8007b84:	68e3      	ldr	r3, [r4, #12]
 8007b86:	4251      	negs	r1, r2
 8007b88:	1a9b      	subs	r3, r3, r2
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007b8a:	6822      	ldr	r2, [r4, #0]
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8007b8c:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007b8e:	4293      	cmp	r3, r2
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8007b90:	bf3e      	ittt	cc
 8007b92:	6863      	ldrcc	r3, [r4, #4]
 8007b94:	185b      	addcc	r3, r3, r1
 8007b96:	60e3      	strcc	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 8007b98:	2e02      	cmp	r6, #2
 8007b9a:	d1ed      	bne.n	8007b78 <prvCopyDataToQueue+0x38>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007b9c:	b10d      	cbz	r5, 8007ba2 <prvCopyDataToQueue+0x62>
				--uxMessagesWaiting;
 8007b9e:	3d01      	subs	r5, #1
 8007ba0:	e7ea      	b.n	8007b78 <prvCopyDataToQueue+0x38>
BaseType_t xReturn = pdFALSE;
 8007ba2:	4628      	mov	r0, r5
 8007ba4:	e7d8      	b.n	8007b58 <prvCopyDataToQueue+0x18>

08007ba6 <prvCopyDataFromQueue>:
{
 8007ba6:	4603      	mov	r3, r0
 8007ba8:	b410      	push	{r4}
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007baa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
{
 8007bac:	4608      	mov	r0, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007bae:	b16a      	cbz	r2, 8007bcc <prvCopyDataFromQueue+0x26>
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8007bb0:	68dc      	ldr	r4, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007bb2:	6859      	ldr	r1, [r3, #4]
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8007bb4:	4414      	add	r4, r2
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007bb6:	428c      	cmp	r4, r1
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8007bb8:	bf28      	it	cs
 8007bba:	6819      	ldrcs	r1, [r3, #0]
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8007bbc:	60dc      	str	r4, [r3, #12]
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8007bbe:	bf28      	it	cs
 8007bc0:	60d9      	strcs	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8007bc2:	68d9      	ldr	r1, [r3, #12]
}
 8007bc4:	f85d 4b04 	ldr.w	r4, [sp], #4
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8007bc8:	f003 bfc4 	b.w	800bb54 <memcpy>
}
 8007bcc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007bd0:	4770      	bx	lr

08007bd2 <prvUnlockQueue>:
{
 8007bd2:	b570      	push	{r4, r5, r6, lr}
 8007bd4:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8007bd6:	f000 ffbd 	bl	8008b54 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8007bda:	f894 5045 	ldrb.w	r5, [r4, #69]	@ 0x45
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007bde:	f104 0624 	add.w	r6, r4, #36	@ 0x24
		int8_t cTxLock = pxQueue->cTxLock;
 8007be2:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007be4:	2d00      	cmp	r5, #0
 8007be6:	dc14      	bgt.n	8007c12 <prvUnlockQueue+0x40>
		pxQueue->cTxLock = queueUNLOCKED;
 8007be8:	23ff      	movs	r3, #255	@ 0xff
 8007bea:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
	taskEXIT_CRITICAL();
 8007bee:	f000 ffd1 	bl	8008b94 <vPortExitCritical>
	taskENTER_CRITICAL();
 8007bf2:	f000 ffaf 	bl	8008b54 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8007bf6:	f894 5044 	ldrb.w	r5, [r4, #68]	@ 0x44
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007bfa:	f104 0610 	add.w	r6, r4, #16
		int8_t cRxLock = pxQueue->cRxLock;
 8007bfe:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007c00:	2d00      	cmp	r5, #0
 8007c02:	dc12      	bgt.n	8007c2a <prvUnlockQueue+0x58>
		pxQueue->cRxLock = queueUNLOCKED;
 8007c04:	23ff      	movs	r3, #255	@ 0xff
 8007c06:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
}
 8007c0a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 8007c0e:	f000 bfc1 	b.w	8008b94 <vPortExitCritical>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007c12:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d0e7      	beq.n	8007be8 <prvUnlockQueue+0x16>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007c18:	4630      	mov	r0, r6
 8007c1a:	f000 fe43 	bl	80088a4 <xTaskRemoveFromEventList>
 8007c1e:	b108      	cbz	r0, 8007c24 <prvUnlockQueue+0x52>
						vTaskMissedYield();
 8007c20:	f000 feca 	bl	80089b8 <vTaskMissedYield>
			--cTxLock;
 8007c24:	3d01      	subs	r5, #1
 8007c26:	b26d      	sxtb	r5, r5
 8007c28:	e7dc      	b.n	8007be4 <prvUnlockQueue+0x12>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007c2a:	6923      	ldr	r3, [r4, #16]
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d0e9      	beq.n	8007c04 <prvUnlockQueue+0x32>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007c30:	4630      	mov	r0, r6
 8007c32:	f000 fe37 	bl	80088a4 <xTaskRemoveFromEventList>
 8007c36:	b108      	cbz	r0, 8007c3c <prvUnlockQueue+0x6a>
					vTaskMissedYield();
 8007c38:	f000 febe 	bl	80089b8 <vTaskMissedYield>
				--cRxLock;
 8007c3c:	3d01      	subs	r5, #1
 8007c3e:	b26d      	sxtb	r5, r5
 8007c40:	e7de      	b.n	8007c00 <prvUnlockQueue+0x2e>

08007c42 <xQueueGenericReset>:
{
 8007c42:	b538      	push	{r3, r4, r5, lr}
 8007c44:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 8007c46:	4604      	mov	r4, r0
 8007c48:	b940      	cbnz	r0, 8007c5c <xQueueGenericReset+0x1a>
	__asm volatile
 8007c4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c4e:	f383 8811 	msr	BASEPRI, r3
 8007c52:	f3bf 8f6f 	isb	sy
 8007c56:	f3bf 8f4f 	dsb	sy
 8007c5a:	e7fe      	b.n	8007c5a <xQueueGenericReset+0x18>
	taskENTER_CRITICAL();
 8007c5c:	f000 ff7a 	bl	8008b54 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8007c60:	e9d4 310f 	ldrd	r3, r1, [r4, #60]	@ 0x3c
 8007c64:	6822      	ldr	r2, [r4, #0]
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007c66:	60a2      	str	r2, [r4, #8]
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8007c68:	434b      	muls	r3, r1
 8007c6a:	18d0      	adds	r0, r2, r3
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8007c6c:	1a5b      	subs	r3, r3, r1
 8007c6e:	441a      	add	r2, r3
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8007c70:	6060      	str	r0, [r4, #4]
		pxQueue->cRxLock = queueUNLOCKED;
 8007c72:	23ff      	movs	r3, #255	@ 0xff
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007c74:	2000      	movs	r0, #0
 8007c76:	63a0      	str	r0, [r4, #56]	@ 0x38
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8007c78:	60e2      	str	r2, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007c7a:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007c7e:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
		if( xNewQueue == pdFALSE )
 8007c82:	b9a5      	cbnz	r5, 8007cae <xQueueGenericReset+0x6c>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007c84:	6923      	ldr	r3, [r4, #16]
 8007c86:	b173      	cbz	r3, 8007ca6 <xQueueGenericReset+0x64>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007c88:	f104 0010 	add.w	r0, r4, #16
 8007c8c:	f000 fe0a 	bl	80088a4 <xTaskRemoveFromEventList>
 8007c90:	b148      	cbz	r0, 8007ca6 <xQueueGenericReset+0x64>
					queueYIELD_IF_USING_PREEMPTION();
 8007c92:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8007c96:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007c9a:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8007c9e:	f3bf 8f4f 	dsb	sy
 8007ca2:	f3bf 8f6f 	isb	sy
	taskEXIT_CRITICAL();
 8007ca6:	f000 ff75 	bl	8008b94 <vPortExitCritical>
}
 8007caa:	2001      	movs	r0, #1
 8007cac:	bd38      	pop	{r3, r4, r5, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007cae:	f104 0010 	add.w	r0, r4, #16
 8007cb2:	f7ff fefa 	bl	8007aaa <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007cb6:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8007cba:	f7ff fef6 	bl	8007aaa <vListInitialise>
 8007cbe:	e7f2      	b.n	8007ca6 <xQueueGenericReset+0x64>

08007cc0 <xQueueGenericCreateStatic>:
	{
 8007cc0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007cc2:	460d      	mov	r5, r1
 8007cc4:	461c      	mov	r4, r3
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007cc6:	b940      	cbnz	r0, 8007cda <xQueueGenericCreateStatic+0x1a>
 8007cc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ccc:	f383 8811 	msr	BASEPRI, r3
 8007cd0:	f3bf 8f6f 	isb	sy
 8007cd4:	f3bf 8f4f 	dsb	sy
 8007cd8:	e7fe      	b.n	8007cd8 <xQueueGenericCreateStatic+0x18>
		configASSERT( pxStaticQueue != NULL );
 8007cda:	b943      	cbnz	r3, 8007cee <xQueueGenericCreateStatic+0x2e>
 8007cdc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ce0:	f383 8811 	msr	BASEPRI, r3
 8007ce4:	f3bf 8f6f 	isb	sy
 8007ce8:	f3bf 8f4f 	dsb	sy
 8007cec:	e7fe      	b.n	8007cec <xQueueGenericCreateStatic+0x2c>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007cee:	b14a      	cbz	r2, 8007d04 <xQueueGenericCreateStatic+0x44>
 8007cf0:	b991      	cbnz	r1, 8007d18 <xQueueGenericCreateStatic+0x58>
 8007cf2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cf6:	f383 8811 	msr	BASEPRI, r3
 8007cfa:	f3bf 8f6f 	isb	sy
 8007cfe:	f3bf 8f4f 	dsb	sy
 8007d02:	e7fe      	b.n	8007d02 <xQueueGenericCreateStatic+0x42>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007d04:	b141      	cbz	r1, 8007d18 <xQueueGenericCreateStatic+0x58>
 8007d06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d0a:	f383 8811 	msr	BASEPRI, r3
 8007d0e:	f3bf 8f6f 	isb	sy
 8007d12:	f3bf 8f4f 	dsb	sy
 8007d16:	e7fe      	b.n	8007d16 <xQueueGenericCreateStatic+0x56>
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007d18:	2348      	movs	r3, #72	@ 0x48
 8007d1a:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007d1c:	9b01      	ldr	r3, [sp, #4]
 8007d1e:	2b48      	cmp	r3, #72	@ 0x48
 8007d20:	d008      	beq.n	8007d34 <xQueueGenericCreateStatic+0x74>
 8007d22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d26:	f383 8811 	msr	BASEPRI, r3
 8007d2a:	f3bf 8f6f 	isb	sy
 8007d2e:	f3bf 8f4f 	dsb	sy
 8007d32:	e7fe      	b.n	8007d32 <xQueueGenericCreateStatic+0x72>
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007d34:	2101      	movs	r1, #1
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007d36:	2d00      	cmp	r5, #0
 8007d38:	bf08      	it	eq
 8007d3a:	4622      	moveq	r2, r4
	pxNewQueue->uxItemSize = uxItemSize;
 8007d3c:	e9c4 050f 	strd	r0, r5, [r4, #60]	@ 0x3c
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007d40:	f884 1046 	strb.w	r1, [r4, #70]	@ 0x46
	if( uxItemSize == ( UBaseType_t ) 0 )
 8007d44:	6022      	str	r2, [r4, #0]
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007d46:	4620      	mov	r0, r4
 8007d48:	f7ff ff7b 	bl	8007c42 <xQueueGenericReset>
	}
 8007d4c:	4620      	mov	r0, r4
 8007d4e:	b003      	add	sp, #12
 8007d50:	bd30      	pop	{r4, r5, pc}

08007d52 <xQueueGenericCreate>:
	{
 8007d52:	b570      	push	{r4, r5, r6, lr}
 8007d54:	460d      	mov	r5, r1
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007d56:	4606      	mov	r6, r0
 8007d58:	b940      	cbnz	r0, 8007d6c <xQueueGenericCreate+0x1a>
 8007d5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d5e:	f383 8811 	msr	BASEPRI, r3
 8007d62:	f3bf 8f6f 	isb	sy
 8007d66:	f3bf 8f4f 	dsb	sy
 8007d6a:	e7fe      	b.n	8007d6a <xQueueGenericCreate+0x18>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007d6c:	4348      	muls	r0, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8007d6e:	3048      	adds	r0, #72	@ 0x48
 8007d70:	f001 f856 	bl	8008e20 <pvPortMalloc>
		if( pxNewQueue != NULL )
 8007d74:	4604      	mov	r4, r0
 8007d76:	b160      	cbz	r0, 8007d92 <xQueueGenericCreate+0x40>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007d78:	2300      	movs	r3, #0
 8007d7a:	f880 3046 	strb.w	r3, [r0, #70]	@ 0x46
	if( uxItemSize == ( UBaseType_t ) 0 )
 8007d7e:	b155      	cbz	r5, 8007d96 <xQueueGenericCreate+0x44>
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8007d80:	f100 0348 	add.w	r3, r0, #72	@ 0x48
	pxNewQueue->uxItemSize = uxItemSize;
 8007d84:	e9c4 650f 	strd	r6, r5, [r4, #60]	@ 0x3c
 8007d88:	6023      	str	r3, [r4, #0]
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007d8a:	2101      	movs	r1, #1
 8007d8c:	4620      	mov	r0, r4
 8007d8e:	f7ff ff58 	bl	8007c42 <xQueueGenericReset>
	}
 8007d92:	4620      	mov	r0, r4
 8007d94:	bd70      	pop	{r4, r5, r6, pc}
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007d96:	4603      	mov	r3, r0
 8007d98:	e7f4      	b.n	8007d84 <xQueueGenericCreate+0x32>

08007d9a <xQueueGenericSend>:
{
 8007d9a:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8007d9e:	460f      	mov	r7, r1
 8007da0:	9201      	str	r2, [sp, #4]
 8007da2:	461e      	mov	r6, r3
	configASSERT( pxQueue );
 8007da4:	4604      	mov	r4, r0
 8007da6:	b940      	cbnz	r0, 8007dba <xQueueGenericSend+0x20>
 8007da8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007dac:	f383 8811 	msr	BASEPRI, r3
 8007db0:	f3bf 8f6f 	isb	sy
 8007db4:	f3bf 8f4f 	dsb	sy
 8007db8:	e7fe      	b.n	8007db8 <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007dba:	b951      	cbnz	r1, 8007dd2 <xQueueGenericSend+0x38>
 8007dbc:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8007dbe:	b143      	cbz	r3, 8007dd2 <xQueueGenericSend+0x38>
 8007dc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007dc4:	f383 8811 	msr	BASEPRI, r3
 8007dc8:	f3bf 8f6f 	isb	sy
 8007dcc:	f3bf 8f4f 	dsb	sy
 8007dd0:	e7fe      	b.n	8007dd0 <xQueueGenericSend+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007dd2:	2e02      	cmp	r6, #2
 8007dd4:	d10b      	bne.n	8007dee <xQueueGenericSend+0x54>
 8007dd6:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8007dd8:	2b01      	cmp	r3, #1
 8007dda:	d008      	beq.n	8007dee <xQueueGenericSend+0x54>
 8007ddc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007de0:	f383 8811 	msr	BASEPRI, r3
 8007de4:	f3bf 8f6f 	isb	sy
 8007de8:	f3bf 8f4f 	dsb	sy
 8007dec:	e7fe      	b.n	8007dec <xQueueGenericSend+0x52>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007dee:	f000 fde9 	bl	80089c4 <xTaskGetSchedulerState>
 8007df2:	4605      	mov	r5, r0
 8007df4:	b330      	cbz	r0, 8007e44 <xQueueGenericSend+0xaa>
 8007df6:	2500      	movs	r5, #0
		prvLockQueue( pxQueue );
 8007df8:	f04f 0800 	mov.w	r8, #0
		taskENTER_CRITICAL();
 8007dfc:	f000 feaa 	bl	8008b54 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007e00:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8007e02:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8007e04:	429a      	cmp	r2, r3
 8007e06:	d301      	bcc.n	8007e0c <xQueueGenericSend+0x72>
 8007e08:	2e02      	cmp	r6, #2
 8007e0a:	d127      	bne.n	8007e5c <xQueueGenericSend+0xc2>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007e0c:	4632      	mov	r2, r6
 8007e0e:	4639      	mov	r1, r7
 8007e10:	4620      	mov	r0, r4
 8007e12:	f7ff fe95 	bl	8007b40 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007e16:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8007e18:	b11b      	cbz	r3, 8007e22 <xQueueGenericSend+0x88>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007e1a:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8007e1e:	f000 fd41 	bl	80088a4 <xTaskRemoveFromEventList>
					else if( xYieldRequired != pdFALSE )
 8007e22:	b148      	cbz	r0, 8007e38 <xQueueGenericSend+0x9e>
						queueYIELD_IF_USING_PREEMPTION();
 8007e24:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8007e28:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007e2c:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8007e30:	f3bf 8f4f 	dsb	sy
 8007e34:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8007e38:	f000 feac 	bl	8008b94 <vPortExitCritical>
				return pdPASS;
 8007e3c:	2001      	movs	r0, #1
}
 8007e3e:	b004      	add	sp, #16
 8007e40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007e44:	9b01      	ldr	r3, [sp, #4]
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d0d6      	beq.n	8007df8 <xQueueGenericSend+0x5e>
 8007e4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e4e:	f383 8811 	msr	BASEPRI, r3
 8007e52:	f3bf 8f6f 	isb	sy
 8007e56:	f3bf 8f4f 	dsb	sy
 8007e5a:	e7fe      	b.n	8007e5a <xQueueGenericSend+0xc0>
				if( xTicksToWait == ( TickType_t ) 0 )
 8007e5c:	9b01      	ldr	r3, [sp, #4]
 8007e5e:	b91b      	cbnz	r3, 8007e68 <xQueueGenericSend+0xce>
					taskEXIT_CRITICAL();
 8007e60:	f000 fe98 	bl	8008b94 <vPortExitCritical>
					return errQUEUE_FULL;
 8007e64:	2000      	movs	r0, #0
 8007e66:	e7ea      	b.n	8007e3e <xQueueGenericSend+0xa4>
				else if( xEntryTimeSet == pdFALSE )
 8007e68:	b915      	cbnz	r5, 8007e70 <xQueueGenericSend+0xd6>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007e6a:	a802      	add	r0, sp, #8
 8007e6c:	f000 fd5c 	bl	8008928 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8007e70:	f000 fe90 	bl	8008b94 <vPortExitCritical>
		vTaskSuspendAll();
 8007e74:	f000 fb88 	bl	8008588 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007e78:	f000 fe6c 	bl	8008b54 <vPortEnterCritical>
 8007e7c:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8007e80:	2bff      	cmp	r3, #255	@ 0xff
 8007e82:	bf08      	it	eq
 8007e84:	f884 8044 	strbeq.w	r8, [r4, #68]	@ 0x44
 8007e88:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8007e8c:	2bff      	cmp	r3, #255	@ 0xff
 8007e8e:	bf08      	it	eq
 8007e90:	f884 8045 	strbeq.w	r8, [r4, #69]	@ 0x45
 8007e94:	f000 fe7e 	bl	8008b94 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007e98:	a901      	add	r1, sp, #4
 8007e9a:	a802      	add	r0, sp, #8
 8007e9c:	f000 fd50 	bl	8008940 <xTaskCheckForTimeOut>
 8007ea0:	bb38      	cbnz	r0, 8007ef2 <xQueueGenericSend+0x158>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007ea2:	f000 fe57 	bl	8008b54 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007ea6:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8007ea8:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8007eaa:	429a      	cmp	r2, r3
 8007eac:	d10e      	bne.n	8007ecc <xQueueGenericSend+0x132>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8007eae:	f000 fe71 	bl	8008b94 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007eb2:	9901      	ldr	r1, [sp, #4]
 8007eb4:	f104 0010 	add.w	r0, r4, #16
 8007eb8:	f000 fcda 	bl	8008870 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007ebc:	4620      	mov	r0, r4
 8007ebe:	f7ff fe88 	bl	8007bd2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007ec2:	f000 fc01 	bl	80086c8 <xTaskResumeAll>
 8007ec6:	b148      	cbz	r0, 8007edc <xQueueGenericSend+0x142>
 8007ec8:	2501      	movs	r5, #1
 8007eca:	e797      	b.n	8007dfc <xQueueGenericSend+0x62>
	taskEXIT_CRITICAL();
 8007ecc:	f000 fe62 	bl	8008b94 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 8007ed0:	4620      	mov	r0, r4
 8007ed2:	f7ff fe7e 	bl	8007bd2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007ed6:	f000 fbf7 	bl	80086c8 <xTaskResumeAll>
 8007eda:	e7f5      	b.n	8007ec8 <xQueueGenericSend+0x12e>
					portYIELD_WITHIN_API();
 8007edc:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8007ee0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007ee4:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8007ee8:	f3bf 8f4f 	dsb	sy
 8007eec:	f3bf 8f6f 	isb	sy
 8007ef0:	e7ea      	b.n	8007ec8 <xQueueGenericSend+0x12e>
			prvUnlockQueue( pxQueue );
 8007ef2:	4620      	mov	r0, r4
 8007ef4:	f7ff fe6d 	bl	8007bd2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007ef8:	f000 fbe6 	bl	80086c8 <xTaskResumeAll>
			return errQUEUE_FULL;
 8007efc:	e7b2      	b.n	8007e64 <xQueueGenericSend+0xca>

08007efe <xQueueGenericSendFromISR>:
{
 8007efe:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007f02:	4689      	mov	r9, r1
 8007f04:	4617      	mov	r7, r2
 8007f06:	461e      	mov	r6, r3
	configASSERT( pxQueue );
 8007f08:	4604      	mov	r4, r0
 8007f0a:	b940      	cbnz	r0, 8007f1e <xQueueGenericSendFromISR+0x20>
 8007f0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f10:	f383 8811 	msr	BASEPRI, r3
 8007f14:	f3bf 8f6f 	isb	sy
 8007f18:	f3bf 8f4f 	dsb	sy
 8007f1c:	e7fe      	b.n	8007f1c <xQueueGenericSendFromISR+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007f1e:	b951      	cbnz	r1, 8007f36 <xQueueGenericSendFromISR+0x38>
 8007f20:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8007f22:	b143      	cbz	r3, 8007f36 <xQueueGenericSendFromISR+0x38>
 8007f24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f28:	f383 8811 	msr	BASEPRI, r3
 8007f2c:	f3bf 8f6f 	isb	sy
 8007f30:	f3bf 8f4f 	dsb	sy
 8007f34:	e7fe      	b.n	8007f34 <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007f36:	2e02      	cmp	r6, #2
 8007f38:	d10b      	bne.n	8007f52 <xQueueGenericSendFromISR+0x54>
 8007f3a:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8007f3c:	2b01      	cmp	r3, #1
 8007f3e:	d008      	beq.n	8007f52 <xQueueGenericSendFromISR+0x54>
 8007f40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f44:	f383 8811 	msr	BASEPRI, r3
 8007f48:	f3bf 8f6f 	isb	sy
 8007f4c:	f3bf 8f4f 	dsb	sy
 8007f50:	e7fe      	b.n	8007f50 <xQueueGenericSendFromISR+0x52>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007f52:	f000 ff11 	bl	8008d78 <vPortValidateInterruptPriority>
	__asm volatile
 8007f56:	f3ef 8811 	mrs	r8, BASEPRI
 8007f5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f5e:	f383 8811 	msr	BASEPRI, r3
 8007f62:	f3bf 8f6f 	isb	sy
 8007f66:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007f6a:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8007f6c:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8007f6e:	429a      	cmp	r2, r3
 8007f70:	d301      	bcc.n	8007f76 <xQueueGenericSendFromISR+0x78>
 8007f72:	2e02      	cmp	r6, #2
 8007f74:	d11d      	bne.n	8007fb2 <xQueueGenericSendFromISR+0xb4>
			const int8_t cTxLock = pxQueue->cTxLock;
 8007f76:	f894 5045 	ldrb.w	r5, [r4, #69]	@ 0x45
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007f7a:	4632      	mov	r2, r6
			const int8_t cTxLock = pxQueue->cTxLock;
 8007f7c:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007f7e:	4649      	mov	r1, r9
 8007f80:	4620      	mov	r0, r4
 8007f82:	f7ff fddd 	bl	8007b40 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 8007f86:	1c6b      	adds	r3, r5, #1
 8007f88:	d10e      	bne.n	8007fa8 <xQueueGenericSendFromISR+0xaa>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007f8a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8007f8c:	b13b      	cbz	r3, 8007f9e <xQueueGenericSendFromISR+0xa0>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007f8e:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8007f92:	f000 fc87 	bl	80088a4 <xTaskRemoveFromEventList>
 8007f96:	b110      	cbz	r0, 8007f9e <xQueueGenericSendFromISR+0xa0>
							if( pxHigherPriorityTaskWoken != NULL )
 8007f98:	b10f      	cbz	r7, 8007f9e <xQueueGenericSendFromISR+0xa0>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007f9a:	2301      	movs	r3, #1
 8007f9c:	603b      	str	r3, [r7, #0]
			xReturn = pdPASS;
 8007f9e:	2001      	movs	r0, #1
	__asm volatile
 8007fa0:	f388 8811 	msr	BASEPRI, r8
}
 8007fa4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007fa8:	3501      	adds	r5, #1
 8007faa:	b26d      	sxtb	r5, r5
 8007fac:	f884 5045 	strb.w	r5, [r4, #69]	@ 0x45
 8007fb0:	e7f5      	b.n	8007f9e <xQueueGenericSendFromISR+0xa0>
			xReturn = errQUEUE_FULL;
 8007fb2:	2000      	movs	r0, #0
 8007fb4:	e7f4      	b.n	8007fa0 <xQueueGenericSendFromISR+0xa2>

08007fb6 <xQueueReceive>:
{
 8007fb6:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8007fba:	460e      	mov	r6, r1
 8007fbc:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 8007fbe:	4604      	mov	r4, r0
 8007fc0:	b940      	cbnz	r0, 8007fd4 <xQueueReceive+0x1e>
	__asm volatile
 8007fc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fc6:	f383 8811 	msr	BASEPRI, r3
 8007fca:	f3bf 8f6f 	isb	sy
 8007fce:	f3bf 8f4f 	dsb	sy
 8007fd2:	e7fe      	b.n	8007fd2 <xQueueReceive+0x1c>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007fd4:	b951      	cbnz	r1, 8007fec <xQueueReceive+0x36>
 8007fd6:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8007fd8:	b143      	cbz	r3, 8007fec <xQueueReceive+0x36>
 8007fda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fde:	f383 8811 	msr	BASEPRI, r3
 8007fe2:	f3bf 8f6f 	isb	sy
 8007fe6:	f3bf 8f4f 	dsb	sy
 8007fea:	e7fe      	b.n	8007fea <xQueueReceive+0x34>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007fec:	f000 fcea 	bl	80089c4 <xTaskGetSchedulerState>
 8007ff0:	4605      	mov	r5, r0
 8007ff2:	b318      	cbz	r0, 800803c <xQueueReceive+0x86>
 8007ff4:	2500      	movs	r5, #0
		prvLockQueue( pxQueue );
 8007ff6:	f04f 0800 	mov.w	r8, #0
		taskENTER_CRITICAL();
 8007ffa:	f000 fdab 	bl	8008b54 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007ffe:	6ba7      	ldr	r7, [r4, #56]	@ 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008000:	b347      	cbz	r7, 8008054 <xQueueReceive+0x9e>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008002:	4631      	mov	r1, r6
 8008004:	4620      	mov	r0, r4
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008006:	3f01      	subs	r7, #1
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008008:	f7ff fdcd 	bl	8007ba6 <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800800c:	63a7      	str	r7, [r4, #56]	@ 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800800e:	6923      	ldr	r3, [r4, #16]
 8008010:	b173      	cbz	r3, 8008030 <xQueueReceive+0x7a>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008012:	f104 0010 	add.w	r0, r4, #16
 8008016:	f000 fc45 	bl	80088a4 <xTaskRemoveFromEventList>
 800801a:	b148      	cbz	r0, 8008030 <xQueueReceive+0x7a>
						queueYIELD_IF_USING_PREEMPTION();
 800801c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8008020:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008024:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8008028:	f3bf 8f4f 	dsb	sy
 800802c:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8008030:	f000 fdb0 	bl	8008b94 <vPortExitCritical>
				return pdPASS;
 8008034:	2001      	movs	r0, #1
}
 8008036:	b004      	add	sp, #16
 8008038:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800803c:	9b01      	ldr	r3, [sp, #4]
 800803e:	2b00      	cmp	r3, #0
 8008040:	d0d9      	beq.n	8007ff6 <xQueueReceive+0x40>
 8008042:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008046:	f383 8811 	msr	BASEPRI, r3
 800804a:	f3bf 8f6f 	isb	sy
 800804e:	f3bf 8f4f 	dsb	sy
 8008052:	e7fe      	b.n	8008052 <xQueueReceive+0x9c>
				if( xTicksToWait == ( TickType_t ) 0 )
 8008054:	9b01      	ldr	r3, [sp, #4]
 8008056:	b91b      	cbnz	r3, 8008060 <xQueueReceive+0xaa>
					taskEXIT_CRITICAL();
 8008058:	f000 fd9c 	bl	8008b94 <vPortExitCritical>
					return errQUEUE_EMPTY;
 800805c:	2000      	movs	r0, #0
 800805e:	e7ea      	b.n	8008036 <xQueueReceive+0x80>
				else if( xEntryTimeSet == pdFALSE )
 8008060:	b915      	cbnz	r5, 8008068 <xQueueReceive+0xb2>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008062:	a802      	add	r0, sp, #8
 8008064:	f000 fc60 	bl	8008928 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8008068:	f000 fd94 	bl	8008b94 <vPortExitCritical>
		vTaskSuspendAll();
 800806c:	f000 fa8c 	bl	8008588 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008070:	f000 fd70 	bl	8008b54 <vPortEnterCritical>
 8008074:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8008078:	2bff      	cmp	r3, #255	@ 0xff
 800807a:	bf08      	it	eq
 800807c:	f884 8044 	strbeq.w	r8, [r4, #68]	@ 0x44
 8008080:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8008084:	2bff      	cmp	r3, #255	@ 0xff
 8008086:	bf08      	it	eq
 8008088:	f884 8045 	strbeq.w	r8, [r4, #69]	@ 0x45
 800808c:	f000 fd82 	bl	8008b94 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008090:	a901      	add	r1, sp, #4
 8008092:	a802      	add	r0, sp, #8
 8008094:	f000 fc54 	bl	8008940 <xTaskCheckForTimeOut>
 8008098:	bb00      	cbnz	r0, 80080dc <xQueueReceive+0x126>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800809a:	4620      	mov	r0, r4
 800809c:	f7ff fd45 	bl	8007b2a <prvIsQueueEmpty>
 80080a0:	b1b0      	cbz	r0, 80080d0 <xQueueReceive+0x11a>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80080a2:	9901      	ldr	r1, [sp, #4]
 80080a4:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 80080a8:	f000 fbe2 	bl	8008870 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80080ac:	4620      	mov	r0, r4
 80080ae:	f7ff fd90 	bl	8007bd2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80080b2:	f000 fb09 	bl	80086c8 <xTaskResumeAll>
 80080b6:	b948      	cbnz	r0, 80080cc <xQueueReceive+0x116>
					portYIELD_WITHIN_API();
 80080b8:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80080bc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80080c0:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80080c4:	f3bf 8f4f 	dsb	sy
 80080c8:	f3bf 8f6f 	isb	sy
 80080cc:	2501      	movs	r5, #1
 80080ce:	e794      	b.n	8007ffa <xQueueReceive+0x44>
				prvUnlockQueue( pxQueue );
 80080d0:	4620      	mov	r0, r4
 80080d2:	f7ff fd7e 	bl	8007bd2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80080d6:	f000 faf7 	bl	80086c8 <xTaskResumeAll>
 80080da:	e7f7      	b.n	80080cc <xQueueReceive+0x116>
			prvUnlockQueue( pxQueue );
 80080dc:	4620      	mov	r0, r4
 80080de:	f7ff fd78 	bl	8007bd2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80080e2:	f000 faf1 	bl	80086c8 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80080e6:	4620      	mov	r0, r4
 80080e8:	f7ff fd1f 	bl	8007b2a <prvIsQueueEmpty>
 80080ec:	2800      	cmp	r0, #0
 80080ee:	d0ed      	beq.n	80080cc <xQueueReceive+0x116>
 80080f0:	e7b4      	b.n	800805c <xQueueReceive+0xa6>

080080f2 <xQueueReceiveFromISR>:
{
 80080f2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80080f6:	4689      	mov	r9, r1
 80080f8:	4690      	mov	r8, r2
	configASSERT( pxQueue );
 80080fa:	4604      	mov	r4, r0
 80080fc:	b940      	cbnz	r0, 8008110 <xQueueReceiveFromISR+0x1e>
 80080fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008102:	f383 8811 	msr	BASEPRI, r3
 8008106:	f3bf 8f6f 	isb	sy
 800810a:	f3bf 8f4f 	dsb	sy
 800810e:	e7fe      	b.n	800810e <xQueueReceiveFromISR+0x1c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008110:	b951      	cbnz	r1, 8008128 <xQueueReceiveFromISR+0x36>
 8008112:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8008114:	b143      	cbz	r3, 8008128 <xQueueReceiveFromISR+0x36>
 8008116:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800811a:	f383 8811 	msr	BASEPRI, r3
 800811e:	f3bf 8f6f 	isb	sy
 8008122:	f3bf 8f4f 	dsb	sy
 8008126:	e7fe      	b.n	8008126 <xQueueReceiveFromISR+0x34>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008128:	f000 fe26 	bl	8008d78 <vPortValidateInterruptPriority>
	__asm volatile
 800812c:	f3ef 8711 	mrs	r7, BASEPRI
 8008130:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008134:	f383 8811 	msr	BASEPRI, r3
 8008138:	f3bf 8f6f 	isb	sy
 800813c:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008140:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008142:	b30d      	cbz	r5, 8008188 <xQueueReceiveFromISR+0x96>
			const int8_t cRxLock = pxQueue->cRxLock;
 8008144:	f894 6044 	ldrb.w	r6, [r4, #68]	@ 0x44
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008148:	4649      	mov	r1, r9
			const int8_t cRxLock = pxQueue->cRxLock;
 800814a:	b276      	sxtb	r6, r6
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800814c:	4620      	mov	r0, r4
 800814e:	f7ff fd2a 	bl	8007ba6 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008152:	3d01      	subs	r5, #1
			if( cRxLock == queueUNLOCKED )
 8008154:	1c73      	adds	r3, r6, #1
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008156:	63a5      	str	r5, [r4, #56]	@ 0x38
			if( cRxLock == queueUNLOCKED )
 8008158:	d111      	bne.n	800817e <xQueueReceiveFromISR+0x8c>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800815a:	6923      	ldr	r3, [r4, #16]
 800815c:	b153      	cbz	r3, 8008174 <xQueueReceiveFromISR+0x82>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800815e:	f104 0010 	add.w	r0, r4, #16
 8008162:	f000 fb9f 	bl	80088a4 <xTaskRemoveFromEventList>
 8008166:	b128      	cbz	r0, 8008174 <xQueueReceiveFromISR+0x82>
						if( pxHigherPriorityTaskWoken != NULL )
 8008168:	f1b8 0f00 	cmp.w	r8, #0
 800816c:	d002      	beq.n	8008174 <xQueueReceiveFromISR+0x82>
							*pxHigherPriorityTaskWoken = pdTRUE;
 800816e:	2301      	movs	r3, #1
 8008170:	f8c8 3000 	str.w	r3, [r8]
			xReturn = pdPASS;
 8008174:	2001      	movs	r0, #1
	__asm volatile
 8008176:	f387 8811 	msr	BASEPRI, r7
}
 800817a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800817e:	3601      	adds	r6, #1
 8008180:	b276      	sxtb	r6, r6
 8008182:	f884 6044 	strb.w	r6, [r4, #68]	@ 0x44
 8008186:	e7f5      	b.n	8008174 <xQueueReceiveFromISR+0x82>
			xReturn = pdFAIL;
 8008188:	4628      	mov	r0, r5
 800818a:	e7f4      	b.n	8008176 <xQueueReceiveFromISR+0x84>

0800818c <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800818c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008190:	4604      	mov	r4, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008192:	f000 fcdf 	bl	8008b54 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008196:	4b2f      	ldr	r3, [pc, #188]	@ (8008254 <prvAddNewTaskToReadyList+0xc8>)
		if( pxCurrentTCB == NULL )
 8008198:	4e2f      	ldr	r6, [pc, #188]	@ (8008258 <prvAddNewTaskToReadyList+0xcc>)
		uxCurrentNumberOfTasks++;
 800819a:	681a      	ldr	r2, [r3, #0]
 800819c:	4f2f      	ldr	r7, [pc, #188]	@ (800825c <prvAddNewTaskToReadyList+0xd0>)
 800819e:	3201      	adds	r2, #1
 80081a0:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 80081a2:	6835      	ldr	r5, [r6, #0]
 80081a4:	2d00      	cmp	r5, #0
 80081a6:	d14a      	bne.n	800823e <prvAddNewTaskToReadyList+0xb2>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80081a8:	6034      	str	r4, [r6, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	2b01      	cmp	r3, #1
 80081ae:	d11f      	bne.n	80081f0 <prvAddNewTaskToReadyList+0x64>
 80081b0:	46b8      	mov	r8, r7
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80081b2:	4640      	mov	r0, r8
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80081b4:	3501      	adds	r5, #1
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80081b6:	f7ff fc78 	bl	8007aaa <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80081ba:	2d07      	cmp	r5, #7
 80081bc:	f108 0814 	add.w	r8, r8, #20
 80081c0:	d1f7      	bne.n	80081b2 <prvAddNewTaskToReadyList+0x26>
	}

	vListInitialise( &xDelayedTaskList1 );
 80081c2:	f8df 80c0 	ldr.w	r8, [pc, #192]	@ 8008284 <prvAddNewTaskToReadyList+0xf8>
	vListInitialise( &xDelayedTaskList2 );
 80081c6:	4d26      	ldr	r5, [pc, #152]	@ (8008260 <prvAddNewTaskToReadyList+0xd4>)
	vListInitialise( &xDelayedTaskList1 );
 80081c8:	4640      	mov	r0, r8
 80081ca:	f7ff fc6e 	bl	8007aaa <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80081ce:	4628      	mov	r0, r5
 80081d0:	f7ff fc6b 	bl	8007aaa <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80081d4:	4823      	ldr	r0, [pc, #140]	@ (8008264 <prvAddNewTaskToReadyList+0xd8>)
 80081d6:	f7ff fc68 	bl	8007aaa <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80081da:	4823      	ldr	r0, [pc, #140]	@ (8008268 <prvAddNewTaskToReadyList+0xdc>)
 80081dc:	f7ff fc65 	bl	8007aaa <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80081e0:	4822      	ldr	r0, [pc, #136]	@ (800826c <prvAddNewTaskToReadyList+0xe0>)
 80081e2:	f7ff fc62 	bl	8007aaa <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80081e6:	4b22      	ldr	r3, [pc, #136]	@ (8008270 <prvAddNewTaskToReadyList+0xe4>)
 80081e8:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80081ec:	4b21      	ldr	r3, [pc, #132]	@ (8008274 <prvAddNewTaskToReadyList+0xe8>)
 80081ee:	601d      	str	r5, [r3, #0]
		uxTaskNumber++;
 80081f0:	4a21      	ldr	r2, [pc, #132]	@ (8008278 <prvAddNewTaskToReadyList+0xec>)
		prvAddTaskToReadyList( pxNewTCB );
 80081f2:	4922      	ldr	r1, [pc, #136]	@ (800827c <prvAddNewTaskToReadyList+0xf0>)
		uxTaskNumber++;
 80081f4:	6813      	ldr	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 80081f6:	6808      	ldr	r0, [r1, #0]
		uxTaskNumber++;
 80081f8:	3301      	adds	r3, #1
 80081fa:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 80081fc:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80081fe:	2301      	movs	r3, #1
 8008200:	4093      	lsls	r3, r2
 8008202:	4303      	orrs	r3, r0
 8008204:	2014      	movs	r0, #20
 8008206:	600b      	str	r3, [r1, #0]
 8008208:	fb00 7002 	mla	r0, r0, r2, r7
 800820c:	1d21      	adds	r1, r4, #4
 800820e:	f7ff fc5a 	bl	8007ac6 <vListInsertEnd>
	taskEXIT_CRITICAL();
 8008212:	f000 fcbf 	bl	8008b94 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8008216:	4b1a      	ldr	r3, [pc, #104]	@ (8008280 <prvAddNewTaskToReadyList+0xf4>)
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	b173      	cbz	r3, 800823a <prvAddNewTaskToReadyList+0xae>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800821c:	6833      	ldr	r3, [r6, #0]
 800821e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008220:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8008222:	429a      	cmp	r2, r3
 8008224:	d209      	bcs.n	800823a <prvAddNewTaskToReadyList+0xae>
			taskYIELD_IF_USING_PREEMPTION();
 8008226:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800822a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800822e:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8008232:	f3bf 8f4f 	dsb	sy
 8008236:	f3bf 8f6f 	isb	sy
}
 800823a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( xSchedulerRunning == pdFALSE )
 800823e:	4b10      	ldr	r3, [pc, #64]	@ (8008280 <prvAddNewTaskToReadyList+0xf4>)
 8008240:	681a      	ldr	r2, [r3, #0]
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008242:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
			if( xSchedulerRunning == pdFALSE )
 8008244:	2a00      	cmp	r2, #0
 8008246:	d1d3      	bne.n	80081f0 <prvAddNewTaskToReadyList+0x64>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008248:	6832      	ldr	r2, [r6, #0]
 800824a:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800824c:	429a      	cmp	r2, r3
					pxCurrentTCB = pxNewTCB;
 800824e:	bf98      	it	ls
 8008250:	6034      	strls	r4, [r6, #0]
 8008252:	e7cd      	b.n	80081f0 <prvAddNewTaskToReadyList+0x64>
 8008254:	2000291c 	.word	0x2000291c
 8008258:	20002a1c 	.word	0x20002a1c
 800825c:	20002990 	.word	0x20002990
 8008260:	20002968 	.word	0x20002968
 8008264:	2000294c 	.word	0x2000294c
 8008268:	20002938 	.word	0x20002938
 800826c:	20002920 	.word	0x20002920
 8008270:	20002964 	.word	0x20002964
 8008274:	20002960 	.word	0x20002960
 8008278:	20002900 	.word	0x20002900
 800827c:	20002914 	.word	0x20002914
 8008280:	20002910 	.word	0x20002910
 8008284:	2000297c 	.word	0x2000297c

08008288 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008288:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800828a:	4b1a      	ldr	r3, [pc, #104]	@ (80082f4 <prvAddCurrentTaskToDelayedList+0x6c>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800828c:	4d1a      	ldr	r5, [pc, #104]	@ (80082f8 <prvAddCurrentTaskToDelayedList+0x70>)
const TickType_t xConstTickCount = xTickCount;
 800828e:	681c      	ldr	r4, [r3, #0]
{
 8008290:	4606      	mov	r6, r0
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008292:	6828      	ldr	r0, [r5, #0]
 8008294:	3004      	adds	r0, #4
{
 8008296:	460f      	mov	r7, r1
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008298:	f7ff fc37 	bl	8007b0a <uxListRemove>
 800829c:	b940      	cbnz	r0, 80082b0 <prvAddCurrentTaskToDelayedList+0x28>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800829e:	682a      	ldr	r2, [r5, #0]
 80082a0:	4916      	ldr	r1, [pc, #88]	@ (80082fc <prvAddCurrentTaskToDelayedList+0x74>)
 80082a2:	6ad0      	ldr	r0, [r2, #44]	@ 0x2c
 80082a4:	680b      	ldr	r3, [r1, #0]
 80082a6:	2201      	movs	r2, #1
 80082a8:	4082      	lsls	r2, r0
 80082aa:	ea23 0302 	bic.w	r3, r3, r2
 80082ae:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80082b0:	1c73      	adds	r3, r6, #1
 80082b2:	d107      	bne.n	80082c4 <prvAddCurrentTaskToDelayedList+0x3c>
 80082b4:	b137      	cbz	r7, 80082c4 <prvAddCurrentTaskToDelayedList+0x3c>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80082b6:	6829      	ldr	r1, [r5, #0]
 80082b8:	4811      	ldr	r0, [pc, #68]	@ (8008300 <prvAddCurrentTaskToDelayedList+0x78>)

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80082ba:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80082be:	3104      	adds	r1, #4
 80082c0:	f7ff bc01 	b.w	8007ac6 <vListInsertEnd>
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80082c4:	682b      	ldr	r3, [r5, #0]
 80082c6:	19a4      	adds	r4, r4, r6
 80082c8:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80082ca:	d307      	bcc.n	80082dc <prvAddCurrentTaskToDelayedList+0x54>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80082cc:	4b0d      	ldr	r3, [pc, #52]	@ (8008304 <prvAddCurrentTaskToDelayedList+0x7c>)
 80082ce:	6818      	ldr	r0, [r3, #0]
 80082d0:	6829      	ldr	r1, [r5, #0]
}
 80082d2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80082d6:	3104      	adds	r1, #4
 80082d8:	f7ff bc00 	b.w	8007adc <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80082dc:	4b0a      	ldr	r3, [pc, #40]	@ (8008308 <prvAddCurrentTaskToDelayedList+0x80>)
 80082de:	6818      	ldr	r0, [r3, #0]
 80082e0:	6829      	ldr	r1, [r5, #0]
 80082e2:	3104      	adds	r1, #4
 80082e4:	f7ff fbfa 	bl	8007adc <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80082e8:	4b08      	ldr	r3, [pc, #32]	@ (800830c <prvAddCurrentTaskToDelayedList+0x84>)
 80082ea:	681a      	ldr	r2, [r3, #0]
 80082ec:	42a2      	cmp	r2, r4
					xNextTaskUnblockTime = xTimeToWake;
 80082ee:	bf88      	it	hi
 80082f0:	601c      	strhi	r4, [r3, #0]
}
 80082f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80082f4:	20002918 	.word	0x20002918
 80082f8:	20002a1c 	.word	0x20002a1c
 80082fc:	20002914 	.word	0x20002914
 8008300:	20002920 	.word	0x20002920
 8008304:	20002960 	.word	0x20002960
 8008308:	20002964 	.word	0x20002964
 800830c:	200028fc 	.word	0x200028fc

08008310 <prvResetNextTaskUnblockTime>:
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008310:	4a06      	ldr	r2, [pc, #24]	@ (800832c <prvResetNextTaskUnblockTime+0x1c>)
 8008312:	6813      	ldr	r3, [r2, #0]
 8008314:	6819      	ldr	r1, [r3, #0]
 8008316:	4b06      	ldr	r3, [pc, #24]	@ (8008330 <prvResetNextTaskUnblockTime+0x20>)
 8008318:	b919      	cbnz	r1, 8008322 <prvResetNextTaskUnblockTime+0x12>
		xNextTaskUnblockTime = portMAX_DELAY;
 800831a:	f04f 32ff 	mov.w	r2, #4294967295
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800831e:	601a      	str	r2, [r3, #0]
}
 8008320:	4770      	bx	lr
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8008322:	6812      	ldr	r2, [r2, #0]
 8008324:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008326:	68d2      	ldr	r2, [r2, #12]
 8008328:	6852      	ldr	r2, [r2, #4]
 800832a:	e7f8      	b.n	800831e <prvResetNextTaskUnblockTime+0xe>
 800832c:	20002964 	.word	0x20002964
 8008330:	200028fc 	.word	0x200028fc

08008334 <prvDeleteTCB>:
	{
 8008334:	b510      	push	{r4, lr}
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008336:	f890 3051 	ldrb.w	r3, [r0, #81]	@ 0x51
	{
 800833a:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800833c:	b93b      	cbnz	r3, 800834e <prvDeleteTCB+0x1a>
				vPortFree( pxTCB->pxStack );
 800833e:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 8008340:	f000 fe00 	bl	8008f44 <vPortFree>
				vPortFree( pxTCB );
 8008344:	4620      	mov	r0, r4
	}
 8008346:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				vPortFree( pxTCB );
 800834a:	f000 bdfb 	b.w	8008f44 <vPortFree>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800834e:	2b01      	cmp	r3, #1
 8008350:	d0f9      	beq.n	8008346 <prvDeleteTCB+0x12>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008352:	2b02      	cmp	r3, #2
 8008354:	d008      	beq.n	8008368 <prvDeleteTCB+0x34>
	__asm volatile
 8008356:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800835a:	f383 8811 	msr	BASEPRI, r3
 800835e:	f3bf 8f6f 	isb	sy
 8008362:	f3bf 8f4f 	dsb	sy
 8008366:	e7fe      	b.n	8008366 <prvDeleteTCB+0x32>
	}
 8008368:	bd10      	pop	{r4, pc}
	...

0800836c <prvIdleTask>:
{
 800836c:	b580      	push	{r7, lr}
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800836e:	4c13      	ldr	r4, [pc, #76]	@ (80083bc <prvIdleTask+0x50>)
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8008370:	4f13      	ldr	r7, [pc, #76]	@ (80083c0 <prvIdleTask+0x54>)
				--uxCurrentNumberOfTasks;
 8008372:	4d14      	ldr	r5, [pc, #80]	@ (80083c4 <prvIdleTask+0x58>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008374:	6823      	ldr	r3, [r4, #0]
 8008376:	b973      	cbnz	r3, 8008396 <prvIdleTask+0x2a>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008378:	4b13      	ldr	r3, [pc, #76]	@ (80083c8 <prvIdleTask+0x5c>)
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	2b01      	cmp	r3, #1
 800837e:	d9f8      	bls.n	8008372 <prvIdleTask+0x6>
				taskYIELD();
 8008380:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8008384:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008388:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800838c:	f3bf 8f4f 	dsb	sy
 8008390:	f3bf 8f6f 	isb	sy
 8008394:	e7ed      	b.n	8008372 <prvIdleTask+0x6>
			taskENTER_CRITICAL();
 8008396:	f000 fbdd 	bl	8008b54 <vPortEnterCritical>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	68de      	ldr	r6, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800839e:	1d30      	adds	r0, r6, #4
 80083a0:	f7ff fbb3 	bl	8007b0a <uxListRemove>
				--uxCurrentNumberOfTasks;
 80083a4:	682b      	ldr	r3, [r5, #0]
 80083a6:	3b01      	subs	r3, #1
 80083a8:	602b      	str	r3, [r5, #0]
				--uxDeletedTasksWaitingCleanUp;
 80083aa:	6823      	ldr	r3, [r4, #0]
 80083ac:	3b01      	subs	r3, #1
 80083ae:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 80083b0:	f000 fbf0 	bl	8008b94 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 80083b4:	4630      	mov	r0, r6
 80083b6:	f7ff ffbd 	bl	8008334 <prvDeleteTCB>
 80083ba:	e7db      	b.n	8008374 <prvIdleTask+0x8>
 80083bc:	20002934 	.word	0x20002934
 80083c0:	20002938 	.word	0x20002938
 80083c4:	2000291c 	.word	0x2000291c
 80083c8:	20002990 	.word	0x20002990

080083cc <prvInitialiseNewTask.constprop.0>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 80083cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80083d0:	e9dd 8409 	ldrd	r8, r4, [sp, #36]	@ 0x24
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80083d4:	f102 4280 	add.w	r2, r2, #1073741824	@ 0x40000000
 80083d8:	6b26      	ldr	r6, [r4, #48]	@ 0x30
 80083da:	3a01      	subs	r2, #1
 80083dc:	eb06 0682 	add.w	r6, r6, r2, lsl #2
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 80083e0:	4699      	mov	r9, r3
 80083e2:	4607      	mov	r7, r0
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80083e4:	1e4b      	subs	r3, r1, #1
 80083e6:	f026 0607 	bic.w	r6, r6, #7
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80083ea:	f104 0233 	add.w	r2, r4, #51	@ 0x33
 80083ee:	310f      	adds	r1, #15
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80083f0:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 80083f4:	f802 0f01 	strb.w	r0, [r2, #1]!
		if( pcName[ x ] == 0x00 )
 80083f8:	b108      	cbz	r0, 80083fe <prvInitialiseNewTask.constprop.0+0x32>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80083fa:	428b      	cmp	r3, r1
 80083fc:	d1f8      	bne.n	80083f0 <prvInitialiseNewTask.constprop.0+0x24>
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80083fe:	9d08      	ldr	r5, [sp, #32]
 8008400:	2d06      	cmp	r5, #6
 8008402:	bf28      	it	cs
 8008404:	2506      	movcs	r5, #6
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008406:	f04f 0a00 	mov.w	sl, #0
		pxNewTCB->uxMutexesHeld = 0;
 800840a:	e9c4 5a11 	strd	r5, sl, [r4, #68]	@ 0x44
	pxNewTCB->uxPriority = uxPriority;
 800840e:	62e5      	str	r5, [r4, #44]	@ 0x2c
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008410:	1d20      	adds	r0, r4, #4
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008412:	f884 a043 	strb.w	sl, [r4, #67]	@ 0x43
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008416:	f7ff fb53 	bl	8007ac0 <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800841a:	f1c5 0507 	rsb	r5, r5, #7
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800841e:	f104 0018 	add.w	r0, r4, #24
 8008422:	f7ff fb4d 	bl	8007ac0 <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 8008426:	f8c4 a04c 	str.w	sl, [r4, #76]	@ 0x4c
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800842a:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800842c:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800842e:	6264      	str	r4, [r4, #36]	@ 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008430:	f884 a050 	strb.w	sl, [r4, #80]	@ 0x50
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008434:	464a      	mov	r2, r9
 8008436:	4639      	mov	r1, r7
 8008438:	4630      	mov	r0, r6
 800843a:	f000 fb61 	bl	8008b00 <pxPortInitialiseStack>
 800843e:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 8008440:	f1b8 0f00 	cmp.w	r8, #0
 8008444:	d001      	beq.n	800844a <prvInitialiseNewTask.constprop.0+0x7e>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008446:	f8c8 4000 	str.w	r4, [r8]
}
 800844a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800844e <xTaskCreateStatic>:
	{
 800844e:	b570      	push	{r4, r5, r6, lr}
 8008450:	b086      	sub	sp, #24
 8008452:	e9dd 540b 	ldrd	r5, r4, [sp, #44]	@ 0x2c
		configASSERT( puxStackBuffer != NULL );
 8008456:	b945      	cbnz	r5, 800846a <xTaskCreateStatic+0x1c>
 8008458:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800845c:	f383 8811 	msr	BASEPRI, r3
 8008460:	f3bf 8f6f 	isb	sy
 8008464:	f3bf 8f4f 	dsb	sy
 8008468:	e7fe      	b.n	8008468 <xTaskCreateStatic+0x1a>
		configASSERT( pxTaskBuffer != NULL );
 800846a:	b944      	cbnz	r4, 800847e <xTaskCreateStatic+0x30>
 800846c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008470:	f383 8811 	msr	BASEPRI, r3
 8008474:	f3bf 8f6f 	isb	sy
 8008478:	f3bf 8f4f 	dsb	sy
 800847c:	e7fe      	b.n	800847c <xTaskCreateStatic+0x2e>
			volatile size_t xSize = sizeof( StaticTask_t );
 800847e:	2654      	movs	r6, #84	@ 0x54
 8008480:	9605      	str	r6, [sp, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008482:	9e05      	ldr	r6, [sp, #20]
 8008484:	2e54      	cmp	r6, #84	@ 0x54
 8008486:	d008      	beq.n	800849a <xTaskCreateStatic+0x4c>
 8008488:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800848c:	f383 8811 	msr	BASEPRI, r3
 8008490:	f3bf 8f6f 	isb	sy
 8008494:	f3bf 8f4f 	dsb	sy
 8008498:	e7fe      	b.n	8008498 <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800849a:	6325      	str	r5, [r4, #48]	@ 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800849c:	2502      	movs	r5, #2
 800849e:	f884 5051 	strb.w	r5, [r4, #81]	@ 0x51
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80084a2:	ad04      	add	r5, sp, #16
 80084a4:	9501      	str	r5, [sp, #4]
 80084a6:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 80084a8:	9402      	str	r4, [sp, #8]
 80084aa:	9500      	str	r5, [sp, #0]
 80084ac:	f7ff ff8e 	bl	80083cc <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 80084b0:	4620      	mov	r0, r4
 80084b2:	f7ff fe6b 	bl	800818c <prvAddNewTaskToReadyList>
	}
 80084b6:	9804      	ldr	r0, [sp, #16]
 80084b8:	b006      	add	sp, #24
 80084ba:	bd70      	pop	{r4, r5, r6, pc}

080084bc <xTaskCreate>:
	{
 80084bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80084c0:	4607      	mov	r7, r0
 80084c2:	b085      	sub	sp, #20
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80084c4:	0090      	lsls	r0, r2, #2
	{
 80084c6:	4688      	mov	r8, r1
 80084c8:	4616      	mov	r6, r2
 80084ca:	4699      	mov	r9, r3
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80084cc:	f000 fca8 	bl	8008e20 <pvPortMalloc>
			if( pxStack != NULL )
 80084d0:	4605      	mov	r5, r0
 80084d2:	b920      	cbnz	r0, 80084de <xTaskCreate+0x22>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80084d4:	f04f 30ff 	mov.w	r0, #4294967295
	}
 80084d8:	b005      	add	sp, #20
 80084da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80084de:	2054      	movs	r0, #84	@ 0x54
 80084e0:	f000 fc9e 	bl	8008e20 <pvPortMalloc>
				if( pxNewTCB != NULL )
 80084e4:	4604      	mov	r4, r0
 80084e6:	b198      	cbz	r0, 8008510 <xTaskCreate+0x54>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80084e8:	2300      	movs	r3, #0
 80084ea:	f880 3051 	strb.w	r3, [r0, #81]	@ 0x51
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80084ee:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
					pxNewTCB->pxStack = pxStack;
 80084f0:	6305      	str	r5, [r0, #48]	@ 0x30
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80084f2:	9301      	str	r3, [sp, #4]
 80084f4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80084f6:	9002      	str	r0, [sp, #8]
 80084f8:	9300      	str	r3, [sp, #0]
 80084fa:	4632      	mov	r2, r6
 80084fc:	464b      	mov	r3, r9
 80084fe:	4641      	mov	r1, r8
 8008500:	4638      	mov	r0, r7
 8008502:	f7ff ff63 	bl	80083cc <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008506:	4620      	mov	r0, r4
 8008508:	f7ff fe40 	bl	800818c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800850c:	2001      	movs	r0, #1
 800850e:	e7e3      	b.n	80084d8 <xTaskCreate+0x1c>
					vPortFree( pxStack );
 8008510:	4628      	mov	r0, r5
 8008512:	f000 fd17 	bl	8008f44 <vPortFree>
		if( pxNewTCB != NULL )
 8008516:	e7dd      	b.n	80084d4 <xTaskCreate+0x18>

08008518 <vTaskStartScheduler>:
{
 8008518:	b510      	push	{r4, lr}
 800851a:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800851c:	2400      	movs	r4, #0
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800851e:	aa07      	add	r2, sp, #28
 8008520:	a906      	add	r1, sp, #24
 8008522:	a805      	add	r0, sp, #20
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008524:	e9cd 4405 	strd	r4, r4, [sp, #20]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008528:	f7fa fc58 	bl	8002ddc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800852c:	9b05      	ldr	r3, [sp, #20]
 800852e:	9302      	str	r3, [sp, #8]
 8008530:	9b06      	ldr	r3, [sp, #24]
 8008532:	9a07      	ldr	r2, [sp, #28]
 8008534:	490f      	ldr	r1, [pc, #60]	@ (8008574 <vTaskStartScheduler+0x5c>)
 8008536:	4810      	ldr	r0, [pc, #64]	@ (8008578 <vTaskStartScheduler+0x60>)
 8008538:	e9cd 4300 	strd	r4, r3, [sp]
 800853c:	4623      	mov	r3, r4
 800853e:	f7ff ff86 	bl	800844e <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 8008542:	b1a8      	cbz	r0, 8008570 <vTaskStartScheduler+0x58>
 8008544:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008548:	f383 8811 	msr	BASEPRI, r3
 800854c:	f3bf 8f6f 	isb	sy
 8008550:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 8008554:	4b09      	ldr	r3, [pc, #36]	@ (800857c <vTaskStartScheduler+0x64>)
 8008556:	f04f 32ff 	mov.w	r2, #4294967295
 800855a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800855c:	4b08      	ldr	r3, [pc, #32]	@ (8008580 <vTaskStartScheduler+0x68>)
 800855e:	2201      	movs	r2, #1
 8008560:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8008562:	4b08      	ldr	r3, [pc, #32]	@ (8008584 <vTaskStartScheduler+0x6c>)
 8008564:	601c      	str	r4, [r3, #0]
}
 8008566:	b008      	add	sp, #32
 8008568:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if( xPortStartScheduler() != pdFALSE )
 800856c:	f000 bb82 	b.w	8008c74 <xPortStartScheduler>
}
 8008570:	b008      	add	sp, #32
 8008572:	bd10      	pop	{r4, pc}
 8008574:	0801033f 	.word	0x0801033f
 8008578:	0800836d 	.word	0x0800836d
 800857c:	200028fc 	.word	0x200028fc
 8008580:	20002910 	.word	0x20002910
 8008584:	20002918 	.word	0x20002918

08008588 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8008588:	4a02      	ldr	r2, [pc, #8]	@ (8008594 <vTaskSuspendAll+0xc>)
 800858a:	6813      	ldr	r3, [r2, #0]
 800858c:	3301      	adds	r3, #1
 800858e:	6013      	str	r3, [r2, #0]
}
 8008590:	4770      	bx	lr
 8008592:	bf00      	nop
 8008594:	200028f8 	.word	0x200028f8

08008598 <xTaskIncrementTick>:
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008598:	4b40      	ldr	r3, [pc, #256]	@ (800869c <xTaskIncrementTick+0x104>)
 800859a:	681b      	ldr	r3, [r3, #0]
{
 800859c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d174      	bne.n	800868e <xTaskIncrementTick+0xf6>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80085a4:	4b3e      	ldr	r3, [pc, #248]	@ (80086a0 <xTaskIncrementTick+0x108>)
 80085a6:	681c      	ldr	r4, [r3, #0]
 80085a8:	3401      	adds	r4, #1
		xTickCount = xConstTickCount;
 80085aa:	601c      	str	r4, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80085ac:	b9bc      	cbnz	r4, 80085de <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 80085ae:	4b3d      	ldr	r3, [pc, #244]	@ (80086a4 <xTaskIncrementTick+0x10c>)
 80085b0:	681a      	ldr	r2, [r3, #0]
 80085b2:	6812      	ldr	r2, [r2, #0]
 80085b4:	b142      	cbz	r2, 80085c8 <xTaskIncrementTick+0x30>
 80085b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085ba:	f383 8811 	msr	BASEPRI, r3
 80085be:	f3bf 8f6f 	isb	sy
 80085c2:	f3bf 8f4f 	dsb	sy
 80085c6:	e7fe      	b.n	80085c6 <xTaskIncrementTick+0x2e>
 80085c8:	4a37      	ldr	r2, [pc, #220]	@ (80086a8 <xTaskIncrementTick+0x110>)
 80085ca:	6819      	ldr	r1, [r3, #0]
 80085cc:	6810      	ldr	r0, [r2, #0]
 80085ce:	6018      	str	r0, [r3, #0]
 80085d0:	6011      	str	r1, [r2, #0]
 80085d2:	4a36      	ldr	r2, [pc, #216]	@ (80086ac <xTaskIncrementTick+0x114>)
 80085d4:	6813      	ldr	r3, [r2, #0]
 80085d6:	3301      	adds	r3, #1
 80085d8:	6013      	str	r3, [r2, #0]
 80085da:	f7ff fe99 	bl	8008310 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 80085de:	4d34      	ldr	r5, [pc, #208]	@ (80086b0 <xTaskIncrementTick+0x118>)
 80085e0:	4e34      	ldr	r6, [pc, #208]	@ (80086b4 <xTaskIncrementTick+0x11c>)
 80085e2:	682b      	ldr	r3, [r5, #0]
 80085e4:	4f34      	ldr	r7, [pc, #208]	@ (80086b8 <xTaskIncrementTick+0x120>)
 80085e6:	42a3      	cmp	r3, r4
BaseType_t xSwitchRequired = pdFALSE;
 80085e8:	f04f 0b00 	mov.w	fp, #0
		if( xConstTickCount >= xNextTaskUnblockTime )
 80085ec:	d911      	bls.n	8008612 <xTaskIncrementTick+0x7a>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80085ee:	683a      	ldr	r2, [r7, #0]
 80085f0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80085f2:	2114      	movs	r1, #20
 80085f4:	434a      	muls	r2, r1
 80085f6:	58b2      	ldr	r2, [r6, r2]
				xSwitchRequired = pdTRUE;
 80085f8:	2a02      	cmp	r2, #2
 80085fa:	bf28      	it	cs
 80085fc:	f04f 0b01 	movcs.w	fp, #1
		if( xYieldPending != pdFALSE )
 8008600:	4a2e      	ldr	r2, [pc, #184]	@ (80086bc <xTaskIncrementTick+0x124>)
 8008602:	6812      	ldr	r2, [r2, #0]
			xSwitchRequired = pdTRUE;
 8008604:	2a00      	cmp	r2, #0
}
 8008606:	bf0c      	ite	eq
 8008608:	4658      	moveq	r0, fp
 800860a:	2001      	movne	r0, #1
 800860c:	b003      	add	sp, #12
 800860e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008612:	f8df a090 	ldr.w	sl, [pc, #144]	@ 80086a4 <xTaskIncrementTick+0x10c>
					prvAddTaskToReadyList( pxTCB );
 8008616:	f8df 90ac 	ldr.w	r9, [pc, #172]	@ 80086c4 <xTaskIncrementTick+0x12c>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800861a:	f8da 2000 	ldr.w	r2, [sl]
 800861e:	6812      	ldr	r2, [r2, #0]
 8008620:	b91a      	cbnz	r2, 800862a <xTaskIncrementTick+0x92>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008622:	f04f 32ff 	mov.w	r2, #4294967295
 8008626:	602a      	str	r2, [r5, #0]
					break;
 8008628:	e7e1      	b.n	80085ee <xTaskIncrementTick+0x56>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800862a:	f8da 2000 	ldr.w	r2, [sl]
 800862e:	68d2      	ldr	r2, [r2, #12]
 8008630:	f8d2 800c 	ldr.w	r8, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008634:	f8d8 1004 	ldr.w	r1, [r8, #4]
					if( xConstTickCount < xItemValue )
 8008638:	428c      	cmp	r4, r1
 800863a:	d201      	bcs.n	8008640 <xTaskIncrementTick+0xa8>
						xNextTaskUnblockTime = xItemValue;
 800863c:	6029      	str	r1, [r5, #0]
						break;
 800863e:	e7d6      	b.n	80085ee <xTaskIncrementTick+0x56>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008640:	f108 0304 	add.w	r3, r8, #4
 8008644:	4618      	mov	r0, r3
 8008646:	9301      	str	r3, [sp, #4]
 8008648:	f7ff fa5f 	bl	8007b0a <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800864c:	f8d8 1028 	ldr.w	r1, [r8, #40]	@ 0x28
 8008650:	b119      	cbz	r1, 800865a <xTaskIncrementTick+0xc2>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008652:	f108 0018 	add.w	r0, r8, #24
 8008656:	f7ff fa58 	bl	8007b0a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800865a:	f8d8 002c 	ldr.w	r0, [r8, #44]	@ 0x2c
 800865e:	f8d9 3000 	ldr.w	r3, [r9]
 8008662:	2201      	movs	r2, #1
 8008664:	fa02 f100 	lsl.w	r1, r2, r0
 8008668:	4319      	orrs	r1, r3
 800866a:	f04f 0c14 	mov.w	ip, #20
 800866e:	f8c9 1000 	str.w	r1, [r9]
 8008672:	fb0c 6000 	mla	r0, ip, r0, r6
 8008676:	9901      	ldr	r1, [sp, #4]
 8008678:	f7ff fa25 	bl	8007ac6 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800867c:	6838      	ldr	r0, [r7, #0]
 800867e:	f8d8 102c 	ldr.w	r1, [r8, #44]	@ 0x2c
 8008682:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
							xSwitchRequired = pdTRUE;
 8008684:	4291      	cmp	r1, r2
 8008686:	bf28      	it	cs
 8008688:	f04f 0b01 	movcs.w	fp, #1
 800868c:	e7c5      	b.n	800861a <xTaskIncrementTick+0x82>
		++uxPendedTicks;
 800868e:	4a0c      	ldr	r2, [pc, #48]	@ (80086c0 <xTaskIncrementTick+0x128>)
 8008690:	6813      	ldr	r3, [r2, #0]
 8008692:	3301      	adds	r3, #1
 8008694:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 8008696:	f04f 0b00 	mov.w	fp, #0
 800869a:	e7b1      	b.n	8008600 <xTaskIncrementTick+0x68>
 800869c:	200028f8 	.word	0x200028f8
 80086a0:	20002918 	.word	0x20002918
 80086a4:	20002964 	.word	0x20002964
 80086a8:	20002960 	.word	0x20002960
 80086ac:	20002904 	.word	0x20002904
 80086b0:	200028fc 	.word	0x200028fc
 80086b4:	20002990 	.word	0x20002990
 80086b8:	20002a1c 	.word	0x20002a1c
 80086bc:	20002908 	.word	0x20002908
 80086c0:	2000290c 	.word	0x2000290c
 80086c4:	20002914 	.word	0x20002914

080086c8 <xTaskResumeAll>:
{
 80086c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( uxSchedulerSuspended );
 80086cc:	4c31      	ldr	r4, [pc, #196]	@ (8008794 <xTaskResumeAll+0xcc>)
 80086ce:	6823      	ldr	r3, [r4, #0]
 80086d0:	b943      	cbnz	r3, 80086e4 <xTaskResumeAll+0x1c>
 80086d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086d6:	f383 8811 	msr	BASEPRI, r3
 80086da:	f3bf 8f6f 	isb	sy
 80086de:	f3bf 8f4f 	dsb	sy
 80086e2:	e7fe      	b.n	80086e2 <xTaskResumeAll+0x1a>
	taskENTER_CRITICAL();
 80086e4:	f000 fa36 	bl	8008b54 <vPortEnterCritical>
		--uxSchedulerSuspended;
 80086e8:	6823      	ldr	r3, [r4, #0]
 80086ea:	3b01      	subs	r3, #1
 80086ec:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80086ee:	6824      	ldr	r4, [r4, #0]
 80086f0:	b12c      	cbz	r4, 80086fe <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 80086f2:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 80086f4:	f000 fa4e 	bl	8008b94 <vPortExitCritical>
}
 80086f8:	4620      	mov	r0, r4
 80086fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80086fe:	4b26      	ldr	r3, [pc, #152]	@ (8008798 <xTaskResumeAll+0xd0>)
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	2b00      	cmp	r3, #0
 8008704:	d0f5      	beq.n	80086f2 <xTaskResumeAll+0x2a>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008706:	4d25      	ldr	r5, [pc, #148]	@ (800879c <xTaskResumeAll+0xd4>)
					prvAddTaskToReadyList( pxTCB );
 8008708:	4e25      	ldr	r6, [pc, #148]	@ (80087a0 <xTaskResumeAll+0xd8>)
 800870a:	f8df 80a4 	ldr.w	r8, [pc, #164]	@ 80087b0 <xTaskResumeAll+0xe8>
 800870e:	e01f      	b.n	8008750 <xTaskResumeAll+0x88>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8008710:	68eb      	ldr	r3, [r5, #12]
 8008712:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008714:	f104 0904 	add.w	r9, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008718:	f104 0018 	add.w	r0, r4, #24
 800871c:	f7ff f9f5 	bl	8007b0a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008720:	4648      	mov	r0, r9
 8008722:	f7ff f9f2 	bl	8007b0a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008726:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8008728:	6831      	ldr	r1, [r6, #0]
 800872a:	2701      	movs	r7, #1
 800872c:	fa07 f302 	lsl.w	r3, r7, r2
 8008730:	2014      	movs	r0, #20
 8008732:	430b      	orrs	r3, r1
 8008734:	fb00 8002 	mla	r0, r0, r2, r8
 8008738:	4649      	mov	r1, r9
 800873a:	6033      	str	r3, [r6, #0]
 800873c:	f7ff f9c3 	bl	8007ac6 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008740:	4b18      	ldr	r3, [pc, #96]	@ (80087a4 <xTaskResumeAll+0xdc>)
 8008742:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008748:	429a      	cmp	r2, r3
 800874a:	d301      	bcc.n	8008750 <xTaskResumeAll+0x88>
						xYieldPending = pdTRUE;
 800874c:	4b16      	ldr	r3, [pc, #88]	@ (80087a8 <xTaskResumeAll+0xe0>)
 800874e:	601f      	str	r7, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008750:	682b      	ldr	r3, [r5, #0]
 8008752:	2b00      	cmp	r3, #0
 8008754:	d1dc      	bne.n	8008710 <xTaskResumeAll+0x48>
				if( pxTCB != NULL )
 8008756:	b10c      	cbz	r4, 800875c <xTaskResumeAll+0x94>
					prvResetNextTaskUnblockTime();
 8008758:	f7ff fdda 	bl	8008310 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800875c:	4d13      	ldr	r5, [pc, #76]	@ (80087ac <xTaskResumeAll+0xe4>)
 800875e:	682c      	ldr	r4, [r5, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8008760:	b144      	cbz	r4, 8008774 <xTaskResumeAll+0xac>
								xYieldPending = pdTRUE;
 8008762:	4e11      	ldr	r6, [pc, #68]	@ (80087a8 <xTaskResumeAll+0xe0>)
 8008764:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 8008766:	f7ff ff17 	bl	8008598 <xTaskIncrementTick>
 800876a:	b100      	cbz	r0, 800876e <xTaskResumeAll+0xa6>
								xYieldPending = pdTRUE;
 800876c:	6037      	str	r7, [r6, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800876e:	3c01      	subs	r4, #1
 8008770:	d1f9      	bne.n	8008766 <xTaskResumeAll+0x9e>
						uxPendedTicks = 0;
 8008772:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 8008774:	4b0c      	ldr	r3, [pc, #48]	@ (80087a8 <xTaskResumeAll+0xe0>)
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	2b00      	cmp	r3, #0
 800877a:	d0ba      	beq.n	80086f2 <xTaskResumeAll+0x2a>
					taskYIELD_IF_USING_PREEMPTION();
 800877c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8008780:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008784:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8008788:	f3bf 8f4f 	dsb	sy
 800878c:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8008790:	2401      	movs	r4, #1
 8008792:	e7af      	b.n	80086f4 <xTaskResumeAll+0x2c>
 8008794:	200028f8 	.word	0x200028f8
 8008798:	2000291c 	.word	0x2000291c
 800879c:	2000294c 	.word	0x2000294c
 80087a0:	20002914 	.word	0x20002914
 80087a4:	20002a1c 	.word	0x20002a1c
 80087a8:	20002908 	.word	0x20002908
 80087ac:	2000290c 	.word	0x2000290c
 80087b0:	20002990 	.word	0x20002990

080087b4 <vTaskDelay>:
	{
 80087b4:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 80087b6:	b950      	cbnz	r0, 80087ce <vTaskDelay+0x1a>
			portYIELD_WITHIN_API();
 80087b8:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80087bc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80087c0:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80087c4:	f3bf 8f4f 	dsb	sy
 80087c8:	f3bf 8f6f 	isb	sy
	}
 80087cc:	bd08      	pop	{r3, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 80087ce:	4b0a      	ldr	r3, [pc, #40]	@ (80087f8 <vTaskDelay+0x44>)
 80087d0:	6819      	ldr	r1, [r3, #0]
 80087d2:	b141      	cbz	r1, 80087e6 <vTaskDelay+0x32>
 80087d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087d8:	f383 8811 	msr	BASEPRI, r3
 80087dc:	f3bf 8f6f 	isb	sy
 80087e0:	f3bf 8f4f 	dsb	sy
 80087e4:	e7fe      	b.n	80087e4 <vTaskDelay+0x30>
			vTaskSuspendAll();
 80087e6:	f7ff fecf 	bl	8008588 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80087ea:	f7ff fd4d 	bl	8008288 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 80087ee:	f7ff ff6b 	bl	80086c8 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 80087f2:	2800      	cmp	r0, #0
 80087f4:	d0e0      	beq.n	80087b8 <vTaskDelay+0x4>
 80087f6:	e7e9      	b.n	80087cc <vTaskDelay+0x18>
 80087f8:	200028f8 	.word	0x200028f8

080087fc <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80087fc:	4b17      	ldr	r3, [pc, #92]	@ (800885c <vTaskSwitchContext+0x60>)
 80087fe:	681a      	ldr	r2, [r3, #0]
 8008800:	4b17      	ldr	r3, [pc, #92]	@ (8008860 <vTaskSwitchContext+0x64>)
{
 8008802:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008804:	b112      	cbz	r2, 800880c <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 8008806:	2201      	movs	r2, #1
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8008808:	601a      	str	r2, [r3, #0]
}
 800880a:	bd10      	pop	{r4, pc}
		xYieldPending = pdFALSE;
 800880c:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800880e:	4b15      	ldr	r3, [pc, #84]	@ (8008864 <vTaskSwitchContext+0x68>)
 8008810:	681a      	ldr	r2, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8008812:	fab2 f282 	clz	r2, r2
 8008816:	b2d2      	uxtb	r2, r2
 8008818:	f1c2 021f 	rsb	r2, r2, #31
 800881c:	2314      	movs	r3, #20
 800881e:	4912      	ldr	r1, [pc, #72]	@ (8008868 <vTaskSwitchContext+0x6c>)
 8008820:	4353      	muls	r3, r2
 8008822:	18c8      	adds	r0, r1, r3
 8008824:	58cc      	ldr	r4, [r1, r3]
 8008826:	b944      	cbnz	r4, 800883a <vTaskSwitchContext+0x3e>
	__asm volatile
 8008828:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800882c:	f383 8811 	msr	BASEPRI, r3
 8008830:	f3bf 8f6f 	isb	sy
 8008834:	f3bf 8f4f 	dsb	sy
 8008838:	e7fe      	b.n	8008838 <vTaskSwitchContext+0x3c>
 800883a:	6844      	ldr	r4, [r0, #4]
 800883c:	3308      	adds	r3, #8
 800883e:	6864      	ldr	r4, [r4, #4]
 8008840:	6044      	str	r4, [r0, #4]
 8008842:	440b      	add	r3, r1
 8008844:	429c      	cmp	r4, r3
 8008846:	bf04      	itt	eq
 8008848:	6863      	ldreq	r3, [r4, #4]
 800884a:	6043      	streq	r3, [r0, #4]
 800884c:	2314      	movs	r3, #20
 800884e:	fb03 1102 	mla	r1, r3, r2, r1
 8008852:	684b      	ldr	r3, [r1, #4]
 8008854:	68da      	ldr	r2, [r3, #12]
 8008856:	4b05      	ldr	r3, [pc, #20]	@ (800886c <vTaskSwitchContext+0x70>)
 8008858:	e7d6      	b.n	8008808 <vTaskSwitchContext+0xc>
 800885a:	bf00      	nop
 800885c:	200028f8 	.word	0x200028f8
 8008860:	20002908 	.word	0x20002908
 8008864:	20002914 	.word	0x20002914
 8008868:	20002990 	.word	0x20002990
 800886c:	20002a1c 	.word	0x20002a1c

08008870 <vTaskPlaceOnEventList>:
{
 8008870:	b510      	push	{r4, lr}
 8008872:	460c      	mov	r4, r1
	configASSERT( pxEventList );
 8008874:	b940      	cbnz	r0, 8008888 <vTaskPlaceOnEventList+0x18>
 8008876:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800887a:	f383 8811 	msr	BASEPRI, r3
 800887e:	f3bf 8f6f 	isb	sy
 8008882:	f3bf 8f4f 	dsb	sy
 8008886:	e7fe      	b.n	8008886 <vTaskPlaceOnEventList+0x16>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008888:	4b05      	ldr	r3, [pc, #20]	@ (80088a0 <vTaskPlaceOnEventList+0x30>)
 800888a:	6819      	ldr	r1, [r3, #0]
 800888c:	3118      	adds	r1, #24
 800888e:	f7ff f925 	bl	8007adc <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008892:	4620      	mov	r0, r4
 8008894:	2101      	movs	r1, #1
}
 8008896:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800889a:	f7ff bcf5 	b.w	8008288 <prvAddCurrentTaskToDelayedList>
 800889e:	bf00      	nop
 80088a0:	20002a1c 	.word	0x20002a1c

080088a4 <xTaskRemoveFromEventList>:
{
 80088a4:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80088a6:	68c3      	ldr	r3, [r0, #12]
 80088a8:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 80088aa:	b944      	cbnz	r4, 80088be <xTaskRemoveFromEventList+0x1a>
 80088ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088b0:	f383 8811 	msr	BASEPRI, r3
 80088b4:	f3bf 8f6f 	isb	sy
 80088b8:	f3bf 8f4f 	dsb	sy
 80088bc:	e7fe      	b.n	80088bc <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80088be:	f104 0518 	add.w	r5, r4, #24
 80088c2:	4628      	mov	r0, r5
 80088c4:	f7ff f921 	bl	8007b0a <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80088c8:	4b11      	ldr	r3, [pc, #68]	@ (8008910 <xTaskRemoveFromEventList+0x6c>)
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	b9e3      	cbnz	r3, 8008908 <xTaskRemoveFromEventList+0x64>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80088ce:	1d25      	adds	r5, r4, #4
 80088d0:	4628      	mov	r0, r5
 80088d2:	f7ff f91a 	bl	8007b0a <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80088d6:	490f      	ldr	r1, [pc, #60]	@ (8008914 <xTaskRemoveFromEventList+0x70>)
 80088d8:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80088da:	6808      	ldr	r0, [r1, #0]
 80088dc:	2301      	movs	r3, #1
 80088de:	4093      	lsls	r3, r2
 80088e0:	4303      	orrs	r3, r0
 80088e2:	600b      	str	r3, [r1, #0]
 80088e4:	4b0c      	ldr	r3, [pc, #48]	@ (8008918 <xTaskRemoveFromEventList+0x74>)
 80088e6:	2014      	movs	r0, #20
 80088e8:	4629      	mov	r1, r5
 80088ea:	fb00 3002 	mla	r0, r0, r2, r3
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80088ee:	f7ff f8ea 	bl	8007ac6 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80088f2:	4b0a      	ldr	r3, [pc, #40]	@ (800891c <xTaskRemoveFromEventList+0x78>)
 80088f4:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088fa:	429a      	cmp	r2, r3
		xYieldPending = pdTRUE;
 80088fc:	bf83      	ittte	hi
 80088fe:	4b08      	ldrhi	r3, [pc, #32]	@ (8008920 <xTaskRemoveFromEventList+0x7c>)
 8008900:	2001      	movhi	r0, #1
 8008902:	6018      	strhi	r0, [r3, #0]
		xReturn = pdFALSE;
 8008904:	2000      	movls	r0, #0
}
 8008906:	bd38      	pop	{r3, r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008908:	4806      	ldr	r0, [pc, #24]	@ (8008924 <xTaskRemoveFromEventList+0x80>)
 800890a:	4629      	mov	r1, r5
 800890c:	e7ef      	b.n	80088ee <xTaskRemoveFromEventList+0x4a>
 800890e:	bf00      	nop
 8008910:	200028f8 	.word	0x200028f8
 8008914:	20002914 	.word	0x20002914
 8008918:	20002990 	.word	0x20002990
 800891c:	20002a1c 	.word	0x20002a1c
 8008920:	20002908 	.word	0x20002908
 8008924:	2000294c 	.word	0x2000294c

08008928 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008928:	4b03      	ldr	r3, [pc, #12]	@ (8008938 <vTaskInternalSetTimeOutState+0x10>)
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800892e:	4b03      	ldr	r3, [pc, #12]	@ (800893c <vTaskInternalSetTimeOutState+0x14>)
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	6043      	str	r3, [r0, #4]
}
 8008934:	4770      	bx	lr
 8008936:	bf00      	nop
 8008938:	20002904 	.word	0x20002904
 800893c:	20002918 	.word	0x20002918

08008940 <xTaskCheckForTimeOut>:
{
 8008940:	b570      	push	{r4, r5, r6, lr}
 8008942:	460c      	mov	r4, r1
	configASSERT( pxTimeOut );
 8008944:	4605      	mov	r5, r0
 8008946:	b940      	cbnz	r0, 800895a <xTaskCheckForTimeOut+0x1a>
 8008948:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800894c:	f383 8811 	msr	BASEPRI, r3
 8008950:	f3bf 8f6f 	isb	sy
 8008954:	f3bf 8f4f 	dsb	sy
 8008958:	e7fe      	b.n	8008958 <xTaskCheckForTimeOut+0x18>
	configASSERT( pxTicksToWait );
 800895a:	b941      	cbnz	r1, 800896e <xTaskCheckForTimeOut+0x2e>
 800895c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008960:	f383 8811 	msr	BASEPRI, r3
 8008964:	f3bf 8f6f 	isb	sy
 8008968:	f3bf 8f4f 	dsb	sy
 800896c:	e7fe      	b.n	800896c <xTaskCheckForTimeOut+0x2c>
	taskENTER_CRITICAL();
 800896e:	f000 f8f1 	bl	8008b54 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 8008972:	4b0f      	ldr	r3, [pc, #60]	@ (80089b0 <xTaskCheckForTimeOut+0x70>)
 8008974:	6819      	ldr	r1, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 8008976:	6823      	ldr	r3, [r4, #0]
 8008978:	1c5a      	adds	r2, r3, #1
 800897a:	d010      	beq.n	800899e <xTaskCheckForTimeOut+0x5e>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800897c:	480d      	ldr	r0, [pc, #52]	@ (80089b4 <xTaskCheckForTimeOut+0x74>)
 800897e:	682e      	ldr	r6, [r5, #0]
 8008980:	6800      	ldr	r0, [r0, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008982:	686a      	ldr	r2, [r5, #4]
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008984:	4286      	cmp	r6, r0
 8008986:	d001      	beq.n	800898c <xTaskCheckForTimeOut+0x4c>
 8008988:	428a      	cmp	r2, r1
 800898a:	d90f      	bls.n	80089ac <xTaskCheckForTimeOut+0x6c>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800898c:	1a88      	subs	r0, r1, r2
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800898e:	4283      	cmp	r3, r0
 8008990:	d90a      	bls.n	80089a8 <xTaskCheckForTimeOut+0x68>
			*pxTicksToWait -= xElapsedTime;
 8008992:	1a5b      	subs	r3, r3, r1
 8008994:	4413      	add	r3, r2
 8008996:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008998:	4628      	mov	r0, r5
 800899a:	f7ff ffc5 	bl	8008928 <vTaskInternalSetTimeOutState>
				xReturn = pdFALSE;
 800899e:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 80089a0:	f000 f8f8 	bl	8008b94 <vPortExitCritical>
}
 80089a4:	4620      	mov	r0, r4
 80089a6:	bd70      	pop	{r4, r5, r6, pc}
			*pxTicksToWait = 0;
 80089a8:	2300      	movs	r3, #0
 80089aa:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 80089ac:	2401      	movs	r4, #1
 80089ae:	e7f7      	b.n	80089a0 <xTaskCheckForTimeOut+0x60>
 80089b0:	20002918 	.word	0x20002918
 80089b4:	20002904 	.word	0x20002904

080089b8 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 80089b8:	4b01      	ldr	r3, [pc, #4]	@ (80089c0 <vTaskMissedYield+0x8>)
 80089ba:	2201      	movs	r2, #1
 80089bc:	601a      	str	r2, [r3, #0]
}
 80089be:	4770      	bx	lr
 80089c0:	20002908 	.word	0x20002908

080089c4 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 80089c4:	4b05      	ldr	r3, [pc, #20]	@ (80089dc <xTaskGetSchedulerState+0x18>)
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	b133      	cbz	r3, 80089d8 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80089ca:	4b05      	ldr	r3, [pc, #20]	@ (80089e0 <xTaskGetSchedulerState+0x1c>)
 80089cc:	6818      	ldr	r0, [r3, #0]
 80089ce:	fab0 f080 	clz	r0, r0
 80089d2:	0940      	lsrs	r0, r0, #5
 80089d4:	0040      	lsls	r0, r0, #1
 80089d6:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 80089d8:	2001      	movs	r0, #1
	}
 80089da:	4770      	bx	lr
 80089dc:	20002910 	.word	0x20002910
 80089e0:	200028f8 	.word	0x200028f8

080089e4 <xTaskPriorityDisinherit>:
	{
 80089e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if( pxMutexHolder != NULL )
 80089e6:	4604      	mov	r4, r0
 80089e8:	b908      	cbnz	r0, 80089ee <xTaskPriorityDisinherit+0xa>
	BaseType_t xReturn = pdFALSE;
 80089ea:	2000      	movs	r0, #0
	}
 80089ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			configASSERT( pxTCB == pxCurrentTCB );
 80089ee:	4b22      	ldr	r3, [pc, #136]	@ (8008a78 <xTaskPriorityDisinherit+0x94>)
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	4283      	cmp	r3, r0
 80089f4:	d008      	beq.n	8008a08 <xTaskPriorityDisinherit+0x24>
 80089f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089fa:	f383 8811 	msr	BASEPRI, r3
 80089fe:	f3bf 8f6f 	isb	sy
 8008a02:	f3bf 8f4f 	dsb	sy
 8008a06:	e7fe      	b.n	8008a06 <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 8008a08:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008a0a:	b943      	cbnz	r3, 8008a1e <xTaskPriorityDisinherit+0x3a>
 8008a0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a10:	f383 8811 	msr	BASEPRI, r3
 8008a14:	f3bf 8f6f 	isb	sy
 8008a18:	f3bf 8f4f 	dsb	sy
 8008a1c:	e7fe      	b.n	8008a1c <xTaskPriorityDisinherit+0x38>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008a1e:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8008a20:	6c42      	ldr	r2, [r0, #68]	@ 0x44
			( pxTCB->uxMutexesHeld )--;
 8008a22:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008a24:	4291      	cmp	r1, r2
			( pxTCB->uxMutexesHeld )--;
 8008a26:	6483      	str	r3, [r0, #72]	@ 0x48
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008a28:	d0df      	beq.n	80089ea <xTaskPriorityDisinherit+0x6>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d1dd      	bne.n	80089ea <xTaskPriorityDisinherit+0x6>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008a2e:	1d06      	adds	r6, r0, #4
 8008a30:	4630      	mov	r0, r6
 8008a32:	f7ff f86a 	bl	8007b0a <uxListRemove>
 8008a36:	4f11      	ldr	r7, [pc, #68]	@ (8008a7c <xTaskPriorityDisinherit+0x98>)
 8008a38:	4a11      	ldr	r2, [pc, #68]	@ (8008a80 <xTaskPriorityDisinherit+0x9c>)
 8008a3a:	b950      	cbnz	r0, 8008a52 <xTaskPriorityDisinherit+0x6e>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8008a3c:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8008a3e:	2314      	movs	r3, #20
 8008a40:	434b      	muls	r3, r1
 8008a42:	58fb      	ldr	r3, [r7, r3]
 8008a44:	b92b      	cbnz	r3, 8008a52 <xTaskPriorityDisinherit+0x6e>
 8008a46:	6813      	ldr	r3, [r2, #0]
 8008a48:	2501      	movs	r5, #1
 8008a4a:	408d      	lsls	r5, r1
 8008a4c:	ea23 0305 	bic.w	r3, r3, r5
 8008a50:	6013      	str	r3, [r2, #0]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008a52:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8008a54:	62e3      	str	r3, [r4, #44]	@ 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008a56:	f1c3 0107 	rsb	r1, r3, #7
 8008a5a:	61a1      	str	r1, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 8008a5c:	6811      	ldr	r1, [r2, #0]
 8008a5e:	2401      	movs	r4, #1
 8008a60:	fa04 f503 	lsl.w	r5, r4, r3
 8008a64:	2014      	movs	r0, #20
 8008a66:	430d      	orrs	r5, r1
 8008a68:	fb00 7003 	mla	r0, r0, r3, r7
 8008a6c:	4631      	mov	r1, r6
 8008a6e:	6015      	str	r5, [r2, #0]
 8008a70:	f7ff f829 	bl	8007ac6 <vListInsertEnd>
					xReturn = pdTRUE;
 8008a74:	4620      	mov	r0, r4
		return xReturn;
 8008a76:	e7b9      	b.n	80089ec <xTaskPriorityDisinherit+0x8>
 8008a78:	20002a1c 	.word	0x20002a1c
 8008a7c:	20002990 	.word	0x20002990
 8008a80:	20002914 	.word	0x20002914

08008a84 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008a84:	4808      	ldr	r0, [pc, #32]	@ (8008aa8 <prvPortStartFirstTask+0x24>)
 8008a86:	6800      	ldr	r0, [r0, #0]
 8008a88:	6800      	ldr	r0, [r0, #0]
 8008a8a:	f380 8808 	msr	MSP, r0
 8008a8e:	f04f 0000 	mov.w	r0, #0
 8008a92:	f380 8814 	msr	CONTROL, r0
 8008a96:	b662      	cpsie	i
 8008a98:	b661      	cpsie	f
 8008a9a:	f3bf 8f4f 	dsb	sy
 8008a9e:	f3bf 8f6f 	isb	sy
 8008aa2:	df00      	svc	0
 8008aa4:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008aa6:	0000      	.short	0x0000
 8008aa8:	e000ed08 	.word	0xe000ed08

08008aac <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008aac:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8008abc <vPortEnableVFP+0x10>
 8008ab0:	6801      	ldr	r1, [r0, #0]
 8008ab2:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8008ab6:	6001      	str	r1, [r0, #0]
 8008ab8:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008aba:	0000      	.short	0x0000
 8008abc:	e000ed88 	.word	0xe000ed88

08008ac0 <prvTaskExitError>:
{
 8008ac0:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 8008ac2:	2300      	movs	r3, #0
 8008ac4:	9301      	str	r3, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
 8008ac6:	4b0d      	ldr	r3, [pc, #52]	@ (8008afc <prvTaskExitError+0x3c>)
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	3301      	adds	r3, #1
 8008acc:	d008      	beq.n	8008ae0 <prvTaskExitError+0x20>
 8008ace:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ad2:	f383 8811 	msr	BASEPRI, r3
 8008ad6:	f3bf 8f6f 	isb	sy
 8008ada:	f3bf 8f4f 	dsb	sy
 8008ade:	e7fe      	b.n	8008ade <prvTaskExitError+0x1e>
 8008ae0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ae4:	f383 8811 	msr	BASEPRI, r3
 8008ae8:	f3bf 8f6f 	isb	sy
 8008aec:	f3bf 8f4f 	dsb	sy
	while( ulDummy == 0 )
 8008af0:	9b01      	ldr	r3, [sp, #4]
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d0fc      	beq.n	8008af0 <prvTaskExitError+0x30>
}
 8008af6:	b002      	add	sp, #8
 8008af8:	4770      	bx	lr
 8008afa:	bf00      	nop
 8008afc:	20000018 	.word	0x20000018

08008b00 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008b00:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8008b04:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008b08:	4b07      	ldr	r3, [pc, #28]	@ (8008b28 <pxPortInitialiseStack+0x28>)
 8008b0a:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008b0e:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008b12:	f06f 0302 	mvn.w	r3, #2
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008b16:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008b1a:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008b1e:	f840 3c24 	str.w	r3, [r0, #-36]
}
 8008b22:	3844      	subs	r0, #68	@ 0x44
 8008b24:	4770      	bx	lr
 8008b26:	bf00      	nop
 8008b28:	08008ac1 	.word	0x08008ac1
 8008b2c:	00000000 	.word	0x00000000

08008b30 <SVC_Handler>:
	__asm volatile (
 8008b30:	4b07      	ldr	r3, [pc, #28]	@ (8008b50 <pxCurrentTCBConst2>)
 8008b32:	6819      	ldr	r1, [r3, #0]
 8008b34:	6808      	ldr	r0, [r1, #0]
 8008b36:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b3a:	f380 8809 	msr	PSP, r0
 8008b3e:	f3bf 8f6f 	isb	sy
 8008b42:	f04f 0000 	mov.w	r0, #0
 8008b46:	f380 8811 	msr	BASEPRI, r0
 8008b4a:	4770      	bx	lr
 8008b4c:	f3af 8000 	nop.w

08008b50 <pxCurrentTCBConst2>:
 8008b50:	20002a1c 	.word	0x20002a1c

08008b54 <vPortEnterCritical>:
 8008b54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b58:	f383 8811 	msr	BASEPRI, r3
 8008b5c:	f3bf 8f6f 	isb	sy
 8008b60:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 8008b64:	4a0a      	ldr	r2, [pc, #40]	@ (8008b90 <vPortEnterCritical+0x3c>)
 8008b66:	6813      	ldr	r3, [r2, #0]
 8008b68:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 8008b6a:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 8008b6c:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 8008b6e:	d10e      	bne.n	8008b8e <vPortEnterCritical+0x3a>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008b70:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8008b74:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	@ 0xd04
 8008b78:	b2db      	uxtb	r3, r3
 8008b7a:	b143      	cbz	r3, 8008b8e <vPortEnterCritical+0x3a>
 8008b7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b80:	f383 8811 	msr	BASEPRI, r3
 8008b84:	f3bf 8f6f 	isb	sy
 8008b88:	f3bf 8f4f 	dsb	sy
 8008b8c:	e7fe      	b.n	8008b8c <vPortEnterCritical+0x38>
}
 8008b8e:	4770      	bx	lr
 8008b90:	20000018 	.word	0x20000018

08008b94 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8008b94:	4a08      	ldr	r2, [pc, #32]	@ (8008bb8 <vPortExitCritical+0x24>)
 8008b96:	6813      	ldr	r3, [r2, #0]
 8008b98:	b943      	cbnz	r3, 8008bac <vPortExitCritical+0x18>
 8008b9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b9e:	f383 8811 	msr	BASEPRI, r3
 8008ba2:	f3bf 8f6f 	isb	sy
 8008ba6:	f3bf 8f4f 	dsb	sy
 8008baa:	e7fe      	b.n	8008baa <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8008bac:	3b01      	subs	r3, #1
 8008bae:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008bb0:	b90b      	cbnz	r3, 8008bb6 <vPortExitCritical+0x22>
	__asm volatile
 8008bb2:	f383 8811 	msr	BASEPRI, r3
}
 8008bb6:	4770      	bx	lr
 8008bb8:	20000018 	.word	0x20000018
 8008bbc:	00000000 	.word	0x00000000

08008bc0 <PendSV_Handler>:
	__asm volatile
 8008bc0:	f3ef 8009 	mrs	r0, PSP
 8008bc4:	f3bf 8f6f 	isb	sy
 8008bc8:	4b15      	ldr	r3, [pc, #84]	@ (8008c20 <pxCurrentTCBConst>)
 8008bca:	681a      	ldr	r2, [r3, #0]
 8008bcc:	f01e 0f10 	tst.w	lr, #16
 8008bd0:	bf08      	it	eq
 8008bd2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008bd6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bda:	6010      	str	r0, [r2, #0]
 8008bdc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008be0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8008be4:	f380 8811 	msr	BASEPRI, r0
 8008be8:	f3bf 8f4f 	dsb	sy
 8008bec:	f3bf 8f6f 	isb	sy
 8008bf0:	f7ff fe04 	bl	80087fc <vTaskSwitchContext>
 8008bf4:	f04f 0000 	mov.w	r0, #0
 8008bf8:	f380 8811 	msr	BASEPRI, r0
 8008bfc:	bc09      	pop	{r0, r3}
 8008bfe:	6819      	ldr	r1, [r3, #0]
 8008c00:	6808      	ldr	r0, [r1, #0]
 8008c02:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c06:	f01e 0f10 	tst.w	lr, #16
 8008c0a:	bf08      	it	eq
 8008c0c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008c10:	f380 8809 	msr	PSP, r0
 8008c14:	f3bf 8f6f 	isb	sy
 8008c18:	4770      	bx	lr
 8008c1a:	bf00      	nop
 8008c1c:	f3af 8000 	nop.w

08008c20 <pxCurrentTCBConst>:
 8008c20:	20002a1c 	.word	0x20002a1c

08008c24 <SysTick_Handler>:
{
 8008c24:	b508      	push	{r3, lr}
	__asm volatile
 8008c26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c2a:	f383 8811 	msr	BASEPRI, r3
 8008c2e:	f3bf 8f6f 	isb	sy
 8008c32:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 8008c36:	f7ff fcaf 	bl	8008598 <xTaskIncrementTick>
 8008c3a:	b128      	cbz	r0, 8008c48 <SysTick_Handler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008c3c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8008c40:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008c44:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
	__asm volatile
 8008c48:	2300      	movs	r3, #0
 8008c4a:	f383 8811 	msr	BASEPRI, r3
}
 8008c4e:	bd08      	pop	{r3, pc}

08008c50 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008c50:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
 8008c54:	2300      	movs	r3, #0
 8008c56:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008c58:	6193      	str	r3, [r2, #24]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008c5a:	4b05      	ldr	r3, [pc, #20]	@ (8008c70 <vPortSetupTimerInterrupt+0x20>)
 8008c5c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	fbb3 f3f1 	udiv	r3, r3, r1
 8008c66:	3b01      	subs	r3, #1
 8008c68:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008c6a:	2307      	movs	r3, #7
 8008c6c:	6113      	str	r3, [r2, #16]
}
 8008c6e:	4770      	bx	lr
 8008c70:	2000000c 	.word	0x2000000c

08008c74 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008c74:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
{
 8008c78:	b537      	push	{r0, r1, r2, r4, r5, lr}
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008c7a:	f8d3 1d00 	ldr.w	r1, [r3, #3328]	@ 0xd00
 8008c7e:	4a38      	ldr	r2, [pc, #224]	@ (8008d60 <xPortStartScheduler+0xec>)
 8008c80:	4291      	cmp	r1, r2
 8008c82:	d108      	bne.n	8008c96 <xPortStartScheduler+0x22>
	__asm volatile
 8008c84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c88:	f383 8811 	msr	BASEPRI, r3
 8008c8c:	f3bf 8f6f 	isb	sy
 8008c90:	f3bf 8f4f 	dsb	sy
 8008c94:	e7fe      	b.n	8008c94 <xPortStartScheduler+0x20>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008c96:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 8008c9a:	4b32      	ldr	r3, [pc, #200]	@ (8008d64 <xPortStartScheduler+0xf0>)
 8008c9c:	429a      	cmp	r2, r3
 8008c9e:	d108      	bne.n	8008cb2 <xPortStartScheduler+0x3e>
 8008ca0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ca4:	f383 8811 	msr	BASEPRI, r3
 8008ca8:	f3bf 8f6f 	isb	sy
 8008cac:	f3bf 8f4f 	dsb	sy
 8008cb0:	e7fe      	b.n	8008cb0 <xPortStartScheduler+0x3c>
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008cb2:	4b2d      	ldr	r3, [pc, #180]	@ (8008d68 <xPortStartScheduler+0xf4>)
 8008cb4:	781a      	ldrb	r2, [r3, #0]
 8008cb6:	b2d2      	uxtb	r2, r2
 8008cb8:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008cba:	22ff      	movs	r2, #255	@ 0xff
 8008cbc:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008cbe:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008cc0:	4a2a      	ldr	r2, [pc, #168]	@ (8008d6c <xPortStartScheduler+0xf8>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008cc2:	b2db      	uxtb	r3, r3
 8008cc4:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008cc8:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8008ccc:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8008cd0:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008cd2:	4a27      	ldr	r2, [pc, #156]	@ (8008d70 <xPortStartScheduler+0xfc>)
 8008cd4:	2307      	movs	r3, #7
 8008cd6:	6013      	str	r3, [r2, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008cd8:	f89d 1003 	ldrb.w	r1, [sp, #3]
			ulMaxPRIGROUPValue--;
 8008cdc:	6813      	ldr	r3, [r2, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008cde:	0609      	lsls	r1, r1, #24
 8008ce0:	d40a      	bmi.n	8008cf8 <xPortStartScheduler+0x84>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008ce2:	2b03      	cmp	r3, #3
 8008ce4:	d011      	beq.n	8008d0a <xPortStartScheduler+0x96>
 8008ce6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008cea:	f383 8811 	msr	BASEPRI, r3
 8008cee:	f3bf 8f6f 	isb	sy
 8008cf2:	f3bf 8f4f 	dsb	sy
 8008cf6:	e7fe      	b.n	8008cf6 <xPortStartScheduler+0x82>
			ulMaxPRIGROUPValue--;
 8008cf8:	3b01      	subs	r3, #1
 8008cfa:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008cfc:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8008d00:	005b      	lsls	r3, r3, #1
 8008d02:	b2db      	uxtb	r3, r3
 8008d04:	f88d 3003 	strb.w	r3, [sp, #3]
 8008d08:	e7e6      	b.n	8008cd8 <xPortStartScheduler+0x64>
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008d0a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8008d0e:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008d10:	9b01      	ldr	r3, [sp, #4]
 8008d12:	4a15      	ldr	r2, [pc, #84]	@ (8008d68 <xPortStartScheduler+0xf4>)
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008d14:	f04f 24e0 	mov.w	r4, #3758153728	@ 0xe000e000
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008d18:	b2db      	uxtb	r3, r3
 8008d1a:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008d1c:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 8008d20:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8008d24:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008d28:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 8008d2c:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8008d30:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	vPortSetupTimerInterrupt();
 8008d34:	f7ff ff8c 	bl	8008c50 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8008d38:	4b0e      	ldr	r3, [pc, #56]	@ (8008d74 <xPortStartScheduler+0x100>)
 8008d3a:	2500      	movs	r5, #0
 8008d3c:	601d      	str	r5, [r3, #0]
	vPortEnableVFP();
 8008d3e:	f7ff feb5 	bl	8008aac <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008d42:	f8d4 3f34 	ldr.w	r3, [r4, #3892]	@ 0xf34
 8008d46:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8008d4a:	f8c4 3f34 	str.w	r3, [r4, #3892]	@ 0xf34
	prvPortStartFirstTask();
 8008d4e:	f7ff fe99 	bl	8008a84 <prvPortStartFirstTask>
	vTaskSwitchContext();
 8008d52:	f7ff fd53 	bl	80087fc <vTaskSwitchContext>
	prvTaskExitError();
 8008d56:	f7ff feb3 	bl	8008ac0 <prvTaskExitError>
}
 8008d5a:	4628      	mov	r0, r5
 8008d5c:	b003      	add	sp, #12
 8008d5e:	bd30      	pop	{r4, r5, pc}
 8008d60:	410fc271 	.word	0x410fc271
 8008d64:	410fc270 	.word	0x410fc270
 8008d68:	e000e400 	.word	0xe000e400
 8008d6c:	20002a24 	.word	0x20002a24
 8008d70:	20002a20 	.word	0x20002a20
 8008d74:	20000018 	.word	0x20000018

08008d78 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008d78:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008d7c:	2b0f      	cmp	r3, #15
 8008d7e:	d90e      	bls.n	8008d9e <vPortValidateInterruptPriority+0x26>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008d80:	4a11      	ldr	r2, [pc, #68]	@ (8008dc8 <vPortValidateInterruptPriority+0x50>)
 8008d82:	5c9b      	ldrb	r3, [r3, r2]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008d84:	4a11      	ldr	r2, [pc, #68]	@ (8008dcc <vPortValidateInterruptPriority+0x54>)
 8008d86:	7812      	ldrb	r2, [r2, #0]
 8008d88:	429a      	cmp	r2, r3
 8008d8a:	d908      	bls.n	8008d9e <vPortValidateInterruptPriority+0x26>
 8008d8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d90:	f383 8811 	msr	BASEPRI, r3
 8008d94:	f3bf 8f6f 	isb	sy
 8008d98:	f3bf 8f4f 	dsb	sy
 8008d9c:	e7fe      	b.n	8008d9c <vPortValidateInterruptPriority+0x24>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008d9e:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8008da2:	4a0b      	ldr	r2, [pc, #44]	@ (8008dd0 <vPortValidateInterruptPriority+0x58>)
 8008da4:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	@ 0xd0c
 8008da8:	6812      	ldr	r2, [r2, #0]
 8008daa:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008dae:	4293      	cmp	r3, r2
 8008db0:	d908      	bls.n	8008dc4 <vPortValidateInterruptPriority+0x4c>
 8008db2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008db6:	f383 8811 	msr	BASEPRI, r3
 8008dba:	f3bf 8f6f 	isb	sy
 8008dbe:	f3bf 8f4f 	dsb	sy
 8008dc2:	e7fe      	b.n	8008dc2 <vPortValidateInterruptPriority+0x4a>
	}
 8008dc4:	4770      	bx	lr
 8008dc6:	bf00      	nop
 8008dc8:	e000e3f0 	.word	0xe000e3f0
 8008dcc:	20002a24 	.word	0x20002a24
 8008dd0:	20002a20 	.word	0x20002a20

08008dd4 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008dd4:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008dd6:	4b10      	ldr	r3, [pc, #64]	@ (8008e18 <prvInsertBlockIntoFreeList+0x44>)
 8008dd8:	461a      	mov	r2, r3
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	4283      	cmp	r3, r0
 8008dde:	d3fb      	bcc.n	8008dd8 <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008de0:	6854      	ldr	r4, [r2, #4]
 8008de2:	1911      	adds	r1, r2, r4
 8008de4:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008de6:	bf01      	itttt	eq
 8008de8:	6841      	ldreq	r1, [r0, #4]
 8008dea:	4610      	moveq	r0, r2
 8008dec:	1909      	addeq	r1, r1, r4
 8008dee:	6051      	streq	r1, [r2, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008df0:	6844      	ldr	r4, [r0, #4]
 8008df2:	1901      	adds	r1, r0, r4
 8008df4:	428b      	cmp	r3, r1
 8008df6:	d10c      	bne.n	8008e12 <prvInsertBlockIntoFreeList+0x3e>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008df8:	4908      	ldr	r1, [pc, #32]	@ (8008e1c <prvInsertBlockIntoFreeList+0x48>)
 8008dfa:	6809      	ldr	r1, [r1, #0]
 8008dfc:	428b      	cmp	r3, r1
 8008dfe:	d003      	beq.n	8008e08 <prvInsertBlockIntoFreeList+0x34>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008e00:	6859      	ldr	r1, [r3, #4]
 8008e02:	4421      	add	r1, r4
 8008e04:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008e06:	6819      	ldr	r1, [r3, #0]
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008e08:	6001      	str	r1, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008e0a:	4290      	cmp	r0, r2
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008e0c:	bf18      	it	ne
 8008e0e:	6010      	strne	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008e10:	bd10      	pop	{r4, pc}
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008e12:	4619      	mov	r1, r3
 8008e14:	e7f8      	b.n	8008e08 <prvInsertBlockIntoFreeList+0x34>
 8008e16:	bf00      	nop
 8008e18:	20002a38 	.word	0x20002a38
 8008e1c:	20002a34 	.word	0x20002a34

08008e20 <pvPortMalloc>:
{
 8008e20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e24:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8008e26:	f7ff fbaf 	bl	8008588 <vTaskSuspendAll>
		if( pxEnd == NULL )
 8008e2a:	493f      	ldr	r1, [pc, #252]	@ (8008f28 <pvPortMalloc+0x108>)
 8008e2c:	4d3f      	ldr	r5, [pc, #252]	@ (8008f2c <pvPortMalloc+0x10c>)
 8008e2e:	680b      	ldr	r3, [r1, #0]
 8008e30:	b9fb      	cbnz	r3, 8008e72 <pvPortMalloc+0x52>
	uxAddress = ( size_t ) ucHeap;
 8008e32:	4a3f      	ldr	r2, [pc, #252]	@ (8008f30 <pvPortMalloc+0x110>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008e34:	0756      	lsls	r6, r2, #29
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008e36:	bf1c      	itt	ne
 8008e38:	3207      	addne	r2, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008e3a:	4b3e      	ldrne	r3, [pc, #248]	@ (8008f34 <pvPortMalloc+0x114>)
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008e3c:	4e3e      	ldr	r6, [pc, #248]	@ (8008f38 <pvPortMalloc+0x118>)
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008e3e:	bf1a      	itte	ne
 8008e40:	f022 0207 	bicne.w	r2, r2, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008e44:	1a9b      	subne	r3, r3, r2
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008e46:	f246 13a8 	movweq	r3, #25000	@ 0x61a8
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008e4a:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 8008e4c:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008e4e:	f023 0307 	bic.w	r3, r3, #7
	xStart.xBlockSize = ( size_t ) 0;
 8008e52:	2000      	movs	r0, #0
 8008e54:	6070      	str	r0, [r6, #4]
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008e56:	6032      	str	r2, [r6, #0]
	pxEnd->pxNextFreeBlock = NULL;
 8008e58:	e9c3 0000 	strd	r0, r0, [r3]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008e5c:	1a98      	subs	r0, r3, r2
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008e5e:	e9c2 3000 	strd	r3, r0, [r2]
	pxEnd = ( void * ) uxAddress;
 8008e62:	600b      	str	r3, [r1, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008e64:	4b35      	ldr	r3, [pc, #212]	@ (8008f3c <pvPortMalloc+0x11c>)
 8008e66:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008e68:	4b35      	ldr	r3, [pc, #212]	@ (8008f40 <pvPortMalloc+0x120>)
 8008e6a:	6018      	str	r0, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008e6c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8008e70:	602b      	str	r3, [r5, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008e72:	682e      	ldr	r6, [r5, #0]
 8008e74:	4226      	tst	r6, r4
 8008e76:	d152      	bne.n	8008f1e <pvPortMalloc+0xfe>
			if( xWantedSize > 0 )
 8008e78:	2c00      	cmp	r4, #0
 8008e7a:	d043      	beq.n	8008f04 <pvPortMalloc+0xe4>
				xWantedSize += xHeapStructSize;
 8008e7c:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008e80:	0760      	lsls	r0, r4, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008e82:	bf1c      	itt	ne
 8008e84:	f023 0307 	bicne.w	r3, r3, #7
 8008e88:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d047      	beq.n	8008f1e <pvPortMalloc+0xfe>
 8008e8e:	4f2c      	ldr	r7, [pc, #176]	@ (8008f40 <pvPortMalloc+0x120>)
 8008e90:	683c      	ldr	r4, [r7, #0]
 8008e92:	429c      	cmp	r4, r3
 8008e94:	d343      	bcc.n	8008f1e <pvPortMalloc+0xfe>
				pxBlock = xStart.pxNextFreeBlock;
 8008e96:	4a28      	ldr	r2, [pc, #160]	@ (8008f38 <pvPortMalloc+0x118>)
 8008e98:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008e9a:	6868      	ldr	r0, [r5, #4]
 8008e9c:	4298      	cmp	r0, r3
 8008e9e:	d204      	bcs.n	8008eaa <pvPortMalloc+0x8a>
 8008ea0:	f8d5 c000 	ldr.w	ip, [r5]
 8008ea4:	f1bc 0f00 	cmp.w	ip, #0
 8008ea8:	d115      	bne.n	8008ed6 <pvPortMalloc+0xb6>
				if( pxBlock != pxEnd )
 8008eaa:	6809      	ldr	r1, [r1, #0]
 8008eac:	42a9      	cmp	r1, r5
 8008eae:	d036      	beq.n	8008f1e <pvPortMalloc+0xfe>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008eb0:	6829      	ldr	r1, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008eb2:	f8d2 8000 	ldr.w	r8, [r2]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008eb6:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008eb8:	1ac2      	subs	r2, r0, r3
 8008eba:	2a10      	cmp	r2, #16
 8008ebc:	d912      	bls.n	8008ee4 <pvPortMalloc+0xc4>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008ebe:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008ec0:	0741      	lsls	r1, r0, #29
 8008ec2:	d00b      	beq.n	8008edc <pvPortMalloc+0xbc>
 8008ec4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ec8:	f383 8811 	msr	BASEPRI, r3
 8008ecc:	f3bf 8f6f 	isb	sy
 8008ed0:	f3bf 8f4f 	dsb	sy
 8008ed4:	e7fe      	b.n	8008ed4 <pvPortMalloc+0xb4>
 8008ed6:	462a      	mov	r2, r5
 8008ed8:	4665      	mov	r5, ip
 8008eda:	e7de      	b.n	8008e9a <pvPortMalloc+0x7a>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008edc:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008ede:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008ee0:	f7ff ff78 	bl	8008dd4 <prvInsertBlockIntoFreeList>
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008ee4:	4915      	ldr	r1, [pc, #84]	@ (8008f3c <pvPortMalloc+0x11c>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008ee6:	686a      	ldr	r2, [r5, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008ee8:	6808      	ldr	r0, [r1, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008eea:	1aa4      	subs	r4, r4, r2
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008eec:	4284      	cmp	r4, r0
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008eee:	ea46 0602 	orr.w	r6, r6, r2
					pxBlock->pxNextFreeBlock = NULL;
 8008ef2:	f04f 0300 	mov.w	r3, #0
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008ef6:	603c      	str	r4, [r7, #0]
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008ef8:	bf38      	it	cc
 8008efa:	600c      	strcc	r4, [r1, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008efc:	606e      	str	r6, [r5, #4]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008efe:	f108 0408 	add.w	r4, r8, #8
					pxBlock->pxNextFreeBlock = NULL;
 8008f02:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
 8008f04:	f7ff fbe0 	bl	80086c8 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008f08:	0763      	lsls	r3, r4, #29
 8008f0a:	d00a      	beq.n	8008f22 <pvPortMalloc+0x102>
 8008f0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f10:	f383 8811 	msr	BASEPRI, r3
 8008f14:	f3bf 8f6f 	isb	sy
 8008f18:	f3bf 8f4f 	dsb	sy
 8008f1c:	e7fe      	b.n	8008f1c <pvPortMalloc+0xfc>
void *pvReturn = NULL;
 8008f1e:	2400      	movs	r4, #0
 8008f20:	e7f0      	b.n	8008f04 <pvPortMalloc+0xe4>
}
 8008f22:	4620      	mov	r0, r4
 8008f24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f28:	20002a34 	.word	0x20002a34
 8008f2c:	20002a28 	.word	0x20002a28
 8008f30:	20002a40 	.word	0x20002a40
 8008f34:	20008be8 	.word	0x20008be8
 8008f38:	20002a38 	.word	0x20002a38
 8008f3c:	20002a2c 	.word	0x20002a2c
 8008f40:	20002a30 	.word	0x20002a30

08008f44 <vPortFree>:
{
 8008f44:	b510      	push	{r4, lr}
	if( pv != NULL )
 8008f46:	4604      	mov	r4, r0
 8008f48:	b370      	cbz	r0, 8008fa8 <vPortFree+0x64>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008f4a:	4a18      	ldr	r2, [pc, #96]	@ (8008fac <vPortFree+0x68>)
 8008f4c:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8008f50:	6812      	ldr	r2, [r2, #0]
 8008f52:	4213      	tst	r3, r2
 8008f54:	d108      	bne.n	8008f68 <vPortFree+0x24>
 8008f56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f5a:	f383 8811 	msr	BASEPRI, r3
 8008f5e:	f3bf 8f6f 	isb	sy
 8008f62:	f3bf 8f4f 	dsb	sy
 8008f66:	e7fe      	b.n	8008f66 <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008f68:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8008f6c:	b141      	cbz	r1, 8008f80 <vPortFree+0x3c>
 8008f6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f72:	f383 8811 	msr	BASEPRI, r3
 8008f76:	f3bf 8f6f 	isb	sy
 8008f7a:	f3bf 8f4f 	dsb	sy
 8008f7e:	e7fe      	b.n	8008f7e <vPortFree+0x3a>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008f80:	ea23 0302 	bic.w	r3, r3, r2
 8008f84:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 8008f88:	f7ff fafe 	bl	8008588 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008f8c:	4a08      	ldr	r2, [pc, #32]	@ (8008fb0 <vPortFree+0x6c>)
 8008f8e:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8008f92:	6811      	ldr	r1, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008f94:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008f98:	440b      	add	r3, r1
 8008f9a:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008f9c:	f7ff ff1a 	bl	8008dd4 <prvInsertBlockIntoFreeList>
}
 8008fa0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 8008fa4:	f7ff bb90 	b.w	80086c8 <xTaskResumeAll>
}
 8008fa8:	bd10      	pop	{r4, pc}
 8008faa:	bf00      	nop
 8008fac:	20002a28 	.word	0x20002a28
 8008fb0:	20002a30 	.word	0x20002a30

08008fb4 <atoi>:
 8008fb4:	220a      	movs	r2, #10
 8008fb6:	2100      	movs	r1, #0
 8008fb8:	f000 bf44 	b.w	8009e44 <strtol>

08008fbc <malloc>:
 8008fbc:	4b02      	ldr	r3, [pc, #8]	@ (8008fc8 <malloc+0xc>)
 8008fbe:	4601      	mov	r1, r0
 8008fc0:	6818      	ldr	r0, [r3, #0]
 8008fc2:	f000 b82d 	b.w	8009020 <_malloc_r>
 8008fc6:	bf00      	nop
 8008fc8:	2000019c 	.word	0x2000019c

08008fcc <free>:
 8008fcc:	4b02      	ldr	r3, [pc, #8]	@ (8008fd8 <free+0xc>)
 8008fce:	4601      	mov	r1, r0
 8008fd0:	6818      	ldr	r0, [r3, #0]
 8008fd2:	f003 bc31 	b.w	800c838 <_free_r>
 8008fd6:	bf00      	nop
 8008fd8:	2000019c 	.word	0x2000019c

08008fdc <sbrk_aligned>:
 8008fdc:	b570      	push	{r4, r5, r6, lr}
 8008fde:	4e0f      	ldr	r6, [pc, #60]	@ (800901c <sbrk_aligned+0x40>)
 8008fe0:	460c      	mov	r4, r1
 8008fe2:	6831      	ldr	r1, [r6, #0]
 8008fe4:	4605      	mov	r5, r0
 8008fe6:	b911      	cbnz	r1, 8008fee <sbrk_aligned+0x12>
 8008fe8:	f002 fd60 	bl	800baac <_sbrk_r>
 8008fec:	6030      	str	r0, [r6, #0]
 8008fee:	4621      	mov	r1, r4
 8008ff0:	4628      	mov	r0, r5
 8008ff2:	f002 fd5b 	bl	800baac <_sbrk_r>
 8008ff6:	1c43      	adds	r3, r0, #1
 8008ff8:	d103      	bne.n	8009002 <sbrk_aligned+0x26>
 8008ffa:	f04f 34ff 	mov.w	r4, #4294967295
 8008ffe:	4620      	mov	r0, r4
 8009000:	bd70      	pop	{r4, r5, r6, pc}
 8009002:	1cc4      	adds	r4, r0, #3
 8009004:	f024 0403 	bic.w	r4, r4, #3
 8009008:	42a0      	cmp	r0, r4
 800900a:	d0f8      	beq.n	8008ffe <sbrk_aligned+0x22>
 800900c:	1a21      	subs	r1, r4, r0
 800900e:	4628      	mov	r0, r5
 8009010:	f002 fd4c 	bl	800baac <_sbrk_r>
 8009014:	3001      	adds	r0, #1
 8009016:	d1f2      	bne.n	8008ffe <sbrk_aligned+0x22>
 8009018:	e7ef      	b.n	8008ffa <sbrk_aligned+0x1e>
 800901a:	bf00      	nop
 800901c:	20008be8 	.word	0x20008be8

08009020 <_malloc_r>:
 8009020:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009024:	1ccd      	adds	r5, r1, #3
 8009026:	f025 0503 	bic.w	r5, r5, #3
 800902a:	3508      	adds	r5, #8
 800902c:	2d0c      	cmp	r5, #12
 800902e:	bf38      	it	cc
 8009030:	250c      	movcc	r5, #12
 8009032:	2d00      	cmp	r5, #0
 8009034:	4606      	mov	r6, r0
 8009036:	db01      	blt.n	800903c <_malloc_r+0x1c>
 8009038:	42a9      	cmp	r1, r5
 800903a:	d904      	bls.n	8009046 <_malloc_r+0x26>
 800903c:	230c      	movs	r3, #12
 800903e:	6033      	str	r3, [r6, #0]
 8009040:	2000      	movs	r0, #0
 8009042:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009046:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800911c <_malloc_r+0xfc>
 800904a:	f000 f869 	bl	8009120 <__malloc_lock>
 800904e:	f8d8 3000 	ldr.w	r3, [r8]
 8009052:	461c      	mov	r4, r3
 8009054:	bb44      	cbnz	r4, 80090a8 <_malloc_r+0x88>
 8009056:	4629      	mov	r1, r5
 8009058:	4630      	mov	r0, r6
 800905a:	f7ff ffbf 	bl	8008fdc <sbrk_aligned>
 800905e:	1c43      	adds	r3, r0, #1
 8009060:	4604      	mov	r4, r0
 8009062:	d158      	bne.n	8009116 <_malloc_r+0xf6>
 8009064:	f8d8 4000 	ldr.w	r4, [r8]
 8009068:	4627      	mov	r7, r4
 800906a:	2f00      	cmp	r7, #0
 800906c:	d143      	bne.n	80090f6 <_malloc_r+0xd6>
 800906e:	2c00      	cmp	r4, #0
 8009070:	d04b      	beq.n	800910a <_malloc_r+0xea>
 8009072:	6823      	ldr	r3, [r4, #0]
 8009074:	4639      	mov	r1, r7
 8009076:	4630      	mov	r0, r6
 8009078:	eb04 0903 	add.w	r9, r4, r3
 800907c:	f002 fd16 	bl	800baac <_sbrk_r>
 8009080:	4581      	cmp	r9, r0
 8009082:	d142      	bne.n	800910a <_malloc_r+0xea>
 8009084:	6821      	ldr	r1, [r4, #0]
 8009086:	1a6d      	subs	r5, r5, r1
 8009088:	4629      	mov	r1, r5
 800908a:	4630      	mov	r0, r6
 800908c:	f7ff ffa6 	bl	8008fdc <sbrk_aligned>
 8009090:	3001      	adds	r0, #1
 8009092:	d03a      	beq.n	800910a <_malloc_r+0xea>
 8009094:	6823      	ldr	r3, [r4, #0]
 8009096:	442b      	add	r3, r5
 8009098:	6023      	str	r3, [r4, #0]
 800909a:	f8d8 3000 	ldr.w	r3, [r8]
 800909e:	685a      	ldr	r2, [r3, #4]
 80090a0:	bb62      	cbnz	r2, 80090fc <_malloc_r+0xdc>
 80090a2:	f8c8 7000 	str.w	r7, [r8]
 80090a6:	e00f      	b.n	80090c8 <_malloc_r+0xa8>
 80090a8:	6822      	ldr	r2, [r4, #0]
 80090aa:	1b52      	subs	r2, r2, r5
 80090ac:	d420      	bmi.n	80090f0 <_malloc_r+0xd0>
 80090ae:	2a0b      	cmp	r2, #11
 80090b0:	d917      	bls.n	80090e2 <_malloc_r+0xc2>
 80090b2:	1961      	adds	r1, r4, r5
 80090b4:	42a3      	cmp	r3, r4
 80090b6:	6025      	str	r5, [r4, #0]
 80090b8:	bf18      	it	ne
 80090ba:	6059      	strne	r1, [r3, #4]
 80090bc:	6863      	ldr	r3, [r4, #4]
 80090be:	bf08      	it	eq
 80090c0:	f8c8 1000 	streq.w	r1, [r8]
 80090c4:	5162      	str	r2, [r4, r5]
 80090c6:	604b      	str	r3, [r1, #4]
 80090c8:	4630      	mov	r0, r6
 80090ca:	f000 f82f 	bl	800912c <__malloc_unlock>
 80090ce:	f104 000b 	add.w	r0, r4, #11
 80090d2:	1d23      	adds	r3, r4, #4
 80090d4:	f020 0007 	bic.w	r0, r0, #7
 80090d8:	1ac2      	subs	r2, r0, r3
 80090da:	bf1c      	itt	ne
 80090dc:	1a1b      	subne	r3, r3, r0
 80090de:	50a3      	strne	r3, [r4, r2]
 80090e0:	e7af      	b.n	8009042 <_malloc_r+0x22>
 80090e2:	6862      	ldr	r2, [r4, #4]
 80090e4:	42a3      	cmp	r3, r4
 80090e6:	bf0c      	ite	eq
 80090e8:	f8c8 2000 	streq.w	r2, [r8]
 80090ec:	605a      	strne	r2, [r3, #4]
 80090ee:	e7eb      	b.n	80090c8 <_malloc_r+0xa8>
 80090f0:	4623      	mov	r3, r4
 80090f2:	6864      	ldr	r4, [r4, #4]
 80090f4:	e7ae      	b.n	8009054 <_malloc_r+0x34>
 80090f6:	463c      	mov	r4, r7
 80090f8:	687f      	ldr	r7, [r7, #4]
 80090fa:	e7b6      	b.n	800906a <_malloc_r+0x4a>
 80090fc:	461a      	mov	r2, r3
 80090fe:	685b      	ldr	r3, [r3, #4]
 8009100:	42a3      	cmp	r3, r4
 8009102:	d1fb      	bne.n	80090fc <_malloc_r+0xdc>
 8009104:	2300      	movs	r3, #0
 8009106:	6053      	str	r3, [r2, #4]
 8009108:	e7de      	b.n	80090c8 <_malloc_r+0xa8>
 800910a:	230c      	movs	r3, #12
 800910c:	6033      	str	r3, [r6, #0]
 800910e:	4630      	mov	r0, r6
 8009110:	f000 f80c 	bl	800912c <__malloc_unlock>
 8009114:	e794      	b.n	8009040 <_malloc_r+0x20>
 8009116:	6005      	str	r5, [r0, #0]
 8009118:	e7d6      	b.n	80090c8 <_malloc_r+0xa8>
 800911a:	bf00      	nop
 800911c:	20008bec 	.word	0x20008bec

08009120 <__malloc_lock>:
 8009120:	4801      	ldr	r0, [pc, #4]	@ (8009128 <__malloc_lock+0x8>)
 8009122:	f7fb bb70 	b.w	8004806 <__retarget_lock_acquire_recursive>
 8009126:	bf00      	nop
 8009128:	200028dc 	.word	0x200028dc

0800912c <__malloc_unlock>:
 800912c:	4801      	ldr	r0, [pc, #4]	@ (8009134 <__malloc_unlock+0x8>)
 800912e:	f7fb bb76 	b.w	800481e <__retarget_lock_release_recursive>
 8009132:	bf00      	nop
 8009134:	200028dc 	.word	0x200028dc

08009138 <sulp>:
 8009138:	b570      	push	{r4, r5, r6, lr}
 800913a:	4604      	mov	r4, r0
 800913c:	460d      	mov	r5, r1
 800913e:	ec45 4b10 	vmov	d0, r4, r5
 8009142:	4616      	mov	r6, r2
 8009144:	f004 fac6 	bl	800d6d4 <__ulp>
 8009148:	ec51 0b10 	vmov	r0, r1, d0
 800914c:	b17e      	cbz	r6, 800916e <sulp+0x36>
 800914e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8009152:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8009156:	2b00      	cmp	r3, #0
 8009158:	dd09      	ble.n	800916e <sulp+0x36>
 800915a:	051b      	lsls	r3, r3, #20
 800915c:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8009160:	2400      	movs	r4, #0
 8009162:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8009166:	4622      	mov	r2, r4
 8009168:	462b      	mov	r3, r5
 800916a:	f7f7 fa55 	bl	8000618 <__aeabi_dmul>
 800916e:	ec41 0b10 	vmov	d0, r0, r1
 8009172:	bd70      	pop	{r4, r5, r6, pc}
 8009174:	0000      	movs	r0, r0
	...

08009178 <_strtod_l>:
 8009178:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800917c:	b09f      	sub	sp, #124	@ 0x7c
 800917e:	460c      	mov	r4, r1
 8009180:	9217      	str	r2, [sp, #92]	@ 0x5c
 8009182:	2200      	movs	r2, #0
 8009184:	921a      	str	r2, [sp, #104]	@ 0x68
 8009186:	9005      	str	r0, [sp, #20]
 8009188:	f04f 0a00 	mov.w	sl, #0
 800918c:	f04f 0b00 	mov.w	fp, #0
 8009190:	460a      	mov	r2, r1
 8009192:	9219      	str	r2, [sp, #100]	@ 0x64
 8009194:	7811      	ldrb	r1, [r2, #0]
 8009196:	292b      	cmp	r1, #43	@ 0x2b
 8009198:	d04a      	beq.n	8009230 <_strtod_l+0xb8>
 800919a:	d838      	bhi.n	800920e <_strtod_l+0x96>
 800919c:	290d      	cmp	r1, #13
 800919e:	d832      	bhi.n	8009206 <_strtod_l+0x8e>
 80091a0:	2908      	cmp	r1, #8
 80091a2:	d832      	bhi.n	800920a <_strtod_l+0x92>
 80091a4:	2900      	cmp	r1, #0
 80091a6:	d03b      	beq.n	8009220 <_strtod_l+0xa8>
 80091a8:	2200      	movs	r2, #0
 80091aa:	920b      	str	r2, [sp, #44]	@ 0x2c
 80091ac:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 80091ae:	782a      	ldrb	r2, [r5, #0]
 80091b0:	2a30      	cmp	r2, #48	@ 0x30
 80091b2:	f040 80b3 	bne.w	800931c <_strtod_l+0x1a4>
 80091b6:	786a      	ldrb	r2, [r5, #1]
 80091b8:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80091bc:	2a58      	cmp	r2, #88	@ 0x58
 80091be:	d16e      	bne.n	800929e <_strtod_l+0x126>
 80091c0:	9302      	str	r3, [sp, #8]
 80091c2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80091c4:	9301      	str	r3, [sp, #4]
 80091c6:	ab1a      	add	r3, sp, #104	@ 0x68
 80091c8:	9300      	str	r3, [sp, #0]
 80091ca:	4a8e      	ldr	r2, [pc, #568]	@ (8009404 <_strtod_l+0x28c>)
 80091cc:	9805      	ldr	r0, [sp, #20]
 80091ce:	ab1b      	add	r3, sp, #108	@ 0x6c
 80091d0:	a919      	add	r1, sp, #100	@ 0x64
 80091d2:	f003 fbe3 	bl	800c99c <__gethex>
 80091d6:	f010 060f 	ands.w	r6, r0, #15
 80091da:	4604      	mov	r4, r0
 80091dc:	d005      	beq.n	80091ea <_strtod_l+0x72>
 80091de:	2e06      	cmp	r6, #6
 80091e0:	d128      	bne.n	8009234 <_strtod_l+0xbc>
 80091e2:	3501      	adds	r5, #1
 80091e4:	2300      	movs	r3, #0
 80091e6:	9519      	str	r5, [sp, #100]	@ 0x64
 80091e8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80091ea:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	f040 858e 	bne.w	8009d0e <_strtod_l+0xb96>
 80091f2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80091f4:	b1cb      	cbz	r3, 800922a <_strtod_l+0xb2>
 80091f6:	4652      	mov	r2, sl
 80091f8:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 80091fc:	ec43 2b10 	vmov	d0, r2, r3
 8009200:	b01f      	add	sp, #124	@ 0x7c
 8009202:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009206:	2920      	cmp	r1, #32
 8009208:	d1ce      	bne.n	80091a8 <_strtod_l+0x30>
 800920a:	3201      	adds	r2, #1
 800920c:	e7c1      	b.n	8009192 <_strtod_l+0x1a>
 800920e:	292d      	cmp	r1, #45	@ 0x2d
 8009210:	d1ca      	bne.n	80091a8 <_strtod_l+0x30>
 8009212:	2101      	movs	r1, #1
 8009214:	910b      	str	r1, [sp, #44]	@ 0x2c
 8009216:	1c51      	adds	r1, r2, #1
 8009218:	9119      	str	r1, [sp, #100]	@ 0x64
 800921a:	7852      	ldrb	r2, [r2, #1]
 800921c:	2a00      	cmp	r2, #0
 800921e:	d1c5      	bne.n	80091ac <_strtod_l+0x34>
 8009220:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009222:	9419      	str	r4, [sp, #100]	@ 0x64
 8009224:	2b00      	cmp	r3, #0
 8009226:	f040 8570 	bne.w	8009d0a <_strtod_l+0xb92>
 800922a:	4652      	mov	r2, sl
 800922c:	465b      	mov	r3, fp
 800922e:	e7e5      	b.n	80091fc <_strtod_l+0x84>
 8009230:	2100      	movs	r1, #0
 8009232:	e7ef      	b.n	8009214 <_strtod_l+0x9c>
 8009234:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8009236:	b13a      	cbz	r2, 8009248 <_strtod_l+0xd0>
 8009238:	2135      	movs	r1, #53	@ 0x35
 800923a:	a81c      	add	r0, sp, #112	@ 0x70
 800923c:	f004 fb44 	bl	800d8c8 <__copybits>
 8009240:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009242:	9805      	ldr	r0, [sp, #20]
 8009244:	f003 ff12 	bl	800d06c <_Bfree>
 8009248:	3e01      	subs	r6, #1
 800924a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800924c:	2e04      	cmp	r6, #4
 800924e:	d806      	bhi.n	800925e <_strtod_l+0xe6>
 8009250:	e8df f006 	tbb	[pc, r6]
 8009254:	201d0314 	.word	0x201d0314
 8009258:	14          	.byte	0x14
 8009259:	00          	.byte	0x00
 800925a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800925e:	05e1      	lsls	r1, r4, #23
 8009260:	bf48      	it	mi
 8009262:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8009266:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800926a:	0d1b      	lsrs	r3, r3, #20
 800926c:	051b      	lsls	r3, r3, #20
 800926e:	2b00      	cmp	r3, #0
 8009270:	d1bb      	bne.n	80091ea <_strtod_l+0x72>
 8009272:	f002 fc3d 	bl	800baf0 <__errno>
 8009276:	2322      	movs	r3, #34	@ 0x22
 8009278:	6003      	str	r3, [r0, #0]
 800927a:	e7b6      	b.n	80091ea <_strtod_l+0x72>
 800927c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8009280:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8009284:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8009288:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800928c:	e7e7      	b.n	800925e <_strtod_l+0xe6>
 800928e:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800940c <_strtod_l+0x294>
 8009292:	e7e4      	b.n	800925e <_strtod_l+0xe6>
 8009294:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8009298:	f04f 3aff 	mov.w	sl, #4294967295
 800929c:	e7df      	b.n	800925e <_strtod_l+0xe6>
 800929e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80092a0:	1c5a      	adds	r2, r3, #1
 80092a2:	9219      	str	r2, [sp, #100]	@ 0x64
 80092a4:	785b      	ldrb	r3, [r3, #1]
 80092a6:	2b30      	cmp	r3, #48	@ 0x30
 80092a8:	d0f9      	beq.n	800929e <_strtod_l+0x126>
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d09d      	beq.n	80091ea <_strtod_l+0x72>
 80092ae:	2301      	movs	r3, #1
 80092b0:	9309      	str	r3, [sp, #36]	@ 0x24
 80092b2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80092b4:	930c      	str	r3, [sp, #48]	@ 0x30
 80092b6:	2300      	movs	r3, #0
 80092b8:	9308      	str	r3, [sp, #32]
 80092ba:	930a      	str	r3, [sp, #40]	@ 0x28
 80092bc:	461f      	mov	r7, r3
 80092be:	220a      	movs	r2, #10
 80092c0:	9819      	ldr	r0, [sp, #100]	@ 0x64
 80092c2:	7805      	ldrb	r5, [r0, #0]
 80092c4:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 80092c8:	b2d9      	uxtb	r1, r3
 80092ca:	2909      	cmp	r1, #9
 80092cc:	d928      	bls.n	8009320 <_strtod_l+0x1a8>
 80092ce:	494e      	ldr	r1, [pc, #312]	@ (8009408 <_strtod_l+0x290>)
 80092d0:	2201      	movs	r2, #1
 80092d2:	f001 fe00 	bl	800aed6 <strncmp>
 80092d6:	2800      	cmp	r0, #0
 80092d8:	d032      	beq.n	8009340 <_strtod_l+0x1c8>
 80092da:	2000      	movs	r0, #0
 80092dc:	462a      	mov	r2, r5
 80092de:	4681      	mov	r9, r0
 80092e0:	463d      	mov	r5, r7
 80092e2:	4603      	mov	r3, r0
 80092e4:	2a65      	cmp	r2, #101	@ 0x65
 80092e6:	d001      	beq.n	80092ec <_strtod_l+0x174>
 80092e8:	2a45      	cmp	r2, #69	@ 0x45
 80092ea:	d114      	bne.n	8009316 <_strtod_l+0x19e>
 80092ec:	b91d      	cbnz	r5, 80092f6 <_strtod_l+0x17e>
 80092ee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80092f0:	4302      	orrs	r2, r0
 80092f2:	d095      	beq.n	8009220 <_strtod_l+0xa8>
 80092f4:	2500      	movs	r5, #0
 80092f6:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 80092f8:	1c62      	adds	r2, r4, #1
 80092fa:	9219      	str	r2, [sp, #100]	@ 0x64
 80092fc:	7862      	ldrb	r2, [r4, #1]
 80092fe:	2a2b      	cmp	r2, #43	@ 0x2b
 8009300:	d077      	beq.n	80093f2 <_strtod_l+0x27a>
 8009302:	2a2d      	cmp	r2, #45	@ 0x2d
 8009304:	d07b      	beq.n	80093fe <_strtod_l+0x286>
 8009306:	f04f 0c00 	mov.w	ip, #0
 800930a:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800930e:	2909      	cmp	r1, #9
 8009310:	f240 8082 	bls.w	8009418 <_strtod_l+0x2a0>
 8009314:	9419      	str	r4, [sp, #100]	@ 0x64
 8009316:	f04f 0800 	mov.w	r8, #0
 800931a:	e0a2      	b.n	8009462 <_strtod_l+0x2ea>
 800931c:	2300      	movs	r3, #0
 800931e:	e7c7      	b.n	80092b0 <_strtod_l+0x138>
 8009320:	2f08      	cmp	r7, #8
 8009322:	bfd5      	itete	le
 8009324:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8009326:	9908      	ldrgt	r1, [sp, #32]
 8009328:	fb02 3301 	mlale	r3, r2, r1, r3
 800932c:	fb02 3301 	mlagt	r3, r2, r1, r3
 8009330:	f100 0001 	add.w	r0, r0, #1
 8009334:	bfd4      	ite	le
 8009336:	930a      	strle	r3, [sp, #40]	@ 0x28
 8009338:	9308      	strgt	r3, [sp, #32]
 800933a:	3701      	adds	r7, #1
 800933c:	9019      	str	r0, [sp, #100]	@ 0x64
 800933e:	e7bf      	b.n	80092c0 <_strtod_l+0x148>
 8009340:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009342:	1c5a      	adds	r2, r3, #1
 8009344:	9219      	str	r2, [sp, #100]	@ 0x64
 8009346:	785a      	ldrb	r2, [r3, #1]
 8009348:	b37f      	cbz	r7, 80093aa <_strtod_l+0x232>
 800934a:	4681      	mov	r9, r0
 800934c:	463d      	mov	r5, r7
 800934e:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8009352:	2b09      	cmp	r3, #9
 8009354:	d912      	bls.n	800937c <_strtod_l+0x204>
 8009356:	2301      	movs	r3, #1
 8009358:	e7c4      	b.n	80092e4 <_strtod_l+0x16c>
 800935a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800935c:	1c5a      	adds	r2, r3, #1
 800935e:	9219      	str	r2, [sp, #100]	@ 0x64
 8009360:	785a      	ldrb	r2, [r3, #1]
 8009362:	3001      	adds	r0, #1
 8009364:	2a30      	cmp	r2, #48	@ 0x30
 8009366:	d0f8      	beq.n	800935a <_strtod_l+0x1e2>
 8009368:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800936c:	2b08      	cmp	r3, #8
 800936e:	f200 84d3 	bhi.w	8009d18 <_strtod_l+0xba0>
 8009372:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009374:	930c      	str	r3, [sp, #48]	@ 0x30
 8009376:	4681      	mov	r9, r0
 8009378:	2000      	movs	r0, #0
 800937a:	4605      	mov	r5, r0
 800937c:	3a30      	subs	r2, #48	@ 0x30
 800937e:	f100 0301 	add.w	r3, r0, #1
 8009382:	d02a      	beq.n	80093da <_strtod_l+0x262>
 8009384:	4499      	add	r9, r3
 8009386:	eb00 0c05 	add.w	ip, r0, r5
 800938a:	462b      	mov	r3, r5
 800938c:	210a      	movs	r1, #10
 800938e:	4563      	cmp	r3, ip
 8009390:	d10d      	bne.n	80093ae <_strtod_l+0x236>
 8009392:	1c69      	adds	r1, r5, #1
 8009394:	4401      	add	r1, r0
 8009396:	4428      	add	r0, r5
 8009398:	2808      	cmp	r0, #8
 800939a:	dc16      	bgt.n	80093ca <_strtod_l+0x252>
 800939c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800939e:	230a      	movs	r3, #10
 80093a0:	fb03 2300 	mla	r3, r3, r0, r2
 80093a4:	930a      	str	r3, [sp, #40]	@ 0x28
 80093a6:	2300      	movs	r3, #0
 80093a8:	e018      	b.n	80093dc <_strtod_l+0x264>
 80093aa:	4638      	mov	r0, r7
 80093ac:	e7da      	b.n	8009364 <_strtod_l+0x1ec>
 80093ae:	2b08      	cmp	r3, #8
 80093b0:	f103 0301 	add.w	r3, r3, #1
 80093b4:	dc03      	bgt.n	80093be <_strtod_l+0x246>
 80093b6:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 80093b8:	434e      	muls	r6, r1
 80093ba:	960a      	str	r6, [sp, #40]	@ 0x28
 80093bc:	e7e7      	b.n	800938e <_strtod_l+0x216>
 80093be:	2b10      	cmp	r3, #16
 80093c0:	bfde      	ittt	le
 80093c2:	9e08      	ldrle	r6, [sp, #32]
 80093c4:	434e      	mulle	r6, r1
 80093c6:	9608      	strle	r6, [sp, #32]
 80093c8:	e7e1      	b.n	800938e <_strtod_l+0x216>
 80093ca:	280f      	cmp	r0, #15
 80093cc:	dceb      	bgt.n	80093a6 <_strtod_l+0x22e>
 80093ce:	9808      	ldr	r0, [sp, #32]
 80093d0:	230a      	movs	r3, #10
 80093d2:	fb03 2300 	mla	r3, r3, r0, r2
 80093d6:	9308      	str	r3, [sp, #32]
 80093d8:	e7e5      	b.n	80093a6 <_strtod_l+0x22e>
 80093da:	4629      	mov	r1, r5
 80093dc:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80093de:	1c50      	adds	r0, r2, #1
 80093e0:	9019      	str	r0, [sp, #100]	@ 0x64
 80093e2:	7852      	ldrb	r2, [r2, #1]
 80093e4:	4618      	mov	r0, r3
 80093e6:	460d      	mov	r5, r1
 80093e8:	e7b1      	b.n	800934e <_strtod_l+0x1d6>
 80093ea:	f04f 0900 	mov.w	r9, #0
 80093ee:	2301      	movs	r3, #1
 80093f0:	e77d      	b.n	80092ee <_strtod_l+0x176>
 80093f2:	f04f 0c00 	mov.w	ip, #0
 80093f6:	1ca2      	adds	r2, r4, #2
 80093f8:	9219      	str	r2, [sp, #100]	@ 0x64
 80093fa:	78a2      	ldrb	r2, [r4, #2]
 80093fc:	e785      	b.n	800930a <_strtod_l+0x192>
 80093fe:	f04f 0c01 	mov.w	ip, #1
 8009402:	e7f8      	b.n	80093f6 <_strtod_l+0x27e>
 8009404:	0801035c 	.word	0x0801035c
 8009408:	08010344 	.word	0x08010344
 800940c:	7ff00000 	.word	0x7ff00000
 8009410:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009412:	1c51      	adds	r1, r2, #1
 8009414:	9119      	str	r1, [sp, #100]	@ 0x64
 8009416:	7852      	ldrb	r2, [r2, #1]
 8009418:	2a30      	cmp	r2, #48	@ 0x30
 800941a:	d0f9      	beq.n	8009410 <_strtod_l+0x298>
 800941c:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8009420:	2908      	cmp	r1, #8
 8009422:	f63f af78 	bhi.w	8009316 <_strtod_l+0x19e>
 8009426:	3a30      	subs	r2, #48	@ 0x30
 8009428:	920e      	str	r2, [sp, #56]	@ 0x38
 800942a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800942c:	920f      	str	r2, [sp, #60]	@ 0x3c
 800942e:	f04f 080a 	mov.w	r8, #10
 8009432:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009434:	1c56      	adds	r6, r2, #1
 8009436:	9619      	str	r6, [sp, #100]	@ 0x64
 8009438:	7852      	ldrb	r2, [r2, #1]
 800943a:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800943e:	f1be 0f09 	cmp.w	lr, #9
 8009442:	d939      	bls.n	80094b8 <_strtod_l+0x340>
 8009444:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8009446:	1a76      	subs	r6, r6, r1
 8009448:	2e08      	cmp	r6, #8
 800944a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800944e:	dc03      	bgt.n	8009458 <_strtod_l+0x2e0>
 8009450:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8009452:	4588      	cmp	r8, r1
 8009454:	bfa8      	it	ge
 8009456:	4688      	movge	r8, r1
 8009458:	f1bc 0f00 	cmp.w	ip, #0
 800945c:	d001      	beq.n	8009462 <_strtod_l+0x2ea>
 800945e:	f1c8 0800 	rsb	r8, r8, #0
 8009462:	2d00      	cmp	r5, #0
 8009464:	d14e      	bne.n	8009504 <_strtod_l+0x38c>
 8009466:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009468:	4308      	orrs	r0, r1
 800946a:	f47f aebe 	bne.w	80091ea <_strtod_l+0x72>
 800946e:	2b00      	cmp	r3, #0
 8009470:	f47f aed6 	bne.w	8009220 <_strtod_l+0xa8>
 8009474:	2a69      	cmp	r2, #105	@ 0x69
 8009476:	d028      	beq.n	80094ca <_strtod_l+0x352>
 8009478:	dc25      	bgt.n	80094c6 <_strtod_l+0x34e>
 800947a:	2a49      	cmp	r2, #73	@ 0x49
 800947c:	d025      	beq.n	80094ca <_strtod_l+0x352>
 800947e:	2a4e      	cmp	r2, #78	@ 0x4e
 8009480:	f47f aece 	bne.w	8009220 <_strtod_l+0xa8>
 8009484:	499b      	ldr	r1, [pc, #620]	@ (80096f4 <_strtod_l+0x57c>)
 8009486:	a819      	add	r0, sp, #100	@ 0x64
 8009488:	f003 fcaa 	bl	800cde0 <__match>
 800948c:	2800      	cmp	r0, #0
 800948e:	f43f aec7 	beq.w	8009220 <_strtod_l+0xa8>
 8009492:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009494:	781b      	ldrb	r3, [r3, #0]
 8009496:	2b28      	cmp	r3, #40	@ 0x28
 8009498:	d12e      	bne.n	80094f8 <_strtod_l+0x380>
 800949a:	4997      	ldr	r1, [pc, #604]	@ (80096f8 <_strtod_l+0x580>)
 800949c:	aa1c      	add	r2, sp, #112	@ 0x70
 800949e:	a819      	add	r0, sp, #100	@ 0x64
 80094a0:	f003 fcb2 	bl	800ce08 <__hexnan>
 80094a4:	2805      	cmp	r0, #5
 80094a6:	d127      	bne.n	80094f8 <_strtod_l+0x380>
 80094a8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80094aa:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 80094ae:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 80094b2:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 80094b6:	e698      	b.n	80091ea <_strtod_l+0x72>
 80094b8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80094ba:	fb08 2101 	mla	r1, r8, r1, r2
 80094be:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 80094c2:	920e      	str	r2, [sp, #56]	@ 0x38
 80094c4:	e7b5      	b.n	8009432 <_strtod_l+0x2ba>
 80094c6:	2a6e      	cmp	r2, #110	@ 0x6e
 80094c8:	e7da      	b.n	8009480 <_strtod_l+0x308>
 80094ca:	498c      	ldr	r1, [pc, #560]	@ (80096fc <_strtod_l+0x584>)
 80094cc:	a819      	add	r0, sp, #100	@ 0x64
 80094ce:	f003 fc87 	bl	800cde0 <__match>
 80094d2:	2800      	cmp	r0, #0
 80094d4:	f43f aea4 	beq.w	8009220 <_strtod_l+0xa8>
 80094d8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80094da:	4989      	ldr	r1, [pc, #548]	@ (8009700 <_strtod_l+0x588>)
 80094dc:	3b01      	subs	r3, #1
 80094de:	a819      	add	r0, sp, #100	@ 0x64
 80094e0:	9319      	str	r3, [sp, #100]	@ 0x64
 80094e2:	f003 fc7d 	bl	800cde0 <__match>
 80094e6:	b910      	cbnz	r0, 80094ee <_strtod_l+0x376>
 80094e8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80094ea:	3301      	adds	r3, #1
 80094ec:	9319      	str	r3, [sp, #100]	@ 0x64
 80094ee:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8009710 <_strtod_l+0x598>
 80094f2:	f04f 0a00 	mov.w	sl, #0
 80094f6:	e678      	b.n	80091ea <_strtod_l+0x72>
 80094f8:	4882      	ldr	r0, [pc, #520]	@ (8009704 <_strtod_l+0x58c>)
 80094fa:	f002 fb39 	bl	800bb70 <nan>
 80094fe:	ec5b ab10 	vmov	sl, fp, d0
 8009502:	e672      	b.n	80091ea <_strtod_l+0x72>
 8009504:	eba8 0309 	sub.w	r3, r8, r9
 8009508:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800950a:	9309      	str	r3, [sp, #36]	@ 0x24
 800950c:	2f00      	cmp	r7, #0
 800950e:	bf08      	it	eq
 8009510:	462f      	moveq	r7, r5
 8009512:	2d10      	cmp	r5, #16
 8009514:	462c      	mov	r4, r5
 8009516:	bfa8      	it	ge
 8009518:	2410      	movge	r4, #16
 800951a:	f7f7 f803 	bl	8000524 <__aeabi_ui2d>
 800951e:	2d09      	cmp	r5, #9
 8009520:	4682      	mov	sl, r0
 8009522:	468b      	mov	fp, r1
 8009524:	dc13      	bgt.n	800954e <_strtod_l+0x3d6>
 8009526:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009528:	2b00      	cmp	r3, #0
 800952a:	f43f ae5e 	beq.w	80091ea <_strtod_l+0x72>
 800952e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009530:	dd78      	ble.n	8009624 <_strtod_l+0x4ac>
 8009532:	2b16      	cmp	r3, #22
 8009534:	dc5f      	bgt.n	80095f6 <_strtod_l+0x47e>
 8009536:	4974      	ldr	r1, [pc, #464]	@ (8009708 <_strtod_l+0x590>)
 8009538:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800953c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009540:	4652      	mov	r2, sl
 8009542:	465b      	mov	r3, fp
 8009544:	f7f7 f868 	bl	8000618 <__aeabi_dmul>
 8009548:	4682      	mov	sl, r0
 800954a:	468b      	mov	fp, r1
 800954c:	e64d      	b.n	80091ea <_strtod_l+0x72>
 800954e:	4b6e      	ldr	r3, [pc, #440]	@ (8009708 <_strtod_l+0x590>)
 8009550:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009554:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8009558:	f7f7 f85e 	bl	8000618 <__aeabi_dmul>
 800955c:	4682      	mov	sl, r0
 800955e:	9808      	ldr	r0, [sp, #32]
 8009560:	468b      	mov	fp, r1
 8009562:	f7f6 ffdf 	bl	8000524 <__aeabi_ui2d>
 8009566:	4602      	mov	r2, r0
 8009568:	460b      	mov	r3, r1
 800956a:	4650      	mov	r0, sl
 800956c:	4659      	mov	r1, fp
 800956e:	f7f6 fe9d 	bl	80002ac <__adddf3>
 8009572:	2d0f      	cmp	r5, #15
 8009574:	4682      	mov	sl, r0
 8009576:	468b      	mov	fp, r1
 8009578:	ddd5      	ble.n	8009526 <_strtod_l+0x3ae>
 800957a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800957c:	1b2c      	subs	r4, r5, r4
 800957e:	441c      	add	r4, r3
 8009580:	2c00      	cmp	r4, #0
 8009582:	f340 8096 	ble.w	80096b2 <_strtod_l+0x53a>
 8009586:	f014 030f 	ands.w	r3, r4, #15
 800958a:	d00a      	beq.n	80095a2 <_strtod_l+0x42a>
 800958c:	495e      	ldr	r1, [pc, #376]	@ (8009708 <_strtod_l+0x590>)
 800958e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009592:	4652      	mov	r2, sl
 8009594:	465b      	mov	r3, fp
 8009596:	e9d1 0100 	ldrd	r0, r1, [r1]
 800959a:	f7f7 f83d 	bl	8000618 <__aeabi_dmul>
 800959e:	4682      	mov	sl, r0
 80095a0:	468b      	mov	fp, r1
 80095a2:	f034 040f 	bics.w	r4, r4, #15
 80095a6:	d073      	beq.n	8009690 <_strtod_l+0x518>
 80095a8:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 80095ac:	dd48      	ble.n	8009640 <_strtod_l+0x4c8>
 80095ae:	2400      	movs	r4, #0
 80095b0:	46a0      	mov	r8, r4
 80095b2:	940a      	str	r4, [sp, #40]	@ 0x28
 80095b4:	46a1      	mov	r9, r4
 80095b6:	9a05      	ldr	r2, [sp, #20]
 80095b8:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8009710 <_strtod_l+0x598>
 80095bc:	2322      	movs	r3, #34	@ 0x22
 80095be:	6013      	str	r3, [r2, #0]
 80095c0:	f04f 0a00 	mov.w	sl, #0
 80095c4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	f43f ae0f 	beq.w	80091ea <_strtod_l+0x72>
 80095cc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80095ce:	9805      	ldr	r0, [sp, #20]
 80095d0:	f003 fd4c 	bl	800d06c <_Bfree>
 80095d4:	9805      	ldr	r0, [sp, #20]
 80095d6:	4649      	mov	r1, r9
 80095d8:	f003 fd48 	bl	800d06c <_Bfree>
 80095dc:	9805      	ldr	r0, [sp, #20]
 80095de:	4641      	mov	r1, r8
 80095e0:	f003 fd44 	bl	800d06c <_Bfree>
 80095e4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80095e6:	9805      	ldr	r0, [sp, #20]
 80095e8:	f003 fd40 	bl	800d06c <_Bfree>
 80095ec:	9805      	ldr	r0, [sp, #20]
 80095ee:	4621      	mov	r1, r4
 80095f0:	f003 fd3c 	bl	800d06c <_Bfree>
 80095f4:	e5f9      	b.n	80091ea <_strtod_l+0x72>
 80095f6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80095f8:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 80095fc:	4293      	cmp	r3, r2
 80095fe:	dbbc      	blt.n	800957a <_strtod_l+0x402>
 8009600:	4c41      	ldr	r4, [pc, #260]	@ (8009708 <_strtod_l+0x590>)
 8009602:	f1c5 050f 	rsb	r5, r5, #15
 8009606:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800960a:	4652      	mov	r2, sl
 800960c:	465b      	mov	r3, fp
 800960e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009612:	f7f7 f801 	bl	8000618 <__aeabi_dmul>
 8009616:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009618:	1b5d      	subs	r5, r3, r5
 800961a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800961e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8009622:	e78f      	b.n	8009544 <_strtod_l+0x3cc>
 8009624:	3316      	adds	r3, #22
 8009626:	dba8      	blt.n	800957a <_strtod_l+0x402>
 8009628:	4b37      	ldr	r3, [pc, #220]	@ (8009708 <_strtod_l+0x590>)
 800962a:	eba9 0808 	sub.w	r8, r9, r8
 800962e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8009632:	e9d8 2300 	ldrd	r2, r3, [r8]
 8009636:	4650      	mov	r0, sl
 8009638:	4659      	mov	r1, fp
 800963a:	f7f7 f917 	bl	800086c <__aeabi_ddiv>
 800963e:	e783      	b.n	8009548 <_strtod_l+0x3d0>
 8009640:	4b32      	ldr	r3, [pc, #200]	@ (800970c <_strtod_l+0x594>)
 8009642:	9308      	str	r3, [sp, #32]
 8009644:	2300      	movs	r3, #0
 8009646:	1124      	asrs	r4, r4, #4
 8009648:	4650      	mov	r0, sl
 800964a:	4659      	mov	r1, fp
 800964c:	461e      	mov	r6, r3
 800964e:	2c01      	cmp	r4, #1
 8009650:	dc21      	bgt.n	8009696 <_strtod_l+0x51e>
 8009652:	b10b      	cbz	r3, 8009658 <_strtod_l+0x4e0>
 8009654:	4682      	mov	sl, r0
 8009656:	468b      	mov	fp, r1
 8009658:	492c      	ldr	r1, [pc, #176]	@ (800970c <_strtod_l+0x594>)
 800965a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800965e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8009662:	4652      	mov	r2, sl
 8009664:	465b      	mov	r3, fp
 8009666:	e9d1 0100 	ldrd	r0, r1, [r1]
 800966a:	f7f6 ffd5 	bl	8000618 <__aeabi_dmul>
 800966e:	4b28      	ldr	r3, [pc, #160]	@ (8009710 <_strtod_l+0x598>)
 8009670:	460a      	mov	r2, r1
 8009672:	400b      	ands	r3, r1
 8009674:	4927      	ldr	r1, [pc, #156]	@ (8009714 <_strtod_l+0x59c>)
 8009676:	428b      	cmp	r3, r1
 8009678:	4682      	mov	sl, r0
 800967a:	d898      	bhi.n	80095ae <_strtod_l+0x436>
 800967c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8009680:	428b      	cmp	r3, r1
 8009682:	bf86      	itte	hi
 8009684:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8009718 <_strtod_l+0x5a0>
 8009688:	f04f 3aff 	movhi.w	sl, #4294967295
 800968c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8009690:	2300      	movs	r3, #0
 8009692:	9308      	str	r3, [sp, #32]
 8009694:	e07a      	b.n	800978c <_strtod_l+0x614>
 8009696:	07e2      	lsls	r2, r4, #31
 8009698:	d505      	bpl.n	80096a6 <_strtod_l+0x52e>
 800969a:	9b08      	ldr	r3, [sp, #32]
 800969c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096a0:	f7f6 ffba 	bl	8000618 <__aeabi_dmul>
 80096a4:	2301      	movs	r3, #1
 80096a6:	9a08      	ldr	r2, [sp, #32]
 80096a8:	3208      	adds	r2, #8
 80096aa:	3601      	adds	r6, #1
 80096ac:	1064      	asrs	r4, r4, #1
 80096ae:	9208      	str	r2, [sp, #32]
 80096b0:	e7cd      	b.n	800964e <_strtod_l+0x4d6>
 80096b2:	d0ed      	beq.n	8009690 <_strtod_l+0x518>
 80096b4:	4264      	negs	r4, r4
 80096b6:	f014 020f 	ands.w	r2, r4, #15
 80096ba:	d00a      	beq.n	80096d2 <_strtod_l+0x55a>
 80096bc:	4b12      	ldr	r3, [pc, #72]	@ (8009708 <_strtod_l+0x590>)
 80096be:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80096c2:	4650      	mov	r0, sl
 80096c4:	4659      	mov	r1, fp
 80096c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096ca:	f7f7 f8cf 	bl	800086c <__aeabi_ddiv>
 80096ce:	4682      	mov	sl, r0
 80096d0:	468b      	mov	fp, r1
 80096d2:	1124      	asrs	r4, r4, #4
 80096d4:	d0dc      	beq.n	8009690 <_strtod_l+0x518>
 80096d6:	2c1f      	cmp	r4, #31
 80096d8:	dd20      	ble.n	800971c <_strtod_l+0x5a4>
 80096da:	2400      	movs	r4, #0
 80096dc:	46a0      	mov	r8, r4
 80096de:	940a      	str	r4, [sp, #40]	@ 0x28
 80096e0:	46a1      	mov	r9, r4
 80096e2:	9a05      	ldr	r2, [sp, #20]
 80096e4:	2322      	movs	r3, #34	@ 0x22
 80096e6:	f04f 0a00 	mov.w	sl, #0
 80096ea:	f04f 0b00 	mov.w	fp, #0
 80096ee:	6013      	str	r3, [r2, #0]
 80096f0:	e768      	b.n	80095c4 <_strtod_l+0x44c>
 80096f2:	bf00      	nop
 80096f4:	080104a6 	.word	0x080104a6
 80096f8:	08010348 	.word	0x08010348
 80096fc:	0801049e 	.word	0x0801049e
 8009700:	08010587 	.word	0x08010587
 8009704:	0800faed 	.word	0x0800faed
 8009708:	08010700 	.word	0x08010700
 800970c:	080106d8 	.word	0x080106d8
 8009710:	7ff00000 	.word	0x7ff00000
 8009714:	7ca00000 	.word	0x7ca00000
 8009718:	7fefffff 	.word	0x7fefffff
 800971c:	f014 0310 	ands.w	r3, r4, #16
 8009720:	bf18      	it	ne
 8009722:	236a      	movne	r3, #106	@ 0x6a
 8009724:	4ea9      	ldr	r6, [pc, #676]	@ (80099cc <_strtod_l+0x854>)
 8009726:	9308      	str	r3, [sp, #32]
 8009728:	4650      	mov	r0, sl
 800972a:	4659      	mov	r1, fp
 800972c:	2300      	movs	r3, #0
 800972e:	07e2      	lsls	r2, r4, #31
 8009730:	d504      	bpl.n	800973c <_strtod_l+0x5c4>
 8009732:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009736:	f7f6 ff6f 	bl	8000618 <__aeabi_dmul>
 800973a:	2301      	movs	r3, #1
 800973c:	1064      	asrs	r4, r4, #1
 800973e:	f106 0608 	add.w	r6, r6, #8
 8009742:	d1f4      	bne.n	800972e <_strtod_l+0x5b6>
 8009744:	b10b      	cbz	r3, 800974a <_strtod_l+0x5d2>
 8009746:	4682      	mov	sl, r0
 8009748:	468b      	mov	fp, r1
 800974a:	9b08      	ldr	r3, [sp, #32]
 800974c:	b1b3      	cbz	r3, 800977c <_strtod_l+0x604>
 800974e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8009752:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8009756:	2b00      	cmp	r3, #0
 8009758:	4659      	mov	r1, fp
 800975a:	dd0f      	ble.n	800977c <_strtod_l+0x604>
 800975c:	2b1f      	cmp	r3, #31
 800975e:	dd55      	ble.n	800980c <_strtod_l+0x694>
 8009760:	2b34      	cmp	r3, #52	@ 0x34
 8009762:	bfde      	ittt	le
 8009764:	f04f 33ff 	movle.w	r3, #4294967295
 8009768:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800976c:	4093      	lslle	r3, r2
 800976e:	f04f 0a00 	mov.w	sl, #0
 8009772:	bfcc      	ite	gt
 8009774:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8009778:	ea03 0b01 	andle.w	fp, r3, r1
 800977c:	2200      	movs	r2, #0
 800977e:	2300      	movs	r3, #0
 8009780:	4650      	mov	r0, sl
 8009782:	4659      	mov	r1, fp
 8009784:	f7f7 f9b0 	bl	8000ae8 <__aeabi_dcmpeq>
 8009788:	2800      	cmp	r0, #0
 800978a:	d1a6      	bne.n	80096da <_strtod_l+0x562>
 800978c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800978e:	9300      	str	r3, [sp, #0]
 8009790:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8009792:	9805      	ldr	r0, [sp, #20]
 8009794:	462b      	mov	r3, r5
 8009796:	463a      	mov	r2, r7
 8009798:	f003 fcd0 	bl	800d13c <__s2b>
 800979c:	900a      	str	r0, [sp, #40]	@ 0x28
 800979e:	2800      	cmp	r0, #0
 80097a0:	f43f af05 	beq.w	80095ae <_strtod_l+0x436>
 80097a4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80097a6:	2a00      	cmp	r2, #0
 80097a8:	eba9 0308 	sub.w	r3, r9, r8
 80097ac:	bfa8      	it	ge
 80097ae:	2300      	movge	r3, #0
 80097b0:	9312      	str	r3, [sp, #72]	@ 0x48
 80097b2:	2400      	movs	r4, #0
 80097b4:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80097b8:	9316      	str	r3, [sp, #88]	@ 0x58
 80097ba:	46a0      	mov	r8, r4
 80097bc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80097be:	9805      	ldr	r0, [sp, #20]
 80097c0:	6859      	ldr	r1, [r3, #4]
 80097c2:	f003 fc13 	bl	800cfec <_Balloc>
 80097c6:	4681      	mov	r9, r0
 80097c8:	2800      	cmp	r0, #0
 80097ca:	f43f aef4 	beq.w	80095b6 <_strtod_l+0x43e>
 80097ce:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80097d0:	691a      	ldr	r2, [r3, #16]
 80097d2:	3202      	adds	r2, #2
 80097d4:	f103 010c 	add.w	r1, r3, #12
 80097d8:	0092      	lsls	r2, r2, #2
 80097da:	300c      	adds	r0, #12
 80097dc:	f002 f9ba 	bl	800bb54 <memcpy>
 80097e0:	ec4b ab10 	vmov	d0, sl, fp
 80097e4:	9805      	ldr	r0, [sp, #20]
 80097e6:	aa1c      	add	r2, sp, #112	@ 0x70
 80097e8:	a91b      	add	r1, sp, #108	@ 0x6c
 80097ea:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 80097ee:	f003 ffe1 	bl	800d7b4 <__d2b>
 80097f2:	901a      	str	r0, [sp, #104]	@ 0x68
 80097f4:	2800      	cmp	r0, #0
 80097f6:	f43f aede 	beq.w	80095b6 <_strtod_l+0x43e>
 80097fa:	9805      	ldr	r0, [sp, #20]
 80097fc:	2101      	movs	r1, #1
 80097fe:	f003 fd33 	bl	800d268 <__i2b>
 8009802:	4680      	mov	r8, r0
 8009804:	b948      	cbnz	r0, 800981a <_strtod_l+0x6a2>
 8009806:	f04f 0800 	mov.w	r8, #0
 800980a:	e6d4      	b.n	80095b6 <_strtod_l+0x43e>
 800980c:	f04f 32ff 	mov.w	r2, #4294967295
 8009810:	fa02 f303 	lsl.w	r3, r2, r3
 8009814:	ea03 0a0a 	and.w	sl, r3, sl
 8009818:	e7b0      	b.n	800977c <_strtod_l+0x604>
 800981a:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800981c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800981e:	2d00      	cmp	r5, #0
 8009820:	bfab      	itete	ge
 8009822:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8009824:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8009826:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8009828:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800982a:	bfac      	ite	ge
 800982c:	18ef      	addge	r7, r5, r3
 800982e:	1b5e      	sublt	r6, r3, r5
 8009830:	9b08      	ldr	r3, [sp, #32]
 8009832:	1aed      	subs	r5, r5, r3
 8009834:	4415      	add	r5, r2
 8009836:	4b66      	ldr	r3, [pc, #408]	@ (80099d0 <_strtod_l+0x858>)
 8009838:	3d01      	subs	r5, #1
 800983a:	429d      	cmp	r5, r3
 800983c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8009840:	da50      	bge.n	80098e4 <_strtod_l+0x76c>
 8009842:	1b5b      	subs	r3, r3, r5
 8009844:	2b1f      	cmp	r3, #31
 8009846:	eba2 0203 	sub.w	r2, r2, r3
 800984a:	f04f 0101 	mov.w	r1, #1
 800984e:	dc3d      	bgt.n	80098cc <_strtod_l+0x754>
 8009850:	fa01 f303 	lsl.w	r3, r1, r3
 8009854:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009856:	2300      	movs	r3, #0
 8009858:	9310      	str	r3, [sp, #64]	@ 0x40
 800985a:	18bd      	adds	r5, r7, r2
 800985c:	9b08      	ldr	r3, [sp, #32]
 800985e:	42af      	cmp	r7, r5
 8009860:	4416      	add	r6, r2
 8009862:	441e      	add	r6, r3
 8009864:	463b      	mov	r3, r7
 8009866:	bfa8      	it	ge
 8009868:	462b      	movge	r3, r5
 800986a:	42b3      	cmp	r3, r6
 800986c:	bfa8      	it	ge
 800986e:	4633      	movge	r3, r6
 8009870:	2b00      	cmp	r3, #0
 8009872:	bfc2      	ittt	gt
 8009874:	1aed      	subgt	r5, r5, r3
 8009876:	1af6      	subgt	r6, r6, r3
 8009878:	1aff      	subgt	r7, r7, r3
 800987a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800987c:	2b00      	cmp	r3, #0
 800987e:	dd16      	ble.n	80098ae <_strtod_l+0x736>
 8009880:	4641      	mov	r1, r8
 8009882:	9805      	ldr	r0, [sp, #20]
 8009884:	461a      	mov	r2, r3
 8009886:	f003 fdaf 	bl	800d3e8 <__pow5mult>
 800988a:	4680      	mov	r8, r0
 800988c:	2800      	cmp	r0, #0
 800988e:	d0ba      	beq.n	8009806 <_strtod_l+0x68e>
 8009890:	4601      	mov	r1, r0
 8009892:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8009894:	9805      	ldr	r0, [sp, #20]
 8009896:	f003 fcfd 	bl	800d294 <__multiply>
 800989a:	900e      	str	r0, [sp, #56]	@ 0x38
 800989c:	2800      	cmp	r0, #0
 800989e:	f43f ae8a 	beq.w	80095b6 <_strtod_l+0x43e>
 80098a2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80098a4:	9805      	ldr	r0, [sp, #20]
 80098a6:	f003 fbe1 	bl	800d06c <_Bfree>
 80098aa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80098ac:	931a      	str	r3, [sp, #104]	@ 0x68
 80098ae:	2d00      	cmp	r5, #0
 80098b0:	dc1d      	bgt.n	80098ee <_strtod_l+0x776>
 80098b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	dd23      	ble.n	8009900 <_strtod_l+0x788>
 80098b8:	4649      	mov	r1, r9
 80098ba:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80098bc:	9805      	ldr	r0, [sp, #20]
 80098be:	f003 fd93 	bl	800d3e8 <__pow5mult>
 80098c2:	4681      	mov	r9, r0
 80098c4:	b9e0      	cbnz	r0, 8009900 <_strtod_l+0x788>
 80098c6:	f04f 0900 	mov.w	r9, #0
 80098ca:	e674      	b.n	80095b6 <_strtod_l+0x43e>
 80098cc:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 80098d0:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 80098d4:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 80098d8:	35e2      	adds	r5, #226	@ 0xe2
 80098da:	fa01 f305 	lsl.w	r3, r1, r5
 80098de:	9310      	str	r3, [sp, #64]	@ 0x40
 80098e0:	9113      	str	r1, [sp, #76]	@ 0x4c
 80098e2:	e7ba      	b.n	800985a <_strtod_l+0x6e2>
 80098e4:	2300      	movs	r3, #0
 80098e6:	9310      	str	r3, [sp, #64]	@ 0x40
 80098e8:	2301      	movs	r3, #1
 80098ea:	9313      	str	r3, [sp, #76]	@ 0x4c
 80098ec:	e7b5      	b.n	800985a <_strtod_l+0x6e2>
 80098ee:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80098f0:	9805      	ldr	r0, [sp, #20]
 80098f2:	462a      	mov	r2, r5
 80098f4:	f003 fdd2 	bl	800d49c <__lshift>
 80098f8:	901a      	str	r0, [sp, #104]	@ 0x68
 80098fa:	2800      	cmp	r0, #0
 80098fc:	d1d9      	bne.n	80098b2 <_strtod_l+0x73a>
 80098fe:	e65a      	b.n	80095b6 <_strtod_l+0x43e>
 8009900:	2e00      	cmp	r6, #0
 8009902:	dd07      	ble.n	8009914 <_strtod_l+0x79c>
 8009904:	4649      	mov	r1, r9
 8009906:	9805      	ldr	r0, [sp, #20]
 8009908:	4632      	mov	r2, r6
 800990a:	f003 fdc7 	bl	800d49c <__lshift>
 800990e:	4681      	mov	r9, r0
 8009910:	2800      	cmp	r0, #0
 8009912:	d0d8      	beq.n	80098c6 <_strtod_l+0x74e>
 8009914:	2f00      	cmp	r7, #0
 8009916:	dd08      	ble.n	800992a <_strtod_l+0x7b2>
 8009918:	4641      	mov	r1, r8
 800991a:	9805      	ldr	r0, [sp, #20]
 800991c:	463a      	mov	r2, r7
 800991e:	f003 fdbd 	bl	800d49c <__lshift>
 8009922:	4680      	mov	r8, r0
 8009924:	2800      	cmp	r0, #0
 8009926:	f43f ae46 	beq.w	80095b6 <_strtod_l+0x43e>
 800992a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800992c:	9805      	ldr	r0, [sp, #20]
 800992e:	464a      	mov	r2, r9
 8009930:	f003 fe3c 	bl	800d5ac <__mdiff>
 8009934:	4604      	mov	r4, r0
 8009936:	2800      	cmp	r0, #0
 8009938:	f43f ae3d 	beq.w	80095b6 <_strtod_l+0x43e>
 800993c:	68c3      	ldr	r3, [r0, #12]
 800993e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009940:	2300      	movs	r3, #0
 8009942:	60c3      	str	r3, [r0, #12]
 8009944:	4641      	mov	r1, r8
 8009946:	f003 fe15 	bl	800d574 <__mcmp>
 800994a:	2800      	cmp	r0, #0
 800994c:	da46      	bge.n	80099dc <_strtod_l+0x864>
 800994e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009950:	ea53 030a 	orrs.w	r3, r3, sl
 8009954:	d16c      	bne.n	8009a30 <_strtod_l+0x8b8>
 8009956:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800995a:	2b00      	cmp	r3, #0
 800995c:	d168      	bne.n	8009a30 <_strtod_l+0x8b8>
 800995e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009962:	0d1b      	lsrs	r3, r3, #20
 8009964:	051b      	lsls	r3, r3, #20
 8009966:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800996a:	d961      	bls.n	8009a30 <_strtod_l+0x8b8>
 800996c:	6963      	ldr	r3, [r4, #20]
 800996e:	b913      	cbnz	r3, 8009976 <_strtod_l+0x7fe>
 8009970:	6923      	ldr	r3, [r4, #16]
 8009972:	2b01      	cmp	r3, #1
 8009974:	dd5c      	ble.n	8009a30 <_strtod_l+0x8b8>
 8009976:	4621      	mov	r1, r4
 8009978:	2201      	movs	r2, #1
 800997a:	9805      	ldr	r0, [sp, #20]
 800997c:	f003 fd8e 	bl	800d49c <__lshift>
 8009980:	4641      	mov	r1, r8
 8009982:	4604      	mov	r4, r0
 8009984:	f003 fdf6 	bl	800d574 <__mcmp>
 8009988:	2800      	cmp	r0, #0
 800998a:	dd51      	ble.n	8009a30 <_strtod_l+0x8b8>
 800998c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009990:	9a08      	ldr	r2, [sp, #32]
 8009992:	0d1b      	lsrs	r3, r3, #20
 8009994:	051b      	lsls	r3, r3, #20
 8009996:	2a00      	cmp	r2, #0
 8009998:	d06b      	beq.n	8009a72 <_strtod_l+0x8fa>
 800999a:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800999e:	d868      	bhi.n	8009a72 <_strtod_l+0x8fa>
 80099a0:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 80099a4:	f67f ae9d 	bls.w	80096e2 <_strtod_l+0x56a>
 80099a8:	4b0a      	ldr	r3, [pc, #40]	@ (80099d4 <_strtod_l+0x85c>)
 80099aa:	4650      	mov	r0, sl
 80099ac:	4659      	mov	r1, fp
 80099ae:	2200      	movs	r2, #0
 80099b0:	f7f6 fe32 	bl	8000618 <__aeabi_dmul>
 80099b4:	4b08      	ldr	r3, [pc, #32]	@ (80099d8 <_strtod_l+0x860>)
 80099b6:	400b      	ands	r3, r1
 80099b8:	4682      	mov	sl, r0
 80099ba:	468b      	mov	fp, r1
 80099bc:	2b00      	cmp	r3, #0
 80099be:	f47f ae05 	bne.w	80095cc <_strtod_l+0x454>
 80099c2:	9a05      	ldr	r2, [sp, #20]
 80099c4:	2322      	movs	r3, #34	@ 0x22
 80099c6:	6013      	str	r3, [r2, #0]
 80099c8:	e600      	b.n	80095cc <_strtod_l+0x454>
 80099ca:	bf00      	nop
 80099cc:	08010370 	.word	0x08010370
 80099d0:	fffffc02 	.word	0xfffffc02
 80099d4:	39500000 	.word	0x39500000
 80099d8:	7ff00000 	.word	0x7ff00000
 80099dc:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 80099e0:	d165      	bne.n	8009aae <_strtod_l+0x936>
 80099e2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80099e4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80099e8:	b35a      	cbz	r2, 8009a42 <_strtod_l+0x8ca>
 80099ea:	4a9f      	ldr	r2, [pc, #636]	@ (8009c68 <_strtod_l+0xaf0>)
 80099ec:	4293      	cmp	r3, r2
 80099ee:	d12b      	bne.n	8009a48 <_strtod_l+0x8d0>
 80099f0:	9b08      	ldr	r3, [sp, #32]
 80099f2:	4651      	mov	r1, sl
 80099f4:	b303      	cbz	r3, 8009a38 <_strtod_l+0x8c0>
 80099f6:	4b9d      	ldr	r3, [pc, #628]	@ (8009c6c <_strtod_l+0xaf4>)
 80099f8:	465a      	mov	r2, fp
 80099fa:	4013      	ands	r3, r2
 80099fc:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8009a00:	f04f 32ff 	mov.w	r2, #4294967295
 8009a04:	d81b      	bhi.n	8009a3e <_strtod_l+0x8c6>
 8009a06:	0d1b      	lsrs	r3, r3, #20
 8009a08:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8009a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8009a10:	4299      	cmp	r1, r3
 8009a12:	d119      	bne.n	8009a48 <_strtod_l+0x8d0>
 8009a14:	4b96      	ldr	r3, [pc, #600]	@ (8009c70 <_strtod_l+0xaf8>)
 8009a16:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009a18:	429a      	cmp	r2, r3
 8009a1a:	d102      	bne.n	8009a22 <_strtod_l+0x8aa>
 8009a1c:	3101      	adds	r1, #1
 8009a1e:	f43f adca 	beq.w	80095b6 <_strtod_l+0x43e>
 8009a22:	4b92      	ldr	r3, [pc, #584]	@ (8009c6c <_strtod_l+0xaf4>)
 8009a24:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009a26:	401a      	ands	r2, r3
 8009a28:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8009a2c:	f04f 0a00 	mov.w	sl, #0
 8009a30:	9b08      	ldr	r3, [sp, #32]
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d1b8      	bne.n	80099a8 <_strtod_l+0x830>
 8009a36:	e5c9      	b.n	80095cc <_strtod_l+0x454>
 8009a38:	f04f 33ff 	mov.w	r3, #4294967295
 8009a3c:	e7e8      	b.n	8009a10 <_strtod_l+0x898>
 8009a3e:	4613      	mov	r3, r2
 8009a40:	e7e6      	b.n	8009a10 <_strtod_l+0x898>
 8009a42:	ea53 030a 	orrs.w	r3, r3, sl
 8009a46:	d0a1      	beq.n	800998c <_strtod_l+0x814>
 8009a48:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009a4a:	b1db      	cbz	r3, 8009a84 <_strtod_l+0x90c>
 8009a4c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009a4e:	4213      	tst	r3, r2
 8009a50:	d0ee      	beq.n	8009a30 <_strtod_l+0x8b8>
 8009a52:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009a54:	9a08      	ldr	r2, [sp, #32]
 8009a56:	4650      	mov	r0, sl
 8009a58:	4659      	mov	r1, fp
 8009a5a:	b1bb      	cbz	r3, 8009a8c <_strtod_l+0x914>
 8009a5c:	f7ff fb6c 	bl	8009138 <sulp>
 8009a60:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009a64:	ec53 2b10 	vmov	r2, r3, d0
 8009a68:	f7f6 fc20 	bl	80002ac <__adddf3>
 8009a6c:	4682      	mov	sl, r0
 8009a6e:	468b      	mov	fp, r1
 8009a70:	e7de      	b.n	8009a30 <_strtod_l+0x8b8>
 8009a72:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8009a76:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8009a7a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8009a7e:	f04f 3aff 	mov.w	sl, #4294967295
 8009a82:	e7d5      	b.n	8009a30 <_strtod_l+0x8b8>
 8009a84:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009a86:	ea13 0f0a 	tst.w	r3, sl
 8009a8a:	e7e1      	b.n	8009a50 <_strtod_l+0x8d8>
 8009a8c:	f7ff fb54 	bl	8009138 <sulp>
 8009a90:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009a94:	ec53 2b10 	vmov	r2, r3, d0
 8009a98:	f7f6 fc06 	bl	80002a8 <__aeabi_dsub>
 8009a9c:	2200      	movs	r2, #0
 8009a9e:	2300      	movs	r3, #0
 8009aa0:	4682      	mov	sl, r0
 8009aa2:	468b      	mov	fp, r1
 8009aa4:	f7f7 f820 	bl	8000ae8 <__aeabi_dcmpeq>
 8009aa8:	2800      	cmp	r0, #0
 8009aaa:	d0c1      	beq.n	8009a30 <_strtod_l+0x8b8>
 8009aac:	e619      	b.n	80096e2 <_strtod_l+0x56a>
 8009aae:	4641      	mov	r1, r8
 8009ab0:	4620      	mov	r0, r4
 8009ab2:	f003 fed7 	bl	800d864 <__ratio>
 8009ab6:	ec57 6b10 	vmov	r6, r7, d0
 8009aba:	2200      	movs	r2, #0
 8009abc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8009ac0:	4630      	mov	r0, r6
 8009ac2:	4639      	mov	r1, r7
 8009ac4:	f7f7 f824 	bl	8000b10 <__aeabi_dcmple>
 8009ac8:	2800      	cmp	r0, #0
 8009aca:	d06f      	beq.n	8009bac <_strtod_l+0xa34>
 8009acc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d17a      	bne.n	8009bc8 <_strtod_l+0xa50>
 8009ad2:	f1ba 0f00 	cmp.w	sl, #0
 8009ad6:	d158      	bne.n	8009b8a <_strtod_l+0xa12>
 8009ad8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009ada:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d15a      	bne.n	8009b98 <_strtod_l+0xa20>
 8009ae2:	4b64      	ldr	r3, [pc, #400]	@ (8009c74 <_strtod_l+0xafc>)
 8009ae4:	2200      	movs	r2, #0
 8009ae6:	4630      	mov	r0, r6
 8009ae8:	4639      	mov	r1, r7
 8009aea:	f7f7 f807 	bl	8000afc <__aeabi_dcmplt>
 8009aee:	2800      	cmp	r0, #0
 8009af0:	d159      	bne.n	8009ba6 <_strtod_l+0xa2e>
 8009af2:	4630      	mov	r0, r6
 8009af4:	4639      	mov	r1, r7
 8009af6:	4b60      	ldr	r3, [pc, #384]	@ (8009c78 <_strtod_l+0xb00>)
 8009af8:	2200      	movs	r2, #0
 8009afa:	f7f6 fd8d 	bl	8000618 <__aeabi_dmul>
 8009afe:	4606      	mov	r6, r0
 8009b00:	460f      	mov	r7, r1
 8009b02:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8009b06:	9606      	str	r6, [sp, #24]
 8009b08:	9307      	str	r3, [sp, #28]
 8009b0a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009b0e:	4d57      	ldr	r5, [pc, #348]	@ (8009c6c <_strtod_l+0xaf4>)
 8009b10:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8009b14:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009b16:	401d      	ands	r5, r3
 8009b18:	4b58      	ldr	r3, [pc, #352]	@ (8009c7c <_strtod_l+0xb04>)
 8009b1a:	429d      	cmp	r5, r3
 8009b1c:	f040 80b2 	bne.w	8009c84 <_strtod_l+0xb0c>
 8009b20:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009b22:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8009b26:	ec4b ab10 	vmov	d0, sl, fp
 8009b2a:	f003 fdd3 	bl	800d6d4 <__ulp>
 8009b2e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009b32:	ec51 0b10 	vmov	r0, r1, d0
 8009b36:	f7f6 fd6f 	bl	8000618 <__aeabi_dmul>
 8009b3a:	4652      	mov	r2, sl
 8009b3c:	465b      	mov	r3, fp
 8009b3e:	f7f6 fbb5 	bl	80002ac <__adddf3>
 8009b42:	460b      	mov	r3, r1
 8009b44:	4949      	ldr	r1, [pc, #292]	@ (8009c6c <_strtod_l+0xaf4>)
 8009b46:	4a4e      	ldr	r2, [pc, #312]	@ (8009c80 <_strtod_l+0xb08>)
 8009b48:	4019      	ands	r1, r3
 8009b4a:	4291      	cmp	r1, r2
 8009b4c:	4682      	mov	sl, r0
 8009b4e:	d942      	bls.n	8009bd6 <_strtod_l+0xa5e>
 8009b50:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009b52:	4b47      	ldr	r3, [pc, #284]	@ (8009c70 <_strtod_l+0xaf8>)
 8009b54:	429a      	cmp	r2, r3
 8009b56:	d103      	bne.n	8009b60 <_strtod_l+0x9e8>
 8009b58:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009b5a:	3301      	adds	r3, #1
 8009b5c:	f43f ad2b 	beq.w	80095b6 <_strtod_l+0x43e>
 8009b60:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8009c70 <_strtod_l+0xaf8>
 8009b64:	f04f 3aff 	mov.w	sl, #4294967295
 8009b68:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009b6a:	9805      	ldr	r0, [sp, #20]
 8009b6c:	f003 fa7e 	bl	800d06c <_Bfree>
 8009b70:	9805      	ldr	r0, [sp, #20]
 8009b72:	4649      	mov	r1, r9
 8009b74:	f003 fa7a 	bl	800d06c <_Bfree>
 8009b78:	9805      	ldr	r0, [sp, #20]
 8009b7a:	4641      	mov	r1, r8
 8009b7c:	f003 fa76 	bl	800d06c <_Bfree>
 8009b80:	9805      	ldr	r0, [sp, #20]
 8009b82:	4621      	mov	r1, r4
 8009b84:	f003 fa72 	bl	800d06c <_Bfree>
 8009b88:	e618      	b.n	80097bc <_strtod_l+0x644>
 8009b8a:	f1ba 0f01 	cmp.w	sl, #1
 8009b8e:	d103      	bne.n	8009b98 <_strtod_l+0xa20>
 8009b90:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	f43f ada5 	beq.w	80096e2 <_strtod_l+0x56a>
 8009b98:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8009c48 <_strtod_l+0xad0>
 8009b9c:	4f35      	ldr	r7, [pc, #212]	@ (8009c74 <_strtod_l+0xafc>)
 8009b9e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009ba2:	2600      	movs	r6, #0
 8009ba4:	e7b1      	b.n	8009b0a <_strtod_l+0x992>
 8009ba6:	4f34      	ldr	r7, [pc, #208]	@ (8009c78 <_strtod_l+0xb00>)
 8009ba8:	2600      	movs	r6, #0
 8009baa:	e7aa      	b.n	8009b02 <_strtod_l+0x98a>
 8009bac:	4b32      	ldr	r3, [pc, #200]	@ (8009c78 <_strtod_l+0xb00>)
 8009bae:	4630      	mov	r0, r6
 8009bb0:	4639      	mov	r1, r7
 8009bb2:	2200      	movs	r2, #0
 8009bb4:	f7f6 fd30 	bl	8000618 <__aeabi_dmul>
 8009bb8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009bba:	4606      	mov	r6, r0
 8009bbc:	460f      	mov	r7, r1
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d09f      	beq.n	8009b02 <_strtod_l+0x98a>
 8009bc2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8009bc6:	e7a0      	b.n	8009b0a <_strtod_l+0x992>
 8009bc8:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8009c50 <_strtod_l+0xad8>
 8009bcc:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009bd0:	ec57 6b17 	vmov	r6, r7, d7
 8009bd4:	e799      	b.n	8009b0a <_strtod_l+0x992>
 8009bd6:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8009bda:	9b08      	ldr	r3, [sp, #32]
 8009bdc:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	d1c1      	bne.n	8009b68 <_strtod_l+0x9f0>
 8009be4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009be8:	0d1b      	lsrs	r3, r3, #20
 8009bea:	051b      	lsls	r3, r3, #20
 8009bec:	429d      	cmp	r5, r3
 8009bee:	d1bb      	bne.n	8009b68 <_strtod_l+0x9f0>
 8009bf0:	4630      	mov	r0, r6
 8009bf2:	4639      	mov	r1, r7
 8009bf4:	f7f7 f858 	bl	8000ca8 <__aeabi_d2lz>
 8009bf8:	f7f6 fce0 	bl	80005bc <__aeabi_l2d>
 8009bfc:	4602      	mov	r2, r0
 8009bfe:	460b      	mov	r3, r1
 8009c00:	4630      	mov	r0, r6
 8009c02:	4639      	mov	r1, r7
 8009c04:	f7f6 fb50 	bl	80002a8 <__aeabi_dsub>
 8009c08:	460b      	mov	r3, r1
 8009c0a:	4602      	mov	r2, r0
 8009c0c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8009c10:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8009c14:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009c16:	ea46 060a 	orr.w	r6, r6, sl
 8009c1a:	431e      	orrs	r6, r3
 8009c1c:	d06f      	beq.n	8009cfe <_strtod_l+0xb86>
 8009c1e:	a30e      	add	r3, pc, #56	@ (adr r3, 8009c58 <_strtod_l+0xae0>)
 8009c20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c24:	f7f6 ff6a 	bl	8000afc <__aeabi_dcmplt>
 8009c28:	2800      	cmp	r0, #0
 8009c2a:	f47f accf 	bne.w	80095cc <_strtod_l+0x454>
 8009c2e:	a30c      	add	r3, pc, #48	@ (adr r3, 8009c60 <_strtod_l+0xae8>)
 8009c30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c34:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009c38:	f7f6 ff7e 	bl	8000b38 <__aeabi_dcmpgt>
 8009c3c:	2800      	cmp	r0, #0
 8009c3e:	d093      	beq.n	8009b68 <_strtod_l+0x9f0>
 8009c40:	e4c4      	b.n	80095cc <_strtod_l+0x454>
 8009c42:	bf00      	nop
 8009c44:	f3af 8000 	nop.w
 8009c48:	00000000 	.word	0x00000000
 8009c4c:	bff00000 	.word	0xbff00000
 8009c50:	00000000 	.word	0x00000000
 8009c54:	3ff00000 	.word	0x3ff00000
 8009c58:	94a03595 	.word	0x94a03595
 8009c5c:	3fdfffff 	.word	0x3fdfffff
 8009c60:	35afe535 	.word	0x35afe535
 8009c64:	3fe00000 	.word	0x3fe00000
 8009c68:	000fffff 	.word	0x000fffff
 8009c6c:	7ff00000 	.word	0x7ff00000
 8009c70:	7fefffff 	.word	0x7fefffff
 8009c74:	3ff00000 	.word	0x3ff00000
 8009c78:	3fe00000 	.word	0x3fe00000
 8009c7c:	7fe00000 	.word	0x7fe00000
 8009c80:	7c9fffff 	.word	0x7c9fffff
 8009c84:	9b08      	ldr	r3, [sp, #32]
 8009c86:	b323      	cbz	r3, 8009cd2 <_strtod_l+0xb5a>
 8009c88:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8009c8c:	d821      	bhi.n	8009cd2 <_strtod_l+0xb5a>
 8009c8e:	a328      	add	r3, pc, #160	@ (adr r3, 8009d30 <_strtod_l+0xbb8>)
 8009c90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c94:	4630      	mov	r0, r6
 8009c96:	4639      	mov	r1, r7
 8009c98:	f7f6 ff3a 	bl	8000b10 <__aeabi_dcmple>
 8009c9c:	b1a0      	cbz	r0, 8009cc8 <_strtod_l+0xb50>
 8009c9e:	4639      	mov	r1, r7
 8009ca0:	4630      	mov	r0, r6
 8009ca2:	f7f6 ff91 	bl	8000bc8 <__aeabi_d2uiz>
 8009ca6:	2801      	cmp	r0, #1
 8009ca8:	bf38      	it	cc
 8009caa:	2001      	movcc	r0, #1
 8009cac:	f7f6 fc3a 	bl	8000524 <__aeabi_ui2d>
 8009cb0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009cb2:	4606      	mov	r6, r0
 8009cb4:	460f      	mov	r7, r1
 8009cb6:	b9fb      	cbnz	r3, 8009cf8 <_strtod_l+0xb80>
 8009cb8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009cbc:	9014      	str	r0, [sp, #80]	@ 0x50
 8009cbe:	9315      	str	r3, [sp, #84]	@ 0x54
 8009cc0:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8009cc4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8009cc8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009cca:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8009cce:	1b5b      	subs	r3, r3, r5
 8009cd0:	9311      	str	r3, [sp, #68]	@ 0x44
 8009cd2:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8009cd6:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8009cda:	f003 fcfb 	bl	800d6d4 <__ulp>
 8009cde:	4650      	mov	r0, sl
 8009ce0:	ec53 2b10 	vmov	r2, r3, d0
 8009ce4:	4659      	mov	r1, fp
 8009ce6:	f7f6 fc97 	bl	8000618 <__aeabi_dmul>
 8009cea:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8009cee:	f7f6 fadd 	bl	80002ac <__adddf3>
 8009cf2:	4682      	mov	sl, r0
 8009cf4:	468b      	mov	fp, r1
 8009cf6:	e770      	b.n	8009bda <_strtod_l+0xa62>
 8009cf8:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8009cfc:	e7e0      	b.n	8009cc0 <_strtod_l+0xb48>
 8009cfe:	a30e      	add	r3, pc, #56	@ (adr r3, 8009d38 <_strtod_l+0xbc0>)
 8009d00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d04:	f7f6 fefa 	bl	8000afc <__aeabi_dcmplt>
 8009d08:	e798      	b.n	8009c3c <_strtod_l+0xac4>
 8009d0a:	2300      	movs	r3, #0
 8009d0c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009d0e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8009d10:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009d12:	6013      	str	r3, [r2, #0]
 8009d14:	f7ff ba6d 	b.w	80091f2 <_strtod_l+0x7a>
 8009d18:	2a65      	cmp	r2, #101	@ 0x65
 8009d1a:	f43f ab66 	beq.w	80093ea <_strtod_l+0x272>
 8009d1e:	2a45      	cmp	r2, #69	@ 0x45
 8009d20:	f43f ab63 	beq.w	80093ea <_strtod_l+0x272>
 8009d24:	2301      	movs	r3, #1
 8009d26:	f7ff bb9e 	b.w	8009466 <_strtod_l+0x2ee>
 8009d2a:	bf00      	nop
 8009d2c:	f3af 8000 	nop.w
 8009d30:	ffc00000 	.word	0xffc00000
 8009d34:	41dfffff 	.word	0x41dfffff
 8009d38:	94a03595 	.word	0x94a03595
 8009d3c:	3fcfffff 	.word	0x3fcfffff

08009d40 <_strtod_r>:
 8009d40:	4b01      	ldr	r3, [pc, #4]	@ (8009d48 <_strtod_r+0x8>)
 8009d42:	f7ff ba19 	b.w	8009178 <_strtod_l>
 8009d46:	bf00      	nop
 8009d48:	20000030 	.word	0x20000030

08009d4c <_strtol_l.constprop.0>:
 8009d4c:	2b24      	cmp	r3, #36	@ 0x24
 8009d4e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009d52:	4686      	mov	lr, r0
 8009d54:	4690      	mov	r8, r2
 8009d56:	d801      	bhi.n	8009d5c <_strtol_l.constprop.0+0x10>
 8009d58:	2b01      	cmp	r3, #1
 8009d5a:	d106      	bne.n	8009d6a <_strtol_l.constprop.0+0x1e>
 8009d5c:	f001 fec8 	bl	800baf0 <__errno>
 8009d60:	2316      	movs	r3, #22
 8009d62:	6003      	str	r3, [r0, #0]
 8009d64:	2000      	movs	r0, #0
 8009d66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d6a:	4834      	ldr	r0, [pc, #208]	@ (8009e3c <_strtol_l.constprop.0+0xf0>)
 8009d6c:	460d      	mov	r5, r1
 8009d6e:	462a      	mov	r2, r5
 8009d70:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009d74:	5d06      	ldrb	r6, [r0, r4]
 8009d76:	f016 0608 	ands.w	r6, r6, #8
 8009d7a:	d1f8      	bne.n	8009d6e <_strtol_l.constprop.0+0x22>
 8009d7c:	2c2d      	cmp	r4, #45	@ 0x2d
 8009d7e:	d12d      	bne.n	8009ddc <_strtol_l.constprop.0+0x90>
 8009d80:	782c      	ldrb	r4, [r5, #0]
 8009d82:	2601      	movs	r6, #1
 8009d84:	1c95      	adds	r5, r2, #2
 8009d86:	f033 0210 	bics.w	r2, r3, #16
 8009d8a:	d109      	bne.n	8009da0 <_strtol_l.constprop.0+0x54>
 8009d8c:	2c30      	cmp	r4, #48	@ 0x30
 8009d8e:	d12a      	bne.n	8009de6 <_strtol_l.constprop.0+0x9a>
 8009d90:	782a      	ldrb	r2, [r5, #0]
 8009d92:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8009d96:	2a58      	cmp	r2, #88	@ 0x58
 8009d98:	d125      	bne.n	8009de6 <_strtol_l.constprop.0+0x9a>
 8009d9a:	786c      	ldrb	r4, [r5, #1]
 8009d9c:	2310      	movs	r3, #16
 8009d9e:	3502      	adds	r5, #2
 8009da0:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8009da4:	f10c 3cff 	add.w	ip, ip, #4294967295
 8009da8:	2200      	movs	r2, #0
 8009daa:	fbbc f9f3 	udiv	r9, ip, r3
 8009dae:	4610      	mov	r0, r2
 8009db0:	fb03 ca19 	mls	sl, r3, r9, ip
 8009db4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8009db8:	2f09      	cmp	r7, #9
 8009dba:	d81b      	bhi.n	8009df4 <_strtol_l.constprop.0+0xa8>
 8009dbc:	463c      	mov	r4, r7
 8009dbe:	42a3      	cmp	r3, r4
 8009dc0:	dd27      	ble.n	8009e12 <_strtol_l.constprop.0+0xc6>
 8009dc2:	1c57      	adds	r7, r2, #1
 8009dc4:	d007      	beq.n	8009dd6 <_strtol_l.constprop.0+0x8a>
 8009dc6:	4581      	cmp	r9, r0
 8009dc8:	d320      	bcc.n	8009e0c <_strtol_l.constprop.0+0xc0>
 8009dca:	d101      	bne.n	8009dd0 <_strtol_l.constprop.0+0x84>
 8009dcc:	45a2      	cmp	sl, r4
 8009dce:	db1d      	blt.n	8009e0c <_strtol_l.constprop.0+0xc0>
 8009dd0:	fb00 4003 	mla	r0, r0, r3, r4
 8009dd4:	2201      	movs	r2, #1
 8009dd6:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009dda:	e7eb      	b.n	8009db4 <_strtol_l.constprop.0+0x68>
 8009ddc:	2c2b      	cmp	r4, #43	@ 0x2b
 8009dde:	bf04      	itt	eq
 8009de0:	782c      	ldrbeq	r4, [r5, #0]
 8009de2:	1c95      	addeq	r5, r2, #2
 8009de4:	e7cf      	b.n	8009d86 <_strtol_l.constprop.0+0x3a>
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d1da      	bne.n	8009da0 <_strtol_l.constprop.0+0x54>
 8009dea:	2c30      	cmp	r4, #48	@ 0x30
 8009dec:	bf0c      	ite	eq
 8009dee:	2308      	moveq	r3, #8
 8009df0:	230a      	movne	r3, #10
 8009df2:	e7d5      	b.n	8009da0 <_strtol_l.constprop.0+0x54>
 8009df4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8009df8:	2f19      	cmp	r7, #25
 8009dfa:	d801      	bhi.n	8009e00 <_strtol_l.constprop.0+0xb4>
 8009dfc:	3c37      	subs	r4, #55	@ 0x37
 8009dfe:	e7de      	b.n	8009dbe <_strtol_l.constprop.0+0x72>
 8009e00:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8009e04:	2f19      	cmp	r7, #25
 8009e06:	d804      	bhi.n	8009e12 <_strtol_l.constprop.0+0xc6>
 8009e08:	3c57      	subs	r4, #87	@ 0x57
 8009e0a:	e7d8      	b.n	8009dbe <_strtol_l.constprop.0+0x72>
 8009e0c:	f04f 32ff 	mov.w	r2, #4294967295
 8009e10:	e7e1      	b.n	8009dd6 <_strtol_l.constprop.0+0x8a>
 8009e12:	1c53      	adds	r3, r2, #1
 8009e14:	d108      	bne.n	8009e28 <_strtol_l.constprop.0+0xdc>
 8009e16:	2322      	movs	r3, #34	@ 0x22
 8009e18:	f8ce 3000 	str.w	r3, [lr]
 8009e1c:	4660      	mov	r0, ip
 8009e1e:	f1b8 0f00 	cmp.w	r8, #0
 8009e22:	d0a0      	beq.n	8009d66 <_strtol_l.constprop.0+0x1a>
 8009e24:	1e69      	subs	r1, r5, #1
 8009e26:	e006      	b.n	8009e36 <_strtol_l.constprop.0+0xea>
 8009e28:	b106      	cbz	r6, 8009e2c <_strtol_l.constprop.0+0xe0>
 8009e2a:	4240      	negs	r0, r0
 8009e2c:	f1b8 0f00 	cmp.w	r8, #0
 8009e30:	d099      	beq.n	8009d66 <_strtol_l.constprop.0+0x1a>
 8009e32:	2a00      	cmp	r2, #0
 8009e34:	d1f6      	bne.n	8009e24 <_strtol_l.constprop.0+0xd8>
 8009e36:	f8c8 1000 	str.w	r1, [r8]
 8009e3a:	e794      	b.n	8009d66 <_strtol_l.constprop.0+0x1a>
 8009e3c:	08010399 	.word	0x08010399

08009e40 <_strtol_r>:
 8009e40:	f7ff bf84 	b.w	8009d4c <_strtol_l.constprop.0>

08009e44 <strtol>:
 8009e44:	4613      	mov	r3, r2
 8009e46:	460a      	mov	r2, r1
 8009e48:	4601      	mov	r1, r0
 8009e4a:	4802      	ldr	r0, [pc, #8]	@ (8009e54 <strtol+0x10>)
 8009e4c:	6800      	ldr	r0, [r0, #0]
 8009e4e:	f7ff bf7d 	b.w	8009d4c <_strtol_l.constprop.0>
 8009e52:	bf00      	nop
 8009e54:	2000019c 	.word	0x2000019c

08009e58 <__cvt>:
 8009e58:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009e5c:	ec57 6b10 	vmov	r6, r7, d0
 8009e60:	2f00      	cmp	r7, #0
 8009e62:	460c      	mov	r4, r1
 8009e64:	4619      	mov	r1, r3
 8009e66:	463b      	mov	r3, r7
 8009e68:	bfbb      	ittet	lt
 8009e6a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8009e6e:	461f      	movlt	r7, r3
 8009e70:	2300      	movge	r3, #0
 8009e72:	232d      	movlt	r3, #45	@ 0x2d
 8009e74:	700b      	strb	r3, [r1, #0]
 8009e76:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009e78:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8009e7c:	4691      	mov	r9, r2
 8009e7e:	f023 0820 	bic.w	r8, r3, #32
 8009e82:	bfbc      	itt	lt
 8009e84:	4632      	movlt	r2, r6
 8009e86:	4616      	movlt	r6, r2
 8009e88:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009e8c:	d005      	beq.n	8009e9a <__cvt+0x42>
 8009e8e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8009e92:	d100      	bne.n	8009e96 <__cvt+0x3e>
 8009e94:	3401      	adds	r4, #1
 8009e96:	2102      	movs	r1, #2
 8009e98:	e000      	b.n	8009e9c <__cvt+0x44>
 8009e9a:	2103      	movs	r1, #3
 8009e9c:	ab03      	add	r3, sp, #12
 8009e9e:	9301      	str	r3, [sp, #4]
 8009ea0:	ab02      	add	r3, sp, #8
 8009ea2:	9300      	str	r3, [sp, #0]
 8009ea4:	ec47 6b10 	vmov	d0, r6, r7
 8009ea8:	4653      	mov	r3, sl
 8009eaa:	4622      	mov	r2, r4
 8009eac:	f001 ff00 	bl	800bcb0 <_dtoa_r>
 8009eb0:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8009eb4:	4605      	mov	r5, r0
 8009eb6:	d119      	bne.n	8009eec <__cvt+0x94>
 8009eb8:	f019 0f01 	tst.w	r9, #1
 8009ebc:	d00e      	beq.n	8009edc <__cvt+0x84>
 8009ebe:	eb00 0904 	add.w	r9, r0, r4
 8009ec2:	2200      	movs	r2, #0
 8009ec4:	2300      	movs	r3, #0
 8009ec6:	4630      	mov	r0, r6
 8009ec8:	4639      	mov	r1, r7
 8009eca:	f7f6 fe0d 	bl	8000ae8 <__aeabi_dcmpeq>
 8009ece:	b108      	cbz	r0, 8009ed4 <__cvt+0x7c>
 8009ed0:	f8cd 900c 	str.w	r9, [sp, #12]
 8009ed4:	2230      	movs	r2, #48	@ 0x30
 8009ed6:	9b03      	ldr	r3, [sp, #12]
 8009ed8:	454b      	cmp	r3, r9
 8009eda:	d31e      	bcc.n	8009f1a <__cvt+0xc2>
 8009edc:	9b03      	ldr	r3, [sp, #12]
 8009ede:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009ee0:	1b5b      	subs	r3, r3, r5
 8009ee2:	4628      	mov	r0, r5
 8009ee4:	6013      	str	r3, [r2, #0]
 8009ee6:	b004      	add	sp, #16
 8009ee8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009eec:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009ef0:	eb00 0904 	add.w	r9, r0, r4
 8009ef4:	d1e5      	bne.n	8009ec2 <__cvt+0x6a>
 8009ef6:	7803      	ldrb	r3, [r0, #0]
 8009ef8:	2b30      	cmp	r3, #48	@ 0x30
 8009efa:	d10a      	bne.n	8009f12 <__cvt+0xba>
 8009efc:	2200      	movs	r2, #0
 8009efe:	2300      	movs	r3, #0
 8009f00:	4630      	mov	r0, r6
 8009f02:	4639      	mov	r1, r7
 8009f04:	f7f6 fdf0 	bl	8000ae8 <__aeabi_dcmpeq>
 8009f08:	b918      	cbnz	r0, 8009f12 <__cvt+0xba>
 8009f0a:	f1c4 0401 	rsb	r4, r4, #1
 8009f0e:	f8ca 4000 	str.w	r4, [sl]
 8009f12:	f8da 3000 	ldr.w	r3, [sl]
 8009f16:	4499      	add	r9, r3
 8009f18:	e7d3      	b.n	8009ec2 <__cvt+0x6a>
 8009f1a:	1c59      	adds	r1, r3, #1
 8009f1c:	9103      	str	r1, [sp, #12]
 8009f1e:	701a      	strb	r2, [r3, #0]
 8009f20:	e7d9      	b.n	8009ed6 <__cvt+0x7e>

08009f22 <__exponent>:
 8009f22:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009f24:	2900      	cmp	r1, #0
 8009f26:	bfba      	itte	lt
 8009f28:	4249      	neglt	r1, r1
 8009f2a:	232d      	movlt	r3, #45	@ 0x2d
 8009f2c:	232b      	movge	r3, #43	@ 0x2b
 8009f2e:	2909      	cmp	r1, #9
 8009f30:	7002      	strb	r2, [r0, #0]
 8009f32:	7043      	strb	r3, [r0, #1]
 8009f34:	dd29      	ble.n	8009f8a <__exponent+0x68>
 8009f36:	f10d 0307 	add.w	r3, sp, #7
 8009f3a:	461d      	mov	r5, r3
 8009f3c:	270a      	movs	r7, #10
 8009f3e:	461a      	mov	r2, r3
 8009f40:	fbb1 f6f7 	udiv	r6, r1, r7
 8009f44:	fb07 1416 	mls	r4, r7, r6, r1
 8009f48:	3430      	adds	r4, #48	@ 0x30
 8009f4a:	f802 4c01 	strb.w	r4, [r2, #-1]
 8009f4e:	460c      	mov	r4, r1
 8009f50:	2c63      	cmp	r4, #99	@ 0x63
 8009f52:	f103 33ff 	add.w	r3, r3, #4294967295
 8009f56:	4631      	mov	r1, r6
 8009f58:	dcf1      	bgt.n	8009f3e <__exponent+0x1c>
 8009f5a:	3130      	adds	r1, #48	@ 0x30
 8009f5c:	1e94      	subs	r4, r2, #2
 8009f5e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8009f62:	1c41      	adds	r1, r0, #1
 8009f64:	4623      	mov	r3, r4
 8009f66:	42ab      	cmp	r3, r5
 8009f68:	d30a      	bcc.n	8009f80 <__exponent+0x5e>
 8009f6a:	f10d 0309 	add.w	r3, sp, #9
 8009f6e:	1a9b      	subs	r3, r3, r2
 8009f70:	42ac      	cmp	r4, r5
 8009f72:	bf88      	it	hi
 8009f74:	2300      	movhi	r3, #0
 8009f76:	3302      	adds	r3, #2
 8009f78:	4403      	add	r3, r0
 8009f7a:	1a18      	subs	r0, r3, r0
 8009f7c:	b003      	add	sp, #12
 8009f7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009f80:	f813 6b01 	ldrb.w	r6, [r3], #1
 8009f84:	f801 6f01 	strb.w	r6, [r1, #1]!
 8009f88:	e7ed      	b.n	8009f66 <__exponent+0x44>
 8009f8a:	2330      	movs	r3, #48	@ 0x30
 8009f8c:	3130      	adds	r1, #48	@ 0x30
 8009f8e:	7083      	strb	r3, [r0, #2]
 8009f90:	70c1      	strb	r1, [r0, #3]
 8009f92:	1d03      	adds	r3, r0, #4
 8009f94:	e7f1      	b.n	8009f7a <__exponent+0x58>
	...

08009f98 <_printf_float>:
 8009f98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f9c:	b08d      	sub	sp, #52	@ 0x34
 8009f9e:	460c      	mov	r4, r1
 8009fa0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8009fa4:	4616      	mov	r6, r2
 8009fa6:	461f      	mov	r7, r3
 8009fa8:	4605      	mov	r5, r0
 8009faa:	f001 fd47 	bl	800ba3c <_localeconv_r>
 8009fae:	6803      	ldr	r3, [r0, #0]
 8009fb0:	9304      	str	r3, [sp, #16]
 8009fb2:	4618      	mov	r0, r3
 8009fb4:	f7f6 f96c 	bl	8000290 <strlen>
 8009fb8:	2300      	movs	r3, #0
 8009fba:	930a      	str	r3, [sp, #40]	@ 0x28
 8009fbc:	f8d8 3000 	ldr.w	r3, [r8]
 8009fc0:	9005      	str	r0, [sp, #20]
 8009fc2:	3307      	adds	r3, #7
 8009fc4:	f023 0307 	bic.w	r3, r3, #7
 8009fc8:	f103 0208 	add.w	r2, r3, #8
 8009fcc:	f894 a018 	ldrb.w	sl, [r4, #24]
 8009fd0:	f8d4 b000 	ldr.w	fp, [r4]
 8009fd4:	f8c8 2000 	str.w	r2, [r8]
 8009fd8:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009fdc:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8009fe0:	9307      	str	r3, [sp, #28]
 8009fe2:	f8cd 8018 	str.w	r8, [sp, #24]
 8009fe6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8009fea:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009fee:	4b9c      	ldr	r3, [pc, #624]	@ (800a260 <_printf_float+0x2c8>)
 8009ff0:	f04f 32ff 	mov.w	r2, #4294967295
 8009ff4:	f7f6 fdaa 	bl	8000b4c <__aeabi_dcmpun>
 8009ff8:	bb70      	cbnz	r0, 800a058 <_printf_float+0xc0>
 8009ffa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009ffe:	4b98      	ldr	r3, [pc, #608]	@ (800a260 <_printf_float+0x2c8>)
 800a000:	f04f 32ff 	mov.w	r2, #4294967295
 800a004:	f7f6 fd84 	bl	8000b10 <__aeabi_dcmple>
 800a008:	bb30      	cbnz	r0, 800a058 <_printf_float+0xc0>
 800a00a:	2200      	movs	r2, #0
 800a00c:	2300      	movs	r3, #0
 800a00e:	4640      	mov	r0, r8
 800a010:	4649      	mov	r1, r9
 800a012:	f7f6 fd73 	bl	8000afc <__aeabi_dcmplt>
 800a016:	b110      	cbz	r0, 800a01e <_printf_float+0x86>
 800a018:	232d      	movs	r3, #45	@ 0x2d
 800a01a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a01e:	4a91      	ldr	r2, [pc, #580]	@ (800a264 <_printf_float+0x2cc>)
 800a020:	4b91      	ldr	r3, [pc, #580]	@ (800a268 <_printf_float+0x2d0>)
 800a022:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800a026:	bf94      	ite	ls
 800a028:	4690      	movls	r8, r2
 800a02a:	4698      	movhi	r8, r3
 800a02c:	2303      	movs	r3, #3
 800a02e:	6123      	str	r3, [r4, #16]
 800a030:	f02b 0304 	bic.w	r3, fp, #4
 800a034:	6023      	str	r3, [r4, #0]
 800a036:	f04f 0900 	mov.w	r9, #0
 800a03a:	9700      	str	r7, [sp, #0]
 800a03c:	4633      	mov	r3, r6
 800a03e:	aa0b      	add	r2, sp, #44	@ 0x2c
 800a040:	4621      	mov	r1, r4
 800a042:	4628      	mov	r0, r5
 800a044:	f000 f9d2 	bl	800a3ec <_printf_common>
 800a048:	3001      	adds	r0, #1
 800a04a:	f040 808d 	bne.w	800a168 <_printf_float+0x1d0>
 800a04e:	f04f 30ff 	mov.w	r0, #4294967295
 800a052:	b00d      	add	sp, #52	@ 0x34
 800a054:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a058:	4642      	mov	r2, r8
 800a05a:	464b      	mov	r3, r9
 800a05c:	4640      	mov	r0, r8
 800a05e:	4649      	mov	r1, r9
 800a060:	f7f6 fd74 	bl	8000b4c <__aeabi_dcmpun>
 800a064:	b140      	cbz	r0, 800a078 <_printf_float+0xe0>
 800a066:	464b      	mov	r3, r9
 800a068:	2b00      	cmp	r3, #0
 800a06a:	bfbc      	itt	lt
 800a06c:	232d      	movlt	r3, #45	@ 0x2d
 800a06e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800a072:	4a7e      	ldr	r2, [pc, #504]	@ (800a26c <_printf_float+0x2d4>)
 800a074:	4b7e      	ldr	r3, [pc, #504]	@ (800a270 <_printf_float+0x2d8>)
 800a076:	e7d4      	b.n	800a022 <_printf_float+0x8a>
 800a078:	6863      	ldr	r3, [r4, #4]
 800a07a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800a07e:	9206      	str	r2, [sp, #24]
 800a080:	1c5a      	adds	r2, r3, #1
 800a082:	d13b      	bne.n	800a0fc <_printf_float+0x164>
 800a084:	2306      	movs	r3, #6
 800a086:	6063      	str	r3, [r4, #4]
 800a088:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800a08c:	2300      	movs	r3, #0
 800a08e:	6022      	str	r2, [r4, #0]
 800a090:	9303      	str	r3, [sp, #12]
 800a092:	ab0a      	add	r3, sp, #40	@ 0x28
 800a094:	e9cd a301 	strd	sl, r3, [sp, #4]
 800a098:	ab09      	add	r3, sp, #36	@ 0x24
 800a09a:	9300      	str	r3, [sp, #0]
 800a09c:	6861      	ldr	r1, [r4, #4]
 800a09e:	ec49 8b10 	vmov	d0, r8, r9
 800a0a2:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800a0a6:	4628      	mov	r0, r5
 800a0a8:	f7ff fed6 	bl	8009e58 <__cvt>
 800a0ac:	9b06      	ldr	r3, [sp, #24]
 800a0ae:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a0b0:	2b47      	cmp	r3, #71	@ 0x47
 800a0b2:	4680      	mov	r8, r0
 800a0b4:	d129      	bne.n	800a10a <_printf_float+0x172>
 800a0b6:	1cc8      	adds	r0, r1, #3
 800a0b8:	db02      	blt.n	800a0c0 <_printf_float+0x128>
 800a0ba:	6863      	ldr	r3, [r4, #4]
 800a0bc:	4299      	cmp	r1, r3
 800a0be:	dd41      	ble.n	800a144 <_printf_float+0x1ac>
 800a0c0:	f1aa 0a02 	sub.w	sl, sl, #2
 800a0c4:	fa5f fa8a 	uxtb.w	sl, sl
 800a0c8:	3901      	subs	r1, #1
 800a0ca:	4652      	mov	r2, sl
 800a0cc:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800a0d0:	9109      	str	r1, [sp, #36]	@ 0x24
 800a0d2:	f7ff ff26 	bl	8009f22 <__exponent>
 800a0d6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a0d8:	1813      	adds	r3, r2, r0
 800a0da:	2a01      	cmp	r2, #1
 800a0dc:	4681      	mov	r9, r0
 800a0de:	6123      	str	r3, [r4, #16]
 800a0e0:	dc02      	bgt.n	800a0e8 <_printf_float+0x150>
 800a0e2:	6822      	ldr	r2, [r4, #0]
 800a0e4:	07d2      	lsls	r2, r2, #31
 800a0e6:	d501      	bpl.n	800a0ec <_printf_float+0x154>
 800a0e8:	3301      	adds	r3, #1
 800a0ea:	6123      	str	r3, [r4, #16]
 800a0ec:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d0a2      	beq.n	800a03a <_printf_float+0xa2>
 800a0f4:	232d      	movs	r3, #45	@ 0x2d
 800a0f6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a0fa:	e79e      	b.n	800a03a <_printf_float+0xa2>
 800a0fc:	9a06      	ldr	r2, [sp, #24]
 800a0fe:	2a47      	cmp	r2, #71	@ 0x47
 800a100:	d1c2      	bne.n	800a088 <_printf_float+0xf0>
 800a102:	2b00      	cmp	r3, #0
 800a104:	d1c0      	bne.n	800a088 <_printf_float+0xf0>
 800a106:	2301      	movs	r3, #1
 800a108:	e7bd      	b.n	800a086 <_printf_float+0xee>
 800a10a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a10e:	d9db      	bls.n	800a0c8 <_printf_float+0x130>
 800a110:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800a114:	d118      	bne.n	800a148 <_printf_float+0x1b0>
 800a116:	2900      	cmp	r1, #0
 800a118:	6863      	ldr	r3, [r4, #4]
 800a11a:	dd0b      	ble.n	800a134 <_printf_float+0x19c>
 800a11c:	6121      	str	r1, [r4, #16]
 800a11e:	b913      	cbnz	r3, 800a126 <_printf_float+0x18e>
 800a120:	6822      	ldr	r2, [r4, #0]
 800a122:	07d0      	lsls	r0, r2, #31
 800a124:	d502      	bpl.n	800a12c <_printf_float+0x194>
 800a126:	3301      	adds	r3, #1
 800a128:	440b      	add	r3, r1
 800a12a:	6123      	str	r3, [r4, #16]
 800a12c:	65a1      	str	r1, [r4, #88]	@ 0x58
 800a12e:	f04f 0900 	mov.w	r9, #0
 800a132:	e7db      	b.n	800a0ec <_printf_float+0x154>
 800a134:	b913      	cbnz	r3, 800a13c <_printf_float+0x1a4>
 800a136:	6822      	ldr	r2, [r4, #0]
 800a138:	07d2      	lsls	r2, r2, #31
 800a13a:	d501      	bpl.n	800a140 <_printf_float+0x1a8>
 800a13c:	3302      	adds	r3, #2
 800a13e:	e7f4      	b.n	800a12a <_printf_float+0x192>
 800a140:	2301      	movs	r3, #1
 800a142:	e7f2      	b.n	800a12a <_printf_float+0x192>
 800a144:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800a148:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a14a:	4299      	cmp	r1, r3
 800a14c:	db05      	blt.n	800a15a <_printf_float+0x1c2>
 800a14e:	6823      	ldr	r3, [r4, #0]
 800a150:	6121      	str	r1, [r4, #16]
 800a152:	07d8      	lsls	r0, r3, #31
 800a154:	d5ea      	bpl.n	800a12c <_printf_float+0x194>
 800a156:	1c4b      	adds	r3, r1, #1
 800a158:	e7e7      	b.n	800a12a <_printf_float+0x192>
 800a15a:	2900      	cmp	r1, #0
 800a15c:	bfd4      	ite	le
 800a15e:	f1c1 0202 	rsble	r2, r1, #2
 800a162:	2201      	movgt	r2, #1
 800a164:	4413      	add	r3, r2
 800a166:	e7e0      	b.n	800a12a <_printf_float+0x192>
 800a168:	6823      	ldr	r3, [r4, #0]
 800a16a:	055a      	lsls	r2, r3, #21
 800a16c:	d407      	bmi.n	800a17e <_printf_float+0x1e6>
 800a16e:	6923      	ldr	r3, [r4, #16]
 800a170:	4642      	mov	r2, r8
 800a172:	4631      	mov	r1, r6
 800a174:	4628      	mov	r0, r5
 800a176:	47b8      	blx	r7
 800a178:	3001      	adds	r0, #1
 800a17a:	d12b      	bne.n	800a1d4 <_printf_float+0x23c>
 800a17c:	e767      	b.n	800a04e <_printf_float+0xb6>
 800a17e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a182:	f240 80dd 	bls.w	800a340 <_printf_float+0x3a8>
 800a186:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a18a:	2200      	movs	r2, #0
 800a18c:	2300      	movs	r3, #0
 800a18e:	f7f6 fcab 	bl	8000ae8 <__aeabi_dcmpeq>
 800a192:	2800      	cmp	r0, #0
 800a194:	d033      	beq.n	800a1fe <_printf_float+0x266>
 800a196:	4a37      	ldr	r2, [pc, #220]	@ (800a274 <_printf_float+0x2dc>)
 800a198:	2301      	movs	r3, #1
 800a19a:	4631      	mov	r1, r6
 800a19c:	4628      	mov	r0, r5
 800a19e:	47b8      	blx	r7
 800a1a0:	3001      	adds	r0, #1
 800a1a2:	f43f af54 	beq.w	800a04e <_printf_float+0xb6>
 800a1a6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800a1aa:	4543      	cmp	r3, r8
 800a1ac:	db02      	blt.n	800a1b4 <_printf_float+0x21c>
 800a1ae:	6823      	ldr	r3, [r4, #0]
 800a1b0:	07d8      	lsls	r0, r3, #31
 800a1b2:	d50f      	bpl.n	800a1d4 <_printf_float+0x23c>
 800a1b4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a1b8:	4631      	mov	r1, r6
 800a1ba:	4628      	mov	r0, r5
 800a1bc:	47b8      	blx	r7
 800a1be:	3001      	adds	r0, #1
 800a1c0:	f43f af45 	beq.w	800a04e <_printf_float+0xb6>
 800a1c4:	f04f 0900 	mov.w	r9, #0
 800a1c8:	f108 38ff 	add.w	r8, r8, #4294967295
 800a1cc:	f104 0a1a 	add.w	sl, r4, #26
 800a1d0:	45c8      	cmp	r8, r9
 800a1d2:	dc09      	bgt.n	800a1e8 <_printf_float+0x250>
 800a1d4:	6823      	ldr	r3, [r4, #0]
 800a1d6:	079b      	lsls	r3, r3, #30
 800a1d8:	f100 8103 	bmi.w	800a3e2 <_printf_float+0x44a>
 800a1dc:	68e0      	ldr	r0, [r4, #12]
 800a1de:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a1e0:	4298      	cmp	r0, r3
 800a1e2:	bfb8      	it	lt
 800a1e4:	4618      	movlt	r0, r3
 800a1e6:	e734      	b.n	800a052 <_printf_float+0xba>
 800a1e8:	2301      	movs	r3, #1
 800a1ea:	4652      	mov	r2, sl
 800a1ec:	4631      	mov	r1, r6
 800a1ee:	4628      	mov	r0, r5
 800a1f0:	47b8      	blx	r7
 800a1f2:	3001      	adds	r0, #1
 800a1f4:	f43f af2b 	beq.w	800a04e <_printf_float+0xb6>
 800a1f8:	f109 0901 	add.w	r9, r9, #1
 800a1fc:	e7e8      	b.n	800a1d0 <_printf_float+0x238>
 800a1fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a200:	2b00      	cmp	r3, #0
 800a202:	dc39      	bgt.n	800a278 <_printf_float+0x2e0>
 800a204:	4a1b      	ldr	r2, [pc, #108]	@ (800a274 <_printf_float+0x2dc>)
 800a206:	2301      	movs	r3, #1
 800a208:	4631      	mov	r1, r6
 800a20a:	4628      	mov	r0, r5
 800a20c:	47b8      	blx	r7
 800a20e:	3001      	adds	r0, #1
 800a210:	f43f af1d 	beq.w	800a04e <_printf_float+0xb6>
 800a214:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800a218:	ea59 0303 	orrs.w	r3, r9, r3
 800a21c:	d102      	bne.n	800a224 <_printf_float+0x28c>
 800a21e:	6823      	ldr	r3, [r4, #0]
 800a220:	07d9      	lsls	r1, r3, #31
 800a222:	d5d7      	bpl.n	800a1d4 <_printf_float+0x23c>
 800a224:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a228:	4631      	mov	r1, r6
 800a22a:	4628      	mov	r0, r5
 800a22c:	47b8      	blx	r7
 800a22e:	3001      	adds	r0, #1
 800a230:	f43f af0d 	beq.w	800a04e <_printf_float+0xb6>
 800a234:	f04f 0a00 	mov.w	sl, #0
 800a238:	f104 0b1a 	add.w	fp, r4, #26
 800a23c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a23e:	425b      	negs	r3, r3
 800a240:	4553      	cmp	r3, sl
 800a242:	dc01      	bgt.n	800a248 <_printf_float+0x2b0>
 800a244:	464b      	mov	r3, r9
 800a246:	e793      	b.n	800a170 <_printf_float+0x1d8>
 800a248:	2301      	movs	r3, #1
 800a24a:	465a      	mov	r2, fp
 800a24c:	4631      	mov	r1, r6
 800a24e:	4628      	mov	r0, r5
 800a250:	47b8      	blx	r7
 800a252:	3001      	adds	r0, #1
 800a254:	f43f aefb 	beq.w	800a04e <_printf_float+0xb6>
 800a258:	f10a 0a01 	add.w	sl, sl, #1
 800a25c:	e7ee      	b.n	800a23c <_printf_float+0x2a4>
 800a25e:	bf00      	nop
 800a260:	7fefffff 	.word	0x7fefffff
 800a264:	08010499 	.word	0x08010499
 800a268:	0801049d 	.word	0x0801049d
 800a26c:	080104a1 	.word	0x080104a1
 800a270:	080104a5 	.word	0x080104a5
 800a274:	080107ef 	.word	0x080107ef
 800a278:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a27a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800a27e:	4553      	cmp	r3, sl
 800a280:	bfa8      	it	ge
 800a282:	4653      	movge	r3, sl
 800a284:	2b00      	cmp	r3, #0
 800a286:	4699      	mov	r9, r3
 800a288:	dc36      	bgt.n	800a2f8 <_printf_float+0x360>
 800a28a:	f04f 0b00 	mov.w	fp, #0
 800a28e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a292:	f104 021a 	add.w	r2, r4, #26
 800a296:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a298:	9306      	str	r3, [sp, #24]
 800a29a:	eba3 0309 	sub.w	r3, r3, r9
 800a29e:	455b      	cmp	r3, fp
 800a2a0:	dc31      	bgt.n	800a306 <_printf_float+0x36e>
 800a2a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a2a4:	459a      	cmp	sl, r3
 800a2a6:	dc3a      	bgt.n	800a31e <_printf_float+0x386>
 800a2a8:	6823      	ldr	r3, [r4, #0]
 800a2aa:	07da      	lsls	r2, r3, #31
 800a2ac:	d437      	bmi.n	800a31e <_printf_float+0x386>
 800a2ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a2b0:	ebaa 0903 	sub.w	r9, sl, r3
 800a2b4:	9b06      	ldr	r3, [sp, #24]
 800a2b6:	ebaa 0303 	sub.w	r3, sl, r3
 800a2ba:	4599      	cmp	r9, r3
 800a2bc:	bfa8      	it	ge
 800a2be:	4699      	movge	r9, r3
 800a2c0:	f1b9 0f00 	cmp.w	r9, #0
 800a2c4:	dc33      	bgt.n	800a32e <_printf_float+0x396>
 800a2c6:	f04f 0800 	mov.w	r8, #0
 800a2ca:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a2ce:	f104 0b1a 	add.w	fp, r4, #26
 800a2d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a2d4:	ebaa 0303 	sub.w	r3, sl, r3
 800a2d8:	eba3 0309 	sub.w	r3, r3, r9
 800a2dc:	4543      	cmp	r3, r8
 800a2de:	f77f af79 	ble.w	800a1d4 <_printf_float+0x23c>
 800a2e2:	2301      	movs	r3, #1
 800a2e4:	465a      	mov	r2, fp
 800a2e6:	4631      	mov	r1, r6
 800a2e8:	4628      	mov	r0, r5
 800a2ea:	47b8      	blx	r7
 800a2ec:	3001      	adds	r0, #1
 800a2ee:	f43f aeae 	beq.w	800a04e <_printf_float+0xb6>
 800a2f2:	f108 0801 	add.w	r8, r8, #1
 800a2f6:	e7ec      	b.n	800a2d2 <_printf_float+0x33a>
 800a2f8:	4642      	mov	r2, r8
 800a2fa:	4631      	mov	r1, r6
 800a2fc:	4628      	mov	r0, r5
 800a2fe:	47b8      	blx	r7
 800a300:	3001      	adds	r0, #1
 800a302:	d1c2      	bne.n	800a28a <_printf_float+0x2f2>
 800a304:	e6a3      	b.n	800a04e <_printf_float+0xb6>
 800a306:	2301      	movs	r3, #1
 800a308:	4631      	mov	r1, r6
 800a30a:	4628      	mov	r0, r5
 800a30c:	9206      	str	r2, [sp, #24]
 800a30e:	47b8      	blx	r7
 800a310:	3001      	adds	r0, #1
 800a312:	f43f ae9c 	beq.w	800a04e <_printf_float+0xb6>
 800a316:	9a06      	ldr	r2, [sp, #24]
 800a318:	f10b 0b01 	add.w	fp, fp, #1
 800a31c:	e7bb      	b.n	800a296 <_printf_float+0x2fe>
 800a31e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a322:	4631      	mov	r1, r6
 800a324:	4628      	mov	r0, r5
 800a326:	47b8      	blx	r7
 800a328:	3001      	adds	r0, #1
 800a32a:	d1c0      	bne.n	800a2ae <_printf_float+0x316>
 800a32c:	e68f      	b.n	800a04e <_printf_float+0xb6>
 800a32e:	9a06      	ldr	r2, [sp, #24]
 800a330:	464b      	mov	r3, r9
 800a332:	4442      	add	r2, r8
 800a334:	4631      	mov	r1, r6
 800a336:	4628      	mov	r0, r5
 800a338:	47b8      	blx	r7
 800a33a:	3001      	adds	r0, #1
 800a33c:	d1c3      	bne.n	800a2c6 <_printf_float+0x32e>
 800a33e:	e686      	b.n	800a04e <_printf_float+0xb6>
 800a340:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800a344:	f1ba 0f01 	cmp.w	sl, #1
 800a348:	dc01      	bgt.n	800a34e <_printf_float+0x3b6>
 800a34a:	07db      	lsls	r3, r3, #31
 800a34c:	d536      	bpl.n	800a3bc <_printf_float+0x424>
 800a34e:	2301      	movs	r3, #1
 800a350:	4642      	mov	r2, r8
 800a352:	4631      	mov	r1, r6
 800a354:	4628      	mov	r0, r5
 800a356:	47b8      	blx	r7
 800a358:	3001      	adds	r0, #1
 800a35a:	f43f ae78 	beq.w	800a04e <_printf_float+0xb6>
 800a35e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a362:	4631      	mov	r1, r6
 800a364:	4628      	mov	r0, r5
 800a366:	47b8      	blx	r7
 800a368:	3001      	adds	r0, #1
 800a36a:	f43f ae70 	beq.w	800a04e <_printf_float+0xb6>
 800a36e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a372:	2200      	movs	r2, #0
 800a374:	2300      	movs	r3, #0
 800a376:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a37a:	f7f6 fbb5 	bl	8000ae8 <__aeabi_dcmpeq>
 800a37e:	b9c0      	cbnz	r0, 800a3b2 <_printf_float+0x41a>
 800a380:	4653      	mov	r3, sl
 800a382:	f108 0201 	add.w	r2, r8, #1
 800a386:	4631      	mov	r1, r6
 800a388:	4628      	mov	r0, r5
 800a38a:	47b8      	blx	r7
 800a38c:	3001      	adds	r0, #1
 800a38e:	d10c      	bne.n	800a3aa <_printf_float+0x412>
 800a390:	e65d      	b.n	800a04e <_printf_float+0xb6>
 800a392:	2301      	movs	r3, #1
 800a394:	465a      	mov	r2, fp
 800a396:	4631      	mov	r1, r6
 800a398:	4628      	mov	r0, r5
 800a39a:	47b8      	blx	r7
 800a39c:	3001      	adds	r0, #1
 800a39e:	f43f ae56 	beq.w	800a04e <_printf_float+0xb6>
 800a3a2:	f108 0801 	add.w	r8, r8, #1
 800a3a6:	45d0      	cmp	r8, sl
 800a3a8:	dbf3      	blt.n	800a392 <_printf_float+0x3fa>
 800a3aa:	464b      	mov	r3, r9
 800a3ac:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800a3b0:	e6df      	b.n	800a172 <_printf_float+0x1da>
 800a3b2:	f04f 0800 	mov.w	r8, #0
 800a3b6:	f104 0b1a 	add.w	fp, r4, #26
 800a3ba:	e7f4      	b.n	800a3a6 <_printf_float+0x40e>
 800a3bc:	2301      	movs	r3, #1
 800a3be:	4642      	mov	r2, r8
 800a3c0:	e7e1      	b.n	800a386 <_printf_float+0x3ee>
 800a3c2:	2301      	movs	r3, #1
 800a3c4:	464a      	mov	r2, r9
 800a3c6:	4631      	mov	r1, r6
 800a3c8:	4628      	mov	r0, r5
 800a3ca:	47b8      	blx	r7
 800a3cc:	3001      	adds	r0, #1
 800a3ce:	f43f ae3e 	beq.w	800a04e <_printf_float+0xb6>
 800a3d2:	f108 0801 	add.w	r8, r8, #1
 800a3d6:	68e3      	ldr	r3, [r4, #12]
 800a3d8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a3da:	1a5b      	subs	r3, r3, r1
 800a3dc:	4543      	cmp	r3, r8
 800a3de:	dcf0      	bgt.n	800a3c2 <_printf_float+0x42a>
 800a3e0:	e6fc      	b.n	800a1dc <_printf_float+0x244>
 800a3e2:	f04f 0800 	mov.w	r8, #0
 800a3e6:	f104 0919 	add.w	r9, r4, #25
 800a3ea:	e7f4      	b.n	800a3d6 <_printf_float+0x43e>

0800a3ec <_printf_common>:
 800a3ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a3f0:	4616      	mov	r6, r2
 800a3f2:	4698      	mov	r8, r3
 800a3f4:	688a      	ldr	r2, [r1, #8]
 800a3f6:	690b      	ldr	r3, [r1, #16]
 800a3f8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a3fc:	4293      	cmp	r3, r2
 800a3fe:	bfb8      	it	lt
 800a400:	4613      	movlt	r3, r2
 800a402:	6033      	str	r3, [r6, #0]
 800a404:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a408:	4607      	mov	r7, r0
 800a40a:	460c      	mov	r4, r1
 800a40c:	b10a      	cbz	r2, 800a412 <_printf_common+0x26>
 800a40e:	3301      	adds	r3, #1
 800a410:	6033      	str	r3, [r6, #0]
 800a412:	6823      	ldr	r3, [r4, #0]
 800a414:	0699      	lsls	r1, r3, #26
 800a416:	bf42      	ittt	mi
 800a418:	6833      	ldrmi	r3, [r6, #0]
 800a41a:	3302      	addmi	r3, #2
 800a41c:	6033      	strmi	r3, [r6, #0]
 800a41e:	6825      	ldr	r5, [r4, #0]
 800a420:	f015 0506 	ands.w	r5, r5, #6
 800a424:	d106      	bne.n	800a434 <_printf_common+0x48>
 800a426:	f104 0a19 	add.w	sl, r4, #25
 800a42a:	68e3      	ldr	r3, [r4, #12]
 800a42c:	6832      	ldr	r2, [r6, #0]
 800a42e:	1a9b      	subs	r3, r3, r2
 800a430:	42ab      	cmp	r3, r5
 800a432:	dc26      	bgt.n	800a482 <_printf_common+0x96>
 800a434:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a438:	6822      	ldr	r2, [r4, #0]
 800a43a:	3b00      	subs	r3, #0
 800a43c:	bf18      	it	ne
 800a43e:	2301      	movne	r3, #1
 800a440:	0692      	lsls	r2, r2, #26
 800a442:	d42b      	bmi.n	800a49c <_printf_common+0xb0>
 800a444:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a448:	4641      	mov	r1, r8
 800a44a:	4638      	mov	r0, r7
 800a44c:	47c8      	blx	r9
 800a44e:	3001      	adds	r0, #1
 800a450:	d01e      	beq.n	800a490 <_printf_common+0xa4>
 800a452:	6823      	ldr	r3, [r4, #0]
 800a454:	6922      	ldr	r2, [r4, #16]
 800a456:	f003 0306 	and.w	r3, r3, #6
 800a45a:	2b04      	cmp	r3, #4
 800a45c:	bf02      	ittt	eq
 800a45e:	68e5      	ldreq	r5, [r4, #12]
 800a460:	6833      	ldreq	r3, [r6, #0]
 800a462:	1aed      	subeq	r5, r5, r3
 800a464:	68a3      	ldr	r3, [r4, #8]
 800a466:	bf0c      	ite	eq
 800a468:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a46c:	2500      	movne	r5, #0
 800a46e:	4293      	cmp	r3, r2
 800a470:	bfc4      	itt	gt
 800a472:	1a9b      	subgt	r3, r3, r2
 800a474:	18ed      	addgt	r5, r5, r3
 800a476:	2600      	movs	r6, #0
 800a478:	341a      	adds	r4, #26
 800a47a:	42b5      	cmp	r5, r6
 800a47c:	d11a      	bne.n	800a4b4 <_printf_common+0xc8>
 800a47e:	2000      	movs	r0, #0
 800a480:	e008      	b.n	800a494 <_printf_common+0xa8>
 800a482:	2301      	movs	r3, #1
 800a484:	4652      	mov	r2, sl
 800a486:	4641      	mov	r1, r8
 800a488:	4638      	mov	r0, r7
 800a48a:	47c8      	blx	r9
 800a48c:	3001      	adds	r0, #1
 800a48e:	d103      	bne.n	800a498 <_printf_common+0xac>
 800a490:	f04f 30ff 	mov.w	r0, #4294967295
 800a494:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a498:	3501      	adds	r5, #1
 800a49a:	e7c6      	b.n	800a42a <_printf_common+0x3e>
 800a49c:	18e1      	adds	r1, r4, r3
 800a49e:	1c5a      	adds	r2, r3, #1
 800a4a0:	2030      	movs	r0, #48	@ 0x30
 800a4a2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a4a6:	4422      	add	r2, r4
 800a4a8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a4ac:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a4b0:	3302      	adds	r3, #2
 800a4b2:	e7c7      	b.n	800a444 <_printf_common+0x58>
 800a4b4:	2301      	movs	r3, #1
 800a4b6:	4622      	mov	r2, r4
 800a4b8:	4641      	mov	r1, r8
 800a4ba:	4638      	mov	r0, r7
 800a4bc:	47c8      	blx	r9
 800a4be:	3001      	adds	r0, #1
 800a4c0:	d0e6      	beq.n	800a490 <_printf_common+0xa4>
 800a4c2:	3601      	adds	r6, #1
 800a4c4:	e7d9      	b.n	800a47a <_printf_common+0x8e>
	...

0800a4c8 <_printf_i>:
 800a4c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a4cc:	7e0f      	ldrb	r7, [r1, #24]
 800a4ce:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a4d0:	2f78      	cmp	r7, #120	@ 0x78
 800a4d2:	4691      	mov	r9, r2
 800a4d4:	4680      	mov	r8, r0
 800a4d6:	460c      	mov	r4, r1
 800a4d8:	469a      	mov	sl, r3
 800a4da:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a4de:	d807      	bhi.n	800a4f0 <_printf_i+0x28>
 800a4e0:	2f62      	cmp	r7, #98	@ 0x62
 800a4e2:	d80a      	bhi.n	800a4fa <_printf_i+0x32>
 800a4e4:	2f00      	cmp	r7, #0
 800a4e6:	f000 80d2 	beq.w	800a68e <_printf_i+0x1c6>
 800a4ea:	2f58      	cmp	r7, #88	@ 0x58
 800a4ec:	f000 80b9 	beq.w	800a662 <_printf_i+0x19a>
 800a4f0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a4f4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a4f8:	e03a      	b.n	800a570 <_printf_i+0xa8>
 800a4fa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a4fe:	2b15      	cmp	r3, #21
 800a500:	d8f6      	bhi.n	800a4f0 <_printf_i+0x28>
 800a502:	a101      	add	r1, pc, #4	@ (adr r1, 800a508 <_printf_i+0x40>)
 800a504:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a508:	0800a561 	.word	0x0800a561
 800a50c:	0800a575 	.word	0x0800a575
 800a510:	0800a4f1 	.word	0x0800a4f1
 800a514:	0800a4f1 	.word	0x0800a4f1
 800a518:	0800a4f1 	.word	0x0800a4f1
 800a51c:	0800a4f1 	.word	0x0800a4f1
 800a520:	0800a575 	.word	0x0800a575
 800a524:	0800a4f1 	.word	0x0800a4f1
 800a528:	0800a4f1 	.word	0x0800a4f1
 800a52c:	0800a4f1 	.word	0x0800a4f1
 800a530:	0800a4f1 	.word	0x0800a4f1
 800a534:	0800a675 	.word	0x0800a675
 800a538:	0800a59f 	.word	0x0800a59f
 800a53c:	0800a62f 	.word	0x0800a62f
 800a540:	0800a4f1 	.word	0x0800a4f1
 800a544:	0800a4f1 	.word	0x0800a4f1
 800a548:	0800a697 	.word	0x0800a697
 800a54c:	0800a4f1 	.word	0x0800a4f1
 800a550:	0800a59f 	.word	0x0800a59f
 800a554:	0800a4f1 	.word	0x0800a4f1
 800a558:	0800a4f1 	.word	0x0800a4f1
 800a55c:	0800a637 	.word	0x0800a637
 800a560:	6833      	ldr	r3, [r6, #0]
 800a562:	1d1a      	adds	r2, r3, #4
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	6032      	str	r2, [r6, #0]
 800a568:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a56c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a570:	2301      	movs	r3, #1
 800a572:	e09d      	b.n	800a6b0 <_printf_i+0x1e8>
 800a574:	6833      	ldr	r3, [r6, #0]
 800a576:	6820      	ldr	r0, [r4, #0]
 800a578:	1d19      	adds	r1, r3, #4
 800a57a:	6031      	str	r1, [r6, #0]
 800a57c:	0606      	lsls	r6, r0, #24
 800a57e:	d501      	bpl.n	800a584 <_printf_i+0xbc>
 800a580:	681d      	ldr	r5, [r3, #0]
 800a582:	e003      	b.n	800a58c <_printf_i+0xc4>
 800a584:	0645      	lsls	r5, r0, #25
 800a586:	d5fb      	bpl.n	800a580 <_printf_i+0xb8>
 800a588:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a58c:	2d00      	cmp	r5, #0
 800a58e:	da03      	bge.n	800a598 <_printf_i+0xd0>
 800a590:	232d      	movs	r3, #45	@ 0x2d
 800a592:	426d      	negs	r5, r5
 800a594:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a598:	4859      	ldr	r0, [pc, #356]	@ (800a700 <_printf_i+0x238>)
 800a59a:	230a      	movs	r3, #10
 800a59c:	e011      	b.n	800a5c2 <_printf_i+0xfa>
 800a59e:	6821      	ldr	r1, [r4, #0]
 800a5a0:	6833      	ldr	r3, [r6, #0]
 800a5a2:	0608      	lsls	r0, r1, #24
 800a5a4:	f853 5b04 	ldr.w	r5, [r3], #4
 800a5a8:	d402      	bmi.n	800a5b0 <_printf_i+0xe8>
 800a5aa:	0649      	lsls	r1, r1, #25
 800a5ac:	bf48      	it	mi
 800a5ae:	b2ad      	uxthmi	r5, r5
 800a5b0:	2f6f      	cmp	r7, #111	@ 0x6f
 800a5b2:	4853      	ldr	r0, [pc, #332]	@ (800a700 <_printf_i+0x238>)
 800a5b4:	6033      	str	r3, [r6, #0]
 800a5b6:	bf14      	ite	ne
 800a5b8:	230a      	movne	r3, #10
 800a5ba:	2308      	moveq	r3, #8
 800a5bc:	2100      	movs	r1, #0
 800a5be:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a5c2:	6866      	ldr	r6, [r4, #4]
 800a5c4:	60a6      	str	r6, [r4, #8]
 800a5c6:	2e00      	cmp	r6, #0
 800a5c8:	bfa2      	ittt	ge
 800a5ca:	6821      	ldrge	r1, [r4, #0]
 800a5cc:	f021 0104 	bicge.w	r1, r1, #4
 800a5d0:	6021      	strge	r1, [r4, #0]
 800a5d2:	b90d      	cbnz	r5, 800a5d8 <_printf_i+0x110>
 800a5d4:	2e00      	cmp	r6, #0
 800a5d6:	d04b      	beq.n	800a670 <_printf_i+0x1a8>
 800a5d8:	4616      	mov	r6, r2
 800a5da:	fbb5 f1f3 	udiv	r1, r5, r3
 800a5de:	fb03 5711 	mls	r7, r3, r1, r5
 800a5e2:	5dc7      	ldrb	r7, [r0, r7]
 800a5e4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a5e8:	462f      	mov	r7, r5
 800a5ea:	42bb      	cmp	r3, r7
 800a5ec:	460d      	mov	r5, r1
 800a5ee:	d9f4      	bls.n	800a5da <_printf_i+0x112>
 800a5f0:	2b08      	cmp	r3, #8
 800a5f2:	d10b      	bne.n	800a60c <_printf_i+0x144>
 800a5f4:	6823      	ldr	r3, [r4, #0]
 800a5f6:	07df      	lsls	r7, r3, #31
 800a5f8:	d508      	bpl.n	800a60c <_printf_i+0x144>
 800a5fa:	6923      	ldr	r3, [r4, #16]
 800a5fc:	6861      	ldr	r1, [r4, #4]
 800a5fe:	4299      	cmp	r1, r3
 800a600:	bfde      	ittt	le
 800a602:	2330      	movle	r3, #48	@ 0x30
 800a604:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a608:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a60c:	1b92      	subs	r2, r2, r6
 800a60e:	6122      	str	r2, [r4, #16]
 800a610:	f8cd a000 	str.w	sl, [sp]
 800a614:	464b      	mov	r3, r9
 800a616:	aa03      	add	r2, sp, #12
 800a618:	4621      	mov	r1, r4
 800a61a:	4640      	mov	r0, r8
 800a61c:	f7ff fee6 	bl	800a3ec <_printf_common>
 800a620:	3001      	adds	r0, #1
 800a622:	d14a      	bne.n	800a6ba <_printf_i+0x1f2>
 800a624:	f04f 30ff 	mov.w	r0, #4294967295
 800a628:	b004      	add	sp, #16
 800a62a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a62e:	6823      	ldr	r3, [r4, #0]
 800a630:	f043 0320 	orr.w	r3, r3, #32
 800a634:	6023      	str	r3, [r4, #0]
 800a636:	4833      	ldr	r0, [pc, #204]	@ (800a704 <_printf_i+0x23c>)
 800a638:	2778      	movs	r7, #120	@ 0x78
 800a63a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a63e:	6823      	ldr	r3, [r4, #0]
 800a640:	6831      	ldr	r1, [r6, #0]
 800a642:	061f      	lsls	r7, r3, #24
 800a644:	f851 5b04 	ldr.w	r5, [r1], #4
 800a648:	d402      	bmi.n	800a650 <_printf_i+0x188>
 800a64a:	065f      	lsls	r7, r3, #25
 800a64c:	bf48      	it	mi
 800a64e:	b2ad      	uxthmi	r5, r5
 800a650:	6031      	str	r1, [r6, #0]
 800a652:	07d9      	lsls	r1, r3, #31
 800a654:	bf44      	itt	mi
 800a656:	f043 0320 	orrmi.w	r3, r3, #32
 800a65a:	6023      	strmi	r3, [r4, #0]
 800a65c:	b11d      	cbz	r5, 800a666 <_printf_i+0x19e>
 800a65e:	2310      	movs	r3, #16
 800a660:	e7ac      	b.n	800a5bc <_printf_i+0xf4>
 800a662:	4827      	ldr	r0, [pc, #156]	@ (800a700 <_printf_i+0x238>)
 800a664:	e7e9      	b.n	800a63a <_printf_i+0x172>
 800a666:	6823      	ldr	r3, [r4, #0]
 800a668:	f023 0320 	bic.w	r3, r3, #32
 800a66c:	6023      	str	r3, [r4, #0]
 800a66e:	e7f6      	b.n	800a65e <_printf_i+0x196>
 800a670:	4616      	mov	r6, r2
 800a672:	e7bd      	b.n	800a5f0 <_printf_i+0x128>
 800a674:	6833      	ldr	r3, [r6, #0]
 800a676:	6825      	ldr	r5, [r4, #0]
 800a678:	6961      	ldr	r1, [r4, #20]
 800a67a:	1d18      	adds	r0, r3, #4
 800a67c:	6030      	str	r0, [r6, #0]
 800a67e:	062e      	lsls	r6, r5, #24
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	d501      	bpl.n	800a688 <_printf_i+0x1c0>
 800a684:	6019      	str	r1, [r3, #0]
 800a686:	e002      	b.n	800a68e <_printf_i+0x1c6>
 800a688:	0668      	lsls	r0, r5, #25
 800a68a:	d5fb      	bpl.n	800a684 <_printf_i+0x1bc>
 800a68c:	8019      	strh	r1, [r3, #0]
 800a68e:	2300      	movs	r3, #0
 800a690:	6123      	str	r3, [r4, #16]
 800a692:	4616      	mov	r6, r2
 800a694:	e7bc      	b.n	800a610 <_printf_i+0x148>
 800a696:	6833      	ldr	r3, [r6, #0]
 800a698:	1d1a      	adds	r2, r3, #4
 800a69a:	6032      	str	r2, [r6, #0]
 800a69c:	681e      	ldr	r6, [r3, #0]
 800a69e:	6862      	ldr	r2, [r4, #4]
 800a6a0:	2100      	movs	r1, #0
 800a6a2:	4630      	mov	r0, r6
 800a6a4:	f7f5 fda4 	bl	80001f0 <memchr>
 800a6a8:	b108      	cbz	r0, 800a6ae <_printf_i+0x1e6>
 800a6aa:	1b80      	subs	r0, r0, r6
 800a6ac:	6060      	str	r0, [r4, #4]
 800a6ae:	6863      	ldr	r3, [r4, #4]
 800a6b0:	6123      	str	r3, [r4, #16]
 800a6b2:	2300      	movs	r3, #0
 800a6b4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a6b8:	e7aa      	b.n	800a610 <_printf_i+0x148>
 800a6ba:	6923      	ldr	r3, [r4, #16]
 800a6bc:	4632      	mov	r2, r6
 800a6be:	4649      	mov	r1, r9
 800a6c0:	4640      	mov	r0, r8
 800a6c2:	47d0      	blx	sl
 800a6c4:	3001      	adds	r0, #1
 800a6c6:	d0ad      	beq.n	800a624 <_printf_i+0x15c>
 800a6c8:	6823      	ldr	r3, [r4, #0]
 800a6ca:	079b      	lsls	r3, r3, #30
 800a6cc:	d413      	bmi.n	800a6f6 <_printf_i+0x22e>
 800a6ce:	68e0      	ldr	r0, [r4, #12]
 800a6d0:	9b03      	ldr	r3, [sp, #12]
 800a6d2:	4298      	cmp	r0, r3
 800a6d4:	bfb8      	it	lt
 800a6d6:	4618      	movlt	r0, r3
 800a6d8:	e7a6      	b.n	800a628 <_printf_i+0x160>
 800a6da:	2301      	movs	r3, #1
 800a6dc:	4632      	mov	r2, r6
 800a6de:	4649      	mov	r1, r9
 800a6e0:	4640      	mov	r0, r8
 800a6e2:	47d0      	blx	sl
 800a6e4:	3001      	adds	r0, #1
 800a6e6:	d09d      	beq.n	800a624 <_printf_i+0x15c>
 800a6e8:	3501      	adds	r5, #1
 800a6ea:	68e3      	ldr	r3, [r4, #12]
 800a6ec:	9903      	ldr	r1, [sp, #12]
 800a6ee:	1a5b      	subs	r3, r3, r1
 800a6f0:	42ab      	cmp	r3, r5
 800a6f2:	dcf2      	bgt.n	800a6da <_printf_i+0x212>
 800a6f4:	e7eb      	b.n	800a6ce <_printf_i+0x206>
 800a6f6:	2500      	movs	r5, #0
 800a6f8:	f104 0619 	add.w	r6, r4, #25
 800a6fc:	e7f5      	b.n	800a6ea <_printf_i+0x222>
 800a6fe:	bf00      	nop
 800a700:	080104a9 	.word	0x080104a9
 800a704:	080104ba 	.word	0x080104ba

0800a708 <_scanf_float>:
 800a708:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a70c:	b087      	sub	sp, #28
 800a70e:	4617      	mov	r7, r2
 800a710:	9303      	str	r3, [sp, #12]
 800a712:	688b      	ldr	r3, [r1, #8]
 800a714:	1e5a      	subs	r2, r3, #1
 800a716:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800a71a:	bf81      	itttt	hi
 800a71c:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800a720:	eb03 0b05 	addhi.w	fp, r3, r5
 800a724:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800a728:	608b      	strhi	r3, [r1, #8]
 800a72a:	680b      	ldr	r3, [r1, #0]
 800a72c:	460a      	mov	r2, r1
 800a72e:	f04f 0500 	mov.w	r5, #0
 800a732:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800a736:	f842 3b1c 	str.w	r3, [r2], #28
 800a73a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800a73e:	4680      	mov	r8, r0
 800a740:	460c      	mov	r4, r1
 800a742:	bf98      	it	ls
 800a744:	f04f 0b00 	movls.w	fp, #0
 800a748:	9201      	str	r2, [sp, #4]
 800a74a:	4616      	mov	r6, r2
 800a74c:	46aa      	mov	sl, r5
 800a74e:	46a9      	mov	r9, r5
 800a750:	9502      	str	r5, [sp, #8]
 800a752:	68a2      	ldr	r2, [r4, #8]
 800a754:	b152      	cbz	r2, 800a76c <_scanf_float+0x64>
 800a756:	683b      	ldr	r3, [r7, #0]
 800a758:	781b      	ldrb	r3, [r3, #0]
 800a75a:	2b4e      	cmp	r3, #78	@ 0x4e
 800a75c:	d864      	bhi.n	800a828 <_scanf_float+0x120>
 800a75e:	2b40      	cmp	r3, #64	@ 0x40
 800a760:	d83c      	bhi.n	800a7dc <_scanf_float+0xd4>
 800a762:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800a766:	b2c8      	uxtb	r0, r1
 800a768:	280e      	cmp	r0, #14
 800a76a:	d93a      	bls.n	800a7e2 <_scanf_float+0xda>
 800a76c:	f1b9 0f00 	cmp.w	r9, #0
 800a770:	d003      	beq.n	800a77a <_scanf_float+0x72>
 800a772:	6823      	ldr	r3, [r4, #0]
 800a774:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a778:	6023      	str	r3, [r4, #0]
 800a77a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a77e:	f1ba 0f01 	cmp.w	sl, #1
 800a782:	f200 8117 	bhi.w	800a9b4 <_scanf_float+0x2ac>
 800a786:	9b01      	ldr	r3, [sp, #4]
 800a788:	429e      	cmp	r6, r3
 800a78a:	f200 8108 	bhi.w	800a99e <_scanf_float+0x296>
 800a78e:	2001      	movs	r0, #1
 800a790:	b007      	add	sp, #28
 800a792:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a796:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800a79a:	2a0d      	cmp	r2, #13
 800a79c:	d8e6      	bhi.n	800a76c <_scanf_float+0x64>
 800a79e:	a101      	add	r1, pc, #4	@ (adr r1, 800a7a4 <_scanf_float+0x9c>)
 800a7a0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800a7a4:	0800a8eb 	.word	0x0800a8eb
 800a7a8:	0800a76d 	.word	0x0800a76d
 800a7ac:	0800a76d 	.word	0x0800a76d
 800a7b0:	0800a76d 	.word	0x0800a76d
 800a7b4:	0800a94b 	.word	0x0800a94b
 800a7b8:	0800a923 	.word	0x0800a923
 800a7bc:	0800a76d 	.word	0x0800a76d
 800a7c0:	0800a76d 	.word	0x0800a76d
 800a7c4:	0800a8f9 	.word	0x0800a8f9
 800a7c8:	0800a76d 	.word	0x0800a76d
 800a7cc:	0800a76d 	.word	0x0800a76d
 800a7d0:	0800a76d 	.word	0x0800a76d
 800a7d4:	0800a76d 	.word	0x0800a76d
 800a7d8:	0800a8b1 	.word	0x0800a8b1
 800a7dc:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800a7e0:	e7db      	b.n	800a79a <_scanf_float+0x92>
 800a7e2:	290e      	cmp	r1, #14
 800a7e4:	d8c2      	bhi.n	800a76c <_scanf_float+0x64>
 800a7e6:	a001      	add	r0, pc, #4	@ (adr r0, 800a7ec <_scanf_float+0xe4>)
 800a7e8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800a7ec:	0800a8a1 	.word	0x0800a8a1
 800a7f0:	0800a76d 	.word	0x0800a76d
 800a7f4:	0800a8a1 	.word	0x0800a8a1
 800a7f8:	0800a937 	.word	0x0800a937
 800a7fc:	0800a76d 	.word	0x0800a76d
 800a800:	0800a849 	.word	0x0800a849
 800a804:	0800a887 	.word	0x0800a887
 800a808:	0800a887 	.word	0x0800a887
 800a80c:	0800a887 	.word	0x0800a887
 800a810:	0800a887 	.word	0x0800a887
 800a814:	0800a887 	.word	0x0800a887
 800a818:	0800a887 	.word	0x0800a887
 800a81c:	0800a887 	.word	0x0800a887
 800a820:	0800a887 	.word	0x0800a887
 800a824:	0800a887 	.word	0x0800a887
 800a828:	2b6e      	cmp	r3, #110	@ 0x6e
 800a82a:	d809      	bhi.n	800a840 <_scanf_float+0x138>
 800a82c:	2b60      	cmp	r3, #96	@ 0x60
 800a82e:	d8b2      	bhi.n	800a796 <_scanf_float+0x8e>
 800a830:	2b54      	cmp	r3, #84	@ 0x54
 800a832:	d07b      	beq.n	800a92c <_scanf_float+0x224>
 800a834:	2b59      	cmp	r3, #89	@ 0x59
 800a836:	d199      	bne.n	800a76c <_scanf_float+0x64>
 800a838:	2d07      	cmp	r5, #7
 800a83a:	d197      	bne.n	800a76c <_scanf_float+0x64>
 800a83c:	2508      	movs	r5, #8
 800a83e:	e02c      	b.n	800a89a <_scanf_float+0x192>
 800a840:	2b74      	cmp	r3, #116	@ 0x74
 800a842:	d073      	beq.n	800a92c <_scanf_float+0x224>
 800a844:	2b79      	cmp	r3, #121	@ 0x79
 800a846:	e7f6      	b.n	800a836 <_scanf_float+0x12e>
 800a848:	6821      	ldr	r1, [r4, #0]
 800a84a:	05c8      	lsls	r0, r1, #23
 800a84c:	d51b      	bpl.n	800a886 <_scanf_float+0x17e>
 800a84e:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800a852:	6021      	str	r1, [r4, #0]
 800a854:	f109 0901 	add.w	r9, r9, #1
 800a858:	f1bb 0f00 	cmp.w	fp, #0
 800a85c:	d003      	beq.n	800a866 <_scanf_float+0x15e>
 800a85e:	3201      	adds	r2, #1
 800a860:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a864:	60a2      	str	r2, [r4, #8]
 800a866:	68a3      	ldr	r3, [r4, #8]
 800a868:	3b01      	subs	r3, #1
 800a86a:	60a3      	str	r3, [r4, #8]
 800a86c:	6923      	ldr	r3, [r4, #16]
 800a86e:	3301      	adds	r3, #1
 800a870:	6123      	str	r3, [r4, #16]
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	3b01      	subs	r3, #1
 800a876:	2b00      	cmp	r3, #0
 800a878:	607b      	str	r3, [r7, #4]
 800a87a:	f340 8087 	ble.w	800a98c <_scanf_float+0x284>
 800a87e:	683b      	ldr	r3, [r7, #0]
 800a880:	3301      	adds	r3, #1
 800a882:	603b      	str	r3, [r7, #0]
 800a884:	e765      	b.n	800a752 <_scanf_float+0x4a>
 800a886:	eb1a 0105 	adds.w	r1, sl, r5
 800a88a:	f47f af6f 	bne.w	800a76c <_scanf_float+0x64>
 800a88e:	6822      	ldr	r2, [r4, #0]
 800a890:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800a894:	6022      	str	r2, [r4, #0]
 800a896:	460d      	mov	r5, r1
 800a898:	468a      	mov	sl, r1
 800a89a:	f806 3b01 	strb.w	r3, [r6], #1
 800a89e:	e7e2      	b.n	800a866 <_scanf_float+0x15e>
 800a8a0:	6822      	ldr	r2, [r4, #0]
 800a8a2:	0610      	lsls	r0, r2, #24
 800a8a4:	f57f af62 	bpl.w	800a76c <_scanf_float+0x64>
 800a8a8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800a8ac:	6022      	str	r2, [r4, #0]
 800a8ae:	e7f4      	b.n	800a89a <_scanf_float+0x192>
 800a8b0:	f1ba 0f00 	cmp.w	sl, #0
 800a8b4:	d10e      	bne.n	800a8d4 <_scanf_float+0x1cc>
 800a8b6:	f1b9 0f00 	cmp.w	r9, #0
 800a8ba:	d10e      	bne.n	800a8da <_scanf_float+0x1d2>
 800a8bc:	6822      	ldr	r2, [r4, #0]
 800a8be:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800a8c2:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800a8c6:	d108      	bne.n	800a8da <_scanf_float+0x1d2>
 800a8c8:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800a8cc:	6022      	str	r2, [r4, #0]
 800a8ce:	f04f 0a01 	mov.w	sl, #1
 800a8d2:	e7e2      	b.n	800a89a <_scanf_float+0x192>
 800a8d4:	f1ba 0f02 	cmp.w	sl, #2
 800a8d8:	d055      	beq.n	800a986 <_scanf_float+0x27e>
 800a8da:	2d01      	cmp	r5, #1
 800a8dc:	d002      	beq.n	800a8e4 <_scanf_float+0x1dc>
 800a8de:	2d04      	cmp	r5, #4
 800a8e0:	f47f af44 	bne.w	800a76c <_scanf_float+0x64>
 800a8e4:	3501      	adds	r5, #1
 800a8e6:	b2ed      	uxtb	r5, r5
 800a8e8:	e7d7      	b.n	800a89a <_scanf_float+0x192>
 800a8ea:	f1ba 0f01 	cmp.w	sl, #1
 800a8ee:	f47f af3d 	bne.w	800a76c <_scanf_float+0x64>
 800a8f2:	f04f 0a02 	mov.w	sl, #2
 800a8f6:	e7d0      	b.n	800a89a <_scanf_float+0x192>
 800a8f8:	b97d      	cbnz	r5, 800a91a <_scanf_float+0x212>
 800a8fa:	f1b9 0f00 	cmp.w	r9, #0
 800a8fe:	f47f af38 	bne.w	800a772 <_scanf_float+0x6a>
 800a902:	6822      	ldr	r2, [r4, #0]
 800a904:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800a908:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800a90c:	f040 8108 	bne.w	800ab20 <_scanf_float+0x418>
 800a910:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800a914:	6022      	str	r2, [r4, #0]
 800a916:	2501      	movs	r5, #1
 800a918:	e7bf      	b.n	800a89a <_scanf_float+0x192>
 800a91a:	2d03      	cmp	r5, #3
 800a91c:	d0e2      	beq.n	800a8e4 <_scanf_float+0x1dc>
 800a91e:	2d05      	cmp	r5, #5
 800a920:	e7de      	b.n	800a8e0 <_scanf_float+0x1d8>
 800a922:	2d02      	cmp	r5, #2
 800a924:	f47f af22 	bne.w	800a76c <_scanf_float+0x64>
 800a928:	2503      	movs	r5, #3
 800a92a:	e7b6      	b.n	800a89a <_scanf_float+0x192>
 800a92c:	2d06      	cmp	r5, #6
 800a92e:	f47f af1d 	bne.w	800a76c <_scanf_float+0x64>
 800a932:	2507      	movs	r5, #7
 800a934:	e7b1      	b.n	800a89a <_scanf_float+0x192>
 800a936:	6822      	ldr	r2, [r4, #0]
 800a938:	0591      	lsls	r1, r2, #22
 800a93a:	f57f af17 	bpl.w	800a76c <_scanf_float+0x64>
 800a93e:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800a942:	6022      	str	r2, [r4, #0]
 800a944:	f8cd 9008 	str.w	r9, [sp, #8]
 800a948:	e7a7      	b.n	800a89a <_scanf_float+0x192>
 800a94a:	6822      	ldr	r2, [r4, #0]
 800a94c:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800a950:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800a954:	d006      	beq.n	800a964 <_scanf_float+0x25c>
 800a956:	0550      	lsls	r0, r2, #21
 800a958:	f57f af08 	bpl.w	800a76c <_scanf_float+0x64>
 800a95c:	f1b9 0f00 	cmp.w	r9, #0
 800a960:	f000 80de 	beq.w	800ab20 <_scanf_float+0x418>
 800a964:	0591      	lsls	r1, r2, #22
 800a966:	bf58      	it	pl
 800a968:	9902      	ldrpl	r1, [sp, #8]
 800a96a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800a96e:	bf58      	it	pl
 800a970:	eba9 0101 	subpl.w	r1, r9, r1
 800a974:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800a978:	bf58      	it	pl
 800a97a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800a97e:	6022      	str	r2, [r4, #0]
 800a980:	f04f 0900 	mov.w	r9, #0
 800a984:	e789      	b.n	800a89a <_scanf_float+0x192>
 800a986:	f04f 0a03 	mov.w	sl, #3
 800a98a:	e786      	b.n	800a89a <_scanf_float+0x192>
 800a98c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800a990:	4639      	mov	r1, r7
 800a992:	4640      	mov	r0, r8
 800a994:	4798      	blx	r3
 800a996:	2800      	cmp	r0, #0
 800a998:	f43f aedb 	beq.w	800a752 <_scanf_float+0x4a>
 800a99c:	e6e6      	b.n	800a76c <_scanf_float+0x64>
 800a99e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a9a2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a9a6:	463a      	mov	r2, r7
 800a9a8:	4640      	mov	r0, r8
 800a9aa:	4798      	blx	r3
 800a9ac:	6923      	ldr	r3, [r4, #16]
 800a9ae:	3b01      	subs	r3, #1
 800a9b0:	6123      	str	r3, [r4, #16]
 800a9b2:	e6e8      	b.n	800a786 <_scanf_float+0x7e>
 800a9b4:	1e6b      	subs	r3, r5, #1
 800a9b6:	2b06      	cmp	r3, #6
 800a9b8:	d824      	bhi.n	800aa04 <_scanf_float+0x2fc>
 800a9ba:	2d02      	cmp	r5, #2
 800a9bc:	d836      	bhi.n	800aa2c <_scanf_float+0x324>
 800a9be:	9b01      	ldr	r3, [sp, #4]
 800a9c0:	429e      	cmp	r6, r3
 800a9c2:	f67f aee4 	bls.w	800a78e <_scanf_float+0x86>
 800a9c6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a9ca:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a9ce:	463a      	mov	r2, r7
 800a9d0:	4640      	mov	r0, r8
 800a9d2:	4798      	blx	r3
 800a9d4:	6923      	ldr	r3, [r4, #16]
 800a9d6:	3b01      	subs	r3, #1
 800a9d8:	6123      	str	r3, [r4, #16]
 800a9da:	e7f0      	b.n	800a9be <_scanf_float+0x2b6>
 800a9dc:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a9e0:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800a9e4:	463a      	mov	r2, r7
 800a9e6:	4640      	mov	r0, r8
 800a9e8:	4798      	blx	r3
 800a9ea:	6923      	ldr	r3, [r4, #16]
 800a9ec:	3b01      	subs	r3, #1
 800a9ee:	6123      	str	r3, [r4, #16]
 800a9f0:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a9f4:	fa5f fa8a 	uxtb.w	sl, sl
 800a9f8:	f1ba 0f02 	cmp.w	sl, #2
 800a9fc:	d1ee      	bne.n	800a9dc <_scanf_float+0x2d4>
 800a9fe:	3d03      	subs	r5, #3
 800aa00:	b2ed      	uxtb	r5, r5
 800aa02:	1b76      	subs	r6, r6, r5
 800aa04:	6823      	ldr	r3, [r4, #0]
 800aa06:	05da      	lsls	r2, r3, #23
 800aa08:	d530      	bpl.n	800aa6c <_scanf_float+0x364>
 800aa0a:	055b      	lsls	r3, r3, #21
 800aa0c:	d511      	bpl.n	800aa32 <_scanf_float+0x32a>
 800aa0e:	9b01      	ldr	r3, [sp, #4]
 800aa10:	429e      	cmp	r6, r3
 800aa12:	f67f aebc 	bls.w	800a78e <_scanf_float+0x86>
 800aa16:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800aa1a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800aa1e:	463a      	mov	r2, r7
 800aa20:	4640      	mov	r0, r8
 800aa22:	4798      	blx	r3
 800aa24:	6923      	ldr	r3, [r4, #16]
 800aa26:	3b01      	subs	r3, #1
 800aa28:	6123      	str	r3, [r4, #16]
 800aa2a:	e7f0      	b.n	800aa0e <_scanf_float+0x306>
 800aa2c:	46aa      	mov	sl, r5
 800aa2e:	46b3      	mov	fp, r6
 800aa30:	e7de      	b.n	800a9f0 <_scanf_float+0x2e8>
 800aa32:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800aa36:	6923      	ldr	r3, [r4, #16]
 800aa38:	2965      	cmp	r1, #101	@ 0x65
 800aa3a:	f103 33ff 	add.w	r3, r3, #4294967295
 800aa3e:	f106 35ff 	add.w	r5, r6, #4294967295
 800aa42:	6123      	str	r3, [r4, #16]
 800aa44:	d00c      	beq.n	800aa60 <_scanf_float+0x358>
 800aa46:	2945      	cmp	r1, #69	@ 0x45
 800aa48:	d00a      	beq.n	800aa60 <_scanf_float+0x358>
 800aa4a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800aa4e:	463a      	mov	r2, r7
 800aa50:	4640      	mov	r0, r8
 800aa52:	4798      	blx	r3
 800aa54:	6923      	ldr	r3, [r4, #16]
 800aa56:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800aa5a:	3b01      	subs	r3, #1
 800aa5c:	1eb5      	subs	r5, r6, #2
 800aa5e:	6123      	str	r3, [r4, #16]
 800aa60:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800aa64:	463a      	mov	r2, r7
 800aa66:	4640      	mov	r0, r8
 800aa68:	4798      	blx	r3
 800aa6a:	462e      	mov	r6, r5
 800aa6c:	6822      	ldr	r2, [r4, #0]
 800aa6e:	f012 0210 	ands.w	r2, r2, #16
 800aa72:	d001      	beq.n	800aa78 <_scanf_float+0x370>
 800aa74:	2000      	movs	r0, #0
 800aa76:	e68b      	b.n	800a790 <_scanf_float+0x88>
 800aa78:	7032      	strb	r2, [r6, #0]
 800aa7a:	6823      	ldr	r3, [r4, #0]
 800aa7c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800aa80:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800aa84:	d11c      	bne.n	800aac0 <_scanf_float+0x3b8>
 800aa86:	9b02      	ldr	r3, [sp, #8]
 800aa88:	454b      	cmp	r3, r9
 800aa8a:	eba3 0209 	sub.w	r2, r3, r9
 800aa8e:	d123      	bne.n	800aad8 <_scanf_float+0x3d0>
 800aa90:	9901      	ldr	r1, [sp, #4]
 800aa92:	2200      	movs	r2, #0
 800aa94:	4640      	mov	r0, r8
 800aa96:	f7ff f953 	bl	8009d40 <_strtod_r>
 800aa9a:	9b03      	ldr	r3, [sp, #12]
 800aa9c:	6821      	ldr	r1, [r4, #0]
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	f011 0f02 	tst.w	r1, #2
 800aaa4:	ec57 6b10 	vmov	r6, r7, d0
 800aaa8:	f103 0204 	add.w	r2, r3, #4
 800aaac:	d01f      	beq.n	800aaee <_scanf_float+0x3e6>
 800aaae:	9903      	ldr	r1, [sp, #12]
 800aab0:	600a      	str	r2, [r1, #0]
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	e9c3 6700 	strd	r6, r7, [r3]
 800aab8:	68e3      	ldr	r3, [r4, #12]
 800aaba:	3301      	adds	r3, #1
 800aabc:	60e3      	str	r3, [r4, #12]
 800aabe:	e7d9      	b.n	800aa74 <_scanf_float+0x36c>
 800aac0:	9b04      	ldr	r3, [sp, #16]
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	d0e4      	beq.n	800aa90 <_scanf_float+0x388>
 800aac6:	9905      	ldr	r1, [sp, #20]
 800aac8:	230a      	movs	r3, #10
 800aaca:	3101      	adds	r1, #1
 800aacc:	4640      	mov	r0, r8
 800aace:	f7ff f9b7 	bl	8009e40 <_strtol_r>
 800aad2:	9b04      	ldr	r3, [sp, #16]
 800aad4:	9e05      	ldr	r6, [sp, #20]
 800aad6:	1ac2      	subs	r2, r0, r3
 800aad8:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800aadc:	429e      	cmp	r6, r3
 800aade:	bf28      	it	cs
 800aae0:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800aae4:	4910      	ldr	r1, [pc, #64]	@ (800ab28 <_scanf_float+0x420>)
 800aae6:	4630      	mov	r0, r6
 800aae8:	f000 f918 	bl	800ad1c <siprintf>
 800aaec:	e7d0      	b.n	800aa90 <_scanf_float+0x388>
 800aaee:	f011 0f04 	tst.w	r1, #4
 800aaf2:	9903      	ldr	r1, [sp, #12]
 800aaf4:	600a      	str	r2, [r1, #0]
 800aaf6:	d1dc      	bne.n	800aab2 <_scanf_float+0x3aa>
 800aaf8:	681d      	ldr	r5, [r3, #0]
 800aafa:	4632      	mov	r2, r6
 800aafc:	463b      	mov	r3, r7
 800aafe:	4630      	mov	r0, r6
 800ab00:	4639      	mov	r1, r7
 800ab02:	f7f6 f823 	bl	8000b4c <__aeabi_dcmpun>
 800ab06:	b128      	cbz	r0, 800ab14 <_scanf_float+0x40c>
 800ab08:	4808      	ldr	r0, [pc, #32]	@ (800ab2c <_scanf_float+0x424>)
 800ab0a:	f001 f839 	bl	800bb80 <nanf>
 800ab0e:	ed85 0a00 	vstr	s0, [r5]
 800ab12:	e7d1      	b.n	800aab8 <_scanf_float+0x3b0>
 800ab14:	4630      	mov	r0, r6
 800ab16:	4639      	mov	r1, r7
 800ab18:	f7f6 f876 	bl	8000c08 <__aeabi_d2f>
 800ab1c:	6028      	str	r0, [r5, #0]
 800ab1e:	e7cb      	b.n	800aab8 <_scanf_float+0x3b0>
 800ab20:	f04f 0900 	mov.w	r9, #0
 800ab24:	e629      	b.n	800a77a <_scanf_float+0x72>
 800ab26:	bf00      	nop
 800ab28:	080104cb 	.word	0x080104cb
 800ab2c:	0800faed 	.word	0x0800faed

0800ab30 <std>:
 800ab30:	2300      	movs	r3, #0
 800ab32:	b510      	push	{r4, lr}
 800ab34:	4604      	mov	r4, r0
 800ab36:	e9c0 3300 	strd	r3, r3, [r0]
 800ab3a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ab3e:	6083      	str	r3, [r0, #8]
 800ab40:	8181      	strh	r1, [r0, #12]
 800ab42:	6643      	str	r3, [r0, #100]	@ 0x64
 800ab44:	81c2      	strh	r2, [r0, #14]
 800ab46:	6183      	str	r3, [r0, #24]
 800ab48:	4619      	mov	r1, r3
 800ab4a:	2208      	movs	r2, #8
 800ab4c:	305c      	adds	r0, #92	@ 0x5c
 800ab4e:	f000 f9ad 	bl	800aeac <memset>
 800ab52:	4b0d      	ldr	r3, [pc, #52]	@ (800ab88 <std+0x58>)
 800ab54:	6263      	str	r3, [r4, #36]	@ 0x24
 800ab56:	4b0d      	ldr	r3, [pc, #52]	@ (800ab8c <std+0x5c>)
 800ab58:	62a3      	str	r3, [r4, #40]	@ 0x28
 800ab5a:	4b0d      	ldr	r3, [pc, #52]	@ (800ab90 <std+0x60>)
 800ab5c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800ab5e:	4b0d      	ldr	r3, [pc, #52]	@ (800ab94 <std+0x64>)
 800ab60:	6323      	str	r3, [r4, #48]	@ 0x30
 800ab62:	4b0d      	ldr	r3, [pc, #52]	@ (800ab98 <std+0x68>)
 800ab64:	6224      	str	r4, [r4, #32]
 800ab66:	429c      	cmp	r4, r3
 800ab68:	d006      	beq.n	800ab78 <std+0x48>
 800ab6a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800ab6e:	4294      	cmp	r4, r2
 800ab70:	d002      	beq.n	800ab78 <std+0x48>
 800ab72:	33d0      	adds	r3, #208	@ 0xd0
 800ab74:	429c      	cmp	r4, r3
 800ab76:	d105      	bne.n	800ab84 <std+0x54>
 800ab78:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800ab7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ab80:	f7f9 be25 	b.w	80047ce <__retarget_lock_init_recursive>
 800ab84:	bd10      	pop	{r4, pc}
 800ab86:	bf00      	nop
 800ab88:	0800adb1 	.word	0x0800adb1
 800ab8c:	0800add7 	.word	0x0800add7
 800ab90:	0800ae0f 	.word	0x0800ae0f
 800ab94:	0800ae33 	.word	0x0800ae33
 800ab98:	20008bf0 	.word	0x20008bf0

0800ab9c <stdio_exit_handler>:
 800ab9c:	4a02      	ldr	r2, [pc, #8]	@ (800aba8 <stdio_exit_handler+0xc>)
 800ab9e:	4903      	ldr	r1, [pc, #12]	@ (800abac <stdio_exit_handler+0x10>)
 800aba0:	4803      	ldr	r0, [pc, #12]	@ (800abb0 <stdio_exit_handler+0x14>)
 800aba2:	f000 b869 	b.w	800ac78 <_fwalk_sglue>
 800aba6:	bf00      	nop
 800aba8:	2000001c 	.word	0x2000001c
 800abac:	0800e449 	.word	0x0800e449
 800abb0:	200001a0 	.word	0x200001a0

0800abb4 <cleanup_stdio>:
 800abb4:	6841      	ldr	r1, [r0, #4]
 800abb6:	4b0c      	ldr	r3, [pc, #48]	@ (800abe8 <cleanup_stdio+0x34>)
 800abb8:	4299      	cmp	r1, r3
 800abba:	b510      	push	{r4, lr}
 800abbc:	4604      	mov	r4, r0
 800abbe:	d001      	beq.n	800abc4 <cleanup_stdio+0x10>
 800abc0:	f003 fc42 	bl	800e448 <_fflush_r>
 800abc4:	68a1      	ldr	r1, [r4, #8]
 800abc6:	4b09      	ldr	r3, [pc, #36]	@ (800abec <cleanup_stdio+0x38>)
 800abc8:	4299      	cmp	r1, r3
 800abca:	d002      	beq.n	800abd2 <cleanup_stdio+0x1e>
 800abcc:	4620      	mov	r0, r4
 800abce:	f003 fc3b 	bl	800e448 <_fflush_r>
 800abd2:	68e1      	ldr	r1, [r4, #12]
 800abd4:	4b06      	ldr	r3, [pc, #24]	@ (800abf0 <cleanup_stdio+0x3c>)
 800abd6:	4299      	cmp	r1, r3
 800abd8:	d004      	beq.n	800abe4 <cleanup_stdio+0x30>
 800abda:	4620      	mov	r0, r4
 800abdc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800abe0:	f003 bc32 	b.w	800e448 <_fflush_r>
 800abe4:	bd10      	pop	{r4, pc}
 800abe6:	bf00      	nop
 800abe8:	20008bf0 	.word	0x20008bf0
 800abec:	20008c58 	.word	0x20008c58
 800abf0:	20008cc0 	.word	0x20008cc0

0800abf4 <global_stdio_init.part.0>:
 800abf4:	b510      	push	{r4, lr}
 800abf6:	4b0b      	ldr	r3, [pc, #44]	@ (800ac24 <global_stdio_init.part.0+0x30>)
 800abf8:	4c0b      	ldr	r4, [pc, #44]	@ (800ac28 <global_stdio_init.part.0+0x34>)
 800abfa:	4a0c      	ldr	r2, [pc, #48]	@ (800ac2c <global_stdio_init.part.0+0x38>)
 800abfc:	601a      	str	r2, [r3, #0]
 800abfe:	4620      	mov	r0, r4
 800ac00:	2200      	movs	r2, #0
 800ac02:	2104      	movs	r1, #4
 800ac04:	f7ff ff94 	bl	800ab30 <std>
 800ac08:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800ac0c:	2201      	movs	r2, #1
 800ac0e:	2109      	movs	r1, #9
 800ac10:	f7ff ff8e 	bl	800ab30 <std>
 800ac14:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800ac18:	2202      	movs	r2, #2
 800ac1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ac1e:	2112      	movs	r1, #18
 800ac20:	f7ff bf86 	b.w	800ab30 <std>
 800ac24:	20008d28 	.word	0x20008d28
 800ac28:	20008bf0 	.word	0x20008bf0
 800ac2c:	0800ab9d 	.word	0x0800ab9d

0800ac30 <__sfp_lock_acquire>:
 800ac30:	4801      	ldr	r0, [pc, #4]	@ (800ac38 <__sfp_lock_acquire+0x8>)
 800ac32:	f7f9 bde8 	b.w	8004806 <__retarget_lock_acquire_recursive>
 800ac36:	bf00      	nop
 800ac38:	200028e8 	.word	0x200028e8

0800ac3c <__sfp_lock_release>:
 800ac3c:	4801      	ldr	r0, [pc, #4]	@ (800ac44 <__sfp_lock_release+0x8>)
 800ac3e:	f7f9 bdee 	b.w	800481e <__retarget_lock_release_recursive>
 800ac42:	bf00      	nop
 800ac44:	200028e8 	.word	0x200028e8

0800ac48 <__sinit>:
 800ac48:	b510      	push	{r4, lr}
 800ac4a:	4604      	mov	r4, r0
 800ac4c:	f7ff fff0 	bl	800ac30 <__sfp_lock_acquire>
 800ac50:	6a23      	ldr	r3, [r4, #32]
 800ac52:	b11b      	cbz	r3, 800ac5c <__sinit+0x14>
 800ac54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ac58:	f7ff bff0 	b.w	800ac3c <__sfp_lock_release>
 800ac5c:	4b04      	ldr	r3, [pc, #16]	@ (800ac70 <__sinit+0x28>)
 800ac5e:	6223      	str	r3, [r4, #32]
 800ac60:	4b04      	ldr	r3, [pc, #16]	@ (800ac74 <__sinit+0x2c>)
 800ac62:	681b      	ldr	r3, [r3, #0]
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	d1f5      	bne.n	800ac54 <__sinit+0xc>
 800ac68:	f7ff ffc4 	bl	800abf4 <global_stdio_init.part.0>
 800ac6c:	e7f2      	b.n	800ac54 <__sinit+0xc>
 800ac6e:	bf00      	nop
 800ac70:	0800abb5 	.word	0x0800abb5
 800ac74:	20008d28 	.word	0x20008d28

0800ac78 <_fwalk_sglue>:
 800ac78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ac7c:	4607      	mov	r7, r0
 800ac7e:	4688      	mov	r8, r1
 800ac80:	4614      	mov	r4, r2
 800ac82:	2600      	movs	r6, #0
 800ac84:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ac88:	f1b9 0901 	subs.w	r9, r9, #1
 800ac8c:	d505      	bpl.n	800ac9a <_fwalk_sglue+0x22>
 800ac8e:	6824      	ldr	r4, [r4, #0]
 800ac90:	2c00      	cmp	r4, #0
 800ac92:	d1f7      	bne.n	800ac84 <_fwalk_sglue+0xc>
 800ac94:	4630      	mov	r0, r6
 800ac96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ac9a:	89ab      	ldrh	r3, [r5, #12]
 800ac9c:	2b01      	cmp	r3, #1
 800ac9e:	d907      	bls.n	800acb0 <_fwalk_sglue+0x38>
 800aca0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800aca4:	3301      	adds	r3, #1
 800aca6:	d003      	beq.n	800acb0 <_fwalk_sglue+0x38>
 800aca8:	4629      	mov	r1, r5
 800acaa:	4638      	mov	r0, r7
 800acac:	47c0      	blx	r8
 800acae:	4306      	orrs	r6, r0
 800acb0:	3568      	adds	r5, #104	@ 0x68
 800acb2:	e7e9      	b.n	800ac88 <_fwalk_sglue+0x10>

0800acb4 <sniprintf>:
 800acb4:	b40c      	push	{r2, r3}
 800acb6:	b530      	push	{r4, r5, lr}
 800acb8:	4b17      	ldr	r3, [pc, #92]	@ (800ad18 <sniprintf+0x64>)
 800acba:	1e0c      	subs	r4, r1, #0
 800acbc:	681d      	ldr	r5, [r3, #0]
 800acbe:	b09d      	sub	sp, #116	@ 0x74
 800acc0:	da08      	bge.n	800acd4 <sniprintf+0x20>
 800acc2:	238b      	movs	r3, #139	@ 0x8b
 800acc4:	602b      	str	r3, [r5, #0]
 800acc6:	f04f 30ff 	mov.w	r0, #4294967295
 800acca:	b01d      	add	sp, #116	@ 0x74
 800accc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800acd0:	b002      	add	sp, #8
 800acd2:	4770      	bx	lr
 800acd4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800acd8:	f8ad 3014 	strh.w	r3, [sp, #20]
 800acdc:	bf14      	ite	ne
 800acde:	f104 33ff 	addne.w	r3, r4, #4294967295
 800ace2:	4623      	moveq	r3, r4
 800ace4:	9304      	str	r3, [sp, #16]
 800ace6:	9307      	str	r3, [sp, #28]
 800ace8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800acec:	9002      	str	r0, [sp, #8]
 800acee:	9006      	str	r0, [sp, #24]
 800acf0:	f8ad 3016 	strh.w	r3, [sp, #22]
 800acf4:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800acf6:	ab21      	add	r3, sp, #132	@ 0x84
 800acf8:	a902      	add	r1, sp, #8
 800acfa:	4628      	mov	r0, r5
 800acfc:	9301      	str	r3, [sp, #4]
 800acfe:	f002 ff09 	bl	800db14 <_svfiprintf_r>
 800ad02:	1c43      	adds	r3, r0, #1
 800ad04:	bfbc      	itt	lt
 800ad06:	238b      	movlt	r3, #139	@ 0x8b
 800ad08:	602b      	strlt	r3, [r5, #0]
 800ad0a:	2c00      	cmp	r4, #0
 800ad0c:	d0dd      	beq.n	800acca <sniprintf+0x16>
 800ad0e:	9b02      	ldr	r3, [sp, #8]
 800ad10:	2200      	movs	r2, #0
 800ad12:	701a      	strb	r2, [r3, #0]
 800ad14:	e7d9      	b.n	800acca <sniprintf+0x16>
 800ad16:	bf00      	nop
 800ad18:	2000019c 	.word	0x2000019c

0800ad1c <siprintf>:
 800ad1c:	b40e      	push	{r1, r2, r3}
 800ad1e:	b500      	push	{lr}
 800ad20:	b09c      	sub	sp, #112	@ 0x70
 800ad22:	ab1d      	add	r3, sp, #116	@ 0x74
 800ad24:	9002      	str	r0, [sp, #8]
 800ad26:	9006      	str	r0, [sp, #24]
 800ad28:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800ad2c:	4809      	ldr	r0, [pc, #36]	@ (800ad54 <siprintf+0x38>)
 800ad2e:	9107      	str	r1, [sp, #28]
 800ad30:	9104      	str	r1, [sp, #16]
 800ad32:	4909      	ldr	r1, [pc, #36]	@ (800ad58 <siprintf+0x3c>)
 800ad34:	f853 2b04 	ldr.w	r2, [r3], #4
 800ad38:	9105      	str	r1, [sp, #20]
 800ad3a:	6800      	ldr	r0, [r0, #0]
 800ad3c:	9301      	str	r3, [sp, #4]
 800ad3e:	a902      	add	r1, sp, #8
 800ad40:	f002 fee8 	bl	800db14 <_svfiprintf_r>
 800ad44:	9b02      	ldr	r3, [sp, #8]
 800ad46:	2200      	movs	r2, #0
 800ad48:	701a      	strb	r2, [r3, #0]
 800ad4a:	b01c      	add	sp, #112	@ 0x70
 800ad4c:	f85d eb04 	ldr.w	lr, [sp], #4
 800ad50:	b003      	add	sp, #12
 800ad52:	4770      	bx	lr
 800ad54:	2000019c 	.word	0x2000019c
 800ad58:	ffff0208 	.word	0xffff0208

0800ad5c <siscanf>:
 800ad5c:	b40e      	push	{r1, r2, r3}
 800ad5e:	b530      	push	{r4, r5, lr}
 800ad60:	b09c      	sub	sp, #112	@ 0x70
 800ad62:	ac1f      	add	r4, sp, #124	@ 0x7c
 800ad64:	f44f 7201 	mov.w	r2, #516	@ 0x204
 800ad68:	f854 5b04 	ldr.w	r5, [r4], #4
 800ad6c:	f8ad 2014 	strh.w	r2, [sp, #20]
 800ad70:	9002      	str	r0, [sp, #8]
 800ad72:	9006      	str	r0, [sp, #24]
 800ad74:	f7f5 fa8c 	bl	8000290 <strlen>
 800ad78:	4b0b      	ldr	r3, [pc, #44]	@ (800ada8 <siscanf+0x4c>)
 800ad7a:	9003      	str	r0, [sp, #12]
 800ad7c:	9007      	str	r0, [sp, #28]
 800ad7e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ad80:	480a      	ldr	r0, [pc, #40]	@ (800adac <siscanf+0x50>)
 800ad82:	9401      	str	r4, [sp, #4]
 800ad84:	2300      	movs	r3, #0
 800ad86:	930f      	str	r3, [sp, #60]	@ 0x3c
 800ad88:	9314      	str	r3, [sp, #80]	@ 0x50
 800ad8a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800ad8e:	f8ad 3016 	strh.w	r3, [sp, #22]
 800ad92:	462a      	mov	r2, r5
 800ad94:	4623      	mov	r3, r4
 800ad96:	a902      	add	r1, sp, #8
 800ad98:	6800      	ldr	r0, [r0, #0]
 800ad9a:	f003 f80f 	bl	800ddbc <__ssvfiscanf_r>
 800ad9e:	b01c      	add	sp, #112	@ 0x70
 800ada0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ada4:	b003      	add	sp, #12
 800ada6:	4770      	bx	lr
 800ada8:	0800add3 	.word	0x0800add3
 800adac:	2000019c 	.word	0x2000019c

0800adb0 <__sread>:
 800adb0:	b510      	push	{r4, lr}
 800adb2:	460c      	mov	r4, r1
 800adb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800adb8:	f000 fe66 	bl	800ba88 <_read_r>
 800adbc:	2800      	cmp	r0, #0
 800adbe:	bfab      	itete	ge
 800adc0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800adc2:	89a3      	ldrhlt	r3, [r4, #12]
 800adc4:	181b      	addge	r3, r3, r0
 800adc6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800adca:	bfac      	ite	ge
 800adcc:	6563      	strge	r3, [r4, #84]	@ 0x54
 800adce:	81a3      	strhlt	r3, [r4, #12]
 800add0:	bd10      	pop	{r4, pc}

0800add2 <__seofread>:
 800add2:	2000      	movs	r0, #0
 800add4:	4770      	bx	lr

0800add6 <__swrite>:
 800add6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800adda:	461f      	mov	r7, r3
 800addc:	898b      	ldrh	r3, [r1, #12]
 800adde:	05db      	lsls	r3, r3, #23
 800ade0:	4605      	mov	r5, r0
 800ade2:	460c      	mov	r4, r1
 800ade4:	4616      	mov	r6, r2
 800ade6:	d505      	bpl.n	800adf4 <__swrite+0x1e>
 800ade8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800adec:	2302      	movs	r3, #2
 800adee:	2200      	movs	r2, #0
 800adf0:	f000 fe38 	bl	800ba64 <_lseek_r>
 800adf4:	89a3      	ldrh	r3, [r4, #12]
 800adf6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800adfa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800adfe:	81a3      	strh	r3, [r4, #12]
 800ae00:	4632      	mov	r2, r6
 800ae02:	463b      	mov	r3, r7
 800ae04:	4628      	mov	r0, r5
 800ae06:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ae0a:	f000 be5f 	b.w	800bacc <_write_r>

0800ae0e <__sseek>:
 800ae0e:	b510      	push	{r4, lr}
 800ae10:	460c      	mov	r4, r1
 800ae12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ae16:	f000 fe25 	bl	800ba64 <_lseek_r>
 800ae1a:	1c43      	adds	r3, r0, #1
 800ae1c:	89a3      	ldrh	r3, [r4, #12]
 800ae1e:	bf15      	itete	ne
 800ae20:	6560      	strne	r0, [r4, #84]	@ 0x54
 800ae22:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800ae26:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800ae2a:	81a3      	strheq	r3, [r4, #12]
 800ae2c:	bf18      	it	ne
 800ae2e:	81a3      	strhne	r3, [r4, #12]
 800ae30:	bd10      	pop	{r4, pc}

0800ae32 <__sclose>:
 800ae32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ae36:	f000 be05 	b.w	800ba44 <_close_r>

0800ae3a <_vsniprintf_r>:
 800ae3a:	b530      	push	{r4, r5, lr}
 800ae3c:	4614      	mov	r4, r2
 800ae3e:	2c00      	cmp	r4, #0
 800ae40:	b09b      	sub	sp, #108	@ 0x6c
 800ae42:	4605      	mov	r5, r0
 800ae44:	461a      	mov	r2, r3
 800ae46:	da05      	bge.n	800ae54 <_vsniprintf_r+0x1a>
 800ae48:	238b      	movs	r3, #139	@ 0x8b
 800ae4a:	6003      	str	r3, [r0, #0]
 800ae4c:	f04f 30ff 	mov.w	r0, #4294967295
 800ae50:	b01b      	add	sp, #108	@ 0x6c
 800ae52:	bd30      	pop	{r4, r5, pc}
 800ae54:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800ae58:	f8ad 300c 	strh.w	r3, [sp, #12]
 800ae5c:	bf14      	ite	ne
 800ae5e:	f104 33ff 	addne.w	r3, r4, #4294967295
 800ae62:	4623      	moveq	r3, r4
 800ae64:	9302      	str	r3, [sp, #8]
 800ae66:	9305      	str	r3, [sp, #20]
 800ae68:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800ae6c:	9100      	str	r1, [sp, #0]
 800ae6e:	9104      	str	r1, [sp, #16]
 800ae70:	f8ad 300e 	strh.w	r3, [sp, #14]
 800ae74:	4669      	mov	r1, sp
 800ae76:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800ae78:	f002 fe4c 	bl	800db14 <_svfiprintf_r>
 800ae7c:	1c43      	adds	r3, r0, #1
 800ae7e:	bfbc      	itt	lt
 800ae80:	238b      	movlt	r3, #139	@ 0x8b
 800ae82:	602b      	strlt	r3, [r5, #0]
 800ae84:	2c00      	cmp	r4, #0
 800ae86:	d0e3      	beq.n	800ae50 <_vsniprintf_r+0x16>
 800ae88:	9b00      	ldr	r3, [sp, #0]
 800ae8a:	2200      	movs	r2, #0
 800ae8c:	701a      	strb	r2, [r3, #0]
 800ae8e:	e7df      	b.n	800ae50 <_vsniprintf_r+0x16>

0800ae90 <vsniprintf>:
 800ae90:	b507      	push	{r0, r1, r2, lr}
 800ae92:	9300      	str	r3, [sp, #0]
 800ae94:	4613      	mov	r3, r2
 800ae96:	460a      	mov	r2, r1
 800ae98:	4601      	mov	r1, r0
 800ae9a:	4803      	ldr	r0, [pc, #12]	@ (800aea8 <vsniprintf+0x18>)
 800ae9c:	6800      	ldr	r0, [r0, #0]
 800ae9e:	f7ff ffcc 	bl	800ae3a <_vsniprintf_r>
 800aea2:	b003      	add	sp, #12
 800aea4:	f85d fb04 	ldr.w	pc, [sp], #4
 800aea8:	2000019c 	.word	0x2000019c

0800aeac <memset>:
 800aeac:	4402      	add	r2, r0
 800aeae:	4603      	mov	r3, r0
 800aeb0:	4293      	cmp	r3, r2
 800aeb2:	d100      	bne.n	800aeb6 <memset+0xa>
 800aeb4:	4770      	bx	lr
 800aeb6:	f803 1b01 	strb.w	r1, [r3], #1
 800aeba:	e7f9      	b.n	800aeb0 <memset+0x4>

0800aebc <strchr>:
 800aebc:	b2c9      	uxtb	r1, r1
 800aebe:	4603      	mov	r3, r0
 800aec0:	4618      	mov	r0, r3
 800aec2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aec6:	b112      	cbz	r2, 800aece <strchr+0x12>
 800aec8:	428a      	cmp	r2, r1
 800aeca:	d1f9      	bne.n	800aec0 <strchr+0x4>
 800aecc:	4770      	bx	lr
 800aece:	2900      	cmp	r1, #0
 800aed0:	bf18      	it	ne
 800aed2:	2000      	movne	r0, #0
 800aed4:	4770      	bx	lr

0800aed6 <strncmp>:
 800aed6:	b510      	push	{r4, lr}
 800aed8:	b16a      	cbz	r2, 800aef6 <strncmp+0x20>
 800aeda:	3901      	subs	r1, #1
 800aedc:	1884      	adds	r4, r0, r2
 800aede:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aee2:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800aee6:	429a      	cmp	r2, r3
 800aee8:	d103      	bne.n	800aef2 <strncmp+0x1c>
 800aeea:	42a0      	cmp	r0, r4
 800aeec:	d001      	beq.n	800aef2 <strncmp+0x1c>
 800aeee:	2a00      	cmp	r2, #0
 800aef0:	d1f5      	bne.n	800aede <strncmp+0x8>
 800aef2:	1ad0      	subs	r0, r2, r3
 800aef4:	bd10      	pop	{r4, pc}
 800aef6:	4610      	mov	r0, r2
 800aef8:	e7fc      	b.n	800aef4 <strncmp+0x1e>

0800aefa <strncpy>:
 800aefa:	b510      	push	{r4, lr}
 800aefc:	3901      	subs	r1, #1
 800aefe:	4603      	mov	r3, r0
 800af00:	b132      	cbz	r2, 800af10 <strncpy+0x16>
 800af02:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800af06:	f803 4b01 	strb.w	r4, [r3], #1
 800af0a:	3a01      	subs	r2, #1
 800af0c:	2c00      	cmp	r4, #0
 800af0e:	d1f7      	bne.n	800af00 <strncpy+0x6>
 800af10:	441a      	add	r2, r3
 800af12:	2100      	movs	r1, #0
 800af14:	4293      	cmp	r3, r2
 800af16:	d100      	bne.n	800af1a <strncpy+0x20>
 800af18:	bd10      	pop	{r4, pc}
 800af1a:	f803 1b01 	strb.w	r1, [r3], #1
 800af1e:	e7f9      	b.n	800af14 <strncpy+0x1a>

0800af20 <strrchr>:
 800af20:	b538      	push	{r3, r4, r5, lr}
 800af22:	f011 04ff 	ands.w	r4, r1, #255	@ 0xff
 800af26:	4603      	mov	r3, r0
 800af28:	d10e      	bne.n	800af48 <strrchr+0x28>
 800af2a:	4621      	mov	r1, r4
 800af2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800af30:	f7ff bfc4 	b.w	800aebc <strchr>
 800af34:	1c43      	adds	r3, r0, #1
 800af36:	4605      	mov	r5, r0
 800af38:	4621      	mov	r1, r4
 800af3a:	4618      	mov	r0, r3
 800af3c:	f7ff ffbe 	bl	800aebc <strchr>
 800af40:	2800      	cmp	r0, #0
 800af42:	d1f7      	bne.n	800af34 <strrchr+0x14>
 800af44:	4628      	mov	r0, r5
 800af46:	bd38      	pop	{r3, r4, r5, pc}
 800af48:	2500      	movs	r5, #0
 800af4a:	e7f5      	b.n	800af38 <strrchr+0x18>

0800af4c <strstr>:
 800af4c:	780a      	ldrb	r2, [r1, #0]
 800af4e:	b570      	push	{r4, r5, r6, lr}
 800af50:	b96a      	cbnz	r2, 800af6e <strstr+0x22>
 800af52:	bd70      	pop	{r4, r5, r6, pc}
 800af54:	429a      	cmp	r2, r3
 800af56:	d109      	bne.n	800af6c <strstr+0x20>
 800af58:	460c      	mov	r4, r1
 800af5a:	4605      	mov	r5, r0
 800af5c:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800af60:	2b00      	cmp	r3, #0
 800af62:	d0f6      	beq.n	800af52 <strstr+0x6>
 800af64:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800af68:	429e      	cmp	r6, r3
 800af6a:	d0f7      	beq.n	800af5c <strstr+0x10>
 800af6c:	3001      	adds	r0, #1
 800af6e:	7803      	ldrb	r3, [r0, #0]
 800af70:	2b00      	cmp	r3, #0
 800af72:	d1ef      	bne.n	800af54 <strstr+0x8>
 800af74:	4618      	mov	r0, r3
 800af76:	e7ec      	b.n	800af52 <strstr+0x6>

0800af78 <validate_structure>:
 800af78:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800af7a:	6801      	ldr	r1, [r0, #0]
 800af7c:	293b      	cmp	r1, #59	@ 0x3b
 800af7e:	4604      	mov	r4, r0
 800af80:	d911      	bls.n	800afa6 <validate_structure+0x2e>
 800af82:	223c      	movs	r2, #60	@ 0x3c
 800af84:	4668      	mov	r0, sp
 800af86:	f000 fe01 	bl	800bb8c <div>
 800af8a:	9a01      	ldr	r2, [sp, #4]
 800af8c:	6863      	ldr	r3, [r4, #4]
 800af8e:	9900      	ldr	r1, [sp, #0]
 800af90:	2a00      	cmp	r2, #0
 800af92:	440b      	add	r3, r1
 800af94:	6063      	str	r3, [r4, #4]
 800af96:	bfbb      	ittet	lt
 800af98:	323c      	addlt	r2, #60	@ 0x3c
 800af9a:	f103 33ff 	addlt.w	r3, r3, #4294967295
 800af9e:	6022      	strge	r2, [r4, #0]
 800afa0:	6022      	strlt	r2, [r4, #0]
 800afa2:	bfb8      	it	lt
 800afa4:	6063      	strlt	r3, [r4, #4]
 800afa6:	6861      	ldr	r1, [r4, #4]
 800afa8:	293b      	cmp	r1, #59	@ 0x3b
 800afaa:	d911      	bls.n	800afd0 <validate_structure+0x58>
 800afac:	223c      	movs	r2, #60	@ 0x3c
 800afae:	4668      	mov	r0, sp
 800afb0:	f000 fdec 	bl	800bb8c <div>
 800afb4:	9a01      	ldr	r2, [sp, #4]
 800afb6:	68a3      	ldr	r3, [r4, #8]
 800afb8:	9900      	ldr	r1, [sp, #0]
 800afba:	2a00      	cmp	r2, #0
 800afbc:	440b      	add	r3, r1
 800afbe:	60a3      	str	r3, [r4, #8]
 800afc0:	bfbb      	ittet	lt
 800afc2:	323c      	addlt	r2, #60	@ 0x3c
 800afc4:	f103 33ff 	addlt.w	r3, r3, #4294967295
 800afc8:	6062      	strge	r2, [r4, #4]
 800afca:	6062      	strlt	r2, [r4, #4]
 800afcc:	bfb8      	it	lt
 800afce:	60a3      	strlt	r3, [r4, #8]
 800afd0:	68a1      	ldr	r1, [r4, #8]
 800afd2:	2917      	cmp	r1, #23
 800afd4:	d911      	bls.n	800affa <validate_structure+0x82>
 800afd6:	2218      	movs	r2, #24
 800afd8:	4668      	mov	r0, sp
 800afda:	f000 fdd7 	bl	800bb8c <div>
 800afde:	9a01      	ldr	r2, [sp, #4]
 800afe0:	68e3      	ldr	r3, [r4, #12]
 800afe2:	9900      	ldr	r1, [sp, #0]
 800afe4:	2a00      	cmp	r2, #0
 800afe6:	440b      	add	r3, r1
 800afe8:	60e3      	str	r3, [r4, #12]
 800afea:	bfbb      	ittet	lt
 800afec:	3218      	addlt	r2, #24
 800afee:	f103 33ff 	addlt.w	r3, r3, #4294967295
 800aff2:	60a2      	strge	r2, [r4, #8]
 800aff4:	60a2      	strlt	r2, [r4, #8]
 800aff6:	bfb8      	it	lt
 800aff8:	60e3      	strlt	r3, [r4, #12]
 800affa:	6921      	ldr	r1, [r4, #16]
 800affc:	290b      	cmp	r1, #11
 800affe:	d911      	bls.n	800b024 <validate_structure+0xac>
 800b000:	220c      	movs	r2, #12
 800b002:	4668      	mov	r0, sp
 800b004:	f000 fdc2 	bl	800bb8c <div>
 800b008:	9a01      	ldr	r2, [sp, #4]
 800b00a:	6963      	ldr	r3, [r4, #20]
 800b00c:	9900      	ldr	r1, [sp, #0]
 800b00e:	2a00      	cmp	r2, #0
 800b010:	440b      	add	r3, r1
 800b012:	6163      	str	r3, [r4, #20]
 800b014:	bfbb      	ittet	lt
 800b016:	320c      	addlt	r2, #12
 800b018:	f103 33ff 	addlt.w	r3, r3, #4294967295
 800b01c:	6122      	strge	r2, [r4, #16]
 800b01e:	6122      	strlt	r2, [r4, #16]
 800b020:	bfb8      	it	lt
 800b022:	6163      	strlt	r3, [r4, #20]
 800b024:	6963      	ldr	r3, [r4, #20]
 800b026:	079a      	lsls	r2, r3, #30
 800b028:	d11c      	bne.n	800b064 <validate_structure+0xec>
 800b02a:	2164      	movs	r1, #100	@ 0x64
 800b02c:	fb93 f2f1 	sdiv	r2, r3, r1
 800b030:	fb01 3212 	mls	r2, r1, r2, r3
 800b034:	b9c2      	cbnz	r2, 800b068 <validate_structure+0xf0>
 800b036:	f203 736c 	addw	r3, r3, #1900	@ 0x76c
 800b03a:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800b03e:	fb93 f1f2 	sdiv	r1, r3, r2
 800b042:	fb02 3311 	mls	r3, r2, r1, r3
 800b046:	2b00      	cmp	r3, #0
 800b048:	bf14      	ite	ne
 800b04a:	231c      	movne	r3, #28
 800b04c:	231d      	moveq	r3, #29
 800b04e:	68e2      	ldr	r2, [r4, #12]
 800b050:	2a00      	cmp	r2, #0
 800b052:	dc0b      	bgt.n	800b06c <validate_structure+0xf4>
 800b054:	4d31      	ldr	r5, [pc, #196]	@ (800b11c <validate_structure+0x1a4>)
 800b056:	200b      	movs	r0, #11
 800b058:	2164      	movs	r1, #100	@ 0x64
 800b05a:	68e6      	ldr	r6, [r4, #12]
 800b05c:	2e00      	cmp	r6, #0
 800b05e:	dd30      	ble.n	800b0c2 <validate_structure+0x14a>
 800b060:	b003      	add	sp, #12
 800b062:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b064:	231c      	movs	r3, #28
 800b066:	e7f2      	b.n	800b04e <validate_structure+0xd6>
 800b068:	231d      	movs	r3, #29
 800b06a:	e7f0      	b.n	800b04e <validate_structure+0xd6>
 800b06c:	4d2b      	ldr	r5, [pc, #172]	@ (800b11c <validate_structure+0x1a4>)
 800b06e:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
 800b072:	2a01      	cmp	r2, #1
 800b074:	bf14      	ite	ne
 800b076:	f855 0022 	ldrne.w	r0, [r5, r2, lsl #2]
 800b07a:	4618      	moveq	r0, r3
 800b07c:	4281      	cmp	r1, r0
 800b07e:	ddef      	ble.n	800b060 <validate_structure+0xe8>
 800b080:	3201      	adds	r2, #1
 800b082:	1a09      	subs	r1, r1, r0
 800b084:	2a0c      	cmp	r2, #12
 800b086:	60e1      	str	r1, [r4, #12]
 800b088:	6122      	str	r2, [r4, #16]
 800b08a:	d1f0      	bne.n	800b06e <validate_structure+0xf6>
 800b08c:	6963      	ldr	r3, [r4, #20]
 800b08e:	2100      	movs	r1, #0
 800b090:	1c5a      	adds	r2, r3, #1
 800b092:	6121      	str	r1, [r4, #16]
 800b094:	0791      	lsls	r1, r2, #30
 800b096:	6162      	str	r2, [r4, #20]
 800b098:	d13c      	bne.n	800b114 <validate_structure+0x19c>
 800b09a:	2164      	movs	r1, #100	@ 0x64
 800b09c:	fb92 f0f1 	sdiv	r0, r2, r1
 800b0a0:	fb01 2210 	mls	r2, r1, r0, r2
 800b0a4:	2a00      	cmp	r2, #0
 800b0a6:	d137      	bne.n	800b118 <validate_structure+0x1a0>
 800b0a8:	f203 736d 	addw	r3, r3, #1901	@ 0x76d
 800b0ac:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800b0b0:	fb93 f1f2 	sdiv	r1, r3, r2
 800b0b4:	fb02 3311 	mls	r3, r2, r1, r3
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	bf14      	ite	ne
 800b0bc:	231c      	movne	r3, #28
 800b0be:	231d      	moveq	r3, #29
 800b0c0:	e7d5      	b.n	800b06e <validate_structure+0xf6>
 800b0c2:	6922      	ldr	r2, [r4, #16]
 800b0c4:	3a01      	subs	r2, #1
 800b0c6:	6122      	str	r2, [r4, #16]
 800b0c8:	3201      	adds	r2, #1
 800b0ca:	d116      	bne.n	800b0fa <validate_structure+0x182>
 800b0cc:	6963      	ldr	r3, [r4, #20]
 800b0ce:	1e5a      	subs	r2, r3, #1
 800b0d0:	0797      	lsls	r7, r2, #30
 800b0d2:	e9c4 0204 	strd	r0, r2, [r4, #16]
 800b0d6:	d119      	bne.n	800b10c <validate_structure+0x194>
 800b0d8:	fb92 f7f1 	sdiv	r7, r2, r1
 800b0dc:	fb01 2217 	mls	r2, r1, r7, r2
 800b0e0:	b9b2      	cbnz	r2, 800b110 <validate_structure+0x198>
 800b0e2:	f203 736b 	addw	r3, r3, #1899	@ 0x76b
 800b0e6:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800b0ea:	fb93 f7f2 	sdiv	r7, r3, r2
 800b0ee:	fb02 3317 	mls	r3, r2, r7, r3
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	bf14      	ite	ne
 800b0f6:	231c      	movne	r3, #28
 800b0f8:	231d      	moveq	r3, #29
 800b0fa:	6922      	ldr	r2, [r4, #16]
 800b0fc:	2a01      	cmp	r2, #1
 800b0fe:	bf14      	ite	ne
 800b100:	f855 2022 	ldrne.w	r2, [r5, r2, lsl #2]
 800b104:	461a      	moveq	r2, r3
 800b106:	4432      	add	r2, r6
 800b108:	60e2      	str	r2, [r4, #12]
 800b10a:	e7a6      	b.n	800b05a <validate_structure+0xe2>
 800b10c:	231c      	movs	r3, #28
 800b10e:	e7f4      	b.n	800b0fa <validate_structure+0x182>
 800b110:	231d      	movs	r3, #29
 800b112:	e7f2      	b.n	800b0fa <validate_structure+0x182>
 800b114:	231c      	movs	r3, #28
 800b116:	e7aa      	b.n	800b06e <validate_structure+0xf6>
 800b118:	231d      	movs	r3, #29
 800b11a:	e7a8      	b.n	800b06e <validate_structure+0xf6>
 800b11c:	08010500 	.word	0x08010500

0800b120 <mktime>:
 800b120:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b124:	b085      	sub	sp, #20
 800b126:	4607      	mov	r7, r0
 800b128:	f003 fa44 	bl	800e5b4 <__gettzinfo>
 800b12c:	4681      	mov	r9, r0
 800b12e:	4638      	mov	r0, r7
 800b130:	f7ff ff22 	bl	800af78 <validate_structure>
 800b134:	e9d7 4300 	ldrd	r4, r3, [r7]
 800b138:	223c      	movs	r2, #60	@ 0x3c
 800b13a:	fb02 4403 	mla	r4, r2, r3, r4
 800b13e:	68bb      	ldr	r3, [r7, #8]
 800b140:	697d      	ldr	r5, [r7, #20]
 800b142:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 800b146:	fb02 4403 	mla	r4, r2, r3, r4
 800b14a:	e9d7 6303 	ldrd	r6, r3, [r7, #12]
 800b14e:	4ac1      	ldr	r2, [pc, #772]	@ (800b454 <mktime+0x334>)
 800b150:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800b154:	3e01      	subs	r6, #1
 800b156:	2b01      	cmp	r3, #1
 800b158:	4416      	add	r6, r2
 800b15a:	dd11      	ble.n	800b180 <mktime+0x60>
 800b15c:	07a9      	lsls	r1, r5, #30
 800b15e:	d10f      	bne.n	800b180 <mktime+0x60>
 800b160:	2264      	movs	r2, #100	@ 0x64
 800b162:	fb95 f3f2 	sdiv	r3, r5, r2
 800b166:	fb02 5313 	mls	r3, r2, r3, r5
 800b16a:	b943      	cbnz	r3, 800b17e <mktime+0x5e>
 800b16c:	f205 736c 	addw	r3, r5, #1900	@ 0x76c
 800b170:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800b174:	fb93 f1f2 	sdiv	r1, r3, r2
 800b178:	fb02 3311 	mls	r3, r2, r1, r3
 800b17c:	b903      	cbnz	r3, 800b180 <mktime+0x60>
 800b17e:	3601      	adds	r6, #1
 800b180:	f505 531c 	add.w	r3, r5, #9984	@ 0x2700
 800b184:	3310      	adds	r3, #16
 800b186:	f644 6220 	movw	r2, #20000	@ 0x4e20
 800b18a:	4293      	cmp	r3, r2
 800b18c:	61fe      	str	r6, [r7, #28]
 800b18e:	f200 8167 	bhi.w	800b460 <mktime+0x340>
 800b192:	2d46      	cmp	r5, #70	@ 0x46
 800b194:	f340 808e 	ble.w	800b2b4 <mktime+0x194>
 800b198:	2346      	movs	r3, #70	@ 0x46
 800b19a:	f240 1c6d 	movw	ip, #365	@ 0x16d
 800b19e:	2164      	movs	r1, #100	@ 0x64
 800b1a0:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 800b1a4:	079a      	lsls	r2, r3, #30
 800b1a6:	d17f      	bne.n	800b2a8 <mktime+0x188>
 800b1a8:	fb93 f2f1 	sdiv	r2, r3, r1
 800b1ac:	fb01 3212 	mls	r2, r1, r2, r3
 800b1b0:	2a00      	cmp	r2, #0
 800b1b2:	d17c      	bne.n	800b2ae <mktime+0x18e>
 800b1b4:	f203 726c 	addw	r2, r3, #1900	@ 0x76c
 800b1b8:	fb92 fef0 	sdiv	lr, r2, r0
 800b1bc:	fb00 221e 	mls	r2, r0, lr, r2
 800b1c0:	2a00      	cmp	r2, #0
 800b1c2:	bf14      	ite	ne
 800b1c4:	4662      	movne	r2, ip
 800b1c6:	f44f 72b7 	moveq.w	r2, #366	@ 0x16e
 800b1ca:	3301      	adds	r3, #1
 800b1cc:	429d      	cmp	r5, r3
 800b1ce:	4416      	add	r6, r2
 800b1d0:	d1e8      	bne.n	800b1a4 <mktime+0x84>
 800b1d2:	4ba1      	ldr	r3, [pc, #644]	@ (800b458 <mktime+0x338>)
 800b1d4:	ea4f 78e4 	mov.w	r8, r4, asr #31
 800b1d8:	fbc6 4803 	smlal	r4, r8, r6, r3
 800b1dc:	f000 f9fa 	bl	800b5d4 <__tz_lock>
 800b1e0:	f000 fa04 	bl	800b5ec <_tzset_unlocked>
 800b1e4:	4b9d      	ldr	r3, [pc, #628]	@ (800b45c <mktime+0x33c>)
 800b1e6:	681b      	ldr	r3, [r3, #0]
 800b1e8:	2b00      	cmp	r3, #0
 800b1ea:	f000 8140 	beq.w	800b46e <mktime+0x34e>
 800b1ee:	f8d7 a020 	ldr.w	sl, [r7, #32]
 800b1f2:	6978      	ldr	r0, [r7, #20]
 800b1f4:	4653      	mov	r3, sl
 800b1f6:	2b01      	cmp	r3, #1
 800b1f8:	bfa8      	it	ge
 800b1fa:	2301      	movge	r3, #1
 800b1fc:	9301      	str	r3, [sp, #4]
 800b1fe:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800b202:	f200 706c 	addw	r0, r0, #1900	@ 0x76c
 800b206:	4283      	cmp	r3, r0
 800b208:	f040 8096 	bne.w	800b338 <mktime+0x218>
 800b20c:	e9d9 2108 	ldrd	r2, r1, [r9, #32]
 800b210:	f8d9 0050 	ldr.w	r0, [r9, #80]	@ 0x50
 800b214:	f8d9 c04c 	ldr.w	ip, [r9, #76]	@ 0x4c
 800b218:	1a13      	subs	r3, r2, r0
 800b21a:	9303      	str	r3, [sp, #12]
 800b21c:	f8d9 3048 	ldr.w	r3, [r9, #72]	@ 0x48
 800b220:	9302      	str	r3, [sp, #8]
 800b222:	9a02      	ldr	r2, [sp, #8]
 800b224:	f8d9 3028 	ldr.w	r3, [r9, #40]	@ 0x28
 800b228:	eb61 7be0 	sbc.w	fp, r1, r0, asr #31
 800b22c:	ebb2 0e03 	subs.w	lr, r2, r3
 800b230:	eb6c 71e3 	sbc.w	r1, ip, r3, asr #31
 800b234:	4574      	cmp	r4, lr
 800b236:	eb78 0201 	sbcs.w	r2, r8, r1
 800b23a:	f280 8085 	bge.w	800b348 <mktime+0x228>
 800b23e:	f8d9 2000 	ldr.w	r2, [r9]
 800b242:	2a00      	cmp	r2, #0
 800b244:	f000 808d 	beq.w	800b362 <mktime+0x242>
 800b248:	9a03      	ldr	r2, [sp, #12]
 800b24a:	4294      	cmp	r4, r2
 800b24c:	eb78 020b 	sbcs.w	r2, r8, fp
 800b250:	f2c0 810a 	blt.w	800b468 <mktime+0x348>
 800b254:	4574      	cmp	r4, lr
 800b256:	eb78 0101 	sbcs.w	r1, r8, r1
 800b25a:	bfb4      	ite	lt
 800b25c:	f04f 0b01 	movlt.w	fp, #1
 800b260:	f04f 0b00 	movge.w	fp, #0
 800b264:	f1ba 0f00 	cmp.w	sl, #0
 800b268:	f280 8087 	bge.w	800b37a <mktime+0x25a>
 800b26c:	f1bb 0f01 	cmp.w	fp, #1
 800b270:	f040 80ff 	bne.w	800b472 <mktime+0x352>
 800b274:	f8d9 3050 	ldr.w	r3, [r9, #80]	@ 0x50
 800b278:	191c      	adds	r4, r3, r4
 800b27a:	eb48 78e3 	adc.w	r8, r8, r3, asr #31
 800b27e:	f04f 0b01 	mov.w	fp, #1
 800b282:	f000 f9ad 	bl	800b5e0 <__tz_unlock>
 800b286:	3604      	adds	r6, #4
 800b288:	2307      	movs	r3, #7
 800b28a:	fb96 f3f3 	sdiv	r3, r6, r3
 800b28e:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800b292:	1af6      	subs	r6, r6, r3
 800b294:	f100 80db 	bmi.w	800b44e <mktime+0x32e>
 800b298:	f8c7 b020 	str.w	fp, [r7, #32]
 800b29c:	61be      	str	r6, [r7, #24]
 800b29e:	4620      	mov	r0, r4
 800b2a0:	4641      	mov	r1, r8
 800b2a2:	b005      	add	sp, #20
 800b2a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b2a8:	f240 126d 	movw	r2, #365	@ 0x16d
 800b2ac:	e78d      	b.n	800b1ca <mktime+0xaa>
 800b2ae:	f44f 72b7 	mov.w	r2, #366	@ 0x16e
 800b2b2:	e78a      	b.n	800b1ca <mktime+0xaa>
 800b2b4:	d08d      	beq.n	800b1d2 <mktime+0xb2>
 800b2b6:	2345      	movs	r3, #69	@ 0x45
 800b2b8:	f240 1c6d 	movw	ip, #365	@ 0x16d
 800b2bc:	2164      	movs	r1, #100	@ 0x64
 800b2be:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 800b2c2:	e012      	b.n	800b2ea <mktime+0x1ca>
 800b2c4:	bb62      	cbnz	r2, 800b320 <mktime+0x200>
 800b2c6:	fb93 f2f1 	sdiv	r2, r3, r1
 800b2ca:	fb01 3212 	mls	r2, r1, r2, r3
 800b2ce:	bb52      	cbnz	r2, 800b326 <mktime+0x206>
 800b2d0:	f203 726c 	addw	r2, r3, #1900	@ 0x76c
 800b2d4:	fb92 fef0 	sdiv	lr, r2, r0
 800b2d8:	fb00 221e 	mls	r2, r0, lr, r2
 800b2dc:	2a00      	cmp	r2, #0
 800b2de:	bf14      	ite	ne
 800b2e0:	4662      	movne	r2, ip
 800b2e2:	f44f 72b7 	moveq.w	r2, #366	@ 0x16e
 800b2e6:	1ab6      	subs	r6, r6, r2
 800b2e8:	3b01      	subs	r3, #1
 800b2ea:	429d      	cmp	r5, r3
 800b2ec:	f003 0203 	and.w	r2, r3, #3
 800b2f0:	dbe8      	blt.n	800b2c4 <mktime+0x1a4>
 800b2f2:	b9da      	cbnz	r2, 800b32c <mktime+0x20c>
 800b2f4:	2264      	movs	r2, #100	@ 0x64
 800b2f6:	fb95 f3f2 	sdiv	r3, r5, r2
 800b2fa:	fb02 5313 	mls	r3, r2, r3, r5
 800b2fe:	b9c3      	cbnz	r3, 800b332 <mktime+0x212>
 800b300:	f205 736c 	addw	r3, r5, #1900	@ 0x76c
 800b304:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800b308:	fb93 f1f2 	sdiv	r1, r3, r2
 800b30c:	fb02 3311 	mls	r3, r2, r1, r3
 800b310:	2b00      	cmp	r3, #0
 800b312:	f240 136d 	movw	r3, #365	@ 0x16d
 800b316:	bf08      	it	eq
 800b318:	f44f 73b7 	moveq.w	r3, #366	@ 0x16e
 800b31c:	1af6      	subs	r6, r6, r3
 800b31e:	e758      	b.n	800b1d2 <mktime+0xb2>
 800b320:	f240 126d 	movw	r2, #365	@ 0x16d
 800b324:	e7df      	b.n	800b2e6 <mktime+0x1c6>
 800b326:	f44f 72b7 	mov.w	r2, #366	@ 0x16e
 800b32a:	e7dc      	b.n	800b2e6 <mktime+0x1c6>
 800b32c:	f240 136d 	movw	r3, #365	@ 0x16d
 800b330:	e7f4      	b.n	800b31c <mktime+0x1fc>
 800b332:	f44f 73b7 	mov.w	r3, #366	@ 0x16e
 800b336:	e7f1      	b.n	800b31c <mktime+0x1fc>
 800b338:	f000 f8a2 	bl	800b480 <__tzcalc_limits>
 800b33c:	2800      	cmp	r0, #0
 800b33e:	f47f af65 	bne.w	800b20c <mktime+0xec>
 800b342:	f8dd b004 	ldr.w	fp, [sp, #4]
 800b346:	e791      	b.n	800b26c <mktime+0x14c>
 800b348:	9a02      	ldr	r2, [sp, #8]
 800b34a:	1a12      	subs	r2, r2, r0
 800b34c:	9202      	str	r2, [sp, #8]
 800b34e:	ea4f 72e0 	mov.w	r2, r0, asr #31
 800b352:	eb6c 0c02 	sbc.w	ip, ip, r2
 800b356:	9a02      	ldr	r2, [sp, #8]
 800b358:	4294      	cmp	r4, r2
 800b35a:	eb78 0c0c 	sbcs.w	ip, r8, ip
 800b35e:	dbf0      	blt.n	800b342 <mktime+0x222>
 800b360:	e76d      	b.n	800b23e <mktime+0x11e>
 800b362:	9a03      	ldr	r2, [sp, #12]
 800b364:	4294      	cmp	r4, r2
 800b366:	eb78 020b 	sbcs.w	r2, r8, fp
 800b36a:	f6ff af73 	blt.w	800b254 <mktime+0x134>
 800b36e:	f1ba 0f00 	cmp.w	sl, #0
 800b372:	f6ff af7f 	blt.w	800b274 <mktime+0x154>
 800b376:	f04f 0b01 	mov.w	fp, #1
 800b37a:	9a01      	ldr	r2, [sp, #4]
 800b37c:	ea82 020b 	eor.w	r2, r2, fp
 800b380:	2a01      	cmp	r2, #1
 800b382:	f47f af73 	bne.w	800b26c <mktime+0x14c>
 800b386:	f1bb 0f00 	cmp.w	fp, #0
 800b38a:	d035      	beq.n	800b3f8 <mktime+0x2d8>
 800b38c:	1a1b      	subs	r3, r3, r0
 800b38e:	683a      	ldr	r2, [r7, #0]
 800b390:	f8d7 a00c 	ldr.w	sl, [r7, #12]
 800b394:	441a      	add	r2, r3
 800b396:	191c      	adds	r4, r3, r4
 800b398:	603a      	str	r2, [r7, #0]
 800b39a:	4638      	mov	r0, r7
 800b39c:	eb48 78e3 	adc.w	r8, r8, r3, asr #31
 800b3a0:	f7ff fdea 	bl	800af78 <validate_structure>
 800b3a4:	68fa      	ldr	r2, [r7, #12]
 800b3a6:	ebb2 020a 	subs.w	r2, r2, sl
 800b3aa:	f43f af5f 	beq.w	800b26c <mktime+0x14c>
 800b3ae:	2a01      	cmp	r2, #1
 800b3b0:	dc24      	bgt.n	800b3fc <mktime+0x2dc>
 800b3b2:	1c93      	adds	r3, r2, #2
 800b3b4:	bfd8      	it	le
 800b3b6:	2201      	movle	r2, #1
 800b3b8:	69fb      	ldr	r3, [r7, #28]
 800b3ba:	18d3      	adds	r3, r2, r3
 800b3bc:	d527      	bpl.n	800b40e <mktime+0x2ee>
 800b3be:	1e6b      	subs	r3, r5, #1
 800b3c0:	0798      	lsls	r0, r3, #30
 800b3c2:	d11e      	bne.n	800b402 <mktime+0x2e2>
 800b3c4:	2164      	movs	r1, #100	@ 0x64
 800b3c6:	fb93 f0f1 	sdiv	r0, r3, r1
 800b3ca:	fb01 3310 	mls	r3, r1, r0, r3
 800b3ce:	b9db      	cbnz	r3, 800b408 <mktime+0x2e8>
 800b3d0:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 800b3d4:	f205 756b 	addw	r5, r5, #1899	@ 0x76b
 800b3d8:	fb95 f1f3 	sdiv	r1, r5, r3
 800b3dc:	fb03 5511 	mls	r5, r3, r1, r5
 800b3e0:	2d00      	cmp	r5, #0
 800b3e2:	f240 136d 	movw	r3, #365	@ 0x16d
 800b3e6:	bf18      	it	ne
 800b3e8:	f44f 73b6 	movne.w	r3, #364	@ 0x16c
 800b3ec:	61fb      	str	r3, [r7, #28]
 800b3ee:	4416      	add	r6, r2
 800b3f0:	e73c      	b.n	800b26c <mktime+0x14c>
 800b3f2:	f04f 0b00 	mov.w	fp, #0
 800b3f6:	e7c0      	b.n	800b37a <mktime+0x25a>
 800b3f8:	1ac3      	subs	r3, r0, r3
 800b3fa:	e7c8      	b.n	800b38e <mktime+0x26e>
 800b3fc:	f04f 32ff 	mov.w	r2, #4294967295
 800b400:	e7da      	b.n	800b3b8 <mktime+0x298>
 800b402:	f44f 73b6 	mov.w	r3, #364	@ 0x16c
 800b406:	e7f1      	b.n	800b3ec <mktime+0x2cc>
 800b408:	f240 136d 	movw	r3, #365	@ 0x16d
 800b40c:	e7ee      	b.n	800b3ec <mktime+0x2cc>
 800b40e:	07a9      	lsls	r1, r5, #30
 800b410:	d117      	bne.n	800b442 <mktime+0x322>
 800b412:	2064      	movs	r0, #100	@ 0x64
 800b414:	fb95 f1f0 	sdiv	r1, r5, r0
 800b418:	fb00 5111 	mls	r1, r0, r1, r5
 800b41c:	b9a1      	cbnz	r1, 800b448 <mktime+0x328>
 800b41e:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 800b422:	f205 756c 	addw	r5, r5, #1900	@ 0x76c
 800b426:	fb95 f0f1 	sdiv	r0, r5, r1
 800b42a:	fb01 5510 	mls	r5, r1, r0, r5
 800b42e:	2d00      	cmp	r5, #0
 800b430:	f240 116d 	movw	r1, #365	@ 0x16d
 800b434:	bf08      	it	eq
 800b436:	f44f 71b7 	moveq.w	r1, #366	@ 0x16e
 800b43a:	428b      	cmp	r3, r1
 800b43c:	bfa8      	it	ge
 800b43e:	1a5b      	subge	r3, r3, r1
 800b440:	e7d4      	b.n	800b3ec <mktime+0x2cc>
 800b442:	f240 116d 	movw	r1, #365	@ 0x16d
 800b446:	e7f8      	b.n	800b43a <mktime+0x31a>
 800b448:	f44f 71b7 	mov.w	r1, #366	@ 0x16e
 800b44c:	e7f5      	b.n	800b43a <mktime+0x31a>
 800b44e:	3607      	adds	r6, #7
 800b450:	e722      	b.n	800b298 <mktime+0x178>
 800b452:	bf00      	nop
 800b454:	080104d0 	.word	0x080104d0
 800b458:	00015180 	.word	0x00015180
 800b45c:	20008d4c 	.word	0x20008d4c
 800b460:	f04f 34ff 	mov.w	r4, #4294967295
 800b464:	46a0      	mov	r8, r4
 800b466:	e71a      	b.n	800b29e <mktime+0x17e>
 800b468:	f1ba 0f00 	cmp.w	sl, #0
 800b46c:	dac1      	bge.n	800b3f2 <mktime+0x2d2>
 800b46e:	f04f 0b00 	mov.w	fp, #0
 800b472:	f8d9 3028 	ldr.w	r3, [r9, #40]	@ 0x28
 800b476:	191c      	adds	r4, r3, r4
 800b478:	eb48 78e3 	adc.w	r8, r8, r3, asr #31
 800b47c:	e701      	b.n	800b282 <mktime+0x162>
 800b47e:	bf00      	nop

0800b480 <__tzcalc_limits>:
 800b480:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b484:	4604      	mov	r4, r0
 800b486:	f003 f895 	bl	800e5b4 <__gettzinfo>
 800b48a:	f240 73b1 	movw	r3, #1969	@ 0x7b1
 800b48e:	429c      	cmp	r4, r3
 800b490:	f340 8099 	ble.w	800b5c6 <__tzcalc_limits+0x146>
 800b494:	f46f 67f6 	mvn.w	r7, #1968	@ 0x7b0
 800b498:	19e5      	adds	r5, r4, r7
 800b49a:	f2a4 73b2 	subw	r3, r4, #1970	@ 0x7b2
 800b49e:	f240 126d 	movw	r2, #365	@ 0x16d
 800b4a2:	10ad      	asrs	r5, r5, #2
 800b4a4:	fb02 5503 	mla	r5, r2, r3, r5
 800b4a8:	f46f 6cc8 	mvn.w	ip, #1600	@ 0x640
 800b4ac:	f06f 0263 	mvn.w	r2, #99	@ 0x63
 800b4b0:	f2a4 736d 	subw	r3, r4, #1901	@ 0x76d
 800b4b4:	4f45      	ldr	r7, [pc, #276]	@ (800b5cc <__tzcalc_limits+0x14c>)
 800b4b6:	fb93 f3f2 	sdiv	r3, r3, r2
 800b4ba:	441d      	add	r5, r3
 800b4bc:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800b4c0:	eb04 030c 	add.w	r3, r4, ip
 800b4c4:	6044      	str	r4, [r0, #4]
 800b4c6:	fbb3 f3f2 	udiv	r3, r3, r2
 800b4ca:	4601      	mov	r1, r0
 800b4cc:	441d      	add	r5, r3
 800b4ce:	f100 0c50 	add.w	ip, r0, #80	@ 0x50
 800b4d2:	7a0b      	ldrb	r3, [r1, #8]
 800b4d4:	694a      	ldr	r2, [r1, #20]
 800b4d6:	2b4a      	cmp	r3, #74	@ 0x4a
 800b4d8:	d133      	bne.n	800b542 <__tzcalc_limits+0xc2>
 800b4da:	07a6      	lsls	r6, r4, #30
 800b4dc:	eb05 0302 	add.w	r3, r5, r2
 800b4e0:	d106      	bne.n	800b4f0 <__tzcalc_limits+0x70>
 800b4e2:	f04f 0e64 	mov.w	lr, #100	@ 0x64
 800b4e6:	fb94 f6fe 	sdiv	r6, r4, lr
 800b4ea:	fb0e 4616 	mls	r6, lr, r6, r4
 800b4ee:	b936      	cbnz	r6, 800b4fe <__tzcalc_limits+0x7e>
 800b4f0:	f44f 7ec8 	mov.w	lr, #400	@ 0x190
 800b4f4:	fb94 f6fe 	sdiv	r6, r4, lr
 800b4f8:	fb0e 4616 	mls	r6, lr, r6, r4
 800b4fc:	b9fe      	cbnz	r6, 800b53e <__tzcalc_limits+0xbe>
 800b4fe:	2a3b      	cmp	r2, #59	@ 0x3b
 800b500:	bfd4      	ite	le
 800b502:	2200      	movle	r2, #0
 800b504:	2201      	movgt	r2, #1
 800b506:	4413      	add	r3, r2
 800b508:	3b01      	subs	r3, #1
 800b50a:	698a      	ldr	r2, [r1, #24]
 800b50c:	17d6      	asrs	r6, r2, #31
 800b50e:	fbc3 2607 	smlal	r2, r6, r3, r7
 800b512:	6a8b      	ldr	r3, [r1, #40]	@ 0x28
 800b514:	18d2      	adds	r2, r2, r3
 800b516:	eb46 73e3 	adc.w	r3, r6, r3, asr #31
 800b51a:	e9c1 2308 	strd	r2, r3, [r1, #32]
 800b51e:	3128      	adds	r1, #40	@ 0x28
 800b520:	458c      	cmp	ip, r1
 800b522:	d1d6      	bne.n	800b4d2 <__tzcalc_limits+0x52>
 800b524:	e9d0 4308 	ldrd	r4, r3, [r0, #32]
 800b528:	e9d0 1212 	ldrd	r1, r2, [r0, #72]	@ 0x48
 800b52c:	428c      	cmp	r4, r1
 800b52e:	4193      	sbcs	r3, r2
 800b530:	bfb4      	ite	lt
 800b532:	2301      	movlt	r3, #1
 800b534:	2300      	movge	r3, #0
 800b536:	6003      	str	r3, [r0, #0]
 800b538:	2001      	movs	r0, #1
 800b53a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b53e:	2200      	movs	r2, #0
 800b540:	e7e1      	b.n	800b506 <__tzcalc_limits+0x86>
 800b542:	2b44      	cmp	r3, #68	@ 0x44
 800b544:	d101      	bne.n	800b54a <__tzcalc_limits+0xca>
 800b546:	18ab      	adds	r3, r5, r2
 800b548:	e7df      	b.n	800b50a <__tzcalc_limits+0x8a>
 800b54a:	07a3      	lsls	r3, r4, #30
 800b54c:	d105      	bne.n	800b55a <__tzcalc_limits+0xda>
 800b54e:	2664      	movs	r6, #100	@ 0x64
 800b550:	fb94 f3f6 	sdiv	r3, r4, r6
 800b554:	fb06 4313 	mls	r3, r6, r3, r4
 800b558:	bb7b      	cbnz	r3, 800b5ba <__tzcalc_limits+0x13a>
 800b55a:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 800b55e:	fb94 f6f3 	sdiv	r6, r4, r3
 800b562:	fb03 4616 	mls	r6, r3, r6, r4
 800b566:	fab6 f686 	clz	r6, r6
 800b56a:	0976      	lsrs	r6, r6, #5
 800b56c:	f8df e060 	ldr.w	lr, [pc, #96]	@ 800b5d0 <__tzcalc_limits+0x150>
 800b570:	f8d1 900c 	ldr.w	r9, [r1, #12]
 800b574:	f04f 0a30 	mov.w	sl, #48	@ 0x30
 800b578:	462b      	mov	r3, r5
 800b57a:	f04f 0800 	mov.w	r8, #0
 800b57e:	fb0a e606 	mla	r6, sl, r6, lr
 800b582:	f108 0801 	add.w	r8, r8, #1
 800b586:	45c1      	cmp	r9, r8
 800b588:	f856 e028 	ldr.w	lr, [r6, r8, lsl #2]
 800b58c:	dc17      	bgt.n	800b5be <__tzcalc_limits+0x13e>
 800b58e:	f103 0804 	add.w	r8, r3, #4
 800b592:	2607      	movs	r6, #7
 800b594:	fb98 f6f6 	sdiv	r6, r8, r6
 800b598:	ebc6 06c6 	rsb	r6, r6, r6, lsl #3
 800b59c:	eba8 0606 	sub.w	r6, r8, r6
 800b5a0:	1b92      	subs	r2, r2, r6
 800b5a2:	690e      	ldr	r6, [r1, #16]
 800b5a4:	f106 36ff 	add.w	r6, r6, #4294967295
 800b5a8:	bf48      	it	mi
 800b5aa:	3207      	addmi	r2, #7
 800b5ac:	ebc6 06c6 	rsb	r6, r6, r6, lsl #3
 800b5b0:	4432      	add	r2, r6
 800b5b2:	4572      	cmp	r2, lr
 800b5b4:	da05      	bge.n	800b5c2 <__tzcalc_limits+0x142>
 800b5b6:	4413      	add	r3, r2
 800b5b8:	e7a7      	b.n	800b50a <__tzcalc_limits+0x8a>
 800b5ba:	2601      	movs	r6, #1
 800b5bc:	e7d6      	b.n	800b56c <__tzcalc_limits+0xec>
 800b5be:	4473      	add	r3, lr
 800b5c0:	e7df      	b.n	800b582 <__tzcalc_limits+0x102>
 800b5c2:	3a07      	subs	r2, #7
 800b5c4:	e7f5      	b.n	800b5b2 <__tzcalc_limits+0x132>
 800b5c6:	2000      	movs	r0, #0
 800b5c8:	e7b7      	b.n	800b53a <__tzcalc_limits+0xba>
 800b5ca:	bf00      	nop
 800b5cc:	00015180 	.word	0x00015180
 800b5d0:	080107f0 	.word	0x080107f0

0800b5d4 <__tz_lock>:
 800b5d4:	4801      	ldr	r0, [pc, #4]	@ (800b5dc <__tz_lock+0x8>)
 800b5d6:	f7f9 b90e 	b.w	80047f6 <__retarget_lock_acquire>
 800b5da:	bf00      	nop
 800b5dc:	200028c4 	.word	0x200028c4

0800b5e0 <__tz_unlock>:
 800b5e0:	4801      	ldr	r0, [pc, #4]	@ (800b5e8 <__tz_unlock+0x8>)
 800b5e2:	f7f9 b912 	b.w	800480a <__retarget_lock_release>
 800b5e6:	bf00      	nop
 800b5e8:	200028c4 	.word	0x200028c4

0800b5ec <_tzset_unlocked>:
 800b5ec:	4b01      	ldr	r3, [pc, #4]	@ (800b5f4 <_tzset_unlocked+0x8>)
 800b5ee:	6818      	ldr	r0, [r3, #0]
 800b5f0:	f000 b802 	b.w	800b5f8 <_tzset_unlocked_r>
 800b5f4:	2000019c 	.word	0x2000019c

0800b5f8 <_tzset_unlocked_r>:
 800b5f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5fc:	b08d      	sub	sp, #52	@ 0x34
 800b5fe:	4607      	mov	r7, r0
 800b600:	f002 ffd8 	bl	800e5b4 <__gettzinfo>
 800b604:	49bc      	ldr	r1, [pc, #752]	@ (800b8f8 <_tzset_unlocked_r+0x300>)
 800b606:	4dbd      	ldr	r5, [pc, #756]	@ (800b8fc <_tzset_unlocked_r+0x304>)
 800b608:	4604      	mov	r4, r0
 800b60a:	4638      	mov	r0, r7
 800b60c:	f001 fcd4 	bl	800cfb8 <_getenv_r>
 800b610:	4606      	mov	r6, r0
 800b612:	bb10      	cbnz	r0, 800b65a <_tzset_unlocked_r+0x62>
 800b614:	4bba      	ldr	r3, [pc, #744]	@ (800b900 <_tzset_unlocked_r+0x308>)
 800b616:	4abb      	ldr	r2, [pc, #748]	@ (800b904 <_tzset_unlocked_r+0x30c>)
 800b618:	6018      	str	r0, [r3, #0]
 800b61a:	4bbb      	ldr	r3, [pc, #748]	@ (800b908 <_tzset_unlocked_r+0x310>)
 800b61c:	62a0      	str	r0, [r4, #40]	@ 0x28
 800b61e:	6018      	str	r0, [r3, #0]
 800b620:	4bba      	ldr	r3, [pc, #744]	@ (800b90c <_tzset_unlocked_r+0x314>)
 800b622:	6520      	str	r0, [r4, #80]	@ 0x50
 800b624:	e9c3 2200 	strd	r2, r2, [r3]
 800b628:	214a      	movs	r1, #74	@ 0x4a
 800b62a:	2200      	movs	r2, #0
 800b62c:	2300      	movs	r3, #0
 800b62e:	e9c4 0003 	strd	r0, r0, [r4, #12]
 800b632:	e9c4 0005 	strd	r0, r0, [r4, #20]
 800b636:	e9c4 000d 	strd	r0, r0, [r4, #52]	@ 0x34
 800b63a:	e9c4 000f 	strd	r0, r0, [r4, #60]	@ 0x3c
 800b63e:	e9c4 2308 	strd	r2, r3, [r4, #32]
 800b642:	e9c4 2312 	strd	r2, r3, [r4, #72]	@ 0x48
 800b646:	6828      	ldr	r0, [r5, #0]
 800b648:	7221      	strb	r1, [r4, #8]
 800b64a:	f884 1030 	strb.w	r1, [r4, #48]	@ 0x30
 800b64e:	f7fd fcbd 	bl	8008fcc <free>
 800b652:	602e      	str	r6, [r5, #0]
 800b654:	b00d      	add	sp, #52	@ 0x34
 800b656:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b65a:	6829      	ldr	r1, [r5, #0]
 800b65c:	2900      	cmp	r1, #0
 800b65e:	f040 808e 	bne.w	800b77e <_tzset_unlocked_r+0x186>
 800b662:	6828      	ldr	r0, [r5, #0]
 800b664:	f7fd fcb2 	bl	8008fcc <free>
 800b668:	4630      	mov	r0, r6
 800b66a:	f7f4 fe11 	bl	8000290 <strlen>
 800b66e:	1c41      	adds	r1, r0, #1
 800b670:	4638      	mov	r0, r7
 800b672:	f7fd fcd5 	bl	8009020 <_malloc_r>
 800b676:	6028      	str	r0, [r5, #0]
 800b678:	2800      	cmp	r0, #0
 800b67a:	f040 8086 	bne.w	800b78a <_tzset_unlocked_r+0x192>
 800b67e:	4aa2      	ldr	r2, [pc, #648]	@ (800b908 <_tzset_unlocked_r+0x310>)
 800b680:	f8df 8288 	ldr.w	r8, [pc, #648]	@ 800b90c <_tzset_unlocked_r+0x314>
 800b684:	f8df a278 	ldr.w	sl, [pc, #632]	@ 800b900 <_tzset_unlocked_r+0x308>
 800b688:	2300      	movs	r3, #0
 800b68a:	6013      	str	r3, [r2, #0]
 800b68c:	4aa0      	ldr	r2, [pc, #640]	@ (800b910 <_tzset_unlocked_r+0x318>)
 800b68e:	f8ca 3000 	str.w	r3, [sl]
 800b692:	2000      	movs	r0, #0
 800b694:	2100      	movs	r1, #0
 800b696:	e9c8 2200 	strd	r2, r2, [r8]
 800b69a:	e9c4 3303 	strd	r3, r3, [r4, #12]
 800b69e:	e9c4 3305 	strd	r3, r3, [r4, #20]
 800b6a2:	e9c4 0108 	strd	r0, r1, [r4, #32]
 800b6a6:	e9c4 330d 	strd	r3, r3, [r4, #52]	@ 0x34
 800b6aa:	e9c4 330f 	strd	r3, r3, [r4, #60]	@ 0x3c
 800b6ae:	e9c4 0112 	strd	r0, r1, [r4, #72]	@ 0x48
 800b6b2:	224a      	movs	r2, #74	@ 0x4a
 800b6b4:	7222      	strb	r2, [r4, #8]
 800b6b6:	62a3      	str	r3, [r4, #40]	@ 0x28
 800b6b8:	f884 2030 	strb.w	r2, [r4, #48]	@ 0x30
 800b6bc:	6523      	str	r3, [r4, #80]	@ 0x50
 800b6be:	7833      	ldrb	r3, [r6, #0]
 800b6c0:	2b3a      	cmp	r3, #58	@ 0x3a
 800b6c2:	bf08      	it	eq
 800b6c4:	3601      	addeq	r6, #1
 800b6c6:	7833      	ldrb	r3, [r6, #0]
 800b6c8:	2b3c      	cmp	r3, #60	@ 0x3c
 800b6ca:	d162      	bne.n	800b792 <_tzset_unlocked_r+0x19a>
 800b6cc:	1c75      	adds	r5, r6, #1
 800b6ce:	4a91      	ldr	r2, [pc, #580]	@ (800b914 <_tzset_unlocked_r+0x31c>)
 800b6d0:	4991      	ldr	r1, [pc, #580]	@ (800b918 <_tzset_unlocked_r+0x320>)
 800b6d2:	ab0a      	add	r3, sp, #40	@ 0x28
 800b6d4:	4628      	mov	r0, r5
 800b6d6:	f7ff fb41 	bl	800ad5c <siscanf>
 800b6da:	2800      	cmp	r0, #0
 800b6dc:	ddba      	ble.n	800b654 <_tzset_unlocked_r+0x5c>
 800b6de:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b6e0:	1eda      	subs	r2, r3, #3
 800b6e2:	2a07      	cmp	r2, #7
 800b6e4:	d8b6      	bhi.n	800b654 <_tzset_unlocked_r+0x5c>
 800b6e6:	5ceb      	ldrb	r3, [r5, r3]
 800b6e8:	2b3e      	cmp	r3, #62	@ 0x3e
 800b6ea:	d1b3      	bne.n	800b654 <_tzset_unlocked_r+0x5c>
 800b6ec:	3602      	adds	r6, #2
 800b6ee:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b6f0:	18f5      	adds	r5, r6, r3
 800b6f2:	5cf3      	ldrb	r3, [r6, r3]
 800b6f4:	2b2d      	cmp	r3, #45	@ 0x2d
 800b6f6:	d15a      	bne.n	800b7ae <_tzset_unlocked_r+0x1b6>
 800b6f8:	3501      	adds	r5, #1
 800b6fa:	f04f 39ff 	mov.w	r9, #4294967295
 800b6fe:	2300      	movs	r3, #0
 800b700:	f8ad 301e 	strh.w	r3, [sp, #30]
 800b704:	f8ad 3020 	strh.w	r3, [sp, #32]
 800b708:	af08      	add	r7, sp, #32
 800b70a:	ab0a      	add	r3, sp, #40	@ 0x28
 800b70c:	e9cd 3701 	strd	r3, r7, [sp, #4]
 800b710:	9303      	str	r3, [sp, #12]
 800b712:	f10d 031e 	add.w	r3, sp, #30
 800b716:	9300      	str	r3, [sp, #0]
 800b718:	4980      	ldr	r1, [pc, #512]	@ (800b91c <_tzset_unlocked_r+0x324>)
 800b71a:	ab0a      	add	r3, sp, #40	@ 0x28
 800b71c:	aa07      	add	r2, sp, #28
 800b71e:	4628      	mov	r0, r5
 800b720:	f7ff fb1c 	bl	800ad5c <siscanf>
 800b724:	2800      	cmp	r0, #0
 800b726:	dd95      	ble.n	800b654 <_tzset_unlocked_r+0x5c>
 800b728:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 800b72c:	f8bd 6020 	ldrh.w	r6, [sp, #32]
 800b730:	223c      	movs	r2, #60	@ 0x3c
 800b732:	fb02 6603 	mla	r6, r2, r3, r6
 800b736:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 800b73a:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 800b73e:	fb02 6603 	mla	r6, r2, r3, r6
 800b742:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b744:	fb09 f606 	mul.w	r6, r9, r6
 800b748:	eb05 0903 	add.w	r9, r5, r3
 800b74c:	5ceb      	ldrb	r3, [r5, r3]
 800b74e:	2b3c      	cmp	r3, #60	@ 0x3c
 800b750:	f040 80ee 	bne.w	800b930 <_tzset_unlocked_r+0x338>
 800b754:	f109 0501 	add.w	r5, r9, #1
 800b758:	4a71      	ldr	r2, [pc, #452]	@ (800b920 <_tzset_unlocked_r+0x328>)
 800b75a:	496f      	ldr	r1, [pc, #444]	@ (800b918 <_tzset_unlocked_r+0x320>)
 800b75c:	ab0a      	add	r3, sp, #40	@ 0x28
 800b75e:	4628      	mov	r0, r5
 800b760:	f7ff fafc 	bl	800ad5c <siscanf>
 800b764:	2800      	cmp	r0, #0
 800b766:	dc28      	bgt.n	800b7ba <_tzset_unlocked_r+0x1c2>
 800b768:	f899 3001 	ldrb.w	r3, [r9, #1]
 800b76c:	2b3e      	cmp	r3, #62	@ 0x3e
 800b76e:	d124      	bne.n	800b7ba <_tzset_unlocked_r+0x1c2>
 800b770:	4b68      	ldr	r3, [pc, #416]	@ (800b914 <_tzset_unlocked_r+0x31c>)
 800b772:	62a6      	str	r6, [r4, #40]	@ 0x28
 800b774:	e9c8 3300 	strd	r3, r3, [r8]
 800b778:	f8ca 6000 	str.w	r6, [sl]
 800b77c:	e76a      	b.n	800b654 <_tzset_unlocked_r+0x5c>
 800b77e:	f7f4 fd27 	bl	80001d0 <strcmp>
 800b782:	2800      	cmp	r0, #0
 800b784:	f47f af6d 	bne.w	800b662 <_tzset_unlocked_r+0x6a>
 800b788:	e764      	b.n	800b654 <_tzset_unlocked_r+0x5c>
 800b78a:	4631      	mov	r1, r6
 800b78c:	f000 f9da 	bl	800bb44 <strcpy>
 800b790:	e775      	b.n	800b67e <_tzset_unlocked_r+0x86>
 800b792:	4a60      	ldr	r2, [pc, #384]	@ (800b914 <_tzset_unlocked_r+0x31c>)
 800b794:	4963      	ldr	r1, [pc, #396]	@ (800b924 <_tzset_unlocked_r+0x32c>)
 800b796:	ab0a      	add	r3, sp, #40	@ 0x28
 800b798:	4630      	mov	r0, r6
 800b79a:	f7ff fadf 	bl	800ad5c <siscanf>
 800b79e:	2800      	cmp	r0, #0
 800b7a0:	f77f af58 	ble.w	800b654 <_tzset_unlocked_r+0x5c>
 800b7a4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b7a6:	3b03      	subs	r3, #3
 800b7a8:	2b07      	cmp	r3, #7
 800b7aa:	d9a0      	bls.n	800b6ee <_tzset_unlocked_r+0xf6>
 800b7ac:	e752      	b.n	800b654 <_tzset_unlocked_r+0x5c>
 800b7ae:	2b2b      	cmp	r3, #43	@ 0x2b
 800b7b0:	bf08      	it	eq
 800b7b2:	3501      	addeq	r5, #1
 800b7b4:	f04f 0901 	mov.w	r9, #1
 800b7b8:	e7a1      	b.n	800b6fe <_tzset_unlocked_r+0x106>
 800b7ba:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b7bc:	1eda      	subs	r2, r3, #3
 800b7be:	2a07      	cmp	r2, #7
 800b7c0:	f63f af48 	bhi.w	800b654 <_tzset_unlocked_r+0x5c>
 800b7c4:	5ceb      	ldrb	r3, [r5, r3]
 800b7c6:	2b3e      	cmp	r3, #62	@ 0x3e
 800b7c8:	f47f af44 	bne.w	800b654 <_tzset_unlocked_r+0x5c>
 800b7cc:	f109 0902 	add.w	r9, r9, #2
 800b7d0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b7d2:	eb09 0503 	add.w	r5, r9, r3
 800b7d6:	f819 3003 	ldrb.w	r3, [r9, r3]
 800b7da:	2b2d      	cmp	r3, #45	@ 0x2d
 800b7dc:	f040 80b7 	bne.w	800b94e <_tzset_unlocked_r+0x356>
 800b7e0:	3501      	adds	r5, #1
 800b7e2:	f04f 39ff 	mov.w	r9, #4294967295
 800b7e6:	2300      	movs	r3, #0
 800b7e8:	f8ad 301c 	strh.w	r3, [sp, #28]
 800b7ec:	f8ad 301e 	strh.w	r3, [sp, #30]
 800b7f0:	f8ad 3020 	strh.w	r3, [sp, #32]
 800b7f4:	930a      	str	r3, [sp, #40]	@ 0x28
 800b7f6:	ab0a      	add	r3, sp, #40	@ 0x28
 800b7f8:	e9cd 7302 	strd	r7, r3, [sp, #8]
 800b7fc:	9301      	str	r3, [sp, #4]
 800b7fe:	f10d 031e 	add.w	r3, sp, #30
 800b802:	9300      	str	r3, [sp, #0]
 800b804:	4945      	ldr	r1, [pc, #276]	@ (800b91c <_tzset_unlocked_r+0x324>)
 800b806:	ab0a      	add	r3, sp, #40	@ 0x28
 800b808:	aa07      	add	r2, sp, #28
 800b80a:	4628      	mov	r0, r5
 800b80c:	f7ff faa6 	bl	800ad5c <siscanf>
 800b810:	2800      	cmp	r0, #0
 800b812:	f300 80a2 	bgt.w	800b95a <_tzset_unlocked_r+0x362>
 800b816:	f5a6 6361 	sub.w	r3, r6, #3600	@ 0xe10
 800b81a:	9304      	str	r3, [sp, #16]
 800b81c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b81e:	4627      	mov	r7, r4
 800b820:	441d      	add	r5, r3
 800b822:	f04f 0b00 	mov.w	fp, #0
 800b826:	782b      	ldrb	r3, [r5, #0]
 800b828:	2b2c      	cmp	r3, #44	@ 0x2c
 800b82a:	bf08      	it	eq
 800b82c:	3501      	addeq	r5, #1
 800b82e:	f895 9000 	ldrb.w	r9, [r5]
 800b832:	f1b9 0f4d 	cmp.w	r9, #77	@ 0x4d
 800b836:	f040 80a3 	bne.w	800b980 <_tzset_unlocked_r+0x388>
 800b83a:	ab0a      	add	r3, sp, #40	@ 0x28
 800b83c:	f10d 0226 	add.w	r2, sp, #38	@ 0x26
 800b840:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800b844:	aa09      	add	r2, sp, #36	@ 0x24
 800b846:	9200      	str	r2, [sp, #0]
 800b848:	4937      	ldr	r1, [pc, #220]	@ (800b928 <_tzset_unlocked_r+0x330>)
 800b84a:	9303      	str	r3, [sp, #12]
 800b84c:	f10d 0222 	add.w	r2, sp, #34	@ 0x22
 800b850:	4628      	mov	r0, r5
 800b852:	f7ff fa83 	bl	800ad5c <siscanf>
 800b856:	2803      	cmp	r0, #3
 800b858:	f47f aefc 	bne.w	800b654 <_tzset_unlocked_r+0x5c>
 800b85c:	f8bd 1022 	ldrh.w	r1, [sp, #34]	@ 0x22
 800b860:	1e4b      	subs	r3, r1, #1
 800b862:	2b0b      	cmp	r3, #11
 800b864:	f63f aef6 	bhi.w	800b654 <_tzset_unlocked_r+0x5c>
 800b868:	f8bd 2024 	ldrh.w	r2, [sp, #36]	@ 0x24
 800b86c:	1e53      	subs	r3, r2, #1
 800b86e:	2b04      	cmp	r3, #4
 800b870:	f63f aef0 	bhi.w	800b654 <_tzset_unlocked_r+0x5c>
 800b874:	f8bd 3026 	ldrh.w	r3, [sp, #38]	@ 0x26
 800b878:	2b06      	cmp	r3, #6
 800b87a:	f63f aeeb 	bhi.w	800b654 <_tzset_unlocked_r+0x5c>
 800b87e:	e9c7 1203 	strd	r1, r2, [r7, #12]
 800b882:	f887 9008 	strb.w	r9, [r7, #8]
 800b886:	617b      	str	r3, [r7, #20]
 800b888:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b88a:	eb05 0903 	add.w	r9, r5, r3
 800b88e:	2500      	movs	r5, #0
 800b890:	f04f 0302 	mov.w	r3, #2
 800b894:	f8ad 301c 	strh.w	r3, [sp, #28]
 800b898:	f8ad 501e 	strh.w	r5, [sp, #30]
 800b89c:	f8ad 5020 	strh.w	r5, [sp, #32]
 800b8a0:	950a      	str	r5, [sp, #40]	@ 0x28
 800b8a2:	f899 3000 	ldrb.w	r3, [r9]
 800b8a6:	2b2f      	cmp	r3, #47	@ 0x2f
 800b8a8:	f040 8096 	bne.w	800b9d8 <_tzset_unlocked_r+0x3e0>
 800b8ac:	ab0a      	add	r3, sp, #40	@ 0x28
 800b8ae:	aa08      	add	r2, sp, #32
 800b8b0:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800b8b4:	f10d 021e 	add.w	r2, sp, #30
 800b8b8:	9200      	str	r2, [sp, #0]
 800b8ba:	491c      	ldr	r1, [pc, #112]	@ (800b92c <_tzset_unlocked_r+0x334>)
 800b8bc:	9303      	str	r3, [sp, #12]
 800b8be:	aa07      	add	r2, sp, #28
 800b8c0:	4648      	mov	r0, r9
 800b8c2:	f7ff fa4b 	bl	800ad5c <siscanf>
 800b8c6:	42a8      	cmp	r0, r5
 800b8c8:	f300 8086 	bgt.w	800b9d8 <_tzset_unlocked_r+0x3e0>
 800b8cc:	214a      	movs	r1, #74	@ 0x4a
 800b8ce:	2200      	movs	r2, #0
 800b8d0:	2300      	movs	r3, #0
 800b8d2:	e9c4 5503 	strd	r5, r5, [r4, #12]
 800b8d6:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800b8da:	e9c4 2308 	strd	r2, r3, [r4, #32]
 800b8de:	e9c4 550d 	strd	r5, r5, [r4, #52]	@ 0x34
 800b8e2:	e9c4 550f 	strd	r5, r5, [r4, #60]	@ 0x3c
 800b8e6:	e9c4 2312 	strd	r2, r3, [r4, #72]	@ 0x48
 800b8ea:	7221      	strb	r1, [r4, #8]
 800b8ec:	62a5      	str	r5, [r4, #40]	@ 0x28
 800b8ee:	f884 1030 	strb.w	r1, [r4, #48]	@ 0x30
 800b8f2:	6525      	str	r5, [r4, #80]	@ 0x50
 800b8f4:	e6ae      	b.n	800b654 <_tzset_unlocked_r+0x5c>
 800b8f6:	bf00      	nop
 800b8f8:	08010530 	.word	0x08010530
 800b8fc:	20008d2c 	.word	0x20008d2c
 800b900:	20008d48 	.word	0x20008d48
 800b904:	08010533 	.word	0x08010533
 800b908:	20008d4c 	.word	0x20008d4c
 800b90c:	20000028 	.word	0x20000028
 800b910:	0800faed 	.word	0x0800faed
 800b914:	20008d3c 	.word	0x20008d3c
 800b918:	08010537 	.word	0x08010537
 800b91c:	0801056c 	.word	0x0801056c
 800b920:	20008d30 	.word	0x20008d30
 800b924:	0801054a 	.word	0x0801054a
 800b928:	08010558 	.word	0x08010558
 800b92c:	0801056b 	.word	0x0801056b
 800b930:	4a3e      	ldr	r2, [pc, #248]	@ (800ba2c <_tzset_unlocked_r+0x434>)
 800b932:	493f      	ldr	r1, [pc, #252]	@ (800ba30 <_tzset_unlocked_r+0x438>)
 800b934:	ab0a      	add	r3, sp, #40	@ 0x28
 800b936:	4648      	mov	r0, r9
 800b938:	f7ff fa10 	bl	800ad5c <siscanf>
 800b93c:	2800      	cmp	r0, #0
 800b93e:	f77f af17 	ble.w	800b770 <_tzset_unlocked_r+0x178>
 800b942:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b944:	3b03      	subs	r3, #3
 800b946:	2b07      	cmp	r3, #7
 800b948:	f67f af42 	bls.w	800b7d0 <_tzset_unlocked_r+0x1d8>
 800b94c:	e682      	b.n	800b654 <_tzset_unlocked_r+0x5c>
 800b94e:	2b2b      	cmp	r3, #43	@ 0x2b
 800b950:	bf08      	it	eq
 800b952:	3501      	addeq	r5, #1
 800b954:	f04f 0901 	mov.w	r9, #1
 800b958:	e745      	b.n	800b7e6 <_tzset_unlocked_r+0x1ee>
 800b95a:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 800b95e:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 800b962:	213c      	movs	r1, #60	@ 0x3c
 800b964:	fb01 3302 	mla	r3, r1, r2, r3
 800b968:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 800b96c:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 800b970:	fb01 3302 	mla	r3, r1, r2, r3
 800b974:	fb09 f303 	mul.w	r3, r9, r3
 800b978:	e74f      	b.n	800b81a <_tzset_unlocked_r+0x222>
 800b97a:	f04f 0b01 	mov.w	fp, #1
 800b97e:	e752      	b.n	800b826 <_tzset_unlocked_r+0x22e>
 800b980:	f1b9 0f4a 	cmp.w	r9, #74	@ 0x4a
 800b984:	bf06      	itte	eq
 800b986:	3501      	addeq	r5, #1
 800b988:	464b      	moveq	r3, r9
 800b98a:	2344      	movne	r3, #68	@ 0x44
 800b98c:	220a      	movs	r2, #10
 800b98e:	a90b      	add	r1, sp, #44	@ 0x2c
 800b990:	4628      	mov	r0, r5
 800b992:	9305      	str	r3, [sp, #20]
 800b994:	f002 f84c 	bl	800da30 <strtoul>
 800b998:	f8dd 902c 	ldr.w	r9, [sp, #44]	@ 0x2c
 800b99c:	9b05      	ldr	r3, [sp, #20]
 800b99e:	f8ad 0026 	strh.w	r0, [sp, #38]	@ 0x26
 800b9a2:	45a9      	cmp	r9, r5
 800b9a4:	d114      	bne.n	800b9d0 <_tzset_unlocked_r+0x3d8>
 800b9a6:	234d      	movs	r3, #77	@ 0x4d
 800b9a8:	f1bb 0f00 	cmp.w	fp, #0
 800b9ac:	d107      	bne.n	800b9be <_tzset_unlocked_r+0x3c6>
 800b9ae:	7223      	strb	r3, [r4, #8]
 800b9b0:	2103      	movs	r1, #3
 800b9b2:	2302      	movs	r3, #2
 800b9b4:	e9c4 1303 	strd	r1, r3, [r4, #12]
 800b9b8:	f8c4 b014 	str.w	fp, [r4, #20]
 800b9bc:	e767      	b.n	800b88e <_tzset_unlocked_r+0x296>
 800b9be:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
 800b9c2:	220b      	movs	r2, #11
 800b9c4:	2301      	movs	r3, #1
 800b9c6:	e9c4 230d 	strd	r2, r3, [r4, #52]	@ 0x34
 800b9ca:	2300      	movs	r3, #0
 800b9cc:	63e3      	str	r3, [r4, #60]	@ 0x3c
 800b9ce:	e75e      	b.n	800b88e <_tzset_unlocked_r+0x296>
 800b9d0:	b280      	uxth	r0, r0
 800b9d2:	723b      	strb	r3, [r7, #8]
 800b9d4:	6178      	str	r0, [r7, #20]
 800b9d6:	e75a      	b.n	800b88e <_tzset_unlocked_r+0x296>
 800b9d8:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 800b9dc:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 800b9e0:	213c      	movs	r1, #60	@ 0x3c
 800b9e2:	fb01 3302 	mla	r3, r1, r2, r3
 800b9e6:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 800b9ea:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 800b9ee:	fb01 3302 	mla	r3, r1, r2, r3
 800b9f2:	61bb      	str	r3, [r7, #24]
 800b9f4:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 800b9f6:	3728      	adds	r7, #40	@ 0x28
 800b9f8:	444d      	add	r5, r9
 800b9fa:	f1bb 0f00 	cmp.w	fp, #0
 800b9fe:	d0bc      	beq.n	800b97a <_tzset_unlocked_r+0x382>
 800ba00:	9b04      	ldr	r3, [sp, #16]
 800ba02:	6523      	str	r3, [r4, #80]	@ 0x50
 800ba04:	4b0b      	ldr	r3, [pc, #44]	@ (800ba34 <_tzset_unlocked_r+0x43c>)
 800ba06:	f8c8 3000 	str.w	r3, [r8]
 800ba0a:	6860      	ldr	r0, [r4, #4]
 800ba0c:	4b07      	ldr	r3, [pc, #28]	@ (800ba2c <_tzset_unlocked_r+0x434>)
 800ba0e:	62a6      	str	r6, [r4, #40]	@ 0x28
 800ba10:	f8c8 3004 	str.w	r3, [r8, #4]
 800ba14:	f7ff fd34 	bl	800b480 <__tzcalc_limits>
 800ba18:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800ba1a:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 800ba1c:	f8ca 2000 	str.w	r2, [sl]
 800ba20:	1a9b      	subs	r3, r3, r2
 800ba22:	4a05      	ldr	r2, [pc, #20]	@ (800ba38 <_tzset_unlocked_r+0x440>)
 800ba24:	bf18      	it	ne
 800ba26:	2301      	movne	r3, #1
 800ba28:	6013      	str	r3, [r2, #0]
 800ba2a:	e613      	b.n	800b654 <_tzset_unlocked_r+0x5c>
 800ba2c:	20008d30 	.word	0x20008d30
 800ba30:	0801054a 	.word	0x0801054a
 800ba34:	20008d3c 	.word	0x20008d3c
 800ba38:	20008d4c 	.word	0x20008d4c

0800ba3c <_localeconv_r>:
 800ba3c:	4800      	ldr	r0, [pc, #0]	@ (800ba40 <_localeconv_r+0x4>)
 800ba3e:	4770      	bx	lr
 800ba40:	20000120 	.word	0x20000120

0800ba44 <_close_r>:
 800ba44:	b538      	push	{r3, r4, r5, lr}
 800ba46:	4d06      	ldr	r5, [pc, #24]	@ (800ba60 <_close_r+0x1c>)
 800ba48:	2300      	movs	r3, #0
 800ba4a:	4604      	mov	r4, r0
 800ba4c:	4608      	mov	r0, r1
 800ba4e:	602b      	str	r3, [r5, #0]
 800ba50:	f7f8 fe0a 	bl	8004668 <_close>
 800ba54:	1c43      	adds	r3, r0, #1
 800ba56:	d102      	bne.n	800ba5e <_close_r+0x1a>
 800ba58:	682b      	ldr	r3, [r5, #0]
 800ba5a:	b103      	cbz	r3, 800ba5e <_close_r+0x1a>
 800ba5c:	6023      	str	r3, [r4, #0]
 800ba5e:	bd38      	pop	{r3, r4, r5, pc}
 800ba60:	20008d50 	.word	0x20008d50

0800ba64 <_lseek_r>:
 800ba64:	b538      	push	{r3, r4, r5, lr}
 800ba66:	4d07      	ldr	r5, [pc, #28]	@ (800ba84 <_lseek_r+0x20>)
 800ba68:	4604      	mov	r4, r0
 800ba6a:	4608      	mov	r0, r1
 800ba6c:	4611      	mov	r1, r2
 800ba6e:	2200      	movs	r2, #0
 800ba70:	602a      	str	r2, [r5, #0]
 800ba72:	461a      	mov	r2, r3
 800ba74:	f7f8 fe02 	bl	800467c <_lseek>
 800ba78:	1c43      	adds	r3, r0, #1
 800ba7a:	d102      	bne.n	800ba82 <_lseek_r+0x1e>
 800ba7c:	682b      	ldr	r3, [r5, #0]
 800ba7e:	b103      	cbz	r3, 800ba82 <_lseek_r+0x1e>
 800ba80:	6023      	str	r3, [r4, #0]
 800ba82:	bd38      	pop	{r3, r4, r5, pc}
 800ba84:	20008d50 	.word	0x20008d50

0800ba88 <_read_r>:
 800ba88:	b538      	push	{r3, r4, r5, lr}
 800ba8a:	4d07      	ldr	r5, [pc, #28]	@ (800baa8 <_read_r+0x20>)
 800ba8c:	4604      	mov	r4, r0
 800ba8e:	4608      	mov	r0, r1
 800ba90:	4611      	mov	r1, r2
 800ba92:	2200      	movs	r2, #0
 800ba94:	602a      	str	r2, [r5, #0]
 800ba96:	461a      	mov	r2, r3
 800ba98:	f7f8 fdca 	bl	8004630 <_read>
 800ba9c:	1c43      	adds	r3, r0, #1
 800ba9e:	d102      	bne.n	800baa6 <_read_r+0x1e>
 800baa0:	682b      	ldr	r3, [r5, #0]
 800baa2:	b103      	cbz	r3, 800baa6 <_read_r+0x1e>
 800baa4:	6023      	str	r3, [r4, #0]
 800baa6:	bd38      	pop	{r3, r4, r5, pc}
 800baa8:	20008d50 	.word	0x20008d50

0800baac <_sbrk_r>:
 800baac:	b538      	push	{r3, r4, r5, lr}
 800baae:	4d06      	ldr	r5, [pc, #24]	@ (800bac8 <_sbrk_r+0x1c>)
 800bab0:	2300      	movs	r3, #0
 800bab2:	4604      	mov	r4, r0
 800bab4:	4608      	mov	r0, r1
 800bab6:	602b      	str	r3, [r5, #0]
 800bab8:	f7f8 fde2 	bl	8004680 <_sbrk>
 800babc:	1c43      	adds	r3, r0, #1
 800babe:	d102      	bne.n	800bac6 <_sbrk_r+0x1a>
 800bac0:	682b      	ldr	r3, [r5, #0]
 800bac2:	b103      	cbz	r3, 800bac6 <_sbrk_r+0x1a>
 800bac4:	6023      	str	r3, [r4, #0]
 800bac6:	bd38      	pop	{r3, r4, r5, pc}
 800bac8:	20008d50 	.word	0x20008d50

0800bacc <_write_r>:
 800bacc:	b538      	push	{r3, r4, r5, lr}
 800bace:	4d07      	ldr	r5, [pc, #28]	@ (800baec <_write_r+0x20>)
 800bad0:	4604      	mov	r4, r0
 800bad2:	4608      	mov	r0, r1
 800bad4:	4611      	mov	r1, r2
 800bad6:	2200      	movs	r2, #0
 800bad8:	602a      	str	r2, [r5, #0]
 800bada:	461a      	mov	r2, r3
 800badc:	f7f8 fdb6 	bl	800464c <_write>
 800bae0:	1c43      	adds	r3, r0, #1
 800bae2:	d102      	bne.n	800baea <_write_r+0x1e>
 800bae4:	682b      	ldr	r3, [r5, #0]
 800bae6:	b103      	cbz	r3, 800baea <_write_r+0x1e>
 800bae8:	6023      	str	r3, [r4, #0]
 800baea:	bd38      	pop	{r3, r4, r5, pc}
 800baec:	20008d50 	.word	0x20008d50

0800baf0 <__errno>:
 800baf0:	4b01      	ldr	r3, [pc, #4]	@ (800baf8 <__errno+0x8>)
 800baf2:	6818      	ldr	r0, [r3, #0]
 800baf4:	4770      	bx	lr
 800baf6:	bf00      	nop
 800baf8:	2000019c 	.word	0x2000019c

0800bafc <__libc_init_array>:
 800bafc:	b570      	push	{r4, r5, r6, lr}
 800bafe:	4d0d      	ldr	r5, [pc, #52]	@ (800bb34 <__libc_init_array+0x38>)
 800bb00:	4c0d      	ldr	r4, [pc, #52]	@ (800bb38 <__libc_init_array+0x3c>)
 800bb02:	1b64      	subs	r4, r4, r5
 800bb04:	10a4      	asrs	r4, r4, #2
 800bb06:	2600      	movs	r6, #0
 800bb08:	42a6      	cmp	r6, r4
 800bb0a:	d109      	bne.n	800bb20 <__libc_init_array+0x24>
 800bb0c:	4d0b      	ldr	r5, [pc, #44]	@ (800bb3c <__libc_init_array+0x40>)
 800bb0e:	4c0c      	ldr	r4, [pc, #48]	@ (800bb40 <__libc_init_array+0x44>)
 800bb10:	f003 f8c4 	bl	800ec9c <_init>
 800bb14:	1b64      	subs	r4, r4, r5
 800bb16:	10a4      	asrs	r4, r4, #2
 800bb18:	2600      	movs	r6, #0
 800bb1a:	42a6      	cmp	r6, r4
 800bb1c:	d105      	bne.n	800bb2a <__libc_init_array+0x2e>
 800bb1e:	bd70      	pop	{r4, r5, r6, pc}
 800bb20:	f855 3b04 	ldr.w	r3, [r5], #4
 800bb24:	4798      	blx	r3
 800bb26:	3601      	adds	r6, #1
 800bb28:	e7ee      	b.n	800bb08 <__libc_init_array+0xc>
 800bb2a:	f855 3b04 	ldr.w	r3, [r5], #4
 800bb2e:	4798      	blx	r3
 800bb30:	3601      	adds	r6, #1
 800bb32:	e7f2      	b.n	800bb1a <__libc_init_array+0x1e>
 800bb34:	08010898 	.word	0x08010898
 800bb38:	08010898 	.word	0x08010898
 800bb3c:	08010898 	.word	0x08010898
 800bb40:	0801089c 	.word	0x0801089c

0800bb44 <strcpy>:
 800bb44:	4603      	mov	r3, r0
 800bb46:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bb4a:	f803 2b01 	strb.w	r2, [r3], #1
 800bb4e:	2a00      	cmp	r2, #0
 800bb50:	d1f9      	bne.n	800bb46 <strcpy+0x2>
 800bb52:	4770      	bx	lr

0800bb54 <memcpy>:
 800bb54:	440a      	add	r2, r1
 800bb56:	4291      	cmp	r1, r2
 800bb58:	f100 33ff 	add.w	r3, r0, #4294967295
 800bb5c:	d100      	bne.n	800bb60 <memcpy+0xc>
 800bb5e:	4770      	bx	lr
 800bb60:	b510      	push	{r4, lr}
 800bb62:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bb66:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bb6a:	4291      	cmp	r1, r2
 800bb6c:	d1f9      	bne.n	800bb62 <memcpy+0xe>
 800bb6e:	bd10      	pop	{r4, pc}

0800bb70 <nan>:
 800bb70:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800bb78 <nan+0x8>
 800bb74:	4770      	bx	lr
 800bb76:	bf00      	nop
 800bb78:	00000000 	.word	0x00000000
 800bb7c:	7ff80000 	.word	0x7ff80000

0800bb80 <nanf>:
 800bb80:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800bb88 <nanf+0x8>
 800bb84:	4770      	bx	lr
 800bb86:	bf00      	nop
 800bb88:	7fc00000 	.word	0x7fc00000

0800bb8c <div>:
 800bb8c:	b510      	push	{r4, lr}
 800bb8e:	fb91 f4f2 	sdiv	r4, r1, r2
 800bb92:	fb02 1114 	mls	r1, r2, r4, r1
 800bb96:	6004      	str	r4, [r0, #0]
 800bb98:	6041      	str	r1, [r0, #4]
 800bb9a:	bd10      	pop	{r4, pc}

0800bb9c <quorem>:
 800bb9c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bba0:	6903      	ldr	r3, [r0, #16]
 800bba2:	690c      	ldr	r4, [r1, #16]
 800bba4:	42a3      	cmp	r3, r4
 800bba6:	4607      	mov	r7, r0
 800bba8:	db7e      	blt.n	800bca8 <quorem+0x10c>
 800bbaa:	3c01      	subs	r4, #1
 800bbac:	f101 0814 	add.w	r8, r1, #20
 800bbb0:	00a3      	lsls	r3, r4, #2
 800bbb2:	f100 0514 	add.w	r5, r0, #20
 800bbb6:	9300      	str	r3, [sp, #0]
 800bbb8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bbbc:	9301      	str	r3, [sp, #4]
 800bbbe:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800bbc2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bbc6:	3301      	adds	r3, #1
 800bbc8:	429a      	cmp	r2, r3
 800bbca:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800bbce:	fbb2 f6f3 	udiv	r6, r2, r3
 800bbd2:	d32e      	bcc.n	800bc32 <quorem+0x96>
 800bbd4:	f04f 0a00 	mov.w	sl, #0
 800bbd8:	46c4      	mov	ip, r8
 800bbda:	46ae      	mov	lr, r5
 800bbdc:	46d3      	mov	fp, sl
 800bbde:	f85c 3b04 	ldr.w	r3, [ip], #4
 800bbe2:	b298      	uxth	r0, r3
 800bbe4:	fb06 a000 	mla	r0, r6, r0, sl
 800bbe8:	0c02      	lsrs	r2, r0, #16
 800bbea:	0c1b      	lsrs	r3, r3, #16
 800bbec:	fb06 2303 	mla	r3, r6, r3, r2
 800bbf0:	f8de 2000 	ldr.w	r2, [lr]
 800bbf4:	b280      	uxth	r0, r0
 800bbf6:	b292      	uxth	r2, r2
 800bbf8:	1a12      	subs	r2, r2, r0
 800bbfa:	445a      	add	r2, fp
 800bbfc:	f8de 0000 	ldr.w	r0, [lr]
 800bc00:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800bc04:	b29b      	uxth	r3, r3
 800bc06:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800bc0a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800bc0e:	b292      	uxth	r2, r2
 800bc10:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800bc14:	45e1      	cmp	r9, ip
 800bc16:	f84e 2b04 	str.w	r2, [lr], #4
 800bc1a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800bc1e:	d2de      	bcs.n	800bbde <quorem+0x42>
 800bc20:	9b00      	ldr	r3, [sp, #0]
 800bc22:	58eb      	ldr	r3, [r5, r3]
 800bc24:	b92b      	cbnz	r3, 800bc32 <quorem+0x96>
 800bc26:	9b01      	ldr	r3, [sp, #4]
 800bc28:	3b04      	subs	r3, #4
 800bc2a:	429d      	cmp	r5, r3
 800bc2c:	461a      	mov	r2, r3
 800bc2e:	d32f      	bcc.n	800bc90 <quorem+0xf4>
 800bc30:	613c      	str	r4, [r7, #16]
 800bc32:	4638      	mov	r0, r7
 800bc34:	f001 fc9e 	bl	800d574 <__mcmp>
 800bc38:	2800      	cmp	r0, #0
 800bc3a:	db25      	blt.n	800bc88 <quorem+0xec>
 800bc3c:	4629      	mov	r1, r5
 800bc3e:	2000      	movs	r0, #0
 800bc40:	f858 2b04 	ldr.w	r2, [r8], #4
 800bc44:	f8d1 c000 	ldr.w	ip, [r1]
 800bc48:	fa1f fe82 	uxth.w	lr, r2
 800bc4c:	fa1f f38c 	uxth.w	r3, ip
 800bc50:	eba3 030e 	sub.w	r3, r3, lr
 800bc54:	4403      	add	r3, r0
 800bc56:	0c12      	lsrs	r2, r2, #16
 800bc58:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800bc5c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800bc60:	b29b      	uxth	r3, r3
 800bc62:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bc66:	45c1      	cmp	r9, r8
 800bc68:	f841 3b04 	str.w	r3, [r1], #4
 800bc6c:	ea4f 4022 	mov.w	r0, r2, asr #16
 800bc70:	d2e6      	bcs.n	800bc40 <quorem+0xa4>
 800bc72:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bc76:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bc7a:	b922      	cbnz	r2, 800bc86 <quorem+0xea>
 800bc7c:	3b04      	subs	r3, #4
 800bc7e:	429d      	cmp	r5, r3
 800bc80:	461a      	mov	r2, r3
 800bc82:	d30b      	bcc.n	800bc9c <quorem+0x100>
 800bc84:	613c      	str	r4, [r7, #16]
 800bc86:	3601      	adds	r6, #1
 800bc88:	4630      	mov	r0, r6
 800bc8a:	b003      	add	sp, #12
 800bc8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc90:	6812      	ldr	r2, [r2, #0]
 800bc92:	3b04      	subs	r3, #4
 800bc94:	2a00      	cmp	r2, #0
 800bc96:	d1cb      	bne.n	800bc30 <quorem+0x94>
 800bc98:	3c01      	subs	r4, #1
 800bc9a:	e7c6      	b.n	800bc2a <quorem+0x8e>
 800bc9c:	6812      	ldr	r2, [r2, #0]
 800bc9e:	3b04      	subs	r3, #4
 800bca0:	2a00      	cmp	r2, #0
 800bca2:	d1ef      	bne.n	800bc84 <quorem+0xe8>
 800bca4:	3c01      	subs	r4, #1
 800bca6:	e7ea      	b.n	800bc7e <quorem+0xe2>
 800bca8:	2000      	movs	r0, #0
 800bcaa:	e7ee      	b.n	800bc8a <quorem+0xee>
 800bcac:	0000      	movs	r0, r0
	...

0800bcb0 <_dtoa_r>:
 800bcb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bcb4:	69c7      	ldr	r7, [r0, #28]
 800bcb6:	b099      	sub	sp, #100	@ 0x64
 800bcb8:	ed8d 0b02 	vstr	d0, [sp, #8]
 800bcbc:	ec55 4b10 	vmov	r4, r5, d0
 800bcc0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800bcc2:	9109      	str	r1, [sp, #36]	@ 0x24
 800bcc4:	4683      	mov	fp, r0
 800bcc6:	920e      	str	r2, [sp, #56]	@ 0x38
 800bcc8:	9313      	str	r3, [sp, #76]	@ 0x4c
 800bcca:	b97f      	cbnz	r7, 800bcec <_dtoa_r+0x3c>
 800bccc:	2010      	movs	r0, #16
 800bcce:	f7fd f975 	bl	8008fbc <malloc>
 800bcd2:	4602      	mov	r2, r0
 800bcd4:	f8cb 001c 	str.w	r0, [fp, #28]
 800bcd8:	b920      	cbnz	r0, 800bce4 <_dtoa_r+0x34>
 800bcda:	4ba7      	ldr	r3, [pc, #668]	@ (800bf78 <_dtoa_r+0x2c8>)
 800bcdc:	21ef      	movs	r1, #239	@ 0xef
 800bcde:	48a7      	ldr	r0, [pc, #668]	@ (800bf7c <_dtoa_r+0x2cc>)
 800bce0:	f002 fc6c 	bl	800e5bc <__assert_func>
 800bce4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800bce8:	6007      	str	r7, [r0, #0]
 800bcea:	60c7      	str	r7, [r0, #12]
 800bcec:	f8db 301c 	ldr.w	r3, [fp, #28]
 800bcf0:	6819      	ldr	r1, [r3, #0]
 800bcf2:	b159      	cbz	r1, 800bd0c <_dtoa_r+0x5c>
 800bcf4:	685a      	ldr	r2, [r3, #4]
 800bcf6:	604a      	str	r2, [r1, #4]
 800bcf8:	2301      	movs	r3, #1
 800bcfa:	4093      	lsls	r3, r2
 800bcfc:	608b      	str	r3, [r1, #8]
 800bcfe:	4658      	mov	r0, fp
 800bd00:	f001 f9b4 	bl	800d06c <_Bfree>
 800bd04:	f8db 301c 	ldr.w	r3, [fp, #28]
 800bd08:	2200      	movs	r2, #0
 800bd0a:	601a      	str	r2, [r3, #0]
 800bd0c:	1e2b      	subs	r3, r5, #0
 800bd0e:	bfb9      	ittee	lt
 800bd10:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800bd14:	9303      	strlt	r3, [sp, #12]
 800bd16:	2300      	movge	r3, #0
 800bd18:	6033      	strge	r3, [r6, #0]
 800bd1a:	9f03      	ldr	r7, [sp, #12]
 800bd1c:	4b98      	ldr	r3, [pc, #608]	@ (800bf80 <_dtoa_r+0x2d0>)
 800bd1e:	bfbc      	itt	lt
 800bd20:	2201      	movlt	r2, #1
 800bd22:	6032      	strlt	r2, [r6, #0]
 800bd24:	43bb      	bics	r3, r7
 800bd26:	d112      	bne.n	800bd4e <_dtoa_r+0x9e>
 800bd28:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800bd2a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800bd2e:	6013      	str	r3, [r2, #0]
 800bd30:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800bd34:	4323      	orrs	r3, r4
 800bd36:	f000 854d 	beq.w	800c7d4 <_dtoa_r+0xb24>
 800bd3a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800bd3c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800bf94 <_dtoa_r+0x2e4>
 800bd40:	2b00      	cmp	r3, #0
 800bd42:	f000 854f 	beq.w	800c7e4 <_dtoa_r+0xb34>
 800bd46:	f10a 0303 	add.w	r3, sl, #3
 800bd4a:	f000 bd49 	b.w	800c7e0 <_dtoa_r+0xb30>
 800bd4e:	ed9d 7b02 	vldr	d7, [sp, #8]
 800bd52:	2200      	movs	r2, #0
 800bd54:	ec51 0b17 	vmov	r0, r1, d7
 800bd58:	2300      	movs	r3, #0
 800bd5a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800bd5e:	f7f4 fec3 	bl	8000ae8 <__aeabi_dcmpeq>
 800bd62:	4680      	mov	r8, r0
 800bd64:	b158      	cbz	r0, 800bd7e <_dtoa_r+0xce>
 800bd66:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800bd68:	2301      	movs	r3, #1
 800bd6a:	6013      	str	r3, [r2, #0]
 800bd6c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800bd6e:	b113      	cbz	r3, 800bd76 <_dtoa_r+0xc6>
 800bd70:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800bd72:	4b84      	ldr	r3, [pc, #528]	@ (800bf84 <_dtoa_r+0x2d4>)
 800bd74:	6013      	str	r3, [r2, #0]
 800bd76:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800bf98 <_dtoa_r+0x2e8>
 800bd7a:	f000 bd33 	b.w	800c7e4 <_dtoa_r+0xb34>
 800bd7e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800bd82:	aa16      	add	r2, sp, #88	@ 0x58
 800bd84:	a917      	add	r1, sp, #92	@ 0x5c
 800bd86:	4658      	mov	r0, fp
 800bd88:	f001 fd14 	bl	800d7b4 <__d2b>
 800bd8c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800bd90:	4681      	mov	r9, r0
 800bd92:	2e00      	cmp	r6, #0
 800bd94:	d077      	beq.n	800be86 <_dtoa_r+0x1d6>
 800bd96:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800bd98:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800bd9c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bda0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bda4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800bda8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800bdac:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800bdb0:	4619      	mov	r1, r3
 800bdb2:	2200      	movs	r2, #0
 800bdb4:	4b74      	ldr	r3, [pc, #464]	@ (800bf88 <_dtoa_r+0x2d8>)
 800bdb6:	f7f4 fa77 	bl	80002a8 <__aeabi_dsub>
 800bdba:	a369      	add	r3, pc, #420	@ (adr r3, 800bf60 <_dtoa_r+0x2b0>)
 800bdbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdc0:	f7f4 fc2a 	bl	8000618 <__aeabi_dmul>
 800bdc4:	a368      	add	r3, pc, #416	@ (adr r3, 800bf68 <_dtoa_r+0x2b8>)
 800bdc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdca:	f7f4 fa6f 	bl	80002ac <__adddf3>
 800bdce:	4604      	mov	r4, r0
 800bdd0:	4630      	mov	r0, r6
 800bdd2:	460d      	mov	r5, r1
 800bdd4:	f7f4 fbb6 	bl	8000544 <__aeabi_i2d>
 800bdd8:	a365      	add	r3, pc, #404	@ (adr r3, 800bf70 <_dtoa_r+0x2c0>)
 800bdda:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdde:	f7f4 fc1b 	bl	8000618 <__aeabi_dmul>
 800bde2:	4602      	mov	r2, r0
 800bde4:	460b      	mov	r3, r1
 800bde6:	4620      	mov	r0, r4
 800bde8:	4629      	mov	r1, r5
 800bdea:	f7f4 fa5f 	bl	80002ac <__adddf3>
 800bdee:	4604      	mov	r4, r0
 800bdf0:	460d      	mov	r5, r1
 800bdf2:	f7f4 fec1 	bl	8000b78 <__aeabi_d2iz>
 800bdf6:	2200      	movs	r2, #0
 800bdf8:	4607      	mov	r7, r0
 800bdfa:	2300      	movs	r3, #0
 800bdfc:	4620      	mov	r0, r4
 800bdfe:	4629      	mov	r1, r5
 800be00:	f7f4 fe7c 	bl	8000afc <__aeabi_dcmplt>
 800be04:	b140      	cbz	r0, 800be18 <_dtoa_r+0x168>
 800be06:	4638      	mov	r0, r7
 800be08:	f7f4 fb9c 	bl	8000544 <__aeabi_i2d>
 800be0c:	4622      	mov	r2, r4
 800be0e:	462b      	mov	r3, r5
 800be10:	f7f4 fe6a 	bl	8000ae8 <__aeabi_dcmpeq>
 800be14:	b900      	cbnz	r0, 800be18 <_dtoa_r+0x168>
 800be16:	3f01      	subs	r7, #1
 800be18:	2f16      	cmp	r7, #22
 800be1a:	d851      	bhi.n	800bec0 <_dtoa_r+0x210>
 800be1c:	4b5b      	ldr	r3, [pc, #364]	@ (800bf8c <_dtoa_r+0x2dc>)
 800be1e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800be22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be26:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800be2a:	f7f4 fe67 	bl	8000afc <__aeabi_dcmplt>
 800be2e:	2800      	cmp	r0, #0
 800be30:	d048      	beq.n	800bec4 <_dtoa_r+0x214>
 800be32:	3f01      	subs	r7, #1
 800be34:	2300      	movs	r3, #0
 800be36:	9312      	str	r3, [sp, #72]	@ 0x48
 800be38:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800be3a:	1b9b      	subs	r3, r3, r6
 800be3c:	1e5a      	subs	r2, r3, #1
 800be3e:	bf44      	itt	mi
 800be40:	f1c3 0801 	rsbmi	r8, r3, #1
 800be44:	2300      	movmi	r3, #0
 800be46:	9208      	str	r2, [sp, #32]
 800be48:	bf54      	ite	pl
 800be4a:	f04f 0800 	movpl.w	r8, #0
 800be4e:	9308      	strmi	r3, [sp, #32]
 800be50:	2f00      	cmp	r7, #0
 800be52:	db39      	blt.n	800bec8 <_dtoa_r+0x218>
 800be54:	9b08      	ldr	r3, [sp, #32]
 800be56:	970f      	str	r7, [sp, #60]	@ 0x3c
 800be58:	443b      	add	r3, r7
 800be5a:	9308      	str	r3, [sp, #32]
 800be5c:	2300      	movs	r3, #0
 800be5e:	930a      	str	r3, [sp, #40]	@ 0x28
 800be60:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800be62:	2b09      	cmp	r3, #9
 800be64:	d864      	bhi.n	800bf30 <_dtoa_r+0x280>
 800be66:	2b05      	cmp	r3, #5
 800be68:	bfc4      	itt	gt
 800be6a:	3b04      	subgt	r3, #4
 800be6c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800be6e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800be70:	f1a3 0302 	sub.w	r3, r3, #2
 800be74:	bfcc      	ite	gt
 800be76:	2400      	movgt	r4, #0
 800be78:	2401      	movle	r4, #1
 800be7a:	2b03      	cmp	r3, #3
 800be7c:	d863      	bhi.n	800bf46 <_dtoa_r+0x296>
 800be7e:	e8df f003 	tbb	[pc, r3]
 800be82:	372a      	.short	0x372a
 800be84:	5535      	.short	0x5535
 800be86:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800be8a:	441e      	add	r6, r3
 800be8c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800be90:	2b20      	cmp	r3, #32
 800be92:	bfc1      	itttt	gt
 800be94:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800be98:	409f      	lslgt	r7, r3
 800be9a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800be9e:	fa24 f303 	lsrgt.w	r3, r4, r3
 800bea2:	bfd6      	itet	le
 800bea4:	f1c3 0320 	rsble	r3, r3, #32
 800bea8:	ea47 0003 	orrgt.w	r0, r7, r3
 800beac:	fa04 f003 	lslle.w	r0, r4, r3
 800beb0:	f7f4 fb38 	bl	8000524 <__aeabi_ui2d>
 800beb4:	2201      	movs	r2, #1
 800beb6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800beba:	3e01      	subs	r6, #1
 800bebc:	9214      	str	r2, [sp, #80]	@ 0x50
 800bebe:	e777      	b.n	800bdb0 <_dtoa_r+0x100>
 800bec0:	2301      	movs	r3, #1
 800bec2:	e7b8      	b.n	800be36 <_dtoa_r+0x186>
 800bec4:	9012      	str	r0, [sp, #72]	@ 0x48
 800bec6:	e7b7      	b.n	800be38 <_dtoa_r+0x188>
 800bec8:	427b      	negs	r3, r7
 800beca:	930a      	str	r3, [sp, #40]	@ 0x28
 800becc:	2300      	movs	r3, #0
 800bece:	eba8 0807 	sub.w	r8, r8, r7
 800bed2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800bed4:	e7c4      	b.n	800be60 <_dtoa_r+0x1b0>
 800bed6:	2300      	movs	r3, #0
 800bed8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800beda:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bedc:	2b00      	cmp	r3, #0
 800bede:	dc35      	bgt.n	800bf4c <_dtoa_r+0x29c>
 800bee0:	2301      	movs	r3, #1
 800bee2:	9300      	str	r3, [sp, #0]
 800bee4:	9307      	str	r3, [sp, #28]
 800bee6:	461a      	mov	r2, r3
 800bee8:	920e      	str	r2, [sp, #56]	@ 0x38
 800beea:	e00b      	b.n	800bf04 <_dtoa_r+0x254>
 800beec:	2301      	movs	r3, #1
 800beee:	e7f3      	b.n	800bed8 <_dtoa_r+0x228>
 800bef0:	2300      	movs	r3, #0
 800bef2:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bef4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bef6:	18fb      	adds	r3, r7, r3
 800bef8:	9300      	str	r3, [sp, #0]
 800befa:	3301      	adds	r3, #1
 800befc:	2b01      	cmp	r3, #1
 800befe:	9307      	str	r3, [sp, #28]
 800bf00:	bfb8      	it	lt
 800bf02:	2301      	movlt	r3, #1
 800bf04:	f8db 001c 	ldr.w	r0, [fp, #28]
 800bf08:	2100      	movs	r1, #0
 800bf0a:	2204      	movs	r2, #4
 800bf0c:	f102 0514 	add.w	r5, r2, #20
 800bf10:	429d      	cmp	r5, r3
 800bf12:	d91f      	bls.n	800bf54 <_dtoa_r+0x2a4>
 800bf14:	6041      	str	r1, [r0, #4]
 800bf16:	4658      	mov	r0, fp
 800bf18:	f001 f868 	bl	800cfec <_Balloc>
 800bf1c:	4682      	mov	sl, r0
 800bf1e:	2800      	cmp	r0, #0
 800bf20:	d13c      	bne.n	800bf9c <_dtoa_r+0x2ec>
 800bf22:	4b1b      	ldr	r3, [pc, #108]	@ (800bf90 <_dtoa_r+0x2e0>)
 800bf24:	4602      	mov	r2, r0
 800bf26:	f240 11af 	movw	r1, #431	@ 0x1af
 800bf2a:	e6d8      	b.n	800bcde <_dtoa_r+0x2e>
 800bf2c:	2301      	movs	r3, #1
 800bf2e:	e7e0      	b.n	800bef2 <_dtoa_r+0x242>
 800bf30:	2401      	movs	r4, #1
 800bf32:	2300      	movs	r3, #0
 800bf34:	9309      	str	r3, [sp, #36]	@ 0x24
 800bf36:	940b      	str	r4, [sp, #44]	@ 0x2c
 800bf38:	f04f 33ff 	mov.w	r3, #4294967295
 800bf3c:	9300      	str	r3, [sp, #0]
 800bf3e:	9307      	str	r3, [sp, #28]
 800bf40:	2200      	movs	r2, #0
 800bf42:	2312      	movs	r3, #18
 800bf44:	e7d0      	b.n	800bee8 <_dtoa_r+0x238>
 800bf46:	2301      	movs	r3, #1
 800bf48:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bf4a:	e7f5      	b.n	800bf38 <_dtoa_r+0x288>
 800bf4c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bf4e:	9300      	str	r3, [sp, #0]
 800bf50:	9307      	str	r3, [sp, #28]
 800bf52:	e7d7      	b.n	800bf04 <_dtoa_r+0x254>
 800bf54:	3101      	adds	r1, #1
 800bf56:	0052      	lsls	r2, r2, #1
 800bf58:	e7d8      	b.n	800bf0c <_dtoa_r+0x25c>
 800bf5a:	bf00      	nop
 800bf5c:	f3af 8000 	nop.w
 800bf60:	636f4361 	.word	0x636f4361
 800bf64:	3fd287a7 	.word	0x3fd287a7
 800bf68:	8b60c8b3 	.word	0x8b60c8b3
 800bf6c:	3fc68a28 	.word	0x3fc68a28
 800bf70:	509f79fb 	.word	0x509f79fb
 800bf74:	3fd34413 	.word	0x3fd34413
 800bf78:	08010591 	.word	0x08010591
 800bf7c:	080105a8 	.word	0x080105a8
 800bf80:	7ff00000 	.word	0x7ff00000
 800bf84:	080107f0 	.word	0x080107f0
 800bf88:	3ff80000 	.word	0x3ff80000
 800bf8c:	08010700 	.word	0x08010700
 800bf90:	08010600 	.word	0x08010600
 800bf94:	0801058d 	.word	0x0801058d
 800bf98:	080107ef 	.word	0x080107ef
 800bf9c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800bfa0:	6018      	str	r0, [r3, #0]
 800bfa2:	9b07      	ldr	r3, [sp, #28]
 800bfa4:	2b0e      	cmp	r3, #14
 800bfa6:	f200 80a4 	bhi.w	800c0f2 <_dtoa_r+0x442>
 800bfaa:	2c00      	cmp	r4, #0
 800bfac:	f000 80a1 	beq.w	800c0f2 <_dtoa_r+0x442>
 800bfb0:	2f00      	cmp	r7, #0
 800bfb2:	dd33      	ble.n	800c01c <_dtoa_r+0x36c>
 800bfb4:	4bad      	ldr	r3, [pc, #692]	@ (800c26c <_dtoa_r+0x5bc>)
 800bfb6:	f007 020f 	and.w	r2, r7, #15
 800bfba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bfbe:	ed93 7b00 	vldr	d7, [r3]
 800bfc2:	05f8      	lsls	r0, r7, #23
 800bfc4:	ed8d 7b04 	vstr	d7, [sp, #16]
 800bfc8:	ea4f 1427 	mov.w	r4, r7, asr #4
 800bfcc:	d516      	bpl.n	800bffc <_dtoa_r+0x34c>
 800bfce:	4ba8      	ldr	r3, [pc, #672]	@ (800c270 <_dtoa_r+0x5c0>)
 800bfd0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bfd4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800bfd8:	f7f4 fc48 	bl	800086c <__aeabi_ddiv>
 800bfdc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bfe0:	f004 040f 	and.w	r4, r4, #15
 800bfe4:	2603      	movs	r6, #3
 800bfe6:	4da2      	ldr	r5, [pc, #648]	@ (800c270 <_dtoa_r+0x5c0>)
 800bfe8:	b954      	cbnz	r4, 800c000 <_dtoa_r+0x350>
 800bfea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bfee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bff2:	f7f4 fc3b 	bl	800086c <__aeabi_ddiv>
 800bff6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bffa:	e028      	b.n	800c04e <_dtoa_r+0x39e>
 800bffc:	2602      	movs	r6, #2
 800bffe:	e7f2      	b.n	800bfe6 <_dtoa_r+0x336>
 800c000:	07e1      	lsls	r1, r4, #31
 800c002:	d508      	bpl.n	800c016 <_dtoa_r+0x366>
 800c004:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c008:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c00c:	f7f4 fb04 	bl	8000618 <__aeabi_dmul>
 800c010:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c014:	3601      	adds	r6, #1
 800c016:	1064      	asrs	r4, r4, #1
 800c018:	3508      	adds	r5, #8
 800c01a:	e7e5      	b.n	800bfe8 <_dtoa_r+0x338>
 800c01c:	f000 80d2 	beq.w	800c1c4 <_dtoa_r+0x514>
 800c020:	427c      	negs	r4, r7
 800c022:	4b92      	ldr	r3, [pc, #584]	@ (800c26c <_dtoa_r+0x5bc>)
 800c024:	4d92      	ldr	r5, [pc, #584]	@ (800c270 <_dtoa_r+0x5c0>)
 800c026:	f004 020f 	and.w	r2, r4, #15
 800c02a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c02e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c032:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c036:	f7f4 faef 	bl	8000618 <__aeabi_dmul>
 800c03a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c03e:	1124      	asrs	r4, r4, #4
 800c040:	2300      	movs	r3, #0
 800c042:	2602      	movs	r6, #2
 800c044:	2c00      	cmp	r4, #0
 800c046:	f040 80b2 	bne.w	800c1ae <_dtoa_r+0x4fe>
 800c04a:	2b00      	cmp	r3, #0
 800c04c:	d1d3      	bne.n	800bff6 <_dtoa_r+0x346>
 800c04e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800c050:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800c054:	2b00      	cmp	r3, #0
 800c056:	f000 80b7 	beq.w	800c1c8 <_dtoa_r+0x518>
 800c05a:	4b86      	ldr	r3, [pc, #536]	@ (800c274 <_dtoa_r+0x5c4>)
 800c05c:	2200      	movs	r2, #0
 800c05e:	4620      	mov	r0, r4
 800c060:	4629      	mov	r1, r5
 800c062:	f7f4 fd4b 	bl	8000afc <__aeabi_dcmplt>
 800c066:	2800      	cmp	r0, #0
 800c068:	f000 80ae 	beq.w	800c1c8 <_dtoa_r+0x518>
 800c06c:	9b07      	ldr	r3, [sp, #28]
 800c06e:	2b00      	cmp	r3, #0
 800c070:	f000 80aa 	beq.w	800c1c8 <_dtoa_r+0x518>
 800c074:	9b00      	ldr	r3, [sp, #0]
 800c076:	2b00      	cmp	r3, #0
 800c078:	dd37      	ble.n	800c0ea <_dtoa_r+0x43a>
 800c07a:	1e7b      	subs	r3, r7, #1
 800c07c:	9304      	str	r3, [sp, #16]
 800c07e:	4620      	mov	r0, r4
 800c080:	4b7d      	ldr	r3, [pc, #500]	@ (800c278 <_dtoa_r+0x5c8>)
 800c082:	2200      	movs	r2, #0
 800c084:	4629      	mov	r1, r5
 800c086:	f7f4 fac7 	bl	8000618 <__aeabi_dmul>
 800c08a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c08e:	9c00      	ldr	r4, [sp, #0]
 800c090:	3601      	adds	r6, #1
 800c092:	4630      	mov	r0, r6
 800c094:	f7f4 fa56 	bl	8000544 <__aeabi_i2d>
 800c098:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c09c:	f7f4 fabc 	bl	8000618 <__aeabi_dmul>
 800c0a0:	4b76      	ldr	r3, [pc, #472]	@ (800c27c <_dtoa_r+0x5cc>)
 800c0a2:	2200      	movs	r2, #0
 800c0a4:	f7f4 f902 	bl	80002ac <__adddf3>
 800c0a8:	4605      	mov	r5, r0
 800c0aa:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800c0ae:	2c00      	cmp	r4, #0
 800c0b0:	f040 808d 	bne.w	800c1ce <_dtoa_r+0x51e>
 800c0b4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c0b8:	4b71      	ldr	r3, [pc, #452]	@ (800c280 <_dtoa_r+0x5d0>)
 800c0ba:	2200      	movs	r2, #0
 800c0bc:	f7f4 f8f4 	bl	80002a8 <__aeabi_dsub>
 800c0c0:	4602      	mov	r2, r0
 800c0c2:	460b      	mov	r3, r1
 800c0c4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c0c8:	462a      	mov	r2, r5
 800c0ca:	4633      	mov	r3, r6
 800c0cc:	f7f4 fd34 	bl	8000b38 <__aeabi_dcmpgt>
 800c0d0:	2800      	cmp	r0, #0
 800c0d2:	f040 828b 	bne.w	800c5ec <_dtoa_r+0x93c>
 800c0d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c0da:	462a      	mov	r2, r5
 800c0dc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800c0e0:	f7f4 fd0c 	bl	8000afc <__aeabi_dcmplt>
 800c0e4:	2800      	cmp	r0, #0
 800c0e6:	f040 8128 	bne.w	800c33a <_dtoa_r+0x68a>
 800c0ea:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800c0ee:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800c0f2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800c0f4:	2b00      	cmp	r3, #0
 800c0f6:	f2c0 815a 	blt.w	800c3ae <_dtoa_r+0x6fe>
 800c0fa:	2f0e      	cmp	r7, #14
 800c0fc:	f300 8157 	bgt.w	800c3ae <_dtoa_r+0x6fe>
 800c100:	4b5a      	ldr	r3, [pc, #360]	@ (800c26c <_dtoa_r+0x5bc>)
 800c102:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800c106:	ed93 7b00 	vldr	d7, [r3]
 800c10a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c10c:	2b00      	cmp	r3, #0
 800c10e:	ed8d 7b00 	vstr	d7, [sp]
 800c112:	da03      	bge.n	800c11c <_dtoa_r+0x46c>
 800c114:	9b07      	ldr	r3, [sp, #28]
 800c116:	2b00      	cmp	r3, #0
 800c118:	f340 8101 	ble.w	800c31e <_dtoa_r+0x66e>
 800c11c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800c120:	4656      	mov	r6, sl
 800c122:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c126:	4620      	mov	r0, r4
 800c128:	4629      	mov	r1, r5
 800c12a:	f7f4 fb9f 	bl	800086c <__aeabi_ddiv>
 800c12e:	f7f4 fd23 	bl	8000b78 <__aeabi_d2iz>
 800c132:	4680      	mov	r8, r0
 800c134:	f7f4 fa06 	bl	8000544 <__aeabi_i2d>
 800c138:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c13c:	f7f4 fa6c 	bl	8000618 <__aeabi_dmul>
 800c140:	4602      	mov	r2, r0
 800c142:	460b      	mov	r3, r1
 800c144:	4620      	mov	r0, r4
 800c146:	4629      	mov	r1, r5
 800c148:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800c14c:	f7f4 f8ac 	bl	80002a8 <__aeabi_dsub>
 800c150:	f806 4b01 	strb.w	r4, [r6], #1
 800c154:	9d07      	ldr	r5, [sp, #28]
 800c156:	eba6 040a 	sub.w	r4, r6, sl
 800c15a:	42a5      	cmp	r5, r4
 800c15c:	4602      	mov	r2, r0
 800c15e:	460b      	mov	r3, r1
 800c160:	f040 8117 	bne.w	800c392 <_dtoa_r+0x6e2>
 800c164:	f7f4 f8a2 	bl	80002ac <__adddf3>
 800c168:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c16c:	4604      	mov	r4, r0
 800c16e:	460d      	mov	r5, r1
 800c170:	f7f4 fce2 	bl	8000b38 <__aeabi_dcmpgt>
 800c174:	2800      	cmp	r0, #0
 800c176:	f040 80f9 	bne.w	800c36c <_dtoa_r+0x6bc>
 800c17a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c17e:	4620      	mov	r0, r4
 800c180:	4629      	mov	r1, r5
 800c182:	f7f4 fcb1 	bl	8000ae8 <__aeabi_dcmpeq>
 800c186:	b118      	cbz	r0, 800c190 <_dtoa_r+0x4e0>
 800c188:	f018 0f01 	tst.w	r8, #1
 800c18c:	f040 80ee 	bne.w	800c36c <_dtoa_r+0x6bc>
 800c190:	4649      	mov	r1, r9
 800c192:	4658      	mov	r0, fp
 800c194:	f000 ff6a 	bl	800d06c <_Bfree>
 800c198:	2300      	movs	r3, #0
 800c19a:	7033      	strb	r3, [r6, #0]
 800c19c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800c19e:	3701      	adds	r7, #1
 800c1a0:	601f      	str	r7, [r3, #0]
 800c1a2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c1a4:	2b00      	cmp	r3, #0
 800c1a6:	f000 831d 	beq.w	800c7e4 <_dtoa_r+0xb34>
 800c1aa:	601e      	str	r6, [r3, #0]
 800c1ac:	e31a      	b.n	800c7e4 <_dtoa_r+0xb34>
 800c1ae:	07e2      	lsls	r2, r4, #31
 800c1b0:	d505      	bpl.n	800c1be <_dtoa_r+0x50e>
 800c1b2:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c1b6:	f7f4 fa2f 	bl	8000618 <__aeabi_dmul>
 800c1ba:	3601      	adds	r6, #1
 800c1bc:	2301      	movs	r3, #1
 800c1be:	1064      	asrs	r4, r4, #1
 800c1c0:	3508      	adds	r5, #8
 800c1c2:	e73f      	b.n	800c044 <_dtoa_r+0x394>
 800c1c4:	2602      	movs	r6, #2
 800c1c6:	e742      	b.n	800c04e <_dtoa_r+0x39e>
 800c1c8:	9c07      	ldr	r4, [sp, #28]
 800c1ca:	9704      	str	r7, [sp, #16]
 800c1cc:	e761      	b.n	800c092 <_dtoa_r+0x3e2>
 800c1ce:	4b27      	ldr	r3, [pc, #156]	@ (800c26c <_dtoa_r+0x5bc>)
 800c1d0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c1d2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c1d6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c1da:	4454      	add	r4, sl
 800c1dc:	2900      	cmp	r1, #0
 800c1de:	d053      	beq.n	800c288 <_dtoa_r+0x5d8>
 800c1e0:	4928      	ldr	r1, [pc, #160]	@ (800c284 <_dtoa_r+0x5d4>)
 800c1e2:	2000      	movs	r0, #0
 800c1e4:	f7f4 fb42 	bl	800086c <__aeabi_ddiv>
 800c1e8:	4633      	mov	r3, r6
 800c1ea:	462a      	mov	r2, r5
 800c1ec:	f7f4 f85c 	bl	80002a8 <__aeabi_dsub>
 800c1f0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800c1f4:	4656      	mov	r6, sl
 800c1f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c1fa:	f7f4 fcbd 	bl	8000b78 <__aeabi_d2iz>
 800c1fe:	4605      	mov	r5, r0
 800c200:	f7f4 f9a0 	bl	8000544 <__aeabi_i2d>
 800c204:	4602      	mov	r2, r0
 800c206:	460b      	mov	r3, r1
 800c208:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c20c:	f7f4 f84c 	bl	80002a8 <__aeabi_dsub>
 800c210:	3530      	adds	r5, #48	@ 0x30
 800c212:	4602      	mov	r2, r0
 800c214:	460b      	mov	r3, r1
 800c216:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c21a:	f806 5b01 	strb.w	r5, [r6], #1
 800c21e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c222:	f7f4 fc6b 	bl	8000afc <__aeabi_dcmplt>
 800c226:	2800      	cmp	r0, #0
 800c228:	d171      	bne.n	800c30e <_dtoa_r+0x65e>
 800c22a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c22e:	4911      	ldr	r1, [pc, #68]	@ (800c274 <_dtoa_r+0x5c4>)
 800c230:	2000      	movs	r0, #0
 800c232:	f7f4 f839 	bl	80002a8 <__aeabi_dsub>
 800c236:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c23a:	f7f4 fc5f 	bl	8000afc <__aeabi_dcmplt>
 800c23e:	2800      	cmp	r0, #0
 800c240:	f040 8095 	bne.w	800c36e <_dtoa_r+0x6be>
 800c244:	42a6      	cmp	r6, r4
 800c246:	f43f af50 	beq.w	800c0ea <_dtoa_r+0x43a>
 800c24a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800c24e:	4b0a      	ldr	r3, [pc, #40]	@ (800c278 <_dtoa_r+0x5c8>)
 800c250:	2200      	movs	r2, #0
 800c252:	f7f4 f9e1 	bl	8000618 <__aeabi_dmul>
 800c256:	4b08      	ldr	r3, [pc, #32]	@ (800c278 <_dtoa_r+0x5c8>)
 800c258:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800c25c:	2200      	movs	r2, #0
 800c25e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c262:	f7f4 f9d9 	bl	8000618 <__aeabi_dmul>
 800c266:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c26a:	e7c4      	b.n	800c1f6 <_dtoa_r+0x546>
 800c26c:	08010700 	.word	0x08010700
 800c270:	080106d8 	.word	0x080106d8
 800c274:	3ff00000 	.word	0x3ff00000
 800c278:	40240000 	.word	0x40240000
 800c27c:	401c0000 	.word	0x401c0000
 800c280:	40140000 	.word	0x40140000
 800c284:	3fe00000 	.word	0x3fe00000
 800c288:	4631      	mov	r1, r6
 800c28a:	4628      	mov	r0, r5
 800c28c:	f7f4 f9c4 	bl	8000618 <__aeabi_dmul>
 800c290:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800c294:	9415      	str	r4, [sp, #84]	@ 0x54
 800c296:	4656      	mov	r6, sl
 800c298:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c29c:	f7f4 fc6c 	bl	8000b78 <__aeabi_d2iz>
 800c2a0:	4605      	mov	r5, r0
 800c2a2:	f7f4 f94f 	bl	8000544 <__aeabi_i2d>
 800c2a6:	4602      	mov	r2, r0
 800c2a8:	460b      	mov	r3, r1
 800c2aa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c2ae:	f7f3 fffb 	bl	80002a8 <__aeabi_dsub>
 800c2b2:	3530      	adds	r5, #48	@ 0x30
 800c2b4:	f806 5b01 	strb.w	r5, [r6], #1
 800c2b8:	4602      	mov	r2, r0
 800c2ba:	460b      	mov	r3, r1
 800c2bc:	42a6      	cmp	r6, r4
 800c2be:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c2c2:	f04f 0200 	mov.w	r2, #0
 800c2c6:	d124      	bne.n	800c312 <_dtoa_r+0x662>
 800c2c8:	4bac      	ldr	r3, [pc, #688]	@ (800c57c <_dtoa_r+0x8cc>)
 800c2ca:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800c2ce:	f7f3 ffed 	bl	80002ac <__adddf3>
 800c2d2:	4602      	mov	r2, r0
 800c2d4:	460b      	mov	r3, r1
 800c2d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c2da:	f7f4 fc2d 	bl	8000b38 <__aeabi_dcmpgt>
 800c2de:	2800      	cmp	r0, #0
 800c2e0:	d145      	bne.n	800c36e <_dtoa_r+0x6be>
 800c2e2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c2e6:	49a5      	ldr	r1, [pc, #660]	@ (800c57c <_dtoa_r+0x8cc>)
 800c2e8:	2000      	movs	r0, #0
 800c2ea:	f7f3 ffdd 	bl	80002a8 <__aeabi_dsub>
 800c2ee:	4602      	mov	r2, r0
 800c2f0:	460b      	mov	r3, r1
 800c2f2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c2f6:	f7f4 fc01 	bl	8000afc <__aeabi_dcmplt>
 800c2fa:	2800      	cmp	r0, #0
 800c2fc:	f43f aef5 	beq.w	800c0ea <_dtoa_r+0x43a>
 800c300:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800c302:	1e73      	subs	r3, r6, #1
 800c304:	9315      	str	r3, [sp, #84]	@ 0x54
 800c306:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800c30a:	2b30      	cmp	r3, #48	@ 0x30
 800c30c:	d0f8      	beq.n	800c300 <_dtoa_r+0x650>
 800c30e:	9f04      	ldr	r7, [sp, #16]
 800c310:	e73e      	b.n	800c190 <_dtoa_r+0x4e0>
 800c312:	4b9b      	ldr	r3, [pc, #620]	@ (800c580 <_dtoa_r+0x8d0>)
 800c314:	f7f4 f980 	bl	8000618 <__aeabi_dmul>
 800c318:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c31c:	e7bc      	b.n	800c298 <_dtoa_r+0x5e8>
 800c31e:	d10c      	bne.n	800c33a <_dtoa_r+0x68a>
 800c320:	4b98      	ldr	r3, [pc, #608]	@ (800c584 <_dtoa_r+0x8d4>)
 800c322:	2200      	movs	r2, #0
 800c324:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c328:	f7f4 f976 	bl	8000618 <__aeabi_dmul>
 800c32c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c330:	f7f4 fbf8 	bl	8000b24 <__aeabi_dcmpge>
 800c334:	2800      	cmp	r0, #0
 800c336:	f000 8157 	beq.w	800c5e8 <_dtoa_r+0x938>
 800c33a:	2400      	movs	r4, #0
 800c33c:	4625      	mov	r5, r4
 800c33e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c340:	43db      	mvns	r3, r3
 800c342:	9304      	str	r3, [sp, #16]
 800c344:	4656      	mov	r6, sl
 800c346:	2700      	movs	r7, #0
 800c348:	4621      	mov	r1, r4
 800c34a:	4658      	mov	r0, fp
 800c34c:	f000 fe8e 	bl	800d06c <_Bfree>
 800c350:	2d00      	cmp	r5, #0
 800c352:	d0dc      	beq.n	800c30e <_dtoa_r+0x65e>
 800c354:	b12f      	cbz	r7, 800c362 <_dtoa_r+0x6b2>
 800c356:	42af      	cmp	r7, r5
 800c358:	d003      	beq.n	800c362 <_dtoa_r+0x6b2>
 800c35a:	4639      	mov	r1, r7
 800c35c:	4658      	mov	r0, fp
 800c35e:	f000 fe85 	bl	800d06c <_Bfree>
 800c362:	4629      	mov	r1, r5
 800c364:	4658      	mov	r0, fp
 800c366:	f000 fe81 	bl	800d06c <_Bfree>
 800c36a:	e7d0      	b.n	800c30e <_dtoa_r+0x65e>
 800c36c:	9704      	str	r7, [sp, #16]
 800c36e:	4633      	mov	r3, r6
 800c370:	461e      	mov	r6, r3
 800c372:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c376:	2a39      	cmp	r2, #57	@ 0x39
 800c378:	d107      	bne.n	800c38a <_dtoa_r+0x6da>
 800c37a:	459a      	cmp	sl, r3
 800c37c:	d1f8      	bne.n	800c370 <_dtoa_r+0x6c0>
 800c37e:	9a04      	ldr	r2, [sp, #16]
 800c380:	3201      	adds	r2, #1
 800c382:	9204      	str	r2, [sp, #16]
 800c384:	2230      	movs	r2, #48	@ 0x30
 800c386:	f88a 2000 	strb.w	r2, [sl]
 800c38a:	781a      	ldrb	r2, [r3, #0]
 800c38c:	3201      	adds	r2, #1
 800c38e:	701a      	strb	r2, [r3, #0]
 800c390:	e7bd      	b.n	800c30e <_dtoa_r+0x65e>
 800c392:	4b7b      	ldr	r3, [pc, #492]	@ (800c580 <_dtoa_r+0x8d0>)
 800c394:	2200      	movs	r2, #0
 800c396:	f7f4 f93f 	bl	8000618 <__aeabi_dmul>
 800c39a:	2200      	movs	r2, #0
 800c39c:	2300      	movs	r3, #0
 800c39e:	4604      	mov	r4, r0
 800c3a0:	460d      	mov	r5, r1
 800c3a2:	f7f4 fba1 	bl	8000ae8 <__aeabi_dcmpeq>
 800c3a6:	2800      	cmp	r0, #0
 800c3a8:	f43f aebb 	beq.w	800c122 <_dtoa_r+0x472>
 800c3ac:	e6f0      	b.n	800c190 <_dtoa_r+0x4e0>
 800c3ae:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800c3b0:	2a00      	cmp	r2, #0
 800c3b2:	f000 80db 	beq.w	800c56c <_dtoa_r+0x8bc>
 800c3b6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c3b8:	2a01      	cmp	r2, #1
 800c3ba:	f300 80bf 	bgt.w	800c53c <_dtoa_r+0x88c>
 800c3be:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800c3c0:	2a00      	cmp	r2, #0
 800c3c2:	f000 80b7 	beq.w	800c534 <_dtoa_r+0x884>
 800c3c6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800c3ca:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800c3cc:	4646      	mov	r6, r8
 800c3ce:	9a08      	ldr	r2, [sp, #32]
 800c3d0:	2101      	movs	r1, #1
 800c3d2:	441a      	add	r2, r3
 800c3d4:	4658      	mov	r0, fp
 800c3d6:	4498      	add	r8, r3
 800c3d8:	9208      	str	r2, [sp, #32]
 800c3da:	f000 ff45 	bl	800d268 <__i2b>
 800c3de:	4605      	mov	r5, r0
 800c3e0:	b15e      	cbz	r6, 800c3fa <_dtoa_r+0x74a>
 800c3e2:	9b08      	ldr	r3, [sp, #32]
 800c3e4:	2b00      	cmp	r3, #0
 800c3e6:	dd08      	ble.n	800c3fa <_dtoa_r+0x74a>
 800c3e8:	42b3      	cmp	r3, r6
 800c3ea:	9a08      	ldr	r2, [sp, #32]
 800c3ec:	bfa8      	it	ge
 800c3ee:	4633      	movge	r3, r6
 800c3f0:	eba8 0803 	sub.w	r8, r8, r3
 800c3f4:	1af6      	subs	r6, r6, r3
 800c3f6:	1ad3      	subs	r3, r2, r3
 800c3f8:	9308      	str	r3, [sp, #32]
 800c3fa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c3fc:	b1f3      	cbz	r3, 800c43c <_dtoa_r+0x78c>
 800c3fe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c400:	2b00      	cmp	r3, #0
 800c402:	f000 80b7 	beq.w	800c574 <_dtoa_r+0x8c4>
 800c406:	b18c      	cbz	r4, 800c42c <_dtoa_r+0x77c>
 800c408:	4629      	mov	r1, r5
 800c40a:	4622      	mov	r2, r4
 800c40c:	4658      	mov	r0, fp
 800c40e:	f000 ffeb 	bl	800d3e8 <__pow5mult>
 800c412:	464a      	mov	r2, r9
 800c414:	4601      	mov	r1, r0
 800c416:	4605      	mov	r5, r0
 800c418:	4658      	mov	r0, fp
 800c41a:	f000 ff3b 	bl	800d294 <__multiply>
 800c41e:	4649      	mov	r1, r9
 800c420:	9004      	str	r0, [sp, #16]
 800c422:	4658      	mov	r0, fp
 800c424:	f000 fe22 	bl	800d06c <_Bfree>
 800c428:	9b04      	ldr	r3, [sp, #16]
 800c42a:	4699      	mov	r9, r3
 800c42c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c42e:	1b1a      	subs	r2, r3, r4
 800c430:	d004      	beq.n	800c43c <_dtoa_r+0x78c>
 800c432:	4649      	mov	r1, r9
 800c434:	4658      	mov	r0, fp
 800c436:	f000 ffd7 	bl	800d3e8 <__pow5mult>
 800c43a:	4681      	mov	r9, r0
 800c43c:	2101      	movs	r1, #1
 800c43e:	4658      	mov	r0, fp
 800c440:	f000 ff12 	bl	800d268 <__i2b>
 800c444:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c446:	4604      	mov	r4, r0
 800c448:	2b00      	cmp	r3, #0
 800c44a:	f000 81cf 	beq.w	800c7ec <_dtoa_r+0xb3c>
 800c44e:	461a      	mov	r2, r3
 800c450:	4601      	mov	r1, r0
 800c452:	4658      	mov	r0, fp
 800c454:	f000 ffc8 	bl	800d3e8 <__pow5mult>
 800c458:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c45a:	2b01      	cmp	r3, #1
 800c45c:	4604      	mov	r4, r0
 800c45e:	f300 8095 	bgt.w	800c58c <_dtoa_r+0x8dc>
 800c462:	9b02      	ldr	r3, [sp, #8]
 800c464:	2b00      	cmp	r3, #0
 800c466:	f040 8087 	bne.w	800c578 <_dtoa_r+0x8c8>
 800c46a:	9b03      	ldr	r3, [sp, #12]
 800c46c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c470:	2b00      	cmp	r3, #0
 800c472:	f040 8089 	bne.w	800c588 <_dtoa_r+0x8d8>
 800c476:	9b03      	ldr	r3, [sp, #12]
 800c478:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800c47c:	0d1b      	lsrs	r3, r3, #20
 800c47e:	051b      	lsls	r3, r3, #20
 800c480:	b12b      	cbz	r3, 800c48e <_dtoa_r+0x7de>
 800c482:	9b08      	ldr	r3, [sp, #32]
 800c484:	3301      	adds	r3, #1
 800c486:	9308      	str	r3, [sp, #32]
 800c488:	f108 0801 	add.w	r8, r8, #1
 800c48c:	2301      	movs	r3, #1
 800c48e:	930a      	str	r3, [sp, #40]	@ 0x28
 800c490:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c492:	2b00      	cmp	r3, #0
 800c494:	f000 81b0 	beq.w	800c7f8 <_dtoa_r+0xb48>
 800c498:	6923      	ldr	r3, [r4, #16]
 800c49a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c49e:	6918      	ldr	r0, [r3, #16]
 800c4a0:	f000 fe96 	bl	800d1d0 <__hi0bits>
 800c4a4:	f1c0 0020 	rsb	r0, r0, #32
 800c4a8:	9b08      	ldr	r3, [sp, #32]
 800c4aa:	4418      	add	r0, r3
 800c4ac:	f010 001f 	ands.w	r0, r0, #31
 800c4b0:	d077      	beq.n	800c5a2 <_dtoa_r+0x8f2>
 800c4b2:	f1c0 0320 	rsb	r3, r0, #32
 800c4b6:	2b04      	cmp	r3, #4
 800c4b8:	dd6b      	ble.n	800c592 <_dtoa_r+0x8e2>
 800c4ba:	9b08      	ldr	r3, [sp, #32]
 800c4bc:	f1c0 001c 	rsb	r0, r0, #28
 800c4c0:	4403      	add	r3, r0
 800c4c2:	4480      	add	r8, r0
 800c4c4:	4406      	add	r6, r0
 800c4c6:	9308      	str	r3, [sp, #32]
 800c4c8:	f1b8 0f00 	cmp.w	r8, #0
 800c4cc:	dd05      	ble.n	800c4da <_dtoa_r+0x82a>
 800c4ce:	4649      	mov	r1, r9
 800c4d0:	4642      	mov	r2, r8
 800c4d2:	4658      	mov	r0, fp
 800c4d4:	f000 ffe2 	bl	800d49c <__lshift>
 800c4d8:	4681      	mov	r9, r0
 800c4da:	9b08      	ldr	r3, [sp, #32]
 800c4dc:	2b00      	cmp	r3, #0
 800c4de:	dd05      	ble.n	800c4ec <_dtoa_r+0x83c>
 800c4e0:	4621      	mov	r1, r4
 800c4e2:	461a      	mov	r2, r3
 800c4e4:	4658      	mov	r0, fp
 800c4e6:	f000 ffd9 	bl	800d49c <__lshift>
 800c4ea:	4604      	mov	r4, r0
 800c4ec:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800c4ee:	2b00      	cmp	r3, #0
 800c4f0:	d059      	beq.n	800c5a6 <_dtoa_r+0x8f6>
 800c4f2:	4621      	mov	r1, r4
 800c4f4:	4648      	mov	r0, r9
 800c4f6:	f001 f83d 	bl	800d574 <__mcmp>
 800c4fa:	2800      	cmp	r0, #0
 800c4fc:	da53      	bge.n	800c5a6 <_dtoa_r+0x8f6>
 800c4fe:	1e7b      	subs	r3, r7, #1
 800c500:	9304      	str	r3, [sp, #16]
 800c502:	4649      	mov	r1, r9
 800c504:	2300      	movs	r3, #0
 800c506:	220a      	movs	r2, #10
 800c508:	4658      	mov	r0, fp
 800c50a:	f000 fdd1 	bl	800d0b0 <__multadd>
 800c50e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c510:	4681      	mov	r9, r0
 800c512:	2b00      	cmp	r3, #0
 800c514:	f000 8172 	beq.w	800c7fc <_dtoa_r+0xb4c>
 800c518:	2300      	movs	r3, #0
 800c51a:	4629      	mov	r1, r5
 800c51c:	220a      	movs	r2, #10
 800c51e:	4658      	mov	r0, fp
 800c520:	f000 fdc6 	bl	800d0b0 <__multadd>
 800c524:	9b00      	ldr	r3, [sp, #0]
 800c526:	2b00      	cmp	r3, #0
 800c528:	4605      	mov	r5, r0
 800c52a:	dc67      	bgt.n	800c5fc <_dtoa_r+0x94c>
 800c52c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c52e:	2b02      	cmp	r3, #2
 800c530:	dc41      	bgt.n	800c5b6 <_dtoa_r+0x906>
 800c532:	e063      	b.n	800c5fc <_dtoa_r+0x94c>
 800c534:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800c536:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800c53a:	e746      	b.n	800c3ca <_dtoa_r+0x71a>
 800c53c:	9b07      	ldr	r3, [sp, #28]
 800c53e:	1e5c      	subs	r4, r3, #1
 800c540:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c542:	42a3      	cmp	r3, r4
 800c544:	bfbf      	itttt	lt
 800c546:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800c548:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800c54a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800c54c:	1ae3      	sublt	r3, r4, r3
 800c54e:	bfb4      	ite	lt
 800c550:	18d2      	addlt	r2, r2, r3
 800c552:	1b1c      	subge	r4, r3, r4
 800c554:	9b07      	ldr	r3, [sp, #28]
 800c556:	bfbc      	itt	lt
 800c558:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800c55a:	2400      	movlt	r4, #0
 800c55c:	2b00      	cmp	r3, #0
 800c55e:	bfb5      	itete	lt
 800c560:	eba8 0603 	sublt.w	r6, r8, r3
 800c564:	9b07      	ldrge	r3, [sp, #28]
 800c566:	2300      	movlt	r3, #0
 800c568:	4646      	movge	r6, r8
 800c56a:	e730      	b.n	800c3ce <_dtoa_r+0x71e>
 800c56c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800c56e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800c570:	4646      	mov	r6, r8
 800c572:	e735      	b.n	800c3e0 <_dtoa_r+0x730>
 800c574:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c576:	e75c      	b.n	800c432 <_dtoa_r+0x782>
 800c578:	2300      	movs	r3, #0
 800c57a:	e788      	b.n	800c48e <_dtoa_r+0x7de>
 800c57c:	3fe00000 	.word	0x3fe00000
 800c580:	40240000 	.word	0x40240000
 800c584:	40140000 	.word	0x40140000
 800c588:	9b02      	ldr	r3, [sp, #8]
 800c58a:	e780      	b.n	800c48e <_dtoa_r+0x7de>
 800c58c:	2300      	movs	r3, #0
 800c58e:	930a      	str	r3, [sp, #40]	@ 0x28
 800c590:	e782      	b.n	800c498 <_dtoa_r+0x7e8>
 800c592:	d099      	beq.n	800c4c8 <_dtoa_r+0x818>
 800c594:	9a08      	ldr	r2, [sp, #32]
 800c596:	331c      	adds	r3, #28
 800c598:	441a      	add	r2, r3
 800c59a:	4498      	add	r8, r3
 800c59c:	441e      	add	r6, r3
 800c59e:	9208      	str	r2, [sp, #32]
 800c5a0:	e792      	b.n	800c4c8 <_dtoa_r+0x818>
 800c5a2:	4603      	mov	r3, r0
 800c5a4:	e7f6      	b.n	800c594 <_dtoa_r+0x8e4>
 800c5a6:	9b07      	ldr	r3, [sp, #28]
 800c5a8:	9704      	str	r7, [sp, #16]
 800c5aa:	2b00      	cmp	r3, #0
 800c5ac:	dc20      	bgt.n	800c5f0 <_dtoa_r+0x940>
 800c5ae:	9300      	str	r3, [sp, #0]
 800c5b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c5b2:	2b02      	cmp	r3, #2
 800c5b4:	dd1e      	ble.n	800c5f4 <_dtoa_r+0x944>
 800c5b6:	9b00      	ldr	r3, [sp, #0]
 800c5b8:	2b00      	cmp	r3, #0
 800c5ba:	f47f aec0 	bne.w	800c33e <_dtoa_r+0x68e>
 800c5be:	4621      	mov	r1, r4
 800c5c0:	2205      	movs	r2, #5
 800c5c2:	4658      	mov	r0, fp
 800c5c4:	f000 fd74 	bl	800d0b0 <__multadd>
 800c5c8:	4601      	mov	r1, r0
 800c5ca:	4604      	mov	r4, r0
 800c5cc:	4648      	mov	r0, r9
 800c5ce:	f000 ffd1 	bl	800d574 <__mcmp>
 800c5d2:	2800      	cmp	r0, #0
 800c5d4:	f77f aeb3 	ble.w	800c33e <_dtoa_r+0x68e>
 800c5d8:	4656      	mov	r6, sl
 800c5da:	2331      	movs	r3, #49	@ 0x31
 800c5dc:	f806 3b01 	strb.w	r3, [r6], #1
 800c5e0:	9b04      	ldr	r3, [sp, #16]
 800c5e2:	3301      	adds	r3, #1
 800c5e4:	9304      	str	r3, [sp, #16]
 800c5e6:	e6ae      	b.n	800c346 <_dtoa_r+0x696>
 800c5e8:	9c07      	ldr	r4, [sp, #28]
 800c5ea:	9704      	str	r7, [sp, #16]
 800c5ec:	4625      	mov	r5, r4
 800c5ee:	e7f3      	b.n	800c5d8 <_dtoa_r+0x928>
 800c5f0:	9b07      	ldr	r3, [sp, #28]
 800c5f2:	9300      	str	r3, [sp, #0]
 800c5f4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c5f6:	2b00      	cmp	r3, #0
 800c5f8:	f000 8104 	beq.w	800c804 <_dtoa_r+0xb54>
 800c5fc:	2e00      	cmp	r6, #0
 800c5fe:	dd05      	ble.n	800c60c <_dtoa_r+0x95c>
 800c600:	4629      	mov	r1, r5
 800c602:	4632      	mov	r2, r6
 800c604:	4658      	mov	r0, fp
 800c606:	f000 ff49 	bl	800d49c <__lshift>
 800c60a:	4605      	mov	r5, r0
 800c60c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c60e:	2b00      	cmp	r3, #0
 800c610:	d05a      	beq.n	800c6c8 <_dtoa_r+0xa18>
 800c612:	6869      	ldr	r1, [r5, #4]
 800c614:	4658      	mov	r0, fp
 800c616:	f000 fce9 	bl	800cfec <_Balloc>
 800c61a:	4606      	mov	r6, r0
 800c61c:	b928      	cbnz	r0, 800c62a <_dtoa_r+0x97a>
 800c61e:	4b84      	ldr	r3, [pc, #528]	@ (800c830 <_dtoa_r+0xb80>)
 800c620:	4602      	mov	r2, r0
 800c622:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800c626:	f7ff bb5a 	b.w	800bcde <_dtoa_r+0x2e>
 800c62a:	692a      	ldr	r2, [r5, #16]
 800c62c:	3202      	adds	r2, #2
 800c62e:	0092      	lsls	r2, r2, #2
 800c630:	f105 010c 	add.w	r1, r5, #12
 800c634:	300c      	adds	r0, #12
 800c636:	f7ff fa8d 	bl	800bb54 <memcpy>
 800c63a:	2201      	movs	r2, #1
 800c63c:	4631      	mov	r1, r6
 800c63e:	4658      	mov	r0, fp
 800c640:	f000 ff2c 	bl	800d49c <__lshift>
 800c644:	f10a 0301 	add.w	r3, sl, #1
 800c648:	9307      	str	r3, [sp, #28]
 800c64a:	9b00      	ldr	r3, [sp, #0]
 800c64c:	4453      	add	r3, sl
 800c64e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c650:	9b02      	ldr	r3, [sp, #8]
 800c652:	f003 0301 	and.w	r3, r3, #1
 800c656:	462f      	mov	r7, r5
 800c658:	930a      	str	r3, [sp, #40]	@ 0x28
 800c65a:	4605      	mov	r5, r0
 800c65c:	9b07      	ldr	r3, [sp, #28]
 800c65e:	4621      	mov	r1, r4
 800c660:	3b01      	subs	r3, #1
 800c662:	4648      	mov	r0, r9
 800c664:	9300      	str	r3, [sp, #0]
 800c666:	f7ff fa99 	bl	800bb9c <quorem>
 800c66a:	4639      	mov	r1, r7
 800c66c:	9002      	str	r0, [sp, #8]
 800c66e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800c672:	4648      	mov	r0, r9
 800c674:	f000 ff7e 	bl	800d574 <__mcmp>
 800c678:	462a      	mov	r2, r5
 800c67a:	9008      	str	r0, [sp, #32]
 800c67c:	4621      	mov	r1, r4
 800c67e:	4658      	mov	r0, fp
 800c680:	f000 ff94 	bl	800d5ac <__mdiff>
 800c684:	68c2      	ldr	r2, [r0, #12]
 800c686:	4606      	mov	r6, r0
 800c688:	bb02      	cbnz	r2, 800c6cc <_dtoa_r+0xa1c>
 800c68a:	4601      	mov	r1, r0
 800c68c:	4648      	mov	r0, r9
 800c68e:	f000 ff71 	bl	800d574 <__mcmp>
 800c692:	4602      	mov	r2, r0
 800c694:	4631      	mov	r1, r6
 800c696:	4658      	mov	r0, fp
 800c698:	920e      	str	r2, [sp, #56]	@ 0x38
 800c69a:	f000 fce7 	bl	800d06c <_Bfree>
 800c69e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c6a0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c6a2:	9e07      	ldr	r6, [sp, #28]
 800c6a4:	ea43 0102 	orr.w	r1, r3, r2
 800c6a8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c6aa:	4319      	orrs	r1, r3
 800c6ac:	d110      	bne.n	800c6d0 <_dtoa_r+0xa20>
 800c6ae:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c6b2:	d029      	beq.n	800c708 <_dtoa_r+0xa58>
 800c6b4:	9b08      	ldr	r3, [sp, #32]
 800c6b6:	2b00      	cmp	r3, #0
 800c6b8:	dd02      	ble.n	800c6c0 <_dtoa_r+0xa10>
 800c6ba:	9b02      	ldr	r3, [sp, #8]
 800c6bc:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800c6c0:	9b00      	ldr	r3, [sp, #0]
 800c6c2:	f883 8000 	strb.w	r8, [r3]
 800c6c6:	e63f      	b.n	800c348 <_dtoa_r+0x698>
 800c6c8:	4628      	mov	r0, r5
 800c6ca:	e7bb      	b.n	800c644 <_dtoa_r+0x994>
 800c6cc:	2201      	movs	r2, #1
 800c6ce:	e7e1      	b.n	800c694 <_dtoa_r+0x9e4>
 800c6d0:	9b08      	ldr	r3, [sp, #32]
 800c6d2:	2b00      	cmp	r3, #0
 800c6d4:	db04      	blt.n	800c6e0 <_dtoa_r+0xa30>
 800c6d6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c6d8:	430b      	orrs	r3, r1
 800c6da:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800c6dc:	430b      	orrs	r3, r1
 800c6de:	d120      	bne.n	800c722 <_dtoa_r+0xa72>
 800c6e0:	2a00      	cmp	r2, #0
 800c6e2:	dded      	ble.n	800c6c0 <_dtoa_r+0xa10>
 800c6e4:	4649      	mov	r1, r9
 800c6e6:	2201      	movs	r2, #1
 800c6e8:	4658      	mov	r0, fp
 800c6ea:	f000 fed7 	bl	800d49c <__lshift>
 800c6ee:	4621      	mov	r1, r4
 800c6f0:	4681      	mov	r9, r0
 800c6f2:	f000 ff3f 	bl	800d574 <__mcmp>
 800c6f6:	2800      	cmp	r0, #0
 800c6f8:	dc03      	bgt.n	800c702 <_dtoa_r+0xa52>
 800c6fa:	d1e1      	bne.n	800c6c0 <_dtoa_r+0xa10>
 800c6fc:	f018 0f01 	tst.w	r8, #1
 800c700:	d0de      	beq.n	800c6c0 <_dtoa_r+0xa10>
 800c702:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c706:	d1d8      	bne.n	800c6ba <_dtoa_r+0xa0a>
 800c708:	9a00      	ldr	r2, [sp, #0]
 800c70a:	2339      	movs	r3, #57	@ 0x39
 800c70c:	7013      	strb	r3, [r2, #0]
 800c70e:	4633      	mov	r3, r6
 800c710:	461e      	mov	r6, r3
 800c712:	3b01      	subs	r3, #1
 800c714:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800c718:	2a39      	cmp	r2, #57	@ 0x39
 800c71a:	d052      	beq.n	800c7c2 <_dtoa_r+0xb12>
 800c71c:	3201      	adds	r2, #1
 800c71e:	701a      	strb	r2, [r3, #0]
 800c720:	e612      	b.n	800c348 <_dtoa_r+0x698>
 800c722:	2a00      	cmp	r2, #0
 800c724:	dd07      	ble.n	800c736 <_dtoa_r+0xa86>
 800c726:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c72a:	d0ed      	beq.n	800c708 <_dtoa_r+0xa58>
 800c72c:	9a00      	ldr	r2, [sp, #0]
 800c72e:	f108 0301 	add.w	r3, r8, #1
 800c732:	7013      	strb	r3, [r2, #0]
 800c734:	e608      	b.n	800c348 <_dtoa_r+0x698>
 800c736:	9b07      	ldr	r3, [sp, #28]
 800c738:	9a07      	ldr	r2, [sp, #28]
 800c73a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800c73e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c740:	4293      	cmp	r3, r2
 800c742:	d028      	beq.n	800c796 <_dtoa_r+0xae6>
 800c744:	4649      	mov	r1, r9
 800c746:	2300      	movs	r3, #0
 800c748:	220a      	movs	r2, #10
 800c74a:	4658      	mov	r0, fp
 800c74c:	f000 fcb0 	bl	800d0b0 <__multadd>
 800c750:	42af      	cmp	r7, r5
 800c752:	4681      	mov	r9, r0
 800c754:	f04f 0300 	mov.w	r3, #0
 800c758:	f04f 020a 	mov.w	r2, #10
 800c75c:	4639      	mov	r1, r7
 800c75e:	4658      	mov	r0, fp
 800c760:	d107      	bne.n	800c772 <_dtoa_r+0xac2>
 800c762:	f000 fca5 	bl	800d0b0 <__multadd>
 800c766:	4607      	mov	r7, r0
 800c768:	4605      	mov	r5, r0
 800c76a:	9b07      	ldr	r3, [sp, #28]
 800c76c:	3301      	adds	r3, #1
 800c76e:	9307      	str	r3, [sp, #28]
 800c770:	e774      	b.n	800c65c <_dtoa_r+0x9ac>
 800c772:	f000 fc9d 	bl	800d0b0 <__multadd>
 800c776:	4629      	mov	r1, r5
 800c778:	4607      	mov	r7, r0
 800c77a:	2300      	movs	r3, #0
 800c77c:	220a      	movs	r2, #10
 800c77e:	4658      	mov	r0, fp
 800c780:	f000 fc96 	bl	800d0b0 <__multadd>
 800c784:	4605      	mov	r5, r0
 800c786:	e7f0      	b.n	800c76a <_dtoa_r+0xaba>
 800c788:	9b00      	ldr	r3, [sp, #0]
 800c78a:	2b00      	cmp	r3, #0
 800c78c:	bfcc      	ite	gt
 800c78e:	461e      	movgt	r6, r3
 800c790:	2601      	movle	r6, #1
 800c792:	4456      	add	r6, sl
 800c794:	2700      	movs	r7, #0
 800c796:	4649      	mov	r1, r9
 800c798:	2201      	movs	r2, #1
 800c79a:	4658      	mov	r0, fp
 800c79c:	f000 fe7e 	bl	800d49c <__lshift>
 800c7a0:	4621      	mov	r1, r4
 800c7a2:	4681      	mov	r9, r0
 800c7a4:	f000 fee6 	bl	800d574 <__mcmp>
 800c7a8:	2800      	cmp	r0, #0
 800c7aa:	dcb0      	bgt.n	800c70e <_dtoa_r+0xa5e>
 800c7ac:	d102      	bne.n	800c7b4 <_dtoa_r+0xb04>
 800c7ae:	f018 0f01 	tst.w	r8, #1
 800c7b2:	d1ac      	bne.n	800c70e <_dtoa_r+0xa5e>
 800c7b4:	4633      	mov	r3, r6
 800c7b6:	461e      	mov	r6, r3
 800c7b8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c7bc:	2a30      	cmp	r2, #48	@ 0x30
 800c7be:	d0fa      	beq.n	800c7b6 <_dtoa_r+0xb06>
 800c7c0:	e5c2      	b.n	800c348 <_dtoa_r+0x698>
 800c7c2:	459a      	cmp	sl, r3
 800c7c4:	d1a4      	bne.n	800c710 <_dtoa_r+0xa60>
 800c7c6:	9b04      	ldr	r3, [sp, #16]
 800c7c8:	3301      	adds	r3, #1
 800c7ca:	9304      	str	r3, [sp, #16]
 800c7cc:	2331      	movs	r3, #49	@ 0x31
 800c7ce:	f88a 3000 	strb.w	r3, [sl]
 800c7d2:	e5b9      	b.n	800c348 <_dtoa_r+0x698>
 800c7d4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c7d6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800c834 <_dtoa_r+0xb84>
 800c7da:	b11b      	cbz	r3, 800c7e4 <_dtoa_r+0xb34>
 800c7dc:	f10a 0308 	add.w	r3, sl, #8
 800c7e0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800c7e2:	6013      	str	r3, [r2, #0]
 800c7e4:	4650      	mov	r0, sl
 800c7e6:	b019      	add	sp, #100	@ 0x64
 800c7e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c7ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c7ee:	2b01      	cmp	r3, #1
 800c7f0:	f77f ae37 	ble.w	800c462 <_dtoa_r+0x7b2>
 800c7f4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c7f6:	930a      	str	r3, [sp, #40]	@ 0x28
 800c7f8:	2001      	movs	r0, #1
 800c7fa:	e655      	b.n	800c4a8 <_dtoa_r+0x7f8>
 800c7fc:	9b00      	ldr	r3, [sp, #0]
 800c7fe:	2b00      	cmp	r3, #0
 800c800:	f77f aed6 	ble.w	800c5b0 <_dtoa_r+0x900>
 800c804:	4656      	mov	r6, sl
 800c806:	4621      	mov	r1, r4
 800c808:	4648      	mov	r0, r9
 800c80a:	f7ff f9c7 	bl	800bb9c <quorem>
 800c80e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800c812:	f806 8b01 	strb.w	r8, [r6], #1
 800c816:	9b00      	ldr	r3, [sp, #0]
 800c818:	eba6 020a 	sub.w	r2, r6, sl
 800c81c:	4293      	cmp	r3, r2
 800c81e:	ddb3      	ble.n	800c788 <_dtoa_r+0xad8>
 800c820:	4649      	mov	r1, r9
 800c822:	2300      	movs	r3, #0
 800c824:	220a      	movs	r2, #10
 800c826:	4658      	mov	r0, fp
 800c828:	f000 fc42 	bl	800d0b0 <__multadd>
 800c82c:	4681      	mov	r9, r0
 800c82e:	e7ea      	b.n	800c806 <_dtoa_r+0xb56>
 800c830:	08010600 	.word	0x08010600
 800c834:	08010584 	.word	0x08010584

0800c838 <_free_r>:
 800c838:	b538      	push	{r3, r4, r5, lr}
 800c83a:	4605      	mov	r5, r0
 800c83c:	2900      	cmp	r1, #0
 800c83e:	d041      	beq.n	800c8c4 <_free_r+0x8c>
 800c840:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c844:	1f0c      	subs	r4, r1, #4
 800c846:	2b00      	cmp	r3, #0
 800c848:	bfb8      	it	lt
 800c84a:	18e4      	addlt	r4, r4, r3
 800c84c:	f7fc fc68 	bl	8009120 <__malloc_lock>
 800c850:	4a1d      	ldr	r2, [pc, #116]	@ (800c8c8 <_free_r+0x90>)
 800c852:	6813      	ldr	r3, [r2, #0]
 800c854:	b933      	cbnz	r3, 800c864 <_free_r+0x2c>
 800c856:	6063      	str	r3, [r4, #4]
 800c858:	6014      	str	r4, [r2, #0]
 800c85a:	4628      	mov	r0, r5
 800c85c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c860:	f7fc bc64 	b.w	800912c <__malloc_unlock>
 800c864:	42a3      	cmp	r3, r4
 800c866:	d908      	bls.n	800c87a <_free_r+0x42>
 800c868:	6820      	ldr	r0, [r4, #0]
 800c86a:	1821      	adds	r1, r4, r0
 800c86c:	428b      	cmp	r3, r1
 800c86e:	bf01      	itttt	eq
 800c870:	6819      	ldreq	r1, [r3, #0]
 800c872:	685b      	ldreq	r3, [r3, #4]
 800c874:	1809      	addeq	r1, r1, r0
 800c876:	6021      	streq	r1, [r4, #0]
 800c878:	e7ed      	b.n	800c856 <_free_r+0x1e>
 800c87a:	461a      	mov	r2, r3
 800c87c:	685b      	ldr	r3, [r3, #4]
 800c87e:	b10b      	cbz	r3, 800c884 <_free_r+0x4c>
 800c880:	42a3      	cmp	r3, r4
 800c882:	d9fa      	bls.n	800c87a <_free_r+0x42>
 800c884:	6811      	ldr	r1, [r2, #0]
 800c886:	1850      	adds	r0, r2, r1
 800c888:	42a0      	cmp	r0, r4
 800c88a:	d10b      	bne.n	800c8a4 <_free_r+0x6c>
 800c88c:	6820      	ldr	r0, [r4, #0]
 800c88e:	4401      	add	r1, r0
 800c890:	1850      	adds	r0, r2, r1
 800c892:	4283      	cmp	r3, r0
 800c894:	6011      	str	r1, [r2, #0]
 800c896:	d1e0      	bne.n	800c85a <_free_r+0x22>
 800c898:	6818      	ldr	r0, [r3, #0]
 800c89a:	685b      	ldr	r3, [r3, #4]
 800c89c:	6053      	str	r3, [r2, #4]
 800c89e:	4408      	add	r0, r1
 800c8a0:	6010      	str	r0, [r2, #0]
 800c8a2:	e7da      	b.n	800c85a <_free_r+0x22>
 800c8a4:	d902      	bls.n	800c8ac <_free_r+0x74>
 800c8a6:	230c      	movs	r3, #12
 800c8a8:	602b      	str	r3, [r5, #0]
 800c8aa:	e7d6      	b.n	800c85a <_free_r+0x22>
 800c8ac:	6820      	ldr	r0, [r4, #0]
 800c8ae:	1821      	adds	r1, r4, r0
 800c8b0:	428b      	cmp	r3, r1
 800c8b2:	bf04      	itt	eq
 800c8b4:	6819      	ldreq	r1, [r3, #0]
 800c8b6:	685b      	ldreq	r3, [r3, #4]
 800c8b8:	6063      	str	r3, [r4, #4]
 800c8ba:	bf04      	itt	eq
 800c8bc:	1809      	addeq	r1, r1, r0
 800c8be:	6021      	streq	r1, [r4, #0]
 800c8c0:	6054      	str	r4, [r2, #4]
 800c8c2:	e7ca      	b.n	800c85a <_free_r+0x22>
 800c8c4:	bd38      	pop	{r3, r4, r5, pc}
 800c8c6:	bf00      	nop
 800c8c8:	20008bec 	.word	0x20008bec

0800c8cc <rshift>:
 800c8cc:	6903      	ldr	r3, [r0, #16]
 800c8ce:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800c8d2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c8d6:	ea4f 1261 	mov.w	r2, r1, asr #5
 800c8da:	f100 0414 	add.w	r4, r0, #20
 800c8de:	dd45      	ble.n	800c96c <rshift+0xa0>
 800c8e0:	f011 011f 	ands.w	r1, r1, #31
 800c8e4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800c8e8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800c8ec:	d10c      	bne.n	800c908 <rshift+0x3c>
 800c8ee:	f100 0710 	add.w	r7, r0, #16
 800c8f2:	4629      	mov	r1, r5
 800c8f4:	42b1      	cmp	r1, r6
 800c8f6:	d334      	bcc.n	800c962 <rshift+0x96>
 800c8f8:	1a9b      	subs	r3, r3, r2
 800c8fa:	009b      	lsls	r3, r3, #2
 800c8fc:	1eea      	subs	r2, r5, #3
 800c8fe:	4296      	cmp	r6, r2
 800c900:	bf38      	it	cc
 800c902:	2300      	movcc	r3, #0
 800c904:	4423      	add	r3, r4
 800c906:	e015      	b.n	800c934 <rshift+0x68>
 800c908:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800c90c:	f1c1 0820 	rsb	r8, r1, #32
 800c910:	40cf      	lsrs	r7, r1
 800c912:	f105 0e04 	add.w	lr, r5, #4
 800c916:	46a1      	mov	r9, r4
 800c918:	4576      	cmp	r6, lr
 800c91a:	46f4      	mov	ip, lr
 800c91c:	d815      	bhi.n	800c94a <rshift+0x7e>
 800c91e:	1a9a      	subs	r2, r3, r2
 800c920:	0092      	lsls	r2, r2, #2
 800c922:	3a04      	subs	r2, #4
 800c924:	3501      	adds	r5, #1
 800c926:	42ae      	cmp	r6, r5
 800c928:	bf38      	it	cc
 800c92a:	2200      	movcc	r2, #0
 800c92c:	18a3      	adds	r3, r4, r2
 800c92e:	50a7      	str	r7, [r4, r2]
 800c930:	b107      	cbz	r7, 800c934 <rshift+0x68>
 800c932:	3304      	adds	r3, #4
 800c934:	1b1a      	subs	r2, r3, r4
 800c936:	42a3      	cmp	r3, r4
 800c938:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800c93c:	bf08      	it	eq
 800c93e:	2300      	moveq	r3, #0
 800c940:	6102      	str	r2, [r0, #16]
 800c942:	bf08      	it	eq
 800c944:	6143      	streq	r3, [r0, #20]
 800c946:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c94a:	f8dc c000 	ldr.w	ip, [ip]
 800c94e:	fa0c fc08 	lsl.w	ip, ip, r8
 800c952:	ea4c 0707 	orr.w	r7, ip, r7
 800c956:	f849 7b04 	str.w	r7, [r9], #4
 800c95a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c95e:	40cf      	lsrs	r7, r1
 800c960:	e7da      	b.n	800c918 <rshift+0x4c>
 800c962:	f851 cb04 	ldr.w	ip, [r1], #4
 800c966:	f847 cf04 	str.w	ip, [r7, #4]!
 800c96a:	e7c3      	b.n	800c8f4 <rshift+0x28>
 800c96c:	4623      	mov	r3, r4
 800c96e:	e7e1      	b.n	800c934 <rshift+0x68>

0800c970 <__hexdig_fun>:
 800c970:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800c974:	2b09      	cmp	r3, #9
 800c976:	d802      	bhi.n	800c97e <__hexdig_fun+0xe>
 800c978:	3820      	subs	r0, #32
 800c97a:	b2c0      	uxtb	r0, r0
 800c97c:	4770      	bx	lr
 800c97e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800c982:	2b05      	cmp	r3, #5
 800c984:	d801      	bhi.n	800c98a <__hexdig_fun+0x1a>
 800c986:	3847      	subs	r0, #71	@ 0x47
 800c988:	e7f7      	b.n	800c97a <__hexdig_fun+0xa>
 800c98a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800c98e:	2b05      	cmp	r3, #5
 800c990:	d801      	bhi.n	800c996 <__hexdig_fun+0x26>
 800c992:	3827      	subs	r0, #39	@ 0x27
 800c994:	e7f1      	b.n	800c97a <__hexdig_fun+0xa>
 800c996:	2000      	movs	r0, #0
 800c998:	4770      	bx	lr
	...

0800c99c <__gethex>:
 800c99c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c9a0:	b085      	sub	sp, #20
 800c9a2:	468a      	mov	sl, r1
 800c9a4:	9302      	str	r3, [sp, #8]
 800c9a6:	680b      	ldr	r3, [r1, #0]
 800c9a8:	9001      	str	r0, [sp, #4]
 800c9aa:	4690      	mov	r8, r2
 800c9ac:	1c9c      	adds	r4, r3, #2
 800c9ae:	46a1      	mov	r9, r4
 800c9b0:	f814 0b01 	ldrb.w	r0, [r4], #1
 800c9b4:	2830      	cmp	r0, #48	@ 0x30
 800c9b6:	d0fa      	beq.n	800c9ae <__gethex+0x12>
 800c9b8:	eba9 0303 	sub.w	r3, r9, r3
 800c9bc:	f1a3 0b02 	sub.w	fp, r3, #2
 800c9c0:	f7ff ffd6 	bl	800c970 <__hexdig_fun>
 800c9c4:	4605      	mov	r5, r0
 800c9c6:	2800      	cmp	r0, #0
 800c9c8:	d168      	bne.n	800ca9c <__gethex+0x100>
 800c9ca:	49a0      	ldr	r1, [pc, #640]	@ (800cc4c <__gethex+0x2b0>)
 800c9cc:	2201      	movs	r2, #1
 800c9ce:	4648      	mov	r0, r9
 800c9d0:	f7fe fa81 	bl	800aed6 <strncmp>
 800c9d4:	4607      	mov	r7, r0
 800c9d6:	2800      	cmp	r0, #0
 800c9d8:	d167      	bne.n	800caaa <__gethex+0x10e>
 800c9da:	f899 0001 	ldrb.w	r0, [r9, #1]
 800c9de:	4626      	mov	r6, r4
 800c9e0:	f7ff ffc6 	bl	800c970 <__hexdig_fun>
 800c9e4:	2800      	cmp	r0, #0
 800c9e6:	d062      	beq.n	800caae <__gethex+0x112>
 800c9e8:	4623      	mov	r3, r4
 800c9ea:	7818      	ldrb	r0, [r3, #0]
 800c9ec:	2830      	cmp	r0, #48	@ 0x30
 800c9ee:	4699      	mov	r9, r3
 800c9f0:	f103 0301 	add.w	r3, r3, #1
 800c9f4:	d0f9      	beq.n	800c9ea <__gethex+0x4e>
 800c9f6:	f7ff ffbb 	bl	800c970 <__hexdig_fun>
 800c9fa:	fab0 f580 	clz	r5, r0
 800c9fe:	096d      	lsrs	r5, r5, #5
 800ca00:	f04f 0b01 	mov.w	fp, #1
 800ca04:	464a      	mov	r2, r9
 800ca06:	4616      	mov	r6, r2
 800ca08:	3201      	adds	r2, #1
 800ca0a:	7830      	ldrb	r0, [r6, #0]
 800ca0c:	f7ff ffb0 	bl	800c970 <__hexdig_fun>
 800ca10:	2800      	cmp	r0, #0
 800ca12:	d1f8      	bne.n	800ca06 <__gethex+0x6a>
 800ca14:	498d      	ldr	r1, [pc, #564]	@ (800cc4c <__gethex+0x2b0>)
 800ca16:	2201      	movs	r2, #1
 800ca18:	4630      	mov	r0, r6
 800ca1a:	f7fe fa5c 	bl	800aed6 <strncmp>
 800ca1e:	2800      	cmp	r0, #0
 800ca20:	d13f      	bne.n	800caa2 <__gethex+0x106>
 800ca22:	b944      	cbnz	r4, 800ca36 <__gethex+0x9a>
 800ca24:	1c74      	adds	r4, r6, #1
 800ca26:	4622      	mov	r2, r4
 800ca28:	4616      	mov	r6, r2
 800ca2a:	3201      	adds	r2, #1
 800ca2c:	7830      	ldrb	r0, [r6, #0]
 800ca2e:	f7ff ff9f 	bl	800c970 <__hexdig_fun>
 800ca32:	2800      	cmp	r0, #0
 800ca34:	d1f8      	bne.n	800ca28 <__gethex+0x8c>
 800ca36:	1ba4      	subs	r4, r4, r6
 800ca38:	00a7      	lsls	r7, r4, #2
 800ca3a:	7833      	ldrb	r3, [r6, #0]
 800ca3c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800ca40:	2b50      	cmp	r3, #80	@ 0x50
 800ca42:	d13e      	bne.n	800cac2 <__gethex+0x126>
 800ca44:	7873      	ldrb	r3, [r6, #1]
 800ca46:	2b2b      	cmp	r3, #43	@ 0x2b
 800ca48:	d033      	beq.n	800cab2 <__gethex+0x116>
 800ca4a:	2b2d      	cmp	r3, #45	@ 0x2d
 800ca4c:	d034      	beq.n	800cab8 <__gethex+0x11c>
 800ca4e:	1c71      	adds	r1, r6, #1
 800ca50:	2400      	movs	r4, #0
 800ca52:	7808      	ldrb	r0, [r1, #0]
 800ca54:	f7ff ff8c 	bl	800c970 <__hexdig_fun>
 800ca58:	1e43      	subs	r3, r0, #1
 800ca5a:	b2db      	uxtb	r3, r3
 800ca5c:	2b18      	cmp	r3, #24
 800ca5e:	d830      	bhi.n	800cac2 <__gethex+0x126>
 800ca60:	f1a0 0210 	sub.w	r2, r0, #16
 800ca64:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800ca68:	f7ff ff82 	bl	800c970 <__hexdig_fun>
 800ca6c:	f100 3cff 	add.w	ip, r0, #4294967295
 800ca70:	fa5f fc8c 	uxtb.w	ip, ip
 800ca74:	f1bc 0f18 	cmp.w	ip, #24
 800ca78:	f04f 030a 	mov.w	r3, #10
 800ca7c:	d91e      	bls.n	800cabc <__gethex+0x120>
 800ca7e:	b104      	cbz	r4, 800ca82 <__gethex+0xe6>
 800ca80:	4252      	negs	r2, r2
 800ca82:	4417      	add	r7, r2
 800ca84:	f8ca 1000 	str.w	r1, [sl]
 800ca88:	b1ed      	cbz	r5, 800cac6 <__gethex+0x12a>
 800ca8a:	f1bb 0f00 	cmp.w	fp, #0
 800ca8e:	bf0c      	ite	eq
 800ca90:	2506      	moveq	r5, #6
 800ca92:	2500      	movne	r5, #0
 800ca94:	4628      	mov	r0, r5
 800ca96:	b005      	add	sp, #20
 800ca98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca9c:	2500      	movs	r5, #0
 800ca9e:	462c      	mov	r4, r5
 800caa0:	e7b0      	b.n	800ca04 <__gethex+0x68>
 800caa2:	2c00      	cmp	r4, #0
 800caa4:	d1c7      	bne.n	800ca36 <__gethex+0x9a>
 800caa6:	4627      	mov	r7, r4
 800caa8:	e7c7      	b.n	800ca3a <__gethex+0x9e>
 800caaa:	464e      	mov	r6, r9
 800caac:	462f      	mov	r7, r5
 800caae:	2501      	movs	r5, #1
 800cab0:	e7c3      	b.n	800ca3a <__gethex+0x9e>
 800cab2:	2400      	movs	r4, #0
 800cab4:	1cb1      	adds	r1, r6, #2
 800cab6:	e7cc      	b.n	800ca52 <__gethex+0xb6>
 800cab8:	2401      	movs	r4, #1
 800caba:	e7fb      	b.n	800cab4 <__gethex+0x118>
 800cabc:	fb03 0002 	mla	r0, r3, r2, r0
 800cac0:	e7ce      	b.n	800ca60 <__gethex+0xc4>
 800cac2:	4631      	mov	r1, r6
 800cac4:	e7de      	b.n	800ca84 <__gethex+0xe8>
 800cac6:	eba6 0309 	sub.w	r3, r6, r9
 800caca:	3b01      	subs	r3, #1
 800cacc:	4629      	mov	r1, r5
 800cace:	2b07      	cmp	r3, #7
 800cad0:	dc0a      	bgt.n	800cae8 <__gethex+0x14c>
 800cad2:	9801      	ldr	r0, [sp, #4]
 800cad4:	f000 fa8a 	bl	800cfec <_Balloc>
 800cad8:	4604      	mov	r4, r0
 800cada:	b940      	cbnz	r0, 800caee <__gethex+0x152>
 800cadc:	4b5c      	ldr	r3, [pc, #368]	@ (800cc50 <__gethex+0x2b4>)
 800cade:	4602      	mov	r2, r0
 800cae0:	21e4      	movs	r1, #228	@ 0xe4
 800cae2:	485c      	ldr	r0, [pc, #368]	@ (800cc54 <__gethex+0x2b8>)
 800cae4:	f001 fd6a 	bl	800e5bc <__assert_func>
 800cae8:	3101      	adds	r1, #1
 800caea:	105b      	asrs	r3, r3, #1
 800caec:	e7ef      	b.n	800cace <__gethex+0x132>
 800caee:	f100 0a14 	add.w	sl, r0, #20
 800caf2:	2300      	movs	r3, #0
 800caf4:	4655      	mov	r5, sl
 800caf6:	469b      	mov	fp, r3
 800caf8:	45b1      	cmp	r9, r6
 800cafa:	d337      	bcc.n	800cb6c <__gethex+0x1d0>
 800cafc:	f845 bb04 	str.w	fp, [r5], #4
 800cb00:	eba5 050a 	sub.w	r5, r5, sl
 800cb04:	10ad      	asrs	r5, r5, #2
 800cb06:	6125      	str	r5, [r4, #16]
 800cb08:	4658      	mov	r0, fp
 800cb0a:	f000 fb61 	bl	800d1d0 <__hi0bits>
 800cb0e:	016d      	lsls	r5, r5, #5
 800cb10:	f8d8 6000 	ldr.w	r6, [r8]
 800cb14:	1a2d      	subs	r5, r5, r0
 800cb16:	42b5      	cmp	r5, r6
 800cb18:	dd54      	ble.n	800cbc4 <__gethex+0x228>
 800cb1a:	1bad      	subs	r5, r5, r6
 800cb1c:	4629      	mov	r1, r5
 800cb1e:	4620      	mov	r0, r4
 800cb20:	f000 fef5 	bl	800d90e <__any_on>
 800cb24:	4681      	mov	r9, r0
 800cb26:	b178      	cbz	r0, 800cb48 <__gethex+0x1ac>
 800cb28:	1e6b      	subs	r3, r5, #1
 800cb2a:	1159      	asrs	r1, r3, #5
 800cb2c:	f003 021f 	and.w	r2, r3, #31
 800cb30:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800cb34:	f04f 0901 	mov.w	r9, #1
 800cb38:	fa09 f202 	lsl.w	r2, r9, r2
 800cb3c:	420a      	tst	r2, r1
 800cb3e:	d003      	beq.n	800cb48 <__gethex+0x1ac>
 800cb40:	454b      	cmp	r3, r9
 800cb42:	dc36      	bgt.n	800cbb2 <__gethex+0x216>
 800cb44:	f04f 0902 	mov.w	r9, #2
 800cb48:	4629      	mov	r1, r5
 800cb4a:	4620      	mov	r0, r4
 800cb4c:	f7ff febe 	bl	800c8cc <rshift>
 800cb50:	442f      	add	r7, r5
 800cb52:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800cb56:	42bb      	cmp	r3, r7
 800cb58:	da42      	bge.n	800cbe0 <__gethex+0x244>
 800cb5a:	9801      	ldr	r0, [sp, #4]
 800cb5c:	4621      	mov	r1, r4
 800cb5e:	f000 fa85 	bl	800d06c <_Bfree>
 800cb62:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800cb64:	2300      	movs	r3, #0
 800cb66:	6013      	str	r3, [r2, #0]
 800cb68:	25a3      	movs	r5, #163	@ 0xa3
 800cb6a:	e793      	b.n	800ca94 <__gethex+0xf8>
 800cb6c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800cb70:	2a2e      	cmp	r2, #46	@ 0x2e
 800cb72:	d012      	beq.n	800cb9a <__gethex+0x1fe>
 800cb74:	2b20      	cmp	r3, #32
 800cb76:	d104      	bne.n	800cb82 <__gethex+0x1e6>
 800cb78:	f845 bb04 	str.w	fp, [r5], #4
 800cb7c:	f04f 0b00 	mov.w	fp, #0
 800cb80:	465b      	mov	r3, fp
 800cb82:	7830      	ldrb	r0, [r6, #0]
 800cb84:	9303      	str	r3, [sp, #12]
 800cb86:	f7ff fef3 	bl	800c970 <__hexdig_fun>
 800cb8a:	9b03      	ldr	r3, [sp, #12]
 800cb8c:	f000 000f 	and.w	r0, r0, #15
 800cb90:	4098      	lsls	r0, r3
 800cb92:	ea4b 0b00 	orr.w	fp, fp, r0
 800cb96:	3304      	adds	r3, #4
 800cb98:	e7ae      	b.n	800caf8 <__gethex+0x15c>
 800cb9a:	45b1      	cmp	r9, r6
 800cb9c:	d8ea      	bhi.n	800cb74 <__gethex+0x1d8>
 800cb9e:	492b      	ldr	r1, [pc, #172]	@ (800cc4c <__gethex+0x2b0>)
 800cba0:	9303      	str	r3, [sp, #12]
 800cba2:	2201      	movs	r2, #1
 800cba4:	4630      	mov	r0, r6
 800cba6:	f7fe f996 	bl	800aed6 <strncmp>
 800cbaa:	9b03      	ldr	r3, [sp, #12]
 800cbac:	2800      	cmp	r0, #0
 800cbae:	d1e1      	bne.n	800cb74 <__gethex+0x1d8>
 800cbb0:	e7a2      	b.n	800caf8 <__gethex+0x15c>
 800cbb2:	1ea9      	subs	r1, r5, #2
 800cbb4:	4620      	mov	r0, r4
 800cbb6:	f000 feaa 	bl	800d90e <__any_on>
 800cbba:	2800      	cmp	r0, #0
 800cbbc:	d0c2      	beq.n	800cb44 <__gethex+0x1a8>
 800cbbe:	f04f 0903 	mov.w	r9, #3
 800cbc2:	e7c1      	b.n	800cb48 <__gethex+0x1ac>
 800cbc4:	da09      	bge.n	800cbda <__gethex+0x23e>
 800cbc6:	1b75      	subs	r5, r6, r5
 800cbc8:	4621      	mov	r1, r4
 800cbca:	9801      	ldr	r0, [sp, #4]
 800cbcc:	462a      	mov	r2, r5
 800cbce:	f000 fc65 	bl	800d49c <__lshift>
 800cbd2:	1b7f      	subs	r7, r7, r5
 800cbd4:	4604      	mov	r4, r0
 800cbd6:	f100 0a14 	add.w	sl, r0, #20
 800cbda:	f04f 0900 	mov.w	r9, #0
 800cbde:	e7b8      	b.n	800cb52 <__gethex+0x1b6>
 800cbe0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800cbe4:	42bd      	cmp	r5, r7
 800cbe6:	dd6f      	ble.n	800ccc8 <__gethex+0x32c>
 800cbe8:	1bed      	subs	r5, r5, r7
 800cbea:	42ae      	cmp	r6, r5
 800cbec:	dc34      	bgt.n	800cc58 <__gethex+0x2bc>
 800cbee:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800cbf2:	2b02      	cmp	r3, #2
 800cbf4:	d022      	beq.n	800cc3c <__gethex+0x2a0>
 800cbf6:	2b03      	cmp	r3, #3
 800cbf8:	d024      	beq.n	800cc44 <__gethex+0x2a8>
 800cbfa:	2b01      	cmp	r3, #1
 800cbfc:	d115      	bne.n	800cc2a <__gethex+0x28e>
 800cbfe:	42ae      	cmp	r6, r5
 800cc00:	d113      	bne.n	800cc2a <__gethex+0x28e>
 800cc02:	2e01      	cmp	r6, #1
 800cc04:	d10b      	bne.n	800cc1e <__gethex+0x282>
 800cc06:	9a02      	ldr	r2, [sp, #8]
 800cc08:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800cc0c:	6013      	str	r3, [r2, #0]
 800cc0e:	2301      	movs	r3, #1
 800cc10:	6123      	str	r3, [r4, #16]
 800cc12:	f8ca 3000 	str.w	r3, [sl]
 800cc16:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cc18:	2562      	movs	r5, #98	@ 0x62
 800cc1a:	601c      	str	r4, [r3, #0]
 800cc1c:	e73a      	b.n	800ca94 <__gethex+0xf8>
 800cc1e:	1e71      	subs	r1, r6, #1
 800cc20:	4620      	mov	r0, r4
 800cc22:	f000 fe74 	bl	800d90e <__any_on>
 800cc26:	2800      	cmp	r0, #0
 800cc28:	d1ed      	bne.n	800cc06 <__gethex+0x26a>
 800cc2a:	9801      	ldr	r0, [sp, #4]
 800cc2c:	4621      	mov	r1, r4
 800cc2e:	f000 fa1d 	bl	800d06c <_Bfree>
 800cc32:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800cc34:	2300      	movs	r3, #0
 800cc36:	6013      	str	r3, [r2, #0]
 800cc38:	2550      	movs	r5, #80	@ 0x50
 800cc3a:	e72b      	b.n	800ca94 <__gethex+0xf8>
 800cc3c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cc3e:	2b00      	cmp	r3, #0
 800cc40:	d1f3      	bne.n	800cc2a <__gethex+0x28e>
 800cc42:	e7e0      	b.n	800cc06 <__gethex+0x26a>
 800cc44:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cc46:	2b00      	cmp	r3, #0
 800cc48:	d1dd      	bne.n	800cc06 <__gethex+0x26a>
 800cc4a:	e7ee      	b.n	800cc2a <__gethex+0x28e>
 800cc4c:	08010344 	.word	0x08010344
 800cc50:	08010600 	.word	0x08010600
 800cc54:	08010611 	.word	0x08010611
 800cc58:	1e6f      	subs	r7, r5, #1
 800cc5a:	f1b9 0f00 	cmp.w	r9, #0
 800cc5e:	d130      	bne.n	800ccc2 <__gethex+0x326>
 800cc60:	b127      	cbz	r7, 800cc6c <__gethex+0x2d0>
 800cc62:	4639      	mov	r1, r7
 800cc64:	4620      	mov	r0, r4
 800cc66:	f000 fe52 	bl	800d90e <__any_on>
 800cc6a:	4681      	mov	r9, r0
 800cc6c:	117a      	asrs	r2, r7, #5
 800cc6e:	2301      	movs	r3, #1
 800cc70:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800cc74:	f007 071f 	and.w	r7, r7, #31
 800cc78:	40bb      	lsls	r3, r7
 800cc7a:	4213      	tst	r3, r2
 800cc7c:	4629      	mov	r1, r5
 800cc7e:	4620      	mov	r0, r4
 800cc80:	bf18      	it	ne
 800cc82:	f049 0902 	orrne.w	r9, r9, #2
 800cc86:	f7ff fe21 	bl	800c8cc <rshift>
 800cc8a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800cc8e:	1b76      	subs	r6, r6, r5
 800cc90:	2502      	movs	r5, #2
 800cc92:	f1b9 0f00 	cmp.w	r9, #0
 800cc96:	d047      	beq.n	800cd28 <__gethex+0x38c>
 800cc98:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800cc9c:	2b02      	cmp	r3, #2
 800cc9e:	d015      	beq.n	800cccc <__gethex+0x330>
 800cca0:	2b03      	cmp	r3, #3
 800cca2:	d017      	beq.n	800ccd4 <__gethex+0x338>
 800cca4:	2b01      	cmp	r3, #1
 800cca6:	d109      	bne.n	800ccbc <__gethex+0x320>
 800cca8:	f019 0f02 	tst.w	r9, #2
 800ccac:	d006      	beq.n	800ccbc <__gethex+0x320>
 800ccae:	f8da 3000 	ldr.w	r3, [sl]
 800ccb2:	ea49 0903 	orr.w	r9, r9, r3
 800ccb6:	f019 0f01 	tst.w	r9, #1
 800ccba:	d10e      	bne.n	800ccda <__gethex+0x33e>
 800ccbc:	f045 0510 	orr.w	r5, r5, #16
 800ccc0:	e032      	b.n	800cd28 <__gethex+0x38c>
 800ccc2:	f04f 0901 	mov.w	r9, #1
 800ccc6:	e7d1      	b.n	800cc6c <__gethex+0x2d0>
 800ccc8:	2501      	movs	r5, #1
 800ccca:	e7e2      	b.n	800cc92 <__gethex+0x2f6>
 800cccc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ccce:	f1c3 0301 	rsb	r3, r3, #1
 800ccd2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800ccd4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ccd6:	2b00      	cmp	r3, #0
 800ccd8:	d0f0      	beq.n	800ccbc <__gethex+0x320>
 800ccda:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800ccde:	f104 0314 	add.w	r3, r4, #20
 800cce2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800cce6:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800ccea:	f04f 0c00 	mov.w	ip, #0
 800ccee:	4618      	mov	r0, r3
 800ccf0:	f853 2b04 	ldr.w	r2, [r3], #4
 800ccf4:	f1b2 3fff 	cmp.w	r2, #4294967295
 800ccf8:	d01b      	beq.n	800cd32 <__gethex+0x396>
 800ccfa:	3201      	adds	r2, #1
 800ccfc:	6002      	str	r2, [r0, #0]
 800ccfe:	2d02      	cmp	r5, #2
 800cd00:	f104 0314 	add.w	r3, r4, #20
 800cd04:	d13c      	bne.n	800cd80 <__gethex+0x3e4>
 800cd06:	f8d8 2000 	ldr.w	r2, [r8]
 800cd0a:	3a01      	subs	r2, #1
 800cd0c:	42b2      	cmp	r2, r6
 800cd0e:	d109      	bne.n	800cd24 <__gethex+0x388>
 800cd10:	1171      	asrs	r1, r6, #5
 800cd12:	2201      	movs	r2, #1
 800cd14:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800cd18:	f006 061f 	and.w	r6, r6, #31
 800cd1c:	fa02 f606 	lsl.w	r6, r2, r6
 800cd20:	421e      	tst	r6, r3
 800cd22:	d13a      	bne.n	800cd9a <__gethex+0x3fe>
 800cd24:	f045 0520 	orr.w	r5, r5, #32
 800cd28:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cd2a:	601c      	str	r4, [r3, #0]
 800cd2c:	9b02      	ldr	r3, [sp, #8]
 800cd2e:	601f      	str	r7, [r3, #0]
 800cd30:	e6b0      	b.n	800ca94 <__gethex+0xf8>
 800cd32:	4299      	cmp	r1, r3
 800cd34:	f843 cc04 	str.w	ip, [r3, #-4]
 800cd38:	d8d9      	bhi.n	800ccee <__gethex+0x352>
 800cd3a:	68a3      	ldr	r3, [r4, #8]
 800cd3c:	459b      	cmp	fp, r3
 800cd3e:	db17      	blt.n	800cd70 <__gethex+0x3d4>
 800cd40:	6861      	ldr	r1, [r4, #4]
 800cd42:	9801      	ldr	r0, [sp, #4]
 800cd44:	3101      	adds	r1, #1
 800cd46:	f000 f951 	bl	800cfec <_Balloc>
 800cd4a:	4681      	mov	r9, r0
 800cd4c:	b918      	cbnz	r0, 800cd56 <__gethex+0x3ba>
 800cd4e:	4b1a      	ldr	r3, [pc, #104]	@ (800cdb8 <__gethex+0x41c>)
 800cd50:	4602      	mov	r2, r0
 800cd52:	2184      	movs	r1, #132	@ 0x84
 800cd54:	e6c5      	b.n	800cae2 <__gethex+0x146>
 800cd56:	6922      	ldr	r2, [r4, #16]
 800cd58:	3202      	adds	r2, #2
 800cd5a:	f104 010c 	add.w	r1, r4, #12
 800cd5e:	0092      	lsls	r2, r2, #2
 800cd60:	300c      	adds	r0, #12
 800cd62:	f7fe fef7 	bl	800bb54 <memcpy>
 800cd66:	4621      	mov	r1, r4
 800cd68:	9801      	ldr	r0, [sp, #4]
 800cd6a:	f000 f97f 	bl	800d06c <_Bfree>
 800cd6e:	464c      	mov	r4, r9
 800cd70:	6923      	ldr	r3, [r4, #16]
 800cd72:	1c5a      	adds	r2, r3, #1
 800cd74:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800cd78:	6122      	str	r2, [r4, #16]
 800cd7a:	2201      	movs	r2, #1
 800cd7c:	615a      	str	r2, [r3, #20]
 800cd7e:	e7be      	b.n	800ccfe <__gethex+0x362>
 800cd80:	6922      	ldr	r2, [r4, #16]
 800cd82:	455a      	cmp	r2, fp
 800cd84:	dd0b      	ble.n	800cd9e <__gethex+0x402>
 800cd86:	2101      	movs	r1, #1
 800cd88:	4620      	mov	r0, r4
 800cd8a:	f7ff fd9f 	bl	800c8cc <rshift>
 800cd8e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800cd92:	3701      	adds	r7, #1
 800cd94:	42bb      	cmp	r3, r7
 800cd96:	f6ff aee0 	blt.w	800cb5a <__gethex+0x1be>
 800cd9a:	2501      	movs	r5, #1
 800cd9c:	e7c2      	b.n	800cd24 <__gethex+0x388>
 800cd9e:	f016 061f 	ands.w	r6, r6, #31
 800cda2:	d0fa      	beq.n	800cd9a <__gethex+0x3fe>
 800cda4:	4453      	add	r3, sl
 800cda6:	f1c6 0620 	rsb	r6, r6, #32
 800cdaa:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800cdae:	f000 fa0f 	bl	800d1d0 <__hi0bits>
 800cdb2:	42b0      	cmp	r0, r6
 800cdb4:	dbe7      	blt.n	800cd86 <__gethex+0x3ea>
 800cdb6:	e7f0      	b.n	800cd9a <__gethex+0x3fe>
 800cdb8:	08010600 	.word	0x08010600

0800cdbc <L_shift>:
 800cdbc:	f1c2 0208 	rsb	r2, r2, #8
 800cdc0:	0092      	lsls	r2, r2, #2
 800cdc2:	b570      	push	{r4, r5, r6, lr}
 800cdc4:	f1c2 0620 	rsb	r6, r2, #32
 800cdc8:	6843      	ldr	r3, [r0, #4]
 800cdca:	6804      	ldr	r4, [r0, #0]
 800cdcc:	fa03 f506 	lsl.w	r5, r3, r6
 800cdd0:	432c      	orrs	r4, r5
 800cdd2:	40d3      	lsrs	r3, r2
 800cdd4:	6004      	str	r4, [r0, #0]
 800cdd6:	f840 3f04 	str.w	r3, [r0, #4]!
 800cdda:	4288      	cmp	r0, r1
 800cddc:	d3f4      	bcc.n	800cdc8 <L_shift+0xc>
 800cdde:	bd70      	pop	{r4, r5, r6, pc}

0800cde0 <__match>:
 800cde0:	b530      	push	{r4, r5, lr}
 800cde2:	6803      	ldr	r3, [r0, #0]
 800cde4:	3301      	adds	r3, #1
 800cde6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cdea:	b914      	cbnz	r4, 800cdf2 <__match+0x12>
 800cdec:	6003      	str	r3, [r0, #0]
 800cdee:	2001      	movs	r0, #1
 800cdf0:	bd30      	pop	{r4, r5, pc}
 800cdf2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cdf6:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800cdfa:	2d19      	cmp	r5, #25
 800cdfc:	bf98      	it	ls
 800cdfe:	3220      	addls	r2, #32
 800ce00:	42a2      	cmp	r2, r4
 800ce02:	d0f0      	beq.n	800cde6 <__match+0x6>
 800ce04:	2000      	movs	r0, #0
 800ce06:	e7f3      	b.n	800cdf0 <__match+0x10>

0800ce08 <__hexnan>:
 800ce08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce0c:	680b      	ldr	r3, [r1, #0]
 800ce0e:	6801      	ldr	r1, [r0, #0]
 800ce10:	115e      	asrs	r6, r3, #5
 800ce12:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800ce16:	f013 031f 	ands.w	r3, r3, #31
 800ce1a:	b087      	sub	sp, #28
 800ce1c:	bf18      	it	ne
 800ce1e:	3604      	addne	r6, #4
 800ce20:	2500      	movs	r5, #0
 800ce22:	1f37      	subs	r7, r6, #4
 800ce24:	4682      	mov	sl, r0
 800ce26:	4690      	mov	r8, r2
 800ce28:	9301      	str	r3, [sp, #4]
 800ce2a:	f846 5c04 	str.w	r5, [r6, #-4]
 800ce2e:	46b9      	mov	r9, r7
 800ce30:	463c      	mov	r4, r7
 800ce32:	9502      	str	r5, [sp, #8]
 800ce34:	46ab      	mov	fp, r5
 800ce36:	784a      	ldrb	r2, [r1, #1]
 800ce38:	1c4b      	adds	r3, r1, #1
 800ce3a:	9303      	str	r3, [sp, #12]
 800ce3c:	b342      	cbz	r2, 800ce90 <__hexnan+0x88>
 800ce3e:	4610      	mov	r0, r2
 800ce40:	9105      	str	r1, [sp, #20]
 800ce42:	9204      	str	r2, [sp, #16]
 800ce44:	f7ff fd94 	bl	800c970 <__hexdig_fun>
 800ce48:	2800      	cmp	r0, #0
 800ce4a:	d151      	bne.n	800cef0 <__hexnan+0xe8>
 800ce4c:	9a04      	ldr	r2, [sp, #16]
 800ce4e:	9905      	ldr	r1, [sp, #20]
 800ce50:	2a20      	cmp	r2, #32
 800ce52:	d818      	bhi.n	800ce86 <__hexnan+0x7e>
 800ce54:	9b02      	ldr	r3, [sp, #8]
 800ce56:	459b      	cmp	fp, r3
 800ce58:	dd13      	ble.n	800ce82 <__hexnan+0x7a>
 800ce5a:	454c      	cmp	r4, r9
 800ce5c:	d206      	bcs.n	800ce6c <__hexnan+0x64>
 800ce5e:	2d07      	cmp	r5, #7
 800ce60:	dc04      	bgt.n	800ce6c <__hexnan+0x64>
 800ce62:	462a      	mov	r2, r5
 800ce64:	4649      	mov	r1, r9
 800ce66:	4620      	mov	r0, r4
 800ce68:	f7ff ffa8 	bl	800cdbc <L_shift>
 800ce6c:	4544      	cmp	r4, r8
 800ce6e:	d952      	bls.n	800cf16 <__hexnan+0x10e>
 800ce70:	2300      	movs	r3, #0
 800ce72:	f1a4 0904 	sub.w	r9, r4, #4
 800ce76:	f844 3c04 	str.w	r3, [r4, #-4]
 800ce7a:	f8cd b008 	str.w	fp, [sp, #8]
 800ce7e:	464c      	mov	r4, r9
 800ce80:	461d      	mov	r5, r3
 800ce82:	9903      	ldr	r1, [sp, #12]
 800ce84:	e7d7      	b.n	800ce36 <__hexnan+0x2e>
 800ce86:	2a29      	cmp	r2, #41	@ 0x29
 800ce88:	d157      	bne.n	800cf3a <__hexnan+0x132>
 800ce8a:	3102      	adds	r1, #2
 800ce8c:	f8ca 1000 	str.w	r1, [sl]
 800ce90:	f1bb 0f00 	cmp.w	fp, #0
 800ce94:	d051      	beq.n	800cf3a <__hexnan+0x132>
 800ce96:	454c      	cmp	r4, r9
 800ce98:	d206      	bcs.n	800cea8 <__hexnan+0xa0>
 800ce9a:	2d07      	cmp	r5, #7
 800ce9c:	dc04      	bgt.n	800cea8 <__hexnan+0xa0>
 800ce9e:	462a      	mov	r2, r5
 800cea0:	4649      	mov	r1, r9
 800cea2:	4620      	mov	r0, r4
 800cea4:	f7ff ff8a 	bl	800cdbc <L_shift>
 800cea8:	4544      	cmp	r4, r8
 800ceaa:	d936      	bls.n	800cf1a <__hexnan+0x112>
 800ceac:	f1a8 0204 	sub.w	r2, r8, #4
 800ceb0:	4623      	mov	r3, r4
 800ceb2:	f853 1b04 	ldr.w	r1, [r3], #4
 800ceb6:	f842 1f04 	str.w	r1, [r2, #4]!
 800ceba:	429f      	cmp	r7, r3
 800cebc:	d2f9      	bcs.n	800ceb2 <__hexnan+0xaa>
 800cebe:	1b3b      	subs	r3, r7, r4
 800cec0:	f023 0303 	bic.w	r3, r3, #3
 800cec4:	3304      	adds	r3, #4
 800cec6:	3401      	adds	r4, #1
 800cec8:	3e03      	subs	r6, #3
 800ceca:	42b4      	cmp	r4, r6
 800cecc:	bf88      	it	hi
 800cece:	2304      	movhi	r3, #4
 800ced0:	4443      	add	r3, r8
 800ced2:	2200      	movs	r2, #0
 800ced4:	f843 2b04 	str.w	r2, [r3], #4
 800ced8:	429f      	cmp	r7, r3
 800ceda:	d2fb      	bcs.n	800ced4 <__hexnan+0xcc>
 800cedc:	683b      	ldr	r3, [r7, #0]
 800cede:	b91b      	cbnz	r3, 800cee8 <__hexnan+0xe0>
 800cee0:	4547      	cmp	r7, r8
 800cee2:	d128      	bne.n	800cf36 <__hexnan+0x12e>
 800cee4:	2301      	movs	r3, #1
 800cee6:	603b      	str	r3, [r7, #0]
 800cee8:	2005      	movs	r0, #5
 800ceea:	b007      	add	sp, #28
 800ceec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cef0:	3501      	adds	r5, #1
 800cef2:	2d08      	cmp	r5, #8
 800cef4:	f10b 0b01 	add.w	fp, fp, #1
 800cef8:	dd06      	ble.n	800cf08 <__hexnan+0x100>
 800cefa:	4544      	cmp	r4, r8
 800cefc:	d9c1      	bls.n	800ce82 <__hexnan+0x7a>
 800cefe:	2300      	movs	r3, #0
 800cf00:	f844 3c04 	str.w	r3, [r4, #-4]
 800cf04:	2501      	movs	r5, #1
 800cf06:	3c04      	subs	r4, #4
 800cf08:	6822      	ldr	r2, [r4, #0]
 800cf0a:	f000 000f 	and.w	r0, r0, #15
 800cf0e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800cf12:	6020      	str	r0, [r4, #0]
 800cf14:	e7b5      	b.n	800ce82 <__hexnan+0x7a>
 800cf16:	2508      	movs	r5, #8
 800cf18:	e7b3      	b.n	800ce82 <__hexnan+0x7a>
 800cf1a:	9b01      	ldr	r3, [sp, #4]
 800cf1c:	2b00      	cmp	r3, #0
 800cf1e:	d0dd      	beq.n	800cedc <__hexnan+0xd4>
 800cf20:	f1c3 0320 	rsb	r3, r3, #32
 800cf24:	f04f 32ff 	mov.w	r2, #4294967295
 800cf28:	40da      	lsrs	r2, r3
 800cf2a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800cf2e:	4013      	ands	r3, r2
 800cf30:	f846 3c04 	str.w	r3, [r6, #-4]
 800cf34:	e7d2      	b.n	800cedc <__hexnan+0xd4>
 800cf36:	3f04      	subs	r7, #4
 800cf38:	e7d0      	b.n	800cedc <__hexnan+0xd4>
 800cf3a:	2004      	movs	r0, #4
 800cf3c:	e7d5      	b.n	800ceea <__hexnan+0xe2>
	...

0800cf40 <_findenv_r>:
 800cf40:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf44:	f8df a06c 	ldr.w	sl, [pc, #108]	@ 800cfb4 <_findenv_r+0x74>
 800cf48:	4606      	mov	r6, r0
 800cf4a:	4689      	mov	r9, r1
 800cf4c:	4617      	mov	r7, r2
 800cf4e:	f001 fb67 	bl	800e620 <__env_lock>
 800cf52:	f8da 4000 	ldr.w	r4, [sl]
 800cf56:	b134      	cbz	r4, 800cf66 <_findenv_r+0x26>
 800cf58:	464b      	mov	r3, r9
 800cf5a:	4698      	mov	r8, r3
 800cf5c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cf60:	b13a      	cbz	r2, 800cf72 <_findenv_r+0x32>
 800cf62:	2a3d      	cmp	r2, #61	@ 0x3d
 800cf64:	d1f9      	bne.n	800cf5a <_findenv_r+0x1a>
 800cf66:	4630      	mov	r0, r6
 800cf68:	f001 fb60 	bl	800e62c <__env_unlock>
 800cf6c:	2000      	movs	r0, #0
 800cf6e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf72:	eba8 0809 	sub.w	r8, r8, r9
 800cf76:	46a3      	mov	fp, r4
 800cf78:	f854 0b04 	ldr.w	r0, [r4], #4
 800cf7c:	2800      	cmp	r0, #0
 800cf7e:	d0f2      	beq.n	800cf66 <_findenv_r+0x26>
 800cf80:	4642      	mov	r2, r8
 800cf82:	4649      	mov	r1, r9
 800cf84:	f7fd ffa7 	bl	800aed6 <strncmp>
 800cf88:	2800      	cmp	r0, #0
 800cf8a:	d1f4      	bne.n	800cf76 <_findenv_r+0x36>
 800cf8c:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800cf90:	eb03 0508 	add.w	r5, r3, r8
 800cf94:	f813 3008 	ldrb.w	r3, [r3, r8]
 800cf98:	2b3d      	cmp	r3, #61	@ 0x3d
 800cf9a:	d1ec      	bne.n	800cf76 <_findenv_r+0x36>
 800cf9c:	f8da 3000 	ldr.w	r3, [sl]
 800cfa0:	ebab 0303 	sub.w	r3, fp, r3
 800cfa4:	109b      	asrs	r3, r3, #2
 800cfa6:	4630      	mov	r0, r6
 800cfa8:	603b      	str	r3, [r7, #0]
 800cfaa:	f001 fb3f 	bl	800e62c <__env_unlock>
 800cfae:	1c68      	adds	r0, r5, #1
 800cfb0:	e7dd      	b.n	800cf6e <_findenv_r+0x2e>
 800cfb2:	bf00      	nop
 800cfb4:	20000008 	.word	0x20000008

0800cfb8 <_getenv_r>:
 800cfb8:	b507      	push	{r0, r1, r2, lr}
 800cfba:	aa01      	add	r2, sp, #4
 800cfbc:	f7ff ffc0 	bl	800cf40 <_findenv_r>
 800cfc0:	b003      	add	sp, #12
 800cfc2:	f85d fb04 	ldr.w	pc, [sp], #4

0800cfc6 <__ascii_mbtowc>:
 800cfc6:	b082      	sub	sp, #8
 800cfc8:	b901      	cbnz	r1, 800cfcc <__ascii_mbtowc+0x6>
 800cfca:	a901      	add	r1, sp, #4
 800cfcc:	b142      	cbz	r2, 800cfe0 <__ascii_mbtowc+0x1a>
 800cfce:	b14b      	cbz	r3, 800cfe4 <__ascii_mbtowc+0x1e>
 800cfd0:	7813      	ldrb	r3, [r2, #0]
 800cfd2:	600b      	str	r3, [r1, #0]
 800cfd4:	7812      	ldrb	r2, [r2, #0]
 800cfd6:	1e10      	subs	r0, r2, #0
 800cfd8:	bf18      	it	ne
 800cfda:	2001      	movne	r0, #1
 800cfdc:	b002      	add	sp, #8
 800cfde:	4770      	bx	lr
 800cfe0:	4610      	mov	r0, r2
 800cfe2:	e7fb      	b.n	800cfdc <__ascii_mbtowc+0x16>
 800cfe4:	f06f 0001 	mvn.w	r0, #1
 800cfe8:	e7f8      	b.n	800cfdc <__ascii_mbtowc+0x16>
	...

0800cfec <_Balloc>:
 800cfec:	b570      	push	{r4, r5, r6, lr}
 800cfee:	69c6      	ldr	r6, [r0, #28]
 800cff0:	4604      	mov	r4, r0
 800cff2:	460d      	mov	r5, r1
 800cff4:	b976      	cbnz	r6, 800d014 <_Balloc+0x28>
 800cff6:	2010      	movs	r0, #16
 800cff8:	f7fb ffe0 	bl	8008fbc <malloc>
 800cffc:	4602      	mov	r2, r0
 800cffe:	61e0      	str	r0, [r4, #28]
 800d000:	b920      	cbnz	r0, 800d00c <_Balloc+0x20>
 800d002:	4b18      	ldr	r3, [pc, #96]	@ (800d064 <_Balloc+0x78>)
 800d004:	4818      	ldr	r0, [pc, #96]	@ (800d068 <_Balloc+0x7c>)
 800d006:	216b      	movs	r1, #107	@ 0x6b
 800d008:	f001 fad8 	bl	800e5bc <__assert_func>
 800d00c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d010:	6006      	str	r6, [r0, #0]
 800d012:	60c6      	str	r6, [r0, #12]
 800d014:	69e6      	ldr	r6, [r4, #28]
 800d016:	68f3      	ldr	r3, [r6, #12]
 800d018:	b183      	cbz	r3, 800d03c <_Balloc+0x50>
 800d01a:	69e3      	ldr	r3, [r4, #28]
 800d01c:	68db      	ldr	r3, [r3, #12]
 800d01e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d022:	b9b8      	cbnz	r0, 800d054 <_Balloc+0x68>
 800d024:	2101      	movs	r1, #1
 800d026:	fa01 f605 	lsl.w	r6, r1, r5
 800d02a:	1d72      	adds	r2, r6, #5
 800d02c:	0092      	lsls	r2, r2, #2
 800d02e:	4620      	mov	r0, r4
 800d030:	f001 fae2 	bl	800e5f8 <_calloc_r>
 800d034:	b160      	cbz	r0, 800d050 <_Balloc+0x64>
 800d036:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d03a:	e00e      	b.n	800d05a <_Balloc+0x6e>
 800d03c:	2221      	movs	r2, #33	@ 0x21
 800d03e:	2104      	movs	r1, #4
 800d040:	4620      	mov	r0, r4
 800d042:	f001 fad9 	bl	800e5f8 <_calloc_r>
 800d046:	69e3      	ldr	r3, [r4, #28]
 800d048:	60f0      	str	r0, [r6, #12]
 800d04a:	68db      	ldr	r3, [r3, #12]
 800d04c:	2b00      	cmp	r3, #0
 800d04e:	d1e4      	bne.n	800d01a <_Balloc+0x2e>
 800d050:	2000      	movs	r0, #0
 800d052:	bd70      	pop	{r4, r5, r6, pc}
 800d054:	6802      	ldr	r2, [r0, #0]
 800d056:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d05a:	2300      	movs	r3, #0
 800d05c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d060:	e7f7      	b.n	800d052 <_Balloc+0x66>
 800d062:	bf00      	nop
 800d064:	08010591 	.word	0x08010591
 800d068:	08010671 	.word	0x08010671

0800d06c <_Bfree>:
 800d06c:	b570      	push	{r4, r5, r6, lr}
 800d06e:	69c6      	ldr	r6, [r0, #28]
 800d070:	4605      	mov	r5, r0
 800d072:	460c      	mov	r4, r1
 800d074:	b976      	cbnz	r6, 800d094 <_Bfree+0x28>
 800d076:	2010      	movs	r0, #16
 800d078:	f7fb ffa0 	bl	8008fbc <malloc>
 800d07c:	4602      	mov	r2, r0
 800d07e:	61e8      	str	r0, [r5, #28]
 800d080:	b920      	cbnz	r0, 800d08c <_Bfree+0x20>
 800d082:	4b09      	ldr	r3, [pc, #36]	@ (800d0a8 <_Bfree+0x3c>)
 800d084:	4809      	ldr	r0, [pc, #36]	@ (800d0ac <_Bfree+0x40>)
 800d086:	218f      	movs	r1, #143	@ 0x8f
 800d088:	f001 fa98 	bl	800e5bc <__assert_func>
 800d08c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d090:	6006      	str	r6, [r0, #0]
 800d092:	60c6      	str	r6, [r0, #12]
 800d094:	b13c      	cbz	r4, 800d0a6 <_Bfree+0x3a>
 800d096:	69eb      	ldr	r3, [r5, #28]
 800d098:	6862      	ldr	r2, [r4, #4]
 800d09a:	68db      	ldr	r3, [r3, #12]
 800d09c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d0a0:	6021      	str	r1, [r4, #0]
 800d0a2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d0a6:	bd70      	pop	{r4, r5, r6, pc}
 800d0a8:	08010591 	.word	0x08010591
 800d0ac:	08010671 	.word	0x08010671

0800d0b0 <__multadd>:
 800d0b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d0b4:	690d      	ldr	r5, [r1, #16]
 800d0b6:	4607      	mov	r7, r0
 800d0b8:	460c      	mov	r4, r1
 800d0ba:	461e      	mov	r6, r3
 800d0bc:	f101 0c14 	add.w	ip, r1, #20
 800d0c0:	2000      	movs	r0, #0
 800d0c2:	f8dc 3000 	ldr.w	r3, [ip]
 800d0c6:	b299      	uxth	r1, r3
 800d0c8:	fb02 6101 	mla	r1, r2, r1, r6
 800d0cc:	0c1e      	lsrs	r6, r3, #16
 800d0ce:	0c0b      	lsrs	r3, r1, #16
 800d0d0:	fb02 3306 	mla	r3, r2, r6, r3
 800d0d4:	b289      	uxth	r1, r1
 800d0d6:	3001      	adds	r0, #1
 800d0d8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d0dc:	4285      	cmp	r5, r0
 800d0de:	f84c 1b04 	str.w	r1, [ip], #4
 800d0e2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d0e6:	dcec      	bgt.n	800d0c2 <__multadd+0x12>
 800d0e8:	b30e      	cbz	r6, 800d12e <__multadd+0x7e>
 800d0ea:	68a3      	ldr	r3, [r4, #8]
 800d0ec:	42ab      	cmp	r3, r5
 800d0ee:	dc19      	bgt.n	800d124 <__multadd+0x74>
 800d0f0:	6861      	ldr	r1, [r4, #4]
 800d0f2:	4638      	mov	r0, r7
 800d0f4:	3101      	adds	r1, #1
 800d0f6:	f7ff ff79 	bl	800cfec <_Balloc>
 800d0fa:	4680      	mov	r8, r0
 800d0fc:	b928      	cbnz	r0, 800d10a <__multadd+0x5a>
 800d0fe:	4602      	mov	r2, r0
 800d100:	4b0c      	ldr	r3, [pc, #48]	@ (800d134 <__multadd+0x84>)
 800d102:	480d      	ldr	r0, [pc, #52]	@ (800d138 <__multadd+0x88>)
 800d104:	21ba      	movs	r1, #186	@ 0xba
 800d106:	f001 fa59 	bl	800e5bc <__assert_func>
 800d10a:	6922      	ldr	r2, [r4, #16]
 800d10c:	3202      	adds	r2, #2
 800d10e:	f104 010c 	add.w	r1, r4, #12
 800d112:	0092      	lsls	r2, r2, #2
 800d114:	300c      	adds	r0, #12
 800d116:	f7fe fd1d 	bl	800bb54 <memcpy>
 800d11a:	4621      	mov	r1, r4
 800d11c:	4638      	mov	r0, r7
 800d11e:	f7ff ffa5 	bl	800d06c <_Bfree>
 800d122:	4644      	mov	r4, r8
 800d124:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d128:	3501      	adds	r5, #1
 800d12a:	615e      	str	r6, [r3, #20]
 800d12c:	6125      	str	r5, [r4, #16]
 800d12e:	4620      	mov	r0, r4
 800d130:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d134:	08010600 	.word	0x08010600
 800d138:	08010671 	.word	0x08010671

0800d13c <__s2b>:
 800d13c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d140:	460c      	mov	r4, r1
 800d142:	4615      	mov	r5, r2
 800d144:	461f      	mov	r7, r3
 800d146:	2209      	movs	r2, #9
 800d148:	3308      	adds	r3, #8
 800d14a:	4606      	mov	r6, r0
 800d14c:	fb93 f3f2 	sdiv	r3, r3, r2
 800d150:	2100      	movs	r1, #0
 800d152:	2201      	movs	r2, #1
 800d154:	429a      	cmp	r2, r3
 800d156:	db09      	blt.n	800d16c <__s2b+0x30>
 800d158:	4630      	mov	r0, r6
 800d15a:	f7ff ff47 	bl	800cfec <_Balloc>
 800d15e:	b940      	cbnz	r0, 800d172 <__s2b+0x36>
 800d160:	4602      	mov	r2, r0
 800d162:	4b19      	ldr	r3, [pc, #100]	@ (800d1c8 <__s2b+0x8c>)
 800d164:	4819      	ldr	r0, [pc, #100]	@ (800d1cc <__s2b+0x90>)
 800d166:	21d3      	movs	r1, #211	@ 0xd3
 800d168:	f001 fa28 	bl	800e5bc <__assert_func>
 800d16c:	0052      	lsls	r2, r2, #1
 800d16e:	3101      	adds	r1, #1
 800d170:	e7f0      	b.n	800d154 <__s2b+0x18>
 800d172:	9b08      	ldr	r3, [sp, #32]
 800d174:	6143      	str	r3, [r0, #20]
 800d176:	2d09      	cmp	r5, #9
 800d178:	f04f 0301 	mov.w	r3, #1
 800d17c:	6103      	str	r3, [r0, #16]
 800d17e:	dd16      	ble.n	800d1ae <__s2b+0x72>
 800d180:	f104 0909 	add.w	r9, r4, #9
 800d184:	46c8      	mov	r8, r9
 800d186:	442c      	add	r4, r5
 800d188:	f818 3b01 	ldrb.w	r3, [r8], #1
 800d18c:	4601      	mov	r1, r0
 800d18e:	3b30      	subs	r3, #48	@ 0x30
 800d190:	220a      	movs	r2, #10
 800d192:	4630      	mov	r0, r6
 800d194:	f7ff ff8c 	bl	800d0b0 <__multadd>
 800d198:	45a0      	cmp	r8, r4
 800d19a:	d1f5      	bne.n	800d188 <__s2b+0x4c>
 800d19c:	f1a5 0408 	sub.w	r4, r5, #8
 800d1a0:	444c      	add	r4, r9
 800d1a2:	1b2d      	subs	r5, r5, r4
 800d1a4:	1963      	adds	r3, r4, r5
 800d1a6:	42bb      	cmp	r3, r7
 800d1a8:	db04      	blt.n	800d1b4 <__s2b+0x78>
 800d1aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d1ae:	340a      	adds	r4, #10
 800d1b0:	2509      	movs	r5, #9
 800d1b2:	e7f6      	b.n	800d1a2 <__s2b+0x66>
 800d1b4:	f814 3b01 	ldrb.w	r3, [r4], #1
 800d1b8:	4601      	mov	r1, r0
 800d1ba:	3b30      	subs	r3, #48	@ 0x30
 800d1bc:	220a      	movs	r2, #10
 800d1be:	4630      	mov	r0, r6
 800d1c0:	f7ff ff76 	bl	800d0b0 <__multadd>
 800d1c4:	e7ee      	b.n	800d1a4 <__s2b+0x68>
 800d1c6:	bf00      	nop
 800d1c8:	08010600 	.word	0x08010600
 800d1cc:	08010671 	.word	0x08010671

0800d1d0 <__hi0bits>:
 800d1d0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800d1d4:	4603      	mov	r3, r0
 800d1d6:	bf36      	itet	cc
 800d1d8:	0403      	lslcc	r3, r0, #16
 800d1da:	2000      	movcs	r0, #0
 800d1dc:	2010      	movcc	r0, #16
 800d1de:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800d1e2:	bf3c      	itt	cc
 800d1e4:	021b      	lslcc	r3, r3, #8
 800d1e6:	3008      	addcc	r0, #8
 800d1e8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d1ec:	bf3c      	itt	cc
 800d1ee:	011b      	lslcc	r3, r3, #4
 800d1f0:	3004      	addcc	r0, #4
 800d1f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d1f6:	bf3c      	itt	cc
 800d1f8:	009b      	lslcc	r3, r3, #2
 800d1fa:	3002      	addcc	r0, #2
 800d1fc:	2b00      	cmp	r3, #0
 800d1fe:	db05      	blt.n	800d20c <__hi0bits+0x3c>
 800d200:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800d204:	f100 0001 	add.w	r0, r0, #1
 800d208:	bf08      	it	eq
 800d20a:	2020      	moveq	r0, #32
 800d20c:	4770      	bx	lr

0800d20e <__lo0bits>:
 800d20e:	6803      	ldr	r3, [r0, #0]
 800d210:	4602      	mov	r2, r0
 800d212:	f013 0007 	ands.w	r0, r3, #7
 800d216:	d00b      	beq.n	800d230 <__lo0bits+0x22>
 800d218:	07d9      	lsls	r1, r3, #31
 800d21a:	d421      	bmi.n	800d260 <__lo0bits+0x52>
 800d21c:	0798      	lsls	r0, r3, #30
 800d21e:	bf49      	itett	mi
 800d220:	085b      	lsrmi	r3, r3, #1
 800d222:	089b      	lsrpl	r3, r3, #2
 800d224:	2001      	movmi	r0, #1
 800d226:	6013      	strmi	r3, [r2, #0]
 800d228:	bf5c      	itt	pl
 800d22a:	6013      	strpl	r3, [r2, #0]
 800d22c:	2002      	movpl	r0, #2
 800d22e:	4770      	bx	lr
 800d230:	b299      	uxth	r1, r3
 800d232:	b909      	cbnz	r1, 800d238 <__lo0bits+0x2a>
 800d234:	0c1b      	lsrs	r3, r3, #16
 800d236:	2010      	movs	r0, #16
 800d238:	b2d9      	uxtb	r1, r3
 800d23a:	b909      	cbnz	r1, 800d240 <__lo0bits+0x32>
 800d23c:	3008      	adds	r0, #8
 800d23e:	0a1b      	lsrs	r3, r3, #8
 800d240:	0719      	lsls	r1, r3, #28
 800d242:	bf04      	itt	eq
 800d244:	091b      	lsreq	r3, r3, #4
 800d246:	3004      	addeq	r0, #4
 800d248:	0799      	lsls	r1, r3, #30
 800d24a:	bf04      	itt	eq
 800d24c:	089b      	lsreq	r3, r3, #2
 800d24e:	3002      	addeq	r0, #2
 800d250:	07d9      	lsls	r1, r3, #31
 800d252:	d403      	bmi.n	800d25c <__lo0bits+0x4e>
 800d254:	085b      	lsrs	r3, r3, #1
 800d256:	f100 0001 	add.w	r0, r0, #1
 800d25a:	d003      	beq.n	800d264 <__lo0bits+0x56>
 800d25c:	6013      	str	r3, [r2, #0]
 800d25e:	4770      	bx	lr
 800d260:	2000      	movs	r0, #0
 800d262:	4770      	bx	lr
 800d264:	2020      	movs	r0, #32
 800d266:	4770      	bx	lr

0800d268 <__i2b>:
 800d268:	b510      	push	{r4, lr}
 800d26a:	460c      	mov	r4, r1
 800d26c:	2101      	movs	r1, #1
 800d26e:	f7ff febd 	bl	800cfec <_Balloc>
 800d272:	4602      	mov	r2, r0
 800d274:	b928      	cbnz	r0, 800d282 <__i2b+0x1a>
 800d276:	4b05      	ldr	r3, [pc, #20]	@ (800d28c <__i2b+0x24>)
 800d278:	4805      	ldr	r0, [pc, #20]	@ (800d290 <__i2b+0x28>)
 800d27a:	f240 1145 	movw	r1, #325	@ 0x145
 800d27e:	f001 f99d 	bl	800e5bc <__assert_func>
 800d282:	2301      	movs	r3, #1
 800d284:	6144      	str	r4, [r0, #20]
 800d286:	6103      	str	r3, [r0, #16]
 800d288:	bd10      	pop	{r4, pc}
 800d28a:	bf00      	nop
 800d28c:	08010600 	.word	0x08010600
 800d290:	08010671 	.word	0x08010671

0800d294 <__multiply>:
 800d294:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d298:	4614      	mov	r4, r2
 800d29a:	690a      	ldr	r2, [r1, #16]
 800d29c:	6923      	ldr	r3, [r4, #16]
 800d29e:	429a      	cmp	r2, r3
 800d2a0:	bfa8      	it	ge
 800d2a2:	4623      	movge	r3, r4
 800d2a4:	460f      	mov	r7, r1
 800d2a6:	bfa4      	itt	ge
 800d2a8:	460c      	movge	r4, r1
 800d2aa:	461f      	movge	r7, r3
 800d2ac:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800d2b0:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800d2b4:	68a3      	ldr	r3, [r4, #8]
 800d2b6:	6861      	ldr	r1, [r4, #4]
 800d2b8:	eb0a 0609 	add.w	r6, sl, r9
 800d2bc:	42b3      	cmp	r3, r6
 800d2be:	b085      	sub	sp, #20
 800d2c0:	bfb8      	it	lt
 800d2c2:	3101      	addlt	r1, #1
 800d2c4:	f7ff fe92 	bl	800cfec <_Balloc>
 800d2c8:	b930      	cbnz	r0, 800d2d8 <__multiply+0x44>
 800d2ca:	4602      	mov	r2, r0
 800d2cc:	4b44      	ldr	r3, [pc, #272]	@ (800d3e0 <__multiply+0x14c>)
 800d2ce:	4845      	ldr	r0, [pc, #276]	@ (800d3e4 <__multiply+0x150>)
 800d2d0:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800d2d4:	f001 f972 	bl	800e5bc <__assert_func>
 800d2d8:	f100 0514 	add.w	r5, r0, #20
 800d2dc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800d2e0:	462b      	mov	r3, r5
 800d2e2:	2200      	movs	r2, #0
 800d2e4:	4543      	cmp	r3, r8
 800d2e6:	d321      	bcc.n	800d32c <__multiply+0x98>
 800d2e8:	f107 0114 	add.w	r1, r7, #20
 800d2ec:	f104 0214 	add.w	r2, r4, #20
 800d2f0:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800d2f4:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800d2f8:	9302      	str	r3, [sp, #8]
 800d2fa:	1b13      	subs	r3, r2, r4
 800d2fc:	3b15      	subs	r3, #21
 800d2fe:	f023 0303 	bic.w	r3, r3, #3
 800d302:	3304      	adds	r3, #4
 800d304:	f104 0715 	add.w	r7, r4, #21
 800d308:	42ba      	cmp	r2, r7
 800d30a:	bf38      	it	cc
 800d30c:	2304      	movcc	r3, #4
 800d30e:	9301      	str	r3, [sp, #4]
 800d310:	9b02      	ldr	r3, [sp, #8]
 800d312:	9103      	str	r1, [sp, #12]
 800d314:	428b      	cmp	r3, r1
 800d316:	d80c      	bhi.n	800d332 <__multiply+0x9e>
 800d318:	2e00      	cmp	r6, #0
 800d31a:	dd03      	ble.n	800d324 <__multiply+0x90>
 800d31c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d320:	2b00      	cmp	r3, #0
 800d322:	d05b      	beq.n	800d3dc <__multiply+0x148>
 800d324:	6106      	str	r6, [r0, #16]
 800d326:	b005      	add	sp, #20
 800d328:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d32c:	f843 2b04 	str.w	r2, [r3], #4
 800d330:	e7d8      	b.n	800d2e4 <__multiply+0x50>
 800d332:	f8b1 a000 	ldrh.w	sl, [r1]
 800d336:	f1ba 0f00 	cmp.w	sl, #0
 800d33a:	d024      	beq.n	800d386 <__multiply+0xf2>
 800d33c:	f104 0e14 	add.w	lr, r4, #20
 800d340:	46a9      	mov	r9, r5
 800d342:	f04f 0c00 	mov.w	ip, #0
 800d346:	f85e 7b04 	ldr.w	r7, [lr], #4
 800d34a:	f8d9 3000 	ldr.w	r3, [r9]
 800d34e:	fa1f fb87 	uxth.w	fp, r7
 800d352:	b29b      	uxth	r3, r3
 800d354:	fb0a 330b 	mla	r3, sl, fp, r3
 800d358:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800d35c:	f8d9 7000 	ldr.w	r7, [r9]
 800d360:	4463      	add	r3, ip
 800d362:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800d366:	fb0a c70b 	mla	r7, sl, fp, ip
 800d36a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800d36e:	b29b      	uxth	r3, r3
 800d370:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800d374:	4572      	cmp	r2, lr
 800d376:	f849 3b04 	str.w	r3, [r9], #4
 800d37a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800d37e:	d8e2      	bhi.n	800d346 <__multiply+0xb2>
 800d380:	9b01      	ldr	r3, [sp, #4]
 800d382:	f845 c003 	str.w	ip, [r5, r3]
 800d386:	9b03      	ldr	r3, [sp, #12]
 800d388:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800d38c:	3104      	adds	r1, #4
 800d38e:	f1b9 0f00 	cmp.w	r9, #0
 800d392:	d021      	beq.n	800d3d8 <__multiply+0x144>
 800d394:	682b      	ldr	r3, [r5, #0]
 800d396:	f104 0c14 	add.w	ip, r4, #20
 800d39a:	46ae      	mov	lr, r5
 800d39c:	f04f 0a00 	mov.w	sl, #0
 800d3a0:	f8bc b000 	ldrh.w	fp, [ip]
 800d3a4:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800d3a8:	fb09 770b 	mla	r7, r9, fp, r7
 800d3ac:	4457      	add	r7, sl
 800d3ae:	b29b      	uxth	r3, r3
 800d3b0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800d3b4:	f84e 3b04 	str.w	r3, [lr], #4
 800d3b8:	f85c 3b04 	ldr.w	r3, [ip], #4
 800d3bc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d3c0:	f8be 3000 	ldrh.w	r3, [lr]
 800d3c4:	fb09 330a 	mla	r3, r9, sl, r3
 800d3c8:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800d3cc:	4562      	cmp	r2, ip
 800d3ce:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d3d2:	d8e5      	bhi.n	800d3a0 <__multiply+0x10c>
 800d3d4:	9f01      	ldr	r7, [sp, #4]
 800d3d6:	51eb      	str	r3, [r5, r7]
 800d3d8:	3504      	adds	r5, #4
 800d3da:	e799      	b.n	800d310 <__multiply+0x7c>
 800d3dc:	3e01      	subs	r6, #1
 800d3de:	e79b      	b.n	800d318 <__multiply+0x84>
 800d3e0:	08010600 	.word	0x08010600
 800d3e4:	08010671 	.word	0x08010671

0800d3e8 <__pow5mult>:
 800d3e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d3ec:	4615      	mov	r5, r2
 800d3ee:	f012 0203 	ands.w	r2, r2, #3
 800d3f2:	4607      	mov	r7, r0
 800d3f4:	460e      	mov	r6, r1
 800d3f6:	d007      	beq.n	800d408 <__pow5mult+0x20>
 800d3f8:	4c25      	ldr	r4, [pc, #148]	@ (800d490 <__pow5mult+0xa8>)
 800d3fa:	3a01      	subs	r2, #1
 800d3fc:	2300      	movs	r3, #0
 800d3fe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d402:	f7ff fe55 	bl	800d0b0 <__multadd>
 800d406:	4606      	mov	r6, r0
 800d408:	10ad      	asrs	r5, r5, #2
 800d40a:	d03d      	beq.n	800d488 <__pow5mult+0xa0>
 800d40c:	69fc      	ldr	r4, [r7, #28]
 800d40e:	b97c      	cbnz	r4, 800d430 <__pow5mult+0x48>
 800d410:	2010      	movs	r0, #16
 800d412:	f7fb fdd3 	bl	8008fbc <malloc>
 800d416:	4602      	mov	r2, r0
 800d418:	61f8      	str	r0, [r7, #28]
 800d41a:	b928      	cbnz	r0, 800d428 <__pow5mult+0x40>
 800d41c:	4b1d      	ldr	r3, [pc, #116]	@ (800d494 <__pow5mult+0xac>)
 800d41e:	481e      	ldr	r0, [pc, #120]	@ (800d498 <__pow5mult+0xb0>)
 800d420:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800d424:	f001 f8ca 	bl	800e5bc <__assert_func>
 800d428:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d42c:	6004      	str	r4, [r0, #0]
 800d42e:	60c4      	str	r4, [r0, #12]
 800d430:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800d434:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d438:	b94c      	cbnz	r4, 800d44e <__pow5mult+0x66>
 800d43a:	f240 2171 	movw	r1, #625	@ 0x271
 800d43e:	4638      	mov	r0, r7
 800d440:	f7ff ff12 	bl	800d268 <__i2b>
 800d444:	2300      	movs	r3, #0
 800d446:	f8c8 0008 	str.w	r0, [r8, #8]
 800d44a:	4604      	mov	r4, r0
 800d44c:	6003      	str	r3, [r0, #0]
 800d44e:	f04f 0900 	mov.w	r9, #0
 800d452:	07eb      	lsls	r3, r5, #31
 800d454:	d50a      	bpl.n	800d46c <__pow5mult+0x84>
 800d456:	4631      	mov	r1, r6
 800d458:	4622      	mov	r2, r4
 800d45a:	4638      	mov	r0, r7
 800d45c:	f7ff ff1a 	bl	800d294 <__multiply>
 800d460:	4631      	mov	r1, r6
 800d462:	4680      	mov	r8, r0
 800d464:	4638      	mov	r0, r7
 800d466:	f7ff fe01 	bl	800d06c <_Bfree>
 800d46a:	4646      	mov	r6, r8
 800d46c:	106d      	asrs	r5, r5, #1
 800d46e:	d00b      	beq.n	800d488 <__pow5mult+0xa0>
 800d470:	6820      	ldr	r0, [r4, #0]
 800d472:	b938      	cbnz	r0, 800d484 <__pow5mult+0x9c>
 800d474:	4622      	mov	r2, r4
 800d476:	4621      	mov	r1, r4
 800d478:	4638      	mov	r0, r7
 800d47a:	f7ff ff0b 	bl	800d294 <__multiply>
 800d47e:	6020      	str	r0, [r4, #0]
 800d480:	f8c0 9000 	str.w	r9, [r0]
 800d484:	4604      	mov	r4, r0
 800d486:	e7e4      	b.n	800d452 <__pow5mult+0x6a>
 800d488:	4630      	mov	r0, r6
 800d48a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d48e:	bf00      	nop
 800d490:	080106cc 	.word	0x080106cc
 800d494:	08010591 	.word	0x08010591
 800d498:	08010671 	.word	0x08010671

0800d49c <__lshift>:
 800d49c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d4a0:	460c      	mov	r4, r1
 800d4a2:	6849      	ldr	r1, [r1, #4]
 800d4a4:	6923      	ldr	r3, [r4, #16]
 800d4a6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d4aa:	68a3      	ldr	r3, [r4, #8]
 800d4ac:	4607      	mov	r7, r0
 800d4ae:	4691      	mov	r9, r2
 800d4b0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d4b4:	f108 0601 	add.w	r6, r8, #1
 800d4b8:	42b3      	cmp	r3, r6
 800d4ba:	db0b      	blt.n	800d4d4 <__lshift+0x38>
 800d4bc:	4638      	mov	r0, r7
 800d4be:	f7ff fd95 	bl	800cfec <_Balloc>
 800d4c2:	4605      	mov	r5, r0
 800d4c4:	b948      	cbnz	r0, 800d4da <__lshift+0x3e>
 800d4c6:	4602      	mov	r2, r0
 800d4c8:	4b28      	ldr	r3, [pc, #160]	@ (800d56c <__lshift+0xd0>)
 800d4ca:	4829      	ldr	r0, [pc, #164]	@ (800d570 <__lshift+0xd4>)
 800d4cc:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800d4d0:	f001 f874 	bl	800e5bc <__assert_func>
 800d4d4:	3101      	adds	r1, #1
 800d4d6:	005b      	lsls	r3, r3, #1
 800d4d8:	e7ee      	b.n	800d4b8 <__lshift+0x1c>
 800d4da:	2300      	movs	r3, #0
 800d4dc:	f100 0114 	add.w	r1, r0, #20
 800d4e0:	f100 0210 	add.w	r2, r0, #16
 800d4e4:	4618      	mov	r0, r3
 800d4e6:	4553      	cmp	r3, sl
 800d4e8:	db33      	blt.n	800d552 <__lshift+0xb6>
 800d4ea:	6920      	ldr	r0, [r4, #16]
 800d4ec:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d4f0:	f104 0314 	add.w	r3, r4, #20
 800d4f4:	f019 091f 	ands.w	r9, r9, #31
 800d4f8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d4fc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d500:	d02b      	beq.n	800d55a <__lshift+0xbe>
 800d502:	f1c9 0e20 	rsb	lr, r9, #32
 800d506:	468a      	mov	sl, r1
 800d508:	2200      	movs	r2, #0
 800d50a:	6818      	ldr	r0, [r3, #0]
 800d50c:	fa00 f009 	lsl.w	r0, r0, r9
 800d510:	4310      	orrs	r0, r2
 800d512:	f84a 0b04 	str.w	r0, [sl], #4
 800d516:	f853 2b04 	ldr.w	r2, [r3], #4
 800d51a:	459c      	cmp	ip, r3
 800d51c:	fa22 f20e 	lsr.w	r2, r2, lr
 800d520:	d8f3      	bhi.n	800d50a <__lshift+0x6e>
 800d522:	ebac 0304 	sub.w	r3, ip, r4
 800d526:	3b15      	subs	r3, #21
 800d528:	f023 0303 	bic.w	r3, r3, #3
 800d52c:	3304      	adds	r3, #4
 800d52e:	f104 0015 	add.w	r0, r4, #21
 800d532:	4584      	cmp	ip, r0
 800d534:	bf38      	it	cc
 800d536:	2304      	movcc	r3, #4
 800d538:	50ca      	str	r2, [r1, r3]
 800d53a:	b10a      	cbz	r2, 800d540 <__lshift+0xa4>
 800d53c:	f108 0602 	add.w	r6, r8, #2
 800d540:	3e01      	subs	r6, #1
 800d542:	4638      	mov	r0, r7
 800d544:	612e      	str	r6, [r5, #16]
 800d546:	4621      	mov	r1, r4
 800d548:	f7ff fd90 	bl	800d06c <_Bfree>
 800d54c:	4628      	mov	r0, r5
 800d54e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d552:	f842 0f04 	str.w	r0, [r2, #4]!
 800d556:	3301      	adds	r3, #1
 800d558:	e7c5      	b.n	800d4e6 <__lshift+0x4a>
 800d55a:	3904      	subs	r1, #4
 800d55c:	f853 2b04 	ldr.w	r2, [r3], #4
 800d560:	f841 2f04 	str.w	r2, [r1, #4]!
 800d564:	459c      	cmp	ip, r3
 800d566:	d8f9      	bhi.n	800d55c <__lshift+0xc0>
 800d568:	e7ea      	b.n	800d540 <__lshift+0xa4>
 800d56a:	bf00      	nop
 800d56c:	08010600 	.word	0x08010600
 800d570:	08010671 	.word	0x08010671

0800d574 <__mcmp>:
 800d574:	690a      	ldr	r2, [r1, #16]
 800d576:	4603      	mov	r3, r0
 800d578:	6900      	ldr	r0, [r0, #16]
 800d57a:	1a80      	subs	r0, r0, r2
 800d57c:	b530      	push	{r4, r5, lr}
 800d57e:	d10e      	bne.n	800d59e <__mcmp+0x2a>
 800d580:	3314      	adds	r3, #20
 800d582:	3114      	adds	r1, #20
 800d584:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800d588:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800d58c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800d590:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800d594:	4295      	cmp	r5, r2
 800d596:	d003      	beq.n	800d5a0 <__mcmp+0x2c>
 800d598:	d205      	bcs.n	800d5a6 <__mcmp+0x32>
 800d59a:	f04f 30ff 	mov.w	r0, #4294967295
 800d59e:	bd30      	pop	{r4, r5, pc}
 800d5a0:	42a3      	cmp	r3, r4
 800d5a2:	d3f3      	bcc.n	800d58c <__mcmp+0x18>
 800d5a4:	e7fb      	b.n	800d59e <__mcmp+0x2a>
 800d5a6:	2001      	movs	r0, #1
 800d5a8:	e7f9      	b.n	800d59e <__mcmp+0x2a>
	...

0800d5ac <__mdiff>:
 800d5ac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d5b0:	4689      	mov	r9, r1
 800d5b2:	4606      	mov	r6, r0
 800d5b4:	4611      	mov	r1, r2
 800d5b6:	4648      	mov	r0, r9
 800d5b8:	4614      	mov	r4, r2
 800d5ba:	f7ff ffdb 	bl	800d574 <__mcmp>
 800d5be:	1e05      	subs	r5, r0, #0
 800d5c0:	d112      	bne.n	800d5e8 <__mdiff+0x3c>
 800d5c2:	4629      	mov	r1, r5
 800d5c4:	4630      	mov	r0, r6
 800d5c6:	f7ff fd11 	bl	800cfec <_Balloc>
 800d5ca:	4602      	mov	r2, r0
 800d5cc:	b928      	cbnz	r0, 800d5da <__mdiff+0x2e>
 800d5ce:	4b3f      	ldr	r3, [pc, #252]	@ (800d6cc <__mdiff+0x120>)
 800d5d0:	f240 2137 	movw	r1, #567	@ 0x237
 800d5d4:	483e      	ldr	r0, [pc, #248]	@ (800d6d0 <__mdiff+0x124>)
 800d5d6:	f000 fff1 	bl	800e5bc <__assert_func>
 800d5da:	2301      	movs	r3, #1
 800d5dc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d5e0:	4610      	mov	r0, r2
 800d5e2:	b003      	add	sp, #12
 800d5e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d5e8:	bfbc      	itt	lt
 800d5ea:	464b      	movlt	r3, r9
 800d5ec:	46a1      	movlt	r9, r4
 800d5ee:	4630      	mov	r0, r6
 800d5f0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800d5f4:	bfba      	itte	lt
 800d5f6:	461c      	movlt	r4, r3
 800d5f8:	2501      	movlt	r5, #1
 800d5fa:	2500      	movge	r5, #0
 800d5fc:	f7ff fcf6 	bl	800cfec <_Balloc>
 800d600:	4602      	mov	r2, r0
 800d602:	b918      	cbnz	r0, 800d60c <__mdiff+0x60>
 800d604:	4b31      	ldr	r3, [pc, #196]	@ (800d6cc <__mdiff+0x120>)
 800d606:	f240 2145 	movw	r1, #581	@ 0x245
 800d60a:	e7e3      	b.n	800d5d4 <__mdiff+0x28>
 800d60c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800d610:	6926      	ldr	r6, [r4, #16]
 800d612:	60c5      	str	r5, [r0, #12]
 800d614:	f109 0310 	add.w	r3, r9, #16
 800d618:	f109 0514 	add.w	r5, r9, #20
 800d61c:	f104 0e14 	add.w	lr, r4, #20
 800d620:	f100 0b14 	add.w	fp, r0, #20
 800d624:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800d628:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800d62c:	9301      	str	r3, [sp, #4]
 800d62e:	46d9      	mov	r9, fp
 800d630:	f04f 0c00 	mov.w	ip, #0
 800d634:	9b01      	ldr	r3, [sp, #4]
 800d636:	f85e 0b04 	ldr.w	r0, [lr], #4
 800d63a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800d63e:	9301      	str	r3, [sp, #4]
 800d640:	fa1f f38a 	uxth.w	r3, sl
 800d644:	4619      	mov	r1, r3
 800d646:	b283      	uxth	r3, r0
 800d648:	1acb      	subs	r3, r1, r3
 800d64a:	0c00      	lsrs	r0, r0, #16
 800d64c:	4463      	add	r3, ip
 800d64e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800d652:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800d656:	b29b      	uxth	r3, r3
 800d658:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800d65c:	4576      	cmp	r6, lr
 800d65e:	f849 3b04 	str.w	r3, [r9], #4
 800d662:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d666:	d8e5      	bhi.n	800d634 <__mdiff+0x88>
 800d668:	1b33      	subs	r3, r6, r4
 800d66a:	3b15      	subs	r3, #21
 800d66c:	f023 0303 	bic.w	r3, r3, #3
 800d670:	3415      	adds	r4, #21
 800d672:	3304      	adds	r3, #4
 800d674:	42a6      	cmp	r6, r4
 800d676:	bf38      	it	cc
 800d678:	2304      	movcc	r3, #4
 800d67a:	441d      	add	r5, r3
 800d67c:	445b      	add	r3, fp
 800d67e:	461e      	mov	r6, r3
 800d680:	462c      	mov	r4, r5
 800d682:	4544      	cmp	r4, r8
 800d684:	d30e      	bcc.n	800d6a4 <__mdiff+0xf8>
 800d686:	f108 0103 	add.w	r1, r8, #3
 800d68a:	1b49      	subs	r1, r1, r5
 800d68c:	f021 0103 	bic.w	r1, r1, #3
 800d690:	3d03      	subs	r5, #3
 800d692:	45a8      	cmp	r8, r5
 800d694:	bf38      	it	cc
 800d696:	2100      	movcc	r1, #0
 800d698:	440b      	add	r3, r1
 800d69a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d69e:	b191      	cbz	r1, 800d6c6 <__mdiff+0x11a>
 800d6a0:	6117      	str	r7, [r2, #16]
 800d6a2:	e79d      	b.n	800d5e0 <__mdiff+0x34>
 800d6a4:	f854 1b04 	ldr.w	r1, [r4], #4
 800d6a8:	46e6      	mov	lr, ip
 800d6aa:	0c08      	lsrs	r0, r1, #16
 800d6ac:	fa1c fc81 	uxtah	ip, ip, r1
 800d6b0:	4471      	add	r1, lr
 800d6b2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800d6b6:	b289      	uxth	r1, r1
 800d6b8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800d6bc:	f846 1b04 	str.w	r1, [r6], #4
 800d6c0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d6c4:	e7dd      	b.n	800d682 <__mdiff+0xd6>
 800d6c6:	3f01      	subs	r7, #1
 800d6c8:	e7e7      	b.n	800d69a <__mdiff+0xee>
 800d6ca:	bf00      	nop
 800d6cc:	08010600 	.word	0x08010600
 800d6d0:	08010671 	.word	0x08010671

0800d6d4 <__ulp>:
 800d6d4:	b082      	sub	sp, #8
 800d6d6:	ed8d 0b00 	vstr	d0, [sp]
 800d6da:	9a01      	ldr	r2, [sp, #4]
 800d6dc:	4b0f      	ldr	r3, [pc, #60]	@ (800d71c <__ulp+0x48>)
 800d6de:	4013      	ands	r3, r2
 800d6e0:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800d6e4:	2b00      	cmp	r3, #0
 800d6e6:	dc08      	bgt.n	800d6fa <__ulp+0x26>
 800d6e8:	425b      	negs	r3, r3
 800d6ea:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800d6ee:	ea4f 5223 	mov.w	r2, r3, asr #20
 800d6f2:	da04      	bge.n	800d6fe <__ulp+0x2a>
 800d6f4:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800d6f8:	4113      	asrs	r3, r2
 800d6fa:	2200      	movs	r2, #0
 800d6fc:	e008      	b.n	800d710 <__ulp+0x3c>
 800d6fe:	f1a2 0314 	sub.w	r3, r2, #20
 800d702:	2b1e      	cmp	r3, #30
 800d704:	bfda      	itte	le
 800d706:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800d70a:	40da      	lsrle	r2, r3
 800d70c:	2201      	movgt	r2, #1
 800d70e:	2300      	movs	r3, #0
 800d710:	4619      	mov	r1, r3
 800d712:	4610      	mov	r0, r2
 800d714:	ec41 0b10 	vmov	d0, r0, r1
 800d718:	b002      	add	sp, #8
 800d71a:	4770      	bx	lr
 800d71c:	7ff00000 	.word	0x7ff00000

0800d720 <__b2d>:
 800d720:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d724:	6906      	ldr	r6, [r0, #16]
 800d726:	f100 0814 	add.w	r8, r0, #20
 800d72a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800d72e:	1f37      	subs	r7, r6, #4
 800d730:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800d734:	4610      	mov	r0, r2
 800d736:	f7ff fd4b 	bl	800d1d0 <__hi0bits>
 800d73a:	f1c0 0320 	rsb	r3, r0, #32
 800d73e:	280a      	cmp	r0, #10
 800d740:	600b      	str	r3, [r1, #0]
 800d742:	491b      	ldr	r1, [pc, #108]	@ (800d7b0 <__b2d+0x90>)
 800d744:	dc15      	bgt.n	800d772 <__b2d+0x52>
 800d746:	f1c0 0c0b 	rsb	ip, r0, #11
 800d74a:	fa22 f30c 	lsr.w	r3, r2, ip
 800d74e:	45b8      	cmp	r8, r7
 800d750:	ea43 0501 	orr.w	r5, r3, r1
 800d754:	bf34      	ite	cc
 800d756:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800d75a:	2300      	movcs	r3, #0
 800d75c:	3015      	adds	r0, #21
 800d75e:	fa02 f000 	lsl.w	r0, r2, r0
 800d762:	fa23 f30c 	lsr.w	r3, r3, ip
 800d766:	4303      	orrs	r3, r0
 800d768:	461c      	mov	r4, r3
 800d76a:	ec45 4b10 	vmov	d0, r4, r5
 800d76e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d772:	45b8      	cmp	r8, r7
 800d774:	bf3a      	itte	cc
 800d776:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800d77a:	f1a6 0708 	subcc.w	r7, r6, #8
 800d77e:	2300      	movcs	r3, #0
 800d780:	380b      	subs	r0, #11
 800d782:	d012      	beq.n	800d7aa <__b2d+0x8a>
 800d784:	f1c0 0120 	rsb	r1, r0, #32
 800d788:	fa23 f401 	lsr.w	r4, r3, r1
 800d78c:	4082      	lsls	r2, r0
 800d78e:	4322      	orrs	r2, r4
 800d790:	4547      	cmp	r7, r8
 800d792:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800d796:	bf8c      	ite	hi
 800d798:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800d79c:	2200      	movls	r2, #0
 800d79e:	4083      	lsls	r3, r0
 800d7a0:	40ca      	lsrs	r2, r1
 800d7a2:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800d7a6:	4313      	orrs	r3, r2
 800d7a8:	e7de      	b.n	800d768 <__b2d+0x48>
 800d7aa:	ea42 0501 	orr.w	r5, r2, r1
 800d7ae:	e7db      	b.n	800d768 <__b2d+0x48>
 800d7b0:	3ff00000 	.word	0x3ff00000

0800d7b4 <__d2b>:
 800d7b4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d7b8:	460f      	mov	r7, r1
 800d7ba:	2101      	movs	r1, #1
 800d7bc:	ec59 8b10 	vmov	r8, r9, d0
 800d7c0:	4616      	mov	r6, r2
 800d7c2:	f7ff fc13 	bl	800cfec <_Balloc>
 800d7c6:	4604      	mov	r4, r0
 800d7c8:	b930      	cbnz	r0, 800d7d8 <__d2b+0x24>
 800d7ca:	4602      	mov	r2, r0
 800d7cc:	4b23      	ldr	r3, [pc, #140]	@ (800d85c <__d2b+0xa8>)
 800d7ce:	4824      	ldr	r0, [pc, #144]	@ (800d860 <__d2b+0xac>)
 800d7d0:	f240 310f 	movw	r1, #783	@ 0x30f
 800d7d4:	f000 fef2 	bl	800e5bc <__assert_func>
 800d7d8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800d7dc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d7e0:	b10d      	cbz	r5, 800d7e6 <__d2b+0x32>
 800d7e2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d7e6:	9301      	str	r3, [sp, #4]
 800d7e8:	f1b8 0300 	subs.w	r3, r8, #0
 800d7ec:	d023      	beq.n	800d836 <__d2b+0x82>
 800d7ee:	4668      	mov	r0, sp
 800d7f0:	9300      	str	r3, [sp, #0]
 800d7f2:	f7ff fd0c 	bl	800d20e <__lo0bits>
 800d7f6:	e9dd 1200 	ldrd	r1, r2, [sp]
 800d7fa:	b1d0      	cbz	r0, 800d832 <__d2b+0x7e>
 800d7fc:	f1c0 0320 	rsb	r3, r0, #32
 800d800:	fa02 f303 	lsl.w	r3, r2, r3
 800d804:	430b      	orrs	r3, r1
 800d806:	40c2      	lsrs	r2, r0
 800d808:	6163      	str	r3, [r4, #20]
 800d80a:	9201      	str	r2, [sp, #4]
 800d80c:	9b01      	ldr	r3, [sp, #4]
 800d80e:	61a3      	str	r3, [r4, #24]
 800d810:	2b00      	cmp	r3, #0
 800d812:	bf0c      	ite	eq
 800d814:	2201      	moveq	r2, #1
 800d816:	2202      	movne	r2, #2
 800d818:	6122      	str	r2, [r4, #16]
 800d81a:	b1a5      	cbz	r5, 800d846 <__d2b+0x92>
 800d81c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800d820:	4405      	add	r5, r0
 800d822:	603d      	str	r5, [r7, #0]
 800d824:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800d828:	6030      	str	r0, [r6, #0]
 800d82a:	4620      	mov	r0, r4
 800d82c:	b003      	add	sp, #12
 800d82e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d832:	6161      	str	r1, [r4, #20]
 800d834:	e7ea      	b.n	800d80c <__d2b+0x58>
 800d836:	a801      	add	r0, sp, #4
 800d838:	f7ff fce9 	bl	800d20e <__lo0bits>
 800d83c:	9b01      	ldr	r3, [sp, #4]
 800d83e:	6163      	str	r3, [r4, #20]
 800d840:	3020      	adds	r0, #32
 800d842:	2201      	movs	r2, #1
 800d844:	e7e8      	b.n	800d818 <__d2b+0x64>
 800d846:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d84a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800d84e:	6038      	str	r0, [r7, #0]
 800d850:	6918      	ldr	r0, [r3, #16]
 800d852:	f7ff fcbd 	bl	800d1d0 <__hi0bits>
 800d856:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d85a:	e7e5      	b.n	800d828 <__d2b+0x74>
 800d85c:	08010600 	.word	0x08010600
 800d860:	08010671 	.word	0x08010671

0800d864 <__ratio>:
 800d864:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d868:	b085      	sub	sp, #20
 800d86a:	e9cd 1000 	strd	r1, r0, [sp]
 800d86e:	a902      	add	r1, sp, #8
 800d870:	f7ff ff56 	bl	800d720 <__b2d>
 800d874:	9800      	ldr	r0, [sp, #0]
 800d876:	a903      	add	r1, sp, #12
 800d878:	ec55 4b10 	vmov	r4, r5, d0
 800d87c:	f7ff ff50 	bl	800d720 <__b2d>
 800d880:	9b01      	ldr	r3, [sp, #4]
 800d882:	6919      	ldr	r1, [r3, #16]
 800d884:	9b00      	ldr	r3, [sp, #0]
 800d886:	691b      	ldr	r3, [r3, #16]
 800d888:	1ac9      	subs	r1, r1, r3
 800d88a:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800d88e:	1a9b      	subs	r3, r3, r2
 800d890:	ec5b ab10 	vmov	sl, fp, d0
 800d894:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800d898:	2b00      	cmp	r3, #0
 800d89a:	bfce      	itee	gt
 800d89c:	462a      	movgt	r2, r5
 800d89e:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800d8a2:	465a      	movle	r2, fp
 800d8a4:	462f      	mov	r7, r5
 800d8a6:	46d9      	mov	r9, fp
 800d8a8:	bfcc      	ite	gt
 800d8aa:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800d8ae:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800d8b2:	464b      	mov	r3, r9
 800d8b4:	4652      	mov	r2, sl
 800d8b6:	4620      	mov	r0, r4
 800d8b8:	4639      	mov	r1, r7
 800d8ba:	f7f2 ffd7 	bl	800086c <__aeabi_ddiv>
 800d8be:	ec41 0b10 	vmov	d0, r0, r1
 800d8c2:	b005      	add	sp, #20
 800d8c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d8c8 <__copybits>:
 800d8c8:	3901      	subs	r1, #1
 800d8ca:	b570      	push	{r4, r5, r6, lr}
 800d8cc:	1149      	asrs	r1, r1, #5
 800d8ce:	6914      	ldr	r4, [r2, #16]
 800d8d0:	3101      	adds	r1, #1
 800d8d2:	f102 0314 	add.w	r3, r2, #20
 800d8d6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800d8da:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800d8de:	1f05      	subs	r5, r0, #4
 800d8e0:	42a3      	cmp	r3, r4
 800d8e2:	d30c      	bcc.n	800d8fe <__copybits+0x36>
 800d8e4:	1aa3      	subs	r3, r4, r2
 800d8e6:	3b11      	subs	r3, #17
 800d8e8:	f023 0303 	bic.w	r3, r3, #3
 800d8ec:	3211      	adds	r2, #17
 800d8ee:	42a2      	cmp	r2, r4
 800d8f0:	bf88      	it	hi
 800d8f2:	2300      	movhi	r3, #0
 800d8f4:	4418      	add	r0, r3
 800d8f6:	2300      	movs	r3, #0
 800d8f8:	4288      	cmp	r0, r1
 800d8fa:	d305      	bcc.n	800d908 <__copybits+0x40>
 800d8fc:	bd70      	pop	{r4, r5, r6, pc}
 800d8fe:	f853 6b04 	ldr.w	r6, [r3], #4
 800d902:	f845 6f04 	str.w	r6, [r5, #4]!
 800d906:	e7eb      	b.n	800d8e0 <__copybits+0x18>
 800d908:	f840 3b04 	str.w	r3, [r0], #4
 800d90c:	e7f4      	b.n	800d8f8 <__copybits+0x30>

0800d90e <__any_on>:
 800d90e:	f100 0214 	add.w	r2, r0, #20
 800d912:	6900      	ldr	r0, [r0, #16]
 800d914:	114b      	asrs	r3, r1, #5
 800d916:	4298      	cmp	r0, r3
 800d918:	b510      	push	{r4, lr}
 800d91a:	db11      	blt.n	800d940 <__any_on+0x32>
 800d91c:	dd0a      	ble.n	800d934 <__any_on+0x26>
 800d91e:	f011 011f 	ands.w	r1, r1, #31
 800d922:	d007      	beq.n	800d934 <__any_on+0x26>
 800d924:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800d928:	fa24 f001 	lsr.w	r0, r4, r1
 800d92c:	fa00 f101 	lsl.w	r1, r0, r1
 800d930:	428c      	cmp	r4, r1
 800d932:	d10b      	bne.n	800d94c <__any_on+0x3e>
 800d934:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d938:	4293      	cmp	r3, r2
 800d93a:	d803      	bhi.n	800d944 <__any_on+0x36>
 800d93c:	2000      	movs	r0, #0
 800d93e:	bd10      	pop	{r4, pc}
 800d940:	4603      	mov	r3, r0
 800d942:	e7f7      	b.n	800d934 <__any_on+0x26>
 800d944:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d948:	2900      	cmp	r1, #0
 800d94a:	d0f5      	beq.n	800d938 <__any_on+0x2a>
 800d94c:	2001      	movs	r0, #1
 800d94e:	e7f6      	b.n	800d93e <__any_on+0x30>

0800d950 <_strtoul_l.constprop.0>:
 800d950:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d954:	4e34      	ldr	r6, [pc, #208]	@ (800da28 <_strtoul_l.constprop.0+0xd8>)
 800d956:	4686      	mov	lr, r0
 800d958:	460d      	mov	r5, r1
 800d95a:	4628      	mov	r0, r5
 800d95c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d960:	5d37      	ldrb	r7, [r6, r4]
 800d962:	f017 0708 	ands.w	r7, r7, #8
 800d966:	d1f8      	bne.n	800d95a <_strtoul_l.constprop.0+0xa>
 800d968:	2c2d      	cmp	r4, #45	@ 0x2d
 800d96a:	d12f      	bne.n	800d9cc <_strtoul_l.constprop.0+0x7c>
 800d96c:	782c      	ldrb	r4, [r5, #0]
 800d96e:	2701      	movs	r7, #1
 800d970:	1c85      	adds	r5, r0, #2
 800d972:	f033 0010 	bics.w	r0, r3, #16
 800d976:	d109      	bne.n	800d98c <_strtoul_l.constprop.0+0x3c>
 800d978:	2c30      	cmp	r4, #48	@ 0x30
 800d97a:	d12c      	bne.n	800d9d6 <_strtoul_l.constprop.0+0x86>
 800d97c:	7828      	ldrb	r0, [r5, #0]
 800d97e:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 800d982:	2858      	cmp	r0, #88	@ 0x58
 800d984:	d127      	bne.n	800d9d6 <_strtoul_l.constprop.0+0x86>
 800d986:	786c      	ldrb	r4, [r5, #1]
 800d988:	2310      	movs	r3, #16
 800d98a:	3502      	adds	r5, #2
 800d98c:	f04f 38ff 	mov.w	r8, #4294967295
 800d990:	2600      	movs	r6, #0
 800d992:	fbb8 f8f3 	udiv	r8, r8, r3
 800d996:	fb03 f908 	mul.w	r9, r3, r8
 800d99a:	ea6f 0909 	mvn.w	r9, r9
 800d99e:	4630      	mov	r0, r6
 800d9a0:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 800d9a4:	f1bc 0f09 	cmp.w	ip, #9
 800d9a8:	d81c      	bhi.n	800d9e4 <_strtoul_l.constprop.0+0x94>
 800d9aa:	4664      	mov	r4, ip
 800d9ac:	42a3      	cmp	r3, r4
 800d9ae:	dd2a      	ble.n	800da06 <_strtoul_l.constprop.0+0xb6>
 800d9b0:	f1b6 3fff 	cmp.w	r6, #4294967295
 800d9b4:	d007      	beq.n	800d9c6 <_strtoul_l.constprop.0+0x76>
 800d9b6:	4580      	cmp	r8, r0
 800d9b8:	d322      	bcc.n	800da00 <_strtoul_l.constprop.0+0xb0>
 800d9ba:	d101      	bne.n	800d9c0 <_strtoul_l.constprop.0+0x70>
 800d9bc:	45a1      	cmp	r9, r4
 800d9be:	db1f      	blt.n	800da00 <_strtoul_l.constprop.0+0xb0>
 800d9c0:	fb00 4003 	mla	r0, r0, r3, r4
 800d9c4:	2601      	movs	r6, #1
 800d9c6:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d9ca:	e7e9      	b.n	800d9a0 <_strtoul_l.constprop.0+0x50>
 800d9cc:	2c2b      	cmp	r4, #43	@ 0x2b
 800d9ce:	bf04      	itt	eq
 800d9d0:	782c      	ldrbeq	r4, [r5, #0]
 800d9d2:	1c85      	addeq	r5, r0, #2
 800d9d4:	e7cd      	b.n	800d972 <_strtoul_l.constprop.0+0x22>
 800d9d6:	2b00      	cmp	r3, #0
 800d9d8:	d1d8      	bne.n	800d98c <_strtoul_l.constprop.0+0x3c>
 800d9da:	2c30      	cmp	r4, #48	@ 0x30
 800d9dc:	bf0c      	ite	eq
 800d9de:	2308      	moveq	r3, #8
 800d9e0:	230a      	movne	r3, #10
 800d9e2:	e7d3      	b.n	800d98c <_strtoul_l.constprop.0+0x3c>
 800d9e4:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 800d9e8:	f1bc 0f19 	cmp.w	ip, #25
 800d9ec:	d801      	bhi.n	800d9f2 <_strtoul_l.constprop.0+0xa2>
 800d9ee:	3c37      	subs	r4, #55	@ 0x37
 800d9f0:	e7dc      	b.n	800d9ac <_strtoul_l.constprop.0+0x5c>
 800d9f2:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 800d9f6:	f1bc 0f19 	cmp.w	ip, #25
 800d9fa:	d804      	bhi.n	800da06 <_strtoul_l.constprop.0+0xb6>
 800d9fc:	3c57      	subs	r4, #87	@ 0x57
 800d9fe:	e7d5      	b.n	800d9ac <_strtoul_l.constprop.0+0x5c>
 800da00:	f04f 36ff 	mov.w	r6, #4294967295
 800da04:	e7df      	b.n	800d9c6 <_strtoul_l.constprop.0+0x76>
 800da06:	1c73      	adds	r3, r6, #1
 800da08:	d106      	bne.n	800da18 <_strtoul_l.constprop.0+0xc8>
 800da0a:	2322      	movs	r3, #34	@ 0x22
 800da0c:	f8ce 3000 	str.w	r3, [lr]
 800da10:	4630      	mov	r0, r6
 800da12:	b932      	cbnz	r2, 800da22 <_strtoul_l.constprop.0+0xd2>
 800da14:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800da18:	b107      	cbz	r7, 800da1c <_strtoul_l.constprop.0+0xcc>
 800da1a:	4240      	negs	r0, r0
 800da1c:	2a00      	cmp	r2, #0
 800da1e:	d0f9      	beq.n	800da14 <_strtoul_l.constprop.0+0xc4>
 800da20:	b106      	cbz	r6, 800da24 <_strtoul_l.constprop.0+0xd4>
 800da22:	1e69      	subs	r1, r5, #1
 800da24:	6011      	str	r1, [r2, #0]
 800da26:	e7f5      	b.n	800da14 <_strtoul_l.constprop.0+0xc4>
 800da28:	08010399 	.word	0x08010399

0800da2c <_strtoul_r>:
 800da2c:	f7ff bf90 	b.w	800d950 <_strtoul_l.constprop.0>

0800da30 <strtoul>:
 800da30:	4613      	mov	r3, r2
 800da32:	460a      	mov	r2, r1
 800da34:	4601      	mov	r1, r0
 800da36:	4802      	ldr	r0, [pc, #8]	@ (800da40 <strtoul+0x10>)
 800da38:	6800      	ldr	r0, [r0, #0]
 800da3a:	f7ff bf89 	b.w	800d950 <_strtoul_l.constprop.0>
 800da3e:	bf00      	nop
 800da40:	2000019c 	.word	0x2000019c

0800da44 <__ascii_wctomb>:
 800da44:	4603      	mov	r3, r0
 800da46:	4608      	mov	r0, r1
 800da48:	b141      	cbz	r1, 800da5c <__ascii_wctomb+0x18>
 800da4a:	2aff      	cmp	r2, #255	@ 0xff
 800da4c:	d904      	bls.n	800da58 <__ascii_wctomb+0x14>
 800da4e:	228a      	movs	r2, #138	@ 0x8a
 800da50:	601a      	str	r2, [r3, #0]
 800da52:	f04f 30ff 	mov.w	r0, #4294967295
 800da56:	4770      	bx	lr
 800da58:	700a      	strb	r2, [r1, #0]
 800da5a:	2001      	movs	r0, #1
 800da5c:	4770      	bx	lr

0800da5e <__ssputs_r>:
 800da5e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800da62:	688e      	ldr	r6, [r1, #8]
 800da64:	461f      	mov	r7, r3
 800da66:	42be      	cmp	r6, r7
 800da68:	680b      	ldr	r3, [r1, #0]
 800da6a:	4682      	mov	sl, r0
 800da6c:	460c      	mov	r4, r1
 800da6e:	4690      	mov	r8, r2
 800da70:	d82d      	bhi.n	800dace <__ssputs_r+0x70>
 800da72:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800da76:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800da7a:	d026      	beq.n	800daca <__ssputs_r+0x6c>
 800da7c:	6965      	ldr	r5, [r4, #20]
 800da7e:	6909      	ldr	r1, [r1, #16]
 800da80:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800da84:	eba3 0901 	sub.w	r9, r3, r1
 800da88:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800da8c:	1c7b      	adds	r3, r7, #1
 800da8e:	444b      	add	r3, r9
 800da90:	106d      	asrs	r5, r5, #1
 800da92:	429d      	cmp	r5, r3
 800da94:	bf38      	it	cc
 800da96:	461d      	movcc	r5, r3
 800da98:	0553      	lsls	r3, r2, #21
 800da9a:	d527      	bpl.n	800daec <__ssputs_r+0x8e>
 800da9c:	4629      	mov	r1, r5
 800da9e:	f7fb fabf 	bl	8009020 <_malloc_r>
 800daa2:	4606      	mov	r6, r0
 800daa4:	b360      	cbz	r0, 800db00 <__ssputs_r+0xa2>
 800daa6:	6921      	ldr	r1, [r4, #16]
 800daa8:	464a      	mov	r2, r9
 800daaa:	f7fe f853 	bl	800bb54 <memcpy>
 800daae:	89a3      	ldrh	r3, [r4, #12]
 800dab0:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800dab4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800dab8:	81a3      	strh	r3, [r4, #12]
 800daba:	6126      	str	r6, [r4, #16]
 800dabc:	6165      	str	r5, [r4, #20]
 800dabe:	444e      	add	r6, r9
 800dac0:	eba5 0509 	sub.w	r5, r5, r9
 800dac4:	6026      	str	r6, [r4, #0]
 800dac6:	60a5      	str	r5, [r4, #8]
 800dac8:	463e      	mov	r6, r7
 800daca:	42be      	cmp	r6, r7
 800dacc:	d900      	bls.n	800dad0 <__ssputs_r+0x72>
 800dace:	463e      	mov	r6, r7
 800dad0:	6820      	ldr	r0, [r4, #0]
 800dad2:	4632      	mov	r2, r6
 800dad4:	4641      	mov	r1, r8
 800dad6:	f000 fd52 	bl	800e57e <memmove>
 800dada:	68a3      	ldr	r3, [r4, #8]
 800dadc:	1b9b      	subs	r3, r3, r6
 800dade:	60a3      	str	r3, [r4, #8]
 800dae0:	6823      	ldr	r3, [r4, #0]
 800dae2:	4433      	add	r3, r6
 800dae4:	6023      	str	r3, [r4, #0]
 800dae6:	2000      	movs	r0, #0
 800dae8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800daec:	462a      	mov	r2, r5
 800daee:	f000 fda3 	bl	800e638 <_realloc_r>
 800daf2:	4606      	mov	r6, r0
 800daf4:	2800      	cmp	r0, #0
 800daf6:	d1e0      	bne.n	800daba <__ssputs_r+0x5c>
 800daf8:	6921      	ldr	r1, [r4, #16]
 800dafa:	4650      	mov	r0, sl
 800dafc:	f7fe fe9c 	bl	800c838 <_free_r>
 800db00:	230c      	movs	r3, #12
 800db02:	f8ca 3000 	str.w	r3, [sl]
 800db06:	89a3      	ldrh	r3, [r4, #12]
 800db08:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800db0c:	81a3      	strh	r3, [r4, #12]
 800db0e:	f04f 30ff 	mov.w	r0, #4294967295
 800db12:	e7e9      	b.n	800dae8 <__ssputs_r+0x8a>

0800db14 <_svfiprintf_r>:
 800db14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db18:	4698      	mov	r8, r3
 800db1a:	898b      	ldrh	r3, [r1, #12]
 800db1c:	061b      	lsls	r3, r3, #24
 800db1e:	b09d      	sub	sp, #116	@ 0x74
 800db20:	4607      	mov	r7, r0
 800db22:	460d      	mov	r5, r1
 800db24:	4614      	mov	r4, r2
 800db26:	d510      	bpl.n	800db4a <_svfiprintf_r+0x36>
 800db28:	690b      	ldr	r3, [r1, #16]
 800db2a:	b973      	cbnz	r3, 800db4a <_svfiprintf_r+0x36>
 800db2c:	2140      	movs	r1, #64	@ 0x40
 800db2e:	f7fb fa77 	bl	8009020 <_malloc_r>
 800db32:	6028      	str	r0, [r5, #0]
 800db34:	6128      	str	r0, [r5, #16]
 800db36:	b930      	cbnz	r0, 800db46 <_svfiprintf_r+0x32>
 800db38:	230c      	movs	r3, #12
 800db3a:	603b      	str	r3, [r7, #0]
 800db3c:	f04f 30ff 	mov.w	r0, #4294967295
 800db40:	b01d      	add	sp, #116	@ 0x74
 800db42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800db46:	2340      	movs	r3, #64	@ 0x40
 800db48:	616b      	str	r3, [r5, #20]
 800db4a:	2300      	movs	r3, #0
 800db4c:	9309      	str	r3, [sp, #36]	@ 0x24
 800db4e:	2320      	movs	r3, #32
 800db50:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800db54:	f8cd 800c 	str.w	r8, [sp, #12]
 800db58:	2330      	movs	r3, #48	@ 0x30
 800db5a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800dcf8 <_svfiprintf_r+0x1e4>
 800db5e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800db62:	f04f 0901 	mov.w	r9, #1
 800db66:	4623      	mov	r3, r4
 800db68:	469a      	mov	sl, r3
 800db6a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800db6e:	b10a      	cbz	r2, 800db74 <_svfiprintf_r+0x60>
 800db70:	2a25      	cmp	r2, #37	@ 0x25
 800db72:	d1f9      	bne.n	800db68 <_svfiprintf_r+0x54>
 800db74:	ebba 0b04 	subs.w	fp, sl, r4
 800db78:	d00b      	beq.n	800db92 <_svfiprintf_r+0x7e>
 800db7a:	465b      	mov	r3, fp
 800db7c:	4622      	mov	r2, r4
 800db7e:	4629      	mov	r1, r5
 800db80:	4638      	mov	r0, r7
 800db82:	f7ff ff6c 	bl	800da5e <__ssputs_r>
 800db86:	3001      	adds	r0, #1
 800db88:	f000 80a7 	beq.w	800dcda <_svfiprintf_r+0x1c6>
 800db8c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800db8e:	445a      	add	r2, fp
 800db90:	9209      	str	r2, [sp, #36]	@ 0x24
 800db92:	f89a 3000 	ldrb.w	r3, [sl]
 800db96:	2b00      	cmp	r3, #0
 800db98:	f000 809f 	beq.w	800dcda <_svfiprintf_r+0x1c6>
 800db9c:	2300      	movs	r3, #0
 800db9e:	f04f 32ff 	mov.w	r2, #4294967295
 800dba2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800dba6:	f10a 0a01 	add.w	sl, sl, #1
 800dbaa:	9304      	str	r3, [sp, #16]
 800dbac:	9307      	str	r3, [sp, #28]
 800dbae:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800dbb2:	931a      	str	r3, [sp, #104]	@ 0x68
 800dbb4:	4654      	mov	r4, sl
 800dbb6:	2205      	movs	r2, #5
 800dbb8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dbbc:	484e      	ldr	r0, [pc, #312]	@ (800dcf8 <_svfiprintf_r+0x1e4>)
 800dbbe:	f7f2 fb17 	bl	80001f0 <memchr>
 800dbc2:	9a04      	ldr	r2, [sp, #16]
 800dbc4:	b9d8      	cbnz	r0, 800dbfe <_svfiprintf_r+0xea>
 800dbc6:	06d0      	lsls	r0, r2, #27
 800dbc8:	bf44      	itt	mi
 800dbca:	2320      	movmi	r3, #32
 800dbcc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800dbd0:	0711      	lsls	r1, r2, #28
 800dbd2:	bf44      	itt	mi
 800dbd4:	232b      	movmi	r3, #43	@ 0x2b
 800dbd6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800dbda:	f89a 3000 	ldrb.w	r3, [sl]
 800dbde:	2b2a      	cmp	r3, #42	@ 0x2a
 800dbe0:	d015      	beq.n	800dc0e <_svfiprintf_r+0xfa>
 800dbe2:	9a07      	ldr	r2, [sp, #28]
 800dbe4:	4654      	mov	r4, sl
 800dbe6:	2000      	movs	r0, #0
 800dbe8:	f04f 0c0a 	mov.w	ip, #10
 800dbec:	4621      	mov	r1, r4
 800dbee:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dbf2:	3b30      	subs	r3, #48	@ 0x30
 800dbf4:	2b09      	cmp	r3, #9
 800dbf6:	d94b      	bls.n	800dc90 <_svfiprintf_r+0x17c>
 800dbf8:	b1b0      	cbz	r0, 800dc28 <_svfiprintf_r+0x114>
 800dbfa:	9207      	str	r2, [sp, #28]
 800dbfc:	e014      	b.n	800dc28 <_svfiprintf_r+0x114>
 800dbfe:	eba0 0308 	sub.w	r3, r0, r8
 800dc02:	fa09 f303 	lsl.w	r3, r9, r3
 800dc06:	4313      	orrs	r3, r2
 800dc08:	9304      	str	r3, [sp, #16]
 800dc0a:	46a2      	mov	sl, r4
 800dc0c:	e7d2      	b.n	800dbb4 <_svfiprintf_r+0xa0>
 800dc0e:	9b03      	ldr	r3, [sp, #12]
 800dc10:	1d19      	adds	r1, r3, #4
 800dc12:	681b      	ldr	r3, [r3, #0]
 800dc14:	9103      	str	r1, [sp, #12]
 800dc16:	2b00      	cmp	r3, #0
 800dc18:	bfbb      	ittet	lt
 800dc1a:	425b      	neglt	r3, r3
 800dc1c:	f042 0202 	orrlt.w	r2, r2, #2
 800dc20:	9307      	strge	r3, [sp, #28]
 800dc22:	9307      	strlt	r3, [sp, #28]
 800dc24:	bfb8      	it	lt
 800dc26:	9204      	strlt	r2, [sp, #16]
 800dc28:	7823      	ldrb	r3, [r4, #0]
 800dc2a:	2b2e      	cmp	r3, #46	@ 0x2e
 800dc2c:	d10a      	bne.n	800dc44 <_svfiprintf_r+0x130>
 800dc2e:	7863      	ldrb	r3, [r4, #1]
 800dc30:	2b2a      	cmp	r3, #42	@ 0x2a
 800dc32:	d132      	bne.n	800dc9a <_svfiprintf_r+0x186>
 800dc34:	9b03      	ldr	r3, [sp, #12]
 800dc36:	1d1a      	adds	r2, r3, #4
 800dc38:	681b      	ldr	r3, [r3, #0]
 800dc3a:	9203      	str	r2, [sp, #12]
 800dc3c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800dc40:	3402      	adds	r4, #2
 800dc42:	9305      	str	r3, [sp, #20]
 800dc44:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800dd08 <_svfiprintf_r+0x1f4>
 800dc48:	7821      	ldrb	r1, [r4, #0]
 800dc4a:	2203      	movs	r2, #3
 800dc4c:	4650      	mov	r0, sl
 800dc4e:	f7f2 facf 	bl	80001f0 <memchr>
 800dc52:	b138      	cbz	r0, 800dc64 <_svfiprintf_r+0x150>
 800dc54:	9b04      	ldr	r3, [sp, #16]
 800dc56:	eba0 000a 	sub.w	r0, r0, sl
 800dc5a:	2240      	movs	r2, #64	@ 0x40
 800dc5c:	4082      	lsls	r2, r0
 800dc5e:	4313      	orrs	r3, r2
 800dc60:	3401      	adds	r4, #1
 800dc62:	9304      	str	r3, [sp, #16]
 800dc64:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dc68:	4824      	ldr	r0, [pc, #144]	@ (800dcfc <_svfiprintf_r+0x1e8>)
 800dc6a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800dc6e:	2206      	movs	r2, #6
 800dc70:	f7f2 fabe 	bl	80001f0 <memchr>
 800dc74:	2800      	cmp	r0, #0
 800dc76:	d036      	beq.n	800dce6 <_svfiprintf_r+0x1d2>
 800dc78:	4b21      	ldr	r3, [pc, #132]	@ (800dd00 <_svfiprintf_r+0x1ec>)
 800dc7a:	bb1b      	cbnz	r3, 800dcc4 <_svfiprintf_r+0x1b0>
 800dc7c:	9b03      	ldr	r3, [sp, #12]
 800dc7e:	3307      	adds	r3, #7
 800dc80:	f023 0307 	bic.w	r3, r3, #7
 800dc84:	3308      	adds	r3, #8
 800dc86:	9303      	str	r3, [sp, #12]
 800dc88:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dc8a:	4433      	add	r3, r6
 800dc8c:	9309      	str	r3, [sp, #36]	@ 0x24
 800dc8e:	e76a      	b.n	800db66 <_svfiprintf_r+0x52>
 800dc90:	fb0c 3202 	mla	r2, ip, r2, r3
 800dc94:	460c      	mov	r4, r1
 800dc96:	2001      	movs	r0, #1
 800dc98:	e7a8      	b.n	800dbec <_svfiprintf_r+0xd8>
 800dc9a:	2300      	movs	r3, #0
 800dc9c:	3401      	adds	r4, #1
 800dc9e:	9305      	str	r3, [sp, #20]
 800dca0:	4619      	mov	r1, r3
 800dca2:	f04f 0c0a 	mov.w	ip, #10
 800dca6:	4620      	mov	r0, r4
 800dca8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dcac:	3a30      	subs	r2, #48	@ 0x30
 800dcae:	2a09      	cmp	r2, #9
 800dcb0:	d903      	bls.n	800dcba <_svfiprintf_r+0x1a6>
 800dcb2:	2b00      	cmp	r3, #0
 800dcb4:	d0c6      	beq.n	800dc44 <_svfiprintf_r+0x130>
 800dcb6:	9105      	str	r1, [sp, #20]
 800dcb8:	e7c4      	b.n	800dc44 <_svfiprintf_r+0x130>
 800dcba:	fb0c 2101 	mla	r1, ip, r1, r2
 800dcbe:	4604      	mov	r4, r0
 800dcc0:	2301      	movs	r3, #1
 800dcc2:	e7f0      	b.n	800dca6 <_svfiprintf_r+0x192>
 800dcc4:	ab03      	add	r3, sp, #12
 800dcc6:	9300      	str	r3, [sp, #0]
 800dcc8:	462a      	mov	r2, r5
 800dcca:	4b0e      	ldr	r3, [pc, #56]	@ (800dd04 <_svfiprintf_r+0x1f0>)
 800dccc:	a904      	add	r1, sp, #16
 800dcce:	4638      	mov	r0, r7
 800dcd0:	f7fc f962 	bl	8009f98 <_printf_float>
 800dcd4:	1c42      	adds	r2, r0, #1
 800dcd6:	4606      	mov	r6, r0
 800dcd8:	d1d6      	bne.n	800dc88 <_svfiprintf_r+0x174>
 800dcda:	89ab      	ldrh	r3, [r5, #12]
 800dcdc:	065b      	lsls	r3, r3, #25
 800dcde:	f53f af2d 	bmi.w	800db3c <_svfiprintf_r+0x28>
 800dce2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800dce4:	e72c      	b.n	800db40 <_svfiprintf_r+0x2c>
 800dce6:	ab03      	add	r3, sp, #12
 800dce8:	9300      	str	r3, [sp, #0]
 800dcea:	462a      	mov	r2, r5
 800dcec:	4b05      	ldr	r3, [pc, #20]	@ (800dd04 <_svfiprintf_r+0x1f0>)
 800dcee:	a904      	add	r1, sp, #16
 800dcf0:	4638      	mov	r0, r7
 800dcf2:	f7fc fbe9 	bl	800a4c8 <_printf_i>
 800dcf6:	e7ed      	b.n	800dcd4 <_svfiprintf_r+0x1c0>
 800dcf8:	080107c8 	.word	0x080107c8
 800dcfc:	080107d2 	.word	0x080107d2
 800dd00:	08009f99 	.word	0x08009f99
 800dd04:	0800da5f 	.word	0x0800da5f
 800dd08:	080107ce 	.word	0x080107ce

0800dd0c <_sungetc_r>:
 800dd0c:	b538      	push	{r3, r4, r5, lr}
 800dd0e:	1c4b      	adds	r3, r1, #1
 800dd10:	4614      	mov	r4, r2
 800dd12:	d103      	bne.n	800dd1c <_sungetc_r+0x10>
 800dd14:	f04f 35ff 	mov.w	r5, #4294967295
 800dd18:	4628      	mov	r0, r5
 800dd1a:	bd38      	pop	{r3, r4, r5, pc}
 800dd1c:	8993      	ldrh	r3, [r2, #12]
 800dd1e:	f023 0320 	bic.w	r3, r3, #32
 800dd22:	8193      	strh	r3, [r2, #12]
 800dd24:	6853      	ldr	r3, [r2, #4]
 800dd26:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800dd28:	b2cd      	uxtb	r5, r1
 800dd2a:	b18a      	cbz	r2, 800dd50 <_sungetc_r+0x44>
 800dd2c:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800dd2e:	429a      	cmp	r2, r3
 800dd30:	dd08      	ble.n	800dd44 <_sungetc_r+0x38>
 800dd32:	6823      	ldr	r3, [r4, #0]
 800dd34:	1e5a      	subs	r2, r3, #1
 800dd36:	6022      	str	r2, [r4, #0]
 800dd38:	f803 5c01 	strb.w	r5, [r3, #-1]
 800dd3c:	6863      	ldr	r3, [r4, #4]
 800dd3e:	3301      	adds	r3, #1
 800dd40:	6063      	str	r3, [r4, #4]
 800dd42:	e7e9      	b.n	800dd18 <_sungetc_r+0xc>
 800dd44:	4621      	mov	r1, r4
 800dd46:	f000 fbe0 	bl	800e50a <__submore>
 800dd4a:	2800      	cmp	r0, #0
 800dd4c:	d0f1      	beq.n	800dd32 <_sungetc_r+0x26>
 800dd4e:	e7e1      	b.n	800dd14 <_sungetc_r+0x8>
 800dd50:	6921      	ldr	r1, [r4, #16]
 800dd52:	6822      	ldr	r2, [r4, #0]
 800dd54:	b141      	cbz	r1, 800dd68 <_sungetc_r+0x5c>
 800dd56:	4291      	cmp	r1, r2
 800dd58:	d206      	bcs.n	800dd68 <_sungetc_r+0x5c>
 800dd5a:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 800dd5e:	42a9      	cmp	r1, r5
 800dd60:	d102      	bne.n	800dd68 <_sungetc_r+0x5c>
 800dd62:	3a01      	subs	r2, #1
 800dd64:	6022      	str	r2, [r4, #0]
 800dd66:	e7ea      	b.n	800dd3e <_sungetc_r+0x32>
 800dd68:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 800dd6c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800dd70:	6363      	str	r3, [r4, #52]	@ 0x34
 800dd72:	2303      	movs	r3, #3
 800dd74:	63a3      	str	r3, [r4, #56]	@ 0x38
 800dd76:	4623      	mov	r3, r4
 800dd78:	f803 5f46 	strb.w	r5, [r3, #70]!
 800dd7c:	6023      	str	r3, [r4, #0]
 800dd7e:	2301      	movs	r3, #1
 800dd80:	e7de      	b.n	800dd40 <_sungetc_r+0x34>

0800dd82 <__ssrefill_r>:
 800dd82:	b510      	push	{r4, lr}
 800dd84:	460c      	mov	r4, r1
 800dd86:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800dd88:	b169      	cbz	r1, 800dda6 <__ssrefill_r+0x24>
 800dd8a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800dd8e:	4299      	cmp	r1, r3
 800dd90:	d001      	beq.n	800dd96 <__ssrefill_r+0x14>
 800dd92:	f7fe fd51 	bl	800c838 <_free_r>
 800dd96:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800dd98:	6063      	str	r3, [r4, #4]
 800dd9a:	2000      	movs	r0, #0
 800dd9c:	6360      	str	r0, [r4, #52]	@ 0x34
 800dd9e:	b113      	cbz	r3, 800dda6 <__ssrefill_r+0x24>
 800dda0:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800dda2:	6023      	str	r3, [r4, #0]
 800dda4:	bd10      	pop	{r4, pc}
 800dda6:	6923      	ldr	r3, [r4, #16]
 800dda8:	6023      	str	r3, [r4, #0]
 800ddaa:	2300      	movs	r3, #0
 800ddac:	6063      	str	r3, [r4, #4]
 800ddae:	89a3      	ldrh	r3, [r4, #12]
 800ddb0:	f043 0320 	orr.w	r3, r3, #32
 800ddb4:	81a3      	strh	r3, [r4, #12]
 800ddb6:	f04f 30ff 	mov.w	r0, #4294967295
 800ddba:	e7f3      	b.n	800dda4 <__ssrefill_r+0x22>

0800ddbc <__ssvfiscanf_r>:
 800ddbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ddc0:	460c      	mov	r4, r1
 800ddc2:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 800ddc6:	2100      	movs	r1, #0
 800ddc8:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 800ddcc:	49a5      	ldr	r1, [pc, #660]	@ (800e064 <__ssvfiscanf_r+0x2a8>)
 800ddce:	91a0      	str	r1, [sp, #640]	@ 0x280
 800ddd0:	f10d 0804 	add.w	r8, sp, #4
 800ddd4:	49a4      	ldr	r1, [pc, #656]	@ (800e068 <__ssvfiscanf_r+0x2ac>)
 800ddd6:	4fa5      	ldr	r7, [pc, #660]	@ (800e06c <__ssvfiscanf_r+0x2b0>)
 800ddd8:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 800dddc:	4606      	mov	r6, r0
 800ddde:	91a1      	str	r1, [sp, #644]	@ 0x284
 800dde0:	9300      	str	r3, [sp, #0]
 800dde2:	7813      	ldrb	r3, [r2, #0]
 800dde4:	2b00      	cmp	r3, #0
 800dde6:	f000 8158 	beq.w	800e09a <__ssvfiscanf_r+0x2de>
 800ddea:	5cf9      	ldrb	r1, [r7, r3]
 800ddec:	f011 0108 	ands.w	r1, r1, #8
 800ddf0:	f102 0501 	add.w	r5, r2, #1
 800ddf4:	d019      	beq.n	800de2a <__ssvfiscanf_r+0x6e>
 800ddf6:	6863      	ldr	r3, [r4, #4]
 800ddf8:	2b00      	cmp	r3, #0
 800ddfa:	dd0f      	ble.n	800de1c <__ssvfiscanf_r+0x60>
 800ddfc:	6823      	ldr	r3, [r4, #0]
 800ddfe:	781a      	ldrb	r2, [r3, #0]
 800de00:	5cba      	ldrb	r2, [r7, r2]
 800de02:	0712      	lsls	r2, r2, #28
 800de04:	d401      	bmi.n	800de0a <__ssvfiscanf_r+0x4e>
 800de06:	462a      	mov	r2, r5
 800de08:	e7eb      	b.n	800dde2 <__ssvfiscanf_r+0x26>
 800de0a:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800de0c:	3201      	adds	r2, #1
 800de0e:	9245      	str	r2, [sp, #276]	@ 0x114
 800de10:	6862      	ldr	r2, [r4, #4]
 800de12:	3301      	adds	r3, #1
 800de14:	3a01      	subs	r2, #1
 800de16:	6062      	str	r2, [r4, #4]
 800de18:	6023      	str	r3, [r4, #0]
 800de1a:	e7ec      	b.n	800ddf6 <__ssvfiscanf_r+0x3a>
 800de1c:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800de1e:	4621      	mov	r1, r4
 800de20:	4630      	mov	r0, r6
 800de22:	4798      	blx	r3
 800de24:	2800      	cmp	r0, #0
 800de26:	d0e9      	beq.n	800ddfc <__ssvfiscanf_r+0x40>
 800de28:	e7ed      	b.n	800de06 <__ssvfiscanf_r+0x4a>
 800de2a:	2b25      	cmp	r3, #37	@ 0x25
 800de2c:	d012      	beq.n	800de54 <__ssvfiscanf_r+0x98>
 800de2e:	4699      	mov	r9, r3
 800de30:	6863      	ldr	r3, [r4, #4]
 800de32:	2b00      	cmp	r3, #0
 800de34:	f340 8093 	ble.w	800df5e <__ssvfiscanf_r+0x1a2>
 800de38:	6822      	ldr	r2, [r4, #0]
 800de3a:	7813      	ldrb	r3, [r2, #0]
 800de3c:	454b      	cmp	r3, r9
 800de3e:	f040 812c 	bne.w	800e09a <__ssvfiscanf_r+0x2de>
 800de42:	6863      	ldr	r3, [r4, #4]
 800de44:	3b01      	subs	r3, #1
 800de46:	6063      	str	r3, [r4, #4]
 800de48:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 800de4a:	3201      	adds	r2, #1
 800de4c:	3301      	adds	r3, #1
 800de4e:	6022      	str	r2, [r4, #0]
 800de50:	9345      	str	r3, [sp, #276]	@ 0x114
 800de52:	e7d8      	b.n	800de06 <__ssvfiscanf_r+0x4a>
 800de54:	9141      	str	r1, [sp, #260]	@ 0x104
 800de56:	9143      	str	r1, [sp, #268]	@ 0x10c
 800de58:	7853      	ldrb	r3, [r2, #1]
 800de5a:	2b2a      	cmp	r3, #42	@ 0x2a
 800de5c:	bf02      	ittt	eq
 800de5e:	2310      	moveq	r3, #16
 800de60:	1c95      	addeq	r5, r2, #2
 800de62:	9341      	streq	r3, [sp, #260]	@ 0x104
 800de64:	220a      	movs	r2, #10
 800de66:	46a9      	mov	r9, r5
 800de68:	f819 1b01 	ldrb.w	r1, [r9], #1
 800de6c:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 800de70:	2b09      	cmp	r3, #9
 800de72:	d91e      	bls.n	800deb2 <__ssvfiscanf_r+0xf6>
 800de74:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 800e070 <__ssvfiscanf_r+0x2b4>
 800de78:	2203      	movs	r2, #3
 800de7a:	4650      	mov	r0, sl
 800de7c:	f7f2 f9b8 	bl	80001f0 <memchr>
 800de80:	b138      	cbz	r0, 800de92 <__ssvfiscanf_r+0xd6>
 800de82:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800de84:	eba0 000a 	sub.w	r0, r0, sl
 800de88:	2301      	movs	r3, #1
 800de8a:	4083      	lsls	r3, r0
 800de8c:	4313      	orrs	r3, r2
 800de8e:	9341      	str	r3, [sp, #260]	@ 0x104
 800de90:	464d      	mov	r5, r9
 800de92:	f815 3b01 	ldrb.w	r3, [r5], #1
 800de96:	2b78      	cmp	r3, #120	@ 0x78
 800de98:	d806      	bhi.n	800dea8 <__ssvfiscanf_r+0xec>
 800de9a:	2b57      	cmp	r3, #87	@ 0x57
 800de9c:	d810      	bhi.n	800dec0 <__ssvfiscanf_r+0x104>
 800de9e:	2b25      	cmp	r3, #37	@ 0x25
 800dea0:	d0c5      	beq.n	800de2e <__ssvfiscanf_r+0x72>
 800dea2:	d857      	bhi.n	800df54 <__ssvfiscanf_r+0x198>
 800dea4:	2b00      	cmp	r3, #0
 800dea6:	d065      	beq.n	800df74 <__ssvfiscanf_r+0x1b8>
 800dea8:	2303      	movs	r3, #3
 800deaa:	9347      	str	r3, [sp, #284]	@ 0x11c
 800deac:	230a      	movs	r3, #10
 800deae:	9342      	str	r3, [sp, #264]	@ 0x108
 800deb0:	e078      	b.n	800dfa4 <__ssvfiscanf_r+0x1e8>
 800deb2:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 800deb4:	fb02 1103 	mla	r1, r2, r3, r1
 800deb8:	3930      	subs	r1, #48	@ 0x30
 800deba:	9143      	str	r1, [sp, #268]	@ 0x10c
 800debc:	464d      	mov	r5, r9
 800debe:	e7d2      	b.n	800de66 <__ssvfiscanf_r+0xaa>
 800dec0:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 800dec4:	2a20      	cmp	r2, #32
 800dec6:	d8ef      	bhi.n	800dea8 <__ssvfiscanf_r+0xec>
 800dec8:	a101      	add	r1, pc, #4	@ (adr r1, 800ded0 <__ssvfiscanf_r+0x114>)
 800deca:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800dece:	bf00      	nop
 800ded0:	0800df83 	.word	0x0800df83
 800ded4:	0800dea9 	.word	0x0800dea9
 800ded8:	0800dea9 	.word	0x0800dea9
 800dedc:	0800dfdd 	.word	0x0800dfdd
 800dee0:	0800dea9 	.word	0x0800dea9
 800dee4:	0800dea9 	.word	0x0800dea9
 800dee8:	0800dea9 	.word	0x0800dea9
 800deec:	0800dea9 	.word	0x0800dea9
 800def0:	0800dea9 	.word	0x0800dea9
 800def4:	0800dea9 	.word	0x0800dea9
 800def8:	0800dea9 	.word	0x0800dea9
 800defc:	0800dff3 	.word	0x0800dff3
 800df00:	0800dfd9 	.word	0x0800dfd9
 800df04:	0800df5b 	.word	0x0800df5b
 800df08:	0800df5b 	.word	0x0800df5b
 800df0c:	0800df5b 	.word	0x0800df5b
 800df10:	0800dea9 	.word	0x0800dea9
 800df14:	0800df95 	.word	0x0800df95
 800df18:	0800dea9 	.word	0x0800dea9
 800df1c:	0800dea9 	.word	0x0800dea9
 800df20:	0800dea9 	.word	0x0800dea9
 800df24:	0800dea9 	.word	0x0800dea9
 800df28:	0800e003 	.word	0x0800e003
 800df2c:	0800df9d 	.word	0x0800df9d
 800df30:	0800df7b 	.word	0x0800df7b
 800df34:	0800dea9 	.word	0x0800dea9
 800df38:	0800dea9 	.word	0x0800dea9
 800df3c:	0800dfff 	.word	0x0800dfff
 800df40:	0800dea9 	.word	0x0800dea9
 800df44:	0800dfd9 	.word	0x0800dfd9
 800df48:	0800dea9 	.word	0x0800dea9
 800df4c:	0800dea9 	.word	0x0800dea9
 800df50:	0800df83 	.word	0x0800df83
 800df54:	3b45      	subs	r3, #69	@ 0x45
 800df56:	2b02      	cmp	r3, #2
 800df58:	d8a6      	bhi.n	800dea8 <__ssvfiscanf_r+0xec>
 800df5a:	2305      	movs	r3, #5
 800df5c:	e021      	b.n	800dfa2 <__ssvfiscanf_r+0x1e6>
 800df5e:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800df60:	4621      	mov	r1, r4
 800df62:	4630      	mov	r0, r6
 800df64:	4798      	blx	r3
 800df66:	2800      	cmp	r0, #0
 800df68:	f43f af66 	beq.w	800de38 <__ssvfiscanf_r+0x7c>
 800df6c:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800df6e:	2800      	cmp	r0, #0
 800df70:	f040 808b 	bne.w	800e08a <__ssvfiscanf_r+0x2ce>
 800df74:	f04f 30ff 	mov.w	r0, #4294967295
 800df78:	e08b      	b.n	800e092 <__ssvfiscanf_r+0x2d6>
 800df7a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800df7c:	f042 0220 	orr.w	r2, r2, #32
 800df80:	9241      	str	r2, [sp, #260]	@ 0x104
 800df82:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800df84:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800df88:	9241      	str	r2, [sp, #260]	@ 0x104
 800df8a:	2210      	movs	r2, #16
 800df8c:	2b6e      	cmp	r3, #110	@ 0x6e
 800df8e:	9242      	str	r2, [sp, #264]	@ 0x108
 800df90:	d902      	bls.n	800df98 <__ssvfiscanf_r+0x1dc>
 800df92:	e005      	b.n	800dfa0 <__ssvfiscanf_r+0x1e4>
 800df94:	2300      	movs	r3, #0
 800df96:	9342      	str	r3, [sp, #264]	@ 0x108
 800df98:	2303      	movs	r3, #3
 800df9a:	e002      	b.n	800dfa2 <__ssvfiscanf_r+0x1e6>
 800df9c:	2308      	movs	r3, #8
 800df9e:	9342      	str	r3, [sp, #264]	@ 0x108
 800dfa0:	2304      	movs	r3, #4
 800dfa2:	9347      	str	r3, [sp, #284]	@ 0x11c
 800dfa4:	6863      	ldr	r3, [r4, #4]
 800dfa6:	2b00      	cmp	r3, #0
 800dfa8:	dd39      	ble.n	800e01e <__ssvfiscanf_r+0x262>
 800dfaa:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800dfac:	0659      	lsls	r1, r3, #25
 800dfae:	d404      	bmi.n	800dfba <__ssvfiscanf_r+0x1fe>
 800dfb0:	6823      	ldr	r3, [r4, #0]
 800dfb2:	781a      	ldrb	r2, [r3, #0]
 800dfb4:	5cba      	ldrb	r2, [r7, r2]
 800dfb6:	0712      	lsls	r2, r2, #28
 800dfb8:	d438      	bmi.n	800e02c <__ssvfiscanf_r+0x270>
 800dfba:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 800dfbc:	2b02      	cmp	r3, #2
 800dfbe:	dc47      	bgt.n	800e050 <__ssvfiscanf_r+0x294>
 800dfc0:	466b      	mov	r3, sp
 800dfc2:	4622      	mov	r2, r4
 800dfc4:	a941      	add	r1, sp, #260	@ 0x104
 800dfc6:	4630      	mov	r0, r6
 800dfc8:	f000 f86c 	bl	800e0a4 <_scanf_chars>
 800dfcc:	2801      	cmp	r0, #1
 800dfce:	d064      	beq.n	800e09a <__ssvfiscanf_r+0x2de>
 800dfd0:	2802      	cmp	r0, #2
 800dfd2:	f47f af18 	bne.w	800de06 <__ssvfiscanf_r+0x4a>
 800dfd6:	e7c9      	b.n	800df6c <__ssvfiscanf_r+0x1b0>
 800dfd8:	220a      	movs	r2, #10
 800dfda:	e7d7      	b.n	800df8c <__ssvfiscanf_r+0x1d0>
 800dfdc:	4629      	mov	r1, r5
 800dfde:	4640      	mov	r0, r8
 800dfe0:	f000 fa5a 	bl	800e498 <__sccl>
 800dfe4:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800dfe6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800dfea:	9341      	str	r3, [sp, #260]	@ 0x104
 800dfec:	4605      	mov	r5, r0
 800dfee:	2301      	movs	r3, #1
 800dff0:	e7d7      	b.n	800dfa2 <__ssvfiscanf_r+0x1e6>
 800dff2:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800dff4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800dff8:	9341      	str	r3, [sp, #260]	@ 0x104
 800dffa:	2300      	movs	r3, #0
 800dffc:	e7d1      	b.n	800dfa2 <__ssvfiscanf_r+0x1e6>
 800dffe:	2302      	movs	r3, #2
 800e000:	e7cf      	b.n	800dfa2 <__ssvfiscanf_r+0x1e6>
 800e002:	9841      	ldr	r0, [sp, #260]	@ 0x104
 800e004:	06c3      	lsls	r3, r0, #27
 800e006:	f53f aefe 	bmi.w	800de06 <__ssvfiscanf_r+0x4a>
 800e00a:	9b00      	ldr	r3, [sp, #0]
 800e00c:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800e00e:	1d19      	adds	r1, r3, #4
 800e010:	9100      	str	r1, [sp, #0]
 800e012:	681b      	ldr	r3, [r3, #0]
 800e014:	07c0      	lsls	r0, r0, #31
 800e016:	bf4c      	ite	mi
 800e018:	801a      	strhmi	r2, [r3, #0]
 800e01a:	601a      	strpl	r2, [r3, #0]
 800e01c:	e6f3      	b.n	800de06 <__ssvfiscanf_r+0x4a>
 800e01e:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800e020:	4621      	mov	r1, r4
 800e022:	4630      	mov	r0, r6
 800e024:	4798      	blx	r3
 800e026:	2800      	cmp	r0, #0
 800e028:	d0bf      	beq.n	800dfaa <__ssvfiscanf_r+0x1ee>
 800e02a:	e79f      	b.n	800df6c <__ssvfiscanf_r+0x1b0>
 800e02c:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800e02e:	3201      	adds	r2, #1
 800e030:	9245      	str	r2, [sp, #276]	@ 0x114
 800e032:	6862      	ldr	r2, [r4, #4]
 800e034:	3a01      	subs	r2, #1
 800e036:	2a00      	cmp	r2, #0
 800e038:	6062      	str	r2, [r4, #4]
 800e03a:	dd02      	ble.n	800e042 <__ssvfiscanf_r+0x286>
 800e03c:	3301      	adds	r3, #1
 800e03e:	6023      	str	r3, [r4, #0]
 800e040:	e7b6      	b.n	800dfb0 <__ssvfiscanf_r+0x1f4>
 800e042:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800e044:	4621      	mov	r1, r4
 800e046:	4630      	mov	r0, r6
 800e048:	4798      	blx	r3
 800e04a:	2800      	cmp	r0, #0
 800e04c:	d0b0      	beq.n	800dfb0 <__ssvfiscanf_r+0x1f4>
 800e04e:	e78d      	b.n	800df6c <__ssvfiscanf_r+0x1b0>
 800e050:	2b04      	cmp	r3, #4
 800e052:	dc0f      	bgt.n	800e074 <__ssvfiscanf_r+0x2b8>
 800e054:	466b      	mov	r3, sp
 800e056:	4622      	mov	r2, r4
 800e058:	a941      	add	r1, sp, #260	@ 0x104
 800e05a:	4630      	mov	r0, r6
 800e05c:	f000 f87c 	bl	800e158 <_scanf_i>
 800e060:	e7b4      	b.n	800dfcc <__ssvfiscanf_r+0x210>
 800e062:	bf00      	nop
 800e064:	0800dd0d 	.word	0x0800dd0d
 800e068:	0800dd83 	.word	0x0800dd83
 800e06c:	08010399 	.word	0x08010399
 800e070:	080107ce 	.word	0x080107ce
 800e074:	4b0a      	ldr	r3, [pc, #40]	@ (800e0a0 <__ssvfiscanf_r+0x2e4>)
 800e076:	2b00      	cmp	r3, #0
 800e078:	f43f aec5 	beq.w	800de06 <__ssvfiscanf_r+0x4a>
 800e07c:	466b      	mov	r3, sp
 800e07e:	4622      	mov	r2, r4
 800e080:	a941      	add	r1, sp, #260	@ 0x104
 800e082:	4630      	mov	r0, r6
 800e084:	f7fc fb40 	bl	800a708 <_scanf_float>
 800e088:	e7a0      	b.n	800dfcc <__ssvfiscanf_r+0x210>
 800e08a:	89a3      	ldrh	r3, [r4, #12]
 800e08c:	065b      	lsls	r3, r3, #25
 800e08e:	f53f af71 	bmi.w	800df74 <__ssvfiscanf_r+0x1b8>
 800e092:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 800e096:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e09a:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800e09c:	e7f9      	b.n	800e092 <__ssvfiscanf_r+0x2d6>
 800e09e:	bf00      	nop
 800e0a0:	0800a709 	.word	0x0800a709

0800e0a4 <_scanf_chars>:
 800e0a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e0a8:	4615      	mov	r5, r2
 800e0aa:	688a      	ldr	r2, [r1, #8]
 800e0ac:	4680      	mov	r8, r0
 800e0ae:	460c      	mov	r4, r1
 800e0b0:	b932      	cbnz	r2, 800e0c0 <_scanf_chars+0x1c>
 800e0b2:	698a      	ldr	r2, [r1, #24]
 800e0b4:	2a00      	cmp	r2, #0
 800e0b6:	bf14      	ite	ne
 800e0b8:	f04f 32ff 	movne.w	r2, #4294967295
 800e0bc:	2201      	moveq	r2, #1
 800e0be:	608a      	str	r2, [r1, #8]
 800e0c0:	6822      	ldr	r2, [r4, #0]
 800e0c2:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 800e154 <_scanf_chars+0xb0>
 800e0c6:	06d1      	lsls	r1, r2, #27
 800e0c8:	bf5f      	itttt	pl
 800e0ca:	681a      	ldrpl	r2, [r3, #0]
 800e0cc:	1d11      	addpl	r1, r2, #4
 800e0ce:	6019      	strpl	r1, [r3, #0]
 800e0d0:	6816      	ldrpl	r6, [r2, #0]
 800e0d2:	2700      	movs	r7, #0
 800e0d4:	69a0      	ldr	r0, [r4, #24]
 800e0d6:	b188      	cbz	r0, 800e0fc <_scanf_chars+0x58>
 800e0d8:	2801      	cmp	r0, #1
 800e0da:	d107      	bne.n	800e0ec <_scanf_chars+0x48>
 800e0dc:	682b      	ldr	r3, [r5, #0]
 800e0de:	781a      	ldrb	r2, [r3, #0]
 800e0e0:	6963      	ldr	r3, [r4, #20]
 800e0e2:	5c9b      	ldrb	r3, [r3, r2]
 800e0e4:	b953      	cbnz	r3, 800e0fc <_scanf_chars+0x58>
 800e0e6:	2f00      	cmp	r7, #0
 800e0e8:	d031      	beq.n	800e14e <_scanf_chars+0xaa>
 800e0ea:	e022      	b.n	800e132 <_scanf_chars+0x8e>
 800e0ec:	2802      	cmp	r0, #2
 800e0ee:	d120      	bne.n	800e132 <_scanf_chars+0x8e>
 800e0f0:	682b      	ldr	r3, [r5, #0]
 800e0f2:	781b      	ldrb	r3, [r3, #0]
 800e0f4:	f819 3003 	ldrb.w	r3, [r9, r3]
 800e0f8:	071b      	lsls	r3, r3, #28
 800e0fa:	d41a      	bmi.n	800e132 <_scanf_chars+0x8e>
 800e0fc:	6823      	ldr	r3, [r4, #0]
 800e0fe:	06da      	lsls	r2, r3, #27
 800e100:	bf5e      	ittt	pl
 800e102:	682b      	ldrpl	r3, [r5, #0]
 800e104:	781b      	ldrbpl	r3, [r3, #0]
 800e106:	f806 3b01 	strbpl.w	r3, [r6], #1
 800e10a:	682a      	ldr	r2, [r5, #0]
 800e10c:	686b      	ldr	r3, [r5, #4]
 800e10e:	3201      	adds	r2, #1
 800e110:	602a      	str	r2, [r5, #0]
 800e112:	68a2      	ldr	r2, [r4, #8]
 800e114:	3b01      	subs	r3, #1
 800e116:	3a01      	subs	r2, #1
 800e118:	606b      	str	r3, [r5, #4]
 800e11a:	3701      	adds	r7, #1
 800e11c:	60a2      	str	r2, [r4, #8]
 800e11e:	b142      	cbz	r2, 800e132 <_scanf_chars+0x8e>
 800e120:	2b00      	cmp	r3, #0
 800e122:	dcd7      	bgt.n	800e0d4 <_scanf_chars+0x30>
 800e124:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800e128:	4629      	mov	r1, r5
 800e12a:	4640      	mov	r0, r8
 800e12c:	4798      	blx	r3
 800e12e:	2800      	cmp	r0, #0
 800e130:	d0d0      	beq.n	800e0d4 <_scanf_chars+0x30>
 800e132:	6823      	ldr	r3, [r4, #0]
 800e134:	f013 0310 	ands.w	r3, r3, #16
 800e138:	d105      	bne.n	800e146 <_scanf_chars+0xa2>
 800e13a:	68e2      	ldr	r2, [r4, #12]
 800e13c:	3201      	adds	r2, #1
 800e13e:	60e2      	str	r2, [r4, #12]
 800e140:	69a2      	ldr	r2, [r4, #24]
 800e142:	b102      	cbz	r2, 800e146 <_scanf_chars+0xa2>
 800e144:	7033      	strb	r3, [r6, #0]
 800e146:	6923      	ldr	r3, [r4, #16]
 800e148:	443b      	add	r3, r7
 800e14a:	6123      	str	r3, [r4, #16]
 800e14c:	2000      	movs	r0, #0
 800e14e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e152:	bf00      	nop
 800e154:	08010399 	.word	0x08010399

0800e158 <_scanf_i>:
 800e158:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e15c:	4698      	mov	r8, r3
 800e15e:	4b74      	ldr	r3, [pc, #464]	@ (800e330 <_scanf_i+0x1d8>)
 800e160:	460c      	mov	r4, r1
 800e162:	4682      	mov	sl, r0
 800e164:	4616      	mov	r6, r2
 800e166:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800e16a:	b087      	sub	sp, #28
 800e16c:	ab03      	add	r3, sp, #12
 800e16e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800e172:	4b70      	ldr	r3, [pc, #448]	@ (800e334 <_scanf_i+0x1dc>)
 800e174:	69a1      	ldr	r1, [r4, #24]
 800e176:	4a70      	ldr	r2, [pc, #448]	@ (800e338 <_scanf_i+0x1e0>)
 800e178:	2903      	cmp	r1, #3
 800e17a:	bf08      	it	eq
 800e17c:	461a      	moveq	r2, r3
 800e17e:	68a3      	ldr	r3, [r4, #8]
 800e180:	9201      	str	r2, [sp, #4]
 800e182:	1e5a      	subs	r2, r3, #1
 800e184:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800e188:	bf88      	it	hi
 800e18a:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800e18e:	4627      	mov	r7, r4
 800e190:	bf82      	ittt	hi
 800e192:	eb03 0905 	addhi.w	r9, r3, r5
 800e196:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800e19a:	60a3      	strhi	r3, [r4, #8]
 800e19c:	f857 3b1c 	ldr.w	r3, [r7], #28
 800e1a0:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 800e1a4:	bf98      	it	ls
 800e1a6:	f04f 0900 	movls.w	r9, #0
 800e1aa:	6023      	str	r3, [r4, #0]
 800e1ac:	463d      	mov	r5, r7
 800e1ae:	f04f 0b00 	mov.w	fp, #0
 800e1b2:	6831      	ldr	r1, [r6, #0]
 800e1b4:	ab03      	add	r3, sp, #12
 800e1b6:	7809      	ldrb	r1, [r1, #0]
 800e1b8:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800e1bc:	2202      	movs	r2, #2
 800e1be:	f7f2 f817 	bl	80001f0 <memchr>
 800e1c2:	b328      	cbz	r0, 800e210 <_scanf_i+0xb8>
 800e1c4:	f1bb 0f01 	cmp.w	fp, #1
 800e1c8:	d159      	bne.n	800e27e <_scanf_i+0x126>
 800e1ca:	6862      	ldr	r2, [r4, #4]
 800e1cc:	b92a      	cbnz	r2, 800e1da <_scanf_i+0x82>
 800e1ce:	6822      	ldr	r2, [r4, #0]
 800e1d0:	2108      	movs	r1, #8
 800e1d2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800e1d6:	6061      	str	r1, [r4, #4]
 800e1d8:	6022      	str	r2, [r4, #0]
 800e1da:	6822      	ldr	r2, [r4, #0]
 800e1dc:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 800e1e0:	6022      	str	r2, [r4, #0]
 800e1e2:	68a2      	ldr	r2, [r4, #8]
 800e1e4:	1e51      	subs	r1, r2, #1
 800e1e6:	60a1      	str	r1, [r4, #8]
 800e1e8:	b192      	cbz	r2, 800e210 <_scanf_i+0xb8>
 800e1ea:	6832      	ldr	r2, [r6, #0]
 800e1ec:	1c51      	adds	r1, r2, #1
 800e1ee:	6031      	str	r1, [r6, #0]
 800e1f0:	7812      	ldrb	r2, [r2, #0]
 800e1f2:	f805 2b01 	strb.w	r2, [r5], #1
 800e1f6:	6872      	ldr	r2, [r6, #4]
 800e1f8:	3a01      	subs	r2, #1
 800e1fa:	2a00      	cmp	r2, #0
 800e1fc:	6072      	str	r2, [r6, #4]
 800e1fe:	dc07      	bgt.n	800e210 <_scanf_i+0xb8>
 800e200:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 800e204:	4631      	mov	r1, r6
 800e206:	4650      	mov	r0, sl
 800e208:	4790      	blx	r2
 800e20a:	2800      	cmp	r0, #0
 800e20c:	f040 8085 	bne.w	800e31a <_scanf_i+0x1c2>
 800e210:	f10b 0b01 	add.w	fp, fp, #1
 800e214:	f1bb 0f03 	cmp.w	fp, #3
 800e218:	d1cb      	bne.n	800e1b2 <_scanf_i+0x5a>
 800e21a:	6863      	ldr	r3, [r4, #4]
 800e21c:	b90b      	cbnz	r3, 800e222 <_scanf_i+0xca>
 800e21e:	230a      	movs	r3, #10
 800e220:	6063      	str	r3, [r4, #4]
 800e222:	6863      	ldr	r3, [r4, #4]
 800e224:	4945      	ldr	r1, [pc, #276]	@ (800e33c <_scanf_i+0x1e4>)
 800e226:	6960      	ldr	r0, [r4, #20]
 800e228:	1ac9      	subs	r1, r1, r3
 800e22a:	f000 f935 	bl	800e498 <__sccl>
 800e22e:	f04f 0b00 	mov.w	fp, #0
 800e232:	68a3      	ldr	r3, [r4, #8]
 800e234:	6822      	ldr	r2, [r4, #0]
 800e236:	2b00      	cmp	r3, #0
 800e238:	d03d      	beq.n	800e2b6 <_scanf_i+0x15e>
 800e23a:	6831      	ldr	r1, [r6, #0]
 800e23c:	6960      	ldr	r0, [r4, #20]
 800e23e:	f891 c000 	ldrb.w	ip, [r1]
 800e242:	f810 000c 	ldrb.w	r0, [r0, ip]
 800e246:	2800      	cmp	r0, #0
 800e248:	d035      	beq.n	800e2b6 <_scanf_i+0x15e>
 800e24a:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 800e24e:	d124      	bne.n	800e29a <_scanf_i+0x142>
 800e250:	0510      	lsls	r0, r2, #20
 800e252:	d522      	bpl.n	800e29a <_scanf_i+0x142>
 800e254:	f10b 0b01 	add.w	fp, fp, #1
 800e258:	f1b9 0f00 	cmp.w	r9, #0
 800e25c:	d003      	beq.n	800e266 <_scanf_i+0x10e>
 800e25e:	3301      	adds	r3, #1
 800e260:	f109 39ff 	add.w	r9, r9, #4294967295
 800e264:	60a3      	str	r3, [r4, #8]
 800e266:	6873      	ldr	r3, [r6, #4]
 800e268:	3b01      	subs	r3, #1
 800e26a:	2b00      	cmp	r3, #0
 800e26c:	6073      	str	r3, [r6, #4]
 800e26e:	dd1b      	ble.n	800e2a8 <_scanf_i+0x150>
 800e270:	6833      	ldr	r3, [r6, #0]
 800e272:	3301      	adds	r3, #1
 800e274:	6033      	str	r3, [r6, #0]
 800e276:	68a3      	ldr	r3, [r4, #8]
 800e278:	3b01      	subs	r3, #1
 800e27a:	60a3      	str	r3, [r4, #8]
 800e27c:	e7d9      	b.n	800e232 <_scanf_i+0xda>
 800e27e:	f1bb 0f02 	cmp.w	fp, #2
 800e282:	d1ae      	bne.n	800e1e2 <_scanf_i+0x8a>
 800e284:	6822      	ldr	r2, [r4, #0]
 800e286:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 800e28a:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 800e28e:	d1bf      	bne.n	800e210 <_scanf_i+0xb8>
 800e290:	2110      	movs	r1, #16
 800e292:	6061      	str	r1, [r4, #4]
 800e294:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800e298:	e7a2      	b.n	800e1e0 <_scanf_i+0x88>
 800e29a:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 800e29e:	6022      	str	r2, [r4, #0]
 800e2a0:	780b      	ldrb	r3, [r1, #0]
 800e2a2:	f805 3b01 	strb.w	r3, [r5], #1
 800e2a6:	e7de      	b.n	800e266 <_scanf_i+0x10e>
 800e2a8:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800e2ac:	4631      	mov	r1, r6
 800e2ae:	4650      	mov	r0, sl
 800e2b0:	4798      	blx	r3
 800e2b2:	2800      	cmp	r0, #0
 800e2b4:	d0df      	beq.n	800e276 <_scanf_i+0x11e>
 800e2b6:	6823      	ldr	r3, [r4, #0]
 800e2b8:	05d9      	lsls	r1, r3, #23
 800e2ba:	d50d      	bpl.n	800e2d8 <_scanf_i+0x180>
 800e2bc:	42bd      	cmp	r5, r7
 800e2be:	d909      	bls.n	800e2d4 <_scanf_i+0x17c>
 800e2c0:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800e2c4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800e2c8:	4632      	mov	r2, r6
 800e2ca:	4650      	mov	r0, sl
 800e2cc:	4798      	blx	r3
 800e2ce:	f105 39ff 	add.w	r9, r5, #4294967295
 800e2d2:	464d      	mov	r5, r9
 800e2d4:	42bd      	cmp	r5, r7
 800e2d6:	d028      	beq.n	800e32a <_scanf_i+0x1d2>
 800e2d8:	6822      	ldr	r2, [r4, #0]
 800e2da:	f012 0210 	ands.w	r2, r2, #16
 800e2de:	d113      	bne.n	800e308 <_scanf_i+0x1b0>
 800e2e0:	702a      	strb	r2, [r5, #0]
 800e2e2:	6863      	ldr	r3, [r4, #4]
 800e2e4:	9e01      	ldr	r6, [sp, #4]
 800e2e6:	4639      	mov	r1, r7
 800e2e8:	4650      	mov	r0, sl
 800e2ea:	47b0      	blx	r6
 800e2ec:	f8d8 3000 	ldr.w	r3, [r8]
 800e2f0:	6821      	ldr	r1, [r4, #0]
 800e2f2:	1d1a      	adds	r2, r3, #4
 800e2f4:	f8c8 2000 	str.w	r2, [r8]
 800e2f8:	f011 0f20 	tst.w	r1, #32
 800e2fc:	681b      	ldr	r3, [r3, #0]
 800e2fe:	d00f      	beq.n	800e320 <_scanf_i+0x1c8>
 800e300:	6018      	str	r0, [r3, #0]
 800e302:	68e3      	ldr	r3, [r4, #12]
 800e304:	3301      	adds	r3, #1
 800e306:	60e3      	str	r3, [r4, #12]
 800e308:	6923      	ldr	r3, [r4, #16]
 800e30a:	1bed      	subs	r5, r5, r7
 800e30c:	445d      	add	r5, fp
 800e30e:	442b      	add	r3, r5
 800e310:	6123      	str	r3, [r4, #16]
 800e312:	2000      	movs	r0, #0
 800e314:	b007      	add	sp, #28
 800e316:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e31a:	f04f 0b00 	mov.w	fp, #0
 800e31e:	e7ca      	b.n	800e2b6 <_scanf_i+0x15e>
 800e320:	07ca      	lsls	r2, r1, #31
 800e322:	bf4c      	ite	mi
 800e324:	8018      	strhmi	r0, [r3, #0]
 800e326:	6018      	strpl	r0, [r3, #0]
 800e328:	e7eb      	b.n	800e302 <_scanf_i+0x1aa>
 800e32a:	2001      	movs	r0, #1
 800e32c:	e7f2      	b.n	800e314 <_scanf_i+0x1bc>
 800e32e:	bf00      	nop
 800e330:	0800eddc 	.word	0x0800eddc
 800e334:	08009e41 	.word	0x08009e41
 800e338:	0800da2d 	.word	0x0800da2d
 800e33c:	080107e9 	.word	0x080107e9

0800e340 <__sflush_r>:
 800e340:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e344:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e348:	0716      	lsls	r6, r2, #28
 800e34a:	4605      	mov	r5, r0
 800e34c:	460c      	mov	r4, r1
 800e34e:	d454      	bmi.n	800e3fa <__sflush_r+0xba>
 800e350:	684b      	ldr	r3, [r1, #4]
 800e352:	2b00      	cmp	r3, #0
 800e354:	dc02      	bgt.n	800e35c <__sflush_r+0x1c>
 800e356:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800e358:	2b00      	cmp	r3, #0
 800e35a:	dd48      	ble.n	800e3ee <__sflush_r+0xae>
 800e35c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e35e:	2e00      	cmp	r6, #0
 800e360:	d045      	beq.n	800e3ee <__sflush_r+0xae>
 800e362:	2300      	movs	r3, #0
 800e364:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800e368:	682f      	ldr	r7, [r5, #0]
 800e36a:	6a21      	ldr	r1, [r4, #32]
 800e36c:	602b      	str	r3, [r5, #0]
 800e36e:	d030      	beq.n	800e3d2 <__sflush_r+0x92>
 800e370:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800e372:	89a3      	ldrh	r3, [r4, #12]
 800e374:	0759      	lsls	r1, r3, #29
 800e376:	d505      	bpl.n	800e384 <__sflush_r+0x44>
 800e378:	6863      	ldr	r3, [r4, #4]
 800e37a:	1ad2      	subs	r2, r2, r3
 800e37c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800e37e:	b10b      	cbz	r3, 800e384 <__sflush_r+0x44>
 800e380:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800e382:	1ad2      	subs	r2, r2, r3
 800e384:	2300      	movs	r3, #0
 800e386:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e388:	6a21      	ldr	r1, [r4, #32]
 800e38a:	4628      	mov	r0, r5
 800e38c:	47b0      	blx	r6
 800e38e:	1c43      	adds	r3, r0, #1
 800e390:	89a3      	ldrh	r3, [r4, #12]
 800e392:	d106      	bne.n	800e3a2 <__sflush_r+0x62>
 800e394:	6829      	ldr	r1, [r5, #0]
 800e396:	291d      	cmp	r1, #29
 800e398:	d82b      	bhi.n	800e3f2 <__sflush_r+0xb2>
 800e39a:	4a2a      	ldr	r2, [pc, #168]	@ (800e444 <__sflush_r+0x104>)
 800e39c:	410a      	asrs	r2, r1
 800e39e:	07d6      	lsls	r6, r2, #31
 800e3a0:	d427      	bmi.n	800e3f2 <__sflush_r+0xb2>
 800e3a2:	2200      	movs	r2, #0
 800e3a4:	6062      	str	r2, [r4, #4]
 800e3a6:	04d9      	lsls	r1, r3, #19
 800e3a8:	6922      	ldr	r2, [r4, #16]
 800e3aa:	6022      	str	r2, [r4, #0]
 800e3ac:	d504      	bpl.n	800e3b8 <__sflush_r+0x78>
 800e3ae:	1c42      	adds	r2, r0, #1
 800e3b0:	d101      	bne.n	800e3b6 <__sflush_r+0x76>
 800e3b2:	682b      	ldr	r3, [r5, #0]
 800e3b4:	b903      	cbnz	r3, 800e3b8 <__sflush_r+0x78>
 800e3b6:	6560      	str	r0, [r4, #84]	@ 0x54
 800e3b8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e3ba:	602f      	str	r7, [r5, #0]
 800e3bc:	b1b9      	cbz	r1, 800e3ee <__sflush_r+0xae>
 800e3be:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e3c2:	4299      	cmp	r1, r3
 800e3c4:	d002      	beq.n	800e3cc <__sflush_r+0x8c>
 800e3c6:	4628      	mov	r0, r5
 800e3c8:	f7fe fa36 	bl	800c838 <_free_r>
 800e3cc:	2300      	movs	r3, #0
 800e3ce:	6363      	str	r3, [r4, #52]	@ 0x34
 800e3d0:	e00d      	b.n	800e3ee <__sflush_r+0xae>
 800e3d2:	2301      	movs	r3, #1
 800e3d4:	4628      	mov	r0, r5
 800e3d6:	47b0      	blx	r6
 800e3d8:	4602      	mov	r2, r0
 800e3da:	1c50      	adds	r0, r2, #1
 800e3dc:	d1c9      	bne.n	800e372 <__sflush_r+0x32>
 800e3de:	682b      	ldr	r3, [r5, #0]
 800e3e0:	2b00      	cmp	r3, #0
 800e3e2:	d0c6      	beq.n	800e372 <__sflush_r+0x32>
 800e3e4:	2b1d      	cmp	r3, #29
 800e3e6:	d001      	beq.n	800e3ec <__sflush_r+0xac>
 800e3e8:	2b16      	cmp	r3, #22
 800e3ea:	d11e      	bne.n	800e42a <__sflush_r+0xea>
 800e3ec:	602f      	str	r7, [r5, #0]
 800e3ee:	2000      	movs	r0, #0
 800e3f0:	e022      	b.n	800e438 <__sflush_r+0xf8>
 800e3f2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e3f6:	b21b      	sxth	r3, r3
 800e3f8:	e01b      	b.n	800e432 <__sflush_r+0xf2>
 800e3fa:	690f      	ldr	r7, [r1, #16]
 800e3fc:	2f00      	cmp	r7, #0
 800e3fe:	d0f6      	beq.n	800e3ee <__sflush_r+0xae>
 800e400:	0793      	lsls	r3, r2, #30
 800e402:	680e      	ldr	r6, [r1, #0]
 800e404:	bf08      	it	eq
 800e406:	694b      	ldreq	r3, [r1, #20]
 800e408:	600f      	str	r7, [r1, #0]
 800e40a:	bf18      	it	ne
 800e40c:	2300      	movne	r3, #0
 800e40e:	eba6 0807 	sub.w	r8, r6, r7
 800e412:	608b      	str	r3, [r1, #8]
 800e414:	f1b8 0f00 	cmp.w	r8, #0
 800e418:	dde9      	ble.n	800e3ee <__sflush_r+0xae>
 800e41a:	6a21      	ldr	r1, [r4, #32]
 800e41c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800e41e:	4643      	mov	r3, r8
 800e420:	463a      	mov	r2, r7
 800e422:	4628      	mov	r0, r5
 800e424:	47b0      	blx	r6
 800e426:	2800      	cmp	r0, #0
 800e428:	dc08      	bgt.n	800e43c <__sflush_r+0xfc>
 800e42a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e42e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e432:	81a3      	strh	r3, [r4, #12]
 800e434:	f04f 30ff 	mov.w	r0, #4294967295
 800e438:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e43c:	4407      	add	r7, r0
 800e43e:	eba8 0800 	sub.w	r8, r8, r0
 800e442:	e7e7      	b.n	800e414 <__sflush_r+0xd4>
 800e444:	dfbffffe 	.word	0xdfbffffe

0800e448 <_fflush_r>:
 800e448:	b538      	push	{r3, r4, r5, lr}
 800e44a:	690b      	ldr	r3, [r1, #16]
 800e44c:	4605      	mov	r5, r0
 800e44e:	460c      	mov	r4, r1
 800e450:	b913      	cbnz	r3, 800e458 <_fflush_r+0x10>
 800e452:	2500      	movs	r5, #0
 800e454:	4628      	mov	r0, r5
 800e456:	bd38      	pop	{r3, r4, r5, pc}
 800e458:	b118      	cbz	r0, 800e462 <_fflush_r+0x1a>
 800e45a:	6a03      	ldr	r3, [r0, #32]
 800e45c:	b90b      	cbnz	r3, 800e462 <_fflush_r+0x1a>
 800e45e:	f7fc fbf3 	bl	800ac48 <__sinit>
 800e462:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e466:	2b00      	cmp	r3, #0
 800e468:	d0f3      	beq.n	800e452 <_fflush_r+0xa>
 800e46a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800e46c:	07d0      	lsls	r0, r2, #31
 800e46e:	d404      	bmi.n	800e47a <_fflush_r+0x32>
 800e470:	0599      	lsls	r1, r3, #22
 800e472:	d402      	bmi.n	800e47a <_fflush_r+0x32>
 800e474:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e476:	f7f6 f9c6 	bl	8004806 <__retarget_lock_acquire_recursive>
 800e47a:	4628      	mov	r0, r5
 800e47c:	4621      	mov	r1, r4
 800e47e:	f7ff ff5f 	bl	800e340 <__sflush_r>
 800e482:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e484:	07da      	lsls	r2, r3, #31
 800e486:	4605      	mov	r5, r0
 800e488:	d4e4      	bmi.n	800e454 <_fflush_r+0xc>
 800e48a:	89a3      	ldrh	r3, [r4, #12]
 800e48c:	059b      	lsls	r3, r3, #22
 800e48e:	d4e1      	bmi.n	800e454 <_fflush_r+0xc>
 800e490:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e492:	f7f6 f9c4 	bl	800481e <__retarget_lock_release_recursive>
 800e496:	e7dd      	b.n	800e454 <_fflush_r+0xc>

0800e498 <__sccl>:
 800e498:	b570      	push	{r4, r5, r6, lr}
 800e49a:	780b      	ldrb	r3, [r1, #0]
 800e49c:	4604      	mov	r4, r0
 800e49e:	2b5e      	cmp	r3, #94	@ 0x5e
 800e4a0:	bf0b      	itete	eq
 800e4a2:	784b      	ldrbeq	r3, [r1, #1]
 800e4a4:	1c4a      	addne	r2, r1, #1
 800e4a6:	1c8a      	addeq	r2, r1, #2
 800e4a8:	2100      	movne	r1, #0
 800e4aa:	bf08      	it	eq
 800e4ac:	2101      	moveq	r1, #1
 800e4ae:	3801      	subs	r0, #1
 800e4b0:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 800e4b4:	f800 1f01 	strb.w	r1, [r0, #1]!
 800e4b8:	42a8      	cmp	r0, r5
 800e4ba:	d1fb      	bne.n	800e4b4 <__sccl+0x1c>
 800e4bc:	b90b      	cbnz	r3, 800e4c2 <__sccl+0x2a>
 800e4be:	1e50      	subs	r0, r2, #1
 800e4c0:	bd70      	pop	{r4, r5, r6, pc}
 800e4c2:	f081 0101 	eor.w	r1, r1, #1
 800e4c6:	54e1      	strb	r1, [r4, r3]
 800e4c8:	4610      	mov	r0, r2
 800e4ca:	4602      	mov	r2, r0
 800e4cc:	f812 5b01 	ldrb.w	r5, [r2], #1
 800e4d0:	2d2d      	cmp	r5, #45	@ 0x2d
 800e4d2:	d005      	beq.n	800e4e0 <__sccl+0x48>
 800e4d4:	2d5d      	cmp	r5, #93	@ 0x5d
 800e4d6:	d016      	beq.n	800e506 <__sccl+0x6e>
 800e4d8:	2d00      	cmp	r5, #0
 800e4da:	d0f1      	beq.n	800e4c0 <__sccl+0x28>
 800e4dc:	462b      	mov	r3, r5
 800e4de:	e7f2      	b.n	800e4c6 <__sccl+0x2e>
 800e4e0:	7846      	ldrb	r6, [r0, #1]
 800e4e2:	2e5d      	cmp	r6, #93	@ 0x5d
 800e4e4:	d0fa      	beq.n	800e4dc <__sccl+0x44>
 800e4e6:	42b3      	cmp	r3, r6
 800e4e8:	dcf8      	bgt.n	800e4dc <__sccl+0x44>
 800e4ea:	3002      	adds	r0, #2
 800e4ec:	461a      	mov	r2, r3
 800e4ee:	3201      	adds	r2, #1
 800e4f0:	4296      	cmp	r6, r2
 800e4f2:	54a1      	strb	r1, [r4, r2]
 800e4f4:	dcfb      	bgt.n	800e4ee <__sccl+0x56>
 800e4f6:	1af2      	subs	r2, r6, r3
 800e4f8:	3a01      	subs	r2, #1
 800e4fa:	1c5d      	adds	r5, r3, #1
 800e4fc:	42b3      	cmp	r3, r6
 800e4fe:	bfa8      	it	ge
 800e500:	2200      	movge	r2, #0
 800e502:	18ab      	adds	r3, r5, r2
 800e504:	e7e1      	b.n	800e4ca <__sccl+0x32>
 800e506:	4610      	mov	r0, r2
 800e508:	e7da      	b.n	800e4c0 <__sccl+0x28>

0800e50a <__submore>:
 800e50a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e50e:	460c      	mov	r4, r1
 800e510:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800e512:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e516:	4299      	cmp	r1, r3
 800e518:	d11d      	bne.n	800e556 <__submore+0x4c>
 800e51a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800e51e:	f7fa fd7f 	bl	8009020 <_malloc_r>
 800e522:	b918      	cbnz	r0, 800e52c <__submore+0x22>
 800e524:	f04f 30ff 	mov.w	r0, #4294967295
 800e528:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e52c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e530:	63a3      	str	r3, [r4, #56]	@ 0x38
 800e532:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 800e536:	6360      	str	r0, [r4, #52]	@ 0x34
 800e538:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 800e53c:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800e540:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 800e544:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800e548:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 800e54c:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 800e550:	6020      	str	r0, [r4, #0]
 800e552:	2000      	movs	r0, #0
 800e554:	e7e8      	b.n	800e528 <__submore+0x1e>
 800e556:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 800e558:	0077      	lsls	r7, r6, #1
 800e55a:	463a      	mov	r2, r7
 800e55c:	f000 f86c 	bl	800e638 <_realloc_r>
 800e560:	4605      	mov	r5, r0
 800e562:	2800      	cmp	r0, #0
 800e564:	d0de      	beq.n	800e524 <__submore+0x1a>
 800e566:	eb00 0806 	add.w	r8, r0, r6
 800e56a:	4601      	mov	r1, r0
 800e56c:	4632      	mov	r2, r6
 800e56e:	4640      	mov	r0, r8
 800e570:	f7fd faf0 	bl	800bb54 <memcpy>
 800e574:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 800e578:	f8c4 8000 	str.w	r8, [r4]
 800e57c:	e7e9      	b.n	800e552 <__submore+0x48>

0800e57e <memmove>:
 800e57e:	4288      	cmp	r0, r1
 800e580:	b510      	push	{r4, lr}
 800e582:	eb01 0402 	add.w	r4, r1, r2
 800e586:	d902      	bls.n	800e58e <memmove+0x10>
 800e588:	4284      	cmp	r4, r0
 800e58a:	4623      	mov	r3, r4
 800e58c:	d807      	bhi.n	800e59e <memmove+0x20>
 800e58e:	1e43      	subs	r3, r0, #1
 800e590:	42a1      	cmp	r1, r4
 800e592:	d008      	beq.n	800e5a6 <memmove+0x28>
 800e594:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e598:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e59c:	e7f8      	b.n	800e590 <memmove+0x12>
 800e59e:	4402      	add	r2, r0
 800e5a0:	4601      	mov	r1, r0
 800e5a2:	428a      	cmp	r2, r1
 800e5a4:	d100      	bne.n	800e5a8 <memmove+0x2a>
 800e5a6:	bd10      	pop	{r4, pc}
 800e5a8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e5ac:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e5b0:	e7f7      	b.n	800e5a2 <memmove+0x24>
	...

0800e5b4 <__gettzinfo>:
 800e5b4:	4800      	ldr	r0, [pc, #0]	@ (800e5b8 <__gettzinfo+0x4>)
 800e5b6:	4770      	bx	lr
 800e5b8:	200001f0 	.word	0x200001f0

0800e5bc <__assert_func>:
 800e5bc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e5be:	4614      	mov	r4, r2
 800e5c0:	461a      	mov	r2, r3
 800e5c2:	4b09      	ldr	r3, [pc, #36]	@ (800e5e8 <__assert_func+0x2c>)
 800e5c4:	681b      	ldr	r3, [r3, #0]
 800e5c6:	4605      	mov	r5, r0
 800e5c8:	68d8      	ldr	r0, [r3, #12]
 800e5ca:	b954      	cbnz	r4, 800e5e2 <__assert_func+0x26>
 800e5cc:	4b07      	ldr	r3, [pc, #28]	@ (800e5ec <__assert_func+0x30>)
 800e5ce:	461c      	mov	r4, r3
 800e5d0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e5d4:	9100      	str	r1, [sp, #0]
 800e5d6:	462b      	mov	r3, r5
 800e5d8:	4905      	ldr	r1, [pc, #20]	@ (800e5f0 <__assert_func+0x34>)
 800e5da:	f000 f85b 	bl	800e694 <fiprintf>
 800e5de:	f000 f86b 	bl	800e6b8 <abort>
 800e5e2:	4b04      	ldr	r3, [pc, #16]	@ (800e5f4 <__assert_func+0x38>)
 800e5e4:	e7f4      	b.n	800e5d0 <__assert_func+0x14>
 800e5e6:	bf00      	nop
 800e5e8:	2000019c 	.word	0x2000019c
 800e5ec:	0800faed 	.word	0x0800faed
 800e5f0:	08010861 	.word	0x08010861
 800e5f4:	08010854 	.word	0x08010854

0800e5f8 <_calloc_r>:
 800e5f8:	b570      	push	{r4, r5, r6, lr}
 800e5fa:	fba1 5402 	umull	r5, r4, r1, r2
 800e5fe:	b93c      	cbnz	r4, 800e610 <_calloc_r+0x18>
 800e600:	4629      	mov	r1, r5
 800e602:	f7fa fd0d 	bl	8009020 <_malloc_r>
 800e606:	4606      	mov	r6, r0
 800e608:	b928      	cbnz	r0, 800e616 <_calloc_r+0x1e>
 800e60a:	2600      	movs	r6, #0
 800e60c:	4630      	mov	r0, r6
 800e60e:	bd70      	pop	{r4, r5, r6, pc}
 800e610:	220c      	movs	r2, #12
 800e612:	6002      	str	r2, [r0, #0]
 800e614:	e7f9      	b.n	800e60a <_calloc_r+0x12>
 800e616:	462a      	mov	r2, r5
 800e618:	4621      	mov	r1, r4
 800e61a:	f7fc fc47 	bl	800aeac <memset>
 800e61e:	e7f5      	b.n	800e60c <_calloc_r+0x14>

0800e620 <__env_lock>:
 800e620:	4801      	ldr	r0, [pc, #4]	@ (800e628 <__env_lock+0x8>)
 800e622:	f7f6 b8f0 	b.w	8004806 <__retarget_lock_acquire_recursive>
 800e626:	bf00      	nop
 800e628:	200028d0 	.word	0x200028d0

0800e62c <__env_unlock>:
 800e62c:	4801      	ldr	r0, [pc, #4]	@ (800e634 <__env_unlock+0x8>)
 800e62e:	f7f6 b8f6 	b.w	800481e <__retarget_lock_release_recursive>
 800e632:	bf00      	nop
 800e634:	200028d0 	.word	0x200028d0

0800e638 <_realloc_r>:
 800e638:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e63c:	4680      	mov	r8, r0
 800e63e:	4615      	mov	r5, r2
 800e640:	460c      	mov	r4, r1
 800e642:	b921      	cbnz	r1, 800e64e <_realloc_r+0x16>
 800e644:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e648:	4611      	mov	r1, r2
 800e64a:	f7fa bce9 	b.w	8009020 <_malloc_r>
 800e64e:	b92a      	cbnz	r2, 800e65c <_realloc_r+0x24>
 800e650:	f7fe f8f2 	bl	800c838 <_free_r>
 800e654:	2400      	movs	r4, #0
 800e656:	4620      	mov	r0, r4
 800e658:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e65c:	f000 f833 	bl	800e6c6 <_malloc_usable_size_r>
 800e660:	4285      	cmp	r5, r0
 800e662:	4606      	mov	r6, r0
 800e664:	d802      	bhi.n	800e66c <_realloc_r+0x34>
 800e666:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800e66a:	d8f4      	bhi.n	800e656 <_realloc_r+0x1e>
 800e66c:	4629      	mov	r1, r5
 800e66e:	4640      	mov	r0, r8
 800e670:	f7fa fcd6 	bl	8009020 <_malloc_r>
 800e674:	4607      	mov	r7, r0
 800e676:	2800      	cmp	r0, #0
 800e678:	d0ec      	beq.n	800e654 <_realloc_r+0x1c>
 800e67a:	42b5      	cmp	r5, r6
 800e67c:	462a      	mov	r2, r5
 800e67e:	4621      	mov	r1, r4
 800e680:	bf28      	it	cs
 800e682:	4632      	movcs	r2, r6
 800e684:	f7fd fa66 	bl	800bb54 <memcpy>
 800e688:	4621      	mov	r1, r4
 800e68a:	4640      	mov	r0, r8
 800e68c:	f7fe f8d4 	bl	800c838 <_free_r>
 800e690:	463c      	mov	r4, r7
 800e692:	e7e0      	b.n	800e656 <_realloc_r+0x1e>

0800e694 <fiprintf>:
 800e694:	b40e      	push	{r1, r2, r3}
 800e696:	b503      	push	{r0, r1, lr}
 800e698:	4601      	mov	r1, r0
 800e69a:	ab03      	add	r3, sp, #12
 800e69c:	4805      	ldr	r0, [pc, #20]	@ (800e6b4 <fiprintf+0x20>)
 800e69e:	f853 2b04 	ldr.w	r2, [r3], #4
 800e6a2:	6800      	ldr	r0, [r0, #0]
 800e6a4:	9301      	str	r3, [sp, #4]
 800e6a6:	f000 f83f 	bl	800e728 <_vfiprintf_r>
 800e6aa:	b002      	add	sp, #8
 800e6ac:	f85d eb04 	ldr.w	lr, [sp], #4
 800e6b0:	b003      	add	sp, #12
 800e6b2:	4770      	bx	lr
 800e6b4:	2000019c 	.word	0x2000019c

0800e6b8 <abort>:
 800e6b8:	b508      	push	{r3, lr}
 800e6ba:	2006      	movs	r0, #6
 800e6bc:	f000 fa08 	bl	800ead0 <raise>
 800e6c0:	2001      	movs	r0, #1
 800e6c2:	f7f5 ffaf 	bl	8004624 <_exit>

0800e6c6 <_malloc_usable_size_r>:
 800e6c6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e6ca:	1f18      	subs	r0, r3, #4
 800e6cc:	2b00      	cmp	r3, #0
 800e6ce:	bfbc      	itt	lt
 800e6d0:	580b      	ldrlt	r3, [r1, r0]
 800e6d2:	18c0      	addlt	r0, r0, r3
 800e6d4:	4770      	bx	lr

0800e6d6 <__sfputc_r>:
 800e6d6:	6893      	ldr	r3, [r2, #8]
 800e6d8:	3b01      	subs	r3, #1
 800e6da:	2b00      	cmp	r3, #0
 800e6dc:	b410      	push	{r4}
 800e6de:	6093      	str	r3, [r2, #8]
 800e6e0:	da08      	bge.n	800e6f4 <__sfputc_r+0x1e>
 800e6e2:	6994      	ldr	r4, [r2, #24]
 800e6e4:	42a3      	cmp	r3, r4
 800e6e6:	db01      	blt.n	800e6ec <__sfputc_r+0x16>
 800e6e8:	290a      	cmp	r1, #10
 800e6ea:	d103      	bne.n	800e6f4 <__sfputc_r+0x1e>
 800e6ec:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e6f0:	f000 b932 	b.w	800e958 <__swbuf_r>
 800e6f4:	6813      	ldr	r3, [r2, #0]
 800e6f6:	1c58      	adds	r0, r3, #1
 800e6f8:	6010      	str	r0, [r2, #0]
 800e6fa:	7019      	strb	r1, [r3, #0]
 800e6fc:	4608      	mov	r0, r1
 800e6fe:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e702:	4770      	bx	lr

0800e704 <__sfputs_r>:
 800e704:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e706:	4606      	mov	r6, r0
 800e708:	460f      	mov	r7, r1
 800e70a:	4614      	mov	r4, r2
 800e70c:	18d5      	adds	r5, r2, r3
 800e70e:	42ac      	cmp	r4, r5
 800e710:	d101      	bne.n	800e716 <__sfputs_r+0x12>
 800e712:	2000      	movs	r0, #0
 800e714:	e007      	b.n	800e726 <__sfputs_r+0x22>
 800e716:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e71a:	463a      	mov	r2, r7
 800e71c:	4630      	mov	r0, r6
 800e71e:	f7ff ffda 	bl	800e6d6 <__sfputc_r>
 800e722:	1c43      	adds	r3, r0, #1
 800e724:	d1f3      	bne.n	800e70e <__sfputs_r+0xa>
 800e726:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800e728 <_vfiprintf_r>:
 800e728:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e72c:	460d      	mov	r5, r1
 800e72e:	b09d      	sub	sp, #116	@ 0x74
 800e730:	4614      	mov	r4, r2
 800e732:	4698      	mov	r8, r3
 800e734:	4606      	mov	r6, r0
 800e736:	b118      	cbz	r0, 800e740 <_vfiprintf_r+0x18>
 800e738:	6a03      	ldr	r3, [r0, #32]
 800e73a:	b90b      	cbnz	r3, 800e740 <_vfiprintf_r+0x18>
 800e73c:	f7fc fa84 	bl	800ac48 <__sinit>
 800e740:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e742:	07d9      	lsls	r1, r3, #31
 800e744:	d405      	bmi.n	800e752 <_vfiprintf_r+0x2a>
 800e746:	89ab      	ldrh	r3, [r5, #12]
 800e748:	059a      	lsls	r2, r3, #22
 800e74a:	d402      	bmi.n	800e752 <_vfiprintf_r+0x2a>
 800e74c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e74e:	f7f6 f85a 	bl	8004806 <__retarget_lock_acquire_recursive>
 800e752:	89ab      	ldrh	r3, [r5, #12]
 800e754:	071b      	lsls	r3, r3, #28
 800e756:	d501      	bpl.n	800e75c <_vfiprintf_r+0x34>
 800e758:	692b      	ldr	r3, [r5, #16]
 800e75a:	b99b      	cbnz	r3, 800e784 <_vfiprintf_r+0x5c>
 800e75c:	4629      	mov	r1, r5
 800e75e:	4630      	mov	r0, r6
 800e760:	f000 f938 	bl	800e9d4 <__swsetup_r>
 800e764:	b170      	cbz	r0, 800e784 <_vfiprintf_r+0x5c>
 800e766:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e768:	07dc      	lsls	r4, r3, #31
 800e76a:	d504      	bpl.n	800e776 <_vfiprintf_r+0x4e>
 800e76c:	f04f 30ff 	mov.w	r0, #4294967295
 800e770:	b01d      	add	sp, #116	@ 0x74
 800e772:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e776:	89ab      	ldrh	r3, [r5, #12]
 800e778:	0598      	lsls	r0, r3, #22
 800e77a:	d4f7      	bmi.n	800e76c <_vfiprintf_r+0x44>
 800e77c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e77e:	f7f6 f84e 	bl	800481e <__retarget_lock_release_recursive>
 800e782:	e7f3      	b.n	800e76c <_vfiprintf_r+0x44>
 800e784:	2300      	movs	r3, #0
 800e786:	9309      	str	r3, [sp, #36]	@ 0x24
 800e788:	2320      	movs	r3, #32
 800e78a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e78e:	f8cd 800c 	str.w	r8, [sp, #12]
 800e792:	2330      	movs	r3, #48	@ 0x30
 800e794:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800e944 <_vfiprintf_r+0x21c>
 800e798:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e79c:	f04f 0901 	mov.w	r9, #1
 800e7a0:	4623      	mov	r3, r4
 800e7a2:	469a      	mov	sl, r3
 800e7a4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e7a8:	b10a      	cbz	r2, 800e7ae <_vfiprintf_r+0x86>
 800e7aa:	2a25      	cmp	r2, #37	@ 0x25
 800e7ac:	d1f9      	bne.n	800e7a2 <_vfiprintf_r+0x7a>
 800e7ae:	ebba 0b04 	subs.w	fp, sl, r4
 800e7b2:	d00b      	beq.n	800e7cc <_vfiprintf_r+0xa4>
 800e7b4:	465b      	mov	r3, fp
 800e7b6:	4622      	mov	r2, r4
 800e7b8:	4629      	mov	r1, r5
 800e7ba:	4630      	mov	r0, r6
 800e7bc:	f7ff ffa2 	bl	800e704 <__sfputs_r>
 800e7c0:	3001      	adds	r0, #1
 800e7c2:	f000 80a7 	beq.w	800e914 <_vfiprintf_r+0x1ec>
 800e7c6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e7c8:	445a      	add	r2, fp
 800e7ca:	9209      	str	r2, [sp, #36]	@ 0x24
 800e7cc:	f89a 3000 	ldrb.w	r3, [sl]
 800e7d0:	2b00      	cmp	r3, #0
 800e7d2:	f000 809f 	beq.w	800e914 <_vfiprintf_r+0x1ec>
 800e7d6:	2300      	movs	r3, #0
 800e7d8:	f04f 32ff 	mov.w	r2, #4294967295
 800e7dc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e7e0:	f10a 0a01 	add.w	sl, sl, #1
 800e7e4:	9304      	str	r3, [sp, #16]
 800e7e6:	9307      	str	r3, [sp, #28]
 800e7e8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e7ec:	931a      	str	r3, [sp, #104]	@ 0x68
 800e7ee:	4654      	mov	r4, sl
 800e7f0:	2205      	movs	r2, #5
 800e7f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e7f6:	4853      	ldr	r0, [pc, #332]	@ (800e944 <_vfiprintf_r+0x21c>)
 800e7f8:	f7f1 fcfa 	bl	80001f0 <memchr>
 800e7fc:	9a04      	ldr	r2, [sp, #16]
 800e7fe:	b9d8      	cbnz	r0, 800e838 <_vfiprintf_r+0x110>
 800e800:	06d1      	lsls	r1, r2, #27
 800e802:	bf44      	itt	mi
 800e804:	2320      	movmi	r3, #32
 800e806:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e80a:	0713      	lsls	r3, r2, #28
 800e80c:	bf44      	itt	mi
 800e80e:	232b      	movmi	r3, #43	@ 0x2b
 800e810:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e814:	f89a 3000 	ldrb.w	r3, [sl]
 800e818:	2b2a      	cmp	r3, #42	@ 0x2a
 800e81a:	d015      	beq.n	800e848 <_vfiprintf_r+0x120>
 800e81c:	9a07      	ldr	r2, [sp, #28]
 800e81e:	4654      	mov	r4, sl
 800e820:	2000      	movs	r0, #0
 800e822:	f04f 0c0a 	mov.w	ip, #10
 800e826:	4621      	mov	r1, r4
 800e828:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e82c:	3b30      	subs	r3, #48	@ 0x30
 800e82e:	2b09      	cmp	r3, #9
 800e830:	d94b      	bls.n	800e8ca <_vfiprintf_r+0x1a2>
 800e832:	b1b0      	cbz	r0, 800e862 <_vfiprintf_r+0x13a>
 800e834:	9207      	str	r2, [sp, #28]
 800e836:	e014      	b.n	800e862 <_vfiprintf_r+0x13a>
 800e838:	eba0 0308 	sub.w	r3, r0, r8
 800e83c:	fa09 f303 	lsl.w	r3, r9, r3
 800e840:	4313      	orrs	r3, r2
 800e842:	9304      	str	r3, [sp, #16]
 800e844:	46a2      	mov	sl, r4
 800e846:	e7d2      	b.n	800e7ee <_vfiprintf_r+0xc6>
 800e848:	9b03      	ldr	r3, [sp, #12]
 800e84a:	1d19      	adds	r1, r3, #4
 800e84c:	681b      	ldr	r3, [r3, #0]
 800e84e:	9103      	str	r1, [sp, #12]
 800e850:	2b00      	cmp	r3, #0
 800e852:	bfbb      	ittet	lt
 800e854:	425b      	neglt	r3, r3
 800e856:	f042 0202 	orrlt.w	r2, r2, #2
 800e85a:	9307      	strge	r3, [sp, #28]
 800e85c:	9307      	strlt	r3, [sp, #28]
 800e85e:	bfb8      	it	lt
 800e860:	9204      	strlt	r2, [sp, #16]
 800e862:	7823      	ldrb	r3, [r4, #0]
 800e864:	2b2e      	cmp	r3, #46	@ 0x2e
 800e866:	d10a      	bne.n	800e87e <_vfiprintf_r+0x156>
 800e868:	7863      	ldrb	r3, [r4, #1]
 800e86a:	2b2a      	cmp	r3, #42	@ 0x2a
 800e86c:	d132      	bne.n	800e8d4 <_vfiprintf_r+0x1ac>
 800e86e:	9b03      	ldr	r3, [sp, #12]
 800e870:	1d1a      	adds	r2, r3, #4
 800e872:	681b      	ldr	r3, [r3, #0]
 800e874:	9203      	str	r2, [sp, #12]
 800e876:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e87a:	3402      	adds	r4, #2
 800e87c:	9305      	str	r3, [sp, #20]
 800e87e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800e954 <_vfiprintf_r+0x22c>
 800e882:	7821      	ldrb	r1, [r4, #0]
 800e884:	2203      	movs	r2, #3
 800e886:	4650      	mov	r0, sl
 800e888:	f7f1 fcb2 	bl	80001f0 <memchr>
 800e88c:	b138      	cbz	r0, 800e89e <_vfiprintf_r+0x176>
 800e88e:	9b04      	ldr	r3, [sp, #16]
 800e890:	eba0 000a 	sub.w	r0, r0, sl
 800e894:	2240      	movs	r2, #64	@ 0x40
 800e896:	4082      	lsls	r2, r0
 800e898:	4313      	orrs	r3, r2
 800e89a:	3401      	adds	r4, #1
 800e89c:	9304      	str	r3, [sp, #16]
 800e89e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e8a2:	4829      	ldr	r0, [pc, #164]	@ (800e948 <_vfiprintf_r+0x220>)
 800e8a4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e8a8:	2206      	movs	r2, #6
 800e8aa:	f7f1 fca1 	bl	80001f0 <memchr>
 800e8ae:	2800      	cmp	r0, #0
 800e8b0:	d03f      	beq.n	800e932 <_vfiprintf_r+0x20a>
 800e8b2:	4b26      	ldr	r3, [pc, #152]	@ (800e94c <_vfiprintf_r+0x224>)
 800e8b4:	bb1b      	cbnz	r3, 800e8fe <_vfiprintf_r+0x1d6>
 800e8b6:	9b03      	ldr	r3, [sp, #12]
 800e8b8:	3307      	adds	r3, #7
 800e8ba:	f023 0307 	bic.w	r3, r3, #7
 800e8be:	3308      	adds	r3, #8
 800e8c0:	9303      	str	r3, [sp, #12]
 800e8c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e8c4:	443b      	add	r3, r7
 800e8c6:	9309      	str	r3, [sp, #36]	@ 0x24
 800e8c8:	e76a      	b.n	800e7a0 <_vfiprintf_r+0x78>
 800e8ca:	fb0c 3202 	mla	r2, ip, r2, r3
 800e8ce:	460c      	mov	r4, r1
 800e8d0:	2001      	movs	r0, #1
 800e8d2:	e7a8      	b.n	800e826 <_vfiprintf_r+0xfe>
 800e8d4:	2300      	movs	r3, #0
 800e8d6:	3401      	adds	r4, #1
 800e8d8:	9305      	str	r3, [sp, #20]
 800e8da:	4619      	mov	r1, r3
 800e8dc:	f04f 0c0a 	mov.w	ip, #10
 800e8e0:	4620      	mov	r0, r4
 800e8e2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e8e6:	3a30      	subs	r2, #48	@ 0x30
 800e8e8:	2a09      	cmp	r2, #9
 800e8ea:	d903      	bls.n	800e8f4 <_vfiprintf_r+0x1cc>
 800e8ec:	2b00      	cmp	r3, #0
 800e8ee:	d0c6      	beq.n	800e87e <_vfiprintf_r+0x156>
 800e8f0:	9105      	str	r1, [sp, #20]
 800e8f2:	e7c4      	b.n	800e87e <_vfiprintf_r+0x156>
 800e8f4:	fb0c 2101 	mla	r1, ip, r1, r2
 800e8f8:	4604      	mov	r4, r0
 800e8fa:	2301      	movs	r3, #1
 800e8fc:	e7f0      	b.n	800e8e0 <_vfiprintf_r+0x1b8>
 800e8fe:	ab03      	add	r3, sp, #12
 800e900:	9300      	str	r3, [sp, #0]
 800e902:	462a      	mov	r2, r5
 800e904:	4b12      	ldr	r3, [pc, #72]	@ (800e950 <_vfiprintf_r+0x228>)
 800e906:	a904      	add	r1, sp, #16
 800e908:	4630      	mov	r0, r6
 800e90a:	f7fb fb45 	bl	8009f98 <_printf_float>
 800e90e:	4607      	mov	r7, r0
 800e910:	1c78      	adds	r0, r7, #1
 800e912:	d1d6      	bne.n	800e8c2 <_vfiprintf_r+0x19a>
 800e914:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e916:	07d9      	lsls	r1, r3, #31
 800e918:	d405      	bmi.n	800e926 <_vfiprintf_r+0x1fe>
 800e91a:	89ab      	ldrh	r3, [r5, #12]
 800e91c:	059a      	lsls	r2, r3, #22
 800e91e:	d402      	bmi.n	800e926 <_vfiprintf_r+0x1fe>
 800e920:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e922:	f7f5 ff7c 	bl	800481e <__retarget_lock_release_recursive>
 800e926:	89ab      	ldrh	r3, [r5, #12]
 800e928:	065b      	lsls	r3, r3, #25
 800e92a:	f53f af1f 	bmi.w	800e76c <_vfiprintf_r+0x44>
 800e92e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e930:	e71e      	b.n	800e770 <_vfiprintf_r+0x48>
 800e932:	ab03      	add	r3, sp, #12
 800e934:	9300      	str	r3, [sp, #0]
 800e936:	462a      	mov	r2, r5
 800e938:	4b05      	ldr	r3, [pc, #20]	@ (800e950 <_vfiprintf_r+0x228>)
 800e93a:	a904      	add	r1, sp, #16
 800e93c:	4630      	mov	r0, r6
 800e93e:	f7fb fdc3 	bl	800a4c8 <_printf_i>
 800e942:	e7e4      	b.n	800e90e <_vfiprintf_r+0x1e6>
 800e944:	080107c8 	.word	0x080107c8
 800e948:	080107d2 	.word	0x080107d2
 800e94c:	08009f99 	.word	0x08009f99
 800e950:	0800e705 	.word	0x0800e705
 800e954:	080107ce 	.word	0x080107ce

0800e958 <__swbuf_r>:
 800e958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e95a:	460e      	mov	r6, r1
 800e95c:	4614      	mov	r4, r2
 800e95e:	4605      	mov	r5, r0
 800e960:	b118      	cbz	r0, 800e96a <__swbuf_r+0x12>
 800e962:	6a03      	ldr	r3, [r0, #32]
 800e964:	b90b      	cbnz	r3, 800e96a <__swbuf_r+0x12>
 800e966:	f7fc f96f 	bl	800ac48 <__sinit>
 800e96a:	69a3      	ldr	r3, [r4, #24]
 800e96c:	60a3      	str	r3, [r4, #8]
 800e96e:	89a3      	ldrh	r3, [r4, #12]
 800e970:	071a      	lsls	r2, r3, #28
 800e972:	d501      	bpl.n	800e978 <__swbuf_r+0x20>
 800e974:	6923      	ldr	r3, [r4, #16]
 800e976:	b943      	cbnz	r3, 800e98a <__swbuf_r+0x32>
 800e978:	4621      	mov	r1, r4
 800e97a:	4628      	mov	r0, r5
 800e97c:	f000 f82a 	bl	800e9d4 <__swsetup_r>
 800e980:	b118      	cbz	r0, 800e98a <__swbuf_r+0x32>
 800e982:	f04f 37ff 	mov.w	r7, #4294967295
 800e986:	4638      	mov	r0, r7
 800e988:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e98a:	6823      	ldr	r3, [r4, #0]
 800e98c:	6922      	ldr	r2, [r4, #16]
 800e98e:	1a98      	subs	r0, r3, r2
 800e990:	6963      	ldr	r3, [r4, #20]
 800e992:	b2f6      	uxtb	r6, r6
 800e994:	4283      	cmp	r3, r0
 800e996:	4637      	mov	r7, r6
 800e998:	dc05      	bgt.n	800e9a6 <__swbuf_r+0x4e>
 800e99a:	4621      	mov	r1, r4
 800e99c:	4628      	mov	r0, r5
 800e99e:	f7ff fd53 	bl	800e448 <_fflush_r>
 800e9a2:	2800      	cmp	r0, #0
 800e9a4:	d1ed      	bne.n	800e982 <__swbuf_r+0x2a>
 800e9a6:	68a3      	ldr	r3, [r4, #8]
 800e9a8:	3b01      	subs	r3, #1
 800e9aa:	60a3      	str	r3, [r4, #8]
 800e9ac:	6823      	ldr	r3, [r4, #0]
 800e9ae:	1c5a      	adds	r2, r3, #1
 800e9b0:	6022      	str	r2, [r4, #0]
 800e9b2:	701e      	strb	r6, [r3, #0]
 800e9b4:	6962      	ldr	r2, [r4, #20]
 800e9b6:	1c43      	adds	r3, r0, #1
 800e9b8:	429a      	cmp	r2, r3
 800e9ba:	d004      	beq.n	800e9c6 <__swbuf_r+0x6e>
 800e9bc:	89a3      	ldrh	r3, [r4, #12]
 800e9be:	07db      	lsls	r3, r3, #31
 800e9c0:	d5e1      	bpl.n	800e986 <__swbuf_r+0x2e>
 800e9c2:	2e0a      	cmp	r6, #10
 800e9c4:	d1df      	bne.n	800e986 <__swbuf_r+0x2e>
 800e9c6:	4621      	mov	r1, r4
 800e9c8:	4628      	mov	r0, r5
 800e9ca:	f7ff fd3d 	bl	800e448 <_fflush_r>
 800e9ce:	2800      	cmp	r0, #0
 800e9d0:	d0d9      	beq.n	800e986 <__swbuf_r+0x2e>
 800e9d2:	e7d6      	b.n	800e982 <__swbuf_r+0x2a>

0800e9d4 <__swsetup_r>:
 800e9d4:	b538      	push	{r3, r4, r5, lr}
 800e9d6:	4b29      	ldr	r3, [pc, #164]	@ (800ea7c <__swsetup_r+0xa8>)
 800e9d8:	4605      	mov	r5, r0
 800e9da:	6818      	ldr	r0, [r3, #0]
 800e9dc:	460c      	mov	r4, r1
 800e9de:	b118      	cbz	r0, 800e9e8 <__swsetup_r+0x14>
 800e9e0:	6a03      	ldr	r3, [r0, #32]
 800e9e2:	b90b      	cbnz	r3, 800e9e8 <__swsetup_r+0x14>
 800e9e4:	f7fc f930 	bl	800ac48 <__sinit>
 800e9e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e9ec:	0719      	lsls	r1, r3, #28
 800e9ee:	d422      	bmi.n	800ea36 <__swsetup_r+0x62>
 800e9f0:	06da      	lsls	r2, r3, #27
 800e9f2:	d407      	bmi.n	800ea04 <__swsetup_r+0x30>
 800e9f4:	2209      	movs	r2, #9
 800e9f6:	602a      	str	r2, [r5, #0]
 800e9f8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e9fc:	81a3      	strh	r3, [r4, #12]
 800e9fe:	f04f 30ff 	mov.w	r0, #4294967295
 800ea02:	e033      	b.n	800ea6c <__swsetup_r+0x98>
 800ea04:	0758      	lsls	r0, r3, #29
 800ea06:	d512      	bpl.n	800ea2e <__swsetup_r+0x5a>
 800ea08:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ea0a:	b141      	cbz	r1, 800ea1e <__swsetup_r+0x4a>
 800ea0c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ea10:	4299      	cmp	r1, r3
 800ea12:	d002      	beq.n	800ea1a <__swsetup_r+0x46>
 800ea14:	4628      	mov	r0, r5
 800ea16:	f7fd ff0f 	bl	800c838 <_free_r>
 800ea1a:	2300      	movs	r3, #0
 800ea1c:	6363      	str	r3, [r4, #52]	@ 0x34
 800ea1e:	89a3      	ldrh	r3, [r4, #12]
 800ea20:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800ea24:	81a3      	strh	r3, [r4, #12]
 800ea26:	2300      	movs	r3, #0
 800ea28:	6063      	str	r3, [r4, #4]
 800ea2a:	6923      	ldr	r3, [r4, #16]
 800ea2c:	6023      	str	r3, [r4, #0]
 800ea2e:	89a3      	ldrh	r3, [r4, #12]
 800ea30:	f043 0308 	orr.w	r3, r3, #8
 800ea34:	81a3      	strh	r3, [r4, #12]
 800ea36:	6923      	ldr	r3, [r4, #16]
 800ea38:	b94b      	cbnz	r3, 800ea4e <__swsetup_r+0x7a>
 800ea3a:	89a3      	ldrh	r3, [r4, #12]
 800ea3c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800ea40:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ea44:	d003      	beq.n	800ea4e <__swsetup_r+0x7a>
 800ea46:	4621      	mov	r1, r4
 800ea48:	4628      	mov	r0, r5
 800ea4a:	f000 f883 	bl	800eb54 <__smakebuf_r>
 800ea4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ea52:	f013 0201 	ands.w	r2, r3, #1
 800ea56:	d00a      	beq.n	800ea6e <__swsetup_r+0x9a>
 800ea58:	2200      	movs	r2, #0
 800ea5a:	60a2      	str	r2, [r4, #8]
 800ea5c:	6962      	ldr	r2, [r4, #20]
 800ea5e:	4252      	negs	r2, r2
 800ea60:	61a2      	str	r2, [r4, #24]
 800ea62:	6922      	ldr	r2, [r4, #16]
 800ea64:	b942      	cbnz	r2, 800ea78 <__swsetup_r+0xa4>
 800ea66:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800ea6a:	d1c5      	bne.n	800e9f8 <__swsetup_r+0x24>
 800ea6c:	bd38      	pop	{r3, r4, r5, pc}
 800ea6e:	0799      	lsls	r1, r3, #30
 800ea70:	bf58      	it	pl
 800ea72:	6962      	ldrpl	r2, [r4, #20]
 800ea74:	60a2      	str	r2, [r4, #8]
 800ea76:	e7f4      	b.n	800ea62 <__swsetup_r+0x8e>
 800ea78:	2000      	movs	r0, #0
 800ea7a:	e7f7      	b.n	800ea6c <__swsetup_r+0x98>
 800ea7c:	2000019c 	.word	0x2000019c

0800ea80 <_raise_r>:
 800ea80:	291f      	cmp	r1, #31
 800ea82:	b538      	push	{r3, r4, r5, lr}
 800ea84:	4605      	mov	r5, r0
 800ea86:	460c      	mov	r4, r1
 800ea88:	d904      	bls.n	800ea94 <_raise_r+0x14>
 800ea8a:	2316      	movs	r3, #22
 800ea8c:	6003      	str	r3, [r0, #0]
 800ea8e:	f04f 30ff 	mov.w	r0, #4294967295
 800ea92:	bd38      	pop	{r3, r4, r5, pc}
 800ea94:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800ea96:	b112      	cbz	r2, 800ea9e <_raise_r+0x1e>
 800ea98:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ea9c:	b94b      	cbnz	r3, 800eab2 <_raise_r+0x32>
 800ea9e:	4628      	mov	r0, r5
 800eaa0:	f000 f830 	bl	800eb04 <_getpid_r>
 800eaa4:	4622      	mov	r2, r4
 800eaa6:	4601      	mov	r1, r0
 800eaa8:	4628      	mov	r0, r5
 800eaaa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800eaae:	f000 b817 	b.w	800eae0 <_kill_r>
 800eab2:	2b01      	cmp	r3, #1
 800eab4:	d00a      	beq.n	800eacc <_raise_r+0x4c>
 800eab6:	1c59      	adds	r1, r3, #1
 800eab8:	d103      	bne.n	800eac2 <_raise_r+0x42>
 800eaba:	2316      	movs	r3, #22
 800eabc:	6003      	str	r3, [r0, #0]
 800eabe:	2001      	movs	r0, #1
 800eac0:	e7e7      	b.n	800ea92 <_raise_r+0x12>
 800eac2:	2100      	movs	r1, #0
 800eac4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800eac8:	4620      	mov	r0, r4
 800eaca:	4798      	blx	r3
 800eacc:	2000      	movs	r0, #0
 800eace:	e7e0      	b.n	800ea92 <_raise_r+0x12>

0800ead0 <raise>:
 800ead0:	4b02      	ldr	r3, [pc, #8]	@ (800eadc <raise+0xc>)
 800ead2:	4601      	mov	r1, r0
 800ead4:	6818      	ldr	r0, [r3, #0]
 800ead6:	f7ff bfd3 	b.w	800ea80 <_raise_r>
 800eada:	bf00      	nop
 800eadc:	2000019c 	.word	0x2000019c

0800eae0 <_kill_r>:
 800eae0:	b538      	push	{r3, r4, r5, lr}
 800eae2:	4d07      	ldr	r5, [pc, #28]	@ (800eb00 <_kill_r+0x20>)
 800eae4:	2300      	movs	r3, #0
 800eae6:	4604      	mov	r4, r0
 800eae8:	4608      	mov	r0, r1
 800eaea:	4611      	mov	r1, r2
 800eaec:	602b      	str	r3, [r5, #0]
 800eaee:	f7f5 fd91 	bl	8004614 <_kill>
 800eaf2:	1c43      	adds	r3, r0, #1
 800eaf4:	d102      	bne.n	800eafc <_kill_r+0x1c>
 800eaf6:	682b      	ldr	r3, [r5, #0]
 800eaf8:	b103      	cbz	r3, 800eafc <_kill_r+0x1c>
 800eafa:	6023      	str	r3, [r4, #0]
 800eafc:	bd38      	pop	{r3, r4, r5, pc}
 800eafe:	bf00      	nop
 800eb00:	20008d50 	.word	0x20008d50

0800eb04 <_getpid_r>:
 800eb04:	f7f5 bd84 	b.w	8004610 <_getpid>

0800eb08 <__swhatbuf_r>:
 800eb08:	b570      	push	{r4, r5, r6, lr}
 800eb0a:	460c      	mov	r4, r1
 800eb0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eb10:	2900      	cmp	r1, #0
 800eb12:	b096      	sub	sp, #88	@ 0x58
 800eb14:	4615      	mov	r5, r2
 800eb16:	461e      	mov	r6, r3
 800eb18:	da0d      	bge.n	800eb36 <__swhatbuf_r+0x2e>
 800eb1a:	89a3      	ldrh	r3, [r4, #12]
 800eb1c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800eb20:	f04f 0100 	mov.w	r1, #0
 800eb24:	bf14      	ite	ne
 800eb26:	2340      	movne	r3, #64	@ 0x40
 800eb28:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800eb2c:	2000      	movs	r0, #0
 800eb2e:	6031      	str	r1, [r6, #0]
 800eb30:	602b      	str	r3, [r5, #0]
 800eb32:	b016      	add	sp, #88	@ 0x58
 800eb34:	bd70      	pop	{r4, r5, r6, pc}
 800eb36:	466a      	mov	r2, sp
 800eb38:	f000 f848 	bl	800ebcc <_fstat_r>
 800eb3c:	2800      	cmp	r0, #0
 800eb3e:	dbec      	blt.n	800eb1a <__swhatbuf_r+0x12>
 800eb40:	9901      	ldr	r1, [sp, #4]
 800eb42:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800eb46:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800eb4a:	4259      	negs	r1, r3
 800eb4c:	4159      	adcs	r1, r3
 800eb4e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800eb52:	e7eb      	b.n	800eb2c <__swhatbuf_r+0x24>

0800eb54 <__smakebuf_r>:
 800eb54:	898b      	ldrh	r3, [r1, #12]
 800eb56:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800eb58:	079d      	lsls	r5, r3, #30
 800eb5a:	4606      	mov	r6, r0
 800eb5c:	460c      	mov	r4, r1
 800eb5e:	d507      	bpl.n	800eb70 <__smakebuf_r+0x1c>
 800eb60:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800eb64:	6023      	str	r3, [r4, #0]
 800eb66:	6123      	str	r3, [r4, #16]
 800eb68:	2301      	movs	r3, #1
 800eb6a:	6163      	str	r3, [r4, #20]
 800eb6c:	b003      	add	sp, #12
 800eb6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800eb70:	ab01      	add	r3, sp, #4
 800eb72:	466a      	mov	r2, sp
 800eb74:	f7ff ffc8 	bl	800eb08 <__swhatbuf_r>
 800eb78:	9f00      	ldr	r7, [sp, #0]
 800eb7a:	4605      	mov	r5, r0
 800eb7c:	4639      	mov	r1, r7
 800eb7e:	4630      	mov	r0, r6
 800eb80:	f7fa fa4e 	bl	8009020 <_malloc_r>
 800eb84:	b948      	cbnz	r0, 800eb9a <__smakebuf_r+0x46>
 800eb86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800eb8a:	059a      	lsls	r2, r3, #22
 800eb8c:	d4ee      	bmi.n	800eb6c <__smakebuf_r+0x18>
 800eb8e:	f023 0303 	bic.w	r3, r3, #3
 800eb92:	f043 0302 	orr.w	r3, r3, #2
 800eb96:	81a3      	strh	r3, [r4, #12]
 800eb98:	e7e2      	b.n	800eb60 <__smakebuf_r+0xc>
 800eb9a:	89a3      	ldrh	r3, [r4, #12]
 800eb9c:	6020      	str	r0, [r4, #0]
 800eb9e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800eba2:	81a3      	strh	r3, [r4, #12]
 800eba4:	9b01      	ldr	r3, [sp, #4]
 800eba6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800ebaa:	b15b      	cbz	r3, 800ebc4 <__smakebuf_r+0x70>
 800ebac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ebb0:	4630      	mov	r0, r6
 800ebb2:	f000 f81d 	bl	800ebf0 <_isatty_r>
 800ebb6:	b128      	cbz	r0, 800ebc4 <__smakebuf_r+0x70>
 800ebb8:	89a3      	ldrh	r3, [r4, #12]
 800ebba:	f023 0303 	bic.w	r3, r3, #3
 800ebbe:	f043 0301 	orr.w	r3, r3, #1
 800ebc2:	81a3      	strh	r3, [r4, #12]
 800ebc4:	89a3      	ldrh	r3, [r4, #12]
 800ebc6:	431d      	orrs	r5, r3
 800ebc8:	81a5      	strh	r5, [r4, #12]
 800ebca:	e7cf      	b.n	800eb6c <__smakebuf_r+0x18>

0800ebcc <_fstat_r>:
 800ebcc:	b538      	push	{r3, r4, r5, lr}
 800ebce:	4d07      	ldr	r5, [pc, #28]	@ (800ebec <_fstat_r+0x20>)
 800ebd0:	2300      	movs	r3, #0
 800ebd2:	4604      	mov	r4, r0
 800ebd4:	4608      	mov	r0, r1
 800ebd6:	4611      	mov	r1, r2
 800ebd8:	602b      	str	r3, [r5, #0]
 800ebda:	f7f5 fd48 	bl	800466e <_fstat>
 800ebde:	1c43      	adds	r3, r0, #1
 800ebe0:	d102      	bne.n	800ebe8 <_fstat_r+0x1c>
 800ebe2:	682b      	ldr	r3, [r5, #0]
 800ebe4:	b103      	cbz	r3, 800ebe8 <_fstat_r+0x1c>
 800ebe6:	6023      	str	r3, [r4, #0]
 800ebe8:	bd38      	pop	{r3, r4, r5, pc}
 800ebea:	bf00      	nop
 800ebec:	20008d50 	.word	0x20008d50

0800ebf0 <_isatty_r>:
 800ebf0:	b538      	push	{r3, r4, r5, lr}
 800ebf2:	4d06      	ldr	r5, [pc, #24]	@ (800ec0c <_isatty_r+0x1c>)
 800ebf4:	2300      	movs	r3, #0
 800ebf6:	4604      	mov	r4, r0
 800ebf8:	4608      	mov	r0, r1
 800ebfa:	602b      	str	r3, [r5, #0]
 800ebfc:	f7f5 fd3c 	bl	8004678 <_isatty>
 800ec00:	1c43      	adds	r3, r0, #1
 800ec02:	d102      	bne.n	800ec0a <_isatty_r+0x1a>
 800ec04:	682b      	ldr	r3, [r5, #0]
 800ec06:	b103      	cbz	r3, 800ec0a <_isatty_r+0x1a>
 800ec08:	6023      	str	r3, [r4, #0]
 800ec0a:	bd38      	pop	{r3, r4, r5, pc}
 800ec0c:	20008d50 	.word	0x20008d50

0800ec10 <round>:
 800ec10:	ec51 0b10 	vmov	r0, r1, d0
 800ec14:	b570      	push	{r4, r5, r6, lr}
 800ec16:	f3c1 540a 	ubfx	r4, r1, #20, #11
 800ec1a:	f2a4 32ff 	subw	r2, r4, #1023	@ 0x3ff
 800ec1e:	2a13      	cmp	r2, #19
 800ec20:	460b      	mov	r3, r1
 800ec22:	4605      	mov	r5, r0
 800ec24:	dc1b      	bgt.n	800ec5e <round+0x4e>
 800ec26:	2a00      	cmp	r2, #0
 800ec28:	da0b      	bge.n	800ec42 <round+0x32>
 800ec2a:	f001 4300 	and.w	r3, r1, #2147483648	@ 0x80000000
 800ec2e:	3201      	adds	r2, #1
 800ec30:	bf04      	itt	eq
 800ec32:	f043 537f 	orreq.w	r3, r3, #1069547520	@ 0x3fc00000
 800ec36:	f443 1340 	orreq.w	r3, r3, #3145728	@ 0x300000
 800ec3a:	2200      	movs	r2, #0
 800ec3c:	4619      	mov	r1, r3
 800ec3e:	4610      	mov	r0, r2
 800ec40:	e015      	b.n	800ec6e <round+0x5e>
 800ec42:	4c15      	ldr	r4, [pc, #84]	@ (800ec98 <round+0x88>)
 800ec44:	4114      	asrs	r4, r2
 800ec46:	ea04 0601 	and.w	r6, r4, r1
 800ec4a:	4306      	orrs	r6, r0
 800ec4c:	d00f      	beq.n	800ec6e <round+0x5e>
 800ec4e:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 800ec52:	fa41 f202 	asr.w	r2, r1, r2
 800ec56:	4413      	add	r3, r2
 800ec58:	ea23 0304 	bic.w	r3, r3, r4
 800ec5c:	e7ed      	b.n	800ec3a <round+0x2a>
 800ec5e:	2a33      	cmp	r2, #51	@ 0x33
 800ec60:	dd08      	ble.n	800ec74 <round+0x64>
 800ec62:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 800ec66:	d102      	bne.n	800ec6e <round+0x5e>
 800ec68:	4602      	mov	r2, r0
 800ec6a:	f7f1 fb1f 	bl	80002ac <__adddf3>
 800ec6e:	ec41 0b10 	vmov	d0, r0, r1
 800ec72:	bd70      	pop	{r4, r5, r6, pc}
 800ec74:	f2a4 4613 	subw	r6, r4, #1043	@ 0x413
 800ec78:	f04f 34ff 	mov.w	r4, #4294967295
 800ec7c:	40f4      	lsrs	r4, r6
 800ec7e:	4204      	tst	r4, r0
 800ec80:	d0f5      	beq.n	800ec6e <round+0x5e>
 800ec82:	f1c2 0133 	rsb	r1, r2, #51	@ 0x33
 800ec86:	2201      	movs	r2, #1
 800ec88:	408a      	lsls	r2, r1
 800ec8a:	1952      	adds	r2, r2, r5
 800ec8c:	bf28      	it	cs
 800ec8e:	3301      	addcs	r3, #1
 800ec90:	ea22 0204 	bic.w	r2, r2, r4
 800ec94:	e7d2      	b.n	800ec3c <round+0x2c>
 800ec96:	bf00      	nop
 800ec98:	000fffff 	.word	0x000fffff

0800ec9c <_init>:
 800ec9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ec9e:	bf00      	nop
 800eca0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800eca2:	bc08      	pop	{r3}
 800eca4:	469e      	mov	lr, r3
 800eca6:	4770      	bx	lr

0800eca8 <_fini>:
 800eca8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ecaa:	bf00      	nop
 800ecac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ecae:	bc08      	pop	{r3}
 800ecb0:	469e      	mov	lr, r3
 800ecb2:	4770      	bx	lr
