
test-F303.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
<<<<<<< HEAD
  1 .text         0000e9a4  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001b40  0800eb38  0800eb38  0000fb38  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010678  08010678  00012248  2**0
                  CONTENTS
  4 .ARM          00000008  08010678  08010678  00011678  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010680  08010680  00012248  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010680  08010680  00011680  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08010684  08010684  00011684  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000248  20000000  08010688  00012000  2**3
=======
  1 .text         0000c5f8  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c40  0800c788  0800c788  0000d788  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d3c8  0800d3c8  0000f248  2**0
                  CONTENTS
  4 .ARM          00000008  0800d3c8  0800d3c8  0000e3c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d3d0  0800d3d0  0000f248  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d3d0  0800d3d0  0000e3d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d3d4  0800d3d4  0000e3d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000248  20000000  0800d3d8  0000f000  2**3
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00012248  2**0
                  CONTENTS
<<<<<<< HEAD
 10 .bss          00006e8c  20000248  20000248  00012248  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  200070d4  200070d4  00012248  2**0
=======
 10 .bss          00006b7c  20000248  20000248  0000f248  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  20006dc4  20006dc4  0000f248  2**0
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00012248  2**0
                  CONTENTS, READONLY
<<<<<<< HEAD
 13 .debug_info   000308c7  00000000  00000000  00012278  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000061a2  00000000  00000000  00042b3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loclists 0000f4cb  00000000  00000000  00048ce1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001b28  00000000  00000000  000581b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001bc7  00000000  00000000  00059cd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00006ab0  00000000  00000000  0005b89f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0002deba  00000000  00000000  0006234f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d5d1f  00000000  00000000  00090209  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  00165f28  2**0
                  CONTENTS, READONLY
 22 .debug_frame  000066c0  00000000  00000000  00165f6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000051  00000000  00000000  0016c62c  2**0
=======
 13 .debug_info   0002fbb4  00000000  00000000  0000f278  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005f34  00000000  00000000  0003ee2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loclists 0000f391  00000000  00000000  00044d60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001af0  00000000  00000000  000540f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001b89  00000000  00000000  00055be8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000065b7  00000000  00000000  00057771  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0002d0cd  00000000  00000000  0005dd28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d5caf  00000000  00000000  0008adf5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  00160aa4  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000657c  00000000  00000000  00160ae8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000051  00000000  00000000  00167064  2**0
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000248 	.word	0x20000248
 80001ac:	00000000 	.word	0x00000000
<<<<<<< HEAD
 80001b0:	0800eb1c 	.word	0x0800eb1c
=======
 80001b0:	0800c770 	.word	0x0800c770
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000024c 	.word	0x2000024c
<<<<<<< HEAD
 80001cc:	0800eb1c 	.word	0x0800eb1c
=======
 80001cc:	0800c770 	.word	0x0800c770
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_d2lz>:
 8000ca8:	b538      	push	{r3, r4, r5, lr}
 8000caa:	2200      	movs	r2, #0
 8000cac:	2300      	movs	r3, #0
 8000cae:	4604      	mov	r4, r0
 8000cb0:	460d      	mov	r5, r1
 8000cb2:	f7ff ff23 	bl	8000afc <__aeabi_dcmplt>
 8000cb6:	b928      	cbnz	r0, 8000cc4 <__aeabi_d2lz+0x1c>
 8000cb8:	4620      	mov	r0, r4
 8000cba:	4629      	mov	r1, r5
 8000cbc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cc0:	f000 b80a 	b.w	8000cd8 <__aeabi_d2ulz>
 8000cc4:	4620      	mov	r0, r4
 8000cc6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cca:	f000 f805 	bl	8000cd8 <__aeabi_d2ulz>
 8000cce:	4240      	negs	r0, r0
 8000cd0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cd4:	bd38      	pop	{r3, r4, r5, pc}
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_d2ulz>:
 8000cd8:	b5d0      	push	{r4, r6, r7, lr}
 8000cda:	4b0c      	ldr	r3, [pc, #48]	@ (8000d0c <__aeabi_d2ulz+0x34>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	4606      	mov	r6, r0
 8000ce0:	460f      	mov	r7, r1
 8000ce2:	f7ff fc99 	bl	8000618 <__aeabi_dmul>
 8000ce6:	f7ff ff6f 	bl	8000bc8 <__aeabi_d2uiz>
 8000cea:	4604      	mov	r4, r0
 8000cec:	f7ff fc1a 	bl	8000524 <__aeabi_ui2d>
 8000cf0:	4b07      	ldr	r3, [pc, #28]	@ (8000d10 <__aeabi_d2ulz+0x38>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	f7ff fc90 	bl	8000618 <__aeabi_dmul>
 8000cf8:	4602      	mov	r2, r0
 8000cfa:	460b      	mov	r3, r1
 8000cfc:	4630      	mov	r0, r6
 8000cfe:	4639      	mov	r1, r7
 8000d00:	f7ff fad2 	bl	80002a8 <__aeabi_dsub>
 8000d04:	f7ff ff60 	bl	8000bc8 <__aeabi_d2uiz>
 8000d08:	4621      	mov	r1, r4
 8000d0a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d0c:	3df00000 	.word	0x3df00000
 8000d10:	41f00000 	.word	0x41f00000

08000d14 <sendRMCDataToFlash>:
	if(rmc.isValid == 1)
		rmc.date.epoch = convertToEpoch(rmc.date.Yr, rmc.date.Mon, rmc.date.Day, rmc.tim.hour, rmc.tim.min, rmc.tim.sec);
}


void sendRMCDataToFlash(RMCSTRUCT *rmcData) {
 8000d14:	b570      	push	{r4, r5, r6, lr}
	HAL_UART_Transmit(&huart1, (uint8_t*) "SENDING RMC TO FLASH\n",  strlen("SENDING RMC\n") , HAL_MAX_DELAY);
    RMCSTRUCT *mail = (RMCSTRUCT *)osMailAlloc(RMC_MailQFLASHId, osWaitForever); // Allocate memory for mail
 8000d16:	4e0d      	ldr	r6, [pc, #52]	@ (8000d4c <sendRMCDataToFlash+0x38>)
	HAL_UART_Transmit(&huart1, (uint8_t*) "SENDING RMC TO FLASH\n",  strlen("SENDING RMC\n") , HAL_MAX_DELAY);
 8000d18:	490d      	ldr	r1, [pc, #52]	@ (8000d50 <sendRMCDataToFlash+0x3c>)
 8000d1a:	f04f 33ff 	mov.w	r3, #4294967295
 8000d1e:	220c      	movs	r2, #12
void sendRMCDataToFlash(RMCSTRUCT *rmcData) {
 8000d20:	4605      	mov	r5, r0
	HAL_UART_Transmit(&huart1, (uint8_t*) "SENDING RMC TO FLASH\n",  strlen("SENDING RMC\n") , HAL_MAX_DELAY);
 8000d22:	480c      	ldr	r0, [pc, #48]	@ (8000d54 <sendRMCDataToFlash+0x40>)
<<<<<<< HEAD
 8000d24:	f006 fb4c 	bl	80073c0 <HAL_UART_Transmit>
    RMCSTRUCT *mail = (RMCSTRUCT *)osMailAlloc(RMC_MailQFLASHId, osWaitForever); // Allocate memory for mail
 8000d28:	6830      	ldr	r0, [r6, #0]
 8000d2a:	f04f 31ff 	mov.w	r1, #4294967295
 8000d2e:	f006 fd83 	bl	8007838 <osMailAlloc>
=======
 8000d24:	f004 f9f6 	bl	8005114 <HAL_UART_Transmit>
    RMCSTRUCT *mail = (RMCSTRUCT *)osMailAlloc(RMC_MailQFLASHId, osWaitForever); // Allocate memory for mail
 8000d28:	6830      	ldr	r0, [r6, #0]
 8000d2a:	f04f 31ff 	mov.w	r1, #4294967295
 8000d2e:	f004 fc2d 	bl	800558c <osMailAlloc>
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
 8000d32:	4604      	mov	r4, r0
    if (mail != NULL) {
 8000d34:	b148      	cbz	r0, 8000d4a <sendRMCDataToFlash+0x36>
        *mail = *rmcData; // Copy data into allocated memory
 8000d36:	4629      	mov	r1, r5
 8000d38:	2258      	movs	r2, #88	@ 0x58
<<<<<<< HEAD
 8000d3a:	f00a fe48 	bl	800b9ce <memcpy>
=======
 8000d3a:	f008 fcba 	bl	80096b2 <memcpy>
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
        osMailPut(RMC_MailQFLASHId, mail); // Put message in queue
 8000d3e:	6830      	ldr	r0, [r6, #0]
 8000d40:	4621      	mov	r1, r4
    }
}
 8000d42:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        osMailPut(RMC_MailQFLASHId, mail); // Put message in queue
<<<<<<< HEAD
 8000d46:	f006 bd7c 	b.w	8007842 <osMailPut>
}
 8000d4a:	bd70      	pop	{r4, r5, r6, pc}
 8000d4c:	200002c8 	.word	0x200002c8
 8000d50:	0800ec68 	.word	0x0800ec68
 8000d54:	20001250 	.word	0x20001250
=======
 8000d46:	f004 bc26 	b.w	8005596 <osMailPut>
}
 8000d4a:	bd70      	pop	{r4, r5, r6, pc}
 8000d4c:	200002c8 	.word	0x200002c8
 8000d50:	0800c7e8 	.word	0x0800c7e8
 8000d54:	20000fa0 	.word	0x20000fa0
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)

08000d58 <getRMC>:


void getRMC(){
 8000d58:	b570      	push	{r4, r5, r6, lr}
	int idx = 0;
	getRMC_time++;
 8000d5a:	4c3a      	ldr	r4, [pc, #232]	@ (8000e44 <getRMC+0xec>)
 8000d5c:	6823      	ldr	r3, [r4, #0]
 8000d5e:	3301      	adds	r3, #1
 8000d60:	6023      	str	r3, [r4, #0]
	int length = 0;
	for(size_t i = 0; i < GPS_STACK_SIZE; i++){
 8000d62:	4b39      	ldr	r3, [pc, #228]	@ (8000e48 <getRMC+0xf0>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	461e      	mov	r6, r3
		if (gpsSentence[i] == '$' && gpsSentence[i+1] == 'G' && gpsSentence[i+2] == 'N' && gpsSentence[i+3] == 'R' && gpsSentence[i+4] == 'M' && gpsSentence[i+5] == 'C'
 8000d68:	f813 1b01 	ldrb.w	r1, [r3], #1
 8000d6c:	2924      	cmp	r1, #36	@ 0x24
 8000d6e:	4615      	mov	r5, r2
 8000d70:	f102 0201 	add.w	r2, r2, #1
 8000d74:	d160      	bne.n	8000e38 <getRMC+0xe0>
 8000d76:	7819      	ldrb	r1, [r3, #0]
 8000d78:	2947      	cmp	r1, #71	@ 0x47
 8000d7a:	d15d      	bne.n	8000e38 <getRMC+0xe0>
 8000d7c:	7859      	ldrb	r1, [r3, #1]
 8000d7e:	294e      	cmp	r1, #78	@ 0x4e
 8000d80:	d15a      	bne.n	8000e38 <getRMC+0xe0>
 8000d82:	7899      	ldrb	r1, [r3, #2]
 8000d84:	2952      	cmp	r1, #82	@ 0x52
 8000d86:	d157      	bne.n	8000e38 <getRMC+0xe0>
 8000d88:	78d9      	ldrb	r1, [r3, #3]
 8000d8a:	294d      	cmp	r1, #77	@ 0x4d
 8000d8c:	d154      	bne.n	8000e38 <getRMC+0xe0>
 8000d8e:	7919      	ldrb	r1, [r3, #4]
 8000d90:	2943      	cmp	r1, #67	@ 0x43
 8000d92:	d151      	bne.n	8000e38 <getRMC+0xe0>
			&& (GPS_STACK_SIZE -i) > 200 ){
 8000d94:	f5c2 6100 	rsb	r1, r2, #2048	@ 0x800
 8000d98:	3101      	adds	r1, #1
 8000d9a:	29c8      	cmp	r1, #200	@ 0xc8
 8000d9c:	d94c      	bls.n	8000e38 <getRMC+0xe0>
			isRMCExist = 1;
 8000d9e:	4b2b      	ldr	r3, [pc, #172]	@ (8000e4c <getRMC+0xf4>)
			HAL_UART_Transmit(&huart1, (uint8_t *)"Getting RMC\n", strlen("Getting RMC\n"), 1000);
 8000da0:	492b      	ldr	r1, [pc, #172]	@ (8000e50 <getRMC+0xf8>)
 8000da2:	482c      	ldr	r0, [pc, #176]	@ (8000e54 <getRMC+0xfc>)
			isRMCExist = 1;
 8000da4:	2201      	movs	r2, #1
 8000da6:	601a      	str	r2, [r3, #0]
			HAL_UART_Transmit(&huart1, (uint8_t *)"Getting RMC\n", strlen("Getting RMC\n"), 1000);
 8000da8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000dac:	220c      	movs	r2, #12
<<<<<<< HEAD
 8000dae:	f006 fb07 	bl	80073c0 <HAL_UART_Transmit>
=======
 8000dae:	f004 f9b1 	bl	8005114 <HAL_UART_Transmit>
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
			while(gpsSentence[i+1] != 0x0A ){
 8000db2:	4a29      	ldr	r2, [pc, #164]	@ (8000e58 <getRMC+0x100>)
 8000db4:	1973      	adds	r3, r6, r5
	int idx = 0;
 8000db6:	2000      	movs	r0, #0
			while(gpsSentence[i+1] != 0x0A ){
 8000db8:	7859      	ldrb	r1, [r3, #1]
 8000dba:	290a      	cmp	r1, #10
 8000dbc:	461d      	mov	r5, r3
 8000dbe:	d135      	bne.n	8000e2c <getRMC+0xd4>
			idx = 0;
			break;
		}
	 }
	for(size_t i = length; i < 128; i++){
		rmc_str[i] = 0;
 8000dc0:	4b25      	ldr	r3, [pc, #148]	@ (8000e58 <getRMC+0x100>)
	}
	if(isRMCExist == 1){
 8000dc2:	4d22      	ldr	r5, [pc, #136]	@ (8000e4c <getRMC+0xf4>)
		rmc_str[i] = 0;
 8000dc4:	f1c0 0280 	rsb	r2, r0, #128	@ 0x80
 8000dc8:	2100      	movs	r1, #0
 8000dca:	4418      	add	r0, r3
<<<<<<< HEAD
 8000dcc:	f009 ffa6 	bl	800ad1c <memset>
=======
 8000dcc:	f007 fe40 	bl	8008a50 <memset>
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
	if(isRMCExist == 1){
 8000dd0:	682b      	ldr	r3, [r5, #0]
 8000dd2:	2b01      	cmp	r3, #1
 8000dd4:	d109      	bne.n	8000dea <getRMC+0x92>
//		parse_rmc(rmc_str);
//		display_rmc_data(&huart1);
//		set_time(rmc.tim.hour, rmc.tim.min, rmc.tim.sec);
//		set_date(rmc.date.Yr, rmc.date.Mon, rmc.date.Day);
		if(rmc.isValid == 1){
 8000dd6:	4821      	ldr	r0, [pc, #132]	@ (8000e5c <getRMC+0x104>)
 8000dd8:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8000dda:	2b01      	cmp	r3, #1
 8000ddc:	d103      	bne.n	8000de6 <getRMC+0x8e>
			sendRMCDataToFlash(&rmc);
 8000dde:	f7ff ff99 	bl	8000d14 <sendRMCDataToFlash>
			//sendRMCDataToGSM(&rmc);
			getRMC_time = 0;
 8000de2:	2300      	movs	r3, #0
 8000de4:	6023      	str	r3, [r4, #0]
		}
		isRMCExist = 0;
 8000de6:	2300      	movs	r3, #0
 8000de8:	602b      	str	r3, [r5, #0]
	}
	if(getRMC_time >= 500){
 8000dea:	6823      	ldr	r3, [r4, #0]
 8000dec:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000df0:	db0f      	blt.n	8000e12 <getRMC+0xba>
		GPS_DISABLE();
 8000df2:	2201      	movs	r2, #1
 8000df4:	2104      	movs	r1, #4
 8000df6:	481a      	ldr	r0, [pc, #104]	@ (8000e60 <getRMC+0x108>)
<<<<<<< HEAD
 8000df8:	f004 fb8a 	bl	8005510 <HAL_GPIO_WritePin>
		osDelay(500);
 8000dfc:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000e00:	f006 fc4e 	bl	80076a0 <osDelay>
=======
 8000df8:	f002 fb20 	bl	800343c <HAL_GPIO_WritePin>
		osDelay(500);
 8000dfc:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000e00:	f004 faf8 	bl	80053f4 <osDelay>
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
		GPS_ENABLE();
 8000e04:	4816      	ldr	r0, [pc, #88]	@ (8000e60 <getRMC+0x108>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	2104      	movs	r1, #4
<<<<<<< HEAD
 8000e0a:	f004 fb81 	bl	8005510 <HAL_GPIO_WritePin>
=======
 8000e0a:	f002 fb17 	bl	800343c <HAL_GPIO_WritePin>
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
		getRMC_time = 0;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	6023      	str	r3, [r4, #0]
	}
	Debug_printf("Elapsed Time blabla: %d\n", getRMC_time);
 8000e12:	6821      	ldr	r1, [r4, #0]
 8000e14:	4813      	ldr	r0, [pc, #76]	@ (8000e64 <getRMC+0x10c>)
<<<<<<< HEAD
 8000e16:	f003 fbbd 	bl	8004594 <Debug_printf>
=======
 8000e16:	f001 fb73 	bl	8002500 <Debug_printf>
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
	HAL_UART_Transmit(&huart1, rmc_str, 128,1000);
}
 8000e1a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	HAL_UART_Transmit(&huart1, rmc_str, 128,1000);
 8000e1e:	490e      	ldr	r1, [pc, #56]	@ (8000e58 <getRMC+0x100>)
 8000e20:	480c      	ldr	r0, [pc, #48]	@ (8000e54 <getRMC+0xfc>)
 8000e22:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e26:	2280      	movs	r2, #128	@ 0x80
<<<<<<< HEAD
 8000e28:	f006 baca 	b.w	80073c0 <HAL_UART_Transmit>
=======
 8000e28:	f004 b974 	b.w	8005114 <HAL_UART_Transmit>
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
				rmc_str[idx] = gpsSentence[i];
 8000e2c:	7829      	ldrb	r1, [r5, #0]
 8000e2e:	f802 1b01 	strb.w	r1, [r2], #1
				idx++;
 8000e32:	3301      	adds	r3, #1
 8000e34:	3001      	adds	r0, #1
				i++;
 8000e36:	e7bf      	b.n	8000db8 <getRMC+0x60>
	for(size_t i = 0; i < GPS_STACK_SIZE; i++){
 8000e38:	f5b2 6f00 	cmp.w	r2, #2048	@ 0x800
 8000e3c:	d194      	bne.n	8000d68 <getRMC+0x10>
	int length = 0;
 8000e3e:	2000      	movs	r0, #0
 8000e40:	e7be      	b.n	8000dc0 <getRMC+0x68>
 8000e42:	bf00      	nop
 8000e44:	20000264 	.word	0x20000264
 8000e48:	200002cc 	.word	0x200002cc
 8000e4c:	20000268 	.word	0x20000268
<<<<<<< HEAD
 8000e50:	0800ec7e 	.word	0x0800ec7e
 8000e54:	20001250 	.word	0x20001250
 8000e58:	20000adc 	.word	0x20000adc
 8000e5c:	20000270 	.word	0x20000270
 8000e60:	48000800 	.word	0x48000800
 8000e64:	0800ec8b 	.word	0x0800ec8b
=======
 8000e50:	0800c7fe 	.word	0x0800c7fe
 8000e54:	20000fa0 	.word	0x20000fa0
 8000e58:	20000adc 	.word	0x20000adc
 8000e5c:	20000270 	.word	0x20000270
 8000e60:	48000800 	.word	0x48000800
 8000e64:	0800c80b 	.word	0x0800c80b
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)

08000e68 <StartGPS>:


void StartGPS(void const * argument)
{
 8000e68:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	HAL_UART_Transmit(&huart1,(uint8_t*) "STARTING GPS", strlen("STARTING GPS"), 1000);
 8000e6a:	4935      	ldr	r1, [pc, #212]	@ (8000f40 <StartGPS+0xd8>)
 8000e6c:	4835      	ldr	r0, [pc, #212]	@ (8000f44 <StartGPS+0xdc>)
		//rmc.lcation.latitude -= 0.000001;
//		rmc.tim.sec += 2;
//		rmc.lcation.latitude = route[count].latitude;
//		rmc.lcation.longitude = route[count].longitude;
//		count++;
		HAL_UART_Transmit(&huart1, (uint8_t *)"Getting GPS \n", strlen("Getting GPS \n"), 1000);
 8000e6e:	4d35      	ldr	r5, [pc, #212]	@ (8000f44 <StartGPS+0xdc>)
	HAL_UART_Transmit(&huart1,(uint8_t*) "STARTING GPS", strlen("STARTING GPS"), 1000);
<<<<<<< HEAD
 8000e70:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e74:	220c      	movs	r2, #12
 8000e76:	f006 faa3 	bl	80073c0 <HAL_UART_Transmit>
=======
 8000e72:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e76:	220c      	movs	r2, #12
 8000e78:	f004 f94c 	bl	8005114 <HAL_UART_Transmit>
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
	RingBufferDmaU8_initUSARTRx(&GPSRxDMARing, &huart2, gpsSentence, GPS_STACK_SIZE);
 8000e7a:	4a33      	ldr	r2, [pc, #204]	@ (8000f48 <StartGPS+0xe0>)
 8000e7c:	4933      	ldr	r1, [pc, #204]	@ (8000f4c <StartGPS+0xe4>)
 8000e7e:	4834      	ldr	r0, [pc, #208]	@ (8000f50 <StartGPS+0xe8>)
 8000e80:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000e84:	f001 ff8c 	bl	8002da0 <RingBufferDmaU8_initUSARTRx>
	rmc.tim.hour = 0;
 8000e88:	4b32      	ldr	r3, [pc, #200]	@ (8000f54 <StartGPS+0xec>)
	rmc.speed = 22.4;
 8000e8a:	4a33      	ldr	r2, [pc, #204]	@ (8000f58 <StartGPS+0xf0>)
 8000e8c:	629a      	str	r2, [r3, #40]	@ 0x28
	rmc.lcation.latitude = 20.998022;
 8000e8e:	a128      	add	r1, pc, #160	@ (adr r1, 8000f30 <StartGPS+0xc8>)
 8000e90:	e9d1 0100 	ldrd	r0, r1, [r1]
	rmc.course = 30.5;
 8000e94:	4a31      	ldr	r2, [pc, #196]	@ (8000f5c <StartGPS+0xf4>)
 8000e96:	62da      	str	r2, [r3, #44]	@ 0x2c
	rmc.lcation.latitude = 20.998022;
 8000e98:	e9c3 010e 	strd	r0, r1, [r3, #56]	@ 0x38
	rmc.lcation.NS = 'N';
 8000e9c:	224e      	movs	r2, #78	@ 0x4e
	rmc.lcation.longitude = 105.794756;
 8000e9e:	a126      	add	r1, pc, #152	@ (adr r1, 8000f38 <StartGPS+0xd0>)
 8000ea0:	e9d1 0100 	ldrd	r0, r1, [r1]
	rmc.lcation.NS = 'N';
 8000ea4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
	rmc.lcation.EW = 'E';
 8000ea8:	2245      	movs	r2, #69	@ 0x45
	rmc.tim.hour = 0;
 8000eaa:	2400      	movs	r4, #0
	rmc.lcation.EW = 'E';
 8000eac:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
	rmc.isValid = 1;
<<<<<<< HEAD
 8000eb0:	2201      	movs	r2, #1
	rmc.lcation.longitude = 105.794756;
 8000eb2:	e9c3 0112 	strd	r0, r1, [r3, #72]	@ 0x48
	rmc.tim.min = 0;
 8000eb6:	e9c3 4400 	strd	r4, r4, [r3]
	rmc.date.Mon = 0;
 8000eba:	e9c3 4404 	strd	r4, r4, [r3, #16]
	rmc.tim.sec = 0;
 8000ebe:	609c      	str	r4, [r3, #8]
	rmc.isValid = 1;
 8000ec0:	631a      	str	r2, [r3, #48]	@ 0x30
	rmc.date.Yr = 0;
 8000ec2:	619c      	str	r4, [r3, #24]
	osMailQDef(FLASH_MailQ, 11, RMCSTRUCT);
 8000ec4:	220b      	movs	r2, #11
 8000ec6:	2358      	movs	r3, #88	@ 0x58
	RMC_MailQFLASHId = osMailCreate(osMailQ(FLASH_MailQ), NULL);
 8000ec8:	4621      	mov	r1, r4
 8000eca:	a801      	add	r0, sp, #4
	osMailQDef(FLASH_MailQ, 11, RMCSTRUCT);
 8000ecc:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8000ed0:	f8cd d00c 	str.w	sp, [sp, #12]
	RMC_MailQFLASHId = osMailCreate(osMailQ(FLASH_MailQ), NULL);
 8000ed4:	f006 fc85 	bl	80077e2 <osMailCreate>
 8000ed8:	4b21      	ldr	r3, [pc, #132]	@ (8000f60 <StartGPS+0xf8>)
	memset(gpsSentence, 0x00, GPS_STACK_SIZE);
 8000eda:	4621      	mov	r1, r4
	RMC_MailQFLASHId = osMailCreate(osMailQ(FLASH_MailQ), NULL);
 8000edc:	6018      	str	r0, [r3, #0]
	memset(gpsSentence, 0x00, GPS_STACK_SIZE);
 8000ede:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000ee2:	4819      	ldr	r0, [pc, #100]	@ (8000f48 <StartGPS+0xe0>)
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 8000ee4:	4c1f      	ldr	r4, [pc, #124]	@ (8000f64 <StartGPS+0xfc>)
	memset(gpsSentence, 0x00, GPS_STACK_SIZE);
 8000ee6:	f009 ff19 	bl	800ad1c <memset>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 8000eea:	2201      	movs	r2, #1
 8000eec:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000ef0:	4620      	mov	r0, r4
 8000ef2:	f004 fb0d 	bl	8005510 <HAL_GPIO_WritePin>
		HAL_Delay(1500);
 8000ef6:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8000efa:	f003 fbbb 	bl	8004674 <HAL_Delay>
		getRMC();
 8000efe:	f7ff ff2b 	bl	8000d58 <getRMC>
		HAL_UART_Transmit(&huart1, (uint8_t *)"Getting GPS \n", strlen("Getting GPS \n"), 1000);
 8000f02:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f06:	220d      	movs	r2, #13
 8000f08:	4917      	ldr	r1, [pc, #92]	@ (8000f68 <StartGPS+0x100>)
 8000f0a:	4628      	mov	r0, r5
 8000f0c:	f006 fa58 	bl	80073c0 <HAL_UART_Transmit>
		uart_transmit_string(&huart1,(uint8_t*) "\n\n ");
 8000f10:	4628      	mov	r0, r5
 8000f12:	4916      	ldr	r1, [pc, #88]	@ (8000f6c <StartGPS+0x104>)
 8000f14:	f003 fb2e 	bl	8004574 <uart_transmit_string>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 8000f18:	4620      	mov	r0, r4
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000f20:	f004 faf6 	bl	8005510 <HAL_GPIO_WritePin>
		HAL_Delay(1500);
 8000f24:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8000f28:	f003 fba4 	bl	8004674 <HAL_Delay>
	while(1)
 8000f2c:	e7dd      	b.n	8000eea <StartGPS+0x82>
 8000f2e:	bf00      	nop
 8000f30:	5eaab042 	.word	0x5eaab042
 8000f34:	4034ff7e 	.word	0x4034ff7e
 8000f38:	48451330 	.word	0x48451330
 8000f3c:	405a72dd 	.word	0x405a72dd
 8000f40:	0800eca4 	.word	0x0800eca4
 8000f44:	20001250 	.word	0x20001250
 8000f48:	200002cc 	.word	0x200002cc
 8000f4c:	200011c8 	.word	0x200011c8
 8000f50:	20000acc 	.word	0x20000acc
 8000f54:	20000270 	.word	0x20000270
 8000f58:	41b33333 	.word	0x41b33333
 8000f5c:	41f40000 	.word	0x41f40000
 8000f60:	200002c8 	.word	0x200002c8
 8000f64:	48000800 	.word	0x48000800
 8000f68:	0800ecb1 	.word	0x0800ecb1
 8000f6c:	0800ecbf 	.word	0x0800ecbf
=======
 8000eba:	2301      	movs	r3, #1
 8000ebc:	6323      	str	r3, [r4, #48]	@ 0x30
	rmc.date.Mon = 12;
 8000ebe:	2102      	movs	r1, #2
 8000ec0:	230c      	movs	r3, #12
 8000ec2:	e9c4 1304 	strd	r1, r3, [r4, #16]
	rmc.date.Yr = 24;
 8000ec6:	2318      	movs	r3, #24
 8000ec8:	61a3      	str	r3, [r4, #24]
	osMailQDef(FLASH_MailQ, 11, RMCSTRUCT);
 8000eca:	200b      	movs	r0, #11
 8000ecc:	2358      	movs	r3, #88	@ 0x58
 8000ece:	e9cd 0301 	strd	r0, r3, [sp, #4]
	RMC_MailQFLASHId = osMailCreate(osMailQ(FLASH_MailQ), NULL);
 8000ed2:	4629      	mov	r1, r5
 8000ed4:	a801      	add	r0, sp, #4
	rmc.tim.sec = 0;
 8000ed6:	60a5      	str	r5, [r4, #8]
	osMailQDef(FLASH_MailQ, 11, RMCSTRUCT);
 8000ed8:	f8cd d00c 	str.w	sp, [sp, #12]
	RMC_MailQFLASHId = osMailCreate(osMailQ(FLASH_MailQ), NULL);
 8000edc:	f004 fb2b 	bl	8005536 <osMailCreate>
 8000ee0:	4b27      	ldr	r3, [pc, #156]	@ (8000f80 <StartGPS+0x118>)
	memset(gpsSentence, 0x00, GPS_STACK_SIZE);
 8000ee2:	4629      	mov	r1, r5
	RMC_MailQFLASHId = osMailCreate(osMailQ(FLASH_MailQ), NULL);
 8000ee4:	6018      	str	r0, [r3, #0]
	memset(gpsSentence, 0x00, GPS_STACK_SIZE);
 8000ee6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000eea:	4820      	ldr	r0, [pc, #128]	@ (8000f6c <StartGPS+0x104>)
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 8000eec:	4d25      	ldr	r5, [pc, #148]	@ (8000f84 <StartGPS+0x11c>)
	memset(gpsSentence, 0x00, GPS_STACK_SIZE);
 8000eee:	f007 fdaf 	bl	8008a50 <memset>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 8000ef2:	2201      	movs	r2, #1
 8000ef4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000ef8:	4628      	mov	r0, r5
 8000efa:	f002 fa9f 	bl	800343c <HAL_GPIO_WritePin>
		HAL_Delay(500);
 8000efe:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000f02:	f001 fb6d 	bl	80025e0 <HAL_Delay>
		getRMC();
 8000f06:	f7ff ff27 	bl	8000d58 <getRMC>
		rmc.tim.sec += 1;
 8000f0a:	68a3      	ldr	r3, [r4, #8]
		HAL_UART_Transmit(&huart1, (uint8_t *)"Getting GPS \n", strlen("Getting GPS \n"), 1000);
 8000f0c:	491e      	ldr	r1, [pc, #120]	@ (8000f88 <StartGPS+0x120>)
		rmc.tim.sec += 1;
 8000f0e:	3301      	adds	r3, #1
		if(rmc.tim.sec >= 57){
 8000f10:	2b38      	cmp	r3, #56	@ 0x38
			rmc.tim.sec = 0;
 8000f12:	bfc3      	ittte	gt
 8000f14:	2300      	movgt	r3, #0
 8000f16:	60a3      	strgt	r3, [r4, #8]
			rmc.tim.min +=1;
 8000f18:	6863      	ldrgt	r3, [r4, #4]
		rmc.tim.sec += 1;
 8000f1a:	60a3      	strle	r3, [r4, #8]
			rmc.tim.min +=1;
 8000f1c:	bfc4      	itt	gt
 8000f1e:	3301      	addgt	r3, #1
 8000f20:	6063      	strgt	r3, [r4, #4]
		HAL_UART_Transmit(&huart1, (uint8_t *)"Getting GPS \n", strlen("Getting GPS \n"), 1000);
 8000f22:	220d      	movs	r2, #13
 8000f24:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f28:	4630      	mov	r0, r6
 8000f2a:	f004 f8f3 	bl	8005114 <HAL_UART_Transmit>
		uart_transmit_string(&huart1,(uint8_t*) "\n\n ");
 8000f2e:	4630      	mov	r0, r6
 8000f30:	4916      	ldr	r1, [pc, #88]	@ (8000f8c <StartGPS+0x124>)
 8000f32:	f001 fad5 	bl	80024e0 <uart_transmit_string>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 8000f36:	4628      	mov	r0, r5
 8000f38:	2200      	movs	r2, #0
 8000f3a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000f3e:	f002 fa7d 	bl	800343c <HAL_GPIO_WritePin>
		HAL_Delay(500);
 8000f42:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000f46:	f001 fb4b 	bl	80025e0 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 8000f4a:	e7d2      	b.n	8000ef2 <StartGPS+0x8a>
 8000f4c:	f3af 8000 	nop.w
 8000f50:	5eaab042 	.word	0x5eaab042
 8000f54:	4034ff7e 	.word	0x4034ff7e
 8000f58:	48451330 	.word	0x48451330
 8000f5c:	405a72dd 	.word	0x405a72dd
 8000f60:	0800c824 	.word	0x0800c824
 8000f64:	20000fa0 	.word	0x20000fa0
 8000f68:	20000270 	.word	0x20000270
 8000f6c:	200002cc 	.word	0x200002cc
 8000f70:	20000f18 	.word	0x20000f18
 8000f74:	20000acc 	.word	0x20000acc
 8000f78:	41b33333 	.word	0x41b33333
 8000f7c:	41f40000 	.word	0x41f40000
 8000f80:	200002c8 	.word	0x200002c8
 8000f84:	48000800 	.word	0x48000800
 8000f88:	0800c831 	.word	0x0800c831
 8000f8c:	0800c83f 	.word	0x0800c83f
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)

08000f70 <create_terminal_registration>:
RMCSTRUCT rmc_jt;
uint8_t terminal_phone_number[6] = {0};

uint8_t flashBufferMailReceived[128];

JT808_TerminalRegistration create_terminal_registration(){
 8000f70:	b5f0      	push	{r4, r5, r6, r7, lr}
	JT808_TerminalRegistration reg_msg = {
 8000f72:	4b11      	ldr	r3, [pc, #68]	@ (8000fb8 <create_terminal_registration+0x48>)
JT808_TerminalRegistration create_terminal_registration(){
 8000f74:	b091      	sub	sp, #68	@ 0x44
	JT808_TerminalRegistration reg_msg = {
 8000f76:	ac01      	add	r4, sp, #4
JT808_TerminalRegistration create_terminal_registration(){
 8000f78:	4605      	mov	r5, r0
	JT808_TerminalRegistration reg_msg = {
 8000f7a:	f103 0738 	add.w	r7, r3, #56	@ 0x38
 8000f7e:	4622      	mov	r2, r4
 8000f80:	6818      	ldr	r0, [r3, #0]
 8000f82:	6859      	ldr	r1, [r3, #4]
 8000f84:	4626      	mov	r6, r4
 8000f86:	c603      	stmia	r6!, {r0, r1}
 8000f88:	3308      	adds	r3, #8
 8000f8a:	42bb      	cmp	r3, r7
 8000f8c:	4634      	mov	r4, r6
 8000f8e:	d1f7      	bne.n	8000f80 <create_terminal_registration+0x10>
 8000f90:	6818      	ldr	r0, [r3, #0]
 8000f92:	6030      	str	r0, [r6, #0]
        .plate_no = {0x00, 0x00, 0x00, 0x00, 0x35, 0x36, 0x37, 0x38, 0x39, 0x31, 0x20, 0x32, 0x39, 0x4C, 0x31, 0x33, 0x34, 0x31, 0x35, 0x34},
        .check_sum = 0x00,  // Placeholder, will be set by the function
        .end_mask = 0x7E
    };

	return reg_msg;
 8000f94:	4613      	mov	r3, r2
 8000f96:	ae0f      	add	r6, sp, #60	@ 0x3c
 8000f98:	462a      	mov	r2, r5
 8000f9a:	461c      	mov	r4, r3
 8000f9c:	cc03      	ldmia	r4!, {r0, r1}
 8000f9e:	42b4      	cmp	r4, r6
 8000fa0:	6010      	str	r0, [r2, #0]
 8000fa2:	6051      	str	r1, [r2, #4]
 8000fa4:	4623      	mov	r3, r4
 8000fa6:	f102 0208 	add.w	r2, r2, #8
 8000faa:	d1f6      	bne.n	8000f9a <create_terminal_registration+0x2a>
 8000fac:	6820      	ldr	r0, [r4, #0]
 8000fae:	6010      	str	r0, [r2, #0]
}
 8000fb0:	4628      	mov	r0, r5
 8000fb2:	b011      	add	sp, #68	@ 0x44
 8000fb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	0800eb38 	.word	0x0800eb38

08000fbc <create_location_info_report>:


JT808_LocationInfoReport create_location_info_report() {
 8000fbc:	b530      	push	{r4, r5, lr}
	JT808_LocationInfoReport location_info = {
 8000fbe:	2541      	movs	r5, #65	@ 0x41
JT808_LocationInfoReport create_location_info_report() {
 8000fc0:	b093      	sub	sp, #76	@ 0x4c
 8000fc2:	4604      	mov	r4, r0
	JT808_LocationInfoReport location_info = {
 8000fc4:	462a      	mov	r2, r5
 8000fc6:	4906      	ldr	r1, [pc, #24]	@ (8000fe0 <create_location_info_report+0x24>)
 8000fc8:	a801      	add	r0, sp, #4
 8000fca:	f00a fd00 	bl	800b9ce <memcpy>
        .signal = {0x31},                      // 31
        .additional = {0x01, 0x00, 0xFD, 0x04, 0x03, 0xF1, 0x00, 0x00, 0x0A}, // 01 00 FD 04 03 F1 00 00 0A
        .end_mask = 0x7E                       // 7E
    };
    
    return location_info;
 8000fce:	462a      	mov	r2, r5
 8000fd0:	a901      	add	r1, sp, #4
 8000fd2:	4620      	mov	r0, r4
 8000fd4:	f00a fcfb 	bl	800b9ce <memcpy>
}
 8000fd8:	4620      	mov	r0, r4
 8000fda:	b013      	add	sp, #76	@ 0x4c
 8000fdc:	bd30      	pop	{r4, r5, pc}
 8000fde:	bf00      	nop
 8000fe0:	0800eb74 	.word	0x0800eb74

08000fe4 <set_status_bit>:
void clearBit(uint8_t *status, int bitPosition) {
    *status &= ~(1 << bitPosition); // Clear the specific bit to 0
}

void set_status_bit(uint8_t *status_bit){
	if(rmc_jt.lcation.NS == 'N') clearBit(status_bit+3, 2);
 8000fe4:	4a0a      	ldr	r2, [pc, #40]	@ (8001010 <set_status_bit+0x2c>)
    *status &= ~(1 << bitPosition); // Clear the specific bit to 0
 8000fe6:	78c3      	ldrb	r3, [r0, #3]
	if(rmc_jt.lcation.NS == 'N') clearBit(status_bit+3, 2);
 8000fe8:	f892 1040 	ldrb.w	r1, [r2, #64]	@ 0x40
 8000fec:	294e      	cmp	r1, #78	@ 0x4e
    *status &= ~(1 << bitPosition); // Clear the specific bit to 0
 8000fee:	bf0c      	ite	eq
 8000ff0:	f003 03fb 	andeq.w	r3, r3, #251	@ 0xfb
    *status |= (1 << bitPosition);  // Set the specific bit to 1
 8000ff4:	f043 0304 	orrne.w	r3, r3, #4
 8000ff8:	70c3      	strb	r3, [r0, #3]
	else setBit(status_bit+3, 2);

	if(rmc_jt.lcation.EW == 'E') clearBit(status_bit+3, 3);
 8000ffa:	f892 2050 	ldrb.w	r2, [r2, #80]	@ 0x50
 8000ffe:	2a45      	cmp	r2, #69	@ 0x45
    *status &= ~(1 << bitPosition); // Clear the specific bit to 0
 8001000:	bf0c      	ite	eq
 8001002:	f003 03f7 	andeq.w	r3, r3, #247	@ 0xf7
    *status |= (1 << bitPosition);  // Set the specific bit to 1
 8001006:	f043 0308 	orrne.w	r3, r3, #8
 800100a:	70c3      	strb	r3, [r0, #3]
	else setBit(status_bit+3, 3);
}
 800100c:	4770      	bx	lr
 800100e:	bf00      	nop
 8001010:	20000be8 	.word	0x20000be8

08001014 <send_AT_command>:
    memcpy(message_array, location_info, *array_length);  // Copy struct data into message array

    return message_array;
}

void send_AT_command(const char *command) {
 8001014:	b510      	push	{r4, lr}
 8001016:	4604      	mov	r4, r0
    HAL_UART_Transmit(&huart3, (uint8_t *)command, strlen(command), HAL_MAX_DELAY);
 8001018:	f7ff f93a 	bl	8000290 <strlen>
 800101c:	4621      	mov	r1, r4
 800101e:	b282      	uxth	r2, r0
}
 8001020:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_UART_Transmit(&huart3, (uint8_t *)command, strlen(command), HAL_MAX_DELAY);
 8001024:	4802      	ldr	r0, [pc, #8]	@ (8001030 <send_AT_command+0x1c>)
 8001026:	f04f 33ff 	mov.w	r3, #4294967295
 800102a:	f006 b9c9 	b.w	80073c0 <HAL_UART_Transmit>
 800102e:	bf00      	nop
 8001030:	20001140 	.word	0x20001140

08001034 <SIM_UART_ReInitializeRxDMA>:

void SIM_UART_ReInitializeRxDMA(void){
 8001034:	b510      	push	{r4, lr}
	HAL_StatusTypeDef ret = HAL_UART_Abort(&huart3);
 8001036:	4809      	ldr	r0, [pc, #36]	@ (800105c <SIM_UART_ReInitializeRxDMA+0x28>)
 8001038:	f005 ff55 	bl	8006ee6 <HAL_UART_Abort>
	if(ret != HAL_OK)
 800103c:	b108      	cbz	r0, 8001042 <SIM_UART_ReInitializeRxDMA+0xe>
	{
		Error_Handler();			
 800103e:	f002 fa1a 	bl	8003476 <Error_Handler>
	}		
	osDelay(50);	//	50 is OK
 8001042:	2032      	movs	r0, #50	@ 0x32
 8001044:	f006 fb2c 	bl	80076a0 <osDelay>
	//memset(gnssDmaRingBufferMemory, 0x20, sizeof(gnssDmaRingBufferMemory));	// insert buffer with space character	
	RingBufferDmaU8_initUSARTRx(&SIMRxDMARing, &huart3, response, SIM_RESPONSE_MAX_SIZE);
}
 8001048:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	RingBufferDmaU8_initUSARTRx(&SIMRxDMARing, &huart3, response, SIM_RESPONSE_MAX_SIZE);
 800104c:	4a04      	ldr	r2, [pc, #16]	@ (8001060 <SIM_UART_ReInitializeRxDMA+0x2c>)
 800104e:	4903      	ldr	r1, [pc, #12]	@ (800105c <SIM_UART_ReInitializeRxDMA+0x28>)
 8001050:	4804      	ldr	r0, [pc, #16]	@ (8001064 <SIM_UART_ReInitializeRxDMA+0x30>)
 8001052:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8001056:	f001 bea3 	b.w	8002da0 <RingBufferDmaU8_initUSARTRx>
 800105a:	bf00      	nop
 800105c:	20001140 	.word	0x20001140
 8001060:	20000c80 	.word	0x20000c80
 8001064:	20000c70 	.word	0x20000c70

08001068 <find_length>:

int find_length(uint8_t *str){
	int i = 0;
	while(str[i] != 0x00){
 8001068:	f7ff b912 	b.w	8000290 <strlen>

0800106c <receive_response>:
	}
	return i;
		
}

void receive_response(char *cmd_str) {
 800106c:	b530      	push	{r4, r5, lr}
	uint8_t output_buffer[128];
	snprintf((char *)output_buffer, 128, "Response at command: %s\n", cmd_str);
	uart_transmit_string(&huart1, output_buffer);
 800106e:	4c10      	ldr	r4, [pc, #64]	@ (80010b0 <receive_response+0x44>)
	snprintf((char *)output_buffer, 128, "Response at command: %s\n", cmd_str);
 8001070:	4a10      	ldr	r2, [pc, #64]	@ (80010b4 <receive_response+0x48>)
	//while(response[1] == '\0'){}

	HAL_UART_Transmit(&huart1, response, find_length(response), 1000);
 8001072:	4d11      	ldr	r5, [pc, #68]	@ (80010b8 <receive_response+0x4c>)
void receive_response(char *cmd_str) {
 8001074:	b0a1      	sub	sp, #132	@ 0x84
 8001076:	4603      	mov	r3, r0
	snprintf((char *)output_buffer, 128, "Response at command: %s\n", cmd_str);
 8001078:	2180      	movs	r1, #128	@ 0x80
 800107a:	4668      	mov	r0, sp
 800107c:	f009 fd52 	bl	800ab24 <sniprintf>
	uart_transmit_string(&huart1, output_buffer);
 8001080:	4669      	mov	r1, sp
 8001082:	4620      	mov	r0, r4
 8001084:	f003 fa76 	bl	8004574 <uart_transmit_string>
	HAL_UART_Transmit(&huart1, response, find_length(response), 1000);
 8001088:	4628      	mov	r0, r5
 800108a:	f7ff ffed 	bl	8001068 <find_length>
 800108e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001092:	b282      	uxth	r2, r0
 8001094:	4629      	mov	r1, r5
 8001096:	4620      	mov	r0, r4
 8001098:	f006 f992 	bl	80073c0 <HAL_UART_Transmit>
	uart_transmit_string(&huart1, (uint8_t*)"\n");
 800109c:	4907      	ldr	r1, [pc, #28]	@ (80010bc <receive_response+0x50>)
 800109e:	4620      	mov	r0, r4
 80010a0:	f003 fa68 	bl	8004574 <uart_transmit_string>
	osDelay(1000);
 80010a4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80010a8:	f006 fafa 	bl	80076a0 <osDelay>
}
 80010ac:	b021      	add	sp, #132	@ 0x84
 80010ae:	bd30      	pop	{r4, r5, pc}
 80010b0:	20001250 	.word	0x20001250
 80010b4:	0800ecc3 	.word	0x0800ecc3
 80010b8:	20000c80 	.word	0x20000c80
 80010bc:	0800fa08 	.word	0x0800fa08

080010c0 <init_SIM_module>:

void init_SIM_module() {
 80010c0:	b510      	push	{r4, lr}
    
    // Check if module responds
	SIM_ENABLE();
 80010c2:	4c0b      	ldr	r4, [pc, #44]	@ (80010f0 <init_SIM_module+0x30>)
 80010c4:	2201      	movs	r2, #1
 80010c6:	4611      	mov	r1, r2
 80010c8:	4620      	mov	r0, r4
 80010ca:	f004 fa21 	bl	8005510 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 80010ce:	2200      	movs	r2, #0
 80010d0:	2102      	movs	r1, #2
 80010d2:	4620      	mov	r0, r4
 80010d4:	f004 fa1c 	bl	8005510 <HAL_GPIO_WritePin>
	osDelay(2000);
 80010d8:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80010dc:	f006 fae0 	bl	80076a0 <osDelay>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 80010e0:	4620      	mov	r0, r4
 80010e2:	2201      	movs	r2, #1
}
 80010e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 80010e8:	2102      	movs	r1, #2
 80010ea:	f004 ba11 	b.w	8005510 <HAL_GPIO_WritePin>
 80010ee:	bf00      	nop
 80010f0:	48000800 	.word	0x48000800

080010f4 <reboot_SIM_module>:

void reboot_SIM_module(){
 80010f4:	b510      	push	{r4, lr}
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 80010f6:	4c11      	ldr	r4, [pc, #68]	@ (800113c <reboot_SIM_module+0x48>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	2102      	movs	r1, #2
 80010fc:	4620      	mov	r0, r4
 80010fe:	f004 fa07 	bl	8005510 <HAL_GPIO_WritePin>
	osDelay(1500);
 8001102:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8001106:	f006 facb 	bl	80076a0 <osDelay>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 800110a:	2201      	movs	r2, #1
 800110c:	2102      	movs	r1, #2
 800110e:	4620      	mov	r0, r4
 8001110:	f004 f9fe 	bl	8005510 <HAL_GPIO_WritePin>
	osDelay(10000);
 8001114:	f242 7010 	movw	r0, #10000	@ 0x2710
 8001118:	f006 fac2 	bl	80076a0 <osDelay>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 800111c:	2200      	movs	r2, #0
 800111e:	2102      	movs	r1, #2
 8001120:	4620      	mov	r0, r4
 8001122:	f004 f9f5 	bl	8005510 <HAL_GPIO_WritePin>
	osDelay(1500);
 8001126:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 800112a:	f006 fab9 	bl	80076a0 <osDelay>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 800112e:	4620      	mov	r0, r4
 8001130:	2201      	movs	r2, #1
}
 8001132:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 8001136:	2102      	movs	r1, #2
 8001138:	f004 b9ea 	b.w	8005510 <HAL_GPIO_WritePin>
 800113c:	48000800 	.word	0x48000800

08001140 <convert_dec_to_hex_value>:

int convert_dec_to_hex_value(int int_value){
    return (int_value /10*16) + (int_value%10);
 8001140:	220a      	movs	r2, #10
 8001142:	fb90 f3f2 	sdiv	r3, r0, r2
 8001146:	fb02 0013 	mls	r0, r2, r3, r0
}
 800114a:	eb00 1003 	add.w	r0, r0, r3, lsl #4
 800114e:	4770      	bx	lr

08001150 <save_rmc_to_location_info>:


void save_rmc_to_location_info(JT808_LocationInfoReport* location_info){
 8001150:	b570      	push	{r4, r5, r6, lr}
	location_info->timestamp[0] = (uint8_t)convert_dec_to_hex_value(rmc_jt.date.Yr);  // Assign year (0x23)
 8001152:	4d43      	ldr	r5, [pc, #268]	@ (8001260 <save_rmc_to_location_info+0x110>)
void save_rmc_to_location_info(JT808_LocationInfoReport* location_info){
 8001154:	4604      	mov	r4, r0
	location_info->timestamp[0] = (uint8_t)convert_dec_to_hex_value(rmc_jt.date.Yr);  // Assign year (0x23)
 8001156:	69a8      	ldr	r0, [r5, #24]
 8001158:	f7ff fff2 	bl	8001140 <convert_dec_to_hex_value>
 800115c:	f884 0023 	strb.w	r0, [r4, #35]	@ 0x23
	location_info->timestamp[1] = (uint8_t)convert_dec_to_hex_value(rmc_jt.date.Mon);          // Assign month (0x11)
 8001160:	6968      	ldr	r0, [r5, #20]
 8001162:	f7ff ffed 	bl	8001140 <convert_dec_to_hex_value>
 8001166:	f884 0024 	strb.w	r0, [r4, #36]	@ 0x24
	location_info->timestamp[2] = (uint8_t)convert_dec_to_hex_value(rmc_jt.date.Day);            // Assign day (0x08)
 800116a:	6928      	ldr	r0, [r5, #16]
 800116c:	f7ff ffe8 	bl	8001140 <convert_dec_to_hex_value>
 8001170:	f884 0025 	strb.w	r0, [r4, #37]	@ 0x25
	location_info->timestamp[3] = (uint8_t)convert_dec_to_hex_value(rmc_jt.tim.hour);           // Assign hour (0x14)
 8001174:	6828      	ldr	r0, [r5, #0]
 8001176:	f7ff ffe3 	bl	8001140 <convert_dec_to_hex_value>
 800117a:	f884 0026 	strb.w	r0, [r4, #38]	@ 0x26
	location_info->timestamp[4] = (uint8_t)convert_dec_to_hex_value(rmc_jt.tim.min);         // Assign minute (0x55)
 800117e:	6868      	ldr	r0, [r5, #4]
 8001180:	f7ff ffde 	bl	8001140 <convert_dec_to_hex_value>
 8001184:	f884 0027 	strb.w	r0, [r4, #39]	@ 0x27
	location_info->timestamp[5] = (uint8_t)convert_dec_to_hex_value(rmc_jt.tim.sec);  
 8001188:	68a8      	ldr	r0, [r5, #8]
 800118a:	f7ff ffd9 	bl	8001140 <convert_dec_to_hex_value>
 800118e:	f884 0028 	strb.w	r0, [r4, #40]	@ 0x28
	double latitude = rmc_jt.lcation.latitude * 1000000;
 8001192:	e9d5 010e 	ldrd	r0, r1, [r5, #56]	@ 0x38
 8001196:	a32e      	add	r3, pc, #184	@ (adr r3, 8001250 <save_rmc_to_location_info+0x100>)
 8001198:	e9d3 2300 	ldrd	r2, r3, [r3]
 800119c:	f7ff fa3c 	bl	8000618 <__aeabi_dmul>
	double longitude = rmc_jt.lcation.longitude * 1000000;
	int32_t latitude_int = (int32_t)round(latitude);  // Convert to integer, rounding if needed
 80011a0:	ec41 0b10 	vmov	d0, r0, r1
 80011a4:	f00d fc74 	bl	800ea90 <round>
 80011a8:	ec51 0b10 	vmov	r0, r1, d0
 80011ac:	f7ff fce4 	bl	8000b78 <__aeabi_d2iz>
	double longitude = rmc_jt.lcation.longitude * 1000000;
 80011b0:	a327      	add	r3, pc, #156	@ (adr r3, 8001250 <save_rmc_to_location_info+0x100>)
 80011b2:	e9d3 2300 	ldrd	r2, r3, [r3]
	int32_t latitude_int = (int32_t)round(latitude);  // Convert to integer, rounding if needed
 80011b6:	4606      	mov	r6, r0
	double longitude = rmc_jt.lcation.longitude * 1000000;
 80011b8:	e9d5 0112 	ldrd	r0, r1, [r5, #72]	@ 0x48
 80011bc:	f7ff fa2c 	bl	8000618 <__aeabi_dmul>
	int32_t longitude_int = (int32_t)round(longitude);
 80011c0:	ec41 0b10 	vmov	d0, r0, r1
 80011c4:	f00d fc64 	bl	800ea90 <round>
 80011c8:	ec51 0b10 	vmov	r0, r1, d0
 80011cc:	f7ff fcd4 	bl	8000b78 <__aeabi_d2iz>
	
	location_info->latitude[0] = (latitude_int >> 24) & 0xFF;  // Most significant byte
 80011d0:	0e33      	lsrs	r3, r6, #24
 80011d2:	7563      	strb	r3, [r4, #21]
	location_info->latitude[1] = (latitude_int >> 16) & 0xFF;
 80011d4:	1433      	asrs	r3, r6, #16
 80011d6:	75a3      	strb	r3, [r4, #22]
	location_info->latitude[2] = (latitude_int >> 8) & 0xFF;
 80011d8:	1233      	asrs	r3, r6, #8
 80011da:	75e3      	strb	r3, [r4, #23]
	location_info->latitude[3] = latitude_int & 0xFF;
	
	location_info->longitude[0] = (longitude_int >> 24) & 0xFF;  // Most significant byte
 80011dc:	0e03      	lsrs	r3, r0, #24
 80011de:	7663      	strb	r3, [r4, #25]
	location_info->longitude[1] = (longitude_int >> 16) & 0xFF;
 80011e0:	1403      	asrs	r3, r0, #16
 80011e2:	76a3      	strb	r3, [r4, #26]
	location_info->longitude[2] = (longitude_int >> 8) & 0xFF;
 80011e4:	1203      	asrs	r3, r0, #8
 80011e6:	76e3      	strb	r3, [r4, #27]
	location_info->longitude[3] = longitude_int & 0xFF;
 80011e8:	7720      	strb	r0, [r4, #28]
	location_info->latitude[3] = latitude_int & 0xFF;
 80011ea:	7626      	strb	r6, [r4, #24]
	
	int speed = round(rmc_jt.speed * 10 * 1.852);
 80011ec:	ed95 7a0a 	vldr	s14, [r5, #40]	@ 0x28
 80011f0:	eef2 7a04 	vmov.f32	s15, #36	@ 0x41200000  10.0
 80011f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011f8:	ee17 0a90 	vmov	r0, s15
 80011fc:	f7ff f9b4 	bl	8000568 <__aeabi_f2d>
 8001200:	a315      	add	r3, pc, #84	@ (adr r3, 8001258 <save_rmc_to_location_info+0x108>)
 8001202:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001206:	f7ff fa07 	bl	8000618 <__aeabi_dmul>
 800120a:	ec41 0b10 	vmov	d0, r0, r1
 800120e:	f00d fc3f 	bl	800ea90 <round>
 8001212:	ec51 0b10 	vmov	r0, r1, d0
 8001216:	f7ff fcaf 	bl	8000b78 <__aeabi_d2iz>
	location_info->speed[0] = (speed >> 8) & 0xFF;
 800121a:	1203      	asrs	r3, r0, #8
 800121c:	77e3      	strb	r3, [r4, #31]
	location_info->speed[1] =  speed & 0xFF;
 800121e:	f884 0020 	strb.w	r0, [r4, #32]
	
	int direction = round(rmc_jt.course);
 8001222:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 8001224:	f7ff f9a0 	bl	8000568 <__aeabi_f2d>
 8001228:	ec41 0b10 	vmov	d0, r0, r1
 800122c:	f00d fc30 	bl	800ea90 <round>
 8001230:	ec51 0b10 	vmov	r0, r1, d0
 8001234:	f7ff fca0 	bl	8000b78 <__aeabi_d2iz>
	location_info->direction[0] = (direction >> 8) & 0xFF;
 8001238:	1203      	asrs	r3, r0, #8
	location_info->direction[1] =  direction & 0xFF;
 800123a:	f884 0022 	strb.w	r0, [r4, #34]	@ 0x22
	location_info->direction[0] = (direction >> 8) & 0xFF;
 800123e:	f884 3021 	strb.w	r3, [r4, #33]	@ 0x21
	
	set_status_bit(location_info->status);
 8001242:	f104 0011 	add.w	r0, r4, #17
}
 8001246:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	set_status_bit(location_info->status);
 800124a:	f7ff becb 	b.w	8000fe4 <set_status_bit>
 800124e:	bf00      	nop
 8001250:	00000000 	.word	0x00000000
 8001254:	412e8480 	.word	0x412e8480
 8001258:	c083126f 	.word	0xc083126f
 800125c:	3ffda1ca 	.word	0x3ffda1ca
 8001260:	20000be8 	.word	0x20000be8

08001264 <first_check_SIM>:
    return 1;
}

//AT
int first_check_SIM()
{
 8001264:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8001266:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 800126a:	2100      	movs	r1, #0
 800126c:	482f      	ldr	r0, [pc, #188]	@ (800132c <first_check_SIM+0xc8>)
	SIM_UART_ReInitializeRxDMA();
	const char *substring = "PB DONE";
	int count_check = 0;
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
	SIM_UART_ReInitializeRxDMA();
	while(strstr((char *) response, substring) == NULL)
 800126e:	4d30      	ldr	r5, [pc, #192]	@ (8001330 <first_check_SIM+0xcc>)
 8001270:	4c2e      	ldr	r4, [pc, #184]	@ (800132c <first_check_SIM+0xc8>)
	{
		receive_response("WAITING FOR SIM MODULE TO BE READY\n");
 8001272:	4e30      	ldr	r6, [pc, #192]	@ (8001334 <first_check_SIM+0xd0>)
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8001274:	f009 fd52 	bl	800ad1c <memset>
	SIM_UART_ReInitializeRxDMA();
 8001278:	f7ff fedc 	bl	8001034 <SIM_UART_ReInitializeRxDMA>
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 800127c:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8001280:	2100      	movs	r1, #0
 8001282:	482a      	ldr	r0, [pc, #168]	@ (800132c <first_check_SIM+0xc8>)
 8001284:	f009 fd4a 	bl	800ad1c <memset>
	SIM_UART_ReInitializeRxDMA();
 8001288:	f7ff fed4 	bl	8001034 <SIM_UART_ReInitializeRxDMA>
	while(strstr((char *) response, substring) == NULL)
 800128c:	4629      	mov	r1, r5
 800128e:	4620      	mov	r0, r4
 8001290:	f009 fd94 	bl	800adbc <strstr>
 8001294:	2800      	cmp	r0, #0
 8001296:	d03a      	beq.n	800130e <first_check_SIM+0xaa>
		if(count_check >= 40) return 0;
		osDelay(200);
	}
	receive_response("WAITING FOR SIM MODULE TO BE READY\n");
 8001298:	4826      	ldr	r0, [pc, #152]	@ (8001334 <first_check_SIM+0xd0>)

	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
	SIM_UART_ReInitializeRxDMA();

	send_AT_command(FIRST_CHECK);
	while(strstr((char *) response, CHECK_RESPONSE) != NULL){
 800129a:	4e27      	ldr	r6, [pc, #156]	@ (8001338 <first_check_SIM+0xd4>)
 800129c:	4d23      	ldr	r5, [pc, #140]	@ (800132c <first_check_SIM+0xc8>)
		receive_response("First check SIM MODULE\n");
 800129e:	4f27      	ldr	r7, [pc, #156]	@ (800133c <first_check_SIM+0xd8>)
	receive_response("WAITING FOR SIM MODULE TO BE READY\n");
 80012a0:	f7ff fee4 	bl	800106c <receive_response>
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 80012a4:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 80012a8:	2100      	movs	r1, #0
 80012aa:	4820      	ldr	r0, [pc, #128]	@ (800132c <first_check_SIM+0xc8>)
 80012ac:	f009 fd36 	bl	800ad1c <memset>
	SIM_UART_ReInitializeRxDMA();
 80012b0:	f7ff fec0 	bl	8001034 <SIM_UART_ReInitializeRxDMA>
	send_AT_command(FIRST_CHECK);
 80012b4:	4822      	ldr	r0, [pc, #136]	@ (8001340 <first_check_SIM+0xdc>)
 80012b6:	f7ff fead 	bl	8001014 <send_AT_command>
	while(strstr((char *) response, CHECK_RESPONSE) != NULL){
 80012ba:	4631      	mov	r1, r6
 80012bc:	4628      	mov	r0, r5
 80012be:	f009 fd7d 	bl	800adbc <strstr>
 80012c2:	4604      	mov	r4, r0
 80012c4:	bb50      	cbnz	r0, 800131c <first_check_SIM+0xb8>
	}
	receive_response("First check SIM MODULE\n");
 80012c6:	481d      	ldr	r0, [pc, #116]	@ (800133c <first_check_SIM+0xd8>)
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
	SIM_UART_ReInitializeRxDMA();

	send_AT_command("AT+CPAS\r\n");
	while(strstr((char *) response, CHECK_RESPONSE) != NULL){
 80012c8:	4e1b      	ldr	r6, [pc, #108]	@ (8001338 <first_check_SIM+0xd4>)
 80012ca:	4d18      	ldr	r5, [pc, #96]	@ (800132c <first_check_SIM+0xc8>)
		receive_response("Check status of SIM MODULE\n");
 80012cc:	4f1d      	ldr	r7, [pc, #116]	@ (8001344 <first_check_SIM+0xe0>)
	receive_response("First check SIM MODULE\n");
 80012ce:	f7ff fecd 	bl	800106c <receive_response>
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 80012d2:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 80012d6:	4621      	mov	r1, r4
 80012d8:	4814      	ldr	r0, [pc, #80]	@ (800132c <first_check_SIM+0xc8>)
 80012da:	f009 fd1f 	bl	800ad1c <memset>
	SIM_UART_ReInitializeRxDMA();
 80012de:	f7ff fea9 	bl	8001034 <SIM_UART_ReInitializeRxDMA>
	send_AT_command("AT+CPAS\r\n");
 80012e2:	4819      	ldr	r0, [pc, #100]	@ (8001348 <first_check_SIM+0xe4>)
 80012e4:	f7ff fe96 	bl	8001014 <send_AT_command>
	while(strstr((char *) response, CHECK_RESPONSE) != NULL){
 80012e8:	4631      	mov	r1, r6
 80012ea:	4628      	mov	r0, r5
 80012ec:	f009 fd66 	bl	800adbc <strstr>
 80012f0:	4604      	mov	r4, r0
 80012f2:	b9b8      	cbnz	r0, 8001324 <first_check_SIM+0xc0>
	}
	receive_response("Check status of SIM MODULE\n");
 80012f4:	4813      	ldr	r0, [pc, #76]	@ (8001344 <first_check_SIM+0xe0>)
 80012f6:	f7ff feb9 	bl	800106c <receive_response>
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 80012fa:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 80012fe:	4621      	mov	r1, r4
 8001300:	480a      	ldr	r0, [pc, #40]	@ (800132c <first_check_SIM+0xc8>)
 8001302:	f009 fd0b 	bl	800ad1c <memset>
	SIM_UART_ReInitializeRxDMA();
 8001306:	f7ff fe95 	bl	8001034 <SIM_UART_ReInitializeRxDMA>

	return 1;
}
 800130a:	2001      	movs	r0, #1
 800130c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		receive_response("WAITING FOR SIM MODULE TO BE READY\n");
 800130e:	4630      	mov	r0, r6
 8001310:	f7ff feac 	bl	800106c <receive_response>
		osDelay(200);
 8001314:	20c8      	movs	r0, #200	@ 0xc8
 8001316:	f006 f9c3 	bl	80076a0 <osDelay>
 800131a:	e7b7      	b.n	800128c <first_check_SIM+0x28>
		receive_response("First check SIM MODULE\n");
 800131c:	4638      	mov	r0, r7
 800131e:	f7ff fea5 	bl	800106c <receive_response>
 8001322:	e7ca      	b.n	80012ba <first_check_SIM+0x56>
		receive_response("Check status of SIM MODULE\n");
 8001324:	4638      	mov	r0, r7
 8001326:	f7ff fea1 	bl	800106c <receive_response>
 800132a:	e7dd      	b.n	80012e8 <first_check_SIM+0x84>
 800132c:	20000c80 	.word	0x20000c80
 8001330:	0800ed89 	.word	0x0800ed89
 8001334:	0800ed65 	.word	0x0800ed65
 8001338:	0800edae 	.word	0x0800edae
 800133c:	0800ed96 	.word	0x0800ed96
 8001340:	0800ed91 	.word	0x0800ed91
 8001344:	0800edbb 	.word	0x0800edbb
 8001348:	0800edb1 	.word	0x0800edb1

0800134c <extract_last_12_digits_bcd>:


void extract_last_12_digits_bcd(const uint8_t *response, uint8_t *output) {
 800134c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800134e:	460d      	mov	r5, r1
	uint8_t output_buffer[10];
	const uint8_t *start = response;
	while (*start && !(start[0] == 'A' && start[1] == 'T' && start[2] == '+' &&
 8001350:	4604      	mov	r4, r0
 8001352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8001356:	b1cb      	cbz	r3, 800138c <extract_last_12_digits_bcd+0x40>
 8001358:	2b41      	cmp	r3, #65	@ 0x41
 800135a:	d1f9      	bne.n	8001350 <extract_last_12_digits_bcd+0x4>
 800135c:	7803      	ldrb	r3, [r0, #0]
 800135e:	2b54      	cmp	r3, #84	@ 0x54
 8001360:	d1f6      	bne.n	8001350 <extract_last_12_digits_bcd+0x4>
 8001362:	7843      	ldrb	r3, [r0, #1]
 8001364:	2b2b      	cmp	r3, #43	@ 0x2b
 8001366:	d1f3      	bne.n	8001350 <extract_last_12_digits_bcd+0x4>
 8001368:	7883      	ldrb	r3, [r0, #2]
 800136a:	2b43      	cmp	r3, #67	@ 0x43
 800136c:	d1f0      	bne.n	8001350 <extract_last_12_digits_bcd+0x4>
					   start[3] == 'C' && start[4] == 'G' && start[5] == 'S' &&
 800136e:	78c3      	ldrb	r3, [r0, #3]
 8001370:	2b47      	cmp	r3, #71	@ 0x47
 8001372:	d1ed      	bne.n	8001350 <extract_last_12_digits_bcd+0x4>
 8001374:	7903      	ldrb	r3, [r0, #4]
 8001376:	2b53      	cmp	r3, #83	@ 0x53
 8001378:	d1ea      	bne.n	8001350 <extract_last_12_digits_bcd+0x4>
 800137a:	7943      	ldrb	r3, [r0, #5]
 800137c:	2b4e      	cmp	r3, #78	@ 0x4e
 800137e:	d1e7      	bne.n	8001350 <extract_last_12_digits_bcd+0x4>
					   start[6] == 'N' && start[7] == '=' && start[8] == '1')) {
 8001380:	7983      	ldrb	r3, [r0, #6]
 8001382:	2b3d      	cmp	r3, #61	@ 0x3d
 8001384:	d1e4      	bne.n	8001350 <extract_last_12_digits_bcd+0x4>
	while (*start && !(start[0] == 'A' && start[1] == 'T' && start[2] == '+' &&
 8001386:	79c3      	ldrb	r3, [r0, #7]
 8001388:	2b31      	cmp	r3, #49	@ 0x31
 800138a:	d1e1      	bne.n	8001350 <extract_last_12_digits_bcd+0x4>
		start++;
	}
	uart_transmit_string(&huart1, (uint8_t *)"Inside Checking terminal Number: ");
 800138c:	4922      	ldr	r1, [pc, #136]	@ (8001418 <extract_last_12_digits_bcd+0xcc>)
 800138e:	4823      	ldr	r0, [pc, #140]	@ (800141c <extract_last_12_digits_bcd+0xd0>)
 8001390:	f003 f8f0 	bl	8004574 <uart_transmit_string>
	uart_transmit_string( &huart1,(uint8_t *) start);
 8001394:	4821      	ldr	r0, [pc, #132]	@ (800141c <extract_last_12_digits_bcd+0xd0>)
 8001396:	4621      	mov	r1, r4
 8001398:	f003 f8ec 	bl	8004574 <uart_transmit_string>
	// If "AT+CGSN=1" is found, move to the start of the number (skip "AT+CGSN=1 ")
	if (*start) {
 800139c:	7823      	ldrb	r3, [r4, #0]
 800139e:	b96b      	cbnz	r3, 80013bc <extract_last_12_digits_bcd+0x70>
			for (int i = 0; i < 6; i++) {
				output[i] = ((last_12[i * 2] - '0') << 4) | (last_12[i * 2 + 1] - '0');
			}
		}
	}
	uart_transmit_string(&huart1, (uint8_t *)" Check terminal Number-0: ");
 80013a0:	491f      	ldr	r1, [pc, #124]	@ (8001420 <extract_last_12_digits_bcd+0xd4>)
 80013a2:	481e      	ldr	r0, [pc, #120]	@ (800141c <extract_last_12_digits_bcd+0xd0>)
 80013a4:	f003 f8e6 	bl	8004574 <uart_transmit_string>
	uart_transmit_string(&huart1, output);
 80013a8:	4629      	mov	r1, r5
 80013aa:	481c      	ldr	r0, [pc, #112]	@ (800141c <extract_last_12_digits_bcd+0xd0>)
 80013ac:	f003 f8e2 	bl	8004574 <uart_transmit_string>
	uart_transmit_string(&huart1, (uint8_t *)" \n");
 80013b0:	491c      	ldr	r1, [pc, #112]	@ (8001424 <extract_last_12_digits_bcd+0xd8>)
 80013b2:	481a      	ldr	r0, [pc, #104]	@ (800141c <extract_last_12_digits_bcd+0xd0>)
 80013b4:	f003 f8de 	bl	8004574 <uart_transmit_string>
}
 80013b8:	b004      	add	sp, #16
 80013ba:	bd70      	pop	{r4, r5, r6, pc}
		start += 10;  // Move pointer past "AT+CGSN=1 "
 80013bc:	340a      	adds	r4, #10
		while (*start && (*start < '0' || *start > '9')) {
 80013be:	7821      	ldrb	r1, [r4, #0]
 80013c0:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 80013c4:	4623      	mov	r3, r4
 80013c6:	b2d2      	uxtb	r2, r2
 80013c8:	3401      	adds	r4, #1
 80013ca:	b109      	cbz	r1, 80013d0 <extract_last_12_digits_bcd+0x84>
 80013cc:	2a09      	cmp	r2, #9
 80013ce:	d8f6      	bhi.n	80013be <extract_last_12_digits_bcd+0x72>
 80013d0:	461a      	mov	r2, r3
		while (*end && (*end >= '0' && *end <= '9')) {
 80013d2:	4616      	mov	r6, r2
 80013d4:	f812 1b01 	ldrb.w	r1, [r2], #1
 80013d8:	3930      	subs	r1, #48	@ 0x30
 80013da:	2909      	cmp	r1, #9
 80013dc:	d9f9      	bls.n	80013d2 <extract_last_12_digits_bcd+0x86>
 80013de:	1af4      	subs	r4, r6, r3
		uart_transmit_string(&huart1, (uint8_t *)"Inside Checking terminal Number-2: LEN ");
 80013e0:	4911      	ldr	r1, [pc, #68]	@ (8001428 <extract_last_12_digits_bcd+0xdc>)
 80013e2:	480e      	ldr	r0, [pc, #56]	@ (800141c <extract_last_12_digits_bcd+0xd0>)
 80013e4:	f003 f8c6 	bl	8004574 <uart_transmit_string>
		snprintf((char*)output_buffer, 10, "%d", digit_count);
 80013e8:	4a10      	ldr	r2, [pc, #64]	@ (800142c <extract_last_12_digits_bcd+0xe0>)
 80013ea:	4623      	mov	r3, r4
 80013ec:	210a      	movs	r1, #10
 80013ee:	a801      	add	r0, sp, #4
 80013f0:	f009 fb98 	bl	800ab24 <sniprintf>
		if (digit_count >= 12) {
 80013f4:	2c0b      	cmp	r4, #11
 80013f6:	d9d3      	bls.n	80013a0 <extract_last_12_digits_bcd+0x54>
			const uint8_t *last_12 = end - 12;
 80013f8:	f1a6 030c 	sub.w	r3, r6, #12
 80013fc:	1e68      	subs	r0, r5, #1
				output[i] = ((last_12[i * 2] - '0') << 4) | (last_12[i * 2 + 1] - '0');
 80013fe:	7819      	ldrb	r1, [r3, #0]
 8001400:	785a      	ldrb	r2, [r3, #1]
 8001402:	3930      	subs	r1, #48	@ 0x30
 8001404:	3a30      	subs	r2, #48	@ 0x30
			for (int i = 0; i < 6; i++) {
 8001406:	3302      	adds	r3, #2
				output[i] = ((last_12[i * 2] - '0') << 4) | (last_12[i * 2 + 1] - '0');
 8001408:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
			for (int i = 0; i < 6; i++) {
 800140c:	429e      	cmp	r6, r3
				output[i] = ((last_12[i * 2] - '0') << 4) | (last_12[i * 2 + 1] - '0');
 800140e:	f800 2f01 	strb.w	r2, [r0, #1]!
			for (int i = 0; i < 6; i++) {
 8001412:	d1f4      	bne.n	80013fe <extract_last_12_digits_bcd+0xb2>
 8001414:	e7c4      	b.n	80013a0 <extract_last_12_digits_bcd+0x54>
 8001416:	bf00      	nop
 8001418:	0800edd7 	.word	0x0800edd7
 800141c:	20001250 	.word	0x20001250
 8001420:	0800edf9 	.word	0x0800edf9
 8001424:	0800fa3e 	.word	0x0800fa3e
 8001428:	0800ee14 	.word	0x0800ee14
 800142c:	0800f244 	.word	0x0800f244

08001430 <check_SIM_ready>:
        }
    }
    return -1; // Failure
}

int check_SIM_ready(){
 8001430:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	const int TIME_LIMIT = 5;
	int count_check_sim = 0;
	//GET IMEI
	send_AT_command(GET_IMEI);
 8001432:	488f      	ldr	r0, [pc, #572]	@ (8001670 <check_SIM_ready+0x240>)
	while(strstr((char *) response, CHECK_RESPONSE) == NULL){
 8001434:	4d8f      	ldr	r5, [pc, #572]	@ (8001674 <check_SIM_ready+0x244>)
 8001436:	4c90      	ldr	r4, [pc, #576]	@ (8001678 <check_SIM_ready+0x248>)
		receive_response("Check IMEI-0:\n");
 8001438:	4e90      	ldr	r6, [pc, #576]	@ (800167c <check_SIM_ready+0x24c>)
	send_AT_command(GET_IMEI);
 800143a:	f7ff fdeb 	bl	8001014 <send_AT_command>
	while(strstr((char *) response, CHECK_RESPONSE) == NULL){
 800143e:	4629      	mov	r1, r5
 8001440:	4620      	mov	r0, r4
 8001442:	f009 fcbb 	bl	800adbc <strstr>
 8001446:	2800      	cmp	r0, #0
 8001448:	f000 80ef 	beq.w	800162a <check_SIM_ready+0x1fa>
	}
	receive_response("Check IMEI-0:\n");
 800144c:	488b      	ldr	r0, [pc, #556]	@ (800167c <check_SIM_ready+0x24c>)
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
	SIM_UART_ReInitializeRxDMA();

	//GET MODEL IDENTIFICATION
	send_AT_command(GET_MODEL_IDENTI);
	while(strstr((char *) response, CHECK_RESPONSE) == NULL){
 800144e:	4d89      	ldr	r5, [pc, #548]	@ (8001674 <check_SIM_ready+0x244>)
 8001450:	4c89      	ldr	r4, [pc, #548]	@ (8001678 <check_SIM_ready+0x248>)
		receive_response("Check MODEL IDENTIFICATION\n");
 8001452:	4e8b      	ldr	r6, [pc, #556]	@ (8001680 <check_SIM_ready+0x250>)
	receive_response("Check IMEI-0:\n");
 8001454:	f7ff fe0a 	bl	800106c <receive_response>
	extract_last_12_digits_bcd(response, terminal_phone_number);
 8001458:	498a      	ldr	r1, [pc, #552]	@ (8001684 <check_SIM_ready+0x254>)
 800145a:	4887      	ldr	r0, [pc, #540]	@ (8001678 <check_SIM_ready+0x248>)
 800145c:	f7ff ff76 	bl	800134c <extract_last_12_digits_bcd>
	uart_transmit_string(&huart1, (uint8_t *)" Check terminal Number: ");
 8001460:	4989      	ldr	r1, [pc, #548]	@ (8001688 <check_SIM_ready+0x258>)
 8001462:	488a      	ldr	r0, [pc, #552]	@ (800168c <check_SIM_ready+0x25c>)
 8001464:	f003 f886 	bl	8004574 <uart_transmit_string>
	uart_transmit_string(&huart1, terminal_phone_number);
 8001468:	4986      	ldr	r1, [pc, #536]	@ (8001684 <check_SIM_ready+0x254>)
 800146a:	4888      	ldr	r0, [pc, #544]	@ (800168c <check_SIM_ready+0x25c>)
 800146c:	f003 f882 	bl	8004574 <uart_transmit_string>
	uart_transmit_string(&huart1, (uint8_t *)" \n");
 8001470:	4987      	ldr	r1, [pc, #540]	@ (8001690 <check_SIM_ready+0x260>)
 8001472:	4886      	ldr	r0, [pc, #536]	@ (800168c <check_SIM_ready+0x25c>)
 8001474:	f003 f87e 	bl	8004574 <uart_transmit_string>
	osDelay(100);
 8001478:	2064      	movs	r0, #100	@ 0x64
 800147a:	f006 f911 	bl	80076a0 <osDelay>
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 800147e:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8001482:	2100      	movs	r1, #0
 8001484:	487c      	ldr	r0, [pc, #496]	@ (8001678 <check_SIM_ready+0x248>)
 8001486:	f009 fc49 	bl	800ad1c <memset>
	SIM_UART_ReInitializeRxDMA();
 800148a:	f7ff fdd3 	bl	8001034 <SIM_UART_ReInitializeRxDMA>
	send_AT_command(GET_MODEL_IDENTI);
 800148e:	4881      	ldr	r0, [pc, #516]	@ (8001694 <check_SIM_ready+0x264>)
 8001490:	f7ff fdc0 	bl	8001014 <send_AT_command>
	while(strstr((char *) response, CHECK_RESPONSE) == NULL){
 8001494:	4629      	mov	r1, r5
 8001496:	4620      	mov	r0, r4
 8001498:	f009 fc90 	bl	800adbc <strstr>
 800149c:	2800      	cmp	r0, #0
 800149e:	f000 80c8 	beq.w	8001632 <check_SIM_ready+0x202>
	}
	receive_response("Check MODEL IDENTIFICATION\n");
 80014a2:	4877      	ldr	r0, [pc, #476]	@ (8001680 <check_SIM_ready+0x250>)


	// Check if SIM is ready
	send_AT_command(CHECK_SIM_READY);
	osDelay(100);
	while(strstr((char *) response, CHECK_RESPONSE) == NULL){
 80014a4:	4e73      	ldr	r6, [pc, #460]	@ (8001674 <check_SIM_ready+0x244>)
 80014a6:	4d74      	ldr	r5, [pc, #464]	@ (8001678 <check_SIM_ready+0x248>)
		receive_response("Check SIM\n");
 80014a8:	4f7b      	ldr	r7, [pc, #492]	@ (8001698 <check_SIM_ready+0x268>)
	receive_response("Check MODEL IDENTIFICATION\n");
 80014aa:	f7ff fddf 	bl	800106c <receive_response>
	osDelay(100);
 80014ae:	2064      	movs	r0, #100	@ 0x64
 80014b0:	f006 f8f6 	bl	80076a0 <osDelay>
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 80014b4:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 80014b8:	2100      	movs	r1, #0
 80014ba:	486f      	ldr	r0, [pc, #444]	@ (8001678 <check_SIM_ready+0x248>)
 80014bc:	f009 fc2e 	bl	800ad1c <memset>
	SIM_UART_ReInitializeRxDMA();
 80014c0:	f7ff fdb8 	bl	8001034 <SIM_UART_ReInitializeRxDMA>
	send_AT_command(CHECK_SIM_READY);
 80014c4:	4875      	ldr	r0, [pc, #468]	@ (800169c <check_SIM_ready+0x26c>)
 80014c6:	f7ff fda5 	bl	8001014 <send_AT_command>
	osDelay(100);
 80014ca:	2064      	movs	r0, #100	@ 0x64
 80014cc:	f006 f8e8 	bl	80076a0 <osDelay>
	while(strstr((char *) response, CHECK_RESPONSE) == NULL){
 80014d0:	2405      	movs	r4, #5
 80014d2:	4631      	mov	r1, r6
 80014d4:	4628      	mov	r0, r5
 80014d6:	f009 fc71 	bl	800adbc <strstr>
 80014da:	2800      	cmp	r0, #0
 80014dc:	f000 80ad 	beq.w	800163a <check_SIM_ready+0x20a>
			memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
			SIM_UART_ReInitializeRxDMA();
			return 0;
		}
	}
	receive_response("Check SIM\n");
 80014e0:	486d      	ldr	r0, [pc, #436]	@ (8001698 <check_SIM_ready+0x268>)
	count_check_sim = 0;


	//GET SIM CCID
	send_AT_command(GET_SIM_CCID);
	while(strstr((char *) response, "+QCCID:") == NULL){
 80014e2:	4e6f      	ldr	r6, [pc, #444]	@ (80016a0 <check_SIM_ready+0x270>)
 80014e4:	4d64      	ldr	r5, [pc, #400]	@ (8001678 <check_SIM_ready+0x248>)
		receive_response("Check SIM CCID\n");
 80014e6:	4f6f      	ldr	r7, [pc, #444]	@ (80016a4 <check_SIM_ready+0x274>)
	receive_response("Check SIM\n");
 80014e8:	f7ff fdc0 	bl	800106c <receive_response>
	osDelay(100);
 80014ec:	2064      	movs	r0, #100	@ 0x64
 80014ee:	f006 f8d7 	bl	80076a0 <osDelay>
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 80014f2:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 80014f6:	2100      	movs	r1, #0
 80014f8:	485f      	ldr	r0, [pc, #380]	@ (8001678 <check_SIM_ready+0x248>)
 80014fa:	f009 fc0f 	bl	800ad1c <memset>
	SIM_UART_ReInitializeRxDMA();
 80014fe:	f7ff fd99 	bl	8001034 <SIM_UART_ReInitializeRxDMA>
	osDelay(100);
 8001502:	2064      	movs	r0, #100	@ 0x64
 8001504:	f006 f8cc 	bl	80076a0 <osDelay>
	send_AT_command(GET_SIM_CCID);
 8001508:	4867      	ldr	r0, [pc, #412]	@ (80016a8 <check_SIM_ready+0x278>)
 800150a:	f7ff fd83 	bl	8001014 <send_AT_command>
	while(strstr((char *) response, "+QCCID:") == NULL){
 800150e:	2405      	movs	r4, #5
 8001510:	4631      	mov	r1, r6
 8001512:	4628      	mov	r0, r5
 8001514:	f009 fc52 	bl	800adbc <strstr>
 8001518:	2800      	cmp	r0, #0
 800151a:	f000 809e 	beq.w	800165a <check_SIM_ready+0x22a>
			memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
			SIM_UART_ReInitializeRxDMA();
			return 0;
		}
	}
	receive_response("Check SIM CCID\n");
 800151e:	4861      	ldr	r0, [pc, #388]	@ (80016a4 <check_SIM_ready+0x274>)
	send_AT_command(CONFIGURE_CS_SERVICE);
	char *first_pointer = NULL;
	char *second_pointer = NULL;
	receive_response("Configuring Network Registration Status (CS Service)");
	while (first_pointer == NULL || second_pointer == NULL){
		send_AT_command("AT+CREG?\r\n");
 8001520:	4d62      	ldr	r5, [pc, #392]	@ (80016ac <check_SIM_ready+0x27c>)
		osDelay(150);
		receive_response("Check Network Registration Status (CS Service)\n");
 8001522:	4e63      	ldr	r6, [pc, #396]	@ (80016b0 <check_SIM_ready+0x280>)
		osDelay(300);
		first_pointer = strstr((char*)response, CHECK_RESPONSE);
 8001524:	4c53      	ldr	r4, [pc, #332]	@ (8001674 <check_SIM_ready+0x244>)
	receive_response("Check SIM CCID\n");
 8001526:	f7ff fda1 	bl	800106c <receive_response>
	osDelay(100);
 800152a:	2064      	movs	r0, #100	@ 0x64
 800152c:	f006 f8b8 	bl	80076a0 <osDelay>
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8001530:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8001534:	2100      	movs	r1, #0
 8001536:	4850      	ldr	r0, [pc, #320]	@ (8001678 <check_SIM_ready+0x248>)
 8001538:	f009 fbf0 	bl	800ad1c <memset>
	SIM_UART_ReInitializeRxDMA();
 800153c:	f7ff fd7a 	bl	8001034 <SIM_UART_ReInitializeRxDMA>
	send_AT_command(CONFIGURE_CS_SERVICE);
 8001540:	485c      	ldr	r0, [pc, #368]	@ (80016b4 <check_SIM_ready+0x284>)
 8001542:	f7ff fd67 	bl	8001014 <send_AT_command>
	receive_response("Configuring Network Registration Status (CS Service)");
 8001546:	485c      	ldr	r0, [pc, #368]	@ (80016b8 <check_SIM_ready+0x288>)
 8001548:	f7ff fd90 	bl	800106c <receive_response>
		send_AT_command("AT+CREG?\r\n");
 800154c:	4628      	mov	r0, r5
 800154e:	f7ff fd61 	bl	8001014 <send_AT_command>
		osDelay(150);
 8001552:	2096      	movs	r0, #150	@ 0x96
 8001554:	f006 f8a4 	bl	80076a0 <osDelay>
		receive_response("Check Network Registration Status (CS Service)\n");
 8001558:	4630      	mov	r0, r6
 800155a:	f7ff fd87 	bl	800106c <receive_response>
		osDelay(300);
 800155e:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001562:	f006 f89d 	bl	80076a0 <osDelay>
		first_pointer = strstr((char*)response, CHECK_RESPONSE);
 8001566:	4844      	ldr	r0, [pc, #272]	@ (8001678 <check_SIM_ready+0x248>)
 8001568:	4621      	mov	r1, r4
 800156a:	f009 fc27 	bl	800adbc <strstr>
		if(first_pointer != NULL){
 800156e:	2800      	cmp	r0, #0
 8001570:	d0ec      	beq.n	800154c <check_SIM_ready+0x11c>
			second_pointer = strstr(first_pointer+1, CHECK_RESPONSE);
 8001572:	4621      	mov	r1, r4
 8001574:	3001      	adds	r0, #1
 8001576:	f009 fc21 	bl	800adbc <strstr>
	while (first_pointer == NULL || second_pointer == NULL){
 800157a:	2800      	cmp	r0, #0
 800157c:	d0e6      	beq.n	800154c <check_SIM_ready+0x11c>
			memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
			SIM_UART_ReInitializeRxDMA();
			return 0;
		}
	}
	osDelay(100);
 800157e:	2064      	movs	r0, #100	@ 0x64
 8001580:	f006 f88e 	bl	80076a0 <osDelay>
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8001584:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8001588:	2100      	movs	r1, #0
 800158a:	483b      	ldr	r0, [pc, #236]	@ (8001678 <check_SIM_ready+0x248>)
	send_AT_command(CONFIGURE_PS_SERVICE);
	first_pointer = NULL;
	second_pointer = NULL;
	receive_response("Configuring Network Registration Status (PS Service)");
	while (first_pointer == NULL || second_pointer == NULL){
		send_AT_command("AT+CGREG?\r\n");
 800158c:	4d4b      	ldr	r5, [pc, #300]	@ (80016bc <check_SIM_ready+0x28c>)
		osDelay(150);
		receive_response("Check Network Registration Status (PS Service)\n");
 800158e:	4e4c      	ldr	r6, [pc, #304]	@ (80016c0 <check_SIM_ready+0x290>)
		osDelay(300);
		first_pointer = strstr((char*)response, CHECK_RESPONSE);
 8001590:	4c38      	ldr	r4, [pc, #224]	@ (8001674 <check_SIM_ready+0x244>)
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8001592:	f009 fbc3 	bl	800ad1c <memset>
	SIM_UART_ReInitializeRxDMA();
 8001596:	f7ff fd4d 	bl	8001034 <SIM_UART_ReInitializeRxDMA>
	send_AT_command(CONFIGURE_PS_SERVICE);
 800159a:	484a      	ldr	r0, [pc, #296]	@ (80016c4 <check_SIM_ready+0x294>)
 800159c:	f7ff fd3a 	bl	8001014 <send_AT_command>
	receive_response("Configuring Network Registration Status (PS Service)");
 80015a0:	4849      	ldr	r0, [pc, #292]	@ (80016c8 <check_SIM_ready+0x298>)
 80015a2:	f7ff fd63 	bl	800106c <receive_response>
		send_AT_command("AT+CGREG?\r\n");
 80015a6:	4628      	mov	r0, r5
 80015a8:	f7ff fd34 	bl	8001014 <send_AT_command>
		osDelay(150);
 80015ac:	2096      	movs	r0, #150	@ 0x96
 80015ae:	f006 f877 	bl	80076a0 <osDelay>
		receive_response("Check Network Registration Status (PS Service)\n");
 80015b2:	4630      	mov	r0, r6
 80015b4:	f7ff fd5a 	bl	800106c <receive_response>
		osDelay(300);
 80015b8:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80015bc:	f006 f870 	bl	80076a0 <osDelay>
		first_pointer = strstr((char*)response, CHECK_RESPONSE);
 80015c0:	482d      	ldr	r0, [pc, #180]	@ (8001678 <check_SIM_ready+0x248>)
 80015c2:	4621      	mov	r1, r4
 80015c4:	f009 fbfa 	bl	800adbc <strstr>
		if(first_pointer != NULL){
 80015c8:	2800      	cmp	r0, #0
 80015ca:	d0ec      	beq.n	80015a6 <check_SIM_ready+0x176>
			second_pointer = strstr(first_pointer+1, CHECK_RESPONSE);
 80015cc:	4621      	mov	r1, r4
 80015ce:	3001      	adds	r0, #1
 80015d0:	f009 fbf4 	bl	800adbc <strstr>
	while (first_pointer == NULL || second_pointer == NULL){
 80015d4:	2800      	cmp	r0, #0
 80015d6:	d0e6      	beq.n	80015a6 <check_SIM_ready+0x176>
			memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
			SIM_UART_ReInitializeRxDMA();
			return 0;
		}
	}
	osDelay(100);
 80015d8:	2064      	movs	r0, #100	@ 0x64
 80015da:	f006 f861 	bl	80076a0 <osDelay>
	receive_response("Check Network Registration Status (PS Service)\n");
 80015de:	4838      	ldr	r0, [pc, #224]	@ (80016c0 <check_SIM_ready+0x290>)
	count_check_sim = 0;


	//CHECK SIGNAL QUALITY
	send_AT_command(CHECK_SIGNAL_QUALITY);
	while(strstr((char *) response, CHECK_RESPONSE) == NULL){
 80015e0:	4d24      	ldr	r5, [pc, #144]	@ (8001674 <check_SIM_ready+0x244>)
 80015e2:	4c25      	ldr	r4, [pc, #148]	@ (8001678 <check_SIM_ready+0x248>)
		receive_response("Check Signal Quality Report\n");
 80015e4:	4e39      	ldr	r6, [pc, #228]	@ (80016cc <check_SIM_ready+0x29c>)
	receive_response("Check Network Registration Status (PS Service)\n");
 80015e6:	f7ff fd41 	bl	800106c <receive_response>
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 80015ea:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 80015ee:	2100      	movs	r1, #0
 80015f0:	4821      	ldr	r0, [pc, #132]	@ (8001678 <check_SIM_ready+0x248>)
 80015f2:	f009 fb93 	bl	800ad1c <memset>
	SIM_UART_ReInitializeRxDMA();
 80015f6:	f7ff fd1d 	bl	8001034 <SIM_UART_ReInitializeRxDMA>
	send_AT_command(CHECK_SIGNAL_QUALITY);
 80015fa:	4835      	ldr	r0, [pc, #212]	@ (80016d0 <check_SIM_ready+0x2a0>)
 80015fc:	f7ff fd0a 	bl	8001014 <send_AT_command>
	while(strstr((char *) response, CHECK_RESPONSE) == NULL){
 8001600:	4629      	mov	r1, r5
 8001602:	4620      	mov	r0, r4
 8001604:	f009 fbda 	bl	800adbc <strstr>
 8001608:	b370      	cbz	r0, 8001668 <check_SIM_ready+0x238>
	}
	receive_response("Check Signal Quality Report\n");
 800160a:	4830      	ldr	r0, [pc, #192]	@ (80016cc <check_SIM_ready+0x29c>)
 800160c:	f7ff fd2e 	bl	800106c <receive_response>
	osDelay(100);
 8001610:	2064      	movs	r0, #100	@ 0x64
 8001612:	f006 f845 	bl	80076a0 <osDelay>
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8001616:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 800161a:	2100      	movs	r1, #0
 800161c:	4816      	ldr	r0, [pc, #88]	@ (8001678 <check_SIM_ready+0x248>)
 800161e:	f009 fb7d 	bl	800ad1c <memset>
	SIM_UART_ReInitializeRxDMA();
 8001622:	f7ff fd07 	bl	8001034 <SIM_UART_ReInitializeRxDMA>
	

	return 1;
 8001626:	2001      	movs	r0, #1
 8001628:	e016      	b.n	8001658 <check_SIM_ready+0x228>
		receive_response("Check IMEI-0:\n");
 800162a:	4630      	mov	r0, r6
 800162c:	f7ff fd1e 	bl	800106c <receive_response>
 8001630:	e705      	b.n	800143e <check_SIM_ready+0xe>
		receive_response("Check MODEL IDENTIFICATION\n");
 8001632:	4630      	mov	r0, r6
 8001634:	f7ff fd1a 	bl	800106c <receive_response>
 8001638:	e72c      	b.n	8001494 <check_SIM_ready+0x64>
		receive_response("Check SIM\n");
 800163a:	4638      	mov	r0, r7
 800163c:	f7ff fd16 	bl	800106c <receive_response>
		if (count_check_sim >= 5){
 8001640:	3c01      	subs	r4, #1
 8001642:	f47f af46 	bne.w	80014d2 <check_SIM_ready+0xa2>
			memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8001646:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 800164a:	2100      	movs	r1, #0
 800164c:	480a      	ldr	r0, [pc, #40]	@ (8001678 <check_SIM_ready+0x248>)
 800164e:	f009 fb65 	bl	800ad1c <memset>
			SIM_UART_ReInitializeRxDMA();
 8001652:	f7ff fcef 	bl	8001034 <SIM_UART_ReInitializeRxDMA>
			return 0;
 8001656:	2000      	movs	r0, #0
}
 8001658:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		receive_response("Check SIM CCID\n");
 800165a:	4638      	mov	r0, r7
 800165c:	f7ff fd06 	bl	800106c <receive_response>
		if (count_check_sim >= TIME_LIMIT){
 8001660:	3c01      	subs	r4, #1
 8001662:	f47f af55 	bne.w	8001510 <check_SIM_ready+0xe0>
 8001666:	e7ee      	b.n	8001646 <check_SIM_ready+0x216>
		receive_response("Check Signal Quality Report\n");
 8001668:	4630      	mov	r0, r6
 800166a:	f7ff fcff 	bl	800106c <receive_response>
 800166e:	e7c7      	b.n	8001600 <check_SIM_ready+0x1d0>
 8001670:	0800ee3c 	.word	0x0800ee3c
 8001674:	0800edae 	.word	0x0800edae
 8001678:	20000c80 	.word	0x20000c80
 800167c:	0800ee48 	.word	0x0800ee48
 8001680:	0800ee7a 	.word	0x0800ee7a
 8001684:	20000bdc 	.word	0x20000bdc
 8001688:	0800ee57 	.word	0x0800ee57
 800168c:	20001250 	.word	0x20001250
 8001690:	0800fa3e 	.word	0x0800fa3e
 8001694:	0800ee70 	.word	0x0800ee70
 8001698:	0800eea1 	.word	0x0800eea1
 800169c:	0800ee96 	.word	0x0800ee96
 80016a0:	0800eec7 	.word	0x0800eec7
 80016a4:	0800eeb7 	.word	0x0800eeb7
 80016a8:	0800eeac 	.word	0x0800eeac
 80016ac:	0800ef10 	.word	0x0800ef10
 80016b0:	0800ef1b 	.word	0x0800ef1b
 80016b4:	0800eecf 	.word	0x0800eecf
 80016b8:	0800eedb 	.word	0x0800eedb
 80016bc:	0800ef8d 	.word	0x0800ef8d
 80016c0:	0800ef99 	.word	0x0800ef99
 80016c4:	0800ef4b 	.word	0x0800ef4b
 80016c8:	0800ef58 	.word	0x0800ef58
 80016cc:	0800efd2 	.word	0x0800efd2
 80016d0:	0800efc9 	.word	0x0800efc9

080016d4 <check_configure_APN>:

void check_configure_APN(){
 80016d4:	b508      	push	{r3, lr}
	send_AT_command(CHECK_CONFIGURE_APN);
 80016d6:	4805      	ldr	r0, [pc, #20]	@ (80016ec <check_configure_APN+0x18>)
 80016d8:	f7ff fc9c 	bl	8001014 <send_AT_command>
	osDelay(150);
 80016dc:	2096      	movs	r0, #150	@ 0x96
 80016de:	f005 ffdf 	bl	80076a0 <osDelay>
	receive_response("Check Configuring APN\n");
}
 80016e2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	receive_response("Check Configuring APN\n");
 80016e6:	4802      	ldr	r0, [pc, #8]	@ (80016f0 <check_configure_APN+0x1c>)
 80016e8:	f7ff bcc0 	b.w	800106c <receive_response>
 80016ec:	0800efef 	.word	0x0800efef
 80016f0:	0800effd 	.word	0x0800effd

080016f4 <configure_APN>:

int configure_APN(int context_id){
 80016f4:	b530      	push	{r4, r5, lr}
 80016f6:	b0c7      	sub	sp, #284	@ 0x11c
	uint8_t command[256];
	snprintf((char *)command, sizeof(command), "AT+QICSGP=%d,%d,\"%s\",\"%s\",\"%s\",%d,0\r\n", context_id, 1, APN_NAME, APN_USERNAME, APN_PASSWD, APN_AUTHEN);
 80016f8:	2200      	movs	r2, #0
 80016fa:	9204      	str	r2, [sp, #16]
 80016fc:	4a16      	ldr	r2, [pc, #88]	@ (8001758 <configure_APN+0x64>)
	char *first_pointer = NULL;
	char *second_pointer = NULL; 	
	while (first_pointer == NULL || second_pointer == NULL){
		check_configure_APN();
		osDelay(300);
		first_pointer = strstr((char*)response, CHECK_RESPONSE);
 80016fe:	4c17      	ldr	r4, [pc, #92]	@ (800175c <configure_APN+0x68>)
 8001700:	4d17      	ldr	r5, [pc, #92]	@ (8001760 <configure_APN+0x6c>)
	snprintf((char *)command, sizeof(command), "AT+QICSGP=%d,%d,\"%s\",\"%s\",\"%s\",%d,0\r\n", context_id, 1, APN_NAME, APN_USERNAME, APN_PASSWD, APN_AUTHEN);
 8001702:	e9cd 2202 	strd	r2, r2, [sp, #8]
 8001706:	4a17      	ldr	r2, [pc, #92]	@ (8001764 <configure_APN+0x70>)
 8001708:	9201      	str	r2, [sp, #4]
 800170a:	2201      	movs	r2, #1
int configure_APN(int context_id){
 800170c:	4603      	mov	r3, r0
	snprintf((char *)command, sizeof(command), "AT+QICSGP=%d,%d,\"%s\",\"%s\",\"%s\",%d,0\r\n", context_id, 1, APN_NAME, APN_USERNAME, APN_PASSWD, APN_AUTHEN);
 800170e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001712:	9200      	str	r2, [sp, #0]
 8001714:	a806      	add	r0, sp, #24
 8001716:	4a14      	ldr	r2, [pc, #80]	@ (8001768 <configure_APN+0x74>)
 8001718:	f009 fa04 	bl	800ab24 <sniprintf>
	send_AT_command((char*)command);
 800171c:	a806      	add	r0, sp, #24
 800171e:	f7ff fc79 	bl	8001014 <send_AT_command>
	osDelay(150);
 8001722:	2096      	movs	r0, #150	@ 0x96
 8001724:	f005 ffbc 	bl	80076a0 <osDelay>
	receive_response("CONFIGURE APN\n");
 8001728:	4810      	ldr	r0, [pc, #64]	@ (800176c <configure_APN+0x78>)
 800172a:	f7ff fc9f 	bl	800106c <receive_response>
		check_configure_APN();
 800172e:	f7ff ffd1 	bl	80016d4 <check_configure_APN>
		osDelay(300);
 8001732:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001736:	f005 ffb3 	bl	80076a0 <osDelay>
		first_pointer = strstr((char*)response, CHECK_RESPONSE);
 800173a:	4908      	ldr	r1, [pc, #32]	@ (800175c <configure_APN+0x68>)
 800173c:	4628      	mov	r0, r5
 800173e:	f009 fb3d 	bl	800adbc <strstr>
		if(first_pointer != NULL){
 8001742:	2800      	cmp	r0, #0
 8001744:	d0f3      	beq.n	800172e <configure_APN+0x3a>
			second_pointer = strstr(first_pointer+1, CHECK_RESPONSE);
 8001746:	4621      	mov	r1, r4
 8001748:	3001      	adds	r0, #1
 800174a:	f009 fb37 	bl	800adbc <strstr>
	while (first_pointer == NULL || second_pointer == NULL){
 800174e:	2800      	cmp	r0, #0
 8001750:	d0ed      	beq.n	800172e <configure_APN+0x3a>
		}
	}
	return 1;
}
 8001752:	2001      	movs	r0, #1
 8001754:	b047      	add	sp, #284	@ 0x11c
 8001756:	bd30      	pop	{r4, r5, pc}
 8001758:	0800fa09 	.word	0x0800fa09
 800175c:	0800edae 	.word	0x0800edae
 8001760:	20000c80 	.word	0x20000c80
 8001764:	0800f03a 	.word	0x0800f03a
 8001768:	0800f014 	.word	0x0800f014
 800176c:	0800f044 	.word	0x0800f044

08001770 <check_activate_context>:

void check_activate_context(){
 8001770:	b500      	push	{lr}
 8001772:	b0a1      	sub	sp, #132	@ 0x84
	uint8_t command[128];
	snprintf((char *)command, sizeof(command), CHECK_ACTIVATE_CONTEXT);
 8001774:	4906      	ldr	r1, [pc, #24]	@ (8001790 <check_activate_context+0x20>)
 8001776:	4668      	mov	r0, sp
 8001778:	f00a f921 	bl	800b9be <strcpy>
	send_AT_command((char*)command);
 800177c:	4668      	mov	r0, sp
 800177e:	f7ff fc49 	bl	8001014 <send_AT_command>
	receive_response("CHECK Activate CONTEXT\n");
 8001782:	4804      	ldr	r0, [pc, #16]	@ (8001794 <check_activate_context+0x24>)
 8001784:	f7ff fc72 	bl	800106c <receive_response>
}
 8001788:	b021      	add	sp, #132	@ 0x84
 800178a:	f85d fb04 	ldr.w	pc, [sp], #4
 800178e:	bf00      	nop
 8001790:	0800f053 	.word	0x0800f053
 8001794:	0800f05f 	.word	0x0800f05f

08001798 <activate_context>:
		// Wait until the counter reaches 1000
		while (__HAL_TIM_GET_COUNTER(&htim3) < 1000);
	}
	is_40s = 1;
}
int activate_context(int context_id){
 8001798:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800179c:	b0a0      	sub	sp, #128	@ 0x80
 800179e:	4603      	mov	r3, r0
	uint8_t command[128];
	snprintf((char *)command, sizeof(command), "AT+QIACT=%d\r\n", context_id);
 80017a0:	4a31      	ldr	r2, [pc, #196]	@ (8001868 <activate_context+0xd0>)
	osDelay(150);
	receive_response("Activate Context\r\n");
	char *first_pointer = NULL;
	char *second_pointer = NULL;
	int count_check = 0;
	HAL_TIM_Base_Start(&htim3);
 80017a2:	4c32      	ldr	r4, [pc, #200]	@ (800186c <activate_context+0xd4>)
		osDelay(300);
		if(count_check >= 50){
			count_check = 0;
			return 0;
		}
		if (strstr((char*)response, "ERROR") != NULL){
 80017a4:	4f32      	ldr	r7, [pc, #200]	@ (8001870 <activate_context+0xd8>)
 80017a6:	4e33      	ldr	r6, [pc, #204]	@ (8001874 <activate_context+0xdc>)
			SIM_UART_ReInitializeRxDMA();
			count_error = 0;
			return 0;
		}

		receive_response("Check Activate Context\r\n");
 80017a8:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8001880 <activate_context+0xe8>
	snprintf((char *)command, sizeof(command), "AT+QIACT=%d\r\n", context_id);
 80017ac:	2180      	movs	r1, #128	@ 0x80
 80017ae:	4668      	mov	r0, sp
 80017b0:	f009 f9b8 	bl	800ab24 <sniprintf>
	send_AT_command((char*)command);
 80017b4:	4668      	mov	r0, sp
 80017b6:	f7ff fc2d 	bl	8001014 <send_AT_command>
	osDelay(150);
 80017ba:	2096      	movs	r0, #150	@ 0x96
 80017bc:	f005 ff70 	bl	80076a0 <osDelay>
	receive_response("Activate Context\r\n");
 80017c0:	482d      	ldr	r0, [pc, #180]	@ (8001878 <activate_context+0xe0>)
 80017c2:	f7ff fc53 	bl	800106c <receive_response>
	HAL_TIM_Base_Start(&htim3);
 80017c6:	4620      	mov	r0, r4
 80017c8:	f005 f8dc 	bl	8006984 <HAL_TIM_Base_Start>
	__HAL_TIM_SET_COUNTER(&htim3, 0);
 80017cc:	6823      	ldr	r3, [r4, #0]
 80017ce:	2400      	movs	r4, #0
 80017d0:	625c      	str	r4, [r3, #36]	@ 0x24
 80017d2:	2533      	movs	r5, #51	@ 0x33
		check_activate_context();
 80017d4:	f7ff ffcc 	bl	8001770 <check_activate_context>
		osDelay(300);
 80017d8:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80017dc:	f005 ff60 	bl	80076a0 <osDelay>
		if(count_check >= 50){
 80017e0:	3d01      	subs	r5, #1
 80017e2:	d021      	beq.n	8001828 <activate_context+0x90>
		if (strstr((char*)response, "ERROR") != NULL){
 80017e4:	4639      	mov	r1, r7
 80017e6:	4630      	mov	r0, r6
 80017e8:	f009 fae8 	bl	800adbc <strstr>
 80017ec:	b300      	cbz	r0, 8001830 <activate_context+0x98>
			osDelay(500);
 80017ee:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80017f2:	f005 ff55 	bl	80076a0 <osDelay>
			memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 80017f6:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 80017fa:	2100      	movs	r1, #0
 80017fc:	4630      	mov	r0, r6
 80017fe:	f009 fa8d 	bl	800ad1c <memset>
			SIM_UART_ReInitializeRxDMA();
 8001802:	f7ff fc17 	bl	8001034 <SIM_UART_ReInitializeRxDMA>
			send_AT_command((char *) command);
 8001806:	4668      	mov	r0, sp
 8001808:	f7ff fc04 	bl	8001014 <send_AT_command>
			count_error++;
 800180c:	3401      	adds	r4, #1
			osDelay(200);
 800180e:	20c8      	movs	r0, #200	@ 0xc8
 8001810:	f005 ff46 	bl	80076a0 <osDelay>
		if(count_error >=3){
 8001814:	2c03      	cmp	r4, #3
 8001816:	d10b      	bne.n	8001830 <activate_context+0x98>
			memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8001818:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 800181c:	2100      	movs	r1, #0
 800181e:	4815      	ldr	r0, [pc, #84]	@ (8001874 <activate_context+0xdc>)
 8001820:	f009 fa7c 	bl	800ad1c <memset>
			SIM_UART_ReInitializeRxDMA();
 8001824:	f7ff fc06 	bl	8001034 <SIM_UART_ReInitializeRxDMA>
			return 0;
 8001828:	2000      	movs	r0, #0
	}
	HAL_TIM_Base_Start(&htim3);
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
	SIM_UART_ReInitializeRxDMA();
	return 1;
}
 800182a:	b020      	add	sp, #128	@ 0x80
 800182c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		receive_response("Check Activate Context\r\n");
 8001830:	4640      	mov	r0, r8
 8001832:	f7ff fc1b 	bl	800106c <receive_response>
		first_pointer = strstr((char*)response, CHECK_RESPONSE);
 8001836:	4911      	ldr	r1, [pc, #68]	@ (800187c <activate_context+0xe4>)
 8001838:	4630      	mov	r0, r6
 800183a:	f009 fabf 	bl	800adbc <strstr>
		if(first_pointer != NULL){
 800183e:	2800      	cmp	r0, #0
 8001840:	d0c8      	beq.n	80017d4 <activate_context+0x3c>
			second_pointer = strstr(first_pointer+1, CHECK_RESPONSE);
 8001842:	490e      	ldr	r1, [pc, #56]	@ (800187c <activate_context+0xe4>)
 8001844:	3001      	adds	r0, #1
 8001846:	f009 fab9 	bl	800adbc <strstr>
	while ((first_pointer == NULL || second_pointer == NULL)){
 800184a:	2800      	cmp	r0, #0
 800184c:	d0c2      	beq.n	80017d4 <activate_context+0x3c>
	HAL_TIM_Base_Start(&htim3);
 800184e:	4807      	ldr	r0, [pc, #28]	@ (800186c <activate_context+0xd4>)
 8001850:	f005 f898 	bl	8006984 <HAL_TIM_Base_Start>
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8001854:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8001858:	2100      	movs	r1, #0
 800185a:	4806      	ldr	r0, [pc, #24]	@ (8001874 <activate_context+0xdc>)
 800185c:	f009 fa5e 	bl	800ad1c <memset>
	SIM_UART_ReInitializeRxDMA();
 8001860:	f7ff fbe8 	bl	8001034 <SIM_UART_ReInitializeRxDMA>
	return 1;
 8001864:	2001      	movs	r0, #1
 8001866:	e7e0      	b.n	800182a <activate_context+0x92>
 8001868:	0800f077 	.word	0x0800f077
 800186c:	200012d8 	.word	0x200012d8
 8001870:	0800f085 	.word	0x0800f085
 8001874:	20000c80 	.word	0x20000c80
 8001878:	0800f091 	.word	0x0800f091
 800187c:	0800edae 	.word	0x0800edae
 8001880:	0800f08b 	.word	0x0800f08b

08001884 <deactivate_context>:

int deactivate_context(int context_id){
 8001884:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001886:	4604      	mov	r4, r0
 8001888:	b0a1      	sub	sp, #132	@ 0x84
	uint8_t command[128];
	int count_check = 0;
	osDelay(100);
 800188a:	2064      	movs	r0, #100	@ 0x64
 800188c:	f005 ff08 	bl	80076a0 <osDelay>
	snprintf((char *)command, sizeof(command), "AT+QIDEACT=%d\r\n", context_id);
 8001890:	4623      	mov	r3, r4
 8001892:	4a1d      	ldr	r2, [pc, #116]	@ (8001908 <deactivate_context+0x84>)
	send_AT_command((char*)command);
	while(strstr((char *) response, CHECK_RESPONSE) == NULL){
 8001894:	4e1d      	ldr	r6, [pc, #116]	@ (800190c <deactivate_context+0x88>)
 8001896:	4d1e      	ldr	r5, [pc, #120]	@ (8001910 <deactivate_context+0x8c>)
		receive_response("DEACTIVATE CONTEXT\n");
 8001898:	4f1e      	ldr	r7, [pc, #120]	@ (8001914 <deactivate_context+0x90>)
	snprintf((char *)command, sizeof(command), "AT+QIDEACT=%d\r\n", context_id);
 800189a:	2180      	movs	r1, #128	@ 0x80
 800189c:	4668      	mov	r0, sp
 800189e:	f009 f941 	bl	800ab24 <sniprintf>
	send_AT_command((char*)command);
 80018a2:	4668      	mov	r0, sp
 80018a4:	f7ff fbb6 	bl	8001014 <send_AT_command>
	while(strstr((char *) response, CHECK_RESPONSE) == NULL){
 80018a8:	2415      	movs	r4, #21
 80018aa:	4631      	mov	r1, r6
 80018ac:	4628      	mov	r0, r5
 80018ae:	f009 fa85 	bl	800adbc <strstr>
 80018b2:	b178      	cbz	r0, 80018d4 <deactivate_context+0x50>
			return 0;
		}
		count_check++;
		osDelay(200);
	}
	receive_response("DEACTIVATE CONTEXT\n");
 80018b4:	4817      	ldr	r0, [pc, #92]	@ (8001914 <deactivate_context+0x90>)
 80018b6:	f7ff fbd9 	bl	800106c <receive_response>
	osDelay(100);
 80018ba:	2064      	movs	r0, #100	@ 0x64
 80018bc:	f005 fef0 	bl	80076a0 <osDelay>
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 80018c0:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 80018c4:	2100      	movs	r1, #0
 80018c6:	4812      	ldr	r0, [pc, #72]	@ (8001910 <deactivate_context+0x8c>)
 80018c8:	f009 fa28 	bl	800ad1c <memset>
	SIM_UART_ReInitializeRxDMA();
 80018cc:	f7ff fbb2 	bl	8001034 <SIM_UART_ReInitializeRxDMA>
	return 1;
 80018d0:	2001      	movs	r0, #1
 80018d2:	e010      	b.n	80018f6 <deactivate_context+0x72>
		receive_response("DEACTIVATE CONTEXT\n");
 80018d4:	4638      	mov	r0, r7
 80018d6:	f7ff fbc9 	bl	800106c <receive_response>
		if (strstr((char *) response, "ERROR") != NULL){
 80018da:	490f      	ldr	r1, [pc, #60]	@ (8001918 <deactivate_context+0x94>)
 80018dc:	4628      	mov	r0, r5
 80018de:	f009 fa6d 	bl	800adbc <strstr>
 80018e2:	b150      	cbz	r0, 80018fa <deactivate_context+0x76>
			memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 80018e4:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 80018e8:	2100      	movs	r1, #0
 80018ea:	4809      	ldr	r0, [pc, #36]	@ (8001910 <deactivate_context+0x8c>)
 80018ec:	f009 fa16 	bl	800ad1c <memset>
			SIM_UART_ReInitializeRxDMA();
 80018f0:	f7ff fba0 	bl	8001034 <SIM_UART_ReInitializeRxDMA>
			return 0;
 80018f4:	2000      	movs	r0, #0
}
 80018f6:	b021      	add	sp, #132	@ 0x84
 80018f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if(count_check >= 20){
 80018fa:	3c01      	subs	r4, #1
 80018fc:	d0f2      	beq.n	80018e4 <deactivate_context+0x60>
		osDelay(200);
 80018fe:	20c8      	movs	r0, #200	@ 0xc8
 8001900:	f005 fece 	bl	80076a0 <osDelay>
 8001904:	e7d1      	b.n	80018aa <deactivate_context+0x26>
 8001906:	bf00      	nop
 8001908:	0800f0a4 	.word	0x0800f0a4
 800190c:	0800edae 	.word	0x0800edae
 8001910:	20000c80 	.word	0x20000c80
 8001914:	0800f0b4 	.word	0x0800f0b4
 8001918:	0800f085 	.word	0x0800f085

0800191c <open_socket_service>:


int open_socket_service(int context_id, int connect_id, int local_port, int access_mode){
 800191c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001920:	b0e6      	sub	sp, #408	@ 0x198
	const int timeout_seconds = 50; // Receive response each second
	//TODO: CHANGE timeout to 150 after testing
	int elapsed_time_ms = 0;
	uint8_t command[256];
	snprintf((char *)command, sizeof(command), "AT+QIOPEN=%d,%d,\"%s\",\"%s\",%d,%d,%d\r\n",context_id, connect_id, SERVICE_TYPE, IP_ADDRESS, REMOTE_PORT, local_port, access_mode);
 8001922:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001926:	f241 3397 	movw	r3, #5015	@ 0x1397
 800192a:	9303      	str	r3, [sp, #12]
 800192c:	4b4a      	ldr	r3, [pc, #296]	@ (8001a58 <open_socket_service+0x13c>)
 800192e:	9302      	str	r3, [sp, #8]
 8001930:	4b4a      	ldr	r3, [pc, #296]	@ (8001a5c <open_socket_service+0x140>)
 8001932:	4a4b      	ldr	r2, [pc, #300]	@ (8001a60 <open_socket_service+0x144>)
	//time_t start = time(NULL);
	int count_error = 0;
	uart_transmit_string(&huart1, (uint8_t *) "Init start TIME\n");
	while(first_pointer == NULL && elapsed_time_ms < timeout_seconds){
		char output_elapsed[128];
		receive_response("Check OPEN socket service: \r\n");
 8001934:	f8df 9140 	ldr.w	r9, [pc, #320]	@ 8001a78 <open_socket_service+0x15c>
		if (strstr((char *) response, "ERROR") != NULL){
 8001938:	f8df a14c 	ldr.w	sl, [pc, #332]	@ 8001a88 <open_socket_service+0x16c>
 800193c:	f8df 812c 	ldr.w	r8, [pc, #300]	@ 8001a6c <open_socket_service+0x150>
	snprintf((char *)command, sizeof(command), "AT+QIOPEN=%d,%d,\"%s\",\"%s\",%d,%d,%d\r\n",context_id, connect_id, SERVICE_TYPE, IP_ADDRESS, REMOTE_PORT, local_port, access_mode);
 8001940:	e9cd 1300 	strd	r1, r3, [sp]
int open_socket_service(int context_id, int connect_id, int local_port, int access_mode){
 8001944:	460c      	mov	r4, r1
	snprintf((char *)command, sizeof(command), "AT+QIOPEN=%d,%d,\"%s\",\"%s\",%d,%d,%d\r\n",context_id, connect_id, SERVICE_TYPE, IP_ADDRESS, REMOTE_PORT, local_port, access_mode);
 8001946:	4603      	mov	r3, r0
 8001948:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800194c:	a826      	add	r0, sp, #152	@ 0x98
 800194e:	f009 f8e9 	bl	800ab24 <sniprintf>
	send_AT_command((char *) command);
 8001952:	a826      	add	r0, sp, #152	@ 0x98
 8001954:	f7ff fb5e 	bl	8001014 <send_AT_command>
	osDelay(100);
 8001958:	2064      	movs	r0, #100	@ 0x64
 800195a:	f005 fea1 	bl	80076a0 <osDelay>
	uart_transmit_string(&huart1, (uint8_t *) "Init start TIME\n");
 800195e:	4941      	ldr	r1, [pc, #260]	@ (8001a64 <open_socket_service+0x148>)
 8001960:	4841      	ldr	r0, [pc, #260]	@ (8001a68 <open_socket_service+0x14c>)
 8001962:	f002 fe07 	bl	8004574 <uart_transmit_string>
	int count_error = 0;
 8001966:	2700      	movs	r7, #0
	int elapsed_time_ms = 0;
 8001968:	463e      	mov	r6, r7
		receive_response("Check OPEN socket service: \r\n");
 800196a:	4648      	mov	r0, r9
 800196c:	f7ff fb7e 	bl	800106c <receive_response>
		if (strstr((char *) response, "ERROR") != NULL){
 8001970:	4651      	mov	r1, sl
 8001972:	4640      	mov	r0, r8
 8001974:	f009 fa22 	bl	800adbc <strstr>
 8001978:	b1e8      	cbz	r0, 80019b6 <open_socket_service+0x9a>
			memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 800197a:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 800197e:	2100      	movs	r1, #0
 8001980:	4640      	mov	r0, r8
 8001982:	f009 f9cb 	bl	800ad1c <memset>
			SIM_UART_ReInitializeRxDMA();
 8001986:	f7ff fb55 	bl	8001034 <SIM_UART_ReInitializeRxDMA>
			count_error++;
			osDelay(500);
 800198a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800198e:	f005 fe87 	bl	80076a0 <osDelay>
			count_error++;
 8001992:	3701      	adds	r7, #1
			send_AT_command((char *) command);
 8001994:	a826      	add	r0, sp, #152	@ 0x98
 8001996:	f7ff fb3d 	bl	8001014 <send_AT_command>
		}
		if(count_error >= 6){
 800199a:	2f06      	cmp	r7, #6
 800199c:	d10b      	bne.n	80019b6 <open_socket_service+0x9a>
			memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 800199e:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 80019a2:	2100      	movs	r1, #0
		snprintf((char *)command, sizeof(command), "AT+QISTATE=1,%d\r\n",connect_id);
		send_AT_command((char*) command);
		while(strstr((char *) response, CHECK_RESPONSE) == NULL){
			receive_response("Check SOCKET CONNECTION\n");
			if (strstr((char *) response, "ERROR") != NULL){
				memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 80019a4:	4831      	ldr	r0, [pc, #196]	@ (8001a6c <open_socket_service+0x150>)
 80019a6:	f009 f9b9 	bl	800ad1c <memset>
				SIM_UART_ReInitializeRxDMA();
 80019aa:	f7ff fb43 	bl	8001034 <SIM_UART_ReInitializeRxDMA>
			return 0;
 80019ae:	2000      	movs	r0, #0
		memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
		SIM_UART_ReInitializeRxDMA();
		return 1;
	}
	else return 0;
}
 80019b0:	b066      	add	sp, #408	@ 0x198
 80019b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		first_pointer = strstr((char*)response, "+QIOPEN:");
 80019b6:	492e      	ldr	r1, [pc, #184]	@ (8001a70 <open_socket_service+0x154>)
 80019b8:	4640      	mov	r0, r8
 80019ba:	f009 f9ff 	bl	800adbc <strstr>
		elapsed_time_ms++;
 80019be:	3601      	adds	r6, #1
		snprintf(output_elapsed, 128, "Elapsed Time: %d\n", elapsed_time_ms);
 80019c0:	4a2c      	ldr	r2, [pc, #176]	@ (8001a74 <open_socket_service+0x158>)
		first_pointer = strstr((char*)response, "+QIOPEN:");
 80019c2:	4605      	mov	r5, r0
		snprintf(output_elapsed, 128, "Elapsed Time: %d\n", elapsed_time_ms);
 80019c4:	4633      	mov	r3, r6
 80019c6:	2180      	movs	r1, #128	@ 0x80
 80019c8:	a806      	add	r0, sp, #24
 80019ca:	f009 f8ab 	bl	800ab24 <sniprintf>
		uart_transmit_string(&huart1, (uint8_t *)output_elapsed);
 80019ce:	4826      	ldr	r0, [pc, #152]	@ (8001a68 <open_socket_service+0x14c>)
 80019d0:	a906      	add	r1, sp, #24
 80019d2:	f002 fdcf 	bl	8004574 <uart_transmit_string>
		osDelay(300);
 80019d6:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80019da:	f005 fe61 	bl	80076a0 <osDelay>
	while(first_pointer == NULL && elapsed_time_ms < timeout_seconds){
 80019de:	b90d      	cbnz	r5, 80019e4 <open_socket_service+0xc8>
 80019e0:	2e32      	cmp	r6, #50	@ 0x32
 80019e2:	d1c2      	bne.n	800196a <open_socket_service+0x4e>
	receive_response("Check OPEN socket service: \r\n");
 80019e4:	4824      	ldr	r0, [pc, #144]	@ (8001a78 <open_socket_service+0x15c>)
 80019e6:	f7ff fb41 	bl	800106c <receive_response>
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 80019ea:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 80019ee:	2100      	movs	r1, #0
 80019f0:	481e      	ldr	r0, [pc, #120]	@ (8001a6c <open_socket_service+0x150>)
 80019f2:	f009 f993 	bl	800ad1c <memset>
	SIM_UART_ReInitializeRxDMA();
 80019f6:	f7ff fb1d 	bl	8001034 <SIM_UART_ReInitializeRxDMA>
	if(first_pointer != NULL)
 80019fa:	2d00      	cmp	r5, #0
 80019fc:	d0d7      	beq.n	80019ae <open_socket_service+0x92>
		snprintf((char *)command, sizeof(command), "AT+QISTATE=1,%d\r\n",connect_id);
 80019fe:	4a1f      	ldr	r2, [pc, #124]	@ (8001a7c <open_socket_service+0x160>)
		while(strstr((char *) response, CHECK_RESPONSE) == NULL){
 8001a00:	4e1f      	ldr	r6, [pc, #124]	@ (8001a80 <open_socket_service+0x164>)
 8001a02:	4d1a      	ldr	r5, [pc, #104]	@ (8001a6c <open_socket_service+0x150>)
			receive_response("Check SOCKET CONNECTION\n");
 8001a04:	4f1f      	ldr	r7, [pc, #124]	@ (8001a84 <open_socket_service+0x168>)
		snprintf((char *)command, sizeof(command), "AT+QISTATE=1,%d\r\n",connect_id);
 8001a06:	4623      	mov	r3, r4
 8001a08:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001a0c:	a826      	add	r0, sp, #152	@ 0x98
 8001a0e:	f009 f889 	bl	800ab24 <sniprintf>
		send_AT_command((char*) command);
 8001a12:	a826      	add	r0, sp, #152	@ 0x98
 8001a14:	f7ff fafe 	bl	8001014 <send_AT_command>
		while(strstr((char *) response, CHECK_RESPONSE) == NULL){
 8001a18:	4631      	mov	r1, r6
 8001a1a:	4628      	mov	r0, r5
 8001a1c:	f009 f9ce 	bl	800adbc <strstr>
 8001a20:	4604      	mov	r4, r0
 8001a22:	b160      	cbz	r0, 8001a3e <open_socket_service+0x122>
		osDelay(100);
 8001a24:	2064      	movs	r0, #100	@ 0x64
 8001a26:	f005 fe3b 	bl	80076a0 <osDelay>
		memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8001a2a:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8001a2e:	2100      	movs	r1, #0
 8001a30:	480e      	ldr	r0, [pc, #56]	@ (8001a6c <open_socket_service+0x150>)
 8001a32:	f009 f973 	bl	800ad1c <memset>
		SIM_UART_ReInitializeRxDMA();
 8001a36:	f7ff fafd 	bl	8001034 <SIM_UART_ReInitializeRxDMA>
		return 1;
 8001a3a:	2001      	movs	r0, #1
 8001a3c:	e7b8      	b.n	80019b0 <open_socket_service+0x94>
			receive_response("Check SOCKET CONNECTION\n");
 8001a3e:	4638      	mov	r0, r7
 8001a40:	f7ff fb14 	bl	800106c <receive_response>
			if (strstr((char *) response, "ERROR") != NULL){
 8001a44:	4910      	ldr	r1, [pc, #64]	@ (8001a88 <open_socket_service+0x16c>)
 8001a46:	4628      	mov	r0, r5
 8001a48:	f009 f9b8 	bl	800adbc <strstr>
 8001a4c:	2800      	cmp	r0, #0
 8001a4e:	d0e3      	beq.n	8001a18 <open_socket_service+0xfc>
				memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8001a50:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8001a54:	4621      	mov	r1, r4
 8001a56:	e7a5      	b.n	80019a4 <open_socket_service+0x88>
 8001a58:	0800f0ed 	.word	0x0800f0ed
 8001a5c:	0800f0fc 	.word	0x0800f0fc
 8001a60:	0800f0c8 	.word	0x0800f0c8
 8001a64:	0800f100 	.word	0x0800f100
 8001a68:	20001250 	.word	0x20001250
 8001a6c:	20000c80 	.word	0x20000c80
 8001a70:	0800f12f 	.word	0x0800f12f
 8001a74:	0800f138 	.word	0x0800f138
 8001a78:	0800f111 	.word	0x0800f111
 8001a7c:	0800f14a 	.word	0x0800f14a
 8001a80:	0800edae 	.word	0x0800edae
 8001a84:	0800f15c 	.word	0x0800f15c
 8001a88:	0800f085 	.word	0x0800f085

08001a8c <check_socket_connection>:

//QPING command
void check_socket_connection(int context_ID){
 8001a8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001a90:	b0c3      	sub	sp, #268	@ 0x10c
	uint8_t command[256];
	snprintf((char *)command, sizeof(command), "AT+QPING=%d,\"%s\"\r\n",context_ID, IP_ADDRESS);
 8001a92:	4a29      	ldr	r2, [pc, #164]	@ (8001b38 <check_socket_connection+0xac>)
 8001a94:	9200      	str	r2, [sp, #0]
void check_socket_connection(int context_ID){
 8001a96:	4603      	mov	r3, r0
	snprintf((char *)command, sizeof(command), "AT+QPING=%d,\"%s\"\r\n",context_ID, IP_ADDRESS);
 8001a98:	4a28      	ldr	r2, [pc, #160]	@ (8001b3c <check_socket_connection+0xb0>)
	char *second_pointer = NULL;
	char *third_pointer = NULL;
	char *fourth_pointer = NULL;
	char *fifth_pointer = NULL;
	while(first_pointer == NULL || second_pointer == NULL || third_pointer == NULL || fourth_pointer == NULL || fifth_pointer == NULL){
		receive_response("Check SOCKET CONNECTION\n");
 8001a9a:	f8df a0a4 	ldr.w	sl, [pc, #164]	@ 8001b40 <check_socket_connection+0xb4>
		first_pointer = strstr((char*)response, "+QPING:");
 8001a9e:	f8df 80a8 	ldr.w	r8, [pc, #168]	@ 8001b48 <check_socket_connection+0xbc>
 8001aa2:	f8df b0a0 	ldr.w	fp, [pc, #160]	@ 8001b44 <check_socket_connection+0xb8>
	snprintf((char *)command, sizeof(command), "AT+QPING=%d,\"%s\"\r\n",context_ID, IP_ADDRESS);
 8001aa6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001aaa:	a802      	add	r0, sp, #8
 8001aac:	f009 f83a 	bl	800ab24 <sniprintf>
	send_AT_command((char*)command);
 8001ab0:	a802      	add	r0, sp, #8
 8001ab2:	f7ff faaf 	bl	8001014 <send_AT_command>
	char *fifth_pointer = NULL;
 8001ab6:	2400      	movs	r4, #0
	char *fourth_pointer = NULL;
 8001ab8:	4627      	mov	r7, r4
	char *third_pointer = NULL;
 8001aba:	4626      	mov	r6, r4
	char *second_pointer = NULL;
 8001abc:	4625      	mov	r5, r4
		receive_response("Check SOCKET CONNECTION\n");
 8001abe:	4650      	mov	r0, sl
 8001ac0:	f7ff fad4 	bl	800106c <receive_response>
		first_pointer = strstr((char*)response, "+QPING:");
 8001ac4:	4641      	mov	r1, r8
 8001ac6:	4658      	mov	r0, fp
 8001ac8:	f009 f978 	bl	800adbc <strstr>
		if(first_pointer != NULL){
 8001acc:	4681      	mov	r9, r0
 8001ace:	b120      	cbz	r0, 8001ada <check_socket_connection+0x4e>
			 second_pointer = strstr(first_pointer+1, "+QPING:");
 8001ad0:	4641      	mov	r1, r8
 8001ad2:	3001      	adds	r0, #1
 8001ad4:	f009 f972 	bl	800adbc <strstr>
 8001ad8:	4605      	mov	r5, r0
		}
		if(second_pointer != NULL){
 8001ada:	b125      	cbz	r5, 8001ae6 <check_socket_connection+0x5a>
			 third_pointer = strstr(second_pointer+1, "+QPING:");
 8001adc:	4641      	mov	r1, r8
 8001ade:	1c68      	adds	r0, r5, #1
 8001ae0:	f009 f96c 	bl	800adbc <strstr>
 8001ae4:	4606      	mov	r6, r0
		}
		if(third_pointer != NULL){
 8001ae6:	b126      	cbz	r6, 8001af2 <check_socket_connection+0x66>
			 fourth_pointer = strstr(third_pointer+1, "+QPING:");
 8001ae8:	4641      	mov	r1, r8
 8001aea:	1c70      	adds	r0, r6, #1
 8001aec:	f009 f966 	bl	800adbc <strstr>
 8001af0:	4607      	mov	r7, r0
		}
		if(fourth_pointer != NULL){
 8001af2:	b127      	cbz	r7, 8001afe <check_socket_connection+0x72>
			 fifth_pointer = strstr(fourth_pointer+1, "+QPING:");
 8001af4:	4641      	mov	r1, r8
 8001af6:	1c78      	adds	r0, r7, #1
 8001af8:	f009 f960 	bl	800adbc <strstr>
 8001afc:	4604      	mov	r4, r0
	while(first_pointer == NULL || second_pointer == NULL || third_pointer == NULL || fourth_pointer == NULL || fifth_pointer == NULL){
 8001afe:	f1b9 0f00 	cmp.w	r9, #0
 8001b02:	d0dc      	beq.n	8001abe <check_socket_connection+0x32>
 8001b04:	2d00      	cmp	r5, #0
 8001b06:	d0da      	beq.n	8001abe <check_socket_connection+0x32>
 8001b08:	2e00      	cmp	r6, #0
 8001b0a:	d0d8      	beq.n	8001abe <check_socket_connection+0x32>
 8001b0c:	2f00      	cmp	r7, #0
 8001b0e:	d0d6      	beq.n	8001abe <check_socket_connection+0x32>
 8001b10:	2c00      	cmp	r4, #0
 8001b12:	d0d4      	beq.n	8001abe <check_socket_connection+0x32>
		}
	}
	receive_response("Check SOCKET CONNECTION\n");
 8001b14:	480a      	ldr	r0, [pc, #40]	@ (8001b40 <check_socket_connection+0xb4>)
 8001b16:	f7ff faa9 	bl	800106c <receive_response>
	osDelay(100);
 8001b1a:	2064      	movs	r0, #100	@ 0x64
 8001b1c:	f005 fdc0 	bl	80076a0 <osDelay>
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8001b20:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8001b24:	2100      	movs	r1, #0
 8001b26:	4807      	ldr	r0, [pc, #28]	@ (8001b44 <check_socket_connection+0xb8>)
 8001b28:	f009 f8f8 	bl	800ad1c <memset>
	SIM_UART_ReInitializeRxDMA();
 8001b2c:	f7ff fa82 	bl	8001034 <SIM_UART_ReInitializeRxDMA>
}
 8001b30:	b043      	add	sp, #268	@ 0x10c
 8001b32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001b36:	bf00      	nop
 8001b38:	0800f0ed 	.word	0x0800f0ed
 8001b3c:	0800f175 	.word	0x0800f175
 8001b40:	0800f15c 	.word	0x0800f15c
 8001b44:	20000c80 	.word	0x20000c80
 8001b48:	0800f188 	.word	0x0800f188

08001b4c <formatToHexString>:

// Function to format data into a hex string
int formatToHexString( const uint8_t* data, int length, char* output, int max_len, int writeIndex) {
 8001b4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    for (int i = 0; i < length; i++) {
 8001b50:	9c08      	ldr	r4, [sp, #32]
        if (writeIndex + 2 >= max_len) {
            // Prevent buffer overflow
            return -1;
        }
        sprintf(output + writeIndex, "%02X", data[i]);
 8001b52:	f8df a034 	ldr.w	sl, [pc, #52]	@ 8001b88 <formatToHexString+0x3c>
int formatToHexString( const uint8_t* data, int length, char* output, int max_len, int writeIndex) {
 8001b56:	4607      	mov	r7, r0
 8001b58:	460e      	mov	r6, r1
 8001b5a:	4698      	mov	r8, r3
    for (int i = 0; i < length; i++) {
 8001b5c:	2500      	movs	r5, #0
        sprintf(output + writeIndex, "%02X", data[i]);
 8001b5e:	f1a2 0902 	sub.w	r9, r2, #2
    for (int i = 0; i < length; i++) {
 8001b62:	42b5      	cmp	r5, r6
 8001b64:	db02      	blt.n	8001b6c <formatToHexString+0x20>
        writeIndex += 2;
    }
    return writeIndex;
}
 8001b66:	4620      	mov	r0, r4
 8001b68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        if (writeIndex + 2 >= max_len) {
 8001b6c:	3402      	adds	r4, #2
 8001b6e:	4544      	cmp	r4, r8
 8001b70:	da07      	bge.n	8001b82 <formatToHexString+0x36>
        sprintf(output + writeIndex, "%02X", data[i]);
 8001b72:	5d7a      	ldrb	r2, [r7, r5]
 8001b74:	4651      	mov	r1, sl
 8001b76:	eb09 0004 	add.w	r0, r9, r4
 8001b7a:	f009 f807 	bl	800ab8c <siprintf>
    for (int i = 0; i < length; i++) {
 8001b7e:	3501      	adds	r5, #1
 8001b80:	e7ef      	b.n	8001b62 <formatToHexString+0x16>
            return -1;
 8001b82:	f04f 34ff 	mov.w	r4, #4294967295
 8001b86:	e7ee      	b.n	8001b66 <formatToHexString+0x1a>
 8001b88:	0800fccd 	.word	0x0800fccd

08001b8c <generateRegistrationMessage>:

int generateRegistrationMessage(const JT808_TerminalRegistration *data, char *hexString, int max_len) {
 8001b8c:	b573      	push	{r0, r1, r4, r5, r6, lr}
    int writeIndex = 0;
    writeIndex = formatToHexString(&(data->start_mask), sizeof(data->start_mask), hexString, max_len, writeIndex);
 8001b8e:	2300      	movs	r3, #0
int generateRegistrationMessage(const JT808_TerminalRegistration *data, char *hexString, int max_len) {
 8001b90:	460c      	mov	r4, r1
 8001b92:	4615      	mov	r5, r2
    writeIndex = formatToHexString(&(data->start_mask), sizeof(data->start_mask), hexString, max_len, writeIndex);
 8001b94:	9300      	str	r3, [sp, #0]
 8001b96:	4613      	mov	r3, r2
 8001b98:	460a      	mov	r2, r1
 8001b9a:	2101      	movs	r1, #1
int generateRegistrationMessage(const JT808_TerminalRegistration *data, char *hexString, int max_len) {
 8001b9c:	4606      	mov	r6, r0
    writeIndex = formatToHexString(&(data->start_mask), sizeof(data->start_mask), hexString, max_len, writeIndex);
 8001b9e:	f7ff ffd5 	bl	8001b4c <formatToHexString>
    writeIndex = formatToHexString(data->message_type, sizeof(data->message_type), hexString, max_len, writeIndex);
 8001ba2:	462b      	mov	r3, r5
 8001ba4:	9000      	str	r0, [sp, #0]
 8001ba6:	4622      	mov	r2, r4
 8001ba8:	2102      	movs	r1, #2
 8001baa:	1c70      	adds	r0, r6, #1
 8001bac:	f7ff ffce 	bl	8001b4c <formatToHexString>
    writeIndex = formatToHexString(data->message_length, sizeof(data->message_length), hexString, max_len, writeIndex);
 8001bb0:	462b      	mov	r3, r5
 8001bb2:	9000      	str	r0, [sp, #0]
 8001bb4:	4622      	mov	r2, r4
 8001bb6:	2102      	movs	r1, #2
 8001bb8:	1cf0      	adds	r0, r6, #3
 8001bba:	f7ff ffc7 	bl	8001b4c <formatToHexString>
    writeIndex = formatToHexString(data->terminal_phone_number, sizeof(data->terminal_phone_number), hexString, max_len, writeIndex);
 8001bbe:	462b      	mov	r3, r5
 8001bc0:	9000      	str	r0, [sp, #0]
 8001bc2:	4622      	mov	r2, r4
 8001bc4:	2106      	movs	r1, #6
 8001bc6:	1d70      	adds	r0, r6, #5
 8001bc8:	f7ff ffc0 	bl	8001b4c <formatToHexString>
    writeIndex = formatToHexString(data->message_serial_number, sizeof(data->message_serial_number), hexString, max_len, writeIndex);
 8001bcc:	462b      	mov	r3, r5
 8001bce:	9000      	str	r0, [sp, #0]
 8001bd0:	4622      	mov	r2, r4
 8001bd2:	2102      	movs	r1, #2
 8001bd4:	f106 000b 	add.w	r0, r6, #11
 8001bd8:	f7ff ffb8 	bl	8001b4c <formatToHexString>
    writeIndex = formatToHexString(data->province_ID, sizeof(data->province_ID), hexString, max_len, writeIndex);
 8001bdc:	462b      	mov	r3, r5
 8001bde:	9000      	str	r0, [sp, #0]
 8001be0:	4622      	mov	r2, r4
 8001be2:	2102      	movs	r1, #2
 8001be4:	f106 000d 	add.w	r0, r6, #13
 8001be8:	f7ff ffb0 	bl	8001b4c <formatToHexString>
    writeIndex = formatToHexString(data->city_ID, sizeof(data->city_ID), hexString, max_len, writeIndex);
 8001bec:	462b      	mov	r3, r5
 8001bee:	9000      	str	r0, [sp, #0]
 8001bf0:	4622      	mov	r2, r4
 8001bf2:	2102      	movs	r1, #2
 8001bf4:	f106 000f 	add.w	r0, r6, #15
 8001bf8:	f7ff ffa8 	bl	8001b4c <formatToHexString>
    writeIndex = formatToHexString(data->manufacturer_ID, sizeof(data->manufacturer_ID), hexString, max_len, writeIndex);
 8001bfc:	462b      	mov	r3, r5
 8001bfe:	9000      	str	r0, [sp, #0]
 8001c00:	4622      	mov	r2, r4
 8001c02:	2105      	movs	r1, #5
 8001c04:	f106 0011 	add.w	r0, r6, #17
 8001c08:	f7ff ffa0 	bl	8001b4c <formatToHexString>
    writeIndex = formatToHexString(data->terminal_type, sizeof(data->terminal_type), hexString, max_len, writeIndex);
 8001c0c:	462b      	mov	r3, r5
 8001c0e:	9000      	str	r0, [sp, #0]
 8001c10:	4622      	mov	r2, r4
 8001c12:	2108      	movs	r1, #8
 8001c14:	f106 0016 	add.w	r0, r6, #22
 8001c18:	f7ff ff98 	bl	8001b4c <formatToHexString>
    writeIndex = formatToHexString(data->terminal_ID, sizeof(data->terminal_ID), hexString, max_len, writeIndex);
 8001c1c:	462b      	mov	r3, r5
 8001c1e:	9000      	str	r0, [sp, #0]
 8001c20:	4622      	mov	r2, r4
 8001c22:	2107      	movs	r1, #7
 8001c24:	f106 001e 	add.w	r0, r6, #30
 8001c28:	f7ff ff90 	bl	8001b4c <formatToHexString>
    writeIndex = formatToHexString(&(data->plate_color), sizeof(data->plate_color), hexString, max_len, writeIndex);
 8001c2c:	462b      	mov	r3, r5
 8001c2e:	9000      	str	r0, [sp, #0]
 8001c30:	4622      	mov	r2, r4
 8001c32:	2101      	movs	r1, #1
 8001c34:	f106 0025 	add.w	r0, r6, #37	@ 0x25
 8001c38:	f7ff ff88 	bl	8001b4c <formatToHexString>
    writeIndex = formatToHexString(data->plate_no, sizeof(data->plate_no), hexString, max_len, writeIndex);
 8001c3c:	462b      	mov	r3, r5
 8001c3e:	9000      	str	r0, [sp, #0]
 8001c40:	4622      	mov	r2, r4
 8001c42:	2114      	movs	r1, #20
 8001c44:	f106 0026 	add.w	r0, r6, #38	@ 0x26
 8001c48:	f7ff ff80 	bl	8001b4c <formatToHexString>
    writeIndex = formatToHexString(&(data->check_sum), sizeof(data->check_sum), hexString, max_len, writeIndex);
 8001c4c:	462b      	mov	r3, r5
 8001c4e:	9000      	str	r0, [sp, #0]
 8001c50:	4622      	mov	r2, r4
 8001c52:	2101      	movs	r1, #1
 8001c54:	f106 003a 	add.w	r0, r6, #58	@ 0x3a
 8001c58:	f7ff ff78 	bl	8001b4c <formatToHexString>
    writeIndex = formatToHexString(&(data->end_mask), sizeof(data->end_mask), hexString, max_len, writeIndex);
 8001c5c:	462b      	mov	r3, r5
 8001c5e:	9000      	str	r0, [sp, #0]
 8001c60:	4622      	mov	r2, r4
 8001c62:	2101      	movs	r1, #1
 8001c64:	f106 003b 	add.w	r0, r6, #59	@ 0x3b
 8001c68:	f7ff ff70 	bl	8001b4c <formatToHexString>
    if (writeIndex < 0) {
        // Handle error in formatting
        return -1;
    }
    return writeIndex;
}
 8001c6c:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 8001c70:	b002      	add	sp, #8
 8001c72:	bd70      	pop	{r4, r5, r6, pc}

08001c74 <generateLocationInfoMessage>:

int generateLocationInfoMessage(const JT808_LocationInfoReport* report, char* hexString, int max_len) {
 8001c74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001c78:	b0aa      	sub	sp, #168	@ 0xa8
   const uint8_t* fields[] = {
        &(report->start_mask), report->message_type, report->message_length,
 8001c7a:	1c43      	adds	r3, r0, #1
   const uint8_t* fields[] = {
 8001c7c:	9303      	str	r3, [sp, #12]
        &(report->start_mask), report->message_type, report->message_length,
 8001c7e:	1cc3      	adds	r3, r0, #3
   const uint8_t* fields[] = {
 8001c80:	9304      	str	r3, [sp, #16]
        report->terminal_phone_number, report->terminal_serial_number, report->alarm,
 8001c82:	1d43      	adds	r3, r0, #5
   const uint8_t* fields[] = {
 8001c84:	9305      	str	r3, [sp, #20]
        report->terminal_phone_number, report->terminal_serial_number, report->alarm,
 8001c86:	f100 030b 	add.w	r3, r0, #11
   const uint8_t* fields[] = {
 8001c8a:	9306      	str	r3, [sp, #24]
        report->terminal_phone_number, report->terminal_serial_number, report->alarm,
 8001c8c:	f100 030d 	add.w	r3, r0, #13
   const uint8_t* fields[] = {
 8001c90:	9307      	str	r3, [sp, #28]
        report->status, report->latitude, report->longitude, report->altitude,
 8001c92:	f100 0311 	add.w	r3, r0, #17
   const uint8_t* fields[] = {
 8001c96:	9308      	str	r3, [sp, #32]
        report->status, report->latitude, report->longitude, report->altitude,
 8001c98:	f100 0315 	add.w	r3, r0, #21
   const uint8_t* fields[] = {
 8001c9c:	9309      	str	r3, [sp, #36]	@ 0x24
        report->status, report->latitude, report->longitude, report->altitude,
 8001c9e:	f100 0319 	add.w	r3, r0, #25
   const uint8_t* fields[] = {
 8001ca2:	930a      	str	r3, [sp, #40]	@ 0x28
        report->status, report->latitude, report->longitude, report->altitude,
 8001ca4:	f100 031d 	add.w	r3, r0, #29
   const uint8_t* fields[] = {
 8001ca8:	930b      	str	r3, [sp, #44]	@ 0x2c
        report->speed, report->direction, report->timestamp, report->mileage,
 8001caa:	f100 031f 	add.w	r3, r0, #31
   const uint8_t* fields[] = {
 8001cae:	930c      	str	r3, [sp, #48]	@ 0x30
        report->speed, report->direction, report->timestamp, report->mileage,
 8001cb0:	f100 0321 	add.w	r3, r0, #33	@ 0x21
   const uint8_t* fields[] = {
 8001cb4:	930d      	str	r3, [sp, #52]	@ 0x34
        report->speed, report->direction, report->timestamp, report->mileage,
 8001cb6:	f100 0323 	add.w	r3, r0, #35	@ 0x23
   const uint8_t* fields[] = {
 8001cba:	930e      	str	r3, [sp, #56]	@ 0x38
        report->speed, report->direction, report->timestamp, report->mileage,
 8001cbc:	f100 0329 	add.w	r3, r0, #41	@ 0x29
   const uint8_t* fields[] = {
 8001cc0:	930f      	str	r3, [sp, #60]	@ 0x3c
        report->oil, report->driving_record_speed, report->vehicle_id, report->signal,
 8001cc2:	f100 032f 	add.w	r3, r0, #47	@ 0x2f
   const uint8_t* fields[] = {
 8001cc6:	9310      	str	r3, [sp, #64]	@ 0x40
        report->oil, report->driving_record_speed, report->vehicle_id, report->signal,
 8001cc8:	f100 0331 	add.w	r3, r0, #49	@ 0x31
   const uint8_t* fields[] = {
 8001ccc:	9311      	str	r3, [sp, #68]	@ 0x44
        report->oil, report->driving_record_speed, report->vehicle_id, report->signal,
 8001cce:	f100 0333 	add.w	r3, r0, #51	@ 0x33
   const uint8_t* fields[] = {
 8001cd2:	9312      	str	r3, [sp, #72]	@ 0x48
        report->oil, report->driving_record_speed, report->vehicle_id, report->signal,
 8001cd4:	f100 0336 	add.w	r3, r0, #54	@ 0x36
   const uint8_t* fields[] = {
 8001cd8:	9002      	str	r0, [sp, #8]
 8001cda:	9313      	str	r3, [sp, #76]	@ 0x4c
        report->additional, &(report->end_mask)
    };
    int lengths[] = { 1, 2, 2, 6, 2, 4, 4, 4, 4, 2, 2, 2, 6, 6, 2, 2, 3, 1, 9, 1 };
 8001cdc:	af16      	add	r7, sp, #88	@ 0x58
        report->additional, &(report->end_mask)
 8001cde:	f100 0337 	add.w	r3, r0, #55	@ 0x37
 8001ce2:	3040      	adds	r0, #64	@ 0x40
   const uint8_t* fields[] = {
 8001ce4:	9015      	str	r0, [sp, #84]	@ 0x54
int generateLocationInfoMessage(const JT808_LocationInfoReport* report, char* hexString, int max_len) {
 8001ce6:	460d      	mov	r5, r1
 8001ce8:	4616      	mov	r6, r2
    int lengths[] = { 1, 2, 2, 6, 2, 4, 4, 4, 4, 2, 2, 2, 6, 6, 2, 2, 3, 1, 9, 1 };
 8001cea:	490f      	ldr	r1, [pc, #60]	@ (8001d28 <generateLocationInfoMessage+0xb4>)
   const uint8_t* fields[] = {
 8001cec:	9314      	str	r3, [sp, #80]	@ 0x50
    int lengths[] = { 1, 2, 2, 6, 2, 4, 4, 4, 4, 2, 2, 2, 6, 6, 2, 2, 3, 1, 9, 1 };
 8001cee:	2250      	movs	r2, #80	@ 0x50
 8001cf0:	4638      	mov	r0, r7

    int writeIndex = 0;
    for (int i = 0; i < sizeof(fields) / sizeof(fields[0]); i++) {
 8001cf2:	2400      	movs	r4, #0
    int lengths[] = { 1, 2, 2, 6, 2, 4, 4, 4, 4, 2, 2, 2, 6, 6, 2, 2, 3, 1, 9, 1 };
 8001cf4:	f009 fe6b 	bl	800b9ce <memcpy>
        writeIndex = formatToHexString(fields[i], lengths[i], hexString, max_len, writeIndex);
 8001cf8:	f10d 0808 	add.w	r8, sp, #8
    int writeIndex = 0;
 8001cfc:	4620      	mov	r0, r4
        writeIndex = formatToHexString(fields[i], lengths[i], hexString, max_len, writeIndex);
 8001cfe:	9000      	str	r0, [sp, #0]
 8001d00:	f857 1024 	ldr.w	r1, [r7, r4, lsl #2]
 8001d04:	f858 0024 	ldr.w	r0, [r8, r4, lsl #2]
 8001d08:	4633      	mov	r3, r6
 8001d0a:	462a      	mov	r2, r5
 8001d0c:	f7ff ff1e 	bl	8001b4c <formatToHexString>
        if (writeIndex < 0) return -1;
 8001d10:	2800      	cmp	r0, #0
 8001d12:	db05      	blt.n	8001d20 <generateLocationInfoMessage+0xac>
    for (int i = 0; i < sizeof(fields) / sizeof(fields[0]); i++) {
 8001d14:	3401      	adds	r4, #1
 8001d16:	2c14      	cmp	r4, #20
 8001d18:	d1f1      	bne.n	8001cfe <generateLocationInfoMessage+0x8a>
    }
    return writeIndex;
}
 8001d1a:	b02a      	add	sp, #168	@ 0xa8
 8001d1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if (writeIndex < 0) return -1;
 8001d20:	f04f 30ff 	mov.w	r0, #4294967295
 8001d24:	e7f9      	b.n	8001d1a <generateLocationInfoMessage+0xa6>
 8001d26:	bf00      	nop
 8001d28:	0800ebb8 	.word	0x0800ebb8

08001d2c <login_to_server>:



int login_to_server(int connect_id, const JT808_TerminalRegistration *reg_msg){
 8001d2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d2e:	f5ad 7d03 	sub.w	sp, sp, #524	@ 0x20c
	uint8_t command[256];  // Increased buffer size
	char hexString[128] = {0};
 8001d32:	2400      	movs	r4, #0
int login_to_server(int connect_id, const JT808_TerminalRegistration *reg_msg){
 8001d34:	460f      	mov	r7, r1
	char hexString[128] = {0};
 8001d36:	ae02      	add	r6, sp, #8
 8001d38:	227c      	movs	r2, #124	@ 0x7c
 8001d3a:	4621      	mov	r1, r4
int login_to_server(int connect_id, const JT808_TerminalRegistration *reg_msg){
 8001d3c:	4605      	mov	r5, r0
	char hexString[128] = {0};
 8001d3e:	a803      	add	r0, sp, #12
 8001d40:	6034      	str	r4, [r6, #0]
 8001d42:	f008 ffeb 	bl	800ad1c <memset>
	int count_check = 0;
	int result = generateRegistrationMessage(reg_msg, hexString, 128);
 8001d46:	2280      	movs	r2, #128	@ 0x80
 8001d48:	4631      	mov	r1, r6
 8001d4a:	4638      	mov	r0, r7
 8001d4c:	f7ff ff1e 	bl	8001b8c <generateRegistrationMessage>
	if (result < 0) {
 8001d50:	42a0      	cmp	r0, r4
 8001d52:	da05      	bge.n	8001d60 <login_to_server+0x34>
		uart_transmit_string(&huart1,(uint8_t*) "ERROR: FAILED to generate message string\n");
 8001d54:	4926      	ldr	r1, [pc, #152]	@ (8001df0 <login_to_server+0xc4>)
 8001d56:	4827      	ldr	r0, [pc, #156]	@ (8001df4 <login_to_server+0xc8>)
 8001d58:	f002 fc0c 	bl	8004574 <uart_transmit_string>
		return 1;
 8001d5c:	2001      	movs	r0, #1
 8001d5e:	e02f      	b.n	8001dc0 <login_to_server+0x94>
	}

	// Format the AT command with the hex message
	snprintf((char*)command, sizeof(command), "AT+QISENDEX=%d,\"%s\"\r\n", connect_id, hexString);
 8001d60:	462b      	mov	r3, r5
 8001d62:	4a25      	ldr	r2, [pc, #148]	@ (8001df8 <login_to_server+0xcc>)
 8001d64:	9600      	str	r6, [sp, #0]
 8001d66:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001d6a:	a842      	add	r0, sp, #264	@ 0x108
 8001d6c:	f008 feda 	bl	800ab24 <sniprintf>
	//snprintf((char *)command, sizeof(command), "AT+QISENDEX=%d,\"%s\"\r\n", connect_id, message);
	send_AT_command((char*)command);
 8001d70:	a842      	add	r0, sp, #264	@ 0x108
 8001d72:	f7ff f94f 	bl	8001014 <send_AT_command>

	while(strstr((char *) response, CHECK_RESPONSE) == NULL){
 8001d76:	4e21      	ldr	r6, [pc, #132]	@ (8001dfc <login_to_server+0xd0>)
 8001d78:	4d21      	ldr	r5, [pc, #132]	@ (8001e00 <login_to_server+0xd4>)
		char output_elapsed[128];
		receive_response("Check sending to server\n");
 8001d7a:	4f22      	ldr	r7, [pc, #136]	@ (8001e04 <login_to_server+0xd8>)
	while(strstr((char *) response, CHECK_RESPONSE) == NULL){
 8001d7c:	4631      	mov	r1, r6
 8001d7e:	4628      	mov	r0, r5
 8001d80:	f009 f81c 	bl	800adbc <strstr>
 8001d84:	b170      	cbz	r0, 8001da4 <login_to_server+0x78>
		count_check++;
		snprintf(output_elapsed, 128, "Elapsed Time: %d\n", count_check);
		uart_transmit_string(&huart1, (uint8_t *)output_elapsed);
		osDelay(200);
	}
	receive_response("Check sending to server\n");
 8001d86:	481f      	ldr	r0, [pc, #124]	@ (8001e04 <login_to_server+0xd8>)
 8001d88:	f7ff f970 	bl	800106c <receive_response>
	osDelay(100);
 8001d8c:	2064      	movs	r0, #100	@ 0x64
 8001d8e:	f005 fc87 	bl	80076a0 <osDelay>
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8001d92:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8001d96:	2100      	movs	r1, #0
 8001d98:	4819      	ldr	r0, [pc, #100]	@ (8001e00 <login_to_server+0xd4>)
 8001d9a:	f008 ffbf 	bl	800ad1c <memset>
	SIM_UART_ReInitializeRxDMA();
 8001d9e:	f7ff f949 	bl	8001034 <SIM_UART_ReInitializeRxDMA>
	return 1;
 8001da2:	e7db      	b.n	8001d5c <login_to_server+0x30>
		receive_response("Check sending to server\n");
 8001da4:	4638      	mov	r0, r7
 8001da6:	f7ff f961 	bl	800106c <receive_response>
		if(count_check >= 3){
 8001daa:	2c03      	cmp	r4, #3
 8001dac:	d10b      	bne.n	8001dc6 <login_to_server+0x9a>
			memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8001dae:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8001db2:	2100      	movs	r1, #0
 8001db4:	4812      	ldr	r0, [pc, #72]	@ (8001e00 <login_to_server+0xd4>)
 8001db6:	f008 ffb1 	bl	800ad1c <memset>
			SIM_UART_ReInitializeRxDMA();
 8001dba:	f7ff f93b 	bl	8001034 <SIM_UART_ReInitializeRxDMA>
			return 0;
 8001dbe:	2000      	movs	r0, #0
}
 8001dc0:	f50d 7d03 	add.w	sp, sp, #524	@ 0x20c
 8001dc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (strstr((char*) response, "ERROR") != NULL){
 8001dc6:	4910      	ldr	r1, [pc, #64]	@ (8001e08 <login_to_server+0xdc>)
 8001dc8:	4628      	mov	r0, r5
 8001dca:	f008 fff7 	bl	800adbc <strstr>
 8001dce:	2800      	cmp	r0, #0
 8001dd0:	d1ed      	bne.n	8001dae <login_to_server+0x82>
		count_check++;
 8001dd2:	3401      	adds	r4, #1
		snprintf(output_elapsed, 128, "Elapsed Time: %d\n", count_check);
 8001dd4:	4a0d      	ldr	r2, [pc, #52]	@ (8001e0c <login_to_server+0xe0>)
 8001dd6:	4623      	mov	r3, r4
 8001dd8:	2180      	movs	r1, #128	@ 0x80
 8001dda:	a822      	add	r0, sp, #136	@ 0x88
 8001ddc:	f008 fea2 	bl	800ab24 <sniprintf>
		uart_transmit_string(&huart1, (uint8_t *)output_elapsed);
 8001de0:	4804      	ldr	r0, [pc, #16]	@ (8001df4 <login_to_server+0xc8>)
 8001de2:	a922      	add	r1, sp, #136	@ 0x88
 8001de4:	f002 fbc6 	bl	8004574 <uart_transmit_string>
		osDelay(200);
 8001de8:	20c8      	movs	r0, #200	@ 0xc8
 8001dea:	f005 fc59 	bl	80076a0 <osDelay>
 8001dee:	e7c5      	b.n	8001d7c <login_to_server+0x50>
 8001df0:	0800f190 	.word	0x0800f190
 8001df4:	20001250 	.word	0x20001250
 8001df8:	0800f1ba 	.word	0x0800f1ba
 8001dfc:	0800edae 	.word	0x0800edae
 8001e00:	20000c80 	.word	0x20000c80
 8001e04:	0800f1d0 	.word	0x0800f1d0
 8001e08:	0800f085 	.word	0x0800f085
 8001e0c:	0800f138 	.word	0x0800f138

08001e10 <send_location_to_server>:

int send_location_to_server(int connect_id, const JT808_LocationInfoReport *location_info){
 8001e10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001e14:	f5ad 7d04 	sub.w	sp, sp, #528	@ 0x210
	uint8_t command[256];  // Increased buffer size
	char hexString[131] = {0};
 8001e18:	2400      	movs	r4, #0
int send_location_to_server(int connect_id, const JT808_LocationInfoReport *location_info){
 8001e1a:	460f      	mov	r7, r1
	char hexString[131] = {0};
 8001e1c:	ae23      	add	r6, sp, #140	@ 0x8c
 8001e1e:	227f      	movs	r2, #127	@ 0x7f
 8001e20:	4621      	mov	r1, r4
int send_location_to_server(int connect_id, const JT808_LocationInfoReport *location_info){
 8001e22:	4605      	mov	r5, r0
	char hexString[131] = {0};
 8001e24:	a824      	add	r0, sp, #144	@ 0x90
 8001e26:	6034      	str	r4, [r6, #0]
 8001e28:	f008 ff78 	bl	800ad1c <memset>
	int count_check = 0;
	int result = generateLocationInfoMessage(location_info, hexString, 131);
 8001e2c:	2283      	movs	r2, #131	@ 0x83
 8001e2e:	4631      	mov	r1, r6
 8001e30:	4638      	mov	r0, r7
 8001e32:	f7ff ff1f 	bl	8001c74 <generateLocationInfoMessage>
	if (result < 0) {
 8001e36:	42a0      	cmp	r0, r4
 8001e38:	da05      	bge.n	8001e46 <send_location_to_server+0x36>
		uart_transmit_string(&huart1,(uint8_t*) "ERROR: FAILED to generate message string\n");
 8001e3a:	4930      	ldr	r1, [pc, #192]	@ (8001efc <send_location_to_server+0xec>)
 8001e3c:	4830      	ldr	r0, [pc, #192]	@ (8001f00 <send_location_to_server+0xf0>)
 8001e3e:	f002 fb99 	bl	8004574 <uart_transmit_string>
		return 1;
 8001e42:	2001      	movs	r0, #1
 8001e44:	e030      	b.n	8001ea8 <send_location_to_server+0x98>
	}

	// Format the AT command with the hex message
	snprintf((char *) command, sizeof(command), "AT+QISENDEX=%d,\"%s\"\r\n", connect_id, hexString);
 8001e46:	4a2f      	ldr	r2, [pc, #188]	@ (8001f04 <send_location_to_server+0xf4>)
 8001e48:	9600      	str	r6, [sp, #0]
 8001e4a:	462b      	mov	r3, r5
 8001e4c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001e50:	a844      	add	r0, sp, #272	@ 0x110
 8001e52:	f008 fe67 	bl	800ab24 <sniprintf>
	//snprintf((char *)command, sizeof(command), "AT+QISENDEX=%d,\"%s\"\r\n", connect_id, message);
	send_AT_command((char*)command);
 8001e56:	a844      	add	r0, sp, #272	@ 0x110
 8001e58:	f7ff f8dc 	bl	8001014 <send_AT_command>

	while(strstr((char *) response, "+QIURC") == NULL){
 8001e5c:	4f2a      	ldr	r7, [pc, #168]	@ (8001f08 <send_location_to_server+0xf8>)
 8001e5e:	4e2b      	ldr	r6, [pc, #172]	@ (8001f0c <send_location_to_server+0xfc>)
		char output_elapsed[128];
		receive_response("Check sending to server\n");
 8001e60:	f8df 80ac 	ldr.w	r8, [pc, #172]	@ 8001f10 <send_location_to_server+0x100>
	while(strstr((char *) response, "+QIURC") == NULL){
 8001e64:	4639      	mov	r1, r7
 8001e66:	4630      	mov	r0, r6
 8001e68:	f008 ffa8 	bl	800adbc <strstr>
 8001e6c:	b170      	cbz	r0, 8001e8c <send_location_to_server+0x7c>
		count_check++;
		snprintf(output_elapsed, 128, "Elapsed Time: %d\n", count_check);
		uart_transmit_string(&huart1, (uint8_t *)output_elapsed);
		osDelay(200);
	}
	receive_response("Check sending to server\n");
 8001e6e:	4828      	ldr	r0, [pc, #160]	@ (8001f10 <send_location_to_server+0x100>)
 8001e70:	f7ff f8fc 	bl	800106c <receive_response>
	osDelay(100);
 8001e74:	2064      	movs	r0, #100	@ 0x64
 8001e76:	f005 fc13 	bl	80076a0 <osDelay>
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8001e7a:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8001e7e:	2100      	movs	r1, #0
 8001e80:	4822      	ldr	r0, [pc, #136]	@ (8001f0c <send_location_to_server+0xfc>)
 8001e82:	f008 ff4b 	bl	800ad1c <memset>
	SIM_UART_ReInitializeRxDMA();
 8001e86:	f7ff f8d5 	bl	8001034 <SIM_UART_ReInitializeRxDMA>
	return 1;
 8001e8a:	e7da      	b.n	8001e42 <send_location_to_server+0x32>
		receive_response("Check sending to server\n");
 8001e8c:	4640      	mov	r0, r8
 8001e8e:	f7ff f8ed 	bl	800106c <receive_response>
		if(count_check >= 6){
 8001e92:	2c06      	cmp	r4, #6
 8001e94:	d10c      	bne.n	8001eb0 <send_location_to_server+0xa0>
			memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8001e96:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8001e9a:	2100      	movs	r1, #0
 8001e9c:	481b      	ldr	r0, [pc, #108]	@ (8001f0c <send_location_to_server+0xfc>)
 8001e9e:	f008 ff3d 	bl	800ad1c <memset>
			SIM_UART_ReInitializeRxDMA();
 8001ea2:	f7ff f8c7 	bl	8001034 <SIM_UART_ReInitializeRxDMA>
			return 0;
 8001ea6:	2000      	movs	r0, #0
}
 8001ea8:	f50d 7d04 	add.w	sp, sp, #528	@ 0x210
 8001eac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (strstr((char*) response, "ERROR") != NULL){
 8001eb0:	4918      	ldr	r1, [pc, #96]	@ (8001f14 <send_location_to_server+0x104>)
 8001eb2:	4630      	mov	r0, r6
 8001eb4:	f008 ff82 	bl	800adbc <strstr>
 8001eb8:	4605      	mov	r5, r0
 8001eba:	2800      	cmp	r0, #0
 8001ebc:	d1eb      	bne.n	8001e96 <send_location_to_server+0x86>
		 if (strstr((char*)response, "closed") != NULL) {
 8001ebe:	4916      	ldr	r1, [pc, #88]	@ (8001f18 <send_location_to_server+0x108>)
 8001ec0:	4630      	mov	r0, r6
 8001ec2:	f008 ff7b 	bl	800adbc <strstr>
 8001ec6:	b148      	cbz	r0, 8001edc <send_location_to_server+0xcc>
			 memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8001ec8:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8001ecc:	4629      	mov	r1, r5
 8001ece:	480f      	ldr	r0, [pc, #60]	@ (8001f0c <send_location_to_server+0xfc>)
 8001ed0:	f008 ff24 	bl	800ad1c <memset>
			 SIM_UART_ReInitializeRxDMA();
 8001ed4:	f7ff f8ae 	bl	8001034 <SIM_UART_ReInitializeRxDMA>
			 return 2;
 8001ed8:	2002      	movs	r0, #2
 8001eda:	e7e5      	b.n	8001ea8 <send_location_to_server+0x98>
		count_check++;
 8001edc:	3401      	adds	r4, #1
		snprintf(output_elapsed, 128, "Elapsed Time: %d\n", count_check);
 8001ede:	4a0f      	ldr	r2, [pc, #60]	@ (8001f1c <send_location_to_server+0x10c>)
 8001ee0:	4623      	mov	r3, r4
 8001ee2:	2180      	movs	r1, #128	@ 0x80
 8001ee4:	a803      	add	r0, sp, #12
 8001ee6:	f008 fe1d 	bl	800ab24 <sniprintf>
		uart_transmit_string(&huart1, (uint8_t *)output_elapsed);
 8001eea:	4805      	ldr	r0, [pc, #20]	@ (8001f00 <send_location_to_server+0xf0>)
 8001eec:	a903      	add	r1, sp, #12
 8001eee:	f002 fb41 	bl	8004574 <uart_transmit_string>
		osDelay(200);
 8001ef2:	20c8      	movs	r0, #200	@ 0xc8
 8001ef4:	f005 fbd4 	bl	80076a0 <osDelay>
 8001ef8:	e7b4      	b.n	8001e64 <send_location_to_server+0x54>
 8001efa:	bf00      	nop
 8001efc:	0800f190 	.word	0x0800f190
 8001f00:	20001250 	.word	0x20001250
 8001f04:	0800f1ba 	.word	0x0800f1ba
 8001f08:	0800f1f0 	.word	0x0800f1f0
 8001f0c:	20000c80 	.word	0x20000c80
 8001f10:	0800f1d0 	.word	0x0800f1d0
 8001f14:	0800f085 	.word	0x0800f085
 8001f18:	0800f1e9 	.word	0x0800f1e9
 8001f1c:	0800f138 	.word	0x0800f138

08001f20 <check_data_sent_to_server>:


int check_data_sent_to_server(int connect_id){
 8001f20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001f24:	b0e6      	sub	sp, #408	@ 0x198
	uint8_t command[256];
	int count_check = 0;
	uint8_t output[128];
	snprintf((char *)command, sizeof(command), "AT+QISEND=%d,0\r\n", connect_id);
 8001f26:	4603      	mov	r3, r0
 8001f28:	4a57      	ldr	r2, [pc, #348]	@ (8002088 <check_data_sent_to_server+0x168>)
	send_AT_command((char*)command);
	while(strstr((char *) response, CHECK_RESPONSE) == NULL){
 8001f2a:	4f58      	ldr	r7, [pc, #352]	@ (800208c <check_data_sent_to_server+0x16c>)
 8001f2c:	4e58      	ldr	r6, [pc, #352]	@ (8002090 <check_data_sent_to_server+0x170>)
			count_check = 0;
			memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
			SIM_UART_ReInitializeRxDMA();
			return 0;
		}
		if (strstr((char*) response, "ERROR") != NULL){
 8001f2e:	f8df 8178 	ldr.w	r8, [pc, #376]	@ 80020a8 <check_data_sent_to_server+0x188>
	snprintf((char *)command, sizeof(command), "AT+QISEND=%d,0\r\n", connect_id);
 8001f32:	f44f 7180 	mov.w	r1, #256	@ 0x100
int check_data_sent_to_server(int connect_id){
 8001f36:	4604      	mov	r4, r0
	snprintf((char *)command, sizeof(command), "AT+QISEND=%d,0\r\n", connect_id);
 8001f38:	a826      	add	r0, sp, #152	@ 0x98
 8001f3a:	f008 fdf3 	bl	800ab24 <sniprintf>
	send_AT_command((char*)command);
 8001f3e:	a826      	add	r0, sp, #152	@ 0x98
 8001f40:	f7ff f868 	bl	8001014 <send_AT_command>
	int count_check = 0;
 8001f44:	2500      	movs	r5, #0
	while(strstr((char *) response, CHECK_RESPONSE) == NULL){
 8001f46:	4639      	mov	r1, r7
 8001f48:	4630      	mov	r0, r6
 8001f4a:	f008 ff37 	bl	800adbc <strstr>
 8001f4e:	2800      	cmp	r0, #0
 8001f50:	d063      	beq.n	800201a <check_data_sent_to_server+0xfa>
		receive_response("Check sending to server\n");
	}

	int sentBytes, ackedBytes, unackedBytes;

	int result = sscanf((char*)response, "AT+QISEND=0,0 +QISEND: %d,%d,%d", &sentBytes, &ackedBytes, &unackedBytes);
 8001f52:	ad05      	add	r5, sp, #20
 8001f54:	494f      	ldr	r1, [pc, #316]	@ (8002094 <check_data_sent_to_server+0x174>)
 8001f56:	484e      	ldr	r0, [pc, #312]	@ (8002090 <check_data_sent_to_server+0x170>)
 8001f58:	9500      	str	r5, [sp, #0]
 8001f5a:	ab04      	add	r3, sp, #16
 8001f5c:	aa03      	add	r2, sp, #12
 8001f5e:	f008 fe35 	bl	800abcc <siscanf>
	snprintf((char *)output, 128, "Lost Transmit BYTES: %d\n", unackedBytes);
 8001f62:	9b05      	ldr	r3, [sp, #20]
 8001f64:	4a4c      	ldr	r2, [pc, #304]	@ (8002098 <check_data_sent_to_server+0x178>)
	int result = sscanf((char*)response, "AT+QISEND=0,0 +QISEND: %d,%d,%d", &sentBytes, &ackedBytes, &unackedBytes);
 8001f66:	4606      	mov	r6, r0
	snprintf((char *)output, 128, "Lost Transmit BYTES: %d\n", unackedBytes);
 8001f68:	2180      	movs	r1, #128	@ 0x80
 8001f6a:	a806      	add	r0, sp, #24
 8001f6c:	f008 fdda 	bl	800ab24 <sniprintf>
	uart_transmit_string(&huart1, output);
 8001f70:	484a      	ldr	r0, [pc, #296]	@ (800209c <check_data_sent_to_server+0x17c>)
 8001f72:	a906      	add	r1, sp, #24
 8001f74:	f002 fafe 	bl	8004574 <uart_transmit_string>

	if (result == 3) {
 8001f78:	2e03      	cmp	r6, #3
 8001f7a:	d102      	bne.n	8001f82 <check_data_sent_to_server+0x62>
		if (unackedBytes > 0) {
 8001f7c:	9b05      	ldr	r3, [sp, #20]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	dc55      	bgt.n	800202e <check_data_sent_to_server+0x10e>
			return 0;
		}
	}
	receive_response("Check sending to server\n");
 8001f82:	4847      	ldr	r0, [pc, #284]	@ (80020a0 <check_data_sent_to_server+0x180>)
	osDelay(200);

	count_check = 0;
	snprintf((char *)command, sizeof(command), "AT+QIRD=%d,1500\r\n", connect_id);
	send_AT_command((char*)command);
	while(strstr((char *) response, "+QIRD") == NULL){
 8001f84:	4e47      	ldr	r6, [pc, #284]	@ (80020a4 <check_data_sent_to_server+0x184>)
 8001f86:	4d42      	ldr	r5, [pc, #264]	@ (8002090 <check_data_sent_to_server+0x170>)
		osDelay(300);
		if (strstr((char*)response, "ERROR") != NULL){
 8001f88:	4f47      	ldr	r7, [pc, #284]	@ (80020a8 <check_data_sent_to_server+0x188>)
	receive_response("Check sending to server\n");
 8001f8a:	f7ff f86f 	bl	800106c <receive_response>
	osDelay(100);
 8001f8e:	2064      	movs	r0, #100	@ 0x64
 8001f90:	f005 fb86 	bl	80076a0 <osDelay>
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8001f94:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8001f98:	2100      	movs	r1, #0
 8001f9a:	483d      	ldr	r0, [pc, #244]	@ (8002090 <check_data_sent_to_server+0x170>)
 8001f9c:	f008 febe 	bl	800ad1c <memset>
	SIM_UART_ReInitializeRxDMA();
 8001fa0:	f7ff f848 	bl	8001034 <SIM_UART_ReInitializeRxDMA>
	osDelay(200);
 8001fa4:	20c8      	movs	r0, #200	@ 0xc8
 8001fa6:	f005 fb7b 	bl	80076a0 <osDelay>
	snprintf((char *)command, sizeof(command), "AT+QIRD=%d,1500\r\n", connect_id);
 8001faa:	4a40      	ldr	r2, [pc, #256]	@ (80020ac <check_data_sent_to_server+0x18c>)
 8001fac:	4623      	mov	r3, r4
 8001fae:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001fb2:	a826      	add	r0, sp, #152	@ 0x98
 8001fb4:	f008 fdb6 	bl	800ab24 <sniprintf>
	send_AT_command((char*)command);
 8001fb8:	a826      	add	r0, sp, #152	@ 0x98
 8001fba:	f7ff f82b 	bl	8001014 <send_AT_command>
	while(strstr((char *) response, "+QIRD") == NULL){
 8001fbe:	4631      	mov	r1, r6
 8001fc0:	4628      	mov	r0, r5
 8001fc2:	f008 fefb 	bl	800adbc <strstr>
 8001fc6:	2800      	cmp	r0, #0
 8001fc8:	d04d      	beq.n	8002066 <check_data_sent_to_server+0x146>
			return 0;
		}
		osDelay(200);
		receive_response("Check received data from server\n");
	}
	receive_response("Check received data from server\n");
 8001fca:	4839      	ldr	r0, [pc, #228]	@ (80020b0 <check_data_sent_to_server+0x190>)
 8001fcc:	f7ff f84e 	bl	800106c <receive_response>
	char *token = strstr((char*)response, "+QIRD: ");
 8001fd0:	4938      	ldr	r1, [pc, #224]	@ (80020b4 <check_data_sent_to_server+0x194>)
 8001fd2:	482f      	ldr	r0, [pc, #188]	@ (8002090 <check_data_sent_to_server+0x170>)
 8001fd4:	f008 fef2 	bl	800adbc <strstr>
	int value = 0;

	if (token != NULL) {
 8001fd8:	b110      	cbz	r0, 8001fe0 <check_data_sent_to_server+0xc0>
		value = atoi(token + 7);  // Move past "+QIRD: " and convert to integer
 8001fda:	3007      	adds	r0, #7
 8001fdc:	f006 ff22 	bl	8008e24 <atoi>
	int value = 0;
 8001fe0:	4604      	mov	r4, r0
	}
	snprintf((char*)output, 128, "\nNumber of character received: %d\n", value);
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	2180      	movs	r1, #128	@ 0x80
 8001fe6:	4a34      	ldr	r2, [pc, #208]	@ (80020b8 <check_data_sent_to_server+0x198>)
 8001fe8:	a806      	add	r0, sp, #24
 8001fea:	f008 fd9b 	bl	800ab24 <sniprintf>
	uart_transmit_string(&huart1, output);
 8001fee:	482b      	ldr	r0, [pc, #172]	@ (800209c <check_data_sent_to_server+0x17c>)
 8001ff0:	a906      	add	r1, sp, #24
 8001ff2:	f002 fabf 	bl	8004574 <uart_transmit_string>
	if(value == 0) return 0;
 8001ff6:	b1d4      	cbz	r4, 800202e <check_data_sent_to_server+0x10e>

	osDelay(100);
 8001ff8:	2064      	movs	r0, #100	@ 0x64
 8001ffa:	f005 fb51 	bl	80076a0 <osDelay>
	uart_transmit_string(&huart1, (uint8_t*) "OUT OF receive data from server\n");
 8001ffe:	492f      	ldr	r1, [pc, #188]	@ (80020bc <check_data_sent_to_server+0x19c>)
 8002000:	4826      	ldr	r0, [pc, #152]	@ (800209c <check_data_sent_to_server+0x17c>)
 8002002:	f002 fab7 	bl	8004574 <uart_transmit_string>
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8002006:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 800200a:	2100      	movs	r1, #0
 800200c:	4820      	ldr	r0, [pc, #128]	@ (8002090 <check_data_sent_to_server+0x170>)
 800200e:	f008 fe85 	bl	800ad1c <memset>
	SIM_UART_ReInitializeRxDMA();
 8002012:	f7ff f80f 	bl	8001034 <SIM_UART_ReInitializeRxDMA>
	return 1;
 8002016:	2001      	movs	r0, #1
 8002018:	e00a      	b.n	8002030 <check_data_sent_to_server+0x110>
		if(count_check >= 6){
 800201a:	2d06      	cmp	r5, #6
 800201c:	d10b      	bne.n	8002036 <check_data_sent_to_server+0x116>
			memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 800201e:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8002022:	2100      	movs	r1, #0
 8002024:	481a      	ldr	r0, [pc, #104]	@ (8002090 <check_data_sent_to_server+0x170>)
 8002026:	f008 fe79 	bl	800ad1c <memset>
			SIM_UART_ReInitializeRxDMA();
 800202a:	f7ff f803 	bl	8001034 <SIM_UART_ReInitializeRxDMA>
	int value = 0;
 800202e:	2000      	movs	r0, #0
}
 8002030:	b066      	add	sp, #408	@ 0x198
 8002032:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (strstr((char*) response, "ERROR") != NULL){
 8002036:	4641      	mov	r1, r8
 8002038:	4630      	mov	r0, r6
 800203a:	f008 febf 	bl	800adbc <strstr>
 800203e:	2800      	cmp	r0, #0
 8002040:	d1ed      	bne.n	800201e <check_data_sent_to_server+0xfe>
		count_check++;
 8002042:	3501      	adds	r5, #1
		osDelay(200);
 8002044:	20c8      	movs	r0, #200	@ 0xc8
 8002046:	f005 fb2b 	bl	80076a0 <osDelay>
		snprintf(output_elapsed, 128, "Elapsed Time +QISEND: 0,0: %d\n", count_check);
 800204a:	4a1d      	ldr	r2, [pc, #116]	@ (80020c0 <check_data_sent_to_server+0x1a0>)
 800204c:	462b      	mov	r3, r5
 800204e:	2180      	movs	r1, #128	@ 0x80
 8002050:	a806      	add	r0, sp, #24
 8002052:	f008 fd67 	bl	800ab24 <sniprintf>
		uart_transmit_string(&huart1, (uint8_t *)output_elapsed);
 8002056:	4811      	ldr	r0, [pc, #68]	@ (800209c <check_data_sent_to_server+0x17c>)
 8002058:	a906      	add	r1, sp, #24
 800205a:	f002 fa8b 	bl	8004574 <uart_transmit_string>
		receive_response("Check sending to server\n");
 800205e:	4810      	ldr	r0, [pc, #64]	@ (80020a0 <check_data_sent_to_server+0x180>)
 8002060:	f7ff f804 	bl	800106c <receive_response>
 8002064:	e76f      	b.n	8001f46 <check_data_sent_to_server+0x26>
		osDelay(300);
 8002066:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800206a:	f005 fb19 	bl	80076a0 <osDelay>
		if (strstr((char*)response, "ERROR") != NULL){
 800206e:	4639      	mov	r1, r7
 8002070:	4628      	mov	r0, r5
 8002072:	f008 fea3 	bl	800adbc <strstr>
 8002076:	2800      	cmp	r0, #0
 8002078:	d1d1      	bne.n	800201e <check_data_sent_to_server+0xfe>
		osDelay(200);
 800207a:	20c8      	movs	r0, #200	@ 0xc8
 800207c:	f005 fb10 	bl	80076a0 <osDelay>
		receive_response("Check received data from server\n");
 8002080:	480b      	ldr	r0, [pc, #44]	@ (80020b0 <check_data_sent_to_server+0x190>)
 8002082:	f7fe fff3 	bl	800106c <receive_response>
 8002086:	e79a      	b.n	8001fbe <check_data_sent_to_server+0x9e>
 8002088:	0800f1f7 	.word	0x0800f1f7
 800208c:	0800edae 	.word	0x0800edae
 8002090:	20000c80 	.word	0x20000c80
 8002094:	0800f227 	.word	0x0800f227
 8002098:	0800f247 	.word	0x0800f247
 800209c:	20001250 	.word	0x20001250
 80020a0:	0800f1d0 	.word	0x0800f1d0
 80020a4:	0800f293 	.word	0x0800f293
 80020a8:	0800f085 	.word	0x0800f085
 80020ac:	0800f260 	.word	0x0800f260
 80020b0:	0800f272 	.word	0x0800f272
 80020b4:	0800f299 	.word	0x0800f299
 80020b8:	0800f2a1 	.word	0x0800f2a1
 80020bc:	0800f2c4 	.word	0x0800f2c4
 80020c0:	0800f208 	.word	0x0800f208

080020c4 <close_connection>:


int close_connection(int connect_id){
 80020c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020c6:	b0c1      	sub	sp, #260	@ 0x104
 80020c8:	4603      	mov	r3, r0
	uint8_t command[256];
	snprintf((char *)command, sizeof(command), "AT+QICLOSE=%d\r\n", connect_id);
 80020ca:	4a1c      	ldr	r2, [pc, #112]	@ (800213c <close_connection+0x78>)
	send_AT_command((char*)command);
	int count_check = 0;
	while(strstr((char *) response, CHECK_RESPONSE) == NULL){
 80020cc:	4e1c      	ldr	r6, [pc, #112]	@ (8002140 <close_connection+0x7c>)
 80020ce:	4d1d      	ldr	r5, [pc, #116]	@ (8002144 <close_connection+0x80>)
		receive_response("Check CLOSING to server\n");
 80020d0:	4f1d      	ldr	r7, [pc, #116]	@ (8002148 <close_connection+0x84>)
	snprintf((char *)command, sizeof(command), "AT+QICLOSE=%d\r\n", connect_id);
 80020d2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80020d6:	4668      	mov	r0, sp
 80020d8:	f008 fd24 	bl	800ab24 <sniprintf>
	send_AT_command((char*)command);
 80020dc:	4668      	mov	r0, sp
 80020de:	f7fe ff99 	bl	8001014 <send_AT_command>
	while(strstr((char *) response, CHECK_RESPONSE) == NULL){
 80020e2:	2406      	movs	r4, #6
 80020e4:	4631      	mov	r1, r6
 80020e6:	4628      	mov	r0, r5
 80020e8:	f008 fe68 	bl	800adbc <strstr>
 80020ec:	b178      	cbz	r0, 800210e <close_connection+0x4a>
			SIM_UART_ReInitializeRxDMA();
			return 0;
		}
		count_check++;
	}
	receive_response("Check CLOSING to server\n");
 80020ee:	4816      	ldr	r0, [pc, #88]	@ (8002148 <close_connection+0x84>)
 80020f0:	f7fe ffbc 	bl	800106c <receive_response>
	osDelay(100);
 80020f4:	2064      	movs	r0, #100	@ 0x64
 80020f6:	f005 fad3 	bl	80076a0 <osDelay>
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 80020fa:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 80020fe:	2100      	movs	r1, #0
 8002100:	4810      	ldr	r0, [pc, #64]	@ (8002144 <close_connection+0x80>)
 8002102:	f008 fe0b 	bl	800ad1c <memset>
	SIM_UART_ReInitializeRxDMA();
 8002106:	f7fe ff95 	bl	8001034 <SIM_UART_ReInitializeRxDMA>
	return 1;
 800210a:	2001      	movs	r0, #1
 800210c:	e010      	b.n	8002130 <close_connection+0x6c>
		receive_response("Check CLOSING to server\n");
 800210e:	4638      	mov	r0, r7
 8002110:	f7fe ffac 	bl	800106c <receive_response>
		if (strstr((char*)response, "ERROR") != NULL){
 8002114:	490d      	ldr	r1, [pc, #52]	@ (800214c <close_connection+0x88>)
 8002116:	4628      	mov	r0, r5
 8002118:	f008 fe50 	bl	800adbc <strstr>
 800211c:	b150      	cbz	r0, 8002134 <close_connection+0x70>
			memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 800211e:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8002122:	2100      	movs	r1, #0
 8002124:	4807      	ldr	r0, [pc, #28]	@ (8002144 <close_connection+0x80>)
 8002126:	f008 fdf9 	bl	800ad1c <memset>
			SIM_UART_ReInitializeRxDMA();
 800212a:	f7fe ff83 	bl	8001034 <SIM_UART_ReInitializeRxDMA>
			return 0;
 800212e:	2000      	movs	r0, #0
}
 8002130:	b041      	add	sp, #260	@ 0x104
 8002132:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if(count_check >=5){
 8002134:	3c01      	subs	r4, #1
 8002136:	d1d5      	bne.n	80020e4 <close_connection+0x20>
 8002138:	e7f1      	b.n	800211e <close_connection+0x5a>
 800213a:	bf00      	nop
 800213c:	0800f2e5 	.word	0x0800f2e5
 8002140:	0800edae 	.word	0x0800edae
 8002144:	20000c80 	.word	0x20000c80
 8002148:	0800f2f5 	.word	0x0800f2f5
 800214c:	0800f085 	.word	0x0800f085

08002150 <extract_time_CCLK>:


int extract_time_CCLK(uint8_t* message){
 8002150:	b510      	push	{r4, lr}
 8002152:	b0ae      	sub	sp, #184	@ 0xb8
	int year, month, day, hour, minute, second, timezone;
	uint8_t output_buffer[128];

	sscanf((char*) message, "AT+CCLK?\r\n+CCLK: \"%2d/%2d/%2d,%2d:%2d:%2d%2d\"",
 8002154:	ab0d      	add	r3, sp, #52	@ 0x34
 8002156:	9304      	str	r3, [sp, #16]
 8002158:	ab0c      	add	r3, sp, #48	@ 0x30
 800215a:	9303      	str	r3, [sp, #12]
 800215c:	ab0b      	add	r3, sp, #44	@ 0x2c
 800215e:	9302      	str	r3, [sp, #8]
 8002160:	ab0a      	add	r3, sp, #40	@ 0x28
 8002162:	9301      	str	r3, [sp, #4]
 8002164:	ab09      	add	r3, sp, #36	@ 0x24
 8002166:	9300      	str	r3, [sp, #0]
 8002168:	aa07      	add	r2, sp, #28
 800216a:	ab08      	add	r3, sp, #32
 800216c:	4925      	ldr	r1, [pc, #148]	@ (8002204 <extract_time_CCLK+0xb4>)
 800216e:	f008 fd2d 	bl	800abcc <siscanf>
						&year, &month, &day, &hour, &minute, &second, &timezone);
	hour += 1;
 8002172:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8002174:	1c5a      	adds	r2, r3, #1
	if (hour >= 24) {
 8002176:	2a17      	cmp	r2, #23
		hour -= 24;
 8002178:	bfc3      	ittte	gt
 800217a:	3b17      	subgt	r3, #23
 800217c:	930a      	strgt	r3, [sp, #40]	@ 0x28
		day += 1;
 800217e:	9b09      	ldrgt	r3, [sp, #36]	@ 0x24
	hour += 1;
 8002180:	920a      	strle	r2, [sp, #40]	@ 0x28
		day += 1;
 8002182:	bfc4      	itt	gt
 8002184:	3301      	addgt	r3, #1
 8002186:	9309      	strgt	r3, [sp, #36]	@ 0x24
		// Simplified example: Add code here to handle month/day overflow as needed
	}
	if(year < 24) return 0;
 8002188:	9b07      	ldr	r3, [sp, #28]
 800218a:	2b17      	cmp	r3, #23
 800218c:	dd37      	ble.n	80021fe <extract_time_CCLK+0xae>
	rmc_jt.date.Yr = year;
 800218e:	4c1e      	ldr	r4, [pc, #120]	@ (8002208 <extract_time_CCLK+0xb8>)
	rmc_jt.date.Mon = month;
	rmc_jt.date.Day = day;
	rmc_jt.tim.hour = hour;
 8002190:	980a      	ldr	r0, [sp, #40]	@ 0x28
	rmc_jt.tim.min = minute;
 8002192:	990b      	ldr	r1, [sp, #44]	@ 0x2c
	rmc_jt.tim.sec = second;
 8002194:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
	rmc_jt.date.Yr = year;
 8002196:	61a3      	str	r3, [r4, #24]
	rmc_jt.date.Mon = month;
 8002198:	9b08      	ldr	r3, [sp, #32]
 800219a:	6163      	str	r3, [r4, #20]
	rmc_jt.tim.hour = hour;
 800219c:	6020      	str	r0, [r4, #0]
	rmc_jt.date.Day = day;
 800219e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
	rmc_jt.tim.min = minute;
 80021a0:	6061      	str	r1, [r4, #4]
	rmc_jt.tim.sec = second;
 80021a2:	60a2      	str	r2, [r4, #8]
	set_time(hour, minute, second);
 80021a4:	b2c9      	uxtb	r1, r1
 80021a6:	b2d2      	uxtb	r2, r2
 80021a8:	b2c0      	uxtb	r0, r0
	rmc_jt.date.Day = day;
 80021aa:	6123      	str	r3, [r4, #16]
	set_time(hour, minute, second);
 80021ac:	f000 fe06 	bl	8002dbc <set_time>
	set_date(year, month, day);
 80021b0:	f89d 2024 	ldrb.w	r2, [sp, #36]	@ 0x24
 80021b4:	f89d 1020 	ldrb.w	r1, [sp, #32]
 80021b8:	f89d 001c 	ldrb.w	r0, [sp, #28]
 80021bc:	f000 fe1c 	bl	8002df8 <set_date>
	snprintf((char*)output_buffer, 128, "Adjusted time to GMT+8: 20%02d/%02d/%02d, %02d:%02d:%02d\n", rmc_jt.date.Yr, rmc_jt.date.Mon, rmc_jt.date.Day, rmc_jt.tim.hour, rmc_jt.tim.min, rmc_jt.tim.sec);
 80021c0:	68a3      	ldr	r3, [r4, #8]
 80021c2:	9304      	str	r3, [sp, #16]
 80021c4:	6863      	ldr	r3, [r4, #4]
 80021c6:	9303      	str	r3, [sp, #12]
 80021c8:	6823      	ldr	r3, [r4, #0]
 80021ca:	9302      	str	r3, [sp, #8]
 80021cc:	6923      	ldr	r3, [r4, #16]
 80021ce:	9301      	str	r3, [sp, #4]
 80021d0:	6963      	ldr	r3, [r4, #20]
 80021d2:	9300      	str	r3, [sp, #0]
 80021d4:	69a3      	ldr	r3, [r4, #24]
 80021d6:	4a0d      	ldr	r2, [pc, #52]	@ (800220c <extract_time_CCLK+0xbc>)
 80021d8:	2180      	movs	r1, #128	@ 0x80
 80021da:	a80e      	add	r0, sp, #56	@ 0x38
 80021dc:	f008 fca2 	bl	800ab24 <sniprintf>
	uart_transmit_string(&huart1, (uint8_t*) "RTC Time: ");
 80021e0:	490b      	ldr	r1, [pc, #44]	@ (8002210 <extract_time_CCLK+0xc0>)
 80021e2:	480c      	ldr	r0, [pc, #48]	@ (8002214 <extract_time_CCLK+0xc4>)
 80021e4:	f002 f9c6 	bl	8004574 <uart_transmit_string>
	uart_transmit_string(&huart1, (uint8_t*) "\n");
 80021e8:	490b      	ldr	r1, [pc, #44]	@ (8002218 <extract_time_CCLK+0xc8>)
 80021ea:	480a      	ldr	r0, [pc, #40]	@ (8002214 <extract_time_CCLK+0xc4>)
 80021ec:	f002 f9c2 	bl	8004574 <uart_transmit_string>
	uart_transmit_string(&huart1, output_buffer);
 80021f0:	4808      	ldr	r0, [pc, #32]	@ (8002214 <extract_time_CCLK+0xc4>)
 80021f2:	a90e      	add	r1, sp, #56	@ 0x38
 80021f4:	f002 f9be 	bl	8004574 <uart_transmit_string>
	return 1;
 80021f8:	2001      	movs	r0, #1
}
 80021fa:	b02e      	add	sp, #184	@ 0xb8
 80021fc:	bd10      	pop	{r4, pc}
	if(year < 24) return 0;
 80021fe:	2000      	movs	r0, #0
 8002200:	e7fb      	b.n	80021fa <extract_time_CCLK+0xaa>
 8002202:	bf00      	nop
 8002204:	0800f30e 	.word	0x0800f30e
 8002208:	20000be8 	.word	0x20000be8
 800220c:	0800ed05 	.word	0x0800ed05
 8002210:	0800ed3f 	.word	0x0800ed3f
 8002214:	20001250 	.word	0x20001250
 8002218:	0800fa08 	.word	0x0800fa08

0800221c <getCurrentTime>:


int getCurrentTime(){
 800221c:	b570      	push	{r4, r5, r6, lr}
	int count_check = 0;
	send_AT_command("AT+CCLK?\r\n");
 800221e:	4818      	ldr	r0, [pc, #96]	@ (8002280 <getCurrentTime+0x64>)
	while(strstr((char *) response, CHECK_RESPONSE) == NULL){
 8002220:	4d18      	ldr	r5, [pc, #96]	@ (8002284 <getCurrentTime+0x68>)
			count_check = 0;
			memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
			SIM_UART_ReInitializeRxDMA();
			return 0;
		}
		receive_response("Get time\n");
 8002222:	4e19      	ldr	r6, [pc, #100]	@ (8002288 <getCurrentTime+0x6c>)
	send_AT_command("AT+CCLK?\r\n");
 8002224:	f7fe fef6 	bl	8001014 <send_AT_command>
	while(strstr((char *) response, CHECK_RESPONSE) == NULL){
 8002228:	2404      	movs	r4, #4
 800222a:	4818      	ldr	r0, [pc, #96]	@ (800228c <getCurrentTime+0x70>)
 800222c:	4629      	mov	r1, r5
 800222e:	f008 fdc5 	bl	800adbc <strstr>
 8002232:	b190      	cbz	r0, 800225a <getCurrentTime+0x3e>
		osDelay(100);
		count_check++;
	}
	receive_response("Get time\n");
 8002234:	4814      	ldr	r0, [pc, #80]	@ (8002288 <getCurrentTime+0x6c>)
 8002236:	f7fe ff19 	bl	800106c <receive_response>
	int result_extract = extract_time_CCLK(response);
 800223a:	4814      	ldr	r0, [pc, #80]	@ (800228c <getCurrentTime+0x70>)
 800223c:	f7ff ff88 	bl	8002150 <extract_time_CCLK>
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8002240:	f44f 72c0 	mov.w	r2, #384	@ 0x180
	int result_extract = extract_time_CCLK(response);
 8002244:	4604      	mov	r4, r0
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8002246:	2100      	movs	r1, #0
 8002248:	4810      	ldr	r0, [pc, #64]	@ (800228c <getCurrentTime+0x70>)
 800224a:	f008 fd67 	bl	800ad1c <memset>
	SIM_UART_ReInitializeRxDMA();
 800224e:	f7fe fef1 	bl	8001034 <SIM_UART_ReInitializeRxDMA>
	if(result_extract)
 8002252:	1e20      	subs	r0, r4, #0
 8002254:	bf18      	it	ne
 8002256:	2001      	movne	r0, #1
 8002258:	e00a      	b.n	8002270 <getCurrentTime+0x54>
		if(count_check >= 3 ){
 800225a:	3c01      	subs	r4, #1
 800225c:	d109      	bne.n	8002272 <getCurrentTime+0x56>
			memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 800225e:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8002262:	4621      	mov	r1, r4
 8002264:	4809      	ldr	r0, [pc, #36]	@ (800228c <getCurrentTime+0x70>)
 8002266:	f008 fd59 	bl	800ad1c <memset>
			SIM_UART_ReInitializeRxDMA();
 800226a:	f7fe fee3 	bl	8001034 <SIM_UART_ReInitializeRxDMA>
			return 0;
 800226e:	4620      	mov	r0, r4
		return 1;
	else return 0;
}
 8002270:	bd70      	pop	{r4, r5, r6, pc}
		receive_response("Get time\n");
 8002272:	4630      	mov	r0, r6
 8002274:	f7fe fefa 	bl	800106c <receive_response>
		osDelay(100);
 8002278:	2064      	movs	r0, #100	@ 0x64
 800227a:	f005 fa11 	bl	80076a0 <osDelay>
		count_check++;
 800227e:	e7d4      	b.n	800222a <getCurrentTime+0xe>
 8002280:	0800f33c 	.word	0x0800f33c
 8002284:	0800edae 	.word	0x0800edae
 8002288:	0800f347 	.word	0x0800f347
 800228c:	20000c80 	.word	0x20000c80

08002290 <parseRMCString>:

void parseRMCString(uint8_t *str, RMCSTRUCT *rmc) {
 8002290:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002294:	b0d4      	sub	sp, #336	@ 0x150
 8002296:	460c      	mov	r4, r1
    // Cast the uint8_t* to char* for string operations
    char buffer[256];
    strncpy(buffer, (char*)str, sizeof(buffer));
 8002298:	22ff      	movs	r2, #255	@ 0xff
 800229a:	4601      	mov	r1, r0
 800229c:	a814      	add	r0, sp, #80	@ 0x50
 800229e:	f008 fd64 	bl	800ad6a <strncpy>
    buffer[sizeof(buffer) - 1] = '\0'; // Ensure null termination
 80022a2:	2500      	movs	r5, #0

    // Remove the last parameter by locating the last ';'
    char *lastSemicolon = strrchr(buffer, ';');
 80022a4:	213b      	movs	r1, #59	@ 0x3b
 80022a6:	a814      	add	r0, sp, #80	@ 0x50
    buffer[sizeof(buffer) - 1] = '\0'; // Ensure null termination
 80022a8:	f88d 514f 	strb.w	r5, [sp, #335]	@ 0x14f
    char *lastSemicolon = strrchr(buffer, ';');
 80022ac:	f008 fd70 	bl	800ad90 <strrchr>
    if (lastSemicolon) {
 80022b0:	b100      	cbz	r0, 80022b4 <parseRMCString+0x24>
        *lastSemicolon = '\0'; // Terminate the string here to exclude the last parameter
 80022b2:	7005      	strb	r5, [r0, #0]

    // Parse the string (now excluding the last parameter)
    char validStr[10];
   // unsigned long long epoch;
    int epoch0, epoch1, epoch2;
    sscanf(buffer, "%d;%d;%d;%d;%d;%d;%lf;%c;%lf;%c;%f;%f;%9[^;];%04d%04d%02d",
 80022b4:	f104 032c 	add.w	r3, r4, #44	@ 0x2c
 80022b8:	9309      	str	r3, [sp, #36]	@ 0x24
 80022ba:	f104 0328 	add.w	r3, r4, #40	@ 0x28
 80022be:	9308      	str	r3, [sp, #32]
 80022c0:	f104 0350 	add.w	r3, r4, #80	@ 0x50
 80022c4:	9307      	str	r3, [sp, #28]
 80022c6:	f104 0348 	add.w	r3, r4, #72	@ 0x48
 80022ca:	9306      	str	r3, [sp, #24]
 80022cc:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 80022d0:	9305      	str	r3, [sp, #20]
 80022d2:	f104 0338 	add.w	r3, r4, #56	@ 0x38
 80022d6:	9304      	str	r3, [sp, #16]
 80022d8:	f104 0308 	add.w	r3, r4, #8
 80022dc:	9303      	str	r3, [sp, #12]
 80022de:	1d23      	adds	r3, r4, #4
 80022e0:	e9cd 4301 	strd	r4, r3, [sp, #4]
 80022e4:	f10d 0844 	add.w	r8, sp, #68	@ 0x44
 80022e8:	f104 0310 	add.w	r3, r4, #16
 80022ec:	ad10      	add	r5, sp, #64	@ 0x40
 80022ee:	ae0f      	add	r6, sp, #60	@ 0x3c
 80022f0:	af0e      	add	r7, sp, #56	@ 0x38
 80022f2:	f104 0218 	add.w	r2, r4, #24
 80022f6:	9300      	str	r3, [sp, #0]
 80022f8:	4911      	ldr	r1, [pc, #68]	@ (8002340 <parseRMCString+0xb0>)
 80022fa:	950d      	str	r5, [sp, #52]	@ 0x34
 80022fc:	f104 0314 	add.w	r3, r4, #20
 8002300:	960c      	str	r6, [sp, #48]	@ 0x30
 8002302:	970b      	str	r7, [sp, #44]	@ 0x2c
 8002304:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8002308:	a814      	add	r0, sp, #80	@ 0x50
 800230a:	f008 fc5f 	bl	800abcc <siscanf>
		   &epoch1,
		   &epoch2// Epoch time
    );

    // Set validity as an integer (1 for "Valid", 0 for others)
    rmc->isValid = (strcmp(validStr, "Valid") == 0) ? 1 : 0;
 800230e:	490d      	ldr	r1, [pc, #52]	@ (8002344 <parseRMCString+0xb4>)
 8002310:	4640      	mov	r0, r8
 8002312:	f7fd ff5d 	bl	80001d0 <strcmp>

    // Store the epoch value
    rmc->date.epoch = ((uint64_t)epoch0 << 32) | ((uint64_t)epoch1 << 16) | (uint64_t)epoch2;
 8002316:	e9dd 320e 	ldrd	r3, r2, [sp, #56]	@ 0x38
 800231a:	17d1      	asrs	r1, r2, #31
 800231c:	0409      	lsls	r1, r1, #16
 800231e:	ea41 4112 	orr.w	r1, r1, r2, lsr #16
 8002322:	430b      	orrs	r3, r1
 8002324:	9910      	ldr	r1, [sp, #64]	@ 0x40
    rmc->isValid = (strcmp(validStr, "Valid") == 0) ? 1 : 0;
 8002326:	fab0 f080 	clz	r0, r0
 800232a:	0940      	lsrs	r0, r0, #5
    rmc->date.epoch = ((uint64_t)epoch0 << 32) | ((uint64_t)epoch1 << 16) | (uint64_t)epoch2;
 800232c:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 8002330:	ea43 73e1 	orr.w	r3, r3, r1, asr #31
 8002334:	e9c4 2308 	strd	r2, r3, [r4, #32]
    rmc->isValid = (strcmp(validStr, "Valid") == 0) ? 1 : 0;
 8002338:	6320      	str	r0, [r4, #48]	@ 0x30
}
 800233a:	b054      	add	sp, #336	@ 0x150
 800233c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002340:	0800f351 	.word	0x0800f351
 8002344:	0800f38b 	.word	0x0800f38b

08002348 <readFlash>:

RMCSTRUCT readFlash(uint32_t addr){
 8002348:	b5f0      	push	{r4, r5, r6, r7, lr}
 800234a:	460d      	mov	r5, r1
 800234c:	b0ab      	sub	sp, #172	@ 0xac
	char addr_out[10];
	uart_transmit_string(&huart1, (uint8_t*)"Address received from FLASH: \n");
 800234e:	4940      	ldr	r1, [pc, #256]	@ (8002450 <readFlash+0x108>)
RMCSTRUCT readFlash(uint32_t addr){
 8002350:	4604      	mov	r4, r0
	uart_transmit_string(&huart1, (uint8_t*)"Address received from FLASH: \n");
 8002352:	4840      	ldr	r0, [pc, #256]	@ (8002454 <readFlash+0x10c>)
 8002354:	f002 f90e 	bl	8004574 <uart_transmit_string>
	sprintf(addr_out, "%08lx", (addr));
 8002358:	493f      	ldr	r1, [pc, #252]	@ (8002458 <readFlash+0x110>)
 800235a:	462a      	mov	r2, r5
 800235c:	a806      	add	r0, sp, #24
 800235e:	f008 fc15 	bl	800ab8c <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*) addr_out, 8, 1000);
 8002362:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002366:	2208      	movs	r2, #8
 8002368:	a906      	add	r1, sp, #24
 800236a:	483a      	ldr	r0, [pc, #232]	@ (8002454 <readFlash+0x10c>)
 800236c:	f005 f828 	bl	80073c0 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, (uint8_t*)"\r\n", 1, 1000);
 8002370:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002374:	4939      	ldr	r1, [pc, #228]	@ (800245c <readFlash+0x114>)
 8002376:	4837      	ldr	r0, [pc, #220]	@ (8002454 <readFlash+0x10c>)
 8002378:	2201      	movs	r2, #1
 800237a:	f005 f821 	bl	80073c0 <HAL_UART_Transmit>
	W25_Reset();
 800237e:	f001 f8c2 	bl	8003506 <W25_Reset>
	W25_ReadData(addr, flashBufferMailReceived, 128);
 8002382:	2280      	movs	r2, #128	@ 0x80
 8002384:	4936      	ldr	r1, [pc, #216]	@ (8002460 <readFlash+0x118>)
 8002386:	4628      	mov	r0, r5
 8002388:	f001 f9de 	bl	8003748 <W25_ReadData>
	char spi_flash_data_intro[] = "Flash DATA at CONTROLLING LED received: ";
 800238c:	4b35      	ldr	r3, [pc, #212]	@ (8002464 <readFlash+0x11c>)
 800238e:	aa09      	add	r2, sp, #36	@ 0x24
 8002390:	f103 0728 	add.w	r7, r3, #40	@ 0x28
 8002394:	4616      	mov	r6, r2
 8002396:	6818      	ldr	r0, [r3, #0]
 8002398:	6859      	ldr	r1, [r3, #4]
 800239a:	4615      	mov	r5, r2
 800239c:	c503      	stmia	r5!, {r0, r1}
 800239e:	3308      	adds	r3, #8
 80023a0:	42bb      	cmp	r3, r7
 80023a2:	462a      	mov	r2, r5
 80023a4:	d1f7      	bne.n	8002396 <readFlash+0x4e>
 80023a6:	781b      	ldrb	r3, [r3, #0]
 80023a8:	702b      	strb	r3, [r5, #0]
	HAL_UART_Transmit(&huart1, (uint8_t*) spi_flash_data_intro, strlen(spi_flash_data_intro), 1000);
 80023aa:	4630      	mov	r0, r6
 80023ac:	f7fd ff70 	bl	8000290 <strlen>
 80023b0:	4631      	mov	r1, r6
 80023b2:	b282      	uxth	r2, r0
 80023b4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80023b8:	4826      	ldr	r0, [pc, #152]	@ (8002454 <readFlash+0x10c>)
 80023ba:	f005 f801 	bl	80073c0 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, flashBufferMailReceived, sizeof(flashBufferMailReceived), 1000);
 80023be:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80023c2:	2280      	movs	r2, #128	@ 0x80
 80023c4:	4926      	ldr	r1, [pc, #152]	@ (8002460 <readFlash+0x118>)
 80023c6:	4823      	ldr	r0, [pc, #140]	@ (8002454 <readFlash+0x10c>)
 80023c8:	f004 fffa 	bl	80073c0 <HAL_UART_Transmit>

	RMCSTRUCT rmc;
	parseRMCString(flashBufferMailReceived, &rmc);
 80023cc:	a914      	add	r1, sp, #80	@ 0x50
 80023ce:	4824      	ldr	r0, [pc, #144]	@ (8002460 <readFlash+0x118>)
 80023d0:	f7ff ff5e 	bl	8002290 <parseRMCString>

	Debug_printf("Date: %02d-%02d-%02d\n", rmc.date.Yr, rmc.date.Mon, rmc.date.Day);
 80023d4:	e9dd 3218 	ldrd	r3, r2, [sp, #96]	@ 0x60
 80023d8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80023da:	4823      	ldr	r0, [pc, #140]	@ (8002468 <readFlash+0x120>)
 80023dc:	f002 f8da 	bl	8004594 <Debug_printf>

	Debug_printf("Time: %02d:%02d:%02d\n", rmc.tim.hour, rmc.tim.min, rmc.tim.sec);
 80023e0:	e9dd 2315 	ldrd	r2, r3, [sp, #84]	@ 0x54
 80023e4:	9914      	ldr	r1, [sp, #80]	@ 0x50
 80023e6:	4821      	ldr	r0, [pc, #132]	@ (800246c <readFlash+0x124>)
 80023e8:	f002 f8d4 	bl	8004594 <Debug_printf>

	Debug_printf("Location: %.6f %c, %.6f %c\n", rmc.lcation.latitude, rmc.lcation.NS,
 80023ec:	f89d 30a0 	ldrb.w	r3, [sp, #160]	@ 0xa0
 80023f0:	9304      	str	r3, [sp, #16]
 80023f2:	e9dd 2326 	ldrd	r2, r3, [sp, #152]	@ 0x98
 80023f6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80023fa:	f89d 3090 	ldrb.w	r3, [sp, #144]	@ 0x90
 80023fe:	9300      	str	r3, [sp, #0]
 8002400:	481b      	ldr	r0, [pc, #108]	@ (8002470 <readFlash+0x128>)
 8002402:	e9dd 2322 	ldrd	r2, r3, [sp, #136]	@ 0x88
 8002406:	f002 f8c5 	bl	8004594 <Debug_printf>
		   rmc.lcation.longitude, rmc.lcation.EW);

	Debug_printf("Speed: %.2f\n", rmc.speed);
 800240a:	981e      	ldr	r0, [sp, #120]	@ 0x78
 800240c:	f7fe f8ac 	bl	8000568 <__aeabi_f2d>
 8002410:	4602      	mov	r2, r0
 8002412:	460b      	mov	r3, r1
 8002414:	4817      	ldr	r0, [pc, #92]	@ (8002474 <readFlash+0x12c>)
 8002416:	f002 f8bd 	bl	8004594 <Debug_printf>

	Debug_printf("Course: %.2f\n", rmc.course);
 800241a:	981f      	ldr	r0, [sp, #124]	@ 0x7c
 800241c:	f7fe f8a4 	bl	8000568 <__aeabi_f2d>
 8002420:	4602      	mov	r2, r0
 8002422:	460b      	mov	r3, r1
 8002424:	4814      	ldr	r0, [pc, #80]	@ (8002478 <readFlash+0x130>)
 8002426:	f002 f8b5 	bl	8004594 <Debug_printf>

	Debug_printf("Validity: %s\n", rmc.isValid ? "Valid" : "Invalid");
 800242a:	4b14      	ldr	r3, [pc, #80]	@ (800247c <readFlash+0x134>)
 800242c:	9920      	ldr	r1, [sp, #128]	@ 0x80
 800242e:	4a14      	ldr	r2, [pc, #80]	@ (8002480 <readFlash+0x138>)
 8002430:	4814      	ldr	r0, [pc, #80]	@ (8002484 <readFlash+0x13c>)
 8002432:	2900      	cmp	r1, #0
 8002434:	bf0c      	ite	eq
 8002436:	4611      	moveq	r1, r2
 8002438:	4619      	movne	r1, r3
 800243a:	f002 f8ab 	bl	8004594 <Debug_printf>

	return rmc;
 800243e:	2258      	movs	r2, #88	@ 0x58
 8002440:	a914      	add	r1, sp, #80	@ 0x50
 8002442:	4620      	mov	r0, r4
 8002444:	f009 fac3 	bl	800b9ce <memcpy>
}
 8002448:	4620      	mov	r0, r4
 800244a:	b02b      	add	sp, #172	@ 0xac
 800244c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800244e:	bf00      	nop
 8002450:	0800f399 	.word	0x0800f399
 8002454:	20001250 	.word	0x20001250
 8002458:	0800fad4 	.word	0x0800fad4
 800245c:	0800f4bb 	.word	0x0800f4bb
 8002460:	20000b5c 	.word	0x20000b5c
 8002464:	0800f429 	.word	0x0800f429
 8002468:	0800f3b8 	.word	0x0800f3b8
 800246c:	0800f3ce 	.word	0x0800f3ce
 8002470:	0800f3e4 	.word	0x0800f3e4
 8002474:	0800f400 	.word	0x0800f400
 8002478:	0800f40d 	.word	0x0800f40d
 800247c:	0800f38b 	.word	0x0800f38b
 8002480:	0800f391 	.word	0x0800f391
 8002484:	0800f41b 	.word	0x0800f41b

08002488 <receiveRMCDataWithAddrGSM>:

void receiveRMCDataWithAddrGSM(){
 8002488:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t output_buffer[70];
	GSM_MAIL_STRUCT *receivedData;
	int is_exist_rmc = 0;
	if(is_using_flash == 0){
 800248a:	4b89      	ldr	r3, [pc, #548]	@ (80026b0 <receiveRMCDataWithAddrGSM+0x228>)
 800248c:	4e89      	ldr	r6, [pc, #548]	@ (80026b4 <receiveRMCDataWithAddrGSM+0x22c>)
 800248e:	681d      	ldr	r5, [r3, #0]
void receiveRMCDataWithAddrGSM(){
 8002490:	b0c7      	sub	sp, #284	@ 0x11c
	if(is_using_flash == 0){
 8002492:	2d00      	cmp	r5, #0
 8002494:	f040 80c0 	bne.w	8002618 <receiveRMCDataWithAddrGSM+0x190>
		uart_transmit_string(&huart1, (uint8_t*)"\\Inside Receiving Data at GSM\n\n");
		osEvent evt = osMailGet(RMC_MailQGSMId, 3000); // Wait for mail
 8002498:	4f87      	ldr	r7, [pc, #540]	@ (80026b8 <receiveRMCDataWithAddrGSM+0x230>)
		uart_transmit_string(&huart1, (uint8_t*)"\\Inside Receiving Data at GSM\n\n");
 800249a:	4988      	ldr	r1, [pc, #544]	@ (80026bc <receiveRMCDataWithAddrGSM+0x234>)
 800249c:	4888      	ldr	r0, [pc, #544]	@ (80026c0 <receiveRMCDataWithAddrGSM+0x238>)
 800249e:	f002 f869 	bl	8004574 <uart_transmit_string>
		osEvent evt = osMailGet(RMC_MailQGSMId, 3000); // Wait for mail
 80024a2:	6839      	ldr	r1, [r7, #0]
 80024a4:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 80024a8:	a834      	add	r0, sp, #208	@ 0xd0
 80024aa:	f005 f9f5 	bl	8007898 <osMailGet>
		if(evt.status == osEventMail){
 80024ae:	9b34      	ldr	r3, [sp, #208]	@ 0xd0
 80024b0:	2b20      	cmp	r3, #32
 80024b2:	f040 80ad 	bne.w	8002610 <receiveRMCDataWithAddrGSM+0x188>
			uart_transmit_string(&huart1, (uint8_t*)"\n\nReceived  ADDRESS Data at GSM: \n");
 80024b6:	4983      	ldr	r1, [pc, #524]	@ (80026c4 <receiveRMCDataWithAddrGSM+0x23c>)
 80024b8:	4881      	ldr	r0, [pc, #516]	@ (80026c0 <receiveRMCDataWithAddrGSM+0x238>)
 80024ba:	f002 f85b 	bl	8004574 <uart_transmit_string>
			uart_transmit_string(&huart1, (uint8_t*)"Address received from MAIL QUEUE: \n");
 80024be:	4982      	ldr	r1, [pc, #520]	@ (80026c8 <receiveRMCDataWithAddrGSM+0x240>)
 80024c0:	487f      	ldr	r0, [pc, #508]	@ (80026c0 <receiveRMCDataWithAddrGSM+0x238>)
 80024c2:	f002 f857 	bl	8004574 <uart_transmit_string>
			receivedData = (GSM_MAIL_STRUCT *)evt.value.p;
 80024c6:	9c35      	ldr	r4, [sp, #212]	@ 0xd4
			char addr_out[11];
			sprintf(addr_out, "%08lx", receivedData->address);
 80024c8:	4980      	ldr	r1, [pc, #512]	@ (80026cc <receiveRMCDataWithAddrGSM+0x244>)
 80024ca:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 80024cc:	a81f      	add	r0, sp, #124	@ 0x7c
 80024ce:	f008 fb5d 	bl	800ab8c <siprintf>
			HAL_UART_Transmit(&huart1, (uint8_t*) addr_out, 10, 1000);
 80024d2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80024d6:	220a      	movs	r2, #10
 80024d8:	a91f      	add	r1, sp, #124	@ 0x7c
 80024da:	4879      	ldr	r0, [pc, #484]	@ (80026c0 <receiveRMCDataWithAddrGSM+0x238>)
 80024dc:	f004 ff70 	bl	80073c0 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart1, (uint8_t*)"\r\n\r\n", 1, 1000);
 80024e0:	497b      	ldr	r1, [pc, #492]	@ (80026d0 <receiveRMCDataWithAddrGSM+0x248>)
 80024e2:	4877      	ldr	r0, [pc, #476]	@ (80026c0 <receiveRMCDataWithAddrGSM+0x238>)
 80024e4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80024e8:	2201      	movs	r2, #1
 80024ea:	f004 ff69 	bl	80073c0 <HAL_UART_Transmit>

			snprintf((char *)output_buffer, sizeof(output_buffer), "\n\nTime SENDING TO SERVER at GSM: %d:%d:%d\n", receivedData->rmc.tim.hour, receivedData->rmc.tim.min, receivedData->rmc.tim.sec);
 80024ee:	68a3      	ldr	r3, [r4, #8]
 80024f0:	9301      	str	r3, [sp, #4]
 80024f2:	6863      	ldr	r3, [r4, #4]
 80024f4:	9300      	str	r3, [sp, #0]
 80024f6:	6823      	ldr	r3, [r4, #0]
 80024f8:	4a76      	ldr	r2, [pc, #472]	@ (80026d4 <receiveRMCDataWithAddrGSM+0x24c>)
 80024fa:	2146      	movs	r1, #70	@ 0x46
 80024fc:	a822      	add	r0, sp, #136	@ 0x88
 80024fe:	f008 fb11 	bl	800ab24 <sniprintf>
			uart_transmit_string(&huart1, output_buffer);
 8002502:	486f      	ldr	r0, [pc, #444]	@ (80026c0 <receiveRMCDataWithAddrGSM+0x238>)
 8002504:	a922      	add	r1, sp, #136	@ 0x88
 8002506:	f002 f835 	bl	8004574 <uart_transmit_string>

			snprintf((char *)output_buffer, sizeof(output_buffer), "Date SENDING TO SERVER at GSM: %d/%d/%d\n", receivedData->rmc.date.Day, receivedData->rmc.date.Mon, receivedData->rmc.date.Yr);
 800250a:	69a3      	ldr	r3, [r4, #24]
 800250c:	9301      	str	r3, [sp, #4]
 800250e:	6963      	ldr	r3, [r4, #20]
 8002510:	9300      	str	r3, [sp, #0]
 8002512:	6923      	ldr	r3, [r4, #16]
 8002514:	4a70      	ldr	r2, [pc, #448]	@ (80026d8 <receiveRMCDataWithAddrGSM+0x250>)
 8002516:	2146      	movs	r1, #70	@ 0x46
 8002518:	a822      	add	r0, sp, #136	@ 0x88
 800251a:	f008 fb03 	bl	800ab24 <sniprintf>
			uart_transmit_string(&huart1, output_buffer);
 800251e:	4868      	ldr	r0, [pc, #416]	@ (80026c0 <receiveRMCDataWithAddrGSM+0x238>)
 8002520:	a922      	add	r1, sp, #136	@ 0x88
 8002522:	f002 f827 	bl	8004574 <uart_transmit_string>
			snprintf((char *)output_buffer, sizeof(output_buffer), "Location SENDING TO SERVER at GSM: %.6f %c, %.6f %c\n", receivedData->rmc.lcation.latitude, receivedData->rmc.lcation.NS, receivedData->rmc.lcation.longitude, receivedData->rmc.lcation.EW);
 8002526:	f894 3050 	ldrb.w	r3, [r4, #80]	@ 0x50
 800252a:	9306      	str	r3, [sp, #24]
 800252c:	e9d4 2312 	ldrd	r2, r3, [r4, #72]	@ 0x48
 8002530:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8002534:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 8002538:	9302      	str	r3, [sp, #8]
 800253a:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	@ 0x38
 800253e:	2146      	movs	r1, #70	@ 0x46
 8002540:	e9cd 2300 	strd	r2, r3, [sp]
 8002544:	a822      	add	r0, sp, #136	@ 0x88
 8002546:	4a65      	ldr	r2, [pc, #404]	@ (80026dc <receiveRMCDataWithAddrGSM+0x254>)
 8002548:	f008 faec 	bl	800ab24 <sniprintf>
			uart_transmit_string(&huart1, output_buffer);
 800254c:	485c      	ldr	r0, [pc, #368]	@ (80026c0 <receiveRMCDataWithAddrGSM+0x238>)
 800254e:	a922      	add	r1, sp, #136	@ 0x88
 8002550:	f002 f810 	bl	8004574 <uart_transmit_string>

			snprintf((char *)output_buffer, sizeof(output_buffer),"Speed SENDING TO SERVER at GSM: %.2f, Course: %.2f, Valid: %d\n", receivedData->rmc.speed, receivedData->rmc.course, receivedData->rmc.isValid);
 8002554:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8002556:	9304      	str	r3, [sp, #16]
 8002558:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 800255a:	f7fe f805 	bl	8000568 <__aeabi_f2d>
 800255e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002562:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8002564:	f7fe f800 	bl	8000568 <__aeabi_f2d>
 8002568:	4a5d      	ldr	r2, [pc, #372]	@ (80026e0 <receiveRMCDataWithAddrGSM+0x258>)
 800256a:	e9cd 0100 	strd	r0, r1, [sp]
 800256e:	2146      	movs	r1, #70	@ 0x46
 8002570:	a822      	add	r0, sp, #136	@ 0x88
 8002572:	f008 fad7 	bl	800ab24 <sniprintf>
			uart_transmit_string(&huart1, output_buffer);
 8002576:	4852      	ldr	r0, [pc, #328]	@ (80026c0 <receiveRMCDataWithAddrGSM+0x238>)
 8002578:	a922      	add	r1, sp, #136	@ 0x88
 800257a:	f001 fffb 	bl	8004574 <uart_transmit_string>
			osMailFree(RMC_MailQGSMId, receivedData);
 800257e:	4621      	mov	r1, r4
 8002580:	6838      	ldr	r0, [r7, #0]
 8002582:	f005 f9c2 	bl	800790a <osMailFree>
			Debug_printf("Saving data to variable to send to the server\n");
 8002586:	4857      	ldr	r0, [pc, #348]	@ (80026e4 <receiveRMCDataWithAddrGSM+0x25c>)
 8002588:	f002 f804 	bl	8004594 <Debug_printf>
			current_addr_gsm = receivedData->address;
 800258c:	4b56      	ldr	r3, [pc, #344]	@ (80026e8 <receiveRMCDataWithAddrGSM+0x260>)
 800258e:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 8002590:	601a      	str	r2, [r3, #0]
			is_exist_rmc = 1;
			if(is_ready_to_send == 0 && mode == MAIL){
 8002592:	4a56      	ldr	r2, [pc, #344]	@ (80026ec <receiveRMCDataWithAddrGSM+0x264>)
 8002594:	6831      	ldr	r1, [r6, #0]
 8002596:	6812      	ldr	r2, [r2, #0]
 8002598:	430a      	orrs	r2, r1
 800259a:	d108      	bne.n	80025ae <receiveRMCDataWithAddrGSM+0x126>
				mode = STORAGE;
 800259c:	2201      	movs	r2, #1
 800259e:	6032      	str	r2, [r6, #0]
				start_addr_not_ready = current_addr_gsm;
 80025a0:	681a      	ldr	r2, [r3, #0]
 80025a2:	4b53      	ldr	r3, [pc, #332]	@ (80026f0 <receiveRMCDataWithAddrGSM+0x268>)
				Debug_printf("Saving start address not ready to send: %08x\n",start_addr_not_ready);
 80025a4:	4853      	ldr	r0, [pc, #332]	@ (80026f4 <receiveRMCDataWithAddrGSM+0x26c>)
				start_addr_not_ready = current_addr_gsm;
 80025a6:	601a      	str	r2, [r3, #0]
				Debug_printf("Saving start address not ready to send: %08x\n",start_addr_not_ready);
 80025a8:	6819      	ldr	r1, [r3, #0]
 80025aa:	f001 fff3 	bl	8004594 <Debug_printf>
			is_exist_rmc = 1;
 80025ae:	2501      	movs	r5, #1
		}
		else{
			Debug_printf("There is no address mail left\n");
		}
	}
	if(mode == MAIL){
 80025b0:	6833      	ldr	r3, [r6, #0]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d132      	bne.n	800261c <receiveRMCDataWithAddrGSM+0x194>
		Debug_printf("\n\n -------------Inside GETTING FROM MAIL mode------------\n\n");
 80025b6:	4850      	ldr	r0, [pc, #320]	@ (80026f8 <receiveRMCDataWithAddrGSM+0x270>)
 80025b8:	f001 ffec 	bl	8004594 <Debug_printf>
		if(is_exist_rmc){
 80025bc:	2d00      	cmp	r5, #0
 80025be:	d025      	beq.n	800260c <receiveRMCDataWithAddrGSM+0x184>
			rmc_jt.lcation.latitude = receivedData->rmc.lcation.latitude;
 80025c0:	e9d4 010e 	ldrd	r0, r1, [r4, #56]	@ 0x38
 80025c4:	4b4d      	ldr	r3, [pc, #308]	@ (80026fc <receiveRMCDataWithAddrGSM+0x274>)
			rmc_jt.lcation.longitude = receivedData->rmc.lcation.longitude;
			rmc_jt.speed = receivedData->rmc.speed;
 80025c6:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 80025c8:	629a      	str	r2, [r3, #40]	@ 0x28
			rmc_jt.lcation.latitude = receivedData->rmc.lcation.latitude;
 80025ca:	e9c3 010e 	strd	r0, r1, [r3, #56]	@ 0x38
			rmc_jt.lcation.longitude = receivedData->rmc.lcation.longitude;
 80025ce:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80025d2:	e9c3 0112 	strd	r0, r1, [r3, #72]	@ 0x48
			rmc_jt.course = receivedData->rmc.course;
 80025d6:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80025d8:	62da      	str	r2, [r3, #44]	@ 0x2c
			rmc_jt.lcation.NS = receivedData->rmc.lcation.NS;
 80025da:	f894 2040 	ldrb.w	r2, [r4, #64]	@ 0x40
 80025de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
			rmc_jt.lcation.EW = receivedData->rmc.lcation.EW;
 80025e2:	f894 2050 	ldrb.w	r2, [r4, #80]	@ 0x50
 80025e6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			rmc_jt.isValid = receivedData->rmc.isValid;
 80025ea:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80025ec:	631a      	str	r2, [r3, #48]	@ 0x30
			rmc_jt.date.Yr = receivedData->rmc.date.Yr;
 80025ee:	69a2      	ldr	r2, [r4, #24]
 80025f0:	619a      	str	r2, [r3, #24]
			rmc_jt.date.Mon = receivedData->rmc.date.Mon;
 80025f2:	6962      	ldr	r2, [r4, #20]
 80025f4:	615a      	str	r2, [r3, #20]
			rmc_jt.date.Day = receivedData->rmc.date.Day;
 80025f6:	6922      	ldr	r2, [r4, #16]
 80025f8:	611a      	str	r2, [r3, #16]
			rmc_jt.tim.hour = receivedData->rmc.tim.hour;
 80025fa:	6822      	ldr	r2, [r4, #0]
 80025fc:	601a      	str	r2, [r3, #0]
			rmc_jt.tim.min = receivedData->rmc.tim.min;
 80025fe:	6862      	ldr	r2, [r4, #4]
 8002600:	605a      	str	r2, [r3, #4]
			rmc_jt.tim.sec = receivedData->rmc.tim.sec;
 8002602:	68a2      	ldr	r2, [r4, #8]
 8002604:	609a      	str	r2, [r3, #8]
				sprintf(addr_out, "Current Address going to send to server reading from FLASH: %08lx", current_addr_not_ready);
				HAL_UART_Transmit(&huart1, (uint8_t*) addr_out, 70, 1000);
				HAL_UART_Transmit(&huart1, (uint8_t*)"\r\n", 1, 1000);
				if(is_in_sending)
					rmc_jt = readFlash(current_addr_not_ready);
				received_RMC = 1;
 8002606:	4b3e      	ldr	r3, [pc, #248]	@ (8002700 <receiveRMCDataWithAddrGSM+0x278>)
 8002608:	2201      	movs	r2, #1
 800260a:	601a      	str	r2, [r3, #0]
			}
		}

	}
}
 800260c:	b047      	add	sp, #284	@ 0x11c
 800260e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			Debug_printf("There is no address mail left\n");
 8002610:	483c      	ldr	r0, [pc, #240]	@ (8002704 <receiveRMCDataWithAddrGSM+0x27c>)
 8002612:	f001 ffbf 	bl	8004594 <Debug_printf>
 8002616:	e7cb      	b.n	80025b0 <receiveRMCDataWithAddrGSM+0x128>
	int is_exist_rmc = 0;
 8002618:	2500      	movs	r5, #0
 800261a:	e7c9      	b.n	80025b0 <receiveRMCDataWithAddrGSM+0x128>
		Debug_printf("\n\n -------------Inside GETTING FROM FLASH mode------------\n\n");
 800261c:	483a      	ldr	r0, [pc, #232]	@ (8002708 <receiveRMCDataWithAddrGSM+0x280>)
 800261e:	f001 ffb9 	bl	8004594 <Debug_printf>
		if(is_ready_to_send){
 8002622:	4b32      	ldr	r3, [pc, #200]	@ (80026ec <receiveRMCDataWithAddrGSM+0x264>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d03a      	beq.n	80026a0 <receiveRMCDataWithAddrGSM+0x218>
			sprintf(addr_out, "Current Address going to send to server reading from FLASH: %08lx", start_addr_disconnect);
 800262a:	4c38      	ldr	r4, [pc, #224]	@ (800270c <receiveRMCDataWithAddrGSM+0x284>)
 800262c:	4938      	ldr	r1, [pc, #224]	@ (8002710 <receiveRMCDataWithAddrGSM+0x288>)
 800262e:	6822      	ldr	r2, [r4, #0]
 8002630:	a834      	add	r0, sp, #208	@ 0xd0
 8002632:	f008 faab 	bl	800ab8c <siprintf>
			HAL_UART_Transmit(&huart1, (uint8_t*) addr_out, 70, 1000);
 8002636:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800263a:	2246      	movs	r2, #70	@ 0x46
 800263c:	a934      	add	r1, sp, #208	@ 0xd0
 800263e:	4820      	ldr	r0, [pc, #128]	@ (80026c0 <receiveRMCDataWithAddrGSM+0x238>)
 8002640:	f004 febe 	bl	80073c0 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart1, (uint8_t*)"\r\n", 1, 1000);
 8002644:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002648:	4932      	ldr	r1, [pc, #200]	@ (8002714 <receiveRMCDataWithAddrGSM+0x28c>)
 800264a:	481d      	ldr	r0, [pc, #116]	@ (80026c0 <receiveRMCDataWithAddrGSM+0x238>)
 800264c:	2201      	movs	r2, #1
 800264e:	f004 feb7 	bl	80073c0 <HAL_UART_Transmit>
			memset(addr_out, 0x00, 70);
 8002652:	2246      	movs	r2, #70	@ 0x46
 8002654:	2100      	movs	r1, #0
 8002656:	a834      	add	r0, sp, #208	@ 0xd0
 8002658:	f008 fb60 	bl	800ad1c <memset>
			sprintf(addr_out, "Current Address RECEIVED FROM MAIL QUEUE: %08lx", current_addr_gsm);
 800265c:	4b22      	ldr	r3, [pc, #136]	@ (80026e8 <receiveRMCDataWithAddrGSM+0x260>)
 800265e:	492e      	ldr	r1, [pc, #184]	@ (8002718 <receiveRMCDataWithAddrGSM+0x290>)
 8002660:	681a      	ldr	r2, [r3, #0]
				sprintf(addr_out, "Current Address going to send to server reading from FLASH: %08lx", current_addr_not_ready);
 8002662:	a834      	add	r0, sp, #208	@ 0xd0
 8002664:	f008 fa92 	bl	800ab8c <siprintf>
				HAL_UART_Transmit(&huart1, (uint8_t*) addr_out, 70, 1000);
 8002668:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800266c:	2246      	movs	r2, #70	@ 0x46
 800266e:	a934      	add	r1, sp, #208	@ 0xd0
 8002670:	4813      	ldr	r0, [pc, #76]	@ (80026c0 <receiveRMCDataWithAddrGSM+0x238>)
 8002672:	f004 fea5 	bl	80073c0 <HAL_UART_Transmit>
				HAL_UART_Transmit(&huart1, (uint8_t*)"\r\n", 1, 1000);
 8002676:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800267a:	4926      	ldr	r1, [pc, #152]	@ (8002714 <receiveRMCDataWithAddrGSM+0x28c>)
 800267c:	4810      	ldr	r0, [pc, #64]	@ (80026c0 <receiveRMCDataWithAddrGSM+0x238>)
 800267e:	2201      	movs	r2, #1
 8002680:	f004 fe9e 	bl	80073c0 <HAL_UART_Transmit>
				if(is_in_sending)
 8002684:	4b25      	ldr	r3, [pc, #148]	@ (800271c <receiveRMCDataWithAddrGSM+0x294>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d0bc      	beq.n	8002606 <receiveRMCDataWithAddrGSM+0x17e>
					rmc_jt = readFlash(current_addr_not_ready);
 800268c:	6821      	ldr	r1, [r4, #0]
 800268e:	a808      	add	r0, sp, #32
 8002690:	f7ff fe5a 	bl	8002348 <readFlash>
 8002694:	2258      	movs	r2, #88	@ 0x58
 8002696:	a908      	add	r1, sp, #32
 8002698:	4818      	ldr	r0, [pc, #96]	@ (80026fc <receiveRMCDataWithAddrGSM+0x274>)
 800269a:	f009 f998 	bl	800b9ce <memcpy>
 800269e:	e7b2      	b.n	8002606 <receiveRMCDataWithAddrGSM+0x17e>
			if(current_addr_not_ready != 0){
 80026a0:	4c1f      	ldr	r4, [pc, #124]	@ (8002720 <receiveRMCDataWithAddrGSM+0x298>)
 80026a2:	6823      	ldr	r3, [r4, #0]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d0b1      	beq.n	800260c <receiveRMCDataWithAddrGSM+0x184>
				sprintf(addr_out, "Current Address going to send to server reading from FLASH: %08lx", current_addr_not_ready);
 80026a8:	6822      	ldr	r2, [r4, #0]
 80026aa:	4919      	ldr	r1, [pc, #100]	@ (8002710 <receiveRMCDataWithAddrGSM+0x288>)
 80026ac:	e7d9      	b.n	8002662 <receiveRMCDataWithAddrGSM+0x1da>
 80026ae:	bf00      	nop
 80026b0:	20000c60 	.word	0x20000c60
 80026b4:	20000c58 	.word	0x20000c58
 80026b8:	20000e0c 	.word	0x20000e0c
 80026bc:	0800f452 	.word	0x0800f452
 80026c0:	20001250 	.word	0x20001250
 80026c4:	0800f472 	.word	0x0800f472
 80026c8:	0800f495 	.word	0x0800f495
 80026cc:	0800fad4 	.word	0x0800fad4
 80026d0:	0800f4b9 	.word	0x0800f4b9
 80026d4:	0800f4be 	.word	0x0800f4be
 80026d8:	0800f4e9 	.word	0x0800f4e9
 80026dc:	0800f512 	.word	0x0800f512
 80026e0:	0800f547 	.word	0x0800f547
 80026e4:	0800f586 	.word	0x0800f586
 80026e8:	20000c54 	.word	0x20000c54
 80026ec:	20000c64 	.word	0x20000c64
 80026f0:	20000c48 	.word	0x20000c48
 80026f4:	0800f5b5 	.word	0x0800f5b5
 80026f8:	0800f602 	.word	0x0800f602
 80026fc:	20000be8 	.word	0x20000be8
 8002700:	20000c68 	.word	0x20000c68
 8002704:	0800f5e3 	.word	0x0800f5e3
 8002708:	0800f63e 	.word	0x0800f63e
 800270c:	20000c50 	.word	0x20000c50
 8002710:	0800f67b 	.word	0x0800f67b
 8002714:	0800f4bb 	.word	0x0800f4bb
 8002718:	0800f6bd 	.word	0x0800f6bd
 800271c:	20000c5c 	.word	0x20000c5c
 8002720:	20000c40 	.word	0x20000c40

08002724 <processUploadDataToServer>:

int processUploadDataToServer(JT808_LocationInfoReport *location_info){
 8002724:	b510      	push	{r4, lr}
 8002726:	4601      	mov	r1, r0
	int result_send_location = send_location_to_server(0, location_info);
 8002728:	2000      	movs	r0, #0
 800272a:	f7ff fb71 	bl	8001e10 <send_location_to_server>

	if(result_send_location){
 800272e:	b338      	cbz	r0, 8002780 <processUploadDataToServer+0x5c>
		uart_transmit_string(&huart1, (uint8_t *)"Inside process: Check Sending Location Report\r\n");
 8002730:	4916      	ldr	r1, [pc, #88]	@ (800278c <processUploadDataToServer+0x68>)
 8002732:	4817      	ldr	r0, [pc, #92]	@ (8002790 <processUploadDataToServer+0x6c>)
 8002734:	f001 ff1e 	bl	8004574 <uart_transmit_string>
		int result_check = check_data_sent_to_server(0);
 8002738:	2000      	movs	r0, #0
 800273a:	f7ff fbf1 	bl	8001f20 <check_data_sent_to_server>
		if(result_check){
 800273e:	4604      	mov	r4, r0
 8002740:	b180      	cbz	r0, 8002764 <processUploadDataToServer+0x40>
			uart_transmit_string(&huart1, (uint8_t *)"Sending SUCCESS\n");
 8002742:	4914      	ldr	r1, [pc, #80]	@ (8002794 <processUploadDataToServer+0x70>)
 8002744:	4812      	ldr	r0, [pc, #72]	@ (8002790 <processUploadDataToServer+0x6c>)
 8002746:	f001 ff15 	bl	8004574 <uart_transmit_string>
			receive_response("Check location report\n");
 800274a:	4813      	ldr	r0, [pc, #76]	@ (8002798 <processUploadDataToServer+0x74>)
 800274c:	f7fe fc8e 	bl	800106c <receive_response>
			memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8002750:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8002754:	2100      	movs	r1, #0
 8002756:	4811      	ldr	r0, [pc, #68]	@ (800279c <processUploadDataToServer+0x78>)
 8002758:	f008 fae0 	bl	800ad1c <memset>
			SIM_UART_ReInitializeRxDMA();
 800275c:	f7fe fc6a 	bl	8001034 <SIM_UART_ReInitializeRxDMA>
			return 1;
 8002760:	2001      	movs	r0, #1
	}
	else{
		uart_transmit_string(&huart1, (uint8_t *)"Sending ERROR (SENDING ERROR)\n");
		return 0;
	}
}
 8002762:	bd10      	pop	{r4, pc}
			uart_transmit_string(&huart1, (uint8_t *)"Sending ERROR  (CHECKING SENDING RESULT ERROR)\n");
 8002764:	490e      	ldr	r1, [pc, #56]	@ (80027a0 <processUploadDataToServer+0x7c>)
 8002766:	480a      	ldr	r0, [pc, #40]	@ (8002790 <processUploadDataToServer+0x6c>)
 8002768:	f001 ff04 	bl	8004574 <uart_transmit_string>
			memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 800276c:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8002770:	4621      	mov	r1, r4
 8002772:	480a      	ldr	r0, [pc, #40]	@ (800279c <processUploadDataToServer+0x78>)
 8002774:	f008 fad2 	bl	800ad1c <memset>
			SIM_UART_ReInitializeRxDMA();
 8002778:	f7fe fc5c 	bl	8001034 <SIM_UART_ReInitializeRxDMA>
			return 0;
 800277c:	2000      	movs	r0, #0
 800277e:	e7f0      	b.n	8002762 <processUploadDataToServer+0x3e>
		uart_transmit_string(&huart1, (uint8_t *)"Sending ERROR (SENDING ERROR)\n");
 8002780:	4908      	ldr	r1, [pc, #32]	@ (80027a4 <processUploadDataToServer+0x80>)
 8002782:	4803      	ldr	r0, [pc, #12]	@ (8002790 <processUploadDataToServer+0x6c>)
 8002784:	f001 fef6 	bl	8004574 <uart_transmit_string>
		return 0;
 8002788:	e7f8      	b.n	800277c <processUploadDataToServer+0x58>
 800278a:	bf00      	nop
 800278c:	0800f6ed 	.word	0x0800f6ed
 8002790:	20001250 	.word	0x20001250
 8002794:	0800f71d 	.word	0x0800f71d
 8002798:	0800f72e 	.word	0x0800f72e
 800279c:	20000c80 	.word	0x20000c80
 80027a0:	0800f745 	.word	0x0800f745
 80027a4:	0800f775 	.word	0x0800f775

080027a8 <StartGSM>:
		osMailPut(RMC_MailQLEDId, mail); // Put message in queuec
	}
}

void StartGSM(void const * argument)
{
 80027a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uart_transmit_string(&huart1, (uint8_t*)"Starting GSM: Pushing data to Server");
 80027ac:	498c      	ldr	r1, [pc, #560]	@ (80029e0 <StartGSM+0x238>)
 80027ae:	488d      	ldr	r0, [pc, #564]	@ (80029e4 <StartGSM+0x23c>)
{
 80027b0:	b0dd      	sub	sp, #372	@ 0x174
	uart_transmit_string(&huart1, (uint8_t*)"Starting GSM: Pushing data to Server");
 80027b2:	f001 fedf 	bl	8004574 <uart_transmit_string>
  /* USER CODE BEGIN StartGSM */
  /* Infinite loop */   // Buffer for received data
//	uint8_t response[4];   // Buffer for received data
	// Flag to indicate data reception
	RingBufferDmaU8_initUSARTRx(&SIMRxDMARing, &huart3, response, SIM_RESPONSE_MAX_SIZE);
 80027b6:	4a8c      	ldr	r2, [pc, #560]	@ (80029e8 <StartGSM+0x240>)
 80027b8:	498c      	ldr	r1, [pc, #560]	@ (80029ec <StartGSM+0x244>)
 80027ba:	488d      	ldr	r0, [pc, #564]	@ (80029f0 <StartGSM+0x248>)
 80027bc:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 80027c0:	f000 faee 	bl	8002da0 <RingBufferDmaU8_initUSARTRx>
	
	JT808_TerminalRegistration reg_msg = create_terminal_registration();
 80027c4:	a80a      	add	r0, sp, #40	@ 0x28
 80027c6:	f7fe fbd3 	bl	8000f70 <create_terminal_registration>
	
	JT808_LocationInfoReport location_info = create_location_info_report();
 80027ca:	a819      	add	r0, sp, #100	@ 0x64
 80027cc:	f7fe fbf6 	bl	8000fbc <create_location_info_report>
	
	osMailQDef(addr_MailQ, 11, uint32_t);
 80027d0:	2404      	movs	r4, #4
 80027d2:	ab02      	add	r3, sp, #8
 80027d4:	250b      	movs	r5, #11
	addr_MailQGSMId = osMailCreate(osMailQ(addr_MailQ), NULL);
 80027d6:	2100      	movs	r1, #0
 80027d8:	a804      	add	r0, sp, #16
	osMailQDef(addr_MailQ, 11, uint32_t);
 80027da:	e9cd 5404 	strd	r5, r4, [sp, #16]
 80027de:	9306      	str	r3, [sp, #24]
	addr_MailQGSMId = osMailCreate(osMailQ(addr_MailQ), NULL);
 80027e0:	f004 ffff 	bl	80077e2 <osMailCreate>
 80027e4:	4b83      	ldr	r3, [pc, #524]	@ (80029f4 <StartGSM+0x24c>)

	osMailQDef(result_MailQ, 11, uint32_t);
	result_MailQGSMId = osMailCreate(osMailQ(result_MailQ), NULL);
 80027e6:	2100      	movs	r1, #0
	addr_MailQGSMId = osMailCreate(osMailQ(addr_MailQ), NULL);
 80027e8:	6018      	str	r0, [r3, #0]
	osMailQDef(result_MailQ, 11, uint32_t);
 80027ea:	ab03      	add	r3, sp, #12
	result_MailQGSMId = osMailCreate(osMailQ(result_MailQ), NULL);
 80027ec:	a807      	add	r0, sp, #28
	osMailQDef(result_MailQ, 11, uint32_t);
 80027ee:	e9cd 5407 	strd	r5, r4, [sp, #28]
 80027f2:	9309      	str	r3, [sp, #36]	@ 0x24
	result_MailQGSMId = osMailCreate(osMailQ(result_MailQ), NULL);
 80027f4:	f004 fff5 	bl	80077e2 <osMailCreate>
 80027f8:	4b7f      	ldr	r3, [pc, #508]	@ (80029f8 <StartGSM+0x250>)
					process = 4;
				}
				else{
					memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
					SIM_UART_ReInitializeRxDMA();
					uart_transmit_string(&huart1,(uint8_t*) "Rebooting SIM module\n");
 80027fa:	4c7a      	ldr	r4, [pc, #488]	@ (80029e4 <StartGSM+0x23c>)
	result_MailQGSMId = osMailCreate(osMailQ(result_MailQ), NULL);
 80027fc:	6018      	str	r0, [r3, #0]
	init_SIM_module();
 80027fe:	f7fe fc5f 	bl	80010c0 <init_SIM_module>
	int is_set_uniqueID = 0;
 8002802:	2700      	movs	r7, #0
	int process = 0;
 8002804:	463e      	mov	r6, r7
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 8002806:	487d      	ldr	r0, [pc, #500]	@ (80029fc <StartGSM+0x254>)
 8002808:	2201      	movs	r2, #1
 800280a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800280e:	f002 fe7f 	bl	8005510 <HAL_GPIO_WritePin>
		osDelay(300);
 8002812:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8002816:	f004 ff43 	bl	80076a0 <osDelay>
		switch(process){
 800281a:	2e08      	cmp	r6, #8
 800281c:	d84f      	bhi.n	80028be <StartGSM+0x116>
 800281e:	e8df f016 	tbh	[pc, r6, lsl #1]
 8002822:	0009      	.short	0x0009
 8002824:	00610022 	.word	0x00610022
 8002828:	00a9007a 	.word	0x00a9007a
 800282c:	00d100c4 	.word	0x00d100c4
 8002830:	02620111 	.word	0x02620111
				uart_transmit_string(&huart1, (uint8_t *)"First CHECK\r\n");
 8002834:	4972      	ldr	r1, [pc, #456]	@ (8002a00 <StartGSM+0x258>)
 8002836:	4620      	mov	r0, r4
 8002838:	f001 fe9c 	bl	8004574 <uart_transmit_string>
				isReady = first_check_SIM();
 800283c:	f7fe fd12 	bl	8001264 <first_check_SIM>
				if(isReady) process++;
 8002840:	4601      	mov	r1, r0
 8002842:	2800      	cmp	r0, #0
 8002844:	f040 8094 	bne.w	8002970 <StartGSM+0x1c8>
					memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8002848:	f44f 72c0 	mov.w	r2, #384	@ 0x180
					memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 800284c:	4866      	ldr	r0, [pc, #408]	@ (80029e8 <StartGSM+0x240>)
 800284e:	f008 fa65 	bl	800ad1c <memset>
					SIM_UART_ReInitializeRxDMA();
 8002852:	f7fe fbef 	bl	8001034 <SIM_UART_ReInitializeRxDMA>
					uart_transmit_string(&huart1,(uint8_t*) "Rebooting SIM module\n");
 8002856:	496b      	ldr	r1, [pc, #428]	@ (8002a04 <StartGSM+0x25c>)
 8002858:	4620      	mov	r0, r4
 800285a:	f001 fe8b 	bl	8004574 <uart_transmit_string>
							process++;
 800285e:	2500      	movs	r5, #0
					reboot_SIM_module();
 8002860:	f7fe fc48 	bl	80010f4 <reboot_SIM_module>
					process = 0;
 8002864:	e02a      	b.n	80028bc <StartGSM+0x114>
				uart_transmit_string(&huart1, (uint8_t *)"Check EVERYTHING READY\r\n");
 8002866:	4968      	ldr	r1, [pc, #416]	@ (8002a08 <StartGSM+0x260>)
 8002868:	4620      	mov	r0, r4
 800286a:	f001 fe83 	bl	8004574 <uart_transmit_string>
				osDelay(100);
 800286e:	2064      	movs	r0, #100	@ 0x64
 8002870:	f004 ff16 	bl	80076a0 <osDelay>
				int check_SIM = check_SIM_ready();
 8002874:	f7fe fddc 	bl	8001430 <check_SIM_ready>
 8002878:	4605      	mov	r5, r0
				if(is_set_uniqueID == 0){
 800287a:	b957      	cbnz	r7, 8002892 <StartGSM+0xea>
					memcpy(reg_msg.terminal_phone_number, terminal_phone_number, sizeof(terminal_phone_number));
 800287c:	4b63      	ldr	r3, [pc, #396]	@ (8002a0c <StartGSM+0x264>)
 800287e:	681a      	ldr	r2, [r3, #0]
 8002880:	889b      	ldrh	r3, [r3, #4]
 8002882:	f8cd 202d 	str.w	r2, [sp, #45]	@ 0x2d
 8002886:	f8ad 3031 	strh.w	r3, [sp, #49]	@ 0x31
					memcpy(location_info.terminal_phone_number, terminal_phone_number, sizeof(terminal_phone_number));
 800288a:	f8cd 2069 	str.w	r2, [sp, #105]	@ 0x69
 800288e:	f8ad 306d 	strh.w	r3, [sp, #109]	@ 0x6d
				osDelay(150);
 8002892:	2096      	movs	r0, #150	@ 0x96
 8002894:	f004 ff04 	bl	80076a0 <osDelay>
				if (check_SIM == 0){
 8002898:	2d00      	cmp	r5, #0
 800289a:	f040 8238 	bne.w	8002d0e <StartGSM+0x566>
					memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 800289e:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 80028a2:	4629      	mov	r1, r5
 80028a4:	4850      	ldr	r0, [pc, #320]	@ (80029e8 <StartGSM+0x240>)
 80028a6:	f008 fa39 	bl	800ad1c <memset>
					SIM_UART_ReInitializeRxDMA();
 80028aa:	f7fe fbc3 	bl	8001034 <SIM_UART_ReInitializeRxDMA>
					uart_transmit_string(&huart1,(uint8_t*) "Rebooting SIM module");
 80028ae:	4958      	ldr	r1, [pc, #352]	@ (8002a10 <StartGSM+0x268>)
 80028b0:	4620      	mov	r0, r4
 80028b2:	f001 fe5f 	bl	8004574 <uart_transmit_string>
					reboot_SIM_module();
 80028b6:	f7fe fc1d 	bl	80010f4 <reboot_SIM_module>
					process = 0;
 80028ba:	4637      	mov	r7, r6
 80028bc:	462e      	mov	r6, r5
				}
				break;
		}
		receiveRMCDataWithAddrGSM();
 80028be:	f7ff fde3 	bl	8002488 <receiveRMCDataWithAddrGSM>

		Debug_printf("\nHello from GSM\n");
 80028c2:	4854      	ldr	r0, [pc, #336]	@ (8002a14 <StartGSM+0x26c>)
 80028c4:	f001 fe66 	bl	8004594 <Debug_printf>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 80028c8:	2200      	movs	r2, #0
 80028ca:	484c      	ldr	r0, [pc, #304]	@ (80029fc <StartGSM+0x254>)
 80028cc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80028d0:	f002 fe1e 	bl	8005510 <HAL_GPIO_WritePin>
		uart_transmit_string(&huart1,(uint8_t*) "\n\n");
 80028d4:	4620      	mov	r0, r4
 80028d6:	4950      	ldr	r1, [pc, #320]	@ (8002a18 <StartGSM+0x270>)
 80028d8:	f001 fe4c 	bl	8004574 <uart_transmit_string>
		osDelay(200);
 80028dc:	20c8      	movs	r0, #200	@ 0xc8
 80028de:	f004 fedf 	bl	80076a0 <osDelay>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 80028e2:	e790      	b.n	8002806 <StartGSM+0x5e>
				uart_transmit_string(&huart1, (uint8_t *)"Inside process: Configure PDP context\r\n");
 80028e4:	494d      	ldr	r1, [pc, #308]	@ (8002a1c <StartGSM+0x274>)
 80028e6:	4620      	mov	r0, r4
 80028e8:	f001 fe44 	bl	8004574 <uart_transmit_string>
				memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 80028ec:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 80028f0:	2100      	movs	r1, #0
 80028f2:	483d      	ldr	r0, [pc, #244]	@ (80029e8 <StartGSM+0x240>)
 80028f4:	f008 fa12 	bl	800ad1c <memset>
				SIM_UART_ReInitializeRxDMA();
 80028f8:	f7fe fb9c 	bl	8001034 <SIM_UART_ReInitializeRxDMA>
				configure_APN(1);
 80028fc:	2001      	movs	r0, #1
 80028fe:	f7fe fef9 	bl	80016f4 <configure_APN>
				memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8002902:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8002906:	2100      	movs	r1, #0
 8002908:	4837      	ldr	r0, [pc, #220]	@ (80029e8 <StartGSM+0x240>)
 800290a:	f008 fa07 	bl	800ad1c <memset>
				process++;
 800290e:	2503      	movs	r5, #3
				SIM_UART_ReInitializeRxDMA();
 8002910:	f7fe fb90 	bl	8001034 <SIM_UART_ReInitializeRxDMA>
				break;
 8002914:	e7d2      	b.n	80028bc <StartGSM+0x114>
				uart_transmit_string(&huart1, (uint8_t *)"Inside process: Activate PDP context\r\n");
 8002916:	4942      	ldr	r1, [pc, #264]	@ (8002a20 <StartGSM+0x278>)
 8002918:	4620      	mov	r0, r4
 800291a:	f001 fe2b 	bl	8004574 <uart_transmit_string>
				int receive_activate = activate_context(1);
 800291e:	2001      	movs	r0, #1
 8002920:	f7fe ff3a 	bl	8001798 <activate_context>
				if(receive_activate){
 8002924:	4606      	mov	r6, r0
 8002926:	b190      	cbz	r0, 800294e <StartGSM+0x1a6>
					getCurrentTime();
 8002928:	f7ff fc78 	bl	800221c <getCurrentTime>
					uart_transmit_string(&huart1, (uint8_t*) "Activate PDP context successfully\n");
 800292c:	493d      	ldr	r1, [pc, #244]	@ (8002a24 <StartGSM+0x27c>)
 800292e:	4620      	mov	r0, r4
 8002930:	f001 fe20 	bl	8004574 <uart_transmit_string>
					osDelay(200);
 8002934:	20c8      	movs	r0, #200	@ 0xc8
 8002936:	f004 feb3 	bl	80076a0 <osDelay>
					memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 800293a:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 800293e:	2100      	movs	r1, #0
 8002940:	4829      	ldr	r0, [pc, #164]	@ (80029e8 <StartGSM+0x240>)
 8002942:	f008 f9eb 	bl	800ad1c <memset>
					SIM_UART_ReInitializeRxDMA();
 8002946:	f7fe fb75 	bl	8001034 <SIM_UART_ReInitializeRxDMA>
					process++;
 800294a:	2504      	movs	r5, #4
 800294c:	e7b6      	b.n	80028bc <StartGSM+0x114>
					uart_transmit_string(&huart1, (uint8_t*) "Activate PDP Context Failed\n");
 800294e:	4936      	ldr	r1, [pc, #216]	@ (8002a28 <StartGSM+0x280>)
					uart_transmit_string(&huart1, (uint8_t*) "Connect to Server Failed\n");
 8002950:	4620      	mov	r0, r4
 8002952:	f001 fe0f 	bl	8004574 <uart_transmit_string>
					int receive_deactivate = deactivate_context(1);
 8002956:	2001      	movs	r0, #1
 8002958:	f7fe ff94 	bl	8001884 <deactivate_context>
					memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 800295c:	f44f 72c0 	mov.w	r2, #384	@ 0x180
					int receive_deactivate = deactivate_context(1);
 8002960:	4605      	mov	r5, r0
					memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8002962:	4631      	mov	r1, r6
 8002964:	4820      	ldr	r0, [pc, #128]	@ (80029e8 <StartGSM+0x240>)
 8002966:	f008 f9d9 	bl	800ad1c <memset>
					SIM_UART_ReInitializeRxDMA();
 800296a:	f7fe fb63 	bl	8001034 <SIM_UART_ReInitializeRxDMA>
					if (receive_deactivate) process = 1;
 800296e:	b1c5      	cbz	r5, 80029a2 <StartGSM+0x1fa>
					if (receive_deactivate) process = 1;
 8002970:	2501      	movs	r5, #1
 8002972:	e7a3      	b.n	80028bc <StartGSM+0x114>
				uart_transmit_string(&huart1, (uint8_t *)"Inside process: OPEN SOCKET SERVICE\r\n");
 8002974:	492d      	ldr	r1, [pc, #180]	@ (8002a2c <StartGSM+0x284>)
 8002976:	4620      	mov	r0, r4
 8002978:	f001 fdfc 	bl	8004574 <uart_transmit_string>
				int received_res = open_socket_service(1, 0, 0, 0);
 800297c:	2300      	movs	r3, #0
 800297e:	461a      	mov	r2, r3
 8002980:	4619      	mov	r1, r3
 8002982:	2001      	movs	r0, #1
 8002984:	f7fe ffca 	bl	800191c <open_socket_service>
				if(received_res){
 8002988:	4606      	mov	r6, r0
 800298a:	b140      	cbz	r0, 800299e <StartGSM+0x1f6>
					uart_transmit_string(&huart1, (uint8_t*) "Connect to Server successfully\n");
 800298c:	4928      	ldr	r1, [pc, #160]	@ (8002a30 <StartGSM+0x288>)
 800298e:	4620      	mov	r0, r4
 8002990:	f001 fdf0 	bl	8004574 <uart_transmit_string>
					check_socket_connection(1);
 8002994:	2001      	movs	r0, #1
 8002996:	f7ff f879 	bl	8001a8c <check_socket_connection>
					process++;
 800299a:	2505      	movs	r5, #5
 800299c:	e78e      	b.n	80028bc <StartGSM+0x114>
					uart_transmit_string(&huart1, (uint8_t*) "Connect to Server Failed\n");
 800299e:	4925      	ldr	r1, [pc, #148]	@ (8002a34 <StartGSM+0x28c>)
 80029a0:	e7d6      	b.n	8002950 <StartGSM+0x1a8>
						memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 80029a2:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 80029a6:	4629      	mov	r1, r5
 80029a8:	e750      	b.n	800284c <StartGSM+0xa4>
				uart_transmit_string(&huart1, (uint8_t *)"Inside process: Register/Login to the server.\r\n");
 80029aa:	4923      	ldr	r1, [pc, #140]	@ (8002a38 <StartGSM+0x290>)
 80029ac:	4620      	mov	r0, r4
 80029ae:	f001 fde1 	bl	8004574 <uart_transmit_string>
				int result_send_login = login_to_server(0,&reg_msg);
 80029b2:	a90a      	add	r1, sp, #40	@ 0x28
 80029b4:	2000      	movs	r0, #0
 80029b6:	f7ff f9b9 	bl	8001d2c <login_to_server>
				if(result_send_login){
 80029ba:	2800      	cmp	r0, #0
 80029bc:	f040 81aa 	bne.w	8002d14 <StartGSM+0x56c>
				else process = 8;
 80029c0:	2508      	movs	r5, #8
 80029c2:	e77b      	b.n	80028bc <StartGSM+0x114>
				uart_transmit_string(&huart1, (uint8_t *)"Inside process: Check Register/Login\r\n");
 80029c4:	4620      	mov	r0, r4
 80029c6:	491d      	ldr	r1, [pc, #116]	@ (8002a3c <StartGSM+0x294>)
 80029c8:	f001 fdd4 	bl	8004574 <uart_transmit_string>
				int result_check_login = check_data_sent_to_server(0);
 80029cc:	2000      	movs	r0, #0
 80029ce:	f7ff faa7 	bl	8001f20 <check_data_sent_to_server>
				if(result_check_login){
 80029d2:	2800      	cmp	r0, #0
 80029d4:	d0f4      	beq.n	80029c0 <StartGSM+0x218>
					receive_response("Check terminal register\n");
 80029d6:	481a      	ldr	r0, [pc, #104]	@ (8002a40 <StartGSM+0x298>)
 80029d8:	f7fe fb48 	bl	800106c <receive_response>
					process++;
 80029dc:	2507      	movs	r5, #7
 80029de:	e76d      	b.n	80028bc <StartGSM+0x114>
 80029e0:	0800f794 	.word	0x0800f794
 80029e4:	20001250 	.word	0x20001250
 80029e8:	20000c80 	.word	0x20000c80
 80029ec:	20001140 	.word	0x20001140
 80029f0:	20000c70 	.word	0x20000c70
 80029f4:	20000e08 	.word	0x20000e08
 80029f8:	20000e04 	.word	0x20000e04
 80029fc:	48000800 	.word	0x48000800
 8002a00:	0800f7b9 	.word	0x0800f7b9
 8002a04:	0800f7c7 	.word	0x0800f7c7
 8002a08:	0800f7dd 	.word	0x0800f7dd
 8002a0c:	20000bdc 	.word	0x20000bdc
 8002a10:	0800f7f6 	.word	0x0800f7f6
 8002a14:	0800fc53 	.word	0x0800fc53
 8002a18:	0800fa07 	.word	0x0800fa07
 8002a1c:	0800f80b 	.word	0x0800f80b
 8002a20:	0800f833 	.word	0x0800f833
 8002a24:	0800f85a 	.word	0x0800f85a
 8002a28:	0800f87d 	.word	0x0800f87d
 8002a2c:	0800f89a 	.word	0x0800f89a
 8002a30:	0800f8c0 	.word	0x0800f8c0
 8002a34:	0800f8e0 	.word	0x0800f8e0
 8002a38:	0800f8fa 	.word	0x0800f8fa
 8002a3c:	0800f92a 	.word	0x0800f92a
 8002a40:	0800f951 	.word	0x0800f951
				is_in_sending = 1;
 8002a44:	4bb4      	ldr	r3, [pc, #720]	@ (8002d18 <StartGSM+0x570>)
				uart_transmit_string(&huart1, (uint8_t *)"Inside process: Send Location\r\n");
 8002a46:	49b5      	ldr	r1, [pc, #724]	@ (8002d1c <StartGSM+0x574>)
				is_in_sending = 1;
 8002a48:	2501      	movs	r5, #1
				uart_transmit_string(&huart1, (uint8_t *)"Inside process: Send Location\r\n");
 8002a4a:	4620      	mov	r0, r4
				is_in_sending = 1;
 8002a4c:	601d      	str	r5, [r3, #0]
				uart_transmit_string(&huart1, (uint8_t *)"Inside process: Send Location\r\n");
 8002a4e:	f001 fd91 	bl	8004574 <uart_transmit_string>
				int result_get_current = getCurrentTime();
 8002a52:	f7ff fbe3 	bl	800221c <getCurrentTime>
				if(result_get_current == 0){
 8002a56:	2800      	cmp	r0, #0
 8002a58:	d0b2      	beq.n	80029c0 <StartGSM+0x218>
				end_addr_not_ready = current_addr_gsm;
 8002a5a:	4eb1      	ldr	r6, [pc, #708]	@ (8002d20 <StartGSM+0x578>)
 8002a5c:	f8df a330 	ldr.w	sl, [pc, #816]	@ 8002d90 <StartGSM+0x5e8>
 8002a60:	6833      	ldr	r3, [r6, #0]
 8002a62:	f8ca 3000 	str.w	r3, [sl]
				sprintf(addr_out, "End Address to reading from FLASH: %08lx", end_addr_not_ready);
 8002a66:	f8da 2000 	ldr.w	r2, [sl]
 8002a6a:	49ae      	ldr	r1, [pc, #696]	@ (8002d24 <StartGSM+0x57c>)
					if(is_ready_to_send == 0){
 8002a6c:	f8df 8324 	ldr.w	r8, [pc, #804]	@ 8002d94 <StartGSM+0x5ec>
				sprintf(addr_out, "End Address to reading from FLASH: %08lx", end_addr_not_ready);
 8002a70:	a82a      	add	r0, sp, #168	@ 0xa8
 8002a72:	f008 f88b 	bl	800ab8c <siprintf>
				HAL_UART_Transmit(&huart1, (uint8_t*) addr_out, 70, 1000);
 8002a76:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002a7a:	2246      	movs	r2, #70	@ 0x46
 8002a7c:	a92a      	add	r1, sp, #168	@ 0xa8
 8002a7e:	4620      	mov	r0, r4
 8002a80:	f004 fc9e 	bl	80073c0 <HAL_UART_Transmit>
				HAL_UART_Transmit(&huart1, (uint8_t*)"\r\n", 1, 1000);
 8002a84:	462a      	mov	r2, r5
 8002a86:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002a8a:	49a7      	ldr	r1, [pc, #668]	@ (8002d28 <StartGSM+0x580>)
					if(start_addr_disconnect == current_addr_gsm && is_disconnect == 0 && is_using_flash == 0){
 8002a8c:	4da7      	ldr	r5, [pc, #668]	@ (8002d2c <StartGSM+0x584>)
				HAL_UART_Transmit(&huart1, (uint8_t*)"\r\n", 1, 1000);
 8002a8e:	4620      	mov	r0, r4
 8002a90:	f004 fc96 	bl	80073c0 <HAL_UART_Transmit>
				current_addr_not_ready = start_addr_not_ready;
 8002a94:	4ba6      	ldr	r3, [pc, #664]	@ (8002d30 <StartGSM+0x588>)
 8002a96:	681a      	ldr	r2, [r3, #0]
 8002a98:	4ba6      	ldr	r3, [pc, #664]	@ (8002d34 <StartGSM+0x58c>)
 8002a9a:	601a      	str	r2, [r3, #0]
					if(is_ready_to_send == 0){
 8002a9c:	f8d8 b000 	ldr.w	fp, [r8]
 8002aa0:	f1bb 0f00 	cmp.w	fp, #0
 8002aa4:	f040 80c5 	bne.w	8002c32 <StartGSM+0x48a>
						sprintf(addr_out, "Current Address going to send to server reading from FLASH: %08lx", current_addr_not_ready);
 8002aa8:	f8df 9288 	ldr.w	r9, [pc, #648]	@ 8002d34 <StartGSM+0x58c>
 8002aac:	49a2      	ldr	r1, [pc, #648]	@ (8002d38 <StartGSM+0x590>)
 8002aae:	f8d9 2000 	ldr.w	r2, [r9]
 8002ab2:	a83c      	add	r0, sp, #240	@ 0xf0
 8002ab4:	f008 f86a 	bl	800ab8c <siprintf>
						HAL_UART_Transmit(&huart1, (uint8_t*) addr_out, 70, 1000);
 8002ab8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002abc:	2246      	movs	r2, #70	@ 0x46
 8002abe:	a93c      	add	r1, sp, #240	@ 0xf0
 8002ac0:	4620      	mov	r0, r4
 8002ac2:	f004 fc7d 	bl	80073c0 <HAL_UART_Transmit>
						HAL_UART_Transmit(&huart1, (uint8_t*)"\r\n", 1, 1000);
 8002ac6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002aca:	2201      	movs	r2, #1
 8002acc:	4996      	ldr	r1, [pc, #600]	@ (8002d28 <StartGSM+0x580>)
 8002ace:	4620      	mov	r0, r4
 8002ad0:	f004 fc76 	bl	80073c0 <HAL_UART_Transmit>
						if(current_addr_not_ready <= end_addr_not_ready){
 8002ad4:	f8d9 2000 	ldr.w	r2, [r9]
 8002ad8:	f8da 3000 	ldr.w	r3, [sl]
 8002adc:	429a      	cmp	r2, r3
 8002ade:	4b97      	ldr	r3, [pc, #604]	@ (8002d3c <StartGSM+0x594>)
 8002ae0:	f04f 0201 	mov.w	r2, #1
 8002ae4:	f200 809a 	bhi.w	8002c1c <StartGSM+0x474>
							is_using_flash = 1;
 8002ae8:	601a      	str	r2, [r3, #0]
							receiveRMCDataWithAddrGSM();
 8002aea:	f7ff fccd 	bl	8002488 <receiveRMCDataWithAddrGSM>
							current_addr_not_ready += 128;
 8002aee:	f8d9 3000 	ldr.w	r3, [r9]
 8002af2:	3380      	adds	r3, #128	@ 0x80
 8002af4:	f8c9 3000 	str.w	r3, [r9]
					if(start_addr_disconnect == current_addr_gsm && is_disconnect == 0 && is_using_flash == 0){
 8002af8:	682a      	ldr	r2, [r5, #0]
 8002afa:	6833      	ldr	r3, [r6, #0]
 8002afc:	f8df 9298 	ldr.w	r9, [pc, #664]	@ 8002d98 <StartGSM+0x5f0>
 8002b00:	429a      	cmp	r2, r3
 8002b02:	d10a      	bne.n	8002b1a <StartGSM+0x372>
 8002b04:	4b8e      	ldr	r3, [pc, #568]	@ (8002d40 <StartGSM+0x598>)
 8002b06:	4a8d      	ldr	r2, [pc, #564]	@ (8002d3c <StartGSM+0x594>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	6812      	ldr	r2, [r2, #0]
 8002b0c:	4313      	orrs	r3, r2
 8002b0e:	d104      	bne.n	8002b1a <StartGSM+0x372>
						Debug_printf("No update since the last address getting from FLASH. \n");
 8002b10:	488c      	ldr	r0, [pc, #560]	@ (8002d44 <StartGSM+0x59c>)
						received_RMC = 0;
 8002b12:	f8c9 3000 	str.w	r3, [r9]
						Debug_printf("No update since the last address getting from FLASH. \n");
 8002b16:	f001 fd3d 	bl	8004594 <Debug_printf>
					if(received_RMC == 1){
 8002b1a:	f8d9 3000 	ldr.w	r3, [r9]
 8002b1e:	2b01      	cmp	r3, #1
 8002b20:	d178      	bne.n	8002c14 <StartGSM+0x46c>
						received_RMC = 0;
 8002b22:	2300      	movs	r3, #0
						uart_transmit_string(&huart1, (uint8_t *)"RECEIVED RMC DATA AT GSM MODULE\n");
 8002b24:	4988      	ldr	r1, [pc, #544]	@ (8002d48 <StartGSM+0x5a0>)
						received_RMC = 0;
 8002b26:	f8c9 3000 	str.w	r3, [r9]
						uart_transmit_string(&huart1, (uint8_t *)"RECEIVED RMC DATA AT GSM MODULE\n");
 8002b2a:	4620      	mov	r0, r4
 8002b2c:	f001 fd22 	bl	8004574 <uart_transmit_string>
						save_rmc_to_location_info(&location_info);
 8002b30:	a819      	add	r0, sp, #100	@ 0x64
 8002b32:	f7fe fb0d 	bl	8001150 <save_rmc_to_location_info>
						if(is_ready_to_send == 1){
 8002b36:	f8d8 3000 	ldr.w	r3, [r8]
 8002b3a:	2b01      	cmp	r3, #1
 8002b3c:	d17f      	bne.n	8002c3e <StartGSM+0x496>
							Debug_printf("Current stack address to be sent to the server: \n");
 8002b3e:	4883      	ldr	r0, [pc, #524]	@ (8002d4c <StartGSM+0x5a4>)
 8002b40:	f001 fd28 	bl	8004594 <Debug_printf>
							if(mode == MAIL)
 8002b44:	4b82      	ldr	r3, [pc, #520]	@ (8002d50 <StartGSM+0x5a8>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d175      	bne.n	8002c38 <StartGSM+0x490>
								sprintf(addr_out, "Address going to send to server at GSM:(STACK FROM MAIL QUEUE)  %08lx", current_addr_gsm);
 8002b4c:	6832      	ldr	r2, [r6, #0]
 8002b4e:	4981      	ldr	r1, [pc, #516]	@ (8002d54 <StartGSM+0x5ac>)
							sprintf(addr_out, "Stack address get when setting up GSM SIM module: %08lx", current_addr_not_ready);
 8002b50:	a83c      	add	r0, sp, #240	@ 0xf0
 8002b52:	f008 f81b 	bl	800ab8c <siprintf>
						HAL_UART_Transmit(&huart1, (uint8_t*) addr_out, 128, 1000);
 8002b56:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002b5a:	2280      	movs	r2, #128	@ 0x80
 8002b5c:	a93c      	add	r1, sp, #240	@ 0xf0
 8002b5e:	4620      	mov	r0, r4
 8002b60:	f004 fc2e 	bl	80073c0 <HAL_UART_Transmit>
						HAL_UART_Transmit(&huart1, (uint8_t*)"\r\n", 1, 1000);
 8002b64:	4970      	ldr	r1, [pc, #448]	@ (8002d28 <StartGSM+0x580>)
 8002b66:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002b6a:	2201      	movs	r2, #1
 8002b6c:	4620      	mov	r0, r4
 8002b6e:	f004 fc27 	bl	80073c0 <HAL_UART_Transmit>
						int result_final = processUploadDataToServer(&location_info);
 8002b72:	a819      	add	r0, sp, #100	@ 0x64
 8002b74:	f7ff fdd6 	bl	8002724 <processUploadDataToServer>
						if(result_final == 1){
 8002b78:	2801      	cmp	r0, #1
 8002b7a:	d179      	bne.n	8002c70 <StartGSM+0x4c8>
							uart_transmit_string(&huart1, (uint8_t *)"Sending SUCCESS\n");
 8002b7c:	4976      	ldr	r1, [pc, #472]	@ (8002d58 <StartGSM+0x5b0>)
							if(mode == STORAGE && is_ready_to_send == 1){
 8002b7e:	f8df 91d0 	ldr.w	r9, [pc, #464]	@ 8002d50 <StartGSM+0x5a8>
							uart_transmit_string(&huart1, (uint8_t *)"Sending SUCCESS\n");
 8002b82:	4620      	mov	r0, r4
 8002b84:	f001 fcf6 	bl	8004574 <uart_transmit_string>
							receive_response("Check location report\n");
 8002b88:	4874      	ldr	r0, [pc, #464]	@ (8002d5c <StartGSM+0x5b4>)
 8002b8a:	f7fe fa6f 	bl	800106c <receive_response>
							memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8002b8e:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8002b92:	2100      	movs	r1, #0
 8002b94:	4872      	ldr	r0, [pc, #456]	@ (8002d60 <StartGSM+0x5b8>)
 8002b96:	f008 f8c1 	bl	800ad1c <memset>
							SIM_UART_ReInitializeRxDMA();
 8002b9a:	f7fe fa4b 	bl	8001034 <SIM_UART_ReInitializeRxDMA>
							if(mode == STORAGE && is_ready_to_send == 1){
 8002b9e:	f8d9 3000 	ldr.w	r3, [r9]
 8002ba2:	2b01      	cmp	r3, #1
 8002ba4:	d121      	bne.n	8002bea <StartGSM+0x442>
 8002ba6:	f8d8 3000 	ldr.w	r3, [r8]
 8002baa:	2b01      	cmp	r3, #1
 8002bac:	d11d      	bne.n	8002bea <StartGSM+0x442>
								is_disconnect = 0;
 8002bae:	4964      	ldr	r1, [pc, #400]	@ (8002d40 <StartGSM+0x598>)
								end_addr_disconnect = current_addr_gsm;
 8002bb0:	f8df b1e8 	ldr.w	fp, [pc, #488]	@ 8002d9c <StartGSM+0x5f4>
								Debug_printf("End address of connection outage. RECONNECTED SUCCESSFULLY: %08x\n", end_addr_disconnect);
 8002bb4:	486b      	ldr	r0, [pc, #428]	@ (8002d64 <StartGSM+0x5bc>)
 8002bb6:	9301      	str	r3, [sp, #4]
								is_disconnect = 0;
 8002bb8:	2200      	movs	r2, #0
 8002bba:	600a      	str	r2, [r1, #0]
								end_addr_disconnect = current_addr_gsm;
 8002bbc:	6831      	ldr	r1, [r6, #0]
 8002bbe:	f8cb 1000 	str.w	r1, [fp]
								Debug_printf("End address of connection outage. RECONNECTED SUCCESSFULLY: %08x\n", end_addr_disconnect);
 8002bc2:	f8db 1000 	ldr.w	r1, [fp]
 8002bc6:	f001 fce5 	bl	8004594 <Debug_printf>
								if(start_addr_disconnect >= (end_addr_disconnect)){
 8002bca:	6828      	ldr	r0, [r5, #0]
 8002bcc:	f8db 1000 	ldr.w	r1, [fp]
 8002bd0:	9b01      	ldr	r3, [sp, #4]
 8002bd2:	f8df b168 	ldr.w	fp, [pc, #360]	@ 8002d3c <StartGSM+0x594>
 8002bd6:	4288      	cmp	r0, r1
 8002bd8:	d335      	bcc.n	8002c46 <StartGSM+0x49e>
									Debug_printf("\n\n\n---------------Starting to get catch-up location data from MAIL QUEUE-------------\n\n\n\n");
 8002bda:	4863      	ldr	r0, [pc, #396]	@ (8002d68 <StartGSM+0x5c0>)
 8002bdc:	f001 fcda 	bl	8004594 <Debug_printf>
									mode = MAIL;
 8002be0:	2200      	movs	r2, #0
 8002be2:	f8c9 2000 	str.w	r2, [r9]
									is_using_flash = 0;
 8002be6:	f8cb 2000 	str.w	r2, [fp]
							if(is_disconnect == 1 || is_using_flash == 1){
 8002bea:	4b55      	ldr	r3, [pc, #340]	@ (8002d40 <StartGSM+0x598>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	2b01      	cmp	r3, #1
 8002bf0:	4b5e      	ldr	r3, [pc, #376]	@ (8002d6c <StartGSM+0x5c4>)
 8002bf2:	d003      	beq.n	8002bfc <StartGSM+0x454>
 8002bf4:	4a51      	ldr	r2, [pc, #324]	@ (8002d3c <StartGSM+0x594>)
 8002bf6:	6812      	ldr	r2, [r2, #0]
 8002bf8:	2a01      	cmp	r2, #1
 8002bfa:	d12a      	bne.n	8002c52 <StartGSM+0x4aa>
								result_address = start_addr_disconnect;
 8002bfc:	682a      	ldr	r2, [r5, #0]
 8002bfe:	601a      	str	r2, [r3, #0]
								if(result_address % 0x1000 == 0x0000 && result_address > 0){
 8002c00:	681a      	ldr	r2, [r3, #0]
 8002c02:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8002c06:	b92a      	cbnz	r2, 8002c14 <StartGSM+0x46c>
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	b11b      	cbz	r3, 8002c14 <StartGSM+0x46c>
									start_addr_disconnect -= 128*32;
 8002c0c:	682b      	ldr	r3, [r5, #0]
 8002c0e:	f5a3 5380 	sub.w	r3, r3, #4096	@ 0x1000
 8002c12:	602b      	str	r3, [r5, #0]
					osDelay(200);
 8002c14:	20c8      	movs	r0, #200	@ 0xc8
 8002c16:	f004 fd43 	bl	80076a0 <osDelay>
					if(is_ready_to_send == 0){
 8002c1a:	e73f      	b.n	8002a9c <StartGSM+0x2f4>
							is_ready_to_send = 1;
 8002c1c:	f8c8 2000 	str.w	r2, [r8]
							mode = MAIL;
 8002c20:	4a4b      	ldr	r2, [pc, #300]	@ (8002d50 <StartGSM+0x5a8>)
							Debug_printf("\n\n\n\n ------------------STARTING TO SEND THE CURRENT LOCATION DATA---------------- \n\n\n\n");
 8002c22:	4853      	ldr	r0, [pc, #332]	@ (8002d70 <StartGSM+0x5c8>)
							mode = MAIL;
 8002c24:	f8c2 b000 	str.w	fp, [r2]
							is_using_flash = 0;
 8002c28:	f8c3 b000 	str.w	fp, [r3]
							Debug_printf("\n\n\n\n ------------------STARTING TO SEND THE CURRENT LOCATION DATA---------------- \n\n\n\n");
 8002c2c:	f001 fcb2 	bl	8004594 <Debug_printf>
 8002c30:	e762      	b.n	8002af8 <StartGSM+0x350>
						receiveRMCDataWithAddrGSM();
 8002c32:	f7ff fc29 	bl	8002488 <receiveRMCDataWithAddrGSM>
 8002c36:	e75f      	b.n	8002af8 <StartGSM+0x350>
								sprintf(addr_out, "Address going to send to server at GSM:(STACK FROM FLASH MEMORY)  %08lx",  start_addr_disconnect);
 8002c38:	682a      	ldr	r2, [r5, #0]
 8002c3a:	494e      	ldr	r1, [pc, #312]	@ (8002d74 <StartGSM+0x5cc>)
 8002c3c:	e788      	b.n	8002b50 <StartGSM+0x3a8>
							sprintf(addr_out, "Stack address get when setting up GSM SIM module: %08lx", current_addr_not_ready);
 8002c3e:	4b3d      	ldr	r3, [pc, #244]	@ (8002d34 <StartGSM+0x58c>)
 8002c40:	494d      	ldr	r1, [pc, #308]	@ (8002d78 <StartGSM+0x5d0>)
 8002c42:	681a      	ldr	r2, [r3, #0]
 8002c44:	e784      	b.n	8002b50 <StartGSM+0x3a8>
									is_using_flash = 1;
 8002c46:	f8cb 3000 	str.w	r3, [fp]
									start_addr_disconnect += 128;
 8002c4a:	682b      	ldr	r3, [r5, #0]
 8002c4c:	3380      	adds	r3, #128	@ 0x80
 8002c4e:	602b      	str	r3, [r5, #0]
 8002c50:	e7cb      	b.n	8002bea <StartGSM+0x442>
								result_address = current_addr_gsm;
 8002c52:	6832      	ldr	r2, [r6, #0]
 8002c54:	601a      	str	r2, [r3, #0]
								if(result_address % 0x1000 == 0x0000 && result_address > 0){
 8002c56:	681a      	ldr	r2, [r3, #0]
 8002c58:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8002c5c:	2a00      	cmp	r2, #0
 8002c5e:	d1d9      	bne.n	8002c14 <StartGSM+0x46c>
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d0d6      	beq.n	8002c14 <StartGSM+0x46c>
									current_addr_gsm -= 128*32;
 8002c66:	6833      	ldr	r3, [r6, #0]
 8002c68:	f5a3 5380 	sub.w	r3, r3, #4096	@ 0x1000
 8002c6c:	6033      	str	r3, [r6, #0]
 8002c6e:	e7d1      	b.n	8002c14 <StartGSM+0x46c>
						else if(result_final == 2){
 8002c70:	2802      	cmp	r0, #2
 8002c72:	d112      	bne.n	8002c9a <StartGSM+0x4f2>
							memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8002c74:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8002c78:	2100      	movs	r1, #0
 8002c7a:	4839      	ldr	r0, [pc, #228]	@ (8002d60 <StartGSM+0x5b8>)
 8002c7c:	f008 f84e 	bl	800ad1c <memset>
							SIM_UART_ReInitializeRxDMA();
 8002c80:	f7fe f9d8 	bl	8001034 <SIM_UART_ReInitializeRxDMA>
							uart_transmit_string(&huart1,(uint8_t*) "Rebooting SIM module\n");
 8002c84:	493d      	ldr	r1, [pc, #244]	@ (8002d7c <StartGSM+0x5d4>)
 8002c86:	483e      	ldr	r0, [pc, #248]	@ (8002d80 <StartGSM+0x5d8>)
 8002c88:	f001 fc74 	bl	8004574 <uart_transmit_string>
							reboot_SIM_module();
 8002c8c:	f7fe fa32 	bl	80010f4 <reboot_SIM_module>
							process = 0;
 8002c90:	2500      	movs	r5, #0
				is_in_sending = 0;
 8002c92:	4a21      	ldr	r2, [pc, #132]	@ (8002d18 <StartGSM+0x570>)
 8002c94:	2300      	movs	r3, #0
 8002c96:	6013      	str	r3, [r2, #0]
				break;
 8002c98:	e610      	b.n	80028bc <StartGSM+0x114>
							uart_transmit_string(&huart1, (uint8_t *)"Sending ERROR\n");
 8002c9a:	493a      	ldr	r1, [pc, #232]	@ (8002d84 <StartGSM+0x5dc>)
							if(is_disconnect == 0){
 8002c9c:	f8df 90a0 	ldr.w	r9, [pc, #160]	@ 8002d40 <StartGSM+0x598>
							uart_transmit_string(&huart1, (uint8_t *)"Sending ERROR\n");
 8002ca0:	4620      	mov	r0, r4
 8002ca2:	f001 fc67 	bl	8004574 <uart_transmit_string>
							memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8002ca6:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8002caa:	2100      	movs	r1, #0
 8002cac:	482c      	ldr	r0, [pc, #176]	@ (8002d60 <StartGSM+0x5b8>)
 8002cae:	f008 f835 	bl	800ad1c <memset>
							SIM_UART_ReInitializeRxDMA();
 8002cb2:	f7fe f9bf 	bl	8001034 <SIM_UART_ReInitializeRxDMA>
							if(is_disconnect == 0){
 8002cb6:	f8d9 3000 	ldr.w	r3, [r9]
 8002cba:	b993      	cbnz	r3, 8002ce2 <StartGSM+0x53a>
								if(is_using_flash == 0){
 8002cbc:	f8df 807c 	ldr.w	r8, [pc, #124]	@ 8002d3c <StartGSM+0x594>
 8002cc0:	f8d8 3000 	ldr.w	r3, [r8]
 8002cc4:	b92b      	cbnz	r3, 8002cd2 <StartGSM+0x52a>
									start_addr_disconnect = current_addr_gsm;
 8002cc6:	6833      	ldr	r3, [r6, #0]
 8002cc8:	602b      	str	r3, [r5, #0]
									Debug_printf("Saving start address of connection outage: %08x\n", start_addr_disconnect);
 8002cca:	6829      	ldr	r1, [r5, #0]
 8002ccc:	482e      	ldr	r0, [pc, #184]	@ (8002d88 <StartGSM+0x5e0>)
 8002cce:	f001 fc61 	bl	8004594 <Debug_printf>
								mode = STORAGE;
 8002cd2:	4a1f      	ldr	r2, [pc, #124]	@ (8002d50 <StartGSM+0x5a8>)
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	6013      	str	r3, [r2, #0]
								is_disconnect = 1;
 8002cd8:	f8c9 3000 	str.w	r3, [r9]
								is_using_flash = 0;
 8002cdc:	2300      	movs	r3, #0
 8002cde:	f8c8 3000 	str.w	r3, [r8]
							process++;
 8002ce2:	2508      	movs	r5, #8
 8002ce4:	e7d5      	b.n	8002c92 <StartGSM+0x4ea>
				int result_close = close_connection(0);
 8002ce6:	2000      	movs	r0, #0
 8002ce8:	f7ff f9ec 	bl	80020c4 <close_connection>
					memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8002cec:	f44f 72c0 	mov.w	r2, #384	@ 0x180
				if(result_close){
 8002cf0:	4601      	mov	r1, r0
 8002cf2:	2800      	cmp	r0, #0
 8002cf4:	f43f adaa 	beq.w	800284c <StartGSM+0xa4>
					memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8002cf8:	2100      	movs	r1, #0
 8002cfa:	4819      	ldr	r0, [pc, #100]	@ (8002d60 <StartGSM+0x5b8>)
 8002cfc:	f008 f80e 	bl	800ad1c <memset>
					SIM_UART_ReInitializeRxDMA();
 8002d00:	f7fe f998 	bl	8001034 <SIM_UART_ReInitializeRxDMA>
					uart_transmit_string(&huart1,(uint8_t*) "REOPEN CONNECTION TO SERVER\n");
 8002d04:	4921      	ldr	r1, [pc, #132]	@ (8002d8c <StartGSM+0x5e4>)
 8002d06:	4620      	mov	r0, r4
 8002d08:	f001 fc34 	bl	8004574 <uart_transmit_string>
					process = 4;
 8002d0c:	e61d      	b.n	800294a <StartGSM+0x1a2>
 8002d0e:	4637      	mov	r7, r6
				else process++;
 8002d10:	2502      	movs	r5, #2
 8002d12:	e5d3      	b.n	80028bc <StartGSM+0x114>
					process++;
 8002d14:	2506      	movs	r5, #6
 8002d16:	e5d1      	b.n	80028bc <StartGSM+0x114>
 8002d18:	20000c5c 	.word	0x20000c5c
 8002d1c:	0800f96a 	.word	0x0800f96a
 8002d20:	20000c54 	.word	0x20000c54
 8002d24:	0800f98a 	.word	0x0800f98a
 8002d28:	0800f4bb 	.word	0x0800f4bb
 8002d2c:	20000c50 	.word	0x20000c50
 8002d30:	20000c48 	.word	0x20000c48
 8002d34:	20000c40 	.word	0x20000c40
 8002d38:	0800f67b 	.word	0x0800f67b
 8002d3c:	20000c60 	.word	0x20000c60
 8002d40:	20000c6c 	.word	0x20000c6c
 8002d44:	0800fa0a 	.word	0x0800fa0a
 8002d48:	0800fa41 	.word	0x0800fa41
 8002d4c:	0800fa62 	.word	0x0800fa62
 8002d50:	20000c58 	.word	0x20000c58
 8002d54:	0800fa94 	.word	0x0800fa94
 8002d58:	0800f71d 	.word	0x0800f71d
 8002d5c:	0800f72e 	.word	0x0800f72e
 8002d60:	20000c80 	.word	0x20000c80
 8002d64:	0800fb5a 	.word	0x0800fb5a
 8002d68:	0800fb9c 	.word	0x0800fb9c
 8002d6c:	20000e00 	.word	0x20000e00
 8002d70:	0800f9b3 	.word	0x0800f9b3
 8002d74:	0800fada 	.word	0x0800fada
 8002d78:	0800fb22 	.word	0x0800fb22
 8002d7c:	0800f7c7 	.word	0x0800f7c7
 8002d80:	20001250 	.word	0x20001250
 8002d84:	0800fbf6 	.word	0x0800fbf6
 8002d88:	0800fc05 	.word	0x0800fc05
 8002d8c:	0800fc36 	.word	0x0800fc36
 8002d90:	20000c44 	.word	0x20000c44
 8002d94:	20000c64 	.word	0x20000c64
 8002d98:	20000c68 	.word	0x20000c68
 8002d9c:	20000c4c 	.word	0x20000c4c

08002da0 <RingBufferDmaU8_initUSARTRx>:
// int daychange = 0;

uint8_t message1[] = "Hello from DSS\n";

void RingBufferDmaU8_initUSARTRx(RingBufferDmaU8_TypeDef* ring, UART_HandleTypeDef* husart, uint8_t* buffer, uint16_t size) // cai dat dma
{
 8002da0:	b410      	push	{r4}
 8002da2:	4604      	mov	r4, r0
 8002da4:	4608      	mov	r0, r1
  ring->buffer = buffer;
  ring->size = size;
 8002da6:	80a3      	strh	r3, [r4, #4]
{
 8002da8:	4611      	mov	r1, r2
 8002daa:	461a      	mov	r2, r3
  ring->tailPtr = buffer;
  ring->dmaHandle = husart->hdmarx;
 8002dac:	6f43      	ldr	r3, [r0, #116]	@ 0x74
  ring->buffer = buffer;
 8002dae:	6021      	str	r1, [r4, #0]
  ring->tailPtr = buffer;
 8002db0:	60a1      	str	r1, [r4, #8]
  ring->dmaHandle = husart->hdmarx;
 8002db2:	60e3      	str	r3, [r4, #12]
  HAL_UART_Receive_DMA(husart, buffer, size);
}
 8002db4:	f85d 4b04 	ldr.w	r4, [sp], #4
  HAL_UART_Receive_DMA(husart, buffer, size);
<<<<<<< HEAD
 8002db8:	f004 bc28 	b.w	800760c <HAL_UART_Receive_DMA>
=======
 8000fa8:	f004 b9da 	b.w	8005360 <HAL_UART_Receive_DMA>
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)

08002dbc <set_time>:
#include "RTC.h"
#include "system_management.h"
#include "spi_flash.h"

void set_time (uint8_t hr, uint8_t min, uint8_t sec)
{
 8002dbc:	b570      	push	{r4, r5, r6, lr}
 8002dbe:	b086      	sub	sp, #24
 8002dc0:	4606      	mov	r6, r0
 8002dc2:	460d      	mov	r5, r1
 8002dc4:	4614      	mov	r4, r2
	RTC_TimeTypeDef sTime = {0};
 8002dc6:	2100      	movs	r1, #0
 8002dc8:	2211      	movs	r2, #17
 8002dca:	f10d 0007 	add.w	r0, sp, #7
 8002dce:	f007 ffa5 	bl	800ad1c <memset>
	sTime.Hours = hr;
	sTime.Minutes = min;
	sTime.Seconds = sec;
	sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
	sTime.StoreOperation = RTC_STOREOPERATION_RESET;
	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8002dd2:	4808      	ldr	r0, [pc, #32]	@ (8002df4 <set_time+0x38>)
	sTime.Hours = hr;
 8002dd4:	f88d 6004 	strb.w	r6, [sp, #4]
	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8002dd8:	2200      	movs	r2, #0
 8002dda:	a901      	add	r1, sp, #4
	sTime.Minutes = min;
 8002ddc:	f88d 5005 	strb.w	r5, [sp, #5]
	sTime.Seconds = sec;
 8002de0:	f88d 4006 	strb.w	r4, [sp, #6]
	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8002de4:	f003 f8b6 	bl	8005f54 <HAL_RTC_SetTime>
 8002de8:	b108      	cbz	r0, 8002dee <set_time+0x32>
	{
		Error_Handler();
 8002dea:	f000 fb44 	bl	8003476 <Error_Handler>
	}
}
 8002dee:	b006      	add	sp, #24
 8002df0:	bd70      	pop	{r4, r5, r6, pc}
 8002df2:	bf00      	nop
 8002df4:	200013ec 	.word	0x200013ec

08002df8 <set_date>:

void set_date (uint8_t year, uint8_t month, uint8_t date)  // monday = 1
{
 8002df8:	b507      	push	{r0, r1, r2, lr}
	RTC_DateTypeDef sDate = {0};
 8002dfa:	2300      	movs	r3, #0
	sDate.Month = month;
 8002dfc:	f88d 1005 	strb.w	r1, [sp, #5]
	sDate.Date = date;
 8002e00:	f88d 2006 	strb.w	r2, [sp, #6]
	sDate.Year = year;
 8002e04:	f88d 0007 	strb.w	r0, [sp, #7]
	if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8002e08:	461a      	mov	r2, r3
 8002e0a:	4806      	ldr	r0, [pc, #24]	@ (8002e24 <set_date+0x2c>)
	RTC_DateTypeDef sDate = {0};
 8002e0c:	f88d 3004 	strb.w	r3, [sp, #4]
	if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8002e10:	a901      	add	r1, sp, #4
 8002e12:	f003 f8f9 	bl	8006008 <HAL_RTC_SetDate>
 8002e16:	b108      	cbz	r0, 8002e1c <set_date+0x24>
	{
		Error_Handler();
 8002e18:	f000 fb2d 	bl	8003476 <Error_Handler>
	}
}
 8002e1c:	b003      	add	sp, #12
 8002e1e:	f85d fb04 	ldr.w	pc, [sp], #4
 8002e22:	bf00      	nop
 8002e24:	200013ec 	.word	0x200013ec

08002e28 <get_RTC_time_date>:

void get_RTC_time_date(RMCSTRUCT *rmc)
{
 8002e28:	b5f0      	push	{r4, r5, r6, r7, lr}
	char date[12]; // "YYYY-MM-DD" format, 10 characters + null terminator
	RTC_DateTypeDef gDate;
	RTC_TimeTypeDef gTime;

	  /* Get the RTC current Time */
	HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BIN);
 8002e2a:	4d29      	ldr	r5, [pc, #164]	@ (8002ed0 <get_RTC_time_date+0xa8>)
{
 8002e2c:	b0b3      	sub	sp, #204	@ 0xcc
 8002e2e:	4604      	mov	r4, r0
	HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BIN);
 8002e30:	a90d      	add	r1, sp, #52	@ 0x34
 8002e32:	2200      	movs	r2, #0
 8002e34:	4628      	mov	r0, r5
 8002e36:	f003 f937 	bl	80060a8 <HAL_RTC_GetTime>
	/* Get the RTC current Date */
	HAL_RTC_GetDate(&hrtc, &gDate, RTC_FORMAT_BIN);
 8002e3a:	a906      	add	r1, sp, #24
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	4628      	mov	r0, r5
 8002e40:	f003 f955 	bl	80060ee <HAL_RTC_GetDate>

  /* Display time Format: hh:mm:ss */
  /* Format time as "HH:MM:SS" */
	snprintf(time, sizeof(time), "%02d:%02d:%02d\n", gTime.Hours, gTime.Minutes, gTime.Seconds);
 8002e44:	f89d 3036 	ldrb.w	r3, [sp, #54]	@ 0x36
	uart_transmit_string(&huart1,(uint8_t*) time);
 8002e48:	4d22      	ldr	r5, [pc, #136]	@ (8002ed4 <get_RTC_time_date+0xac>)
	snprintf(time, sizeof(time), "%02d:%02d:%02d\n", gTime.Hours, gTime.Minutes, gTime.Seconds);
 8002e4a:	9301      	str	r3, [sp, #4]
 8002e4c:	f89d 3035 	ldrb.w	r3, [sp, #53]	@ 0x35
 8002e50:	4a21      	ldr	r2, [pc, #132]	@ (8002ed8 <get_RTC_time_date+0xb0>)
 8002e52:	9300      	str	r3, [sp, #0]
 8002e54:	210a      	movs	r1, #10
 8002e56:	f89d 3034 	ldrb.w	r3, [sp, #52]	@ 0x34
 8002e5a:	a807      	add	r0, sp, #28
 8002e5c:	f007 fe62 	bl	800ab24 <sniprintf>
	uart_transmit_string(&huart1,(uint8_t*) time);
 8002e60:	a907      	add	r1, sp, #28
 8002e62:	4628      	mov	r0, r5
 8002e64:	f001 fb86 	bl	8004574 <uart_transmit_string>

	/* Format date as "YYYY-MM-DD" */
	snprintf(date, sizeof(date), "20%02d-%02d-%02d\n", gDate.Year, gDate.Month, gDate.Date);
 8002e68:	f89d 301a 	ldrb.w	r3, [sp, #26]
 8002e6c:	9301      	str	r3, [sp, #4]
 8002e6e:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8002e72:	4a1a      	ldr	r2, [pc, #104]	@ (8002edc <get_RTC_time_date+0xb4>)
 8002e74:	9300      	str	r3, [sp, #0]
 8002e76:	210c      	movs	r1, #12
 8002e78:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8002e7c:	a80a      	add	r0, sp, #40	@ 0x28
 8002e7e:	f007 fe51 	bl	800ab24 <sniprintf>
	uart_transmit_string(&huart1,(uint8_t*) date);
 8002e82:	a90a      	add	r1, sp, #40	@ 0x28
 8002e84:	4628      	mov	r0, r5
 8002e86:	f001 fb75 	bl	8004574 <uart_transmit_string>

	rmc->date.Yr = gDate.Year;
	rmc->date.Mon = gDate.Month;
	rmc->date.Day = gDate.Date;
 8002e8a:	f89d 101a 	ldrb.w	r1, [sp, #26]
	rmc->tim.hour = gTime.Hours;
 8002e8e:	f89d 0034 	ldrb.w	r0, [sp, #52]	@ 0x34
	rmc->tim.min = gTime.Minutes;
 8002e92:	f89d 6035 	ldrb.w	r6, [sp, #53]	@ 0x35
	rmc->tim.sec = gTime.Seconds;
 8002e96:	f89d 7036 	ldrb.w	r7, [sp, #54]	@ 0x36
	rmc->date.Mon = gDate.Month;
 8002e9a:	f89d 2019 	ldrb.w	r2, [sp, #25]
	rmc->date.Yr = gDate.Year;
 8002e9e:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8002ea2:	61a3      	str	r3, [r4, #24]
	rmc->date.Mon = gDate.Month;
 8002ea4:	6162      	str	r2, [r4, #20]
	rmc->date.Day = gDate.Date;
 8002ea6:	6121      	str	r1, [r4, #16]
	rmc->tim.hour = gTime.Hours;
 8002ea8:	6020      	str	r0, [r4, #0]
	rmc->tim.min = gTime.Minutes;
 8002eaa:	6066      	str	r6, [r4, #4]
	rmc->tim.sec = gTime.Seconds;
 8002eac:	60a7      	str	r7, [r4, #8]

	//save_rmc_to_location_info(location_info);
	snprintf((char*)output_buffer, 128, "Time to GMT+8 saved to RMC: 20%02d/%02d/%02d, %02d:%02d:%02d\n", rmc->date.Yr, rmc->date.Mon, rmc->date.Day, rmc->tim.hour, rmc->tim.min, rmc->tim.sec);
 8002eae:	e9cd 1001 	strd	r1, r0, [sp, #4]
 8002eb2:	9200      	str	r2, [sp, #0]
 8002eb4:	e9cd 6703 	strd	r6, r7, [sp, #12]
 8002eb8:	4a09      	ldr	r2, [pc, #36]	@ (8002ee0 <get_RTC_time_date+0xb8>)
 8002eba:	2180      	movs	r1, #128	@ 0x80
 8002ebc:	a812      	add	r0, sp, #72	@ 0x48
 8002ebe:	f007 fe31 	bl	800ab24 <sniprintf>
	uart_transmit_string(&huart1, (uint8_t*) output_buffer);
 8002ec2:	a912      	add	r1, sp, #72	@ 0x48
 8002ec4:	4628      	mov	r0, r5
 8002ec6:	f001 fb55 	bl	8004574 <uart_transmit_string>
}
 8002eca:	b033      	add	sp, #204	@ 0xcc
 8002ecc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002ece:	bf00      	nop
 8002ed0:	200013ec 	.word	0x200013ec
 8002ed4:	20001250 	.word	0x20001250
 8002ed8:	0800ed2f 	.word	0x0800ed2f
 8002edc:	0800fc64 	.word	0x0800fc64
 8002ee0:	0800fc76 	.word	0x0800fc76

08002ee4 <vApplicationGetIdleTaskMemory>:
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8002ee4:	4b03      	ldr	r3, [pc, #12]	@ (8002ef4 <vApplicationGetIdleTaskMemory+0x10>)
 8002ee6:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8002ee8:	4b03      	ldr	r3, [pc, #12]	@ (8002ef8 <vApplicationGetIdleTaskMemory+0x14>)
 8002eea:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8002eec:	2380      	movs	r3, #128	@ 0x80
 8002eee:	6013      	str	r3, [r2, #0]
  /* place for user code */
}
 8002ef0:	4770      	bx	lr
 8002ef2:	bf00      	nop
 8002ef4:	20001010 	.word	0x20001010
 8002ef8:	20000e10 	.word	0x20000e10

<<<<<<< HEAD
08002efc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
=======
08000fc4 <StartDefaultTask>:
  * @param  argument: Not used
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
<<<<<<< HEAD
 8002efc:	b500      	push	{lr}
 8002efe:	b09f      	sub	sp, #124	@ 0x7c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002f00:	2228      	movs	r2, #40	@ 0x28
 8002f02:	2100      	movs	r1, #0
 8002f04:	a805      	add	r0, sp, #20
 8002f06:	f007 ff09 	bl	800ad1c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002f0a:	2214      	movs	r2, #20
 8002f0c:	2100      	movs	r1, #0
 8002f0e:	4668      	mov	r0, sp
 8002f10:	f007 ff04 	bl	800ad1c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002f14:	223c      	movs	r2, #60	@ 0x3c
 8002f16:	2100      	movs	r1, #0
 8002f18:	eb0d 0002 	add.w	r0, sp, r2
 8002f1c:	f007 fefe 	bl	800ad1c <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8002f20:	f002 fafc 	bl	800551c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8002f24:	4a1d      	ldr	r2, [pc, #116]	@ (8002f9c <SystemClock_Config+0xa0>)
 8002f26:	6a13      	ldr	r3, [r2, #32]
 8002f28:	f023 0318 	bic.w	r3, r3, #24
 8002f2c:	6213      	str	r3, [r2, #32]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 8002f2e:	2306      	movs	r3, #6
 8002f30:	9305      	str	r3, [sp, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8002f32:	2301      	movs	r3, #1
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002f34:	e9cd 3308 	strd	r3, r3, [sp, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002f38:	2310      	movs	r3, #16
 8002f3a:	930a      	str	r3, [sp, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002f3c:	2002      	movs	r0, #2
 8002f3e:	2300      	movs	r3, #0
 8002f40:	e9cd 030c 	strd	r0, r3, [sp, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 8002f44:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002f48:	a805      	add	r0, sp, #20
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 8002f4a:	930e      	str	r3, [sp, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002f4c:	f002 faee 	bl	800552c <HAL_RCC_OscConfig>
 8002f50:	4601      	mov	r1, r0
 8002f52:	b108      	cbz	r0, 8002f58 <SystemClock_Config+0x5c>
=======
 8000fc4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000fc6:	2001      	movs	r0, #1
 8000fc8:	f004 fa14 	bl	80053f4 <osDelay>
  for(;;)
 8000fcc:	e7fb      	b.n	8000fc6 <StartDefaultTask+0x2>
	...

08000fd0 <SystemClock_Config>:
{
 8000fd0:	b500      	push	{lr}
 8000fd2:	b09f      	sub	sp, #124	@ 0x7c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fd4:	2228      	movs	r2, #40	@ 0x28
 8000fd6:	2100      	movs	r1, #0
 8000fd8:	a805      	add	r0, sp, #20
 8000fda:	f007 fd39 	bl	8008a50 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fde:	2214      	movs	r2, #20
 8000fe0:	2100      	movs	r1, #0
 8000fe2:	4668      	mov	r0, sp
 8000fe4:	f007 fd34 	bl	8008a50 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000fe8:	223c      	movs	r2, #60	@ 0x3c
 8000fea:	2100      	movs	r1, #0
 8000fec:	eb0d 0002 	add.w	r0, sp, r2
 8000ff0:	f007 fd2e 	bl	8008a50 <memset>
  HAL_PWR_EnableBkUpAccess();
 8000ff4:	f002 fa28 	bl	8003448 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000ff8:	4a1d      	ldr	r2, [pc, #116]	@ (8001070 <SystemClock_Config+0xa0>)
 8000ffa:	6a13      	ldr	r3, [r2, #32]
 8000ffc:	f023 0318 	bic.w	r3, r3, #24
 8001000:	6213      	str	r3, [r2, #32]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 8001002:	2306      	movs	r3, #6
 8001004:	9305      	str	r3, [sp, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001006:	2301      	movs	r3, #1
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001008:	e9cd 3308 	strd	r3, r3, [sp, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800100c:	2310      	movs	r3, #16
 800100e:	930a      	str	r3, [sp, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001010:	2002      	movs	r0, #2
 8001012:	2300      	movs	r3, #0
 8001014:	e9cd 030c 	strd	r0, r3, [sp, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 8001018:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800101c:	a805      	add	r0, sp, #20
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 800101e:	930e      	str	r3, [sp, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001020:	f002 fa1a 	bl	8003458 <HAL_RCC_OscConfig>
 8001024:	4601      	mov	r1, r0
 8001026:	b108      	cbz	r0, 800102c <SystemClock_Config+0x5c>
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
<<<<<<< HEAD
 8002f54:	b672      	cpsid	i
=======
 8001028:	b672      	cpsid	i
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
<<<<<<< HEAD
 8002f56:	e7fe      	b.n	8002f56 <SystemClock_Config+0x5a>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002f58:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002f5a:	e9cd 3000 	strd	r3, r0, [sp]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002f5e:	e9cd 0002 	strd	r0, r0, [sp, #8]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002f62:	9004      	str	r0, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002f64:	4668      	mov	r0, sp
 8002f66:	f002 fd61 	bl	8005a2c <HAL_RCC_ClockConfig>
 8002f6a:	b108      	cbz	r0, 8002f70 <SystemClock_Config+0x74>
 8002f6c:	b672      	cpsid	i
  while (1)
 8002f6e:	e7fe      	b.n	8002f6e <SystemClock_Config+0x72>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 8002f70:	4b0b      	ldr	r3, [pc, #44]	@ (8002fa0 <SystemClock_Config+0xa4>)
 8002f72:	930f      	str	r3, [sp, #60]	@ 0x3c
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002f74:	e9cd 0011 	strd	r0, r0, [sp, #68]	@ 0x44
  PeriphClkInit.Adc34ClockSelection = RCC_ADC34PLLCLK_DIV1;
 8002f78:	f44f 7380 	mov.w	r3, #256	@ 0x100
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002f7c:	9013      	str	r0, [sp, #76]	@ 0x4c
  PeriphClkInit.Adc34ClockSelection = RCC_ADC34PLLCLK_DIV1;
 8002f7e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002f82:	a80f      	add	r0, sp, #60	@ 0x3c
  PeriphClkInit.Adc34ClockSelection = RCC_ADC34PLLCLK_DIV1;
 8002f84:	e9cd 3218 	strd	r3, r2, [sp, #96]	@ 0x60
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8002f88:	9310      	str	r3, [sp, #64]	@ 0x40
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002f8a:	f002 fe45 	bl	8005c18 <HAL_RCCEx_PeriphCLKConfig>
 8002f8e:	b108      	cbz	r0, 8002f94 <SystemClock_Config+0x98>
 8002f90:	b672      	cpsid	i
  while (1)
 8002f92:	e7fe      	b.n	8002f92 <SystemClock_Config+0x96>
}
 8002f94:	b01f      	add	sp, #124	@ 0x7c
 8002f96:	f85d fb04 	ldr.w	pc, [sp], #4
 8002f9a:	bf00      	nop
 8002f9c:	40021000 	.word	0x40021000
 8002fa0:	00010187 	.word	0x00010187

08002fa4 <main>:
{
 8002fa4:	b580      	push	{r7, lr}
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002fa6:	4db9      	ldr	r5, [pc, #740]	@ (800328c <main+0x2e8>)
{
 8002fa8:	b09c      	sub	sp, #112	@ 0x70
  HAL_Init();
 8002faa:	f001 fb3f 	bl	800462c <HAL_Init>
  SystemClock_Config();
 8002fae:	f7ff ffa5 	bl	8002efc <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fb2:	2214      	movs	r2, #20
 8002fb4:	2100      	movs	r1, #0
 8002fb6:	a815      	add	r0, sp, #84	@ 0x54
 8002fb8:	f007 feb0 	bl	800ad1c <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002fbc:	696b      	ldr	r3, [r5, #20]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
 8002fbe:	48b4      	ldr	r0, [pc, #720]	@ (8003290 <main+0x2ec>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002fc0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8002fc4:	616b      	str	r3, [r5, #20]
 8002fc6:	696b      	ldr	r3, [r5, #20]
 8002fc8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002fcc:	9302      	str	r3, [sp, #8]
 8002fce:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fd0:	696b      	ldr	r3, [r5, #20]
 8002fd2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002fd6:	616b      	str	r3, [r5, #20]
 8002fd8:	696b      	ldr	r3, [r5, #20]
 8002fda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fde:	9303      	str	r3, [sp, #12]
 8002fe0:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002fe2:	696b      	ldr	r3, [r5, #20]
 8002fe4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002fe8:	616b      	str	r3, [r5, #20]
 8002fea:	696b      	ldr	r3, [r5, #20]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
 8002fec:	2201      	movs	r2, #1
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002fee:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
 8002ff2:	4611      	mov	r1, r2
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ff4:	9304      	str	r3, [sp, #16]
 8002ff6:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
 8002ff8:	f002 fa8a 	bl	8005510 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_6
 8002ffc:	48a4      	ldr	r0, [pc, #656]	@ (8003290 <main+0x2ec>)
 8002ffe:	2200      	movs	r2, #0
 8003000:	f240 2156 	movw	r1, #598	@ 0x256
 8003004:	f002 fa84 	bl	8005510 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 8003008:	48a2      	ldr	r0, [pc, #648]	@ (8003294 <main+0x2f0>)
 800300a:	2200      	movs	r2, #0
 800300c:	2104      	movs	r1, #4
 800300e:	f002 fa7f 	bl	8005510 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8003012:	48a0      	ldr	r0, [pc, #640]	@ (8003294 <main+0x2f0>)
 8003014:	2201      	movs	r2, #1
 8003016:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800301a:	f002 fa79 	bl	8005510 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
 800301e:	2201      	movs	r2, #1
 8003020:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003024:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003028:	2400      	movs	r4, #0
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
 800302a:	f002 fa71 	bl	8005510 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800302e:	2701      	movs	r7, #1
 8003030:	f240 2303 	movw	r3, #515	@ 0x203
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003034:	4896      	ldr	r0, [pc, #600]	@ (8003290 <main+0x2ec>)
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003036:	9717      	str	r7, [sp, #92]	@ 0x5c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003038:	a915      	add	r1, sp, #84	@ 0x54
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800303a:	e9cd 3715 	strd	r3, r7, [sp, #84]	@ 0x54
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800303e:	9418      	str	r4, [sp, #96]	@ 0x60
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003040:	f002 f9a2 	bl	8005388 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_6;
 8003044:	2354      	movs	r3, #84	@ 0x54
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003046:	eb0d 0103 	add.w	r1, sp, r3
 800304a:	4891      	ldr	r0, [pc, #580]	@ (8003290 <main+0x2ec>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800304c:	e9cd 3715 	strd	r3, r7, [sp, #84]	@ 0x54
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003050:	e9cd 4417 	strd	r4, r4, [sp, #92]	@ 0x5c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003054:	f002 f998 	bl	8005388 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8003058:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800305a:	488e      	ldr	r0, [pc, #568]	@ (8003294 <main+0x2f0>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800305c:	9417      	str	r4, [sp, #92]	@ 0x5c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800305e:	a915      	add	r1, sp, #84	@ 0x54
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003060:	e9cd 3415 	strd	r3, r4, [sp, #84]	@ 0x54
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003064:	f002 f990 	bl	8005388 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003068:	2304      	movs	r3, #4
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800306a:	488a      	ldr	r0, [pc, #552]	@ (8003294 <main+0x2f0>)
 800306c:	a915      	add	r1, sp, #84	@ 0x54
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800306e:	e9cd 3715 	strd	r3, r7, [sp, #84]	@ 0x54
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003072:	f04f 0803 	mov.w	r8, #3
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003076:	e9cd 4417 	strd	r4, r4, [sp, #92]	@ 0x5c
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 800307a:	f44f 5680 	mov.w	r6, #4096	@ 0x1000
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800307e:	f002 f983 	bl	8005388 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003082:	4884      	ldr	r0, [pc, #528]	@ (8003294 <main+0x2f0>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003084:	f8cd 8060 	str.w	r8, [sp, #96]	@ 0x60
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003088:	a915      	add	r1, sp, #84	@ 0x54
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800308a:	e9cd 6715 	strd	r6, r7, [sp, #84]	@ 0x54
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800308e:	9717      	str	r7, [sp, #92]	@ 0x5c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003090:	f002 f97a 	bl	8005388 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8003094:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003098:	a915      	add	r1, sp, #84	@ 0x54
 800309a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800309e:	e9cd 3715 	strd	r3, r7, [sp, #84]	@ 0x54
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80030a2:	e9cd 7817 	strd	r7, r8, [sp, #92]	@ 0x5c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030a6:	f002 f96f 	bl	8005388 <HAL_GPIO_Init>
  __HAL_RCC_DMA1_CLK_ENABLE();
 80030aa:	696b      	ldr	r3, [r5, #20]
 80030ac:	433b      	orrs	r3, r7
 80030ae:	616b      	str	r3, [r5, #20]
 80030b0:	696b      	ldr	r3, [r5, #20]
 80030b2:	403b      	ands	r3, r7
 80030b4:	9300      	str	r3, [sp, #0]
 80030b6:	9b00      	ldr	r3, [sp, #0]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80030b8:	696b      	ldr	r3, [r5, #20]
 80030ba:	f043 0302 	orr.w	r3, r3, #2
 80030be:	616b      	str	r3, [r5, #20]
 80030c0:	696b      	ldr	r3, [r5, #20]
  hrtc.Instance = RTC;
 80030c2:	4d75      	ldr	r5, [pc, #468]	@ (8003298 <main+0x2f4>)
  __HAL_RCC_DMA2_CLK_ENABLE();
 80030c4:	f003 0302 	and.w	r3, r3, #2
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 5, 0);
 80030c8:	4622      	mov	r2, r4
 80030ca:	2105      	movs	r1, #5
  __HAL_RCC_DMA2_CLK_ENABLE();
 80030cc:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 5, 0);
 80030ce:	200d      	movs	r0, #13
  __HAL_RCC_DMA2_CLK_ENABLE();
 80030d0:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 5, 0);
 80030d2:	f002 f835 	bl	8005140 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80030d6:	200d      	movs	r0, #13
 80030d8:	f002 f864 	bl	80051a4 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 5, 0);
 80030dc:	4622      	mov	r2, r4
 80030de:	2105      	movs	r1, #5
 80030e0:	200f      	movs	r0, #15
 80030e2:	f002 f82d 	bl	8005140 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80030e6:	200f      	movs	r0, #15
 80030e8:	f002 f85c 	bl	80051a4 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 5, 0);
 80030ec:	4622      	mov	r2, r4
 80030ee:	2105      	movs	r1, #5
 80030f0:	2010      	movs	r0, #16
 80030f2:	f002 f825 	bl	8005140 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80030f6:	2010      	movs	r0, #16
 80030f8:	f002 f854 	bl	80051a4 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Channel1_IRQn, 5, 0);
 80030fc:	4622      	mov	r2, r4
 80030fe:	2105      	movs	r1, #5
 8003100:	2038      	movs	r0, #56	@ 0x38
 8003102:	f002 f81d 	bl	8005140 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 8003106:	2038      	movs	r0, #56	@ 0x38
 8003108:	f002 f84c 	bl	80051a4 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Channel5_IRQn, 5, 0);
 800310c:	4622      	mov	r2, r4
 800310e:	2105      	movs	r1, #5
 8003110:	203c      	movs	r0, #60	@ 0x3c
 8003112:	f002 f815 	bl	8005140 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel5_IRQn);
 8003116:	203c      	movs	r0, #60	@ 0x3c
 8003118:	f002 f844 	bl	80051a4 <HAL_NVIC_EnableIRQ>
  RTC_TimeTypeDef sTime = {0};
 800311c:	2214      	movs	r2, #20
 800311e:	4621      	mov	r1, r4
 8003120:	a815      	add	r0, sp, #84	@ 0x54
 8003122:	f007 fdfb 	bl	800ad1c <memset>
  hrtc.Instance = RTC;
 8003126:	4b5d      	ldr	r3, [pc, #372]	@ (800329c <main+0x2f8>)
  RTC_DateTypeDef sDate = {0};
 8003128:	940e      	str	r4, [sp, #56]	@ 0x38
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800312a:	e9c5 3400 	strd	r3, r4, [r5]
  hrtc.Init.SynchPrediv = 255;
 800312e:	f04f 087f 	mov.w	r8, #127	@ 0x7f
 8003132:	23ff      	movs	r3, #255	@ 0xff
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8003134:	4628      	mov	r0, r5
  hrtc.Init.SynchPrediv = 255;
 8003136:	e9c5 8302 	strd	r8, r3, [r5, #8]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800313a:	e9c5 4404 	strd	r4, r4, [r5, #16]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800313e:	61ac      	str	r4, [r5, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8003140:	f002 feb5 	bl	8005eae <HAL_RTC_Init>
 8003144:	b108      	cbz	r0, 800314a <main+0x1a6>
 8003146:	b672      	cpsid	i
  while (1)
 8003148:	e7fe      	b.n	8003148 <main+0x1a4>
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800314a:	e9cd 0018 	strd	r0, r0, [sp, #96]	@ 0x60
  sTime.Hours = 0x0;
 800314e:	f8ad 0054 	strh.w	r0, [sp, #84]	@ 0x54
  sTime.Seconds = 0x0;
 8003152:	f88d 0056 	strb.w	r0, [sp, #86]	@ 0x56
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8003156:	463a      	mov	r2, r7
 8003158:	a915      	add	r1, sp, #84	@ 0x54
 800315a:	4628      	mov	r0, r5
 800315c:	f002 fefa 	bl	8005f54 <HAL_RTC_SetTime>
 8003160:	b108      	cbz	r0, 8003166 <main+0x1c2>
 8003162:	b672      	cpsid	i
  while (1)
 8003164:	e7fe      	b.n	8003164 <main+0x1c0>
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8003166:	4b4e      	ldr	r3, [pc, #312]	@ (80032a0 <main+0x2fc>)
 8003168:	930e      	str	r3, [sp, #56]	@ 0x38
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800316a:	463a      	mov	r2, r7
 800316c:	a90e      	add	r1, sp, #56	@ 0x38
 800316e:	4628      	mov	r0, r5
 8003170:	f002 ff4a 	bl	8006008 <HAL_RTC_SetDate>
 8003174:	4603      	mov	r3, r0
 8003176:	b108      	cbz	r0, 800317c <main+0x1d8>
 8003178:	b672      	cpsid	i
  while (1)
 800317a:	e7fe      	b.n	800317a <main+0x1d6>
  hspi1.Instance = SPI1;
 800317c:	4849      	ldr	r0, [pc, #292]	@ (80032a4 <main+0x300>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800317e:	f8df e144 	ldr.w	lr, [pc, #324]	@ 80032c4 <main+0x320>
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003182:	6083      	str	r3, [r0, #8]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003184:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003188:	e9c0 e200 	strd	lr, r2, [r0]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800318c:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003190:	e9c0 2303 	strd	r2, r3, [r0, #12]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8003194:	2510      	movs	r5, #16
 8003196:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800319a:	e9c0 2506 	strd	r2, r5, [r0, #24]
  hspi1.Init.CRCPolynomial = 7;
 800319e:	2207      	movs	r2, #7
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80031a0:	e9c0 3308 	strd	r3, r3, [r0, #32]
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80031a4:	e9c0 230b 	strd	r2, r3, [r0, #44]	@ 0x2c
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80031a8:	6143      	str	r3, [r0, #20]
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80031aa:	6283      	str	r3, [r0, #40]	@ 0x28
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80031ac:	2308      	movs	r3, #8
 80031ae:	6343      	str	r3, [r0, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80031b0:	f003 f8c9 	bl	8006346 <HAL_SPI_Init>
 80031b4:	4603      	mov	r3, r0
 80031b6:	b108      	cbz	r0, 80031bc <main+0x218>
 80031b8:	b672      	cpsid	i
  while (1)
 80031ba:	e7fe      	b.n	80031ba <main+0x216>
  huart1.Instance = USART1;
 80031bc:	483a      	ldr	r0, [pc, #232]	@ (80032a8 <main+0x304>)
  huart1.Init.BaudRate = 115200;
 80031be:	4a3b      	ldr	r2, [pc, #236]	@ (80032ac <main+0x308>)
  huart1.Init.Parity = UART_PARITY_NONE;
 80031c0:	6103      	str	r3, [r0, #16]
  huart1.Init.BaudRate = 115200;
 80031c2:	f44f 34e1 	mov.w	r4, #115200	@ 0x1c200
  huart1.Init.Mode = UART_MODE_TX_RX;
 80031c6:	270c      	movs	r7, #12
  huart1.Init.StopBits = UART_STOPBITS_1;
 80031c8:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80031cc:	e9c0 7305 	strd	r7, r3, [r0, #20]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80031d0:	e9c0 3307 	strd	r3, r3, [r0, #28]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80031d4:	6243      	str	r3, [r0, #36]	@ 0x24
  huart1.Init.BaudRate = 115200;
 80031d6:	e9c0 2400 	strd	r2, r4, [r0]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80031da:	f004 f99b 	bl	8007514 <HAL_UART_Init>
 80031de:	4603      	mov	r3, r0
 80031e0:	b108      	cbz	r0, 80031e6 <main+0x242>
 80031e2:	b672      	cpsid	i
  while (1)
 80031e4:	e7fe      	b.n	80031e4 <main+0x240>
  huart2.Instance = USART2;
 80031e6:	4832      	ldr	r0, [pc, #200]	@ (80032b0 <main+0x30c>)
  huart2.Init.BaudRate = 9600;
 80031e8:	f8df c0dc 	ldr.w	ip, [pc, #220]	@ 80032c8 <main+0x324>
 80031ec:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
  huart2.Init.StopBits = UART_STOPBITS_1;
 80031f0:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80031f4:	e9c0 3704 	strd	r3, r7, [r0, #16]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80031f8:	e9c0 3306 	strd	r3, r3, [r0, #24]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80031fc:	e9c0 3308 	strd	r3, r3, [r0, #32]
  huart2.Init.BaudRate = 9600;
 8003200:	e9c0 c200 	strd	ip, r2, [r0]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003204:	f004 f986 	bl	8007514 <HAL_UART_Init>
 8003208:	4603      	mov	r3, r0
 800320a:	b108      	cbz	r0, 8003210 <main+0x26c>
 800320c:	b672      	cpsid	i
  while (1)
 800320e:	e7fe      	b.n	800320e <main+0x26a>
  huart3.Instance = USART3;
 8003210:	4828      	ldr	r0, [pc, #160]	@ (80032b4 <main+0x310>)
 8003212:	4a29      	ldr	r2, [pc, #164]	@ (80032b8 <main+0x314>)
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003214:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart3.Init.BaudRate = 115200;
 8003218:	e9c0 2400 	strd	r2, r4, [r0]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800321c:	e9c0 3704 	strd	r3, r7, [r0, #16]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003220:	e9c0 3306 	strd	r3, r3, [r0, #24]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003224:	e9c0 3308 	strd	r3, r3, [r0, #32]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8003228:	f004 f974 	bl	8007514 <HAL_UART_Init>
 800322c:	4604      	mov	r4, r0
 800322e:	b108      	cbz	r0, 8003234 <main+0x290>
 8003230:	b672      	cpsid	i
  while (1)
 8003232:	e7fe      	b.n	8003232 <main+0x28e>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003234:	462a      	mov	r2, r5
 8003236:	4601      	mov	r1, r0
 8003238:	a815      	add	r0, sp, #84	@ 0x54
 800323a:	f007 fd6f 	bl	800ad1c <memset>
  htim3.Instance = TIM3;
 800323e:	4d1f      	ldr	r5, [pc, #124]	@ (80032bc <main+0x318>)
  htim3.Init.Prescaler = 8000;
 8003240:	481f      	ldr	r0, [pc, #124]	@ (80032c0 <main+0x31c>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003242:	9410      	str	r4, [sp, #64]	@ 0x40
  htim3.Init.Prescaler = 8000;
 8003244:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8003248:	e9c5 0300 	strd	r0, r3, [r5]
  htim3.Init.Period = 65535;
 800324c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003250:	4628      	mov	r0, r5
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003252:	e9cd 440e 	strd	r4, r4, [sp, #56]	@ 0x38
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003256:	e9c5 3403 	strd	r3, r4, [r5, #12]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800325a:	60ac      	str	r4, [r5, #8]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800325c:	61ac      	str	r4, [r5, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800325e:	f003 fd01 	bl	8006c64 <HAL_TIM_Base_Init>
 8003262:	b108      	cbz	r0, 8003268 <main+0x2c4>
 8003264:	b672      	cpsid	i
  while (1)
 8003266:	e7fe      	b.n	8003266 <main+0x2c2>
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003268:	a915      	add	r1, sp, #84	@ 0x54
 800326a:	4628      	mov	r0, r5
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800326c:	9615      	str	r6, [sp, #84]	@ 0x54
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800326e:	f003 fd33 	bl	8006cd8 <HAL_TIM_ConfigClockSource>
 8003272:	b108      	cbz	r0, 8003278 <main+0x2d4>
 8003274:	b672      	cpsid	i
  while (1)
 8003276:	e7fe      	b.n	8003276 <main+0x2d2>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003278:	900e      	str	r0, [sp, #56]	@ 0x38
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800327a:	9010      	str	r0, [sp, #64]	@ 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800327c:	a90e      	add	r1, sp, #56	@ 0x38
 800327e:	4628      	mov	r0, r5
 8003280:	f003 fdc4 	bl	8006e0c <HAL_TIMEx_MasterConfigSynchronization>
 8003284:	b310      	cbz	r0, 80032cc <main+0x328>
 8003286:	b672      	cpsid	i
  while (1)
 8003288:	e7fe      	b.n	8003288 <main+0x2e4>
 800328a:	bf00      	nop
 800328c:	40021000 	.word	0x40021000
 8003290:	48000800 	.word	0x48000800
 8003294:	48000400 	.word	0x48000400
 8003298:	200013ec 	.word	0x200013ec
 800329c:	40002800 	.word	0x40002800
 80032a0:	00010101 	.word	0x00010101
 80032a4:	20001388 	.word	0x20001388
 80032a8:	20001250 	.word	0x20001250
 80032ac:	40013800 	.word	0x40013800
 80032b0:	200011c8 	.word	0x200011c8
 80032b4:	20001140 	.word	0x20001140
 80032b8:	40004800 	.word	0x40004800
 80032bc:	200012d8 	.word	0x200012d8
 80032c0:	40000400 	.word	0x40000400
 80032c4:	40013000 	.word	0x40013000
 80032c8:	40004400 	.word	0x40004400
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80032cc:	4c5b      	ldr	r4, [pc, #364]	@ (800343c <main+0x498>)
  ADC_ChannelConfTypeDef sConfig = {0};
 80032ce:	2218      	movs	r2, #24
 80032d0:	2100      	movs	r1, #0
 80032d2:	a815      	add	r0, sp, #84	@ 0x54
 80032d4:	f007 fd22 	bl	800ad1c <memset>
  hadc2.Instance = ADC2;
 80032d8:	4a59      	ldr	r2, [pc, #356]	@ (8003440 <main+0x49c>)
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80032da:	2300      	movs	r3, #0
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80032dc:	2601      	movs	r6, #1
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80032de:	2704      	movs	r7, #4
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80032e0:	4620      	mov	r0, r4
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80032e2:	e9c4 2300 	strd	r2, r3, [r4]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80032e6:	e9c4 3302 	strd	r3, r3, [r4, #8]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80032ea:	f884 3020 	strb.w	r3, [r4, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80032ee:	62e3      	str	r3, [r4, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80032f0:	62a6      	str	r6, [r4, #40]	@ 0x28
  hadc2.Init.NbrOfConversion = 1;
 80032f2:	61e6      	str	r6, [r4, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80032f4:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80032f8:	6123      	str	r3, [r4, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80032fa:	6167      	str	r7, [r4, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80032fc:	8323      	strh	r3, [r4, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80032fe:	6363      	str	r3, [r4, #52]	@ 0x34
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8003300:	f001 fa02 	bl	8004708 <HAL_ADC_Init>
 8003304:	b108      	cbz	r0, 800330a <main+0x366>
 8003306:	b672      	cpsid	i
  while (1)
 8003308:	e7fe      	b.n	8003308 <main+0x364>
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800330a:	e9cd 0017 	strd	r0, r0, [sp, #92]	@ 0x5c
  sConfig.Offset = 0;
 800330e:	e9cd 0019 	strd	r0, r0, [sp, #100]	@ 0x64
  sConfig.Channel = ADC_CHANNEL_2;
 8003312:	2302      	movs	r3, #2
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003314:	a915      	add	r1, sp, #84	@ 0x54
 8003316:	4620      	mov	r0, r4
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003318:	e9cd 3615 	strd	r3, r6, [sp, #84]	@ 0x54
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800331c:	f001 fcf6 	bl	8004d0c <HAL_ADC_ConfigChannel>
 8003320:	4605      	mov	r5, r0
 8003322:	b108      	cbz	r0, 8003328 <main+0x384>
 8003324:	b672      	cpsid	i
  while (1)
 8003326:	e7fe      	b.n	8003326 <main+0x382>
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8003328:	4c46      	ldr	r4, [pc, #280]	@ (8003444 <main+0x4a0>)
  ADC_MultiModeTypeDef multimode = {0};
 800332a:	9010      	str	r0, [sp, #64]	@ 0x40
 800332c:	e9cd 000e 	strd	r0, r0, [sp, #56]	@ 0x38
  ADC_ChannelConfTypeDef sConfig = {0};
 8003330:	4601      	mov	r1, r0
 8003332:	2218      	movs	r2, #24
 8003334:	a815      	add	r0, sp, #84	@ 0x54
 8003336:	f007 fcf1 	bl	800ad1c <memset>
  hadc3.Instance = ADC3;
 800333a:	4b43      	ldr	r3, [pc, #268]	@ (8003448 <main+0x4a4>)
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800333c:	f884 5020 	strb.w	r5, [r4, #32]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8003340:	4620      	mov	r0, r4
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003342:	e9c4 650a 	strd	r6, r5, [r4, #40]	@ 0x28
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8003346:	e9c4 3500 	strd	r3, r5, [r4]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800334a:	e9c4 5502 	strd	r5, r5, [r4, #8]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800334e:	e9c4 5704 	strd	r5, r7, [r4, #16]
  hadc3.Init.NbrOfConversion = 1;
 8003352:	61e6      	str	r6, [r4, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8003354:	f884 5030 	strb.w	r5, [r4, #48]	@ 0x30
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8003358:	8325      	strh	r5, [r4, #24]
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800335a:	6365      	str	r5, [r4, #52]	@ 0x34
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800335c:	f001 f9d4 	bl	8004708 <HAL_ADC_Init>
 8003360:	b108      	cbz	r0, 8003366 <main+0x3c2>
 8003362:	b672      	cpsid	i
  while (1)
 8003364:	e7fe      	b.n	8003364 <main+0x3c0>
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8003366:	900e      	str	r0, [sp, #56]	@ 0x38
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 8003368:	a90e      	add	r1, sp, #56	@ 0x38
 800336a:	4620      	mov	r0, r4
 800336c:	f001 fe52 	bl	8005014 <HAL_ADCEx_MultiModeConfigChannel>
 8003370:	b108      	cbz	r0, 8003376 <main+0x3d2>
 8003372:	b672      	cpsid	i
  while (1)
 8003374:	e7fe      	b.n	8003374 <main+0x3d0>
  sConfig.Channel = ADC_CHANNEL_12;
 8003376:	230c      	movs	r3, #12
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8003378:	e9cd 0017 	strd	r0, r0, [sp, #92]	@ 0x5c
  sConfig.Offset = 0;
 800337c:	e9cd 0019 	strd	r0, r0, [sp, #100]	@ 0x64
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8003380:	a915      	add	r1, sp, #84	@ 0x54
 8003382:	4620      	mov	r0, r4
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003384:	e9cd 3615 	strd	r3, r6, [sp, #84]	@ 0x54
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8003388:	f001 fcc0 	bl	8004d0c <HAL_ADC_ConfigChannel>
 800338c:	4603      	mov	r3, r0
 800338e:	b108      	cbz	r0, 8003394 <main+0x3f0>
 8003390:	b672      	cpsid	i
  while (1)
 8003392:	e7fe      	b.n	8003392 <main+0x3ee>
  hspi2.Instance = SPI2;
 8003394:	482d      	ldr	r0, [pc, #180]	@ (800344c <main+0x4a8>)
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8003396:	492e      	ldr	r1, [pc, #184]	@ (8003450 <main+0x4ac>)
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8003398:	6083      	str	r3, [r0, #8]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800339a:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800339e:	e9c0 1200 	strd	r1, r2, [r0]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 80033a2:	f44f 7240 	mov.w	r2, #768	@ 0x300
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80033a6:	e9c0 2303 	strd	r2, r3, [r0, #12]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80033aa:	f44f 7200 	mov.w	r2, #512	@ 0x200
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80033ae:	e9c0 2306 	strd	r2, r3, [r0, #24]
  hspi2.Init.CRCPolynomial = 7;
 80033b2:	2207      	movs	r2, #7
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80033b4:	e9c0 3308 	strd	r3, r3, [r0, #32]
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80033b8:	e9c0 230b 	strd	r2, r3, [r0, #44]	@ 0x2c
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80033bc:	6143      	str	r3, [r0, #20]
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80033be:	6283      	str	r3, [r0, #40]	@ 0x28
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80033c0:	2308      	movs	r3, #8
 80033c2:	6343      	str	r3, [r0, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80033c4:	f002 ffbf 	bl	8006346 <HAL_SPI_Init>
 80033c8:	4607      	mov	r7, r0
 80033ca:	b108      	cbz	r0, 80033d0 <main+0x42c>
 80033cc:	b672      	cpsid	i
  while (1)
 80033ce:	e7fe      	b.n	80033ce <main+0x42a>
  timerBinarySemHandle = osSemaphoreCreate(osSemaphore(timerBinarySem), 1);
 80033d0:	4631      	mov	r1, r6
  osSemaphoreDef(timerBinarySem);
 80033d2:	e9cd 0005 	strd	r0, r0, [sp, #20]
  timerBinarySemHandle = osSemaphoreCreate(osSemaphore(timerBinarySem), 1);
 80033d6:	a805      	add	r0, sp, #20
 80033d8:	f004 f96a 	bl	80076b0 <osSemaphoreCreate>
  osThreadDef(SpiFlash, StartSpiFlash, osPriorityIdle, 0, 1024);
 80033dc:	4c1d      	ldr	r4, [pc, #116]	@ (8003454 <main+0x4b0>)
  timerBinarySemHandle = osSemaphoreCreate(osSemaphore(timerBinarySem), 1);
 80033de:	4b1e      	ldr	r3, [pc, #120]	@ (8003458 <main+0x4b4>)
 80033e0:	6018      	str	r0, [r3, #0]
  osThreadDef(SpiFlash, StartSpiFlash, osPriorityIdle, 0, 1024);
 80033e2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80033e4:	ad07      	add	r5, sp, #28
 80033e6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80033e8:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80033ec:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  SpiFlashHandle = osThreadCreate(osThread(SpiFlash), NULL);
 80033f0:	4639      	mov	r1, r7
 80033f2:	a807      	add	r0, sp, #28
 80033f4:	f004 f92c 	bl	8007650 <osThreadCreate>
 80033f8:	4b18      	ldr	r3, [pc, #96]	@ (800345c <main+0x4b8>)
  osThreadDef(GPS, StartGPS, osPriorityIdle, 0, 640);
 80033fa:	f104 060c 	add.w	r6, r4, #12
  SpiFlashHandle = osThreadCreate(osThread(SpiFlash), NULL);
 80033fe:	6018      	str	r0, [r3, #0]
  osThreadDef(GPS, StartGPS, osPriorityIdle, 0, 640);
 8003400:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8003402:	ad0e      	add	r5, sp, #56	@ 0x38
 8003404:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003406:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 800340a:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  GPSHandle = osThreadCreate(osThread(GPS), NULL);
 800340e:	4639      	mov	r1, r7
 8003410:	a80e      	add	r0, sp, #56	@ 0x38
 8003412:	f004 f91d 	bl	8007650 <osThreadCreate>
 8003416:	4b12      	ldr	r3, [pc, #72]	@ (8003460 <main+0x4bc>)
  osThreadDef(GSM, StartGSM, osPriorityIdle, 0, 1560);
 8003418:	3428      	adds	r4, #40	@ 0x28
  GPSHandle = osThreadCreate(osThread(GPS), NULL);
 800341a:	6018      	str	r0, [r3, #0]
  osThreadDef(GSM, StartGSM, osPriorityIdle, 0, 1560);
 800341c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800341e:	ad15      	add	r5, sp, #84	@ 0x54
 8003420:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003422:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8003426:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  GSMHandle = osThreadCreate(osThread(GSM), NULL);
 800342a:	4639      	mov	r1, r7
 800342c:	a815      	add	r0, sp, #84	@ 0x54
 800342e:	f004 f90f 	bl	8007650 <osThreadCreate>
 8003432:	4b0c      	ldr	r3, [pc, #48]	@ (8003464 <main+0x4c0>)
 8003434:	6018      	str	r0, [r3, #0]
  osKernelStart();
 8003436:	f004 f906 	bl	8007646 <osKernelStart>
  while (1)
 800343a:	e7fe      	b.n	800343a <main+0x496>
 800343c:	200014e4 	.word	0x200014e4
 8003440:	50000100 	.word	0x50000100
 8003444:	20001494 	.word	0x20001494
 8003448:	50000400 	.word	0x50000400
 800344c:	20001324 	.word	0x20001324
 8003450:	40003800 	.word	0x40003800
 8003454:	0800ec08 	.word	0x0800ec08
 8003458:	20001064 	.word	0x20001064
 800345c:	20001070 	.word	0x20001070
 8003460:	2000106c 	.word	0x2000106c
 8003464:	20001068 	.word	0x20001068

08003468 <HAL_TIM_PeriodElapsedCallback>:
  if (htim->Instance == TIM2) {
 8003468:	6803      	ldr	r3, [r0, #0]
 800346a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800346e:	d101      	bne.n	8003474 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
 8003470:	f001 b8ee 	b.w	8004650 <HAL_IncTick>
}
 8003474:	4770      	bx	lr

08003476 <Error_Handler>:
 8003476:	b672      	cpsid	i
  while (1)
 8003478:	e7fe      	b.n	8003478 <Error_Handler+0x2>
	...

0800347c <W25_ReadStatusReg1>:
=======
 800102a:	e7fe      	b.n	800102a <SystemClock_Config+0x5a>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800102c:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800102e:	e9cd 3000 	strd	r3, r0, [sp]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001032:	e9cd 0002 	strd	r0, r0, [sp, #8]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001036:	9004      	str	r0, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001038:	4668      	mov	r0, sp
 800103a:	f002 fc8d 	bl	8003958 <HAL_RCC_ClockConfig>
 800103e:	b108      	cbz	r0, 8001044 <SystemClock_Config+0x74>
 8001040:	b672      	cpsid	i
  while (1)
 8001042:	e7fe      	b.n	8001042 <SystemClock_Config+0x72>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 8001044:	4b0b      	ldr	r3, [pc, #44]	@ (8001074 <SystemClock_Config+0xa4>)
 8001046:	930f      	str	r3, [sp, #60]	@ 0x3c
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001048:	e9cd 0011 	strd	r0, r0, [sp, #68]	@ 0x44
  PeriphClkInit.Adc34ClockSelection = RCC_ADC34PLLCLK_DIV1;
 800104c:	f44f 7380 	mov.w	r3, #256	@ 0x100
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001050:	9013      	str	r0, [sp, #76]	@ 0x4c
  PeriphClkInit.Adc34ClockSelection = RCC_ADC34PLLCLK_DIV1;
 8001052:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001056:	a80f      	add	r0, sp, #60	@ 0x3c
  PeriphClkInit.Adc34ClockSelection = RCC_ADC34PLLCLK_DIV1;
 8001058:	e9cd 3218 	strd	r3, r2, [sp, #96]	@ 0x60
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800105c:	9310      	str	r3, [sp, #64]	@ 0x40
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800105e:	f002 fd71 	bl	8003b44 <HAL_RCCEx_PeriphCLKConfig>
 8001062:	b108      	cbz	r0, 8001068 <SystemClock_Config+0x98>
 8001064:	b672      	cpsid	i
  while (1)
 8001066:	e7fe      	b.n	8001066 <SystemClock_Config+0x96>
}
 8001068:	b01f      	add	sp, #124	@ 0x7c
 800106a:	f85d fb04 	ldr.w	pc, [sp], #4
 800106e:	bf00      	nop
 8001070:	40021000 	.word	0x40021000
 8001074:	00010187 	.word	0x00010187

08001078 <main>:
{
 8001078:	b580      	push	{r7, lr}
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800107a:	4db9      	ldr	r5, [pc, #740]	@ (8001360 <main+0x2e8>)
{
 800107c:	b09c      	sub	sp, #112	@ 0x70
  HAL_Init();
 800107e:	f001 fa8b 	bl	8002598 <HAL_Init>
  SystemClock_Config();
 8001082:	f7ff ffa5 	bl	8000fd0 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001086:	2214      	movs	r2, #20
 8001088:	2100      	movs	r1, #0
 800108a:	a815      	add	r0, sp, #84	@ 0x54
 800108c:	f007 fce0 	bl	8008a50 <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001090:	696b      	ldr	r3, [r5, #20]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
 8001092:	48b4      	ldr	r0, [pc, #720]	@ (8001364 <main+0x2ec>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001094:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001098:	616b      	str	r3, [r5, #20]
 800109a:	696b      	ldr	r3, [r5, #20]
 800109c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80010a0:	9302      	str	r3, [sp, #8]
 80010a2:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010a4:	696b      	ldr	r3, [r5, #20]
 80010a6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80010aa:	616b      	str	r3, [r5, #20]
 80010ac:	696b      	ldr	r3, [r5, #20]
 80010ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010b2:	9303      	str	r3, [sp, #12]
 80010b4:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010b6:	696b      	ldr	r3, [r5, #20]
 80010b8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80010bc:	616b      	str	r3, [r5, #20]
 80010be:	696b      	ldr	r3, [r5, #20]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
 80010c0:	2201      	movs	r2, #1
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010c2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
 80010c6:	4611      	mov	r1, r2
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010c8:	9304      	str	r3, [sp, #16]
 80010ca:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
 80010cc:	f002 f9b6 	bl	800343c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_6
 80010d0:	48a4      	ldr	r0, [pc, #656]	@ (8001364 <main+0x2ec>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	f240 2156 	movw	r1, #598	@ 0x256
 80010d8:	f002 f9b0 	bl	800343c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 80010dc:	48a2      	ldr	r0, [pc, #648]	@ (8001368 <main+0x2f0>)
 80010de:	2200      	movs	r2, #0
 80010e0:	2104      	movs	r1, #4
 80010e2:	f002 f9ab 	bl	800343c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 80010e6:	48a0      	ldr	r0, [pc, #640]	@ (8001368 <main+0x2f0>)
 80010e8:	2201      	movs	r2, #1
 80010ea:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80010ee:	f002 f9a5 	bl	800343c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
 80010f2:	2201      	movs	r2, #1
 80010f4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80010f8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010fc:	2400      	movs	r4, #0
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
 80010fe:	f002 f99d 	bl	800343c <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001102:	2701      	movs	r7, #1
 8001104:	f240 2303 	movw	r3, #515	@ 0x203
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001108:	4896      	ldr	r0, [pc, #600]	@ (8001364 <main+0x2ec>)
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800110a:	9717      	str	r7, [sp, #92]	@ 0x5c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800110c:	a915      	add	r1, sp, #84	@ 0x54
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800110e:	e9cd 3715 	strd	r3, r7, [sp, #84]	@ 0x54
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001112:	9418      	str	r4, [sp, #96]	@ 0x60
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001114:	f002 f8ce 	bl	80032b4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_6;
 8001118:	2354      	movs	r3, #84	@ 0x54
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800111a:	eb0d 0103 	add.w	r1, sp, r3
 800111e:	4891      	ldr	r0, [pc, #580]	@ (8001364 <main+0x2ec>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001120:	e9cd 3715 	strd	r3, r7, [sp, #84]	@ 0x54
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001124:	e9cd 4417 	strd	r4, r4, [sp, #92]	@ 0x5c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001128:	f002 f8c4 	bl	80032b4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 800112c:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800112e:	488e      	ldr	r0, [pc, #568]	@ (8001368 <main+0x2f0>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001130:	9417      	str	r4, [sp, #92]	@ 0x5c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001132:	a915      	add	r1, sp, #84	@ 0x54
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001134:	e9cd 3415 	strd	r3, r4, [sp, #84]	@ 0x54
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001138:	f002 f8bc 	bl	80032b4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800113c:	2304      	movs	r3, #4
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800113e:	488a      	ldr	r0, [pc, #552]	@ (8001368 <main+0x2f0>)
 8001140:	a915      	add	r1, sp, #84	@ 0x54
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001142:	e9cd 3715 	strd	r3, r7, [sp, #84]	@ 0x54
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001146:	f04f 0803 	mov.w	r8, #3
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800114a:	e9cd 4417 	strd	r4, r4, [sp, #92]	@ 0x5c
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 800114e:	f44f 5680 	mov.w	r6, #4096	@ 0x1000
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001152:	f002 f8af 	bl	80032b4 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001156:	4884      	ldr	r0, [pc, #528]	@ (8001368 <main+0x2f0>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001158:	f8cd 8060 	str.w	r8, [sp, #96]	@ 0x60
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800115c:	a915      	add	r1, sp, #84	@ 0x54
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800115e:	e9cd 6715 	strd	r6, r7, [sp, #84]	@ 0x54
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001162:	9717      	str	r7, [sp, #92]	@ 0x5c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001164:	f002 f8a6 	bl	80032b4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001168:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800116c:	a915      	add	r1, sp, #84	@ 0x54
 800116e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001172:	e9cd 3715 	strd	r3, r7, [sp, #84]	@ 0x54
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001176:	e9cd 7817 	strd	r7, r8, [sp, #92]	@ 0x5c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800117a:	f002 f89b 	bl	80032b4 <HAL_GPIO_Init>
  __HAL_RCC_DMA1_CLK_ENABLE();
 800117e:	696b      	ldr	r3, [r5, #20]
 8001180:	433b      	orrs	r3, r7
 8001182:	616b      	str	r3, [r5, #20]
 8001184:	696b      	ldr	r3, [r5, #20]
 8001186:	403b      	ands	r3, r7
 8001188:	9300      	str	r3, [sp, #0]
 800118a:	9b00      	ldr	r3, [sp, #0]
  __HAL_RCC_DMA2_CLK_ENABLE();
 800118c:	696b      	ldr	r3, [r5, #20]
 800118e:	f043 0302 	orr.w	r3, r3, #2
 8001192:	616b      	str	r3, [r5, #20]
 8001194:	696b      	ldr	r3, [r5, #20]
  hrtc.Instance = RTC;
 8001196:	4d75      	ldr	r5, [pc, #468]	@ (800136c <main+0x2f4>)
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001198:	f003 0302 	and.w	r3, r3, #2
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 5, 0);
 800119c:	4622      	mov	r2, r4
 800119e:	2105      	movs	r1, #5
  __HAL_RCC_DMA2_CLK_ENABLE();
 80011a0:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 5, 0);
 80011a2:	200d      	movs	r0, #13
  __HAL_RCC_DMA2_CLK_ENABLE();
 80011a4:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 5, 0);
 80011a6:	f001 ff81 	bl	80030ac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80011aa:	200d      	movs	r0, #13
 80011ac:	f001 ffb0 	bl	8003110 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 5, 0);
 80011b0:	4622      	mov	r2, r4
 80011b2:	2105      	movs	r1, #5
 80011b4:	200f      	movs	r0, #15
 80011b6:	f001 ff79 	bl	80030ac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80011ba:	200f      	movs	r0, #15
 80011bc:	f001 ffa8 	bl	8003110 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 5, 0);
 80011c0:	4622      	mov	r2, r4
 80011c2:	2105      	movs	r1, #5
 80011c4:	2010      	movs	r0, #16
 80011c6:	f001 ff71 	bl	80030ac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80011ca:	2010      	movs	r0, #16
 80011cc:	f001 ffa0 	bl	8003110 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Channel1_IRQn, 5, 0);
 80011d0:	4622      	mov	r2, r4
 80011d2:	2105      	movs	r1, #5
 80011d4:	2038      	movs	r0, #56	@ 0x38
 80011d6:	f001 ff69 	bl	80030ac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 80011da:	2038      	movs	r0, #56	@ 0x38
 80011dc:	f001 ff98 	bl	8003110 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Channel5_IRQn, 5, 0);
 80011e0:	4622      	mov	r2, r4
 80011e2:	2105      	movs	r1, #5
 80011e4:	203c      	movs	r0, #60	@ 0x3c
 80011e6:	f001 ff61 	bl	80030ac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel5_IRQn);
 80011ea:	203c      	movs	r0, #60	@ 0x3c
 80011ec:	f001 ff90 	bl	8003110 <HAL_NVIC_EnableIRQ>
  RTC_TimeTypeDef sTime = {0};
 80011f0:	2214      	movs	r2, #20
 80011f2:	4621      	mov	r1, r4
 80011f4:	a815      	add	r0, sp, #84	@ 0x54
 80011f6:	f007 fc2b 	bl	8008a50 <memset>
  hrtc.Instance = RTC;
 80011fa:	4b5d      	ldr	r3, [pc, #372]	@ (8001370 <main+0x2f8>)
  RTC_DateTypeDef sDate = {0};
 80011fc:	940e      	str	r4, [sp, #56]	@ 0x38
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80011fe:	e9c5 3400 	strd	r3, r4, [r5]
  hrtc.Init.SynchPrediv = 255;
 8001202:	f04f 087f 	mov.w	r8, #127	@ 0x7f
 8001206:	23ff      	movs	r3, #255	@ 0xff
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001208:	4628      	mov	r0, r5
  hrtc.Init.SynchPrediv = 255;
 800120a:	e9c5 8302 	strd	r8, r3, [r5, #8]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800120e:	e9c5 4404 	strd	r4, r4, [r5, #16]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001212:	61ac      	str	r4, [r5, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001214:	f002 fde1 	bl	8003dda <HAL_RTC_Init>
 8001218:	b108      	cbz	r0, 800121e <main+0x1a6>
 800121a:	b672      	cpsid	i
  while (1)
 800121c:	e7fe      	b.n	800121c <main+0x1a4>
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800121e:	e9cd 0018 	strd	r0, r0, [sp, #96]	@ 0x60
  sTime.Hours = 0x0;
 8001222:	f8ad 0054 	strh.w	r0, [sp, #84]	@ 0x54
  sTime.Seconds = 0x0;
 8001226:	f88d 0056 	strb.w	r0, [sp, #86]	@ 0x56
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800122a:	463a      	mov	r2, r7
 800122c:	a915      	add	r1, sp, #84	@ 0x54
 800122e:	4628      	mov	r0, r5
 8001230:	f002 fe26 	bl	8003e80 <HAL_RTC_SetTime>
 8001234:	b108      	cbz	r0, 800123a <main+0x1c2>
 8001236:	b672      	cpsid	i
  while (1)
 8001238:	e7fe      	b.n	8001238 <main+0x1c0>
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800123a:	4b4e      	ldr	r3, [pc, #312]	@ (8001374 <main+0x2fc>)
 800123c:	930e      	str	r3, [sp, #56]	@ 0x38
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800123e:	463a      	mov	r2, r7
 8001240:	a90e      	add	r1, sp, #56	@ 0x38
 8001242:	4628      	mov	r0, r5
 8001244:	f002 fe76 	bl	8003f34 <HAL_RTC_SetDate>
 8001248:	4603      	mov	r3, r0
 800124a:	b108      	cbz	r0, 8001250 <main+0x1d8>
 800124c:	b672      	cpsid	i
  while (1)
 800124e:	e7fe      	b.n	800124e <main+0x1d6>
  hspi1.Instance = SPI1;
 8001250:	4849      	ldr	r0, [pc, #292]	@ (8001378 <main+0x300>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001252:	f8df e144 	ldr.w	lr, [pc, #324]	@ 8001398 <main+0x320>
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001256:	6083      	str	r3, [r0, #8]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001258:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800125c:	e9c0 e200 	strd	lr, r2, [r0]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001260:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001264:	e9c0 2303 	strd	r2, r3, [r0, #12]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001268:	2510      	movs	r5, #16
 800126a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800126e:	e9c0 2506 	strd	r2, r5, [r0, #24]
  hspi1.Init.CRCPolynomial = 7;
 8001272:	2207      	movs	r2, #7
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001274:	e9c0 3308 	strd	r3, r3, [r0, #32]
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001278:	e9c0 230b 	strd	r2, r3, [r0, #44]	@ 0x2c
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800127c:	6143      	str	r3, [r0, #20]
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800127e:	6283      	str	r3, [r0, #40]	@ 0x28
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001280:	2308      	movs	r3, #8
 8001282:	6343      	str	r3, [r0, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001284:	f002 ffad 	bl	80041e2 <HAL_SPI_Init>
 8001288:	4603      	mov	r3, r0
 800128a:	b108      	cbz	r0, 8001290 <main+0x218>
 800128c:	b672      	cpsid	i
  while (1)
 800128e:	e7fe      	b.n	800128e <main+0x216>
  huart1.Instance = USART1;
 8001290:	483a      	ldr	r0, [pc, #232]	@ (800137c <main+0x304>)
  huart1.Init.BaudRate = 115200;
 8001292:	4a3b      	ldr	r2, [pc, #236]	@ (8001380 <main+0x308>)
  huart1.Init.Parity = UART_PARITY_NONE;
 8001294:	6103      	str	r3, [r0, #16]
  huart1.Init.BaudRate = 115200;
 8001296:	f44f 34e1 	mov.w	r4, #115200	@ 0x1c200
  huart1.Init.Mode = UART_MODE_TX_RX;
 800129a:	270c      	movs	r7, #12
  huart1.Init.StopBits = UART_STOPBITS_1;
 800129c:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012a0:	e9c0 7305 	strd	r7, r3, [r0, #20]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80012a4:	e9c0 3307 	strd	r3, r3, [r0, #28]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80012a8:	6243      	str	r3, [r0, #36]	@ 0x24
  huart1.Init.BaudRate = 115200;
 80012aa:	e9c0 2400 	strd	r2, r4, [r0]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80012ae:	f003 ffdb 	bl	8005268 <HAL_UART_Init>
 80012b2:	4603      	mov	r3, r0
 80012b4:	b108      	cbz	r0, 80012ba <main+0x242>
 80012b6:	b672      	cpsid	i
  while (1)
 80012b8:	e7fe      	b.n	80012b8 <main+0x240>
  huart2.Instance = USART2;
 80012ba:	4832      	ldr	r0, [pc, #200]	@ (8001384 <main+0x30c>)
  huart2.Init.BaudRate = 9600;
 80012bc:	f8df c0dc 	ldr.w	ip, [pc, #220]	@ 800139c <main+0x324>
 80012c0:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
  huart2.Init.StopBits = UART_STOPBITS_1;
 80012c4:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80012c8:	e9c0 3704 	strd	r3, r7, [r0, #16]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80012cc:	e9c0 3306 	strd	r3, r3, [r0, #24]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80012d0:	e9c0 3308 	strd	r3, r3, [r0, #32]
  huart2.Init.BaudRate = 9600;
 80012d4:	e9c0 c200 	strd	ip, r2, [r0]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80012d8:	f003 ffc6 	bl	8005268 <HAL_UART_Init>
 80012dc:	4603      	mov	r3, r0
 80012de:	b108      	cbz	r0, 80012e4 <main+0x26c>
 80012e0:	b672      	cpsid	i
  while (1)
 80012e2:	e7fe      	b.n	80012e2 <main+0x26a>
  huart3.Instance = USART3;
 80012e4:	4828      	ldr	r0, [pc, #160]	@ (8001388 <main+0x310>)
 80012e6:	4a29      	ldr	r2, [pc, #164]	@ (800138c <main+0x314>)
  huart3.Init.StopBits = UART_STOPBITS_1;
 80012e8:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart3.Init.BaudRate = 115200;
 80012ec:	e9c0 2400 	strd	r2, r4, [r0]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80012f0:	e9c0 3704 	strd	r3, r7, [r0, #16]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80012f4:	e9c0 3306 	strd	r3, r3, [r0, #24]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80012f8:	e9c0 3308 	strd	r3, r3, [r0, #32]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80012fc:	f003 ffb4 	bl	8005268 <HAL_UART_Init>
 8001300:	4604      	mov	r4, r0
 8001302:	b108      	cbz	r0, 8001308 <main+0x290>
 8001304:	b672      	cpsid	i
  while (1)
 8001306:	e7fe      	b.n	8001306 <main+0x28e>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001308:	462a      	mov	r2, r5
 800130a:	4601      	mov	r1, r0
 800130c:	a815      	add	r0, sp, #84	@ 0x54
 800130e:	f007 fb9f 	bl	8008a50 <memset>
  htim3.Instance = TIM3;
 8001312:	4d1f      	ldr	r5, [pc, #124]	@ (8001390 <main+0x318>)
  htim3.Init.Prescaler = 8000;
 8001314:	481f      	ldr	r0, [pc, #124]	@ (8001394 <main+0x31c>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001316:	9410      	str	r4, [sp, #64]	@ 0x40
  htim3.Init.Prescaler = 8000;
 8001318:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 800131c:	e9c5 0300 	strd	r0, r3, [r5]
  htim3.Init.Period = 65535;
 8001320:	f64f 73ff 	movw	r3, #65535	@ 0xffff
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001324:	4628      	mov	r0, r5
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001326:	e9cd 440e 	strd	r4, r4, [sp, #56]	@ 0x38
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800132a:	e9c5 3403 	strd	r3, r4, [r5, #12]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800132e:	60ac      	str	r4, [r5, #8]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001330:	61ac      	str	r4, [r5, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001332:	f003 fbb3 	bl	8004a9c <HAL_TIM_Base_Init>
 8001336:	b108      	cbz	r0, 800133c <main+0x2c4>
 8001338:	b672      	cpsid	i
  while (1)
 800133a:	e7fe      	b.n	800133a <main+0x2c2>
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800133c:	a915      	add	r1, sp, #84	@ 0x54
 800133e:	4628      	mov	r0, r5
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001340:	9615      	str	r6, [sp, #84]	@ 0x54
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001342:	f003 fbe5 	bl	8004b10 <HAL_TIM_ConfigClockSource>
 8001346:	b108      	cbz	r0, 800134c <main+0x2d4>
 8001348:	b672      	cpsid	i
  while (1)
 800134a:	e7fe      	b.n	800134a <main+0x2d2>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800134c:	900e      	str	r0, [sp, #56]	@ 0x38
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800134e:	9010      	str	r0, [sp, #64]	@ 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001350:	a90e      	add	r1, sp, #56	@ 0x38
 8001352:	4628      	mov	r0, r5
 8001354:	f003 fc76 	bl	8004c44 <HAL_TIMEx_MasterConfigSynchronization>
 8001358:	b310      	cbz	r0, 80013a0 <main+0x328>
 800135a:	b672      	cpsid	i
  while (1)
 800135c:	e7fe      	b.n	800135c <main+0x2e4>
 800135e:	bf00      	nop
 8001360:	40021000 	.word	0x40021000
 8001364:	48000800 	.word	0x48000800
 8001368:	48000400 	.word	0x48000400
 800136c:	2000113c 	.word	0x2000113c
 8001370:	40002800 	.word	0x40002800
 8001374:	00010101 	.word	0x00010101
 8001378:	200010d8 	.word	0x200010d8
 800137c:	20000fa0 	.word	0x20000fa0
 8001380:	40013800 	.word	0x40013800
 8001384:	20000f18 	.word	0x20000f18
 8001388:	20000e90 	.word	0x20000e90
 800138c:	40004800 	.word	0x40004800
 8001390:	20001028 	.word	0x20001028
 8001394:	40000400 	.word	0x40000400
 8001398:	40013000 	.word	0x40013000
 800139c:	40004400 	.word	0x40004400
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80013a0:	4c5b      	ldr	r4, [pc, #364]	@ (8001510 <main+0x498>)
  ADC_ChannelConfTypeDef sConfig = {0};
 80013a2:	2218      	movs	r2, #24
 80013a4:	2100      	movs	r1, #0
 80013a6:	a815      	add	r0, sp, #84	@ 0x54
 80013a8:	f007 fb52 	bl	8008a50 <memset>
  hadc2.Instance = ADC2;
 80013ac:	4a59      	ldr	r2, [pc, #356]	@ (8001514 <main+0x49c>)
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80013ae:	2300      	movs	r3, #0
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80013b0:	2601      	movs	r6, #1
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80013b2:	2704      	movs	r7, #4
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80013b4:	4620      	mov	r0, r4
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80013b6:	e9c4 2300 	strd	r2, r3, [r4]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80013ba:	e9c4 3302 	strd	r3, r3, [r4, #8]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80013be:	f884 3020 	strb.w	r3, [r4, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80013c2:	62e3      	str	r3, [r4, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80013c4:	62a6      	str	r6, [r4, #40]	@ 0x28
  hadc2.Init.NbrOfConversion = 1;
 80013c6:	61e6      	str	r6, [r4, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80013c8:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80013cc:	6123      	str	r3, [r4, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80013ce:	6167      	str	r7, [r4, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80013d0:	8323      	strh	r3, [r4, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80013d2:	6363      	str	r3, [r4, #52]	@ 0x34
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80013d4:	f001 f94e 	bl	8002674 <HAL_ADC_Init>
 80013d8:	b108      	cbz	r0, 80013de <main+0x366>
 80013da:	b672      	cpsid	i
  while (1)
 80013dc:	e7fe      	b.n	80013dc <main+0x364>
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80013de:	e9cd 0017 	strd	r0, r0, [sp, #92]	@ 0x5c
  sConfig.Offset = 0;
 80013e2:	e9cd 0019 	strd	r0, r0, [sp, #100]	@ 0x64
  sConfig.Channel = ADC_CHANNEL_2;
 80013e6:	2302      	movs	r3, #2
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80013e8:	a915      	add	r1, sp, #84	@ 0x54
 80013ea:	4620      	mov	r0, r4
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80013ec:	e9cd 3615 	strd	r3, r6, [sp, #84]	@ 0x54
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80013f0:	f001 fc42 	bl	8002c78 <HAL_ADC_ConfigChannel>
 80013f4:	4605      	mov	r5, r0
 80013f6:	b108      	cbz	r0, 80013fc <main+0x384>
 80013f8:	b672      	cpsid	i
  while (1)
 80013fa:	e7fe      	b.n	80013fa <main+0x382>
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80013fc:	4c46      	ldr	r4, [pc, #280]	@ (8001518 <main+0x4a0>)
  ADC_MultiModeTypeDef multimode = {0};
 80013fe:	9010      	str	r0, [sp, #64]	@ 0x40
 8001400:	e9cd 000e 	strd	r0, r0, [sp, #56]	@ 0x38
  ADC_ChannelConfTypeDef sConfig = {0};
 8001404:	4601      	mov	r1, r0
 8001406:	2218      	movs	r2, #24
 8001408:	a815      	add	r0, sp, #84	@ 0x54
 800140a:	f007 fb21 	bl	8008a50 <memset>
  hadc3.Instance = ADC3;
 800140e:	4b43      	ldr	r3, [pc, #268]	@ (800151c <main+0x4a4>)
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001410:	f884 5020 	strb.w	r5, [r4, #32]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001414:	4620      	mov	r0, r4
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001416:	e9c4 650a 	strd	r6, r5, [r4, #40]	@ 0x28
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800141a:	e9c4 3500 	strd	r3, r5, [r4]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800141e:	e9c4 5502 	strd	r5, r5, [r4, #8]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001422:	e9c4 5704 	strd	r5, r7, [r4, #16]
  hadc3.Init.NbrOfConversion = 1;
 8001426:	61e6      	str	r6, [r4, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8001428:	f884 5030 	strb.w	r5, [r4, #48]	@ 0x30
  hadc3.Init.LowPowerAutoWait = DISABLE;
 800142c:	8325      	strh	r5, [r4, #24]
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800142e:	6365      	str	r5, [r4, #52]	@ 0x34
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001430:	f001 f920 	bl	8002674 <HAL_ADC_Init>
 8001434:	b108      	cbz	r0, 800143a <main+0x3c2>
 8001436:	b672      	cpsid	i
  while (1)
 8001438:	e7fe      	b.n	8001438 <main+0x3c0>
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800143a:	900e      	str	r0, [sp, #56]	@ 0x38
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 800143c:	a90e      	add	r1, sp, #56	@ 0x38
 800143e:	4620      	mov	r0, r4
 8001440:	f001 fd9e 	bl	8002f80 <HAL_ADCEx_MultiModeConfigChannel>
 8001444:	b108      	cbz	r0, 800144a <main+0x3d2>
 8001446:	b672      	cpsid	i
  while (1)
 8001448:	e7fe      	b.n	8001448 <main+0x3d0>
  sConfig.Channel = ADC_CHANNEL_12;
 800144a:	230c      	movs	r3, #12
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800144c:	e9cd 0017 	strd	r0, r0, [sp, #92]	@ 0x5c
  sConfig.Offset = 0;
 8001450:	e9cd 0019 	strd	r0, r0, [sp, #100]	@ 0x64
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001454:	a915      	add	r1, sp, #84	@ 0x54
 8001456:	4620      	mov	r0, r4
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001458:	e9cd 3615 	strd	r3, r6, [sp, #84]	@ 0x54
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800145c:	f001 fc0c 	bl	8002c78 <HAL_ADC_ConfigChannel>
 8001460:	4603      	mov	r3, r0
 8001462:	b108      	cbz	r0, 8001468 <main+0x3f0>
 8001464:	b672      	cpsid	i
  while (1)
 8001466:	e7fe      	b.n	8001466 <main+0x3ee>
  hspi2.Instance = SPI2;
 8001468:	482d      	ldr	r0, [pc, #180]	@ (8001520 <main+0x4a8>)
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800146a:	492e      	ldr	r1, [pc, #184]	@ (8001524 <main+0x4ac>)
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800146c:	6083      	str	r3, [r0, #8]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800146e:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001472:	e9c0 1200 	strd	r1, r2, [r0]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8001476:	f44f 7240 	mov.w	r2, #768	@ 0x300
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800147a:	e9c0 2303 	strd	r2, r3, [r0, #12]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800147e:	f44f 7200 	mov.w	r2, #512	@ 0x200
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001482:	e9c0 2306 	strd	r2, r3, [r0, #24]
  hspi2.Init.CRCPolynomial = 7;
 8001486:	2207      	movs	r2, #7
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001488:	e9c0 3308 	strd	r3, r3, [r0, #32]
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800148c:	e9c0 230b 	strd	r2, r3, [r0, #44]	@ 0x2c
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001490:	6143      	str	r3, [r0, #20]
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001492:	6283      	str	r3, [r0, #40]	@ 0x28
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001494:	2308      	movs	r3, #8
 8001496:	6343      	str	r3, [r0, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001498:	f002 fea3 	bl	80041e2 <HAL_SPI_Init>
 800149c:	4607      	mov	r7, r0
 800149e:	b108      	cbz	r0, 80014a4 <main+0x42c>
 80014a0:	b672      	cpsid	i
  while (1)
 80014a2:	e7fe      	b.n	80014a2 <main+0x42a>
  timerBinarySemHandle = osSemaphoreCreate(osSemaphore(timerBinarySem), 1);
 80014a4:	4631      	mov	r1, r6
  osSemaphoreDef(timerBinarySem);
 80014a6:	e9cd 0005 	strd	r0, r0, [sp, #20]
  timerBinarySemHandle = osSemaphoreCreate(osSemaphore(timerBinarySem), 1);
 80014aa:	a805      	add	r0, sp, #20
 80014ac:	f003 ffaa 	bl	8005404 <osSemaphoreCreate>
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 256);
 80014b0:	4c1d      	ldr	r4, [pc, #116]	@ (8001528 <main+0x4b0>)
  timerBinarySemHandle = osSemaphoreCreate(osSemaphore(timerBinarySem), 1);
 80014b2:	4b1e      	ldr	r3, [pc, #120]	@ (800152c <main+0x4b4>)
 80014b4:	6018      	str	r0, [r3, #0]
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 256);
 80014b6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014b8:	ad07      	add	r5, sp, #28
 80014ba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014bc:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80014c0:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80014c4:	4639      	mov	r1, r7
 80014c6:	a807      	add	r0, sp, #28
 80014c8:	f003 ff6c 	bl	80053a4 <osThreadCreate>
 80014cc:	4b18      	ldr	r3, [pc, #96]	@ (8001530 <main+0x4b8>)
  osThreadDef(SpiFlash, StartSpiFlash, osPriorityIdle, 0, 1280);
 80014ce:	f104 060c 	add.w	r6, r4, #12
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80014d2:	6018      	str	r0, [r3, #0]
  osThreadDef(SpiFlash, StartSpiFlash, osPriorityIdle, 0, 1280);
 80014d4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80014d6:	ad0e      	add	r5, sp, #56	@ 0x38
 80014d8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014da:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 80014de:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  SpiFlashHandle = osThreadCreate(osThread(SpiFlash), NULL);
 80014e2:	4639      	mov	r1, r7
 80014e4:	a80e      	add	r0, sp, #56	@ 0x38
 80014e6:	f003 ff5d 	bl	80053a4 <osThreadCreate>
 80014ea:	4b12      	ldr	r3, [pc, #72]	@ (8001534 <main+0x4bc>)
  osThreadDef(GPS, StartGPS, osPriorityIdle, 0, 640);
 80014ec:	3428      	adds	r4, #40	@ 0x28
  SpiFlashHandle = osThreadCreate(osThread(SpiFlash), NULL);
 80014ee:	6018      	str	r0, [r3, #0]
  osThreadDef(GPS, StartGPS, osPriorityIdle, 0, 640);
 80014f0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014f2:	ad15      	add	r5, sp, #84	@ 0x54
 80014f4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014f6:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80014fa:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  GPSHandle = osThreadCreate(osThread(GPS), NULL);
 80014fe:	4639      	mov	r1, r7
 8001500:	a815      	add	r0, sp, #84	@ 0x54
 8001502:	f003 ff4f 	bl	80053a4 <osThreadCreate>
 8001506:	4b0c      	ldr	r3, [pc, #48]	@ (8001538 <main+0x4c0>)
 8001508:	6018      	str	r0, [r3, #0]
  osKernelStart();
 800150a:	f003 ff46 	bl	800539a <osKernelStart>
  while (1)
 800150e:	e7fe      	b.n	800150e <main+0x496>
 8001510:	20001234 	.word	0x20001234
 8001514:	50000100 	.word	0x50000100
 8001518:	200011e4 	.word	0x200011e4
 800151c:	50000400 	.word	0x50000400
 8001520:	20001074 	.word	0x20001074
 8001524:	40003800 	.word	0x40003800
 8001528:	0800c788 	.word	0x0800c788
 800152c:	20000db4 	.word	0x20000db4
 8001530:	20000dc0 	.word	0x20000dc0
 8001534:	20000dbc 	.word	0x20000dbc
 8001538:	20000db8 	.word	0x20000db8

0800153c <HAL_TIM_PeriodElapsedCallback>:
  if (htim->Instance == TIM2) {
 800153c:	6803      	ldr	r3, [r0, #0]
 800153e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001542:	d101      	bne.n	8001548 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
 8001544:	f001 b83a 	b.w	80025bc <HAL_IncTick>
}
 8001548:	4770      	bx	lr

0800154a <Error_Handler>:
 800154a:	b672      	cpsid	i
  while (1)
 800154c:	e7fe      	b.n	800154c <Error_Handler+0x2>
	...

08001550 <W25_ReadStatusReg1>:
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
	W25_CS_DISABLE();
	W25_DelayWhileBusy(CHIP_ERASE_TIMEOUT);
	return retval;
} // W25_ChipErase()

uint8_t W25_ReadStatusReg1(void) {
<<<<<<< HEAD
 800347c:	b513      	push	{r0, r1, r4, lr}
	uint8_t cmd = W25_CMD_READ_STATUS_REG_1;
 800347e:	2305      	movs	r3, #5
	uint8_t status_reg1;
	int retval;
	W25_CS_ENABLE(); // Drive Winbond chip select, /CS low
 8003480:	2200      	movs	r2, #0
 8003482:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003486:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
	uint8_t cmd = W25_CMD_READ_STATUS_REG_1;
 800348a:	f88d 3006 	strb.w	r3, [sp, #6]
	W25_CS_ENABLE(); // Drive Winbond chip select, /CS low
 800348e:	f002 f83f 	bl	8005510 <HAL_GPIO_WritePin>
	retval = HAL_SPI_Transmit(&hspi1, &cmd , sizeof(cmd), TIMEOUT); // Send Read Status Reg 1 command
 8003492:	4810      	ldr	r0, [pc, #64]	@ (80034d4 <W25_ReadStatusReg1+0x58>)
 8003494:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003498:	2201      	movs	r2, #1
 800349a:	f10d 0106 	add.w	r1, sp, #6
 800349e:	f002 ffc0 	bl	8006422 <HAL_SPI_Transmit>
	if(retval == HAL_OK)
 80034a2:	4604      	mov	r4, r0
 80034a4:	b940      	cbnz	r0, 80034b8 <W25_ReadStatusReg1+0x3c>
	retval = HAL_SPI_Receive(&hspi1, &status_reg1, sizeof(status_reg1), TIMEOUT);
 80034a6:	480b      	ldr	r0, [pc, #44]	@ (80034d4 <W25_ReadStatusReg1+0x58>)
 80034a8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80034ac:	2201      	movs	r2, #1
 80034ae:	f10d 0107 	add.w	r1, sp, #7
 80034b2:	f003 f9b0 	bl	8006816 <HAL_SPI_Receive>
 80034b6:	4604      	mov	r4, r0
	W25_CS_DISABLE();
 80034b8:	2201      	movs	r2, #1
 80034ba:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80034be:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80034c2:	f002 f825 	bl	8005510 <HAL_GPIO_WritePin>
	return retval == HAL_OK ? status_reg1:0xFF; // return 0xFF if error
 80034c6:	b91c      	cbnz	r4, 80034d0 <W25_ReadStatusReg1+0x54>
 80034c8:	f89d 0007 	ldrb.w	r0, [sp, #7]
} // W25_ReadStatusReg1()
 80034cc:	b002      	add	sp, #8
 80034ce:	bd10      	pop	{r4, pc}
	return retval == HAL_OK ? status_reg1:0xFF; // return 0xFF if error
 80034d0:	20ff      	movs	r0, #255	@ 0xff
 80034d2:	e7fb      	b.n	80034cc <W25_ReadStatusReg1+0x50>
 80034d4:	20001388 	.word	0x20001388

080034d8 <W25_Busy>:

int W25_Busy(void)
{
 80034d8:	b508      	push	{r3, lr}
	return (W25_ReadStatusReg1() & W25_STATUS1_BUSY);
 80034da:	f7ff ffcf 	bl	800347c <W25_ReadStatusReg1>
}
 80034de:	f000 0001 	and.w	r0, r0, #1
 80034e2:	bd08      	pop	{r3, pc}

080034e4 <W25_DelayWhileBusy>:

int W25_DelayWhileBusy(uint32_t msTimeout)
{
 80034e4:	b570      	push	{r4, r5, r6, lr}
 80034e6:	4605      	mov	r5, r0
	uint32_t initial_count = HAL_GetTick();
 80034e8:	f001 f8be 	bl	8004668 <HAL_GetTick>
 80034ec:	4606      	mov	r6, r0
=======
 8001550:	b513      	push	{r0, r1, r4, lr}
	uint8_t cmd = W25_CMD_READ_STATUS_REG_1;
 8001552:	2305      	movs	r3, #5
	uint8_t status_reg1;
	int retval;
	W25_CS_ENABLE(); // Drive Winbond chip select, /CS low
 8001554:	2200      	movs	r2, #0
 8001556:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800155a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
	uint8_t cmd = W25_CMD_READ_STATUS_REG_1;
 800155e:	f88d 3006 	strb.w	r3, [sp, #6]
	W25_CS_ENABLE(); // Drive Winbond chip select, /CS low
 8001562:	f001 ff6b 	bl	800343c <HAL_GPIO_WritePin>
	retval = HAL_SPI_Transmit(&hspi1, &cmd , sizeof(cmd), TIMEOUT); // Send Read Status Reg 1 command
 8001566:	4810      	ldr	r0, [pc, #64]	@ (80015a8 <W25_ReadStatusReg1+0x58>)
 8001568:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800156c:	2201      	movs	r2, #1
 800156e:	f10d 0106 	add.w	r1, sp, #6
 8001572:	f002 fea4 	bl	80042be <HAL_SPI_Transmit>
	if(retval == HAL_OK)
 8001576:	4604      	mov	r4, r0
 8001578:	b940      	cbnz	r0, 800158c <W25_ReadStatusReg1+0x3c>
	retval = HAL_SPI_Receive(&hspi1, &status_reg1, sizeof(status_reg1), TIMEOUT);
 800157a:	480b      	ldr	r0, [pc, #44]	@ (80015a8 <W25_ReadStatusReg1+0x58>)
 800157c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001580:	2201      	movs	r2, #1
 8001582:	f10d 0107 	add.w	r1, sp, #7
 8001586:	f003 f894 	bl	80046b2 <HAL_SPI_Receive>
 800158a:	4604      	mov	r4, r0
	W25_CS_DISABLE();
 800158c:	2201      	movs	r2, #1
 800158e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001592:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001596:	f001 ff51 	bl	800343c <HAL_GPIO_WritePin>
	return retval == HAL_OK ? status_reg1:0xFF; // return 0xFF if error
 800159a:	b91c      	cbnz	r4, 80015a4 <W25_ReadStatusReg1+0x54>
 800159c:	f89d 0007 	ldrb.w	r0, [sp, #7]
} // W25_ReadStatusReg1()
 80015a0:	b002      	add	sp, #8
 80015a2:	bd10      	pop	{r4, pc}
	return retval == HAL_OK ? status_reg1:0xFF; // return 0xFF if error
 80015a4:	20ff      	movs	r0, #255	@ 0xff
 80015a6:	e7fb      	b.n	80015a0 <W25_ReadStatusReg1+0x50>
 80015a8:	200010d8 	.word	0x200010d8

080015ac <W25_Busy>:

int W25_Busy(void)
{
 80015ac:	b508      	push	{r3, lr}
	return (W25_ReadStatusReg1() & W25_STATUS1_BUSY);
 80015ae:	f7ff ffcf 	bl	8001550 <W25_ReadStatusReg1>
}
 80015b2:	f000 0001 	and.w	r0, r0, #1
 80015b6:	bd08      	pop	{r3, pc}

080015b8 <W25_DelayWhileBusy>:

int W25_DelayWhileBusy(uint32_t msTimeout)
{
 80015b8:	b570      	push	{r4, r5, r6, lr}
 80015ba:	4605      	mov	r5, r0
	uint32_t initial_count = HAL_GetTick();
 80015bc:	f001 f80a 	bl	80025d4 <HAL_GetTick>
 80015c0:	4606      	mov	r6, r0
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
	int busy;
	uint32_t deltaticks;
	uint32_t count = 0;
	do {
	busy = W25_Busy();
<<<<<<< HEAD
 80034ee:	f7ff fff3 	bl	80034d8 <W25_Busy>
 80034f2:	4604      	mov	r4, r0
	deltaticks = HAL_GetTick() - initial_count;
 80034f4:	f001 f8b8 	bl	8004668 <HAL_GetTick>
 80034f8:	1b83      	subs	r3, r0, r6
	count++;
	} while(busy && deltaticks < msTimeout);
 80034fa:	b114      	cbz	r4, 8003502 <W25_DelayWhileBusy+0x1e>
 80034fc:	42ab      	cmp	r3, r5
 80034fe:	d3f6      	bcc.n	80034ee <W25_DelayWhileBusy+0xa>
	int retval = busy ? HAL_TIMEOUT:HAL_OK;
 8003500:	2403      	movs	r4, #3
	return retval;
}
 8003502:	4620      	mov	r0, r4
 8003504:	bd70      	pop	{r4, r5, r6, pc}

08003506 <W25_Reset>:
void W25_Reset(){
 8003506:	b508      	push	{r3, lr}
	W25_CS_ENABLE();
 8003508:	2200      	movs	r2, #0
 800350a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800350e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003512:	f001 fffd 	bl	8005510 <HAL_GPIO_WritePin>
	W25_CS_DISABLE();
 8003516:	2201      	movs	r2, #1
 8003518:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800351c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003520:	f001 fff6 	bl	8005510 <HAL_GPIO_WritePin>
	W25_CS_ENABLE();
 8003524:	2200      	movs	r2, #0
 8003526:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800352a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800352e:	f001 ffef 	bl	8005510 <HAL_GPIO_WritePin>
	W25_CS_DISABLE();
 8003532:	2201      	movs	r2, #1
 8003534:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003538:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800353c:	f001 ffe8 	bl	8005510 <HAL_GPIO_WritePin>
	W25_CS_ENABLE();
 8003540:	2200      	movs	r2, #0
 8003542:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003546:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800354a:	f001 ffe1 	bl	8005510 <HAL_GPIO_WritePin>
	W25_CS_DISABLE();
}
 800354e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	W25_CS_DISABLE();
 8003552:	2201      	movs	r2, #1
 8003554:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003558:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800355c:	f001 bfd8 	b.w	8005510 <HAL_GPIO_WritePin>

08003560 <W25_ReadJedecID>:

int W25_ReadJedecID() {
 8003560:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003562:	b08d      	sub	sp, #52	@ 0x34
	int retval;
	uint8_t idcmd = W25_CMD_READ_JEDEC_ID;
 8003564:	239f      	movs	r3, #159	@ 0x9f
	uint8_t jdec_id[4];
	char result[11];
	W25_CS_ENABLE(); // Drive Winbond chip select, /CS low
 8003566:	2200      	movs	r2, #0
 8003568:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800356c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
	uint8_t idcmd = W25_CMD_READ_JEDEC_ID;
 8003570:	f88d 300b 	strb.w	r3, [sp, #11]
	W25_CS_ENABLE(); // Drive Winbond chip select, /CS low
 8003574:	f001 ffcc 	bl	8005510 <HAL_GPIO_WritePin>
	retval = HAL_SPI_TransmitReceive(&hspi1, &idcmd, jdec_id, 4, 4000);
 8003578:	f44f 637a 	mov.w	r3, #4000	@ 0xfa0
 800357c:	9300      	str	r3, [sp, #0]
 800357e:	aa03      	add	r2, sp, #12
 8003580:	2304      	movs	r3, #4
 8003582:	f10d 010b 	add.w	r1, sp, #11
 8003586:	4820      	ldr	r0, [pc, #128]	@ (8003608 <W25_ReadJedecID+0xa8>)
 8003588:	f003 f815 	bl	80065b6 <HAL_SPI_TransmitReceive>
	W25_CS_DISABLE();
 800358c:	2201      	movs	r2, #1
	retval = HAL_SPI_TransmitReceive(&hspi1, &idcmd, jdec_id, 4, 4000);
 800358e:	4605      	mov	r5, r0
	W25_CS_DISABLE();
 8003590:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003594:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003598:	f001 ffba 	bl	8005510 <HAL_GPIO_WritePin>
	char spi_flash_intro[] = "Flash ID received: ";
 800359c:	4b1b      	ldr	r3, [pc, #108]	@ (800360c <W25_ReadJedecID+0xac>)
 800359e:	aa07      	add	r2, sp, #28
 80035a0:	f103 0710 	add.w	r7, r3, #16
 80035a4:	4616      	mov	r6, r2
 80035a6:	6818      	ldr	r0, [r3, #0]
 80035a8:	6859      	ldr	r1, [r3, #4]
 80035aa:	4614      	mov	r4, r2
 80035ac:	c403      	stmia	r4!, {r0, r1}
 80035ae:	3308      	adds	r3, #8
 80035b0:	42bb      	cmp	r3, r7
 80035b2:	4622      	mov	r2, r4
 80035b4:	d1f7      	bne.n	80035a6 <W25_ReadJedecID+0x46>
 80035b6:	6818      	ldr	r0, [r3, #0]
 80035b8:	6020      	str	r0, [r4, #0]
	HAL_UART_Transmit(&huart1, (uint8_t*) spi_flash_intro, strlen(spi_flash_intro), 1000);
 80035ba:	4630      	mov	r0, r6
 80035bc:	f7fc fe68 	bl	8000290 <strlen>
 80035c0:	4631      	mov	r1, r6
 80035c2:	b282      	uxth	r2, r0
 80035c4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80035c8:	4811      	ldr	r0, [pc, #68]	@ (8003610 <W25_ReadJedecID+0xb0>)
 80035ca:	f003 fef9 	bl	80073c0 <HAL_UART_Transmit>

	sprintf(result, "%02X, %02X, %02X", jdec_id[1], jdec_id[2], jdec_id[3]);
 80035ce:	f89d 300f 	ldrb.w	r3, [sp, #15]
 80035d2:	f89d 200d 	ldrb.w	r2, [sp, #13]
 80035d6:	9300      	str	r3, [sp, #0]
 80035d8:	490e      	ldr	r1, [pc, #56]	@ (8003614 <W25_ReadJedecID+0xb4>)
 80035da:	f89d 300e 	ldrb.w	r3, [sp, #14]
 80035de:	a804      	add	r0, sp, #16
 80035e0:	f007 fad4 	bl	800ab8c <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*) result, 11, 1000);
 80035e4:	a904      	add	r1, sp, #16
 80035e6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80035ea:	220b      	movs	r2, #11
 80035ec:	4808      	ldr	r0, [pc, #32]	@ (8003610 <W25_ReadJedecID+0xb0>)
 80035ee:	f003 fee7 	bl	80073c0 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, (uint8_t*)"\r", 1, 1000);
 80035f2:	4909      	ldr	r1, [pc, #36]	@ (8003618 <W25_ReadJedecID+0xb8>)
 80035f4:	4806      	ldr	r0, [pc, #24]	@ (8003610 <W25_ReadJedecID+0xb0>)
 80035f6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80035fa:	2201      	movs	r2, #1
 80035fc:	f003 fee0 	bl	80073c0 <HAL_UART_Transmit>
	return retval;
} // W25_ReadJEDECID()
 8003600:	4628      	mov	r0, r5
 8003602:	b00d      	add	sp, #52	@ 0x34
 8003604:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003606:	bf00      	nop
 8003608:	20001388 	.word	0x20001388
 800360c:	0800fcd4 	.word	0x0800fcd4
 8003610:	20001250 	.word	0x20001250
 8003614:	0800fcc1 	.word	0x0800fcc1
 8003618:	0800fcd2 	.word	0x0800fcd2

0800361c <W25_WriteEnable>:
=======
 80015c2:	f7ff fff3 	bl	80015ac <W25_Busy>
 80015c6:	4604      	mov	r4, r0
	deltaticks = HAL_GetTick() - initial_count;
 80015c8:	f001 f804 	bl	80025d4 <HAL_GetTick>
 80015cc:	1b83      	subs	r3, r0, r6
	count++;
	} while(busy && deltaticks < msTimeout);
 80015ce:	b114      	cbz	r4, 80015d6 <W25_DelayWhileBusy+0x1e>
 80015d0:	42ab      	cmp	r3, r5
 80015d2:	d3f6      	bcc.n	80015c2 <W25_DelayWhileBusy+0xa>
	int retval = busy ? HAL_TIMEOUT:HAL_OK;
 80015d4:	2403      	movs	r4, #3
	return retval;
}
 80015d6:	4620      	mov	r0, r4
 80015d8:	bd70      	pop	{r4, r5, r6, pc}

080015da <W25_Reset>:
void W25_Reset(){
 80015da:	b508      	push	{r3, lr}
	W25_CS_ENABLE();
 80015dc:	2200      	movs	r2, #0
 80015de:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80015e2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80015e6:	f001 ff29 	bl	800343c <HAL_GPIO_WritePin>
	W25_CS_DISABLE();
 80015ea:	2201      	movs	r2, #1
 80015ec:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80015f0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80015f4:	f001 ff22 	bl	800343c <HAL_GPIO_WritePin>
	W25_CS_ENABLE();
 80015f8:	2200      	movs	r2, #0
 80015fa:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80015fe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001602:	f001 ff1b 	bl	800343c <HAL_GPIO_WritePin>
	W25_CS_DISABLE();
 8001606:	2201      	movs	r2, #1
 8001608:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800160c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001610:	f001 ff14 	bl	800343c <HAL_GPIO_WritePin>
	W25_CS_ENABLE();
 8001614:	2200      	movs	r2, #0
 8001616:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800161a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800161e:	f001 ff0d 	bl	800343c <HAL_GPIO_WritePin>
	W25_CS_DISABLE();
}
 8001622:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	W25_CS_DISABLE();
 8001626:	2201      	movs	r2, #1
 8001628:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800162c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001630:	f001 bf04 	b.w	800343c <HAL_GPIO_WritePin>

08001634 <W25_ReadJedecID>:

int W25_ReadJedecID() {
 8001634:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001636:	b08d      	sub	sp, #52	@ 0x34
	int retval;
	uint8_t idcmd = W25_CMD_READ_JEDEC_ID;
 8001638:	239f      	movs	r3, #159	@ 0x9f
	uint8_t jdec_id[4];
	char result[11];
	W25_CS_ENABLE(); // Drive Winbond chip select, /CS low
 800163a:	2200      	movs	r2, #0
 800163c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001640:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
	uint8_t idcmd = W25_CMD_READ_JEDEC_ID;
 8001644:	f88d 300b 	strb.w	r3, [sp, #11]
	W25_CS_ENABLE(); // Drive Winbond chip select, /CS low
 8001648:	f001 fef8 	bl	800343c <HAL_GPIO_WritePin>
	retval = HAL_SPI_TransmitReceive(&hspi1, &idcmd, jdec_id, 4, 4000);
 800164c:	f44f 637a 	mov.w	r3, #4000	@ 0xfa0
 8001650:	9300      	str	r3, [sp, #0]
 8001652:	aa03      	add	r2, sp, #12
 8001654:	2304      	movs	r3, #4
 8001656:	f10d 010b 	add.w	r1, sp, #11
 800165a:	4820      	ldr	r0, [pc, #128]	@ (80016dc <W25_ReadJedecID+0xa8>)
 800165c:	f002 fef9 	bl	8004452 <HAL_SPI_TransmitReceive>
	W25_CS_DISABLE();
 8001660:	2201      	movs	r2, #1
	retval = HAL_SPI_TransmitReceive(&hspi1, &idcmd, jdec_id, 4, 4000);
 8001662:	4605      	mov	r5, r0
	W25_CS_DISABLE();
 8001664:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001668:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800166c:	f001 fee6 	bl	800343c <HAL_GPIO_WritePin>
	char spi_flash_intro[] = "Flash ID received: ";
 8001670:	4b1b      	ldr	r3, [pc, #108]	@ (80016e0 <W25_ReadJedecID+0xac>)
 8001672:	aa07      	add	r2, sp, #28
 8001674:	f103 0710 	add.w	r7, r3, #16
 8001678:	4616      	mov	r6, r2
 800167a:	6818      	ldr	r0, [r3, #0]
 800167c:	6859      	ldr	r1, [r3, #4]
 800167e:	4614      	mov	r4, r2
 8001680:	c403      	stmia	r4!, {r0, r1}
 8001682:	3308      	adds	r3, #8
 8001684:	42bb      	cmp	r3, r7
 8001686:	4622      	mov	r2, r4
 8001688:	d1f7      	bne.n	800167a <W25_ReadJedecID+0x46>
 800168a:	6818      	ldr	r0, [r3, #0]
 800168c:	6020      	str	r0, [r4, #0]
	HAL_UART_Transmit(&huart1, (uint8_t*) spi_flash_intro, strlen(spi_flash_intro), 1000);
 800168e:	4630      	mov	r0, r6
 8001690:	f7fe fdfe 	bl	8000290 <strlen>
 8001694:	4631      	mov	r1, r6
 8001696:	b282      	uxth	r2, r0
 8001698:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800169c:	4811      	ldr	r0, [pc, #68]	@ (80016e4 <W25_ReadJedecID+0xb0>)
 800169e:	f003 fd39 	bl	8005114 <HAL_UART_Transmit>

	sprintf(result, "%02X, %02X, %02X", jdec_id[1], jdec_id[2], jdec_id[3]);
 80016a2:	f89d 300f 	ldrb.w	r3, [sp, #15]
 80016a6:	f89d 200d 	ldrb.w	r2, [sp, #13]
 80016aa:	9300      	str	r3, [sp, #0]
 80016ac:	490e      	ldr	r1, [pc, #56]	@ (80016e8 <W25_ReadJedecID+0xb4>)
 80016ae:	f89d 300e 	ldrb.w	r3, [sp, #14]
 80016b2:	a804      	add	r0, sp, #16
 80016b4:	f007 f904 	bl	80088c0 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*) result, 11, 1000);
 80016b8:	a904      	add	r1, sp, #16
 80016ba:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80016be:	220b      	movs	r2, #11
 80016c0:	4808      	ldr	r0, [pc, #32]	@ (80016e4 <W25_ReadJedecID+0xb0>)
 80016c2:	f003 fd27 	bl	8005114 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, (uint8_t*)"\r", 1, 1000);
 80016c6:	4909      	ldr	r1, [pc, #36]	@ (80016ec <W25_ReadJedecID+0xb8>)
 80016c8:	4806      	ldr	r0, [pc, #24]	@ (80016e4 <W25_ReadJedecID+0xb0>)
 80016ca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80016ce:	2201      	movs	r2, #1
 80016d0:	f003 fd20 	bl	8005114 <HAL_UART_Transmit>
	return retval;
} // W25_ReadJEDECID()
 80016d4:	4628      	mov	r0, r5
 80016d6:	b00d      	add	sp, #52	@ 0x34
 80016d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80016da:	bf00      	nop
 80016dc:	200010d8 	.word	0x200010d8
 80016e0:	0800c86b 	.word	0x0800c86b
 80016e4:	20000fa0 	.word	0x20000fa0
 80016e8:	0800c858 	.word	0x0800c858
 80016ec:	0800c869 	.word	0x0800c869

080016f0 <W25_WriteEnable>:
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)

	return retval;
} // W25_ReadUniqueID()


int W25_WriteEnable(void) {
<<<<<<< HEAD
 800361c:	b513      	push	{r0, r1, r4, lr}
	uint8_t cmd = W25_CMD_WRITE_ENABLE;
 800361e:	2306      	movs	r3, #6
	W25_CS_ENABLE(); // Drive Winbond chip select, /CS low
 8003620:	2200      	movs	r2, #0
 8003622:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003626:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
	uint8_t cmd = W25_CMD_WRITE_ENABLE;
 800362a:	f88d 3007 	strb.w	r3, [sp, #7]
	W25_CS_ENABLE(); // Drive Winbond chip select, /CS low
 800362e:	f001 ff6f 	bl	8005510 <HAL_GPIO_WritePin>
	int retval = HAL_SPI_Transmit(&hspi1, &cmd , sizeof(cmd), TIMEOUT); // Send Write Enable command
 8003632:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003636:	f10d 0107 	add.w	r1, sp, #7
 800363a:	2201      	movs	r2, #1
 800363c:	4806      	ldr	r0, [pc, #24]	@ (8003658 <W25_WriteEnable+0x3c>)
 800363e:	f002 fef0 	bl	8006422 <HAL_SPI_Transmit>
	W25_CS_DISABLE();
 8003642:	2201      	movs	r2, #1
	int retval = HAL_SPI_Transmit(&hspi1, &cmd , sizeof(cmd), TIMEOUT); // Send Write Enable command
 8003644:	4604      	mov	r4, r0
	W25_CS_DISABLE();
 8003646:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800364a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800364e:	f001 ff5f 	bl	8005510 <HAL_GPIO_WritePin>
	return retval;
} // W25_WriteEnable()
 8003652:	4620      	mov	r0, r4
 8003654:	b002      	add	sp, #8
 8003656:	bd10      	pop	{r4, pc}
 8003658:	20001388 	.word	0x20001388

0800365c <W25_SectorErase>:

int W25_SectorErase(uint32_t address)
{
 800365c:	b513      	push	{r0, r1, r4, lr}
	int retval;
	uint8_t cmdaddr[4] = {W25_CMD_SECTOR_ERASE,address>>16,address>>8,address};
 800365e:	2320      	movs	r3, #32
 8003660:	f88d 3004 	strb.w	r3, [sp, #4]
 8003664:	0c03      	lsrs	r3, r0, #16
 8003666:	ba40      	rev16	r0, r0
 8003668:	f88d 3005 	strb.w	r3, [sp, #5]
 800366c:	f8ad 0006 	strh.w	r0, [sp, #6]
	W25_WriteEnable(); // Make sure we can write...
 8003670:	f7ff ffd4 	bl	800361c <W25_WriteEnable>
	W25_CS_ENABLE(); // Drive Winbond chip select, /CS low
 8003674:	2200      	movs	r2, #0
 8003676:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800367a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800367e:	f001 ff47 	bl	8005510 <HAL_GPIO_WritePin>
	retval = HAL_SPI_Transmit(&hspi1, cmdaddr , sizeof(cmdaddr ), TIMEOUT); // Send Sector Erase command with address
 8003682:	2204      	movs	r2, #4
 8003684:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003688:	eb0d 0102 	add.w	r1, sp, r2
 800368c:	4808      	ldr	r0, [pc, #32]	@ (80036b0 <W25_SectorErase+0x54>)
 800368e:	f002 fec8 	bl	8006422 <HAL_SPI_Transmit>
	W25_CS_DISABLE();
 8003692:	2201      	movs	r2, #1
	retval = HAL_SPI_Transmit(&hspi1, cmdaddr , sizeof(cmdaddr ), TIMEOUT); // Send Sector Erase command with address
 8003694:	4604      	mov	r4, r0
	W25_CS_DISABLE();
 8003696:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800369a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800369e:	f001 ff37 	bl	8005510 <HAL_GPIO_WritePin>
	W25_DelayWhileBusy(SECTOR_ERASE_TIMEOUT);
 80036a2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80036a6:	f7ff ff1d 	bl	80034e4 <W25_DelayWhileBusy>
	return retval;
} // W25_SectorErase()
 80036aa:	4620      	mov	r0, r4
 80036ac:	b002      	add	sp, #8
 80036ae:	bd10      	pop	{r4, pc}
 80036b0:	20001388 	.word	0x20001388

080036b4 <W25_PageProgram>:

int W25_PageProgram(uint32_t address, uint8_t *buf, uint32_t count)
{
 80036b4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80036b8:	4606      	mov	r6, r0
 80036ba:	4688      	mov	r8, r1
 80036bc:	4617      	mov	r7, r2
	int retval = HAL_OK;
	W25_WriteEnable(); // Make sure we can write...
 80036be:	f7ff ffad 	bl	800361c <W25_WriteEnable>
=======
 80016f0:	b513      	push	{r0, r1, r4, lr}
	uint8_t cmd = W25_CMD_WRITE_ENABLE;
 80016f2:	2306      	movs	r3, #6
	W25_CS_ENABLE(); // Drive Winbond chip select, /CS low
 80016f4:	2200      	movs	r2, #0
 80016f6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80016fa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
	uint8_t cmd = W25_CMD_WRITE_ENABLE;
 80016fe:	f88d 3007 	strb.w	r3, [sp, #7]
	W25_CS_ENABLE(); // Drive Winbond chip select, /CS low
 8001702:	f001 fe9b 	bl	800343c <HAL_GPIO_WritePin>
	int retval = HAL_SPI_Transmit(&hspi1, &cmd , sizeof(cmd), TIMEOUT); // Send Write Enable command
 8001706:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800170a:	f10d 0107 	add.w	r1, sp, #7
 800170e:	2201      	movs	r2, #1
 8001710:	4806      	ldr	r0, [pc, #24]	@ (800172c <W25_WriteEnable+0x3c>)
 8001712:	f002 fdd4 	bl	80042be <HAL_SPI_Transmit>
	W25_CS_DISABLE();
 8001716:	2201      	movs	r2, #1
	int retval = HAL_SPI_Transmit(&hspi1, &cmd , sizeof(cmd), TIMEOUT); // Send Write Enable command
 8001718:	4604      	mov	r4, r0
	W25_CS_DISABLE();
 800171a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800171e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001722:	f001 fe8b 	bl	800343c <HAL_GPIO_WritePin>
	return retval;
} // W25_WriteEnable()
 8001726:	4620      	mov	r0, r4
 8001728:	b002      	add	sp, #8
 800172a:	bd10      	pop	{r4, pc}
 800172c:	200010d8 	.word	0x200010d8

08001730 <W25_SectorErase>:

int W25_SectorErase(uint32_t address)
{
 8001730:	b513      	push	{r0, r1, r4, lr}
	int retval;
	uint8_t cmdaddr[4] = {W25_CMD_SECTOR_ERASE,address>>16,address>>8,address};
 8001732:	2320      	movs	r3, #32
 8001734:	f88d 3004 	strb.w	r3, [sp, #4]
 8001738:	0c03      	lsrs	r3, r0, #16
 800173a:	ba40      	rev16	r0, r0
 800173c:	f88d 3005 	strb.w	r3, [sp, #5]
 8001740:	f8ad 0006 	strh.w	r0, [sp, #6]
	W25_WriteEnable(); // Make sure we can write...
 8001744:	f7ff ffd4 	bl	80016f0 <W25_WriteEnable>
	W25_CS_ENABLE(); // Drive Winbond chip select, /CS low
 8001748:	2200      	movs	r2, #0
 800174a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800174e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001752:	f001 fe73 	bl	800343c <HAL_GPIO_WritePin>
	retval = HAL_SPI_Transmit(&hspi1, cmdaddr , sizeof(cmdaddr ), TIMEOUT); // Send Sector Erase command with address
 8001756:	2204      	movs	r2, #4
 8001758:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800175c:	eb0d 0102 	add.w	r1, sp, r2
 8001760:	4808      	ldr	r0, [pc, #32]	@ (8001784 <W25_SectorErase+0x54>)
 8001762:	f002 fdac 	bl	80042be <HAL_SPI_Transmit>
	W25_CS_DISABLE();
 8001766:	2201      	movs	r2, #1
	retval = HAL_SPI_Transmit(&hspi1, cmdaddr , sizeof(cmdaddr ), TIMEOUT); // Send Sector Erase command with address
 8001768:	4604      	mov	r4, r0
	W25_CS_DISABLE();
 800176a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800176e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001772:	f001 fe63 	bl	800343c <HAL_GPIO_WritePin>
	W25_DelayWhileBusy(SECTOR_ERASE_TIMEOUT);
 8001776:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800177a:	f7ff ff1d 	bl	80015b8 <W25_DelayWhileBusy>
	return retval;
} // W25_SectorErase()
 800177e:	4620      	mov	r0, r4
 8001780:	b002      	add	sp, #8
 8001782:	bd10      	pop	{r4, pc}
 8001784:	200010d8 	.word	0x200010d8

08001788 <W25_PageProgram>:

int W25_PageProgram(uint32_t address, uint8_t *buf, uint32_t count)
{
 8001788:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 800178c:	4606      	mov	r6, r0
 800178e:	4688      	mov	r8, r1
 8001790:	4617      	mov	r7, r2
	int retval = HAL_OK;
	W25_WriteEnable(); // Make sure we can write...
 8001792:	f7ff ffad 	bl	80016f0 <W25_WriteEnable>
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
	while(count) {
		uint8_t cmdaddr[4] = {W25_CMD_PAGE_PROGRAM,address>>16,address>>8,address};
		uint32_t space_left_in_page = 0x100 - (address & 0xFF);
		uint32_t count_this_pass = count <= space_left_in_page? count:space_left_in_page;
		W25_CS_ENABLE(); // Drive Winbond chip select, /CS low
		retval = HAL_SPI_Transmit(&hspi1, cmdaddr , sizeof(cmdaddr ), TIMEOUT); // Send Page Program command with address
<<<<<<< HEAD
 80036c2:	f8df a080 	ldr.w	sl, [pc, #128]	@ 8003744 <W25_PageProgram+0x90>
	int retval = HAL_OK;
 80036c6:	2400      	movs	r4, #0
		uint8_t cmdaddr[4] = {W25_CMD_PAGE_PROGRAM,address>>16,address>>8,address};
 80036c8:	f04f 0902 	mov.w	r9, #2
	while(count) {
 80036cc:	b91f      	cbnz	r7, 80036d6 <W25_PageProgram+0x22>
=======
 8001796:	f8df a080 	ldr.w	sl, [pc, #128]	@ 8001818 <W25_PageProgram+0x90>
	int retval = HAL_OK;
 800179a:	2400      	movs	r4, #0
		uint8_t cmdaddr[4] = {W25_CMD_PAGE_PROGRAM,address>>16,address>>8,address};
 800179c:	f04f 0902 	mov.w	r9, #2
	while(count) {
 80017a0:	b91f      	cbnz	r7, 80017aa <W25_PageProgram+0x22>
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
		address += count_this_pass;
		buf += count_this_pass;
		W25_DelayWhileBusy(PAGE_PROGRAM_TIMEOUT);
	}
	return retval;
} 
<<<<<<< HEAD
 80036ce:	4620      	mov	r0, r4
 80036d0:	b002      	add	sp, #8
 80036d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		uint32_t space_left_in_page = 0x100 - (address & 0xFF);
 80036d6:	b2f5      	uxtb	r5, r6
		uint8_t cmdaddr[4] = {W25_CMD_PAGE_PROGRAM,address>>16,address>>8,address};
 80036d8:	0c33      	lsrs	r3, r6, #16
		uint32_t space_left_in_page = 0x100 - (address & 0xFF);
 80036da:	f5c5 7580 	rsb	r5, r5, #256	@ 0x100
		uint32_t count_this_pass = count <= space_left_in_page? count:space_left_in_page;
 80036de:	42bd      	cmp	r5, r7
		uint8_t cmdaddr[4] = {W25_CMD_PAGE_PROGRAM,address>>16,address>>8,address};
 80036e0:	f88d 3005 	strb.w	r3, [sp, #5]
		W25_CS_ENABLE(); // Drive Winbond chip select, /CS low
 80036e4:	f04f 0200 	mov.w	r2, #0
		uint8_t cmdaddr[4] = {W25_CMD_PAGE_PROGRAM,address>>16,address>>8,address};
 80036e8:	ba73      	rev16	r3, r6
		W25_CS_ENABLE(); // Drive Winbond chip select, /CS low
 80036ea:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80036ee:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
		uint8_t cmdaddr[4] = {W25_CMD_PAGE_PROGRAM,address>>16,address>>8,address};
 80036f2:	f8ad 3006 	strh.w	r3, [sp, #6]
		uint32_t count_this_pass = count <= space_left_in_page? count:space_left_in_page;
 80036f6:	bf28      	it	cs
 80036f8:	463d      	movcs	r5, r7
		uint8_t cmdaddr[4] = {W25_CMD_PAGE_PROGRAM,address>>16,address>>8,address};
 80036fa:	f88d 9004 	strb.w	r9, [sp, #4]
		W25_CS_ENABLE(); // Drive Winbond chip select, /CS low
 80036fe:	f001 ff07 	bl	8005510 <HAL_GPIO_WritePin>
		retval = HAL_SPI_Transmit(&hspi1, cmdaddr , sizeof(cmdaddr ), TIMEOUT); // Send Page Program command with address
 8003702:	2204      	movs	r2, #4
 8003704:	480f      	ldr	r0, [pc, #60]	@ (8003744 <W25_PageProgram+0x90>)
 8003706:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800370a:	eb0d 0102 	add.w	r1, sp, r2
 800370e:	f002 fe88 	bl	8006422 <HAL_SPI_Transmit>
		if(retval == HAL_OK)
 8003712:	4604      	mov	r4, r0
 8003714:	b938      	cbnz	r0, 8003726 <W25_PageProgram+0x72>
		  retval = HAL_SPI_Transmit(&hspi1, buf, count_this_pass, TIMEOUT); // Write page data
 8003716:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800371a:	b2aa      	uxth	r2, r5
 800371c:	4641      	mov	r1, r8
 800371e:	4650      	mov	r0, sl
 8003720:	f002 fe7f 	bl	8006422 <HAL_SPI_Transmit>
 8003724:	4604      	mov	r4, r0
		W25_CS_DISABLE();
 8003726:	2201      	movs	r2, #1
 8003728:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800372c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003730:	f001 feee 	bl	8005510 <HAL_GPIO_WritePin>
		W25_DelayWhileBusy(PAGE_PROGRAM_TIMEOUT);
 8003734:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
		count -= count_this_pass;
 8003738:	1b7f      	subs	r7, r7, r5
		address += count_this_pass;
 800373a:	442e      	add	r6, r5
		buf += count_this_pass;
 800373c:	44a8      	add	r8, r5
		W25_DelayWhileBusy(PAGE_PROGRAM_TIMEOUT);
 800373e:	f7ff fed1 	bl	80034e4 <W25_DelayWhileBusy>
 8003742:	e7c3      	b.n	80036cc <W25_PageProgram+0x18>
 8003744:	20001388 	.word	0x20001388

08003748 <W25_ReadData>:
=======
 80017a2:	4620      	mov	r0, r4
 80017a4:	b002      	add	sp, #8
 80017a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		uint32_t space_left_in_page = 0x100 - (address & 0xFF);
 80017aa:	b2f5      	uxtb	r5, r6
		uint8_t cmdaddr[4] = {W25_CMD_PAGE_PROGRAM,address>>16,address>>8,address};
 80017ac:	0c33      	lsrs	r3, r6, #16
		uint32_t space_left_in_page = 0x100 - (address & 0xFF);
 80017ae:	f5c5 7580 	rsb	r5, r5, #256	@ 0x100
		uint32_t count_this_pass = count <= space_left_in_page? count:space_left_in_page;
 80017b2:	42bd      	cmp	r5, r7
		uint8_t cmdaddr[4] = {W25_CMD_PAGE_PROGRAM,address>>16,address>>8,address};
 80017b4:	f88d 3005 	strb.w	r3, [sp, #5]
		W25_CS_ENABLE(); // Drive Winbond chip select, /CS low
 80017b8:	f04f 0200 	mov.w	r2, #0
		uint8_t cmdaddr[4] = {W25_CMD_PAGE_PROGRAM,address>>16,address>>8,address};
 80017bc:	ba73      	rev16	r3, r6
		W25_CS_ENABLE(); // Drive Winbond chip select, /CS low
 80017be:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80017c2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
		uint8_t cmdaddr[4] = {W25_CMD_PAGE_PROGRAM,address>>16,address>>8,address};
 80017c6:	f8ad 3006 	strh.w	r3, [sp, #6]
		uint32_t count_this_pass = count <= space_left_in_page? count:space_left_in_page;
 80017ca:	bf28      	it	cs
 80017cc:	463d      	movcs	r5, r7
		uint8_t cmdaddr[4] = {W25_CMD_PAGE_PROGRAM,address>>16,address>>8,address};
 80017ce:	f88d 9004 	strb.w	r9, [sp, #4]
		W25_CS_ENABLE(); // Drive Winbond chip select, /CS low
 80017d2:	f001 fe33 	bl	800343c <HAL_GPIO_WritePin>
		retval = HAL_SPI_Transmit(&hspi1, cmdaddr , sizeof(cmdaddr ), TIMEOUT); // Send Page Program command with address
 80017d6:	2204      	movs	r2, #4
 80017d8:	480f      	ldr	r0, [pc, #60]	@ (8001818 <W25_PageProgram+0x90>)
 80017da:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80017de:	eb0d 0102 	add.w	r1, sp, r2
 80017e2:	f002 fd6c 	bl	80042be <HAL_SPI_Transmit>
		if(retval == HAL_OK)
 80017e6:	4604      	mov	r4, r0
 80017e8:	b938      	cbnz	r0, 80017fa <W25_PageProgram+0x72>
		  retval = HAL_SPI_Transmit(&hspi1, buf, count_this_pass, TIMEOUT); // Write page data
 80017ea:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80017ee:	b2aa      	uxth	r2, r5
 80017f0:	4641      	mov	r1, r8
 80017f2:	4650      	mov	r0, sl
 80017f4:	f002 fd63 	bl	80042be <HAL_SPI_Transmit>
 80017f8:	4604      	mov	r4, r0
		W25_CS_DISABLE();
 80017fa:	2201      	movs	r2, #1
 80017fc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001800:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001804:	f001 fe1a 	bl	800343c <HAL_GPIO_WritePin>
		W25_DelayWhileBusy(PAGE_PROGRAM_TIMEOUT);
 8001808:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
		count -= count_this_pass;
 800180c:	1b7f      	subs	r7, r7, r5
		address += count_this_pass;
 800180e:	442e      	add	r6, r5
		buf += count_this_pass;
 8001810:	44a8      	add	r8, r5
		W25_DelayWhileBusy(PAGE_PROGRAM_TIMEOUT);
 8001812:	f7ff fed1 	bl	80015b8 <W25_DelayWhileBusy>
 8001816:	e7c3      	b.n	80017a0 <W25_PageProgram+0x18>
 8001818:	200010d8 	.word	0x200010d8

0800181c <W25_ReadData>:
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)

// Winbond 8.2.6 Read Data (03h)
// The only limit for quantity of data is memory / device size
int W25_ReadData(uint32_t address, uint8_t *buf, int bufSize)
{
<<<<<<< HEAD
 8003748:	b573      	push	{r0, r1, r4, r5, r6, lr}
	int retval;
	uint8_t cmdaddr[4] = {W25_CMD_READ_DATA,address>>16,address>>8,address};
 800374a:	2303      	movs	r3, #3
 800374c:	f88d 3004 	strb.w	r3, [sp, #4]
 8003750:	0c03      	lsrs	r3, r0, #16
 8003752:	ba40      	rev16	r0, r0
 8003754:	f8ad 0006 	strh.w	r0, [sp, #6]
{
 8003758:	460d      	mov	r5, r1
	//printf("+%s(Addr 0x%06X, buf 0x%08X, Len 0x%04X)\r\n",__func__,address,buf,bufSize);
	W25_CS_ENABLE(); // Drive Winbond chip select, /CS low
 800375a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800375e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
{
 8003762:	4616      	mov	r6, r2
	W25_CS_ENABLE(); // Drive Winbond chip select, /CS low
 8003764:	2200      	movs	r2, #0
	uint8_t cmdaddr[4] = {W25_CMD_READ_DATA,address>>16,address>>8,address};
 8003766:	f88d 3005 	strb.w	r3, [sp, #5]
	W25_CS_ENABLE(); // Drive Winbond chip select, /CS low
 800376a:	f001 fed1 	bl	8005510 <HAL_GPIO_WritePin>
	retval = HAL_SPI_Transmit(&hspi1, cmdaddr , sizeof(cmdaddr), 500); // Send Read Data command with address
 800376e:	2204      	movs	r2, #4
 8003770:	480d      	ldr	r0, [pc, #52]	@ (80037a8 <W25_ReadData+0x60>)
 8003772:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8003776:	eb0d 0102 	add.w	r1, sp, r2
 800377a:	f002 fe52 	bl	8006422 <HAL_SPI_Transmit>
	if(retval != HAL_OK) {
 800377e:	4604      	mov	r4, r0
 8003780:	b978      	cbnz	r0, 80037a2 <W25_ReadData+0x5a>
=======
 800181c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	int retval;
	uint8_t cmdaddr[4] = {W25_CMD_READ_DATA,address>>16,address>>8,address};
 800181e:	2303      	movs	r3, #3
 8001820:	f88d 3004 	strb.w	r3, [sp, #4]
 8001824:	0c03      	lsrs	r3, r0, #16
 8001826:	ba40      	rev16	r0, r0
 8001828:	f8ad 0006 	strh.w	r0, [sp, #6]
{
 800182c:	460d      	mov	r5, r1
	//printf("+%s(Addr 0x%06X, buf 0x%08X, Len 0x%04X)\r\n",__func__,address,buf,bufSize);
	W25_CS_ENABLE(); // Drive Winbond chip select, /CS low
 800182e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001832:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
{
 8001836:	4616      	mov	r6, r2
	W25_CS_ENABLE(); // Drive Winbond chip select, /CS low
 8001838:	2200      	movs	r2, #0
	uint8_t cmdaddr[4] = {W25_CMD_READ_DATA,address>>16,address>>8,address};
 800183a:	f88d 3005 	strb.w	r3, [sp, #5]
	W25_CS_ENABLE(); // Drive Winbond chip select, /CS low
 800183e:	f001 fdfd 	bl	800343c <HAL_GPIO_WritePin>
	retval = HAL_SPI_Transmit(&hspi1, cmdaddr , sizeof(cmdaddr), 500); // Send Read Data command with address
 8001842:	2204      	movs	r2, #4
 8001844:	480d      	ldr	r0, [pc, #52]	@ (800187c <W25_ReadData+0x60>)
 8001846:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800184a:	eb0d 0102 	add.w	r1, sp, r2
 800184e:	f002 fd36 	bl	80042be <HAL_SPI_Transmit>
	if(retval != HAL_OK) {
 8001852:	4604      	mov	r4, r0
 8001854:	b978      	cbnz	r0, 8001876 <W25_ReadData+0x5a>
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
		return retval;
	}
	//memset(buf,0,bufSize); // Buffer is transmitted during receive
	retval = HAL_SPI_Receive(&hspi1, buf, bufSize, 2000); // need longer time-outs when using slow SPI clock
<<<<<<< HEAD
 8003782:	4809      	ldr	r0, [pc, #36]	@ (80037a8 <W25_ReadData+0x60>)
 8003784:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8003788:	b2b2      	uxth	r2, r6
 800378a:	4629      	mov	r1, r5
 800378c:	f003 f843 	bl	8006816 <HAL_SPI_Receive>
	if(retval != HAL_OK)
 8003790:	4604      	mov	r4, r0
 8003792:	b130      	cbz	r0, 80037a2 <W25_ReadData+0x5a>

	W25_CS_DISABLE();
 8003794:	2201      	movs	r2, #1
 8003796:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800379a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800379e:	f001 feb7 	bl	8005510 <HAL_GPIO_WritePin>

	return retval;
} // W25_ReadData()
 80037a2:	4620      	mov	r0, r4
 80037a4:	b002      	add	sp, #8
 80037a6:	bd70      	pop	{r4, r5, r6, pc}
 80037a8:	20001388 	.word	0x20001388

080037ac <IsPageValid>:
=======
 8001856:	4809      	ldr	r0, [pc, #36]	@ (800187c <W25_ReadData+0x60>)
 8001858:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800185c:	b2b2      	uxth	r2, r6
 800185e:	4629      	mov	r1, r5
 8001860:	f002 ff27 	bl	80046b2 <HAL_SPI_Receive>
	if(retval != HAL_OK)
 8001864:	4604      	mov	r4, r0
 8001866:	b130      	cbz	r0, 8001876 <W25_ReadData+0x5a>

	W25_CS_DISABLE();
 8001868:	2201      	movs	r2, #1
 800186a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800186e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001872:	f001 fde3 	bl	800343c <HAL_GPIO_WritePin>

	return retval;
} // W25_ReadData()
 8001876:	4620      	mov	r0, r4
 8001878:	b002      	add	sp, #8
 800187a:	bd70      	pop	{r4, r5, r6, pc}
 800187c:	200010d8 	.word	0x200010d8

08001880 <IsPageValid>:
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)


// Function to check if a page contains valid data
int IsPageValid(uint8_t *page) {
<<<<<<< HEAD
 80037ac:	b510      	push	{r4, lr}
    char *last_semicolon = strrchr((char *)page, ';'); // Find the last semicolon
 80037ae:	213b      	movs	r1, #59	@ 0x3b
 80037b0:	f007 faee 	bl	800ad90 <strrchr>
    if (!last_semicolon) {
 80037b4:	4604      	mov	r4, r0
 80037b6:	b190      	cbz	r0, 80037de <IsPageValid+0x32>
=======
 8001880:	b510      	push	{r4, lr}
    char *last_semicolon = strrchr((char *)page, ';'); // Find the last semicolon
 8001882:	213b      	movs	r1, #59	@ 0x3b
 8001884:	f007 f90b 	bl	8008a9e <strrchr>
    if (!last_semicolon) {
 8001888:	4604      	mov	r4, r0
 800188a:	b190      	cbz	r0, 80018b2 <IsPageValid+0x32>
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
        return 0; // No semicolon found, invalid page
    }

    char *last_param = last_semicolon + 1; // Last parameter starts after the last semicolon
    size_t len = strlen(last_param);
<<<<<<< HEAD
 80037b8:	3001      	adds	r0, #1
 80037ba:	f7fc fd69 	bl	8000290 <strlen>

    // Ensure the last parameter is exactly 6 characters and numeric
    if (len < 6) {
 80037be:	2805      	cmp	r0, #5
 80037c0:	d90d      	bls.n	80037de <IsPageValid+0x32>
 80037c2:	1da2      	adds	r2, r4, #6
=======
 800188c:	3001      	adds	r0, #1
 800188e:	f7fe fcff 	bl	8000290 <strlen>

    // Ensure the last parameter is exactly 6 characters and numeric
    if (len < 6) {
 8001892:	2805      	cmp	r0, #5
 8001894:	d90d      	bls.n	80018b2 <IsPageValid+0x32>
 8001896:	1da2      	adds	r2, r4, #6
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
        return 0; // Too short to be valid
    }

    for (int i = 0; i < 6; ++i) {
        if ((last_param[i] < '0' || last_param[i] > '9' ) &&
<<<<<<< HEAD
 80037c4:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80037c8:	f1a3 0130 	sub.w	r1, r3, #48	@ 0x30
 80037cc:	2909      	cmp	r1, #9
 80037ce:	d902      	bls.n	80037d6 <IsPageValid+0x2a>
 80037d0:	3b61      	subs	r3, #97	@ 0x61
 80037d2:	2b05      	cmp	r3, #5
 80037d4:	d803      	bhi.n	80037de <IsPageValid+0x32>
    for (int i = 0; i < 6; ++i) {
 80037d6:	4294      	cmp	r4, r2
 80037d8:	d1f4      	bne.n	80037c4 <IsPageValid+0x18>
=======
 8001898:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800189c:	f1a3 0130 	sub.w	r1, r3, #48	@ 0x30
 80018a0:	2909      	cmp	r1, #9
 80018a2:	d902      	bls.n	80018aa <IsPageValid+0x2a>
 80018a4:	3b61      	subs	r3, #97	@ 0x61
 80018a6:	2b05      	cmp	r3, #5
 80018a8:	d803      	bhi.n	80018b2 <IsPageValid+0x32>
    for (int i = 0; i < 6; ++i) {
 80018aa:	4294      	cmp	r4, r2
 80018ac:	d1f4      	bne.n	8001898 <IsPageValid+0x18>
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
                (last_param[i] < 'a' || last_param[i] > 'f')) {
            return 0; // Not numeric
        }
    }

    return 1; // Page contains valid data
<<<<<<< HEAD
 80037da:	2001      	movs	r0, #1
}
 80037dc:	bd10      	pop	{r4, pc}
        return 0; // No semicolon found, invalid page
 80037de:	2000      	movs	r0, #0
 80037e0:	e7fc      	b.n	80037dc <IsPageValid+0x30>
	...

080037e4 <UpdatePageAddress>:
=======
 80018ae:	2001      	movs	r0, #1
}
 80018b0:	bd10      	pop	{r4, pc}
        return 0; // No semicolon found, invalid page
 80018b2:	2000      	movs	r0, #0
 80018b4:	e7fc      	b.n	80018b0 <IsPageValid+0x30>
	...

080018b8 <UpdatePageAddress>:
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)


// Function to update the last parameter of the page (address)
void UpdatePageAddress(uint8_t *page, uint32_t new_address) {
<<<<<<< HEAD
 80037e4:	b513      	push	{r0, r1, r4, lr}
 80037e6:	460b      	mov	r3, r1
 80037e8:	4604      	mov	r4, r0
    char new_address_str[7];
    snprintf(new_address_str, sizeof(new_address_str), "%06lx", new_address);
 80037ea:	4a08      	ldr	r2, [pc, #32]	@ (800380c <UpdatePageAddress+0x28>)
 80037ec:	2107      	movs	r1, #7
 80037ee:	4668      	mov	r0, sp
 80037f0:	f007 f998 	bl	800ab24 <sniprintf>
    memcpy(page + strlen((char *)page) - 6, new_address_str, 6); // Overwrite last 6 characters
 80037f4:	4620      	mov	r0, r4
 80037f6:	f7fc fd4b 	bl	8000290 <strlen>
 80037fa:	1f83      	subs	r3, r0, #6
 80037fc:	9800      	ldr	r0, [sp, #0]
 80037fe:	50e0      	str	r0, [r4, r3]
 8003800:	18e2      	adds	r2, r4, r3
 8003802:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8003806:	8093      	strh	r3, [r2, #4]
}
 8003808:	b002      	add	sp, #8
 800380a:	bd10      	pop	{r4, pc}
 800380c:	0800fce8 	.word	0x0800fce8

08003810 <W25_ShiftLeftFlashDataByPage>:

int W25_ShiftLeftFlashDataByPage(uint32_t src_addr, uint32_t dest_addr) {
 8003810:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int loop_time = 0;
	if(src_addr == 0x3000 && dest_addr == 0x3000){
		loop_time = 1;
	}
	loop_time = (src_addr - dest_addr) / 128;
 8003814:	1a40      	subs	r0, r0, r1
int W25_ShiftLeftFlashDataByPage(uint32_t src_addr, uint32_t dest_addr) {
 8003816:	b091      	sub	sp, #68	@ 0x44
	loop_time = (src_addr - dest_addr) / 128;
 8003818:	09c3      	lsrs	r3, r0, #7
				Debug_printf("READING ALL THE SECTOR: ERROR\n");
				return HAL_ERROR; // Exit if read fails
			}
			else{
				char spi_flash_data_intro[] = "First page of Flash DATA at Reading All Sector: \n";
				HAL_UART_Transmit(&huart1, (uint8_t*) spi_flash_data_intro, strlen(spi_flash_data_intro), 1000);
 800381a:	4f8e      	ldr	r7, [pc, #568]	@ (8003a54 <W25_ShiftLeftFlashDataByPage+0x244>)
	loop_time = (src_addr - dest_addr) / 128;
 800381c:	9301      	str	r3, [sp, #4]
    for(size_t i = 0; i < loop_time; i++){
 800381e:	f04f 0900 	mov.w	r9, #0
    uint32_t current_sector_start = FLASH_START_ADDRESS;
 8003822:	f44f 5540 	mov.w	r5, #12288	@ 0x3000
    for(size_t i = 0; i < loop_time; i++){
 8003826:	9b01      	ldr	r3, [sp, #4]
 8003828:	454b      	cmp	r3, r9
 800382a:	f040 810b 	bne.w	8003a44 <W25_ShiftLeftFlashDataByPage+0x234>
			// Move to the next sector
			current_sector_start = next_sector_start;
		}
=======
 80018b8:	b513      	push	{r0, r1, r4, lr}
 80018ba:	460b      	mov	r3, r1
 80018bc:	4604      	mov	r4, r0
    char new_address_str[7];
    snprintf(new_address_str, sizeof(new_address_str), "%06lx", new_address);
 80018be:	4a08      	ldr	r2, [pc, #32]	@ (80018e0 <UpdatePageAddress+0x28>)
 80018c0:	2107      	movs	r1, #7
 80018c2:	4668      	mov	r0, sp
 80018c4:	f006 ffc8 	bl	8008858 <sniprintf>
    memcpy(page + strlen((char *)page) - 6, new_address_str, 6); // Overwrite last 6 characters
 80018c8:	4620      	mov	r0, r4
 80018ca:	f7fe fce1 	bl	8000290 <strlen>
 80018ce:	1f83      	subs	r3, r0, #6
 80018d0:	9800      	ldr	r0, [sp, #0]
 80018d2:	50e0      	str	r0, [r4, r3]
 80018d4:	18e2      	adds	r2, r4, r3
 80018d6:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80018da:	8093      	strh	r3, [r2, #4]
}
 80018dc:	b002      	add	sp, #8
 80018de:	bd10      	pop	{r4, pc}
 80018e0:	0800c87f 	.word	0x0800c87f

080018e4 <W25_ShiftLeftEntireFlashBySector>:
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
    }

    return HAL_OK;
 800382e:	2000      	movs	r0, #0
 8003830:	e00e      	b.n	8003850 <W25_ShiftLeftFlashDataByPage+0x40>
			W25_Reset();
 8003832:	f7ff fe68 	bl	8003506 <W25_Reset>
			if (W25_ReadData(current_sector_start, sector_buffer, SECTOR_SIZE) != HAL_OK) {
 8003836:	4988      	ldr	r1, [pc, #544]	@ (8003a58 <W25_ShiftLeftFlashDataByPage+0x248>)
 8003838:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800383c:	4628      	mov	r0, r5
			uint32_t next_sector_start = current_sector_start + SECTOR_SIZE;
 800383e:	f505 5a80 	add.w	sl, r5, #4096	@ 0x1000
			if (W25_ReadData(current_sector_start, sector_buffer, SECTOR_SIZE) != HAL_OK) {
 8003842:	f7ff ff81 	bl	8003748 <W25_ReadData>
 8003846:	b130      	cbz	r0, 8003856 <W25_ShiftLeftFlashDataByPage+0x46>
				Debug_printf("READING ALL THE SECTOR: ERROR\n");
 8003848:	4884      	ldr	r0, [pc, #528]	@ (8003a5c <W25_ShiftLeftFlashDataByPage+0x24c>)
					Debug_printf("READING FIRST PAGE OF THE NEXT SECTOR: ERROR\n");
 800384a:	f000 fea3 	bl	8004594 <Debug_printf>
				return HAL_ERROR; // Exit if read fails
 800384e:	2001      	movs	r0, #1
}
<<<<<<< HEAD
 8003850:	b011      	add	sp, #68	@ 0x44
 8003852:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char spi_flash_data_intro[] = "First page of Flash DATA at Reading All Sector: \n";
 8003856:	4b82      	ldr	r3, [pc, #520]	@ (8003a60 <W25_ShiftLeftFlashDataByPage+0x250>)
 8003858:	aa03      	add	r2, sp, #12
 800385a:	f103 0c30 	add.w	ip, r3, #48	@ 0x30
 800385e:	4614      	mov	r4, r2
 8003860:	6818      	ldr	r0, [r3, #0]
 8003862:	6859      	ldr	r1, [r3, #4]
 8003864:	4616      	mov	r6, r2
 8003866:	c603      	stmia	r6!, {r0, r1}
 8003868:	3308      	adds	r3, #8
 800386a:	4563      	cmp	r3, ip
 800386c:	4632      	mov	r2, r6
 800386e:	d1f7      	bne.n	8003860 <W25_ShiftLeftFlashDataByPage+0x50>
 8003870:	881b      	ldrh	r3, [r3, #0]
 8003872:	8033      	strh	r3, [r6, #0]
				HAL_UART_Transmit(&huart1, (uint8_t*) spi_flash_data_intro, strlen(spi_flash_data_intro), 1000);
 8003874:	4620      	mov	r0, r4
 8003876:	f7fc fd0b 	bl	8000290 <strlen>
 800387a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800387e:	b282      	uxth	r2, r0
 8003880:	4621      	mov	r1, r4
 8003882:	4638      	mov	r0, r7
 8003884:	f003 fd9c 	bl	80073c0 <HAL_UART_Transmit>
				HAL_UART_Transmit(&huart1, sector_buffer, 128, 1000);
 8003888:	4973      	ldr	r1, [pc, #460]	@ (8003a58 <W25_ShiftLeftFlashDataByPage+0x248>)
 800388a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800388e:	2280      	movs	r2, #128	@ 0x80
 8003890:	4638      	mov	r0, r7
 8003892:	f003 fd95 	bl	80073c0 <HAL_UART_Transmit>
				Debug_printf("\n\n");
 8003896:	4873      	ldr	r0, [pc, #460]	@ (8003a64 <W25_ShiftLeftFlashDataByPage+0x254>)
 8003898:	f000 fe7c 	bl	8004594 <Debug_printf>
			if (next_sector_start < FLASH_END_ADDRESS) {
 800389c:	f5ba 4fa0 	cmp.w	sl, #20480	@ 0x5000
 80038a0:	d02e      	beq.n	8003900 <W25_ShiftLeftFlashDataByPage+0xf0>
				W25_Reset();
 80038a2:	f7ff fe30 	bl	8003506 <W25_Reset>
				if (W25_ReadData(next_sector_start, next_page_buffer, PAGE_SIZE) != HAL_OK) {
 80038a6:	4970      	ldr	r1, [pc, #448]	@ (8003a68 <W25_ShiftLeftFlashDataByPage+0x258>)
 80038a8:	2280      	movs	r2, #128	@ 0x80
 80038aa:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 80038ae:	f7ff ff4b 	bl	8003748 <W25_ReadData>
 80038b2:	b108      	cbz	r0, 80038b8 <W25_ShiftLeftFlashDataByPage+0xa8>
					Debug_printf("READING FIRST PAGE OF THE NEXT SECTOR: ERROR\n");
 80038b4:	486d      	ldr	r0, [pc, #436]	@ (8003a6c <W25_ShiftLeftFlashDataByPage+0x25c>)
 80038b6:	e7c8      	b.n	800384a <W25_ShiftLeftFlashDataByPage+0x3a>
					char spi_flash_data_intro[] = "First page of Flash DATA at reading NEXT SECTOR: \n";
 80038b8:	4b6d      	ldr	r3, [pc, #436]	@ (8003a70 <W25_ShiftLeftFlashDataByPage+0x260>)
 80038ba:	4622      	mov	r2, r4
 80038bc:	f103 0c30 	add.w	ip, r3, #48	@ 0x30
 80038c0:	6818      	ldr	r0, [r3, #0]
 80038c2:	6859      	ldr	r1, [r3, #4]
 80038c4:	4616      	mov	r6, r2
 80038c6:	c603      	stmia	r6!, {r0, r1}
 80038c8:	3308      	adds	r3, #8
 80038ca:	4563      	cmp	r3, ip
 80038cc:	4632      	mov	r2, r6
 80038ce:	d1f7      	bne.n	80038c0 <W25_ShiftLeftFlashDataByPage+0xb0>
 80038d0:	8819      	ldrh	r1, [r3, #0]
 80038d2:	789b      	ldrb	r3, [r3, #2]
 80038d4:	8031      	strh	r1, [r6, #0]
 80038d6:	70b3      	strb	r3, [r6, #2]
					HAL_UART_Transmit(&huart1, (uint8_t*) spi_flash_data_intro, strlen(spi_flash_data_intro), 1000);
 80038d8:	4620      	mov	r0, r4
 80038da:	f7fc fcd9 	bl	8000290 <strlen>
 80038de:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80038e2:	b282      	uxth	r2, r0
 80038e4:	4621      	mov	r1, r4
 80038e6:	485b      	ldr	r0, [pc, #364]	@ (8003a54 <W25_ShiftLeftFlashDataByPage+0x244>)
 80038e8:	f003 fd6a 	bl	80073c0 <HAL_UART_Transmit>
					HAL_UART_Transmit(&huart1, next_page_buffer, 128, 1000);
 80038ec:	495e      	ldr	r1, [pc, #376]	@ (8003a68 <W25_ShiftLeftFlashDataByPage+0x258>)
 80038ee:	4859      	ldr	r0, [pc, #356]	@ (8003a54 <W25_ShiftLeftFlashDataByPage+0x244>)
 80038f0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80038f4:	2280      	movs	r2, #128	@ 0x80
 80038f6:	f003 fd63 	bl	80073c0 <HAL_UART_Transmit>
					Debug_printf("\n\n");
 80038fa:	485a      	ldr	r0, [pc, #360]	@ (8003a64 <W25_ShiftLeftFlashDataByPage+0x254>)
 80038fc:	f000 fe4a 	bl	8004594 <Debug_printf>
int W25_ShiftLeftFlashDataByPage(uint32_t src_addr, uint32_t dest_addr) {
 8003900:	4e55      	ldr	r6, [pc, #340]	@ (8003a58 <W25_ShiftLeftFlashDataByPage+0x248>)
 8003902:	f04f 0800 	mov.w	r8, #0
				if (IsPageValid(sector_buffer + offset + PAGE_SIZE)) {
 8003906:	46b3      	mov	fp, r6
 8003908:	3680      	adds	r6, #128	@ 0x80
 800390a:	4630      	mov	r0, r6
 800390c:	f7ff ff4e 	bl	80037ac <IsPageValid>
 8003910:	f108 0880 	add.w	r8, r8, #128	@ 0x80
					Debug_printf("------VALID PAGE at %08lx-------\n", offset+PAGE_SIZE);
 8003914:	4641      	mov	r1, r8
				if (IsPageValid(sector_buffer + offset + PAGE_SIZE)) {
 8003916:	2800      	cmp	r0, #0
 8003918:	d051      	beq.n	80039be <W25_ShiftLeftFlashDataByPage+0x1ae>
					Debug_printf("------VALID PAGE at %08lx-------\n", offset+PAGE_SIZE);
 800391a:	4856      	ldr	r0, [pc, #344]	@ (8003a74 <W25_ShiftLeftFlashDataByPage+0x264>)
 800391c:	f000 fe3a 	bl	8004594 <Debug_printf>
					char spi_flash_data_intro[] = "Valid Page Data: \n";
 8003920:	4a55      	ldr	r2, [pc, #340]	@ (8003a78 <W25_ShiftLeftFlashDataByPage+0x268>)
 8003922:	ab03      	add	r3, sp, #12
 8003924:	f102 0e10 	add.w	lr, r2, #16
 8003928:	6810      	ldr	r0, [r2, #0]
 800392a:	6851      	ldr	r1, [r2, #4]
 800392c:	469c      	mov	ip, r3
 800392e:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8003932:	3208      	adds	r2, #8
 8003934:	4572      	cmp	r2, lr
 8003936:	4663      	mov	r3, ip
 8003938:	d1f6      	bne.n	8003928 <W25_ShiftLeftFlashDataByPage+0x118>
 800393a:	8811      	ldrh	r1, [r2, #0]
 800393c:	7892      	ldrb	r2, [r2, #2]
 800393e:	f8ac 1000 	strh.w	r1, [ip]
 8003942:	f88c 2002 	strb.w	r2, [ip, #2]
					HAL_UART_Transmit(&huart1, (uint8_t*) spi_flash_data_intro, strlen(spi_flash_data_intro), 1000);
 8003946:	4620      	mov	r0, r4
 8003948:	f7fc fca2 	bl	8000290 <strlen>
 800394c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003950:	b282      	uxth	r2, r0
 8003952:	4621      	mov	r1, r4
 8003954:	4638      	mov	r0, r7
 8003956:	f003 fd33 	bl	80073c0 <HAL_UART_Transmit>
					HAL_UART_Transmit(&huart1, sector_buffer + offset+ PAGE_SIZE, 128, 1000);
 800395a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800395e:	2280      	movs	r2, #128	@ 0x80
 8003960:	4631      	mov	r1, r6
 8003962:	4638      	mov	r0, r7
 8003964:	f003 fd2c 	bl	80073c0 <HAL_UART_Transmit>
					Debug_printf("\n");
 8003968:	4844      	ldr	r0, [pc, #272]	@ (8003a7c <W25_ShiftLeftFlashDataByPage+0x26c>)
 800396a:	f000 fe13 	bl	8004594 <Debug_printf>
					memcpy(sector_buffer + offset, sector_buffer + offset + PAGE_SIZE, PAGE_SIZE);
 800396e:	4631      	mov	r1, r6
 8003970:	2280      	movs	r2, #128	@ 0x80
 8003972:	4658      	mov	r0, fp
 8003974:	f008 f82b 	bl	800b9ce <memcpy>
					UpdatePageAddress(sector_buffer + offset, current_sector_start + offset);
 8003978:	f1a5 0180 	sub.w	r1, r5, #128	@ 0x80
 800397c:	4441      	add	r1, r8
 800397e:	4658      	mov	r0, fp
 8003980:	f7ff ff30 	bl	80037e4 <UpdatePageAddress>
			for (uint32_t offset = 0; offset < SECTOR_SIZE - PAGE_SIZE; offset += PAGE_SIZE) {
 8003984:	f5b8 6f78 	cmp.w	r8, #3968	@ 0xf80
 8003988:	d1bd      	bne.n	8003906 <W25_ShiftLeftFlashDataByPage+0xf6>
			if (next_sector_start < FLASH_END_ADDRESS && IsPageValid(next_page_buffer)) {
 800398a:	f5ba 4fa0 	cmp.w	sl, #20480	@ 0x5000
 800398e:	d00d      	beq.n	80039ac <W25_ShiftLeftFlashDataByPage+0x19c>
 8003990:	4835      	ldr	r0, [pc, #212]	@ (8003a68 <W25_ShiftLeftFlashDataByPage+0x258>)
 8003992:	f7ff ff0b 	bl	80037ac <IsPageValid>
 8003996:	b148      	cbz	r0, 80039ac <W25_ShiftLeftFlashDataByPage+0x19c>
				memcpy(sector_buffer + (SECTOR_SIZE - PAGE_SIZE), next_page_buffer, PAGE_SIZE);
 8003998:	4933      	ldr	r1, [pc, #204]	@ (8003a68 <W25_ShiftLeftFlashDataByPage+0x258>)
 800399a:	4839      	ldr	r0, [pc, #228]	@ (8003a80 <W25_ShiftLeftFlashDataByPage+0x270>)
 800399c:	2280      	movs	r2, #128	@ 0x80
 800399e:	f008 f816 	bl	800b9ce <memcpy>
				UpdatePageAddress(sector_buffer + (SECTOR_SIZE - PAGE_SIZE), current_sector_start + (SECTOR_SIZE - PAGE_SIZE));
 80039a2:	4837      	ldr	r0, [pc, #220]	@ (8003a80 <W25_ShiftLeftFlashDataByPage+0x270>)
 80039a4:	f44f 517e 	mov.w	r1, #16256	@ 0x3f80
 80039a8:	f7ff ff1c 	bl	80037e4 <UpdatePageAddress>
			W25_Reset();
 80039ac:	f7ff fdab 	bl	8003506 <W25_Reset>
			if (W25_SectorErase(current_sector_start) != HAL_OK) {
 80039b0:	4628      	mov	r0, r5
 80039b2:	f7ff fe53 	bl	800365c <W25_SectorErase>
 80039b6:	4604      	mov	r4, r0
 80039b8:	b388      	cbz	r0, 8003a1e <W25_ShiftLeftFlashDataByPage+0x20e>
				Debug_printf("Erase ALL CURRENT SECTOR: ERROR\n");
 80039ba:	4832      	ldr	r0, [pc, #200]	@ (8003a84 <W25_ShiftLeftFlashDataByPage+0x274>)
 80039bc:	e745      	b.n	800384a <W25_ShiftLeftFlashDataByPage+0x3a>
					Debug_printf("-------INVALID PAGE at %08lx-------\n", offset+PAGE_SIZE);
 80039be:	4832      	ldr	r0, [pc, #200]	@ (8003a88 <W25_ShiftLeftFlashDataByPage+0x278>)
 80039c0:	f000 fde8 	bl	8004594 <Debug_printf>
					char spi_flash_data_intro[] = "Invalid Page Data: \n";
 80039c4:	4a31      	ldr	r2, [pc, #196]	@ (8003a8c <W25_ShiftLeftFlashDataByPage+0x27c>)
 80039c6:	ab03      	add	r3, sp, #12
 80039c8:	f102 0e10 	add.w	lr, r2, #16
 80039cc:	6810      	ldr	r0, [r2, #0]
 80039ce:	6851      	ldr	r1, [r2, #4]
 80039d0:	469c      	mov	ip, r3
 80039d2:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 80039d6:	3208      	adds	r2, #8
 80039d8:	4572      	cmp	r2, lr
 80039da:	4663      	mov	r3, ip
 80039dc:	d1f6      	bne.n	80039cc <W25_ShiftLeftFlashDataByPage+0x1bc>
 80039de:	6810      	ldr	r0, [r2, #0]
 80039e0:	7912      	ldrb	r2, [r2, #4]
 80039e2:	f8cc 0000 	str.w	r0, [ip]
 80039e6:	f88c 2004 	strb.w	r2, [ip, #4]
					HAL_UART_Transmit(&huart1, (uint8_t*) spi_flash_data_intro, strlen(spi_flash_data_intro), 1000);
 80039ea:	4620      	mov	r0, r4
 80039ec:	f7fc fc50 	bl	8000290 <strlen>
 80039f0:	4621      	mov	r1, r4
 80039f2:	b282      	uxth	r2, r0
 80039f4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80039f8:	4638      	mov	r0, r7
 80039fa:	f003 fce1 	bl	80073c0 <HAL_UART_Transmit>
					HAL_UART_Transmit(&huart1, sector_buffer + offset +PAGE_SIZE, 128, 1000);
 80039fe:	4631      	mov	r1, r6
 8003a00:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003a04:	2280      	movs	r2, #128	@ 0x80
 8003a06:	4638      	mov	r0, r7
 8003a08:	f003 fcda 	bl	80073c0 <HAL_UART_Transmit>
					Debug_printf("\n");
 8003a0c:	481b      	ldr	r0, [pc, #108]	@ (8003a7c <W25_ShiftLeftFlashDataByPage+0x26c>)
 8003a0e:	f000 fdc1 	bl	8004594 <Debug_printf>
					memset(sector_buffer + offset, 0xFF, PAGE_SIZE); // Invalidate the page
 8003a12:	2280      	movs	r2, #128	@ 0x80
 8003a14:	21ff      	movs	r1, #255	@ 0xff
 8003a16:	4658      	mov	r0, fp
 8003a18:	f007 f980 	bl	800ad1c <memset>
 8003a1c:	e7b2      	b.n	8003984 <W25_ShiftLeftFlashDataByPage+0x174>
				W25_Reset();
 8003a1e:	f7ff fd72 	bl	8003506 <W25_Reset>
				if (W25_PageProgram(current_sector_start + offset, sector_buffer + offset, PAGE_SIZE) != HAL_OK) {
 8003a22:	4b0d      	ldr	r3, [pc, #52]	@ (8003a58 <W25_ShiftLeftFlashDataByPage+0x248>)
 8003a24:	2280      	movs	r2, #128	@ 0x80
 8003a26:	1919      	adds	r1, r3, r4
 8003a28:	1928      	adds	r0, r5, r4
 8003a2a:	f7ff fe43 	bl	80036b4 <W25_PageProgram>
 8003a2e:	b120      	cbz	r0, 8003a3a <W25_ShiftLeftFlashDataByPage+0x22a>
					Debug_printf("PAGE PROGRAM: ERROR at page offset %08lx\n", offset);
 8003a30:	4817      	ldr	r0, [pc, #92]	@ (8003a90 <W25_ShiftLeftFlashDataByPage+0x280>)
 8003a32:	4621      	mov	r1, r4
 8003a34:	f000 fdae 	bl	8004594 <Debug_printf>
					return HAL_ERROR; // Exit if write fails
 8003a38:	e709      	b.n	800384e <W25_ShiftLeftFlashDataByPage+0x3e>
			for (uint32_t offset = 0; offset < SECTOR_SIZE; offset += PAGE_SIZE) {
 8003a3a:	3480      	adds	r4, #128	@ 0x80
 8003a3c:	f5b4 5f80 	cmp.w	r4, #4096	@ 0x1000
 8003a40:	d1ed      	bne.n	8003a1e <W25_ShiftLeftFlashDataByPage+0x20e>
			uint32_t next_sector_start = current_sector_start + SECTOR_SIZE;
 8003a42:	4655      	mov	r5, sl
		while (current_sector_start < FLASH_END_ADDRESS) {
 8003a44:	f5b5 4fa0 	cmp.w	r5, #20480	@ 0x5000
 8003a48:	f4ff aef3 	bcc.w	8003832 <W25_ShiftLeftFlashDataByPage+0x22>
    for(size_t i = 0; i < loop_time; i++){
 8003a4c:	f109 0901 	add.w	r9, r9, #1
 8003a50:	e6e9      	b.n	8003826 <W25_ShiftLeftFlashDataByPage+0x16>
 8003a52:	bf00      	nop
 8003a54:	20001250 	.word	0x20001250
 8003a58:	20001774 	.word	0x20001774
 8003a5c:	0800fcee 	.word	0x0800fcee
 8003a60:	0800fdcd 	.word	0x0800fdcd
 8003a64:	0800fa07 	.word	0x0800fa07
 8003a68:	200016f4 	.word	0x200016f4
 8003a6c:	0800fd0d 	.word	0x0800fd0d
 8003a70:	0800fdff 	.word	0x0800fdff
 8003a74:	0800fd3b 	.word	0x0800fd3b
 8003a78:	0800fe32 	.word	0x0800fe32
 8003a7c:	0800fa08 	.word	0x0800fa08
 8003a80:	200026f4 	.word	0x200026f4
 8003a84:	0800fd82 	.word	0x0800fd82
 8003a88:	0800fd5d 	.word	0x0800fd5d
 8003a8c:	0800fe45 	.word	0x0800fe45
 8003a90:	0800fda3 	.word	0x0800fda3

08003a94 <receiveResultAddress>:
		HAL_Delay(1000);
=======

int W25_ShiftLeftEntireFlashBySector(uint32_t current_sector_start) {
 80018e4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80018e8:	4604      	mov	r4, r0
	Debug_printf("\nINSIDE SHIFT LEFT ENTIRE FLASH BY SECTOR\n");
 80018ea:	4846      	ldr	r0, [pc, #280]	@ (8001a04 <W25_ShiftLeftEntireFlashBySector+0x120>)
    // Step 1: Start from the first sector and loop through the entire Flash
    while (current_sector_start <= FLASH_END_ADDRESS) {

        // Read the current sector into the buffer
        W25_Reset();
        if (W25_ReadData(current_sector_start, current_sector_buffer, SECTOR_SIZE) != HAL_OK) {
 80018ec:	f8df 8140 	ldr.w	r8, [pc, #320]	@ 8001a30 <W25_ShiftLeftEntireFlashBySector+0x14c>
            Debug_printf("READING CURRENT SECTOR ERROR at %08lx\n", current_sector_start);
            return HAL_ERROR;
        }
        Debug_printf("First Page Data of Current Address: \n");
 80018f0:	f8df 9140 	ldr.w	r9, [pc, #320]	@ 8001a34 <W25_ShiftLeftEntireFlashBySector+0x150>
		HAL_UART_Transmit(&huart1, current_sector_buffer, 128, 1000);
 80018f4:	f8df a128 	ldr.w	sl, [pc, #296]	@ 8001a20 <W25_ShiftLeftEntireFlashBySector+0x13c>
	Debug_printf("\nINSIDE SHIFT LEFT ENTIRE FLASH BY SECTOR\n");
 80018f8:	f000 fe02 	bl	8002500 <Debug_printf>
    Debug_printf("CURRENT SECTOR START ADDRESS %08lx\n", current_sector_start);
 80018fc:	4842      	ldr	r0, [pc, #264]	@ (8001a08 <W25_ShiftLeftEntireFlashBySector+0x124>)
 80018fe:	4621      	mov	r1, r4
 8001900:	f000 fdfe 	bl	8002500 <Debug_printf>
    uint32_t previous_sector_start = current_sector_start - SECTOR_SIZE;
 8001904:	f5a4 5680 	sub.w	r6, r4, #4096	@ 0x1000
    while (current_sector_start <= FLASH_END_ADDRESS) {
 8001908:	4637      	mov	r7, r6
 800190a:	f506 5680 	add.w	r6, r6, #4096	@ 0x1000
 800190e:	f5b6 4fa0 	cmp.w	r6, #20480	@ 0x5000
 8001912:	d842      	bhi.n	800199a <W25_ShiftLeftEntireFlashBySector+0xb6>
        W25_Reset();
 8001914:	f7ff fe61 	bl	80015da <W25_Reset>
        if (W25_ReadData(current_sector_start, current_sector_buffer, SECTOR_SIZE) != HAL_OK) {
 8001918:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800191c:	4641      	mov	r1, r8
 800191e:	4630      	mov	r0, r6
 8001920:	f7ff ff7c 	bl	800181c <W25_ReadData>
 8001924:	b130      	cbz	r0, 8001934 <W25_ShiftLeftEntireFlashBySector+0x50>
            Debug_printf("READING CURRENT SECTOR ERROR at %08lx\n", current_sector_start);
 8001926:	4839      	ldr	r0, [pc, #228]	@ (8001a0c <W25_ShiftLeftEntireFlashBySector+0x128>)
 8001928:	4631      	mov	r1, r6

        // If it's not the first sector, read the first page of the previous sector
        if (previous_sector_start >= FLASH_START_ADDRESS) {
            W25_Reset();
            if (W25_ReadData(previous_sector_start, previous_page_buffer, PAGE_SIZE) != HAL_OK) {
                Debug_printf("READING FIRST PAGE OF PREVIOUS SECTOR ERROR at %08lx\n", previous_sector_start);
 800192a:	f000 fde9 	bl	8002500 <Debug_printf>
            return HAL_ERROR;
 800192e:	2001      	movs	r0, #1
        current_sector_start += SECTOR_SIZE;
        previous_sector_start += SECTOR_SIZE;
    }

    return HAL_OK;
}
 8001930:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        Debug_printf("First Page Data of Current Address: \n");
 8001934:	4648      	mov	r0, r9
 8001936:	f000 fde3 	bl	8002500 <Debug_printf>
		HAL_UART_Transmit(&huart1, current_sector_buffer, 128, 1000);
 800193a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800193e:	2280      	movs	r2, #128	@ 0x80
 8001940:	4641      	mov	r1, r8
 8001942:	4650      	mov	r0, sl
 8001944:	f003 fbe6 	bl	8005114 <HAL_UART_Transmit>
		Debug_printf("\n");
 8001948:	4831      	ldr	r0, [pc, #196]	@ (8001a10 <W25_ShiftLeftEntireFlashBySector+0x12c>)
 800194a:	f000 fdd9 	bl	8002500 <Debug_printf>
        if (previous_sector_start >= FLASH_START_ADDRESS) {
 800194e:	f5b7 5f40 	cmp.w	r7, #12288	@ 0x3000
 8001952:	d324      	bcc.n	800199e <W25_ShiftLeftEntireFlashBySector+0xba>
            W25_Reset();
 8001954:	f7ff fe41 	bl	80015da <W25_Reset>
            if (W25_ReadData(previous_sector_start, previous_page_buffer, PAGE_SIZE) != HAL_OK) {
 8001958:	492e      	ldr	r1, [pc, #184]	@ (8001a14 <W25_ShiftLeftEntireFlashBySector+0x130>)
 800195a:	2280      	movs	r2, #128	@ 0x80
 800195c:	4638      	mov	r0, r7
 800195e:	f7ff ff5d 	bl	800181c <W25_ReadData>
 8001962:	b110      	cbz	r0, 800196a <W25_ShiftLeftEntireFlashBySector+0x86>
                Debug_printf("READING FIRST PAGE OF PREVIOUS SECTOR ERROR at %08lx\n", previous_sector_start);
 8001964:	482c      	ldr	r0, [pc, #176]	@ (8001a18 <W25_ShiftLeftEntireFlashBySector+0x134>)
 8001966:	4639      	mov	r1, r7
 8001968:	e7df      	b.n	800192a <W25_ShiftLeftEntireFlashBySector+0x46>
            Debug_printf("First Page Data of Previous Address: \n");
 800196a:	482c      	ldr	r0, [pc, #176]	@ (8001a1c <W25_ShiftLeftEntireFlashBySector+0x138>)
 800196c:	f000 fdc8 	bl	8002500 <Debug_printf>
			HAL_UART_Transmit(&huart1, previous_page_buffer, 128, 1000);
 8001970:	4928      	ldr	r1, [pc, #160]	@ (8001a14 <W25_ShiftLeftEntireFlashBySector+0x130>)
 8001972:	482b      	ldr	r0, [pc, #172]	@ (8001a20 <W25_ShiftLeftEntireFlashBySector+0x13c>)
 8001974:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001978:	2280      	movs	r2, #128	@ 0x80
 800197a:	f003 fbcb 	bl	8005114 <HAL_UART_Transmit>
			Debug_printf("\n");
 800197e:	4824      	ldr	r0, [pc, #144]	@ (8001a10 <W25_ShiftLeftEntireFlashBySector+0x12c>)
 8001980:	f000 fdbe 	bl	8002500 <Debug_printf>
        if (IsPageValid(current_sector_buffer) == 0  && IsPageValid(previous_page_buffer) == 0) {
 8001984:	4640      	mov	r0, r8
 8001986:	f7ff ff7b 	bl	8001880 <IsPageValid>
 800198a:	b970      	cbnz	r0, 80019aa <W25_ShiftLeftEntireFlashBySector+0xc6>
 800198c:	4821      	ldr	r0, [pc, #132]	@ (8001a14 <W25_ShiftLeftEntireFlashBySector+0x130>)
 800198e:	f7ff ff77 	bl	8001880 <IsPageValid>
 8001992:	b950      	cbnz	r0, 80019aa <W25_ShiftLeftEntireFlashBySector+0xc6>
            Debug_printf("Both the first page of the current and previous sectors are empty. Stopping shift left.\n");
 8001994:	4823      	ldr	r0, [pc, #140]	@ (8001a24 <W25_ShiftLeftEntireFlashBySector+0x140>)
 8001996:	f000 fdb3 	bl	8002500 <Debug_printf>
    return HAL_OK;
 800199a:	2000      	movs	r0, #0
 800199c:	e7c8      	b.n	8001930 <W25_ShiftLeftEntireFlashBySector+0x4c>
            memset(previous_page_buffer, 0xFF, PAGE_SIZE);  // No previous sector, use invalid data
 800199e:	2280      	movs	r2, #128	@ 0x80
 80019a0:	21ff      	movs	r1, #255	@ 0xff
 80019a2:	481c      	ldr	r0, [pc, #112]	@ (8001a14 <W25_ShiftLeftEntireFlashBySector+0x130>)
 80019a4:	f007 f854 	bl	8008a50 <memset>
 80019a8:	e7ec      	b.n	8001984 <W25_ShiftLeftEntireFlashBySector+0xa0>
        W25_Reset();
 80019aa:	f7ff fe16 	bl	80015da <W25_Reset>
        if (W25_SectorErase(previous_sector_start) != HAL_OK) {
 80019ae:	4638      	mov	r0, r7
 80019b0:	f7ff febe 	bl	8001730 <W25_SectorErase>
 80019b4:	4604      	mov	r4, r0
 80019b6:	b160      	cbz	r0, 80019d2 <W25_ShiftLeftEntireFlashBySector+0xee>
            Debug_printf("ERASING PREVIOUS SECTOR ERROR at %08lx\n", previous_sector_start);
 80019b8:	481b      	ldr	r0, [pc, #108]	@ (8001a28 <W25_ShiftLeftEntireFlashBySector+0x144>)
 80019ba:	4639      	mov	r1, r7
 80019bc:	e7b5      	b.n	800192a <W25_ShiftLeftEntireFlashBySector+0x46>
                memset(page_data, 0xFF, PAGE_SIZE); // Invalidate the page if it's not valid
 80019be:	2280      	movs	r2, #128	@ 0x80
 80019c0:	21ff      	movs	r1, #255	@ 0xff
 80019c2:	4628      	mov	r0, r5
 80019c4:	f007 f844 	bl	8008a50 <memset>
 80019c8:	e010      	b.n	80019ec <W25_ShiftLeftEntireFlashBySector+0x108>
        for (uint32_t offset = 0; offset < SECTOR_SIZE; offset += PAGE_SIZE) {
 80019ca:	3480      	adds	r4, #128	@ 0x80
 80019cc:	f5b4 5f80 	cmp.w	r4, #4096	@ 0x1000
 80019d0:	d09a      	beq.n	8001908 <W25_ShiftLeftEntireFlashBySector+0x24>
            uint8_t *page_data = current_sector_buffer + offset;
 80019d2:	eb08 0504 	add.w	r5, r8, r4
            if (IsPageValid(page_data)) {
 80019d6:	4628      	mov	r0, r5
 80019d8:	f7ff ff52 	bl	8001880 <IsPageValid>
                UpdatePageAddress(page_data, previous_sector_start + offset); // Update the page address
 80019dc:	eb07 0b04 	add.w	fp, r7, r4
            if (IsPageValid(page_data)) {
 80019e0:	2800      	cmp	r0, #0
 80019e2:	d0ec      	beq.n	80019be <W25_ShiftLeftEntireFlashBySector+0xda>
                UpdatePageAddress(page_data, previous_sector_start + offset); // Update the page address
 80019e4:	4659      	mov	r1, fp
 80019e6:	4628      	mov	r0, r5
 80019e8:	f7ff ff66 	bl	80018b8 <UpdatePageAddress>
            W25_Reset();
 80019ec:	f7ff fdf5 	bl	80015da <W25_Reset>
            if (W25_PageProgram(previous_sector_start + offset, page_data, PAGE_SIZE) != HAL_OK) {
 80019f0:	2280      	movs	r2, #128	@ 0x80
 80019f2:	4629      	mov	r1, r5
 80019f4:	4658      	mov	r0, fp
 80019f6:	f7ff fec7 	bl	8001788 <W25_PageProgram>
 80019fa:	2800      	cmp	r0, #0
 80019fc:	d0e5      	beq.n	80019ca <W25_ShiftLeftEntireFlashBySector+0xe6>
                Debug_printf("WRITING PAGE ERROR at %08lx\n", previous_sector_start + offset);
 80019fe:	480b      	ldr	r0, [pc, #44]	@ (8001a2c <W25_ShiftLeftEntireFlashBySector+0x148>)
 8001a00:	4659      	mov	r1, fp
 8001a02:	e792      	b.n	800192a <W25_ShiftLeftEntireFlashBySector+0x46>
 8001a04:	0800c9f1 	.word	0x0800c9f1
 8001a08:	0800ca1c 	.word	0x0800ca1c
 8001a0c:	0800ca40 	.word	0x0800ca40
 8001a10:	0800ce23 	.word	0x0800ce23
 8001a14:	200013e4 	.word	0x200013e4
 8001a18:	0800ca8d 	.word	0x0800ca8d
 8001a1c:	0800cac3 	.word	0x0800cac3
 8001a20:	20000fa0 	.word	0x20000fa0
 8001a24:	0800caea 	.word	0x0800caea
 8001a28:	0800cb43 	.word	0x0800cb43
 8001a2c:	0800cb6b 	.word	0x0800cb6b
 8001a30:	20001464 	.word	0x20001464
 8001a34:	0800ca67 	.word	0x0800ca67

08001a38 <calculate_epoch_time_utc>:
		osDelay(1000);
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
		memset(flashBufferTaxReceived, 0x00,128);
	}
}

void receiveResultAddress(){
 8003a94:	b530      	push	{r4, r5, lr}
	osEvent evt = osMailGet(result_MailQGSMId, 2000); // Wait for mail
 8003a96:	4d0d      	ldr	r5, [pc, #52]	@ (8003acc <receiveResultAddress+0x38>)
void receiveResultAddress(){
 8003a98:	b085      	sub	sp, #20
	osEvent evt = osMailGet(result_MailQGSMId, 2000); // Wait for mail
 8003a9a:	6829      	ldr	r1, [r5, #0]
 8003a9c:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8003aa0:	a801      	add	r0, sp, #4
 8003aa2:	f003 fef9 	bl	8007898 <osMailGet>
	if (evt.status == osEventMail) {
 8003aa6:	9b01      	ldr	r3, [sp, #4]
 8003aa8:	2b20      	cmp	r3, #32
 8003aaa:	d10d      	bne.n	8003ac8 <receiveResultAddress+0x34>
		uint32_t *receivedData = (uint32_t *) evt.value.p;
 8003aac:	9902      	ldr	r1, [sp, #8]
		result_address = *receivedData;
 8003aae:	4c08      	ldr	r4, [pc, #32]	@ (8003ad0 <receiveResultAddress+0x3c>)
 8003ab0:	680b      	ldr	r3, [r1, #0]
		osMailFree(result_MailQGSMId, receivedData);
 8003ab2:	6828      	ldr	r0, [r5, #0]
		result_address = *receivedData;
 8003ab4:	6023      	str	r3, [r4, #0]
		osMailFree(result_MailQGSMId, receivedData);
 8003ab6:	f003 ff28 	bl	800790a <osMailFree>
		Debug_printf("\n\nThe result address received at SPI FLASH from GSM that the data in this ADDRESS has been sent successfully: %08lx\n\n", result_address);
 8003aba:	6821      	ldr	r1, [r4, #0]
 8003abc:	4805      	ldr	r0, [pc, #20]	@ (8003ad4 <receiveResultAddress+0x40>)
	}
}
 8003abe:	b005      	add	sp, #20
 8003ac0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		Debug_printf("\n\nThe result address received at SPI FLASH from GSM that the data in this ADDRESS has been sent successfully: %08lx\n\n", result_address);
 8003ac4:	f000 bd66 	b.w	8004594 <Debug_printf>
}
 8003ac8:	b005      	add	sp, #20
 8003aca:	bd30      	pop	{r4, r5, pc}
 8003acc:	20000e04 	.word	0x20000e04
 8003ad0:	20000e00 	.word	0x20000e00
 8003ad4:	0800fe8d 	.word	0x0800fe8d

08003ad8 <calculate_epoch_time_utc>:

uint32_t calculate_epoch_time_utc(DATE *date, TIME *time) {
<<<<<<< HEAD
 8003ad8:	b500      	push	{lr}
    struct tm timeinfo;
    // Set up time structure
    timeinfo.tm_year = date->Yr - 1900; // - 1900 + 2000
 8003ada:	6883      	ldr	r3, [r0, #8]
uint32_t calculate_epoch_time_utc(DATE *date, TIME *time) {
 8003adc:	b08b      	sub	sp, #44	@ 0x2c
    timeinfo.tm_year = date->Yr - 1900; // - 1900 + 2000
 8003ade:	f2a3 736c 	subw	r3, r3, #1900	@ 0x76c
 8003ae2:	9306      	str	r3, [sp, #24]
    timeinfo.tm_mon = date->Mon - 1;
 8003ae4:	6843      	ldr	r3, [r0, #4]
 8003ae6:	3b01      	subs	r3, #1
 8003ae8:	9305      	str	r3, [sp, #20]
    timeinfo.tm_mday = date->Day;
 8003aea:	6803      	ldr	r3, [r0, #0]
 8003aec:	9304      	str	r3, [sp, #16]
    timeinfo.tm_hour = time->hour;
 8003aee:	680b      	ldr	r3, [r1, #0]
 8003af0:	9303      	str	r3, [sp, #12]
    timeinfo.tm_min = time->min;
 8003af2:	684b      	ldr	r3, [r1, #4]
 8003af4:	9302      	str	r3, [sp, #8]
    timeinfo.tm_sec = time->sec;
 8003af6:	688b      	ldr	r3, [r1, #8]
 8003af8:	9301      	str	r3, [sp, #4]
=======
 8001a38:	b500      	push	{lr}
    struct tm timeinfo;
    // Set up time structure
    timeinfo.tm_year = date->Yr - 1900; // - 1900 + 2000
 8001a3a:	6883      	ldr	r3, [r0, #8]
uint32_t calculate_epoch_time_utc(DATE *date, TIME *time) {
 8001a3c:	b08b      	sub	sp, #44	@ 0x2c
    timeinfo.tm_year = date->Yr - 1900; // - 1900 + 2000
 8001a3e:	f2a3 736c 	subw	r3, r3, #1900	@ 0x76c
 8001a42:	9306      	str	r3, [sp, #24]
    timeinfo.tm_mon = date->Mon - 1;
 8001a44:	6843      	ldr	r3, [r0, #4]
 8001a46:	3b01      	subs	r3, #1
 8001a48:	9305      	str	r3, [sp, #20]
    timeinfo.tm_mday = date->Day;
 8001a4a:	6803      	ldr	r3, [r0, #0]
 8001a4c:	9304      	str	r3, [sp, #16]
    timeinfo.tm_hour = time->hour;
 8001a4e:	680b      	ldr	r3, [r1, #0]
 8001a50:	9303      	str	r3, [sp, #12]
    timeinfo.tm_min = time->min;
 8001a52:	684b      	ldr	r3, [r1, #4]
 8001a54:	9302      	str	r3, [sp, #8]
    timeinfo.tm_sec = time->sec;
 8001a56:	688b      	ldr	r3, [r1, #8]
 8001a58:	9301      	str	r3, [sp, #4]
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
    timeinfo.tm_isdst = -1; // Let mktime determine DST if necessary

    // Get the local epoch time and then adjust for timezone offset
    time_t local_epoch = mktime(&timeinfo);
<<<<<<< HEAD
 8003afa:	a801      	add	r0, sp, #4
    timeinfo.tm_isdst = -1; // Let mktime determine DST if necessary
 8003afc:	f04f 33ff 	mov.w	r3, #4294967295
 8003b00:	9309      	str	r3, [sp, #36]	@ 0x24
    time_t local_epoch = mktime(&timeinfo);
 8003b02:	f007 fa45 	bl	800af90 <mktime>
    return (uint32_t)(local_epoch + 25200); // Subtract timezone offset
}
 8003b06:	f500 40c4 	add.w	r0, r0, #25088	@ 0x6200
 8003b0a:	3070      	adds	r0, #112	@ 0x70
 8003b0c:	b00b      	add	sp, #44	@ 0x2c
 8003b0e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08003b14 <format_rmc_data>:



void format_rmc_data(RMCSTRUCT *rmc_data, char *output_buffer, size_t buffer_size) {
 8003b14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b18:	ed2d 8b04 	vpush	{d8-d9}
 8003b1c:	4604      	mov	r4, r0
 8003b1e:	b09b      	sub	sp, #108	@ 0x6c
 8003b20:	e9cd 1218 	strd	r1, r2, [sp, #96]	@ 0x60
	//uart_transmit_string(&huart1, (uint8_t*) "Format RMC data");
    uint32_t epoch_time = calculate_epoch_time_utc(&rmc_data->date, &rmc_data->tim);
 8003b24:	4601      	mov	r1, r0
 8003b26:	3010      	adds	r0, #16
 8003b28:	f7ff ffd6 	bl	8003ad8 <calculate_epoch_time_utc>

    // Format all fields in a single line with semicolon separation, including date
    snprintf(output_buffer, buffer_size, "%d;%d;%d;%d;%d;%d;%.6f;%c;%.6f;%c;%.1f;%.1f;%s;%lu", rmc_data->date.Yr, rmc_data->date.Mon, rmc_data->date.Day, rmc_data->tim.hour, rmc_data->tim.min, rmc_data->tim.sec, rmc_data->lcation.latitude, rmc_data->lcation.NS, rmc_data->lcation.longitude, rmc_data->lcation.EW, rmc_data->speed, rmc_data->course, rmc_data->isValid ? "Valid" : "Invalid", epoch_time);
 8003b2c:	69a3      	ldr	r3, [r4, #24]
 8003b2e:	9314      	str	r3, [sp, #80]	@ 0x50
 8003b30:	e9d4 3504 	ldrd	r3, r5, [r4, #16]
    uint32_t epoch_time = calculate_epoch_time_utc(&rmc_data->date, &rmc_data->tim);
 8003b34:	4607      	mov	r7, r0
    snprintf(output_buffer, buffer_size, "%d;%d;%d;%d;%d;%d;%.6f;%c;%.6f;%c;%.1f;%.1f;%s;%lu", rmc_data->date.Yr, rmc_data->date.Mon, rmc_data->date.Day, rmc_data->tim.hour, rmc_data->tim.min, rmc_data->tim.sec, rmc_data->lcation.latitude, rmc_data->lcation.NS, rmc_data->lcation.longitude, rmc_data->lcation.EW, rmc_data->speed, rmc_data->course, rmc_data->isValid ? "Valid" : "Invalid", epoch_time);
 8003b36:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8003b38:	9315      	str	r3, [sp, #84]	@ 0x54
 8003b3a:	f7fc fd15 	bl	8000568 <__aeabi_f2d>
 8003b3e:	e9cd 0116 	strd	r0, r1, [sp, #88]	@ 0x58
 8003b42:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8003b44:	f8d4 b008 	ldr.w	fp, [r4, #8]
 8003b48:	f894 6040 	ldrb.w	r6, [r4, #64]	@ 0x40
 8003b4c:	f894 8050 	ldrb.w	r8, [r4, #80]	@ 0x50
 8003b50:	f7fc fd0a 	bl	8000568 <__aeabi_f2d>
 8003b54:	e9d4 9a00 	ldrd	r9, sl, [r4]
 8003b58:	ed94 8b0e 	vldr	d8, [r4, #56]	@ 0x38
 8003b5c:	ed94 9b12 	vldr	d9, [r4, #72]	@ 0x48
 8003b60:	ed9d 7b16 	vldr	d7, [sp, #88]	@ 0x58
 8003b64:	6b24      	ldr	r4, [r4, #48]	@ 0x30
 8003b66:	f8cd 8030 	str.w	r8, [sp, #48]	@ 0x30
 8003b6a:	4602      	mov	r2, r0
 8003b6c:	460b      	mov	r3, r1
 8003b6e:	4811      	ldr	r0, [pc, #68]	@ (8003bb4 <format_rmc_data+0xa0>)
 8003b70:	4911      	ldr	r1, [pc, #68]	@ (8003bb8 <format_rmc_data+0xa4>)
 8003b72:	9608      	str	r6, [sp, #32]
 8003b74:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8003b78:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8003b7a:	4a10      	ldr	r2, [pc, #64]	@ (8003bbc <format_rmc_data+0xa8>)
 8003b7c:	f8cd 9008 	str.w	r9, [sp, #8]
 8003b80:	2c00      	cmp	r4, #0
 8003b82:	bf08      	it	eq
 8003b84:	4601      	moveq	r1, r0
 8003b86:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8003b8a:	e9cd 5300 	strd	r5, r3, [sp]
 8003b8e:	e9cd 1712 	strd	r1, r7, [sp, #72]	@ 0x48
 8003b92:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8003b94:	ed8d 9b0a 	vstr	d9, [sp, #40]	@ 0x28
 8003b98:	ed8d 8b06 	vstr	d8, [sp, #24]
 8003b9c:	e9cd ab03 	strd	sl, fp, [sp, #12]
 8003ba0:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	@ 0x60
 8003ba4:	f006 ffbe 	bl	800ab24 <sniprintf>
}
 8003ba8:	b01b      	add	sp, #108	@ 0x6c
 8003baa:	ecbd 8b04 	vpop	{d8-d9}
 8003bae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003bb2:	bf00      	nop
 8003bb4:	0800f391 	.word	0x0800f391
 8003bb8:	0800f38b 	.word	0x0800f38b
 8003bbc:	0800ff03 	.word	0x0800ff03

08003bc0 <saveRMC>:


void saveRMC(){
 8003bc0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
=======
 8001a5a:	a801      	add	r0, sp, #4
    timeinfo.tm_isdst = -1; // Let mktime determine DST if necessary
 8001a5c:	f04f 33ff 	mov.w	r3, #4294967295
 8001a60:	9309      	str	r3, [sp, #36]	@ 0x24
    time_t local_epoch = mktime(&timeinfo);
 8001a62:	f007 f907 	bl	8008c74 <mktime>
    return (uint32_t)(local_epoch + 25200); // Subtract timezone offset
}
 8001a66:	f500 40c4 	add.w	r0, r0, #25088	@ 0x6200
 8001a6a:	3070      	adds	r0, #112	@ 0x70
 8001a6c:	b00b      	add	sp, #44	@ 0x2c
 8001a6e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08001a74 <format_rmc_data>:

void format_rmc_data(RMCSTRUCT *rmc_data, char *output_buffer, size_t buffer_size) {
 8001a74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001a78:	ed2d 8b04 	vpush	{d8-d9}
 8001a7c:	4604      	mov	r4, r0
 8001a7e:	b09b      	sub	sp, #108	@ 0x6c
 8001a80:	e9cd 1218 	strd	r1, r2, [sp, #96]	@ 0x60
	//uart_transmit_string(&huart1, (uint8_t*) "Format RMC data");
    uint32_t epoch_time = calculate_epoch_time_utc(&rmc_data->date, &rmc_data->tim);
 8001a84:	4601      	mov	r1, r0
 8001a86:	3010      	adds	r0, #16
 8001a88:	f7ff ffd6 	bl	8001a38 <calculate_epoch_time_utc>

    // Format all fields in a single line with semicolon separation, including date
    snprintf(output_buffer, buffer_size, "%d;%d;%d;%d;%d;%d;%.6f;%c;%.6f;%c;%.1f;%.1f;%s;%lu", rmc_data->date.Yr, rmc_data->date.Mon, rmc_data->date.Day, rmc_data->tim.hour, rmc_data->tim.min, rmc_data->tim.sec, rmc_data->lcation.latitude, rmc_data->lcation.NS, rmc_data->lcation.longitude, rmc_data->lcation.EW, rmc_data->speed, rmc_data->course, rmc_data->isValid ? "Valid" : "Invalid", epoch_time);
 8001a8c:	69a3      	ldr	r3, [r4, #24]
 8001a8e:	9314      	str	r3, [sp, #80]	@ 0x50
 8001a90:	e9d4 3504 	ldrd	r3, r5, [r4, #16]
    uint32_t epoch_time = calculate_epoch_time_utc(&rmc_data->date, &rmc_data->tim);
 8001a94:	4607      	mov	r7, r0
    snprintf(output_buffer, buffer_size, "%d;%d;%d;%d;%d;%d;%.6f;%c;%.6f;%c;%.1f;%.1f;%s;%lu", rmc_data->date.Yr, rmc_data->date.Mon, rmc_data->date.Day, rmc_data->tim.hour, rmc_data->tim.min, rmc_data->tim.sec, rmc_data->lcation.latitude, rmc_data->lcation.NS, rmc_data->lcation.longitude, rmc_data->lcation.EW, rmc_data->speed, rmc_data->course, rmc_data->isValid ? "Valid" : "Invalid", epoch_time);
 8001a96:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8001a98:	9315      	str	r3, [sp, #84]	@ 0x54
 8001a9a:	f7fe fd65 	bl	8000568 <__aeabi_f2d>
 8001a9e:	e9cd 0116 	strd	r0, r1, [sp, #88]	@ 0x58
 8001aa2:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8001aa4:	f8d4 b008 	ldr.w	fp, [r4, #8]
 8001aa8:	f894 6040 	ldrb.w	r6, [r4, #64]	@ 0x40
 8001aac:	f894 8050 	ldrb.w	r8, [r4, #80]	@ 0x50
 8001ab0:	f7fe fd5a 	bl	8000568 <__aeabi_f2d>
 8001ab4:	e9d4 9a00 	ldrd	r9, sl, [r4]
 8001ab8:	ed94 8b0e 	vldr	d8, [r4, #56]	@ 0x38
 8001abc:	ed94 9b12 	vldr	d9, [r4, #72]	@ 0x48
 8001ac0:	ed9d 7b16 	vldr	d7, [sp, #88]	@ 0x58
 8001ac4:	6b24      	ldr	r4, [r4, #48]	@ 0x30
 8001ac6:	f8cd 8030 	str.w	r8, [sp, #48]	@ 0x30
 8001aca:	4602      	mov	r2, r0
 8001acc:	460b      	mov	r3, r1
 8001ace:	4811      	ldr	r0, [pc, #68]	@ (8001b14 <format_rmc_data+0xa0>)
 8001ad0:	4911      	ldr	r1, [pc, #68]	@ (8001b18 <format_rmc_data+0xa4>)
 8001ad2:	9608      	str	r6, [sp, #32]
 8001ad4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8001ad8:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8001ada:	4a10      	ldr	r2, [pc, #64]	@ (8001b1c <format_rmc_data+0xa8>)
 8001adc:	f8cd 9008 	str.w	r9, [sp, #8]
 8001ae0:	2c00      	cmp	r4, #0
 8001ae2:	bf08      	it	eq
 8001ae4:	4601      	moveq	r1, r0
 8001ae6:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8001aea:	e9cd 5300 	strd	r5, r3, [sp]
 8001aee:	e9cd 1712 	strd	r1, r7, [sp, #72]	@ 0x48
 8001af2:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8001af4:	ed8d 9b0a 	vstr	d9, [sp, #40]	@ 0x28
 8001af8:	ed8d 8b06 	vstr	d8, [sp, #24]
 8001afc:	e9cd ab03 	strd	sl, fp, [sp, #12]
 8001b00:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	@ 0x60
 8001b04:	f006 fea8 	bl	8008858 <sniprintf>
}
 8001b08:	b01b      	add	sp, #108	@ 0x6c
 8001b0a:	ecbd 8b04 	vpop	{d8-d9}
 8001b0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001b12:	bf00      	nop
 8001b14:	0800cbca 	.word	0x0800cbca
 8001b18:	0800cbc4 	.word	0x0800cbc4
 8001b1c:	0800cbd2 	.word	0x0800cbd2

08001b20 <saveRMC>:


void saveRMC(){
 8001b20:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
	Debug_printf("\n\n Inside SAVING RMC TO FLASH \n\n");
	int k = 0;
	int j = 0;
	W25_Reset();
	if (is_erased_rmc == 0){
<<<<<<< HEAD
 8003bc2:	4c45      	ldr	r4, [pc, #276]	@ (8003cd8 <saveRMC+0x118>)
	Debug_printf("\n\n Inside SAVING RMC TO FLASH \n\n");
 8003bc4:	4845      	ldr	r0, [pc, #276]	@ (8003cdc <saveRMC+0x11c>)
 8003bc6:	f000 fce5 	bl	8004594 <Debug_printf>
	W25_Reset();
 8003bca:	f7ff fc9c 	bl	8003506 <W25_Reset>
	if (is_erased_rmc == 0){
 8003bce:	6823      	ldr	r3, [r4, #0]
 8003bd0:	b92b      	cbnz	r3, 8003bde <saveRMC+0x1e>
		W25_SectorErase(address_rmc);
 8003bd2:	4b43      	ldr	r3, [pc, #268]	@ (8003ce0 <saveRMC+0x120>)
 8003bd4:	6818      	ldr	r0, [r3, #0]
 8003bd6:	f7ff fd41 	bl	800365c <W25_SectorErase>
		is_erased_rmc = 1;
 8003bda:	2301      	movs	r3, #1
 8003bdc:	6023      	str	r3, [r4, #0]
	}
	
	for(size_t i = 0; i < 128; i++){
 8003bde:	4a41      	ldr	r2, [pc, #260]	@ (8003ce4 <saveRMC+0x124>)
 8003be0:	2300      	movs	r3, #0
 8003be2:	4616      	mov	r6, r2
		if(rmcBufferDemo[i] != 0x00 && rmcBufferDemo[i+1] == 0x00){
 8003be4:	f812 1b01 	ldrb.w	r1, [r2], #1
 8003be8:	461c      	mov	r4, r3
 8003bea:	3301      	adds	r3, #1
 8003bec:	b109      	cbz	r1, 8003bf2 <saveRMC+0x32>
 8003bee:	7811      	ldrb	r1, [r2, #0]
 8003bf0:	b111      	cbz	r1, 8003bf8 <saveRMC+0x38>
	for(size_t i = 0; i < 128; i++){
 8003bf2:	2b80      	cmp	r3, #128	@ 0x80
 8003bf4:	d1f6      	bne.n	8003be4 <saveRMC+0x24>
	int k = 0;
 8003bf6:	2400      	movs	r4, #0
=======
 8001b22:	4c71      	ldr	r4, [pc, #452]	@ (8001ce8 <saveRMC+0x1c8>)
	Debug_printf("\n\n Inside SAVING RMC TO FLASH \n\n");
 8001b24:	4871      	ldr	r0, [pc, #452]	@ (8001cec <saveRMC+0x1cc>)
 8001b26:	f000 fceb 	bl	8002500 <Debug_printf>
	W25_Reset();
 8001b2a:	f7ff fd56 	bl	80015da <W25_Reset>
	if (is_erased_rmc == 0){
 8001b2e:	6823      	ldr	r3, [r4, #0]
 8001b30:	b92b      	cbnz	r3, 8001b3e <saveRMC+0x1e>
		W25_SectorErase(address_rmc);
 8001b32:	4b6f      	ldr	r3, [pc, #444]	@ (8001cf0 <saveRMC+0x1d0>)
 8001b34:	6818      	ldr	r0, [r3, #0]
 8001b36:	f7ff fdfb 	bl	8001730 <W25_SectorErase>
		is_erased_rmc = 1;
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	6023      	str	r3, [r4, #0]
	}
	
	for(size_t i = 0; i < 128; i++){
 8001b3e:	4a6d      	ldr	r2, [pc, #436]	@ (8001cf4 <saveRMC+0x1d4>)
 8001b40:	2300      	movs	r3, #0
 8001b42:	4616      	mov	r6, r2
		if(rmcBufferDemo[i] != 0x00 && rmcBufferDemo[i+1] == 0x00){
 8001b44:	f812 1b01 	ldrb.w	r1, [r2], #1
 8001b48:	461d      	mov	r5, r3
 8001b4a:	3301      	adds	r3, #1
 8001b4c:	b109      	cbz	r1, 8001b52 <saveRMC+0x32>
 8001b4e:	7811      	ldrb	r1, [r2, #0]
 8001b50:	b111      	cbz	r1, 8001b58 <saveRMC+0x38>
	for(size_t i = 0; i < 128; i++){
 8001b52:	2b80      	cmp	r3, #128	@ 0x80
 8001b54:	d1f6      	bne.n	8001b44 <saveRMC+0x24>
	int k = 0;
 8001b56:	2500      	movs	r5, #0
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
			k = i;
			break;
		}
	}
	char addr_out[10];
	sprintf(addr_out, "%08lx", address_rmc);
<<<<<<< HEAD
 8003bf8:	4d39      	ldr	r5, [pc, #228]	@ (8003ce0 <saveRMC+0x120>)
 8003bfa:	493b      	ldr	r1, [pc, #236]	@ (8003ce8 <saveRMC+0x128>)
 8003bfc:	682a      	ldr	r2, [r5, #0]
 8003bfe:	a801      	add	r0, sp, #4
 8003c00:	f006 ffc4 	bl	800ab8c <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*) addr_out, 8, 1000);
 8003c04:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003c08:	2208      	movs	r2, #8
 8003c0a:	a901      	add	r1, sp, #4
 8003c0c:	4837      	ldr	r0, [pc, #220]	@ (8003cec <saveRMC+0x12c>)
 8003c0e:	f003 fbd7 	bl	80073c0 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, (uint8_t*)"\r\n", 1, 1000);
 8003c12:	4937      	ldr	r1, [pc, #220]	@ (8003cf0 <saveRMC+0x130>)
 8003c14:	4835      	ldr	r0, [pc, #212]	@ (8003cec <saveRMC+0x12c>)
 8003c16:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003c1a:	2201      	movs	r2, #1
 8003c1c:	f003 fbd0 	bl	80073c0 <HAL_UART_Transmit>
	
	k++;
	rmcBufferDemo[k] = ';';
 8003c20:	1933      	adds	r3, r6, r4
 8003c22:	223b      	movs	r2, #59	@ 0x3b
 8003c24:	705a      	strb	r2, [r3, #1]
	for(size_t idx = 6; idx > 0 ; idx--){
		k++;
		rmcBufferDemo[k] = addr_out[8 - idx];
 8003c26:	1ca3      	adds	r3, r4, #2
 8003c28:	f8dd 1006 	ldr.w	r1, [sp, #6]
 8003c2c:	50f1      	str	r1, [r6, r3]
 8003c2e:	18f2      	adds	r2, r6, r3
 8003c30:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8003c34:	8093      	strh	r3, [r2, #4]
=======
 8001b58:	4c65      	ldr	r4, [pc, #404]	@ (8001cf0 <saveRMC+0x1d0>)
 8001b5a:	4967      	ldr	r1, [pc, #412]	@ (8001cf8 <saveRMC+0x1d8>)
 8001b5c:	6822      	ldr	r2, [r4, #0]
 8001b5e:	a801      	add	r0, sp, #4
 8001b60:	f006 feae 	bl	80088c0 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*) addr_out, 8, 1000);
 8001b64:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b68:	2208      	movs	r2, #8
 8001b6a:	a901      	add	r1, sp, #4
 8001b6c:	4863      	ldr	r0, [pc, #396]	@ (8001cfc <saveRMC+0x1dc>)
 8001b6e:	f003 fad1 	bl	8005114 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, (uint8_t*)"\r\n", 1, 1000);
 8001b72:	4963      	ldr	r1, [pc, #396]	@ (8001d00 <saveRMC+0x1e0>)
 8001b74:	4861      	ldr	r0, [pc, #388]	@ (8001cfc <saveRMC+0x1dc>)
 8001b76:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b7a:	2201      	movs	r2, #1
 8001b7c:	f003 faca 	bl	8005114 <HAL_UART_Transmit>
	
	k++;
	rmcBufferDemo[k] = ';';
 8001b80:	1973      	adds	r3, r6, r5
 8001b82:	223b      	movs	r2, #59	@ 0x3b
 8001b84:	705a      	strb	r2, [r3, #1]
	for(size_t idx = 6; idx > 0 ; idx--){
		k++;
		rmcBufferDemo[k] = addr_out[8 - idx];
 8001b86:	1cab      	adds	r3, r5, #2
 8001b88:	f8dd 1006 	ldr.w	r1, [sp, #6]
 8001b8c:	50f1      	str	r1, [r6, r3]
 8001b8e:	18f2      	adds	r2, r6, r3
 8001b90:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8001b94:	8093      	strh	r3, [r2, #4]
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
	}
	
	for (j=0;j<110-k-1;j++)
	{
		rmcBufferDemo[j+k+1]=0x00;
<<<<<<< HEAD
 8003c36:	f104 0008 	add.w	r0, r4, #8
 8003c3a:	f1c4 0266 	rsb	r2, r4, #102	@ 0x66
 8003c3e:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 8003c42:	2100      	movs	r1, #0
 8003c44:	4430      	add	r0, r6
 8003c46:	f007 f869 	bl	800ad1c <memset>
=======
 8001b96:	f105 0008 	add.w	r0, r5, #8
 8001b9a:	f1c5 0266 	rsb	r2, r5, #102	@ 0x66
 8001b9e:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 8001ba2:	2100      	movs	r1, #0
 8001ba4:	4430      	add	r0, r6
 8001ba6:	f006 ff53 	bl	8008a50 <memset>
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
	}


<<<<<<< HEAD
	W25_Reset();
 8003c4a:	f7ff fc5c 	bl	8003506 <W25_Reset>
	W25_PageProgram(address_rmc, rmcBufferDemo, 128);
 8003c4e:	2280      	movs	r2, #128	@ 0x80
 8003c50:	4924      	ldr	r1, [pc, #144]	@ (8003ce4 <saveRMC+0x124>)
 8003c52:	6828      	ldr	r0, [r5, #0]
	uart_transmit_string(&huart1, (uint8_t*) "Buffer before saving to FLASH: ");
	uart_transmit_string(&huart1, rmcBufferDemo);
	current_addr = address_rmc;
 8003c54:	4e27      	ldr	r6, [pc, #156]	@ (8003cf4 <saveRMC+0x134>)
	address_rmc+=128;
	if(result_address % 0x1000 && result_address > 0){
 8003c56:	4c28      	ldr	r4, [pc, #160]	@ (8003cf8 <saveRMC+0x138>)
	W25_PageProgram(address_rmc, rmcBufferDemo, 128);
 8003c58:	f7ff fd2c 	bl	80036b4 <W25_PageProgram>
	uart_transmit_string(&huart1, (uint8_t*) "Buffer before saving to FLASH: ");
 8003c5c:	4927      	ldr	r1, [pc, #156]	@ (8003cfc <saveRMC+0x13c>)
 8003c5e:	4823      	ldr	r0, [pc, #140]	@ (8003cec <saveRMC+0x12c>)
 8003c60:	f000 fc88 	bl	8004574 <uart_transmit_string>
	uart_transmit_string(&huart1, rmcBufferDemo);
 8003c64:	491f      	ldr	r1, [pc, #124]	@ (8003ce4 <saveRMC+0x124>)
 8003c66:	4821      	ldr	r0, [pc, #132]	@ (8003cec <saveRMC+0x12c>)
 8003c68:	f000 fc84 	bl	8004574 <uart_transmit_string>
	current_addr = address_rmc;
 8003c6c:	682b      	ldr	r3, [r5, #0]
 8003c6e:	6033      	str	r3, [r6, #0]
	address_rmc+=128;
 8003c70:	3380      	adds	r3, #128	@ 0x80
 8003c72:	602b      	str	r3, [r5, #0]
	if(result_address % 0x1000 && result_address > 0){
 8003c74:	6823      	ldr	r3, [r4, #0]
 8003c76:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c7a:	b19b      	cbz	r3, 8003ca4 <saveRMC+0xe4>
 8003c7c:	6823      	ldr	r3, [r4, #0]
 8003c7e:	b18b      	cbz	r3, 8003ca4 <saveRMC+0xe4>
		Debug_printf("\n\nErasing SECTOR IN ADVANCE\n");
 8003c80:	481f      	ldr	r0, [pc, #124]	@ (8003d00 <saveRMC+0x140>)
 8003c82:	f000 fc87 	bl	8004594 <Debug_printf>
		address_rmc -=  0x1000;
 8003c86:	682b      	ldr	r3, [r5, #0]
		W25_ShiftLeftFlashDataByPage(result_address, result_address - 0x1000);
 8003c88:	6820      	ldr	r0, [r4, #0]
 8003c8a:	6821      	ldr	r1, [r4, #0]
		address_rmc -=  0x1000;
 8003c8c:	f5a3 5380 	sub.w	r3, r3, #4096	@ 0x1000
		W25_ShiftLeftFlashDataByPage(result_address, result_address - 0x1000);
 8003c90:	f5a1 5180 	sub.w	r1, r1, #4096	@ 0x1000
		address_rmc -=  0x1000;
 8003c94:	602b      	str	r3, [r5, #0]
		W25_ShiftLeftFlashDataByPage(result_address, result_address - 0x1000);
 8003c96:	f7ff fdbb 	bl	8003810 <W25_ShiftLeftFlashDataByPage>
		W25_SectorErase(result_address-0x1000);
 8003c9a:	6820      	ldr	r0, [r4, #0]
 8003c9c:	f5a0 5080 	sub.w	r0, r0, #4096	@ 0x1000
 8003ca0:	f7ff fcdc 	bl	800365c <W25_SectorErase>
	}
	if(current_addr >= 0x8F80){
 8003ca4:	6832      	ldr	r2, [r6, #0]
 8003ca6:	f648 737f 	movw	r3, #36735	@ 0x8f7f
 8003caa:	429a      	cmp	r2, r3
 8003cac:	d904      	bls.n	8003cb8 <saveRMC+0xf8>
		//TODO: Reach end address so shift left all the address before result_address then if reach end address again. Shift left everytime get rmc again.

		address_rmc = 0x3000;
 8003cae:	f44f 5040 	mov.w	r0, #12288	@ 0x3000
 8003cb2:	6028      	str	r0, [r5, #0]
		W25_SectorErase(address_rmc);
 8003cb4:	f7ff fcd2 	bl	800365c <W25_SectorErase>
	}
	HAL_Delay(1000);
 8003cb8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003cbc:	f000 fcda 	bl	8004674 <HAL_Delay>
	Debug_printf("\n");
 8003cc0:	4810      	ldr	r0, [pc, #64]	@ (8003d04 <saveRMC+0x144>)
 8003cc2:	f000 fc67 	bl	8004594 <Debug_printf>
	memset(flashBufferRMCReceived, 0x00,128);
 8003cc6:	4810      	ldr	r0, [pc, #64]	@ (8003d08 <saveRMC+0x148>)
 8003cc8:	2280      	movs	r2, #128	@ 0x80
 8003cca:	2100      	movs	r1, #0
}
 8003ccc:	b004      	add	sp, #16
 8003cce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	memset(flashBufferRMCReceived, 0x00,128);
 8003cd2:	f007 b823 	b.w	800ad1c <memset>
 8003cd6:	bf00      	nop
 8003cd8:	200016f0 	.word	0x200016f0
 8003cdc:	0800ff36 	.word	0x0800ff36
 8003ce0:	20000004 	.word	0x20000004
 8003ce4:	200015f0 	.word	0x200015f0
 8003ce8:	0800fad4 	.word	0x0800fad4
 8003cec:	20001250 	.word	0x20001250
 8003cf0:	0800f4bb 	.word	0x0800f4bb
 8003cf4:	20000000 	.word	0x20000000
 8003cf8:	20000e00 	.word	0x20000e00
 8003cfc:	0800ff57 	.word	0x0800ff57
 8003d00:	0800ff77 	.word	0x0800ff77
 8003d04:	0800fa08 	.word	0x0800fa08
 8003d08:	20001670 	.word	0x20001670

08003d0c <sendRMCDataWithAddrToGSM>:
		}
	}
}

void sendRMCDataWithAddrToGSM(GSM_MAIL_STRUCT *mail_data){
	if(mail_data->rmc.date.Yr >= 24){
 8003d0c:	6983      	ldr	r3, [r0, #24]
 8003d0e:	2b17      	cmp	r3, #23
void sendRMCDataWithAddrToGSM(GSM_MAIL_STRUCT *mail_data){
 8003d10:	b570      	push	{r4, r5, r6, lr}
 8003d12:	4605      	mov	r5, r0
	if(mail_data->rmc.date.Yr >= 24){
 8003d14:	dd18      	ble.n	8003d48 <sendRMCDataWithAddrToGSM+0x3c>
		HAL_UART_Transmit(&huart1, (uint8_t*) "\n\n\nSENDING RMC with Addr TO GSM\n\n",  strlen("\n\n\nSENDING RMC with Addr TO GSM\n\n") , HAL_MAX_DELAY);
		GSM_MAIL_STRUCT *mail = (GSM_MAIL_STRUCT *)osMailAlloc(RMC_MailQGSMId, osWaitForever); // Allocate memory for mail
 8003d16:	4e0d      	ldr	r6, [pc, #52]	@ (8003d4c <sendRMCDataWithAddrToGSM+0x40>)
		HAL_UART_Transmit(&huart1, (uint8_t*) "\n\n\nSENDING RMC with Addr TO GSM\n\n",  strlen("\n\n\nSENDING RMC with Addr TO GSM\n\n") , HAL_MAX_DELAY);
 8003d18:	490d      	ldr	r1, [pc, #52]	@ (8003d50 <sendRMCDataWithAddrToGSM+0x44>)
 8003d1a:	480e      	ldr	r0, [pc, #56]	@ (8003d54 <sendRMCDataWithAddrToGSM+0x48>)
 8003d1c:	f04f 33ff 	mov.w	r3, #4294967295
 8003d20:	2221      	movs	r2, #33	@ 0x21
 8003d22:	f003 fb4d 	bl	80073c0 <HAL_UART_Transmit>
		GSM_MAIL_STRUCT *mail = (GSM_MAIL_STRUCT *)osMailAlloc(RMC_MailQGSMId, osWaitForever); // Allocate memory for mail
 8003d26:	6830      	ldr	r0, [r6, #0]
 8003d28:	f04f 31ff 	mov.w	r1, #4294967295
 8003d2c:	f003 fd84 	bl	8007838 <osMailAlloc>
 8003d30:	4604      	mov	r4, r0
		if (mail != NULL) {
 8003d32:	b148      	cbz	r0, 8003d48 <sendRMCDataWithAddrToGSM+0x3c>
			*mail = *mail_data; // Copy data into allocated memory
 8003d34:	4629      	mov	r1, r5
 8003d36:	2260      	movs	r2, #96	@ 0x60
 8003d38:	f007 fe49 	bl	800b9ce <memcpy>
			osMailPut(RMC_MailQGSMId, mail); // Put message in queue
 8003d3c:	6830      	ldr	r0, [r6, #0]
 8003d3e:	4621      	mov	r1, r4
		}
	}
}
 8003d40:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			osMailPut(RMC_MailQGSMId, mail); // Put message in queue
 8003d44:	f003 bd7d 	b.w	8007842 <osMailPut>
}
 8003d48:	bd70      	pop	{r4, r5, r6, pc}
 8003d4a:	bf00      	nop
 8003d4c:	20000e0c 	.word	0x20000e0c
 8003d50:	0800ff94 	.word	0x0800ff94
 8003d54:	20001250 	.word	0x20001250

08003d58 <receiveRMCDataFromGPS>:
=======

	if(address_rmc % 0x1000 == 0){
 8001baa:	6823      	ldr	r3, [r4, #0]
 8001bac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001bb0:	b93b      	cbnz	r3, 8001bc2 <saveRMC+0xa2>
		Debug_printf("Erase in advance:\n");
 8001bb2:	4854      	ldr	r0, [pc, #336]	@ (8001d04 <saveRMC+0x1e4>)
 8001bb4:	f000 fca4 	bl	8002500 <Debug_printf>
		W25_Reset();
 8001bb8:	f7ff fd0f 	bl	80015da <W25_Reset>
		W25_SectorErase(address_rmc);
 8001bbc:	6820      	ldr	r0, [r4, #0]
 8001bbe:	f7ff fdb7 	bl	8001730 <W25_SectorErase>
	}
	W25_Reset();
 8001bc2:	f7ff fd0a 	bl	80015da <W25_Reset>
	W25_PageProgram(address_rmc, rmcBufferDemo, 128);
 8001bc6:	2280      	movs	r2, #128	@ 0x80
 8001bc8:	494a      	ldr	r1, [pc, #296]	@ (8001cf4 <saveRMC+0x1d4>)
 8001bca:	6820      	ldr	r0, [r4, #0]
	uart_transmit_string(&huart1, (uint8_t*) "Buffer before saving to FLASH: ");
	uart_transmit_string(&huart1, rmcBufferDemo);
	Debug_printf("\n\n");
	current_addr = address_rmc;
 8001bcc:	4d4e      	ldr	r5, [pc, #312]	@ (8001d08 <saveRMC+0x1e8>)
	W25_PageProgram(address_rmc, rmcBufferDemo, 128);
 8001bce:	f7ff fddb 	bl	8001788 <W25_PageProgram>
	uart_transmit_string(&huart1, (uint8_t*) "Buffer before saving to FLASH: ");
 8001bd2:	494e      	ldr	r1, [pc, #312]	@ (8001d0c <saveRMC+0x1ec>)
 8001bd4:	4849      	ldr	r0, [pc, #292]	@ (8001cfc <saveRMC+0x1dc>)
 8001bd6:	f000 fc83 	bl	80024e0 <uart_transmit_string>
	uart_transmit_string(&huart1, rmcBufferDemo);
 8001bda:	4946      	ldr	r1, [pc, #280]	@ (8001cf4 <saveRMC+0x1d4>)
 8001bdc:	4847      	ldr	r0, [pc, #284]	@ (8001cfc <saveRMC+0x1dc>)
 8001bde:	f000 fc7f 	bl	80024e0 <uart_transmit_string>
	Debug_printf("\n\n");
 8001be2:	484b      	ldr	r0, [pc, #300]	@ (8001d10 <saveRMC+0x1f0>)
 8001be4:	f000 fc8c 	bl	8002500 <Debug_printf>
	current_addr = address_rmc;
 8001be8:	6823      	ldr	r3, [r4, #0]
 8001bea:	602b      	str	r3, [r5, #0]
	address_rmc+= 128;
 8001bec:	3380      	adds	r3, #128	@ 0x80
	if(address_rmc % 0x1000 == 0x0000 && address_rmc >= 0x5000){
 8001bee:	f3c3 020b 	ubfx	r2, r3, #0, #12
	address_rmc+= 128;
 8001bf2:	6023      	str	r3, [r4, #0]
	if(address_rmc % 0x1000 == 0x0000 && address_rmc >= 0x5000){
 8001bf4:	2a00      	cmp	r2, #0
 8001bf6:	d167      	bne.n	8001cc8 <saveRMC+0x1a8>
 8001bf8:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8001bfc:	d364      	bcc.n	8001cc8 <saveRMC+0x1a8>
		osDelay(1500);
 8001bfe:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8001c02:	f003 fbf7 	bl	80053f4 <osDelay>
		W25_Reset();
 8001c06:	f7ff fce8 	bl	80015da <W25_Reset>
		W25_ReadData(address_rmc, flashBufferRMCReceived, 128);
 8001c0a:	4942      	ldr	r1, [pc, #264]	@ (8001d14 <saveRMC+0x1f4>)
 8001c0c:	6820      	ldr	r0, [r4, #0]
 8001c0e:	2280      	movs	r2, #128	@ 0x80
 8001c10:	f7ff fe04 	bl	800181c <W25_ReadData>
		Debug_printf("Current address data before shifting left:");
 8001c14:	4840      	ldr	r0, [pc, #256]	@ (8001d18 <saveRMC+0x1f8>)
 8001c16:	f000 fc73 	bl	8002500 <Debug_printf>
		HAL_UART_Transmit(&huart1, flashBufferRMCReceived, sizeof(flashBufferRMCReceived), 1000);
 8001c1a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c1e:	493d      	ldr	r1, [pc, #244]	@ (8001d14 <saveRMC+0x1f4>)
 8001c20:	4836      	ldr	r0, [pc, #216]	@ (8001cfc <saveRMC+0x1dc>)
 8001c22:	2280      	movs	r2, #128	@ 0x80
 8001c24:	f003 fa76 	bl	8005114 <HAL_UART_Transmit>
		Debug_printf("\n\n");
 8001c28:	4839      	ldr	r0, [pc, #228]	@ (8001d10 <saveRMC+0x1f0>)
 8001c2a:	f000 fc69 	bl	8002500 <Debug_printf>

		W25_Reset();
 8001c2e:	f7ff fcd4 	bl	80015da <W25_Reset>
		W25_ReadData(address_rmc - 0x1000, flashBufferRMCReceived, 128);
 8001c32:	6820      	ldr	r0, [r4, #0]
 8001c34:	4937      	ldr	r1, [pc, #220]	@ (8001d14 <saveRMC+0x1f4>)
 8001c36:	2280      	movs	r2, #128	@ 0x80
 8001c38:	f5a0 5080 	sub.w	r0, r0, #4096	@ 0x1000
 8001c3c:	f7ff fdee 	bl	800181c <W25_ReadData>
		Debug_printf("Previous address data before shifting left:");
 8001c40:	4836      	ldr	r0, [pc, #216]	@ (8001d1c <saveRMC+0x1fc>)
 8001c42:	f000 fc5d 	bl	8002500 <Debug_printf>
		HAL_UART_Transmit(&huart1, flashBufferRMCReceived, sizeof(flashBufferRMCReceived), 1000);
 8001c46:	4933      	ldr	r1, [pc, #204]	@ (8001d14 <saveRMC+0x1f4>)
 8001c48:	482c      	ldr	r0, [pc, #176]	@ (8001cfc <saveRMC+0x1dc>)
 8001c4a:	2280      	movs	r2, #128	@ 0x80
 8001c4c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c50:	f003 fa60 	bl	8005114 <HAL_UART_Transmit>
		Debug_printf("\n\n");
 8001c54:	482e      	ldr	r0, [pc, #184]	@ (8001d10 <saveRMC+0x1f0>)
 8001c56:	f000 fc53 	bl	8002500 <Debug_printf>

		W25_ShiftLeftEntireFlashBySector(address_rmc - 0x1000);
 8001c5a:	6820      	ldr	r0, [r4, #0]
 8001c5c:	f5a0 5080 	sub.w	r0, r0, #4096	@ 0x1000
 8001c60:	f7ff fe40 	bl	80018e4 <W25_ShiftLeftEntireFlashBySector>
		address_rmc -= 0x1000;
 8001c64:	6823      	ldr	r3, [r4, #0]
 8001c66:	f5a3 5380 	sub.w	r3, r3, #4096	@ 0x1000
 8001c6a:	6023      	str	r3, [r4, #0]
		current_addr -= 0x1000;
 8001c6c:	682b      	ldr	r3, [r5, #0]
 8001c6e:	f5a3 5380 	sub.w	r3, r3, #4096	@ 0x1000
 8001c72:	602b      	str	r3, [r5, #0]

		W25_Reset();
 8001c74:	f7ff fcb1 	bl	80015da <W25_Reset>
		W25_ReadData(address_rmc, flashBufferRMCReceived, 128);
 8001c78:	4926      	ldr	r1, [pc, #152]	@ (8001d14 <saveRMC+0x1f4>)
 8001c7a:	6820      	ldr	r0, [r4, #0]
 8001c7c:	2280      	movs	r2, #128	@ 0x80
 8001c7e:	f7ff fdcd 	bl	800181c <W25_ReadData>
		Debug_printf("Current address data after shifting left:");
 8001c82:	4827      	ldr	r0, [pc, #156]	@ (8001d20 <saveRMC+0x200>)
 8001c84:	f000 fc3c 	bl	8002500 <Debug_printf>
		HAL_UART_Transmit(&huart1, flashBufferRMCReceived, sizeof(flashBufferRMCReceived), 1000);
 8001c88:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c8c:	4921      	ldr	r1, [pc, #132]	@ (8001d14 <saveRMC+0x1f4>)
 8001c8e:	481b      	ldr	r0, [pc, #108]	@ (8001cfc <saveRMC+0x1dc>)
 8001c90:	2280      	movs	r2, #128	@ 0x80
 8001c92:	f003 fa3f 	bl	8005114 <HAL_UART_Transmit>
		Debug_printf("\n\n");
 8001c96:	481e      	ldr	r0, [pc, #120]	@ (8001d10 <saveRMC+0x1f0>)
 8001c98:	f000 fc32 	bl	8002500 <Debug_printf>

		W25_Reset();
 8001c9c:	f7ff fc9d 	bl	80015da <W25_Reset>
		W25_ReadData(address_rmc - 0x1000, flashBufferRMCReceived, 128);
 8001ca0:	6820      	ldr	r0, [r4, #0]
 8001ca2:	491c      	ldr	r1, [pc, #112]	@ (8001d14 <saveRMC+0x1f4>)
 8001ca4:	2280      	movs	r2, #128	@ 0x80
 8001ca6:	f5a0 5080 	sub.w	r0, r0, #4096	@ 0x1000
 8001caa:	f7ff fdb7 	bl	800181c <W25_ReadData>
		Debug_printf("Previous address data after shifting left:");
 8001cae:	481d      	ldr	r0, [pc, #116]	@ (8001d24 <saveRMC+0x204>)
 8001cb0:	f000 fc26 	bl	8002500 <Debug_printf>
		HAL_UART_Transmit(&huart1, flashBufferRMCReceived, sizeof(flashBufferRMCReceived), 1000);
 8001cb4:	4917      	ldr	r1, [pc, #92]	@ (8001d14 <saveRMC+0x1f4>)
 8001cb6:	4811      	ldr	r0, [pc, #68]	@ (8001cfc <saveRMC+0x1dc>)
 8001cb8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001cbc:	2280      	movs	r2, #128	@ 0x80
 8001cbe:	f003 fa29 	bl	8005114 <HAL_UART_Transmit>
		Debug_printf("\n\n");
 8001cc2:	4813      	ldr	r0, [pc, #76]	@ (8001d10 <saveRMC+0x1f0>)
 8001cc4:	f000 fc1c 	bl	8002500 <Debug_printf>
	}
//	if(current_addr >= 0x5F80){
//		W25_ShiftLeftFlashData();
//		address_rmc = 0x4F80;
//	}
	osDelay(1000);
 8001cc8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001ccc:	f003 fb92 	bl	80053f4 <osDelay>
	Debug_printf("\n");
 8001cd0:	4815      	ldr	r0, [pc, #84]	@ (8001d28 <saveRMC+0x208>)
 8001cd2:	f000 fc15 	bl	8002500 <Debug_printf>
	memset(flashBufferRMCReceived, 0x00,128);
 8001cd6:	480f      	ldr	r0, [pc, #60]	@ (8001d14 <saveRMC+0x1f4>)
 8001cd8:	2280      	movs	r2, #128	@ 0x80
 8001cda:	2100      	movs	r1, #0
}
 8001cdc:	b004      	add	sp, #16
 8001cde:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	memset(flashBufferRMCReceived, 0x00,128);
 8001ce2:	f006 beb5 	b.w	8008a50 <memset>
 8001ce6:	bf00      	nop
 8001ce8:	200013e0 	.word	0x200013e0
 8001cec:	0800cc05 	.word	0x0800cc05
 8001cf0:	20000004 	.word	0x20000004
 8001cf4:	200012e0 	.word	0x200012e0
 8001cf8:	0800cb9e 	.word	0x0800cb9e
 8001cfc:	20000fa0 	.word	0x20000fa0
 8001d00:	0800cba4 	.word	0x0800cba4
 8001d04:	0800cc26 	.word	0x0800cc26
 8001d08:	20000000 	.word	0x20000000
 8001d0c:	0800cc39 	.word	0x0800cc39
 8001d10:	0800ce22 	.word	0x0800ce22
 8001d14:	20001360 	.word	0x20001360
 8001d18:	0800cc59 	.word	0x0800cc59
 8001d1c:	0800cc84 	.word	0x0800cc84
 8001d20:	0800ccb0 	.word	0x0800ccb0
 8001d24:	0800ccda 	.word	0x0800ccda
 8001d28:	0800ce23 	.word	0x0800ce23

08001d2c <receiveRMCDataFromGPS>:
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
			osMailPut(addr_MailQGSMId, mail); // Send the mail
		}
	}
}

void receiveRMCDataFromGPS(void) {
<<<<<<< HEAD
 8003d58:	b5f0      	push	{r4, r5, r6, r7, lr}
=======
 8001d2c:	b5f0      	push	{r4, r5, r6, r7, lr}
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
	static int countRMCReceived = 0;
	uint8_t output_buffer[70];

	// Wait until there are at least 10 messages in the queue
	uart_transmit_string(&huart1, (uint8_t*)"Inside Receiving RMC Data SPI FLASH\n");
	osEvent evt = osMailGet(RMC_MailQFLASHId, osWaitForever); // Wait for mail
<<<<<<< HEAD
 8003d5a:	4e64      	ldr	r6, [pc, #400]	@ (8003eec <receiveRMCDataFromGPS+0x194>)
	uart_transmit_string(&huart1, (uint8_t*)"Inside Receiving RMC Data SPI FLASH\n");
 8003d5c:	4964      	ldr	r1, [pc, #400]	@ (8003ef0 <receiveRMCDataFromGPS+0x198>)
 8003d5e:	4865      	ldr	r0, [pc, #404]	@ (8003ef4 <receiveRMCDataFromGPS+0x19c>)
void receiveRMCDataFromGPS(void) {
 8003d60:	b09f      	sub	sp, #124	@ 0x7c
	uart_transmit_string(&huart1, (uint8_t*)"Inside Receiving RMC Data SPI FLASH\n");
 8003d62:	f000 fc07 	bl	8004574 <uart_transmit_string>
	osEvent evt = osMailGet(RMC_MailQFLASHId, osWaitForever); // Wait for mail
 8003d66:	6831      	ldr	r1, [r6, #0]
 8003d68:	f04f 32ff 	mov.w	r2, #4294967295
 8003d6c:	a809      	add	r0, sp, #36	@ 0x24
 8003d6e:	f003 fd93 	bl	8007898 <osMailGet>
	if(evt.status == osEventMail){
 8003d72:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003d74:	2b20      	cmp	r3, #32
 8003d76:	f040 80b6 	bne.w	8003ee6 <receiveRMCDataFromGPS+0x18e>
		uart_transmit_string(&huart1, (uint8_t*)"\nReceived  RMC Data SPI FLASH: \n");
 8003d7a:	495f      	ldr	r1, [pc, #380]	@ (8003ef8 <receiveRMCDataFromGPS+0x1a0>)
 8003d7c:	485d      	ldr	r0, [pc, #372]	@ (8003ef4 <receiveRMCDataFromGPS+0x19c>)
=======
 8001d2e:	4e4d      	ldr	r6, [pc, #308]	@ (8001e64 <receiveRMCDataFromGPS+0x138>)
	uart_transmit_string(&huart1, (uint8_t*)"Inside Receiving RMC Data SPI FLASH\n");
 8001d30:	494d      	ldr	r1, [pc, #308]	@ (8001e68 <receiveRMCDataFromGPS+0x13c>)
 8001d32:	484e      	ldr	r0, [pc, #312]	@ (8001e6c <receiveRMCDataFromGPS+0x140>)
void receiveRMCDataFromGPS(void) {
 8001d34:	b09f      	sub	sp, #124	@ 0x7c
	uart_transmit_string(&huart1, (uint8_t*)"Inside Receiving RMC Data SPI FLASH\n");
 8001d36:	f000 fbd3 	bl	80024e0 <uart_transmit_string>
	osEvent evt = osMailGet(RMC_MailQFLASHId, osWaitForever); // Wait for mail
 8001d3a:	6831      	ldr	r1, [r6, #0]
 8001d3c:	f04f 32ff 	mov.w	r2, #4294967295
 8001d40:	a809      	add	r0, sp, #36	@ 0x24
 8001d42:	f003 fc53 	bl	80055ec <osMailGet>
	if(evt.status == osEventMail){
 8001d46:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8001d48:	2b20      	cmp	r3, #32
 8001d4a:	f040 8088 	bne.w	8001e5e <receiveRMCDataFromGPS+0x132>
		uart_transmit_string(&huart1, (uint8_t*)"\nReceived  RMC Data SPI FLASH: \n");
 8001d4e:	4948      	ldr	r1, [pc, #288]	@ (8001e70 <receiveRMCDataFromGPS+0x144>)
 8001d50:	4846      	ldr	r0, [pc, #280]	@ (8001e6c <receiveRMCDataFromGPS+0x140>)
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
//		snprintf((char *)output_buffer, sizeof(output_buffer),"Speed FLASH: %.2f, Course: %.2f, Valid: %d\n", receivedData->speed, receivedData->course, receivedData->isValid);
//		uart_transmit_string(&huart1, output_buffer);
//		uart_transmit_string(&huart1, (uint8_t*)"\n\n");

		//Sending DATA to GSM
		rmc_flash.lcation.latitude = receivedData->lcation.latitude;
<<<<<<< HEAD
 8003d7e:	4c5f      	ldr	r4, [pc, #380]	@ (8003efc <receiveRMCDataFromGPS+0x1a4>)
		uart_transmit_string(&huart1, (uint8_t*)"\nReceived  RMC Data SPI FLASH: \n");
 8003d80:	f000 fbf8 	bl	8004574 <uart_transmit_string>
		RMCSTRUCT *receivedData = (RMCSTRUCT *)evt.value.p;
 8003d84:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
		rmc_flash.lcation.latitude = receivedData->lcation.latitude;
 8003d86:	e9d5 230e 	ldrd	r2, r3, [r5, #56]	@ 0x38
 8003d8a:	e9c4 230e 	strd	r2, r3, [r4, #56]	@ 0x38
		rmc_flash.lcation.longitude = receivedData->lcation.longitude;
 8003d8e:	e9d5 2312 	ldrd	r2, r3, [r5, #72]	@ 0x48
 8003d92:	e9c4 2312 	strd	r2, r3, [r4, #72]	@ 0x48
		rmc_flash.speed = receivedData->speed;
 8003d96:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 8003d98:	62a3      	str	r3, [r4, #40]	@ 0x28
		rmc_flash.course = receivedData->course;
 8003d9a:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8003d9c:	62e3      	str	r3, [r4, #44]	@ 0x2c
		rmc_flash.lcation.NS = receivedData->lcation.NS;
 8003d9e:	f895 3040 	ldrb.w	r3, [r5, #64]	@ 0x40
 8003da2:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
		rmc_flash.lcation.EW = receivedData->lcation.EW;
 8003da6:	f895 3050 	ldrb.w	r3, [r5, #80]	@ 0x50
 8003daa:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
		rmc_flash.isValid = receivedData->isValid;
 8003dae:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8003db0:	6323      	str	r3, [r4, #48]	@ 0x30
=======
 8001d52:	4c48      	ldr	r4, [pc, #288]	@ (8001e74 <receiveRMCDataFromGPS+0x148>)
		uart_transmit_string(&huart1, (uint8_t*)"\nReceived  RMC Data SPI FLASH: \n");
 8001d54:	f000 fbc4 	bl	80024e0 <uart_transmit_string>
		RMCSTRUCT *receivedData = (RMCSTRUCT *)evt.value.p;
 8001d58:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
		rmc_flash.lcation.latitude = receivedData->lcation.latitude;
 8001d5a:	e9d5 230e 	ldrd	r2, r3, [r5, #56]	@ 0x38
 8001d5e:	e9c4 230e 	strd	r2, r3, [r4, #56]	@ 0x38
		rmc_flash.lcation.longitude = receivedData->lcation.longitude;
 8001d62:	e9d5 2312 	ldrd	r2, r3, [r5, #72]	@ 0x48
 8001d66:	e9c4 2312 	strd	r2, r3, [r4, #72]	@ 0x48
		rmc_flash.speed = receivedData->speed;
 8001d6a:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 8001d6c:	62a3      	str	r3, [r4, #40]	@ 0x28
		rmc_flash.course = receivedData->course;
 8001d6e:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8001d70:	62e3      	str	r3, [r4, #44]	@ 0x2c
		rmc_flash.lcation.NS = receivedData->lcation.NS;
 8001d72:	f895 3040 	ldrb.w	r3, [r5, #64]	@ 0x40
 8001d76:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
		rmc_flash.lcation.EW = receivedData->lcation.EW;
 8001d7a:	f895 3050 	ldrb.w	r3, [r5, #80]	@ 0x50
 8001d7e:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
		rmc_flash.isValid = receivedData->isValid;
 8001d82:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
		rmc_flash.tim.hour = receivedData->tim.hour;
 8003db2:	682b      	ldr	r3, [r5, #0]
 8003db4:	6023      	str	r3, [r4, #0]
		rmc_flash.tim.min = receivedData->tim.min;
 8003db6:	686b      	ldr	r3, [r5, #4]
 8003db8:	6063      	str	r3, [r4, #4]
		rmc_flash.tim.sec = receivedData->tim.sec;
 8003dba:	68ab      	ldr	r3, [r5, #8]
 8003dbc:	60a3      	str	r3, [r4, #8]
		rmc_flash.date.Yr = receivedData->date.Yr;
<<<<<<< HEAD
 8003dbe:	69ab      	ldr	r3, [r5, #24]
 8003dc0:	61a3      	str	r3, [r4, #24]
		rmc_flash.date.Mon = receivedData->date.Mon;
 8003dc2:	696b      	ldr	r3, [r5, #20]
 8003dc4:	6163      	str	r3, [r4, #20]
		rmc_flash.date.Day = receivedData->date.Day;
=======
 8001d84:	69a8      	ldr	r0, [r5, #24]
		rmc_flash.tim.min = receivedData->tim.min;
 8001d86:	686a      	ldr	r2, [r5, #4]
		rmc_flash.tim.sec = receivedData->tim.sec;
 8001d88:	68a9      	ldr	r1, [r5, #8]
		rmc_flash.isValid = receivedData->isValid;
 8001d8a:	6323      	str	r3, [r4, #48]	@ 0x30
		rmc_flash.tim.hour = receivedData->tim.hour;
 8001d8c:	682b      	ldr	r3, [r5, #0]
		rmc_flash.date.Yr = receivedData->date.Yr;
 8001d8e:	61a0      	str	r0, [r4, #24]
		rmc_flash.date.Mon = receivedData->date.Mon;
 8001d90:	6968      	ldr	r0, [r5, #20]
 8001d92:	6160      	str	r0, [r4, #20]
		rmc_flash.date.Day = receivedData->date.Day;
 8001d94:	6928      	ldr	r0, [r5, #16]
		rmc_flash.tim.hour = receivedData->tim.hour;
 8001d96:	6023      	str	r3, [r4, #0]
		rmc_flash.tim.min = receivedData->tim.min;
 8001d98:	6062      	str	r2, [r4, #4]
		rmc_flash.tim.sec = receivedData->tim.sec;
 8001d9a:	60a1      	str	r1, [r4, #8]
		rmc_flash.date.Day = receivedData->date.Day;
 8001d9c:	6120      	str	r0, [r4, #16]
//		get_RTC_time_date(&rmc_flash);
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)


		get_RTC_time_date(&rmc_flash);
 8003dc6:	4620      	mov	r0, r4
		rmc_flash.date.Day = receivedData->date.Day;
 8003dc8:	692b      	ldr	r3, [r5, #16]
 8003dca:	6123      	str	r3, [r4, #16]
		get_RTC_time_date(&rmc_flash);
 8003dcc:	f7ff f82c 	bl	8002e28 <get_RTC_time_date>
//		uart_transmit_string(&huart1, (uint8_t*)"RMC Data  Saved GSM\n");
//		// Process received data (e.g., display, log, or store data)
		snprintf((char *)output_buffer, sizeof(output_buffer), "\n\nTime Received from GPS AT SPI FLASH: %d:%d:%d\n", rmc_flash.tim.hour, rmc_flash.tim.min, rmc_flash.tim.sec);
<<<<<<< HEAD
 8003dd0:	68a3      	ldr	r3, [r4, #8]
 8003dd2:	9301      	str	r3, [sp, #4]
 8003dd4:	6863      	ldr	r3, [r4, #4]
 8003dd6:	9300      	str	r3, [sp, #0]
 8003dd8:	6823      	ldr	r3, [r4, #0]
 8003dda:	4a49      	ldr	r2, [pc, #292]	@ (8003f00 <receiveRMCDataFromGPS+0x1a8>)
 8003ddc:	2146      	movs	r1, #70	@ 0x46
 8003dde:	a80c      	add	r0, sp, #48	@ 0x30
 8003de0:	f006 fea0 	bl	800ab24 <sniprintf>
		uart_transmit_string(&huart1, output_buffer);
 8003de4:	4843      	ldr	r0, [pc, #268]	@ (8003ef4 <receiveRMCDataFromGPS+0x19c>)
 8003de6:	a90c      	add	r1, sp, #48	@ 0x30
 8003de8:	f000 fbc4 	bl	8004574 <uart_transmit_string>

		snprintf((char *)output_buffer, sizeof(output_buffer), "Date Received FROM GPS AT SPI FLASH : %d/%d/%d\n", rmc_flash.date.Day, rmc_flash.date.Mon, rmc_flash.date.Yr);
 8003dec:	69a3      	ldr	r3, [r4, #24]
 8003dee:	9301      	str	r3, [sp, #4]
 8003df0:	6963      	ldr	r3, [r4, #20]
 8003df2:	9300      	str	r3, [sp, #0]
 8003df4:	6923      	ldr	r3, [r4, #16]
 8003df6:	4a43      	ldr	r2, [pc, #268]	@ (8003f04 <receiveRMCDataFromGPS+0x1ac>)
 8003df8:	2146      	movs	r1, #70	@ 0x46
 8003dfa:	a80c      	add	r0, sp, #48	@ 0x30
 8003dfc:	f006 fe92 	bl	800ab24 <sniprintf>
		uart_transmit_string(&huart1, output_buffer);
 8003e00:	483c      	ldr	r0, [pc, #240]	@ (8003ef4 <receiveRMCDataFromGPS+0x19c>)
 8003e02:	a90c      	add	r1, sp, #48	@ 0x30
 8003e04:	f000 fbb6 	bl	8004574 <uart_transmit_string>

		snprintf((char *)output_buffer, sizeof(output_buffer), "Location Received FROM GPS AT SPI FLASH: %.6f %c, %.6f %c\n", rmc_flash.lcation.latitude, rmc_flash.lcation.NS, rmc_flash.lcation.longitude, rmc_flash.lcation.EW);
 8003e08:	f894 3050 	ldrb.w	r3, [r4, #80]	@ 0x50
 8003e0c:	9306      	str	r3, [sp, #24]
 8003e0e:	e9d4 2312 	ldrd	r2, r3, [r4, #72]	@ 0x48
 8003e12:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8003e16:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 8003e1a:	9302      	str	r3, [sp, #8]
 8003e1c:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	@ 0x38
 8003e20:	2146      	movs	r1, #70	@ 0x46
 8003e22:	e9cd 2300 	strd	r2, r3, [sp]
 8003e26:	a80c      	add	r0, sp, #48	@ 0x30
 8003e28:	4a37      	ldr	r2, [pc, #220]	@ (8003f08 <receiveRMCDataFromGPS+0x1b0>)
 8003e2a:	f006 fe7b 	bl	800ab24 <sniprintf>
		uart_transmit_string(&huart1, output_buffer);
 8003e2e:	4831      	ldr	r0, [pc, #196]	@ (8003ef4 <receiveRMCDataFromGPS+0x19c>)
 8003e30:	a90c      	add	r1, sp, #48	@ 0x30
 8003e32:	f000 fb9f 	bl	8004574 <uart_transmit_string>

		snprintf((char *)output_buffer, sizeof(output_buffer),"Speed FROM GPS AT SPI FLASH: %.2f, Course: %.2f, Valid: %d\n\n\n", rmc_flash.speed, rmc_flash.course, rmc_flash.isValid);
 8003e36:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8003e38:	9304      	str	r3, [sp, #16]
 8003e3a:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8003e3c:	f7fc fb94 	bl	8000568 <__aeabi_f2d>
 8003e40:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003e44:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8003e46:	f7fc fb8f 	bl	8000568 <__aeabi_f2d>
 8003e4a:	4a30      	ldr	r2, [pc, #192]	@ (8003f0c <receiveRMCDataFromGPS+0x1b4>)
 8003e4c:	e9cd 0100 	strd	r0, r1, [sp]
 8003e50:	2146      	movs	r1, #70	@ 0x46
 8003e52:	a80c      	add	r0, sp, #48	@ 0x30
 8003e54:	f006 fe66 	bl	800ab24 <sniprintf>
		uart_transmit_string(&huart1, output_buffer);
 8003e58:	4826      	ldr	r0, [pc, #152]	@ (8003ef4 <receiveRMCDataFromGPS+0x19c>)
 8003e5a:	a90c      	add	r1, sp, #48	@ 0x30
 8003e5c:	f000 fb8a 	bl	8004574 <uart_transmit_string>

		format_rmc_data(&rmc_flash,(char*) rmcBufferDemo, 128);
 8003e60:	492b      	ldr	r1, [pc, #172]	@ (8003f10 <receiveRMCDataFromGPS+0x1b8>)
 8003e62:	2280      	movs	r2, #128	@ 0x80
 8003e64:	4620      	mov	r0, r4
 8003e66:	f7ff fe55 	bl	8003b14 <format_rmc_data>

		if(rmc_flash.date.Yr >= 24 && countRMCReceived == 9){
 8003e6a:	69a3      	ldr	r3, [r4, #24]
 8003e6c:	2b17      	cmp	r3, #23
 8003e6e:	dd2f      	ble.n	8003ed0 <receiveRMCDataFromGPS+0x178>
 8003e70:	4f28      	ldr	r7, [pc, #160]	@ (8003f14 <receiveRMCDataFromGPS+0x1bc>)
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	2b09      	cmp	r3, #9
 8003e76:	d12b      	bne.n	8003ed0 <receiveRMCDataFromGPS+0x178>
			saveRMC();
 8003e78:	f7ff fea2 	bl	8003bc0 <saveRMC>
			//sendRMCDataToGSM(&rmc_flash);
			mail_gsm.rmc.lcation.latitude = rmc_flash.lcation.latitude;
 8003e7c:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	@ 0x38
 8003e80:	4825      	ldr	r0, [pc, #148]	@ (8003f18 <receiveRMCDataFromGPS+0x1c0>)
 8003e82:	e9c0 230e 	strd	r2, r3, [r0, #56]	@ 0x38
			mail_gsm.rmc.lcation.longitude = rmc_flash.lcation.longitude;
 8003e86:	e9d4 2312 	ldrd	r2, r3, [r4, #72]	@ 0x48
 8003e8a:	e9c0 2312 	strd	r2, r3, [r0, #72]	@ 0x48
			mail_gsm.rmc.speed = rmc_flash.speed;
 8003e8e:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8003e90:	6283      	str	r3, [r0, #40]	@ 0x28
			mail_gsm.rmc.course = rmc_flash.course;
 8003e92:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8003e94:	62c3      	str	r3, [r0, #44]	@ 0x2c
			mail_gsm.rmc.lcation.NS = rmc_flash.lcation.NS;
 8003e96:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 8003e9a:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
			mail_gsm.rmc.lcation.EW = rmc_flash.lcation.EW;
 8003e9e:	f894 3050 	ldrb.w	r3, [r4, #80]	@ 0x50
 8003ea2:	f880 3050 	strb.w	r3, [r0, #80]	@ 0x50
			mail_gsm.rmc.isValid = rmc_flash.isValid;
 8003ea6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8003ea8:	6303      	str	r3, [r0, #48]	@ 0x30
			mail_gsm.rmc.tim.hour = rmc_flash.tim.hour;
 8003eaa:	6823      	ldr	r3, [r4, #0]
 8003eac:	6003      	str	r3, [r0, #0]
			mail_gsm.rmc.tim.min = rmc_flash.tim.min;
 8003eae:	6863      	ldr	r3, [r4, #4]
 8003eb0:	6043      	str	r3, [r0, #4]
			mail_gsm.rmc.tim.sec = rmc_flash.tim.sec;
 8003eb2:	68a3      	ldr	r3, [r4, #8]
 8003eb4:	6083      	str	r3, [r0, #8]
			mail_gsm.rmc.date.Yr = rmc_flash.date.Yr;
 8003eb6:	69a3      	ldr	r3, [r4, #24]
 8003eb8:	6183      	str	r3, [r0, #24]
			mail_gsm.rmc.date.Mon = rmc_flash.date.Mon;
 8003eba:	6963      	ldr	r3, [r4, #20]
 8003ebc:	6143      	str	r3, [r0, #20]
			mail_gsm.rmc.date.Day = rmc_flash.date.Day;
 8003ebe:	6923      	ldr	r3, [r4, #16]
 8003ec0:	6103      	str	r3, [r0, #16]
			mail_gsm.address = current_addr;
 8003ec2:	4b16      	ldr	r3, [pc, #88]	@ (8003f1c <receiveRMCDataFromGPS+0x1c4>)
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	6583      	str	r3, [r0, #88]	@ 0x58
//			sendAddresstoGSM();
			sendRMCDataWithAddrToGSM(&mail_gsm);
 8003ec8:	f7ff ff20 	bl	8003d0c <sendRMCDataWithAddrToGSM>
			countRMCReceived = 0;
 8003ecc:	2300      	movs	r3, #0
 8003ece:	603b      	str	r3, [r7, #0]
		}
		osMailFree(RMC_MailQFLASHId, receivedData);
 8003ed0:	6830      	ldr	r0, [r6, #0]
 8003ed2:	4629      	mov	r1, r5
 8003ed4:	f003 fd19 	bl	800790a <osMailFree>
		// Free memory after use
		if(rmc_flash.date.Yr >= 24)
 8003ed8:	69a3      	ldr	r3, [r4, #24]
 8003eda:	2b17      	cmp	r3, #23
			countRMCReceived++;
 8003edc:	bfc1      	itttt	gt
 8003ede:	4a0d      	ldrgt	r2, [pc, #52]	@ (8003f14 <receiveRMCDataFromGPS+0x1bc>)
 8003ee0:	6813      	ldrgt	r3, [r2, #0]
 8003ee2:	3301      	addgt	r3, #1
 8003ee4:	6013      	strgt	r3, [r2, #0]
	}
}
 8003ee6:	b01f      	add	sp, #124	@ 0x7c
 8003ee8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003eea:	bf00      	nop
 8003eec:	200002c8 	.word	0x200002c8
 8003ef0:	0800ffb6 	.word	0x0800ffb6
 8003ef4:	20001250 	.word	0x20001250
 8003ef8:	0800ffdb 	.word	0x0800ffdb
 8003efc:	20001598 	.word	0x20001598
 8003f00:	0800fffc 	.word	0x0800fffc
 8003f04:	0801002d 	.word	0x0801002d
 8003f08:	0801005d 	.word	0x0801005d
 8003f0c:	08010098 	.word	0x08010098
 8003f10:	200015f0 	.word	0x200015f0
 8003f14:	20001534 	.word	0x20001534
 8003f18:	20001538 	.word	0x20001538
 8003f1c:	20000000 	.word	0x20000000

08003f20 <StartSpiFlash>:


void StartSpiFlash(void const * argument)
{
 8003f20:	b580      	push	{r7, lr}
  /* USER CODE BEGIN StartSpiFlash */
  /* Infinite loop */
	current_addr = address_rmc;
 8003f22:	4b2a      	ldr	r3, [pc, #168]	@ (8003fcc <StartSpiFlash+0xac>)
 8003f24:	f8df 80bc 	ldr.w	r8, [pc, #188]	@ 8003fe4 <StartSpiFlash+0xc4>
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f8c8 3000 	str.w	r3, [r8]
{
 8003f2e:	b08a      	sub	sp, #40	@ 0x28

	osMailQDef(GSM_MailQ, 128, GSM_MAIL_STRUCT);
 8003f30:	2360      	movs	r3, #96	@ 0x60
 8003f32:	2280      	movs	r2, #128	@ 0x80
	RMC_MailQGSMId = osMailCreate(osMailQ(GSM_MailQ), NULL);
 8003f34:	2100      	movs	r1, #0
 8003f36:	a801      	add	r0, sp, #4
	osMailQDef(GSM_MailQ, 128, GSM_MAIL_STRUCT);
 8003f38:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8003f3c:	f8cd d00c 	str.w	sp, [sp, #12]
	RMC_MailQGSMId = osMailCreate(osMailQ(GSM_MailQ), NULL);
 8003f40:	f003 fc4f 	bl	80077e2 <osMailCreate>
 8003f44:	4b22      	ldr	r3, [pc, #136]	@ (8003fd0 <StartSpiFlash+0xb0>)
=======
 8001d9e:	e9cd 2100 	strd	r2, r1, [sp]
 8001da2:	a80c      	add	r0, sp, #48	@ 0x30
 8001da4:	4a34      	ldr	r2, [pc, #208]	@ (8001e78 <receiveRMCDataFromGPS+0x14c>)
 8001da6:	2146      	movs	r1, #70	@ 0x46
 8001da8:	f006 fd56 	bl	8008858 <sniprintf>
		uart_transmit_string(&huart1, output_buffer);
 8001dac:	482f      	ldr	r0, [pc, #188]	@ (8001e6c <receiveRMCDataFromGPS+0x140>)
 8001dae:	a90c      	add	r1, sp, #48	@ 0x30
 8001db0:	f000 fb96 	bl	80024e0 <uart_transmit_string>

		snprintf((char *)output_buffer, sizeof(output_buffer), "Date Received FROM GPS AT SPI FLASH : %d/%d/%d\n", rmc_flash.date.Day, rmc_flash.date.Mon, rmc_flash.date.Yr);
 8001db4:	69a3      	ldr	r3, [r4, #24]
 8001db6:	9301      	str	r3, [sp, #4]
 8001db8:	6963      	ldr	r3, [r4, #20]
 8001dba:	9300      	str	r3, [sp, #0]
 8001dbc:	6923      	ldr	r3, [r4, #16]
 8001dbe:	4a2f      	ldr	r2, [pc, #188]	@ (8001e7c <receiveRMCDataFromGPS+0x150>)
 8001dc0:	2146      	movs	r1, #70	@ 0x46
 8001dc2:	a80c      	add	r0, sp, #48	@ 0x30
 8001dc4:	f006 fd48 	bl	8008858 <sniprintf>
		uart_transmit_string(&huart1, output_buffer);
 8001dc8:	4828      	ldr	r0, [pc, #160]	@ (8001e6c <receiveRMCDataFromGPS+0x140>)
 8001dca:	a90c      	add	r1, sp, #48	@ 0x30
 8001dcc:	f000 fb88 	bl	80024e0 <uart_transmit_string>

		snprintf((char *)output_buffer, sizeof(output_buffer), "Location Received FROM GPS AT SPI FLASH: %.6f %c, %.6f %c\n", rmc_flash.lcation.latitude, rmc_flash.lcation.NS, rmc_flash.lcation.longitude, rmc_flash.lcation.EW);
 8001dd0:	f894 3050 	ldrb.w	r3, [r4, #80]	@ 0x50
 8001dd4:	9306      	str	r3, [sp, #24]
 8001dd6:	e9d4 2312 	ldrd	r2, r3, [r4, #72]	@ 0x48
 8001dda:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001dde:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 8001de2:	9302      	str	r3, [sp, #8]
 8001de4:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	@ 0x38
 8001de8:	2146      	movs	r1, #70	@ 0x46
 8001dea:	e9cd 2300 	strd	r2, r3, [sp]
 8001dee:	a80c      	add	r0, sp, #48	@ 0x30
 8001df0:	4a23      	ldr	r2, [pc, #140]	@ (8001e80 <receiveRMCDataFromGPS+0x154>)
 8001df2:	f006 fd31 	bl	8008858 <sniprintf>
		uart_transmit_string(&huart1, output_buffer);
 8001df6:	481d      	ldr	r0, [pc, #116]	@ (8001e6c <receiveRMCDataFromGPS+0x140>)
 8001df8:	a90c      	add	r1, sp, #48	@ 0x30
 8001dfa:	f000 fb71 	bl	80024e0 <uart_transmit_string>

		snprintf((char *)output_buffer, sizeof(output_buffer),"Speed FROM GPS AT SPI FLASH: %.2f, Course: %.2f, Valid: %d\n\n\n", rmc_flash.speed, rmc_flash.course, rmc_flash.isValid);
 8001dfe:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8001e00:	9304      	str	r3, [sp, #16]
 8001e02:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8001e04:	f7fe fbb0 	bl	8000568 <__aeabi_f2d>
 8001e08:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8001e0c:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8001e0e:	f7fe fbab 	bl	8000568 <__aeabi_f2d>
 8001e12:	4a1c      	ldr	r2, [pc, #112]	@ (8001e84 <receiveRMCDataFromGPS+0x158>)
 8001e14:	e9cd 0100 	strd	r0, r1, [sp]
 8001e18:	2146      	movs	r1, #70	@ 0x46
 8001e1a:	a80c      	add	r0, sp, #48	@ 0x30
 8001e1c:	f006 fd1c 	bl	8008858 <sniprintf>
		uart_transmit_string(&huart1, output_buffer);
 8001e20:	4812      	ldr	r0, [pc, #72]	@ (8001e6c <receiveRMCDataFromGPS+0x140>)
 8001e22:	a90c      	add	r1, sp, #48	@ 0x30
 8001e24:	f000 fb5c 	bl	80024e0 <uart_transmit_string>

		format_rmc_data(&rmc_flash,(char*) rmcBufferDemo, 128);
 8001e28:	4917      	ldr	r1, [pc, #92]	@ (8001e88 <receiveRMCDataFromGPS+0x15c>)
 8001e2a:	2280      	movs	r2, #128	@ 0x80
 8001e2c:	4620      	mov	r0, r4
 8001e2e:	f7ff fe21 	bl	8001a74 <format_rmc_data>

		if(rmc_flash.date.Yr >= 24 && countRMCReceived == 1){
 8001e32:	69a3      	ldr	r3, [r4, #24]
 8001e34:	2b17      	cmp	r3, #23
 8001e36:	dd07      	ble.n	8001e48 <receiveRMCDataFromGPS+0x11c>
 8001e38:	4f14      	ldr	r7, [pc, #80]	@ (8001e8c <receiveRMCDataFromGPS+0x160>)
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	2b01      	cmp	r3, #1
 8001e3e:	d103      	bne.n	8001e48 <receiveRMCDataFromGPS+0x11c>
			saveRMC();
 8001e40:	f7ff fe6e 	bl	8001b20 <saveRMC>
//			mail_gsm.rmc.date.Yr = rmc_flash.date.Yr;
//			mail_gsm.rmc.date.Mon = rmc_flash.date.Mon;
//			mail_gsm.rmc.date.Day = rmc_flash.date.Day;
//			mail_gsm.address = current_addr;
			//sendRMCDataWithAddrToGSM(&mail_gsm);
			countRMCReceived = 0;
 8001e44:	2300      	movs	r3, #0
 8001e46:	603b      	str	r3, [r7, #0]
		}
		osMailFree(RMC_MailQFLASHId, receivedData);
 8001e48:	6830      	ldr	r0, [r6, #0]
 8001e4a:	4629      	mov	r1, r5
 8001e4c:	f003 fc07 	bl	800565e <osMailFree>
		// Free memory after use
		if(rmc_flash.date.Yr >= 24)
 8001e50:	69a3      	ldr	r3, [r4, #24]
 8001e52:	2b17      	cmp	r3, #23
			countRMCReceived++;
 8001e54:	bfc1      	itttt	gt
 8001e56:	4a0d      	ldrgt	r2, [pc, #52]	@ (8001e8c <receiveRMCDataFromGPS+0x160>)
 8001e58:	6813      	ldrgt	r3, [r2, #0]
 8001e5a:	3301      	addgt	r3, #1
 8001e5c:	6013      	strgt	r3, [r2, #0]
	}
}
 8001e5e:	b01f      	add	sp, #124	@ 0x7c
 8001e60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e62:	bf00      	nop
 8001e64:	200002c8 	.word	0x200002c8
 8001e68:	0800cd05 	.word	0x0800cd05
 8001e6c:	20000fa0 	.word	0x20000fa0
 8001e70:	0800cd2a 	.word	0x0800cd2a
 8001e74:	20001288 	.word	0x20001288
 8001e78:	0800cd4b 	.word	0x0800cd4b
 8001e7c:	0800cd7c 	.word	0x0800cd7c
 8001e80:	0800cdac 	.word	0x0800cdac
 8001e84:	0800cde7 	.word	0x0800cde7
 8001e88:	200012e0 	.word	0x200012e0
 8001e8c:	20001284 	.word	0x20001284

08001e90 <StartSpiFlash>:

void StartSpiFlash(void const * argument)
{
 8001e90:	b580      	push	{r7, lr}
  /* USER CODE BEGIN StartSpiFlash */
  /* Infinite loop */
	current_addr = address_rmc;
 8001e92:	4b29      	ldr	r3, [pc, #164]	@ (8001f38 <StartSpiFlash+0xa8>)
 8001e94:	f8df 80b8 	ldr.w	r8, [pc, #184]	@ 8001f50 <StartSpiFlash+0xc0>
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f8c8 3000 	str.w	r3, [r8]
{
 8001e9e:	b08a      	sub	sp, #40	@ 0x28

	osMailQDef(GSM_MailQ, 128, GSM_MAIL_STRUCT);
 8001ea0:	2360      	movs	r3, #96	@ 0x60
 8001ea2:	2280      	movs	r2, #128	@ 0x80
	RMC_MailQGSMId = osMailCreate(osMailQ(GSM_MailQ), NULL);
 8001ea4:	2100      	movs	r1, #0
 8001ea6:	a801      	add	r0, sp, #4
	osMailQDef(GSM_MailQ, 128, GSM_MAIL_STRUCT);
 8001ea8:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8001eac:	f8cd d00c 	str.w	sp, [sp, #12]
	RMC_MailQGSMId = osMailCreate(osMailQ(GSM_MailQ), NULL);
 8001eb0:	f003 fb41 	bl	8005536 <osMailCreate>
 8001eb4:	4b21      	ldr	r3, [pc, #132]	@ (8001f3c <StartSpiFlash+0xac>)
		osDelay(500);
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
		//uart_transmit_string(&huart1, (uint8_t*) "INSIDE SPI FLASH\n");
		W25_Reset();
		W25_ReadJedecID();
		W25_Reset();
		receiveResultAddress();
		W25_ReadData(current_addr, flashBufferRMCReceived, 128);
<<<<<<< HEAD
 8003f46:	4e23      	ldr	r6, [pc, #140]	@ (8003fd4 <StartSpiFlash+0xb4>)
		char spi_flash_data_intro[] = "Flash DATA received: ";
		HAL_UART_Transmit(&huart1, (uint8_t*) spi_flash_data_intro, strlen(spi_flash_data_intro), 1000);
 8003f48:	4d23      	ldr	r5, [pc, #140]	@ (8003fd8 <StartSpiFlash+0xb8>)
	RMC_MailQGSMId = osMailCreate(osMailQ(GSM_MailQ), NULL);
 8003f4a:	6018      	str	r0, [r3, #0]
		osDelay(1500);
 8003f4c:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8003f50:	f003 fba6 	bl	80076a0 <osDelay>
		W25_Reset();
 8003f54:	f7ff fad7 	bl	8003506 <W25_Reset>
		W25_ReadJedecID();
 8003f58:	f7ff fb02 	bl	8003560 <W25_ReadJedecID>
		W25_Reset();
 8003f5c:	f7ff fad3 	bl	8003506 <W25_Reset>
		receiveResultAddress();
 8003f60:	f7ff fd98 	bl	8003a94 <receiveResultAddress>
		W25_ReadData(current_addr, flashBufferRMCReceived, 128);
 8003f64:	2280      	movs	r2, #128	@ 0x80
 8003f66:	f8d8 0000 	ldr.w	r0, [r8]
 8003f6a:	4631      	mov	r1, r6
 8003f6c:	f7ff fbec 	bl	8003748 <W25_ReadData>
		char spi_flash_data_intro[] = "Flash DATA received: ";
 8003f70:	4b1a      	ldr	r3, [pc, #104]	@ (8003fdc <StartSpiFlash+0xbc>)
 8003f72:	aa04      	add	r2, sp, #16
 8003f74:	f103 0c10 	add.w	ip, r3, #16
 8003f78:	4617      	mov	r7, r2
 8003f7a:	6818      	ldr	r0, [r3, #0]
 8003f7c:	6859      	ldr	r1, [r3, #4]
 8003f7e:	4614      	mov	r4, r2
 8003f80:	c403      	stmia	r4!, {r0, r1}
 8003f82:	3308      	adds	r3, #8
 8003f84:	4563      	cmp	r3, ip
 8003f86:	4622      	mov	r2, r4
 8003f88:	d1f7      	bne.n	8003f7a <StartSpiFlash+0x5a>
 8003f8a:	6818      	ldr	r0, [r3, #0]
 8003f8c:	889b      	ldrh	r3, [r3, #4]
 8003f8e:	6020      	str	r0, [r4, #0]
 8003f90:	80a3      	strh	r3, [r4, #4]
		HAL_UART_Transmit(&huart1, (uint8_t*) spi_flash_data_intro, strlen(spi_flash_data_intro), 1000);
 8003f92:	4638      	mov	r0, r7
 8003f94:	f7fc f97c 	bl	8000290 <strlen>
 8003f98:	4639      	mov	r1, r7
 8003f9a:	b282      	uxth	r2, r0
 8003f9c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003fa0:	4628      	mov	r0, r5
 8003fa2:	f003 fa0d 	bl	80073c0 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart1, flashBufferRMCReceived, sizeof(flashBufferRMCReceived), 1000);
 8003fa6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003faa:	2280      	movs	r2, #128	@ 0x80
 8003fac:	4631      	mov	r1, r6
 8003fae:	4628      	mov	r0, r5
 8003fb0:	f003 fa06 	bl	80073c0 <HAL_UART_Transmit>
		//receiveTaxData();
		receiveRMCDataFromGPS();
 8003fb4:	f7ff fed0 	bl	8003d58 <receiveRMCDataFromGPS>

		uart_transmit_string(&huart1,(uint8_t*) "\n\n");
 8003fb8:	4628      	mov	r0, r5
 8003fba:	4909      	ldr	r1, [pc, #36]	@ (8003fe0 <StartSpiFlash+0xc0>)
 8003fbc:	f000 fada 	bl	8004574 <uart_transmit_string>
		osDelay(1500);
 8003fc0:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8003fc4:	f003 fb6c 	bl	80076a0 <osDelay>
	for(;;){
 8003fc8:	e7c0      	b.n	8003f4c <StartSpiFlash+0x2c>
 8003fca:	bf00      	nop
 8003fcc:	20000004 	.word	0x20000004
 8003fd0:	20000e0c 	.word	0x20000e0c
 8003fd4:	20001670 	.word	0x20001670
 8003fd8:	20001250 	.word	0x20001250
 8003fdc:	080100d6 	.word	0x080100d6
 8003fe0:	0800fa07 	.word	0x0800fa07
 8003fe4:	20000000 	.word	0x20000000

08003fe8 <HAL_MspInit>:
=======
 8001eb6:	4e22      	ldr	r6, [pc, #136]	@ (8001f40 <StartSpiFlash+0xb0>)
		char spi_flash_data_intro[] = "Flash DATA received: ";
		HAL_UART_Transmit(&huart1, (uint8_t*) spi_flash_data_intro, strlen(spi_flash_data_intro), 1000);
 8001eb8:	4d22      	ldr	r5, [pc, #136]	@ (8001f44 <StartSpiFlash+0xb4>)
	RMC_MailQGSMId = osMailCreate(osMailQ(GSM_MailQ), NULL);
 8001eba:	6018      	str	r0, [r3, #0]
		osDelay(500);
 8001ebc:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001ec0:	f003 fa98 	bl	80053f4 <osDelay>
		W25_Reset();
 8001ec4:	f7ff fb89 	bl	80015da <W25_Reset>
		W25_ReadJedecID();
 8001ec8:	f7ff fbb4 	bl	8001634 <W25_ReadJedecID>
		W25_Reset();
 8001ecc:	f7ff fb85 	bl	80015da <W25_Reset>
		W25_ReadData(current_addr, flashBufferRMCReceived, 128);
 8001ed0:	2280      	movs	r2, #128	@ 0x80
 8001ed2:	f8d8 0000 	ldr.w	r0, [r8]
 8001ed6:	4631      	mov	r1, r6
 8001ed8:	f7ff fca0 	bl	800181c <W25_ReadData>
		char spi_flash_data_intro[] = "Flash DATA received: ";
 8001edc:	4b1a      	ldr	r3, [pc, #104]	@ (8001f48 <StartSpiFlash+0xb8>)
 8001ede:	aa04      	add	r2, sp, #16
 8001ee0:	f103 0c10 	add.w	ip, r3, #16
 8001ee4:	4617      	mov	r7, r2
 8001ee6:	6818      	ldr	r0, [r3, #0]
 8001ee8:	6859      	ldr	r1, [r3, #4]
 8001eea:	4614      	mov	r4, r2
 8001eec:	c403      	stmia	r4!, {r0, r1}
 8001eee:	3308      	adds	r3, #8
 8001ef0:	4563      	cmp	r3, ip
 8001ef2:	4622      	mov	r2, r4
 8001ef4:	d1f7      	bne.n	8001ee6 <StartSpiFlash+0x56>
 8001ef6:	6818      	ldr	r0, [r3, #0]
 8001ef8:	889b      	ldrh	r3, [r3, #4]
 8001efa:	6020      	str	r0, [r4, #0]
 8001efc:	80a3      	strh	r3, [r4, #4]
		HAL_UART_Transmit(&huart1, (uint8_t*) spi_flash_data_intro, strlen(spi_flash_data_intro), 1000);
 8001efe:	4638      	mov	r0, r7
 8001f00:	f7fe f9c6 	bl	8000290 <strlen>
 8001f04:	4639      	mov	r1, r7
 8001f06:	b282      	uxth	r2, r0
 8001f08:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001f0c:	4628      	mov	r0, r5
 8001f0e:	f003 f901 	bl	8005114 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart1, flashBufferRMCReceived, sizeof(flashBufferRMCReceived), 1000);
 8001f12:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001f16:	2280      	movs	r2, #128	@ 0x80
 8001f18:	4631      	mov	r1, r6
 8001f1a:	4628      	mov	r0, r5
 8001f1c:	f003 f8fa 	bl	8005114 <HAL_UART_Transmit>
		//receiveTaxData();
		receiveRMCDataFromGPS();
 8001f20:	f7ff ff04 	bl	8001d2c <receiveRMCDataFromGPS>
		uart_transmit_string(&huart1,(uint8_t*) "\n\n");
 8001f24:	4628      	mov	r0, r5
 8001f26:	4909      	ldr	r1, [pc, #36]	@ (8001f4c <StartSpiFlash+0xbc>)
 8001f28:	f000 fada 	bl	80024e0 <uart_transmit_string>
		osDelay(500);
 8001f2c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001f30:	f003 fa60 	bl	80053f4 <osDelay>
	for(;;){
 8001f34:	e7c2      	b.n	8001ebc <StartSpiFlash+0x2c>
 8001f36:	bf00      	nop
 8001f38:	20000004 	.word	0x20000004
 8001f3c:	20000b5c 	.word	0x20000b5c
 8001f40:	20001360 	.word	0x20001360
 8001f44:	20000fa0 	.word	0x20000fa0
 8001f48:	0800ce25 	.word	0x0800ce25
 8001f4c:	0800ce22 	.word	0x0800ce22
 8001f50:	20000000 	.word	0x20000000

08001f54 <HAL_MspInit>:
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
<<<<<<< HEAD
 8003fe8:	4b0d      	ldr	r3, [pc, #52]	@ (8004020 <HAL_MspInit+0x38>)
 8003fea:	699a      	ldr	r2, [r3, #24]
 8003fec:	f042 0201 	orr.w	r2, r2, #1
 8003ff0:	619a      	str	r2, [r3, #24]
 8003ff2:	699a      	ldr	r2, [r3, #24]
{
 8003ff4:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ff6:	f002 0201 	and.w	r2, r2, #1
 8003ffa:	9200      	str	r2, [sp, #0]
 8003ffc:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003ffe:	69da      	ldr	r2, [r3, #28]
 8004000:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8004004:	61da      	str	r2, [r3, #28]
 8004006:	69db      	ldr	r3, [r3, #28]
 8004008:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800400c:	9301      	str	r3, [sp, #4]
 800400e:	9b01      	ldr	r3, [sp, #4]
=======
 8001f54:	4b0d      	ldr	r3, [pc, #52]	@ (8001f8c <HAL_MspInit+0x38>)
 8001f56:	699a      	ldr	r2, [r3, #24]
 8001f58:	f042 0201 	orr.w	r2, r2, #1
 8001f5c:	619a      	str	r2, [r3, #24]
 8001f5e:	699a      	ldr	r2, [r3, #24]
{
 8001f60:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f62:	f002 0201 	and.w	r2, r2, #1
 8001f66:	9200      	str	r2, [sp, #0]
 8001f68:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f6a:	69da      	ldr	r2, [r3, #28]
 8001f6c:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8001f70:	61da      	str	r2, [r3, #28]
 8001f72:	69db      	ldr	r3, [r3, #28]
 8001f74:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f78:	9301      	str	r3, [sp, #4]
 8001f7a:	9b01      	ldr	r3, [sp, #4]
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
<<<<<<< HEAD
 8004010:	2200      	movs	r2, #0
 8004012:	210f      	movs	r1, #15
 8004014:	f06f 0001 	mvn.w	r0, #1
=======
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	210f      	movs	r1, #15
 8001f80:	f06f 0001 	mvn.w	r0, #1
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
<<<<<<< HEAD
 8004018:	b002      	add	sp, #8
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800401a:	f001 b891 	b.w	8005140 <HAL_NVIC_SetPriority>
 800401e:	bf00      	nop
 8004020:	40021000 	.word	0x40021000

08004024 <HAL_ADC_MspInit>:
=======
 8001f84:	b002      	add	sp, #8
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001f86:	f001 b891 	b.w	80030ac <HAL_NVIC_SetPriority>
 8001f8a:	bf00      	nop
 8001f8c:	40021000 	.word	0x40021000

08001f90 <HAL_ADC_MspInit>:
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
<<<<<<< HEAD
 8004024:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004026:	2214      	movs	r2, #20
{
 8004028:	b08a      	sub	sp, #40	@ 0x28
 800402a:	4605      	mov	r5, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800402c:	2100      	movs	r1, #0
 800402e:	eb0d 0002 	add.w	r0, sp, r2
 8004032:	f006 fe73 	bl	800ad1c <memset>
  if(hadc->Instance==ADC2)
 8004036:	682b      	ldr	r3, [r5, #0]
 8004038:	4a3d      	ldr	r2, [pc, #244]	@ (8004130 <HAL_ADC_MspInit+0x10c>)
 800403a:	4293      	cmp	r3, r2
 800403c:	d137      	bne.n	80040ae <HAL_ADC_MspInit+0x8a>
=======
 8001f90:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f92:	2214      	movs	r2, #20
{
 8001f94:	b08a      	sub	sp, #40	@ 0x28
 8001f96:	4605      	mov	r5, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f98:	2100      	movs	r1, #0
 8001f9a:	eb0d 0002 	add.w	r0, sp, r2
 8001f9e:	f006 fd57 	bl	8008a50 <memset>
  if(hadc->Instance==ADC2)
 8001fa2:	682b      	ldr	r3, [r5, #0]
 8001fa4:	4a3d      	ldr	r2, [pc, #244]	@ (800209c <HAL_ADC_MspInit+0x10c>)
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d137      	bne.n	800201a <HAL_ADC_MspInit+0x8a>
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
<<<<<<< HEAD
 800403e:	4b3d      	ldr	r3, [pc, #244]	@ (8004134 <HAL_ADC_MspInit+0x110>)
=======
 8001faa:	4b3d      	ldr	r3, [pc, #244]	@ (80020a0 <HAL_ADC_MspInit+0x110>)
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA2_Channel1;
<<<<<<< HEAD
 8004040:	4c3d      	ldr	r4, [pc, #244]	@ (8004138 <HAL_ADC_MspInit+0x114>)
    __HAL_RCC_ADC12_CLK_ENABLE();
 8004042:	695a      	ldr	r2, [r3, #20]
 8004044:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8004048:	615a      	str	r2, [r3, #20]
 800404a:	695a      	ldr	r2, [r3, #20]
 800404c:	f002 5280 	and.w	r2, r2, #268435456	@ 0x10000000
 8004050:	9201      	str	r2, [sp, #4]
 8004052:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004054:	695a      	ldr	r2, [r3, #20]
 8004056:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800405a:	615a      	str	r2, [r3, #20]
 800405c:	695b      	ldr	r3, [r3, #20]
 800405e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004062:	9302      	str	r3, [sp, #8]
 8004064:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004066:	2620      	movs	r6, #32
 8004068:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800406a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800406e:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004070:	e9cd 6305 	strd	r6, r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004074:	f001 f988 	bl	8005388 <HAL_GPIO_Init>
=======
 8001fac:	4c3d      	ldr	r4, [pc, #244]	@ (80020a4 <HAL_ADC_MspInit+0x114>)
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001fae:	695a      	ldr	r2, [r3, #20]
 8001fb0:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8001fb4:	615a      	str	r2, [r3, #20]
 8001fb6:	695a      	ldr	r2, [r3, #20]
 8001fb8:	f002 5280 	and.w	r2, r2, #268435456	@ 0x10000000
 8001fbc:	9201      	str	r2, [sp, #4]
 8001fbe:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fc0:	695a      	ldr	r2, [r3, #20]
 8001fc2:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8001fc6:	615a      	str	r2, [r3, #20]
 8001fc8:	695b      	ldr	r3, [r3, #20]
 8001fca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fce:	9302      	str	r3, [sp, #8]
 8001fd0:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001fd2:	2620      	movs	r6, #32
 8001fd4:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fd6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001fda:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001fdc:	e9cd 6305 	strd	r6, r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fe0:	f001 f968 	bl	80032b4 <HAL_GPIO_Init>
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
<<<<<<< HEAD
 8004078:	f44f 7280 	mov.w	r2, #256	@ 0x100
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800407c:	f8df c0cc 	ldr.w	ip, [pc, #204]	@ 800414c <HAL_ADC_MspInit+0x128>
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004080:	f04f 0e80 	mov.w	lr, #128	@ 0x80
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004084:	2300      	movs	r3, #0
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004086:	e9c4 e203 	strd	lr, r2, [r4, #12]
=======
 8001fe4:	f44f 7280 	mov.w	r2, #256	@ 0x100
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001fe8:	f8df c0cc 	ldr.w	ip, [pc, #204]	@ 80020b8 <HAL_ADC_MspInit+0x128>
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001fec:	f04f 0e80 	mov.w	lr, #128	@ 0x80
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001ff0:	2300      	movs	r3, #0
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001ff2:	e9c4 e203 	strd	lr, r2, [r4, #12]
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
<<<<<<< HEAD
 800408a:	4620      	mov	r0, r4
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800408c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004090:	e9c4 c300 	strd	ip, r3, [r4]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8004094:	e9c4 2605 	strd	r2, r6, [r4, #20]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8004098:	60a3      	str	r3, [r4, #8]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 800409a:	61e3      	str	r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 800409c:	f001 f8b0 	bl	8005200 <HAL_DMA_Init>
 80040a0:	b108      	cbz	r0, 80040a6 <HAL_ADC_MspInit+0x82>
    {
      Error_Handler();
 80040a2:	f7ff f9e8 	bl	8003476 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 80040a6:	63ac      	str	r4, [r5, #56]	@ 0x38
 80040a8:	6265      	str	r5, [r4, #36]	@ 0x24
=======
 8001ff6:	4620      	mov	r0, r4
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001ff8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001ffc:	e9c4 c300 	strd	ip, r3, [r4]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8002000:	e9c4 2605 	strd	r2, r6, [r4, #20]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8002004:	60a3      	str	r3, [r4, #8]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8002006:	61e3      	str	r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8002008:	f001 f8b0 	bl	800316c <HAL_DMA_Init>
 800200c:	b108      	cbz	r0, 8002012 <HAL_ADC_MspInit+0x82>
    {
      Error_Handler();
 800200e:	f7ff fa9c 	bl	800154a <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8002012:	63ac      	str	r4, [r5, #56]	@ 0x38
 8002014:	6265      	str	r5, [r4, #36]	@ 0x24
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
<<<<<<< HEAD
 80040aa:	b00a      	add	sp, #40	@ 0x28
 80040ac:	bd70      	pop	{r4, r5, r6, pc}
  else if(hadc->Instance==ADC3)
 80040ae:	4a23      	ldr	r2, [pc, #140]	@ (800413c <HAL_ADC_MspInit+0x118>)
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d1fa      	bne.n	80040aa <HAL_ADC_MspInit+0x86>
    __HAL_RCC_ADC34_CLK_ENABLE();
 80040b4:	4b1f      	ldr	r3, [pc, #124]	@ (8004134 <HAL_ADC_MspInit+0x110>)
    hdma_adc3.Instance = DMA2_Channel5;
 80040b6:	4c22      	ldr	r4, [pc, #136]	@ (8004140 <HAL_ADC_MspInit+0x11c>)
    __HAL_RCC_ADC34_CLK_ENABLE();
 80040b8:	695a      	ldr	r2, [r3, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80040ba:	4822      	ldr	r0, [pc, #136]	@ (8004144 <HAL_ADC_MspInit+0x120>)
    __HAL_RCC_ADC34_CLK_ENABLE();
 80040bc:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 80040c0:	615a      	str	r2, [r3, #20]
 80040c2:	695a      	ldr	r2, [r3, #20]
 80040c4:	f002 5200 	and.w	r2, r2, #536870912	@ 0x20000000
 80040c8:	9203      	str	r2, [sp, #12]
 80040ca:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80040cc:	695a      	ldr	r2, [r3, #20]
 80040ce:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 80040d2:	615a      	str	r2, [r3, #20]
 80040d4:	695b      	ldr	r3, [r3, #20]
 80040d6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80040da:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80040dc:	2201      	movs	r2, #1
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80040de:	9b04      	ldr	r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80040e0:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80040e2:	2303      	movs	r3, #3
 80040e4:	e9cd 2305 	strd	r2, r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80040e8:	f001 f94e 	bl	8005388 <HAL_GPIO_Init>
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80040ec:	2080      	movs	r0, #128	@ 0x80
 80040ee:	f44f 7280 	mov.w	r2, #256	@ 0x100
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80040f2:	4915      	ldr	r1, [pc, #84]	@ (8004148 <HAL_ADC_MspInit+0x124>)
 80040f4:	2300      	movs	r3, #0
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80040f6:	e9c4 0203 	strd	r0, r2, [r4, #12]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 80040fa:	f44f 6680 	mov.w	r6, #1024	@ 0x400
 80040fe:	2220      	movs	r2, #32
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8004100:	4620      	mov	r0, r4
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004102:	e9c4 1300 	strd	r1, r3, [r4]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8004106:	e9c4 6205 	strd	r6, r2, [r4, #20]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 800410a:	60a3      	str	r3, [r4, #8]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 800410c:	61e3      	str	r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 800410e:	f001 f877 	bl	8005200 <HAL_DMA_Init>
 8004112:	b108      	cbz	r0, 8004118 <HAL_ADC_MspInit+0xf4>
      Error_Handler();
 8004114:	f7ff f9af 	bl	8003476 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8004118:	63ac      	str	r4, [r5, #56]	@ 0x38
    HAL_NVIC_SetPriority(ADC3_IRQn, 5, 0);
 800411a:	2200      	movs	r2, #0
 800411c:	2105      	movs	r1, #5
 800411e:	202f      	movs	r0, #47	@ 0x2f
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8004120:	6265      	str	r5, [r4, #36]	@ 0x24
    HAL_NVIC_SetPriority(ADC3_IRQn, 5, 0);
 8004122:	f001 f80d 	bl	8005140 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC3_IRQn);
 8004126:	202f      	movs	r0, #47	@ 0x2f
 8004128:	f001 f83c 	bl	80051a4 <HAL_NVIC_EnableIRQ>
}
 800412c:	e7bd      	b.n	80040aa <HAL_ADC_MspInit+0x86>
 800412e:	bf00      	nop
 8004130:	50000100 	.word	0x50000100
 8004134:	40021000 	.word	0x40021000
 8004138:	20001450 	.word	0x20001450
 800413c:	50000400 	.word	0x50000400
 8004140:	2000140c 	.word	0x2000140c
 8004144:	48000400 	.word	0x48000400
 8004148:	40020458 	.word	0x40020458
 800414c:	40020408 	.word	0x40020408

08004150 <HAL_RTC_MspInit>:
=======
 8002016:	b00a      	add	sp, #40	@ 0x28
 8002018:	bd70      	pop	{r4, r5, r6, pc}
  else if(hadc->Instance==ADC3)
 800201a:	4a23      	ldr	r2, [pc, #140]	@ (80020a8 <HAL_ADC_MspInit+0x118>)
 800201c:	4293      	cmp	r3, r2
 800201e:	d1fa      	bne.n	8002016 <HAL_ADC_MspInit+0x86>
    __HAL_RCC_ADC34_CLK_ENABLE();
 8002020:	4b1f      	ldr	r3, [pc, #124]	@ (80020a0 <HAL_ADC_MspInit+0x110>)
    hdma_adc3.Instance = DMA2_Channel5;
 8002022:	4c22      	ldr	r4, [pc, #136]	@ (80020ac <HAL_ADC_MspInit+0x11c>)
    __HAL_RCC_ADC34_CLK_ENABLE();
 8002024:	695a      	ldr	r2, [r3, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002026:	4822      	ldr	r0, [pc, #136]	@ (80020b0 <HAL_ADC_MspInit+0x120>)
    __HAL_RCC_ADC34_CLK_ENABLE();
 8002028:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 800202c:	615a      	str	r2, [r3, #20]
 800202e:	695a      	ldr	r2, [r3, #20]
 8002030:	f002 5200 	and.w	r2, r2, #536870912	@ 0x20000000
 8002034:	9203      	str	r2, [sp, #12]
 8002036:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002038:	695a      	ldr	r2, [r3, #20]
 800203a:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800203e:	615a      	str	r2, [r3, #20]
 8002040:	695b      	ldr	r3, [r3, #20]
 8002042:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002046:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002048:	2201      	movs	r2, #1
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800204a:	9b04      	ldr	r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800204c:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800204e:	2303      	movs	r3, #3
 8002050:	e9cd 2305 	strd	r2, r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002054:	f001 f92e 	bl	80032b4 <HAL_GPIO_Init>
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002058:	2080      	movs	r0, #128	@ 0x80
 800205a:	f44f 7280 	mov.w	r2, #256	@ 0x100
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800205e:	4915      	ldr	r1, [pc, #84]	@ (80020b4 <HAL_ADC_MspInit+0x124>)
 8002060:	2300      	movs	r3, #0
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002062:	e9c4 0203 	strd	r0, r2, [r4, #12]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8002066:	f44f 6680 	mov.w	r6, #1024	@ 0x400
 800206a:	2220      	movs	r2, #32
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 800206c:	4620      	mov	r0, r4
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800206e:	e9c4 1300 	strd	r1, r3, [r4]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8002072:	e9c4 6205 	strd	r6, r2, [r4, #20]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8002076:	60a3      	str	r3, [r4, #8]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8002078:	61e3      	str	r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 800207a:	f001 f877 	bl	800316c <HAL_DMA_Init>
 800207e:	b108      	cbz	r0, 8002084 <HAL_ADC_MspInit+0xf4>
      Error_Handler();
 8002080:	f7ff fa63 	bl	800154a <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8002084:	63ac      	str	r4, [r5, #56]	@ 0x38
    HAL_NVIC_SetPriority(ADC3_IRQn, 5, 0);
 8002086:	2200      	movs	r2, #0
 8002088:	2105      	movs	r1, #5
 800208a:	202f      	movs	r0, #47	@ 0x2f
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 800208c:	6265      	str	r5, [r4, #36]	@ 0x24
    HAL_NVIC_SetPriority(ADC3_IRQn, 5, 0);
 800208e:	f001 f80d 	bl	80030ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC3_IRQn);
 8002092:	202f      	movs	r0, #47	@ 0x2f
 8002094:	f001 f83c 	bl	8003110 <HAL_NVIC_EnableIRQ>
}
 8002098:	e7bd      	b.n	8002016 <HAL_ADC_MspInit+0x86>
 800209a:	bf00      	nop
 800209c:	50000100 	.word	0x50000100
 80020a0:	40021000 	.word	0x40021000
 80020a4:	200011a0 	.word	0x200011a0
 80020a8:	50000400 	.word	0x50000400
 80020ac:	2000115c 	.word	0x2000115c
 80020b0:	48000400 	.word	0x48000400
 80020b4:	40020458 	.word	0x40020458
 80020b8:	40020408 	.word	0x40020408

080020bc <HAL_RTC_MspInit>:
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
  if(hrtc->Instance==RTC)
<<<<<<< HEAD
 8004150:	6802      	ldr	r2, [r0, #0]
 8004152:	4b07      	ldr	r3, [pc, #28]	@ (8004170 <HAL_RTC_MspInit+0x20>)
 8004154:	429a      	cmp	r2, r3
 8004156:	d10a      	bne.n	800416e <HAL_RTC_MspInit+0x1e>
=======
 80020bc:	6802      	ldr	r2, [r0, #0]
 80020be:	4b07      	ldr	r3, [pc, #28]	@ (80020dc <HAL_RTC_MspInit+0x20>)
 80020c0:	429a      	cmp	r2, r3
 80020c2:	d10a      	bne.n	80020da <HAL_RTC_MspInit+0x1e>
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
<<<<<<< HEAD
 8004158:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800415c:	fa92 f2a2 	rbit	r2, r2
=======
 80020c4:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80020c8:	fa92 f2a2 	rbit	r2, r2
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
<<<<<<< HEAD
 8004160:	4b04      	ldr	r3, [pc, #16]	@ (8004174 <HAL_RTC_MspInit+0x24>)
 8004162:	fab2 f282 	clz	r2, r2
 8004166:	4413      	add	r3, r2
 8004168:	009b      	lsls	r3, r3, #2
 800416a:	2201      	movs	r2, #1
 800416c:	601a      	str	r2, [r3, #0]
=======
 80020cc:	4b04      	ldr	r3, [pc, #16]	@ (80020e0 <HAL_RTC_MspInit+0x24>)
 80020ce:	fab2 f282 	clz	r2, r2
 80020d2:	4413      	add	r3, r2
 80020d4:	009b      	lsls	r3, r3, #2
 80020d6:	2201      	movs	r2, #1
 80020d8:	601a      	str	r2, [r3, #0]
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)

  /* USER CODE END RTC_MspInit 1 */

  }

}
<<<<<<< HEAD
 800416e:	4770      	bx	lr
 8004170:	40002800 	.word	0x40002800
 8004174:	10908100 	.word	0x10908100

08004178 <HAL_SPI_MspInit>:
=======
 80020da:	4770      	bx	lr
 80020dc:	40002800 	.word	0x40002800
 80020e0:	10908100 	.word	0x10908100

080020e4 <HAL_SPI_MspInit>:
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
<<<<<<< HEAD
 8004178:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800417a:	2214      	movs	r2, #20
{
 800417c:	b08a      	sub	sp, #40	@ 0x28
 800417e:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004180:	2100      	movs	r1, #0
 8004182:	eb0d 0002 	add.w	r0, sp, r2
 8004186:	f006 fdc9 	bl	800ad1c <memset>
  if(hspi->Instance==SPI1)
 800418a:	6823      	ldr	r3, [r4, #0]
 800418c:	4a1e      	ldr	r2, [pc, #120]	@ (8004208 <HAL_SPI_MspInit+0x90>)
 800418e:	4293      	cmp	r3, r2
 8004190:	d120      	bne.n	80041d4 <HAL_SPI_MspInit+0x5c>
=======
 80020e4:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020e6:	2214      	movs	r2, #20
{
 80020e8:	b08a      	sub	sp, #40	@ 0x28
 80020ea:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020ec:	2100      	movs	r1, #0
 80020ee:	eb0d 0002 	add.w	r0, sp, r2
 80020f2:	f006 fcad 	bl	8008a50 <memset>
  if(hspi->Instance==SPI1)
 80020f6:	6823      	ldr	r3, [r4, #0]
 80020f8:	4a1e      	ldr	r2, [pc, #120]	@ (8002174 <HAL_SPI_MspInit+0x90>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d120      	bne.n	8002140 <HAL_SPI_MspInit+0x5c>
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
<<<<<<< HEAD
 8004192:	4b1e      	ldr	r3, [pc, #120]	@ (800420c <HAL_SPI_MspInit+0x94>)
 8004194:	699a      	ldr	r2, [r3, #24]
 8004196:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800419a:	619a      	str	r2, [r3, #24]
 800419c:	699a      	ldr	r2, [r3, #24]
 800419e:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 80041a2:	9201      	str	r2, [sp, #4]
 80041a4:	9a01      	ldr	r2, [sp, #4]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80041a6:	695a      	ldr	r2, [r3, #20]
 80041a8:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 80041ac:	615a      	str	r2, [r3, #20]
 80041ae:	695b      	ldr	r3, [r3, #20]
 80041b0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80041b4:	9302      	str	r3, [sp, #8]
 80041b6:	9b02      	ldr	r3, [sp, #8]
=======
 80020fe:	4b1e      	ldr	r3, [pc, #120]	@ (8002178 <HAL_SPI_MspInit+0x94>)
 8002100:	699a      	ldr	r2, [r3, #24]
 8002102:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002106:	619a      	str	r2, [r3, #24]
 8002108:	699a      	ldr	r2, [r3, #24]
 800210a:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 800210e:	9201      	str	r2, [sp, #4]
 8002110:	9a01      	ldr	r2, [sp, #4]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002112:	695a      	ldr	r2, [r3, #20]
 8002114:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8002118:	615a      	str	r2, [r3, #20]
 800211a:	695b      	ldr	r3, [r3, #20]
 800211c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002120:	9302      	str	r3, [sp, #8]
 8002122:	9b02      	ldr	r3, [sp, #8]
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
<<<<<<< HEAD
 80041b8:	2338      	movs	r3, #56	@ 0x38
=======
 8002124:	2338      	movs	r3, #56	@ 0x38
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
<<<<<<< HEAD
 80041ba:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041bc:	2302      	movs	r3, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80041be:	2103      	movs	r1, #3
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041c0:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80041c2:	2305      	movs	r3, #5
 80041c4:	e9cd 1308 	strd	r1, r3, [sp, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80041c8:	4811      	ldr	r0, [pc, #68]	@ (8004210 <HAL_SPI_MspInit+0x98>)
 80041ca:	a905      	add	r1, sp, #20
 80041cc:	f001 f8dc 	bl	8005388 <HAL_GPIO_Init>
=======
 8002126:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002128:	2302      	movs	r3, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800212a:	2103      	movs	r1, #3
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800212c:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800212e:	2305      	movs	r3, #5
 8002130:	e9cd 1308 	strd	r1, r3, [sp, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002134:	4811      	ldr	r0, [pc, #68]	@ (800217c <HAL_SPI_MspInit+0x98>)
 8002136:	a905      	add	r1, sp, #20
 8002138:	f001 f8bc 	bl	80032b4 <HAL_GPIO_Init>
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
<<<<<<< HEAD
 80041d0:	b00a      	add	sp, #40	@ 0x28
 80041d2:	bd10      	pop	{r4, pc}
  else if(hspi->Instance==SPI2)
 80041d4:	4a0f      	ldr	r2, [pc, #60]	@ (8004214 <HAL_SPI_MspInit+0x9c>)
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d1fa      	bne.n	80041d0 <HAL_SPI_MspInit+0x58>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80041da:	4b0c      	ldr	r3, [pc, #48]	@ (800420c <HAL_SPI_MspInit+0x94>)
 80041dc:	69da      	ldr	r2, [r3, #28]
 80041de:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80041e2:	61da      	str	r2, [r3, #28]
 80041e4:	69da      	ldr	r2, [r3, #28]
 80041e6:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 80041ea:	9203      	str	r2, [sp, #12]
 80041ec:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80041ee:	695a      	ldr	r2, [r3, #20]
 80041f0:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 80041f4:	615a      	str	r2, [r3, #20]
 80041f6:	695b      	ldr	r3, [r3, #20]
 80041f8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80041fc:	9304      	str	r3, [sp, #16]
 80041fe:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8004200:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8004204:	e7d9      	b.n	80041ba <HAL_SPI_MspInit+0x42>
 8004206:	bf00      	nop
 8004208:	40013000 	.word	0x40013000
 800420c:	40021000 	.word	0x40021000
 8004210:	48000400 	.word	0x48000400
 8004214:	40003800 	.word	0x40003800

08004218 <HAL_TIM_Base_MspInit>:
=======
 800213c:	b00a      	add	sp, #40	@ 0x28
 800213e:	bd10      	pop	{r4, pc}
  else if(hspi->Instance==SPI2)
 8002140:	4a0f      	ldr	r2, [pc, #60]	@ (8002180 <HAL_SPI_MspInit+0x9c>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d1fa      	bne.n	800213c <HAL_SPI_MspInit+0x58>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002146:	4b0c      	ldr	r3, [pc, #48]	@ (8002178 <HAL_SPI_MspInit+0x94>)
 8002148:	69da      	ldr	r2, [r3, #28]
 800214a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800214e:	61da      	str	r2, [r3, #28]
 8002150:	69da      	ldr	r2, [r3, #28]
 8002152:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8002156:	9203      	str	r2, [sp, #12]
 8002158:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800215a:	695a      	ldr	r2, [r3, #20]
 800215c:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8002160:	615a      	str	r2, [r3, #20]
 8002162:	695b      	ldr	r3, [r3, #20]
 8002164:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002168:	9304      	str	r3, [sp, #16]
 800216a:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800216c:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8002170:	e7d9      	b.n	8002126 <HAL_SPI_MspInit+0x42>
 8002172:	bf00      	nop
 8002174:	40013000 	.word	0x40013000
 8002178:	40021000 	.word	0x40021000
 800217c:	48000400 	.word	0x48000400
 8002180:	40003800 	.word	0x40003800

08002184 <HAL_TIM_Base_MspInit>:
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
<<<<<<< HEAD
 8004218:	b507      	push	{r0, r1, r2, lr}
  if(htim_base->Instance==TIM3)
 800421a:	4b0e      	ldr	r3, [pc, #56]	@ (8004254 <HAL_TIM_Base_MspInit+0x3c>)
 800421c:	6802      	ldr	r2, [r0, #0]
 800421e:	429a      	cmp	r2, r3
 8004220:	d115      	bne.n	800424e <HAL_TIM_Base_MspInit+0x36>
=======
 8002184:	b507      	push	{r0, r1, r2, lr}
  if(htim_base->Instance==TIM3)
 8002186:	4b0e      	ldr	r3, [pc, #56]	@ (80021c0 <HAL_TIM_Base_MspInit+0x3c>)
 8002188:	6802      	ldr	r2, [r0, #0]
 800218a:	429a      	cmp	r2, r3
 800218c:	d115      	bne.n	80021ba <HAL_TIM_Base_MspInit+0x36>
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
<<<<<<< HEAD
 8004222:	f503 3303 	add.w	r3, r3, #134144	@ 0x20c00
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8004226:	2105      	movs	r1, #5
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004228:	69da      	ldr	r2, [r3, #28]
 800422a:	f042 0202 	orr.w	r2, r2, #2
 800422e:	61da      	str	r2, [r3, #28]
 8004230:	69db      	ldr	r3, [r3, #28]
 8004232:	f003 0302 	and.w	r3, r3, #2
 8004236:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8004238:	2200      	movs	r2, #0
 800423a:	201d      	movs	r0, #29
    __HAL_RCC_TIM3_CLK_ENABLE();
 800423c:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 800423e:	f000 ff7f 	bl	8005140 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8004242:	201d      	movs	r0, #29
=======
 800218e:	f503 3303 	add.w	r3, r3, #134144	@ 0x20c00
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8002192:	2105      	movs	r1, #5
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002194:	69da      	ldr	r2, [r3, #28]
 8002196:	f042 0202 	orr.w	r2, r2, #2
 800219a:	61da      	str	r2, [r3, #28]
 800219c:	69db      	ldr	r3, [r3, #28]
 800219e:	f003 0302 	and.w	r3, r3, #2
 80021a2:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 80021a4:	2200      	movs	r2, #0
 80021a6:	201d      	movs	r0, #29
    __HAL_RCC_TIM3_CLK_ENABLE();
 80021a8:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 80021aa:	f000 ff7f 	bl	80030ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80021ae:	201d      	movs	r0, #29
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)

  /* USER CODE END TIM3_MspInit 1 */

  }

}
<<<<<<< HEAD
 8004244:	b003      	add	sp, #12
 8004246:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800424a:	f000 bfab 	b.w	80051a4 <HAL_NVIC_EnableIRQ>
}
 800424e:	b003      	add	sp, #12
 8004250:	f85d fb04 	ldr.w	pc, [sp], #4
 8004254:	40000400 	.word	0x40000400

08004258 <HAL_UART_MspInit>:
=======
 80021b0:	b003      	add	sp, #12
 80021b2:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80021b6:	f000 bfab 	b.w	8003110 <HAL_NVIC_EnableIRQ>
}
 80021ba:	b003      	add	sp, #12
 80021bc:	f85d fb04 	ldr.w	pc, [sp], #4
 80021c0:	40000400 	.word	0x40000400

080021c4 <HAL_UART_MspInit>:
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
<<<<<<< HEAD
 8004258:	b530      	push	{r4, r5, lr}
 800425a:	4605      	mov	r5, r0
 800425c:	b08d      	sub	sp, #52	@ 0x34
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800425e:	2214      	movs	r2, #20
 8004260:	2100      	movs	r1, #0
 8004262:	a807      	add	r0, sp, #28
 8004264:	f006 fd5a 	bl	800ad1c <memset>
  if(huart->Instance==USART1)
 8004268:	682b      	ldr	r3, [r5, #0]
 800426a:	4a4a      	ldr	r2, [pc, #296]	@ (8004394 <HAL_UART_MspInit+0x13c>)
 800426c:	4293      	cmp	r3, r2
 800426e:	d137      	bne.n	80042e0 <HAL_UART_MspInit+0x88>
=======
 80021c4:	b530      	push	{r4, r5, lr}
 80021c6:	4605      	mov	r5, r0
 80021c8:	b08d      	sub	sp, #52	@ 0x34
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021ca:	2214      	movs	r2, #20
 80021cc:	2100      	movs	r1, #0
 80021ce:	a807      	add	r0, sp, #28
 80021d0:	f006 fc3e 	bl	8008a50 <memset>
  if(huart->Instance==USART1)
 80021d4:	682b      	ldr	r3, [r5, #0]
 80021d6:	4a4a      	ldr	r2, [pc, #296]	@ (8002300 <HAL_UART_MspInit+0x13c>)
 80021d8:	4293      	cmp	r3, r2
 80021da:	d137      	bne.n	800224c <HAL_UART_MspInit+0x88>
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
<<<<<<< HEAD
 8004270:	4b49      	ldr	r3, [pc, #292]	@ (8004398 <HAL_UART_MspInit+0x140>)
=======
 80021dc:	4b49      	ldr	r3, [pc, #292]	@ (8002304 <HAL_UART_MspInit+0x140>)
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
<<<<<<< HEAD
 8004272:	4c4a      	ldr	r4, [pc, #296]	@ (800439c <HAL_UART_MspInit+0x144>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8004274:	699a      	ldr	r2, [r3, #24]
 8004276:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800427a:	619a      	str	r2, [r3, #24]
 800427c:	699a      	ldr	r2, [r3, #24]
 800427e:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8004282:	9201      	str	r2, [sp, #4]
 8004284:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004286:	695a      	ldr	r2, [r3, #20]
 8004288:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800428c:	615a      	str	r2, [r3, #20]
 800428e:	695b      	ldr	r3, [r3, #20]
 8004290:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004294:	9302      	str	r3, [sp, #8]
 8004296:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004298:	f44f 6ec0 	mov.w	lr, #1536	@ 0x600
 800429c:	2302      	movs	r3, #2
 800429e:	e9cd e307 	strd	lr, r3, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80042a2:	2203      	movs	r2, #3
 80042a4:	2307      	movs	r3, #7
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80042a6:	a907      	add	r1, sp, #28
 80042a8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80042ac:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80042b0:	f001 f86a 	bl	8005388 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Channel5;
 80042b4:	4b3a      	ldr	r3, [pc, #232]	@ (80043a0 <HAL_UART_MspInit+0x148>)
=======
 80021de:	4c4a      	ldr	r4, [pc, #296]	@ (8002308 <HAL_UART_MspInit+0x144>)
    __HAL_RCC_USART1_CLK_ENABLE();
 80021e0:	699a      	ldr	r2, [r3, #24]
 80021e2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80021e6:	619a      	str	r2, [r3, #24]
 80021e8:	699a      	ldr	r2, [r3, #24]
 80021ea:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 80021ee:	9201      	str	r2, [sp, #4]
 80021f0:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021f2:	695a      	ldr	r2, [r3, #20]
 80021f4:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 80021f8:	615a      	str	r2, [r3, #20]
 80021fa:	695b      	ldr	r3, [r3, #20]
 80021fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002200:	9302      	str	r3, [sp, #8]
 8002202:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002204:	f44f 6ec0 	mov.w	lr, #1536	@ 0x600
 8002208:	2302      	movs	r3, #2
 800220a:	e9cd e307 	strd	lr, r3, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800220e:	2203      	movs	r2, #3
 8002210:	2307      	movs	r3, #7
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002212:	a907      	add	r1, sp, #28
 8002214:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002218:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800221c:	f001 f84a 	bl	80032b4 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8002220:	4b3a      	ldr	r3, [pc, #232]	@ (800230c <HAL_UART_MspInit+0x148>)
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
<<<<<<< HEAD
 80042b6:	6023      	str	r3, [r4, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80042b8:	2300      	movs	r3, #0
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80042ba:	2280      	movs	r2, #128	@ 0x80
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80042bc:	e9c4 3301 	strd	r3, r3, [r4, #4]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80042c0:	e9c4 2303 	strd	r2, r3, [r4, #12]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 80042c4:	2220      	movs	r2, #32
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80042c6:	6163      	str	r3, [r4, #20]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 80042c8:	61a2      	str	r2, [r4, #24]
=======
 8002222:	6023      	str	r3, [r4, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002224:	2300      	movs	r3, #0
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002226:	2280      	movs	r2, #128	@ 0x80
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002228:	e9c4 3301 	strd	r3, r3, [r4, #4]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800222c:	e9c4 2303 	strd	r2, r3, [r4, #12]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8002230:	2220      	movs	r2, #32
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002232:	6163      	str	r3, [r4, #20]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8002234:	61a2      	str	r2, [r4, #24]
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
<<<<<<< HEAD
 80042ca:	61e3      	str	r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80042cc:	4620      	mov	r0, r4
 80042ce:	f000 ff97 	bl	8005200 <HAL_DMA_Init>
 80042d2:	b108      	cbz	r0, 80042d8 <HAL_UART_MspInit+0x80>
    {
      Error_Handler();
 80042d4:	f7ff f8cf 	bl	8003476 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 80042d8:	676c      	str	r4, [r5, #116]	@ 0x74
 80042da:	6265      	str	r5, [r4, #36]	@ 0x24
=======
 8002236:	61e3      	str	r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8002238:	4620      	mov	r0, r4
 800223a:	f000 ff97 	bl	800316c <HAL_DMA_Init>
 800223e:	b108      	cbz	r0, 8002244 <HAL_UART_MspInit+0x80>
    {
      Error_Handler();
 8002240:	f7ff f983 	bl	800154a <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8002244:	676c      	str	r4, [r5, #116]	@ 0x74
 8002246:	6265      	str	r5, [r4, #36]	@ 0x24
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
<<<<<<< HEAD
 80042dc:	b00d      	add	sp, #52	@ 0x34
 80042de:	bd30      	pop	{r4, r5, pc}
  else if(huart->Instance==USART2)
 80042e0:	4a30      	ldr	r2, [pc, #192]	@ (80043a4 <HAL_UART_MspInit+0x14c>)
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d123      	bne.n	800432e <HAL_UART_MspInit+0xd6>
    __HAL_RCC_USART2_CLK_ENABLE();
 80042e6:	4b2c      	ldr	r3, [pc, #176]	@ (8004398 <HAL_UART_MspInit+0x140>)
 80042e8:	69da      	ldr	r2, [r3, #28]
 80042ea:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 80042ee:	61da      	str	r2, [r3, #28]
 80042f0:	69da      	ldr	r2, [r3, #28]
 80042f2:	f402 3200 	and.w	r2, r2, #131072	@ 0x20000
 80042f6:	9203      	str	r2, [sp, #12]
 80042f8:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80042fa:	695a      	ldr	r2, [r3, #20]
 80042fc:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8004300:	615a      	str	r2, [r3, #20]
 8004302:	695b      	ldr	r3, [r3, #20]
 8004304:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004308:	9304      	str	r3, [sp, #16]
 800430a:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800430c:	240c      	movs	r4, #12
 800430e:	2302      	movs	r3, #2
 8004310:	e9cd 4307 	strd	r4, r3, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004314:	f04f 0c03 	mov.w	ip, #3
 8004318:	2307      	movs	r3, #7
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800431a:	a907      	add	r1, sp, #28
 800431c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004320:	e9cd c30a 	strd	ip, r3, [sp, #40]	@ 0x28
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8004324:	4c20      	ldr	r4, [pc, #128]	@ (80043a8 <HAL_UART_MspInit+0x150>)
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004326:	f001 f82f 	bl	8005388 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel6;
 800432a:	4b20      	ldr	r3, [pc, #128]	@ (80043ac <HAL_UART_MspInit+0x154>)
 800432c:	e7c3      	b.n	80042b6 <HAL_UART_MspInit+0x5e>
  else if(huart->Instance==USART3)
 800432e:	4a20      	ldr	r2, [pc, #128]	@ (80043b0 <HAL_UART_MspInit+0x158>)
 8004330:	4293      	cmp	r3, r2
 8004332:	d1d3      	bne.n	80042dc <HAL_UART_MspInit+0x84>
    __HAL_RCC_USART3_CLK_ENABLE();
 8004334:	4b18      	ldr	r3, [pc, #96]	@ (8004398 <HAL_UART_MspInit+0x140>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004336:	481f      	ldr	r0, [pc, #124]	@ (80043b4 <HAL_UART_MspInit+0x15c>)
    __HAL_RCC_USART3_CLK_ENABLE();
 8004338:	69da      	ldr	r2, [r3, #28]
    hdma_usart3_rx.Instance = DMA1_Channel3;
 800433a:	4c1f      	ldr	r4, [pc, #124]	@ (80043b8 <HAL_UART_MspInit+0x160>)
    __HAL_RCC_USART3_CLK_ENABLE();
 800433c:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8004340:	61da      	str	r2, [r3, #28]
 8004342:	69da      	ldr	r2, [r3, #28]
 8004344:	f402 2280 	and.w	r2, r2, #262144	@ 0x40000
 8004348:	9205      	str	r2, [sp, #20]
 800434a:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800434c:	695a      	ldr	r2, [r3, #20]
 800434e:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8004352:	615a      	str	r2, [r3, #20]
 8004354:	695b      	ldr	r3, [r3, #20]
 8004356:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800435a:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800435c:	f44f 6240 	mov.w	r2, #3072	@ 0xc00
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004360:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004362:	2302      	movs	r3, #2
 8004364:	e9cd 2307 	strd	r2, r3, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8004368:	2103      	movs	r1, #3
 800436a:	2307      	movs	r3, #7
 800436c:	e9cd 130a 	strd	r1, r3, [sp, #40]	@ 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004370:	a907      	add	r1, sp, #28
 8004372:	f001 f809 	bl	8005388 <HAL_GPIO_Init>
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004376:	4811      	ldr	r0, [pc, #68]	@ (80043bc <HAL_UART_MspInit+0x164>)
 8004378:	2300      	movs	r3, #0
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800437a:	2280      	movs	r2, #128	@ 0x80
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800437c:	e9c4 0300 	strd	r0, r3, [r4]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004380:	e9c4 2303 	strd	r2, r3, [r4, #12]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004384:	60a3      	str	r3, [r4, #8]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004386:	6163      	str	r3, [r4, #20]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8004388:	2320      	movs	r3, #32
 800438a:	61a3      	str	r3, [r4, #24]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 800438c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004390:	e79b      	b.n	80042ca <HAL_UART_MspInit+0x72>
 8004392:	bf00      	nop
 8004394:	40013800 	.word	0x40013800
 8004398:	40021000 	.word	0x40021000
 800439c:	200010fc 	.word	0x200010fc
 80043a0:	40020058 	.word	0x40020058
 80043a4:	40004400 	.word	0x40004400
 80043a8:	200010b8 	.word	0x200010b8
 80043ac:	4002006c 	.word	0x4002006c
 80043b0:	40004800 	.word	0x40004800
 80043b4:	48000400 	.word	0x48000400
 80043b8:	20001074 	.word	0x20001074
 80043bc:	40020030 	.word	0x40020030

080043c0 <HAL_InitTick>:
=======
 8002248:	b00d      	add	sp, #52	@ 0x34
 800224a:	bd30      	pop	{r4, r5, pc}
  else if(huart->Instance==USART2)
 800224c:	4a30      	ldr	r2, [pc, #192]	@ (8002310 <HAL_UART_MspInit+0x14c>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d123      	bne.n	800229a <HAL_UART_MspInit+0xd6>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002252:	4b2c      	ldr	r3, [pc, #176]	@ (8002304 <HAL_UART_MspInit+0x140>)
 8002254:	69da      	ldr	r2, [r3, #28]
 8002256:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800225a:	61da      	str	r2, [r3, #28]
 800225c:	69da      	ldr	r2, [r3, #28]
 800225e:	f402 3200 	and.w	r2, r2, #131072	@ 0x20000
 8002262:	9203      	str	r2, [sp, #12]
 8002264:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002266:	695a      	ldr	r2, [r3, #20]
 8002268:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800226c:	615a      	str	r2, [r3, #20]
 800226e:	695b      	ldr	r3, [r3, #20]
 8002270:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002274:	9304      	str	r3, [sp, #16]
 8002276:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002278:	240c      	movs	r4, #12
 800227a:	2302      	movs	r3, #2
 800227c:	e9cd 4307 	strd	r4, r3, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002280:	f04f 0c03 	mov.w	ip, #3
 8002284:	2307      	movs	r3, #7
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002286:	a907      	add	r1, sp, #28
 8002288:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800228c:	e9cd c30a 	strd	ip, r3, [sp, #40]	@ 0x28
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8002290:	4c20      	ldr	r4, [pc, #128]	@ (8002314 <HAL_UART_MspInit+0x150>)
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002292:	f001 f80f 	bl	80032b4 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8002296:	4b20      	ldr	r3, [pc, #128]	@ (8002318 <HAL_UART_MspInit+0x154>)
 8002298:	e7c3      	b.n	8002222 <HAL_UART_MspInit+0x5e>
  else if(huart->Instance==USART3)
 800229a:	4a20      	ldr	r2, [pc, #128]	@ (800231c <HAL_UART_MspInit+0x158>)
 800229c:	4293      	cmp	r3, r2
 800229e:	d1d3      	bne.n	8002248 <HAL_UART_MspInit+0x84>
    __HAL_RCC_USART3_CLK_ENABLE();
 80022a0:	4b18      	ldr	r3, [pc, #96]	@ (8002304 <HAL_UART_MspInit+0x140>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022a2:	481f      	ldr	r0, [pc, #124]	@ (8002320 <HAL_UART_MspInit+0x15c>)
    __HAL_RCC_USART3_CLK_ENABLE();
 80022a4:	69da      	ldr	r2, [r3, #28]
    hdma_usart3_rx.Instance = DMA1_Channel3;
 80022a6:	4c1f      	ldr	r4, [pc, #124]	@ (8002324 <HAL_UART_MspInit+0x160>)
    __HAL_RCC_USART3_CLK_ENABLE();
 80022a8:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 80022ac:	61da      	str	r2, [r3, #28]
 80022ae:	69da      	ldr	r2, [r3, #28]
 80022b0:	f402 2280 	and.w	r2, r2, #262144	@ 0x40000
 80022b4:	9205      	str	r2, [sp, #20]
 80022b6:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022b8:	695a      	ldr	r2, [r3, #20]
 80022ba:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 80022be:	615a      	str	r2, [r3, #20]
 80022c0:	695b      	ldr	r3, [r3, #20]
 80022c2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80022c6:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022c8:	f44f 6240 	mov.w	r2, #3072	@ 0xc00
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022cc:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022ce:	2302      	movs	r3, #2
 80022d0:	e9cd 2307 	strd	r2, r3, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80022d4:	2103      	movs	r1, #3
 80022d6:	2307      	movs	r3, #7
 80022d8:	e9cd 130a 	strd	r1, r3, [sp, #40]	@ 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022dc:	a907      	add	r1, sp, #28
 80022de:	f000 ffe9 	bl	80032b4 <HAL_GPIO_Init>
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80022e2:	4811      	ldr	r0, [pc, #68]	@ (8002328 <HAL_UART_MspInit+0x164>)
 80022e4:	2300      	movs	r3, #0
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80022e6:	2280      	movs	r2, #128	@ 0x80
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80022e8:	e9c4 0300 	strd	r0, r3, [r4]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80022ec:	e9c4 2303 	strd	r2, r3, [r4, #12]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80022f0:	60a3      	str	r3, [r4, #8]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80022f2:	6163      	str	r3, [r4, #20]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 80022f4:	2320      	movs	r3, #32
 80022f6:	61a3      	str	r3, [r4, #24]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80022f8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80022fc:	e79b      	b.n	8002236 <HAL_UART_MspInit+0x72>
 80022fe:	bf00      	nop
 8002300:	40013800 	.word	0x40013800
 8002304:	40021000 	.word	0x40021000
 8002308:	20000e4c 	.word	0x20000e4c
 800230c:	40020058 	.word	0x40020058
 8002310:	40004400 	.word	0x40004400
 8002314:	20000e08 	.word	0x20000e08
 8002318:	4002006c 	.word	0x4002006c
 800231c:	40004800 	.word	0x40004800
 8002320:	48000400 	.word	0x48000400
 8002324:	20000dc4 	.word	0x20000dc4
 8002328:	40020030 	.word	0x40020030

0800232c <HAL_InitTick>:
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
  uint32_t              uwPrescalerValue = 0U;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
<<<<<<< HEAD
 80043c0:	4b21      	ldr	r3, [pc, #132]	@ (8004448 <HAL_InitTick+0x88>)
{
 80043c2:	b570      	push	{r4, r5, r6, lr}
  __HAL_RCC_TIM2_CLK_ENABLE();
 80043c4:	69da      	ldr	r2, [r3, #28]
 80043c6:	f042 0201 	orr.w	r2, r2, #1
 80043ca:	61da      	str	r2, [r3, #28]
 80043cc:	69db      	ldr	r3, [r3, #28]
{
 80043ce:	b088      	sub	sp, #32
  __HAL_RCC_TIM2_CLK_ENABLE();
 80043d0:	f003 0301 	and.w	r3, r3, #1
 80043d4:	9302      	str	r3, [sp, #8]
{
 80043d6:	4605      	mov	r5, r0
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80043d8:	a901      	add	r1, sp, #4
 80043da:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM2_CLK_ENABLE();
 80043dc:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80043de:	f001 fbfd 	bl	8005bdc <HAL_RCC_GetClockConfig>
=======
 800232c:	4b21      	ldr	r3, [pc, #132]	@ (80023b4 <HAL_InitTick+0x88>)
{
 800232e:	b570      	push	{r4, r5, r6, lr}
  __HAL_RCC_TIM2_CLK_ENABLE();
 8002330:	69da      	ldr	r2, [r3, #28]
 8002332:	f042 0201 	orr.w	r2, r2, #1
 8002336:	61da      	str	r2, [r3, #28]
 8002338:	69db      	ldr	r3, [r3, #28]
{
 800233a:	b088      	sub	sp, #32
  __HAL_RCC_TIM2_CLK_ENABLE();
 800233c:	f003 0301 	and.w	r3, r3, #1
 8002340:	9302      	str	r3, [sp, #8]
{
 8002342:	4605      	mov	r5, r0
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002344:	a901      	add	r1, sp, #4
 8002346:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM2_CLK_ENABLE();
 8002348:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800234a:	f001 fbdd 	bl	8003b08 <HAL_RCC_GetClockConfig>
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
<<<<<<< HEAD
 80043e2:	9b06      	ldr	r3, [sp, #24]
 80043e4:	bb53      	cbnz	r3, 800443c <HAL_InitTick+0x7c>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80043e6:	f001 fbc9 	bl	8005b7c <HAL_RCC_GetPCLK1Freq>
=======
 800234e:	9b06      	ldr	r3, [sp, #24]
 8002350:	bb53      	cbnz	r3, 80023a8 <HAL_InitTick+0x7c>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002352:	f001 fba9 	bl	8003aa8 <HAL_RCC_GetPCLK1Freq>
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
<<<<<<< HEAD
 80043ea:	4e18      	ldr	r6, [pc, #96]	@ (800444c <HAL_InitTick+0x8c>)
 80043ec:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80043f0:	6033      	str	r3, [r6, #0]
=======
 8002356:	4e18      	ldr	r6, [pc, #96]	@ (80023b8 <HAL_InitTick+0x8c>)
 8002358:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800235c:	6033      	str	r3, [r6, #0]
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
<<<<<<< HEAD
 80043f2:	f240 33e7 	movw	r3, #999	@ 0x3e7
 80043f6:	60f3      	str	r3, [r6, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80043f8:	4b15      	ldr	r3, [pc, #84]	@ (8004450 <HAL_InitTick+0x90>)
 80043fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80043fe:	3b01      	subs	r3, #1
  htim2.Init.Prescaler = uwPrescalerValue;
 8004400:	6073      	str	r3, [r6, #4]
=======
 800235e:	f240 33e7 	movw	r3, #999	@ 0x3e7
 8002362:	60f3      	str	r3, [r6, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002364:	4b15      	ldr	r3, [pc, #84]	@ (80023bc <HAL_InitTick+0x90>)
 8002366:	fbb0 f3f3 	udiv	r3, r0, r3
 800236a:	3b01      	subs	r3, #1
  htim2.Init.Prescaler = uwPrescalerValue;
 800236c:	6073      	str	r3, [r6, #4]
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
  htim2.Init.ClockDivision = 0;
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;

  status = HAL_TIM_Base_Init(&htim2);
<<<<<<< HEAD
 8004402:	4630      	mov	r0, r6
  htim2.Init.ClockDivision = 0;
 8004404:	2300      	movs	r3, #0
 8004406:	6133      	str	r3, [r6, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004408:	60b3      	str	r3, [r6, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800440a:	61b3      	str	r3, [r6, #24]
  status = HAL_TIM_Base_Init(&htim2);
 800440c:	f002 fc2a 	bl	8006c64 <HAL_TIM_Base_Init>
  if (status == HAL_OK)
 8004410:	4604      	mov	r4, r0
 8004412:	b980      	cbnz	r0, 8004436 <HAL_InitTick+0x76>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 8004414:	4630      	mov	r0, r6
 8004416:	f002 fae7 	bl	80069e8 <HAL_TIM_Base_Start_IT>
    if (status == HAL_OK)
 800441a:	4604      	mov	r4, r0
 800441c:	b958      	cbnz	r0, 8004436 <HAL_InitTick+0x76>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800441e:	201c      	movs	r0, #28
 8004420:	f000 fec0 	bl	80051a4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004424:	2d0f      	cmp	r5, #15
 8004426:	d80d      	bhi.n	8004444 <HAL_InitTick+0x84>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 8004428:	4622      	mov	r2, r4
 800442a:	4629      	mov	r1, r5
 800442c:	201c      	movs	r0, #28
 800442e:	f000 fe87 	bl	8005140 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004432:	4b08      	ldr	r3, [pc, #32]	@ (8004454 <HAL_InitTick+0x94>)
 8004434:	601d      	str	r5, [r3, #0]
=======
 800236e:	4630      	mov	r0, r6
  htim2.Init.ClockDivision = 0;
 8002370:	2300      	movs	r3, #0
 8002372:	6133      	str	r3, [r6, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002374:	60b3      	str	r3, [r6, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002376:	61b3      	str	r3, [r6, #24]
  status = HAL_TIM_Base_Init(&htim2);
 8002378:	f002 fb90 	bl	8004a9c <HAL_TIM_Base_Init>
  if (status == HAL_OK)
 800237c:	4604      	mov	r4, r0
 800237e:	b980      	cbnz	r0, 80023a2 <HAL_InitTick+0x76>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 8002380:	4630      	mov	r0, r6
 8002382:	f002 fa4d 	bl	8004820 <HAL_TIM_Base_Start_IT>
    if (status == HAL_OK)
 8002386:	4604      	mov	r4, r0
 8002388:	b958      	cbnz	r0, 80023a2 <HAL_InitTick+0x76>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800238a:	201c      	movs	r0, #28
 800238c:	f000 fec0 	bl	8003110 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002390:	2d0f      	cmp	r5, #15
 8002392:	d80d      	bhi.n	80023b0 <HAL_InitTick+0x84>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 8002394:	4622      	mov	r2, r4
 8002396:	4629      	mov	r1, r5
 8002398:	201c      	movs	r0, #28
 800239a:	f000 fe87 	bl	80030ac <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800239e:	4b08      	ldr	r3, [pc, #32]	@ (80023c0 <HAL_InitTick+0x94>)
 80023a0:	601d      	str	r5, [r3, #0]
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
    }
  }

 /* Return function status */
  return status;
}
<<<<<<< HEAD
 8004436:	4620      	mov	r0, r4
 8004438:	b008      	add	sp, #32
 800443a:	bd70      	pop	{r4, r5, r6, pc}
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800443c:	f001 fb9e 	bl	8005b7c <HAL_RCC_GetPCLK1Freq>
 8004440:	0040      	lsls	r0, r0, #1
 8004442:	e7d2      	b.n	80043ea <HAL_InitTick+0x2a>
        status = HAL_ERROR;
 8004444:	2401      	movs	r4, #1
 8004446:	e7f6      	b.n	8004436 <HAL_InitTick+0x76>
 8004448:	40021000 	.word	0x40021000
 800444c:	20002774 	.word	0x20002774
 8004450:	000f4240 	.word	0x000f4240
 8004454:	20000014 	.word	0x20000014

08004458 <NMI_Handler>:
=======
 80023a2:	4620      	mov	r0, r4
 80023a4:	b008      	add	sp, #32
 80023a6:	bd70      	pop	{r4, r5, r6, pc}
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80023a8:	f001 fb7e 	bl	8003aa8 <HAL_RCC_GetPCLK1Freq>
 80023ac:	0040      	lsls	r0, r0, #1
 80023ae:	e7d2      	b.n	8002356 <HAL_InitTick+0x2a>
        status = HAL_ERROR;
 80023b0:	2401      	movs	r4, #1
 80023b2:	e7f6      	b.n	80023a2 <HAL_InitTick+0x76>
 80023b4:	40021000 	.word	0x40021000
 80023b8:	20002464 	.word	0x20002464
 80023bc:	000f4240 	.word	0x000f4240
 80023c0:	20000014 	.word	0x20000014

080023c4 <NMI_Handler>:
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
<<<<<<< HEAD
 8004458:	e7fe      	b.n	8004458 <NMI_Handler>

0800445a <HardFault_Handler>:
=======
 80023c4:	e7fe      	b.n	80023c4 <NMI_Handler>

080023c6 <HardFault_Handler>:
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
<<<<<<< HEAD
 800445a:	e7fe      	b.n	800445a <HardFault_Handler>

0800445c <MemManage_Handler>:
=======
 80023c6:	e7fe      	b.n	80023c6 <HardFault_Handler>

080023c8 <MemManage_Handler>:
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
<<<<<<< HEAD
 800445c:	e7fe      	b.n	800445c <MemManage_Handler>

0800445e <BusFault_Handler>:
=======
 80023c8:	e7fe      	b.n	80023c8 <MemManage_Handler>

080023ca <BusFault_Handler>:
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
<<<<<<< HEAD
 800445e:	e7fe      	b.n	800445e <BusFault_Handler>

08004460 <UsageFault_Handler>:
=======
 80023ca:	e7fe      	b.n	80023ca <BusFault_Handler>

080023cc <UsageFault_Handler>:
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
<<<<<<< HEAD
 8004460:	e7fe      	b.n	8004460 <UsageFault_Handler>

08004462 <DebugMon_Handler>:
=======
 80023cc:	e7fe      	b.n	80023cc <UsageFault_Handler>

080023ce <DebugMon_Handler>:
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
<<<<<<< HEAD
 8004462:	4770      	bx	lr

08004464 <DMA1_Channel3_IRQHandler>:
=======
 80023ce:	4770      	bx	lr

080023d0 <DMA1_Channel3_IRQHandler>:
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
void DMA1_Channel3_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
<<<<<<< HEAD
 8004464:	4801      	ldr	r0, [pc, #4]	@ (800446c <DMA1_Channel3_IRQHandler+0x8>)
 8004466:	f000 bf47 	b.w	80052f8 <HAL_DMA_IRQHandler>
 800446a:	bf00      	nop
 800446c:	20001074 	.word	0x20001074

08004470 <DMA1_Channel5_IRQHandler>:
=======
 80023d0:	4801      	ldr	r0, [pc, #4]	@ (80023d8 <DMA1_Channel3_IRQHandler+0x8>)
 80023d2:	f000 bf28 	b.w	8003226 <HAL_DMA_IRQHandler>
 80023d6:	bf00      	nop
 80023d8:	20000dc4 	.word	0x20000dc4

080023dc <DMA1_Channel5_IRQHandler>:
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
void DMA1_Channel5_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
<<<<<<< HEAD
 8004470:	4801      	ldr	r0, [pc, #4]	@ (8004478 <DMA1_Channel5_IRQHandler+0x8>)
 8004472:	f000 bf41 	b.w	80052f8 <HAL_DMA_IRQHandler>
 8004476:	bf00      	nop
 8004478:	200010fc 	.word	0x200010fc

0800447c <DMA1_Channel6_IRQHandler>:
=======
 80023dc:	4801      	ldr	r0, [pc, #4]	@ (80023e4 <DMA1_Channel5_IRQHandler+0x8>)
 80023de:	f000 bf22 	b.w	8003226 <HAL_DMA_IRQHandler>
 80023e2:	bf00      	nop
 80023e4:	20000e4c 	.word	0x20000e4c

080023e8 <DMA1_Channel6_IRQHandler>:
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
void DMA1_Channel6_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
<<<<<<< HEAD
 800447c:	4801      	ldr	r0, [pc, #4]	@ (8004484 <DMA1_Channel6_IRQHandler+0x8>)
 800447e:	f000 bf3b 	b.w	80052f8 <HAL_DMA_IRQHandler>
 8004482:	bf00      	nop
 8004484:	200010b8 	.word	0x200010b8

08004488 <TIM2_IRQHandler>:
=======
 80023e8:	4801      	ldr	r0, [pc, #4]	@ (80023f0 <DMA1_Channel6_IRQHandler+0x8>)
 80023ea:	f000 bf1c 	b.w	8003226 <HAL_DMA_IRQHandler>
 80023ee:	bf00      	nop
 80023f0:	20000e08 	.word	0x20000e08

080023f4 <TIM2_IRQHandler>:
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
void TIM2_IRQHandler(void)
{
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
<<<<<<< HEAD
 8004488:	4801      	ldr	r0, [pc, #4]	@ (8004490 <TIM2_IRQHandler+0x8>)
 800448a:	f002 bae7 	b.w	8006a5c <HAL_TIM_IRQHandler>
 800448e:	bf00      	nop
 8004490:	20002774 	.word	0x20002774

08004494 <TIM3_IRQHandler>:
=======
 80023f4:	4801      	ldr	r0, [pc, #4]	@ (80023fc <TIM2_IRQHandler+0x8>)
 80023f6:	f002 ba4d 	b.w	8004894 <HAL_TIM_IRQHandler>
 80023fa:	bf00      	nop
 80023fc:	20002464 	.word	0x20002464

08002400 <TIM3_IRQHandler>:
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
void TIM3_IRQHandler(void)
{
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
<<<<<<< HEAD
 8004494:	4801      	ldr	r0, [pc, #4]	@ (800449c <TIM3_IRQHandler+0x8>)
 8004496:	f002 bae1 	b.w	8006a5c <HAL_TIM_IRQHandler>
 800449a:	bf00      	nop
 800449c:	200012d8 	.word	0x200012d8

080044a0 <ADC3_IRQHandler>:
=======
 8002400:	4801      	ldr	r0, [pc, #4]	@ (8002408 <TIM3_IRQHandler+0x8>)
 8002402:	f002 ba47 	b.w	8004894 <HAL_TIM_IRQHandler>
 8002406:	bf00      	nop
 8002408:	20001028 	.word	0x20001028

0800240c <ADC3_IRQHandler>:
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
void ADC3_IRQHandler(void)
{
  /* USER CODE BEGIN ADC3_IRQn 0 */

  /* USER CODE END ADC3_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc3);
<<<<<<< HEAD
 80044a0:	4801      	ldr	r0, [pc, #4]	@ (80044a8 <ADC3_IRQHandler+0x8>)
 80044a2:	f000 ba51 	b.w	8004948 <HAL_ADC_IRQHandler>
 80044a6:	bf00      	nop
 80044a8:	20001494 	.word	0x20001494

080044ac <DMA2_Channel1_IRQHandler>:
=======
 800240c:	4801      	ldr	r0, [pc, #4]	@ (8002414 <ADC3_IRQHandler+0x8>)
 800240e:	f000 ba51 	b.w	80028b4 <HAL_ADC_IRQHandler>
 8002412:	bf00      	nop
 8002414:	200011e4 	.word	0x200011e4

08002418 <DMA2_Channel1_IRQHandler>:
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
void DMA2_Channel1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Channel1_IRQn 0 */

  /* USER CODE END DMA2_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
<<<<<<< HEAD
 80044ac:	4801      	ldr	r0, [pc, #4]	@ (80044b4 <DMA2_Channel1_IRQHandler+0x8>)
 80044ae:	f000 bf23 	b.w	80052f8 <HAL_DMA_IRQHandler>
 80044b2:	bf00      	nop
 80044b4:	20001450 	.word	0x20001450

080044b8 <DMA2_Channel5_IRQHandler>:
=======
 8002418:	4801      	ldr	r0, [pc, #4]	@ (8002420 <DMA2_Channel1_IRQHandler+0x8>)
 800241a:	f000 bf04 	b.w	8003226 <HAL_DMA_IRQHandler>
 800241e:	bf00      	nop
 8002420:	200011a0 	.word	0x200011a0

08002424 <DMA2_Channel5_IRQHandler>:
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
void DMA2_Channel5_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Channel5_IRQn 0 */

  /* USER CODE END DMA2_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
<<<<<<< HEAD
 80044b8:	4801      	ldr	r0, [pc, #4]	@ (80044c0 <DMA2_Channel5_IRQHandler+0x8>)
 80044ba:	f000 bf1d 	b.w	80052f8 <HAL_DMA_IRQHandler>
 80044be:	bf00      	nop
 80044c0:	2000140c 	.word	0x2000140c

080044c4 <_getpid>:
=======
 8002424:	4801      	ldr	r0, [pc, #4]	@ (800242c <DMA2_Channel5_IRQHandler+0x8>)
 8002426:	f000 befe 	b.w	8003226 <HAL_DMA_IRQHandler>
 800242a:	bf00      	nop
 800242c:	2000115c 	.word	0x2000115c

08002430 <_getpid>:
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
}

int _getpid(void)
{
  return 1;
}
<<<<<<< HEAD
 80044c4:	2001      	movs	r0, #1
 80044c6:	4770      	bx	lr

080044c8 <_kill>:

int _kill(int pid, int sig)
{
 80044c8:	b508      	push	{r3, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80044ca:	f007 fa49 	bl	800b960 <__errno>
 80044ce:	2316      	movs	r3, #22
 80044d0:	6003      	str	r3, [r0, #0]
  return -1;
}
 80044d2:	f04f 30ff 	mov.w	r0, #4294967295
 80044d6:	bd08      	pop	{r3, pc}

080044d8 <_exit>:

void _exit (int status)
{
 80044d8:	b508      	push	{r3, lr}
  errno = EINVAL;
 80044da:	f007 fa41 	bl	800b960 <__errno>
 80044de:	2316      	movs	r3, #22
 80044e0:	6003      	str	r3, [r0, #0]
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
 80044e2:	e7fe      	b.n	80044e2 <_exit+0xa>

080044e4 <_read>:
=======
 8002430:	2001      	movs	r0, #1
 8002432:	4770      	bx	lr

08002434 <_kill>:

int _kill(int pid, int sig)
{
 8002434:	b508      	push	{r3, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002436:	f007 f905 	bl	8009644 <__errno>
 800243a:	2316      	movs	r3, #22
 800243c:	6003      	str	r3, [r0, #0]
  return -1;
}
 800243e:	f04f 30ff 	mov.w	r0, #4294967295
 8002442:	bd08      	pop	{r3, pc}

08002444 <_exit>:

void _exit (int status)
{
 8002444:	b508      	push	{r3, lr}
  errno = EINVAL;
 8002446:	f007 f8fd 	bl	8009644 <__errno>
 800244a:	2316      	movs	r3, #22
 800244c:	6003      	str	r3, [r0, #0]
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
 800244e:	e7fe      	b.n	800244e <_exit+0xa>

08002450 <_read>:
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
<<<<<<< HEAD
 80044e4:	b570      	push	{r4, r5, r6, lr}
 80044e6:	460d      	mov	r5, r1
 80044e8:	4614      	mov	r4, r2
=======
 8002450:	b570      	push	{r4, r5, r6, lr}
 8002452:	460d      	mov	r5, r1
 8002454:	4614      	mov	r4, r2
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
<<<<<<< HEAD
 80044ea:	460e      	mov	r6, r1
 80044ec:	1b73      	subs	r3, r6, r5
 80044ee:	429c      	cmp	r4, r3
 80044f0:	dc01      	bgt.n	80044f6 <_read+0x12>
=======
 8002456:	460e      	mov	r6, r1
 8002458:	1b73      	subs	r3, r6, r5
 800245a:	429c      	cmp	r4, r3
 800245c:	dc01      	bgt.n	8002462 <_read+0x12>
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
  {
    *ptr++ = __io_getchar();
  }

  return len;
}
<<<<<<< HEAD
 80044f2:	4620      	mov	r0, r4
 80044f4:	bd70      	pop	{r4, r5, r6, pc}
    *ptr++ = __io_getchar();
 80044f6:	f3af 8000 	nop.w
 80044fa:	f806 0b01 	strb.w	r0, [r6], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80044fe:	e7f5      	b.n	80044ec <_read+0x8>

08004500 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004500:	b570      	push	{r4, r5, r6, lr}
 8004502:	460d      	mov	r5, r1
 8004504:	4614      	mov	r4, r2
=======
 800245e:	4620      	mov	r0, r4
 8002460:	bd70      	pop	{r4, r5, r6, pc}
    *ptr++ = __io_getchar();
 8002462:	f3af 8000 	nop.w
 8002466:	f806 0b01 	strb.w	r0, [r6], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800246a:	e7f5      	b.n	8002458 <_read+0x8>

0800246c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800246c:	b570      	push	{r4, r5, r6, lr}
 800246e:	460d      	mov	r5, r1
 8002470:	4614      	mov	r4, r2
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
<<<<<<< HEAD
 8004506:	460e      	mov	r6, r1
 8004508:	1b73      	subs	r3, r6, r5
 800450a:	429c      	cmp	r4, r3
 800450c:	dc01      	bgt.n	8004512 <_write+0x12>
=======
 8002472:	460e      	mov	r6, r1
 8002474:	1b73      	subs	r3, r6, r5
 8002476:	429c      	cmp	r4, r3
 8002478:	dc01      	bgt.n	800247e <_write+0x12>
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
  {
    __io_putchar(*ptr++);
  }
  return len;
}
<<<<<<< HEAD
 800450e:	4620      	mov	r0, r4
 8004510:	bd70      	pop	{r4, r5, r6, pc}
    __io_putchar(*ptr++);
 8004512:	f816 0b01 	ldrb.w	r0, [r6], #1
 8004516:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800451a:	e7f5      	b.n	8004508 <_write+0x8>

0800451c <_close>:
=======
 800247a:	4620      	mov	r0, r4
 800247c:	bd70      	pop	{r4, r5, r6, pc}
    __io_putchar(*ptr++);
 800247e:	f816 0b01 	ldrb.w	r0, [r6], #1
 8002482:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002486:	e7f5      	b.n	8002474 <_write+0x8>

08002488 <_close>:
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)

int _close(int file)
{
  (void)file;
  return -1;
}
<<<<<<< HEAD
 800451c:	f04f 30ff 	mov.w	r0, #4294967295
 8004520:	4770      	bx	lr

08004522 <_fstat>:
=======
 8002488:	f04f 30ff 	mov.w	r0, #4294967295
 800248c:	4770      	bx	lr

0800248e <_fstat>:
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
<<<<<<< HEAD
 8004522:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004526:	604b      	str	r3, [r1, #4]
  return 0;
}
 8004528:	2000      	movs	r0, #0
 800452a:	4770      	bx	lr

0800452c <_isatty>:
=======
 800248e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002492:	604b      	str	r3, [r1, #4]
  return 0;
}
 8002494:	2000      	movs	r0, #0
 8002496:	4770      	bx	lr

08002498 <_isatty>:
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)

int _isatty(int file)
{
  (void)file;
  return 1;
}
<<<<<<< HEAD
 800452c:	2001      	movs	r0, #1
 800452e:	4770      	bx	lr

08004530 <_lseek>:
=======
 8002498:	2001      	movs	r0, #1
 800249a:	4770      	bx	lr

0800249c <_lseek>:
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
<<<<<<< HEAD
 8004530:	2000      	movs	r0, #0
 8004532:	4770      	bx	lr

08004534 <_sbrk>:
=======
 800249c:	2000      	movs	r0, #0
 800249e:	4770      	bx	lr

080024a0 <_sbrk>:
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
<<<<<<< HEAD
 8004534:	4a0b      	ldr	r2, [pc, #44]	@ (8004564 <_sbrk+0x30>)
 8004536:	6811      	ldr	r1, [r2, #0]
{
 8004538:	b510      	push	{r4, lr}
 800453a:	4603      	mov	r3, r0
  if (NULL == __sbrk_heap_end)
 800453c:	b909      	cbnz	r1, 8004542 <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 800453e:	490a      	ldr	r1, [pc, #40]	@ (8004568 <_sbrk+0x34>)
 8004540:	6011      	str	r1, [r2, #0]
=======
 80024a0:	4a0b      	ldr	r2, [pc, #44]	@ (80024d0 <_sbrk+0x30>)
 80024a2:	6811      	ldr	r1, [r2, #0]
{
 80024a4:	b510      	push	{r4, lr}
 80024a6:	4603      	mov	r3, r0
  if (NULL == __sbrk_heap_end)
 80024a8:	b909      	cbnz	r1, 80024ae <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 80024aa:	490a      	ldr	r1, [pc, #40]	@ (80024d4 <_sbrk+0x34>)
 80024ac:	6011      	str	r1, [r2, #0]
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
<<<<<<< HEAD
 8004542:	6810      	ldr	r0, [r2, #0]
 8004544:	4909      	ldr	r1, [pc, #36]	@ (800456c <_sbrk+0x38>)
 8004546:	4c0a      	ldr	r4, [pc, #40]	@ (8004570 <_sbrk+0x3c>)
 8004548:	4403      	add	r3, r0
 800454a:	1b09      	subs	r1, r1, r4
 800454c:	428b      	cmp	r3, r1
 800454e:	d906      	bls.n	800455e <_sbrk+0x2a>
  {
    errno = ENOMEM;
 8004550:	f007 fa06 	bl	800b960 <__errno>
 8004554:	230c      	movs	r3, #12
 8004556:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8004558:	f04f 30ff 	mov.w	r0, #4294967295
=======
 80024ae:	6810      	ldr	r0, [r2, #0]
 80024b0:	4909      	ldr	r1, [pc, #36]	@ (80024d8 <_sbrk+0x38>)
 80024b2:	4c0a      	ldr	r4, [pc, #40]	@ (80024dc <_sbrk+0x3c>)
 80024b4:	4403      	add	r3, r0
 80024b6:	1b09      	subs	r1, r1, r4
 80024b8:	428b      	cmp	r3, r1
 80024ba:	d906      	bls.n	80024ca <_sbrk+0x2a>
  {
    errno = ENOMEM;
 80024bc:	f007 f8c2 	bl	8009644 <__errno>
 80024c0:	230c      	movs	r3, #12
 80024c2:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 80024c4:	f04f 30ff 	mov.w	r0, #4294967295
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
<<<<<<< HEAD
 800455c:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 800455e:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 8004560:	e7fc      	b.n	800455c <_sbrk+0x28>
 8004562:	bf00      	nop
 8004564:	200027c4 	.word	0x200027c4
 8004568:	200070d8 	.word	0x200070d8
 800456c:	2000a000 	.word	0x2000a000
 8004570:	00000400 	.word	0x00000400

08004574 <uart_transmit_string>:
=======
 80024c8:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 80024ca:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 80024cc:	e7fc      	b.n	80024c8 <_sbrk+0x28>
 80024ce:	bf00      	nop
 80024d0:	200024b4 	.word	0x200024b4
 80024d4:	20006dc8 	.word	0x20006dc8
 80024d8:	2000a000 	.word	0x2000a000
 80024dc:	00000400 	.word	0x00000400

080024e0 <uart_transmit_string>:
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
#include "system_management.h"
#include <stdio.h>
#include <stdarg.h>
#include <string.h>

void uart_transmit_string(UART_HandleTypeDef *huart, uint8_t *string) {
<<<<<<< HEAD
 8004574:	b570      	push	{r4, r5, r6, lr}
 8004576:	4605      	mov	r5, r0
    HAL_UART_Transmit(huart, string, strlen((char *)string), 1000);
 8004578:	4608      	mov	r0, r1
void uart_transmit_string(UART_HandleTypeDef *huart, uint8_t *string) {
 800457a:	460c      	mov	r4, r1
    HAL_UART_Transmit(huart, string, strlen((char *)string), 1000);
 800457c:	f7fb fe88 	bl	8000290 <strlen>
 8004580:	4621      	mov	r1, r4
 8004582:	b282      	uxth	r2, r0
 8004584:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004588:	4628      	mov	r0, r5
}
 800458a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UART_Transmit(huart, string, strlen((char *)string), 1000);
 800458e:	f002 bf17 	b.w	80073c0 <HAL_UART_Transmit>
	...

08004594 <Debug_printf>:


void Debug_printf(const char *format, ...) {
 8004594:	b40f      	push	{r0, r1, r2, r3}
 8004596:	b500      	push	{lr}
 8004598:	b0c3      	sub	sp, #268	@ 0x10c
 800459a:	ab44      	add	r3, sp, #272	@ 0x110
=======
 80024e0:	b570      	push	{r4, r5, r6, lr}
 80024e2:	4605      	mov	r5, r0
    HAL_UART_Transmit(huart, string, strlen((char *)string), 1000);
 80024e4:	4608      	mov	r0, r1
void uart_transmit_string(UART_HandleTypeDef *huart, uint8_t *string) {
 80024e6:	460c      	mov	r4, r1
    HAL_UART_Transmit(huart, string, strlen((char *)string), 1000);
 80024e8:	f7fd fed2 	bl	8000290 <strlen>
 80024ec:	4621      	mov	r1, r4
 80024ee:	b282      	uxth	r2, r0
 80024f0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80024f4:	4628      	mov	r0, r5
}
 80024f6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UART_Transmit(huart, string, strlen((char *)string), 1000);
 80024fa:	f002 be0b 	b.w	8005114 <HAL_UART_Transmit>
	...

08002500 <Debug_printf>:


void Debug_printf(const char *format, ...) {
 8002500:	b40f      	push	{r0, r1, r2, r3}
 8002502:	b500      	push	{lr}
 8002504:	b0c3      	sub	sp, #268	@ 0x10c
 8002506:	ab44      	add	r3, sp, #272	@ 0x110
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)

    // Start processing the variadic arguments
    va_start(args, format);

    // Format the string
    vsnprintf(output_buffer, sizeof(output_buffer), format, args);
<<<<<<< HEAD
 800459c:	f44f 7180 	mov.w	r1, #256	@ 0x100
void Debug_printf(const char *format, ...) {
 80045a0:	f853 2b04 	ldr.w	r2, [r3], #4
    va_start(args, format);
 80045a4:	9301      	str	r3, [sp, #4]
    vsnprintf(output_buffer, sizeof(output_buffer), format, args);
 80045a6:	a802      	add	r0, sp, #8
 80045a8:	f006 fbaa 	bl	800ad00 <vsniprintf>
=======
 8002508:	f44f 7180 	mov.w	r1, #256	@ 0x100
void Debug_printf(const char *format, ...) {
 800250c:	f853 2b04 	ldr.w	r2, [r3], #4
    va_start(args, format);
 8002510:	9301      	str	r3, [sp, #4]
    vsnprintf(output_buffer, sizeof(output_buffer), format, args);
 8002512:	a802      	add	r0, sp, #8
 8002514:	f006 fa8e 	bl	8008a34 <vsniprintf>
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)

    // End processing the arguments
    va_end(args);

    // Transmit the formatted string over UART
    uart_transmit_string(&huart1,(uint8_t*) output_buffer);
<<<<<<< HEAD
 80045ac:	4804      	ldr	r0, [pc, #16]	@ (80045c0 <Debug_printf+0x2c>)
 80045ae:	a902      	add	r1, sp, #8
 80045b0:	f7ff ffe0 	bl	8004574 <uart_transmit_string>
}
 80045b4:	b043      	add	sp, #268	@ 0x10c
 80045b6:	f85d eb04 	ldr.w	lr, [sp], #4
 80045ba:	b004      	add	sp, #16
 80045bc:	4770      	bx	lr
 80045be:	bf00      	nop
 80045c0:	20001250 	.word	0x20001250

080045c4 <SystemInit>:
=======
 8002518:	4804      	ldr	r0, [pc, #16]	@ (800252c <Debug_printf+0x2c>)
 800251a:	a902      	add	r1, sp, #8
 800251c:	f7ff ffe0 	bl	80024e0 <uart_transmit_string>
}
 8002520:	b043      	add	sp, #268	@ 0x10c
 8002522:	f85d eb04 	ldr.w	lr, [sp], #4
 8002526:	b004      	add	sp, #16
 8002528:	4770      	bx	lr
 800252a:	bf00      	nop
 800252c:	20000fa0 	.word	0x20000fa0

08002530 <SystemInit>:
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
  */
void SystemInit(void)
{
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
<<<<<<< HEAD
 80045c4:	4a03      	ldr	r2, [pc, #12]	@ (80045d4 <SystemInit+0x10>)
 80045c6:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 80045ca:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80045ce:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
=======
 8002530:	4a03      	ldr	r2, [pc, #12]	@ (8002540 <SystemInit+0x10>)
 8002532:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8002536:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800253a:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
<<<<<<< HEAD
 80045d2:	4770      	bx	lr
 80045d4:	e000ed00 	.word	0xe000ed00

080045d8 <Reset_Handler>:
=======
 800253e:	4770      	bx	lr
 8002540:	e000ed00 	.word	0xe000ed00

08002544 <Reset_Handler>:
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
<<<<<<< HEAD
 80045d8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8004610 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80045dc:	f7ff fff2 	bl	80045c4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80045e0:	480c      	ldr	r0, [pc, #48]	@ (8004614 <LoopForever+0x6>)
  ldr r1, =_edata
 80045e2:	490d      	ldr	r1, [pc, #52]	@ (8004618 <LoopForever+0xa>)
  ldr r2, =_sidata
 80045e4:	4a0d      	ldr	r2, [pc, #52]	@ (800461c <LoopForever+0xe>)
  movs r3, #0
 80045e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80045e8:	e002      	b.n	80045f0 <LoopCopyDataInit>

080045ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80045ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80045ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80045ee:	3304      	adds	r3, #4

080045f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80045f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80045f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80045f4:	d3f9      	bcc.n	80045ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80045f6:	4a0a      	ldr	r2, [pc, #40]	@ (8004620 <LoopForever+0x12>)
  ldr r4, =_ebss
 80045f8:	4c0a      	ldr	r4, [pc, #40]	@ (8004624 <LoopForever+0x16>)
  movs r3, #0
 80045fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80045fc:	e001      	b.n	8004602 <LoopFillZerobss>

080045fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80045fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004600:	3204      	adds	r2, #4

08004602 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004602:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004604:	d3fb      	bcc.n	80045fe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004606:	f007 f9b1 	bl	800b96c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800460a:	f7fe fccb 	bl	8002fa4 <main>

0800460e <LoopForever>:

LoopForever:
    b LoopForever
 800460e:	e7fe      	b.n	800460e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8004610:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8004614:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004618:	20000248 	.word	0x20000248
  ldr r2, =_sidata
 800461c:	08010688 	.word	0x08010688
  ldr r2, =_sbss
 8004620:	20000248 	.word	0x20000248
  ldr r4, =_ebss
 8004624:	200070d4 	.word	0x200070d4

08004628 <ADC1_2_IRQHandler>:
=======
 8002544:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800257c <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8002548:	f7ff fff2 	bl	8002530 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800254c:	480c      	ldr	r0, [pc, #48]	@ (8002580 <LoopForever+0x6>)
  ldr r1, =_edata
 800254e:	490d      	ldr	r1, [pc, #52]	@ (8002584 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002550:	4a0d      	ldr	r2, [pc, #52]	@ (8002588 <LoopForever+0xe>)
  movs r3, #0
 8002552:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002554:	e002      	b.n	800255c <LoopCopyDataInit>

08002556 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002556:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002558:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800255a:	3304      	adds	r3, #4

0800255c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800255c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800255e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002560:	d3f9      	bcc.n	8002556 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002562:	4a0a      	ldr	r2, [pc, #40]	@ (800258c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002564:	4c0a      	ldr	r4, [pc, #40]	@ (8002590 <LoopForever+0x16>)
  movs r3, #0
 8002566:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002568:	e001      	b.n	800256e <LoopFillZerobss>

0800256a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800256a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800256c:	3204      	adds	r2, #4

0800256e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800256e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002570:	d3fb      	bcc.n	800256a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002572:	f007 f86d 	bl	8009650 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002576:	f7fe fd7f 	bl	8001078 <main>

0800257a <LoopForever>:

LoopForever:
    b LoopForever
 800257a:	e7fe      	b.n	800257a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800257c:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8002580:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002584:	20000248 	.word	0x20000248
  ldr r2, =_sidata
 8002588:	0800d3d8 	.word	0x0800d3d8
  ldr r2, =_sbss
 800258c:	20000248 	.word	0x20000248
  ldr r4, =_ebss
 8002590:	20006dc4 	.word	0x20006dc4

08002594 <ADC1_2_IRQHandler>:
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
<<<<<<< HEAD
 8004628:	e7fe      	b.n	8004628 <ADC1_2_IRQHandler>
	...

0800462c <HAL_Init>:
=======
 8002594:	e7fe      	b.n	8002594 <ADC1_2_IRQHandler>
	...

08002598 <HAL_Init>:
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
  */
HAL_StatusTypeDef HAL_Init(void)
{
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
<<<<<<< HEAD
 800462c:	4a07      	ldr	r2, [pc, #28]	@ (800464c <HAL_Init+0x20>)
{
 800462e:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004630:	6813      	ldr	r3, [r2, #0]
 8004632:	f043 0310 	orr.w	r3, r3, #16
 8004636:	6013      	str	r3, [r2, #0]
=======
 8002598:	4a07      	ldr	r2, [pc, #28]	@ (80025b8 <HAL_Init+0x20>)
{
 800259a:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800259c:	6813      	ldr	r3, [r2, #0]
 800259e:	f043 0310 	orr.w	r3, r3, #16
 80025a2:	6013      	str	r3, [r2, #0]
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
<<<<<<< HEAD
 8004638:	2003      	movs	r0, #3
 800463a:	f000 fd6f 	bl	800511c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800463e:	200f      	movs	r0, #15
 8004640:	f7ff febe 	bl	80043c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004644:	f7ff fcd0 	bl	8003fe8 <HAL_MspInit>
=======
 80025a4:	2003      	movs	r0, #3
 80025a6:	f000 fd6f 	bl	8003088 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80025aa:	200f      	movs	r0, #15
 80025ac:	f7ff febe 	bl	800232c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80025b0:	f7ff fcd0 	bl	8001f54 <HAL_MspInit>
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)

  /* Return function status */
  return HAL_OK;
}
<<<<<<< HEAD
 8004648:	2000      	movs	r0, #0
 800464a:	bd08      	pop	{r3, pc}
 800464c:	40022000 	.word	0x40022000

08004650 <HAL_IncTick>:
=======
 80025b4:	2000      	movs	r0, #0
 80025b6:	bd08      	pop	{r3, pc}
 80025b8:	40022000 	.word	0x40022000

080025bc <HAL_IncTick>:
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
<<<<<<< HEAD
 8004650:	4a03      	ldr	r2, [pc, #12]	@ (8004660 <HAL_IncTick+0x10>)
 8004652:	4b04      	ldr	r3, [pc, #16]	@ (8004664 <HAL_IncTick+0x14>)
 8004654:	6811      	ldr	r1, [r2, #0]
 8004656:	781b      	ldrb	r3, [r3, #0]
 8004658:	440b      	add	r3, r1
 800465a:	6013      	str	r3, [r2, #0]
}
 800465c:	4770      	bx	lr
 800465e:	bf00      	nop
 8004660:	200027c8 	.word	0x200027c8
 8004664:	20000010 	.word	0x20000010

08004668 <HAL_GetTick>:
=======
 80025bc:	4a03      	ldr	r2, [pc, #12]	@ (80025cc <HAL_IncTick+0x10>)
 80025be:	4b04      	ldr	r3, [pc, #16]	@ (80025d0 <HAL_IncTick+0x14>)
 80025c0:	6811      	ldr	r1, [r2, #0]
 80025c2:	781b      	ldrb	r3, [r3, #0]
 80025c4:	440b      	add	r3, r1
 80025c6:	6013      	str	r3, [r2, #0]
}
 80025c8:	4770      	bx	lr
 80025ca:	bf00      	nop
 80025cc:	200024b8 	.word	0x200024b8
 80025d0:	20000010 	.word	0x20000010

080025d4 <HAL_GetTick>:
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;  
<<<<<<< HEAD
 8004668:	4b01      	ldr	r3, [pc, #4]	@ (8004670 <HAL_GetTick+0x8>)
 800466a:	6818      	ldr	r0, [r3, #0]
}
 800466c:	4770      	bx	lr
 800466e:	bf00      	nop
 8004670:	200027c8 	.word	0x200027c8

08004674 <HAL_Delay>:
=======
 80025d4:	4b01      	ldr	r3, [pc, #4]	@ (80025dc <HAL_GetTick+0x8>)
 80025d6:	6818      	ldr	r0, [r3, #0]
}
 80025d8:	4770      	bx	lr
 80025da:	bf00      	nop
 80025dc:	200024b8 	.word	0x200024b8

080025e0 <HAL_Delay>:
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
<<<<<<< HEAD
 8004674:	b538      	push	{r3, r4, r5, lr}
 8004676:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8004678:	f7ff fff6 	bl	8004668 <HAL_GetTick>
=======
 80025e0:	b538      	push	{r3, r4, r5, lr}
 80025e2:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80025e4:	f7ff fff6 	bl	80025d4 <HAL_GetTick>
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
  uint32_t wait = Delay;
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
<<<<<<< HEAD
 800467c:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 800467e:	bf1c      	itt	ne
 8004680:	4b05      	ldrne	r3, [pc, #20]	@ (8004698 <HAL_Delay+0x24>)
 8004682:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8004684:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 8004686:	bf18      	it	ne
 8004688:	18e4      	addne	r4, r4, r3
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800468a:	f7ff ffed 	bl	8004668 <HAL_GetTick>
 800468e:	1b43      	subs	r3, r0, r5
 8004690:	42a3      	cmp	r3, r4
 8004692:	d3fa      	bcc.n	800468a <HAL_Delay+0x16>
  {
  }
}
 8004694:	bd38      	pop	{r3, r4, r5, pc}
 8004696:	bf00      	nop
 8004698:	20000010 	.word	0x20000010

0800469c <HAL_ADC_ConvCpltCallback>:
=======
 80025e8:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 80025ea:	bf1c      	itt	ne
 80025ec:	4b05      	ldrne	r3, [pc, #20]	@ (8002604 <HAL_Delay+0x24>)
 80025ee:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 80025f0:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 80025f2:	bf18      	it	ne
 80025f4:	18e4      	addne	r4, r4, r3
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80025f6:	f7ff ffed 	bl	80025d4 <HAL_GetTick>
 80025fa:	1b43      	subs	r3, r0, r5
 80025fc:	42a3      	cmp	r3, r4
 80025fe:	d3fa      	bcc.n	80025f6 <HAL_Delay+0x16>
  {
  }
}
 8002600:	bd38      	pop	{r3, r4, r5, pc}
 8002602:	bf00      	nop
 8002604:	20000010 	.word	0x20000010

08002608 <HAL_ADC_ConvCpltCallback>:
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
/**
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
<<<<<<< HEAD
 800469c:	4770      	bx	lr

0800469e <HAL_ADC_LevelOutOfWindowCallback>:
=======
 8002608:	4770      	bx	lr

0800260a <HAL_ADC_LevelOutOfWindowCallback>:
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
/**
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
<<<<<<< HEAD
 800469e:	4770      	bx	lr

080046a0 <HAL_ADC_ErrorCallback>:
=======
 800260a:	4770      	bx	lr

0800260c <HAL_ADC_ErrorCallback>:
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
  * @brief  ADC error callback in non blocking mode
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
<<<<<<< HEAD
 80046a0:	4770      	bx	lr

080046a2 <ADC_Disable>:
=======
 800260c:	4770      	bx	lr

0800260e <ADC_Disable>:
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
<<<<<<< HEAD
 80046a2:	b538      	push	{r3, r4, r5, lr}
=======
 800260e:	b538      	push	{r3, r4, r5, lr}
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
<<<<<<< HEAD
 80046a4:	6803      	ldr	r3, [r0, #0]
 80046a6:	689a      	ldr	r2, [r3, #8]
 80046a8:	f002 0203 	and.w	r2, r2, #3
 80046ac:	2a01      	cmp	r2, #1
{
 80046ae:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET )
 80046b0:	d001      	beq.n	80046b6 <ADC_Disable+0x14>
=======
 8002610:	6803      	ldr	r3, [r0, #0]
 8002612:	689a      	ldr	r2, [r3, #8]
 8002614:	f002 0203 	and.w	r2, r2, #3
 8002618:	2a01      	cmp	r2, #1
{
 800261a:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET )
 800261c:	d001      	beq.n	8002622 <ADC_Disable+0x14>
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
<<<<<<< HEAD
 80046b2:	2000      	movs	r0, #0
}
 80046b4:	bd38      	pop	{r3, r4, r5, pc}
  if (ADC_IS_ENABLE(hadc) != RESET )
 80046b6:	681a      	ldr	r2, [r3, #0]
 80046b8:	07d1      	lsls	r1, r2, #31
 80046ba:	d5fa      	bpl.n	80046b2 <ADC_Disable+0x10>
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80046bc:	689a      	ldr	r2, [r3, #8]
 80046be:	f002 020d 	and.w	r2, r2, #13
 80046c2:	2a01      	cmp	r2, #1
 80046c4:	d115      	bne.n	80046f2 <ADC_Disable+0x50>
      __HAL_ADC_DISABLE(hadc);
 80046c6:	689a      	ldr	r2, [r3, #8]
 80046c8:	f042 0202 	orr.w	r2, r2, #2
 80046cc:	609a      	str	r2, [r3, #8]
 80046ce:	2203      	movs	r2, #3
 80046d0:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 80046d2:	f7ff ffc9 	bl	8004668 <HAL_GetTick>
 80046d6:	4605      	mov	r5, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80046d8:	6823      	ldr	r3, [r4, #0]
 80046da:	689b      	ldr	r3, [r3, #8]
 80046dc:	07db      	lsls	r3, r3, #31
 80046de:	d5e8      	bpl.n	80046b2 <ADC_Disable+0x10>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80046e0:	f7ff ffc2 	bl	8004668 <HAL_GetTick>
 80046e4:	1b40      	subs	r0, r0, r5
 80046e6:	2802      	cmp	r0, #2
 80046e8:	d9f6      	bls.n	80046d8 <ADC_Disable+0x36>
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80046ea:	6823      	ldr	r3, [r4, #0]
 80046ec:	689b      	ldr	r3, [r3, #8]
 80046ee:	07da      	lsls	r2, r3, #31
 80046f0:	d5f2      	bpl.n	80046d8 <ADC_Disable+0x36>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80046f2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80046f4:	f043 0310 	orr.w	r3, r3, #16
 80046f8:	6423      	str	r3, [r4, #64]	@ 0x40
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80046fa:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 80046fc:	f043 0301 	orr.w	r3, r3, #1
 8004700:	6463      	str	r3, [r4, #68]	@ 0x44
      return HAL_ERROR;
 8004702:	2001      	movs	r0, #1
 8004704:	e7d6      	b.n	80046b4 <ADC_Disable+0x12>
	...

08004708 <HAL_ADC_Init>:
{
 8004708:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __IO uint32_t wait_loop_index = 0U;
 800470a:	2300      	movs	r3, #0
 800470c:	9301      	str	r3, [sp, #4]
  if(hadc == NULL)
 800470e:	4604      	mov	r4, r0
 8004710:	2800      	cmp	r0, #0
 8004712:	f000 8103 	beq.w	800491c <HAL_ADC_Init+0x214>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004716:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 8004718:	06d5      	lsls	r5, r2, #27
 800471a:	d46a      	bmi.n	80047f2 <HAL_ADC_Init+0xea>
    if (hadc->State == HAL_ADC_STATE_RESET)
 800471c:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800471e:	2b00      	cmp	r3, #0
 8004720:	d035      	beq.n	800478e <HAL_ADC_Init+0x86>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004722:	2000      	movs	r0, #0
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8004724:	6823      	ldr	r3, [r4, #0]
 8004726:	689a      	ldr	r2, [r3, #8]
 8004728:	00d2      	lsls	r2, r2, #3
 800472a:	d502      	bpl.n	8004732 <HAL_ADC_Init+0x2a>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 800472c:	689b      	ldr	r3, [r3, #8]
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 800472e:	009d      	lsls	r5, r3, #2
 8004730:	d50a      	bpl.n	8004748 <HAL_ADC_Init+0x40>
      ADC_STATE_CLR_SET(hadc->State,
 8004732:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004734:	f023 0312 	bic.w	r3, r3, #18
 8004738:	f043 0310 	orr.w	r3, r3, #16
 800473c:	6423      	str	r3, [r4, #64]	@ 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800473e:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8004740:	f043 0301 	orr.w	r3, r3, #1
 8004744:	6463      	str	r3, [r4, #68]	@ 0x44
      tmp_hal_status = HAL_ERROR;
 8004746:	2001      	movs	r0, #1
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8004748:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800474a:	06d9      	lsls	r1, r3, #27
 800474c:	f100 80e0 	bmi.w	8004910 <HAL_ADC_Init+0x208>
 8004750:	2800      	cmp	r0, #0
 8004752:	f040 80dd 	bne.w	8004910 <HAL_ADC_Init+0x208>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8004756:	6823      	ldr	r3, [r4, #0]
 8004758:	689a      	ldr	r2, [r3, #8]
      (tmp_hal_status == HAL_OK)                                &&
 800475a:	0752      	lsls	r2, r2, #29
 800475c:	f100 80d8 	bmi.w	8004910 <HAL_ADC_Init+0x208>
    ADC_STATE_CLR_SET(hadc->State,
 8004760:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8004762:	f422 7281 	bic.w	r2, r2, #258	@ 0x102
 8004766:	f042 0202 	orr.w	r2, r2, #2
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800476a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
    ADC_STATE_CLR_SET(hadc->State,
 800476e:	6422      	str	r2, [r4, #64]	@ 0x40
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004770:	4a6b      	ldr	r2, [pc, #428]	@ (8004920 <HAL_ADC_Init+0x218>)
 8004772:	d042      	beq.n	80047fa <HAL_ADC_Init+0xf2>
 8004774:	4293      	cmp	r3, r2
 8004776:	d03e      	beq.n	80047f6 <HAL_ADC_Init+0xee>
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8004778:	f502 7240 	add.w	r2, r2, #768	@ 0x300
 800477c:	4293      	cmp	r3, r2
 800477e:	4969      	ldr	r1, [pc, #420]	@ (8004924 <HAL_ADC_Init+0x21c>)
 8004780:	f000 80b3 	beq.w	80048ea <HAL_ADC_Init+0x1e2>
 8004784:	428b      	cmp	r3, r1
 8004786:	bf18      	it	ne
 8004788:	2200      	movne	r2, #0
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800478a:	4967      	ldr	r1, [pc, #412]	@ (8004928 <HAL_ADC_Init+0x220>)
 800478c:	e036      	b.n	80047fc <HAL_ADC_Init+0xf4>
      hadc->InjectionConfig.ContextQueue = 0U;
 800478e:	e9c0 3312 	strd	r3, r3, [r0, #72]	@ 0x48
      ADC_CLEAR_ERRORCODE(hadc);
 8004792:	6443      	str	r3, [r0, #68]	@ 0x44
      hadc->Lock = HAL_UNLOCKED;
 8004794:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_ADC_MspInit(hadc);
 8004798:	f7ff fc44 	bl	8004024 <HAL_ADC_MspInit>
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 800479c:	6823      	ldr	r3, [r4, #0]
 800479e:	689b      	ldr	r3, [r3, #8]
 80047a0:	00d8      	lsls	r0, r3, #3
 80047a2:	d4be      	bmi.n	8004722 <HAL_ADC_Init+0x1a>
        tmp_hal_status = ADC_Disable(hadc);
 80047a4:	4620      	mov	r0, r4
 80047a6:	f7ff ff7c 	bl	80046a2 <ADC_Disable>
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80047aa:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 80047ac:	06d1      	lsls	r1, r2, #27
 80047ae:	d4b9      	bmi.n	8004724 <HAL_ADC_Init+0x1c>
 80047b0:	2800      	cmp	r0, #0
 80047b2:	d1b7      	bne.n	8004724 <HAL_ADC_Init+0x1c>
          ADC_STATE_CLR_SET(hadc->State,
 80047b4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 80047b6:	6822      	ldr	r2, [r4, #0]
          ADC_STATE_CLR_SET(hadc->State,
 80047b8:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80047bc:	f023 0302 	bic.w	r3, r3, #2
 80047c0:	f043 0302 	orr.w	r3, r3, #2
 80047c4:	6423      	str	r3, [r4, #64]	@ 0x40
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 80047c6:	6893      	ldr	r3, [r2, #8]
 80047c8:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
 80047cc:	6093      	str	r3, [r2, #8]
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 80047ce:	6893      	ldr	r3, [r2, #8]
 80047d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80047d4:	6093      	str	r3, [r2, #8]
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80047d6:	4b55      	ldr	r3, [pc, #340]	@ (800492c <HAL_ADC_Init+0x224>)
 80047d8:	4a55      	ldr	r2, [pc, #340]	@ (8004930 <HAL_ADC_Init+0x228>)
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	fbb3 f3f2 	udiv	r3, r3, r2
 80047e0:	220a      	movs	r2, #10
 80047e2:	4353      	muls	r3, r2
            wait_loop_index--;
 80047e4:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 80047e6:	9b01      	ldr	r3, [sp, #4]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d09a      	beq.n	8004722 <HAL_ADC_Init+0x1a>
            wait_loop_index--;
 80047ec:	9b01      	ldr	r3, [sp, #4]
 80047ee:	3b01      	subs	r3, #1
 80047f0:	e7f8      	b.n	80047e4 <HAL_ADC_Init+0xdc>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80047f2:	4618      	mov	r0, r3
 80047f4:	e7a8      	b.n	8004748 <HAL_ADC_Init+0x40>
 80047f6:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80047fa:	494e      	ldr	r1, [pc, #312]	@ (8004934 <HAL_ADC_Init+0x22c>)
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80047fc:	689d      	ldr	r5, [r3, #8]
 80047fe:	f005 0503 	and.w	r5, r5, #3
 8004802:	2d01      	cmp	r5, #1
 8004804:	d102      	bne.n	800480c <HAL_ADC_Init+0x104>
 8004806:	681d      	ldr	r5, [r3, #0]
 8004808:	07ed      	lsls	r5, r5, #31
 800480a:	d40e      	bmi.n	800482a <HAL_ADC_Init+0x122>
 800480c:	b13a      	cbz	r2, 800481e <HAL_ADC_Init+0x116>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800480e:	6895      	ldr	r5, [r2, #8]
 8004810:	f005 0503 	and.w	r5, r5, #3
 8004814:	2d01      	cmp	r5, #1
 8004816:	d102      	bne.n	800481e <HAL_ADC_Init+0x116>
 8004818:	6812      	ldr	r2, [r2, #0]
 800481a:	07d2      	lsls	r2, r2, #31
 800481c:	d405      	bmi.n	800482a <HAL_ADC_Init+0x122>
      MODIFY_REG(tmpADC_Common->CCR       ,
 800481e:	688a      	ldr	r2, [r1, #8]
 8004820:	6865      	ldr	r5, [r4, #4]
 8004822:	f422 3240 	bic.w	r2, r2, #196608	@ 0x30000
 8004826:	432a      	orrs	r2, r5
 8004828:	608a      	str	r2, [r1, #8]
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 800482a:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 800482e:	430a      	orrs	r2, r1
 8004830:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004832:	7e65      	ldrb	r5, [r4, #25]
 8004834:	3901      	subs	r1, #1
 8004836:	bf18      	it	ne
 8004838:	2101      	movne	r1, #1
 800483a:	ea42 3245 	orr.w	r2, r2, r5, lsl #13
 800483e:	ea42 3201 	orr.w	r2, r2, r1, lsl #12
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004842:	f894 1020 	ldrb.w	r1, [r4, #32]
 8004846:	2901      	cmp	r1, #1
 8004848:	d107      	bne.n	800485a <HAL_ADC_Init+0x152>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800484a:	2d00      	cmp	r5, #0
 800484c:	d14f      	bne.n	80048ee <HAL_ADC_Init+0x1e6>
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 800484e:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8004850:	3901      	subs	r1, #1
 8004852:	ea42 4141 	orr.w	r1, r2, r1, lsl #17
 8004856:	f441 3280 	orr.w	r2, r1, #65536	@ 0x10000
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800485a:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 800485c:	2901      	cmp	r1, #1
 800485e:	d015      	beq.n	800488c <HAL_ADC_Init+0x184>
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8004860:	4d35      	ldr	r5, [pc, #212]	@ (8004938 <HAL_ADC_Init+0x230>)
 8004862:	42ab      	cmp	r3, r5
 8004864:	d003      	beq.n	800486e <HAL_ADC_Init+0x166>
 8004866:	f505 7580 	add.w	r5, r5, #256	@ 0x100
 800486a:	42ab      	cmp	r3, r5
 800486c:	d10a      	bne.n	8004884 <HAL_ADC_Init+0x17c>
 800486e:	f5b1 7f30 	cmp.w	r1, #704	@ 0x2c0
 8004872:	d047      	beq.n	8004904 <HAL_ADC_Init+0x1fc>
 8004874:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 8004878:	d047      	beq.n	800490a <HAL_ADC_Init+0x202>
 800487a:	f5b1 7fe0 	cmp.w	r1, #448	@ 0x1c0
 800487e:	bf08      	it	eq
 8004880:	f44f 7180 	moveq.w	r1, #256	@ 0x100
 8004884:	6ae5      	ldr	r5, [r4, #44]	@ 0x2c
 8004886:	4315      	orrs	r5, r2
 8004888:	ea45 0201 	orr.w	r2, r5, r1
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 800488c:	6899      	ldr	r1, [r3, #8]
 800488e:	f011 0f0c 	tst.w	r1, #12
 8004892:	d10c      	bne.n	80048ae <HAL_ADC_Init+0x1a6>
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8004894:	68d9      	ldr	r1, [r3, #12]
 8004896:	f421 4180 	bic.w	r1, r1, #16384	@ 0x4000
 800489a:	f021 0102 	bic.w	r1, r1, #2
 800489e:	60d9      	str	r1, [r3, #12]
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 80048a0:	f894 1030 	ldrb.w	r1, [r4, #48]	@ 0x30
 80048a4:	7e25      	ldrb	r5, [r4, #24]
 80048a6:	0049      	lsls	r1, r1, #1
 80048a8:	ea41 3185 	orr.w	r1, r1, r5, lsl #14
 80048ac:	430a      	orrs	r2, r1
    MODIFY_REG(hadc->Instance->CFGR,
 80048ae:	68dd      	ldr	r5, [r3, #12]
 80048b0:	4922      	ldr	r1, [pc, #136]	@ (800493c <HAL_ADC_Init+0x234>)
 80048b2:	4029      	ands	r1, r5
 80048b4:	4311      	orrs	r1, r2
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80048b6:	6922      	ldr	r2, [r4, #16]
    MODIFY_REG(hadc->Instance->CFGR,
 80048b8:	60d9      	str	r1, [r3, #12]
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80048ba:	2a01      	cmp	r2, #1
      MODIFY_REG(hadc->Instance->SQR1                     ,
 80048bc:	bf05      	ittet	eq
 80048be:	6b19      	ldreq	r1, [r3, #48]	@ 0x30
 80048c0:	69e2      	ldreq	r2, [r4, #28]
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80048c2:	6b1a      	ldrne	r2, [r3, #48]	@ 0x30
      MODIFY_REG(hadc->Instance->SQR1                     ,
 80048c4:	f102 32ff 	addeq.w	r2, r2, #4294967295
 80048c8:	bf06      	itte	eq
 80048ca:	f021 010f 	biceq.w	r1, r1, #15
 80048ce:	430a      	orreq	r2, r1
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80048d0:	f022 020f 	bicne.w	r2, r2, #15
 80048d4:	631a      	str	r2, [r3, #48]	@ 0x30
    ADC_CLEAR_ERRORCODE(hadc);
 80048d6:	2300      	movs	r3, #0
 80048d8:	6463      	str	r3, [r4, #68]	@ 0x44
    ADC_STATE_CLR_SET(hadc->State,
 80048da:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80048dc:	f023 0303 	bic.w	r3, r3, #3
 80048e0:	f043 0301 	orr.w	r3, r3, #1
 80048e4:	6423      	str	r3, [r4, #64]	@ 0x40
}
 80048e6:	b003      	add	sp, #12
 80048e8:	bd30      	pop	{r4, r5, pc}
 80048ea:	460a      	mov	r2, r1
 80048ec:	e74d      	b.n	800478a <HAL_ADC_Init+0x82>
        ADC_STATE_CLR_SET(hadc->State,
 80048ee:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 80048f0:	f021 0122 	bic.w	r1, r1, #34	@ 0x22
 80048f4:	f041 0120 	orr.w	r1, r1, #32
 80048f8:	6421      	str	r1, [r4, #64]	@ 0x40
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80048fa:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80048fc:	f041 0101 	orr.w	r1, r1, #1
 8004900:	6461      	str	r1, [r4, #68]	@ 0x44
 8004902:	e7aa      	b.n	800485a <HAL_ADC_Init+0x152>
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8004904:	f44f 71e0 	mov.w	r1, #448	@ 0x1c0
 8004908:	e7bc      	b.n	8004884 <HAL_ADC_Init+0x17c>
 800490a:	f44f 7130 	mov.w	r1, #704	@ 0x2c0
 800490e:	e7b9      	b.n	8004884 <HAL_ADC_Init+0x17c>
    ADC_STATE_CLR_SET(hadc->State,
 8004910:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004912:	f023 0312 	bic.w	r3, r3, #18
 8004916:	f043 0310 	orr.w	r3, r3, #16
 800491a:	6423      	str	r3, [r4, #64]	@ 0x40
    return HAL_ERROR;
 800491c:	2001      	movs	r0, #1
 800491e:	e7e2      	b.n	80048e6 <HAL_ADC_Init+0x1de>
 8004920:	50000100 	.word	0x50000100
 8004924:	50000500 	.word	0x50000500
 8004928:	50000700 	.word	0x50000700
 800492c:	2000000c 	.word	0x2000000c
 8004930:	000f4240 	.word	0x000f4240
 8004934:	50000300 	.word	0x50000300
 8004938:	50000400 	.word	0x50000400
 800493c:	fff0c007 	.word	0xfff0c007

08004940 <HAL_ADCEx_InjectedConvCpltCallback>:
}
 8004940:	4770      	bx	lr

08004942 <HAL_ADCEx_InjectedQueueOverflowCallback>:
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef* hadc)
 8004942:	4770      	bx	lr

08004944 <HAL_ADCEx_LevelOutOfWindow2Callback>:
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef* hadc)
 8004944:	4770      	bx	lr

08004946 <HAL_ADCEx_LevelOutOfWindow3Callback>:
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef* hadc)
 8004946:	4770      	bx	lr

08004948 <HAL_ADC_IRQHandler>:
  uint32_t tmp_isr = hadc->Instance->ISR;
 8004948:	6803      	ldr	r3, [r0, #0]
{
 800494a:	b570      	push	{r4, r5, r6, lr}
  uint32_t tmp_isr = hadc->Instance->ISR;
 800494c:	681d      	ldr	r5, [r3, #0]
  uint32_t tmp_ier = hadc->Instance->IER;
 800494e:	685e      	ldr	r6, [r3, #4]
  if( (((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8004950:	076a      	lsls	r2, r5, #29
{
 8004952:	4604      	mov	r4, r0
  if( (((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8004954:	d501      	bpl.n	800495a <HAL_ADC_IRQHandler+0x12>
 8004956:	0770      	lsls	r0, r6, #29
 8004958:	d403      	bmi.n	8004962 <HAL_ADC_IRQHandler+0x1a>
 800495a:	0729      	lsls	r1, r5, #28
 800495c:	d543      	bpl.n	80049e6 <HAL_ADC_IRQHandler+0x9e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))   )
 800495e:	0732      	lsls	r2, r6, #28
 8004960:	d541      	bpl.n	80049e6 <HAL_ADC_IRQHandler+0x9e>
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004962:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8004964:	06d0      	lsls	r0, r2, #27
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8004966:	bf5e      	ittt	pl
 8004968:	6c22      	ldrpl	r2, [r4, #64]	@ 0x40
 800496a:	f442 7200 	orrpl.w	r2, r2, #512	@ 0x200
 800496e:	6422      	strpl	r2, [r4, #64]	@ 0x40
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8004970:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004974:	d003      	beq.n	800497e <HAL_ADC_IRQHandler+0x36>
 8004976:	4a90      	ldr	r2, [pc, #576]	@ (8004bb8 <HAL_ADC_IRQHandler+0x270>)
 8004978:	4293      	cmp	r3, r2
 800497a:	f040 8105 	bne.w	8004b88 <HAL_ADC_IRQHandler+0x240>
 800497e:	4a8f      	ldr	r2, [pc, #572]	@ (8004bbc <HAL_ADC_IRQHandler+0x274>)
 8004980:	6891      	ldr	r1, [r2, #8]
 8004982:	06c9      	lsls	r1, r1, #27
 8004984:	d00c      	beq.n	80049a0 <HAL_ADC_IRQHandler+0x58>
 8004986:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800498a:	d003      	beq.n	8004994 <HAL_ADC_IRQHandler+0x4c>
 800498c:	498a      	ldr	r1, [pc, #552]	@ (8004bb8 <HAL_ADC_IRQHandler+0x270>)
 800498e:	428b      	cmp	r3, r1
 8004990:	f040 80ff 	bne.w	8004b92 <HAL_ADC_IRQHandler+0x24a>
 8004994:	6892      	ldr	r2, [r2, #8]
 8004996:	f002 021f 	and.w	r2, r2, #31
 800499a:	2a05      	cmp	r2, #5
 800499c:	f040 8114 	bne.w	8004bc8 <HAL_ADC_IRQHandler+0x280>
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 80049a0:	68da      	ldr	r2, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 80049a2:	68d9      	ldr	r1, [r3, #12]
       (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == RESET)  )
 80049a4:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 80049a8:	f401 6140 	and.w	r1, r1, #3072	@ 0xc00
 80049ac:	4311      	orrs	r1, r2
 80049ae:	d114      	bne.n	80049da <HAL_ADC_IRQHandler+0x92>
      if((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS)
 80049b0:	0729      	lsls	r1, r5, #28
 80049b2:	d512      	bpl.n	80049da <HAL_ADC_IRQHandler+0x92>
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80049b4:	689a      	ldr	r2, [r3, #8]
 80049b6:	0752      	lsls	r2, r2, #29
 80049b8:	f100 8122 	bmi.w	8004c00 <HAL_ADC_IRQHandler+0x2b8>
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80049bc:	685a      	ldr	r2, [r3, #4]
 80049be:	f022 020c 	bic.w	r2, r2, #12
 80049c2:	605a      	str	r2, [r3, #4]
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80049c4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80049c6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80049ca:	6423      	str	r3, [r4, #64]	@ 0x40
          if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80049cc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80049ce:	04d8      	lsls	r0, r3, #19
 80049d0:	d403      	bmi.n	80049da <HAL_ADC_IRQHandler+0x92>
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80049d2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80049d4:	f043 0301 	orr.w	r3, r3, #1
 80049d8:	6423      	str	r3, [r4, #64]	@ 0x40
      HAL_ADC_ConvCpltCallback(hadc);
 80049da:	4620      	mov	r0, r4
 80049dc:	f7ff fe5e 	bl	800469c <HAL_ADC_ConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 80049e0:	6823      	ldr	r3, [r4, #0]
 80049e2:	220c      	movs	r2, #12
 80049e4:	601a      	str	r2, [r3, #0]
  if( (((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80049e6:	06a9      	lsls	r1, r5, #26
 80049e8:	d501      	bpl.n	80049ee <HAL_ADC_IRQHandler+0xa6>
 80049ea:	06b2      	lsls	r2, r6, #26
 80049ec:	d403      	bmi.n	80049f6 <HAL_ADC_IRQHandler+0xae>
 80049ee:	066b      	lsls	r3, r5, #25
 80049f0:	d562      	bpl.n	8004ab8 <HAL_ADC_IRQHandler+0x170>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS))   )
 80049f2:	0670      	lsls	r0, r6, #25
 80049f4:	d560      	bpl.n	8004ab8 <HAL_ADC_IRQHandler+0x170>
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80049f6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80049f8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80049fc:	6423      	str	r3, [r4, #64]	@ 0x40
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 80049fe:	6823      	ldr	r3, [r4, #0]
 8004a00:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004a04:	d003      	beq.n	8004a0e <HAL_ADC_IRQHandler+0xc6>
 8004a06:	4a6c      	ldr	r2, [pc, #432]	@ (8004bb8 <HAL_ADC_IRQHandler+0x270>)
 8004a08:	4293      	cmp	r3, r2
 8004a0a:	f040 8102 	bne.w	8004c12 <HAL_ADC_IRQHandler+0x2ca>
 8004a0e:	4a6b      	ldr	r2, [pc, #428]	@ (8004bbc <HAL_ADC_IRQHandler+0x274>)
 8004a10:	6891      	ldr	r1, [r2, #8]
 8004a12:	06c9      	lsls	r1, r1, #27
 8004a14:	d00c      	beq.n	8004a30 <HAL_ADC_IRQHandler+0xe8>
 8004a16:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004a1a:	d003      	beq.n	8004a24 <HAL_ADC_IRQHandler+0xdc>
 8004a1c:	4966      	ldr	r1, [pc, #408]	@ (8004bb8 <HAL_ADC_IRQHandler+0x270>)
 8004a1e:	428b      	cmp	r3, r1
 8004a20:	f040 80fc 	bne.w	8004c1c <HAL_ADC_IRQHandler+0x2d4>
 8004a24:	6892      	ldr	r2, [r2, #8]
 8004a26:	f002 021f 	and.w	r2, r2, #31
 8004a2a:	2a05      	cmp	r2, #5
 8004a2c:	f040 8108 	bne.w	8004c40 <HAL_ADC_IRQHandler+0x2f8>
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8004a30:	68da      	ldr	r2, [r3, #12]
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc))
 8004a32:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8004a34:	f011 0fc0 	tst.w	r1, #192	@ 0xc0
 8004a38:	d138      	bne.n	8004aac <HAL_ADC_IRQHandler+0x164>
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 8004a3a:	0191      	lsls	r1, r2, #6
 8004a3c:	d506      	bpl.n	8004a4c <HAL_ADC_IRQHandler+0x104>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 8004a3e:	68d9      	ldr	r1, [r3, #12]
          (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )   )
 8004a40:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 8004a44:	f401 6140 	and.w	r1, r1, #3072	@ 0xc00
 8004a48:	4311      	orrs	r1, r2
 8004a4a:	d12f      	bne.n	8004aac <HAL_ADC_IRQHandler+0x164>
        if((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS)
 8004a4c:	0668      	lsls	r0, r5, #25
 8004a4e:	d52d      	bpl.n	8004aac <HAL_ADC_IRQHandler+0x164>
          if (ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc))
 8004a50:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004a54:	d003      	beq.n	8004a5e <HAL_ADC_IRQHandler+0x116>
 8004a56:	4a58      	ldr	r2, [pc, #352]	@ (8004bb8 <HAL_ADC_IRQHandler+0x270>)
 8004a58:	4293      	cmp	r3, r2
 8004a5a:	f040 810d 	bne.w	8004c78 <HAL_ADC_IRQHandler+0x330>
 8004a5e:	4a57      	ldr	r2, [pc, #348]	@ (8004bbc <HAL_ADC_IRQHandler+0x274>)
 8004a60:	6891      	ldr	r1, [r2, #8]
 8004a62:	06c9      	lsls	r1, r1, #27
 8004a64:	d00c      	beq.n	8004a80 <HAL_ADC_IRQHandler+0x138>
 8004a66:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004a6a:	d003      	beq.n	8004a74 <HAL_ADC_IRQHandler+0x12c>
 8004a6c:	4952      	ldr	r1, [pc, #328]	@ (8004bb8 <HAL_ADC_IRQHandler+0x270>)
 8004a6e:	428b      	cmp	r3, r1
 8004a70:	f040 8107 	bne.w	8004c82 <HAL_ADC_IRQHandler+0x33a>
 8004a74:	6892      	ldr	r2, [r2, #8]
 8004a76:	f002 021f 	and.w	r2, r2, #31
 8004a7a:	2a06      	cmp	r2, #6
 8004a7c:	f040 8113 	bne.w	8004ca6 <HAL_ADC_IRQHandler+0x35e>
            tmp_cfgr_jqm = READ_REG(hadc->Instance->CFGR); 
 8004a80:	68da      	ldr	r2, [r3, #12]
          if(READ_BIT(tmp_cfgr_jqm, ADC_CFGR_JQM) == RESET)
 8004a82:	0291      	lsls	r1, r2, #10
 8004a84:	d412      	bmi.n	8004aac <HAL_ADC_IRQHandler+0x164>
            if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 8004a86:	689a      	ldr	r2, [r3, #8]
 8004a88:	0712      	lsls	r2, r2, #28
 8004a8a:	f100 8128 	bmi.w	8004cde <HAL_ADC_IRQHandler+0x396>
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8004a8e:	685a      	ldr	r2, [r3, #4]
 8004a90:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004a94:	605a      	str	r2, [r3, #4]
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8004a96:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004a98:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004a9c:	6423      	str	r3, [r4, #64]	@ 0x40
              if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8004a9e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004aa0:	05d8      	lsls	r0, r3, #23
 8004aa2:	d403      	bmi.n	8004aac <HAL_ADC_IRQHandler+0x164>
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004aa4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004aa6:	f043 0301 	orr.w	r3, r3, #1
 8004aaa:	6423      	str	r3, [r4, #64]	@ 0x40
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8004aac:	4620      	mov	r0, r4
 8004aae:	f7ff ff47 	bl	8004940 <HAL_ADCEx_InjectedConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8004ab2:	6823      	ldr	r3, [r4, #0]
 8004ab4:	2260      	movs	r2, #96	@ 0x60
 8004ab6:	601a      	str	r2, [r3, #0]
  if(((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8004ab8:	0629      	lsls	r1, r5, #24
 8004aba:	d50b      	bpl.n	8004ad4 <HAL_ADC_IRQHandler+0x18c>
 8004abc:	0632      	lsls	r2, r6, #24
 8004abe:	d509      	bpl.n	8004ad4 <HAL_ADC_IRQHandler+0x18c>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8004ac0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004ac2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004ac6:	6423      	str	r3, [r4, #64]	@ 0x40
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8004ac8:	4620      	mov	r0, r4
 8004aca:	f7ff fde8 	bl	800469e <HAL_ADC_LevelOutOfWindowCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8004ace:	6823      	ldr	r3, [r4, #0]
 8004ad0:	2280      	movs	r2, #128	@ 0x80
 8004ad2:	601a      	str	r2, [r3, #0]
  if(((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8004ad4:	05eb      	lsls	r3, r5, #23
 8004ad6:	d50c      	bpl.n	8004af2 <HAL_ADC_IRQHandler+0x1aa>
 8004ad8:	05f0      	lsls	r0, r6, #23
 8004ada:	d50a      	bpl.n	8004af2 <HAL_ADC_IRQHandler+0x1aa>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8004adc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004ade:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004ae2:	6423      	str	r3, [r4, #64]	@ 0x40
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8004ae4:	4620      	mov	r0, r4
 8004ae6:	f7ff ff2d 	bl	8004944 <HAL_ADCEx_LevelOutOfWindow2Callback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8004aea:	6823      	ldr	r3, [r4, #0]
 8004aec:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004af0:	601a      	str	r2, [r3, #0]
  if(((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8004af2:	05a9      	lsls	r1, r5, #22
 8004af4:	d50c      	bpl.n	8004b10 <HAL_ADC_IRQHandler+0x1c8>
 8004af6:	05b2      	lsls	r2, r6, #22
 8004af8:	d50a      	bpl.n	8004b10 <HAL_ADC_IRQHandler+0x1c8>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8004afa:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004afc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004b00:	6423      	str	r3, [r4, #64]	@ 0x40
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8004b02:	4620      	mov	r0, r4
 8004b04:	f7ff ff1f 	bl	8004946 <HAL_ADCEx_LevelOutOfWindow3Callback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8004b08:	6823      	ldr	r3, [r4, #0]
 8004b0a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004b0e:	601a      	str	r2, [r3, #0]
  if(((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8004b10:	06eb      	lsls	r3, r5, #27
 8004b12:	d525      	bpl.n	8004b60 <HAL_ADC_IRQHandler+0x218>
 8004b14:	06f0      	lsls	r0, r6, #27
 8004b16:	d523      	bpl.n	8004b60 <HAL_ADC_IRQHandler+0x218>
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8004b18:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004b1a:	2b01      	cmp	r3, #1
 8004b1c:	d012      	beq.n	8004b44 <HAL_ADC_IRQHandler+0x1fc>
      tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004b1e:	6822      	ldr	r2, [r4, #0]
 8004b20:	f1b2 4fa0 	cmp.w	r2, #1342177280	@ 0x50000000
 8004b24:	f000 80e4 	beq.w	8004cf0 <HAL_ADC_IRQHandler+0x3a8>
 8004b28:	4823      	ldr	r0, [pc, #140]	@ (8004bb8 <HAL_ADC_IRQHandler+0x270>)
 8004b2a:	4b25      	ldr	r3, [pc, #148]	@ (8004bc0 <HAL_ADC_IRQHandler+0x278>)
 8004b2c:	4923      	ldr	r1, [pc, #140]	@ (8004bbc <HAL_ADC_IRQHandler+0x274>)
 8004b2e:	4282      	cmp	r2, r0
 8004b30:	bf08      	it	eq
 8004b32:	460b      	moveq	r3, r1
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8004b34:	6899      	ldr	r1, [r3, #8]
 8004b36:	06c9      	lsls	r1, r1, #27
 8004b38:	f040 80dc 	bne.w	8004cf4 <HAL_ADC_IRQHandler+0x3ac>
        if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8004b3c:	68d3      	ldr	r3, [r2, #12]
 8004b3e:	f013 0f01 	tst.w	r3, #1
        if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 8004b42:	d00a      	beq.n	8004b5a <HAL_ADC_IRQHandler+0x212>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8004b44:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004b46:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004b4a:	6423      	str	r3, [r4, #64]	@ 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8004b4c:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8004b4e:	f043 0302 	orr.w	r3, r3, #2
 8004b52:	6463      	str	r3, [r4, #68]	@ 0x44
      HAL_ADC_ErrorCallback(hadc);
 8004b54:	4620      	mov	r0, r4
 8004b56:	f7ff fda3 	bl	80046a0 <HAL_ADC_ErrorCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8004b5a:	6823      	ldr	r3, [r4, #0]
 8004b5c:	2210      	movs	r2, #16
 8004b5e:	601a      	str	r2, [r3, #0]
  if(((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8004b60:	056a      	lsls	r2, r5, #21
 8004b62:	d510      	bpl.n	8004b86 <HAL_ADC_IRQHandler+0x23e>
 8004b64:	0573      	lsls	r3, r6, #21
 8004b66:	d50e      	bpl.n	8004b86 <HAL_ADC_IRQHandler+0x23e>
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8004b68:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004b6a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004b6e:	6423      	str	r3, [r4, #64]	@ 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8004b70:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8004b72:	f043 0308 	orr.w	r3, r3, #8
 8004b76:	6463      	str	r3, [r4, #68]	@ 0x44
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8004b78:	6823      	ldr	r3, [r4, #0]
 8004b7a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004b7e:	601a      	str	r2, [r3, #0]
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8004b80:	4620      	mov	r0, r4
 8004b82:	f7ff fede 	bl	8004942 <HAL_ADCEx_InjectedQueueOverflowCallback>
}
 8004b86:	bd70      	pop	{r4, r5, r6, pc}
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8004b88:	4a0d      	ldr	r2, [pc, #52]	@ (8004bc0 <HAL_ADC_IRQHandler+0x278>)
 8004b8a:	6892      	ldr	r2, [r2, #8]
 8004b8c:	06d0      	lsls	r0, r2, #27
 8004b8e:	f43f af07 	beq.w	80049a0 <HAL_ADC_IRQHandler+0x58>
 8004b92:	4a0b      	ldr	r2, [pc, #44]	@ (8004bc0 <HAL_ADC_IRQHandler+0x278>)
 8004b94:	6892      	ldr	r2, [r2, #8]
 8004b96:	f002 021f 	and.w	r2, r2, #31
 8004b9a:	2a05      	cmp	r2, #5
 8004b9c:	f43f af00 	beq.w	80049a0 <HAL_ADC_IRQHandler+0x58>
 8004ba0:	4a07      	ldr	r2, [pc, #28]	@ (8004bc0 <HAL_ADC_IRQHandler+0x278>)
 8004ba2:	6892      	ldr	r2, [r2, #8]
 8004ba4:	f002 021f 	and.w	r2, r2, #31
 8004ba8:	2a09      	cmp	r2, #9
 8004baa:	f43f aef9 	beq.w	80049a0 <HAL_ADC_IRQHandler+0x58>
 8004bae:	4a05      	ldr	r2, [pc, #20]	@ (8004bc4 <HAL_ADC_IRQHandler+0x27c>)
 8004bb0:	4293      	cmp	r3, r2
 8004bb2:	d123      	bne.n	8004bfc <HAL_ADC_IRQHandler+0x2b4>
 8004bb4:	e6f4      	b.n	80049a0 <HAL_ADC_IRQHandler+0x58>
 8004bb6:	bf00      	nop
 8004bb8:	50000100 	.word	0x50000100
 8004bbc:	50000300 	.word	0x50000300
 8004bc0:	50000700 	.word	0x50000700
 8004bc4:	50000400 	.word	0x50000400
 8004bc8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004bcc:	d002      	beq.n	8004bd4 <HAL_ADC_IRQHandler+0x28c>
 8004bce:	4a4b      	ldr	r2, [pc, #300]	@ (8004cfc <HAL_ADC_IRQHandler+0x3b4>)
 8004bd0:	4293      	cmp	r3, r2
 8004bd2:	d1e5      	bne.n	8004ba0 <HAL_ADC_IRQHandler+0x258>
 8004bd4:	4a4a      	ldr	r2, [pc, #296]	@ (8004d00 <HAL_ADC_IRQHandler+0x3b8>)
 8004bd6:	6892      	ldr	r2, [r2, #8]
 8004bd8:	f002 021f 	and.w	r2, r2, #31
 8004bdc:	2a09      	cmp	r2, #9
 8004bde:	f43f aedf 	beq.w	80049a0 <HAL_ADC_IRQHandler+0x58>
 8004be2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004be6:	f43f aedb 	beq.w	80049a0 <HAL_ADC_IRQHandler+0x58>
 8004bea:	4a46      	ldr	r2, [pc, #280]	@ (8004d04 <HAL_ADC_IRQHandler+0x3bc>)
 8004bec:	4293      	cmp	r3, r2
 8004bee:	f43f aed7 	beq.w	80049a0 <HAL_ADC_IRQHandler+0x58>
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8004bf2:	4942      	ldr	r1, [pc, #264]	@ (8004cfc <HAL_ADC_IRQHandler+0x3b4>)
 8004bf4:	428b      	cmp	r3, r1
 8004bf6:	bf08      	it	eq
 8004bf8:	f04f 42a0 	moveq.w	r2, #1342177280	@ 0x50000000
 8004bfc:	68d2      	ldr	r2, [r2, #12]
 8004bfe:	e6d0      	b.n	80049a2 <HAL_ADC_IRQHandler+0x5a>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004c00:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004c02:	f043 0310 	orr.w	r3, r3, #16
 8004c06:	6423      	str	r3, [r4, #64]	@ 0x40
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004c08:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8004c0a:	f043 0301 	orr.w	r3, r3, #1
 8004c0e:	6463      	str	r3, [r4, #68]	@ 0x44
 8004c10:	e6e3      	b.n	80049da <HAL_ADC_IRQHandler+0x92>
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8004c12:	4a3d      	ldr	r2, [pc, #244]	@ (8004d08 <HAL_ADC_IRQHandler+0x3c0>)
 8004c14:	6892      	ldr	r2, [r2, #8]
 8004c16:	06d0      	lsls	r0, r2, #27
 8004c18:	f43f af0a 	beq.w	8004a30 <HAL_ADC_IRQHandler+0xe8>
 8004c1c:	4a3a      	ldr	r2, [pc, #232]	@ (8004d08 <HAL_ADC_IRQHandler+0x3c0>)
 8004c1e:	6892      	ldr	r2, [r2, #8]
 8004c20:	f002 021f 	and.w	r2, r2, #31
 8004c24:	2a05      	cmp	r2, #5
 8004c26:	f43f af03 	beq.w	8004a30 <HAL_ADC_IRQHandler+0xe8>
 8004c2a:	4a37      	ldr	r2, [pc, #220]	@ (8004d08 <HAL_ADC_IRQHandler+0x3c0>)
 8004c2c:	6892      	ldr	r2, [r2, #8]
 8004c2e:	f002 021f 	and.w	r2, r2, #31
 8004c32:	2a09      	cmp	r2, #9
 8004c34:	f43f aefc 	beq.w	8004a30 <HAL_ADC_IRQHandler+0xe8>
 8004c38:	4a32      	ldr	r2, [pc, #200]	@ (8004d04 <HAL_ADC_IRQHandler+0x3bc>)
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	d11a      	bne.n	8004c74 <HAL_ADC_IRQHandler+0x32c>
 8004c3e:	e6f7      	b.n	8004a30 <HAL_ADC_IRQHandler+0xe8>
 8004c40:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004c44:	d002      	beq.n	8004c4c <HAL_ADC_IRQHandler+0x304>
 8004c46:	4a2d      	ldr	r2, [pc, #180]	@ (8004cfc <HAL_ADC_IRQHandler+0x3b4>)
 8004c48:	4293      	cmp	r3, r2
 8004c4a:	d1ee      	bne.n	8004c2a <HAL_ADC_IRQHandler+0x2e2>
 8004c4c:	4a2c      	ldr	r2, [pc, #176]	@ (8004d00 <HAL_ADC_IRQHandler+0x3b8>)
 8004c4e:	6892      	ldr	r2, [r2, #8]
 8004c50:	f002 021f 	and.w	r2, r2, #31
 8004c54:	2a09      	cmp	r2, #9
 8004c56:	f43f aeeb 	beq.w	8004a30 <HAL_ADC_IRQHandler+0xe8>
 8004c5a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004c5e:	f43f aee7 	beq.w	8004a30 <HAL_ADC_IRQHandler+0xe8>
 8004c62:	4a28      	ldr	r2, [pc, #160]	@ (8004d04 <HAL_ADC_IRQHandler+0x3bc>)
 8004c64:	4293      	cmp	r3, r2
 8004c66:	f43f aee3 	beq.w	8004a30 <HAL_ADC_IRQHandler+0xe8>
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8004c6a:	4924      	ldr	r1, [pc, #144]	@ (8004cfc <HAL_ADC_IRQHandler+0x3b4>)
 8004c6c:	428b      	cmp	r3, r1
 8004c6e:	bf08      	it	eq
 8004c70:	f04f 42a0 	moveq.w	r2, #1342177280	@ 0x50000000
 8004c74:	68d2      	ldr	r2, [r2, #12]
 8004c76:	e6dc      	b.n	8004a32 <HAL_ADC_IRQHandler+0xea>
          if (ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc))
 8004c78:	4a23      	ldr	r2, [pc, #140]	@ (8004d08 <HAL_ADC_IRQHandler+0x3c0>)
 8004c7a:	6892      	ldr	r2, [r2, #8]
 8004c7c:	06d0      	lsls	r0, r2, #27
 8004c7e:	f43f aeff 	beq.w	8004a80 <HAL_ADC_IRQHandler+0x138>
 8004c82:	4a21      	ldr	r2, [pc, #132]	@ (8004d08 <HAL_ADC_IRQHandler+0x3c0>)
 8004c84:	6892      	ldr	r2, [r2, #8]
 8004c86:	f002 021f 	and.w	r2, r2, #31
 8004c8a:	2a06      	cmp	r2, #6
 8004c8c:	f43f aef8 	beq.w	8004a80 <HAL_ADC_IRQHandler+0x138>
 8004c90:	4a1d      	ldr	r2, [pc, #116]	@ (8004d08 <HAL_ADC_IRQHandler+0x3c0>)
 8004c92:	6892      	ldr	r2, [r2, #8]
 8004c94:	f002 021f 	and.w	r2, r2, #31
 8004c98:	2a07      	cmp	r2, #7
 8004c9a:	f43f aef1 	beq.w	8004a80 <HAL_ADC_IRQHandler+0x138>
 8004c9e:	4a19      	ldr	r2, [pc, #100]	@ (8004d04 <HAL_ADC_IRQHandler+0x3bc>)
 8004ca0:	4293      	cmp	r3, r2
 8004ca2:	d11a      	bne.n	8004cda <HAL_ADC_IRQHandler+0x392>
 8004ca4:	e6ec      	b.n	8004a80 <HAL_ADC_IRQHandler+0x138>
 8004ca6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004caa:	d002      	beq.n	8004cb2 <HAL_ADC_IRQHandler+0x36a>
 8004cac:	4a13      	ldr	r2, [pc, #76]	@ (8004cfc <HAL_ADC_IRQHandler+0x3b4>)
 8004cae:	4293      	cmp	r3, r2
 8004cb0:	d1ee      	bne.n	8004c90 <HAL_ADC_IRQHandler+0x348>
 8004cb2:	4a13      	ldr	r2, [pc, #76]	@ (8004d00 <HAL_ADC_IRQHandler+0x3b8>)
 8004cb4:	6892      	ldr	r2, [r2, #8]
 8004cb6:	f002 021f 	and.w	r2, r2, #31
 8004cba:	2a07      	cmp	r2, #7
 8004cbc:	f43f aee0 	beq.w	8004a80 <HAL_ADC_IRQHandler+0x138>
 8004cc0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004cc4:	f43f aedc 	beq.w	8004a80 <HAL_ADC_IRQHandler+0x138>
 8004cc8:	4a0e      	ldr	r2, [pc, #56]	@ (8004d04 <HAL_ADC_IRQHandler+0x3bc>)
 8004cca:	4293      	cmp	r3, r2
 8004ccc:	f43f aed8 	beq.w	8004a80 <HAL_ADC_IRQHandler+0x138>
            tmp_cfgr_jqm = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8004cd0:	490a      	ldr	r1, [pc, #40]	@ (8004cfc <HAL_ADC_IRQHandler+0x3b4>)
 8004cd2:	428b      	cmp	r3, r1
 8004cd4:	bf08      	it	eq
 8004cd6:	f04f 42a0 	moveq.w	r2, #1342177280	@ 0x50000000
 8004cda:	68d2      	ldr	r2, [r2, #12]
 8004cdc:	e6d1      	b.n	8004a82 <HAL_ADC_IRQHandler+0x13a>
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004cde:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004ce0:	f043 0310 	orr.w	r3, r3, #16
 8004ce4:	6423      	str	r3, [r4, #64]	@ 0x40
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004ce6:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8004ce8:	f043 0301 	orr.w	r3, r3, #1
 8004cec:	6463      	str	r3, [r4, #68]	@ 0x44
 8004cee:	e6dd      	b.n	8004aac <HAL_ADC_IRQHandler+0x164>
      tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004cf0:	4b03      	ldr	r3, [pc, #12]	@ (8004d00 <HAL_ADC_IRQHandler+0x3b8>)
 8004cf2:	e71f      	b.n	8004b34 <HAL_ADC_IRQHandler+0x1ec>
        if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 8004cf4:	689b      	ldr	r3, [r3, #8]
 8004cf6:	f413 4f40 	tst.w	r3, #49152	@ 0xc000
 8004cfa:	e722      	b.n	8004b42 <HAL_ADC_IRQHandler+0x1fa>
 8004cfc:	50000100 	.word	0x50000100
 8004d00:	50000300 	.word	0x50000300
 8004d04:	50000400 	.word	0x50000400
 8004d08:	50000700 	.word	0x50000700

08004d0c <HAL_ADC_ConfigChannel>:
{
 8004d0c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004d0e:	4605      	mov	r5, r0
  __IO uint32_t wait_loop_index = 0U;
 8004d10:	2300      	movs	r3, #0
 8004d12:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8004d14:	f895 303c 	ldrb.w	r3, [r5, #60]	@ 0x3c
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8004d18:	68c8      	ldr	r0, [r1, #12]
  __HAL_LOCK(hadc);
 8004d1a:	2b01      	cmp	r3, #1
 8004d1c:	f000 816a 	beq.w	8004ff4 <HAL_ADC_ConfigChannel+0x2e8>
 8004d20:	2301      	movs	r3, #1
 8004d22:	f885 303c 	strb.w	r3, [r5, #60]	@ 0x3c
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8004d26:	682b      	ldr	r3, [r5, #0]
 8004d28:	689a      	ldr	r2, [r3, #8]
 8004d2a:	0757      	lsls	r7, r2, #29
 8004d2c:	f100 815c 	bmi.w	8004fe8 <HAL_ADC_ConfigChannel+0x2dc>
    if (sConfig->Rank < 5U)
 8004d30:	684e      	ldr	r6, [r1, #4]
      MODIFY_REG(hadc->Instance->SQR1,
 8004d32:	680c      	ldr	r4, [r1, #0]
 8004d34:	2206      	movs	r2, #6
    if (sConfig->Rank < 5U)
 8004d36:	2e04      	cmp	r6, #4
      MODIFY_REG(hadc->Instance->SQR1,
 8004d38:	fb06 f202 	mul.w	r2, r6, r2
    if (sConfig->Rank < 5U)
 8004d3c:	d82c      	bhi.n	8004d98 <HAL_ADC_ConfigChannel+0x8c>
      MODIFY_REG(hadc->Instance->SQR1,
 8004d3e:	6b1e      	ldr	r6, [r3, #48]	@ 0x30
 8004d40:	271f      	movs	r7, #31
 8004d42:	4097      	lsls	r7, r2
 8004d44:	ea26 0607 	bic.w	r6, r6, r7
 8004d48:	fa04 f202 	lsl.w	r2, r4, r2
 8004d4c:	4332      	orrs	r2, r6
 8004d4e:	631a      	str	r2, [r3, #48]	@ 0x30
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8004d50:	689a      	ldr	r2, [r3, #8]
 8004d52:	f012 0f0c 	tst.w	r2, #12
 8004d56:	d158      	bne.n	8004e0a <HAL_ADC_ConfigChannel+0xfe>
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8004d58:	2c09      	cmp	r4, #9
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8004d5a:	f8d1 c008 	ldr.w	ip, [r1, #8]
 8004d5e:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 8004d62:	f04f 0607 	mov.w	r6, #7
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8004d66:	d93c      	bls.n	8004de2 <HAL_ADC_ConfigChannel+0xd6>
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8004d68:	699f      	ldr	r7, [r3, #24]
 8004d6a:	3a1e      	subs	r2, #30
 8004d6c:	4096      	lsls	r6, r2
 8004d6e:	ea27 0606 	bic.w	r6, r7, r6
 8004d72:	fa0c f202 	lsl.w	r2, ip, r2
 8004d76:	4332      	orrs	r2, r6
 8004d78:	619a      	str	r2, [r3, #24]
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8004d7a:	68da      	ldr	r2, [r3, #12]
 8004d7c:	694e      	ldr	r6, [r1, #20]
 8004d7e:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 8004d82:	0052      	lsls	r2, r2, #1
 8004d84:	4096      	lsls	r6, r2
    switch (sConfig->OffsetNumber)
 8004d86:	690a      	ldr	r2, [r1, #16]
 8004d88:	3a01      	subs	r2, #1
      MODIFY_REG(hadc->Instance->OFR1               ,
 8004d8a:	06a7      	lsls	r7, r4, #26
    switch (sConfig->OffsetNumber)
 8004d8c:	2a03      	cmp	r2, #3
 8004d8e:	d86b      	bhi.n	8004e68 <HAL_ADC_ConfigChannel+0x15c>
 8004d90:	e8df f002 	tbb	[pc, r2]
 8004d94:	5f544931 	.word	0x5f544931
    else if (sConfig->Rank < 10U)
 8004d98:	2e09      	cmp	r6, #9
 8004d9a:	d80a      	bhi.n	8004db2 <HAL_ADC_ConfigChannel+0xa6>
      MODIFY_REG(hadc->Instance->SQR2,
 8004d9c:	6b5e      	ldr	r6, [r3, #52]	@ 0x34
 8004d9e:	3a1e      	subs	r2, #30
 8004da0:	271f      	movs	r7, #31
 8004da2:	4097      	lsls	r7, r2
 8004da4:	ea26 0607 	bic.w	r6, r6, r7
 8004da8:	fa04 f202 	lsl.w	r2, r4, r2
 8004dac:	4332      	orrs	r2, r6
 8004dae:	635a      	str	r2, [r3, #52]	@ 0x34
 8004db0:	e7ce      	b.n	8004d50 <HAL_ADC_ConfigChannel+0x44>
    else if (sConfig->Rank < 15U)
 8004db2:	2e0e      	cmp	r6, #14
 8004db4:	f04f 061f 	mov.w	r6, #31
 8004db8:	d809      	bhi.n	8004dce <HAL_ADC_ConfigChannel+0xc2>
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8004dba:	6b9f      	ldr	r7, [r3, #56]	@ 0x38
 8004dbc:	3a3c      	subs	r2, #60	@ 0x3c
 8004dbe:	4096      	lsls	r6, r2
 8004dc0:	ea27 0606 	bic.w	r6, r7, r6
 8004dc4:	fa04 f202 	lsl.w	r2, r4, r2
 8004dc8:	4332      	orrs	r2, r6
 8004dca:	639a      	str	r2, [r3, #56]	@ 0x38
 8004dcc:	e7c0      	b.n	8004d50 <HAL_ADC_ConfigChannel+0x44>
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8004dce:	6bdf      	ldr	r7, [r3, #60]	@ 0x3c
 8004dd0:	3a5a      	subs	r2, #90	@ 0x5a
 8004dd2:	4096      	lsls	r6, r2
 8004dd4:	ea27 0606 	bic.w	r6, r7, r6
 8004dd8:	fa04 f202 	lsl.w	r2, r4, r2
 8004ddc:	4332      	orrs	r2, r6
 8004dde:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004de0:	e7b6      	b.n	8004d50 <HAL_ADC_ConfigChannel+0x44>
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8004de2:	695f      	ldr	r7, [r3, #20]
 8004de4:	4096      	lsls	r6, r2
 8004de6:	ea27 0606 	bic.w	r6, r7, r6
 8004dea:	fa0c fc02 	lsl.w	ip, ip, r2
 8004dee:	ea46 060c 	orr.w	r6, r6, ip
 8004df2:	615e      	str	r6, [r3, #20]
 8004df4:	e7c1      	b.n	8004d7a <HAL_ADC_ConfigChannel+0x6e>
      MODIFY_REG(hadc->Instance->OFR1               ,
 8004df6:	f8d3 c060 	ldr.w	ip, [r3, #96]	@ 0x60
 8004dfa:	4a7f      	ldr	r2, [pc, #508]	@ (8004ff8 <HAL_ADC_ConfigChannel+0x2ec>)
 8004dfc:	ea0c 0202 	and.w	r2, ip, r2
 8004e00:	433a      	orrs	r2, r7
 8004e02:	4332      	orrs	r2, r6
 8004e04:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8004e08:	661a      	str	r2, [r3, #96]	@ 0x60
  if (ADC_IS_ENABLE(hadc) == RESET)
 8004e0a:	689a      	ldr	r2, [r3, #8]
 8004e0c:	f002 0203 	and.w	r2, r2, #3
 8004e10:	2a01      	cmp	r2, #1
 8004e12:	d14d      	bne.n	8004eb0 <HAL_ADC_ConfigChannel+0x1a4>
 8004e14:	681a      	ldr	r2, [r3, #0]
 8004e16:	07d6      	lsls	r6, r2, #31
 8004e18:	d54a      	bpl.n	8004eb0 <HAL_ADC_ConfigChannel+0x1a4>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004e1a:	2000      	movs	r0, #0
  __HAL_UNLOCK(hadc);
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	f885 303c 	strb.w	r3, [r5, #60]	@ 0x3c
}
 8004e22:	b003      	add	sp, #12
 8004e24:	bdf0      	pop	{r4, r5, r6, r7, pc}
      MODIFY_REG(hadc->Instance->OFR2               ,
 8004e26:	f8d3 c064 	ldr.w	ip, [r3, #100]	@ 0x64
 8004e2a:	4a73      	ldr	r2, [pc, #460]	@ (8004ff8 <HAL_ADC_ConfigChannel+0x2ec>)
 8004e2c:	ea0c 0202 	and.w	r2, ip, r2
 8004e30:	433a      	orrs	r2, r7
 8004e32:	4332      	orrs	r2, r6
 8004e34:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8004e38:	665a      	str	r2, [r3, #100]	@ 0x64
      break;
 8004e3a:	e7e6      	b.n	8004e0a <HAL_ADC_ConfigChannel+0xfe>
      MODIFY_REG(hadc->Instance->OFR3               ,
 8004e3c:	f8d3 c068 	ldr.w	ip, [r3, #104]	@ 0x68
 8004e40:	4a6d      	ldr	r2, [pc, #436]	@ (8004ff8 <HAL_ADC_ConfigChannel+0x2ec>)
 8004e42:	ea0c 0202 	and.w	r2, ip, r2
 8004e46:	433a      	orrs	r2, r7
 8004e48:	4332      	orrs	r2, r6
 8004e4a:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8004e4e:	669a      	str	r2, [r3, #104]	@ 0x68
      break;
 8004e50:	e7db      	b.n	8004e0a <HAL_ADC_ConfigChannel+0xfe>
      MODIFY_REG(hadc->Instance->OFR4               ,
 8004e52:	f8d3 c06c 	ldr.w	ip, [r3, #108]	@ 0x6c
 8004e56:	4a68      	ldr	r2, [pc, #416]	@ (8004ff8 <HAL_ADC_ConfigChannel+0x2ec>)
 8004e58:	ea0c 0202 	and.w	r2, ip, r2
 8004e5c:	433a      	orrs	r2, r7
 8004e5e:	4332      	orrs	r2, r6
 8004e60:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8004e64:	66da      	str	r2, [r3, #108]	@ 0x6c
 8004e66:	e7d0      	b.n	8004e0a <HAL_ADC_ConfigChannel+0xfe>
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004e68:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8004e6a:	f002 42f8 	and.w	r2, r2, #2080374784	@ 0x7c000000
 8004e6e:	42ba      	cmp	r2, r7
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8004e70:	bf02      	ittt	eq
 8004e72:	6e1a      	ldreq	r2, [r3, #96]	@ 0x60
 8004e74:	f022 4200 	biceq.w	r2, r2, #2147483648	@ 0x80000000
 8004e78:	661a      	streq	r2, [r3, #96]	@ 0x60
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004e7a:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8004e7c:	f002 42f8 	and.w	r2, r2, #2080374784	@ 0x7c000000
 8004e80:	42ba      	cmp	r2, r7
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8004e82:	bf02      	ittt	eq
 8004e84:	6e5a      	ldreq	r2, [r3, #100]	@ 0x64
 8004e86:	f022 4200 	biceq.w	r2, r2, #2147483648	@ 0x80000000
 8004e8a:	665a      	streq	r2, [r3, #100]	@ 0x64
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004e8c:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8004e8e:	f002 42f8 	and.w	r2, r2, #2080374784	@ 0x7c000000
 8004e92:	42ba      	cmp	r2, r7
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8004e94:	bf02      	ittt	eq
 8004e96:	6e9a      	ldreq	r2, [r3, #104]	@ 0x68
 8004e98:	f022 4200 	biceq.w	r2, r2, #2147483648	@ 0x80000000
 8004e9c:	669a      	streq	r2, [r3, #104]	@ 0x68
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004e9e:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8004ea0:	f002 42f8 	and.w	r2, r2, #2080374784	@ 0x7c000000
 8004ea4:	42ba      	cmp	r2, r7
 8004ea6:	d1b0      	bne.n	8004e0a <HAL_ADC_ConfigChannel+0xfe>
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8004ea8:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8004eaa:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8004eae:	e7d9      	b.n	8004e64 <HAL_ADC_ConfigChannel+0x158>
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8004eb0:	2201      	movs	r2, #1
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8004eb2:	2801      	cmp	r0, #1
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8004eb4:	fa02 f204 	lsl.w	r2, r2, r4
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8004eb8:	d047      	beq.n	8004f4a <HAL_ADC_ConfigChannel+0x23e>
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8004eba:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 8004ebe:	ea21 0202 	bic.w	r2, r1, r2
 8004ec2:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004ec6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004eca:	d164      	bne.n	8004f96 <HAL_ADC_ConfigChannel+0x28a>
 8004ecc:	494b      	ldr	r1, [pc, #300]	@ (8004ffc <HAL_ADC_ConfigChannel+0x2f0>)
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8004ece:	2c10      	cmp	r4, #16
 8004ed0:	d166      	bne.n	8004fa0 <HAL_ADC_ConfigChannel+0x294>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8004ed2:	688a      	ldr	r2, [r1, #8]
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8004ed4:	f412 0f00 	tst.w	r2, #8388608	@ 0x800000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8004ed8:	d19f      	bne.n	8004e1a <HAL_ADC_ConfigChannel+0x10e>
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8004eda:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004ede:	4a48      	ldr	r2, [pc, #288]	@ (8005000 <HAL_ADC_ConfigChannel+0x2f4>)
 8004ee0:	d009      	beq.n	8004ef6 <HAL_ADC_ConfigChannel+0x1ea>
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	d069      	beq.n	8004fba <HAL_ADC_ConfigChannel+0x2ae>
 8004ee6:	f502 7240 	add.w	r2, r2, #768	@ 0x300
 8004eea:	4293      	cmp	r3, r2
 8004eec:	4845      	ldr	r0, [pc, #276]	@ (8005004 <HAL_ADC_ConfigChannel+0x2f8>)
 8004eee:	d067      	beq.n	8004fc0 <HAL_ADC_ConfigChannel+0x2b4>
 8004ef0:	4283      	cmp	r3, r0
 8004ef2:	bf18      	it	ne
 8004ef4:	2200      	movne	r2, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8004ef6:	6898      	ldr	r0, [r3, #8]
 8004ef8:	f000 0003 	and.w	r0, r0, #3
 8004efc:	2801      	cmp	r0, #1
 8004efe:	d102      	bne.n	8004f06 <HAL_ADC_ConfigChannel+0x1fa>
 8004f00:	6818      	ldr	r0, [r3, #0]
 8004f02:	07c0      	lsls	r0, r0, #31
 8004f04:	d470      	bmi.n	8004fe8 <HAL_ADC_ConfigChannel+0x2dc>
 8004f06:	b13a      	cbz	r2, 8004f18 <HAL_ADC_ConfigChannel+0x20c>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8004f08:	6890      	ldr	r0, [r2, #8]
 8004f0a:	f000 0003 	and.w	r0, r0, #3
 8004f0e:	2801      	cmp	r0, #1
 8004f10:	d102      	bne.n	8004f18 <HAL_ADC_ConfigChannel+0x20c>
 8004f12:	6812      	ldr	r2, [r2, #0]
 8004f14:	07d2      	lsls	r2, r2, #31
 8004f16:	d467      	bmi.n	8004fe8 <HAL_ADC_ConfigChannel+0x2dc>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8004f18:	2c10      	cmp	r4, #16
 8004f1a:	d153      	bne.n	8004fc4 <HAL_ADC_ConfigChannel+0x2b8>
 8004f1c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004f20:	f47f af7b 	bne.w	8004e1a <HAL_ADC_ConfigChannel+0x10e>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8004f24:	688b      	ldr	r3, [r1, #8]
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004f26:	4a38      	ldr	r2, [pc, #224]	@ (8005008 <HAL_ADC_ConfigChannel+0x2fc>)
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8004f28:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004f2c:	608b      	str	r3, [r1, #8]
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004f2e:	4b37      	ldr	r3, [pc, #220]	@ (800500c <HAL_ADC_ConfigChannel+0x300>)
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	fbb3 f3f2 	udiv	r3, r3, r2
 8004f36:	220a      	movs	r2, #10
 8004f38:	4353      	muls	r3, r2
            wait_loop_index--;
 8004f3a:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 8004f3c:	9b01      	ldr	r3, [sp, #4]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	f43f af6b 	beq.w	8004e1a <HAL_ADC_ConfigChannel+0x10e>
            wait_loop_index--;
 8004f44:	9b01      	ldr	r3, [sp, #4]
 8004f46:	3b01      	subs	r3, #1
 8004f48:	e7f7      	b.n	8004f3a <HAL_ADC_ConfigChannel+0x22e>
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8004f4a:	f8d3 00b0 	ldr.w	r0, [r3, #176]	@ 0xb0
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8004f4e:	2c09      	cmp	r4, #9
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8004f50:	ea42 0200 	orr.w	r2, r2, r0
 8004f54:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8004f58:	6888      	ldr	r0, [r1, #8]
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8004f5a:	d90c      	bls.n	8004f76 <HAL_ADC_ConfigChannel+0x26a>
        MODIFY_REG(hadc->Instance->SMPR2,
 8004f5c:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 8004f60:	6999      	ldr	r1, [r3, #24]
 8004f62:	3a1b      	subs	r2, #27
 8004f64:	2607      	movs	r6, #7
 8004f66:	4096      	lsls	r6, r2
 8004f68:	ea21 0106 	bic.w	r1, r1, r6
 8004f6c:	fa00 f202 	lsl.w	r2, r0, r2
 8004f70:	430a      	orrs	r2, r1
 8004f72:	619a      	str	r2, [r3, #24]
 8004f74:	e7a7      	b.n	8004ec6 <HAL_ADC_ConfigChannel+0x1ba>
        MODIFY_REG(hadc->Instance->SMPR1,
 8004f76:	1c61      	adds	r1, r4, #1
 8004f78:	695a      	ldr	r2, [r3, #20]
 8004f7a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8004f7e:	2607      	movs	r6, #7
 8004f80:	408e      	lsls	r6, r1
 8004f82:	ea22 0206 	bic.w	r2, r2, r6
 8004f86:	fa00 f101 	lsl.w	r1, r0, r1
 8004f8a:	430a      	orrs	r2, r1
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004f8c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
        MODIFY_REG(hadc->Instance->SMPR1,
 8004f90:	615a      	str	r2, [r3, #20]
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004f92:	f43f af42 	beq.w	8004e1a <HAL_ADC_ConfigChannel+0x10e>
 8004f96:	4a1a      	ldr	r2, [pc, #104]	@ (8005000 <HAL_ADC_ConfigChannel+0x2f4>)
 8004f98:	4293      	cmp	r3, r2
 8004f9a:	d097      	beq.n	8004ecc <HAL_ADC_ConfigChannel+0x1c0>
 8004f9c:	491c      	ldr	r1, [pc, #112]	@ (8005010 <HAL_ADC_ConfigChannel+0x304>)
 8004f9e:	e796      	b.n	8004ece <HAL_ADC_ConfigChannel+0x1c2>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8004fa0:	2c11      	cmp	r4, #17
 8004fa2:	d103      	bne.n	8004fac <HAL_ADC_ConfigChannel+0x2a0>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8004fa4:	688a      	ldr	r2, [r1, #8]
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8004fa6:	f012 7f80 	tst.w	r2, #16777216	@ 0x1000000
 8004faa:	e795      	b.n	8004ed8 <HAL_ADC_ConfigChannel+0x1cc>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8004fac:	2c12      	cmp	r4, #18
 8004fae:	f47f af34 	bne.w	8004e1a <HAL_ADC_ConfigChannel+0x10e>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8004fb2:	688a      	ldr	r2, [r1, #8]
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8004fb4:	f412 0f80 	tst.w	r2, #4194304	@ 0x400000
 8004fb8:	e78e      	b.n	8004ed8 <HAL_ADC_ConfigChannel+0x1cc>
 8004fba:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8004fbe:	e79a      	b.n	8004ef6 <HAL_ADC_ConfigChannel+0x1ea>
 8004fc0:	4602      	mov	r2, r0
 8004fc2:	e798      	b.n	8004ef6 <HAL_ADC_ConfigChannel+0x1ea>
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8004fc4:	2c11      	cmp	r4, #17
 8004fc6:	d108      	bne.n	8004fda <HAL_ADC_ConfigChannel+0x2ce>
 8004fc8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004fcc:	f47f af25 	bne.w	8004e1a <HAL_ADC_ConfigChannel+0x10e>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8004fd0:	688b      	ldr	r3, [r1, #8]
 8004fd2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8004fd6:	608b      	str	r3, [r1, #8]
 8004fd8:	e71f      	b.n	8004e1a <HAL_ADC_ConfigChannel+0x10e>
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8004fda:	2c12      	cmp	r4, #18
 8004fdc:	f47f af1d 	bne.w	8004e1a <HAL_ADC_ConfigChannel+0x10e>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8004fe0:	688b      	ldr	r3, [r1, #8]
 8004fe2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004fe6:	e7f6      	b.n	8004fd6 <HAL_ADC_ConfigChannel+0x2ca>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004fe8:	6c2b      	ldr	r3, [r5, #64]	@ 0x40
 8004fea:	f043 0320 	orr.w	r3, r3, #32
 8004fee:	642b      	str	r3, [r5, #64]	@ 0x40
    tmp_hal_status = HAL_ERROR;
 8004ff0:	2001      	movs	r0, #1
 8004ff2:	e713      	b.n	8004e1c <HAL_ADC_ConfigChannel+0x110>
  __HAL_LOCK(hadc);
 8004ff4:	2002      	movs	r0, #2
 8004ff6:	e714      	b.n	8004e22 <HAL_ADC_ConfigChannel+0x116>
 8004ff8:	83fff000 	.word	0x83fff000
 8004ffc:	50000300 	.word	0x50000300
 8005000:	50000100 	.word	0x50000100
 8005004:	50000500 	.word	0x50000500
 8005008:	000f4240 	.word	0x000f4240
 800500c:	2000000c 	.word	0x2000000c
 8005010:	50000700 	.word	0x50000700

08005014 <HAL_ADCEx_MultiModeConfigChannel>:
{
 8005014:	b5f0      	push	{r4, r5, r6, r7, lr}
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8005016:	6804      	ldr	r4, [r0, #0]
 8005018:	4b3c      	ldr	r3, [pc, #240]	@ (800510c <HAL_ADCEx_MultiModeConfigChannel+0xf8>)
 800501a:	f1b4 4fa0 	cmp.w	r4, #1342177280	@ 0x50000000
{
 800501e:	4605      	mov	r5, r0
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8005020:	d009      	beq.n	8005036 <HAL_ADCEx_MultiModeConfigChannel+0x22>
 8005022:	429c      	cmp	r4, r3
 8005024:	d047      	beq.n	80050b6 <HAL_ADCEx_MultiModeConfigChannel+0xa2>
 8005026:	4a3a      	ldr	r2, [pc, #232]	@ (8005110 <HAL_ADCEx_MultiModeConfigChannel+0xfc>)
 8005028:	4294      	cmp	r4, r2
 800502a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800502e:	d002      	beq.n	8005036 <HAL_ADCEx_MultiModeConfigChannel+0x22>
 8005030:	429c      	cmp	r4, r3
 8005032:	d166      	bne.n	8005102 <HAL_ADCEx_MultiModeConfigChannel+0xee>
 8005034:	4613      	mov	r3, r2
  __HAL_LOCK(hadc);
 8005036:	f895 203c 	ldrb.w	r2, [r5, #60]	@ 0x3c
 800503a:	2a01      	cmp	r2, #1
 800503c:	d063      	beq.n	8005106 <HAL_ADCEx_MultiModeConfigChannel+0xf2>
 800503e:	2201      	movs	r2, #1
  if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8005040:	6808      	ldr	r0, [r1, #0]
  __HAL_LOCK(hadc);
 8005042:	f885 203c 	strb.w	r2, [r5, #60]	@ 0x3c
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8005046:	68a2      	ldr	r2, [r4, #8]
 8005048:	0752      	lsls	r2, r2, #29
 800504a:	d454      	bmi.n	80050f6 <HAL_ADCEx_MultiModeConfigChannel+0xe2>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 800504c:	689a      	ldr	r2, [r3, #8]
 800504e:	0757      	lsls	r7, r2, #29
 8005050:	d451      	bmi.n	80050f6 <HAL_ADCEx_MultiModeConfigChannel+0xe2>
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005052:	f1b4 4fa0 	cmp.w	r4, #1342177280	@ 0x50000000
 8005056:	d031      	beq.n	80050bc <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8005058:	4f2c      	ldr	r7, [pc, #176]	@ (800510c <HAL_ADCEx_MultiModeConfigChannel+0xf8>)
 800505a:	4a2e      	ldr	r2, [pc, #184]	@ (8005114 <HAL_ADCEx_MultiModeConfigChannel+0x100>)
 800505c:	4e2e      	ldr	r6, [pc, #184]	@ (8005118 <HAL_ADCEx_MultiModeConfigChannel+0x104>)
 800505e:	42bc      	cmp	r4, r7
 8005060:	bf08      	it	eq
 8005062:	4632      	moveq	r2, r6
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8005064:	b360      	cbz	r0, 80050c0 <HAL_ADCEx_MultiModeConfigChannel+0xac>
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8005066:	6897      	ldr	r7, [r2, #8]
 8005068:	f895 c030 	ldrb.w	ip, [r5, #48]	@ 0x30
 800506c:	684e      	ldr	r6, [r1, #4]
 800506e:	f427 4760 	bic.w	r7, r7, #57344	@ 0xe000
 8005072:	ea46 364c 	orr.w	r6, r6, ip, lsl #13
 8005076:	433e      	orrs	r6, r7
 8005078:	6096      	str	r6, [r2, #8]
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800507a:	68a6      	ldr	r6, [r4, #8]
 800507c:	f006 0603 	and.w	r6, r6, #3
 8005080:	2e01      	cmp	r6, #1
 8005082:	d102      	bne.n	800508a <HAL_ADCEx_MultiModeConfigChannel+0x76>
 8005084:	6824      	ldr	r4, [r4, #0]
 8005086:	07e6      	lsls	r6, r4, #31
 8005088:	d410      	bmi.n	80050ac <HAL_ADCEx_MultiModeConfigChannel+0x98>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 800508a:	689c      	ldr	r4, [r3, #8]
 800508c:	f004 0403 	and.w	r4, r4, #3
 8005090:	2c01      	cmp	r4, #1
 8005092:	d102      	bne.n	800509a <HAL_ADCEx_MultiModeConfigChannel+0x86>
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	07dc      	lsls	r4, r3, #31
 8005098:	d408      	bmi.n	80050ac <HAL_ADCEx_MultiModeConfigChannel+0x98>
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 800509a:	6893      	ldr	r3, [r2, #8]
 800509c:	6889      	ldr	r1, [r1, #8]
 800509e:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80050a2:	4308      	orrs	r0, r1
 80050a4:	f023 030f 	bic.w	r3, r3, #15
 80050a8:	4318      	orrs	r0, r3
 80050aa:	6090      	str	r0, [r2, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80050ac:	2000      	movs	r0, #0
  __HAL_UNLOCK(hadc);
 80050ae:	2300      	movs	r3, #0
 80050b0:	f885 303c 	strb.w	r3, [r5, #60]	@ 0x3c
} 
 80050b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80050b6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80050ba:	e7bc      	b.n	8005036 <HAL_ADCEx_MultiModeConfigChannel+0x22>
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80050bc:	4a16      	ldr	r2, [pc, #88]	@ (8005118 <HAL_ADCEx_MultiModeConfigChannel+0x104>)
 80050be:	e7d1      	b.n	8005064 <HAL_ADCEx_MultiModeConfigChannel+0x50>
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80050c0:	6891      	ldr	r1, [r2, #8]
 80050c2:	f421 4160 	bic.w	r1, r1, #57344	@ 0xe000
 80050c6:	6091      	str	r1, [r2, #8]
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80050c8:	68a1      	ldr	r1, [r4, #8]
 80050ca:	f001 0103 	and.w	r1, r1, #3
 80050ce:	2901      	cmp	r1, #1
 80050d0:	d102      	bne.n	80050d8 <HAL_ADCEx_MultiModeConfigChannel+0xc4>
 80050d2:	6821      	ldr	r1, [r4, #0]
 80050d4:	07c9      	lsls	r1, r1, #31
 80050d6:	d4e9      	bmi.n	80050ac <HAL_ADCEx_MultiModeConfigChannel+0x98>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80050d8:	6899      	ldr	r1, [r3, #8]
 80050da:	f001 0103 	and.w	r1, r1, #3
 80050de:	2901      	cmp	r1, #1
 80050e0:	d102      	bne.n	80050e8 <HAL_ADCEx_MultiModeConfigChannel+0xd4>
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	07db      	lsls	r3, r3, #31
 80050e6:	d4e1      	bmi.n	80050ac <HAL_ADCEx_MultiModeConfigChannel+0x98>
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 80050e8:	6893      	ldr	r3, [r2, #8]
 80050ea:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80050ee:	f023 030f 	bic.w	r3, r3, #15
 80050f2:	6093      	str	r3, [r2, #8]
 80050f4:	e7da      	b.n	80050ac <HAL_ADCEx_MultiModeConfigChannel+0x98>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80050f6:	6c2b      	ldr	r3, [r5, #64]	@ 0x40
 80050f8:	f043 0320 	orr.w	r3, r3, #32
 80050fc:	642b      	str	r3, [r5, #64]	@ 0x40
    tmp_hal_status = HAL_ERROR;
 80050fe:	2001      	movs	r0, #1
 8005100:	e7d5      	b.n	80050ae <HAL_ADCEx_MultiModeConfigChannel+0x9a>
    return HAL_ERROR;
 8005102:	2001      	movs	r0, #1
 8005104:	e7d6      	b.n	80050b4 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
  __HAL_LOCK(hadc);
 8005106:	2002      	movs	r0, #2
 8005108:	e7d4      	b.n	80050b4 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 800510a:	bf00      	nop
 800510c:	50000100 	.word	0x50000100
 8005110:	50000400 	.word	0x50000400
 8005114:	50000700 	.word	0x50000700
 8005118:	50000300 	.word	0x50000300

0800511c <HAL_NVIC_SetPriorityGrouping>:
=======
 800261e:	2000      	movs	r0, #0
}
 8002620:	bd38      	pop	{r3, r4, r5, pc}
  if (ADC_IS_ENABLE(hadc) != RESET )
 8002622:	681a      	ldr	r2, [r3, #0]
 8002624:	07d1      	lsls	r1, r2, #31
 8002626:	d5fa      	bpl.n	800261e <ADC_Disable+0x10>
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8002628:	689a      	ldr	r2, [r3, #8]
 800262a:	f002 020d 	and.w	r2, r2, #13
 800262e:	2a01      	cmp	r2, #1
 8002630:	d115      	bne.n	800265e <ADC_Disable+0x50>
      __HAL_ADC_DISABLE(hadc);
 8002632:	689a      	ldr	r2, [r3, #8]
 8002634:	f042 0202 	orr.w	r2, r2, #2
 8002638:	609a      	str	r2, [r3, #8]
 800263a:	2203      	movs	r2, #3
 800263c:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 800263e:	f7ff ffc9 	bl	80025d4 <HAL_GetTick>
 8002642:	4605      	mov	r5, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002644:	6823      	ldr	r3, [r4, #0]
 8002646:	689b      	ldr	r3, [r3, #8]
 8002648:	07db      	lsls	r3, r3, #31
 800264a:	d5e8      	bpl.n	800261e <ADC_Disable+0x10>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800264c:	f7ff ffc2 	bl	80025d4 <HAL_GetTick>
 8002650:	1b40      	subs	r0, r0, r5
 8002652:	2802      	cmp	r0, #2
 8002654:	d9f6      	bls.n	8002644 <ADC_Disable+0x36>
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002656:	6823      	ldr	r3, [r4, #0]
 8002658:	689b      	ldr	r3, [r3, #8]
 800265a:	07da      	lsls	r2, r3, #31
 800265c:	d5f2      	bpl.n	8002644 <ADC_Disable+0x36>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800265e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002660:	f043 0310 	orr.w	r3, r3, #16
 8002664:	6423      	str	r3, [r4, #64]	@ 0x40
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002666:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8002668:	f043 0301 	orr.w	r3, r3, #1
 800266c:	6463      	str	r3, [r4, #68]	@ 0x44
      return HAL_ERROR;
 800266e:	2001      	movs	r0, #1
 8002670:	e7d6      	b.n	8002620 <ADC_Disable+0x12>
	...

08002674 <HAL_ADC_Init>:
{
 8002674:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __IO uint32_t wait_loop_index = 0U;
 8002676:	2300      	movs	r3, #0
 8002678:	9301      	str	r3, [sp, #4]
  if(hadc == NULL)
 800267a:	4604      	mov	r4, r0
 800267c:	2800      	cmp	r0, #0
 800267e:	f000 8103 	beq.w	8002888 <HAL_ADC_Init+0x214>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002682:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 8002684:	06d5      	lsls	r5, r2, #27
 8002686:	d46a      	bmi.n	800275e <HAL_ADC_Init+0xea>
    if (hadc->State == HAL_ADC_STATE_RESET)
 8002688:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800268a:	2b00      	cmp	r3, #0
 800268c:	d035      	beq.n	80026fa <HAL_ADC_Init+0x86>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800268e:	2000      	movs	r0, #0
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8002690:	6823      	ldr	r3, [r4, #0]
 8002692:	689a      	ldr	r2, [r3, #8]
 8002694:	00d2      	lsls	r2, r2, #3
 8002696:	d502      	bpl.n	800269e <HAL_ADC_Init+0x2a>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8002698:	689b      	ldr	r3, [r3, #8]
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 800269a:	009d      	lsls	r5, r3, #2
 800269c:	d50a      	bpl.n	80026b4 <HAL_ADC_Init+0x40>
      ADC_STATE_CLR_SET(hadc->State,
 800269e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80026a0:	f023 0312 	bic.w	r3, r3, #18
 80026a4:	f043 0310 	orr.w	r3, r3, #16
 80026a8:	6423      	str	r3, [r4, #64]	@ 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026aa:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 80026ac:	f043 0301 	orr.w	r3, r3, #1
 80026b0:	6463      	str	r3, [r4, #68]	@ 0x44
      tmp_hal_status = HAL_ERROR;
 80026b2:	2001      	movs	r0, #1
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80026b4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80026b6:	06d9      	lsls	r1, r3, #27
 80026b8:	f100 80e0 	bmi.w	800287c <HAL_ADC_Init+0x208>
 80026bc:	2800      	cmp	r0, #0
 80026be:	f040 80dd 	bne.w	800287c <HAL_ADC_Init+0x208>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80026c2:	6823      	ldr	r3, [r4, #0]
 80026c4:	689a      	ldr	r2, [r3, #8]
      (tmp_hal_status == HAL_OK)                                &&
 80026c6:	0752      	lsls	r2, r2, #29
 80026c8:	f100 80d8 	bmi.w	800287c <HAL_ADC_Init+0x208>
    ADC_STATE_CLR_SET(hadc->State,
 80026cc:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 80026ce:	f422 7281 	bic.w	r2, r2, #258	@ 0x102
 80026d2:	f042 0202 	orr.w	r2, r2, #2
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80026d6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
    ADC_STATE_CLR_SET(hadc->State,
 80026da:	6422      	str	r2, [r4, #64]	@ 0x40
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80026dc:	4a6b      	ldr	r2, [pc, #428]	@ (800288c <HAL_ADC_Init+0x218>)
 80026de:	d042      	beq.n	8002766 <HAL_ADC_Init+0xf2>
 80026e0:	4293      	cmp	r3, r2
 80026e2:	d03e      	beq.n	8002762 <HAL_ADC_Init+0xee>
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80026e4:	f502 7240 	add.w	r2, r2, #768	@ 0x300
 80026e8:	4293      	cmp	r3, r2
 80026ea:	4969      	ldr	r1, [pc, #420]	@ (8002890 <HAL_ADC_Init+0x21c>)
 80026ec:	f000 80b3 	beq.w	8002856 <HAL_ADC_Init+0x1e2>
 80026f0:	428b      	cmp	r3, r1
 80026f2:	bf18      	it	ne
 80026f4:	2200      	movne	r2, #0
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80026f6:	4967      	ldr	r1, [pc, #412]	@ (8002894 <HAL_ADC_Init+0x220>)
 80026f8:	e036      	b.n	8002768 <HAL_ADC_Init+0xf4>
      hadc->InjectionConfig.ContextQueue = 0U;
 80026fa:	e9c0 3312 	strd	r3, r3, [r0, #72]	@ 0x48
      ADC_CLEAR_ERRORCODE(hadc);
 80026fe:	6443      	str	r3, [r0, #68]	@ 0x44
      hadc->Lock = HAL_UNLOCKED;
 8002700:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_ADC_MspInit(hadc);
 8002704:	f7ff fc44 	bl	8001f90 <HAL_ADC_MspInit>
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8002708:	6823      	ldr	r3, [r4, #0]
 800270a:	689b      	ldr	r3, [r3, #8]
 800270c:	00d8      	lsls	r0, r3, #3
 800270e:	d4be      	bmi.n	800268e <HAL_ADC_Init+0x1a>
        tmp_hal_status = ADC_Disable(hadc);
 8002710:	4620      	mov	r0, r4
 8002712:	f7ff ff7c 	bl	800260e <ADC_Disable>
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002716:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8002718:	06d1      	lsls	r1, r2, #27
 800271a:	d4b9      	bmi.n	8002690 <HAL_ADC_Init+0x1c>
 800271c:	2800      	cmp	r0, #0
 800271e:	d1b7      	bne.n	8002690 <HAL_ADC_Init+0x1c>
          ADC_STATE_CLR_SET(hadc->State,
 8002720:	6c23      	ldr	r3, [r4, #64]	@ 0x40
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8002722:	6822      	ldr	r2, [r4, #0]
          ADC_STATE_CLR_SET(hadc->State,
 8002724:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002728:	f023 0302 	bic.w	r3, r3, #2
 800272c:	f043 0302 	orr.w	r3, r3, #2
 8002730:	6423      	str	r3, [r4, #64]	@ 0x40
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8002732:	6893      	ldr	r3, [r2, #8]
 8002734:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
 8002738:	6093      	str	r3, [r2, #8]
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 800273a:	6893      	ldr	r3, [r2, #8]
 800273c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002740:	6093      	str	r3, [r2, #8]
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002742:	4b55      	ldr	r3, [pc, #340]	@ (8002898 <HAL_ADC_Init+0x224>)
 8002744:	4a55      	ldr	r2, [pc, #340]	@ (800289c <HAL_ADC_Init+0x228>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	fbb3 f3f2 	udiv	r3, r3, r2
 800274c:	220a      	movs	r2, #10
 800274e:	4353      	muls	r3, r2
            wait_loop_index--;
 8002750:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 8002752:	9b01      	ldr	r3, [sp, #4]
 8002754:	2b00      	cmp	r3, #0
 8002756:	d09a      	beq.n	800268e <HAL_ADC_Init+0x1a>
            wait_loop_index--;
 8002758:	9b01      	ldr	r3, [sp, #4]
 800275a:	3b01      	subs	r3, #1
 800275c:	e7f8      	b.n	8002750 <HAL_ADC_Init+0xdc>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800275e:	4618      	mov	r0, r3
 8002760:	e7a8      	b.n	80026b4 <HAL_ADC_Init+0x40>
 8002762:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002766:	494e      	ldr	r1, [pc, #312]	@ (80028a0 <HAL_ADC_Init+0x22c>)
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8002768:	689d      	ldr	r5, [r3, #8]
 800276a:	f005 0503 	and.w	r5, r5, #3
 800276e:	2d01      	cmp	r5, #1
 8002770:	d102      	bne.n	8002778 <HAL_ADC_Init+0x104>
 8002772:	681d      	ldr	r5, [r3, #0]
 8002774:	07ed      	lsls	r5, r5, #31
 8002776:	d40e      	bmi.n	8002796 <HAL_ADC_Init+0x122>
 8002778:	b13a      	cbz	r2, 800278a <HAL_ADC_Init+0x116>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800277a:	6895      	ldr	r5, [r2, #8]
 800277c:	f005 0503 	and.w	r5, r5, #3
 8002780:	2d01      	cmp	r5, #1
 8002782:	d102      	bne.n	800278a <HAL_ADC_Init+0x116>
 8002784:	6812      	ldr	r2, [r2, #0]
 8002786:	07d2      	lsls	r2, r2, #31
 8002788:	d405      	bmi.n	8002796 <HAL_ADC_Init+0x122>
      MODIFY_REG(tmpADC_Common->CCR       ,
 800278a:	688a      	ldr	r2, [r1, #8]
 800278c:	6865      	ldr	r5, [r4, #4]
 800278e:	f422 3240 	bic.w	r2, r2, #196608	@ 0x30000
 8002792:	432a      	orrs	r2, r5
 8002794:	608a      	str	r2, [r1, #8]
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8002796:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 800279a:	430a      	orrs	r2, r1
 800279c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800279e:	7e65      	ldrb	r5, [r4, #25]
 80027a0:	3901      	subs	r1, #1
 80027a2:	bf18      	it	ne
 80027a4:	2101      	movne	r1, #1
 80027a6:	ea42 3245 	orr.w	r2, r2, r5, lsl #13
 80027aa:	ea42 3201 	orr.w	r2, r2, r1, lsl #12
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80027ae:	f894 1020 	ldrb.w	r1, [r4, #32]
 80027b2:	2901      	cmp	r1, #1
 80027b4:	d107      	bne.n	80027c6 <HAL_ADC_Init+0x152>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80027b6:	2d00      	cmp	r5, #0
 80027b8:	d14f      	bne.n	800285a <HAL_ADC_Init+0x1e6>
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 80027ba:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80027bc:	3901      	subs	r1, #1
 80027be:	ea42 4141 	orr.w	r1, r2, r1, lsl #17
 80027c2:	f441 3280 	orr.w	r2, r1, #65536	@ 0x10000
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80027c6:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 80027c8:	2901      	cmp	r1, #1
 80027ca:	d015      	beq.n	80027f8 <HAL_ADC_Init+0x184>
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 80027cc:	4d35      	ldr	r5, [pc, #212]	@ (80028a4 <HAL_ADC_Init+0x230>)
 80027ce:	42ab      	cmp	r3, r5
 80027d0:	d003      	beq.n	80027da <HAL_ADC_Init+0x166>
 80027d2:	f505 7580 	add.w	r5, r5, #256	@ 0x100
 80027d6:	42ab      	cmp	r3, r5
 80027d8:	d10a      	bne.n	80027f0 <HAL_ADC_Init+0x17c>
 80027da:	f5b1 7f30 	cmp.w	r1, #704	@ 0x2c0
 80027de:	d047      	beq.n	8002870 <HAL_ADC_Init+0x1fc>
 80027e0:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 80027e4:	d047      	beq.n	8002876 <HAL_ADC_Init+0x202>
 80027e6:	f5b1 7fe0 	cmp.w	r1, #448	@ 0x1c0
 80027ea:	bf08      	it	eq
 80027ec:	f44f 7180 	moveq.w	r1, #256	@ 0x100
 80027f0:	6ae5      	ldr	r5, [r4, #44]	@ 0x2c
 80027f2:	4315      	orrs	r5, r2
 80027f4:	ea45 0201 	orr.w	r2, r5, r1
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80027f8:	6899      	ldr	r1, [r3, #8]
 80027fa:	f011 0f0c 	tst.w	r1, #12
 80027fe:	d10c      	bne.n	800281a <HAL_ADC_Init+0x1a6>
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8002800:	68d9      	ldr	r1, [r3, #12]
 8002802:	f421 4180 	bic.w	r1, r1, #16384	@ 0x4000
 8002806:	f021 0102 	bic.w	r1, r1, #2
 800280a:	60d9      	str	r1, [r3, #12]
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 800280c:	f894 1030 	ldrb.w	r1, [r4, #48]	@ 0x30
 8002810:	7e25      	ldrb	r5, [r4, #24]
 8002812:	0049      	lsls	r1, r1, #1
 8002814:	ea41 3185 	orr.w	r1, r1, r5, lsl #14
 8002818:	430a      	orrs	r2, r1
    MODIFY_REG(hadc->Instance->CFGR,
 800281a:	68dd      	ldr	r5, [r3, #12]
 800281c:	4922      	ldr	r1, [pc, #136]	@ (80028a8 <HAL_ADC_Init+0x234>)
 800281e:	4029      	ands	r1, r5
 8002820:	4311      	orrs	r1, r2
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002822:	6922      	ldr	r2, [r4, #16]
    MODIFY_REG(hadc->Instance->CFGR,
 8002824:	60d9      	str	r1, [r3, #12]
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002826:	2a01      	cmp	r2, #1
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8002828:	bf05      	ittet	eq
 800282a:	6b19      	ldreq	r1, [r3, #48]	@ 0x30
 800282c:	69e2      	ldreq	r2, [r4, #28]
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800282e:	6b1a      	ldrne	r2, [r3, #48]	@ 0x30
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8002830:	f102 32ff 	addeq.w	r2, r2, #4294967295
 8002834:	bf06      	itte	eq
 8002836:	f021 010f 	biceq.w	r1, r1, #15
 800283a:	430a      	orreq	r2, r1
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800283c:	f022 020f 	bicne.w	r2, r2, #15
 8002840:	631a      	str	r2, [r3, #48]	@ 0x30
    ADC_CLEAR_ERRORCODE(hadc);
 8002842:	2300      	movs	r3, #0
 8002844:	6463      	str	r3, [r4, #68]	@ 0x44
    ADC_STATE_CLR_SET(hadc->State,
 8002846:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002848:	f023 0303 	bic.w	r3, r3, #3
 800284c:	f043 0301 	orr.w	r3, r3, #1
 8002850:	6423      	str	r3, [r4, #64]	@ 0x40
}
 8002852:	b003      	add	sp, #12
 8002854:	bd30      	pop	{r4, r5, pc}
 8002856:	460a      	mov	r2, r1
 8002858:	e74d      	b.n	80026f6 <HAL_ADC_Init+0x82>
        ADC_STATE_CLR_SET(hadc->State,
 800285a:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 800285c:	f021 0122 	bic.w	r1, r1, #34	@ 0x22
 8002860:	f041 0120 	orr.w	r1, r1, #32
 8002864:	6421      	str	r1, [r4, #64]	@ 0x40
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002866:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8002868:	f041 0101 	orr.w	r1, r1, #1
 800286c:	6461      	str	r1, [r4, #68]	@ 0x44
 800286e:	e7aa      	b.n	80027c6 <HAL_ADC_Init+0x152>
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8002870:	f44f 71e0 	mov.w	r1, #448	@ 0x1c0
 8002874:	e7bc      	b.n	80027f0 <HAL_ADC_Init+0x17c>
 8002876:	f44f 7130 	mov.w	r1, #704	@ 0x2c0
 800287a:	e7b9      	b.n	80027f0 <HAL_ADC_Init+0x17c>
    ADC_STATE_CLR_SET(hadc->State,
 800287c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800287e:	f023 0312 	bic.w	r3, r3, #18
 8002882:	f043 0310 	orr.w	r3, r3, #16
 8002886:	6423      	str	r3, [r4, #64]	@ 0x40
    return HAL_ERROR;
 8002888:	2001      	movs	r0, #1
 800288a:	e7e2      	b.n	8002852 <HAL_ADC_Init+0x1de>
 800288c:	50000100 	.word	0x50000100
 8002890:	50000500 	.word	0x50000500
 8002894:	50000700 	.word	0x50000700
 8002898:	2000000c 	.word	0x2000000c
 800289c:	000f4240 	.word	0x000f4240
 80028a0:	50000300 	.word	0x50000300
 80028a4:	50000400 	.word	0x50000400
 80028a8:	fff0c007 	.word	0xfff0c007

080028ac <HAL_ADCEx_InjectedConvCpltCallback>:
}
 80028ac:	4770      	bx	lr

080028ae <HAL_ADCEx_InjectedQueueOverflowCallback>:
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef* hadc)
 80028ae:	4770      	bx	lr

080028b0 <HAL_ADCEx_LevelOutOfWindow2Callback>:
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef* hadc)
 80028b0:	4770      	bx	lr

080028b2 <HAL_ADCEx_LevelOutOfWindow3Callback>:
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef* hadc)
 80028b2:	4770      	bx	lr

080028b4 <HAL_ADC_IRQHandler>:
  uint32_t tmp_isr = hadc->Instance->ISR;
 80028b4:	6803      	ldr	r3, [r0, #0]
{
 80028b6:	b570      	push	{r4, r5, r6, lr}
  uint32_t tmp_isr = hadc->Instance->ISR;
 80028b8:	681d      	ldr	r5, [r3, #0]
  uint32_t tmp_ier = hadc->Instance->IER;
 80028ba:	685e      	ldr	r6, [r3, #4]
  if( (((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80028bc:	076a      	lsls	r2, r5, #29
{
 80028be:	4604      	mov	r4, r0
  if( (((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80028c0:	d501      	bpl.n	80028c6 <HAL_ADC_IRQHandler+0x12>
 80028c2:	0770      	lsls	r0, r6, #29
 80028c4:	d403      	bmi.n	80028ce <HAL_ADC_IRQHandler+0x1a>
 80028c6:	0729      	lsls	r1, r5, #28
 80028c8:	d543      	bpl.n	8002952 <HAL_ADC_IRQHandler+0x9e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))   )
 80028ca:	0732      	lsls	r2, r6, #28
 80028cc:	d541      	bpl.n	8002952 <HAL_ADC_IRQHandler+0x9e>
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80028ce:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 80028d0:	06d0      	lsls	r0, r2, #27
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80028d2:	bf5e      	ittt	pl
 80028d4:	6c22      	ldrpl	r2, [r4, #64]	@ 0x40
 80028d6:	f442 7200 	orrpl.w	r2, r2, #512	@ 0x200
 80028da:	6422      	strpl	r2, [r4, #64]	@ 0x40
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 80028dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80028e0:	d003      	beq.n	80028ea <HAL_ADC_IRQHandler+0x36>
 80028e2:	4a90      	ldr	r2, [pc, #576]	@ (8002b24 <HAL_ADC_IRQHandler+0x270>)
 80028e4:	4293      	cmp	r3, r2
 80028e6:	f040 8105 	bne.w	8002af4 <HAL_ADC_IRQHandler+0x240>
 80028ea:	4a8f      	ldr	r2, [pc, #572]	@ (8002b28 <HAL_ADC_IRQHandler+0x274>)
 80028ec:	6891      	ldr	r1, [r2, #8]
 80028ee:	06c9      	lsls	r1, r1, #27
 80028f0:	d00c      	beq.n	800290c <HAL_ADC_IRQHandler+0x58>
 80028f2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80028f6:	d003      	beq.n	8002900 <HAL_ADC_IRQHandler+0x4c>
 80028f8:	498a      	ldr	r1, [pc, #552]	@ (8002b24 <HAL_ADC_IRQHandler+0x270>)
 80028fa:	428b      	cmp	r3, r1
 80028fc:	f040 80ff 	bne.w	8002afe <HAL_ADC_IRQHandler+0x24a>
 8002900:	6892      	ldr	r2, [r2, #8]
 8002902:	f002 021f 	and.w	r2, r2, #31
 8002906:	2a05      	cmp	r2, #5
 8002908:	f040 8114 	bne.w	8002b34 <HAL_ADC_IRQHandler+0x280>
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 800290c:	68da      	ldr	r2, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 800290e:	68d9      	ldr	r1, [r3, #12]
       (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == RESET)  )
 8002910:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 8002914:	f401 6140 	and.w	r1, r1, #3072	@ 0xc00
 8002918:	4311      	orrs	r1, r2
 800291a:	d114      	bne.n	8002946 <HAL_ADC_IRQHandler+0x92>
      if((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS)
 800291c:	0729      	lsls	r1, r5, #28
 800291e:	d512      	bpl.n	8002946 <HAL_ADC_IRQHandler+0x92>
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002920:	689a      	ldr	r2, [r3, #8]
 8002922:	0752      	lsls	r2, r2, #29
 8002924:	f100 8122 	bmi.w	8002b6c <HAL_ADC_IRQHandler+0x2b8>
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002928:	685a      	ldr	r2, [r3, #4]
 800292a:	f022 020c 	bic.w	r2, r2, #12
 800292e:	605a      	str	r2, [r3, #4]
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002930:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002932:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002936:	6423      	str	r3, [r4, #64]	@ 0x40
          if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002938:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800293a:	04d8      	lsls	r0, r3, #19
 800293c:	d403      	bmi.n	8002946 <HAL_ADC_IRQHandler+0x92>
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800293e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002940:	f043 0301 	orr.w	r3, r3, #1
 8002944:	6423      	str	r3, [r4, #64]	@ 0x40
      HAL_ADC_ConvCpltCallback(hadc);
 8002946:	4620      	mov	r0, r4
 8002948:	f7ff fe5e 	bl	8002608 <HAL_ADC_ConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 800294c:	6823      	ldr	r3, [r4, #0]
 800294e:	220c      	movs	r2, #12
 8002950:	601a      	str	r2, [r3, #0]
  if( (((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002952:	06a9      	lsls	r1, r5, #26
 8002954:	d501      	bpl.n	800295a <HAL_ADC_IRQHandler+0xa6>
 8002956:	06b2      	lsls	r2, r6, #26
 8002958:	d403      	bmi.n	8002962 <HAL_ADC_IRQHandler+0xae>
 800295a:	066b      	lsls	r3, r5, #25
 800295c:	d562      	bpl.n	8002a24 <HAL_ADC_IRQHandler+0x170>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS))   )
 800295e:	0670      	lsls	r0, r6, #25
 8002960:	d560      	bpl.n	8002a24 <HAL_ADC_IRQHandler+0x170>
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002962:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002964:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002968:	6423      	str	r3, [r4, #64]	@ 0x40
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 800296a:	6823      	ldr	r3, [r4, #0]
 800296c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002970:	d003      	beq.n	800297a <HAL_ADC_IRQHandler+0xc6>
 8002972:	4a6c      	ldr	r2, [pc, #432]	@ (8002b24 <HAL_ADC_IRQHandler+0x270>)
 8002974:	4293      	cmp	r3, r2
 8002976:	f040 8102 	bne.w	8002b7e <HAL_ADC_IRQHandler+0x2ca>
 800297a:	4a6b      	ldr	r2, [pc, #428]	@ (8002b28 <HAL_ADC_IRQHandler+0x274>)
 800297c:	6891      	ldr	r1, [r2, #8]
 800297e:	06c9      	lsls	r1, r1, #27
 8002980:	d00c      	beq.n	800299c <HAL_ADC_IRQHandler+0xe8>
 8002982:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002986:	d003      	beq.n	8002990 <HAL_ADC_IRQHandler+0xdc>
 8002988:	4966      	ldr	r1, [pc, #408]	@ (8002b24 <HAL_ADC_IRQHandler+0x270>)
 800298a:	428b      	cmp	r3, r1
 800298c:	f040 80fc 	bne.w	8002b88 <HAL_ADC_IRQHandler+0x2d4>
 8002990:	6892      	ldr	r2, [r2, #8]
 8002992:	f002 021f 	and.w	r2, r2, #31
 8002996:	2a05      	cmp	r2, #5
 8002998:	f040 8108 	bne.w	8002bac <HAL_ADC_IRQHandler+0x2f8>
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 800299c:	68da      	ldr	r2, [r3, #12]
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc))
 800299e:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 80029a0:	f011 0fc0 	tst.w	r1, #192	@ 0xc0
 80029a4:	d138      	bne.n	8002a18 <HAL_ADC_IRQHandler+0x164>
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 80029a6:	0191      	lsls	r1, r2, #6
 80029a8:	d506      	bpl.n	80029b8 <HAL_ADC_IRQHandler+0x104>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 80029aa:	68d9      	ldr	r1, [r3, #12]
          (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )   )
 80029ac:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 80029b0:	f401 6140 	and.w	r1, r1, #3072	@ 0xc00
 80029b4:	4311      	orrs	r1, r2
 80029b6:	d12f      	bne.n	8002a18 <HAL_ADC_IRQHandler+0x164>
        if((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS)
 80029b8:	0668      	lsls	r0, r5, #25
 80029ba:	d52d      	bpl.n	8002a18 <HAL_ADC_IRQHandler+0x164>
          if (ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc))
 80029bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80029c0:	d003      	beq.n	80029ca <HAL_ADC_IRQHandler+0x116>
 80029c2:	4a58      	ldr	r2, [pc, #352]	@ (8002b24 <HAL_ADC_IRQHandler+0x270>)
 80029c4:	4293      	cmp	r3, r2
 80029c6:	f040 810d 	bne.w	8002be4 <HAL_ADC_IRQHandler+0x330>
 80029ca:	4a57      	ldr	r2, [pc, #348]	@ (8002b28 <HAL_ADC_IRQHandler+0x274>)
 80029cc:	6891      	ldr	r1, [r2, #8]
 80029ce:	06c9      	lsls	r1, r1, #27
 80029d0:	d00c      	beq.n	80029ec <HAL_ADC_IRQHandler+0x138>
 80029d2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80029d6:	d003      	beq.n	80029e0 <HAL_ADC_IRQHandler+0x12c>
 80029d8:	4952      	ldr	r1, [pc, #328]	@ (8002b24 <HAL_ADC_IRQHandler+0x270>)
 80029da:	428b      	cmp	r3, r1
 80029dc:	f040 8107 	bne.w	8002bee <HAL_ADC_IRQHandler+0x33a>
 80029e0:	6892      	ldr	r2, [r2, #8]
 80029e2:	f002 021f 	and.w	r2, r2, #31
 80029e6:	2a06      	cmp	r2, #6
 80029e8:	f040 8113 	bne.w	8002c12 <HAL_ADC_IRQHandler+0x35e>
            tmp_cfgr_jqm = READ_REG(hadc->Instance->CFGR); 
 80029ec:	68da      	ldr	r2, [r3, #12]
          if(READ_BIT(tmp_cfgr_jqm, ADC_CFGR_JQM) == RESET)
 80029ee:	0291      	lsls	r1, r2, #10
 80029f0:	d412      	bmi.n	8002a18 <HAL_ADC_IRQHandler+0x164>
            if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 80029f2:	689a      	ldr	r2, [r3, #8]
 80029f4:	0712      	lsls	r2, r2, #28
 80029f6:	f100 8128 	bmi.w	8002c4a <HAL_ADC_IRQHandler+0x396>
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80029fa:	685a      	ldr	r2, [r3, #4]
 80029fc:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002a00:	605a      	str	r2, [r3, #4]
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002a02:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002a04:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002a08:	6423      	str	r3, [r4, #64]	@ 0x40
              if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002a0a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002a0c:	05d8      	lsls	r0, r3, #23
 8002a0e:	d403      	bmi.n	8002a18 <HAL_ADC_IRQHandler+0x164>
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002a10:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002a12:	f043 0301 	orr.w	r3, r3, #1
 8002a16:	6423      	str	r3, [r4, #64]	@ 0x40
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002a18:	4620      	mov	r0, r4
 8002a1a:	f7ff ff47 	bl	80028ac <HAL_ADCEx_InjectedConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8002a1e:	6823      	ldr	r3, [r4, #0]
 8002a20:	2260      	movs	r2, #96	@ 0x60
 8002a22:	601a      	str	r2, [r3, #0]
  if(((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8002a24:	0629      	lsls	r1, r5, #24
 8002a26:	d50b      	bpl.n	8002a40 <HAL_ADC_IRQHandler+0x18c>
 8002a28:	0632      	lsls	r2, r6, #24
 8002a2a:	d509      	bpl.n	8002a40 <HAL_ADC_IRQHandler+0x18c>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002a2c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002a2e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a32:	6423      	str	r3, [r4, #64]	@ 0x40
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002a34:	4620      	mov	r0, r4
 8002a36:	f7ff fde8 	bl	800260a <HAL_ADC_LevelOutOfWindowCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8002a3a:	6823      	ldr	r3, [r4, #0]
 8002a3c:	2280      	movs	r2, #128	@ 0x80
 8002a3e:	601a      	str	r2, [r3, #0]
  if(((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8002a40:	05eb      	lsls	r3, r5, #23
 8002a42:	d50c      	bpl.n	8002a5e <HAL_ADC_IRQHandler+0x1aa>
 8002a44:	05f0      	lsls	r0, r6, #23
 8002a46:	d50a      	bpl.n	8002a5e <HAL_ADC_IRQHandler+0x1aa>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8002a48:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002a4a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002a4e:	6423      	str	r3, [r4, #64]	@ 0x40
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8002a50:	4620      	mov	r0, r4
 8002a52:	f7ff ff2d 	bl	80028b0 <HAL_ADCEx_LevelOutOfWindow2Callback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8002a56:	6823      	ldr	r3, [r4, #0]
 8002a58:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002a5c:	601a      	str	r2, [r3, #0]
  if(((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8002a5e:	05a9      	lsls	r1, r5, #22
 8002a60:	d50c      	bpl.n	8002a7c <HAL_ADC_IRQHandler+0x1c8>
 8002a62:	05b2      	lsls	r2, r6, #22
 8002a64:	d50a      	bpl.n	8002a7c <HAL_ADC_IRQHandler+0x1c8>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002a66:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002a68:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002a6c:	6423      	str	r3, [r4, #64]	@ 0x40
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8002a6e:	4620      	mov	r0, r4
 8002a70:	f7ff ff1f 	bl	80028b2 <HAL_ADCEx_LevelOutOfWindow3Callback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8002a74:	6823      	ldr	r3, [r4, #0]
 8002a76:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002a7a:	601a      	str	r2, [r3, #0]
  if(((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8002a7c:	06eb      	lsls	r3, r5, #27
 8002a7e:	d525      	bpl.n	8002acc <HAL_ADC_IRQHandler+0x218>
 8002a80:	06f0      	lsls	r0, r6, #27
 8002a82:	d523      	bpl.n	8002acc <HAL_ADC_IRQHandler+0x218>
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002a84:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8002a86:	2b01      	cmp	r3, #1
 8002a88:	d012      	beq.n	8002ab0 <HAL_ADC_IRQHandler+0x1fc>
      tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002a8a:	6822      	ldr	r2, [r4, #0]
 8002a8c:	f1b2 4fa0 	cmp.w	r2, #1342177280	@ 0x50000000
 8002a90:	f000 80e4 	beq.w	8002c5c <HAL_ADC_IRQHandler+0x3a8>
 8002a94:	4823      	ldr	r0, [pc, #140]	@ (8002b24 <HAL_ADC_IRQHandler+0x270>)
 8002a96:	4b25      	ldr	r3, [pc, #148]	@ (8002b2c <HAL_ADC_IRQHandler+0x278>)
 8002a98:	4923      	ldr	r1, [pc, #140]	@ (8002b28 <HAL_ADC_IRQHandler+0x274>)
 8002a9a:	4282      	cmp	r2, r0
 8002a9c:	bf08      	it	eq
 8002a9e:	460b      	moveq	r3, r1
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8002aa0:	6899      	ldr	r1, [r3, #8]
 8002aa2:	06c9      	lsls	r1, r1, #27
 8002aa4:	f040 80dc 	bne.w	8002c60 <HAL_ADC_IRQHandler+0x3ac>
        if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8002aa8:	68d3      	ldr	r3, [r2, #12]
 8002aaa:	f013 0f01 	tst.w	r3, #1
        if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 8002aae:	d00a      	beq.n	8002ac6 <HAL_ADC_IRQHandler+0x212>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002ab0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002ab2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002ab6:	6423      	str	r3, [r4, #64]	@ 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002ab8:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8002aba:	f043 0302 	orr.w	r3, r3, #2
 8002abe:	6463      	str	r3, [r4, #68]	@ 0x44
      HAL_ADC_ErrorCallback(hadc);
 8002ac0:	4620      	mov	r0, r4
 8002ac2:	f7ff fda3 	bl	800260c <HAL_ADC_ErrorCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002ac6:	6823      	ldr	r3, [r4, #0]
 8002ac8:	2210      	movs	r2, #16
 8002aca:	601a      	str	r2, [r3, #0]
  if(((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8002acc:	056a      	lsls	r2, r5, #21
 8002ace:	d510      	bpl.n	8002af2 <HAL_ADC_IRQHandler+0x23e>
 8002ad0:	0573      	lsls	r3, r6, #21
 8002ad2:	d50e      	bpl.n	8002af2 <HAL_ADC_IRQHandler+0x23e>
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8002ad4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002ad6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002ada:	6423      	str	r3, [r4, #64]	@ 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8002adc:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8002ade:	f043 0308 	orr.w	r3, r3, #8
 8002ae2:	6463      	str	r3, [r4, #68]	@ 0x44
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8002ae4:	6823      	ldr	r3, [r4, #0]
 8002ae6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002aea:	601a      	str	r2, [r3, #0]
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8002aec:	4620      	mov	r0, r4
 8002aee:	f7ff fede 	bl	80028ae <HAL_ADCEx_InjectedQueueOverflowCallback>
}
 8002af2:	bd70      	pop	{r4, r5, r6, pc}
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8002af4:	4a0d      	ldr	r2, [pc, #52]	@ (8002b2c <HAL_ADC_IRQHandler+0x278>)
 8002af6:	6892      	ldr	r2, [r2, #8]
 8002af8:	06d0      	lsls	r0, r2, #27
 8002afa:	f43f af07 	beq.w	800290c <HAL_ADC_IRQHandler+0x58>
 8002afe:	4a0b      	ldr	r2, [pc, #44]	@ (8002b2c <HAL_ADC_IRQHandler+0x278>)
 8002b00:	6892      	ldr	r2, [r2, #8]
 8002b02:	f002 021f 	and.w	r2, r2, #31
 8002b06:	2a05      	cmp	r2, #5
 8002b08:	f43f af00 	beq.w	800290c <HAL_ADC_IRQHandler+0x58>
 8002b0c:	4a07      	ldr	r2, [pc, #28]	@ (8002b2c <HAL_ADC_IRQHandler+0x278>)
 8002b0e:	6892      	ldr	r2, [r2, #8]
 8002b10:	f002 021f 	and.w	r2, r2, #31
 8002b14:	2a09      	cmp	r2, #9
 8002b16:	f43f aef9 	beq.w	800290c <HAL_ADC_IRQHandler+0x58>
 8002b1a:	4a05      	ldr	r2, [pc, #20]	@ (8002b30 <HAL_ADC_IRQHandler+0x27c>)
 8002b1c:	4293      	cmp	r3, r2
 8002b1e:	d123      	bne.n	8002b68 <HAL_ADC_IRQHandler+0x2b4>
 8002b20:	e6f4      	b.n	800290c <HAL_ADC_IRQHandler+0x58>
 8002b22:	bf00      	nop
 8002b24:	50000100 	.word	0x50000100
 8002b28:	50000300 	.word	0x50000300
 8002b2c:	50000700 	.word	0x50000700
 8002b30:	50000400 	.word	0x50000400
 8002b34:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002b38:	d002      	beq.n	8002b40 <HAL_ADC_IRQHandler+0x28c>
 8002b3a:	4a4b      	ldr	r2, [pc, #300]	@ (8002c68 <HAL_ADC_IRQHandler+0x3b4>)
 8002b3c:	4293      	cmp	r3, r2
 8002b3e:	d1e5      	bne.n	8002b0c <HAL_ADC_IRQHandler+0x258>
 8002b40:	4a4a      	ldr	r2, [pc, #296]	@ (8002c6c <HAL_ADC_IRQHandler+0x3b8>)
 8002b42:	6892      	ldr	r2, [r2, #8]
 8002b44:	f002 021f 	and.w	r2, r2, #31
 8002b48:	2a09      	cmp	r2, #9
 8002b4a:	f43f aedf 	beq.w	800290c <HAL_ADC_IRQHandler+0x58>
 8002b4e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002b52:	f43f aedb 	beq.w	800290c <HAL_ADC_IRQHandler+0x58>
 8002b56:	4a46      	ldr	r2, [pc, #280]	@ (8002c70 <HAL_ADC_IRQHandler+0x3bc>)
 8002b58:	4293      	cmp	r3, r2
 8002b5a:	f43f aed7 	beq.w	800290c <HAL_ADC_IRQHandler+0x58>
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8002b5e:	4942      	ldr	r1, [pc, #264]	@ (8002c68 <HAL_ADC_IRQHandler+0x3b4>)
 8002b60:	428b      	cmp	r3, r1
 8002b62:	bf08      	it	eq
 8002b64:	f04f 42a0 	moveq.w	r2, #1342177280	@ 0x50000000
 8002b68:	68d2      	ldr	r2, [r2, #12]
 8002b6a:	e6d0      	b.n	800290e <HAL_ADC_IRQHandler+0x5a>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b6c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002b6e:	f043 0310 	orr.w	r3, r3, #16
 8002b72:	6423      	str	r3, [r4, #64]	@ 0x40
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b74:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8002b76:	f043 0301 	orr.w	r3, r3, #1
 8002b7a:	6463      	str	r3, [r4, #68]	@ 0x44
 8002b7c:	e6e3      	b.n	8002946 <HAL_ADC_IRQHandler+0x92>
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8002b7e:	4a3d      	ldr	r2, [pc, #244]	@ (8002c74 <HAL_ADC_IRQHandler+0x3c0>)
 8002b80:	6892      	ldr	r2, [r2, #8]
 8002b82:	06d0      	lsls	r0, r2, #27
 8002b84:	f43f af0a 	beq.w	800299c <HAL_ADC_IRQHandler+0xe8>
 8002b88:	4a3a      	ldr	r2, [pc, #232]	@ (8002c74 <HAL_ADC_IRQHandler+0x3c0>)
 8002b8a:	6892      	ldr	r2, [r2, #8]
 8002b8c:	f002 021f 	and.w	r2, r2, #31
 8002b90:	2a05      	cmp	r2, #5
 8002b92:	f43f af03 	beq.w	800299c <HAL_ADC_IRQHandler+0xe8>
 8002b96:	4a37      	ldr	r2, [pc, #220]	@ (8002c74 <HAL_ADC_IRQHandler+0x3c0>)
 8002b98:	6892      	ldr	r2, [r2, #8]
 8002b9a:	f002 021f 	and.w	r2, r2, #31
 8002b9e:	2a09      	cmp	r2, #9
 8002ba0:	f43f aefc 	beq.w	800299c <HAL_ADC_IRQHandler+0xe8>
 8002ba4:	4a32      	ldr	r2, [pc, #200]	@ (8002c70 <HAL_ADC_IRQHandler+0x3bc>)
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d11a      	bne.n	8002be0 <HAL_ADC_IRQHandler+0x32c>
 8002baa:	e6f7      	b.n	800299c <HAL_ADC_IRQHandler+0xe8>
 8002bac:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002bb0:	d002      	beq.n	8002bb8 <HAL_ADC_IRQHandler+0x304>
 8002bb2:	4a2d      	ldr	r2, [pc, #180]	@ (8002c68 <HAL_ADC_IRQHandler+0x3b4>)
 8002bb4:	4293      	cmp	r3, r2
 8002bb6:	d1ee      	bne.n	8002b96 <HAL_ADC_IRQHandler+0x2e2>
 8002bb8:	4a2c      	ldr	r2, [pc, #176]	@ (8002c6c <HAL_ADC_IRQHandler+0x3b8>)
 8002bba:	6892      	ldr	r2, [r2, #8]
 8002bbc:	f002 021f 	and.w	r2, r2, #31
 8002bc0:	2a09      	cmp	r2, #9
 8002bc2:	f43f aeeb 	beq.w	800299c <HAL_ADC_IRQHandler+0xe8>
 8002bc6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002bca:	f43f aee7 	beq.w	800299c <HAL_ADC_IRQHandler+0xe8>
 8002bce:	4a28      	ldr	r2, [pc, #160]	@ (8002c70 <HAL_ADC_IRQHandler+0x3bc>)
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	f43f aee3 	beq.w	800299c <HAL_ADC_IRQHandler+0xe8>
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8002bd6:	4924      	ldr	r1, [pc, #144]	@ (8002c68 <HAL_ADC_IRQHandler+0x3b4>)
 8002bd8:	428b      	cmp	r3, r1
 8002bda:	bf08      	it	eq
 8002bdc:	f04f 42a0 	moveq.w	r2, #1342177280	@ 0x50000000
 8002be0:	68d2      	ldr	r2, [r2, #12]
 8002be2:	e6dc      	b.n	800299e <HAL_ADC_IRQHandler+0xea>
          if (ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc))
 8002be4:	4a23      	ldr	r2, [pc, #140]	@ (8002c74 <HAL_ADC_IRQHandler+0x3c0>)
 8002be6:	6892      	ldr	r2, [r2, #8]
 8002be8:	06d0      	lsls	r0, r2, #27
 8002bea:	f43f aeff 	beq.w	80029ec <HAL_ADC_IRQHandler+0x138>
 8002bee:	4a21      	ldr	r2, [pc, #132]	@ (8002c74 <HAL_ADC_IRQHandler+0x3c0>)
 8002bf0:	6892      	ldr	r2, [r2, #8]
 8002bf2:	f002 021f 	and.w	r2, r2, #31
 8002bf6:	2a06      	cmp	r2, #6
 8002bf8:	f43f aef8 	beq.w	80029ec <HAL_ADC_IRQHandler+0x138>
 8002bfc:	4a1d      	ldr	r2, [pc, #116]	@ (8002c74 <HAL_ADC_IRQHandler+0x3c0>)
 8002bfe:	6892      	ldr	r2, [r2, #8]
 8002c00:	f002 021f 	and.w	r2, r2, #31
 8002c04:	2a07      	cmp	r2, #7
 8002c06:	f43f aef1 	beq.w	80029ec <HAL_ADC_IRQHandler+0x138>
 8002c0a:	4a19      	ldr	r2, [pc, #100]	@ (8002c70 <HAL_ADC_IRQHandler+0x3bc>)
 8002c0c:	4293      	cmp	r3, r2
 8002c0e:	d11a      	bne.n	8002c46 <HAL_ADC_IRQHandler+0x392>
 8002c10:	e6ec      	b.n	80029ec <HAL_ADC_IRQHandler+0x138>
 8002c12:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002c16:	d002      	beq.n	8002c1e <HAL_ADC_IRQHandler+0x36a>
 8002c18:	4a13      	ldr	r2, [pc, #76]	@ (8002c68 <HAL_ADC_IRQHandler+0x3b4>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d1ee      	bne.n	8002bfc <HAL_ADC_IRQHandler+0x348>
 8002c1e:	4a13      	ldr	r2, [pc, #76]	@ (8002c6c <HAL_ADC_IRQHandler+0x3b8>)
 8002c20:	6892      	ldr	r2, [r2, #8]
 8002c22:	f002 021f 	and.w	r2, r2, #31
 8002c26:	2a07      	cmp	r2, #7
 8002c28:	f43f aee0 	beq.w	80029ec <HAL_ADC_IRQHandler+0x138>
 8002c2c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002c30:	f43f aedc 	beq.w	80029ec <HAL_ADC_IRQHandler+0x138>
 8002c34:	4a0e      	ldr	r2, [pc, #56]	@ (8002c70 <HAL_ADC_IRQHandler+0x3bc>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	f43f aed8 	beq.w	80029ec <HAL_ADC_IRQHandler+0x138>
            tmp_cfgr_jqm = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8002c3c:	490a      	ldr	r1, [pc, #40]	@ (8002c68 <HAL_ADC_IRQHandler+0x3b4>)
 8002c3e:	428b      	cmp	r3, r1
 8002c40:	bf08      	it	eq
 8002c42:	f04f 42a0 	moveq.w	r2, #1342177280	@ 0x50000000
 8002c46:	68d2      	ldr	r2, [r2, #12]
 8002c48:	e6d1      	b.n	80029ee <HAL_ADC_IRQHandler+0x13a>
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c4a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002c4c:	f043 0310 	orr.w	r3, r3, #16
 8002c50:	6423      	str	r3, [r4, #64]	@ 0x40
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c52:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8002c54:	f043 0301 	orr.w	r3, r3, #1
 8002c58:	6463      	str	r3, [r4, #68]	@ 0x44
 8002c5a:	e6dd      	b.n	8002a18 <HAL_ADC_IRQHandler+0x164>
      tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002c5c:	4b03      	ldr	r3, [pc, #12]	@ (8002c6c <HAL_ADC_IRQHandler+0x3b8>)
 8002c5e:	e71f      	b.n	8002aa0 <HAL_ADC_IRQHandler+0x1ec>
        if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 8002c60:	689b      	ldr	r3, [r3, #8]
 8002c62:	f413 4f40 	tst.w	r3, #49152	@ 0xc000
 8002c66:	e722      	b.n	8002aae <HAL_ADC_IRQHandler+0x1fa>
 8002c68:	50000100 	.word	0x50000100
 8002c6c:	50000300 	.word	0x50000300
 8002c70:	50000400 	.word	0x50000400
 8002c74:	50000700 	.word	0x50000700

08002c78 <HAL_ADC_ConfigChannel>:
{
 8002c78:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002c7a:	4605      	mov	r5, r0
  __IO uint32_t wait_loop_index = 0U;
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8002c80:	f895 303c 	ldrb.w	r3, [r5, #60]	@ 0x3c
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002c84:	68c8      	ldr	r0, [r1, #12]
  __HAL_LOCK(hadc);
 8002c86:	2b01      	cmp	r3, #1
 8002c88:	f000 816a 	beq.w	8002f60 <HAL_ADC_ConfigChannel+0x2e8>
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	f885 303c 	strb.w	r3, [r5, #60]	@ 0x3c
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002c92:	682b      	ldr	r3, [r5, #0]
 8002c94:	689a      	ldr	r2, [r3, #8]
 8002c96:	0757      	lsls	r7, r2, #29
 8002c98:	f100 815c 	bmi.w	8002f54 <HAL_ADC_ConfigChannel+0x2dc>
    if (sConfig->Rank < 5U)
 8002c9c:	684e      	ldr	r6, [r1, #4]
      MODIFY_REG(hadc->Instance->SQR1,
 8002c9e:	680c      	ldr	r4, [r1, #0]
 8002ca0:	2206      	movs	r2, #6
    if (sConfig->Rank < 5U)
 8002ca2:	2e04      	cmp	r6, #4
      MODIFY_REG(hadc->Instance->SQR1,
 8002ca4:	fb06 f202 	mul.w	r2, r6, r2
    if (sConfig->Rank < 5U)
 8002ca8:	d82c      	bhi.n	8002d04 <HAL_ADC_ConfigChannel+0x8c>
      MODIFY_REG(hadc->Instance->SQR1,
 8002caa:	6b1e      	ldr	r6, [r3, #48]	@ 0x30
 8002cac:	271f      	movs	r7, #31
 8002cae:	4097      	lsls	r7, r2
 8002cb0:	ea26 0607 	bic.w	r6, r6, r7
 8002cb4:	fa04 f202 	lsl.w	r2, r4, r2
 8002cb8:	4332      	orrs	r2, r6
 8002cba:	631a      	str	r2, [r3, #48]	@ 0x30
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002cbc:	689a      	ldr	r2, [r3, #8]
 8002cbe:	f012 0f0c 	tst.w	r2, #12
 8002cc2:	d158      	bne.n	8002d76 <HAL_ADC_ConfigChannel+0xfe>
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8002cc4:	2c09      	cmp	r4, #9
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002cc6:	f8d1 c008 	ldr.w	ip, [r1, #8]
 8002cca:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 8002cce:	f04f 0607 	mov.w	r6, #7
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8002cd2:	d93c      	bls.n	8002d4e <HAL_ADC_ConfigChannel+0xd6>
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002cd4:	699f      	ldr	r7, [r3, #24]
 8002cd6:	3a1e      	subs	r2, #30
 8002cd8:	4096      	lsls	r6, r2
 8002cda:	ea27 0606 	bic.w	r6, r7, r6
 8002cde:	fa0c f202 	lsl.w	r2, ip, r2
 8002ce2:	4332      	orrs	r2, r6
 8002ce4:	619a      	str	r2, [r3, #24]
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8002ce6:	68da      	ldr	r2, [r3, #12]
 8002ce8:	694e      	ldr	r6, [r1, #20]
 8002cea:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 8002cee:	0052      	lsls	r2, r2, #1
 8002cf0:	4096      	lsls	r6, r2
    switch (sConfig->OffsetNumber)
 8002cf2:	690a      	ldr	r2, [r1, #16]
 8002cf4:	3a01      	subs	r2, #1
      MODIFY_REG(hadc->Instance->OFR1               ,
 8002cf6:	06a7      	lsls	r7, r4, #26
    switch (sConfig->OffsetNumber)
 8002cf8:	2a03      	cmp	r2, #3
 8002cfa:	d86b      	bhi.n	8002dd4 <HAL_ADC_ConfigChannel+0x15c>
 8002cfc:	e8df f002 	tbb	[pc, r2]
 8002d00:	5f544931 	.word	0x5f544931
    else if (sConfig->Rank < 10U)
 8002d04:	2e09      	cmp	r6, #9
 8002d06:	d80a      	bhi.n	8002d1e <HAL_ADC_ConfigChannel+0xa6>
      MODIFY_REG(hadc->Instance->SQR2,
 8002d08:	6b5e      	ldr	r6, [r3, #52]	@ 0x34
 8002d0a:	3a1e      	subs	r2, #30
 8002d0c:	271f      	movs	r7, #31
 8002d0e:	4097      	lsls	r7, r2
 8002d10:	ea26 0607 	bic.w	r6, r6, r7
 8002d14:	fa04 f202 	lsl.w	r2, r4, r2
 8002d18:	4332      	orrs	r2, r6
 8002d1a:	635a      	str	r2, [r3, #52]	@ 0x34
 8002d1c:	e7ce      	b.n	8002cbc <HAL_ADC_ConfigChannel+0x44>
    else if (sConfig->Rank < 15U)
 8002d1e:	2e0e      	cmp	r6, #14
 8002d20:	f04f 061f 	mov.w	r6, #31
 8002d24:	d809      	bhi.n	8002d3a <HAL_ADC_ConfigChannel+0xc2>
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8002d26:	6b9f      	ldr	r7, [r3, #56]	@ 0x38
 8002d28:	3a3c      	subs	r2, #60	@ 0x3c
 8002d2a:	4096      	lsls	r6, r2
 8002d2c:	ea27 0606 	bic.w	r6, r7, r6
 8002d30:	fa04 f202 	lsl.w	r2, r4, r2
 8002d34:	4332      	orrs	r2, r6
 8002d36:	639a      	str	r2, [r3, #56]	@ 0x38
 8002d38:	e7c0      	b.n	8002cbc <HAL_ADC_ConfigChannel+0x44>
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8002d3a:	6bdf      	ldr	r7, [r3, #60]	@ 0x3c
 8002d3c:	3a5a      	subs	r2, #90	@ 0x5a
 8002d3e:	4096      	lsls	r6, r2
 8002d40:	ea27 0606 	bic.w	r6, r7, r6
 8002d44:	fa04 f202 	lsl.w	r2, r4, r2
 8002d48:	4332      	orrs	r2, r6
 8002d4a:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002d4c:	e7b6      	b.n	8002cbc <HAL_ADC_ConfigChannel+0x44>
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002d4e:	695f      	ldr	r7, [r3, #20]
 8002d50:	4096      	lsls	r6, r2
 8002d52:	ea27 0606 	bic.w	r6, r7, r6
 8002d56:	fa0c fc02 	lsl.w	ip, ip, r2
 8002d5a:	ea46 060c 	orr.w	r6, r6, ip
 8002d5e:	615e      	str	r6, [r3, #20]
 8002d60:	e7c1      	b.n	8002ce6 <HAL_ADC_ConfigChannel+0x6e>
      MODIFY_REG(hadc->Instance->OFR1               ,
 8002d62:	f8d3 c060 	ldr.w	ip, [r3, #96]	@ 0x60
 8002d66:	4a7f      	ldr	r2, [pc, #508]	@ (8002f64 <HAL_ADC_ConfigChannel+0x2ec>)
 8002d68:	ea0c 0202 	and.w	r2, ip, r2
 8002d6c:	433a      	orrs	r2, r7
 8002d6e:	4332      	orrs	r2, r6
 8002d70:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8002d74:	661a      	str	r2, [r3, #96]	@ 0x60
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002d76:	689a      	ldr	r2, [r3, #8]
 8002d78:	f002 0203 	and.w	r2, r2, #3
 8002d7c:	2a01      	cmp	r2, #1
 8002d7e:	d14d      	bne.n	8002e1c <HAL_ADC_ConfigChannel+0x1a4>
 8002d80:	681a      	ldr	r2, [r3, #0]
 8002d82:	07d6      	lsls	r6, r2, #31
 8002d84:	d54a      	bpl.n	8002e1c <HAL_ADC_ConfigChannel+0x1a4>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d86:	2000      	movs	r0, #0
  __HAL_UNLOCK(hadc);
 8002d88:	2300      	movs	r3, #0
 8002d8a:	f885 303c 	strb.w	r3, [r5, #60]	@ 0x3c
}
 8002d8e:	b003      	add	sp, #12
 8002d90:	bdf0      	pop	{r4, r5, r6, r7, pc}
      MODIFY_REG(hadc->Instance->OFR2               ,
 8002d92:	f8d3 c064 	ldr.w	ip, [r3, #100]	@ 0x64
 8002d96:	4a73      	ldr	r2, [pc, #460]	@ (8002f64 <HAL_ADC_ConfigChannel+0x2ec>)
 8002d98:	ea0c 0202 	and.w	r2, ip, r2
 8002d9c:	433a      	orrs	r2, r7
 8002d9e:	4332      	orrs	r2, r6
 8002da0:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8002da4:	665a      	str	r2, [r3, #100]	@ 0x64
      break;
 8002da6:	e7e6      	b.n	8002d76 <HAL_ADC_ConfigChannel+0xfe>
      MODIFY_REG(hadc->Instance->OFR3               ,
 8002da8:	f8d3 c068 	ldr.w	ip, [r3, #104]	@ 0x68
 8002dac:	4a6d      	ldr	r2, [pc, #436]	@ (8002f64 <HAL_ADC_ConfigChannel+0x2ec>)
 8002dae:	ea0c 0202 	and.w	r2, ip, r2
 8002db2:	433a      	orrs	r2, r7
 8002db4:	4332      	orrs	r2, r6
 8002db6:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8002dba:	669a      	str	r2, [r3, #104]	@ 0x68
      break;
 8002dbc:	e7db      	b.n	8002d76 <HAL_ADC_ConfigChannel+0xfe>
      MODIFY_REG(hadc->Instance->OFR4               ,
 8002dbe:	f8d3 c06c 	ldr.w	ip, [r3, #108]	@ 0x6c
 8002dc2:	4a68      	ldr	r2, [pc, #416]	@ (8002f64 <HAL_ADC_ConfigChannel+0x2ec>)
 8002dc4:	ea0c 0202 	and.w	r2, ip, r2
 8002dc8:	433a      	orrs	r2, r7
 8002dca:	4332      	orrs	r2, r6
 8002dcc:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8002dd0:	66da      	str	r2, [r3, #108]	@ 0x6c
 8002dd2:	e7d0      	b.n	8002d76 <HAL_ADC_ConfigChannel+0xfe>
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002dd4:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002dd6:	f002 42f8 	and.w	r2, r2, #2080374784	@ 0x7c000000
 8002dda:	42ba      	cmp	r2, r7
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8002ddc:	bf02      	ittt	eq
 8002dde:	6e1a      	ldreq	r2, [r3, #96]	@ 0x60
 8002de0:	f022 4200 	biceq.w	r2, r2, #2147483648	@ 0x80000000
 8002de4:	661a      	streq	r2, [r3, #96]	@ 0x60
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002de6:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8002de8:	f002 42f8 	and.w	r2, r2, #2080374784	@ 0x7c000000
 8002dec:	42ba      	cmp	r2, r7
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8002dee:	bf02      	ittt	eq
 8002df0:	6e5a      	ldreq	r2, [r3, #100]	@ 0x64
 8002df2:	f022 4200 	biceq.w	r2, r2, #2147483648	@ 0x80000000
 8002df6:	665a      	streq	r2, [r3, #100]	@ 0x64
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002df8:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8002dfa:	f002 42f8 	and.w	r2, r2, #2080374784	@ 0x7c000000
 8002dfe:	42ba      	cmp	r2, r7
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8002e00:	bf02      	ittt	eq
 8002e02:	6e9a      	ldreq	r2, [r3, #104]	@ 0x68
 8002e04:	f022 4200 	biceq.w	r2, r2, #2147483648	@ 0x80000000
 8002e08:	669a      	streq	r2, [r3, #104]	@ 0x68
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002e0a:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8002e0c:	f002 42f8 	and.w	r2, r2, #2080374784	@ 0x7c000000
 8002e10:	42ba      	cmp	r2, r7
 8002e12:	d1b0      	bne.n	8002d76 <HAL_ADC_ConfigChannel+0xfe>
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8002e14:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8002e16:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002e1a:	e7d9      	b.n	8002dd0 <HAL_ADC_ConfigChannel+0x158>
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002e1c:	2201      	movs	r2, #1
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002e1e:	2801      	cmp	r0, #1
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002e20:	fa02 f204 	lsl.w	r2, r2, r4
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002e24:	d047      	beq.n	8002eb6 <HAL_ADC_ConfigChannel+0x23e>
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002e26:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 8002e2a:	ea21 0202 	bic.w	r2, r1, r2
 8002e2e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002e32:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002e36:	d164      	bne.n	8002f02 <HAL_ADC_ConfigChannel+0x28a>
 8002e38:	494b      	ldr	r1, [pc, #300]	@ (8002f68 <HAL_ADC_ConfigChannel+0x2f0>)
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002e3a:	2c10      	cmp	r4, #16
 8002e3c:	d166      	bne.n	8002f0c <HAL_ADC_ConfigChannel+0x294>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002e3e:	688a      	ldr	r2, [r1, #8]
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002e40:	f412 0f00 	tst.w	r2, #8388608	@ 0x800000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002e44:	d19f      	bne.n	8002d86 <HAL_ADC_ConfigChannel+0x10e>
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002e46:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002e4a:	4a48      	ldr	r2, [pc, #288]	@ (8002f6c <HAL_ADC_ConfigChannel+0x2f4>)
 8002e4c:	d009      	beq.n	8002e62 <HAL_ADC_ConfigChannel+0x1ea>
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d069      	beq.n	8002f26 <HAL_ADC_ConfigChannel+0x2ae>
 8002e52:	f502 7240 	add.w	r2, r2, #768	@ 0x300
 8002e56:	4293      	cmp	r3, r2
 8002e58:	4845      	ldr	r0, [pc, #276]	@ (8002f70 <HAL_ADC_ConfigChannel+0x2f8>)
 8002e5a:	d067      	beq.n	8002f2c <HAL_ADC_ConfigChannel+0x2b4>
 8002e5c:	4283      	cmp	r3, r0
 8002e5e:	bf18      	it	ne
 8002e60:	2200      	movne	r2, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002e62:	6898      	ldr	r0, [r3, #8]
 8002e64:	f000 0003 	and.w	r0, r0, #3
 8002e68:	2801      	cmp	r0, #1
 8002e6a:	d102      	bne.n	8002e72 <HAL_ADC_ConfigChannel+0x1fa>
 8002e6c:	6818      	ldr	r0, [r3, #0]
 8002e6e:	07c0      	lsls	r0, r0, #31
 8002e70:	d470      	bmi.n	8002f54 <HAL_ADC_ConfigChannel+0x2dc>
 8002e72:	b13a      	cbz	r2, 8002e84 <HAL_ADC_ConfigChannel+0x20c>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8002e74:	6890      	ldr	r0, [r2, #8]
 8002e76:	f000 0003 	and.w	r0, r0, #3
 8002e7a:	2801      	cmp	r0, #1
 8002e7c:	d102      	bne.n	8002e84 <HAL_ADC_ConfigChannel+0x20c>
 8002e7e:	6812      	ldr	r2, [r2, #0]
 8002e80:	07d2      	lsls	r2, r2, #31
 8002e82:	d467      	bmi.n	8002f54 <HAL_ADC_ConfigChannel+0x2dc>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002e84:	2c10      	cmp	r4, #16
 8002e86:	d153      	bne.n	8002f30 <HAL_ADC_ConfigChannel+0x2b8>
 8002e88:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002e8c:	f47f af7b 	bne.w	8002d86 <HAL_ADC_ConfigChannel+0x10e>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8002e90:	688b      	ldr	r3, [r1, #8]
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002e92:	4a38      	ldr	r2, [pc, #224]	@ (8002f74 <HAL_ADC_ConfigChannel+0x2fc>)
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8002e94:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002e98:	608b      	str	r3, [r1, #8]
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002e9a:	4b37      	ldr	r3, [pc, #220]	@ (8002f78 <HAL_ADC_ConfigChannel+0x300>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	fbb3 f3f2 	udiv	r3, r3, r2
 8002ea2:	220a      	movs	r2, #10
 8002ea4:	4353      	muls	r3, r2
            wait_loop_index--;
 8002ea6:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 8002ea8:	9b01      	ldr	r3, [sp, #4]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	f43f af6b 	beq.w	8002d86 <HAL_ADC_ConfigChannel+0x10e>
            wait_loop_index--;
 8002eb0:	9b01      	ldr	r3, [sp, #4]
 8002eb2:	3b01      	subs	r3, #1
 8002eb4:	e7f7      	b.n	8002ea6 <HAL_ADC_ConfigChannel+0x22e>
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002eb6:	f8d3 00b0 	ldr.w	r0, [r3, #176]	@ 0xb0
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8002eba:	2c09      	cmp	r4, #9
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002ebc:	ea42 0200 	orr.w	r2, r2, r0
 8002ec0:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002ec4:	6888      	ldr	r0, [r1, #8]
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8002ec6:	d90c      	bls.n	8002ee2 <HAL_ADC_ConfigChannel+0x26a>
        MODIFY_REG(hadc->Instance->SMPR2,
 8002ec8:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 8002ecc:	6999      	ldr	r1, [r3, #24]
 8002ece:	3a1b      	subs	r2, #27
 8002ed0:	2607      	movs	r6, #7
 8002ed2:	4096      	lsls	r6, r2
 8002ed4:	ea21 0106 	bic.w	r1, r1, r6
 8002ed8:	fa00 f202 	lsl.w	r2, r0, r2
 8002edc:	430a      	orrs	r2, r1
 8002ede:	619a      	str	r2, [r3, #24]
 8002ee0:	e7a7      	b.n	8002e32 <HAL_ADC_ConfigChannel+0x1ba>
        MODIFY_REG(hadc->Instance->SMPR1,
 8002ee2:	1c61      	adds	r1, r4, #1
 8002ee4:	695a      	ldr	r2, [r3, #20]
 8002ee6:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8002eea:	2607      	movs	r6, #7
 8002eec:	408e      	lsls	r6, r1
 8002eee:	ea22 0206 	bic.w	r2, r2, r6
 8002ef2:	fa00 f101 	lsl.w	r1, r0, r1
 8002ef6:	430a      	orrs	r2, r1
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002ef8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
        MODIFY_REG(hadc->Instance->SMPR1,
 8002efc:	615a      	str	r2, [r3, #20]
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002efe:	f43f af42 	beq.w	8002d86 <HAL_ADC_ConfigChannel+0x10e>
 8002f02:	4a1a      	ldr	r2, [pc, #104]	@ (8002f6c <HAL_ADC_ConfigChannel+0x2f4>)
 8002f04:	4293      	cmp	r3, r2
 8002f06:	d097      	beq.n	8002e38 <HAL_ADC_ConfigChannel+0x1c0>
 8002f08:	491c      	ldr	r1, [pc, #112]	@ (8002f7c <HAL_ADC_ConfigChannel+0x304>)
 8002f0a:	e796      	b.n	8002e3a <HAL_ADC_ConfigChannel+0x1c2>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002f0c:	2c11      	cmp	r4, #17
 8002f0e:	d103      	bne.n	8002f18 <HAL_ADC_ConfigChannel+0x2a0>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002f10:	688a      	ldr	r2, [r1, #8]
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002f12:	f012 7f80 	tst.w	r2, #16777216	@ 0x1000000
 8002f16:	e795      	b.n	8002e44 <HAL_ADC_ConfigChannel+0x1cc>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002f18:	2c12      	cmp	r4, #18
 8002f1a:	f47f af34 	bne.w	8002d86 <HAL_ADC_ConfigChannel+0x10e>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8002f1e:	688a      	ldr	r2, [r1, #8]
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002f20:	f412 0f80 	tst.w	r2, #4194304	@ 0x400000
 8002f24:	e78e      	b.n	8002e44 <HAL_ADC_ConfigChannel+0x1cc>
 8002f26:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8002f2a:	e79a      	b.n	8002e62 <HAL_ADC_ConfigChannel+0x1ea>
 8002f2c:	4602      	mov	r2, r0
 8002f2e:	e798      	b.n	8002e62 <HAL_ADC_ConfigChannel+0x1ea>
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8002f30:	2c11      	cmp	r4, #17
 8002f32:	d108      	bne.n	8002f46 <HAL_ADC_ConfigChannel+0x2ce>
 8002f34:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002f38:	f47f af25 	bne.w	8002d86 <HAL_ADC_ConfigChannel+0x10e>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8002f3c:	688b      	ldr	r3, [r1, #8]
 8002f3e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8002f42:	608b      	str	r3, [r1, #8]
 8002f44:	e71f      	b.n	8002d86 <HAL_ADC_ConfigChannel+0x10e>
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002f46:	2c12      	cmp	r4, #18
 8002f48:	f47f af1d 	bne.w	8002d86 <HAL_ADC_ConfigChannel+0x10e>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8002f4c:	688b      	ldr	r3, [r1, #8]
 8002f4e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002f52:	e7f6      	b.n	8002f42 <HAL_ADC_ConfigChannel+0x2ca>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f54:	6c2b      	ldr	r3, [r5, #64]	@ 0x40
 8002f56:	f043 0320 	orr.w	r3, r3, #32
 8002f5a:	642b      	str	r3, [r5, #64]	@ 0x40
    tmp_hal_status = HAL_ERROR;
 8002f5c:	2001      	movs	r0, #1
 8002f5e:	e713      	b.n	8002d88 <HAL_ADC_ConfigChannel+0x110>
  __HAL_LOCK(hadc);
 8002f60:	2002      	movs	r0, #2
 8002f62:	e714      	b.n	8002d8e <HAL_ADC_ConfigChannel+0x116>
 8002f64:	83fff000 	.word	0x83fff000
 8002f68:	50000300 	.word	0x50000300
 8002f6c:	50000100 	.word	0x50000100
 8002f70:	50000500 	.word	0x50000500
 8002f74:	000f4240 	.word	0x000f4240
 8002f78:	2000000c 	.word	0x2000000c
 8002f7c:	50000700 	.word	0x50000700

08002f80 <HAL_ADCEx_MultiModeConfigChannel>:
{
 8002f80:	b5f0      	push	{r4, r5, r6, r7, lr}
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002f82:	6804      	ldr	r4, [r0, #0]
 8002f84:	4b3c      	ldr	r3, [pc, #240]	@ (8003078 <HAL_ADCEx_MultiModeConfigChannel+0xf8>)
 8002f86:	f1b4 4fa0 	cmp.w	r4, #1342177280	@ 0x50000000
{
 8002f8a:	4605      	mov	r5, r0
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002f8c:	d009      	beq.n	8002fa2 <HAL_ADCEx_MultiModeConfigChannel+0x22>
 8002f8e:	429c      	cmp	r4, r3
 8002f90:	d047      	beq.n	8003022 <HAL_ADCEx_MultiModeConfigChannel+0xa2>
 8002f92:	4a3a      	ldr	r2, [pc, #232]	@ (800307c <HAL_ADCEx_MultiModeConfigChannel+0xfc>)
 8002f94:	4294      	cmp	r4, r2
 8002f96:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002f9a:	d002      	beq.n	8002fa2 <HAL_ADCEx_MultiModeConfigChannel+0x22>
 8002f9c:	429c      	cmp	r4, r3
 8002f9e:	d166      	bne.n	800306e <HAL_ADCEx_MultiModeConfigChannel+0xee>
 8002fa0:	4613      	mov	r3, r2
  __HAL_LOCK(hadc);
 8002fa2:	f895 203c 	ldrb.w	r2, [r5, #60]	@ 0x3c
 8002fa6:	2a01      	cmp	r2, #1
 8002fa8:	d063      	beq.n	8003072 <HAL_ADCEx_MultiModeConfigChannel+0xf2>
 8002faa:	2201      	movs	r2, #1
  if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002fac:	6808      	ldr	r0, [r1, #0]
  __HAL_LOCK(hadc);
 8002fae:	f885 203c 	strb.w	r2, [r5, #60]	@ 0x3c
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8002fb2:	68a2      	ldr	r2, [r4, #8]
 8002fb4:	0752      	lsls	r2, r2, #29
 8002fb6:	d454      	bmi.n	8003062 <HAL_ADCEx_MultiModeConfigChannel+0xe2>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8002fb8:	689a      	ldr	r2, [r3, #8]
 8002fba:	0757      	lsls	r7, r2, #29
 8002fbc:	d451      	bmi.n	8003062 <HAL_ADCEx_MultiModeConfigChannel+0xe2>
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002fbe:	f1b4 4fa0 	cmp.w	r4, #1342177280	@ 0x50000000
 8002fc2:	d031      	beq.n	8003028 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8002fc4:	4f2c      	ldr	r7, [pc, #176]	@ (8003078 <HAL_ADCEx_MultiModeConfigChannel+0xf8>)
 8002fc6:	4a2e      	ldr	r2, [pc, #184]	@ (8003080 <HAL_ADCEx_MultiModeConfigChannel+0x100>)
 8002fc8:	4e2e      	ldr	r6, [pc, #184]	@ (8003084 <HAL_ADCEx_MultiModeConfigChannel+0x104>)
 8002fca:	42bc      	cmp	r4, r7
 8002fcc:	bf08      	it	eq
 8002fce:	4632      	moveq	r2, r6
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002fd0:	b360      	cbz	r0, 800302c <HAL_ADCEx_MultiModeConfigChannel+0xac>
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8002fd2:	6897      	ldr	r7, [r2, #8]
 8002fd4:	f895 c030 	ldrb.w	ip, [r5, #48]	@ 0x30
 8002fd8:	684e      	ldr	r6, [r1, #4]
 8002fda:	f427 4760 	bic.w	r7, r7, #57344	@ 0xe000
 8002fde:	ea46 364c 	orr.w	r6, r6, ip, lsl #13
 8002fe2:	433e      	orrs	r6, r7
 8002fe4:	6096      	str	r6, [r2, #8]
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002fe6:	68a6      	ldr	r6, [r4, #8]
 8002fe8:	f006 0603 	and.w	r6, r6, #3
 8002fec:	2e01      	cmp	r6, #1
 8002fee:	d102      	bne.n	8002ff6 <HAL_ADCEx_MultiModeConfigChannel+0x76>
 8002ff0:	6824      	ldr	r4, [r4, #0]
 8002ff2:	07e6      	lsls	r6, r4, #31
 8002ff4:	d410      	bmi.n	8003018 <HAL_ADCEx_MultiModeConfigChannel+0x98>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8002ff6:	689c      	ldr	r4, [r3, #8]
 8002ff8:	f004 0403 	and.w	r4, r4, #3
 8002ffc:	2c01      	cmp	r4, #1
 8002ffe:	d102      	bne.n	8003006 <HAL_ADCEx_MultiModeConfigChannel+0x86>
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	07dc      	lsls	r4, r3, #31
 8003004:	d408      	bmi.n	8003018 <HAL_ADCEx_MultiModeConfigChannel+0x98>
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8003006:	6893      	ldr	r3, [r2, #8]
 8003008:	6889      	ldr	r1, [r1, #8]
 800300a:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800300e:	4308      	orrs	r0, r1
 8003010:	f023 030f 	bic.w	r3, r3, #15
 8003014:	4318      	orrs	r0, r3
 8003016:	6090      	str	r0, [r2, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003018:	2000      	movs	r0, #0
  __HAL_UNLOCK(hadc);
 800301a:	2300      	movs	r3, #0
 800301c:	f885 303c 	strb.w	r3, [r5, #60]	@ 0x3c
} 
 8003020:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003022:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003026:	e7bc      	b.n	8002fa2 <HAL_ADCEx_MultiModeConfigChannel+0x22>
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003028:	4a16      	ldr	r2, [pc, #88]	@ (8003084 <HAL_ADCEx_MultiModeConfigChannel+0x104>)
 800302a:	e7d1      	b.n	8002fd0 <HAL_ADCEx_MultiModeConfigChannel+0x50>
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800302c:	6891      	ldr	r1, [r2, #8]
 800302e:	f421 4160 	bic.w	r1, r1, #57344	@ 0xe000
 8003032:	6091      	str	r1, [r2, #8]
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8003034:	68a1      	ldr	r1, [r4, #8]
 8003036:	f001 0103 	and.w	r1, r1, #3
 800303a:	2901      	cmp	r1, #1
 800303c:	d102      	bne.n	8003044 <HAL_ADCEx_MultiModeConfigChannel+0xc4>
 800303e:	6821      	ldr	r1, [r4, #0]
 8003040:	07c9      	lsls	r1, r1, #31
 8003042:	d4e9      	bmi.n	8003018 <HAL_ADCEx_MultiModeConfigChannel+0x98>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8003044:	6899      	ldr	r1, [r3, #8]
 8003046:	f001 0103 	and.w	r1, r1, #3
 800304a:	2901      	cmp	r1, #1
 800304c:	d102      	bne.n	8003054 <HAL_ADCEx_MultiModeConfigChannel+0xd4>
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	07db      	lsls	r3, r3, #31
 8003052:	d4e1      	bmi.n	8003018 <HAL_ADCEx_MultiModeConfigChannel+0x98>
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8003054:	6893      	ldr	r3, [r2, #8]
 8003056:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800305a:	f023 030f 	bic.w	r3, r3, #15
 800305e:	6093      	str	r3, [r2, #8]
 8003060:	e7da      	b.n	8003018 <HAL_ADCEx_MultiModeConfigChannel+0x98>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003062:	6c2b      	ldr	r3, [r5, #64]	@ 0x40
 8003064:	f043 0320 	orr.w	r3, r3, #32
 8003068:	642b      	str	r3, [r5, #64]	@ 0x40
    tmp_hal_status = HAL_ERROR;
 800306a:	2001      	movs	r0, #1
 800306c:	e7d5      	b.n	800301a <HAL_ADCEx_MultiModeConfigChannel+0x9a>
    return HAL_ERROR;
 800306e:	2001      	movs	r0, #1
 8003070:	e7d6      	b.n	8003020 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
  __HAL_LOCK(hadc);
 8003072:	2002      	movs	r0, #2
 8003074:	e7d4      	b.n	8003020 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 8003076:	bf00      	nop
 8003078:	50000100 	.word	0x50000100
 800307c:	50000400 	.word	0x50000400
 8003080:	50000700 	.word	0x50000700
 8003084:	50000300 	.word	0x50000300

08003088 <HAL_NVIC_SetPriorityGrouping>:
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
<<<<<<< HEAD
 800511c:	4907      	ldr	r1, [pc, #28]	@ (800513c <HAL_NVIC_SetPriorityGrouping+0x20>)
 800511e:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005120:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005124:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005126:	0412      	lsls	r2, r2, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005128:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800512c:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800512e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005130:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8005134:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8005138:	60cb      	str	r3, [r1, #12]
=======
 8003088:	4907      	ldr	r1, [pc, #28]	@ (80030a8 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800308a:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800308c:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003090:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003092:	0412      	lsls	r2, r2, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003094:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003098:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800309a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800309c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80030a0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 80030a4:	60cb      	str	r3, [r1, #12]
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
<<<<<<< HEAD
 800513a:	4770      	bx	lr
 800513c:	e000ed00 	.word	0xe000ed00

08005140 <HAL_NVIC_SetPriority>:
=======
 80030a6:	4770      	bx	lr
 80030a8:	e000ed00 	.word	0xe000ed00

080030ac <HAL_NVIC_SetPriority>:
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
<<<<<<< HEAD
 8005140:	4b16      	ldr	r3, [pc, #88]	@ (800519c <HAL_NVIC_SetPriority+0x5c>)
=======
 80030ac:	4b16      	ldr	r3, [pc, #88]	@ (8003108 <HAL_NVIC_SetPriority+0x5c>)
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
<<<<<<< HEAD
 8005142:	b530      	push	{r4, r5, lr}
 8005144:	68dc      	ldr	r4, [r3, #12]
 8005146:	f3c4 2402 	ubfx	r4, r4, #8, #3
=======
 80030ae:	b530      	push	{r4, r5, lr}
 80030b0:	68dc      	ldr	r4, [r3, #12]
 80030b2:	f3c4 2402 	ubfx	r4, r4, #8, #3
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
<<<<<<< HEAD
 800514a:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800514e:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005150:	2b04      	cmp	r3, #4
 8005152:	bf28      	it	cs
 8005154:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005156:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005158:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800515c:	bf8c      	ite	hi
 800515e:	3c03      	subhi	r4, #3
 8005160:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005162:	fa05 f303 	lsl.w	r3, r5, r3
 8005166:	ea21 0303 	bic.w	r3, r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800516a:	40a5      	lsls	r5, r4
 800516c:	ea22 0205 	bic.w	r2, r2, r5
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005170:	40a3      	lsls	r3, r4
  if ((int32_t)(IRQn) >= 0)
 8005172:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005174:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005178:	bfac      	ite	ge
 800517a:	f100 4060 	addge.w	r0, r0, #3758096384	@ 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800517e:	4a08      	ldrlt	r2, [pc, #32]	@ (80051a0 <HAL_NVIC_SetPriority+0x60>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005180:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005184:	bfb8      	it	lt
 8005186:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800518a:	b2db      	uxtb	r3, r3
 800518c:	bfaa      	itet	ge
 800518e:	f500 4061 	addge.w	r0, r0, #57600	@ 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005192:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005194:	f880 3300 	strbge.w	r3, [r0, #768]	@ 0x300
=======
 80030b6:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80030ba:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80030bc:	2b04      	cmp	r3, #4
 80030be:	bf28      	it	cs
 80030c0:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80030c2:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030c4:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80030c8:	bf8c      	ite	hi
 80030ca:	3c03      	subhi	r4, #3
 80030cc:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030ce:	fa05 f303 	lsl.w	r3, r5, r3
 80030d2:	ea21 0303 	bic.w	r3, r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80030d6:	40a5      	lsls	r5, r4
 80030d8:	ea22 0205 	bic.w	r2, r2, r5
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030dc:	40a3      	lsls	r3, r4
  if ((int32_t)(IRQn) >= 0)
 80030de:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030e0:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030e4:	bfac      	ite	ge
 80030e6:	f100 4060 	addge.w	r0, r0, #3758096384	@ 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030ea:	4a08      	ldrlt	r2, [pc, #32]	@ (800310c <HAL_NVIC_SetPriority+0x60>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030ec:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030f0:	bfb8      	it	lt
 80030f2:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030f6:	b2db      	uxtb	r3, r3
 80030f8:	bfaa      	itet	ge
 80030fa:	f500 4061 	addge.w	r0, r0, #57600	@ 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030fe:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003100:	f880 3300 	strbge.w	r3, [r0, #768]	@ 0x300
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
<<<<<<< HEAD
 8005198:	bd30      	pop	{r4, r5, pc}
 800519a:	bf00      	nop
 800519c:	e000ed00 	.word	0xe000ed00
 80051a0:	e000ed14 	.word	0xe000ed14

080051a4 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80051a4:	2800      	cmp	r0, #0
 80051a6:	db07      	blt.n	80051b8 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80051a8:	0941      	lsrs	r1, r0, #5
 80051aa:	4a04      	ldr	r2, [pc, #16]	@ (80051bc <HAL_NVIC_EnableIRQ+0x18>)
 80051ac:	f000 001f 	and.w	r0, r0, #31
 80051b0:	2301      	movs	r3, #1
 80051b2:	4083      	lsls	r3, r0
 80051b4:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
=======
 8003104:	bd30      	pop	{r4, r5, pc}
 8003106:	bf00      	nop
 8003108:	e000ed00 	.word	0xe000ed00
 800310c:	e000ed14 	.word	0xe000ed14

08003110 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8003110:	2800      	cmp	r0, #0
 8003112:	db07      	blt.n	8003124 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003114:	0941      	lsrs	r1, r0, #5
 8003116:	4a04      	ldr	r2, [pc, #16]	@ (8003128 <HAL_NVIC_EnableIRQ+0x18>)
 8003118:	f000 001f 	and.w	r0, r0, #31
 800311c:	2301      	movs	r3, #1
 800311e:	4083      	lsls	r3, r0
 8003120:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
<<<<<<< HEAD
 80051b8:	4770      	bx	lr
 80051ba:	bf00      	nop
 80051bc:	e000e100 	.word	0xe000e100

080051c0 <DMA_CalcBaseAndBitshift>:
=======
 8003124:	4770      	bx	lr
 8003126:	bf00      	nop
 8003128:	e000e100 	.word	0xe000e100

0800312c <DMA_CalcBaseAndBitshift>:
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
<<<<<<< HEAD
 80051c0:	6802      	ldr	r2, [r0, #0]
 80051c2:	4b0a      	ldr	r3, [pc, #40]	@ (80051ec <DMA_CalcBaseAndBitshift+0x2c>)
 80051c4:	429a      	cmp	r2, r3
 80051c6:	f04f 0114 	mov.w	r1, #20
 80051ca:	d808      	bhi.n	80051de <DMA_CalcBaseAndBitshift+0x1e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80051cc:	4b08      	ldr	r3, [pc, #32]	@ (80051f0 <DMA_CalcBaseAndBitshift+0x30>)
 80051ce:	4413      	add	r3, r2
 80051d0:	4a08      	ldr	r2, [pc, #32]	@ (80051f4 <DMA_CalcBaseAndBitshift+0x34>)
 80051d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80051d6:	009b      	lsls	r3, r3, #2
    hdma->DmaBaseAddress = DMA1;
 80051d8:	e9c0 230f 	strd	r2, r3, [r0, #60]	@ 0x3c
=======
 800312c:	6802      	ldr	r2, [r0, #0]
 800312e:	4b0a      	ldr	r3, [pc, #40]	@ (8003158 <DMA_CalcBaseAndBitshift+0x2c>)
 8003130:	429a      	cmp	r2, r3
 8003132:	f04f 0114 	mov.w	r1, #20
 8003136:	d808      	bhi.n	800314a <DMA_CalcBaseAndBitshift+0x1e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003138:	4b08      	ldr	r3, [pc, #32]	@ (800315c <DMA_CalcBaseAndBitshift+0x30>)
 800313a:	4413      	add	r3, r2
 800313c:	4a08      	ldr	r2, [pc, #32]	@ (8003160 <DMA_CalcBaseAndBitshift+0x34>)
 800313e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003142:	009b      	lsls	r3, r3, #2
    hdma->DmaBaseAddress = DMA1;
 8003144:	e9c0 230f 	strd	r2, r3, [r0, #60]	@ 0x3c
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
<<<<<<< HEAD
 80051dc:	4770      	bx	lr
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80051de:	4b06      	ldr	r3, [pc, #24]	@ (80051f8 <DMA_CalcBaseAndBitshift+0x38>)
 80051e0:	4413      	add	r3, r2
 80051e2:	4a06      	ldr	r2, [pc, #24]	@ (80051fc <DMA_CalcBaseAndBitshift+0x3c>)
 80051e4:	fbb3 f3f1 	udiv	r3, r3, r1
 80051e8:	009b      	lsls	r3, r3, #2
    hdma->DmaBaseAddress = DMA2;
 80051ea:	e7f5      	b.n	80051d8 <DMA_CalcBaseAndBitshift+0x18>
 80051ec:	40020407 	.word	0x40020407
 80051f0:	bffdfff8 	.word	0xbffdfff8
 80051f4:	40020000 	.word	0x40020000
 80051f8:	bffdfbf8 	.word	0xbffdfbf8
 80051fc:	40020400 	.word	0x40020400

08005200 <HAL_DMA_Init>:
{
 8005200:	b538      	push	{r3, r4, r5, lr}
  if(NULL == hdma)
 8005202:	4604      	mov	r4, r0
 8005204:	b1e0      	cbz	r0, 8005240 <HAL_DMA_Init+0x40>
  tmp |=  hdma->Init.Direction        |
 8005206:	e9d0 3501 	ldrd	r3, r5, [r0, #4]
 800520a:	432b      	orrs	r3, r5
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800520c:	68c5      	ldr	r5, [r0, #12]
  tmp = hdma->Instance->CCR;
 800520e:	6801      	ldr	r1, [r0, #0]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005210:	432b      	orrs	r3, r5
 8005212:	6905      	ldr	r5, [r0, #16]
  tmp = hdma->Instance->CCR;
 8005214:	680a      	ldr	r2, [r1, #0]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005216:	432b      	orrs	r3, r5
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005218:	6945      	ldr	r5, [r0, #20]
 800521a:	432b      	orrs	r3, r5
 800521c:	6985      	ldr	r5, [r0, #24]
 800521e:	432b      	orrs	r3, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 8005220:	69c5      	ldr	r5, [r0, #28]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8005222:	f422 527f 	bic.w	r2, r2, #16320	@ 0x3fc0
 8005226:	f022 0230 	bic.w	r2, r2, #48	@ 0x30
          hdma->Init.Mode                | hdma->Init.Priority;
 800522a:	432b      	orrs	r3, r5
  tmp |=  hdma->Init.Direction        |
 800522c:	4313      	orrs	r3, r2
  hdma->Instance->CCR = tmp;
 800522e:	600b      	str	r3, [r1, #0]
  DMA_CalcBaseAndBitshift(hdma);
 8005230:	f7ff ffc6 	bl	80051c0 <DMA_CalcBaseAndBitshift>
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005234:	2000      	movs	r0, #0
  hdma->Lock = HAL_UNLOCKED;
 8005236:	f44f 7380 	mov.w	r3, #256	@ 0x100
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800523a:	63a0      	str	r0, [r4, #56]	@ 0x38
  hdma->Lock = HAL_UNLOCKED;
 800523c:	8423      	strh	r3, [r4, #32]
}
 800523e:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8005240:	2001      	movs	r0, #1
 8005242:	e7fc      	b.n	800523e <HAL_DMA_Init+0x3e>

08005244 <HAL_DMA_Start_IT>:
{
 8005244:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hdma);
 8005246:	f890 4020 	ldrb.w	r4, [r0, #32]
 800524a:	2c01      	cmp	r4, #1
 800524c:	d033      	beq.n	80052b6 <HAL_DMA_Start_IT+0x72>
  if(HAL_DMA_STATE_READY == hdma->State)
 800524e:	f890 5021 	ldrb.w	r5, [r0, #33]	@ 0x21
  __HAL_LOCK(hdma);
 8005252:	2401      	movs	r4, #1
  if(HAL_DMA_STATE_READY == hdma->State)
 8005254:	42a5      	cmp	r5, r4
  __HAL_LOCK(hdma);
 8005256:	f880 4020 	strb.w	r4, [r0, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 800525a:	f04f 0400 	mov.w	r4, #0
 800525e:	d128      	bne.n	80052b2 <HAL_DMA_Start_IT+0x6e>
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005260:	6384      	str	r4, [r0, #56]	@ 0x38
    hdma->State = HAL_DMA_STATE_BUSY;
 8005262:	2602      	movs	r6, #2
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8005264:	6804      	ldr	r4, [r0, #0]
    hdma->State = HAL_DMA_STATE_BUSY;
 8005266:	f880 6021 	strb.w	r6, [r0, #33]	@ 0x21
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800526a:	6826      	ldr	r6, [r4, #0]
 800526c:	f026 0601 	bic.w	r6, r6, #1
 8005270:	6026      	str	r6, [r4, #0]
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8005272:	e9d0 670f 	ldrd	r6, r7, [r0, #60]	@ 0x3c
 8005276:	40bd      	lsls	r5, r7
 8005278:	6075      	str	r5, [r6, #4]
  hdma->Instance->CNDTR = DataLength;
 800527a:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800527c:	6843      	ldr	r3, [r0, #4]
 800527e:	2b10      	cmp	r3, #16
    if(NULL != hdma->XferHalfCpltCallback )
 8005280:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
    hdma->Instance->CPAR = DstAddress;
 8005282:	bf0b      	itete	eq
 8005284:	60a2      	streq	r2, [r4, #8]
    hdma->Instance->CPAR = SrcAddress;
 8005286:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 8005288:	60e1      	streq	r1, [r4, #12]
    hdma->Instance->CMAR = DstAddress;
 800528a:	60e2      	strne	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback )
 800528c:	b14b      	cbz	r3, 80052a2 <HAL_DMA_Start_IT+0x5e>
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800528e:	6823      	ldr	r3, [r4, #0]
 8005290:	f043 030e 	orr.w	r3, r3, #14
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8005294:	6023      	str	r3, [r4, #0]
    hdma->Instance->CCR |= DMA_CCR_EN;
 8005296:	6823      	ldr	r3, [r4, #0]
 8005298:	f043 0301 	orr.w	r3, r3, #1
 800529c:	6023      	str	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800529e:	2000      	movs	r0, #0
}
 80052a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 80052a2:	6823      	ldr	r3, [r4, #0]
 80052a4:	f043 030a 	orr.w	r3, r3, #10
 80052a8:	6023      	str	r3, [r4, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 80052aa:	6823      	ldr	r3, [r4, #0]
 80052ac:	f023 0304 	bic.w	r3, r3, #4
 80052b0:	e7f0      	b.n	8005294 <HAL_DMA_Start_IT+0x50>
    __HAL_UNLOCK(hdma);
 80052b2:	f880 4020 	strb.w	r4, [r0, #32]
  __HAL_LOCK(hdma);
 80052b6:	2002      	movs	r0, #2
 80052b8:	e7f2      	b.n	80052a0 <HAL_DMA_Start_IT+0x5c>

080052ba <HAL_DMA_Abort>:
  if(NULL == hdma)
 80052ba:	b140      	cbz	r0, 80052ce <HAL_DMA_Abort+0x14>
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80052bc:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 80052c0:	2b02      	cmp	r3, #2
 80052c2:	d006      	beq.n	80052d2 <HAL_DMA_Abort+0x18>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80052c4:	2304      	movs	r3, #4
 80052c6:	6383      	str	r3, [r0, #56]	@ 0x38
    __HAL_UNLOCK(hdma);
 80052c8:	2300      	movs	r3, #0
 80052ca:	f880 3020 	strb.w	r3, [r0, #32]
    return HAL_ERROR;
 80052ce:	2001      	movs	r0, #1
 80052d0:	4770      	bx	lr
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80052d2:	6803      	ldr	r3, [r0, #0]
 80052d4:	681a      	ldr	r2, [r3, #0]
 80052d6:	f022 020e 	bic.w	r2, r2, #14
 80052da:	601a      	str	r2, [r3, #0]
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80052dc:	681a      	ldr	r2, [r3, #0]
 80052de:	f022 0201 	bic.w	r2, r2, #1
 80052e2:	601a      	str	r2, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80052e4:	e9d0 210f 	ldrd	r2, r1, [r0, #60]	@ 0x3c
 80052e8:	2301      	movs	r3, #1
 80052ea:	408b      	lsls	r3, r1
 80052ec:	6053      	str	r3, [r2, #4]
  __HAL_UNLOCK(hdma);
 80052ee:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80052f2:	8403      	strh	r3, [r0, #32]
  return HAL_OK;
 80052f4:	2000      	movs	r0, #0
}
 80052f6:	4770      	bx	lr

080052f8 <HAL_DMA_IRQHandler>:
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80052f8:	6bc1      	ldr	r1, [r0, #60]	@ 0x3c
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80052fa:	6c02      	ldr	r2, [r0, #64]	@ 0x40
  uint32_t source_it = hdma->Instance->CCR;
 80052fc:	6803      	ldr	r3, [r0, #0]
{
 80052fe:	b470      	push	{r4, r5, r6}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005300:	680e      	ldr	r6, [r1, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8005302:	681d      	ldr	r5, [r3, #0]
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8005304:	2404      	movs	r4, #4
 8005306:	4094      	lsls	r4, r2
 8005308:	4234      	tst	r4, r6
 800530a:	d00e      	beq.n	800532a <HAL_DMA_IRQHandler+0x32>
 800530c:	f015 0f04 	tst.w	r5, #4
 8005310:	d00b      	beq.n	800532a <HAL_DMA_IRQHandler+0x32>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005312:	681a      	ldr	r2, [r3, #0]
 8005314:	0692      	lsls	r2, r2, #26
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8005316:	bf5e      	ittt	pl
 8005318:	681a      	ldrpl	r2, [r3, #0]
 800531a:	f022 0204 	bicpl.w	r2, r2, #4
 800531e:	601a      	strpl	r2, [r3, #0]
    if(hdma->XferHalfCpltCallback != NULL)
 8005320:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8005322:	604c      	str	r4, [r1, #4]
    if(hdma->XferErrorCallback != NULL)
 8005324:	b363      	cbz	r3, 8005380 <HAL_DMA_IRQHandler+0x88>
}
 8005326:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 8005328:	4718      	bx	r3
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 800532a:	2402      	movs	r4, #2
 800532c:	4094      	lsls	r4, r2
 800532e:	4234      	tst	r4, r6
 8005330:	d012      	beq.n	8005358 <HAL_DMA_IRQHandler+0x60>
 8005332:	f015 0f02 	tst.w	r5, #2
 8005336:	d00f      	beq.n	8005358 <HAL_DMA_IRQHandler+0x60>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005338:	681a      	ldr	r2, [r3, #0]
 800533a:	0695      	lsls	r5, r2, #26
 800533c:	d406      	bmi.n	800534c <HAL_DMA_IRQHandler+0x54>
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 800533e:	681a      	ldr	r2, [r3, #0]
 8005340:	f022 020a 	bic.w	r2, r2, #10
 8005344:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8005346:	2301      	movs	r3, #1
 8005348:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
    __HAL_UNLOCK(hdma);
 800534c:	2300      	movs	r3, #0
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 800534e:	604c      	str	r4, [r1, #4]
    __HAL_UNLOCK(hdma);
 8005350:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 8005354:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8005356:	e7e5      	b.n	8005324 <HAL_DMA_IRQHandler+0x2c>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8005358:	2408      	movs	r4, #8
 800535a:	4094      	lsls	r4, r2
 800535c:	4234      	tst	r4, r6
 800535e:	d00f      	beq.n	8005380 <HAL_DMA_IRQHandler+0x88>
 8005360:	072c      	lsls	r4, r5, #28
 8005362:	d50d      	bpl.n	8005380 <HAL_DMA_IRQHandler+0x88>
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8005364:	681c      	ldr	r4, [r3, #0]
 8005366:	f024 040e 	bic.w	r4, r4, #14
 800536a:	601c      	str	r4, [r3, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800536c:	2301      	movs	r3, #1
 800536e:	fa03 f202 	lsl.w	r2, r3, r2
 8005372:	604a      	str	r2, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005374:	6383      	str	r3, [r0, #56]	@ 0x38
    __HAL_UNLOCK(hdma);
 8005376:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800537a:	8403      	strh	r3, [r0, #32]
    if(hdma->XferErrorCallback != NULL)
 800537c:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800537e:	e7d1      	b.n	8005324 <HAL_DMA_IRQHandler+0x2c>
}
 8005380:	bc70      	pop	{r4, r5, r6}
 8005382:	4770      	bx	lr

08005384 <HAL_DMA_GetError>:
  return hdma->ErrorCode;
 8005384:	6b80      	ldr	r0, [r0, #56]	@ 0x38
}
 8005386:	4770      	bx	lr

08005388 <HAL_GPIO_Init>:
=======
 8003148:	4770      	bx	lr
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800314a:	4b06      	ldr	r3, [pc, #24]	@ (8003164 <DMA_CalcBaseAndBitshift+0x38>)
 800314c:	4413      	add	r3, r2
 800314e:	4a06      	ldr	r2, [pc, #24]	@ (8003168 <DMA_CalcBaseAndBitshift+0x3c>)
 8003150:	fbb3 f3f1 	udiv	r3, r3, r1
 8003154:	009b      	lsls	r3, r3, #2
    hdma->DmaBaseAddress = DMA2;
 8003156:	e7f5      	b.n	8003144 <DMA_CalcBaseAndBitshift+0x18>
 8003158:	40020407 	.word	0x40020407
 800315c:	bffdfff8 	.word	0xbffdfff8
 8003160:	40020000 	.word	0x40020000
 8003164:	bffdfbf8 	.word	0xbffdfbf8
 8003168:	40020400 	.word	0x40020400

0800316c <HAL_DMA_Init>:
{
 800316c:	b538      	push	{r3, r4, r5, lr}
  if(NULL == hdma)
 800316e:	4604      	mov	r4, r0
 8003170:	b1e0      	cbz	r0, 80031ac <HAL_DMA_Init+0x40>
  tmp |=  hdma->Init.Direction        |
 8003172:	e9d0 3501 	ldrd	r3, r5, [r0, #4]
 8003176:	432b      	orrs	r3, r5
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003178:	68c5      	ldr	r5, [r0, #12]
  tmp = hdma->Instance->CCR;
 800317a:	6801      	ldr	r1, [r0, #0]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800317c:	432b      	orrs	r3, r5
 800317e:	6905      	ldr	r5, [r0, #16]
  tmp = hdma->Instance->CCR;
 8003180:	680a      	ldr	r2, [r1, #0]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003182:	432b      	orrs	r3, r5
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003184:	6945      	ldr	r5, [r0, #20]
 8003186:	432b      	orrs	r3, r5
 8003188:	6985      	ldr	r5, [r0, #24]
 800318a:	432b      	orrs	r3, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 800318c:	69c5      	ldr	r5, [r0, #28]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800318e:	f422 527f 	bic.w	r2, r2, #16320	@ 0x3fc0
 8003192:	f022 0230 	bic.w	r2, r2, #48	@ 0x30
          hdma->Init.Mode                | hdma->Init.Priority;
 8003196:	432b      	orrs	r3, r5
  tmp |=  hdma->Init.Direction        |
 8003198:	4313      	orrs	r3, r2
  hdma->Instance->CCR = tmp;
 800319a:	600b      	str	r3, [r1, #0]
  DMA_CalcBaseAndBitshift(hdma);
 800319c:	f7ff ffc6 	bl	800312c <DMA_CalcBaseAndBitshift>
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80031a0:	2000      	movs	r0, #0
  hdma->Lock = HAL_UNLOCKED;
 80031a2:	f44f 7380 	mov.w	r3, #256	@ 0x100
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80031a6:	63a0      	str	r0, [r4, #56]	@ 0x38
  hdma->Lock = HAL_UNLOCKED;
 80031a8:	8423      	strh	r3, [r4, #32]
}
 80031aa:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80031ac:	2001      	movs	r0, #1
 80031ae:	e7fc      	b.n	80031aa <HAL_DMA_Init+0x3e>

080031b0 <HAL_DMA_Start_IT>:
{
 80031b0:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hdma);
 80031b2:	f890 4020 	ldrb.w	r4, [r0, #32]
 80031b6:	2c01      	cmp	r4, #1
 80031b8:	d033      	beq.n	8003222 <HAL_DMA_Start_IT+0x72>
  if(HAL_DMA_STATE_READY == hdma->State)
 80031ba:	f890 5021 	ldrb.w	r5, [r0, #33]	@ 0x21
  __HAL_LOCK(hdma);
 80031be:	2401      	movs	r4, #1
  if(HAL_DMA_STATE_READY == hdma->State)
 80031c0:	42a5      	cmp	r5, r4
  __HAL_LOCK(hdma);
 80031c2:	f880 4020 	strb.w	r4, [r0, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 80031c6:	f04f 0400 	mov.w	r4, #0
 80031ca:	d128      	bne.n	800321e <HAL_DMA_Start_IT+0x6e>
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80031cc:	6384      	str	r4, [r0, #56]	@ 0x38
    hdma->State = HAL_DMA_STATE_BUSY;
 80031ce:	2602      	movs	r6, #2
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80031d0:	6804      	ldr	r4, [r0, #0]
    hdma->State = HAL_DMA_STATE_BUSY;
 80031d2:	f880 6021 	strb.w	r6, [r0, #33]	@ 0x21
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80031d6:	6826      	ldr	r6, [r4, #0]
 80031d8:	f026 0601 	bic.w	r6, r6, #1
 80031dc:	6026      	str	r6, [r4, #0]
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80031de:	e9d0 670f 	ldrd	r6, r7, [r0, #60]	@ 0x3c
 80031e2:	40bd      	lsls	r5, r7
 80031e4:	6075      	str	r5, [r6, #4]
  hdma->Instance->CNDTR = DataLength;
 80031e6:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80031e8:	6843      	ldr	r3, [r0, #4]
 80031ea:	2b10      	cmp	r3, #16
    if(NULL != hdma->XferHalfCpltCallback )
 80031ec:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
    hdma->Instance->CPAR = DstAddress;
 80031ee:	bf0b      	itete	eq
 80031f0:	60a2      	streq	r2, [r4, #8]
    hdma->Instance->CPAR = SrcAddress;
 80031f2:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 80031f4:	60e1      	streq	r1, [r4, #12]
    hdma->Instance->CMAR = DstAddress;
 80031f6:	60e2      	strne	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback )
 80031f8:	b14b      	cbz	r3, 800320e <HAL_DMA_Start_IT+0x5e>
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80031fa:	6823      	ldr	r3, [r4, #0]
 80031fc:	f043 030e 	orr.w	r3, r3, #14
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8003200:	6023      	str	r3, [r4, #0]
    hdma->Instance->CCR |= DMA_CCR_EN;
 8003202:	6823      	ldr	r3, [r4, #0]
 8003204:	f043 0301 	orr.w	r3, r3, #1
 8003208:	6023      	str	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800320a:	2000      	movs	r0, #0
}
 800320c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 800320e:	6823      	ldr	r3, [r4, #0]
 8003210:	f043 030a 	orr.w	r3, r3, #10
 8003214:	6023      	str	r3, [r4, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8003216:	6823      	ldr	r3, [r4, #0]
 8003218:	f023 0304 	bic.w	r3, r3, #4
 800321c:	e7f0      	b.n	8003200 <HAL_DMA_Start_IT+0x50>
    __HAL_UNLOCK(hdma);
 800321e:	f880 4020 	strb.w	r4, [r0, #32]
  __HAL_LOCK(hdma);
 8003222:	2002      	movs	r0, #2
 8003224:	e7f2      	b.n	800320c <HAL_DMA_Start_IT+0x5c>

08003226 <HAL_DMA_IRQHandler>:
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003226:	6bc1      	ldr	r1, [r0, #60]	@ 0x3c
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8003228:	6c02      	ldr	r2, [r0, #64]	@ 0x40
  uint32_t source_it = hdma->Instance->CCR;
 800322a:	6803      	ldr	r3, [r0, #0]
{
 800322c:	b470      	push	{r4, r5, r6}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800322e:	680e      	ldr	r6, [r1, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8003230:	681d      	ldr	r5, [r3, #0]
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8003232:	2404      	movs	r4, #4
 8003234:	4094      	lsls	r4, r2
 8003236:	4234      	tst	r4, r6
 8003238:	d00e      	beq.n	8003258 <HAL_DMA_IRQHandler+0x32>
 800323a:	f015 0f04 	tst.w	r5, #4
 800323e:	d00b      	beq.n	8003258 <HAL_DMA_IRQHandler+0x32>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003240:	681a      	ldr	r2, [r3, #0]
 8003242:	0692      	lsls	r2, r2, #26
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8003244:	bf5e      	ittt	pl
 8003246:	681a      	ldrpl	r2, [r3, #0]
 8003248:	f022 0204 	bicpl.w	r2, r2, #4
 800324c:	601a      	strpl	r2, [r3, #0]
    if(hdma->XferHalfCpltCallback != NULL)
 800324e:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8003250:	604c      	str	r4, [r1, #4]
    if(hdma->XferErrorCallback != NULL)
 8003252:	b363      	cbz	r3, 80032ae <HAL_DMA_IRQHandler+0x88>
}
 8003254:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 8003256:	4718      	bx	r3
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8003258:	2402      	movs	r4, #2
 800325a:	4094      	lsls	r4, r2
 800325c:	4234      	tst	r4, r6
 800325e:	d012      	beq.n	8003286 <HAL_DMA_IRQHandler+0x60>
 8003260:	f015 0f02 	tst.w	r5, #2
 8003264:	d00f      	beq.n	8003286 <HAL_DMA_IRQHandler+0x60>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003266:	681a      	ldr	r2, [r3, #0]
 8003268:	0695      	lsls	r5, r2, #26
 800326a:	d406      	bmi.n	800327a <HAL_DMA_IRQHandler+0x54>
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 800326c:	681a      	ldr	r2, [r3, #0]
 800326e:	f022 020a 	bic.w	r2, r2, #10
 8003272:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8003274:	2301      	movs	r3, #1
 8003276:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
    __HAL_UNLOCK(hdma);
 800327a:	2300      	movs	r3, #0
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 800327c:	604c      	str	r4, [r1, #4]
    __HAL_UNLOCK(hdma);
 800327e:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 8003282:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8003284:	e7e5      	b.n	8003252 <HAL_DMA_IRQHandler+0x2c>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003286:	2408      	movs	r4, #8
 8003288:	4094      	lsls	r4, r2
 800328a:	4234      	tst	r4, r6
 800328c:	d00f      	beq.n	80032ae <HAL_DMA_IRQHandler+0x88>
 800328e:	072c      	lsls	r4, r5, #28
 8003290:	d50d      	bpl.n	80032ae <HAL_DMA_IRQHandler+0x88>
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003292:	681c      	ldr	r4, [r3, #0]
 8003294:	f024 040e 	bic.w	r4, r4, #14
 8003298:	601c      	str	r4, [r3, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800329a:	2301      	movs	r3, #1
 800329c:	fa03 f202 	lsl.w	r2, r3, r2
 80032a0:	604a      	str	r2, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80032a2:	6383      	str	r3, [r0, #56]	@ 0x38
    __HAL_UNLOCK(hdma);
 80032a4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80032a8:	8403      	strh	r3, [r0, #32]
    if(hdma->XferErrorCallback != NULL)
 80032aa:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80032ac:	e7d1      	b.n	8003252 <HAL_DMA_IRQHandler+0x2c>
}
 80032ae:	bc70      	pop	{r4, r5, r6}
 80032b0:	4770      	bx	lr
	...

080032b4 <HAL_GPIO_Init>:
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
<<<<<<< HEAD
 8005388:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
=======
 80032b4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
<<<<<<< HEAD
 800538c:	f8df 917c 	ldr.w	r9, [pc, #380]	@ 800550c <HAL_GPIO_Init+0x184>
=======
 80032b8:	f8df 917c 	ldr.w	r9, [pc, #380]	@ 8003438 <HAL_GPIO_Init+0x184>
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
<<<<<<< HEAD
 8005390:	4c5c      	ldr	r4, [pc, #368]	@ (8005504 <HAL_GPIO_Init+0x17c>)
  uint32_t position = 0x00u;
 8005392:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005394:	680a      	ldr	r2, [r1, #0]
 8005396:	fa32 f503 	lsrs.w	r5, r2, r3
 800539a:	d102      	bne.n	80053a2 <HAL_GPIO_Init+0x1a>
=======
 80032bc:	4c5c      	ldr	r4, [pc, #368]	@ (8003430 <HAL_GPIO_Init+0x17c>)
  uint32_t position = 0x00u;
 80032be:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80032c0:	680a      	ldr	r2, [r1, #0]
 80032c2:	fa32 f503 	lsrs.w	r5, r2, r3
 80032c6:	d102      	bne.n	80032ce <HAL_GPIO_Init+0x1a>
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
      }
    }

    position++;
  }
}
<<<<<<< HEAD
 800539c:	b003      	add	sp, #12
 800539e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80053a2:	2501      	movs	r5, #1
 80053a4:	fa05 f803 	lsl.w	r8, r5, r3
    if (iocurrent != 0x00u)
 80053a8:	ea18 0202 	ands.w	r2, r8, r2
 80053ac:	f000 80a0 	beq.w	80054f0 <HAL_GPIO_Init+0x168>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80053b0:	684e      	ldr	r6, [r1, #4]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80053b2:	2703      	movs	r7, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80053b4:	f006 0503 	and.w	r5, r6, #3
 80053b8:	ea4f 0e43 	mov.w	lr, r3, lsl #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80053bc:	fa07 fc0e 	lsl.w	ip, r7, lr
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80053c0:	1e6f      	subs	r7, r5, #1
 80053c2:	2f01      	cmp	r7, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80053c4:	ea6f 0c0c 	mvn.w	ip, ip
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80053c8:	d834      	bhi.n	8005434 <HAL_GPIO_Init+0xac>
        temp = GPIOx->OSPEEDR;
 80053ca:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80053cc:	ea07 0a0c 	and.w	sl, r7, ip
        temp |= (GPIO_Init->Speed << (position * 2u));
 80053d0:	68cf      	ldr	r7, [r1, #12]
 80053d2:	fa07 f70e 	lsl.w	r7, r7, lr
 80053d6:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
 80053da:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 80053dc:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80053de:	ea27 0808 	bic.w	r8, r7, r8
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80053e2:	f3c6 1700 	ubfx	r7, r6, #4, #1
 80053e6:	409f      	lsls	r7, r3
 80053e8:	ea47 0708 	orr.w	r7, r7, r8
        GPIOx->OTYPER = temp;
 80053ec:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 80053ee:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80053f0:	ea07 080c 	and.w	r8, r7, ip
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80053f4:	688f      	ldr	r7, [r1, #8]
 80053f6:	fa07 f70e 	lsl.w	r7, r7, lr
 80053fa:	ea47 0708 	orr.w	r7, r7, r8
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80053fe:	2d02      	cmp	r5, #2
        GPIOx->PUPDR = temp;
 8005400:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005402:	d119      	bne.n	8005438 <HAL_GPIO_Init+0xb0>
        temp = GPIOx->AFR[position >> 3u];
 8005404:	ea4f 08d3 	mov.w	r8, r3, lsr #3
 8005408:	eb00 0888 	add.w	r8, r0, r8, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800540c:	f003 0a07 	and.w	sl, r3, #7
        temp = GPIOx->AFR[position >> 3u];
 8005410:	f8d8 7020 	ldr.w	r7, [r8, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8005414:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 8005418:	f04f 0b0f 	mov.w	fp, #15
 800541c:	fa0b fb0a 	lsl.w	fp, fp, sl
 8005420:	ea27 0b0b 	bic.w	fp, r7, fp
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8005424:	690f      	ldr	r7, [r1, #16]
 8005426:	fa07 f70a 	lsl.w	r7, r7, sl
 800542a:	ea47 070b 	orr.w	r7, r7, fp
        GPIOx->AFR[position >> 3u] = temp;
 800542e:	f8c8 7020 	str.w	r7, [r8, #32]
 8005432:	e001      	b.n	8005438 <HAL_GPIO_Init+0xb0>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005434:	2d03      	cmp	r5, #3
 8005436:	d1da      	bne.n	80053ee <HAL_GPIO_Init+0x66>
      temp = GPIOx->MODER;
 8005438:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800543a:	fa05 f50e 	lsl.w	r5, r5, lr
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800543e:	ea07 070c 	and.w	r7, r7, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8005442:	433d      	orrs	r5, r7
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005444:	f416 3f40 	tst.w	r6, #196608	@ 0x30000
      GPIOx->MODER = temp;
 8005448:	6005      	str	r5, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800544a:	d051      	beq.n	80054f0 <HAL_GPIO_Init+0x168>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800544c:	f8d9 5018 	ldr.w	r5, [r9, #24]
 8005450:	f045 0501 	orr.w	r5, r5, #1
 8005454:	f8c9 5018 	str.w	r5, [r9, #24]
 8005458:	f8d9 5018 	ldr.w	r5, [r9, #24]
 800545c:	f023 0703 	bic.w	r7, r3, #3
 8005460:	f107 4780 	add.w	r7, r7, #1073741824	@ 0x40000000
 8005464:	f005 0501 	and.w	r5, r5, #1
 8005468:	f507 3780 	add.w	r7, r7, #65536	@ 0x10000
 800546c:	9501      	str	r5, [sp, #4]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800546e:	f003 0c03 	and.w	ip, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005472:	9d01      	ldr	r5, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2u];
 8005474:	68bd      	ldr	r5, [r7, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8005476:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 800547a:	f04f 0e0f 	mov.w	lr, #15
 800547e:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8005482:	f1b0 4f90 	cmp.w	r0, #1207959552	@ 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8005486:	ea25 0e0e 	bic.w	lr, r5, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800548a:	d033      	beq.n	80054f4 <HAL_GPIO_Init+0x16c>
 800548c:	4d1e      	ldr	r5, [pc, #120]	@ (8005508 <HAL_GPIO_Init+0x180>)
 800548e:	42a8      	cmp	r0, r5
 8005490:	d032      	beq.n	80054f8 <HAL_GPIO_Init+0x170>
 8005492:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8005496:	42a8      	cmp	r0, r5
 8005498:	d030      	beq.n	80054fc <HAL_GPIO_Init+0x174>
 800549a:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 800549e:	42a8      	cmp	r0, r5
 80054a0:	d02e      	beq.n	8005500 <HAL_GPIO_Init+0x178>
 80054a2:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 80054a6:	42a8      	cmp	r0, r5
 80054a8:	bf14      	ite	ne
 80054aa:	2505      	movne	r5, #5
 80054ac:	2504      	moveq	r5, #4
 80054ae:	fa05 f50c 	lsl.w	r5, r5, ip
 80054b2:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2u] = temp;
 80054b6:	60bd      	str	r5, [r7, #8]
        temp = EXTI->RTSR;
 80054b8:	68a5      	ldr	r5, [r4, #8]
        temp &= ~(iocurrent);
 80054ba:	43d7      	mvns	r7, r2
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80054bc:	f416 1f80 	tst.w	r6, #1048576	@ 0x100000
        temp &= ~(iocurrent);
 80054c0:	bf0c      	ite	eq
 80054c2:	403d      	andeq	r5, r7
          temp |= iocurrent;
 80054c4:	4315      	orrne	r5, r2
        EXTI->RTSR = temp;
 80054c6:	60a5      	str	r5, [r4, #8]
        temp = EXTI->FTSR;
 80054c8:	68e5      	ldr	r5, [r4, #12]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80054ca:	f416 1f00 	tst.w	r6, #2097152	@ 0x200000
        temp &= ~(iocurrent);
 80054ce:	bf0c      	ite	eq
 80054d0:	403d      	andeq	r5, r7
          temp |= iocurrent;
 80054d2:	4315      	orrne	r5, r2
        EXTI->FTSR = temp;
 80054d4:	60e5      	str	r5, [r4, #12]
        temp = EXTI->EMR;
 80054d6:	6865      	ldr	r5, [r4, #4]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80054d8:	f416 3f00 	tst.w	r6, #131072	@ 0x20000
        temp &= ~(iocurrent);
 80054dc:	bf0c      	ite	eq
 80054de:	403d      	andeq	r5, r7
          temp |= iocurrent;
 80054e0:	4315      	orrne	r5, r2
        EXTI->EMR = temp;
 80054e2:	6065      	str	r5, [r4, #4]
        temp = EXTI->IMR;
 80054e4:	6825      	ldr	r5, [r4, #0]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80054e6:	03f6      	lsls	r6, r6, #15
        temp &= ~(iocurrent);
 80054e8:	bf54      	ite	pl
 80054ea:	403d      	andpl	r5, r7
          temp |= iocurrent;
 80054ec:	4315      	orrmi	r5, r2
        EXTI->IMR = temp;
 80054ee:	6025      	str	r5, [r4, #0]
    position++;
 80054f0:	3301      	adds	r3, #1
 80054f2:	e74f      	b.n	8005394 <HAL_GPIO_Init+0xc>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80054f4:	2500      	movs	r5, #0
 80054f6:	e7da      	b.n	80054ae <HAL_GPIO_Init+0x126>
 80054f8:	2501      	movs	r5, #1
 80054fa:	e7d8      	b.n	80054ae <HAL_GPIO_Init+0x126>
 80054fc:	2502      	movs	r5, #2
 80054fe:	e7d6      	b.n	80054ae <HAL_GPIO_Init+0x126>
 8005500:	2503      	movs	r5, #3
 8005502:	e7d4      	b.n	80054ae <HAL_GPIO_Init+0x126>
 8005504:	40010400 	.word	0x40010400
 8005508:	48000400 	.word	0x48000400
 800550c:	40021000 	.word	0x40021000

08005510 <HAL_GPIO_WritePin>:
=======
 80032c8:	b003      	add	sp, #12
 80032ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80032ce:	2501      	movs	r5, #1
 80032d0:	fa05 f803 	lsl.w	r8, r5, r3
    if (iocurrent != 0x00u)
 80032d4:	ea18 0202 	ands.w	r2, r8, r2
 80032d8:	f000 80a0 	beq.w	800341c <HAL_GPIO_Init+0x168>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80032dc:	684e      	ldr	r6, [r1, #4]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80032de:	2703      	movs	r7, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80032e0:	f006 0503 	and.w	r5, r6, #3
 80032e4:	ea4f 0e43 	mov.w	lr, r3, lsl #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80032e8:	fa07 fc0e 	lsl.w	ip, r7, lr
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80032ec:	1e6f      	subs	r7, r5, #1
 80032ee:	2f01      	cmp	r7, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80032f0:	ea6f 0c0c 	mvn.w	ip, ip
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80032f4:	d834      	bhi.n	8003360 <HAL_GPIO_Init+0xac>
        temp = GPIOx->OSPEEDR;
 80032f6:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80032f8:	ea07 0a0c 	and.w	sl, r7, ip
        temp |= (GPIO_Init->Speed << (position * 2u));
 80032fc:	68cf      	ldr	r7, [r1, #12]
 80032fe:	fa07 f70e 	lsl.w	r7, r7, lr
 8003302:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
 8003306:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8003308:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800330a:	ea27 0808 	bic.w	r8, r7, r8
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800330e:	f3c6 1700 	ubfx	r7, r6, #4, #1
 8003312:	409f      	lsls	r7, r3
 8003314:	ea47 0708 	orr.w	r7, r7, r8
        GPIOx->OTYPER = temp;
 8003318:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 800331a:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800331c:	ea07 080c 	and.w	r8, r7, ip
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003320:	688f      	ldr	r7, [r1, #8]
 8003322:	fa07 f70e 	lsl.w	r7, r7, lr
 8003326:	ea47 0708 	orr.w	r7, r7, r8
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800332a:	2d02      	cmp	r5, #2
        GPIOx->PUPDR = temp;
 800332c:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800332e:	d119      	bne.n	8003364 <HAL_GPIO_Init+0xb0>
        temp = GPIOx->AFR[position >> 3u];
 8003330:	ea4f 08d3 	mov.w	r8, r3, lsr #3
 8003334:	eb00 0888 	add.w	r8, r0, r8, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003338:	f003 0a07 	and.w	sl, r3, #7
        temp = GPIOx->AFR[position >> 3u];
 800333c:	f8d8 7020 	ldr.w	r7, [r8, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003340:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 8003344:	f04f 0b0f 	mov.w	fp, #15
 8003348:	fa0b fb0a 	lsl.w	fp, fp, sl
 800334c:	ea27 0b0b 	bic.w	fp, r7, fp
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003350:	690f      	ldr	r7, [r1, #16]
 8003352:	fa07 f70a 	lsl.w	r7, r7, sl
 8003356:	ea47 070b 	orr.w	r7, r7, fp
        GPIOx->AFR[position >> 3u] = temp;
 800335a:	f8c8 7020 	str.w	r7, [r8, #32]
 800335e:	e001      	b.n	8003364 <HAL_GPIO_Init+0xb0>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003360:	2d03      	cmp	r5, #3
 8003362:	d1da      	bne.n	800331a <HAL_GPIO_Init+0x66>
      temp = GPIOx->MODER;
 8003364:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003366:	fa05 f50e 	lsl.w	r5, r5, lr
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800336a:	ea07 070c 	and.w	r7, r7, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800336e:	433d      	orrs	r5, r7
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003370:	f416 3f40 	tst.w	r6, #196608	@ 0x30000
      GPIOx->MODER = temp;
 8003374:	6005      	str	r5, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003376:	d051      	beq.n	800341c <HAL_GPIO_Init+0x168>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003378:	f8d9 5018 	ldr.w	r5, [r9, #24]
 800337c:	f045 0501 	orr.w	r5, r5, #1
 8003380:	f8c9 5018 	str.w	r5, [r9, #24]
 8003384:	f8d9 5018 	ldr.w	r5, [r9, #24]
 8003388:	f023 0703 	bic.w	r7, r3, #3
 800338c:	f107 4780 	add.w	r7, r7, #1073741824	@ 0x40000000
 8003390:	f005 0501 	and.w	r5, r5, #1
 8003394:	f507 3780 	add.w	r7, r7, #65536	@ 0x10000
 8003398:	9501      	str	r5, [sp, #4]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800339a:	f003 0c03 	and.w	ip, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800339e:	9d01      	ldr	r5, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2u];
 80033a0:	68bd      	ldr	r5, [r7, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80033a2:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 80033a6:	f04f 0e0f 	mov.w	lr, #15
 80033aa:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80033ae:	f1b0 4f90 	cmp.w	r0, #1207959552	@ 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80033b2:	ea25 0e0e 	bic.w	lr, r5, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80033b6:	d033      	beq.n	8003420 <HAL_GPIO_Init+0x16c>
 80033b8:	4d1e      	ldr	r5, [pc, #120]	@ (8003434 <HAL_GPIO_Init+0x180>)
 80033ba:	42a8      	cmp	r0, r5
 80033bc:	d032      	beq.n	8003424 <HAL_GPIO_Init+0x170>
 80033be:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 80033c2:	42a8      	cmp	r0, r5
 80033c4:	d030      	beq.n	8003428 <HAL_GPIO_Init+0x174>
 80033c6:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 80033ca:	42a8      	cmp	r0, r5
 80033cc:	d02e      	beq.n	800342c <HAL_GPIO_Init+0x178>
 80033ce:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 80033d2:	42a8      	cmp	r0, r5
 80033d4:	bf14      	ite	ne
 80033d6:	2505      	movne	r5, #5
 80033d8:	2504      	moveq	r5, #4
 80033da:	fa05 f50c 	lsl.w	r5, r5, ip
 80033de:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2u] = temp;
 80033e2:	60bd      	str	r5, [r7, #8]
        temp = EXTI->RTSR;
 80033e4:	68a5      	ldr	r5, [r4, #8]
        temp &= ~(iocurrent);
 80033e6:	43d7      	mvns	r7, r2
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80033e8:	f416 1f80 	tst.w	r6, #1048576	@ 0x100000
        temp &= ~(iocurrent);
 80033ec:	bf0c      	ite	eq
 80033ee:	403d      	andeq	r5, r7
          temp |= iocurrent;
 80033f0:	4315      	orrne	r5, r2
        EXTI->RTSR = temp;
 80033f2:	60a5      	str	r5, [r4, #8]
        temp = EXTI->FTSR;
 80033f4:	68e5      	ldr	r5, [r4, #12]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80033f6:	f416 1f00 	tst.w	r6, #2097152	@ 0x200000
        temp &= ~(iocurrent);
 80033fa:	bf0c      	ite	eq
 80033fc:	403d      	andeq	r5, r7
          temp |= iocurrent;
 80033fe:	4315      	orrne	r5, r2
        EXTI->FTSR = temp;
 8003400:	60e5      	str	r5, [r4, #12]
        temp = EXTI->EMR;
 8003402:	6865      	ldr	r5, [r4, #4]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003404:	f416 3f00 	tst.w	r6, #131072	@ 0x20000
        temp &= ~(iocurrent);
 8003408:	bf0c      	ite	eq
 800340a:	403d      	andeq	r5, r7
          temp |= iocurrent;
 800340c:	4315      	orrne	r5, r2
        EXTI->EMR = temp;
 800340e:	6065      	str	r5, [r4, #4]
        temp = EXTI->IMR;
 8003410:	6825      	ldr	r5, [r4, #0]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003412:	03f6      	lsls	r6, r6, #15
        temp &= ~(iocurrent);
 8003414:	bf54      	ite	pl
 8003416:	403d      	andpl	r5, r7
          temp |= iocurrent;
 8003418:	4315      	orrmi	r5, r2
        EXTI->IMR = temp;
 800341a:	6025      	str	r5, [r4, #0]
    position++;
 800341c:	3301      	adds	r3, #1
 800341e:	e74f      	b.n	80032c0 <HAL_GPIO_Init+0xc>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003420:	2500      	movs	r5, #0
 8003422:	e7da      	b.n	80033da <HAL_GPIO_Init+0x126>
 8003424:	2501      	movs	r5, #1
 8003426:	e7d8      	b.n	80033da <HAL_GPIO_Init+0x126>
 8003428:	2502      	movs	r5, #2
 800342a:	e7d6      	b.n	80033da <HAL_GPIO_Init+0x126>
 800342c:	2503      	movs	r5, #3
 800342e:	e7d4      	b.n	80033da <HAL_GPIO_Init+0x126>
 8003430:	40010400 	.word	0x40010400
 8003434:	48000400 	.word	0x48000400
 8003438:	40021000 	.word	0x40021000

0800343c <HAL_GPIO_WritePin>:
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
<<<<<<< HEAD
 8005510:	b10a      	cbz	r2, 8005516 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005512:	6181      	str	r1, [r0, #24]
 8005514:	4770      	bx	lr
=======
 800343c:	b10a      	cbz	r2, 8003442 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800343e:	6181      	str	r1, [r0, #24]
 8003440:	4770      	bx	lr
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
<<<<<<< HEAD
 8005516:	6281      	str	r1, [r0, #40]	@ 0x28
  }
}
 8005518:	4770      	bx	lr
	...

0800551c <HAL_PWR_EnableBkUpAccess>:
=======
 8003442:	6281      	str	r1, [r0, #40]	@ 0x28
  }
}
 8003444:	4770      	bx	lr
	...

08003448 <HAL_PWR_EnableBkUpAccess>:
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  SET_BIT(PWR->CR, PWR_CR_DBP);  
<<<<<<< HEAD
 800551c:	4a02      	ldr	r2, [pc, #8]	@ (8005528 <HAL_PWR_EnableBkUpAccess+0xc>)
 800551e:	6813      	ldr	r3, [r2, #0]
 8005520:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005524:	6013      	str	r3, [r2, #0]
}
 8005526:	4770      	bx	lr
 8005528:	40007000 	.word	0x40007000

0800552c <HAL_RCC_OscConfig>:
=======
 8003448:	4a02      	ldr	r2, [pc, #8]	@ (8003454 <HAL_PWR_EnableBkUpAccess+0xc>)
 800344a:	6813      	ldr	r3, [r2, #0]
 800344c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003450:	6013      	str	r3, [r2, #0]
}
 8003452:	4770      	bx	lr
 8003454:	40007000 	.word	0x40007000

08003458 <HAL_RCC_OscConfig>:
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
<<<<<<< HEAD
 800552c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
=======
 8003458:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
<<<<<<< HEAD
 8005530:	4605      	mov	r5, r0
 8005532:	2800      	cmp	r0, #0
 8005534:	d033      	beq.n	800559e <HAL_RCC_OscConfig+0x72>
=======
 800345c:	4605      	mov	r5, r0
 800345e:	2800      	cmp	r0, #0
 8003460:	d033      	beq.n	80034ca <HAL_RCC_OscConfig+0x72>
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
<<<<<<< HEAD
 8005536:	6803      	ldr	r3, [r0, #0]
 8005538:	07da      	lsls	r2, r3, #31
 800553a:	d411      	bmi.n	8005560 <HAL_RCC_OscConfig+0x34>
=======
 8003462:	6803      	ldr	r3, [r0, #0]
 8003464:	07da      	lsls	r2, r3, #31
 8003466:	d411      	bmi.n	800348c <HAL_RCC_OscConfig+0x34>
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
<<<<<<< HEAD
 800553c:	682b      	ldr	r3, [r5, #0]
 800553e:	079b      	lsls	r3, r3, #30
 8005540:	f100 8081 	bmi.w	8005646 <HAL_RCC_OscConfig+0x11a>
=======
 8003468:	682b      	ldr	r3, [r5, #0]
 800346a:	079b      	lsls	r3, r3, #30
 800346c:	f100 8081 	bmi.w	8003572 <HAL_RCC_OscConfig+0x11a>
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
<<<<<<< HEAD
 8005544:	682b      	ldr	r3, [r5, #0]
 8005546:	071c      	lsls	r4, r3, #28
 8005548:	f100 80eb 	bmi.w	8005722 <HAL_RCC_OscConfig+0x1f6>
=======
 8003470:	682b      	ldr	r3, [r5, #0]
 8003472:	071c      	lsls	r4, r3, #28
 8003474:	f100 80eb 	bmi.w	800364e <HAL_RCC_OscConfig+0x1f6>
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
<<<<<<< HEAD
 800554c:	682b      	ldr	r3, [r5, #0]
 800554e:	0758      	lsls	r0, r3, #29
 8005550:	f100 8130 	bmi.w	80057b4 <HAL_RCC_OscConfig+0x288>
=======
 8003478:	682b      	ldr	r3, [r5, #0]
 800347a:	0758      	lsls	r0, r3, #29
 800347c:	f100 8130 	bmi.w	80036e0 <HAL_RCC_OscConfig+0x288>
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
<<<<<<< HEAD
 8005554:	69eb      	ldr	r3, [r5, #28]
 8005556:	2b00      	cmp	r3, #0
 8005558:	f040 81b5 	bne.w	80058c6 <HAL_RCC_OscConfig+0x39a>
=======
 8003480:	69eb      	ldr	r3, [r5, #28]
 8003482:	2b00      	cmp	r3, #0
 8003484:	f040 81b5 	bne.w	80037f2 <HAL_RCC_OscConfig+0x39a>
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
        }
      }
    }
  }

  return HAL_OK;
<<<<<<< HEAD
 800555c:	2000      	movs	r0, #0
 800555e:	e047      	b.n	80055f0 <HAL_RCC_OscConfig+0xc4>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8005560:	4cb0      	ldr	r4, [pc, #704]	@ (8005824 <HAL_RCC_OscConfig+0x2f8>)
 8005562:	6863      	ldr	r3, [r4, #4]
 8005564:	f003 030c 	and.w	r3, r3, #12
 8005568:	2b04      	cmp	r3, #4
 800556a:	d007      	beq.n	800557c <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800556c:	6863      	ldr	r3, [r4, #4]
 800556e:	f003 030c 	and.w	r3, r3, #12
 8005572:	2b08      	cmp	r3, #8
 8005574:	d115      	bne.n	80055a2 <HAL_RCC_OscConfig+0x76>
 8005576:	6863      	ldr	r3, [r4, #4]
 8005578:	03df      	lsls	r7, r3, #15
 800557a:	d512      	bpl.n	80055a2 <HAL_RCC_OscConfig+0x76>
 800557c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005580:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005584:	6821      	ldr	r1, [r4, #0]
 8005586:	fa93 f3a3 	rbit	r3, r3
 800558a:	2201      	movs	r2, #1
 800558c:	fab3 f383 	clz	r3, r3
 8005590:	fa02 f303 	lsl.w	r3, r2, r3
 8005594:	420b      	tst	r3, r1
 8005596:	d0d1      	beq.n	800553c <HAL_RCC_OscConfig+0x10>
 8005598:	686b      	ldr	r3, [r5, #4]
 800559a:	2b00      	cmp	r3, #0
 800559c:	d1ce      	bne.n	800553c <HAL_RCC_OscConfig+0x10>
    return HAL_ERROR;
 800559e:	2001      	movs	r0, #1
 80055a0:	e026      	b.n	80055f0 <HAL_RCC_OscConfig+0xc4>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80055a2:	686a      	ldr	r2, [r5, #4]
 80055a4:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 80055a8:	d125      	bne.n	80055f6 <HAL_RCC_OscConfig+0xca>
 80055aa:	6823      	ldr	r3, [r4, #0]
 80055ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80055b0:	6023      	str	r3, [r4, #0]
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80055b2:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80055b4:	68a9      	ldr	r1, [r5, #8]
 80055b6:	f023 030f 	bic.w	r3, r3, #15
 80055ba:	430b      	orrs	r3, r1
 80055bc:	62e3      	str	r3, [r4, #44]	@ 0x2c
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80055be:	b352      	cbz	r2, 8005616 <HAL_RCC_OscConfig+0xea>
        tickstart = HAL_GetTick();
 80055c0:	f7ff f852 	bl	8004668 <HAL_GetTick>
 80055c4:	f44f 3700 	mov.w	r7, #131072	@ 0x20000
 80055c8:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80055ca:	f04f 0801 	mov.w	r8, #1
 80055ce:	fa97 f3a7 	rbit	r3, r7
 80055d2:	6822      	ldr	r2, [r4, #0]
 80055d4:	fa97 f3a7 	rbit	r3, r7
 80055d8:	fab3 f383 	clz	r3, r3
 80055dc:	fa08 f303 	lsl.w	r3, r8, r3
 80055e0:	4213      	tst	r3, r2
 80055e2:	d1ab      	bne.n	800553c <HAL_RCC_OscConfig+0x10>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80055e4:	f7ff f840 	bl	8004668 <HAL_GetTick>
 80055e8:	1b80      	subs	r0, r0, r6
 80055ea:	2864      	cmp	r0, #100	@ 0x64
 80055ec:	d9ef      	bls.n	80055ce <HAL_RCC_OscConfig+0xa2>
            return HAL_TIMEOUT;
 80055ee:	2003      	movs	r0, #3
}
 80055f0:	b002      	add	sp, #8
 80055f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80055f6:	6823      	ldr	r3, [r4, #0]
 80055f8:	b932      	cbnz	r2, 8005608 <HAL_RCC_OscConfig+0xdc>
 80055fa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80055fe:	6023      	str	r3, [r4, #0]
 8005600:	6823      	ldr	r3, [r4, #0]
 8005602:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005606:	e7d3      	b.n	80055b0 <HAL_RCC_OscConfig+0x84>
 8005608:	f5b2 2fa0 	cmp.w	r2, #327680	@ 0x50000
 800560c:	d1f5      	bne.n	80055fa <HAL_RCC_OscConfig+0xce>
 800560e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005612:	6023      	str	r3, [r4, #0]
 8005614:	e7c9      	b.n	80055aa <HAL_RCC_OscConfig+0x7e>
        tickstart = HAL_GetTick();
 8005616:	f7ff f827 	bl	8004668 <HAL_GetTick>
 800561a:	f44f 3700 	mov.w	r7, #131072	@ 0x20000
 800561e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005620:	f04f 0801 	mov.w	r8, #1
 8005624:	fa97 f3a7 	rbit	r3, r7
 8005628:	6822      	ldr	r2, [r4, #0]
 800562a:	fa97 f3a7 	rbit	r3, r7
 800562e:	fab3 f383 	clz	r3, r3
 8005632:	fa08 f303 	lsl.w	r3, r8, r3
 8005636:	4213      	tst	r3, r2
 8005638:	d080      	beq.n	800553c <HAL_RCC_OscConfig+0x10>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800563a:	f7ff f815 	bl	8004668 <HAL_GetTick>
 800563e:	1b80      	subs	r0, r0, r6
 8005640:	2864      	cmp	r0, #100	@ 0x64
 8005642:	d9ef      	bls.n	8005624 <HAL_RCC_OscConfig+0xf8>
 8005644:	e7d3      	b.n	80055ee <HAL_RCC_OscConfig+0xc2>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8005646:	4c77      	ldr	r4, [pc, #476]	@ (8005824 <HAL_RCC_OscConfig+0x2f8>)
 8005648:	6863      	ldr	r3, [r4, #4]
 800564a:	f013 0f0c 	tst.w	r3, #12
 800564e:	d007      	beq.n	8005660 <HAL_RCC_OscConfig+0x134>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8005650:	6863      	ldr	r3, [r4, #4]
 8005652:	f003 030c 	and.w	r3, r3, #12
 8005656:	2b08      	cmp	r3, #8
 8005658:	d11f      	bne.n	800569a <HAL_RCC_OscConfig+0x16e>
 800565a:	6863      	ldr	r3, [r4, #4]
 800565c:	03de      	lsls	r6, r3, #15
 800565e:	d41c      	bmi.n	800569a <HAL_RCC_OscConfig+0x16e>
 8005660:	2302      	movs	r3, #2
 8005662:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005666:	6821      	ldr	r1, [r4, #0]
 8005668:	fa93 f3a3 	rbit	r3, r3
 800566c:	2201      	movs	r2, #1
 800566e:	fab3 f383 	clz	r3, r3
 8005672:	fa02 f303 	lsl.w	r3, r2, r3
 8005676:	420b      	tst	r3, r1
 8005678:	d002      	beq.n	8005680 <HAL_RCC_OscConfig+0x154>
 800567a:	692b      	ldr	r3, [r5, #16]
 800567c:	4293      	cmp	r3, r2
 800567e:	d18e      	bne.n	800559e <HAL_RCC_OscConfig+0x72>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005680:	6821      	ldr	r1, [r4, #0]
 8005682:	22f8      	movs	r2, #248	@ 0xf8
 8005684:	fa92 f2a2 	rbit	r2, r2
 8005688:	696b      	ldr	r3, [r5, #20]
 800568a:	fab2 f282 	clz	r2, r2
 800568e:	4093      	lsls	r3, r2
 8005690:	f021 02f8 	bic.w	r2, r1, #248	@ 0xf8
 8005694:	4313      	orrs	r3, r2
 8005696:	6023      	str	r3, [r4, #0]
 8005698:	e754      	b.n	8005544 <HAL_RCC_OscConfig+0x18>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800569a:	692a      	ldr	r2, [r5, #16]
 800569c:	2601      	movs	r6, #1
 800569e:	b1fa      	cbz	r2, 80056e0 <HAL_RCC_OscConfig+0x1b4>
 80056a0:	fa96 f3a6 	rbit	r3, r6
        __HAL_RCC_HSI_ENABLE();
 80056a4:	fab3 f383 	clz	r3, r3
 80056a8:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80056ac:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80056b0:	009b      	lsls	r3, r3, #2
 80056b2:	f04f 0802 	mov.w	r8, #2
 80056b6:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 80056b8:	f7fe ffd6 	bl	8004668 <HAL_GetTick>
 80056bc:	4607      	mov	r7, r0
 80056be:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80056c2:	6822      	ldr	r2, [r4, #0]
 80056c4:	fa98 f3a8 	rbit	r3, r8
 80056c8:	fab3 f383 	clz	r3, r3
 80056cc:	fa06 f303 	lsl.w	r3, r6, r3
 80056d0:	4213      	tst	r3, r2
 80056d2:	d1d5      	bne.n	8005680 <HAL_RCC_OscConfig+0x154>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80056d4:	f7fe ffc8 	bl	8004668 <HAL_GetTick>
 80056d8:	1bc0      	subs	r0, r0, r7
 80056da:	2802      	cmp	r0, #2
 80056dc:	d9ef      	bls.n	80056be <HAL_RCC_OscConfig+0x192>
 80056de:	e786      	b.n	80055ee <HAL_RCC_OscConfig+0xc2>
 80056e0:	fa96 f3a6 	rbit	r3, r6
        __HAL_RCC_HSI_DISABLE();
 80056e4:	fab3 f383 	clz	r3, r3
 80056e8:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80056ec:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80056f0:	009b      	lsls	r3, r3, #2
 80056f2:	f04f 0802 	mov.w	r8, #2
 80056f6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80056f8:	f7fe ffb6 	bl	8004668 <HAL_GetTick>
 80056fc:	4607      	mov	r7, r0
 80056fe:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005702:	6822      	ldr	r2, [r4, #0]
 8005704:	fa98 f3a8 	rbit	r3, r8
 8005708:	fab3 f383 	clz	r3, r3
 800570c:	fa06 f303 	lsl.w	r3, r6, r3
 8005710:	4213      	tst	r3, r2
 8005712:	f43f af17 	beq.w	8005544 <HAL_RCC_OscConfig+0x18>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005716:	f7fe ffa7 	bl	8004668 <HAL_GetTick>
 800571a:	1bc0      	subs	r0, r0, r7
 800571c:	2802      	cmp	r0, #2
 800571e:	d9ee      	bls.n	80056fe <HAL_RCC_OscConfig+0x1d2>
 8005720:	e765      	b.n	80055ee <HAL_RCC_OscConfig+0xc2>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005722:	69aa      	ldr	r2, [r5, #24]
 8005724:	4e3f      	ldr	r6, [pc, #252]	@ (8005824 <HAL_RCC_OscConfig+0x2f8>)
 8005726:	4940      	ldr	r1, [pc, #256]	@ (8005828 <HAL_RCC_OscConfig+0x2fc>)
 8005728:	2401      	movs	r4, #1
 800572a:	b30a      	cbz	r2, 8005770 <HAL_RCC_OscConfig+0x244>
 800572c:	fa94 f3a4 	rbit	r3, r4
      __HAL_RCC_LSI_ENABLE();
 8005730:	fab3 f383 	clz	r3, r3
 8005734:	440b      	add	r3, r1
 8005736:	009b      	lsls	r3, r3, #2
 8005738:	2702      	movs	r7, #2
 800573a:	601c      	str	r4, [r3, #0]
      tickstart = HAL_GetTick();
 800573c:	f7fe ff94 	bl	8004668 <HAL_GetTick>
 8005740:	4680      	mov	r8, r0
 8005742:	fa97 f3a7 	rbit	r3, r7
 8005746:	fa97 f3a7 	rbit	r3, r7
 800574a:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800574e:	6a72      	ldr	r2, [r6, #36]	@ 0x24
 8005750:	fa97 f3a7 	rbit	r3, r7
 8005754:	fab3 f383 	clz	r3, r3
 8005758:	fa04 f303 	lsl.w	r3, r4, r3
 800575c:	4213      	tst	r3, r2
 800575e:	f47f aef5 	bne.w	800554c <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005762:	f7fe ff81 	bl	8004668 <HAL_GetTick>
 8005766:	eba0 0008 	sub.w	r0, r0, r8
 800576a:	2802      	cmp	r0, #2
 800576c:	d9e9      	bls.n	8005742 <HAL_RCC_OscConfig+0x216>
 800576e:	e73e      	b.n	80055ee <HAL_RCC_OscConfig+0xc2>
 8005770:	fa94 f3a4 	rbit	r3, r4
      __HAL_RCC_LSI_DISABLE();
 8005774:	fab3 f383 	clz	r3, r3
 8005778:	440b      	add	r3, r1
 800577a:	009b      	lsls	r3, r3, #2
 800577c:	2702      	movs	r7, #2
 800577e:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8005780:	f7fe ff72 	bl	8004668 <HAL_GetTick>
 8005784:	4680      	mov	r8, r0
 8005786:	fa97 f3a7 	rbit	r3, r7
 800578a:	fa97 f3a7 	rbit	r3, r7
 800578e:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005792:	6a72      	ldr	r2, [r6, #36]	@ 0x24
 8005794:	fa97 f3a7 	rbit	r3, r7
 8005798:	fab3 f383 	clz	r3, r3
 800579c:	fa04 f303 	lsl.w	r3, r4, r3
 80057a0:	4213      	tst	r3, r2
 80057a2:	f43f aed3 	beq.w	800554c <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80057a6:	f7fe ff5f 	bl	8004668 <HAL_GetTick>
 80057aa:	eba0 0008 	sub.w	r0, r0, r8
 80057ae:	2802      	cmp	r0, #2
 80057b0:	d9e9      	bls.n	8005786 <HAL_RCC_OscConfig+0x25a>
 80057b2:	e71c      	b.n	80055ee <HAL_RCC_OscConfig+0xc2>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80057b4:	4c1b      	ldr	r4, [pc, #108]	@ (8005824 <HAL_RCC_OscConfig+0x2f8>)
 80057b6:	69e3      	ldr	r3, [r4, #28]
 80057b8:	00d9      	lsls	r1, r3, #3
 80057ba:	d431      	bmi.n	8005820 <HAL_RCC_OscConfig+0x2f4>
      __HAL_RCC_PWR_CLK_ENABLE();
 80057bc:	69e3      	ldr	r3, [r4, #28]
 80057be:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80057c2:	61e3      	str	r3, [r4, #28]
 80057c4:	69e3      	ldr	r3, [r4, #28]
 80057c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80057ca:	9301      	str	r3, [sp, #4]
 80057cc:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80057ce:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80057d0:	4f16      	ldr	r7, [pc, #88]	@ (800582c <HAL_RCC_OscConfig+0x300>)
 80057d2:	683b      	ldr	r3, [r7, #0]
 80057d4:	05da      	lsls	r2, r3, #23
 80057d6:	d52b      	bpl.n	8005830 <HAL_RCC_OscConfig+0x304>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80057d8:	68eb      	ldr	r3, [r5, #12]
 80057da:	2b01      	cmp	r3, #1
 80057dc:	d139      	bne.n	8005852 <HAL_RCC_OscConfig+0x326>
 80057de:	6a23      	ldr	r3, [r4, #32]
 80057e0:	f043 0301 	orr.w	r3, r3, #1
 80057e4:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80057e6:	f7fe ff3f 	bl	8004668 <HAL_GetTick>
 80057ea:	2702      	movs	r7, #2
 80057ec:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80057ee:	f04f 0901 	mov.w	r9, #1
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80057f2:	f241 3a88 	movw	sl, #5000	@ 0x1388
 80057f6:	fa97 f3a7 	rbit	r3, r7
 80057fa:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80057fe:	6a22      	ldr	r2, [r4, #32]
 8005800:	fa97 f3a7 	rbit	r3, r7
 8005804:	fab3 f383 	clz	r3, r3
 8005808:	fa09 f303 	lsl.w	r3, r9, r3
 800580c:	4213      	tst	r3, r2
 800580e:	d053      	beq.n	80058b8 <HAL_RCC_OscConfig+0x38c>
    if(pwrclkchanged == SET)
 8005810:	2e00      	cmp	r6, #0
 8005812:	f43f ae9f 	beq.w	8005554 <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 8005816:	69e3      	ldr	r3, [r4, #28]
 8005818:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800581c:	61e3      	str	r3, [r4, #28]
 800581e:	e699      	b.n	8005554 <HAL_RCC_OscConfig+0x28>
    FlagStatus       pwrclkchanged = RESET;
 8005820:	2600      	movs	r6, #0
 8005822:	e7d5      	b.n	80057d0 <HAL_RCC_OscConfig+0x2a4>
 8005824:	40021000 	.word	0x40021000
 8005828:	10908120 	.word	0x10908120
 800582c:	40007000 	.word	0x40007000
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005836:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8005838:	f7fe ff16 	bl	8004668 <HAL_GetTick>
 800583c:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800583e:	683b      	ldr	r3, [r7, #0]
 8005840:	05db      	lsls	r3, r3, #23
 8005842:	d4c9      	bmi.n	80057d8 <HAL_RCC_OscConfig+0x2ac>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005844:	f7fe ff10 	bl	8004668 <HAL_GetTick>
 8005848:	eba0 0008 	sub.w	r0, r0, r8
 800584c:	2864      	cmp	r0, #100	@ 0x64
 800584e:	d9f6      	bls.n	800583e <HAL_RCC_OscConfig+0x312>
 8005850:	e6cd      	b.n	80055ee <HAL_RCC_OscConfig+0xc2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005852:	bb1b      	cbnz	r3, 800589c <HAL_RCC_OscConfig+0x370>
 8005854:	6a23      	ldr	r3, [r4, #32]
 8005856:	f023 0301 	bic.w	r3, r3, #1
 800585a:	6223      	str	r3, [r4, #32]
 800585c:	6a23      	ldr	r3, [r4, #32]
 800585e:	f023 0304 	bic.w	r3, r3, #4
 8005862:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8005864:	f7fe ff00 	bl	8004668 <HAL_GetTick>
 8005868:	2702      	movs	r7, #2
 800586a:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800586c:	f04f 0901 	mov.w	r9, #1
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005870:	f241 3a88 	movw	sl, #5000	@ 0x1388
 8005874:	fa97 f3a7 	rbit	r3, r7
 8005878:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800587c:	6a22      	ldr	r2, [r4, #32]
 800587e:	fa97 f3a7 	rbit	r3, r7
 8005882:	fab3 f383 	clz	r3, r3
 8005886:	fa09 f303 	lsl.w	r3, r9, r3
 800588a:	4213      	tst	r3, r2
 800588c:	d0c0      	beq.n	8005810 <HAL_RCC_OscConfig+0x2e4>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800588e:	f7fe feeb 	bl	8004668 <HAL_GetTick>
 8005892:	eba0 0008 	sub.w	r0, r0, r8
 8005896:	4550      	cmp	r0, sl
 8005898:	d9ec      	bls.n	8005874 <HAL_RCC_OscConfig+0x348>
 800589a:	e6a8      	b.n	80055ee <HAL_RCC_OscConfig+0xc2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800589c:	2b05      	cmp	r3, #5
 800589e:	6a23      	ldr	r3, [r4, #32]
 80058a0:	d103      	bne.n	80058aa <HAL_RCC_OscConfig+0x37e>
 80058a2:	f043 0304 	orr.w	r3, r3, #4
 80058a6:	6223      	str	r3, [r4, #32]
 80058a8:	e799      	b.n	80057de <HAL_RCC_OscConfig+0x2b2>
 80058aa:	f023 0301 	bic.w	r3, r3, #1
 80058ae:	6223      	str	r3, [r4, #32]
 80058b0:	6a23      	ldr	r3, [r4, #32]
 80058b2:	f023 0304 	bic.w	r3, r3, #4
 80058b6:	e795      	b.n	80057e4 <HAL_RCC_OscConfig+0x2b8>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80058b8:	f7fe fed6 	bl	8004668 <HAL_GetTick>
 80058bc:	eba0 0008 	sub.w	r0, r0, r8
 80058c0:	4550      	cmp	r0, sl
 80058c2:	d998      	bls.n	80057f6 <HAL_RCC_OscConfig+0x2ca>
 80058c4:	e693      	b.n	80055ee <HAL_RCC_OscConfig+0xc2>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80058c6:	4c46      	ldr	r4, [pc, #280]	@ (80059e0 <HAL_RCC_OscConfig+0x4b4>)
 80058c8:	6862      	ldr	r2, [r4, #4]
 80058ca:	f002 020c 	and.w	r2, r2, #12
 80058ce:	2a08      	cmp	r2, #8
 80058d0:	d074      	beq.n	80059bc <HAL_RCC_OscConfig+0x490>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80058d2:	2b02      	cmp	r3, #2
 80058d4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80058d8:	d14d      	bne.n	8005976 <HAL_RCC_OscConfig+0x44a>
 80058da:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 80058de:	fab3 f383 	clz	r3, r3
 80058e2:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80058e6:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80058ea:	009b      	lsls	r3, r3, #2
 80058ec:	2200      	movs	r2, #0
 80058ee:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80058f0:	f7fe feba 	bl	8004668 <HAL_GetTick>
 80058f4:	f04f 7800 	mov.w	r8, #33554432	@ 0x2000000
 80058f8:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80058fa:	2601      	movs	r6, #1
 80058fc:	fa98 f3a8 	rbit	r3, r8
 8005900:	6822      	ldr	r2, [r4, #0]
 8005902:	fa98 f3a8 	rbit	r3, r8
 8005906:	fab3 f383 	clz	r3, r3
 800590a:	fa06 f303 	lsl.w	r3, r6, r3
 800590e:	4213      	tst	r3, r2
 8005910:	d12b      	bne.n	800596a <HAL_RCC_OscConfig+0x43e>
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005912:	e9d5 1308 	ldrd	r1, r3, [r5, #32]
 8005916:	6862      	ldr	r2, [r4, #4]
 8005918:	430b      	orrs	r3, r1
 800591a:	f422 1274 	bic.w	r2, r2, #3997696	@ 0x3d0000
 800591e:	4313      	orrs	r3, r2
 8005920:	6063      	str	r3, [r4, #4]
 8005922:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005926:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 800592a:	fab3 f383 	clz	r3, r3
 800592e:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8005932:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8005936:	009b      	lsls	r3, r3, #2
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005938:	2701      	movs	r7, #1
        __HAL_RCC_PLL_ENABLE();
 800593a:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 800593c:	f7fe fe94 	bl	8004668 <HAL_GetTick>
 8005940:	f04f 7600 	mov.w	r6, #33554432	@ 0x2000000
 8005944:	4605      	mov	r5, r0
 8005946:	fa96 f3a6 	rbit	r3, r6
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800594a:	6822      	ldr	r2, [r4, #0]
 800594c:	fa96 f3a6 	rbit	r3, r6
 8005950:	fab3 f383 	clz	r3, r3
 8005954:	fa07 f303 	lsl.w	r3, r7, r3
 8005958:	4213      	tst	r3, r2
 800595a:	f47f adff 	bne.w	800555c <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800595e:	f7fe fe83 	bl	8004668 <HAL_GetTick>
 8005962:	1b40      	subs	r0, r0, r5
 8005964:	2802      	cmp	r0, #2
 8005966:	d9ee      	bls.n	8005946 <HAL_RCC_OscConfig+0x41a>
 8005968:	e641      	b.n	80055ee <HAL_RCC_OscConfig+0xc2>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800596a:	f7fe fe7d 	bl	8004668 <HAL_GetTick>
 800596e:	1bc0      	subs	r0, r0, r7
 8005970:	2802      	cmp	r0, #2
 8005972:	d9c3      	bls.n	80058fc <HAL_RCC_OscConfig+0x3d0>
 8005974:	e63b      	b.n	80055ee <HAL_RCC_OscConfig+0xc2>
 8005976:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 800597a:	fab3 f383 	clz	r3, r3
 800597e:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8005982:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8005986:	009b      	lsls	r3, r3, #2
 8005988:	2200      	movs	r2, #0
 800598a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800598c:	f7fe fe6c 	bl	8004668 <HAL_GetTick>
 8005990:	f04f 7600 	mov.w	r6, #33554432	@ 0x2000000
 8005994:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005996:	2701      	movs	r7, #1
 8005998:	fa96 f3a6 	rbit	r3, r6
 800599c:	6822      	ldr	r2, [r4, #0]
 800599e:	fa96 f3a6 	rbit	r3, r6
 80059a2:	fab3 f383 	clz	r3, r3
 80059a6:	fa07 f303 	lsl.w	r3, r7, r3
 80059aa:	4213      	tst	r3, r2
 80059ac:	f43f add6 	beq.w	800555c <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80059b0:	f7fe fe5a 	bl	8004668 <HAL_GetTick>
 80059b4:	1b40      	subs	r0, r0, r5
 80059b6:	2802      	cmp	r0, #2
 80059b8:	d9ee      	bls.n	8005998 <HAL_RCC_OscConfig+0x46c>
 80059ba:	e618      	b.n	80055ee <HAL_RCC_OscConfig+0xc2>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80059bc:	2b01      	cmp	r3, #1
 80059be:	f43f adee 	beq.w	800559e <HAL_RCC_OscConfig+0x72>
        pll_config = RCC->CFGR;
 80059c2:	6860      	ldr	r0, [r4, #4]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80059c4:	6a2b      	ldr	r3, [r5, #32]
 80059c6:	f400 3280 	and.w	r2, r0, #65536	@ 0x10000
 80059ca:	429a      	cmp	r2, r3
 80059cc:	f47f ade7 	bne.w	800559e <HAL_RCC_OscConfig+0x72>
 80059d0:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80059d2:	f400 1070 	and.w	r0, r0, #3932160	@ 0x3c0000
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80059d6:	1ac0      	subs	r0, r0, r3
 80059d8:	bf18      	it	ne
 80059da:	2001      	movne	r0, #1
 80059dc:	e608      	b.n	80055f0 <HAL_RCC_OscConfig+0xc4>
 80059de:	bf00      	nop
 80059e0:	40021000 	.word	0x40021000

080059e4 <HAL_RCC_GetSysClockFreq>:
=======
 8003488:	2000      	movs	r0, #0
 800348a:	e047      	b.n	800351c <HAL_RCC_OscConfig+0xc4>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800348c:	4cb0      	ldr	r4, [pc, #704]	@ (8003750 <HAL_RCC_OscConfig+0x2f8>)
 800348e:	6863      	ldr	r3, [r4, #4]
 8003490:	f003 030c 	and.w	r3, r3, #12
 8003494:	2b04      	cmp	r3, #4
 8003496:	d007      	beq.n	80034a8 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003498:	6863      	ldr	r3, [r4, #4]
 800349a:	f003 030c 	and.w	r3, r3, #12
 800349e:	2b08      	cmp	r3, #8
 80034a0:	d115      	bne.n	80034ce <HAL_RCC_OscConfig+0x76>
 80034a2:	6863      	ldr	r3, [r4, #4]
 80034a4:	03df      	lsls	r7, r3, #15
 80034a6:	d512      	bpl.n	80034ce <HAL_RCC_OscConfig+0x76>
 80034a8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80034ac:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034b0:	6821      	ldr	r1, [r4, #0]
 80034b2:	fa93 f3a3 	rbit	r3, r3
 80034b6:	2201      	movs	r2, #1
 80034b8:	fab3 f383 	clz	r3, r3
 80034bc:	fa02 f303 	lsl.w	r3, r2, r3
 80034c0:	420b      	tst	r3, r1
 80034c2:	d0d1      	beq.n	8003468 <HAL_RCC_OscConfig+0x10>
 80034c4:	686b      	ldr	r3, [r5, #4]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d1ce      	bne.n	8003468 <HAL_RCC_OscConfig+0x10>
    return HAL_ERROR;
 80034ca:	2001      	movs	r0, #1
 80034cc:	e026      	b.n	800351c <HAL_RCC_OscConfig+0xc4>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80034ce:	686a      	ldr	r2, [r5, #4]
 80034d0:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 80034d4:	d125      	bne.n	8003522 <HAL_RCC_OscConfig+0xca>
 80034d6:	6823      	ldr	r3, [r4, #0]
 80034d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80034dc:	6023      	str	r3, [r4, #0]
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80034de:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80034e0:	68a9      	ldr	r1, [r5, #8]
 80034e2:	f023 030f 	bic.w	r3, r3, #15
 80034e6:	430b      	orrs	r3, r1
 80034e8:	62e3      	str	r3, [r4, #44]	@ 0x2c
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80034ea:	b352      	cbz	r2, 8003542 <HAL_RCC_OscConfig+0xea>
        tickstart = HAL_GetTick();
 80034ec:	f7ff f872 	bl	80025d4 <HAL_GetTick>
 80034f0:	f44f 3700 	mov.w	r7, #131072	@ 0x20000
 80034f4:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034f6:	f04f 0801 	mov.w	r8, #1
 80034fa:	fa97 f3a7 	rbit	r3, r7
 80034fe:	6822      	ldr	r2, [r4, #0]
 8003500:	fa97 f3a7 	rbit	r3, r7
 8003504:	fab3 f383 	clz	r3, r3
 8003508:	fa08 f303 	lsl.w	r3, r8, r3
 800350c:	4213      	tst	r3, r2
 800350e:	d1ab      	bne.n	8003468 <HAL_RCC_OscConfig+0x10>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003510:	f7ff f860 	bl	80025d4 <HAL_GetTick>
 8003514:	1b80      	subs	r0, r0, r6
 8003516:	2864      	cmp	r0, #100	@ 0x64
 8003518:	d9ef      	bls.n	80034fa <HAL_RCC_OscConfig+0xa2>
            return HAL_TIMEOUT;
 800351a:	2003      	movs	r0, #3
}
 800351c:	b002      	add	sp, #8
 800351e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003522:	6823      	ldr	r3, [r4, #0]
 8003524:	b932      	cbnz	r2, 8003534 <HAL_RCC_OscConfig+0xdc>
 8003526:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800352a:	6023      	str	r3, [r4, #0]
 800352c:	6823      	ldr	r3, [r4, #0]
 800352e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003532:	e7d3      	b.n	80034dc <HAL_RCC_OscConfig+0x84>
 8003534:	f5b2 2fa0 	cmp.w	r2, #327680	@ 0x50000
 8003538:	d1f5      	bne.n	8003526 <HAL_RCC_OscConfig+0xce>
 800353a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800353e:	6023      	str	r3, [r4, #0]
 8003540:	e7c9      	b.n	80034d6 <HAL_RCC_OscConfig+0x7e>
        tickstart = HAL_GetTick();
 8003542:	f7ff f847 	bl	80025d4 <HAL_GetTick>
 8003546:	f44f 3700 	mov.w	r7, #131072	@ 0x20000
 800354a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800354c:	f04f 0801 	mov.w	r8, #1
 8003550:	fa97 f3a7 	rbit	r3, r7
 8003554:	6822      	ldr	r2, [r4, #0]
 8003556:	fa97 f3a7 	rbit	r3, r7
 800355a:	fab3 f383 	clz	r3, r3
 800355e:	fa08 f303 	lsl.w	r3, r8, r3
 8003562:	4213      	tst	r3, r2
 8003564:	d080      	beq.n	8003468 <HAL_RCC_OscConfig+0x10>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003566:	f7ff f835 	bl	80025d4 <HAL_GetTick>
 800356a:	1b80      	subs	r0, r0, r6
 800356c:	2864      	cmp	r0, #100	@ 0x64
 800356e:	d9ef      	bls.n	8003550 <HAL_RCC_OscConfig+0xf8>
 8003570:	e7d3      	b.n	800351a <HAL_RCC_OscConfig+0xc2>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003572:	4c77      	ldr	r4, [pc, #476]	@ (8003750 <HAL_RCC_OscConfig+0x2f8>)
 8003574:	6863      	ldr	r3, [r4, #4]
 8003576:	f013 0f0c 	tst.w	r3, #12
 800357a:	d007      	beq.n	800358c <HAL_RCC_OscConfig+0x134>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800357c:	6863      	ldr	r3, [r4, #4]
 800357e:	f003 030c 	and.w	r3, r3, #12
 8003582:	2b08      	cmp	r3, #8
 8003584:	d11f      	bne.n	80035c6 <HAL_RCC_OscConfig+0x16e>
 8003586:	6863      	ldr	r3, [r4, #4]
 8003588:	03de      	lsls	r6, r3, #15
 800358a:	d41c      	bmi.n	80035c6 <HAL_RCC_OscConfig+0x16e>
 800358c:	2302      	movs	r3, #2
 800358e:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003592:	6821      	ldr	r1, [r4, #0]
 8003594:	fa93 f3a3 	rbit	r3, r3
 8003598:	2201      	movs	r2, #1
 800359a:	fab3 f383 	clz	r3, r3
 800359e:	fa02 f303 	lsl.w	r3, r2, r3
 80035a2:	420b      	tst	r3, r1
 80035a4:	d002      	beq.n	80035ac <HAL_RCC_OscConfig+0x154>
 80035a6:	692b      	ldr	r3, [r5, #16]
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d18e      	bne.n	80034ca <HAL_RCC_OscConfig+0x72>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035ac:	6821      	ldr	r1, [r4, #0]
 80035ae:	22f8      	movs	r2, #248	@ 0xf8
 80035b0:	fa92 f2a2 	rbit	r2, r2
 80035b4:	696b      	ldr	r3, [r5, #20]
 80035b6:	fab2 f282 	clz	r2, r2
 80035ba:	4093      	lsls	r3, r2
 80035bc:	f021 02f8 	bic.w	r2, r1, #248	@ 0xf8
 80035c0:	4313      	orrs	r3, r2
 80035c2:	6023      	str	r3, [r4, #0]
 80035c4:	e754      	b.n	8003470 <HAL_RCC_OscConfig+0x18>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80035c6:	692a      	ldr	r2, [r5, #16]
 80035c8:	2601      	movs	r6, #1
 80035ca:	b1fa      	cbz	r2, 800360c <HAL_RCC_OscConfig+0x1b4>
 80035cc:	fa96 f3a6 	rbit	r3, r6
        __HAL_RCC_HSI_ENABLE();
 80035d0:	fab3 f383 	clz	r3, r3
 80035d4:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80035d8:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80035dc:	009b      	lsls	r3, r3, #2
 80035de:	f04f 0802 	mov.w	r8, #2
 80035e2:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 80035e4:	f7fe fff6 	bl	80025d4 <HAL_GetTick>
 80035e8:	4607      	mov	r7, r0
 80035ea:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035ee:	6822      	ldr	r2, [r4, #0]
 80035f0:	fa98 f3a8 	rbit	r3, r8
 80035f4:	fab3 f383 	clz	r3, r3
 80035f8:	fa06 f303 	lsl.w	r3, r6, r3
 80035fc:	4213      	tst	r3, r2
 80035fe:	d1d5      	bne.n	80035ac <HAL_RCC_OscConfig+0x154>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003600:	f7fe ffe8 	bl	80025d4 <HAL_GetTick>
 8003604:	1bc0      	subs	r0, r0, r7
 8003606:	2802      	cmp	r0, #2
 8003608:	d9ef      	bls.n	80035ea <HAL_RCC_OscConfig+0x192>
 800360a:	e786      	b.n	800351a <HAL_RCC_OscConfig+0xc2>
 800360c:	fa96 f3a6 	rbit	r3, r6
        __HAL_RCC_HSI_DISABLE();
 8003610:	fab3 f383 	clz	r3, r3
 8003614:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003618:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800361c:	009b      	lsls	r3, r3, #2
 800361e:	f04f 0802 	mov.w	r8, #2
 8003622:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003624:	f7fe ffd6 	bl	80025d4 <HAL_GetTick>
 8003628:	4607      	mov	r7, r0
 800362a:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800362e:	6822      	ldr	r2, [r4, #0]
 8003630:	fa98 f3a8 	rbit	r3, r8
 8003634:	fab3 f383 	clz	r3, r3
 8003638:	fa06 f303 	lsl.w	r3, r6, r3
 800363c:	4213      	tst	r3, r2
 800363e:	f43f af17 	beq.w	8003470 <HAL_RCC_OscConfig+0x18>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003642:	f7fe ffc7 	bl	80025d4 <HAL_GetTick>
 8003646:	1bc0      	subs	r0, r0, r7
 8003648:	2802      	cmp	r0, #2
 800364a:	d9ee      	bls.n	800362a <HAL_RCC_OscConfig+0x1d2>
 800364c:	e765      	b.n	800351a <HAL_RCC_OscConfig+0xc2>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800364e:	69aa      	ldr	r2, [r5, #24]
 8003650:	4e3f      	ldr	r6, [pc, #252]	@ (8003750 <HAL_RCC_OscConfig+0x2f8>)
 8003652:	4940      	ldr	r1, [pc, #256]	@ (8003754 <HAL_RCC_OscConfig+0x2fc>)
 8003654:	2401      	movs	r4, #1
 8003656:	b30a      	cbz	r2, 800369c <HAL_RCC_OscConfig+0x244>
 8003658:	fa94 f3a4 	rbit	r3, r4
      __HAL_RCC_LSI_ENABLE();
 800365c:	fab3 f383 	clz	r3, r3
 8003660:	440b      	add	r3, r1
 8003662:	009b      	lsls	r3, r3, #2
 8003664:	2702      	movs	r7, #2
 8003666:	601c      	str	r4, [r3, #0]
      tickstart = HAL_GetTick();
 8003668:	f7fe ffb4 	bl	80025d4 <HAL_GetTick>
 800366c:	4680      	mov	r8, r0
 800366e:	fa97 f3a7 	rbit	r3, r7
 8003672:	fa97 f3a7 	rbit	r3, r7
 8003676:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800367a:	6a72      	ldr	r2, [r6, #36]	@ 0x24
 800367c:	fa97 f3a7 	rbit	r3, r7
 8003680:	fab3 f383 	clz	r3, r3
 8003684:	fa04 f303 	lsl.w	r3, r4, r3
 8003688:	4213      	tst	r3, r2
 800368a:	f47f aef5 	bne.w	8003478 <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800368e:	f7fe ffa1 	bl	80025d4 <HAL_GetTick>
 8003692:	eba0 0008 	sub.w	r0, r0, r8
 8003696:	2802      	cmp	r0, #2
 8003698:	d9e9      	bls.n	800366e <HAL_RCC_OscConfig+0x216>
 800369a:	e73e      	b.n	800351a <HAL_RCC_OscConfig+0xc2>
 800369c:	fa94 f3a4 	rbit	r3, r4
      __HAL_RCC_LSI_DISABLE();
 80036a0:	fab3 f383 	clz	r3, r3
 80036a4:	440b      	add	r3, r1
 80036a6:	009b      	lsls	r3, r3, #2
 80036a8:	2702      	movs	r7, #2
 80036aa:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80036ac:	f7fe ff92 	bl	80025d4 <HAL_GetTick>
 80036b0:	4680      	mov	r8, r0
 80036b2:	fa97 f3a7 	rbit	r3, r7
 80036b6:	fa97 f3a7 	rbit	r3, r7
 80036ba:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036be:	6a72      	ldr	r2, [r6, #36]	@ 0x24
 80036c0:	fa97 f3a7 	rbit	r3, r7
 80036c4:	fab3 f383 	clz	r3, r3
 80036c8:	fa04 f303 	lsl.w	r3, r4, r3
 80036cc:	4213      	tst	r3, r2
 80036ce:	f43f aed3 	beq.w	8003478 <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80036d2:	f7fe ff7f 	bl	80025d4 <HAL_GetTick>
 80036d6:	eba0 0008 	sub.w	r0, r0, r8
 80036da:	2802      	cmp	r0, #2
 80036dc:	d9e9      	bls.n	80036b2 <HAL_RCC_OscConfig+0x25a>
 80036de:	e71c      	b.n	800351a <HAL_RCC_OscConfig+0xc2>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80036e0:	4c1b      	ldr	r4, [pc, #108]	@ (8003750 <HAL_RCC_OscConfig+0x2f8>)
 80036e2:	69e3      	ldr	r3, [r4, #28]
 80036e4:	00d9      	lsls	r1, r3, #3
 80036e6:	d431      	bmi.n	800374c <HAL_RCC_OscConfig+0x2f4>
      __HAL_RCC_PWR_CLK_ENABLE();
 80036e8:	69e3      	ldr	r3, [r4, #28]
 80036ea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80036ee:	61e3      	str	r3, [r4, #28]
 80036f0:	69e3      	ldr	r3, [r4, #28]
 80036f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80036f6:	9301      	str	r3, [sp, #4]
 80036f8:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80036fa:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036fc:	4f16      	ldr	r7, [pc, #88]	@ (8003758 <HAL_RCC_OscConfig+0x300>)
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	05da      	lsls	r2, r3, #23
 8003702:	d52b      	bpl.n	800375c <HAL_RCC_OscConfig+0x304>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003704:	68eb      	ldr	r3, [r5, #12]
 8003706:	2b01      	cmp	r3, #1
 8003708:	d139      	bne.n	800377e <HAL_RCC_OscConfig+0x326>
 800370a:	6a23      	ldr	r3, [r4, #32]
 800370c:	f043 0301 	orr.w	r3, r3, #1
 8003710:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8003712:	f7fe ff5f 	bl	80025d4 <HAL_GetTick>
 8003716:	2702      	movs	r7, #2
 8003718:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800371a:	f04f 0901 	mov.w	r9, #1
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800371e:	f241 3a88 	movw	sl, #5000	@ 0x1388
 8003722:	fa97 f3a7 	rbit	r3, r7
 8003726:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800372a:	6a22      	ldr	r2, [r4, #32]
 800372c:	fa97 f3a7 	rbit	r3, r7
 8003730:	fab3 f383 	clz	r3, r3
 8003734:	fa09 f303 	lsl.w	r3, r9, r3
 8003738:	4213      	tst	r3, r2
 800373a:	d053      	beq.n	80037e4 <HAL_RCC_OscConfig+0x38c>
    if(pwrclkchanged == SET)
 800373c:	2e00      	cmp	r6, #0
 800373e:	f43f ae9f 	beq.w	8003480 <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 8003742:	69e3      	ldr	r3, [r4, #28]
 8003744:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003748:	61e3      	str	r3, [r4, #28]
 800374a:	e699      	b.n	8003480 <HAL_RCC_OscConfig+0x28>
    FlagStatus       pwrclkchanged = RESET;
 800374c:	2600      	movs	r6, #0
 800374e:	e7d5      	b.n	80036fc <HAL_RCC_OscConfig+0x2a4>
 8003750:	40021000 	.word	0x40021000
 8003754:	10908120 	.word	0x10908120
 8003758:	40007000 	.word	0x40007000
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003762:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8003764:	f7fe ff36 	bl	80025d4 <HAL_GetTick>
 8003768:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	05db      	lsls	r3, r3, #23
 800376e:	d4c9      	bmi.n	8003704 <HAL_RCC_OscConfig+0x2ac>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003770:	f7fe ff30 	bl	80025d4 <HAL_GetTick>
 8003774:	eba0 0008 	sub.w	r0, r0, r8
 8003778:	2864      	cmp	r0, #100	@ 0x64
 800377a:	d9f6      	bls.n	800376a <HAL_RCC_OscConfig+0x312>
 800377c:	e6cd      	b.n	800351a <HAL_RCC_OscConfig+0xc2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800377e:	bb1b      	cbnz	r3, 80037c8 <HAL_RCC_OscConfig+0x370>
 8003780:	6a23      	ldr	r3, [r4, #32]
 8003782:	f023 0301 	bic.w	r3, r3, #1
 8003786:	6223      	str	r3, [r4, #32]
 8003788:	6a23      	ldr	r3, [r4, #32]
 800378a:	f023 0304 	bic.w	r3, r3, #4
 800378e:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8003790:	f7fe ff20 	bl	80025d4 <HAL_GetTick>
 8003794:	2702      	movs	r7, #2
 8003796:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003798:	f04f 0901 	mov.w	r9, #1
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800379c:	f241 3a88 	movw	sl, #5000	@ 0x1388
 80037a0:	fa97 f3a7 	rbit	r3, r7
 80037a4:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037a8:	6a22      	ldr	r2, [r4, #32]
 80037aa:	fa97 f3a7 	rbit	r3, r7
 80037ae:	fab3 f383 	clz	r3, r3
 80037b2:	fa09 f303 	lsl.w	r3, r9, r3
 80037b6:	4213      	tst	r3, r2
 80037b8:	d0c0      	beq.n	800373c <HAL_RCC_OscConfig+0x2e4>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80037ba:	f7fe ff0b 	bl	80025d4 <HAL_GetTick>
 80037be:	eba0 0008 	sub.w	r0, r0, r8
 80037c2:	4550      	cmp	r0, sl
 80037c4:	d9ec      	bls.n	80037a0 <HAL_RCC_OscConfig+0x348>
 80037c6:	e6a8      	b.n	800351a <HAL_RCC_OscConfig+0xc2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037c8:	2b05      	cmp	r3, #5
 80037ca:	6a23      	ldr	r3, [r4, #32]
 80037cc:	d103      	bne.n	80037d6 <HAL_RCC_OscConfig+0x37e>
 80037ce:	f043 0304 	orr.w	r3, r3, #4
 80037d2:	6223      	str	r3, [r4, #32]
 80037d4:	e799      	b.n	800370a <HAL_RCC_OscConfig+0x2b2>
 80037d6:	f023 0301 	bic.w	r3, r3, #1
 80037da:	6223      	str	r3, [r4, #32]
 80037dc:	6a23      	ldr	r3, [r4, #32]
 80037de:	f023 0304 	bic.w	r3, r3, #4
 80037e2:	e795      	b.n	8003710 <HAL_RCC_OscConfig+0x2b8>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80037e4:	f7fe fef6 	bl	80025d4 <HAL_GetTick>
 80037e8:	eba0 0008 	sub.w	r0, r0, r8
 80037ec:	4550      	cmp	r0, sl
 80037ee:	d998      	bls.n	8003722 <HAL_RCC_OscConfig+0x2ca>
 80037f0:	e693      	b.n	800351a <HAL_RCC_OscConfig+0xc2>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80037f2:	4c46      	ldr	r4, [pc, #280]	@ (800390c <HAL_RCC_OscConfig+0x4b4>)
 80037f4:	6862      	ldr	r2, [r4, #4]
 80037f6:	f002 020c 	and.w	r2, r2, #12
 80037fa:	2a08      	cmp	r2, #8
 80037fc:	d074      	beq.n	80038e8 <HAL_RCC_OscConfig+0x490>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80037fe:	2b02      	cmp	r3, #2
 8003800:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003804:	d14d      	bne.n	80038a2 <HAL_RCC_OscConfig+0x44a>
 8003806:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 800380a:	fab3 f383 	clz	r3, r3
 800380e:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003812:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003816:	009b      	lsls	r3, r3, #2
 8003818:	2200      	movs	r2, #0
 800381a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800381c:	f7fe feda 	bl	80025d4 <HAL_GetTick>
 8003820:	f04f 7800 	mov.w	r8, #33554432	@ 0x2000000
 8003824:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003826:	2601      	movs	r6, #1
 8003828:	fa98 f3a8 	rbit	r3, r8
 800382c:	6822      	ldr	r2, [r4, #0]
 800382e:	fa98 f3a8 	rbit	r3, r8
 8003832:	fab3 f383 	clz	r3, r3
 8003836:	fa06 f303 	lsl.w	r3, r6, r3
 800383a:	4213      	tst	r3, r2
 800383c:	d12b      	bne.n	8003896 <HAL_RCC_OscConfig+0x43e>
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800383e:	e9d5 1308 	ldrd	r1, r3, [r5, #32]
 8003842:	6862      	ldr	r2, [r4, #4]
 8003844:	430b      	orrs	r3, r1
 8003846:	f422 1274 	bic.w	r2, r2, #3997696	@ 0x3d0000
 800384a:	4313      	orrs	r3, r2
 800384c:	6063      	str	r3, [r4, #4]
 800384e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003852:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 8003856:	fab3 f383 	clz	r3, r3
 800385a:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800385e:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003862:	009b      	lsls	r3, r3, #2
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003864:	2701      	movs	r7, #1
        __HAL_RCC_PLL_ENABLE();
 8003866:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 8003868:	f7fe feb4 	bl	80025d4 <HAL_GetTick>
 800386c:	f04f 7600 	mov.w	r6, #33554432	@ 0x2000000
 8003870:	4605      	mov	r5, r0
 8003872:	fa96 f3a6 	rbit	r3, r6
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003876:	6822      	ldr	r2, [r4, #0]
 8003878:	fa96 f3a6 	rbit	r3, r6
 800387c:	fab3 f383 	clz	r3, r3
 8003880:	fa07 f303 	lsl.w	r3, r7, r3
 8003884:	4213      	tst	r3, r2
 8003886:	f47f adff 	bne.w	8003488 <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800388a:	f7fe fea3 	bl	80025d4 <HAL_GetTick>
 800388e:	1b40      	subs	r0, r0, r5
 8003890:	2802      	cmp	r0, #2
 8003892:	d9ee      	bls.n	8003872 <HAL_RCC_OscConfig+0x41a>
 8003894:	e641      	b.n	800351a <HAL_RCC_OscConfig+0xc2>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003896:	f7fe fe9d 	bl	80025d4 <HAL_GetTick>
 800389a:	1bc0      	subs	r0, r0, r7
 800389c:	2802      	cmp	r0, #2
 800389e:	d9c3      	bls.n	8003828 <HAL_RCC_OscConfig+0x3d0>
 80038a0:	e63b      	b.n	800351a <HAL_RCC_OscConfig+0xc2>
 80038a2:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 80038a6:	fab3 f383 	clz	r3, r3
 80038aa:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80038ae:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80038b2:	009b      	lsls	r3, r3, #2
 80038b4:	2200      	movs	r2, #0
 80038b6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80038b8:	f7fe fe8c 	bl	80025d4 <HAL_GetTick>
 80038bc:	f04f 7600 	mov.w	r6, #33554432	@ 0x2000000
 80038c0:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80038c2:	2701      	movs	r7, #1
 80038c4:	fa96 f3a6 	rbit	r3, r6
 80038c8:	6822      	ldr	r2, [r4, #0]
 80038ca:	fa96 f3a6 	rbit	r3, r6
 80038ce:	fab3 f383 	clz	r3, r3
 80038d2:	fa07 f303 	lsl.w	r3, r7, r3
 80038d6:	4213      	tst	r3, r2
 80038d8:	f43f add6 	beq.w	8003488 <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038dc:	f7fe fe7a 	bl	80025d4 <HAL_GetTick>
 80038e0:	1b40      	subs	r0, r0, r5
 80038e2:	2802      	cmp	r0, #2
 80038e4:	d9ee      	bls.n	80038c4 <HAL_RCC_OscConfig+0x46c>
 80038e6:	e618      	b.n	800351a <HAL_RCC_OscConfig+0xc2>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80038e8:	2b01      	cmp	r3, #1
 80038ea:	f43f adee 	beq.w	80034ca <HAL_RCC_OscConfig+0x72>
        pll_config = RCC->CFGR;
 80038ee:	6860      	ldr	r0, [r4, #4]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80038f0:	6a2b      	ldr	r3, [r5, #32]
 80038f2:	f400 3280 	and.w	r2, r0, #65536	@ 0x10000
 80038f6:	429a      	cmp	r2, r3
 80038f8:	f47f ade7 	bne.w	80034ca <HAL_RCC_OscConfig+0x72>
 80038fc:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80038fe:	f400 1070 	and.w	r0, r0, #3932160	@ 0x3c0000
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003902:	1ac0      	subs	r0, r0, r3
 8003904:	bf18      	it	ne
 8003906:	2001      	movne	r0, #1
 8003908:	e608      	b.n	800351c <HAL_RCC_OscConfig+0xc4>
 800390a:	bf00      	nop
 800390c:	40021000 	.word	0x40021000

08003910 <HAL_RCC_GetSysClockFreq>:
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
<<<<<<< HEAD
 80059e4:	4b0c      	ldr	r3, [pc, #48]	@ (8005a18 <HAL_RCC_GetSysClockFreq+0x34>)
 80059e6:	685a      	ldr	r2, [r3, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80059e8:	f002 010c 	and.w	r1, r2, #12
 80059ec:	2908      	cmp	r1, #8
 80059ee:	d111      	bne.n	8005a14 <HAL_RCC_GetSysClockFreq+0x30>
=======
 8003910:	4b0c      	ldr	r3, [pc, #48]	@ (8003944 <HAL_RCC_GetSysClockFreq+0x34>)
 8003912:	685a      	ldr	r2, [r3, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003914:	f002 010c 	and.w	r1, r2, #12
 8003918:	2908      	cmp	r1, #8
 800391a:	d111      	bne.n	8003940 <HAL_RCC_GetSysClockFreq+0x30>
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
<<<<<<< HEAD
 80059f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80059f2:	480a      	ldr	r0, [pc, #40]	@ (8005a1c <HAL_RCC_GetSysClockFreq+0x38>)
 80059f4:	f3c2 4183 	ubfx	r1, r2, #18, #4
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80059f8:	03d2      	lsls	r2, r2, #15
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 80059fa:	bf44      	itt	mi
 80059fc:	f003 030f 	andmi.w	r3, r3, #15
 8005a00:	4a07      	ldrmi	r2, [pc, #28]	@ (8005a20 <HAL_RCC_GetSysClockFreq+0x3c>)
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8005a02:	5c40      	ldrb	r0, [r0, r1]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8005a04:	bf49      	itett	mi
 8005a06:	5cd2      	ldrbmi	r2, [r2, r3]
=======
 800391c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800391e:	480a      	ldr	r0, [pc, #40]	@ (8003948 <HAL_RCC_GetSysClockFreq+0x38>)
 8003920:	f3c2 4183 	ubfx	r1, r2, #18, #4
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003924:	03d2      	lsls	r2, r2, #15
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8003926:	bf44      	itt	mi
 8003928:	f003 030f 	andmi.w	r3, r3, #15
 800392c:	4a07      	ldrmi	r2, [pc, #28]	@ (800394c <HAL_RCC_GetSysClockFreq+0x3c>)
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800392e:	5c40      	ldrb	r0, [r0, r1]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8003930:	bf49      	itett	mi
 8003932:	5cd2      	ldrbmi	r2, [r2, r3]
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
<<<<<<< HEAD
 8005a08:	4b06      	ldrpl	r3, [pc, #24]	@ (8005a24 <HAL_RCC_GetSysClockFreq+0x40>)
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005a0a:	4b07      	ldrmi	r3, [pc, #28]	@ (8005a28 <HAL_RCC_GetSysClockFreq+0x44>)
 8005a0c:	fbb3 f3f2 	udivmi	r3, r3, r2
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8005a10:	4358      	muls	r0, r3
 8005a12:	4770      	bx	lr
      sysclockfreq = HSE_VALUE;
 8005a14:	4804      	ldr	r0, [pc, #16]	@ (8005a28 <HAL_RCC_GetSysClockFreq+0x44>)
=======
 8003934:	4b06      	ldrpl	r3, [pc, #24]	@ (8003950 <HAL_RCC_GetSysClockFreq+0x40>)
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003936:	4b07      	ldrmi	r3, [pc, #28]	@ (8003954 <HAL_RCC_GetSysClockFreq+0x44>)
 8003938:	fbb3 f3f2 	udivmi	r3, r3, r2
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800393c:	4358      	muls	r0, r3
 800393e:	4770      	bx	lr
      sysclockfreq = HSE_VALUE;
 8003940:	4804      	ldr	r0, [pc, #16]	@ (8003954 <HAL_RCC_GetSysClockFreq+0x44>)
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
<<<<<<< HEAD
 8005a16:	4770      	bx	lr
 8005a18:	40021000 	.word	0x40021000
 8005a1c:	08010114 	.word	0x08010114
 8005a20:	08010104 	.word	0x08010104
 8005a24:	003d0900 	.word	0x003d0900
 8005a28:	007a1200 	.word	0x007a1200

08005a2c <HAL_RCC_ClockConfig>:
{
 8005a2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a30:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8005a32:	4604      	mov	r4, r0
 8005a34:	b910      	cbnz	r0, 8005a3c <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8005a36:	2001      	movs	r0, #1
}
 8005a38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005a3c:	4a4a      	ldr	r2, [pc, #296]	@ (8005b68 <HAL_RCC_ClockConfig+0x13c>)
 8005a3e:	6813      	ldr	r3, [r2, #0]
 8005a40:	f003 0307 	and.w	r3, r3, #7
 8005a44:	428b      	cmp	r3, r1
 8005a46:	d32e      	bcc.n	8005aa6 <HAL_RCC_ClockConfig+0x7a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005a48:	6822      	ldr	r2, [r4, #0]
 8005a4a:	0791      	lsls	r1, r2, #30
 8005a4c:	d436      	bmi.n	8005abc <HAL_RCC_ClockConfig+0x90>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005a4e:	07d2      	lsls	r2, r2, #31
 8005a50:	d43c      	bmi.n	8005acc <HAL_RCC_ClockConfig+0xa0>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005a52:	4a45      	ldr	r2, [pc, #276]	@ (8005b68 <HAL_RCC_ClockConfig+0x13c>)
 8005a54:	6813      	ldr	r3, [r2, #0]
 8005a56:	f003 0307 	and.w	r3, r3, #7
 8005a5a:	42ab      	cmp	r3, r5
 8005a5c:	d870      	bhi.n	8005b40 <HAL_RCC_ClockConfig+0x114>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a5e:	6822      	ldr	r2, [r4, #0]
 8005a60:	4d42      	ldr	r5, [pc, #264]	@ (8005b6c <HAL_RCC_ClockConfig+0x140>)
 8005a62:	f012 0f04 	tst.w	r2, #4
 8005a66:	d177      	bne.n	8005b58 <HAL_RCC_ClockConfig+0x12c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a68:	0713      	lsls	r3, r2, #28
 8005a6a:	d506      	bpl.n	8005a7a <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005a6c:	686b      	ldr	r3, [r5, #4]
 8005a6e:	6922      	ldr	r2, [r4, #16]
 8005a70:	f423 5360 	bic.w	r3, r3, #14336	@ 0x3800
 8005a74:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8005a78:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8005a7a:	f7ff ffb3 	bl	80059e4 <HAL_RCC_GetSysClockFreq>
 8005a7e:	686b      	ldr	r3, [r5, #4]
 8005a80:	22f0      	movs	r2, #240	@ 0xf0
 8005a82:	fa92 f2a2 	rbit	r2, r2
 8005a86:	fab2 f282 	clz	r2, r2
 8005a8a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005a8e:	40d3      	lsrs	r3, r2
 8005a90:	4a37      	ldr	r2, [pc, #220]	@ (8005b70 <HAL_RCC_ClockConfig+0x144>)
 8005a92:	5cd3      	ldrb	r3, [r2, r3]
 8005a94:	40d8      	lsrs	r0, r3
 8005a96:	4b37      	ldr	r3, [pc, #220]	@ (8005b74 <HAL_RCC_ClockConfig+0x148>)
 8005a98:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 8005a9a:	4b37      	ldr	r3, [pc, #220]	@ (8005b78 <HAL_RCC_ClockConfig+0x14c>)
 8005a9c:	6818      	ldr	r0, [r3, #0]
 8005a9e:	f7fe fc8f 	bl	80043c0 <HAL_InitTick>
  return HAL_OK;
 8005aa2:	2000      	movs	r0, #0
 8005aa4:	e7c8      	b.n	8005a38 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005aa6:	6813      	ldr	r3, [r2, #0]
 8005aa8:	f023 0307 	bic.w	r3, r3, #7
 8005aac:	430b      	orrs	r3, r1
 8005aae:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005ab0:	6813      	ldr	r3, [r2, #0]
 8005ab2:	f003 0307 	and.w	r3, r3, #7
 8005ab6:	428b      	cmp	r3, r1
 8005ab8:	d1bd      	bne.n	8005a36 <HAL_RCC_ClockConfig+0xa>
 8005aba:	e7c5      	b.n	8005a48 <HAL_RCC_ClockConfig+0x1c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005abc:	492b      	ldr	r1, [pc, #172]	@ (8005b6c <HAL_RCC_ClockConfig+0x140>)
 8005abe:	68a0      	ldr	r0, [r4, #8]
 8005ac0:	684b      	ldr	r3, [r1, #4]
 8005ac2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005ac6:	4303      	orrs	r3, r0
 8005ac8:	604b      	str	r3, [r1, #4]
 8005aca:	e7c0      	b.n	8005a4e <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005acc:	6862      	ldr	r2, [r4, #4]
 8005ace:	4e27      	ldr	r6, [pc, #156]	@ (8005b6c <HAL_RCC_ClockConfig+0x140>)
 8005ad0:	2a01      	cmp	r2, #1
 8005ad2:	d124      	bne.n	8005b1e <HAL_RCC_ClockConfig+0xf2>
 8005ad4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005ad8:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005adc:	6831      	ldr	r1, [r6, #0]
 8005ade:	fa93 f3a3 	rbit	r3, r3
 8005ae2:	fab3 f383 	clz	r3, r3
 8005ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8005aea:	420b      	tst	r3, r1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005aec:	d0a3      	beq.n	8005a36 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005aee:	6873      	ldr	r3, [r6, #4]
 8005af0:	f023 0303 	bic.w	r3, r3, #3
 8005af4:	4313      	orrs	r3, r2
 8005af6:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8005af8:	f7fe fdb6 	bl	8004668 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005afc:	f241 3888 	movw	r8, #5000	@ 0x1388
    tickstart = HAL_GetTick();
 8005b00:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b02:	6873      	ldr	r3, [r6, #4]
 8005b04:	6862      	ldr	r2, [r4, #4]
 8005b06:	f003 030c 	and.w	r3, r3, #12
 8005b0a:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8005b0e:	d0a0      	beq.n	8005a52 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005b10:	f7fe fdaa 	bl	8004668 <HAL_GetTick>
 8005b14:	1bc0      	subs	r0, r0, r7
 8005b16:	4540      	cmp	r0, r8
 8005b18:	d9f3      	bls.n	8005b02 <HAL_RCC_ClockConfig+0xd6>
        return HAL_TIMEOUT;
 8005b1a:	2003      	movs	r0, #3
 8005b1c:	e78c      	b.n	8005a38 <HAL_RCC_ClockConfig+0xc>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005b1e:	2a02      	cmp	r2, #2
 8005b20:	bf0c      	ite	eq
 8005b22:	f04f 7300 	moveq.w	r3, #33554432	@ 0x2000000
 8005b26:	2302      	movne	r3, #2
 8005b28:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005b2c:	6830      	ldr	r0, [r6, #0]
 8005b2e:	fa93 f3a3 	rbit	r3, r3
 8005b32:	2101      	movs	r1, #1
 8005b34:	fab3 f383 	clz	r3, r3
 8005b38:	fa01 f303 	lsl.w	r3, r1, r3
 8005b3c:	4203      	tst	r3, r0
 8005b3e:	e7d5      	b.n	8005aec <HAL_RCC_ClockConfig+0xc0>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b40:	6813      	ldr	r3, [r2, #0]
 8005b42:	f023 0307 	bic.w	r3, r3, #7
 8005b46:	432b      	orrs	r3, r5
 8005b48:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b4a:	6813      	ldr	r3, [r2, #0]
 8005b4c:	f003 0307 	and.w	r3, r3, #7
 8005b50:	42ab      	cmp	r3, r5
 8005b52:	f47f af70 	bne.w	8005a36 <HAL_RCC_ClockConfig+0xa>
 8005b56:	e782      	b.n	8005a5e <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005b58:	686b      	ldr	r3, [r5, #4]
 8005b5a:	68e1      	ldr	r1, [r4, #12]
 8005b5c:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8005b60:	430b      	orrs	r3, r1
 8005b62:	606b      	str	r3, [r5, #4]
 8005b64:	e780      	b.n	8005a68 <HAL_RCC_ClockConfig+0x3c>
 8005b66:	bf00      	nop
 8005b68:	40022000 	.word	0x40022000
 8005b6c:	40021000 	.word	0x40021000
 8005b70:	080100f4 	.word	0x080100f4
 8005b74:	2000000c 	.word	0x2000000c
 8005b78:	20000014 	.word	0x20000014

08005b7c <HAL_RCC_GetPCLK1Freq>:
=======
 8003942:	4770      	bx	lr
 8003944:	40021000 	.word	0x40021000
 8003948:	0800ce63 	.word	0x0800ce63
 800394c:	0800ce53 	.word	0x0800ce53
 8003950:	003d0900 	.word	0x003d0900
 8003954:	007a1200 	.word	0x007a1200

08003958 <HAL_RCC_ClockConfig>:
{
 8003958:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800395c:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 800395e:	4604      	mov	r4, r0
 8003960:	b910      	cbnz	r0, 8003968 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8003962:	2001      	movs	r0, #1
}
 8003964:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003968:	4a4a      	ldr	r2, [pc, #296]	@ (8003a94 <HAL_RCC_ClockConfig+0x13c>)
 800396a:	6813      	ldr	r3, [r2, #0]
 800396c:	f003 0307 	and.w	r3, r3, #7
 8003970:	428b      	cmp	r3, r1
 8003972:	d32e      	bcc.n	80039d2 <HAL_RCC_ClockConfig+0x7a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003974:	6822      	ldr	r2, [r4, #0]
 8003976:	0791      	lsls	r1, r2, #30
 8003978:	d436      	bmi.n	80039e8 <HAL_RCC_ClockConfig+0x90>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800397a:	07d2      	lsls	r2, r2, #31
 800397c:	d43c      	bmi.n	80039f8 <HAL_RCC_ClockConfig+0xa0>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800397e:	4a45      	ldr	r2, [pc, #276]	@ (8003a94 <HAL_RCC_ClockConfig+0x13c>)
 8003980:	6813      	ldr	r3, [r2, #0]
 8003982:	f003 0307 	and.w	r3, r3, #7
 8003986:	42ab      	cmp	r3, r5
 8003988:	d870      	bhi.n	8003a6c <HAL_RCC_ClockConfig+0x114>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800398a:	6822      	ldr	r2, [r4, #0]
 800398c:	4d42      	ldr	r5, [pc, #264]	@ (8003a98 <HAL_RCC_ClockConfig+0x140>)
 800398e:	f012 0f04 	tst.w	r2, #4
 8003992:	d177      	bne.n	8003a84 <HAL_RCC_ClockConfig+0x12c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003994:	0713      	lsls	r3, r2, #28
 8003996:	d506      	bpl.n	80039a6 <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003998:	686b      	ldr	r3, [r5, #4]
 800399a:	6922      	ldr	r2, [r4, #16]
 800399c:	f423 5360 	bic.w	r3, r3, #14336	@ 0x3800
 80039a0:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80039a4:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80039a6:	f7ff ffb3 	bl	8003910 <HAL_RCC_GetSysClockFreq>
 80039aa:	686b      	ldr	r3, [r5, #4]
 80039ac:	22f0      	movs	r2, #240	@ 0xf0
 80039ae:	fa92 f2a2 	rbit	r2, r2
 80039b2:	fab2 f282 	clz	r2, r2
 80039b6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80039ba:	40d3      	lsrs	r3, r2
 80039bc:	4a37      	ldr	r2, [pc, #220]	@ (8003a9c <HAL_RCC_ClockConfig+0x144>)
 80039be:	5cd3      	ldrb	r3, [r2, r3]
 80039c0:	40d8      	lsrs	r0, r3
 80039c2:	4b37      	ldr	r3, [pc, #220]	@ (8003aa0 <HAL_RCC_ClockConfig+0x148>)
 80039c4:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 80039c6:	4b37      	ldr	r3, [pc, #220]	@ (8003aa4 <HAL_RCC_ClockConfig+0x14c>)
 80039c8:	6818      	ldr	r0, [r3, #0]
 80039ca:	f7fe fcaf 	bl	800232c <HAL_InitTick>
  return HAL_OK;
 80039ce:	2000      	movs	r0, #0
 80039d0:	e7c8      	b.n	8003964 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039d2:	6813      	ldr	r3, [r2, #0]
 80039d4:	f023 0307 	bic.w	r3, r3, #7
 80039d8:	430b      	orrs	r3, r1
 80039da:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80039dc:	6813      	ldr	r3, [r2, #0]
 80039de:	f003 0307 	and.w	r3, r3, #7
 80039e2:	428b      	cmp	r3, r1
 80039e4:	d1bd      	bne.n	8003962 <HAL_RCC_ClockConfig+0xa>
 80039e6:	e7c5      	b.n	8003974 <HAL_RCC_ClockConfig+0x1c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80039e8:	492b      	ldr	r1, [pc, #172]	@ (8003a98 <HAL_RCC_ClockConfig+0x140>)
 80039ea:	68a0      	ldr	r0, [r4, #8]
 80039ec:	684b      	ldr	r3, [r1, #4]
 80039ee:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80039f2:	4303      	orrs	r3, r0
 80039f4:	604b      	str	r3, [r1, #4]
 80039f6:	e7c0      	b.n	800397a <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80039f8:	6862      	ldr	r2, [r4, #4]
 80039fa:	4e27      	ldr	r6, [pc, #156]	@ (8003a98 <HAL_RCC_ClockConfig+0x140>)
 80039fc:	2a01      	cmp	r2, #1
 80039fe:	d124      	bne.n	8003a4a <HAL_RCC_ClockConfig+0xf2>
 8003a00:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003a04:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a08:	6831      	ldr	r1, [r6, #0]
 8003a0a:	fa93 f3a3 	rbit	r3, r3
 8003a0e:	fab3 f383 	clz	r3, r3
 8003a12:	fa02 f303 	lsl.w	r3, r2, r3
 8003a16:	420b      	tst	r3, r1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a18:	d0a3      	beq.n	8003962 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003a1a:	6873      	ldr	r3, [r6, #4]
 8003a1c:	f023 0303 	bic.w	r3, r3, #3
 8003a20:	4313      	orrs	r3, r2
 8003a22:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8003a24:	f7fe fdd6 	bl	80025d4 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a28:	f241 3888 	movw	r8, #5000	@ 0x1388
    tickstart = HAL_GetTick();
 8003a2c:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a2e:	6873      	ldr	r3, [r6, #4]
 8003a30:	6862      	ldr	r2, [r4, #4]
 8003a32:	f003 030c 	and.w	r3, r3, #12
 8003a36:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8003a3a:	d0a0      	beq.n	800397e <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a3c:	f7fe fdca 	bl	80025d4 <HAL_GetTick>
 8003a40:	1bc0      	subs	r0, r0, r7
 8003a42:	4540      	cmp	r0, r8
 8003a44:	d9f3      	bls.n	8003a2e <HAL_RCC_ClockConfig+0xd6>
        return HAL_TIMEOUT;
 8003a46:	2003      	movs	r0, #3
 8003a48:	e78c      	b.n	8003964 <HAL_RCC_ClockConfig+0xc>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003a4a:	2a02      	cmp	r2, #2
 8003a4c:	bf0c      	ite	eq
 8003a4e:	f04f 7300 	moveq.w	r3, #33554432	@ 0x2000000
 8003a52:	2302      	movne	r3, #2
 8003a54:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a58:	6830      	ldr	r0, [r6, #0]
 8003a5a:	fa93 f3a3 	rbit	r3, r3
 8003a5e:	2101      	movs	r1, #1
 8003a60:	fab3 f383 	clz	r3, r3
 8003a64:	fa01 f303 	lsl.w	r3, r1, r3
 8003a68:	4203      	tst	r3, r0
 8003a6a:	e7d5      	b.n	8003a18 <HAL_RCC_ClockConfig+0xc0>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a6c:	6813      	ldr	r3, [r2, #0]
 8003a6e:	f023 0307 	bic.w	r3, r3, #7
 8003a72:	432b      	orrs	r3, r5
 8003a74:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a76:	6813      	ldr	r3, [r2, #0]
 8003a78:	f003 0307 	and.w	r3, r3, #7
 8003a7c:	42ab      	cmp	r3, r5
 8003a7e:	f47f af70 	bne.w	8003962 <HAL_RCC_ClockConfig+0xa>
 8003a82:	e782      	b.n	800398a <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a84:	686b      	ldr	r3, [r5, #4]
 8003a86:	68e1      	ldr	r1, [r4, #12]
 8003a88:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8003a8c:	430b      	orrs	r3, r1
 8003a8e:	606b      	str	r3, [r5, #4]
 8003a90:	e780      	b.n	8003994 <HAL_RCC_ClockConfig+0x3c>
 8003a92:	bf00      	nop
 8003a94:	40022000 	.word	0x40022000
 8003a98:	40021000 	.word	0x40021000
 8003a9c:	0800ce43 	.word	0x0800ce43
 8003aa0:	2000000c 	.word	0x2000000c
 8003aa4:	20000014 	.word	0x20000014

08003aa8 <HAL_RCC_GetPCLK1Freq>:
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
<<<<<<< HEAD
 8005b7c:	4b08      	ldr	r3, [pc, #32]	@ (8005ba0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005b7e:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8005b82:	685b      	ldr	r3, [r3, #4]
 8005b84:	fa92 f2a2 	rbit	r2, r2
 8005b88:	fab2 f282 	clz	r2, r2
 8005b8c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005b90:	40d3      	lsrs	r3, r2
 8005b92:	4a04      	ldr	r2, [pc, #16]	@ (8005ba4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005b94:	5cd3      	ldrb	r3, [r2, r3]
 8005b96:	4a04      	ldr	r2, [pc, #16]	@ (8005ba8 <HAL_RCC_GetPCLK1Freq+0x2c>)
 8005b98:	6810      	ldr	r0, [r2, #0]
}    
 8005b9a:	40d8      	lsrs	r0, r3
 8005b9c:	4770      	bx	lr
 8005b9e:	bf00      	nop
 8005ba0:	40021000 	.word	0x40021000
 8005ba4:	080100ec 	.word	0x080100ec
 8005ba8:	2000000c 	.word	0x2000000c

08005bac <HAL_RCC_GetPCLK2Freq>:
=======
 8003aa8:	4b08      	ldr	r3, [pc, #32]	@ (8003acc <HAL_RCC_GetPCLK1Freq+0x24>)
 8003aaa:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8003aae:	685b      	ldr	r3, [r3, #4]
 8003ab0:	fa92 f2a2 	rbit	r2, r2
 8003ab4:	fab2 f282 	clz	r2, r2
 8003ab8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003abc:	40d3      	lsrs	r3, r2
 8003abe:	4a04      	ldr	r2, [pc, #16]	@ (8003ad0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003ac0:	5cd3      	ldrb	r3, [r2, r3]
 8003ac2:	4a04      	ldr	r2, [pc, #16]	@ (8003ad4 <HAL_RCC_GetPCLK1Freq+0x2c>)
 8003ac4:	6810      	ldr	r0, [r2, #0]
}    
 8003ac6:	40d8      	lsrs	r0, r3
 8003ac8:	4770      	bx	lr
 8003aca:	bf00      	nop
 8003acc:	40021000 	.word	0x40021000
 8003ad0:	0800ce3b 	.word	0x0800ce3b
 8003ad4:	2000000c 	.word	0x2000000c

08003ad8 <HAL_RCC_GetPCLK2Freq>:
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
<<<<<<< HEAD
 8005bac:	4b08      	ldr	r3, [pc, #32]	@ (8005bd0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005bae:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8005bb2:	685b      	ldr	r3, [r3, #4]
 8005bb4:	fa92 f2a2 	rbit	r2, r2
 8005bb8:	fab2 f282 	clz	r2, r2
 8005bbc:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8005bc0:	40d3      	lsrs	r3, r2
 8005bc2:	4a04      	ldr	r2, [pc, #16]	@ (8005bd4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005bc4:	5cd3      	ldrb	r3, [r2, r3]
 8005bc6:	4a04      	ldr	r2, [pc, #16]	@ (8005bd8 <HAL_RCC_GetPCLK2Freq+0x2c>)
 8005bc8:	6810      	ldr	r0, [r2, #0]
} 
 8005bca:	40d8      	lsrs	r0, r3
 8005bcc:	4770      	bx	lr
 8005bce:	bf00      	nop
 8005bd0:	40021000 	.word	0x40021000
 8005bd4:	080100ec 	.word	0x080100ec
 8005bd8:	2000000c 	.word	0x2000000c

08005bdc <HAL_RCC_GetClockConfig>:
=======
 8003ad8:	4b08      	ldr	r3, [pc, #32]	@ (8003afc <HAL_RCC_GetPCLK2Freq+0x24>)
 8003ada:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8003ade:	685b      	ldr	r3, [r3, #4]
 8003ae0:	fa92 f2a2 	rbit	r2, r2
 8003ae4:	fab2 f282 	clz	r2, r2
 8003ae8:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8003aec:	40d3      	lsrs	r3, r2
 8003aee:	4a04      	ldr	r2, [pc, #16]	@ (8003b00 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003af0:	5cd3      	ldrb	r3, [r2, r3]
 8003af2:	4a04      	ldr	r2, [pc, #16]	@ (8003b04 <HAL_RCC_GetPCLK2Freq+0x2c>)
 8003af4:	6810      	ldr	r0, [r2, #0]
} 
 8003af6:	40d8      	lsrs	r0, r3
 8003af8:	4770      	bx	lr
 8003afa:	bf00      	nop
 8003afc:	40021000 	.word	0x40021000
 8003b00:	0800ce3b 	.word	0x0800ce3b
 8003b04:	2000000c 	.word	0x2000000c

08003b08 <HAL_RCC_GetClockConfig>:
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
<<<<<<< HEAD
 8005bdc:	230f      	movs	r3, #15
 8005bde:	6003      	str	r3, [r0, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005be0:	4b0b      	ldr	r3, [pc, #44]	@ (8005c10 <HAL_RCC_GetClockConfig+0x34>)
 8005be2:	685a      	ldr	r2, [r3, #4]
 8005be4:	f002 0203 	and.w	r2, r2, #3
 8005be8:	6042      	str	r2, [r0, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8005bea:	685a      	ldr	r2, [r3, #4]
 8005bec:	f002 02f0 	and.w	r2, r2, #240	@ 0xf0
 8005bf0:	6082      	str	r2, [r0, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 8005bf2:	685a      	ldr	r2, [r3, #4]
 8005bf4:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
 8005bf8:	60c2      	str	r2, [r0, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005bfa:	685b      	ldr	r3, [r3, #4]
 8005bfc:	08db      	lsrs	r3, r3, #3
 8005bfe:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005c02:	6103      	str	r3, [r0, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 8005c04:	4b03      	ldr	r3, [pc, #12]	@ (8005c14 <HAL_RCC_GetClockConfig+0x38>)
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f003 0307 	and.w	r3, r3, #7
 8005c0c:	600b      	str	r3, [r1, #0]
}
 8005c0e:	4770      	bx	lr
 8005c10:	40021000 	.word	0x40021000
 8005c14:	40022000 	.word	0x40022000

08005c18 <HAL_RCCEx_PeriphCLKConfig>:
=======
 8003b08:	230f      	movs	r3, #15
 8003b0a:	6003      	str	r3, [r0, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003b0c:	4b0b      	ldr	r3, [pc, #44]	@ (8003b3c <HAL_RCC_GetClockConfig+0x34>)
 8003b0e:	685a      	ldr	r2, [r3, #4]
 8003b10:	f002 0203 	and.w	r2, r2, #3
 8003b14:	6042      	str	r2, [r0, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8003b16:	685a      	ldr	r2, [r3, #4]
 8003b18:	f002 02f0 	and.w	r2, r2, #240	@ 0xf0
 8003b1c:	6082      	str	r2, [r0, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 8003b1e:	685a      	ldr	r2, [r3, #4]
 8003b20:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
 8003b24:	60c2      	str	r2, [r0, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003b26:	685b      	ldr	r3, [r3, #4]
 8003b28:	08db      	lsrs	r3, r3, #3
 8003b2a:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003b2e:	6103      	str	r3, [r0, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 8003b30:	4b03      	ldr	r3, [pc, #12]	@ (8003b40 <HAL_RCC_GetClockConfig+0x38>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f003 0307 	and.w	r3, r3, #7
 8003b38:	600b      	str	r3, [r1, #0]
}
 8003b3a:	4770      	bx	lr
 8003b3c:	40021000 	.word	0x40021000
 8003b40:	40022000 	.word	0x40022000

08003b44 <HAL_RCCEx_PeriphCLKConfig>:
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
<<<<<<< HEAD
 8005c18:	6803      	ldr	r3, [r0, #0]
{
 8005c1a:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005c1e:	03dd      	lsls	r5, r3, #15
{
 8005c20:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005c22:	d524      	bpl.n	8005c6e <HAL_RCCEx_PeriphCLKConfig+0x56>
=======
 8003b44:	6803      	ldr	r3, [r0, #0]
{
 8003b46:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003b4a:	03dd      	lsls	r5, r3, #15
{
 8003b4c:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003b4e:	d524      	bpl.n	8003b9a <HAL_RCCEx_PeriphCLKConfig+0x56>
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
<<<<<<< HEAD
 8005c24:	4d78      	ldr	r5, [pc, #480]	@ (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8005c26:	69eb      	ldr	r3, [r5, #28]
 8005c28:	00d8      	lsls	r0, r3, #3
 8005c2a:	f100 8091 	bmi.w	8005d50 <HAL_RCCEx_PeriphCLKConfig+0x138>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005c2e:	69eb      	ldr	r3, [r5, #28]
 8005c30:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005c34:	61eb      	str	r3, [r5, #28]
 8005c36:	69eb      	ldr	r3, [r5, #28]
 8005c38:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005c3c:	9301      	str	r3, [sp, #4]
 8005c3e:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8005c40:	2601      	movs	r6, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c42:	4f72      	ldr	r7, [pc, #456]	@ (8005e0c <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8005c44:	683b      	ldr	r3, [r7, #0]
 8005c46:	05d9      	lsls	r1, r3, #23
 8005c48:	f140 8084 	bpl.w	8005d54 <HAL_RCCEx_PeriphCLKConfig+0x13c>
=======
 8003b50:	4d78      	ldr	r5, [pc, #480]	@ (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8003b52:	69eb      	ldr	r3, [r5, #28]
 8003b54:	00d8      	lsls	r0, r3, #3
 8003b56:	f100 8091 	bmi.w	8003c7c <HAL_RCCEx_PeriphCLKConfig+0x138>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b5a:	69eb      	ldr	r3, [r5, #28]
 8003b5c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003b60:	61eb      	str	r3, [r5, #28]
 8003b62:	69eb      	ldr	r3, [r5, #28]
 8003b64:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b68:	9301      	str	r3, [sp, #4]
 8003b6a:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8003b6c:	2601      	movs	r6, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b6e:	4f72      	ldr	r7, [pc, #456]	@ (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	05d9      	lsls	r1, r3, #23
 8003b74:	f140 8084 	bpl.w	8003c80 <HAL_RCCEx_PeriphCLKConfig+0x13c>
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
<<<<<<< HEAD
 8005c4c:	6a2b      	ldr	r3, [r5, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005c4e:	6862      	ldr	r2, [r4, #4]
 8005c50:	f413 7340 	ands.w	r3, r3, #768	@ 0x300
 8005c54:	f040 8093 	bne.w	8005d7e <HAL_RCCEx_PeriphCLKConfig+0x166>
=======
 8003b78:	6a2b      	ldr	r3, [r5, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003b7a:	6862      	ldr	r2, [r4, #4]
 8003b7c:	f413 7340 	ands.w	r3, r3, #768	@ 0x300
 8003b80:	f040 8093 	bne.w	8003caa <HAL_RCCEx_PeriphCLKConfig+0x166>
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
<<<<<<< HEAD
 8005c58:	6a2b      	ldr	r3, [r5, #32]
 8005c5a:	6862      	ldr	r2, [r4, #4]
 8005c5c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005c60:	4313      	orrs	r3, r2
 8005c62:	622b      	str	r3, [r5, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005c64:	b11e      	cbz	r6, 8005c6e <HAL_RCCEx_PeriphCLKConfig+0x56>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005c66:	69eb      	ldr	r3, [r5, #28]
 8005c68:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005c6c:	61eb      	str	r3, [r5, #28]
=======
 8003b84:	6a2b      	ldr	r3, [r5, #32]
 8003b86:	6862      	ldr	r2, [r4, #4]
 8003b88:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003b8c:	4313      	orrs	r3, r2
 8003b8e:	622b      	str	r3, [r5, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003b90:	b11e      	cbz	r6, 8003b9a <HAL_RCCEx_PeriphCLKConfig+0x56>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b92:	69eb      	ldr	r3, [r5, #28]
 8003b94:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003b98:	61eb      	str	r3, [r5, #28]
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
<<<<<<< HEAD
 8005c6e:	6823      	ldr	r3, [r4, #0]
 8005c70:	07df      	lsls	r7, r3, #31
 8005c72:	d506      	bpl.n	8005c82 <HAL_RCCEx_PeriphCLKConfig+0x6a>
=======
 8003b9a:	6823      	ldr	r3, [r4, #0]
 8003b9c:	07df      	lsls	r7, r3, #31
 8003b9e:	d506      	bpl.n	8003bae <HAL_RCCEx_PeriphCLKConfig+0x6a>
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
<<<<<<< HEAD
 8005c74:	4964      	ldr	r1, [pc, #400]	@ (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8005c76:	68a0      	ldr	r0, [r4, #8]
 8005c78:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 8005c7a:	f022 0203 	bic.w	r2, r2, #3
 8005c7e:	4302      	orrs	r2, r0
 8005c80:	630a      	str	r2, [r1, #48]	@ 0x30
=======
 8003ba0:	4964      	ldr	r1, [pc, #400]	@ (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8003ba2:	68a0      	ldr	r0, [r4, #8]
 8003ba4:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 8003ba6:	f022 0203 	bic.w	r2, r2, #3
 8003baa:	4302      	orrs	r2, r0
 8003bac:	630a      	str	r2, [r1, #48]	@ 0x30
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
<<<<<<< HEAD
 8005c82:	079e      	lsls	r6, r3, #30
 8005c84:	d506      	bpl.n	8005c94 <HAL_RCCEx_PeriphCLKConfig+0x7c>
=======
 8003bae:	079e      	lsls	r6, r3, #30
 8003bb0:	d506      	bpl.n	8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
<<<<<<< HEAD
 8005c86:	4960      	ldr	r1, [pc, #384]	@ (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8005c88:	68e0      	ldr	r0, [r4, #12]
 8005c8a:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 8005c8c:	f422 3240 	bic.w	r2, r2, #196608	@ 0x30000
 8005c90:	4302      	orrs	r2, r0
 8005c92:	630a      	str	r2, [r1, #48]	@ 0x30
=======
 8003bb2:	4960      	ldr	r1, [pc, #384]	@ (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8003bb4:	68e0      	ldr	r0, [r4, #12]
 8003bb6:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 8003bb8:	f422 3240 	bic.w	r2, r2, #196608	@ 0x30000
 8003bbc:	4302      	orrs	r2, r0
 8003bbe:	630a      	str	r2, [r1, #48]	@ 0x30
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
<<<<<<< HEAD
 8005c94:	075d      	lsls	r5, r3, #29
 8005c96:	d506      	bpl.n	8005ca6 <HAL_RCCEx_PeriphCLKConfig+0x8e>
=======
 8003bc0:	075d      	lsls	r5, r3, #29
 8003bc2:	d506      	bpl.n	8003bd2 <HAL_RCCEx_PeriphCLKConfig+0x8e>
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
<<<<<<< HEAD
 8005c98:	495b      	ldr	r1, [pc, #364]	@ (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8005c9a:	6920      	ldr	r0, [r4, #16]
 8005c9c:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 8005c9e:	f422 2240 	bic.w	r2, r2, #786432	@ 0xc0000
 8005ca2:	4302      	orrs	r2, r0
 8005ca4:	630a      	str	r2, [r1, #48]	@ 0x30
=======
 8003bc4:	495b      	ldr	r1, [pc, #364]	@ (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8003bc6:	6920      	ldr	r0, [r4, #16]
 8003bc8:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 8003bca:	f422 2240 	bic.w	r2, r2, #786432	@ 0xc0000
 8003bce:	4302      	orrs	r2, r0
 8003bd0:	630a      	str	r2, [r1, #48]	@ 0x30
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
<<<<<<< HEAD
 8005ca6:	0698      	lsls	r0, r3, #26
 8005ca8:	d506      	bpl.n	8005cb8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
=======
 8003bd2:	0698      	lsls	r0, r3, #26
 8003bd4:	d506      	bpl.n	8003be4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
<<<<<<< HEAD
 8005caa:	4957      	ldr	r1, [pc, #348]	@ (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8005cac:	69e0      	ldr	r0, [r4, #28]
 8005cae:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 8005cb0:	f022 0210 	bic.w	r2, r2, #16
 8005cb4:	4302      	orrs	r2, r0
 8005cb6:	630a      	str	r2, [r1, #48]	@ 0x30
=======
 8003bd6:	4957      	ldr	r1, [pc, #348]	@ (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8003bd8:	69e0      	ldr	r0, [r4, #28]
 8003bda:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 8003bdc:	f022 0210 	bic.w	r2, r2, #16
 8003be0:	4302      	orrs	r2, r0
 8003be2:	630a      	str	r2, [r1, #48]	@ 0x30
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
<<<<<<< HEAD
 8005cb8:	0399      	lsls	r1, r3, #14
 8005cba:	d506      	bpl.n	8005cca <HAL_RCCEx_PeriphCLKConfig+0xb2>
=======
 8003be4:	0399      	lsls	r1, r3, #14
 8003be6:	d506      	bpl.n	8003bf6 <HAL_RCCEx_PeriphCLKConfig+0xb2>
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
<<<<<<< HEAD
 8005cbc:	4952      	ldr	r1, [pc, #328]	@ (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8005cbe:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8005cc0:	684a      	ldr	r2, [r1, #4]
 8005cc2:	f422 0280 	bic.w	r2, r2, #4194304	@ 0x400000
 8005cc6:	4302      	orrs	r2, r0
 8005cc8:	604a      	str	r2, [r1, #4]
=======
 8003be8:	4952      	ldr	r1, [pc, #328]	@ (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8003bea:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8003bec:	684a      	ldr	r2, [r1, #4]
 8003bee:	f422 0280 	bic.w	r2, r2, #4194304	@ 0x400000
 8003bf2:	4302      	orrs	r2, r0
 8003bf4:	604a      	str	r2, [r1, #4]
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
<<<<<<< HEAD
 8005cca:	065a      	lsls	r2, r3, #25
 8005ccc:	d506      	bpl.n	8005cdc <HAL_RCCEx_PeriphCLKConfig+0xc4>
=======
 8003bf6:	065a      	lsls	r2, r3, #25
 8003bf8:	d506      	bpl.n	8003c08 <HAL_RCCEx_PeriphCLKConfig+0xc4>
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
<<<<<<< HEAD
 8005cce:	494e      	ldr	r1, [pc, #312]	@ (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8005cd0:	6a20      	ldr	r0, [r4, #32]
 8005cd2:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 8005cd4:	f022 0220 	bic.w	r2, r2, #32
 8005cd8:	4302      	orrs	r2, r0
 8005cda:	630a      	str	r2, [r1, #48]	@ 0x30
=======
 8003bfa:	494e      	ldr	r1, [pc, #312]	@ (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8003bfc:	6a20      	ldr	r0, [r4, #32]
 8003bfe:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 8003c00:	f022 0220 	bic.w	r2, r2, #32
 8003c04:	4302      	orrs	r2, r0
 8003c06:	630a      	str	r2, [r1, #48]	@ 0x30
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
<<<<<<< HEAD
 8005cdc:	071f      	lsls	r7, r3, #28
 8005cde:	d506      	bpl.n	8005cee <HAL_RCCEx_PeriphCLKConfig+0xd6>
=======
 8003c08:	071f      	lsls	r7, r3, #28
 8003c0a:	d506      	bpl.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0xd6>
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
<<<<<<< HEAD
 8005ce0:	4949      	ldr	r1, [pc, #292]	@ (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8005ce2:	6960      	ldr	r0, [r4, #20]
 8005ce4:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 8005ce6:	f422 1240 	bic.w	r2, r2, #3145728	@ 0x300000
 8005cea:	4302      	orrs	r2, r0
 8005cec:	630a      	str	r2, [r1, #48]	@ 0x30
=======
 8003c0c:	4949      	ldr	r1, [pc, #292]	@ (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8003c0e:	6960      	ldr	r0, [r4, #20]
 8003c10:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 8003c12:	f422 1240 	bic.w	r2, r2, #3145728	@ 0x300000
 8003c16:	4302      	orrs	r2, r0
 8003c18:	630a      	str	r2, [r1, #48]	@ 0x30
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
<<<<<<< HEAD
 8005cee:	06de      	lsls	r6, r3, #27
 8005cf0:	d506      	bpl.n	8005d00 <HAL_RCCEx_PeriphCLKConfig+0xe8>
=======
 8003c1a:	06de      	lsls	r6, r3, #27
 8003c1c:	d506      	bpl.n	8003c2c <HAL_RCCEx_PeriphCLKConfig+0xe8>
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
<<<<<<< HEAD
 8005cf2:	4945      	ldr	r1, [pc, #276]	@ (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8005cf4:	69a0      	ldr	r0, [r4, #24]
 8005cf6:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 8005cf8:	f422 0240 	bic.w	r2, r2, #12582912	@ 0xc00000
 8005cfc:	4302      	orrs	r2, r0
 8005cfe:	630a      	str	r2, [r1, #48]	@ 0x30
=======
 8003c1e:	4945      	ldr	r1, [pc, #276]	@ (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8003c20:	69a0      	ldr	r0, [r4, #24]
 8003c22:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 8003c24:	f422 0240 	bic.w	r2, r2, #12582912	@ 0xc00000
 8003c28:	4302      	orrs	r2, r0
 8003c2a:	630a      	str	r2, [r1, #48]	@ 0x30
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
<<<<<<< HEAD
 8005d00:	059d      	lsls	r5, r3, #22
 8005d02:	d506      	bpl.n	8005d12 <HAL_RCCEx_PeriphCLKConfig+0xfa>
=======
 8003c2c:	059d      	lsls	r5, r3, #22
 8003c2e:	d506      	bpl.n	8003c3e <HAL_RCCEx_PeriphCLKConfig+0xfa>
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
<<<<<<< HEAD
 8005d04:	4940      	ldr	r1, [pc, #256]	@ (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8005d06:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8005d08:	684a      	ldr	r2, [r1, #4]
 8005d0a:	f422 0200 	bic.w	r2, r2, #8388608	@ 0x800000
 8005d0e:	4302      	orrs	r2, r0
 8005d10:	604a      	str	r2, [r1, #4]
=======
 8003c30:	4940      	ldr	r1, [pc, #256]	@ (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8003c32:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8003c34:	684a      	ldr	r2, [r1, #4]
 8003c36:	f422 0200 	bic.w	r2, r2, #8388608	@ 0x800000
 8003c3a:	4302      	orrs	r2, r0
 8003c3c:	604a      	str	r2, [r1, #4]
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
<<<<<<< HEAD
 8005d12:	0618      	lsls	r0, r3, #24
 8005d14:	d506      	bpl.n	8005d24 <HAL_RCCEx_PeriphCLKConfig+0x10c>
=======
 8003c3e:	0618      	lsls	r0, r3, #24
 8003c40:	d506      	bpl.n	8003c50 <HAL_RCCEx_PeriphCLKConfig+0x10c>
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
<<<<<<< HEAD
 8005d16:	493c      	ldr	r1, [pc, #240]	@ (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8005d18:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8005d1a:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 8005d1c:	f422 72f8 	bic.w	r2, r2, #496	@ 0x1f0
 8005d20:	4302      	orrs	r2, r0
 8005d22:	62ca      	str	r2, [r1, #44]	@ 0x2c
=======
 8003c42:	493c      	ldr	r1, [pc, #240]	@ (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8003c44:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8003c46:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 8003c48:	f422 72f8 	bic.w	r2, r2, #496	@ 0x1f0
 8003c4c:	4302      	orrs	r2, r0
 8003c4e:	62ca      	str	r2, [r1, #44]	@ 0x2c
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
<<<<<<< HEAD
 8005d24:	05d9      	lsls	r1, r3, #23
 8005d26:	d506      	bpl.n	8005d36 <HAL_RCCEx_PeriphCLKConfig+0x11e>
=======
 8003c50:	05d9      	lsls	r1, r3, #23
 8003c52:	d506      	bpl.n	8003c62 <HAL_RCCEx_PeriphCLKConfig+0x11e>
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
<<<<<<< HEAD
 8005d28:	4937      	ldr	r1, [pc, #220]	@ (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8005d2a:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8005d2c:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 8005d2e:	f422 5278 	bic.w	r2, r2, #15872	@ 0x3e00
 8005d32:	4302      	orrs	r2, r0
 8005d34:	62ca      	str	r2, [r1, #44]	@ 0x2c
=======
 8003c54:	4937      	ldr	r1, [pc, #220]	@ (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8003c56:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8003c58:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 8003c5a:	f422 5278 	bic.w	r2, r2, #15872	@ 0x3e00
 8003c5e:	4302      	orrs	r2, r0
 8003c60:	62ca      	str	r2, [r1, #44]	@ 0x2c
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
<<<<<<< HEAD
 8005d36:	04da      	lsls	r2, r3, #19
 8005d38:	d506      	bpl.n	8005d48 <HAL_RCCEx_PeriphCLKConfig+0x130>
=======
 8003c62:	04da      	lsls	r2, r3, #19
 8003c64:	d506      	bpl.n	8003c74 <HAL_RCCEx_PeriphCLKConfig+0x130>
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
<<<<<<< HEAD
 8005d3a:	4933      	ldr	r1, [pc, #204]	@ (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8005d3c:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8005d3e:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 8005d40:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005d44:	4302      	orrs	r2, r0
 8005d46:	630a      	str	r2, [r1, #48]	@ 0x30
=======
 8003c66:	4933      	ldr	r1, [pc, #204]	@ (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8003c68:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8003c6a:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 8003c6c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003c70:	4302      	orrs	r2, r0
 8003c72:	630a      	str	r2, [r1, #48]	@ 0x30
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
<<<<<<< HEAD
 8005d48:	049b      	lsls	r3, r3, #18
 8005d4a:	d454      	bmi.n	8005df6 <HAL_RCCEx_PeriphCLKConfig+0x1de>
=======
 8003c74:	049b      	lsls	r3, r3, #18
 8003c76:	d454      	bmi.n	8003d22 <HAL_RCCEx_PeriphCLKConfig+0x1de>
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
<<<<<<< HEAD
 8005d4c:	2000      	movs	r0, #0
 8005d4e:	e013      	b.n	8005d78 <HAL_RCCEx_PeriphCLKConfig+0x160>
  FlagStatus       pwrclkchanged = RESET;
 8005d50:	2600      	movs	r6, #0
 8005d52:	e776      	b.n	8005c42 <HAL_RCCEx_PeriphCLKConfig+0x2a>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005d54:	683b      	ldr	r3, [r7, #0]
 8005d56:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005d5a:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8005d5c:	f7fe fc84 	bl	8004668 <HAL_GetTick>
 8005d60:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d62:	683b      	ldr	r3, [r7, #0]
 8005d64:	05da      	lsls	r2, r3, #23
 8005d66:	f53f af71 	bmi.w	8005c4c <HAL_RCCEx_PeriphCLKConfig+0x34>
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005d6a:	f7fe fc7d 	bl	8004668 <HAL_GetTick>
 8005d6e:	eba0 0008 	sub.w	r0, r0, r8
 8005d72:	2864      	cmp	r0, #100	@ 0x64
 8005d74:	d9f5      	bls.n	8005d62 <HAL_RCCEx_PeriphCLKConfig+0x14a>
          return HAL_TIMEOUT;
 8005d76:	2003      	movs	r0, #3
}
 8005d78:	b002      	add	sp, #8
 8005d7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005d7e:	f402 7240 	and.w	r2, r2, #768	@ 0x300
 8005d82:	429a      	cmp	r2, r3
 8005d84:	f43f af68 	beq.w	8005c58 <HAL_RCCEx_PeriphCLKConfig+0x40>
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005d88:	6a29      	ldr	r1, [r5, #32]
 8005d8a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8005d8e:	f421 7040 	bic.w	r0, r1, #768	@ 0x300
 8005d92:	fa93 f2a3 	rbit	r2, r3
      __HAL_RCC_BACKUPRESET_FORCE();
 8005d96:	f8df c078 	ldr.w	ip, [pc, #120]	@ 8005e10 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8005d9a:	fab2 f282 	clz	r2, r2
 8005d9e:	4462      	add	r2, ip
 8005da0:	0092      	lsls	r2, r2, #2
 8005da2:	2701      	movs	r7, #1
 8005da4:	6017      	str	r7, [r2, #0]
 8005da6:	fa93 f3a3 	rbit	r3, r3
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005daa:	fab3 f383 	clz	r3, r3
 8005dae:	4463      	add	r3, ip
 8005db0:	009b      	lsls	r3, r3, #2
 8005db2:	2200      	movs	r2, #0
 8005db4:	601a      	str	r2, [r3, #0]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005db6:	07cb      	lsls	r3, r1, #31
      RCC->BDCR = temp_reg;
 8005db8:	6228      	str	r0, [r5, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005dba:	f57f af4d 	bpl.w	8005c58 <HAL_RCCEx_PeriphCLKConfig+0x40>
        tickstart = HAL_GetTick();
 8005dbe:	f7fe fc53 	bl	8004668 <HAL_GetTick>
 8005dc2:	f04f 0802 	mov.w	r8, #2
 8005dc6:	4681      	mov	r9, r0
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005dc8:	f241 3a88 	movw	sl, #5000	@ 0x1388
 8005dcc:	fa98 f3a8 	rbit	r3, r8
 8005dd0:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005dd4:	6a2a      	ldr	r2, [r5, #32]
 8005dd6:	fa98 f3a8 	rbit	r3, r8
 8005dda:	fab3 f383 	clz	r3, r3
 8005dde:	fa07 f303 	lsl.w	r3, r7, r3
 8005de2:	4213      	tst	r3, r2
 8005de4:	f47f af38 	bne.w	8005c58 <HAL_RCCEx_PeriphCLKConfig+0x40>
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005de8:	f7fe fc3e 	bl	8004668 <HAL_GetTick>
 8005dec:	eba0 0009 	sub.w	r0, r0, r9
 8005df0:	4550      	cmp	r0, sl
 8005df2:	d9eb      	bls.n	8005dcc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 8005df4:	e7bf      	b.n	8005d76 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8005df6:	4a04      	ldr	r2, [pc, #16]	@ (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8005df8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005dfa:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8005dfc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005e00:	430b      	orrs	r3, r1
 8005e02:	6313      	str	r3, [r2, #48]	@ 0x30
 8005e04:	e7a2      	b.n	8005d4c <HAL_RCCEx_PeriphCLKConfig+0x134>
 8005e06:	bf00      	nop
 8005e08:	40021000 	.word	0x40021000
 8005e0c:	40007000 	.word	0x40007000
 8005e10:	10908100 	.word	0x10908100

08005e14 <HAL_RTC_WaitForSynchro>:
=======
 8003c78:	2000      	movs	r0, #0
 8003c7a:	e013      	b.n	8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x160>
  FlagStatus       pwrclkchanged = RESET;
 8003c7c:	2600      	movs	r6, #0
 8003c7e:	e776      	b.n	8003b6e <HAL_RCCEx_PeriphCLKConfig+0x2a>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003c86:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8003c88:	f7fe fca4 	bl	80025d4 <HAL_GetTick>
 8003c8c:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	05da      	lsls	r2, r3, #23
 8003c92:	f53f af71 	bmi.w	8003b78 <HAL_RCCEx_PeriphCLKConfig+0x34>
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c96:	f7fe fc9d 	bl	80025d4 <HAL_GetTick>
 8003c9a:	eba0 0008 	sub.w	r0, r0, r8
 8003c9e:	2864      	cmp	r0, #100	@ 0x64
 8003ca0:	d9f5      	bls.n	8003c8e <HAL_RCCEx_PeriphCLKConfig+0x14a>
          return HAL_TIMEOUT;
 8003ca2:	2003      	movs	r0, #3
}
 8003ca4:	b002      	add	sp, #8
 8003ca6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003caa:	f402 7240 	and.w	r2, r2, #768	@ 0x300
 8003cae:	429a      	cmp	r2, r3
 8003cb0:	f43f af68 	beq.w	8003b84 <HAL_RCCEx_PeriphCLKConfig+0x40>
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003cb4:	6a29      	ldr	r1, [r5, #32]
 8003cb6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003cba:	f421 7040 	bic.w	r0, r1, #768	@ 0x300
 8003cbe:	fa93 f2a3 	rbit	r2, r3
      __HAL_RCC_BACKUPRESET_FORCE();
 8003cc2:	f8df c078 	ldr.w	ip, [pc, #120]	@ 8003d3c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8003cc6:	fab2 f282 	clz	r2, r2
 8003cca:	4462      	add	r2, ip
 8003ccc:	0092      	lsls	r2, r2, #2
 8003cce:	2701      	movs	r7, #1
 8003cd0:	6017      	str	r7, [r2, #0]
 8003cd2:	fa93 f3a3 	rbit	r3, r3
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003cd6:	fab3 f383 	clz	r3, r3
 8003cda:	4463      	add	r3, ip
 8003cdc:	009b      	lsls	r3, r3, #2
 8003cde:	2200      	movs	r2, #0
 8003ce0:	601a      	str	r2, [r3, #0]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003ce2:	07cb      	lsls	r3, r1, #31
      RCC->BDCR = temp_reg;
 8003ce4:	6228      	str	r0, [r5, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003ce6:	f57f af4d 	bpl.w	8003b84 <HAL_RCCEx_PeriphCLKConfig+0x40>
        tickstart = HAL_GetTick();
 8003cea:	f7fe fc73 	bl	80025d4 <HAL_GetTick>
 8003cee:	f04f 0802 	mov.w	r8, #2
 8003cf2:	4681      	mov	r9, r0
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cf4:	f241 3a88 	movw	sl, #5000	@ 0x1388
 8003cf8:	fa98 f3a8 	rbit	r3, r8
 8003cfc:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d00:	6a2a      	ldr	r2, [r5, #32]
 8003d02:	fa98 f3a8 	rbit	r3, r8
 8003d06:	fab3 f383 	clz	r3, r3
 8003d0a:	fa07 f303 	lsl.w	r3, r7, r3
 8003d0e:	4213      	tst	r3, r2
 8003d10:	f47f af38 	bne.w	8003b84 <HAL_RCCEx_PeriphCLKConfig+0x40>
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d14:	f7fe fc5e 	bl	80025d4 <HAL_GetTick>
 8003d18:	eba0 0009 	sub.w	r0, r0, r9
 8003d1c:	4550      	cmp	r0, sl
 8003d1e:	d9eb      	bls.n	8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 8003d20:	e7bf      	b.n	8003ca2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8003d22:	4a04      	ldr	r2, [pc, #16]	@ (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8003d24:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003d26:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8003d28:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003d2c:	430b      	orrs	r3, r1
 8003d2e:	6313      	str	r3, [r2, #48]	@ 0x30
 8003d30:	e7a2      	b.n	8003c78 <HAL_RCCEx_PeriphCLKConfig+0x134>
 8003d32:	bf00      	nop
 8003d34:	40021000 	.word	0x40021000
 8003d38:	40007000 	.word	0x40007000
 8003d3c:	10908100 	.word	0x10908100

08003d40 <HAL_RTC_WaitForSynchro>:
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
<<<<<<< HEAD
 8005e14:	b538      	push	{r3, r4, r5, lr}
=======
 8003d40:	b538      	push	{r3, r4, r5, lr}
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
  uint32_t tickstart = 0U;

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
<<<<<<< HEAD
 8005e16:	6803      	ldr	r3, [r0, #0]
 8005e18:	4a09      	ldr	r2, [pc, #36]	@ (8005e40 <HAL_RTC_WaitForSynchro+0x2c>)
 8005e1a:	60da      	str	r2, [r3, #12]
{
 8005e1c:	4604      	mov	r4, r0

  /* Get tick */
  tickstart = HAL_GetTick();
 8005e1e:	f7fe fc23 	bl	8004668 <HAL_GetTick>
 8005e22:	4605      	mov	r5, r0

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005e24:	6823      	ldr	r3, [r4, #0]
 8005e26:	68db      	ldr	r3, [r3, #12]
 8005e28:	069b      	lsls	r3, r3, #26
 8005e2a:	d501      	bpl.n	8005e30 <HAL_RTC_WaitForSynchro+0x1c>
=======
 8003d42:	6803      	ldr	r3, [r0, #0]
 8003d44:	4a09      	ldr	r2, [pc, #36]	@ (8003d6c <HAL_RTC_WaitForSynchro+0x2c>)
 8003d46:	60da      	str	r2, [r3, #12]
{
 8003d48:	4604      	mov	r4, r0

  /* Get tick */
  tickstart = HAL_GetTick();
 8003d4a:	f7fe fc43 	bl	80025d4 <HAL_GetTick>
 8003d4e:	4605      	mov	r5, r0

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003d50:	6823      	ldr	r3, [r4, #0]
 8003d52:	68db      	ldr	r3, [r3, #12]
 8003d54:	069b      	lsls	r3, r3, #26
 8003d56:	d501      	bpl.n	8003d5c <HAL_RTC_WaitForSynchro+0x1c>
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
    {
      return HAL_TIMEOUT;
    }
  }

  return HAL_OK;
<<<<<<< HEAD
 8005e2c:	2000      	movs	r0, #0
}
 8005e2e:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005e30:	f7fe fc1a 	bl	8004668 <HAL_GetTick>
 8005e34:	1b40      	subs	r0, r0, r5
 8005e36:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8005e3a:	d9f3      	bls.n	8005e24 <HAL_RTC_WaitForSynchro+0x10>
      return HAL_TIMEOUT;
 8005e3c:	2003      	movs	r0, #3
 8005e3e:	e7f6      	b.n	8005e2e <HAL_RTC_WaitForSynchro+0x1a>
 8005e40:	0001ff5f 	.word	0x0001ff5f

08005e44 <RTC_EnterInitMode>:
=======
 8003d58:	2000      	movs	r0, #0
}
 8003d5a:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003d5c:	f7fe fc3a 	bl	80025d4 <HAL_GetTick>
 8003d60:	1b40      	subs	r0, r0, r5
 8003d62:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8003d66:	d9f3      	bls.n	8003d50 <HAL_RTC_WaitForSynchro+0x10>
      return HAL_TIMEOUT;
 8003d68:	2003      	movs	r0, #3
 8003d6a:	e7f6      	b.n	8003d5a <HAL_RTC_WaitForSynchro+0x1a>
 8003d6c:	0001ff5f 	.word	0x0001ff5f

08003d70 <RTC_EnterInitMode>:
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
{
  uint32_t tickstart = 0U;
  HAL_StatusTypeDef status = HAL_OK;

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
<<<<<<< HEAD
 8005e44:	6803      	ldr	r3, [r0, #0]
{
 8005e46:	b570      	push	{r4, r5, r6, lr}
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8005e48:	68dc      	ldr	r4, [r3, #12]
 8005e4a:	f014 0440 	ands.w	r4, r4, #64	@ 0x40
{
 8005e4e:	4605      	mov	r5, r0
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8005e50:	d117      	bne.n	8005e82 <RTC_EnterInitMode+0x3e>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8005e52:	68da      	ldr	r2, [r3, #12]
 8005e54:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005e58:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005e5a:	f7fe fc05 	bl	8004668 <HAL_GetTick>
 8005e5e:	4606      	mov	r6, r0

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8005e60:	682b      	ldr	r3, [r5, #0]
 8005e62:	68db      	ldr	r3, [r3, #12]
 8005e64:	065b      	lsls	r3, r3, #25
 8005e66:	d400      	bmi.n	8005e6a <RTC_EnterInitMode+0x26>
 8005e68:	b10c      	cbz	r4, 8005e6e <RTC_EnterInitMode+0x2a>
=======
 8003d70:	6803      	ldr	r3, [r0, #0]
{
 8003d72:	b570      	push	{r4, r5, r6, lr}
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8003d74:	68dc      	ldr	r4, [r3, #12]
 8003d76:	f014 0440 	ands.w	r4, r4, #64	@ 0x40
{
 8003d7a:	4605      	mov	r5, r0
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8003d7c:	d117      	bne.n	8003dae <RTC_EnterInitMode+0x3e>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8003d7e:	68da      	ldr	r2, [r3, #12]
 8003d80:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003d84:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003d86:	f7fe fc25 	bl	80025d4 <HAL_GetTick>
 8003d8a:	4606      	mov	r6, r0

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8003d8c:	682b      	ldr	r3, [r5, #0]
 8003d8e:	68db      	ldr	r3, [r3, #12]
 8003d90:	065b      	lsls	r3, r3, #25
 8003d92:	d400      	bmi.n	8003d96 <RTC_EnterInitMode+0x26>
 8003d94:	b10c      	cbz	r4, 8003d9a <RTC_EnterInitMode+0x2a>
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
      }
    }
  }

  return status;
}
<<<<<<< HEAD
 8005e6a:	4620      	mov	r0, r4
 8005e6c:	bd70      	pop	{r4, r5, r6, pc}
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005e6e:	f7fe fbfb 	bl	8004668 <HAL_GetTick>
 8005e72:	1b80      	subs	r0, r0, r6
 8005e74:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
        hrtc->State = HAL_RTC_STATE_ERROR;
 8005e78:	bf82      	ittt	hi
 8005e7a:	2304      	movhi	r3, #4
 8005e7c:	776b      	strbhi	r3, [r5, #29]
        status = HAL_ERROR;
 8005e7e:	2401      	movhi	r4, #1
 8005e80:	e7ee      	b.n	8005e60 <RTC_EnterInitMode+0x1c>
  HAL_StatusTypeDef status = HAL_OK;
 8005e82:	2400      	movs	r4, #0
 8005e84:	e7f1      	b.n	8005e6a <RTC_EnterInitMode+0x26>

08005e86 <RTC_ExitInitMode>:
=======
 8003d96:	4620      	mov	r0, r4
 8003d98:	bd70      	pop	{r4, r5, r6, pc}
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003d9a:	f7fe fc1b 	bl	80025d4 <HAL_GetTick>
 8003d9e:	1b80      	subs	r0, r0, r6
 8003da0:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
        hrtc->State = HAL_RTC_STATE_ERROR;
 8003da4:	bf82      	ittt	hi
 8003da6:	2304      	movhi	r3, #4
 8003da8:	776b      	strbhi	r3, [r5, #29]
        status = HAL_ERROR;
 8003daa:	2401      	movhi	r4, #1
 8003dac:	e7ee      	b.n	8003d8c <RTC_EnterInitMode+0x1c>
  HAL_StatusTypeDef status = HAL_OK;
 8003dae:	2400      	movs	r4, #0
 8003db0:	e7f1      	b.n	8003d96 <RTC_EnterInitMode+0x26>

08003db2 <RTC_ExitInitMode>:
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
  HAL_StatusTypeDef status = HAL_OK;

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
<<<<<<< HEAD
 8005e86:	6803      	ldr	r3, [r0, #0]
 8005e88:	68da      	ldr	r2, [r3, #12]
 8005e8a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
{
 8005e8e:	b510      	push	{r4, lr}
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8005e90:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8005e92:	689b      	ldr	r3, [r3, #8]
 8005e94:	069b      	lsls	r3, r3, #26
{
 8005e96:	4604      	mov	r4, r0
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8005e98:	d501      	bpl.n	8005e9e <RTC_ExitInitMode+0x18>
  HAL_StatusTypeDef status = HAL_OK;
 8005e9a:	2000      	movs	r0, #0
=======
 8003db2:	6803      	ldr	r3, [r0, #0]
 8003db4:	68da      	ldr	r2, [r3, #12]
 8003db6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
{
 8003dba:	b510      	push	{r4, lr}
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8003dbc:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8003dbe:	689b      	ldr	r3, [r3, #8]
 8003dc0:	069b      	lsls	r3, r3, #26
{
 8003dc2:	4604      	mov	r4, r0
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8003dc4:	d501      	bpl.n	8003dca <RTC_ExitInitMode+0x18>
  HAL_StatusTypeDef status = HAL_OK;
 8003dc6:	2000      	movs	r0, #0
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
      status = HAL_ERROR;
    }
  }

  return status;
}
<<<<<<< HEAD
 8005e9c:	bd10      	pop	{r4, pc}
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005e9e:	f7ff ffb9 	bl	8005e14 <HAL_RTC_WaitForSynchro>
 8005ea2:	2800      	cmp	r0, #0
 8005ea4:	d0f9      	beq.n	8005e9a <RTC_ExitInitMode+0x14>
      hrtc->State = HAL_RTC_STATE_ERROR;
 8005ea6:	2304      	movs	r3, #4
 8005ea8:	7763      	strb	r3, [r4, #29]
      status = HAL_ERROR;
 8005eaa:	2001      	movs	r0, #1
 8005eac:	e7f6      	b.n	8005e9c <RTC_ExitInitMode+0x16>

08005eae <HAL_RTC_Init>:
{
 8005eae:	b510      	push	{r4, lr}
  if (hrtc == NULL)
 8005eb0:	4604      	mov	r4, r0
 8005eb2:	2800      	cmp	r0, #0
 8005eb4:	d041      	beq.n	8005f3a <HAL_RTC_Init+0x8c>
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8005eb6:	7f43      	ldrb	r3, [r0, #29]
 8005eb8:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8005ebc:	b913      	cbnz	r3, 8005ec4 <HAL_RTC_Init+0x16>
    hrtc->Lock = HAL_UNLOCKED;
 8005ebe:	7702      	strb	r2, [r0, #28]
    HAL_RTC_MspInit(hrtc);
 8005ec0:	f7fe f946 	bl	8004150 <HAL_RTC_MspInit>
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005ec4:	2302      	movs	r3, #2
 8005ec6:	7763      	strb	r3, [r4, #29]
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8005ec8:	6823      	ldr	r3, [r4, #0]
 8005eca:	68da      	ldr	r2, [r3, #12]
 8005ecc:	06d2      	lsls	r2, r2, #27
 8005ece:	d503      	bpl.n	8005ed8 <HAL_RTC_Init+0x2a>
    hrtc->State = HAL_RTC_STATE_READY;
 8005ed0:	2301      	movs	r3, #1
 8005ed2:	7763      	strb	r3, [r4, #29]
 8005ed4:	2000      	movs	r0, #0
}
 8005ed6:	bd10      	pop	{r4, pc}
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005ed8:	22ca      	movs	r2, #202	@ 0xca
 8005eda:	625a      	str	r2, [r3, #36]	@ 0x24
 8005edc:	2253      	movs	r2, #83	@ 0x53
 8005ede:	625a      	str	r2, [r3, #36]	@ 0x24
    status = RTC_EnterInitMode(hrtc);
 8005ee0:	4620      	mov	r0, r4
 8005ee2:	f7ff ffaf 	bl	8005e44 <RTC_EnterInitMode>
    if (status == HAL_OK)
 8005ee6:	bb10      	cbnz	r0, 8005f2e <HAL_RTC_Init+0x80>
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8005ee8:	6823      	ldr	r3, [r4, #0]
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005eea:	6920      	ldr	r0, [r4, #16]
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8005eec:	689a      	ldr	r2, [r3, #8]
 8005eee:	f422 02e0 	bic.w	r2, r2, #7340032	@ 0x700000
 8005ef2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005ef6:	609a      	str	r2, [r3, #8]
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005ef8:	6862      	ldr	r2, [r4, #4]
 8005efa:	6899      	ldr	r1, [r3, #8]
 8005efc:	4302      	orrs	r2, r0
 8005efe:	6960      	ldr	r0, [r4, #20]
 8005f00:	4302      	orrs	r2, r0
 8005f02:	430a      	orrs	r2, r1
 8005f04:	609a      	str	r2, [r3, #8]
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8005f06:	68e2      	ldr	r2, [r4, #12]
 8005f08:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8005f0a:	691a      	ldr	r2, [r3, #16]
 8005f0c:	68a1      	ldr	r1, [r4, #8]
 8005f0e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8005f12:	611a      	str	r2, [r3, #16]
      status = RTC_ExitInitMode(hrtc);
 8005f14:	4620      	mov	r0, r4
 8005f16:	f7ff ffb6 	bl	8005e86 <RTC_ExitInitMode>
    if (status == HAL_OK)
 8005f1a:	b940      	cbnz	r0, 8005f2e <HAL_RTC_Init+0x80>
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8005f1c:	6823      	ldr	r3, [r4, #0]
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8005f1e:	69a1      	ldr	r1, [r4, #24]
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8005f20:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005f22:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8005f26:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8005f28:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005f2a:	430a      	orrs	r2, r1
 8005f2c:	641a      	str	r2, [r3, #64]	@ 0x40
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005f2e:	6823      	ldr	r3, [r4, #0]
 8005f30:	22ff      	movs	r2, #255	@ 0xff
 8005f32:	625a      	str	r2, [r3, #36]	@ 0x24
  if (status == HAL_OK)
 8005f34:	2800      	cmp	r0, #0
 8005f36:	d0cb      	beq.n	8005ed0 <HAL_RTC_Init+0x22>
 8005f38:	e7cd      	b.n	8005ed6 <HAL_RTC_Init+0x28>
    return HAL_ERROR;
 8005f3a:	2001      	movs	r0, #1
 8005f3c:	e7cb      	b.n	8005ed6 <HAL_RTC_Init+0x28>

08005f3e <RTC_ByteToBcd2>:
=======
 8003dc8:	bd10      	pop	{r4, pc}
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003dca:	f7ff ffb9 	bl	8003d40 <HAL_RTC_WaitForSynchro>
 8003dce:	2800      	cmp	r0, #0
 8003dd0:	d0f9      	beq.n	8003dc6 <RTC_ExitInitMode+0x14>
      hrtc->State = HAL_RTC_STATE_ERROR;
 8003dd2:	2304      	movs	r3, #4
 8003dd4:	7763      	strb	r3, [r4, #29]
      status = HAL_ERROR;
 8003dd6:	2001      	movs	r0, #1
 8003dd8:	e7f6      	b.n	8003dc8 <RTC_ExitInitMode+0x16>

08003dda <HAL_RTC_Init>:
{
 8003dda:	b510      	push	{r4, lr}
  if (hrtc == NULL)
 8003ddc:	4604      	mov	r4, r0
 8003dde:	2800      	cmp	r0, #0
 8003de0:	d041      	beq.n	8003e66 <HAL_RTC_Init+0x8c>
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8003de2:	7f43      	ldrb	r3, [r0, #29]
 8003de4:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8003de8:	b913      	cbnz	r3, 8003df0 <HAL_RTC_Init+0x16>
    hrtc->Lock = HAL_UNLOCKED;
 8003dea:	7702      	strb	r2, [r0, #28]
    HAL_RTC_MspInit(hrtc);
 8003dec:	f7fe f966 	bl	80020bc <HAL_RTC_MspInit>
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003df0:	2302      	movs	r3, #2
 8003df2:	7763      	strb	r3, [r4, #29]
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8003df4:	6823      	ldr	r3, [r4, #0]
 8003df6:	68da      	ldr	r2, [r3, #12]
 8003df8:	06d2      	lsls	r2, r2, #27
 8003dfa:	d503      	bpl.n	8003e04 <HAL_RTC_Init+0x2a>
    hrtc->State = HAL_RTC_STATE_READY;
 8003dfc:	2301      	movs	r3, #1
 8003dfe:	7763      	strb	r3, [r4, #29]
 8003e00:	2000      	movs	r0, #0
}
 8003e02:	bd10      	pop	{r4, pc}
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003e04:	22ca      	movs	r2, #202	@ 0xca
 8003e06:	625a      	str	r2, [r3, #36]	@ 0x24
 8003e08:	2253      	movs	r2, #83	@ 0x53
 8003e0a:	625a      	str	r2, [r3, #36]	@ 0x24
    status = RTC_EnterInitMode(hrtc);
 8003e0c:	4620      	mov	r0, r4
 8003e0e:	f7ff ffaf 	bl	8003d70 <RTC_EnterInitMode>
    if (status == HAL_OK)
 8003e12:	bb10      	cbnz	r0, 8003e5a <HAL_RTC_Init+0x80>
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8003e14:	6823      	ldr	r3, [r4, #0]
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003e16:	6920      	ldr	r0, [r4, #16]
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8003e18:	689a      	ldr	r2, [r3, #8]
 8003e1a:	f422 02e0 	bic.w	r2, r2, #7340032	@ 0x700000
 8003e1e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003e22:	609a      	str	r2, [r3, #8]
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003e24:	6862      	ldr	r2, [r4, #4]
 8003e26:	6899      	ldr	r1, [r3, #8]
 8003e28:	4302      	orrs	r2, r0
 8003e2a:	6960      	ldr	r0, [r4, #20]
 8003e2c:	4302      	orrs	r2, r0
 8003e2e:	430a      	orrs	r2, r1
 8003e30:	609a      	str	r2, [r3, #8]
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8003e32:	68e2      	ldr	r2, [r4, #12]
 8003e34:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8003e36:	691a      	ldr	r2, [r3, #16]
 8003e38:	68a1      	ldr	r1, [r4, #8]
 8003e3a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8003e3e:	611a      	str	r2, [r3, #16]
      status = RTC_ExitInitMode(hrtc);
 8003e40:	4620      	mov	r0, r4
 8003e42:	f7ff ffb6 	bl	8003db2 <RTC_ExitInitMode>
    if (status == HAL_OK)
 8003e46:	b940      	cbnz	r0, 8003e5a <HAL_RTC_Init+0x80>
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8003e48:	6823      	ldr	r3, [r4, #0]
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8003e4a:	69a1      	ldr	r1, [r4, #24]
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8003e4c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003e4e:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003e52:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8003e54:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003e56:	430a      	orrs	r2, r1
 8003e58:	641a      	str	r2, [r3, #64]	@ 0x40
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003e5a:	6823      	ldr	r3, [r4, #0]
 8003e5c:	22ff      	movs	r2, #255	@ 0xff
 8003e5e:	625a      	str	r2, [r3, #36]	@ 0x24
  if (status == HAL_OK)
 8003e60:	2800      	cmp	r0, #0
 8003e62:	d0cb      	beq.n	8003dfc <HAL_RTC_Init+0x22>
 8003e64:	e7cd      	b.n	8003e02 <HAL_RTC_Init+0x28>
    return HAL_ERROR;
 8003e66:	2001      	movs	r0, #1
 8003e68:	e7cb      	b.n	8003e02 <HAL_RTC_Init+0x28>

08003e6a <RTC_ByteToBcd2>:
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
  uint32_t bcdhigh = 0U;
<<<<<<< HEAD
 8005f3e:	2300      	movs	r3, #0

  while (number >= 10U)
 8005f40:	2809      	cmp	r0, #9
 8005f42:	d803      	bhi.n	8005f4c <RTC_ByteToBcd2+0xe>
=======
 8003e6a:	2300      	movs	r3, #0

  while (number >= 10U)
 8003e6c:	2809      	cmp	r0, #9
 8003e6e:	d803      	bhi.n	8003e78 <RTC_ByteToBcd2+0xe>
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
  {
    bcdhigh++;
    number -= 10U;
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
<<<<<<< HEAD
 8005f44:	ea40 1003 	orr.w	r0, r0, r3, lsl #4
}
 8005f48:	b2c0      	uxtb	r0, r0
 8005f4a:	4770      	bx	lr
    number -= 10U;
 8005f4c:	380a      	subs	r0, #10
    bcdhigh++;
 8005f4e:	3301      	adds	r3, #1
    number -= 10U;
 8005f50:	b2c0      	uxtb	r0, r0
 8005f52:	e7f5      	b.n	8005f40 <RTC_ByteToBcd2+0x2>

08005f54 <HAL_RTC_SetTime>:
{
 8005f54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(hrtc);
 8005f58:	7f03      	ldrb	r3, [r0, #28]
 8005f5a:	2b01      	cmp	r3, #1
{
 8005f5c:	4606      	mov	r6, r0
 8005f5e:	460f      	mov	r7, r1
 8005f60:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(hrtc);
 8005f64:	d041      	beq.n	8005fea <HAL_RTC_SetTime+0x96>
 8005f66:	2301      	movs	r3, #1
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005f68:	6831      	ldr	r1, [r6, #0]
  __HAL_LOCK(hrtc);
 8005f6a:	7733      	strb	r3, [r6, #28]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005f6c:	7770      	strb	r0, [r6, #29]
  if (Format == RTC_FORMAT_BIN)
 8005f6e:	7838      	ldrb	r0, [r7, #0]
 8005f70:	787d      	ldrb	r5, [r7, #1]
 8005f72:	78bc      	ldrb	r4, [r7, #2]
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005f74:	688b      	ldr	r3, [r1, #8]
  if (Format == RTC_FORMAT_BIN)
 8005f76:	2a00      	cmp	r2, #0
 8005f78:	d139      	bne.n	8005fee <HAL_RTC_SetTime+0x9a>
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005f7a:	f013 0340 	ands.w	r3, r3, #64	@ 0x40
      sTime->TimeFormat = 0x00U;
 8005f7e:	bf08      	it	eq
 8005f80:	70fb      	strbeq	r3, [r7, #3]
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005f82:	f7ff ffdc 	bl	8005f3e <RTC_ByteToBcd2>
 8005f86:	4680      	mov	r8, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005f88:	4628      	mov	r0, r5
 8005f8a:	f7ff ffd8 	bl	8005f3e <RTC_ByteToBcd2>
 8005f8e:	4602      	mov	r2, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8005f90:	4620      	mov	r0, r4
 8005f92:	f7ff ffd4 	bl	8005f3e <RTC_ByteToBcd2>
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8005f96:	78fb      	ldrb	r3, [r7, #3]
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005f98:	ea40 5383 	orr.w	r3, r0, r3, lsl #22
 8005f9c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8005fa0:	ea43 2402 	orr.w	r4, r3, r2, lsl #8
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005fa4:	23ca      	movs	r3, #202	@ 0xca
 8005fa6:	624b      	str	r3, [r1, #36]	@ 0x24
 8005fa8:	2353      	movs	r3, #83	@ 0x53
 8005faa:	624b      	str	r3, [r1, #36]	@ 0x24
  status = RTC_EnterInitMode(hrtc);
 8005fac:	4630      	mov	r0, r6
 8005fae:	f7ff ff49 	bl	8005e44 <RTC_EnterInitMode>
  if (status == HAL_OK)
 8005fb2:	b9a8      	cbnz	r0, 8005fe0 <HAL_RTC_SetTime+0x8c>
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8005fb4:	6832      	ldr	r2, [r6, #0]
 8005fb6:	f004 347f 	and.w	r4, r4, #2139062143	@ 0x7f7f7f7f
 8005fba:	f024 44fe 	bic.w	r4, r4, #2130706432	@ 0x7f000000
 8005fbe:	6014      	str	r4, [r2, #0]
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8005fc0:	6893      	ldr	r3, [r2, #8]
 8005fc2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005fc6:	6093      	str	r3, [r2, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8005fc8:	e9d7 3003 	ldrd	r3, r0, [r7, #12]
 8005fcc:	6891      	ldr	r1, [r2, #8]
 8005fce:	4303      	orrs	r3, r0
 8005fd0:	430b      	orrs	r3, r1
 8005fd2:	6093      	str	r3, [r2, #8]
    status = RTC_ExitInitMode(hrtc);
 8005fd4:	4630      	mov	r0, r6
 8005fd6:	f7ff ff56 	bl	8005e86 <RTC_ExitInitMode>
  if (status == HAL_OK)
 8005fda:	b908      	cbnz	r0, 8005fe0 <HAL_RTC_SetTime+0x8c>
    hrtc->State = HAL_RTC_STATE_READY;
 8005fdc:	2301      	movs	r3, #1
 8005fde:	7773      	strb	r3, [r6, #29]
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005fe0:	6833      	ldr	r3, [r6, #0]
 8005fe2:	22ff      	movs	r2, #255	@ 0xff
 8005fe4:	625a      	str	r2, [r3, #36]	@ 0x24
  __HAL_UNLOCK(hrtc);
 8005fe6:	2300      	movs	r3, #0
 8005fe8:	7733      	strb	r3, [r6, #28]
}
 8005fea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005fee:	f013 0340 	ands.w	r3, r3, #64	@ 0x40
      sTime->TimeFormat = 0x00U;
 8005ff2:	bf08      	it	eq
 8005ff4:	70fb      	strbeq	r3, [r7, #3]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8005ff6:	022d      	lsls	r5, r5, #8
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8005ff8:	78fa      	ldrb	r2, [r7, #3]
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005ffa:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8005ffe:	ea45 0304 	orr.w	r3, r5, r4
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8006002:	ea43 5482 	orr.w	r4, r3, r2, lsl #22
 8006006:	e7cd      	b.n	8005fa4 <HAL_RTC_SetTime+0x50>

08006008 <HAL_RTC_SetDate>:
{
 8006008:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hrtc);
 800600a:	7f03      	ldrb	r3, [r0, #28]
 800600c:	2b01      	cmp	r3, #1
{
 800600e:	4605      	mov	r5, r0
 8006010:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(hrtc);
 8006014:	d027      	beq.n	8006066 <HAL_RTC_SetDate+0x5e>
 8006016:	2301      	movs	r3, #1
 8006018:	772b      	strb	r3, [r5, #28]
  hrtc->State = HAL_RTC_STATE_BUSY;
 800601a:	7768      	strb	r0, [r5, #29]
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800601c:	780e      	ldrb	r6, [r1, #0]
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800601e:	78c8      	ldrb	r0, [r1, #3]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8006020:	784c      	ldrb	r4, [r1, #1]
                  ((uint32_t) sDate->Date)                      | \
 8006022:	788f      	ldrb	r7, [r1, #2]
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8006024:	0376      	lsls	r6, r6, #13
  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8006026:	b1fa      	cbz	r2, 8006068 <HAL_RTC_SetDate+0x60>
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8006028:	ea46 4300 	orr.w	r3, r6, r0, lsl #16
 800602c:	433b      	orrs	r3, r7
 800602e:	ea43 2404 	orr.w	r4, r3, r4, lsl #8
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006032:	682b      	ldr	r3, [r5, #0]
 8006034:	22ca      	movs	r2, #202	@ 0xca
 8006036:	625a      	str	r2, [r3, #36]	@ 0x24
 8006038:	2253      	movs	r2, #83	@ 0x53
 800603a:	625a      	str	r2, [r3, #36]	@ 0x24
  status = RTC_EnterInitMode(hrtc);
 800603c:	4628      	mov	r0, r5
 800603e:	f7ff ff01 	bl	8005e44 <RTC_EnterInitMode>
  if (status == HAL_OK)
 8006042:	b958      	cbnz	r0, 800605c <HAL_RTC_SetDate+0x54>
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8006044:	682a      	ldr	r2, [r5, #0]
 8006046:	f024 447f 	bic.w	r4, r4, #4278190080	@ 0xff000000
 800604a:	f024 04c0 	bic.w	r4, r4, #192	@ 0xc0
 800604e:	6054      	str	r4, [r2, #4]
    status = RTC_ExitInitMode(hrtc);
 8006050:	4628      	mov	r0, r5
 8006052:	f7ff ff18 	bl	8005e86 <RTC_ExitInitMode>
  if (status == HAL_OK)
 8006056:	b908      	cbnz	r0, 800605c <HAL_RTC_SetDate+0x54>
    hrtc->State = HAL_RTC_STATE_READY;
 8006058:	2301      	movs	r3, #1
 800605a:	776b      	strb	r3, [r5, #29]
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800605c:	682b      	ldr	r3, [r5, #0]
 800605e:	22ff      	movs	r2, #255	@ 0xff
 8006060:	625a      	str	r2, [r3, #36]	@ 0x24
  __HAL_UNLOCK(hrtc);
 8006062:	2300      	movs	r3, #0
 8006064:	772b      	strb	r3, [r5, #28]
}
 8006066:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8006068:	06e3      	lsls	r3, r4, #27
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800606a:	bf42      	ittt	mi
 800606c:	f024 0410 	bicmi.w	r4, r4, #16
 8006070:	340a      	addmi	r4, #10
 8006072:	704c      	strbmi	r4, [r1, #1]
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8006074:	f7ff ff63 	bl	8005f3e <RTC_ByteToBcd2>
 8006078:	4604      	mov	r4, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800607a:	7848      	ldrb	r0, [r1, #1]
 800607c:	f7ff ff5f 	bl	8005f3e <RTC_ByteToBcd2>
 8006080:	4602      	mov	r2, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8006082:	4638      	mov	r0, r7
 8006084:	f7ff ff5b 	bl	8005f3e <RTC_ByteToBcd2>
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8006088:	ea40 0306 	orr.w	r3, r0, r6
 800608c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8006090:	ea43 2402 	orr.w	r4, r3, r2, lsl #8
 8006094:	e7cd      	b.n	8006032 <HAL_RTC_SetDate+0x2a>

08006096 <RTC_Bcd2ToByte>:
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
  uint32_t tens = 0U;
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 8006096:	0903      	lsrs	r3, r0, #4
 8006098:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 800609c:	f000 000f 	and.w	r0, r0, #15
 80060a0:	eb00 0043 	add.w	r0, r0, r3, lsl #1
}
 80060a4:	b2c0      	uxtb	r0, r0
 80060a6:	4770      	bx	lr

080060a8 <HAL_RTC_GetTime>:
{
 80060a8:	b538      	push	{r3, r4, r5, lr}
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80060aa:	6803      	ldr	r3, [r0, #0]
 80060ac:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 80060ae:	6048      	str	r0, [r1, #4]
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80060b0:	6918      	ldr	r0, [r3, #16]
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80060b2:	681b      	ldr	r3, [r3, #0]
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80060b4:	f3c0 000e 	ubfx	r0, r0, #0, #15
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 80060b8:	f3c3 2506 	ubfx	r5, r3, #8, #7
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 80060bc:	f003 047f 	and.w	r4, r3, #127	@ 0x7f
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80060c0:	6088      	str	r0, [r1, #8]
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 80060c2:	f3c3 4005 	ubfx	r0, r3, #16, #6
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 80060c6:	f3c3 5380 	ubfx	r3, r3, #22, #1
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 80060ca:	7008      	strb	r0, [r1, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 80060cc:	704d      	strb	r5, [r1, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 80060ce:	708c      	strb	r4, [r1, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 80060d0:	70cb      	strb	r3, [r1, #3]
  if (Format == RTC_FORMAT_BIN)
 80060d2:	b952      	cbnz	r2, 80060ea <HAL_RTC_GetTime+0x42>
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80060d4:	f7ff ffdf 	bl	8006096 <RTC_Bcd2ToByte>
 80060d8:	7008      	strb	r0, [r1, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80060da:	4628      	mov	r0, r5
 80060dc:	f7ff ffdb 	bl	8006096 <RTC_Bcd2ToByte>
 80060e0:	7048      	strb	r0, [r1, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80060e2:	4620      	mov	r0, r4
 80060e4:	f7ff ffd7 	bl	8006096 <RTC_Bcd2ToByte>
 80060e8:	7088      	strb	r0, [r1, #2]
}
 80060ea:	2000      	movs	r0, #0
 80060ec:	bd38      	pop	{r3, r4, r5, pc}

080060ee <HAL_RTC_GetDate>:
{
 80060ee:	b538      	push	{r3, r4, r5, lr}
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80060f0:	6803      	ldr	r3, [r0, #0]
 80060f2:	685b      	ldr	r3, [r3, #4]
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80060f4:	f3c3 4007 	ubfx	r0, r3, #16, #8
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80060f8:	f3c3 2504 	ubfx	r5, r3, #8, #5
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 80060fc:	f003 043f 	and.w	r4, r3, #63	@ 0x3f
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8006100:	f3c3 3342 	ubfx	r3, r3, #13, #3
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8006104:	70c8      	strb	r0, [r1, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8006106:	704d      	strb	r5, [r1, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8006108:	708c      	strb	r4, [r1, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 800610a:	700b      	strb	r3, [r1, #0]
  if (Format == RTC_FORMAT_BIN)
 800610c:	b952      	cbnz	r2, 8006124 <HAL_RTC_GetDate+0x36>
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800610e:	f7ff ffc2 	bl	8006096 <RTC_Bcd2ToByte>
 8006112:	70c8      	strb	r0, [r1, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8006114:	4628      	mov	r0, r5
 8006116:	f7ff ffbe 	bl	8006096 <RTC_Bcd2ToByte>
 800611a:	7048      	strb	r0, [r1, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800611c:	4620      	mov	r0, r4
 800611e:	f7ff ffba 	bl	8006096 <RTC_Bcd2ToByte>
 8006122:	7088      	strb	r0, [r1, #2]
}
 8006124:	2000      	movs	r0, #0
 8006126:	bd38      	pop	{r3, r4, r5, pc}

08006128 <SPI_WaitFlagStateUntilTimeout.constprop.0>:
=======
 8003e70:	ea40 1003 	orr.w	r0, r0, r3, lsl #4
}
 8003e74:	b2c0      	uxtb	r0, r0
 8003e76:	4770      	bx	lr
    number -= 10U;
 8003e78:	380a      	subs	r0, #10
    bcdhigh++;
 8003e7a:	3301      	adds	r3, #1
    number -= 10U;
 8003e7c:	b2c0      	uxtb	r0, r0
 8003e7e:	e7f5      	b.n	8003e6c <RTC_ByteToBcd2+0x2>

08003e80 <HAL_RTC_SetTime>:
{
 8003e80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(hrtc);
 8003e84:	7f03      	ldrb	r3, [r0, #28]
 8003e86:	2b01      	cmp	r3, #1
{
 8003e88:	4606      	mov	r6, r0
 8003e8a:	460f      	mov	r7, r1
 8003e8c:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(hrtc);
 8003e90:	d041      	beq.n	8003f16 <HAL_RTC_SetTime+0x96>
 8003e92:	2301      	movs	r3, #1
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003e94:	6831      	ldr	r1, [r6, #0]
  __HAL_LOCK(hrtc);
 8003e96:	7733      	strb	r3, [r6, #28]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003e98:	7770      	strb	r0, [r6, #29]
  if (Format == RTC_FORMAT_BIN)
 8003e9a:	7838      	ldrb	r0, [r7, #0]
 8003e9c:	787d      	ldrb	r5, [r7, #1]
 8003e9e:	78bc      	ldrb	r4, [r7, #2]
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003ea0:	688b      	ldr	r3, [r1, #8]
  if (Format == RTC_FORMAT_BIN)
 8003ea2:	2a00      	cmp	r2, #0
 8003ea4:	d139      	bne.n	8003f1a <HAL_RTC_SetTime+0x9a>
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003ea6:	f013 0340 	ands.w	r3, r3, #64	@ 0x40
      sTime->TimeFormat = 0x00U;
 8003eaa:	bf08      	it	eq
 8003eac:	70fb      	strbeq	r3, [r7, #3]
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8003eae:	f7ff ffdc 	bl	8003e6a <RTC_ByteToBcd2>
 8003eb2:	4680      	mov	r8, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003eb4:	4628      	mov	r0, r5
 8003eb6:	f7ff ffd8 	bl	8003e6a <RTC_ByteToBcd2>
 8003eba:	4602      	mov	r2, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8003ebc:	4620      	mov	r0, r4
 8003ebe:	f7ff ffd4 	bl	8003e6a <RTC_ByteToBcd2>
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8003ec2:	78fb      	ldrb	r3, [r7, #3]
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8003ec4:	ea40 5383 	orr.w	r3, r0, r3, lsl #22
 8003ec8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8003ecc:	ea43 2402 	orr.w	r4, r3, r2, lsl #8
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003ed0:	23ca      	movs	r3, #202	@ 0xca
 8003ed2:	624b      	str	r3, [r1, #36]	@ 0x24
 8003ed4:	2353      	movs	r3, #83	@ 0x53
 8003ed6:	624b      	str	r3, [r1, #36]	@ 0x24
  status = RTC_EnterInitMode(hrtc);
 8003ed8:	4630      	mov	r0, r6
 8003eda:	f7ff ff49 	bl	8003d70 <RTC_EnterInitMode>
  if (status == HAL_OK)
 8003ede:	b9a8      	cbnz	r0, 8003f0c <HAL_RTC_SetTime+0x8c>
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8003ee0:	6832      	ldr	r2, [r6, #0]
 8003ee2:	f004 347f 	and.w	r4, r4, #2139062143	@ 0x7f7f7f7f
 8003ee6:	f024 44fe 	bic.w	r4, r4, #2130706432	@ 0x7f000000
 8003eea:	6014      	str	r4, [r2, #0]
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8003eec:	6893      	ldr	r3, [r2, #8]
 8003eee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003ef2:	6093      	str	r3, [r2, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8003ef4:	e9d7 3003 	ldrd	r3, r0, [r7, #12]
 8003ef8:	6891      	ldr	r1, [r2, #8]
 8003efa:	4303      	orrs	r3, r0
 8003efc:	430b      	orrs	r3, r1
 8003efe:	6093      	str	r3, [r2, #8]
    status = RTC_ExitInitMode(hrtc);
 8003f00:	4630      	mov	r0, r6
 8003f02:	f7ff ff56 	bl	8003db2 <RTC_ExitInitMode>
  if (status == HAL_OK)
 8003f06:	b908      	cbnz	r0, 8003f0c <HAL_RTC_SetTime+0x8c>
    hrtc->State = HAL_RTC_STATE_READY;
 8003f08:	2301      	movs	r3, #1
 8003f0a:	7773      	strb	r3, [r6, #29]
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003f0c:	6833      	ldr	r3, [r6, #0]
 8003f0e:	22ff      	movs	r2, #255	@ 0xff
 8003f10:	625a      	str	r2, [r3, #36]	@ 0x24
  __HAL_UNLOCK(hrtc);
 8003f12:	2300      	movs	r3, #0
 8003f14:	7733      	strb	r3, [r6, #28]
}
 8003f16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003f1a:	f013 0340 	ands.w	r3, r3, #64	@ 0x40
      sTime->TimeFormat = 0x00U;
 8003f1e:	bf08      	it	eq
 8003f20:	70fb      	strbeq	r3, [r7, #3]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8003f22:	022d      	lsls	r5, r5, #8
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8003f24:	78fa      	ldrb	r2, [r7, #3]
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8003f26:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8003f2a:	ea45 0304 	orr.w	r3, r5, r4
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8003f2e:	ea43 5482 	orr.w	r4, r3, r2, lsl #22
 8003f32:	e7cd      	b.n	8003ed0 <HAL_RTC_SetTime+0x50>

08003f34 <HAL_RTC_SetDate>:
{
 8003f34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hrtc);
 8003f36:	7f03      	ldrb	r3, [r0, #28]
 8003f38:	2b01      	cmp	r3, #1
{
 8003f3a:	4605      	mov	r5, r0
 8003f3c:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(hrtc);
 8003f40:	d027      	beq.n	8003f92 <HAL_RTC_SetDate+0x5e>
 8003f42:	2301      	movs	r3, #1
 8003f44:	772b      	strb	r3, [r5, #28]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003f46:	7768      	strb	r0, [r5, #29]
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8003f48:	780e      	ldrb	r6, [r1, #0]
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8003f4a:	78c8      	ldrb	r0, [r1, #3]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8003f4c:	784c      	ldrb	r4, [r1, #1]
                  ((uint32_t) sDate->Date)                      | \
 8003f4e:	788f      	ldrb	r7, [r1, #2]
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8003f50:	0376      	lsls	r6, r6, #13
  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8003f52:	b1fa      	cbz	r2, 8003f94 <HAL_RTC_SetDate+0x60>
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8003f54:	ea46 4300 	orr.w	r3, r6, r0, lsl #16
 8003f58:	433b      	orrs	r3, r7
 8003f5a:	ea43 2404 	orr.w	r4, r3, r4, lsl #8
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003f5e:	682b      	ldr	r3, [r5, #0]
 8003f60:	22ca      	movs	r2, #202	@ 0xca
 8003f62:	625a      	str	r2, [r3, #36]	@ 0x24
 8003f64:	2253      	movs	r2, #83	@ 0x53
 8003f66:	625a      	str	r2, [r3, #36]	@ 0x24
  status = RTC_EnterInitMode(hrtc);
 8003f68:	4628      	mov	r0, r5
 8003f6a:	f7ff ff01 	bl	8003d70 <RTC_EnterInitMode>
  if (status == HAL_OK)
 8003f6e:	b958      	cbnz	r0, 8003f88 <HAL_RTC_SetDate+0x54>
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8003f70:	682a      	ldr	r2, [r5, #0]
 8003f72:	f024 447f 	bic.w	r4, r4, #4278190080	@ 0xff000000
 8003f76:	f024 04c0 	bic.w	r4, r4, #192	@ 0xc0
 8003f7a:	6054      	str	r4, [r2, #4]
    status = RTC_ExitInitMode(hrtc);
 8003f7c:	4628      	mov	r0, r5
 8003f7e:	f7ff ff18 	bl	8003db2 <RTC_ExitInitMode>
  if (status == HAL_OK)
 8003f82:	b908      	cbnz	r0, 8003f88 <HAL_RTC_SetDate+0x54>
    hrtc->State = HAL_RTC_STATE_READY;
 8003f84:	2301      	movs	r3, #1
 8003f86:	776b      	strb	r3, [r5, #29]
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003f88:	682b      	ldr	r3, [r5, #0]
 8003f8a:	22ff      	movs	r2, #255	@ 0xff
 8003f8c:	625a      	str	r2, [r3, #36]	@ 0x24
  __HAL_UNLOCK(hrtc);
 8003f8e:	2300      	movs	r3, #0
 8003f90:	772b      	strb	r3, [r5, #28]
}
 8003f92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8003f94:	06e3      	lsls	r3, r4, #27
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8003f96:	bf42      	ittt	mi
 8003f98:	f024 0410 	bicmi.w	r4, r4, #16
 8003f9c:	340a      	addmi	r4, #10
 8003f9e:	704c      	strbmi	r4, [r1, #1]
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8003fa0:	f7ff ff63 	bl	8003e6a <RTC_ByteToBcd2>
 8003fa4:	4604      	mov	r4, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8003fa6:	7848      	ldrb	r0, [r1, #1]
 8003fa8:	f7ff ff5f 	bl	8003e6a <RTC_ByteToBcd2>
 8003fac:	4602      	mov	r2, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8003fae:	4638      	mov	r0, r7
 8003fb0:	f7ff ff5b 	bl	8003e6a <RTC_ByteToBcd2>
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8003fb4:	ea40 0306 	orr.w	r3, r0, r6
 8003fb8:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8003fbc:	ea43 2402 	orr.w	r4, r3, r2, lsl #8
 8003fc0:	e7cd      	b.n	8003f5e <HAL_RTC_SetDate+0x2a>
	...

08003fc4 <SPI_WaitFlagStateUntilTimeout.constprop.0>:
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
  * @param  State flag state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
<<<<<<< HEAD
 8006128:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800612a:	460e      	mov	r6, r1
 800612c:	4614      	mov	r4, r2
 800612e:	4605      	mov	r5, r0
=======
 8003fc4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003fc6:	460e      	mov	r6, r1
 8003fc8:	4614      	mov	r4, r2
 8003fca:	4605      	mov	r5, r0
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
<<<<<<< HEAD
 8006130:	f7fe fa9a 	bl	8004668 <HAL_GetTick>
 8006134:	4434      	add	r4, r6
 8006136:	1a24      	subs	r4, r4, r0
  tmp_tickstart = HAL_GetTick();
 8006138:	f7fe fa96 	bl	8004668 <HAL_GetTick>

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800613c:	4b22      	ldr	r3, [pc, #136]	@ (80061c8 <SPI_WaitFlagStateUntilTimeout.constprop.0+0xa0>)
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 8006144:	4363      	muls	r3, r4
  tmp_tickstart = HAL_GetTick();
 8006146:	4607      	mov	r7, r0
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006148:	9301      	str	r3, [sp, #4]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800614a:	682a      	ldr	r2, [r5, #0]
 800614c:	6890      	ldr	r0, [r2, #8]
 800614e:	f010 0080 	ands.w	r0, r0, #128	@ 0x80
 8006152:	d02d      	beq.n	80061b0 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x88>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006154:	1c73      	adds	r3, r6, #1
 8006156:	d0f9      	beq.n	800614c <SPI_WaitFlagStateUntilTimeout.constprop.0+0x24>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006158:	f7fe fa86 	bl	8004668 <HAL_GetTick>
 800615c:	1bc0      	subs	r0, r0, r7
 800615e:	42a0      	cmp	r0, r4
 8006160:	d328      	bcc.n	80061b4 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x8c>
=======
 8003fcc:	f7fe fb02 	bl	80025d4 <HAL_GetTick>
 8003fd0:	4434      	add	r4, r6
 8003fd2:	1a24      	subs	r4, r4, r0
  tmp_tickstart = HAL_GetTick();
 8003fd4:	f7fe fafe 	bl	80025d4 <HAL_GetTick>

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003fd8:	4b22      	ldr	r3, [pc, #136]	@ (8004064 <SPI_WaitFlagStateUntilTimeout.constprop.0+0xa0>)
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 8003fe0:	4363      	muls	r3, r4
  tmp_tickstart = HAL_GetTick();
 8003fe2:	4607      	mov	r7, r0
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003fe4:	9301      	str	r3, [sp, #4]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003fe6:	682a      	ldr	r2, [r5, #0]
 8003fe8:	6890      	ldr	r0, [r2, #8]
 8003fea:	f010 0080 	ands.w	r0, r0, #128	@ 0x80
 8003fee:	d02d      	beq.n	800404c <SPI_WaitFlagStateUntilTimeout.constprop.0+0x88>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003ff0:	1c73      	adds	r3, r6, #1
 8003ff2:	d0f9      	beq.n	8003fe8 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x24>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003ff4:	f7fe faee 	bl	80025d4 <HAL_GetTick>
 8003ff8:	1bc0      	subs	r0, r0, r7
 8003ffa:	42a0      	cmp	r0, r4
 8003ffc:	d328      	bcc.n	8004050 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x8c>
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
<<<<<<< HEAD
 8006162:	682b      	ldr	r3, [r5, #0]
 8006164:	685a      	ldr	r2, [r3, #4]
 8006166:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800616a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800616c:	686a      	ldr	r2, [r5, #4]
 800616e:	f5b2 7f82 	cmp.w	r2, #260	@ 0x104
 8006172:	d10a      	bne.n	800618a <SPI_WaitFlagStateUntilTimeout.constprop.0+0x62>
 8006174:	68aa      	ldr	r2, [r5, #8]
 8006176:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
 800617a:	d002      	beq.n	8006182 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x5a>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800617c:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 8006180:	d103      	bne.n	800618a <SPI_WaitFlagStateUntilTimeout.constprop.0+0x62>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006182:	681a      	ldr	r2, [r3, #0]
 8006184:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006188:	601a      	str	r2, [r3, #0]
=======
 8003ffe:	682b      	ldr	r3, [r5, #0]
 8004000:	685a      	ldr	r2, [r3, #4]
 8004002:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004006:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004008:	686a      	ldr	r2, [r5, #4]
 800400a:	f5b2 7f82 	cmp.w	r2, #260	@ 0x104
 800400e:	d10a      	bne.n	8004026 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x62>
 8004010:	68aa      	ldr	r2, [r5, #8]
 8004012:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
 8004016:	d002      	beq.n	800401e <SPI_WaitFlagStateUntilTimeout.constprop.0+0x5a>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004018:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 800401c:	d103      	bne.n	8004026 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x62>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800401e:	681a      	ldr	r2, [r3, #0]
 8004020:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004024:	601a      	str	r2, [r3, #0]
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
<<<<<<< HEAD
 800618a:	6aaa      	ldr	r2, [r5, #40]	@ 0x28
 800618c:	f5b2 5f00 	cmp.w	r2, #8192	@ 0x2000
 8006190:	d107      	bne.n	80061a2 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x7a>
        {
          SPI_RESET_CRC(hspi);
 8006192:	681a      	ldr	r2, [r3, #0]
 8006194:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006198:	601a      	str	r2, [r3, #0]
 800619a:	681a      	ldr	r2, [r3, #0]
 800619c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80061a0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80061a2:	2301      	movs	r3, #1
 80061a4:	f885 305d 	strb.w	r3, [r5, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80061a8:	2300      	movs	r3, #0
 80061aa:	f885 305c 	strb.w	r3, [r5, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80061ae:	2003      	movs	r0, #3
=======
 8004026:	6aaa      	ldr	r2, [r5, #40]	@ 0x28
 8004028:	f5b2 5f00 	cmp.w	r2, #8192	@ 0x2000
 800402c:	d107      	bne.n	800403e <SPI_WaitFlagStateUntilTimeout.constprop.0+0x7a>
        {
          SPI_RESET_CRC(hspi);
 800402e:	681a      	ldr	r2, [r3, #0]
 8004030:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004034:	601a      	str	r2, [r3, #0]
 8004036:	681a      	ldr	r2, [r3, #0]
 8004038:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800403c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800403e:	2301      	movs	r3, #1
 8004040:	f885 305d 	strb.w	r3, [r5, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004044:	2300      	movs	r3, #0
 8004046:	f885 305c 	strb.w	r3, [r5, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800404a:	2003      	movs	r0, #3
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
      count--;
    }
  }

  return HAL_OK;
}
<<<<<<< HEAD
 80061b0:	b003      	add	sp, #12
 80061b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (count == 0U)
 80061b4:	9a01      	ldr	r2, [sp, #4]
      count--;
 80061b6:	9b01      	ldr	r3, [sp, #4]
      if (count == 0U)
 80061b8:	2a00      	cmp	r2, #0
      count--;
 80061ba:	f103 33ff 	add.w	r3, r3, #4294967295
 80061be:	9301      	str	r3, [sp, #4]
 80061c0:	bf08      	it	eq
 80061c2:	4614      	moveq	r4, r2
 80061c4:	e7c1      	b.n	800614a <SPI_WaitFlagStateUntilTimeout.constprop.0+0x22>
 80061c6:	bf00      	nop
 80061c8:	2000000c 	.word	0x2000000c

080061cc <SPI_WaitFifoStateUntilTimeout.constprop.0>:
=======
 800404c:	b003      	add	sp, #12
 800404e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (count == 0U)
 8004050:	9a01      	ldr	r2, [sp, #4]
      count--;
 8004052:	9b01      	ldr	r3, [sp, #4]
      if (count == 0U)
 8004054:	2a00      	cmp	r2, #0
      count--;
 8004056:	f103 33ff 	add.w	r3, r3, #4294967295
 800405a:	9301      	str	r3, [sp, #4]
 800405c:	bf08      	it	eq
 800405e:	4614      	moveq	r4, r2
 8004060:	e7c1      	b.n	8003fe6 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x22>
 8004062:	bf00      	nop
 8004064:	2000000c 	.word	0x2000000c

08004068 <SPI_WaitFifoStateUntilTimeout.constprop.0>:
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
  * @param  State Fifo state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
<<<<<<< HEAD
 80061cc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80061d0:	461c      	mov	r4, r3
=======
 8004068:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800406c:	461c      	mov	r4, r3
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
{
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
<<<<<<< HEAD
 80061d2:	2300      	movs	r3, #0
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 80061d4:	4617      	mov	r7, r2
  __IO uint8_t  tmpreg8 = 0;
 80061d6:	f88d 3003 	strb.w	r3, [sp, #3]
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 80061da:	4605      	mov	r5, r0
 80061dc:	460e      	mov	r6, r1

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80061de:	f7fe fa43 	bl	8004668 <HAL_GetTick>
 80061e2:	443c      	add	r4, r7
 80061e4:	1a24      	subs	r4, r4, r0
  tmp_tickstart = HAL_GetTick();
 80061e6:	f7fe fa3f 	bl	8004668 <HAL_GetTick>
=======
 800406e:	2300      	movs	r3, #0
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8004070:	4617      	mov	r7, r2
  __IO uint8_t  tmpreg8 = 0;
 8004072:	f88d 3003 	strb.w	r3, [sp, #3]
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8004076:	4605      	mov	r5, r0
 8004078:	460e      	mov	r6, r1

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800407a:	f7fe faab 	bl	80025d4 <HAL_GetTick>
 800407e:	443c      	add	r4, r7
 8004080:	1a24      	subs	r4, r4, r0
  tmp_tickstart = HAL_GetTick();
 8004082:	f7fe faa7 	bl	80025d4 <HAL_GetTick>
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
<<<<<<< HEAD
 80061ea:	4b29      	ldr	r3, [pc, #164]	@ (8006290 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xc4>)
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80061ec:	f8d5 9000 	ldr.w	r9, [r5]
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	2223      	movs	r2, #35	@ 0x23
 80061f4:	4353      	muls	r3, r2
 80061f6:	0d1b      	lsrs	r3, r3, #20
 80061f8:	4363      	muls	r3, r4
  tmp_tickstart = HAL_GetTick();
 80061fa:	4680      	mov	r8, r0
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80061fc:	9301      	str	r3, [sp, #4]

  while ((hspi->Instance->SR & Fifo) != State)
 80061fe:	682a      	ldr	r2, [r5, #0]
 8006200:	6890      	ldr	r0, [r2, #8]
 8006202:	4030      	ands	r0, r6
 8006204:	d038      	beq.n	8006278 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xac>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8006206:	f5b6 6fc0 	cmp.w	r6, #1536	@ 0x600
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800620a:	bf01      	itttt	eq
 800620c:	f899 300c 	ldrbeq.w	r3, [r9, #12]
 8006210:	b2db      	uxtbeq	r3, r3
 8006212:	f88d 3003 	strbeq.w	r3, [sp, #3]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8006216:	f89d 3003 	ldrbeq.w	r3, [sp, #3]
    }

    if (Timeout != HAL_MAX_DELAY)
 800621a:	1c7b      	adds	r3, r7, #1
 800621c:	d0f0      	beq.n	8006200 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x34>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800621e:	f7fe fa23 	bl	8004668 <HAL_GetTick>
 8006222:	eba0 0008 	sub.w	r0, r0, r8
 8006226:	42a0      	cmp	r0, r4
 8006228:	d329      	bcc.n	800627e <SPI_WaitFifoStateUntilTimeout.constprop.0+0xb2>
=======
 8004086:	4b29      	ldr	r3, [pc, #164]	@ (800412c <SPI_WaitFifoStateUntilTimeout.constprop.0+0xc4>)
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004088:	f8d5 9000 	ldr.w	r9, [r5]
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	2223      	movs	r2, #35	@ 0x23
 8004090:	4353      	muls	r3, r2
 8004092:	0d1b      	lsrs	r3, r3, #20
 8004094:	4363      	muls	r3, r4
  tmp_tickstart = HAL_GetTick();
 8004096:	4680      	mov	r8, r0
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004098:	9301      	str	r3, [sp, #4]

  while ((hspi->Instance->SR & Fifo) != State)
 800409a:	682a      	ldr	r2, [r5, #0]
 800409c:	6890      	ldr	r0, [r2, #8]
 800409e:	4030      	ands	r0, r6
 80040a0:	d038      	beq.n	8004114 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xac>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80040a2:	f5b6 6fc0 	cmp.w	r6, #1536	@ 0x600
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80040a6:	bf01      	itttt	eq
 80040a8:	f899 300c 	ldrbeq.w	r3, [r9, #12]
 80040ac:	b2db      	uxtbeq	r3, r3
 80040ae:	f88d 3003 	strbeq.w	r3, [sp, #3]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80040b2:	f89d 3003 	ldrbeq.w	r3, [sp, #3]
    }

    if (Timeout != HAL_MAX_DELAY)
 80040b6:	1c7b      	adds	r3, r7, #1
 80040b8:	d0f0      	beq.n	800409c <SPI_WaitFifoStateUntilTimeout.constprop.0+0x34>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80040ba:	f7fe fa8b 	bl	80025d4 <HAL_GetTick>
 80040be:	eba0 0008 	sub.w	r0, r0, r8
 80040c2:	42a0      	cmp	r0, r4
 80040c4:	d329      	bcc.n	800411a <SPI_WaitFifoStateUntilTimeout.constprop.0+0xb2>
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
<<<<<<< HEAD
 800622a:	682b      	ldr	r3, [r5, #0]
 800622c:	685a      	ldr	r2, [r3, #4]
 800622e:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006232:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006234:	686a      	ldr	r2, [r5, #4]
 8006236:	f5b2 7f82 	cmp.w	r2, #260	@ 0x104
 800623a:	d10a      	bne.n	8006252 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x86>
 800623c:	68aa      	ldr	r2, [r5, #8]
 800623e:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
 8006242:	d002      	beq.n	800624a <SPI_WaitFifoStateUntilTimeout.constprop.0+0x7e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006244:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 8006248:	d103      	bne.n	8006252 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x86>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800624a:	681a      	ldr	r2, [r3, #0]
 800624c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006250:	601a      	str	r2, [r3, #0]
=======
 80040c6:	682b      	ldr	r3, [r5, #0]
 80040c8:	685a      	ldr	r2, [r3, #4]
 80040ca:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80040ce:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80040d0:	686a      	ldr	r2, [r5, #4]
 80040d2:	f5b2 7f82 	cmp.w	r2, #260	@ 0x104
 80040d6:	d10a      	bne.n	80040ee <SPI_WaitFifoStateUntilTimeout.constprop.0+0x86>
 80040d8:	68aa      	ldr	r2, [r5, #8]
 80040da:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
 80040de:	d002      	beq.n	80040e6 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x7e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80040e0:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 80040e4:	d103      	bne.n	80040ee <SPI_WaitFifoStateUntilTimeout.constprop.0+0x86>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80040e6:	681a      	ldr	r2, [r3, #0]
 80040e8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80040ec:	601a      	str	r2, [r3, #0]
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
<<<<<<< HEAD
 8006252:	6aaa      	ldr	r2, [r5, #40]	@ 0x28
 8006254:	f5b2 5f00 	cmp.w	r2, #8192	@ 0x2000
 8006258:	d107      	bne.n	800626a <SPI_WaitFifoStateUntilTimeout.constprop.0+0x9e>
        {
          SPI_RESET_CRC(hspi);
 800625a:	681a      	ldr	r2, [r3, #0]
 800625c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006260:	601a      	str	r2, [r3, #0]
 8006262:	681a      	ldr	r2, [r3, #0]
 8006264:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006268:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800626a:	2301      	movs	r3, #1
 800626c:	f885 305d 	strb.w	r3, [r5, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006270:	2300      	movs	r3, #0
 8006272:	f885 305c 	strb.w	r3, [r5, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8006276:	2003      	movs	r0, #3
=======
 80040ee:	6aaa      	ldr	r2, [r5, #40]	@ 0x28
 80040f0:	f5b2 5f00 	cmp.w	r2, #8192	@ 0x2000
 80040f4:	d107      	bne.n	8004106 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x9e>
        {
          SPI_RESET_CRC(hspi);
 80040f6:	681a      	ldr	r2, [r3, #0]
 80040f8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80040fc:	601a      	str	r2, [r3, #0]
 80040fe:	681a      	ldr	r2, [r3, #0]
 8004100:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004104:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004106:	2301      	movs	r3, #1
 8004108:	f885 305d 	strb.w	r3, [r5, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800410c:	2300      	movs	r3, #0
 800410e:	f885 305c 	strb.w	r3, [r5, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8004112:	2003      	movs	r0, #3
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
      count--;
    }
  }

  return HAL_OK;
}
<<<<<<< HEAD
 8006278:	b003      	add	sp, #12
 800627a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      if (count == 0U)
 800627e:	9a01      	ldr	r2, [sp, #4]
      count--;
 8006280:	9b01      	ldr	r3, [sp, #4]
      if (count == 0U)
 8006282:	2a00      	cmp	r2, #0
      count--;
 8006284:	f103 33ff 	add.w	r3, r3, #4294967295
 8006288:	9301      	str	r3, [sp, #4]
 800628a:	bf08      	it	eq
 800628c:	4614      	moveq	r4, r2
 800628e:	e7b6      	b.n	80061fe <SPI_WaitFifoStateUntilTimeout.constprop.0+0x32>
 8006290:	2000000c 	.word	0x2000000c

08006294 <SPI_EndRxTransaction>:
=======
 8004114:	b003      	add	sp, #12
 8004116:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      if (count == 0U)
 800411a:	9a01      	ldr	r2, [sp, #4]
      count--;
 800411c:	9b01      	ldr	r3, [sp, #4]
      if (count == 0U)
 800411e:	2a00      	cmp	r2, #0
      count--;
 8004120:	f103 33ff 	add.w	r3, r3, #4294967295
 8004124:	9301      	str	r3, [sp, #4]
 8004126:	bf08      	it	eq
 8004128:	4614      	moveq	r4, r2
 800412a:	e7b6      	b.n	800409a <SPI_WaitFifoStateUntilTimeout.constprop.0+0x32>
 800412c:	2000000c 	.word	0x2000000c

08004130 <SPI_EndRxTransaction>:
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
<<<<<<< HEAD
 8006294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006296:	6843      	ldr	r3, [r0, #4]
 8006298:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
{
 800629c:	4604      	mov	r4, r0
 800629e:	460e      	mov	r6, r1
 80062a0:	4617      	mov	r7, r2
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80062a2:	d10b      	bne.n	80062bc <SPI_EndRxTransaction+0x28>
 80062a4:	6883      	ldr	r3, [r0, #8]
 80062a6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80062aa:	d002      	beq.n	80062b2 <SPI_EndRxTransaction+0x1e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80062ac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80062b0:	d104      	bne.n	80062bc <SPI_EndRxTransaction+0x28>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80062b2:	6822      	ldr	r2, [r4, #0]
 80062b4:	6813      	ldr	r3, [r2, #0]
 80062b6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80062ba:	6013      	str	r3, [r2, #0]
=======
 8004130:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004132:	6843      	ldr	r3, [r0, #4]
 8004134:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
{
 8004138:	4604      	mov	r4, r0
 800413a:	460e      	mov	r6, r1
 800413c:	4617      	mov	r7, r2
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800413e:	d10b      	bne.n	8004158 <SPI_EndRxTransaction+0x28>
 8004140:	6883      	ldr	r3, [r0, #8]
 8004142:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004146:	d002      	beq.n	800414e <SPI_EndRxTransaction+0x1e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004148:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800414c:	d104      	bne.n	8004158 <SPI_EndRxTransaction+0x28>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800414e:	6822      	ldr	r2, [r4, #0]
 8004150:	6813      	ldr	r3, [r2, #0]
 8004152:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004156:	6013      	str	r3, [r2, #0]
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
<<<<<<< HEAD
 80062bc:	463a      	mov	r2, r7
 80062be:	4631      	mov	r1, r6
 80062c0:	4620      	mov	r0, r4
 80062c2:	f7ff ff31 	bl	8006128 <SPI_WaitFlagStateUntilTimeout.constprop.0>
 80062c6:	4605      	mov	r5, r0
 80062c8:	b128      	cbz	r0, 80062d6 <SPI_EndRxTransaction+0x42>
=======
 8004158:	463a      	mov	r2, r7
 800415a:	4631      	mov	r1, r6
 800415c:	4620      	mov	r0, r4
 800415e:	f7ff ff31 	bl	8003fc4 <SPI_WaitFlagStateUntilTimeout.constprop.0>
 8004162:	4605      	mov	r5, r0
 8004164:	b128      	cbz	r0, 8004172 <SPI_EndRxTransaction+0x42>
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
<<<<<<< HEAD
 80062ca:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 80062cc:	f043 0320 	orr.w	r3, r3, #32
 80062d0:	6623      	str	r3, [r4, #96]	@ 0x60
    return HAL_TIMEOUT;
 80062d2:	2503      	movs	r5, #3
 80062d4:	e013      	b.n	80062fe <SPI_EndRxTransaction+0x6a>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80062d6:	6863      	ldr	r3, [r4, #4]
 80062d8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80062dc:	d10f      	bne.n	80062fe <SPI_EndRxTransaction+0x6a>
 80062de:	68a3      	ldr	r3, [r4, #8]
 80062e0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80062e4:	d002      	beq.n	80062ec <SPI_EndRxTransaction+0x58>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80062e6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80062ea:	d108      	bne.n	80062fe <SPI_EndRxTransaction+0x6a>
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80062ec:	463b      	mov	r3, r7
 80062ee:	4632      	mov	r2, r6
 80062f0:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80062f4:	4620      	mov	r0, r4
 80062f6:	f7ff ff69 	bl	80061cc <SPI_WaitFifoStateUntilTimeout.constprop.0>
 80062fa:	2800      	cmp	r0, #0
 80062fc:	d1e5      	bne.n	80062ca <SPI_EndRxTransaction+0x36>
=======
 8004166:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8004168:	f043 0320 	orr.w	r3, r3, #32
 800416c:	6623      	str	r3, [r4, #96]	@ 0x60
    return HAL_TIMEOUT;
 800416e:	2503      	movs	r5, #3
 8004170:	e013      	b.n	800419a <SPI_EndRxTransaction+0x6a>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004172:	6863      	ldr	r3, [r4, #4]
 8004174:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004178:	d10f      	bne.n	800419a <SPI_EndRxTransaction+0x6a>
 800417a:	68a3      	ldr	r3, [r4, #8]
 800417c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004180:	d002      	beq.n	8004188 <SPI_EndRxTransaction+0x58>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004182:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004186:	d108      	bne.n	800419a <SPI_EndRxTransaction+0x6a>
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004188:	463b      	mov	r3, r7
 800418a:	4632      	mov	r2, r6
 800418c:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8004190:	4620      	mov	r0, r4
 8004192:	f7ff ff69 	bl	8004068 <SPI_WaitFifoStateUntilTimeout.constprop.0>
 8004196:	2800      	cmp	r0, #0
 8004198:	d1e5      	bne.n	8004166 <SPI_EndRxTransaction+0x36>
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
      return HAL_TIMEOUT;
    }
  }
  return HAL_OK;
}
<<<<<<< HEAD
 80062fe:	4628      	mov	r0, r5
 8006300:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006302 <SPI_EndRxTxTransaction>:
=======
 800419a:	4628      	mov	r0, r5
 800419c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800419e <SPI_EndRxTxTransaction>:
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
<<<<<<< HEAD
 8006302:	b570      	push	{r4, r5, r6, lr}
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006304:	4613      	mov	r3, r2
{
 8006306:	460d      	mov	r5, r1
 8006308:	4616      	mov	r6, r2
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800630a:	460a      	mov	r2, r1
 800630c:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
{
 8006310:	4604      	mov	r4, r0
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006312:	f7ff ff5b 	bl	80061cc <SPI_WaitFifoStateUntilTimeout.constprop.0>
 8006316:	b128      	cbz	r0, 8006324 <SPI_EndRxTxTransaction+0x22>
=======
 800419e:	b570      	push	{r4, r5, r6, lr}
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80041a0:	4613      	mov	r3, r2
{
 80041a2:	460d      	mov	r5, r1
 80041a4:	4616      	mov	r6, r2
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80041a6:	460a      	mov	r2, r1
 80041a8:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
{
 80041ac:	4604      	mov	r4, r0
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80041ae:	f7ff ff5b 	bl	8004068 <SPI_WaitFifoStateUntilTimeout.constprop.0>
 80041b2:	b128      	cbz	r0, 80041c0 <SPI_EndRxTxTransaction+0x22>
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
<<<<<<< HEAD
 8006318:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 800631a:	f043 0320 	orr.w	r3, r3, #32
 800631e:	6623      	str	r3, [r4, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006320:	2003      	movs	r0, #3
=======
 80041b4:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 80041b6:	f043 0320 	orr.w	r3, r3, #32
 80041ba:	6623      	str	r3, [r4, #96]	@ 0x60
    return HAL_TIMEOUT;
 80041bc:	2003      	movs	r0, #3
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  return HAL_OK;
}
<<<<<<< HEAD
 8006322:	bd70      	pop	{r4, r5, r6, pc}
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006324:	4632      	mov	r2, r6
 8006326:	4629      	mov	r1, r5
 8006328:	4620      	mov	r0, r4
 800632a:	f7ff fefd 	bl	8006128 <SPI_WaitFlagStateUntilTimeout.constprop.0>
 800632e:	2800      	cmp	r0, #0
 8006330:	d1f2      	bne.n	8006318 <SPI_EndRxTxTransaction+0x16>
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006332:	4633      	mov	r3, r6
 8006334:	462a      	mov	r2, r5
 8006336:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800633a:	4620      	mov	r0, r4
 800633c:	f7ff ff46 	bl	80061cc <SPI_WaitFifoStateUntilTimeout.constprop.0>
 8006340:	2800      	cmp	r0, #0
 8006342:	d0ee      	beq.n	8006322 <SPI_EndRxTxTransaction+0x20>
 8006344:	e7e8      	b.n	8006318 <SPI_EndRxTxTransaction+0x16>

08006346 <HAL_SPI_Init>:
{
 8006346:	b570      	push	{r4, r5, r6, lr}
  if (hspi == NULL)
 8006348:	4604      	mov	r4, r0
 800634a:	2800      	cmp	r0, #0
 800634c:	d067      	beq.n	800641e <HAL_SPI_Init+0xd8>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800634e:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8006350:	2b00      	cmp	r3, #0
 8006352:	d15d      	bne.n	8006410 <HAL_SPI_Init+0xca>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006354:	6842      	ldr	r2, [r0, #4]
 8006356:	f5b2 7f82 	cmp.w	r2, #260	@ 0x104
 800635a:	d000      	beq.n	800635e <HAL_SPI_Init+0x18>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800635c:	61c3      	str	r3, [r0, #28]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800635e:	2300      	movs	r3, #0
 8006360:	62a3      	str	r3, [r4, #40]	@ 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8006362:	f894 305d 	ldrb.w	r3, [r4, #93]	@ 0x5d
 8006366:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800636a:	b923      	cbnz	r3, 8006376 <HAL_SPI_Init+0x30>
    hspi->Lock = HAL_UNLOCKED;
 800636c:	f884 205c 	strb.w	r2, [r4, #92]	@ 0x5c
    HAL_SPI_MspInit(hspi);
 8006370:	4620      	mov	r0, r4
 8006372:	f7fd ff01 	bl	8004178 <HAL_SPI_MspInit>
  __HAL_SPI_DISABLE(hspi);
 8006376:	6822      	ldr	r2, [r4, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006378:	68e0      	ldr	r0, [r4, #12]
  hspi->State = HAL_SPI_STATE_BUSY;
 800637a:	2302      	movs	r3, #2
 800637c:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
  __HAL_SPI_DISABLE(hspi);
 8006380:	6813      	ldr	r3, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006382:	f5b0 6fe0 	cmp.w	r0, #1792	@ 0x700
  __HAL_SPI_DISABLE(hspi);
 8006386:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800638a:	6013      	str	r3, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800638c:	f04f 0300 	mov.w	r3, #0
 8006390:	d942      	bls.n	8006418 <HAL_SPI_Init+0xd2>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006392:	461d      	mov	r5, r3
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006394:	f5b0 6f70 	cmp.w	r0, #3840	@ 0xf00
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006398:	bf18      	it	ne
 800639a:	62a3      	strne	r3, [r4, #40]	@ 0x28
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800639c:	68a6      	ldr	r6, [r4, #8]
 800639e:	6863      	ldr	r3, [r4, #4]
 80063a0:	69a1      	ldr	r1, [r4, #24]
 80063a2:	f406 4604 	and.w	r6, r6, #33792	@ 0x8400
 80063a6:	f403 7382 	and.w	r3, r3, #260	@ 0x104
 80063aa:	4333      	orrs	r3, r6
 80063ac:	6926      	ldr	r6, [r4, #16]
 80063ae:	f006 0602 	and.w	r6, r6, #2
 80063b2:	4333      	orrs	r3, r6
 80063b4:	6966      	ldr	r6, [r4, #20]
 80063b6:	f006 0601 	and.w	r6, r6, #1
 80063ba:	4333      	orrs	r3, r6
 80063bc:	f401 7600 	and.w	r6, r1, #512	@ 0x200
 80063c0:	4333      	orrs	r3, r6
 80063c2:	69e6      	ldr	r6, [r4, #28]
 80063c4:	f006 0638 	and.w	r6, r6, #56	@ 0x38
 80063c8:	4333      	orrs	r3, r6
 80063ca:	6a26      	ldr	r6, [r4, #32]
 80063cc:	f006 0680 	and.w	r6, r6, #128	@ 0x80
 80063d0:	4333      	orrs	r3, r6
 80063d2:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80063d4:	f406 5600 	and.w	r6, r6, #8192	@ 0x2000
 80063d8:	4333      	orrs	r3, r6
 80063da:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80063dc:	6b66      	ldr	r6, [r4, #52]	@ 0x34
 80063de:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80063e0:	f006 0608 	and.w	r6, r6, #8
 80063e4:	f003 0310 	and.w	r3, r3, #16
 80063e8:	f400 6070 	and.w	r0, r0, #3840	@ 0xf00
 80063ec:	4333      	orrs	r3, r6
 80063ee:	0c09      	lsrs	r1, r1, #16
 80063f0:	4303      	orrs	r3, r0
 80063f2:	f001 0104 	and.w	r1, r1, #4
 80063f6:	430b      	orrs	r3, r1
 80063f8:	432b      	orrs	r3, r5
 80063fa:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80063fc:	69d3      	ldr	r3, [r2, #28]
 80063fe:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006402:	61d3      	str	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006404:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 8006406:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006408:	6620      	str	r0, [r4, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800640a:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
}
 800640e:	bd70      	pop	{r4, r5, r6, pc}
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006410:	2300      	movs	r3, #0
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006412:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006416:	e7a2      	b.n	800635e <HAL_SPI_Init+0x18>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006418:	f44f 5580 	mov.w	r5, #4096	@ 0x1000
 800641c:	e7bc      	b.n	8006398 <HAL_SPI_Init+0x52>
    return HAL_ERROR;
 800641e:	2001      	movs	r0, #1
 8006420:	e7f5      	b.n	800640e <HAL_SPI_Init+0xc8>

08006422 <HAL_SPI_Transmit>:
{
 8006422:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8006426:	461f      	mov	r7, r3
  __HAL_LOCK(hspi);
 8006428:	f890 305c 	ldrb.w	r3, [r0, #92]	@ 0x5c
 800642c:	2b01      	cmp	r3, #1
{
 800642e:	4604      	mov	r4, r0
 8006430:	460d      	mov	r5, r1
 8006432:	4690      	mov	r8, r2
  __HAL_LOCK(hspi);
 8006434:	f000 80bc 	beq.w	80065b0 <HAL_SPI_Transmit+0x18e>
 8006438:	2301      	movs	r3, #1
 800643a:	f880 305c 	strb.w	r3, [r0, #92]	@ 0x5c
  tickstart = HAL_GetTick();
 800643e:	f7fe f913 	bl	8004668 <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 8006442:	f894 305d 	ldrb.w	r3, [r4, #93]	@ 0x5d
 8006446:	2b01      	cmp	r3, #1
  tickstart = HAL_GetTick();
 8006448:	4682      	mov	sl, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 800644a:	fa5f f983 	uxtb.w	r9, r3
 800644e:	f040 80ac 	bne.w	80065aa <HAL_SPI_Transmit+0x188>
  if ((pData == NULL) || (Size == 0U))
 8006452:	2d00      	cmp	r5, #0
 8006454:	d069      	beq.n	800652a <HAL_SPI_Transmit+0x108>
 8006456:	f1b8 0f00 	cmp.w	r8, #0
 800645a:	d066      	beq.n	800652a <HAL_SPI_Transmit+0x108>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800645c:	2303      	movs	r3, #3
 800645e:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006462:	2300      	movs	r3, #0
 8006464:	6623      	str	r3, [r4, #96]	@ 0x60
  hspi->RxISR       = NULL;
 8006466:	e9c4 3313 	strd	r3, r3, [r4, #76]	@ 0x4c
  hspi->TxXferCount = Size;
 800646a:	f8a4 803e 	strh.w	r8, [r4, #62]	@ 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800646e:	6423      	str	r3, [r4, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8006470:	f8a4 3044 	strh.w	r3, [r4, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8006474:	f8a4 3046 	strh.w	r3, [r4, #70]	@ 0x46
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006478:	68a3      	ldr	r3, [r4, #8]
    __HAL_SPI_DISABLE(hspi);
 800647a:	6826      	ldr	r6, [r4, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800647c:	63a5      	str	r5, [r4, #56]	@ 0x38
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800647e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
  hspi->TxXferSize  = Size;
 8006482:	f8a4 803c 	strh.w	r8, [r4, #60]	@ 0x3c
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006486:	d107      	bne.n	8006498 <HAL_SPI_Transmit+0x76>
    __HAL_SPI_DISABLE(hspi);
 8006488:	6833      	ldr	r3, [r6, #0]
 800648a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800648e:	6033      	str	r3, [r6, #0]
    SPI_1LINE_TX(hspi);
 8006490:	6833      	ldr	r3, [r6, #0]
 8006492:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006496:	6033      	str	r3, [r6, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006498:	6833      	ldr	r3, [r6, #0]
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800649a:	6862      	ldr	r2, [r4, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800649c:	065b      	lsls	r3, r3, #25
    __HAL_SPI_ENABLE(hspi);
 800649e:	bf5e      	ittt	pl
 80064a0:	6833      	ldrpl	r3, [r6, #0]
 80064a2:	f043 0340 	orrpl.w	r3, r3, #64	@ 0x40
 80064a6:	6033      	strpl	r3, [r6, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80064a8:	68e3      	ldr	r3, [r4, #12]
 80064aa:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80064ae:	d943      	bls.n	8006538 <HAL_SPI_Transmit+0x116>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80064b0:	b112      	cbz	r2, 80064b8 <HAL_SPI_Transmit+0x96>
 80064b2:	f1b8 0f01 	cmp.w	r8, #1
 80064b6:	d107      	bne.n	80064c8 <HAL_SPI_Transmit+0xa6>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80064b8:	f835 3b02 	ldrh.w	r3, [r5], #2
 80064bc:	60f3      	str	r3, [r6, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80064be:	63a5      	str	r5, [r4, #56]	@ 0x38
        hspi->TxXferCount--;
 80064c0:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80064c2:	3b01      	subs	r3, #1
 80064c4:	b29b      	uxth	r3, r3
 80064c6:	87e3      	strh	r3, [r4, #62]	@ 0x3e
    while (hspi->TxXferCount > 0U)
 80064c8:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80064ca:	b29b      	uxth	r3, r3
 80064cc:	b9b3      	cbnz	r3, 80064fc <HAL_SPI_Transmit+0xda>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80064ce:	4652      	mov	r2, sl
 80064d0:	4639      	mov	r1, r7
 80064d2:	4620      	mov	r0, r4
 80064d4:	f7ff ff15 	bl	8006302 <SPI_EndRxTxTransaction>
 80064d8:	2800      	cmp	r0, #0
 80064da:	d163      	bne.n	80065a4 <HAL_SPI_Transmit+0x182>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80064dc:	68a3      	ldr	r3, [r4, #8]
 80064de:	b933      	cbnz	r3, 80064ee <HAL_SPI_Transmit+0xcc>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80064e0:	9301      	str	r3, [sp, #4]
 80064e2:	6823      	ldr	r3, [r4, #0]
 80064e4:	68da      	ldr	r2, [r3, #12]
 80064e6:	9201      	str	r2, [sp, #4]
 80064e8:	689b      	ldr	r3, [r3, #8]
 80064ea:	9301      	str	r3, [sp, #4]
 80064ec:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80064ee:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 80064f0:	b9db      	cbnz	r3, 800652a <HAL_SPI_Transmit+0x108>
    hspi->State = HAL_SPI_STATE_READY;
 80064f2:	2201      	movs	r2, #1
 80064f4:	f884 205d 	strb.w	r2, [r4, #93]	@ 0x5d
  HAL_StatusTypeDef errorcode = HAL_OK;
 80064f8:	4699      	mov	r9, r3
 80064fa:	e016      	b.n	800652a <HAL_SPI_Transmit+0x108>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80064fc:	6822      	ldr	r2, [r4, #0]
 80064fe:	6893      	ldr	r3, [r2, #8]
 8006500:	079d      	lsls	r5, r3, #30
 8006502:	d505      	bpl.n	8006510 <HAL_SPI_Transmit+0xee>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006504:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8006506:	f833 1b02 	ldrh.w	r1, [r3], #2
 800650a:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800650c:	63a3      	str	r3, [r4, #56]	@ 0x38
 800650e:	e7d7      	b.n	80064c0 <HAL_SPI_Transmit+0x9e>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006510:	f7fe f8aa 	bl	8004668 <HAL_GetTick>
 8006514:	eba0 000a 	sub.w	r0, r0, sl
 8006518:	42b8      	cmp	r0, r7
 800651a:	d3d5      	bcc.n	80064c8 <HAL_SPI_Transmit+0xa6>
 800651c:	1c78      	adds	r0, r7, #1
 800651e:	d0d3      	beq.n	80064c8 <HAL_SPI_Transmit+0xa6>
          hspi->State = HAL_SPI_STATE_READY;
 8006520:	2301      	movs	r3, #1
 8006522:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
          errorcode = HAL_TIMEOUT;
 8006526:	f04f 0903 	mov.w	r9, #3
  __HAL_UNLOCK(hspi);
 800652a:	2300      	movs	r3, #0
 800652c:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
}
 8006530:	4648      	mov	r0, r9
 8006532:	b002      	add	sp, #8
 8006534:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006538:	b112      	cbz	r2, 8006540 <HAL_SPI_Transmit+0x11e>
 800653a:	f1b8 0f01 	cmp.w	r8, #1
 800653e:	d113      	bne.n	8006568 <HAL_SPI_Transmit+0x146>
      if (hspi->TxXferCount > 1U)
 8006540:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8006542:	b29b      	uxth	r3, r3
 8006544:	2b01      	cmp	r3, #1
 8006546:	d906      	bls.n	8006556 <HAL_SPI_Transmit+0x134>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006548:	f835 3b02 	ldrh.w	r3, [r5], #2
 800654c:	60f3      	str	r3, [r6, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800654e:	63a5      	str	r5, [r4, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8006550:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8006552:	3b02      	subs	r3, #2
 8006554:	e006      	b.n	8006564 <HAL_SPI_Transmit+0x142>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006556:	782b      	ldrb	r3, [r5, #0]
 8006558:	7333      	strb	r3, [r6, #12]
        hspi->pTxBuffPtr ++;
 800655a:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800655c:	3301      	adds	r3, #1
 800655e:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->TxXferCount--;
 8006560:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8006562:	3b01      	subs	r3, #1
 8006564:	b29b      	uxth	r3, r3
 8006566:	87e3      	strh	r3, [r4, #62]	@ 0x3e
    while (hspi->TxXferCount > 0U)
 8006568:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 800656a:	b29b      	uxth	r3, r3
 800656c:	2b00      	cmp	r3, #0
 800656e:	d0ae      	beq.n	80064ce <HAL_SPI_Transmit+0xac>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006570:	6822      	ldr	r2, [r4, #0]
 8006572:	6893      	ldr	r3, [r2, #8]
 8006574:	0799      	lsls	r1, r3, #30
 8006576:	d50c      	bpl.n	8006592 <HAL_SPI_Transmit+0x170>
        if (hspi->TxXferCount > 1U)
 8006578:	8fe1      	ldrh	r1, [r4, #62]	@ 0x3e
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800657a:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
        if (hspi->TxXferCount > 1U)
 800657c:	b289      	uxth	r1, r1
 800657e:	2901      	cmp	r1, #1
 8006580:	d904      	bls.n	800658c <HAL_SPI_Transmit+0x16a>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006582:	f833 1b02 	ldrh.w	r1, [r3], #2
 8006586:	60d1      	str	r1, [r2, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006588:	63a3      	str	r3, [r4, #56]	@ 0x38
 800658a:	e7e1      	b.n	8006550 <HAL_SPI_Transmit+0x12e>
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800658c:	781b      	ldrb	r3, [r3, #0]
 800658e:	7313      	strb	r3, [r2, #12]
          hspi->pTxBuffPtr++;
 8006590:	e7e3      	b.n	800655a <HAL_SPI_Transmit+0x138>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006592:	f7fe f869 	bl	8004668 <HAL_GetTick>
 8006596:	eba0 000a 	sub.w	r0, r0, sl
 800659a:	42b8      	cmp	r0, r7
 800659c:	d3e4      	bcc.n	8006568 <HAL_SPI_Transmit+0x146>
 800659e:	1c7b      	adds	r3, r7, #1
 80065a0:	d0e2      	beq.n	8006568 <HAL_SPI_Transmit+0x146>
 80065a2:	e7bd      	b.n	8006520 <HAL_SPI_Transmit+0xfe>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80065a4:	2320      	movs	r3, #32
 80065a6:	6623      	str	r3, [r4, #96]	@ 0x60
 80065a8:	e798      	b.n	80064dc <HAL_SPI_Transmit+0xba>
    errorcode = HAL_BUSY;
 80065aa:	f04f 0902 	mov.w	r9, #2
 80065ae:	e7bc      	b.n	800652a <HAL_SPI_Transmit+0x108>
  __HAL_LOCK(hspi);
 80065b0:	f04f 0902 	mov.w	r9, #2
 80065b4:	e7bc      	b.n	8006530 <HAL_SPI_Transmit+0x10e>

080065b6 <HAL_SPI_TransmitReceive>:
{
 80065b6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80065ba:	461e      	mov	r6, r3
  __HAL_LOCK(hspi);
 80065bc:	f890 305c 	ldrb.w	r3, [r0, #92]	@ 0x5c
{
 80065c0:	9f08      	ldr	r7, [sp, #32]
  __HAL_LOCK(hspi);
 80065c2:	2b01      	cmp	r3, #1
{
 80065c4:	4604      	mov	r4, r0
 80065c6:	460d      	mov	r5, r1
 80065c8:	4691      	mov	r9, r2
  __HAL_LOCK(hspi);
 80065ca:	f000 8122 	beq.w	8006812 <HAL_SPI_TransmitReceive+0x25c>
 80065ce:	2301      	movs	r3, #1
 80065d0:	f880 305c 	strb.w	r3, [r0, #92]	@ 0x5c
  tickstart = HAL_GetTick();
 80065d4:	f7fe f848 	bl	8004668 <HAL_GetTick>
  tmp_state           = hspi->State;
 80065d8:	f894 205d 	ldrb.w	r2, [r4, #93]	@ 0x5d
  tmp_mode            = hspi->Init.Mode;
 80065dc:	6863      	ldr	r3, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80065de:	2a01      	cmp	r2, #1
  tickstart = HAL_GetTick();
 80065e0:	4680      	mov	r8, r0
  tmp_state           = hspi->State;
 80065e2:	b2d1      	uxtb	r1, r2
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80065e4:	d00a      	beq.n	80065fc <HAL_SPI_TransmitReceive+0x46>
 80065e6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80065ea:	f040 8110 	bne.w	800680e <HAL_SPI_TransmitReceive+0x258>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80065ee:	68a2      	ldr	r2, [r4, #8]
 80065f0:	2a00      	cmp	r2, #0
 80065f2:	f040 810c 	bne.w	800680e <HAL_SPI_TransmitReceive+0x258>
 80065f6:	2904      	cmp	r1, #4
 80065f8:	f040 8109 	bne.w	800680e <HAL_SPI_TransmitReceive+0x258>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80065fc:	b92d      	cbnz	r5, 800660a <HAL_SPI_TransmitReceive+0x54>
    errorcode = HAL_ERROR;
 80065fe:	2001      	movs	r0, #1
  __HAL_UNLOCK(hspi);
 8006600:	2300      	movs	r3, #0
 8006602:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
}
 8006606:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800660a:	f1b9 0f00 	cmp.w	r9, #0
 800660e:	d0f6      	beq.n	80065fe <HAL_SPI_TransmitReceive+0x48>
 8006610:	2e00      	cmp	r6, #0
 8006612:	d0f4      	beq.n	80065fe <HAL_SPI_TransmitReceive+0x48>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006614:	f894 205d 	ldrb.w	r2, [r4, #93]	@ 0x5d
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8006618:	68e0      	ldr	r0, [r4, #12]
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800661a:	6821      	ldr	r1, [r4, #0]
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800661c:	f8c4 9040 	str.w	r9, [r4, #64]	@ 0x40
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006620:	2a04      	cmp	r2, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006622:	bf1c      	itt	ne
 8006624:	2205      	movne	r2, #5
 8006626:	f884 205d 	strbne.w	r2, [r4, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800662a:	2200      	movs	r2, #0
 800662c:	6622      	str	r2, [r4, #96]	@ 0x60
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800662e:	f5b0 6fe0 	cmp.w	r0, #1792	@ 0x700
  hspi->RxXferCount = Size;
 8006632:	f8a4 6046 	strh.w	r6, [r4, #70]	@ 0x46
  hspi->TxXferCount = Size;
 8006636:	87e6      	strh	r6, [r4, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8006638:	e9c4 2213 	strd	r2, r2, [r4, #76]	@ 0x4c
  hspi->RxXferSize  = Size;
 800663c:	f8a4 6044 	strh.w	r6, [r4, #68]	@ 0x44
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006640:	684a      	ldr	r2, [r1, #4]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006642:	63a5      	str	r5, [r4, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8006644:	87a6      	strh	r6, [r4, #60]	@ 0x3c
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8006646:	d801      	bhi.n	800664c <HAL_SPI_TransmitReceive+0x96>
 8006648:	2e01      	cmp	r6, #1
 800664a:	d02e      	beq.n	80066aa <HAL_SPI_TransmitReceive+0xf4>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800664c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006650:	604a      	str	r2, [r1, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006652:	680a      	ldr	r2, [r1, #0]
 8006654:	0652      	lsls	r2, r2, #25
    __HAL_SPI_ENABLE(hspi);
 8006656:	bf5e      	ittt	pl
 8006658:	680a      	ldrpl	r2, [r1, #0]
 800665a:	f042 0240 	orrpl.w	r2, r2, #64	@ 0x40
 800665e:	600a      	strpl	r2, [r1, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006660:	f5b0 6fe0 	cmp.w	r0, #1792	@ 0x700
 8006664:	d957      	bls.n	8006716 <HAL_SPI_TransmitReceive+0x160>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006666:	b10b      	cbz	r3, 800666c <HAL_SPI_TransmitReceive+0xb6>
 8006668:	2e01      	cmp	r6, #1
 800666a:	d107      	bne.n	800667c <HAL_SPI_TransmitReceive+0xc6>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800666c:	f835 3b02 	ldrh.w	r3, [r5], #2
 8006670:	60cb      	str	r3, [r1, #12]
      hspi->TxXferCount--;
 8006672:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006674:	63a5      	str	r5, [r4, #56]	@ 0x38
      hspi->TxXferCount--;
 8006676:	3b01      	subs	r3, #1
 8006678:	b29b      	uxth	r3, r3
 800667a:	87e3      	strh	r3, [r4, #62]	@ 0x3e
        txallowed = 1U;
 800667c:	2501      	movs	r5, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800667e:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8006680:	b29b      	uxth	r3, r3
 8006682:	b9ab      	cbnz	r3, 80066b0 <HAL_SPI_TransmitReceive+0xfa>
 8006684:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 8006688:	b29b      	uxth	r3, r3
 800668a:	b98b      	cbnz	r3, 80066b0 <HAL_SPI_TransmitReceive+0xfa>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800668c:	4642      	mov	r2, r8
 800668e:	4639      	mov	r1, r7
 8006690:	4620      	mov	r0, r4
 8006692:	f7ff fe36 	bl	8006302 <SPI_EndRxTxTransaction>
 8006696:	2800      	cmp	r0, #0
 8006698:	f040 80b5 	bne.w	8006806 <HAL_SPI_TransmitReceive+0x250>
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800669c:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d1ad      	bne.n	80065fe <HAL_SPI_TransmitReceive+0x48>
    hspi->State = HAL_SPI_STATE_READY;
 80066a2:	2301      	movs	r3, #1
 80066a4:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
 80066a8:	e7aa      	b.n	8006600 <HAL_SPI_TransmitReceive+0x4a>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80066aa:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80066ae:	e7cf      	b.n	8006650 <HAL_SPI_TransmitReceive+0x9a>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80066b0:	6821      	ldr	r1, [r4, #0]
 80066b2:	688b      	ldr	r3, [r1, #8]
 80066b4:	079e      	lsls	r6, r3, #30
 80066b6:	d50d      	bpl.n	80066d4 <HAL_SPI_TransmitReceive+0x11e>
 80066b8:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80066ba:	b29b      	uxth	r3, r3
 80066bc:	b153      	cbz	r3, 80066d4 <HAL_SPI_TransmitReceive+0x11e>
 80066be:	b145      	cbz	r5, 80066d2 <HAL_SPI_TransmitReceive+0x11c>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80066c0:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80066c2:	f833 2b02 	ldrh.w	r2, [r3], #2
 80066c6:	60ca      	str	r2, [r1, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80066c8:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->TxXferCount--;
 80066ca:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80066cc:	3b01      	subs	r3, #1
 80066ce:	b29b      	uxth	r3, r3
 80066d0:	87e3      	strh	r3, [r4, #62]	@ 0x3e
        txallowed = 0U;
 80066d2:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80066d4:	688a      	ldr	r2, [r1, #8]
 80066d6:	f012 0201 	ands.w	r2, r2, #1
 80066da:	d00f      	beq.n	80066fc <HAL_SPI_TransmitReceive+0x146>
 80066dc:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 80066e0:	b29b      	uxth	r3, r3
 80066e2:	b15b      	cbz	r3, 80066fc <HAL_SPI_TransmitReceive+0x146>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80066e4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80066e6:	68c9      	ldr	r1, [r1, #12]
 80066e8:	f823 1b02 	strh.w	r1, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80066ec:	6423      	str	r3, [r4, #64]	@ 0x40
        hspi->RxXferCount--;
 80066ee:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 80066f2:	3b01      	subs	r3, #1
 80066f4:	b29b      	uxth	r3, r3
 80066f6:	f8a4 3046 	strh.w	r3, [r4, #70]	@ 0x46
        txallowed = 1U;
 80066fa:	4615      	mov	r5, r2
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80066fc:	f7fd ffb4 	bl	8004668 <HAL_GetTick>
 8006700:	eba0 0008 	sub.w	r0, r0, r8
 8006704:	42b8      	cmp	r0, r7
 8006706:	d3ba      	bcc.n	800667e <HAL_SPI_TransmitReceive+0xc8>
 8006708:	1c78      	adds	r0, r7, #1
 800670a:	d0b8      	beq.n	800667e <HAL_SPI_TransmitReceive+0xc8>
        hspi->State = HAL_SPI_STATE_READY;
 800670c:	2301      	movs	r3, #1
 800670e:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
        errorcode = HAL_TIMEOUT;
 8006712:	2003      	movs	r0, #3
 8006714:	e774      	b.n	8006600 <HAL_SPI_TransmitReceive+0x4a>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006716:	b10b      	cbz	r3, 800671c <HAL_SPI_TransmitReceive+0x166>
 8006718:	2e01      	cmp	r6, #1
 800671a:	d10b      	bne.n	8006734 <HAL_SPI_TransmitReceive+0x17e>
      if (hspi->TxXferCount > 1U)
 800671c:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 800671e:	b29b      	uxth	r3, r3
 8006720:	2b01      	cmp	r3, #1
 8006722:	d909      	bls.n	8006738 <HAL_SPI_TransmitReceive+0x182>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006724:	f835 3b02 	ldrh.w	r3, [r5], #2
 8006728:	60cb      	str	r3, [r1, #12]
        hspi->TxXferCount -= 2U;
 800672a:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800672c:	63a5      	str	r5, [r4, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800672e:	3b02      	subs	r3, #2
        hspi->TxXferCount--;
 8006730:	b29b      	uxth	r3, r3
 8006732:	87e3      	strh	r3, [r4, #62]	@ 0x3e
        txallowed = 1U;
 8006734:	2501      	movs	r5, #1
 8006736:	e048      	b.n	80067ca <HAL_SPI_TransmitReceive+0x214>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006738:	782b      	ldrb	r3, [r5, #0]
 800673a:	730b      	strb	r3, [r1, #12]
        hspi->pTxBuffPtr++;
 800673c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800673e:	3301      	adds	r3, #1
 8006740:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->TxXferCount--;
 8006742:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8006744:	3b01      	subs	r3, #1
 8006746:	e7f3      	b.n	8006730 <HAL_SPI_TransmitReceive+0x17a>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006748:	6822      	ldr	r2, [r4, #0]
 800674a:	6893      	ldr	r3, [r2, #8]
 800674c:	0799      	lsls	r1, r3, #30
 800674e:	d511      	bpl.n	8006774 <HAL_SPI_TransmitReceive+0x1be>
 8006750:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8006752:	b29b      	uxth	r3, r3
 8006754:	b173      	cbz	r3, 8006774 <HAL_SPI_TransmitReceive+0x1be>
 8006756:	b165      	cbz	r5, 8006772 <HAL_SPI_TransmitReceive+0x1bc>
        if (hspi->TxXferCount > 1U)
 8006758:	8fe1      	ldrh	r1, [r4, #62]	@ 0x3e
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800675a:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
        if (hspi->TxXferCount > 1U)
 800675c:	b289      	uxth	r1, r1
 800675e:	2901      	cmp	r1, #1
 8006760:	d93d      	bls.n	80067de <HAL_SPI_TransmitReceive+0x228>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006762:	f833 1b02 	ldrh.w	r1, [r3], #2
 8006766:	60d1      	str	r1, [r2, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006768:	63a3      	str	r3, [r4, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800676a:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 800676c:	3b02      	subs	r3, #2
 800676e:	b29b      	uxth	r3, r3
 8006770:	87e3      	strh	r3, [r4, #62]	@ 0x3e
        txallowed = 0U;
 8006772:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006774:	6822      	ldr	r2, [r4, #0]
 8006776:	6891      	ldr	r1, [r2, #8]
 8006778:	f011 0101 	ands.w	r1, r1, #1
 800677c:	d01d      	beq.n	80067ba <HAL_SPI_TransmitReceive+0x204>
 800677e:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 8006782:	b29b      	uxth	r3, r3
 8006784:	b1cb      	cbz	r3, 80067ba <HAL_SPI_TransmitReceive+0x204>
        if (hspi->RxXferCount > 1U)
 8006786:	f8b4 0046 	ldrh.w	r0, [r4, #70]	@ 0x46
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800678a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
        if (hspi->RxXferCount > 1U)
 800678c:	b280      	uxth	r0, r0
 800678e:	2801      	cmp	r0, #1
 8006790:	d92d      	bls.n	80067ee <HAL_SPI_TransmitReceive+0x238>
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006792:	68d0      	ldr	r0, [r2, #12]
 8006794:	f823 0b02 	strh.w	r0, [r3], #2
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8006798:	6423      	str	r3, [r4, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 800679a:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 800679e:	3b02      	subs	r3, #2
 80067a0:	b29b      	uxth	r3, r3
 80067a2:	f8a4 3046 	strh.w	r3, [r4, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 80067a6:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 80067aa:	b29b      	uxth	r3, r3
 80067ac:	2b01      	cmp	r3, #1
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80067ae:	bf9e      	ittt	ls
 80067b0:	6853      	ldrls	r3, [r2, #4]
 80067b2:	f443 5380 	orrls.w	r3, r3, #4096	@ 0x1000
 80067b6:	6053      	strls	r3, [r2, #4]
        txallowed = 1U;
 80067b8:	460d      	mov	r5, r1
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80067ba:	f7fd ff55 	bl	8004668 <HAL_GetTick>
 80067be:	eba0 0008 	sub.w	r0, r0, r8
 80067c2:	42b8      	cmp	r0, r7
 80067c4:	d301      	bcc.n	80067ca <HAL_SPI_TransmitReceive+0x214>
 80067c6:	1c7b      	adds	r3, r7, #1
 80067c8:	d1a0      	bne.n	800670c <HAL_SPI_TransmitReceive+0x156>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80067ca:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80067cc:	b29b      	uxth	r3, r3
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d1ba      	bne.n	8006748 <HAL_SPI_TransmitReceive+0x192>
 80067d2:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 80067d6:	b29b      	uxth	r3, r3
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d1b5      	bne.n	8006748 <HAL_SPI_TransmitReceive+0x192>
 80067dc:	e756      	b.n	800668c <HAL_SPI_TransmitReceive+0xd6>
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80067de:	781b      	ldrb	r3, [r3, #0]
 80067e0:	7313      	strb	r3, [r2, #12]
          hspi->pTxBuffPtr++;
 80067e2:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80067e4:	3301      	adds	r3, #1
 80067e6:	63a3      	str	r3, [r4, #56]	@ 0x38
          hspi->TxXferCount--;
 80067e8:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80067ea:	3b01      	subs	r3, #1
 80067ec:	e7bf      	b.n	800676e <HAL_SPI_TransmitReceive+0x1b8>
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80067ee:	7b12      	ldrb	r2, [r2, #12]
 80067f0:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80067f2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80067f4:	3301      	adds	r3, #1
 80067f6:	6423      	str	r3, [r4, #64]	@ 0x40
          hspi->RxXferCount--;
 80067f8:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 80067fc:	3b01      	subs	r3, #1
 80067fe:	b29b      	uxth	r3, r3
 8006800:	f8a4 3046 	strh.w	r3, [r4, #70]	@ 0x46
 8006804:	e7d8      	b.n	80067b8 <HAL_SPI_TransmitReceive+0x202>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006806:	2320      	movs	r3, #32
 8006808:	6623      	str	r3, [r4, #96]	@ 0x60
    errorcode = HAL_ERROR;
 800680a:	2001      	movs	r0, #1
 800680c:	e746      	b.n	800669c <HAL_SPI_TransmitReceive+0xe6>
    errorcode = HAL_BUSY;
 800680e:	2002      	movs	r0, #2
 8006810:	e6f6      	b.n	8006600 <HAL_SPI_TransmitReceive+0x4a>
  __HAL_LOCK(hspi);
 8006812:	2002      	movs	r0, #2
 8006814:	e6f7      	b.n	8006606 <HAL_SPI_TransmitReceive+0x50>

08006816 <HAL_SPI_Receive>:
{
 8006816:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 800681a:	461f      	mov	r7, r3
  if (hspi->State != HAL_SPI_STATE_READY)
 800681c:	f890 305d 	ldrb.w	r3, [r0, #93]	@ 0x5d
 8006820:	2b01      	cmp	r3, #1
{
 8006822:	4604      	mov	r4, r0
 8006824:	468a      	mov	sl, r1
 8006826:	4690      	mov	r8, r2
  if (hspi->State != HAL_SPI_STATE_READY)
 8006828:	b2de      	uxtb	r6, r3
 800682a:	f040 80a7 	bne.w	800697c <HAL_SPI_Receive+0x166>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800682e:	6843      	ldr	r3, [r0, #4]
 8006830:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006834:	d10e      	bne.n	8006854 <HAL_SPI_Receive+0x3e>
 8006836:	6883      	ldr	r3, [r0, #8]
 8006838:	b963      	cbnz	r3, 8006854 <HAL_SPI_Receive+0x3e>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800683a:	2304      	movs	r3, #4
 800683c:	f880 305d 	strb.w	r3, [r0, #93]	@ 0x5d
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006840:	4613      	mov	r3, r2
 8006842:	9700      	str	r7, [sp, #0]
 8006844:	460a      	mov	r2, r1
 8006846:	f7ff feb6 	bl	80065b6 <HAL_SPI_TransmitReceive>
 800684a:	4606      	mov	r6, r0
}
 800684c:	4630      	mov	r0, r6
 800684e:	b002      	add	sp, #8
 8006850:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  __HAL_LOCK(hspi);
 8006854:	f894 305c 	ldrb.w	r3, [r4, #92]	@ 0x5c
 8006858:	2b01      	cmp	r3, #1
 800685a:	f000 8091 	beq.w	8006980 <HAL_SPI_Receive+0x16a>
 800685e:	2301      	movs	r3, #1
 8006860:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
  tickstart = HAL_GetTick();
 8006864:	f7fd ff00 	bl	8004668 <HAL_GetTick>
 8006868:	4681      	mov	r9, r0
  if ((pData == NULL) || (Size == 0U))
 800686a:	f1ba 0f00 	cmp.w	sl, #0
 800686e:	d075      	beq.n	800695c <HAL_SPI_Receive+0x146>
 8006870:	f1b8 0f00 	cmp.w	r8, #0
 8006874:	d072      	beq.n	800695c <HAL_SPI_Receive+0x146>
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006876:	2500      	movs	r5, #0
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006878:	2304      	movs	r3, #4
 800687a:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
  hspi->TxISR       = NULL;
 800687e:	e9c4 5513 	strd	r5, r5, [r4, #76]	@ 0x4c
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006882:	6625      	str	r5, [r4, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006884:	63a5      	str	r5, [r4, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8006886:	f8a4 8046 	strh.w	r8, [r4, #70]	@ 0x46
  hspi->TxXferSize  = 0U;
 800688a:	87a5      	strh	r5, [r4, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 800688c:	87e5      	strh	r5, [r4, #62]	@ 0x3e
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800688e:	6825      	ldr	r5, [r4, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006890:	68e2      	ldr	r2, [r4, #12]
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006892:	686b      	ldr	r3, [r5, #4]
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006894:	f8c4 a040 	str.w	sl, [r4, #64]	@ 0x40
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006898:	f5b2 6fe0 	cmp.w	r2, #1792	@ 0x700
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800689c:	bf8c      	ite	hi
 800689e:	f423 5380 	bichi.w	r3, r3, #4096	@ 0x1000
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80068a2:	f443 5380 	orrls.w	r3, r3, #4096	@ 0x1000
  hspi->RxXferSize  = Size;
 80068a6:	f8a4 8044 	strh.w	r8, [r4, #68]	@ 0x44
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80068aa:	606b      	str	r3, [r5, #4]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80068ac:	68a3      	ldr	r3, [r4, #8]
 80068ae:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80068b2:	d107      	bne.n	80068c4 <HAL_SPI_Receive+0xae>
    __HAL_SPI_DISABLE(hspi);
 80068b4:	682b      	ldr	r3, [r5, #0]
 80068b6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80068ba:	602b      	str	r3, [r5, #0]
    SPI_1LINE_RX(hspi);
 80068bc:	682b      	ldr	r3, [r5, #0]
 80068be:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80068c2:	602b      	str	r3, [r5, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80068c4:	682b      	ldr	r3, [r5, #0]
 80068c6:	065b      	lsls	r3, r3, #25
    __HAL_SPI_ENABLE(hspi);
 80068c8:	bf5e      	ittt	pl
 80068ca:	682b      	ldrpl	r3, [r5, #0]
 80068cc:	f043 0340 	orrpl.w	r3, r3, #64	@ 0x40
 80068d0:	602b      	strpl	r3, [r5, #0]
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80068d2:	f5b2 6fe0 	cmp.w	r2, #1792	@ 0x700
 80068d6:	d923      	bls.n	8006920 <HAL_SPI_Receive+0x10a>
    while (hspi->RxXferCount > 0U)
 80068d8:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 80068dc:	b29b      	uxth	r3, r3
 80068de:	b323      	cbz	r3, 800692a <HAL_SPI_Receive+0x114>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80068e0:	6823      	ldr	r3, [r4, #0]
 80068e2:	689a      	ldr	r2, [r3, #8]
 80068e4:	07d2      	lsls	r2, r2, #31
 80068e6:	d53d      	bpl.n	8006964 <HAL_SPI_Receive+0x14e>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80068e8:	68da      	ldr	r2, [r3, #12]
 80068ea:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80068ec:	f823 2b02 	strh.w	r2, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80068f0:	6423      	str	r3, [r4, #64]	@ 0x40
        hspi->RxXferCount--;
 80068f2:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 80068f6:	3b01      	subs	r3, #1
 80068f8:	b29b      	uxth	r3, r3
 80068fa:	f8a4 3046 	strh.w	r3, [r4, #70]	@ 0x46
 80068fe:	e7eb      	b.n	80068d8 <HAL_SPI_Receive+0xc2>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006900:	6823      	ldr	r3, [r4, #0]
 8006902:	689a      	ldr	r2, [r3, #8]
 8006904:	07d0      	lsls	r0, r2, #31
 8006906:	d51d      	bpl.n	8006944 <HAL_SPI_Receive+0x12e>
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006908:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 800690a:	7b1b      	ldrb	r3, [r3, #12]
 800690c:	7013      	strb	r3, [r2, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800690e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006910:	3301      	adds	r3, #1
 8006912:	6423      	str	r3, [r4, #64]	@ 0x40
        hspi->RxXferCount--;
 8006914:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 8006918:	3b01      	subs	r3, #1
 800691a:	b29b      	uxth	r3, r3
 800691c:	f8a4 3046 	strh.w	r3, [r4, #70]	@ 0x46
    while (hspi->RxXferCount > 0U)
 8006920:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 8006924:	b29b      	uxth	r3, r3
 8006926:	2b00      	cmp	r3, #0
 8006928:	d1ea      	bne.n	8006900 <HAL_SPI_Receive+0xea>
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800692a:	464a      	mov	r2, r9
 800692c:	4639      	mov	r1, r7
 800692e:	4620      	mov	r0, r4
 8006930:	f7ff fcb0 	bl	8006294 <SPI_EndRxTransaction>
 8006934:	b9f8      	cbnz	r0, 8006976 <HAL_SPI_Receive+0x160>
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006936:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8006938:	b983      	cbnz	r3, 800695c <HAL_SPI_Receive+0x146>
    hspi->State = HAL_SPI_STATE_READY;
 800693a:	2201      	movs	r2, #1
 800693c:	f884 205d 	strb.w	r2, [r4, #93]	@ 0x5d
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006940:	461e      	mov	r6, r3
 8006942:	e00b      	b.n	800695c <HAL_SPI_Receive+0x146>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006944:	f7fd fe90 	bl	8004668 <HAL_GetTick>
 8006948:	eba0 0009 	sub.w	r0, r0, r9
 800694c:	42b8      	cmp	r0, r7
 800694e:	d3e7      	bcc.n	8006920 <HAL_SPI_Receive+0x10a>
 8006950:	1c79      	adds	r1, r7, #1
 8006952:	d0e5      	beq.n	8006920 <HAL_SPI_Receive+0x10a>
          hspi->State = HAL_SPI_STATE_READY;
 8006954:	2301      	movs	r3, #1
 8006956:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
          errorcode = HAL_TIMEOUT;
 800695a:	2603      	movs	r6, #3
  __HAL_UNLOCK(hspi);
 800695c:	2300      	movs	r3, #0
 800695e:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
  return errorcode;
 8006962:	e773      	b.n	800684c <HAL_SPI_Receive+0x36>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006964:	f7fd fe80 	bl	8004668 <HAL_GetTick>
 8006968:	eba0 0009 	sub.w	r0, r0, r9
 800696c:	42b8      	cmp	r0, r7
 800696e:	d3b3      	bcc.n	80068d8 <HAL_SPI_Receive+0xc2>
 8006970:	1c7b      	adds	r3, r7, #1
 8006972:	d0b1      	beq.n	80068d8 <HAL_SPI_Receive+0xc2>
 8006974:	e7ee      	b.n	8006954 <HAL_SPI_Receive+0x13e>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006976:	2320      	movs	r3, #32
 8006978:	6623      	str	r3, [r4, #96]	@ 0x60
 800697a:	e7dc      	b.n	8006936 <HAL_SPI_Receive+0x120>
    errorcode = HAL_BUSY;
 800697c:	2602      	movs	r6, #2
 800697e:	e7ed      	b.n	800695c <HAL_SPI_Receive+0x146>
  __HAL_LOCK(hspi);
 8006980:	2602      	movs	r6, #2
 8006982:	e763      	b.n	800684c <HAL_SPI_Receive+0x36>

08006984 <HAL_TIM_Base_Start>:
=======
 80041be:	bd70      	pop	{r4, r5, r6, pc}
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80041c0:	4632      	mov	r2, r6
 80041c2:	4629      	mov	r1, r5
 80041c4:	4620      	mov	r0, r4
 80041c6:	f7ff fefd 	bl	8003fc4 <SPI_WaitFlagStateUntilTimeout.constprop.0>
 80041ca:	2800      	cmp	r0, #0
 80041cc:	d1f2      	bne.n	80041b4 <SPI_EndRxTxTransaction+0x16>
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80041ce:	4633      	mov	r3, r6
 80041d0:	462a      	mov	r2, r5
 80041d2:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80041d6:	4620      	mov	r0, r4
 80041d8:	f7ff ff46 	bl	8004068 <SPI_WaitFifoStateUntilTimeout.constprop.0>
 80041dc:	2800      	cmp	r0, #0
 80041de:	d0ee      	beq.n	80041be <SPI_EndRxTxTransaction+0x20>
 80041e0:	e7e8      	b.n	80041b4 <SPI_EndRxTxTransaction+0x16>

080041e2 <HAL_SPI_Init>:
{
 80041e2:	b570      	push	{r4, r5, r6, lr}
  if (hspi == NULL)
 80041e4:	4604      	mov	r4, r0
 80041e6:	2800      	cmp	r0, #0
 80041e8:	d067      	beq.n	80042ba <HAL_SPI_Init+0xd8>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80041ea:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d15d      	bne.n	80042ac <HAL_SPI_Init+0xca>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80041f0:	6842      	ldr	r2, [r0, #4]
 80041f2:	f5b2 7f82 	cmp.w	r2, #260	@ 0x104
 80041f6:	d000      	beq.n	80041fa <HAL_SPI_Init+0x18>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80041f8:	61c3      	str	r3, [r0, #28]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80041fa:	2300      	movs	r3, #0
 80041fc:	62a3      	str	r3, [r4, #40]	@ 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 80041fe:	f894 305d 	ldrb.w	r3, [r4, #93]	@ 0x5d
 8004202:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8004206:	b923      	cbnz	r3, 8004212 <HAL_SPI_Init+0x30>
    hspi->Lock = HAL_UNLOCKED;
 8004208:	f884 205c 	strb.w	r2, [r4, #92]	@ 0x5c
    HAL_SPI_MspInit(hspi);
 800420c:	4620      	mov	r0, r4
 800420e:	f7fd ff69 	bl	80020e4 <HAL_SPI_MspInit>
  __HAL_SPI_DISABLE(hspi);
 8004212:	6822      	ldr	r2, [r4, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004214:	68e0      	ldr	r0, [r4, #12]
  hspi->State = HAL_SPI_STATE_BUSY;
 8004216:	2302      	movs	r3, #2
 8004218:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
  __HAL_SPI_DISABLE(hspi);
 800421c:	6813      	ldr	r3, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800421e:	f5b0 6fe0 	cmp.w	r0, #1792	@ 0x700
  __HAL_SPI_DISABLE(hspi);
 8004222:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004226:	6013      	str	r3, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004228:	f04f 0300 	mov.w	r3, #0
 800422c:	d942      	bls.n	80042b4 <HAL_SPI_Init+0xd2>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800422e:	461d      	mov	r5, r3
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004230:	f5b0 6f70 	cmp.w	r0, #3840	@ 0xf00
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004234:	bf18      	it	ne
 8004236:	62a3      	strne	r3, [r4, #40]	@ 0x28
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004238:	68a6      	ldr	r6, [r4, #8]
 800423a:	6863      	ldr	r3, [r4, #4]
 800423c:	69a1      	ldr	r1, [r4, #24]
 800423e:	f406 4604 	and.w	r6, r6, #33792	@ 0x8400
 8004242:	f403 7382 	and.w	r3, r3, #260	@ 0x104
 8004246:	4333      	orrs	r3, r6
 8004248:	6926      	ldr	r6, [r4, #16]
 800424a:	f006 0602 	and.w	r6, r6, #2
 800424e:	4333      	orrs	r3, r6
 8004250:	6966      	ldr	r6, [r4, #20]
 8004252:	f006 0601 	and.w	r6, r6, #1
 8004256:	4333      	orrs	r3, r6
 8004258:	f401 7600 	and.w	r6, r1, #512	@ 0x200
 800425c:	4333      	orrs	r3, r6
 800425e:	69e6      	ldr	r6, [r4, #28]
 8004260:	f006 0638 	and.w	r6, r6, #56	@ 0x38
 8004264:	4333      	orrs	r3, r6
 8004266:	6a26      	ldr	r6, [r4, #32]
 8004268:	f006 0680 	and.w	r6, r6, #128	@ 0x80
 800426c:	4333      	orrs	r3, r6
 800426e:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8004270:	f406 5600 	and.w	r6, r6, #8192	@ 0x2000
 8004274:	4333      	orrs	r3, r6
 8004276:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004278:	6b66      	ldr	r6, [r4, #52]	@ 0x34
 800427a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800427c:	f006 0608 	and.w	r6, r6, #8
 8004280:	f003 0310 	and.w	r3, r3, #16
 8004284:	f400 6070 	and.w	r0, r0, #3840	@ 0xf00
 8004288:	4333      	orrs	r3, r6
 800428a:	0c09      	lsrs	r1, r1, #16
 800428c:	4303      	orrs	r3, r0
 800428e:	f001 0104 	and.w	r1, r1, #4
 8004292:	430b      	orrs	r3, r1
 8004294:	432b      	orrs	r3, r5
 8004296:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004298:	69d3      	ldr	r3, [r2, #28]
 800429a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800429e:	61d3      	str	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80042a0:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 80042a2:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80042a4:	6620      	str	r0, [r4, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80042a6:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
}
 80042aa:	bd70      	pop	{r4, r5, r6, pc}
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80042ac:	2300      	movs	r3, #0
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80042ae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80042b2:	e7a2      	b.n	80041fa <HAL_SPI_Init+0x18>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80042b4:	f44f 5580 	mov.w	r5, #4096	@ 0x1000
 80042b8:	e7bc      	b.n	8004234 <HAL_SPI_Init+0x52>
    return HAL_ERROR;
 80042ba:	2001      	movs	r0, #1
 80042bc:	e7f5      	b.n	80042aa <HAL_SPI_Init+0xc8>

080042be <HAL_SPI_Transmit>:
{
 80042be:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80042c2:	461f      	mov	r7, r3
  __HAL_LOCK(hspi);
 80042c4:	f890 305c 	ldrb.w	r3, [r0, #92]	@ 0x5c
 80042c8:	2b01      	cmp	r3, #1
{
 80042ca:	4604      	mov	r4, r0
 80042cc:	460d      	mov	r5, r1
 80042ce:	4690      	mov	r8, r2
  __HAL_LOCK(hspi);
 80042d0:	f000 80bc 	beq.w	800444c <HAL_SPI_Transmit+0x18e>
 80042d4:	2301      	movs	r3, #1
 80042d6:	f880 305c 	strb.w	r3, [r0, #92]	@ 0x5c
  tickstart = HAL_GetTick();
 80042da:	f7fe f97b 	bl	80025d4 <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 80042de:	f894 305d 	ldrb.w	r3, [r4, #93]	@ 0x5d
 80042e2:	2b01      	cmp	r3, #1
  tickstart = HAL_GetTick();
 80042e4:	4682      	mov	sl, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 80042e6:	fa5f f983 	uxtb.w	r9, r3
 80042ea:	f040 80ac 	bne.w	8004446 <HAL_SPI_Transmit+0x188>
  if ((pData == NULL) || (Size == 0U))
 80042ee:	2d00      	cmp	r5, #0
 80042f0:	d069      	beq.n	80043c6 <HAL_SPI_Transmit+0x108>
 80042f2:	f1b8 0f00 	cmp.w	r8, #0
 80042f6:	d066      	beq.n	80043c6 <HAL_SPI_Transmit+0x108>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80042f8:	2303      	movs	r3, #3
 80042fa:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80042fe:	2300      	movs	r3, #0
 8004300:	6623      	str	r3, [r4, #96]	@ 0x60
  hspi->RxISR       = NULL;
 8004302:	e9c4 3313 	strd	r3, r3, [r4, #76]	@ 0x4c
  hspi->TxXferCount = Size;
 8004306:	f8a4 803e 	strh.w	r8, [r4, #62]	@ 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800430a:	6423      	str	r3, [r4, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 800430c:	f8a4 3044 	strh.w	r3, [r4, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8004310:	f8a4 3046 	strh.w	r3, [r4, #70]	@ 0x46
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004314:	68a3      	ldr	r3, [r4, #8]
    __HAL_SPI_DISABLE(hspi);
 8004316:	6826      	ldr	r6, [r4, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004318:	63a5      	str	r5, [r4, #56]	@ 0x38
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800431a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
  hspi->TxXferSize  = Size;
 800431e:	f8a4 803c 	strh.w	r8, [r4, #60]	@ 0x3c
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004322:	d107      	bne.n	8004334 <HAL_SPI_Transmit+0x76>
    __HAL_SPI_DISABLE(hspi);
 8004324:	6833      	ldr	r3, [r6, #0]
 8004326:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800432a:	6033      	str	r3, [r6, #0]
    SPI_1LINE_TX(hspi);
 800432c:	6833      	ldr	r3, [r6, #0]
 800432e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004332:	6033      	str	r3, [r6, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004334:	6833      	ldr	r3, [r6, #0]
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004336:	6862      	ldr	r2, [r4, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004338:	065b      	lsls	r3, r3, #25
    __HAL_SPI_ENABLE(hspi);
 800433a:	bf5e      	ittt	pl
 800433c:	6833      	ldrpl	r3, [r6, #0]
 800433e:	f043 0340 	orrpl.w	r3, r3, #64	@ 0x40
 8004342:	6033      	strpl	r3, [r6, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004344:	68e3      	ldr	r3, [r4, #12]
 8004346:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800434a:	d943      	bls.n	80043d4 <HAL_SPI_Transmit+0x116>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800434c:	b112      	cbz	r2, 8004354 <HAL_SPI_Transmit+0x96>
 800434e:	f1b8 0f01 	cmp.w	r8, #1
 8004352:	d107      	bne.n	8004364 <HAL_SPI_Transmit+0xa6>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004354:	f835 3b02 	ldrh.w	r3, [r5], #2
 8004358:	60f3      	str	r3, [r6, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800435a:	63a5      	str	r5, [r4, #56]	@ 0x38
        hspi->TxXferCount--;
 800435c:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 800435e:	3b01      	subs	r3, #1
 8004360:	b29b      	uxth	r3, r3
 8004362:	87e3      	strh	r3, [r4, #62]	@ 0x3e
    while (hspi->TxXferCount > 0U)
 8004364:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8004366:	b29b      	uxth	r3, r3
 8004368:	b9b3      	cbnz	r3, 8004398 <HAL_SPI_Transmit+0xda>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800436a:	4652      	mov	r2, sl
 800436c:	4639      	mov	r1, r7
 800436e:	4620      	mov	r0, r4
 8004370:	f7ff ff15 	bl	800419e <SPI_EndRxTxTransaction>
 8004374:	2800      	cmp	r0, #0
 8004376:	d163      	bne.n	8004440 <HAL_SPI_Transmit+0x182>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004378:	68a3      	ldr	r3, [r4, #8]
 800437a:	b933      	cbnz	r3, 800438a <HAL_SPI_Transmit+0xcc>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800437c:	9301      	str	r3, [sp, #4]
 800437e:	6823      	ldr	r3, [r4, #0]
 8004380:	68da      	ldr	r2, [r3, #12]
 8004382:	9201      	str	r2, [sp, #4]
 8004384:	689b      	ldr	r3, [r3, #8]
 8004386:	9301      	str	r3, [sp, #4]
 8004388:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800438a:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 800438c:	b9db      	cbnz	r3, 80043c6 <HAL_SPI_Transmit+0x108>
    hspi->State = HAL_SPI_STATE_READY;
 800438e:	2201      	movs	r2, #1
 8004390:	f884 205d 	strb.w	r2, [r4, #93]	@ 0x5d
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004394:	4699      	mov	r9, r3
 8004396:	e016      	b.n	80043c6 <HAL_SPI_Transmit+0x108>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004398:	6822      	ldr	r2, [r4, #0]
 800439a:	6893      	ldr	r3, [r2, #8]
 800439c:	079d      	lsls	r5, r3, #30
 800439e:	d505      	bpl.n	80043ac <HAL_SPI_Transmit+0xee>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80043a0:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80043a2:	f833 1b02 	ldrh.w	r1, [r3], #2
 80043a6:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80043a8:	63a3      	str	r3, [r4, #56]	@ 0x38
 80043aa:	e7d7      	b.n	800435c <HAL_SPI_Transmit+0x9e>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80043ac:	f7fe f912 	bl	80025d4 <HAL_GetTick>
 80043b0:	eba0 000a 	sub.w	r0, r0, sl
 80043b4:	42b8      	cmp	r0, r7
 80043b6:	d3d5      	bcc.n	8004364 <HAL_SPI_Transmit+0xa6>
 80043b8:	1c78      	adds	r0, r7, #1
 80043ba:	d0d3      	beq.n	8004364 <HAL_SPI_Transmit+0xa6>
          hspi->State = HAL_SPI_STATE_READY;
 80043bc:	2301      	movs	r3, #1
 80043be:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
          errorcode = HAL_TIMEOUT;
 80043c2:	f04f 0903 	mov.w	r9, #3
  __HAL_UNLOCK(hspi);
 80043c6:	2300      	movs	r3, #0
 80043c8:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
}
 80043cc:	4648      	mov	r0, r9
 80043ce:	b002      	add	sp, #8
 80043d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80043d4:	b112      	cbz	r2, 80043dc <HAL_SPI_Transmit+0x11e>
 80043d6:	f1b8 0f01 	cmp.w	r8, #1
 80043da:	d113      	bne.n	8004404 <HAL_SPI_Transmit+0x146>
      if (hspi->TxXferCount > 1U)
 80043dc:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80043de:	b29b      	uxth	r3, r3
 80043e0:	2b01      	cmp	r3, #1
 80043e2:	d906      	bls.n	80043f2 <HAL_SPI_Transmit+0x134>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80043e4:	f835 3b02 	ldrh.w	r3, [r5], #2
 80043e8:	60f3      	str	r3, [r6, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80043ea:	63a5      	str	r5, [r4, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80043ec:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80043ee:	3b02      	subs	r3, #2
 80043f0:	e006      	b.n	8004400 <HAL_SPI_Transmit+0x142>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80043f2:	782b      	ldrb	r3, [r5, #0]
 80043f4:	7333      	strb	r3, [r6, #12]
        hspi->pTxBuffPtr ++;
 80043f6:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80043f8:	3301      	adds	r3, #1
 80043fa:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->TxXferCount--;
 80043fc:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80043fe:	3b01      	subs	r3, #1
 8004400:	b29b      	uxth	r3, r3
 8004402:	87e3      	strh	r3, [r4, #62]	@ 0x3e
    while (hspi->TxXferCount > 0U)
 8004404:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8004406:	b29b      	uxth	r3, r3
 8004408:	2b00      	cmp	r3, #0
 800440a:	d0ae      	beq.n	800436a <HAL_SPI_Transmit+0xac>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800440c:	6822      	ldr	r2, [r4, #0]
 800440e:	6893      	ldr	r3, [r2, #8]
 8004410:	0799      	lsls	r1, r3, #30
 8004412:	d50c      	bpl.n	800442e <HAL_SPI_Transmit+0x170>
        if (hspi->TxXferCount > 1U)
 8004414:	8fe1      	ldrh	r1, [r4, #62]	@ 0x3e
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004416:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
        if (hspi->TxXferCount > 1U)
 8004418:	b289      	uxth	r1, r1
 800441a:	2901      	cmp	r1, #1
 800441c:	d904      	bls.n	8004428 <HAL_SPI_Transmit+0x16a>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800441e:	f833 1b02 	ldrh.w	r1, [r3], #2
 8004422:	60d1      	str	r1, [r2, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004424:	63a3      	str	r3, [r4, #56]	@ 0x38
 8004426:	e7e1      	b.n	80043ec <HAL_SPI_Transmit+0x12e>
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004428:	781b      	ldrb	r3, [r3, #0]
 800442a:	7313      	strb	r3, [r2, #12]
          hspi->pTxBuffPtr++;
 800442c:	e7e3      	b.n	80043f6 <HAL_SPI_Transmit+0x138>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800442e:	f7fe f8d1 	bl	80025d4 <HAL_GetTick>
 8004432:	eba0 000a 	sub.w	r0, r0, sl
 8004436:	42b8      	cmp	r0, r7
 8004438:	d3e4      	bcc.n	8004404 <HAL_SPI_Transmit+0x146>
 800443a:	1c7b      	adds	r3, r7, #1
 800443c:	d0e2      	beq.n	8004404 <HAL_SPI_Transmit+0x146>
 800443e:	e7bd      	b.n	80043bc <HAL_SPI_Transmit+0xfe>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004440:	2320      	movs	r3, #32
 8004442:	6623      	str	r3, [r4, #96]	@ 0x60
 8004444:	e798      	b.n	8004378 <HAL_SPI_Transmit+0xba>
    errorcode = HAL_BUSY;
 8004446:	f04f 0902 	mov.w	r9, #2
 800444a:	e7bc      	b.n	80043c6 <HAL_SPI_Transmit+0x108>
  __HAL_LOCK(hspi);
 800444c:	f04f 0902 	mov.w	r9, #2
 8004450:	e7bc      	b.n	80043cc <HAL_SPI_Transmit+0x10e>

08004452 <HAL_SPI_TransmitReceive>:
{
 8004452:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004456:	461e      	mov	r6, r3
  __HAL_LOCK(hspi);
 8004458:	f890 305c 	ldrb.w	r3, [r0, #92]	@ 0x5c
{
 800445c:	9f08      	ldr	r7, [sp, #32]
  __HAL_LOCK(hspi);
 800445e:	2b01      	cmp	r3, #1
{
 8004460:	4604      	mov	r4, r0
 8004462:	460d      	mov	r5, r1
 8004464:	4691      	mov	r9, r2
  __HAL_LOCK(hspi);
 8004466:	f000 8122 	beq.w	80046ae <HAL_SPI_TransmitReceive+0x25c>
 800446a:	2301      	movs	r3, #1
 800446c:	f880 305c 	strb.w	r3, [r0, #92]	@ 0x5c
  tickstart = HAL_GetTick();
 8004470:	f7fe f8b0 	bl	80025d4 <HAL_GetTick>
  tmp_state           = hspi->State;
 8004474:	f894 205d 	ldrb.w	r2, [r4, #93]	@ 0x5d
  tmp_mode            = hspi->Init.Mode;
 8004478:	6863      	ldr	r3, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800447a:	2a01      	cmp	r2, #1
  tickstart = HAL_GetTick();
 800447c:	4680      	mov	r8, r0
  tmp_state           = hspi->State;
 800447e:	b2d1      	uxtb	r1, r2
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004480:	d00a      	beq.n	8004498 <HAL_SPI_TransmitReceive+0x46>
 8004482:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004486:	f040 8110 	bne.w	80046aa <HAL_SPI_TransmitReceive+0x258>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800448a:	68a2      	ldr	r2, [r4, #8]
 800448c:	2a00      	cmp	r2, #0
 800448e:	f040 810c 	bne.w	80046aa <HAL_SPI_TransmitReceive+0x258>
 8004492:	2904      	cmp	r1, #4
 8004494:	f040 8109 	bne.w	80046aa <HAL_SPI_TransmitReceive+0x258>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004498:	b92d      	cbnz	r5, 80044a6 <HAL_SPI_TransmitReceive+0x54>
    errorcode = HAL_ERROR;
 800449a:	2001      	movs	r0, #1
  __HAL_UNLOCK(hspi);
 800449c:	2300      	movs	r3, #0
 800449e:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
}
 80044a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80044a6:	f1b9 0f00 	cmp.w	r9, #0
 80044aa:	d0f6      	beq.n	800449a <HAL_SPI_TransmitReceive+0x48>
 80044ac:	2e00      	cmp	r6, #0
 80044ae:	d0f4      	beq.n	800449a <HAL_SPI_TransmitReceive+0x48>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80044b0:	f894 205d 	ldrb.w	r2, [r4, #93]	@ 0x5d
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80044b4:	68e0      	ldr	r0, [r4, #12]
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80044b6:	6821      	ldr	r1, [r4, #0]
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80044b8:	f8c4 9040 	str.w	r9, [r4, #64]	@ 0x40
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80044bc:	2a04      	cmp	r2, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80044be:	bf1c      	itt	ne
 80044c0:	2205      	movne	r2, #5
 80044c2:	f884 205d 	strbne.w	r2, [r4, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80044c6:	2200      	movs	r2, #0
 80044c8:	6622      	str	r2, [r4, #96]	@ 0x60
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80044ca:	f5b0 6fe0 	cmp.w	r0, #1792	@ 0x700
  hspi->RxXferCount = Size;
 80044ce:	f8a4 6046 	strh.w	r6, [r4, #70]	@ 0x46
  hspi->TxXferCount = Size;
 80044d2:	87e6      	strh	r6, [r4, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80044d4:	e9c4 2213 	strd	r2, r2, [r4, #76]	@ 0x4c
  hspi->RxXferSize  = Size;
 80044d8:	f8a4 6044 	strh.w	r6, [r4, #68]	@ 0x44
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80044dc:	684a      	ldr	r2, [r1, #4]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80044de:	63a5      	str	r5, [r4, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80044e0:	87a6      	strh	r6, [r4, #60]	@ 0x3c
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80044e2:	d801      	bhi.n	80044e8 <HAL_SPI_TransmitReceive+0x96>
 80044e4:	2e01      	cmp	r6, #1
 80044e6:	d02e      	beq.n	8004546 <HAL_SPI_TransmitReceive+0xf4>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80044e8:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80044ec:	604a      	str	r2, [r1, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80044ee:	680a      	ldr	r2, [r1, #0]
 80044f0:	0652      	lsls	r2, r2, #25
    __HAL_SPI_ENABLE(hspi);
 80044f2:	bf5e      	ittt	pl
 80044f4:	680a      	ldrpl	r2, [r1, #0]
 80044f6:	f042 0240 	orrpl.w	r2, r2, #64	@ 0x40
 80044fa:	600a      	strpl	r2, [r1, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80044fc:	f5b0 6fe0 	cmp.w	r0, #1792	@ 0x700
 8004500:	d957      	bls.n	80045b2 <HAL_SPI_TransmitReceive+0x160>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004502:	b10b      	cbz	r3, 8004508 <HAL_SPI_TransmitReceive+0xb6>
 8004504:	2e01      	cmp	r6, #1
 8004506:	d107      	bne.n	8004518 <HAL_SPI_TransmitReceive+0xc6>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004508:	f835 3b02 	ldrh.w	r3, [r5], #2
 800450c:	60cb      	str	r3, [r1, #12]
      hspi->TxXferCount--;
 800450e:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004510:	63a5      	str	r5, [r4, #56]	@ 0x38
      hspi->TxXferCount--;
 8004512:	3b01      	subs	r3, #1
 8004514:	b29b      	uxth	r3, r3
 8004516:	87e3      	strh	r3, [r4, #62]	@ 0x3e
        txallowed = 1U;
 8004518:	2501      	movs	r5, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800451a:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 800451c:	b29b      	uxth	r3, r3
 800451e:	b9ab      	cbnz	r3, 800454c <HAL_SPI_TransmitReceive+0xfa>
 8004520:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 8004524:	b29b      	uxth	r3, r3
 8004526:	b98b      	cbnz	r3, 800454c <HAL_SPI_TransmitReceive+0xfa>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004528:	4642      	mov	r2, r8
 800452a:	4639      	mov	r1, r7
 800452c:	4620      	mov	r0, r4
 800452e:	f7ff fe36 	bl	800419e <SPI_EndRxTxTransaction>
 8004532:	2800      	cmp	r0, #0
 8004534:	f040 80b5 	bne.w	80046a2 <HAL_SPI_TransmitReceive+0x250>
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004538:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 800453a:	2b00      	cmp	r3, #0
 800453c:	d1ad      	bne.n	800449a <HAL_SPI_TransmitReceive+0x48>
    hspi->State = HAL_SPI_STATE_READY;
 800453e:	2301      	movs	r3, #1
 8004540:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
 8004544:	e7aa      	b.n	800449c <HAL_SPI_TransmitReceive+0x4a>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004546:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800454a:	e7cf      	b.n	80044ec <HAL_SPI_TransmitReceive+0x9a>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800454c:	6821      	ldr	r1, [r4, #0]
 800454e:	688b      	ldr	r3, [r1, #8]
 8004550:	079e      	lsls	r6, r3, #30
 8004552:	d50d      	bpl.n	8004570 <HAL_SPI_TransmitReceive+0x11e>
 8004554:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8004556:	b29b      	uxth	r3, r3
 8004558:	b153      	cbz	r3, 8004570 <HAL_SPI_TransmitReceive+0x11e>
 800455a:	b145      	cbz	r5, 800456e <HAL_SPI_TransmitReceive+0x11c>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800455c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800455e:	f833 2b02 	ldrh.w	r2, [r3], #2
 8004562:	60ca      	str	r2, [r1, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004564:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->TxXferCount--;
 8004566:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8004568:	3b01      	subs	r3, #1
 800456a:	b29b      	uxth	r3, r3
 800456c:	87e3      	strh	r3, [r4, #62]	@ 0x3e
        txallowed = 0U;
 800456e:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004570:	688a      	ldr	r2, [r1, #8]
 8004572:	f012 0201 	ands.w	r2, r2, #1
 8004576:	d00f      	beq.n	8004598 <HAL_SPI_TransmitReceive+0x146>
 8004578:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 800457c:	b29b      	uxth	r3, r3
 800457e:	b15b      	cbz	r3, 8004598 <HAL_SPI_TransmitReceive+0x146>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004580:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004582:	68c9      	ldr	r1, [r1, #12]
 8004584:	f823 1b02 	strh.w	r1, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004588:	6423      	str	r3, [r4, #64]	@ 0x40
        hspi->RxXferCount--;
 800458a:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 800458e:	3b01      	subs	r3, #1
 8004590:	b29b      	uxth	r3, r3
 8004592:	f8a4 3046 	strh.w	r3, [r4, #70]	@ 0x46
        txallowed = 1U;
 8004596:	4615      	mov	r5, r2
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004598:	f7fe f81c 	bl	80025d4 <HAL_GetTick>
 800459c:	eba0 0008 	sub.w	r0, r0, r8
 80045a0:	42b8      	cmp	r0, r7
 80045a2:	d3ba      	bcc.n	800451a <HAL_SPI_TransmitReceive+0xc8>
 80045a4:	1c78      	adds	r0, r7, #1
 80045a6:	d0b8      	beq.n	800451a <HAL_SPI_TransmitReceive+0xc8>
        hspi->State = HAL_SPI_STATE_READY;
 80045a8:	2301      	movs	r3, #1
 80045aa:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
        errorcode = HAL_TIMEOUT;
 80045ae:	2003      	movs	r0, #3
 80045b0:	e774      	b.n	800449c <HAL_SPI_TransmitReceive+0x4a>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80045b2:	b10b      	cbz	r3, 80045b8 <HAL_SPI_TransmitReceive+0x166>
 80045b4:	2e01      	cmp	r6, #1
 80045b6:	d10b      	bne.n	80045d0 <HAL_SPI_TransmitReceive+0x17e>
      if (hspi->TxXferCount > 1U)
 80045b8:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80045ba:	b29b      	uxth	r3, r3
 80045bc:	2b01      	cmp	r3, #1
 80045be:	d909      	bls.n	80045d4 <HAL_SPI_TransmitReceive+0x182>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80045c0:	f835 3b02 	ldrh.w	r3, [r5], #2
 80045c4:	60cb      	str	r3, [r1, #12]
        hspi->TxXferCount -= 2U;
 80045c6:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80045c8:	63a5      	str	r5, [r4, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80045ca:	3b02      	subs	r3, #2
        hspi->TxXferCount--;
 80045cc:	b29b      	uxth	r3, r3
 80045ce:	87e3      	strh	r3, [r4, #62]	@ 0x3e
        txallowed = 1U;
 80045d0:	2501      	movs	r5, #1
 80045d2:	e048      	b.n	8004666 <HAL_SPI_TransmitReceive+0x214>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80045d4:	782b      	ldrb	r3, [r5, #0]
 80045d6:	730b      	strb	r3, [r1, #12]
        hspi->pTxBuffPtr++;
 80045d8:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80045da:	3301      	adds	r3, #1
 80045dc:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->TxXferCount--;
 80045de:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80045e0:	3b01      	subs	r3, #1
 80045e2:	e7f3      	b.n	80045cc <HAL_SPI_TransmitReceive+0x17a>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80045e4:	6822      	ldr	r2, [r4, #0]
 80045e6:	6893      	ldr	r3, [r2, #8]
 80045e8:	0799      	lsls	r1, r3, #30
 80045ea:	d511      	bpl.n	8004610 <HAL_SPI_TransmitReceive+0x1be>
 80045ec:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80045ee:	b29b      	uxth	r3, r3
 80045f0:	b173      	cbz	r3, 8004610 <HAL_SPI_TransmitReceive+0x1be>
 80045f2:	b165      	cbz	r5, 800460e <HAL_SPI_TransmitReceive+0x1bc>
        if (hspi->TxXferCount > 1U)
 80045f4:	8fe1      	ldrh	r1, [r4, #62]	@ 0x3e
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80045f6:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
        if (hspi->TxXferCount > 1U)
 80045f8:	b289      	uxth	r1, r1
 80045fa:	2901      	cmp	r1, #1
 80045fc:	d93d      	bls.n	800467a <HAL_SPI_TransmitReceive+0x228>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80045fe:	f833 1b02 	ldrh.w	r1, [r3], #2
 8004602:	60d1      	str	r1, [r2, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004604:	63a3      	str	r3, [r4, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8004606:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8004608:	3b02      	subs	r3, #2
 800460a:	b29b      	uxth	r3, r3
 800460c:	87e3      	strh	r3, [r4, #62]	@ 0x3e
        txallowed = 0U;
 800460e:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004610:	6822      	ldr	r2, [r4, #0]
 8004612:	6891      	ldr	r1, [r2, #8]
 8004614:	f011 0101 	ands.w	r1, r1, #1
 8004618:	d01d      	beq.n	8004656 <HAL_SPI_TransmitReceive+0x204>
 800461a:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 800461e:	b29b      	uxth	r3, r3
 8004620:	b1cb      	cbz	r3, 8004656 <HAL_SPI_TransmitReceive+0x204>
        if (hspi->RxXferCount > 1U)
 8004622:	f8b4 0046 	ldrh.w	r0, [r4, #70]	@ 0x46
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004626:	6c23      	ldr	r3, [r4, #64]	@ 0x40
        if (hspi->RxXferCount > 1U)
 8004628:	b280      	uxth	r0, r0
 800462a:	2801      	cmp	r0, #1
 800462c:	d92d      	bls.n	800468a <HAL_SPI_TransmitReceive+0x238>
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800462e:	68d0      	ldr	r0, [r2, #12]
 8004630:	f823 0b02 	strh.w	r0, [r3], #2
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8004634:	6423      	str	r3, [r4, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8004636:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 800463a:	3b02      	subs	r3, #2
 800463c:	b29b      	uxth	r3, r3
 800463e:	f8a4 3046 	strh.w	r3, [r4, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8004642:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 8004646:	b29b      	uxth	r3, r3
 8004648:	2b01      	cmp	r3, #1
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800464a:	bf9e      	ittt	ls
 800464c:	6853      	ldrls	r3, [r2, #4]
 800464e:	f443 5380 	orrls.w	r3, r3, #4096	@ 0x1000
 8004652:	6053      	strls	r3, [r2, #4]
        txallowed = 1U;
 8004654:	460d      	mov	r5, r1
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004656:	f7fd ffbd 	bl	80025d4 <HAL_GetTick>
 800465a:	eba0 0008 	sub.w	r0, r0, r8
 800465e:	42b8      	cmp	r0, r7
 8004660:	d301      	bcc.n	8004666 <HAL_SPI_TransmitReceive+0x214>
 8004662:	1c7b      	adds	r3, r7, #1
 8004664:	d1a0      	bne.n	80045a8 <HAL_SPI_TransmitReceive+0x156>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004666:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8004668:	b29b      	uxth	r3, r3
 800466a:	2b00      	cmp	r3, #0
 800466c:	d1ba      	bne.n	80045e4 <HAL_SPI_TransmitReceive+0x192>
 800466e:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 8004672:	b29b      	uxth	r3, r3
 8004674:	2b00      	cmp	r3, #0
 8004676:	d1b5      	bne.n	80045e4 <HAL_SPI_TransmitReceive+0x192>
 8004678:	e756      	b.n	8004528 <HAL_SPI_TransmitReceive+0xd6>
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800467a:	781b      	ldrb	r3, [r3, #0]
 800467c:	7313      	strb	r3, [r2, #12]
          hspi->pTxBuffPtr++;
 800467e:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8004680:	3301      	adds	r3, #1
 8004682:	63a3      	str	r3, [r4, #56]	@ 0x38
          hspi->TxXferCount--;
 8004684:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8004686:	3b01      	subs	r3, #1
 8004688:	e7bf      	b.n	800460a <HAL_SPI_TransmitReceive+0x1b8>
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800468a:	7b12      	ldrb	r2, [r2, #12]
 800468c:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800468e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004690:	3301      	adds	r3, #1
 8004692:	6423      	str	r3, [r4, #64]	@ 0x40
          hspi->RxXferCount--;
 8004694:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 8004698:	3b01      	subs	r3, #1
 800469a:	b29b      	uxth	r3, r3
 800469c:	f8a4 3046 	strh.w	r3, [r4, #70]	@ 0x46
 80046a0:	e7d8      	b.n	8004654 <HAL_SPI_TransmitReceive+0x202>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80046a2:	2320      	movs	r3, #32
 80046a4:	6623      	str	r3, [r4, #96]	@ 0x60
    errorcode = HAL_ERROR;
 80046a6:	2001      	movs	r0, #1
 80046a8:	e746      	b.n	8004538 <HAL_SPI_TransmitReceive+0xe6>
    errorcode = HAL_BUSY;
 80046aa:	2002      	movs	r0, #2
 80046ac:	e6f6      	b.n	800449c <HAL_SPI_TransmitReceive+0x4a>
  __HAL_LOCK(hspi);
 80046ae:	2002      	movs	r0, #2
 80046b0:	e6f7      	b.n	80044a2 <HAL_SPI_TransmitReceive+0x50>

080046b2 <HAL_SPI_Receive>:
{
 80046b2:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80046b6:	461f      	mov	r7, r3
  if (hspi->State != HAL_SPI_STATE_READY)
 80046b8:	f890 305d 	ldrb.w	r3, [r0, #93]	@ 0x5d
 80046bc:	2b01      	cmp	r3, #1
{
 80046be:	4604      	mov	r4, r0
 80046c0:	468a      	mov	sl, r1
 80046c2:	4690      	mov	r8, r2
  if (hspi->State != HAL_SPI_STATE_READY)
 80046c4:	b2de      	uxtb	r6, r3
 80046c6:	f040 80a7 	bne.w	8004818 <HAL_SPI_Receive+0x166>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80046ca:	6843      	ldr	r3, [r0, #4]
 80046cc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80046d0:	d10e      	bne.n	80046f0 <HAL_SPI_Receive+0x3e>
 80046d2:	6883      	ldr	r3, [r0, #8]
 80046d4:	b963      	cbnz	r3, 80046f0 <HAL_SPI_Receive+0x3e>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80046d6:	2304      	movs	r3, #4
 80046d8:	f880 305d 	strb.w	r3, [r0, #93]	@ 0x5d
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80046dc:	4613      	mov	r3, r2
 80046de:	9700      	str	r7, [sp, #0]
 80046e0:	460a      	mov	r2, r1
 80046e2:	f7ff feb6 	bl	8004452 <HAL_SPI_TransmitReceive>
 80046e6:	4606      	mov	r6, r0
}
 80046e8:	4630      	mov	r0, r6
 80046ea:	b002      	add	sp, #8
 80046ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  __HAL_LOCK(hspi);
 80046f0:	f894 305c 	ldrb.w	r3, [r4, #92]	@ 0x5c
 80046f4:	2b01      	cmp	r3, #1
 80046f6:	f000 8091 	beq.w	800481c <HAL_SPI_Receive+0x16a>
 80046fa:	2301      	movs	r3, #1
 80046fc:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
  tickstart = HAL_GetTick();
 8004700:	f7fd ff68 	bl	80025d4 <HAL_GetTick>
 8004704:	4681      	mov	r9, r0
  if ((pData == NULL) || (Size == 0U))
 8004706:	f1ba 0f00 	cmp.w	sl, #0
 800470a:	d075      	beq.n	80047f8 <HAL_SPI_Receive+0x146>
 800470c:	f1b8 0f00 	cmp.w	r8, #0
 8004710:	d072      	beq.n	80047f8 <HAL_SPI_Receive+0x146>
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004712:	2500      	movs	r5, #0
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004714:	2304      	movs	r3, #4
 8004716:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
  hspi->TxISR       = NULL;
 800471a:	e9c4 5513 	strd	r5, r5, [r4, #76]	@ 0x4c
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800471e:	6625      	str	r5, [r4, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004720:	63a5      	str	r5, [r4, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8004722:	f8a4 8046 	strh.w	r8, [r4, #70]	@ 0x46
  hspi->TxXferSize  = 0U;
 8004726:	87a5      	strh	r5, [r4, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 8004728:	87e5      	strh	r5, [r4, #62]	@ 0x3e
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800472a:	6825      	ldr	r5, [r4, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800472c:	68e2      	ldr	r2, [r4, #12]
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800472e:	686b      	ldr	r3, [r5, #4]
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004730:	f8c4 a040 	str.w	sl, [r4, #64]	@ 0x40
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004734:	f5b2 6fe0 	cmp.w	r2, #1792	@ 0x700
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004738:	bf8c      	ite	hi
 800473a:	f423 5380 	bichi.w	r3, r3, #4096	@ 0x1000
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800473e:	f443 5380 	orrls.w	r3, r3, #4096	@ 0x1000
  hspi->RxXferSize  = Size;
 8004742:	f8a4 8044 	strh.w	r8, [r4, #68]	@ 0x44
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004746:	606b      	str	r3, [r5, #4]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004748:	68a3      	ldr	r3, [r4, #8]
 800474a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800474e:	d107      	bne.n	8004760 <HAL_SPI_Receive+0xae>
    __HAL_SPI_DISABLE(hspi);
 8004750:	682b      	ldr	r3, [r5, #0]
 8004752:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004756:	602b      	str	r3, [r5, #0]
    SPI_1LINE_RX(hspi);
 8004758:	682b      	ldr	r3, [r5, #0]
 800475a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800475e:	602b      	str	r3, [r5, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004760:	682b      	ldr	r3, [r5, #0]
 8004762:	065b      	lsls	r3, r3, #25
    __HAL_SPI_ENABLE(hspi);
 8004764:	bf5e      	ittt	pl
 8004766:	682b      	ldrpl	r3, [r5, #0]
 8004768:	f043 0340 	orrpl.w	r3, r3, #64	@ 0x40
 800476c:	602b      	strpl	r3, [r5, #0]
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800476e:	f5b2 6fe0 	cmp.w	r2, #1792	@ 0x700
 8004772:	d923      	bls.n	80047bc <HAL_SPI_Receive+0x10a>
    while (hspi->RxXferCount > 0U)
 8004774:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 8004778:	b29b      	uxth	r3, r3
 800477a:	b323      	cbz	r3, 80047c6 <HAL_SPI_Receive+0x114>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800477c:	6823      	ldr	r3, [r4, #0]
 800477e:	689a      	ldr	r2, [r3, #8]
 8004780:	07d2      	lsls	r2, r2, #31
 8004782:	d53d      	bpl.n	8004800 <HAL_SPI_Receive+0x14e>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004784:	68da      	ldr	r2, [r3, #12]
 8004786:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004788:	f823 2b02 	strh.w	r2, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800478c:	6423      	str	r3, [r4, #64]	@ 0x40
        hspi->RxXferCount--;
 800478e:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 8004792:	3b01      	subs	r3, #1
 8004794:	b29b      	uxth	r3, r3
 8004796:	f8a4 3046 	strh.w	r3, [r4, #70]	@ 0x46
 800479a:	e7eb      	b.n	8004774 <HAL_SPI_Receive+0xc2>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800479c:	6823      	ldr	r3, [r4, #0]
 800479e:	689a      	ldr	r2, [r3, #8]
 80047a0:	07d0      	lsls	r0, r2, #31
 80047a2:	d51d      	bpl.n	80047e0 <HAL_SPI_Receive+0x12e>
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80047a4:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 80047a6:	7b1b      	ldrb	r3, [r3, #12]
 80047a8:	7013      	strb	r3, [r2, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80047aa:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80047ac:	3301      	adds	r3, #1
 80047ae:	6423      	str	r3, [r4, #64]	@ 0x40
        hspi->RxXferCount--;
 80047b0:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 80047b4:	3b01      	subs	r3, #1
 80047b6:	b29b      	uxth	r3, r3
 80047b8:	f8a4 3046 	strh.w	r3, [r4, #70]	@ 0x46
    while (hspi->RxXferCount > 0U)
 80047bc:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 80047c0:	b29b      	uxth	r3, r3
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d1ea      	bne.n	800479c <HAL_SPI_Receive+0xea>
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80047c6:	464a      	mov	r2, r9
 80047c8:	4639      	mov	r1, r7
 80047ca:	4620      	mov	r0, r4
 80047cc:	f7ff fcb0 	bl	8004130 <SPI_EndRxTransaction>
 80047d0:	b9f8      	cbnz	r0, 8004812 <HAL_SPI_Receive+0x160>
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80047d2:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 80047d4:	b983      	cbnz	r3, 80047f8 <HAL_SPI_Receive+0x146>
    hspi->State = HAL_SPI_STATE_READY;
 80047d6:	2201      	movs	r2, #1
 80047d8:	f884 205d 	strb.w	r2, [r4, #93]	@ 0x5d
  HAL_StatusTypeDef errorcode = HAL_OK;
 80047dc:	461e      	mov	r6, r3
 80047de:	e00b      	b.n	80047f8 <HAL_SPI_Receive+0x146>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80047e0:	f7fd fef8 	bl	80025d4 <HAL_GetTick>
 80047e4:	eba0 0009 	sub.w	r0, r0, r9
 80047e8:	42b8      	cmp	r0, r7
 80047ea:	d3e7      	bcc.n	80047bc <HAL_SPI_Receive+0x10a>
 80047ec:	1c79      	adds	r1, r7, #1
 80047ee:	d0e5      	beq.n	80047bc <HAL_SPI_Receive+0x10a>
          hspi->State = HAL_SPI_STATE_READY;
 80047f0:	2301      	movs	r3, #1
 80047f2:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
          errorcode = HAL_TIMEOUT;
 80047f6:	2603      	movs	r6, #3
  __HAL_UNLOCK(hspi);
 80047f8:	2300      	movs	r3, #0
 80047fa:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
  return errorcode;
 80047fe:	e773      	b.n	80046e8 <HAL_SPI_Receive+0x36>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004800:	f7fd fee8 	bl	80025d4 <HAL_GetTick>
 8004804:	eba0 0009 	sub.w	r0, r0, r9
 8004808:	42b8      	cmp	r0, r7
 800480a:	d3b3      	bcc.n	8004774 <HAL_SPI_Receive+0xc2>
 800480c:	1c7b      	adds	r3, r7, #1
 800480e:	d0b1      	beq.n	8004774 <HAL_SPI_Receive+0xc2>
 8004810:	e7ee      	b.n	80047f0 <HAL_SPI_Receive+0x13e>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004812:	2320      	movs	r3, #32
 8004814:	6623      	str	r3, [r4, #96]	@ 0x60
 8004816:	e7dc      	b.n	80047d2 <HAL_SPI_Receive+0x120>
    errorcode = HAL_BUSY;
 8004818:	2602      	movs	r6, #2
 800481a:	e7ed      	b.n	80047f8 <HAL_SPI_Receive+0x146>
  __HAL_LOCK(hspi);
 800481c:	2602      	movs	r6, #2
 800481e:	e763      	b.n	80046e8 <HAL_SPI_Receive+0x36>

08004820 <HAL_TIM_Base_Start_IT>:
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
<<<<<<< HEAD
 8006984:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8006988:	2b01      	cmp	r3, #1
 800698a:	d127      	bne.n	80069dc <HAL_TIM_Base_Start+0x58>
=======
 8004820:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8004824:	2b01      	cmp	r3, #1
 8004826:	d12b      	bne.n	8004880 <HAL_TIM_Base_Start_IT+0x60>
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
<<<<<<< HEAD
 800698c:	2302      	movs	r3, #2

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800698e:	4a14      	ldr	r2, [pc, #80]	@ (80069e0 <HAL_TIM_Base_Start+0x5c>)
  htim->State = HAL_TIM_STATE_BUSY;
 8006990:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006994:	6803      	ldr	r3, [r0, #0]
 8006996:	4293      	cmp	r3, r2
 8006998:	d012      	beq.n	80069c0 <HAL_TIM_Base_Start+0x3c>
 800699a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800699e:	d00f      	beq.n	80069c0 <HAL_TIM_Base_Start+0x3c>
 80069a0:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 80069a4:	4293      	cmp	r3, r2
 80069a6:	d00b      	beq.n	80069c0 <HAL_TIM_Base_Start+0x3c>
 80069a8:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80069ac:	4293      	cmp	r3, r2
 80069ae:	d007      	beq.n	80069c0 <HAL_TIM_Base_Start+0x3c>
 80069b0:	f502 3296 	add.w	r2, r2, #76800	@ 0x12c00
 80069b4:	4293      	cmp	r3, r2
 80069b6:	d003      	beq.n	80069c0 <HAL_TIM_Base_Start+0x3c>
 80069b8:	f502 6240 	add.w	r2, r2, #3072	@ 0xc00
 80069bc:	4293      	cmp	r3, r2
 80069be:	d107      	bne.n	80069d0 <HAL_TIM_Base_Start+0x4c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80069c0:	6899      	ldr	r1, [r3, #8]
 80069c2:	4a08      	ldr	r2, [pc, #32]	@ (80069e4 <HAL_TIM_Base_Start+0x60>)
 80069c4:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80069c6:	2a06      	cmp	r2, #6
 80069c8:	d006      	beq.n	80069d8 <HAL_TIM_Base_Start+0x54>
 80069ca:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 80069ce:	d003      	beq.n	80069d8 <HAL_TIM_Base_Start+0x54>
    {
      __HAL_TIM_ENABLE(htim);
 80069d0:	681a      	ldr	r2, [r3, #0]
 80069d2:	f042 0201 	orr.w	r2, r2, #1
 80069d6:	601a      	str	r2, [r3, #0]
=======
 8004828:	2302      	movs	r3, #2
 800482a:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800482e:	6803      	ldr	r3, [r0, #0]
 8004830:	68da      	ldr	r2, [r3, #12]
 8004832:	f042 0201 	orr.w	r2, r2, #1
 8004836:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004838:	4a12      	ldr	r2, [pc, #72]	@ (8004884 <HAL_TIM_Base_Start_IT+0x64>)
 800483a:	4293      	cmp	r3, r2
 800483c:	d012      	beq.n	8004864 <HAL_TIM_Base_Start_IT+0x44>
 800483e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004842:	d00f      	beq.n	8004864 <HAL_TIM_Base_Start_IT+0x44>
 8004844:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 8004848:	4293      	cmp	r3, r2
 800484a:	d00b      	beq.n	8004864 <HAL_TIM_Base_Start_IT+0x44>
 800484c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8004850:	4293      	cmp	r3, r2
 8004852:	d007      	beq.n	8004864 <HAL_TIM_Base_Start_IT+0x44>
 8004854:	f502 3296 	add.w	r2, r2, #76800	@ 0x12c00
 8004858:	4293      	cmp	r3, r2
 800485a:	d003      	beq.n	8004864 <HAL_TIM_Base_Start_IT+0x44>
 800485c:	f502 6240 	add.w	r2, r2, #3072	@ 0xc00
 8004860:	4293      	cmp	r3, r2
 8004862:	d107      	bne.n	8004874 <HAL_TIM_Base_Start_IT+0x54>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004864:	6899      	ldr	r1, [r3, #8]
 8004866:	4a08      	ldr	r2, [pc, #32]	@ (8004888 <HAL_TIM_Base_Start_IT+0x68>)
 8004868:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800486a:	2a06      	cmp	r2, #6
 800486c:	d006      	beq.n	800487c <HAL_TIM_Base_Start_IT+0x5c>
 800486e:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 8004872:	d003      	beq.n	800487c <HAL_TIM_Base_Start_IT+0x5c>
    {
      __HAL_TIM_ENABLE(htim);
 8004874:	681a      	ldr	r2, [r3, #0]
 8004876:	f042 0201 	orr.w	r2, r2, #1
 800487a:	601a      	str	r2, [r3, #0]
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
  {
    __HAL_TIM_ENABLE(htim);
  }

  /* Return function status */
  return HAL_OK;
<<<<<<< HEAD
 80069d8:	2000      	movs	r0, #0
 80069da:	4770      	bx	lr
    return HAL_ERROR;
 80069dc:	2001      	movs	r0, #1
}
 80069de:	4770      	bx	lr
 80069e0:	40012c00 	.word	0x40012c00
 80069e4:	00010007 	.word	0x00010007

080069e8 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80069e8:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 80069ec:	2b01      	cmp	r3, #1
 80069ee:	d12b      	bne.n	8006a48 <HAL_TIM_Base_Start_IT+0x60>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80069f0:	2302      	movs	r3, #2
 80069f2:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80069f6:	6803      	ldr	r3, [r0, #0]
 80069f8:	68da      	ldr	r2, [r3, #12]
 80069fa:	f042 0201 	orr.w	r2, r2, #1
 80069fe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006a00:	4a12      	ldr	r2, [pc, #72]	@ (8006a4c <HAL_TIM_Base_Start_IT+0x64>)
 8006a02:	4293      	cmp	r3, r2
 8006a04:	d012      	beq.n	8006a2c <HAL_TIM_Base_Start_IT+0x44>
 8006a06:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006a0a:	d00f      	beq.n	8006a2c <HAL_TIM_Base_Start_IT+0x44>
 8006a0c:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 8006a10:	4293      	cmp	r3, r2
 8006a12:	d00b      	beq.n	8006a2c <HAL_TIM_Base_Start_IT+0x44>
 8006a14:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006a18:	4293      	cmp	r3, r2
 8006a1a:	d007      	beq.n	8006a2c <HAL_TIM_Base_Start_IT+0x44>
 8006a1c:	f502 3296 	add.w	r2, r2, #76800	@ 0x12c00
 8006a20:	4293      	cmp	r3, r2
 8006a22:	d003      	beq.n	8006a2c <HAL_TIM_Base_Start_IT+0x44>
 8006a24:	f502 6240 	add.w	r2, r2, #3072	@ 0xc00
 8006a28:	4293      	cmp	r3, r2
 8006a2a:	d107      	bne.n	8006a3c <HAL_TIM_Base_Start_IT+0x54>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006a2c:	6899      	ldr	r1, [r3, #8]
 8006a2e:	4a08      	ldr	r2, [pc, #32]	@ (8006a50 <HAL_TIM_Base_Start_IT+0x68>)
 8006a30:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a32:	2a06      	cmp	r2, #6
 8006a34:	d006      	beq.n	8006a44 <HAL_TIM_Base_Start_IT+0x5c>
 8006a36:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 8006a3a:	d003      	beq.n	8006a44 <HAL_TIM_Base_Start_IT+0x5c>
    {
      __HAL_TIM_ENABLE(htim);
 8006a3c:	681a      	ldr	r2, [r3, #0]
 8006a3e:	f042 0201 	orr.w	r2, r2, #1
 8006a42:	601a      	str	r2, [r3, #0]
  {
    __HAL_TIM_ENABLE(htim);
  }

  /* Return function status */
  return HAL_OK;
 8006a44:	2000      	movs	r0, #0
 8006a46:	4770      	bx	lr
    return HAL_ERROR;
 8006a48:	2001      	movs	r0, #1
}
 8006a4a:	4770      	bx	lr
 8006a4c:	40012c00 	.word	0x40012c00
 8006a50:	00010007 	.word	0x00010007

08006a54 <HAL_TIM_OC_DelayElapsedCallback>:
=======
 800487c:	2000      	movs	r0, #0
 800487e:	4770      	bx	lr
    return HAL_ERROR;
 8004880:	2001      	movs	r0, #1
}
 8004882:	4770      	bx	lr
 8004884:	40012c00 	.word	0x40012c00
 8004888:	00010007 	.word	0x00010007

0800488c <HAL_TIM_OC_DelayElapsedCallback>:
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
/**
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
<<<<<<< HEAD
 8006a54:	4770      	bx	lr

08006a56 <HAL_TIM_IC_CaptureCallback>:
=======
 800488c:	4770      	bx	lr

0800488e <HAL_TIM_IC_CaptureCallback>:
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
/**
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
<<<<<<< HEAD
 8006a56:	4770      	bx	lr

08006a58 <HAL_TIM_PWM_PulseFinishedCallback>:
=======
 800488e:	4770      	bx	lr

08004890 <HAL_TIM_PWM_PulseFinishedCallback>:
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
/**
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
<<<<<<< HEAD
 8006a58:	4770      	bx	lr

08006a5a <HAL_TIM_TriggerCallback>:
=======
 8004890:	4770      	bx	lr

08004892 <HAL_TIM_TriggerCallback>:
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
/**
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
<<<<<<< HEAD
 8006a5a:	4770      	bx	lr

08006a5c <HAL_TIM_IRQHandler>:
  uint32_t itsource = htim->Instance->DIER;
 8006a5c:	6803      	ldr	r3, [r0, #0]
{
 8006a5e:	b570      	push	{r4, r5, r6, lr}
  uint32_t itsource = htim->Instance->DIER;
 8006a60:	68dd      	ldr	r5, [r3, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006a62:	691e      	ldr	r6, [r3, #16]
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006a64:	07b2      	lsls	r2, r6, #30
{
 8006a66:	4604      	mov	r4, r0
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006a68:	d50d      	bpl.n	8006a86 <HAL_TIM_IRQHandler+0x2a>
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006a6a:	07a9      	lsls	r1, r5, #30
 8006a6c:	d50b      	bpl.n	8006a86 <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006a6e:	f06f 0202 	mvn.w	r2, #2
 8006a72:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006a74:	2201      	movs	r2, #1
 8006a76:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006a78:	699b      	ldr	r3, [r3, #24]
 8006a7a:	079a      	lsls	r2, r3, #30
 8006a7c:	d074      	beq.n	8006b68 <HAL_TIM_IRQHandler+0x10c>
          HAL_TIM_IC_CaptureCallback(htim);
 8006a7e:	f7ff ffea 	bl	8006a56 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a82:	2300      	movs	r3, #0
 8006a84:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006a86:	0773      	lsls	r3, r6, #29
 8006a88:	d510      	bpl.n	8006aac <HAL_TIM_IRQHandler+0x50>
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006a8a:	0768      	lsls	r0, r5, #29
 8006a8c:	d50e      	bpl.n	8006aac <HAL_TIM_IRQHandler+0x50>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006a8e:	6823      	ldr	r3, [r4, #0]
 8006a90:	f06f 0204 	mvn.w	r2, #4
 8006a94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006a96:	2202      	movs	r2, #2
 8006a98:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006a9a:	699b      	ldr	r3, [r3, #24]
 8006a9c:	f413 7f40 	tst.w	r3, #768	@ 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8006aa0:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006aa2:	d067      	beq.n	8006b74 <HAL_TIM_IRQHandler+0x118>
        HAL_TIM_IC_CaptureCallback(htim);
 8006aa4:	f7ff ffd7 	bl	8006a56 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006aa8:	2300      	movs	r3, #0
 8006aaa:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006aac:	0731      	lsls	r1, r6, #28
 8006aae:	d50f      	bpl.n	8006ad0 <HAL_TIM_IRQHandler+0x74>
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006ab0:	072a      	lsls	r2, r5, #28
 8006ab2:	d50d      	bpl.n	8006ad0 <HAL_TIM_IRQHandler+0x74>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006ab4:	6823      	ldr	r3, [r4, #0]
 8006ab6:	f06f 0208 	mvn.w	r2, #8
 8006aba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006abc:	2204      	movs	r2, #4
 8006abe:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006ac0:	69db      	ldr	r3, [r3, #28]
 8006ac2:	079b      	lsls	r3, r3, #30
        HAL_TIM_IC_CaptureCallback(htim);
 8006ac4:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006ac6:	d05b      	beq.n	8006b80 <HAL_TIM_IRQHandler+0x124>
        HAL_TIM_IC_CaptureCallback(htim);
 8006ac8:	f7ff ffc5 	bl	8006a56 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006acc:	2300      	movs	r3, #0
 8006ace:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006ad0:	06f0      	lsls	r0, r6, #27
 8006ad2:	d510      	bpl.n	8006af6 <HAL_TIM_IRQHandler+0x9a>
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006ad4:	06e9      	lsls	r1, r5, #27
 8006ad6:	d50e      	bpl.n	8006af6 <HAL_TIM_IRQHandler+0x9a>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006ad8:	6823      	ldr	r3, [r4, #0]
 8006ada:	f06f 0210 	mvn.w	r2, #16
 8006ade:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006ae0:	2208      	movs	r2, #8
 8006ae2:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006ae4:	69db      	ldr	r3, [r3, #28]
 8006ae6:	f413 7f40 	tst.w	r3, #768	@ 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8006aea:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006aec:	d04e      	beq.n	8006b8c <HAL_TIM_IRQHandler+0x130>
        HAL_TIM_IC_CaptureCallback(htim);
 8006aee:	f7ff ffb2 	bl	8006a56 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006af2:	2300      	movs	r3, #0
 8006af4:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006af6:	07f2      	lsls	r2, r6, #31
 8006af8:	d508      	bpl.n	8006b0c <HAL_TIM_IRQHandler+0xb0>
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006afa:	07eb      	lsls	r3, r5, #31
 8006afc:	d506      	bpl.n	8006b0c <HAL_TIM_IRQHandler+0xb0>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006afe:	6823      	ldr	r3, [r4, #0]
 8006b00:	f06f 0201 	mvn.w	r2, #1
 8006b04:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8006b06:	4620      	mov	r0, r4
 8006b08:	f7fc fcae 	bl	8003468 <HAL_TIM_PeriodElapsedCallback>
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8006b0c:	0630      	lsls	r0, r6, #24
 8006b0e:	d508      	bpl.n	8006b22 <HAL_TIM_IRQHandler+0xc6>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006b10:	0629      	lsls	r1, r5, #24
 8006b12:	d506      	bpl.n	8006b22 <HAL_TIM_IRQHandler+0xc6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8006b14:	6823      	ldr	r3, [r4, #0]
 8006b16:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8006b1a:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8006b1c:	4620      	mov	r0, r4
 8006b1e:	f000 f9b8 	bl	8006e92 <HAL_TIMEx_BreakCallback>
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8006b22:	05f2      	lsls	r2, r6, #23
 8006b24:	d508      	bpl.n	8006b38 <HAL_TIM_IRQHandler+0xdc>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006b26:	062b      	lsls	r3, r5, #24
 8006b28:	d506      	bpl.n	8006b38 <HAL_TIM_IRQHandler+0xdc>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006b2a:	6823      	ldr	r3, [r4, #0]
 8006b2c:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8006b30:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8006b32:	4620      	mov	r0, r4
 8006b34:	f000 f9ae 	bl	8006e94 <HAL_TIMEx_Break2Callback>
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006b38:	0670      	lsls	r0, r6, #25
 8006b3a:	d508      	bpl.n	8006b4e <HAL_TIM_IRQHandler+0xf2>
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006b3c:	0669      	lsls	r1, r5, #25
 8006b3e:	d506      	bpl.n	8006b4e <HAL_TIM_IRQHandler+0xf2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006b40:	6823      	ldr	r3, [r4, #0]
 8006b42:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006b46:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8006b48:	4620      	mov	r0, r4
 8006b4a:	f7ff ff86 	bl	8006a5a <HAL_TIM_TriggerCallback>
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006b4e:	06b2      	lsls	r2, r6, #26
 8006b50:	d522      	bpl.n	8006b98 <HAL_TIM_IRQHandler+0x13c>
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006b52:	06ab      	lsls	r3, r5, #26
 8006b54:	d520      	bpl.n	8006b98 <HAL_TIM_IRQHandler+0x13c>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006b56:	6823      	ldr	r3, [r4, #0]
 8006b58:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 8006b5c:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006b5e:	611a      	str	r2, [r3, #16]
}
 8006b60:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      HAL_TIMEx_CommutCallback(htim);
 8006b64:	f000 b994 	b.w	8006e90 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b68:	f7ff ff74 	bl	8006a54 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b6c:	4620      	mov	r0, r4
 8006b6e:	f7ff ff73 	bl	8006a58 <HAL_TIM_PWM_PulseFinishedCallback>
 8006b72:	e786      	b.n	8006a82 <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b74:	f7ff ff6e 	bl	8006a54 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b78:	4620      	mov	r0, r4
 8006b7a:	f7ff ff6d 	bl	8006a58 <HAL_TIM_PWM_PulseFinishedCallback>
 8006b7e:	e793      	b.n	8006aa8 <HAL_TIM_IRQHandler+0x4c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b80:	f7ff ff68 	bl	8006a54 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b84:	4620      	mov	r0, r4
 8006b86:	f7ff ff67 	bl	8006a58 <HAL_TIM_PWM_PulseFinishedCallback>
 8006b8a:	e79f      	b.n	8006acc <HAL_TIM_IRQHandler+0x70>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b8c:	f7ff ff62 	bl	8006a54 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b90:	4620      	mov	r0, r4
 8006b92:	f7ff ff61 	bl	8006a58 <HAL_TIM_PWM_PulseFinishedCallback>
 8006b96:	e7ac      	b.n	8006af2 <HAL_TIM_IRQHandler+0x96>
}
 8006b98:	bd70      	pop	{r4, r5, r6, pc}
	...

08006b9c <TIM_Base_SetConfig>:
=======
 8004892:	4770      	bx	lr

08004894 <HAL_TIM_IRQHandler>:
  uint32_t itsource = htim->Instance->DIER;
 8004894:	6803      	ldr	r3, [r0, #0]
{
 8004896:	b570      	push	{r4, r5, r6, lr}
  uint32_t itsource = htim->Instance->DIER;
 8004898:	68dd      	ldr	r5, [r3, #12]
  uint32_t itflag   = htim->Instance->SR;
 800489a:	691e      	ldr	r6, [r3, #16]
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800489c:	07b2      	lsls	r2, r6, #30
{
 800489e:	4604      	mov	r4, r0
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80048a0:	d50d      	bpl.n	80048be <HAL_TIM_IRQHandler+0x2a>
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80048a2:	07a9      	lsls	r1, r5, #30
 80048a4:	d50b      	bpl.n	80048be <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80048a6:	f06f 0202 	mvn.w	r2, #2
 80048aa:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80048ac:	2201      	movs	r2, #1
 80048ae:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80048b0:	699b      	ldr	r3, [r3, #24]
 80048b2:	079a      	lsls	r2, r3, #30
 80048b4:	d074      	beq.n	80049a0 <HAL_TIM_IRQHandler+0x10c>
          HAL_TIM_IC_CaptureCallback(htim);
 80048b6:	f7ff ffea 	bl	800488e <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048ba:	2300      	movs	r3, #0
 80048bc:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80048be:	0773      	lsls	r3, r6, #29
 80048c0:	d510      	bpl.n	80048e4 <HAL_TIM_IRQHandler+0x50>
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80048c2:	0768      	lsls	r0, r5, #29
 80048c4:	d50e      	bpl.n	80048e4 <HAL_TIM_IRQHandler+0x50>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80048c6:	6823      	ldr	r3, [r4, #0]
 80048c8:	f06f 0204 	mvn.w	r2, #4
 80048cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80048ce:	2202      	movs	r2, #2
 80048d0:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80048d2:	699b      	ldr	r3, [r3, #24]
 80048d4:	f413 7f40 	tst.w	r3, #768	@ 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 80048d8:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80048da:	d067      	beq.n	80049ac <HAL_TIM_IRQHandler+0x118>
        HAL_TIM_IC_CaptureCallback(htim);
 80048dc:	f7ff ffd7 	bl	800488e <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048e0:	2300      	movs	r3, #0
 80048e2:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80048e4:	0731      	lsls	r1, r6, #28
 80048e6:	d50f      	bpl.n	8004908 <HAL_TIM_IRQHandler+0x74>
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80048e8:	072a      	lsls	r2, r5, #28
 80048ea:	d50d      	bpl.n	8004908 <HAL_TIM_IRQHandler+0x74>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80048ec:	6823      	ldr	r3, [r4, #0]
 80048ee:	f06f 0208 	mvn.w	r2, #8
 80048f2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80048f4:	2204      	movs	r2, #4
 80048f6:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80048f8:	69db      	ldr	r3, [r3, #28]
 80048fa:	079b      	lsls	r3, r3, #30
        HAL_TIM_IC_CaptureCallback(htim);
 80048fc:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80048fe:	d05b      	beq.n	80049b8 <HAL_TIM_IRQHandler+0x124>
        HAL_TIM_IC_CaptureCallback(htim);
 8004900:	f7ff ffc5 	bl	800488e <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004904:	2300      	movs	r3, #0
 8004906:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004908:	06f0      	lsls	r0, r6, #27
 800490a:	d510      	bpl.n	800492e <HAL_TIM_IRQHandler+0x9a>
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800490c:	06e9      	lsls	r1, r5, #27
 800490e:	d50e      	bpl.n	800492e <HAL_TIM_IRQHandler+0x9a>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004910:	6823      	ldr	r3, [r4, #0]
 8004912:	f06f 0210 	mvn.w	r2, #16
 8004916:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004918:	2208      	movs	r2, #8
 800491a:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800491c:	69db      	ldr	r3, [r3, #28]
 800491e:	f413 7f40 	tst.w	r3, #768	@ 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8004922:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004924:	d04e      	beq.n	80049c4 <HAL_TIM_IRQHandler+0x130>
        HAL_TIM_IC_CaptureCallback(htim);
 8004926:	f7ff ffb2 	bl	800488e <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800492a:	2300      	movs	r3, #0
 800492c:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800492e:	07f2      	lsls	r2, r6, #31
 8004930:	d508      	bpl.n	8004944 <HAL_TIM_IRQHandler+0xb0>
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004932:	07eb      	lsls	r3, r5, #31
 8004934:	d506      	bpl.n	8004944 <HAL_TIM_IRQHandler+0xb0>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004936:	6823      	ldr	r3, [r4, #0]
 8004938:	f06f 0201 	mvn.w	r2, #1
 800493c:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800493e:	4620      	mov	r0, r4
 8004940:	f7fc fdfc 	bl	800153c <HAL_TIM_PeriodElapsedCallback>
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004944:	0630      	lsls	r0, r6, #24
 8004946:	d508      	bpl.n	800495a <HAL_TIM_IRQHandler+0xc6>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004948:	0629      	lsls	r1, r5, #24
 800494a:	d506      	bpl.n	800495a <HAL_TIM_IRQHandler+0xc6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800494c:	6823      	ldr	r3, [r4, #0]
 800494e:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004952:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8004954:	4620      	mov	r0, r4
 8004956:	f000 f9b8 	bl	8004cca <HAL_TIMEx_BreakCallback>
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800495a:	05f2      	lsls	r2, r6, #23
 800495c:	d508      	bpl.n	8004970 <HAL_TIM_IRQHandler+0xdc>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800495e:	062b      	lsls	r3, r5, #24
 8004960:	d506      	bpl.n	8004970 <HAL_TIM_IRQHandler+0xdc>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004962:	6823      	ldr	r3, [r4, #0]
 8004964:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8004968:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 800496a:	4620      	mov	r0, r4
 800496c:	f000 f9ae 	bl	8004ccc <HAL_TIMEx_Break2Callback>
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004970:	0670      	lsls	r0, r6, #25
 8004972:	d508      	bpl.n	8004986 <HAL_TIM_IRQHandler+0xf2>
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004974:	0669      	lsls	r1, r5, #25
 8004976:	d506      	bpl.n	8004986 <HAL_TIM_IRQHandler+0xf2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004978:	6823      	ldr	r3, [r4, #0]
 800497a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800497e:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8004980:	4620      	mov	r0, r4
 8004982:	f7ff ff86 	bl	8004892 <HAL_TIM_TriggerCallback>
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004986:	06b2      	lsls	r2, r6, #26
 8004988:	d522      	bpl.n	80049d0 <HAL_TIM_IRQHandler+0x13c>
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800498a:	06ab      	lsls	r3, r5, #26
 800498c:	d520      	bpl.n	80049d0 <HAL_TIM_IRQHandler+0x13c>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800498e:	6823      	ldr	r3, [r4, #0]
 8004990:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 8004994:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004996:	611a      	str	r2, [r3, #16]
}
 8004998:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      HAL_TIMEx_CommutCallback(htim);
 800499c:	f000 b994 	b.w	8004cc8 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80049a0:	f7ff ff74 	bl	800488c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049a4:	4620      	mov	r0, r4
 80049a6:	f7ff ff73 	bl	8004890 <HAL_TIM_PWM_PulseFinishedCallback>
 80049aa:	e786      	b.n	80048ba <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049ac:	f7ff ff6e 	bl	800488c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049b0:	4620      	mov	r0, r4
 80049b2:	f7ff ff6d 	bl	8004890 <HAL_TIM_PWM_PulseFinishedCallback>
 80049b6:	e793      	b.n	80048e0 <HAL_TIM_IRQHandler+0x4c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049b8:	f7ff ff68 	bl	800488c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049bc:	4620      	mov	r0, r4
 80049be:	f7ff ff67 	bl	8004890 <HAL_TIM_PWM_PulseFinishedCallback>
 80049c2:	e79f      	b.n	8004904 <HAL_TIM_IRQHandler+0x70>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049c4:	f7ff ff62 	bl	800488c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049c8:	4620      	mov	r0, r4
 80049ca:	f7ff ff61 	bl	8004890 <HAL_TIM_PWM_PulseFinishedCallback>
 80049ce:	e7ac      	b.n	800492a <HAL_TIM_IRQHandler+0x96>
}
 80049d0:	bd70      	pop	{r4, r5, r6, pc}
	...

080049d4 <TIM_Base_SetConfig>:
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
<<<<<<< HEAD
 8006b9c:	4a2f      	ldr	r2, [pc, #188]	@ (8006c5c <TIM_Base_SetConfig+0xc0>)
  tmpcr1 = TIMx->CR1;
 8006b9e:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006ba0:	4290      	cmp	r0, r2
 8006ba2:	d00e      	beq.n	8006bc2 <TIM_Base_SetConfig+0x26>
 8006ba4:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8006ba8:	d00b      	beq.n	8006bc2 <TIM_Base_SetConfig+0x26>
 8006baa:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 8006bae:	4290      	cmp	r0, r2
 8006bb0:	d007      	beq.n	8006bc2 <TIM_Base_SetConfig+0x26>
 8006bb2:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006bb6:	4290      	cmp	r0, r2
 8006bb8:	d003      	beq.n	8006bc2 <TIM_Base_SetConfig+0x26>
 8006bba:	f502 3296 	add.w	r2, r2, #76800	@ 0x12c00
 8006bbe:	4290      	cmp	r0, r2
 8006bc0:	d115      	bne.n	8006bee <TIM_Base_SetConfig+0x52>
=======
 80049d4:	4a2f      	ldr	r2, [pc, #188]	@ (8004a94 <TIM_Base_SetConfig+0xc0>)
  tmpcr1 = TIMx->CR1;
 80049d6:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80049d8:	4290      	cmp	r0, r2
 80049da:	d00e      	beq.n	80049fa <TIM_Base_SetConfig+0x26>
 80049dc:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 80049e0:	d00b      	beq.n	80049fa <TIM_Base_SetConfig+0x26>
 80049e2:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 80049e6:	4290      	cmp	r0, r2
 80049e8:	d007      	beq.n	80049fa <TIM_Base_SetConfig+0x26>
 80049ea:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80049ee:	4290      	cmp	r0, r2
 80049f0:	d003      	beq.n	80049fa <TIM_Base_SetConfig+0x26>
 80049f2:	f502 3296 	add.w	r2, r2, #76800	@ 0x12c00
 80049f6:	4290      	cmp	r0, r2
 80049f8:	d115      	bne.n	8004a26 <TIM_Base_SetConfig+0x52>
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
<<<<<<< HEAD
 8006bc2:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006bc4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8006bc8:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006bca:	4a24      	ldr	r2, [pc, #144]	@ (8006c5c <TIM_Base_SetConfig+0xc0>)
 8006bcc:	4290      	cmp	r0, r2
 8006bce:	d019      	beq.n	8006c04 <TIM_Base_SetConfig+0x68>
 8006bd0:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8006bd4:	d016      	beq.n	8006c04 <TIM_Base_SetConfig+0x68>
 8006bd6:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 8006bda:	4290      	cmp	r0, r2
 8006bdc:	d012      	beq.n	8006c04 <TIM_Base_SetConfig+0x68>
 8006bde:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006be2:	4290      	cmp	r0, r2
 8006be4:	d00e      	beq.n	8006c04 <TIM_Base_SetConfig+0x68>
 8006be6:	f502 3296 	add.w	r2, r2, #76800	@ 0x12c00
 8006bea:	4290      	cmp	r0, r2
 8006bec:	d00a      	beq.n	8006c04 <TIM_Base_SetConfig+0x68>
 8006bee:	4a1c      	ldr	r2, [pc, #112]	@ (8006c60 <TIM_Base_SetConfig+0xc4>)
 8006bf0:	4290      	cmp	r0, r2
 8006bf2:	d007      	beq.n	8006c04 <TIM_Base_SetConfig+0x68>
 8006bf4:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006bf8:	4290      	cmp	r0, r2
 8006bfa:	d003      	beq.n	8006c04 <TIM_Base_SetConfig+0x68>
 8006bfc:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006c00:	4290      	cmp	r0, r2
 8006c02:	d103      	bne.n	8006c0c <TIM_Base_SetConfig+0x70>
=======
 80049fa:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80049fc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8004a00:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004a02:	4a24      	ldr	r2, [pc, #144]	@ (8004a94 <TIM_Base_SetConfig+0xc0>)
 8004a04:	4290      	cmp	r0, r2
 8004a06:	d019      	beq.n	8004a3c <TIM_Base_SetConfig+0x68>
 8004a08:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8004a0c:	d016      	beq.n	8004a3c <TIM_Base_SetConfig+0x68>
 8004a0e:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 8004a12:	4290      	cmp	r0, r2
 8004a14:	d012      	beq.n	8004a3c <TIM_Base_SetConfig+0x68>
 8004a16:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8004a1a:	4290      	cmp	r0, r2
 8004a1c:	d00e      	beq.n	8004a3c <TIM_Base_SetConfig+0x68>
 8004a1e:	f502 3296 	add.w	r2, r2, #76800	@ 0x12c00
 8004a22:	4290      	cmp	r0, r2
 8004a24:	d00a      	beq.n	8004a3c <TIM_Base_SetConfig+0x68>
 8004a26:	4a1c      	ldr	r2, [pc, #112]	@ (8004a98 <TIM_Base_SetConfig+0xc4>)
 8004a28:	4290      	cmp	r0, r2
 8004a2a:	d007      	beq.n	8004a3c <TIM_Base_SetConfig+0x68>
 8004a2c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8004a30:	4290      	cmp	r0, r2
 8004a32:	d003      	beq.n	8004a3c <TIM_Base_SetConfig+0x68>
 8004a34:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8004a38:	4290      	cmp	r0, r2
 8004a3a:	d103      	bne.n	8004a44 <TIM_Base_SetConfig+0x70>
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
<<<<<<< HEAD
 8006c04:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8006c06:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006c0a:	4313      	orrs	r3, r2
=======
 8004a3c:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8004a3e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004a42:	4313      	orrs	r3, r2
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
<<<<<<< HEAD
 8006c0c:	694a      	ldr	r2, [r1, #20]
 8006c0e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006c12:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8006c14:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006c16:	688b      	ldr	r3, [r1, #8]
 8006c18:	62c3      	str	r3, [r0, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006c1a:	680b      	ldr	r3, [r1, #0]
 8006c1c:	6283      	str	r3, [r0, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006c1e:	4b0f      	ldr	r3, [pc, #60]	@ (8006c5c <TIM_Base_SetConfig+0xc0>)
 8006c20:	4298      	cmp	r0, r3
 8006c22:	d00f      	beq.n	8006c44 <TIM_Base_SetConfig+0xa8>
 8006c24:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006c28:	4298      	cmp	r0, r3
 8006c2a:	d00b      	beq.n	8006c44 <TIM_Base_SetConfig+0xa8>
 8006c2c:	f503 6340 	add.w	r3, r3, #3072	@ 0xc00
 8006c30:	4298      	cmp	r0, r3
 8006c32:	d007      	beq.n	8006c44 <TIM_Base_SetConfig+0xa8>
 8006c34:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006c38:	4298      	cmp	r0, r3
 8006c3a:	d003      	beq.n	8006c44 <TIM_Base_SetConfig+0xa8>
 8006c3c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006c40:	4298      	cmp	r0, r3
 8006c42:	d101      	bne.n	8006c48 <TIM_Base_SetConfig+0xac>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006c44:	690b      	ldr	r3, [r1, #16]
 8006c46:	6303      	str	r3, [r0, #48]	@ 0x30
=======
 8004a44:	694a      	ldr	r2, [r1, #20]
 8004a46:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004a4a:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8004a4c:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004a4e:	688b      	ldr	r3, [r1, #8]
 8004a50:	62c3      	str	r3, [r0, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004a52:	680b      	ldr	r3, [r1, #0]
 8004a54:	6283      	str	r3, [r0, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004a56:	4b0f      	ldr	r3, [pc, #60]	@ (8004a94 <TIM_Base_SetConfig+0xc0>)
 8004a58:	4298      	cmp	r0, r3
 8004a5a:	d00f      	beq.n	8004a7c <TIM_Base_SetConfig+0xa8>
 8004a5c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004a60:	4298      	cmp	r0, r3
 8004a62:	d00b      	beq.n	8004a7c <TIM_Base_SetConfig+0xa8>
 8004a64:	f503 6340 	add.w	r3, r3, #3072	@ 0xc00
 8004a68:	4298      	cmp	r0, r3
 8004a6a:	d007      	beq.n	8004a7c <TIM_Base_SetConfig+0xa8>
 8004a6c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004a70:	4298      	cmp	r0, r3
 8004a72:	d003      	beq.n	8004a7c <TIM_Base_SetConfig+0xa8>
 8004a74:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004a78:	4298      	cmp	r0, r3
 8004a7a:	d101      	bne.n	8004a80 <TIM_Base_SetConfig+0xac>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004a7c:	690b      	ldr	r3, [r1, #16]
 8004a7e:	6303      	str	r3, [r0, #48]	@ 0x30
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
<<<<<<< HEAD
 8006c48:	2301      	movs	r3, #1
 8006c4a:	6143      	str	r3, [r0, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006c4c:	6903      	ldr	r3, [r0, #16]
 8006c4e:	07db      	lsls	r3, r3, #31
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006c50:	bf42      	ittt	mi
 8006c52:	6903      	ldrmi	r3, [r0, #16]
 8006c54:	f023 0301 	bicmi.w	r3, r3, #1
 8006c58:	6103      	strmi	r3, [r0, #16]
  }
}
 8006c5a:	4770      	bx	lr
 8006c5c:	40012c00 	.word	0x40012c00
 8006c60:	40014000 	.word	0x40014000

08006c64 <HAL_TIM_Base_Init>:
{
 8006c64:	b510      	push	{r4, lr}
  if (htim == NULL)
 8006c66:	4604      	mov	r4, r0
 8006c68:	b350      	cbz	r0, 8006cc0 <HAL_TIM_Base_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 8006c6a:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8006c6e:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8006c72:	b91b      	cbnz	r3, 8006c7c <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8006c74:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 8006c78:	f7fd face 	bl	8004218 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8006c7c:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006c7e:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8006c80:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006c84:	1d21      	adds	r1, r4, #4
 8006c86:	f7ff ff89 	bl	8006b9c <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006c8a:	2301      	movs	r3, #1
 8006c8c:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
  return HAL_OK;
 8006c90:	2000      	movs	r0, #0
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c92:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8006c96:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8006c9a:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8006c9e:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 8006ca2:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006ca6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006caa:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8006cae:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 8006cb2:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
 8006cb6:	f884 3047 	strb.w	r3, [r4, #71]	@ 0x47
  htim->State = HAL_TIM_STATE_READY;
 8006cba:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
}
 8006cbe:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8006cc0:	2001      	movs	r0, #1
 8006cc2:	e7fc      	b.n	8006cbe <HAL_TIM_Base_Init+0x5a>

08006cc4 <TIM_ETR_SetConfig>:
=======
 8004a80:	2301      	movs	r3, #1
 8004a82:	6143      	str	r3, [r0, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004a84:	6903      	ldr	r3, [r0, #16]
 8004a86:	07db      	lsls	r3, r3, #31
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004a88:	bf42      	ittt	mi
 8004a8a:	6903      	ldrmi	r3, [r0, #16]
 8004a8c:	f023 0301 	bicmi.w	r3, r3, #1
 8004a90:	6103      	strmi	r3, [r0, #16]
  }
}
 8004a92:	4770      	bx	lr
 8004a94:	40012c00 	.word	0x40012c00
 8004a98:	40014000 	.word	0x40014000

08004a9c <HAL_TIM_Base_Init>:
{
 8004a9c:	b510      	push	{r4, lr}
  if (htim == NULL)
 8004a9e:	4604      	mov	r4, r0
 8004aa0:	b350      	cbz	r0, 8004af8 <HAL_TIM_Base_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 8004aa2:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8004aa6:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8004aaa:	b91b      	cbnz	r3, 8004ab4 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8004aac:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 8004ab0:	f7fd fb68 	bl	8002184 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8004ab4:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ab6:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8004ab8:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004abc:	1d21      	adds	r1, r4, #4
 8004abe:	f7ff ff89 	bl	80049d4 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ac2:	2301      	movs	r3, #1
 8004ac4:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
  return HAL_OK;
 8004ac8:	2000      	movs	r0, #0
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004aca:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8004ace:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8004ad2:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8004ad6:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 8004ada:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004ade:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ae2:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8004ae6:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 8004aea:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
 8004aee:	f884 3047 	strb.w	r3, [r4, #71]	@ 0x47
  htim->State = HAL_TIM_STATE_READY;
 8004af2:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
}
 8004af6:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8004af8:	2001      	movs	r0, #1
 8004afa:	e7fc      	b.n	8004af6 <HAL_TIM_Base_Init+0x5a>

08004afc <TIM_ETR_SetConfig>:
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
<<<<<<< HEAD
 8006cc4:	b510      	push	{r4, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006cc6:	6884      	ldr	r4, [r0, #8]
=======
 8004afc:	b510      	push	{r4, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004afe:	6884      	ldr	r4, [r0, #8]
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
<<<<<<< HEAD
 8006cc8:	430a      	orrs	r2, r1
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006cca:	f424 447f 	bic.w	r4, r4, #65280	@ 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006cce:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8006cd2:	4322      	orrs	r2, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006cd4:	6082      	str	r2, [r0, #8]
}
 8006cd6:	bd10      	pop	{r4, pc}

08006cd8 <HAL_TIM_ConfigClockSource>:
{
 8006cd8:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8006cda:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8006cde:	2b01      	cmp	r3, #1
{
 8006ce0:	4604      	mov	r4, r0
 8006ce2:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 8006ce6:	f000 808c 	beq.w	8006e02 <HAL_TIM_ConfigClockSource+0x12a>
  htim->State = HAL_TIM_STATE_BUSY;
 8006cea:	f884 003d 	strb.w	r0, [r4, #61]	@ 0x3d
  __HAL_LOCK(htim);
 8006cee:	2201      	movs	r2, #1
  tmpsmcr = htim->Instance->SMCR;
 8006cf0:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(htim);
 8006cf2:	f884 203c 	strb.w	r2, [r4, #60]	@ 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8006cf6:	6885      	ldr	r5, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006cf8:	4b43      	ldr	r3, [pc, #268]	@ (8006e08 <HAL_TIM_ConfigClockSource+0x130>)
 8006cfa:	402b      	ands	r3, r5
  htim->Instance->SMCR = tmpsmcr;
 8006cfc:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 8006cfe:	680b      	ldr	r3, [r1, #0]
 8006d00:	2b60      	cmp	r3, #96	@ 0x60
 8006d02:	d04f      	beq.n	8006da4 <HAL_TIM_ConfigClockSource+0xcc>
 8006d04:	d832      	bhi.n	8006d6c <HAL_TIM_ConfigClockSource+0x94>
 8006d06:	2b40      	cmp	r3, #64	@ 0x40
 8006d08:	d064      	beq.n	8006dd4 <HAL_TIM_ConfigClockSource+0xfc>
 8006d0a:	d816      	bhi.n	8006d3a <HAL_TIM_ConfigClockSource+0x62>
 8006d0c:	2b20      	cmp	r3, #32
 8006d0e:	d00d      	beq.n	8006d2c <HAL_TIM_ConfigClockSource+0x54>
 8006d10:	d80a      	bhi.n	8006d28 <HAL_TIM_ConfigClockSource+0x50>
 8006d12:	f033 0110 	bics.w	r1, r3, #16
 8006d16:	d009      	beq.n	8006d2c <HAL_TIM_ConfigClockSource+0x54>
  htim->State = HAL_TIM_STATE_READY;
 8006d18:	2301      	movs	r3, #1
 8006d1a:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 8006d1e:	2300      	movs	r3, #0
 8006d20:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 8006d24:	4610      	mov	r0, r2
 8006d26:	bd38      	pop	{r3, r4, r5, pc}
  switch (sClockSourceConfig->ClockSource)
 8006d28:	2b30      	cmp	r3, #48	@ 0x30
 8006d2a:	d1f5      	bne.n	8006d18 <HAL_TIM_ConfigClockSource+0x40>
  tmpsmcr = TIMx->SMCR;
 8006d2c:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8006d2e:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006d32:	4313      	orrs	r3, r2
 8006d34:	f043 0307 	orr.w	r3, r3, #7
  TIMx->SMCR = tmpsmcr;
 8006d38:	e028      	b.n	8006d8c <HAL_TIM_ConfigClockSource+0xb4>
  switch (sClockSourceConfig->ClockSource)
 8006d3a:	2b50      	cmp	r3, #80	@ 0x50
 8006d3c:	d1ec      	bne.n	8006d18 <HAL_TIM_ConfigClockSource+0x40>
                               sClockSourceConfig->ClockPolarity,
 8006d3e:	684a      	ldr	r2, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8006d40:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 8006d42:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006d44:	6a03      	ldr	r3, [r0, #32]
 8006d46:	f023 0301 	bic.w	r3, r3, #1
 8006d4a:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006d4c:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006d4e:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006d52:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006d56:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccer |= TIM_ICPolarity;
 8006d5a:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 8006d5c:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8006d5e:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8006d60:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8006d62:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006d66:	f043 0357 	orr.w	r3, r3, #87	@ 0x57
  TIMx->SMCR = tmpsmcr;
 8006d6a:	e00f      	b.n	8006d8c <HAL_TIM_ConfigClockSource+0xb4>
  switch (sClockSourceConfig->ClockSource)
 8006d6c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006d70:	d00d      	beq.n	8006d8e <HAL_TIM_ConfigClockSource+0xb6>
 8006d72:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006d76:	d00c      	beq.n	8006d92 <HAL_TIM_ConfigClockSource+0xba>
 8006d78:	2b70      	cmp	r3, #112	@ 0x70
 8006d7a:	d1cd      	bne.n	8006d18 <HAL_TIM_ConfigClockSource+0x40>
      TIM_ETR_SetConfig(htim->Instance,
 8006d7c:	68cb      	ldr	r3, [r1, #12]
 8006d7e:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8006d82:	f7ff ff9f 	bl	8006cc4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006d86:	6883      	ldr	r3, [r0, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006d88:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
      htim->Instance->SMCR = tmpsmcr;
 8006d8c:	6083      	str	r3, [r0, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8006d8e:	2200      	movs	r2, #0
 8006d90:	e7c2      	b.n	8006d18 <HAL_TIM_ConfigClockSource+0x40>
      TIM_ETR_SetConfig(htim->Instance,
 8006d92:	68cb      	ldr	r3, [r1, #12]
 8006d94:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8006d98:	f7ff ff94 	bl	8006cc4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006d9c:	6883      	ldr	r3, [r0, #8]
 8006d9e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006da2:	e7f3      	b.n	8006d8c <HAL_TIM_ConfigClockSource+0xb4>
  tmpccer = TIMx->CCER;
 8006da4:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006da6:	6a02      	ldr	r2, [r0, #32]
                               sClockSourceConfig->ClockPolarity,
 8006da8:	684d      	ldr	r5, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8006daa:	68c9      	ldr	r1, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006dac:	f022 0210 	bic.w	r2, r2, #16
 8006db0:	6202      	str	r2, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006db2:	6982      	ldr	r2, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006db4:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006db8:	f422 4270 	bic.w	r2, r2, #61440	@ 0xf000
  tmpccer |= (TIM_ICPolarity << 4U);
 8006dbc:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006dc0:	ea42 3201 	orr.w	r2, r2, r1, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8006dc4:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8006dc6:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8006dc8:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8006dca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006dce:	f043 0367 	orr.w	r3, r3, #103	@ 0x67
  TIMx->SMCR = tmpsmcr;
 8006dd2:	e7db      	b.n	8006d8c <HAL_TIM_ConfigClockSource+0xb4>
                               sClockSourceConfig->ClockPolarity,
 8006dd4:	684a      	ldr	r2, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8006dd6:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 8006dd8:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006dda:	6a03      	ldr	r3, [r0, #32]
 8006ddc:	f023 0301 	bic.w	r3, r3, #1
 8006de0:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006de2:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006de4:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006de8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006dec:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccer |= TIM_ICPolarity;
 8006df0:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 8006df2:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8006df4:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8006df6:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8006df8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006dfc:	f043 0347 	orr.w	r3, r3, #71	@ 0x47
  TIMx->SMCR = tmpsmcr;
 8006e00:	e7c4      	b.n	8006d8c <HAL_TIM_ConfigClockSource+0xb4>
  __HAL_LOCK(htim);
 8006e02:	4602      	mov	r2, r0
 8006e04:	e78e      	b.n	8006d24 <HAL_TIM_ConfigClockSource+0x4c>
 8006e06:	bf00      	nop
 8006e08:	fffe0088 	.word	0xfffe0088

08006e0c <HAL_TIMEx_MasterConfigSynchronization>:
=======
 8004b00:	430a      	orrs	r2, r1
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004b02:	f424 447f 	bic.w	r4, r4, #65280	@ 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004b06:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8004b0a:	4322      	orrs	r2, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004b0c:	6082      	str	r2, [r0, #8]
}
 8004b0e:	bd10      	pop	{r4, pc}

08004b10 <HAL_TIM_ConfigClockSource>:
{
 8004b10:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8004b12:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8004b16:	2b01      	cmp	r3, #1
{
 8004b18:	4604      	mov	r4, r0
 8004b1a:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 8004b1e:	f000 808c 	beq.w	8004c3a <HAL_TIM_ConfigClockSource+0x12a>
  htim->State = HAL_TIM_STATE_BUSY;
 8004b22:	f884 003d 	strb.w	r0, [r4, #61]	@ 0x3d
  __HAL_LOCK(htim);
 8004b26:	2201      	movs	r2, #1
  tmpsmcr = htim->Instance->SMCR;
 8004b28:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(htim);
 8004b2a:	f884 203c 	strb.w	r2, [r4, #60]	@ 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8004b2e:	6885      	ldr	r5, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004b30:	4b43      	ldr	r3, [pc, #268]	@ (8004c40 <HAL_TIM_ConfigClockSource+0x130>)
 8004b32:	402b      	ands	r3, r5
  htim->Instance->SMCR = tmpsmcr;
 8004b34:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 8004b36:	680b      	ldr	r3, [r1, #0]
 8004b38:	2b60      	cmp	r3, #96	@ 0x60
 8004b3a:	d04f      	beq.n	8004bdc <HAL_TIM_ConfigClockSource+0xcc>
 8004b3c:	d832      	bhi.n	8004ba4 <HAL_TIM_ConfigClockSource+0x94>
 8004b3e:	2b40      	cmp	r3, #64	@ 0x40
 8004b40:	d064      	beq.n	8004c0c <HAL_TIM_ConfigClockSource+0xfc>
 8004b42:	d816      	bhi.n	8004b72 <HAL_TIM_ConfigClockSource+0x62>
 8004b44:	2b20      	cmp	r3, #32
 8004b46:	d00d      	beq.n	8004b64 <HAL_TIM_ConfigClockSource+0x54>
 8004b48:	d80a      	bhi.n	8004b60 <HAL_TIM_ConfigClockSource+0x50>
 8004b4a:	f033 0110 	bics.w	r1, r3, #16
 8004b4e:	d009      	beq.n	8004b64 <HAL_TIM_ConfigClockSource+0x54>
  htim->State = HAL_TIM_STATE_READY;
 8004b50:	2301      	movs	r3, #1
 8004b52:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 8004b56:	2300      	movs	r3, #0
 8004b58:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 8004b5c:	4610      	mov	r0, r2
 8004b5e:	bd38      	pop	{r3, r4, r5, pc}
  switch (sClockSourceConfig->ClockSource)
 8004b60:	2b30      	cmp	r3, #48	@ 0x30
 8004b62:	d1f5      	bne.n	8004b50 <HAL_TIM_ConfigClockSource+0x40>
  tmpsmcr = TIMx->SMCR;
 8004b64:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8004b66:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004b6a:	4313      	orrs	r3, r2
 8004b6c:	f043 0307 	orr.w	r3, r3, #7
  TIMx->SMCR = tmpsmcr;
 8004b70:	e028      	b.n	8004bc4 <HAL_TIM_ConfigClockSource+0xb4>
  switch (sClockSourceConfig->ClockSource)
 8004b72:	2b50      	cmp	r3, #80	@ 0x50
 8004b74:	d1ec      	bne.n	8004b50 <HAL_TIM_ConfigClockSource+0x40>
                               sClockSourceConfig->ClockPolarity,
 8004b76:	684a      	ldr	r2, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8004b78:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 8004b7a:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004b7c:	6a03      	ldr	r3, [r0, #32]
 8004b7e:	f023 0301 	bic.w	r3, r3, #1
 8004b82:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b84:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004b86:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004b8a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004b8e:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccer |= TIM_ICPolarity;
 8004b92:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 8004b94:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8004b96:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8004b98:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8004b9a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004b9e:	f043 0357 	orr.w	r3, r3, #87	@ 0x57
  TIMx->SMCR = tmpsmcr;
 8004ba2:	e00f      	b.n	8004bc4 <HAL_TIM_ConfigClockSource+0xb4>
  switch (sClockSourceConfig->ClockSource)
 8004ba4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004ba8:	d00d      	beq.n	8004bc6 <HAL_TIM_ConfigClockSource+0xb6>
 8004baa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004bae:	d00c      	beq.n	8004bca <HAL_TIM_ConfigClockSource+0xba>
 8004bb0:	2b70      	cmp	r3, #112	@ 0x70
 8004bb2:	d1cd      	bne.n	8004b50 <HAL_TIM_ConfigClockSource+0x40>
      TIM_ETR_SetConfig(htim->Instance,
 8004bb4:	68cb      	ldr	r3, [r1, #12]
 8004bb6:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8004bba:	f7ff ff9f 	bl	8004afc <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004bbe:	6883      	ldr	r3, [r0, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004bc0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
      htim->Instance->SMCR = tmpsmcr;
 8004bc4:	6083      	str	r3, [r0, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	e7c2      	b.n	8004b50 <HAL_TIM_ConfigClockSource+0x40>
      TIM_ETR_SetConfig(htim->Instance,
 8004bca:	68cb      	ldr	r3, [r1, #12]
 8004bcc:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8004bd0:	f7ff ff94 	bl	8004afc <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004bd4:	6883      	ldr	r3, [r0, #8]
 8004bd6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004bda:	e7f3      	b.n	8004bc4 <HAL_TIM_ConfigClockSource+0xb4>
  tmpccer = TIMx->CCER;
 8004bdc:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004bde:	6a02      	ldr	r2, [r0, #32]
                               sClockSourceConfig->ClockPolarity,
 8004be0:	684d      	ldr	r5, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8004be2:	68c9      	ldr	r1, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004be4:	f022 0210 	bic.w	r2, r2, #16
 8004be8:	6202      	str	r2, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004bea:	6982      	ldr	r2, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004bec:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004bf0:	f422 4270 	bic.w	r2, r2, #61440	@ 0xf000
  tmpccer |= (TIM_ICPolarity << 4U);
 8004bf4:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004bf8:	ea42 3201 	orr.w	r2, r2, r1, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8004bfc:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8004bfe:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8004c00:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8004c02:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004c06:	f043 0367 	orr.w	r3, r3, #103	@ 0x67
  TIMx->SMCR = tmpsmcr;
 8004c0a:	e7db      	b.n	8004bc4 <HAL_TIM_ConfigClockSource+0xb4>
                               sClockSourceConfig->ClockPolarity,
 8004c0c:	684a      	ldr	r2, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8004c0e:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 8004c10:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004c12:	6a03      	ldr	r3, [r0, #32]
 8004c14:	f023 0301 	bic.w	r3, r3, #1
 8004c18:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c1a:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004c1c:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004c20:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004c24:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccer |= TIM_ICPolarity;
 8004c28:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 8004c2a:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8004c2c:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8004c2e:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8004c30:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004c34:	f043 0347 	orr.w	r3, r3, #71	@ 0x47
  TIMx->SMCR = tmpsmcr;
 8004c38:	e7c4      	b.n	8004bc4 <HAL_TIM_ConfigClockSource+0xb4>
  __HAL_LOCK(htim);
 8004c3a:	4602      	mov	r2, r0
 8004c3c:	e78e      	b.n	8004b5c <HAL_TIM_ConfigClockSource+0x4c>
 8004c3e:	bf00      	nop
 8004c40:	fffe0088 	.word	0xfffe0088

08004c44 <HAL_TIMEx_MasterConfigSynchronization>:
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
<<<<<<< HEAD
 8006e0c:	b570      	push	{r4, r5, r6, lr}
=======
 8004c44:	b570      	push	{r4, r5, r6, lr}
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
<<<<<<< HEAD
 8006e0e:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8006e12:	2b01      	cmp	r3, #1
{
 8006e14:	4604      	mov	r4, r0
 8006e16:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 8006e1a:	d032      	beq.n	8006e82 <HAL_TIMEx_MasterConfigSynchronization+0x76>
=======
 8004c46:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8004c4a:	2b01      	cmp	r3, #1
{
 8004c4c:	4604      	mov	r4, r0
 8004c4e:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 8004c52:	d032      	beq.n	8004cba <HAL_TIMEx_MasterConfigSynchronization+0x76>
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
<<<<<<< HEAD
 8006e1c:	6823      	ldr	r3, [r4, #0]
=======
 8004c54:	6823      	ldr	r3, [r4, #0]
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
<<<<<<< HEAD
 8006e1e:	4d19      	ldr	r5, [pc, #100]	@ (8006e84 <HAL_TIMEx_MasterConfigSynchronization+0x78>)
  htim->State = HAL_TIM_STATE_BUSY;
 8006e20:	f884 003d 	strb.w	r0, [r4, #61]	@ 0x3d
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006e24:	42ab      	cmp	r3, r5
  tmpcr2 = htim->Instance->CR2;
 8006e26:	685a      	ldr	r2, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;
 8006e28:	6898      	ldr	r0, [r3, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006e2a:	d002      	beq.n	8006e32 <HAL_TIMEx_MasterConfigSynchronization+0x26>
 8006e2c:	4e16      	ldr	r6, [pc, #88]	@ (8006e88 <HAL_TIMEx_MasterConfigSynchronization+0x7c>)
 8006e2e:	42b3      	cmp	r3, r6
 8006e30:	d103      	bne.n	8006e3a <HAL_TIMEx_MasterConfigSynchronization+0x2e>
=======
 8004c56:	4d19      	ldr	r5, [pc, #100]	@ (8004cbc <HAL_TIMEx_MasterConfigSynchronization+0x78>)
  htim->State = HAL_TIM_STATE_BUSY;
 8004c58:	f884 003d 	strb.w	r0, [r4, #61]	@ 0x3d
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004c5c:	42ab      	cmp	r3, r5
  tmpcr2 = htim->Instance->CR2;
 8004c5e:	685a      	ldr	r2, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;
 8004c60:	6898      	ldr	r0, [r3, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004c62:	d002      	beq.n	8004c6a <HAL_TIMEx_MasterConfigSynchronization+0x26>
 8004c64:	4e16      	ldr	r6, [pc, #88]	@ (8004cc0 <HAL_TIMEx_MasterConfigSynchronization+0x7c>)
 8004c66:	42b3      	cmp	r3, r6
 8004c68:	d103      	bne.n	8004c72 <HAL_TIMEx_MasterConfigSynchronization+0x2e>
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
<<<<<<< HEAD
 8006e32:	684e      	ldr	r6, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006e34:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006e38:	4332      	orrs	r2, r6
=======
 8004c6a:	684e      	ldr	r6, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004c6c:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004c70:	4332      	orrs	r2, r6
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
<<<<<<< HEAD
 8006e3a:	680e      	ldr	r6, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 8006e3c:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006e40:	4332      	orrs	r2, r6
=======
 8004c72:	680e      	ldr	r6, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 8004c74:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004c78:	4332      	orrs	r2, r6
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
<<<<<<< HEAD
 8006e42:	42ab      	cmp	r3, r5
  htim->Instance->CR2 = tmpcr2;
 8006e44:	605a      	str	r2, [r3, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006e46:	d011      	beq.n	8006e6c <HAL_TIMEx_MasterConfigSynchronization+0x60>
 8006e48:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006e4c:	d00e      	beq.n	8006e6c <HAL_TIMEx_MasterConfigSynchronization+0x60>
 8006e4e:	4a0f      	ldr	r2, [pc, #60]	@ (8006e8c <HAL_TIMEx_MasterConfigSynchronization+0x80>)
 8006e50:	4293      	cmp	r3, r2
 8006e52:	d00b      	beq.n	8006e6c <HAL_TIMEx_MasterConfigSynchronization+0x60>
 8006e54:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006e58:	4293      	cmp	r3, r2
 8006e5a:	d007      	beq.n	8006e6c <HAL_TIMEx_MasterConfigSynchronization+0x60>
 8006e5c:	f502 3296 	add.w	r2, r2, #76800	@ 0x12c00
 8006e60:	4293      	cmp	r3, r2
 8006e62:	d003      	beq.n	8006e6c <HAL_TIMEx_MasterConfigSynchronization+0x60>
 8006e64:	f502 6240 	add.w	r2, r2, #3072	@ 0xc00
 8006e68:	4293      	cmp	r3, r2
 8006e6a:	d104      	bne.n	8006e76 <HAL_TIMEx_MasterConfigSynchronization+0x6a>
=======
 8004c7a:	42ab      	cmp	r3, r5
  htim->Instance->CR2 = tmpcr2;
 8004c7c:	605a      	str	r2, [r3, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c7e:	d011      	beq.n	8004ca4 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 8004c80:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c84:	d00e      	beq.n	8004ca4 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 8004c86:	4a0f      	ldr	r2, [pc, #60]	@ (8004cc4 <HAL_TIMEx_MasterConfigSynchronization+0x80>)
 8004c88:	4293      	cmp	r3, r2
 8004c8a:	d00b      	beq.n	8004ca4 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 8004c8c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8004c90:	4293      	cmp	r3, r2
 8004c92:	d007      	beq.n	8004ca4 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 8004c94:	f502 3296 	add.w	r2, r2, #76800	@ 0x12c00
 8004c98:	4293      	cmp	r3, r2
 8004c9a:	d003      	beq.n	8004ca4 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 8004c9c:	f502 6240 	add.w	r2, r2, #3072	@ 0xc00
 8004ca0:	4293      	cmp	r3, r2
 8004ca2:	d104      	bne.n	8004cae <HAL_TIMEx_MasterConfigSynchronization+0x6a>
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
<<<<<<< HEAD
 8006e6c:	6889      	ldr	r1, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006e6e:	f020 0280 	bic.w	r2, r0, #128	@ 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006e72:	430a      	orrs	r2, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006e74:	609a      	str	r2, [r3, #8]
=======
 8004ca4:	6889      	ldr	r1, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004ca6:	f020 0280 	bic.w	r2, r0, #128	@ 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004caa:	430a      	orrs	r2, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004cac:	609a      	str	r2, [r3, #8]
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
<<<<<<< HEAD
 8006e76:	2301      	movs	r3, #1

  __HAL_UNLOCK(htim);
 8006e78:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8006e7a:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 8006e7e:	f884 003c 	strb.w	r0, [r4, #60]	@ 0x3c

  return HAL_OK;
}
 8006e82:	bd70      	pop	{r4, r5, r6, pc}
 8006e84:	40012c00 	.word	0x40012c00
 8006e88:	40013400 	.word	0x40013400
 8006e8c:	40000400 	.word	0x40000400

08006e90 <HAL_TIMEx_CommutCallback>:
=======
 8004cae:	2301      	movs	r3, #1

  __HAL_UNLOCK(htim);
 8004cb0:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8004cb2:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 8004cb6:	f884 003c 	strb.w	r0, [r4, #60]	@ 0x3c

  return HAL_OK;
}
 8004cba:	bd70      	pop	{r4, r5, r6, pc}
 8004cbc:	40012c00 	.word	0x40012c00
 8004cc0:	40013400 	.word	0x40013400
 8004cc4:	40000400 	.word	0x40000400

08004cc8 <HAL_TIMEx_CommutCallback>:
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
/**
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
<<<<<<< HEAD
 8006e90:	4770      	bx	lr

08006e92 <HAL_TIMEx_BreakCallback>:
=======
 8004cc8:	4770      	bx	lr

08004cca <HAL_TIMEx_BreakCallback>:
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
/**
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
<<<<<<< HEAD
 8006e92:	4770      	bx	lr

08006e94 <HAL_TIMEx_Break2Callback>:
=======
 8004cca:	4770      	bx	lr

08004ccc <HAL_TIMEx_Break2Callback>:
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
/**
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
<<<<<<< HEAD
 8006e94:	4770      	bx	lr

08006e96 <UART_EndRxTransfer>:
=======
 8004ccc:	4770      	bx	lr

08004cce <UART_EndRxTransfer>:
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
<<<<<<< HEAD
 8006e96:	6802      	ldr	r2, [r0, #0]
=======
 8004cce:	6802      	ldr	r2, [r0, #0]
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
<<<<<<< HEAD
 8006e98:	e852 3f00 	ldrex	r3, [r2]
 8006e9c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
=======
 8004cd0:	e852 3f00 	ldrex	r3, [r2]
 8004cd4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
<<<<<<< HEAD
 8006ea0:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 8006ea4:	6802      	ldr	r2, [r0, #0]
 8006ea6:	2900      	cmp	r1, #0
 8006ea8:	d1f5      	bne.n	8006e96 <UART_EndRxTransfer>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006eaa:	f102 0308 	add.w	r3, r2, #8
 8006eae:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006eb2:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006eb6:	f102 0c08 	add.w	ip, r2, #8
 8006eba:	e84c 3100 	strex	r1, r3, [ip]
 8006ebe:	2900      	cmp	r1, #0
 8006ec0:	d1f3      	bne.n	8006eaa <UART_EndRxTransfer+0x14>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ec2:	6e03      	ldr	r3, [r0, #96]	@ 0x60
 8006ec4:	2b01      	cmp	r3, #1
 8006ec6:	d107      	bne.n	8006ed8 <UART_EndRxTransfer+0x42>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ec8:	e852 3f00 	ldrex	r3, [r2]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ecc:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ed0:	e842 3100 	strex	r1, r3, [r2]
 8006ed4:	2900      	cmp	r1, #0
 8006ed6:	d1f7      	bne.n	8006ec8 <UART_EndRxTransfer+0x32>
=======
 8004cd8:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 8004cdc:	6802      	ldr	r2, [r0, #0]
 8004cde:	2900      	cmp	r1, #0
 8004ce0:	d1f5      	bne.n	8004cce <UART_EndRxTransfer>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ce2:	f102 0308 	add.w	r3, r2, #8
 8004ce6:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cea:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cee:	f102 0c08 	add.w	ip, r2, #8
 8004cf2:	e84c 3100 	strex	r1, r3, [ip]
 8004cf6:	2900      	cmp	r1, #0
 8004cf8:	d1f3      	bne.n	8004ce2 <UART_EndRxTransfer+0x14>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004cfa:	6e03      	ldr	r3, [r0, #96]	@ 0x60
 8004cfc:	2b01      	cmp	r3, #1
 8004cfe:	d107      	bne.n	8004d10 <UART_EndRxTransfer+0x42>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d00:	e852 3f00 	ldrex	r3, [r2]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d04:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d08:	e842 3100 	strex	r1, r3, [r2]
 8004d0c:	2900      	cmp	r1, #0
 8004d0e:	d1f7      	bne.n	8004d00 <UART_EndRxTransfer+0x32>
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
<<<<<<< HEAD
 8006ed8:	2320      	movs	r3, #32
 8006eda:	f8c0 3080 	str.w	r3, [r0, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ede:	2300      	movs	r3, #0
 8006ee0:	6603      	str	r3, [r0, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006ee2:	6683      	str	r3, [r0, #104]	@ 0x68
}
 8006ee4:	4770      	bx	lr

08006ee6 <HAL_UART_Abort>:
{
 8006ee6:	b510      	push	{r4, lr}
 8006ee8:	4604      	mov	r4, r0
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 8006eea:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006eec:	e852 3f00 	ldrex	r3, [r2]
 8006ef0:	f423 73f0 	bic.w	r3, r3, #480	@ 0x1e0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ef4:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 8006ef8:	6823      	ldr	r3, [r4, #0]
 8006efa:	2900      	cmp	r1, #0
 8006efc:	d1f5      	bne.n	8006eea <HAL_UART_Abort+0x4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006efe:	f103 0208 	add.w	r2, r3, #8
 8006f02:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f06:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f0a:	f103 0008 	add.w	r0, r3, #8
 8006f0e:	e840 2100 	strex	r1, r2, [r0]
 8006f12:	2900      	cmp	r1, #0
 8006f14:	d1f3      	bne.n	8006efe <HAL_UART_Abort+0x18>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f16:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 8006f18:	2a01      	cmp	r2, #1
 8006f1a:	d107      	bne.n	8006f2c <HAL_UART_Abort+0x46>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f1c:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8006f20:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f24:	e843 2100 	strex	r1, r2, [r3]
 8006f28:	2900      	cmp	r1, #0
 8006f2a:	d1f7      	bne.n	8006f1c <HAL_UART_Abort+0x36>
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8006f2c:	689a      	ldr	r2, [r3, #8]
 8006f2e:	0612      	lsls	r2, r2, #24
 8006f30:	d51b      	bpl.n	8006f6a <HAL_UART_Abort+0x84>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f32:	f103 0208 	add.w	r2, r3, #8
 8006f36:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006f3a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f3e:	f103 0008 	add.w	r0, r3, #8
 8006f42:	e840 2100 	strex	r1, r2, [r0]
 8006f46:	2900      	cmp	r1, #0
 8006f48:	d1f3      	bne.n	8006f32 <HAL_UART_Abort+0x4c>
    if (huart->hdmatx != NULL)
 8006f4a:	6f20      	ldr	r0, [r4, #112]	@ 0x70
 8006f4c:	b168      	cbz	r0, 8006f6a <HAL_UART_Abort+0x84>
      huart->hdmatx->XferAbortCallback = NULL;
 8006f4e:	6341      	str	r1, [r0, #52]	@ 0x34
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8006f50:	f7fe f9b3 	bl	80052ba <HAL_DMA_Abort>
 8006f54:	b148      	cbz	r0, 8006f6a <HAL_UART_Abort+0x84>
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8006f56:	6f20      	ldr	r0, [r4, #112]	@ 0x70
 8006f58:	f7fe fa14 	bl	8005384 <HAL_DMA_GetError>
 8006f5c:	2820      	cmp	r0, #32
 8006f5e:	d104      	bne.n	8006f6a <HAL_UART_Abort+0x84>
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006f60:	2310      	movs	r3, #16
 8006f62:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
          return HAL_TIMEOUT;
 8006f66:	2003      	movs	r0, #3
}
 8006f68:	bd10      	pop	{r4, pc}
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f6a:	6822      	ldr	r2, [r4, #0]
 8006f6c:	6893      	ldr	r3, [r2, #8]
 8006f6e:	065b      	lsls	r3, r3, #25
 8006f70:	d516      	bpl.n	8006fa0 <HAL_UART_Abort+0xba>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f72:	f102 0308 	add.w	r3, r2, #8
 8006f76:	e853 3f00 	ldrex	r3, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006f7a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f7e:	f102 0008 	add.w	r0, r2, #8
 8006f82:	e840 3100 	strex	r1, r3, [r0]
 8006f86:	2900      	cmp	r1, #0
 8006f88:	d1f3      	bne.n	8006f72 <HAL_UART_Abort+0x8c>
    if (huart->hdmarx != NULL)
 8006f8a:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 8006f8c:	b140      	cbz	r0, 8006fa0 <HAL_UART_Abort+0xba>
      huart->hdmarx->XferAbortCallback = NULL;
 8006f8e:	6341      	str	r1, [r0, #52]	@ 0x34
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8006f90:	f7fe f993 	bl	80052ba <HAL_DMA_Abort>
 8006f94:	b120      	cbz	r0, 8006fa0 <HAL_UART_Abort+0xba>
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8006f96:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 8006f98:	f7fe f9f4 	bl	8005384 <HAL_DMA_GetError>
 8006f9c:	2820      	cmp	r0, #32
 8006f9e:	d0df      	beq.n	8006f60 <HAL_UART_Abort+0x7a>
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8006fa0:	6823      	ldr	r3, [r4, #0]
  huart->TxXferCount = 0U;
 8006fa2:	2000      	movs	r0, #0
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8006fa4:	220f      	movs	r2, #15
  huart->TxXferCount = 0U;
 8006fa6:	f8a4 0052 	strh.w	r0, [r4, #82]	@ 0x52
  huart->RxXferCount = 0U;
 8006faa:	f8a4 005a 	strh.w	r0, [r4, #90]	@ 0x5a
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8006fae:	621a      	str	r2, [r3, #32]
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006fb0:	699a      	ldr	r2, [r3, #24]
 8006fb2:	f042 0208 	orr.w	r2, r2, #8
 8006fb6:	619a      	str	r2, [r3, #24]
  huart->gState  = HAL_UART_STATE_READY;
 8006fb8:	2320      	movs	r3, #32
 8006fba:	67e3      	str	r3, [r4, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006fbc:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006fc0:	6620      	str	r0, [r4, #96]	@ 0x60
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006fc2:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
  return HAL_OK;
 8006fc6:	e7cf      	b.n	8006f68 <HAL_UART_Abort+0x82>

08006fc8 <HAL_UART_RxCpltCallback>:
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
 8006fc8:	4770      	bx	lr

08006fca <HAL_UART_RxHalfCpltCallback>:
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
 8006fca:	4770      	bx	lr

08006fcc <HAL_UART_ErrorCallback>:
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
 8006fcc:	4770      	bx	lr

08006fce <UART_DMAError>:
=======
 8004d10:	2320      	movs	r3, #32
 8004d12:	f8c0 3080 	str.w	r3, [r0, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d16:	2300      	movs	r3, #0
 8004d18:	6603      	str	r3, [r0, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004d1a:	6683      	str	r3, [r0, #104]	@ 0x68
}
 8004d1c:	4770      	bx	lr

08004d1e <HAL_UART_RxCpltCallback>:
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
 8004d1e:	4770      	bx	lr

08004d20 <HAL_UART_RxHalfCpltCallback>:
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
 8004d20:	4770      	bx	lr

08004d22 <HAL_UART_ErrorCallback>:
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
 8004d22:	4770      	bx	lr

08004d24 <UART_DMAError>:
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
<<<<<<< HEAD
 8006fce:	6a40      	ldr	r0, [r0, #36]	@ 0x24
=======
 8004d24:	6a40      	ldr	r0, [r0, #36]	@ 0x24
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)

  const HAL_UART_StateTypeDef gstate = huart->gState;
  const HAL_UART_StateTypeDef rxstate = huart->RxState;

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
<<<<<<< HEAD
 8006fd0:	6803      	ldr	r3, [r0, #0]
  const HAL_UART_StateTypeDef gstate = huart->gState;
 8006fd2:	6fc2      	ldr	r2, [r0, #124]	@ 0x7c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8006fd4:	f8d0 1080 	ldr.w	r1, [r0, #128]	@ 0x80
{
 8006fd8:	b510      	push	{r4, lr}
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8006fda:	689c      	ldr	r4, [r3, #8]
 8006fdc:	0624      	lsls	r4, r4, #24
 8006fde:	d50e      	bpl.n	8006ffe <UART_DMAError+0x30>
 8006fe0:	2a21      	cmp	r2, #33	@ 0x21
 8006fe2:	d10c      	bne.n	8006ffe <UART_DMAError+0x30>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8006fe4:	2200      	movs	r2, #0
 8006fe6:	f8a0 2052 	strh.w	r2, [r0, #82]	@ 0x52
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fea:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006fee:	f022 02c0 	bic.w	r2, r2, #192	@ 0xc0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ff2:	e843 2400 	strex	r4, r2, [r3]
 8006ff6:	2c00      	cmp	r4, #0
 8006ff8:	d1f7      	bne.n	8006fea <UART_DMAError+0x1c>
  huart->gState = HAL_UART_STATE_READY;
 8006ffa:	2220      	movs	r2, #32
 8006ffc:	67c2      	str	r2, [r0, #124]	@ 0x7c
=======
 8004d26:	6803      	ldr	r3, [r0, #0]
  const HAL_UART_StateTypeDef gstate = huart->gState;
 8004d28:	6fc2      	ldr	r2, [r0, #124]	@ 0x7c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8004d2a:	f8d0 1080 	ldr.w	r1, [r0, #128]	@ 0x80
{
 8004d2e:	b510      	push	{r4, lr}
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8004d30:	689c      	ldr	r4, [r3, #8]
 8004d32:	0624      	lsls	r4, r4, #24
 8004d34:	d50e      	bpl.n	8004d54 <UART_DMAError+0x30>
 8004d36:	2a21      	cmp	r2, #33	@ 0x21
 8004d38:	d10c      	bne.n	8004d54 <UART_DMAError+0x30>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	f8a0 2052 	strh.w	r2, [r0, #82]	@ 0x52
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d40:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004d44:	f022 02c0 	bic.w	r2, r2, #192	@ 0xc0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d48:	e843 2400 	strex	r4, r2, [r3]
 8004d4c:	2c00      	cmp	r4, #0
 8004d4e:	d1f7      	bne.n	8004d40 <UART_DMAError+0x1c>
  huart->gState = HAL_UART_STATE_READY;
 8004d50:	2220      	movs	r2, #32
 8004d52:	67c2      	str	r2, [r0, #124]	@ 0x7c
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
    UART_EndTxTransfer(huart);
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
<<<<<<< HEAD
 8006ffe:	689b      	ldr	r3, [r3, #8]
 8007000:	065b      	lsls	r3, r3, #25
 8007002:	d506      	bpl.n	8007012 <UART_DMAError+0x44>
 8007004:	2922      	cmp	r1, #34	@ 0x22
 8007006:	d104      	bne.n	8007012 <UART_DMAError+0x44>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8007008:	2300      	movs	r3, #0
 800700a:	f8a0 305a 	strh.w	r3, [r0, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 800700e:	f7ff ff42 	bl	8006e96 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007012:	f8d0 3084 	ldr.w	r3, [r0, #132]	@ 0x84
 8007016:	f043 0310 	orr.w	r3, r3, #16
 800701a:	f8c0 3084 	str.w	r3, [r0, #132]	@ 0x84
=======
 8004d54:	689b      	ldr	r3, [r3, #8]
 8004d56:	065b      	lsls	r3, r3, #25
 8004d58:	d506      	bpl.n	8004d68 <UART_DMAError+0x44>
 8004d5a:	2922      	cmp	r1, #34	@ 0x22
 8004d5c:	d104      	bne.n	8004d68 <UART_DMAError+0x44>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8004d5e:	2300      	movs	r3, #0
 8004d60:	f8a0 305a 	strh.w	r3, [r0, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 8004d64:	f7ff ffb3 	bl	8004cce <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004d68:	f8d0 3084 	ldr.w	r3, [r0, #132]	@ 0x84
 8004d6c:	f043 0310 	orr.w	r3, r3, #16
 8004d70:	f8c0 3084 	str.w	r3, [r0, #132]	@ 0x84
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
<<<<<<< HEAD
 800701e:	f7ff ffd5 	bl	8006fcc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007022:	bd10      	pop	{r4, pc}

08007024 <HAL_UARTEx_RxEventCallback>:
}
 8007024:	4770      	bx	lr

08007026 <UART_DMARxHalfCplt>:
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007026:	6a40      	ldr	r0, [r0, #36]	@ 0x24
{
 8007028:	b508      	push	{r3, lr}
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800702a:	2301      	movs	r3, #1
 800702c:	6643      	str	r3, [r0, #100]	@ 0x64
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800702e:	6e03      	ldr	r3, [r0, #96]	@ 0x60
 8007030:	2b01      	cmp	r3, #1
 8007032:	d105      	bne.n	8007040 <UART_DMARxHalfCplt+0x1a>
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8007034:	f8b0 1058 	ldrh.w	r1, [r0, #88]	@ 0x58
 8007038:	0849      	lsrs	r1, r1, #1
 800703a:	f7ff fff3 	bl	8007024 <HAL_UARTEx_RxEventCallback>
}
 800703e:	bd08      	pop	{r3, pc}
    HAL_UART_RxHalfCpltCallback(huart);
 8007040:	f7ff ffc3 	bl	8006fca <HAL_UART_RxHalfCpltCallback>
}
 8007044:	e7fb      	b.n	800703e <UART_DMARxHalfCplt+0x18>

08007046 <UART_DMAReceiveCplt>:
{
 8007046:	b508      	push	{r3, lr}
 8007048:	4603      	mov	r3, r0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800704a:	6a40      	ldr	r0, [r0, #36]	@ 0x24
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800704c:	699b      	ldr	r3, [r3, #24]
 800704e:	2b20      	cmp	r3, #32
 8007050:	d032      	beq.n	80070b8 <UART_DMAReceiveCplt+0x72>
    huart->RxXferCount = 0U;
 8007052:	2300      	movs	r3, #0
 8007054:	f8a0 305a 	strh.w	r3, [r0, #90]	@ 0x5a
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007058:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800705a:	e852 3f00 	ldrex	r3, [r2]
 800705e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007062:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 8007066:	6803      	ldr	r3, [r0, #0]
 8007068:	2900      	cmp	r1, #0
 800706a:	d1f5      	bne.n	8007058 <UART_DMAReceiveCplt+0x12>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800706c:	f103 0208 	add.w	r2, r3, #8
 8007070:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007074:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007078:	f103 0c08 	add.w	ip, r3, #8
 800707c:	e84c 2100 	strex	r1, r2, [ip]
 8007080:	2900      	cmp	r1, #0
 8007082:	d1f3      	bne.n	800706c <UART_DMAReceiveCplt+0x26>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007084:	f103 0208 	add.w	r2, r3, #8
 8007088:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800708c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007090:	f103 0c08 	add.w	ip, r3, #8
 8007094:	e84c 2100 	strex	r1, r2, [ip]
 8007098:	2900      	cmp	r1, #0
 800709a:	d1f3      	bne.n	8007084 <UART_DMAReceiveCplt+0x3e>
    huart->RxState = HAL_UART_STATE_READY;
 800709c:	2220      	movs	r2, #32
 800709e:	f8c0 2080 	str.w	r2, [r0, #128]	@ 0x80
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80070a2:	6e02      	ldr	r2, [r0, #96]	@ 0x60
 80070a4:	2a01      	cmp	r2, #1
 80070a6:	d107      	bne.n	80070b8 <UART_DMAReceiveCplt+0x72>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070a8:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80070ac:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070b0:	e843 2100 	strex	r1, r2, [r3]
 80070b4:	2900      	cmp	r1, #0
 80070b6:	d1f7      	bne.n	80070a8 <UART_DMAReceiveCplt+0x62>
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80070b8:	2300      	movs	r3, #0
 80070ba:	6643      	str	r3, [r0, #100]	@ 0x64
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80070bc:	6e03      	ldr	r3, [r0, #96]	@ 0x60
 80070be:	2b01      	cmp	r3, #1
 80070c0:	d104      	bne.n	80070cc <UART_DMAReceiveCplt+0x86>
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80070c2:	f8b0 1058 	ldrh.w	r1, [r0, #88]	@ 0x58
 80070c6:	f7ff ffad 	bl	8007024 <HAL_UARTEx_RxEventCallback>
}
 80070ca:	bd08      	pop	{r3, pc}
    HAL_UART_RxCpltCallback(huart);
 80070cc:	f7ff ff7c 	bl	8006fc8 <HAL_UART_RxCpltCallback>
}
 80070d0:	e7fb      	b.n	80070ca <UART_DMAReceiveCplt+0x84>
	...

080070d4 <UART_SetConfig>:
{
 80070d4:	b538      	push	{r3, r4, r5, lr}
 80070d6:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80070d8:	69c0      	ldr	r0, [r0, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80070da:	6823      	ldr	r3, [r4, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80070dc:	6925      	ldr	r5, [r4, #16]
 80070de:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80070e0:	6819      	ldr	r1, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80070e2:	432a      	orrs	r2, r5
 80070e4:	6965      	ldr	r5, [r4, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80070e6:	f421 4116 	bic.w	r1, r1, #38400	@ 0x9600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80070ea:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80070ec:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80070f0:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80070f2:	430a      	orrs	r2, r1
 80070f4:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80070f6:	685a      	ldr	r2, [r3, #4]
 80070f8:	68e1      	ldr	r1, [r4, #12]
  tmpreg |= huart->Init.OneBitSampling;
 80070fa:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80070fc:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 8007100:	430a      	orrs	r2, r1
 8007102:	605a      	str	r2, [r3, #4]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007104:	6899      	ldr	r1, [r3, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007106:	69a2      	ldr	r2, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007108:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
  tmpreg |= huart->Init.OneBitSampling;
 800710c:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800710e:	430a      	orrs	r2, r1
 8007110:	609a      	str	r2, [r3, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007112:	4a56      	ldr	r2, [pc, #344]	@ (800726c <UART_SetConfig+0x198>)
 8007114:	4293      	cmp	r3, r2
 8007116:	d112      	bne.n	800713e <UART_SetConfig+0x6a>
 8007118:	4b55      	ldr	r3, [pc, #340]	@ (8007270 <UART_SetConfig+0x19c>)
 800711a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800711c:	f003 0303 	and.w	r3, r3, #3
 8007120:	2b02      	cmp	r3, #2
 8007122:	f000 8091 	beq.w	8007248 <UART_SetConfig+0x174>
 8007126:	2b03      	cmp	r3, #3
 8007128:	d022      	beq.n	8007170 <UART_SetConfig+0x9c>
 800712a:	2b01      	cmp	r3, #1
 800712c:	f040 8092 	bne.w	8007254 <UART_SetConfig+0x180>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007130:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8007134:	f040 8085 	bne.w	8007242 <UART_SetConfig+0x16e>
        pclk = HAL_RCC_GetSysClockFreq();
 8007138:	f7fe fc54 	bl	80059e4 <HAL_RCC_GetSysClockFreq>
        break;
 800713c:	e06b      	b.n	8007216 <UART_SetConfig+0x142>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800713e:	4a4d      	ldr	r2, [pc, #308]	@ (8007274 <UART_SetConfig+0x1a0>)
 8007140:	4293      	cmp	r3, r2
 8007142:	d12e      	bne.n	80071a2 <UART_SetConfig+0xce>
 8007144:	4b4a      	ldr	r3, [pc, #296]	@ (8007270 <UART_SetConfig+0x19c>)
 8007146:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007148:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800714c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007150:	d07a      	beq.n	8007248 <UART_SetConfig+0x174>
 8007152:	d80a      	bhi.n	800716a <UART_SetConfig+0x96>
 8007154:	2b00      	cmp	r3, #0
 8007156:	f000 8083 	beq.w	8007260 <UART_SetConfig+0x18c>
 800715a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800715e:	d0e7      	beq.n	8007130 <UART_SetConfig+0x5c>
        ret = HAL_ERROR;
 8007160:	2001      	movs	r0, #1
  huart->RxISR = NULL;
 8007162:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 8007164:	e9c4 331a 	strd	r3, r3, [r4, #104]	@ 0x68
}
 8007168:	bd38      	pop	{r3, r4, r5, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 800716a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800716e:	d1f7      	bne.n	8007160 <UART_SetConfig+0x8c>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007170:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8007174:	4840      	ldr	r0, [pc, #256]	@ (8007278 <UART_SetConfig+0x1a4>)
 8007176:	d156      	bne.n	8007226 <UART_SetConfig+0x152>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007178:	6862      	ldr	r2, [r4, #4]
 800717a:	0853      	lsrs	r3, r2, #1
 800717c:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8007180:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007184:	f64f 72ef 	movw	r2, #65519	@ 0xffef
 8007188:	f1a3 0110 	sub.w	r1, r3, #16
 800718c:	4291      	cmp	r1, r2
 800718e:	d8e7      	bhi.n	8007160 <UART_SetConfig+0x8c>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007190:	f023 020f 	bic.w	r2, r3, #15
        huart->Instance->BRR = brrtemp;
 8007194:	6821      	ldr	r1, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007196:	b292      	uxth	r2, r2
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007198:	f3c3 0342 	ubfx	r3, r3, #1, #3
        huart->Instance->BRR = brrtemp;
 800719c:	4313      	orrs	r3, r2
 800719e:	60cb      	str	r3, [r1, #12]
 80071a0:	e03b      	b.n	800721a <UART_SetConfig+0x146>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80071a2:	4a36      	ldr	r2, [pc, #216]	@ (800727c <UART_SetConfig+0x1a8>)
 80071a4:	4293      	cmp	r3, r2
 80071a6:	d10f      	bne.n	80071c8 <UART_SetConfig+0xf4>
 80071a8:	4b31      	ldr	r3, [pc, #196]	@ (8007270 <UART_SetConfig+0x19c>)
 80071aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80071ac:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 80071b0:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80071b4:	d048      	beq.n	8007248 <UART_SetConfig+0x174>
 80071b6:	d804      	bhi.n	80071c2 <UART_SetConfig+0xee>
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d051      	beq.n	8007260 <UART_SetConfig+0x18c>
 80071bc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80071c0:	e7cd      	b.n	800715e <UART_SetConfig+0x8a>
 80071c2:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80071c6:	e7d2      	b.n	800716e <UART_SetConfig+0x9a>
 80071c8:	4a2d      	ldr	r2, [pc, #180]	@ (8007280 <UART_SetConfig+0x1ac>)
 80071ca:	4293      	cmp	r3, r2
 80071cc:	d10f      	bne.n	80071ee <UART_SetConfig+0x11a>
 80071ce:	4b28      	ldr	r3, [pc, #160]	@ (8007270 <UART_SetConfig+0x19c>)
 80071d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80071d2:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80071d6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80071da:	d035      	beq.n	8007248 <UART_SetConfig+0x174>
 80071dc:	d804      	bhi.n	80071e8 <UART_SetConfig+0x114>
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d03e      	beq.n	8007260 <UART_SetConfig+0x18c>
 80071e2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80071e6:	e7ba      	b.n	800715e <UART_SetConfig+0x8a>
 80071e8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80071ec:	e7bf      	b.n	800716e <UART_SetConfig+0x9a>
 80071ee:	4a25      	ldr	r2, [pc, #148]	@ (8007284 <UART_SetConfig+0x1b0>)
 80071f0:	4293      	cmp	r3, r2
 80071f2:	d1b5      	bne.n	8007160 <UART_SetConfig+0x8c>
 80071f4:	4b1e      	ldr	r3, [pc, #120]	@ (8007270 <UART_SetConfig+0x19c>)
 80071f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80071f8:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 80071fc:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007200:	d022      	beq.n	8007248 <UART_SetConfig+0x174>
 8007202:	d803      	bhi.n	800720c <UART_SetConfig+0x138>
 8007204:	b363      	cbz	r3, 8007260 <UART_SetConfig+0x18c>
 8007206:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800720a:	e7a8      	b.n	800715e <UART_SetConfig+0x8a>
 800720c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8007210:	e7ad      	b.n	800716e <UART_SetConfig+0x9a>
        pclk = HAL_RCC_GetPCLK2Freq();
 8007212:	f7fe fccb 	bl	8005bac <HAL_RCC_GetPCLK2Freq>
    if (pclk != 0U)
 8007216:	2800      	cmp	r0, #0
 8007218:	d1ae      	bne.n	8007178 <UART_SetConfig+0xa4>
        pclk = (uint32_t) HSI_VALUE;
 800721a:	2000      	movs	r0, #0
 800721c:	e7a1      	b.n	8007162 <UART_SetConfig+0x8e>
        pclk = HAL_RCC_GetPCLK1Freq();
 800721e:	f7fe fcad 	bl	8005b7c <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8007222:	2800      	cmp	r0, #0
 8007224:	d0f9      	beq.n	800721a <UART_SetConfig+0x146>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007226:	6862      	ldr	r2, [r4, #4]
 8007228:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 800722c:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007230:	f64f 72ef 	movw	r2, #65519	@ 0xffef
 8007234:	f1a3 0110 	sub.w	r1, r3, #16
 8007238:	4291      	cmp	r1, r2
 800723a:	d891      	bhi.n	8007160 <UART_SetConfig+0x8c>
        huart->Instance->BRR = (uint16_t)usartdiv;
 800723c:	6822      	ldr	r2, [r4, #0]
 800723e:	60d3      	str	r3, [r2, #12]
 8007240:	e7eb      	b.n	800721a <UART_SetConfig+0x146>
        pclk = HAL_RCC_GetSysClockFreq();
 8007242:	f7fe fbcf 	bl	80059e4 <HAL_RCC_GetSysClockFreq>
        break;
 8007246:	e7ec      	b.n	8007222 <UART_SetConfig+0x14e>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007248:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 800724c:	d094      	beq.n	8007178 <UART_SetConfig+0xa4>
 800724e:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8007252:	e7e8      	b.n	8007226 <UART_SetConfig+0x152>
 8007254:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8007258:	d0db      	beq.n	8007212 <UART_SetConfig+0x13e>
        pclk = HAL_RCC_GetPCLK2Freq();
 800725a:	f7fe fca7 	bl	8005bac <HAL_RCC_GetPCLK2Freq>
        break;
 800725e:	e7e0      	b.n	8007222 <UART_SetConfig+0x14e>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007260:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8007264:	d1db      	bne.n	800721e <UART_SetConfig+0x14a>
        pclk = HAL_RCC_GetPCLK1Freq();
 8007266:	f7fe fc89 	bl	8005b7c <HAL_RCC_GetPCLK1Freq>
        break;
 800726a:	e7d4      	b.n	8007216 <UART_SetConfig+0x142>
 800726c:	40013800 	.word	0x40013800
 8007270:	40021000 	.word	0x40021000
 8007274:	40004400 	.word	0x40004400
 8007278:	007a1200 	.word	0x007a1200
 800727c:	40004800 	.word	0x40004800
 8007280:	40004c00 	.word	0x40004c00
 8007284:	40005000 	.word	0x40005000

08007288 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007288:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800728a:	071a      	lsls	r2, r3, #28
{
 800728c:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800728e:	d506      	bpl.n	800729e <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007290:	6801      	ldr	r1, [r0, #0]
 8007292:	6b44      	ldr	r4, [r0, #52]	@ 0x34
 8007294:	684a      	ldr	r2, [r1, #4]
 8007296:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800729a:	4322      	orrs	r2, r4
 800729c:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800729e:	07dc      	lsls	r4, r3, #31
 80072a0:	d506      	bpl.n	80072b0 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80072a2:	6801      	ldr	r1, [r0, #0]
 80072a4:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 80072a6:	684a      	ldr	r2, [r1, #4]
 80072a8:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 80072ac:	4322      	orrs	r2, r4
 80072ae:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80072b0:	0799      	lsls	r1, r3, #30
 80072b2:	d506      	bpl.n	80072c2 <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80072b4:	6801      	ldr	r1, [r0, #0]
 80072b6:	6ac4      	ldr	r4, [r0, #44]	@ 0x2c
 80072b8:	684a      	ldr	r2, [r1, #4]
 80072ba:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80072be:	4322      	orrs	r2, r4
 80072c0:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80072c2:	075a      	lsls	r2, r3, #29
 80072c4:	d506      	bpl.n	80072d4 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80072c6:	6801      	ldr	r1, [r0, #0]
 80072c8:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 80072ca:	684a      	ldr	r2, [r1, #4]
 80072cc:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80072d0:	4322      	orrs	r2, r4
 80072d2:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80072d4:	06dc      	lsls	r4, r3, #27
 80072d6:	d506      	bpl.n	80072e6 <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80072d8:	6801      	ldr	r1, [r0, #0]
 80072da:	6b84      	ldr	r4, [r0, #56]	@ 0x38
 80072dc:	688a      	ldr	r2, [r1, #8]
 80072de:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80072e2:	4322      	orrs	r2, r4
 80072e4:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80072e6:	0699      	lsls	r1, r3, #26
 80072e8:	d506      	bpl.n	80072f8 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80072ea:	6801      	ldr	r1, [r0, #0]
 80072ec:	6bc4      	ldr	r4, [r0, #60]	@ 0x3c
 80072ee:	688a      	ldr	r2, [r1, #8]
 80072f0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80072f4:	4322      	orrs	r2, r4
 80072f6:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80072f8:	065a      	lsls	r2, r3, #25
 80072fa:	d50f      	bpl.n	800731c <UART_AdvFeatureConfig+0x94>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80072fc:	6801      	ldr	r1, [r0, #0]
 80072fe:	6c04      	ldr	r4, [r0, #64]	@ 0x40
 8007300:	684a      	ldr	r2, [r1, #4]
 8007302:	f422 1280 	bic.w	r2, r2, #1048576	@ 0x100000
 8007306:	4322      	orrs	r2, r4
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007308:	f5b4 1f80 	cmp.w	r4, #1048576	@ 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800730c:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800730e:	d105      	bne.n	800731c <UART_AdvFeatureConfig+0x94>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007310:	684a      	ldr	r2, [r1, #4]
 8007312:	6c44      	ldr	r4, [r0, #68]	@ 0x44
 8007314:	f422 02c0 	bic.w	r2, r2, #6291456	@ 0x600000
 8007318:	4322      	orrs	r2, r4
 800731a:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800731c:	061b      	lsls	r3, r3, #24
 800731e:	d506      	bpl.n	800732e <UART_AdvFeatureConfig+0xa6>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007320:	6802      	ldr	r2, [r0, #0]
 8007322:	6c81      	ldr	r1, [r0, #72]	@ 0x48
 8007324:	6853      	ldr	r3, [r2, #4]
 8007326:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 800732a:	430b      	orrs	r3, r1
 800732c:	6053      	str	r3, [r2, #4]
}
 800732e:	bd10      	pop	{r4, pc}

08007330 <UART_WaitOnFlagUntilTimeout>:
{
 8007330:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007334:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007338:	4604      	mov	r4, r0
 800733a:	460d      	mov	r5, r1
 800733c:	4617      	mov	r7, r2
 800733e:	4698      	mov	r8, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007340:	6822      	ldr	r2, [r4, #0]
 8007342:	69d3      	ldr	r3, [r2, #28]
 8007344:	ea35 0303 	bics.w	r3, r5, r3
 8007348:	bf0c      	ite	eq
 800734a:	2301      	moveq	r3, #1
 800734c:	2300      	movne	r3, #0
 800734e:	42bb      	cmp	r3, r7
 8007350:	d001      	beq.n	8007356 <UART_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
 8007352:	2000      	movs	r0, #0
 8007354:	e022      	b.n	800739c <UART_WaitOnFlagUntilTimeout+0x6c>
    if (Timeout != HAL_MAX_DELAY)
 8007356:	f1b9 3fff 	cmp.w	r9, #4294967295
 800735a:	d0f2      	beq.n	8007342 <UART_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800735c:	f7fd f984 	bl	8004668 <HAL_GetTick>
 8007360:	eba0 0008 	sub.w	r0, r0, r8
 8007364:	4548      	cmp	r0, r9
 8007366:	d829      	bhi.n	80073bc <UART_WaitOnFlagUntilTimeout+0x8c>
 8007368:	f1b9 0f00 	cmp.w	r9, #0
 800736c:	d026      	beq.n	80073bc <UART_WaitOnFlagUntilTimeout+0x8c>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800736e:	6821      	ldr	r1, [r4, #0]
 8007370:	680b      	ldr	r3, [r1, #0]
 8007372:	075a      	lsls	r2, r3, #29
 8007374:	d5e4      	bpl.n	8007340 <UART_WaitOnFlagUntilTimeout+0x10>
 8007376:	2d80      	cmp	r5, #128	@ 0x80
 8007378:	d0e2      	beq.n	8007340 <UART_WaitOnFlagUntilTimeout+0x10>
 800737a:	2d40      	cmp	r5, #64	@ 0x40
 800737c:	d0e0      	beq.n	8007340 <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800737e:	69ce      	ldr	r6, [r1, #28]
 8007380:	f016 0608 	ands.w	r6, r6, #8
 8007384:	d00c      	beq.n	80073a0 <UART_WaitOnFlagUntilTimeout+0x70>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007386:	2508      	movs	r5, #8
          UART_EndRxTransfer(huart);
 8007388:	4620      	mov	r0, r4
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800738a:	620d      	str	r5, [r1, #32]
          UART_EndRxTransfer(huart);
 800738c:	f7ff fd83 	bl	8006e96 <UART_EndRxTransfer>
          __HAL_UNLOCK(huart);
 8007390:	2300      	movs	r3, #0
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007392:	f8c4 5084 	str.w	r5, [r4, #132]	@ 0x84
          __HAL_UNLOCK(huart);
 8007396:	f884 3078 	strb.w	r3, [r4, #120]	@ 0x78
          return HAL_ERROR;
 800739a:	2001      	movs	r0, #1
}
 800739c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80073a0:	69cb      	ldr	r3, [r1, #28]
 80073a2:	051b      	lsls	r3, r3, #20
 80073a4:	d5cc      	bpl.n	8007340 <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80073a6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80073aa:	620b      	str	r3, [r1, #32]
          UART_EndRxTransfer(huart);
 80073ac:	4620      	mov	r0, r4
 80073ae:	f7ff fd72 	bl	8006e96 <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80073b2:	2320      	movs	r3, #32
 80073b4:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
          __HAL_UNLOCK(huart);
 80073b8:	f884 6078 	strb.w	r6, [r4, #120]	@ 0x78
        return HAL_TIMEOUT;
 80073bc:	2003      	movs	r0, #3
 80073be:	e7ed      	b.n	800739c <UART_WaitOnFlagUntilTimeout+0x6c>

080073c0 <HAL_UART_Transmit>:
{
 80073c0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80073c4:	4698      	mov	r8, r3
  if (huart->gState == HAL_UART_STATE_READY)
 80073c6:	6fc3      	ldr	r3, [r0, #124]	@ 0x7c
 80073c8:	2b20      	cmp	r3, #32
{
 80073ca:	4604      	mov	r4, r0
 80073cc:	460e      	mov	r6, r1
 80073ce:	4617      	mov	r7, r2
  if (huart->gState == HAL_UART_STATE_READY)
 80073d0:	d143      	bne.n	800745a <HAL_UART_Transmit+0x9a>
    if ((pData == NULL) || (Size == 0U))
 80073d2:	2900      	cmp	r1, #0
 80073d4:	d043      	beq.n	800745e <HAL_UART_Transmit+0x9e>
 80073d6:	2a00      	cmp	r2, #0
 80073d8:	d041      	beq.n	800745e <HAL_UART_Transmit+0x9e>
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80073da:	2321      	movs	r3, #33	@ 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80073dc:	2500      	movs	r5, #0
 80073de:	f8c0 5084 	str.w	r5, [r0, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80073e2:	67c3      	str	r3, [r0, #124]	@ 0x7c
    tickstart = HAL_GetTick();
 80073e4:	f7fd f940 	bl	8004668 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80073e8:	68a3      	ldr	r3, [r4, #8]
    huart->TxXferSize  = Size;
 80073ea:	f8a4 7050 	strh.w	r7, [r4, #80]	@ 0x50
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80073ee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
    tickstart = HAL_GetTick();
 80073f2:	4681      	mov	r9, r0
    huart->TxXferCount = Size;
 80073f4:	f8a4 7052 	strh.w	r7, [r4, #82]	@ 0x52
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80073f8:	d103      	bne.n	8007402 <HAL_UART_Transmit+0x42>
 80073fa:	6923      	ldr	r3, [r4, #16]
 80073fc:	b90b      	cbnz	r3, 8007402 <HAL_UART_Transmit+0x42>
 80073fe:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 8007400:	461e      	mov	r6, r3
    while (huart->TxXferCount > 0U)
 8007402:	f8b4 2052 	ldrh.w	r2, [r4, #82]	@ 0x52
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007406:	f8cd 8000 	str.w	r8, [sp]
    while (huart->TxXferCount > 0U)
 800740a:	b292      	uxth	r2, r2
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800740c:	464b      	mov	r3, r9
    while (huart->TxXferCount > 0U)
 800740e:	b93a      	cbnz	r2, 8007420 <HAL_UART_Transmit+0x60>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007410:	2140      	movs	r1, #64	@ 0x40
 8007412:	4620      	mov	r0, r4
 8007414:	f7ff ff8c 	bl	8007330 <UART_WaitOnFlagUntilTimeout>
 8007418:	2320      	movs	r3, #32
 800741a:	b940      	cbnz	r0, 800742e <HAL_UART_Transmit+0x6e>
    huart->gState = HAL_UART_STATE_READY;
 800741c:	67e3      	str	r3, [r4, #124]	@ 0x7c
    return HAL_OK;
 800741e:	e008      	b.n	8007432 <HAL_UART_Transmit+0x72>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007420:	2200      	movs	r2, #0
 8007422:	2180      	movs	r1, #128	@ 0x80
 8007424:	4620      	mov	r0, r4
 8007426:	f7ff ff83 	bl	8007330 <UART_WaitOnFlagUntilTimeout>
 800742a:	b128      	cbz	r0, 8007438 <HAL_UART_Transmit+0x78>
        huart->gState = HAL_UART_STATE_READY;
 800742c:	2320      	movs	r3, #32
 800742e:	67e3      	str	r3, [r4, #124]	@ 0x7c
        return HAL_TIMEOUT;
 8007430:	2003      	movs	r0, #3
}
 8007432:	b003      	add	sp, #12
 8007434:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007438:	6822      	ldr	r2, [r4, #0]
      if (pdata8bits == NULL)
 800743a:	b95e      	cbnz	r6, 8007454 <HAL_UART_Transmit+0x94>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800743c:	f835 3b02 	ldrh.w	r3, [r5], #2
 8007440:	f3c3 0308 	ubfx	r3, r3, #0, #9
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007444:	8513      	strh	r3, [r2, #40]	@ 0x28
      huart->TxXferCount--;
 8007446:	f8b4 2052 	ldrh.w	r2, [r4, #82]	@ 0x52
 800744a:	3a01      	subs	r2, #1
 800744c:	b292      	uxth	r2, r2
 800744e:	f8a4 2052 	strh.w	r2, [r4, #82]	@ 0x52
 8007452:	e7d6      	b.n	8007402 <HAL_UART_Transmit+0x42>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007454:	f816 3b01 	ldrb.w	r3, [r6], #1
 8007458:	e7f4      	b.n	8007444 <HAL_UART_Transmit+0x84>
    return HAL_BUSY;
 800745a:	2002      	movs	r0, #2
 800745c:	e7e9      	b.n	8007432 <HAL_UART_Transmit+0x72>
      return  HAL_ERROR;
 800745e:	2001      	movs	r0, #1
 8007460:	e7e7      	b.n	8007432 <HAL_UART_Transmit+0x72>

08007462 <UART_CheckIdleState>:
{
 8007462:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007464:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007466:	2600      	movs	r6, #0
 8007468:	f8c0 6084 	str.w	r6, [r0, #132]	@ 0x84
  tickstart = HAL_GetTick();
 800746c:	f7fd f8fc 	bl	8004668 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007470:	6823      	ldr	r3, [r4, #0]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	071a      	lsls	r2, r3, #28
  tickstart = HAL_GetTick();
 8007476:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007478:	d51b      	bpl.n	80074b2 <UART_CheckIdleState+0x50>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800747a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800747e:	9300      	str	r3, [sp, #0]
 8007480:	4632      	mov	r2, r6
 8007482:	4603      	mov	r3, r0
 8007484:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007488:	4620      	mov	r0, r4
 800748a:	f7ff ff51 	bl	8007330 <UART_WaitOnFlagUntilTimeout>
 800748e:	b180      	cbz	r0, 80074b2 <UART_CheckIdleState+0x50>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8007490:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007492:	e852 3f00 	ldrex	r3, [r2]
 8007496:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800749a:	e842 3100 	strex	r1, r3, [r2]
 800749e:	2900      	cmp	r1, #0
 80074a0:	d1f6      	bne.n	8007490 <UART_CheckIdleState+0x2e>
      huart->gState = HAL_UART_STATE_READY;
 80074a2:	2320      	movs	r3, #32
 80074a4:	67e3      	str	r3, [r4, #124]	@ 0x7c
      return HAL_TIMEOUT;
 80074a6:	2003      	movs	r0, #3
      __HAL_UNLOCK(huart);
 80074a8:	2300      	movs	r3, #0
 80074aa:	f884 3078 	strb.w	r3, [r4, #120]	@ 0x78
}
 80074ae:	b002      	add	sp, #8
 80074b0:	bd70      	pop	{r4, r5, r6, pc}
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80074b2:	6823      	ldr	r3, [r4, #0]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	075b      	lsls	r3, r3, #29
 80074b8:	d524      	bpl.n	8007504 <UART_CheckIdleState+0xa2>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80074ba:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80074be:	9300      	str	r3, [sp, #0]
 80074c0:	2200      	movs	r2, #0
 80074c2:	462b      	mov	r3, r5
 80074c4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80074c8:	4620      	mov	r0, r4
 80074ca:	f7ff ff31 	bl	8007330 <UART_WaitOnFlagUntilTimeout>
 80074ce:	b1c8      	cbz	r0, 8007504 <UART_CheckIdleState+0xa2>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80074d0:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074d2:	e852 3f00 	ldrex	r3, [r2]
 80074d6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074da:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 80074de:	6822      	ldr	r2, [r4, #0]
 80074e0:	2900      	cmp	r1, #0
 80074e2:	d1f5      	bne.n	80074d0 <UART_CheckIdleState+0x6e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074e4:	f102 0308 	add.w	r3, r2, #8
 80074e8:	e853 3f00 	ldrex	r3, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80074ec:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074f0:	f102 0008 	add.w	r0, r2, #8
 80074f4:	e840 3100 	strex	r1, r3, [r0]
 80074f8:	2900      	cmp	r1, #0
 80074fa:	d1f3      	bne.n	80074e4 <UART_CheckIdleState+0x82>
      huart->RxState = HAL_UART_STATE_READY;
 80074fc:	2320      	movs	r3, #32
 80074fe:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
      return HAL_TIMEOUT;
 8007502:	e7d0      	b.n	80074a6 <UART_CheckIdleState+0x44>
  huart->gState = HAL_UART_STATE_READY;
 8007504:	2320      	movs	r3, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007506:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8007508:	67e3      	str	r3, [r4, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800750a:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800750e:	6620      	str	r0, [r4, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007510:	6660      	str	r0, [r4, #100]	@ 0x64
  return HAL_OK;
 8007512:	e7c9      	b.n	80074a8 <UART_CheckIdleState+0x46>

08007514 <HAL_UART_Init>:
{
 8007514:	b510      	push	{r4, lr}
  if (huart == NULL)
 8007516:	4604      	mov	r4, r0
 8007518:	b340      	cbz	r0, 800756c <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 800751a:	6fc3      	ldr	r3, [r0, #124]	@ 0x7c
 800751c:	b91b      	cbnz	r3, 8007526 <HAL_UART_Init+0x12>
    huart->Lock = HAL_UNLOCKED;
 800751e:	f880 3078 	strb.w	r3, [r0, #120]	@ 0x78
    HAL_UART_MspInit(huart);
 8007522:	f7fc fe99 	bl	8004258 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8007526:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8007528:	2324      	movs	r3, #36	@ 0x24
 800752a:	67e3      	str	r3, [r4, #124]	@ 0x7c
  __HAL_UART_DISABLE(huart);
 800752c:	6813      	ldr	r3, [r2, #0]
 800752e:	f023 0301 	bic.w	r3, r3, #1
 8007532:	6013      	str	r3, [r2, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007534:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8007536:	b113      	cbz	r3, 800753e <HAL_UART_Init+0x2a>
    UART_AdvFeatureConfig(huart);
 8007538:	4620      	mov	r0, r4
 800753a:	f7ff fea5 	bl	8007288 <UART_AdvFeatureConfig>
  if (UART_SetConfig(huart) == HAL_ERROR)
 800753e:	4620      	mov	r0, r4
 8007540:	f7ff fdc8 	bl	80070d4 <UART_SetConfig>
 8007544:	2801      	cmp	r0, #1
 8007546:	d011      	beq.n	800756c <HAL_UART_Init+0x58>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007548:	6823      	ldr	r3, [r4, #0]
 800754a:	685a      	ldr	r2, [r3, #4]
 800754c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007550:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007552:	689a      	ldr	r2, [r3, #8]
 8007554:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007558:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 800755a:	681a      	ldr	r2, [r3, #0]
 800755c:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 8007560:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 8007562:	601a      	str	r2, [r3, #0]
}
 8007564:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 8007568:	f7ff bf7b 	b.w	8007462 <UART_CheckIdleState>
}
 800756c:	2001      	movs	r0, #1
 800756e:	bd10      	pop	{r4, pc}

08007570 <UART_Start_Receive_DMA>:
{
 8007570:	b570      	push	{r4, r5, r6, lr}
 8007572:	4613      	mov	r3, r2
 8007574:	4604      	mov	r4, r0
  huart->RxXferSize = Size;
 8007576:	f8a0 2058 	strh.w	r2, [r0, #88]	@ 0x58
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800757a:	2200      	movs	r2, #0
  huart->pRxBuffPtr = pData;
 800757c:	6541      	str	r1, [r0, #84]	@ 0x54
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800757e:	f8c0 2084 	str.w	r2, [r0, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007582:	2022      	movs	r0, #34	@ 0x22
 8007584:	f8c4 0080 	str.w	r0, [r4, #128]	@ 0x80
  if (huart->hdmarx != NULL)
 8007588:	6f60      	ldr	r0, [r4, #116]	@ 0x74
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800758a:	6825      	ldr	r5, [r4, #0]
  if (huart->hdmarx != NULL)
 800758c:	b1a0      	cbz	r0, 80075b8 <UART_Start_Receive_DMA+0x48>
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800758e:	4e1c      	ldr	r6, [pc, #112]	@ (8007600 <UART_Start_Receive_DMA+0x90>)
 8007590:	6286      	str	r6, [r0, #40]	@ 0x28
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007592:	4e1c      	ldr	r6, [pc, #112]	@ (8007604 <UART_Start_Receive_DMA+0x94>)
 8007594:	62c6      	str	r6, [r0, #44]	@ 0x2c
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007596:	4e1c      	ldr	r6, [pc, #112]	@ (8007608 <UART_Start_Receive_DMA+0x98>)
    huart->hdmarx->XferAbortCallback = NULL;
 8007598:	e9c0 620c 	strd	r6, r2, [r0, #48]	@ 0x30
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800759c:	460a      	mov	r2, r1
 800759e:	f105 0124 	add.w	r1, r5, #36	@ 0x24
 80075a2:	f7fd fe4f 	bl	8005244 <HAL_DMA_Start_IT>
 80075a6:	b138      	cbz	r0, 80075b8 <UART_Start_Receive_DMA+0x48>
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80075a8:	2310      	movs	r3, #16
 80075aa:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
      huart->RxState = HAL_UART_STATE_READY;
 80075ae:	2320      	movs	r3, #32
 80075b0:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
      return HAL_ERROR;
 80075b4:	2001      	movs	r0, #1
}
 80075b6:	bd70      	pop	{r4, r5, r6, pc}
  if (huart->Init.Parity != UART_PARITY_NONE)
 80075b8:	6922      	ldr	r2, [r4, #16]
 80075ba:	6823      	ldr	r3, [r4, #0]
 80075bc:	b13a      	cbz	r2, 80075ce <UART_Start_Receive_DMA+0x5e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075be:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80075c2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075c6:	e843 2100 	strex	r1, r2, [r3]
 80075ca:	2900      	cmp	r1, #0
 80075cc:	d1f7      	bne.n	80075be <UART_Start_Receive_DMA+0x4e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075ce:	f103 0208 	add.w	r2, r3, #8
 80075d2:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80075d6:	f042 0201 	orr.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075da:	f103 0008 	add.w	r0, r3, #8
 80075de:	e840 2100 	strex	r1, r2, [r0]
 80075e2:	2900      	cmp	r1, #0
 80075e4:	d1f3      	bne.n	80075ce <UART_Start_Receive_DMA+0x5e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075e6:	f103 0208 	add.w	r2, r3, #8
 80075ea:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80075ee:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075f2:	f103 0108 	add.w	r1, r3, #8
 80075f6:	e841 2000 	strex	r0, r2, [r1]
 80075fa:	2800      	cmp	r0, #0
 80075fc:	d1f3      	bne.n	80075e6 <UART_Start_Receive_DMA+0x76>
 80075fe:	e7da      	b.n	80075b6 <UART_Start_Receive_DMA+0x46>
 8007600:	08007047 	.word	0x08007047
 8007604:	08007027 	.word	0x08007027
 8007608:	08006fcf 	.word	0x08006fcf

0800760c <HAL_UART_Receive_DMA>:
  if (huart->RxState == HAL_UART_STATE_READY)
 800760c:	f8d0 3080 	ldr.w	r3, [r0, #128]	@ 0x80
 8007610:	2b20      	cmp	r3, #32
{
 8007612:	b430      	push	{r4, r5}
  if (huart->RxState == HAL_UART_STATE_READY)
 8007614:	d112      	bne.n	800763c <HAL_UART_Receive_DMA+0x30>
    if ((pData == NULL) || (Size == 0U))
 8007616:	b1a1      	cbz	r1, 8007642 <HAL_UART_Receive_DMA+0x36>
 8007618:	b19a      	cbz	r2, 8007642 <HAL_UART_Receive_DMA+0x36>
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800761a:	2300      	movs	r3, #0
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800761c:	6804      	ldr	r4, [r0, #0]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800761e:	6603      	str	r3, [r0, #96]	@ 0x60
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007620:	6863      	ldr	r3, [r4, #4]
 8007622:	021b      	lsls	r3, r3, #8
 8007624:	d507      	bpl.n	8007636 <HAL_UART_Receive_DMA+0x2a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007626:	e854 3f00 	ldrex	r3, [r4]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800762a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800762e:	e844 3500 	strex	r5, r3, [r4]
 8007632:	2d00      	cmp	r5, #0
 8007634:	d1f7      	bne.n	8007626 <HAL_UART_Receive_DMA+0x1a>
}
 8007636:	bc30      	pop	{r4, r5}
    return (UART_Start_Receive_DMA(huart, pData, Size));
 8007638:	f7ff bf9a 	b.w	8007570 <UART_Start_Receive_DMA>
    return HAL_BUSY;
 800763c:	2002      	movs	r0, #2
}
 800763e:	bc30      	pop	{r4, r5}
 8007640:	4770      	bx	lr
      return HAL_ERROR;
 8007642:	2001      	movs	r0, #1
 8007644:	e7fb      	b.n	800763e <HAL_UART_Receive_DMA+0x32>

08007646 <osKernelStart>:
=======
 8004d74:	f7ff ffd5 	bl	8004d22 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004d78:	bd10      	pop	{r4, pc}

08004d7a <HAL_UARTEx_RxEventCallback>:
}
 8004d7a:	4770      	bx	lr

08004d7c <UART_DMARxHalfCplt>:
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004d7c:	6a40      	ldr	r0, [r0, #36]	@ 0x24
{
 8004d7e:	b508      	push	{r3, lr}
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8004d80:	2301      	movs	r3, #1
 8004d82:	6643      	str	r3, [r0, #100]	@ 0x64
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d84:	6e03      	ldr	r3, [r0, #96]	@ 0x60
 8004d86:	2b01      	cmp	r3, #1
 8004d88:	d105      	bne.n	8004d96 <UART_DMARxHalfCplt+0x1a>
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8004d8a:	f8b0 1058 	ldrh.w	r1, [r0, #88]	@ 0x58
 8004d8e:	0849      	lsrs	r1, r1, #1
 8004d90:	f7ff fff3 	bl	8004d7a <HAL_UARTEx_RxEventCallback>
}
 8004d94:	bd08      	pop	{r3, pc}
    HAL_UART_RxHalfCpltCallback(huart);
 8004d96:	f7ff ffc3 	bl	8004d20 <HAL_UART_RxHalfCpltCallback>
}
 8004d9a:	e7fb      	b.n	8004d94 <UART_DMARxHalfCplt+0x18>

08004d9c <UART_DMAReceiveCplt>:
{
 8004d9c:	b508      	push	{r3, lr}
 8004d9e:	4603      	mov	r3, r0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004da0:	6a40      	ldr	r0, [r0, #36]	@ 0x24
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8004da2:	699b      	ldr	r3, [r3, #24]
 8004da4:	2b20      	cmp	r3, #32
 8004da6:	d032      	beq.n	8004e0e <UART_DMAReceiveCplt+0x72>
    huart->RxXferCount = 0U;
 8004da8:	2300      	movs	r3, #0
 8004daa:	f8a0 305a 	strh.w	r3, [r0, #90]	@ 0x5a
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004dae:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004db0:	e852 3f00 	ldrex	r3, [r2]
 8004db4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004db8:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 8004dbc:	6803      	ldr	r3, [r0, #0]
 8004dbe:	2900      	cmp	r1, #0
 8004dc0:	d1f5      	bne.n	8004dae <UART_DMAReceiveCplt+0x12>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dc2:	f103 0208 	add.w	r2, r3, #8
 8004dc6:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004dca:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dce:	f103 0c08 	add.w	ip, r3, #8
 8004dd2:	e84c 2100 	strex	r1, r2, [ip]
 8004dd6:	2900      	cmp	r1, #0
 8004dd8:	d1f3      	bne.n	8004dc2 <UART_DMAReceiveCplt+0x26>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dda:	f103 0208 	add.w	r2, r3, #8
 8004dde:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004de2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004de6:	f103 0c08 	add.w	ip, r3, #8
 8004dea:	e84c 2100 	strex	r1, r2, [ip]
 8004dee:	2900      	cmp	r1, #0
 8004df0:	d1f3      	bne.n	8004dda <UART_DMAReceiveCplt+0x3e>
    huart->RxState = HAL_UART_STATE_READY;
 8004df2:	2220      	movs	r2, #32
 8004df4:	f8c0 2080 	str.w	r2, [r0, #128]	@ 0x80
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004df8:	6e02      	ldr	r2, [r0, #96]	@ 0x60
 8004dfa:	2a01      	cmp	r2, #1
 8004dfc:	d107      	bne.n	8004e0e <UART_DMAReceiveCplt+0x72>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dfe:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e02:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e06:	e843 2100 	strex	r1, r2, [r3]
 8004e0a:	2900      	cmp	r1, #0
 8004e0c:	d1f7      	bne.n	8004dfe <UART_DMAReceiveCplt+0x62>
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004e0e:	2300      	movs	r3, #0
 8004e10:	6643      	str	r3, [r0, #100]	@ 0x64
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e12:	6e03      	ldr	r3, [r0, #96]	@ 0x60
 8004e14:	2b01      	cmp	r3, #1
 8004e16:	d104      	bne.n	8004e22 <UART_DMAReceiveCplt+0x86>
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004e18:	f8b0 1058 	ldrh.w	r1, [r0, #88]	@ 0x58
 8004e1c:	f7ff ffad 	bl	8004d7a <HAL_UARTEx_RxEventCallback>
}
 8004e20:	bd08      	pop	{r3, pc}
    HAL_UART_RxCpltCallback(huart);
 8004e22:	f7ff ff7c 	bl	8004d1e <HAL_UART_RxCpltCallback>
}
 8004e26:	e7fb      	b.n	8004e20 <UART_DMAReceiveCplt+0x84>

08004e28 <UART_SetConfig>:
{
 8004e28:	b538      	push	{r3, r4, r5, lr}
 8004e2a:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004e2c:	69c0      	ldr	r0, [r0, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004e2e:	6823      	ldr	r3, [r4, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004e30:	6925      	ldr	r5, [r4, #16]
 8004e32:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004e34:	6819      	ldr	r1, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004e36:	432a      	orrs	r2, r5
 8004e38:	6965      	ldr	r5, [r4, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004e3a:	f421 4116 	bic.w	r1, r1, #38400	@ 0x9600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004e3e:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004e40:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004e44:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004e46:	430a      	orrs	r2, r1
 8004e48:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004e4a:	685a      	ldr	r2, [r3, #4]
 8004e4c:	68e1      	ldr	r1, [r4, #12]
  tmpreg |= huart->Init.OneBitSampling;
 8004e4e:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004e50:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 8004e54:	430a      	orrs	r2, r1
 8004e56:	605a      	str	r2, [r3, #4]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004e58:	6899      	ldr	r1, [r3, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004e5a:	69a2      	ldr	r2, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004e5c:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
  tmpreg |= huart->Init.OneBitSampling;
 8004e60:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004e62:	430a      	orrs	r2, r1
 8004e64:	609a      	str	r2, [r3, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004e66:	4a56      	ldr	r2, [pc, #344]	@ (8004fc0 <UART_SetConfig+0x198>)
 8004e68:	4293      	cmp	r3, r2
 8004e6a:	d112      	bne.n	8004e92 <UART_SetConfig+0x6a>
 8004e6c:	4b55      	ldr	r3, [pc, #340]	@ (8004fc4 <UART_SetConfig+0x19c>)
 8004e6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e70:	f003 0303 	and.w	r3, r3, #3
 8004e74:	2b02      	cmp	r3, #2
 8004e76:	f000 8091 	beq.w	8004f9c <UART_SetConfig+0x174>
 8004e7a:	2b03      	cmp	r3, #3
 8004e7c:	d022      	beq.n	8004ec4 <UART_SetConfig+0x9c>
 8004e7e:	2b01      	cmp	r3, #1
 8004e80:	f040 8092 	bne.w	8004fa8 <UART_SetConfig+0x180>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004e84:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8004e88:	f040 8085 	bne.w	8004f96 <UART_SetConfig+0x16e>
        pclk = HAL_RCC_GetSysClockFreq();
 8004e8c:	f7fe fd40 	bl	8003910 <HAL_RCC_GetSysClockFreq>
        break;
 8004e90:	e06b      	b.n	8004f6a <UART_SetConfig+0x142>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004e92:	4a4d      	ldr	r2, [pc, #308]	@ (8004fc8 <UART_SetConfig+0x1a0>)
 8004e94:	4293      	cmp	r3, r2
 8004e96:	d12e      	bne.n	8004ef6 <UART_SetConfig+0xce>
 8004e98:	4b4a      	ldr	r3, [pc, #296]	@ (8004fc4 <UART_SetConfig+0x19c>)
 8004e9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e9c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004ea0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004ea4:	d07a      	beq.n	8004f9c <UART_SetConfig+0x174>
 8004ea6:	d80a      	bhi.n	8004ebe <UART_SetConfig+0x96>
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	f000 8083 	beq.w	8004fb4 <UART_SetConfig+0x18c>
 8004eae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004eb2:	d0e7      	beq.n	8004e84 <UART_SetConfig+0x5c>
        ret = HAL_ERROR;
 8004eb4:	2001      	movs	r0, #1
  huart->RxISR = NULL;
 8004eb6:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 8004eb8:	e9c4 331a 	strd	r3, r3, [r4, #104]	@ 0x68
}
 8004ebc:	bd38      	pop	{r3, r4, r5, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004ebe:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004ec2:	d1f7      	bne.n	8004eb4 <UART_SetConfig+0x8c>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004ec4:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8004ec8:	4840      	ldr	r0, [pc, #256]	@ (8004fcc <UART_SetConfig+0x1a4>)
 8004eca:	d156      	bne.n	8004f7a <UART_SetConfig+0x152>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004ecc:	6862      	ldr	r2, [r4, #4]
 8004ece:	0853      	lsrs	r3, r2, #1
 8004ed0:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8004ed4:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004ed8:	f64f 72ef 	movw	r2, #65519	@ 0xffef
 8004edc:	f1a3 0110 	sub.w	r1, r3, #16
 8004ee0:	4291      	cmp	r1, r2
 8004ee2:	d8e7      	bhi.n	8004eb4 <UART_SetConfig+0x8c>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004ee4:	f023 020f 	bic.w	r2, r3, #15
        huart->Instance->BRR = brrtemp;
 8004ee8:	6821      	ldr	r1, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004eea:	b292      	uxth	r2, r2
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004eec:	f3c3 0342 	ubfx	r3, r3, #1, #3
        huart->Instance->BRR = brrtemp;
 8004ef0:	4313      	orrs	r3, r2
 8004ef2:	60cb      	str	r3, [r1, #12]
 8004ef4:	e03b      	b.n	8004f6e <UART_SetConfig+0x146>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004ef6:	4a36      	ldr	r2, [pc, #216]	@ (8004fd0 <UART_SetConfig+0x1a8>)
 8004ef8:	4293      	cmp	r3, r2
 8004efa:	d10f      	bne.n	8004f1c <UART_SetConfig+0xf4>
 8004efc:	4b31      	ldr	r3, [pc, #196]	@ (8004fc4 <UART_SetConfig+0x19c>)
 8004efe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f00:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8004f04:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004f08:	d048      	beq.n	8004f9c <UART_SetConfig+0x174>
 8004f0a:	d804      	bhi.n	8004f16 <UART_SetConfig+0xee>
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d051      	beq.n	8004fb4 <UART_SetConfig+0x18c>
 8004f10:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004f14:	e7cd      	b.n	8004eb2 <UART_SetConfig+0x8a>
 8004f16:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004f1a:	e7d2      	b.n	8004ec2 <UART_SetConfig+0x9a>
 8004f1c:	4a2d      	ldr	r2, [pc, #180]	@ (8004fd4 <UART_SetConfig+0x1ac>)
 8004f1e:	4293      	cmp	r3, r2
 8004f20:	d10f      	bne.n	8004f42 <UART_SetConfig+0x11a>
 8004f22:	4b28      	ldr	r3, [pc, #160]	@ (8004fc4 <UART_SetConfig+0x19c>)
 8004f24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f26:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8004f2a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004f2e:	d035      	beq.n	8004f9c <UART_SetConfig+0x174>
 8004f30:	d804      	bhi.n	8004f3c <UART_SetConfig+0x114>
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d03e      	beq.n	8004fb4 <UART_SetConfig+0x18c>
 8004f36:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004f3a:	e7ba      	b.n	8004eb2 <UART_SetConfig+0x8a>
 8004f3c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004f40:	e7bf      	b.n	8004ec2 <UART_SetConfig+0x9a>
 8004f42:	4a25      	ldr	r2, [pc, #148]	@ (8004fd8 <UART_SetConfig+0x1b0>)
 8004f44:	4293      	cmp	r3, r2
 8004f46:	d1b5      	bne.n	8004eb4 <UART_SetConfig+0x8c>
 8004f48:	4b1e      	ldr	r3, [pc, #120]	@ (8004fc4 <UART_SetConfig+0x19c>)
 8004f4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f4c:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8004f50:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004f54:	d022      	beq.n	8004f9c <UART_SetConfig+0x174>
 8004f56:	d803      	bhi.n	8004f60 <UART_SetConfig+0x138>
 8004f58:	b363      	cbz	r3, 8004fb4 <UART_SetConfig+0x18c>
 8004f5a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004f5e:	e7a8      	b.n	8004eb2 <UART_SetConfig+0x8a>
 8004f60:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004f64:	e7ad      	b.n	8004ec2 <UART_SetConfig+0x9a>
        pclk = HAL_RCC_GetPCLK2Freq();
 8004f66:	f7fe fdb7 	bl	8003ad8 <HAL_RCC_GetPCLK2Freq>
    if (pclk != 0U)
 8004f6a:	2800      	cmp	r0, #0
 8004f6c:	d1ae      	bne.n	8004ecc <UART_SetConfig+0xa4>
        pclk = (uint32_t) HSI_VALUE;
 8004f6e:	2000      	movs	r0, #0
 8004f70:	e7a1      	b.n	8004eb6 <UART_SetConfig+0x8e>
        pclk = HAL_RCC_GetPCLK1Freq();
 8004f72:	f7fe fd99 	bl	8003aa8 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8004f76:	2800      	cmp	r0, #0
 8004f78:	d0f9      	beq.n	8004f6e <UART_SetConfig+0x146>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004f7a:	6862      	ldr	r2, [r4, #4]
 8004f7c:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 8004f80:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004f84:	f64f 72ef 	movw	r2, #65519	@ 0xffef
 8004f88:	f1a3 0110 	sub.w	r1, r3, #16
 8004f8c:	4291      	cmp	r1, r2
 8004f8e:	d891      	bhi.n	8004eb4 <UART_SetConfig+0x8c>
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004f90:	6822      	ldr	r2, [r4, #0]
 8004f92:	60d3      	str	r3, [r2, #12]
 8004f94:	e7eb      	b.n	8004f6e <UART_SetConfig+0x146>
        pclk = HAL_RCC_GetSysClockFreq();
 8004f96:	f7fe fcbb 	bl	8003910 <HAL_RCC_GetSysClockFreq>
        break;
 8004f9a:	e7ec      	b.n	8004f76 <UART_SetConfig+0x14e>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004f9c:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8004fa0:	d094      	beq.n	8004ecc <UART_SetConfig+0xa4>
 8004fa2:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8004fa6:	e7e8      	b.n	8004f7a <UART_SetConfig+0x152>
 8004fa8:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8004fac:	d0db      	beq.n	8004f66 <UART_SetConfig+0x13e>
        pclk = HAL_RCC_GetPCLK2Freq();
 8004fae:	f7fe fd93 	bl	8003ad8 <HAL_RCC_GetPCLK2Freq>
        break;
 8004fb2:	e7e0      	b.n	8004f76 <UART_SetConfig+0x14e>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004fb4:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8004fb8:	d1db      	bne.n	8004f72 <UART_SetConfig+0x14a>
        pclk = HAL_RCC_GetPCLK1Freq();
 8004fba:	f7fe fd75 	bl	8003aa8 <HAL_RCC_GetPCLK1Freq>
        break;
 8004fbe:	e7d4      	b.n	8004f6a <UART_SetConfig+0x142>
 8004fc0:	40013800 	.word	0x40013800
 8004fc4:	40021000 	.word	0x40021000
 8004fc8:	40004400 	.word	0x40004400
 8004fcc:	007a1200 	.word	0x007a1200
 8004fd0:	40004800 	.word	0x40004800
 8004fd4:	40004c00 	.word	0x40004c00
 8004fd8:	40005000 	.word	0x40005000

08004fdc <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004fdc:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8004fde:	071a      	lsls	r2, r3, #28
{
 8004fe0:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004fe2:	d506      	bpl.n	8004ff2 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004fe4:	6801      	ldr	r1, [r0, #0]
 8004fe6:	6b44      	ldr	r4, [r0, #52]	@ 0x34
 8004fe8:	684a      	ldr	r2, [r1, #4]
 8004fea:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004fee:	4322      	orrs	r2, r4
 8004ff0:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004ff2:	07dc      	lsls	r4, r3, #31
 8004ff4:	d506      	bpl.n	8005004 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004ff6:	6801      	ldr	r1, [r0, #0]
 8004ff8:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 8004ffa:	684a      	ldr	r2, [r1, #4]
 8004ffc:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8005000:	4322      	orrs	r2, r4
 8005002:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005004:	0799      	lsls	r1, r3, #30
 8005006:	d506      	bpl.n	8005016 <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005008:	6801      	ldr	r1, [r0, #0]
 800500a:	6ac4      	ldr	r4, [r0, #44]	@ 0x2c
 800500c:	684a      	ldr	r2, [r1, #4]
 800500e:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8005012:	4322      	orrs	r2, r4
 8005014:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005016:	075a      	lsls	r2, r3, #29
 8005018:	d506      	bpl.n	8005028 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800501a:	6801      	ldr	r1, [r0, #0]
 800501c:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 800501e:	684a      	ldr	r2, [r1, #4]
 8005020:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8005024:	4322      	orrs	r2, r4
 8005026:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005028:	06dc      	lsls	r4, r3, #27
 800502a:	d506      	bpl.n	800503a <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800502c:	6801      	ldr	r1, [r0, #0]
 800502e:	6b84      	ldr	r4, [r0, #56]	@ 0x38
 8005030:	688a      	ldr	r2, [r1, #8]
 8005032:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005036:	4322      	orrs	r2, r4
 8005038:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800503a:	0699      	lsls	r1, r3, #26
 800503c:	d506      	bpl.n	800504c <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800503e:	6801      	ldr	r1, [r0, #0]
 8005040:	6bc4      	ldr	r4, [r0, #60]	@ 0x3c
 8005042:	688a      	ldr	r2, [r1, #8]
 8005044:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005048:	4322      	orrs	r2, r4
 800504a:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800504c:	065a      	lsls	r2, r3, #25
 800504e:	d50f      	bpl.n	8005070 <UART_AdvFeatureConfig+0x94>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005050:	6801      	ldr	r1, [r0, #0]
 8005052:	6c04      	ldr	r4, [r0, #64]	@ 0x40
 8005054:	684a      	ldr	r2, [r1, #4]
 8005056:	f422 1280 	bic.w	r2, r2, #1048576	@ 0x100000
 800505a:	4322      	orrs	r2, r4
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800505c:	f5b4 1f80 	cmp.w	r4, #1048576	@ 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005060:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005062:	d105      	bne.n	8005070 <UART_AdvFeatureConfig+0x94>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005064:	684a      	ldr	r2, [r1, #4]
 8005066:	6c44      	ldr	r4, [r0, #68]	@ 0x44
 8005068:	f422 02c0 	bic.w	r2, r2, #6291456	@ 0x600000
 800506c:	4322      	orrs	r2, r4
 800506e:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005070:	061b      	lsls	r3, r3, #24
 8005072:	d506      	bpl.n	8005082 <UART_AdvFeatureConfig+0xa6>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005074:	6802      	ldr	r2, [r0, #0]
 8005076:	6c81      	ldr	r1, [r0, #72]	@ 0x48
 8005078:	6853      	ldr	r3, [r2, #4]
 800507a:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 800507e:	430b      	orrs	r3, r1
 8005080:	6053      	str	r3, [r2, #4]
}
 8005082:	bd10      	pop	{r4, pc}

08005084 <UART_WaitOnFlagUntilTimeout>:
{
 8005084:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005088:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800508c:	4604      	mov	r4, r0
 800508e:	460d      	mov	r5, r1
 8005090:	4617      	mov	r7, r2
 8005092:	4698      	mov	r8, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005094:	6822      	ldr	r2, [r4, #0]
 8005096:	69d3      	ldr	r3, [r2, #28]
 8005098:	ea35 0303 	bics.w	r3, r5, r3
 800509c:	bf0c      	ite	eq
 800509e:	2301      	moveq	r3, #1
 80050a0:	2300      	movne	r3, #0
 80050a2:	42bb      	cmp	r3, r7
 80050a4:	d001      	beq.n	80050aa <UART_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
 80050a6:	2000      	movs	r0, #0
 80050a8:	e022      	b.n	80050f0 <UART_WaitOnFlagUntilTimeout+0x6c>
    if (Timeout != HAL_MAX_DELAY)
 80050aa:	f1b9 3fff 	cmp.w	r9, #4294967295
 80050ae:	d0f2      	beq.n	8005096 <UART_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80050b0:	f7fd fa90 	bl	80025d4 <HAL_GetTick>
 80050b4:	eba0 0008 	sub.w	r0, r0, r8
 80050b8:	4548      	cmp	r0, r9
 80050ba:	d829      	bhi.n	8005110 <UART_WaitOnFlagUntilTimeout+0x8c>
 80050bc:	f1b9 0f00 	cmp.w	r9, #0
 80050c0:	d026      	beq.n	8005110 <UART_WaitOnFlagUntilTimeout+0x8c>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80050c2:	6821      	ldr	r1, [r4, #0]
 80050c4:	680b      	ldr	r3, [r1, #0]
 80050c6:	075a      	lsls	r2, r3, #29
 80050c8:	d5e4      	bpl.n	8005094 <UART_WaitOnFlagUntilTimeout+0x10>
 80050ca:	2d80      	cmp	r5, #128	@ 0x80
 80050cc:	d0e2      	beq.n	8005094 <UART_WaitOnFlagUntilTimeout+0x10>
 80050ce:	2d40      	cmp	r5, #64	@ 0x40
 80050d0:	d0e0      	beq.n	8005094 <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80050d2:	69ce      	ldr	r6, [r1, #28]
 80050d4:	f016 0608 	ands.w	r6, r6, #8
 80050d8:	d00c      	beq.n	80050f4 <UART_WaitOnFlagUntilTimeout+0x70>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80050da:	2508      	movs	r5, #8
          UART_EndRxTransfer(huart);
 80050dc:	4620      	mov	r0, r4
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80050de:	620d      	str	r5, [r1, #32]
          UART_EndRxTransfer(huart);
 80050e0:	f7ff fdf5 	bl	8004cce <UART_EndRxTransfer>
          __HAL_UNLOCK(huart);
 80050e4:	2300      	movs	r3, #0
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80050e6:	f8c4 5084 	str.w	r5, [r4, #132]	@ 0x84
          __HAL_UNLOCK(huart);
 80050ea:	f884 3078 	strb.w	r3, [r4, #120]	@ 0x78
          return HAL_ERROR;
 80050ee:	2001      	movs	r0, #1
}
 80050f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80050f4:	69cb      	ldr	r3, [r1, #28]
 80050f6:	051b      	lsls	r3, r3, #20
 80050f8:	d5cc      	bpl.n	8005094 <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80050fa:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80050fe:	620b      	str	r3, [r1, #32]
          UART_EndRxTransfer(huart);
 8005100:	4620      	mov	r0, r4
 8005102:	f7ff fde4 	bl	8004cce <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005106:	2320      	movs	r3, #32
 8005108:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
          __HAL_UNLOCK(huart);
 800510c:	f884 6078 	strb.w	r6, [r4, #120]	@ 0x78
        return HAL_TIMEOUT;
 8005110:	2003      	movs	r0, #3
 8005112:	e7ed      	b.n	80050f0 <UART_WaitOnFlagUntilTimeout+0x6c>

08005114 <HAL_UART_Transmit>:
{
 8005114:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005118:	4698      	mov	r8, r3
  if (huart->gState == HAL_UART_STATE_READY)
 800511a:	6fc3      	ldr	r3, [r0, #124]	@ 0x7c
 800511c:	2b20      	cmp	r3, #32
{
 800511e:	4604      	mov	r4, r0
 8005120:	460e      	mov	r6, r1
 8005122:	4617      	mov	r7, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8005124:	d143      	bne.n	80051ae <HAL_UART_Transmit+0x9a>
    if ((pData == NULL) || (Size == 0U))
 8005126:	2900      	cmp	r1, #0
 8005128:	d043      	beq.n	80051b2 <HAL_UART_Transmit+0x9e>
 800512a:	2a00      	cmp	r2, #0
 800512c:	d041      	beq.n	80051b2 <HAL_UART_Transmit+0x9e>
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800512e:	2321      	movs	r3, #33	@ 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005130:	2500      	movs	r5, #0
 8005132:	f8c0 5084 	str.w	r5, [r0, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005136:	67c3      	str	r3, [r0, #124]	@ 0x7c
    tickstart = HAL_GetTick();
 8005138:	f7fd fa4c 	bl	80025d4 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800513c:	68a3      	ldr	r3, [r4, #8]
    huart->TxXferSize  = Size;
 800513e:	f8a4 7050 	strh.w	r7, [r4, #80]	@ 0x50
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005142:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
    tickstart = HAL_GetTick();
 8005146:	4681      	mov	r9, r0
    huart->TxXferCount = Size;
 8005148:	f8a4 7052 	strh.w	r7, [r4, #82]	@ 0x52
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800514c:	d103      	bne.n	8005156 <HAL_UART_Transmit+0x42>
 800514e:	6923      	ldr	r3, [r4, #16]
 8005150:	b90b      	cbnz	r3, 8005156 <HAL_UART_Transmit+0x42>
 8005152:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 8005154:	461e      	mov	r6, r3
    while (huart->TxXferCount > 0U)
 8005156:	f8b4 2052 	ldrh.w	r2, [r4, #82]	@ 0x52
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800515a:	f8cd 8000 	str.w	r8, [sp]
    while (huart->TxXferCount > 0U)
 800515e:	b292      	uxth	r2, r2
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005160:	464b      	mov	r3, r9
    while (huart->TxXferCount > 0U)
 8005162:	b93a      	cbnz	r2, 8005174 <HAL_UART_Transmit+0x60>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005164:	2140      	movs	r1, #64	@ 0x40
 8005166:	4620      	mov	r0, r4
 8005168:	f7ff ff8c 	bl	8005084 <UART_WaitOnFlagUntilTimeout>
 800516c:	2320      	movs	r3, #32
 800516e:	b940      	cbnz	r0, 8005182 <HAL_UART_Transmit+0x6e>
    huart->gState = HAL_UART_STATE_READY;
 8005170:	67e3      	str	r3, [r4, #124]	@ 0x7c
    return HAL_OK;
 8005172:	e008      	b.n	8005186 <HAL_UART_Transmit+0x72>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005174:	2200      	movs	r2, #0
 8005176:	2180      	movs	r1, #128	@ 0x80
 8005178:	4620      	mov	r0, r4
 800517a:	f7ff ff83 	bl	8005084 <UART_WaitOnFlagUntilTimeout>
 800517e:	b128      	cbz	r0, 800518c <HAL_UART_Transmit+0x78>
        huart->gState = HAL_UART_STATE_READY;
 8005180:	2320      	movs	r3, #32
 8005182:	67e3      	str	r3, [r4, #124]	@ 0x7c
        return HAL_TIMEOUT;
 8005184:	2003      	movs	r0, #3
}
 8005186:	b003      	add	sp, #12
 8005188:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800518c:	6822      	ldr	r2, [r4, #0]
      if (pdata8bits == NULL)
 800518e:	b95e      	cbnz	r6, 80051a8 <HAL_UART_Transmit+0x94>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005190:	f835 3b02 	ldrh.w	r3, [r5], #2
 8005194:	f3c3 0308 	ubfx	r3, r3, #0, #9
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005198:	8513      	strh	r3, [r2, #40]	@ 0x28
      huart->TxXferCount--;
 800519a:	f8b4 2052 	ldrh.w	r2, [r4, #82]	@ 0x52
 800519e:	3a01      	subs	r2, #1
 80051a0:	b292      	uxth	r2, r2
 80051a2:	f8a4 2052 	strh.w	r2, [r4, #82]	@ 0x52
 80051a6:	e7d6      	b.n	8005156 <HAL_UART_Transmit+0x42>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80051a8:	f816 3b01 	ldrb.w	r3, [r6], #1
 80051ac:	e7f4      	b.n	8005198 <HAL_UART_Transmit+0x84>
    return HAL_BUSY;
 80051ae:	2002      	movs	r0, #2
 80051b0:	e7e9      	b.n	8005186 <HAL_UART_Transmit+0x72>
      return  HAL_ERROR;
 80051b2:	2001      	movs	r0, #1
 80051b4:	e7e7      	b.n	8005186 <HAL_UART_Transmit+0x72>

080051b6 <UART_CheckIdleState>:
{
 80051b6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80051b8:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051ba:	2600      	movs	r6, #0
 80051bc:	f8c0 6084 	str.w	r6, [r0, #132]	@ 0x84
  tickstart = HAL_GetTick();
 80051c0:	f7fd fa08 	bl	80025d4 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80051c4:	6823      	ldr	r3, [r4, #0]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	071a      	lsls	r2, r3, #28
  tickstart = HAL_GetTick();
 80051ca:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80051cc:	d51b      	bpl.n	8005206 <UART_CheckIdleState+0x50>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80051ce:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80051d2:	9300      	str	r3, [sp, #0]
 80051d4:	4632      	mov	r2, r6
 80051d6:	4603      	mov	r3, r0
 80051d8:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80051dc:	4620      	mov	r0, r4
 80051de:	f7ff ff51 	bl	8005084 <UART_WaitOnFlagUntilTimeout>
 80051e2:	b180      	cbz	r0, 8005206 <UART_CheckIdleState+0x50>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80051e4:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051e6:	e852 3f00 	ldrex	r3, [r2]
 80051ea:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051ee:	e842 3100 	strex	r1, r3, [r2]
 80051f2:	2900      	cmp	r1, #0
 80051f4:	d1f6      	bne.n	80051e4 <UART_CheckIdleState+0x2e>
      huart->gState = HAL_UART_STATE_READY;
 80051f6:	2320      	movs	r3, #32
 80051f8:	67e3      	str	r3, [r4, #124]	@ 0x7c
      return HAL_TIMEOUT;
 80051fa:	2003      	movs	r0, #3
      __HAL_UNLOCK(huart);
 80051fc:	2300      	movs	r3, #0
 80051fe:	f884 3078 	strb.w	r3, [r4, #120]	@ 0x78
}
 8005202:	b002      	add	sp, #8
 8005204:	bd70      	pop	{r4, r5, r6, pc}
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005206:	6823      	ldr	r3, [r4, #0]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	075b      	lsls	r3, r3, #29
 800520c:	d524      	bpl.n	8005258 <UART_CheckIdleState+0xa2>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800520e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005212:	9300      	str	r3, [sp, #0]
 8005214:	2200      	movs	r2, #0
 8005216:	462b      	mov	r3, r5
 8005218:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800521c:	4620      	mov	r0, r4
 800521e:	f7ff ff31 	bl	8005084 <UART_WaitOnFlagUntilTimeout>
 8005222:	b1c8      	cbz	r0, 8005258 <UART_CheckIdleState+0xa2>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005224:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005226:	e852 3f00 	ldrex	r3, [r2]
 800522a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800522e:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 8005232:	6822      	ldr	r2, [r4, #0]
 8005234:	2900      	cmp	r1, #0
 8005236:	d1f5      	bne.n	8005224 <UART_CheckIdleState+0x6e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005238:	f102 0308 	add.w	r3, r2, #8
 800523c:	e853 3f00 	ldrex	r3, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005240:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005244:	f102 0008 	add.w	r0, r2, #8
 8005248:	e840 3100 	strex	r1, r3, [r0]
 800524c:	2900      	cmp	r1, #0
 800524e:	d1f3      	bne.n	8005238 <UART_CheckIdleState+0x82>
      huart->RxState = HAL_UART_STATE_READY;
 8005250:	2320      	movs	r3, #32
 8005252:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
      return HAL_TIMEOUT;
 8005256:	e7d0      	b.n	80051fa <UART_CheckIdleState+0x44>
  huart->gState = HAL_UART_STATE_READY;
 8005258:	2320      	movs	r3, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800525a:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 800525c:	67e3      	str	r3, [r4, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800525e:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005262:	6620      	str	r0, [r4, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005264:	6660      	str	r0, [r4, #100]	@ 0x64
  return HAL_OK;
 8005266:	e7c9      	b.n	80051fc <UART_CheckIdleState+0x46>

08005268 <HAL_UART_Init>:
{
 8005268:	b510      	push	{r4, lr}
  if (huart == NULL)
 800526a:	4604      	mov	r4, r0
 800526c:	b340      	cbz	r0, 80052c0 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 800526e:	6fc3      	ldr	r3, [r0, #124]	@ 0x7c
 8005270:	b91b      	cbnz	r3, 800527a <HAL_UART_Init+0x12>
    huart->Lock = HAL_UNLOCKED;
 8005272:	f880 3078 	strb.w	r3, [r0, #120]	@ 0x78
    HAL_UART_MspInit(huart);
 8005276:	f7fc ffa5 	bl	80021c4 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 800527a:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800527c:	2324      	movs	r3, #36	@ 0x24
 800527e:	67e3      	str	r3, [r4, #124]	@ 0x7c
  __HAL_UART_DISABLE(huart);
 8005280:	6813      	ldr	r3, [r2, #0]
 8005282:	f023 0301 	bic.w	r3, r3, #1
 8005286:	6013      	str	r3, [r2, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005288:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800528a:	b113      	cbz	r3, 8005292 <HAL_UART_Init+0x2a>
    UART_AdvFeatureConfig(huart);
 800528c:	4620      	mov	r0, r4
 800528e:	f7ff fea5 	bl	8004fdc <UART_AdvFeatureConfig>
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005292:	4620      	mov	r0, r4
 8005294:	f7ff fdc8 	bl	8004e28 <UART_SetConfig>
 8005298:	2801      	cmp	r0, #1
 800529a:	d011      	beq.n	80052c0 <HAL_UART_Init+0x58>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800529c:	6823      	ldr	r3, [r4, #0]
 800529e:	685a      	ldr	r2, [r3, #4]
 80052a0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80052a4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80052a6:	689a      	ldr	r2, [r3, #8]
 80052a8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80052ac:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 80052ae:	681a      	ldr	r2, [r3, #0]
 80052b0:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 80052b4:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 80052b6:	601a      	str	r2, [r3, #0]
}
 80052b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 80052bc:	f7ff bf7b 	b.w	80051b6 <UART_CheckIdleState>
}
 80052c0:	2001      	movs	r0, #1
 80052c2:	bd10      	pop	{r4, pc}

080052c4 <UART_Start_Receive_DMA>:
{
 80052c4:	b570      	push	{r4, r5, r6, lr}
 80052c6:	4613      	mov	r3, r2
 80052c8:	4604      	mov	r4, r0
  huart->RxXferSize = Size;
 80052ca:	f8a0 2058 	strh.w	r2, [r0, #88]	@ 0x58
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052ce:	2200      	movs	r2, #0
  huart->pRxBuffPtr = pData;
 80052d0:	6541      	str	r1, [r0, #84]	@ 0x54
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052d2:	f8c0 2084 	str.w	r2, [r0, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80052d6:	2022      	movs	r0, #34	@ 0x22
 80052d8:	f8c4 0080 	str.w	r0, [r4, #128]	@ 0x80
  if (huart->hdmarx != NULL)
 80052dc:	6f60      	ldr	r0, [r4, #116]	@ 0x74
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80052de:	6825      	ldr	r5, [r4, #0]
  if (huart->hdmarx != NULL)
 80052e0:	b1a0      	cbz	r0, 800530c <UART_Start_Receive_DMA+0x48>
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80052e2:	4e1c      	ldr	r6, [pc, #112]	@ (8005354 <UART_Start_Receive_DMA+0x90>)
 80052e4:	6286      	str	r6, [r0, #40]	@ 0x28
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80052e6:	4e1c      	ldr	r6, [pc, #112]	@ (8005358 <UART_Start_Receive_DMA+0x94>)
 80052e8:	62c6      	str	r6, [r0, #44]	@ 0x2c
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80052ea:	4e1c      	ldr	r6, [pc, #112]	@ (800535c <UART_Start_Receive_DMA+0x98>)
    huart->hdmarx->XferAbortCallback = NULL;
 80052ec:	e9c0 620c 	strd	r6, r2, [r0, #48]	@ 0x30
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80052f0:	460a      	mov	r2, r1
 80052f2:	f105 0124 	add.w	r1, r5, #36	@ 0x24
 80052f6:	f7fd ff5b 	bl	80031b0 <HAL_DMA_Start_IT>
 80052fa:	b138      	cbz	r0, 800530c <UART_Start_Receive_DMA+0x48>
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80052fc:	2310      	movs	r3, #16
 80052fe:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
      huart->RxState = HAL_UART_STATE_READY;
 8005302:	2320      	movs	r3, #32
 8005304:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
      return HAL_ERROR;
 8005308:	2001      	movs	r0, #1
}
 800530a:	bd70      	pop	{r4, r5, r6, pc}
  if (huart->Init.Parity != UART_PARITY_NONE)
 800530c:	6922      	ldr	r2, [r4, #16]
 800530e:	6823      	ldr	r3, [r4, #0]
 8005310:	b13a      	cbz	r2, 8005322 <UART_Start_Receive_DMA+0x5e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005312:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005316:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800531a:	e843 2100 	strex	r1, r2, [r3]
 800531e:	2900      	cmp	r1, #0
 8005320:	d1f7      	bne.n	8005312 <UART_Start_Receive_DMA+0x4e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005322:	f103 0208 	add.w	r2, r3, #8
 8005326:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800532a:	f042 0201 	orr.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800532e:	f103 0008 	add.w	r0, r3, #8
 8005332:	e840 2100 	strex	r1, r2, [r0]
 8005336:	2900      	cmp	r1, #0
 8005338:	d1f3      	bne.n	8005322 <UART_Start_Receive_DMA+0x5e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800533a:	f103 0208 	add.w	r2, r3, #8
 800533e:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005342:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005346:	f103 0108 	add.w	r1, r3, #8
 800534a:	e841 2000 	strex	r0, r2, [r1]
 800534e:	2800      	cmp	r0, #0
 8005350:	d1f3      	bne.n	800533a <UART_Start_Receive_DMA+0x76>
 8005352:	e7da      	b.n	800530a <UART_Start_Receive_DMA+0x46>
 8005354:	08004d9d 	.word	0x08004d9d
 8005358:	08004d7d 	.word	0x08004d7d
 800535c:	08004d25 	.word	0x08004d25

08005360 <HAL_UART_Receive_DMA>:
  if (huart->RxState == HAL_UART_STATE_READY)
 8005360:	f8d0 3080 	ldr.w	r3, [r0, #128]	@ 0x80
 8005364:	2b20      	cmp	r3, #32
{
 8005366:	b430      	push	{r4, r5}
  if (huart->RxState == HAL_UART_STATE_READY)
 8005368:	d112      	bne.n	8005390 <HAL_UART_Receive_DMA+0x30>
    if ((pData == NULL) || (Size == 0U))
 800536a:	b1a1      	cbz	r1, 8005396 <HAL_UART_Receive_DMA+0x36>
 800536c:	b19a      	cbz	r2, 8005396 <HAL_UART_Receive_DMA+0x36>
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800536e:	2300      	movs	r3, #0
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005370:	6804      	ldr	r4, [r0, #0]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005372:	6603      	str	r3, [r0, #96]	@ 0x60
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005374:	6863      	ldr	r3, [r4, #4]
 8005376:	021b      	lsls	r3, r3, #8
 8005378:	d507      	bpl.n	800538a <HAL_UART_Receive_DMA+0x2a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800537a:	e854 3f00 	ldrex	r3, [r4]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800537e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005382:	e844 3500 	strex	r5, r3, [r4]
 8005386:	2d00      	cmp	r5, #0
 8005388:	d1f7      	bne.n	800537a <HAL_UART_Receive_DMA+0x1a>
}
 800538a:	bc30      	pop	{r4, r5}
    return (UART_Start_Receive_DMA(huart, pData, Size));
 800538c:	f7ff bf9a 	b.w	80052c4 <UART_Start_Receive_DMA>
    return HAL_BUSY;
 8005390:	2002      	movs	r0, #2
}
 8005392:	bc30      	pop	{r4, r5}
 8005394:	4770      	bx	lr
      return HAL_ERROR;
 8005396:	2001      	movs	r0, #1
 8005398:	e7fb      	b.n	8005392 <HAL_UART_Receive_DMA+0x32>

0800539a <osKernelStart>:
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
<<<<<<< HEAD
 8007646:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 8007648:	f000 fe9c 	bl	8008384 <vTaskStartScheduler>
  
  return osOK;
}
 800764c:	2000      	movs	r0, #0
 800764e:	bd08      	pop	{r3, pc}

08007650 <osThreadCreate>:
=======
 800539a:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 800539c:	f000 fe9c 	bl	80060d8 <vTaskStartScheduler>
  
  return osOK;
}
 80053a0:	2000      	movs	r0, #0
 80053a2:	bd08      	pop	{r3, pc}

080053a4 <osThreadCreate>:
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
<<<<<<< HEAD
 8007650:	b570      	push	{r4, r5, r6, lr}
 8007652:	4605      	mov	r5, r0
=======
 80053a4:	b570      	push	{r4, r5, r6, lr}
 80053a6:	4605      	mov	r5, r0
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
<<<<<<< HEAD
 8007654:	6946      	ldr	r6, [r0, #20]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007656:	692a      	ldr	r2, [r5, #16]
 8007658:	f9b5 4008 	ldrsh.w	r4, [r5, #8]
{
 800765c:	460b      	mov	r3, r1
 800765e:	b086      	sub	sp, #24
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007660:	e9d0 1000 	ldrd	r1, r0, [r0]
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8007664:	b176      	cbz	r6, 8007684 <osThreadCreate+0x34>
 8007666:	69ad      	ldr	r5, [r5, #24]
 8007668:	b165      	cbz	r5, 8007684 <osThreadCreate+0x34>
  if (priority != osPriorityError) {
 800766a:	2c84      	cmp	r4, #132	@ 0x84
    fpriority += (priority - osPriorityIdle);
 800766c:	bf14      	ite	ne
 800766e:	3403      	addne	r4, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8007670:	2400      	moveq	r4, #0
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007672:	e9cd 6501 	strd	r6, r5, [sp, #4]
 8007676:	9400      	str	r4, [sp, #0]
 8007678:	f000 fe1f 	bl	80082ba <xTaskCreateStatic>
 800767c:	9005      	str	r0, [sp, #20]
=======
 80053a8:	6946      	ldr	r6, [r0, #20]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80053aa:	692a      	ldr	r2, [r5, #16]
 80053ac:	f9b5 4008 	ldrsh.w	r4, [r5, #8]
{
 80053b0:	460b      	mov	r3, r1
 80053b2:	b086      	sub	sp, #24
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80053b4:	e9d0 1000 	ldrd	r1, r0, [r0]
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80053b8:	b176      	cbz	r6, 80053d8 <osThreadCreate+0x34>
 80053ba:	69ad      	ldr	r5, [r5, #24]
 80053bc:	b165      	cbz	r5, 80053d8 <osThreadCreate+0x34>
  if (priority != osPriorityError) {
 80053be:	2c84      	cmp	r4, #132	@ 0x84
    fpriority += (priority - osPriorityIdle);
 80053c0:	bf14      	ite	ne
 80053c2:	3403      	addne	r4, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80053c4:	2400      	moveq	r4, #0
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80053c6:	e9cd 6501 	strd	r6, r5, [sp, #4]
 80053ca:	9400      	str	r4, [sp, #0]
 80053cc:	f000 fe1f 	bl	800600e <xTaskCreateStatic>
 80053d0:	9005      	str	r0, [sp, #20]
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
<<<<<<< HEAD
 800767e:	9805      	ldr	r0, [sp, #20]
}
 8007680:	b006      	add	sp, #24
 8007682:	bd70      	pop	{r4, r5, r6, pc}
  if (priority != osPriorityError) {
 8007684:	2c84      	cmp	r4, #132	@ 0x84
    fpriority += (priority - osPriorityIdle);
 8007686:	bf14      	ite	ne
 8007688:	3403      	addne	r4, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800768a:	2400      	moveq	r4, #0
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800768c:	ad05      	add	r5, sp, #20
 800768e:	e9cd 4500 	strd	r4, r5, [sp]
 8007692:	b292      	uxth	r2, r2
 8007694:	f000 fe48 	bl	8008328 <xTaskCreate>
 8007698:	2801      	cmp	r0, #1
 800769a:	d0f0      	beq.n	800767e <osThreadCreate+0x2e>
      return NULL;
 800769c:	2000      	movs	r0, #0
 800769e:	e7ef      	b.n	8007680 <osThreadCreate+0x30>

080076a0 <osDelay>:
=======
 80053d2:	9805      	ldr	r0, [sp, #20]
}
 80053d4:	b006      	add	sp, #24
 80053d6:	bd70      	pop	{r4, r5, r6, pc}
  if (priority != osPriorityError) {
 80053d8:	2c84      	cmp	r4, #132	@ 0x84
    fpriority += (priority - osPriorityIdle);
 80053da:	bf14      	ite	ne
 80053dc:	3403      	addne	r4, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80053de:	2400      	moveq	r4, #0
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80053e0:	ad05      	add	r5, sp, #20
 80053e2:	e9cd 4500 	strd	r4, r5, [sp]
 80053e6:	b292      	uxth	r2, r2
 80053e8:	f000 fe48 	bl	800607c <xTaskCreate>
 80053ec:	2801      	cmp	r0, #1
 80053ee:	d0f0      	beq.n	80053d2 <osThreadCreate+0x2e>
      return NULL;
 80053f0:	2000      	movs	r0, #0
 80053f2:	e7ef      	b.n	80053d4 <osThreadCreate+0x30>

080053f4 <osDelay>:
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
<<<<<<< HEAD
 80076a0:	b508      	push	{r3, lr}
=======
 80053f4:	b508      	push	{r3, lr}
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
<<<<<<< HEAD
 80076a2:	2801      	cmp	r0, #1
 80076a4:	bf38      	it	cc
 80076a6:	2001      	movcc	r0, #1
 80076a8:	f000 ffba 	bl	8008620 <vTaskDelay>
=======
 80053f6:	2801      	cmp	r0, #1
 80053f8:	bf38      	it	cc
 80053fa:	2001      	movcc	r0, #1
 80053fc:	f000 ffba 	bl	8006374 <vTaskDelay>
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
<<<<<<< HEAD
 80076ac:	2000      	movs	r0, #0
 80076ae:	bd08      	pop	{r3, pc}

080076b0 <osSemaphoreCreate>:
=======
 8005400:	2000      	movs	r0, #0
 8005402:	bd08      	pop	{r3, pc}

08005404 <osSemaphoreCreate>:
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
<<<<<<< HEAD
 80076b0:	4603      	mov	r3, r0
 80076b2:	b537      	push	{r0, r1, r2, r4, r5, lr}
=======
 8005404:	4603      	mov	r3, r0
 8005406:	b537      	push	{r0, r1, r2, r4, r5, lr}
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
<<<<<<< HEAD
 80076b4:	685d      	ldr	r5, [r3, #4]
{ 
 80076b6:	4608      	mov	r0, r1
  if (semaphore_def->controlblock != NULL){
 80076b8:	b165      	cbz	r5, 80076d4 <osSemaphoreCreate+0x24>
    if (count == 1) {
 80076ba:	2901      	cmp	r1, #1
 80076bc:	d112      	bne.n	80076e4 <osSemaphoreCreate+0x34>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 80076be:	2303      	movs	r3, #3
 80076c0:	2200      	movs	r2, #0
 80076c2:	9300      	str	r3, [sp, #0]
 80076c4:	4611      	mov	r1, r2
 80076c6:	462b      	mov	r3, r5
 80076c8:	f000 fa30 	bl	8007b2c <xQueueGenericCreateStatic>
 80076cc:	4604      	mov	r4, r0
=======
 8005408:	685d      	ldr	r5, [r3, #4]
{ 
 800540a:	4608      	mov	r0, r1
  if (semaphore_def->controlblock != NULL){
 800540c:	b165      	cbz	r5, 8005428 <osSemaphoreCreate+0x24>
    if (count == 1) {
 800540e:	2901      	cmp	r1, #1
 8005410:	d112      	bne.n	8005438 <osSemaphoreCreate+0x34>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8005412:	2303      	movs	r3, #3
 8005414:	2200      	movs	r2, #0
 8005416:	9300      	str	r3, [sp, #0]
 8005418:	4611      	mov	r1, r2
 800541a:	462b      	mov	r3, r5
 800541c:	f000 fa30 	bl	8005880 <xQueueGenericCreateStatic>
 8005420:	4604      	mov	r4, r0
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
#else
    return NULL;
#endif
  }
#endif
}
<<<<<<< HEAD
 80076ce:	4620      	mov	r0, r4
 80076d0:	b003      	add	sp, #12
 80076d2:	bd30      	pop	{r4, r5, pc}
    if (count == 1) {
 80076d4:	2901      	cmp	r1, #1
 80076d6:	d105      	bne.n	80076e4 <osSemaphoreCreate+0x34>
      vSemaphoreCreateBinary(sema);
 80076d8:	2203      	movs	r2, #3
 80076da:	4629      	mov	r1, r5
 80076dc:	f000 fa6f 	bl	8007bbe <xQueueGenericCreate>
 80076e0:	4604      	mov	r4, r0
 80076e2:	b908      	cbnz	r0, 80076e8 <osSemaphoreCreate+0x38>
{ 
 80076e4:	2400      	movs	r4, #0
 80076e6:	e7f2      	b.n	80076ce <osSemaphoreCreate+0x1e>
      vSemaphoreCreateBinary(sema);
 80076e8:	462b      	mov	r3, r5
 80076ea:	462a      	mov	r2, r5
 80076ec:	4629      	mov	r1, r5
 80076ee:	f000 fa8a 	bl	8007c06 <xQueueGenericSend>
 80076f2:	e7ec      	b.n	80076ce <osSemaphoreCreate+0x1e>

080076f4 <osPoolCreate>:
=======
 8005422:	4620      	mov	r0, r4
 8005424:	b003      	add	sp, #12
 8005426:	bd30      	pop	{r4, r5, pc}
    if (count == 1) {
 8005428:	2901      	cmp	r1, #1
 800542a:	d105      	bne.n	8005438 <osSemaphoreCreate+0x34>
      vSemaphoreCreateBinary(sema);
 800542c:	2203      	movs	r2, #3
 800542e:	4629      	mov	r1, r5
 8005430:	f000 fa6f 	bl	8005912 <xQueueGenericCreate>
 8005434:	4604      	mov	r4, r0
 8005436:	b908      	cbnz	r0, 800543c <osSemaphoreCreate+0x38>
{ 
 8005438:	2400      	movs	r4, #0
 800543a:	e7f2      	b.n	8005422 <osSemaphoreCreate+0x1e>
      vSemaphoreCreateBinary(sema);
 800543c:	462b      	mov	r3, r5
 800543e:	462a      	mov	r2, r5
 8005440:	4629      	mov	r1, r5
 8005442:	f000 fa8a 	bl	800595a <xQueueGenericSend>
 8005446:	e7ec      	b.n	8005422 <osSemaphoreCreate+0x1e>

08005448 <osPoolCreate>:
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
* @param  pool_def      memory pool definition referenced with \ref osPool.
* @retval  memory pool ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osPoolCreate shall be consistent in every CMSIS-RTOS.
*/
osPoolId osPoolCreate (const osPoolDef_t *pool_def)
{
<<<<<<< HEAD
 80076f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
  osPoolId thePool;
  int itemSize = 4 * ((pool_def->item_sz + 3) / 4);
 80076f6:	6847      	ldr	r7, [r0, #4]
{
 80076f8:	4606      	mov	r6, r0
=======
 8005448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
  osPoolId thePool;
  int itemSize = 4 * ((pool_def->item_sz + 3) / 4);
 800544a:	6847      	ldr	r7, [r0, #4]
{
 800544c:	4606      	mov	r6, r0
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
  uint32_t i;
  
  /* First have to allocate memory for the pool control block. */
 thePool = pvPortMalloc(sizeof(os_pool_cb_t));
<<<<<<< HEAD
 80076fa:	2014      	movs	r0, #20
 80076fc:	f001 fac8 	bl	8008c90 <pvPortMalloc>

  
  if (thePool) {
 8007700:	4604      	mov	r4, r0
 8007702:	b1b8      	cbz	r0, 8007734 <osPoolCreate+0x40>
    thePool->pool_sz = pool_def->pool_sz;
 8007704:	6830      	ldr	r0, [r6, #0]
  int itemSize = 4 * ((pool_def->item_sz + 3) / 4);
 8007706:	3703      	adds	r7, #3
 8007708:	f027 0703 	bic.w	r7, r7, #3
    thePool->item_sz = itemSize;
    thePool->currentIndex = 0;
 800770c:	2500      	movs	r5, #0
    thePool->item_sz = itemSize;
 800770e:	e9c4 0702 	strd	r0, r7, [r4, #8]
    thePool->currentIndex = 0;
 8007712:	6125      	str	r5, [r4, #16]
    
    /* Memory for markers */
    thePool->markers = pvPortMalloc(pool_def->pool_sz);
 8007714:	f001 fabc 	bl	8008c90 <pvPortMalloc>
 8007718:	6060      	str	r0, [r4, #4]
   
    if (thePool->markers) {
 800771a:	b140      	cbz	r0, 800772e <osPoolCreate+0x3a>
      /* Now allocate the pool itself. */
     thePool->pool = pvPortMalloc(pool_def->pool_sz * itemSize);
 800771c:	6830      	ldr	r0, [r6, #0]
 800771e:	4378      	muls	r0, r7
 8007720:	f001 fab6 	bl	8008c90 <pvPortMalloc>
 8007724:	6020      	str	r0, [r4, #0]
      
      if (thePool->pool) {
 8007726:	b978      	cbnz	r0, 8007748 <osPoolCreate+0x54>
=======
 800544e:	2014      	movs	r0, #20
 8005450:	f001 fac6 	bl	80069e0 <pvPortMalloc>

  
  if (thePool) {
 8005454:	4604      	mov	r4, r0
 8005456:	b1b8      	cbz	r0, 8005488 <osPoolCreate+0x40>
    thePool->pool_sz = pool_def->pool_sz;
 8005458:	6830      	ldr	r0, [r6, #0]
  int itemSize = 4 * ((pool_def->item_sz + 3) / 4);
 800545a:	3703      	adds	r7, #3
 800545c:	f027 0703 	bic.w	r7, r7, #3
    thePool->item_sz = itemSize;
    thePool->currentIndex = 0;
 8005460:	2500      	movs	r5, #0
    thePool->item_sz = itemSize;
 8005462:	e9c4 0702 	strd	r0, r7, [r4, #8]
    thePool->currentIndex = 0;
 8005466:	6125      	str	r5, [r4, #16]
    
    /* Memory for markers */
    thePool->markers = pvPortMalloc(pool_def->pool_sz);
 8005468:	f001 faba 	bl	80069e0 <pvPortMalloc>
 800546c:	6060      	str	r0, [r4, #4]
   
    if (thePool->markers) {
 800546e:	b140      	cbz	r0, 8005482 <osPoolCreate+0x3a>
      /* Now allocate the pool itself. */
     thePool->pool = pvPortMalloc(pool_def->pool_sz * itemSize);
 8005470:	6830      	ldr	r0, [r6, #0]
 8005472:	4378      	muls	r0, r7
 8005474:	f001 fab4 	bl	80069e0 <pvPortMalloc>
 8005478:	6020      	str	r0, [r4, #0]
      
      if (thePool->pool) {
 800547a:	b978      	cbnz	r0, 800549c <osPoolCreate+0x54>
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
        for (i = 0; i < pool_def->pool_sz; i++) {
          thePool->markers[i] = 0;
        }
      }
      else {
        vPortFree(thePool->markers);
<<<<<<< HEAD
 8007728:	6860      	ldr	r0, [r4, #4]
 800772a:	f001 fb43 	bl	8008db4 <vPortFree>
        vPortFree(thePool);
 800772e:	4620      	mov	r0, r4
 8007730:	f001 fb40 	bl	8008db4 <vPortFree>
 thePool = pvPortMalloc(sizeof(os_pool_cb_t));
 8007734:	2400      	movs	r4, #0
 8007736:	e005      	b.n	8007744 <osPoolCreate+0x50>
          thePool->markers[i] = 0;
 8007738:	6862      	ldr	r2, [r4, #4]
 800773a:	54d1      	strb	r1, [r2, r3]
        for (i = 0; i < pool_def->pool_sz; i++) {
 800773c:	3301      	adds	r3, #1
 800773e:	6832      	ldr	r2, [r6, #0]
 8007740:	429a      	cmp	r2, r3
 8007742:	d8f9      	bhi.n	8007738 <osPoolCreate+0x44>
=======
 800547c:	6860      	ldr	r0, [r4, #4]
 800547e:	f001 fb41 	bl	8006b04 <vPortFree>
        vPortFree(thePool);
 8005482:	4620      	mov	r0, r4
 8005484:	f001 fb3e 	bl	8006b04 <vPortFree>
 thePool = pvPortMalloc(sizeof(os_pool_cb_t));
 8005488:	2400      	movs	r4, #0
 800548a:	e005      	b.n	8005498 <osPoolCreate+0x50>
          thePool->markers[i] = 0;
 800548c:	6862      	ldr	r2, [r4, #4]
 800548e:	54d1      	strb	r1, [r2, r3]
        for (i = 0; i < pool_def->pool_sz; i++) {
 8005490:	3301      	adds	r3, #1
 8005492:	6832      	ldr	r2, [r6, #0]
 8005494:	429a      	cmp	r2, r3
 8005496:	d8f9      	bhi.n	800548c <osPoolCreate+0x44>
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
  return thePool;
 
#else
  return NULL;
#endif
}
<<<<<<< HEAD
 8007744:	4620      	mov	r0, r4
 8007746:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        for (i = 0; i < pool_def->pool_sz; i++) {
 8007748:	462b      	mov	r3, r5
          thePool->markers[i] = 0;
 800774a:	4629      	mov	r1, r5
 800774c:	e7f7      	b.n	800773e <osPoolCreate+0x4a>

0800774e <osPoolAlloc>:
=======
 8005498:	4620      	mov	r0, r4
 800549a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        for (i = 0; i < pool_def->pool_sz; i++) {
 800549c:	462b      	mov	r3, r5
          thePool->markers[i] = 0;
 800549e:	4629      	mov	r1, r5
 80054a0:	e7f7      	b.n	8005492 <osPoolCreate+0x4a>

080054a2 <osPoolAlloc>:
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
* @param pool_id       memory pool ID obtain referenced with \ref osPoolCreate.
* @retval  address of the allocated memory block or NULL in case of no memory available.
* @note   MUST REMAIN UNCHANGED: \b osPoolAlloc shall be consistent in every CMSIS-RTOS.
*/
void *osPoolAlloc (osPoolId pool_id)
{
<<<<<<< HEAD
 800774e:	b570      	push	{r4, r5, r6, lr}
 8007750:	4604      	mov	r4, r0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007752:	f3ef 8605 	mrs	r6, IPSR
=======
 80054a2:	b570      	push	{r4, r5, r6, lr}
 80054a4:	4604      	mov	r4, r0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80054a6:	f3ef 8605 	mrs	r6, IPSR
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
  int dummy = 0;
  void *p = NULL;
  uint32_t i;
  uint32_t index;
  
  if (inHandlerMode()) {
<<<<<<< HEAD
 8007756:	b186      	cbz	r6, 800777a <osPoolAlloc+0x2c>
=======
 80054aa:	b186      	cbz	r6, 80054ce <osPoolAlloc+0x2c>
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
<<<<<<< HEAD
 8007758:	f3ef 8511 	mrs	r5, BASEPRI
 800775c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007760:	f383 8811 	msr	BASEPRI, r3
 8007764:	f3bf 8f6f 	isb	sy
 8007768:	f3bf 8f4f 	dsb	sy
    dummy = portSET_INTERRUPT_MASK_FROM_ISR();
 800776c:	462e      	mov	r6, r5
=======
 80054ac:	f3ef 8511 	mrs	r5, BASEPRI
 80054b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054b4:	f383 8811 	msr	BASEPRI, r3
 80054b8:	f3bf 8f6f 	isb	sy
 80054bc:	f3bf 8f4f 	dsb	sy
    dummy = portSET_INTERRUPT_MASK_FROM_ISR();
 80054c0:	462e      	mov	r6, r5
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
  }
  else {
    vPortEnterCritical();
  }
  
  for (i = 0; i < pool_id->pool_sz; i++) {
<<<<<<< HEAD
 800776e:	68a1      	ldr	r1, [r4, #8]
 8007770:	2200      	movs	r2, #0
 8007772:	4291      	cmp	r1, r2
 8007774:	d104      	bne.n	8007780 <osPoolAlloc+0x32>
  void *p = NULL;
 8007776:	2500      	movs	r5, #0
 8007778:	e012      	b.n	80077a0 <osPoolAlloc+0x52>
    vPortEnterCritical();
 800777a:	f001 f923 	bl	80089c4 <vPortEnterCritical>
 800777e:	e7f6      	b.n	800776e <osPoolAlloc+0x20>
    index = (pool_id->currentIndex + i) % pool_id->pool_sz;
 8007780:	6923      	ldr	r3, [r4, #16]
 8007782:	4413      	add	r3, r2
 8007784:	fbb3 f0f1 	udiv	r0, r3, r1
 8007788:	fb01 3310 	mls	r3, r1, r0, r3
    
    if (pool_id->markers[index] == 0) {
 800778c:	6860      	ldr	r0, [r4, #4]
 800778e:	5cc5      	ldrb	r5, [r0, r3]
 8007790:	b96d      	cbnz	r5, 80077ae <osPoolAlloc+0x60>
      pool_id->markers[index] = 1;
 8007792:	2201      	movs	r2, #1
 8007794:	54c2      	strb	r2, [r0, r3]
      p = (void *)((uint32_t)(pool_id->pool) + (index * pool_id->item_sz));
 8007796:	68e2      	ldr	r2, [r4, #12]
 8007798:	6825      	ldr	r5, [r4, #0]
      pool_id->currentIndex = index;
 800779a:	6123      	str	r3, [r4, #16]
      p = (void *)((uint32_t)(pool_id->pool) + (index * pool_id->item_sz));
 800779c:	fb02 5503 	mla	r5, r2, r3, r5
 80077a0:	f3ef 8305 	mrs	r3, IPSR
=======
 80054c2:	68a1      	ldr	r1, [r4, #8]
 80054c4:	2200      	movs	r2, #0
 80054c6:	4291      	cmp	r1, r2
 80054c8:	d104      	bne.n	80054d4 <osPoolAlloc+0x32>
  void *p = NULL;
 80054ca:	2500      	movs	r5, #0
 80054cc:	e012      	b.n	80054f4 <osPoolAlloc+0x52>
    vPortEnterCritical();
 80054ce:	f001 f921 	bl	8006714 <vPortEnterCritical>
 80054d2:	e7f6      	b.n	80054c2 <osPoolAlloc+0x20>
    index = (pool_id->currentIndex + i) % pool_id->pool_sz;
 80054d4:	6923      	ldr	r3, [r4, #16]
 80054d6:	4413      	add	r3, r2
 80054d8:	fbb3 f0f1 	udiv	r0, r3, r1
 80054dc:	fb01 3310 	mls	r3, r1, r0, r3
    
    if (pool_id->markers[index] == 0) {
 80054e0:	6860      	ldr	r0, [r4, #4]
 80054e2:	5cc5      	ldrb	r5, [r0, r3]
 80054e4:	b96d      	cbnz	r5, 8005502 <osPoolAlloc+0x60>
      pool_id->markers[index] = 1;
 80054e6:	2201      	movs	r2, #1
 80054e8:	54c2      	strb	r2, [r0, r3]
      p = (void *)((uint32_t)(pool_id->pool) + (index * pool_id->item_sz));
 80054ea:	68e2      	ldr	r2, [r4, #12]
 80054ec:	6825      	ldr	r5, [r4, #0]
      pool_id->currentIndex = index;
 80054ee:	6123      	str	r3, [r4, #16]
      p = (void *)((uint32_t)(pool_id->pool) + (index * pool_id->item_sz));
 80054f0:	fb02 5503 	mla	r5, r2, r3, r5
 80054f4:	f3ef 8305 	mrs	r3, IPSR
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
      break;
    }
  }
  
  if (inHandlerMode()) {
<<<<<<< HEAD
 80077a4:	b12b      	cbz	r3, 80077b2 <osPoolAlloc+0x64>
=======
 80054f8:	b12b      	cbz	r3, 8005506 <osPoolAlloc+0x64>
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
<<<<<<< HEAD
 80077a6:	f386 8811 	msr	BASEPRI, r6
=======
 80054fa:	f386 8811 	msr	BASEPRI, r6
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
  else {
    vPortExitCritical();
  }
  
  return p;
}
<<<<<<< HEAD
 80077aa:	4628      	mov	r0, r5
 80077ac:	bd70      	pop	{r4, r5, r6, pc}
  for (i = 0; i < pool_id->pool_sz; i++) {
 80077ae:	3201      	adds	r2, #1
 80077b0:	e7df      	b.n	8007772 <osPoolAlloc+0x24>
    vPortExitCritical();
 80077b2:	f001 f927 	bl	8008a04 <vPortExitCritical>
  return p;
 80077b6:	e7f8      	b.n	80077aa <osPoolAlloc+0x5c>

080077b8 <osPoolFree>:
=======
 80054fe:	4628      	mov	r0, r5
 8005500:	bd70      	pop	{r4, r5, r6, pc}
  for (i = 0; i < pool_id->pool_sz; i++) {
 8005502:	3201      	adds	r2, #1
 8005504:	e7df      	b.n	80054c6 <osPoolAlloc+0x24>
    vPortExitCritical();
 8005506:	f001 f925 	bl	8006754 <vPortExitCritical>
  return p;
 800550a:	e7f8      	b.n	80054fe <osPoolAlloc+0x5c>

0800550c <osPoolFree>:
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
*/
osStatus osPoolFree (osPoolId pool_id, void *block)
{
  uint32_t index;
  
  if (pool_id == NULL) {
<<<<<<< HEAD
 80077b8:	4603      	mov	r3, r0
 80077ba:	b180      	cbz	r0, 80077de <osPoolFree+0x26>
=======
 800550c:	4603      	mov	r3, r0
 800550e:	b180      	cbz	r0, 8005532 <osPoolFree+0x26>
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
    return osErrorParameter;
  }
  
  if (block == NULL) {
<<<<<<< HEAD
 80077bc:	b179      	cbz	r1, 80077de <osPoolFree+0x26>
=======
 8005510:	b179      	cbz	r1, 8005532 <osPoolFree+0x26>
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
    return osErrorParameter;
  }
  
  if (block < pool_id->pool) {
<<<<<<< HEAD
 80077be:	6802      	ldr	r2, [r0, #0]
 80077c0:	428a      	cmp	r2, r1
 80077c2:	d80c      	bhi.n	80077de <osPoolFree+0x26>
=======
 8005512:	6802      	ldr	r2, [r0, #0]
 8005514:	428a      	cmp	r2, r1
 8005516:	d80c      	bhi.n	8005532 <osPoolFree+0x26>
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
    return osErrorParameter;
  }
  
  index = (uint32_t)block - (uint32_t)(pool_id->pool);
  if (index % pool_id->item_sz) {
<<<<<<< HEAD
 80077c4:	68c0      	ldr	r0, [r0, #12]
  index = (uint32_t)block - (uint32_t)(pool_id->pool);
 80077c6:	1a89      	subs	r1, r1, r2
  if (index % pool_id->item_sz) {
 80077c8:	fbb1 f2f0 	udiv	r2, r1, r0
 80077cc:	fb00 1012 	mls	r0, r0, r2, r1
 80077d0:	b928      	cbnz	r0, 80077de <osPoolFree+0x26>
=======
 8005518:	68c0      	ldr	r0, [r0, #12]
  index = (uint32_t)block - (uint32_t)(pool_id->pool);
 800551a:	1a89      	subs	r1, r1, r2
  if (index % pool_id->item_sz) {
 800551c:	fbb1 f2f0 	udiv	r2, r1, r0
 8005520:	fb00 1012 	mls	r0, r0, r2, r1
 8005524:	b928      	cbnz	r0, 8005532 <osPoolFree+0x26>
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
    return osErrorParameter;
  }
  index = index / pool_id->item_sz;
  if (index >= pool_id->pool_sz) {
<<<<<<< HEAD
 80077d2:	6899      	ldr	r1, [r3, #8]
 80077d4:	4291      	cmp	r1, r2
 80077d6:	d902      	bls.n	80077de <osPoolFree+0x26>
=======
 8005526:	6899      	ldr	r1, [r3, #8]
 8005528:	4291      	cmp	r1, r2
 800552a:	d902      	bls.n	8005532 <osPoolFree+0x26>
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
    return osErrorParameter;
  }
  
  pool_id->markers[index] = 0;
<<<<<<< HEAD
 80077d8:	685b      	ldr	r3, [r3, #4]
 80077da:	5498      	strb	r0, [r3, r2]
  
  return osOK;
 80077dc:	4770      	bx	lr
    return osErrorParameter;
 80077de:	2080      	movs	r0, #128	@ 0x80
}
 80077e0:	4770      	bx	lr

080077e2 <osMailCreate>:
=======
 800552c:	685b      	ldr	r3, [r3, #4]
 800552e:	5498      	strb	r0, [r3, r2]
  
  return osOK;
 8005530:	4770      	bx	lr
    return osErrorParameter;
 8005532:	2080      	movs	r0, #128	@ 0x80
}
 8005534:	4770      	bx	lr

08005536 <osMailCreate>:
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
* @param   thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval mail queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMailCreate shall be consistent in every CMSIS-RTOS.
*/
osMailQId osMailCreate (const osMailQDef_t *queue_def, osThreadId thread_id)
{
<<<<<<< HEAD
 80077e2:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
=======
 8005536:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
  (void) thread_id;
  
  osPoolDef_t pool_def = {queue_def->queue_sz, queue_def->item_sz, NULL};
<<<<<<< HEAD
 80077e4:	6803      	ldr	r3, [r0, #0]
=======
 8005538:	6803      	ldr	r3, [r0, #0]
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
  
  /* Create a mail queue control block */

  *(queue_def->cb) = pvPortMalloc(sizeof(struct os_mailQ_cb));
<<<<<<< HEAD
 80077e6:	6885      	ldr	r5, [r0, #8]
  osPoolDef_t pool_def = {queue_def->queue_sz, queue_def->item_sz, NULL};
 80077e8:	9301      	str	r3, [sp, #4]
{
 80077ea:	4604      	mov	r4, r0
  osPoolDef_t pool_def = {queue_def->queue_sz, queue_def->item_sz, NULL};
 80077ec:	6843      	ldr	r3, [r0, #4]
 80077ee:	9302      	str	r3, [sp, #8]
 80077f0:	2600      	movs	r6, #0
  *(queue_def->cb) = pvPortMalloc(sizeof(struct os_mailQ_cb));
 80077f2:	200c      	movs	r0, #12
  osPoolDef_t pool_def = {queue_def->queue_sz, queue_def->item_sz, NULL};
 80077f4:	9603      	str	r6, [sp, #12]
  *(queue_def->cb) = pvPortMalloc(sizeof(struct os_mailQ_cb));
 80077f6:	f001 fa4b 	bl	8008c90 <pvPortMalloc>

  if (*(queue_def->cb) == NULL) {
 80077fa:	68a3      	ldr	r3, [r4, #8]
  *(queue_def->cb) = pvPortMalloc(sizeof(struct os_mailQ_cb));
 80077fc:	6028      	str	r0, [r5, #0]
  if (*(queue_def->cb) == NULL) {
 80077fe:	681d      	ldr	r5, [r3, #0]
 8007800:	b16d      	cbz	r5, 800781e <osMailCreate+0x3c>
    return NULL;
  }
  (*(queue_def->cb))->queue_def = queue_def;
 8007802:	602c      	str	r4, [r5, #0]
  
  /* Create a queue in FreeRTOS */
  (*(queue_def->cb))->handle = xQueueCreate(queue_def->queue_sz, sizeof(void *));
 8007804:	6820      	ldr	r0, [r4, #0]
 8007806:	4632      	mov	r2, r6
 8007808:	2104      	movs	r1, #4
 800780a:	f000 f9d8 	bl	8007bbe <xQueueGenericCreate>


  if ((*(queue_def->cb))->handle == NULL) {
 800780e:	68a3      	ldr	r3, [r4, #8]
  (*(queue_def->cb))->handle = xQueueCreate(queue_def->queue_sz, sizeof(void *));
 8007810:	6068      	str	r0, [r5, #4]
  if ((*(queue_def->cb))->handle == NULL) {
 8007812:	681d      	ldr	r5, [r3, #0]
 8007814:	686b      	ldr	r3, [r5, #4]
 8007816:	b92b      	cbnz	r3, 8007824 <osMailCreate+0x42>
    vPortFree(*(queue_def->cb));
 8007818:	4628      	mov	r0, r5
 800781a:	f001 facb 	bl	8008db4 <vPortFree>
    return NULL;
 800781e:	2000      	movs	r0, #0
=======
 800553a:	6885      	ldr	r5, [r0, #8]
  osPoolDef_t pool_def = {queue_def->queue_sz, queue_def->item_sz, NULL};
 800553c:	9301      	str	r3, [sp, #4]
{
 800553e:	4604      	mov	r4, r0
  osPoolDef_t pool_def = {queue_def->queue_sz, queue_def->item_sz, NULL};
 8005540:	6843      	ldr	r3, [r0, #4]
 8005542:	9302      	str	r3, [sp, #8]
 8005544:	2600      	movs	r6, #0
  *(queue_def->cb) = pvPortMalloc(sizeof(struct os_mailQ_cb));
 8005546:	200c      	movs	r0, #12
  osPoolDef_t pool_def = {queue_def->queue_sz, queue_def->item_sz, NULL};
 8005548:	9603      	str	r6, [sp, #12]
  *(queue_def->cb) = pvPortMalloc(sizeof(struct os_mailQ_cb));
 800554a:	f001 fa49 	bl	80069e0 <pvPortMalloc>

  if (*(queue_def->cb) == NULL) {
 800554e:	68a3      	ldr	r3, [r4, #8]
  *(queue_def->cb) = pvPortMalloc(sizeof(struct os_mailQ_cb));
 8005550:	6028      	str	r0, [r5, #0]
  if (*(queue_def->cb) == NULL) {
 8005552:	681d      	ldr	r5, [r3, #0]
 8005554:	b16d      	cbz	r5, 8005572 <osMailCreate+0x3c>
    return NULL;
  }
  (*(queue_def->cb))->queue_def = queue_def;
 8005556:	602c      	str	r4, [r5, #0]
  
  /* Create a queue in FreeRTOS */
  (*(queue_def->cb))->handle = xQueueCreate(queue_def->queue_sz, sizeof(void *));
 8005558:	6820      	ldr	r0, [r4, #0]
 800555a:	4632      	mov	r2, r6
 800555c:	2104      	movs	r1, #4
 800555e:	f000 f9d8 	bl	8005912 <xQueueGenericCreate>


  if ((*(queue_def->cb))->handle == NULL) {
 8005562:	68a3      	ldr	r3, [r4, #8]
  (*(queue_def->cb))->handle = xQueueCreate(queue_def->queue_sz, sizeof(void *));
 8005564:	6068      	str	r0, [r5, #4]
  if ((*(queue_def->cb))->handle == NULL) {
 8005566:	681d      	ldr	r5, [r3, #0]
 8005568:	686b      	ldr	r3, [r5, #4]
 800556a:	b92b      	cbnz	r3, 8005578 <osMailCreate+0x42>
    vPortFree(*(queue_def->cb));
 800556c:	4628      	mov	r0, r5
 800556e:	f001 fac9 	bl	8006b04 <vPortFree>
    return NULL;
 8005572:	2000      	movs	r0, #0
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
  
  return *(queue_def->cb);
#else
  return NULL;
#endif
}
<<<<<<< HEAD
 8007820:	b004      	add	sp, #16
 8007822:	bd70      	pop	{r4, r5, r6, pc}
  (*(queue_def->cb))->pool = osPoolCreate(&pool_def);
 8007824:	a801      	add	r0, sp, #4
 8007826:	f7ff ff65 	bl	80076f4 <osPoolCreate>
  if ((*(queue_def->cb))->pool == NULL) {
 800782a:	68a3      	ldr	r3, [r4, #8]
  (*(queue_def->cb))->pool = osPoolCreate(&pool_def);
 800782c:	60a8      	str	r0, [r5, #8]
  if ((*(queue_def->cb))->pool == NULL) {
 800782e:	6818      	ldr	r0, [r3, #0]
 8007830:	6883      	ldr	r3, [r0, #8]
 8007832:	2b00      	cmp	r3, #0
 8007834:	d1f4      	bne.n	8007820 <osMailCreate+0x3e>
 8007836:	e7f0      	b.n	800781a <osMailCreate+0x38>

08007838 <osMailAlloc>:
=======
 8005574:	b004      	add	sp, #16
 8005576:	bd70      	pop	{r4, r5, r6, pc}
  (*(queue_def->cb))->pool = osPoolCreate(&pool_def);
 8005578:	a801      	add	r0, sp, #4
 800557a:	f7ff ff65 	bl	8005448 <osPoolCreate>
  if ((*(queue_def->cb))->pool == NULL) {
 800557e:	68a3      	ldr	r3, [r4, #8]
  (*(queue_def->cb))->pool = osPoolCreate(&pool_def);
 8005580:	60a8      	str	r0, [r5, #8]
  if ((*(queue_def->cb))->pool == NULL) {
 8005582:	6818      	ldr	r0, [r3, #0]
 8005584:	6883      	ldr	r3, [r0, #8]
 8005586:	2b00      	cmp	r3, #0
 8005588:	d1f4      	bne.n	8005574 <osMailCreate+0x3e>
 800558a:	e7f0      	b.n	800556e <osMailCreate+0x38>

0800558c <osMailAlloc>:
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
{
  (void) millisec;
  void *p;
  
  
  if (queue_id == NULL) {
<<<<<<< HEAD
 8007838:	b110      	cbz	r0, 8007840 <osMailAlloc+0x8>
=======
 800558c:	b110      	cbz	r0, 8005594 <osMailAlloc+0x8>
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
    return NULL;
  }
  
  p = osPoolAlloc(queue_id->pool);
<<<<<<< HEAD
 800783a:	6880      	ldr	r0, [r0, #8]
 800783c:	f7ff bf87 	b.w	800774e <osPoolAlloc>
  
  return p;
}
 8007840:	4770      	bx	lr

08007842 <osMailPut>:
=======
 800558e:	6880      	ldr	r0, [r0, #8]
 8005590:	f7ff bf87 	b.w	80054a2 <osPoolAlloc>
  
  return p;
}
 8005594:	4770      	bx	lr

08005596 <osMailPut>:
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
* @param  mail          memory block previously allocated with \ref osMailAlloc or \ref osMailCAlloc.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMailPut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMailPut (osMailQId queue_id, void *mail)
{
<<<<<<< HEAD
 8007842:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007844:	9101      	str	r1, [sp, #4]
=======
 8005596:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005598:	9101      	str	r1, [sp, #4]
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
  portBASE_TYPE taskWoken;
  
  
  if (queue_id == NULL) {
<<<<<<< HEAD
 8007846:	b328      	cbz	r0, 8007894 <osMailPut+0x52>
=======
 800559a:	b328      	cbz	r0, 80055e8 <osMailPut+0x52>
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
    return osErrorParameter;
  }
  
  taskWoken = pdFALSE;
<<<<<<< HEAD
 8007848:	2200      	movs	r2, #0
 800784a:	9203      	str	r2, [sp, #12]
 800784c:	f3ef 8305 	mrs	r3, IPSR
  
  if (inHandlerMode()) {
    if (xQueueSendFromISR(queue_id->handle, &mail, &taskWoken) != pdTRUE) {
 8007850:	6840      	ldr	r0, [r0, #4]
  if (inHandlerMode()) {
 8007852:	b1c3      	cbz	r3, 8007886 <osMailPut+0x44>
    if (xQueueSendFromISR(queue_id->handle, &mail, &taskWoken) != pdTRUE) {
 8007854:	4613      	mov	r3, r2
 8007856:	a901      	add	r1, sp, #4
 8007858:	aa03      	add	r2, sp, #12
 800785a:	f000 fa86 	bl	8007d6a <xQueueGenericSendFromISR>
 800785e:	2801      	cmp	r0, #1
 8007860:	d003      	beq.n	800786a <osMailPut+0x28>
      return osErrorOS;
 8007862:	20ff      	movs	r0, #255	@ 0xff
=======
 800559c:	2200      	movs	r2, #0
 800559e:	9203      	str	r2, [sp, #12]
 80055a0:	f3ef 8305 	mrs	r3, IPSR
  
  if (inHandlerMode()) {
    if (xQueueSendFromISR(queue_id->handle, &mail, &taskWoken) != pdTRUE) {
 80055a4:	6840      	ldr	r0, [r0, #4]
  if (inHandlerMode()) {
 80055a6:	b1c3      	cbz	r3, 80055da <osMailPut+0x44>
    if (xQueueSendFromISR(queue_id->handle, &mail, &taskWoken) != pdTRUE) {
 80055a8:	4613      	mov	r3, r2
 80055aa:	a901      	add	r1, sp, #4
 80055ac:	aa03      	add	r2, sp, #12
 80055ae:	f000 fa86 	bl	8005abe <xQueueGenericSendFromISR>
 80055b2:	2801      	cmp	r0, #1
 80055b4:	d003      	beq.n	80055be <osMailPut+0x28>
      return osErrorOS;
 80055b6:	20ff      	movs	r0, #255	@ 0xff
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
      return osErrorOS;
    }
  }
  
  return osOK;
}
<<<<<<< HEAD
 8007864:	b005      	add	sp, #20
 8007866:	f85d fb04 	ldr.w	pc, [sp], #4
    portEND_SWITCHING_ISR(taskWoken);
 800786a:	9b03      	ldr	r3, [sp, #12]
 800786c:	b14b      	cbz	r3, 8007882 <osMailPut+0x40>
 800786e:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8007872:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007876:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800787a:	f3bf 8f4f 	dsb	sy
 800787e:	f3bf 8f6f 	isb	sy
  return osOK;
 8007882:	2000      	movs	r0, #0
 8007884:	e7ee      	b.n	8007864 <osMailPut+0x22>
    if (xQueueSend(queue_id->handle, &mail, 0) != pdTRUE) { 
 8007886:	461a      	mov	r2, r3
 8007888:	a901      	add	r1, sp, #4
 800788a:	f000 f9bc 	bl	8007c06 <xQueueGenericSend>
 800788e:	2801      	cmp	r0, #1
 8007890:	d0f7      	beq.n	8007882 <osMailPut+0x40>
 8007892:	e7e6      	b.n	8007862 <osMailPut+0x20>
    return osErrorParameter;
 8007894:	2080      	movs	r0, #128	@ 0x80
 8007896:	e7e5      	b.n	8007864 <osMailPut+0x22>

08007898 <osMailGet>:
=======
 80055b8:	b005      	add	sp, #20
 80055ba:	f85d fb04 	ldr.w	pc, [sp], #4
    portEND_SWITCHING_ISR(taskWoken);
 80055be:	9b03      	ldr	r3, [sp, #12]
 80055c0:	b14b      	cbz	r3, 80055d6 <osMailPut+0x40>
 80055c2:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80055c6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80055ca:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80055ce:	f3bf 8f4f 	dsb	sy
 80055d2:	f3bf 8f6f 	isb	sy
  return osOK;
 80055d6:	2000      	movs	r0, #0
 80055d8:	e7ee      	b.n	80055b8 <osMailPut+0x22>
    if (xQueueSend(queue_id->handle, &mail, 0) != pdTRUE) { 
 80055da:	461a      	mov	r2, r3
 80055dc:	a901      	add	r1, sp, #4
 80055de:	f000 f9bc 	bl	800595a <xQueueGenericSend>
 80055e2:	2801      	cmp	r0, #1
 80055e4:	d0f7      	beq.n	80055d6 <osMailPut+0x40>
 80055e6:	e7e6      	b.n	80055b6 <osMailPut+0x20>
    return osErrorParameter;
 80055e8:	2080      	movs	r0, #128	@ 0x80
 80055ea:	e7e5      	b.n	80055b8 <osMailPut+0x22>

080055ec <osMailGet>:
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
* @param millisec    timeout value or 0 in case of no time-out
* @retval event that contains mail information or error code.
* @note   MUST REMAIN UNCHANGED: \b osMailGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMailGet (osMailQId queue_id, uint32_t millisec)
{
<<<<<<< HEAD
 8007898:	b530      	push	{r4, r5, lr}
 800789a:	b085      	sub	sp, #20
 800789c:	4605      	mov	r5, r0
 800789e:	4614      	mov	r4, r2
=======
 80055ec:	b530      	push	{r4, r5, lr}
 80055ee:	b085      	sub	sp, #20
 80055f0:	4605      	mov	r5, r0
 80055f2:	4614      	mov	r4, r2
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.mail_id = queue_id;
<<<<<<< HEAD
 80078a0:	9103      	str	r1, [sp, #12]
  
  if (queue_id == NULL) {
 80078a2:	b911      	cbnz	r1, 80078aa <osMailGet+0x12>
    event.status = osErrorParameter;
 80078a4:	2380      	movs	r3, #128	@ 0x80
=======
 80055f4:	9103      	str	r1, [sp, #12]
  
  if (queue_id == NULL) {
 80055f6:	b911      	cbnz	r1, 80055fe <osMailGet+0x12>
    event.status = osErrorParameter;
 80055f8:	2380      	movs	r3, #128	@ 0x80
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
    portEND_SWITCHING_ISR(taskWoken);
  }
  else {
    if (xQueueReceive(queue_id->handle, &event.value.p, ticks) == pdTRUE) {
      /* We have mail */
      event.status = osEventMail;
<<<<<<< HEAD
 80078a6:	9301      	str	r3, [sp, #4]
 80078a8:	e01a      	b.n	80078e0 <osMailGet+0x48>
  taskWoken = pdFALSE;
 80078aa:	2300      	movs	r3, #0
 80078ac:	9300      	str	r3, [sp, #0]
 80078ae:	f3ef 8305 	mrs	r3, IPSR
    if (xQueueReceiveFromISR(queue_id->handle, &event.value.p, &taskWoken) == pdTRUE) {
 80078b2:	6848      	ldr	r0, [r1, #4]
  if (inHandlerMode()) {
 80078b4:	b1e3      	cbz	r3, 80078f0 <osMailGet+0x58>
    if (xQueueReceiveFromISR(queue_id->handle, &event.value.p, &taskWoken) == pdTRUE) {
 80078b6:	466a      	mov	r2, sp
 80078b8:	a902      	add	r1, sp, #8
 80078ba:	f000 fb50 	bl	8007f5e <xQueueReceiveFromISR>
 80078be:	1e43      	subs	r3, r0, #1
 80078c0:	4258      	negs	r0, r3
 80078c2:	4158      	adcs	r0, r3
    portEND_SWITCHING_ISR(taskWoken);
 80078c4:	9b00      	ldr	r3, [sp, #0]
    if (xQueueReceiveFromISR(queue_id->handle, &event.value.p, &taskWoken) == pdTRUE) {
 80078c6:	0140      	lsls	r0, r0, #5
 80078c8:	9001      	str	r0, [sp, #4]
    portEND_SWITCHING_ISR(taskWoken);
 80078ca:	b14b      	cbz	r3, 80078e0 <osMailGet+0x48>
 80078cc:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80078d0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80078d4:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80078d8:	f3bf 8f4f 	dsb	sy
 80078dc:	f3bf 8f6f 	isb	sy
    return event;
 80078e0:	ab04      	add	r3, sp, #16
 80078e2:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 80078e6:	e885 0007 	stmia.w	r5, {r0, r1, r2}
=======
 80055fa:	9301      	str	r3, [sp, #4]
 80055fc:	e01a      	b.n	8005634 <osMailGet+0x48>
  taskWoken = pdFALSE;
 80055fe:	2300      	movs	r3, #0
 8005600:	9300      	str	r3, [sp, #0]
 8005602:	f3ef 8305 	mrs	r3, IPSR
    if (xQueueReceiveFromISR(queue_id->handle, &event.value.p, &taskWoken) == pdTRUE) {
 8005606:	6848      	ldr	r0, [r1, #4]
  if (inHandlerMode()) {
 8005608:	b1e3      	cbz	r3, 8005644 <osMailGet+0x58>
    if (xQueueReceiveFromISR(queue_id->handle, &event.value.p, &taskWoken) == pdTRUE) {
 800560a:	466a      	mov	r2, sp
 800560c:	a902      	add	r1, sp, #8
 800560e:	f000 fb50 	bl	8005cb2 <xQueueReceiveFromISR>
 8005612:	1e43      	subs	r3, r0, #1
 8005614:	4258      	negs	r0, r3
 8005616:	4158      	adcs	r0, r3
    portEND_SWITCHING_ISR(taskWoken);
 8005618:	9b00      	ldr	r3, [sp, #0]
    if (xQueueReceiveFromISR(queue_id->handle, &event.value.p, &taskWoken) == pdTRUE) {
 800561a:	0140      	lsls	r0, r0, #5
 800561c:	9001      	str	r0, [sp, #4]
    portEND_SWITCHING_ISR(taskWoken);
 800561e:	b14b      	cbz	r3, 8005634 <osMailGet+0x48>
 8005620:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8005624:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005628:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800562c:	f3bf 8f4f 	dsb	sy
 8005630:	f3bf 8f6f 	isb	sy
    return event;
 8005634:	ab04      	add	r3, sp, #16
 8005636:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 800563a:	e885 0007 	stmia.w	r5, {r0, r1, r2}
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
      event.status = (ticks == 0) ? osOK : osEventTimeout;
    }
  }
  
  return event;
}
<<<<<<< HEAD
 80078ea:	4628      	mov	r0, r5
 80078ec:	b005      	add	sp, #20
 80078ee:	bd30      	pop	{r4, r5, pc}
    if (xQueueReceive(queue_id->handle, &event.value.p, ticks) == pdTRUE) {
 80078f0:	a902      	add	r1, sp, #8
 80078f2:	f000 fa96 	bl	8007e22 <xQueueReceive>
 80078f6:	2801      	cmp	r0, #1
 80078f8:	d101      	bne.n	80078fe <osMailGet+0x66>
      event.status = osEventMail;
 80078fa:	2320      	movs	r3, #32
 80078fc:	e7d3      	b.n	80078a6 <osMailGet+0xe>
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 80078fe:	3c00      	subs	r4, #0
 8007900:	bf18      	it	ne
 8007902:	2401      	movne	r4, #1
 8007904:	01a4      	lsls	r4, r4, #6
 8007906:	9401      	str	r4, [sp, #4]
  return event;
 8007908:	e7ea      	b.n	80078e0 <osMailGet+0x48>

0800790a <osMailFree>:
=======
 800563e:	4628      	mov	r0, r5
 8005640:	b005      	add	sp, #20
 8005642:	bd30      	pop	{r4, r5, pc}
    if (xQueueReceive(queue_id->handle, &event.value.p, ticks) == pdTRUE) {
 8005644:	a902      	add	r1, sp, #8
 8005646:	f000 fa96 	bl	8005b76 <xQueueReceive>
 800564a:	2801      	cmp	r0, #1
 800564c:	d101      	bne.n	8005652 <osMailGet+0x66>
      event.status = osEventMail;
 800564e:	2320      	movs	r3, #32
 8005650:	e7d3      	b.n	80055fa <osMailGet+0xe>
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8005652:	3c00      	subs	r4, #0
 8005654:	bf18      	it	ne
 8005656:	2401      	movne	r4, #1
 8005658:	01a4      	lsls	r4, r4, #6
 800565a:	9401      	str	r4, [sp, #4]
  return event;
 800565c:	e7ea      	b.n	8005634 <osMailGet+0x48>

0800565e <osMailFree>:
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMailFree shall be consistent in every CMSIS-RTOS.
*/
osStatus osMailFree (osMailQId queue_id, void *mail)
{
  if (queue_id == NULL) {
<<<<<<< HEAD
 800790a:	b110      	cbz	r0, 8007912 <osMailFree+0x8>
=======
 800565e:	b110      	cbz	r0, 8005666 <osMailFree+0x8>
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
    return osErrorParameter;
  }
  
  return osPoolFree(queue_id->pool, mail);
<<<<<<< HEAD
 800790c:	6880      	ldr	r0, [r0, #8]
 800790e:	f7ff bf53 	b.w	80077b8 <osPoolFree>
}
 8007912:	2080      	movs	r0, #128	@ 0x80
 8007914:	4770      	bx	lr

08007916 <vListInitialise>:
=======
 8005660:	6880      	ldr	r0, [r0, #8]
 8005662:	f7ff bf53 	b.w	800550c <osPoolFree>
}
 8005666:	2080      	movs	r0, #128	@ 0x80
 8005668:	4770      	bx	lr

0800566a <vListInitialise>:
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
<<<<<<< HEAD
 8007916:	f100 0308 	add.w	r3, r0, #8
=======
 800566a:	f100 0308 	add.w	r3, r0, #8
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
<<<<<<< HEAD
 800791a:	f04f 32ff 	mov.w	r2, #4294967295
=======
 800566e:	f04f 32ff 	mov.w	r2, #4294967295
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
<<<<<<< HEAD
 800791e:	e9c0 2302 	strd	r2, r3, [r0, #8]
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007922:	6043      	str	r3, [r0, #4]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007924:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007926:	2300      	movs	r3, #0
 8007928:	6003      	str	r3, [r0, #0]
=======
 8005672:	e9c0 2302 	strd	r2, r3, [r0, #8]
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005676:	6043      	str	r3, [r0, #4]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005678:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800567a:	2300      	movs	r3, #0
 800567c:	6003      	str	r3, [r0, #0]
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
<<<<<<< HEAD
 800792a:	4770      	bx	lr

0800792c <vListInitialiseItem>:
=======
 800567e:	4770      	bx	lr

08005680 <vListInitialiseItem>:
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
<<<<<<< HEAD
 800792c:	2300      	movs	r3, #0
 800792e:	6103      	str	r3, [r0, #16]
=======
 8005680:	2300      	movs	r3, #0
 8005682:	6103      	str	r3, [r0, #16]
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
<<<<<<< HEAD
 8007930:	4770      	bx	lr

08007932 <vListInsertEnd>:
=======
 8005684:	4770      	bx	lr

08005686 <vListInsertEnd>:
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
<<<<<<< HEAD
 8007932:	6843      	ldr	r3, [r0, #4]
=======
 8005686:	6843      	ldr	r3, [r0, #4]
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
<<<<<<< HEAD
 8007934:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007936:	689a      	ldr	r2, [r3, #8]
 8007938:	608a      	str	r2, [r1, #8]
=======
 8005688:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800568a:	689a      	ldr	r2, [r3, #8]
 800568c:	608a      	str	r2, [r1, #8]
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
<<<<<<< HEAD
 800793a:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800793c:	6099      	str	r1, [r3, #8]
=======
 800568e:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005690:	6099      	str	r1, [r3, #8]
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
<<<<<<< HEAD
 800793e:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 8007940:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8007942:	3301      	adds	r3, #1
 8007944:	6003      	str	r3, [r0, #0]
}
 8007946:	4770      	bx	lr

08007948 <vListInsert>:
=======
 8005692:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005694:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8005696:	3301      	adds	r3, #1
 8005698:	6003      	str	r3, [r0, #0]
}
 800569a:	4770      	bx	lr

0800569c <vListInsert>:
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
<<<<<<< HEAD
 8007948:	b530      	push	{r4, r5, lr}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800794a:	680c      	ldr	r4, [r1, #0]
=======
 800569c:	b530      	push	{r4, r5, lr}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800569e:	680c      	ldr	r4, [r1, #0]
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
<<<<<<< HEAD
 800794c:	1c63      	adds	r3, r4, #1
 800794e:	d10a      	bne.n	8007966 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007950:	6903      	ldr	r3, [r0, #16]
=======
 80056a0:	1c63      	adds	r3, r4, #1
 80056a2:	d10a      	bne.n	80056ba <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80056a4:	6903      	ldr	r3, [r0, #16]
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
<<<<<<< HEAD
 8007952:	685a      	ldr	r2, [r3, #4]
 8007954:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007956:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007958:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 800795a:	6059      	str	r1, [r3, #4]
=======
 80056a6:	685a      	ldr	r2, [r3, #4]
 80056a8:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80056aa:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80056ac:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 80056ae:	6059      	str	r1, [r3, #4]
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
<<<<<<< HEAD
 800795c:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 800795e:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8007960:	3301      	adds	r3, #1
 8007962:	6003      	str	r3, [r0, #0]
}
 8007964:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007966:	f100 0208 	add.w	r2, r0, #8
 800796a:	4613      	mov	r3, r2
 800796c:	6852      	ldr	r2, [r2, #4]
 800796e:	6815      	ldr	r5, [r2, #0]
 8007970:	42a5      	cmp	r5, r4
 8007972:	d9fa      	bls.n	800796a <vListInsert+0x22>
 8007974:	e7ed      	b.n	8007952 <vListInsert+0xa>

08007976 <uxListRemove>:
=======
 80056b0:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 80056b2:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 80056b4:	3301      	adds	r3, #1
 80056b6:	6003      	str	r3, [r0, #0]
}
 80056b8:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80056ba:	f100 0208 	add.w	r2, r0, #8
 80056be:	4613      	mov	r3, r2
 80056c0:	6852      	ldr	r2, [r2, #4]
 80056c2:	6815      	ldr	r5, [r2, #0]
 80056c4:	42a5      	cmp	r5, r4
 80056c6:	d9fa      	bls.n	80056be <vListInsert+0x22>
 80056c8:	e7ed      	b.n	80056a6 <vListInsert+0xa>

080056ca <uxListRemove>:
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
<<<<<<< HEAD
 8007976:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800797a:	6903      	ldr	r3, [r0, #16]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800797c:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800797e:	6051      	str	r1, [r2, #4]
=======
 80056ca:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80056ce:	6903      	ldr	r3, [r0, #16]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80056d0:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80056d2:	6051      	str	r1, [r2, #4]
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
<<<<<<< HEAD
 8007980:	6859      	ldr	r1, [r3, #4]
 8007982:	4281      	cmp	r1, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007984:	bf08      	it	eq
 8007986:	605a      	streq	r2, [r3, #4]
=======
 80056d4:	6859      	ldr	r1, [r3, #4]
 80056d6:	4281      	cmp	r1, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80056d8:	bf08      	it	eq
 80056da:	605a      	streq	r2, [r3, #4]
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
<<<<<<< HEAD
 8007988:	2200      	movs	r2, #0
 800798a:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 800798c:	681a      	ldr	r2, [r3, #0]
 800798e:	3a01      	subs	r2, #1
 8007990:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007992:	6818      	ldr	r0, [r3, #0]
}
 8007994:	4770      	bx	lr

08007996 <prvIsQueueEmpty>:
=======
 80056dc:	2200      	movs	r2, #0
 80056de:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 80056e0:	681a      	ldr	r2, [r3, #0]
 80056e2:	3a01      	subs	r2, #1
 80056e4:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80056e6:	6818      	ldr	r0, [r3, #0]
}
 80056e8:	4770      	bx	lr

080056ea <prvIsQueueEmpty>:
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
<<<<<<< HEAD
 8007996:	b510      	push	{r4, lr}
 8007998:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800799a:	f001 f813 	bl	80089c4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800799e:	6ba4      	ldr	r4, [r4, #56]	@ 0x38
=======
 80056ea:	b510      	push	{r4, lr}
 80056ec:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80056ee:	f001 f811 	bl	8006714 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80056f2:	6ba4      	ldr	r4, [r4, #56]	@ 0x38
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
<<<<<<< HEAD
 80079a0:	f001 f830 	bl	8008a04 <vPortExitCritical>

	return xReturn;
}
 80079a4:	fab4 f084 	clz	r0, r4
 80079a8:	0940      	lsrs	r0, r0, #5
 80079aa:	bd10      	pop	{r4, pc}

080079ac <prvCopyDataToQueue>:
{
 80079ac:	b570      	push	{r4, r5, r6, lr}
 80079ae:	4616      	mov	r6, r2
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80079b0:	6c02      	ldr	r2, [r0, #64]	@ 0x40
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80079b2:	6b85      	ldr	r5, [r0, #56]	@ 0x38
{
 80079b4:	4604      	mov	r4, r0
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80079b6:	b942      	cbnz	r2, 80079ca <prvCopyDataToQueue+0x1e>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80079b8:	6806      	ldr	r6, [r0, #0]
 80079ba:	b99e      	cbnz	r6, 80079e4 <prvCopyDataToQueue+0x38>
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80079bc:	6840      	ldr	r0, [r0, #4]
 80079be:	f000 ff47 	bl	8008850 <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 80079c2:	6066      	str	r6, [r4, #4]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80079c4:	3501      	adds	r5, #1
 80079c6:	63a5      	str	r5, [r4, #56]	@ 0x38
}
 80079c8:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 80079ca:	b96e      	cbnz	r6, 80079e8 <prvCopyDataToQueue+0x3c>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80079cc:	6880      	ldr	r0, [r0, #8]
 80079ce:	f003 fffe 	bl	800b9ce <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80079d2:	68a3      	ldr	r3, [r4, #8]
 80079d4:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 80079d6:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80079d8:	6862      	ldr	r2, [r4, #4]
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80079da:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80079dc:	4293      	cmp	r3, r2
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80079de:	bf24      	itt	cs
 80079e0:	6823      	ldrcs	r3, [r4, #0]
 80079e2:	60a3      	strcs	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
 80079e4:	2000      	movs	r0, #0
 80079e6:	e7ed      	b.n	80079c4 <prvCopyDataToQueue+0x18>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80079e8:	68c0      	ldr	r0, [r0, #12]
 80079ea:	f003 fff0 	bl	800b9ce <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80079ee:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 80079f0:	68e3      	ldr	r3, [r4, #12]
 80079f2:	4251      	negs	r1, r2
 80079f4:	1a9b      	subs	r3, r3, r2
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80079f6:	6822      	ldr	r2, [r4, #0]
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80079f8:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80079fa:	4293      	cmp	r3, r2
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80079fc:	bf3e      	ittt	cc
 80079fe:	6863      	ldrcc	r3, [r4, #4]
 8007a00:	185b      	addcc	r3, r3, r1
 8007a02:	60e3      	strcc	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 8007a04:	2e02      	cmp	r6, #2
 8007a06:	d1ed      	bne.n	80079e4 <prvCopyDataToQueue+0x38>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007a08:	b10d      	cbz	r5, 8007a0e <prvCopyDataToQueue+0x62>
				--uxMessagesWaiting;
 8007a0a:	3d01      	subs	r5, #1
 8007a0c:	e7ea      	b.n	80079e4 <prvCopyDataToQueue+0x38>
BaseType_t xReturn = pdFALSE;
 8007a0e:	4628      	mov	r0, r5
 8007a10:	e7d8      	b.n	80079c4 <prvCopyDataToQueue+0x18>

08007a12 <prvCopyDataFromQueue>:
{
 8007a12:	4603      	mov	r3, r0
 8007a14:	b410      	push	{r4}
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007a16:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
{
 8007a18:	4608      	mov	r0, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007a1a:	b16a      	cbz	r2, 8007a38 <prvCopyDataFromQueue+0x26>
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8007a1c:	68dc      	ldr	r4, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007a1e:	6859      	ldr	r1, [r3, #4]
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8007a20:	4414      	add	r4, r2
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007a22:	428c      	cmp	r4, r1
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8007a24:	bf28      	it	cs
 8007a26:	6819      	ldrcs	r1, [r3, #0]
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8007a28:	60dc      	str	r4, [r3, #12]
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8007a2a:	bf28      	it	cs
 8007a2c:	60d9      	strcs	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8007a2e:	68d9      	ldr	r1, [r3, #12]
}
 8007a30:	f85d 4b04 	ldr.w	r4, [sp], #4
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8007a34:	f003 bfcb 	b.w	800b9ce <memcpy>
}
 8007a38:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007a3c:	4770      	bx	lr

08007a3e <prvUnlockQueue>:
{
 8007a3e:	b570      	push	{r4, r5, r6, lr}
 8007a40:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8007a42:	f000 ffbf 	bl	80089c4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8007a46:	f894 5045 	ldrb.w	r5, [r4, #69]	@ 0x45
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007a4a:	f104 0624 	add.w	r6, r4, #36	@ 0x24
		int8_t cTxLock = pxQueue->cTxLock;
 8007a4e:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007a50:	2d00      	cmp	r5, #0
 8007a52:	dc14      	bgt.n	8007a7e <prvUnlockQueue+0x40>
		pxQueue->cTxLock = queueUNLOCKED;
 8007a54:	23ff      	movs	r3, #255	@ 0xff
 8007a56:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
	taskEXIT_CRITICAL();
 8007a5a:	f000 ffd3 	bl	8008a04 <vPortExitCritical>
	taskENTER_CRITICAL();
 8007a5e:	f000 ffb1 	bl	80089c4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8007a62:	f894 5044 	ldrb.w	r5, [r4, #68]	@ 0x44
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007a66:	f104 0610 	add.w	r6, r4, #16
		int8_t cRxLock = pxQueue->cRxLock;
 8007a6a:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007a6c:	2d00      	cmp	r5, #0
 8007a6e:	dc12      	bgt.n	8007a96 <prvUnlockQueue+0x58>
		pxQueue->cRxLock = queueUNLOCKED;
 8007a70:	23ff      	movs	r3, #255	@ 0xff
 8007a72:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
}
 8007a76:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 8007a7a:	f000 bfc3 	b.w	8008a04 <vPortExitCritical>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007a7e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d0e7      	beq.n	8007a54 <prvUnlockQueue+0x16>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007a84:	4630      	mov	r0, r6
 8007a86:	f000 fe43 	bl	8008710 <xTaskRemoveFromEventList>
 8007a8a:	b108      	cbz	r0, 8007a90 <prvUnlockQueue+0x52>
						vTaskMissedYield();
 8007a8c:	f000 feca 	bl	8008824 <vTaskMissedYield>
			--cTxLock;
 8007a90:	3d01      	subs	r5, #1
 8007a92:	b26d      	sxtb	r5, r5
 8007a94:	e7dc      	b.n	8007a50 <prvUnlockQueue+0x12>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007a96:	6923      	ldr	r3, [r4, #16]
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d0e9      	beq.n	8007a70 <prvUnlockQueue+0x32>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007a9c:	4630      	mov	r0, r6
 8007a9e:	f000 fe37 	bl	8008710 <xTaskRemoveFromEventList>
 8007aa2:	b108      	cbz	r0, 8007aa8 <prvUnlockQueue+0x6a>
					vTaskMissedYield();
 8007aa4:	f000 febe 	bl	8008824 <vTaskMissedYield>
				--cRxLock;
 8007aa8:	3d01      	subs	r5, #1
 8007aaa:	b26d      	sxtb	r5, r5
 8007aac:	e7de      	b.n	8007a6c <prvUnlockQueue+0x2e>

08007aae <xQueueGenericReset>:
{
 8007aae:	b538      	push	{r3, r4, r5, lr}
 8007ab0:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 8007ab2:	4604      	mov	r4, r0
 8007ab4:	b940      	cbnz	r0, 8007ac8 <xQueueGenericReset+0x1a>
	__asm volatile
 8007ab6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007aba:	f383 8811 	msr	BASEPRI, r3
 8007abe:	f3bf 8f6f 	isb	sy
 8007ac2:	f3bf 8f4f 	dsb	sy
 8007ac6:	e7fe      	b.n	8007ac6 <xQueueGenericReset+0x18>
	taskENTER_CRITICAL();
 8007ac8:	f000 ff7c 	bl	80089c4 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8007acc:	e9d4 310f 	ldrd	r3, r1, [r4, #60]	@ 0x3c
 8007ad0:	6822      	ldr	r2, [r4, #0]
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007ad2:	60a2      	str	r2, [r4, #8]
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8007ad4:	434b      	muls	r3, r1
 8007ad6:	18d0      	adds	r0, r2, r3
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8007ad8:	1a5b      	subs	r3, r3, r1
 8007ada:	441a      	add	r2, r3
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8007adc:	6060      	str	r0, [r4, #4]
		pxQueue->cRxLock = queueUNLOCKED;
 8007ade:	23ff      	movs	r3, #255	@ 0xff
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007ae0:	2000      	movs	r0, #0
 8007ae2:	63a0      	str	r0, [r4, #56]	@ 0x38
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8007ae4:	60e2      	str	r2, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007ae6:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007aea:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
		if( xNewQueue == pdFALSE )
 8007aee:	b9a5      	cbnz	r5, 8007b1a <xQueueGenericReset+0x6c>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007af0:	6923      	ldr	r3, [r4, #16]
 8007af2:	b173      	cbz	r3, 8007b12 <xQueueGenericReset+0x64>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007af4:	f104 0010 	add.w	r0, r4, #16
 8007af8:	f000 fe0a 	bl	8008710 <xTaskRemoveFromEventList>
 8007afc:	b148      	cbz	r0, 8007b12 <xQueueGenericReset+0x64>
					queueYIELD_IF_USING_PREEMPTION();
 8007afe:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8007b02:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007b06:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8007b0a:	f3bf 8f4f 	dsb	sy
 8007b0e:	f3bf 8f6f 	isb	sy
	taskEXIT_CRITICAL();
 8007b12:	f000 ff77 	bl	8008a04 <vPortExitCritical>
}
 8007b16:	2001      	movs	r0, #1
 8007b18:	bd38      	pop	{r3, r4, r5, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007b1a:	f104 0010 	add.w	r0, r4, #16
 8007b1e:	f7ff fefa 	bl	8007916 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007b22:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8007b26:	f7ff fef6 	bl	8007916 <vListInitialise>
 8007b2a:	e7f2      	b.n	8007b12 <xQueueGenericReset+0x64>

08007b2c <xQueueGenericCreateStatic>:
	{
 8007b2c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007b2e:	460d      	mov	r5, r1
 8007b30:	461c      	mov	r4, r3
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007b32:	b940      	cbnz	r0, 8007b46 <xQueueGenericCreateStatic+0x1a>
 8007b34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b38:	f383 8811 	msr	BASEPRI, r3
 8007b3c:	f3bf 8f6f 	isb	sy
 8007b40:	f3bf 8f4f 	dsb	sy
 8007b44:	e7fe      	b.n	8007b44 <xQueueGenericCreateStatic+0x18>
		configASSERT( pxStaticQueue != NULL );
 8007b46:	b943      	cbnz	r3, 8007b5a <xQueueGenericCreateStatic+0x2e>
 8007b48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b4c:	f383 8811 	msr	BASEPRI, r3
 8007b50:	f3bf 8f6f 	isb	sy
 8007b54:	f3bf 8f4f 	dsb	sy
 8007b58:	e7fe      	b.n	8007b58 <xQueueGenericCreateStatic+0x2c>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007b5a:	b14a      	cbz	r2, 8007b70 <xQueueGenericCreateStatic+0x44>
 8007b5c:	b991      	cbnz	r1, 8007b84 <xQueueGenericCreateStatic+0x58>
 8007b5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b62:	f383 8811 	msr	BASEPRI, r3
 8007b66:	f3bf 8f6f 	isb	sy
 8007b6a:	f3bf 8f4f 	dsb	sy
 8007b6e:	e7fe      	b.n	8007b6e <xQueueGenericCreateStatic+0x42>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007b70:	b141      	cbz	r1, 8007b84 <xQueueGenericCreateStatic+0x58>
 8007b72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b76:	f383 8811 	msr	BASEPRI, r3
 8007b7a:	f3bf 8f6f 	isb	sy
 8007b7e:	f3bf 8f4f 	dsb	sy
 8007b82:	e7fe      	b.n	8007b82 <xQueueGenericCreateStatic+0x56>
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007b84:	2348      	movs	r3, #72	@ 0x48
 8007b86:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007b88:	9b01      	ldr	r3, [sp, #4]
 8007b8a:	2b48      	cmp	r3, #72	@ 0x48
 8007b8c:	d008      	beq.n	8007ba0 <xQueueGenericCreateStatic+0x74>
 8007b8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b92:	f383 8811 	msr	BASEPRI, r3
 8007b96:	f3bf 8f6f 	isb	sy
 8007b9a:	f3bf 8f4f 	dsb	sy
 8007b9e:	e7fe      	b.n	8007b9e <xQueueGenericCreateStatic+0x72>
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007ba0:	2101      	movs	r1, #1
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007ba2:	2d00      	cmp	r5, #0
 8007ba4:	bf08      	it	eq
 8007ba6:	4622      	moveq	r2, r4
	pxNewQueue->uxItemSize = uxItemSize;
 8007ba8:	e9c4 050f 	strd	r0, r5, [r4, #60]	@ 0x3c
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007bac:	f884 1046 	strb.w	r1, [r4, #70]	@ 0x46
	if( uxItemSize == ( UBaseType_t ) 0 )
 8007bb0:	6022      	str	r2, [r4, #0]
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007bb2:	4620      	mov	r0, r4
 8007bb4:	f7ff ff7b 	bl	8007aae <xQueueGenericReset>
	}
 8007bb8:	4620      	mov	r0, r4
 8007bba:	b003      	add	sp, #12
 8007bbc:	bd30      	pop	{r4, r5, pc}

08007bbe <xQueueGenericCreate>:
	{
 8007bbe:	b570      	push	{r4, r5, r6, lr}
 8007bc0:	460d      	mov	r5, r1
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007bc2:	4606      	mov	r6, r0
 8007bc4:	b940      	cbnz	r0, 8007bd8 <xQueueGenericCreate+0x1a>
 8007bc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bca:	f383 8811 	msr	BASEPRI, r3
 8007bce:	f3bf 8f6f 	isb	sy
 8007bd2:	f3bf 8f4f 	dsb	sy
 8007bd6:	e7fe      	b.n	8007bd6 <xQueueGenericCreate+0x18>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007bd8:	4348      	muls	r0, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8007bda:	3048      	adds	r0, #72	@ 0x48
 8007bdc:	f001 f858 	bl	8008c90 <pvPortMalloc>
		if( pxNewQueue != NULL )
 8007be0:	4604      	mov	r4, r0
 8007be2:	b160      	cbz	r0, 8007bfe <xQueueGenericCreate+0x40>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007be4:	2300      	movs	r3, #0
 8007be6:	f880 3046 	strb.w	r3, [r0, #70]	@ 0x46
	if( uxItemSize == ( UBaseType_t ) 0 )
 8007bea:	b155      	cbz	r5, 8007c02 <xQueueGenericCreate+0x44>
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8007bec:	f100 0348 	add.w	r3, r0, #72	@ 0x48
	pxNewQueue->uxItemSize = uxItemSize;
 8007bf0:	e9c4 650f 	strd	r6, r5, [r4, #60]	@ 0x3c
 8007bf4:	6023      	str	r3, [r4, #0]
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007bf6:	2101      	movs	r1, #1
 8007bf8:	4620      	mov	r0, r4
 8007bfa:	f7ff ff58 	bl	8007aae <xQueueGenericReset>
	}
 8007bfe:	4620      	mov	r0, r4
 8007c00:	bd70      	pop	{r4, r5, r6, pc}
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007c02:	4603      	mov	r3, r0
 8007c04:	e7f4      	b.n	8007bf0 <xQueueGenericCreate+0x32>

08007c06 <xQueueGenericSend>:
{
 8007c06:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8007c0a:	460f      	mov	r7, r1
 8007c0c:	9201      	str	r2, [sp, #4]
 8007c0e:	461e      	mov	r6, r3
	configASSERT( pxQueue );
 8007c10:	4604      	mov	r4, r0
 8007c12:	b940      	cbnz	r0, 8007c26 <xQueueGenericSend+0x20>
 8007c14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c18:	f383 8811 	msr	BASEPRI, r3
 8007c1c:	f3bf 8f6f 	isb	sy
 8007c20:	f3bf 8f4f 	dsb	sy
 8007c24:	e7fe      	b.n	8007c24 <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007c26:	b951      	cbnz	r1, 8007c3e <xQueueGenericSend+0x38>
 8007c28:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8007c2a:	b143      	cbz	r3, 8007c3e <xQueueGenericSend+0x38>
 8007c2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c30:	f383 8811 	msr	BASEPRI, r3
 8007c34:	f3bf 8f6f 	isb	sy
 8007c38:	f3bf 8f4f 	dsb	sy
 8007c3c:	e7fe      	b.n	8007c3c <xQueueGenericSend+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007c3e:	2e02      	cmp	r6, #2
 8007c40:	d10b      	bne.n	8007c5a <xQueueGenericSend+0x54>
 8007c42:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8007c44:	2b01      	cmp	r3, #1
 8007c46:	d008      	beq.n	8007c5a <xQueueGenericSend+0x54>
 8007c48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c4c:	f383 8811 	msr	BASEPRI, r3
 8007c50:	f3bf 8f6f 	isb	sy
 8007c54:	f3bf 8f4f 	dsb	sy
 8007c58:	e7fe      	b.n	8007c58 <xQueueGenericSend+0x52>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007c5a:	f000 fde9 	bl	8008830 <xTaskGetSchedulerState>
 8007c5e:	4605      	mov	r5, r0
 8007c60:	b330      	cbz	r0, 8007cb0 <xQueueGenericSend+0xaa>
 8007c62:	2500      	movs	r5, #0
		prvLockQueue( pxQueue );
 8007c64:	f04f 0800 	mov.w	r8, #0
		taskENTER_CRITICAL();
 8007c68:	f000 feac 	bl	80089c4 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007c6c:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8007c6e:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8007c70:	429a      	cmp	r2, r3
 8007c72:	d301      	bcc.n	8007c78 <xQueueGenericSend+0x72>
 8007c74:	2e02      	cmp	r6, #2
 8007c76:	d127      	bne.n	8007cc8 <xQueueGenericSend+0xc2>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007c78:	4632      	mov	r2, r6
 8007c7a:	4639      	mov	r1, r7
 8007c7c:	4620      	mov	r0, r4
 8007c7e:	f7ff fe95 	bl	80079ac <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007c82:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8007c84:	b11b      	cbz	r3, 8007c8e <xQueueGenericSend+0x88>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007c86:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8007c8a:	f000 fd41 	bl	8008710 <xTaskRemoveFromEventList>
					else if( xYieldRequired != pdFALSE )
 8007c8e:	b148      	cbz	r0, 8007ca4 <xQueueGenericSend+0x9e>
						queueYIELD_IF_USING_PREEMPTION();
 8007c90:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8007c94:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007c98:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8007c9c:	f3bf 8f4f 	dsb	sy
 8007ca0:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8007ca4:	f000 feae 	bl	8008a04 <vPortExitCritical>
				return pdPASS;
 8007ca8:	2001      	movs	r0, #1
}
 8007caa:	b004      	add	sp, #16
 8007cac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007cb0:	9b01      	ldr	r3, [sp, #4]
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d0d6      	beq.n	8007c64 <xQueueGenericSend+0x5e>
 8007cb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cba:	f383 8811 	msr	BASEPRI, r3
 8007cbe:	f3bf 8f6f 	isb	sy
 8007cc2:	f3bf 8f4f 	dsb	sy
 8007cc6:	e7fe      	b.n	8007cc6 <xQueueGenericSend+0xc0>
				if( xTicksToWait == ( TickType_t ) 0 )
 8007cc8:	9b01      	ldr	r3, [sp, #4]
 8007cca:	b91b      	cbnz	r3, 8007cd4 <xQueueGenericSend+0xce>
					taskEXIT_CRITICAL();
 8007ccc:	f000 fe9a 	bl	8008a04 <vPortExitCritical>
					return errQUEUE_FULL;
 8007cd0:	2000      	movs	r0, #0
 8007cd2:	e7ea      	b.n	8007caa <xQueueGenericSend+0xa4>
				else if( xEntryTimeSet == pdFALSE )
 8007cd4:	b915      	cbnz	r5, 8007cdc <xQueueGenericSend+0xd6>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007cd6:	a802      	add	r0, sp, #8
 8007cd8:	f000 fd5c 	bl	8008794 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8007cdc:	f000 fe92 	bl	8008a04 <vPortExitCritical>
		vTaskSuspendAll();
 8007ce0:	f000 fb88 	bl	80083f4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007ce4:	f000 fe6e 	bl	80089c4 <vPortEnterCritical>
 8007ce8:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8007cec:	2bff      	cmp	r3, #255	@ 0xff
 8007cee:	bf08      	it	eq
 8007cf0:	f884 8044 	strbeq.w	r8, [r4, #68]	@ 0x44
 8007cf4:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8007cf8:	2bff      	cmp	r3, #255	@ 0xff
 8007cfa:	bf08      	it	eq
 8007cfc:	f884 8045 	strbeq.w	r8, [r4, #69]	@ 0x45
 8007d00:	f000 fe80 	bl	8008a04 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007d04:	a901      	add	r1, sp, #4
 8007d06:	a802      	add	r0, sp, #8
 8007d08:	f000 fd50 	bl	80087ac <xTaskCheckForTimeOut>
 8007d0c:	bb38      	cbnz	r0, 8007d5e <xQueueGenericSend+0x158>
=======
 80056f4:	f001 f82e 	bl	8006754 <vPortExitCritical>

	return xReturn;
}
 80056f8:	fab4 f084 	clz	r0, r4
 80056fc:	0940      	lsrs	r0, r0, #5
 80056fe:	bd10      	pop	{r4, pc}

08005700 <prvCopyDataToQueue>:
{
 8005700:	b570      	push	{r4, r5, r6, lr}
 8005702:	4616      	mov	r6, r2
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005704:	6c02      	ldr	r2, [r0, #64]	@ 0x40
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005706:	6b85      	ldr	r5, [r0, #56]	@ 0x38
{
 8005708:	4604      	mov	r4, r0
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800570a:	b942      	cbnz	r2, 800571e <prvCopyDataToQueue+0x1e>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800570c:	6806      	ldr	r6, [r0, #0]
 800570e:	b99e      	cbnz	r6, 8005738 <prvCopyDataToQueue+0x38>
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8005710:	6840      	ldr	r0, [r0, #4]
 8005712:	f000 ff47 	bl	80065a4 <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 8005716:	6066      	str	r6, [r4, #4]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005718:	3501      	adds	r5, #1
 800571a:	63a5      	str	r5, [r4, #56]	@ 0x38
}
 800571c:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 800571e:	b96e      	cbnz	r6, 800573c <prvCopyDataToQueue+0x3c>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8005720:	6880      	ldr	r0, [r0, #8]
 8005722:	f003 ffc6 	bl	80096b2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8005726:	68a3      	ldr	r3, [r4, #8]
 8005728:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 800572a:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800572c:	6862      	ldr	r2, [r4, #4]
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800572e:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005730:	4293      	cmp	r3, r2
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005732:	bf24      	itt	cs
 8005734:	6823      	ldrcs	r3, [r4, #0]
 8005736:	60a3      	strcs	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
 8005738:	2000      	movs	r0, #0
 800573a:	e7ed      	b.n	8005718 <prvCopyDataToQueue+0x18>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800573c:	68c0      	ldr	r0, [r0, #12]
 800573e:	f003 ffb8 	bl	80096b2 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8005742:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8005744:	68e3      	ldr	r3, [r4, #12]
 8005746:	4251      	negs	r1, r2
 8005748:	1a9b      	subs	r3, r3, r2
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800574a:	6822      	ldr	r2, [r4, #0]
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800574c:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800574e:	4293      	cmp	r3, r2
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8005750:	bf3e      	ittt	cc
 8005752:	6863      	ldrcc	r3, [r4, #4]
 8005754:	185b      	addcc	r3, r3, r1
 8005756:	60e3      	strcc	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 8005758:	2e02      	cmp	r6, #2
 800575a:	d1ed      	bne.n	8005738 <prvCopyDataToQueue+0x38>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800575c:	b10d      	cbz	r5, 8005762 <prvCopyDataToQueue+0x62>
				--uxMessagesWaiting;
 800575e:	3d01      	subs	r5, #1
 8005760:	e7ea      	b.n	8005738 <prvCopyDataToQueue+0x38>
BaseType_t xReturn = pdFALSE;
 8005762:	4628      	mov	r0, r5
 8005764:	e7d8      	b.n	8005718 <prvCopyDataToQueue+0x18>

08005766 <prvCopyDataFromQueue>:
{
 8005766:	4603      	mov	r3, r0
 8005768:	b410      	push	{r4}
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800576a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
{
 800576c:	4608      	mov	r0, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800576e:	b16a      	cbz	r2, 800578c <prvCopyDataFromQueue+0x26>
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8005770:	68dc      	ldr	r4, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005772:	6859      	ldr	r1, [r3, #4]
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8005774:	4414      	add	r4, r2
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005776:	428c      	cmp	r4, r1
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8005778:	bf28      	it	cs
 800577a:	6819      	ldrcs	r1, [r3, #0]
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800577c:	60dc      	str	r4, [r3, #12]
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800577e:	bf28      	it	cs
 8005780:	60d9      	strcs	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8005782:	68d9      	ldr	r1, [r3, #12]
}
 8005784:	f85d 4b04 	ldr.w	r4, [sp], #4
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8005788:	f003 bf93 	b.w	80096b2 <memcpy>
}
 800578c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005790:	4770      	bx	lr

08005792 <prvUnlockQueue>:
{
 8005792:	b570      	push	{r4, r5, r6, lr}
 8005794:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8005796:	f000 ffbd 	bl	8006714 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 800579a:	f894 5045 	ldrb.w	r5, [r4, #69]	@ 0x45
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800579e:	f104 0624 	add.w	r6, r4, #36	@ 0x24
		int8_t cTxLock = pxQueue->cTxLock;
 80057a2:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80057a4:	2d00      	cmp	r5, #0
 80057a6:	dc14      	bgt.n	80057d2 <prvUnlockQueue+0x40>
		pxQueue->cTxLock = queueUNLOCKED;
 80057a8:	23ff      	movs	r3, #255	@ 0xff
 80057aa:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
	taskEXIT_CRITICAL();
 80057ae:	f000 ffd1 	bl	8006754 <vPortExitCritical>
	taskENTER_CRITICAL();
 80057b2:	f000 ffaf 	bl	8006714 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 80057b6:	f894 5044 	ldrb.w	r5, [r4, #68]	@ 0x44
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80057ba:	f104 0610 	add.w	r6, r4, #16
		int8_t cRxLock = pxQueue->cRxLock;
 80057be:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80057c0:	2d00      	cmp	r5, #0
 80057c2:	dc12      	bgt.n	80057ea <prvUnlockQueue+0x58>
		pxQueue->cRxLock = queueUNLOCKED;
 80057c4:	23ff      	movs	r3, #255	@ 0xff
 80057c6:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
}
 80057ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 80057ce:	f000 bfc1 	b.w	8006754 <vPortExitCritical>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80057d2:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d0e7      	beq.n	80057a8 <prvUnlockQueue+0x16>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80057d8:	4630      	mov	r0, r6
 80057da:	f000 fe43 	bl	8006464 <xTaskRemoveFromEventList>
 80057de:	b108      	cbz	r0, 80057e4 <prvUnlockQueue+0x52>
						vTaskMissedYield();
 80057e0:	f000 feca 	bl	8006578 <vTaskMissedYield>
			--cTxLock;
 80057e4:	3d01      	subs	r5, #1
 80057e6:	b26d      	sxtb	r5, r5
 80057e8:	e7dc      	b.n	80057a4 <prvUnlockQueue+0x12>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80057ea:	6923      	ldr	r3, [r4, #16]
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d0e9      	beq.n	80057c4 <prvUnlockQueue+0x32>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80057f0:	4630      	mov	r0, r6
 80057f2:	f000 fe37 	bl	8006464 <xTaskRemoveFromEventList>
 80057f6:	b108      	cbz	r0, 80057fc <prvUnlockQueue+0x6a>
					vTaskMissedYield();
 80057f8:	f000 febe 	bl	8006578 <vTaskMissedYield>
				--cRxLock;
 80057fc:	3d01      	subs	r5, #1
 80057fe:	b26d      	sxtb	r5, r5
 8005800:	e7de      	b.n	80057c0 <prvUnlockQueue+0x2e>

08005802 <xQueueGenericReset>:
{
 8005802:	b538      	push	{r3, r4, r5, lr}
 8005804:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 8005806:	4604      	mov	r4, r0
 8005808:	b940      	cbnz	r0, 800581c <xQueueGenericReset+0x1a>
	__asm volatile
 800580a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800580e:	f383 8811 	msr	BASEPRI, r3
 8005812:	f3bf 8f6f 	isb	sy
 8005816:	f3bf 8f4f 	dsb	sy
 800581a:	e7fe      	b.n	800581a <xQueueGenericReset+0x18>
	taskENTER_CRITICAL();
 800581c:	f000 ff7a 	bl	8006714 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8005820:	e9d4 310f 	ldrd	r3, r1, [r4, #60]	@ 0x3c
 8005824:	6822      	ldr	r2, [r4, #0]
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005826:	60a2      	str	r2, [r4, #8]
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8005828:	434b      	muls	r3, r1
 800582a:	18d0      	adds	r0, r2, r3
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800582c:	1a5b      	subs	r3, r3, r1
 800582e:	441a      	add	r2, r3
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8005830:	6060      	str	r0, [r4, #4]
		pxQueue->cRxLock = queueUNLOCKED;
 8005832:	23ff      	movs	r3, #255	@ 0xff
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005834:	2000      	movs	r0, #0
 8005836:	63a0      	str	r0, [r4, #56]	@ 0x38
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8005838:	60e2      	str	r2, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800583a:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800583e:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
		if( xNewQueue == pdFALSE )
 8005842:	b9a5      	cbnz	r5, 800586e <xQueueGenericReset+0x6c>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005844:	6923      	ldr	r3, [r4, #16]
 8005846:	b173      	cbz	r3, 8005866 <xQueueGenericReset+0x64>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005848:	f104 0010 	add.w	r0, r4, #16
 800584c:	f000 fe0a 	bl	8006464 <xTaskRemoveFromEventList>
 8005850:	b148      	cbz	r0, 8005866 <xQueueGenericReset+0x64>
					queueYIELD_IF_USING_PREEMPTION();
 8005852:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8005856:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800585a:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800585e:	f3bf 8f4f 	dsb	sy
 8005862:	f3bf 8f6f 	isb	sy
	taskEXIT_CRITICAL();
 8005866:	f000 ff75 	bl	8006754 <vPortExitCritical>
}
 800586a:	2001      	movs	r0, #1
 800586c:	bd38      	pop	{r3, r4, r5, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800586e:	f104 0010 	add.w	r0, r4, #16
 8005872:	f7ff fefa 	bl	800566a <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005876:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800587a:	f7ff fef6 	bl	800566a <vListInitialise>
 800587e:	e7f2      	b.n	8005866 <xQueueGenericReset+0x64>

08005880 <xQueueGenericCreateStatic>:
	{
 8005880:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005882:	460d      	mov	r5, r1
 8005884:	461c      	mov	r4, r3
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005886:	b940      	cbnz	r0, 800589a <xQueueGenericCreateStatic+0x1a>
 8005888:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800588c:	f383 8811 	msr	BASEPRI, r3
 8005890:	f3bf 8f6f 	isb	sy
 8005894:	f3bf 8f4f 	dsb	sy
 8005898:	e7fe      	b.n	8005898 <xQueueGenericCreateStatic+0x18>
		configASSERT( pxStaticQueue != NULL );
 800589a:	b943      	cbnz	r3, 80058ae <xQueueGenericCreateStatic+0x2e>
 800589c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058a0:	f383 8811 	msr	BASEPRI, r3
 80058a4:	f3bf 8f6f 	isb	sy
 80058a8:	f3bf 8f4f 	dsb	sy
 80058ac:	e7fe      	b.n	80058ac <xQueueGenericCreateStatic+0x2c>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80058ae:	b14a      	cbz	r2, 80058c4 <xQueueGenericCreateStatic+0x44>
 80058b0:	b991      	cbnz	r1, 80058d8 <xQueueGenericCreateStatic+0x58>
 80058b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058b6:	f383 8811 	msr	BASEPRI, r3
 80058ba:	f3bf 8f6f 	isb	sy
 80058be:	f3bf 8f4f 	dsb	sy
 80058c2:	e7fe      	b.n	80058c2 <xQueueGenericCreateStatic+0x42>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80058c4:	b141      	cbz	r1, 80058d8 <xQueueGenericCreateStatic+0x58>
 80058c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058ca:	f383 8811 	msr	BASEPRI, r3
 80058ce:	f3bf 8f6f 	isb	sy
 80058d2:	f3bf 8f4f 	dsb	sy
 80058d6:	e7fe      	b.n	80058d6 <xQueueGenericCreateStatic+0x56>
			volatile size_t xSize = sizeof( StaticQueue_t );
 80058d8:	2348      	movs	r3, #72	@ 0x48
 80058da:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 80058dc:	9b01      	ldr	r3, [sp, #4]
 80058de:	2b48      	cmp	r3, #72	@ 0x48
 80058e0:	d008      	beq.n	80058f4 <xQueueGenericCreateStatic+0x74>
 80058e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058e6:	f383 8811 	msr	BASEPRI, r3
 80058ea:	f3bf 8f6f 	isb	sy
 80058ee:	f3bf 8f4f 	dsb	sy
 80058f2:	e7fe      	b.n	80058f2 <xQueueGenericCreateStatic+0x72>
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80058f4:	2101      	movs	r1, #1
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80058f6:	2d00      	cmp	r5, #0
 80058f8:	bf08      	it	eq
 80058fa:	4622      	moveq	r2, r4
	pxNewQueue->uxItemSize = uxItemSize;
 80058fc:	e9c4 050f 	strd	r0, r5, [r4, #60]	@ 0x3c
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005900:	f884 1046 	strb.w	r1, [r4, #70]	@ 0x46
	if( uxItemSize == ( UBaseType_t ) 0 )
 8005904:	6022      	str	r2, [r4, #0]
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005906:	4620      	mov	r0, r4
 8005908:	f7ff ff7b 	bl	8005802 <xQueueGenericReset>
	}
 800590c:	4620      	mov	r0, r4
 800590e:	b003      	add	sp, #12
 8005910:	bd30      	pop	{r4, r5, pc}

08005912 <xQueueGenericCreate>:
	{
 8005912:	b570      	push	{r4, r5, r6, lr}
 8005914:	460d      	mov	r5, r1
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005916:	4606      	mov	r6, r0
 8005918:	b940      	cbnz	r0, 800592c <xQueueGenericCreate+0x1a>
 800591a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800591e:	f383 8811 	msr	BASEPRI, r3
 8005922:	f3bf 8f6f 	isb	sy
 8005926:	f3bf 8f4f 	dsb	sy
 800592a:	e7fe      	b.n	800592a <xQueueGenericCreate+0x18>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800592c:	4348      	muls	r0, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800592e:	3048      	adds	r0, #72	@ 0x48
 8005930:	f001 f856 	bl	80069e0 <pvPortMalloc>
		if( pxNewQueue != NULL )
 8005934:	4604      	mov	r4, r0
 8005936:	b160      	cbz	r0, 8005952 <xQueueGenericCreate+0x40>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005938:	2300      	movs	r3, #0
 800593a:	f880 3046 	strb.w	r3, [r0, #70]	@ 0x46
	if( uxItemSize == ( UBaseType_t ) 0 )
 800593e:	b155      	cbz	r5, 8005956 <xQueueGenericCreate+0x44>
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8005940:	f100 0348 	add.w	r3, r0, #72	@ 0x48
	pxNewQueue->uxItemSize = uxItemSize;
 8005944:	e9c4 650f 	strd	r6, r5, [r4, #60]	@ 0x3c
 8005948:	6023      	str	r3, [r4, #0]
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800594a:	2101      	movs	r1, #1
 800594c:	4620      	mov	r0, r4
 800594e:	f7ff ff58 	bl	8005802 <xQueueGenericReset>
	}
 8005952:	4620      	mov	r0, r4
 8005954:	bd70      	pop	{r4, r5, r6, pc}
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005956:	4603      	mov	r3, r0
 8005958:	e7f4      	b.n	8005944 <xQueueGenericCreate+0x32>

0800595a <xQueueGenericSend>:
{
 800595a:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800595e:	460f      	mov	r7, r1
 8005960:	9201      	str	r2, [sp, #4]
 8005962:	461e      	mov	r6, r3
	configASSERT( pxQueue );
 8005964:	4604      	mov	r4, r0
 8005966:	b940      	cbnz	r0, 800597a <xQueueGenericSend+0x20>
 8005968:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800596c:	f383 8811 	msr	BASEPRI, r3
 8005970:	f3bf 8f6f 	isb	sy
 8005974:	f3bf 8f4f 	dsb	sy
 8005978:	e7fe      	b.n	8005978 <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800597a:	b951      	cbnz	r1, 8005992 <xQueueGenericSend+0x38>
 800597c:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800597e:	b143      	cbz	r3, 8005992 <xQueueGenericSend+0x38>
 8005980:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005984:	f383 8811 	msr	BASEPRI, r3
 8005988:	f3bf 8f6f 	isb	sy
 800598c:	f3bf 8f4f 	dsb	sy
 8005990:	e7fe      	b.n	8005990 <xQueueGenericSend+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005992:	2e02      	cmp	r6, #2
 8005994:	d10b      	bne.n	80059ae <xQueueGenericSend+0x54>
 8005996:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8005998:	2b01      	cmp	r3, #1
 800599a:	d008      	beq.n	80059ae <xQueueGenericSend+0x54>
 800599c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059a0:	f383 8811 	msr	BASEPRI, r3
 80059a4:	f3bf 8f6f 	isb	sy
 80059a8:	f3bf 8f4f 	dsb	sy
 80059ac:	e7fe      	b.n	80059ac <xQueueGenericSend+0x52>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80059ae:	f000 fde9 	bl	8006584 <xTaskGetSchedulerState>
 80059b2:	4605      	mov	r5, r0
 80059b4:	b330      	cbz	r0, 8005a04 <xQueueGenericSend+0xaa>
 80059b6:	2500      	movs	r5, #0
		prvLockQueue( pxQueue );
 80059b8:	f04f 0800 	mov.w	r8, #0
		taskENTER_CRITICAL();
 80059bc:	f000 feaa 	bl	8006714 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80059c0:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80059c2:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80059c4:	429a      	cmp	r2, r3
 80059c6:	d301      	bcc.n	80059cc <xQueueGenericSend+0x72>
 80059c8:	2e02      	cmp	r6, #2
 80059ca:	d127      	bne.n	8005a1c <xQueueGenericSend+0xc2>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80059cc:	4632      	mov	r2, r6
 80059ce:	4639      	mov	r1, r7
 80059d0:	4620      	mov	r0, r4
 80059d2:	f7ff fe95 	bl	8005700 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80059d6:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80059d8:	b11b      	cbz	r3, 80059e2 <xQueueGenericSend+0x88>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80059da:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 80059de:	f000 fd41 	bl	8006464 <xTaskRemoveFromEventList>
					else if( xYieldRequired != pdFALSE )
 80059e2:	b148      	cbz	r0, 80059f8 <xQueueGenericSend+0x9e>
						queueYIELD_IF_USING_PREEMPTION();
 80059e4:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80059e8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80059ec:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80059f0:	f3bf 8f4f 	dsb	sy
 80059f4:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 80059f8:	f000 feac 	bl	8006754 <vPortExitCritical>
				return pdPASS;
 80059fc:	2001      	movs	r0, #1
}
 80059fe:	b004      	add	sp, #16
 8005a00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005a04:	9b01      	ldr	r3, [sp, #4]
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d0d6      	beq.n	80059b8 <xQueueGenericSend+0x5e>
 8005a0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a0e:	f383 8811 	msr	BASEPRI, r3
 8005a12:	f3bf 8f6f 	isb	sy
 8005a16:	f3bf 8f4f 	dsb	sy
 8005a1a:	e7fe      	b.n	8005a1a <xQueueGenericSend+0xc0>
				if( xTicksToWait == ( TickType_t ) 0 )
 8005a1c:	9b01      	ldr	r3, [sp, #4]
 8005a1e:	b91b      	cbnz	r3, 8005a28 <xQueueGenericSend+0xce>
					taskEXIT_CRITICAL();
 8005a20:	f000 fe98 	bl	8006754 <vPortExitCritical>
					return errQUEUE_FULL;
 8005a24:	2000      	movs	r0, #0
 8005a26:	e7ea      	b.n	80059fe <xQueueGenericSend+0xa4>
				else if( xEntryTimeSet == pdFALSE )
 8005a28:	b915      	cbnz	r5, 8005a30 <xQueueGenericSend+0xd6>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005a2a:	a802      	add	r0, sp, #8
 8005a2c:	f000 fd5c 	bl	80064e8 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8005a30:	f000 fe90 	bl	8006754 <vPortExitCritical>
		vTaskSuspendAll();
 8005a34:	f000 fb88 	bl	8006148 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005a38:	f000 fe6c 	bl	8006714 <vPortEnterCritical>
 8005a3c:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8005a40:	2bff      	cmp	r3, #255	@ 0xff
 8005a42:	bf08      	it	eq
 8005a44:	f884 8044 	strbeq.w	r8, [r4, #68]	@ 0x44
 8005a48:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8005a4c:	2bff      	cmp	r3, #255	@ 0xff
 8005a4e:	bf08      	it	eq
 8005a50:	f884 8045 	strbeq.w	r8, [r4, #69]	@ 0x45
 8005a54:	f000 fe7e 	bl	8006754 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005a58:	a901      	add	r1, sp, #4
 8005a5a:	a802      	add	r0, sp, #8
 8005a5c:	f000 fd50 	bl	8006500 <xTaskCheckForTimeOut>
 8005a60:	bb38      	cbnz	r0, 8005ab2 <xQueueGenericSend+0x158>
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
<<<<<<< HEAD
 8007d0e:	f000 fe59 	bl	80089c4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007d12:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8007d14:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8007d16:	429a      	cmp	r2, r3
 8007d18:	d10e      	bne.n	8007d38 <xQueueGenericSend+0x132>
=======
 8005a62:	f000 fe57 	bl	8006714 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005a66:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8005a68:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8005a6a:	429a      	cmp	r2, r3
 8005a6c:	d10e      	bne.n	8005a8c <xQueueGenericSend+0x132>
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
<<<<<<< HEAD
 8007d1a:	f000 fe73 	bl	8008a04 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007d1e:	9901      	ldr	r1, [sp, #4]
 8007d20:	f104 0010 	add.w	r0, r4, #16
 8007d24:	f000 fcda 	bl	80086dc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007d28:	4620      	mov	r0, r4
 8007d2a:	f7ff fe88 	bl	8007a3e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007d2e:	f000 fc01 	bl	8008534 <xTaskResumeAll>
 8007d32:	b148      	cbz	r0, 8007d48 <xQueueGenericSend+0x142>
 8007d34:	2501      	movs	r5, #1
 8007d36:	e797      	b.n	8007c68 <xQueueGenericSend+0x62>
	taskEXIT_CRITICAL();
 8007d38:	f000 fe64 	bl	8008a04 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 8007d3c:	4620      	mov	r0, r4
 8007d3e:	f7ff fe7e 	bl	8007a3e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007d42:	f000 fbf7 	bl	8008534 <xTaskResumeAll>
 8007d46:	e7f5      	b.n	8007d34 <xQueueGenericSend+0x12e>
					portYIELD_WITHIN_API();
 8007d48:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8007d4c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007d50:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8007d54:	f3bf 8f4f 	dsb	sy
 8007d58:	f3bf 8f6f 	isb	sy
 8007d5c:	e7ea      	b.n	8007d34 <xQueueGenericSend+0x12e>
			prvUnlockQueue( pxQueue );
 8007d5e:	4620      	mov	r0, r4
 8007d60:	f7ff fe6d 	bl	8007a3e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007d64:	f000 fbe6 	bl	8008534 <xTaskResumeAll>
			return errQUEUE_FULL;
 8007d68:	e7b2      	b.n	8007cd0 <xQueueGenericSend+0xca>

08007d6a <xQueueGenericSendFromISR>:
{
 8007d6a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007d6e:	4689      	mov	r9, r1
 8007d70:	4617      	mov	r7, r2
 8007d72:	461e      	mov	r6, r3
	configASSERT( pxQueue );
 8007d74:	4604      	mov	r4, r0
 8007d76:	b940      	cbnz	r0, 8007d8a <xQueueGenericSendFromISR+0x20>
 8007d78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d7c:	f383 8811 	msr	BASEPRI, r3
 8007d80:	f3bf 8f6f 	isb	sy
 8007d84:	f3bf 8f4f 	dsb	sy
 8007d88:	e7fe      	b.n	8007d88 <xQueueGenericSendFromISR+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007d8a:	b951      	cbnz	r1, 8007da2 <xQueueGenericSendFromISR+0x38>
 8007d8c:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8007d8e:	b143      	cbz	r3, 8007da2 <xQueueGenericSendFromISR+0x38>
 8007d90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d94:	f383 8811 	msr	BASEPRI, r3
 8007d98:	f3bf 8f6f 	isb	sy
 8007d9c:	f3bf 8f4f 	dsb	sy
 8007da0:	e7fe      	b.n	8007da0 <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007da2:	2e02      	cmp	r6, #2
 8007da4:	d10b      	bne.n	8007dbe <xQueueGenericSendFromISR+0x54>
 8007da6:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8007da8:	2b01      	cmp	r3, #1
 8007daa:	d008      	beq.n	8007dbe <xQueueGenericSendFromISR+0x54>
 8007dac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007db0:	f383 8811 	msr	BASEPRI, r3
 8007db4:	f3bf 8f6f 	isb	sy
 8007db8:	f3bf 8f4f 	dsb	sy
 8007dbc:	e7fe      	b.n	8007dbc <xQueueGenericSendFromISR+0x52>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007dbe:	f000 ff13 	bl	8008be8 <vPortValidateInterruptPriority>
	__asm volatile
 8007dc2:	f3ef 8811 	mrs	r8, BASEPRI
 8007dc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007dca:	f383 8811 	msr	BASEPRI, r3
 8007dce:	f3bf 8f6f 	isb	sy
 8007dd2:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007dd6:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8007dd8:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8007dda:	429a      	cmp	r2, r3
 8007ddc:	d301      	bcc.n	8007de2 <xQueueGenericSendFromISR+0x78>
 8007dde:	2e02      	cmp	r6, #2
 8007de0:	d11d      	bne.n	8007e1e <xQueueGenericSendFromISR+0xb4>
			const int8_t cTxLock = pxQueue->cTxLock;
 8007de2:	f894 5045 	ldrb.w	r5, [r4, #69]	@ 0x45
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007de6:	4632      	mov	r2, r6
			const int8_t cTxLock = pxQueue->cTxLock;
 8007de8:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007dea:	4649      	mov	r1, r9
 8007dec:	4620      	mov	r0, r4
 8007dee:	f7ff fddd 	bl	80079ac <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 8007df2:	1c6b      	adds	r3, r5, #1
 8007df4:	d10e      	bne.n	8007e14 <xQueueGenericSendFromISR+0xaa>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007df6:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8007df8:	b13b      	cbz	r3, 8007e0a <xQueueGenericSendFromISR+0xa0>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007dfa:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8007dfe:	f000 fc87 	bl	8008710 <xTaskRemoveFromEventList>
 8007e02:	b110      	cbz	r0, 8007e0a <xQueueGenericSendFromISR+0xa0>
							if( pxHigherPriorityTaskWoken != NULL )
 8007e04:	b10f      	cbz	r7, 8007e0a <xQueueGenericSendFromISR+0xa0>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007e06:	2301      	movs	r3, #1
 8007e08:	603b      	str	r3, [r7, #0]
			xReturn = pdPASS;
 8007e0a:	2001      	movs	r0, #1
	__asm volatile
 8007e0c:	f388 8811 	msr	BASEPRI, r8
}
 8007e10:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007e14:	3501      	adds	r5, #1
 8007e16:	b26d      	sxtb	r5, r5
 8007e18:	f884 5045 	strb.w	r5, [r4, #69]	@ 0x45
 8007e1c:	e7f5      	b.n	8007e0a <xQueueGenericSendFromISR+0xa0>
			xReturn = errQUEUE_FULL;
 8007e1e:	2000      	movs	r0, #0
 8007e20:	e7f4      	b.n	8007e0c <xQueueGenericSendFromISR+0xa2>

08007e22 <xQueueReceive>:
{
 8007e22:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8007e26:	460e      	mov	r6, r1
 8007e28:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 8007e2a:	4604      	mov	r4, r0
 8007e2c:	b940      	cbnz	r0, 8007e40 <xQueueReceive+0x1e>
	__asm volatile
 8007e2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e32:	f383 8811 	msr	BASEPRI, r3
 8007e36:	f3bf 8f6f 	isb	sy
 8007e3a:	f3bf 8f4f 	dsb	sy
 8007e3e:	e7fe      	b.n	8007e3e <xQueueReceive+0x1c>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007e40:	b951      	cbnz	r1, 8007e58 <xQueueReceive+0x36>
 8007e42:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8007e44:	b143      	cbz	r3, 8007e58 <xQueueReceive+0x36>
 8007e46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e4a:	f383 8811 	msr	BASEPRI, r3
 8007e4e:	f3bf 8f6f 	isb	sy
 8007e52:	f3bf 8f4f 	dsb	sy
 8007e56:	e7fe      	b.n	8007e56 <xQueueReceive+0x34>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007e58:	f000 fcea 	bl	8008830 <xTaskGetSchedulerState>
 8007e5c:	4605      	mov	r5, r0
 8007e5e:	b318      	cbz	r0, 8007ea8 <xQueueReceive+0x86>
 8007e60:	2500      	movs	r5, #0
		prvLockQueue( pxQueue );
 8007e62:	f04f 0800 	mov.w	r8, #0
		taskENTER_CRITICAL();
 8007e66:	f000 fdad 	bl	80089c4 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007e6a:	6ba7      	ldr	r7, [r4, #56]	@ 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007e6c:	b347      	cbz	r7, 8007ec0 <xQueueReceive+0x9e>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007e6e:	4631      	mov	r1, r6
 8007e70:	4620      	mov	r0, r4
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007e72:	3f01      	subs	r7, #1
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007e74:	f7ff fdcd 	bl	8007a12 <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007e78:	63a7      	str	r7, [r4, #56]	@ 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007e7a:	6923      	ldr	r3, [r4, #16]
 8007e7c:	b173      	cbz	r3, 8007e9c <xQueueReceive+0x7a>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007e7e:	f104 0010 	add.w	r0, r4, #16
 8007e82:	f000 fc45 	bl	8008710 <xTaskRemoveFromEventList>
 8007e86:	b148      	cbz	r0, 8007e9c <xQueueReceive+0x7a>
						queueYIELD_IF_USING_PREEMPTION();
 8007e88:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8007e8c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007e90:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8007e94:	f3bf 8f4f 	dsb	sy
 8007e98:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8007e9c:	f000 fdb2 	bl	8008a04 <vPortExitCritical>
				return pdPASS;
 8007ea0:	2001      	movs	r0, #1
}
 8007ea2:	b004      	add	sp, #16
 8007ea4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007ea8:	9b01      	ldr	r3, [sp, #4]
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d0d9      	beq.n	8007e62 <xQueueReceive+0x40>
 8007eae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007eb2:	f383 8811 	msr	BASEPRI, r3
 8007eb6:	f3bf 8f6f 	isb	sy
 8007eba:	f3bf 8f4f 	dsb	sy
 8007ebe:	e7fe      	b.n	8007ebe <xQueueReceive+0x9c>
				if( xTicksToWait == ( TickType_t ) 0 )
 8007ec0:	9b01      	ldr	r3, [sp, #4]
 8007ec2:	b91b      	cbnz	r3, 8007ecc <xQueueReceive+0xaa>
					taskEXIT_CRITICAL();
 8007ec4:	f000 fd9e 	bl	8008a04 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8007ec8:	2000      	movs	r0, #0
 8007eca:	e7ea      	b.n	8007ea2 <xQueueReceive+0x80>
				else if( xEntryTimeSet == pdFALSE )
 8007ecc:	b915      	cbnz	r5, 8007ed4 <xQueueReceive+0xb2>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007ece:	a802      	add	r0, sp, #8
 8007ed0:	f000 fc60 	bl	8008794 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8007ed4:	f000 fd96 	bl	8008a04 <vPortExitCritical>
		vTaskSuspendAll();
 8007ed8:	f000 fa8c 	bl	80083f4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007edc:	f000 fd72 	bl	80089c4 <vPortEnterCritical>
 8007ee0:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8007ee4:	2bff      	cmp	r3, #255	@ 0xff
 8007ee6:	bf08      	it	eq
 8007ee8:	f884 8044 	strbeq.w	r8, [r4, #68]	@ 0x44
 8007eec:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8007ef0:	2bff      	cmp	r3, #255	@ 0xff
 8007ef2:	bf08      	it	eq
 8007ef4:	f884 8045 	strbeq.w	r8, [r4, #69]	@ 0x45
 8007ef8:	f000 fd84 	bl	8008a04 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007efc:	a901      	add	r1, sp, #4
 8007efe:	a802      	add	r0, sp, #8
 8007f00:	f000 fc54 	bl	80087ac <xTaskCheckForTimeOut>
 8007f04:	bb00      	cbnz	r0, 8007f48 <xQueueReceive+0x126>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007f06:	4620      	mov	r0, r4
 8007f08:	f7ff fd45 	bl	8007996 <prvIsQueueEmpty>
 8007f0c:	b1b0      	cbz	r0, 8007f3c <xQueueReceive+0x11a>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007f0e:	9901      	ldr	r1, [sp, #4]
 8007f10:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8007f14:	f000 fbe2 	bl	80086dc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007f18:	4620      	mov	r0, r4
 8007f1a:	f7ff fd90 	bl	8007a3e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007f1e:	f000 fb09 	bl	8008534 <xTaskResumeAll>
 8007f22:	b948      	cbnz	r0, 8007f38 <xQueueReceive+0x116>
					portYIELD_WITHIN_API();
 8007f24:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8007f28:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007f2c:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8007f30:	f3bf 8f4f 	dsb	sy
 8007f34:	f3bf 8f6f 	isb	sy
 8007f38:	2501      	movs	r5, #1
 8007f3a:	e794      	b.n	8007e66 <xQueueReceive+0x44>
				prvUnlockQueue( pxQueue );
 8007f3c:	4620      	mov	r0, r4
 8007f3e:	f7ff fd7e 	bl	8007a3e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007f42:	f000 faf7 	bl	8008534 <xTaskResumeAll>
 8007f46:	e7f7      	b.n	8007f38 <xQueueReceive+0x116>
			prvUnlockQueue( pxQueue );
 8007f48:	4620      	mov	r0, r4
 8007f4a:	f7ff fd78 	bl	8007a3e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007f4e:	f000 faf1 	bl	8008534 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007f52:	4620      	mov	r0, r4
 8007f54:	f7ff fd1f 	bl	8007996 <prvIsQueueEmpty>
 8007f58:	2800      	cmp	r0, #0
 8007f5a:	d0ed      	beq.n	8007f38 <xQueueReceive+0x116>
 8007f5c:	e7b4      	b.n	8007ec8 <xQueueReceive+0xa6>

08007f5e <xQueueReceiveFromISR>:
{
 8007f5e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007f62:	4689      	mov	r9, r1
 8007f64:	4690      	mov	r8, r2
	configASSERT( pxQueue );
 8007f66:	4604      	mov	r4, r0
 8007f68:	b940      	cbnz	r0, 8007f7c <xQueueReceiveFromISR+0x1e>
 8007f6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f6e:	f383 8811 	msr	BASEPRI, r3
 8007f72:	f3bf 8f6f 	isb	sy
 8007f76:	f3bf 8f4f 	dsb	sy
 8007f7a:	e7fe      	b.n	8007f7a <xQueueReceiveFromISR+0x1c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007f7c:	b951      	cbnz	r1, 8007f94 <xQueueReceiveFromISR+0x36>
 8007f7e:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8007f80:	b143      	cbz	r3, 8007f94 <xQueueReceiveFromISR+0x36>
 8007f82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f86:	f383 8811 	msr	BASEPRI, r3
 8007f8a:	f3bf 8f6f 	isb	sy
 8007f8e:	f3bf 8f4f 	dsb	sy
 8007f92:	e7fe      	b.n	8007f92 <xQueueReceiveFromISR+0x34>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007f94:	f000 fe28 	bl	8008be8 <vPortValidateInterruptPriority>
	__asm volatile
 8007f98:	f3ef 8711 	mrs	r7, BASEPRI
 8007f9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fa0:	f383 8811 	msr	BASEPRI, r3
 8007fa4:	f3bf 8f6f 	isb	sy
 8007fa8:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007fac:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007fae:	b30d      	cbz	r5, 8007ff4 <xQueueReceiveFromISR+0x96>
			const int8_t cRxLock = pxQueue->cRxLock;
 8007fb0:	f894 6044 	ldrb.w	r6, [r4, #68]	@ 0x44
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007fb4:	4649      	mov	r1, r9
			const int8_t cRxLock = pxQueue->cRxLock;
 8007fb6:	b276      	sxtb	r6, r6
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007fb8:	4620      	mov	r0, r4
 8007fba:	f7ff fd2a 	bl	8007a12 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007fbe:	3d01      	subs	r5, #1
			if( cRxLock == queueUNLOCKED )
 8007fc0:	1c73      	adds	r3, r6, #1
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007fc2:	63a5      	str	r5, [r4, #56]	@ 0x38
			if( cRxLock == queueUNLOCKED )
 8007fc4:	d111      	bne.n	8007fea <xQueueReceiveFromISR+0x8c>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007fc6:	6923      	ldr	r3, [r4, #16]
 8007fc8:	b153      	cbz	r3, 8007fe0 <xQueueReceiveFromISR+0x82>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007fca:	f104 0010 	add.w	r0, r4, #16
 8007fce:	f000 fb9f 	bl	8008710 <xTaskRemoveFromEventList>
 8007fd2:	b128      	cbz	r0, 8007fe0 <xQueueReceiveFromISR+0x82>
						if( pxHigherPriorityTaskWoken != NULL )
 8007fd4:	f1b8 0f00 	cmp.w	r8, #0
 8007fd8:	d002      	beq.n	8007fe0 <xQueueReceiveFromISR+0x82>
							*pxHigherPriorityTaskWoken = pdTRUE;
 8007fda:	2301      	movs	r3, #1
 8007fdc:	f8c8 3000 	str.w	r3, [r8]
			xReturn = pdPASS;
 8007fe0:	2001      	movs	r0, #1
	__asm volatile
 8007fe2:	f387 8811 	msr	BASEPRI, r7
}
 8007fe6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8007fea:	3601      	adds	r6, #1
 8007fec:	b276      	sxtb	r6, r6
 8007fee:	f884 6044 	strb.w	r6, [r4, #68]	@ 0x44
 8007ff2:	e7f5      	b.n	8007fe0 <xQueueReceiveFromISR+0x82>
			xReturn = pdFAIL;
 8007ff4:	4628      	mov	r0, r5
 8007ff6:	e7f4      	b.n	8007fe2 <xQueueReceiveFromISR+0x84>

08007ff8 <prvAddNewTaskToReadyList>:
=======
 8005a6e:	f000 fe71 	bl	8006754 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005a72:	9901      	ldr	r1, [sp, #4]
 8005a74:	f104 0010 	add.w	r0, r4, #16
 8005a78:	f000 fcda 	bl	8006430 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005a7c:	4620      	mov	r0, r4
 8005a7e:	f7ff fe88 	bl	8005792 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005a82:	f000 fc01 	bl	8006288 <xTaskResumeAll>
 8005a86:	b148      	cbz	r0, 8005a9c <xQueueGenericSend+0x142>
 8005a88:	2501      	movs	r5, #1
 8005a8a:	e797      	b.n	80059bc <xQueueGenericSend+0x62>
	taskEXIT_CRITICAL();
 8005a8c:	f000 fe62 	bl	8006754 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 8005a90:	4620      	mov	r0, r4
 8005a92:	f7ff fe7e 	bl	8005792 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005a96:	f000 fbf7 	bl	8006288 <xTaskResumeAll>
 8005a9a:	e7f5      	b.n	8005a88 <xQueueGenericSend+0x12e>
					portYIELD_WITHIN_API();
 8005a9c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8005aa0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005aa4:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8005aa8:	f3bf 8f4f 	dsb	sy
 8005aac:	f3bf 8f6f 	isb	sy
 8005ab0:	e7ea      	b.n	8005a88 <xQueueGenericSend+0x12e>
			prvUnlockQueue( pxQueue );
 8005ab2:	4620      	mov	r0, r4
 8005ab4:	f7ff fe6d 	bl	8005792 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005ab8:	f000 fbe6 	bl	8006288 <xTaskResumeAll>
			return errQUEUE_FULL;
 8005abc:	e7b2      	b.n	8005a24 <xQueueGenericSend+0xca>

08005abe <xQueueGenericSendFromISR>:
{
 8005abe:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005ac2:	4689      	mov	r9, r1
 8005ac4:	4617      	mov	r7, r2
 8005ac6:	461e      	mov	r6, r3
	configASSERT( pxQueue );
 8005ac8:	4604      	mov	r4, r0
 8005aca:	b940      	cbnz	r0, 8005ade <xQueueGenericSendFromISR+0x20>
 8005acc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ad0:	f383 8811 	msr	BASEPRI, r3
 8005ad4:	f3bf 8f6f 	isb	sy
 8005ad8:	f3bf 8f4f 	dsb	sy
 8005adc:	e7fe      	b.n	8005adc <xQueueGenericSendFromISR+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005ade:	b951      	cbnz	r1, 8005af6 <xQueueGenericSendFromISR+0x38>
 8005ae0:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8005ae2:	b143      	cbz	r3, 8005af6 <xQueueGenericSendFromISR+0x38>
 8005ae4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ae8:	f383 8811 	msr	BASEPRI, r3
 8005aec:	f3bf 8f6f 	isb	sy
 8005af0:	f3bf 8f4f 	dsb	sy
 8005af4:	e7fe      	b.n	8005af4 <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005af6:	2e02      	cmp	r6, #2
 8005af8:	d10b      	bne.n	8005b12 <xQueueGenericSendFromISR+0x54>
 8005afa:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8005afc:	2b01      	cmp	r3, #1
 8005afe:	d008      	beq.n	8005b12 <xQueueGenericSendFromISR+0x54>
 8005b00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b04:	f383 8811 	msr	BASEPRI, r3
 8005b08:	f3bf 8f6f 	isb	sy
 8005b0c:	f3bf 8f4f 	dsb	sy
 8005b10:	e7fe      	b.n	8005b10 <xQueueGenericSendFromISR+0x52>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005b12:	f000 ff11 	bl	8006938 <vPortValidateInterruptPriority>
	__asm volatile
 8005b16:	f3ef 8811 	mrs	r8, BASEPRI
 8005b1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b1e:	f383 8811 	msr	BASEPRI, r3
 8005b22:	f3bf 8f6f 	isb	sy
 8005b26:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005b2a:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8005b2c:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8005b2e:	429a      	cmp	r2, r3
 8005b30:	d301      	bcc.n	8005b36 <xQueueGenericSendFromISR+0x78>
 8005b32:	2e02      	cmp	r6, #2
 8005b34:	d11d      	bne.n	8005b72 <xQueueGenericSendFromISR+0xb4>
			const int8_t cTxLock = pxQueue->cTxLock;
 8005b36:	f894 5045 	ldrb.w	r5, [r4, #69]	@ 0x45
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005b3a:	4632      	mov	r2, r6
			const int8_t cTxLock = pxQueue->cTxLock;
 8005b3c:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005b3e:	4649      	mov	r1, r9
 8005b40:	4620      	mov	r0, r4
 8005b42:	f7ff fddd 	bl	8005700 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 8005b46:	1c6b      	adds	r3, r5, #1
 8005b48:	d10e      	bne.n	8005b68 <xQueueGenericSendFromISR+0xaa>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005b4a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8005b4c:	b13b      	cbz	r3, 8005b5e <xQueueGenericSendFromISR+0xa0>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005b4e:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8005b52:	f000 fc87 	bl	8006464 <xTaskRemoveFromEventList>
 8005b56:	b110      	cbz	r0, 8005b5e <xQueueGenericSendFromISR+0xa0>
							if( pxHigherPriorityTaskWoken != NULL )
 8005b58:	b10f      	cbz	r7, 8005b5e <xQueueGenericSendFromISR+0xa0>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005b5a:	2301      	movs	r3, #1
 8005b5c:	603b      	str	r3, [r7, #0]
			xReturn = pdPASS;
 8005b5e:	2001      	movs	r0, #1
	__asm volatile
 8005b60:	f388 8811 	msr	BASEPRI, r8
}
 8005b64:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005b68:	3501      	adds	r5, #1
 8005b6a:	b26d      	sxtb	r5, r5
 8005b6c:	f884 5045 	strb.w	r5, [r4, #69]	@ 0x45
 8005b70:	e7f5      	b.n	8005b5e <xQueueGenericSendFromISR+0xa0>
			xReturn = errQUEUE_FULL;
 8005b72:	2000      	movs	r0, #0
 8005b74:	e7f4      	b.n	8005b60 <xQueueGenericSendFromISR+0xa2>

08005b76 <xQueueReceive>:
{
 8005b76:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8005b7a:	460e      	mov	r6, r1
 8005b7c:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 8005b7e:	4604      	mov	r4, r0
 8005b80:	b940      	cbnz	r0, 8005b94 <xQueueReceive+0x1e>
	__asm volatile
 8005b82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b86:	f383 8811 	msr	BASEPRI, r3
 8005b8a:	f3bf 8f6f 	isb	sy
 8005b8e:	f3bf 8f4f 	dsb	sy
 8005b92:	e7fe      	b.n	8005b92 <xQueueReceive+0x1c>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005b94:	b951      	cbnz	r1, 8005bac <xQueueReceive+0x36>
 8005b96:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8005b98:	b143      	cbz	r3, 8005bac <xQueueReceive+0x36>
 8005b9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b9e:	f383 8811 	msr	BASEPRI, r3
 8005ba2:	f3bf 8f6f 	isb	sy
 8005ba6:	f3bf 8f4f 	dsb	sy
 8005baa:	e7fe      	b.n	8005baa <xQueueReceive+0x34>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005bac:	f000 fcea 	bl	8006584 <xTaskGetSchedulerState>
 8005bb0:	4605      	mov	r5, r0
 8005bb2:	b318      	cbz	r0, 8005bfc <xQueueReceive+0x86>
 8005bb4:	2500      	movs	r5, #0
		prvLockQueue( pxQueue );
 8005bb6:	f04f 0800 	mov.w	r8, #0
		taskENTER_CRITICAL();
 8005bba:	f000 fdab 	bl	8006714 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005bbe:	6ba7      	ldr	r7, [r4, #56]	@ 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005bc0:	b347      	cbz	r7, 8005c14 <xQueueReceive+0x9e>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005bc2:	4631      	mov	r1, r6
 8005bc4:	4620      	mov	r0, r4
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005bc6:	3f01      	subs	r7, #1
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005bc8:	f7ff fdcd 	bl	8005766 <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005bcc:	63a7      	str	r7, [r4, #56]	@ 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005bce:	6923      	ldr	r3, [r4, #16]
 8005bd0:	b173      	cbz	r3, 8005bf0 <xQueueReceive+0x7a>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005bd2:	f104 0010 	add.w	r0, r4, #16
 8005bd6:	f000 fc45 	bl	8006464 <xTaskRemoveFromEventList>
 8005bda:	b148      	cbz	r0, 8005bf0 <xQueueReceive+0x7a>
						queueYIELD_IF_USING_PREEMPTION();
 8005bdc:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8005be0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005be4:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8005be8:	f3bf 8f4f 	dsb	sy
 8005bec:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8005bf0:	f000 fdb0 	bl	8006754 <vPortExitCritical>
				return pdPASS;
 8005bf4:	2001      	movs	r0, #1
}
 8005bf6:	b004      	add	sp, #16
 8005bf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005bfc:	9b01      	ldr	r3, [sp, #4]
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d0d9      	beq.n	8005bb6 <xQueueReceive+0x40>
 8005c02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c06:	f383 8811 	msr	BASEPRI, r3
 8005c0a:	f3bf 8f6f 	isb	sy
 8005c0e:	f3bf 8f4f 	dsb	sy
 8005c12:	e7fe      	b.n	8005c12 <xQueueReceive+0x9c>
				if( xTicksToWait == ( TickType_t ) 0 )
 8005c14:	9b01      	ldr	r3, [sp, #4]
 8005c16:	b91b      	cbnz	r3, 8005c20 <xQueueReceive+0xaa>
					taskEXIT_CRITICAL();
 8005c18:	f000 fd9c 	bl	8006754 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8005c1c:	2000      	movs	r0, #0
 8005c1e:	e7ea      	b.n	8005bf6 <xQueueReceive+0x80>
				else if( xEntryTimeSet == pdFALSE )
 8005c20:	b915      	cbnz	r5, 8005c28 <xQueueReceive+0xb2>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005c22:	a802      	add	r0, sp, #8
 8005c24:	f000 fc60 	bl	80064e8 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8005c28:	f000 fd94 	bl	8006754 <vPortExitCritical>
		vTaskSuspendAll();
 8005c2c:	f000 fa8c 	bl	8006148 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005c30:	f000 fd70 	bl	8006714 <vPortEnterCritical>
 8005c34:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8005c38:	2bff      	cmp	r3, #255	@ 0xff
 8005c3a:	bf08      	it	eq
 8005c3c:	f884 8044 	strbeq.w	r8, [r4, #68]	@ 0x44
 8005c40:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8005c44:	2bff      	cmp	r3, #255	@ 0xff
 8005c46:	bf08      	it	eq
 8005c48:	f884 8045 	strbeq.w	r8, [r4, #69]	@ 0x45
 8005c4c:	f000 fd82 	bl	8006754 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005c50:	a901      	add	r1, sp, #4
 8005c52:	a802      	add	r0, sp, #8
 8005c54:	f000 fc54 	bl	8006500 <xTaskCheckForTimeOut>
 8005c58:	bb00      	cbnz	r0, 8005c9c <xQueueReceive+0x126>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005c5a:	4620      	mov	r0, r4
 8005c5c:	f7ff fd45 	bl	80056ea <prvIsQueueEmpty>
 8005c60:	b1b0      	cbz	r0, 8005c90 <xQueueReceive+0x11a>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005c62:	9901      	ldr	r1, [sp, #4]
 8005c64:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8005c68:	f000 fbe2 	bl	8006430 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005c6c:	4620      	mov	r0, r4
 8005c6e:	f7ff fd90 	bl	8005792 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005c72:	f000 fb09 	bl	8006288 <xTaskResumeAll>
 8005c76:	b948      	cbnz	r0, 8005c8c <xQueueReceive+0x116>
					portYIELD_WITHIN_API();
 8005c78:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8005c7c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005c80:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8005c84:	f3bf 8f4f 	dsb	sy
 8005c88:	f3bf 8f6f 	isb	sy
 8005c8c:	2501      	movs	r5, #1
 8005c8e:	e794      	b.n	8005bba <xQueueReceive+0x44>
				prvUnlockQueue( pxQueue );
 8005c90:	4620      	mov	r0, r4
 8005c92:	f7ff fd7e 	bl	8005792 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005c96:	f000 faf7 	bl	8006288 <xTaskResumeAll>
 8005c9a:	e7f7      	b.n	8005c8c <xQueueReceive+0x116>
			prvUnlockQueue( pxQueue );
 8005c9c:	4620      	mov	r0, r4
 8005c9e:	f7ff fd78 	bl	8005792 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005ca2:	f000 faf1 	bl	8006288 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005ca6:	4620      	mov	r0, r4
 8005ca8:	f7ff fd1f 	bl	80056ea <prvIsQueueEmpty>
 8005cac:	2800      	cmp	r0, #0
 8005cae:	d0ed      	beq.n	8005c8c <xQueueReceive+0x116>
 8005cb0:	e7b4      	b.n	8005c1c <xQueueReceive+0xa6>

08005cb2 <xQueueReceiveFromISR>:
{
 8005cb2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005cb6:	4689      	mov	r9, r1
 8005cb8:	4690      	mov	r8, r2
	configASSERT( pxQueue );
 8005cba:	4604      	mov	r4, r0
 8005cbc:	b940      	cbnz	r0, 8005cd0 <xQueueReceiveFromISR+0x1e>
 8005cbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cc2:	f383 8811 	msr	BASEPRI, r3
 8005cc6:	f3bf 8f6f 	isb	sy
 8005cca:	f3bf 8f4f 	dsb	sy
 8005cce:	e7fe      	b.n	8005cce <xQueueReceiveFromISR+0x1c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005cd0:	b951      	cbnz	r1, 8005ce8 <xQueueReceiveFromISR+0x36>
 8005cd2:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8005cd4:	b143      	cbz	r3, 8005ce8 <xQueueReceiveFromISR+0x36>
 8005cd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cda:	f383 8811 	msr	BASEPRI, r3
 8005cde:	f3bf 8f6f 	isb	sy
 8005ce2:	f3bf 8f4f 	dsb	sy
 8005ce6:	e7fe      	b.n	8005ce6 <xQueueReceiveFromISR+0x34>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005ce8:	f000 fe26 	bl	8006938 <vPortValidateInterruptPriority>
	__asm volatile
 8005cec:	f3ef 8711 	mrs	r7, BASEPRI
 8005cf0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cf4:	f383 8811 	msr	BASEPRI, r3
 8005cf8:	f3bf 8f6f 	isb	sy
 8005cfc:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005d00:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005d02:	b30d      	cbz	r5, 8005d48 <xQueueReceiveFromISR+0x96>
			const int8_t cRxLock = pxQueue->cRxLock;
 8005d04:	f894 6044 	ldrb.w	r6, [r4, #68]	@ 0x44
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005d08:	4649      	mov	r1, r9
			const int8_t cRxLock = pxQueue->cRxLock;
 8005d0a:	b276      	sxtb	r6, r6
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005d0c:	4620      	mov	r0, r4
 8005d0e:	f7ff fd2a 	bl	8005766 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005d12:	3d01      	subs	r5, #1
			if( cRxLock == queueUNLOCKED )
 8005d14:	1c73      	adds	r3, r6, #1
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005d16:	63a5      	str	r5, [r4, #56]	@ 0x38
			if( cRxLock == queueUNLOCKED )
 8005d18:	d111      	bne.n	8005d3e <xQueueReceiveFromISR+0x8c>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005d1a:	6923      	ldr	r3, [r4, #16]
 8005d1c:	b153      	cbz	r3, 8005d34 <xQueueReceiveFromISR+0x82>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005d1e:	f104 0010 	add.w	r0, r4, #16
 8005d22:	f000 fb9f 	bl	8006464 <xTaskRemoveFromEventList>
 8005d26:	b128      	cbz	r0, 8005d34 <xQueueReceiveFromISR+0x82>
						if( pxHigherPriorityTaskWoken != NULL )
 8005d28:	f1b8 0f00 	cmp.w	r8, #0
 8005d2c:	d002      	beq.n	8005d34 <xQueueReceiveFromISR+0x82>
							*pxHigherPriorityTaskWoken = pdTRUE;
 8005d2e:	2301      	movs	r3, #1
 8005d30:	f8c8 3000 	str.w	r3, [r8]
			xReturn = pdPASS;
 8005d34:	2001      	movs	r0, #1
	__asm volatile
 8005d36:	f387 8811 	msr	BASEPRI, r7
}
 8005d3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8005d3e:	3601      	adds	r6, #1
 8005d40:	b276      	sxtb	r6, r6
 8005d42:	f884 6044 	strb.w	r6, [r4, #68]	@ 0x44
 8005d46:	e7f5      	b.n	8005d34 <xQueueReceiveFromISR+0x82>
			xReturn = pdFAIL;
 8005d48:	4628      	mov	r0, r5
 8005d4a:	e7f4      	b.n	8005d36 <xQueueReceiveFromISR+0x84>

08005d4c <prvAddNewTaskToReadyList>:
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
<<<<<<< HEAD
 8007ff8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ffc:	4604      	mov	r4, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007ffe:	f000 fce1 	bl	80089c4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008002:	4b2f      	ldr	r3, [pc, #188]	@ (80080c0 <prvAddNewTaskToReadyList+0xc8>)
		if( pxCurrentTCB == NULL )
 8008004:	4e2f      	ldr	r6, [pc, #188]	@ (80080c4 <prvAddNewTaskToReadyList+0xcc>)
		uxCurrentNumberOfTasks++;
 8008006:	681a      	ldr	r2, [r3, #0]
 8008008:	4f2f      	ldr	r7, [pc, #188]	@ (80080c8 <prvAddNewTaskToReadyList+0xd0>)
 800800a:	3201      	adds	r2, #1
 800800c:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 800800e:	6835      	ldr	r5, [r6, #0]
 8008010:	2d00      	cmp	r5, #0
 8008012:	d14a      	bne.n	80080aa <prvAddNewTaskToReadyList+0xb2>
=======
 8005d4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d50:	4604      	mov	r4, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005d52:	f000 fcdf 	bl	8006714 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005d56:	4b2f      	ldr	r3, [pc, #188]	@ (8005e14 <prvAddNewTaskToReadyList+0xc8>)
		if( pxCurrentTCB == NULL )
 8005d58:	4e2f      	ldr	r6, [pc, #188]	@ (8005e18 <prvAddNewTaskToReadyList+0xcc>)
		uxCurrentNumberOfTasks++;
 8005d5a:	681a      	ldr	r2, [r3, #0]
 8005d5c:	4f2f      	ldr	r7, [pc, #188]	@ (8005e1c <prvAddNewTaskToReadyList+0xd0>)
 8005d5e:	3201      	adds	r2, #1
 8005d60:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8005d62:	6835      	ldr	r5, [r6, #0]
 8005d64:	2d00      	cmp	r5, #0
 8005d66:	d14a      	bne.n	8005dfe <prvAddNewTaskToReadyList+0xb2>
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
<<<<<<< HEAD
 8008014:	6034      	str	r4, [r6, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	2b01      	cmp	r3, #1
 800801a:	d11f      	bne.n	800805c <prvAddNewTaskToReadyList+0x64>
 800801c:	46b8      	mov	r8, r7
=======
 8005d68:	6034      	str	r4, [r6, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	2b01      	cmp	r3, #1
 8005d6e:	d11f      	bne.n	8005db0 <prvAddNewTaskToReadyList+0x64>
 8005d70:	46b8      	mov	r8, r7
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
<<<<<<< HEAD
 800801e:	4640      	mov	r0, r8
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008020:	3501      	adds	r5, #1
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008022:	f7ff fc78 	bl	8007916 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008026:	2d07      	cmp	r5, #7
 8008028:	f108 0814 	add.w	r8, r8, #20
 800802c:	d1f7      	bne.n	800801e <prvAddNewTaskToReadyList+0x26>
	}

	vListInitialise( &xDelayedTaskList1 );
 800802e:	f8df 80c0 	ldr.w	r8, [pc, #192]	@ 80080f0 <prvAddNewTaskToReadyList+0xf8>
	vListInitialise( &xDelayedTaskList2 );
 8008032:	4d26      	ldr	r5, [pc, #152]	@ (80080cc <prvAddNewTaskToReadyList+0xd4>)
	vListInitialise( &xDelayedTaskList1 );
 8008034:	4640      	mov	r0, r8
 8008036:	f7ff fc6e 	bl	8007916 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800803a:	4628      	mov	r0, r5
 800803c:	f7ff fc6b 	bl	8007916 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008040:	4823      	ldr	r0, [pc, #140]	@ (80080d0 <prvAddNewTaskToReadyList+0xd8>)
 8008042:	f7ff fc68 	bl	8007916 <vListInitialise>
=======
 8005d72:	4640      	mov	r0, r8
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005d74:	3501      	adds	r5, #1
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005d76:	f7ff fc78 	bl	800566a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005d7a:	2d07      	cmp	r5, #7
 8005d7c:	f108 0814 	add.w	r8, r8, #20
 8005d80:	d1f7      	bne.n	8005d72 <prvAddNewTaskToReadyList+0x26>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005d82:	f8df 80c0 	ldr.w	r8, [pc, #192]	@ 8005e44 <prvAddNewTaskToReadyList+0xf8>
	vListInitialise( &xDelayedTaskList2 );
 8005d86:	4d26      	ldr	r5, [pc, #152]	@ (8005e20 <prvAddNewTaskToReadyList+0xd4>)
	vListInitialise( &xDelayedTaskList1 );
 8005d88:	4640      	mov	r0, r8
 8005d8a:	f7ff fc6e 	bl	800566a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005d8e:	4628      	mov	r0, r5
 8005d90:	f7ff fc6b 	bl	800566a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005d94:	4823      	ldr	r0, [pc, #140]	@ (8005e24 <prvAddNewTaskToReadyList+0xd8>)
 8005d96:	f7ff fc68 	bl	800566a <vListInitialise>
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
<<<<<<< HEAD
 8008046:	4823      	ldr	r0, [pc, #140]	@ (80080d4 <prvAddNewTaskToReadyList+0xdc>)
 8008048:	f7ff fc65 	bl	8007916 <vListInitialise>
=======
 8005d9a:	4823      	ldr	r0, [pc, #140]	@ (8005e28 <prvAddNewTaskToReadyList+0xdc>)
 8005d9c:	f7ff fc65 	bl	800566a <vListInitialise>
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
<<<<<<< HEAD
 800804c:	4822      	ldr	r0, [pc, #136]	@ (80080d8 <prvAddNewTaskToReadyList+0xe0>)
 800804e:	f7ff fc62 	bl	8007916 <vListInitialise>
=======
 8005da0:	4822      	ldr	r0, [pc, #136]	@ (8005e2c <prvAddNewTaskToReadyList+0xe0>)
 8005da2:	f7ff fc62 	bl	800566a <vListInitialise>
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
<<<<<<< HEAD
 8008052:	4b22      	ldr	r3, [pc, #136]	@ (80080dc <prvAddNewTaskToReadyList+0xe4>)
 8008054:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008058:	4b21      	ldr	r3, [pc, #132]	@ (80080e0 <prvAddNewTaskToReadyList+0xe8>)
 800805a:	601d      	str	r5, [r3, #0]
		uxTaskNumber++;
 800805c:	4a21      	ldr	r2, [pc, #132]	@ (80080e4 <prvAddNewTaskToReadyList+0xec>)
		prvAddTaskToReadyList( pxNewTCB );
 800805e:	4922      	ldr	r1, [pc, #136]	@ (80080e8 <prvAddNewTaskToReadyList+0xf0>)
		uxTaskNumber++;
 8008060:	6813      	ldr	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8008062:	6808      	ldr	r0, [r1, #0]
		uxTaskNumber++;
 8008064:	3301      	adds	r3, #1
 8008066:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8008068:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800806a:	2301      	movs	r3, #1
 800806c:	4093      	lsls	r3, r2
 800806e:	4303      	orrs	r3, r0
 8008070:	2014      	movs	r0, #20
 8008072:	600b      	str	r3, [r1, #0]
 8008074:	fb00 7002 	mla	r0, r0, r2, r7
 8008078:	1d21      	adds	r1, r4, #4
 800807a:	f7ff fc5a 	bl	8007932 <vListInsertEnd>
	taskEXIT_CRITICAL();
 800807e:	f000 fcc1 	bl	8008a04 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8008082:	4b1a      	ldr	r3, [pc, #104]	@ (80080ec <prvAddNewTaskToReadyList+0xf4>)
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	b173      	cbz	r3, 80080a6 <prvAddNewTaskToReadyList+0xae>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008088:	6833      	ldr	r3, [r6, #0]
 800808a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800808c:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800808e:	429a      	cmp	r2, r3
 8008090:	d209      	bcs.n	80080a6 <prvAddNewTaskToReadyList+0xae>
			taskYIELD_IF_USING_PREEMPTION();
 8008092:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8008096:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800809a:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800809e:	f3bf 8f4f 	dsb	sy
 80080a2:	f3bf 8f6f 	isb	sy
}
 80080a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( xSchedulerRunning == pdFALSE )
 80080aa:	4b10      	ldr	r3, [pc, #64]	@ (80080ec <prvAddNewTaskToReadyList+0xf4>)
 80080ac:	681a      	ldr	r2, [r3, #0]
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80080ae:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
			if( xSchedulerRunning == pdFALSE )
 80080b0:	2a00      	cmp	r2, #0
 80080b2:	d1d3      	bne.n	800805c <prvAddNewTaskToReadyList+0x64>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80080b4:	6832      	ldr	r2, [r6, #0]
 80080b6:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80080b8:	429a      	cmp	r2, r3
					pxCurrentTCB = pxNewTCB;
 80080ba:	bf98      	it	ls
 80080bc:	6034      	strls	r4, [r6, #0]
 80080be:	e7cd      	b.n	800805c <prvAddNewTaskToReadyList+0x64>
 80080c0:	200027f0 	.word	0x200027f0
 80080c4:	200028f0 	.word	0x200028f0
 80080c8:	20002864 	.word	0x20002864
 80080cc:	2000283c 	.word	0x2000283c
 80080d0:	20002820 	.word	0x20002820
 80080d4:	2000280c 	.word	0x2000280c
 80080d8:	200027f4 	.word	0x200027f4
 80080dc:	20002838 	.word	0x20002838
 80080e0:	20002834 	.word	0x20002834
 80080e4:	200027d4 	.word	0x200027d4
 80080e8:	200027e8 	.word	0x200027e8
 80080ec:	200027e4 	.word	0x200027e4
 80080f0:	20002850 	.word	0x20002850

080080f4 <prvAddCurrentTaskToDelayedList>:
=======
 8005da6:	4b22      	ldr	r3, [pc, #136]	@ (8005e30 <prvAddNewTaskToReadyList+0xe4>)
 8005da8:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005dac:	4b21      	ldr	r3, [pc, #132]	@ (8005e34 <prvAddNewTaskToReadyList+0xe8>)
 8005dae:	601d      	str	r5, [r3, #0]
		uxTaskNumber++;
 8005db0:	4a21      	ldr	r2, [pc, #132]	@ (8005e38 <prvAddNewTaskToReadyList+0xec>)
		prvAddTaskToReadyList( pxNewTCB );
 8005db2:	4922      	ldr	r1, [pc, #136]	@ (8005e3c <prvAddNewTaskToReadyList+0xf0>)
		uxTaskNumber++;
 8005db4:	6813      	ldr	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8005db6:	6808      	ldr	r0, [r1, #0]
		uxTaskNumber++;
 8005db8:	3301      	adds	r3, #1
 8005dba:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8005dbc:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8005dbe:	2301      	movs	r3, #1
 8005dc0:	4093      	lsls	r3, r2
 8005dc2:	4303      	orrs	r3, r0
 8005dc4:	2014      	movs	r0, #20
 8005dc6:	600b      	str	r3, [r1, #0]
 8005dc8:	fb00 7002 	mla	r0, r0, r2, r7
 8005dcc:	1d21      	adds	r1, r4, #4
 8005dce:	f7ff fc5a 	bl	8005686 <vListInsertEnd>
	taskEXIT_CRITICAL();
 8005dd2:	f000 fcbf 	bl	8006754 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8005dd6:	4b1a      	ldr	r3, [pc, #104]	@ (8005e40 <prvAddNewTaskToReadyList+0xf4>)
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	b173      	cbz	r3, 8005dfa <prvAddNewTaskToReadyList+0xae>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005ddc:	6833      	ldr	r3, [r6, #0]
 8005dde:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005de0:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8005de2:	429a      	cmp	r2, r3
 8005de4:	d209      	bcs.n	8005dfa <prvAddNewTaskToReadyList+0xae>
			taskYIELD_IF_USING_PREEMPTION();
 8005de6:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8005dea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005dee:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8005df2:	f3bf 8f4f 	dsb	sy
 8005df6:	f3bf 8f6f 	isb	sy
}
 8005dfa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( xSchedulerRunning == pdFALSE )
 8005dfe:	4b10      	ldr	r3, [pc, #64]	@ (8005e40 <prvAddNewTaskToReadyList+0xf4>)
 8005e00:	681a      	ldr	r2, [r3, #0]
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005e02:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
			if( xSchedulerRunning == pdFALSE )
 8005e04:	2a00      	cmp	r2, #0
 8005e06:	d1d3      	bne.n	8005db0 <prvAddNewTaskToReadyList+0x64>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005e08:	6832      	ldr	r2, [r6, #0]
 8005e0a:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005e0c:	429a      	cmp	r2, r3
					pxCurrentTCB = pxNewTCB;
 8005e0e:	bf98      	it	ls
 8005e10:	6034      	strls	r4, [r6, #0]
 8005e12:	e7cd      	b.n	8005db0 <prvAddNewTaskToReadyList+0x64>
 8005e14:	200024e0 	.word	0x200024e0
 8005e18:	200025e0 	.word	0x200025e0
 8005e1c:	20002554 	.word	0x20002554
 8005e20:	2000252c 	.word	0x2000252c
 8005e24:	20002510 	.word	0x20002510
 8005e28:	200024fc 	.word	0x200024fc
 8005e2c:	200024e4 	.word	0x200024e4
 8005e30:	20002528 	.word	0x20002528
 8005e34:	20002524 	.word	0x20002524
 8005e38:	200024c4 	.word	0x200024c4
 8005e3c:	200024d8 	.word	0x200024d8
 8005e40:	200024d4 	.word	0x200024d4
 8005e44:	20002540 	.word	0x20002540

08005e48 <prvAddCurrentTaskToDelayedList>:
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
<<<<<<< HEAD
 80080f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80080f6:	4b1a      	ldr	r3, [pc, #104]	@ (8008160 <prvAddCurrentTaskToDelayedList+0x6c>)
=======
 8005e48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005e4a:	4b1a      	ldr	r3, [pc, #104]	@ (8005eb4 <prvAddCurrentTaskToDelayedList+0x6c>)
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
<<<<<<< HEAD
 80080f8:	4d1a      	ldr	r5, [pc, #104]	@ (8008164 <prvAddCurrentTaskToDelayedList+0x70>)
const TickType_t xConstTickCount = xTickCount;
 80080fa:	681c      	ldr	r4, [r3, #0]
{
 80080fc:	4606      	mov	r6, r0
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80080fe:	6828      	ldr	r0, [r5, #0]
 8008100:	3004      	adds	r0, #4
{
 8008102:	460f      	mov	r7, r1
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008104:	f7ff fc37 	bl	8007976 <uxListRemove>
 8008108:	b940      	cbnz	r0, 800811c <prvAddCurrentTaskToDelayedList+0x28>
=======
 8005e4c:	4d1a      	ldr	r5, [pc, #104]	@ (8005eb8 <prvAddCurrentTaskToDelayedList+0x70>)
const TickType_t xConstTickCount = xTickCount;
 8005e4e:	681c      	ldr	r4, [r3, #0]
{
 8005e50:	4606      	mov	r6, r0
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005e52:	6828      	ldr	r0, [r5, #0]
 8005e54:	3004      	adds	r0, #4
{
 8005e56:	460f      	mov	r7, r1
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005e58:	f7ff fc37 	bl	80056ca <uxListRemove>
 8005e5c:	b940      	cbnz	r0, 8005e70 <prvAddCurrentTaskToDelayedList+0x28>
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
<<<<<<< HEAD
 800810a:	682a      	ldr	r2, [r5, #0]
 800810c:	4916      	ldr	r1, [pc, #88]	@ (8008168 <prvAddCurrentTaskToDelayedList+0x74>)
 800810e:	6ad0      	ldr	r0, [r2, #44]	@ 0x2c
 8008110:	680b      	ldr	r3, [r1, #0]
 8008112:	2201      	movs	r2, #1
 8008114:	4082      	lsls	r2, r0
 8008116:	ea23 0302 	bic.w	r3, r3, r2
 800811a:	600b      	str	r3, [r1, #0]
=======
 8005e5e:	682a      	ldr	r2, [r5, #0]
 8005e60:	4916      	ldr	r1, [pc, #88]	@ (8005ebc <prvAddCurrentTaskToDelayedList+0x74>)
 8005e62:	6ad0      	ldr	r0, [r2, #44]	@ 0x2c
 8005e64:	680b      	ldr	r3, [r1, #0]
 8005e66:	2201      	movs	r2, #1
 8005e68:	4082      	lsls	r2, r0
 8005e6a:	ea23 0302 	bic.w	r3, r3, r2
 8005e6e:	600b      	str	r3, [r1, #0]
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
<<<<<<< HEAD
 800811c:	1c73      	adds	r3, r6, #1
 800811e:	d107      	bne.n	8008130 <prvAddCurrentTaskToDelayedList+0x3c>
 8008120:	b137      	cbz	r7, 8008130 <prvAddCurrentTaskToDelayedList+0x3c>
=======
 8005e70:	1c73      	adds	r3, r6, #1
 8005e72:	d107      	bne.n	8005e84 <prvAddCurrentTaskToDelayedList+0x3c>
 8005e74:	b137      	cbz	r7, 8005e84 <prvAddCurrentTaskToDelayedList+0x3c>
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
<<<<<<< HEAD
 8008122:	6829      	ldr	r1, [r5, #0]
 8008124:	4811      	ldr	r0, [pc, #68]	@ (800816c <prvAddCurrentTaskToDelayedList+0x78>)
=======
 8005e76:	6829      	ldr	r1, [r5, #0]
 8005e78:	4811      	ldr	r0, [pc, #68]	@ (8005ec0 <prvAddCurrentTaskToDelayedList+0x78>)
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
<<<<<<< HEAD
 8008126:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800812a:	3104      	adds	r1, #4
 800812c:	f7ff bc01 	b.w	8007932 <vListInsertEnd>
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008130:	682b      	ldr	r3, [r5, #0]
 8008132:	19a4      	adds	r4, r4, r6
 8008134:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008136:	d307      	bcc.n	8008148 <prvAddCurrentTaskToDelayedList+0x54>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008138:	4b0d      	ldr	r3, [pc, #52]	@ (8008170 <prvAddCurrentTaskToDelayedList+0x7c>)
 800813a:	6818      	ldr	r0, [r3, #0]
 800813c:	6829      	ldr	r1, [r5, #0]
}
 800813e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008142:	3104      	adds	r1, #4
 8008144:	f7ff bc00 	b.w	8007948 <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008148:	4b0a      	ldr	r3, [pc, #40]	@ (8008174 <prvAddCurrentTaskToDelayedList+0x80>)
 800814a:	6818      	ldr	r0, [r3, #0]
 800814c:	6829      	ldr	r1, [r5, #0]
 800814e:	3104      	adds	r1, #4
 8008150:	f7ff fbfa 	bl	8007948 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008154:	4b08      	ldr	r3, [pc, #32]	@ (8008178 <prvAddCurrentTaskToDelayedList+0x84>)
 8008156:	681a      	ldr	r2, [r3, #0]
 8008158:	42a2      	cmp	r2, r4
					xNextTaskUnblockTime = xTimeToWake;
 800815a:	bf88      	it	hi
 800815c:	601c      	strhi	r4, [r3, #0]
}
 800815e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008160:	200027ec 	.word	0x200027ec
 8008164:	200028f0 	.word	0x200028f0
 8008168:	200027e8 	.word	0x200027e8
 800816c:	200027f4 	.word	0x200027f4
 8008170:	20002834 	.word	0x20002834
 8008174:	20002838 	.word	0x20002838
 8008178:	200027d0 	.word	0x200027d0

0800817c <prvResetNextTaskUnblockTime>:
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800817c:	4a06      	ldr	r2, [pc, #24]	@ (8008198 <prvResetNextTaskUnblockTime+0x1c>)
 800817e:	6813      	ldr	r3, [r2, #0]
 8008180:	6819      	ldr	r1, [r3, #0]
 8008182:	4b06      	ldr	r3, [pc, #24]	@ (800819c <prvResetNextTaskUnblockTime+0x20>)
 8008184:	b919      	cbnz	r1, 800818e <prvResetNextTaskUnblockTime+0x12>
		xNextTaskUnblockTime = portMAX_DELAY;
 8008186:	f04f 32ff 	mov.w	r2, #4294967295
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800818a:	601a      	str	r2, [r3, #0]
}
 800818c:	4770      	bx	lr
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800818e:	6812      	ldr	r2, [r2, #0]
 8008190:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008192:	68d2      	ldr	r2, [r2, #12]
 8008194:	6852      	ldr	r2, [r2, #4]
 8008196:	e7f8      	b.n	800818a <prvResetNextTaskUnblockTime+0xe>
 8008198:	20002838 	.word	0x20002838
 800819c:	200027d0 	.word	0x200027d0

080081a0 <prvDeleteTCB>:
	{
 80081a0:	b510      	push	{r4, lr}
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80081a2:	f890 3051 	ldrb.w	r3, [r0, #81]	@ 0x51
	{
 80081a6:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80081a8:	b93b      	cbnz	r3, 80081ba <prvDeleteTCB+0x1a>
				vPortFree( pxTCB->pxStack );
 80081aa:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 80081ac:	f000 fe02 	bl	8008db4 <vPortFree>
				vPortFree( pxTCB );
 80081b0:	4620      	mov	r0, r4
	}
 80081b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				vPortFree( pxTCB );
 80081b6:	f000 bdfd 	b.w	8008db4 <vPortFree>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80081ba:	2b01      	cmp	r3, #1
 80081bc:	d0f9      	beq.n	80081b2 <prvDeleteTCB+0x12>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80081be:	2b02      	cmp	r3, #2
 80081c0:	d008      	beq.n	80081d4 <prvDeleteTCB+0x34>
	__asm volatile
 80081c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081c6:	f383 8811 	msr	BASEPRI, r3
 80081ca:	f3bf 8f6f 	isb	sy
 80081ce:	f3bf 8f4f 	dsb	sy
 80081d2:	e7fe      	b.n	80081d2 <prvDeleteTCB+0x32>
	}
 80081d4:	bd10      	pop	{r4, pc}
	...

080081d8 <prvIdleTask>:
{
 80081d8:	b580      	push	{r7, lr}
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80081da:	4c13      	ldr	r4, [pc, #76]	@ (8008228 <prvIdleTask+0x50>)
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80081dc:	4f13      	ldr	r7, [pc, #76]	@ (800822c <prvIdleTask+0x54>)
				--uxCurrentNumberOfTasks;
 80081de:	4d14      	ldr	r5, [pc, #80]	@ (8008230 <prvIdleTask+0x58>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80081e0:	6823      	ldr	r3, [r4, #0]
 80081e2:	b973      	cbnz	r3, 8008202 <prvIdleTask+0x2a>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80081e4:	4b13      	ldr	r3, [pc, #76]	@ (8008234 <prvIdleTask+0x5c>)
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	2b01      	cmp	r3, #1
 80081ea:	d9f8      	bls.n	80081de <prvIdleTask+0x6>
				taskYIELD();
 80081ec:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80081f0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80081f4:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80081f8:	f3bf 8f4f 	dsb	sy
 80081fc:	f3bf 8f6f 	isb	sy
 8008200:	e7ed      	b.n	80081de <prvIdleTask+0x6>
			taskENTER_CRITICAL();
 8008202:	f000 fbdf 	bl	80089c4 <vPortEnterCritical>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	68de      	ldr	r6, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800820a:	1d30      	adds	r0, r6, #4
 800820c:	f7ff fbb3 	bl	8007976 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008210:	682b      	ldr	r3, [r5, #0]
 8008212:	3b01      	subs	r3, #1
 8008214:	602b      	str	r3, [r5, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008216:	6823      	ldr	r3, [r4, #0]
 8008218:	3b01      	subs	r3, #1
 800821a:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 800821c:	f000 fbf2 	bl	8008a04 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 8008220:	4630      	mov	r0, r6
 8008222:	f7ff ffbd 	bl	80081a0 <prvDeleteTCB>
 8008226:	e7db      	b.n	80081e0 <prvIdleTask+0x8>
 8008228:	20002808 	.word	0x20002808
 800822c:	2000280c 	.word	0x2000280c
 8008230:	200027f0 	.word	0x200027f0
 8008234:	20002864 	.word	0x20002864

08008238 <prvInitialiseNewTask.constprop.0>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8008238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800823c:	e9dd 8409 	ldrd	r8, r4, [sp, #36]	@ 0x24
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8008240:	f102 4280 	add.w	r2, r2, #1073741824	@ 0x40000000
 8008244:	6b26      	ldr	r6, [r4, #48]	@ 0x30
 8008246:	3a01      	subs	r2, #1
 8008248:	eb06 0682 	add.w	r6, r6, r2, lsl #2
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800824c:	4699      	mov	r9, r3
 800824e:	4607      	mov	r7, r0
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8008250:	1e4b      	subs	r3, r1, #1
 8008252:	f026 0607 	bic.w	r6, r6, #7
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008256:	f104 0233 	add.w	r2, r4, #51	@ 0x33
 800825a:	310f      	adds	r1, #15
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800825c:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 8008260:	f802 0f01 	strb.w	r0, [r2, #1]!
		if( pcName[ x ] == 0x00 )
 8008264:	b108      	cbz	r0, 800826a <prvInitialiseNewTask.constprop.0+0x32>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008266:	428b      	cmp	r3, r1
 8008268:	d1f8      	bne.n	800825c <prvInitialiseNewTask.constprop.0+0x24>
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800826a:	9d08      	ldr	r5, [sp, #32]
 800826c:	2d06      	cmp	r5, #6
 800826e:	bf28      	it	cs
 8008270:	2506      	movcs	r5, #6
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008272:	f04f 0a00 	mov.w	sl, #0
		pxNewTCB->uxMutexesHeld = 0;
 8008276:	e9c4 5a11 	strd	r5, sl, [r4, #68]	@ 0x44
	pxNewTCB->uxPriority = uxPriority;
 800827a:	62e5      	str	r5, [r4, #44]	@ 0x2c
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800827c:	1d20      	adds	r0, r4, #4
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800827e:	f884 a043 	strb.w	sl, [r4, #67]	@ 0x43
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008282:	f7ff fb53 	bl	800792c <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008286:	f1c5 0507 	rsb	r5, r5, #7
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800828a:	f104 0018 	add.w	r0, r4, #24
 800828e:	f7ff fb4d 	bl	800792c <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 8008292:	f8c4 a04c 	str.w	sl, [r4, #76]	@ 0x4c
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008296:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008298:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800829a:	6264      	str	r4, [r4, #36]	@ 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800829c:	f884 a050 	strb.w	sl, [r4, #80]	@ 0x50
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80082a0:	464a      	mov	r2, r9
 80082a2:	4639      	mov	r1, r7
 80082a4:	4630      	mov	r0, r6
 80082a6:	f000 fb61 	bl	800896c <pxPortInitialiseStack>
 80082aa:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 80082ac:	f1b8 0f00 	cmp.w	r8, #0
 80082b0:	d001      	beq.n	80082b6 <prvInitialiseNewTask.constprop.0+0x7e>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80082b2:	f8c8 4000 	str.w	r4, [r8]
}
 80082b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080082ba <xTaskCreateStatic>:
	{
 80082ba:	b570      	push	{r4, r5, r6, lr}
 80082bc:	b086      	sub	sp, #24
 80082be:	e9dd 540b 	ldrd	r5, r4, [sp, #44]	@ 0x2c
		configASSERT( puxStackBuffer != NULL );
 80082c2:	b945      	cbnz	r5, 80082d6 <xTaskCreateStatic+0x1c>
 80082c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082c8:	f383 8811 	msr	BASEPRI, r3
 80082cc:	f3bf 8f6f 	isb	sy
 80082d0:	f3bf 8f4f 	dsb	sy
 80082d4:	e7fe      	b.n	80082d4 <xTaskCreateStatic+0x1a>
		configASSERT( pxTaskBuffer != NULL );
 80082d6:	b944      	cbnz	r4, 80082ea <xTaskCreateStatic+0x30>
 80082d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082dc:	f383 8811 	msr	BASEPRI, r3
 80082e0:	f3bf 8f6f 	isb	sy
 80082e4:	f3bf 8f4f 	dsb	sy
 80082e8:	e7fe      	b.n	80082e8 <xTaskCreateStatic+0x2e>
			volatile size_t xSize = sizeof( StaticTask_t );
 80082ea:	2654      	movs	r6, #84	@ 0x54
 80082ec:	9605      	str	r6, [sp, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 80082ee:	9e05      	ldr	r6, [sp, #20]
 80082f0:	2e54      	cmp	r6, #84	@ 0x54
 80082f2:	d008      	beq.n	8008306 <xTaskCreateStatic+0x4c>
 80082f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082f8:	f383 8811 	msr	BASEPRI, r3
 80082fc:	f3bf 8f6f 	isb	sy
 8008300:	f3bf 8f4f 	dsb	sy
 8008304:	e7fe      	b.n	8008304 <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008306:	6325      	str	r5, [r4, #48]	@ 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008308:	2502      	movs	r5, #2
 800830a:	f884 5051 	strb.w	r5, [r4, #81]	@ 0x51
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800830e:	ad04      	add	r5, sp, #16
 8008310:	9501      	str	r5, [sp, #4]
 8008312:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8008314:	9402      	str	r4, [sp, #8]
 8008316:	9500      	str	r5, [sp, #0]
 8008318:	f7ff ff8e 	bl	8008238 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 800831c:	4620      	mov	r0, r4
 800831e:	f7ff fe6b 	bl	8007ff8 <prvAddNewTaskToReadyList>
	}
 8008322:	9804      	ldr	r0, [sp, #16]
 8008324:	b006      	add	sp, #24
 8008326:	bd70      	pop	{r4, r5, r6, pc}

08008328 <xTaskCreate>:
	{
 8008328:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800832c:	4607      	mov	r7, r0
 800832e:	b085      	sub	sp, #20
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008330:	0090      	lsls	r0, r2, #2
	{
 8008332:	4688      	mov	r8, r1
 8008334:	4616      	mov	r6, r2
 8008336:	4699      	mov	r9, r3
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008338:	f000 fcaa 	bl	8008c90 <pvPortMalloc>
			if( pxStack != NULL )
 800833c:	4605      	mov	r5, r0
 800833e:	b920      	cbnz	r0, 800834a <xTaskCreate+0x22>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008340:	f04f 30ff 	mov.w	r0, #4294967295
	}
 8008344:	b005      	add	sp, #20
 8008346:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800834a:	2054      	movs	r0, #84	@ 0x54
 800834c:	f000 fca0 	bl	8008c90 <pvPortMalloc>
				if( pxNewTCB != NULL )
 8008350:	4604      	mov	r4, r0
 8008352:	b198      	cbz	r0, 800837c <xTaskCreate+0x54>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008354:	2300      	movs	r3, #0
 8008356:	f880 3051 	strb.w	r3, [r0, #81]	@ 0x51
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800835a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
					pxNewTCB->pxStack = pxStack;
 800835c:	6305      	str	r5, [r0, #48]	@ 0x30
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800835e:	9301      	str	r3, [sp, #4]
 8008360:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008362:	9002      	str	r0, [sp, #8]
 8008364:	9300      	str	r3, [sp, #0]
 8008366:	4632      	mov	r2, r6
 8008368:	464b      	mov	r3, r9
 800836a:	4641      	mov	r1, r8
 800836c:	4638      	mov	r0, r7
 800836e:	f7ff ff63 	bl	8008238 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008372:	4620      	mov	r0, r4
 8008374:	f7ff fe40 	bl	8007ff8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008378:	2001      	movs	r0, #1
 800837a:	e7e3      	b.n	8008344 <xTaskCreate+0x1c>
					vPortFree( pxStack );
 800837c:	4628      	mov	r0, r5
 800837e:	f000 fd19 	bl	8008db4 <vPortFree>
		if( pxNewTCB != NULL )
 8008382:	e7dd      	b.n	8008340 <xTaskCreate+0x18>

08008384 <vTaskStartScheduler>:
{
 8008384:	b510      	push	{r4, lr}
 8008386:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008388:	2400      	movs	r4, #0
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800838a:	aa07      	add	r2, sp, #28
 800838c:	a906      	add	r1, sp, #24
 800838e:	a805      	add	r0, sp, #20
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008390:	e9cd 4405 	strd	r4, r4, [sp, #20]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008394:	f7fa fda6 	bl	8002ee4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008398:	9b05      	ldr	r3, [sp, #20]
 800839a:	9302      	str	r3, [sp, #8]
 800839c:	9b06      	ldr	r3, [sp, #24]
 800839e:	9a07      	ldr	r2, [sp, #28]
 80083a0:	490f      	ldr	r1, [pc, #60]	@ (80083e0 <vTaskStartScheduler+0x5c>)
 80083a2:	4810      	ldr	r0, [pc, #64]	@ (80083e4 <vTaskStartScheduler+0x60>)
 80083a4:	e9cd 4300 	strd	r4, r3, [sp]
 80083a8:	4623      	mov	r3, r4
 80083aa:	f7ff ff86 	bl	80082ba <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 80083ae:	b1a8      	cbz	r0, 80083dc <vTaskStartScheduler+0x58>
 80083b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083b4:	f383 8811 	msr	BASEPRI, r3
 80083b8:	f3bf 8f6f 	isb	sy
 80083bc:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 80083c0:	4b09      	ldr	r3, [pc, #36]	@ (80083e8 <vTaskStartScheduler+0x64>)
 80083c2:	f04f 32ff 	mov.w	r2, #4294967295
 80083c6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80083c8:	4b08      	ldr	r3, [pc, #32]	@ (80083ec <vTaskStartScheduler+0x68>)
 80083ca:	2201      	movs	r2, #1
 80083cc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80083ce:	4b08      	ldr	r3, [pc, #32]	@ (80083f0 <vTaskStartScheduler+0x6c>)
 80083d0:	601c      	str	r4, [r3, #0]
}
 80083d2:	b008      	add	sp, #32
 80083d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if( xPortStartScheduler() != pdFALSE )
 80083d8:	f000 bb84 	b.w	8008ae4 <xPortStartScheduler>
}
 80083dc:	b008      	add	sp, #32
 80083de:	bd10      	pop	{r4, pc}
 80083e0:	08010124 	.word	0x08010124
 80083e4:	080081d9 	.word	0x080081d9
 80083e8:	200027d0 	.word	0x200027d0
 80083ec:	200027e4 	.word	0x200027e4
 80083f0:	200027ec 	.word	0x200027ec

080083f4 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 80083f4:	4a02      	ldr	r2, [pc, #8]	@ (8008400 <vTaskSuspendAll+0xc>)
 80083f6:	6813      	ldr	r3, [r2, #0]
 80083f8:	3301      	adds	r3, #1
 80083fa:	6013      	str	r3, [r2, #0]
}
 80083fc:	4770      	bx	lr
 80083fe:	bf00      	nop
 8008400:	200027cc 	.word	0x200027cc

08008404 <xTaskIncrementTick>:
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008404:	4b40      	ldr	r3, [pc, #256]	@ (8008508 <xTaskIncrementTick+0x104>)
 8008406:	681b      	ldr	r3, [r3, #0]
{
 8008408:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800840c:	2b00      	cmp	r3, #0
 800840e:	d174      	bne.n	80084fa <xTaskIncrementTick+0xf6>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008410:	4b3e      	ldr	r3, [pc, #248]	@ (800850c <xTaskIncrementTick+0x108>)
 8008412:	681c      	ldr	r4, [r3, #0]
 8008414:	3401      	adds	r4, #1
		xTickCount = xConstTickCount;
 8008416:	601c      	str	r4, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008418:	b9bc      	cbnz	r4, 800844a <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 800841a:	4b3d      	ldr	r3, [pc, #244]	@ (8008510 <xTaskIncrementTick+0x10c>)
 800841c:	681a      	ldr	r2, [r3, #0]
 800841e:	6812      	ldr	r2, [r2, #0]
 8008420:	b142      	cbz	r2, 8008434 <xTaskIncrementTick+0x30>
 8008422:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008426:	f383 8811 	msr	BASEPRI, r3
 800842a:	f3bf 8f6f 	isb	sy
 800842e:	f3bf 8f4f 	dsb	sy
 8008432:	e7fe      	b.n	8008432 <xTaskIncrementTick+0x2e>
 8008434:	4a37      	ldr	r2, [pc, #220]	@ (8008514 <xTaskIncrementTick+0x110>)
 8008436:	6819      	ldr	r1, [r3, #0]
 8008438:	6810      	ldr	r0, [r2, #0]
 800843a:	6018      	str	r0, [r3, #0]
 800843c:	6011      	str	r1, [r2, #0]
 800843e:	4a36      	ldr	r2, [pc, #216]	@ (8008518 <xTaskIncrementTick+0x114>)
 8008440:	6813      	ldr	r3, [r2, #0]
 8008442:	3301      	adds	r3, #1
 8008444:	6013      	str	r3, [r2, #0]
 8008446:	f7ff fe99 	bl	800817c <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 800844a:	4d34      	ldr	r5, [pc, #208]	@ (800851c <xTaskIncrementTick+0x118>)
 800844c:	4e34      	ldr	r6, [pc, #208]	@ (8008520 <xTaskIncrementTick+0x11c>)
 800844e:	682b      	ldr	r3, [r5, #0]
 8008450:	4f34      	ldr	r7, [pc, #208]	@ (8008524 <xTaskIncrementTick+0x120>)
 8008452:	42a3      	cmp	r3, r4
BaseType_t xSwitchRequired = pdFALSE;
 8008454:	f04f 0b00 	mov.w	fp, #0
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008458:	d911      	bls.n	800847e <xTaskIncrementTick+0x7a>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800845a:	683a      	ldr	r2, [r7, #0]
 800845c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800845e:	2114      	movs	r1, #20
 8008460:	434a      	muls	r2, r1
 8008462:	58b2      	ldr	r2, [r6, r2]
				xSwitchRequired = pdTRUE;
 8008464:	2a02      	cmp	r2, #2
 8008466:	bf28      	it	cs
 8008468:	f04f 0b01 	movcs.w	fp, #1
		if( xYieldPending != pdFALSE )
 800846c:	4a2e      	ldr	r2, [pc, #184]	@ (8008528 <xTaskIncrementTick+0x124>)
 800846e:	6812      	ldr	r2, [r2, #0]
			xSwitchRequired = pdTRUE;
 8008470:	2a00      	cmp	r2, #0
}
 8008472:	bf0c      	ite	eq
 8008474:	4658      	moveq	r0, fp
 8008476:	2001      	movne	r0, #1
 8008478:	b003      	add	sp, #12
 800847a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800847e:	f8df a090 	ldr.w	sl, [pc, #144]	@ 8008510 <xTaskIncrementTick+0x10c>
					prvAddTaskToReadyList( pxTCB );
 8008482:	f8df 90ac 	ldr.w	r9, [pc, #172]	@ 8008530 <xTaskIncrementTick+0x12c>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008486:	f8da 2000 	ldr.w	r2, [sl]
 800848a:	6812      	ldr	r2, [r2, #0]
 800848c:	b91a      	cbnz	r2, 8008496 <xTaskIncrementTick+0x92>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800848e:	f04f 32ff 	mov.w	r2, #4294967295
 8008492:	602a      	str	r2, [r5, #0]
					break;
 8008494:	e7e1      	b.n	800845a <xTaskIncrementTick+0x56>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8008496:	f8da 2000 	ldr.w	r2, [sl]
 800849a:	68d2      	ldr	r2, [r2, #12]
 800849c:	f8d2 800c 	ldr.w	r8, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80084a0:	f8d8 1004 	ldr.w	r1, [r8, #4]
					if( xConstTickCount < xItemValue )
 80084a4:	428c      	cmp	r4, r1
 80084a6:	d201      	bcs.n	80084ac <xTaskIncrementTick+0xa8>
						xNextTaskUnblockTime = xItemValue;
 80084a8:	6029      	str	r1, [r5, #0]
						break;
 80084aa:	e7d6      	b.n	800845a <xTaskIncrementTick+0x56>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80084ac:	f108 0304 	add.w	r3, r8, #4
 80084b0:	4618      	mov	r0, r3
 80084b2:	9301      	str	r3, [sp, #4]
 80084b4:	f7ff fa5f 	bl	8007976 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80084b8:	f8d8 1028 	ldr.w	r1, [r8, #40]	@ 0x28
 80084bc:	b119      	cbz	r1, 80084c6 <xTaskIncrementTick+0xc2>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80084be:	f108 0018 	add.w	r0, r8, #24
 80084c2:	f7ff fa58 	bl	8007976 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80084c6:	f8d8 002c 	ldr.w	r0, [r8, #44]	@ 0x2c
 80084ca:	f8d9 3000 	ldr.w	r3, [r9]
 80084ce:	2201      	movs	r2, #1
 80084d0:	fa02 f100 	lsl.w	r1, r2, r0
 80084d4:	4319      	orrs	r1, r3
 80084d6:	f04f 0c14 	mov.w	ip, #20
 80084da:	f8c9 1000 	str.w	r1, [r9]
 80084de:	fb0c 6000 	mla	r0, ip, r0, r6
 80084e2:	9901      	ldr	r1, [sp, #4]
 80084e4:	f7ff fa25 	bl	8007932 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80084e8:	6838      	ldr	r0, [r7, #0]
 80084ea:	f8d8 102c 	ldr.w	r1, [r8, #44]	@ 0x2c
 80084ee:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
							xSwitchRequired = pdTRUE;
 80084f0:	4291      	cmp	r1, r2
 80084f2:	bf28      	it	cs
 80084f4:	f04f 0b01 	movcs.w	fp, #1
 80084f8:	e7c5      	b.n	8008486 <xTaskIncrementTick+0x82>
		++uxPendedTicks;
 80084fa:	4a0c      	ldr	r2, [pc, #48]	@ (800852c <xTaskIncrementTick+0x128>)
 80084fc:	6813      	ldr	r3, [r2, #0]
 80084fe:	3301      	adds	r3, #1
 8008500:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 8008502:	f04f 0b00 	mov.w	fp, #0
 8008506:	e7b1      	b.n	800846c <xTaskIncrementTick+0x68>
 8008508:	200027cc 	.word	0x200027cc
 800850c:	200027ec 	.word	0x200027ec
 8008510:	20002838 	.word	0x20002838
 8008514:	20002834 	.word	0x20002834
 8008518:	200027d8 	.word	0x200027d8
 800851c:	200027d0 	.word	0x200027d0
 8008520:	20002864 	.word	0x20002864
 8008524:	200028f0 	.word	0x200028f0
 8008528:	200027dc 	.word	0x200027dc
 800852c:	200027e0 	.word	0x200027e0
 8008530:	200027e8 	.word	0x200027e8

08008534 <xTaskResumeAll>:
{
 8008534:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( uxSchedulerSuspended );
 8008538:	4c31      	ldr	r4, [pc, #196]	@ (8008600 <xTaskResumeAll+0xcc>)
 800853a:	6823      	ldr	r3, [r4, #0]
 800853c:	b943      	cbnz	r3, 8008550 <xTaskResumeAll+0x1c>
 800853e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008542:	f383 8811 	msr	BASEPRI, r3
 8008546:	f3bf 8f6f 	isb	sy
 800854a:	f3bf 8f4f 	dsb	sy
 800854e:	e7fe      	b.n	800854e <xTaskResumeAll+0x1a>
	taskENTER_CRITICAL();
 8008550:	f000 fa38 	bl	80089c4 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8008554:	6823      	ldr	r3, [r4, #0]
 8008556:	3b01      	subs	r3, #1
 8008558:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800855a:	6824      	ldr	r4, [r4, #0]
 800855c:	b12c      	cbz	r4, 800856a <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 800855e:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8008560:	f000 fa50 	bl	8008a04 <vPortExitCritical>
}
 8008564:	4620      	mov	r0, r4
 8008566:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800856a:	4b26      	ldr	r3, [pc, #152]	@ (8008604 <xTaskResumeAll+0xd0>)
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	2b00      	cmp	r3, #0
 8008570:	d0f5      	beq.n	800855e <xTaskResumeAll+0x2a>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008572:	4d25      	ldr	r5, [pc, #148]	@ (8008608 <xTaskResumeAll+0xd4>)
					prvAddTaskToReadyList( pxTCB );
 8008574:	4e25      	ldr	r6, [pc, #148]	@ (800860c <xTaskResumeAll+0xd8>)
 8008576:	f8df 80a4 	ldr.w	r8, [pc, #164]	@ 800861c <xTaskResumeAll+0xe8>
 800857a:	e01f      	b.n	80085bc <xTaskResumeAll+0x88>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800857c:	68eb      	ldr	r3, [r5, #12]
 800857e:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008580:	f104 0904 	add.w	r9, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008584:	f104 0018 	add.w	r0, r4, #24
 8008588:	f7ff f9f5 	bl	8007976 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800858c:	4648      	mov	r0, r9
 800858e:	f7ff f9f2 	bl	8007976 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008592:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8008594:	6831      	ldr	r1, [r6, #0]
 8008596:	2701      	movs	r7, #1
 8008598:	fa07 f302 	lsl.w	r3, r7, r2
 800859c:	2014      	movs	r0, #20
 800859e:	430b      	orrs	r3, r1
 80085a0:	fb00 8002 	mla	r0, r0, r2, r8
 80085a4:	4649      	mov	r1, r9
 80085a6:	6033      	str	r3, [r6, #0]
 80085a8:	f7ff f9c3 	bl	8007932 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80085ac:	4b18      	ldr	r3, [pc, #96]	@ (8008610 <xTaskResumeAll+0xdc>)
 80085ae:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80085b4:	429a      	cmp	r2, r3
 80085b6:	d301      	bcc.n	80085bc <xTaskResumeAll+0x88>
						xYieldPending = pdTRUE;
 80085b8:	4b16      	ldr	r3, [pc, #88]	@ (8008614 <xTaskResumeAll+0xe0>)
 80085ba:	601f      	str	r7, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80085bc:	682b      	ldr	r3, [r5, #0]
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d1dc      	bne.n	800857c <xTaskResumeAll+0x48>
				if( pxTCB != NULL )
 80085c2:	b10c      	cbz	r4, 80085c8 <xTaskResumeAll+0x94>
					prvResetNextTaskUnblockTime();
 80085c4:	f7ff fdda 	bl	800817c <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80085c8:	4d13      	ldr	r5, [pc, #76]	@ (8008618 <xTaskResumeAll+0xe4>)
 80085ca:	682c      	ldr	r4, [r5, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80085cc:	b144      	cbz	r4, 80085e0 <xTaskResumeAll+0xac>
								xYieldPending = pdTRUE;
 80085ce:	4e11      	ldr	r6, [pc, #68]	@ (8008614 <xTaskResumeAll+0xe0>)
 80085d0:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 80085d2:	f7ff ff17 	bl	8008404 <xTaskIncrementTick>
 80085d6:	b100      	cbz	r0, 80085da <xTaskResumeAll+0xa6>
								xYieldPending = pdTRUE;
 80085d8:	6037      	str	r7, [r6, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80085da:	3c01      	subs	r4, #1
 80085dc:	d1f9      	bne.n	80085d2 <xTaskResumeAll+0x9e>
						uxPendedTicks = 0;
 80085de:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 80085e0:	4b0c      	ldr	r3, [pc, #48]	@ (8008614 <xTaskResumeAll+0xe0>)
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d0ba      	beq.n	800855e <xTaskResumeAll+0x2a>
					taskYIELD_IF_USING_PREEMPTION();
 80085e8:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80085ec:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80085f0:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80085f4:	f3bf 8f4f 	dsb	sy
 80085f8:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 80085fc:	2401      	movs	r4, #1
 80085fe:	e7af      	b.n	8008560 <xTaskResumeAll+0x2c>
 8008600:	200027cc 	.word	0x200027cc
 8008604:	200027f0 	.word	0x200027f0
 8008608:	20002820 	.word	0x20002820
 800860c:	200027e8 	.word	0x200027e8
 8008610:	200028f0 	.word	0x200028f0
 8008614:	200027dc 	.word	0x200027dc
 8008618:	200027e0 	.word	0x200027e0
 800861c:	20002864 	.word	0x20002864

08008620 <vTaskDelay>:
	{
 8008620:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008622:	b950      	cbnz	r0, 800863a <vTaskDelay+0x1a>
			portYIELD_WITHIN_API();
 8008624:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8008628:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800862c:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8008630:	f3bf 8f4f 	dsb	sy
 8008634:	f3bf 8f6f 	isb	sy
	}
 8008638:	bd08      	pop	{r3, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 800863a:	4b0a      	ldr	r3, [pc, #40]	@ (8008664 <vTaskDelay+0x44>)
 800863c:	6819      	ldr	r1, [r3, #0]
 800863e:	b141      	cbz	r1, 8008652 <vTaskDelay+0x32>
 8008640:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008644:	f383 8811 	msr	BASEPRI, r3
 8008648:	f3bf 8f6f 	isb	sy
 800864c:	f3bf 8f4f 	dsb	sy
 8008650:	e7fe      	b.n	8008650 <vTaskDelay+0x30>
			vTaskSuspendAll();
 8008652:	f7ff fecf 	bl	80083f4 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008656:	f7ff fd4d 	bl	80080f4 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 800865a:	f7ff ff6b 	bl	8008534 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 800865e:	2800      	cmp	r0, #0
 8008660:	d0e0      	beq.n	8008624 <vTaskDelay+0x4>
 8008662:	e7e9      	b.n	8008638 <vTaskDelay+0x18>
 8008664:	200027cc 	.word	0x200027cc

08008668 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008668:	4b17      	ldr	r3, [pc, #92]	@ (80086c8 <vTaskSwitchContext+0x60>)
 800866a:	681a      	ldr	r2, [r3, #0]
 800866c:	4b17      	ldr	r3, [pc, #92]	@ (80086cc <vTaskSwitchContext+0x64>)
{
 800866e:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008670:	b112      	cbz	r2, 8008678 <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 8008672:	2201      	movs	r2, #1
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8008674:	601a      	str	r2, [r3, #0]
}
 8008676:	bd10      	pop	{r4, pc}
		xYieldPending = pdFALSE;
 8008678:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800867a:	4b15      	ldr	r3, [pc, #84]	@ (80086d0 <vTaskSwitchContext+0x68>)
 800867c:	681a      	ldr	r2, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800867e:	fab2 f282 	clz	r2, r2
 8008682:	b2d2      	uxtb	r2, r2
 8008684:	f1c2 021f 	rsb	r2, r2, #31
 8008688:	2314      	movs	r3, #20
 800868a:	4912      	ldr	r1, [pc, #72]	@ (80086d4 <vTaskSwitchContext+0x6c>)
 800868c:	4353      	muls	r3, r2
 800868e:	18c8      	adds	r0, r1, r3
 8008690:	58cc      	ldr	r4, [r1, r3]
 8008692:	b944      	cbnz	r4, 80086a6 <vTaskSwitchContext+0x3e>
	__asm volatile
 8008694:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008698:	f383 8811 	msr	BASEPRI, r3
 800869c:	f3bf 8f6f 	isb	sy
 80086a0:	f3bf 8f4f 	dsb	sy
 80086a4:	e7fe      	b.n	80086a4 <vTaskSwitchContext+0x3c>
 80086a6:	6844      	ldr	r4, [r0, #4]
 80086a8:	3308      	adds	r3, #8
 80086aa:	6864      	ldr	r4, [r4, #4]
 80086ac:	6044      	str	r4, [r0, #4]
 80086ae:	440b      	add	r3, r1
 80086b0:	429c      	cmp	r4, r3
 80086b2:	bf04      	itt	eq
 80086b4:	6863      	ldreq	r3, [r4, #4]
 80086b6:	6043      	streq	r3, [r0, #4]
 80086b8:	2314      	movs	r3, #20
 80086ba:	fb03 1102 	mla	r1, r3, r2, r1
 80086be:	684b      	ldr	r3, [r1, #4]
 80086c0:	68da      	ldr	r2, [r3, #12]
 80086c2:	4b05      	ldr	r3, [pc, #20]	@ (80086d8 <vTaskSwitchContext+0x70>)
 80086c4:	e7d6      	b.n	8008674 <vTaskSwitchContext+0xc>
 80086c6:	bf00      	nop
 80086c8:	200027cc 	.word	0x200027cc
 80086cc:	200027dc 	.word	0x200027dc
 80086d0:	200027e8 	.word	0x200027e8
 80086d4:	20002864 	.word	0x20002864
 80086d8:	200028f0 	.word	0x200028f0

080086dc <vTaskPlaceOnEventList>:
{
 80086dc:	b510      	push	{r4, lr}
 80086de:	460c      	mov	r4, r1
	configASSERT( pxEventList );
 80086e0:	b940      	cbnz	r0, 80086f4 <vTaskPlaceOnEventList+0x18>
 80086e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086e6:	f383 8811 	msr	BASEPRI, r3
 80086ea:	f3bf 8f6f 	isb	sy
 80086ee:	f3bf 8f4f 	dsb	sy
 80086f2:	e7fe      	b.n	80086f2 <vTaskPlaceOnEventList+0x16>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80086f4:	4b05      	ldr	r3, [pc, #20]	@ (800870c <vTaskPlaceOnEventList+0x30>)
 80086f6:	6819      	ldr	r1, [r3, #0]
 80086f8:	3118      	adds	r1, #24
 80086fa:	f7ff f925 	bl	8007948 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80086fe:	4620      	mov	r0, r4
 8008700:	2101      	movs	r1, #1
}
 8008702:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008706:	f7ff bcf5 	b.w	80080f4 <prvAddCurrentTaskToDelayedList>
 800870a:	bf00      	nop
 800870c:	200028f0 	.word	0x200028f0

08008710 <xTaskRemoveFromEventList>:
{
 8008710:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8008712:	68c3      	ldr	r3, [r0, #12]
 8008714:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 8008716:	b944      	cbnz	r4, 800872a <xTaskRemoveFromEventList+0x1a>
 8008718:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800871c:	f383 8811 	msr	BASEPRI, r3
 8008720:	f3bf 8f6f 	isb	sy
 8008724:	f3bf 8f4f 	dsb	sy
 8008728:	e7fe      	b.n	8008728 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800872a:	f104 0518 	add.w	r5, r4, #24
 800872e:	4628      	mov	r0, r5
 8008730:	f7ff f921 	bl	8007976 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008734:	4b11      	ldr	r3, [pc, #68]	@ (800877c <xTaskRemoveFromEventList+0x6c>)
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	b9e3      	cbnz	r3, 8008774 <xTaskRemoveFromEventList+0x64>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800873a:	1d25      	adds	r5, r4, #4
 800873c:	4628      	mov	r0, r5
 800873e:	f7ff f91a 	bl	8007976 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008742:	490f      	ldr	r1, [pc, #60]	@ (8008780 <xTaskRemoveFromEventList+0x70>)
 8008744:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8008746:	6808      	ldr	r0, [r1, #0]
 8008748:	2301      	movs	r3, #1
 800874a:	4093      	lsls	r3, r2
 800874c:	4303      	orrs	r3, r0
 800874e:	600b      	str	r3, [r1, #0]
 8008750:	4b0c      	ldr	r3, [pc, #48]	@ (8008784 <xTaskRemoveFromEventList+0x74>)
 8008752:	2014      	movs	r0, #20
 8008754:	4629      	mov	r1, r5
 8008756:	fb00 3002 	mla	r0, r0, r2, r3
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800875a:	f7ff f8ea 	bl	8007932 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800875e:	4b0a      	ldr	r3, [pc, #40]	@ (8008788 <xTaskRemoveFromEventList+0x78>)
 8008760:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008766:	429a      	cmp	r2, r3
		xYieldPending = pdTRUE;
 8008768:	bf83      	ittte	hi
 800876a:	4b08      	ldrhi	r3, [pc, #32]	@ (800878c <xTaskRemoveFromEventList+0x7c>)
 800876c:	2001      	movhi	r0, #1
 800876e:	6018      	strhi	r0, [r3, #0]
		xReturn = pdFALSE;
 8008770:	2000      	movls	r0, #0
}
 8008772:	bd38      	pop	{r3, r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008774:	4806      	ldr	r0, [pc, #24]	@ (8008790 <xTaskRemoveFromEventList+0x80>)
 8008776:	4629      	mov	r1, r5
 8008778:	e7ef      	b.n	800875a <xTaskRemoveFromEventList+0x4a>
 800877a:	bf00      	nop
 800877c:	200027cc 	.word	0x200027cc
 8008780:	200027e8 	.word	0x200027e8
 8008784:	20002864 	.word	0x20002864
 8008788:	200028f0 	.word	0x200028f0
 800878c:	200027dc 	.word	0x200027dc
 8008790:	20002820 	.word	0x20002820

08008794 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008794:	4b03      	ldr	r3, [pc, #12]	@ (80087a4 <vTaskInternalSetTimeOutState+0x10>)
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800879a:	4b03      	ldr	r3, [pc, #12]	@ (80087a8 <vTaskInternalSetTimeOutState+0x14>)
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	6043      	str	r3, [r0, #4]
}
 80087a0:	4770      	bx	lr
 80087a2:	bf00      	nop
 80087a4:	200027d8 	.word	0x200027d8
 80087a8:	200027ec 	.word	0x200027ec

080087ac <xTaskCheckForTimeOut>:
{
 80087ac:	b570      	push	{r4, r5, r6, lr}
 80087ae:	460c      	mov	r4, r1
	configASSERT( pxTimeOut );
 80087b0:	4605      	mov	r5, r0
 80087b2:	b940      	cbnz	r0, 80087c6 <xTaskCheckForTimeOut+0x1a>
 80087b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087b8:	f383 8811 	msr	BASEPRI, r3
 80087bc:	f3bf 8f6f 	isb	sy
 80087c0:	f3bf 8f4f 	dsb	sy
 80087c4:	e7fe      	b.n	80087c4 <xTaskCheckForTimeOut+0x18>
	configASSERT( pxTicksToWait );
 80087c6:	b941      	cbnz	r1, 80087da <xTaskCheckForTimeOut+0x2e>
 80087c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087cc:	f383 8811 	msr	BASEPRI, r3
 80087d0:	f3bf 8f6f 	isb	sy
 80087d4:	f3bf 8f4f 	dsb	sy
 80087d8:	e7fe      	b.n	80087d8 <xTaskCheckForTimeOut+0x2c>
	taskENTER_CRITICAL();
 80087da:	f000 f8f3 	bl	80089c4 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 80087de:	4b0f      	ldr	r3, [pc, #60]	@ (800881c <xTaskCheckForTimeOut+0x70>)
 80087e0:	6819      	ldr	r1, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 80087e2:	6823      	ldr	r3, [r4, #0]
 80087e4:	1c5a      	adds	r2, r3, #1
 80087e6:	d010      	beq.n	800880a <xTaskCheckForTimeOut+0x5e>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80087e8:	480d      	ldr	r0, [pc, #52]	@ (8008820 <xTaskCheckForTimeOut+0x74>)
 80087ea:	682e      	ldr	r6, [r5, #0]
 80087ec:	6800      	ldr	r0, [r0, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80087ee:	686a      	ldr	r2, [r5, #4]
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80087f0:	4286      	cmp	r6, r0
 80087f2:	d001      	beq.n	80087f8 <xTaskCheckForTimeOut+0x4c>
 80087f4:	428a      	cmp	r2, r1
 80087f6:	d90f      	bls.n	8008818 <xTaskCheckForTimeOut+0x6c>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80087f8:	1a88      	subs	r0, r1, r2
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80087fa:	4283      	cmp	r3, r0
 80087fc:	d90a      	bls.n	8008814 <xTaskCheckForTimeOut+0x68>
			*pxTicksToWait -= xElapsedTime;
 80087fe:	1a5b      	subs	r3, r3, r1
 8008800:	4413      	add	r3, r2
 8008802:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008804:	4628      	mov	r0, r5
 8008806:	f7ff ffc5 	bl	8008794 <vTaskInternalSetTimeOutState>
				xReturn = pdFALSE;
 800880a:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800880c:	f000 f8fa 	bl	8008a04 <vPortExitCritical>
}
 8008810:	4620      	mov	r0, r4
 8008812:	bd70      	pop	{r4, r5, r6, pc}
			*pxTicksToWait = 0;
 8008814:	2300      	movs	r3, #0
 8008816:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 8008818:	2401      	movs	r4, #1
 800881a:	e7f7      	b.n	800880c <xTaskCheckForTimeOut+0x60>
 800881c:	200027ec 	.word	0x200027ec
 8008820:	200027d8 	.word	0x200027d8

08008824 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8008824:	4b01      	ldr	r3, [pc, #4]	@ (800882c <vTaskMissedYield+0x8>)
 8008826:	2201      	movs	r2, #1
 8008828:	601a      	str	r2, [r3, #0]
}
 800882a:	4770      	bx	lr
 800882c:	200027dc 	.word	0x200027dc

08008830 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8008830:	4b05      	ldr	r3, [pc, #20]	@ (8008848 <xTaskGetSchedulerState+0x18>)
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	b133      	cbz	r3, 8008844 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008836:	4b05      	ldr	r3, [pc, #20]	@ (800884c <xTaskGetSchedulerState+0x1c>)
 8008838:	6818      	ldr	r0, [r3, #0]
 800883a:	fab0 f080 	clz	r0, r0
 800883e:	0940      	lsrs	r0, r0, #5
 8008840:	0040      	lsls	r0, r0, #1
 8008842:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008844:	2001      	movs	r0, #1
	}
 8008846:	4770      	bx	lr
 8008848:	200027e4 	.word	0x200027e4
 800884c:	200027cc 	.word	0x200027cc

08008850 <xTaskPriorityDisinherit>:
	{
 8008850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if( pxMutexHolder != NULL )
 8008852:	4604      	mov	r4, r0
 8008854:	b908      	cbnz	r0, 800885a <xTaskPriorityDisinherit+0xa>
	BaseType_t xReturn = pdFALSE;
 8008856:	2000      	movs	r0, #0
	}
 8008858:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			configASSERT( pxTCB == pxCurrentTCB );
 800885a:	4b22      	ldr	r3, [pc, #136]	@ (80088e4 <xTaskPriorityDisinherit+0x94>)
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	4283      	cmp	r3, r0
 8008860:	d008      	beq.n	8008874 <xTaskPriorityDisinherit+0x24>
 8008862:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008866:	f383 8811 	msr	BASEPRI, r3
 800886a:	f3bf 8f6f 	isb	sy
 800886e:	f3bf 8f4f 	dsb	sy
 8008872:	e7fe      	b.n	8008872 <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 8008874:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008876:	b943      	cbnz	r3, 800888a <xTaskPriorityDisinherit+0x3a>
 8008878:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800887c:	f383 8811 	msr	BASEPRI, r3
 8008880:	f3bf 8f6f 	isb	sy
 8008884:	f3bf 8f4f 	dsb	sy
 8008888:	e7fe      	b.n	8008888 <xTaskPriorityDisinherit+0x38>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800888a:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 800888c:	6c42      	ldr	r2, [r0, #68]	@ 0x44
			( pxTCB->uxMutexesHeld )--;
 800888e:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008890:	4291      	cmp	r1, r2
			( pxTCB->uxMutexesHeld )--;
 8008892:	6483      	str	r3, [r0, #72]	@ 0x48
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008894:	d0df      	beq.n	8008856 <xTaskPriorityDisinherit+0x6>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008896:	2b00      	cmp	r3, #0
 8008898:	d1dd      	bne.n	8008856 <xTaskPriorityDisinherit+0x6>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800889a:	1d06      	adds	r6, r0, #4
 800889c:	4630      	mov	r0, r6
 800889e:	f7ff f86a 	bl	8007976 <uxListRemove>
 80088a2:	4f11      	ldr	r7, [pc, #68]	@ (80088e8 <xTaskPriorityDisinherit+0x98>)
 80088a4:	4a11      	ldr	r2, [pc, #68]	@ (80088ec <xTaskPriorityDisinherit+0x9c>)
 80088a6:	b950      	cbnz	r0, 80088be <xTaskPriorityDisinherit+0x6e>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80088a8:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80088aa:	2314      	movs	r3, #20
 80088ac:	434b      	muls	r3, r1
 80088ae:	58fb      	ldr	r3, [r7, r3]
 80088b0:	b92b      	cbnz	r3, 80088be <xTaskPriorityDisinherit+0x6e>
 80088b2:	6813      	ldr	r3, [r2, #0]
 80088b4:	2501      	movs	r5, #1
 80088b6:	408d      	lsls	r5, r1
 80088b8:	ea23 0305 	bic.w	r3, r3, r5
 80088bc:	6013      	str	r3, [r2, #0]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80088be:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 80088c0:	62e3      	str	r3, [r4, #44]	@ 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80088c2:	f1c3 0107 	rsb	r1, r3, #7
 80088c6:	61a1      	str	r1, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 80088c8:	6811      	ldr	r1, [r2, #0]
 80088ca:	2401      	movs	r4, #1
 80088cc:	fa04 f503 	lsl.w	r5, r4, r3
 80088d0:	2014      	movs	r0, #20
 80088d2:	430d      	orrs	r5, r1
 80088d4:	fb00 7003 	mla	r0, r0, r3, r7
 80088d8:	4631      	mov	r1, r6
 80088da:	6015      	str	r5, [r2, #0]
 80088dc:	f7ff f829 	bl	8007932 <vListInsertEnd>
					xReturn = pdTRUE;
 80088e0:	4620      	mov	r0, r4
		return xReturn;
 80088e2:	e7b9      	b.n	8008858 <xTaskPriorityDisinherit+0x8>
 80088e4:	200028f0 	.word	0x200028f0
 80088e8:	20002864 	.word	0x20002864
 80088ec:	200027e8 	.word	0x200027e8

080088f0 <prvPortStartFirstTask>:
=======
 8005e7a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005e7e:	3104      	adds	r1, #4
 8005e80:	f7ff bc01 	b.w	8005686 <vListInsertEnd>
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005e84:	682b      	ldr	r3, [r5, #0]
 8005e86:	19a4      	adds	r4, r4, r6
 8005e88:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005e8a:	d307      	bcc.n	8005e9c <prvAddCurrentTaskToDelayedList+0x54>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005e8c:	4b0d      	ldr	r3, [pc, #52]	@ (8005ec4 <prvAddCurrentTaskToDelayedList+0x7c>)
 8005e8e:	6818      	ldr	r0, [r3, #0]
 8005e90:	6829      	ldr	r1, [r5, #0]
}
 8005e92:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005e96:	3104      	adds	r1, #4
 8005e98:	f7ff bc00 	b.w	800569c <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005e9c:	4b0a      	ldr	r3, [pc, #40]	@ (8005ec8 <prvAddCurrentTaskToDelayedList+0x80>)
 8005e9e:	6818      	ldr	r0, [r3, #0]
 8005ea0:	6829      	ldr	r1, [r5, #0]
 8005ea2:	3104      	adds	r1, #4
 8005ea4:	f7ff fbfa 	bl	800569c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005ea8:	4b08      	ldr	r3, [pc, #32]	@ (8005ecc <prvAddCurrentTaskToDelayedList+0x84>)
 8005eaa:	681a      	ldr	r2, [r3, #0]
 8005eac:	42a2      	cmp	r2, r4
					xNextTaskUnblockTime = xTimeToWake;
 8005eae:	bf88      	it	hi
 8005eb0:	601c      	strhi	r4, [r3, #0]
}
 8005eb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005eb4:	200024dc 	.word	0x200024dc
 8005eb8:	200025e0 	.word	0x200025e0
 8005ebc:	200024d8 	.word	0x200024d8
 8005ec0:	200024e4 	.word	0x200024e4
 8005ec4:	20002524 	.word	0x20002524
 8005ec8:	20002528 	.word	0x20002528
 8005ecc:	200024c0 	.word	0x200024c0

08005ed0 <prvResetNextTaskUnblockTime>:
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005ed0:	4a06      	ldr	r2, [pc, #24]	@ (8005eec <prvResetNextTaskUnblockTime+0x1c>)
 8005ed2:	6813      	ldr	r3, [r2, #0]
 8005ed4:	6819      	ldr	r1, [r3, #0]
 8005ed6:	4b06      	ldr	r3, [pc, #24]	@ (8005ef0 <prvResetNextTaskUnblockTime+0x20>)
 8005ed8:	b919      	cbnz	r1, 8005ee2 <prvResetNextTaskUnblockTime+0x12>
		xNextTaskUnblockTime = portMAX_DELAY;
 8005eda:	f04f 32ff 	mov.w	r2, #4294967295
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005ede:	601a      	str	r2, [r3, #0]
}
 8005ee0:	4770      	bx	lr
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005ee2:	6812      	ldr	r2, [r2, #0]
 8005ee4:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005ee6:	68d2      	ldr	r2, [r2, #12]
 8005ee8:	6852      	ldr	r2, [r2, #4]
 8005eea:	e7f8      	b.n	8005ede <prvResetNextTaskUnblockTime+0xe>
 8005eec:	20002528 	.word	0x20002528
 8005ef0:	200024c0 	.word	0x200024c0

08005ef4 <prvDeleteTCB>:
	{
 8005ef4:	b510      	push	{r4, lr}
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005ef6:	f890 3051 	ldrb.w	r3, [r0, #81]	@ 0x51
	{
 8005efa:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005efc:	b93b      	cbnz	r3, 8005f0e <prvDeleteTCB+0x1a>
				vPortFree( pxTCB->pxStack );
 8005efe:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 8005f00:	f000 fe00 	bl	8006b04 <vPortFree>
				vPortFree( pxTCB );
 8005f04:	4620      	mov	r0, r4
	}
 8005f06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				vPortFree( pxTCB );
 8005f0a:	f000 bdfb 	b.w	8006b04 <vPortFree>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005f0e:	2b01      	cmp	r3, #1
 8005f10:	d0f9      	beq.n	8005f06 <prvDeleteTCB+0x12>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005f12:	2b02      	cmp	r3, #2
 8005f14:	d008      	beq.n	8005f28 <prvDeleteTCB+0x34>
	__asm volatile
 8005f16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f1a:	f383 8811 	msr	BASEPRI, r3
 8005f1e:	f3bf 8f6f 	isb	sy
 8005f22:	f3bf 8f4f 	dsb	sy
 8005f26:	e7fe      	b.n	8005f26 <prvDeleteTCB+0x32>
	}
 8005f28:	bd10      	pop	{r4, pc}
	...

08005f2c <prvIdleTask>:
{
 8005f2c:	b580      	push	{r7, lr}
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005f2e:	4c13      	ldr	r4, [pc, #76]	@ (8005f7c <prvIdleTask+0x50>)
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8005f30:	4f13      	ldr	r7, [pc, #76]	@ (8005f80 <prvIdleTask+0x54>)
				--uxCurrentNumberOfTasks;
 8005f32:	4d14      	ldr	r5, [pc, #80]	@ (8005f84 <prvIdleTask+0x58>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005f34:	6823      	ldr	r3, [r4, #0]
 8005f36:	b973      	cbnz	r3, 8005f56 <prvIdleTask+0x2a>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005f38:	4b13      	ldr	r3, [pc, #76]	@ (8005f88 <prvIdleTask+0x5c>)
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	2b01      	cmp	r3, #1
 8005f3e:	d9f8      	bls.n	8005f32 <prvIdleTask+0x6>
				taskYIELD();
 8005f40:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8005f44:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005f48:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8005f4c:	f3bf 8f4f 	dsb	sy
 8005f50:	f3bf 8f6f 	isb	sy
 8005f54:	e7ed      	b.n	8005f32 <prvIdleTask+0x6>
			taskENTER_CRITICAL();
 8005f56:	f000 fbdd 	bl	8006714 <vPortEnterCritical>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	68de      	ldr	r6, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005f5e:	1d30      	adds	r0, r6, #4
 8005f60:	f7ff fbb3 	bl	80056ca <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005f64:	682b      	ldr	r3, [r5, #0]
 8005f66:	3b01      	subs	r3, #1
 8005f68:	602b      	str	r3, [r5, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005f6a:	6823      	ldr	r3, [r4, #0]
 8005f6c:	3b01      	subs	r3, #1
 8005f6e:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 8005f70:	f000 fbf0 	bl	8006754 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 8005f74:	4630      	mov	r0, r6
 8005f76:	f7ff ffbd 	bl	8005ef4 <prvDeleteTCB>
 8005f7a:	e7db      	b.n	8005f34 <prvIdleTask+0x8>
 8005f7c:	200024f8 	.word	0x200024f8
 8005f80:	200024fc 	.word	0x200024fc
 8005f84:	200024e0 	.word	0x200024e0
 8005f88:	20002554 	.word	0x20002554

08005f8c <prvInitialiseNewTask.constprop.0>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8005f8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005f90:	e9dd 8409 	ldrd	r8, r4, [sp, #36]	@ 0x24
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8005f94:	f102 4280 	add.w	r2, r2, #1073741824	@ 0x40000000
 8005f98:	6b26      	ldr	r6, [r4, #48]	@ 0x30
 8005f9a:	3a01      	subs	r2, #1
 8005f9c:	eb06 0682 	add.w	r6, r6, r2, lsl #2
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8005fa0:	4699      	mov	r9, r3
 8005fa2:	4607      	mov	r7, r0
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8005fa4:	1e4b      	subs	r3, r1, #1
 8005fa6:	f026 0607 	bic.w	r6, r6, #7
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005faa:	f104 0233 	add.w	r2, r4, #51	@ 0x33
 8005fae:	310f      	adds	r1, #15
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005fb0:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 8005fb4:	f802 0f01 	strb.w	r0, [r2, #1]!
		if( pcName[ x ] == 0x00 )
 8005fb8:	b108      	cbz	r0, 8005fbe <prvInitialiseNewTask.constprop.0+0x32>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005fba:	428b      	cmp	r3, r1
 8005fbc:	d1f8      	bne.n	8005fb0 <prvInitialiseNewTask.constprop.0+0x24>
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005fbe:	9d08      	ldr	r5, [sp, #32]
 8005fc0:	2d06      	cmp	r5, #6
 8005fc2:	bf28      	it	cs
 8005fc4:	2506      	movcs	r5, #6
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005fc6:	f04f 0a00 	mov.w	sl, #0
		pxNewTCB->uxMutexesHeld = 0;
 8005fca:	e9c4 5a11 	strd	r5, sl, [r4, #68]	@ 0x44
	pxNewTCB->uxPriority = uxPriority;
 8005fce:	62e5      	str	r5, [r4, #44]	@ 0x2c
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005fd0:	1d20      	adds	r0, r4, #4
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005fd2:	f884 a043 	strb.w	sl, [r4, #67]	@ 0x43
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005fd6:	f7ff fb53 	bl	8005680 <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005fda:	f1c5 0507 	rsb	r5, r5, #7
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005fde:	f104 0018 	add.w	r0, r4, #24
 8005fe2:	f7ff fb4d 	bl	8005680 <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 8005fe6:	f8c4 a04c 	str.w	sl, [r4, #76]	@ 0x4c
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005fea:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005fec:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005fee:	6264      	str	r4, [r4, #36]	@ 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005ff0:	f884 a050 	strb.w	sl, [r4, #80]	@ 0x50
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005ff4:	464a      	mov	r2, r9
 8005ff6:	4639      	mov	r1, r7
 8005ff8:	4630      	mov	r0, r6
 8005ffa:	f000 fb61 	bl	80066c0 <pxPortInitialiseStack>
 8005ffe:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 8006000:	f1b8 0f00 	cmp.w	r8, #0
 8006004:	d001      	beq.n	800600a <prvInitialiseNewTask.constprop.0+0x7e>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006006:	f8c8 4000 	str.w	r4, [r8]
}
 800600a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800600e <xTaskCreateStatic>:
	{
 800600e:	b570      	push	{r4, r5, r6, lr}
 8006010:	b086      	sub	sp, #24
 8006012:	e9dd 540b 	ldrd	r5, r4, [sp, #44]	@ 0x2c
		configASSERT( puxStackBuffer != NULL );
 8006016:	b945      	cbnz	r5, 800602a <xTaskCreateStatic+0x1c>
 8006018:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800601c:	f383 8811 	msr	BASEPRI, r3
 8006020:	f3bf 8f6f 	isb	sy
 8006024:	f3bf 8f4f 	dsb	sy
 8006028:	e7fe      	b.n	8006028 <xTaskCreateStatic+0x1a>
		configASSERT( pxTaskBuffer != NULL );
 800602a:	b944      	cbnz	r4, 800603e <xTaskCreateStatic+0x30>
 800602c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006030:	f383 8811 	msr	BASEPRI, r3
 8006034:	f3bf 8f6f 	isb	sy
 8006038:	f3bf 8f4f 	dsb	sy
 800603c:	e7fe      	b.n	800603c <xTaskCreateStatic+0x2e>
			volatile size_t xSize = sizeof( StaticTask_t );
 800603e:	2654      	movs	r6, #84	@ 0x54
 8006040:	9605      	str	r6, [sp, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006042:	9e05      	ldr	r6, [sp, #20]
 8006044:	2e54      	cmp	r6, #84	@ 0x54
 8006046:	d008      	beq.n	800605a <xTaskCreateStatic+0x4c>
 8006048:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800604c:	f383 8811 	msr	BASEPRI, r3
 8006050:	f3bf 8f6f 	isb	sy
 8006054:	f3bf 8f4f 	dsb	sy
 8006058:	e7fe      	b.n	8006058 <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800605a:	6325      	str	r5, [r4, #48]	@ 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800605c:	2502      	movs	r5, #2
 800605e:	f884 5051 	strb.w	r5, [r4, #81]	@ 0x51
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006062:	ad04      	add	r5, sp, #16
 8006064:	9501      	str	r5, [sp, #4]
 8006066:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8006068:	9402      	str	r4, [sp, #8]
 800606a:	9500      	str	r5, [sp, #0]
 800606c:	f7ff ff8e 	bl	8005f8c <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006070:	4620      	mov	r0, r4
 8006072:	f7ff fe6b 	bl	8005d4c <prvAddNewTaskToReadyList>
	}
 8006076:	9804      	ldr	r0, [sp, #16]
 8006078:	b006      	add	sp, #24
 800607a:	bd70      	pop	{r4, r5, r6, pc}

0800607c <xTaskCreate>:
	{
 800607c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006080:	4607      	mov	r7, r0
 8006082:	b085      	sub	sp, #20
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006084:	0090      	lsls	r0, r2, #2
	{
 8006086:	4688      	mov	r8, r1
 8006088:	4616      	mov	r6, r2
 800608a:	4699      	mov	r9, r3
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800608c:	f000 fca8 	bl	80069e0 <pvPortMalloc>
			if( pxStack != NULL )
 8006090:	4605      	mov	r5, r0
 8006092:	b920      	cbnz	r0, 800609e <xTaskCreate+0x22>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006094:	f04f 30ff 	mov.w	r0, #4294967295
	}
 8006098:	b005      	add	sp, #20
 800609a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800609e:	2054      	movs	r0, #84	@ 0x54
 80060a0:	f000 fc9e 	bl	80069e0 <pvPortMalloc>
				if( pxNewTCB != NULL )
 80060a4:	4604      	mov	r4, r0
 80060a6:	b198      	cbz	r0, 80060d0 <xTaskCreate+0x54>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80060a8:	2300      	movs	r3, #0
 80060aa:	f880 3051 	strb.w	r3, [r0, #81]	@ 0x51
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80060ae:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
					pxNewTCB->pxStack = pxStack;
 80060b0:	6305      	str	r5, [r0, #48]	@ 0x30
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80060b2:	9301      	str	r3, [sp, #4]
 80060b4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80060b6:	9002      	str	r0, [sp, #8]
 80060b8:	9300      	str	r3, [sp, #0]
 80060ba:	4632      	mov	r2, r6
 80060bc:	464b      	mov	r3, r9
 80060be:	4641      	mov	r1, r8
 80060c0:	4638      	mov	r0, r7
 80060c2:	f7ff ff63 	bl	8005f8c <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 80060c6:	4620      	mov	r0, r4
 80060c8:	f7ff fe40 	bl	8005d4c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80060cc:	2001      	movs	r0, #1
 80060ce:	e7e3      	b.n	8006098 <xTaskCreate+0x1c>
					vPortFree( pxStack );
 80060d0:	4628      	mov	r0, r5
 80060d2:	f000 fd17 	bl	8006b04 <vPortFree>
		if( pxNewTCB != NULL )
 80060d6:	e7dd      	b.n	8006094 <xTaskCreate+0x18>

080060d8 <vTaskStartScheduler>:
{
 80060d8:	b510      	push	{r4, lr}
 80060da:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80060dc:	2400      	movs	r4, #0
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80060de:	aa07      	add	r2, sp, #28
 80060e0:	a906      	add	r1, sp, #24
 80060e2:	a805      	add	r0, sp, #20
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80060e4:	e9cd 4405 	strd	r4, r4, [sp, #20]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80060e8:	f7fa ff60 	bl	8000fac <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80060ec:	9b05      	ldr	r3, [sp, #20]
 80060ee:	9302      	str	r3, [sp, #8]
 80060f0:	9b06      	ldr	r3, [sp, #24]
 80060f2:	9a07      	ldr	r2, [sp, #28]
 80060f4:	490f      	ldr	r1, [pc, #60]	@ (8006134 <vTaskStartScheduler+0x5c>)
 80060f6:	4810      	ldr	r0, [pc, #64]	@ (8006138 <vTaskStartScheduler+0x60>)
 80060f8:	e9cd 4300 	strd	r4, r3, [sp]
 80060fc:	4623      	mov	r3, r4
 80060fe:	f7ff ff86 	bl	800600e <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 8006102:	b1a8      	cbz	r0, 8006130 <vTaskStartScheduler+0x58>
 8006104:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006108:	f383 8811 	msr	BASEPRI, r3
 800610c:	f3bf 8f6f 	isb	sy
 8006110:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 8006114:	4b09      	ldr	r3, [pc, #36]	@ (800613c <vTaskStartScheduler+0x64>)
 8006116:	f04f 32ff 	mov.w	r2, #4294967295
 800611a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800611c:	4b08      	ldr	r3, [pc, #32]	@ (8006140 <vTaskStartScheduler+0x68>)
 800611e:	2201      	movs	r2, #1
 8006120:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8006122:	4b08      	ldr	r3, [pc, #32]	@ (8006144 <vTaskStartScheduler+0x6c>)
 8006124:	601c      	str	r4, [r3, #0]
}
 8006126:	b008      	add	sp, #32
 8006128:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if( xPortStartScheduler() != pdFALSE )
 800612c:	f000 bb82 	b.w	8006834 <xPortStartScheduler>
}
 8006130:	b008      	add	sp, #32
 8006132:	bd10      	pop	{r4, pc}
 8006134:	0800ce73 	.word	0x0800ce73
 8006138:	08005f2d 	.word	0x08005f2d
 800613c:	200024c0 	.word	0x200024c0
 8006140:	200024d4 	.word	0x200024d4
 8006144:	200024dc 	.word	0x200024dc

08006148 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8006148:	4a02      	ldr	r2, [pc, #8]	@ (8006154 <vTaskSuspendAll+0xc>)
 800614a:	6813      	ldr	r3, [r2, #0]
 800614c:	3301      	adds	r3, #1
 800614e:	6013      	str	r3, [r2, #0]
}
 8006150:	4770      	bx	lr
 8006152:	bf00      	nop
 8006154:	200024bc 	.word	0x200024bc

08006158 <xTaskIncrementTick>:
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006158:	4b40      	ldr	r3, [pc, #256]	@ (800625c <xTaskIncrementTick+0x104>)
 800615a:	681b      	ldr	r3, [r3, #0]
{
 800615c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006160:	2b00      	cmp	r3, #0
 8006162:	d174      	bne.n	800624e <xTaskIncrementTick+0xf6>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006164:	4b3e      	ldr	r3, [pc, #248]	@ (8006260 <xTaskIncrementTick+0x108>)
 8006166:	681c      	ldr	r4, [r3, #0]
 8006168:	3401      	adds	r4, #1
		xTickCount = xConstTickCount;
 800616a:	601c      	str	r4, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800616c:	b9bc      	cbnz	r4, 800619e <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 800616e:	4b3d      	ldr	r3, [pc, #244]	@ (8006264 <xTaskIncrementTick+0x10c>)
 8006170:	681a      	ldr	r2, [r3, #0]
 8006172:	6812      	ldr	r2, [r2, #0]
 8006174:	b142      	cbz	r2, 8006188 <xTaskIncrementTick+0x30>
 8006176:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800617a:	f383 8811 	msr	BASEPRI, r3
 800617e:	f3bf 8f6f 	isb	sy
 8006182:	f3bf 8f4f 	dsb	sy
 8006186:	e7fe      	b.n	8006186 <xTaskIncrementTick+0x2e>
 8006188:	4a37      	ldr	r2, [pc, #220]	@ (8006268 <xTaskIncrementTick+0x110>)
 800618a:	6819      	ldr	r1, [r3, #0]
 800618c:	6810      	ldr	r0, [r2, #0]
 800618e:	6018      	str	r0, [r3, #0]
 8006190:	6011      	str	r1, [r2, #0]
 8006192:	4a36      	ldr	r2, [pc, #216]	@ (800626c <xTaskIncrementTick+0x114>)
 8006194:	6813      	ldr	r3, [r2, #0]
 8006196:	3301      	adds	r3, #1
 8006198:	6013      	str	r3, [r2, #0]
 800619a:	f7ff fe99 	bl	8005ed0 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 800619e:	4d34      	ldr	r5, [pc, #208]	@ (8006270 <xTaskIncrementTick+0x118>)
 80061a0:	4e34      	ldr	r6, [pc, #208]	@ (8006274 <xTaskIncrementTick+0x11c>)
 80061a2:	682b      	ldr	r3, [r5, #0]
 80061a4:	4f34      	ldr	r7, [pc, #208]	@ (8006278 <xTaskIncrementTick+0x120>)
 80061a6:	42a3      	cmp	r3, r4
BaseType_t xSwitchRequired = pdFALSE;
 80061a8:	f04f 0b00 	mov.w	fp, #0
		if( xConstTickCount >= xNextTaskUnblockTime )
 80061ac:	d911      	bls.n	80061d2 <xTaskIncrementTick+0x7a>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80061ae:	683a      	ldr	r2, [r7, #0]
 80061b0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80061b2:	2114      	movs	r1, #20
 80061b4:	434a      	muls	r2, r1
 80061b6:	58b2      	ldr	r2, [r6, r2]
				xSwitchRequired = pdTRUE;
 80061b8:	2a02      	cmp	r2, #2
 80061ba:	bf28      	it	cs
 80061bc:	f04f 0b01 	movcs.w	fp, #1
		if( xYieldPending != pdFALSE )
 80061c0:	4a2e      	ldr	r2, [pc, #184]	@ (800627c <xTaskIncrementTick+0x124>)
 80061c2:	6812      	ldr	r2, [r2, #0]
			xSwitchRequired = pdTRUE;
 80061c4:	2a00      	cmp	r2, #0
}
 80061c6:	bf0c      	ite	eq
 80061c8:	4658      	moveq	r0, fp
 80061ca:	2001      	movne	r0, #1
 80061cc:	b003      	add	sp, #12
 80061ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80061d2:	f8df a090 	ldr.w	sl, [pc, #144]	@ 8006264 <xTaskIncrementTick+0x10c>
					prvAddTaskToReadyList( pxTCB );
 80061d6:	f8df 90ac 	ldr.w	r9, [pc, #172]	@ 8006284 <xTaskIncrementTick+0x12c>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80061da:	f8da 2000 	ldr.w	r2, [sl]
 80061de:	6812      	ldr	r2, [r2, #0]
 80061e0:	b91a      	cbnz	r2, 80061ea <xTaskIncrementTick+0x92>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80061e2:	f04f 32ff 	mov.w	r2, #4294967295
 80061e6:	602a      	str	r2, [r5, #0]
					break;
 80061e8:	e7e1      	b.n	80061ae <xTaskIncrementTick+0x56>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80061ea:	f8da 2000 	ldr.w	r2, [sl]
 80061ee:	68d2      	ldr	r2, [r2, #12]
 80061f0:	f8d2 800c 	ldr.w	r8, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80061f4:	f8d8 1004 	ldr.w	r1, [r8, #4]
					if( xConstTickCount < xItemValue )
 80061f8:	428c      	cmp	r4, r1
 80061fa:	d201      	bcs.n	8006200 <xTaskIncrementTick+0xa8>
						xNextTaskUnblockTime = xItemValue;
 80061fc:	6029      	str	r1, [r5, #0]
						break;
 80061fe:	e7d6      	b.n	80061ae <xTaskIncrementTick+0x56>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006200:	f108 0304 	add.w	r3, r8, #4
 8006204:	4618      	mov	r0, r3
 8006206:	9301      	str	r3, [sp, #4]
 8006208:	f7ff fa5f 	bl	80056ca <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800620c:	f8d8 1028 	ldr.w	r1, [r8, #40]	@ 0x28
 8006210:	b119      	cbz	r1, 800621a <xTaskIncrementTick+0xc2>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006212:	f108 0018 	add.w	r0, r8, #24
 8006216:	f7ff fa58 	bl	80056ca <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800621a:	f8d8 002c 	ldr.w	r0, [r8, #44]	@ 0x2c
 800621e:	f8d9 3000 	ldr.w	r3, [r9]
 8006222:	2201      	movs	r2, #1
 8006224:	fa02 f100 	lsl.w	r1, r2, r0
 8006228:	4319      	orrs	r1, r3
 800622a:	f04f 0c14 	mov.w	ip, #20
 800622e:	f8c9 1000 	str.w	r1, [r9]
 8006232:	fb0c 6000 	mla	r0, ip, r0, r6
 8006236:	9901      	ldr	r1, [sp, #4]
 8006238:	f7ff fa25 	bl	8005686 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800623c:	6838      	ldr	r0, [r7, #0]
 800623e:	f8d8 102c 	ldr.w	r1, [r8, #44]	@ 0x2c
 8006242:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
							xSwitchRequired = pdTRUE;
 8006244:	4291      	cmp	r1, r2
 8006246:	bf28      	it	cs
 8006248:	f04f 0b01 	movcs.w	fp, #1
 800624c:	e7c5      	b.n	80061da <xTaskIncrementTick+0x82>
		++uxPendedTicks;
 800624e:	4a0c      	ldr	r2, [pc, #48]	@ (8006280 <xTaskIncrementTick+0x128>)
 8006250:	6813      	ldr	r3, [r2, #0]
 8006252:	3301      	adds	r3, #1
 8006254:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 8006256:	f04f 0b00 	mov.w	fp, #0
 800625a:	e7b1      	b.n	80061c0 <xTaskIncrementTick+0x68>
 800625c:	200024bc 	.word	0x200024bc
 8006260:	200024dc 	.word	0x200024dc
 8006264:	20002528 	.word	0x20002528
 8006268:	20002524 	.word	0x20002524
 800626c:	200024c8 	.word	0x200024c8
 8006270:	200024c0 	.word	0x200024c0
 8006274:	20002554 	.word	0x20002554
 8006278:	200025e0 	.word	0x200025e0
 800627c:	200024cc 	.word	0x200024cc
 8006280:	200024d0 	.word	0x200024d0
 8006284:	200024d8 	.word	0x200024d8

08006288 <xTaskResumeAll>:
{
 8006288:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( uxSchedulerSuspended );
 800628c:	4c31      	ldr	r4, [pc, #196]	@ (8006354 <xTaskResumeAll+0xcc>)
 800628e:	6823      	ldr	r3, [r4, #0]
 8006290:	b943      	cbnz	r3, 80062a4 <xTaskResumeAll+0x1c>
 8006292:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006296:	f383 8811 	msr	BASEPRI, r3
 800629a:	f3bf 8f6f 	isb	sy
 800629e:	f3bf 8f4f 	dsb	sy
 80062a2:	e7fe      	b.n	80062a2 <xTaskResumeAll+0x1a>
	taskENTER_CRITICAL();
 80062a4:	f000 fa36 	bl	8006714 <vPortEnterCritical>
		--uxSchedulerSuspended;
 80062a8:	6823      	ldr	r3, [r4, #0]
 80062aa:	3b01      	subs	r3, #1
 80062ac:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80062ae:	6824      	ldr	r4, [r4, #0]
 80062b0:	b12c      	cbz	r4, 80062be <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 80062b2:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 80062b4:	f000 fa4e 	bl	8006754 <vPortExitCritical>
}
 80062b8:	4620      	mov	r0, r4
 80062ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80062be:	4b26      	ldr	r3, [pc, #152]	@ (8006358 <xTaskResumeAll+0xd0>)
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d0f5      	beq.n	80062b2 <xTaskResumeAll+0x2a>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80062c6:	4d25      	ldr	r5, [pc, #148]	@ (800635c <xTaskResumeAll+0xd4>)
					prvAddTaskToReadyList( pxTCB );
 80062c8:	4e25      	ldr	r6, [pc, #148]	@ (8006360 <xTaskResumeAll+0xd8>)
 80062ca:	f8df 80a4 	ldr.w	r8, [pc, #164]	@ 8006370 <xTaskResumeAll+0xe8>
 80062ce:	e01f      	b.n	8006310 <xTaskResumeAll+0x88>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80062d0:	68eb      	ldr	r3, [r5, #12]
 80062d2:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80062d4:	f104 0904 	add.w	r9, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80062d8:	f104 0018 	add.w	r0, r4, #24
 80062dc:	f7ff f9f5 	bl	80056ca <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80062e0:	4648      	mov	r0, r9
 80062e2:	f7ff f9f2 	bl	80056ca <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80062e6:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80062e8:	6831      	ldr	r1, [r6, #0]
 80062ea:	2701      	movs	r7, #1
 80062ec:	fa07 f302 	lsl.w	r3, r7, r2
 80062f0:	2014      	movs	r0, #20
 80062f2:	430b      	orrs	r3, r1
 80062f4:	fb00 8002 	mla	r0, r0, r2, r8
 80062f8:	4649      	mov	r1, r9
 80062fa:	6033      	str	r3, [r6, #0]
 80062fc:	f7ff f9c3 	bl	8005686 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006300:	4b18      	ldr	r3, [pc, #96]	@ (8006364 <xTaskResumeAll+0xdc>)
 8006302:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006308:	429a      	cmp	r2, r3
 800630a:	d301      	bcc.n	8006310 <xTaskResumeAll+0x88>
						xYieldPending = pdTRUE;
 800630c:	4b16      	ldr	r3, [pc, #88]	@ (8006368 <xTaskResumeAll+0xe0>)
 800630e:	601f      	str	r7, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006310:	682b      	ldr	r3, [r5, #0]
 8006312:	2b00      	cmp	r3, #0
 8006314:	d1dc      	bne.n	80062d0 <xTaskResumeAll+0x48>
				if( pxTCB != NULL )
 8006316:	b10c      	cbz	r4, 800631c <xTaskResumeAll+0x94>
					prvResetNextTaskUnblockTime();
 8006318:	f7ff fdda 	bl	8005ed0 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800631c:	4d13      	ldr	r5, [pc, #76]	@ (800636c <xTaskResumeAll+0xe4>)
 800631e:	682c      	ldr	r4, [r5, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8006320:	b144      	cbz	r4, 8006334 <xTaskResumeAll+0xac>
								xYieldPending = pdTRUE;
 8006322:	4e11      	ldr	r6, [pc, #68]	@ (8006368 <xTaskResumeAll+0xe0>)
 8006324:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 8006326:	f7ff ff17 	bl	8006158 <xTaskIncrementTick>
 800632a:	b100      	cbz	r0, 800632e <xTaskResumeAll+0xa6>
								xYieldPending = pdTRUE;
 800632c:	6037      	str	r7, [r6, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800632e:	3c01      	subs	r4, #1
 8006330:	d1f9      	bne.n	8006326 <xTaskResumeAll+0x9e>
						uxPendedTicks = 0;
 8006332:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 8006334:	4b0c      	ldr	r3, [pc, #48]	@ (8006368 <xTaskResumeAll+0xe0>)
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	2b00      	cmp	r3, #0
 800633a:	d0ba      	beq.n	80062b2 <xTaskResumeAll+0x2a>
					taskYIELD_IF_USING_PREEMPTION();
 800633c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8006340:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006344:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8006348:	f3bf 8f4f 	dsb	sy
 800634c:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8006350:	2401      	movs	r4, #1
 8006352:	e7af      	b.n	80062b4 <xTaskResumeAll+0x2c>
 8006354:	200024bc 	.word	0x200024bc
 8006358:	200024e0 	.word	0x200024e0
 800635c:	20002510 	.word	0x20002510
 8006360:	200024d8 	.word	0x200024d8
 8006364:	200025e0 	.word	0x200025e0
 8006368:	200024cc 	.word	0x200024cc
 800636c:	200024d0 	.word	0x200024d0
 8006370:	20002554 	.word	0x20002554

08006374 <vTaskDelay>:
	{
 8006374:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006376:	b950      	cbnz	r0, 800638e <vTaskDelay+0x1a>
			portYIELD_WITHIN_API();
 8006378:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800637c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006380:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8006384:	f3bf 8f4f 	dsb	sy
 8006388:	f3bf 8f6f 	isb	sy
	}
 800638c:	bd08      	pop	{r3, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 800638e:	4b0a      	ldr	r3, [pc, #40]	@ (80063b8 <vTaskDelay+0x44>)
 8006390:	6819      	ldr	r1, [r3, #0]
 8006392:	b141      	cbz	r1, 80063a6 <vTaskDelay+0x32>
 8006394:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006398:	f383 8811 	msr	BASEPRI, r3
 800639c:	f3bf 8f6f 	isb	sy
 80063a0:	f3bf 8f4f 	dsb	sy
 80063a4:	e7fe      	b.n	80063a4 <vTaskDelay+0x30>
			vTaskSuspendAll();
 80063a6:	f7ff fecf 	bl	8006148 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80063aa:	f7ff fd4d 	bl	8005e48 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 80063ae:	f7ff ff6b 	bl	8006288 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 80063b2:	2800      	cmp	r0, #0
 80063b4:	d0e0      	beq.n	8006378 <vTaskDelay+0x4>
 80063b6:	e7e9      	b.n	800638c <vTaskDelay+0x18>
 80063b8:	200024bc 	.word	0x200024bc

080063bc <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80063bc:	4b17      	ldr	r3, [pc, #92]	@ (800641c <vTaskSwitchContext+0x60>)
 80063be:	681a      	ldr	r2, [r3, #0]
 80063c0:	4b17      	ldr	r3, [pc, #92]	@ (8006420 <vTaskSwitchContext+0x64>)
{
 80063c2:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80063c4:	b112      	cbz	r2, 80063cc <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 80063c6:	2201      	movs	r2, #1
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80063c8:	601a      	str	r2, [r3, #0]
}
 80063ca:	bd10      	pop	{r4, pc}
		xYieldPending = pdFALSE;
 80063cc:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80063ce:	4b15      	ldr	r3, [pc, #84]	@ (8006424 <vTaskSwitchContext+0x68>)
 80063d0:	681a      	ldr	r2, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80063d2:	fab2 f282 	clz	r2, r2
 80063d6:	b2d2      	uxtb	r2, r2
 80063d8:	f1c2 021f 	rsb	r2, r2, #31
 80063dc:	2314      	movs	r3, #20
 80063de:	4912      	ldr	r1, [pc, #72]	@ (8006428 <vTaskSwitchContext+0x6c>)
 80063e0:	4353      	muls	r3, r2
 80063e2:	18c8      	adds	r0, r1, r3
 80063e4:	58cc      	ldr	r4, [r1, r3]
 80063e6:	b944      	cbnz	r4, 80063fa <vTaskSwitchContext+0x3e>
	__asm volatile
 80063e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063ec:	f383 8811 	msr	BASEPRI, r3
 80063f0:	f3bf 8f6f 	isb	sy
 80063f4:	f3bf 8f4f 	dsb	sy
 80063f8:	e7fe      	b.n	80063f8 <vTaskSwitchContext+0x3c>
 80063fa:	6844      	ldr	r4, [r0, #4]
 80063fc:	3308      	adds	r3, #8
 80063fe:	6864      	ldr	r4, [r4, #4]
 8006400:	6044      	str	r4, [r0, #4]
 8006402:	440b      	add	r3, r1
 8006404:	429c      	cmp	r4, r3
 8006406:	bf04      	itt	eq
 8006408:	6863      	ldreq	r3, [r4, #4]
 800640a:	6043      	streq	r3, [r0, #4]
 800640c:	2314      	movs	r3, #20
 800640e:	fb03 1102 	mla	r1, r3, r2, r1
 8006412:	684b      	ldr	r3, [r1, #4]
 8006414:	68da      	ldr	r2, [r3, #12]
 8006416:	4b05      	ldr	r3, [pc, #20]	@ (800642c <vTaskSwitchContext+0x70>)
 8006418:	e7d6      	b.n	80063c8 <vTaskSwitchContext+0xc>
 800641a:	bf00      	nop
 800641c:	200024bc 	.word	0x200024bc
 8006420:	200024cc 	.word	0x200024cc
 8006424:	200024d8 	.word	0x200024d8
 8006428:	20002554 	.word	0x20002554
 800642c:	200025e0 	.word	0x200025e0

08006430 <vTaskPlaceOnEventList>:
{
 8006430:	b510      	push	{r4, lr}
 8006432:	460c      	mov	r4, r1
	configASSERT( pxEventList );
 8006434:	b940      	cbnz	r0, 8006448 <vTaskPlaceOnEventList+0x18>
 8006436:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800643a:	f383 8811 	msr	BASEPRI, r3
 800643e:	f3bf 8f6f 	isb	sy
 8006442:	f3bf 8f4f 	dsb	sy
 8006446:	e7fe      	b.n	8006446 <vTaskPlaceOnEventList+0x16>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006448:	4b05      	ldr	r3, [pc, #20]	@ (8006460 <vTaskPlaceOnEventList+0x30>)
 800644a:	6819      	ldr	r1, [r3, #0]
 800644c:	3118      	adds	r1, #24
 800644e:	f7ff f925 	bl	800569c <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006452:	4620      	mov	r0, r4
 8006454:	2101      	movs	r1, #1
}
 8006456:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800645a:	f7ff bcf5 	b.w	8005e48 <prvAddCurrentTaskToDelayedList>
 800645e:	bf00      	nop
 8006460:	200025e0 	.word	0x200025e0

08006464 <xTaskRemoveFromEventList>:
{
 8006464:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8006466:	68c3      	ldr	r3, [r0, #12]
 8006468:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 800646a:	b944      	cbnz	r4, 800647e <xTaskRemoveFromEventList+0x1a>
 800646c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006470:	f383 8811 	msr	BASEPRI, r3
 8006474:	f3bf 8f6f 	isb	sy
 8006478:	f3bf 8f4f 	dsb	sy
 800647c:	e7fe      	b.n	800647c <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800647e:	f104 0518 	add.w	r5, r4, #24
 8006482:	4628      	mov	r0, r5
 8006484:	f7ff f921 	bl	80056ca <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006488:	4b11      	ldr	r3, [pc, #68]	@ (80064d0 <xTaskRemoveFromEventList+0x6c>)
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	b9e3      	cbnz	r3, 80064c8 <xTaskRemoveFromEventList+0x64>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800648e:	1d25      	adds	r5, r4, #4
 8006490:	4628      	mov	r0, r5
 8006492:	f7ff f91a 	bl	80056ca <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006496:	490f      	ldr	r1, [pc, #60]	@ (80064d4 <xTaskRemoveFromEventList+0x70>)
 8006498:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800649a:	6808      	ldr	r0, [r1, #0]
 800649c:	2301      	movs	r3, #1
 800649e:	4093      	lsls	r3, r2
 80064a0:	4303      	orrs	r3, r0
 80064a2:	600b      	str	r3, [r1, #0]
 80064a4:	4b0c      	ldr	r3, [pc, #48]	@ (80064d8 <xTaskRemoveFromEventList+0x74>)
 80064a6:	2014      	movs	r0, #20
 80064a8:	4629      	mov	r1, r5
 80064aa:	fb00 3002 	mla	r0, r0, r2, r3
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80064ae:	f7ff f8ea 	bl	8005686 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80064b2:	4b0a      	ldr	r3, [pc, #40]	@ (80064dc <xTaskRemoveFromEventList+0x78>)
 80064b4:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064ba:	429a      	cmp	r2, r3
		xYieldPending = pdTRUE;
 80064bc:	bf83      	ittte	hi
 80064be:	4b08      	ldrhi	r3, [pc, #32]	@ (80064e0 <xTaskRemoveFromEventList+0x7c>)
 80064c0:	2001      	movhi	r0, #1
 80064c2:	6018      	strhi	r0, [r3, #0]
		xReturn = pdFALSE;
 80064c4:	2000      	movls	r0, #0
}
 80064c6:	bd38      	pop	{r3, r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80064c8:	4806      	ldr	r0, [pc, #24]	@ (80064e4 <xTaskRemoveFromEventList+0x80>)
 80064ca:	4629      	mov	r1, r5
 80064cc:	e7ef      	b.n	80064ae <xTaskRemoveFromEventList+0x4a>
 80064ce:	bf00      	nop
 80064d0:	200024bc 	.word	0x200024bc
 80064d4:	200024d8 	.word	0x200024d8
 80064d8:	20002554 	.word	0x20002554
 80064dc:	200025e0 	.word	0x200025e0
 80064e0:	200024cc 	.word	0x200024cc
 80064e4:	20002510 	.word	0x20002510

080064e8 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80064e8:	4b03      	ldr	r3, [pc, #12]	@ (80064f8 <vTaskInternalSetTimeOutState+0x10>)
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80064ee:	4b03      	ldr	r3, [pc, #12]	@ (80064fc <vTaskInternalSetTimeOutState+0x14>)
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	6043      	str	r3, [r0, #4]
}
 80064f4:	4770      	bx	lr
 80064f6:	bf00      	nop
 80064f8:	200024c8 	.word	0x200024c8
 80064fc:	200024dc 	.word	0x200024dc

08006500 <xTaskCheckForTimeOut>:
{
 8006500:	b570      	push	{r4, r5, r6, lr}
 8006502:	460c      	mov	r4, r1
	configASSERT( pxTimeOut );
 8006504:	4605      	mov	r5, r0
 8006506:	b940      	cbnz	r0, 800651a <xTaskCheckForTimeOut+0x1a>
 8006508:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800650c:	f383 8811 	msr	BASEPRI, r3
 8006510:	f3bf 8f6f 	isb	sy
 8006514:	f3bf 8f4f 	dsb	sy
 8006518:	e7fe      	b.n	8006518 <xTaskCheckForTimeOut+0x18>
	configASSERT( pxTicksToWait );
 800651a:	b941      	cbnz	r1, 800652e <xTaskCheckForTimeOut+0x2e>
 800651c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006520:	f383 8811 	msr	BASEPRI, r3
 8006524:	f3bf 8f6f 	isb	sy
 8006528:	f3bf 8f4f 	dsb	sy
 800652c:	e7fe      	b.n	800652c <xTaskCheckForTimeOut+0x2c>
	taskENTER_CRITICAL();
 800652e:	f000 f8f1 	bl	8006714 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 8006532:	4b0f      	ldr	r3, [pc, #60]	@ (8006570 <xTaskCheckForTimeOut+0x70>)
 8006534:	6819      	ldr	r1, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 8006536:	6823      	ldr	r3, [r4, #0]
 8006538:	1c5a      	adds	r2, r3, #1
 800653a:	d010      	beq.n	800655e <xTaskCheckForTimeOut+0x5e>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800653c:	480d      	ldr	r0, [pc, #52]	@ (8006574 <xTaskCheckForTimeOut+0x74>)
 800653e:	682e      	ldr	r6, [r5, #0]
 8006540:	6800      	ldr	r0, [r0, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006542:	686a      	ldr	r2, [r5, #4]
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006544:	4286      	cmp	r6, r0
 8006546:	d001      	beq.n	800654c <xTaskCheckForTimeOut+0x4c>
 8006548:	428a      	cmp	r2, r1
 800654a:	d90f      	bls.n	800656c <xTaskCheckForTimeOut+0x6c>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800654c:	1a88      	subs	r0, r1, r2
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800654e:	4283      	cmp	r3, r0
 8006550:	d90a      	bls.n	8006568 <xTaskCheckForTimeOut+0x68>
			*pxTicksToWait -= xElapsedTime;
 8006552:	1a5b      	subs	r3, r3, r1
 8006554:	4413      	add	r3, r2
 8006556:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006558:	4628      	mov	r0, r5
 800655a:	f7ff ffc5 	bl	80064e8 <vTaskInternalSetTimeOutState>
				xReturn = pdFALSE;
 800655e:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8006560:	f000 f8f8 	bl	8006754 <vPortExitCritical>
}
 8006564:	4620      	mov	r0, r4
 8006566:	bd70      	pop	{r4, r5, r6, pc}
			*pxTicksToWait = 0;
 8006568:	2300      	movs	r3, #0
 800656a:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 800656c:	2401      	movs	r4, #1
 800656e:	e7f7      	b.n	8006560 <xTaskCheckForTimeOut+0x60>
 8006570:	200024dc 	.word	0x200024dc
 8006574:	200024c8 	.word	0x200024c8

08006578 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8006578:	4b01      	ldr	r3, [pc, #4]	@ (8006580 <vTaskMissedYield+0x8>)
 800657a:	2201      	movs	r2, #1
 800657c:	601a      	str	r2, [r3, #0]
}
 800657e:	4770      	bx	lr
 8006580:	200024cc 	.word	0x200024cc

08006584 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8006584:	4b05      	ldr	r3, [pc, #20]	@ (800659c <xTaskGetSchedulerState+0x18>)
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	b133      	cbz	r3, 8006598 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800658a:	4b05      	ldr	r3, [pc, #20]	@ (80065a0 <xTaskGetSchedulerState+0x1c>)
 800658c:	6818      	ldr	r0, [r3, #0]
 800658e:	fab0 f080 	clz	r0, r0
 8006592:	0940      	lsrs	r0, r0, #5
 8006594:	0040      	lsls	r0, r0, #1
 8006596:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006598:	2001      	movs	r0, #1
	}
 800659a:	4770      	bx	lr
 800659c:	200024d4 	.word	0x200024d4
 80065a0:	200024bc 	.word	0x200024bc

080065a4 <xTaskPriorityDisinherit>:
	{
 80065a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if( pxMutexHolder != NULL )
 80065a6:	4604      	mov	r4, r0
 80065a8:	b908      	cbnz	r0, 80065ae <xTaskPriorityDisinherit+0xa>
	BaseType_t xReturn = pdFALSE;
 80065aa:	2000      	movs	r0, #0
	}
 80065ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			configASSERT( pxTCB == pxCurrentTCB );
 80065ae:	4b22      	ldr	r3, [pc, #136]	@ (8006638 <xTaskPriorityDisinherit+0x94>)
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	4283      	cmp	r3, r0
 80065b4:	d008      	beq.n	80065c8 <xTaskPriorityDisinherit+0x24>
 80065b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065ba:	f383 8811 	msr	BASEPRI, r3
 80065be:	f3bf 8f6f 	isb	sy
 80065c2:	f3bf 8f4f 	dsb	sy
 80065c6:	e7fe      	b.n	80065c6 <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 80065c8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80065ca:	b943      	cbnz	r3, 80065de <xTaskPriorityDisinherit+0x3a>
 80065cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065d0:	f383 8811 	msr	BASEPRI, r3
 80065d4:	f3bf 8f6f 	isb	sy
 80065d8:	f3bf 8f4f 	dsb	sy
 80065dc:	e7fe      	b.n	80065dc <xTaskPriorityDisinherit+0x38>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80065de:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 80065e0:	6c42      	ldr	r2, [r0, #68]	@ 0x44
			( pxTCB->uxMutexesHeld )--;
 80065e2:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80065e4:	4291      	cmp	r1, r2
			( pxTCB->uxMutexesHeld )--;
 80065e6:	6483      	str	r3, [r0, #72]	@ 0x48
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80065e8:	d0df      	beq.n	80065aa <xTaskPriorityDisinherit+0x6>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d1dd      	bne.n	80065aa <xTaskPriorityDisinherit+0x6>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80065ee:	1d06      	adds	r6, r0, #4
 80065f0:	4630      	mov	r0, r6
 80065f2:	f7ff f86a 	bl	80056ca <uxListRemove>
 80065f6:	4f11      	ldr	r7, [pc, #68]	@ (800663c <xTaskPriorityDisinherit+0x98>)
 80065f8:	4a11      	ldr	r2, [pc, #68]	@ (8006640 <xTaskPriorityDisinherit+0x9c>)
 80065fa:	b950      	cbnz	r0, 8006612 <xTaskPriorityDisinherit+0x6e>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80065fc:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80065fe:	2314      	movs	r3, #20
 8006600:	434b      	muls	r3, r1
 8006602:	58fb      	ldr	r3, [r7, r3]
 8006604:	b92b      	cbnz	r3, 8006612 <xTaskPriorityDisinherit+0x6e>
 8006606:	6813      	ldr	r3, [r2, #0]
 8006608:	2501      	movs	r5, #1
 800660a:	408d      	lsls	r5, r1
 800660c:	ea23 0305 	bic.w	r3, r3, r5
 8006610:	6013      	str	r3, [r2, #0]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006612:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8006614:	62e3      	str	r3, [r4, #44]	@ 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006616:	f1c3 0107 	rsb	r1, r3, #7
 800661a:	61a1      	str	r1, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 800661c:	6811      	ldr	r1, [r2, #0]
 800661e:	2401      	movs	r4, #1
 8006620:	fa04 f503 	lsl.w	r5, r4, r3
 8006624:	2014      	movs	r0, #20
 8006626:	430d      	orrs	r5, r1
 8006628:	fb00 7003 	mla	r0, r0, r3, r7
 800662c:	4631      	mov	r1, r6
 800662e:	6015      	str	r5, [r2, #0]
 8006630:	f7ff f829 	bl	8005686 <vListInsertEnd>
					xReturn = pdTRUE;
 8006634:	4620      	mov	r0, r4
		return xReturn;
 8006636:	e7b9      	b.n	80065ac <xTaskPriorityDisinherit+0x8>
 8006638:	200025e0 	.word	0x200025e0
 800663c:	20002554 	.word	0x20002554
 8006640:	200024d8 	.word	0x200024d8

08006644 <prvPortStartFirstTask>:
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
<<<<<<< HEAD
 80088f0:	4808      	ldr	r0, [pc, #32]	@ (8008914 <prvPortStartFirstTask+0x24>)
 80088f2:	6800      	ldr	r0, [r0, #0]
 80088f4:	6800      	ldr	r0, [r0, #0]
 80088f6:	f380 8808 	msr	MSP, r0
 80088fa:	f04f 0000 	mov.w	r0, #0
 80088fe:	f380 8814 	msr	CONTROL, r0
 8008902:	b662      	cpsie	i
 8008904:	b661      	cpsie	f
 8008906:	f3bf 8f4f 	dsb	sy
 800890a:	f3bf 8f6f 	isb	sy
 800890e:	df00      	svc	0
 8008910:	bf00      	nop
=======
 8006644:	4808      	ldr	r0, [pc, #32]	@ (8006668 <prvPortStartFirstTask+0x24>)
 8006646:	6800      	ldr	r0, [r0, #0]
 8006648:	6800      	ldr	r0, [r0, #0]
 800664a:	f380 8808 	msr	MSP, r0
 800664e:	f04f 0000 	mov.w	r0, #0
 8006652:	f380 8814 	msr	CONTROL, r0
 8006656:	b662      	cpsie	i
 8006658:	b661      	cpsie	f
 800665a:	f3bf 8f4f 	dsb	sy
 800665e:	f3bf 8f6f 	isb	sy
 8006662:	df00      	svc	0
 8006664:	bf00      	nop
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
<<<<<<< HEAD
 8008912:	0000      	.short	0x0000
 8008914:	e000ed08 	.word	0xe000ed08

08008918 <vPortEnableVFP>:
=======
 8006666:	0000      	.short	0x0000
 8006668:	e000ed08 	.word	0xe000ed08

0800666c <vPortEnableVFP>:
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
<<<<<<< HEAD
 8008918:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8008928 <vPortEnableVFP+0x10>
 800891c:	6801      	ldr	r1, [r0, #0]
 800891e:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8008922:	6001      	str	r1, [r0, #0]
 8008924:	4770      	bx	lr
=======
 800666c:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800667c <vPortEnableVFP+0x10>
 8006670:	6801      	ldr	r1, [r0, #0]
 8006672:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8006676:	6001      	str	r1, [r0, #0]
 8006678:	4770      	bx	lr
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
<<<<<<< HEAD
 8008926:	0000      	.short	0x0000
 8008928:	e000ed88 	.word	0xe000ed88

0800892c <prvTaskExitError>:
{
 800892c:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 800892e:	2300      	movs	r3, #0
 8008930:	9301      	str	r3, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
 8008932:	4b0d      	ldr	r3, [pc, #52]	@ (8008968 <prvTaskExitError+0x3c>)
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	3301      	adds	r3, #1
 8008938:	d008      	beq.n	800894c <prvTaskExitError+0x20>
 800893a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800893e:	f383 8811 	msr	BASEPRI, r3
 8008942:	f3bf 8f6f 	isb	sy
 8008946:	f3bf 8f4f 	dsb	sy
 800894a:	e7fe      	b.n	800894a <prvTaskExitError+0x1e>
 800894c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008950:	f383 8811 	msr	BASEPRI, r3
 8008954:	f3bf 8f6f 	isb	sy
 8008958:	f3bf 8f4f 	dsb	sy
	while( ulDummy == 0 )
 800895c:	9b01      	ldr	r3, [sp, #4]
 800895e:	2b00      	cmp	r3, #0
 8008960:	d0fc      	beq.n	800895c <prvTaskExitError+0x30>
}
 8008962:	b002      	add	sp, #8
 8008964:	4770      	bx	lr
 8008966:	bf00      	nop
 8008968:	20000018 	.word	0x20000018

0800896c <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800896c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8008970:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008974:	4b07      	ldr	r3, [pc, #28]	@ (8008994 <pxPortInitialiseStack+0x28>)
 8008976:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800897a:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800897e:	f06f 0302 	mvn.w	r3, #2
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008982:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008986:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800898a:	f840 3c24 	str.w	r3, [r0, #-36]
}
 800898e:	3844      	subs	r0, #68	@ 0x44
 8008990:	4770      	bx	lr
 8008992:	bf00      	nop
 8008994:	0800892d 	.word	0x0800892d
	...

080089a0 <SVC_Handler>:
	__asm volatile (
 80089a0:	4b07      	ldr	r3, [pc, #28]	@ (80089c0 <pxCurrentTCBConst2>)
 80089a2:	6819      	ldr	r1, [r3, #0]
 80089a4:	6808      	ldr	r0, [r1, #0]
 80089a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089aa:	f380 8809 	msr	PSP, r0
 80089ae:	f3bf 8f6f 	isb	sy
 80089b2:	f04f 0000 	mov.w	r0, #0
 80089b6:	f380 8811 	msr	BASEPRI, r0
 80089ba:	4770      	bx	lr
 80089bc:	f3af 8000 	nop.w

080089c0 <pxCurrentTCBConst2>:
 80089c0:	200028f0 	.word	0x200028f0

080089c4 <vPortEnterCritical>:
 80089c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089c8:	f383 8811 	msr	BASEPRI, r3
 80089cc:	f3bf 8f6f 	isb	sy
 80089d0:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 80089d4:	4a0a      	ldr	r2, [pc, #40]	@ (8008a00 <vPortEnterCritical+0x3c>)
 80089d6:	6813      	ldr	r3, [r2, #0]
 80089d8:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 80089da:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 80089dc:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 80089de:	d10e      	bne.n	80089fe <vPortEnterCritical+0x3a>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80089e0:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80089e4:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	@ 0xd04
 80089e8:	b2db      	uxtb	r3, r3
 80089ea:	b143      	cbz	r3, 80089fe <vPortEnterCritical+0x3a>
 80089ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089f0:	f383 8811 	msr	BASEPRI, r3
 80089f4:	f3bf 8f6f 	isb	sy
 80089f8:	f3bf 8f4f 	dsb	sy
 80089fc:	e7fe      	b.n	80089fc <vPortEnterCritical+0x38>
}
 80089fe:	4770      	bx	lr
 8008a00:	20000018 	.word	0x20000018

08008a04 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8008a04:	4a08      	ldr	r2, [pc, #32]	@ (8008a28 <vPortExitCritical+0x24>)
 8008a06:	6813      	ldr	r3, [r2, #0]
 8008a08:	b943      	cbnz	r3, 8008a1c <vPortExitCritical+0x18>
 8008a0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a0e:	f383 8811 	msr	BASEPRI, r3
 8008a12:	f3bf 8f6f 	isb	sy
 8008a16:	f3bf 8f4f 	dsb	sy
 8008a1a:	e7fe      	b.n	8008a1a <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8008a1c:	3b01      	subs	r3, #1
 8008a1e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008a20:	b90b      	cbnz	r3, 8008a26 <vPortExitCritical+0x22>
	__asm volatile
 8008a22:	f383 8811 	msr	BASEPRI, r3
}
 8008a26:	4770      	bx	lr
 8008a28:	20000018 	.word	0x20000018
 8008a2c:	00000000 	.word	0x00000000

08008a30 <PendSV_Handler>:
	__asm volatile
 8008a30:	f3ef 8009 	mrs	r0, PSP
 8008a34:	f3bf 8f6f 	isb	sy
 8008a38:	4b15      	ldr	r3, [pc, #84]	@ (8008a90 <pxCurrentTCBConst>)
 8008a3a:	681a      	ldr	r2, [r3, #0]
 8008a3c:	f01e 0f10 	tst.w	lr, #16
 8008a40:	bf08      	it	eq
 8008a42:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008a46:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a4a:	6010      	str	r0, [r2, #0]
 8008a4c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008a50:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8008a54:	f380 8811 	msr	BASEPRI, r0
 8008a58:	f3bf 8f4f 	dsb	sy
 8008a5c:	f3bf 8f6f 	isb	sy
 8008a60:	f7ff fe02 	bl	8008668 <vTaskSwitchContext>
 8008a64:	f04f 0000 	mov.w	r0, #0
 8008a68:	f380 8811 	msr	BASEPRI, r0
 8008a6c:	bc09      	pop	{r0, r3}
 8008a6e:	6819      	ldr	r1, [r3, #0]
 8008a70:	6808      	ldr	r0, [r1, #0]
 8008a72:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a76:	f01e 0f10 	tst.w	lr, #16
 8008a7a:	bf08      	it	eq
 8008a7c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008a80:	f380 8809 	msr	PSP, r0
 8008a84:	f3bf 8f6f 	isb	sy
 8008a88:	4770      	bx	lr
 8008a8a:	bf00      	nop
 8008a8c:	f3af 8000 	nop.w

08008a90 <pxCurrentTCBConst>:
 8008a90:	200028f0 	.word	0x200028f0

08008a94 <SysTick_Handler>:
{
 8008a94:	b508      	push	{r3, lr}
	__asm volatile
 8008a96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a9a:	f383 8811 	msr	BASEPRI, r3
 8008a9e:	f3bf 8f6f 	isb	sy
 8008aa2:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 8008aa6:	f7ff fcad 	bl	8008404 <xTaskIncrementTick>
 8008aaa:	b128      	cbz	r0, 8008ab8 <SysTick_Handler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008aac:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8008ab0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008ab4:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
	__asm volatile
 8008ab8:	2300      	movs	r3, #0
 8008aba:	f383 8811 	msr	BASEPRI, r3
}
 8008abe:	bd08      	pop	{r3, pc}

08008ac0 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008ac0:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
 8008ac4:	2300      	movs	r3, #0
 8008ac6:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008ac8:	6193      	str	r3, [r2, #24]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008aca:	4b05      	ldr	r3, [pc, #20]	@ (8008ae0 <vPortSetupTimerInterrupt+0x20>)
 8008acc:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	fbb3 f3f1 	udiv	r3, r3, r1
 8008ad6:	3b01      	subs	r3, #1
 8008ad8:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008ada:	2307      	movs	r3, #7
 8008adc:	6113      	str	r3, [r2, #16]
}
 8008ade:	4770      	bx	lr
 8008ae0:	2000000c 	.word	0x2000000c

08008ae4 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008ae4:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
{
 8008ae8:	b537      	push	{r0, r1, r2, r4, r5, lr}
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008aea:	f8d3 1d00 	ldr.w	r1, [r3, #3328]	@ 0xd00
 8008aee:	4a38      	ldr	r2, [pc, #224]	@ (8008bd0 <xPortStartScheduler+0xec>)
 8008af0:	4291      	cmp	r1, r2
 8008af2:	d108      	bne.n	8008b06 <xPortStartScheduler+0x22>
	__asm volatile
 8008af4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008af8:	f383 8811 	msr	BASEPRI, r3
 8008afc:	f3bf 8f6f 	isb	sy
 8008b00:	f3bf 8f4f 	dsb	sy
 8008b04:	e7fe      	b.n	8008b04 <xPortStartScheduler+0x20>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008b06:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 8008b0a:	4b32      	ldr	r3, [pc, #200]	@ (8008bd4 <xPortStartScheduler+0xf0>)
 8008b0c:	429a      	cmp	r2, r3
 8008b0e:	d108      	bne.n	8008b22 <xPortStartScheduler+0x3e>
 8008b10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b14:	f383 8811 	msr	BASEPRI, r3
 8008b18:	f3bf 8f6f 	isb	sy
 8008b1c:	f3bf 8f4f 	dsb	sy
 8008b20:	e7fe      	b.n	8008b20 <xPortStartScheduler+0x3c>
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008b22:	4b2d      	ldr	r3, [pc, #180]	@ (8008bd8 <xPortStartScheduler+0xf4>)
 8008b24:	781a      	ldrb	r2, [r3, #0]
 8008b26:	b2d2      	uxtb	r2, r2
 8008b28:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008b2a:	22ff      	movs	r2, #255	@ 0xff
 8008b2c:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008b2e:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008b30:	4a2a      	ldr	r2, [pc, #168]	@ (8008bdc <xPortStartScheduler+0xf8>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008b32:	b2db      	uxtb	r3, r3
 8008b34:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008b38:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8008b3c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8008b40:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008b42:	4a27      	ldr	r2, [pc, #156]	@ (8008be0 <xPortStartScheduler+0xfc>)
 8008b44:	2307      	movs	r3, #7
 8008b46:	6013      	str	r3, [r2, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008b48:	f89d 1003 	ldrb.w	r1, [sp, #3]
			ulMaxPRIGROUPValue--;
 8008b4c:	6813      	ldr	r3, [r2, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008b4e:	0609      	lsls	r1, r1, #24
 8008b50:	d40a      	bmi.n	8008b68 <xPortStartScheduler+0x84>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008b52:	2b03      	cmp	r3, #3
 8008b54:	d011      	beq.n	8008b7a <xPortStartScheduler+0x96>
 8008b56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b5a:	f383 8811 	msr	BASEPRI, r3
 8008b5e:	f3bf 8f6f 	isb	sy
 8008b62:	f3bf 8f4f 	dsb	sy
 8008b66:	e7fe      	b.n	8008b66 <xPortStartScheduler+0x82>
			ulMaxPRIGROUPValue--;
 8008b68:	3b01      	subs	r3, #1
 8008b6a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008b6c:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8008b70:	005b      	lsls	r3, r3, #1
 8008b72:	b2db      	uxtb	r3, r3
 8008b74:	f88d 3003 	strb.w	r3, [sp, #3]
 8008b78:	e7e6      	b.n	8008b48 <xPortStartScheduler+0x64>
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008b7a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8008b7e:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008b80:	9b01      	ldr	r3, [sp, #4]
 8008b82:	4a15      	ldr	r2, [pc, #84]	@ (8008bd8 <xPortStartScheduler+0xf4>)
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008b84:	f04f 24e0 	mov.w	r4, #3758153728	@ 0xe000e000
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008b88:	b2db      	uxtb	r3, r3
 8008b8a:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008b8c:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 8008b90:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8008b94:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008b98:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 8008b9c:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8008ba0:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	vPortSetupTimerInterrupt();
 8008ba4:	f7ff ff8c 	bl	8008ac0 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8008ba8:	4b0e      	ldr	r3, [pc, #56]	@ (8008be4 <xPortStartScheduler+0x100>)
 8008baa:	2500      	movs	r5, #0
 8008bac:	601d      	str	r5, [r3, #0]
	vPortEnableVFP();
 8008bae:	f7ff feb3 	bl	8008918 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008bb2:	f8d4 3f34 	ldr.w	r3, [r4, #3892]	@ 0xf34
 8008bb6:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8008bba:	f8c4 3f34 	str.w	r3, [r4, #3892]	@ 0xf34
	prvPortStartFirstTask();
 8008bbe:	f7ff fe97 	bl	80088f0 <prvPortStartFirstTask>
	vTaskSwitchContext();
 8008bc2:	f7ff fd51 	bl	8008668 <vTaskSwitchContext>
	prvTaskExitError();
 8008bc6:	f7ff feb1 	bl	800892c <prvTaskExitError>
}
 8008bca:	4628      	mov	r0, r5
 8008bcc:	b003      	add	sp, #12
 8008bce:	bd30      	pop	{r4, r5, pc}
 8008bd0:	410fc271 	.word	0x410fc271
 8008bd4:	410fc270 	.word	0x410fc270
 8008bd8:	e000e400 	.word	0xe000e400
 8008bdc:	200028f8 	.word	0x200028f8
 8008be0:	200028f4 	.word	0x200028f4
 8008be4:	20000018 	.word	0x20000018

08008be8 <vPortValidateInterruptPriority>:
=======
 800667a:	0000      	.short	0x0000
 800667c:	e000ed88 	.word	0xe000ed88

08006680 <prvTaskExitError>:
{
 8006680:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 8006682:	2300      	movs	r3, #0
 8006684:	9301      	str	r3, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
 8006686:	4b0d      	ldr	r3, [pc, #52]	@ (80066bc <prvTaskExitError+0x3c>)
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	3301      	adds	r3, #1
 800668c:	d008      	beq.n	80066a0 <prvTaskExitError+0x20>
 800668e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006692:	f383 8811 	msr	BASEPRI, r3
 8006696:	f3bf 8f6f 	isb	sy
 800669a:	f3bf 8f4f 	dsb	sy
 800669e:	e7fe      	b.n	800669e <prvTaskExitError+0x1e>
 80066a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066a4:	f383 8811 	msr	BASEPRI, r3
 80066a8:	f3bf 8f6f 	isb	sy
 80066ac:	f3bf 8f4f 	dsb	sy
	while( ulDummy == 0 )
 80066b0:	9b01      	ldr	r3, [sp, #4]
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d0fc      	beq.n	80066b0 <prvTaskExitError+0x30>
}
 80066b6:	b002      	add	sp, #8
 80066b8:	4770      	bx	lr
 80066ba:	bf00      	nop
 80066bc:	20000018 	.word	0x20000018

080066c0 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80066c0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80066c4:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80066c8:	4b07      	ldr	r3, [pc, #28]	@ (80066e8 <pxPortInitialiseStack+0x28>)
 80066ca:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80066ce:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80066d2:	f06f 0302 	mvn.w	r3, #2
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80066d6:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80066da:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80066de:	f840 3c24 	str.w	r3, [r0, #-36]
}
 80066e2:	3844      	subs	r0, #68	@ 0x44
 80066e4:	4770      	bx	lr
 80066e6:	bf00      	nop
 80066e8:	08006681 	.word	0x08006681
 80066ec:	00000000 	.word	0x00000000

080066f0 <SVC_Handler>:
	__asm volatile (
 80066f0:	4b07      	ldr	r3, [pc, #28]	@ (8006710 <pxCurrentTCBConst2>)
 80066f2:	6819      	ldr	r1, [r3, #0]
 80066f4:	6808      	ldr	r0, [r1, #0]
 80066f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066fa:	f380 8809 	msr	PSP, r0
 80066fe:	f3bf 8f6f 	isb	sy
 8006702:	f04f 0000 	mov.w	r0, #0
 8006706:	f380 8811 	msr	BASEPRI, r0
 800670a:	4770      	bx	lr
 800670c:	f3af 8000 	nop.w

08006710 <pxCurrentTCBConst2>:
 8006710:	200025e0 	.word	0x200025e0

08006714 <vPortEnterCritical>:
 8006714:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006718:	f383 8811 	msr	BASEPRI, r3
 800671c:	f3bf 8f6f 	isb	sy
 8006720:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 8006724:	4a0a      	ldr	r2, [pc, #40]	@ (8006750 <vPortEnterCritical+0x3c>)
 8006726:	6813      	ldr	r3, [r2, #0]
 8006728:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 800672a:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 800672c:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 800672e:	d10e      	bne.n	800674e <vPortEnterCritical+0x3a>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006730:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8006734:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	@ 0xd04
 8006738:	b2db      	uxtb	r3, r3
 800673a:	b143      	cbz	r3, 800674e <vPortEnterCritical+0x3a>
 800673c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006740:	f383 8811 	msr	BASEPRI, r3
 8006744:	f3bf 8f6f 	isb	sy
 8006748:	f3bf 8f4f 	dsb	sy
 800674c:	e7fe      	b.n	800674c <vPortEnterCritical+0x38>
}
 800674e:	4770      	bx	lr
 8006750:	20000018 	.word	0x20000018

08006754 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8006754:	4a08      	ldr	r2, [pc, #32]	@ (8006778 <vPortExitCritical+0x24>)
 8006756:	6813      	ldr	r3, [r2, #0]
 8006758:	b943      	cbnz	r3, 800676c <vPortExitCritical+0x18>
 800675a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800675e:	f383 8811 	msr	BASEPRI, r3
 8006762:	f3bf 8f6f 	isb	sy
 8006766:	f3bf 8f4f 	dsb	sy
 800676a:	e7fe      	b.n	800676a <vPortExitCritical+0x16>
	uxCriticalNesting--;
 800676c:	3b01      	subs	r3, #1
 800676e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006770:	b90b      	cbnz	r3, 8006776 <vPortExitCritical+0x22>
	__asm volatile
 8006772:	f383 8811 	msr	BASEPRI, r3
}
 8006776:	4770      	bx	lr
 8006778:	20000018 	.word	0x20000018
 800677c:	00000000 	.word	0x00000000

08006780 <PendSV_Handler>:
	__asm volatile
 8006780:	f3ef 8009 	mrs	r0, PSP
 8006784:	f3bf 8f6f 	isb	sy
 8006788:	4b15      	ldr	r3, [pc, #84]	@ (80067e0 <pxCurrentTCBConst>)
 800678a:	681a      	ldr	r2, [r3, #0]
 800678c:	f01e 0f10 	tst.w	lr, #16
 8006790:	bf08      	it	eq
 8006792:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006796:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800679a:	6010      	str	r0, [r2, #0]
 800679c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80067a0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80067a4:	f380 8811 	msr	BASEPRI, r0
 80067a8:	f3bf 8f4f 	dsb	sy
 80067ac:	f3bf 8f6f 	isb	sy
 80067b0:	f7ff fe04 	bl	80063bc <vTaskSwitchContext>
 80067b4:	f04f 0000 	mov.w	r0, #0
 80067b8:	f380 8811 	msr	BASEPRI, r0
 80067bc:	bc09      	pop	{r0, r3}
 80067be:	6819      	ldr	r1, [r3, #0]
 80067c0:	6808      	ldr	r0, [r1, #0]
 80067c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067c6:	f01e 0f10 	tst.w	lr, #16
 80067ca:	bf08      	it	eq
 80067cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80067d0:	f380 8809 	msr	PSP, r0
 80067d4:	f3bf 8f6f 	isb	sy
 80067d8:	4770      	bx	lr
 80067da:	bf00      	nop
 80067dc:	f3af 8000 	nop.w

080067e0 <pxCurrentTCBConst>:
 80067e0:	200025e0 	.word	0x200025e0

080067e4 <SysTick_Handler>:
{
 80067e4:	b508      	push	{r3, lr}
	__asm volatile
 80067e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067ea:	f383 8811 	msr	BASEPRI, r3
 80067ee:	f3bf 8f6f 	isb	sy
 80067f2:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 80067f6:	f7ff fcaf 	bl	8006158 <xTaskIncrementTick>
 80067fa:	b128      	cbz	r0, 8006808 <SysTick_Handler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80067fc:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8006800:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006804:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
	__asm volatile
 8006808:	2300      	movs	r3, #0
 800680a:	f383 8811 	msr	BASEPRI, r3
}
 800680e:	bd08      	pop	{r3, pc}

08006810 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006810:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
 8006814:	2300      	movs	r3, #0
 8006816:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006818:	6193      	str	r3, [r2, #24]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800681a:	4b05      	ldr	r3, [pc, #20]	@ (8006830 <vPortSetupTimerInterrupt+0x20>)
 800681c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	fbb3 f3f1 	udiv	r3, r3, r1
 8006826:	3b01      	subs	r3, #1
 8006828:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800682a:	2307      	movs	r3, #7
 800682c:	6113      	str	r3, [r2, #16]
}
 800682e:	4770      	bx	lr
 8006830:	2000000c 	.word	0x2000000c

08006834 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006834:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
{
 8006838:	b537      	push	{r0, r1, r2, r4, r5, lr}
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800683a:	f8d3 1d00 	ldr.w	r1, [r3, #3328]	@ 0xd00
 800683e:	4a38      	ldr	r2, [pc, #224]	@ (8006920 <xPortStartScheduler+0xec>)
 8006840:	4291      	cmp	r1, r2
 8006842:	d108      	bne.n	8006856 <xPortStartScheduler+0x22>
	__asm volatile
 8006844:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006848:	f383 8811 	msr	BASEPRI, r3
 800684c:	f3bf 8f6f 	isb	sy
 8006850:	f3bf 8f4f 	dsb	sy
 8006854:	e7fe      	b.n	8006854 <xPortStartScheduler+0x20>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006856:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 800685a:	4b32      	ldr	r3, [pc, #200]	@ (8006924 <xPortStartScheduler+0xf0>)
 800685c:	429a      	cmp	r2, r3
 800685e:	d108      	bne.n	8006872 <xPortStartScheduler+0x3e>
 8006860:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006864:	f383 8811 	msr	BASEPRI, r3
 8006868:	f3bf 8f6f 	isb	sy
 800686c:	f3bf 8f4f 	dsb	sy
 8006870:	e7fe      	b.n	8006870 <xPortStartScheduler+0x3c>
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006872:	4b2d      	ldr	r3, [pc, #180]	@ (8006928 <xPortStartScheduler+0xf4>)
 8006874:	781a      	ldrb	r2, [r3, #0]
 8006876:	b2d2      	uxtb	r2, r2
 8006878:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800687a:	22ff      	movs	r2, #255	@ 0xff
 800687c:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800687e:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006880:	4a2a      	ldr	r2, [pc, #168]	@ (800692c <xPortStartScheduler+0xf8>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006882:	b2db      	uxtb	r3, r3
 8006884:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006888:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800688c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8006890:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006892:	4a27      	ldr	r2, [pc, #156]	@ (8006930 <xPortStartScheduler+0xfc>)
 8006894:	2307      	movs	r3, #7
 8006896:	6013      	str	r3, [r2, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006898:	f89d 1003 	ldrb.w	r1, [sp, #3]
			ulMaxPRIGROUPValue--;
 800689c:	6813      	ldr	r3, [r2, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800689e:	0609      	lsls	r1, r1, #24
 80068a0:	d40a      	bmi.n	80068b8 <xPortStartScheduler+0x84>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80068a2:	2b03      	cmp	r3, #3
 80068a4:	d011      	beq.n	80068ca <xPortStartScheduler+0x96>
 80068a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068aa:	f383 8811 	msr	BASEPRI, r3
 80068ae:	f3bf 8f6f 	isb	sy
 80068b2:	f3bf 8f4f 	dsb	sy
 80068b6:	e7fe      	b.n	80068b6 <xPortStartScheduler+0x82>
			ulMaxPRIGROUPValue--;
 80068b8:	3b01      	subs	r3, #1
 80068ba:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80068bc:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80068c0:	005b      	lsls	r3, r3, #1
 80068c2:	b2db      	uxtb	r3, r3
 80068c4:	f88d 3003 	strb.w	r3, [sp, #3]
 80068c8:	e7e6      	b.n	8006898 <xPortStartScheduler+0x64>
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80068ca:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80068ce:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80068d0:	9b01      	ldr	r3, [sp, #4]
 80068d2:	4a15      	ldr	r2, [pc, #84]	@ (8006928 <xPortStartScheduler+0xf4>)
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80068d4:	f04f 24e0 	mov.w	r4, #3758153728	@ 0xe000e000
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80068d8:	b2db      	uxtb	r3, r3
 80068da:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80068dc:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 80068e0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80068e4:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80068e8:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 80068ec:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80068f0:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	vPortSetupTimerInterrupt();
 80068f4:	f7ff ff8c 	bl	8006810 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 80068f8:	4b0e      	ldr	r3, [pc, #56]	@ (8006934 <xPortStartScheduler+0x100>)
 80068fa:	2500      	movs	r5, #0
 80068fc:	601d      	str	r5, [r3, #0]
	vPortEnableVFP();
 80068fe:	f7ff feb5 	bl	800666c <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006902:	f8d4 3f34 	ldr.w	r3, [r4, #3892]	@ 0xf34
 8006906:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800690a:	f8c4 3f34 	str.w	r3, [r4, #3892]	@ 0xf34
	prvPortStartFirstTask();
 800690e:	f7ff fe99 	bl	8006644 <prvPortStartFirstTask>
	vTaskSwitchContext();
 8006912:	f7ff fd53 	bl	80063bc <vTaskSwitchContext>
	prvTaskExitError();
 8006916:	f7ff feb3 	bl	8006680 <prvTaskExitError>
}
 800691a:	4628      	mov	r0, r5
 800691c:	b003      	add	sp, #12
 800691e:	bd30      	pop	{r4, r5, pc}
 8006920:	410fc271 	.word	0x410fc271
 8006924:	410fc270 	.word	0x410fc270
 8006928:	e000e400 	.word	0xe000e400
 800692c:	200025e8 	.word	0x200025e8
 8006930:	200025e4 	.word	0x200025e4
 8006934:	20000018 	.word	0x20000018

08006938 <vPortValidateInterruptPriority>:
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
<<<<<<< HEAD
 8008be8:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008bec:	2b0f      	cmp	r3, #15
 8008bee:	d90e      	bls.n	8008c0e <vPortValidateInterruptPriority+0x26>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008bf0:	4a11      	ldr	r2, [pc, #68]	@ (8008c38 <vPortValidateInterruptPriority+0x50>)
 8008bf2:	5c9b      	ldrb	r3, [r3, r2]
=======
 8006938:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800693c:	2b0f      	cmp	r3, #15
 800693e:	d90e      	bls.n	800695e <vPortValidateInterruptPriority+0x26>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006940:	4a11      	ldr	r2, [pc, #68]	@ (8006988 <vPortValidateInterruptPriority+0x50>)
 8006942:	5c9b      	ldrb	r3, [r3, r2]
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
<<<<<<< HEAD
 8008bf4:	4a11      	ldr	r2, [pc, #68]	@ (8008c3c <vPortValidateInterruptPriority+0x54>)
 8008bf6:	7812      	ldrb	r2, [r2, #0]
 8008bf8:	429a      	cmp	r2, r3
 8008bfa:	d908      	bls.n	8008c0e <vPortValidateInterruptPriority+0x26>
 8008bfc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c00:	f383 8811 	msr	BASEPRI, r3
 8008c04:	f3bf 8f6f 	isb	sy
 8008c08:	f3bf 8f4f 	dsb	sy
 8008c0c:	e7fe      	b.n	8008c0c <vPortValidateInterruptPriority+0x24>
=======
 8006944:	4a11      	ldr	r2, [pc, #68]	@ (800698c <vPortValidateInterruptPriority+0x54>)
 8006946:	7812      	ldrb	r2, [r2, #0]
 8006948:	429a      	cmp	r2, r3
 800694a:	d908      	bls.n	800695e <vPortValidateInterruptPriority+0x26>
 800694c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006950:	f383 8811 	msr	BASEPRI, r3
 8006954:	f3bf 8f6f 	isb	sy
 8006958:	f3bf 8f4f 	dsb	sy
 800695c:	e7fe      	b.n	800695c <vPortValidateInterruptPriority+0x24>
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
<<<<<<< HEAD
 8008c0e:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8008c12:	4a0b      	ldr	r2, [pc, #44]	@ (8008c40 <vPortValidateInterruptPriority+0x58>)
 8008c14:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	@ 0xd0c
 8008c18:	6812      	ldr	r2, [r2, #0]
 8008c1a:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008c1e:	4293      	cmp	r3, r2
 8008c20:	d908      	bls.n	8008c34 <vPortValidateInterruptPriority+0x4c>
 8008c22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c26:	f383 8811 	msr	BASEPRI, r3
 8008c2a:	f3bf 8f6f 	isb	sy
 8008c2e:	f3bf 8f4f 	dsb	sy
 8008c32:	e7fe      	b.n	8008c32 <vPortValidateInterruptPriority+0x4a>
	}
 8008c34:	4770      	bx	lr
 8008c36:	bf00      	nop
 8008c38:	e000e3f0 	.word	0xe000e3f0
 8008c3c:	200028f8 	.word	0x200028f8
 8008c40:	200028f4 	.word	0x200028f4

08008c44 <prvInsertBlockIntoFreeList>:
=======
 800695e:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8006962:	4a0b      	ldr	r2, [pc, #44]	@ (8006990 <vPortValidateInterruptPriority+0x58>)
 8006964:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	@ 0xd0c
 8006968:	6812      	ldr	r2, [r2, #0]
 800696a:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800696e:	4293      	cmp	r3, r2
 8006970:	d908      	bls.n	8006984 <vPortValidateInterruptPriority+0x4c>
 8006972:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006976:	f383 8811 	msr	BASEPRI, r3
 800697a:	f3bf 8f6f 	isb	sy
 800697e:	f3bf 8f4f 	dsb	sy
 8006982:	e7fe      	b.n	8006982 <vPortValidateInterruptPriority+0x4a>
	}
 8006984:	4770      	bx	lr
 8006986:	bf00      	nop
 8006988:	e000e3f0 	.word	0xe000e3f0
 800698c:	200025e8 	.word	0x200025e8
 8006990:	200025e4 	.word	0x200025e4

08006994 <prvInsertBlockIntoFreeList>:
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
<<<<<<< HEAD
 8008c44:	b510      	push	{r4, lr}
=======
 8006994:	b510      	push	{r4, lr}
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
<<<<<<< HEAD
 8008c46:	4b10      	ldr	r3, [pc, #64]	@ (8008c88 <prvInsertBlockIntoFreeList+0x44>)
 8008c48:	461a      	mov	r2, r3
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	4283      	cmp	r3, r0
 8008c4e:	d3fb      	bcc.n	8008c48 <prvInsertBlockIntoFreeList+0x4>
=======
 8006996:	4b10      	ldr	r3, [pc, #64]	@ (80069d8 <prvInsertBlockIntoFreeList+0x44>)
 8006998:	461a      	mov	r2, r3
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	4283      	cmp	r3, r0
 800699e:	d3fb      	bcc.n	8006998 <prvInsertBlockIntoFreeList+0x4>
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
<<<<<<< HEAD
 8008c50:	6854      	ldr	r4, [r2, #4]
 8008c52:	1911      	adds	r1, r2, r4
 8008c54:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008c56:	bf01      	itttt	eq
 8008c58:	6841      	ldreq	r1, [r0, #4]
 8008c5a:	4610      	moveq	r0, r2
 8008c5c:	1909      	addeq	r1, r1, r4
 8008c5e:	6051      	streq	r1, [r2, #4]
=======
 80069a0:	6854      	ldr	r4, [r2, #4]
 80069a2:	1911      	adds	r1, r2, r4
 80069a4:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80069a6:	bf01      	itttt	eq
 80069a8:	6841      	ldreq	r1, [r0, #4]
 80069aa:	4610      	moveq	r0, r2
 80069ac:	1909      	addeq	r1, r1, r4
 80069ae:	6051      	streq	r1, [r2, #4]
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
<<<<<<< HEAD
 8008c60:	6844      	ldr	r4, [r0, #4]
 8008c62:	1901      	adds	r1, r0, r4
 8008c64:	428b      	cmp	r3, r1
 8008c66:	d10c      	bne.n	8008c82 <prvInsertBlockIntoFreeList+0x3e>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008c68:	4908      	ldr	r1, [pc, #32]	@ (8008c8c <prvInsertBlockIntoFreeList+0x48>)
 8008c6a:	6809      	ldr	r1, [r1, #0]
 8008c6c:	428b      	cmp	r3, r1
 8008c6e:	d003      	beq.n	8008c78 <prvInsertBlockIntoFreeList+0x34>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008c70:	6859      	ldr	r1, [r3, #4]
 8008c72:	4421      	add	r1, r4
 8008c74:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008c76:	6819      	ldr	r1, [r3, #0]
=======
 80069b0:	6844      	ldr	r4, [r0, #4]
 80069b2:	1901      	adds	r1, r0, r4
 80069b4:	428b      	cmp	r3, r1
 80069b6:	d10c      	bne.n	80069d2 <prvInsertBlockIntoFreeList+0x3e>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80069b8:	4908      	ldr	r1, [pc, #32]	@ (80069dc <prvInsertBlockIntoFreeList+0x48>)
 80069ba:	6809      	ldr	r1, [r1, #0]
 80069bc:	428b      	cmp	r3, r1
 80069be:	d003      	beq.n	80069c8 <prvInsertBlockIntoFreeList+0x34>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80069c0:	6859      	ldr	r1, [r3, #4]
 80069c2:	4421      	add	r1, r4
 80069c4:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80069c6:	6819      	ldr	r1, [r3, #0]
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
<<<<<<< HEAD
 8008c78:	6001      	str	r1, [r0, #0]
=======
 80069c8:	6001      	str	r1, [r0, #0]
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
<<<<<<< HEAD
 8008c7a:	4290      	cmp	r0, r2
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008c7c:	bf18      	it	ne
 8008c7e:	6010      	strne	r0, [r2, #0]
=======
 80069ca:	4290      	cmp	r0, r2
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80069cc:	bf18      	it	ne
 80069ce:	6010      	strne	r0, [r2, #0]
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
<<<<<<< HEAD
 8008c80:	bd10      	pop	{r4, pc}
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008c82:	4619      	mov	r1, r3
 8008c84:	e7f8      	b.n	8008c78 <prvInsertBlockIntoFreeList+0x34>
 8008c86:	bf00      	nop
 8008c88:	2000290c 	.word	0x2000290c
 8008c8c:	20002908 	.word	0x20002908

08008c90 <pvPortMalloc>:
{
 8008c90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c94:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8008c96:	f7ff fbad 	bl	80083f4 <vTaskSuspendAll>
		if( pxEnd == NULL )
 8008c9a:	493f      	ldr	r1, [pc, #252]	@ (8008d98 <pvPortMalloc+0x108>)
 8008c9c:	4d3f      	ldr	r5, [pc, #252]	@ (8008d9c <pvPortMalloc+0x10c>)
 8008c9e:	680b      	ldr	r3, [r1, #0]
 8008ca0:	b9fb      	cbnz	r3, 8008ce2 <pvPortMalloc+0x52>
	uxAddress = ( size_t ) ucHeap;
 8008ca2:	4a3f      	ldr	r2, [pc, #252]	@ (8008da0 <pvPortMalloc+0x110>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008ca4:	0756      	lsls	r6, r2, #29
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008ca6:	bf1c      	itt	ne
 8008ca8:	3207      	addne	r2, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008caa:	4b3e      	ldrne	r3, [pc, #248]	@ (8008da4 <pvPortMalloc+0x114>)
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008cac:	4e3e      	ldr	r6, [pc, #248]	@ (8008da8 <pvPortMalloc+0x118>)
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008cae:	bf1a      	itte	ne
 8008cb0:	f022 0207 	bicne.w	r2, r2, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008cb4:	1a9b      	subne	r3, r3, r2
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008cb6:	f244 6350 	movweq	r3, #18000	@ 0x4650
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008cba:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 8008cbc:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008cbe:	f023 0307 	bic.w	r3, r3, #7
	xStart.xBlockSize = ( size_t ) 0;
 8008cc2:	2000      	movs	r0, #0
 8008cc4:	6070      	str	r0, [r6, #4]
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008cc6:	6032      	str	r2, [r6, #0]
	pxEnd->pxNextFreeBlock = NULL;
 8008cc8:	e9c3 0000 	strd	r0, r0, [r3]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008ccc:	1a98      	subs	r0, r3, r2
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008cce:	e9c2 3000 	strd	r3, r0, [r2]
	pxEnd = ( void * ) uxAddress;
 8008cd2:	600b      	str	r3, [r1, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008cd4:	4b35      	ldr	r3, [pc, #212]	@ (8008dac <pvPortMalloc+0x11c>)
 8008cd6:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008cd8:	4b35      	ldr	r3, [pc, #212]	@ (8008db0 <pvPortMalloc+0x120>)
 8008cda:	6018      	str	r0, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008cdc:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8008ce0:	602b      	str	r3, [r5, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008ce2:	682e      	ldr	r6, [r5, #0]
 8008ce4:	4226      	tst	r6, r4
 8008ce6:	d152      	bne.n	8008d8e <pvPortMalloc+0xfe>
			if( xWantedSize > 0 )
 8008ce8:	2c00      	cmp	r4, #0
 8008cea:	d043      	beq.n	8008d74 <pvPortMalloc+0xe4>
				xWantedSize += xHeapStructSize;
 8008cec:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008cf0:	0760      	lsls	r0, r4, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008cf2:	bf1c      	itt	ne
 8008cf4:	f023 0307 	bicne.w	r3, r3, #7
 8008cf8:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d047      	beq.n	8008d8e <pvPortMalloc+0xfe>
 8008cfe:	4f2c      	ldr	r7, [pc, #176]	@ (8008db0 <pvPortMalloc+0x120>)
 8008d00:	683c      	ldr	r4, [r7, #0]
 8008d02:	429c      	cmp	r4, r3
 8008d04:	d343      	bcc.n	8008d8e <pvPortMalloc+0xfe>
				pxBlock = xStart.pxNextFreeBlock;
 8008d06:	4a28      	ldr	r2, [pc, #160]	@ (8008da8 <pvPortMalloc+0x118>)
 8008d08:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008d0a:	6868      	ldr	r0, [r5, #4]
 8008d0c:	4298      	cmp	r0, r3
 8008d0e:	d204      	bcs.n	8008d1a <pvPortMalloc+0x8a>
 8008d10:	f8d5 c000 	ldr.w	ip, [r5]
 8008d14:	f1bc 0f00 	cmp.w	ip, #0
 8008d18:	d115      	bne.n	8008d46 <pvPortMalloc+0xb6>
				if( pxBlock != pxEnd )
 8008d1a:	6809      	ldr	r1, [r1, #0]
 8008d1c:	42a9      	cmp	r1, r5
 8008d1e:	d036      	beq.n	8008d8e <pvPortMalloc+0xfe>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008d20:	6829      	ldr	r1, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008d22:	f8d2 8000 	ldr.w	r8, [r2]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008d26:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008d28:	1ac2      	subs	r2, r0, r3
 8008d2a:	2a10      	cmp	r2, #16
 8008d2c:	d912      	bls.n	8008d54 <pvPortMalloc+0xc4>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008d2e:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008d30:	0741      	lsls	r1, r0, #29
 8008d32:	d00b      	beq.n	8008d4c <pvPortMalloc+0xbc>
 8008d34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d38:	f383 8811 	msr	BASEPRI, r3
 8008d3c:	f3bf 8f6f 	isb	sy
 8008d40:	f3bf 8f4f 	dsb	sy
 8008d44:	e7fe      	b.n	8008d44 <pvPortMalloc+0xb4>
 8008d46:	462a      	mov	r2, r5
 8008d48:	4665      	mov	r5, ip
 8008d4a:	e7de      	b.n	8008d0a <pvPortMalloc+0x7a>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008d4c:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008d4e:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008d50:	f7ff ff78 	bl	8008c44 <prvInsertBlockIntoFreeList>
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008d54:	4915      	ldr	r1, [pc, #84]	@ (8008dac <pvPortMalloc+0x11c>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008d56:	686a      	ldr	r2, [r5, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008d58:	6808      	ldr	r0, [r1, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008d5a:	1aa4      	subs	r4, r4, r2
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008d5c:	4284      	cmp	r4, r0
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008d5e:	ea46 0602 	orr.w	r6, r6, r2
					pxBlock->pxNextFreeBlock = NULL;
 8008d62:	f04f 0300 	mov.w	r3, #0
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008d66:	603c      	str	r4, [r7, #0]
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008d68:	bf38      	it	cc
 8008d6a:	600c      	strcc	r4, [r1, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008d6c:	606e      	str	r6, [r5, #4]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008d6e:	f108 0408 	add.w	r4, r8, #8
					pxBlock->pxNextFreeBlock = NULL;
 8008d72:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
 8008d74:	f7ff fbde 	bl	8008534 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008d78:	0763      	lsls	r3, r4, #29
 8008d7a:	d00a      	beq.n	8008d92 <pvPortMalloc+0x102>
 8008d7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d80:	f383 8811 	msr	BASEPRI, r3
 8008d84:	f3bf 8f6f 	isb	sy
 8008d88:	f3bf 8f4f 	dsb	sy
 8008d8c:	e7fe      	b.n	8008d8c <pvPortMalloc+0xfc>
void *pvReturn = NULL;
 8008d8e:	2400      	movs	r4, #0
 8008d90:	e7f0      	b.n	8008d74 <pvPortMalloc+0xe4>
}
 8008d92:	4620      	mov	r0, r4
 8008d94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008d98:	20002908 	.word	0x20002908
 8008d9c:	200028fc 	.word	0x200028fc
 8008da0:	20002914 	.word	0x20002914
 8008da4:	20006f64 	.word	0x20006f64
 8008da8:	2000290c 	.word	0x2000290c
 8008dac:	20002900 	.word	0x20002900
 8008db0:	20002904 	.word	0x20002904

08008db4 <vPortFree>:
{
 8008db4:	b510      	push	{r4, lr}
	if( pv != NULL )
 8008db6:	4604      	mov	r4, r0
 8008db8:	b370      	cbz	r0, 8008e18 <vPortFree+0x64>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008dba:	4a18      	ldr	r2, [pc, #96]	@ (8008e1c <vPortFree+0x68>)
 8008dbc:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8008dc0:	6812      	ldr	r2, [r2, #0]
 8008dc2:	4213      	tst	r3, r2
 8008dc4:	d108      	bne.n	8008dd8 <vPortFree+0x24>
 8008dc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008dca:	f383 8811 	msr	BASEPRI, r3
 8008dce:	f3bf 8f6f 	isb	sy
 8008dd2:	f3bf 8f4f 	dsb	sy
 8008dd6:	e7fe      	b.n	8008dd6 <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008dd8:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8008ddc:	b141      	cbz	r1, 8008df0 <vPortFree+0x3c>
 8008dde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008de2:	f383 8811 	msr	BASEPRI, r3
 8008de6:	f3bf 8f6f 	isb	sy
 8008dea:	f3bf 8f4f 	dsb	sy
 8008dee:	e7fe      	b.n	8008dee <vPortFree+0x3a>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008df0:	ea23 0302 	bic.w	r3, r3, r2
 8008df4:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 8008df8:	f7ff fafc 	bl	80083f4 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008dfc:	4a08      	ldr	r2, [pc, #32]	@ (8008e20 <vPortFree+0x6c>)
 8008dfe:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8008e02:	6811      	ldr	r1, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008e04:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008e08:	440b      	add	r3, r1
 8008e0a:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008e0c:	f7ff ff1a 	bl	8008c44 <prvInsertBlockIntoFreeList>
}
 8008e10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 8008e14:	f7ff bb8e 	b.w	8008534 <xTaskResumeAll>
}
 8008e18:	bd10      	pop	{r4, pc}
 8008e1a:	bf00      	nop
 8008e1c:	200028fc 	.word	0x200028fc
 8008e20:	20002904 	.word	0x20002904

08008e24 <atoi>:
 8008e24:	220a      	movs	r2, #10
 8008e26:	2100      	movs	r1, #0
 8008e28:	f000 bf44 	b.w	8009cb4 <strtol>

08008e2c <malloc>:
 8008e2c:	4b02      	ldr	r3, [pc, #8]	@ (8008e38 <malloc+0xc>)
 8008e2e:	4601      	mov	r1, r0
 8008e30:	6818      	ldr	r0, [r3, #0]
 8008e32:	f000 b82d 	b.w	8008e90 <_malloc_r>
 8008e36:	bf00      	nop
 8008e38:	2000019c 	.word	0x2000019c

08008e3c <free>:
 8008e3c:	4b02      	ldr	r3, [pc, #8]	@ (8008e48 <free+0xc>)
 8008e3e:	4601      	mov	r1, r0
 8008e40:	6818      	ldr	r0, [r3, #0]
 8008e42:	f003 bc39 	b.w	800c6b8 <_free_r>
 8008e46:	bf00      	nop
 8008e48:	2000019c 	.word	0x2000019c

08008e4c <sbrk_aligned>:
 8008e4c:	b570      	push	{r4, r5, r6, lr}
 8008e4e:	4e0f      	ldr	r6, [pc, #60]	@ (8008e8c <sbrk_aligned+0x40>)
 8008e50:	460c      	mov	r4, r1
 8008e52:	6831      	ldr	r1, [r6, #0]
 8008e54:	4605      	mov	r5, r0
 8008e56:	b911      	cbnz	r1, 8008e5e <sbrk_aligned+0x12>
 8008e58:	f002 fd60 	bl	800b91c <_sbrk_r>
 8008e5c:	6030      	str	r0, [r6, #0]
 8008e5e:	4621      	mov	r1, r4
 8008e60:	4628      	mov	r0, r5
 8008e62:	f002 fd5b 	bl	800b91c <_sbrk_r>
 8008e66:	1c43      	adds	r3, r0, #1
 8008e68:	d103      	bne.n	8008e72 <sbrk_aligned+0x26>
 8008e6a:	f04f 34ff 	mov.w	r4, #4294967295
 8008e6e:	4620      	mov	r0, r4
 8008e70:	bd70      	pop	{r4, r5, r6, pc}
 8008e72:	1cc4      	adds	r4, r0, #3
 8008e74:	f024 0403 	bic.w	r4, r4, #3
 8008e78:	42a0      	cmp	r0, r4
 8008e7a:	d0f8      	beq.n	8008e6e <sbrk_aligned+0x22>
 8008e7c:	1a21      	subs	r1, r4, r0
 8008e7e:	4628      	mov	r0, r5
 8008e80:	f002 fd4c 	bl	800b91c <_sbrk_r>
 8008e84:	3001      	adds	r0, #1
 8008e86:	d1f2      	bne.n	8008e6e <sbrk_aligned+0x22>
 8008e88:	e7ef      	b.n	8008e6a <sbrk_aligned+0x1e>
 8008e8a:	bf00      	nop
 8008e8c:	20006f64 	.word	0x20006f64

08008e90 <_malloc_r>:
 8008e90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008e94:	1ccd      	adds	r5, r1, #3
 8008e96:	f025 0503 	bic.w	r5, r5, #3
 8008e9a:	3508      	adds	r5, #8
 8008e9c:	2d0c      	cmp	r5, #12
 8008e9e:	bf38      	it	cc
 8008ea0:	250c      	movcc	r5, #12
 8008ea2:	2d00      	cmp	r5, #0
 8008ea4:	4606      	mov	r6, r0
 8008ea6:	db01      	blt.n	8008eac <_malloc_r+0x1c>
 8008ea8:	42a9      	cmp	r1, r5
 8008eaa:	d904      	bls.n	8008eb6 <_malloc_r+0x26>
 8008eac:	230c      	movs	r3, #12
 8008eae:	6033      	str	r3, [r6, #0]
 8008eb0:	2000      	movs	r0, #0
 8008eb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008eb6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008f8c <_malloc_r+0xfc>
 8008eba:	f000 f869 	bl	8008f90 <__malloc_lock>
 8008ebe:	f8d8 3000 	ldr.w	r3, [r8]
 8008ec2:	461c      	mov	r4, r3
 8008ec4:	bb44      	cbnz	r4, 8008f18 <_malloc_r+0x88>
 8008ec6:	4629      	mov	r1, r5
 8008ec8:	4630      	mov	r0, r6
 8008eca:	f7ff ffbf 	bl	8008e4c <sbrk_aligned>
 8008ece:	1c43      	adds	r3, r0, #1
 8008ed0:	4604      	mov	r4, r0
 8008ed2:	d158      	bne.n	8008f86 <_malloc_r+0xf6>
 8008ed4:	f8d8 4000 	ldr.w	r4, [r8]
 8008ed8:	4627      	mov	r7, r4
 8008eda:	2f00      	cmp	r7, #0
 8008edc:	d143      	bne.n	8008f66 <_malloc_r+0xd6>
 8008ede:	2c00      	cmp	r4, #0
 8008ee0:	d04b      	beq.n	8008f7a <_malloc_r+0xea>
 8008ee2:	6823      	ldr	r3, [r4, #0]
 8008ee4:	4639      	mov	r1, r7
 8008ee6:	4630      	mov	r0, r6
 8008ee8:	eb04 0903 	add.w	r9, r4, r3
 8008eec:	f002 fd16 	bl	800b91c <_sbrk_r>
 8008ef0:	4581      	cmp	r9, r0
 8008ef2:	d142      	bne.n	8008f7a <_malloc_r+0xea>
 8008ef4:	6821      	ldr	r1, [r4, #0]
 8008ef6:	1a6d      	subs	r5, r5, r1
 8008ef8:	4629      	mov	r1, r5
 8008efa:	4630      	mov	r0, r6
 8008efc:	f7ff ffa6 	bl	8008e4c <sbrk_aligned>
 8008f00:	3001      	adds	r0, #1
 8008f02:	d03a      	beq.n	8008f7a <_malloc_r+0xea>
 8008f04:	6823      	ldr	r3, [r4, #0]
 8008f06:	442b      	add	r3, r5
 8008f08:	6023      	str	r3, [r4, #0]
 8008f0a:	f8d8 3000 	ldr.w	r3, [r8]
 8008f0e:	685a      	ldr	r2, [r3, #4]
 8008f10:	bb62      	cbnz	r2, 8008f6c <_malloc_r+0xdc>
 8008f12:	f8c8 7000 	str.w	r7, [r8]
 8008f16:	e00f      	b.n	8008f38 <_malloc_r+0xa8>
 8008f18:	6822      	ldr	r2, [r4, #0]
 8008f1a:	1b52      	subs	r2, r2, r5
 8008f1c:	d420      	bmi.n	8008f60 <_malloc_r+0xd0>
 8008f1e:	2a0b      	cmp	r2, #11
 8008f20:	d917      	bls.n	8008f52 <_malloc_r+0xc2>
 8008f22:	1961      	adds	r1, r4, r5
 8008f24:	42a3      	cmp	r3, r4
 8008f26:	6025      	str	r5, [r4, #0]
 8008f28:	bf18      	it	ne
 8008f2a:	6059      	strne	r1, [r3, #4]
 8008f2c:	6863      	ldr	r3, [r4, #4]
 8008f2e:	bf08      	it	eq
 8008f30:	f8c8 1000 	streq.w	r1, [r8]
 8008f34:	5162      	str	r2, [r4, r5]
 8008f36:	604b      	str	r3, [r1, #4]
 8008f38:	4630      	mov	r0, r6
 8008f3a:	f000 f82f 	bl	8008f9c <__malloc_unlock>
 8008f3e:	f104 000b 	add.w	r0, r4, #11
 8008f42:	1d23      	adds	r3, r4, #4
 8008f44:	f020 0007 	bic.w	r0, r0, #7
 8008f48:	1ac2      	subs	r2, r0, r3
 8008f4a:	bf1c      	itt	ne
 8008f4c:	1a1b      	subne	r3, r3, r0
 8008f4e:	50a3      	strne	r3, [r4, r2]
 8008f50:	e7af      	b.n	8008eb2 <_malloc_r+0x22>
 8008f52:	6862      	ldr	r2, [r4, #4]
 8008f54:	42a3      	cmp	r3, r4
 8008f56:	bf0c      	ite	eq
 8008f58:	f8c8 2000 	streq.w	r2, [r8]
 8008f5c:	605a      	strne	r2, [r3, #4]
 8008f5e:	e7eb      	b.n	8008f38 <_malloc_r+0xa8>
 8008f60:	4623      	mov	r3, r4
 8008f62:	6864      	ldr	r4, [r4, #4]
 8008f64:	e7ae      	b.n	8008ec4 <_malloc_r+0x34>
 8008f66:	463c      	mov	r4, r7
 8008f68:	687f      	ldr	r7, [r7, #4]
 8008f6a:	e7b6      	b.n	8008eda <_malloc_r+0x4a>
 8008f6c:	461a      	mov	r2, r3
 8008f6e:	685b      	ldr	r3, [r3, #4]
 8008f70:	42a3      	cmp	r3, r4
 8008f72:	d1fb      	bne.n	8008f6c <_malloc_r+0xdc>
 8008f74:	2300      	movs	r3, #0
 8008f76:	6053      	str	r3, [r2, #4]
 8008f78:	e7de      	b.n	8008f38 <_malloc_r+0xa8>
 8008f7a:	230c      	movs	r3, #12
 8008f7c:	6033      	str	r3, [r6, #0]
 8008f7e:	4630      	mov	r0, r6
 8008f80:	f000 f80c 	bl	8008f9c <__malloc_unlock>
 8008f84:	e794      	b.n	8008eb0 <_malloc_r+0x20>
 8008f86:	6005      	str	r5, [r0, #0]
 8008f88:	e7d6      	b.n	8008f38 <_malloc_r+0xa8>
 8008f8a:	bf00      	nop
 8008f8c:	20006f68 	.word	0x20006f68

08008f90 <__malloc_lock>:
 8008f90:	4801      	ldr	r0, [pc, #4]	@ (8008f98 <__malloc_lock+0x8>)
 8008f92:	f002 bd11 	b.w	800b9b8 <__retarget_lock_acquire_recursive>
 8008f96:	bf00      	nop
 8008f98:	200070d2 	.word	0x200070d2

08008f9c <__malloc_unlock>:
 8008f9c:	4801      	ldr	r0, [pc, #4]	@ (8008fa4 <__malloc_unlock+0x8>)
 8008f9e:	f002 bd0d 	b.w	800b9bc <__retarget_lock_release_recursive>
 8008fa2:	bf00      	nop
 8008fa4:	200070d2 	.word	0x200070d2

08008fa8 <sulp>:
 8008fa8:	b570      	push	{r4, r5, r6, lr}
 8008faa:	4604      	mov	r4, r0
 8008fac:	460d      	mov	r5, r1
 8008fae:	ec45 4b10 	vmov	d0, r4, r5
 8008fb2:	4616      	mov	r6, r2
 8008fb4:	f004 face 	bl	800d554 <__ulp>
 8008fb8:	ec51 0b10 	vmov	r0, r1, d0
 8008fbc:	b17e      	cbz	r6, 8008fde <sulp+0x36>
 8008fbe:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8008fc2:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	dd09      	ble.n	8008fde <sulp+0x36>
 8008fca:	051b      	lsls	r3, r3, #20
 8008fcc:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8008fd0:	2400      	movs	r4, #0
 8008fd2:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8008fd6:	4622      	mov	r2, r4
 8008fd8:	462b      	mov	r3, r5
 8008fda:	f7f7 fb1d 	bl	8000618 <__aeabi_dmul>
 8008fde:	ec41 0b10 	vmov	d0, r0, r1
 8008fe2:	bd70      	pop	{r4, r5, r6, pc}
 8008fe4:	0000      	movs	r0, r0
	...

08008fe8 <_strtod_l>:
 8008fe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fec:	b09f      	sub	sp, #124	@ 0x7c
 8008fee:	460c      	mov	r4, r1
 8008ff0:	9217      	str	r2, [sp, #92]	@ 0x5c
 8008ff2:	2200      	movs	r2, #0
 8008ff4:	921a      	str	r2, [sp, #104]	@ 0x68
 8008ff6:	9005      	str	r0, [sp, #20]
 8008ff8:	f04f 0a00 	mov.w	sl, #0
 8008ffc:	f04f 0b00 	mov.w	fp, #0
 8009000:	460a      	mov	r2, r1
 8009002:	9219      	str	r2, [sp, #100]	@ 0x64
 8009004:	7811      	ldrb	r1, [r2, #0]
 8009006:	292b      	cmp	r1, #43	@ 0x2b
 8009008:	d04a      	beq.n	80090a0 <_strtod_l+0xb8>
 800900a:	d838      	bhi.n	800907e <_strtod_l+0x96>
 800900c:	290d      	cmp	r1, #13
 800900e:	d832      	bhi.n	8009076 <_strtod_l+0x8e>
 8009010:	2908      	cmp	r1, #8
 8009012:	d832      	bhi.n	800907a <_strtod_l+0x92>
 8009014:	2900      	cmp	r1, #0
 8009016:	d03b      	beq.n	8009090 <_strtod_l+0xa8>
 8009018:	2200      	movs	r2, #0
 800901a:	920b      	str	r2, [sp, #44]	@ 0x2c
 800901c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800901e:	782a      	ldrb	r2, [r5, #0]
 8009020:	2a30      	cmp	r2, #48	@ 0x30
 8009022:	f040 80b3 	bne.w	800918c <_strtod_l+0x1a4>
 8009026:	786a      	ldrb	r2, [r5, #1]
 8009028:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800902c:	2a58      	cmp	r2, #88	@ 0x58
 800902e:	d16e      	bne.n	800910e <_strtod_l+0x126>
 8009030:	9302      	str	r3, [sp, #8]
 8009032:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009034:	9301      	str	r3, [sp, #4]
 8009036:	ab1a      	add	r3, sp, #104	@ 0x68
 8009038:	9300      	str	r3, [sp, #0]
 800903a:	4a8e      	ldr	r2, [pc, #568]	@ (8009274 <_strtod_l+0x28c>)
 800903c:	9805      	ldr	r0, [sp, #20]
 800903e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8009040:	a919      	add	r1, sp, #100	@ 0x64
 8009042:	f003 fbeb 	bl	800c81c <__gethex>
 8009046:	f010 060f 	ands.w	r6, r0, #15
 800904a:	4604      	mov	r4, r0
 800904c:	d005      	beq.n	800905a <_strtod_l+0x72>
 800904e:	2e06      	cmp	r6, #6
 8009050:	d128      	bne.n	80090a4 <_strtod_l+0xbc>
 8009052:	3501      	adds	r5, #1
 8009054:	2300      	movs	r3, #0
 8009056:	9519      	str	r5, [sp, #100]	@ 0x64
 8009058:	930b      	str	r3, [sp, #44]	@ 0x2c
 800905a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800905c:	2b00      	cmp	r3, #0
 800905e:	f040 858e 	bne.w	8009b7e <_strtod_l+0xb96>
 8009062:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009064:	b1cb      	cbz	r3, 800909a <_strtod_l+0xb2>
 8009066:	4652      	mov	r2, sl
 8009068:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800906c:	ec43 2b10 	vmov	d0, r2, r3
 8009070:	b01f      	add	sp, #124	@ 0x7c
 8009072:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009076:	2920      	cmp	r1, #32
 8009078:	d1ce      	bne.n	8009018 <_strtod_l+0x30>
 800907a:	3201      	adds	r2, #1
 800907c:	e7c1      	b.n	8009002 <_strtod_l+0x1a>
 800907e:	292d      	cmp	r1, #45	@ 0x2d
 8009080:	d1ca      	bne.n	8009018 <_strtod_l+0x30>
 8009082:	2101      	movs	r1, #1
 8009084:	910b      	str	r1, [sp, #44]	@ 0x2c
 8009086:	1c51      	adds	r1, r2, #1
 8009088:	9119      	str	r1, [sp, #100]	@ 0x64
 800908a:	7852      	ldrb	r2, [r2, #1]
 800908c:	2a00      	cmp	r2, #0
 800908e:	d1c5      	bne.n	800901c <_strtod_l+0x34>
 8009090:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009092:	9419      	str	r4, [sp, #100]	@ 0x64
 8009094:	2b00      	cmp	r3, #0
 8009096:	f040 8570 	bne.w	8009b7a <_strtod_l+0xb92>
 800909a:	4652      	mov	r2, sl
 800909c:	465b      	mov	r3, fp
 800909e:	e7e5      	b.n	800906c <_strtod_l+0x84>
 80090a0:	2100      	movs	r1, #0
 80090a2:	e7ef      	b.n	8009084 <_strtod_l+0x9c>
 80090a4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80090a6:	b13a      	cbz	r2, 80090b8 <_strtod_l+0xd0>
 80090a8:	2135      	movs	r1, #53	@ 0x35
 80090aa:	a81c      	add	r0, sp, #112	@ 0x70
 80090ac:	f004 fb4c 	bl	800d748 <__copybits>
 80090b0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80090b2:	9805      	ldr	r0, [sp, #20]
 80090b4:	f003 ff1a 	bl	800ceec <_Bfree>
 80090b8:	3e01      	subs	r6, #1
 80090ba:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80090bc:	2e04      	cmp	r6, #4
 80090be:	d806      	bhi.n	80090ce <_strtod_l+0xe6>
 80090c0:	e8df f006 	tbb	[pc, r6]
 80090c4:	201d0314 	.word	0x201d0314
 80090c8:	14          	.byte	0x14
 80090c9:	00          	.byte	0x00
 80090ca:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 80090ce:	05e1      	lsls	r1, r4, #23
 80090d0:	bf48      	it	mi
 80090d2:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 80090d6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80090da:	0d1b      	lsrs	r3, r3, #20
 80090dc:	051b      	lsls	r3, r3, #20
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d1bb      	bne.n	800905a <_strtod_l+0x72>
 80090e2:	f002 fc3d 	bl	800b960 <__errno>
 80090e6:	2322      	movs	r3, #34	@ 0x22
 80090e8:	6003      	str	r3, [r0, #0]
 80090ea:	e7b6      	b.n	800905a <_strtod_l+0x72>
 80090ec:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 80090f0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80090f4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80090f8:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80090fc:	e7e7      	b.n	80090ce <_strtod_l+0xe6>
 80090fe:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800927c <_strtod_l+0x294>
 8009102:	e7e4      	b.n	80090ce <_strtod_l+0xe6>
 8009104:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8009108:	f04f 3aff 	mov.w	sl, #4294967295
 800910c:	e7df      	b.n	80090ce <_strtod_l+0xe6>
 800910e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009110:	1c5a      	adds	r2, r3, #1
 8009112:	9219      	str	r2, [sp, #100]	@ 0x64
 8009114:	785b      	ldrb	r3, [r3, #1]
 8009116:	2b30      	cmp	r3, #48	@ 0x30
 8009118:	d0f9      	beq.n	800910e <_strtod_l+0x126>
 800911a:	2b00      	cmp	r3, #0
 800911c:	d09d      	beq.n	800905a <_strtod_l+0x72>
 800911e:	2301      	movs	r3, #1
 8009120:	9309      	str	r3, [sp, #36]	@ 0x24
 8009122:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009124:	930c      	str	r3, [sp, #48]	@ 0x30
 8009126:	2300      	movs	r3, #0
 8009128:	9308      	str	r3, [sp, #32]
 800912a:	930a      	str	r3, [sp, #40]	@ 0x28
 800912c:	461f      	mov	r7, r3
 800912e:	220a      	movs	r2, #10
 8009130:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8009132:	7805      	ldrb	r5, [r0, #0]
 8009134:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8009138:	b2d9      	uxtb	r1, r3
 800913a:	2909      	cmp	r1, #9
 800913c:	d928      	bls.n	8009190 <_strtod_l+0x1a8>
 800913e:	494e      	ldr	r1, [pc, #312]	@ (8009278 <_strtod_l+0x290>)
 8009140:	2201      	movs	r2, #1
 8009142:	f001 fe00 	bl	800ad46 <strncmp>
 8009146:	2800      	cmp	r0, #0
 8009148:	d032      	beq.n	80091b0 <_strtod_l+0x1c8>
 800914a:	2000      	movs	r0, #0
 800914c:	462a      	mov	r2, r5
 800914e:	4681      	mov	r9, r0
 8009150:	463d      	mov	r5, r7
 8009152:	4603      	mov	r3, r0
 8009154:	2a65      	cmp	r2, #101	@ 0x65
 8009156:	d001      	beq.n	800915c <_strtod_l+0x174>
 8009158:	2a45      	cmp	r2, #69	@ 0x45
 800915a:	d114      	bne.n	8009186 <_strtod_l+0x19e>
 800915c:	b91d      	cbnz	r5, 8009166 <_strtod_l+0x17e>
 800915e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009160:	4302      	orrs	r2, r0
 8009162:	d095      	beq.n	8009090 <_strtod_l+0xa8>
 8009164:	2500      	movs	r5, #0
 8009166:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8009168:	1c62      	adds	r2, r4, #1
 800916a:	9219      	str	r2, [sp, #100]	@ 0x64
 800916c:	7862      	ldrb	r2, [r4, #1]
 800916e:	2a2b      	cmp	r2, #43	@ 0x2b
 8009170:	d077      	beq.n	8009262 <_strtod_l+0x27a>
 8009172:	2a2d      	cmp	r2, #45	@ 0x2d
 8009174:	d07b      	beq.n	800926e <_strtod_l+0x286>
 8009176:	f04f 0c00 	mov.w	ip, #0
 800917a:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800917e:	2909      	cmp	r1, #9
 8009180:	f240 8082 	bls.w	8009288 <_strtod_l+0x2a0>
 8009184:	9419      	str	r4, [sp, #100]	@ 0x64
 8009186:	f04f 0800 	mov.w	r8, #0
 800918a:	e0a2      	b.n	80092d2 <_strtod_l+0x2ea>
 800918c:	2300      	movs	r3, #0
 800918e:	e7c7      	b.n	8009120 <_strtod_l+0x138>
 8009190:	2f08      	cmp	r7, #8
 8009192:	bfd5      	itete	le
 8009194:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8009196:	9908      	ldrgt	r1, [sp, #32]
 8009198:	fb02 3301 	mlale	r3, r2, r1, r3
 800919c:	fb02 3301 	mlagt	r3, r2, r1, r3
 80091a0:	f100 0001 	add.w	r0, r0, #1
 80091a4:	bfd4      	ite	le
 80091a6:	930a      	strle	r3, [sp, #40]	@ 0x28
 80091a8:	9308      	strgt	r3, [sp, #32]
 80091aa:	3701      	adds	r7, #1
 80091ac:	9019      	str	r0, [sp, #100]	@ 0x64
 80091ae:	e7bf      	b.n	8009130 <_strtod_l+0x148>
 80091b0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80091b2:	1c5a      	adds	r2, r3, #1
 80091b4:	9219      	str	r2, [sp, #100]	@ 0x64
 80091b6:	785a      	ldrb	r2, [r3, #1]
 80091b8:	b37f      	cbz	r7, 800921a <_strtod_l+0x232>
 80091ba:	4681      	mov	r9, r0
 80091bc:	463d      	mov	r5, r7
 80091be:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 80091c2:	2b09      	cmp	r3, #9
 80091c4:	d912      	bls.n	80091ec <_strtod_l+0x204>
 80091c6:	2301      	movs	r3, #1
 80091c8:	e7c4      	b.n	8009154 <_strtod_l+0x16c>
 80091ca:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80091cc:	1c5a      	adds	r2, r3, #1
 80091ce:	9219      	str	r2, [sp, #100]	@ 0x64
 80091d0:	785a      	ldrb	r2, [r3, #1]
 80091d2:	3001      	adds	r0, #1
 80091d4:	2a30      	cmp	r2, #48	@ 0x30
 80091d6:	d0f8      	beq.n	80091ca <_strtod_l+0x1e2>
 80091d8:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 80091dc:	2b08      	cmp	r3, #8
 80091de:	f200 84d3 	bhi.w	8009b88 <_strtod_l+0xba0>
 80091e2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80091e4:	930c      	str	r3, [sp, #48]	@ 0x30
 80091e6:	4681      	mov	r9, r0
 80091e8:	2000      	movs	r0, #0
 80091ea:	4605      	mov	r5, r0
 80091ec:	3a30      	subs	r2, #48	@ 0x30
 80091ee:	f100 0301 	add.w	r3, r0, #1
 80091f2:	d02a      	beq.n	800924a <_strtod_l+0x262>
 80091f4:	4499      	add	r9, r3
 80091f6:	eb00 0c05 	add.w	ip, r0, r5
 80091fa:	462b      	mov	r3, r5
 80091fc:	210a      	movs	r1, #10
 80091fe:	4563      	cmp	r3, ip
 8009200:	d10d      	bne.n	800921e <_strtod_l+0x236>
 8009202:	1c69      	adds	r1, r5, #1
 8009204:	4401      	add	r1, r0
 8009206:	4428      	add	r0, r5
 8009208:	2808      	cmp	r0, #8
 800920a:	dc16      	bgt.n	800923a <_strtod_l+0x252>
 800920c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800920e:	230a      	movs	r3, #10
 8009210:	fb03 2300 	mla	r3, r3, r0, r2
 8009214:	930a      	str	r3, [sp, #40]	@ 0x28
 8009216:	2300      	movs	r3, #0
 8009218:	e018      	b.n	800924c <_strtod_l+0x264>
 800921a:	4638      	mov	r0, r7
 800921c:	e7da      	b.n	80091d4 <_strtod_l+0x1ec>
 800921e:	2b08      	cmp	r3, #8
 8009220:	f103 0301 	add.w	r3, r3, #1
 8009224:	dc03      	bgt.n	800922e <_strtod_l+0x246>
 8009226:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8009228:	434e      	muls	r6, r1
 800922a:	960a      	str	r6, [sp, #40]	@ 0x28
 800922c:	e7e7      	b.n	80091fe <_strtod_l+0x216>
 800922e:	2b10      	cmp	r3, #16
 8009230:	bfde      	ittt	le
 8009232:	9e08      	ldrle	r6, [sp, #32]
 8009234:	434e      	mulle	r6, r1
 8009236:	9608      	strle	r6, [sp, #32]
 8009238:	e7e1      	b.n	80091fe <_strtod_l+0x216>
 800923a:	280f      	cmp	r0, #15
 800923c:	dceb      	bgt.n	8009216 <_strtod_l+0x22e>
 800923e:	9808      	ldr	r0, [sp, #32]
 8009240:	230a      	movs	r3, #10
 8009242:	fb03 2300 	mla	r3, r3, r0, r2
 8009246:	9308      	str	r3, [sp, #32]
 8009248:	e7e5      	b.n	8009216 <_strtod_l+0x22e>
 800924a:	4629      	mov	r1, r5
 800924c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800924e:	1c50      	adds	r0, r2, #1
 8009250:	9019      	str	r0, [sp, #100]	@ 0x64
 8009252:	7852      	ldrb	r2, [r2, #1]
 8009254:	4618      	mov	r0, r3
 8009256:	460d      	mov	r5, r1
 8009258:	e7b1      	b.n	80091be <_strtod_l+0x1d6>
 800925a:	f04f 0900 	mov.w	r9, #0
 800925e:	2301      	movs	r3, #1
 8009260:	e77d      	b.n	800915e <_strtod_l+0x176>
 8009262:	f04f 0c00 	mov.w	ip, #0
 8009266:	1ca2      	adds	r2, r4, #2
 8009268:	9219      	str	r2, [sp, #100]	@ 0x64
 800926a:	78a2      	ldrb	r2, [r4, #2]
 800926c:	e785      	b.n	800917a <_strtod_l+0x192>
 800926e:	f04f 0c01 	mov.w	ip, #1
 8009272:	e7f8      	b.n	8009266 <_strtod_l+0x27e>
 8009274:	08010140 	.word	0x08010140
 8009278:	08010129 	.word	0x08010129
 800927c:	7ff00000 	.word	0x7ff00000
 8009280:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009282:	1c51      	adds	r1, r2, #1
 8009284:	9119      	str	r1, [sp, #100]	@ 0x64
 8009286:	7852      	ldrb	r2, [r2, #1]
 8009288:	2a30      	cmp	r2, #48	@ 0x30
 800928a:	d0f9      	beq.n	8009280 <_strtod_l+0x298>
 800928c:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8009290:	2908      	cmp	r1, #8
 8009292:	f63f af78 	bhi.w	8009186 <_strtod_l+0x19e>
 8009296:	3a30      	subs	r2, #48	@ 0x30
 8009298:	920e      	str	r2, [sp, #56]	@ 0x38
 800929a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800929c:	920f      	str	r2, [sp, #60]	@ 0x3c
 800929e:	f04f 080a 	mov.w	r8, #10
 80092a2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80092a4:	1c56      	adds	r6, r2, #1
 80092a6:	9619      	str	r6, [sp, #100]	@ 0x64
 80092a8:	7852      	ldrb	r2, [r2, #1]
 80092aa:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 80092ae:	f1be 0f09 	cmp.w	lr, #9
 80092b2:	d939      	bls.n	8009328 <_strtod_l+0x340>
 80092b4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80092b6:	1a76      	subs	r6, r6, r1
 80092b8:	2e08      	cmp	r6, #8
 80092ba:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 80092be:	dc03      	bgt.n	80092c8 <_strtod_l+0x2e0>
 80092c0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80092c2:	4588      	cmp	r8, r1
 80092c4:	bfa8      	it	ge
 80092c6:	4688      	movge	r8, r1
 80092c8:	f1bc 0f00 	cmp.w	ip, #0
 80092cc:	d001      	beq.n	80092d2 <_strtod_l+0x2ea>
 80092ce:	f1c8 0800 	rsb	r8, r8, #0
 80092d2:	2d00      	cmp	r5, #0
 80092d4:	d14e      	bne.n	8009374 <_strtod_l+0x38c>
 80092d6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80092d8:	4308      	orrs	r0, r1
 80092da:	f47f aebe 	bne.w	800905a <_strtod_l+0x72>
 80092de:	2b00      	cmp	r3, #0
 80092e0:	f47f aed6 	bne.w	8009090 <_strtod_l+0xa8>
 80092e4:	2a69      	cmp	r2, #105	@ 0x69
 80092e6:	d028      	beq.n	800933a <_strtod_l+0x352>
 80092e8:	dc25      	bgt.n	8009336 <_strtod_l+0x34e>
 80092ea:	2a49      	cmp	r2, #73	@ 0x49
 80092ec:	d025      	beq.n	800933a <_strtod_l+0x352>
 80092ee:	2a4e      	cmp	r2, #78	@ 0x4e
 80092f0:	f47f aece 	bne.w	8009090 <_strtod_l+0xa8>
 80092f4:	499b      	ldr	r1, [pc, #620]	@ (8009564 <_strtod_l+0x57c>)
 80092f6:	a819      	add	r0, sp, #100	@ 0x64
 80092f8:	f003 fcb2 	bl	800cc60 <__match>
 80092fc:	2800      	cmp	r0, #0
 80092fe:	f43f aec7 	beq.w	8009090 <_strtod_l+0xa8>
 8009302:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009304:	781b      	ldrb	r3, [r3, #0]
 8009306:	2b28      	cmp	r3, #40	@ 0x28
 8009308:	d12e      	bne.n	8009368 <_strtod_l+0x380>
 800930a:	4997      	ldr	r1, [pc, #604]	@ (8009568 <_strtod_l+0x580>)
 800930c:	aa1c      	add	r2, sp, #112	@ 0x70
 800930e:	a819      	add	r0, sp, #100	@ 0x64
 8009310:	f003 fcba 	bl	800cc88 <__hexnan>
 8009314:	2805      	cmp	r0, #5
 8009316:	d127      	bne.n	8009368 <_strtod_l+0x380>
 8009318:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800931a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800931e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8009322:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8009326:	e698      	b.n	800905a <_strtod_l+0x72>
 8009328:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800932a:	fb08 2101 	mla	r1, r8, r1, r2
 800932e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8009332:	920e      	str	r2, [sp, #56]	@ 0x38
 8009334:	e7b5      	b.n	80092a2 <_strtod_l+0x2ba>
 8009336:	2a6e      	cmp	r2, #110	@ 0x6e
 8009338:	e7da      	b.n	80092f0 <_strtod_l+0x308>
 800933a:	498c      	ldr	r1, [pc, #560]	@ (800956c <_strtod_l+0x584>)
 800933c:	a819      	add	r0, sp, #100	@ 0x64
 800933e:	f003 fc8f 	bl	800cc60 <__match>
 8009342:	2800      	cmp	r0, #0
 8009344:	f43f aea4 	beq.w	8009090 <_strtod_l+0xa8>
 8009348:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800934a:	4989      	ldr	r1, [pc, #548]	@ (8009570 <_strtod_l+0x588>)
 800934c:	3b01      	subs	r3, #1
 800934e:	a819      	add	r0, sp, #100	@ 0x64
 8009350:	9319      	str	r3, [sp, #100]	@ 0x64
 8009352:	f003 fc85 	bl	800cc60 <__match>
 8009356:	b910      	cbnz	r0, 800935e <_strtod_l+0x376>
 8009358:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800935a:	3301      	adds	r3, #1
 800935c:	9319      	str	r3, [sp, #100]	@ 0x64
 800935e:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8009580 <_strtod_l+0x598>
 8009362:	f04f 0a00 	mov.w	sl, #0
 8009366:	e678      	b.n	800905a <_strtod_l+0x72>
 8009368:	4882      	ldr	r0, [pc, #520]	@ (8009574 <_strtod_l+0x58c>)
 800936a:	f002 fb41 	bl	800b9f0 <nan>
 800936e:	ec5b ab10 	vmov	sl, fp, d0
 8009372:	e672      	b.n	800905a <_strtod_l+0x72>
 8009374:	eba8 0309 	sub.w	r3, r8, r9
 8009378:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800937a:	9309      	str	r3, [sp, #36]	@ 0x24
 800937c:	2f00      	cmp	r7, #0
 800937e:	bf08      	it	eq
 8009380:	462f      	moveq	r7, r5
 8009382:	2d10      	cmp	r5, #16
 8009384:	462c      	mov	r4, r5
 8009386:	bfa8      	it	ge
 8009388:	2410      	movge	r4, #16
 800938a:	f7f7 f8cb 	bl	8000524 <__aeabi_ui2d>
 800938e:	2d09      	cmp	r5, #9
 8009390:	4682      	mov	sl, r0
 8009392:	468b      	mov	fp, r1
 8009394:	dc13      	bgt.n	80093be <_strtod_l+0x3d6>
 8009396:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009398:	2b00      	cmp	r3, #0
 800939a:	f43f ae5e 	beq.w	800905a <_strtod_l+0x72>
 800939e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80093a0:	dd78      	ble.n	8009494 <_strtod_l+0x4ac>
 80093a2:	2b16      	cmp	r3, #22
 80093a4:	dc5f      	bgt.n	8009466 <_strtod_l+0x47e>
 80093a6:	4974      	ldr	r1, [pc, #464]	@ (8009578 <_strtod_l+0x590>)
 80093a8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80093ac:	e9d1 0100 	ldrd	r0, r1, [r1]
 80093b0:	4652      	mov	r2, sl
 80093b2:	465b      	mov	r3, fp
 80093b4:	f7f7 f930 	bl	8000618 <__aeabi_dmul>
 80093b8:	4682      	mov	sl, r0
 80093ba:	468b      	mov	fp, r1
 80093bc:	e64d      	b.n	800905a <_strtod_l+0x72>
 80093be:	4b6e      	ldr	r3, [pc, #440]	@ (8009578 <_strtod_l+0x590>)
 80093c0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80093c4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 80093c8:	f7f7 f926 	bl	8000618 <__aeabi_dmul>
 80093cc:	4682      	mov	sl, r0
 80093ce:	9808      	ldr	r0, [sp, #32]
 80093d0:	468b      	mov	fp, r1
 80093d2:	f7f7 f8a7 	bl	8000524 <__aeabi_ui2d>
 80093d6:	4602      	mov	r2, r0
 80093d8:	460b      	mov	r3, r1
 80093da:	4650      	mov	r0, sl
 80093dc:	4659      	mov	r1, fp
 80093de:	f7f6 ff65 	bl	80002ac <__adddf3>
 80093e2:	2d0f      	cmp	r5, #15
 80093e4:	4682      	mov	sl, r0
 80093e6:	468b      	mov	fp, r1
 80093e8:	ddd5      	ble.n	8009396 <_strtod_l+0x3ae>
 80093ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80093ec:	1b2c      	subs	r4, r5, r4
 80093ee:	441c      	add	r4, r3
 80093f0:	2c00      	cmp	r4, #0
 80093f2:	f340 8096 	ble.w	8009522 <_strtod_l+0x53a>
 80093f6:	f014 030f 	ands.w	r3, r4, #15
 80093fa:	d00a      	beq.n	8009412 <_strtod_l+0x42a>
 80093fc:	495e      	ldr	r1, [pc, #376]	@ (8009578 <_strtod_l+0x590>)
 80093fe:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009402:	4652      	mov	r2, sl
 8009404:	465b      	mov	r3, fp
 8009406:	e9d1 0100 	ldrd	r0, r1, [r1]
 800940a:	f7f7 f905 	bl	8000618 <__aeabi_dmul>
 800940e:	4682      	mov	sl, r0
 8009410:	468b      	mov	fp, r1
 8009412:	f034 040f 	bics.w	r4, r4, #15
 8009416:	d073      	beq.n	8009500 <_strtod_l+0x518>
 8009418:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800941c:	dd48      	ble.n	80094b0 <_strtod_l+0x4c8>
 800941e:	2400      	movs	r4, #0
 8009420:	46a0      	mov	r8, r4
 8009422:	940a      	str	r4, [sp, #40]	@ 0x28
 8009424:	46a1      	mov	r9, r4
 8009426:	9a05      	ldr	r2, [sp, #20]
 8009428:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8009580 <_strtod_l+0x598>
 800942c:	2322      	movs	r3, #34	@ 0x22
 800942e:	6013      	str	r3, [r2, #0]
 8009430:	f04f 0a00 	mov.w	sl, #0
 8009434:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009436:	2b00      	cmp	r3, #0
 8009438:	f43f ae0f 	beq.w	800905a <_strtod_l+0x72>
 800943c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800943e:	9805      	ldr	r0, [sp, #20]
 8009440:	f003 fd54 	bl	800ceec <_Bfree>
 8009444:	9805      	ldr	r0, [sp, #20]
 8009446:	4649      	mov	r1, r9
 8009448:	f003 fd50 	bl	800ceec <_Bfree>
 800944c:	9805      	ldr	r0, [sp, #20]
 800944e:	4641      	mov	r1, r8
 8009450:	f003 fd4c 	bl	800ceec <_Bfree>
 8009454:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009456:	9805      	ldr	r0, [sp, #20]
 8009458:	f003 fd48 	bl	800ceec <_Bfree>
 800945c:	9805      	ldr	r0, [sp, #20]
 800945e:	4621      	mov	r1, r4
 8009460:	f003 fd44 	bl	800ceec <_Bfree>
 8009464:	e5f9      	b.n	800905a <_strtod_l+0x72>
 8009466:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009468:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800946c:	4293      	cmp	r3, r2
 800946e:	dbbc      	blt.n	80093ea <_strtod_l+0x402>
 8009470:	4c41      	ldr	r4, [pc, #260]	@ (8009578 <_strtod_l+0x590>)
 8009472:	f1c5 050f 	rsb	r5, r5, #15
 8009476:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800947a:	4652      	mov	r2, sl
 800947c:	465b      	mov	r3, fp
 800947e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009482:	f7f7 f8c9 	bl	8000618 <__aeabi_dmul>
 8009486:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009488:	1b5d      	subs	r5, r3, r5
 800948a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800948e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8009492:	e78f      	b.n	80093b4 <_strtod_l+0x3cc>
 8009494:	3316      	adds	r3, #22
 8009496:	dba8      	blt.n	80093ea <_strtod_l+0x402>
 8009498:	4b37      	ldr	r3, [pc, #220]	@ (8009578 <_strtod_l+0x590>)
 800949a:	eba9 0808 	sub.w	r8, r9, r8
 800949e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 80094a2:	e9d8 2300 	ldrd	r2, r3, [r8]
 80094a6:	4650      	mov	r0, sl
 80094a8:	4659      	mov	r1, fp
 80094aa:	f7f7 f9df 	bl	800086c <__aeabi_ddiv>
 80094ae:	e783      	b.n	80093b8 <_strtod_l+0x3d0>
 80094b0:	4b32      	ldr	r3, [pc, #200]	@ (800957c <_strtod_l+0x594>)
 80094b2:	9308      	str	r3, [sp, #32]
 80094b4:	2300      	movs	r3, #0
 80094b6:	1124      	asrs	r4, r4, #4
 80094b8:	4650      	mov	r0, sl
 80094ba:	4659      	mov	r1, fp
 80094bc:	461e      	mov	r6, r3
 80094be:	2c01      	cmp	r4, #1
 80094c0:	dc21      	bgt.n	8009506 <_strtod_l+0x51e>
 80094c2:	b10b      	cbz	r3, 80094c8 <_strtod_l+0x4e0>
 80094c4:	4682      	mov	sl, r0
 80094c6:	468b      	mov	fp, r1
 80094c8:	492c      	ldr	r1, [pc, #176]	@ (800957c <_strtod_l+0x594>)
 80094ca:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 80094ce:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 80094d2:	4652      	mov	r2, sl
 80094d4:	465b      	mov	r3, fp
 80094d6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80094da:	f7f7 f89d 	bl	8000618 <__aeabi_dmul>
 80094de:	4b28      	ldr	r3, [pc, #160]	@ (8009580 <_strtod_l+0x598>)
 80094e0:	460a      	mov	r2, r1
 80094e2:	400b      	ands	r3, r1
 80094e4:	4927      	ldr	r1, [pc, #156]	@ (8009584 <_strtod_l+0x59c>)
 80094e6:	428b      	cmp	r3, r1
 80094e8:	4682      	mov	sl, r0
 80094ea:	d898      	bhi.n	800941e <_strtod_l+0x436>
 80094ec:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 80094f0:	428b      	cmp	r3, r1
 80094f2:	bf86      	itte	hi
 80094f4:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8009588 <_strtod_l+0x5a0>
 80094f8:	f04f 3aff 	movhi.w	sl, #4294967295
 80094fc:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8009500:	2300      	movs	r3, #0
 8009502:	9308      	str	r3, [sp, #32]
 8009504:	e07a      	b.n	80095fc <_strtod_l+0x614>
 8009506:	07e2      	lsls	r2, r4, #31
 8009508:	d505      	bpl.n	8009516 <_strtod_l+0x52e>
 800950a:	9b08      	ldr	r3, [sp, #32]
 800950c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009510:	f7f7 f882 	bl	8000618 <__aeabi_dmul>
 8009514:	2301      	movs	r3, #1
 8009516:	9a08      	ldr	r2, [sp, #32]
 8009518:	3208      	adds	r2, #8
 800951a:	3601      	adds	r6, #1
 800951c:	1064      	asrs	r4, r4, #1
 800951e:	9208      	str	r2, [sp, #32]
 8009520:	e7cd      	b.n	80094be <_strtod_l+0x4d6>
 8009522:	d0ed      	beq.n	8009500 <_strtod_l+0x518>
 8009524:	4264      	negs	r4, r4
 8009526:	f014 020f 	ands.w	r2, r4, #15
 800952a:	d00a      	beq.n	8009542 <_strtod_l+0x55a>
 800952c:	4b12      	ldr	r3, [pc, #72]	@ (8009578 <_strtod_l+0x590>)
 800952e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009532:	4650      	mov	r0, sl
 8009534:	4659      	mov	r1, fp
 8009536:	e9d3 2300 	ldrd	r2, r3, [r3]
 800953a:	f7f7 f997 	bl	800086c <__aeabi_ddiv>
 800953e:	4682      	mov	sl, r0
 8009540:	468b      	mov	fp, r1
 8009542:	1124      	asrs	r4, r4, #4
 8009544:	d0dc      	beq.n	8009500 <_strtod_l+0x518>
 8009546:	2c1f      	cmp	r4, #31
 8009548:	dd20      	ble.n	800958c <_strtod_l+0x5a4>
 800954a:	2400      	movs	r4, #0
 800954c:	46a0      	mov	r8, r4
 800954e:	940a      	str	r4, [sp, #40]	@ 0x28
 8009550:	46a1      	mov	r9, r4
 8009552:	9a05      	ldr	r2, [sp, #20]
 8009554:	2322      	movs	r3, #34	@ 0x22
 8009556:	f04f 0a00 	mov.w	sl, #0
 800955a:	f04f 0b00 	mov.w	fp, #0
 800955e:	6013      	str	r3, [r2, #0]
 8009560:	e768      	b.n	8009434 <_strtod_l+0x44c>
 8009562:	bf00      	nop
 8009564:	0801028e 	.word	0x0801028e
 8009568:	0801012c 	.word	0x0801012c
 800956c:	08010286 	.word	0x08010286
 8009570:	0801036f 	.word	0x0801036f
 8009574:	0800fa09 	.word	0x0800fa09
 8009578:	080104e8 	.word	0x080104e8
 800957c:	080104c0 	.word	0x080104c0
 8009580:	7ff00000 	.word	0x7ff00000
 8009584:	7ca00000 	.word	0x7ca00000
 8009588:	7fefffff 	.word	0x7fefffff
 800958c:	f014 0310 	ands.w	r3, r4, #16
 8009590:	bf18      	it	ne
 8009592:	236a      	movne	r3, #106	@ 0x6a
 8009594:	4ea9      	ldr	r6, [pc, #676]	@ (800983c <_strtod_l+0x854>)
 8009596:	9308      	str	r3, [sp, #32]
 8009598:	4650      	mov	r0, sl
 800959a:	4659      	mov	r1, fp
 800959c:	2300      	movs	r3, #0
 800959e:	07e2      	lsls	r2, r4, #31
 80095a0:	d504      	bpl.n	80095ac <_strtod_l+0x5c4>
 80095a2:	e9d6 2300 	ldrd	r2, r3, [r6]
 80095a6:	f7f7 f837 	bl	8000618 <__aeabi_dmul>
 80095aa:	2301      	movs	r3, #1
 80095ac:	1064      	asrs	r4, r4, #1
 80095ae:	f106 0608 	add.w	r6, r6, #8
 80095b2:	d1f4      	bne.n	800959e <_strtod_l+0x5b6>
 80095b4:	b10b      	cbz	r3, 80095ba <_strtod_l+0x5d2>
 80095b6:	4682      	mov	sl, r0
 80095b8:	468b      	mov	fp, r1
 80095ba:	9b08      	ldr	r3, [sp, #32]
 80095bc:	b1b3      	cbz	r3, 80095ec <_strtod_l+0x604>
 80095be:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80095c2:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	4659      	mov	r1, fp
 80095ca:	dd0f      	ble.n	80095ec <_strtod_l+0x604>
 80095cc:	2b1f      	cmp	r3, #31
 80095ce:	dd55      	ble.n	800967c <_strtod_l+0x694>
 80095d0:	2b34      	cmp	r3, #52	@ 0x34
 80095d2:	bfde      	ittt	le
 80095d4:	f04f 33ff 	movle.w	r3, #4294967295
 80095d8:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 80095dc:	4093      	lslle	r3, r2
 80095de:	f04f 0a00 	mov.w	sl, #0
 80095e2:	bfcc      	ite	gt
 80095e4:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 80095e8:	ea03 0b01 	andle.w	fp, r3, r1
 80095ec:	2200      	movs	r2, #0
 80095ee:	2300      	movs	r3, #0
 80095f0:	4650      	mov	r0, sl
 80095f2:	4659      	mov	r1, fp
 80095f4:	f7f7 fa78 	bl	8000ae8 <__aeabi_dcmpeq>
 80095f8:	2800      	cmp	r0, #0
 80095fa:	d1a6      	bne.n	800954a <_strtod_l+0x562>
 80095fc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80095fe:	9300      	str	r3, [sp, #0]
 8009600:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8009602:	9805      	ldr	r0, [sp, #20]
 8009604:	462b      	mov	r3, r5
 8009606:	463a      	mov	r2, r7
 8009608:	f003 fcd8 	bl	800cfbc <__s2b>
 800960c:	900a      	str	r0, [sp, #40]	@ 0x28
 800960e:	2800      	cmp	r0, #0
 8009610:	f43f af05 	beq.w	800941e <_strtod_l+0x436>
 8009614:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009616:	2a00      	cmp	r2, #0
 8009618:	eba9 0308 	sub.w	r3, r9, r8
 800961c:	bfa8      	it	ge
 800961e:	2300      	movge	r3, #0
 8009620:	9312      	str	r3, [sp, #72]	@ 0x48
 8009622:	2400      	movs	r4, #0
 8009624:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8009628:	9316      	str	r3, [sp, #88]	@ 0x58
 800962a:	46a0      	mov	r8, r4
 800962c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800962e:	9805      	ldr	r0, [sp, #20]
 8009630:	6859      	ldr	r1, [r3, #4]
 8009632:	f003 fc1b 	bl	800ce6c <_Balloc>
 8009636:	4681      	mov	r9, r0
 8009638:	2800      	cmp	r0, #0
 800963a:	f43f aef4 	beq.w	8009426 <_strtod_l+0x43e>
 800963e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009640:	691a      	ldr	r2, [r3, #16]
 8009642:	3202      	adds	r2, #2
 8009644:	f103 010c 	add.w	r1, r3, #12
 8009648:	0092      	lsls	r2, r2, #2
 800964a:	300c      	adds	r0, #12
 800964c:	f002 f9bf 	bl	800b9ce <memcpy>
 8009650:	ec4b ab10 	vmov	d0, sl, fp
 8009654:	9805      	ldr	r0, [sp, #20]
 8009656:	aa1c      	add	r2, sp, #112	@ 0x70
 8009658:	a91b      	add	r1, sp, #108	@ 0x6c
 800965a:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800965e:	f003 ffe9 	bl	800d634 <__d2b>
 8009662:	901a      	str	r0, [sp, #104]	@ 0x68
 8009664:	2800      	cmp	r0, #0
 8009666:	f43f aede 	beq.w	8009426 <_strtod_l+0x43e>
 800966a:	9805      	ldr	r0, [sp, #20]
 800966c:	2101      	movs	r1, #1
 800966e:	f003 fd3b 	bl	800d0e8 <__i2b>
 8009672:	4680      	mov	r8, r0
 8009674:	b948      	cbnz	r0, 800968a <_strtod_l+0x6a2>
 8009676:	f04f 0800 	mov.w	r8, #0
 800967a:	e6d4      	b.n	8009426 <_strtod_l+0x43e>
 800967c:	f04f 32ff 	mov.w	r2, #4294967295
 8009680:	fa02 f303 	lsl.w	r3, r2, r3
 8009684:	ea03 0a0a 	and.w	sl, r3, sl
 8009688:	e7b0      	b.n	80095ec <_strtod_l+0x604>
 800968a:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800968c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800968e:	2d00      	cmp	r5, #0
 8009690:	bfab      	itete	ge
 8009692:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8009694:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8009696:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8009698:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800969a:	bfac      	ite	ge
 800969c:	18ef      	addge	r7, r5, r3
 800969e:	1b5e      	sublt	r6, r3, r5
 80096a0:	9b08      	ldr	r3, [sp, #32]
 80096a2:	1aed      	subs	r5, r5, r3
 80096a4:	4415      	add	r5, r2
 80096a6:	4b66      	ldr	r3, [pc, #408]	@ (8009840 <_strtod_l+0x858>)
 80096a8:	3d01      	subs	r5, #1
 80096aa:	429d      	cmp	r5, r3
 80096ac:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 80096b0:	da50      	bge.n	8009754 <_strtod_l+0x76c>
 80096b2:	1b5b      	subs	r3, r3, r5
 80096b4:	2b1f      	cmp	r3, #31
 80096b6:	eba2 0203 	sub.w	r2, r2, r3
 80096ba:	f04f 0101 	mov.w	r1, #1
 80096be:	dc3d      	bgt.n	800973c <_strtod_l+0x754>
 80096c0:	fa01 f303 	lsl.w	r3, r1, r3
 80096c4:	9313      	str	r3, [sp, #76]	@ 0x4c
 80096c6:	2300      	movs	r3, #0
 80096c8:	9310      	str	r3, [sp, #64]	@ 0x40
 80096ca:	18bd      	adds	r5, r7, r2
 80096cc:	9b08      	ldr	r3, [sp, #32]
 80096ce:	42af      	cmp	r7, r5
 80096d0:	4416      	add	r6, r2
 80096d2:	441e      	add	r6, r3
 80096d4:	463b      	mov	r3, r7
 80096d6:	bfa8      	it	ge
 80096d8:	462b      	movge	r3, r5
 80096da:	42b3      	cmp	r3, r6
 80096dc:	bfa8      	it	ge
 80096de:	4633      	movge	r3, r6
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	bfc2      	ittt	gt
 80096e4:	1aed      	subgt	r5, r5, r3
 80096e6:	1af6      	subgt	r6, r6, r3
 80096e8:	1aff      	subgt	r7, r7, r3
 80096ea:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	dd16      	ble.n	800971e <_strtod_l+0x736>
 80096f0:	4641      	mov	r1, r8
 80096f2:	9805      	ldr	r0, [sp, #20]
 80096f4:	461a      	mov	r2, r3
 80096f6:	f003 fdb7 	bl	800d268 <__pow5mult>
 80096fa:	4680      	mov	r8, r0
 80096fc:	2800      	cmp	r0, #0
 80096fe:	d0ba      	beq.n	8009676 <_strtod_l+0x68e>
 8009700:	4601      	mov	r1, r0
 8009702:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8009704:	9805      	ldr	r0, [sp, #20]
 8009706:	f003 fd05 	bl	800d114 <__multiply>
 800970a:	900e      	str	r0, [sp, #56]	@ 0x38
 800970c:	2800      	cmp	r0, #0
 800970e:	f43f ae8a 	beq.w	8009426 <_strtod_l+0x43e>
 8009712:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009714:	9805      	ldr	r0, [sp, #20]
 8009716:	f003 fbe9 	bl	800ceec <_Bfree>
 800971a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800971c:	931a      	str	r3, [sp, #104]	@ 0x68
 800971e:	2d00      	cmp	r5, #0
 8009720:	dc1d      	bgt.n	800975e <_strtod_l+0x776>
 8009722:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009724:	2b00      	cmp	r3, #0
 8009726:	dd23      	ble.n	8009770 <_strtod_l+0x788>
 8009728:	4649      	mov	r1, r9
 800972a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800972c:	9805      	ldr	r0, [sp, #20]
 800972e:	f003 fd9b 	bl	800d268 <__pow5mult>
 8009732:	4681      	mov	r9, r0
 8009734:	b9e0      	cbnz	r0, 8009770 <_strtod_l+0x788>
 8009736:	f04f 0900 	mov.w	r9, #0
 800973a:	e674      	b.n	8009426 <_strtod_l+0x43e>
 800973c:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8009740:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8009744:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8009748:	35e2      	adds	r5, #226	@ 0xe2
 800974a:	fa01 f305 	lsl.w	r3, r1, r5
 800974e:	9310      	str	r3, [sp, #64]	@ 0x40
 8009750:	9113      	str	r1, [sp, #76]	@ 0x4c
 8009752:	e7ba      	b.n	80096ca <_strtod_l+0x6e2>
 8009754:	2300      	movs	r3, #0
 8009756:	9310      	str	r3, [sp, #64]	@ 0x40
 8009758:	2301      	movs	r3, #1
 800975a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800975c:	e7b5      	b.n	80096ca <_strtod_l+0x6e2>
 800975e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009760:	9805      	ldr	r0, [sp, #20]
 8009762:	462a      	mov	r2, r5
 8009764:	f003 fdda 	bl	800d31c <__lshift>
 8009768:	901a      	str	r0, [sp, #104]	@ 0x68
 800976a:	2800      	cmp	r0, #0
 800976c:	d1d9      	bne.n	8009722 <_strtod_l+0x73a>
 800976e:	e65a      	b.n	8009426 <_strtod_l+0x43e>
 8009770:	2e00      	cmp	r6, #0
 8009772:	dd07      	ble.n	8009784 <_strtod_l+0x79c>
 8009774:	4649      	mov	r1, r9
 8009776:	9805      	ldr	r0, [sp, #20]
 8009778:	4632      	mov	r2, r6
 800977a:	f003 fdcf 	bl	800d31c <__lshift>
 800977e:	4681      	mov	r9, r0
 8009780:	2800      	cmp	r0, #0
 8009782:	d0d8      	beq.n	8009736 <_strtod_l+0x74e>
 8009784:	2f00      	cmp	r7, #0
 8009786:	dd08      	ble.n	800979a <_strtod_l+0x7b2>
 8009788:	4641      	mov	r1, r8
 800978a:	9805      	ldr	r0, [sp, #20]
 800978c:	463a      	mov	r2, r7
 800978e:	f003 fdc5 	bl	800d31c <__lshift>
 8009792:	4680      	mov	r8, r0
 8009794:	2800      	cmp	r0, #0
 8009796:	f43f ae46 	beq.w	8009426 <_strtod_l+0x43e>
 800979a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800979c:	9805      	ldr	r0, [sp, #20]
 800979e:	464a      	mov	r2, r9
 80097a0:	f003 fe44 	bl	800d42c <__mdiff>
 80097a4:	4604      	mov	r4, r0
 80097a6:	2800      	cmp	r0, #0
 80097a8:	f43f ae3d 	beq.w	8009426 <_strtod_l+0x43e>
 80097ac:	68c3      	ldr	r3, [r0, #12]
 80097ae:	930f      	str	r3, [sp, #60]	@ 0x3c
 80097b0:	2300      	movs	r3, #0
 80097b2:	60c3      	str	r3, [r0, #12]
 80097b4:	4641      	mov	r1, r8
 80097b6:	f003 fe1d 	bl	800d3f4 <__mcmp>
 80097ba:	2800      	cmp	r0, #0
 80097bc:	da46      	bge.n	800984c <_strtod_l+0x864>
 80097be:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80097c0:	ea53 030a 	orrs.w	r3, r3, sl
 80097c4:	d16c      	bne.n	80098a0 <_strtod_l+0x8b8>
 80097c6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d168      	bne.n	80098a0 <_strtod_l+0x8b8>
 80097ce:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80097d2:	0d1b      	lsrs	r3, r3, #20
 80097d4:	051b      	lsls	r3, r3, #20
 80097d6:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80097da:	d961      	bls.n	80098a0 <_strtod_l+0x8b8>
 80097dc:	6963      	ldr	r3, [r4, #20]
 80097de:	b913      	cbnz	r3, 80097e6 <_strtod_l+0x7fe>
 80097e0:	6923      	ldr	r3, [r4, #16]
 80097e2:	2b01      	cmp	r3, #1
 80097e4:	dd5c      	ble.n	80098a0 <_strtod_l+0x8b8>
 80097e6:	4621      	mov	r1, r4
 80097e8:	2201      	movs	r2, #1
 80097ea:	9805      	ldr	r0, [sp, #20]
 80097ec:	f003 fd96 	bl	800d31c <__lshift>
 80097f0:	4641      	mov	r1, r8
 80097f2:	4604      	mov	r4, r0
 80097f4:	f003 fdfe 	bl	800d3f4 <__mcmp>
 80097f8:	2800      	cmp	r0, #0
 80097fa:	dd51      	ble.n	80098a0 <_strtod_l+0x8b8>
 80097fc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009800:	9a08      	ldr	r2, [sp, #32]
 8009802:	0d1b      	lsrs	r3, r3, #20
 8009804:	051b      	lsls	r3, r3, #20
 8009806:	2a00      	cmp	r2, #0
 8009808:	d06b      	beq.n	80098e2 <_strtod_l+0x8fa>
 800980a:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800980e:	d868      	bhi.n	80098e2 <_strtod_l+0x8fa>
 8009810:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8009814:	f67f ae9d 	bls.w	8009552 <_strtod_l+0x56a>
 8009818:	4b0a      	ldr	r3, [pc, #40]	@ (8009844 <_strtod_l+0x85c>)
 800981a:	4650      	mov	r0, sl
 800981c:	4659      	mov	r1, fp
 800981e:	2200      	movs	r2, #0
 8009820:	f7f6 fefa 	bl	8000618 <__aeabi_dmul>
 8009824:	4b08      	ldr	r3, [pc, #32]	@ (8009848 <_strtod_l+0x860>)
 8009826:	400b      	ands	r3, r1
 8009828:	4682      	mov	sl, r0
 800982a:	468b      	mov	fp, r1
 800982c:	2b00      	cmp	r3, #0
 800982e:	f47f ae05 	bne.w	800943c <_strtod_l+0x454>
 8009832:	9a05      	ldr	r2, [sp, #20]
 8009834:	2322      	movs	r3, #34	@ 0x22
 8009836:	6013      	str	r3, [r2, #0]
 8009838:	e600      	b.n	800943c <_strtod_l+0x454>
 800983a:	bf00      	nop
 800983c:	08010158 	.word	0x08010158
 8009840:	fffffc02 	.word	0xfffffc02
 8009844:	39500000 	.word	0x39500000
 8009848:	7ff00000 	.word	0x7ff00000
 800984c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8009850:	d165      	bne.n	800991e <_strtod_l+0x936>
 8009852:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8009854:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009858:	b35a      	cbz	r2, 80098b2 <_strtod_l+0x8ca>
 800985a:	4a9f      	ldr	r2, [pc, #636]	@ (8009ad8 <_strtod_l+0xaf0>)
 800985c:	4293      	cmp	r3, r2
 800985e:	d12b      	bne.n	80098b8 <_strtod_l+0x8d0>
 8009860:	9b08      	ldr	r3, [sp, #32]
 8009862:	4651      	mov	r1, sl
 8009864:	b303      	cbz	r3, 80098a8 <_strtod_l+0x8c0>
 8009866:	4b9d      	ldr	r3, [pc, #628]	@ (8009adc <_strtod_l+0xaf4>)
 8009868:	465a      	mov	r2, fp
 800986a:	4013      	ands	r3, r2
 800986c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8009870:	f04f 32ff 	mov.w	r2, #4294967295
 8009874:	d81b      	bhi.n	80098ae <_strtod_l+0x8c6>
 8009876:	0d1b      	lsrs	r3, r3, #20
 8009878:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800987c:	fa02 f303 	lsl.w	r3, r2, r3
 8009880:	4299      	cmp	r1, r3
 8009882:	d119      	bne.n	80098b8 <_strtod_l+0x8d0>
 8009884:	4b96      	ldr	r3, [pc, #600]	@ (8009ae0 <_strtod_l+0xaf8>)
 8009886:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009888:	429a      	cmp	r2, r3
 800988a:	d102      	bne.n	8009892 <_strtod_l+0x8aa>
 800988c:	3101      	adds	r1, #1
 800988e:	f43f adca 	beq.w	8009426 <_strtod_l+0x43e>
 8009892:	4b92      	ldr	r3, [pc, #584]	@ (8009adc <_strtod_l+0xaf4>)
 8009894:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009896:	401a      	ands	r2, r3
 8009898:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800989c:	f04f 0a00 	mov.w	sl, #0
 80098a0:	9b08      	ldr	r3, [sp, #32]
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d1b8      	bne.n	8009818 <_strtod_l+0x830>
 80098a6:	e5c9      	b.n	800943c <_strtod_l+0x454>
 80098a8:	f04f 33ff 	mov.w	r3, #4294967295
 80098ac:	e7e8      	b.n	8009880 <_strtod_l+0x898>
 80098ae:	4613      	mov	r3, r2
 80098b0:	e7e6      	b.n	8009880 <_strtod_l+0x898>
 80098b2:	ea53 030a 	orrs.w	r3, r3, sl
 80098b6:	d0a1      	beq.n	80097fc <_strtod_l+0x814>
 80098b8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80098ba:	b1db      	cbz	r3, 80098f4 <_strtod_l+0x90c>
 80098bc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80098be:	4213      	tst	r3, r2
 80098c0:	d0ee      	beq.n	80098a0 <_strtod_l+0x8b8>
 80098c2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80098c4:	9a08      	ldr	r2, [sp, #32]
 80098c6:	4650      	mov	r0, sl
 80098c8:	4659      	mov	r1, fp
 80098ca:	b1bb      	cbz	r3, 80098fc <_strtod_l+0x914>
 80098cc:	f7ff fb6c 	bl	8008fa8 <sulp>
 80098d0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80098d4:	ec53 2b10 	vmov	r2, r3, d0
 80098d8:	f7f6 fce8 	bl	80002ac <__adddf3>
 80098dc:	4682      	mov	sl, r0
 80098de:	468b      	mov	fp, r1
 80098e0:	e7de      	b.n	80098a0 <_strtod_l+0x8b8>
 80098e2:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 80098e6:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80098ea:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80098ee:	f04f 3aff 	mov.w	sl, #4294967295
 80098f2:	e7d5      	b.n	80098a0 <_strtod_l+0x8b8>
 80098f4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80098f6:	ea13 0f0a 	tst.w	r3, sl
 80098fa:	e7e1      	b.n	80098c0 <_strtod_l+0x8d8>
 80098fc:	f7ff fb54 	bl	8008fa8 <sulp>
 8009900:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009904:	ec53 2b10 	vmov	r2, r3, d0
 8009908:	f7f6 fcce 	bl	80002a8 <__aeabi_dsub>
 800990c:	2200      	movs	r2, #0
 800990e:	2300      	movs	r3, #0
 8009910:	4682      	mov	sl, r0
 8009912:	468b      	mov	fp, r1
 8009914:	f7f7 f8e8 	bl	8000ae8 <__aeabi_dcmpeq>
 8009918:	2800      	cmp	r0, #0
 800991a:	d0c1      	beq.n	80098a0 <_strtod_l+0x8b8>
 800991c:	e619      	b.n	8009552 <_strtod_l+0x56a>
 800991e:	4641      	mov	r1, r8
 8009920:	4620      	mov	r0, r4
 8009922:	f003 fedf 	bl	800d6e4 <__ratio>
 8009926:	ec57 6b10 	vmov	r6, r7, d0
 800992a:	2200      	movs	r2, #0
 800992c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8009930:	4630      	mov	r0, r6
 8009932:	4639      	mov	r1, r7
 8009934:	f7f7 f8ec 	bl	8000b10 <__aeabi_dcmple>
 8009938:	2800      	cmp	r0, #0
 800993a:	d06f      	beq.n	8009a1c <_strtod_l+0xa34>
 800993c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800993e:	2b00      	cmp	r3, #0
 8009940:	d17a      	bne.n	8009a38 <_strtod_l+0xa50>
 8009942:	f1ba 0f00 	cmp.w	sl, #0
 8009946:	d158      	bne.n	80099fa <_strtod_l+0xa12>
 8009948:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800994a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800994e:	2b00      	cmp	r3, #0
 8009950:	d15a      	bne.n	8009a08 <_strtod_l+0xa20>
 8009952:	4b64      	ldr	r3, [pc, #400]	@ (8009ae4 <_strtod_l+0xafc>)
 8009954:	2200      	movs	r2, #0
 8009956:	4630      	mov	r0, r6
 8009958:	4639      	mov	r1, r7
 800995a:	f7f7 f8cf 	bl	8000afc <__aeabi_dcmplt>
 800995e:	2800      	cmp	r0, #0
 8009960:	d159      	bne.n	8009a16 <_strtod_l+0xa2e>
 8009962:	4630      	mov	r0, r6
 8009964:	4639      	mov	r1, r7
 8009966:	4b60      	ldr	r3, [pc, #384]	@ (8009ae8 <_strtod_l+0xb00>)
 8009968:	2200      	movs	r2, #0
 800996a:	f7f6 fe55 	bl	8000618 <__aeabi_dmul>
 800996e:	4606      	mov	r6, r0
 8009970:	460f      	mov	r7, r1
 8009972:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8009976:	9606      	str	r6, [sp, #24]
 8009978:	9307      	str	r3, [sp, #28]
 800997a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800997e:	4d57      	ldr	r5, [pc, #348]	@ (8009adc <_strtod_l+0xaf4>)
 8009980:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8009984:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009986:	401d      	ands	r5, r3
 8009988:	4b58      	ldr	r3, [pc, #352]	@ (8009aec <_strtod_l+0xb04>)
 800998a:	429d      	cmp	r5, r3
 800998c:	f040 80b2 	bne.w	8009af4 <_strtod_l+0xb0c>
 8009990:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009992:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8009996:	ec4b ab10 	vmov	d0, sl, fp
 800999a:	f003 fddb 	bl	800d554 <__ulp>
 800999e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80099a2:	ec51 0b10 	vmov	r0, r1, d0
 80099a6:	f7f6 fe37 	bl	8000618 <__aeabi_dmul>
 80099aa:	4652      	mov	r2, sl
 80099ac:	465b      	mov	r3, fp
 80099ae:	f7f6 fc7d 	bl	80002ac <__adddf3>
 80099b2:	460b      	mov	r3, r1
 80099b4:	4949      	ldr	r1, [pc, #292]	@ (8009adc <_strtod_l+0xaf4>)
 80099b6:	4a4e      	ldr	r2, [pc, #312]	@ (8009af0 <_strtod_l+0xb08>)
 80099b8:	4019      	ands	r1, r3
 80099ba:	4291      	cmp	r1, r2
 80099bc:	4682      	mov	sl, r0
 80099be:	d942      	bls.n	8009a46 <_strtod_l+0xa5e>
 80099c0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80099c2:	4b47      	ldr	r3, [pc, #284]	@ (8009ae0 <_strtod_l+0xaf8>)
 80099c4:	429a      	cmp	r2, r3
 80099c6:	d103      	bne.n	80099d0 <_strtod_l+0x9e8>
 80099c8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80099ca:	3301      	adds	r3, #1
 80099cc:	f43f ad2b 	beq.w	8009426 <_strtod_l+0x43e>
 80099d0:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8009ae0 <_strtod_l+0xaf8>
 80099d4:	f04f 3aff 	mov.w	sl, #4294967295
 80099d8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80099da:	9805      	ldr	r0, [sp, #20]
 80099dc:	f003 fa86 	bl	800ceec <_Bfree>
 80099e0:	9805      	ldr	r0, [sp, #20]
 80099e2:	4649      	mov	r1, r9
 80099e4:	f003 fa82 	bl	800ceec <_Bfree>
 80099e8:	9805      	ldr	r0, [sp, #20]
 80099ea:	4641      	mov	r1, r8
 80099ec:	f003 fa7e 	bl	800ceec <_Bfree>
 80099f0:	9805      	ldr	r0, [sp, #20]
 80099f2:	4621      	mov	r1, r4
 80099f4:	f003 fa7a 	bl	800ceec <_Bfree>
 80099f8:	e618      	b.n	800962c <_strtod_l+0x644>
 80099fa:	f1ba 0f01 	cmp.w	sl, #1
 80099fe:	d103      	bne.n	8009a08 <_strtod_l+0xa20>
 8009a00:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	f43f ada5 	beq.w	8009552 <_strtod_l+0x56a>
 8009a08:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8009ab8 <_strtod_l+0xad0>
 8009a0c:	4f35      	ldr	r7, [pc, #212]	@ (8009ae4 <_strtod_l+0xafc>)
 8009a0e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009a12:	2600      	movs	r6, #0
 8009a14:	e7b1      	b.n	800997a <_strtod_l+0x992>
 8009a16:	4f34      	ldr	r7, [pc, #208]	@ (8009ae8 <_strtod_l+0xb00>)
 8009a18:	2600      	movs	r6, #0
 8009a1a:	e7aa      	b.n	8009972 <_strtod_l+0x98a>
 8009a1c:	4b32      	ldr	r3, [pc, #200]	@ (8009ae8 <_strtod_l+0xb00>)
 8009a1e:	4630      	mov	r0, r6
 8009a20:	4639      	mov	r1, r7
 8009a22:	2200      	movs	r2, #0
 8009a24:	f7f6 fdf8 	bl	8000618 <__aeabi_dmul>
 8009a28:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009a2a:	4606      	mov	r6, r0
 8009a2c:	460f      	mov	r7, r1
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d09f      	beq.n	8009972 <_strtod_l+0x98a>
 8009a32:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8009a36:	e7a0      	b.n	800997a <_strtod_l+0x992>
 8009a38:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8009ac0 <_strtod_l+0xad8>
 8009a3c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009a40:	ec57 6b17 	vmov	r6, r7, d7
 8009a44:	e799      	b.n	800997a <_strtod_l+0x992>
 8009a46:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8009a4a:	9b08      	ldr	r3, [sp, #32]
 8009a4c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d1c1      	bne.n	80099d8 <_strtod_l+0x9f0>
 8009a54:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009a58:	0d1b      	lsrs	r3, r3, #20
 8009a5a:	051b      	lsls	r3, r3, #20
 8009a5c:	429d      	cmp	r5, r3
 8009a5e:	d1bb      	bne.n	80099d8 <_strtod_l+0x9f0>
 8009a60:	4630      	mov	r0, r6
 8009a62:	4639      	mov	r1, r7
 8009a64:	f7f7 f920 	bl	8000ca8 <__aeabi_d2lz>
 8009a68:	f7f6 fda8 	bl	80005bc <__aeabi_l2d>
 8009a6c:	4602      	mov	r2, r0
 8009a6e:	460b      	mov	r3, r1
 8009a70:	4630      	mov	r0, r6
 8009a72:	4639      	mov	r1, r7
 8009a74:	f7f6 fc18 	bl	80002a8 <__aeabi_dsub>
 8009a78:	460b      	mov	r3, r1
 8009a7a:	4602      	mov	r2, r0
 8009a7c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8009a80:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8009a84:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009a86:	ea46 060a 	orr.w	r6, r6, sl
 8009a8a:	431e      	orrs	r6, r3
 8009a8c:	d06f      	beq.n	8009b6e <_strtod_l+0xb86>
 8009a8e:	a30e      	add	r3, pc, #56	@ (adr r3, 8009ac8 <_strtod_l+0xae0>)
 8009a90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a94:	f7f7 f832 	bl	8000afc <__aeabi_dcmplt>
 8009a98:	2800      	cmp	r0, #0
 8009a9a:	f47f accf 	bne.w	800943c <_strtod_l+0x454>
 8009a9e:	a30c      	add	r3, pc, #48	@ (adr r3, 8009ad0 <_strtod_l+0xae8>)
 8009aa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009aa4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009aa8:	f7f7 f846 	bl	8000b38 <__aeabi_dcmpgt>
 8009aac:	2800      	cmp	r0, #0
 8009aae:	d093      	beq.n	80099d8 <_strtod_l+0x9f0>
 8009ab0:	e4c4      	b.n	800943c <_strtod_l+0x454>
 8009ab2:	bf00      	nop
 8009ab4:	f3af 8000 	nop.w
 8009ab8:	00000000 	.word	0x00000000
 8009abc:	bff00000 	.word	0xbff00000
 8009ac0:	00000000 	.word	0x00000000
 8009ac4:	3ff00000 	.word	0x3ff00000
 8009ac8:	94a03595 	.word	0x94a03595
 8009acc:	3fdfffff 	.word	0x3fdfffff
 8009ad0:	35afe535 	.word	0x35afe535
 8009ad4:	3fe00000 	.word	0x3fe00000
 8009ad8:	000fffff 	.word	0x000fffff
 8009adc:	7ff00000 	.word	0x7ff00000
 8009ae0:	7fefffff 	.word	0x7fefffff
 8009ae4:	3ff00000 	.word	0x3ff00000
 8009ae8:	3fe00000 	.word	0x3fe00000
 8009aec:	7fe00000 	.word	0x7fe00000
 8009af0:	7c9fffff 	.word	0x7c9fffff
 8009af4:	9b08      	ldr	r3, [sp, #32]
 8009af6:	b323      	cbz	r3, 8009b42 <_strtod_l+0xb5a>
 8009af8:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8009afc:	d821      	bhi.n	8009b42 <_strtod_l+0xb5a>
 8009afe:	a328      	add	r3, pc, #160	@ (adr r3, 8009ba0 <_strtod_l+0xbb8>)
 8009b00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b04:	4630      	mov	r0, r6
 8009b06:	4639      	mov	r1, r7
 8009b08:	f7f7 f802 	bl	8000b10 <__aeabi_dcmple>
 8009b0c:	b1a0      	cbz	r0, 8009b38 <_strtod_l+0xb50>
 8009b0e:	4639      	mov	r1, r7
 8009b10:	4630      	mov	r0, r6
 8009b12:	f7f7 f859 	bl	8000bc8 <__aeabi_d2uiz>
 8009b16:	2801      	cmp	r0, #1
 8009b18:	bf38      	it	cc
 8009b1a:	2001      	movcc	r0, #1
 8009b1c:	f7f6 fd02 	bl	8000524 <__aeabi_ui2d>
 8009b20:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009b22:	4606      	mov	r6, r0
 8009b24:	460f      	mov	r7, r1
 8009b26:	b9fb      	cbnz	r3, 8009b68 <_strtod_l+0xb80>
 8009b28:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009b2c:	9014      	str	r0, [sp, #80]	@ 0x50
 8009b2e:	9315      	str	r3, [sp, #84]	@ 0x54
 8009b30:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8009b34:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8009b38:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009b3a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8009b3e:	1b5b      	subs	r3, r3, r5
 8009b40:	9311      	str	r3, [sp, #68]	@ 0x44
 8009b42:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8009b46:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8009b4a:	f003 fd03 	bl	800d554 <__ulp>
 8009b4e:	4650      	mov	r0, sl
 8009b50:	ec53 2b10 	vmov	r2, r3, d0
 8009b54:	4659      	mov	r1, fp
 8009b56:	f7f6 fd5f 	bl	8000618 <__aeabi_dmul>
 8009b5a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8009b5e:	f7f6 fba5 	bl	80002ac <__adddf3>
 8009b62:	4682      	mov	sl, r0
 8009b64:	468b      	mov	fp, r1
 8009b66:	e770      	b.n	8009a4a <_strtod_l+0xa62>
 8009b68:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8009b6c:	e7e0      	b.n	8009b30 <_strtod_l+0xb48>
 8009b6e:	a30e      	add	r3, pc, #56	@ (adr r3, 8009ba8 <_strtod_l+0xbc0>)
 8009b70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b74:	f7f6 ffc2 	bl	8000afc <__aeabi_dcmplt>
 8009b78:	e798      	b.n	8009aac <_strtod_l+0xac4>
 8009b7a:	2300      	movs	r3, #0
 8009b7c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009b7e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8009b80:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009b82:	6013      	str	r3, [r2, #0]
 8009b84:	f7ff ba6d 	b.w	8009062 <_strtod_l+0x7a>
 8009b88:	2a65      	cmp	r2, #101	@ 0x65
 8009b8a:	f43f ab66 	beq.w	800925a <_strtod_l+0x272>
 8009b8e:	2a45      	cmp	r2, #69	@ 0x45
 8009b90:	f43f ab63 	beq.w	800925a <_strtod_l+0x272>
 8009b94:	2301      	movs	r3, #1
 8009b96:	f7ff bb9e 	b.w	80092d6 <_strtod_l+0x2ee>
 8009b9a:	bf00      	nop
 8009b9c:	f3af 8000 	nop.w
 8009ba0:	ffc00000 	.word	0xffc00000
 8009ba4:	41dfffff 	.word	0x41dfffff
 8009ba8:	94a03595 	.word	0x94a03595
 8009bac:	3fcfffff 	.word	0x3fcfffff

08009bb0 <_strtod_r>:
 8009bb0:	4b01      	ldr	r3, [pc, #4]	@ (8009bb8 <_strtod_r+0x8>)
 8009bb2:	f7ff ba19 	b.w	8008fe8 <_strtod_l>
 8009bb6:	bf00      	nop
 8009bb8:	20000030 	.word	0x20000030

08009bbc <_strtol_l.constprop.0>:
 8009bbc:	2b24      	cmp	r3, #36	@ 0x24
 8009bbe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009bc2:	4686      	mov	lr, r0
 8009bc4:	4690      	mov	r8, r2
 8009bc6:	d801      	bhi.n	8009bcc <_strtol_l.constprop.0+0x10>
 8009bc8:	2b01      	cmp	r3, #1
 8009bca:	d106      	bne.n	8009bda <_strtol_l.constprop.0+0x1e>
 8009bcc:	f001 fec8 	bl	800b960 <__errno>
 8009bd0:	2316      	movs	r3, #22
 8009bd2:	6003      	str	r3, [r0, #0]
 8009bd4:	2000      	movs	r0, #0
 8009bd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009bda:	4834      	ldr	r0, [pc, #208]	@ (8009cac <_strtol_l.constprop.0+0xf0>)
 8009bdc:	460d      	mov	r5, r1
 8009bde:	462a      	mov	r2, r5
 8009be0:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009be4:	5d06      	ldrb	r6, [r0, r4]
 8009be6:	f016 0608 	ands.w	r6, r6, #8
 8009bea:	d1f8      	bne.n	8009bde <_strtol_l.constprop.0+0x22>
 8009bec:	2c2d      	cmp	r4, #45	@ 0x2d
 8009bee:	d12d      	bne.n	8009c4c <_strtol_l.constprop.0+0x90>
 8009bf0:	782c      	ldrb	r4, [r5, #0]
 8009bf2:	2601      	movs	r6, #1
 8009bf4:	1c95      	adds	r5, r2, #2
 8009bf6:	f033 0210 	bics.w	r2, r3, #16
 8009bfa:	d109      	bne.n	8009c10 <_strtol_l.constprop.0+0x54>
 8009bfc:	2c30      	cmp	r4, #48	@ 0x30
 8009bfe:	d12a      	bne.n	8009c56 <_strtol_l.constprop.0+0x9a>
 8009c00:	782a      	ldrb	r2, [r5, #0]
 8009c02:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8009c06:	2a58      	cmp	r2, #88	@ 0x58
 8009c08:	d125      	bne.n	8009c56 <_strtol_l.constprop.0+0x9a>
 8009c0a:	786c      	ldrb	r4, [r5, #1]
 8009c0c:	2310      	movs	r3, #16
 8009c0e:	3502      	adds	r5, #2
 8009c10:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8009c14:	f10c 3cff 	add.w	ip, ip, #4294967295
 8009c18:	2200      	movs	r2, #0
 8009c1a:	fbbc f9f3 	udiv	r9, ip, r3
 8009c1e:	4610      	mov	r0, r2
 8009c20:	fb03 ca19 	mls	sl, r3, r9, ip
 8009c24:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8009c28:	2f09      	cmp	r7, #9
 8009c2a:	d81b      	bhi.n	8009c64 <_strtol_l.constprop.0+0xa8>
 8009c2c:	463c      	mov	r4, r7
 8009c2e:	42a3      	cmp	r3, r4
 8009c30:	dd27      	ble.n	8009c82 <_strtol_l.constprop.0+0xc6>
 8009c32:	1c57      	adds	r7, r2, #1
 8009c34:	d007      	beq.n	8009c46 <_strtol_l.constprop.0+0x8a>
 8009c36:	4581      	cmp	r9, r0
 8009c38:	d320      	bcc.n	8009c7c <_strtol_l.constprop.0+0xc0>
 8009c3a:	d101      	bne.n	8009c40 <_strtol_l.constprop.0+0x84>
 8009c3c:	45a2      	cmp	sl, r4
 8009c3e:	db1d      	blt.n	8009c7c <_strtol_l.constprop.0+0xc0>
 8009c40:	fb00 4003 	mla	r0, r0, r3, r4
 8009c44:	2201      	movs	r2, #1
 8009c46:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009c4a:	e7eb      	b.n	8009c24 <_strtol_l.constprop.0+0x68>
 8009c4c:	2c2b      	cmp	r4, #43	@ 0x2b
 8009c4e:	bf04      	itt	eq
 8009c50:	782c      	ldrbeq	r4, [r5, #0]
 8009c52:	1c95      	addeq	r5, r2, #2
 8009c54:	e7cf      	b.n	8009bf6 <_strtol_l.constprop.0+0x3a>
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d1da      	bne.n	8009c10 <_strtol_l.constprop.0+0x54>
 8009c5a:	2c30      	cmp	r4, #48	@ 0x30
 8009c5c:	bf0c      	ite	eq
 8009c5e:	2308      	moveq	r3, #8
 8009c60:	230a      	movne	r3, #10
 8009c62:	e7d5      	b.n	8009c10 <_strtol_l.constprop.0+0x54>
 8009c64:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8009c68:	2f19      	cmp	r7, #25
 8009c6a:	d801      	bhi.n	8009c70 <_strtol_l.constprop.0+0xb4>
 8009c6c:	3c37      	subs	r4, #55	@ 0x37
 8009c6e:	e7de      	b.n	8009c2e <_strtol_l.constprop.0+0x72>
 8009c70:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8009c74:	2f19      	cmp	r7, #25
 8009c76:	d804      	bhi.n	8009c82 <_strtol_l.constprop.0+0xc6>
 8009c78:	3c57      	subs	r4, #87	@ 0x57
 8009c7a:	e7d8      	b.n	8009c2e <_strtol_l.constprop.0+0x72>
 8009c7c:	f04f 32ff 	mov.w	r2, #4294967295
 8009c80:	e7e1      	b.n	8009c46 <_strtol_l.constprop.0+0x8a>
 8009c82:	1c53      	adds	r3, r2, #1
 8009c84:	d108      	bne.n	8009c98 <_strtol_l.constprop.0+0xdc>
 8009c86:	2322      	movs	r3, #34	@ 0x22
 8009c88:	f8ce 3000 	str.w	r3, [lr]
 8009c8c:	4660      	mov	r0, ip
 8009c8e:	f1b8 0f00 	cmp.w	r8, #0
 8009c92:	d0a0      	beq.n	8009bd6 <_strtol_l.constprop.0+0x1a>
 8009c94:	1e69      	subs	r1, r5, #1
 8009c96:	e006      	b.n	8009ca6 <_strtol_l.constprop.0+0xea>
 8009c98:	b106      	cbz	r6, 8009c9c <_strtol_l.constprop.0+0xe0>
 8009c9a:	4240      	negs	r0, r0
 8009c9c:	f1b8 0f00 	cmp.w	r8, #0
 8009ca0:	d099      	beq.n	8009bd6 <_strtol_l.constprop.0+0x1a>
 8009ca2:	2a00      	cmp	r2, #0
 8009ca4:	d1f6      	bne.n	8009c94 <_strtol_l.constprop.0+0xd8>
 8009ca6:	f8c8 1000 	str.w	r1, [r8]
 8009caa:	e794      	b.n	8009bd6 <_strtol_l.constprop.0+0x1a>
 8009cac:	08010181 	.word	0x08010181

08009cb0 <_strtol_r>:
 8009cb0:	f7ff bf84 	b.w	8009bbc <_strtol_l.constprop.0>

08009cb4 <strtol>:
 8009cb4:	4613      	mov	r3, r2
 8009cb6:	460a      	mov	r2, r1
 8009cb8:	4601      	mov	r1, r0
 8009cba:	4802      	ldr	r0, [pc, #8]	@ (8009cc4 <strtol+0x10>)
 8009cbc:	6800      	ldr	r0, [r0, #0]
 8009cbe:	f7ff bf7d 	b.w	8009bbc <_strtol_l.constprop.0>
 8009cc2:	bf00      	nop
 8009cc4:	2000019c 	.word	0x2000019c

08009cc8 <__cvt>:
 8009cc8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009ccc:	ec57 6b10 	vmov	r6, r7, d0
 8009cd0:	2f00      	cmp	r7, #0
 8009cd2:	460c      	mov	r4, r1
 8009cd4:	4619      	mov	r1, r3
 8009cd6:	463b      	mov	r3, r7
 8009cd8:	bfbb      	ittet	lt
 8009cda:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8009cde:	461f      	movlt	r7, r3
 8009ce0:	2300      	movge	r3, #0
 8009ce2:	232d      	movlt	r3, #45	@ 0x2d
 8009ce4:	700b      	strb	r3, [r1, #0]
 8009ce6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009ce8:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8009cec:	4691      	mov	r9, r2
 8009cee:	f023 0820 	bic.w	r8, r3, #32
 8009cf2:	bfbc      	itt	lt
 8009cf4:	4632      	movlt	r2, r6
 8009cf6:	4616      	movlt	r6, r2
 8009cf8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009cfc:	d005      	beq.n	8009d0a <__cvt+0x42>
 8009cfe:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8009d02:	d100      	bne.n	8009d06 <__cvt+0x3e>
 8009d04:	3401      	adds	r4, #1
 8009d06:	2102      	movs	r1, #2
 8009d08:	e000      	b.n	8009d0c <__cvt+0x44>
 8009d0a:	2103      	movs	r1, #3
 8009d0c:	ab03      	add	r3, sp, #12
 8009d0e:	9301      	str	r3, [sp, #4]
 8009d10:	ab02      	add	r3, sp, #8
 8009d12:	9300      	str	r3, [sp, #0]
 8009d14:	ec47 6b10 	vmov	d0, r6, r7
 8009d18:	4653      	mov	r3, sl
 8009d1a:	4622      	mov	r2, r4
 8009d1c:	f001 ff08 	bl	800bb30 <_dtoa_r>
 8009d20:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8009d24:	4605      	mov	r5, r0
 8009d26:	d119      	bne.n	8009d5c <__cvt+0x94>
 8009d28:	f019 0f01 	tst.w	r9, #1
 8009d2c:	d00e      	beq.n	8009d4c <__cvt+0x84>
 8009d2e:	eb00 0904 	add.w	r9, r0, r4
 8009d32:	2200      	movs	r2, #0
 8009d34:	2300      	movs	r3, #0
 8009d36:	4630      	mov	r0, r6
 8009d38:	4639      	mov	r1, r7
 8009d3a:	f7f6 fed5 	bl	8000ae8 <__aeabi_dcmpeq>
 8009d3e:	b108      	cbz	r0, 8009d44 <__cvt+0x7c>
 8009d40:	f8cd 900c 	str.w	r9, [sp, #12]
 8009d44:	2230      	movs	r2, #48	@ 0x30
 8009d46:	9b03      	ldr	r3, [sp, #12]
 8009d48:	454b      	cmp	r3, r9
 8009d4a:	d31e      	bcc.n	8009d8a <__cvt+0xc2>
 8009d4c:	9b03      	ldr	r3, [sp, #12]
 8009d4e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009d50:	1b5b      	subs	r3, r3, r5
 8009d52:	4628      	mov	r0, r5
 8009d54:	6013      	str	r3, [r2, #0]
 8009d56:	b004      	add	sp, #16
 8009d58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d5c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009d60:	eb00 0904 	add.w	r9, r0, r4
 8009d64:	d1e5      	bne.n	8009d32 <__cvt+0x6a>
 8009d66:	7803      	ldrb	r3, [r0, #0]
 8009d68:	2b30      	cmp	r3, #48	@ 0x30
 8009d6a:	d10a      	bne.n	8009d82 <__cvt+0xba>
 8009d6c:	2200      	movs	r2, #0
 8009d6e:	2300      	movs	r3, #0
 8009d70:	4630      	mov	r0, r6
 8009d72:	4639      	mov	r1, r7
 8009d74:	f7f6 feb8 	bl	8000ae8 <__aeabi_dcmpeq>
 8009d78:	b918      	cbnz	r0, 8009d82 <__cvt+0xba>
 8009d7a:	f1c4 0401 	rsb	r4, r4, #1
 8009d7e:	f8ca 4000 	str.w	r4, [sl]
 8009d82:	f8da 3000 	ldr.w	r3, [sl]
 8009d86:	4499      	add	r9, r3
 8009d88:	e7d3      	b.n	8009d32 <__cvt+0x6a>
 8009d8a:	1c59      	adds	r1, r3, #1
 8009d8c:	9103      	str	r1, [sp, #12]
 8009d8e:	701a      	strb	r2, [r3, #0]
 8009d90:	e7d9      	b.n	8009d46 <__cvt+0x7e>

08009d92 <__exponent>:
 8009d92:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009d94:	2900      	cmp	r1, #0
 8009d96:	bfba      	itte	lt
 8009d98:	4249      	neglt	r1, r1
 8009d9a:	232d      	movlt	r3, #45	@ 0x2d
 8009d9c:	232b      	movge	r3, #43	@ 0x2b
 8009d9e:	2909      	cmp	r1, #9
 8009da0:	7002      	strb	r2, [r0, #0]
 8009da2:	7043      	strb	r3, [r0, #1]
 8009da4:	dd29      	ble.n	8009dfa <__exponent+0x68>
 8009da6:	f10d 0307 	add.w	r3, sp, #7
 8009daa:	461d      	mov	r5, r3
 8009dac:	270a      	movs	r7, #10
 8009dae:	461a      	mov	r2, r3
 8009db0:	fbb1 f6f7 	udiv	r6, r1, r7
 8009db4:	fb07 1416 	mls	r4, r7, r6, r1
 8009db8:	3430      	adds	r4, #48	@ 0x30
 8009dba:	f802 4c01 	strb.w	r4, [r2, #-1]
 8009dbe:	460c      	mov	r4, r1
 8009dc0:	2c63      	cmp	r4, #99	@ 0x63
 8009dc2:	f103 33ff 	add.w	r3, r3, #4294967295
 8009dc6:	4631      	mov	r1, r6
 8009dc8:	dcf1      	bgt.n	8009dae <__exponent+0x1c>
 8009dca:	3130      	adds	r1, #48	@ 0x30
 8009dcc:	1e94      	subs	r4, r2, #2
 8009dce:	f803 1c01 	strb.w	r1, [r3, #-1]
 8009dd2:	1c41      	adds	r1, r0, #1
 8009dd4:	4623      	mov	r3, r4
 8009dd6:	42ab      	cmp	r3, r5
 8009dd8:	d30a      	bcc.n	8009df0 <__exponent+0x5e>
 8009dda:	f10d 0309 	add.w	r3, sp, #9
 8009dde:	1a9b      	subs	r3, r3, r2
 8009de0:	42ac      	cmp	r4, r5
 8009de2:	bf88      	it	hi
 8009de4:	2300      	movhi	r3, #0
 8009de6:	3302      	adds	r3, #2
 8009de8:	4403      	add	r3, r0
 8009dea:	1a18      	subs	r0, r3, r0
 8009dec:	b003      	add	sp, #12
 8009dee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009df0:	f813 6b01 	ldrb.w	r6, [r3], #1
 8009df4:	f801 6f01 	strb.w	r6, [r1, #1]!
 8009df8:	e7ed      	b.n	8009dd6 <__exponent+0x44>
 8009dfa:	2330      	movs	r3, #48	@ 0x30
 8009dfc:	3130      	adds	r1, #48	@ 0x30
 8009dfe:	7083      	strb	r3, [r0, #2]
 8009e00:	70c1      	strb	r1, [r0, #3]
 8009e02:	1d03      	adds	r3, r0, #4
 8009e04:	e7f1      	b.n	8009dea <__exponent+0x58>
	...

08009e08 <_printf_float>:
 8009e08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e0c:	b08d      	sub	sp, #52	@ 0x34
 8009e0e:	460c      	mov	r4, r1
 8009e10:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8009e14:	4616      	mov	r6, r2
 8009e16:	461f      	mov	r7, r3
 8009e18:	4605      	mov	r5, r0
 8009e1a:	f001 fd47 	bl	800b8ac <_localeconv_r>
 8009e1e:	6803      	ldr	r3, [r0, #0]
 8009e20:	9304      	str	r3, [sp, #16]
 8009e22:	4618      	mov	r0, r3
 8009e24:	f7f6 fa34 	bl	8000290 <strlen>
 8009e28:	2300      	movs	r3, #0
 8009e2a:	930a      	str	r3, [sp, #40]	@ 0x28
 8009e2c:	f8d8 3000 	ldr.w	r3, [r8]
 8009e30:	9005      	str	r0, [sp, #20]
 8009e32:	3307      	adds	r3, #7
 8009e34:	f023 0307 	bic.w	r3, r3, #7
 8009e38:	f103 0208 	add.w	r2, r3, #8
 8009e3c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8009e40:	f8d4 b000 	ldr.w	fp, [r4]
 8009e44:	f8c8 2000 	str.w	r2, [r8]
 8009e48:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009e4c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8009e50:	9307      	str	r3, [sp, #28]
 8009e52:	f8cd 8018 	str.w	r8, [sp, #24]
 8009e56:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8009e5a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009e5e:	4b9c      	ldr	r3, [pc, #624]	@ (800a0d0 <_printf_float+0x2c8>)
 8009e60:	f04f 32ff 	mov.w	r2, #4294967295
 8009e64:	f7f6 fe72 	bl	8000b4c <__aeabi_dcmpun>
 8009e68:	bb70      	cbnz	r0, 8009ec8 <_printf_float+0xc0>
 8009e6a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009e6e:	4b98      	ldr	r3, [pc, #608]	@ (800a0d0 <_printf_float+0x2c8>)
 8009e70:	f04f 32ff 	mov.w	r2, #4294967295
 8009e74:	f7f6 fe4c 	bl	8000b10 <__aeabi_dcmple>
 8009e78:	bb30      	cbnz	r0, 8009ec8 <_printf_float+0xc0>
 8009e7a:	2200      	movs	r2, #0
 8009e7c:	2300      	movs	r3, #0
 8009e7e:	4640      	mov	r0, r8
 8009e80:	4649      	mov	r1, r9
 8009e82:	f7f6 fe3b 	bl	8000afc <__aeabi_dcmplt>
 8009e86:	b110      	cbz	r0, 8009e8e <_printf_float+0x86>
 8009e88:	232d      	movs	r3, #45	@ 0x2d
 8009e8a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009e8e:	4a91      	ldr	r2, [pc, #580]	@ (800a0d4 <_printf_float+0x2cc>)
 8009e90:	4b91      	ldr	r3, [pc, #580]	@ (800a0d8 <_printf_float+0x2d0>)
 8009e92:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8009e96:	bf94      	ite	ls
 8009e98:	4690      	movls	r8, r2
 8009e9a:	4698      	movhi	r8, r3
 8009e9c:	2303      	movs	r3, #3
 8009e9e:	6123      	str	r3, [r4, #16]
 8009ea0:	f02b 0304 	bic.w	r3, fp, #4
 8009ea4:	6023      	str	r3, [r4, #0]
 8009ea6:	f04f 0900 	mov.w	r9, #0
 8009eaa:	9700      	str	r7, [sp, #0]
 8009eac:	4633      	mov	r3, r6
 8009eae:	aa0b      	add	r2, sp, #44	@ 0x2c
 8009eb0:	4621      	mov	r1, r4
 8009eb2:	4628      	mov	r0, r5
 8009eb4:	f000 f9d2 	bl	800a25c <_printf_common>
 8009eb8:	3001      	adds	r0, #1
 8009eba:	f040 808d 	bne.w	8009fd8 <_printf_float+0x1d0>
 8009ebe:	f04f 30ff 	mov.w	r0, #4294967295
 8009ec2:	b00d      	add	sp, #52	@ 0x34
 8009ec4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ec8:	4642      	mov	r2, r8
 8009eca:	464b      	mov	r3, r9
 8009ecc:	4640      	mov	r0, r8
 8009ece:	4649      	mov	r1, r9
 8009ed0:	f7f6 fe3c 	bl	8000b4c <__aeabi_dcmpun>
 8009ed4:	b140      	cbz	r0, 8009ee8 <_printf_float+0xe0>
 8009ed6:	464b      	mov	r3, r9
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	bfbc      	itt	lt
 8009edc:	232d      	movlt	r3, #45	@ 0x2d
 8009ede:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8009ee2:	4a7e      	ldr	r2, [pc, #504]	@ (800a0dc <_printf_float+0x2d4>)
 8009ee4:	4b7e      	ldr	r3, [pc, #504]	@ (800a0e0 <_printf_float+0x2d8>)
 8009ee6:	e7d4      	b.n	8009e92 <_printf_float+0x8a>
 8009ee8:	6863      	ldr	r3, [r4, #4]
 8009eea:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8009eee:	9206      	str	r2, [sp, #24]
 8009ef0:	1c5a      	adds	r2, r3, #1
 8009ef2:	d13b      	bne.n	8009f6c <_printf_float+0x164>
 8009ef4:	2306      	movs	r3, #6
 8009ef6:	6063      	str	r3, [r4, #4]
 8009ef8:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8009efc:	2300      	movs	r3, #0
 8009efe:	6022      	str	r2, [r4, #0]
 8009f00:	9303      	str	r3, [sp, #12]
 8009f02:	ab0a      	add	r3, sp, #40	@ 0x28
 8009f04:	e9cd a301 	strd	sl, r3, [sp, #4]
 8009f08:	ab09      	add	r3, sp, #36	@ 0x24
 8009f0a:	9300      	str	r3, [sp, #0]
 8009f0c:	6861      	ldr	r1, [r4, #4]
 8009f0e:	ec49 8b10 	vmov	d0, r8, r9
 8009f12:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8009f16:	4628      	mov	r0, r5
 8009f18:	f7ff fed6 	bl	8009cc8 <__cvt>
 8009f1c:	9b06      	ldr	r3, [sp, #24]
 8009f1e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009f20:	2b47      	cmp	r3, #71	@ 0x47
 8009f22:	4680      	mov	r8, r0
 8009f24:	d129      	bne.n	8009f7a <_printf_float+0x172>
 8009f26:	1cc8      	adds	r0, r1, #3
 8009f28:	db02      	blt.n	8009f30 <_printf_float+0x128>
 8009f2a:	6863      	ldr	r3, [r4, #4]
 8009f2c:	4299      	cmp	r1, r3
 8009f2e:	dd41      	ble.n	8009fb4 <_printf_float+0x1ac>
 8009f30:	f1aa 0a02 	sub.w	sl, sl, #2
 8009f34:	fa5f fa8a 	uxtb.w	sl, sl
 8009f38:	3901      	subs	r1, #1
 8009f3a:	4652      	mov	r2, sl
 8009f3c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8009f40:	9109      	str	r1, [sp, #36]	@ 0x24
 8009f42:	f7ff ff26 	bl	8009d92 <__exponent>
 8009f46:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009f48:	1813      	adds	r3, r2, r0
 8009f4a:	2a01      	cmp	r2, #1
 8009f4c:	4681      	mov	r9, r0
 8009f4e:	6123      	str	r3, [r4, #16]
 8009f50:	dc02      	bgt.n	8009f58 <_printf_float+0x150>
 8009f52:	6822      	ldr	r2, [r4, #0]
 8009f54:	07d2      	lsls	r2, r2, #31
 8009f56:	d501      	bpl.n	8009f5c <_printf_float+0x154>
 8009f58:	3301      	adds	r3, #1
 8009f5a:	6123      	str	r3, [r4, #16]
 8009f5c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d0a2      	beq.n	8009eaa <_printf_float+0xa2>
 8009f64:	232d      	movs	r3, #45	@ 0x2d
 8009f66:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009f6a:	e79e      	b.n	8009eaa <_printf_float+0xa2>
 8009f6c:	9a06      	ldr	r2, [sp, #24]
 8009f6e:	2a47      	cmp	r2, #71	@ 0x47
 8009f70:	d1c2      	bne.n	8009ef8 <_printf_float+0xf0>
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	d1c0      	bne.n	8009ef8 <_printf_float+0xf0>
 8009f76:	2301      	movs	r3, #1
 8009f78:	e7bd      	b.n	8009ef6 <_printf_float+0xee>
 8009f7a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009f7e:	d9db      	bls.n	8009f38 <_printf_float+0x130>
 8009f80:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8009f84:	d118      	bne.n	8009fb8 <_printf_float+0x1b0>
 8009f86:	2900      	cmp	r1, #0
 8009f88:	6863      	ldr	r3, [r4, #4]
 8009f8a:	dd0b      	ble.n	8009fa4 <_printf_float+0x19c>
 8009f8c:	6121      	str	r1, [r4, #16]
 8009f8e:	b913      	cbnz	r3, 8009f96 <_printf_float+0x18e>
 8009f90:	6822      	ldr	r2, [r4, #0]
 8009f92:	07d0      	lsls	r0, r2, #31
 8009f94:	d502      	bpl.n	8009f9c <_printf_float+0x194>
 8009f96:	3301      	adds	r3, #1
 8009f98:	440b      	add	r3, r1
 8009f9a:	6123      	str	r3, [r4, #16]
 8009f9c:	65a1      	str	r1, [r4, #88]	@ 0x58
 8009f9e:	f04f 0900 	mov.w	r9, #0
 8009fa2:	e7db      	b.n	8009f5c <_printf_float+0x154>
 8009fa4:	b913      	cbnz	r3, 8009fac <_printf_float+0x1a4>
 8009fa6:	6822      	ldr	r2, [r4, #0]
 8009fa8:	07d2      	lsls	r2, r2, #31
 8009faa:	d501      	bpl.n	8009fb0 <_printf_float+0x1a8>
 8009fac:	3302      	adds	r3, #2
 8009fae:	e7f4      	b.n	8009f9a <_printf_float+0x192>
 8009fb0:	2301      	movs	r3, #1
 8009fb2:	e7f2      	b.n	8009f9a <_printf_float+0x192>
 8009fb4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8009fb8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009fba:	4299      	cmp	r1, r3
 8009fbc:	db05      	blt.n	8009fca <_printf_float+0x1c2>
 8009fbe:	6823      	ldr	r3, [r4, #0]
 8009fc0:	6121      	str	r1, [r4, #16]
 8009fc2:	07d8      	lsls	r0, r3, #31
 8009fc4:	d5ea      	bpl.n	8009f9c <_printf_float+0x194>
 8009fc6:	1c4b      	adds	r3, r1, #1
 8009fc8:	e7e7      	b.n	8009f9a <_printf_float+0x192>
 8009fca:	2900      	cmp	r1, #0
 8009fcc:	bfd4      	ite	le
 8009fce:	f1c1 0202 	rsble	r2, r1, #2
 8009fd2:	2201      	movgt	r2, #1
 8009fd4:	4413      	add	r3, r2
 8009fd6:	e7e0      	b.n	8009f9a <_printf_float+0x192>
 8009fd8:	6823      	ldr	r3, [r4, #0]
 8009fda:	055a      	lsls	r2, r3, #21
 8009fdc:	d407      	bmi.n	8009fee <_printf_float+0x1e6>
 8009fde:	6923      	ldr	r3, [r4, #16]
 8009fe0:	4642      	mov	r2, r8
 8009fe2:	4631      	mov	r1, r6
 8009fe4:	4628      	mov	r0, r5
 8009fe6:	47b8      	blx	r7
 8009fe8:	3001      	adds	r0, #1
 8009fea:	d12b      	bne.n	800a044 <_printf_float+0x23c>
 8009fec:	e767      	b.n	8009ebe <_printf_float+0xb6>
 8009fee:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009ff2:	f240 80dd 	bls.w	800a1b0 <_printf_float+0x3a8>
 8009ff6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009ffa:	2200      	movs	r2, #0
 8009ffc:	2300      	movs	r3, #0
 8009ffe:	f7f6 fd73 	bl	8000ae8 <__aeabi_dcmpeq>
 800a002:	2800      	cmp	r0, #0
 800a004:	d033      	beq.n	800a06e <_printf_float+0x266>
 800a006:	4a37      	ldr	r2, [pc, #220]	@ (800a0e4 <_printf_float+0x2dc>)
 800a008:	2301      	movs	r3, #1
 800a00a:	4631      	mov	r1, r6
 800a00c:	4628      	mov	r0, r5
 800a00e:	47b8      	blx	r7
 800a010:	3001      	adds	r0, #1
 800a012:	f43f af54 	beq.w	8009ebe <_printf_float+0xb6>
 800a016:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800a01a:	4543      	cmp	r3, r8
 800a01c:	db02      	blt.n	800a024 <_printf_float+0x21c>
 800a01e:	6823      	ldr	r3, [r4, #0]
 800a020:	07d8      	lsls	r0, r3, #31
 800a022:	d50f      	bpl.n	800a044 <_printf_float+0x23c>
 800a024:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a028:	4631      	mov	r1, r6
 800a02a:	4628      	mov	r0, r5
 800a02c:	47b8      	blx	r7
 800a02e:	3001      	adds	r0, #1
 800a030:	f43f af45 	beq.w	8009ebe <_printf_float+0xb6>
 800a034:	f04f 0900 	mov.w	r9, #0
 800a038:	f108 38ff 	add.w	r8, r8, #4294967295
 800a03c:	f104 0a1a 	add.w	sl, r4, #26
 800a040:	45c8      	cmp	r8, r9
 800a042:	dc09      	bgt.n	800a058 <_printf_float+0x250>
 800a044:	6823      	ldr	r3, [r4, #0]
 800a046:	079b      	lsls	r3, r3, #30
 800a048:	f100 8103 	bmi.w	800a252 <_printf_float+0x44a>
 800a04c:	68e0      	ldr	r0, [r4, #12]
 800a04e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a050:	4298      	cmp	r0, r3
 800a052:	bfb8      	it	lt
 800a054:	4618      	movlt	r0, r3
 800a056:	e734      	b.n	8009ec2 <_printf_float+0xba>
 800a058:	2301      	movs	r3, #1
 800a05a:	4652      	mov	r2, sl
 800a05c:	4631      	mov	r1, r6
 800a05e:	4628      	mov	r0, r5
 800a060:	47b8      	blx	r7
 800a062:	3001      	adds	r0, #1
 800a064:	f43f af2b 	beq.w	8009ebe <_printf_float+0xb6>
 800a068:	f109 0901 	add.w	r9, r9, #1
 800a06c:	e7e8      	b.n	800a040 <_printf_float+0x238>
 800a06e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a070:	2b00      	cmp	r3, #0
 800a072:	dc39      	bgt.n	800a0e8 <_printf_float+0x2e0>
 800a074:	4a1b      	ldr	r2, [pc, #108]	@ (800a0e4 <_printf_float+0x2dc>)
 800a076:	2301      	movs	r3, #1
 800a078:	4631      	mov	r1, r6
 800a07a:	4628      	mov	r0, r5
 800a07c:	47b8      	blx	r7
 800a07e:	3001      	adds	r0, #1
 800a080:	f43f af1d 	beq.w	8009ebe <_printf_float+0xb6>
 800a084:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800a088:	ea59 0303 	orrs.w	r3, r9, r3
 800a08c:	d102      	bne.n	800a094 <_printf_float+0x28c>
 800a08e:	6823      	ldr	r3, [r4, #0]
 800a090:	07d9      	lsls	r1, r3, #31
 800a092:	d5d7      	bpl.n	800a044 <_printf_float+0x23c>
 800a094:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a098:	4631      	mov	r1, r6
 800a09a:	4628      	mov	r0, r5
 800a09c:	47b8      	blx	r7
 800a09e:	3001      	adds	r0, #1
 800a0a0:	f43f af0d 	beq.w	8009ebe <_printf_float+0xb6>
 800a0a4:	f04f 0a00 	mov.w	sl, #0
 800a0a8:	f104 0b1a 	add.w	fp, r4, #26
 800a0ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a0ae:	425b      	negs	r3, r3
 800a0b0:	4553      	cmp	r3, sl
 800a0b2:	dc01      	bgt.n	800a0b8 <_printf_float+0x2b0>
 800a0b4:	464b      	mov	r3, r9
 800a0b6:	e793      	b.n	8009fe0 <_printf_float+0x1d8>
 800a0b8:	2301      	movs	r3, #1
 800a0ba:	465a      	mov	r2, fp
 800a0bc:	4631      	mov	r1, r6
 800a0be:	4628      	mov	r0, r5
 800a0c0:	47b8      	blx	r7
 800a0c2:	3001      	adds	r0, #1
 800a0c4:	f43f aefb 	beq.w	8009ebe <_printf_float+0xb6>
 800a0c8:	f10a 0a01 	add.w	sl, sl, #1
 800a0cc:	e7ee      	b.n	800a0ac <_printf_float+0x2a4>
 800a0ce:	bf00      	nop
 800a0d0:	7fefffff 	.word	0x7fefffff
 800a0d4:	08010281 	.word	0x08010281
 800a0d8:	08010285 	.word	0x08010285
 800a0dc:	08010289 	.word	0x08010289
 800a0e0:	0801028d 	.word	0x0801028d
 800a0e4:	080105d7 	.word	0x080105d7
 800a0e8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a0ea:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800a0ee:	4553      	cmp	r3, sl
 800a0f0:	bfa8      	it	ge
 800a0f2:	4653      	movge	r3, sl
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	4699      	mov	r9, r3
 800a0f8:	dc36      	bgt.n	800a168 <_printf_float+0x360>
 800a0fa:	f04f 0b00 	mov.w	fp, #0
 800a0fe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a102:	f104 021a 	add.w	r2, r4, #26
 800a106:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a108:	9306      	str	r3, [sp, #24]
 800a10a:	eba3 0309 	sub.w	r3, r3, r9
 800a10e:	455b      	cmp	r3, fp
 800a110:	dc31      	bgt.n	800a176 <_printf_float+0x36e>
 800a112:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a114:	459a      	cmp	sl, r3
 800a116:	dc3a      	bgt.n	800a18e <_printf_float+0x386>
 800a118:	6823      	ldr	r3, [r4, #0]
 800a11a:	07da      	lsls	r2, r3, #31
 800a11c:	d437      	bmi.n	800a18e <_printf_float+0x386>
 800a11e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a120:	ebaa 0903 	sub.w	r9, sl, r3
 800a124:	9b06      	ldr	r3, [sp, #24]
 800a126:	ebaa 0303 	sub.w	r3, sl, r3
 800a12a:	4599      	cmp	r9, r3
 800a12c:	bfa8      	it	ge
 800a12e:	4699      	movge	r9, r3
 800a130:	f1b9 0f00 	cmp.w	r9, #0
 800a134:	dc33      	bgt.n	800a19e <_printf_float+0x396>
 800a136:	f04f 0800 	mov.w	r8, #0
 800a13a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a13e:	f104 0b1a 	add.w	fp, r4, #26
 800a142:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a144:	ebaa 0303 	sub.w	r3, sl, r3
 800a148:	eba3 0309 	sub.w	r3, r3, r9
 800a14c:	4543      	cmp	r3, r8
 800a14e:	f77f af79 	ble.w	800a044 <_printf_float+0x23c>
 800a152:	2301      	movs	r3, #1
 800a154:	465a      	mov	r2, fp
 800a156:	4631      	mov	r1, r6
 800a158:	4628      	mov	r0, r5
 800a15a:	47b8      	blx	r7
 800a15c:	3001      	adds	r0, #1
 800a15e:	f43f aeae 	beq.w	8009ebe <_printf_float+0xb6>
 800a162:	f108 0801 	add.w	r8, r8, #1
 800a166:	e7ec      	b.n	800a142 <_printf_float+0x33a>
 800a168:	4642      	mov	r2, r8
 800a16a:	4631      	mov	r1, r6
 800a16c:	4628      	mov	r0, r5
 800a16e:	47b8      	blx	r7
 800a170:	3001      	adds	r0, #1
 800a172:	d1c2      	bne.n	800a0fa <_printf_float+0x2f2>
 800a174:	e6a3      	b.n	8009ebe <_printf_float+0xb6>
 800a176:	2301      	movs	r3, #1
 800a178:	4631      	mov	r1, r6
 800a17a:	4628      	mov	r0, r5
 800a17c:	9206      	str	r2, [sp, #24]
 800a17e:	47b8      	blx	r7
 800a180:	3001      	adds	r0, #1
 800a182:	f43f ae9c 	beq.w	8009ebe <_printf_float+0xb6>
 800a186:	9a06      	ldr	r2, [sp, #24]
 800a188:	f10b 0b01 	add.w	fp, fp, #1
 800a18c:	e7bb      	b.n	800a106 <_printf_float+0x2fe>
 800a18e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a192:	4631      	mov	r1, r6
 800a194:	4628      	mov	r0, r5
 800a196:	47b8      	blx	r7
 800a198:	3001      	adds	r0, #1
 800a19a:	d1c0      	bne.n	800a11e <_printf_float+0x316>
 800a19c:	e68f      	b.n	8009ebe <_printf_float+0xb6>
 800a19e:	9a06      	ldr	r2, [sp, #24]
 800a1a0:	464b      	mov	r3, r9
 800a1a2:	4442      	add	r2, r8
 800a1a4:	4631      	mov	r1, r6
 800a1a6:	4628      	mov	r0, r5
 800a1a8:	47b8      	blx	r7
 800a1aa:	3001      	adds	r0, #1
 800a1ac:	d1c3      	bne.n	800a136 <_printf_float+0x32e>
 800a1ae:	e686      	b.n	8009ebe <_printf_float+0xb6>
 800a1b0:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800a1b4:	f1ba 0f01 	cmp.w	sl, #1
 800a1b8:	dc01      	bgt.n	800a1be <_printf_float+0x3b6>
 800a1ba:	07db      	lsls	r3, r3, #31
 800a1bc:	d536      	bpl.n	800a22c <_printf_float+0x424>
 800a1be:	2301      	movs	r3, #1
 800a1c0:	4642      	mov	r2, r8
 800a1c2:	4631      	mov	r1, r6
 800a1c4:	4628      	mov	r0, r5
 800a1c6:	47b8      	blx	r7
 800a1c8:	3001      	adds	r0, #1
 800a1ca:	f43f ae78 	beq.w	8009ebe <_printf_float+0xb6>
 800a1ce:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a1d2:	4631      	mov	r1, r6
 800a1d4:	4628      	mov	r0, r5
 800a1d6:	47b8      	blx	r7
 800a1d8:	3001      	adds	r0, #1
 800a1da:	f43f ae70 	beq.w	8009ebe <_printf_float+0xb6>
 800a1de:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a1e2:	2200      	movs	r2, #0
 800a1e4:	2300      	movs	r3, #0
 800a1e6:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a1ea:	f7f6 fc7d 	bl	8000ae8 <__aeabi_dcmpeq>
 800a1ee:	b9c0      	cbnz	r0, 800a222 <_printf_float+0x41a>
 800a1f0:	4653      	mov	r3, sl
 800a1f2:	f108 0201 	add.w	r2, r8, #1
 800a1f6:	4631      	mov	r1, r6
 800a1f8:	4628      	mov	r0, r5
 800a1fa:	47b8      	blx	r7
 800a1fc:	3001      	adds	r0, #1
 800a1fe:	d10c      	bne.n	800a21a <_printf_float+0x412>
 800a200:	e65d      	b.n	8009ebe <_printf_float+0xb6>
 800a202:	2301      	movs	r3, #1
 800a204:	465a      	mov	r2, fp
 800a206:	4631      	mov	r1, r6
 800a208:	4628      	mov	r0, r5
 800a20a:	47b8      	blx	r7
 800a20c:	3001      	adds	r0, #1
 800a20e:	f43f ae56 	beq.w	8009ebe <_printf_float+0xb6>
 800a212:	f108 0801 	add.w	r8, r8, #1
 800a216:	45d0      	cmp	r8, sl
 800a218:	dbf3      	blt.n	800a202 <_printf_float+0x3fa>
 800a21a:	464b      	mov	r3, r9
 800a21c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800a220:	e6df      	b.n	8009fe2 <_printf_float+0x1da>
 800a222:	f04f 0800 	mov.w	r8, #0
 800a226:	f104 0b1a 	add.w	fp, r4, #26
 800a22a:	e7f4      	b.n	800a216 <_printf_float+0x40e>
 800a22c:	2301      	movs	r3, #1
 800a22e:	4642      	mov	r2, r8
 800a230:	e7e1      	b.n	800a1f6 <_printf_float+0x3ee>
 800a232:	2301      	movs	r3, #1
 800a234:	464a      	mov	r2, r9
 800a236:	4631      	mov	r1, r6
 800a238:	4628      	mov	r0, r5
 800a23a:	47b8      	blx	r7
 800a23c:	3001      	adds	r0, #1
 800a23e:	f43f ae3e 	beq.w	8009ebe <_printf_float+0xb6>
 800a242:	f108 0801 	add.w	r8, r8, #1
 800a246:	68e3      	ldr	r3, [r4, #12]
 800a248:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a24a:	1a5b      	subs	r3, r3, r1
 800a24c:	4543      	cmp	r3, r8
 800a24e:	dcf0      	bgt.n	800a232 <_printf_float+0x42a>
 800a250:	e6fc      	b.n	800a04c <_printf_float+0x244>
 800a252:	f04f 0800 	mov.w	r8, #0
 800a256:	f104 0919 	add.w	r9, r4, #25
 800a25a:	e7f4      	b.n	800a246 <_printf_float+0x43e>

0800a25c <_printf_common>:
 800a25c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a260:	4616      	mov	r6, r2
 800a262:	4698      	mov	r8, r3
 800a264:	688a      	ldr	r2, [r1, #8]
 800a266:	690b      	ldr	r3, [r1, #16]
 800a268:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a26c:	4293      	cmp	r3, r2
 800a26e:	bfb8      	it	lt
 800a270:	4613      	movlt	r3, r2
 800a272:	6033      	str	r3, [r6, #0]
 800a274:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a278:	4607      	mov	r7, r0
 800a27a:	460c      	mov	r4, r1
 800a27c:	b10a      	cbz	r2, 800a282 <_printf_common+0x26>
 800a27e:	3301      	adds	r3, #1
 800a280:	6033      	str	r3, [r6, #0]
 800a282:	6823      	ldr	r3, [r4, #0]
 800a284:	0699      	lsls	r1, r3, #26
 800a286:	bf42      	ittt	mi
 800a288:	6833      	ldrmi	r3, [r6, #0]
 800a28a:	3302      	addmi	r3, #2
 800a28c:	6033      	strmi	r3, [r6, #0]
 800a28e:	6825      	ldr	r5, [r4, #0]
 800a290:	f015 0506 	ands.w	r5, r5, #6
 800a294:	d106      	bne.n	800a2a4 <_printf_common+0x48>
 800a296:	f104 0a19 	add.w	sl, r4, #25
 800a29a:	68e3      	ldr	r3, [r4, #12]
 800a29c:	6832      	ldr	r2, [r6, #0]
 800a29e:	1a9b      	subs	r3, r3, r2
 800a2a0:	42ab      	cmp	r3, r5
 800a2a2:	dc26      	bgt.n	800a2f2 <_printf_common+0x96>
 800a2a4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a2a8:	6822      	ldr	r2, [r4, #0]
 800a2aa:	3b00      	subs	r3, #0
 800a2ac:	bf18      	it	ne
 800a2ae:	2301      	movne	r3, #1
 800a2b0:	0692      	lsls	r2, r2, #26
 800a2b2:	d42b      	bmi.n	800a30c <_printf_common+0xb0>
 800a2b4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a2b8:	4641      	mov	r1, r8
 800a2ba:	4638      	mov	r0, r7
 800a2bc:	47c8      	blx	r9
 800a2be:	3001      	adds	r0, #1
 800a2c0:	d01e      	beq.n	800a300 <_printf_common+0xa4>
 800a2c2:	6823      	ldr	r3, [r4, #0]
 800a2c4:	6922      	ldr	r2, [r4, #16]
 800a2c6:	f003 0306 	and.w	r3, r3, #6
 800a2ca:	2b04      	cmp	r3, #4
 800a2cc:	bf02      	ittt	eq
 800a2ce:	68e5      	ldreq	r5, [r4, #12]
 800a2d0:	6833      	ldreq	r3, [r6, #0]
 800a2d2:	1aed      	subeq	r5, r5, r3
 800a2d4:	68a3      	ldr	r3, [r4, #8]
 800a2d6:	bf0c      	ite	eq
 800a2d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a2dc:	2500      	movne	r5, #0
 800a2de:	4293      	cmp	r3, r2
 800a2e0:	bfc4      	itt	gt
 800a2e2:	1a9b      	subgt	r3, r3, r2
 800a2e4:	18ed      	addgt	r5, r5, r3
 800a2e6:	2600      	movs	r6, #0
 800a2e8:	341a      	adds	r4, #26
 800a2ea:	42b5      	cmp	r5, r6
 800a2ec:	d11a      	bne.n	800a324 <_printf_common+0xc8>
 800a2ee:	2000      	movs	r0, #0
 800a2f0:	e008      	b.n	800a304 <_printf_common+0xa8>
 800a2f2:	2301      	movs	r3, #1
 800a2f4:	4652      	mov	r2, sl
 800a2f6:	4641      	mov	r1, r8
 800a2f8:	4638      	mov	r0, r7
 800a2fa:	47c8      	blx	r9
 800a2fc:	3001      	adds	r0, #1
 800a2fe:	d103      	bne.n	800a308 <_printf_common+0xac>
 800a300:	f04f 30ff 	mov.w	r0, #4294967295
 800a304:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a308:	3501      	adds	r5, #1
 800a30a:	e7c6      	b.n	800a29a <_printf_common+0x3e>
 800a30c:	18e1      	adds	r1, r4, r3
 800a30e:	1c5a      	adds	r2, r3, #1
 800a310:	2030      	movs	r0, #48	@ 0x30
 800a312:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a316:	4422      	add	r2, r4
 800a318:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a31c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a320:	3302      	adds	r3, #2
 800a322:	e7c7      	b.n	800a2b4 <_printf_common+0x58>
 800a324:	2301      	movs	r3, #1
 800a326:	4622      	mov	r2, r4
 800a328:	4641      	mov	r1, r8
 800a32a:	4638      	mov	r0, r7
 800a32c:	47c8      	blx	r9
 800a32e:	3001      	adds	r0, #1
 800a330:	d0e6      	beq.n	800a300 <_printf_common+0xa4>
 800a332:	3601      	adds	r6, #1
 800a334:	e7d9      	b.n	800a2ea <_printf_common+0x8e>
	...

0800a338 <_printf_i>:
 800a338:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a33c:	7e0f      	ldrb	r7, [r1, #24]
 800a33e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a340:	2f78      	cmp	r7, #120	@ 0x78
 800a342:	4691      	mov	r9, r2
 800a344:	4680      	mov	r8, r0
 800a346:	460c      	mov	r4, r1
 800a348:	469a      	mov	sl, r3
 800a34a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a34e:	d807      	bhi.n	800a360 <_printf_i+0x28>
 800a350:	2f62      	cmp	r7, #98	@ 0x62
 800a352:	d80a      	bhi.n	800a36a <_printf_i+0x32>
 800a354:	2f00      	cmp	r7, #0
 800a356:	f000 80d2 	beq.w	800a4fe <_printf_i+0x1c6>
 800a35a:	2f58      	cmp	r7, #88	@ 0x58
 800a35c:	f000 80b9 	beq.w	800a4d2 <_printf_i+0x19a>
 800a360:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a364:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a368:	e03a      	b.n	800a3e0 <_printf_i+0xa8>
 800a36a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a36e:	2b15      	cmp	r3, #21
 800a370:	d8f6      	bhi.n	800a360 <_printf_i+0x28>
 800a372:	a101      	add	r1, pc, #4	@ (adr r1, 800a378 <_printf_i+0x40>)
 800a374:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a378:	0800a3d1 	.word	0x0800a3d1
 800a37c:	0800a3e5 	.word	0x0800a3e5
 800a380:	0800a361 	.word	0x0800a361
 800a384:	0800a361 	.word	0x0800a361
 800a388:	0800a361 	.word	0x0800a361
 800a38c:	0800a361 	.word	0x0800a361
 800a390:	0800a3e5 	.word	0x0800a3e5
 800a394:	0800a361 	.word	0x0800a361
 800a398:	0800a361 	.word	0x0800a361
 800a39c:	0800a361 	.word	0x0800a361
 800a3a0:	0800a361 	.word	0x0800a361
 800a3a4:	0800a4e5 	.word	0x0800a4e5
 800a3a8:	0800a40f 	.word	0x0800a40f
 800a3ac:	0800a49f 	.word	0x0800a49f
 800a3b0:	0800a361 	.word	0x0800a361
 800a3b4:	0800a361 	.word	0x0800a361
 800a3b8:	0800a507 	.word	0x0800a507
 800a3bc:	0800a361 	.word	0x0800a361
 800a3c0:	0800a40f 	.word	0x0800a40f
 800a3c4:	0800a361 	.word	0x0800a361
 800a3c8:	0800a361 	.word	0x0800a361
 800a3cc:	0800a4a7 	.word	0x0800a4a7
 800a3d0:	6833      	ldr	r3, [r6, #0]
 800a3d2:	1d1a      	adds	r2, r3, #4
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	6032      	str	r2, [r6, #0]
 800a3d8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a3dc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a3e0:	2301      	movs	r3, #1
 800a3e2:	e09d      	b.n	800a520 <_printf_i+0x1e8>
 800a3e4:	6833      	ldr	r3, [r6, #0]
 800a3e6:	6820      	ldr	r0, [r4, #0]
 800a3e8:	1d19      	adds	r1, r3, #4
 800a3ea:	6031      	str	r1, [r6, #0]
 800a3ec:	0606      	lsls	r6, r0, #24
 800a3ee:	d501      	bpl.n	800a3f4 <_printf_i+0xbc>
 800a3f0:	681d      	ldr	r5, [r3, #0]
 800a3f2:	e003      	b.n	800a3fc <_printf_i+0xc4>
 800a3f4:	0645      	lsls	r5, r0, #25
 800a3f6:	d5fb      	bpl.n	800a3f0 <_printf_i+0xb8>
 800a3f8:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a3fc:	2d00      	cmp	r5, #0
 800a3fe:	da03      	bge.n	800a408 <_printf_i+0xd0>
 800a400:	232d      	movs	r3, #45	@ 0x2d
 800a402:	426d      	negs	r5, r5
 800a404:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a408:	4859      	ldr	r0, [pc, #356]	@ (800a570 <_printf_i+0x238>)
 800a40a:	230a      	movs	r3, #10
 800a40c:	e011      	b.n	800a432 <_printf_i+0xfa>
 800a40e:	6821      	ldr	r1, [r4, #0]
 800a410:	6833      	ldr	r3, [r6, #0]
 800a412:	0608      	lsls	r0, r1, #24
 800a414:	f853 5b04 	ldr.w	r5, [r3], #4
 800a418:	d402      	bmi.n	800a420 <_printf_i+0xe8>
 800a41a:	0649      	lsls	r1, r1, #25
 800a41c:	bf48      	it	mi
 800a41e:	b2ad      	uxthmi	r5, r5
 800a420:	2f6f      	cmp	r7, #111	@ 0x6f
 800a422:	4853      	ldr	r0, [pc, #332]	@ (800a570 <_printf_i+0x238>)
 800a424:	6033      	str	r3, [r6, #0]
 800a426:	bf14      	ite	ne
 800a428:	230a      	movne	r3, #10
 800a42a:	2308      	moveq	r3, #8
 800a42c:	2100      	movs	r1, #0
 800a42e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a432:	6866      	ldr	r6, [r4, #4]
 800a434:	60a6      	str	r6, [r4, #8]
 800a436:	2e00      	cmp	r6, #0
 800a438:	bfa2      	ittt	ge
 800a43a:	6821      	ldrge	r1, [r4, #0]
 800a43c:	f021 0104 	bicge.w	r1, r1, #4
 800a440:	6021      	strge	r1, [r4, #0]
 800a442:	b90d      	cbnz	r5, 800a448 <_printf_i+0x110>
 800a444:	2e00      	cmp	r6, #0
 800a446:	d04b      	beq.n	800a4e0 <_printf_i+0x1a8>
 800a448:	4616      	mov	r6, r2
 800a44a:	fbb5 f1f3 	udiv	r1, r5, r3
 800a44e:	fb03 5711 	mls	r7, r3, r1, r5
 800a452:	5dc7      	ldrb	r7, [r0, r7]
 800a454:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a458:	462f      	mov	r7, r5
 800a45a:	42bb      	cmp	r3, r7
 800a45c:	460d      	mov	r5, r1
 800a45e:	d9f4      	bls.n	800a44a <_printf_i+0x112>
 800a460:	2b08      	cmp	r3, #8
 800a462:	d10b      	bne.n	800a47c <_printf_i+0x144>
 800a464:	6823      	ldr	r3, [r4, #0]
 800a466:	07df      	lsls	r7, r3, #31
 800a468:	d508      	bpl.n	800a47c <_printf_i+0x144>
 800a46a:	6923      	ldr	r3, [r4, #16]
 800a46c:	6861      	ldr	r1, [r4, #4]
 800a46e:	4299      	cmp	r1, r3
 800a470:	bfde      	ittt	le
 800a472:	2330      	movle	r3, #48	@ 0x30
 800a474:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a478:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a47c:	1b92      	subs	r2, r2, r6
 800a47e:	6122      	str	r2, [r4, #16]
 800a480:	f8cd a000 	str.w	sl, [sp]
 800a484:	464b      	mov	r3, r9
 800a486:	aa03      	add	r2, sp, #12
 800a488:	4621      	mov	r1, r4
 800a48a:	4640      	mov	r0, r8
 800a48c:	f7ff fee6 	bl	800a25c <_printf_common>
 800a490:	3001      	adds	r0, #1
 800a492:	d14a      	bne.n	800a52a <_printf_i+0x1f2>
 800a494:	f04f 30ff 	mov.w	r0, #4294967295
 800a498:	b004      	add	sp, #16
 800a49a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a49e:	6823      	ldr	r3, [r4, #0]
 800a4a0:	f043 0320 	orr.w	r3, r3, #32
 800a4a4:	6023      	str	r3, [r4, #0]
 800a4a6:	4833      	ldr	r0, [pc, #204]	@ (800a574 <_printf_i+0x23c>)
 800a4a8:	2778      	movs	r7, #120	@ 0x78
 800a4aa:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a4ae:	6823      	ldr	r3, [r4, #0]
 800a4b0:	6831      	ldr	r1, [r6, #0]
 800a4b2:	061f      	lsls	r7, r3, #24
 800a4b4:	f851 5b04 	ldr.w	r5, [r1], #4
 800a4b8:	d402      	bmi.n	800a4c0 <_printf_i+0x188>
 800a4ba:	065f      	lsls	r7, r3, #25
 800a4bc:	bf48      	it	mi
 800a4be:	b2ad      	uxthmi	r5, r5
 800a4c0:	6031      	str	r1, [r6, #0]
 800a4c2:	07d9      	lsls	r1, r3, #31
 800a4c4:	bf44      	itt	mi
 800a4c6:	f043 0320 	orrmi.w	r3, r3, #32
 800a4ca:	6023      	strmi	r3, [r4, #0]
 800a4cc:	b11d      	cbz	r5, 800a4d6 <_printf_i+0x19e>
 800a4ce:	2310      	movs	r3, #16
 800a4d0:	e7ac      	b.n	800a42c <_printf_i+0xf4>
 800a4d2:	4827      	ldr	r0, [pc, #156]	@ (800a570 <_printf_i+0x238>)
 800a4d4:	e7e9      	b.n	800a4aa <_printf_i+0x172>
 800a4d6:	6823      	ldr	r3, [r4, #0]
 800a4d8:	f023 0320 	bic.w	r3, r3, #32
 800a4dc:	6023      	str	r3, [r4, #0]
 800a4de:	e7f6      	b.n	800a4ce <_printf_i+0x196>
 800a4e0:	4616      	mov	r6, r2
 800a4e2:	e7bd      	b.n	800a460 <_printf_i+0x128>
 800a4e4:	6833      	ldr	r3, [r6, #0]
 800a4e6:	6825      	ldr	r5, [r4, #0]
 800a4e8:	6961      	ldr	r1, [r4, #20]
 800a4ea:	1d18      	adds	r0, r3, #4
 800a4ec:	6030      	str	r0, [r6, #0]
 800a4ee:	062e      	lsls	r6, r5, #24
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	d501      	bpl.n	800a4f8 <_printf_i+0x1c0>
 800a4f4:	6019      	str	r1, [r3, #0]
 800a4f6:	e002      	b.n	800a4fe <_printf_i+0x1c6>
 800a4f8:	0668      	lsls	r0, r5, #25
 800a4fa:	d5fb      	bpl.n	800a4f4 <_printf_i+0x1bc>
 800a4fc:	8019      	strh	r1, [r3, #0]
 800a4fe:	2300      	movs	r3, #0
 800a500:	6123      	str	r3, [r4, #16]
 800a502:	4616      	mov	r6, r2
 800a504:	e7bc      	b.n	800a480 <_printf_i+0x148>
 800a506:	6833      	ldr	r3, [r6, #0]
 800a508:	1d1a      	adds	r2, r3, #4
 800a50a:	6032      	str	r2, [r6, #0]
 800a50c:	681e      	ldr	r6, [r3, #0]
 800a50e:	6862      	ldr	r2, [r4, #4]
 800a510:	2100      	movs	r1, #0
 800a512:	4630      	mov	r0, r6
 800a514:	f7f5 fe6c 	bl	80001f0 <memchr>
 800a518:	b108      	cbz	r0, 800a51e <_printf_i+0x1e6>
 800a51a:	1b80      	subs	r0, r0, r6
 800a51c:	6060      	str	r0, [r4, #4]
 800a51e:	6863      	ldr	r3, [r4, #4]
 800a520:	6123      	str	r3, [r4, #16]
 800a522:	2300      	movs	r3, #0
 800a524:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a528:	e7aa      	b.n	800a480 <_printf_i+0x148>
 800a52a:	6923      	ldr	r3, [r4, #16]
 800a52c:	4632      	mov	r2, r6
 800a52e:	4649      	mov	r1, r9
 800a530:	4640      	mov	r0, r8
 800a532:	47d0      	blx	sl
 800a534:	3001      	adds	r0, #1
 800a536:	d0ad      	beq.n	800a494 <_printf_i+0x15c>
 800a538:	6823      	ldr	r3, [r4, #0]
 800a53a:	079b      	lsls	r3, r3, #30
 800a53c:	d413      	bmi.n	800a566 <_printf_i+0x22e>
 800a53e:	68e0      	ldr	r0, [r4, #12]
 800a540:	9b03      	ldr	r3, [sp, #12]
 800a542:	4298      	cmp	r0, r3
 800a544:	bfb8      	it	lt
 800a546:	4618      	movlt	r0, r3
 800a548:	e7a6      	b.n	800a498 <_printf_i+0x160>
 800a54a:	2301      	movs	r3, #1
 800a54c:	4632      	mov	r2, r6
 800a54e:	4649      	mov	r1, r9
 800a550:	4640      	mov	r0, r8
 800a552:	47d0      	blx	sl
 800a554:	3001      	adds	r0, #1
 800a556:	d09d      	beq.n	800a494 <_printf_i+0x15c>
 800a558:	3501      	adds	r5, #1
 800a55a:	68e3      	ldr	r3, [r4, #12]
 800a55c:	9903      	ldr	r1, [sp, #12]
 800a55e:	1a5b      	subs	r3, r3, r1
 800a560:	42ab      	cmp	r3, r5
 800a562:	dcf2      	bgt.n	800a54a <_printf_i+0x212>
 800a564:	e7eb      	b.n	800a53e <_printf_i+0x206>
 800a566:	2500      	movs	r5, #0
 800a568:	f104 0619 	add.w	r6, r4, #25
 800a56c:	e7f5      	b.n	800a55a <_printf_i+0x222>
 800a56e:	bf00      	nop
 800a570:	08010291 	.word	0x08010291
 800a574:	080102a2 	.word	0x080102a2

0800a578 <_scanf_float>:
 800a578:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a57c:	b087      	sub	sp, #28
 800a57e:	4617      	mov	r7, r2
 800a580:	9303      	str	r3, [sp, #12]
 800a582:	688b      	ldr	r3, [r1, #8]
 800a584:	1e5a      	subs	r2, r3, #1
 800a586:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800a58a:	bf81      	itttt	hi
 800a58c:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800a590:	eb03 0b05 	addhi.w	fp, r3, r5
 800a594:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800a598:	608b      	strhi	r3, [r1, #8]
 800a59a:	680b      	ldr	r3, [r1, #0]
 800a59c:	460a      	mov	r2, r1
 800a59e:	f04f 0500 	mov.w	r5, #0
 800a5a2:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800a5a6:	f842 3b1c 	str.w	r3, [r2], #28
 800a5aa:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800a5ae:	4680      	mov	r8, r0
 800a5b0:	460c      	mov	r4, r1
 800a5b2:	bf98      	it	ls
 800a5b4:	f04f 0b00 	movls.w	fp, #0
 800a5b8:	9201      	str	r2, [sp, #4]
 800a5ba:	4616      	mov	r6, r2
 800a5bc:	46aa      	mov	sl, r5
 800a5be:	46a9      	mov	r9, r5
 800a5c0:	9502      	str	r5, [sp, #8]
 800a5c2:	68a2      	ldr	r2, [r4, #8]
 800a5c4:	b152      	cbz	r2, 800a5dc <_scanf_float+0x64>
 800a5c6:	683b      	ldr	r3, [r7, #0]
 800a5c8:	781b      	ldrb	r3, [r3, #0]
 800a5ca:	2b4e      	cmp	r3, #78	@ 0x4e
 800a5cc:	d864      	bhi.n	800a698 <_scanf_float+0x120>
 800a5ce:	2b40      	cmp	r3, #64	@ 0x40
 800a5d0:	d83c      	bhi.n	800a64c <_scanf_float+0xd4>
 800a5d2:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800a5d6:	b2c8      	uxtb	r0, r1
 800a5d8:	280e      	cmp	r0, #14
 800a5da:	d93a      	bls.n	800a652 <_scanf_float+0xda>
 800a5dc:	f1b9 0f00 	cmp.w	r9, #0
 800a5e0:	d003      	beq.n	800a5ea <_scanf_float+0x72>
 800a5e2:	6823      	ldr	r3, [r4, #0]
 800a5e4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a5e8:	6023      	str	r3, [r4, #0]
 800a5ea:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a5ee:	f1ba 0f01 	cmp.w	sl, #1
 800a5f2:	f200 8117 	bhi.w	800a824 <_scanf_float+0x2ac>
 800a5f6:	9b01      	ldr	r3, [sp, #4]
 800a5f8:	429e      	cmp	r6, r3
 800a5fa:	f200 8108 	bhi.w	800a80e <_scanf_float+0x296>
 800a5fe:	2001      	movs	r0, #1
 800a600:	b007      	add	sp, #28
 800a602:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a606:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800a60a:	2a0d      	cmp	r2, #13
 800a60c:	d8e6      	bhi.n	800a5dc <_scanf_float+0x64>
 800a60e:	a101      	add	r1, pc, #4	@ (adr r1, 800a614 <_scanf_float+0x9c>)
 800a610:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800a614:	0800a75b 	.word	0x0800a75b
 800a618:	0800a5dd 	.word	0x0800a5dd
 800a61c:	0800a5dd 	.word	0x0800a5dd
 800a620:	0800a5dd 	.word	0x0800a5dd
 800a624:	0800a7bb 	.word	0x0800a7bb
 800a628:	0800a793 	.word	0x0800a793
 800a62c:	0800a5dd 	.word	0x0800a5dd
 800a630:	0800a5dd 	.word	0x0800a5dd
 800a634:	0800a769 	.word	0x0800a769
 800a638:	0800a5dd 	.word	0x0800a5dd
 800a63c:	0800a5dd 	.word	0x0800a5dd
 800a640:	0800a5dd 	.word	0x0800a5dd
 800a644:	0800a5dd 	.word	0x0800a5dd
 800a648:	0800a721 	.word	0x0800a721
 800a64c:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800a650:	e7db      	b.n	800a60a <_scanf_float+0x92>
 800a652:	290e      	cmp	r1, #14
 800a654:	d8c2      	bhi.n	800a5dc <_scanf_float+0x64>
 800a656:	a001      	add	r0, pc, #4	@ (adr r0, 800a65c <_scanf_float+0xe4>)
 800a658:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800a65c:	0800a711 	.word	0x0800a711
 800a660:	0800a5dd 	.word	0x0800a5dd
 800a664:	0800a711 	.word	0x0800a711
 800a668:	0800a7a7 	.word	0x0800a7a7
 800a66c:	0800a5dd 	.word	0x0800a5dd
 800a670:	0800a6b9 	.word	0x0800a6b9
 800a674:	0800a6f7 	.word	0x0800a6f7
 800a678:	0800a6f7 	.word	0x0800a6f7
 800a67c:	0800a6f7 	.word	0x0800a6f7
 800a680:	0800a6f7 	.word	0x0800a6f7
 800a684:	0800a6f7 	.word	0x0800a6f7
 800a688:	0800a6f7 	.word	0x0800a6f7
 800a68c:	0800a6f7 	.word	0x0800a6f7
 800a690:	0800a6f7 	.word	0x0800a6f7
 800a694:	0800a6f7 	.word	0x0800a6f7
 800a698:	2b6e      	cmp	r3, #110	@ 0x6e
 800a69a:	d809      	bhi.n	800a6b0 <_scanf_float+0x138>
 800a69c:	2b60      	cmp	r3, #96	@ 0x60
 800a69e:	d8b2      	bhi.n	800a606 <_scanf_float+0x8e>
 800a6a0:	2b54      	cmp	r3, #84	@ 0x54
 800a6a2:	d07b      	beq.n	800a79c <_scanf_float+0x224>
 800a6a4:	2b59      	cmp	r3, #89	@ 0x59
 800a6a6:	d199      	bne.n	800a5dc <_scanf_float+0x64>
 800a6a8:	2d07      	cmp	r5, #7
 800a6aa:	d197      	bne.n	800a5dc <_scanf_float+0x64>
 800a6ac:	2508      	movs	r5, #8
 800a6ae:	e02c      	b.n	800a70a <_scanf_float+0x192>
 800a6b0:	2b74      	cmp	r3, #116	@ 0x74
 800a6b2:	d073      	beq.n	800a79c <_scanf_float+0x224>
 800a6b4:	2b79      	cmp	r3, #121	@ 0x79
 800a6b6:	e7f6      	b.n	800a6a6 <_scanf_float+0x12e>
 800a6b8:	6821      	ldr	r1, [r4, #0]
 800a6ba:	05c8      	lsls	r0, r1, #23
 800a6bc:	d51b      	bpl.n	800a6f6 <_scanf_float+0x17e>
 800a6be:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800a6c2:	6021      	str	r1, [r4, #0]
 800a6c4:	f109 0901 	add.w	r9, r9, #1
 800a6c8:	f1bb 0f00 	cmp.w	fp, #0
 800a6cc:	d003      	beq.n	800a6d6 <_scanf_float+0x15e>
 800a6ce:	3201      	adds	r2, #1
 800a6d0:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a6d4:	60a2      	str	r2, [r4, #8]
 800a6d6:	68a3      	ldr	r3, [r4, #8]
 800a6d8:	3b01      	subs	r3, #1
 800a6da:	60a3      	str	r3, [r4, #8]
 800a6dc:	6923      	ldr	r3, [r4, #16]
 800a6de:	3301      	adds	r3, #1
 800a6e0:	6123      	str	r3, [r4, #16]
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	3b01      	subs	r3, #1
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	607b      	str	r3, [r7, #4]
 800a6ea:	f340 8087 	ble.w	800a7fc <_scanf_float+0x284>
 800a6ee:	683b      	ldr	r3, [r7, #0]
 800a6f0:	3301      	adds	r3, #1
 800a6f2:	603b      	str	r3, [r7, #0]
 800a6f4:	e765      	b.n	800a5c2 <_scanf_float+0x4a>
 800a6f6:	eb1a 0105 	adds.w	r1, sl, r5
 800a6fa:	f47f af6f 	bne.w	800a5dc <_scanf_float+0x64>
 800a6fe:	6822      	ldr	r2, [r4, #0]
 800a700:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800a704:	6022      	str	r2, [r4, #0]
 800a706:	460d      	mov	r5, r1
 800a708:	468a      	mov	sl, r1
 800a70a:	f806 3b01 	strb.w	r3, [r6], #1
 800a70e:	e7e2      	b.n	800a6d6 <_scanf_float+0x15e>
 800a710:	6822      	ldr	r2, [r4, #0]
 800a712:	0610      	lsls	r0, r2, #24
 800a714:	f57f af62 	bpl.w	800a5dc <_scanf_float+0x64>
 800a718:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800a71c:	6022      	str	r2, [r4, #0]
 800a71e:	e7f4      	b.n	800a70a <_scanf_float+0x192>
 800a720:	f1ba 0f00 	cmp.w	sl, #0
 800a724:	d10e      	bne.n	800a744 <_scanf_float+0x1cc>
 800a726:	f1b9 0f00 	cmp.w	r9, #0
 800a72a:	d10e      	bne.n	800a74a <_scanf_float+0x1d2>
 800a72c:	6822      	ldr	r2, [r4, #0]
 800a72e:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800a732:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800a736:	d108      	bne.n	800a74a <_scanf_float+0x1d2>
 800a738:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800a73c:	6022      	str	r2, [r4, #0]
 800a73e:	f04f 0a01 	mov.w	sl, #1
 800a742:	e7e2      	b.n	800a70a <_scanf_float+0x192>
 800a744:	f1ba 0f02 	cmp.w	sl, #2
 800a748:	d055      	beq.n	800a7f6 <_scanf_float+0x27e>
 800a74a:	2d01      	cmp	r5, #1
 800a74c:	d002      	beq.n	800a754 <_scanf_float+0x1dc>
 800a74e:	2d04      	cmp	r5, #4
 800a750:	f47f af44 	bne.w	800a5dc <_scanf_float+0x64>
 800a754:	3501      	adds	r5, #1
 800a756:	b2ed      	uxtb	r5, r5
 800a758:	e7d7      	b.n	800a70a <_scanf_float+0x192>
 800a75a:	f1ba 0f01 	cmp.w	sl, #1
 800a75e:	f47f af3d 	bne.w	800a5dc <_scanf_float+0x64>
 800a762:	f04f 0a02 	mov.w	sl, #2
 800a766:	e7d0      	b.n	800a70a <_scanf_float+0x192>
 800a768:	b97d      	cbnz	r5, 800a78a <_scanf_float+0x212>
 800a76a:	f1b9 0f00 	cmp.w	r9, #0
 800a76e:	f47f af38 	bne.w	800a5e2 <_scanf_float+0x6a>
 800a772:	6822      	ldr	r2, [r4, #0]
 800a774:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800a778:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800a77c:	f040 8108 	bne.w	800a990 <_scanf_float+0x418>
 800a780:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800a784:	6022      	str	r2, [r4, #0]
 800a786:	2501      	movs	r5, #1
 800a788:	e7bf      	b.n	800a70a <_scanf_float+0x192>
 800a78a:	2d03      	cmp	r5, #3
 800a78c:	d0e2      	beq.n	800a754 <_scanf_float+0x1dc>
 800a78e:	2d05      	cmp	r5, #5
 800a790:	e7de      	b.n	800a750 <_scanf_float+0x1d8>
 800a792:	2d02      	cmp	r5, #2
 800a794:	f47f af22 	bne.w	800a5dc <_scanf_float+0x64>
 800a798:	2503      	movs	r5, #3
 800a79a:	e7b6      	b.n	800a70a <_scanf_float+0x192>
 800a79c:	2d06      	cmp	r5, #6
 800a79e:	f47f af1d 	bne.w	800a5dc <_scanf_float+0x64>
 800a7a2:	2507      	movs	r5, #7
 800a7a4:	e7b1      	b.n	800a70a <_scanf_float+0x192>
 800a7a6:	6822      	ldr	r2, [r4, #0]
 800a7a8:	0591      	lsls	r1, r2, #22
 800a7aa:	f57f af17 	bpl.w	800a5dc <_scanf_float+0x64>
 800a7ae:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800a7b2:	6022      	str	r2, [r4, #0]
 800a7b4:	f8cd 9008 	str.w	r9, [sp, #8]
 800a7b8:	e7a7      	b.n	800a70a <_scanf_float+0x192>
 800a7ba:	6822      	ldr	r2, [r4, #0]
 800a7bc:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800a7c0:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800a7c4:	d006      	beq.n	800a7d4 <_scanf_float+0x25c>
 800a7c6:	0550      	lsls	r0, r2, #21
 800a7c8:	f57f af08 	bpl.w	800a5dc <_scanf_float+0x64>
 800a7cc:	f1b9 0f00 	cmp.w	r9, #0
 800a7d0:	f000 80de 	beq.w	800a990 <_scanf_float+0x418>
 800a7d4:	0591      	lsls	r1, r2, #22
 800a7d6:	bf58      	it	pl
 800a7d8:	9902      	ldrpl	r1, [sp, #8]
 800a7da:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800a7de:	bf58      	it	pl
 800a7e0:	eba9 0101 	subpl.w	r1, r9, r1
 800a7e4:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800a7e8:	bf58      	it	pl
 800a7ea:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800a7ee:	6022      	str	r2, [r4, #0]
 800a7f0:	f04f 0900 	mov.w	r9, #0
 800a7f4:	e789      	b.n	800a70a <_scanf_float+0x192>
 800a7f6:	f04f 0a03 	mov.w	sl, #3
 800a7fa:	e786      	b.n	800a70a <_scanf_float+0x192>
 800a7fc:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800a800:	4639      	mov	r1, r7
 800a802:	4640      	mov	r0, r8
 800a804:	4798      	blx	r3
 800a806:	2800      	cmp	r0, #0
 800a808:	f43f aedb 	beq.w	800a5c2 <_scanf_float+0x4a>
 800a80c:	e6e6      	b.n	800a5dc <_scanf_float+0x64>
 800a80e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a812:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a816:	463a      	mov	r2, r7
 800a818:	4640      	mov	r0, r8
 800a81a:	4798      	blx	r3
 800a81c:	6923      	ldr	r3, [r4, #16]
 800a81e:	3b01      	subs	r3, #1
 800a820:	6123      	str	r3, [r4, #16]
 800a822:	e6e8      	b.n	800a5f6 <_scanf_float+0x7e>
 800a824:	1e6b      	subs	r3, r5, #1
 800a826:	2b06      	cmp	r3, #6
 800a828:	d824      	bhi.n	800a874 <_scanf_float+0x2fc>
 800a82a:	2d02      	cmp	r5, #2
 800a82c:	d836      	bhi.n	800a89c <_scanf_float+0x324>
 800a82e:	9b01      	ldr	r3, [sp, #4]
 800a830:	429e      	cmp	r6, r3
 800a832:	f67f aee4 	bls.w	800a5fe <_scanf_float+0x86>
 800a836:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a83a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a83e:	463a      	mov	r2, r7
 800a840:	4640      	mov	r0, r8
 800a842:	4798      	blx	r3
 800a844:	6923      	ldr	r3, [r4, #16]
 800a846:	3b01      	subs	r3, #1
 800a848:	6123      	str	r3, [r4, #16]
 800a84a:	e7f0      	b.n	800a82e <_scanf_float+0x2b6>
 800a84c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a850:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800a854:	463a      	mov	r2, r7
 800a856:	4640      	mov	r0, r8
 800a858:	4798      	blx	r3
 800a85a:	6923      	ldr	r3, [r4, #16]
 800a85c:	3b01      	subs	r3, #1
 800a85e:	6123      	str	r3, [r4, #16]
 800a860:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a864:	fa5f fa8a 	uxtb.w	sl, sl
 800a868:	f1ba 0f02 	cmp.w	sl, #2
 800a86c:	d1ee      	bne.n	800a84c <_scanf_float+0x2d4>
 800a86e:	3d03      	subs	r5, #3
 800a870:	b2ed      	uxtb	r5, r5
 800a872:	1b76      	subs	r6, r6, r5
 800a874:	6823      	ldr	r3, [r4, #0]
 800a876:	05da      	lsls	r2, r3, #23
 800a878:	d530      	bpl.n	800a8dc <_scanf_float+0x364>
 800a87a:	055b      	lsls	r3, r3, #21
 800a87c:	d511      	bpl.n	800a8a2 <_scanf_float+0x32a>
 800a87e:	9b01      	ldr	r3, [sp, #4]
 800a880:	429e      	cmp	r6, r3
 800a882:	f67f aebc 	bls.w	800a5fe <_scanf_float+0x86>
 800a886:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a88a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a88e:	463a      	mov	r2, r7
 800a890:	4640      	mov	r0, r8
 800a892:	4798      	blx	r3
 800a894:	6923      	ldr	r3, [r4, #16]
 800a896:	3b01      	subs	r3, #1
 800a898:	6123      	str	r3, [r4, #16]
 800a89a:	e7f0      	b.n	800a87e <_scanf_float+0x306>
 800a89c:	46aa      	mov	sl, r5
 800a89e:	46b3      	mov	fp, r6
 800a8a0:	e7de      	b.n	800a860 <_scanf_float+0x2e8>
 800a8a2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800a8a6:	6923      	ldr	r3, [r4, #16]
 800a8a8:	2965      	cmp	r1, #101	@ 0x65
 800a8aa:	f103 33ff 	add.w	r3, r3, #4294967295
 800a8ae:	f106 35ff 	add.w	r5, r6, #4294967295
 800a8b2:	6123      	str	r3, [r4, #16]
 800a8b4:	d00c      	beq.n	800a8d0 <_scanf_float+0x358>
 800a8b6:	2945      	cmp	r1, #69	@ 0x45
 800a8b8:	d00a      	beq.n	800a8d0 <_scanf_float+0x358>
 800a8ba:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a8be:	463a      	mov	r2, r7
 800a8c0:	4640      	mov	r0, r8
 800a8c2:	4798      	blx	r3
 800a8c4:	6923      	ldr	r3, [r4, #16]
 800a8c6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800a8ca:	3b01      	subs	r3, #1
 800a8cc:	1eb5      	subs	r5, r6, #2
 800a8ce:	6123      	str	r3, [r4, #16]
 800a8d0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a8d4:	463a      	mov	r2, r7
 800a8d6:	4640      	mov	r0, r8
 800a8d8:	4798      	blx	r3
 800a8da:	462e      	mov	r6, r5
 800a8dc:	6822      	ldr	r2, [r4, #0]
 800a8de:	f012 0210 	ands.w	r2, r2, #16
 800a8e2:	d001      	beq.n	800a8e8 <_scanf_float+0x370>
 800a8e4:	2000      	movs	r0, #0
 800a8e6:	e68b      	b.n	800a600 <_scanf_float+0x88>
 800a8e8:	7032      	strb	r2, [r6, #0]
 800a8ea:	6823      	ldr	r3, [r4, #0]
 800a8ec:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800a8f0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a8f4:	d11c      	bne.n	800a930 <_scanf_float+0x3b8>
 800a8f6:	9b02      	ldr	r3, [sp, #8]
 800a8f8:	454b      	cmp	r3, r9
 800a8fa:	eba3 0209 	sub.w	r2, r3, r9
 800a8fe:	d123      	bne.n	800a948 <_scanf_float+0x3d0>
 800a900:	9901      	ldr	r1, [sp, #4]
 800a902:	2200      	movs	r2, #0
 800a904:	4640      	mov	r0, r8
 800a906:	f7ff f953 	bl	8009bb0 <_strtod_r>
 800a90a:	9b03      	ldr	r3, [sp, #12]
 800a90c:	6821      	ldr	r1, [r4, #0]
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	f011 0f02 	tst.w	r1, #2
 800a914:	ec57 6b10 	vmov	r6, r7, d0
 800a918:	f103 0204 	add.w	r2, r3, #4
 800a91c:	d01f      	beq.n	800a95e <_scanf_float+0x3e6>
 800a91e:	9903      	ldr	r1, [sp, #12]
 800a920:	600a      	str	r2, [r1, #0]
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	e9c3 6700 	strd	r6, r7, [r3]
 800a928:	68e3      	ldr	r3, [r4, #12]
 800a92a:	3301      	adds	r3, #1
 800a92c:	60e3      	str	r3, [r4, #12]
 800a92e:	e7d9      	b.n	800a8e4 <_scanf_float+0x36c>
 800a930:	9b04      	ldr	r3, [sp, #16]
 800a932:	2b00      	cmp	r3, #0
 800a934:	d0e4      	beq.n	800a900 <_scanf_float+0x388>
 800a936:	9905      	ldr	r1, [sp, #20]
 800a938:	230a      	movs	r3, #10
 800a93a:	3101      	adds	r1, #1
 800a93c:	4640      	mov	r0, r8
 800a93e:	f7ff f9b7 	bl	8009cb0 <_strtol_r>
 800a942:	9b04      	ldr	r3, [sp, #16]
 800a944:	9e05      	ldr	r6, [sp, #20]
 800a946:	1ac2      	subs	r2, r0, r3
 800a948:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800a94c:	429e      	cmp	r6, r3
 800a94e:	bf28      	it	cs
 800a950:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800a954:	4910      	ldr	r1, [pc, #64]	@ (800a998 <_scanf_float+0x420>)
 800a956:	4630      	mov	r0, r6
 800a958:	f000 f918 	bl	800ab8c <siprintf>
 800a95c:	e7d0      	b.n	800a900 <_scanf_float+0x388>
 800a95e:	f011 0f04 	tst.w	r1, #4
 800a962:	9903      	ldr	r1, [sp, #12]
 800a964:	600a      	str	r2, [r1, #0]
 800a966:	d1dc      	bne.n	800a922 <_scanf_float+0x3aa>
 800a968:	681d      	ldr	r5, [r3, #0]
 800a96a:	4632      	mov	r2, r6
 800a96c:	463b      	mov	r3, r7
 800a96e:	4630      	mov	r0, r6
 800a970:	4639      	mov	r1, r7
 800a972:	f7f6 f8eb 	bl	8000b4c <__aeabi_dcmpun>
 800a976:	b128      	cbz	r0, 800a984 <_scanf_float+0x40c>
 800a978:	4808      	ldr	r0, [pc, #32]	@ (800a99c <_scanf_float+0x424>)
 800a97a:	f001 f841 	bl	800ba00 <nanf>
 800a97e:	ed85 0a00 	vstr	s0, [r5]
 800a982:	e7d1      	b.n	800a928 <_scanf_float+0x3b0>
 800a984:	4630      	mov	r0, r6
 800a986:	4639      	mov	r1, r7
 800a988:	f7f6 f93e 	bl	8000c08 <__aeabi_d2f>
 800a98c:	6028      	str	r0, [r5, #0]
 800a98e:	e7cb      	b.n	800a928 <_scanf_float+0x3b0>
 800a990:	f04f 0900 	mov.w	r9, #0
 800a994:	e629      	b.n	800a5ea <_scanf_float+0x72>
 800a996:	bf00      	nop
 800a998:	080102b3 	.word	0x080102b3
 800a99c:	0800fa09 	.word	0x0800fa09

0800a9a0 <std>:
 800a9a0:	2300      	movs	r3, #0
 800a9a2:	b510      	push	{r4, lr}
 800a9a4:	4604      	mov	r4, r0
 800a9a6:	e9c0 3300 	strd	r3, r3, [r0]
 800a9aa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a9ae:	6083      	str	r3, [r0, #8]
 800a9b0:	8181      	strh	r1, [r0, #12]
 800a9b2:	6643      	str	r3, [r0, #100]	@ 0x64
 800a9b4:	81c2      	strh	r2, [r0, #14]
 800a9b6:	6183      	str	r3, [r0, #24]
 800a9b8:	4619      	mov	r1, r3
 800a9ba:	2208      	movs	r2, #8
 800a9bc:	305c      	adds	r0, #92	@ 0x5c
 800a9be:	f000 f9ad 	bl	800ad1c <memset>
 800a9c2:	4b0d      	ldr	r3, [pc, #52]	@ (800a9f8 <std+0x58>)
 800a9c4:	6263      	str	r3, [r4, #36]	@ 0x24
 800a9c6:	4b0d      	ldr	r3, [pc, #52]	@ (800a9fc <std+0x5c>)
 800a9c8:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a9ca:	4b0d      	ldr	r3, [pc, #52]	@ (800aa00 <std+0x60>)
 800a9cc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a9ce:	4b0d      	ldr	r3, [pc, #52]	@ (800aa04 <std+0x64>)
 800a9d0:	6323      	str	r3, [r4, #48]	@ 0x30
 800a9d2:	4b0d      	ldr	r3, [pc, #52]	@ (800aa08 <std+0x68>)
 800a9d4:	6224      	str	r4, [r4, #32]
 800a9d6:	429c      	cmp	r4, r3
 800a9d8:	d006      	beq.n	800a9e8 <std+0x48>
 800a9da:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800a9de:	4294      	cmp	r4, r2
 800a9e0:	d002      	beq.n	800a9e8 <std+0x48>
 800a9e2:	33d0      	adds	r3, #208	@ 0xd0
 800a9e4:	429c      	cmp	r4, r3
 800a9e6:	d105      	bne.n	800a9f4 <std+0x54>
 800a9e8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800a9ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a9f0:	f000 bfe0 	b.w	800b9b4 <__retarget_lock_init_recursive>
 800a9f4:	bd10      	pop	{r4, pc}
 800a9f6:	bf00      	nop
 800a9f8:	0800ac21 	.word	0x0800ac21
 800a9fc:	0800ac47 	.word	0x0800ac47
 800aa00:	0800ac7f 	.word	0x0800ac7f
 800aa04:	0800aca3 	.word	0x0800aca3
 800aa08:	20006f6c 	.word	0x20006f6c

0800aa0c <stdio_exit_handler>:
 800aa0c:	4a02      	ldr	r2, [pc, #8]	@ (800aa18 <stdio_exit_handler+0xc>)
 800aa0e:	4903      	ldr	r1, [pc, #12]	@ (800aa1c <stdio_exit_handler+0x10>)
 800aa10:	4803      	ldr	r0, [pc, #12]	@ (800aa20 <stdio_exit_handler+0x14>)
 800aa12:	f000 b869 	b.w	800aae8 <_fwalk_sglue>
 800aa16:	bf00      	nop
 800aa18:	2000001c 	.word	0x2000001c
 800aa1c:	0800e2c9 	.word	0x0800e2c9
 800aa20:	200001a0 	.word	0x200001a0

0800aa24 <cleanup_stdio>:
 800aa24:	6841      	ldr	r1, [r0, #4]
 800aa26:	4b0c      	ldr	r3, [pc, #48]	@ (800aa58 <cleanup_stdio+0x34>)
 800aa28:	4299      	cmp	r1, r3
 800aa2a:	b510      	push	{r4, lr}
 800aa2c:	4604      	mov	r4, r0
 800aa2e:	d001      	beq.n	800aa34 <cleanup_stdio+0x10>
 800aa30:	f003 fc4a 	bl	800e2c8 <_fflush_r>
 800aa34:	68a1      	ldr	r1, [r4, #8]
 800aa36:	4b09      	ldr	r3, [pc, #36]	@ (800aa5c <cleanup_stdio+0x38>)
 800aa38:	4299      	cmp	r1, r3
 800aa3a:	d002      	beq.n	800aa42 <cleanup_stdio+0x1e>
 800aa3c:	4620      	mov	r0, r4
 800aa3e:	f003 fc43 	bl	800e2c8 <_fflush_r>
 800aa42:	68e1      	ldr	r1, [r4, #12]
 800aa44:	4b06      	ldr	r3, [pc, #24]	@ (800aa60 <cleanup_stdio+0x3c>)
 800aa46:	4299      	cmp	r1, r3
 800aa48:	d004      	beq.n	800aa54 <cleanup_stdio+0x30>
 800aa4a:	4620      	mov	r0, r4
 800aa4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aa50:	f003 bc3a 	b.w	800e2c8 <_fflush_r>
 800aa54:	bd10      	pop	{r4, pc}
 800aa56:	bf00      	nop
 800aa58:	20006f6c 	.word	0x20006f6c
 800aa5c:	20006fd4 	.word	0x20006fd4
 800aa60:	2000703c 	.word	0x2000703c

0800aa64 <global_stdio_init.part.0>:
 800aa64:	b510      	push	{r4, lr}
 800aa66:	4b0b      	ldr	r3, [pc, #44]	@ (800aa94 <global_stdio_init.part.0+0x30>)
 800aa68:	4c0b      	ldr	r4, [pc, #44]	@ (800aa98 <global_stdio_init.part.0+0x34>)
 800aa6a:	4a0c      	ldr	r2, [pc, #48]	@ (800aa9c <global_stdio_init.part.0+0x38>)
 800aa6c:	601a      	str	r2, [r3, #0]
 800aa6e:	4620      	mov	r0, r4
 800aa70:	2200      	movs	r2, #0
 800aa72:	2104      	movs	r1, #4
 800aa74:	f7ff ff94 	bl	800a9a0 <std>
 800aa78:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800aa7c:	2201      	movs	r2, #1
 800aa7e:	2109      	movs	r1, #9
 800aa80:	f7ff ff8e 	bl	800a9a0 <std>
 800aa84:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800aa88:	2202      	movs	r2, #2
 800aa8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aa8e:	2112      	movs	r1, #18
 800aa90:	f7ff bf86 	b.w	800a9a0 <std>
 800aa94:	200070a4 	.word	0x200070a4
 800aa98:	20006f6c 	.word	0x20006f6c
 800aa9c:	0800aa0d 	.word	0x0800aa0d

0800aaa0 <__sfp_lock_acquire>:
 800aaa0:	4801      	ldr	r0, [pc, #4]	@ (800aaa8 <__sfp_lock_acquire+0x8>)
 800aaa2:	f000 bf89 	b.w	800b9b8 <__retarget_lock_acquire_recursive>
 800aaa6:	bf00      	nop
 800aaa8:	200070d3 	.word	0x200070d3

0800aaac <__sfp_lock_release>:
 800aaac:	4801      	ldr	r0, [pc, #4]	@ (800aab4 <__sfp_lock_release+0x8>)
 800aaae:	f000 bf85 	b.w	800b9bc <__retarget_lock_release_recursive>
 800aab2:	bf00      	nop
 800aab4:	200070d3 	.word	0x200070d3

0800aab8 <__sinit>:
 800aab8:	b510      	push	{r4, lr}
 800aaba:	4604      	mov	r4, r0
 800aabc:	f7ff fff0 	bl	800aaa0 <__sfp_lock_acquire>
 800aac0:	6a23      	ldr	r3, [r4, #32]
 800aac2:	b11b      	cbz	r3, 800aacc <__sinit+0x14>
 800aac4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aac8:	f7ff bff0 	b.w	800aaac <__sfp_lock_release>
 800aacc:	4b04      	ldr	r3, [pc, #16]	@ (800aae0 <__sinit+0x28>)
 800aace:	6223      	str	r3, [r4, #32]
 800aad0:	4b04      	ldr	r3, [pc, #16]	@ (800aae4 <__sinit+0x2c>)
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d1f5      	bne.n	800aac4 <__sinit+0xc>
 800aad8:	f7ff ffc4 	bl	800aa64 <global_stdio_init.part.0>
 800aadc:	e7f2      	b.n	800aac4 <__sinit+0xc>
 800aade:	bf00      	nop
 800aae0:	0800aa25 	.word	0x0800aa25
 800aae4:	200070a4 	.word	0x200070a4

0800aae8 <_fwalk_sglue>:
 800aae8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aaec:	4607      	mov	r7, r0
 800aaee:	4688      	mov	r8, r1
 800aaf0:	4614      	mov	r4, r2
 800aaf2:	2600      	movs	r6, #0
 800aaf4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800aaf8:	f1b9 0901 	subs.w	r9, r9, #1
 800aafc:	d505      	bpl.n	800ab0a <_fwalk_sglue+0x22>
 800aafe:	6824      	ldr	r4, [r4, #0]
 800ab00:	2c00      	cmp	r4, #0
 800ab02:	d1f7      	bne.n	800aaf4 <_fwalk_sglue+0xc>
 800ab04:	4630      	mov	r0, r6
 800ab06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ab0a:	89ab      	ldrh	r3, [r5, #12]
 800ab0c:	2b01      	cmp	r3, #1
 800ab0e:	d907      	bls.n	800ab20 <_fwalk_sglue+0x38>
 800ab10:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ab14:	3301      	adds	r3, #1
 800ab16:	d003      	beq.n	800ab20 <_fwalk_sglue+0x38>
 800ab18:	4629      	mov	r1, r5
 800ab1a:	4638      	mov	r0, r7
 800ab1c:	47c0      	blx	r8
 800ab1e:	4306      	orrs	r6, r0
 800ab20:	3568      	adds	r5, #104	@ 0x68
 800ab22:	e7e9      	b.n	800aaf8 <_fwalk_sglue+0x10>

0800ab24 <sniprintf>:
 800ab24:	b40c      	push	{r2, r3}
 800ab26:	b530      	push	{r4, r5, lr}
 800ab28:	4b17      	ldr	r3, [pc, #92]	@ (800ab88 <sniprintf+0x64>)
 800ab2a:	1e0c      	subs	r4, r1, #0
 800ab2c:	681d      	ldr	r5, [r3, #0]
 800ab2e:	b09d      	sub	sp, #116	@ 0x74
 800ab30:	da08      	bge.n	800ab44 <sniprintf+0x20>
 800ab32:	238b      	movs	r3, #139	@ 0x8b
 800ab34:	602b      	str	r3, [r5, #0]
 800ab36:	f04f 30ff 	mov.w	r0, #4294967295
 800ab3a:	b01d      	add	sp, #116	@ 0x74
 800ab3c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ab40:	b002      	add	sp, #8
 800ab42:	4770      	bx	lr
 800ab44:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800ab48:	f8ad 3014 	strh.w	r3, [sp, #20]
 800ab4c:	bf14      	ite	ne
 800ab4e:	f104 33ff 	addne.w	r3, r4, #4294967295
 800ab52:	4623      	moveq	r3, r4
 800ab54:	9304      	str	r3, [sp, #16]
 800ab56:	9307      	str	r3, [sp, #28]
 800ab58:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800ab5c:	9002      	str	r0, [sp, #8]
 800ab5e:	9006      	str	r0, [sp, #24]
 800ab60:	f8ad 3016 	strh.w	r3, [sp, #22]
 800ab64:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800ab66:	ab21      	add	r3, sp, #132	@ 0x84
 800ab68:	a902      	add	r1, sp, #8
 800ab6a:	4628      	mov	r0, r5
 800ab6c:	9301      	str	r3, [sp, #4]
 800ab6e:	f002 ff11 	bl	800d994 <_svfiprintf_r>
 800ab72:	1c43      	adds	r3, r0, #1
 800ab74:	bfbc      	itt	lt
 800ab76:	238b      	movlt	r3, #139	@ 0x8b
 800ab78:	602b      	strlt	r3, [r5, #0]
 800ab7a:	2c00      	cmp	r4, #0
 800ab7c:	d0dd      	beq.n	800ab3a <sniprintf+0x16>
 800ab7e:	9b02      	ldr	r3, [sp, #8]
 800ab80:	2200      	movs	r2, #0
 800ab82:	701a      	strb	r2, [r3, #0]
 800ab84:	e7d9      	b.n	800ab3a <sniprintf+0x16>
 800ab86:	bf00      	nop
 800ab88:	2000019c 	.word	0x2000019c

0800ab8c <siprintf>:
 800ab8c:	b40e      	push	{r1, r2, r3}
 800ab8e:	b500      	push	{lr}
 800ab90:	b09c      	sub	sp, #112	@ 0x70
 800ab92:	ab1d      	add	r3, sp, #116	@ 0x74
 800ab94:	9002      	str	r0, [sp, #8]
 800ab96:	9006      	str	r0, [sp, #24]
 800ab98:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800ab9c:	4809      	ldr	r0, [pc, #36]	@ (800abc4 <siprintf+0x38>)
 800ab9e:	9107      	str	r1, [sp, #28]
 800aba0:	9104      	str	r1, [sp, #16]
 800aba2:	4909      	ldr	r1, [pc, #36]	@ (800abc8 <siprintf+0x3c>)
 800aba4:	f853 2b04 	ldr.w	r2, [r3], #4
 800aba8:	9105      	str	r1, [sp, #20]
 800abaa:	6800      	ldr	r0, [r0, #0]
 800abac:	9301      	str	r3, [sp, #4]
 800abae:	a902      	add	r1, sp, #8
 800abb0:	f002 fef0 	bl	800d994 <_svfiprintf_r>
 800abb4:	9b02      	ldr	r3, [sp, #8]
 800abb6:	2200      	movs	r2, #0
 800abb8:	701a      	strb	r2, [r3, #0]
 800abba:	b01c      	add	sp, #112	@ 0x70
 800abbc:	f85d eb04 	ldr.w	lr, [sp], #4
 800abc0:	b003      	add	sp, #12
 800abc2:	4770      	bx	lr
 800abc4:	2000019c 	.word	0x2000019c
 800abc8:	ffff0208 	.word	0xffff0208

0800abcc <siscanf>:
 800abcc:	b40e      	push	{r1, r2, r3}
 800abce:	b530      	push	{r4, r5, lr}
 800abd0:	b09c      	sub	sp, #112	@ 0x70
 800abd2:	ac1f      	add	r4, sp, #124	@ 0x7c
 800abd4:	f44f 7201 	mov.w	r2, #516	@ 0x204
 800abd8:	f854 5b04 	ldr.w	r5, [r4], #4
 800abdc:	f8ad 2014 	strh.w	r2, [sp, #20]
 800abe0:	9002      	str	r0, [sp, #8]
 800abe2:	9006      	str	r0, [sp, #24]
 800abe4:	f7f5 fb54 	bl	8000290 <strlen>
 800abe8:	4b0b      	ldr	r3, [pc, #44]	@ (800ac18 <siscanf+0x4c>)
 800abea:	9003      	str	r0, [sp, #12]
 800abec:	9007      	str	r0, [sp, #28]
 800abee:	930b      	str	r3, [sp, #44]	@ 0x2c
 800abf0:	480a      	ldr	r0, [pc, #40]	@ (800ac1c <siscanf+0x50>)
 800abf2:	9401      	str	r4, [sp, #4]
 800abf4:	2300      	movs	r3, #0
 800abf6:	930f      	str	r3, [sp, #60]	@ 0x3c
 800abf8:	9314      	str	r3, [sp, #80]	@ 0x50
 800abfa:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800abfe:	f8ad 3016 	strh.w	r3, [sp, #22]
 800ac02:	462a      	mov	r2, r5
 800ac04:	4623      	mov	r3, r4
 800ac06:	a902      	add	r1, sp, #8
 800ac08:	6800      	ldr	r0, [r0, #0]
 800ac0a:	f003 f817 	bl	800dc3c <__ssvfiscanf_r>
 800ac0e:	b01c      	add	sp, #112	@ 0x70
 800ac10:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ac14:	b003      	add	sp, #12
 800ac16:	4770      	bx	lr
 800ac18:	0800ac43 	.word	0x0800ac43
 800ac1c:	2000019c 	.word	0x2000019c

0800ac20 <__sread>:
 800ac20:	b510      	push	{r4, lr}
 800ac22:	460c      	mov	r4, r1
 800ac24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ac28:	f000 fe66 	bl	800b8f8 <_read_r>
 800ac2c:	2800      	cmp	r0, #0
 800ac2e:	bfab      	itete	ge
 800ac30:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800ac32:	89a3      	ldrhlt	r3, [r4, #12]
 800ac34:	181b      	addge	r3, r3, r0
 800ac36:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800ac3a:	bfac      	ite	ge
 800ac3c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800ac3e:	81a3      	strhlt	r3, [r4, #12]
 800ac40:	bd10      	pop	{r4, pc}

0800ac42 <__seofread>:
 800ac42:	2000      	movs	r0, #0
 800ac44:	4770      	bx	lr

0800ac46 <__swrite>:
 800ac46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac4a:	461f      	mov	r7, r3
 800ac4c:	898b      	ldrh	r3, [r1, #12]
 800ac4e:	05db      	lsls	r3, r3, #23
 800ac50:	4605      	mov	r5, r0
 800ac52:	460c      	mov	r4, r1
 800ac54:	4616      	mov	r6, r2
 800ac56:	d505      	bpl.n	800ac64 <__swrite+0x1e>
 800ac58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ac5c:	2302      	movs	r3, #2
 800ac5e:	2200      	movs	r2, #0
 800ac60:	f000 fe38 	bl	800b8d4 <_lseek_r>
 800ac64:	89a3      	ldrh	r3, [r4, #12]
 800ac66:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ac6a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ac6e:	81a3      	strh	r3, [r4, #12]
 800ac70:	4632      	mov	r2, r6
 800ac72:	463b      	mov	r3, r7
 800ac74:	4628      	mov	r0, r5
 800ac76:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ac7a:	f000 be5f 	b.w	800b93c <_write_r>

0800ac7e <__sseek>:
 800ac7e:	b510      	push	{r4, lr}
 800ac80:	460c      	mov	r4, r1
 800ac82:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ac86:	f000 fe25 	bl	800b8d4 <_lseek_r>
 800ac8a:	1c43      	adds	r3, r0, #1
 800ac8c:	89a3      	ldrh	r3, [r4, #12]
 800ac8e:	bf15      	itete	ne
 800ac90:	6560      	strne	r0, [r4, #84]	@ 0x54
 800ac92:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800ac96:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800ac9a:	81a3      	strheq	r3, [r4, #12]
 800ac9c:	bf18      	it	ne
 800ac9e:	81a3      	strhne	r3, [r4, #12]
 800aca0:	bd10      	pop	{r4, pc}

0800aca2 <__sclose>:
 800aca2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aca6:	f000 be05 	b.w	800b8b4 <_close_r>

0800acaa <_vsniprintf_r>:
 800acaa:	b530      	push	{r4, r5, lr}
 800acac:	4614      	mov	r4, r2
 800acae:	2c00      	cmp	r4, #0
 800acb0:	b09b      	sub	sp, #108	@ 0x6c
 800acb2:	4605      	mov	r5, r0
 800acb4:	461a      	mov	r2, r3
 800acb6:	da05      	bge.n	800acc4 <_vsniprintf_r+0x1a>
 800acb8:	238b      	movs	r3, #139	@ 0x8b
 800acba:	6003      	str	r3, [r0, #0]
 800acbc:	f04f 30ff 	mov.w	r0, #4294967295
 800acc0:	b01b      	add	sp, #108	@ 0x6c
 800acc2:	bd30      	pop	{r4, r5, pc}
 800acc4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800acc8:	f8ad 300c 	strh.w	r3, [sp, #12]
 800accc:	bf14      	ite	ne
 800acce:	f104 33ff 	addne.w	r3, r4, #4294967295
 800acd2:	4623      	moveq	r3, r4
 800acd4:	9302      	str	r3, [sp, #8]
 800acd6:	9305      	str	r3, [sp, #20]
 800acd8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800acdc:	9100      	str	r1, [sp, #0]
 800acde:	9104      	str	r1, [sp, #16]
 800ace0:	f8ad 300e 	strh.w	r3, [sp, #14]
 800ace4:	4669      	mov	r1, sp
 800ace6:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800ace8:	f002 fe54 	bl	800d994 <_svfiprintf_r>
 800acec:	1c43      	adds	r3, r0, #1
 800acee:	bfbc      	itt	lt
 800acf0:	238b      	movlt	r3, #139	@ 0x8b
 800acf2:	602b      	strlt	r3, [r5, #0]
 800acf4:	2c00      	cmp	r4, #0
 800acf6:	d0e3      	beq.n	800acc0 <_vsniprintf_r+0x16>
 800acf8:	9b00      	ldr	r3, [sp, #0]
 800acfa:	2200      	movs	r2, #0
 800acfc:	701a      	strb	r2, [r3, #0]
 800acfe:	e7df      	b.n	800acc0 <_vsniprintf_r+0x16>

0800ad00 <vsniprintf>:
 800ad00:	b507      	push	{r0, r1, r2, lr}
 800ad02:	9300      	str	r3, [sp, #0]
 800ad04:	4613      	mov	r3, r2
 800ad06:	460a      	mov	r2, r1
 800ad08:	4601      	mov	r1, r0
 800ad0a:	4803      	ldr	r0, [pc, #12]	@ (800ad18 <vsniprintf+0x18>)
 800ad0c:	6800      	ldr	r0, [r0, #0]
 800ad0e:	f7ff ffcc 	bl	800acaa <_vsniprintf_r>
 800ad12:	b003      	add	sp, #12
 800ad14:	f85d fb04 	ldr.w	pc, [sp], #4
 800ad18:	2000019c 	.word	0x2000019c

0800ad1c <memset>:
 800ad1c:	4402      	add	r2, r0
 800ad1e:	4603      	mov	r3, r0
 800ad20:	4293      	cmp	r3, r2
 800ad22:	d100      	bne.n	800ad26 <memset+0xa>
 800ad24:	4770      	bx	lr
 800ad26:	f803 1b01 	strb.w	r1, [r3], #1
 800ad2a:	e7f9      	b.n	800ad20 <memset+0x4>

0800ad2c <strchr>:
 800ad2c:	b2c9      	uxtb	r1, r1
 800ad2e:	4603      	mov	r3, r0
 800ad30:	4618      	mov	r0, r3
 800ad32:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ad36:	b112      	cbz	r2, 800ad3e <strchr+0x12>
 800ad38:	428a      	cmp	r2, r1
 800ad3a:	d1f9      	bne.n	800ad30 <strchr+0x4>
 800ad3c:	4770      	bx	lr
 800ad3e:	2900      	cmp	r1, #0
 800ad40:	bf18      	it	ne
 800ad42:	2000      	movne	r0, #0
 800ad44:	4770      	bx	lr

0800ad46 <strncmp>:
 800ad46:	b510      	push	{r4, lr}
 800ad48:	b16a      	cbz	r2, 800ad66 <strncmp+0x20>
 800ad4a:	3901      	subs	r1, #1
 800ad4c:	1884      	adds	r4, r0, r2
 800ad4e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ad52:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800ad56:	429a      	cmp	r2, r3
 800ad58:	d103      	bne.n	800ad62 <strncmp+0x1c>
 800ad5a:	42a0      	cmp	r0, r4
 800ad5c:	d001      	beq.n	800ad62 <strncmp+0x1c>
 800ad5e:	2a00      	cmp	r2, #0
 800ad60:	d1f5      	bne.n	800ad4e <strncmp+0x8>
 800ad62:	1ad0      	subs	r0, r2, r3
 800ad64:	bd10      	pop	{r4, pc}
 800ad66:	4610      	mov	r0, r2
 800ad68:	e7fc      	b.n	800ad64 <strncmp+0x1e>

0800ad6a <strncpy>:
 800ad6a:	b510      	push	{r4, lr}
 800ad6c:	3901      	subs	r1, #1
 800ad6e:	4603      	mov	r3, r0
 800ad70:	b132      	cbz	r2, 800ad80 <strncpy+0x16>
 800ad72:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800ad76:	f803 4b01 	strb.w	r4, [r3], #1
 800ad7a:	3a01      	subs	r2, #1
 800ad7c:	2c00      	cmp	r4, #0
 800ad7e:	d1f7      	bne.n	800ad70 <strncpy+0x6>
 800ad80:	441a      	add	r2, r3
 800ad82:	2100      	movs	r1, #0
 800ad84:	4293      	cmp	r3, r2
 800ad86:	d100      	bne.n	800ad8a <strncpy+0x20>
 800ad88:	bd10      	pop	{r4, pc}
 800ad8a:	f803 1b01 	strb.w	r1, [r3], #1
 800ad8e:	e7f9      	b.n	800ad84 <strncpy+0x1a>

0800ad90 <strrchr>:
 800ad90:	b538      	push	{r3, r4, r5, lr}
 800ad92:	f011 04ff 	ands.w	r4, r1, #255	@ 0xff
 800ad96:	4603      	mov	r3, r0
 800ad98:	d10e      	bne.n	800adb8 <strrchr+0x28>
 800ad9a:	4621      	mov	r1, r4
 800ad9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ada0:	f7ff bfc4 	b.w	800ad2c <strchr>
 800ada4:	1c43      	adds	r3, r0, #1
 800ada6:	4605      	mov	r5, r0
 800ada8:	4621      	mov	r1, r4
 800adaa:	4618      	mov	r0, r3
 800adac:	f7ff ffbe 	bl	800ad2c <strchr>
 800adb0:	2800      	cmp	r0, #0
 800adb2:	d1f7      	bne.n	800ada4 <strrchr+0x14>
 800adb4:	4628      	mov	r0, r5
 800adb6:	bd38      	pop	{r3, r4, r5, pc}
 800adb8:	2500      	movs	r5, #0
 800adba:	e7f5      	b.n	800ada8 <strrchr+0x18>

0800adbc <strstr>:
 800adbc:	780a      	ldrb	r2, [r1, #0]
 800adbe:	b570      	push	{r4, r5, r6, lr}
 800adc0:	b96a      	cbnz	r2, 800adde <strstr+0x22>
 800adc2:	bd70      	pop	{r4, r5, r6, pc}
 800adc4:	429a      	cmp	r2, r3
 800adc6:	d109      	bne.n	800addc <strstr+0x20>
 800adc8:	460c      	mov	r4, r1
 800adca:	4605      	mov	r5, r0
 800adcc:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800add0:	2b00      	cmp	r3, #0
 800add2:	d0f6      	beq.n	800adc2 <strstr+0x6>
 800add4:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800add8:	429e      	cmp	r6, r3
 800adda:	d0f7      	beq.n	800adcc <strstr+0x10>
 800addc:	3001      	adds	r0, #1
 800adde:	7803      	ldrb	r3, [r0, #0]
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	d1ef      	bne.n	800adc4 <strstr+0x8>
 800ade4:	4618      	mov	r0, r3
 800ade6:	e7ec      	b.n	800adc2 <strstr+0x6>

0800ade8 <validate_structure>:
 800ade8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800adea:	6801      	ldr	r1, [r0, #0]
 800adec:	293b      	cmp	r1, #59	@ 0x3b
 800adee:	4604      	mov	r4, r0
 800adf0:	d911      	bls.n	800ae16 <validate_structure+0x2e>
 800adf2:	223c      	movs	r2, #60	@ 0x3c
 800adf4:	4668      	mov	r0, sp
 800adf6:	f000 fe09 	bl	800ba0c <div>
 800adfa:	9a01      	ldr	r2, [sp, #4]
 800adfc:	6863      	ldr	r3, [r4, #4]
 800adfe:	9900      	ldr	r1, [sp, #0]
 800ae00:	2a00      	cmp	r2, #0
 800ae02:	440b      	add	r3, r1
 800ae04:	6063      	str	r3, [r4, #4]
 800ae06:	bfbb      	ittet	lt
 800ae08:	323c      	addlt	r2, #60	@ 0x3c
 800ae0a:	f103 33ff 	addlt.w	r3, r3, #4294967295
 800ae0e:	6022      	strge	r2, [r4, #0]
 800ae10:	6022      	strlt	r2, [r4, #0]
 800ae12:	bfb8      	it	lt
 800ae14:	6063      	strlt	r3, [r4, #4]
 800ae16:	6861      	ldr	r1, [r4, #4]
 800ae18:	293b      	cmp	r1, #59	@ 0x3b
 800ae1a:	d911      	bls.n	800ae40 <validate_structure+0x58>
 800ae1c:	223c      	movs	r2, #60	@ 0x3c
 800ae1e:	4668      	mov	r0, sp
 800ae20:	f000 fdf4 	bl	800ba0c <div>
 800ae24:	9a01      	ldr	r2, [sp, #4]
 800ae26:	68a3      	ldr	r3, [r4, #8]
 800ae28:	9900      	ldr	r1, [sp, #0]
 800ae2a:	2a00      	cmp	r2, #0
 800ae2c:	440b      	add	r3, r1
 800ae2e:	60a3      	str	r3, [r4, #8]
 800ae30:	bfbb      	ittet	lt
 800ae32:	323c      	addlt	r2, #60	@ 0x3c
 800ae34:	f103 33ff 	addlt.w	r3, r3, #4294967295
 800ae38:	6062      	strge	r2, [r4, #4]
 800ae3a:	6062      	strlt	r2, [r4, #4]
 800ae3c:	bfb8      	it	lt
 800ae3e:	60a3      	strlt	r3, [r4, #8]
 800ae40:	68a1      	ldr	r1, [r4, #8]
 800ae42:	2917      	cmp	r1, #23
 800ae44:	d911      	bls.n	800ae6a <validate_structure+0x82>
 800ae46:	2218      	movs	r2, #24
 800ae48:	4668      	mov	r0, sp
 800ae4a:	f000 fddf 	bl	800ba0c <div>
 800ae4e:	9a01      	ldr	r2, [sp, #4]
 800ae50:	68e3      	ldr	r3, [r4, #12]
 800ae52:	9900      	ldr	r1, [sp, #0]
 800ae54:	2a00      	cmp	r2, #0
 800ae56:	440b      	add	r3, r1
 800ae58:	60e3      	str	r3, [r4, #12]
 800ae5a:	bfbb      	ittet	lt
 800ae5c:	3218      	addlt	r2, #24
 800ae5e:	f103 33ff 	addlt.w	r3, r3, #4294967295
 800ae62:	60a2      	strge	r2, [r4, #8]
 800ae64:	60a2      	strlt	r2, [r4, #8]
 800ae66:	bfb8      	it	lt
 800ae68:	60e3      	strlt	r3, [r4, #12]
 800ae6a:	6921      	ldr	r1, [r4, #16]
 800ae6c:	290b      	cmp	r1, #11
 800ae6e:	d911      	bls.n	800ae94 <validate_structure+0xac>
 800ae70:	220c      	movs	r2, #12
 800ae72:	4668      	mov	r0, sp
 800ae74:	f000 fdca 	bl	800ba0c <div>
 800ae78:	9a01      	ldr	r2, [sp, #4]
 800ae7a:	6963      	ldr	r3, [r4, #20]
 800ae7c:	9900      	ldr	r1, [sp, #0]
 800ae7e:	2a00      	cmp	r2, #0
 800ae80:	440b      	add	r3, r1
 800ae82:	6163      	str	r3, [r4, #20]
 800ae84:	bfbb      	ittet	lt
 800ae86:	320c      	addlt	r2, #12
 800ae88:	f103 33ff 	addlt.w	r3, r3, #4294967295
 800ae8c:	6122      	strge	r2, [r4, #16]
 800ae8e:	6122      	strlt	r2, [r4, #16]
 800ae90:	bfb8      	it	lt
 800ae92:	6163      	strlt	r3, [r4, #20]
 800ae94:	6963      	ldr	r3, [r4, #20]
 800ae96:	079a      	lsls	r2, r3, #30
 800ae98:	d11c      	bne.n	800aed4 <validate_structure+0xec>
 800ae9a:	2164      	movs	r1, #100	@ 0x64
 800ae9c:	fb93 f2f1 	sdiv	r2, r3, r1
 800aea0:	fb01 3212 	mls	r2, r1, r2, r3
 800aea4:	b9c2      	cbnz	r2, 800aed8 <validate_structure+0xf0>
 800aea6:	f203 736c 	addw	r3, r3, #1900	@ 0x76c
 800aeaa:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800aeae:	fb93 f1f2 	sdiv	r1, r3, r2
 800aeb2:	fb02 3311 	mls	r3, r2, r1, r3
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	bf14      	ite	ne
 800aeba:	231c      	movne	r3, #28
 800aebc:	231d      	moveq	r3, #29
 800aebe:	68e2      	ldr	r2, [r4, #12]
 800aec0:	2a00      	cmp	r2, #0
 800aec2:	dc0b      	bgt.n	800aedc <validate_structure+0xf4>
 800aec4:	4d31      	ldr	r5, [pc, #196]	@ (800af8c <validate_structure+0x1a4>)
 800aec6:	200b      	movs	r0, #11
 800aec8:	2164      	movs	r1, #100	@ 0x64
 800aeca:	68e6      	ldr	r6, [r4, #12]
 800aecc:	2e00      	cmp	r6, #0
 800aece:	dd30      	ble.n	800af32 <validate_structure+0x14a>
 800aed0:	b003      	add	sp, #12
 800aed2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aed4:	231c      	movs	r3, #28
 800aed6:	e7f2      	b.n	800aebe <validate_structure+0xd6>
 800aed8:	231d      	movs	r3, #29
 800aeda:	e7f0      	b.n	800aebe <validate_structure+0xd6>
 800aedc:	4d2b      	ldr	r5, [pc, #172]	@ (800af8c <validate_structure+0x1a4>)
 800aede:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
 800aee2:	2a01      	cmp	r2, #1
 800aee4:	bf14      	ite	ne
 800aee6:	f855 0022 	ldrne.w	r0, [r5, r2, lsl #2]
 800aeea:	4618      	moveq	r0, r3
 800aeec:	4281      	cmp	r1, r0
 800aeee:	ddef      	ble.n	800aed0 <validate_structure+0xe8>
 800aef0:	3201      	adds	r2, #1
 800aef2:	1a09      	subs	r1, r1, r0
 800aef4:	2a0c      	cmp	r2, #12
 800aef6:	60e1      	str	r1, [r4, #12]
 800aef8:	6122      	str	r2, [r4, #16]
 800aefa:	d1f0      	bne.n	800aede <validate_structure+0xf6>
 800aefc:	6963      	ldr	r3, [r4, #20]
 800aefe:	2100      	movs	r1, #0
 800af00:	1c5a      	adds	r2, r3, #1
 800af02:	6121      	str	r1, [r4, #16]
 800af04:	0791      	lsls	r1, r2, #30
 800af06:	6162      	str	r2, [r4, #20]
 800af08:	d13c      	bne.n	800af84 <validate_structure+0x19c>
 800af0a:	2164      	movs	r1, #100	@ 0x64
 800af0c:	fb92 f0f1 	sdiv	r0, r2, r1
 800af10:	fb01 2210 	mls	r2, r1, r0, r2
 800af14:	2a00      	cmp	r2, #0
 800af16:	d137      	bne.n	800af88 <validate_structure+0x1a0>
 800af18:	f203 736d 	addw	r3, r3, #1901	@ 0x76d
 800af1c:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800af20:	fb93 f1f2 	sdiv	r1, r3, r2
 800af24:	fb02 3311 	mls	r3, r2, r1, r3
 800af28:	2b00      	cmp	r3, #0
 800af2a:	bf14      	ite	ne
 800af2c:	231c      	movne	r3, #28
 800af2e:	231d      	moveq	r3, #29
 800af30:	e7d5      	b.n	800aede <validate_structure+0xf6>
 800af32:	6922      	ldr	r2, [r4, #16]
 800af34:	3a01      	subs	r2, #1
 800af36:	6122      	str	r2, [r4, #16]
 800af38:	3201      	adds	r2, #1
 800af3a:	d116      	bne.n	800af6a <validate_structure+0x182>
 800af3c:	6963      	ldr	r3, [r4, #20]
 800af3e:	1e5a      	subs	r2, r3, #1
 800af40:	0797      	lsls	r7, r2, #30
 800af42:	e9c4 0204 	strd	r0, r2, [r4, #16]
 800af46:	d119      	bne.n	800af7c <validate_structure+0x194>
 800af48:	fb92 f7f1 	sdiv	r7, r2, r1
 800af4c:	fb01 2217 	mls	r2, r1, r7, r2
 800af50:	b9b2      	cbnz	r2, 800af80 <validate_structure+0x198>
 800af52:	f203 736b 	addw	r3, r3, #1899	@ 0x76b
 800af56:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800af5a:	fb93 f7f2 	sdiv	r7, r3, r2
 800af5e:	fb02 3317 	mls	r3, r2, r7, r3
 800af62:	2b00      	cmp	r3, #0
 800af64:	bf14      	ite	ne
 800af66:	231c      	movne	r3, #28
 800af68:	231d      	moveq	r3, #29
 800af6a:	6922      	ldr	r2, [r4, #16]
 800af6c:	2a01      	cmp	r2, #1
 800af6e:	bf14      	ite	ne
 800af70:	f855 2022 	ldrne.w	r2, [r5, r2, lsl #2]
 800af74:	461a      	moveq	r2, r3
 800af76:	4432      	add	r2, r6
 800af78:	60e2      	str	r2, [r4, #12]
 800af7a:	e7a6      	b.n	800aeca <validate_structure+0xe2>
 800af7c:	231c      	movs	r3, #28
 800af7e:	e7f4      	b.n	800af6a <validate_structure+0x182>
 800af80:	231d      	movs	r3, #29
 800af82:	e7f2      	b.n	800af6a <validate_structure+0x182>
 800af84:	231c      	movs	r3, #28
 800af86:	e7aa      	b.n	800aede <validate_structure+0xf6>
 800af88:	231d      	movs	r3, #29
 800af8a:	e7a8      	b.n	800aede <validate_structure+0xf6>
 800af8c:	080102e8 	.word	0x080102e8

0800af90 <mktime>:
 800af90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af94:	b085      	sub	sp, #20
 800af96:	4607      	mov	r7, r0
 800af98:	f003 fa4c 	bl	800e434 <__gettzinfo>
 800af9c:	4681      	mov	r9, r0
 800af9e:	4638      	mov	r0, r7
 800afa0:	f7ff ff22 	bl	800ade8 <validate_structure>
 800afa4:	e9d7 4300 	ldrd	r4, r3, [r7]
 800afa8:	223c      	movs	r2, #60	@ 0x3c
 800afaa:	fb02 4403 	mla	r4, r2, r3, r4
 800afae:	68bb      	ldr	r3, [r7, #8]
 800afb0:	697d      	ldr	r5, [r7, #20]
 800afb2:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 800afb6:	fb02 4403 	mla	r4, r2, r3, r4
 800afba:	e9d7 6303 	ldrd	r6, r3, [r7, #12]
 800afbe:	4ac1      	ldr	r2, [pc, #772]	@ (800b2c4 <mktime+0x334>)
 800afc0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800afc4:	3e01      	subs	r6, #1
 800afc6:	2b01      	cmp	r3, #1
 800afc8:	4416      	add	r6, r2
 800afca:	dd11      	ble.n	800aff0 <mktime+0x60>
 800afcc:	07a9      	lsls	r1, r5, #30
 800afce:	d10f      	bne.n	800aff0 <mktime+0x60>
 800afd0:	2264      	movs	r2, #100	@ 0x64
 800afd2:	fb95 f3f2 	sdiv	r3, r5, r2
 800afd6:	fb02 5313 	mls	r3, r2, r3, r5
 800afda:	b943      	cbnz	r3, 800afee <mktime+0x5e>
 800afdc:	f205 736c 	addw	r3, r5, #1900	@ 0x76c
 800afe0:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800afe4:	fb93 f1f2 	sdiv	r1, r3, r2
 800afe8:	fb02 3311 	mls	r3, r2, r1, r3
 800afec:	b903      	cbnz	r3, 800aff0 <mktime+0x60>
 800afee:	3601      	adds	r6, #1
 800aff0:	f505 531c 	add.w	r3, r5, #9984	@ 0x2700
 800aff4:	3310      	adds	r3, #16
 800aff6:	f644 6220 	movw	r2, #20000	@ 0x4e20
 800affa:	4293      	cmp	r3, r2
 800affc:	61fe      	str	r6, [r7, #28]
 800affe:	f200 8167 	bhi.w	800b2d0 <mktime+0x340>
 800b002:	2d46      	cmp	r5, #70	@ 0x46
 800b004:	f340 808e 	ble.w	800b124 <mktime+0x194>
 800b008:	2346      	movs	r3, #70	@ 0x46
 800b00a:	f240 1c6d 	movw	ip, #365	@ 0x16d
 800b00e:	2164      	movs	r1, #100	@ 0x64
 800b010:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 800b014:	079a      	lsls	r2, r3, #30
 800b016:	d17f      	bne.n	800b118 <mktime+0x188>
 800b018:	fb93 f2f1 	sdiv	r2, r3, r1
 800b01c:	fb01 3212 	mls	r2, r1, r2, r3
 800b020:	2a00      	cmp	r2, #0
 800b022:	d17c      	bne.n	800b11e <mktime+0x18e>
 800b024:	f203 726c 	addw	r2, r3, #1900	@ 0x76c
 800b028:	fb92 fef0 	sdiv	lr, r2, r0
 800b02c:	fb00 221e 	mls	r2, r0, lr, r2
 800b030:	2a00      	cmp	r2, #0
 800b032:	bf14      	ite	ne
 800b034:	4662      	movne	r2, ip
 800b036:	f44f 72b7 	moveq.w	r2, #366	@ 0x16e
 800b03a:	3301      	adds	r3, #1
 800b03c:	429d      	cmp	r5, r3
 800b03e:	4416      	add	r6, r2
 800b040:	d1e8      	bne.n	800b014 <mktime+0x84>
 800b042:	4ba1      	ldr	r3, [pc, #644]	@ (800b2c8 <mktime+0x338>)
 800b044:	ea4f 78e4 	mov.w	r8, r4, asr #31
 800b048:	fbc6 4803 	smlal	r4, r8, r6, r3
 800b04c:	f000 f9fa 	bl	800b444 <__tz_lock>
 800b050:	f000 fa04 	bl	800b45c <_tzset_unlocked>
 800b054:	4b9d      	ldr	r3, [pc, #628]	@ (800b2cc <mktime+0x33c>)
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	2b00      	cmp	r3, #0
 800b05a:	f000 8140 	beq.w	800b2de <mktime+0x34e>
 800b05e:	f8d7 a020 	ldr.w	sl, [r7, #32]
 800b062:	6978      	ldr	r0, [r7, #20]
 800b064:	4653      	mov	r3, sl
 800b066:	2b01      	cmp	r3, #1
 800b068:	bfa8      	it	ge
 800b06a:	2301      	movge	r3, #1
 800b06c:	9301      	str	r3, [sp, #4]
 800b06e:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800b072:	f200 706c 	addw	r0, r0, #1900	@ 0x76c
 800b076:	4283      	cmp	r3, r0
 800b078:	f040 8096 	bne.w	800b1a8 <mktime+0x218>
 800b07c:	e9d9 2108 	ldrd	r2, r1, [r9, #32]
 800b080:	f8d9 0050 	ldr.w	r0, [r9, #80]	@ 0x50
 800b084:	f8d9 c04c 	ldr.w	ip, [r9, #76]	@ 0x4c
 800b088:	1a13      	subs	r3, r2, r0
 800b08a:	9303      	str	r3, [sp, #12]
 800b08c:	f8d9 3048 	ldr.w	r3, [r9, #72]	@ 0x48
 800b090:	9302      	str	r3, [sp, #8]
 800b092:	9a02      	ldr	r2, [sp, #8]
 800b094:	f8d9 3028 	ldr.w	r3, [r9, #40]	@ 0x28
 800b098:	eb61 7be0 	sbc.w	fp, r1, r0, asr #31
 800b09c:	ebb2 0e03 	subs.w	lr, r2, r3
 800b0a0:	eb6c 71e3 	sbc.w	r1, ip, r3, asr #31
 800b0a4:	4574      	cmp	r4, lr
 800b0a6:	eb78 0201 	sbcs.w	r2, r8, r1
 800b0aa:	f280 8085 	bge.w	800b1b8 <mktime+0x228>
 800b0ae:	f8d9 2000 	ldr.w	r2, [r9]
 800b0b2:	2a00      	cmp	r2, #0
 800b0b4:	f000 808d 	beq.w	800b1d2 <mktime+0x242>
 800b0b8:	9a03      	ldr	r2, [sp, #12]
 800b0ba:	4294      	cmp	r4, r2
 800b0bc:	eb78 020b 	sbcs.w	r2, r8, fp
 800b0c0:	f2c0 810a 	blt.w	800b2d8 <mktime+0x348>
 800b0c4:	4574      	cmp	r4, lr
 800b0c6:	eb78 0101 	sbcs.w	r1, r8, r1
 800b0ca:	bfb4      	ite	lt
 800b0cc:	f04f 0b01 	movlt.w	fp, #1
 800b0d0:	f04f 0b00 	movge.w	fp, #0
 800b0d4:	f1ba 0f00 	cmp.w	sl, #0
 800b0d8:	f280 8087 	bge.w	800b1ea <mktime+0x25a>
 800b0dc:	f1bb 0f01 	cmp.w	fp, #1
 800b0e0:	f040 80ff 	bne.w	800b2e2 <mktime+0x352>
 800b0e4:	f8d9 3050 	ldr.w	r3, [r9, #80]	@ 0x50
 800b0e8:	191c      	adds	r4, r3, r4
 800b0ea:	eb48 78e3 	adc.w	r8, r8, r3, asr #31
 800b0ee:	f04f 0b01 	mov.w	fp, #1
 800b0f2:	f000 f9ad 	bl	800b450 <__tz_unlock>
 800b0f6:	3604      	adds	r6, #4
 800b0f8:	2307      	movs	r3, #7
 800b0fa:	fb96 f3f3 	sdiv	r3, r6, r3
 800b0fe:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800b102:	1af6      	subs	r6, r6, r3
 800b104:	f100 80db 	bmi.w	800b2be <mktime+0x32e>
 800b108:	f8c7 b020 	str.w	fp, [r7, #32]
 800b10c:	61be      	str	r6, [r7, #24]
 800b10e:	4620      	mov	r0, r4
 800b110:	4641      	mov	r1, r8
 800b112:	b005      	add	sp, #20
 800b114:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b118:	f240 126d 	movw	r2, #365	@ 0x16d
 800b11c:	e78d      	b.n	800b03a <mktime+0xaa>
 800b11e:	f44f 72b7 	mov.w	r2, #366	@ 0x16e
 800b122:	e78a      	b.n	800b03a <mktime+0xaa>
 800b124:	d08d      	beq.n	800b042 <mktime+0xb2>
 800b126:	2345      	movs	r3, #69	@ 0x45
 800b128:	f240 1c6d 	movw	ip, #365	@ 0x16d
 800b12c:	2164      	movs	r1, #100	@ 0x64
 800b12e:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 800b132:	e012      	b.n	800b15a <mktime+0x1ca>
 800b134:	bb62      	cbnz	r2, 800b190 <mktime+0x200>
 800b136:	fb93 f2f1 	sdiv	r2, r3, r1
 800b13a:	fb01 3212 	mls	r2, r1, r2, r3
 800b13e:	bb52      	cbnz	r2, 800b196 <mktime+0x206>
 800b140:	f203 726c 	addw	r2, r3, #1900	@ 0x76c
 800b144:	fb92 fef0 	sdiv	lr, r2, r0
 800b148:	fb00 221e 	mls	r2, r0, lr, r2
 800b14c:	2a00      	cmp	r2, #0
 800b14e:	bf14      	ite	ne
 800b150:	4662      	movne	r2, ip
 800b152:	f44f 72b7 	moveq.w	r2, #366	@ 0x16e
 800b156:	1ab6      	subs	r6, r6, r2
 800b158:	3b01      	subs	r3, #1
 800b15a:	429d      	cmp	r5, r3
 800b15c:	f003 0203 	and.w	r2, r3, #3
 800b160:	dbe8      	blt.n	800b134 <mktime+0x1a4>
 800b162:	b9da      	cbnz	r2, 800b19c <mktime+0x20c>
 800b164:	2264      	movs	r2, #100	@ 0x64
 800b166:	fb95 f3f2 	sdiv	r3, r5, r2
 800b16a:	fb02 5313 	mls	r3, r2, r3, r5
 800b16e:	b9c3      	cbnz	r3, 800b1a2 <mktime+0x212>
 800b170:	f205 736c 	addw	r3, r5, #1900	@ 0x76c
 800b174:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800b178:	fb93 f1f2 	sdiv	r1, r3, r2
 800b17c:	fb02 3311 	mls	r3, r2, r1, r3
 800b180:	2b00      	cmp	r3, #0
 800b182:	f240 136d 	movw	r3, #365	@ 0x16d
 800b186:	bf08      	it	eq
 800b188:	f44f 73b7 	moveq.w	r3, #366	@ 0x16e
 800b18c:	1af6      	subs	r6, r6, r3
 800b18e:	e758      	b.n	800b042 <mktime+0xb2>
 800b190:	f240 126d 	movw	r2, #365	@ 0x16d
 800b194:	e7df      	b.n	800b156 <mktime+0x1c6>
 800b196:	f44f 72b7 	mov.w	r2, #366	@ 0x16e
 800b19a:	e7dc      	b.n	800b156 <mktime+0x1c6>
 800b19c:	f240 136d 	movw	r3, #365	@ 0x16d
 800b1a0:	e7f4      	b.n	800b18c <mktime+0x1fc>
 800b1a2:	f44f 73b7 	mov.w	r3, #366	@ 0x16e
 800b1a6:	e7f1      	b.n	800b18c <mktime+0x1fc>
 800b1a8:	f000 f8a2 	bl	800b2f0 <__tzcalc_limits>
 800b1ac:	2800      	cmp	r0, #0
 800b1ae:	f47f af65 	bne.w	800b07c <mktime+0xec>
 800b1b2:	f8dd b004 	ldr.w	fp, [sp, #4]
 800b1b6:	e791      	b.n	800b0dc <mktime+0x14c>
 800b1b8:	9a02      	ldr	r2, [sp, #8]
 800b1ba:	1a12      	subs	r2, r2, r0
 800b1bc:	9202      	str	r2, [sp, #8]
 800b1be:	ea4f 72e0 	mov.w	r2, r0, asr #31
 800b1c2:	eb6c 0c02 	sbc.w	ip, ip, r2
 800b1c6:	9a02      	ldr	r2, [sp, #8]
 800b1c8:	4294      	cmp	r4, r2
 800b1ca:	eb78 0c0c 	sbcs.w	ip, r8, ip
 800b1ce:	dbf0      	blt.n	800b1b2 <mktime+0x222>
 800b1d0:	e76d      	b.n	800b0ae <mktime+0x11e>
 800b1d2:	9a03      	ldr	r2, [sp, #12]
 800b1d4:	4294      	cmp	r4, r2
 800b1d6:	eb78 020b 	sbcs.w	r2, r8, fp
 800b1da:	f6ff af73 	blt.w	800b0c4 <mktime+0x134>
 800b1de:	f1ba 0f00 	cmp.w	sl, #0
 800b1e2:	f6ff af7f 	blt.w	800b0e4 <mktime+0x154>
 800b1e6:	f04f 0b01 	mov.w	fp, #1
 800b1ea:	9a01      	ldr	r2, [sp, #4]
 800b1ec:	ea82 020b 	eor.w	r2, r2, fp
 800b1f0:	2a01      	cmp	r2, #1
 800b1f2:	f47f af73 	bne.w	800b0dc <mktime+0x14c>
 800b1f6:	f1bb 0f00 	cmp.w	fp, #0
 800b1fa:	d035      	beq.n	800b268 <mktime+0x2d8>
 800b1fc:	1a1b      	subs	r3, r3, r0
 800b1fe:	683a      	ldr	r2, [r7, #0]
 800b200:	f8d7 a00c 	ldr.w	sl, [r7, #12]
 800b204:	441a      	add	r2, r3
 800b206:	191c      	adds	r4, r3, r4
 800b208:	603a      	str	r2, [r7, #0]
 800b20a:	4638      	mov	r0, r7
 800b20c:	eb48 78e3 	adc.w	r8, r8, r3, asr #31
 800b210:	f7ff fdea 	bl	800ade8 <validate_structure>
 800b214:	68fa      	ldr	r2, [r7, #12]
 800b216:	ebb2 020a 	subs.w	r2, r2, sl
 800b21a:	f43f af5f 	beq.w	800b0dc <mktime+0x14c>
 800b21e:	2a01      	cmp	r2, #1
 800b220:	dc24      	bgt.n	800b26c <mktime+0x2dc>
 800b222:	1c93      	adds	r3, r2, #2
 800b224:	bfd8      	it	le
 800b226:	2201      	movle	r2, #1
 800b228:	69fb      	ldr	r3, [r7, #28]
 800b22a:	18d3      	adds	r3, r2, r3
 800b22c:	d527      	bpl.n	800b27e <mktime+0x2ee>
 800b22e:	1e6b      	subs	r3, r5, #1
 800b230:	0798      	lsls	r0, r3, #30
 800b232:	d11e      	bne.n	800b272 <mktime+0x2e2>
 800b234:	2164      	movs	r1, #100	@ 0x64
 800b236:	fb93 f0f1 	sdiv	r0, r3, r1
 800b23a:	fb01 3310 	mls	r3, r1, r0, r3
 800b23e:	b9db      	cbnz	r3, 800b278 <mktime+0x2e8>
 800b240:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 800b244:	f205 756b 	addw	r5, r5, #1899	@ 0x76b
 800b248:	fb95 f1f3 	sdiv	r1, r5, r3
 800b24c:	fb03 5511 	mls	r5, r3, r1, r5
 800b250:	2d00      	cmp	r5, #0
 800b252:	f240 136d 	movw	r3, #365	@ 0x16d
 800b256:	bf18      	it	ne
 800b258:	f44f 73b6 	movne.w	r3, #364	@ 0x16c
 800b25c:	61fb      	str	r3, [r7, #28]
 800b25e:	4416      	add	r6, r2
 800b260:	e73c      	b.n	800b0dc <mktime+0x14c>
 800b262:	f04f 0b00 	mov.w	fp, #0
 800b266:	e7c0      	b.n	800b1ea <mktime+0x25a>
 800b268:	1ac3      	subs	r3, r0, r3
 800b26a:	e7c8      	b.n	800b1fe <mktime+0x26e>
 800b26c:	f04f 32ff 	mov.w	r2, #4294967295
 800b270:	e7da      	b.n	800b228 <mktime+0x298>
 800b272:	f44f 73b6 	mov.w	r3, #364	@ 0x16c
 800b276:	e7f1      	b.n	800b25c <mktime+0x2cc>
 800b278:	f240 136d 	movw	r3, #365	@ 0x16d
 800b27c:	e7ee      	b.n	800b25c <mktime+0x2cc>
 800b27e:	07a9      	lsls	r1, r5, #30
 800b280:	d117      	bne.n	800b2b2 <mktime+0x322>
 800b282:	2064      	movs	r0, #100	@ 0x64
 800b284:	fb95 f1f0 	sdiv	r1, r5, r0
 800b288:	fb00 5111 	mls	r1, r0, r1, r5
 800b28c:	b9a1      	cbnz	r1, 800b2b8 <mktime+0x328>
 800b28e:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 800b292:	f205 756c 	addw	r5, r5, #1900	@ 0x76c
 800b296:	fb95 f0f1 	sdiv	r0, r5, r1
 800b29a:	fb01 5510 	mls	r5, r1, r0, r5
 800b29e:	2d00      	cmp	r5, #0
 800b2a0:	f240 116d 	movw	r1, #365	@ 0x16d
 800b2a4:	bf08      	it	eq
 800b2a6:	f44f 71b7 	moveq.w	r1, #366	@ 0x16e
 800b2aa:	428b      	cmp	r3, r1
 800b2ac:	bfa8      	it	ge
 800b2ae:	1a5b      	subge	r3, r3, r1
 800b2b0:	e7d4      	b.n	800b25c <mktime+0x2cc>
 800b2b2:	f240 116d 	movw	r1, #365	@ 0x16d
 800b2b6:	e7f8      	b.n	800b2aa <mktime+0x31a>
 800b2b8:	f44f 71b7 	mov.w	r1, #366	@ 0x16e
 800b2bc:	e7f5      	b.n	800b2aa <mktime+0x31a>
 800b2be:	3607      	adds	r6, #7
 800b2c0:	e722      	b.n	800b108 <mktime+0x178>
 800b2c2:	bf00      	nop
 800b2c4:	080102b8 	.word	0x080102b8
 800b2c8:	00015180 	.word	0x00015180
 800b2cc:	200070c8 	.word	0x200070c8
 800b2d0:	f04f 34ff 	mov.w	r4, #4294967295
 800b2d4:	46a0      	mov	r8, r4
 800b2d6:	e71a      	b.n	800b10e <mktime+0x17e>
 800b2d8:	f1ba 0f00 	cmp.w	sl, #0
 800b2dc:	dac1      	bge.n	800b262 <mktime+0x2d2>
 800b2de:	f04f 0b00 	mov.w	fp, #0
 800b2e2:	f8d9 3028 	ldr.w	r3, [r9, #40]	@ 0x28
 800b2e6:	191c      	adds	r4, r3, r4
 800b2e8:	eb48 78e3 	adc.w	r8, r8, r3, asr #31
 800b2ec:	e701      	b.n	800b0f2 <mktime+0x162>
 800b2ee:	bf00      	nop

0800b2f0 <__tzcalc_limits>:
 800b2f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b2f4:	4604      	mov	r4, r0
 800b2f6:	f003 f89d 	bl	800e434 <__gettzinfo>
 800b2fa:	f240 73b1 	movw	r3, #1969	@ 0x7b1
 800b2fe:	429c      	cmp	r4, r3
 800b300:	f340 8099 	ble.w	800b436 <__tzcalc_limits+0x146>
 800b304:	f46f 67f6 	mvn.w	r7, #1968	@ 0x7b0
 800b308:	19e5      	adds	r5, r4, r7
 800b30a:	f2a4 73b2 	subw	r3, r4, #1970	@ 0x7b2
 800b30e:	f240 126d 	movw	r2, #365	@ 0x16d
 800b312:	10ad      	asrs	r5, r5, #2
 800b314:	fb02 5503 	mla	r5, r2, r3, r5
 800b318:	f46f 6cc8 	mvn.w	ip, #1600	@ 0x640
 800b31c:	f06f 0263 	mvn.w	r2, #99	@ 0x63
 800b320:	f2a4 736d 	subw	r3, r4, #1901	@ 0x76d
 800b324:	4f45      	ldr	r7, [pc, #276]	@ (800b43c <__tzcalc_limits+0x14c>)
 800b326:	fb93 f3f2 	sdiv	r3, r3, r2
 800b32a:	441d      	add	r5, r3
 800b32c:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800b330:	eb04 030c 	add.w	r3, r4, ip
 800b334:	6044      	str	r4, [r0, #4]
 800b336:	fbb3 f3f2 	udiv	r3, r3, r2
 800b33a:	4601      	mov	r1, r0
 800b33c:	441d      	add	r5, r3
 800b33e:	f100 0c50 	add.w	ip, r0, #80	@ 0x50
 800b342:	7a0b      	ldrb	r3, [r1, #8]
 800b344:	694a      	ldr	r2, [r1, #20]
 800b346:	2b4a      	cmp	r3, #74	@ 0x4a
 800b348:	d133      	bne.n	800b3b2 <__tzcalc_limits+0xc2>
 800b34a:	07a6      	lsls	r6, r4, #30
 800b34c:	eb05 0302 	add.w	r3, r5, r2
 800b350:	d106      	bne.n	800b360 <__tzcalc_limits+0x70>
 800b352:	f04f 0e64 	mov.w	lr, #100	@ 0x64
 800b356:	fb94 f6fe 	sdiv	r6, r4, lr
 800b35a:	fb0e 4616 	mls	r6, lr, r6, r4
 800b35e:	b936      	cbnz	r6, 800b36e <__tzcalc_limits+0x7e>
 800b360:	f44f 7ec8 	mov.w	lr, #400	@ 0x190
 800b364:	fb94 f6fe 	sdiv	r6, r4, lr
 800b368:	fb0e 4616 	mls	r6, lr, r6, r4
 800b36c:	b9fe      	cbnz	r6, 800b3ae <__tzcalc_limits+0xbe>
 800b36e:	2a3b      	cmp	r2, #59	@ 0x3b
 800b370:	bfd4      	ite	le
 800b372:	2200      	movle	r2, #0
 800b374:	2201      	movgt	r2, #1
 800b376:	4413      	add	r3, r2
 800b378:	3b01      	subs	r3, #1
 800b37a:	698a      	ldr	r2, [r1, #24]
 800b37c:	17d6      	asrs	r6, r2, #31
 800b37e:	fbc3 2607 	smlal	r2, r6, r3, r7
 800b382:	6a8b      	ldr	r3, [r1, #40]	@ 0x28
 800b384:	18d2      	adds	r2, r2, r3
 800b386:	eb46 73e3 	adc.w	r3, r6, r3, asr #31
 800b38a:	e9c1 2308 	strd	r2, r3, [r1, #32]
 800b38e:	3128      	adds	r1, #40	@ 0x28
 800b390:	458c      	cmp	ip, r1
 800b392:	d1d6      	bne.n	800b342 <__tzcalc_limits+0x52>
 800b394:	e9d0 4308 	ldrd	r4, r3, [r0, #32]
 800b398:	e9d0 1212 	ldrd	r1, r2, [r0, #72]	@ 0x48
 800b39c:	428c      	cmp	r4, r1
 800b39e:	4193      	sbcs	r3, r2
 800b3a0:	bfb4      	ite	lt
 800b3a2:	2301      	movlt	r3, #1
 800b3a4:	2300      	movge	r3, #0
 800b3a6:	6003      	str	r3, [r0, #0]
 800b3a8:	2001      	movs	r0, #1
 800b3aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b3ae:	2200      	movs	r2, #0
 800b3b0:	e7e1      	b.n	800b376 <__tzcalc_limits+0x86>
 800b3b2:	2b44      	cmp	r3, #68	@ 0x44
 800b3b4:	d101      	bne.n	800b3ba <__tzcalc_limits+0xca>
 800b3b6:	18ab      	adds	r3, r5, r2
 800b3b8:	e7df      	b.n	800b37a <__tzcalc_limits+0x8a>
 800b3ba:	07a3      	lsls	r3, r4, #30
 800b3bc:	d105      	bne.n	800b3ca <__tzcalc_limits+0xda>
 800b3be:	2664      	movs	r6, #100	@ 0x64
 800b3c0:	fb94 f3f6 	sdiv	r3, r4, r6
 800b3c4:	fb06 4313 	mls	r3, r6, r3, r4
 800b3c8:	bb7b      	cbnz	r3, 800b42a <__tzcalc_limits+0x13a>
 800b3ca:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 800b3ce:	fb94 f6f3 	sdiv	r6, r4, r3
 800b3d2:	fb03 4616 	mls	r6, r3, r6, r4
 800b3d6:	fab6 f686 	clz	r6, r6
 800b3da:	0976      	lsrs	r6, r6, #5
 800b3dc:	f8df e060 	ldr.w	lr, [pc, #96]	@ 800b440 <__tzcalc_limits+0x150>
 800b3e0:	f8d1 900c 	ldr.w	r9, [r1, #12]
 800b3e4:	f04f 0a30 	mov.w	sl, #48	@ 0x30
 800b3e8:	462b      	mov	r3, r5
 800b3ea:	f04f 0800 	mov.w	r8, #0
 800b3ee:	fb0a e606 	mla	r6, sl, r6, lr
 800b3f2:	f108 0801 	add.w	r8, r8, #1
 800b3f6:	45c1      	cmp	r9, r8
 800b3f8:	f856 e028 	ldr.w	lr, [r6, r8, lsl #2]
 800b3fc:	dc17      	bgt.n	800b42e <__tzcalc_limits+0x13e>
 800b3fe:	f103 0804 	add.w	r8, r3, #4
 800b402:	2607      	movs	r6, #7
 800b404:	fb98 f6f6 	sdiv	r6, r8, r6
 800b408:	ebc6 06c6 	rsb	r6, r6, r6, lsl #3
 800b40c:	eba8 0606 	sub.w	r6, r8, r6
 800b410:	1b92      	subs	r2, r2, r6
 800b412:	690e      	ldr	r6, [r1, #16]
 800b414:	f106 36ff 	add.w	r6, r6, #4294967295
 800b418:	bf48      	it	mi
 800b41a:	3207      	addmi	r2, #7
 800b41c:	ebc6 06c6 	rsb	r6, r6, r6, lsl #3
 800b420:	4432      	add	r2, r6
 800b422:	4572      	cmp	r2, lr
 800b424:	da05      	bge.n	800b432 <__tzcalc_limits+0x142>
 800b426:	4413      	add	r3, r2
 800b428:	e7a7      	b.n	800b37a <__tzcalc_limits+0x8a>
 800b42a:	2601      	movs	r6, #1
 800b42c:	e7d6      	b.n	800b3dc <__tzcalc_limits+0xec>
 800b42e:	4473      	add	r3, lr
 800b430:	e7df      	b.n	800b3f2 <__tzcalc_limits+0x102>
 800b432:	3a07      	subs	r2, #7
 800b434:	e7f5      	b.n	800b422 <__tzcalc_limits+0x132>
 800b436:	2000      	movs	r0, #0
 800b438:	e7b7      	b.n	800b3aa <__tzcalc_limits+0xba>
 800b43a:	bf00      	nop
 800b43c:	00015180 	.word	0x00015180
 800b440:	080105d8 	.word	0x080105d8

0800b444 <__tz_lock>:
 800b444:	4801      	ldr	r0, [pc, #4]	@ (800b44c <__tz_lock+0x8>)
 800b446:	f000 bab6 	b.w	800b9b6 <__retarget_lock_acquire>
 800b44a:	bf00      	nop
 800b44c:	200070d0 	.word	0x200070d0

0800b450 <__tz_unlock>:
 800b450:	4801      	ldr	r0, [pc, #4]	@ (800b458 <__tz_unlock+0x8>)
 800b452:	f000 bab2 	b.w	800b9ba <__retarget_lock_release>
 800b456:	bf00      	nop
 800b458:	200070d0 	.word	0x200070d0

0800b45c <_tzset_unlocked>:
 800b45c:	4b01      	ldr	r3, [pc, #4]	@ (800b464 <_tzset_unlocked+0x8>)
 800b45e:	6818      	ldr	r0, [r3, #0]
 800b460:	f000 b802 	b.w	800b468 <_tzset_unlocked_r>
 800b464:	2000019c 	.word	0x2000019c

0800b468 <_tzset_unlocked_r>:
 800b468:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b46c:	b08d      	sub	sp, #52	@ 0x34
 800b46e:	4607      	mov	r7, r0
 800b470:	f002 ffe0 	bl	800e434 <__gettzinfo>
 800b474:	49bc      	ldr	r1, [pc, #752]	@ (800b768 <_tzset_unlocked_r+0x300>)
 800b476:	4dbd      	ldr	r5, [pc, #756]	@ (800b76c <_tzset_unlocked_r+0x304>)
 800b478:	4604      	mov	r4, r0
 800b47a:	4638      	mov	r0, r7
 800b47c:	f001 fcdc 	bl	800ce38 <_getenv_r>
 800b480:	4606      	mov	r6, r0
 800b482:	bb10      	cbnz	r0, 800b4ca <_tzset_unlocked_r+0x62>
 800b484:	4bba      	ldr	r3, [pc, #744]	@ (800b770 <_tzset_unlocked_r+0x308>)
 800b486:	4abb      	ldr	r2, [pc, #748]	@ (800b774 <_tzset_unlocked_r+0x30c>)
 800b488:	6018      	str	r0, [r3, #0]
 800b48a:	4bbb      	ldr	r3, [pc, #748]	@ (800b778 <_tzset_unlocked_r+0x310>)
 800b48c:	62a0      	str	r0, [r4, #40]	@ 0x28
 800b48e:	6018      	str	r0, [r3, #0]
 800b490:	4bba      	ldr	r3, [pc, #744]	@ (800b77c <_tzset_unlocked_r+0x314>)
 800b492:	6520      	str	r0, [r4, #80]	@ 0x50
 800b494:	e9c3 2200 	strd	r2, r2, [r3]
 800b498:	214a      	movs	r1, #74	@ 0x4a
 800b49a:	2200      	movs	r2, #0
 800b49c:	2300      	movs	r3, #0
 800b49e:	e9c4 0003 	strd	r0, r0, [r4, #12]
 800b4a2:	e9c4 0005 	strd	r0, r0, [r4, #20]
 800b4a6:	e9c4 000d 	strd	r0, r0, [r4, #52]	@ 0x34
 800b4aa:	e9c4 000f 	strd	r0, r0, [r4, #60]	@ 0x3c
 800b4ae:	e9c4 2308 	strd	r2, r3, [r4, #32]
 800b4b2:	e9c4 2312 	strd	r2, r3, [r4, #72]	@ 0x48
 800b4b6:	6828      	ldr	r0, [r5, #0]
 800b4b8:	7221      	strb	r1, [r4, #8]
 800b4ba:	f884 1030 	strb.w	r1, [r4, #48]	@ 0x30
 800b4be:	f7fd fcbd 	bl	8008e3c <free>
 800b4c2:	602e      	str	r6, [r5, #0]
 800b4c4:	b00d      	add	sp, #52	@ 0x34
 800b4c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b4ca:	6829      	ldr	r1, [r5, #0]
 800b4cc:	2900      	cmp	r1, #0
 800b4ce:	f040 808e 	bne.w	800b5ee <_tzset_unlocked_r+0x186>
 800b4d2:	6828      	ldr	r0, [r5, #0]
 800b4d4:	f7fd fcb2 	bl	8008e3c <free>
 800b4d8:	4630      	mov	r0, r6
 800b4da:	f7f4 fed9 	bl	8000290 <strlen>
 800b4de:	1c41      	adds	r1, r0, #1
 800b4e0:	4638      	mov	r0, r7
 800b4e2:	f7fd fcd5 	bl	8008e90 <_malloc_r>
 800b4e6:	6028      	str	r0, [r5, #0]
 800b4e8:	2800      	cmp	r0, #0
 800b4ea:	f040 8086 	bne.w	800b5fa <_tzset_unlocked_r+0x192>
 800b4ee:	4aa2      	ldr	r2, [pc, #648]	@ (800b778 <_tzset_unlocked_r+0x310>)
 800b4f0:	f8df 8288 	ldr.w	r8, [pc, #648]	@ 800b77c <_tzset_unlocked_r+0x314>
 800b4f4:	f8df a278 	ldr.w	sl, [pc, #632]	@ 800b770 <_tzset_unlocked_r+0x308>
 800b4f8:	2300      	movs	r3, #0
 800b4fa:	6013      	str	r3, [r2, #0]
 800b4fc:	4aa0      	ldr	r2, [pc, #640]	@ (800b780 <_tzset_unlocked_r+0x318>)
 800b4fe:	f8ca 3000 	str.w	r3, [sl]
 800b502:	2000      	movs	r0, #0
 800b504:	2100      	movs	r1, #0
 800b506:	e9c8 2200 	strd	r2, r2, [r8]
 800b50a:	e9c4 3303 	strd	r3, r3, [r4, #12]
 800b50e:	e9c4 3305 	strd	r3, r3, [r4, #20]
 800b512:	e9c4 0108 	strd	r0, r1, [r4, #32]
 800b516:	e9c4 330d 	strd	r3, r3, [r4, #52]	@ 0x34
 800b51a:	e9c4 330f 	strd	r3, r3, [r4, #60]	@ 0x3c
 800b51e:	e9c4 0112 	strd	r0, r1, [r4, #72]	@ 0x48
 800b522:	224a      	movs	r2, #74	@ 0x4a
 800b524:	7222      	strb	r2, [r4, #8]
 800b526:	62a3      	str	r3, [r4, #40]	@ 0x28
 800b528:	f884 2030 	strb.w	r2, [r4, #48]	@ 0x30
 800b52c:	6523      	str	r3, [r4, #80]	@ 0x50
 800b52e:	7833      	ldrb	r3, [r6, #0]
 800b530:	2b3a      	cmp	r3, #58	@ 0x3a
 800b532:	bf08      	it	eq
 800b534:	3601      	addeq	r6, #1
 800b536:	7833      	ldrb	r3, [r6, #0]
 800b538:	2b3c      	cmp	r3, #60	@ 0x3c
 800b53a:	d162      	bne.n	800b602 <_tzset_unlocked_r+0x19a>
 800b53c:	1c75      	adds	r5, r6, #1
 800b53e:	4a91      	ldr	r2, [pc, #580]	@ (800b784 <_tzset_unlocked_r+0x31c>)
 800b540:	4991      	ldr	r1, [pc, #580]	@ (800b788 <_tzset_unlocked_r+0x320>)
 800b542:	ab0a      	add	r3, sp, #40	@ 0x28
 800b544:	4628      	mov	r0, r5
 800b546:	f7ff fb41 	bl	800abcc <siscanf>
 800b54a:	2800      	cmp	r0, #0
 800b54c:	ddba      	ble.n	800b4c4 <_tzset_unlocked_r+0x5c>
 800b54e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b550:	1eda      	subs	r2, r3, #3
 800b552:	2a07      	cmp	r2, #7
 800b554:	d8b6      	bhi.n	800b4c4 <_tzset_unlocked_r+0x5c>
 800b556:	5ceb      	ldrb	r3, [r5, r3]
 800b558:	2b3e      	cmp	r3, #62	@ 0x3e
 800b55a:	d1b3      	bne.n	800b4c4 <_tzset_unlocked_r+0x5c>
 800b55c:	3602      	adds	r6, #2
 800b55e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b560:	18f5      	adds	r5, r6, r3
 800b562:	5cf3      	ldrb	r3, [r6, r3]
 800b564:	2b2d      	cmp	r3, #45	@ 0x2d
 800b566:	d15a      	bne.n	800b61e <_tzset_unlocked_r+0x1b6>
 800b568:	3501      	adds	r5, #1
 800b56a:	f04f 39ff 	mov.w	r9, #4294967295
 800b56e:	2300      	movs	r3, #0
 800b570:	f8ad 301e 	strh.w	r3, [sp, #30]
 800b574:	f8ad 3020 	strh.w	r3, [sp, #32]
 800b578:	af08      	add	r7, sp, #32
 800b57a:	ab0a      	add	r3, sp, #40	@ 0x28
 800b57c:	e9cd 3701 	strd	r3, r7, [sp, #4]
 800b580:	9303      	str	r3, [sp, #12]
 800b582:	f10d 031e 	add.w	r3, sp, #30
 800b586:	9300      	str	r3, [sp, #0]
 800b588:	4980      	ldr	r1, [pc, #512]	@ (800b78c <_tzset_unlocked_r+0x324>)
 800b58a:	ab0a      	add	r3, sp, #40	@ 0x28
 800b58c:	aa07      	add	r2, sp, #28
 800b58e:	4628      	mov	r0, r5
 800b590:	f7ff fb1c 	bl	800abcc <siscanf>
 800b594:	2800      	cmp	r0, #0
 800b596:	dd95      	ble.n	800b4c4 <_tzset_unlocked_r+0x5c>
 800b598:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 800b59c:	f8bd 6020 	ldrh.w	r6, [sp, #32]
 800b5a0:	223c      	movs	r2, #60	@ 0x3c
 800b5a2:	fb02 6603 	mla	r6, r2, r3, r6
 800b5a6:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 800b5aa:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 800b5ae:	fb02 6603 	mla	r6, r2, r3, r6
 800b5b2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b5b4:	fb09 f606 	mul.w	r6, r9, r6
 800b5b8:	eb05 0903 	add.w	r9, r5, r3
 800b5bc:	5ceb      	ldrb	r3, [r5, r3]
 800b5be:	2b3c      	cmp	r3, #60	@ 0x3c
 800b5c0:	f040 80ee 	bne.w	800b7a0 <_tzset_unlocked_r+0x338>
 800b5c4:	f109 0501 	add.w	r5, r9, #1
 800b5c8:	4a71      	ldr	r2, [pc, #452]	@ (800b790 <_tzset_unlocked_r+0x328>)
 800b5ca:	496f      	ldr	r1, [pc, #444]	@ (800b788 <_tzset_unlocked_r+0x320>)
 800b5cc:	ab0a      	add	r3, sp, #40	@ 0x28
 800b5ce:	4628      	mov	r0, r5
 800b5d0:	f7ff fafc 	bl	800abcc <siscanf>
 800b5d4:	2800      	cmp	r0, #0
 800b5d6:	dc28      	bgt.n	800b62a <_tzset_unlocked_r+0x1c2>
 800b5d8:	f899 3001 	ldrb.w	r3, [r9, #1]
 800b5dc:	2b3e      	cmp	r3, #62	@ 0x3e
 800b5de:	d124      	bne.n	800b62a <_tzset_unlocked_r+0x1c2>
 800b5e0:	4b68      	ldr	r3, [pc, #416]	@ (800b784 <_tzset_unlocked_r+0x31c>)
 800b5e2:	62a6      	str	r6, [r4, #40]	@ 0x28
 800b5e4:	e9c8 3300 	strd	r3, r3, [r8]
 800b5e8:	f8ca 6000 	str.w	r6, [sl]
 800b5ec:	e76a      	b.n	800b4c4 <_tzset_unlocked_r+0x5c>
 800b5ee:	f7f4 fdef 	bl	80001d0 <strcmp>
 800b5f2:	2800      	cmp	r0, #0
 800b5f4:	f47f af6d 	bne.w	800b4d2 <_tzset_unlocked_r+0x6a>
 800b5f8:	e764      	b.n	800b4c4 <_tzset_unlocked_r+0x5c>
 800b5fa:	4631      	mov	r1, r6
 800b5fc:	f000 f9df 	bl	800b9be <strcpy>
 800b600:	e775      	b.n	800b4ee <_tzset_unlocked_r+0x86>
 800b602:	4a60      	ldr	r2, [pc, #384]	@ (800b784 <_tzset_unlocked_r+0x31c>)
 800b604:	4963      	ldr	r1, [pc, #396]	@ (800b794 <_tzset_unlocked_r+0x32c>)
 800b606:	ab0a      	add	r3, sp, #40	@ 0x28
 800b608:	4630      	mov	r0, r6
 800b60a:	f7ff fadf 	bl	800abcc <siscanf>
 800b60e:	2800      	cmp	r0, #0
 800b610:	f77f af58 	ble.w	800b4c4 <_tzset_unlocked_r+0x5c>
 800b614:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b616:	3b03      	subs	r3, #3
 800b618:	2b07      	cmp	r3, #7
 800b61a:	d9a0      	bls.n	800b55e <_tzset_unlocked_r+0xf6>
 800b61c:	e752      	b.n	800b4c4 <_tzset_unlocked_r+0x5c>
 800b61e:	2b2b      	cmp	r3, #43	@ 0x2b
 800b620:	bf08      	it	eq
 800b622:	3501      	addeq	r5, #1
 800b624:	f04f 0901 	mov.w	r9, #1
 800b628:	e7a1      	b.n	800b56e <_tzset_unlocked_r+0x106>
 800b62a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b62c:	1eda      	subs	r2, r3, #3
 800b62e:	2a07      	cmp	r2, #7
 800b630:	f63f af48 	bhi.w	800b4c4 <_tzset_unlocked_r+0x5c>
 800b634:	5ceb      	ldrb	r3, [r5, r3]
 800b636:	2b3e      	cmp	r3, #62	@ 0x3e
 800b638:	f47f af44 	bne.w	800b4c4 <_tzset_unlocked_r+0x5c>
 800b63c:	f109 0902 	add.w	r9, r9, #2
 800b640:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b642:	eb09 0503 	add.w	r5, r9, r3
 800b646:	f819 3003 	ldrb.w	r3, [r9, r3]
 800b64a:	2b2d      	cmp	r3, #45	@ 0x2d
 800b64c:	f040 80b7 	bne.w	800b7be <_tzset_unlocked_r+0x356>
 800b650:	3501      	adds	r5, #1
 800b652:	f04f 39ff 	mov.w	r9, #4294967295
 800b656:	2300      	movs	r3, #0
 800b658:	f8ad 301c 	strh.w	r3, [sp, #28]
 800b65c:	f8ad 301e 	strh.w	r3, [sp, #30]
 800b660:	f8ad 3020 	strh.w	r3, [sp, #32]
 800b664:	930a      	str	r3, [sp, #40]	@ 0x28
 800b666:	ab0a      	add	r3, sp, #40	@ 0x28
 800b668:	e9cd 7302 	strd	r7, r3, [sp, #8]
 800b66c:	9301      	str	r3, [sp, #4]
 800b66e:	f10d 031e 	add.w	r3, sp, #30
 800b672:	9300      	str	r3, [sp, #0]
 800b674:	4945      	ldr	r1, [pc, #276]	@ (800b78c <_tzset_unlocked_r+0x324>)
 800b676:	ab0a      	add	r3, sp, #40	@ 0x28
 800b678:	aa07      	add	r2, sp, #28
 800b67a:	4628      	mov	r0, r5
 800b67c:	f7ff faa6 	bl	800abcc <siscanf>
 800b680:	2800      	cmp	r0, #0
 800b682:	f300 80a2 	bgt.w	800b7ca <_tzset_unlocked_r+0x362>
 800b686:	f5a6 6361 	sub.w	r3, r6, #3600	@ 0xe10
 800b68a:	9304      	str	r3, [sp, #16]
 800b68c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b68e:	4627      	mov	r7, r4
 800b690:	441d      	add	r5, r3
 800b692:	f04f 0b00 	mov.w	fp, #0
 800b696:	782b      	ldrb	r3, [r5, #0]
 800b698:	2b2c      	cmp	r3, #44	@ 0x2c
 800b69a:	bf08      	it	eq
 800b69c:	3501      	addeq	r5, #1
 800b69e:	f895 9000 	ldrb.w	r9, [r5]
 800b6a2:	f1b9 0f4d 	cmp.w	r9, #77	@ 0x4d
 800b6a6:	f040 80a3 	bne.w	800b7f0 <_tzset_unlocked_r+0x388>
 800b6aa:	ab0a      	add	r3, sp, #40	@ 0x28
 800b6ac:	f10d 0226 	add.w	r2, sp, #38	@ 0x26
 800b6b0:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800b6b4:	aa09      	add	r2, sp, #36	@ 0x24
 800b6b6:	9200      	str	r2, [sp, #0]
 800b6b8:	4937      	ldr	r1, [pc, #220]	@ (800b798 <_tzset_unlocked_r+0x330>)
 800b6ba:	9303      	str	r3, [sp, #12]
 800b6bc:	f10d 0222 	add.w	r2, sp, #34	@ 0x22
 800b6c0:	4628      	mov	r0, r5
 800b6c2:	f7ff fa83 	bl	800abcc <siscanf>
 800b6c6:	2803      	cmp	r0, #3
 800b6c8:	f47f aefc 	bne.w	800b4c4 <_tzset_unlocked_r+0x5c>
 800b6cc:	f8bd 1022 	ldrh.w	r1, [sp, #34]	@ 0x22
 800b6d0:	1e4b      	subs	r3, r1, #1
 800b6d2:	2b0b      	cmp	r3, #11
 800b6d4:	f63f aef6 	bhi.w	800b4c4 <_tzset_unlocked_r+0x5c>
 800b6d8:	f8bd 2024 	ldrh.w	r2, [sp, #36]	@ 0x24
 800b6dc:	1e53      	subs	r3, r2, #1
 800b6de:	2b04      	cmp	r3, #4
 800b6e0:	f63f aef0 	bhi.w	800b4c4 <_tzset_unlocked_r+0x5c>
 800b6e4:	f8bd 3026 	ldrh.w	r3, [sp, #38]	@ 0x26
 800b6e8:	2b06      	cmp	r3, #6
 800b6ea:	f63f aeeb 	bhi.w	800b4c4 <_tzset_unlocked_r+0x5c>
 800b6ee:	e9c7 1203 	strd	r1, r2, [r7, #12]
 800b6f2:	f887 9008 	strb.w	r9, [r7, #8]
 800b6f6:	617b      	str	r3, [r7, #20]
 800b6f8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b6fa:	eb05 0903 	add.w	r9, r5, r3
 800b6fe:	2500      	movs	r5, #0
 800b700:	f04f 0302 	mov.w	r3, #2
 800b704:	f8ad 301c 	strh.w	r3, [sp, #28]
 800b708:	f8ad 501e 	strh.w	r5, [sp, #30]
 800b70c:	f8ad 5020 	strh.w	r5, [sp, #32]
 800b710:	950a      	str	r5, [sp, #40]	@ 0x28
 800b712:	f899 3000 	ldrb.w	r3, [r9]
 800b716:	2b2f      	cmp	r3, #47	@ 0x2f
 800b718:	f040 8096 	bne.w	800b848 <_tzset_unlocked_r+0x3e0>
 800b71c:	ab0a      	add	r3, sp, #40	@ 0x28
 800b71e:	aa08      	add	r2, sp, #32
 800b720:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800b724:	f10d 021e 	add.w	r2, sp, #30
 800b728:	9200      	str	r2, [sp, #0]
 800b72a:	491c      	ldr	r1, [pc, #112]	@ (800b79c <_tzset_unlocked_r+0x334>)
 800b72c:	9303      	str	r3, [sp, #12]
 800b72e:	aa07      	add	r2, sp, #28
 800b730:	4648      	mov	r0, r9
 800b732:	f7ff fa4b 	bl	800abcc <siscanf>
 800b736:	42a8      	cmp	r0, r5
 800b738:	f300 8086 	bgt.w	800b848 <_tzset_unlocked_r+0x3e0>
 800b73c:	214a      	movs	r1, #74	@ 0x4a
 800b73e:	2200      	movs	r2, #0
 800b740:	2300      	movs	r3, #0
 800b742:	e9c4 5503 	strd	r5, r5, [r4, #12]
 800b746:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800b74a:	e9c4 2308 	strd	r2, r3, [r4, #32]
 800b74e:	e9c4 550d 	strd	r5, r5, [r4, #52]	@ 0x34
 800b752:	e9c4 550f 	strd	r5, r5, [r4, #60]	@ 0x3c
 800b756:	e9c4 2312 	strd	r2, r3, [r4, #72]	@ 0x48
 800b75a:	7221      	strb	r1, [r4, #8]
 800b75c:	62a5      	str	r5, [r4, #40]	@ 0x28
 800b75e:	f884 1030 	strb.w	r1, [r4, #48]	@ 0x30
 800b762:	6525      	str	r5, [r4, #80]	@ 0x50
 800b764:	e6ae      	b.n	800b4c4 <_tzset_unlocked_r+0x5c>
 800b766:	bf00      	nop
 800b768:	08010318 	.word	0x08010318
 800b76c:	200070a8 	.word	0x200070a8
 800b770:	200070c4 	.word	0x200070c4
 800b774:	0801031b 	.word	0x0801031b
 800b778:	200070c8 	.word	0x200070c8
 800b77c:	20000028 	.word	0x20000028
 800b780:	0800fa09 	.word	0x0800fa09
 800b784:	200070b8 	.word	0x200070b8
 800b788:	0801031f 	.word	0x0801031f
 800b78c:	08010354 	.word	0x08010354
 800b790:	200070ac 	.word	0x200070ac
 800b794:	08010332 	.word	0x08010332
 800b798:	08010340 	.word	0x08010340
 800b79c:	08010353 	.word	0x08010353
 800b7a0:	4a3e      	ldr	r2, [pc, #248]	@ (800b89c <_tzset_unlocked_r+0x434>)
 800b7a2:	493f      	ldr	r1, [pc, #252]	@ (800b8a0 <_tzset_unlocked_r+0x438>)
 800b7a4:	ab0a      	add	r3, sp, #40	@ 0x28
 800b7a6:	4648      	mov	r0, r9
 800b7a8:	f7ff fa10 	bl	800abcc <siscanf>
 800b7ac:	2800      	cmp	r0, #0
 800b7ae:	f77f af17 	ble.w	800b5e0 <_tzset_unlocked_r+0x178>
 800b7b2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b7b4:	3b03      	subs	r3, #3
 800b7b6:	2b07      	cmp	r3, #7
 800b7b8:	f67f af42 	bls.w	800b640 <_tzset_unlocked_r+0x1d8>
 800b7bc:	e682      	b.n	800b4c4 <_tzset_unlocked_r+0x5c>
 800b7be:	2b2b      	cmp	r3, #43	@ 0x2b
 800b7c0:	bf08      	it	eq
 800b7c2:	3501      	addeq	r5, #1
 800b7c4:	f04f 0901 	mov.w	r9, #1
 800b7c8:	e745      	b.n	800b656 <_tzset_unlocked_r+0x1ee>
 800b7ca:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 800b7ce:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 800b7d2:	213c      	movs	r1, #60	@ 0x3c
 800b7d4:	fb01 3302 	mla	r3, r1, r2, r3
 800b7d8:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 800b7dc:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 800b7e0:	fb01 3302 	mla	r3, r1, r2, r3
 800b7e4:	fb09 f303 	mul.w	r3, r9, r3
 800b7e8:	e74f      	b.n	800b68a <_tzset_unlocked_r+0x222>
 800b7ea:	f04f 0b01 	mov.w	fp, #1
 800b7ee:	e752      	b.n	800b696 <_tzset_unlocked_r+0x22e>
 800b7f0:	f1b9 0f4a 	cmp.w	r9, #74	@ 0x4a
 800b7f4:	bf06      	itte	eq
 800b7f6:	3501      	addeq	r5, #1
 800b7f8:	464b      	moveq	r3, r9
 800b7fa:	2344      	movne	r3, #68	@ 0x44
 800b7fc:	220a      	movs	r2, #10
 800b7fe:	a90b      	add	r1, sp, #44	@ 0x2c
 800b800:	4628      	mov	r0, r5
 800b802:	9305      	str	r3, [sp, #20]
 800b804:	f002 f854 	bl	800d8b0 <strtoul>
 800b808:	f8dd 902c 	ldr.w	r9, [sp, #44]	@ 0x2c
 800b80c:	9b05      	ldr	r3, [sp, #20]
 800b80e:	f8ad 0026 	strh.w	r0, [sp, #38]	@ 0x26
 800b812:	45a9      	cmp	r9, r5
 800b814:	d114      	bne.n	800b840 <_tzset_unlocked_r+0x3d8>
 800b816:	234d      	movs	r3, #77	@ 0x4d
 800b818:	f1bb 0f00 	cmp.w	fp, #0
 800b81c:	d107      	bne.n	800b82e <_tzset_unlocked_r+0x3c6>
 800b81e:	7223      	strb	r3, [r4, #8]
 800b820:	2103      	movs	r1, #3
 800b822:	2302      	movs	r3, #2
 800b824:	e9c4 1303 	strd	r1, r3, [r4, #12]
 800b828:	f8c4 b014 	str.w	fp, [r4, #20]
 800b82c:	e767      	b.n	800b6fe <_tzset_unlocked_r+0x296>
 800b82e:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
 800b832:	220b      	movs	r2, #11
 800b834:	2301      	movs	r3, #1
 800b836:	e9c4 230d 	strd	r2, r3, [r4, #52]	@ 0x34
 800b83a:	2300      	movs	r3, #0
 800b83c:	63e3      	str	r3, [r4, #60]	@ 0x3c
 800b83e:	e75e      	b.n	800b6fe <_tzset_unlocked_r+0x296>
 800b840:	b280      	uxth	r0, r0
 800b842:	723b      	strb	r3, [r7, #8]
 800b844:	6178      	str	r0, [r7, #20]
 800b846:	e75a      	b.n	800b6fe <_tzset_unlocked_r+0x296>
 800b848:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 800b84c:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 800b850:	213c      	movs	r1, #60	@ 0x3c
 800b852:	fb01 3302 	mla	r3, r1, r2, r3
 800b856:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 800b85a:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 800b85e:	fb01 3302 	mla	r3, r1, r2, r3
 800b862:	61bb      	str	r3, [r7, #24]
 800b864:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 800b866:	3728      	adds	r7, #40	@ 0x28
 800b868:	444d      	add	r5, r9
 800b86a:	f1bb 0f00 	cmp.w	fp, #0
 800b86e:	d0bc      	beq.n	800b7ea <_tzset_unlocked_r+0x382>
 800b870:	9b04      	ldr	r3, [sp, #16]
 800b872:	6523      	str	r3, [r4, #80]	@ 0x50
 800b874:	4b0b      	ldr	r3, [pc, #44]	@ (800b8a4 <_tzset_unlocked_r+0x43c>)
 800b876:	f8c8 3000 	str.w	r3, [r8]
 800b87a:	6860      	ldr	r0, [r4, #4]
 800b87c:	4b07      	ldr	r3, [pc, #28]	@ (800b89c <_tzset_unlocked_r+0x434>)
 800b87e:	62a6      	str	r6, [r4, #40]	@ 0x28
 800b880:	f8c8 3004 	str.w	r3, [r8, #4]
 800b884:	f7ff fd34 	bl	800b2f0 <__tzcalc_limits>
 800b888:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800b88a:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 800b88c:	f8ca 2000 	str.w	r2, [sl]
 800b890:	1a9b      	subs	r3, r3, r2
 800b892:	4a05      	ldr	r2, [pc, #20]	@ (800b8a8 <_tzset_unlocked_r+0x440>)
 800b894:	bf18      	it	ne
 800b896:	2301      	movne	r3, #1
 800b898:	6013      	str	r3, [r2, #0]
 800b89a:	e613      	b.n	800b4c4 <_tzset_unlocked_r+0x5c>
 800b89c:	200070ac 	.word	0x200070ac
 800b8a0:	08010332 	.word	0x08010332
 800b8a4:	200070b8 	.word	0x200070b8
 800b8a8:	200070c8 	.word	0x200070c8

0800b8ac <_localeconv_r>:
 800b8ac:	4800      	ldr	r0, [pc, #0]	@ (800b8b0 <_localeconv_r+0x4>)
 800b8ae:	4770      	bx	lr
 800b8b0:	20000120 	.word	0x20000120

0800b8b4 <_close_r>:
 800b8b4:	b538      	push	{r3, r4, r5, lr}
 800b8b6:	4d06      	ldr	r5, [pc, #24]	@ (800b8d0 <_close_r+0x1c>)
 800b8b8:	2300      	movs	r3, #0
 800b8ba:	4604      	mov	r4, r0
 800b8bc:	4608      	mov	r0, r1
 800b8be:	602b      	str	r3, [r5, #0]
 800b8c0:	f7f8 fe2c 	bl	800451c <_close>
 800b8c4:	1c43      	adds	r3, r0, #1
 800b8c6:	d102      	bne.n	800b8ce <_close_r+0x1a>
 800b8c8:	682b      	ldr	r3, [r5, #0]
 800b8ca:	b103      	cbz	r3, 800b8ce <_close_r+0x1a>
 800b8cc:	6023      	str	r3, [r4, #0]
 800b8ce:	bd38      	pop	{r3, r4, r5, pc}
 800b8d0:	200070cc 	.word	0x200070cc

0800b8d4 <_lseek_r>:
 800b8d4:	b538      	push	{r3, r4, r5, lr}
 800b8d6:	4d07      	ldr	r5, [pc, #28]	@ (800b8f4 <_lseek_r+0x20>)
 800b8d8:	4604      	mov	r4, r0
 800b8da:	4608      	mov	r0, r1
 800b8dc:	4611      	mov	r1, r2
 800b8de:	2200      	movs	r2, #0
 800b8e0:	602a      	str	r2, [r5, #0]
 800b8e2:	461a      	mov	r2, r3
 800b8e4:	f7f8 fe24 	bl	8004530 <_lseek>
 800b8e8:	1c43      	adds	r3, r0, #1
 800b8ea:	d102      	bne.n	800b8f2 <_lseek_r+0x1e>
 800b8ec:	682b      	ldr	r3, [r5, #0]
 800b8ee:	b103      	cbz	r3, 800b8f2 <_lseek_r+0x1e>
 800b8f0:	6023      	str	r3, [r4, #0]
 800b8f2:	bd38      	pop	{r3, r4, r5, pc}
 800b8f4:	200070cc 	.word	0x200070cc

0800b8f8 <_read_r>:
 800b8f8:	b538      	push	{r3, r4, r5, lr}
 800b8fa:	4d07      	ldr	r5, [pc, #28]	@ (800b918 <_read_r+0x20>)
 800b8fc:	4604      	mov	r4, r0
 800b8fe:	4608      	mov	r0, r1
 800b900:	4611      	mov	r1, r2
 800b902:	2200      	movs	r2, #0
 800b904:	602a      	str	r2, [r5, #0]
 800b906:	461a      	mov	r2, r3
 800b908:	f7f8 fdec 	bl	80044e4 <_read>
 800b90c:	1c43      	adds	r3, r0, #1
 800b90e:	d102      	bne.n	800b916 <_read_r+0x1e>
 800b910:	682b      	ldr	r3, [r5, #0]
 800b912:	b103      	cbz	r3, 800b916 <_read_r+0x1e>
 800b914:	6023      	str	r3, [r4, #0]
 800b916:	bd38      	pop	{r3, r4, r5, pc}
 800b918:	200070cc 	.word	0x200070cc

0800b91c <_sbrk_r>:
 800b91c:	b538      	push	{r3, r4, r5, lr}
 800b91e:	4d06      	ldr	r5, [pc, #24]	@ (800b938 <_sbrk_r+0x1c>)
 800b920:	2300      	movs	r3, #0
 800b922:	4604      	mov	r4, r0
 800b924:	4608      	mov	r0, r1
 800b926:	602b      	str	r3, [r5, #0]
 800b928:	f7f8 fe04 	bl	8004534 <_sbrk>
 800b92c:	1c43      	adds	r3, r0, #1
 800b92e:	d102      	bne.n	800b936 <_sbrk_r+0x1a>
 800b930:	682b      	ldr	r3, [r5, #0]
 800b932:	b103      	cbz	r3, 800b936 <_sbrk_r+0x1a>
 800b934:	6023      	str	r3, [r4, #0]
 800b936:	bd38      	pop	{r3, r4, r5, pc}
 800b938:	200070cc 	.word	0x200070cc

0800b93c <_write_r>:
 800b93c:	b538      	push	{r3, r4, r5, lr}
 800b93e:	4d07      	ldr	r5, [pc, #28]	@ (800b95c <_write_r+0x20>)
 800b940:	4604      	mov	r4, r0
 800b942:	4608      	mov	r0, r1
 800b944:	4611      	mov	r1, r2
 800b946:	2200      	movs	r2, #0
 800b948:	602a      	str	r2, [r5, #0]
 800b94a:	461a      	mov	r2, r3
 800b94c:	f7f8 fdd8 	bl	8004500 <_write>
 800b950:	1c43      	adds	r3, r0, #1
 800b952:	d102      	bne.n	800b95a <_write_r+0x1e>
 800b954:	682b      	ldr	r3, [r5, #0]
 800b956:	b103      	cbz	r3, 800b95a <_write_r+0x1e>
 800b958:	6023      	str	r3, [r4, #0]
 800b95a:	bd38      	pop	{r3, r4, r5, pc}
 800b95c:	200070cc 	.word	0x200070cc

0800b960 <__errno>:
 800b960:	4b01      	ldr	r3, [pc, #4]	@ (800b968 <__errno+0x8>)
 800b962:	6818      	ldr	r0, [r3, #0]
 800b964:	4770      	bx	lr
 800b966:	bf00      	nop
 800b968:	2000019c 	.word	0x2000019c

0800b96c <__libc_init_array>:
 800b96c:	b570      	push	{r4, r5, r6, lr}
 800b96e:	4d0d      	ldr	r5, [pc, #52]	@ (800b9a4 <__libc_init_array+0x38>)
 800b970:	4c0d      	ldr	r4, [pc, #52]	@ (800b9a8 <__libc_init_array+0x3c>)
 800b972:	1b64      	subs	r4, r4, r5
 800b974:	10a4      	asrs	r4, r4, #2
 800b976:	2600      	movs	r6, #0
 800b978:	42a6      	cmp	r6, r4
 800b97a:	d109      	bne.n	800b990 <__libc_init_array+0x24>
 800b97c:	4d0b      	ldr	r5, [pc, #44]	@ (800b9ac <__libc_init_array+0x40>)
 800b97e:	4c0c      	ldr	r4, [pc, #48]	@ (800b9b0 <__libc_init_array+0x44>)
 800b980:	f003 f8cc 	bl	800eb1c <_init>
 800b984:	1b64      	subs	r4, r4, r5
 800b986:	10a4      	asrs	r4, r4, #2
 800b988:	2600      	movs	r6, #0
 800b98a:	42a6      	cmp	r6, r4
 800b98c:	d105      	bne.n	800b99a <__libc_init_array+0x2e>
 800b98e:	bd70      	pop	{r4, r5, r6, pc}
 800b990:	f855 3b04 	ldr.w	r3, [r5], #4
 800b994:	4798      	blx	r3
 800b996:	3601      	adds	r6, #1
 800b998:	e7ee      	b.n	800b978 <__libc_init_array+0xc>
 800b99a:	f855 3b04 	ldr.w	r3, [r5], #4
 800b99e:	4798      	blx	r3
 800b9a0:	3601      	adds	r6, #1
 800b9a2:	e7f2      	b.n	800b98a <__libc_init_array+0x1e>
 800b9a4:	08010680 	.word	0x08010680
 800b9a8:	08010680 	.word	0x08010680
 800b9ac:	08010680 	.word	0x08010680
 800b9b0:	08010684 	.word	0x08010684

0800b9b4 <__retarget_lock_init_recursive>:
 800b9b4:	4770      	bx	lr

0800b9b6 <__retarget_lock_acquire>:
 800b9b6:	4770      	bx	lr

0800b9b8 <__retarget_lock_acquire_recursive>:
 800b9b8:	4770      	bx	lr

0800b9ba <__retarget_lock_release>:
 800b9ba:	4770      	bx	lr

0800b9bc <__retarget_lock_release_recursive>:
 800b9bc:	4770      	bx	lr

0800b9be <strcpy>:
 800b9be:	4603      	mov	r3, r0
 800b9c0:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b9c4:	f803 2b01 	strb.w	r2, [r3], #1
 800b9c8:	2a00      	cmp	r2, #0
 800b9ca:	d1f9      	bne.n	800b9c0 <strcpy+0x2>
 800b9cc:	4770      	bx	lr

0800b9ce <memcpy>:
 800b9ce:	440a      	add	r2, r1
 800b9d0:	4291      	cmp	r1, r2
 800b9d2:	f100 33ff 	add.w	r3, r0, #4294967295
 800b9d6:	d100      	bne.n	800b9da <memcpy+0xc>
 800b9d8:	4770      	bx	lr
 800b9da:	b510      	push	{r4, lr}
 800b9dc:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b9e0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b9e4:	4291      	cmp	r1, r2
 800b9e6:	d1f9      	bne.n	800b9dc <memcpy+0xe>
 800b9e8:	bd10      	pop	{r4, pc}
 800b9ea:	0000      	movs	r0, r0
 800b9ec:	0000      	movs	r0, r0
	...

0800b9f0 <nan>:
 800b9f0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800b9f8 <nan+0x8>
 800b9f4:	4770      	bx	lr
 800b9f6:	bf00      	nop
 800b9f8:	00000000 	.word	0x00000000
 800b9fc:	7ff80000 	.word	0x7ff80000

0800ba00 <nanf>:
 800ba00:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800ba08 <nanf+0x8>
 800ba04:	4770      	bx	lr
 800ba06:	bf00      	nop
 800ba08:	7fc00000 	.word	0x7fc00000

0800ba0c <div>:
 800ba0c:	b510      	push	{r4, lr}
 800ba0e:	fb91 f4f2 	sdiv	r4, r1, r2
 800ba12:	fb02 1114 	mls	r1, r2, r4, r1
 800ba16:	6004      	str	r4, [r0, #0]
 800ba18:	6041      	str	r1, [r0, #4]
 800ba1a:	bd10      	pop	{r4, pc}

0800ba1c <quorem>:
 800ba1c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba20:	6903      	ldr	r3, [r0, #16]
 800ba22:	690c      	ldr	r4, [r1, #16]
 800ba24:	42a3      	cmp	r3, r4
 800ba26:	4607      	mov	r7, r0
 800ba28:	db7e      	blt.n	800bb28 <quorem+0x10c>
 800ba2a:	3c01      	subs	r4, #1
 800ba2c:	f101 0814 	add.w	r8, r1, #20
 800ba30:	00a3      	lsls	r3, r4, #2
 800ba32:	f100 0514 	add.w	r5, r0, #20
 800ba36:	9300      	str	r3, [sp, #0]
 800ba38:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ba3c:	9301      	str	r3, [sp, #4]
 800ba3e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800ba42:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ba46:	3301      	adds	r3, #1
 800ba48:	429a      	cmp	r2, r3
 800ba4a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800ba4e:	fbb2 f6f3 	udiv	r6, r2, r3
 800ba52:	d32e      	bcc.n	800bab2 <quorem+0x96>
 800ba54:	f04f 0a00 	mov.w	sl, #0
 800ba58:	46c4      	mov	ip, r8
 800ba5a:	46ae      	mov	lr, r5
 800ba5c:	46d3      	mov	fp, sl
 800ba5e:	f85c 3b04 	ldr.w	r3, [ip], #4
 800ba62:	b298      	uxth	r0, r3
 800ba64:	fb06 a000 	mla	r0, r6, r0, sl
 800ba68:	0c02      	lsrs	r2, r0, #16
 800ba6a:	0c1b      	lsrs	r3, r3, #16
 800ba6c:	fb06 2303 	mla	r3, r6, r3, r2
 800ba70:	f8de 2000 	ldr.w	r2, [lr]
 800ba74:	b280      	uxth	r0, r0
 800ba76:	b292      	uxth	r2, r2
 800ba78:	1a12      	subs	r2, r2, r0
 800ba7a:	445a      	add	r2, fp
 800ba7c:	f8de 0000 	ldr.w	r0, [lr]
 800ba80:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ba84:	b29b      	uxth	r3, r3
 800ba86:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800ba8a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800ba8e:	b292      	uxth	r2, r2
 800ba90:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800ba94:	45e1      	cmp	r9, ip
 800ba96:	f84e 2b04 	str.w	r2, [lr], #4
 800ba9a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800ba9e:	d2de      	bcs.n	800ba5e <quorem+0x42>
 800baa0:	9b00      	ldr	r3, [sp, #0]
 800baa2:	58eb      	ldr	r3, [r5, r3]
 800baa4:	b92b      	cbnz	r3, 800bab2 <quorem+0x96>
 800baa6:	9b01      	ldr	r3, [sp, #4]
 800baa8:	3b04      	subs	r3, #4
 800baaa:	429d      	cmp	r5, r3
 800baac:	461a      	mov	r2, r3
 800baae:	d32f      	bcc.n	800bb10 <quorem+0xf4>
 800bab0:	613c      	str	r4, [r7, #16]
 800bab2:	4638      	mov	r0, r7
 800bab4:	f001 fc9e 	bl	800d3f4 <__mcmp>
 800bab8:	2800      	cmp	r0, #0
 800baba:	db25      	blt.n	800bb08 <quorem+0xec>
 800babc:	4629      	mov	r1, r5
 800babe:	2000      	movs	r0, #0
 800bac0:	f858 2b04 	ldr.w	r2, [r8], #4
 800bac4:	f8d1 c000 	ldr.w	ip, [r1]
 800bac8:	fa1f fe82 	uxth.w	lr, r2
 800bacc:	fa1f f38c 	uxth.w	r3, ip
 800bad0:	eba3 030e 	sub.w	r3, r3, lr
 800bad4:	4403      	add	r3, r0
 800bad6:	0c12      	lsrs	r2, r2, #16
 800bad8:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800badc:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800bae0:	b29b      	uxth	r3, r3
 800bae2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bae6:	45c1      	cmp	r9, r8
 800bae8:	f841 3b04 	str.w	r3, [r1], #4
 800baec:	ea4f 4022 	mov.w	r0, r2, asr #16
 800baf0:	d2e6      	bcs.n	800bac0 <quorem+0xa4>
 800baf2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800baf6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bafa:	b922      	cbnz	r2, 800bb06 <quorem+0xea>
 800bafc:	3b04      	subs	r3, #4
 800bafe:	429d      	cmp	r5, r3
 800bb00:	461a      	mov	r2, r3
 800bb02:	d30b      	bcc.n	800bb1c <quorem+0x100>
 800bb04:	613c      	str	r4, [r7, #16]
 800bb06:	3601      	adds	r6, #1
 800bb08:	4630      	mov	r0, r6
 800bb0a:	b003      	add	sp, #12
 800bb0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb10:	6812      	ldr	r2, [r2, #0]
 800bb12:	3b04      	subs	r3, #4
 800bb14:	2a00      	cmp	r2, #0
 800bb16:	d1cb      	bne.n	800bab0 <quorem+0x94>
 800bb18:	3c01      	subs	r4, #1
 800bb1a:	e7c6      	b.n	800baaa <quorem+0x8e>
 800bb1c:	6812      	ldr	r2, [r2, #0]
 800bb1e:	3b04      	subs	r3, #4
 800bb20:	2a00      	cmp	r2, #0
 800bb22:	d1ef      	bne.n	800bb04 <quorem+0xe8>
 800bb24:	3c01      	subs	r4, #1
 800bb26:	e7ea      	b.n	800bafe <quorem+0xe2>
 800bb28:	2000      	movs	r0, #0
 800bb2a:	e7ee      	b.n	800bb0a <quorem+0xee>
 800bb2c:	0000      	movs	r0, r0
	...

0800bb30 <_dtoa_r>:
 800bb30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb34:	69c7      	ldr	r7, [r0, #28]
 800bb36:	b099      	sub	sp, #100	@ 0x64
 800bb38:	ed8d 0b02 	vstr	d0, [sp, #8]
 800bb3c:	ec55 4b10 	vmov	r4, r5, d0
 800bb40:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800bb42:	9109      	str	r1, [sp, #36]	@ 0x24
 800bb44:	4683      	mov	fp, r0
 800bb46:	920e      	str	r2, [sp, #56]	@ 0x38
 800bb48:	9313      	str	r3, [sp, #76]	@ 0x4c
 800bb4a:	b97f      	cbnz	r7, 800bb6c <_dtoa_r+0x3c>
 800bb4c:	2010      	movs	r0, #16
 800bb4e:	f7fd f96d 	bl	8008e2c <malloc>
 800bb52:	4602      	mov	r2, r0
 800bb54:	f8cb 001c 	str.w	r0, [fp, #28]
 800bb58:	b920      	cbnz	r0, 800bb64 <_dtoa_r+0x34>
 800bb5a:	4ba7      	ldr	r3, [pc, #668]	@ (800bdf8 <_dtoa_r+0x2c8>)
 800bb5c:	21ef      	movs	r1, #239	@ 0xef
 800bb5e:	48a7      	ldr	r0, [pc, #668]	@ (800bdfc <_dtoa_r+0x2cc>)
 800bb60:	f002 fc6c 	bl	800e43c <__assert_func>
 800bb64:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800bb68:	6007      	str	r7, [r0, #0]
 800bb6a:	60c7      	str	r7, [r0, #12]
 800bb6c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800bb70:	6819      	ldr	r1, [r3, #0]
 800bb72:	b159      	cbz	r1, 800bb8c <_dtoa_r+0x5c>
 800bb74:	685a      	ldr	r2, [r3, #4]
 800bb76:	604a      	str	r2, [r1, #4]
 800bb78:	2301      	movs	r3, #1
 800bb7a:	4093      	lsls	r3, r2
 800bb7c:	608b      	str	r3, [r1, #8]
 800bb7e:	4658      	mov	r0, fp
 800bb80:	f001 f9b4 	bl	800ceec <_Bfree>
 800bb84:	f8db 301c 	ldr.w	r3, [fp, #28]
 800bb88:	2200      	movs	r2, #0
 800bb8a:	601a      	str	r2, [r3, #0]
 800bb8c:	1e2b      	subs	r3, r5, #0
 800bb8e:	bfb9      	ittee	lt
 800bb90:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800bb94:	9303      	strlt	r3, [sp, #12]
 800bb96:	2300      	movge	r3, #0
 800bb98:	6033      	strge	r3, [r6, #0]
 800bb9a:	9f03      	ldr	r7, [sp, #12]
 800bb9c:	4b98      	ldr	r3, [pc, #608]	@ (800be00 <_dtoa_r+0x2d0>)
 800bb9e:	bfbc      	itt	lt
 800bba0:	2201      	movlt	r2, #1
 800bba2:	6032      	strlt	r2, [r6, #0]
 800bba4:	43bb      	bics	r3, r7
 800bba6:	d112      	bne.n	800bbce <_dtoa_r+0x9e>
 800bba8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800bbaa:	f242 730f 	movw	r3, #9999	@ 0x270f
 800bbae:	6013      	str	r3, [r2, #0]
 800bbb0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800bbb4:	4323      	orrs	r3, r4
 800bbb6:	f000 854d 	beq.w	800c654 <_dtoa_r+0xb24>
 800bbba:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800bbbc:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800be14 <_dtoa_r+0x2e4>
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	f000 854f 	beq.w	800c664 <_dtoa_r+0xb34>
 800bbc6:	f10a 0303 	add.w	r3, sl, #3
 800bbca:	f000 bd49 	b.w	800c660 <_dtoa_r+0xb30>
 800bbce:	ed9d 7b02 	vldr	d7, [sp, #8]
 800bbd2:	2200      	movs	r2, #0
 800bbd4:	ec51 0b17 	vmov	r0, r1, d7
 800bbd8:	2300      	movs	r3, #0
 800bbda:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800bbde:	f7f4 ff83 	bl	8000ae8 <__aeabi_dcmpeq>
 800bbe2:	4680      	mov	r8, r0
 800bbe4:	b158      	cbz	r0, 800bbfe <_dtoa_r+0xce>
 800bbe6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800bbe8:	2301      	movs	r3, #1
 800bbea:	6013      	str	r3, [r2, #0]
 800bbec:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800bbee:	b113      	cbz	r3, 800bbf6 <_dtoa_r+0xc6>
 800bbf0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800bbf2:	4b84      	ldr	r3, [pc, #528]	@ (800be04 <_dtoa_r+0x2d4>)
 800bbf4:	6013      	str	r3, [r2, #0]
 800bbf6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800be18 <_dtoa_r+0x2e8>
 800bbfa:	f000 bd33 	b.w	800c664 <_dtoa_r+0xb34>
 800bbfe:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800bc02:	aa16      	add	r2, sp, #88	@ 0x58
 800bc04:	a917      	add	r1, sp, #92	@ 0x5c
 800bc06:	4658      	mov	r0, fp
 800bc08:	f001 fd14 	bl	800d634 <__d2b>
 800bc0c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800bc10:	4681      	mov	r9, r0
 800bc12:	2e00      	cmp	r6, #0
 800bc14:	d077      	beq.n	800bd06 <_dtoa_r+0x1d6>
 800bc16:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800bc18:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800bc1c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bc20:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bc24:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800bc28:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800bc2c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800bc30:	4619      	mov	r1, r3
 800bc32:	2200      	movs	r2, #0
 800bc34:	4b74      	ldr	r3, [pc, #464]	@ (800be08 <_dtoa_r+0x2d8>)
 800bc36:	f7f4 fb37 	bl	80002a8 <__aeabi_dsub>
 800bc3a:	a369      	add	r3, pc, #420	@ (adr r3, 800bde0 <_dtoa_r+0x2b0>)
 800bc3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc40:	f7f4 fcea 	bl	8000618 <__aeabi_dmul>
 800bc44:	a368      	add	r3, pc, #416	@ (adr r3, 800bde8 <_dtoa_r+0x2b8>)
 800bc46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc4a:	f7f4 fb2f 	bl	80002ac <__adddf3>
 800bc4e:	4604      	mov	r4, r0
 800bc50:	4630      	mov	r0, r6
 800bc52:	460d      	mov	r5, r1
 800bc54:	f7f4 fc76 	bl	8000544 <__aeabi_i2d>
 800bc58:	a365      	add	r3, pc, #404	@ (adr r3, 800bdf0 <_dtoa_r+0x2c0>)
 800bc5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc5e:	f7f4 fcdb 	bl	8000618 <__aeabi_dmul>
 800bc62:	4602      	mov	r2, r0
 800bc64:	460b      	mov	r3, r1
 800bc66:	4620      	mov	r0, r4
 800bc68:	4629      	mov	r1, r5
 800bc6a:	f7f4 fb1f 	bl	80002ac <__adddf3>
 800bc6e:	4604      	mov	r4, r0
 800bc70:	460d      	mov	r5, r1
 800bc72:	f7f4 ff81 	bl	8000b78 <__aeabi_d2iz>
 800bc76:	2200      	movs	r2, #0
 800bc78:	4607      	mov	r7, r0
 800bc7a:	2300      	movs	r3, #0
 800bc7c:	4620      	mov	r0, r4
 800bc7e:	4629      	mov	r1, r5
 800bc80:	f7f4 ff3c 	bl	8000afc <__aeabi_dcmplt>
 800bc84:	b140      	cbz	r0, 800bc98 <_dtoa_r+0x168>
 800bc86:	4638      	mov	r0, r7
 800bc88:	f7f4 fc5c 	bl	8000544 <__aeabi_i2d>
 800bc8c:	4622      	mov	r2, r4
 800bc8e:	462b      	mov	r3, r5
 800bc90:	f7f4 ff2a 	bl	8000ae8 <__aeabi_dcmpeq>
 800bc94:	b900      	cbnz	r0, 800bc98 <_dtoa_r+0x168>
 800bc96:	3f01      	subs	r7, #1
 800bc98:	2f16      	cmp	r7, #22
 800bc9a:	d851      	bhi.n	800bd40 <_dtoa_r+0x210>
 800bc9c:	4b5b      	ldr	r3, [pc, #364]	@ (800be0c <_dtoa_r+0x2dc>)
 800bc9e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800bca2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bca6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bcaa:	f7f4 ff27 	bl	8000afc <__aeabi_dcmplt>
 800bcae:	2800      	cmp	r0, #0
 800bcb0:	d048      	beq.n	800bd44 <_dtoa_r+0x214>
 800bcb2:	3f01      	subs	r7, #1
 800bcb4:	2300      	movs	r3, #0
 800bcb6:	9312      	str	r3, [sp, #72]	@ 0x48
 800bcb8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800bcba:	1b9b      	subs	r3, r3, r6
 800bcbc:	1e5a      	subs	r2, r3, #1
 800bcbe:	bf44      	itt	mi
 800bcc0:	f1c3 0801 	rsbmi	r8, r3, #1
 800bcc4:	2300      	movmi	r3, #0
 800bcc6:	9208      	str	r2, [sp, #32]
 800bcc8:	bf54      	ite	pl
 800bcca:	f04f 0800 	movpl.w	r8, #0
 800bcce:	9308      	strmi	r3, [sp, #32]
 800bcd0:	2f00      	cmp	r7, #0
 800bcd2:	db39      	blt.n	800bd48 <_dtoa_r+0x218>
 800bcd4:	9b08      	ldr	r3, [sp, #32]
 800bcd6:	970f      	str	r7, [sp, #60]	@ 0x3c
 800bcd8:	443b      	add	r3, r7
 800bcda:	9308      	str	r3, [sp, #32]
 800bcdc:	2300      	movs	r3, #0
 800bcde:	930a      	str	r3, [sp, #40]	@ 0x28
 800bce0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bce2:	2b09      	cmp	r3, #9
 800bce4:	d864      	bhi.n	800bdb0 <_dtoa_r+0x280>
 800bce6:	2b05      	cmp	r3, #5
 800bce8:	bfc4      	itt	gt
 800bcea:	3b04      	subgt	r3, #4
 800bcec:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800bcee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bcf0:	f1a3 0302 	sub.w	r3, r3, #2
 800bcf4:	bfcc      	ite	gt
 800bcf6:	2400      	movgt	r4, #0
 800bcf8:	2401      	movle	r4, #1
 800bcfa:	2b03      	cmp	r3, #3
 800bcfc:	d863      	bhi.n	800bdc6 <_dtoa_r+0x296>
 800bcfe:	e8df f003 	tbb	[pc, r3]
 800bd02:	372a      	.short	0x372a
 800bd04:	5535      	.short	0x5535
 800bd06:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800bd0a:	441e      	add	r6, r3
 800bd0c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800bd10:	2b20      	cmp	r3, #32
 800bd12:	bfc1      	itttt	gt
 800bd14:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800bd18:	409f      	lslgt	r7, r3
 800bd1a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800bd1e:	fa24 f303 	lsrgt.w	r3, r4, r3
 800bd22:	bfd6      	itet	le
 800bd24:	f1c3 0320 	rsble	r3, r3, #32
 800bd28:	ea47 0003 	orrgt.w	r0, r7, r3
 800bd2c:	fa04 f003 	lslle.w	r0, r4, r3
 800bd30:	f7f4 fbf8 	bl	8000524 <__aeabi_ui2d>
 800bd34:	2201      	movs	r2, #1
 800bd36:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800bd3a:	3e01      	subs	r6, #1
 800bd3c:	9214      	str	r2, [sp, #80]	@ 0x50
 800bd3e:	e777      	b.n	800bc30 <_dtoa_r+0x100>
 800bd40:	2301      	movs	r3, #1
 800bd42:	e7b8      	b.n	800bcb6 <_dtoa_r+0x186>
 800bd44:	9012      	str	r0, [sp, #72]	@ 0x48
 800bd46:	e7b7      	b.n	800bcb8 <_dtoa_r+0x188>
 800bd48:	427b      	negs	r3, r7
 800bd4a:	930a      	str	r3, [sp, #40]	@ 0x28
 800bd4c:	2300      	movs	r3, #0
 800bd4e:	eba8 0807 	sub.w	r8, r8, r7
 800bd52:	930f      	str	r3, [sp, #60]	@ 0x3c
 800bd54:	e7c4      	b.n	800bce0 <_dtoa_r+0x1b0>
 800bd56:	2300      	movs	r3, #0
 800bd58:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bd5a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bd5c:	2b00      	cmp	r3, #0
 800bd5e:	dc35      	bgt.n	800bdcc <_dtoa_r+0x29c>
 800bd60:	2301      	movs	r3, #1
 800bd62:	9300      	str	r3, [sp, #0]
 800bd64:	9307      	str	r3, [sp, #28]
 800bd66:	461a      	mov	r2, r3
 800bd68:	920e      	str	r2, [sp, #56]	@ 0x38
 800bd6a:	e00b      	b.n	800bd84 <_dtoa_r+0x254>
 800bd6c:	2301      	movs	r3, #1
 800bd6e:	e7f3      	b.n	800bd58 <_dtoa_r+0x228>
 800bd70:	2300      	movs	r3, #0
 800bd72:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bd74:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bd76:	18fb      	adds	r3, r7, r3
 800bd78:	9300      	str	r3, [sp, #0]
 800bd7a:	3301      	adds	r3, #1
 800bd7c:	2b01      	cmp	r3, #1
 800bd7e:	9307      	str	r3, [sp, #28]
 800bd80:	bfb8      	it	lt
 800bd82:	2301      	movlt	r3, #1
 800bd84:	f8db 001c 	ldr.w	r0, [fp, #28]
 800bd88:	2100      	movs	r1, #0
 800bd8a:	2204      	movs	r2, #4
 800bd8c:	f102 0514 	add.w	r5, r2, #20
 800bd90:	429d      	cmp	r5, r3
 800bd92:	d91f      	bls.n	800bdd4 <_dtoa_r+0x2a4>
 800bd94:	6041      	str	r1, [r0, #4]
 800bd96:	4658      	mov	r0, fp
 800bd98:	f001 f868 	bl	800ce6c <_Balloc>
 800bd9c:	4682      	mov	sl, r0
 800bd9e:	2800      	cmp	r0, #0
 800bda0:	d13c      	bne.n	800be1c <_dtoa_r+0x2ec>
 800bda2:	4b1b      	ldr	r3, [pc, #108]	@ (800be10 <_dtoa_r+0x2e0>)
 800bda4:	4602      	mov	r2, r0
 800bda6:	f240 11af 	movw	r1, #431	@ 0x1af
 800bdaa:	e6d8      	b.n	800bb5e <_dtoa_r+0x2e>
 800bdac:	2301      	movs	r3, #1
 800bdae:	e7e0      	b.n	800bd72 <_dtoa_r+0x242>
 800bdb0:	2401      	movs	r4, #1
 800bdb2:	2300      	movs	r3, #0
 800bdb4:	9309      	str	r3, [sp, #36]	@ 0x24
 800bdb6:	940b      	str	r4, [sp, #44]	@ 0x2c
 800bdb8:	f04f 33ff 	mov.w	r3, #4294967295
 800bdbc:	9300      	str	r3, [sp, #0]
 800bdbe:	9307      	str	r3, [sp, #28]
 800bdc0:	2200      	movs	r2, #0
 800bdc2:	2312      	movs	r3, #18
 800bdc4:	e7d0      	b.n	800bd68 <_dtoa_r+0x238>
 800bdc6:	2301      	movs	r3, #1
 800bdc8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bdca:	e7f5      	b.n	800bdb8 <_dtoa_r+0x288>
 800bdcc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bdce:	9300      	str	r3, [sp, #0]
 800bdd0:	9307      	str	r3, [sp, #28]
 800bdd2:	e7d7      	b.n	800bd84 <_dtoa_r+0x254>
 800bdd4:	3101      	adds	r1, #1
 800bdd6:	0052      	lsls	r2, r2, #1
 800bdd8:	e7d8      	b.n	800bd8c <_dtoa_r+0x25c>
 800bdda:	bf00      	nop
 800bddc:	f3af 8000 	nop.w
 800bde0:	636f4361 	.word	0x636f4361
 800bde4:	3fd287a7 	.word	0x3fd287a7
 800bde8:	8b60c8b3 	.word	0x8b60c8b3
 800bdec:	3fc68a28 	.word	0x3fc68a28
 800bdf0:	509f79fb 	.word	0x509f79fb
 800bdf4:	3fd34413 	.word	0x3fd34413
 800bdf8:	08010379 	.word	0x08010379
 800bdfc:	08010390 	.word	0x08010390
 800be00:	7ff00000 	.word	0x7ff00000
 800be04:	080105d8 	.word	0x080105d8
 800be08:	3ff80000 	.word	0x3ff80000
 800be0c:	080104e8 	.word	0x080104e8
 800be10:	080103e8 	.word	0x080103e8
 800be14:	08010375 	.word	0x08010375
 800be18:	080105d7 	.word	0x080105d7
 800be1c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800be20:	6018      	str	r0, [r3, #0]
 800be22:	9b07      	ldr	r3, [sp, #28]
 800be24:	2b0e      	cmp	r3, #14
 800be26:	f200 80a4 	bhi.w	800bf72 <_dtoa_r+0x442>
 800be2a:	2c00      	cmp	r4, #0
 800be2c:	f000 80a1 	beq.w	800bf72 <_dtoa_r+0x442>
 800be30:	2f00      	cmp	r7, #0
 800be32:	dd33      	ble.n	800be9c <_dtoa_r+0x36c>
 800be34:	4bad      	ldr	r3, [pc, #692]	@ (800c0ec <_dtoa_r+0x5bc>)
 800be36:	f007 020f 	and.w	r2, r7, #15
 800be3a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800be3e:	ed93 7b00 	vldr	d7, [r3]
 800be42:	05f8      	lsls	r0, r7, #23
 800be44:	ed8d 7b04 	vstr	d7, [sp, #16]
 800be48:	ea4f 1427 	mov.w	r4, r7, asr #4
 800be4c:	d516      	bpl.n	800be7c <_dtoa_r+0x34c>
 800be4e:	4ba8      	ldr	r3, [pc, #672]	@ (800c0f0 <_dtoa_r+0x5c0>)
 800be50:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800be54:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800be58:	f7f4 fd08 	bl	800086c <__aeabi_ddiv>
 800be5c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800be60:	f004 040f 	and.w	r4, r4, #15
 800be64:	2603      	movs	r6, #3
 800be66:	4da2      	ldr	r5, [pc, #648]	@ (800c0f0 <_dtoa_r+0x5c0>)
 800be68:	b954      	cbnz	r4, 800be80 <_dtoa_r+0x350>
 800be6a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800be6e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800be72:	f7f4 fcfb 	bl	800086c <__aeabi_ddiv>
 800be76:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800be7a:	e028      	b.n	800bece <_dtoa_r+0x39e>
 800be7c:	2602      	movs	r6, #2
 800be7e:	e7f2      	b.n	800be66 <_dtoa_r+0x336>
 800be80:	07e1      	lsls	r1, r4, #31
 800be82:	d508      	bpl.n	800be96 <_dtoa_r+0x366>
 800be84:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800be88:	e9d5 2300 	ldrd	r2, r3, [r5]
 800be8c:	f7f4 fbc4 	bl	8000618 <__aeabi_dmul>
 800be90:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800be94:	3601      	adds	r6, #1
 800be96:	1064      	asrs	r4, r4, #1
 800be98:	3508      	adds	r5, #8
 800be9a:	e7e5      	b.n	800be68 <_dtoa_r+0x338>
 800be9c:	f000 80d2 	beq.w	800c044 <_dtoa_r+0x514>
 800bea0:	427c      	negs	r4, r7
 800bea2:	4b92      	ldr	r3, [pc, #584]	@ (800c0ec <_dtoa_r+0x5bc>)
 800bea4:	4d92      	ldr	r5, [pc, #584]	@ (800c0f0 <_dtoa_r+0x5c0>)
 800bea6:	f004 020f 	and.w	r2, r4, #15
 800beaa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800beae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800beb2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800beb6:	f7f4 fbaf 	bl	8000618 <__aeabi_dmul>
 800beba:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bebe:	1124      	asrs	r4, r4, #4
 800bec0:	2300      	movs	r3, #0
 800bec2:	2602      	movs	r6, #2
 800bec4:	2c00      	cmp	r4, #0
 800bec6:	f040 80b2 	bne.w	800c02e <_dtoa_r+0x4fe>
 800beca:	2b00      	cmp	r3, #0
 800becc:	d1d3      	bne.n	800be76 <_dtoa_r+0x346>
 800bece:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800bed0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800bed4:	2b00      	cmp	r3, #0
 800bed6:	f000 80b7 	beq.w	800c048 <_dtoa_r+0x518>
 800beda:	4b86      	ldr	r3, [pc, #536]	@ (800c0f4 <_dtoa_r+0x5c4>)
 800bedc:	2200      	movs	r2, #0
 800bede:	4620      	mov	r0, r4
 800bee0:	4629      	mov	r1, r5
 800bee2:	f7f4 fe0b 	bl	8000afc <__aeabi_dcmplt>
 800bee6:	2800      	cmp	r0, #0
 800bee8:	f000 80ae 	beq.w	800c048 <_dtoa_r+0x518>
 800beec:	9b07      	ldr	r3, [sp, #28]
 800beee:	2b00      	cmp	r3, #0
 800bef0:	f000 80aa 	beq.w	800c048 <_dtoa_r+0x518>
 800bef4:	9b00      	ldr	r3, [sp, #0]
 800bef6:	2b00      	cmp	r3, #0
 800bef8:	dd37      	ble.n	800bf6a <_dtoa_r+0x43a>
 800befa:	1e7b      	subs	r3, r7, #1
 800befc:	9304      	str	r3, [sp, #16]
 800befe:	4620      	mov	r0, r4
 800bf00:	4b7d      	ldr	r3, [pc, #500]	@ (800c0f8 <_dtoa_r+0x5c8>)
 800bf02:	2200      	movs	r2, #0
 800bf04:	4629      	mov	r1, r5
 800bf06:	f7f4 fb87 	bl	8000618 <__aeabi_dmul>
 800bf0a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bf0e:	9c00      	ldr	r4, [sp, #0]
 800bf10:	3601      	adds	r6, #1
 800bf12:	4630      	mov	r0, r6
 800bf14:	f7f4 fb16 	bl	8000544 <__aeabi_i2d>
 800bf18:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bf1c:	f7f4 fb7c 	bl	8000618 <__aeabi_dmul>
 800bf20:	4b76      	ldr	r3, [pc, #472]	@ (800c0fc <_dtoa_r+0x5cc>)
 800bf22:	2200      	movs	r2, #0
 800bf24:	f7f4 f9c2 	bl	80002ac <__adddf3>
 800bf28:	4605      	mov	r5, r0
 800bf2a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800bf2e:	2c00      	cmp	r4, #0
 800bf30:	f040 808d 	bne.w	800c04e <_dtoa_r+0x51e>
 800bf34:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bf38:	4b71      	ldr	r3, [pc, #452]	@ (800c100 <_dtoa_r+0x5d0>)
 800bf3a:	2200      	movs	r2, #0
 800bf3c:	f7f4 f9b4 	bl	80002a8 <__aeabi_dsub>
 800bf40:	4602      	mov	r2, r0
 800bf42:	460b      	mov	r3, r1
 800bf44:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800bf48:	462a      	mov	r2, r5
 800bf4a:	4633      	mov	r3, r6
 800bf4c:	f7f4 fdf4 	bl	8000b38 <__aeabi_dcmpgt>
 800bf50:	2800      	cmp	r0, #0
 800bf52:	f040 828b 	bne.w	800c46c <_dtoa_r+0x93c>
 800bf56:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bf5a:	462a      	mov	r2, r5
 800bf5c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800bf60:	f7f4 fdcc 	bl	8000afc <__aeabi_dcmplt>
 800bf64:	2800      	cmp	r0, #0
 800bf66:	f040 8128 	bne.w	800c1ba <_dtoa_r+0x68a>
 800bf6a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800bf6e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800bf72:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800bf74:	2b00      	cmp	r3, #0
 800bf76:	f2c0 815a 	blt.w	800c22e <_dtoa_r+0x6fe>
 800bf7a:	2f0e      	cmp	r7, #14
 800bf7c:	f300 8157 	bgt.w	800c22e <_dtoa_r+0x6fe>
 800bf80:	4b5a      	ldr	r3, [pc, #360]	@ (800c0ec <_dtoa_r+0x5bc>)
 800bf82:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800bf86:	ed93 7b00 	vldr	d7, [r3]
 800bf8a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bf8c:	2b00      	cmp	r3, #0
 800bf8e:	ed8d 7b00 	vstr	d7, [sp]
 800bf92:	da03      	bge.n	800bf9c <_dtoa_r+0x46c>
 800bf94:	9b07      	ldr	r3, [sp, #28]
 800bf96:	2b00      	cmp	r3, #0
 800bf98:	f340 8101 	ble.w	800c19e <_dtoa_r+0x66e>
 800bf9c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800bfa0:	4656      	mov	r6, sl
 800bfa2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bfa6:	4620      	mov	r0, r4
 800bfa8:	4629      	mov	r1, r5
 800bfaa:	f7f4 fc5f 	bl	800086c <__aeabi_ddiv>
 800bfae:	f7f4 fde3 	bl	8000b78 <__aeabi_d2iz>
 800bfb2:	4680      	mov	r8, r0
 800bfb4:	f7f4 fac6 	bl	8000544 <__aeabi_i2d>
 800bfb8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bfbc:	f7f4 fb2c 	bl	8000618 <__aeabi_dmul>
 800bfc0:	4602      	mov	r2, r0
 800bfc2:	460b      	mov	r3, r1
 800bfc4:	4620      	mov	r0, r4
 800bfc6:	4629      	mov	r1, r5
 800bfc8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800bfcc:	f7f4 f96c 	bl	80002a8 <__aeabi_dsub>
 800bfd0:	f806 4b01 	strb.w	r4, [r6], #1
 800bfd4:	9d07      	ldr	r5, [sp, #28]
 800bfd6:	eba6 040a 	sub.w	r4, r6, sl
 800bfda:	42a5      	cmp	r5, r4
 800bfdc:	4602      	mov	r2, r0
 800bfde:	460b      	mov	r3, r1
 800bfe0:	f040 8117 	bne.w	800c212 <_dtoa_r+0x6e2>
 800bfe4:	f7f4 f962 	bl	80002ac <__adddf3>
 800bfe8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bfec:	4604      	mov	r4, r0
 800bfee:	460d      	mov	r5, r1
 800bff0:	f7f4 fda2 	bl	8000b38 <__aeabi_dcmpgt>
 800bff4:	2800      	cmp	r0, #0
 800bff6:	f040 80f9 	bne.w	800c1ec <_dtoa_r+0x6bc>
 800bffa:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bffe:	4620      	mov	r0, r4
 800c000:	4629      	mov	r1, r5
 800c002:	f7f4 fd71 	bl	8000ae8 <__aeabi_dcmpeq>
 800c006:	b118      	cbz	r0, 800c010 <_dtoa_r+0x4e0>
 800c008:	f018 0f01 	tst.w	r8, #1
 800c00c:	f040 80ee 	bne.w	800c1ec <_dtoa_r+0x6bc>
 800c010:	4649      	mov	r1, r9
 800c012:	4658      	mov	r0, fp
 800c014:	f000 ff6a 	bl	800ceec <_Bfree>
 800c018:	2300      	movs	r3, #0
 800c01a:	7033      	strb	r3, [r6, #0]
 800c01c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800c01e:	3701      	adds	r7, #1
 800c020:	601f      	str	r7, [r3, #0]
 800c022:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c024:	2b00      	cmp	r3, #0
 800c026:	f000 831d 	beq.w	800c664 <_dtoa_r+0xb34>
 800c02a:	601e      	str	r6, [r3, #0]
 800c02c:	e31a      	b.n	800c664 <_dtoa_r+0xb34>
 800c02e:	07e2      	lsls	r2, r4, #31
 800c030:	d505      	bpl.n	800c03e <_dtoa_r+0x50e>
 800c032:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c036:	f7f4 faef 	bl	8000618 <__aeabi_dmul>
 800c03a:	3601      	adds	r6, #1
 800c03c:	2301      	movs	r3, #1
 800c03e:	1064      	asrs	r4, r4, #1
 800c040:	3508      	adds	r5, #8
 800c042:	e73f      	b.n	800bec4 <_dtoa_r+0x394>
 800c044:	2602      	movs	r6, #2
 800c046:	e742      	b.n	800bece <_dtoa_r+0x39e>
 800c048:	9c07      	ldr	r4, [sp, #28]
 800c04a:	9704      	str	r7, [sp, #16]
 800c04c:	e761      	b.n	800bf12 <_dtoa_r+0x3e2>
 800c04e:	4b27      	ldr	r3, [pc, #156]	@ (800c0ec <_dtoa_r+0x5bc>)
 800c050:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c052:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c056:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c05a:	4454      	add	r4, sl
 800c05c:	2900      	cmp	r1, #0
 800c05e:	d053      	beq.n	800c108 <_dtoa_r+0x5d8>
 800c060:	4928      	ldr	r1, [pc, #160]	@ (800c104 <_dtoa_r+0x5d4>)
 800c062:	2000      	movs	r0, #0
 800c064:	f7f4 fc02 	bl	800086c <__aeabi_ddiv>
 800c068:	4633      	mov	r3, r6
 800c06a:	462a      	mov	r2, r5
 800c06c:	f7f4 f91c 	bl	80002a8 <__aeabi_dsub>
 800c070:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800c074:	4656      	mov	r6, sl
 800c076:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c07a:	f7f4 fd7d 	bl	8000b78 <__aeabi_d2iz>
 800c07e:	4605      	mov	r5, r0
 800c080:	f7f4 fa60 	bl	8000544 <__aeabi_i2d>
 800c084:	4602      	mov	r2, r0
 800c086:	460b      	mov	r3, r1
 800c088:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c08c:	f7f4 f90c 	bl	80002a8 <__aeabi_dsub>
 800c090:	3530      	adds	r5, #48	@ 0x30
 800c092:	4602      	mov	r2, r0
 800c094:	460b      	mov	r3, r1
 800c096:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c09a:	f806 5b01 	strb.w	r5, [r6], #1
 800c09e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c0a2:	f7f4 fd2b 	bl	8000afc <__aeabi_dcmplt>
 800c0a6:	2800      	cmp	r0, #0
 800c0a8:	d171      	bne.n	800c18e <_dtoa_r+0x65e>
 800c0aa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c0ae:	4911      	ldr	r1, [pc, #68]	@ (800c0f4 <_dtoa_r+0x5c4>)
 800c0b0:	2000      	movs	r0, #0
 800c0b2:	f7f4 f8f9 	bl	80002a8 <__aeabi_dsub>
 800c0b6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c0ba:	f7f4 fd1f 	bl	8000afc <__aeabi_dcmplt>
 800c0be:	2800      	cmp	r0, #0
 800c0c0:	f040 8095 	bne.w	800c1ee <_dtoa_r+0x6be>
 800c0c4:	42a6      	cmp	r6, r4
 800c0c6:	f43f af50 	beq.w	800bf6a <_dtoa_r+0x43a>
 800c0ca:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800c0ce:	4b0a      	ldr	r3, [pc, #40]	@ (800c0f8 <_dtoa_r+0x5c8>)
 800c0d0:	2200      	movs	r2, #0
 800c0d2:	f7f4 faa1 	bl	8000618 <__aeabi_dmul>
 800c0d6:	4b08      	ldr	r3, [pc, #32]	@ (800c0f8 <_dtoa_r+0x5c8>)
 800c0d8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800c0dc:	2200      	movs	r2, #0
 800c0de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c0e2:	f7f4 fa99 	bl	8000618 <__aeabi_dmul>
 800c0e6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c0ea:	e7c4      	b.n	800c076 <_dtoa_r+0x546>
 800c0ec:	080104e8 	.word	0x080104e8
 800c0f0:	080104c0 	.word	0x080104c0
 800c0f4:	3ff00000 	.word	0x3ff00000
 800c0f8:	40240000 	.word	0x40240000
 800c0fc:	401c0000 	.word	0x401c0000
 800c100:	40140000 	.word	0x40140000
 800c104:	3fe00000 	.word	0x3fe00000
 800c108:	4631      	mov	r1, r6
 800c10a:	4628      	mov	r0, r5
 800c10c:	f7f4 fa84 	bl	8000618 <__aeabi_dmul>
 800c110:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800c114:	9415      	str	r4, [sp, #84]	@ 0x54
 800c116:	4656      	mov	r6, sl
 800c118:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c11c:	f7f4 fd2c 	bl	8000b78 <__aeabi_d2iz>
 800c120:	4605      	mov	r5, r0
 800c122:	f7f4 fa0f 	bl	8000544 <__aeabi_i2d>
 800c126:	4602      	mov	r2, r0
 800c128:	460b      	mov	r3, r1
 800c12a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c12e:	f7f4 f8bb 	bl	80002a8 <__aeabi_dsub>
 800c132:	3530      	adds	r5, #48	@ 0x30
 800c134:	f806 5b01 	strb.w	r5, [r6], #1
 800c138:	4602      	mov	r2, r0
 800c13a:	460b      	mov	r3, r1
 800c13c:	42a6      	cmp	r6, r4
 800c13e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c142:	f04f 0200 	mov.w	r2, #0
 800c146:	d124      	bne.n	800c192 <_dtoa_r+0x662>
 800c148:	4bac      	ldr	r3, [pc, #688]	@ (800c3fc <_dtoa_r+0x8cc>)
 800c14a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800c14e:	f7f4 f8ad 	bl	80002ac <__adddf3>
 800c152:	4602      	mov	r2, r0
 800c154:	460b      	mov	r3, r1
 800c156:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c15a:	f7f4 fced 	bl	8000b38 <__aeabi_dcmpgt>
 800c15e:	2800      	cmp	r0, #0
 800c160:	d145      	bne.n	800c1ee <_dtoa_r+0x6be>
 800c162:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c166:	49a5      	ldr	r1, [pc, #660]	@ (800c3fc <_dtoa_r+0x8cc>)
 800c168:	2000      	movs	r0, #0
 800c16a:	f7f4 f89d 	bl	80002a8 <__aeabi_dsub>
 800c16e:	4602      	mov	r2, r0
 800c170:	460b      	mov	r3, r1
 800c172:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c176:	f7f4 fcc1 	bl	8000afc <__aeabi_dcmplt>
 800c17a:	2800      	cmp	r0, #0
 800c17c:	f43f aef5 	beq.w	800bf6a <_dtoa_r+0x43a>
 800c180:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800c182:	1e73      	subs	r3, r6, #1
 800c184:	9315      	str	r3, [sp, #84]	@ 0x54
 800c186:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800c18a:	2b30      	cmp	r3, #48	@ 0x30
 800c18c:	d0f8      	beq.n	800c180 <_dtoa_r+0x650>
 800c18e:	9f04      	ldr	r7, [sp, #16]
 800c190:	e73e      	b.n	800c010 <_dtoa_r+0x4e0>
 800c192:	4b9b      	ldr	r3, [pc, #620]	@ (800c400 <_dtoa_r+0x8d0>)
 800c194:	f7f4 fa40 	bl	8000618 <__aeabi_dmul>
 800c198:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c19c:	e7bc      	b.n	800c118 <_dtoa_r+0x5e8>
 800c19e:	d10c      	bne.n	800c1ba <_dtoa_r+0x68a>
 800c1a0:	4b98      	ldr	r3, [pc, #608]	@ (800c404 <_dtoa_r+0x8d4>)
 800c1a2:	2200      	movs	r2, #0
 800c1a4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c1a8:	f7f4 fa36 	bl	8000618 <__aeabi_dmul>
 800c1ac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c1b0:	f7f4 fcb8 	bl	8000b24 <__aeabi_dcmpge>
 800c1b4:	2800      	cmp	r0, #0
 800c1b6:	f000 8157 	beq.w	800c468 <_dtoa_r+0x938>
 800c1ba:	2400      	movs	r4, #0
 800c1bc:	4625      	mov	r5, r4
 800c1be:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c1c0:	43db      	mvns	r3, r3
 800c1c2:	9304      	str	r3, [sp, #16]
 800c1c4:	4656      	mov	r6, sl
 800c1c6:	2700      	movs	r7, #0
 800c1c8:	4621      	mov	r1, r4
 800c1ca:	4658      	mov	r0, fp
 800c1cc:	f000 fe8e 	bl	800ceec <_Bfree>
 800c1d0:	2d00      	cmp	r5, #0
 800c1d2:	d0dc      	beq.n	800c18e <_dtoa_r+0x65e>
 800c1d4:	b12f      	cbz	r7, 800c1e2 <_dtoa_r+0x6b2>
 800c1d6:	42af      	cmp	r7, r5
 800c1d8:	d003      	beq.n	800c1e2 <_dtoa_r+0x6b2>
 800c1da:	4639      	mov	r1, r7
 800c1dc:	4658      	mov	r0, fp
 800c1de:	f000 fe85 	bl	800ceec <_Bfree>
 800c1e2:	4629      	mov	r1, r5
 800c1e4:	4658      	mov	r0, fp
 800c1e6:	f000 fe81 	bl	800ceec <_Bfree>
 800c1ea:	e7d0      	b.n	800c18e <_dtoa_r+0x65e>
 800c1ec:	9704      	str	r7, [sp, #16]
 800c1ee:	4633      	mov	r3, r6
 800c1f0:	461e      	mov	r6, r3
 800c1f2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c1f6:	2a39      	cmp	r2, #57	@ 0x39
 800c1f8:	d107      	bne.n	800c20a <_dtoa_r+0x6da>
 800c1fa:	459a      	cmp	sl, r3
 800c1fc:	d1f8      	bne.n	800c1f0 <_dtoa_r+0x6c0>
 800c1fe:	9a04      	ldr	r2, [sp, #16]
 800c200:	3201      	adds	r2, #1
 800c202:	9204      	str	r2, [sp, #16]
 800c204:	2230      	movs	r2, #48	@ 0x30
 800c206:	f88a 2000 	strb.w	r2, [sl]
 800c20a:	781a      	ldrb	r2, [r3, #0]
 800c20c:	3201      	adds	r2, #1
 800c20e:	701a      	strb	r2, [r3, #0]
 800c210:	e7bd      	b.n	800c18e <_dtoa_r+0x65e>
 800c212:	4b7b      	ldr	r3, [pc, #492]	@ (800c400 <_dtoa_r+0x8d0>)
 800c214:	2200      	movs	r2, #0
 800c216:	f7f4 f9ff 	bl	8000618 <__aeabi_dmul>
 800c21a:	2200      	movs	r2, #0
 800c21c:	2300      	movs	r3, #0
 800c21e:	4604      	mov	r4, r0
 800c220:	460d      	mov	r5, r1
 800c222:	f7f4 fc61 	bl	8000ae8 <__aeabi_dcmpeq>
 800c226:	2800      	cmp	r0, #0
 800c228:	f43f aebb 	beq.w	800bfa2 <_dtoa_r+0x472>
 800c22c:	e6f0      	b.n	800c010 <_dtoa_r+0x4e0>
 800c22e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800c230:	2a00      	cmp	r2, #0
 800c232:	f000 80db 	beq.w	800c3ec <_dtoa_r+0x8bc>
 800c236:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c238:	2a01      	cmp	r2, #1
 800c23a:	f300 80bf 	bgt.w	800c3bc <_dtoa_r+0x88c>
 800c23e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800c240:	2a00      	cmp	r2, #0
 800c242:	f000 80b7 	beq.w	800c3b4 <_dtoa_r+0x884>
 800c246:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800c24a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800c24c:	4646      	mov	r6, r8
 800c24e:	9a08      	ldr	r2, [sp, #32]
 800c250:	2101      	movs	r1, #1
 800c252:	441a      	add	r2, r3
 800c254:	4658      	mov	r0, fp
 800c256:	4498      	add	r8, r3
 800c258:	9208      	str	r2, [sp, #32]
 800c25a:	f000 ff45 	bl	800d0e8 <__i2b>
 800c25e:	4605      	mov	r5, r0
 800c260:	b15e      	cbz	r6, 800c27a <_dtoa_r+0x74a>
 800c262:	9b08      	ldr	r3, [sp, #32]
 800c264:	2b00      	cmp	r3, #0
 800c266:	dd08      	ble.n	800c27a <_dtoa_r+0x74a>
 800c268:	42b3      	cmp	r3, r6
 800c26a:	9a08      	ldr	r2, [sp, #32]
 800c26c:	bfa8      	it	ge
 800c26e:	4633      	movge	r3, r6
 800c270:	eba8 0803 	sub.w	r8, r8, r3
 800c274:	1af6      	subs	r6, r6, r3
 800c276:	1ad3      	subs	r3, r2, r3
 800c278:	9308      	str	r3, [sp, #32]
 800c27a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c27c:	b1f3      	cbz	r3, 800c2bc <_dtoa_r+0x78c>
 800c27e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c280:	2b00      	cmp	r3, #0
 800c282:	f000 80b7 	beq.w	800c3f4 <_dtoa_r+0x8c4>
 800c286:	b18c      	cbz	r4, 800c2ac <_dtoa_r+0x77c>
 800c288:	4629      	mov	r1, r5
 800c28a:	4622      	mov	r2, r4
 800c28c:	4658      	mov	r0, fp
 800c28e:	f000 ffeb 	bl	800d268 <__pow5mult>
 800c292:	464a      	mov	r2, r9
 800c294:	4601      	mov	r1, r0
 800c296:	4605      	mov	r5, r0
 800c298:	4658      	mov	r0, fp
 800c29a:	f000 ff3b 	bl	800d114 <__multiply>
 800c29e:	4649      	mov	r1, r9
 800c2a0:	9004      	str	r0, [sp, #16]
 800c2a2:	4658      	mov	r0, fp
 800c2a4:	f000 fe22 	bl	800ceec <_Bfree>
 800c2a8:	9b04      	ldr	r3, [sp, #16]
 800c2aa:	4699      	mov	r9, r3
 800c2ac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c2ae:	1b1a      	subs	r2, r3, r4
 800c2b0:	d004      	beq.n	800c2bc <_dtoa_r+0x78c>
 800c2b2:	4649      	mov	r1, r9
 800c2b4:	4658      	mov	r0, fp
 800c2b6:	f000 ffd7 	bl	800d268 <__pow5mult>
 800c2ba:	4681      	mov	r9, r0
 800c2bc:	2101      	movs	r1, #1
 800c2be:	4658      	mov	r0, fp
 800c2c0:	f000 ff12 	bl	800d0e8 <__i2b>
 800c2c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c2c6:	4604      	mov	r4, r0
 800c2c8:	2b00      	cmp	r3, #0
 800c2ca:	f000 81cf 	beq.w	800c66c <_dtoa_r+0xb3c>
 800c2ce:	461a      	mov	r2, r3
 800c2d0:	4601      	mov	r1, r0
 800c2d2:	4658      	mov	r0, fp
 800c2d4:	f000 ffc8 	bl	800d268 <__pow5mult>
 800c2d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c2da:	2b01      	cmp	r3, #1
 800c2dc:	4604      	mov	r4, r0
 800c2de:	f300 8095 	bgt.w	800c40c <_dtoa_r+0x8dc>
 800c2e2:	9b02      	ldr	r3, [sp, #8]
 800c2e4:	2b00      	cmp	r3, #0
 800c2e6:	f040 8087 	bne.w	800c3f8 <_dtoa_r+0x8c8>
 800c2ea:	9b03      	ldr	r3, [sp, #12]
 800c2ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c2f0:	2b00      	cmp	r3, #0
 800c2f2:	f040 8089 	bne.w	800c408 <_dtoa_r+0x8d8>
 800c2f6:	9b03      	ldr	r3, [sp, #12]
 800c2f8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800c2fc:	0d1b      	lsrs	r3, r3, #20
 800c2fe:	051b      	lsls	r3, r3, #20
 800c300:	b12b      	cbz	r3, 800c30e <_dtoa_r+0x7de>
 800c302:	9b08      	ldr	r3, [sp, #32]
 800c304:	3301      	adds	r3, #1
 800c306:	9308      	str	r3, [sp, #32]
 800c308:	f108 0801 	add.w	r8, r8, #1
 800c30c:	2301      	movs	r3, #1
 800c30e:	930a      	str	r3, [sp, #40]	@ 0x28
 800c310:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c312:	2b00      	cmp	r3, #0
 800c314:	f000 81b0 	beq.w	800c678 <_dtoa_r+0xb48>
 800c318:	6923      	ldr	r3, [r4, #16]
 800c31a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c31e:	6918      	ldr	r0, [r3, #16]
 800c320:	f000 fe96 	bl	800d050 <__hi0bits>
 800c324:	f1c0 0020 	rsb	r0, r0, #32
 800c328:	9b08      	ldr	r3, [sp, #32]
 800c32a:	4418      	add	r0, r3
 800c32c:	f010 001f 	ands.w	r0, r0, #31
 800c330:	d077      	beq.n	800c422 <_dtoa_r+0x8f2>
 800c332:	f1c0 0320 	rsb	r3, r0, #32
 800c336:	2b04      	cmp	r3, #4
 800c338:	dd6b      	ble.n	800c412 <_dtoa_r+0x8e2>
 800c33a:	9b08      	ldr	r3, [sp, #32]
 800c33c:	f1c0 001c 	rsb	r0, r0, #28
 800c340:	4403      	add	r3, r0
 800c342:	4480      	add	r8, r0
 800c344:	4406      	add	r6, r0
 800c346:	9308      	str	r3, [sp, #32]
 800c348:	f1b8 0f00 	cmp.w	r8, #0
 800c34c:	dd05      	ble.n	800c35a <_dtoa_r+0x82a>
 800c34e:	4649      	mov	r1, r9
 800c350:	4642      	mov	r2, r8
 800c352:	4658      	mov	r0, fp
 800c354:	f000 ffe2 	bl	800d31c <__lshift>
 800c358:	4681      	mov	r9, r0
 800c35a:	9b08      	ldr	r3, [sp, #32]
 800c35c:	2b00      	cmp	r3, #0
 800c35e:	dd05      	ble.n	800c36c <_dtoa_r+0x83c>
 800c360:	4621      	mov	r1, r4
 800c362:	461a      	mov	r2, r3
 800c364:	4658      	mov	r0, fp
 800c366:	f000 ffd9 	bl	800d31c <__lshift>
 800c36a:	4604      	mov	r4, r0
 800c36c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800c36e:	2b00      	cmp	r3, #0
 800c370:	d059      	beq.n	800c426 <_dtoa_r+0x8f6>
 800c372:	4621      	mov	r1, r4
 800c374:	4648      	mov	r0, r9
 800c376:	f001 f83d 	bl	800d3f4 <__mcmp>
 800c37a:	2800      	cmp	r0, #0
 800c37c:	da53      	bge.n	800c426 <_dtoa_r+0x8f6>
 800c37e:	1e7b      	subs	r3, r7, #1
 800c380:	9304      	str	r3, [sp, #16]
 800c382:	4649      	mov	r1, r9
 800c384:	2300      	movs	r3, #0
 800c386:	220a      	movs	r2, #10
 800c388:	4658      	mov	r0, fp
 800c38a:	f000 fdd1 	bl	800cf30 <__multadd>
 800c38e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c390:	4681      	mov	r9, r0
 800c392:	2b00      	cmp	r3, #0
 800c394:	f000 8172 	beq.w	800c67c <_dtoa_r+0xb4c>
 800c398:	2300      	movs	r3, #0
 800c39a:	4629      	mov	r1, r5
 800c39c:	220a      	movs	r2, #10
 800c39e:	4658      	mov	r0, fp
 800c3a0:	f000 fdc6 	bl	800cf30 <__multadd>
 800c3a4:	9b00      	ldr	r3, [sp, #0]
 800c3a6:	2b00      	cmp	r3, #0
 800c3a8:	4605      	mov	r5, r0
 800c3aa:	dc67      	bgt.n	800c47c <_dtoa_r+0x94c>
 800c3ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c3ae:	2b02      	cmp	r3, #2
 800c3b0:	dc41      	bgt.n	800c436 <_dtoa_r+0x906>
 800c3b2:	e063      	b.n	800c47c <_dtoa_r+0x94c>
 800c3b4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800c3b6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800c3ba:	e746      	b.n	800c24a <_dtoa_r+0x71a>
 800c3bc:	9b07      	ldr	r3, [sp, #28]
 800c3be:	1e5c      	subs	r4, r3, #1
 800c3c0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c3c2:	42a3      	cmp	r3, r4
 800c3c4:	bfbf      	itttt	lt
 800c3c6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800c3c8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800c3ca:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800c3cc:	1ae3      	sublt	r3, r4, r3
 800c3ce:	bfb4      	ite	lt
 800c3d0:	18d2      	addlt	r2, r2, r3
 800c3d2:	1b1c      	subge	r4, r3, r4
 800c3d4:	9b07      	ldr	r3, [sp, #28]
 800c3d6:	bfbc      	itt	lt
 800c3d8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800c3da:	2400      	movlt	r4, #0
 800c3dc:	2b00      	cmp	r3, #0
 800c3de:	bfb5      	itete	lt
 800c3e0:	eba8 0603 	sublt.w	r6, r8, r3
 800c3e4:	9b07      	ldrge	r3, [sp, #28]
 800c3e6:	2300      	movlt	r3, #0
 800c3e8:	4646      	movge	r6, r8
 800c3ea:	e730      	b.n	800c24e <_dtoa_r+0x71e>
 800c3ec:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800c3ee:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800c3f0:	4646      	mov	r6, r8
 800c3f2:	e735      	b.n	800c260 <_dtoa_r+0x730>
 800c3f4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c3f6:	e75c      	b.n	800c2b2 <_dtoa_r+0x782>
 800c3f8:	2300      	movs	r3, #0
 800c3fa:	e788      	b.n	800c30e <_dtoa_r+0x7de>
 800c3fc:	3fe00000 	.word	0x3fe00000
 800c400:	40240000 	.word	0x40240000
 800c404:	40140000 	.word	0x40140000
 800c408:	9b02      	ldr	r3, [sp, #8]
 800c40a:	e780      	b.n	800c30e <_dtoa_r+0x7de>
 800c40c:	2300      	movs	r3, #0
 800c40e:	930a      	str	r3, [sp, #40]	@ 0x28
 800c410:	e782      	b.n	800c318 <_dtoa_r+0x7e8>
 800c412:	d099      	beq.n	800c348 <_dtoa_r+0x818>
 800c414:	9a08      	ldr	r2, [sp, #32]
 800c416:	331c      	adds	r3, #28
 800c418:	441a      	add	r2, r3
 800c41a:	4498      	add	r8, r3
 800c41c:	441e      	add	r6, r3
 800c41e:	9208      	str	r2, [sp, #32]
 800c420:	e792      	b.n	800c348 <_dtoa_r+0x818>
 800c422:	4603      	mov	r3, r0
 800c424:	e7f6      	b.n	800c414 <_dtoa_r+0x8e4>
 800c426:	9b07      	ldr	r3, [sp, #28]
 800c428:	9704      	str	r7, [sp, #16]
 800c42a:	2b00      	cmp	r3, #0
 800c42c:	dc20      	bgt.n	800c470 <_dtoa_r+0x940>
 800c42e:	9300      	str	r3, [sp, #0]
 800c430:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c432:	2b02      	cmp	r3, #2
 800c434:	dd1e      	ble.n	800c474 <_dtoa_r+0x944>
 800c436:	9b00      	ldr	r3, [sp, #0]
 800c438:	2b00      	cmp	r3, #0
 800c43a:	f47f aec0 	bne.w	800c1be <_dtoa_r+0x68e>
 800c43e:	4621      	mov	r1, r4
 800c440:	2205      	movs	r2, #5
 800c442:	4658      	mov	r0, fp
 800c444:	f000 fd74 	bl	800cf30 <__multadd>
 800c448:	4601      	mov	r1, r0
 800c44a:	4604      	mov	r4, r0
 800c44c:	4648      	mov	r0, r9
 800c44e:	f000 ffd1 	bl	800d3f4 <__mcmp>
 800c452:	2800      	cmp	r0, #0
 800c454:	f77f aeb3 	ble.w	800c1be <_dtoa_r+0x68e>
 800c458:	4656      	mov	r6, sl
 800c45a:	2331      	movs	r3, #49	@ 0x31
 800c45c:	f806 3b01 	strb.w	r3, [r6], #1
 800c460:	9b04      	ldr	r3, [sp, #16]
 800c462:	3301      	adds	r3, #1
 800c464:	9304      	str	r3, [sp, #16]
 800c466:	e6ae      	b.n	800c1c6 <_dtoa_r+0x696>
 800c468:	9c07      	ldr	r4, [sp, #28]
 800c46a:	9704      	str	r7, [sp, #16]
 800c46c:	4625      	mov	r5, r4
 800c46e:	e7f3      	b.n	800c458 <_dtoa_r+0x928>
 800c470:	9b07      	ldr	r3, [sp, #28]
 800c472:	9300      	str	r3, [sp, #0]
 800c474:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c476:	2b00      	cmp	r3, #0
 800c478:	f000 8104 	beq.w	800c684 <_dtoa_r+0xb54>
 800c47c:	2e00      	cmp	r6, #0
 800c47e:	dd05      	ble.n	800c48c <_dtoa_r+0x95c>
 800c480:	4629      	mov	r1, r5
 800c482:	4632      	mov	r2, r6
 800c484:	4658      	mov	r0, fp
 800c486:	f000 ff49 	bl	800d31c <__lshift>
 800c48a:	4605      	mov	r5, r0
 800c48c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c48e:	2b00      	cmp	r3, #0
 800c490:	d05a      	beq.n	800c548 <_dtoa_r+0xa18>
 800c492:	6869      	ldr	r1, [r5, #4]
 800c494:	4658      	mov	r0, fp
 800c496:	f000 fce9 	bl	800ce6c <_Balloc>
 800c49a:	4606      	mov	r6, r0
 800c49c:	b928      	cbnz	r0, 800c4aa <_dtoa_r+0x97a>
 800c49e:	4b84      	ldr	r3, [pc, #528]	@ (800c6b0 <_dtoa_r+0xb80>)
 800c4a0:	4602      	mov	r2, r0
 800c4a2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800c4a6:	f7ff bb5a 	b.w	800bb5e <_dtoa_r+0x2e>
 800c4aa:	692a      	ldr	r2, [r5, #16]
 800c4ac:	3202      	adds	r2, #2
 800c4ae:	0092      	lsls	r2, r2, #2
 800c4b0:	f105 010c 	add.w	r1, r5, #12
 800c4b4:	300c      	adds	r0, #12
 800c4b6:	f7ff fa8a 	bl	800b9ce <memcpy>
 800c4ba:	2201      	movs	r2, #1
 800c4bc:	4631      	mov	r1, r6
 800c4be:	4658      	mov	r0, fp
 800c4c0:	f000 ff2c 	bl	800d31c <__lshift>
 800c4c4:	f10a 0301 	add.w	r3, sl, #1
 800c4c8:	9307      	str	r3, [sp, #28]
 800c4ca:	9b00      	ldr	r3, [sp, #0]
 800c4cc:	4453      	add	r3, sl
 800c4ce:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c4d0:	9b02      	ldr	r3, [sp, #8]
 800c4d2:	f003 0301 	and.w	r3, r3, #1
 800c4d6:	462f      	mov	r7, r5
 800c4d8:	930a      	str	r3, [sp, #40]	@ 0x28
 800c4da:	4605      	mov	r5, r0
 800c4dc:	9b07      	ldr	r3, [sp, #28]
 800c4de:	4621      	mov	r1, r4
 800c4e0:	3b01      	subs	r3, #1
 800c4e2:	4648      	mov	r0, r9
 800c4e4:	9300      	str	r3, [sp, #0]
 800c4e6:	f7ff fa99 	bl	800ba1c <quorem>
 800c4ea:	4639      	mov	r1, r7
 800c4ec:	9002      	str	r0, [sp, #8]
 800c4ee:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800c4f2:	4648      	mov	r0, r9
 800c4f4:	f000 ff7e 	bl	800d3f4 <__mcmp>
 800c4f8:	462a      	mov	r2, r5
 800c4fa:	9008      	str	r0, [sp, #32]
 800c4fc:	4621      	mov	r1, r4
 800c4fe:	4658      	mov	r0, fp
 800c500:	f000 ff94 	bl	800d42c <__mdiff>
 800c504:	68c2      	ldr	r2, [r0, #12]
 800c506:	4606      	mov	r6, r0
 800c508:	bb02      	cbnz	r2, 800c54c <_dtoa_r+0xa1c>
 800c50a:	4601      	mov	r1, r0
 800c50c:	4648      	mov	r0, r9
 800c50e:	f000 ff71 	bl	800d3f4 <__mcmp>
 800c512:	4602      	mov	r2, r0
 800c514:	4631      	mov	r1, r6
 800c516:	4658      	mov	r0, fp
 800c518:	920e      	str	r2, [sp, #56]	@ 0x38
 800c51a:	f000 fce7 	bl	800ceec <_Bfree>
 800c51e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c520:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c522:	9e07      	ldr	r6, [sp, #28]
 800c524:	ea43 0102 	orr.w	r1, r3, r2
 800c528:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c52a:	4319      	orrs	r1, r3
 800c52c:	d110      	bne.n	800c550 <_dtoa_r+0xa20>
 800c52e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c532:	d029      	beq.n	800c588 <_dtoa_r+0xa58>
 800c534:	9b08      	ldr	r3, [sp, #32]
 800c536:	2b00      	cmp	r3, #0
 800c538:	dd02      	ble.n	800c540 <_dtoa_r+0xa10>
 800c53a:	9b02      	ldr	r3, [sp, #8]
 800c53c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800c540:	9b00      	ldr	r3, [sp, #0]
 800c542:	f883 8000 	strb.w	r8, [r3]
 800c546:	e63f      	b.n	800c1c8 <_dtoa_r+0x698>
 800c548:	4628      	mov	r0, r5
 800c54a:	e7bb      	b.n	800c4c4 <_dtoa_r+0x994>
 800c54c:	2201      	movs	r2, #1
 800c54e:	e7e1      	b.n	800c514 <_dtoa_r+0x9e4>
 800c550:	9b08      	ldr	r3, [sp, #32]
 800c552:	2b00      	cmp	r3, #0
 800c554:	db04      	blt.n	800c560 <_dtoa_r+0xa30>
 800c556:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c558:	430b      	orrs	r3, r1
 800c55a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800c55c:	430b      	orrs	r3, r1
 800c55e:	d120      	bne.n	800c5a2 <_dtoa_r+0xa72>
 800c560:	2a00      	cmp	r2, #0
 800c562:	dded      	ble.n	800c540 <_dtoa_r+0xa10>
 800c564:	4649      	mov	r1, r9
 800c566:	2201      	movs	r2, #1
 800c568:	4658      	mov	r0, fp
 800c56a:	f000 fed7 	bl	800d31c <__lshift>
 800c56e:	4621      	mov	r1, r4
 800c570:	4681      	mov	r9, r0
 800c572:	f000 ff3f 	bl	800d3f4 <__mcmp>
 800c576:	2800      	cmp	r0, #0
 800c578:	dc03      	bgt.n	800c582 <_dtoa_r+0xa52>
 800c57a:	d1e1      	bne.n	800c540 <_dtoa_r+0xa10>
 800c57c:	f018 0f01 	tst.w	r8, #1
 800c580:	d0de      	beq.n	800c540 <_dtoa_r+0xa10>
 800c582:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c586:	d1d8      	bne.n	800c53a <_dtoa_r+0xa0a>
 800c588:	9a00      	ldr	r2, [sp, #0]
 800c58a:	2339      	movs	r3, #57	@ 0x39
 800c58c:	7013      	strb	r3, [r2, #0]
 800c58e:	4633      	mov	r3, r6
 800c590:	461e      	mov	r6, r3
 800c592:	3b01      	subs	r3, #1
 800c594:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800c598:	2a39      	cmp	r2, #57	@ 0x39
 800c59a:	d052      	beq.n	800c642 <_dtoa_r+0xb12>
 800c59c:	3201      	adds	r2, #1
 800c59e:	701a      	strb	r2, [r3, #0]
 800c5a0:	e612      	b.n	800c1c8 <_dtoa_r+0x698>
 800c5a2:	2a00      	cmp	r2, #0
 800c5a4:	dd07      	ble.n	800c5b6 <_dtoa_r+0xa86>
 800c5a6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c5aa:	d0ed      	beq.n	800c588 <_dtoa_r+0xa58>
 800c5ac:	9a00      	ldr	r2, [sp, #0]
 800c5ae:	f108 0301 	add.w	r3, r8, #1
 800c5b2:	7013      	strb	r3, [r2, #0]
 800c5b4:	e608      	b.n	800c1c8 <_dtoa_r+0x698>
 800c5b6:	9b07      	ldr	r3, [sp, #28]
 800c5b8:	9a07      	ldr	r2, [sp, #28]
 800c5ba:	f803 8c01 	strb.w	r8, [r3, #-1]
 800c5be:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c5c0:	4293      	cmp	r3, r2
 800c5c2:	d028      	beq.n	800c616 <_dtoa_r+0xae6>
 800c5c4:	4649      	mov	r1, r9
 800c5c6:	2300      	movs	r3, #0
 800c5c8:	220a      	movs	r2, #10
 800c5ca:	4658      	mov	r0, fp
 800c5cc:	f000 fcb0 	bl	800cf30 <__multadd>
 800c5d0:	42af      	cmp	r7, r5
 800c5d2:	4681      	mov	r9, r0
 800c5d4:	f04f 0300 	mov.w	r3, #0
 800c5d8:	f04f 020a 	mov.w	r2, #10
 800c5dc:	4639      	mov	r1, r7
 800c5de:	4658      	mov	r0, fp
 800c5e0:	d107      	bne.n	800c5f2 <_dtoa_r+0xac2>
 800c5e2:	f000 fca5 	bl	800cf30 <__multadd>
 800c5e6:	4607      	mov	r7, r0
 800c5e8:	4605      	mov	r5, r0
 800c5ea:	9b07      	ldr	r3, [sp, #28]
 800c5ec:	3301      	adds	r3, #1
 800c5ee:	9307      	str	r3, [sp, #28]
 800c5f0:	e774      	b.n	800c4dc <_dtoa_r+0x9ac>
 800c5f2:	f000 fc9d 	bl	800cf30 <__multadd>
 800c5f6:	4629      	mov	r1, r5
 800c5f8:	4607      	mov	r7, r0
 800c5fa:	2300      	movs	r3, #0
 800c5fc:	220a      	movs	r2, #10
 800c5fe:	4658      	mov	r0, fp
 800c600:	f000 fc96 	bl	800cf30 <__multadd>
 800c604:	4605      	mov	r5, r0
 800c606:	e7f0      	b.n	800c5ea <_dtoa_r+0xaba>
 800c608:	9b00      	ldr	r3, [sp, #0]
 800c60a:	2b00      	cmp	r3, #0
 800c60c:	bfcc      	ite	gt
 800c60e:	461e      	movgt	r6, r3
 800c610:	2601      	movle	r6, #1
 800c612:	4456      	add	r6, sl
 800c614:	2700      	movs	r7, #0
 800c616:	4649      	mov	r1, r9
 800c618:	2201      	movs	r2, #1
 800c61a:	4658      	mov	r0, fp
 800c61c:	f000 fe7e 	bl	800d31c <__lshift>
 800c620:	4621      	mov	r1, r4
 800c622:	4681      	mov	r9, r0
 800c624:	f000 fee6 	bl	800d3f4 <__mcmp>
 800c628:	2800      	cmp	r0, #0
 800c62a:	dcb0      	bgt.n	800c58e <_dtoa_r+0xa5e>
 800c62c:	d102      	bne.n	800c634 <_dtoa_r+0xb04>
 800c62e:	f018 0f01 	tst.w	r8, #1
 800c632:	d1ac      	bne.n	800c58e <_dtoa_r+0xa5e>
 800c634:	4633      	mov	r3, r6
 800c636:	461e      	mov	r6, r3
 800c638:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c63c:	2a30      	cmp	r2, #48	@ 0x30
 800c63e:	d0fa      	beq.n	800c636 <_dtoa_r+0xb06>
 800c640:	e5c2      	b.n	800c1c8 <_dtoa_r+0x698>
 800c642:	459a      	cmp	sl, r3
 800c644:	d1a4      	bne.n	800c590 <_dtoa_r+0xa60>
 800c646:	9b04      	ldr	r3, [sp, #16]
 800c648:	3301      	adds	r3, #1
 800c64a:	9304      	str	r3, [sp, #16]
 800c64c:	2331      	movs	r3, #49	@ 0x31
 800c64e:	f88a 3000 	strb.w	r3, [sl]
 800c652:	e5b9      	b.n	800c1c8 <_dtoa_r+0x698>
 800c654:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c656:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800c6b4 <_dtoa_r+0xb84>
 800c65a:	b11b      	cbz	r3, 800c664 <_dtoa_r+0xb34>
 800c65c:	f10a 0308 	add.w	r3, sl, #8
 800c660:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800c662:	6013      	str	r3, [r2, #0]
 800c664:	4650      	mov	r0, sl
 800c666:	b019      	add	sp, #100	@ 0x64
 800c668:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c66c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c66e:	2b01      	cmp	r3, #1
 800c670:	f77f ae37 	ble.w	800c2e2 <_dtoa_r+0x7b2>
 800c674:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c676:	930a      	str	r3, [sp, #40]	@ 0x28
 800c678:	2001      	movs	r0, #1
 800c67a:	e655      	b.n	800c328 <_dtoa_r+0x7f8>
 800c67c:	9b00      	ldr	r3, [sp, #0]
 800c67e:	2b00      	cmp	r3, #0
 800c680:	f77f aed6 	ble.w	800c430 <_dtoa_r+0x900>
 800c684:	4656      	mov	r6, sl
 800c686:	4621      	mov	r1, r4
 800c688:	4648      	mov	r0, r9
 800c68a:	f7ff f9c7 	bl	800ba1c <quorem>
 800c68e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800c692:	f806 8b01 	strb.w	r8, [r6], #1
 800c696:	9b00      	ldr	r3, [sp, #0]
 800c698:	eba6 020a 	sub.w	r2, r6, sl
 800c69c:	4293      	cmp	r3, r2
 800c69e:	ddb3      	ble.n	800c608 <_dtoa_r+0xad8>
 800c6a0:	4649      	mov	r1, r9
 800c6a2:	2300      	movs	r3, #0
 800c6a4:	220a      	movs	r2, #10
 800c6a6:	4658      	mov	r0, fp
 800c6a8:	f000 fc42 	bl	800cf30 <__multadd>
 800c6ac:	4681      	mov	r9, r0
 800c6ae:	e7ea      	b.n	800c686 <_dtoa_r+0xb56>
 800c6b0:	080103e8 	.word	0x080103e8
 800c6b4:	0801036c 	.word	0x0801036c

0800c6b8 <_free_r>:
 800c6b8:	b538      	push	{r3, r4, r5, lr}
 800c6ba:	4605      	mov	r5, r0
 800c6bc:	2900      	cmp	r1, #0
 800c6be:	d041      	beq.n	800c744 <_free_r+0x8c>
 800c6c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c6c4:	1f0c      	subs	r4, r1, #4
 800c6c6:	2b00      	cmp	r3, #0
 800c6c8:	bfb8      	it	lt
 800c6ca:	18e4      	addlt	r4, r4, r3
 800c6cc:	f7fc fc60 	bl	8008f90 <__malloc_lock>
 800c6d0:	4a1d      	ldr	r2, [pc, #116]	@ (800c748 <_free_r+0x90>)
 800c6d2:	6813      	ldr	r3, [r2, #0]
 800c6d4:	b933      	cbnz	r3, 800c6e4 <_free_r+0x2c>
 800c6d6:	6063      	str	r3, [r4, #4]
 800c6d8:	6014      	str	r4, [r2, #0]
 800c6da:	4628      	mov	r0, r5
 800c6dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c6e0:	f7fc bc5c 	b.w	8008f9c <__malloc_unlock>
 800c6e4:	42a3      	cmp	r3, r4
 800c6e6:	d908      	bls.n	800c6fa <_free_r+0x42>
 800c6e8:	6820      	ldr	r0, [r4, #0]
 800c6ea:	1821      	adds	r1, r4, r0
 800c6ec:	428b      	cmp	r3, r1
 800c6ee:	bf01      	itttt	eq
 800c6f0:	6819      	ldreq	r1, [r3, #0]
 800c6f2:	685b      	ldreq	r3, [r3, #4]
 800c6f4:	1809      	addeq	r1, r1, r0
 800c6f6:	6021      	streq	r1, [r4, #0]
 800c6f8:	e7ed      	b.n	800c6d6 <_free_r+0x1e>
 800c6fa:	461a      	mov	r2, r3
 800c6fc:	685b      	ldr	r3, [r3, #4]
 800c6fe:	b10b      	cbz	r3, 800c704 <_free_r+0x4c>
 800c700:	42a3      	cmp	r3, r4
 800c702:	d9fa      	bls.n	800c6fa <_free_r+0x42>
 800c704:	6811      	ldr	r1, [r2, #0]
 800c706:	1850      	adds	r0, r2, r1
 800c708:	42a0      	cmp	r0, r4
 800c70a:	d10b      	bne.n	800c724 <_free_r+0x6c>
 800c70c:	6820      	ldr	r0, [r4, #0]
 800c70e:	4401      	add	r1, r0
 800c710:	1850      	adds	r0, r2, r1
 800c712:	4283      	cmp	r3, r0
 800c714:	6011      	str	r1, [r2, #0]
 800c716:	d1e0      	bne.n	800c6da <_free_r+0x22>
 800c718:	6818      	ldr	r0, [r3, #0]
 800c71a:	685b      	ldr	r3, [r3, #4]
 800c71c:	6053      	str	r3, [r2, #4]
 800c71e:	4408      	add	r0, r1
 800c720:	6010      	str	r0, [r2, #0]
 800c722:	e7da      	b.n	800c6da <_free_r+0x22>
 800c724:	d902      	bls.n	800c72c <_free_r+0x74>
 800c726:	230c      	movs	r3, #12
 800c728:	602b      	str	r3, [r5, #0]
 800c72a:	e7d6      	b.n	800c6da <_free_r+0x22>
 800c72c:	6820      	ldr	r0, [r4, #0]
 800c72e:	1821      	adds	r1, r4, r0
 800c730:	428b      	cmp	r3, r1
 800c732:	bf04      	itt	eq
 800c734:	6819      	ldreq	r1, [r3, #0]
 800c736:	685b      	ldreq	r3, [r3, #4]
 800c738:	6063      	str	r3, [r4, #4]
 800c73a:	bf04      	itt	eq
 800c73c:	1809      	addeq	r1, r1, r0
 800c73e:	6021      	streq	r1, [r4, #0]
 800c740:	6054      	str	r4, [r2, #4]
 800c742:	e7ca      	b.n	800c6da <_free_r+0x22>
 800c744:	bd38      	pop	{r3, r4, r5, pc}
 800c746:	bf00      	nop
 800c748:	20006f68 	.word	0x20006f68

0800c74c <rshift>:
 800c74c:	6903      	ldr	r3, [r0, #16]
 800c74e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800c752:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c756:	ea4f 1261 	mov.w	r2, r1, asr #5
 800c75a:	f100 0414 	add.w	r4, r0, #20
 800c75e:	dd45      	ble.n	800c7ec <rshift+0xa0>
 800c760:	f011 011f 	ands.w	r1, r1, #31
 800c764:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800c768:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800c76c:	d10c      	bne.n	800c788 <rshift+0x3c>
 800c76e:	f100 0710 	add.w	r7, r0, #16
 800c772:	4629      	mov	r1, r5
 800c774:	42b1      	cmp	r1, r6
 800c776:	d334      	bcc.n	800c7e2 <rshift+0x96>
 800c778:	1a9b      	subs	r3, r3, r2
 800c77a:	009b      	lsls	r3, r3, #2
 800c77c:	1eea      	subs	r2, r5, #3
 800c77e:	4296      	cmp	r6, r2
 800c780:	bf38      	it	cc
 800c782:	2300      	movcc	r3, #0
 800c784:	4423      	add	r3, r4
 800c786:	e015      	b.n	800c7b4 <rshift+0x68>
 800c788:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800c78c:	f1c1 0820 	rsb	r8, r1, #32
 800c790:	40cf      	lsrs	r7, r1
 800c792:	f105 0e04 	add.w	lr, r5, #4
 800c796:	46a1      	mov	r9, r4
 800c798:	4576      	cmp	r6, lr
 800c79a:	46f4      	mov	ip, lr
 800c79c:	d815      	bhi.n	800c7ca <rshift+0x7e>
 800c79e:	1a9a      	subs	r2, r3, r2
 800c7a0:	0092      	lsls	r2, r2, #2
 800c7a2:	3a04      	subs	r2, #4
 800c7a4:	3501      	adds	r5, #1
 800c7a6:	42ae      	cmp	r6, r5
 800c7a8:	bf38      	it	cc
 800c7aa:	2200      	movcc	r2, #0
 800c7ac:	18a3      	adds	r3, r4, r2
 800c7ae:	50a7      	str	r7, [r4, r2]
 800c7b0:	b107      	cbz	r7, 800c7b4 <rshift+0x68>
 800c7b2:	3304      	adds	r3, #4
 800c7b4:	1b1a      	subs	r2, r3, r4
 800c7b6:	42a3      	cmp	r3, r4
 800c7b8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800c7bc:	bf08      	it	eq
 800c7be:	2300      	moveq	r3, #0
 800c7c0:	6102      	str	r2, [r0, #16]
 800c7c2:	bf08      	it	eq
 800c7c4:	6143      	streq	r3, [r0, #20]
 800c7c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c7ca:	f8dc c000 	ldr.w	ip, [ip]
 800c7ce:	fa0c fc08 	lsl.w	ip, ip, r8
 800c7d2:	ea4c 0707 	orr.w	r7, ip, r7
 800c7d6:	f849 7b04 	str.w	r7, [r9], #4
 800c7da:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c7de:	40cf      	lsrs	r7, r1
 800c7e0:	e7da      	b.n	800c798 <rshift+0x4c>
 800c7e2:	f851 cb04 	ldr.w	ip, [r1], #4
 800c7e6:	f847 cf04 	str.w	ip, [r7, #4]!
 800c7ea:	e7c3      	b.n	800c774 <rshift+0x28>
 800c7ec:	4623      	mov	r3, r4
 800c7ee:	e7e1      	b.n	800c7b4 <rshift+0x68>

0800c7f0 <__hexdig_fun>:
 800c7f0:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800c7f4:	2b09      	cmp	r3, #9
 800c7f6:	d802      	bhi.n	800c7fe <__hexdig_fun+0xe>
 800c7f8:	3820      	subs	r0, #32
 800c7fa:	b2c0      	uxtb	r0, r0
 800c7fc:	4770      	bx	lr
 800c7fe:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800c802:	2b05      	cmp	r3, #5
 800c804:	d801      	bhi.n	800c80a <__hexdig_fun+0x1a>
 800c806:	3847      	subs	r0, #71	@ 0x47
 800c808:	e7f7      	b.n	800c7fa <__hexdig_fun+0xa>
 800c80a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800c80e:	2b05      	cmp	r3, #5
 800c810:	d801      	bhi.n	800c816 <__hexdig_fun+0x26>
 800c812:	3827      	subs	r0, #39	@ 0x27
 800c814:	e7f1      	b.n	800c7fa <__hexdig_fun+0xa>
 800c816:	2000      	movs	r0, #0
 800c818:	4770      	bx	lr
	...

0800c81c <__gethex>:
 800c81c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c820:	b085      	sub	sp, #20
 800c822:	468a      	mov	sl, r1
 800c824:	9302      	str	r3, [sp, #8]
 800c826:	680b      	ldr	r3, [r1, #0]
 800c828:	9001      	str	r0, [sp, #4]
 800c82a:	4690      	mov	r8, r2
 800c82c:	1c9c      	adds	r4, r3, #2
 800c82e:	46a1      	mov	r9, r4
 800c830:	f814 0b01 	ldrb.w	r0, [r4], #1
 800c834:	2830      	cmp	r0, #48	@ 0x30
 800c836:	d0fa      	beq.n	800c82e <__gethex+0x12>
 800c838:	eba9 0303 	sub.w	r3, r9, r3
 800c83c:	f1a3 0b02 	sub.w	fp, r3, #2
 800c840:	f7ff ffd6 	bl	800c7f0 <__hexdig_fun>
 800c844:	4605      	mov	r5, r0
 800c846:	2800      	cmp	r0, #0
 800c848:	d168      	bne.n	800c91c <__gethex+0x100>
 800c84a:	49a0      	ldr	r1, [pc, #640]	@ (800cacc <__gethex+0x2b0>)
 800c84c:	2201      	movs	r2, #1
 800c84e:	4648      	mov	r0, r9
 800c850:	f7fe fa79 	bl	800ad46 <strncmp>
 800c854:	4607      	mov	r7, r0
 800c856:	2800      	cmp	r0, #0
 800c858:	d167      	bne.n	800c92a <__gethex+0x10e>
 800c85a:	f899 0001 	ldrb.w	r0, [r9, #1]
 800c85e:	4626      	mov	r6, r4
 800c860:	f7ff ffc6 	bl	800c7f0 <__hexdig_fun>
 800c864:	2800      	cmp	r0, #0
 800c866:	d062      	beq.n	800c92e <__gethex+0x112>
 800c868:	4623      	mov	r3, r4
 800c86a:	7818      	ldrb	r0, [r3, #0]
 800c86c:	2830      	cmp	r0, #48	@ 0x30
 800c86e:	4699      	mov	r9, r3
 800c870:	f103 0301 	add.w	r3, r3, #1
 800c874:	d0f9      	beq.n	800c86a <__gethex+0x4e>
 800c876:	f7ff ffbb 	bl	800c7f0 <__hexdig_fun>
 800c87a:	fab0 f580 	clz	r5, r0
 800c87e:	096d      	lsrs	r5, r5, #5
 800c880:	f04f 0b01 	mov.w	fp, #1
 800c884:	464a      	mov	r2, r9
 800c886:	4616      	mov	r6, r2
 800c888:	3201      	adds	r2, #1
 800c88a:	7830      	ldrb	r0, [r6, #0]
 800c88c:	f7ff ffb0 	bl	800c7f0 <__hexdig_fun>
 800c890:	2800      	cmp	r0, #0
 800c892:	d1f8      	bne.n	800c886 <__gethex+0x6a>
 800c894:	498d      	ldr	r1, [pc, #564]	@ (800cacc <__gethex+0x2b0>)
 800c896:	2201      	movs	r2, #1
 800c898:	4630      	mov	r0, r6
 800c89a:	f7fe fa54 	bl	800ad46 <strncmp>
 800c89e:	2800      	cmp	r0, #0
 800c8a0:	d13f      	bne.n	800c922 <__gethex+0x106>
 800c8a2:	b944      	cbnz	r4, 800c8b6 <__gethex+0x9a>
 800c8a4:	1c74      	adds	r4, r6, #1
 800c8a6:	4622      	mov	r2, r4
 800c8a8:	4616      	mov	r6, r2
 800c8aa:	3201      	adds	r2, #1
 800c8ac:	7830      	ldrb	r0, [r6, #0]
 800c8ae:	f7ff ff9f 	bl	800c7f0 <__hexdig_fun>
 800c8b2:	2800      	cmp	r0, #0
 800c8b4:	d1f8      	bne.n	800c8a8 <__gethex+0x8c>
 800c8b6:	1ba4      	subs	r4, r4, r6
 800c8b8:	00a7      	lsls	r7, r4, #2
 800c8ba:	7833      	ldrb	r3, [r6, #0]
 800c8bc:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800c8c0:	2b50      	cmp	r3, #80	@ 0x50
 800c8c2:	d13e      	bne.n	800c942 <__gethex+0x126>
 800c8c4:	7873      	ldrb	r3, [r6, #1]
 800c8c6:	2b2b      	cmp	r3, #43	@ 0x2b
 800c8c8:	d033      	beq.n	800c932 <__gethex+0x116>
 800c8ca:	2b2d      	cmp	r3, #45	@ 0x2d
 800c8cc:	d034      	beq.n	800c938 <__gethex+0x11c>
 800c8ce:	1c71      	adds	r1, r6, #1
 800c8d0:	2400      	movs	r4, #0
 800c8d2:	7808      	ldrb	r0, [r1, #0]
 800c8d4:	f7ff ff8c 	bl	800c7f0 <__hexdig_fun>
 800c8d8:	1e43      	subs	r3, r0, #1
 800c8da:	b2db      	uxtb	r3, r3
 800c8dc:	2b18      	cmp	r3, #24
 800c8de:	d830      	bhi.n	800c942 <__gethex+0x126>
 800c8e0:	f1a0 0210 	sub.w	r2, r0, #16
 800c8e4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800c8e8:	f7ff ff82 	bl	800c7f0 <__hexdig_fun>
 800c8ec:	f100 3cff 	add.w	ip, r0, #4294967295
 800c8f0:	fa5f fc8c 	uxtb.w	ip, ip
 800c8f4:	f1bc 0f18 	cmp.w	ip, #24
 800c8f8:	f04f 030a 	mov.w	r3, #10
 800c8fc:	d91e      	bls.n	800c93c <__gethex+0x120>
 800c8fe:	b104      	cbz	r4, 800c902 <__gethex+0xe6>
 800c900:	4252      	negs	r2, r2
 800c902:	4417      	add	r7, r2
 800c904:	f8ca 1000 	str.w	r1, [sl]
 800c908:	b1ed      	cbz	r5, 800c946 <__gethex+0x12a>
 800c90a:	f1bb 0f00 	cmp.w	fp, #0
 800c90e:	bf0c      	ite	eq
 800c910:	2506      	moveq	r5, #6
 800c912:	2500      	movne	r5, #0
 800c914:	4628      	mov	r0, r5
 800c916:	b005      	add	sp, #20
 800c918:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c91c:	2500      	movs	r5, #0
 800c91e:	462c      	mov	r4, r5
 800c920:	e7b0      	b.n	800c884 <__gethex+0x68>
 800c922:	2c00      	cmp	r4, #0
 800c924:	d1c7      	bne.n	800c8b6 <__gethex+0x9a>
 800c926:	4627      	mov	r7, r4
 800c928:	e7c7      	b.n	800c8ba <__gethex+0x9e>
 800c92a:	464e      	mov	r6, r9
 800c92c:	462f      	mov	r7, r5
 800c92e:	2501      	movs	r5, #1
 800c930:	e7c3      	b.n	800c8ba <__gethex+0x9e>
 800c932:	2400      	movs	r4, #0
 800c934:	1cb1      	adds	r1, r6, #2
 800c936:	e7cc      	b.n	800c8d2 <__gethex+0xb6>
 800c938:	2401      	movs	r4, #1
 800c93a:	e7fb      	b.n	800c934 <__gethex+0x118>
 800c93c:	fb03 0002 	mla	r0, r3, r2, r0
 800c940:	e7ce      	b.n	800c8e0 <__gethex+0xc4>
 800c942:	4631      	mov	r1, r6
 800c944:	e7de      	b.n	800c904 <__gethex+0xe8>
 800c946:	eba6 0309 	sub.w	r3, r6, r9
 800c94a:	3b01      	subs	r3, #1
 800c94c:	4629      	mov	r1, r5
 800c94e:	2b07      	cmp	r3, #7
 800c950:	dc0a      	bgt.n	800c968 <__gethex+0x14c>
 800c952:	9801      	ldr	r0, [sp, #4]
 800c954:	f000 fa8a 	bl	800ce6c <_Balloc>
 800c958:	4604      	mov	r4, r0
 800c95a:	b940      	cbnz	r0, 800c96e <__gethex+0x152>
 800c95c:	4b5c      	ldr	r3, [pc, #368]	@ (800cad0 <__gethex+0x2b4>)
 800c95e:	4602      	mov	r2, r0
 800c960:	21e4      	movs	r1, #228	@ 0xe4
 800c962:	485c      	ldr	r0, [pc, #368]	@ (800cad4 <__gethex+0x2b8>)
 800c964:	f001 fd6a 	bl	800e43c <__assert_func>
 800c968:	3101      	adds	r1, #1
 800c96a:	105b      	asrs	r3, r3, #1
 800c96c:	e7ef      	b.n	800c94e <__gethex+0x132>
 800c96e:	f100 0a14 	add.w	sl, r0, #20
 800c972:	2300      	movs	r3, #0
 800c974:	4655      	mov	r5, sl
 800c976:	469b      	mov	fp, r3
 800c978:	45b1      	cmp	r9, r6
 800c97a:	d337      	bcc.n	800c9ec <__gethex+0x1d0>
 800c97c:	f845 bb04 	str.w	fp, [r5], #4
 800c980:	eba5 050a 	sub.w	r5, r5, sl
 800c984:	10ad      	asrs	r5, r5, #2
 800c986:	6125      	str	r5, [r4, #16]
 800c988:	4658      	mov	r0, fp
 800c98a:	f000 fb61 	bl	800d050 <__hi0bits>
 800c98e:	016d      	lsls	r5, r5, #5
 800c990:	f8d8 6000 	ldr.w	r6, [r8]
 800c994:	1a2d      	subs	r5, r5, r0
 800c996:	42b5      	cmp	r5, r6
 800c998:	dd54      	ble.n	800ca44 <__gethex+0x228>
 800c99a:	1bad      	subs	r5, r5, r6
 800c99c:	4629      	mov	r1, r5
 800c99e:	4620      	mov	r0, r4
 800c9a0:	f000 fef5 	bl	800d78e <__any_on>
 800c9a4:	4681      	mov	r9, r0
 800c9a6:	b178      	cbz	r0, 800c9c8 <__gethex+0x1ac>
 800c9a8:	1e6b      	subs	r3, r5, #1
 800c9aa:	1159      	asrs	r1, r3, #5
 800c9ac:	f003 021f 	and.w	r2, r3, #31
 800c9b0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800c9b4:	f04f 0901 	mov.w	r9, #1
 800c9b8:	fa09 f202 	lsl.w	r2, r9, r2
 800c9bc:	420a      	tst	r2, r1
 800c9be:	d003      	beq.n	800c9c8 <__gethex+0x1ac>
 800c9c0:	454b      	cmp	r3, r9
 800c9c2:	dc36      	bgt.n	800ca32 <__gethex+0x216>
 800c9c4:	f04f 0902 	mov.w	r9, #2
 800c9c8:	4629      	mov	r1, r5
 800c9ca:	4620      	mov	r0, r4
 800c9cc:	f7ff febe 	bl	800c74c <rshift>
 800c9d0:	442f      	add	r7, r5
 800c9d2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c9d6:	42bb      	cmp	r3, r7
 800c9d8:	da42      	bge.n	800ca60 <__gethex+0x244>
 800c9da:	9801      	ldr	r0, [sp, #4]
 800c9dc:	4621      	mov	r1, r4
 800c9de:	f000 fa85 	bl	800ceec <_Bfree>
 800c9e2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c9e4:	2300      	movs	r3, #0
 800c9e6:	6013      	str	r3, [r2, #0]
 800c9e8:	25a3      	movs	r5, #163	@ 0xa3
 800c9ea:	e793      	b.n	800c914 <__gethex+0xf8>
 800c9ec:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800c9f0:	2a2e      	cmp	r2, #46	@ 0x2e
 800c9f2:	d012      	beq.n	800ca1a <__gethex+0x1fe>
 800c9f4:	2b20      	cmp	r3, #32
 800c9f6:	d104      	bne.n	800ca02 <__gethex+0x1e6>
 800c9f8:	f845 bb04 	str.w	fp, [r5], #4
 800c9fc:	f04f 0b00 	mov.w	fp, #0
 800ca00:	465b      	mov	r3, fp
 800ca02:	7830      	ldrb	r0, [r6, #0]
 800ca04:	9303      	str	r3, [sp, #12]
 800ca06:	f7ff fef3 	bl	800c7f0 <__hexdig_fun>
 800ca0a:	9b03      	ldr	r3, [sp, #12]
 800ca0c:	f000 000f 	and.w	r0, r0, #15
 800ca10:	4098      	lsls	r0, r3
 800ca12:	ea4b 0b00 	orr.w	fp, fp, r0
 800ca16:	3304      	adds	r3, #4
 800ca18:	e7ae      	b.n	800c978 <__gethex+0x15c>
 800ca1a:	45b1      	cmp	r9, r6
 800ca1c:	d8ea      	bhi.n	800c9f4 <__gethex+0x1d8>
 800ca1e:	492b      	ldr	r1, [pc, #172]	@ (800cacc <__gethex+0x2b0>)
 800ca20:	9303      	str	r3, [sp, #12]
 800ca22:	2201      	movs	r2, #1
 800ca24:	4630      	mov	r0, r6
 800ca26:	f7fe f98e 	bl	800ad46 <strncmp>
 800ca2a:	9b03      	ldr	r3, [sp, #12]
 800ca2c:	2800      	cmp	r0, #0
 800ca2e:	d1e1      	bne.n	800c9f4 <__gethex+0x1d8>
 800ca30:	e7a2      	b.n	800c978 <__gethex+0x15c>
 800ca32:	1ea9      	subs	r1, r5, #2
 800ca34:	4620      	mov	r0, r4
 800ca36:	f000 feaa 	bl	800d78e <__any_on>
 800ca3a:	2800      	cmp	r0, #0
 800ca3c:	d0c2      	beq.n	800c9c4 <__gethex+0x1a8>
 800ca3e:	f04f 0903 	mov.w	r9, #3
 800ca42:	e7c1      	b.n	800c9c8 <__gethex+0x1ac>
 800ca44:	da09      	bge.n	800ca5a <__gethex+0x23e>
 800ca46:	1b75      	subs	r5, r6, r5
 800ca48:	4621      	mov	r1, r4
 800ca4a:	9801      	ldr	r0, [sp, #4]
 800ca4c:	462a      	mov	r2, r5
 800ca4e:	f000 fc65 	bl	800d31c <__lshift>
 800ca52:	1b7f      	subs	r7, r7, r5
 800ca54:	4604      	mov	r4, r0
 800ca56:	f100 0a14 	add.w	sl, r0, #20
 800ca5a:	f04f 0900 	mov.w	r9, #0
 800ca5e:	e7b8      	b.n	800c9d2 <__gethex+0x1b6>
 800ca60:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800ca64:	42bd      	cmp	r5, r7
 800ca66:	dd6f      	ble.n	800cb48 <__gethex+0x32c>
 800ca68:	1bed      	subs	r5, r5, r7
 800ca6a:	42ae      	cmp	r6, r5
 800ca6c:	dc34      	bgt.n	800cad8 <__gethex+0x2bc>
 800ca6e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ca72:	2b02      	cmp	r3, #2
 800ca74:	d022      	beq.n	800cabc <__gethex+0x2a0>
 800ca76:	2b03      	cmp	r3, #3
 800ca78:	d024      	beq.n	800cac4 <__gethex+0x2a8>
 800ca7a:	2b01      	cmp	r3, #1
 800ca7c:	d115      	bne.n	800caaa <__gethex+0x28e>
 800ca7e:	42ae      	cmp	r6, r5
 800ca80:	d113      	bne.n	800caaa <__gethex+0x28e>
 800ca82:	2e01      	cmp	r6, #1
 800ca84:	d10b      	bne.n	800ca9e <__gethex+0x282>
 800ca86:	9a02      	ldr	r2, [sp, #8]
 800ca88:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800ca8c:	6013      	str	r3, [r2, #0]
 800ca8e:	2301      	movs	r3, #1
 800ca90:	6123      	str	r3, [r4, #16]
 800ca92:	f8ca 3000 	str.w	r3, [sl]
 800ca96:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ca98:	2562      	movs	r5, #98	@ 0x62
 800ca9a:	601c      	str	r4, [r3, #0]
 800ca9c:	e73a      	b.n	800c914 <__gethex+0xf8>
 800ca9e:	1e71      	subs	r1, r6, #1
 800caa0:	4620      	mov	r0, r4
 800caa2:	f000 fe74 	bl	800d78e <__any_on>
 800caa6:	2800      	cmp	r0, #0
 800caa8:	d1ed      	bne.n	800ca86 <__gethex+0x26a>
 800caaa:	9801      	ldr	r0, [sp, #4]
 800caac:	4621      	mov	r1, r4
 800caae:	f000 fa1d 	bl	800ceec <_Bfree>
 800cab2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800cab4:	2300      	movs	r3, #0
 800cab6:	6013      	str	r3, [r2, #0]
 800cab8:	2550      	movs	r5, #80	@ 0x50
 800caba:	e72b      	b.n	800c914 <__gethex+0xf8>
 800cabc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cabe:	2b00      	cmp	r3, #0
 800cac0:	d1f3      	bne.n	800caaa <__gethex+0x28e>
 800cac2:	e7e0      	b.n	800ca86 <__gethex+0x26a>
 800cac4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cac6:	2b00      	cmp	r3, #0
 800cac8:	d1dd      	bne.n	800ca86 <__gethex+0x26a>
 800caca:	e7ee      	b.n	800caaa <__gethex+0x28e>
 800cacc:	08010129 	.word	0x08010129
 800cad0:	080103e8 	.word	0x080103e8
 800cad4:	080103f9 	.word	0x080103f9
 800cad8:	1e6f      	subs	r7, r5, #1
 800cada:	f1b9 0f00 	cmp.w	r9, #0
 800cade:	d130      	bne.n	800cb42 <__gethex+0x326>
 800cae0:	b127      	cbz	r7, 800caec <__gethex+0x2d0>
 800cae2:	4639      	mov	r1, r7
 800cae4:	4620      	mov	r0, r4
 800cae6:	f000 fe52 	bl	800d78e <__any_on>
 800caea:	4681      	mov	r9, r0
 800caec:	117a      	asrs	r2, r7, #5
 800caee:	2301      	movs	r3, #1
 800caf0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800caf4:	f007 071f 	and.w	r7, r7, #31
 800caf8:	40bb      	lsls	r3, r7
 800cafa:	4213      	tst	r3, r2
 800cafc:	4629      	mov	r1, r5
 800cafe:	4620      	mov	r0, r4
 800cb00:	bf18      	it	ne
 800cb02:	f049 0902 	orrne.w	r9, r9, #2
 800cb06:	f7ff fe21 	bl	800c74c <rshift>
 800cb0a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800cb0e:	1b76      	subs	r6, r6, r5
 800cb10:	2502      	movs	r5, #2
 800cb12:	f1b9 0f00 	cmp.w	r9, #0
 800cb16:	d047      	beq.n	800cba8 <__gethex+0x38c>
 800cb18:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800cb1c:	2b02      	cmp	r3, #2
 800cb1e:	d015      	beq.n	800cb4c <__gethex+0x330>
 800cb20:	2b03      	cmp	r3, #3
 800cb22:	d017      	beq.n	800cb54 <__gethex+0x338>
 800cb24:	2b01      	cmp	r3, #1
 800cb26:	d109      	bne.n	800cb3c <__gethex+0x320>
 800cb28:	f019 0f02 	tst.w	r9, #2
 800cb2c:	d006      	beq.n	800cb3c <__gethex+0x320>
 800cb2e:	f8da 3000 	ldr.w	r3, [sl]
 800cb32:	ea49 0903 	orr.w	r9, r9, r3
 800cb36:	f019 0f01 	tst.w	r9, #1
 800cb3a:	d10e      	bne.n	800cb5a <__gethex+0x33e>
 800cb3c:	f045 0510 	orr.w	r5, r5, #16
 800cb40:	e032      	b.n	800cba8 <__gethex+0x38c>
 800cb42:	f04f 0901 	mov.w	r9, #1
 800cb46:	e7d1      	b.n	800caec <__gethex+0x2d0>
 800cb48:	2501      	movs	r5, #1
 800cb4a:	e7e2      	b.n	800cb12 <__gethex+0x2f6>
 800cb4c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cb4e:	f1c3 0301 	rsb	r3, r3, #1
 800cb52:	930f      	str	r3, [sp, #60]	@ 0x3c
 800cb54:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cb56:	2b00      	cmp	r3, #0
 800cb58:	d0f0      	beq.n	800cb3c <__gethex+0x320>
 800cb5a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800cb5e:	f104 0314 	add.w	r3, r4, #20
 800cb62:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800cb66:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800cb6a:	f04f 0c00 	mov.w	ip, #0
 800cb6e:	4618      	mov	r0, r3
 800cb70:	f853 2b04 	ldr.w	r2, [r3], #4
 800cb74:	f1b2 3fff 	cmp.w	r2, #4294967295
 800cb78:	d01b      	beq.n	800cbb2 <__gethex+0x396>
 800cb7a:	3201      	adds	r2, #1
 800cb7c:	6002      	str	r2, [r0, #0]
 800cb7e:	2d02      	cmp	r5, #2
 800cb80:	f104 0314 	add.w	r3, r4, #20
 800cb84:	d13c      	bne.n	800cc00 <__gethex+0x3e4>
 800cb86:	f8d8 2000 	ldr.w	r2, [r8]
 800cb8a:	3a01      	subs	r2, #1
 800cb8c:	42b2      	cmp	r2, r6
 800cb8e:	d109      	bne.n	800cba4 <__gethex+0x388>
 800cb90:	1171      	asrs	r1, r6, #5
 800cb92:	2201      	movs	r2, #1
 800cb94:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800cb98:	f006 061f 	and.w	r6, r6, #31
 800cb9c:	fa02 f606 	lsl.w	r6, r2, r6
 800cba0:	421e      	tst	r6, r3
 800cba2:	d13a      	bne.n	800cc1a <__gethex+0x3fe>
 800cba4:	f045 0520 	orr.w	r5, r5, #32
 800cba8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cbaa:	601c      	str	r4, [r3, #0]
 800cbac:	9b02      	ldr	r3, [sp, #8]
 800cbae:	601f      	str	r7, [r3, #0]
 800cbb0:	e6b0      	b.n	800c914 <__gethex+0xf8>
 800cbb2:	4299      	cmp	r1, r3
 800cbb4:	f843 cc04 	str.w	ip, [r3, #-4]
 800cbb8:	d8d9      	bhi.n	800cb6e <__gethex+0x352>
 800cbba:	68a3      	ldr	r3, [r4, #8]
 800cbbc:	459b      	cmp	fp, r3
 800cbbe:	db17      	blt.n	800cbf0 <__gethex+0x3d4>
 800cbc0:	6861      	ldr	r1, [r4, #4]
 800cbc2:	9801      	ldr	r0, [sp, #4]
 800cbc4:	3101      	adds	r1, #1
 800cbc6:	f000 f951 	bl	800ce6c <_Balloc>
 800cbca:	4681      	mov	r9, r0
 800cbcc:	b918      	cbnz	r0, 800cbd6 <__gethex+0x3ba>
 800cbce:	4b1a      	ldr	r3, [pc, #104]	@ (800cc38 <__gethex+0x41c>)
 800cbd0:	4602      	mov	r2, r0
 800cbd2:	2184      	movs	r1, #132	@ 0x84
 800cbd4:	e6c5      	b.n	800c962 <__gethex+0x146>
 800cbd6:	6922      	ldr	r2, [r4, #16]
 800cbd8:	3202      	adds	r2, #2
 800cbda:	f104 010c 	add.w	r1, r4, #12
 800cbde:	0092      	lsls	r2, r2, #2
 800cbe0:	300c      	adds	r0, #12
 800cbe2:	f7fe fef4 	bl	800b9ce <memcpy>
 800cbe6:	4621      	mov	r1, r4
 800cbe8:	9801      	ldr	r0, [sp, #4]
 800cbea:	f000 f97f 	bl	800ceec <_Bfree>
 800cbee:	464c      	mov	r4, r9
 800cbf0:	6923      	ldr	r3, [r4, #16]
 800cbf2:	1c5a      	adds	r2, r3, #1
 800cbf4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800cbf8:	6122      	str	r2, [r4, #16]
 800cbfa:	2201      	movs	r2, #1
 800cbfc:	615a      	str	r2, [r3, #20]
 800cbfe:	e7be      	b.n	800cb7e <__gethex+0x362>
 800cc00:	6922      	ldr	r2, [r4, #16]
 800cc02:	455a      	cmp	r2, fp
 800cc04:	dd0b      	ble.n	800cc1e <__gethex+0x402>
 800cc06:	2101      	movs	r1, #1
 800cc08:	4620      	mov	r0, r4
 800cc0a:	f7ff fd9f 	bl	800c74c <rshift>
 800cc0e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800cc12:	3701      	adds	r7, #1
 800cc14:	42bb      	cmp	r3, r7
 800cc16:	f6ff aee0 	blt.w	800c9da <__gethex+0x1be>
 800cc1a:	2501      	movs	r5, #1
 800cc1c:	e7c2      	b.n	800cba4 <__gethex+0x388>
 800cc1e:	f016 061f 	ands.w	r6, r6, #31
 800cc22:	d0fa      	beq.n	800cc1a <__gethex+0x3fe>
 800cc24:	4453      	add	r3, sl
 800cc26:	f1c6 0620 	rsb	r6, r6, #32
 800cc2a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800cc2e:	f000 fa0f 	bl	800d050 <__hi0bits>
 800cc32:	42b0      	cmp	r0, r6
 800cc34:	dbe7      	blt.n	800cc06 <__gethex+0x3ea>
 800cc36:	e7f0      	b.n	800cc1a <__gethex+0x3fe>
 800cc38:	080103e8 	.word	0x080103e8

0800cc3c <L_shift>:
 800cc3c:	f1c2 0208 	rsb	r2, r2, #8
 800cc40:	0092      	lsls	r2, r2, #2
 800cc42:	b570      	push	{r4, r5, r6, lr}
 800cc44:	f1c2 0620 	rsb	r6, r2, #32
 800cc48:	6843      	ldr	r3, [r0, #4]
 800cc4a:	6804      	ldr	r4, [r0, #0]
 800cc4c:	fa03 f506 	lsl.w	r5, r3, r6
 800cc50:	432c      	orrs	r4, r5
 800cc52:	40d3      	lsrs	r3, r2
 800cc54:	6004      	str	r4, [r0, #0]
 800cc56:	f840 3f04 	str.w	r3, [r0, #4]!
 800cc5a:	4288      	cmp	r0, r1
 800cc5c:	d3f4      	bcc.n	800cc48 <L_shift+0xc>
 800cc5e:	bd70      	pop	{r4, r5, r6, pc}

0800cc60 <__match>:
 800cc60:	b530      	push	{r4, r5, lr}
 800cc62:	6803      	ldr	r3, [r0, #0]
 800cc64:	3301      	adds	r3, #1
 800cc66:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cc6a:	b914      	cbnz	r4, 800cc72 <__match+0x12>
 800cc6c:	6003      	str	r3, [r0, #0]
 800cc6e:	2001      	movs	r0, #1
 800cc70:	bd30      	pop	{r4, r5, pc}
 800cc72:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cc76:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800cc7a:	2d19      	cmp	r5, #25
 800cc7c:	bf98      	it	ls
 800cc7e:	3220      	addls	r2, #32
 800cc80:	42a2      	cmp	r2, r4
 800cc82:	d0f0      	beq.n	800cc66 <__match+0x6>
 800cc84:	2000      	movs	r0, #0
 800cc86:	e7f3      	b.n	800cc70 <__match+0x10>

0800cc88 <__hexnan>:
 800cc88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc8c:	680b      	ldr	r3, [r1, #0]
 800cc8e:	6801      	ldr	r1, [r0, #0]
 800cc90:	115e      	asrs	r6, r3, #5
 800cc92:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800cc96:	f013 031f 	ands.w	r3, r3, #31
 800cc9a:	b087      	sub	sp, #28
 800cc9c:	bf18      	it	ne
 800cc9e:	3604      	addne	r6, #4
 800cca0:	2500      	movs	r5, #0
 800cca2:	1f37      	subs	r7, r6, #4
 800cca4:	4682      	mov	sl, r0
 800cca6:	4690      	mov	r8, r2
 800cca8:	9301      	str	r3, [sp, #4]
 800ccaa:	f846 5c04 	str.w	r5, [r6, #-4]
 800ccae:	46b9      	mov	r9, r7
 800ccb0:	463c      	mov	r4, r7
 800ccb2:	9502      	str	r5, [sp, #8]
 800ccb4:	46ab      	mov	fp, r5
 800ccb6:	784a      	ldrb	r2, [r1, #1]
 800ccb8:	1c4b      	adds	r3, r1, #1
 800ccba:	9303      	str	r3, [sp, #12]
 800ccbc:	b342      	cbz	r2, 800cd10 <__hexnan+0x88>
 800ccbe:	4610      	mov	r0, r2
 800ccc0:	9105      	str	r1, [sp, #20]
 800ccc2:	9204      	str	r2, [sp, #16]
 800ccc4:	f7ff fd94 	bl	800c7f0 <__hexdig_fun>
 800ccc8:	2800      	cmp	r0, #0
 800ccca:	d151      	bne.n	800cd70 <__hexnan+0xe8>
 800cccc:	9a04      	ldr	r2, [sp, #16]
 800ccce:	9905      	ldr	r1, [sp, #20]
 800ccd0:	2a20      	cmp	r2, #32
 800ccd2:	d818      	bhi.n	800cd06 <__hexnan+0x7e>
 800ccd4:	9b02      	ldr	r3, [sp, #8]
 800ccd6:	459b      	cmp	fp, r3
 800ccd8:	dd13      	ble.n	800cd02 <__hexnan+0x7a>
 800ccda:	454c      	cmp	r4, r9
 800ccdc:	d206      	bcs.n	800ccec <__hexnan+0x64>
 800ccde:	2d07      	cmp	r5, #7
 800cce0:	dc04      	bgt.n	800ccec <__hexnan+0x64>
 800cce2:	462a      	mov	r2, r5
 800cce4:	4649      	mov	r1, r9
 800cce6:	4620      	mov	r0, r4
 800cce8:	f7ff ffa8 	bl	800cc3c <L_shift>
 800ccec:	4544      	cmp	r4, r8
 800ccee:	d952      	bls.n	800cd96 <__hexnan+0x10e>
 800ccf0:	2300      	movs	r3, #0
 800ccf2:	f1a4 0904 	sub.w	r9, r4, #4
 800ccf6:	f844 3c04 	str.w	r3, [r4, #-4]
 800ccfa:	f8cd b008 	str.w	fp, [sp, #8]
 800ccfe:	464c      	mov	r4, r9
 800cd00:	461d      	mov	r5, r3
 800cd02:	9903      	ldr	r1, [sp, #12]
 800cd04:	e7d7      	b.n	800ccb6 <__hexnan+0x2e>
 800cd06:	2a29      	cmp	r2, #41	@ 0x29
 800cd08:	d157      	bne.n	800cdba <__hexnan+0x132>
 800cd0a:	3102      	adds	r1, #2
 800cd0c:	f8ca 1000 	str.w	r1, [sl]
 800cd10:	f1bb 0f00 	cmp.w	fp, #0
 800cd14:	d051      	beq.n	800cdba <__hexnan+0x132>
 800cd16:	454c      	cmp	r4, r9
 800cd18:	d206      	bcs.n	800cd28 <__hexnan+0xa0>
 800cd1a:	2d07      	cmp	r5, #7
 800cd1c:	dc04      	bgt.n	800cd28 <__hexnan+0xa0>
 800cd1e:	462a      	mov	r2, r5
 800cd20:	4649      	mov	r1, r9
 800cd22:	4620      	mov	r0, r4
 800cd24:	f7ff ff8a 	bl	800cc3c <L_shift>
 800cd28:	4544      	cmp	r4, r8
 800cd2a:	d936      	bls.n	800cd9a <__hexnan+0x112>
 800cd2c:	f1a8 0204 	sub.w	r2, r8, #4
 800cd30:	4623      	mov	r3, r4
 800cd32:	f853 1b04 	ldr.w	r1, [r3], #4
 800cd36:	f842 1f04 	str.w	r1, [r2, #4]!
 800cd3a:	429f      	cmp	r7, r3
 800cd3c:	d2f9      	bcs.n	800cd32 <__hexnan+0xaa>
 800cd3e:	1b3b      	subs	r3, r7, r4
 800cd40:	f023 0303 	bic.w	r3, r3, #3
 800cd44:	3304      	adds	r3, #4
 800cd46:	3401      	adds	r4, #1
 800cd48:	3e03      	subs	r6, #3
 800cd4a:	42b4      	cmp	r4, r6
 800cd4c:	bf88      	it	hi
 800cd4e:	2304      	movhi	r3, #4
 800cd50:	4443      	add	r3, r8
 800cd52:	2200      	movs	r2, #0
 800cd54:	f843 2b04 	str.w	r2, [r3], #4
 800cd58:	429f      	cmp	r7, r3
 800cd5a:	d2fb      	bcs.n	800cd54 <__hexnan+0xcc>
 800cd5c:	683b      	ldr	r3, [r7, #0]
 800cd5e:	b91b      	cbnz	r3, 800cd68 <__hexnan+0xe0>
 800cd60:	4547      	cmp	r7, r8
 800cd62:	d128      	bne.n	800cdb6 <__hexnan+0x12e>
 800cd64:	2301      	movs	r3, #1
 800cd66:	603b      	str	r3, [r7, #0]
 800cd68:	2005      	movs	r0, #5
 800cd6a:	b007      	add	sp, #28
 800cd6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd70:	3501      	adds	r5, #1
 800cd72:	2d08      	cmp	r5, #8
 800cd74:	f10b 0b01 	add.w	fp, fp, #1
 800cd78:	dd06      	ble.n	800cd88 <__hexnan+0x100>
 800cd7a:	4544      	cmp	r4, r8
 800cd7c:	d9c1      	bls.n	800cd02 <__hexnan+0x7a>
 800cd7e:	2300      	movs	r3, #0
 800cd80:	f844 3c04 	str.w	r3, [r4, #-4]
 800cd84:	2501      	movs	r5, #1
 800cd86:	3c04      	subs	r4, #4
 800cd88:	6822      	ldr	r2, [r4, #0]
 800cd8a:	f000 000f 	and.w	r0, r0, #15
 800cd8e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800cd92:	6020      	str	r0, [r4, #0]
 800cd94:	e7b5      	b.n	800cd02 <__hexnan+0x7a>
 800cd96:	2508      	movs	r5, #8
 800cd98:	e7b3      	b.n	800cd02 <__hexnan+0x7a>
 800cd9a:	9b01      	ldr	r3, [sp, #4]
 800cd9c:	2b00      	cmp	r3, #0
 800cd9e:	d0dd      	beq.n	800cd5c <__hexnan+0xd4>
 800cda0:	f1c3 0320 	rsb	r3, r3, #32
 800cda4:	f04f 32ff 	mov.w	r2, #4294967295
 800cda8:	40da      	lsrs	r2, r3
 800cdaa:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800cdae:	4013      	ands	r3, r2
 800cdb0:	f846 3c04 	str.w	r3, [r6, #-4]
 800cdb4:	e7d2      	b.n	800cd5c <__hexnan+0xd4>
 800cdb6:	3f04      	subs	r7, #4
 800cdb8:	e7d0      	b.n	800cd5c <__hexnan+0xd4>
 800cdba:	2004      	movs	r0, #4
 800cdbc:	e7d5      	b.n	800cd6a <__hexnan+0xe2>
	...

0800cdc0 <_findenv_r>:
 800cdc0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cdc4:	f8df a06c 	ldr.w	sl, [pc, #108]	@ 800ce34 <_findenv_r+0x74>
 800cdc8:	4606      	mov	r6, r0
 800cdca:	4689      	mov	r9, r1
 800cdcc:	4617      	mov	r7, r2
 800cdce:	f001 fb67 	bl	800e4a0 <__env_lock>
 800cdd2:	f8da 4000 	ldr.w	r4, [sl]
 800cdd6:	b134      	cbz	r4, 800cde6 <_findenv_r+0x26>
 800cdd8:	464b      	mov	r3, r9
 800cdda:	4698      	mov	r8, r3
 800cddc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cde0:	b13a      	cbz	r2, 800cdf2 <_findenv_r+0x32>
 800cde2:	2a3d      	cmp	r2, #61	@ 0x3d
 800cde4:	d1f9      	bne.n	800cdda <_findenv_r+0x1a>
 800cde6:	4630      	mov	r0, r6
 800cde8:	f001 fb60 	bl	800e4ac <__env_unlock>
 800cdec:	2000      	movs	r0, #0
 800cdee:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cdf2:	eba8 0809 	sub.w	r8, r8, r9
 800cdf6:	46a3      	mov	fp, r4
 800cdf8:	f854 0b04 	ldr.w	r0, [r4], #4
 800cdfc:	2800      	cmp	r0, #0
 800cdfe:	d0f2      	beq.n	800cde6 <_findenv_r+0x26>
 800ce00:	4642      	mov	r2, r8
 800ce02:	4649      	mov	r1, r9
 800ce04:	f7fd ff9f 	bl	800ad46 <strncmp>
 800ce08:	2800      	cmp	r0, #0
 800ce0a:	d1f4      	bne.n	800cdf6 <_findenv_r+0x36>
 800ce0c:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800ce10:	eb03 0508 	add.w	r5, r3, r8
 800ce14:	f813 3008 	ldrb.w	r3, [r3, r8]
 800ce18:	2b3d      	cmp	r3, #61	@ 0x3d
 800ce1a:	d1ec      	bne.n	800cdf6 <_findenv_r+0x36>
 800ce1c:	f8da 3000 	ldr.w	r3, [sl]
 800ce20:	ebab 0303 	sub.w	r3, fp, r3
 800ce24:	109b      	asrs	r3, r3, #2
 800ce26:	4630      	mov	r0, r6
 800ce28:	603b      	str	r3, [r7, #0]
 800ce2a:	f001 fb3f 	bl	800e4ac <__env_unlock>
 800ce2e:	1c68      	adds	r0, r5, #1
 800ce30:	e7dd      	b.n	800cdee <_findenv_r+0x2e>
 800ce32:	bf00      	nop
 800ce34:	20000008 	.word	0x20000008

0800ce38 <_getenv_r>:
 800ce38:	b507      	push	{r0, r1, r2, lr}
 800ce3a:	aa01      	add	r2, sp, #4
 800ce3c:	f7ff ffc0 	bl	800cdc0 <_findenv_r>
 800ce40:	b003      	add	sp, #12
 800ce42:	f85d fb04 	ldr.w	pc, [sp], #4

0800ce46 <__ascii_mbtowc>:
 800ce46:	b082      	sub	sp, #8
 800ce48:	b901      	cbnz	r1, 800ce4c <__ascii_mbtowc+0x6>
 800ce4a:	a901      	add	r1, sp, #4
 800ce4c:	b142      	cbz	r2, 800ce60 <__ascii_mbtowc+0x1a>
 800ce4e:	b14b      	cbz	r3, 800ce64 <__ascii_mbtowc+0x1e>
 800ce50:	7813      	ldrb	r3, [r2, #0]
 800ce52:	600b      	str	r3, [r1, #0]
 800ce54:	7812      	ldrb	r2, [r2, #0]
 800ce56:	1e10      	subs	r0, r2, #0
 800ce58:	bf18      	it	ne
 800ce5a:	2001      	movne	r0, #1
 800ce5c:	b002      	add	sp, #8
 800ce5e:	4770      	bx	lr
 800ce60:	4610      	mov	r0, r2
 800ce62:	e7fb      	b.n	800ce5c <__ascii_mbtowc+0x16>
 800ce64:	f06f 0001 	mvn.w	r0, #1
 800ce68:	e7f8      	b.n	800ce5c <__ascii_mbtowc+0x16>
	...

0800ce6c <_Balloc>:
 800ce6c:	b570      	push	{r4, r5, r6, lr}
 800ce6e:	69c6      	ldr	r6, [r0, #28]
 800ce70:	4604      	mov	r4, r0
 800ce72:	460d      	mov	r5, r1
 800ce74:	b976      	cbnz	r6, 800ce94 <_Balloc+0x28>
 800ce76:	2010      	movs	r0, #16
 800ce78:	f7fb ffd8 	bl	8008e2c <malloc>
 800ce7c:	4602      	mov	r2, r0
 800ce7e:	61e0      	str	r0, [r4, #28]
 800ce80:	b920      	cbnz	r0, 800ce8c <_Balloc+0x20>
 800ce82:	4b18      	ldr	r3, [pc, #96]	@ (800cee4 <_Balloc+0x78>)
 800ce84:	4818      	ldr	r0, [pc, #96]	@ (800cee8 <_Balloc+0x7c>)
 800ce86:	216b      	movs	r1, #107	@ 0x6b
 800ce88:	f001 fad8 	bl	800e43c <__assert_func>
 800ce8c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ce90:	6006      	str	r6, [r0, #0]
 800ce92:	60c6      	str	r6, [r0, #12]
 800ce94:	69e6      	ldr	r6, [r4, #28]
 800ce96:	68f3      	ldr	r3, [r6, #12]
 800ce98:	b183      	cbz	r3, 800cebc <_Balloc+0x50>
 800ce9a:	69e3      	ldr	r3, [r4, #28]
 800ce9c:	68db      	ldr	r3, [r3, #12]
 800ce9e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800cea2:	b9b8      	cbnz	r0, 800ced4 <_Balloc+0x68>
 800cea4:	2101      	movs	r1, #1
 800cea6:	fa01 f605 	lsl.w	r6, r1, r5
 800ceaa:	1d72      	adds	r2, r6, #5
 800ceac:	0092      	lsls	r2, r2, #2
 800ceae:	4620      	mov	r0, r4
 800ceb0:	f001 fae2 	bl	800e478 <_calloc_r>
 800ceb4:	b160      	cbz	r0, 800ced0 <_Balloc+0x64>
 800ceb6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ceba:	e00e      	b.n	800ceda <_Balloc+0x6e>
 800cebc:	2221      	movs	r2, #33	@ 0x21
 800cebe:	2104      	movs	r1, #4
 800cec0:	4620      	mov	r0, r4
 800cec2:	f001 fad9 	bl	800e478 <_calloc_r>
 800cec6:	69e3      	ldr	r3, [r4, #28]
 800cec8:	60f0      	str	r0, [r6, #12]
 800ceca:	68db      	ldr	r3, [r3, #12]
 800cecc:	2b00      	cmp	r3, #0
 800cece:	d1e4      	bne.n	800ce9a <_Balloc+0x2e>
 800ced0:	2000      	movs	r0, #0
 800ced2:	bd70      	pop	{r4, r5, r6, pc}
 800ced4:	6802      	ldr	r2, [r0, #0]
 800ced6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ceda:	2300      	movs	r3, #0
 800cedc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800cee0:	e7f7      	b.n	800ced2 <_Balloc+0x66>
 800cee2:	bf00      	nop
 800cee4:	08010379 	.word	0x08010379
 800cee8:	08010459 	.word	0x08010459

0800ceec <_Bfree>:
 800ceec:	b570      	push	{r4, r5, r6, lr}
 800ceee:	69c6      	ldr	r6, [r0, #28]
 800cef0:	4605      	mov	r5, r0
 800cef2:	460c      	mov	r4, r1
 800cef4:	b976      	cbnz	r6, 800cf14 <_Bfree+0x28>
 800cef6:	2010      	movs	r0, #16
 800cef8:	f7fb ff98 	bl	8008e2c <malloc>
 800cefc:	4602      	mov	r2, r0
 800cefe:	61e8      	str	r0, [r5, #28]
 800cf00:	b920      	cbnz	r0, 800cf0c <_Bfree+0x20>
 800cf02:	4b09      	ldr	r3, [pc, #36]	@ (800cf28 <_Bfree+0x3c>)
 800cf04:	4809      	ldr	r0, [pc, #36]	@ (800cf2c <_Bfree+0x40>)
 800cf06:	218f      	movs	r1, #143	@ 0x8f
 800cf08:	f001 fa98 	bl	800e43c <__assert_func>
 800cf0c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cf10:	6006      	str	r6, [r0, #0]
 800cf12:	60c6      	str	r6, [r0, #12]
 800cf14:	b13c      	cbz	r4, 800cf26 <_Bfree+0x3a>
 800cf16:	69eb      	ldr	r3, [r5, #28]
 800cf18:	6862      	ldr	r2, [r4, #4]
 800cf1a:	68db      	ldr	r3, [r3, #12]
 800cf1c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800cf20:	6021      	str	r1, [r4, #0]
 800cf22:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800cf26:	bd70      	pop	{r4, r5, r6, pc}
 800cf28:	08010379 	.word	0x08010379
 800cf2c:	08010459 	.word	0x08010459

0800cf30 <__multadd>:
 800cf30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cf34:	690d      	ldr	r5, [r1, #16]
 800cf36:	4607      	mov	r7, r0
 800cf38:	460c      	mov	r4, r1
 800cf3a:	461e      	mov	r6, r3
 800cf3c:	f101 0c14 	add.w	ip, r1, #20
 800cf40:	2000      	movs	r0, #0
 800cf42:	f8dc 3000 	ldr.w	r3, [ip]
 800cf46:	b299      	uxth	r1, r3
 800cf48:	fb02 6101 	mla	r1, r2, r1, r6
 800cf4c:	0c1e      	lsrs	r6, r3, #16
 800cf4e:	0c0b      	lsrs	r3, r1, #16
 800cf50:	fb02 3306 	mla	r3, r2, r6, r3
 800cf54:	b289      	uxth	r1, r1
 800cf56:	3001      	adds	r0, #1
 800cf58:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800cf5c:	4285      	cmp	r5, r0
 800cf5e:	f84c 1b04 	str.w	r1, [ip], #4
 800cf62:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800cf66:	dcec      	bgt.n	800cf42 <__multadd+0x12>
 800cf68:	b30e      	cbz	r6, 800cfae <__multadd+0x7e>
 800cf6a:	68a3      	ldr	r3, [r4, #8]
 800cf6c:	42ab      	cmp	r3, r5
 800cf6e:	dc19      	bgt.n	800cfa4 <__multadd+0x74>
 800cf70:	6861      	ldr	r1, [r4, #4]
 800cf72:	4638      	mov	r0, r7
 800cf74:	3101      	adds	r1, #1
 800cf76:	f7ff ff79 	bl	800ce6c <_Balloc>
 800cf7a:	4680      	mov	r8, r0
 800cf7c:	b928      	cbnz	r0, 800cf8a <__multadd+0x5a>
 800cf7e:	4602      	mov	r2, r0
 800cf80:	4b0c      	ldr	r3, [pc, #48]	@ (800cfb4 <__multadd+0x84>)
 800cf82:	480d      	ldr	r0, [pc, #52]	@ (800cfb8 <__multadd+0x88>)
 800cf84:	21ba      	movs	r1, #186	@ 0xba
 800cf86:	f001 fa59 	bl	800e43c <__assert_func>
 800cf8a:	6922      	ldr	r2, [r4, #16]
 800cf8c:	3202      	adds	r2, #2
 800cf8e:	f104 010c 	add.w	r1, r4, #12
 800cf92:	0092      	lsls	r2, r2, #2
 800cf94:	300c      	adds	r0, #12
 800cf96:	f7fe fd1a 	bl	800b9ce <memcpy>
 800cf9a:	4621      	mov	r1, r4
 800cf9c:	4638      	mov	r0, r7
 800cf9e:	f7ff ffa5 	bl	800ceec <_Bfree>
 800cfa2:	4644      	mov	r4, r8
 800cfa4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800cfa8:	3501      	adds	r5, #1
 800cfaa:	615e      	str	r6, [r3, #20]
 800cfac:	6125      	str	r5, [r4, #16]
 800cfae:	4620      	mov	r0, r4
 800cfb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cfb4:	080103e8 	.word	0x080103e8
 800cfb8:	08010459 	.word	0x08010459

0800cfbc <__s2b>:
 800cfbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cfc0:	460c      	mov	r4, r1
 800cfc2:	4615      	mov	r5, r2
 800cfc4:	461f      	mov	r7, r3
 800cfc6:	2209      	movs	r2, #9
 800cfc8:	3308      	adds	r3, #8
 800cfca:	4606      	mov	r6, r0
 800cfcc:	fb93 f3f2 	sdiv	r3, r3, r2
 800cfd0:	2100      	movs	r1, #0
 800cfd2:	2201      	movs	r2, #1
 800cfd4:	429a      	cmp	r2, r3
 800cfd6:	db09      	blt.n	800cfec <__s2b+0x30>
 800cfd8:	4630      	mov	r0, r6
 800cfda:	f7ff ff47 	bl	800ce6c <_Balloc>
 800cfde:	b940      	cbnz	r0, 800cff2 <__s2b+0x36>
 800cfe0:	4602      	mov	r2, r0
 800cfe2:	4b19      	ldr	r3, [pc, #100]	@ (800d048 <__s2b+0x8c>)
 800cfe4:	4819      	ldr	r0, [pc, #100]	@ (800d04c <__s2b+0x90>)
 800cfe6:	21d3      	movs	r1, #211	@ 0xd3
 800cfe8:	f001 fa28 	bl	800e43c <__assert_func>
 800cfec:	0052      	lsls	r2, r2, #1
 800cfee:	3101      	adds	r1, #1
 800cff0:	e7f0      	b.n	800cfd4 <__s2b+0x18>
 800cff2:	9b08      	ldr	r3, [sp, #32]
 800cff4:	6143      	str	r3, [r0, #20]
 800cff6:	2d09      	cmp	r5, #9
 800cff8:	f04f 0301 	mov.w	r3, #1
 800cffc:	6103      	str	r3, [r0, #16]
 800cffe:	dd16      	ble.n	800d02e <__s2b+0x72>
 800d000:	f104 0909 	add.w	r9, r4, #9
 800d004:	46c8      	mov	r8, r9
 800d006:	442c      	add	r4, r5
 800d008:	f818 3b01 	ldrb.w	r3, [r8], #1
 800d00c:	4601      	mov	r1, r0
 800d00e:	3b30      	subs	r3, #48	@ 0x30
 800d010:	220a      	movs	r2, #10
 800d012:	4630      	mov	r0, r6
 800d014:	f7ff ff8c 	bl	800cf30 <__multadd>
 800d018:	45a0      	cmp	r8, r4
 800d01a:	d1f5      	bne.n	800d008 <__s2b+0x4c>
 800d01c:	f1a5 0408 	sub.w	r4, r5, #8
 800d020:	444c      	add	r4, r9
 800d022:	1b2d      	subs	r5, r5, r4
 800d024:	1963      	adds	r3, r4, r5
 800d026:	42bb      	cmp	r3, r7
 800d028:	db04      	blt.n	800d034 <__s2b+0x78>
 800d02a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d02e:	340a      	adds	r4, #10
 800d030:	2509      	movs	r5, #9
 800d032:	e7f6      	b.n	800d022 <__s2b+0x66>
 800d034:	f814 3b01 	ldrb.w	r3, [r4], #1
 800d038:	4601      	mov	r1, r0
 800d03a:	3b30      	subs	r3, #48	@ 0x30
 800d03c:	220a      	movs	r2, #10
 800d03e:	4630      	mov	r0, r6
 800d040:	f7ff ff76 	bl	800cf30 <__multadd>
 800d044:	e7ee      	b.n	800d024 <__s2b+0x68>
 800d046:	bf00      	nop
 800d048:	080103e8 	.word	0x080103e8
 800d04c:	08010459 	.word	0x08010459

0800d050 <__hi0bits>:
 800d050:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800d054:	4603      	mov	r3, r0
 800d056:	bf36      	itet	cc
 800d058:	0403      	lslcc	r3, r0, #16
 800d05a:	2000      	movcs	r0, #0
 800d05c:	2010      	movcc	r0, #16
 800d05e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800d062:	bf3c      	itt	cc
 800d064:	021b      	lslcc	r3, r3, #8
 800d066:	3008      	addcc	r0, #8
 800d068:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d06c:	bf3c      	itt	cc
 800d06e:	011b      	lslcc	r3, r3, #4
 800d070:	3004      	addcc	r0, #4
 800d072:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d076:	bf3c      	itt	cc
 800d078:	009b      	lslcc	r3, r3, #2
 800d07a:	3002      	addcc	r0, #2
 800d07c:	2b00      	cmp	r3, #0
 800d07e:	db05      	blt.n	800d08c <__hi0bits+0x3c>
 800d080:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800d084:	f100 0001 	add.w	r0, r0, #1
 800d088:	bf08      	it	eq
 800d08a:	2020      	moveq	r0, #32
 800d08c:	4770      	bx	lr

0800d08e <__lo0bits>:
 800d08e:	6803      	ldr	r3, [r0, #0]
 800d090:	4602      	mov	r2, r0
 800d092:	f013 0007 	ands.w	r0, r3, #7
 800d096:	d00b      	beq.n	800d0b0 <__lo0bits+0x22>
 800d098:	07d9      	lsls	r1, r3, #31
 800d09a:	d421      	bmi.n	800d0e0 <__lo0bits+0x52>
 800d09c:	0798      	lsls	r0, r3, #30
 800d09e:	bf49      	itett	mi
 800d0a0:	085b      	lsrmi	r3, r3, #1
 800d0a2:	089b      	lsrpl	r3, r3, #2
 800d0a4:	2001      	movmi	r0, #1
 800d0a6:	6013      	strmi	r3, [r2, #0]
 800d0a8:	bf5c      	itt	pl
 800d0aa:	6013      	strpl	r3, [r2, #0]
 800d0ac:	2002      	movpl	r0, #2
 800d0ae:	4770      	bx	lr
 800d0b0:	b299      	uxth	r1, r3
 800d0b2:	b909      	cbnz	r1, 800d0b8 <__lo0bits+0x2a>
 800d0b4:	0c1b      	lsrs	r3, r3, #16
 800d0b6:	2010      	movs	r0, #16
 800d0b8:	b2d9      	uxtb	r1, r3
 800d0ba:	b909      	cbnz	r1, 800d0c0 <__lo0bits+0x32>
 800d0bc:	3008      	adds	r0, #8
 800d0be:	0a1b      	lsrs	r3, r3, #8
 800d0c0:	0719      	lsls	r1, r3, #28
 800d0c2:	bf04      	itt	eq
 800d0c4:	091b      	lsreq	r3, r3, #4
 800d0c6:	3004      	addeq	r0, #4
 800d0c8:	0799      	lsls	r1, r3, #30
 800d0ca:	bf04      	itt	eq
 800d0cc:	089b      	lsreq	r3, r3, #2
 800d0ce:	3002      	addeq	r0, #2
 800d0d0:	07d9      	lsls	r1, r3, #31
 800d0d2:	d403      	bmi.n	800d0dc <__lo0bits+0x4e>
 800d0d4:	085b      	lsrs	r3, r3, #1
 800d0d6:	f100 0001 	add.w	r0, r0, #1
 800d0da:	d003      	beq.n	800d0e4 <__lo0bits+0x56>
 800d0dc:	6013      	str	r3, [r2, #0]
 800d0de:	4770      	bx	lr
 800d0e0:	2000      	movs	r0, #0
 800d0e2:	4770      	bx	lr
 800d0e4:	2020      	movs	r0, #32
 800d0e6:	4770      	bx	lr

0800d0e8 <__i2b>:
 800d0e8:	b510      	push	{r4, lr}
 800d0ea:	460c      	mov	r4, r1
 800d0ec:	2101      	movs	r1, #1
 800d0ee:	f7ff febd 	bl	800ce6c <_Balloc>
 800d0f2:	4602      	mov	r2, r0
 800d0f4:	b928      	cbnz	r0, 800d102 <__i2b+0x1a>
 800d0f6:	4b05      	ldr	r3, [pc, #20]	@ (800d10c <__i2b+0x24>)
 800d0f8:	4805      	ldr	r0, [pc, #20]	@ (800d110 <__i2b+0x28>)
 800d0fa:	f240 1145 	movw	r1, #325	@ 0x145
 800d0fe:	f001 f99d 	bl	800e43c <__assert_func>
 800d102:	2301      	movs	r3, #1
 800d104:	6144      	str	r4, [r0, #20]
 800d106:	6103      	str	r3, [r0, #16]
 800d108:	bd10      	pop	{r4, pc}
 800d10a:	bf00      	nop
 800d10c:	080103e8 	.word	0x080103e8
 800d110:	08010459 	.word	0x08010459

0800d114 <__multiply>:
 800d114:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d118:	4614      	mov	r4, r2
 800d11a:	690a      	ldr	r2, [r1, #16]
 800d11c:	6923      	ldr	r3, [r4, #16]
 800d11e:	429a      	cmp	r2, r3
 800d120:	bfa8      	it	ge
 800d122:	4623      	movge	r3, r4
 800d124:	460f      	mov	r7, r1
 800d126:	bfa4      	itt	ge
 800d128:	460c      	movge	r4, r1
 800d12a:	461f      	movge	r7, r3
 800d12c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800d130:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800d134:	68a3      	ldr	r3, [r4, #8]
 800d136:	6861      	ldr	r1, [r4, #4]
 800d138:	eb0a 0609 	add.w	r6, sl, r9
 800d13c:	42b3      	cmp	r3, r6
 800d13e:	b085      	sub	sp, #20
 800d140:	bfb8      	it	lt
 800d142:	3101      	addlt	r1, #1
 800d144:	f7ff fe92 	bl	800ce6c <_Balloc>
 800d148:	b930      	cbnz	r0, 800d158 <__multiply+0x44>
 800d14a:	4602      	mov	r2, r0
 800d14c:	4b44      	ldr	r3, [pc, #272]	@ (800d260 <__multiply+0x14c>)
 800d14e:	4845      	ldr	r0, [pc, #276]	@ (800d264 <__multiply+0x150>)
 800d150:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800d154:	f001 f972 	bl	800e43c <__assert_func>
 800d158:	f100 0514 	add.w	r5, r0, #20
 800d15c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800d160:	462b      	mov	r3, r5
 800d162:	2200      	movs	r2, #0
 800d164:	4543      	cmp	r3, r8
 800d166:	d321      	bcc.n	800d1ac <__multiply+0x98>
 800d168:	f107 0114 	add.w	r1, r7, #20
 800d16c:	f104 0214 	add.w	r2, r4, #20
 800d170:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800d174:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800d178:	9302      	str	r3, [sp, #8]
 800d17a:	1b13      	subs	r3, r2, r4
 800d17c:	3b15      	subs	r3, #21
 800d17e:	f023 0303 	bic.w	r3, r3, #3
 800d182:	3304      	adds	r3, #4
 800d184:	f104 0715 	add.w	r7, r4, #21
 800d188:	42ba      	cmp	r2, r7
 800d18a:	bf38      	it	cc
 800d18c:	2304      	movcc	r3, #4
 800d18e:	9301      	str	r3, [sp, #4]
 800d190:	9b02      	ldr	r3, [sp, #8]
 800d192:	9103      	str	r1, [sp, #12]
 800d194:	428b      	cmp	r3, r1
 800d196:	d80c      	bhi.n	800d1b2 <__multiply+0x9e>
 800d198:	2e00      	cmp	r6, #0
 800d19a:	dd03      	ble.n	800d1a4 <__multiply+0x90>
 800d19c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d1a0:	2b00      	cmp	r3, #0
 800d1a2:	d05b      	beq.n	800d25c <__multiply+0x148>
 800d1a4:	6106      	str	r6, [r0, #16]
 800d1a6:	b005      	add	sp, #20
 800d1a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d1ac:	f843 2b04 	str.w	r2, [r3], #4
 800d1b0:	e7d8      	b.n	800d164 <__multiply+0x50>
 800d1b2:	f8b1 a000 	ldrh.w	sl, [r1]
 800d1b6:	f1ba 0f00 	cmp.w	sl, #0
 800d1ba:	d024      	beq.n	800d206 <__multiply+0xf2>
 800d1bc:	f104 0e14 	add.w	lr, r4, #20
 800d1c0:	46a9      	mov	r9, r5
 800d1c2:	f04f 0c00 	mov.w	ip, #0
 800d1c6:	f85e 7b04 	ldr.w	r7, [lr], #4
 800d1ca:	f8d9 3000 	ldr.w	r3, [r9]
 800d1ce:	fa1f fb87 	uxth.w	fp, r7
 800d1d2:	b29b      	uxth	r3, r3
 800d1d4:	fb0a 330b 	mla	r3, sl, fp, r3
 800d1d8:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800d1dc:	f8d9 7000 	ldr.w	r7, [r9]
 800d1e0:	4463      	add	r3, ip
 800d1e2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800d1e6:	fb0a c70b 	mla	r7, sl, fp, ip
 800d1ea:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800d1ee:	b29b      	uxth	r3, r3
 800d1f0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800d1f4:	4572      	cmp	r2, lr
 800d1f6:	f849 3b04 	str.w	r3, [r9], #4
 800d1fa:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800d1fe:	d8e2      	bhi.n	800d1c6 <__multiply+0xb2>
 800d200:	9b01      	ldr	r3, [sp, #4]
 800d202:	f845 c003 	str.w	ip, [r5, r3]
 800d206:	9b03      	ldr	r3, [sp, #12]
 800d208:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800d20c:	3104      	adds	r1, #4
 800d20e:	f1b9 0f00 	cmp.w	r9, #0
 800d212:	d021      	beq.n	800d258 <__multiply+0x144>
 800d214:	682b      	ldr	r3, [r5, #0]
 800d216:	f104 0c14 	add.w	ip, r4, #20
 800d21a:	46ae      	mov	lr, r5
 800d21c:	f04f 0a00 	mov.w	sl, #0
 800d220:	f8bc b000 	ldrh.w	fp, [ip]
 800d224:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800d228:	fb09 770b 	mla	r7, r9, fp, r7
 800d22c:	4457      	add	r7, sl
 800d22e:	b29b      	uxth	r3, r3
 800d230:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800d234:	f84e 3b04 	str.w	r3, [lr], #4
 800d238:	f85c 3b04 	ldr.w	r3, [ip], #4
 800d23c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d240:	f8be 3000 	ldrh.w	r3, [lr]
 800d244:	fb09 330a 	mla	r3, r9, sl, r3
 800d248:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800d24c:	4562      	cmp	r2, ip
 800d24e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d252:	d8e5      	bhi.n	800d220 <__multiply+0x10c>
 800d254:	9f01      	ldr	r7, [sp, #4]
 800d256:	51eb      	str	r3, [r5, r7]
 800d258:	3504      	adds	r5, #4
 800d25a:	e799      	b.n	800d190 <__multiply+0x7c>
 800d25c:	3e01      	subs	r6, #1
 800d25e:	e79b      	b.n	800d198 <__multiply+0x84>
 800d260:	080103e8 	.word	0x080103e8
 800d264:	08010459 	.word	0x08010459

0800d268 <__pow5mult>:
 800d268:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d26c:	4615      	mov	r5, r2
 800d26e:	f012 0203 	ands.w	r2, r2, #3
 800d272:	4607      	mov	r7, r0
 800d274:	460e      	mov	r6, r1
 800d276:	d007      	beq.n	800d288 <__pow5mult+0x20>
 800d278:	4c25      	ldr	r4, [pc, #148]	@ (800d310 <__pow5mult+0xa8>)
 800d27a:	3a01      	subs	r2, #1
 800d27c:	2300      	movs	r3, #0
 800d27e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d282:	f7ff fe55 	bl	800cf30 <__multadd>
 800d286:	4606      	mov	r6, r0
 800d288:	10ad      	asrs	r5, r5, #2
 800d28a:	d03d      	beq.n	800d308 <__pow5mult+0xa0>
 800d28c:	69fc      	ldr	r4, [r7, #28]
 800d28e:	b97c      	cbnz	r4, 800d2b0 <__pow5mult+0x48>
 800d290:	2010      	movs	r0, #16
 800d292:	f7fb fdcb 	bl	8008e2c <malloc>
 800d296:	4602      	mov	r2, r0
 800d298:	61f8      	str	r0, [r7, #28]
 800d29a:	b928      	cbnz	r0, 800d2a8 <__pow5mult+0x40>
 800d29c:	4b1d      	ldr	r3, [pc, #116]	@ (800d314 <__pow5mult+0xac>)
 800d29e:	481e      	ldr	r0, [pc, #120]	@ (800d318 <__pow5mult+0xb0>)
 800d2a0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800d2a4:	f001 f8ca 	bl	800e43c <__assert_func>
 800d2a8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d2ac:	6004      	str	r4, [r0, #0]
 800d2ae:	60c4      	str	r4, [r0, #12]
 800d2b0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800d2b4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d2b8:	b94c      	cbnz	r4, 800d2ce <__pow5mult+0x66>
 800d2ba:	f240 2171 	movw	r1, #625	@ 0x271
 800d2be:	4638      	mov	r0, r7
 800d2c0:	f7ff ff12 	bl	800d0e8 <__i2b>
 800d2c4:	2300      	movs	r3, #0
 800d2c6:	f8c8 0008 	str.w	r0, [r8, #8]
 800d2ca:	4604      	mov	r4, r0
 800d2cc:	6003      	str	r3, [r0, #0]
 800d2ce:	f04f 0900 	mov.w	r9, #0
 800d2d2:	07eb      	lsls	r3, r5, #31
 800d2d4:	d50a      	bpl.n	800d2ec <__pow5mult+0x84>
 800d2d6:	4631      	mov	r1, r6
 800d2d8:	4622      	mov	r2, r4
 800d2da:	4638      	mov	r0, r7
 800d2dc:	f7ff ff1a 	bl	800d114 <__multiply>
 800d2e0:	4631      	mov	r1, r6
 800d2e2:	4680      	mov	r8, r0
 800d2e4:	4638      	mov	r0, r7
 800d2e6:	f7ff fe01 	bl	800ceec <_Bfree>
 800d2ea:	4646      	mov	r6, r8
 800d2ec:	106d      	asrs	r5, r5, #1
 800d2ee:	d00b      	beq.n	800d308 <__pow5mult+0xa0>
 800d2f0:	6820      	ldr	r0, [r4, #0]
 800d2f2:	b938      	cbnz	r0, 800d304 <__pow5mult+0x9c>
 800d2f4:	4622      	mov	r2, r4
 800d2f6:	4621      	mov	r1, r4
 800d2f8:	4638      	mov	r0, r7
 800d2fa:	f7ff ff0b 	bl	800d114 <__multiply>
 800d2fe:	6020      	str	r0, [r4, #0]
 800d300:	f8c0 9000 	str.w	r9, [r0]
 800d304:	4604      	mov	r4, r0
 800d306:	e7e4      	b.n	800d2d2 <__pow5mult+0x6a>
 800d308:	4630      	mov	r0, r6
 800d30a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d30e:	bf00      	nop
 800d310:	080104b4 	.word	0x080104b4
 800d314:	08010379 	.word	0x08010379
 800d318:	08010459 	.word	0x08010459

0800d31c <__lshift>:
 800d31c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d320:	460c      	mov	r4, r1
 800d322:	6849      	ldr	r1, [r1, #4]
 800d324:	6923      	ldr	r3, [r4, #16]
 800d326:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d32a:	68a3      	ldr	r3, [r4, #8]
 800d32c:	4607      	mov	r7, r0
 800d32e:	4691      	mov	r9, r2
 800d330:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d334:	f108 0601 	add.w	r6, r8, #1
 800d338:	42b3      	cmp	r3, r6
 800d33a:	db0b      	blt.n	800d354 <__lshift+0x38>
 800d33c:	4638      	mov	r0, r7
 800d33e:	f7ff fd95 	bl	800ce6c <_Balloc>
 800d342:	4605      	mov	r5, r0
 800d344:	b948      	cbnz	r0, 800d35a <__lshift+0x3e>
 800d346:	4602      	mov	r2, r0
 800d348:	4b28      	ldr	r3, [pc, #160]	@ (800d3ec <__lshift+0xd0>)
 800d34a:	4829      	ldr	r0, [pc, #164]	@ (800d3f0 <__lshift+0xd4>)
 800d34c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800d350:	f001 f874 	bl	800e43c <__assert_func>
 800d354:	3101      	adds	r1, #1
 800d356:	005b      	lsls	r3, r3, #1
 800d358:	e7ee      	b.n	800d338 <__lshift+0x1c>
 800d35a:	2300      	movs	r3, #0
 800d35c:	f100 0114 	add.w	r1, r0, #20
 800d360:	f100 0210 	add.w	r2, r0, #16
 800d364:	4618      	mov	r0, r3
 800d366:	4553      	cmp	r3, sl
 800d368:	db33      	blt.n	800d3d2 <__lshift+0xb6>
 800d36a:	6920      	ldr	r0, [r4, #16]
 800d36c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d370:	f104 0314 	add.w	r3, r4, #20
 800d374:	f019 091f 	ands.w	r9, r9, #31
 800d378:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d37c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d380:	d02b      	beq.n	800d3da <__lshift+0xbe>
 800d382:	f1c9 0e20 	rsb	lr, r9, #32
 800d386:	468a      	mov	sl, r1
 800d388:	2200      	movs	r2, #0
 800d38a:	6818      	ldr	r0, [r3, #0]
 800d38c:	fa00 f009 	lsl.w	r0, r0, r9
 800d390:	4310      	orrs	r0, r2
 800d392:	f84a 0b04 	str.w	r0, [sl], #4
 800d396:	f853 2b04 	ldr.w	r2, [r3], #4
 800d39a:	459c      	cmp	ip, r3
 800d39c:	fa22 f20e 	lsr.w	r2, r2, lr
 800d3a0:	d8f3      	bhi.n	800d38a <__lshift+0x6e>
 800d3a2:	ebac 0304 	sub.w	r3, ip, r4
 800d3a6:	3b15      	subs	r3, #21
 800d3a8:	f023 0303 	bic.w	r3, r3, #3
 800d3ac:	3304      	adds	r3, #4
 800d3ae:	f104 0015 	add.w	r0, r4, #21
 800d3b2:	4584      	cmp	ip, r0
 800d3b4:	bf38      	it	cc
 800d3b6:	2304      	movcc	r3, #4
 800d3b8:	50ca      	str	r2, [r1, r3]
 800d3ba:	b10a      	cbz	r2, 800d3c0 <__lshift+0xa4>
 800d3bc:	f108 0602 	add.w	r6, r8, #2
 800d3c0:	3e01      	subs	r6, #1
 800d3c2:	4638      	mov	r0, r7
 800d3c4:	612e      	str	r6, [r5, #16]
 800d3c6:	4621      	mov	r1, r4
 800d3c8:	f7ff fd90 	bl	800ceec <_Bfree>
 800d3cc:	4628      	mov	r0, r5
 800d3ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d3d2:	f842 0f04 	str.w	r0, [r2, #4]!
 800d3d6:	3301      	adds	r3, #1
 800d3d8:	e7c5      	b.n	800d366 <__lshift+0x4a>
 800d3da:	3904      	subs	r1, #4
 800d3dc:	f853 2b04 	ldr.w	r2, [r3], #4
 800d3e0:	f841 2f04 	str.w	r2, [r1, #4]!
 800d3e4:	459c      	cmp	ip, r3
 800d3e6:	d8f9      	bhi.n	800d3dc <__lshift+0xc0>
 800d3e8:	e7ea      	b.n	800d3c0 <__lshift+0xa4>
 800d3ea:	bf00      	nop
 800d3ec:	080103e8 	.word	0x080103e8
 800d3f0:	08010459 	.word	0x08010459

0800d3f4 <__mcmp>:
 800d3f4:	690a      	ldr	r2, [r1, #16]
 800d3f6:	4603      	mov	r3, r0
 800d3f8:	6900      	ldr	r0, [r0, #16]
 800d3fa:	1a80      	subs	r0, r0, r2
 800d3fc:	b530      	push	{r4, r5, lr}
 800d3fe:	d10e      	bne.n	800d41e <__mcmp+0x2a>
 800d400:	3314      	adds	r3, #20
 800d402:	3114      	adds	r1, #20
 800d404:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800d408:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800d40c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800d410:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800d414:	4295      	cmp	r5, r2
 800d416:	d003      	beq.n	800d420 <__mcmp+0x2c>
 800d418:	d205      	bcs.n	800d426 <__mcmp+0x32>
 800d41a:	f04f 30ff 	mov.w	r0, #4294967295
 800d41e:	bd30      	pop	{r4, r5, pc}
 800d420:	42a3      	cmp	r3, r4
 800d422:	d3f3      	bcc.n	800d40c <__mcmp+0x18>
 800d424:	e7fb      	b.n	800d41e <__mcmp+0x2a>
 800d426:	2001      	movs	r0, #1
 800d428:	e7f9      	b.n	800d41e <__mcmp+0x2a>
	...

0800d42c <__mdiff>:
 800d42c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d430:	4689      	mov	r9, r1
 800d432:	4606      	mov	r6, r0
 800d434:	4611      	mov	r1, r2
 800d436:	4648      	mov	r0, r9
 800d438:	4614      	mov	r4, r2
 800d43a:	f7ff ffdb 	bl	800d3f4 <__mcmp>
 800d43e:	1e05      	subs	r5, r0, #0
 800d440:	d112      	bne.n	800d468 <__mdiff+0x3c>
 800d442:	4629      	mov	r1, r5
 800d444:	4630      	mov	r0, r6
 800d446:	f7ff fd11 	bl	800ce6c <_Balloc>
 800d44a:	4602      	mov	r2, r0
 800d44c:	b928      	cbnz	r0, 800d45a <__mdiff+0x2e>
 800d44e:	4b3f      	ldr	r3, [pc, #252]	@ (800d54c <__mdiff+0x120>)
 800d450:	f240 2137 	movw	r1, #567	@ 0x237
 800d454:	483e      	ldr	r0, [pc, #248]	@ (800d550 <__mdiff+0x124>)
 800d456:	f000 fff1 	bl	800e43c <__assert_func>
 800d45a:	2301      	movs	r3, #1
 800d45c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d460:	4610      	mov	r0, r2
 800d462:	b003      	add	sp, #12
 800d464:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d468:	bfbc      	itt	lt
 800d46a:	464b      	movlt	r3, r9
 800d46c:	46a1      	movlt	r9, r4
 800d46e:	4630      	mov	r0, r6
 800d470:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800d474:	bfba      	itte	lt
 800d476:	461c      	movlt	r4, r3
 800d478:	2501      	movlt	r5, #1
 800d47a:	2500      	movge	r5, #0
 800d47c:	f7ff fcf6 	bl	800ce6c <_Balloc>
 800d480:	4602      	mov	r2, r0
 800d482:	b918      	cbnz	r0, 800d48c <__mdiff+0x60>
 800d484:	4b31      	ldr	r3, [pc, #196]	@ (800d54c <__mdiff+0x120>)
 800d486:	f240 2145 	movw	r1, #581	@ 0x245
 800d48a:	e7e3      	b.n	800d454 <__mdiff+0x28>
 800d48c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800d490:	6926      	ldr	r6, [r4, #16]
 800d492:	60c5      	str	r5, [r0, #12]
 800d494:	f109 0310 	add.w	r3, r9, #16
 800d498:	f109 0514 	add.w	r5, r9, #20
 800d49c:	f104 0e14 	add.w	lr, r4, #20
 800d4a0:	f100 0b14 	add.w	fp, r0, #20
 800d4a4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800d4a8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800d4ac:	9301      	str	r3, [sp, #4]
 800d4ae:	46d9      	mov	r9, fp
 800d4b0:	f04f 0c00 	mov.w	ip, #0
 800d4b4:	9b01      	ldr	r3, [sp, #4]
 800d4b6:	f85e 0b04 	ldr.w	r0, [lr], #4
 800d4ba:	f853 af04 	ldr.w	sl, [r3, #4]!
 800d4be:	9301      	str	r3, [sp, #4]
 800d4c0:	fa1f f38a 	uxth.w	r3, sl
 800d4c4:	4619      	mov	r1, r3
 800d4c6:	b283      	uxth	r3, r0
 800d4c8:	1acb      	subs	r3, r1, r3
 800d4ca:	0c00      	lsrs	r0, r0, #16
 800d4cc:	4463      	add	r3, ip
 800d4ce:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800d4d2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800d4d6:	b29b      	uxth	r3, r3
 800d4d8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800d4dc:	4576      	cmp	r6, lr
 800d4de:	f849 3b04 	str.w	r3, [r9], #4
 800d4e2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d4e6:	d8e5      	bhi.n	800d4b4 <__mdiff+0x88>
 800d4e8:	1b33      	subs	r3, r6, r4
 800d4ea:	3b15      	subs	r3, #21
 800d4ec:	f023 0303 	bic.w	r3, r3, #3
 800d4f0:	3415      	adds	r4, #21
 800d4f2:	3304      	adds	r3, #4
 800d4f4:	42a6      	cmp	r6, r4
 800d4f6:	bf38      	it	cc
 800d4f8:	2304      	movcc	r3, #4
 800d4fa:	441d      	add	r5, r3
 800d4fc:	445b      	add	r3, fp
 800d4fe:	461e      	mov	r6, r3
 800d500:	462c      	mov	r4, r5
 800d502:	4544      	cmp	r4, r8
 800d504:	d30e      	bcc.n	800d524 <__mdiff+0xf8>
 800d506:	f108 0103 	add.w	r1, r8, #3
 800d50a:	1b49      	subs	r1, r1, r5
 800d50c:	f021 0103 	bic.w	r1, r1, #3
 800d510:	3d03      	subs	r5, #3
 800d512:	45a8      	cmp	r8, r5
 800d514:	bf38      	it	cc
 800d516:	2100      	movcc	r1, #0
 800d518:	440b      	add	r3, r1
 800d51a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d51e:	b191      	cbz	r1, 800d546 <__mdiff+0x11a>
 800d520:	6117      	str	r7, [r2, #16]
 800d522:	e79d      	b.n	800d460 <__mdiff+0x34>
 800d524:	f854 1b04 	ldr.w	r1, [r4], #4
 800d528:	46e6      	mov	lr, ip
 800d52a:	0c08      	lsrs	r0, r1, #16
 800d52c:	fa1c fc81 	uxtah	ip, ip, r1
 800d530:	4471      	add	r1, lr
 800d532:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800d536:	b289      	uxth	r1, r1
 800d538:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800d53c:	f846 1b04 	str.w	r1, [r6], #4
 800d540:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d544:	e7dd      	b.n	800d502 <__mdiff+0xd6>
 800d546:	3f01      	subs	r7, #1
 800d548:	e7e7      	b.n	800d51a <__mdiff+0xee>
 800d54a:	bf00      	nop
 800d54c:	080103e8 	.word	0x080103e8
 800d550:	08010459 	.word	0x08010459

0800d554 <__ulp>:
 800d554:	b082      	sub	sp, #8
 800d556:	ed8d 0b00 	vstr	d0, [sp]
 800d55a:	9a01      	ldr	r2, [sp, #4]
 800d55c:	4b0f      	ldr	r3, [pc, #60]	@ (800d59c <__ulp+0x48>)
 800d55e:	4013      	ands	r3, r2
 800d560:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800d564:	2b00      	cmp	r3, #0
 800d566:	dc08      	bgt.n	800d57a <__ulp+0x26>
 800d568:	425b      	negs	r3, r3
 800d56a:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800d56e:	ea4f 5223 	mov.w	r2, r3, asr #20
 800d572:	da04      	bge.n	800d57e <__ulp+0x2a>
 800d574:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800d578:	4113      	asrs	r3, r2
 800d57a:	2200      	movs	r2, #0
 800d57c:	e008      	b.n	800d590 <__ulp+0x3c>
 800d57e:	f1a2 0314 	sub.w	r3, r2, #20
 800d582:	2b1e      	cmp	r3, #30
 800d584:	bfda      	itte	le
 800d586:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800d58a:	40da      	lsrle	r2, r3
 800d58c:	2201      	movgt	r2, #1
 800d58e:	2300      	movs	r3, #0
 800d590:	4619      	mov	r1, r3
 800d592:	4610      	mov	r0, r2
 800d594:	ec41 0b10 	vmov	d0, r0, r1
 800d598:	b002      	add	sp, #8
 800d59a:	4770      	bx	lr
 800d59c:	7ff00000 	.word	0x7ff00000

0800d5a0 <__b2d>:
 800d5a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d5a4:	6906      	ldr	r6, [r0, #16]
 800d5a6:	f100 0814 	add.w	r8, r0, #20
 800d5aa:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800d5ae:	1f37      	subs	r7, r6, #4
 800d5b0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800d5b4:	4610      	mov	r0, r2
 800d5b6:	f7ff fd4b 	bl	800d050 <__hi0bits>
 800d5ba:	f1c0 0320 	rsb	r3, r0, #32
 800d5be:	280a      	cmp	r0, #10
 800d5c0:	600b      	str	r3, [r1, #0]
 800d5c2:	491b      	ldr	r1, [pc, #108]	@ (800d630 <__b2d+0x90>)
 800d5c4:	dc15      	bgt.n	800d5f2 <__b2d+0x52>
 800d5c6:	f1c0 0c0b 	rsb	ip, r0, #11
 800d5ca:	fa22 f30c 	lsr.w	r3, r2, ip
 800d5ce:	45b8      	cmp	r8, r7
 800d5d0:	ea43 0501 	orr.w	r5, r3, r1
 800d5d4:	bf34      	ite	cc
 800d5d6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800d5da:	2300      	movcs	r3, #0
 800d5dc:	3015      	adds	r0, #21
 800d5de:	fa02 f000 	lsl.w	r0, r2, r0
 800d5e2:	fa23 f30c 	lsr.w	r3, r3, ip
 800d5e6:	4303      	orrs	r3, r0
 800d5e8:	461c      	mov	r4, r3
 800d5ea:	ec45 4b10 	vmov	d0, r4, r5
 800d5ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d5f2:	45b8      	cmp	r8, r7
 800d5f4:	bf3a      	itte	cc
 800d5f6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800d5fa:	f1a6 0708 	subcc.w	r7, r6, #8
 800d5fe:	2300      	movcs	r3, #0
 800d600:	380b      	subs	r0, #11
 800d602:	d012      	beq.n	800d62a <__b2d+0x8a>
 800d604:	f1c0 0120 	rsb	r1, r0, #32
 800d608:	fa23 f401 	lsr.w	r4, r3, r1
 800d60c:	4082      	lsls	r2, r0
 800d60e:	4322      	orrs	r2, r4
 800d610:	4547      	cmp	r7, r8
 800d612:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800d616:	bf8c      	ite	hi
 800d618:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800d61c:	2200      	movls	r2, #0
 800d61e:	4083      	lsls	r3, r0
 800d620:	40ca      	lsrs	r2, r1
 800d622:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800d626:	4313      	orrs	r3, r2
 800d628:	e7de      	b.n	800d5e8 <__b2d+0x48>
 800d62a:	ea42 0501 	orr.w	r5, r2, r1
 800d62e:	e7db      	b.n	800d5e8 <__b2d+0x48>
 800d630:	3ff00000 	.word	0x3ff00000

0800d634 <__d2b>:
 800d634:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d638:	460f      	mov	r7, r1
 800d63a:	2101      	movs	r1, #1
 800d63c:	ec59 8b10 	vmov	r8, r9, d0
 800d640:	4616      	mov	r6, r2
 800d642:	f7ff fc13 	bl	800ce6c <_Balloc>
 800d646:	4604      	mov	r4, r0
 800d648:	b930      	cbnz	r0, 800d658 <__d2b+0x24>
 800d64a:	4602      	mov	r2, r0
 800d64c:	4b23      	ldr	r3, [pc, #140]	@ (800d6dc <__d2b+0xa8>)
 800d64e:	4824      	ldr	r0, [pc, #144]	@ (800d6e0 <__d2b+0xac>)
 800d650:	f240 310f 	movw	r1, #783	@ 0x30f
 800d654:	f000 fef2 	bl	800e43c <__assert_func>
 800d658:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800d65c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d660:	b10d      	cbz	r5, 800d666 <__d2b+0x32>
 800d662:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d666:	9301      	str	r3, [sp, #4]
 800d668:	f1b8 0300 	subs.w	r3, r8, #0
 800d66c:	d023      	beq.n	800d6b6 <__d2b+0x82>
 800d66e:	4668      	mov	r0, sp
 800d670:	9300      	str	r3, [sp, #0]
 800d672:	f7ff fd0c 	bl	800d08e <__lo0bits>
 800d676:	e9dd 1200 	ldrd	r1, r2, [sp]
 800d67a:	b1d0      	cbz	r0, 800d6b2 <__d2b+0x7e>
 800d67c:	f1c0 0320 	rsb	r3, r0, #32
 800d680:	fa02 f303 	lsl.w	r3, r2, r3
 800d684:	430b      	orrs	r3, r1
 800d686:	40c2      	lsrs	r2, r0
 800d688:	6163      	str	r3, [r4, #20]
 800d68a:	9201      	str	r2, [sp, #4]
 800d68c:	9b01      	ldr	r3, [sp, #4]
 800d68e:	61a3      	str	r3, [r4, #24]
 800d690:	2b00      	cmp	r3, #0
 800d692:	bf0c      	ite	eq
 800d694:	2201      	moveq	r2, #1
 800d696:	2202      	movne	r2, #2
 800d698:	6122      	str	r2, [r4, #16]
 800d69a:	b1a5      	cbz	r5, 800d6c6 <__d2b+0x92>
 800d69c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800d6a0:	4405      	add	r5, r0
 800d6a2:	603d      	str	r5, [r7, #0]
 800d6a4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800d6a8:	6030      	str	r0, [r6, #0]
 800d6aa:	4620      	mov	r0, r4
 800d6ac:	b003      	add	sp, #12
 800d6ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d6b2:	6161      	str	r1, [r4, #20]
 800d6b4:	e7ea      	b.n	800d68c <__d2b+0x58>
 800d6b6:	a801      	add	r0, sp, #4
 800d6b8:	f7ff fce9 	bl	800d08e <__lo0bits>
 800d6bc:	9b01      	ldr	r3, [sp, #4]
 800d6be:	6163      	str	r3, [r4, #20]
 800d6c0:	3020      	adds	r0, #32
 800d6c2:	2201      	movs	r2, #1
 800d6c4:	e7e8      	b.n	800d698 <__d2b+0x64>
 800d6c6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d6ca:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800d6ce:	6038      	str	r0, [r7, #0]
 800d6d0:	6918      	ldr	r0, [r3, #16]
 800d6d2:	f7ff fcbd 	bl	800d050 <__hi0bits>
 800d6d6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d6da:	e7e5      	b.n	800d6a8 <__d2b+0x74>
 800d6dc:	080103e8 	.word	0x080103e8
 800d6e0:	08010459 	.word	0x08010459

0800d6e4 <__ratio>:
 800d6e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d6e8:	b085      	sub	sp, #20
 800d6ea:	e9cd 1000 	strd	r1, r0, [sp]
 800d6ee:	a902      	add	r1, sp, #8
 800d6f0:	f7ff ff56 	bl	800d5a0 <__b2d>
 800d6f4:	9800      	ldr	r0, [sp, #0]
 800d6f6:	a903      	add	r1, sp, #12
 800d6f8:	ec55 4b10 	vmov	r4, r5, d0
 800d6fc:	f7ff ff50 	bl	800d5a0 <__b2d>
 800d700:	9b01      	ldr	r3, [sp, #4]
 800d702:	6919      	ldr	r1, [r3, #16]
 800d704:	9b00      	ldr	r3, [sp, #0]
 800d706:	691b      	ldr	r3, [r3, #16]
 800d708:	1ac9      	subs	r1, r1, r3
 800d70a:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800d70e:	1a9b      	subs	r3, r3, r2
 800d710:	ec5b ab10 	vmov	sl, fp, d0
 800d714:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800d718:	2b00      	cmp	r3, #0
 800d71a:	bfce      	itee	gt
 800d71c:	462a      	movgt	r2, r5
 800d71e:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800d722:	465a      	movle	r2, fp
 800d724:	462f      	mov	r7, r5
 800d726:	46d9      	mov	r9, fp
 800d728:	bfcc      	ite	gt
 800d72a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800d72e:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800d732:	464b      	mov	r3, r9
 800d734:	4652      	mov	r2, sl
 800d736:	4620      	mov	r0, r4
 800d738:	4639      	mov	r1, r7
 800d73a:	f7f3 f897 	bl	800086c <__aeabi_ddiv>
 800d73e:	ec41 0b10 	vmov	d0, r0, r1
 800d742:	b005      	add	sp, #20
 800d744:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d748 <__copybits>:
 800d748:	3901      	subs	r1, #1
 800d74a:	b570      	push	{r4, r5, r6, lr}
 800d74c:	1149      	asrs	r1, r1, #5
 800d74e:	6914      	ldr	r4, [r2, #16]
 800d750:	3101      	adds	r1, #1
 800d752:	f102 0314 	add.w	r3, r2, #20
 800d756:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800d75a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800d75e:	1f05      	subs	r5, r0, #4
 800d760:	42a3      	cmp	r3, r4
 800d762:	d30c      	bcc.n	800d77e <__copybits+0x36>
 800d764:	1aa3      	subs	r3, r4, r2
 800d766:	3b11      	subs	r3, #17
 800d768:	f023 0303 	bic.w	r3, r3, #3
 800d76c:	3211      	adds	r2, #17
 800d76e:	42a2      	cmp	r2, r4
 800d770:	bf88      	it	hi
 800d772:	2300      	movhi	r3, #0
 800d774:	4418      	add	r0, r3
 800d776:	2300      	movs	r3, #0
 800d778:	4288      	cmp	r0, r1
 800d77a:	d305      	bcc.n	800d788 <__copybits+0x40>
 800d77c:	bd70      	pop	{r4, r5, r6, pc}
 800d77e:	f853 6b04 	ldr.w	r6, [r3], #4
 800d782:	f845 6f04 	str.w	r6, [r5, #4]!
 800d786:	e7eb      	b.n	800d760 <__copybits+0x18>
 800d788:	f840 3b04 	str.w	r3, [r0], #4
 800d78c:	e7f4      	b.n	800d778 <__copybits+0x30>

0800d78e <__any_on>:
 800d78e:	f100 0214 	add.w	r2, r0, #20
 800d792:	6900      	ldr	r0, [r0, #16]
 800d794:	114b      	asrs	r3, r1, #5
 800d796:	4298      	cmp	r0, r3
 800d798:	b510      	push	{r4, lr}
 800d79a:	db11      	blt.n	800d7c0 <__any_on+0x32>
 800d79c:	dd0a      	ble.n	800d7b4 <__any_on+0x26>
 800d79e:	f011 011f 	ands.w	r1, r1, #31
 800d7a2:	d007      	beq.n	800d7b4 <__any_on+0x26>
 800d7a4:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800d7a8:	fa24 f001 	lsr.w	r0, r4, r1
 800d7ac:	fa00 f101 	lsl.w	r1, r0, r1
 800d7b0:	428c      	cmp	r4, r1
 800d7b2:	d10b      	bne.n	800d7cc <__any_on+0x3e>
 800d7b4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d7b8:	4293      	cmp	r3, r2
 800d7ba:	d803      	bhi.n	800d7c4 <__any_on+0x36>
 800d7bc:	2000      	movs	r0, #0
 800d7be:	bd10      	pop	{r4, pc}
 800d7c0:	4603      	mov	r3, r0
 800d7c2:	e7f7      	b.n	800d7b4 <__any_on+0x26>
 800d7c4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d7c8:	2900      	cmp	r1, #0
 800d7ca:	d0f5      	beq.n	800d7b8 <__any_on+0x2a>
 800d7cc:	2001      	movs	r0, #1
 800d7ce:	e7f6      	b.n	800d7be <__any_on+0x30>

0800d7d0 <_strtoul_l.constprop.0>:
 800d7d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d7d4:	4e34      	ldr	r6, [pc, #208]	@ (800d8a8 <_strtoul_l.constprop.0+0xd8>)
 800d7d6:	4686      	mov	lr, r0
 800d7d8:	460d      	mov	r5, r1
 800d7da:	4628      	mov	r0, r5
 800d7dc:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d7e0:	5d37      	ldrb	r7, [r6, r4]
 800d7e2:	f017 0708 	ands.w	r7, r7, #8
 800d7e6:	d1f8      	bne.n	800d7da <_strtoul_l.constprop.0+0xa>
 800d7e8:	2c2d      	cmp	r4, #45	@ 0x2d
 800d7ea:	d12f      	bne.n	800d84c <_strtoul_l.constprop.0+0x7c>
 800d7ec:	782c      	ldrb	r4, [r5, #0]
 800d7ee:	2701      	movs	r7, #1
 800d7f0:	1c85      	adds	r5, r0, #2
 800d7f2:	f033 0010 	bics.w	r0, r3, #16
 800d7f6:	d109      	bne.n	800d80c <_strtoul_l.constprop.0+0x3c>
 800d7f8:	2c30      	cmp	r4, #48	@ 0x30
 800d7fa:	d12c      	bne.n	800d856 <_strtoul_l.constprop.0+0x86>
 800d7fc:	7828      	ldrb	r0, [r5, #0]
 800d7fe:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 800d802:	2858      	cmp	r0, #88	@ 0x58
 800d804:	d127      	bne.n	800d856 <_strtoul_l.constprop.0+0x86>
 800d806:	786c      	ldrb	r4, [r5, #1]
 800d808:	2310      	movs	r3, #16
 800d80a:	3502      	adds	r5, #2
 800d80c:	f04f 38ff 	mov.w	r8, #4294967295
 800d810:	2600      	movs	r6, #0
 800d812:	fbb8 f8f3 	udiv	r8, r8, r3
 800d816:	fb03 f908 	mul.w	r9, r3, r8
 800d81a:	ea6f 0909 	mvn.w	r9, r9
 800d81e:	4630      	mov	r0, r6
 800d820:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 800d824:	f1bc 0f09 	cmp.w	ip, #9
 800d828:	d81c      	bhi.n	800d864 <_strtoul_l.constprop.0+0x94>
 800d82a:	4664      	mov	r4, ip
 800d82c:	42a3      	cmp	r3, r4
 800d82e:	dd2a      	ble.n	800d886 <_strtoul_l.constprop.0+0xb6>
 800d830:	f1b6 3fff 	cmp.w	r6, #4294967295
 800d834:	d007      	beq.n	800d846 <_strtoul_l.constprop.0+0x76>
 800d836:	4580      	cmp	r8, r0
 800d838:	d322      	bcc.n	800d880 <_strtoul_l.constprop.0+0xb0>
 800d83a:	d101      	bne.n	800d840 <_strtoul_l.constprop.0+0x70>
 800d83c:	45a1      	cmp	r9, r4
 800d83e:	db1f      	blt.n	800d880 <_strtoul_l.constprop.0+0xb0>
 800d840:	fb00 4003 	mla	r0, r0, r3, r4
 800d844:	2601      	movs	r6, #1
 800d846:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d84a:	e7e9      	b.n	800d820 <_strtoul_l.constprop.0+0x50>
 800d84c:	2c2b      	cmp	r4, #43	@ 0x2b
 800d84e:	bf04      	itt	eq
 800d850:	782c      	ldrbeq	r4, [r5, #0]
 800d852:	1c85      	addeq	r5, r0, #2
 800d854:	e7cd      	b.n	800d7f2 <_strtoul_l.constprop.0+0x22>
 800d856:	2b00      	cmp	r3, #0
 800d858:	d1d8      	bne.n	800d80c <_strtoul_l.constprop.0+0x3c>
 800d85a:	2c30      	cmp	r4, #48	@ 0x30
 800d85c:	bf0c      	ite	eq
 800d85e:	2308      	moveq	r3, #8
 800d860:	230a      	movne	r3, #10
 800d862:	e7d3      	b.n	800d80c <_strtoul_l.constprop.0+0x3c>
 800d864:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 800d868:	f1bc 0f19 	cmp.w	ip, #25
 800d86c:	d801      	bhi.n	800d872 <_strtoul_l.constprop.0+0xa2>
 800d86e:	3c37      	subs	r4, #55	@ 0x37
 800d870:	e7dc      	b.n	800d82c <_strtoul_l.constprop.0+0x5c>
 800d872:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 800d876:	f1bc 0f19 	cmp.w	ip, #25
 800d87a:	d804      	bhi.n	800d886 <_strtoul_l.constprop.0+0xb6>
 800d87c:	3c57      	subs	r4, #87	@ 0x57
 800d87e:	e7d5      	b.n	800d82c <_strtoul_l.constprop.0+0x5c>
 800d880:	f04f 36ff 	mov.w	r6, #4294967295
 800d884:	e7df      	b.n	800d846 <_strtoul_l.constprop.0+0x76>
 800d886:	1c73      	adds	r3, r6, #1
 800d888:	d106      	bne.n	800d898 <_strtoul_l.constprop.0+0xc8>
 800d88a:	2322      	movs	r3, #34	@ 0x22
 800d88c:	f8ce 3000 	str.w	r3, [lr]
 800d890:	4630      	mov	r0, r6
 800d892:	b932      	cbnz	r2, 800d8a2 <_strtoul_l.constprop.0+0xd2>
 800d894:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d898:	b107      	cbz	r7, 800d89c <_strtoul_l.constprop.0+0xcc>
 800d89a:	4240      	negs	r0, r0
 800d89c:	2a00      	cmp	r2, #0
 800d89e:	d0f9      	beq.n	800d894 <_strtoul_l.constprop.0+0xc4>
 800d8a0:	b106      	cbz	r6, 800d8a4 <_strtoul_l.constprop.0+0xd4>
 800d8a2:	1e69      	subs	r1, r5, #1
 800d8a4:	6011      	str	r1, [r2, #0]
 800d8a6:	e7f5      	b.n	800d894 <_strtoul_l.constprop.0+0xc4>
 800d8a8:	08010181 	.word	0x08010181

0800d8ac <_strtoul_r>:
 800d8ac:	f7ff bf90 	b.w	800d7d0 <_strtoul_l.constprop.0>

0800d8b0 <strtoul>:
 800d8b0:	4613      	mov	r3, r2
 800d8b2:	460a      	mov	r2, r1
 800d8b4:	4601      	mov	r1, r0
 800d8b6:	4802      	ldr	r0, [pc, #8]	@ (800d8c0 <strtoul+0x10>)
 800d8b8:	6800      	ldr	r0, [r0, #0]
 800d8ba:	f7ff bf89 	b.w	800d7d0 <_strtoul_l.constprop.0>
 800d8be:	bf00      	nop
 800d8c0:	2000019c 	.word	0x2000019c

0800d8c4 <__ascii_wctomb>:
 800d8c4:	4603      	mov	r3, r0
 800d8c6:	4608      	mov	r0, r1
 800d8c8:	b141      	cbz	r1, 800d8dc <__ascii_wctomb+0x18>
 800d8ca:	2aff      	cmp	r2, #255	@ 0xff
 800d8cc:	d904      	bls.n	800d8d8 <__ascii_wctomb+0x14>
 800d8ce:	228a      	movs	r2, #138	@ 0x8a
 800d8d0:	601a      	str	r2, [r3, #0]
 800d8d2:	f04f 30ff 	mov.w	r0, #4294967295
 800d8d6:	4770      	bx	lr
 800d8d8:	700a      	strb	r2, [r1, #0]
 800d8da:	2001      	movs	r0, #1
 800d8dc:	4770      	bx	lr

0800d8de <__ssputs_r>:
 800d8de:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d8e2:	688e      	ldr	r6, [r1, #8]
 800d8e4:	461f      	mov	r7, r3
 800d8e6:	42be      	cmp	r6, r7
 800d8e8:	680b      	ldr	r3, [r1, #0]
 800d8ea:	4682      	mov	sl, r0
 800d8ec:	460c      	mov	r4, r1
 800d8ee:	4690      	mov	r8, r2
 800d8f0:	d82d      	bhi.n	800d94e <__ssputs_r+0x70>
 800d8f2:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d8f6:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800d8fa:	d026      	beq.n	800d94a <__ssputs_r+0x6c>
 800d8fc:	6965      	ldr	r5, [r4, #20]
 800d8fe:	6909      	ldr	r1, [r1, #16]
 800d900:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d904:	eba3 0901 	sub.w	r9, r3, r1
 800d908:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d90c:	1c7b      	adds	r3, r7, #1
 800d90e:	444b      	add	r3, r9
 800d910:	106d      	asrs	r5, r5, #1
 800d912:	429d      	cmp	r5, r3
 800d914:	bf38      	it	cc
 800d916:	461d      	movcc	r5, r3
 800d918:	0553      	lsls	r3, r2, #21
 800d91a:	d527      	bpl.n	800d96c <__ssputs_r+0x8e>
 800d91c:	4629      	mov	r1, r5
 800d91e:	f7fb fab7 	bl	8008e90 <_malloc_r>
 800d922:	4606      	mov	r6, r0
 800d924:	b360      	cbz	r0, 800d980 <__ssputs_r+0xa2>
 800d926:	6921      	ldr	r1, [r4, #16]
 800d928:	464a      	mov	r2, r9
 800d92a:	f7fe f850 	bl	800b9ce <memcpy>
 800d92e:	89a3      	ldrh	r3, [r4, #12]
 800d930:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800d934:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d938:	81a3      	strh	r3, [r4, #12]
 800d93a:	6126      	str	r6, [r4, #16]
 800d93c:	6165      	str	r5, [r4, #20]
 800d93e:	444e      	add	r6, r9
 800d940:	eba5 0509 	sub.w	r5, r5, r9
 800d944:	6026      	str	r6, [r4, #0]
 800d946:	60a5      	str	r5, [r4, #8]
 800d948:	463e      	mov	r6, r7
 800d94a:	42be      	cmp	r6, r7
 800d94c:	d900      	bls.n	800d950 <__ssputs_r+0x72>
 800d94e:	463e      	mov	r6, r7
 800d950:	6820      	ldr	r0, [r4, #0]
 800d952:	4632      	mov	r2, r6
 800d954:	4641      	mov	r1, r8
 800d956:	f000 fd52 	bl	800e3fe <memmove>
 800d95a:	68a3      	ldr	r3, [r4, #8]
 800d95c:	1b9b      	subs	r3, r3, r6
 800d95e:	60a3      	str	r3, [r4, #8]
 800d960:	6823      	ldr	r3, [r4, #0]
 800d962:	4433      	add	r3, r6
 800d964:	6023      	str	r3, [r4, #0]
 800d966:	2000      	movs	r0, #0
 800d968:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d96c:	462a      	mov	r2, r5
 800d96e:	f000 fda3 	bl	800e4b8 <_realloc_r>
 800d972:	4606      	mov	r6, r0
 800d974:	2800      	cmp	r0, #0
 800d976:	d1e0      	bne.n	800d93a <__ssputs_r+0x5c>
 800d978:	6921      	ldr	r1, [r4, #16]
 800d97a:	4650      	mov	r0, sl
 800d97c:	f7fe fe9c 	bl	800c6b8 <_free_r>
 800d980:	230c      	movs	r3, #12
 800d982:	f8ca 3000 	str.w	r3, [sl]
 800d986:	89a3      	ldrh	r3, [r4, #12]
 800d988:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d98c:	81a3      	strh	r3, [r4, #12]
 800d98e:	f04f 30ff 	mov.w	r0, #4294967295
 800d992:	e7e9      	b.n	800d968 <__ssputs_r+0x8a>

0800d994 <_svfiprintf_r>:
 800d994:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d998:	4698      	mov	r8, r3
 800d99a:	898b      	ldrh	r3, [r1, #12]
 800d99c:	061b      	lsls	r3, r3, #24
 800d99e:	b09d      	sub	sp, #116	@ 0x74
 800d9a0:	4607      	mov	r7, r0
 800d9a2:	460d      	mov	r5, r1
 800d9a4:	4614      	mov	r4, r2
 800d9a6:	d510      	bpl.n	800d9ca <_svfiprintf_r+0x36>
 800d9a8:	690b      	ldr	r3, [r1, #16]
 800d9aa:	b973      	cbnz	r3, 800d9ca <_svfiprintf_r+0x36>
 800d9ac:	2140      	movs	r1, #64	@ 0x40
 800d9ae:	f7fb fa6f 	bl	8008e90 <_malloc_r>
 800d9b2:	6028      	str	r0, [r5, #0]
 800d9b4:	6128      	str	r0, [r5, #16]
 800d9b6:	b930      	cbnz	r0, 800d9c6 <_svfiprintf_r+0x32>
 800d9b8:	230c      	movs	r3, #12
 800d9ba:	603b      	str	r3, [r7, #0]
 800d9bc:	f04f 30ff 	mov.w	r0, #4294967295
 800d9c0:	b01d      	add	sp, #116	@ 0x74
 800d9c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d9c6:	2340      	movs	r3, #64	@ 0x40
 800d9c8:	616b      	str	r3, [r5, #20]
 800d9ca:	2300      	movs	r3, #0
 800d9cc:	9309      	str	r3, [sp, #36]	@ 0x24
 800d9ce:	2320      	movs	r3, #32
 800d9d0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d9d4:	f8cd 800c 	str.w	r8, [sp, #12]
 800d9d8:	2330      	movs	r3, #48	@ 0x30
 800d9da:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800db78 <_svfiprintf_r+0x1e4>
 800d9de:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d9e2:	f04f 0901 	mov.w	r9, #1
 800d9e6:	4623      	mov	r3, r4
 800d9e8:	469a      	mov	sl, r3
 800d9ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d9ee:	b10a      	cbz	r2, 800d9f4 <_svfiprintf_r+0x60>
 800d9f0:	2a25      	cmp	r2, #37	@ 0x25
 800d9f2:	d1f9      	bne.n	800d9e8 <_svfiprintf_r+0x54>
 800d9f4:	ebba 0b04 	subs.w	fp, sl, r4
 800d9f8:	d00b      	beq.n	800da12 <_svfiprintf_r+0x7e>
 800d9fa:	465b      	mov	r3, fp
 800d9fc:	4622      	mov	r2, r4
 800d9fe:	4629      	mov	r1, r5
 800da00:	4638      	mov	r0, r7
 800da02:	f7ff ff6c 	bl	800d8de <__ssputs_r>
 800da06:	3001      	adds	r0, #1
 800da08:	f000 80a7 	beq.w	800db5a <_svfiprintf_r+0x1c6>
 800da0c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800da0e:	445a      	add	r2, fp
 800da10:	9209      	str	r2, [sp, #36]	@ 0x24
 800da12:	f89a 3000 	ldrb.w	r3, [sl]
 800da16:	2b00      	cmp	r3, #0
 800da18:	f000 809f 	beq.w	800db5a <_svfiprintf_r+0x1c6>
 800da1c:	2300      	movs	r3, #0
 800da1e:	f04f 32ff 	mov.w	r2, #4294967295
 800da22:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800da26:	f10a 0a01 	add.w	sl, sl, #1
 800da2a:	9304      	str	r3, [sp, #16]
 800da2c:	9307      	str	r3, [sp, #28]
 800da2e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800da32:	931a      	str	r3, [sp, #104]	@ 0x68
 800da34:	4654      	mov	r4, sl
 800da36:	2205      	movs	r2, #5
 800da38:	f814 1b01 	ldrb.w	r1, [r4], #1
 800da3c:	484e      	ldr	r0, [pc, #312]	@ (800db78 <_svfiprintf_r+0x1e4>)
 800da3e:	f7f2 fbd7 	bl	80001f0 <memchr>
 800da42:	9a04      	ldr	r2, [sp, #16]
 800da44:	b9d8      	cbnz	r0, 800da7e <_svfiprintf_r+0xea>
 800da46:	06d0      	lsls	r0, r2, #27
 800da48:	bf44      	itt	mi
 800da4a:	2320      	movmi	r3, #32
 800da4c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800da50:	0711      	lsls	r1, r2, #28
 800da52:	bf44      	itt	mi
 800da54:	232b      	movmi	r3, #43	@ 0x2b
 800da56:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800da5a:	f89a 3000 	ldrb.w	r3, [sl]
 800da5e:	2b2a      	cmp	r3, #42	@ 0x2a
 800da60:	d015      	beq.n	800da8e <_svfiprintf_r+0xfa>
 800da62:	9a07      	ldr	r2, [sp, #28]
 800da64:	4654      	mov	r4, sl
 800da66:	2000      	movs	r0, #0
 800da68:	f04f 0c0a 	mov.w	ip, #10
 800da6c:	4621      	mov	r1, r4
 800da6e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800da72:	3b30      	subs	r3, #48	@ 0x30
 800da74:	2b09      	cmp	r3, #9
 800da76:	d94b      	bls.n	800db10 <_svfiprintf_r+0x17c>
 800da78:	b1b0      	cbz	r0, 800daa8 <_svfiprintf_r+0x114>
 800da7a:	9207      	str	r2, [sp, #28]
 800da7c:	e014      	b.n	800daa8 <_svfiprintf_r+0x114>
 800da7e:	eba0 0308 	sub.w	r3, r0, r8
 800da82:	fa09 f303 	lsl.w	r3, r9, r3
 800da86:	4313      	orrs	r3, r2
 800da88:	9304      	str	r3, [sp, #16]
 800da8a:	46a2      	mov	sl, r4
 800da8c:	e7d2      	b.n	800da34 <_svfiprintf_r+0xa0>
 800da8e:	9b03      	ldr	r3, [sp, #12]
 800da90:	1d19      	adds	r1, r3, #4
 800da92:	681b      	ldr	r3, [r3, #0]
 800da94:	9103      	str	r1, [sp, #12]
 800da96:	2b00      	cmp	r3, #0
 800da98:	bfbb      	ittet	lt
 800da9a:	425b      	neglt	r3, r3
 800da9c:	f042 0202 	orrlt.w	r2, r2, #2
 800daa0:	9307      	strge	r3, [sp, #28]
 800daa2:	9307      	strlt	r3, [sp, #28]
 800daa4:	bfb8      	it	lt
 800daa6:	9204      	strlt	r2, [sp, #16]
 800daa8:	7823      	ldrb	r3, [r4, #0]
 800daaa:	2b2e      	cmp	r3, #46	@ 0x2e
 800daac:	d10a      	bne.n	800dac4 <_svfiprintf_r+0x130>
 800daae:	7863      	ldrb	r3, [r4, #1]
 800dab0:	2b2a      	cmp	r3, #42	@ 0x2a
 800dab2:	d132      	bne.n	800db1a <_svfiprintf_r+0x186>
 800dab4:	9b03      	ldr	r3, [sp, #12]
 800dab6:	1d1a      	adds	r2, r3, #4
 800dab8:	681b      	ldr	r3, [r3, #0]
 800daba:	9203      	str	r2, [sp, #12]
 800dabc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800dac0:	3402      	adds	r4, #2
 800dac2:	9305      	str	r3, [sp, #20]
 800dac4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800db88 <_svfiprintf_r+0x1f4>
 800dac8:	7821      	ldrb	r1, [r4, #0]
 800daca:	2203      	movs	r2, #3
 800dacc:	4650      	mov	r0, sl
 800dace:	f7f2 fb8f 	bl	80001f0 <memchr>
 800dad2:	b138      	cbz	r0, 800dae4 <_svfiprintf_r+0x150>
 800dad4:	9b04      	ldr	r3, [sp, #16]
 800dad6:	eba0 000a 	sub.w	r0, r0, sl
 800dada:	2240      	movs	r2, #64	@ 0x40
 800dadc:	4082      	lsls	r2, r0
 800dade:	4313      	orrs	r3, r2
 800dae0:	3401      	adds	r4, #1
 800dae2:	9304      	str	r3, [sp, #16]
 800dae4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dae8:	4824      	ldr	r0, [pc, #144]	@ (800db7c <_svfiprintf_r+0x1e8>)
 800daea:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800daee:	2206      	movs	r2, #6
 800daf0:	f7f2 fb7e 	bl	80001f0 <memchr>
 800daf4:	2800      	cmp	r0, #0
 800daf6:	d036      	beq.n	800db66 <_svfiprintf_r+0x1d2>
 800daf8:	4b21      	ldr	r3, [pc, #132]	@ (800db80 <_svfiprintf_r+0x1ec>)
 800dafa:	bb1b      	cbnz	r3, 800db44 <_svfiprintf_r+0x1b0>
 800dafc:	9b03      	ldr	r3, [sp, #12]
 800dafe:	3307      	adds	r3, #7
 800db00:	f023 0307 	bic.w	r3, r3, #7
 800db04:	3308      	adds	r3, #8
 800db06:	9303      	str	r3, [sp, #12]
 800db08:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800db0a:	4433      	add	r3, r6
 800db0c:	9309      	str	r3, [sp, #36]	@ 0x24
 800db0e:	e76a      	b.n	800d9e6 <_svfiprintf_r+0x52>
 800db10:	fb0c 3202 	mla	r2, ip, r2, r3
 800db14:	460c      	mov	r4, r1
 800db16:	2001      	movs	r0, #1
 800db18:	e7a8      	b.n	800da6c <_svfiprintf_r+0xd8>
 800db1a:	2300      	movs	r3, #0
 800db1c:	3401      	adds	r4, #1
 800db1e:	9305      	str	r3, [sp, #20]
 800db20:	4619      	mov	r1, r3
 800db22:	f04f 0c0a 	mov.w	ip, #10
 800db26:	4620      	mov	r0, r4
 800db28:	f810 2b01 	ldrb.w	r2, [r0], #1
 800db2c:	3a30      	subs	r2, #48	@ 0x30
 800db2e:	2a09      	cmp	r2, #9
 800db30:	d903      	bls.n	800db3a <_svfiprintf_r+0x1a6>
 800db32:	2b00      	cmp	r3, #0
 800db34:	d0c6      	beq.n	800dac4 <_svfiprintf_r+0x130>
 800db36:	9105      	str	r1, [sp, #20]
 800db38:	e7c4      	b.n	800dac4 <_svfiprintf_r+0x130>
 800db3a:	fb0c 2101 	mla	r1, ip, r1, r2
 800db3e:	4604      	mov	r4, r0
 800db40:	2301      	movs	r3, #1
 800db42:	e7f0      	b.n	800db26 <_svfiprintf_r+0x192>
 800db44:	ab03      	add	r3, sp, #12
 800db46:	9300      	str	r3, [sp, #0]
 800db48:	462a      	mov	r2, r5
 800db4a:	4b0e      	ldr	r3, [pc, #56]	@ (800db84 <_svfiprintf_r+0x1f0>)
 800db4c:	a904      	add	r1, sp, #16
 800db4e:	4638      	mov	r0, r7
 800db50:	f7fc f95a 	bl	8009e08 <_printf_float>
 800db54:	1c42      	adds	r2, r0, #1
 800db56:	4606      	mov	r6, r0
 800db58:	d1d6      	bne.n	800db08 <_svfiprintf_r+0x174>
 800db5a:	89ab      	ldrh	r3, [r5, #12]
 800db5c:	065b      	lsls	r3, r3, #25
 800db5e:	f53f af2d 	bmi.w	800d9bc <_svfiprintf_r+0x28>
 800db62:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800db64:	e72c      	b.n	800d9c0 <_svfiprintf_r+0x2c>
 800db66:	ab03      	add	r3, sp, #12
 800db68:	9300      	str	r3, [sp, #0]
 800db6a:	462a      	mov	r2, r5
 800db6c:	4b05      	ldr	r3, [pc, #20]	@ (800db84 <_svfiprintf_r+0x1f0>)
 800db6e:	a904      	add	r1, sp, #16
 800db70:	4638      	mov	r0, r7
 800db72:	f7fc fbe1 	bl	800a338 <_printf_i>
 800db76:	e7ed      	b.n	800db54 <_svfiprintf_r+0x1c0>
 800db78:	080105b0 	.word	0x080105b0
 800db7c:	080105ba 	.word	0x080105ba
 800db80:	08009e09 	.word	0x08009e09
 800db84:	0800d8df 	.word	0x0800d8df
 800db88:	080105b6 	.word	0x080105b6

0800db8c <_sungetc_r>:
 800db8c:	b538      	push	{r3, r4, r5, lr}
 800db8e:	1c4b      	adds	r3, r1, #1
 800db90:	4614      	mov	r4, r2
 800db92:	d103      	bne.n	800db9c <_sungetc_r+0x10>
 800db94:	f04f 35ff 	mov.w	r5, #4294967295
 800db98:	4628      	mov	r0, r5
 800db9a:	bd38      	pop	{r3, r4, r5, pc}
 800db9c:	8993      	ldrh	r3, [r2, #12]
 800db9e:	f023 0320 	bic.w	r3, r3, #32
 800dba2:	8193      	strh	r3, [r2, #12]
 800dba4:	6853      	ldr	r3, [r2, #4]
 800dba6:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800dba8:	b2cd      	uxtb	r5, r1
 800dbaa:	b18a      	cbz	r2, 800dbd0 <_sungetc_r+0x44>
 800dbac:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800dbae:	429a      	cmp	r2, r3
 800dbb0:	dd08      	ble.n	800dbc4 <_sungetc_r+0x38>
 800dbb2:	6823      	ldr	r3, [r4, #0]
 800dbb4:	1e5a      	subs	r2, r3, #1
 800dbb6:	6022      	str	r2, [r4, #0]
 800dbb8:	f803 5c01 	strb.w	r5, [r3, #-1]
 800dbbc:	6863      	ldr	r3, [r4, #4]
 800dbbe:	3301      	adds	r3, #1
 800dbc0:	6063      	str	r3, [r4, #4]
 800dbc2:	e7e9      	b.n	800db98 <_sungetc_r+0xc>
 800dbc4:	4621      	mov	r1, r4
 800dbc6:	f000 fbe0 	bl	800e38a <__submore>
 800dbca:	2800      	cmp	r0, #0
 800dbcc:	d0f1      	beq.n	800dbb2 <_sungetc_r+0x26>
 800dbce:	e7e1      	b.n	800db94 <_sungetc_r+0x8>
 800dbd0:	6921      	ldr	r1, [r4, #16]
 800dbd2:	6822      	ldr	r2, [r4, #0]
 800dbd4:	b141      	cbz	r1, 800dbe8 <_sungetc_r+0x5c>
 800dbd6:	4291      	cmp	r1, r2
 800dbd8:	d206      	bcs.n	800dbe8 <_sungetc_r+0x5c>
 800dbda:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 800dbde:	42a9      	cmp	r1, r5
 800dbe0:	d102      	bne.n	800dbe8 <_sungetc_r+0x5c>
 800dbe2:	3a01      	subs	r2, #1
 800dbe4:	6022      	str	r2, [r4, #0]
 800dbe6:	e7ea      	b.n	800dbbe <_sungetc_r+0x32>
 800dbe8:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 800dbec:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800dbf0:	6363      	str	r3, [r4, #52]	@ 0x34
 800dbf2:	2303      	movs	r3, #3
 800dbf4:	63a3      	str	r3, [r4, #56]	@ 0x38
 800dbf6:	4623      	mov	r3, r4
 800dbf8:	f803 5f46 	strb.w	r5, [r3, #70]!
 800dbfc:	6023      	str	r3, [r4, #0]
 800dbfe:	2301      	movs	r3, #1
 800dc00:	e7de      	b.n	800dbc0 <_sungetc_r+0x34>

0800dc02 <__ssrefill_r>:
 800dc02:	b510      	push	{r4, lr}
 800dc04:	460c      	mov	r4, r1
 800dc06:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800dc08:	b169      	cbz	r1, 800dc26 <__ssrefill_r+0x24>
 800dc0a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800dc0e:	4299      	cmp	r1, r3
 800dc10:	d001      	beq.n	800dc16 <__ssrefill_r+0x14>
 800dc12:	f7fe fd51 	bl	800c6b8 <_free_r>
 800dc16:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800dc18:	6063      	str	r3, [r4, #4]
 800dc1a:	2000      	movs	r0, #0
 800dc1c:	6360      	str	r0, [r4, #52]	@ 0x34
 800dc1e:	b113      	cbz	r3, 800dc26 <__ssrefill_r+0x24>
 800dc20:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800dc22:	6023      	str	r3, [r4, #0]
 800dc24:	bd10      	pop	{r4, pc}
 800dc26:	6923      	ldr	r3, [r4, #16]
 800dc28:	6023      	str	r3, [r4, #0]
 800dc2a:	2300      	movs	r3, #0
 800dc2c:	6063      	str	r3, [r4, #4]
 800dc2e:	89a3      	ldrh	r3, [r4, #12]
 800dc30:	f043 0320 	orr.w	r3, r3, #32
 800dc34:	81a3      	strh	r3, [r4, #12]
 800dc36:	f04f 30ff 	mov.w	r0, #4294967295
 800dc3a:	e7f3      	b.n	800dc24 <__ssrefill_r+0x22>

0800dc3c <__ssvfiscanf_r>:
 800dc3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dc40:	460c      	mov	r4, r1
 800dc42:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 800dc46:	2100      	movs	r1, #0
 800dc48:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 800dc4c:	49a5      	ldr	r1, [pc, #660]	@ (800dee4 <__ssvfiscanf_r+0x2a8>)
 800dc4e:	91a0      	str	r1, [sp, #640]	@ 0x280
 800dc50:	f10d 0804 	add.w	r8, sp, #4
 800dc54:	49a4      	ldr	r1, [pc, #656]	@ (800dee8 <__ssvfiscanf_r+0x2ac>)
 800dc56:	4fa5      	ldr	r7, [pc, #660]	@ (800deec <__ssvfiscanf_r+0x2b0>)
 800dc58:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 800dc5c:	4606      	mov	r6, r0
 800dc5e:	91a1      	str	r1, [sp, #644]	@ 0x284
 800dc60:	9300      	str	r3, [sp, #0]
 800dc62:	7813      	ldrb	r3, [r2, #0]
 800dc64:	2b00      	cmp	r3, #0
 800dc66:	f000 8158 	beq.w	800df1a <__ssvfiscanf_r+0x2de>
 800dc6a:	5cf9      	ldrb	r1, [r7, r3]
 800dc6c:	f011 0108 	ands.w	r1, r1, #8
 800dc70:	f102 0501 	add.w	r5, r2, #1
 800dc74:	d019      	beq.n	800dcaa <__ssvfiscanf_r+0x6e>
 800dc76:	6863      	ldr	r3, [r4, #4]
 800dc78:	2b00      	cmp	r3, #0
 800dc7a:	dd0f      	ble.n	800dc9c <__ssvfiscanf_r+0x60>
 800dc7c:	6823      	ldr	r3, [r4, #0]
 800dc7e:	781a      	ldrb	r2, [r3, #0]
 800dc80:	5cba      	ldrb	r2, [r7, r2]
 800dc82:	0712      	lsls	r2, r2, #28
 800dc84:	d401      	bmi.n	800dc8a <__ssvfiscanf_r+0x4e>
 800dc86:	462a      	mov	r2, r5
 800dc88:	e7eb      	b.n	800dc62 <__ssvfiscanf_r+0x26>
 800dc8a:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800dc8c:	3201      	adds	r2, #1
 800dc8e:	9245      	str	r2, [sp, #276]	@ 0x114
 800dc90:	6862      	ldr	r2, [r4, #4]
 800dc92:	3301      	adds	r3, #1
 800dc94:	3a01      	subs	r2, #1
 800dc96:	6062      	str	r2, [r4, #4]
 800dc98:	6023      	str	r3, [r4, #0]
 800dc9a:	e7ec      	b.n	800dc76 <__ssvfiscanf_r+0x3a>
 800dc9c:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800dc9e:	4621      	mov	r1, r4
 800dca0:	4630      	mov	r0, r6
 800dca2:	4798      	blx	r3
 800dca4:	2800      	cmp	r0, #0
 800dca6:	d0e9      	beq.n	800dc7c <__ssvfiscanf_r+0x40>
 800dca8:	e7ed      	b.n	800dc86 <__ssvfiscanf_r+0x4a>
 800dcaa:	2b25      	cmp	r3, #37	@ 0x25
 800dcac:	d012      	beq.n	800dcd4 <__ssvfiscanf_r+0x98>
 800dcae:	4699      	mov	r9, r3
 800dcb0:	6863      	ldr	r3, [r4, #4]
 800dcb2:	2b00      	cmp	r3, #0
 800dcb4:	f340 8093 	ble.w	800ddde <__ssvfiscanf_r+0x1a2>
 800dcb8:	6822      	ldr	r2, [r4, #0]
 800dcba:	7813      	ldrb	r3, [r2, #0]
 800dcbc:	454b      	cmp	r3, r9
 800dcbe:	f040 812c 	bne.w	800df1a <__ssvfiscanf_r+0x2de>
 800dcc2:	6863      	ldr	r3, [r4, #4]
 800dcc4:	3b01      	subs	r3, #1
 800dcc6:	6063      	str	r3, [r4, #4]
 800dcc8:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 800dcca:	3201      	adds	r2, #1
 800dccc:	3301      	adds	r3, #1
 800dcce:	6022      	str	r2, [r4, #0]
 800dcd0:	9345      	str	r3, [sp, #276]	@ 0x114
 800dcd2:	e7d8      	b.n	800dc86 <__ssvfiscanf_r+0x4a>
 800dcd4:	9141      	str	r1, [sp, #260]	@ 0x104
 800dcd6:	9143      	str	r1, [sp, #268]	@ 0x10c
 800dcd8:	7853      	ldrb	r3, [r2, #1]
 800dcda:	2b2a      	cmp	r3, #42	@ 0x2a
 800dcdc:	bf02      	ittt	eq
 800dcde:	2310      	moveq	r3, #16
 800dce0:	1c95      	addeq	r5, r2, #2
 800dce2:	9341      	streq	r3, [sp, #260]	@ 0x104
 800dce4:	220a      	movs	r2, #10
 800dce6:	46a9      	mov	r9, r5
 800dce8:	f819 1b01 	ldrb.w	r1, [r9], #1
 800dcec:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 800dcf0:	2b09      	cmp	r3, #9
 800dcf2:	d91e      	bls.n	800dd32 <__ssvfiscanf_r+0xf6>
 800dcf4:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 800def0 <__ssvfiscanf_r+0x2b4>
 800dcf8:	2203      	movs	r2, #3
 800dcfa:	4650      	mov	r0, sl
 800dcfc:	f7f2 fa78 	bl	80001f0 <memchr>
 800dd00:	b138      	cbz	r0, 800dd12 <__ssvfiscanf_r+0xd6>
 800dd02:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800dd04:	eba0 000a 	sub.w	r0, r0, sl
 800dd08:	2301      	movs	r3, #1
 800dd0a:	4083      	lsls	r3, r0
 800dd0c:	4313      	orrs	r3, r2
 800dd0e:	9341      	str	r3, [sp, #260]	@ 0x104
 800dd10:	464d      	mov	r5, r9
 800dd12:	f815 3b01 	ldrb.w	r3, [r5], #1
 800dd16:	2b78      	cmp	r3, #120	@ 0x78
 800dd18:	d806      	bhi.n	800dd28 <__ssvfiscanf_r+0xec>
 800dd1a:	2b57      	cmp	r3, #87	@ 0x57
 800dd1c:	d810      	bhi.n	800dd40 <__ssvfiscanf_r+0x104>
 800dd1e:	2b25      	cmp	r3, #37	@ 0x25
 800dd20:	d0c5      	beq.n	800dcae <__ssvfiscanf_r+0x72>
 800dd22:	d857      	bhi.n	800ddd4 <__ssvfiscanf_r+0x198>
 800dd24:	2b00      	cmp	r3, #0
 800dd26:	d065      	beq.n	800ddf4 <__ssvfiscanf_r+0x1b8>
 800dd28:	2303      	movs	r3, #3
 800dd2a:	9347      	str	r3, [sp, #284]	@ 0x11c
 800dd2c:	230a      	movs	r3, #10
 800dd2e:	9342      	str	r3, [sp, #264]	@ 0x108
 800dd30:	e078      	b.n	800de24 <__ssvfiscanf_r+0x1e8>
 800dd32:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 800dd34:	fb02 1103 	mla	r1, r2, r3, r1
 800dd38:	3930      	subs	r1, #48	@ 0x30
 800dd3a:	9143      	str	r1, [sp, #268]	@ 0x10c
 800dd3c:	464d      	mov	r5, r9
 800dd3e:	e7d2      	b.n	800dce6 <__ssvfiscanf_r+0xaa>
 800dd40:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 800dd44:	2a20      	cmp	r2, #32
 800dd46:	d8ef      	bhi.n	800dd28 <__ssvfiscanf_r+0xec>
 800dd48:	a101      	add	r1, pc, #4	@ (adr r1, 800dd50 <__ssvfiscanf_r+0x114>)
 800dd4a:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800dd4e:	bf00      	nop
 800dd50:	0800de03 	.word	0x0800de03
 800dd54:	0800dd29 	.word	0x0800dd29
 800dd58:	0800dd29 	.word	0x0800dd29
 800dd5c:	0800de5d 	.word	0x0800de5d
 800dd60:	0800dd29 	.word	0x0800dd29
 800dd64:	0800dd29 	.word	0x0800dd29
 800dd68:	0800dd29 	.word	0x0800dd29
 800dd6c:	0800dd29 	.word	0x0800dd29
 800dd70:	0800dd29 	.word	0x0800dd29
 800dd74:	0800dd29 	.word	0x0800dd29
 800dd78:	0800dd29 	.word	0x0800dd29
 800dd7c:	0800de73 	.word	0x0800de73
 800dd80:	0800de59 	.word	0x0800de59
 800dd84:	0800dddb 	.word	0x0800dddb
 800dd88:	0800dddb 	.word	0x0800dddb
 800dd8c:	0800dddb 	.word	0x0800dddb
 800dd90:	0800dd29 	.word	0x0800dd29
 800dd94:	0800de15 	.word	0x0800de15
 800dd98:	0800dd29 	.word	0x0800dd29
 800dd9c:	0800dd29 	.word	0x0800dd29
 800dda0:	0800dd29 	.word	0x0800dd29
 800dda4:	0800dd29 	.word	0x0800dd29
 800dda8:	0800de83 	.word	0x0800de83
 800ddac:	0800de1d 	.word	0x0800de1d
 800ddb0:	0800ddfb 	.word	0x0800ddfb
 800ddb4:	0800dd29 	.word	0x0800dd29
 800ddb8:	0800dd29 	.word	0x0800dd29
 800ddbc:	0800de7f 	.word	0x0800de7f
 800ddc0:	0800dd29 	.word	0x0800dd29
 800ddc4:	0800de59 	.word	0x0800de59
 800ddc8:	0800dd29 	.word	0x0800dd29
 800ddcc:	0800dd29 	.word	0x0800dd29
 800ddd0:	0800de03 	.word	0x0800de03
 800ddd4:	3b45      	subs	r3, #69	@ 0x45
 800ddd6:	2b02      	cmp	r3, #2
 800ddd8:	d8a6      	bhi.n	800dd28 <__ssvfiscanf_r+0xec>
 800ddda:	2305      	movs	r3, #5
 800dddc:	e021      	b.n	800de22 <__ssvfiscanf_r+0x1e6>
 800ddde:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800dde0:	4621      	mov	r1, r4
 800dde2:	4630      	mov	r0, r6
 800dde4:	4798      	blx	r3
 800dde6:	2800      	cmp	r0, #0
 800dde8:	f43f af66 	beq.w	800dcb8 <__ssvfiscanf_r+0x7c>
 800ddec:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800ddee:	2800      	cmp	r0, #0
 800ddf0:	f040 808b 	bne.w	800df0a <__ssvfiscanf_r+0x2ce>
 800ddf4:	f04f 30ff 	mov.w	r0, #4294967295
 800ddf8:	e08b      	b.n	800df12 <__ssvfiscanf_r+0x2d6>
 800ddfa:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800ddfc:	f042 0220 	orr.w	r2, r2, #32
 800de00:	9241      	str	r2, [sp, #260]	@ 0x104
 800de02:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800de04:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800de08:	9241      	str	r2, [sp, #260]	@ 0x104
 800de0a:	2210      	movs	r2, #16
 800de0c:	2b6e      	cmp	r3, #110	@ 0x6e
 800de0e:	9242      	str	r2, [sp, #264]	@ 0x108
 800de10:	d902      	bls.n	800de18 <__ssvfiscanf_r+0x1dc>
 800de12:	e005      	b.n	800de20 <__ssvfiscanf_r+0x1e4>
 800de14:	2300      	movs	r3, #0
 800de16:	9342      	str	r3, [sp, #264]	@ 0x108
 800de18:	2303      	movs	r3, #3
 800de1a:	e002      	b.n	800de22 <__ssvfiscanf_r+0x1e6>
 800de1c:	2308      	movs	r3, #8
 800de1e:	9342      	str	r3, [sp, #264]	@ 0x108
 800de20:	2304      	movs	r3, #4
 800de22:	9347      	str	r3, [sp, #284]	@ 0x11c
 800de24:	6863      	ldr	r3, [r4, #4]
 800de26:	2b00      	cmp	r3, #0
 800de28:	dd39      	ble.n	800de9e <__ssvfiscanf_r+0x262>
 800de2a:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800de2c:	0659      	lsls	r1, r3, #25
 800de2e:	d404      	bmi.n	800de3a <__ssvfiscanf_r+0x1fe>
 800de30:	6823      	ldr	r3, [r4, #0]
 800de32:	781a      	ldrb	r2, [r3, #0]
 800de34:	5cba      	ldrb	r2, [r7, r2]
 800de36:	0712      	lsls	r2, r2, #28
 800de38:	d438      	bmi.n	800deac <__ssvfiscanf_r+0x270>
 800de3a:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 800de3c:	2b02      	cmp	r3, #2
 800de3e:	dc47      	bgt.n	800ded0 <__ssvfiscanf_r+0x294>
 800de40:	466b      	mov	r3, sp
 800de42:	4622      	mov	r2, r4
 800de44:	a941      	add	r1, sp, #260	@ 0x104
 800de46:	4630      	mov	r0, r6
 800de48:	f000 f86c 	bl	800df24 <_scanf_chars>
 800de4c:	2801      	cmp	r0, #1
 800de4e:	d064      	beq.n	800df1a <__ssvfiscanf_r+0x2de>
 800de50:	2802      	cmp	r0, #2
 800de52:	f47f af18 	bne.w	800dc86 <__ssvfiscanf_r+0x4a>
 800de56:	e7c9      	b.n	800ddec <__ssvfiscanf_r+0x1b0>
 800de58:	220a      	movs	r2, #10
 800de5a:	e7d7      	b.n	800de0c <__ssvfiscanf_r+0x1d0>
 800de5c:	4629      	mov	r1, r5
 800de5e:	4640      	mov	r0, r8
 800de60:	f000 fa5a 	bl	800e318 <__sccl>
 800de64:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800de66:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800de6a:	9341      	str	r3, [sp, #260]	@ 0x104
 800de6c:	4605      	mov	r5, r0
 800de6e:	2301      	movs	r3, #1
 800de70:	e7d7      	b.n	800de22 <__ssvfiscanf_r+0x1e6>
 800de72:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800de74:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800de78:	9341      	str	r3, [sp, #260]	@ 0x104
 800de7a:	2300      	movs	r3, #0
 800de7c:	e7d1      	b.n	800de22 <__ssvfiscanf_r+0x1e6>
 800de7e:	2302      	movs	r3, #2
 800de80:	e7cf      	b.n	800de22 <__ssvfiscanf_r+0x1e6>
 800de82:	9841      	ldr	r0, [sp, #260]	@ 0x104
 800de84:	06c3      	lsls	r3, r0, #27
 800de86:	f53f aefe 	bmi.w	800dc86 <__ssvfiscanf_r+0x4a>
 800de8a:	9b00      	ldr	r3, [sp, #0]
 800de8c:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800de8e:	1d19      	adds	r1, r3, #4
 800de90:	9100      	str	r1, [sp, #0]
 800de92:	681b      	ldr	r3, [r3, #0]
 800de94:	07c0      	lsls	r0, r0, #31
 800de96:	bf4c      	ite	mi
 800de98:	801a      	strhmi	r2, [r3, #0]
 800de9a:	601a      	strpl	r2, [r3, #0]
 800de9c:	e6f3      	b.n	800dc86 <__ssvfiscanf_r+0x4a>
 800de9e:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800dea0:	4621      	mov	r1, r4
 800dea2:	4630      	mov	r0, r6
 800dea4:	4798      	blx	r3
 800dea6:	2800      	cmp	r0, #0
 800dea8:	d0bf      	beq.n	800de2a <__ssvfiscanf_r+0x1ee>
 800deaa:	e79f      	b.n	800ddec <__ssvfiscanf_r+0x1b0>
 800deac:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800deae:	3201      	adds	r2, #1
 800deb0:	9245      	str	r2, [sp, #276]	@ 0x114
 800deb2:	6862      	ldr	r2, [r4, #4]
 800deb4:	3a01      	subs	r2, #1
 800deb6:	2a00      	cmp	r2, #0
 800deb8:	6062      	str	r2, [r4, #4]
 800deba:	dd02      	ble.n	800dec2 <__ssvfiscanf_r+0x286>
 800debc:	3301      	adds	r3, #1
 800debe:	6023      	str	r3, [r4, #0]
 800dec0:	e7b6      	b.n	800de30 <__ssvfiscanf_r+0x1f4>
 800dec2:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800dec4:	4621      	mov	r1, r4
 800dec6:	4630      	mov	r0, r6
 800dec8:	4798      	blx	r3
 800deca:	2800      	cmp	r0, #0
 800decc:	d0b0      	beq.n	800de30 <__ssvfiscanf_r+0x1f4>
 800dece:	e78d      	b.n	800ddec <__ssvfiscanf_r+0x1b0>
 800ded0:	2b04      	cmp	r3, #4
 800ded2:	dc0f      	bgt.n	800def4 <__ssvfiscanf_r+0x2b8>
 800ded4:	466b      	mov	r3, sp
 800ded6:	4622      	mov	r2, r4
 800ded8:	a941      	add	r1, sp, #260	@ 0x104
 800deda:	4630      	mov	r0, r6
 800dedc:	f000 f87c 	bl	800dfd8 <_scanf_i>
 800dee0:	e7b4      	b.n	800de4c <__ssvfiscanf_r+0x210>
 800dee2:	bf00      	nop
 800dee4:	0800db8d 	.word	0x0800db8d
 800dee8:	0800dc03 	.word	0x0800dc03
 800deec:	08010181 	.word	0x08010181
 800def0:	080105b6 	.word	0x080105b6
 800def4:	4b0a      	ldr	r3, [pc, #40]	@ (800df20 <__ssvfiscanf_r+0x2e4>)
 800def6:	2b00      	cmp	r3, #0
 800def8:	f43f aec5 	beq.w	800dc86 <__ssvfiscanf_r+0x4a>
 800defc:	466b      	mov	r3, sp
 800defe:	4622      	mov	r2, r4
 800df00:	a941      	add	r1, sp, #260	@ 0x104
 800df02:	4630      	mov	r0, r6
 800df04:	f7fc fb38 	bl	800a578 <_scanf_float>
 800df08:	e7a0      	b.n	800de4c <__ssvfiscanf_r+0x210>
 800df0a:	89a3      	ldrh	r3, [r4, #12]
 800df0c:	065b      	lsls	r3, r3, #25
 800df0e:	f53f af71 	bmi.w	800ddf4 <__ssvfiscanf_r+0x1b8>
 800df12:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 800df16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800df1a:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800df1c:	e7f9      	b.n	800df12 <__ssvfiscanf_r+0x2d6>
 800df1e:	bf00      	nop
 800df20:	0800a579 	.word	0x0800a579

0800df24 <_scanf_chars>:
 800df24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800df28:	4615      	mov	r5, r2
 800df2a:	688a      	ldr	r2, [r1, #8]
 800df2c:	4680      	mov	r8, r0
 800df2e:	460c      	mov	r4, r1
 800df30:	b932      	cbnz	r2, 800df40 <_scanf_chars+0x1c>
 800df32:	698a      	ldr	r2, [r1, #24]
 800df34:	2a00      	cmp	r2, #0
 800df36:	bf14      	ite	ne
 800df38:	f04f 32ff 	movne.w	r2, #4294967295
 800df3c:	2201      	moveq	r2, #1
 800df3e:	608a      	str	r2, [r1, #8]
 800df40:	6822      	ldr	r2, [r4, #0]
 800df42:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 800dfd4 <_scanf_chars+0xb0>
 800df46:	06d1      	lsls	r1, r2, #27
 800df48:	bf5f      	itttt	pl
 800df4a:	681a      	ldrpl	r2, [r3, #0]
 800df4c:	1d11      	addpl	r1, r2, #4
 800df4e:	6019      	strpl	r1, [r3, #0]
 800df50:	6816      	ldrpl	r6, [r2, #0]
 800df52:	2700      	movs	r7, #0
 800df54:	69a0      	ldr	r0, [r4, #24]
 800df56:	b188      	cbz	r0, 800df7c <_scanf_chars+0x58>
 800df58:	2801      	cmp	r0, #1
 800df5a:	d107      	bne.n	800df6c <_scanf_chars+0x48>
 800df5c:	682b      	ldr	r3, [r5, #0]
 800df5e:	781a      	ldrb	r2, [r3, #0]
 800df60:	6963      	ldr	r3, [r4, #20]
 800df62:	5c9b      	ldrb	r3, [r3, r2]
 800df64:	b953      	cbnz	r3, 800df7c <_scanf_chars+0x58>
 800df66:	2f00      	cmp	r7, #0
 800df68:	d031      	beq.n	800dfce <_scanf_chars+0xaa>
 800df6a:	e022      	b.n	800dfb2 <_scanf_chars+0x8e>
 800df6c:	2802      	cmp	r0, #2
 800df6e:	d120      	bne.n	800dfb2 <_scanf_chars+0x8e>
 800df70:	682b      	ldr	r3, [r5, #0]
 800df72:	781b      	ldrb	r3, [r3, #0]
 800df74:	f819 3003 	ldrb.w	r3, [r9, r3]
 800df78:	071b      	lsls	r3, r3, #28
 800df7a:	d41a      	bmi.n	800dfb2 <_scanf_chars+0x8e>
 800df7c:	6823      	ldr	r3, [r4, #0]
 800df7e:	06da      	lsls	r2, r3, #27
 800df80:	bf5e      	ittt	pl
 800df82:	682b      	ldrpl	r3, [r5, #0]
 800df84:	781b      	ldrbpl	r3, [r3, #0]
 800df86:	f806 3b01 	strbpl.w	r3, [r6], #1
 800df8a:	682a      	ldr	r2, [r5, #0]
 800df8c:	686b      	ldr	r3, [r5, #4]
 800df8e:	3201      	adds	r2, #1
 800df90:	602a      	str	r2, [r5, #0]
 800df92:	68a2      	ldr	r2, [r4, #8]
 800df94:	3b01      	subs	r3, #1
 800df96:	3a01      	subs	r2, #1
 800df98:	606b      	str	r3, [r5, #4]
 800df9a:	3701      	adds	r7, #1
 800df9c:	60a2      	str	r2, [r4, #8]
 800df9e:	b142      	cbz	r2, 800dfb2 <_scanf_chars+0x8e>
 800dfa0:	2b00      	cmp	r3, #0
 800dfa2:	dcd7      	bgt.n	800df54 <_scanf_chars+0x30>
 800dfa4:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800dfa8:	4629      	mov	r1, r5
 800dfaa:	4640      	mov	r0, r8
 800dfac:	4798      	blx	r3
 800dfae:	2800      	cmp	r0, #0
 800dfb0:	d0d0      	beq.n	800df54 <_scanf_chars+0x30>
 800dfb2:	6823      	ldr	r3, [r4, #0]
 800dfb4:	f013 0310 	ands.w	r3, r3, #16
 800dfb8:	d105      	bne.n	800dfc6 <_scanf_chars+0xa2>
 800dfba:	68e2      	ldr	r2, [r4, #12]
 800dfbc:	3201      	adds	r2, #1
 800dfbe:	60e2      	str	r2, [r4, #12]
 800dfc0:	69a2      	ldr	r2, [r4, #24]
 800dfc2:	b102      	cbz	r2, 800dfc6 <_scanf_chars+0xa2>
 800dfc4:	7033      	strb	r3, [r6, #0]
 800dfc6:	6923      	ldr	r3, [r4, #16]
 800dfc8:	443b      	add	r3, r7
 800dfca:	6123      	str	r3, [r4, #16]
 800dfcc:	2000      	movs	r0, #0
 800dfce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dfd2:	bf00      	nop
 800dfd4:	08010181 	.word	0x08010181

0800dfd8 <_scanf_i>:
 800dfd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dfdc:	4698      	mov	r8, r3
 800dfde:	4b74      	ldr	r3, [pc, #464]	@ (800e1b0 <_scanf_i+0x1d8>)
 800dfe0:	460c      	mov	r4, r1
 800dfe2:	4682      	mov	sl, r0
 800dfe4:	4616      	mov	r6, r2
 800dfe6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800dfea:	b087      	sub	sp, #28
 800dfec:	ab03      	add	r3, sp, #12
 800dfee:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800dff2:	4b70      	ldr	r3, [pc, #448]	@ (800e1b4 <_scanf_i+0x1dc>)
 800dff4:	69a1      	ldr	r1, [r4, #24]
 800dff6:	4a70      	ldr	r2, [pc, #448]	@ (800e1b8 <_scanf_i+0x1e0>)
 800dff8:	2903      	cmp	r1, #3
 800dffa:	bf08      	it	eq
 800dffc:	461a      	moveq	r2, r3
 800dffe:	68a3      	ldr	r3, [r4, #8]
 800e000:	9201      	str	r2, [sp, #4]
 800e002:	1e5a      	subs	r2, r3, #1
 800e004:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800e008:	bf88      	it	hi
 800e00a:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800e00e:	4627      	mov	r7, r4
 800e010:	bf82      	ittt	hi
 800e012:	eb03 0905 	addhi.w	r9, r3, r5
 800e016:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800e01a:	60a3      	strhi	r3, [r4, #8]
 800e01c:	f857 3b1c 	ldr.w	r3, [r7], #28
 800e020:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 800e024:	bf98      	it	ls
 800e026:	f04f 0900 	movls.w	r9, #0
 800e02a:	6023      	str	r3, [r4, #0]
 800e02c:	463d      	mov	r5, r7
 800e02e:	f04f 0b00 	mov.w	fp, #0
 800e032:	6831      	ldr	r1, [r6, #0]
 800e034:	ab03      	add	r3, sp, #12
 800e036:	7809      	ldrb	r1, [r1, #0]
 800e038:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800e03c:	2202      	movs	r2, #2
 800e03e:	f7f2 f8d7 	bl	80001f0 <memchr>
 800e042:	b328      	cbz	r0, 800e090 <_scanf_i+0xb8>
 800e044:	f1bb 0f01 	cmp.w	fp, #1
 800e048:	d159      	bne.n	800e0fe <_scanf_i+0x126>
 800e04a:	6862      	ldr	r2, [r4, #4]
 800e04c:	b92a      	cbnz	r2, 800e05a <_scanf_i+0x82>
 800e04e:	6822      	ldr	r2, [r4, #0]
 800e050:	2108      	movs	r1, #8
 800e052:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800e056:	6061      	str	r1, [r4, #4]
 800e058:	6022      	str	r2, [r4, #0]
 800e05a:	6822      	ldr	r2, [r4, #0]
 800e05c:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 800e060:	6022      	str	r2, [r4, #0]
 800e062:	68a2      	ldr	r2, [r4, #8]
 800e064:	1e51      	subs	r1, r2, #1
 800e066:	60a1      	str	r1, [r4, #8]
 800e068:	b192      	cbz	r2, 800e090 <_scanf_i+0xb8>
 800e06a:	6832      	ldr	r2, [r6, #0]
 800e06c:	1c51      	adds	r1, r2, #1
 800e06e:	6031      	str	r1, [r6, #0]
 800e070:	7812      	ldrb	r2, [r2, #0]
 800e072:	f805 2b01 	strb.w	r2, [r5], #1
 800e076:	6872      	ldr	r2, [r6, #4]
 800e078:	3a01      	subs	r2, #1
 800e07a:	2a00      	cmp	r2, #0
 800e07c:	6072      	str	r2, [r6, #4]
 800e07e:	dc07      	bgt.n	800e090 <_scanf_i+0xb8>
 800e080:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 800e084:	4631      	mov	r1, r6
 800e086:	4650      	mov	r0, sl
 800e088:	4790      	blx	r2
 800e08a:	2800      	cmp	r0, #0
 800e08c:	f040 8085 	bne.w	800e19a <_scanf_i+0x1c2>
 800e090:	f10b 0b01 	add.w	fp, fp, #1
 800e094:	f1bb 0f03 	cmp.w	fp, #3
 800e098:	d1cb      	bne.n	800e032 <_scanf_i+0x5a>
 800e09a:	6863      	ldr	r3, [r4, #4]
 800e09c:	b90b      	cbnz	r3, 800e0a2 <_scanf_i+0xca>
 800e09e:	230a      	movs	r3, #10
 800e0a0:	6063      	str	r3, [r4, #4]
 800e0a2:	6863      	ldr	r3, [r4, #4]
 800e0a4:	4945      	ldr	r1, [pc, #276]	@ (800e1bc <_scanf_i+0x1e4>)
 800e0a6:	6960      	ldr	r0, [r4, #20]
 800e0a8:	1ac9      	subs	r1, r1, r3
 800e0aa:	f000 f935 	bl	800e318 <__sccl>
 800e0ae:	f04f 0b00 	mov.w	fp, #0
 800e0b2:	68a3      	ldr	r3, [r4, #8]
 800e0b4:	6822      	ldr	r2, [r4, #0]
 800e0b6:	2b00      	cmp	r3, #0
 800e0b8:	d03d      	beq.n	800e136 <_scanf_i+0x15e>
 800e0ba:	6831      	ldr	r1, [r6, #0]
 800e0bc:	6960      	ldr	r0, [r4, #20]
 800e0be:	f891 c000 	ldrb.w	ip, [r1]
 800e0c2:	f810 000c 	ldrb.w	r0, [r0, ip]
 800e0c6:	2800      	cmp	r0, #0
 800e0c8:	d035      	beq.n	800e136 <_scanf_i+0x15e>
 800e0ca:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 800e0ce:	d124      	bne.n	800e11a <_scanf_i+0x142>
 800e0d0:	0510      	lsls	r0, r2, #20
 800e0d2:	d522      	bpl.n	800e11a <_scanf_i+0x142>
 800e0d4:	f10b 0b01 	add.w	fp, fp, #1
 800e0d8:	f1b9 0f00 	cmp.w	r9, #0
 800e0dc:	d003      	beq.n	800e0e6 <_scanf_i+0x10e>
 800e0de:	3301      	adds	r3, #1
 800e0e0:	f109 39ff 	add.w	r9, r9, #4294967295
 800e0e4:	60a3      	str	r3, [r4, #8]
 800e0e6:	6873      	ldr	r3, [r6, #4]
 800e0e8:	3b01      	subs	r3, #1
 800e0ea:	2b00      	cmp	r3, #0
 800e0ec:	6073      	str	r3, [r6, #4]
 800e0ee:	dd1b      	ble.n	800e128 <_scanf_i+0x150>
 800e0f0:	6833      	ldr	r3, [r6, #0]
 800e0f2:	3301      	adds	r3, #1
 800e0f4:	6033      	str	r3, [r6, #0]
 800e0f6:	68a3      	ldr	r3, [r4, #8]
 800e0f8:	3b01      	subs	r3, #1
 800e0fa:	60a3      	str	r3, [r4, #8]
 800e0fc:	e7d9      	b.n	800e0b2 <_scanf_i+0xda>
 800e0fe:	f1bb 0f02 	cmp.w	fp, #2
 800e102:	d1ae      	bne.n	800e062 <_scanf_i+0x8a>
 800e104:	6822      	ldr	r2, [r4, #0]
 800e106:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 800e10a:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 800e10e:	d1bf      	bne.n	800e090 <_scanf_i+0xb8>
 800e110:	2110      	movs	r1, #16
 800e112:	6061      	str	r1, [r4, #4]
 800e114:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800e118:	e7a2      	b.n	800e060 <_scanf_i+0x88>
 800e11a:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 800e11e:	6022      	str	r2, [r4, #0]
 800e120:	780b      	ldrb	r3, [r1, #0]
 800e122:	f805 3b01 	strb.w	r3, [r5], #1
 800e126:	e7de      	b.n	800e0e6 <_scanf_i+0x10e>
 800e128:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800e12c:	4631      	mov	r1, r6
 800e12e:	4650      	mov	r0, sl
 800e130:	4798      	blx	r3
 800e132:	2800      	cmp	r0, #0
 800e134:	d0df      	beq.n	800e0f6 <_scanf_i+0x11e>
 800e136:	6823      	ldr	r3, [r4, #0]
 800e138:	05d9      	lsls	r1, r3, #23
 800e13a:	d50d      	bpl.n	800e158 <_scanf_i+0x180>
 800e13c:	42bd      	cmp	r5, r7
 800e13e:	d909      	bls.n	800e154 <_scanf_i+0x17c>
 800e140:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800e144:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800e148:	4632      	mov	r2, r6
 800e14a:	4650      	mov	r0, sl
 800e14c:	4798      	blx	r3
 800e14e:	f105 39ff 	add.w	r9, r5, #4294967295
 800e152:	464d      	mov	r5, r9
 800e154:	42bd      	cmp	r5, r7
 800e156:	d028      	beq.n	800e1aa <_scanf_i+0x1d2>
 800e158:	6822      	ldr	r2, [r4, #0]
 800e15a:	f012 0210 	ands.w	r2, r2, #16
 800e15e:	d113      	bne.n	800e188 <_scanf_i+0x1b0>
 800e160:	702a      	strb	r2, [r5, #0]
 800e162:	6863      	ldr	r3, [r4, #4]
 800e164:	9e01      	ldr	r6, [sp, #4]
 800e166:	4639      	mov	r1, r7
 800e168:	4650      	mov	r0, sl
 800e16a:	47b0      	blx	r6
 800e16c:	f8d8 3000 	ldr.w	r3, [r8]
 800e170:	6821      	ldr	r1, [r4, #0]
 800e172:	1d1a      	adds	r2, r3, #4
 800e174:	f8c8 2000 	str.w	r2, [r8]
 800e178:	f011 0f20 	tst.w	r1, #32
 800e17c:	681b      	ldr	r3, [r3, #0]
 800e17e:	d00f      	beq.n	800e1a0 <_scanf_i+0x1c8>
 800e180:	6018      	str	r0, [r3, #0]
 800e182:	68e3      	ldr	r3, [r4, #12]
 800e184:	3301      	adds	r3, #1
 800e186:	60e3      	str	r3, [r4, #12]
 800e188:	6923      	ldr	r3, [r4, #16]
 800e18a:	1bed      	subs	r5, r5, r7
 800e18c:	445d      	add	r5, fp
 800e18e:	442b      	add	r3, r5
 800e190:	6123      	str	r3, [r4, #16]
 800e192:	2000      	movs	r0, #0
 800e194:	b007      	add	sp, #28
 800e196:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e19a:	f04f 0b00 	mov.w	fp, #0
 800e19e:	e7ca      	b.n	800e136 <_scanf_i+0x15e>
 800e1a0:	07ca      	lsls	r2, r1, #31
 800e1a2:	bf4c      	ite	mi
 800e1a4:	8018      	strhmi	r0, [r3, #0]
 800e1a6:	6018      	strpl	r0, [r3, #0]
 800e1a8:	e7eb      	b.n	800e182 <_scanf_i+0x1aa>
 800e1aa:	2001      	movs	r0, #1
 800e1ac:	e7f2      	b.n	800e194 <_scanf_i+0x1bc>
 800e1ae:	bf00      	nop
 800e1b0:	0800ec5c 	.word	0x0800ec5c
 800e1b4:	08009cb1 	.word	0x08009cb1
 800e1b8:	0800d8ad 	.word	0x0800d8ad
 800e1bc:	080105d1 	.word	0x080105d1

0800e1c0 <__sflush_r>:
 800e1c0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e1c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e1c8:	0716      	lsls	r6, r2, #28
 800e1ca:	4605      	mov	r5, r0
 800e1cc:	460c      	mov	r4, r1
 800e1ce:	d454      	bmi.n	800e27a <__sflush_r+0xba>
 800e1d0:	684b      	ldr	r3, [r1, #4]
 800e1d2:	2b00      	cmp	r3, #0
 800e1d4:	dc02      	bgt.n	800e1dc <__sflush_r+0x1c>
 800e1d6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800e1d8:	2b00      	cmp	r3, #0
 800e1da:	dd48      	ble.n	800e26e <__sflush_r+0xae>
 800e1dc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e1de:	2e00      	cmp	r6, #0
 800e1e0:	d045      	beq.n	800e26e <__sflush_r+0xae>
 800e1e2:	2300      	movs	r3, #0
 800e1e4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800e1e8:	682f      	ldr	r7, [r5, #0]
 800e1ea:	6a21      	ldr	r1, [r4, #32]
 800e1ec:	602b      	str	r3, [r5, #0]
 800e1ee:	d030      	beq.n	800e252 <__sflush_r+0x92>
 800e1f0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800e1f2:	89a3      	ldrh	r3, [r4, #12]
 800e1f4:	0759      	lsls	r1, r3, #29
 800e1f6:	d505      	bpl.n	800e204 <__sflush_r+0x44>
 800e1f8:	6863      	ldr	r3, [r4, #4]
 800e1fa:	1ad2      	subs	r2, r2, r3
 800e1fc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800e1fe:	b10b      	cbz	r3, 800e204 <__sflush_r+0x44>
 800e200:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800e202:	1ad2      	subs	r2, r2, r3
 800e204:	2300      	movs	r3, #0
 800e206:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e208:	6a21      	ldr	r1, [r4, #32]
 800e20a:	4628      	mov	r0, r5
 800e20c:	47b0      	blx	r6
 800e20e:	1c43      	adds	r3, r0, #1
 800e210:	89a3      	ldrh	r3, [r4, #12]
 800e212:	d106      	bne.n	800e222 <__sflush_r+0x62>
 800e214:	6829      	ldr	r1, [r5, #0]
 800e216:	291d      	cmp	r1, #29
 800e218:	d82b      	bhi.n	800e272 <__sflush_r+0xb2>
 800e21a:	4a2a      	ldr	r2, [pc, #168]	@ (800e2c4 <__sflush_r+0x104>)
 800e21c:	410a      	asrs	r2, r1
 800e21e:	07d6      	lsls	r6, r2, #31
 800e220:	d427      	bmi.n	800e272 <__sflush_r+0xb2>
 800e222:	2200      	movs	r2, #0
 800e224:	6062      	str	r2, [r4, #4]
 800e226:	04d9      	lsls	r1, r3, #19
 800e228:	6922      	ldr	r2, [r4, #16]
 800e22a:	6022      	str	r2, [r4, #0]
 800e22c:	d504      	bpl.n	800e238 <__sflush_r+0x78>
 800e22e:	1c42      	adds	r2, r0, #1
 800e230:	d101      	bne.n	800e236 <__sflush_r+0x76>
 800e232:	682b      	ldr	r3, [r5, #0]
 800e234:	b903      	cbnz	r3, 800e238 <__sflush_r+0x78>
 800e236:	6560      	str	r0, [r4, #84]	@ 0x54
 800e238:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e23a:	602f      	str	r7, [r5, #0]
 800e23c:	b1b9      	cbz	r1, 800e26e <__sflush_r+0xae>
 800e23e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e242:	4299      	cmp	r1, r3
 800e244:	d002      	beq.n	800e24c <__sflush_r+0x8c>
 800e246:	4628      	mov	r0, r5
 800e248:	f7fe fa36 	bl	800c6b8 <_free_r>
 800e24c:	2300      	movs	r3, #0
 800e24e:	6363      	str	r3, [r4, #52]	@ 0x34
 800e250:	e00d      	b.n	800e26e <__sflush_r+0xae>
 800e252:	2301      	movs	r3, #1
 800e254:	4628      	mov	r0, r5
 800e256:	47b0      	blx	r6
 800e258:	4602      	mov	r2, r0
 800e25a:	1c50      	adds	r0, r2, #1
 800e25c:	d1c9      	bne.n	800e1f2 <__sflush_r+0x32>
 800e25e:	682b      	ldr	r3, [r5, #0]
 800e260:	2b00      	cmp	r3, #0
 800e262:	d0c6      	beq.n	800e1f2 <__sflush_r+0x32>
 800e264:	2b1d      	cmp	r3, #29
 800e266:	d001      	beq.n	800e26c <__sflush_r+0xac>
 800e268:	2b16      	cmp	r3, #22
 800e26a:	d11e      	bne.n	800e2aa <__sflush_r+0xea>
 800e26c:	602f      	str	r7, [r5, #0]
 800e26e:	2000      	movs	r0, #0
 800e270:	e022      	b.n	800e2b8 <__sflush_r+0xf8>
 800e272:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e276:	b21b      	sxth	r3, r3
 800e278:	e01b      	b.n	800e2b2 <__sflush_r+0xf2>
 800e27a:	690f      	ldr	r7, [r1, #16]
 800e27c:	2f00      	cmp	r7, #0
 800e27e:	d0f6      	beq.n	800e26e <__sflush_r+0xae>
 800e280:	0793      	lsls	r3, r2, #30
 800e282:	680e      	ldr	r6, [r1, #0]
 800e284:	bf08      	it	eq
 800e286:	694b      	ldreq	r3, [r1, #20]
 800e288:	600f      	str	r7, [r1, #0]
 800e28a:	bf18      	it	ne
 800e28c:	2300      	movne	r3, #0
 800e28e:	eba6 0807 	sub.w	r8, r6, r7
 800e292:	608b      	str	r3, [r1, #8]
 800e294:	f1b8 0f00 	cmp.w	r8, #0
 800e298:	dde9      	ble.n	800e26e <__sflush_r+0xae>
 800e29a:	6a21      	ldr	r1, [r4, #32]
 800e29c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800e29e:	4643      	mov	r3, r8
 800e2a0:	463a      	mov	r2, r7
 800e2a2:	4628      	mov	r0, r5
 800e2a4:	47b0      	blx	r6
 800e2a6:	2800      	cmp	r0, #0
 800e2a8:	dc08      	bgt.n	800e2bc <__sflush_r+0xfc>
 800e2aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e2ae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e2b2:	81a3      	strh	r3, [r4, #12]
 800e2b4:	f04f 30ff 	mov.w	r0, #4294967295
 800e2b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e2bc:	4407      	add	r7, r0
 800e2be:	eba8 0800 	sub.w	r8, r8, r0
 800e2c2:	e7e7      	b.n	800e294 <__sflush_r+0xd4>
 800e2c4:	dfbffffe 	.word	0xdfbffffe

0800e2c8 <_fflush_r>:
 800e2c8:	b538      	push	{r3, r4, r5, lr}
 800e2ca:	690b      	ldr	r3, [r1, #16]
 800e2cc:	4605      	mov	r5, r0
 800e2ce:	460c      	mov	r4, r1
 800e2d0:	b913      	cbnz	r3, 800e2d8 <_fflush_r+0x10>
 800e2d2:	2500      	movs	r5, #0
 800e2d4:	4628      	mov	r0, r5
 800e2d6:	bd38      	pop	{r3, r4, r5, pc}
 800e2d8:	b118      	cbz	r0, 800e2e2 <_fflush_r+0x1a>
 800e2da:	6a03      	ldr	r3, [r0, #32]
 800e2dc:	b90b      	cbnz	r3, 800e2e2 <_fflush_r+0x1a>
 800e2de:	f7fc fbeb 	bl	800aab8 <__sinit>
 800e2e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e2e6:	2b00      	cmp	r3, #0
 800e2e8:	d0f3      	beq.n	800e2d2 <_fflush_r+0xa>
 800e2ea:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800e2ec:	07d0      	lsls	r0, r2, #31
 800e2ee:	d404      	bmi.n	800e2fa <_fflush_r+0x32>
 800e2f0:	0599      	lsls	r1, r3, #22
 800e2f2:	d402      	bmi.n	800e2fa <_fflush_r+0x32>
 800e2f4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e2f6:	f7fd fb5f 	bl	800b9b8 <__retarget_lock_acquire_recursive>
 800e2fa:	4628      	mov	r0, r5
 800e2fc:	4621      	mov	r1, r4
 800e2fe:	f7ff ff5f 	bl	800e1c0 <__sflush_r>
 800e302:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e304:	07da      	lsls	r2, r3, #31
 800e306:	4605      	mov	r5, r0
 800e308:	d4e4      	bmi.n	800e2d4 <_fflush_r+0xc>
 800e30a:	89a3      	ldrh	r3, [r4, #12]
 800e30c:	059b      	lsls	r3, r3, #22
 800e30e:	d4e1      	bmi.n	800e2d4 <_fflush_r+0xc>
 800e310:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e312:	f7fd fb53 	bl	800b9bc <__retarget_lock_release_recursive>
 800e316:	e7dd      	b.n	800e2d4 <_fflush_r+0xc>

0800e318 <__sccl>:
 800e318:	b570      	push	{r4, r5, r6, lr}
 800e31a:	780b      	ldrb	r3, [r1, #0]
 800e31c:	4604      	mov	r4, r0
 800e31e:	2b5e      	cmp	r3, #94	@ 0x5e
 800e320:	bf0b      	itete	eq
 800e322:	784b      	ldrbeq	r3, [r1, #1]
 800e324:	1c4a      	addne	r2, r1, #1
 800e326:	1c8a      	addeq	r2, r1, #2
 800e328:	2100      	movne	r1, #0
 800e32a:	bf08      	it	eq
 800e32c:	2101      	moveq	r1, #1
 800e32e:	3801      	subs	r0, #1
 800e330:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 800e334:	f800 1f01 	strb.w	r1, [r0, #1]!
 800e338:	42a8      	cmp	r0, r5
 800e33a:	d1fb      	bne.n	800e334 <__sccl+0x1c>
 800e33c:	b90b      	cbnz	r3, 800e342 <__sccl+0x2a>
 800e33e:	1e50      	subs	r0, r2, #1
 800e340:	bd70      	pop	{r4, r5, r6, pc}
 800e342:	f081 0101 	eor.w	r1, r1, #1
 800e346:	54e1      	strb	r1, [r4, r3]
 800e348:	4610      	mov	r0, r2
 800e34a:	4602      	mov	r2, r0
 800e34c:	f812 5b01 	ldrb.w	r5, [r2], #1
 800e350:	2d2d      	cmp	r5, #45	@ 0x2d
 800e352:	d005      	beq.n	800e360 <__sccl+0x48>
 800e354:	2d5d      	cmp	r5, #93	@ 0x5d
 800e356:	d016      	beq.n	800e386 <__sccl+0x6e>
 800e358:	2d00      	cmp	r5, #0
 800e35a:	d0f1      	beq.n	800e340 <__sccl+0x28>
 800e35c:	462b      	mov	r3, r5
 800e35e:	e7f2      	b.n	800e346 <__sccl+0x2e>
 800e360:	7846      	ldrb	r6, [r0, #1]
 800e362:	2e5d      	cmp	r6, #93	@ 0x5d
 800e364:	d0fa      	beq.n	800e35c <__sccl+0x44>
 800e366:	42b3      	cmp	r3, r6
 800e368:	dcf8      	bgt.n	800e35c <__sccl+0x44>
 800e36a:	3002      	adds	r0, #2
 800e36c:	461a      	mov	r2, r3
 800e36e:	3201      	adds	r2, #1
 800e370:	4296      	cmp	r6, r2
 800e372:	54a1      	strb	r1, [r4, r2]
 800e374:	dcfb      	bgt.n	800e36e <__sccl+0x56>
 800e376:	1af2      	subs	r2, r6, r3
 800e378:	3a01      	subs	r2, #1
 800e37a:	1c5d      	adds	r5, r3, #1
 800e37c:	42b3      	cmp	r3, r6
 800e37e:	bfa8      	it	ge
 800e380:	2200      	movge	r2, #0
 800e382:	18ab      	adds	r3, r5, r2
 800e384:	e7e1      	b.n	800e34a <__sccl+0x32>
 800e386:	4610      	mov	r0, r2
 800e388:	e7da      	b.n	800e340 <__sccl+0x28>

0800e38a <__submore>:
 800e38a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e38e:	460c      	mov	r4, r1
 800e390:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800e392:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e396:	4299      	cmp	r1, r3
 800e398:	d11d      	bne.n	800e3d6 <__submore+0x4c>
 800e39a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800e39e:	f7fa fd77 	bl	8008e90 <_malloc_r>
 800e3a2:	b918      	cbnz	r0, 800e3ac <__submore+0x22>
 800e3a4:	f04f 30ff 	mov.w	r0, #4294967295
 800e3a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e3ac:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e3b0:	63a3      	str	r3, [r4, #56]	@ 0x38
 800e3b2:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 800e3b6:	6360      	str	r0, [r4, #52]	@ 0x34
 800e3b8:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 800e3bc:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800e3c0:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 800e3c4:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800e3c8:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 800e3cc:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 800e3d0:	6020      	str	r0, [r4, #0]
 800e3d2:	2000      	movs	r0, #0
 800e3d4:	e7e8      	b.n	800e3a8 <__submore+0x1e>
 800e3d6:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 800e3d8:	0077      	lsls	r7, r6, #1
 800e3da:	463a      	mov	r2, r7
 800e3dc:	f000 f86c 	bl	800e4b8 <_realloc_r>
 800e3e0:	4605      	mov	r5, r0
 800e3e2:	2800      	cmp	r0, #0
 800e3e4:	d0de      	beq.n	800e3a4 <__submore+0x1a>
 800e3e6:	eb00 0806 	add.w	r8, r0, r6
 800e3ea:	4601      	mov	r1, r0
 800e3ec:	4632      	mov	r2, r6
 800e3ee:	4640      	mov	r0, r8
 800e3f0:	f7fd faed 	bl	800b9ce <memcpy>
 800e3f4:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 800e3f8:	f8c4 8000 	str.w	r8, [r4]
 800e3fc:	e7e9      	b.n	800e3d2 <__submore+0x48>

0800e3fe <memmove>:
 800e3fe:	4288      	cmp	r0, r1
 800e400:	b510      	push	{r4, lr}
 800e402:	eb01 0402 	add.w	r4, r1, r2
 800e406:	d902      	bls.n	800e40e <memmove+0x10>
 800e408:	4284      	cmp	r4, r0
 800e40a:	4623      	mov	r3, r4
 800e40c:	d807      	bhi.n	800e41e <memmove+0x20>
 800e40e:	1e43      	subs	r3, r0, #1
 800e410:	42a1      	cmp	r1, r4
 800e412:	d008      	beq.n	800e426 <memmove+0x28>
 800e414:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e418:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e41c:	e7f8      	b.n	800e410 <memmove+0x12>
 800e41e:	4402      	add	r2, r0
 800e420:	4601      	mov	r1, r0
 800e422:	428a      	cmp	r2, r1
 800e424:	d100      	bne.n	800e428 <memmove+0x2a>
 800e426:	bd10      	pop	{r4, pc}
 800e428:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e42c:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e430:	e7f7      	b.n	800e422 <memmove+0x24>
	...

0800e434 <__gettzinfo>:
 800e434:	4800      	ldr	r0, [pc, #0]	@ (800e438 <__gettzinfo+0x4>)
 800e436:	4770      	bx	lr
 800e438:	200001f0 	.word	0x200001f0

0800e43c <__assert_func>:
 800e43c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e43e:	4614      	mov	r4, r2
 800e440:	461a      	mov	r2, r3
 800e442:	4b09      	ldr	r3, [pc, #36]	@ (800e468 <__assert_func+0x2c>)
 800e444:	681b      	ldr	r3, [r3, #0]
 800e446:	4605      	mov	r5, r0
 800e448:	68d8      	ldr	r0, [r3, #12]
 800e44a:	b954      	cbnz	r4, 800e462 <__assert_func+0x26>
 800e44c:	4b07      	ldr	r3, [pc, #28]	@ (800e46c <__assert_func+0x30>)
 800e44e:	461c      	mov	r4, r3
 800e450:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e454:	9100      	str	r1, [sp, #0]
 800e456:	462b      	mov	r3, r5
 800e458:	4905      	ldr	r1, [pc, #20]	@ (800e470 <__assert_func+0x34>)
 800e45a:	f000 f85b 	bl	800e514 <fiprintf>
 800e45e:	f000 f86b 	bl	800e538 <abort>
 800e462:	4b04      	ldr	r3, [pc, #16]	@ (800e474 <__assert_func+0x38>)
 800e464:	e7f4      	b.n	800e450 <__assert_func+0x14>
 800e466:	bf00      	nop
 800e468:	2000019c 	.word	0x2000019c
 800e46c:	0800fa09 	.word	0x0800fa09
 800e470:	08010649 	.word	0x08010649
 800e474:	0801063c 	.word	0x0801063c

0800e478 <_calloc_r>:
 800e478:	b570      	push	{r4, r5, r6, lr}
 800e47a:	fba1 5402 	umull	r5, r4, r1, r2
 800e47e:	b93c      	cbnz	r4, 800e490 <_calloc_r+0x18>
 800e480:	4629      	mov	r1, r5
 800e482:	f7fa fd05 	bl	8008e90 <_malloc_r>
 800e486:	4606      	mov	r6, r0
 800e488:	b928      	cbnz	r0, 800e496 <_calloc_r+0x1e>
 800e48a:	2600      	movs	r6, #0
 800e48c:	4630      	mov	r0, r6
 800e48e:	bd70      	pop	{r4, r5, r6, pc}
 800e490:	220c      	movs	r2, #12
 800e492:	6002      	str	r2, [r0, #0]
 800e494:	e7f9      	b.n	800e48a <_calloc_r+0x12>
 800e496:	462a      	mov	r2, r5
 800e498:	4621      	mov	r1, r4
 800e49a:	f7fc fc3f 	bl	800ad1c <memset>
 800e49e:	e7f5      	b.n	800e48c <_calloc_r+0x14>

0800e4a0 <__env_lock>:
 800e4a0:	4801      	ldr	r0, [pc, #4]	@ (800e4a8 <__env_lock+0x8>)
 800e4a2:	f7fd ba89 	b.w	800b9b8 <__retarget_lock_acquire_recursive>
 800e4a6:	bf00      	nop
 800e4a8:	200070d1 	.word	0x200070d1

0800e4ac <__env_unlock>:
 800e4ac:	4801      	ldr	r0, [pc, #4]	@ (800e4b4 <__env_unlock+0x8>)
 800e4ae:	f7fd ba85 	b.w	800b9bc <__retarget_lock_release_recursive>
 800e4b2:	bf00      	nop
 800e4b4:	200070d1 	.word	0x200070d1

0800e4b8 <_realloc_r>:
 800e4b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e4bc:	4680      	mov	r8, r0
 800e4be:	4615      	mov	r5, r2
 800e4c0:	460c      	mov	r4, r1
 800e4c2:	b921      	cbnz	r1, 800e4ce <_realloc_r+0x16>
 800e4c4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e4c8:	4611      	mov	r1, r2
 800e4ca:	f7fa bce1 	b.w	8008e90 <_malloc_r>
 800e4ce:	b92a      	cbnz	r2, 800e4dc <_realloc_r+0x24>
 800e4d0:	f7fe f8f2 	bl	800c6b8 <_free_r>
 800e4d4:	2400      	movs	r4, #0
 800e4d6:	4620      	mov	r0, r4
 800e4d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e4dc:	f000 f833 	bl	800e546 <_malloc_usable_size_r>
 800e4e0:	4285      	cmp	r5, r0
 800e4e2:	4606      	mov	r6, r0
 800e4e4:	d802      	bhi.n	800e4ec <_realloc_r+0x34>
 800e4e6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800e4ea:	d8f4      	bhi.n	800e4d6 <_realloc_r+0x1e>
 800e4ec:	4629      	mov	r1, r5
 800e4ee:	4640      	mov	r0, r8
 800e4f0:	f7fa fcce 	bl	8008e90 <_malloc_r>
 800e4f4:	4607      	mov	r7, r0
 800e4f6:	2800      	cmp	r0, #0
 800e4f8:	d0ec      	beq.n	800e4d4 <_realloc_r+0x1c>
 800e4fa:	42b5      	cmp	r5, r6
 800e4fc:	462a      	mov	r2, r5
 800e4fe:	4621      	mov	r1, r4
 800e500:	bf28      	it	cs
 800e502:	4632      	movcs	r2, r6
 800e504:	f7fd fa63 	bl	800b9ce <memcpy>
 800e508:	4621      	mov	r1, r4
 800e50a:	4640      	mov	r0, r8
 800e50c:	f7fe f8d4 	bl	800c6b8 <_free_r>
 800e510:	463c      	mov	r4, r7
 800e512:	e7e0      	b.n	800e4d6 <_realloc_r+0x1e>

0800e514 <fiprintf>:
 800e514:	b40e      	push	{r1, r2, r3}
 800e516:	b503      	push	{r0, r1, lr}
 800e518:	4601      	mov	r1, r0
 800e51a:	ab03      	add	r3, sp, #12
 800e51c:	4805      	ldr	r0, [pc, #20]	@ (800e534 <fiprintf+0x20>)
 800e51e:	f853 2b04 	ldr.w	r2, [r3], #4
 800e522:	6800      	ldr	r0, [r0, #0]
 800e524:	9301      	str	r3, [sp, #4]
 800e526:	f000 f83f 	bl	800e5a8 <_vfiprintf_r>
 800e52a:	b002      	add	sp, #8
 800e52c:	f85d eb04 	ldr.w	lr, [sp], #4
 800e530:	b003      	add	sp, #12
 800e532:	4770      	bx	lr
 800e534:	2000019c 	.word	0x2000019c

0800e538 <abort>:
 800e538:	b508      	push	{r3, lr}
 800e53a:	2006      	movs	r0, #6
 800e53c:	f000 fa08 	bl	800e950 <raise>
 800e540:	2001      	movs	r0, #1
 800e542:	f7f5 ffc9 	bl	80044d8 <_exit>

0800e546 <_malloc_usable_size_r>:
 800e546:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e54a:	1f18      	subs	r0, r3, #4
 800e54c:	2b00      	cmp	r3, #0
 800e54e:	bfbc      	itt	lt
 800e550:	580b      	ldrlt	r3, [r1, r0]
 800e552:	18c0      	addlt	r0, r0, r3
 800e554:	4770      	bx	lr

0800e556 <__sfputc_r>:
 800e556:	6893      	ldr	r3, [r2, #8]
 800e558:	3b01      	subs	r3, #1
 800e55a:	2b00      	cmp	r3, #0
 800e55c:	b410      	push	{r4}
 800e55e:	6093      	str	r3, [r2, #8]
 800e560:	da08      	bge.n	800e574 <__sfputc_r+0x1e>
 800e562:	6994      	ldr	r4, [r2, #24]
 800e564:	42a3      	cmp	r3, r4
 800e566:	db01      	blt.n	800e56c <__sfputc_r+0x16>
 800e568:	290a      	cmp	r1, #10
 800e56a:	d103      	bne.n	800e574 <__sfputc_r+0x1e>
 800e56c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e570:	f000 b932 	b.w	800e7d8 <__swbuf_r>
 800e574:	6813      	ldr	r3, [r2, #0]
 800e576:	1c58      	adds	r0, r3, #1
 800e578:	6010      	str	r0, [r2, #0]
 800e57a:	7019      	strb	r1, [r3, #0]
 800e57c:	4608      	mov	r0, r1
 800e57e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e582:	4770      	bx	lr

0800e584 <__sfputs_r>:
 800e584:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e586:	4606      	mov	r6, r0
 800e588:	460f      	mov	r7, r1
 800e58a:	4614      	mov	r4, r2
 800e58c:	18d5      	adds	r5, r2, r3
 800e58e:	42ac      	cmp	r4, r5
 800e590:	d101      	bne.n	800e596 <__sfputs_r+0x12>
 800e592:	2000      	movs	r0, #0
 800e594:	e007      	b.n	800e5a6 <__sfputs_r+0x22>
 800e596:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e59a:	463a      	mov	r2, r7
 800e59c:	4630      	mov	r0, r6
 800e59e:	f7ff ffda 	bl	800e556 <__sfputc_r>
 800e5a2:	1c43      	adds	r3, r0, #1
 800e5a4:	d1f3      	bne.n	800e58e <__sfputs_r+0xa>
 800e5a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800e5a8 <_vfiprintf_r>:
 800e5a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e5ac:	460d      	mov	r5, r1
 800e5ae:	b09d      	sub	sp, #116	@ 0x74
 800e5b0:	4614      	mov	r4, r2
 800e5b2:	4698      	mov	r8, r3
 800e5b4:	4606      	mov	r6, r0
 800e5b6:	b118      	cbz	r0, 800e5c0 <_vfiprintf_r+0x18>
 800e5b8:	6a03      	ldr	r3, [r0, #32]
 800e5ba:	b90b      	cbnz	r3, 800e5c0 <_vfiprintf_r+0x18>
 800e5bc:	f7fc fa7c 	bl	800aab8 <__sinit>
 800e5c0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e5c2:	07d9      	lsls	r1, r3, #31
 800e5c4:	d405      	bmi.n	800e5d2 <_vfiprintf_r+0x2a>
 800e5c6:	89ab      	ldrh	r3, [r5, #12]
 800e5c8:	059a      	lsls	r2, r3, #22
 800e5ca:	d402      	bmi.n	800e5d2 <_vfiprintf_r+0x2a>
 800e5cc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e5ce:	f7fd f9f3 	bl	800b9b8 <__retarget_lock_acquire_recursive>
 800e5d2:	89ab      	ldrh	r3, [r5, #12]
 800e5d4:	071b      	lsls	r3, r3, #28
 800e5d6:	d501      	bpl.n	800e5dc <_vfiprintf_r+0x34>
 800e5d8:	692b      	ldr	r3, [r5, #16]
 800e5da:	b99b      	cbnz	r3, 800e604 <_vfiprintf_r+0x5c>
 800e5dc:	4629      	mov	r1, r5
 800e5de:	4630      	mov	r0, r6
 800e5e0:	f000 f938 	bl	800e854 <__swsetup_r>
 800e5e4:	b170      	cbz	r0, 800e604 <_vfiprintf_r+0x5c>
 800e5e6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e5e8:	07dc      	lsls	r4, r3, #31
 800e5ea:	d504      	bpl.n	800e5f6 <_vfiprintf_r+0x4e>
 800e5ec:	f04f 30ff 	mov.w	r0, #4294967295
 800e5f0:	b01d      	add	sp, #116	@ 0x74
 800e5f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e5f6:	89ab      	ldrh	r3, [r5, #12]
 800e5f8:	0598      	lsls	r0, r3, #22
 800e5fa:	d4f7      	bmi.n	800e5ec <_vfiprintf_r+0x44>
 800e5fc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e5fe:	f7fd f9dd 	bl	800b9bc <__retarget_lock_release_recursive>
 800e602:	e7f3      	b.n	800e5ec <_vfiprintf_r+0x44>
 800e604:	2300      	movs	r3, #0
 800e606:	9309      	str	r3, [sp, #36]	@ 0x24
 800e608:	2320      	movs	r3, #32
 800e60a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e60e:	f8cd 800c 	str.w	r8, [sp, #12]
 800e612:	2330      	movs	r3, #48	@ 0x30
 800e614:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800e7c4 <_vfiprintf_r+0x21c>
 800e618:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e61c:	f04f 0901 	mov.w	r9, #1
 800e620:	4623      	mov	r3, r4
 800e622:	469a      	mov	sl, r3
 800e624:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e628:	b10a      	cbz	r2, 800e62e <_vfiprintf_r+0x86>
 800e62a:	2a25      	cmp	r2, #37	@ 0x25
 800e62c:	d1f9      	bne.n	800e622 <_vfiprintf_r+0x7a>
 800e62e:	ebba 0b04 	subs.w	fp, sl, r4
 800e632:	d00b      	beq.n	800e64c <_vfiprintf_r+0xa4>
 800e634:	465b      	mov	r3, fp
 800e636:	4622      	mov	r2, r4
 800e638:	4629      	mov	r1, r5
 800e63a:	4630      	mov	r0, r6
 800e63c:	f7ff ffa2 	bl	800e584 <__sfputs_r>
 800e640:	3001      	adds	r0, #1
 800e642:	f000 80a7 	beq.w	800e794 <_vfiprintf_r+0x1ec>
 800e646:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e648:	445a      	add	r2, fp
 800e64a:	9209      	str	r2, [sp, #36]	@ 0x24
 800e64c:	f89a 3000 	ldrb.w	r3, [sl]
 800e650:	2b00      	cmp	r3, #0
 800e652:	f000 809f 	beq.w	800e794 <_vfiprintf_r+0x1ec>
 800e656:	2300      	movs	r3, #0
 800e658:	f04f 32ff 	mov.w	r2, #4294967295
 800e65c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e660:	f10a 0a01 	add.w	sl, sl, #1
 800e664:	9304      	str	r3, [sp, #16]
 800e666:	9307      	str	r3, [sp, #28]
 800e668:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e66c:	931a      	str	r3, [sp, #104]	@ 0x68
 800e66e:	4654      	mov	r4, sl
 800e670:	2205      	movs	r2, #5
 800e672:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e676:	4853      	ldr	r0, [pc, #332]	@ (800e7c4 <_vfiprintf_r+0x21c>)
 800e678:	f7f1 fdba 	bl	80001f0 <memchr>
 800e67c:	9a04      	ldr	r2, [sp, #16]
 800e67e:	b9d8      	cbnz	r0, 800e6b8 <_vfiprintf_r+0x110>
 800e680:	06d1      	lsls	r1, r2, #27
 800e682:	bf44      	itt	mi
 800e684:	2320      	movmi	r3, #32
 800e686:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e68a:	0713      	lsls	r3, r2, #28
 800e68c:	bf44      	itt	mi
 800e68e:	232b      	movmi	r3, #43	@ 0x2b
 800e690:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e694:	f89a 3000 	ldrb.w	r3, [sl]
 800e698:	2b2a      	cmp	r3, #42	@ 0x2a
 800e69a:	d015      	beq.n	800e6c8 <_vfiprintf_r+0x120>
 800e69c:	9a07      	ldr	r2, [sp, #28]
 800e69e:	4654      	mov	r4, sl
 800e6a0:	2000      	movs	r0, #0
 800e6a2:	f04f 0c0a 	mov.w	ip, #10
 800e6a6:	4621      	mov	r1, r4
 800e6a8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e6ac:	3b30      	subs	r3, #48	@ 0x30
 800e6ae:	2b09      	cmp	r3, #9
 800e6b0:	d94b      	bls.n	800e74a <_vfiprintf_r+0x1a2>
 800e6b2:	b1b0      	cbz	r0, 800e6e2 <_vfiprintf_r+0x13a>
 800e6b4:	9207      	str	r2, [sp, #28]
 800e6b6:	e014      	b.n	800e6e2 <_vfiprintf_r+0x13a>
 800e6b8:	eba0 0308 	sub.w	r3, r0, r8
 800e6bc:	fa09 f303 	lsl.w	r3, r9, r3
 800e6c0:	4313      	orrs	r3, r2
 800e6c2:	9304      	str	r3, [sp, #16]
 800e6c4:	46a2      	mov	sl, r4
 800e6c6:	e7d2      	b.n	800e66e <_vfiprintf_r+0xc6>
 800e6c8:	9b03      	ldr	r3, [sp, #12]
 800e6ca:	1d19      	adds	r1, r3, #4
 800e6cc:	681b      	ldr	r3, [r3, #0]
 800e6ce:	9103      	str	r1, [sp, #12]
 800e6d0:	2b00      	cmp	r3, #0
 800e6d2:	bfbb      	ittet	lt
 800e6d4:	425b      	neglt	r3, r3
 800e6d6:	f042 0202 	orrlt.w	r2, r2, #2
 800e6da:	9307      	strge	r3, [sp, #28]
 800e6dc:	9307      	strlt	r3, [sp, #28]
 800e6de:	bfb8      	it	lt
 800e6e0:	9204      	strlt	r2, [sp, #16]
 800e6e2:	7823      	ldrb	r3, [r4, #0]
 800e6e4:	2b2e      	cmp	r3, #46	@ 0x2e
 800e6e6:	d10a      	bne.n	800e6fe <_vfiprintf_r+0x156>
 800e6e8:	7863      	ldrb	r3, [r4, #1]
 800e6ea:	2b2a      	cmp	r3, #42	@ 0x2a
 800e6ec:	d132      	bne.n	800e754 <_vfiprintf_r+0x1ac>
 800e6ee:	9b03      	ldr	r3, [sp, #12]
 800e6f0:	1d1a      	adds	r2, r3, #4
 800e6f2:	681b      	ldr	r3, [r3, #0]
 800e6f4:	9203      	str	r2, [sp, #12]
 800e6f6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e6fa:	3402      	adds	r4, #2
 800e6fc:	9305      	str	r3, [sp, #20]
 800e6fe:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800e7d4 <_vfiprintf_r+0x22c>
 800e702:	7821      	ldrb	r1, [r4, #0]
 800e704:	2203      	movs	r2, #3
 800e706:	4650      	mov	r0, sl
 800e708:	f7f1 fd72 	bl	80001f0 <memchr>
 800e70c:	b138      	cbz	r0, 800e71e <_vfiprintf_r+0x176>
 800e70e:	9b04      	ldr	r3, [sp, #16]
 800e710:	eba0 000a 	sub.w	r0, r0, sl
 800e714:	2240      	movs	r2, #64	@ 0x40
 800e716:	4082      	lsls	r2, r0
 800e718:	4313      	orrs	r3, r2
 800e71a:	3401      	adds	r4, #1
 800e71c:	9304      	str	r3, [sp, #16]
 800e71e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e722:	4829      	ldr	r0, [pc, #164]	@ (800e7c8 <_vfiprintf_r+0x220>)
 800e724:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e728:	2206      	movs	r2, #6
 800e72a:	f7f1 fd61 	bl	80001f0 <memchr>
 800e72e:	2800      	cmp	r0, #0
 800e730:	d03f      	beq.n	800e7b2 <_vfiprintf_r+0x20a>
 800e732:	4b26      	ldr	r3, [pc, #152]	@ (800e7cc <_vfiprintf_r+0x224>)
 800e734:	bb1b      	cbnz	r3, 800e77e <_vfiprintf_r+0x1d6>
 800e736:	9b03      	ldr	r3, [sp, #12]
 800e738:	3307      	adds	r3, #7
 800e73a:	f023 0307 	bic.w	r3, r3, #7
 800e73e:	3308      	adds	r3, #8
 800e740:	9303      	str	r3, [sp, #12]
 800e742:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e744:	443b      	add	r3, r7
 800e746:	9309      	str	r3, [sp, #36]	@ 0x24
 800e748:	e76a      	b.n	800e620 <_vfiprintf_r+0x78>
 800e74a:	fb0c 3202 	mla	r2, ip, r2, r3
 800e74e:	460c      	mov	r4, r1
 800e750:	2001      	movs	r0, #1
 800e752:	e7a8      	b.n	800e6a6 <_vfiprintf_r+0xfe>
 800e754:	2300      	movs	r3, #0
 800e756:	3401      	adds	r4, #1
 800e758:	9305      	str	r3, [sp, #20]
 800e75a:	4619      	mov	r1, r3
 800e75c:	f04f 0c0a 	mov.w	ip, #10
 800e760:	4620      	mov	r0, r4
 800e762:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e766:	3a30      	subs	r2, #48	@ 0x30
 800e768:	2a09      	cmp	r2, #9
 800e76a:	d903      	bls.n	800e774 <_vfiprintf_r+0x1cc>
 800e76c:	2b00      	cmp	r3, #0
 800e76e:	d0c6      	beq.n	800e6fe <_vfiprintf_r+0x156>
 800e770:	9105      	str	r1, [sp, #20]
 800e772:	e7c4      	b.n	800e6fe <_vfiprintf_r+0x156>
 800e774:	fb0c 2101 	mla	r1, ip, r1, r2
 800e778:	4604      	mov	r4, r0
 800e77a:	2301      	movs	r3, #1
 800e77c:	e7f0      	b.n	800e760 <_vfiprintf_r+0x1b8>
 800e77e:	ab03      	add	r3, sp, #12
 800e780:	9300      	str	r3, [sp, #0]
 800e782:	462a      	mov	r2, r5
 800e784:	4b12      	ldr	r3, [pc, #72]	@ (800e7d0 <_vfiprintf_r+0x228>)
 800e786:	a904      	add	r1, sp, #16
 800e788:	4630      	mov	r0, r6
 800e78a:	f7fb fb3d 	bl	8009e08 <_printf_float>
 800e78e:	4607      	mov	r7, r0
 800e790:	1c78      	adds	r0, r7, #1
 800e792:	d1d6      	bne.n	800e742 <_vfiprintf_r+0x19a>
 800e794:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e796:	07d9      	lsls	r1, r3, #31
 800e798:	d405      	bmi.n	800e7a6 <_vfiprintf_r+0x1fe>
 800e79a:	89ab      	ldrh	r3, [r5, #12]
 800e79c:	059a      	lsls	r2, r3, #22
 800e79e:	d402      	bmi.n	800e7a6 <_vfiprintf_r+0x1fe>
 800e7a0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e7a2:	f7fd f90b 	bl	800b9bc <__retarget_lock_release_recursive>
 800e7a6:	89ab      	ldrh	r3, [r5, #12]
 800e7a8:	065b      	lsls	r3, r3, #25
 800e7aa:	f53f af1f 	bmi.w	800e5ec <_vfiprintf_r+0x44>
 800e7ae:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e7b0:	e71e      	b.n	800e5f0 <_vfiprintf_r+0x48>
 800e7b2:	ab03      	add	r3, sp, #12
 800e7b4:	9300      	str	r3, [sp, #0]
 800e7b6:	462a      	mov	r2, r5
 800e7b8:	4b05      	ldr	r3, [pc, #20]	@ (800e7d0 <_vfiprintf_r+0x228>)
 800e7ba:	a904      	add	r1, sp, #16
 800e7bc:	4630      	mov	r0, r6
 800e7be:	f7fb fdbb 	bl	800a338 <_printf_i>
 800e7c2:	e7e4      	b.n	800e78e <_vfiprintf_r+0x1e6>
 800e7c4:	080105b0 	.word	0x080105b0
 800e7c8:	080105ba 	.word	0x080105ba
 800e7cc:	08009e09 	.word	0x08009e09
 800e7d0:	0800e585 	.word	0x0800e585
 800e7d4:	080105b6 	.word	0x080105b6

0800e7d8 <__swbuf_r>:
 800e7d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e7da:	460e      	mov	r6, r1
 800e7dc:	4614      	mov	r4, r2
 800e7de:	4605      	mov	r5, r0
 800e7e0:	b118      	cbz	r0, 800e7ea <__swbuf_r+0x12>
 800e7e2:	6a03      	ldr	r3, [r0, #32]
 800e7e4:	b90b      	cbnz	r3, 800e7ea <__swbuf_r+0x12>
 800e7e6:	f7fc f967 	bl	800aab8 <__sinit>
 800e7ea:	69a3      	ldr	r3, [r4, #24]
 800e7ec:	60a3      	str	r3, [r4, #8]
 800e7ee:	89a3      	ldrh	r3, [r4, #12]
 800e7f0:	071a      	lsls	r2, r3, #28
 800e7f2:	d501      	bpl.n	800e7f8 <__swbuf_r+0x20>
 800e7f4:	6923      	ldr	r3, [r4, #16]
 800e7f6:	b943      	cbnz	r3, 800e80a <__swbuf_r+0x32>
 800e7f8:	4621      	mov	r1, r4
 800e7fa:	4628      	mov	r0, r5
 800e7fc:	f000 f82a 	bl	800e854 <__swsetup_r>
 800e800:	b118      	cbz	r0, 800e80a <__swbuf_r+0x32>
 800e802:	f04f 37ff 	mov.w	r7, #4294967295
 800e806:	4638      	mov	r0, r7
 800e808:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e80a:	6823      	ldr	r3, [r4, #0]
 800e80c:	6922      	ldr	r2, [r4, #16]
 800e80e:	1a98      	subs	r0, r3, r2
 800e810:	6963      	ldr	r3, [r4, #20]
 800e812:	b2f6      	uxtb	r6, r6
 800e814:	4283      	cmp	r3, r0
 800e816:	4637      	mov	r7, r6
 800e818:	dc05      	bgt.n	800e826 <__swbuf_r+0x4e>
 800e81a:	4621      	mov	r1, r4
 800e81c:	4628      	mov	r0, r5
 800e81e:	f7ff fd53 	bl	800e2c8 <_fflush_r>
 800e822:	2800      	cmp	r0, #0
 800e824:	d1ed      	bne.n	800e802 <__swbuf_r+0x2a>
 800e826:	68a3      	ldr	r3, [r4, #8]
 800e828:	3b01      	subs	r3, #1
 800e82a:	60a3      	str	r3, [r4, #8]
 800e82c:	6823      	ldr	r3, [r4, #0]
 800e82e:	1c5a      	adds	r2, r3, #1
 800e830:	6022      	str	r2, [r4, #0]
 800e832:	701e      	strb	r6, [r3, #0]
 800e834:	6962      	ldr	r2, [r4, #20]
 800e836:	1c43      	adds	r3, r0, #1
 800e838:	429a      	cmp	r2, r3
 800e83a:	d004      	beq.n	800e846 <__swbuf_r+0x6e>
 800e83c:	89a3      	ldrh	r3, [r4, #12]
 800e83e:	07db      	lsls	r3, r3, #31
 800e840:	d5e1      	bpl.n	800e806 <__swbuf_r+0x2e>
 800e842:	2e0a      	cmp	r6, #10
 800e844:	d1df      	bne.n	800e806 <__swbuf_r+0x2e>
 800e846:	4621      	mov	r1, r4
 800e848:	4628      	mov	r0, r5
 800e84a:	f7ff fd3d 	bl	800e2c8 <_fflush_r>
 800e84e:	2800      	cmp	r0, #0
 800e850:	d0d9      	beq.n	800e806 <__swbuf_r+0x2e>
 800e852:	e7d6      	b.n	800e802 <__swbuf_r+0x2a>

0800e854 <__swsetup_r>:
 800e854:	b538      	push	{r3, r4, r5, lr}
 800e856:	4b29      	ldr	r3, [pc, #164]	@ (800e8fc <__swsetup_r+0xa8>)
 800e858:	4605      	mov	r5, r0
 800e85a:	6818      	ldr	r0, [r3, #0]
 800e85c:	460c      	mov	r4, r1
 800e85e:	b118      	cbz	r0, 800e868 <__swsetup_r+0x14>
 800e860:	6a03      	ldr	r3, [r0, #32]
 800e862:	b90b      	cbnz	r3, 800e868 <__swsetup_r+0x14>
 800e864:	f7fc f928 	bl	800aab8 <__sinit>
 800e868:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e86c:	0719      	lsls	r1, r3, #28
 800e86e:	d422      	bmi.n	800e8b6 <__swsetup_r+0x62>
 800e870:	06da      	lsls	r2, r3, #27
 800e872:	d407      	bmi.n	800e884 <__swsetup_r+0x30>
 800e874:	2209      	movs	r2, #9
 800e876:	602a      	str	r2, [r5, #0]
 800e878:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e87c:	81a3      	strh	r3, [r4, #12]
 800e87e:	f04f 30ff 	mov.w	r0, #4294967295
 800e882:	e033      	b.n	800e8ec <__swsetup_r+0x98>
 800e884:	0758      	lsls	r0, r3, #29
 800e886:	d512      	bpl.n	800e8ae <__swsetup_r+0x5a>
 800e888:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e88a:	b141      	cbz	r1, 800e89e <__swsetup_r+0x4a>
 800e88c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e890:	4299      	cmp	r1, r3
 800e892:	d002      	beq.n	800e89a <__swsetup_r+0x46>
 800e894:	4628      	mov	r0, r5
 800e896:	f7fd ff0f 	bl	800c6b8 <_free_r>
 800e89a:	2300      	movs	r3, #0
 800e89c:	6363      	str	r3, [r4, #52]	@ 0x34
 800e89e:	89a3      	ldrh	r3, [r4, #12]
 800e8a0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800e8a4:	81a3      	strh	r3, [r4, #12]
 800e8a6:	2300      	movs	r3, #0
 800e8a8:	6063      	str	r3, [r4, #4]
 800e8aa:	6923      	ldr	r3, [r4, #16]
 800e8ac:	6023      	str	r3, [r4, #0]
 800e8ae:	89a3      	ldrh	r3, [r4, #12]
 800e8b0:	f043 0308 	orr.w	r3, r3, #8
 800e8b4:	81a3      	strh	r3, [r4, #12]
 800e8b6:	6923      	ldr	r3, [r4, #16]
 800e8b8:	b94b      	cbnz	r3, 800e8ce <__swsetup_r+0x7a>
 800e8ba:	89a3      	ldrh	r3, [r4, #12]
 800e8bc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800e8c0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e8c4:	d003      	beq.n	800e8ce <__swsetup_r+0x7a>
 800e8c6:	4621      	mov	r1, r4
 800e8c8:	4628      	mov	r0, r5
 800e8ca:	f000 f883 	bl	800e9d4 <__smakebuf_r>
 800e8ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e8d2:	f013 0201 	ands.w	r2, r3, #1
 800e8d6:	d00a      	beq.n	800e8ee <__swsetup_r+0x9a>
 800e8d8:	2200      	movs	r2, #0
 800e8da:	60a2      	str	r2, [r4, #8]
 800e8dc:	6962      	ldr	r2, [r4, #20]
 800e8de:	4252      	negs	r2, r2
 800e8e0:	61a2      	str	r2, [r4, #24]
 800e8e2:	6922      	ldr	r2, [r4, #16]
 800e8e4:	b942      	cbnz	r2, 800e8f8 <__swsetup_r+0xa4>
 800e8e6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800e8ea:	d1c5      	bne.n	800e878 <__swsetup_r+0x24>
 800e8ec:	bd38      	pop	{r3, r4, r5, pc}
 800e8ee:	0799      	lsls	r1, r3, #30
 800e8f0:	bf58      	it	pl
 800e8f2:	6962      	ldrpl	r2, [r4, #20]
 800e8f4:	60a2      	str	r2, [r4, #8]
 800e8f6:	e7f4      	b.n	800e8e2 <__swsetup_r+0x8e>
 800e8f8:	2000      	movs	r0, #0
 800e8fa:	e7f7      	b.n	800e8ec <__swsetup_r+0x98>
 800e8fc:	2000019c 	.word	0x2000019c

0800e900 <_raise_r>:
 800e900:	291f      	cmp	r1, #31
 800e902:	b538      	push	{r3, r4, r5, lr}
 800e904:	4605      	mov	r5, r0
 800e906:	460c      	mov	r4, r1
 800e908:	d904      	bls.n	800e914 <_raise_r+0x14>
 800e90a:	2316      	movs	r3, #22
 800e90c:	6003      	str	r3, [r0, #0]
 800e90e:	f04f 30ff 	mov.w	r0, #4294967295
 800e912:	bd38      	pop	{r3, r4, r5, pc}
 800e914:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800e916:	b112      	cbz	r2, 800e91e <_raise_r+0x1e>
 800e918:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e91c:	b94b      	cbnz	r3, 800e932 <_raise_r+0x32>
 800e91e:	4628      	mov	r0, r5
 800e920:	f000 f830 	bl	800e984 <_getpid_r>
 800e924:	4622      	mov	r2, r4
 800e926:	4601      	mov	r1, r0
 800e928:	4628      	mov	r0, r5
 800e92a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e92e:	f000 b817 	b.w	800e960 <_kill_r>
 800e932:	2b01      	cmp	r3, #1
 800e934:	d00a      	beq.n	800e94c <_raise_r+0x4c>
 800e936:	1c59      	adds	r1, r3, #1
 800e938:	d103      	bne.n	800e942 <_raise_r+0x42>
 800e93a:	2316      	movs	r3, #22
 800e93c:	6003      	str	r3, [r0, #0]
 800e93e:	2001      	movs	r0, #1
 800e940:	e7e7      	b.n	800e912 <_raise_r+0x12>
 800e942:	2100      	movs	r1, #0
 800e944:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800e948:	4620      	mov	r0, r4
 800e94a:	4798      	blx	r3
 800e94c:	2000      	movs	r0, #0
 800e94e:	e7e0      	b.n	800e912 <_raise_r+0x12>

0800e950 <raise>:
 800e950:	4b02      	ldr	r3, [pc, #8]	@ (800e95c <raise+0xc>)
 800e952:	4601      	mov	r1, r0
 800e954:	6818      	ldr	r0, [r3, #0]
 800e956:	f7ff bfd3 	b.w	800e900 <_raise_r>
 800e95a:	bf00      	nop
 800e95c:	2000019c 	.word	0x2000019c

0800e960 <_kill_r>:
 800e960:	b538      	push	{r3, r4, r5, lr}
 800e962:	4d07      	ldr	r5, [pc, #28]	@ (800e980 <_kill_r+0x20>)
 800e964:	2300      	movs	r3, #0
 800e966:	4604      	mov	r4, r0
 800e968:	4608      	mov	r0, r1
 800e96a:	4611      	mov	r1, r2
 800e96c:	602b      	str	r3, [r5, #0]
 800e96e:	f7f5 fdab 	bl	80044c8 <_kill>
 800e972:	1c43      	adds	r3, r0, #1
 800e974:	d102      	bne.n	800e97c <_kill_r+0x1c>
 800e976:	682b      	ldr	r3, [r5, #0]
 800e978:	b103      	cbz	r3, 800e97c <_kill_r+0x1c>
 800e97a:	6023      	str	r3, [r4, #0]
 800e97c:	bd38      	pop	{r3, r4, r5, pc}
 800e97e:	bf00      	nop
 800e980:	200070cc 	.word	0x200070cc

0800e984 <_getpid_r>:
 800e984:	f7f5 bd9e 	b.w	80044c4 <_getpid>

0800e988 <__swhatbuf_r>:
 800e988:	b570      	push	{r4, r5, r6, lr}
 800e98a:	460c      	mov	r4, r1
 800e98c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e990:	2900      	cmp	r1, #0
 800e992:	b096      	sub	sp, #88	@ 0x58
 800e994:	4615      	mov	r5, r2
 800e996:	461e      	mov	r6, r3
 800e998:	da0d      	bge.n	800e9b6 <__swhatbuf_r+0x2e>
 800e99a:	89a3      	ldrh	r3, [r4, #12]
 800e99c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800e9a0:	f04f 0100 	mov.w	r1, #0
 800e9a4:	bf14      	ite	ne
 800e9a6:	2340      	movne	r3, #64	@ 0x40
 800e9a8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800e9ac:	2000      	movs	r0, #0
 800e9ae:	6031      	str	r1, [r6, #0]
 800e9b0:	602b      	str	r3, [r5, #0]
 800e9b2:	b016      	add	sp, #88	@ 0x58
 800e9b4:	bd70      	pop	{r4, r5, r6, pc}
 800e9b6:	466a      	mov	r2, sp
 800e9b8:	f000 f848 	bl	800ea4c <_fstat_r>
 800e9bc:	2800      	cmp	r0, #0
 800e9be:	dbec      	blt.n	800e99a <__swhatbuf_r+0x12>
 800e9c0:	9901      	ldr	r1, [sp, #4]
 800e9c2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800e9c6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800e9ca:	4259      	negs	r1, r3
 800e9cc:	4159      	adcs	r1, r3
 800e9ce:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e9d2:	e7eb      	b.n	800e9ac <__swhatbuf_r+0x24>

0800e9d4 <__smakebuf_r>:
 800e9d4:	898b      	ldrh	r3, [r1, #12]
 800e9d6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e9d8:	079d      	lsls	r5, r3, #30
 800e9da:	4606      	mov	r6, r0
 800e9dc:	460c      	mov	r4, r1
 800e9de:	d507      	bpl.n	800e9f0 <__smakebuf_r+0x1c>
 800e9e0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800e9e4:	6023      	str	r3, [r4, #0]
 800e9e6:	6123      	str	r3, [r4, #16]
 800e9e8:	2301      	movs	r3, #1
 800e9ea:	6163      	str	r3, [r4, #20]
 800e9ec:	b003      	add	sp, #12
 800e9ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e9f0:	ab01      	add	r3, sp, #4
 800e9f2:	466a      	mov	r2, sp
 800e9f4:	f7ff ffc8 	bl	800e988 <__swhatbuf_r>
 800e9f8:	9f00      	ldr	r7, [sp, #0]
 800e9fa:	4605      	mov	r5, r0
 800e9fc:	4639      	mov	r1, r7
 800e9fe:	4630      	mov	r0, r6
 800ea00:	f7fa fa46 	bl	8008e90 <_malloc_r>
 800ea04:	b948      	cbnz	r0, 800ea1a <__smakebuf_r+0x46>
 800ea06:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ea0a:	059a      	lsls	r2, r3, #22
 800ea0c:	d4ee      	bmi.n	800e9ec <__smakebuf_r+0x18>
 800ea0e:	f023 0303 	bic.w	r3, r3, #3
 800ea12:	f043 0302 	orr.w	r3, r3, #2
 800ea16:	81a3      	strh	r3, [r4, #12]
 800ea18:	e7e2      	b.n	800e9e0 <__smakebuf_r+0xc>
 800ea1a:	89a3      	ldrh	r3, [r4, #12]
 800ea1c:	6020      	str	r0, [r4, #0]
 800ea1e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ea22:	81a3      	strh	r3, [r4, #12]
 800ea24:	9b01      	ldr	r3, [sp, #4]
 800ea26:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800ea2a:	b15b      	cbz	r3, 800ea44 <__smakebuf_r+0x70>
 800ea2c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ea30:	4630      	mov	r0, r6
 800ea32:	f000 f81d 	bl	800ea70 <_isatty_r>
 800ea36:	b128      	cbz	r0, 800ea44 <__smakebuf_r+0x70>
 800ea38:	89a3      	ldrh	r3, [r4, #12]
 800ea3a:	f023 0303 	bic.w	r3, r3, #3
 800ea3e:	f043 0301 	orr.w	r3, r3, #1
 800ea42:	81a3      	strh	r3, [r4, #12]
 800ea44:	89a3      	ldrh	r3, [r4, #12]
 800ea46:	431d      	orrs	r5, r3
 800ea48:	81a5      	strh	r5, [r4, #12]
 800ea4a:	e7cf      	b.n	800e9ec <__smakebuf_r+0x18>

0800ea4c <_fstat_r>:
 800ea4c:	b538      	push	{r3, r4, r5, lr}
 800ea4e:	4d07      	ldr	r5, [pc, #28]	@ (800ea6c <_fstat_r+0x20>)
 800ea50:	2300      	movs	r3, #0
 800ea52:	4604      	mov	r4, r0
 800ea54:	4608      	mov	r0, r1
 800ea56:	4611      	mov	r1, r2
 800ea58:	602b      	str	r3, [r5, #0]
 800ea5a:	f7f5 fd62 	bl	8004522 <_fstat>
 800ea5e:	1c43      	adds	r3, r0, #1
 800ea60:	d102      	bne.n	800ea68 <_fstat_r+0x1c>
 800ea62:	682b      	ldr	r3, [r5, #0]
 800ea64:	b103      	cbz	r3, 800ea68 <_fstat_r+0x1c>
 800ea66:	6023      	str	r3, [r4, #0]
 800ea68:	bd38      	pop	{r3, r4, r5, pc}
 800ea6a:	bf00      	nop
 800ea6c:	200070cc 	.word	0x200070cc

0800ea70 <_isatty_r>:
 800ea70:	b538      	push	{r3, r4, r5, lr}
 800ea72:	4d06      	ldr	r5, [pc, #24]	@ (800ea8c <_isatty_r+0x1c>)
 800ea74:	2300      	movs	r3, #0
 800ea76:	4604      	mov	r4, r0
 800ea78:	4608      	mov	r0, r1
 800ea7a:	602b      	str	r3, [r5, #0]
 800ea7c:	f7f5 fd56 	bl	800452c <_isatty>
 800ea80:	1c43      	adds	r3, r0, #1
 800ea82:	d102      	bne.n	800ea8a <_isatty_r+0x1a>
 800ea84:	682b      	ldr	r3, [r5, #0]
 800ea86:	b103      	cbz	r3, 800ea8a <_isatty_r+0x1a>
 800ea88:	6023      	str	r3, [r4, #0]
 800ea8a:	bd38      	pop	{r3, r4, r5, pc}
 800ea8c:	200070cc 	.word	0x200070cc

0800ea90 <round>:
 800ea90:	ec51 0b10 	vmov	r0, r1, d0
 800ea94:	b570      	push	{r4, r5, r6, lr}
 800ea96:	f3c1 540a 	ubfx	r4, r1, #20, #11
 800ea9a:	f2a4 32ff 	subw	r2, r4, #1023	@ 0x3ff
 800ea9e:	2a13      	cmp	r2, #19
 800eaa0:	460b      	mov	r3, r1
 800eaa2:	4605      	mov	r5, r0
 800eaa4:	dc1b      	bgt.n	800eade <round+0x4e>
 800eaa6:	2a00      	cmp	r2, #0
 800eaa8:	da0b      	bge.n	800eac2 <round+0x32>
 800eaaa:	f001 4300 	and.w	r3, r1, #2147483648	@ 0x80000000
 800eaae:	3201      	adds	r2, #1
 800eab0:	bf04      	itt	eq
 800eab2:	f043 537f 	orreq.w	r3, r3, #1069547520	@ 0x3fc00000
 800eab6:	f443 1340 	orreq.w	r3, r3, #3145728	@ 0x300000
 800eaba:	2200      	movs	r2, #0
 800eabc:	4619      	mov	r1, r3
 800eabe:	4610      	mov	r0, r2
 800eac0:	e015      	b.n	800eaee <round+0x5e>
 800eac2:	4c15      	ldr	r4, [pc, #84]	@ (800eb18 <round+0x88>)
 800eac4:	4114      	asrs	r4, r2
 800eac6:	ea04 0601 	and.w	r6, r4, r1
 800eaca:	4306      	orrs	r6, r0
 800eacc:	d00f      	beq.n	800eaee <round+0x5e>
 800eace:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 800ead2:	fa41 f202 	asr.w	r2, r1, r2
 800ead6:	4413      	add	r3, r2
 800ead8:	ea23 0304 	bic.w	r3, r3, r4
 800eadc:	e7ed      	b.n	800eaba <round+0x2a>
 800eade:	2a33      	cmp	r2, #51	@ 0x33
 800eae0:	dd08      	ble.n	800eaf4 <round+0x64>
 800eae2:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 800eae6:	d102      	bne.n	800eaee <round+0x5e>
 800eae8:	4602      	mov	r2, r0
 800eaea:	f7f1 fbdf 	bl	80002ac <__adddf3>
 800eaee:	ec41 0b10 	vmov	d0, r0, r1
 800eaf2:	bd70      	pop	{r4, r5, r6, pc}
 800eaf4:	f2a4 4613 	subw	r6, r4, #1043	@ 0x413
 800eaf8:	f04f 34ff 	mov.w	r4, #4294967295
 800eafc:	40f4      	lsrs	r4, r6
 800eafe:	4204      	tst	r4, r0
 800eb00:	d0f5      	beq.n	800eaee <round+0x5e>
 800eb02:	f1c2 0133 	rsb	r1, r2, #51	@ 0x33
 800eb06:	2201      	movs	r2, #1
 800eb08:	408a      	lsls	r2, r1
 800eb0a:	1952      	adds	r2, r2, r5
 800eb0c:	bf28      	it	cs
 800eb0e:	3301      	addcs	r3, #1
 800eb10:	ea22 0204 	bic.w	r2, r2, r4
 800eb14:	e7d2      	b.n	800eabc <round+0x2c>
 800eb16:	bf00      	nop
 800eb18:	000fffff 	.word	0x000fffff

0800eb1c <_init>:
 800eb1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eb1e:	bf00      	nop
 800eb20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800eb22:	bc08      	pop	{r3}
 800eb24:	469e      	mov	lr, r3
 800eb26:	4770      	bx	lr

0800eb28 <_fini>:
 800eb28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eb2a:	bf00      	nop
 800eb2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800eb2e:	bc08      	pop	{r3}
 800eb30:	469e      	mov	lr, r3
 800eb32:	4770      	bx	lr
=======
 80069d0:	bd10      	pop	{r4, pc}
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80069d2:	4619      	mov	r1, r3
 80069d4:	e7f8      	b.n	80069c8 <prvInsertBlockIntoFreeList+0x34>
 80069d6:	bf00      	nop
 80069d8:	200025fc 	.word	0x200025fc
 80069dc:	200025f8 	.word	0x200025f8

080069e0 <pvPortMalloc>:
{
 80069e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80069e4:	4604      	mov	r4, r0
	vTaskSuspendAll();
 80069e6:	f7ff fbaf 	bl	8006148 <vTaskSuspendAll>
		if( pxEnd == NULL )
 80069ea:	493f      	ldr	r1, [pc, #252]	@ (8006ae8 <pvPortMalloc+0x108>)
 80069ec:	4d3f      	ldr	r5, [pc, #252]	@ (8006aec <pvPortMalloc+0x10c>)
 80069ee:	680b      	ldr	r3, [r1, #0]
 80069f0:	b9fb      	cbnz	r3, 8006a32 <pvPortMalloc+0x52>
	uxAddress = ( size_t ) ucHeap;
 80069f2:	4a3f      	ldr	r2, [pc, #252]	@ (8006af0 <pvPortMalloc+0x110>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80069f4:	0756      	lsls	r6, r2, #29
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80069f6:	bf1c      	itt	ne
 80069f8:	3207      	addne	r2, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80069fa:	4b3e      	ldrne	r3, [pc, #248]	@ (8006af4 <pvPortMalloc+0x114>)
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80069fc:	4e3e      	ldr	r6, [pc, #248]	@ (8006af8 <pvPortMalloc+0x118>)
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80069fe:	bf1a      	itte	ne
 8006a00:	f022 0207 	bicne.w	r2, r2, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006a04:	1a9b      	subne	r3, r3, r2
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006a06:	f244 6350 	movweq	r3, #18000	@ 0x4650
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006a0a:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 8006a0c:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006a0e:	f023 0307 	bic.w	r3, r3, #7
	xStart.xBlockSize = ( size_t ) 0;
 8006a12:	2000      	movs	r0, #0
 8006a14:	6070      	str	r0, [r6, #4]
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006a16:	6032      	str	r2, [r6, #0]
	pxEnd->pxNextFreeBlock = NULL;
 8006a18:	e9c3 0000 	strd	r0, r0, [r3]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006a1c:	1a98      	subs	r0, r3, r2
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006a1e:	e9c2 3000 	strd	r3, r0, [r2]
	pxEnd = ( void * ) uxAddress;
 8006a22:	600b      	str	r3, [r1, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006a24:	4b35      	ldr	r3, [pc, #212]	@ (8006afc <pvPortMalloc+0x11c>)
 8006a26:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006a28:	4b35      	ldr	r3, [pc, #212]	@ (8006b00 <pvPortMalloc+0x120>)
 8006a2a:	6018      	str	r0, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006a2c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8006a30:	602b      	str	r3, [r5, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006a32:	682e      	ldr	r6, [r5, #0]
 8006a34:	4226      	tst	r6, r4
 8006a36:	d152      	bne.n	8006ade <pvPortMalloc+0xfe>
			if( xWantedSize > 0 )
 8006a38:	2c00      	cmp	r4, #0
 8006a3a:	d043      	beq.n	8006ac4 <pvPortMalloc+0xe4>
				xWantedSize += xHeapStructSize;
 8006a3c:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006a40:	0760      	lsls	r0, r4, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006a42:	bf1c      	itt	ne
 8006a44:	f023 0307 	bicne.w	r3, r3, #7
 8006a48:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d047      	beq.n	8006ade <pvPortMalloc+0xfe>
 8006a4e:	4f2c      	ldr	r7, [pc, #176]	@ (8006b00 <pvPortMalloc+0x120>)
 8006a50:	683c      	ldr	r4, [r7, #0]
 8006a52:	429c      	cmp	r4, r3
 8006a54:	d343      	bcc.n	8006ade <pvPortMalloc+0xfe>
				pxBlock = xStart.pxNextFreeBlock;
 8006a56:	4a28      	ldr	r2, [pc, #160]	@ (8006af8 <pvPortMalloc+0x118>)
 8006a58:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006a5a:	6868      	ldr	r0, [r5, #4]
 8006a5c:	4298      	cmp	r0, r3
 8006a5e:	d204      	bcs.n	8006a6a <pvPortMalloc+0x8a>
 8006a60:	f8d5 c000 	ldr.w	ip, [r5]
 8006a64:	f1bc 0f00 	cmp.w	ip, #0
 8006a68:	d115      	bne.n	8006a96 <pvPortMalloc+0xb6>
				if( pxBlock != pxEnd )
 8006a6a:	6809      	ldr	r1, [r1, #0]
 8006a6c:	42a9      	cmp	r1, r5
 8006a6e:	d036      	beq.n	8006ade <pvPortMalloc+0xfe>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006a70:	6829      	ldr	r1, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006a72:	f8d2 8000 	ldr.w	r8, [r2]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006a76:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006a78:	1ac2      	subs	r2, r0, r3
 8006a7a:	2a10      	cmp	r2, #16
 8006a7c:	d912      	bls.n	8006aa4 <pvPortMalloc+0xc4>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006a7e:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006a80:	0741      	lsls	r1, r0, #29
 8006a82:	d00b      	beq.n	8006a9c <pvPortMalloc+0xbc>
 8006a84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a88:	f383 8811 	msr	BASEPRI, r3
 8006a8c:	f3bf 8f6f 	isb	sy
 8006a90:	f3bf 8f4f 	dsb	sy
 8006a94:	e7fe      	b.n	8006a94 <pvPortMalloc+0xb4>
 8006a96:	462a      	mov	r2, r5
 8006a98:	4665      	mov	r5, ip
 8006a9a:	e7de      	b.n	8006a5a <pvPortMalloc+0x7a>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006a9c:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006a9e:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006aa0:	f7ff ff78 	bl	8006994 <prvInsertBlockIntoFreeList>
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006aa4:	4915      	ldr	r1, [pc, #84]	@ (8006afc <pvPortMalloc+0x11c>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006aa6:	686a      	ldr	r2, [r5, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006aa8:	6808      	ldr	r0, [r1, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006aaa:	1aa4      	subs	r4, r4, r2
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006aac:	4284      	cmp	r4, r0
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006aae:	ea46 0602 	orr.w	r6, r6, r2
					pxBlock->pxNextFreeBlock = NULL;
 8006ab2:	f04f 0300 	mov.w	r3, #0
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006ab6:	603c      	str	r4, [r7, #0]
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006ab8:	bf38      	it	cc
 8006aba:	600c      	strcc	r4, [r1, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006abc:	606e      	str	r6, [r5, #4]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006abe:	f108 0408 	add.w	r4, r8, #8
					pxBlock->pxNextFreeBlock = NULL;
 8006ac2:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
 8006ac4:	f7ff fbe0 	bl	8006288 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006ac8:	0763      	lsls	r3, r4, #29
 8006aca:	d00a      	beq.n	8006ae2 <pvPortMalloc+0x102>
 8006acc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ad0:	f383 8811 	msr	BASEPRI, r3
 8006ad4:	f3bf 8f6f 	isb	sy
 8006ad8:	f3bf 8f4f 	dsb	sy
 8006adc:	e7fe      	b.n	8006adc <pvPortMalloc+0xfc>
void *pvReturn = NULL;
 8006ade:	2400      	movs	r4, #0
 8006ae0:	e7f0      	b.n	8006ac4 <pvPortMalloc+0xe4>
}
 8006ae2:	4620      	mov	r0, r4
 8006ae4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006ae8:	200025f8 	.word	0x200025f8
 8006aec:	200025ec 	.word	0x200025ec
 8006af0:	20002604 	.word	0x20002604
 8006af4:	20006c54 	.word	0x20006c54
 8006af8:	200025fc 	.word	0x200025fc
 8006afc:	200025f0 	.word	0x200025f0
 8006b00:	200025f4 	.word	0x200025f4

08006b04 <vPortFree>:
{
 8006b04:	b510      	push	{r4, lr}
	if( pv != NULL )
 8006b06:	4604      	mov	r4, r0
 8006b08:	b370      	cbz	r0, 8006b68 <vPortFree+0x64>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006b0a:	4a18      	ldr	r2, [pc, #96]	@ (8006b6c <vPortFree+0x68>)
 8006b0c:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8006b10:	6812      	ldr	r2, [r2, #0]
 8006b12:	4213      	tst	r3, r2
 8006b14:	d108      	bne.n	8006b28 <vPortFree+0x24>
 8006b16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b1a:	f383 8811 	msr	BASEPRI, r3
 8006b1e:	f3bf 8f6f 	isb	sy
 8006b22:	f3bf 8f4f 	dsb	sy
 8006b26:	e7fe      	b.n	8006b26 <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006b28:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8006b2c:	b141      	cbz	r1, 8006b40 <vPortFree+0x3c>
 8006b2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b32:	f383 8811 	msr	BASEPRI, r3
 8006b36:	f3bf 8f6f 	isb	sy
 8006b3a:	f3bf 8f4f 	dsb	sy
 8006b3e:	e7fe      	b.n	8006b3e <vPortFree+0x3a>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006b40:	ea23 0302 	bic.w	r3, r3, r2
 8006b44:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 8006b48:	f7ff fafe 	bl	8006148 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006b4c:	4a08      	ldr	r2, [pc, #32]	@ (8006b70 <vPortFree+0x6c>)
 8006b4e:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8006b52:	6811      	ldr	r1, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006b54:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006b58:	440b      	add	r3, r1
 8006b5a:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006b5c:	f7ff ff1a 	bl	8006994 <prvInsertBlockIntoFreeList>
}
 8006b60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 8006b64:	f7ff bb90 	b.w	8006288 <xTaskResumeAll>
}
 8006b68:	bd10      	pop	{r4, pc}
 8006b6a:	bf00      	nop
 8006b6c:	200025ec 	.word	0x200025ec
 8006b70:	200025f4 	.word	0x200025f4

08006b74 <malloc>:
 8006b74:	4b02      	ldr	r3, [pc, #8]	@ (8006b80 <malloc+0xc>)
 8006b76:	4601      	mov	r1, r0
 8006b78:	6818      	ldr	r0, [r3, #0]
 8006b7a:	f000 b82d 	b.w	8006bd8 <_malloc_r>
 8006b7e:	bf00      	nop
 8006b80:	2000019c 	.word	0x2000019c

08006b84 <free>:
 8006b84:	4b02      	ldr	r3, [pc, #8]	@ (8006b90 <free+0xc>)
 8006b86:	4601      	mov	r1, r0
 8006b88:	6818      	ldr	r0, [r3, #0]
 8006b8a:	f003 bc05 	b.w	800a398 <_free_r>
 8006b8e:	bf00      	nop
 8006b90:	2000019c 	.word	0x2000019c

08006b94 <sbrk_aligned>:
 8006b94:	b570      	push	{r4, r5, r6, lr}
 8006b96:	4e0f      	ldr	r6, [pc, #60]	@ (8006bd4 <sbrk_aligned+0x40>)
 8006b98:	460c      	mov	r4, r1
 8006b9a:	6831      	ldr	r1, [r6, #0]
 8006b9c:	4605      	mov	r5, r0
 8006b9e:	b911      	cbnz	r1, 8006ba6 <sbrk_aligned+0x12>
 8006ba0:	f002 fd2e 	bl	8009600 <_sbrk_r>
 8006ba4:	6030      	str	r0, [r6, #0]
 8006ba6:	4621      	mov	r1, r4
 8006ba8:	4628      	mov	r0, r5
 8006baa:	f002 fd29 	bl	8009600 <_sbrk_r>
 8006bae:	1c43      	adds	r3, r0, #1
 8006bb0:	d103      	bne.n	8006bba <sbrk_aligned+0x26>
 8006bb2:	f04f 34ff 	mov.w	r4, #4294967295
 8006bb6:	4620      	mov	r0, r4
 8006bb8:	bd70      	pop	{r4, r5, r6, pc}
 8006bba:	1cc4      	adds	r4, r0, #3
 8006bbc:	f024 0403 	bic.w	r4, r4, #3
 8006bc0:	42a0      	cmp	r0, r4
 8006bc2:	d0f8      	beq.n	8006bb6 <sbrk_aligned+0x22>
 8006bc4:	1a21      	subs	r1, r4, r0
 8006bc6:	4628      	mov	r0, r5
 8006bc8:	f002 fd1a 	bl	8009600 <_sbrk_r>
 8006bcc:	3001      	adds	r0, #1
 8006bce:	d1f2      	bne.n	8006bb6 <sbrk_aligned+0x22>
 8006bd0:	e7ef      	b.n	8006bb2 <sbrk_aligned+0x1e>
 8006bd2:	bf00      	nop
 8006bd4:	20006c54 	.word	0x20006c54

08006bd8 <_malloc_r>:
 8006bd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006bdc:	1ccd      	adds	r5, r1, #3
 8006bde:	f025 0503 	bic.w	r5, r5, #3
 8006be2:	3508      	adds	r5, #8
 8006be4:	2d0c      	cmp	r5, #12
 8006be6:	bf38      	it	cc
 8006be8:	250c      	movcc	r5, #12
 8006bea:	2d00      	cmp	r5, #0
 8006bec:	4606      	mov	r6, r0
 8006bee:	db01      	blt.n	8006bf4 <_malloc_r+0x1c>
 8006bf0:	42a9      	cmp	r1, r5
 8006bf2:	d904      	bls.n	8006bfe <_malloc_r+0x26>
 8006bf4:	230c      	movs	r3, #12
 8006bf6:	6033      	str	r3, [r6, #0]
 8006bf8:	2000      	movs	r0, #0
 8006bfa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006bfe:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006cd4 <_malloc_r+0xfc>
 8006c02:	f000 f869 	bl	8006cd8 <__malloc_lock>
 8006c06:	f8d8 3000 	ldr.w	r3, [r8]
 8006c0a:	461c      	mov	r4, r3
 8006c0c:	bb44      	cbnz	r4, 8006c60 <_malloc_r+0x88>
 8006c0e:	4629      	mov	r1, r5
 8006c10:	4630      	mov	r0, r6
 8006c12:	f7ff ffbf 	bl	8006b94 <sbrk_aligned>
 8006c16:	1c43      	adds	r3, r0, #1
 8006c18:	4604      	mov	r4, r0
 8006c1a:	d158      	bne.n	8006cce <_malloc_r+0xf6>
 8006c1c:	f8d8 4000 	ldr.w	r4, [r8]
 8006c20:	4627      	mov	r7, r4
 8006c22:	2f00      	cmp	r7, #0
 8006c24:	d143      	bne.n	8006cae <_malloc_r+0xd6>
 8006c26:	2c00      	cmp	r4, #0
 8006c28:	d04b      	beq.n	8006cc2 <_malloc_r+0xea>
 8006c2a:	6823      	ldr	r3, [r4, #0]
 8006c2c:	4639      	mov	r1, r7
 8006c2e:	4630      	mov	r0, r6
 8006c30:	eb04 0903 	add.w	r9, r4, r3
 8006c34:	f002 fce4 	bl	8009600 <_sbrk_r>
 8006c38:	4581      	cmp	r9, r0
 8006c3a:	d142      	bne.n	8006cc2 <_malloc_r+0xea>
 8006c3c:	6821      	ldr	r1, [r4, #0]
 8006c3e:	1a6d      	subs	r5, r5, r1
 8006c40:	4629      	mov	r1, r5
 8006c42:	4630      	mov	r0, r6
 8006c44:	f7ff ffa6 	bl	8006b94 <sbrk_aligned>
 8006c48:	3001      	adds	r0, #1
 8006c4a:	d03a      	beq.n	8006cc2 <_malloc_r+0xea>
 8006c4c:	6823      	ldr	r3, [r4, #0]
 8006c4e:	442b      	add	r3, r5
 8006c50:	6023      	str	r3, [r4, #0]
 8006c52:	f8d8 3000 	ldr.w	r3, [r8]
 8006c56:	685a      	ldr	r2, [r3, #4]
 8006c58:	bb62      	cbnz	r2, 8006cb4 <_malloc_r+0xdc>
 8006c5a:	f8c8 7000 	str.w	r7, [r8]
 8006c5e:	e00f      	b.n	8006c80 <_malloc_r+0xa8>
 8006c60:	6822      	ldr	r2, [r4, #0]
 8006c62:	1b52      	subs	r2, r2, r5
 8006c64:	d420      	bmi.n	8006ca8 <_malloc_r+0xd0>
 8006c66:	2a0b      	cmp	r2, #11
 8006c68:	d917      	bls.n	8006c9a <_malloc_r+0xc2>
 8006c6a:	1961      	adds	r1, r4, r5
 8006c6c:	42a3      	cmp	r3, r4
 8006c6e:	6025      	str	r5, [r4, #0]
 8006c70:	bf18      	it	ne
 8006c72:	6059      	strne	r1, [r3, #4]
 8006c74:	6863      	ldr	r3, [r4, #4]
 8006c76:	bf08      	it	eq
 8006c78:	f8c8 1000 	streq.w	r1, [r8]
 8006c7c:	5162      	str	r2, [r4, r5]
 8006c7e:	604b      	str	r3, [r1, #4]
 8006c80:	4630      	mov	r0, r6
 8006c82:	f000 f82f 	bl	8006ce4 <__malloc_unlock>
 8006c86:	f104 000b 	add.w	r0, r4, #11
 8006c8a:	1d23      	adds	r3, r4, #4
 8006c8c:	f020 0007 	bic.w	r0, r0, #7
 8006c90:	1ac2      	subs	r2, r0, r3
 8006c92:	bf1c      	itt	ne
 8006c94:	1a1b      	subne	r3, r3, r0
 8006c96:	50a3      	strne	r3, [r4, r2]
 8006c98:	e7af      	b.n	8006bfa <_malloc_r+0x22>
 8006c9a:	6862      	ldr	r2, [r4, #4]
 8006c9c:	42a3      	cmp	r3, r4
 8006c9e:	bf0c      	ite	eq
 8006ca0:	f8c8 2000 	streq.w	r2, [r8]
 8006ca4:	605a      	strne	r2, [r3, #4]
 8006ca6:	e7eb      	b.n	8006c80 <_malloc_r+0xa8>
 8006ca8:	4623      	mov	r3, r4
 8006caa:	6864      	ldr	r4, [r4, #4]
 8006cac:	e7ae      	b.n	8006c0c <_malloc_r+0x34>
 8006cae:	463c      	mov	r4, r7
 8006cb0:	687f      	ldr	r7, [r7, #4]
 8006cb2:	e7b6      	b.n	8006c22 <_malloc_r+0x4a>
 8006cb4:	461a      	mov	r2, r3
 8006cb6:	685b      	ldr	r3, [r3, #4]
 8006cb8:	42a3      	cmp	r3, r4
 8006cba:	d1fb      	bne.n	8006cb4 <_malloc_r+0xdc>
 8006cbc:	2300      	movs	r3, #0
 8006cbe:	6053      	str	r3, [r2, #4]
 8006cc0:	e7de      	b.n	8006c80 <_malloc_r+0xa8>
 8006cc2:	230c      	movs	r3, #12
 8006cc4:	6033      	str	r3, [r6, #0]
 8006cc6:	4630      	mov	r0, r6
 8006cc8:	f000 f80c 	bl	8006ce4 <__malloc_unlock>
 8006ccc:	e794      	b.n	8006bf8 <_malloc_r+0x20>
 8006cce:	6005      	str	r5, [r0, #0]
 8006cd0:	e7d6      	b.n	8006c80 <_malloc_r+0xa8>
 8006cd2:	bf00      	nop
 8006cd4:	20006c58 	.word	0x20006c58

08006cd8 <__malloc_lock>:
 8006cd8:	4801      	ldr	r0, [pc, #4]	@ (8006ce0 <__malloc_lock+0x8>)
 8006cda:	f002 bcdf 	b.w	800969c <__retarget_lock_acquire_recursive>
 8006cde:	bf00      	nop
 8006ce0:	20006dc2 	.word	0x20006dc2

08006ce4 <__malloc_unlock>:
 8006ce4:	4801      	ldr	r0, [pc, #4]	@ (8006cec <__malloc_unlock+0x8>)
 8006ce6:	f002 bcdb 	b.w	80096a0 <__retarget_lock_release_recursive>
 8006cea:	bf00      	nop
 8006cec:	20006dc2 	.word	0x20006dc2

08006cf0 <sulp>:
 8006cf0:	b570      	push	{r4, r5, r6, lr}
 8006cf2:	4604      	mov	r4, r0
 8006cf4:	460d      	mov	r5, r1
 8006cf6:	ec45 4b10 	vmov	d0, r4, r5
 8006cfa:	4616      	mov	r6, r2
 8006cfc:	f004 fa9a 	bl	800b234 <__ulp>
 8006d00:	ec51 0b10 	vmov	r0, r1, d0
 8006d04:	b17e      	cbz	r6, 8006d26 <sulp+0x36>
 8006d06:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8006d0a:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	dd09      	ble.n	8006d26 <sulp+0x36>
 8006d12:	051b      	lsls	r3, r3, #20
 8006d14:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8006d18:	2400      	movs	r4, #0
 8006d1a:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8006d1e:	4622      	mov	r2, r4
 8006d20:	462b      	mov	r3, r5
 8006d22:	f7f9 fc79 	bl	8000618 <__aeabi_dmul>
 8006d26:	ec41 0b10 	vmov	d0, r0, r1
 8006d2a:	bd70      	pop	{r4, r5, r6, pc}
 8006d2c:	0000      	movs	r0, r0
	...

08006d30 <_strtod_l>:
 8006d30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d34:	b09f      	sub	sp, #124	@ 0x7c
 8006d36:	460c      	mov	r4, r1
 8006d38:	9217      	str	r2, [sp, #92]	@ 0x5c
 8006d3a:	2200      	movs	r2, #0
 8006d3c:	921a      	str	r2, [sp, #104]	@ 0x68
 8006d3e:	9005      	str	r0, [sp, #20]
 8006d40:	f04f 0a00 	mov.w	sl, #0
 8006d44:	f04f 0b00 	mov.w	fp, #0
 8006d48:	460a      	mov	r2, r1
 8006d4a:	9219      	str	r2, [sp, #100]	@ 0x64
 8006d4c:	7811      	ldrb	r1, [r2, #0]
 8006d4e:	292b      	cmp	r1, #43	@ 0x2b
 8006d50:	d04a      	beq.n	8006de8 <_strtod_l+0xb8>
 8006d52:	d838      	bhi.n	8006dc6 <_strtod_l+0x96>
 8006d54:	290d      	cmp	r1, #13
 8006d56:	d832      	bhi.n	8006dbe <_strtod_l+0x8e>
 8006d58:	2908      	cmp	r1, #8
 8006d5a:	d832      	bhi.n	8006dc2 <_strtod_l+0x92>
 8006d5c:	2900      	cmp	r1, #0
 8006d5e:	d03b      	beq.n	8006dd8 <_strtod_l+0xa8>
 8006d60:	2200      	movs	r2, #0
 8006d62:	920b      	str	r2, [sp, #44]	@ 0x2c
 8006d64:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8006d66:	782a      	ldrb	r2, [r5, #0]
 8006d68:	2a30      	cmp	r2, #48	@ 0x30
 8006d6a:	f040 80b3 	bne.w	8006ed4 <_strtod_l+0x1a4>
 8006d6e:	786a      	ldrb	r2, [r5, #1]
 8006d70:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8006d74:	2a58      	cmp	r2, #88	@ 0x58
 8006d76:	d16e      	bne.n	8006e56 <_strtod_l+0x126>
 8006d78:	9302      	str	r3, [sp, #8]
 8006d7a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006d7c:	9301      	str	r3, [sp, #4]
 8006d7e:	ab1a      	add	r3, sp, #104	@ 0x68
 8006d80:	9300      	str	r3, [sp, #0]
 8006d82:	4a8e      	ldr	r2, [pc, #568]	@ (8006fbc <_strtod_l+0x28c>)
 8006d84:	9805      	ldr	r0, [sp, #20]
 8006d86:	ab1b      	add	r3, sp, #108	@ 0x6c
 8006d88:	a919      	add	r1, sp, #100	@ 0x64
 8006d8a:	f003 fbb7 	bl	800a4fc <__gethex>
 8006d8e:	f010 060f 	ands.w	r6, r0, #15
 8006d92:	4604      	mov	r4, r0
 8006d94:	d005      	beq.n	8006da2 <_strtod_l+0x72>
 8006d96:	2e06      	cmp	r6, #6
 8006d98:	d128      	bne.n	8006dec <_strtod_l+0xbc>
 8006d9a:	3501      	adds	r5, #1
 8006d9c:	2300      	movs	r3, #0
 8006d9e:	9519      	str	r5, [sp, #100]	@ 0x64
 8006da0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006da2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	f040 858e 	bne.w	80078c6 <_strtod_l+0xb96>
 8006daa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006dac:	b1cb      	cbz	r3, 8006de2 <_strtod_l+0xb2>
 8006dae:	4652      	mov	r2, sl
 8006db0:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8006db4:	ec43 2b10 	vmov	d0, r2, r3
 8006db8:	b01f      	add	sp, #124	@ 0x7c
 8006dba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006dbe:	2920      	cmp	r1, #32
 8006dc0:	d1ce      	bne.n	8006d60 <_strtod_l+0x30>
 8006dc2:	3201      	adds	r2, #1
 8006dc4:	e7c1      	b.n	8006d4a <_strtod_l+0x1a>
 8006dc6:	292d      	cmp	r1, #45	@ 0x2d
 8006dc8:	d1ca      	bne.n	8006d60 <_strtod_l+0x30>
 8006dca:	2101      	movs	r1, #1
 8006dcc:	910b      	str	r1, [sp, #44]	@ 0x2c
 8006dce:	1c51      	adds	r1, r2, #1
 8006dd0:	9119      	str	r1, [sp, #100]	@ 0x64
 8006dd2:	7852      	ldrb	r2, [r2, #1]
 8006dd4:	2a00      	cmp	r2, #0
 8006dd6:	d1c5      	bne.n	8006d64 <_strtod_l+0x34>
 8006dd8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8006dda:	9419      	str	r4, [sp, #100]	@ 0x64
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	f040 8570 	bne.w	80078c2 <_strtod_l+0xb92>
 8006de2:	4652      	mov	r2, sl
 8006de4:	465b      	mov	r3, fp
 8006de6:	e7e5      	b.n	8006db4 <_strtod_l+0x84>
 8006de8:	2100      	movs	r1, #0
 8006dea:	e7ef      	b.n	8006dcc <_strtod_l+0x9c>
 8006dec:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8006dee:	b13a      	cbz	r2, 8006e00 <_strtod_l+0xd0>
 8006df0:	2135      	movs	r1, #53	@ 0x35
 8006df2:	a81c      	add	r0, sp, #112	@ 0x70
 8006df4:	f004 fb18 	bl	800b428 <__copybits>
 8006df8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006dfa:	9805      	ldr	r0, [sp, #20]
 8006dfc:	f003 fee6 	bl	800abcc <_Bfree>
 8006e00:	3e01      	subs	r6, #1
 8006e02:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8006e04:	2e04      	cmp	r6, #4
 8006e06:	d806      	bhi.n	8006e16 <_strtod_l+0xe6>
 8006e08:	e8df f006 	tbb	[pc, r6]
 8006e0c:	201d0314 	.word	0x201d0314
 8006e10:	14          	.byte	0x14
 8006e11:	00          	.byte	0x00
 8006e12:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8006e16:	05e1      	lsls	r1, r4, #23
 8006e18:	bf48      	it	mi
 8006e1a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8006e1e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8006e22:	0d1b      	lsrs	r3, r3, #20
 8006e24:	051b      	lsls	r3, r3, #20
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d1bb      	bne.n	8006da2 <_strtod_l+0x72>
 8006e2a:	f002 fc0b 	bl	8009644 <__errno>
 8006e2e:	2322      	movs	r3, #34	@ 0x22
 8006e30:	6003      	str	r3, [r0, #0]
 8006e32:	e7b6      	b.n	8006da2 <_strtod_l+0x72>
 8006e34:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8006e38:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8006e3c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8006e40:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8006e44:	e7e7      	b.n	8006e16 <_strtod_l+0xe6>
 8006e46:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8006fc4 <_strtod_l+0x294>
 8006e4a:	e7e4      	b.n	8006e16 <_strtod_l+0xe6>
 8006e4c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8006e50:	f04f 3aff 	mov.w	sl, #4294967295
 8006e54:	e7df      	b.n	8006e16 <_strtod_l+0xe6>
 8006e56:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006e58:	1c5a      	adds	r2, r3, #1
 8006e5a:	9219      	str	r2, [sp, #100]	@ 0x64
 8006e5c:	785b      	ldrb	r3, [r3, #1]
 8006e5e:	2b30      	cmp	r3, #48	@ 0x30
 8006e60:	d0f9      	beq.n	8006e56 <_strtod_l+0x126>
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d09d      	beq.n	8006da2 <_strtod_l+0x72>
 8006e66:	2301      	movs	r3, #1
 8006e68:	9309      	str	r3, [sp, #36]	@ 0x24
 8006e6a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006e6c:	930c      	str	r3, [sp, #48]	@ 0x30
 8006e6e:	2300      	movs	r3, #0
 8006e70:	9308      	str	r3, [sp, #32]
 8006e72:	930a      	str	r3, [sp, #40]	@ 0x28
 8006e74:	461f      	mov	r7, r3
 8006e76:	220a      	movs	r2, #10
 8006e78:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8006e7a:	7805      	ldrb	r5, [r0, #0]
 8006e7c:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8006e80:	b2d9      	uxtb	r1, r3
 8006e82:	2909      	cmp	r1, #9
 8006e84:	d928      	bls.n	8006ed8 <_strtod_l+0x1a8>
 8006e86:	494e      	ldr	r1, [pc, #312]	@ (8006fc0 <_strtod_l+0x290>)
 8006e88:	2201      	movs	r2, #1
 8006e8a:	f001 fdf6 	bl	8008a7a <strncmp>
 8006e8e:	2800      	cmp	r0, #0
 8006e90:	d032      	beq.n	8006ef8 <_strtod_l+0x1c8>
 8006e92:	2000      	movs	r0, #0
 8006e94:	462a      	mov	r2, r5
 8006e96:	4681      	mov	r9, r0
 8006e98:	463d      	mov	r5, r7
 8006e9a:	4603      	mov	r3, r0
 8006e9c:	2a65      	cmp	r2, #101	@ 0x65
 8006e9e:	d001      	beq.n	8006ea4 <_strtod_l+0x174>
 8006ea0:	2a45      	cmp	r2, #69	@ 0x45
 8006ea2:	d114      	bne.n	8006ece <_strtod_l+0x19e>
 8006ea4:	b91d      	cbnz	r5, 8006eae <_strtod_l+0x17e>
 8006ea6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006ea8:	4302      	orrs	r2, r0
 8006eaa:	d095      	beq.n	8006dd8 <_strtod_l+0xa8>
 8006eac:	2500      	movs	r5, #0
 8006eae:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8006eb0:	1c62      	adds	r2, r4, #1
 8006eb2:	9219      	str	r2, [sp, #100]	@ 0x64
 8006eb4:	7862      	ldrb	r2, [r4, #1]
 8006eb6:	2a2b      	cmp	r2, #43	@ 0x2b
 8006eb8:	d077      	beq.n	8006faa <_strtod_l+0x27a>
 8006eba:	2a2d      	cmp	r2, #45	@ 0x2d
 8006ebc:	d07b      	beq.n	8006fb6 <_strtod_l+0x286>
 8006ebe:	f04f 0c00 	mov.w	ip, #0
 8006ec2:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8006ec6:	2909      	cmp	r1, #9
 8006ec8:	f240 8082 	bls.w	8006fd0 <_strtod_l+0x2a0>
 8006ecc:	9419      	str	r4, [sp, #100]	@ 0x64
 8006ece:	f04f 0800 	mov.w	r8, #0
 8006ed2:	e0a2      	b.n	800701a <_strtod_l+0x2ea>
 8006ed4:	2300      	movs	r3, #0
 8006ed6:	e7c7      	b.n	8006e68 <_strtod_l+0x138>
 8006ed8:	2f08      	cmp	r7, #8
 8006eda:	bfd5      	itete	le
 8006edc:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8006ede:	9908      	ldrgt	r1, [sp, #32]
 8006ee0:	fb02 3301 	mlale	r3, r2, r1, r3
 8006ee4:	fb02 3301 	mlagt	r3, r2, r1, r3
 8006ee8:	f100 0001 	add.w	r0, r0, #1
 8006eec:	bfd4      	ite	le
 8006eee:	930a      	strle	r3, [sp, #40]	@ 0x28
 8006ef0:	9308      	strgt	r3, [sp, #32]
 8006ef2:	3701      	adds	r7, #1
 8006ef4:	9019      	str	r0, [sp, #100]	@ 0x64
 8006ef6:	e7bf      	b.n	8006e78 <_strtod_l+0x148>
 8006ef8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006efa:	1c5a      	adds	r2, r3, #1
 8006efc:	9219      	str	r2, [sp, #100]	@ 0x64
 8006efe:	785a      	ldrb	r2, [r3, #1]
 8006f00:	b37f      	cbz	r7, 8006f62 <_strtod_l+0x232>
 8006f02:	4681      	mov	r9, r0
 8006f04:	463d      	mov	r5, r7
 8006f06:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8006f0a:	2b09      	cmp	r3, #9
 8006f0c:	d912      	bls.n	8006f34 <_strtod_l+0x204>
 8006f0e:	2301      	movs	r3, #1
 8006f10:	e7c4      	b.n	8006e9c <_strtod_l+0x16c>
 8006f12:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006f14:	1c5a      	adds	r2, r3, #1
 8006f16:	9219      	str	r2, [sp, #100]	@ 0x64
 8006f18:	785a      	ldrb	r2, [r3, #1]
 8006f1a:	3001      	adds	r0, #1
 8006f1c:	2a30      	cmp	r2, #48	@ 0x30
 8006f1e:	d0f8      	beq.n	8006f12 <_strtod_l+0x1e2>
 8006f20:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8006f24:	2b08      	cmp	r3, #8
 8006f26:	f200 84d3 	bhi.w	80078d0 <_strtod_l+0xba0>
 8006f2a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006f2c:	930c      	str	r3, [sp, #48]	@ 0x30
 8006f2e:	4681      	mov	r9, r0
 8006f30:	2000      	movs	r0, #0
 8006f32:	4605      	mov	r5, r0
 8006f34:	3a30      	subs	r2, #48	@ 0x30
 8006f36:	f100 0301 	add.w	r3, r0, #1
 8006f3a:	d02a      	beq.n	8006f92 <_strtod_l+0x262>
 8006f3c:	4499      	add	r9, r3
 8006f3e:	eb00 0c05 	add.w	ip, r0, r5
 8006f42:	462b      	mov	r3, r5
 8006f44:	210a      	movs	r1, #10
 8006f46:	4563      	cmp	r3, ip
 8006f48:	d10d      	bne.n	8006f66 <_strtod_l+0x236>
 8006f4a:	1c69      	adds	r1, r5, #1
 8006f4c:	4401      	add	r1, r0
 8006f4e:	4428      	add	r0, r5
 8006f50:	2808      	cmp	r0, #8
 8006f52:	dc16      	bgt.n	8006f82 <_strtod_l+0x252>
 8006f54:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8006f56:	230a      	movs	r3, #10
 8006f58:	fb03 2300 	mla	r3, r3, r0, r2
 8006f5c:	930a      	str	r3, [sp, #40]	@ 0x28
 8006f5e:	2300      	movs	r3, #0
 8006f60:	e018      	b.n	8006f94 <_strtod_l+0x264>
 8006f62:	4638      	mov	r0, r7
 8006f64:	e7da      	b.n	8006f1c <_strtod_l+0x1ec>
 8006f66:	2b08      	cmp	r3, #8
 8006f68:	f103 0301 	add.w	r3, r3, #1
 8006f6c:	dc03      	bgt.n	8006f76 <_strtod_l+0x246>
 8006f6e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8006f70:	434e      	muls	r6, r1
 8006f72:	960a      	str	r6, [sp, #40]	@ 0x28
 8006f74:	e7e7      	b.n	8006f46 <_strtod_l+0x216>
 8006f76:	2b10      	cmp	r3, #16
 8006f78:	bfde      	ittt	le
 8006f7a:	9e08      	ldrle	r6, [sp, #32]
 8006f7c:	434e      	mulle	r6, r1
 8006f7e:	9608      	strle	r6, [sp, #32]
 8006f80:	e7e1      	b.n	8006f46 <_strtod_l+0x216>
 8006f82:	280f      	cmp	r0, #15
 8006f84:	dceb      	bgt.n	8006f5e <_strtod_l+0x22e>
 8006f86:	9808      	ldr	r0, [sp, #32]
 8006f88:	230a      	movs	r3, #10
 8006f8a:	fb03 2300 	mla	r3, r3, r0, r2
 8006f8e:	9308      	str	r3, [sp, #32]
 8006f90:	e7e5      	b.n	8006f5e <_strtod_l+0x22e>
 8006f92:	4629      	mov	r1, r5
 8006f94:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006f96:	1c50      	adds	r0, r2, #1
 8006f98:	9019      	str	r0, [sp, #100]	@ 0x64
 8006f9a:	7852      	ldrb	r2, [r2, #1]
 8006f9c:	4618      	mov	r0, r3
 8006f9e:	460d      	mov	r5, r1
 8006fa0:	e7b1      	b.n	8006f06 <_strtod_l+0x1d6>
 8006fa2:	f04f 0900 	mov.w	r9, #0
 8006fa6:	2301      	movs	r3, #1
 8006fa8:	e77d      	b.n	8006ea6 <_strtod_l+0x176>
 8006faa:	f04f 0c00 	mov.w	ip, #0
 8006fae:	1ca2      	adds	r2, r4, #2
 8006fb0:	9219      	str	r2, [sp, #100]	@ 0x64
 8006fb2:	78a2      	ldrb	r2, [r4, #2]
 8006fb4:	e785      	b.n	8006ec2 <_strtod_l+0x192>
 8006fb6:	f04f 0c01 	mov.w	ip, #1
 8006fba:	e7f8      	b.n	8006fae <_strtod_l+0x27e>
 8006fbc:	0800ce90 	.word	0x0800ce90
 8006fc0:	0800ce78 	.word	0x0800ce78
 8006fc4:	7ff00000 	.word	0x7ff00000
 8006fc8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006fca:	1c51      	adds	r1, r2, #1
 8006fcc:	9119      	str	r1, [sp, #100]	@ 0x64
 8006fce:	7852      	ldrb	r2, [r2, #1]
 8006fd0:	2a30      	cmp	r2, #48	@ 0x30
 8006fd2:	d0f9      	beq.n	8006fc8 <_strtod_l+0x298>
 8006fd4:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8006fd8:	2908      	cmp	r1, #8
 8006fda:	f63f af78 	bhi.w	8006ece <_strtod_l+0x19e>
 8006fde:	3a30      	subs	r2, #48	@ 0x30
 8006fe0:	920e      	str	r2, [sp, #56]	@ 0x38
 8006fe2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006fe4:	920f      	str	r2, [sp, #60]	@ 0x3c
 8006fe6:	f04f 080a 	mov.w	r8, #10
 8006fea:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006fec:	1c56      	adds	r6, r2, #1
 8006fee:	9619      	str	r6, [sp, #100]	@ 0x64
 8006ff0:	7852      	ldrb	r2, [r2, #1]
 8006ff2:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8006ff6:	f1be 0f09 	cmp.w	lr, #9
 8006ffa:	d939      	bls.n	8007070 <_strtod_l+0x340>
 8006ffc:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8006ffe:	1a76      	subs	r6, r6, r1
 8007000:	2e08      	cmp	r6, #8
 8007002:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8007006:	dc03      	bgt.n	8007010 <_strtod_l+0x2e0>
 8007008:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800700a:	4588      	cmp	r8, r1
 800700c:	bfa8      	it	ge
 800700e:	4688      	movge	r8, r1
 8007010:	f1bc 0f00 	cmp.w	ip, #0
 8007014:	d001      	beq.n	800701a <_strtod_l+0x2ea>
 8007016:	f1c8 0800 	rsb	r8, r8, #0
 800701a:	2d00      	cmp	r5, #0
 800701c:	d14e      	bne.n	80070bc <_strtod_l+0x38c>
 800701e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007020:	4308      	orrs	r0, r1
 8007022:	f47f aebe 	bne.w	8006da2 <_strtod_l+0x72>
 8007026:	2b00      	cmp	r3, #0
 8007028:	f47f aed6 	bne.w	8006dd8 <_strtod_l+0xa8>
 800702c:	2a69      	cmp	r2, #105	@ 0x69
 800702e:	d028      	beq.n	8007082 <_strtod_l+0x352>
 8007030:	dc25      	bgt.n	800707e <_strtod_l+0x34e>
 8007032:	2a49      	cmp	r2, #73	@ 0x49
 8007034:	d025      	beq.n	8007082 <_strtod_l+0x352>
 8007036:	2a4e      	cmp	r2, #78	@ 0x4e
 8007038:	f47f aece 	bne.w	8006dd8 <_strtod_l+0xa8>
 800703c:	499b      	ldr	r1, [pc, #620]	@ (80072ac <_strtod_l+0x57c>)
 800703e:	a819      	add	r0, sp, #100	@ 0x64
 8007040:	f003 fc7e 	bl	800a940 <__match>
 8007044:	2800      	cmp	r0, #0
 8007046:	f43f aec7 	beq.w	8006dd8 <_strtod_l+0xa8>
 800704a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800704c:	781b      	ldrb	r3, [r3, #0]
 800704e:	2b28      	cmp	r3, #40	@ 0x28
 8007050:	d12e      	bne.n	80070b0 <_strtod_l+0x380>
 8007052:	4997      	ldr	r1, [pc, #604]	@ (80072b0 <_strtod_l+0x580>)
 8007054:	aa1c      	add	r2, sp, #112	@ 0x70
 8007056:	a819      	add	r0, sp, #100	@ 0x64
 8007058:	f003 fc86 	bl	800a968 <__hexnan>
 800705c:	2805      	cmp	r0, #5
 800705e:	d127      	bne.n	80070b0 <_strtod_l+0x380>
 8007060:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8007062:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8007066:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800706a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800706e:	e698      	b.n	8006da2 <_strtod_l+0x72>
 8007070:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8007072:	fb08 2101 	mla	r1, r8, r1, r2
 8007076:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800707a:	920e      	str	r2, [sp, #56]	@ 0x38
 800707c:	e7b5      	b.n	8006fea <_strtod_l+0x2ba>
 800707e:	2a6e      	cmp	r2, #110	@ 0x6e
 8007080:	e7da      	b.n	8007038 <_strtod_l+0x308>
 8007082:	498c      	ldr	r1, [pc, #560]	@ (80072b4 <_strtod_l+0x584>)
 8007084:	a819      	add	r0, sp, #100	@ 0x64
 8007086:	f003 fc5b 	bl	800a940 <__match>
 800708a:	2800      	cmp	r0, #0
 800708c:	f43f aea4 	beq.w	8006dd8 <_strtod_l+0xa8>
 8007090:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007092:	4989      	ldr	r1, [pc, #548]	@ (80072b8 <_strtod_l+0x588>)
 8007094:	3b01      	subs	r3, #1
 8007096:	a819      	add	r0, sp, #100	@ 0x64
 8007098:	9319      	str	r3, [sp, #100]	@ 0x64
 800709a:	f003 fc51 	bl	800a940 <__match>
 800709e:	b910      	cbnz	r0, 80070a6 <_strtod_l+0x376>
 80070a0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80070a2:	3301      	adds	r3, #1
 80070a4:	9319      	str	r3, [sp, #100]	@ 0x64
 80070a6:	f8df b220 	ldr.w	fp, [pc, #544]	@ 80072c8 <_strtod_l+0x598>
 80070aa:	f04f 0a00 	mov.w	sl, #0
 80070ae:	e678      	b.n	8006da2 <_strtod_l+0x72>
 80070b0:	4882      	ldr	r0, [pc, #520]	@ (80072bc <_strtod_l+0x58c>)
 80070b2:	f002 fb0d 	bl	80096d0 <nan>
 80070b6:	ec5b ab10 	vmov	sl, fp, d0
 80070ba:	e672      	b.n	8006da2 <_strtod_l+0x72>
 80070bc:	eba8 0309 	sub.w	r3, r8, r9
 80070c0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80070c2:	9309      	str	r3, [sp, #36]	@ 0x24
 80070c4:	2f00      	cmp	r7, #0
 80070c6:	bf08      	it	eq
 80070c8:	462f      	moveq	r7, r5
 80070ca:	2d10      	cmp	r5, #16
 80070cc:	462c      	mov	r4, r5
 80070ce:	bfa8      	it	ge
 80070d0:	2410      	movge	r4, #16
 80070d2:	f7f9 fa27 	bl	8000524 <__aeabi_ui2d>
 80070d6:	2d09      	cmp	r5, #9
 80070d8:	4682      	mov	sl, r0
 80070da:	468b      	mov	fp, r1
 80070dc:	dc13      	bgt.n	8007106 <_strtod_l+0x3d6>
 80070de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	f43f ae5e 	beq.w	8006da2 <_strtod_l+0x72>
 80070e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80070e8:	dd78      	ble.n	80071dc <_strtod_l+0x4ac>
 80070ea:	2b16      	cmp	r3, #22
 80070ec:	dc5f      	bgt.n	80071ae <_strtod_l+0x47e>
 80070ee:	4974      	ldr	r1, [pc, #464]	@ (80072c0 <_strtod_l+0x590>)
 80070f0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80070f4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80070f8:	4652      	mov	r2, sl
 80070fa:	465b      	mov	r3, fp
 80070fc:	f7f9 fa8c 	bl	8000618 <__aeabi_dmul>
 8007100:	4682      	mov	sl, r0
 8007102:	468b      	mov	fp, r1
 8007104:	e64d      	b.n	8006da2 <_strtod_l+0x72>
 8007106:	4b6e      	ldr	r3, [pc, #440]	@ (80072c0 <_strtod_l+0x590>)
 8007108:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800710c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8007110:	f7f9 fa82 	bl	8000618 <__aeabi_dmul>
 8007114:	4682      	mov	sl, r0
 8007116:	9808      	ldr	r0, [sp, #32]
 8007118:	468b      	mov	fp, r1
 800711a:	f7f9 fa03 	bl	8000524 <__aeabi_ui2d>
 800711e:	4602      	mov	r2, r0
 8007120:	460b      	mov	r3, r1
 8007122:	4650      	mov	r0, sl
 8007124:	4659      	mov	r1, fp
 8007126:	f7f9 f8c1 	bl	80002ac <__adddf3>
 800712a:	2d0f      	cmp	r5, #15
 800712c:	4682      	mov	sl, r0
 800712e:	468b      	mov	fp, r1
 8007130:	ddd5      	ble.n	80070de <_strtod_l+0x3ae>
 8007132:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007134:	1b2c      	subs	r4, r5, r4
 8007136:	441c      	add	r4, r3
 8007138:	2c00      	cmp	r4, #0
 800713a:	f340 8096 	ble.w	800726a <_strtod_l+0x53a>
 800713e:	f014 030f 	ands.w	r3, r4, #15
 8007142:	d00a      	beq.n	800715a <_strtod_l+0x42a>
 8007144:	495e      	ldr	r1, [pc, #376]	@ (80072c0 <_strtod_l+0x590>)
 8007146:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800714a:	4652      	mov	r2, sl
 800714c:	465b      	mov	r3, fp
 800714e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007152:	f7f9 fa61 	bl	8000618 <__aeabi_dmul>
 8007156:	4682      	mov	sl, r0
 8007158:	468b      	mov	fp, r1
 800715a:	f034 040f 	bics.w	r4, r4, #15
 800715e:	d073      	beq.n	8007248 <_strtod_l+0x518>
 8007160:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8007164:	dd48      	ble.n	80071f8 <_strtod_l+0x4c8>
 8007166:	2400      	movs	r4, #0
 8007168:	46a0      	mov	r8, r4
 800716a:	940a      	str	r4, [sp, #40]	@ 0x28
 800716c:	46a1      	mov	r9, r4
 800716e:	9a05      	ldr	r2, [sp, #20]
 8007170:	f8df b154 	ldr.w	fp, [pc, #340]	@ 80072c8 <_strtod_l+0x598>
 8007174:	2322      	movs	r3, #34	@ 0x22
 8007176:	6013      	str	r3, [r2, #0]
 8007178:	f04f 0a00 	mov.w	sl, #0
 800717c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800717e:	2b00      	cmp	r3, #0
 8007180:	f43f ae0f 	beq.w	8006da2 <_strtod_l+0x72>
 8007184:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007186:	9805      	ldr	r0, [sp, #20]
 8007188:	f003 fd20 	bl	800abcc <_Bfree>
 800718c:	9805      	ldr	r0, [sp, #20]
 800718e:	4649      	mov	r1, r9
 8007190:	f003 fd1c 	bl	800abcc <_Bfree>
 8007194:	9805      	ldr	r0, [sp, #20]
 8007196:	4641      	mov	r1, r8
 8007198:	f003 fd18 	bl	800abcc <_Bfree>
 800719c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800719e:	9805      	ldr	r0, [sp, #20]
 80071a0:	f003 fd14 	bl	800abcc <_Bfree>
 80071a4:	9805      	ldr	r0, [sp, #20]
 80071a6:	4621      	mov	r1, r4
 80071a8:	f003 fd10 	bl	800abcc <_Bfree>
 80071ac:	e5f9      	b.n	8006da2 <_strtod_l+0x72>
 80071ae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80071b0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 80071b4:	4293      	cmp	r3, r2
 80071b6:	dbbc      	blt.n	8007132 <_strtod_l+0x402>
 80071b8:	4c41      	ldr	r4, [pc, #260]	@ (80072c0 <_strtod_l+0x590>)
 80071ba:	f1c5 050f 	rsb	r5, r5, #15
 80071be:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80071c2:	4652      	mov	r2, sl
 80071c4:	465b      	mov	r3, fp
 80071c6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80071ca:	f7f9 fa25 	bl	8000618 <__aeabi_dmul>
 80071ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80071d0:	1b5d      	subs	r5, r3, r5
 80071d2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80071d6:	e9d4 2300 	ldrd	r2, r3, [r4]
 80071da:	e78f      	b.n	80070fc <_strtod_l+0x3cc>
 80071dc:	3316      	adds	r3, #22
 80071de:	dba8      	blt.n	8007132 <_strtod_l+0x402>
 80071e0:	4b37      	ldr	r3, [pc, #220]	@ (80072c0 <_strtod_l+0x590>)
 80071e2:	eba9 0808 	sub.w	r8, r9, r8
 80071e6:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 80071ea:	e9d8 2300 	ldrd	r2, r3, [r8]
 80071ee:	4650      	mov	r0, sl
 80071f0:	4659      	mov	r1, fp
 80071f2:	f7f9 fb3b 	bl	800086c <__aeabi_ddiv>
 80071f6:	e783      	b.n	8007100 <_strtod_l+0x3d0>
 80071f8:	4b32      	ldr	r3, [pc, #200]	@ (80072c4 <_strtod_l+0x594>)
 80071fa:	9308      	str	r3, [sp, #32]
 80071fc:	2300      	movs	r3, #0
 80071fe:	1124      	asrs	r4, r4, #4
 8007200:	4650      	mov	r0, sl
 8007202:	4659      	mov	r1, fp
 8007204:	461e      	mov	r6, r3
 8007206:	2c01      	cmp	r4, #1
 8007208:	dc21      	bgt.n	800724e <_strtod_l+0x51e>
 800720a:	b10b      	cbz	r3, 8007210 <_strtod_l+0x4e0>
 800720c:	4682      	mov	sl, r0
 800720e:	468b      	mov	fp, r1
 8007210:	492c      	ldr	r1, [pc, #176]	@ (80072c4 <_strtod_l+0x594>)
 8007212:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8007216:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800721a:	4652      	mov	r2, sl
 800721c:	465b      	mov	r3, fp
 800721e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007222:	f7f9 f9f9 	bl	8000618 <__aeabi_dmul>
 8007226:	4b28      	ldr	r3, [pc, #160]	@ (80072c8 <_strtod_l+0x598>)
 8007228:	460a      	mov	r2, r1
 800722a:	400b      	ands	r3, r1
 800722c:	4927      	ldr	r1, [pc, #156]	@ (80072cc <_strtod_l+0x59c>)
 800722e:	428b      	cmp	r3, r1
 8007230:	4682      	mov	sl, r0
 8007232:	d898      	bhi.n	8007166 <_strtod_l+0x436>
 8007234:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8007238:	428b      	cmp	r3, r1
 800723a:	bf86      	itte	hi
 800723c:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 80072d0 <_strtod_l+0x5a0>
 8007240:	f04f 3aff 	movhi.w	sl, #4294967295
 8007244:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8007248:	2300      	movs	r3, #0
 800724a:	9308      	str	r3, [sp, #32]
 800724c:	e07a      	b.n	8007344 <_strtod_l+0x614>
 800724e:	07e2      	lsls	r2, r4, #31
 8007250:	d505      	bpl.n	800725e <_strtod_l+0x52e>
 8007252:	9b08      	ldr	r3, [sp, #32]
 8007254:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007258:	f7f9 f9de 	bl	8000618 <__aeabi_dmul>
 800725c:	2301      	movs	r3, #1
 800725e:	9a08      	ldr	r2, [sp, #32]
 8007260:	3208      	adds	r2, #8
 8007262:	3601      	adds	r6, #1
 8007264:	1064      	asrs	r4, r4, #1
 8007266:	9208      	str	r2, [sp, #32]
 8007268:	e7cd      	b.n	8007206 <_strtod_l+0x4d6>
 800726a:	d0ed      	beq.n	8007248 <_strtod_l+0x518>
 800726c:	4264      	negs	r4, r4
 800726e:	f014 020f 	ands.w	r2, r4, #15
 8007272:	d00a      	beq.n	800728a <_strtod_l+0x55a>
 8007274:	4b12      	ldr	r3, [pc, #72]	@ (80072c0 <_strtod_l+0x590>)
 8007276:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800727a:	4650      	mov	r0, sl
 800727c:	4659      	mov	r1, fp
 800727e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007282:	f7f9 faf3 	bl	800086c <__aeabi_ddiv>
 8007286:	4682      	mov	sl, r0
 8007288:	468b      	mov	fp, r1
 800728a:	1124      	asrs	r4, r4, #4
 800728c:	d0dc      	beq.n	8007248 <_strtod_l+0x518>
 800728e:	2c1f      	cmp	r4, #31
 8007290:	dd20      	ble.n	80072d4 <_strtod_l+0x5a4>
 8007292:	2400      	movs	r4, #0
 8007294:	46a0      	mov	r8, r4
 8007296:	940a      	str	r4, [sp, #40]	@ 0x28
 8007298:	46a1      	mov	r9, r4
 800729a:	9a05      	ldr	r2, [sp, #20]
 800729c:	2322      	movs	r3, #34	@ 0x22
 800729e:	f04f 0a00 	mov.w	sl, #0
 80072a2:	f04f 0b00 	mov.w	fp, #0
 80072a6:	6013      	str	r3, [r2, #0]
 80072a8:	e768      	b.n	800717c <_strtod_l+0x44c>
 80072aa:	bf00      	nop
 80072ac:	0800cfde 	.word	0x0800cfde
 80072b0:	0800ce7c 	.word	0x0800ce7c
 80072b4:	0800cfd6 	.word	0x0800cfd6
 80072b8:	0800d0c1 	.word	0x0800d0c1
 80072bc:	0800ce24 	.word	0x0800ce24
 80072c0:	0800d238 	.word	0x0800d238
 80072c4:	0800d210 	.word	0x0800d210
 80072c8:	7ff00000 	.word	0x7ff00000
 80072cc:	7ca00000 	.word	0x7ca00000
 80072d0:	7fefffff 	.word	0x7fefffff
 80072d4:	f014 0310 	ands.w	r3, r4, #16
 80072d8:	bf18      	it	ne
 80072da:	236a      	movne	r3, #106	@ 0x6a
 80072dc:	4ea9      	ldr	r6, [pc, #676]	@ (8007584 <_strtod_l+0x854>)
 80072de:	9308      	str	r3, [sp, #32]
 80072e0:	4650      	mov	r0, sl
 80072e2:	4659      	mov	r1, fp
 80072e4:	2300      	movs	r3, #0
 80072e6:	07e2      	lsls	r2, r4, #31
 80072e8:	d504      	bpl.n	80072f4 <_strtod_l+0x5c4>
 80072ea:	e9d6 2300 	ldrd	r2, r3, [r6]
 80072ee:	f7f9 f993 	bl	8000618 <__aeabi_dmul>
 80072f2:	2301      	movs	r3, #1
 80072f4:	1064      	asrs	r4, r4, #1
 80072f6:	f106 0608 	add.w	r6, r6, #8
 80072fa:	d1f4      	bne.n	80072e6 <_strtod_l+0x5b6>
 80072fc:	b10b      	cbz	r3, 8007302 <_strtod_l+0x5d2>
 80072fe:	4682      	mov	sl, r0
 8007300:	468b      	mov	fp, r1
 8007302:	9b08      	ldr	r3, [sp, #32]
 8007304:	b1b3      	cbz	r3, 8007334 <_strtod_l+0x604>
 8007306:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800730a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800730e:	2b00      	cmp	r3, #0
 8007310:	4659      	mov	r1, fp
 8007312:	dd0f      	ble.n	8007334 <_strtod_l+0x604>
 8007314:	2b1f      	cmp	r3, #31
 8007316:	dd55      	ble.n	80073c4 <_strtod_l+0x694>
 8007318:	2b34      	cmp	r3, #52	@ 0x34
 800731a:	bfde      	ittt	le
 800731c:	f04f 33ff 	movle.w	r3, #4294967295
 8007320:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8007324:	4093      	lslle	r3, r2
 8007326:	f04f 0a00 	mov.w	sl, #0
 800732a:	bfcc      	ite	gt
 800732c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8007330:	ea03 0b01 	andle.w	fp, r3, r1
 8007334:	2200      	movs	r2, #0
 8007336:	2300      	movs	r3, #0
 8007338:	4650      	mov	r0, sl
 800733a:	4659      	mov	r1, fp
 800733c:	f7f9 fbd4 	bl	8000ae8 <__aeabi_dcmpeq>
 8007340:	2800      	cmp	r0, #0
 8007342:	d1a6      	bne.n	8007292 <_strtod_l+0x562>
 8007344:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007346:	9300      	str	r3, [sp, #0]
 8007348:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800734a:	9805      	ldr	r0, [sp, #20]
 800734c:	462b      	mov	r3, r5
 800734e:	463a      	mov	r2, r7
 8007350:	f003 fca4 	bl	800ac9c <__s2b>
 8007354:	900a      	str	r0, [sp, #40]	@ 0x28
 8007356:	2800      	cmp	r0, #0
 8007358:	f43f af05 	beq.w	8007166 <_strtod_l+0x436>
 800735c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800735e:	2a00      	cmp	r2, #0
 8007360:	eba9 0308 	sub.w	r3, r9, r8
 8007364:	bfa8      	it	ge
 8007366:	2300      	movge	r3, #0
 8007368:	9312      	str	r3, [sp, #72]	@ 0x48
 800736a:	2400      	movs	r4, #0
 800736c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8007370:	9316      	str	r3, [sp, #88]	@ 0x58
 8007372:	46a0      	mov	r8, r4
 8007374:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007376:	9805      	ldr	r0, [sp, #20]
 8007378:	6859      	ldr	r1, [r3, #4]
 800737a:	f003 fbe7 	bl	800ab4c <_Balloc>
 800737e:	4681      	mov	r9, r0
 8007380:	2800      	cmp	r0, #0
 8007382:	f43f aef4 	beq.w	800716e <_strtod_l+0x43e>
 8007386:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007388:	691a      	ldr	r2, [r3, #16]
 800738a:	3202      	adds	r2, #2
 800738c:	f103 010c 	add.w	r1, r3, #12
 8007390:	0092      	lsls	r2, r2, #2
 8007392:	300c      	adds	r0, #12
 8007394:	f002 f98d 	bl	80096b2 <memcpy>
 8007398:	ec4b ab10 	vmov	d0, sl, fp
 800739c:	9805      	ldr	r0, [sp, #20]
 800739e:	aa1c      	add	r2, sp, #112	@ 0x70
 80073a0:	a91b      	add	r1, sp, #108	@ 0x6c
 80073a2:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 80073a6:	f003 ffb5 	bl	800b314 <__d2b>
 80073aa:	901a      	str	r0, [sp, #104]	@ 0x68
 80073ac:	2800      	cmp	r0, #0
 80073ae:	f43f aede 	beq.w	800716e <_strtod_l+0x43e>
 80073b2:	9805      	ldr	r0, [sp, #20]
 80073b4:	2101      	movs	r1, #1
 80073b6:	f003 fd07 	bl	800adc8 <__i2b>
 80073ba:	4680      	mov	r8, r0
 80073bc:	b948      	cbnz	r0, 80073d2 <_strtod_l+0x6a2>
 80073be:	f04f 0800 	mov.w	r8, #0
 80073c2:	e6d4      	b.n	800716e <_strtod_l+0x43e>
 80073c4:	f04f 32ff 	mov.w	r2, #4294967295
 80073c8:	fa02 f303 	lsl.w	r3, r2, r3
 80073cc:	ea03 0a0a 	and.w	sl, r3, sl
 80073d0:	e7b0      	b.n	8007334 <_strtod_l+0x604>
 80073d2:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 80073d4:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80073d6:	2d00      	cmp	r5, #0
 80073d8:	bfab      	itete	ge
 80073da:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 80073dc:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 80073de:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 80073e0:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 80073e2:	bfac      	ite	ge
 80073e4:	18ef      	addge	r7, r5, r3
 80073e6:	1b5e      	sublt	r6, r3, r5
 80073e8:	9b08      	ldr	r3, [sp, #32]
 80073ea:	1aed      	subs	r5, r5, r3
 80073ec:	4415      	add	r5, r2
 80073ee:	4b66      	ldr	r3, [pc, #408]	@ (8007588 <_strtod_l+0x858>)
 80073f0:	3d01      	subs	r5, #1
 80073f2:	429d      	cmp	r5, r3
 80073f4:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 80073f8:	da50      	bge.n	800749c <_strtod_l+0x76c>
 80073fa:	1b5b      	subs	r3, r3, r5
 80073fc:	2b1f      	cmp	r3, #31
 80073fe:	eba2 0203 	sub.w	r2, r2, r3
 8007402:	f04f 0101 	mov.w	r1, #1
 8007406:	dc3d      	bgt.n	8007484 <_strtod_l+0x754>
 8007408:	fa01 f303 	lsl.w	r3, r1, r3
 800740c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800740e:	2300      	movs	r3, #0
 8007410:	9310      	str	r3, [sp, #64]	@ 0x40
 8007412:	18bd      	adds	r5, r7, r2
 8007414:	9b08      	ldr	r3, [sp, #32]
 8007416:	42af      	cmp	r7, r5
 8007418:	4416      	add	r6, r2
 800741a:	441e      	add	r6, r3
 800741c:	463b      	mov	r3, r7
 800741e:	bfa8      	it	ge
 8007420:	462b      	movge	r3, r5
 8007422:	42b3      	cmp	r3, r6
 8007424:	bfa8      	it	ge
 8007426:	4633      	movge	r3, r6
 8007428:	2b00      	cmp	r3, #0
 800742a:	bfc2      	ittt	gt
 800742c:	1aed      	subgt	r5, r5, r3
 800742e:	1af6      	subgt	r6, r6, r3
 8007430:	1aff      	subgt	r7, r7, r3
 8007432:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007434:	2b00      	cmp	r3, #0
 8007436:	dd16      	ble.n	8007466 <_strtod_l+0x736>
 8007438:	4641      	mov	r1, r8
 800743a:	9805      	ldr	r0, [sp, #20]
 800743c:	461a      	mov	r2, r3
 800743e:	f003 fd83 	bl	800af48 <__pow5mult>
 8007442:	4680      	mov	r8, r0
 8007444:	2800      	cmp	r0, #0
 8007446:	d0ba      	beq.n	80073be <_strtod_l+0x68e>
 8007448:	4601      	mov	r1, r0
 800744a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800744c:	9805      	ldr	r0, [sp, #20]
 800744e:	f003 fcd1 	bl	800adf4 <__multiply>
 8007452:	900e      	str	r0, [sp, #56]	@ 0x38
 8007454:	2800      	cmp	r0, #0
 8007456:	f43f ae8a 	beq.w	800716e <_strtod_l+0x43e>
 800745a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800745c:	9805      	ldr	r0, [sp, #20]
 800745e:	f003 fbb5 	bl	800abcc <_Bfree>
 8007462:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007464:	931a      	str	r3, [sp, #104]	@ 0x68
 8007466:	2d00      	cmp	r5, #0
 8007468:	dc1d      	bgt.n	80074a6 <_strtod_l+0x776>
 800746a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800746c:	2b00      	cmp	r3, #0
 800746e:	dd23      	ble.n	80074b8 <_strtod_l+0x788>
 8007470:	4649      	mov	r1, r9
 8007472:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8007474:	9805      	ldr	r0, [sp, #20]
 8007476:	f003 fd67 	bl	800af48 <__pow5mult>
 800747a:	4681      	mov	r9, r0
 800747c:	b9e0      	cbnz	r0, 80074b8 <_strtod_l+0x788>
 800747e:	f04f 0900 	mov.w	r9, #0
 8007482:	e674      	b.n	800716e <_strtod_l+0x43e>
 8007484:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8007488:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800748c:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8007490:	35e2      	adds	r5, #226	@ 0xe2
 8007492:	fa01 f305 	lsl.w	r3, r1, r5
 8007496:	9310      	str	r3, [sp, #64]	@ 0x40
 8007498:	9113      	str	r1, [sp, #76]	@ 0x4c
 800749a:	e7ba      	b.n	8007412 <_strtod_l+0x6e2>
 800749c:	2300      	movs	r3, #0
 800749e:	9310      	str	r3, [sp, #64]	@ 0x40
 80074a0:	2301      	movs	r3, #1
 80074a2:	9313      	str	r3, [sp, #76]	@ 0x4c
 80074a4:	e7b5      	b.n	8007412 <_strtod_l+0x6e2>
 80074a6:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80074a8:	9805      	ldr	r0, [sp, #20]
 80074aa:	462a      	mov	r2, r5
 80074ac:	f003 fda6 	bl	800affc <__lshift>
 80074b0:	901a      	str	r0, [sp, #104]	@ 0x68
 80074b2:	2800      	cmp	r0, #0
 80074b4:	d1d9      	bne.n	800746a <_strtod_l+0x73a>
 80074b6:	e65a      	b.n	800716e <_strtod_l+0x43e>
 80074b8:	2e00      	cmp	r6, #0
 80074ba:	dd07      	ble.n	80074cc <_strtod_l+0x79c>
 80074bc:	4649      	mov	r1, r9
 80074be:	9805      	ldr	r0, [sp, #20]
 80074c0:	4632      	mov	r2, r6
 80074c2:	f003 fd9b 	bl	800affc <__lshift>
 80074c6:	4681      	mov	r9, r0
 80074c8:	2800      	cmp	r0, #0
 80074ca:	d0d8      	beq.n	800747e <_strtod_l+0x74e>
 80074cc:	2f00      	cmp	r7, #0
 80074ce:	dd08      	ble.n	80074e2 <_strtod_l+0x7b2>
 80074d0:	4641      	mov	r1, r8
 80074d2:	9805      	ldr	r0, [sp, #20]
 80074d4:	463a      	mov	r2, r7
 80074d6:	f003 fd91 	bl	800affc <__lshift>
 80074da:	4680      	mov	r8, r0
 80074dc:	2800      	cmp	r0, #0
 80074de:	f43f ae46 	beq.w	800716e <_strtod_l+0x43e>
 80074e2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80074e4:	9805      	ldr	r0, [sp, #20]
 80074e6:	464a      	mov	r2, r9
 80074e8:	f003 fe10 	bl	800b10c <__mdiff>
 80074ec:	4604      	mov	r4, r0
 80074ee:	2800      	cmp	r0, #0
 80074f0:	f43f ae3d 	beq.w	800716e <_strtod_l+0x43e>
 80074f4:	68c3      	ldr	r3, [r0, #12]
 80074f6:	930f      	str	r3, [sp, #60]	@ 0x3c
 80074f8:	2300      	movs	r3, #0
 80074fa:	60c3      	str	r3, [r0, #12]
 80074fc:	4641      	mov	r1, r8
 80074fe:	f003 fde9 	bl	800b0d4 <__mcmp>
 8007502:	2800      	cmp	r0, #0
 8007504:	da46      	bge.n	8007594 <_strtod_l+0x864>
 8007506:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007508:	ea53 030a 	orrs.w	r3, r3, sl
 800750c:	d16c      	bne.n	80075e8 <_strtod_l+0x8b8>
 800750e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007512:	2b00      	cmp	r3, #0
 8007514:	d168      	bne.n	80075e8 <_strtod_l+0x8b8>
 8007516:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800751a:	0d1b      	lsrs	r3, r3, #20
 800751c:	051b      	lsls	r3, r3, #20
 800751e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8007522:	d961      	bls.n	80075e8 <_strtod_l+0x8b8>
 8007524:	6963      	ldr	r3, [r4, #20]
 8007526:	b913      	cbnz	r3, 800752e <_strtod_l+0x7fe>
 8007528:	6923      	ldr	r3, [r4, #16]
 800752a:	2b01      	cmp	r3, #1
 800752c:	dd5c      	ble.n	80075e8 <_strtod_l+0x8b8>
 800752e:	4621      	mov	r1, r4
 8007530:	2201      	movs	r2, #1
 8007532:	9805      	ldr	r0, [sp, #20]
 8007534:	f003 fd62 	bl	800affc <__lshift>
 8007538:	4641      	mov	r1, r8
 800753a:	4604      	mov	r4, r0
 800753c:	f003 fdca 	bl	800b0d4 <__mcmp>
 8007540:	2800      	cmp	r0, #0
 8007542:	dd51      	ble.n	80075e8 <_strtod_l+0x8b8>
 8007544:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007548:	9a08      	ldr	r2, [sp, #32]
 800754a:	0d1b      	lsrs	r3, r3, #20
 800754c:	051b      	lsls	r3, r3, #20
 800754e:	2a00      	cmp	r2, #0
 8007550:	d06b      	beq.n	800762a <_strtod_l+0x8fa>
 8007552:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8007556:	d868      	bhi.n	800762a <_strtod_l+0x8fa>
 8007558:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800755c:	f67f ae9d 	bls.w	800729a <_strtod_l+0x56a>
 8007560:	4b0a      	ldr	r3, [pc, #40]	@ (800758c <_strtod_l+0x85c>)
 8007562:	4650      	mov	r0, sl
 8007564:	4659      	mov	r1, fp
 8007566:	2200      	movs	r2, #0
 8007568:	f7f9 f856 	bl	8000618 <__aeabi_dmul>
 800756c:	4b08      	ldr	r3, [pc, #32]	@ (8007590 <_strtod_l+0x860>)
 800756e:	400b      	ands	r3, r1
 8007570:	4682      	mov	sl, r0
 8007572:	468b      	mov	fp, r1
 8007574:	2b00      	cmp	r3, #0
 8007576:	f47f ae05 	bne.w	8007184 <_strtod_l+0x454>
 800757a:	9a05      	ldr	r2, [sp, #20]
 800757c:	2322      	movs	r3, #34	@ 0x22
 800757e:	6013      	str	r3, [r2, #0]
 8007580:	e600      	b.n	8007184 <_strtod_l+0x454>
 8007582:	bf00      	nop
 8007584:	0800cea8 	.word	0x0800cea8
 8007588:	fffffc02 	.word	0xfffffc02
 800758c:	39500000 	.word	0x39500000
 8007590:	7ff00000 	.word	0x7ff00000
 8007594:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8007598:	d165      	bne.n	8007666 <_strtod_l+0x936>
 800759a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800759c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80075a0:	b35a      	cbz	r2, 80075fa <_strtod_l+0x8ca>
 80075a2:	4a9f      	ldr	r2, [pc, #636]	@ (8007820 <_strtod_l+0xaf0>)
 80075a4:	4293      	cmp	r3, r2
 80075a6:	d12b      	bne.n	8007600 <_strtod_l+0x8d0>
 80075a8:	9b08      	ldr	r3, [sp, #32]
 80075aa:	4651      	mov	r1, sl
 80075ac:	b303      	cbz	r3, 80075f0 <_strtod_l+0x8c0>
 80075ae:	4b9d      	ldr	r3, [pc, #628]	@ (8007824 <_strtod_l+0xaf4>)
 80075b0:	465a      	mov	r2, fp
 80075b2:	4013      	ands	r3, r2
 80075b4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 80075b8:	f04f 32ff 	mov.w	r2, #4294967295
 80075bc:	d81b      	bhi.n	80075f6 <_strtod_l+0x8c6>
 80075be:	0d1b      	lsrs	r3, r3, #20
 80075c0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80075c4:	fa02 f303 	lsl.w	r3, r2, r3
 80075c8:	4299      	cmp	r1, r3
 80075ca:	d119      	bne.n	8007600 <_strtod_l+0x8d0>
 80075cc:	4b96      	ldr	r3, [pc, #600]	@ (8007828 <_strtod_l+0xaf8>)
 80075ce:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80075d0:	429a      	cmp	r2, r3
 80075d2:	d102      	bne.n	80075da <_strtod_l+0x8aa>
 80075d4:	3101      	adds	r1, #1
 80075d6:	f43f adca 	beq.w	800716e <_strtod_l+0x43e>
 80075da:	4b92      	ldr	r3, [pc, #584]	@ (8007824 <_strtod_l+0xaf4>)
 80075dc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80075de:	401a      	ands	r2, r3
 80075e0:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 80075e4:	f04f 0a00 	mov.w	sl, #0
 80075e8:	9b08      	ldr	r3, [sp, #32]
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d1b8      	bne.n	8007560 <_strtod_l+0x830>
 80075ee:	e5c9      	b.n	8007184 <_strtod_l+0x454>
 80075f0:	f04f 33ff 	mov.w	r3, #4294967295
 80075f4:	e7e8      	b.n	80075c8 <_strtod_l+0x898>
 80075f6:	4613      	mov	r3, r2
 80075f8:	e7e6      	b.n	80075c8 <_strtod_l+0x898>
 80075fa:	ea53 030a 	orrs.w	r3, r3, sl
 80075fe:	d0a1      	beq.n	8007544 <_strtod_l+0x814>
 8007600:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007602:	b1db      	cbz	r3, 800763c <_strtod_l+0x90c>
 8007604:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007606:	4213      	tst	r3, r2
 8007608:	d0ee      	beq.n	80075e8 <_strtod_l+0x8b8>
 800760a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800760c:	9a08      	ldr	r2, [sp, #32]
 800760e:	4650      	mov	r0, sl
 8007610:	4659      	mov	r1, fp
 8007612:	b1bb      	cbz	r3, 8007644 <_strtod_l+0x914>
 8007614:	f7ff fb6c 	bl	8006cf0 <sulp>
 8007618:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800761c:	ec53 2b10 	vmov	r2, r3, d0
 8007620:	f7f8 fe44 	bl	80002ac <__adddf3>
 8007624:	4682      	mov	sl, r0
 8007626:	468b      	mov	fp, r1
 8007628:	e7de      	b.n	80075e8 <_strtod_l+0x8b8>
 800762a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800762e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8007632:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8007636:	f04f 3aff 	mov.w	sl, #4294967295
 800763a:	e7d5      	b.n	80075e8 <_strtod_l+0x8b8>
 800763c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800763e:	ea13 0f0a 	tst.w	r3, sl
 8007642:	e7e1      	b.n	8007608 <_strtod_l+0x8d8>
 8007644:	f7ff fb54 	bl	8006cf0 <sulp>
 8007648:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800764c:	ec53 2b10 	vmov	r2, r3, d0
 8007650:	f7f8 fe2a 	bl	80002a8 <__aeabi_dsub>
 8007654:	2200      	movs	r2, #0
 8007656:	2300      	movs	r3, #0
 8007658:	4682      	mov	sl, r0
 800765a:	468b      	mov	fp, r1
 800765c:	f7f9 fa44 	bl	8000ae8 <__aeabi_dcmpeq>
 8007660:	2800      	cmp	r0, #0
 8007662:	d0c1      	beq.n	80075e8 <_strtod_l+0x8b8>
 8007664:	e619      	b.n	800729a <_strtod_l+0x56a>
 8007666:	4641      	mov	r1, r8
 8007668:	4620      	mov	r0, r4
 800766a:	f003 feab 	bl	800b3c4 <__ratio>
 800766e:	ec57 6b10 	vmov	r6, r7, d0
 8007672:	2200      	movs	r2, #0
 8007674:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8007678:	4630      	mov	r0, r6
 800767a:	4639      	mov	r1, r7
 800767c:	f7f9 fa48 	bl	8000b10 <__aeabi_dcmple>
 8007680:	2800      	cmp	r0, #0
 8007682:	d06f      	beq.n	8007764 <_strtod_l+0xa34>
 8007684:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007686:	2b00      	cmp	r3, #0
 8007688:	d17a      	bne.n	8007780 <_strtod_l+0xa50>
 800768a:	f1ba 0f00 	cmp.w	sl, #0
 800768e:	d158      	bne.n	8007742 <_strtod_l+0xa12>
 8007690:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007692:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007696:	2b00      	cmp	r3, #0
 8007698:	d15a      	bne.n	8007750 <_strtod_l+0xa20>
 800769a:	4b64      	ldr	r3, [pc, #400]	@ (800782c <_strtod_l+0xafc>)
 800769c:	2200      	movs	r2, #0
 800769e:	4630      	mov	r0, r6
 80076a0:	4639      	mov	r1, r7
 80076a2:	f7f9 fa2b 	bl	8000afc <__aeabi_dcmplt>
 80076a6:	2800      	cmp	r0, #0
 80076a8:	d159      	bne.n	800775e <_strtod_l+0xa2e>
 80076aa:	4630      	mov	r0, r6
 80076ac:	4639      	mov	r1, r7
 80076ae:	4b60      	ldr	r3, [pc, #384]	@ (8007830 <_strtod_l+0xb00>)
 80076b0:	2200      	movs	r2, #0
 80076b2:	f7f8 ffb1 	bl	8000618 <__aeabi_dmul>
 80076b6:	4606      	mov	r6, r0
 80076b8:	460f      	mov	r7, r1
 80076ba:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 80076be:	9606      	str	r6, [sp, #24]
 80076c0:	9307      	str	r3, [sp, #28]
 80076c2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80076c6:	4d57      	ldr	r5, [pc, #348]	@ (8007824 <_strtod_l+0xaf4>)
 80076c8:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80076cc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80076ce:	401d      	ands	r5, r3
 80076d0:	4b58      	ldr	r3, [pc, #352]	@ (8007834 <_strtod_l+0xb04>)
 80076d2:	429d      	cmp	r5, r3
 80076d4:	f040 80b2 	bne.w	800783c <_strtod_l+0xb0c>
 80076d8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80076da:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 80076de:	ec4b ab10 	vmov	d0, sl, fp
 80076e2:	f003 fda7 	bl	800b234 <__ulp>
 80076e6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80076ea:	ec51 0b10 	vmov	r0, r1, d0
 80076ee:	f7f8 ff93 	bl	8000618 <__aeabi_dmul>
 80076f2:	4652      	mov	r2, sl
 80076f4:	465b      	mov	r3, fp
 80076f6:	f7f8 fdd9 	bl	80002ac <__adddf3>
 80076fa:	460b      	mov	r3, r1
 80076fc:	4949      	ldr	r1, [pc, #292]	@ (8007824 <_strtod_l+0xaf4>)
 80076fe:	4a4e      	ldr	r2, [pc, #312]	@ (8007838 <_strtod_l+0xb08>)
 8007700:	4019      	ands	r1, r3
 8007702:	4291      	cmp	r1, r2
 8007704:	4682      	mov	sl, r0
 8007706:	d942      	bls.n	800778e <_strtod_l+0xa5e>
 8007708:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800770a:	4b47      	ldr	r3, [pc, #284]	@ (8007828 <_strtod_l+0xaf8>)
 800770c:	429a      	cmp	r2, r3
 800770e:	d103      	bne.n	8007718 <_strtod_l+0x9e8>
 8007710:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007712:	3301      	adds	r3, #1
 8007714:	f43f ad2b 	beq.w	800716e <_strtod_l+0x43e>
 8007718:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8007828 <_strtod_l+0xaf8>
 800771c:	f04f 3aff 	mov.w	sl, #4294967295
 8007720:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007722:	9805      	ldr	r0, [sp, #20]
 8007724:	f003 fa52 	bl	800abcc <_Bfree>
 8007728:	9805      	ldr	r0, [sp, #20]
 800772a:	4649      	mov	r1, r9
 800772c:	f003 fa4e 	bl	800abcc <_Bfree>
 8007730:	9805      	ldr	r0, [sp, #20]
 8007732:	4641      	mov	r1, r8
 8007734:	f003 fa4a 	bl	800abcc <_Bfree>
 8007738:	9805      	ldr	r0, [sp, #20]
 800773a:	4621      	mov	r1, r4
 800773c:	f003 fa46 	bl	800abcc <_Bfree>
 8007740:	e618      	b.n	8007374 <_strtod_l+0x644>
 8007742:	f1ba 0f01 	cmp.w	sl, #1
 8007746:	d103      	bne.n	8007750 <_strtod_l+0xa20>
 8007748:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800774a:	2b00      	cmp	r3, #0
 800774c:	f43f ada5 	beq.w	800729a <_strtod_l+0x56a>
 8007750:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8007800 <_strtod_l+0xad0>
 8007754:	4f35      	ldr	r7, [pc, #212]	@ (800782c <_strtod_l+0xafc>)
 8007756:	ed8d 7b06 	vstr	d7, [sp, #24]
 800775a:	2600      	movs	r6, #0
 800775c:	e7b1      	b.n	80076c2 <_strtod_l+0x992>
 800775e:	4f34      	ldr	r7, [pc, #208]	@ (8007830 <_strtod_l+0xb00>)
 8007760:	2600      	movs	r6, #0
 8007762:	e7aa      	b.n	80076ba <_strtod_l+0x98a>
 8007764:	4b32      	ldr	r3, [pc, #200]	@ (8007830 <_strtod_l+0xb00>)
 8007766:	4630      	mov	r0, r6
 8007768:	4639      	mov	r1, r7
 800776a:	2200      	movs	r2, #0
 800776c:	f7f8 ff54 	bl	8000618 <__aeabi_dmul>
 8007770:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007772:	4606      	mov	r6, r0
 8007774:	460f      	mov	r7, r1
 8007776:	2b00      	cmp	r3, #0
 8007778:	d09f      	beq.n	80076ba <_strtod_l+0x98a>
 800777a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800777e:	e7a0      	b.n	80076c2 <_strtod_l+0x992>
 8007780:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8007808 <_strtod_l+0xad8>
 8007784:	ed8d 7b06 	vstr	d7, [sp, #24]
 8007788:	ec57 6b17 	vmov	r6, r7, d7
 800778c:	e799      	b.n	80076c2 <_strtod_l+0x992>
 800778e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8007792:	9b08      	ldr	r3, [sp, #32]
 8007794:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8007798:	2b00      	cmp	r3, #0
 800779a:	d1c1      	bne.n	8007720 <_strtod_l+0x9f0>
 800779c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80077a0:	0d1b      	lsrs	r3, r3, #20
 80077a2:	051b      	lsls	r3, r3, #20
 80077a4:	429d      	cmp	r5, r3
 80077a6:	d1bb      	bne.n	8007720 <_strtod_l+0x9f0>
 80077a8:	4630      	mov	r0, r6
 80077aa:	4639      	mov	r1, r7
 80077ac:	f7f9 fa7c 	bl	8000ca8 <__aeabi_d2lz>
 80077b0:	f7f8 ff04 	bl	80005bc <__aeabi_l2d>
 80077b4:	4602      	mov	r2, r0
 80077b6:	460b      	mov	r3, r1
 80077b8:	4630      	mov	r0, r6
 80077ba:	4639      	mov	r1, r7
 80077bc:	f7f8 fd74 	bl	80002a8 <__aeabi_dsub>
 80077c0:	460b      	mov	r3, r1
 80077c2:	4602      	mov	r2, r0
 80077c4:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80077c8:	f3cb 0613 	ubfx	r6, fp, #0, #20
 80077cc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80077ce:	ea46 060a 	orr.w	r6, r6, sl
 80077d2:	431e      	orrs	r6, r3
 80077d4:	d06f      	beq.n	80078b6 <_strtod_l+0xb86>
 80077d6:	a30e      	add	r3, pc, #56	@ (adr r3, 8007810 <_strtod_l+0xae0>)
 80077d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077dc:	f7f9 f98e 	bl	8000afc <__aeabi_dcmplt>
 80077e0:	2800      	cmp	r0, #0
 80077e2:	f47f accf 	bne.w	8007184 <_strtod_l+0x454>
 80077e6:	a30c      	add	r3, pc, #48	@ (adr r3, 8007818 <_strtod_l+0xae8>)
 80077e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077ec:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80077f0:	f7f9 f9a2 	bl	8000b38 <__aeabi_dcmpgt>
 80077f4:	2800      	cmp	r0, #0
 80077f6:	d093      	beq.n	8007720 <_strtod_l+0x9f0>
 80077f8:	e4c4      	b.n	8007184 <_strtod_l+0x454>
 80077fa:	bf00      	nop
 80077fc:	f3af 8000 	nop.w
 8007800:	00000000 	.word	0x00000000
 8007804:	bff00000 	.word	0xbff00000
 8007808:	00000000 	.word	0x00000000
 800780c:	3ff00000 	.word	0x3ff00000
 8007810:	94a03595 	.word	0x94a03595
 8007814:	3fdfffff 	.word	0x3fdfffff
 8007818:	35afe535 	.word	0x35afe535
 800781c:	3fe00000 	.word	0x3fe00000
 8007820:	000fffff 	.word	0x000fffff
 8007824:	7ff00000 	.word	0x7ff00000
 8007828:	7fefffff 	.word	0x7fefffff
 800782c:	3ff00000 	.word	0x3ff00000
 8007830:	3fe00000 	.word	0x3fe00000
 8007834:	7fe00000 	.word	0x7fe00000
 8007838:	7c9fffff 	.word	0x7c9fffff
 800783c:	9b08      	ldr	r3, [sp, #32]
 800783e:	b323      	cbz	r3, 800788a <_strtod_l+0xb5a>
 8007840:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8007844:	d821      	bhi.n	800788a <_strtod_l+0xb5a>
 8007846:	a328      	add	r3, pc, #160	@ (adr r3, 80078e8 <_strtod_l+0xbb8>)
 8007848:	e9d3 2300 	ldrd	r2, r3, [r3]
 800784c:	4630      	mov	r0, r6
 800784e:	4639      	mov	r1, r7
 8007850:	f7f9 f95e 	bl	8000b10 <__aeabi_dcmple>
 8007854:	b1a0      	cbz	r0, 8007880 <_strtod_l+0xb50>
 8007856:	4639      	mov	r1, r7
 8007858:	4630      	mov	r0, r6
 800785a:	f7f9 f9b5 	bl	8000bc8 <__aeabi_d2uiz>
 800785e:	2801      	cmp	r0, #1
 8007860:	bf38      	it	cc
 8007862:	2001      	movcc	r0, #1
 8007864:	f7f8 fe5e 	bl	8000524 <__aeabi_ui2d>
 8007868:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800786a:	4606      	mov	r6, r0
 800786c:	460f      	mov	r7, r1
 800786e:	b9fb      	cbnz	r3, 80078b0 <_strtod_l+0xb80>
 8007870:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8007874:	9014      	str	r0, [sp, #80]	@ 0x50
 8007876:	9315      	str	r3, [sp, #84]	@ 0x54
 8007878:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800787c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8007880:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8007882:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8007886:	1b5b      	subs	r3, r3, r5
 8007888:	9311      	str	r3, [sp, #68]	@ 0x44
 800788a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800788e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8007892:	f003 fccf 	bl	800b234 <__ulp>
 8007896:	4650      	mov	r0, sl
 8007898:	ec53 2b10 	vmov	r2, r3, d0
 800789c:	4659      	mov	r1, fp
 800789e:	f7f8 febb 	bl	8000618 <__aeabi_dmul>
 80078a2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80078a6:	f7f8 fd01 	bl	80002ac <__adddf3>
 80078aa:	4682      	mov	sl, r0
 80078ac:	468b      	mov	fp, r1
 80078ae:	e770      	b.n	8007792 <_strtod_l+0xa62>
 80078b0:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 80078b4:	e7e0      	b.n	8007878 <_strtod_l+0xb48>
 80078b6:	a30e      	add	r3, pc, #56	@ (adr r3, 80078f0 <_strtod_l+0xbc0>)
 80078b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078bc:	f7f9 f91e 	bl	8000afc <__aeabi_dcmplt>
 80078c0:	e798      	b.n	80077f4 <_strtod_l+0xac4>
 80078c2:	2300      	movs	r3, #0
 80078c4:	930b      	str	r3, [sp, #44]	@ 0x2c
 80078c6:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 80078c8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80078ca:	6013      	str	r3, [r2, #0]
 80078cc:	f7ff ba6d 	b.w	8006daa <_strtod_l+0x7a>
 80078d0:	2a65      	cmp	r2, #101	@ 0x65
 80078d2:	f43f ab66 	beq.w	8006fa2 <_strtod_l+0x272>
 80078d6:	2a45      	cmp	r2, #69	@ 0x45
 80078d8:	f43f ab63 	beq.w	8006fa2 <_strtod_l+0x272>
 80078dc:	2301      	movs	r3, #1
 80078de:	f7ff bb9e 	b.w	800701e <_strtod_l+0x2ee>
 80078e2:	bf00      	nop
 80078e4:	f3af 8000 	nop.w
 80078e8:	ffc00000 	.word	0xffc00000
 80078ec:	41dfffff 	.word	0x41dfffff
 80078f0:	94a03595 	.word	0x94a03595
 80078f4:	3fcfffff 	.word	0x3fcfffff

080078f8 <_strtod_r>:
 80078f8:	4b01      	ldr	r3, [pc, #4]	@ (8007900 <_strtod_r+0x8>)
 80078fa:	f7ff ba19 	b.w	8006d30 <_strtod_l>
 80078fe:	bf00      	nop
 8007900:	20000030 	.word	0x20000030

08007904 <_strtol_l.constprop.0>:
 8007904:	2b24      	cmp	r3, #36	@ 0x24
 8007906:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800790a:	4686      	mov	lr, r0
 800790c:	4690      	mov	r8, r2
 800790e:	d801      	bhi.n	8007914 <_strtol_l.constprop.0+0x10>
 8007910:	2b01      	cmp	r3, #1
 8007912:	d106      	bne.n	8007922 <_strtol_l.constprop.0+0x1e>
 8007914:	f001 fe96 	bl	8009644 <__errno>
 8007918:	2316      	movs	r3, #22
 800791a:	6003      	str	r3, [r0, #0]
 800791c:	2000      	movs	r0, #0
 800791e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007922:	4834      	ldr	r0, [pc, #208]	@ (80079f4 <_strtol_l.constprop.0+0xf0>)
 8007924:	460d      	mov	r5, r1
 8007926:	462a      	mov	r2, r5
 8007928:	f815 4b01 	ldrb.w	r4, [r5], #1
 800792c:	5d06      	ldrb	r6, [r0, r4]
 800792e:	f016 0608 	ands.w	r6, r6, #8
 8007932:	d1f8      	bne.n	8007926 <_strtol_l.constprop.0+0x22>
 8007934:	2c2d      	cmp	r4, #45	@ 0x2d
 8007936:	d12d      	bne.n	8007994 <_strtol_l.constprop.0+0x90>
 8007938:	782c      	ldrb	r4, [r5, #0]
 800793a:	2601      	movs	r6, #1
 800793c:	1c95      	adds	r5, r2, #2
 800793e:	f033 0210 	bics.w	r2, r3, #16
 8007942:	d109      	bne.n	8007958 <_strtol_l.constprop.0+0x54>
 8007944:	2c30      	cmp	r4, #48	@ 0x30
 8007946:	d12a      	bne.n	800799e <_strtol_l.constprop.0+0x9a>
 8007948:	782a      	ldrb	r2, [r5, #0]
 800794a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800794e:	2a58      	cmp	r2, #88	@ 0x58
 8007950:	d125      	bne.n	800799e <_strtol_l.constprop.0+0x9a>
 8007952:	786c      	ldrb	r4, [r5, #1]
 8007954:	2310      	movs	r3, #16
 8007956:	3502      	adds	r5, #2
 8007958:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800795c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8007960:	2200      	movs	r2, #0
 8007962:	fbbc f9f3 	udiv	r9, ip, r3
 8007966:	4610      	mov	r0, r2
 8007968:	fb03 ca19 	mls	sl, r3, r9, ip
 800796c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8007970:	2f09      	cmp	r7, #9
 8007972:	d81b      	bhi.n	80079ac <_strtol_l.constprop.0+0xa8>
 8007974:	463c      	mov	r4, r7
 8007976:	42a3      	cmp	r3, r4
 8007978:	dd27      	ble.n	80079ca <_strtol_l.constprop.0+0xc6>
 800797a:	1c57      	adds	r7, r2, #1
 800797c:	d007      	beq.n	800798e <_strtol_l.constprop.0+0x8a>
 800797e:	4581      	cmp	r9, r0
 8007980:	d320      	bcc.n	80079c4 <_strtol_l.constprop.0+0xc0>
 8007982:	d101      	bne.n	8007988 <_strtol_l.constprop.0+0x84>
 8007984:	45a2      	cmp	sl, r4
 8007986:	db1d      	blt.n	80079c4 <_strtol_l.constprop.0+0xc0>
 8007988:	fb00 4003 	mla	r0, r0, r3, r4
 800798c:	2201      	movs	r2, #1
 800798e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007992:	e7eb      	b.n	800796c <_strtol_l.constprop.0+0x68>
 8007994:	2c2b      	cmp	r4, #43	@ 0x2b
 8007996:	bf04      	itt	eq
 8007998:	782c      	ldrbeq	r4, [r5, #0]
 800799a:	1c95      	addeq	r5, r2, #2
 800799c:	e7cf      	b.n	800793e <_strtol_l.constprop.0+0x3a>
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d1da      	bne.n	8007958 <_strtol_l.constprop.0+0x54>
 80079a2:	2c30      	cmp	r4, #48	@ 0x30
 80079a4:	bf0c      	ite	eq
 80079a6:	2308      	moveq	r3, #8
 80079a8:	230a      	movne	r3, #10
 80079aa:	e7d5      	b.n	8007958 <_strtol_l.constprop.0+0x54>
 80079ac:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80079b0:	2f19      	cmp	r7, #25
 80079b2:	d801      	bhi.n	80079b8 <_strtol_l.constprop.0+0xb4>
 80079b4:	3c37      	subs	r4, #55	@ 0x37
 80079b6:	e7de      	b.n	8007976 <_strtol_l.constprop.0+0x72>
 80079b8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80079bc:	2f19      	cmp	r7, #25
 80079be:	d804      	bhi.n	80079ca <_strtol_l.constprop.0+0xc6>
 80079c0:	3c57      	subs	r4, #87	@ 0x57
 80079c2:	e7d8      	b.n	8007976 <_strtol_l.constprop.0+0x72>
 80079c4:	f04f 32ff 	mov.w	r2, #4294967295
 80079c8:	e7e1      	b.n	800798e <_strtol_l.constprop.0+0x8a>
 80079ca:	1c53      	adds	r3, r2, #1
 80079cc:	d108      	bne.n	80079e0 <_strtol_l.constprop.0+0xdc>
 80079ce:	2322      	movs	r3, #34	@ 0x22
 80079d0:	f8ce 3000 	str.w	r3, [lr]
 80079d4:	4660      	mov	r0, ip
 80079d6:	f1b8 0f00 	cmp.w	r8, #0
 80079da:	d0a0      	beq.n	800791e <_strtol_l.constprop.0+0x1a>
 80079dc:	1e69      	subs	r1, r5, #1
 80079de:	e006      	b.n	80079ee <_strtol_l.constprop.0+0xea>
 80079e0:	b106      	cbz	r6, 80079e4 <_strtol_l.constprop.0+0xe0>
 80079e2:	4240      	negs	r0, r0
 80079e4:	f1b8 0f00 	cmp.w	r8, #0
 80079e8:	d099      	beq.n	800791e <_strtol_l.constprop.0+0x1a>
 80079ea:	2a00      	cmp	r2, #0
 80079ec:	d1f6      	bne.n	80079dc <_strtol_l.constprop.0+0xd8>
 80079ee:	f8c8 1000 	str.w	r1, [r8]
 80079f2:	e794      	b.n	800791e <_strtol_l.constprop.0+0x1a>
 80079f4:	0800ced1 	.word	0x0800ced1

080079f8 <_strtol_r>:
 80079f8:	f7ff bf84 	b.w	8007904 <_strtol_l.constprop.0>

080079fc <__cvt>:
 80079fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007a00:	ec57 6b10 	vmov	r6, r7, d0
 8007a04:	2f00      	cmp	r7, #0
 8007a06:	460c      	mov	r4, r1
 8007a08:	4619      	mov	r1, r3
 8007a0a:	463b      	mov	r3, r7
 8007a0c:	bfbb      	ittet	lt
 8007a0e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8007a12:	461f      	movlt	r7, r3
 8007a14:	2300      	movge	r3, #0
 8007a16:	232d      	movlt	r3, #45	@ 0x2d
 8007a18:	700b      	strb	r3, [r1, #0]
 8007a1a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007a1c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8007a20:	4691      	mov	r9, r2
 8007a22:	f023 0820 	bic.w	r8, r3, #32
 8007a26:	bfbc      	itt	lt
 8007a28:	4632      	movlt	r2, r6
 8007a2a:	4616      	movlt	r6, r2
 8007a2c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007a30:	d005      	beq.n	8007a3e <__cvt+0x42>
 8007a32:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8007a36:	d100      	bne.n	8007a3a <__cvt+0x3e>
 8007a38:	3401      	adds	r4, #1
 8007a3a:	2102      	movs	r1, #2
 8007a3c:	e000      	b.n	8007a40 <__cvt+0x44>
 8007a3e:	2103      	movs	r1, #3
 8007a40:	ab03      	add	r3, sp, #12
 8007a42:	9301      	str	r3, [sp, #4]
 8007a44:	ab02      	add	r3, sp, #8
 8007a46:	9300      	str	r3, [sp, #0]
 8007a48:	ec47 6b10 	vmov	d0, r6, r7
 8007a4c:	4653      	mov	r3, sl
 8007a4e:	4622      	mov	r2, r4
 8007a50:	f001 fede 	bl	8009810 <_dtoa_r>
 8007a54:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8007a58:	4605      	mov	r5, r0
 8007a5a:	d119      	bne.n	8007a90 <__cvt+0x94>
 8007a5c:	f019 0f01 	tst.w	r9, #1
 8007a60:	d00e      	beq.n	8007a80 <__cvt+0x84>
 8007a62:	eb00 0904 	add.w	r9, r0, r4
 8007a66:	2200      	movs	r2, #0
 8007a68:	2300      	movs	r3, #0
 8007a6a:	4630      	mov	r0, r6
 8007a6c:	4639      	mov	r1, r7
 8007a6e:	f7f9 f83b 	bl	8000ae8 <__aeabi_dcmpeq>
 8007a72:	b108      	cbz	r0, 8007a78 <__cvt+0x7c>
 8007a74:	f8cd 900c 	str.w	r9, [sp, #12]
 8007a78:	2230      	movs	r2, #48	@ 0x30
 8007a7a:	9b03      	ldr	r3, [sp, #12]
 8007a7c:	454b      	cmp	r3, r9
 8007a7e:	d31e      	bcc.n	8007abe <__cvt+0xc2>
 8007a80:	9b03      	ldr	r3, [sp, #12]
 8007a82:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007a84:	1b5b      	subs	r3, r3, r5
 8007a86:	4628      	mov	r0, r5
 8007a88:	6013      	str	r3, [r2, #0]
 8007a8a:	b004      	add	sp, #16
 8007a8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a90:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007a94:	eb00 0904 	add.w	r9, r0, r4
 8007a98:	d1e5      	bne.n	8007a66 <__cvt+0x6a>
 8007a9a:	7803      	ldrb	r3, [r0, #0]
 8007a9c:	2b30      	cmp	r3, #48	@ 0x30
 8007a9e:	d10a      	bne.n	8007ab6 <__cvt+0xba>
 8007aa0:	2200      	movs	r2, #0
 8007aa2:	2300      	movs	r3, #0
 8007aa4:	4630      	mov	r0, r6
 8007aa6:	4639      	mov	r1, r7
 8007aa8:	f7f9 f81e 	bl	8000ae8 <__aeabi_dcmpeq>
 8007aac:	b918      	cbnz	r0, 8007ab6 <__cvt+0xba>
 8007aae:	f1c4 0401 	rsb	r4, r4, #1
 8007ab2:	f8ca 4000 	str.w	r4, [sl]
 8007ab6:	f8da 3000 	ldr.w	r3, [sl]
 8007aba:	4499      	add	r9, r3
 8007abc:	e7d3      	b.n	8007a66 <__cvt+0x6a>
 8007abe:	1c59      	adds	r1, r3, #1
 8007ac0:	9103      	str	r1, [sp, #12]
 8007ac2:	701a      	strb	r2, [r3, #0]
 8007ac4:	e7d9      	b.n	8007a7a <__cvt+0x7e>

08007ac6 <__exponent>:
 8007ac6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007ac8:	2900      	cmp	r1, #0
 8007aca:	bfba      	itte	lt
 8007acc:	4249      	neglt	r1, r1
 8007ace:	232d      	movlt	r3, #45	@ 0x2d
 8007ad0:	232b      	movge	r3, #43	@ 0x2b
 8007ad2:	2909      	cmp	r1, #9
 8007ad4:	7002      	strb	r2, [r0, #0]
 8007ad6:	7043      	strb	r3, [r0, #1]
 8007ad8:	dd29      	ble.n	8007b2e <__exponent+0x68>
 8007ada:	f10d 0307 	add.w	r3, sp, #7
 8007ade:	461d      	mov	r5, r3
 8007ae0:	270a      	movs	r7, #10
 8007ae2:	461a      	mov	r2, r3
 8007ae4:	fbb1 f6f7 	udiv	r6, r1, r7
 8007ae8:	fb07 1416 	mls	r4, r7, r6, r1
 8007aec:	3430      	adds	r4, #48	@ 0x30
 8007aee:	f802 4c01 	strb.w	r4, [r2, #-1]
 8007af2:	460c      	mov	r4, r1
 8007af4:	2c63      	cmp	r4, #99	@ 0x63
 8007af6:	f103 33ff 	add.w	r3, r3, #4294967295
 8007afa:	4631      	mov	r1, r6
 8007afc:	dcf1      	bgt.n	8007ae2 <__exponent+0x1c>
 8007afe:	3130      	adds	r1, #48	@ 0x30
 8007b00:	1e94      	subs	r4, r2, #2
 8007b02:	f803 1c01 	strb.w	r1, [r3, #-1]
 8007b06:	1c41      	adds	r1, r0, #1
 8007b08:	4623      	mov	r3, r4
 8007b0a:	42ab      	cmp	r3, r5
 8007b0c:	d30a      	bcc.n	8007b24 <__exponent+0x5e>
 8007b0e:	f10d 0309 	add.w	r3, sp, #9
 8007b12:	1a9b      	subs	r3, r3, r2
 8007b14:	42ac      	cmp	r4, r5
 8007b16:	bf88      	it	hi
 8007b18:	2300      	movhi	r3, #0
 8007b1a:	3302      	adds	r3, #2
 8007b1c:	4403      	add	r3, r0
 8007b1e:	1a18      	subs	r0, r3, r0
 8007b20:	b003      	add	sp, #12
 8007b22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007b24:	f813 6b01 	ldrb.w	r6, [r3], #1
 8007b28:	f801 6f01 	strb.w	r6, [r1, #1]!
 8007b2c:	e7ed      	b.n	8007b0a <__exponent+0x44>
 8007b2e:	2330      	movs	r3, #48	@ 0x30
 8007b30:	3130      	adds	r1, #48	@ 0x30
 8007b32:	7083      	strb	r3, [r0, #2]
 8007b34:	70c1      	strb	r1, [r0, #3]
 8007b36:	1d03      	adds	r3, r0, #4
 8007b38:	e7f1      	b.n	8007b1e <__exponent+0x58>
	...

08007b3c <_printf_float>:
 8007b3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b40:	b08d      	sub	sp, #52	@ 0x34
 8007b42:	460c      	mov	r4, r1
 8007b44:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8007b48:	4616      	mov	r6, r2
 8007b4a:	461f      	mov	r7, r3
 8007b4c:	4605      	mov	r5, r0
 8007b4e:	f001 fd1f 	bl	8009590 <_localeconv_r>
 8007b52:	6803      	ldr	r3, [r0, #0]
 8007b54:	9304      	str	r3, [sp, #16]
 8007b56:	4618      	mov	r0, r3
 8007b58:	f7f8 fb9a 	bl	8000290 <strlen>
 8007b5c:	2300      	movs	r3, #0
 8007b5e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007b60:	f8d8 3000 	ldr.w	r3, [r8]
 8007b64:	9005      	str	r0, [sp, #20]
 8007b66:	3307      	adds	r3, #7
 8007b68:	f023 0307 	bic.w	r3, r3, #7
 8007b6c:	f103 0208 	add.w	r2, r3, #8
 8007b70:	f894 a018 	ldrb.w	sl, [r4, #24]
 8007b74:	f8d4 b000 	ldr.w	fp, [r4]
 8007b78:	f8c8 2000 	str.w	r2, [r8]
 8007b7c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007b80:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8007b84:	9307      	str	r3, [sp, #28]
 8007b86:	f8cd 8018 	str.w	r8, [sp, #24]
 8007b8a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8007b8e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007b92:	4b9c      	ldr	r3, [pc, #624]	@ (8007e04 <_printf_float+0x2c8>)
 8007b94:	f04f 32ff 	mov.w	r2, #4294967295
 8007b98:	f7f8 ffd8 	bl	8000b4c <__aeabi_dcmpun>
 8007b9c:	bb70      	cbnz	r0, 8007bfc <_printf_float+0xc0>
 8007b9e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007ba2:	4b98      	ldr	r3, [pc, #608]	@ (8007e04 <_printf_float+0x2c8>)
 8007ba4:	f04f 32ff 	mov.w	r2, #4294967295
 8007ba8:	f7f8 ffb2 	bl	8000b10 <__aeabi_dcmple>
 8007bac:	bb30      	cbnz	r0, 8007bfc <_printf_float+0xc0>
 8007bae:	2200      	movs	r2, #0
 8007bb0:	2300      	movs	r3, #0
 8007bb2:	4640      	mov	r0, r8
 8007bb4:	4649      	mov	r1, r9
 8007bb6:	f7f8 ffa1 	bl	8000afc <__aeabi_dcmplt>
 8007bba:	b110      	cbz	r0, 8007bc2 <_printf_float+0x86>
 8007bbc:	232d      	movs	r3, #45	@ 0x2d
 8007bbe:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007bc2:	4a91      	ldr	r2, [pc, #580]	@ (8007e08 <_printf_float+0x2cc>)
 8007bc4:	4b91      	ldr	r3, [pc, #580]	@ (8007e0c <_printf_float+0x2d0>)
 8007bc6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8007bca:	bf94      	ite	ls
 8007bcc:	4690      	movls	r8, r2
 8007bce:	4698      	movhi	r8, r3
 8007bd0:	2303      	movs	r3, #3
 8007bd2:	6123      	str	r3, [r4, #16]
 8007bd4:	f02b 0304 	bic.w	r3, fp, #4
 8007bd8:	6023      	str	r3, [r4, #0]
 8007bda:	f04f 0900 	mov.w	r9, #0
 8007bde:	9700      	str	r7, [sp, #0]
 8007be0:	4633      	mov	r3, r6
 8007be2:	aa0b      	add	r2, sp, #44	@ 0x2c
 8007be4:	4621      	mov	r1, r4
 8007be6:	4628      	mov	r0, r5
 8007be8:	f000 f9d2 	bl	8007f90 <_printf_common>
 8007bec:	3001      	adds	r0, #1
 8007bee:	f040 808d 	bne.w	8007d0c <_printf_float+0x1d0>
 8007bf2:	f04f 30ff 	mov.w	r0, #4294967295
 8007bf6:	b00d      	add	sp, #52	@ 0x34
 8007bf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007bfc:	4642      	mov	r2, r8
 8007bfe:	464b      	mov	r3, r9
 8007c00:	4640      	mov	r0, r8
 8007c02:	4649      	mov	r1, r9
 8007c04:	f7f8 ffa2 	bl	8000b4c <__aeabi_dcmpun>
 8007c08:	b140      	cbz	r0, 8007c1c <_printf_float+0xe0>
 8007c0a:	464b      	mov	r3, r9
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	bfbc      	itt	lt
 8007c10:	232d      	movlt	r3, #45	@ 0x2d
 8007c12:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8007c16:	4a7e      	ldr	r2, [pc, #504]	@ (8007e10 <_printf_float+0x2d4>)
 8007c18:	4b7e      	ldr	r3, [pc, #504]	@ (8007e14 <_printf_float+0x2d8>)
 8007c1a:	e7d4      	b.n	8007bc6 <_printf_float+0x8a>
 8007c1c:	6863      	ldr	r3, [r4, #4]
 8007c1e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8007c22:	9206      	str	r2, [sp, #24]
 8007c24:	1c5a      	adds	r2, r3, #1
 8007c26:	d13b      	bne.n	8007ca0 <_printf_float+0x164>
 8007c28:	2306      	movs	r3, #6
 8007c2a:	6063      	str	r3, [r4, #4]
 8007c2c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8007c30:	2300      	movs	r3, #0
 8007c32:	6022      	str	r2, [r4, #0]
 8007c34:	9303      	str	r3, [sp, #12]
 8007c36:	ab0a      	add	r3, sp, #40	@ 0x28
 8007c38:	e9cd a301 	strd	sl, r3, [sp, #4]
 8007c3c:	ab09      	add	r3, sp, #36	@ 0x24
 8007c3e:	9300      	str	r3, [sp, #0]
 8007c40:	6861      	ldr	r1, [r4, #4]
 8007c42:	ec49 8b10 	vmov	d0, r8, r9
 8007c46:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8007c4a:	4628      	mov	r0, r5
 8007c4c:	f7ff fed6 	bl	80079fc <__cvt>
 8007c50:	9b06      	ldr	r3, [sp, #24]
 8007c52:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007c54:	2b47      	cmp	r3, #71	@ 0x47
 8007c56:	4680      	mov	r8, r0
 8007c58:	d129      	bne.n	8007cae <_printf_float+0x172>
 8007c5a:	1cc8      	adds	r0, r1, #3
 8007c5c:	db02      	blt.n	8007c64 <_printf_float+0x128>
 8007c5e:	6863      	ldr	r3, [r4, #4]
 8007c60:	4299      	cmp	r1, r3
 8007c62:	dd41      	ble.n	8007ce8 <_printf_float+0x1ac>
 8007c64:	f1aa 0a02 	sub.w	sl, sl, #2
 8007c68:	fa5f fa8a 	uxtb.w	sl, sl
 8007c6c:	3901      	subs	r1, #1
 8007c6e:	4652      	mov	r2, sl
 8007c70:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8007c74:	9109      	str	r1, [sp, #36]	@ 0x24
 8007c76:	f7ff ff26 	bl	8007ac6 <__exponent>
 8007c7a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007c7c:	1813      	adds	r3, r2, r0
 8007c7e:	2a01      	cmp	r2, #1
 8007c80:	4681      	mov	r9, r0
 8007c82:	6123      	str	r3, [r4, #16]
 8007c84:	dc02      	bgt.n	8007c8c <_printf_float+0x150>
 8007c86:	6822      	ldr	r2, [r4, #0]
 8007c88:	07d2      	lsls	r2, r2, #31
 8007c8a:	d501      	bpl.n	8007c90 <_printf_float+0x154>
 8007c8c:	3301      	adds	r3, #1
 8007c8e:	6123      	str	r3, [r4, #16]
 8007c90:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d0a2      	beq.n	8007bde <_printf_float+0xa2>
 8007c98:	232d      	movs	r3, #45	@ 0x2d
 8007c9a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007c9e:	e79e      	b.n	8007bde <_printf_float+0xa2>
 8007ca0:	9a06      	ldr	r2, [sp, #24]
 8007ca2:	2a47      	cmp	r2, #71	@ 0x47
 8007ca4:	d1c2      	bne.n	8007c2c <_printf_float+0xf0>
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d1c0      	bne.n	8007c2c <_printf_float+0xf0>
 8007caa:	2301      	movs	r3, #1
 8007cac:	e7bd      	b.n	8007c2a <_printf_float+0xee>
 8007cae:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007cb2:	d9db      	bls.n	8007c6c <_printf_float+0x130>
 8007cb4:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8007cb8:	d118      	bne.n	8007cec <_printf_float+0x1b0>
 8007cba:	2900      	cmp	r1, #0
 8007cbc:	6863      	ldr	r3, [r4, #4]
 8007cbe:	dd0b      	ble.n	8007cd8 <_printf_float+0x19c>
 8007cc0:	6121      	str	r1, [r4, #16]
 8007cc2:	b913      	cbnz	r3, 8007cca <_printf_float+0x18e>
 8007cc4:	6822      	ldr	r2, [r4, #0]
 8007cc6:	07d0      	lsls	r0, r2, #31
 8007cc8:	d502      	bpl.n	8007cd0 <_printf_float+0x194>
 8007cca:	3301      	adds	r3, #1
 8007ccc:	440b      	add	r3, r1
 8007cce:	6123      	str	r3, [r4, #16]
 8007cd0:	65a1      	str	r1, [r4, #88]	@ 0x58
 8007cd2:	f04f 0900 	mov.w	r9, #0
 8007cd6:	e7db      	b.n	8007c90 <_printf_float+0x154>
 8007cd8:	b913      	cbnz	r3, 8007ce0 <_printf_float+0x1a4>
 8007cda:	6822      	ldr	r2, [r4, #0]
 8007cdc:	07d2      	lsls	r2, r2, #31
 8007cde:	d501      	bpl.n	8007ce4 <_printf_float+0x1a8>
 8007ce0:	3302      	adds	r3, #2
 8007ce2:	e7f4      	b.n	8007cce <_printf_float+0x192>
 8007ce4:	2301      	movs	r3, #1
 8007ce6:	e7f2      	b.n	8007cce <_printf_float+0x192>
 8007ce8:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8007cec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007cee:	4299      	cmp	r1, r3
 8007cf0:	db05      	blt.n	8007cfe <_printf_float+0x1c2>
 8007cf2:	6823      	ldr	r3, [r4, #0]
 8007cf4:	6121      	str	r1, [r4, #16]
 8007cf6:	07d8      	lsls	r0, r3, #31
 8007cf8:	d5ea      	bpl.n	8007cd0 <_printf_float+0x194>
 8007cfa:	1c4b      	adds	r3, r1, #1
 8007cfc:	e7e7      	b.n	8007cce <_printf_float+0x192>
 8007cfe:	2900      	cmp	r1, #0
 8007d00:	bfd4      	ite	le
 8007d02:	f1c1 0202 	rsble	r2, r1, #2
 8007d06:	2201      	movgt	r2, #1
 8007d08:	4413      	add	r3, r2
 8007d0a:	e7e0      	b.n	8007cce <_printf_float+0x192>
 8007d0c:	6823      	ldr	r3, [r4, #0]
 8007d0e:	055a      	lsls	r2, r3, #21
 8007d10:	d407      	bmi.n	8007d22 <_printf_float+0x1e6>
 8007d12:	6923      	ldr	r3, [r4, #16]
 8007d14:	4642      	mov	r2, r8
 8007d16:	4631      	mov	r1, r6
 8007d18:	4628      	mov	r0, r5
 8007d1a:	47b8      	blx	r7
 8007d1c:	3001      	adds	r0, #1
 8007d1e:	d12b      	bne.n	8007d78 <_printf_float+0x23c>
 8007d20:	e767      	b.n	8007bf2 <_printf_float+0xb6>
 8007d22:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007d26:	f240 80dd 	bls.w	8007ee4 <_printf_float+0x3a8>
 8007d2a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007d2e:	2200      	movs	r2, #0
 8007d30:	2300      	movs	r3, #0
 8007d32:	f7f8 fed9 	bl	8000ae8 <__aeabi_dcmpeq>
 8007d36:	2800      	cmp	r0, #0
 8007d38:	d033      	beq.n	8007da2 <_printf_float+0x266>
 8007d3a:	4a37      	ldr	r2, [pc, #220]	@ (8007e18 <_printf_float+0x2dc>)
 8007d3c:	2301      	movs	r3, #1
 8007d3e:	4631      	mov	r1, r6
 8007d40:	4628      	mov	r0, r5
 8007d42:	47b8      	blx	r7
 8007d44:	3001      	adds	r0, #1
 8007d46:	f43f af54 	beq.w	8007bf2 <_printf_float+0xb6>
 8007d4a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8007d4e:	4543      	cmp	r3, r8
 8007d50:	db02      	blt.n	8007d58 <_printf_float+0x21c>
 8007d52:	6823      	ldr	r3, [r4, #0]
 8007d54:	07d8      	lsls	r0, r3, #31
 8007d56:	d50f      	bpl.n	8007d78 <_printf_float+0x23c>
 8007d58:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007d5c:	4631      	mov	r1, r6
 8007d5e:	4628      	mov	r0, r5
 8007d60:	47b8      	blx	r7
 8007d62:	3001      	adds	r0, #1
 8007d64:	f43f af45 	beq.w	8007bf2 <_printf_float+0xb6>
 8007d68:	f04f 0900 	mov.w	r9, #0
 8007d6c:	f108 38ff 	add.w	r8, r8, #4294967295
 8007d70:	f104 0a1a 	add.w	sl, r4, #26
 8007d74:	45c8      	cmp	r8, r9
 8007d76:	dc09      	bgt.n	8007d8c <_printf_float+0x250>
 8007d78:	6823      	ldr	r3, [r4, #0]
 8007d7a:	079b      	lsls	r3, r3, #30
 8007d7c:	f100 8103 	bmi.w	8007f86 <_printf_float+0x44a>
 8007d80:	68e0      	ldr	r0, [r4, #12]
 8007d82:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007d84:	4298      	cmp	r0, r3
 8007d86:	bfb8      	it	lt
 8007d88:	4618      	movlt	r0, r3
 8007d8a:	e734      	b.n	8007bf6 <_printf_float+0xba>
 8007d8c:	2301      	movs	r3, #1
 8007d8e:	4652      	mov	r2, sl
 8007d90:	4631      	mov	r1, r6
 8007d92:	4628      	mov	r0, r5
 8007d94:	47b8      	blx	r7
 8007d96:	3001      	adds	r0, #1
 8007d98:	f43f af2b 	beq.w	8007bf2 <_printf_float+0xb6>
 8007d9c:	f109 0901 	add.w	r9, r9, #1
 8007da0:	e7e8      	b.n	8007d74 <_printf_float+0x238>
 8007da2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	dc39      	bgt.n	8007e1c <_printf_float+0x2e0>
 8007da8:	4a1b      	ldr	r2, [pc, #108]	@ (8007e18 <_printf_float+0x2dc>)
 8007daa:	2301      	movs	r3, #1
 8007dac:	4631      	mov	r1, r6
 8007dae:	4628      	mov	r0, r5
 8007db0:	47b8      	blx	r7
 8007db2:	3001      	adds	r0, #1
 8007db4:	f43f af1d 	beq.w	8007bf2 <_printf_float+0xb6>
 8007db8:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8007dbc:	ea59 0303 	orrs.w	r3, r9, r3
 8007dc0:	d102      	bne.n	8007dc8 <_printf_float+0x28c>
 8007dc2:	6823      	ldr	r3, [r4, #0]
 8007dc4:	07d9      	lsls	r1, r3, #31
 8007dc6:	d5d7      	bpl.n	8007d78 <_printf_float+0x23c>
 8007dc8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007dcc:	4631      	mov	r1, r6
 8007dce:	4628      	mov	r0, r5
 8007dd0:	47b8      	blx	r7
 8007dd2:	3001      	adds	r0, #1
 8007dd4:	f43f af0d 	beq.w	8007bf2 <_printf_float+0xb6>
 8007dd8:	f04f 0a00 	mov.w	sl, #0
 8007ddc:	f104 0b1a 	add.w	fp, r4, #26
 8007de0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007de2:	425b      	negs	r3, r3
 8007de4:	4553      	cmp	r3, sl
 8007de6:	dc01      	bgt.n	8007dec <_printf_float+0x2b0>
 8007de8:	464b      	mov	r3, r9
 8007dea:	e793      	b.n	8007d14 <_printf_float+0x1d8>
 8007dec:	2301      	movs	r3, #1
 8007dee:	465a      	mov	r2, fp
 8007df0:	4631      	mov	r1, r6
 8007df2:	4628      	mov	r0, r5
 8007df4:	47b8      	blx	r7
 8007df6:	3001      	adds	r0, #1
 8007df8:	f43f aefb 	beq.w	8007bf2 <_printf_float+0xb6>
 8007dfc:	f10a 0a01 	add.w	sl, sl, #1
 8007e00:	e7ee      	b.n	8007de0 <_printf_float+0x2a4>
 8007e02:	bf00      	nop
 8007e04:	7fefffff 	.word	0x7fefffff
 8007e08:	0800cfd1 	.word	0x0800cfd1
 8007e0c:	0800cfd5 	.word	0x0800cfd5
 8007e10:	0800cfd9 	.word	0x0800cfd9
 8007e14:	0800cfdd 	.word	0x0800cfdd
 8007e18:	0800d327 	.word	0x0800d327
 8007e1c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007e1e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007e22:	4553      	cmp	r3, sl
 8007e24:	bfa8      	it	ge
 8007e26:	4653      	movge	r3, sl
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	4699      	mov	r9, r3
 8007e2c:	dc36      	bgt.n	8007e9c <_printf_float+0x360>
 8007e2e:	f04f 0b00 	mov.w	fp, #0
 8007e32:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007e36:	f104 021a 	add.w	r2, r4, #26
 8007e3a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007e3c:	9306      	str	r3, [sp, #24]
 8007e3e:	eba3 0309 	sub.w	r3, r3, r9
 8007e42:	455b      	cmp	r3, fp
 8007e44:	dc31      	bgt.n	8007eaa <_printf_float+0x36e>
 8007e46:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007e48:	459a      	cmp	sl, r3
 8007e4a:	dc3a      	bgt.n	8007ec2 <_printf_float+0x386>
 8007e4c:	6823      	ldr	r3, [r4, #0]
 8007e4e:	07da      	lsls	r2, r3, #31
 8007e50:	d437      	bmi.n	8007ec2 <_printf_float+0x386>
 8007e52:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007e54:	ebaa 0903 	sub.w	r9, sl, r3
 8007e58:	9b06      	ldr	r3, [sp, #24]
 8007e5a:	ebaa 0303 	sub.w	r3, sl, r3
 8007e5e:	4599      	cmp	r9, r3
 8007e60:	bfa8      	it	ge
 8007e62:	4699      	movge	r9, r3
 8007e64:	f1b9 0f00 	cmp.w	r9, #0
 8007e68:	dc33      	bgt.n	8007ed2 <_printf_float+0x396>
 8007e6a:	f04f 0800 	mov.w	r8, #0
 8007e6e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007e72:	f104 0b1a 	add.w	fp, r4, #26
 8007e76:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007e78:	ebaa 0303 	sub.w	r3, sl, r3
 8007e7c:	eba3 0309 	sub.w	r3, r3, r9
 8007e80:	4543      	cmp	r3, r8
 8007e82:	f77f af79 	ble.w	8007d78 <_printf_float+0x23c>
 8007e86:	2301      	movs	r3, #1
 8007e88:	465a      	mov	r2, fp
 8007e8a:	4631      	mov	r1, r6
 8007e8c:	4628      	mov	r0, r5
 8007e8e:	47b8      	blx	r7
 8007e90:	3001      	adds	r0, #1
 8007e92:	f43f aeae 	beq.w	8007bf2 <_printf_float+0xb6>
 8007e96:	f108 0801 	add.w	r8, r8, #1
 8007e9a:	e7ec      	b.n	8007e76 <_printf_float+0x33a>
 8007e9c:	4642      	mov	r2, r8
 8007e9e:	4631      	mov	r1, r6
 8007ea0:	4628      	mov	r0, r5
 8007ea2:	47b8      	blx	r7
 8007ea4:	3001      	adds	r0, #1
 8007ea6:	d1c2      	bne.n	8007e2e <_printf_float+0x2f2>
 8007ea8:	e6a3      	b.n	8007bf2 <_printf_float+0xb6>
 8007eaa:	2301      	movs	r3, #1
 8007eac:	4631      	mov	r1, r6
 8007eae:	4628      	mov	r0, r5
 8007eb0:	9206      	str	r2, [sp, #24]
 8007eb2:	47b8      	blx	r7
 8007eb4:	3001      	adds	r0, #1
 8007eb6:	f43f ae9c 	beq.w	8007bf2 <_printf_float+0xb6>
 8007eba:	9a06      	ldr	r2, [sp, #24]
 8007ebc:	f10b 0b01 	add.w	fp, fp, #1
 8007ec0:	e7bb      	b.n	8007e3a <_printf_float+0x2fe>
 8007ec2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007ec6:	4631      	mov	r1, r6
 8007ec8:	4628      	mov	r0, r5
 8007eca:	47b8      	blx	r7
 8007ecc:	3001      	adds	r0, #1
 8007ece:	d1c0      	bne.n	8007e52 <_printf_float+0x316>
 8007ed0:	e68f      	b.n	8007bf2 <_printf_float+0xb6>
 8007ed2:	9a06      	ldr	r2, [sp, #24]
 8007ed4:	464b      	mov	r3, r9
 8007ed6:	4442      	add	r2, r8
 8007ed8:	4631      	mov	r1, r6
 8007eda:	4628      	mov	r0, r5
 8007edc:	47b8      	blx	r7
 8007ede:	3001      	adds	r0, #1
 8007ee0:	d1c3      	bne.n	8007e6a <_printf_float+0x32e>
 8007ee2:	e686      	b.n	8007bf2 <_printf_float+0xb6>
 8007ee4:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007ee8:	f1ba 0f01 	cmp.w	sl, #1
 8007eec:	dc01      	bgt.n	8007ef2 <_printf_float+0x3b6>
 8007eee:	07db      	lsls	r3, r3, #31
 8007ef0:	d536      	bpl.n	8007f60 <_printf_float+0x424>
 8007ef2:	2301      	movs	r3, #1
 8007ef4:	4642      	mov	r2, r8
 8007ef6:	4631      	mov	r1, r6
 8007ef8:	4628      	mov	r0, r5
 8007efa:	47b8      	blx	r7
 8007efc:	3001      	adds	r0, #1
 8007efe:	f43f ae78 	beq.w	8007bf2 <_printf_float+0xb6>
 8007f02:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007f06:	4631      	mov	r1, r6
 8007f08:	4628      	mov	r0, r5
 8007f0a:	47b8      	blx	r7
 8007f0c:	3001      	adds	r0, #1
 8007f0e:	f43f ae70 	beq.w	8007bf2 <_printf_float+0xb6>
 8007f12:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007f16:	2200      	movs	r2, #0
 8007f18:	2300      	movs	r3, #0
 8007f1a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007f1e:	f7f8 fde3 	bl	8000ae8 <__aeabi_dcmpeq>
 8007f22:	b9c0      	cbnz	r0, 8007f56 <_printf_float+0x41a>
 8007f24:	4653      	mov	r3, sl
 8007f26:	f108 0201 	add.w	r2, r8, #1
 8007f2a:	4631      	mov	r1, r6
 8007f2c:	4628      	mov	r0, r5
 8007f2e:	47b8      	blx	r7
 8007f30:	3001      	adds	r0, #1
 8007f32:	d10c      	bne.n	8007f4e <_printf_float+0x412>
 8007f34:	e65d      	b.n	8007bf2 <_printf_float+0xb6>
 8007f36:	2301      	movs	r3, #1
 8007f38:	465a      	mov	r2, fp
 8007f3a:	4631      	mov	r1, r6
 8007f3c:	4628      	mov	r0, r5
 8007f3e:	47b8      	blx	r7
 8007f40:	3001      	adds	r0, #1
 8007f42:	f43f ae56 	beq.w	8007bf2 <_printf_float+0xb6>
 8007f46:	f108 0801 	add.w	r8, r8, #1
 8007f4a:	45d0      	cmp	r8, sl
 8007f4c:	dbf3      	blt.n	8007f36 <_printf_float+0x3fa>
 8007f4e:	464b      	mov	r3, r9
 8007f50:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8007f54:	e6df      	b.n	8007d16 <_printf_float+0x1da>
 8007f56:	f04f 0800 	mov.w	r8, #0
 8007f5a:	f104 0b1a 	add.w	fp, r4, #26
 8007f5e:	e7f4      	b.n	8007f4a <_printf_float+0x40e>
 8007f60:	2301      	movs	r3, #1
 8007f62:	4642      	mov	r2, r8
 8007f64:	e7e1      	b.n	8007f2a <_printf_float+0x3ee>
 8007f66:	2301      	movs	r3, #1
 8007f68:	464a      	mov	r2, r9
 8007f6a:	4631      	mov	r1, r6
 8007f6c:	4628      	mov	r0, r5
 8007f6e:	47b8      	blx	r7
 8007f70:	3001      	adds	r0, #1
 8007f72:	f43f ae3e 	beq.w	8007bf2 <_printf_float+0xb6>
 8007f76:	f108 0801 	add.w	r8, r8, #1
 8007f7a:	68e3      	ldr	r3, [r4, #12]
 8007f7c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007f7e:	1a5b      	subs	r3, r3, r1
 8007f80:	4543      	cmp	r3, r8
 8007f82:	dcf0      	bgt.n	8007f66 <_printf_float+0x42a>
 8007f84:	e6fc      	b.n	8007d80 <_printf_float+0x244>
 8007f86:	f04f 0800 	mov.w	r8, #0
 8007f8a:	f104 0919 	add.w	r9, r4, #25
 8007f8e:	e7f4      	b.n	8007f7a <_printf_float+0x43e>

08007f90 <_printf_common>:
 8007f90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f94:	4616      	mov	r6, r2
 8007f96:	4698      	mov	r8, r3
 8007f98:	688a      	ldr	r2, [r1, #8]
 8007f9a:	690b      	ldr	r3, [r1, #16]
 8007f9c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007fa0:	4293      	cmp	r3, r2
 8007fa2:	bfb8      	it	lt
 8007fa4:	4613      	movlt	r3, r2
 8007fa6:	6033      	str	r3, [r6, #0]
 8007fa8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007fac:	4607      	mov	r7, r0
 8007fae:	460c      	mov	r4, r1
 8007fb0:	b10a      	cbz	r2, 8007fb6 <_printf_common+0x26>
 8007fb2:	3301      	adds	r3, #1
 8007fb4:	6033      	str	r3, [r6, #0]
 8007fb6:	6823      	ldr	r3, [r4, #0]
 8007fb8:	0699      	lsls	r1, r3, #26
 8007fba:	bf42      	ittt	mi
 8007fbc:	6833      	ldrmi	r3, [r6, #0]
 8007fbe:	3302      	addmi	r3, #2
 8007fc0:	6033      	strmi	r3, [r6, #0]
 8007fc2:	6825      	ldr	r5, [r4, #0]
 8007fc4:	f015 0506 	ands.w	r5, r5, #6
 8007fc8:	d106      	bne.n	8007fd8 <_printf_common+0x48>
 8007fca:	f104 0a19 	add.w	sl, r4, #25
 8007fce:	68e3      	ldr	r3, [r4, #12]
 8007fd0:	6832      	ldr	r2, [r6, #0]
 8007fd2:	1a9b      	subs	r3, r3, r2
 8007fd4:	42ab      	cmp	r3, r5
 8007fd6:	dc26      	bgt.n	8008026 <_printf_common+0x96>
 8007fd8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007fdc:	6822      	ldr	r2, [r4, #0]
 8007fde:	3b00      	subs	r3, #0
 8007fe0:	bf18      	it	ne
 8007fe2:	2301      	movne	r3, #1
 8007fe4:	0692      	lsls	r2, r2, #26
 8007fe6:	d42b      	bmi.n	8008040 <_printf_common+0xb0>
 8007fe8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007fec:	4641      	mov	r1, r8
 8007fee:	4638      	mov	r0, r7
 8007ff0:	47c8      	blx	r9
 8007ff2:	3001      	adds	r0, #1
 8007ff4:	d01e      	beq.n	8008034 <_printf_common+0xa4>
 8007ff6:	6823      	ldr	r3, [r4, #0]
 8007ff8:	6922      	ldr	r2, [r4, #16]
 8007ffa:	f003 0306 	and.w	r3, r3, #6
 8007ffe:	2b04      	cmp	r3, #4
 8008000:	bf02      	ittt	eq
 8008002:	68e5      	ldreq	r5, [r4, #12]
 8008004:	6833      	ldreq	r3, [r6, #0]
 8008006:	1aed      	subeq	r5, r5, r3
 8008008:	68a3      	ldr	r3, [r4, #8]
 800800a:	bf0c      	ite	eq
 800800c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008010:	2500      	movne	r5, #0
 8008012:	4293      	cmp	r3, r2
 8008014:	bfc4      	itt	gt
 8008016:	1a9b      	subgt	r3, r3, r2
 8008018:	18ed      	addgt	r5, r5, r3
 800801a:	2600      	movs	r6, #0
 800801c:	341a      	adds	r4, #26
 800801e:	42b5      	cmp	r5, r6
 8008020:	d11a      	bne.n	8008058 <_printf_common+0xc8>
 8008022:	2000      	movs	r0, #0
 8008024:	e008      	b.n	8008038 <_printf_common+0xa8>
 8008026:	2301      	movs	r3, #1
 8008028:	4652      	mov	r2, sl
 800802a:	4641      	mov	r1, r8
 800802c:	4638      	mov	r0, r7
 800802e:	47c8      	blx	r9
 8008030:	3001      	adds	r0, #1
 8008032:	d103      	bne.n	800803c <_printf_common+0xac>
 8008034:	f04f 30ff 	mov.w	r0, #4294967295
 8008038:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800803c:	3501      	adds	r5, #1
 800803e:	e7c6      	b.n	8007fce <_printf_common+0x3e>
 8008040:	18e1      	adds	r1, r4, r3
 8008042:	1c5a      	adds	r2, r3, #1
 8008044:	2030      	movs	r0, #48	@ 0x30
 8008046:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800804a:	4422      	add	r2, r4
 800804c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008050:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008054:	3302      	adds	r3, #2
 8008056:	e7c7      	b.n	8007fe8 <_printf_common+0x58>
 8008058:	2301      	movs	r3, #1
 800805a:	4622      	mov	r2, r4
 800805c:	4641      	mov	r1, r8
 800805e:	4638      	mov	r0, r7
 8008060:	47c8      	blx	r9
 8008062:	3001      	adds	r0, #1
 8008064:	d0e6      	beq.n	8008034 <_printf_common+0xa4>
 8008066:	3601      	adds	r6, #1
 8008068:	e7d9      	b.n	800801e <_printf_common+0x8e>
	...

0800806c <_printf_i>:
 800806c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008070:	7e0f      	ldrb	r7, [r1, #24]
 8008072:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008074:	2f78      	cmp	r7, #120	@ 0x78
 8008076:	4691      	mov	r9, r2
 8008078:	4680      	mov	r8, r0
 800807a:	460c      	mov	r4, r1
 800807c:	469a      	mov	sl, r3
 800807e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008082:	d807      	bhi.n	8008094 <_printf_i+0x28>
 8008084:	2f62      	cmp	r7, #98	@ 0x62
 8008086:	d80a      	bhi.n	800809e <_printf_i+0x32>
 8008088:	2f00      	cmp	r7, #0
 800808a:	f000 80d2 	beq.w	8008232 <_printf_i+0x1c6>
 800808e:	2f58      	cmp	r7, #88	@ 0x58
 8008090:	f000 80b9 	beq.w	8008206 <_printf_i+0x19a>
 8008094:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008098:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800809c:	e03a      	b.n	8008114 <_printf_i+0xa8>
 800809e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80080a2:	2b15      	cmp	r3, #21
 80080a4:	d8f6      	bhi.n	8008094 <_printf_i+0x28>
 80080a6:	a101      	add	r1, pc, #4	@ (adr r1, 80080ac <_printf_i+0x40>)
 80080a8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80080ac:	08008105 	.word	0x08008105
 80080b0:	08008119 	.word	0x08008119
 80080b4:	08008095 	.word	0x08008095
 80080b8:	08008095 	.word	0x08008095
 80080bc:	08008095 	.word	0x08008095
 80080c0:	08008095 	.word	0x08008095
 80080c4:	08008119 	.word	0x08008119
 80080c8:	08008095 	.word	0x08008095
 80080cc:	08008095 	.word	0x08008095
 80080d0:	08008095 	.word	0x08008095
 80080d4:	08008095 	.word	0x08008095
 80080d8:	08008219 	.word	0x08008219
 80080dc:	08008143 	.word	0x08008143
 80080e0:	080081d3 	.word	0x080081d3
 80080e4:	08008095 	.word	0x08008095
 80080e8:	08008095 	.word	0x08008095
 80080ec:	0800823b 	.word	0x0800823b
 80080f0:	08008095 	.word	0x08008095
 80080f4:	08008143 	.word	0x08008143
 80080f8:	08008095 	.word	0x08008095
 80080fc:	08008095 	.word	0x08008095
 8008100:	080081db 	.word	0x080081db
 8008104:	6833      	ldr	r3, [r6, #0]
 8008106:	1d1a      	adds	r2, r3, #4
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	6032      	str	r2, [r6, #0]
 800810c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008110:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008114:	2301      	movs	r3, #1
 8008116:	e09d      	b.n	8008254 <_printf_i+0x1e8>
 8008118:	6833      	ldr	r3, [r6, #0]
 800811a:	6820      	ldr	r0, [r4, #0]
 800811c:	1d19      	adds	r1, r3, #4
 800811e:	6031      	str	r1, [r6, #0]
 8008120:	0606      	lsls	r6, r0, #24
 8008122:	d501      	bpl.n	8008128 <_printf_i+0xbc>
 8008124:	681d      	ldr	r5, [r3, #0]
 8008126:	e003      	b.n	8008130 <_printf_i+0xc4>
 8008128:	0645      	lsls	r5, r0, #25
 800812a:	d5fb      	bpl.n	8008124 <_printf_i+0xb8>
 800812c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008130:	2d00      	cmp	r5, #0
 8008132:	da03      	bge.n	800813c <_printf_i+0xd0>
 8008134:	232d      	movs	r3, #45	@ 0x2d
 8008136:	426d      	negs	r5, r5
 8008138:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800813c:	4859      	ldr	r0, [pc, #356]	@ (80082a4 <_printf_i+0x238>)
 800813e:	230a      	movs	r3, #10
 8008140:	e011      	b.n	8008166 <_printf_i+0xfa>
 8008142:	6821      	ldr	r1, [r4, #0]
 8008144:	6833      	ldr	r3, [r6, #0]
 8008146:	0608      	lsls	r0, r1, #24
 8008148:	f853 5b04 	ldr.w	r5, [r3], #4
 800814c:	d402      	bmi.n	8008154 <_printf_i+0xe8>
 800814e:	0649      	lsls	r1, r1, #25
 8008150:	bf48      	it	mi
 8008152:	b2ad      	uxthmi	r5, r5
 8008154:	2f6f      	cmp	r7, #111	@ 0x6f
 8008156:	4853      	ldr	r0, [pc, #332]	@ (80082a4 <_printf_i+0x238>)
 8008158:	6033      	str	r3, [r6, #0]
 800815a:	bf14      	ite	ne
 800815c:	230a      	movne	r3, #10
 800815e:	2308      	moveq	r3, #8
 8008160:	2100      	movs	r1, #0
 8008162:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008166:	6866      	ldr	r6, [r4, #4]
 8008168:	60a6      	str	r6, [r4, #8]
 800816a:	2e00      	cmp	r6, #0
 800816c:	bfa2      	ittt	ge
 800816e:	6821      	ldrge	r1, [r4, #0]
 8008170:	f021 0104 	bicge.w	r1, r1, #4
 8008174:	6021      	strge	r1, [r4, #0]
 8008176:	b90d      	cbnz	r5, 800817c <_printf_i+0x110>
 8008178:	2e00      	cmp	r6, #0
 800817a:	d04b      	beq.n	8008214 <_printf_i+0x1a8>
 800817c:	4616      	mov	r6, r2
 800817e:	fbb5 f1f3 	udiv	r1, r5, r3
 8008182:	fb03 5711 	mls	r7, r3, r1, r5
 8008186:	5dc7      	ldrb	r7, [r0, r7]
 8008188:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800818c:	462f      	mov	r7, r5
 800818e:	42bb      	cmp	r3, r7
 8008190:	460d      	mov	r5, r1
 8008192:	d9f4      	bls.n	800817e <_printf_i+0x112>
 8008194:	2b08      	cmp	r3, #8
 8008196:	d10b      	bne.n	80081b0 <_printf_i+0x144>
 8008198:	6823      	ldr	r3, [r4, #0]
 800819a:	07df      	lsls	r7, r3, #31
 800819c:	d508      	bpl.n	80081b0 <_printf_i+0x144>
 800819e:	6923      	ldr	r3, [r4, #16]
 80081a0:	6861      	ldr	r1, [r4, #4]
 80081a2:	4299      	cmp	r1, r3
 80081a4:	bfde      	ittt	le
 80081a6:	2330      	movle	r3, #48	@ 0x30
 80081a8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80081ac:	f106 36ff 	addle.w	r6, r6, #4294967295
 80081b0:	1b92      	subs	r2, r2, r6
 80081b2:	6122      	str	r2, [r4, #16]
 80081b4:	f8cd a000 	str.w	sl, [sp]
 80081b8:	464b      	mov	r3, r9
 80081ba:	aa03      	add	r2, sp, #12
 80081bc:	4621      	mov	r1, r4
 80081be:	4640      	mov	r0, r8
 80081c0:	f7ff fee6 	bl	8007f90 <_printf_common>
 80081c4:	3001      	adds	r0, #1
 80081c6:	d14a      	bne.n	800825e <_printf_i+0x1f2>
 80081c8:	f04f 30ff 	mov.w	r0, #4294967295
 80081cc:	b004      	add	sp, #16
 80081ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80081d2:	6823      	ldr	r3, [r4, #0]
 80081d4:	f043 0320 	orr.w	r3, r3, #32
 80081d8:	6023      	str	r3, [r4, #0]
 80081da:	4833      	ldr	r0, [pc, #204]	@ (80082a8 <_printf_i+0x23c>)
 80081dc:	2778      	movs	r7, #120	@ 0x78
 80081de:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80081e2:	6823      	ldr	r3, [r4, #0]
 80081e4:	6831      	ldr	r1, [r6, #0]
 80081e6:	061f      	lsls	r7, r3, #24
 80081e8:	f851 5b04 	ldr.w	r5, [r1], #4
 80081ec:	d402      	bmi.n	80081f4 <_printf_i+0x188>
 80081ee:	065f      	lsls	r7, r3, #25
 80081f0:	bf48      	it	mi
 80081f2:	b2ad      	uxthmi	r5, r5
 80081f4:	6031      	str	r1, [r6, #0]
 80081f6:	07d9      	lsls	r1, r3, #31
 80081f8:	bf44      	itt	mi
 80081fa:	f043 0320 	orrmi.w	r3, r3, #32
 80081fe:	6023      	strmi	r3, [r4, #0]
 8008200:	b11d      	cbz	r5, 800820a <_printf_i+0x19e>
 8008202:	2310      	movs	r3, #16
 8008204:	e7ac      	b.n	8008160 <_printf_i+0xf4>
 8008206:	4827      	ldr	r0, [pc, #156]	@ (80082a4 <_printf_i+0x238>)
 8008208:	e7e9      	b.n	80081de <_printf_i+0x172>
 800820a:	6823      	ldr	r3, [r4, #0]
 800820c:	f023 0320 	bic.w	r3, r3, #32
 8008210:	6023      	str	r3, [r4, #0]
 8008212:	e7f6      	b.n	8008202 <_printf_i+0x196>
 8008214:	4616      	mov	r6, r2
 8008216:	e7bd      	b.n	8008194 <_printf_i+0x128>
 8008218:	6833      	ldr	r3, [r6, #0]
 800821a:	6825      	ldr	r5, [r4, #0]
 800821c:	6961      	ldr	r1, [r4, #20]
 800821e:	1d18      	adds	r0, r3, #4
 8008220:	6030      	str	r0, [r6, #0]
 8008222:	062e      	lsls	r6, r5, #24
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	d501      	bpl.n	800822c <_printf_i+0x1c0>
 8008228:	6019      	str	r1, [r3, #0]
 800822a:	e002      	b.n	8008232 <_printf_i+0x1c6>
 800822c:	0668      	lsls	r0, r5, #25
 800822e:	d5fb      	bpl.n	8008228 <_printf_i+0x1bc>
 8008230:	8019      	strh	r1, [r3, #0]
 8008232:	2300      	movs	r3, #0
 8008234:	6123      	str	r3, [r4, #16]
 8008236:	4616      	mov	r6, r2
 8008238:	e7bc      	b.n	80081b4 <_printf_i+0x148>
 800823a:	6833      	ldr	r3, [r6, #0]
 800823c:	1d1a      	adds	r2, r3, #4
 800823e:	6032      	str	r2, [r6, #0]
 8008240:	681e      	ldr	r6, [r3, #0]
 8008242:	6862      	ldr	r2, [r4, #4]
 8008244:	2100      	movs	r1, #0
 8008246:	4630      	mov	r0, r6
 8008248:	f7f7 ffd2 	bl	80001f0 <memchr>
 800824c:	b108      	cbz	r0, 8008252 <_printf_i+0x1e6>
 800824e:	1b80      	subs	r0, r0, r6
 8008250:	6060      	str	r0, [r4, #4]
 8008252:	6863      	ldr	r3, [r4, #4]
 8008254:	6123      	str	r3, [r4, #16]
 8008256:	2300      	movs	r3, #0
 8008258:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800825c:	e7aa      	b.n	80081b4 <_printf_i+0x148>
 800825e:	6923      	ldr	r3, [r4, #16]
 8008260:	4632      	mov	r2, r6
 8008262:	4649      	mov	r1, r9
 8008264:	4640      	mov	r0, r8
 8008266:	47d0      	blx	sl
 8008268:	3001      	adds	r0, #1
 800826a:	d0ad      	beq.n	80081c8 <_printf_i+0x15c>
 800826c:	6823      	ldr	r3, [r4, #0]
 800826e:	079b      	lsls	r3, r3, #30
 8008270:	d413      	bmi.n	800829a <_printf_i+0x22e>
 8008272:	68e0      	ldr	r0, [r4, #12]
 8008274:	9b03      	ldr	r3, [sp, #12]
 8008276:	4298      	cmp	r0, r3
 8008278:	bfb8      	it	lt
 800827a:	4618      	movlt	r0, r3
 800827c:	e7a6      	b.n	80081cc <_printf_i+0x160>
 800827e:	2301      	movs	r3, #1
 8008280:	4632      	mov	r2, r6
 8008282:	4649      	mov	r1, r9
 8008284:	4640      	mov	r0, r8
 8008286:	47d0      	blx	sl
 8008288:	3001      	adds	r0, #1
 800828a:	d09d      	beq.n	80081c8 <_printf_i+0x15c>
 800828c:	3501      	adds	r5, #1
 800828e:	68e3      	ldr	r3, [r4, #12]
 8008290:	9903      	ldr	r1, [sp, #12]
 8008292:	1a5b      	subs	r3, r3, r1
 8008294:	42ab      	cmp	r3, r5
 8008296:	dcf2      	bgt.n	800827e <_printf_i+0x212>
 8008298:	e7eb      	b.n	8008272 <_printf_i+0x206>
 800829a:	2500      	movs	r5, #0
 800829c:	f104 0619 	add.w	r6, r4, #25
 80082a0:	e7f5      	b.n	800828e <_printf_i+0x222>
 80082a2:	bf00      	nop
 80082a4:	0800cfe1 	.word	0x0800cfe1
 80082a8:	0800cff2 	.word	0x0800cff2

080082ac <_scanf_float>:
 80082ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082b0:	b087      	sub	sp, #28
 80082b2:	4617      	mov	r7, r2
 80082b4:	9303      	str	r3, [sp, #12]
 80082b6:	688b      	ldr	r3, [r1, #8]
 80082b8:	1e5a      	subs	r2, r3, #1
 80082ba:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80082be:	bf81      	itttt	hi
 80082c0:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80082c4:	eb03 0b05 	addhi.w	fp, r3, r5
 80082c8:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80082cc:	608b      	strhi	r3, [r1, #8]
 80082ce:	680b      	ldr	r3, [r1, #0]
 80082d0:	460a      	mov	r2, r1
 80082d2:	f04f 0500 	mov.w	r5, #0
 80082d6:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 80082da:	f842 3b1c 	str.w	r3, [r2], #28
 80082de:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80082e2:	4680      	mov	r8, r0
 80082e4:	460c      	mov	r4, r1
 80082e6:	bf98      	it	ls
 80082e8:	f04f 0b00 	movls.w	fp, #0
 80082ec:	9201      	str	r2, [sp, #4]
 80082ee:	4616      	mov	r6, r2
 80082f0:	46aa      	mov	sl, r5
 80082f2:	46a9      	mov	r9, r5
 80082f4:	9502      	str	r5, [sp, #8]
 80082f6:	68a2      	ldr	r2, [r4, #8]
 80082f8:	b152      	cbz	r2, 8008310 <_scanf_float+0x64>
 80082fa:	683b      	ldr	r3, [r7, #0]
 80082fc:	781b      	ldrb	r3, [r3, #0]
 80082fe:	2b4e      	cmp	r3, #78	@ 0x4e
 8008300:	d864      	bhi.n	80083cc <_scanf_float+0x120>
 8008302:	2b40      	cmp	r3, #64	@ 0x40
 8008304:	d83c      	bhi.n	8008380 <_scanf_float+0xd4>
 8008306:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800830a:	b2c8      	uxtb	r0, r1
 800830c:	280e      	cmp	r0, #14
 800830e:	d93a      	bls.n	8008386 <_scanf_float+0xda>
 8008310:	f1b9 0f00 	cmp.w	r9, #0
 8008314:	d003      	beq.n	800831e <_scanf_float+0x72>
 8008316:	6823      	ldr	r3, [r4, #0]
 8008318:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800831c:	6023      	str	r3, [r4, #0]
 800831e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008322:	f1ba 0f01 	cmp.w	sl, #1
 8008326:	f200 8117 	bhi.w	8008558 <_scanf_float+0x2ac>
 800832a:	9b01      	ldr	r3, [sp, #4]
 800832c:	429e      	cmp	r6, r3
 800832e:	f200 8108 	bhi.w	8008542 <_scanf_float+0x296>
 8008332:	2001      	movs	r0, #1
 8008334:	b007      	add	sp, #28
 8008336:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800833a:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800833e:	2a0d      	cmp	r2, #13
 8008340:	d8e6      	bhi.n	8008310 <_scanf_float+0x64>
 8008342:	a101      	add	r1, pc, #4	@ (adr r1, 8008348 <_scanf_float+0x9c>)
 8008344:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008348:	0800848f 	.word	0x0800848f
 800834c:	08008311 	.word	0x08008311
 8008350:	08008311 	.word	0x08008311
 8008354:	08008311 	.word	0x08008311
 8008358:	080084ef 	.word	0x080084ef
 800835c:	080084c7 	.word	0x080084c7
 8008360:	08008311 	.word	0x08008311
 8008364:	08008311 	.word	0x08008311
 8008368:	0800849d 	.word	0x0800849d
 800836c:	08008311 	.word	0x08008311
 8008370:	08008311 	.word	0x08008311
 8008374:	08008311 	.word	0x08008311
 8008378:	08008311 	.word	0x08008311
 800837c:	08008455 	.word	0x08008455
 8008380:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8008384:	e7db      	b.n	800833e <_scanf_float+0x92>
 8008386:	290e      	cmp	r1, #14
 8008388:	d8c2      	bhi.n	8008310 <_scanf_float+0x64>
 800838a:	a001      	add	r0, pc, #4	@ (adr r0, 8008390 <_scanf_float+0xe4>)
 800838c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8008390:	08008445 	.word	0x08008445
 8008394:	08008311 	.word	0x08008311
 8008398:	08008445 	.word	0x08008445
 800839c:	080084db 	.word	0x080084db
 80083a0:	08008311 	.word	0x08008311
 80083a4:	080083ed 	.word	0x080083ed
 80083a8:	0800842b 	.word	0x0800842b
 80083ac:	0800842b 	.word	0x0800842b
 80083b0:	0800842b 	.word	0x0800842b
 80083b4:	0800842b 	.word	0x0800842b
 80083b8:	0800842b 	.word	0x0800842b
 80083bc:	0800842b 	.word	0x0800842b
 80083c0:	0800842b 	.word	0x0800842b
 80083c4:	0800842b 	.word	0x0800842b
 80083c8:	0800842b 	.word	0x0800842b
 80083cc:	2b6e      	cmp	r3, #110	@ 0x6e
 80083ce:	d809      	bhi.n	80083e4 <_scanf_float+0x138>
 80083d0:	2b60      	cmp	r3, #96	@ 0x60
 80083d2:	d8b2      	bhi.n	800833a <_scanf_float+0x8e>
 80083d4:	2b54      	cmp	r3, #84	@ 0x54
 80083d6:	d07b      	beq.n	80084d0 <_scanf_float+0x224>
 80083d8:	2b59      	cmp	r3, #89	@ 0x59
 80083da:	d199      	bne.n	8008310 <_scanf_float+0x64>
 80083dc:	2d07      	cmp	r5, #7
 80083de:	d197      	bne.n	8008310 <_scanf_float+0x64>
 80083e0:	2508      	movs	r5, #8
 80083e2:	e02c      	b.n	800843e <_scanf_float+0x192>
 80083e4:	2b74      	cmp	r3, #116	@ 0x74
 80083e6:	d073      	beq.n	80084d0 <_scanf_float+0x224>
 80083e8:	2b79      	cmp	r3, #121	@ 0x79
 80083ea:	e7f6      	b.n	80083da <_scanf_float+0x12e>
 80083ec:	6821      	ldr	r1, [r4, #0]
 80083ee:	05c8      	lsls	r0, r1, #23
 80083f0:	d51b      	bpl.n	800842a <_scanf_float+0x17e>
 80083f2:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 80083f6:	6021      	str	r1, [r4, #0]
 80083f8:	f109 0901 	add.w	r9, r9, #1
 80083fc:	f1bb 0f00 	cmp.w	fp, #0
 8008400:	d003      	beq.n	800840a <_scanf_float+0x15e>
 8008402:	3201      	adds	r2, #1
 8008404:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008408:	60a2      	str	r2, [r4, #8]
 800840a:	68a3      	ldr	r3, [r4, #8]
 800840c:	3b01      	subs	r3, #1
 800840e:	60a3      	str	r3, [r4, #8]
 8008410:	6923      	ldr	r3, [r4, #16]
 8008412:	3301      	adds	r3, #1
 8008414:	6123      	str	r3, [r4, #16]
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	3b01      	subs	r3, #1
 800841a:	2b00      	cmp	r3, #0
 800841c:	607b      	str	r3, [r7, #4]
 800841e:	f340 8087 	ble.w	8008530 <_scanf_float+0x284>
 8008422:	683b      	ldr	r3, [r7, #0]
 8008424:	3301      	adds	r3, #1
 8008426:	603b      	str	r3, [r7, #0]
 8008428:	e765      	b.n	80082f6 <_scanf_float+0x4a>
 800842a:	eb1a 0105 	adds.w	r1, sl, r5
 800842e:	f47f af6f 	bne.w	8008310 <_scanf_float+0x64>
 8008432:	6822      	ldr	r2, [r4, #0]
 8008434:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8008438:	6022      	str	r2, [r4, #0]
 800843a:	460d      	mov	r5, r1
 800843c:	468a      	mov	sl, r1
 800843e:	f806 3b01 	strb.w	r3, [r6], #1
 8008442:	e7e2      	b.n	800840a <_scanf_float+0x15e>
 8008444:	6822      	ldr	r2, [r4, #0]
 8008446:	0610      	lsls	r0, r2, #24
 8008448:	f57f af62 	bpl.w	8008310 <_scanf_float+0x64>
 800844c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008450:	6022      	str	r2, [r4, #0]
 8008452:	e7f4      	b.n	800843e <_scanf_float+0x192>
 8008454:	f1ba 0f00 	cmp.w	sl, #0
 8008458:	d10e      	bne.n	8008478 <_scanf_float+0x1cc>
 800845a:	f1b9 0f00 	cmp.w	r9, #0
 800845e:	d10e      	bne.n	800847e <_scanf_float+0x1d2>
 8008460:	6822      	ldr	r2, [r4, #0]
 8008462:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8008466:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800846a:	d108      	bne.n	800847e <_scanf_float+0x1d2>
 800846c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8008470:	6022      	str	r2, [r4, #0]
 8008472:	f04f 0a01 	mov.w	sl, #1
 8008476:	e7e2      	b.n	800843e <_scanf_float+0x192>
 8008478:	f1ba 0f02 	cmp.w	sl, #2
 800847c:	d055      	beq.n	800852a <_scanf_float+0x27e>
 800847e:	2d01      	cmp	r5, #1
 8008480:	d002      	beq.n	8008488 <_scanf_float+0x1dc>
 8008482:	2d04      	cmp	r5, #4
 8008484:	f47f af44 	bne.w	8008310 <_scanf_float+0x64>
 8008488:	3501      	adds	r5, #1
 800848a:	b2ed      	uxtb	r5, r5
 800848c:	e7d7      	b.n	800843e <_scanf_float+0x192>
 800848e:	f1ba 0f01 	cmp.w	sl, #1
 8008492:	f47f af3d 	bne.w	8008310 <_scanf_float+0x64>
 8008496:	f04f 0a02 	mov.w	sl, #2
 800849a:	e7d0      	b.n	800843e <_scanf_float+0x192>
 800849c:	b97d      	cbnz	r5, 80084be <_scanf_float+0x212>
 800849e:	f1b9 0f00 	cmp.w	r9, #0
 80084a2:	f47f af38 	bne.w	8008316 <_scanf_float+0x6a>
 80084a6:	6822      	ldr	r2, [r4, #0]
 80084a8:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80084ac:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80084b0:	f040 8108 	bne.w	80086c4 <_scanf_float+0x418>
 80084b4:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80084b8:	6022      	str	r2, [r4, #0]
 80084ba:	2501      	movs	r5, #1
 80084bc:	e7bf      	b.n	800843e <_scanf_float+0x192>
 80084be:	2d03      	cmp	r5, #3
 80084c0:	d0e2      	beq.n	8008488 <_scanf_float+0x1dc>
 80084c2:	2d05      	cmp	r5, #5
 80084c4:	e7de      	b.n	8008484 <_scanf_float+0x1d8>
 80084c6:	2d02      	cmp	r5, #2
 80084c8:	f47f af22 	bne.w	8008310 <_scanf_float+0x64>
 80084cc:	2503      	movs	r5, #3
 80084ce:	e7b6      	b.n	800843e <_scanf_float+0x192>
 80084d0:	2d06      	cmp	r5, #6
 80084d2:	f47f af1d 	bne.w	8008310 <_scanf_float+0x64>
 80084d6:	2507      	movs	r5, #7
 80084d8:	e7b1      	b.n	800843e <_scanf_float+0x192>
 80084da:	6822      	ldr	r2, [r4, #0]
 80084dc:	0591      	lsls	r1, r2, #22
 80084de:	f57f af17 	bpl.w	8008310 <_scanf_float+0x64>
 80084e2:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 80084e6:	6022      	str	r2, [r4, #0]
 80084e8:	f8cd 9008 	str.w	r9, [sp, #8]
 80084ec:	e7a7      	b.n	800843e <_scanf_float+0x192>
 80084ee:	6822      	ldr	r2, [r4, #0]
 80084f0:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 80084f4:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 80084f8:	d006      	beq.n	8008508 <_scanf_float+0x25c>
 80084fa:	0550      	lsls	r0, r2, #21
 80084fc:	f57f af08 	bpl.w	8008310 <_scanf_float+0x64>
 8008500:	f1b9 0f00 	cmp.w	r9, #0
 8008504:	f000 80de 	beq.w	80086c4 <_scanf_float+0x418>
 8008508:	0591      	lsls	r1, r2, #22
 800850a:	bf58      	it	pl
 800850c:	9902      	ldrpl	r1, [sp, #8]
 800850e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8008512:	bf58      	it	pl
 8008514:	eba9 0101 	subpl.w	r1, r9, r1
 8008518:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800851c:	bf58      	it	pl
 800851e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8008522:	6022      	str	r2, [r4, #0]
 8008524:	f04f 0900 	mov.w	r9, #0
 8008528:	e789      	b.n	800843e <_scanf_float+0x192>
 800852a:	f04f 0a03 	mov.w	sl, #3
 800852e:	e786      	b.n	800843e <_scanf_float+0x192>
 8008530:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8008534:	4639      	mov	r1, r7
 8008536:	4640      	mov	r0, r8
 8008538:	4798      	blx	r3
 800853a:	2800      	cmp	r0, #0
 800853c:	f43f aedb 	beq.w	80082f6 <_scanf_float+0x4a>
 8008540:	e6e6      	b.n	8008310 <_scanf_float+0x64>
 8008542:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008546:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800854a:	463a      	mov	r2, r7
 800854c:	4640      	mov	r0, r8
 800854e:	4798      	blx	r3
 8008550:	6923      	ldr	r3, [r4, #16]
 8008552:	3b01      	subs	r3, #1
 8008554:	6123      	str	r3, [r4, #16]
 8008556:	e6e8      	b.n	800832a <_scanf_float+0x7e>
 8008558:	1e6b      	subs	r3, r5, #1
 800855a:	2b06      	cmp	r3, #6
 800855c:	d824      	bhi.n	80085a8 <_scanf_float+0x2fc>
 800855e:	2d02      	cmp	r5, #2
 8008560:	d836      	bhi.n	80085d0 <_scanf_float+0x324>
 8008562:	9b01      	ldr	r3, [sp, #4]
 8008564:	429e      	cmp	r6, r3
 8008566:	f67f aee4 	bls.w	8008332 <_scanf_float+0x86>
 800856a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800856e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008572:	463a      	mov	r2, r7
 8008574:	4640      	mov	r0, r8
 8008576:	4798      	blx	r3
 8008578:	6923      	ldr	r3, [r4, #16]
 800857a:	3b01      	subs	r3, #1
 800857c:	6123      	str	r3, [r4, #16]
 800857e:	e7f0      	b.n	8008562 <_scanf_float+0x2b6>
 8008580:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008584:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8008588:	463a      	mov	r2, r7
 800858a:	4640      	mov	r0, r8
 800858c:	4798      	blx	r3
 800858e:	6923      	ldr	r3, [r4, #16]
 8008590:	3b01      	subs	r3, #1
 8008592:	6123      	str	r3, [r4, #16]
 8008594:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008598:	fa5f fa8a 	uxtb.w	sl, sl
 800859c:	f1ba 0f02 	cmp.w	sl, #2
 80085a0:	d1ee      	bne.n	8008580 <_scanf_float+0x2d4>
 80085a2:	3d03      	subs	r5, #3
 80085a4:	b2ed      	uxtb	r5, r5
 80085a6:	1b76      	subs	r6, r6, r5
 80085a8:	6823      	ldr	r3, [r4, #0]
 80085aa:	05da      	lsls	r2, r3, #23
 80085ac:	d530      	bpl.n	8008610 <_scanf_float+0x364>
 80085ae:	055b      	lsls	r3, r3, #21
 80085b0:	d511      	bpl.n	80085d6 <_scanf_float+0x32a>
 80085b2:	9b01      	ldr	r3, [sp, #4]
 80085b4:	429e      	cmp	r6, r3
 80085b6:	f67f aebc 	bls.w	8008332 <_scanf_float+0x86>
 80085ba:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80085be:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80085c2:	463a      	mov	r2, r7
 80085c4:	4640      	mov	r0, r8
 80085c6:	4798      	blx	r3
 80085c8:	6923      	ldr	r3, [r4, #16]
 80085ca:	3b01      	subs	r3, #1
 80085cc:	6123      	str	r3, [r4, #16]
 80085ce:	e7f0      	b.n	80085b2 <_scanf_float+0x306>
 80085d0:	46aa      	mov	sl, r5
 80085d2:	46b3      	mov	fp, r6
 80085d4:	e7de      	b.n	8008594 <_scanf_float+0x2e8>
 80085d6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80085da:	6923      	ldr	r3, [r4, #16]
 80085dc:	2965      	cmp	r1, #101	@ 0x65
 80085de:	f103 33ff 	add.w	r3, r3, #4294967295
 80085e2:	f106 35ff 	add.w	r5, r6, #4294967295
 80085e6:	6123      	str	r3, [r4, #16]
 80085e8:	d00c      	beq.n	8008604 <_scanf_float+0x358>
 80085ea:	2945      	cmp	r1, #69	@ 0x45
 80085ec:	d00a      	beq.n	8008604 <_scanf_float+0x358>
 80085ee:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80085f2:	463a      	mov	r2, r7
 80085f4:	4640      	mov	r0, r8
 80085f6:	4798      	blx	r3
 80085f8:	6923      	ldr	r3, [r4, #16]
 80085fa:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80085fe:	3b01      	subs	r3, #1
 8008600:	1eb5      	subs	r5, r6, #2
 8008602:	6123      	str	r3, [r4, #16]
 8008604:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008608:	463a      	mov	r2, r7
 800860a:	4640      	mov	r0, r8
 800860c:	4798      	blx	r3
 800860e:	462e      	mov	r6, r5
 8008610:	6822      	ldr	r2, [r4, #0]
 8008612:	f012 0210 	ands.w	r2, r2, #16
 8008616:	d001      	beq.n	800861c <_scanf_float+0x370>
 8008618:	2000      	movs	r0, #0
 800861a:	e68b      	b.n	8008334 <_scanf_float+0x88>
 800861c:	7032      	strb	r2, [r6, #0]
 800861e:	6823      	ldr	r3, [r4, #0]
 8008620:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8008624:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008628:	d11c      	bne.n	8008664 <_scanf_float+0x3b8>
 800862a:	9b02      	ldr	r3, [sp, #8]
 800862c:	454b      	cmp	r3, r9
 800862e:	eba3 0209 	sub.w	r2, r3, r9
 8008632:	d123      	bne.n	800867c <_scanf_float+0x3d0>
 8008634:	9901      	ldr	r1, [sp, #4]
 8008636:	2200      	movs	r2, #0
 8008638:	4640      	mov	r0, r8
 800863a:	f7ff f95d 	bl	80078f8 <_strtod_r>
 800863e:	9b03      	ldr	r3, [sp, #12]
 8008640:	6821      	ldr	r1, [r4, #0]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	f011 0f02 	tst.w	r1, #2
 8008648:	ec57 6b10 	vmov	r6, r7, d0
 800864c:	f103 0204 	add.w	r2, r3, #4
 8008650:	d01f      	beq.n	8008692 <_scanf_float+0x3e6>
 8008652:	9903      	ldr	r1, [sp, #12]
 8008654:	600a      	str	r2, [r1, #0]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	e9c3 6700 	strd	r6, r7, [r3]
 800865c:	68e3      	ldr	r3, [r4, #12]
 800865e:	3301      	adds	r3, #1
 8008660:	60e3      	str	r3, [r4, #12]
 8008662:	e7d9      	b.n	8008618 <_scanf_float+0x36c>
 8008664:	9b04      	ldr	r3, [sp, #16]
 8008666:	2b00      	cmp	r3, #0
 8008668:	d0e4      	beq.n	8008634 <_scanf_float+0x388>
 800866a:	9905      	ldr	r1, [sp, #20]
 800866c:	230a      	movs	r3, #10
 800866e:	3101      	adds	r1, #1
 8008670:	4640      	mov	r0, r8
 8008672:	f7ff f9c1 	bl	80079f8 <_strtol_r>
 8008676:	9b04      	ldr	r3, [sp, #16]
 8008678:	9e05      	ldr	r6, [sp, #20]
 800867a:	1ac2      	subs	r2, r0, r3
 800867c:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8008680:	429e      	cmp	r6, r3
 8008682:	bf28      	it	cs
 8008684:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8008688:	4910      	ldr	r1, [pc, #64]	@ (80086cc <_scanf_float+0x420>)
 800868a:	4630      	mov	r0, r6
 800868c:	f000 f918 	bl	80088c0 <siprintf>
 8008690:	e7d0      	b.n	8008634 <_scanf_float+0x388>
 8008692:	f011 0f04 	tst.w	r1, #4
 8008696:	9903      	ldr	r1, [sp, #12]
 8008698:	600a      	str	r2, [r1, #0]
 800869a:	d1dc      	bne.n	8008656 <_scanf_float+0x3aa>
 800869c:	681d      	ldr	r5, [r3, #0]
 800869e:	4632      	mov	r2, r6
 80086a0:	463b      	mov	r3, r7
 80086a2:	4630      	mov	r0, r6
 80086a4:	4639      	mov	r1, r7
 80086a6:	f7f8 fa51 	bl	8000b4c <__aeabi_dcmpun>
 80086aa:	b128      	cbz	r0, 80086b8 <_scanf_float+0x40c>
 80086ac:	4808      	ldr	r0, [pc, #32]	@ (80086d0 <_scanf_float+0x424>)
 80086ae:	f001 f817 	bl	80096e0 <nanf>
 80086b2:	ed85 0a00 	vstr	s0, [r5]
 80086b6:	e7d1      	b.n	800865c <_scanf_float+0x3b0>
 80086b8:	4630      	mov	r0, r6
 80086ba:	4639      	mov	r1, r7
 80086bc:	f7f8 faa4 	bl	8000c08 <__aeabi_d2f>
 80086c0:	6028      	str	r0, [r5, #0]
 80086c2:	e7cb      	b.n	800865c <_scanf_float+0x3b0>
 80086c4:	f04f 0900 	mov.w	r9, #0
 80086c8:	e629      	b.n	800831e <_scanf_float+0x72>
 80086ca:	bf00      	nop
 80086cc:	0800d003 	.word	0x0800d003
 80086d0:	0800ce24 	.word	0x0800ce24

080086d4 <std>:
 80086d4:	2300      	movs	r3, #0
 80086d6:	b510      	push	{r4, lr}
 80086d8:	4604      	mov	r4, r0
 80086da:	e9c0 3300 	strd	r3, r3, [r0]
 80086de:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80086e2:	6083      	str	r3, [r0, #8]
 80086e4:	8181      	strh	r1, [r0, #12]
 80086e6:	6643      	str	r3, [r0, #100]	@ 0x64
 80086e8:	81c2      	strh	r2, [r0, #14]
 80086ea:	6183      	str	r3, [r0, #24]
 80086ec:	4619      	mov	r1, r3
 80086ee:	2208      	movs	r2, #8
 80086f0:	305c      	adds	r0, #92	@ 0x5c
 80086f2:	f000 f9ad 	bl	8008a50 <memset>
 80086f6:	4b0d      	ldr	r3, [pc, #52]	@ (800872c <std+0x58>)
 80086f8:	6263      	str	r3, [r4, #36]	@ 0x24
 80086fa:	4b0d      	ldr	r3, [pc, #52]	@ (8008730 <std+0x5c>)
 80086fc:	62a3      	str	r3, [r4, #40]	@ 0x28
 80086fe:	4b0d      	ldr	r3, [pc, #52]	@ (8008734 <std+0x60>)
 8008700:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008702:	4b0d      	ldr	r3, [pc, #52]	@ (8008738 <std+0x64>)
 8008704:	6323      	str	r3, [r4, #48]	@ 0x30
 8008706:	4b0d      	ldr	r3, [pc, #52]	@ (800873c <std+0x68>)
 8008708:	6224      	str	r4, [r4, #32]
 800870a:	429c      	cmp	r4, r3
 800870c:	d006      	beq.n	800871c <std+0x48>
 800870e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008712:	4294      	cmp	r4, r2
 8008714:	d002      	beq.n	800871c <std+0x48>
 8008716:	33d0      	adds	r3, #208	@ 0xd0
 8008718:	429c      	cmp	r4, r3
 800871a:	d105      	bne.n	8008728 <std+0x54>
 800871c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008720:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008724:	f000 bfb8 	b.w	8009698 <__retarget_lock_init_recursive>
 8008728:	bd10      	pop	{r4, pc}
 800872a:	bf00      	nop
 800872c:	08008955 	.word	0x08008955
 8008730:	0800897b 	.word	0x0800897b
 8008734:	080089b3 	.word	0x080089b3
 8008738:	080089d7 	.word	0x080089d7
 800873c:	20006c5c 	.word	0x20006c5c

08008740 <stdio_exit_handler>:
 8008740:	4a02      	ldr	r2, [pc, #8]	@ (800874c <stdio_exit_handler+0xc>)
 8008742:	4903      	ldr	r1, [pc, #12]	@ (8008750 <stdio_exit_handler+0x10>)
 8008744:	4803      	ldr	r0, [pc, #12]	@ (8008754 <stdio_exit_handler+0x14>)
 8008746:	f000 b869 	b.w	800881c <_fwalk_sglue>
 800874a:	bf00      	nop
 800874c:	2000001c 	.word	0x2000001c
 8008750:	0800bfa9 	.word	0x0800bfa9
 8008754:	200001a0 	.word	0x200001a0

08008758 <cleanup_stdio>:
 8008758:	6841      	ldr	r1, [r0, #4]
 800875a:	4b0c      	ldr	r3, [pc, #48]	@ (800878c <cleanup_stdio+0x34>)
 800875c:	4299      	cmp	r1, r3
 800875e:	b510      	push	{r4, lr}
 8008760:	4604      	mov	r4, r0
 8008762:	d001      	beq.n	8008768 <cleanup_stdio+0x10>
 8008764:	f003 fc20 	bl	800bfa8 <_fflush_r>
 8008768:	68a1      	ldr	r1, [r4, #8]
 800876a:	4b09      	ldr	r3, [pc, #36]	@ (8008790 <cleanup_stdio+0x38>)
 800876c:	4299      	cmp	r1, r3
 800876e:	d002      	beq.n	8008776 <cleanup_stdio+0x1e>
 8008770:	4620      	mov	r0, r4
 8008772:	f003 fc19 	bl	800bfa8 <_fflush_r>
 8008776:	68e1      	ldr	r1, [r4, #12]
 8008778:	4b06      	ldr	r3, [pc, #24]	@ (8008794 <cleanup_stdio+0x3c>)
 800877a:	4299      	cmp	r1, r3
 800877c:	d004      	beq.n	8008788 <cleanup_stdio+0x30>
 800877e:	4620      	mov	r0, r4
 8008780:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008784:	f003 bc10 	b.w	800bfa8 <_fflush_r>
 8008788:	bd10      	pop	{r4, pc}
 800878a:	bf00      	nop
 800878c:	20006c5c 	.word	0x20006c5c
 8008790:	20006cc4 	.word	0x20006cc4
 8008794:	20006d2c 	.word	0x20006d2c

08008798 <global_stdio_init.part.0>:
 8008798:	b510      	push	{r4, lr}
 800879a:	4b0b      	ldr	r3, [pc, #44]	@ (80087c8 <global_stdio_init.part.0+0x30>)
 800879c:	4c0b      	ldr	r4, [pc, #44]	@ (80087cc <global_stdio_init.part.0+0x34>)
 800879e:	4a0c      	ldr	r2, [pc, #48]	@ (80087d0 <global_stdio_init.part.0+0x38>)
 80087a0:	601a      	str	r2, [r3, #0]
 80087a2:	4620      	mov	r0, r4
 80087a4:	2200      	movs	r2, #0
 80087a6:	2104      	movs	r1, #4
 80087a8:	f7ff ff94 	bl	80086d4 <std>
 80087ac:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80087b0:	2201      	movs	r2, #1
 80087b2:	2109      	movs	r1, #9
 80087b4:	f7ff ff8e 	bl	80086d4 <std>
 80087b8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80087bc:	2202      	movs	r2, #2
 80087be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80087c2:	2112      	movs	r1, #18
 80087c4:	f7ff bf86 	b.w	80086d4 <std>
 80087c8:	20006d94 	.word	0x20006d94
 80087cc:	20006c5c 	.word	0x20006c5c
 80087d0:	08008741 	.word	0x08008741

080087d4 <__sfp_lock_acquire>:
 80087d4:	4801      	ldr	r0, [pc, #4]	@ (80087dc <__sfp_lock_acquire+0x8>)
 80087d6:	f000 bf61 	b.w	800969c <__retarget_lock_acquire_recursive>
 80087da:	bf00      	nop
 80087dc:	20006dc3 	.word	0x20006dc3

080087e0 <__sfp_lock_release>:
 80087e0:	4801      	ldr	r0, [pc, #4]	@ (80087e8 <__sfp_lock_release+0x8>)
 80087e2:	f000 bf5d 	b.w	80096a0 <__retarget_lock_release_recursive>
 80087e6:	bf00      	nop
 80087e8:	20006dc3 	.word	0x20006dc3

080087ec <__sinit>:
 80087ec:	b510      	push	{r4, lr}
 80087ee:	4604      	mov	r4, r0
 80087f0:	f7ff fff0 	bl	80087d4 <__sfp_lock_acquire>
 80087f4:	6a23      	ldr	r3, [r4, #32]
 80087f6:	b11b      	cbz	r3, 8008800 <__sinit+0x14>
 80087f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80087fc:	f7ff bff0 	b.w	80087e0 <__sfp_lock_release>
 8008800:	4b04      	ldr	r3, [pc, #16]	@ (8008814 <__sinit+0x28>)
 8008802:	6223      	str	r3, [r4, #32]
 8008804:	4b04      	ldr	r3, [pc, #16]	@ (8008818 <__sinit+0x2c>)
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	2b00      	cmp	r3, #0
 800880a:	d1f5      	bne.n	80087f8 <__sinit+0xc>
 800880c:	f7ff ffc4 	bl	8008798 <global_stdio_init.part.0>
 8008810:	e7f2      	b.n	80087f8 <__sinit+0xc>
 8008812:	bf00      	nop
 8008814:	08008759 	.word	0x08008759
 8008818:	20006d94 	.word	0x20006d94

0800881c <_fwalk_sglue>:
 800881c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008820:	4607      	mov	r7, r0
 8008822:	4688      	mov	r8, r1
 8008824:	4614      	mov	r4, r2
 8008826:	2600      	movs	r6, #0
 8008828:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800882c:	f1b9 0901 	subs.w	r9, r9, #1
 8008830:	d505      	bpl.n	800883e <_fwalk_sglue+0x22>
 8008832:	6824      	ldr	r4, [r4, #0]
 8008834:	2c00      	cmp	r4, #0
 8008836:	d1f7      	bne.n	8008828 <_fwalk_sglue+0xc>
 8008838:	4630      	mov	r0, r6
 800883a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800883e:	89ab      	ldrh	r3, [r5, #12]
 8008840:	2b01      	cmp	r3, #1
 8008842:	d907      	bls.n	8008854 <_fwalk_sglue+0x38>
 8008844:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008848:	3301      	adds	r3, #1
 800884a:	d003      	beq.n	8008854 <_fwalk_sglue+0x38>
 800884c:	4629      	mov	r1, r5
 800884e:	4638      	mov	r0, r7
 8008850:	47c0      	blx	r8
 8008852:	4306      	orrs	r6, r0
 8008854:	3568      	adds	r5, #104	@ 0x68
 8008856:	e7e9      	b.n	800882c <_fwalk_sglue+0x10>

08008858 <sniprintf>:
 8008858:	b40c      	push	{r2, r3}
 800885a:	b530      	push	{r4, r5, lr}
 800885c:	4b17      	ldr	r3, [pc, #92]	@ (80088bc <sniprintf+0x64>)
 800885e:	1e0c      	subs	r4, r1, #0
 8008860:	681d      	ldr	r5, [r3, #0]
 8008862:	b09d      	sub	sp, #116	@ 0x74
 8008864:	da08      	bge.n	8008878 <sniprintf+0x20>
 8008866:	238b      	movs	r3, #139	@ 0x8b
 8008868:	602b      	str	r3, [r5, #0]
 800886a:	f04f 30ff 	mov.w	r0, #4294967295
 800886e:	b01d      	add	sp, #116	@ 0x74
 8008870:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008874:	b002      	add	sp, #8
 8008876:	4770      	bx	lr
 8008878:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800887c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8008880:	bf14      	ite	ne
 8008882:	f104 33ff 	addne.w	r3, r4, #4294967295
 8008886:	4623      	moveq	r3, r4
 8008888:	9304      	str	r3, [sp, #16]
 800888a:	9307      	str	r3, [sp, #28]
 800888c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8008890:	9002      	str	r0, [sp, #8]
 8008892:	9006      	str	r0, [sp, #24]
 8008894:	f8ad 3016 	strh.w	r3, [sp, #22]
 8008898:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800889a:	ab21      	add	r3, sp, #132	@ 0x84
 800889c:	a902      	add	r1, sp, #8
 800889e:	4628      	mov	r0, r5
 80088a0:	9301      	str	r3, [sp, #4]
 80088a2:	f002 fee7 	bl	800b674 <_svfiprintf_r>
 80088a6:	1c43      	adds	r3, r0, #1
 80088a8:	bfbc      	itt	lt
 80088aa:	238b      	movlt	r3, #139	@ 0x8b
 80088ac:	602b      	strlt	r3, [r5, #0]
 80088ae:	2c00      	cmp	r4, #0
 80088b0:	d0dd      	beq.n	800886e <sniprintf+0x16>
 80088b2:	9b02      	ldr	r3, [sp, #8]
 80088b4:	2200      	movs	r2, #0
 80088b6:	701a      	strb	r2, [r3, #0]
 80088b8:	e7d9      	b.n	800886e <sniprintf+0x16>
 80088ba:	bf00      	nop
 80088bc:	2000019c 	.word	0x2000019c

080088c0 <siprintf>:
 80088c0:	b40e      	push	{r1, r2, r3}
 80088c2:	b500      	push	{lr}
 80088c4:	b09c      	sub	sp, #112	@ 0x70
 80088c6:	ab1d      	add	r3, sp, #116	@ 0x74
 80088c8:	9002      	str	r0, [sp, #8]
 80088ca:	9006      	str	r0, [sp, #24]
 80088cc:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80088d0:	4809      	ldr	r0, [pc, #36]	@ (80088f8 <siprintf+0x38>)
 80088d2:	9107      	str	r1, [sp, #28]
 80088d4:	9104      	str	r1, [sp, #16]
 80088d6:	4909      	ldr	r1, [pc, #36]	@ (80088fc <siprintf+0x3c>)
 80088d8:	f853 2b04 	ldr.w	r2, [r3], #4
 80088dc:	9105      	str	r1, [sp, #20]
 80088de:	6800      	ldr	r0, [r0, #0]
 80088e0:	9301      	str	r3, [sp, #4]
 80088e2:	a902      	add	r1, sp, #8
 80088e4:	f002 fec6 	bl	800b674 <_svfiprintf_r>
 80088e8:	9b02      	ldr	r3, [sp, #8]
 80088ea:	2200      	movs	r2, #0
 80088ec:	701a      	strb	r2, [r3, #0]
 80088ee:	b01c      	add	sp, #112	@ 0x70
 80088f0:	f85d eb04 	ldr.w	lr, [sp], #4
 80088f4:	b003      	add	sp, #12
 80088f6:	4770      	bx	lr
 80088f8:	2000019c 	.word	0x2000019c
 80088fc:	ffff0208 	.word	0xffff0208

08008900 <siscanf>:
 8008900:	b40e      	push	{r1, r2, r3}
 8008902:	b530      	push	{r4, r5, lr}
 8008904:	b09c      	sub	sp, #112	@ 0x70
 8008906:	ac1f      	add	r4, sp, #124	@ 0x7c
 8008908:	f44f 7201 	mov.w	r2, #516	@ 0x204
 800890c:	f854 5b04 	ldr.w	r5, [r4], #4
 8008910:	f8ad 2014 	strh.w	r2, [sp, #20]
 8008914:	9002      	str	r0, [sp, #8]
 8008916:	9006      	str	r0, [sp, #24]
 8008918:	f7f7 fcba 	bl	8000290 <strlen>
 800891c:	4b0b      	ldr	r3, [pc, #44]	@ (800894c <siscanf+0x4c>)
 800891e:	9003      	str	r0, [sp, #12]
 8008920:	9007      	str	r0, [sp, #28]
 8008922:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008924:	480a      	ldr	r0, [pc, #40]	@ (8008950 <siscanf+0x50>)
 8008926:	9401      	str	r4, [sp, #4]
 8008928:	2300      	movs	r3, #0
 800892a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800892c:	9314      	str	r3, [sp, #80]	@ 0x50
 800892e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8008932:	f8ad 3016 	strh.w	r3, [sp, #22]
 8008936:	462a      	mov	r2, r5
 8008938:	4623      	mov	r3, r4
 800893a:	a902      	add	r1, sp, #8
 800893c:	6800      	ldr	r0, [r0, #0]
 800893e:	f002 ffed 	bl	800b91c <__ssvfiscanf_r>
 8008942:	b01c      	add	sp, #112	@ 0x70
 8008944:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008948:	b003      	add	sp, #12
 800894a:	4770      	bx	lr
 800894c:	08008977 	.word	0x08008977
 8008950:	2000019c 	.word	0x2000019c

08008954 <__sread>:
 8008954:	b510      	push	{r4, lr}
 8008956:	460c      	mov	r4, r1
 8008958:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800895c:	f000 fe3e 	bl	80095dc <_read_r>
 8008960:	2800      	cmp	r0, #0
 8008962:	bfab      	itete	ge
 8008964:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008966:	89a3      	ldrhlt	r3, [r4, #12]
 8008968:	181b      	addge	r3, r3, r0
 800896a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800896e:	bfac      	ite	ge
 8008970:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008972:	81a3      	strhlt	r3, [r4, #12]
 8008974:	bd10      	pop	{r4, pc}

08008976 <__seofread>:
 8008976:	2000      	movs	r0, #0
 8008978:	4770      	bx	lr

0800897a <__swrite>:
 800897a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800897e:	461f      	mov	r7, r3
 8008980:	898b      	ldrh	r3, [r1, #12]
 8008982:	05db      	lsls	r3, r3, #23
 8008984:	4605      	mov	r5, r0
 8008986:	460c      	mov	r4, r1
 8008988:	4616      	mov	r6, r2
 800898a:	d505      	bpl.n	8008998 <__swrite+0x1e>
 800898c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008990:	2302      	movs	r3, #2
 8008992:	2200      	movs	r2, #0
 8008994:	f000 fe10 	bl	80095b8 <_lseek_r>
 8008998:	89a3      	ldrh	r3, [r4, #12]
 800899a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800899e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80089a2:	81a3      	strh	r3, [r4, #12]
 80089a4:	4632      	mov	r2, r6
 80089a6:	463b      	mov	r3, r7
 80089a8:	4628      	mov	r0, r5
 80089aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80089ae:	f000 be37 	b.w	8009620 <_write_r>

080089b2 <__sseek>:
 80089b2:	b510      	push	{r4, lr}
 80089b4:	460c      	mov	r4, r1
 80089b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80089ba:	f000 fdfd 	bl	80095b8 <_lseek_r>
 80089be:	1c43      	adds	r3, r0, #1
 80089c0:	89a3      	ldrh	r3, [r4, #12]
 80089c2:	bf15      	itete	ne
 80089c4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80089c6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80089ca:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80089ce:	81a3      	strheq	r3, [r4, #12]
 80089d0:	bf18      	it	ne
 80089d2:	81a3      	strhne	r3, [r4, #12]
 80089d4:	bd10      	pop	{r4, pc}

080089d6 <__sclose>:
 80089d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80089da:	f000 bddd 	b.w	8009598 <_close_r>

080089de <_vsniprintf_r>:
 80089de:	b530      	push	{r4, r5, lr}
 80089e0:	4614      	mov	r4, r2
 80089e2:	2c00      	cmp	r4, #0
 80089e4:	b09b      	sub	sp, #108	@ 0x6c
 80089e6:	4605      	mov	r5, r0
 80089e8:	461a      	mov	r2, r3
 80089ea:	da05      	bge.n	80089f8 <_vsniprintf_r+0x1a>
 80089ec:	238b      	movs	r3, #139	@ 0x8b
 80089ee:	6003      	str	r3, [r0, #0]
 80089f0:	f04f 30ff 	mov.w	r0, #4294967295
 80089f4:	b01b      	add	sp, #108	@ 0x6c
 80089f6:	bd30      	pop	{r4, r5, pc}
 80089f8:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80089fc:	f8ad 300c 	strh.w	r3, [sp, #12]
 8008a00:	bf14      	ite	ne
 8008a02:	f104 33ff 	addne.w	r3, r4, #4294967295
 8008a06:	4623      	moveq	r3, r4
 8008a08:	9302      	str	r3, [sp, #8]
 8008a0a:	9305      	str	r3, [sp, #20]
 8008a0c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8008a10:	9100      	str	r1, [sp, #0]
 8008a12:	9104      	str	r1, [sp, #16]
 8008a14:	f8ad 300e 	strh.w	r3, [sp, #14]
 8008a18:	4669      	mov	r1, sp
 8008a1a:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8008a1c:	f002 fe2a 	bl	800b674 <_svfiprintf_r>
 8008a20:	1c43      	adds	r3, r0, #1
 8008a22:	bfbc      	itt	lt
 8008a24:	238b      	movlt	r3, #139	@ 0x8b
 8008a26:	602b      	strlt	r3, [r5, #0]
 8008a28:	2c00      	cmp	r4, #0
 8008a2a:	d0e3      	beq.n	80089f4 <_vsniprintf_r+0x16>
 8008a2c:	9b00      	ldr	r3, [sp, #0]
 8008a2e:	2200      	movs	r2, #0
 8008a30:	701a      	strb	r2, [r3, #0]
 8008a32:	e7df      	b.n	80089f4 <_vsniprintf_r+0x16>

08008a34 <vsniprintf>:
 8008a34:	b507      	push	{r0, r1, r2, lr}
 8008a36:	9300      	str	r3, [sp, #0]
 8008a38:	4613      	mov	r3, r2
 8008a3a:	460a      	mov	r2, r1
 8008a3c:	4601      	mov	r1, r0
 8008a3e:	4803      	ldr	r0, [pc, #12]	@ (8008a4c <vsniprintf+0x18>)
 8008a40:	6800      	ldr	r0, [r0, #0]
 8008a42:	f7ff ffcc 	bl	80089de <_vsniprintf_r>
 8008a46:	b003      	add	sp, #12
 8008a48:	f85d fb04 	ldr.w	pc, [sp], #4
 8008a4c:	2000019c 	.word	0x2000019c

08008a50 <memset>:
 8008a50:	4402      	add	r2, r0
 8008a52:	4603      	mov	r3, r0
 8008a54:	4293      	cmp	r3, r2
 8008a56:	d100      	bne.n	8008a5a <memset+0xa>
 8008a58:	4770      	bx	lr
 8008a5a:	f803 1b01 	strb.w	r1, [r3], #1
 8008a5e:	e7f9      	b.n	8008a54 <memset+0x4>

08008a60 <strchr>:
 8008a60:	b2c9      	uxtb	r1, r1
 8008a62:	4603      	mov	r3, r0
 8008a64:	4618      	mov	r0, r3
 8008a66:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008a6a:	b112      	cbz	r2, 8008a72 <strchr+0x12>
 8008a6c:	428a      	cmp	r2, r1
 8008a6e:	d1f9      	bne.n	8008a64 <strchr+0x4>
 8008a70:	4770      	bx	lr
 8008a72:	2900      	cmp	r1, #0
 8008a74:	bf18      	it	ne
 8008a76:	2000      	movne	r0, #0
 8008a78:	4770      	bx	lr

08008a7a <strncmp>:
 8008a7a:	b510      	push	{r4, lr}
 8008a7c:	b16a      	cbz	r2, 8008a9a <strncmp+0x20>
 8008a7e:	3901      	subs	r1, #1
 8008a80:	1884      	adds	r4, r0, r2
 8008a82:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008a86:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8008a8a:	429a      	cmp	r2, r3
 8008a8c:	d103      	bne.n	8008a96 <strncmp+0x1c>
 8008a8e:	42a0      	cmp	r0, r4
 8008a90:	d001      	beq.n	8008a96 <strncmp+0x1c>
 8008a92:	2a00      	cmp	r2, #0
 8008a94:	d1f5      	bne.n	8008a82 <strncmp+0x8>
 8008a96:	1ad0      	subs	r0, r2, r3
 8008a98:	bd10      	pop	{r4, pc}
 8008a9a:	4610      	mov	r0, r2
 8008a9c:	e7fc      	b.n	8008a98 <strncmp+0x1e>

08008a9e <strrchr>:
 8008a9e:	b538      	push	{r3, r4, r5, lr}
 8008aa0:	f011 04ff 	ands.w	r4, r1, #255	@ 0xff
 8008aa4:	4603      	mov	r3, r0
 8008aa6:	d10e      	bne.n	8008ac6 <strrchr+0x28>
 8008aa8:	4621      	mov	r1, r4
 8008aaa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008aae:	f7ff bfd7 	b.w	8008a60 <strchr>
 8008ab2:	1c43      	adds	r3, r0, #1
 8008ab4:	4605      	mov	r5, r0
 8008ab6:	4621      	mov	r1, r4
 8008ab8:	4618      	mov	r0, r3
 8008aba:	f7ff ffd1 	bl	8008a60 <strchr>
 8008abe:	2800      	cmp	r0, #0
 8008ac0:	d1f7      	bne.n	8008ab2 <strrchr+0x14>
 8008ac2:	4628      	mov	r0, r5
 8008ac4:	bd38      	pop	{r3, r4, r5, pc}
 8008ac6:	2500      	movs	r5, #0
 8008ac8:	e7f5      	b.n	8008ab6 <strrchr+0x18>
	...

08008acc <validate_structure>:
 8008acc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008ace:	6801      	ldr	r1, [r0, #0]
 8008ad0:	293b      	cmp	r1, #59	@ 0x3b
 8008ad2:	4604      	mov	r4, r0
 8008ad4:	d911      	bls.n	8008afa <validate_structure+0x2e>
 8008ad6:	223c      	movs	r2, #60	@ 0x3c
 8008ad8:	4668      	mov	r0, sp
 8008ada:	f000 fe07 	bl	80096ec <div>
 8008ade:	9a01      	ldr	r2, [sp, #4]
 8008ae0:	6863      	ldr	r3, [r4, #4]
 8008ae2:	9900      	ldr	r1, [sp, #0]
 8008ae4:	2a00      	cmp	r2, #0
 8008ae6:	440b      	add	r3, r1
 8008ae8:	6063      	str	r3, [r4, #4]
 8008aea:	bfbb      	ittet	lt
 8008aec:	323c      	addlt	r2, #60	@ 0x3c
 8008aee:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8008af2:	6022      	strge	r2, [r4, #0]
 8008af4:	6022      	strlt	r2, [r4, #0]
 8008af6:	bfb8      	it	lt
 8008af8:	6063      	strlt	r3, [r4, #4]
 8008afa:	6861      	ldr	r1, [r4, #4]
 8008afc:	293b      	cmp	r1, #59	@ 0x3b
 8008afe:	d911      	bls.n	8008b24 <validate_structure+0x58>
 8008b00:	223c      	movs	r2, #60	@ 0x3c
 8008b02:	4668      	mov	r0, sp
 8008b04:	f000 fdf2 	bl	80096ec <div>
 8008b08:	9a01      	ldr	r2, [sp, #4]
 8008b0a:	68a3      	ldr	r3, [r4, #8]
 8008b0c:	9900      	ldr	r1, [sp, #0]
 8008b0e:	2a00      	cmp	r2, #0
 8008b10:	440b      	add	r3, r1
 8008b12:	60a3      	str	r3, [r4, #8]
 8008b14:	bfbb      	ittet	lt
 8008b16:	323c      	addlt	r2, #60	@ 0x3c
 8008b18:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8008b1c:	6062      	strge	r2, [r4, #4]
 8008b1e:	6062      	strlt	r2, [r4, #4]
 8008b20:	bfb8      	it	lt
 8008b22:	60a3      	strlt	r3, [r4, #8]
 8008b24:	68a1      	ldr	r1, [r4, #8]
 8008b26:	2917      	cmp	r1, #23
 8008b28:	d911      	bls.n	8008b4e <validate_structure+0x82>
 8008b2a:	2218      	movs	r2, #24
 8008b2c:	4668      	mov	r0, sp
 8008b2e:	f000 fddd 	bl	80096ec <div>
 8008b32:	9a01      	ldr	r2, [sp, #4]
 8008b34:	68e3      	ldr	r3, [r4, #12]
 8008b36:	9900      	ldr	r1, [sp, #0]
 8008b38:	2a00      	cmp	r2, #0
 8008b3a:	440b      	add	r3, r1
 8008b3c:	60e3      	str	r3, [r4, #12]
 8008b3e:	bfbb      	ittet	lt
 8008b40:	3218      	addlt	r2, #24
 8008b42:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8008b46:	60a2      	strge	r2, [r4, #8]
 8008b48:	60a2      	strlt	r2, [r4, #8]
 8008b4a:	bfb8      	it	lt
 8008b4c:	60e3      	strlt	r3, [r4, #12]
 8008b4e:	6921      	ldr	r1, [r4, #16]
 8008b50:	290b      	cmp	r1, #11
 8008b52:	d911      	bls.n	8008b78 <validate_structure+0xac>
 8008b54:	220c      	movs	r2, #12
 8008b56:	4668      	mov	r0, sp
 8008b58:	f000 fdc8 	bl	80096ec <div>
 8008b5c:	9a01      	ldr	r2, [sp, #4]
 8008b5e:	6963      	ldr	r3, [r4, #20]
 8008b60:	9900      	ldr	r1, [sp, #0]
 8008b62:	2a00      	cmp	r2, #0
 8008b64:	440b      	add	r3, r1
 8008b66:	6163      	str	r3, [r4, #20]
 8008b68:	bfbb      	ittet	lt
 8008b6a:	320c      	addlt	r2, #12
 8008b6c:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8008b70:	6122      	strge	r2, [r4, #16]
 8008b72:	6122      	strlt	r2, [r4, #16]
 8008b74:	bfb8      	it	lt
 8008b76:	6163      	strlt	r3, [r4, #20]
 8008b78:	6963      	ldr	r3, [r4, #20]
 8008b7a:	079a      	lsls	r2, r3, #30
 8008b7c:	d11c      	bne.n	8008bb8 <validate_structure+0xec>
 8008b7e:	2164      	movs	r1, #100	@ 0x64
 8008b80:	fb93 f2f1 	sdiv	r2, r3, r1
 8008b84:	fb01 3212 	mls	r2, r1, r2, r3
 8008b88:	b9c2      	cbnz	r2, 8008bbc <validate_structure+0xf0>
 8008b8a:	f203 736c 	addw	r3, r3, #1900	@ 0x76c
 8008b8e:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8008b92:	fb93 f1f2 	sdiv	r1, r3, r2
 8008b96:	fb02 3311 	mls	r3, r2, r1, r3
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	bf14      	ite	ne
 8008b9e:	231c      	movne	r3, #28
 8008ba0:	231d      	moveq	r3, #29
 8008ba2:	68e2      	ldr	r2, [r4, #12]
 8008ba4:	2a00      	cmp	r2, #0
 8008ba6:	dc0b      	bgt.n	8008bc0 <validate_structure+0xf4>
 8008ba8:	4d31      	ldr	r5, [pc, #196]	@ (8008c70 <validate_structure+0x1a4>)
 8008baa:	200b      	movs	r0, #11
 8008bac:	2164      	movs	r1, #100	@ 0x64
 8008bae:	68e6      	ldr	r6, [r4, #12]
 8008bb0:	2e00      	cmp	r6, #0
 8008bb2:	dd30      	ble.n	8008c16 <validate_structure+0x14a>
 8008bb4:	b003      	add	sp, #12
 8008bb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008bb8:	231c      	movs	r3, #28
 8008bba:	e7f2      	b.n	8008ba2 <validate_structure+0xd6>
 8008bbc:	231d      	movs	r3, #29
 8008bbe:	e7f0      	b.n	8008ba2 <validate_structure+0xd6>
 8008bc0:	4d2b      	ldr	r5, [pc, #172]	@ (8008c70 <validate_structure+0x1a4>)
 8008bc2:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
 8008bc6:	2a01      	cmp	r2, #1
 8008bc8:	bf14      	ite	ne
 8008bca:	f855 0022 	ldrne.w	r0, [r5, r2, lsl #2]
 8008bce:	4618      	moveq	r0, r3
 8008bd0:	4281      	cmp	r1, r0
 8008bd2:	ddef      	ble.n	8008bb4 <validate_structure+0xe8>
 8008bd4:	3201      	adds	r2, #1
 8008bd6:	1a09      	subs	r1, r1, r0
 8008bd8:	2a0c      	cmp	r2, #12
 8008bda:	60e1      	str	r1, [r4, #12]
 8008bdc:	6122      	str	r2, [r4, #16]
 8008bde:	d1f0      	bne.n	8008bc2 <validate_structure+0xf6>
 8008be0:	6963      	ldr	r3, [r4, #20]
 8008be2:	2100      	movs	r1, #0
 8008be4:	1c5a      	adds	r2, r3, #1
 8008be6:	6121      	str	r1, [r4, #16]
 8008be8:	0791      	lsls	r1, r2, #30
 8008bea:	6162      	str	r2, [r4, #20]
 8008bec:	d13c      	bne.n	8008c68 <validate_structure+0x19c>
 8008bee:	2164      	movs	r1, #100	@ 0x64
 8008bf0:	fb92 f0f1 	sdiv	r0, r2, r1
 8008bf4:	fb01 2210 	mls	r2, r1, r0, r2
 8008bf8:	2a00      	cmp	r2, #0
 8008bfa:	d137      	bne.n	8008c6c <validate_structure+0x1a0>
 8008bfc:	f203 736d 	addw	r3, r3, #1901	@ 0x76d
 8008c00:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8008c04:	fb93 f1f2 	sdiv	r1, r3, r2
 8008c08:	fb02 3311 	mls	r3, r2, r1, r3
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	bf14      	ite	ne
 8008c10:	231c      	movne	r3, #28
 8008c12:	231d      	moveq	r3, #29
 8008c14:	e7d5      	b.n	8008bc2 <validate_structure+0xf6>
 8008c16:	6922      	ldr	r2, [r4, #16]
 8008c18:	3a01      	subs	r2, #1
 8008c1a:	6122      	str	r2, [r4, #16]
 8008c1c:	3201      	adds	r2, #1
 8008c1e:	d116      	bne.n	8008c4e <validate_structure+0x182>
 8008c20:	6963      	ldr	r3, [r4, #20]
 8008c22:	1e5a      	subs	r2, r3, #1
 8008c24:	0797      	lsls	r7, r2, #30
 8008c26:	e9c4 0204 	strd	r0, r2, [r4, #16]
 8008c2a:	d119      	bne.n	8008c60 <validate_structure+0x194>
 8008c2c:	fb92 f7f1 	sdiv	r7, r2, r1
 8008c30:	fb01 2217 	mls	r2, r1, r7, r2
 8008c34:	b9b2      	cbnz	r2, 8008c64 <validate_structure+0x198>
 8008c36:	f203 736b 	addw	r3, r3, #1899	@ 0x76b
 8008c3a:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8008c3e:	fb93 f7f2 	sdiv	r7, r3, r2
 8008c42:	fb02 3317 	mls	r3, r2, r7, r3
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	bf14      	ite	ne
 8008c4a:	231c      	movne	r3, #28
 8008c4c:	231d      	moveq	r3, #29
 8008c4e:	6922      	ldr	r2, [r4, #16]
 8008c50:	2a01      	cmp	r2, #1
 8008c52:	bf14      	ite	ne
 8008c54:	f855 2022 	ldrne.w	r2, [r5, r2, lsl #2]
 8008c58:	461a      	moveq	r2, r3
 8008c5a:	4432      	add	r2, r6
 8008c5c:	60e2      	str	r2, [r4, #12]
 8008c5e:	e7a6      	b.n	8008bae <validate_structure+0xe2>
 8008c60:	231c      	movs	r3, #28
 8008c62:	e7f4      	b.n	8008c4e <validate_structure+0x182>
 8008c64:	231d      	movs	r3, #29
 8008c66:	e7f2      	b.n	8008c4e <validate_structure+0x182>
 8008c68:	231c      	movs	r3, #28
 8008c6a:	e7aa      	b.n	8008bc2 <validate_structure+0xf6>
 8008c6c:	231d      	movs	r3, #29
 8008c6e:	e7a8      	b.n	8008bc2 <validate_structure+0xf6>
 8008c70:	0800d038 	.word	0x0800d038

08008c74 <mktime>:
 8008c74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c78:	b085      	sub	sp, #20
 8008c7a:	4607      	mov	r7, r0
 8008c7c:	f003 fa4a 	bl	800c114 <__gettzinfo>
 8008c80:	4681      	mov	r9, r0
 8008c82:	4638      	mov	r0, r7
 8008c84:	f7ff ff22 	bl	8008acc <validate_structure>
 8008c88:	e9d7 4300 	ldrd	r4, r3, [r7]
 8008c8c:	223c      	movs	r2, #60	@ 0x3c
 8008c8e:	fb02 4403 	mla	r4, r2, r3, r4
 8008c92:	68bb      	ldr	r3, [r7, #8]
 8008c94:	697d      	ldr	r5, [r7, #20]
 8008c96:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 8008c9a:	fb02 4403 	mla	r4, r2, r3, r4
 8008c9e:	e9d7 6303 	ldrd	r6, r3, [r7, #12]
 8008ca2:	4ac1      	ldr	r2, [pc, #772]	@ (8008fa8 <mktime+0x334>)
 8008ca4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8008ca8:	3e01      	subs	r6, #1
 8008caa:	2b01      	cmp	r3, #1
 8008cac:	4416      	add	r6, r2
 8008cae:	dd11      	ble.n	8008cd4 <mktime+0x60>
 8008cb0:	07a9      	lsls	r1, r5, #30
 8008cb2:	d10f      	bne.n	8008cd4 <mktime+0x60>
 8008cb4:	2264      	movs	r2, #100	@ 0x64
 8008cb6:	fb95 f3f2 	sdiv	r3, r5, r2
 8008cba:	fb02 5313 	mls	r3, r2, r3, r5
 8008cbe:	b943      	cbnz	r3, 8008cd2 <mktime+0x5e>
 8008cc0:	f205 736c 	addw	r3, r5, #1900	@ 0x76c
 8008cc4:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8008cc8:	fb93 f1f2 	sdiv	r1, r3, r2
 8008ccc:	fb02 3311 	mls	r3, r2, r1, r3
 8008cd0:	b903      	cbnz	r3, 8008cd4 <mktime+0x60>
 8008cd2:	3601      	adds	r6, #1
 8008cd4:	f505 531c 	add.w	r3, r5, #9984	@ 0x2700
 8008cd8:	3310      	adds	r3, #16
 8008cda:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8008cde:	4293      	cmp	r3, r2
 8008ce0:	61fe      	str	r6, [r7, #28]
 8008ce2:	f200 8167 	bhi.w	8008fb4 <mktime+0x340>
 8008ce6:	2d46      	cmp	r5, #70	@ 0x46
 8008ce8:	f340 808e 	ble.w	8008e08 <mktime+0x194>
 8008cec:	2346      	movs	r3, #70	@ 0x46
 8008cee:	f240 1c6d 	movw	ip, #365	@ 0x16d
 8008cf2:	2164      	movs	r1, #100	@ 0x64
 8008cf4:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 8008cf8:	079a      	lsls	r2, r3, #30
 8008cfa:	d17f      	bne.n	8008dfc <mktime+0x188>
 8008cfc:	fb93 f2f1 	sdiv	r2, r3, r1
 8008d00:	fb01 3212 	mls	r2, r1, r2, r3
 8008d04:	2a00      	cmp	r2, #0
 8008d06:	d17c      	bne.n	8008e02 <mktime+0x18e>
 8008d08:	f203 726c 	addw	r2, r3, #1900	@ 0x76c
 8008d0c:	fb92 fef0 	sdiv	lr, r2, r0
 8008d10:	fb00 221e 	mls	r2, r0, lr, r2
 8008d14:	2a00      	cmp	r2, #0
 8008d16:	bf14      	ite	ne
 8008d18:	4662      	movne	r2, ip
 8008d1a:	f44f 72b7 	moveq.w	r2, #366	@ 0x16e
 8008d1e:	3301      	adds	r3, #1
 8008d20:	429d      	cmp	r5, r3
 8008d22:	4416      	add	r6, r2
 8008d24:	d1e8      	bne.n	8008cf8 <mktime+0x84>
 8008d26:	4ba1      	ldr	r3, [pc, #644]	@ (8008fac <mktime+0x338>)
 8008d28:	ea4f 78e4 	mov.w	r8, r4, asr #31
 8008d2c:	fbc6 4803 	smlal	r4, r8, r6, r3
 8008d30:	f000 f9fa 	bl	8009128 <__tz_lock>
 8008d34:	f000 fa04 	bl	8009140 <_tzset_unlocked>
 8008d38:	4b9d      	ldr	r3, [pc, #628]	@ (8008fb0 <mktime+0x33c>)
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	f000 8140 	beq.w	8008fc2 <mktime+0x34e>
 8008d42:	f8d7 a020 	ldr.w	sl, [r7, #32]
 8008d46:	6978      	ldr	r0, [r7, #20]
 8008d48:	4653      	mov	r3, sl
 8008d4a:	2b01      	cmp	r3, #1
 8008d4c:	bfa8      	it	ge
 8008d4e:	2301      	movge	r3, #1
 8008d50:	9301      	str	r3, [sp, #4]
 8008d52:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8008d56:	f200 706c 	addw	r0, r0, #1900	@ 0x76c
 8008d5a:	4283      	cmp	r3, r0
 8008d5c:	f040 8096 	bne.w	8008e8c <mktime+0x218>
 8008d60:	e9d9 2108 	ldrd	r2, r1, [r9, #32]
 8008d64:	f8d9 0050 	ldr.w	r0, [r9, #80]	@ 0x50
 8008d68:	f8d9 c04c 	ldr.w	ip, [r9, #76]	@ 0x4c
 8008d6c:	1a13      	subs	r3, r2, r0
 8008d6e:	9303      	str	r3, [sp, #12]
 8008d70:	f8d9 3048 	ldr.w	r3, [r9, #72]	@ 0x48
 8008d74:	9302      	str	r3, [sp, #8]
 8008d76:	9a02      	ldr	r2, [sp, #8]
 8008d78:	f8d9 3028 	ldr.w	r3, [r9, #40]	@ 0x28
 8008d7c:	eb61 7be0 	sbc.w	fp, r1, r0, asr #31
 8008d80:	ebb2 0e03 	subs.w	lr, r2, r3
 8008d84:	eb6c 71e3 	sbc.w	r1, ip, r3, asr #31
 8008d88:	4574      	cmp	r4, lr
 8008d8a:	eb78 0201 	sbcs.w	r2, r8, r1
 8008d8e:	f280 8085 	bge.w	8008e9c <mktime+0x228>
 8008d92:	f8d9 2000 	ldr.w	r2, [r9]
 8008d96:	2a00      	cmp	r2, #0
 8008d98:	f000 808d 	beq.w	8008eb6 <mktime+0x242>
 8008d9c:	9a03      	ldr	r2, [sp, #12]
 8008d9e:	4294      	cmp	r4, r2
 8008da0:	eb78 020b 	sbcs.w	r2, r8, fp
 8008da4:	f2c0 810a 	blt.w	8008fbc <mktime+0x348>
 8008da8:	4574      	cmp	r4, lr
 8008daa:	eb78 0101 	sbcs.w	r1, r8, r1
 8008dae:	bfb4      	ite	lt
 8008db0:	f04f 0b01 	movlt.w	fp, #1
 8008db4:	f04f 0b00 	movge.w	fp, #0
 8008db8:	f1ba 0f00 	cmp.w	sl, #0
 8008dbc:	f280 8087 	bge.w	8008ece <mktime+0x25a>
 8008dc0:	f1bb 0f01 	cmp.w	fp, #1
 8008dc4:	f040 80ff 	bne.w	8008fc6 <mktime+0x352>
 8008dc8:	f8d9 3050 	ldr.w	r3, [r9, #80]	@ 0x50
 8008dcc:	191c      	adds	r4, r3, r4
 8008dce:	eb48 78e3 	adc.w	r8, r8, r3, asr #31
 8008dd2:	f04f 0b01 	mov.w	fp, #1
 8008dd6:	f000 f9ad 	bl	8009134 <__tz_unlock>
 8008dda:	3604      	adds	r6, #4
 8008ddc:	2307      	movs	r3, #7
 8008dde:	fb96 f3f3 	sdiv	r3, r6, r3
 8008de2:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8008de6:	1af6      	subs	r6, r6, r3
 8008de8:	f100 80db 	bmi.w	8008fa2 <mktime+0x32e>
 8008dec:	f8c7 b020 	str.w	fp, [r7, #32]
 8008df0:	61be      	str	r6, [r7, #24]
 8008df2:	4620      	mov	r0, r4
 8008df4:	4641      	mov	r1, r8
 8008df6:	b005      	add	sp, #20
 8008df8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008dfc:	f240 126d 	movw	r2, #365	@ 0x16d
 8008e00:	e78d      	b.n	8008d1e <mktime+0xaa>
 8008e02:	f44f 72b7 	mov.w	r2, #366	@ 0x16e
 8008e06:	e78a      	b.n	8008d1e <mktime+0xaa>
 8008e08:	d08d      	beq.n	8008d26 <mktime+0xb2>
 8008e0a:	2345      	movs	r3, #69	@ 0x45
 8008e0c:	f240 1c6d 	movw	ip, #365	@ 0x16d
 8008e10:	2164      	movs	r1, #100	@ 0x64
 8008e12:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 8008e16:	e012      	b.n	8008e3e <mktime+0x1ca>
 8008e18:	bb62      	cbnz	r2, 8008e74 <mktime+0x200>
 8008e1a:	fb93 f2f1 	sdiv	r2, r3, r1
 8008e1e:	fb01 3212 	mls	r2, r1, r2, r3
 8008e22:	bb52      	cbnz	r2, 8008e7a <mktime+0x206>
 8008e24:	f203 726c 	addw	r2, r3, #1900	@ 0x76c
 8008e28:	fb92 fef0 	sdiv	lr, r2, r0
 8008e2c:	fb00 221e 	mls	r2, r0, lr, r2
 8008e30:	2a00      	cmp	r2, #0
 8008e32:	bf14      	ite	ne
 8008e34:	4662      	movne	r2, ip
 8008e36:	f44f 72b7 	moveq.w	r2, #366	@ 0x16e
 8008e3a:	1ab6      	subs	r6, r6, r2
 8008e3c:	3b01      	subs	r3, #1
 8008e3e:	429d      	cmp	r5, r3
 8008e40:	f003 0203 	and.w	r2, r3, #3
 8008e44:	dbe8      	blt.n	8008e18 <mktime+0x1a4>
 8008e46:	b9da      	cbnz	r2, 8008e80 <mktime+0x20c>
 8008e48:	2264      	movs	r2, #100	@ 0x64
 8008e4a:	fb95 f3f2 	sdiv	r3, r5, r2
 8008e4e:	fb02 5313 	mls	r3, r2, r3, r5
 8008e52:	b9c3      	cbnz	r3, 8008e86 <mktime+0x212>
 8008e54:	f205 736c 	addw	r3, r5, #1900	@ 0x76c
 8008e58:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8008e5c:	fb93 f1f2 	sdiv	r1, r3, r2
 8008e60:	fb02 3311 	mls	r3, r2, r1, r3
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	f240 136d 	movw	r3, #365	@ 0x16d
 8008e6a:	bf08      	it	eq
 8008e6c:	f44f 73b7 	moveq.w	r3, #366	@ 0x16e
 8008e70:	1af6      	subs	r6, r6, r3
 8008e72:	e758      	b.n	8008d26 <mktime+0xb2>
 8008e74:	f240 126d 	movw	r2, #365	@ 0x16d
 8008e78:	e7df      	b.n	8008e3a <mktime+0x1c6>
 8008e7a:	f44f 72b7 	mov.w	r2, #366	@ 0x16e
 8008e7e:	e7dc      	b.n	8008e3a <mktime+0x1c6>
 8008e80:	f240 136d 	movw	r3, #365	@ 0x16d
 8008e84:	e7f4      	b.n	8008e70 <mktime+0x1fc>
 8008e86:	f44f 73b7 	mov.w	r3, #366	@ 0x16e
 8008e8a:	e7f1      	b.n	8008e70 <mktime+0x1fc>
 8008e8c:	f000 f8a2 	bl	8008fd4 <__tzcalc_limits>
 8008e90:	2800      	cmp	r0, #0
 8008e92:	f47f af65 	bne.w	8008d60 <mktime+0xec>
 8008e96:	f8dd b004 	ldr.w	fp, [sp, #4]
 8008e9a:	e791      	b.n	8008dc0 <mktime+0x14c>
 8008e9c:	9a02      	ldr	r2, [sp, #8]
 8008e9e:	1a12      	subs	r2, r2, r0
 8008ea0:	9202      	str	r2, [sp, #8]
 8008ea2:	ea4f 72e0 	mov.w	r2, r0, asr #31
 8008ea6:	eb6c 0c02 	sbc.w	ip, ip, r2
 8008eaa:	9a02      	ldr	r2, [sp, #8]
 8008eac:	4294      	cmp	r4, r2
 8008eae:	eb78 0c0c 	sbcs.w	ip, r8, ip
 8008eb2:	dbf0      	blt.n	8008e96 <mktime+0x222>
 8008eb4:	e76d      	b.n	8008d92 <mktime+0x11e>
 8008eb6:	9a03      	ldr	r2, [sp, #12]
 8008eb8:	4294      	cmp	r4, r2
 8008eba:	eb78 020b 	sbcs.w	r2, r8, fp
 8008ebe:	f6ff af73 	blt.w	8008da8 <mktime+0x134>
 8008ec2:	f1ba 0f00 	cmp.w	sl, #0
 8008ec6:	f6ff af7f 	blt.w	8008dc8 <mktime+0x154>
 8008eca:	f04f 0b01 	mov.w	fp, #1
 8008ece:	9a01      	ldr	r2, [sp, #4]
 8008ed0:	ea82 020b 	eor.w	r2, r2, fp
 8008ed4:	2a01      	cmp	r2, #1
 8008ed6:	f47f af73 	bne.w	8008dc0 <mktime+0x14c>
 8008eda:	f1bb 0f00 	cmp.w	fp, #0
 8008ede:	d035      	beq.n	8008f4c <mktime+0x2d8>
 8008ee0:	1a1b      	subs	r3, r3, r0
 8008ee2:	683a      	ldr	r2, [r7, #0]
 8008ee4:	f8d7 a00c 	ldr.w	sl, [r7, #12]
 8008ee8:	441a      	add	r2, r3
 8008eea:	191c      	adds	r4, r3, r4
 8008eec:	603a      	str	r2, [r7, #0]
 8008eee:	4638      	mov	r0, r7
 8008ef0:	eb48 78e3 	adc.w	r8, r8, r3, asr #31
 8008ef4:	f7ff fdea 	bl	8008acc <validate_structure>
 8008ef8:	68fa      	ldr	r2, [r7, #12]
 8008efa:	ebb2 020a 	subs.w	r2, r2, sl
 8008efe:	f43f af5f 	beq.w	8008dc0 <mktime+0x14c>
 8008f02:	2a01      	cmp	r2, #1
 8008f04:	dc24      	bgt.n	8008f50 <mktime+0x2dc>
 8008f06:	1c93      	adds	r3, r2, #2
 8008f08:	bfd8      	it	le
 8008f0a:	2201      	movle	r2, #1
 8008f0c:	69fb      	ldr	r3, [r7, #28]
 8008f0e:	18d3      	adds	r3, r2, r3
 8008f10:	d527      	bpl.n	8008f62 <mktime+0x2ee>
 8008f12:	1e6b      	subs	r3, r5, #1
 8008f14:	0798      	lsls	r0, r3, #30
 8008f16:	d11e      	bne.n	8008f56 <mktime+0x2e2>
 8008f18:	2164      	movs	r1, #100	@ 0x64
 8008f1a:	fb93 f0f1 	sdiv	r0, r3, r1
 8008f1e:	fb01 3310 	mls	r3, r1, r0, r3
 8008f22:	b9db      	cbnz	r3, 8008f5c <mktime+0x2e8>
 8008f24:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8008f28:	f205 756b 	addw	r5, r5, #1899	@ 0x76b
 8008f2c:	fb95 f1f3 	sdiv	r1, r5, r3
 8008f30:	fb03 5511 	mls	r5, r3, r1, r5
 8008f34:	2d00      	cmp	r5, #0
 8008f36:	f240 136d 	movw	r3, #365	@ 0x16d
 8008f3a:	bf18      	it	ne
 8008f3c:	f44f 73b6 	movne.w	r3, #364	@ 0x16c
 8008f40:	61fb      	str	r3, [r7, #28]
 8008f42:	4416      	add	r6, r2
 8008f44:	e73c      	b.n	8008dc0 <mktime+0x14c>
 8008f46:	f04f 0b00 	mov.w	fp, #0
 8008f4a:	e7c0      	b.n	8008ece <mktime+0x25a>
 8008f4c:	1ac3      	subs	r3, r0, r3
 8008f4e:	e7c8      	b.n	8008ee2 <mktime+0x26e>
 8008f50:	f04f 32ff 	mov.w	r2, #4294967295
 8008f54:	e7da      	b.n	8008f0c <mktime+0x298>
 8008f56:	f44f 73b6 	mov.w	r3, #364	@ 0x16c
 8008f5a:	e7f1      	b.n	8008f40 <mktime+0x2cc>
 8008f5c:	f240 136d 	movw	r3, #365	@ 0x16d
 8008f60:	e7ee      	b.n	8008f40 <mktime+0x2cc>
 8008f62:	07a9      	lsls	r1, r5, #30
 8008f64:	d117      	bne.n	8008f96 <mktime+0x322>
 8008f66:	2064      	movs	r0, #100	@ 0x64
 8008f68:	fb95 f1f0 	sdiv	r1, r5, r0
 8008f6c:	fb00 5111 	mls	r1, r0, r1, r5
 8008f70:	b9a1      	cbnz	r1, 8008f9c <mktime+0x328>
 8008f72:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8008f76:	f205 756c 	addw	r5, r5, #1900	@ 0x76c
 8008f7a:	fb95 f0f1 	sdiv	r0, r5, r1
 8008f7e:	fb01 5510 	mls	r5, r1, r0, r5
 8008f82:	2d00      	cmp	r5, #0
 8008f84:	f240 116d 	movw	r1, #365	@ 0x16d
 8008f88:	bf08      	it	eq
 8008f8a:	f44f 71b7 	moveq.w	r1, #366	@ 0x16e
 8008f8e:	428b      	cmp	r3, r1
 8008f90:	bfa8      	it	ge
 8008f92:	1a5b      	subge	r3, r3, r1
 8008f94:	e7d4      	b.n	8008f40 <mktime+0x2cc>
 8008f96:	f240 116d 	movw	r1, #365	@ 0x16d
 8008f9a:	e7f8      	b.n	8008f8e <mktime+0x31a>
 8008f9c:	f44f 71b7 	mov.w	r1, #366	@ 0x16e
 8008fa0:	e7f5      	b.n	8008f8e <mktime+0x31a>
 8008fa2:	3607      	adds	r6, #7
 8008fa4:	e722      	b.n	8008dec <mktime+0x178>
 8008fa6:	bf00      	nop
 8008fa8:	0800d008 	.word	0x0800d008
 8008fac:	00015180 	.word	0x00015180
 8008fb0:	20006db8 	.word	0x20006db8
 8008fb4:	f04f 34ff 	mov.w	r4, #4294967295
 8008fb8:	46a0      	mov	r8, r4
 8008fba:	e71a      	b.n	8008df2 <mktime+0x17e>
 8008fbc:	f1ba 0f00 	cmp.w	sl, #0
 8008fc0:	dac1      	bge.n	8008f46 <mktime+0x2d2>
 8008fc2:	f04f 0b00 	mov.w	fp, #0
 8008fc6:	f8d9 3028 	ldr.w	r3, [r9, #40]	@ 0x28
 8008fca:	191c      	adds	r4, r3, r4
 8008fcc:	eb48 78e3 	adc.w	r8, r8, r3, asr #31
 8008fd0:	e701      	b.n	8008dd6 <mktime+0x162>
 8008fd2:	bf00      	nop

08008fd4 <__tzcalc_limits>:
 8008fd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008fd8:	4604      	mov	r4, r0
 8008fda:	f003 f89b 	bl	800c114 <__gettzinfo>
 8008fde:	f240 73b1 	movw	r3, #1969	@ 0x7b1
 8008fe2:	429c      	cmp	r4, r3
 8008fe4:	f340 8099 	ble.w	800911a <__tzcalc_limits+0x146>
 8008fe8:	f46f 67f6 	mvn.w	r7, #1968	@ 0x7b0
 8008fec:	19e5      	adds	r5, r4, r7
 8008fee:	f2a4 73b2 	subw	r3, r4, #1970	@ 0x7b2
 8008ff2:	f240 126d 	movw	r2, #365	@ 0x16d
 8008ff6:	10ad      	asrs	r5, r5, #2
 8008ff8:	fb02 5503 	mla	r5, r2, r3, r5
 8008ffc:	f46f 6cc8 	mvn.w	ip, #1600	@ 0x640
 8009000:	f06f 0263 	mvn.w	r2, #99	@ 0x63
 8009004:	f2a4 736d 	subw	r3, r4, #1901	@ 0x76d
 8009008:	4f45      	ldr	r7, [pc, #276]	@ (8009120 <__tzcalc_limits+0x14c>)
 800900a:	fb93 f3f2 	sdiv	r3, r3, r2
 800900e:	441d      	add	r5, r3
 8009010:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8009014:	eb04 030c 	add.w	r3, r4, ip
 8009018:	6044      	str	r4, [r0, #4]
 800901a:	fbb3 f3f2 	udiv	r3, r3, r2
 800901e:	4601      	mov	r1, r0
 8009020:	441d      	add	r5, r3
 8009022:	f100 0c50 	add.w	ip, r0, #80	@ 0x50
 8009026:	7a0b      	ldrb	r3, [r1, #8]
 8009028:	694a      	ldr	r2, [r1, #20]
 800902a:	2b4a      	cmp	r3, #74	@ 0x4a
 800902c:	d133      	bne.n	8009096 <__tzcalc_limits+0xc2>
 800902e:	07a6      	lsls	r6, r4, #30
 8009030:	eb05 0302 	add.w	r3, r5, r2
 8009034:	d106      	bne.n	8009044 <__tzcalc_limits+0x70>
 8009036:	f04f 0e64 	mov.w	lr, #100	@ 0x64
 800903a:	fb94 f6fe 	sdiv	r6, r4, lr
 800903e:	fb0e 4616 	mls	r6, lr, r6, r4
 8009042:	b936      	cbnz	r6, 8009052 <__tzcalc_limits+0x7e>
 8009044:	f44f 7ec8 	mov.w	lr, #400	@ 0x190
 8009048:	fb94 f6fe 	sdiv	r6, r4, lr
 800904c:	fb0e 4616 	mls	r6, lr, r6, r4
 8009050:	b9fe      	cbnz	r6, 8009092 <__tzcalc_limits+0xbe>
 8009052:	2a3b      	cmp	r2, #59	@ 0x3b
 8009054:	bfd4      	ite	le
 8009056:	2200      	movle	r2, #0
 8009058:	2201      	movgt	r2, #1
 800905a:	4413      	add	r3, r2
 800905c:	3b01      	subs	r3, #1
 800905e:	698a      	ldr	r2, [r1, #24]
 8009060:	17d6      	asrs	r6, r2, #31
 8009062:	fbc3 2607 	smlal	r2, r6, r3, r7
 8009066:	6a8b      	ldr	r3, [r1, #40]	@ 0x28
 8009068:	18d2      	adds	r2, r2, r3
 800906a:	eb46 73e3 	adc.w	r3, r6, r3, asr #31
 800906e:	e9c1 2308 	strd	r2, r3, [r1, #32]
 8009072:	3128      	adds	r1, #40	@ 0x28
 8009074:	458c      	cmp	ip, r1
 8009076:	d1d6      	bne.n	8009026 <__tzcalc_limits+0x52>
 8009078:	e9d0 4308 	ldrd	r4, r3, [r0, #32]
 800907c:	e9d0 1212 	ldrd	r1, r2, [r0, #72]	@ 0x48
 8009080:	428c      	cmp	r4, r1
 8009082:	4193      	sbcs	r3, r2
 8009084:	bfb4      	ite	lt
 8009086:	2301      	movlt	r3, #1
 8009088:	2300      	movge	r3, #0
 800908a:	6003      	str	r3, [r0, #0]
 800908c:	2001      	movs	r0, #1
 800908e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009092:	2200      	movs	r2, #0
 8009094:	e7e1      	b.n	800905a <__tzcalc_limits+0x86>
 8009096:	2b44      	cmp	r3, #68	@ 0x44
 8009098:	d101      	bne.n	800909e <__tzcalc_limits+0xca>
 800909a:	18ab      	adds	r3, r5, r2
 800909c:	e7df      	b.n	800905e <__tzcalc_limits+0x8a>
 800909e:	07a3      	lsls	r3, r4, #30
 80090a0:	d105      	bne.n	80090ae <__tzcalc_limits+0xda>
 80090a2:	2664      	movs	r6, #100	@ 0x64
 80090a4:	fb94 f3f6 	sdiv	r3, r4, r6
 80090a8:	fb06 4313 	mls	r3, r6, r3, r4
 80090ac:	bb7b      	cbnz	r3, 800910e <__tzcalc_limits+0x13a>
 80090ae:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 80090b2:	fb94 f6f3 	sdiv	r6, r4, r3
 80090b6:	fb03 4616 	mls	r6, r3, r6, r4
 80090ba:	fab6 f686 	clz	r6, r6
 80090be:	0976      	lsrs	r6, r6, #5
 80090c0:	f8df e060 	ldr.w	lr, [pc, #96]	@ 8009124 <__tzcalc_limits+0x150>
 80090c4:	f8d1 900c 	ldr.w	r9, [r1, #12]
 80090c8:	f04f 0a30 	mov.w	sl, #48	@ 0x30
 80090cc:	462b      	mov	r3, r5
 80090ce:	f04f 0800 	mov.w	r8, #0
 80090d2:	fb0a e606 	mla	r6, sl, r6, lr
 80090d6:	f108 0801 	add.w	r8, r8, #1
 80090da:	45c1      	cmp	r9, r8
 80090dc:	f856 e028 	ldr.w	lr, [r6, r8, lsl #2]
 80090e0:	dc17      	bgt.n	8009112 <__tzcalc_limits+0x13e>
 80090e2:	f103 0804 	add.w	r8, r3, #4
 80090e6:	2607      	movs	r6, #7
 80090e8:	fb98 f6f6 	sdiv	r6, r8, r6
 80090ec:	ebc6 06c6 	rsb	r6, r6, r6, lsl #3
 80090f0:	eba8 0606 	sub.w	r6, r8, r6
 80090f4:	1b92      	subs	r2, r2, r6
 80090f6:	690e      	ldr	r6, [r1, #16]
 80090f8:	f106 36ff 	add.w	r6, r6, #4294967295
 80090fc:	bf48      	it	mi
 80090fe:	3207      	addmi	r2, #7
 8009100:	ebc6 06c6 	rsb	r6, r6, r6, lsl #3
 8009104:	4432      	add	r2, r6
 8009106:	4572      	cmp	r2, lr
 8009108:	da05      	bge.n	8009116 <__tzcalc_limits+0x142>
 800910a:	4413      	add	r3, r2
 800910c:	e7a7      	b.n	800905e <__tzcalc_limits+0x8a>
 800910e:	2601      	movs	r6, #1
 8009110:	e7d6      	b.n	80090c0 <__tzcalc_limits+0xec>
 8009112:	4473      	add	r3, lr
 8009114:	e7df      	b.n	80090d6 <__tzcalc_limits+0x102>
 8009116:	3a07      	subs	r2, #7
 8009118:	e7f5      	b.n	8009106 <__tzcalc_limits+0x132>
 800911a:	2000      	movs	r0, #0
 800911c:	e7b7      	b.n	800908e <__tzcalc_limits+0xba>
 800911e:	bf00      	nop
 8009120:	00015180 	.word	0x00015180
 8009124:	0800d328 	.word	0x0800d328

08009128 <__tz_lock>:
 8009128:	4801      	ldr	r0, [pc, #4]	@ (8009130 <__tz_lock+0x8>)
 800912a:	f000 bab6 	b.w	800969a <__retarget_lock_acquire>
 800912e:	bf00      	nop
 8009130:	20006dc0 	.word	0x20006dc0

08009134 <__tz_unlock>:
 8009134:	4801      	ldr	r0, [pc, #4]	@ (800913c <__tz_unlock+0x8>)
 8009136:	f000 bab2 	b.w	800969e <__retarget_lock_release>
 800913a:	bf00      	nop
 800913c:	20006dc0 	.word	0x20006dc0

08009140 <_tzset_unlocked>:
 8009140:	4b01      	ldr	r3, [pc, #4]	@ (8009148 <_tzset_unlocked+0x8>)
 8009142:	6818      	ldr	r0, [r3, #0]
 8009144:	f000 b802 	b.w	800914c <_tzset_unlocked_r>
 8009148:	2000019c 	.word	0x2000019c

0800914c <_tzset_unlocked_r>:
 800914c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009150:	b08d      	sub	sp, #52	@ 0x34
 8009152:	4607      	mov	r7, r0
 8009154:	f002 ffde 	bl	800c114 <__gettzinfo>
 8009158:	49bc      	ldr	r1, [pc, #752]	@ (800944c <_tzset_unlocked_r+0x300>)
 800915a:	4dbd      	ldr	r5, [pc, #756]	@ (8009450 <_tzset_unlocked_r+0x304>)
 800915c:	4604      	mov	r4, r0
 800915e:	4638      	mov	r0, r7
 8009160:	f001 fcda 	bl	800ab18 <_getenv_r>
 8009164:	4606      	mov	r6, r0
 8009166:	bb10      	cbnz	r0, 80091ae <_tzset_unlocked_r+0x62>
 8009168:	4bba      	ldr	r3, [pc, #744]	@ (8009454 <_tzset_unlocked_r+0x308>)
 800916a:	4abb      	ldr	r2, [pc, #748]	@ (8009458 <_tzset_unlocked_r+0x30c>)
 800916c:	6018      	str	r0, [r3, #0]
 800916e:	4bbb      	ldr	r3, [pc, #748]	@ (800945c <_tzset_unlocked_r+0x310>)
 8009170:	62a0      	str	r0, [r4, #40]	@ 0x28
 8009172:	6018      	str	r0, [r3, #0]
 8009174:	4bba      	ldr	r3, [pc, #744]	@ (8009460 <_tzset_unlocked_r+0x314>)
 8009176:	6520      	str	r0, [r4, #80]	@ 0x50
 8009178:	e9c3 2200 	strd	r2, r2, [r3]
 800917c:	214a      	movs	r1, #74	@ 0x4a
 800917e:	2200      	movs	r2, #0
 8009180:	2300      	movs	r3, #0
 8009182:	e9c4 0003 	strd	r0, r0, [r4, #12]
 8009186:	e9c4 0005 	strd	r0, r0, [r4, #20]
 800918a:	e9c4 000d 	strd	r0, r0, [r4, #52]	@ 0x34
 800918e:	e9c4 000f 	strd	r0, r0, [r4, #60]	@ 0x3c
 8009192:	e9c4 2308 	strd	r2, r3, [r4, #32]
 8009196:	e9c4 2312 	strd	r2, r3, [r4, #72]	@ 0x48
 800919a:	6828      	ldr	r0, [r5, #0]
 800919c:	7221      	strb	r1, [r4, #8]
 800919e:	f884 1030 	strb.w	r1, [r4, #48]	@ 0x30
 80091a2:	f7fd fcef 	bl	8006b84 <free>
 80091a6:	602e      	str	r6, [r5, #0]
 80091a8:	b00d      	add	sp, #52	@ 0x34
 80091aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091ae:	6829      	ldr	r1, [r5, #0]
 80091b0:	2900      	cmp	r1, #0
 80091b2:	f040 808e 	bne.w	80092d2 <_tzset_unlocked_r+0x186>
 80091b6:	6828      	ldr	r0, [r5, #0]
 80091b8:	f7fd fce4 	bl	8006b84 <free>
 80091bc:	4630      	mov	r0, r6
 80091be:	f7f7 f867 	bl	8000290 <strlen>
 80091c2:	1c41      	adds	r1, r0, #1
 80091c4:	4638      	mov	r0, r7
 80091c6:	f7fd fd07 	bl	8006bd8 <_malloc_r>
 80091ca:	6028      	str	r0, [r5, #0]
 80091cc:	2800      	cmp	r0, #0
 80091ce:	f040 8086 	bne.w	80092de <_tzset_unlocked_r+0x192>
 80091d2:	4aa2      	ldr	r2, [pc, #648]	@ (800945c <_tzset_unlocked_r+0x310>)
 80091d4:	f8df 8288 	ldr.w	r8, [pc, #648]	@ 8009460 <_tzset_unlocked_r+0x314>
 80091d8:	f8df a278 	ldr.w	sl, [pc, #632]	@ 8009454 <_tzset_unlocked_r+0x308>
 80091dc:	2300      	movs	r3, #0
 80091de:	6013      	str	r3, [r2, #0]
 80091e0:	4aa0      	ldr	r2, [pc, #640]	@ (8009464 <_tzset_unlocked_r+0x318>)
 80091e2:	f8ca 3000 	str.w	r3, [sl]
 80091e6:	2000      	movs	r0, #0
 80091e8:	2100      	movs	r1, #0
 80091ea:	e9c8 2200 	strd	r2, r2, [r8]
 80091ee:	e9c4 3303 	strd	r3, r3, [r4, #12]
 80091f2:	e9c4 3305 	strd	r3, r3, [r4, #20]
 80091f6:	e9c4 0108 	strd	r0, r1, [r4, #32]
 80091fa:	e9c4 330d 	strd	r3, r3, [r4, #52]	@ 0x34
 80091fe:	e9c4 330f 	strd	r3, r3, [r4, #60]	@ 0x3c
 8009202:	e9c4 0112 	strd	r0, r1, [r4, #72]	@ 0x48
 8009206:	224a      	movs	r2, #74	@ 0x4a
 8009208:	7222      	strb	r2, [r4, #8]
 800920a:	62a3      	str	r3, [r4, #40]	@ 0x28
 800920c:	f884 2030 	strb.w	r2, [r4, #48]	@ 0x30
 8009210:	6523      	str	r3, [r4, #80]	@ 0x50
 8009212:	7833      	ldrb	r3, [r6, #0]
 8009214:	2b3a      	cmp	r3, #58	@ 0x3a
 8009216:	bf08      	it	eq
 8009218:	3601      	addeq	r6, #1
 800921a:	7833      	ldrb	r3, [r6, #0]
 800921c:	2b3c      	cmp	r3, #60	@ 0x3c
 800921e:	d162      	bne.n	80092e6 <_tzset_unlocked_r+0x19a>
 8009220:	1c75      	adds	r5, r6, #1
 8009222:	4a91      	ldr	r2, [pc, #580]	@ (8009468 <_tzset_unlocked_r+0x31c>)
 8009224:	4991      	ldr	r1, [pc, #580]	@ (800946c <_tzset_unlocked_r+0x320>)
 8009226:	ab0a      	add	r3, sp, #40	@ 0x28
 8009228:	4628      	mov	r0, r5
 800922a:	f7ff fb69 	bl	8008900 <siscanf>
 800922e:	2800      	cmp	r0, #0
 8009230:	ddba      	ble.n	80091a8 <_tzset_unlocked_r+0x5c>
 8009232:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009234:	1eda      	subs	r2, r3, #3
 8009236:	2a07      	cmp	r2, #7
 8009238:	d8b6      	bhi.n	80091a8 <_tzset_unlocked_r+0x5c>
 800923a:	5ceb      	ldrb	r3, [r5, r3]
 800923c:	2b3e      	cmp	r3, #62	@ 0x3e
 800923e:	d1b3      	bne.n	80091a8 <_tzset_unlocked_r+0x5c>
 8009240:	3602      	adds	r6, #2
 8009242:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009244:	18f5      	adds	r5, r6, r3
 8009246:	5cf3      	ldrb	r3, [r6, r3]
 8009248:	2b2d      	cmp	r3, #45	@ 0x2d
 800924a:	d15a      	bne.n	8009302 <_tzset_unlocked_r+0x1b6>
 800924c:	3501      	adds	r5, #1
 800924e:	f04f 39ff 	mov.w	r9, #4294967295
 8009252:	2300      	movs	r3, #0
 8009254:	f8ad 301e 	strh.w	r3, [sp, #30]
 8009258:	f8ad 3020 	strh.w	r3, [sp, #32]
 800925c:	af08      	add	r7, sp, #32
 800925e:	ab0a      	add	r3, sp, #40	@ 0x28
 8009260:	e9cd 3701 	strd	r3, r7, [sp, #4]
 8009264:	9303      	str	r3, [sp, #12]
 8009266:	f10d 031e 	add.w	r3, sp, #30
 800926a:	9300      	str	r3, [sp, #0]
 800926c:	4980      	ldr	r1, [pc, #512]	@ (8009470 <_tzset_unlocked_r+0x324>)
 800926e:	ab0a      	add	r3, sp, #40	@ 0x28
 8009270:	aa07      	add	r2, sp, #28
 8009272:	4628      	mov	r0, r5
 8009274:	f7ff fb44 	bl	8008900 <siscanf>
 8009278:	2800      	cmp	r0, #0
 800927a:	dd95      	ble.n	80091a8 <_tzset_unlocked_r+0x5c>
 800927c:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8009280:	f8bd 6020 	ldrh.w	r6, [sp, #32]
 8009284:	223c      	movs	r2, #60	@ 0x3c
 8009286:	fb02 6603 	mla	r6, r2, r3, r6
 800928a:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 800928e:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 8009292:	fb02 6603 	mla	r6, r2, r3, r6
 8009296:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009298:	fb09 f606 	mul.w	r6, r9, r6
 800929c:	eb05 0903 	add.w	r9, r5, r3
 80092a0:	5ceb      	ldrb	r3, [r5, r3]
 80092a2:	2b3c      	cmp	r3, #60	@ 0x3c
 80092a4:	f040 80ee 	bne.w	8009484 <_tzset_unlocked_r+0x338>
 80092a8:	f109 0501 	add.w	r5, r9, #1
 80092ac:	4a71      	ldr	r2, [pc, #452]	@ (8009474 <_tzset_unlocked_r+0x328>)
 80092ae:	496f      	ldr	r1, [pc, #444]	@ (800946c <_tzset_unlocked_r+0x320>)
 80092b0:	ab0a      	add	r3, sp, #40	@ 0x28
 80092b2:	4628      	mov	r0, r5
 80092b4:	f7ff fb24 	bl	8008900 <siscanf>
 80092b8:	2800      	cmp	r0, #0
 80092ba:	dc28      	bgt.n	800930e <_tzset_unlocked_r+0x1c2>
 80092bc:	f899 3001 	ldrb.w	r3, [r9, #1]
 80092c0:	2b3e      	cmp	r3, #62	@ 0x3e
 80092c2:	d124      	bne.n	800930e <_tzset_unlocked_r+0x1c2>
 80092c4:	4b68      	ldr	r3, [pc, #416]	@ (8009468 <_tzset_unlocked_r+0x31c>)
 80092c6:	62a6      	str	r6, [r4, #40]	@ 0x28
 80092c8:	e9c8 3300 	strd	r3, r3, [r8]
 80092cc:	f8ca 6000 	str.w	r6, [sl]
 80092d0:	e76a      	b.n	80091a8 <_tzset_unlocked_r+0x5c>
 80092d2:	f7f6 ff7d 	bl	80001d0 <strcmp>
 80092d6:	2800      	cmp	r0, #0
 80092d8:	f47f af6d 	bne.w	80091b6 <_tzset_unlocked_r+0x6a>
 80092dc:	e764      	b.n	80091a8 <_tzset_unlocked_r+0x5c>
 80092de:	4631      	mov	r1, r6
 80092e0:	f000 f9df 	bl	80096a2 <strcpy>
 80092e4:	e775      	b.n	80091d2 <_tzset_unlocked_r+0x86>
 80092e6:	4a60      	ldr	r2, [pc, #384]	@ (8009468 <_tzset_unlocked_r+0x31c>)
 80092e8:	4963      	ldr	r1, [pc, #396]	@ (8009478 <_tzset_unlocked_r+0x32c>)
 80092ea:	ab0a      	add	r3, sp, #40	@ 0x28
 80092ec:	4630      	mov	r0, r6
 80092ee:	f7ff fb07 	bl	8008900 <siscanf>
 80092f2:	2800      	cmp	r0, #0
 80092f4:	f77f af58 	ble.w	80091a8 <_tzset_unlocked_r+0x5c>
 80092f8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80092fa:	3b03      	subs	r3, #3
 80092fc:	2b07      	cmp	r3, #7
 80092fe:	d9a0      	bls.n	8009242 <_tzset_unlocked_r+0xf6>
 8009300:	e752      	b.n	80091a8 <_tzset_unlocked_r+0x5c>
 8009302:	2b2b      	cmp	r3, #43	@ 0x2b
 8009304:	bf08      	it	eq
 8009306:	3501      	addeq	r5, #1
 8009308:	f04f 0901 	mov.w	r9, #1
 800930c:	e7a1      	b.n	8009252 <_tzset_unlocked_r+0x106>
 800930e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009310:	1eda      	subs	r2, r3, #3
 8009312:	2a07      	cmp	r2, #7
 8009314:	f63f af48 	bhi.w	80091a8 <_tzset_unlocked_r+0x5c>
 8009318:	5ceb      	ldrb	r3, [r5, r3]
 800931a:	2b3e      	cmp	r3, #62	@ 0x3e
 800931c:	f47f af44 	bne.w	80091a8 <_tzset_unlocked_r+0x5c>
 8009320:	f109 0902 	add.w	r9, r9, #2
 8009324:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009326:	eb09 0503 	add.w	r5, r9, r3
 800932a:	f819 3003 	ldrb.w	r3, [r9, r3]
 800932e:	2b2d      	cmp	r3, #45	@ 0x2d
 8009330:	f040 80b7 	bne.w	80094a2 <_tzset_unlocked_r+0x356>
 8009334:	3501      	adds	r5, #1
 8009336:	f04f 39ff 	mov.w	r9, #4294967295
 800933a:	2300      	movs	r3, #0
 800933c:	f8ad 301c 	strh.w	r3, [sp, #28]
 8009340:	f8ad 301e 	strh.w	r3, [sp, #30]
 8009344:	f8ad 3020 	strh.w	r3, [sp, #32]
 8009348:	930a      	str	r3, [sp, #40]	@ 0x28
 800934a:	ab0a      	add	r3, sp, #40	@ 0x28
 800934c:	e9cd 7302 	strd	r7, r3, [sp, #8]
 8009350:	9301      	str	r3, [sp, #4]
 8009352:	f10d 031e 	add.w	r3, sp, #30
 8009356:	9300      	str	r3, [sp, #0]
 8009358:	4945      	ldr	r1, [pc, #276]	@ (8009470 <_tzset_unlocked_r+0x324>)
 800935a:	ab0a      	add	r3, sp, #40	@ 0x28
 800935c:	aa07      	add	r2, sp, #28
 800935e:	4628      	mov	r0, r5
 8009360:	f7ff face 	bl	8008900 <siscanf>
 8009364:	2800      	cmp	r0, #0
 8009366:	f300 80a2 	bgt.w	80094ae <_tzset_unlocked_r+0x362>
 800936a:	f5a6 6361 	sub.w	r3, r6, #3600	@ 0xe10
 800936e:	9304      	str	r3, [sp, #16]
 8009370:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009372:	4627      	mov	r7, r4
 8009374:	441d      	add	r5, r3
 8009376:	f04f 0b00 	mov.w	fp, #0
 800937a:	782b      	ldrb	r3, [r5, #0]
 800937c:	2b2c      	cmp	r3, #44	@ 0x2c
 800937e:	bf08      	it	eq
 8009380:	3501      	addeq	r5, #1
 8009382:	f895 9000 	ldrb.w	r9, [r5]
 8009386:	f1b9 0f4d 	cmp.w	r9, #77	@ 0x4d
 800938a:	f040 80a3 	bne.w	80094d4 <_tzset_unlocked_r+0x388>
 800938e:	ab0a      	add	r3, sp, #40	@ 0x28
 8009390:	f10d 0226 	add.w	r2, sp, #38	@ 0x26
 8009394:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8009398:	aa09      	add	r2, sp, #36	@ 0x24
 800939a:	9200      	str	r2, [sp, #0]
 800939c:	4937      	ldr	r1, [pc, #220]	@ (800947c <_tzset_unlocked_r+0x330>)
 800939e:	9303      	str	r3, [sp, #12]
 80093a0:	f10d 0222 	add.w	r2, sp, #34	@ 0x22
 80093a4:	4628      	mov	r0, r5
 80093a6:	f7ff faab 	bl	8008900 <siscanf>
 80093aa:	2803      	cmp	r0, #3
 80093ac:	f47f aefc 	bne.w	80091a8 <_tzset_unlocked_r+0x5c>
 80093b0:	f8bd 1022 	ldrh.w	r1, [sp, #34]	@ 0x22
 80093b4:	1e4b      	subs	r3, r1, #1
 80093b6:	2b0b      	cmp	r3, #11
 80093b8:	f63f aef6 	bhi.w	80091a8 <_tzset_unlocked_r+0x5c>
 80093bc:	f8bd 2024 	ldrh.w	r2, [sp, #36]	@ 0x24
 80093c0:	1e53      	subs	r3, r2, #1
 80093c2:	2b04      	cmp	r3, #4
 80093c4:	f63f aef0 	bhi.w	80091a8 <_tzset_unlocked_r+0x5c>
 80093c8:	f8bd 3026 	ldrh.w	r3, [sp, #38]	@ 0x26
 80093cc:	2b06      	cmp	r3, #6
 80093ce:	f63f aeeb 	bhi.w	80091a8 <_tzset_unlocked_r+0x5c>
 80093d2:	e9c7 1203 	strd	r1, r2, [r7, #12]
 80093d6:	f887 9008 	strb.w	r9, [r7, #8]
 80093da:	617b      	str	r3, [r7, #20]
 80093dc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80093de:	eb05 0903 	add.w	r9, r5, r3
 80093e2:	2500      	movs	r5, #0
 80093e4:	f04f 0302 	mov.w	r3, #2
 80093e8:	f8ad 301c 	strh.w	r3, [sp, #28]
 80093ec:	f8ad 501e 	strh.w	r5, [sp, #30]
 80093f0:	f8ad 5020 	strh.w	r5, [sp, #32]
 80093f4:	950a      	str	r5, [sp, #40]	@ 0x28
 80093f6:	f899 3000 	ldrb.w	r3, [r9]
 80093fa:	2b2f      	cmp	r3, #47	@ 0x2f
 80093fc:	f040 8096 	bne.w	800952c <_tzset_unlocked_r+0x3e0>
 8009400:	ab0a      	add	r3, sp, #40	@ 0x28
 8009402:	aa08      	add	r2, sp, #32
 8009404:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8009408:	f10d 021e 	add.w	r2, sp, #30
 800940c:	9200      	str	r2, [sp, #0]
 800940e:	491c      	ldr	r1, [pc, #112]	@ (8009480 <_tzset_unlocked_r+0x334>)
 8009410:	9303      	str	r3, [sp, #12]
 8009412:	aa07      	add	r2, sp, #28
 8009414:	4648      	mov	r0, r9
 8009416:	f7ff fa73 	bl	8008900 <siscanf>
 800941a:	42a8      	cmp	r0, r5
 800941c:	f300 8086 	bgt.w	800952c <_tzset_unlocked_r+0x3e0>
 8009420:	214a      	movs	r1, #74	@ 0x4a
 8009422:	2200      	movs	r2, #0
 8009424:	2300      	movs	r3, #0
 8009426:	e9c4 5503 	strd	r5, r5, [r4, #12]
 800942a:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800942e:	e9c4 2308 	strd	r2, r3, [r4, #32]
 8009432:	e9c4 550d 	strd	r5, r5, [r4, #52]	@ 0x34
 8009436:	e9c4 550f 	strd	r5, r5, [r4, #60]	@ 0x3c
 800943a:	e9c4 2312 	strd	r2, r3, [r4, #72]	@ 0x48
 800943e:	7221      	strb	r1, [r4, #8]
 8009440:	62a5      	str	r5, [r4, #40]	@ 0x28
 8009442:	f884 1030 	strb.w	r1, [r4, #48]	@ 0x30
 8009446:	6525      	str	r5, [r4, #80]	@ 0x50
 8009448:	e6ae      	b.n	80091a8 <_tzset_unlocked_r+0x5c>
 800944a:	bf00      	nop
 800944c:	0800d068 	.word	0x0800d068
 8009450:	20006d98 	.word	0x20006d98
 8009454:	20006db4 	.word	0x20006db4
 8009458:	0800d06b 	.word	0x0800d06b
 800945c:	20006db8 	.word	0x20006db8
 8009460:	20000028 	.word	0x20000028
 8009464:	0800ce24 	.word	0x0800ce24
 8009468:	20006da8 	.word	0x20006da8
 800946c:	0800d06f 	.word	0x0800d06f
 8009470:	0800d0a4 	.word	0x0800d0a4
 8009474:	20006d9c 	.word	0x20006d9c
 8009478:	0800d082 	.word	0x0800d082
 800947c:	0800d090 	.word	0x0800d090
 8009480:	0800d0a3 	.word	0x0800d0a3
 8009484:	4a3e      	ldr	r2, [pc, #248]	@ (8009580 <_tzset_unlocked_r+0x434>)
 8009486:	493f      	ldr	r1, [pc, #252]	@ (8009584 <_tzset_unlocked_r+0x438>)
 8009488:	ab0a      	add	r3, sp, #40	@ 0x28
 800948a:	4648      	mov	r0, r9
 800948c:	f7ff fa38 	bl	8008900 <siscanf>
 8009490:	2800      	cmp	r0, #0
 8009492:	f77f af17 	ble.w	80092c4 <_tzset_unlocked_r+0x178>
 8009496:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009498:	3b03      	subs	r3, #3
 800949a:	2b07      	cmp	r3, #7
 800949c:	f67f af42 	bls.w	8009324 <_tzset_unlocked_r+0x1d8>
 80094a0:	e682      	b.n	80091a8 <_tzset_unlocked_r+0x5c>
 80094a2:	2b2b      	cmp	r3, #43	@ 0x2b
 80094a4:	bf08      	it	eq
 80094a6:	3501      	addeq	r5, #1
 80094a8:	f04f 0901 	mov.w	r9, #1
 80094ac:	e745      	b.n	800933a <_tzset_unlocked_r+0x1ee>
 80094ae:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 80094b2:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 80094b6:	213c      	movs	r1, #60	@ 0x3c
 80094b8:	fb01 3302 	mla	r3, r1, r2, r3
 80094bc:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 80094c0:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 80094c4:	fb01 3302 	mla	r3, r1, r2, r3
 80094c8:	fb09 f303 	mul.w	r3, r9, r3
 80094cc:	e74f      	b.n	800936e <_tzset_unlocked_r+0x222>
 80094ce:	f04f 0b01 	mov.w	fp, #1
 80094d2:	e752      	b.n	800937a <_tzset_unlocked_r+0x22e>
 80094d4:	f1b9 0f4a 	cmp.w	r9, #74	@ 0x4a
 80094d8:	bf06      	itte	eq
 80094da:	3501      	addeq	r5, #1
 80094dc:	464b      	moveq	r3, r9
 80094de:	2344      	movne	r3, #68	@ 0x44
 80094e0:	220a      	movs	r2, #10
 80094e2:	a90b      	add	r1, sp, #44	@ 0x2c
 80094e4:	4628      	mov	r0, r5
 80094e6:	9305      	str	r3, [sp, #20]
 80094e8:	f002 f852 	bl	800b590 <strtoul>
 80094ec:	f8dd 902c 	ldr.w	r9, [sp, #44]	@ 0x2c
 80094f0:	9b05      	ldr	r3, [sp, #20]
 80094f2:	f8ad 0026 	strh.w	r0, [sp, #38]	@ 0x26
 80094f6:	45a9      	cmp	r9, r5
 80094f8:	d114      	bne.n	8009524 <_tzset_unlocked_r+0x3d8>
 80094fa:	234d      	movs	r3, #77	@ 0x4d
 80094fc:	f1bb 0f00 	cmp.w	fp, #0
 8009500:	d107      	bne.n	8009512 <_tzset_unlocked_r+0x3c6>
 8009502:	7223      	strb	r3, [r4, #8]
 8009504:	2103      	movs	r1, #3
 8009506:	2302      	movs	r3, #2
 8009508:	e9c4 1303 	strd	r1, r3, [r4, #12]
 800950c:	f8c4 b014 	str.w	fp, [r4, #20]
 8009510:	e767      	b.n	80093e2 <_tzset_unlocked_r+0x296>
 8009512:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
 8009516:	220b      	movs	r2, #11
 8009518:	2301      	movs	r3, #1
 800951a:	e9c4 230d 	strd	r2, r3, [r4, #52]	@ 0x34
 800951e:	2300      	movs	r3, #0
 8009520:	63e3      	str	r3, [r4, #60]	@ 0x3c
 8009522:	e75e      	b.n	80093e2 <_tzset_unlocked_r+0x296>
 8009524:	b280      	uxth	r0, r0
 8009526:	723b      	strb	r3, [r7, #8]
 8009528:	6178      	str	r0, [r7, #20]
 800952a:	e75a      	b.n	80093e2 <_tzset_unlocked_r+0x296>
 800952c:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8009530:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8009534:	213c      	movs	r1, #60	@ 0x3c
 8009536:	fb01 3302 	mla	r3, r1, r2, r3
 800953a:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 800953e:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 8009542:	fb01 3302 	mla	r3, r1, r2, r3
 8009546:	61bb      	str	r3, [r7, #24]
 8009548:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 800954a:	3728      	adds	r7, #40	@ 0x28
 800954c:	444d      	add	r5, r9
 800954e:	f1bb 0f00 	cmp.w	fp, #0
 8009552:	d0bc      	beq.n	80094ce <_tzset_unlocked_r+0x382>
 8009554:	9b04      	ldr	r3, [sp, #16]
 8009556:	6523      	str	r3, [r4, #80]	@ 0x50
 8009558:	4b0b      	ldr	r3, [pc, #44]	@ (8009588 <_tzset_unlocked_r+0x43c>)
 800955a:	f8c8 3000 	str.w	r3, [r8]
 800955e:	6860      	ldr	r0, [r4, #4]
 8009560:	4b07      	ldr	r3, [pc, #28]	@ (8009580 <_tzset_unlocked_r+0x434>)
 8009562:	62a6      	str	r6, [r4, #40]	@ 0x28
 8009564:	f8c8 3004 	str.w	r3, [r8, #4]
 8009568:	f7ff fd34 	bl	8008fd4 <__tzcalc_limits>
 800956c:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800956e:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8009570:	f8ca 2000 	str.w	r2, [sl]
 8009574:	1a9b      	subs	r3, r3, r2
 8009576:	4a05      	ldr	r2, [pc, #20]	@ (800958c <_tzset_unlocked_r+0x440>)
 8009578:	bf18      	it	ne
 800957a:	2301      	movne	r3, #1
 800957c:	6013      	str	r3, [r2, #0]
 800957e:	e613      	b.n	80091a8 <_tzset_unlocked_r+0x5c>
 8009580:	20006d9c 	.word	0x20006d9c
 8009584:	0800d082 	.word	0x0800d082
 8009588:	20006da8 	.word	0x20006da8
 800958c:	20006db8 	.word	0x20006db8

08009590 <_localeconv_r>:
 8009590:	4800      	ldr	r0, [pc, #0]	@ (8009594 <_localeconv_r+0x4>)
 8009592:	4770      	bx	lr
 8009594:	20000120 	.word	0x20000120

08009598 <_close_r>:
 8009598:	b538      	push	{r3, r4, r5, lr}
 800959a:	4d06      	ldr	r5, [pc, #24]	@ (80095b4 <_close_r+0x1c>)
 800959c:	2300      	movs	r3, #0
 800959e:	4604      	mov	r4, r0
 80095a0:	4608      	mov	r0, r1
 80095a2:	602b      	str	r3, [r5, #0]
 80095a4:	f7f8 ff70 	bl	8002488 <_close>
 80095a8:	1c43      	adds	r3, r0, #1
 80095aa:	d102      	bne.n	80095b2 <_close_r+0x1a>
 80095ac:	682b      	ldr	r3, [r5, #0]
 80095ae:	b103      	cbz	r3, 80095b2 <_close_r+0x1a>
 80095b0:	6023      	str	r3, [r4, #0]
 80095b2:	bd38      	pop	{r3, r4, r5, pc}
 80095b4:	20006dbc 	.word	0x20006dbc

080095b8 <_lseek_r>:
 80095b8:	b538      	push	{r3, r4, r5, lr}
 80095ba:	4d07      	ldr	r5, [pc, #28]	@ (80095d8 <_lseek_r+0x20>)
 80095bc:	4604      	mov	r4, r0
 80095be:	4608      	mov	r0, r1
 80095c0:	4611      	mov	r1, r2
 80095c2:	2200      	movs	r2, #0
 80095c4:	602a      	str	r2, [r5, #0]
 80095c6:	461a      	mov	r2, r3
 80095c8:	f7f8 ff68 	bl	800249c <_lseek>
 80095cc:	1c43      	adds	r3, r0, #1
 80095ce:	d102      	bne.n	80095d6 <_lseek_r+0x1e>
 80095d0:	682b      	ldr	r3, [r5, #0]
 80095d2:	b103      	cbz	r3, 80095d6 <_lseek_r+0x1e>
 80095d4:	6023      	str	r3, [r4, #0]
 80095d6:	bd38      	pop	{r3, r4, r5, pc}
 80095d8:	20006dbc 	.word	0x20006dbc

080095dc <_read_r>:
 80095dc:	b538      	push	{r3, r4, r5, lr}
 80095de:	4d07      	ldr	r5, [pc, #28]	@ (80095fc <_read_r+0x20>)
 80095e0:	4604      	mov	r4, r0
 80095e2:	4608      	mov	r0, r1
 80095e4:	4611      	mov	r1, r2
 80095e6:	2200      	movs	r2, #0
 80095e8:	602a      	str	r2, [r5, #0]
 80095ea:	461a      	mov	r2, r3
 80095ec:	f7f8 ff30 	bl	8002450 <_read>
 80095f0:	1c43      	adds	r3, r0, #1
 80095f2:	d102      	bne.n	80095fa <_read_r+0x1e>
 80095f4:	682b      	ldr	r3, [r5, #0]
 80095f6:	b103      	cbz	r3, 80095fa <_read_r+0x1e>
 80095f8:	6023      	str	r3, [r4, #0]
 80095fa:	bd38      	pop	{r3, r4, r5, pc}
 80095fc:	20006dbc 	.word	0x20006dbc

08009600 <_sbrk_r>:
 8009600:	b538      	push	{r3, r4, r5, lr}
 8009602:	4d06      	ldr	r5, [pc, #24]	@ (800961c <_sbrk_r+0x1c>)
 8009604:	2300      	movs	r3, #0
 8009606:	4604      	mov	r4, r0
 8009608:	4608      	mov	r0, r1
 800960a:	602b      	str	r3, [r5, #0]
 800960c:	f7f8 ff48 	bl	80024a0 <_sbrk>
 8009610:	1c43      	adds	r3, r0, #1
 8009612:	d102      	bne.n	800961a <_sbrk_r+0x1a>
 8009614:	682b      	ldr	r3, [r5, #0]
 8009616:	b103      	cbz	r3, 800961a <_sbrk_r+0x1a>
 8009618:	6023      	str	r3, [r4, #0]
 800961a:	bd38      	pop	{r3, r4, r5, pc}
 800961c:	20006dbc 	.word	0x20006dbc

08009620 <_write_r>:
 8009620:	b538      	push	{r3, r4, r5, lr}
 8009622:	4d07      	ldr	r5, [pc, #28]	@ (8009640 <_write_r+0x20>)
 8009624:	4604      	mov	r4, r0
 8009626:	4608      	mov	r0, r1
 8009628:	4611      	mov	r1, r2
 800962a:	2200      	movs	r2, #0
 800962c:	602a      	str	r2, [r5, #0]
 800962e:	461a      	mov	r2, r3
 8009630:	f7f8 ff1c 	bl	800246c <_write>
 8009634:	1c43      	adds	r3, r0, #1
 8009636:	d102      	bne.n	800963e <_write_r+0x1e>
 8009638:	682b      	ldr	r3, [r5, #0]
 800963a:	b103      	cbz	r3, 800963e <_write_r+0x1e>
 800963c:	6023      	str	r3, [r4, #0]
 800963e:	bd38      	pop	{r3, r4, r5, pc}
 8009640:	20006dbc 	.word	0x20006dbc

08009644 <__errno>:
 8009644:	4b01      	ldr	r3, [pc, #4]	@ (800964c <__errno+0x8>)
 8009646:	6818      	ldr	r0, [r3, #0]
 8009648:	4770      	bx	lr
 800964a:	bf00      	nop
 800964c:	2000019c 	.word	0x2000019c

08009650 <__libc_init_array>:
 8009650:	b570      	push	{r4, r5, r6, lr}
 8009652:	4d0d      	ldr	r5, [pc, #52]	@ (8009688 <__libc_init_array+0x38>)
 8009654:	4c0d      	ldr	r4, [pc, #52]	@ (800968c <__libc_init_array+0x3c>)
 8009656:	1b64      	subs	r4, r4, r5
 8009658:	10a4      	asrs	r4, r4, #2
 800965a:	2600      	movs	r6, #0
 800965c:	42a6      	cmp	r6, r4
 800965e:	d109      	bne.n	8009674 <__libc_init_array+0x24>
 8009660:	4d0b      	ldr	r5, [pc, #44]	@ (8009690 <__libc_init_array+0x40>)
 8009662:	4c0c      	ldr	r4, [pc, #48]	@ (8009694 <__libc_init_array+0x44>)
 8009664:	f003 f884 	bl	800c770 <_init>
 8009668:	1b64      	subs	r4, r4, r5
 800966a:	10a4      	asrs	r4, r4, #2
 800966c:	2600      	movs	r6, #0
 800966e:	42a6      	cmp	r6, r4
 8009670:	d105      	bne.n	800967e <__libc_init_array+0x2e>
 8009672:	bd70      	pop	{r4, r5, r6, pc}
 8009674:	f855 3b04 	ldr.w	r3, [r5], #4
 8009678:	4798      	blx	r3
 800967a:	3601      	adds	r6, #1
 800967c:	e7ee      	b.n	800965c <__libc_init_array+0xc>
 800967e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009682:	4798      	blx	r3
 8009684:	3601      	adds	r6, #1
 8009686:	e7f2      	b.n	800966e <__libc_init_array+0x1e>
 8009688:	0800d3d0 	.word	0x0800d3d0
 800968c:	0800d3d0 	.word	0x0800d3d0
 8009690:	0800d3d0 	.word	0x0800d3d0
 8009694:	0800d3d4 	.word	0x0800d3d4

08009698 <__retarget_lock_init_recursive>:
 8009698:	4770      	bx	lr

0800969a <__retarget_lock_acquire>:
 800969a:	4770      	bx	lr

0800969c <__retarget_lock_acquire_recursive>:
 800969c:	4770      	bx	lr

0800969e <__retarget_lock_release>:
 800969e:	4770      	bx	lr

080096a0 <__retarget_lock_release_recursive>:
 80096a0:	4770      	bx	lr

080096a2 <strcpy>:
 80096a2:	4603      	mov	r3, r0
 80096a4:	f811 2b01 	ldrb.w	r2, [r1], #1
 80096a8:	f803 2b01 	strb.w	r2, [r3], #1
 80096ac:	2a00      	cmp	r2, #0
 80096ae:	d1f9      	bne.n	80096a4 <strcpy+0x2>
 80096b0:	4770      	bx	lr

080096b2 <memcpy>:
 80096b2:	440a      	add	r2, r1
 80096b4:	4291      	cmp	r1, r2
 80096b6:	f100 33ff 	add.w	r3, r0, #4294967295
 80096ba:	d100      	bne.n	80096be <memcpy+0xc>
 80096bc:	4770      	bx	lr
 80096be:	b510      	push	{r4, lr}
 80096c0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80096c4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80096c8:	4291      	cmp	r1, r2
 80096ca:	d1f9      	bne.n	80096c0 <memcpy+0xe>
 80096cc:	bd10      	pop	{r4, pc}
	...

080096d0 <nan>:
 80096d0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80096d8 <nan+0x8>
 80096d4:	4770      	bx	lr
 80096d6:	bf00      	nop
 80096d8:	00000000 	.word	0x00000000
 80096dc:	7ff80000 	.word	0x7ff80000

080096e0 <nanf>:
 80096e0:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 80096e8 <nanf+0x8>
 80096e4:	4770      	bx	lr
 80096e6:	bf00      	nop
 80096e8:	7fc00000 	.word	0x7fc00000

080096ec <div>:
 80096ec:	b510      	push	{r4, lr}
 80096ee:	fb91 f4f2 	sdiv	r4, r1, r2
 80096f2:	fb02 1114 	mls	r1, r2, r4, r1
 80096f6:	6004      	str	r4, [r0, #0]
 80096f8:	6041      	str	r1, [r0, #4]
 80096fa:	bd10      	pop	{r4, pc}

080096fc <quorem>:
 80096fc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009700:	6903      	ldr	r3, [r0, #16]
 8009702:	690c      	ldr	r4, [r1, #16]
 8009704:	42a3      	cmp	r3, r4
 8009706:	4607      	mov	r7, r0
 8009708:	db7e      	blt.n	8009808 <quorem+0x10c>
 800970a:	3c01      	subs	r4, #1
 800970c:	f101 0814 	add.w	r8, r1, #20
 8009710:	00a3      	lsls	r3, r4, #2
 8009712:	f100 0514 	add.w	r5, r0, #20
 8009716:	9300      	str	r3, [sp, #0]
 8009718:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800971c:	9301      	str	r3, [sp, #4]
 800971e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009722:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009726:	3301      	adds	r3, #1
 8009728:	429a      	cmp	r2, r3
 800972a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800972e:	fbb2 f6f3 	udiv	r6, r2, r3
 8009732:	d32e      	bcc.n	8009792 <quorem+0x96>
 8009734:	f04f 0a00 	mov.w	sl, #0
 8009738:	46c4      	mov	ip, r8
 800973a:	46ae      	mov	lr, r5
 800973c:	46d3      	mov	fp, sl
 800973e:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009742:	b298      	uxth	r0, r3
 8009744:	fb06 a000 	mla	r0, r6, r0, sl
 8009748:	0c02      	lsrs	r2, r0, #16
 800974a:	0c1b      	lsrs	r3, r3, #16
 800974c:	fb06 2303 	mla	r3, r6, r3, r2
 8009750:	f8de 2000 	ldr.w	r2, [lr]
 8009754:	b280      	uxth	r0, r0
 8009756:	b292      	uxth	r2, r2
 8009758:	1a12      	subs	r2, r2, r0
 800975a:	445a      	add	r2, fp
 800975c:	f8de 0000 	ldr.w	r0, [lr]
 8009760:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009764:	b29b      	uxth	r3, r3
 8009766:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800976a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800976e:	b292      	uxth	r2, r2
 8009770:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8009774:	45e1      	cmp	r9, ip
 8009776:	f84e 2b04 	str.w	r2, [lr], #4
 800977a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800977e:	d2de      	bcs.n	800973e <quorem+0x42>
 8009780:	9b00      	ldr	r3, [sp, #0]
 8009782:	58eb      	ldr	r3, [r5, r3]
 8009784:	b92b      	cbnz	r3, 8009792 <quorem+0x96>
 8009786:	9b01      	ldr	r3, [sp, #4]
 8009788:	3b04      	subs	r3, #4
 800978a:	429d      	cmp	r5, r3
 800978c:	461a      	mov	r2, r3
 800978e:	d32f      	bcc.n	80097f0 <quorem+0xf4>
 8009790:	613c      	str	r4, [r7, #16]
 8009792:	4638      	mov	r0, r7
 8009794:	f001 fc9e 	bl	800b0d4 <__mcmp>
 8009798:	2800      	cmp	r0, #0
 800979a:	db25      	blt.n	80097e8 <quorem+0xec>
 800979c:	4629      	mov	r1, r5
 800979e:	2000      	movs	r0, #0
 80097a0:	f858 2b04 	ldr.w	r2, [r8], #4
 80097a4:	f8d1 c000 	ldr.w	ip, [r1]
 80097a8:	fa1f fe82 	uxth.w	lr, r2
 80097ac:	fa1f f38c 	uxth.w	r3, ip
 80097b0:	eba3 030e 	sub.w	r3, r3, lr
 80097b4:	4403      	add	r3, r0
 80097b6:	0c12      	lsrs	r2, r2, #16
 80097b8:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80097bc:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80097c0:	b29b      	uxth	r3, r3
 80097c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80097c6:	45c1      	cmp	r9, r8
 80097c8:	f841 3b04 	str.w	r3, [r1], #4
 80097cc:	ea4f 4022 	mov.w	r0, r2, asr #16
 80097d0:	d2e6      	bcs.n	80097a0 <quorem+0xa4>
 80097d2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80097d6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80097da:	b922      	cbnz	r2, 80097e6 <quorem+0xea>
 80097dc:	3b04      	subs	r3, #4
 80097de:	429d      	cmp	r5, r3
 80097e0:	461a      	mov	r2, r3
 80097e2:	d30b      	bcc.n	80097fc <quorem+0x100>
 80097e4:	613c      	str	r4, [r7, #16]
 80097e6:	3601      	adds	r6, #1
 80097e8:	4630      	mov	r0, r6
 80097ea:	b003      	add	sp, #12
 80097ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097f0:	6812      	ldr	r2, [r2, #0]
 80097f2:	3b04      	subs	r3, #4
 80097f4:	2a00      	cmp	r2, #0
 80097f6:	d1cb      	bne.n	8009790 <quorem+0x94>
 80097f8:	3c01      	subs	r4, #1
 80097fa:	e7c6      	b.n	800978a <quorem+0x8e>
 80097fc:	6812      	ldr	r2, [r2, #0]
 80097fe:	3b04      	subs	r3, #4
 8009800:	2a00      	cmp	r2, #0
 8009802:	d1ef      	bne.n	80097e4 <quorem+0xe8>
 8009804:	3c01      	subs	r4, #1
 8009806:	e7ea      	b.n	80097de <quorem+0xe2>
 8009808:	2000      	movs	r0, #0
 800980a:	e7ee      	b.n	80097ea <quorem+0xee>
 800980c:	0000      	movs	r0, r0
	...

08009810 <_dtoa_r>:
 8009810:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009814:	69c7      	ldr	r7, [r0, #28]
 8009816:	b099      	sub	sp, #100	@ 0x64
 8009818:	ed8d 0b02 	vstr	d0, [sp, #8]
 800981c:	ec55 4b10 	vmov	r4, r5, d0
 8009820:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8009822:	9109      	str	r1, [sp, #36]	@ 0x24
 8009824:	4683      	mov	fp, r0
 8009826:	920e      	str	r2, [sp, #56]	@ 0x38
 8009828:	9313      	str	r3, [sp, #76]	@ 0x4c
 800982a:	b97f      	cbnz	r7, 800984c <_dtoa_r+0x3c>
 800982c:	2010      	movs	r0, #16
 800982e:	f7fd f9a1 	bl	8006b74 <malloc>
 8009832:	4602      	mov	r2, r0
 8009834:	f8cb 001c 	str.w	r0, [fp, #28]
 8009838:	b920      	cbnz	r0, 8009844 <_dtoa_r+0x34>
 800983a:	4ba7      	ldr	r3, [pc, #668]	@ (8009ad8 <_dtoa_r+0x2c8>)
 800983c:	21ef      	movs	r1, #239	@ 0xef
 800983e:	48a7      	ldr	r0, [pc, #668]	@ (8009adc <_dtoa_r+0x2cc>)
 8009840:	f002 fc6c 	bl	800c11c <__assert_func>
 8009844:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8009848:	6007      	str	r7, [r0, #0]
 800984a:	60c7      	str	r7, [r0, #12]
 800984c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009850:	6819      	ldr	r1, [r3, #0]
 8009852:	b159      	cbz	r1, 800986c <_dtoa_r+0x5c>
 8009854:	685a      	ldr	r2, [r3, #4]
 8009856:	604a      	str	r2, [r1, #4]
 8009858:	2301      	movs	r3, #1
 800985a:	4093      	lsls	r3, r2
 800985c:	608b      	str	r3, [r1, #8]
 800985e:	4658      	mov	r0, fp
 8009860:	f001 f9b4 	bl	800abcc <_Bfree>
 8009864:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009868:	2200      	movs	r2, #0
 800986a:	601a      	str	r2, [r3, #0]
 800986c:	1e2b      	subs	r3, r5, #0
 800986e:	bfb9      	ittee	lt
 8009870:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8009874:	9303      	strlt	r3, [sp, #12]
 8009876:	2300      	movge	r3, #0
 8009878:	6033      	strge	r3, [r6, #0]
 800987a:	9f03      	ldr	r7, [sp, #12]
 800987c:	4b98      	ldr	r3, [pc, #608]	@ (8009ae0 <_dtoa_r+0x2d0>)
 800987e:	bfbc      	itt	lt
 8009880:	2201      	movlt	r2, #1
 8009882:	6032      	strlt	r2, [r6, #0]
 8009884:	43bb      	bics	r3, r7
 8009886:	d112      	bne.n	80098ae <_dtoa_r+0x9e>
 8009888:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800988a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800988e:	6013      	str	r3, [r2, #0]
 8009890:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009894:	4323      	orrs	r3, r4
 8009896:	f000 854d 	beq.w	800a334 <_dtoa_r+0xb24>
 800989a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800989c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8009af4 <_dtoa_r+0x2e4>
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	f000 854f 	beq.w	800a344 <_dtoa_r+0xb34>
 80098a6:	f10a 0303 	add.w	r3, sl, #3
 80098aa:	f000 bd49 	b.w	800a340 <_dtoa_r+0xb30>
 80098ae:	ed9d 7b02 	vldr	d7, [sp, #8]
 80098b2:	2200      	movs	r2, #0
 80098b4:	ec51 0b17 	vmov	r0, r1, d7
 80098b8:	2300      	movs	r3, #0
 80098ba:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80098be:	f7f7 f913 	bl	8000ae8 <__aeabi_dcmpeq>
 80098c2:	4680      	mov	r8, r0
 80098c4:	b158      	cbz	r0, 80098de <_dtoa_r+0xce>
 80098c6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80098c8:	2301      	movs	r3, #1
 80098ca:	6013      	str	r3, [r2, #0]
 80098cc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80098ce:	b113      	cbz	r3, 80098d6 <_dtoa_r+0xc6>
 80098d0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80098d2:	4b84      	ldr	r3, [pc, #528]	@ (8009ae4 <_dtoa_r+0x2d4>)
 80098d4:	6013      	str	r3, [r2, #0]
 80098d6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8009af8 <_dtoa_r+0x2e8>
 80098da:	f000 bd33 	b.w	800a344 <_dtoa_r+0xb34>
 80098de:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80098e2:	aa16      	add	r2, sp, #88	@ 0x58
 80098e4:	a917      	add	r1, sp, #92	@ 0x5c
 80098e6:	4658      	mov	r0, fp
 80098e8:	f001 fd14 	bl	800b314 <__d2b>
 80098ec:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80098f0:	4681      	mov	r9, r0
 80098f2:	2e00      	cmp	r6, #0
 80098f4:	d077      	beq.n	80099e6 <_dtoa_r+0x1d6>
 80098f6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80098f8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 80098fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009900:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009904:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8009908:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800990c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8009910:	4619      	mov	r1, r3
 8009912:	2200      	movs	r2, #0
 8009914:	4b74      	ldr	r3, [pc, #464]	@ (8009ae8 <_dtoa_r+0x2d8>)
 8009916:	f7f6 fcc7 	bl	80002a8 <__aeabi_dsub>
 800991a:	a369      	add	r3, pc, #420	@ (adr r3, 8009ac0 <_dtoa_r+0x2b0>)
 800991c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009920:	f7f6 fe7a 	bl	8000618 <__aeabi_dmul>
 8009924:	a368      	add	r3, pc, #416	@ (adr r3, 8009ac8 <_dtoa_r+0x2b8>)
 8009926:	e9d3 2300 	ldrd	r2, r3, [r3]
 800992a:	f7f6 fcbf 	bl	80002ac <__adddf3>
 800992e:	4604      	mov	r4, r0
 8009930:	4630      	mov	r0, r6
 8009932:	460d      	mov	r5, r1
 8009934:	f7f6 fe06 	bl	8000544 <__aeabi_i2d>
 8009938:	a365      	add	r3, pc, #404	@ (adr r3, 8009ad0 <_dtoa_r+0x2c0>)
 800993a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800993e:	f7f6 fe6b 	bl	8000618 <__aeabi_dmul>
 8009942:	4602      	mov	r2, r0
 8009944:	460b      	mov	r3, r1
 8009946:	4620      	mov	r0, r4
 8009948:	4629      	mov	r1, r5
 800994a:	f7f6 fcaf 	bl	80002ac <__adddf3>
 800994e:	4604      	mov	r4, r0
 8009950:	460d      	mov	r5, r1
 8009952:	f7f7 f911 	bl	8000b78 <__aeabi_d2iz>
 8009956:	2200      	movs	r2, #0
 8009958:	4607      	mov	r7, r0
 800995a:	2300      	movs	r3, #0
 800995c:	4620      	mov	r0, r4
 800995e:	4629      	mov	r1, r5
 8009960:	f7f7 f8cc 	bl	8000afc <__aeabi_dcmplt>
 8009964:	b140      	cbz	r0, 8009978 <_dtoa_r+0x168>
 8009966:	4638      	mov	r0, r7
 8009968:	f7f6 fdec 	bl	8000544 <__aeabi_i2d>
 800996c:	4622      	mov	r2, r4
 800996e:	462b      	mov	r3, r5
 8009970:	f7f7 f8ba 	bl	8000ae8 <__aeabi_dcmpeq>
 8009974:	b900      	cbnz	r0, 8009978 <_dtoa_r+0x168>
 8009976:	3f01      	subs	r7, #1
 8009978:	2f16      	cmp	r7, #22
 800997a:	d851      	bhi.n	8009a20 <_dtoa_r+0x210>
 800997c:	4b5b      	ldr	r3, [pc, #364]	@ (8009aec <_dtoa_r+0x2dc>)
 800997e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009982:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009986:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800998a:	f7f7 f8b7 	bl	8000afc <__aeabi_dcmplt>
 800998e:	2800      	cmp	r0, #0
 8009990:	d048      	beq.n	8009a24 <_dtoa_r+0x214>
 8009992:	3f01      	subs	r7, #1
 8009994:	2300      	movs	r3, #0
 8009996:	9312      	str	r3, [sp, #72]	@ 0x48
 8009998:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800999a:	1b9b      	subs	r3, r3, r6
 800999c:	1e5a      	subs	r2, r3, #1
 800999e:	bf44      	itt	mi
 80099a0:	f1c3 0801 	rsbmi	r8, r3, #1
 80099a4:	2300      	movmi	r3, #0
 80099a6:	9208      	str	r2, [sp, #32]
 80099a8:	bf54      	ite	pl
 80099aa:	f04f 0800 	movpl.w	r8, #0
 80099ae:	9308      	strmi	r3, [sp, #32]
 80099b0:	2f00      	cmp	r7, #0
 80099b2:	db39      	blt.n	8009a28 <_dtoa_r+0x218>
 80099b4:	9b08      	ldr	r3, [sp, #32]
 80099b6:	970f      	str	r7, [sp, #60]	@ 0x3c
 80099b8:	443b      	add	r3, r7
 80099ba:	9308      	str	r3, [sp, #32]
 80099bc:	2300      	movs	r3, #0
 80099be:	930a      	str	r3, [sp, #40]	@ 0x28
 80099c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80099c2:	2b09      	cmp	r3, #9
 80099c4:	d864      	bhi.n	8009a90 <_dtoa_r+0x280>
 80099c6:	2b05      	cmp	r3, #5
 80099c8:	bfc4      	itt	gt
 80099ca:	3b04      	subgt	r3, #4
 80099cc:	9309      	strgt	r3, [sp, #36]	@ 0x24
 80099ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80099d0:	f1a3 0302 	sub.w	r3, r3, #2
 80099d4:	bfcc      	ite	gt
 80099d6:	2400      	movgt	r4, #0
 80099d8:	2401      	movle	r4, #1
 80099da:	2b03      	cmp	r3, #3
 80099dc:	d863      	bhi.n	8009aa6 <_dtoa_r+0x296>
 80099de:	e8df f003 	tbb	[pc, r3]
 80099e2:	372a      	.short	0x372a
 80099e4:	5535      	.short	0x5535
 80099e6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 80099ea:	441e      	add	r6, r3
 80099ec:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80099f0:	2b20      	cmp	r3, #32
 80099f2:	bfc1      	itttt	gt
 80099f4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80099f8:	409f      	lslgt	r7, r3
 80099fa:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80099fe:	fa24 f303 	lsrgt.w	r3, r4, r3
 8009a02:	bfd6      	itet	le
 8009a04:	f1c3 0320 	rsble	r3, r3, #32
 8009a08:	ea47 0003 	orrgt.w	r0, r7, r3
 8009a0c:	fa04 f003 	lslle.w	r0, r4, r3
 8009a10:	f7f6 fd88 	bl	8000524 <__aeabi_ui2d>
 8009a14:	2201      	movs	r2, #1
 8009a16:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8009a1a:	3e01      	subs	r6, #1
 8009a1c:	9214      	str	r2, [sp, #80]	@ 0x50
 8009a1e:	e777      	b.n	8009910 <_dtoa_r+0x100>
 8009a20:	2301      	movs	r3, #1
 8009a22:	e7b8      	b.n	8009996 <_dtoa_r+0x186>
 8009a24:	9012      	str	r0, [sp, #72]	@ 0x48
 8009a26:	e7b7      	b.n	8009998 <_dtoa_r+0x188>
 8009a28:	427b      	negs	r3, r7
 8009a2a:	930a      	str	r3, [sp, #40]	@ 0x28
 8009a2c:	2300      	movs	r3, #0
 8009a2e:	eba8 0807 	sub.w	r8, r8, r7
 8009a32:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009a34:	e7c4      	b.n	80099c0 <_dtoa_r+0x1b0>
 8009a36:	2300      	movs	r3, #0
 8009a38:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009a3a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	dc35      	bgt.n	8009aac <_dtoa_r+0x29c>
 8009a40:	2301      	movs	r3, #1
 8009a42:	9300      	str	r3, [sp, #0]
 8009a44:	9307      	str	r3, [sp, #28]
 8009a46:	461a      	mov	r2, r3
 8009a48:	920e      	str	r2, [sp, #56]	@ 0x38
 8009a4a:	e00b      	b.n	8009a64 <_dtoa_r+0x254>
 8009a4c:	2301      	movs	r3, #1
 8009a4e:	e7f3      	b.n	8009a38 <_dtoa_r+0x228>
 8009a50:	2300      	movs	r3, #0
 8009a52:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009a54:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009a56:	18fb      	adds	r3, r7, r3
 8009a58:	9300      	str	r3, [sp, #0]
 8009a5a:	3301      	adds	r3, #1
 8009a5c:	2b01      	cmp	r3, #1
 8009a5e:	9307      	str	r3, [sp, #28]
 8009a60:	bfb8      	it	lt
 8009a62:	2301      	movlt	r3, #1
 8009a64:	f8db 001c 	ldr.w	r0, [fp, #28]
 8009a68:	2100      	movs	r1, #0
 8009a6a:	2204      	movs	r2, #4
 8009a6c:	f102 0514 	add.w	r5, r2, #20
 8009a70:	429d      	cmp	r5, r3
 8009a72:	d91f      	bls.n	8009ab4 <_dtoa_r+0x2a4>
 8009a74:	6041      	str	r1, [r0, #4]
 8009a76:	4658      	mov	r0, fp
 8009a78:	f001 f868 	bl	800ab4c <_Balloc>
 8009a7c:	4682      	mov	sl, r0
 8009a7e:	2800      	cmp	r0, #0
 8009a80:	d13c      	bne.n	8009afc <_dtoa_r+0x2ec>
 8009a82:	4b1b      	ldr	r3, [pc, #108]	@ (8009af0 <_dtoa_r+0x2e0>)
 8009a84:	4602      	mov	r2, r0
 8009a86:	f240 11af 	movw	r1, #431	@ 0x1af
 8009a8a:	e6d8      	b.n	800983e <_dtoa_r+0x2e>
 8009a8c:	2301      	movs	r3, #1
 8009a8e:	e7e0      	b.n	8009a52 <_dtoa_r+0x242>
 8009a90:	2401      	movs	r4, #1
 8009a92:	2300      	movs	r3, #0
 8009a94:	9309      	str	r3, [sp, #36]	@ 0x24
 8009a96:	940b      	str	r4, [sp, #44]	@ 0x2c
 8009a98:	f04f 33ff 	mov.w	r3, #4294967295
 8009a9c:	9300      	str	r3, [sp, #0]
 8009a9e:	9307      	str	r3, [sp, #28]
 8009aa0:	2200      	movs	r2, #0
 8009aa2:	2312      	movs	r3, #18
 8009aa4:	e7d0      	b.n	8009a48 <_dtoa_r+0x238>
 8009aa6:	2301      	movs	r3, #1
 8009aa8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009aaa:	e7f5      	b.n	8009a98 <_dtoa_r+0x288>
 8009aac:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009aae:	9300      	str	r3, [sp, #0]
 8009ab0:	9307      	str	r3, [sp, #28]
 8009ab2:	e7d7      	b.n	8009a64 <_dtoa_r+0x254>
 8009ab4:	3101      	adds	r1, #1
 8009ab6:	0052      	lsls	r2, r2, #1
 8009ab8:	e7d8      	b.n	8009a6c <_dtoa_r+0x25c>
 8009aba:	bf00      	nop
 8009abc:	f3af 8000 	nop.w
 8009ac0:	636f4361 	.word	0x636f4361
 8009ac4:	3fd287a7 	.word	0x3fd287a7
 8009ac8:	8b60c8b3 	.word	0x8b60c8b3
 8009acc:	3fc68a28 	.word	0x3fc68a28
 8009ad0:	509f79fb 	.word	0x509f79fb
 8009ad4:	3fd34413 	.word	0x3fd34413
 8009ad8:	0800d0cb 	.word	0x0800d0cb
 8009adc:	0800d0e2 	.word	0x0800d0e2
 8009ae0:	7ff00000 	.word	0x7ff00000
 8009ae4:	0800d328 	.word	0x0800d328
 8009ae8:	3ff80000 	.word	0x3ff80000
 8009aec:	0800d238 	.word	0x0800d238
 8009af0:	0800d13a 	.word	0x0800d13a
 8009af4:	0800d0c7 	.word	0x0800d0c7
 8009af8:	0800d327 	.word	0x0800d327
 8009afc:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009b00:	6018      	str	r0, [r3, #0]
 8009b02:	9b07      	ldr	r3, [sp, #28]
 8009b04:	2b0e      	cmp	r3, #14
 8009b06:	f200 80a4 	bhi.w	8009c52 <_dtoa_r+0x442>
 8009b0a:	2c00      	cmp	r4, #0
 8009b0c:	f000 80a1 	beq.w	8009c52 <_dtoa_r+0x442>
 8009b10:	2f00      	cmp	r7, #0
 8009b12:	dd33      	ble.n	8009b7c <_dtoa_r+0x36c>
 8009b14:	4bad      	ldr	r3, [pc, #692]	@ (8009dcc <_dtoa_r+0x5bc>)
 8009b16:	f007 020f 	and.w	r2, r7, #15
 8009b1a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009b1e:	ed93 7b00 	vldr	d7, [r3]
 8009b22:	05f8      	lsls	r0, r7, #23
 8009b24:	ed8d 7b04 	vstr	d7, [sp, #16]
 8009b28:	ea4f 1427 	mov.w	r4, r7, asr #4
 8009b2c:	d516      	bpl.n	8009b5c <_dtoa_r+0x34c>
 8009b2e:	4ba8      	ldr	r3, [pc, #672]	@ (8009dd0 <_dtoa_r+0x5c0>)
 8009b30:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009b34:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009b38:	f7f6 fe98 	bl	800086c <__aeabi_ddiv>
 8009b3c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009b40:	f004 040f 	and.w	r4, r4, #15
 8009b44:	2603      	movs	r6, #3
 8009b46:	4da2      	ldr	r5, [pc, #648]	@ (8009dd0 <_dtoa_r+0x5c0>)
 8009b48:	b954      	cbnz	r4, 8009b60 <_dtoa_r+0x350>
 8009b4a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009b4e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009b52:	f7f6 fe8b 	bl	800086c <__aeabi_ddiv>
 8009b56:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009b5a:	e028      	b.n	8009bae <_dtoa_r+0x39e>
 8009b5c:	2602      	movs	r6, #2
 8009b5e:	e7f2      	b.n	8009b46 <_dtoa_r+0x336>
 8009b60:	07e1      	lsls	r1, r4, #31
 8009b62:	d508      	bpl.n	8009b76 <_dtoa_r+0x366>
 8009b64:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009b68:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009b6c:	f7f6 fd54 	bl	8000618 <__aeabi_dmul>
 8009b70:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009b74:	3601      	adds	r6, #1
 8009b76:	1064      	asrs	r4, r4, #1
 8009b78:	3508      	adds	r5, #8
 8009b7a:	e7e5      	b.n	8009b48 <_dtoa_r+0x338>
 8009b7c:	f000 80d2 	beq.w	8009d24 <_dtoa_r+0x514>
 8009b80:	427c      	negs	r4, r7
 8009b82:	4b92      	ldr	r3, [pc, #584]	@ (8009dcc <_dtoa_r+0x5bc>)
 8009b84:	4d92      	ldr	r5, [pc, #584]	@ (8009dd0 <_dtoa_r+0x5c0>)
 8009b86:	f004 020f 	and.w	r2, r4, #15
 8009b8a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009b8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b92:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009b96:	f7f6 fd3f 	bl	8000618 <__aeabi_dmul>
 8009b9a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009b9e:	1124      	asrs	r4, r4, #4
 8009ba0:	2300      	movs	r3, #0
 8009ba2:	2602      	movs	r6, #2
 8009ba4:	2c00      	cmp	r4, #0
 8009ba6:	f040 80b2 	bne.w	8009d0e <_dtoa_r+0x4fe>
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d1d3      	bne.n	8009b56 <_dtoa_r+0x346>
 8009bae:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009bb0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	f000 80b7 	beq.w	8009d28 <_dtoa_r+0x518>
 8009bba:	4b86      	ldr	r3, [pc, #536]	@ (8009dd4 <_dtoa_r+0x5c4>)
 8009bbc:	2200      	movs	r2, #0
 8009bbe:	4620      	mov	r0, r4
 8009bc0:	4629      	mov	r1, r5
 8009bc2:	f7f6 ff9b 	bl	8000afc <__aeabi_dcmplt>
 8009bc6:	2800      	cmp	r0, #0
 8009bc8:	f000 80ae 	beq.w	8009d28 <_dtoa_r+0x518>
 8009bcc:	9b07      	ldr	r3, [sp, #28]
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	f000 80aa 	beq.w	8009d28 <_dtoa_r+0x518>
 8009bd4:	9b00      	ldr	r3, [sp, #0]
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	dd37      	ble.n	8009c4a <_dtoa_r+0x43a>
 8009bda:	1e7b      	subs	r3, r7, #1
 8009bdc:	9304      	str	r3, [sp, #16]
 8009bde:	4620      	mov	r0, r4
 8009be0:	4b7d      	ldr	r3, [pc, #500]	@ (8009dd8 <_dtoa_r+0x5c8>)
 8009be2:	2200      	movs	r2, #0
 8009be4:	4629      	mov	r1, r5
 8009be6:	f7f6 fd17 	bl	8000618 <__aeabi_dmul>
 8009bea:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009bee:	9c00      	ldr	r4, [sp, #0]
 8009bf0:	3601      	adds	r6, #1
 8009bf2:	4630      	mov	r0, r6
 8009bf4:	f7f6 fca6 	bl	8000544 <__aeabi_i2d>
 8009bf8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009bfc:	f7f6 fd0c 	bl	8000618 <__aeabi_dmul>
 8009c00:	4b76      	ldr	r3, [pc, #472]	@ (8009ddc <_dtoa_r+0x5cc>)
 8009c02:	2200      	movs	r2, #0
 8009c04:	f7f6 fb52 	bl	80002ac <__adddf3>
 8009c08:	4605      	mov	r5, r0
 8009c0a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8009c0e:	2c00      	cmp	r4, #0
 8009c10:	f040 808d 	bne.w	8009d2e <_dtoa_r+0x51e>
 8009c14:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009c18:	4b71      	ldr	r3, [pc, #452]	@ (8009de0 <_dtoa_r+0x5d0>)
 8009c1a:	2200      	movs	r2, #0
 8009c1c:	f7f6 fb44 	bl	80002a8 <__aeabi_dsub>
 8009c20:	4602      	mov	r2, r0
 8009c22:	460b      	mov	r3, r1
 8009c24:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009c28:	462a      	mov	r2, r5
 8009c2a:	4633      	mov	r3, r6
 8009c2c:	f7f6 ff84 	bl	8000b38 <__aeabi_dcmpgt>
 8009c30:	2800      	cmp	r0, #0
 8009c32:	f040 828b 	bne.w	800a14c <_dtoa_r+0x93c>
 8009c36:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009c3a:	462a      	mov	r2, r5
 8009c3c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8009c40:	f7f6 ff5c 	bl	8000afc <__aeabi_dcmplt>
 8009c44:	2800      	cmp	r0, #0
 8009c46:	f040 8128 	bne.w	8009e9a <_dtoa_r+0x68a>
 8009c4a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8009c4e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8009c52:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	f2c0 815a 	blt.w	8009f0e <_dtoa_r+0x6fe>
 8009c5a:	2f0e      	cmp	r7, #14
 8009c5c:	f300 8157 	bgt.w	8009f0e <_dtoa_r+0x6fe>
 8009c60:	4b5a      	ldr	r3, [pc, #360]	@ (8009dcc <_dtoa_r+0x5bc>)
 8009c62:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009c66:	ed93 7b00 	vldr	d7, [r3]
 8009c6a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	ed8d 7b00 	vstr	d7, [sp]
 8009c72:	da03      	bge.n	8009c7c <_dtoa_r+0x46c>
 8009c74:	9b07      	ldr	r3, [sp, #28]
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	f340 8101 	ble.w	8009e7e <_dtoa_r+0x66e>
 8009c7c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8009c80:	4656      	mov	r6, sl
 8009c82:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009c86:	4620      	mov	r0, r4
 8009c88:	4629      	mov	r1, r5
 8009c8a:	f7f6 fdef 	bl	800086c <__aeabi_ddiv>
 8009c8e:	f7f6 ff73 	bl	8000b78 <__aeabi_d2iz>
 8009c92:	4680      	mov	r8, r0
 8009c94:	f7f6 fc56 	bl	8000544 <__aeabi_i2d>
 8009c98:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009c9c:	f7f6 fcbc 	bl	8000618 <__aeabi_dmul>
 8009ca0:	4602      	mov	r2, r0
 8009ca2:	460b      	mov	r3, r1
 8009ca4:	4620      	mov	r0, r4
 8009ca6:	4629      	mov	r1, r5
 8009ca8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8009cac:	f7f6 fafc 	bl	80002a8 <__aeabi_dsub>
 8009cb0:	f806 4b01 	strb.w	r4, [r6], #1
 8009cb4:	9d07      	ldr	r5, [sp, #28]
 8009cb6:	eba6 040a 	sub.w	r4, r6, sl
 8009cba:	42a5      	cmp	r5, r4
 8009cbc:	4602      	mov	r2, r0
 8009cbe:	460b      	mov	r3, r1
 8009cc0:	f040 8117 	bne.w	8009ef2 <_dtoa_r+0x6e2>
 8009cc4:	f7f6 faf2 	bl	80002ac <__adddf3>
 8009cc8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009ccc:	4604      	mov	r4, r0
 8009cce:	460d      	mov	r5, r1
 8009cd0:	f7f6 ff32 	bl	8000b38 <__aeabi_dcmpgt>
 8009cd4:	2800      	cmp	r0, #0
 8009cd6:	f040 80f9 	bne.w	8009ecc <_dtoa_r+0x6bc>
 8009cda:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009cde:	4620      	mov	r0, r4
 8009ce0:	4629      	mov	r1, r5
 8009ce2:	f7f6 ff01 	bl	8000ae8 <__aeabi_dcmpeq>
 8009ce6:	b118      	cbz	r0, 8009cf0 <_dtoa_r+0x4e0>
 8009ce8:	f018 0f01 	tst.w	r8, #1
 8009cec:	f040 80ee 	bne.w	8009ecc <_dtoa_r+0x6bc>
 8009cf0:	4649      	mov	r1, r9
 8009cf2:	4658      	mov	r0, fp
 8009cf4:	f000 ff6a 	bl	800abcc <_Bfree>
 8009cf8:	2300      	movs	r3, #0
 8009cfa:	7033      	strb	r3, [r6, #0]
 8009cfc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009cfe:	3701      	adds	r7, #1
 8009d00:	601f      	str	r7, [r3, #0]
 8009d02:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	f000 831d 	beq.w	800a344 <_dtoa_r+0xb34>
 8009d0a:	601e      	str	r6, [r3, #0]
 8009d0c:	e31a      	b.n	800a344 <_dtoa_r+0xb34>
 8009d0e:	07e2      	lsls	r2, r4, #31
 8009d10:	d505      	bpl.n	8009d1e <_dtoa_r+0x50e>
 8009d12:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009d16:	f7f6 fc7f 	bl	8000618 <__aeabi_dmul>
 8009d1a:	3601      	adds	r6, #1
 8009d1c:	2301      	movs	r3, #1
 8009d1e:	1064      	asrs	r4, r4, #1
 8009d20:	3508      	adds	r5, #8
 8009d22:	e73f      	b.n	8009ba4 <_dtoa_r+0x394>
 8009d24:	2602      	movs	r6, #2
 8009d26:	e742      	b.n	8009bae <_dtoa_r+0x39e>
 8009d28:	9c07      	ldr	r4, [sp, #28]
 8009d2a:	9704      	str	r7, [sp, #16]
 8009d2c:	e761      	b.n	8009bf2 <_dtoa_r+0x3e2>
 8009d2e:	4b27      	ldr	r3, [pc, #156]	@ (8009dcc <_dtoa_r+0x5bc>)
 8009d30:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009d32:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009d36:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009d3a:	4454      	add	r4, sl
 8009d3c:	2900      	cmp	r1, #0
 8009d3e:	d053      	beq.n	8009de8 <_dtoa_r+0x5d8>
 8009d40:	4928      	ldr	r1, [pc, #160]	@ (8009de4 <_dtoa_r+0x5d4>)
 8009d42:	2000      	movs	r0, #0
 8009d44:	f7f6 fd92 	bl	800086c <__aeabi_ddiv>
 8009d48:	4633      	mov	r3, r6
 8009d4a:	462a      	mov	r2, r5
 8009d4c:	f7f6 faac 	bl	80002a8 <__aeabi_dsub>
 8009d50:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009d54:	4656      	mov	r6, sl
 8009d56:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009d5a:	f7f6 ff0d 	bl	8000b78 <__aeabi_d2iz>
 8009d5e:	4605      	mov	r5, r0
 8009d60:	f7f6 fbf0 	bl	8000544 <__aeabi_i2d>
 8009d64:	4602      	mov	r2, r0
 8009d66:	460b      	mov	r3, r1
 8009d68:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009d6c:	f7f6 fa9c 	bl	80002a8 <__aeabi_dsub>
 8009d70:	3530      	adds	r5, #48	@ 0x30
 8009d72:	4602      	mov	r2, r0
 8009d74:	460b      	mov	r3, r1
 8009d76:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009d7a:	f806 5b01 	strb.w	r5, [r6], #1
 8009d7e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009d82:	f7f6 febb 	bl	8000afc <__aeabi_dcmplt>
 8009d86:	2800      	cmp	r0, #0
 8009d88:	d171      	bne.n	8009e6e <_dtoa_r+0x65e>
 8009d8a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009d8e:	4911      	ldr	r1, [pc, #68]	@ (8009dd4 <_dtoa_r+0x5c4>)
 8009d90:	2000      	movs	r0, #0
 8009d92:	f7f6 fa89 	bl	80002a8 <__aeabi_dsub>
 8009d96:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009d9a:	f7f6 feaf 	bl	8000afc <__aeabi_dcmplt>
 8009d9e:	2800      	cmp	r0, #0
 8009da0:	f040 8095 	bne.w	8009ece <_dtoa_r+0x6be>
 8009da4:	42a6      	cmp	r6, r4
 8009da6:	f43f af50 	beq.w	8009c4a <_dtoa_r+0x43a>
 8009daa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8009dae:	4b0a      	ldr	r3, [pc, #40]	@ (8009dd8 <_dtoa_r+0x5c8>)
 8009db0:	2200      	movs	r2, #0
 8009db2:	f7f6 fc31 	bl	8000618 <__aeabi_dmul>
 8009db6:	4b08      	ldr	r3, [pc, #32]	@ (8009dd8 <_dtoa_r+0x5c8>)
 8009db8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009dbc:	2200      	movs	r2, #0
 8009dbe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009dc2:	f7f6 fc29 	bl	8000618 <__aeabi_dmul>
 8009dc6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009dca:	e7c4      	b.n	8009d56 <_dtoa_r+0x546>
 8009dcc:	0800d238 	.word	0x0800d238
 8009dd0:	0800d210 	.word	0x0800d210
 8009dd4:	3ff00000 	.word	0x3ff00000
 8009dd8:	40240000 	.word	0x40240000
 8009ddc:	401c0000 	.word	0x401c0000
 8009de0:	40140000 	.word	0x40140000
 8009de4:	3fe00000 	.word	0x3fe00000
 8009de8:	4631      	mov	r1, r6
 8009dea:	4628      	mov	r0, r5
 8009dec:	f7f6 fc14 	bl	8000618 <__aeabi_dmul>
 8009df0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009df4:	9415      	str	r4, [sp, #84]	@ 0x54
 8009df6:	4656      	mov	r6, sl
 8009df8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009dfc:	f7f6 febc 	bl	8000b78 <__aeabi_d2iz>
 8009e00:	4605      	mov	r5, r0
 8009e02:	f7f6 fb9f 	bl	8000544 <__aeabi_i2d>
 8009e06:	4602      	mov	r2, r0
 8009e08:	460b      	mov	r3, r1
 8009e0a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009e0e:	f7f6 fa4b 	bl	80002a8 <__aeabi_dsub>
 8009e12:	3530      	adds	r5, #48	@ 0x30
 8009e14:	f806 5b01 	strb.w	r5, [r6], #1
 8009e18:	4602      	mov	r2, r0
 8009e1a:	460b      	mov	r3, r1
 8009e1c:	42a6      	cmp	r6, r4
 8009e1e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009e22:	f04f 0200 	mov.w	r2, #0
 8009e26:	d124      	bne.n	8009e72 <_dtoa_r+0x662>
 8009e28:	4bac      	ldr	r3, [pc, #688]	@ (800a0dc <_dtoa_r+0x8cc>)
 8009e2a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8009e2e:	f7f6 fa3d 	bl	80002ac <__adddf3>
 8009e32:	4602      	mov	r2, r0
 8009e34:	460b      	mov	r3, r1
 8009e36:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009e3a:	f7f6 fe7d 	bl	8000b38 <__aeabi_dcmpgt>
 8009e3e:	2800      	cmp	r0, #0
 8009e40:	d145      	bne.n	8009ece <_dtoa_r+0x6be>
 8009e42:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009e46:	49a5      	ldr	r1, [pc, #660]	@ (800a0dc <_dtoa_r+0x8cc>)
 8009e48:	2000      	movs	r0, #0
 8009e4a:	f7f6 fa2d 	bl	80002a8 <__aeabi_dsub>
 8009e4e:	4602      	mov	r2, r0
 8009e50:	460b      	mov	r3, r1
 8009e52:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009e56:	f7f6 fe51 	bl	8000afc <__aeabi_dcmplt>
 8009e5a:	2800      	cmp	r0, #0
 8009e5c:	f43f aef5 	beq.w	8009c4a <_dtoa_r+0x43a>
 8009e60:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8009e62:	1e73      	subs	r3, r6, #1
 8009e64:	9315      	str	r3, [sp, #84]	@ 0x54
 8009e66:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009e6a:	2b30      	cmp	r3, #48	@ 0x30
 8009e6c:	d0f8      	beq.n	8009e60 <_dtoa_r+0x650>
 8009e6e:	9f04      	ldr	r7, [sp, #16]
 8009e70:	e73e      	b.n	8009cf0 <_dtoa_r+0x4e0>
 8009e72:	4b9b      	ldr	r3, [pc, #620]	@ (800a0e0 <_dtoa_r+0x8d0>)
 8009e74:	f7f6 fbd0 	bl	8000618 <__aeabi_dmul>
 8009e78:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009e7c:	e7bc      	b.n	8009df8 <_dtoa_r+0x5e8>
 8009e7e:	d10c      	bne.n	8009e9a <_dtoa_r+0x68a>
 8009e80:	4b98      	ldr	r3, [pc, #608]	@ (800a0e4 <_dtoa_r+0x8d4>)
 8009e82:	2200      	movs	r2, #0
 8009e84:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009e88:	f7f6 fbc6 	bl	8000618 <__aeabi_dmul>
 8009e8c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009e90:	f7f6 fe48 	bl	8000b24 <__aeabi_dcmpge>
 8009e94:	2800      	cmp	r0, #0
 8009e96:	f000 8157 	beq.w	800a148 <_dtoa_r+0x938>
 8009e9a:	2400      	movs	r4, #0
 8009e9c:	4625      	mov	r5, r4
 8009e9e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009ea0:	43db      	mvns	r3, r3
 8009ea2:	9304      	str	r3, [sp, #16]
 8009ea4:	4656      	mov	r6, sl
 8009ea6:	2700      	movs	r7, #0
 8009ea8:	4621      	mov	r1, r4
 8009eaa:	4658      	mov	r0, fp
 8009eac:	f000 fe8e 	bl	800abcc <_Bfree>
 8009eb0:	2d00      	cmp	r5, #0
 8009eb2:	d0dc      	beq.n	8009e6e <_dtoa_r+0x65e>
 8009eb4:	b12f      	cbz	r7, 8009ec2 <_dtoa_r+0x6b2>
 8009eb6:	42af      	cmp	r7, r5
 8009eb8:	d003      	beq.n	8009ec2 <_dtoa_r+0x6b2>
 8009eba:	4639      	mov	r1, r7
 8009ebc:	4658      	mov	r0, fp
 8009ebe:	f000 fe85 	bl	800abcc <_Bfree>
 8009ec2:	4629      	mov	r1, r5
 8009ec4:	4658      	mov	r0, fp
 8009ec6:	f000 fe81 	bl	800abcc <_Bfree>
 8009eca:	e7d0      	b.n	8009e6e <_dtoa_r+0x65e>
 8009ecc:	9704      	str	r7, [sp, #16]
 8009ece:	4633      	mov	r3, r6
 8009ed0:	461e      	mov	r6, r3
 8009ed2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009ed6:	2a39      	cmp	r2, #57	@ 0x39
 8009ed8:	d107      	bne.n	8009eea <_dtoa_r+0x6da>
 8009eda:	459a      	cmp	sl, r3
 8009edc:	d1f8      	bne.n	8009ed0 <_dtoa_r+0x6c0>
 8009ede:	9a04      	ldr	r2, [sp, #16]
 8009ee0:	3201      	adds	r2, #1
 8009ee2:	9204      	str	r2, [sp, #16]
 8009ee4:	2230      	movs	r2, #48	@ 0x30
 8009ee6:	f88a 2000 	strb.w	r2, [sl]
 8009eea:	781a      	ldrb	r2, [r3, #0]
 8009eec:	3201      	adds	r2, #1
 8009eee:	701a      	strb	r2, [r3, #0]
 8009ef0:	e7bd      	b.n	8009e6e <_dtoa_r+0x65e>
 8009ef2:	4b7b      	ldr	r3, [pc, #492]	@ (800a0e0 <_dtoa_r+0x8d0>)
 8009ef4:	2200      	movs	r2, #0
 8009ef6:	f7f6 fb8f 	bl	8000618 <__aeabi_dmul>
 8009efa:	2200      	movs	r2, #0
 8009efc:	2300      	movs	r3, #0
 8009efe:	4604      	mov	r4, r0
 8009f00:	460d      	mov	r5, r1
 8009f02:	f7f6 fdf1 	bl	8000ae8 <__aeabi_dcmpeq>
 8009f06:	2800      	cmp	r0, #0
 8009f08:	f43f aebb 	beq.w	8009c82 <_dtoa_r+0x472>
 8009f0c:	e6f0      	b.n	8009cf0 <_dtoa_r+0x4e0>
 8009f0e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8009f10:	2a00      	cmp	r2, #0
 8009f12:	f000 80db 	beq.w	800a0cc <_dtoa_r+0x8bc>
 8009f16:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009f18:	2a01      	cmp	r2, #1
 8009f1a:	f300 80bf 	bgt.w	800a09c <_dtoa_r+0x88c>
 8009f1e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8009f20:	2a00      	cmp	r2, #0
 8009f22:	f000 80b7 	beq.w	800a094 <_dtoa_r+0x884>
 8009f26:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8009f2a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8009f2c:	4646      	mov	r6, r8
 8009f2e:	9a08      	ldr	r2, [sp, #32]
 8009f30:	2101      	movs	r1, #1
 8009f32:	441a      	add	r2, r3
 8009f34:	4658      	mov	r0, fp
 8009f36:	4498      	add	r8, r3
 8009f38:	9208      	str	r2, [sp, #32]
 8009f3a:	f000 ff45 	bl	800adc8 <__i2b>
 8009f3e:	4605      	mov	r5, r0
 8009f40:	b15e      	cbz	r6, 8009f5a <_dtoa_r+0x74a>
 8009f42:	9b08      	ldr	r3, [sp, #32]
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	dd08      	ble.n	8009f5a <_dtoa_r+0x74a>
 8009f48:	42b3      	cmp	r3, r6
 8009f4a:	9a08      	ldr	r2, [sp, #32]
 8009f4c:	bfa8      	it	ge
 8009f4e:	4633      	movge	r3, r6
 8009f50:	eba8 0803 	sub.w	r8, r8, r3
 8009f54:	1af6      	subs	r6, r6, r3
 8009f56:	1ad3      	subs	r3, r2, r3
 8009f58:	9308      	str	r3, [sp, #32]
 8009f5a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009f5c:	b1f3      	cbz	r3, 8009f9c <_dtoa_r+0x78c>
 8009f5e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	f000 80b7 	beq.w	800a0d4 <_dtoa_r+0x8c4>
 8009f66:	b18c      	cbz	r4, 8009f8c <_dtoa_r+0x77c>
 8009f68:	4629      	mov	r1, r5
 8009f6a:	4622      	mov	r2, r4
 8009f6c:	4658      	mov	r0, fp
 8009f6e:	f000 ffeb 	bl	800af48 <__pow5mult>
 8009f72:	464a      	mov	r2, r9
 8009f74:	4601      	mov	r1, r0
 8009f76:	4605      	mov	r5, r0
 8009f78:	4658      	mov	r0, fp
 8009f7a:	f000 ff3b 	bl	800adf4 <__multiply>
 8009f7e:	4649      	mov	r1, r9
 8009f80:	9004      	str	r0, [sp, #16]
 8009f82:	4658      	mov	r0, fp
 8009f84:	f000 fe22 	bl	800abcc <_Bfree>
 8009f88:	9b04      	ldr	r3, [sp, #16]
 8009f8a:	4699      	mov	r9, r3
 8009f8c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009f8e:	1b1a      	subs	r2, r3, r4
 8009f90:	d004      	beq.n	8009f9c <_dtoa_r+0x78c>
 8009f92:	4649      	mov	r1, r9
 8009f94:	4658      	mov	r0, fp
 8009f96:	f000 ffd7 	bl	800af48 <__pow5mult>
 8009f9a:	4681      	mov	r9, r0
 8009f9c:	2101      	movs	r1, #1
 8009f9e:	4658      	mov	r0, fp
 8009fa0:	f000 ff12 	bl	800adc8 <__i2b>
 8009fa4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009fa6:	4604      	mov	r4, r0
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	f000 81cf 	beq.w	800a34c <_dtoa_r+0xb3c>
 8009fae:	461a      	mov	r2, r3
 8009fb0:	4601      	mov	r1, r0
 8009fb2:	4658      	mov	r0, fp
 8009fb4:	f000 ffc8 	bl	800af48 <__pow5mult>
 8009fb8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009fba:	2b01      	cmp	r3, #1
 8009fbc:	4604      	mov	r4, r0
 8009fbe:	f300 8095 	bgt.w	800a0ec <_dtoa_r+0x8dc>
 8009fc2:	9b02      	ldr	r3, [sp, #8]
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	f040 8087 	bne.w	800a0d8 <_dtoa_r+0x8c8>
 8009fca:	9b03      	ldr	r3, [sp, #12]
 8009fcc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	f040 8089 	bne.w	800a0e8 <_dtoa_r+0x8d8>
 8009fd6:	9b03      	ldr	r3, [sp, #12]
 8009fd8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009fdc:	0d1b      	lsrs	r3, r3, #20
 8009fde:	051b      	lsls	r3, r3, #20
 8009fe0:	b12b      	cbz	r3, 8009fee <_dtoa_r+0x7de>
 8009fe2:	9b08      	ldr	r3, [sp, #32]
 8009fe4:	3301      	adds	r3, #1
 8009fe6:	9308      	str	r3, [sp, #32]
 8009fe8:	f108 0801 	add.w	r8, r8, #1
 8009fec:	2301      	movs	r3, #1
 8009fee:	930a      	str	r3, [sp, #40]	@ 0x28
 8009ff0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	f000 81b0 	beq.w	800a358 <_dtoa_r+0xb48>
 8009ff8:	6923      	ldr	r3, [r4, #16]
 8009ffa:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009ffe:	6918      	ldr	r0, [r3, #16]
 800a000:	f000 fe96 	bl	800ad30 <__hi0bits>
 800a004:	f1c0 0020 	rsb	r0, r0, #32
 800a008:	9b08      	ldr	r3, [sp, #32]
 800a00a:	4418      	add	r0, r3
 800a00c:	f010 001f 	ands.w	r0, r0, #31
 800a010:	d077      	beq.n	800a102 <_dtoa_r+0x8f2>
 800a012:	f1c0 0320 	rsb	r3, r0, #32
 800a016:	2b04      	cmp	r3, #4
 800a018:	dd6b      	ble.n	800a0f2 <_dtoa_r+0x8e2>
 800a01a:	9b08      	ldr	r3, [sp, #32]
 800a01c:	f1c0 001c 	rsb	r0, r0, #28
 800a020:	4403      	add	r3, r0
 800a022:	4480      	add	r8, r0
 800a024:	4406      	add	r6, r0
 800a026:	9308      	str	r3, [sp, #32]
 800a028:	f1b8 0f00 	cmp.w	r8, #0
 800a02c:	dd05      	ble.n	800a03a <_dtoa_r+0x82a>
 800a02e:	4649      	mov	r1, r9
 800a030:	4642      	mov	r2, r8
 800a032:	4658      	mov	r0, fp
 800a034:	f000 ffe2 	bl	800affc <__lshift>
 800a038:	4681      	mov	r9, r0
 800a03a:	9b08      	ldr	r3, [sp, #32]
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	dd05      	ble.n	800a04c <_dtoa_r+0x83c>
 800a040:	4621      	mov	r1, r4
 800a042:	461a      	mov	r2, r3
 800a044:	4658      	mov	r0, fp
 800a046:	f000 ffd9 	bl	800affc <__lshift>
 800a04a:	4604      	mov	r4, r0
 800a04c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d059      	beq.n	800a106 <_dtoa_r+0x8f6>
 800a052:	4621      	mov	r1, r4
 800a054:	4648      	mov	r0, r9
 800a056:	f001 f83d 	bl	800b0d4 <__mcmp>
 800a05a:	2800      	cmp	r0, #0
 800a05c:	da53      	bge.n	800a106 <_dtoa_r+0x8f6>
 800a05e:	1e7b      	subs	r3, r7, #1
 800a060:	9304      	str	r3, [sp, #16]
 800a062:	4649      	mov	r1, r9
 800a064:	2300      	movs	r3, #0
 800a066:	220a      	movs	r2, #10
 800a068:	4658      	mov	r0, fp
 800a06a:	f000 fdd1 	bl	800ac10 <__multadd>
 800a06e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a070:	4681      	mov	r9, r0
 800a072:	2b00      	cmp	r3, #0
 800a074:	f000 8172 	beq.w	800a35c <_dtoa_r+0xb4c>
 800a078:	2300      	movs	r3, #0
 800a07a:	4629      	mov	r1, r5
 800a07c:	220a      	movs	r2, #10
 800a07e:	4658      	mov	r0, fp
 800a080:	f000 fdc6 	bl	800ac10 <__multadd>
 800a084:	9b00      	ldr	r3, [sp, #0]
 800a086:	2b00      	cmp	r3, #0
 800a088:	4605      	mov	r5, r0
 800a08a:	dc67      	bgt.n	800a15c <_dtoa_r+0x94c>
 800a08c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a08e:	2b02      	cmp	r3, #2
 800a090:	dc41      	bgt.n	800a116 <_dtoa_r+0x906>
 800a092:	e063      	b.n	800a15c <_dtoa_r+0x94c>
 800a094:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800a096:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800a09a:	e746      	b.n	8009f2a <_dtoa_r+0x71a>
 800a09c:	9b07      	ldr	r3, [sp, #28]
 800a09e:	1e5c      	subs	r4, r3, #1
 800a0a0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a0a2:	42a3      	cmp	r3, r4
 800a0a4:	bfbf      	itttt	lt
 800a0a6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800a0a8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800a0aa:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800a0ac:	1ae3      	sublt	r3, r4, r3
 800a0ae:	bfb4      	ite	lt
 800a0b0:	18d2      	addlt	r2, r2, r3
 800a0b2:	1b1c      	subge	r4, r3, r4
 800a0b4:	9b07      	ldr	r3, [sp, #28]
 800a0b6:	bfbc      	itt	lt
 800a0b8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800a0ba:	2400      	movlt	r4, #0
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	bfb5      	itete	lt
 800a0c0:	eba8 0603 	sublt.w	r6, r8, r3
 800a0c4:	9b07      	ldrge	r3, [sp, #28]
 800a0c6:	2300      	movlt	r3, #0
 800a0c8:	4646      	movge	r6, r8
 800a0ca:	e730      	b.n	8009f2e <_dtoa_r+0x71e>
 800a0cc:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800a0ce:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800a0d0:	4646      	mov	r6, r8
 800a0d2:	e735      	b.n	8009f40 <_dtoa_r+0x730>
 800a0d4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a0d6:	e75c      	b.n	8009f92 <_dtoa_r+0x782>
 800a0d8:	2300      	movs	r3, #0
 800a0da:	e788      	b.n	8009fee <_dtoa_r+0x7de>
 800a0dc:	3fe00000 	.word	0x3fe00000
 800a0e0:	40240000 	.word	0x40240000
 800a0e4:	40140000 	.word	0x40140000
 800a0e8:	9b02      	ldr	r3, [sp, #8]
 800a0ea:	e780      	b.n	8009fee <_dtoa_r+0x7de>
 800a0ec:	2300      	movs	r3, #0
 800a0ee:	930a      	str	r3, [sp, #40]	@ 0x28
 800a0f0:	e782      	b.n	8009ff8 <_dtoa_r+0x7e8>
 800a0f2:	d099      	beq.n	800a028 <_dtoa_r+0x818>
 800a0f4:	9a08      	ldr	r2, [sp, #32]
 800a0f6:	331c      	adds	r3, #28
 800a0f8:	441a      	add	r2, r3
 800a0fa:	4498      	add	r8, r3
 800a0fc:	441e      	add	r6, r3
 800a0fe:	9208      	str	r2, [sp, #32]
 800a100:	e792      	b.n	800a028 <_dtoa_r+0x818>
 800a102:	4603      	mov	r3, r0
 800a104:	e7f6      	b.n	800a0f4 <_dtoa_r+0x8e4>
 800a106:	9b07      	ldr	r3, [sp, #28]
 800a108:	9704      	str	r7, [sp, #16]
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	dc20      	bgt.n	800a150 <_dtoa_r+0x940>
 800a10e:	9300      	str	r3, [sp, #0]
 800a110:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a112:	2b02      	cmp	r3, #2
 800a114:	dd1e      	ble.n	800a154 <_dtoa_r+0x944>
 800a116:	9b00      	ldr	r3, [sp, #0]
 800a118:	2b00      	cmp	r3, #0
 800a11a:	f47f aec0 	bne.w	8009e9e <_dtoa_r+0x68e>
 800a11e:	4621      	mov	r1, r4
 800a120:	2205      	movs	r2, #5
 800a122:	4658      	mov	r0, fp
 800a124:	f000 fd74 	bl	800ac10 <__multadd>
 800a128:	4601      	mov	r1, r0
 800a12a:	4604      	mov	r4, r0
 800a12c:	4648      	mov	r0, r9
 800a12e:	f000 ffd1 	bl	800b0d4 <__mcmp>
 800a132:	2800      	cmp	r0, #0
 800a134:	f77f aeb3 	ble.w	8009e9e <_dtoa_r+0x68e>
 800a138:	4656      	mov	r6, sl
 800a13a:	2331      	movs	r3, #49	@ 0x31
 800a13c:	f806 3b01 	strb.w	r3, [r6], #1
 800a140:	9b04      	ldr	r3, [sp, #16]
 800a142:	3301      	adds	r3, #1
 800a144:	9304      	str	r3, [sp, #16]
 800a146:	e6ae      	b.n	8009ea6 <_dtoa_r+0x696>
 800a148:	9c07      	ldr	r4, [sp, #28]
 800a14a:	9704      	str	r7, [sp, #16]
 800a14c:	4625      	mov	r5, r4
 800a14e:	e7f3      	b.n	800a138 <_dtoa_r+0x928>
 800a150:	9b07      	ldr	r3, [sp, #28]
 800a152:	9300      	str	r3, [sp, #0]
 800a154:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a156:	2b00      	cmp	r3, #0
 800a158:	f000 8104 	beq.w	800a364 <_dtoa_r+0xb54>
 800a15c:	2e00      	cmp	r6, #0
 800a15e:	dd05      	ble.n	800a16c <_dtoa_r+0x95c>
 800a160:	4629      	mov	r1, r5
 800a162:	4632      	mov	r2, r6
 800a164:	4658      	mov	r0, fp
 800a166:	f000 ff49 	bl	800affc <__lshift>
 800a16a:	4605      	mov	r5, r0
 800a16c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d05a      	beq.n	800a228 <_dtoa_r+0xa18>
 800a172:	6869      	ldr	r1, [r5, #4]
 800a174:	4658      	mov	r0, fp
 800a176:	f000 fce9 	bl	800ab4c <_Balloc>
 800a17a:	4606      	mov	r6, r0
 800a17c:	b928      	cbnz	r0, 800a18a <_dtoa_r+0x97a>
 800a17e:	4b84      	ldr	r3, [pc, #528]	@ (800a390 <_dtoa_r+0xb80>)
 800a180:	4602      	mov	r2, r0
 800a182:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800a186:	f7ff bb5a 	b.w	800983e <_dtoa_r+0x2e>
 800a18a:	692a      	ldr	r2, [r5, #16]
 800a18c:	3202      	adds	r2, #2
 800a18e:	0092      	lsls	r2, r2, #2
 800a190:	f105 010c 	add.w	r1, r5, #12
 800a194:	300c      	adds	r0, #12
 800a196:	f7ff fa8c 	bl	80096b2 <memcpy>
 800a19a:	2201      	movs	r2, #1
 800a19c:	4631      	mov	r1, r6
 800a19e:	4658      	mov	r0, fp
 800a1a0:	f000 ff2c 	bl	800affc <__lshift>
 800a1a4:	f10a 0301 	add.w	r3, sl, #1
 800a1a8:	9307      	str	r3, [sp, #28]
 800a1aa:	9b00      	ldr	r3, [sp, #0]
 800a1ac:	4453      	add	r3, sl
 800a1ae:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a1b0:	9b02      	ldr	r3, [sp, #8]
 800a1b2:	f003 0301 	and.w	r3, r3, #1
 800a1b6:	462f      	mov	r7, r5
 800a1b8:	930a      	str	r3, [sp, #40]	@ 0x28
 800a1ba:	4605      	mov	r5, r0
 800a1bc:	9b07      	ldr	r3, [sp, #28]
 800a1be:	4621      	mov	r1, r4
 800a1c0:	3b01      	subs	r3, #1
 800a1c2:	4648      	mov	r0, r9
 800a1c4:	9300      	str	r3, [sp, #0]
 800a1c6:	f7ff fa99 	bl	80096fc <quorem>
 800a1ca:	4639      	mov	r1, r7
 800a1cc:	9002      	str	r0, [sp, #8]
 800a1ce:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800a1d2:	4648      	mov	r0, r9
 800a1d4:	f000 ff7e 	bl	800b0d4 <__mcmp>
 800a1d8:	462a      	mov	r2, r5
 800a1da:	9008      	str	r0, [sp, #32]
 800a1dc:	4621      	mov	r1, r4
 800a1de:	4658      	mov	r0, fp
 800a1e0:	f000 ff94 	bl	800b10c <__mdiff>
 800a1e4:	68c2      	ldr	r2, [r0, #12]
 800a1e6:	4606      	mov	r6, r0
 800a1e8:	bb02      	cbnz	r2, 800a22c <_dtoa_r+0xa1c>
 800a1ea:	4601      	mov	r1, r0
 800a1ec:	4648      	mov	r0, r9
 800a1ee:	f000 ff71 	bl	800b0d4 <__mcmp>
 800a1f2:	4602      	mov	r2, r0
 800a1f4:	4631      	mov	r1, r6
 800a1f6:	4658      	mov	r0, fp
 800a1f8:	920e      	str	r2, [sp, #56]	@ 0x38
 800a1fa:	f000 fce7 	bl	800abcc <_Bfree>
 800a1fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a200:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a202:	9e07      	ldr	r6, [sp, #28]
 800a204:	ea43 0102 	orr.w	r1, r3, r2
 800a208:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a20a:	4319      	orrs	r1, r3
 800a20c:	d110      	bne.n	800a230 <_dtoa_r+0xa20>
 800a20e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a212:	d029      	beq.n	800a268 <_dtoa_r+0xa58>
 800a214:	9b08      	ldr	r3, [sp, #32]
 800a216:	2b00      	cmp	r3, #0
 800a218:	dd02      	ble.n	800a220 <_dtoa_r+0xa10>
 800a21a:	9b02      	ldr	r3, [sp, #8]
 800a21c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800a220:	9b00      	ldr	r3, [sp, #0]
 800a222:	f883 8000 	strb.w	r8, [r3]
 800a226:	e63f      	b.n	8009ea8 <_dtoa_r+0x698>
 800a228:	4628      	mov	r0, r5
 800a22a:	e7bb      	b.n	800a1a4 <_dtoa_r+0x994>
 800a22c:	2201      	movs	r2, #1
 800a22e:	e7e1      	b.n	800a1f4 <_dtoa_r+0x9e4>
 800a230:	9b08      	ldr	r3, [sp, #32]
 800a232:	2b00      	cmp	r3, #0
 800a234:	db04      	blt.n	800a240 <_dtoa_r+0xa30>
 800a236:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a238:	430b      	orrs	r3, r1
 800a23a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a23c:	430b      	orrs	r3, r1
 800a23e:	d120      	bne.n	800a282 <_dtoa_r+0xa72>
 800a240:	2a00      	cmp	r2, #0
 800a242:	dded      	ble.n	800a220 <_dtoa_r+0xa10>
 800a244:	4649      	mov	r1, r9
 800a246:	2201      	movs	r2, #1
 800a248:	4658      	mov	r0, fp
 800a24a:	f000 fed7 	bl	800affc <__lshift>
 800a24e:	4621      	mov	r1, r4
 800a250:	4681      	mov	r9, r0
 800a252:	f000 ff3f 	bl	800b0d4 <__mcmp>
 800a256:	2800      	cmp	r0, #0
 800a258:	dc03      	bgt.n	800a262 <_dtoa_r+0xa52>
 800a25a:	d1e1      	bne.n	800a220 <_dtoa_r+0xa10>
 800a25c:	f018 0f01 	tst.w	r8, #1
 800a260:	d0de      	beq.n	800a220 <_dtoa_r+0xa10>
 800a262:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a266:	d1d8      	bne.n	800a21a <_dtoa_r+0xa0a>
 800a268:	9a00      	ldr	r2, [sp, #0]
 800a26a:	2339      	movs	r3, #57	@ 0x39
 800a26c:	7013      	strb	r3, [r2, #0]
 800a26e:	4633      	mov	r3, r6
 800a270:	461e      	mov	r6, r3
 800a272:	3b01      	subs	r3, #1
 800a274:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800a278:	2a39      	cmp	r2, #57	@ 0x39
 800a27a:	d052      	beq.n	800a322 <_dtoa_r+0xb12>
 800a27c:	3201      	adds	r2, #1
 800a27e:	701a      	strb	r2, [r3, #0]
 800a280:	e612      	b.n	8009ea8 <_dtoa_r+0x698>
 800a282:	2a00      	cmp	r2, #0
 800a284:	dd07      	ble.n	800a296 <_dtoa_r+0xa86>
 800a286:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a28a:	d0ed      	beq.n	800a268 <_dtoa_r+0xa58>
 800a28c:	9a00      	ldr	r2, [sp, #0]
 800a28e:	f108 0301 	add.w	r3, r8, #1
 800a292:	7013      	strb	r3, [r2, #0]
 800a294:	e608      	b.n	8009ea8 <_dtoa_r+0x698>
 800a296:	9b07      	ldr	r3, [sp, #28]
 800a298:	9a07      	ldr	r2, [sp, #28]
 800a29a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800a29e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a2a0:	4293      	cmp	r3, r2
 800a2a2:	d028      	beq.n	800a2f6 <_dtoa_r+0xae6>
 800a2a4:	4649      	mov	r1, r9
 800a2a6:	2300      	movs	r3, #0
 800a2a8:	220a      	movs	r2, #10
 800a2aa:	4658      	mov	r0, fp
 800a2ac:	f000 fcb0 	bl	800ac10 <__multadd>
 800a2b0:	42af      	cmp	r7, r5
 800a2b2:	4681      	mov	r9, r0
 800a2b4:	f04f 0300 	mov.w	r3, #0
 800a2b8:	f04f 020a 	mov.w	r2, #10
 800a2bc:	4639      	mov	r1, r7
 800a2be:	4658      	mov	r0, fp
 800a2c0:	d107      	bne.n	800a2d2 <_dtoa_r+0xac2>
 800a2c2:	f000 fca5 	bl	800ac10 <__multadd>
 800a2c6:	4607      	mov	r7, r0
 800a2c8:	4605      	mov	r5, r0
 800a2ca:	9b07      	ldr	r3, [sp, #28]
 800a2cc:	3301      	adds	r3, #1
 800a2ce:	9307      	str	r3, [sp, #28]
 800a2d0:	e774      	b.n	800a1bc <_dtoa_r+0x9ac>
 800a2d2:	f000 fc9d 	bl	800ac10 <__multadd>
 800a2d6:	4629      	mov	r1, r5
 800a2d8:	4607      	mov	r7, r0
 800a2da:	2300      	movs	r3, #0
 800a2dc:	220a      	movs	r2, #10
 800a2de:	4658      	mov	r0, fp
 800a2e0:	f000 fc96 	bl	800ac10 <__multadd>
 800a2e4:	4605      	mov	r5, r0
 800a2e6:	e7f0      	b.n	800a2ca <_dtoa_r+0xaba>
 800a2e8:	9b00      	ldr	r3, [sp, #0]
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	bfcc      	ite	gt
 800a2ee:	461e      	movgt	r6, r3
 800a2f0:	2601      	movle	r6, #1
 800a2f2:	4456      	add	r6, sl
 800a2f4:	2700      	movs	r7, #0
 800a2f6:	4649      	mov	r1, r9
 800a2f8:	2201      	movs	r2, #1
 800a2fa:	4658      	mov	r0, fp
 800a2fc:	f000 fe7e 	bl	800affc <__lshift>
 800a300:	4621      	mov	r1, r4
 800a302:	4681      	mov	r9, r0
 800a304:	f000 fee6 	bl	800b0d4 <__mcmp>
 800a308:	2800      	cmp	r0, #0
 800a30a:	dcb0      	bgt.n	800a26e <_dtoa_r+0xa5e>
 800a30c:	d102      	bne.n	800a314 <_dtoa_r+0xb04>
 800a30e:	f018 0f01 	tst.w	r8, #1
 800a312:	d1ac      	bne.n	800a26e <_dtoa_r+0xa5e>
 800a314:	4633      	mov	r3, r6
 800a316:	461e      	mov	r6, r3
 800a318:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a31c:	2a30      	cmp	r2, #48	@ 0x30
 800a31e:	d0fa      	beq.n	800a316 <_dtoa_r+0xb06>
 800a320:	e5c2      	b.n	8009ea8 <_dtoa_r+0x698>
 800a322:	459a      	cmp	sl, r3
 800a324:	d1a4      	bne.n	800a270 <_dtoa_r+0xa60>
 800a326:	9b04      	ldr	r3, [sp, #16]
 800a328:	3301      	adds	r3, #1
 800a32a:	9304      	str	r3, [sp, #16]
 800a32c:	2331      	movs	r3, #49	@ 0x31
 800a32e:	f88a 3000 	strb.w	r3, [sl]
 800a332:	e5b9      	b.n	8009ea8 <_dtoa_r+0x698>
 800a334:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a336:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800a394 <_dtoa_r+0xb84>
 800a33a:	b11b      	cbz	r3, 800a344 <_dtoa_r+0xb34>
 800a33c:	f10a 0308 	add.w	r3, sl, #8
 800a340:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800a342:	6013      	str	r3, [r2, #0]
 800a344:	4650      	mov	r0, sl
 800a346:	b019      	add	sp, #100	@ 0x64
 800a348:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a34c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a34e:	2b01      	cmp	r3, #1
 800a350:	f77f ae37 	ble.w	8009fc2 <_dtoa_r+0x7b2>
 800a354:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a356:	930a      	str	r3, [sp, #40]	@ 0x28
 800a358:	2001      	movs	r0, #1
 800a35a:	e655      	b.n	800a008 <_dtoa_r+0x7f8>
 800a35c:	9b00      	ldr	r3, [sp, #0]
 800a35e:	2b00      	cmp	r3, #0
 800a360:	f77f aed6 	ble.w	800a110 <_dtoa_r+0x900>
 800a364:	4656      	mov	r6, sl
 800a366:	4621      	mov	r1, r4
 800a368:	4648      	mov	r0, r9
 800a36a:	f7ff f9c7 	bl	80096fc <quorem>
 800a36e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800a372:	f806 8b01 	strb.w	r8, [r6], #1
 800a376:	9b00      	ldr	r3, [sp, #0]
 800a378:	eba6 020a 	sub.w	r2, r6, sl
 800a37c:	4293      	cmp	r3, r2
 800a37e:	ddb3      	ble.n	800a2e8 <_dtoa_r+0xad8>
 800a380:	4649      	mov	r1, r9
 800a382:	2300      	movs	r3, #0
 800a384:	220a      	movs	r2, #10
 800a386:	4658      	mov	r0, fp
 800a388:	f000 fc42 	bl	800ac10 <__multadd>
 800a38c:	4681      	mov	r9, r0
 800a38e:	e7ea      	b.n	800a366 <_dtoa_r+0xb56>
 800a390:	0800d13a 	.word	0x0800d13a
 800a394:	0800d0be 	.word	0x0800d0be

0800a398 <_free_r>:
 800a398:	b538      	push	{r3, r4, r5, lr}
 800a39a:	4605      	mov	r5, r0
 800a39c:	2900      	cmp	r1, #0
 800a39e:	d041      	beq.n	800a424 <_free_r+0x8c>
 800a3a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a3a4:	1f0c      	subs	r4, r1, #4
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	bfb8      	it	lt
 800a3aa:	18e4      	addlt	r4, r4, r3
 800a3ac:	f7fc fc94 	bl	8006cd8 <__malloc_lock>
 800a3b0:	4a1d      	ldr	r2, [pc, #116]	@ (800a428 <_free_r+0x90>)
 800a3b2:	6813      	ldr	r3, [r2, #0]
 800a3b4:	b933      	cbnz	r3, 800a3c4 <_free_r+0x2c>
 800a3b6:	6063      	str	r3, [r4, #4]
 800a3b8:	6014      	str	r4, [r2, #0]
 800a3ba:	4628      	mov	r0, r5
 800a3bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a3c0:	f7fc bc90 	b.w	8006ce4 <__malloc_unlock>
 800a3c4:	42a3      	cmp	r3, r4
 800a3c6:	d908      	bls.n	800a3da <_free_r+0x42>
 800a3c8:	6820      	ldr	r0, [r4, #0]
 800a3ca:	1821      	adds	r1, r4, r0
 800a3cc:	428b      	cmp	r3, r1
 800a3ce:	bf01      	itttt	eq
 800a3d0:	6819      	ldreq	r1, [r3, #0]
 800a3d2:	685b      	ldreq	r3, [r3, #4]
 800a3d4:	1809      	addeq	r1, r1, r0
 800a3d6:	6021      	streq	r1, [r4, #0]
 800a3d8:	e7ed      	b.n	800a3b6 <_free_r+0x1e>
 800a3da:	461a      	mov	r2, r3
 800a3dc:	685b      	ldr	r3, [r3, #4]
 800a3de:	b10b      	cbz	r3, 800a3e4 <_free_r+0x4c>
 800a3e0:	42a3      	cmp	r3, r4
 800a3e2:	d9fa      	bls.n	800a3da <_free_r+0x42>
 800a3e4:	6811      	ldr	r1, [r2, #0]
 800a3e6:	1850      	adds	r0, r2, r1
 800a3e8:	42a0      	cmp	r0, r4
 800a3ea:	d10b      	bne.n	800a404 <_free_r+0x6c>
 800a3ec:	6820      	ldr	r0, [r4, #0]
 800a3ee:	4401      	add	r1, r0
 800a3f0:	1850      	adds	r0, r2, r1
 800a3f2:	4283      	cmp	r3, r0
 800a3f4:	6011      	str	r1, [r2, #0]
 800a3f6:	d1e0      	bne.n	800a3ba <_free_r+0x22>
 800a3f8:	6818      	ldr	r0, [r3, #0]
 800a3fa:	685b      	ldr	r3, [r3, #4]
 800a3fc:	6053      	str	r3, [r2, #4]
 800a3fe:	4408      	add	r0, r1
 800a400:	6010      	str	r0, [r2, #0]
 800a402:	e7da      	b.n	800a3ba <_free_r+0x22>
 800a404:	d902      	bls.n	800a40c <_free_r+0x74>
 800a406:	230c      	movs	r3, #12
 800a408:	602b      	str	r3, [r5, #0]
 800a40a:	e7d6      	b.n	800a3ba <_free_r+0x22>
 800a40c:	6820      	ldr	r0, [r4, #0]
 800a40e:	1821      	adds	r1, r4, r0
 800a410:	428b      	cmp	r3, r1
 800a412:	bf04      	itt	eq
 800a414:	6819      	ldreq	r1, [r3, #0]
 800a416:	685b      	ldreq	r3, [r3, #4]
 800a418:	6063      	str	r3, [r4, #4]
 800a41a:	bf04      	itt	eq
 800a41c:	1809      	addeq	r1, r1, r0
 800a41e:	6021      	streq	r1, [r4, #0]
 800a420:	6054      	str	r4, [r2, #4]
 800a422:	e7ca      	b.n	800a3ba <_free_r+0x22>
 800a424:	bd38      	pop	{r3, r4, r5, pc}
 800a426:	bf00      	nop
 800a428:	20006c58 	.word	0x20006c58

0800a42c <rshift>:
 800a42c:	6903      	ldr	r3, [r0, #16]
 800a42e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800a432:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a436:	ea4f 1261 	mov.w	r2, r1, asr #5
 800a43a:	f100 0414 	add.w	r4, r0, #20
 800a43e:	dd45      	ble.n	800a4cc <rshift+0xa0>
 800a440:	f011 011f 	ands.w	r1, r1, #31
 800a444:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800a448:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800a44c:	d10c      	bne.n	800a468 <rshift+0x3c>
 800a44e:	f100 0710 	add.w	r7, r0, #16
 800a452:	4629      	mov	r1, r5
 800a454:	42b1      	cmp	r1, r6
 800a456:	d334      	bcc.n	800a4c2 <rshift+0x96>
 800a458:	1a9b      	subs	r3, r3, r2
 800a45a:	009b      	lsls	r3, r3, #2
 800a45c:	1eea      	subs	r2, r5, #3
 800a45e:	4296      	cmp	r6, r2
 800a460:	bf38      	it	cc
 800a462:	2300      	movcc	r3, #0
 800a464:	4423      	add	r3, r4
 800a466:	e015      	b.n	800a494 <rshift+0x68>
 800a468:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800a46c:	f1c1 0820 	rsb	r8, r1, #32
 800a470:	40cf      	lsrs	r7, r1
 800a472:	f105 0e04 	add.w	lr, r5, #4
 800a476:	46a1      	mov	r9, r4
 800a478:	4576      	cmp	r6, lr
 800a47a:	46f4      	mov	ip, lr
 800a47c:	d815      	bhi.n	800a4aa <rshift+0x7e>
 800a47e:	1a9a      	subs	r2, r3, r2
 800a480:	0092      	lsls	r2, r2, #2
 800a482:	3a04      	subs	r2, #4
 800a484:	3501      	adds	r5, #1
 800a486:	42ae      	cmp	r6, r5
 800a488:	bf38      	it	cc
 800a48a:	2200      	movcc	r2, #0
 800a48c:	18a3      	adds	r3, r4, r2
 800a48e:	50a7      	str	r7, [r4, r2]
 800a490:	b107      	cbz	r7, 800a494 <rshift+0x68>
 800a492:	3304      	adds	r3, #4
 800a494:	1b1a      	subs	r2, r3, r4
 800a496:	42a3      	cmp	r3, r4
 800a498:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a49c:	bf08      	it	eq
 800a49e:	2300      	moveq	r3, #0
 800a4a0:	6102      	str	r2, [r0, #16]
 800a4a2:	bf08      	it	eq
 800a4a4:	6143      	streq	r3, [r0, #20]
 800a4a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a4aa:	f8dc c000 	ldr.w	ip, [ip]
 800a4ae:	fa0c fc08 	lsl.w	ip, ip, r8
 800a4b2:	ea4c 0707 	orr.w	r7, ip, r7
 800a4b6:	f849 7b04 	str.w	r7, [r9], #4
 800a4ba:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a4be:	40cf      	lsrs	r7, r1
 800a4c0:	e7da      	b.n	800a478 <rshift+0x4c>
 800a4c2:	f851 cb04 	ldr.w	ip, [r1], #4
 800a4c6:	f847 cf04 	str.w	ip, [r7, #4]!
 800a4ca:	e7c3      	b.n	800a454 <rshift+0x28>
 800a4cc:	4623      	mov	r3, r4
 800a4ce:	e7e1      	b.n	800a494 <rshift+0x68>

0800a4d0 <__hexdig_fun>:
 800a4d0:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800a4d4:	2b09      	cmp	r3, #9
 800a4d6:	d802      	bhi.n	800a4de <__hexdig_fun+0xe>
 800a4d8:	3820      	subs	r0, #32
 800a4da:	b2c0      	uxtb	r0, r0
 800a4dc:	4770      	bx	lr
 800a4de:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800a4e2:	2b05      	cmp	r3, #5
 800a4e4:	d801      	bhi.n	800a4ea <__hexdig_fun+0x1a>
 800a4e6:	3847      	subs	r0, #71	@ 0x47
 800a4e8:	e7f7      	b.n	800a4da <__hexdig_fun+0xa>
 800a4ea:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800a4ee:	2b05      	cmp	r3, #5
 800a4f0:	d801      	bhi.n	800a4f6 <__hexdig_fun+0x26>
 800a4f2:	3827      	subs	r0, #39	@ 0x27
 800a4f4:	e7f1      	b.n	800a4da <__hexdig_fun+0xa>
 800a4f6:	2000      	movs	r0, #0
 800a4f8:	4770      	bx	lr
	...

0800a4fc <__gethex>:
 800a4fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a500:	b085      	sub	sp, #20
 800a502:	468a      	mov	sl, r1
 800a504:	9302      	str	r3, [sp, #8]
 800a506:	680b      	ldr	r3, [r1, #0]
 800a508:	9001      	str	r0, [sp, #4]
 800a50a:	4690      	mov	r8, r2
 800a50c:	1c9c      	adds	r4, r3, #2
 800a50e:	46a1      	mov	r9, r4
 800a510:	f814 0b01 	ldrb.w	r0, [r4], #1
 800a514:	2830      	cmp	r0, #48	@ 0x30
 800a516:	d0fa      	beq.n	800a50e <__gethex+0x12>
 800a518:	eba9 0303 	sub.w	r3, r9, r3
 800a51c:	f1a3 0b02 	sub.w	fp, r3, #2
 800a520:	f7ff ffd6 	bl	800a4d0 <__hexdig_fun>
 800a524:	4605      	mov	r5, r0
 800a526:	2800      	cmp	r0, #0
 800a528:	d168      	bne.n	800a5fc <__gethex+0x100>
 800a52a:	49a0      	ldr	r1, [pc, #640]	@ (800a7ac <__gethex+0x2b0>)
 800a52c:	2201      	movs	r2, #1
 800a52e:	4648      	mov	r0, r9
 800a530:	f7fe faa3 	bl	8008a7a <strncmp>
 800a534:	4607      	mov	r7, r0
 800a536:	2800      	cmp	r0, #0
 800a538:	d167      	bne.n	800a60a <__gethex+0x10e>
 800a53a:	f899 0001 	ldrb.w	r0, [r9, #1]
 800a53e:	4626      	mov	r6, r4
 800a540:	f7ff ffc6 	bl	800a4d0 <__hexdig_fun>
 800a544:	2800      	cmp	r0, #0
 800a546:	d062      	beq.n	800a60e <__gethex+0x112>
 800a548:	4623      	mov	r3, r4
 800a54a:	7818      	ldrb	r0, [r3, #0]
 800a54c:	2830      	cmp	r0, #48	@ 0x30
 800a54e:	4699      	mov	r9, r3
 800a550:	f103 0301 	add.w	r3, r3, #1
 800a554:	d0f9      	beq.n	800a54a <__gethex+0x4e>
 800a556:	f7ff ffbb 	bl	800a4d0 <__hexdig_fun>
 800a55a:	fab0 f580 	clz	r5, r0
 800a55e:	096d      	lsrs	r5, r5, #5
 800a560:	f04f 0b01 	mov.w	fp, #1
 800a564:	464a      	mov	r2, r9
 800a566:	4616      	mov	r6, r2
 800a568:	3201      	adds	r2, #1
 800a56a:	7830      	ldrb	r0, [r6, #0]
 800a56c:	f7ff ffb0 	bl	800a4d0 <__hexdig_fun>
 800a570:	2800      	cmp	r0, #0
 800a572:	d1f8      	bne.n	800a566 <__gethex+0x6a>
 800a574:	498d      	ldr	r1, [pc, #564]	@ (800a7ac <__gethex+0x2b0>)
 800a576:	2201      	movs	r2, #1
 800a578:	4630      	mov	r0, r6
 800a57a:	f7fe fa7e 	bl	8008a7a <strncmp>
 800a57e:	2800      	cmp	r0, #0
 800a580:	d13f      	bne.n	800a602 <__gethex+0x106>
 800a582:	b944      	cbnz	r4, 800a596 <__gethex+0x9a>
 800a584:	1c74      	adds	r4, r6, #1
 800a586:	4622      	mov	r2, r4
 800a588:	4616      	mov	r6, r2
 800a58a:	3201      	adds	r2, #1
 800a58c:	7830      	ldrb	r0, [r6, #0]
 800a58e:	f7ff ff9f 	bl	800a4d0 <__hexdig_fun>
 800a592:	2800      	cmp	r0, #0
 800a594:	d1f8      	bne.n	800a588 <__gethex+0x8c>
 800a596:	1ba4      	subs	r4, r4, r6
 800a598:	00a7      	lsls	r7, r4, #2
 800a59a:	7833      	ldrb	r3, [r6, #0]
 800a59c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800a5a0:	2b50      	cmp	r3, #80	@ 0x50
 800a5a2:	d13e      	bne.n	800a622 <__gethex+0x126>
 800a5a4:	7873      	ldrb	r3, [r6, #1]
 800a5a6:	2b2b      	cmp	r3, #43	@ 0x2b
 800a5a8:	d033      	beq.n	800a612 <__gethex+0x116>
 800a5aa:	2b2d      	cmp	r3, #45	@ 0x2d
 800a5ac:	d034      	beq.n	800a618 <__gethex+0x11c>
 800a5ae:	1c71      	adds	r1, r6, #1
 800a5b0:	2400      	movs	r4, #0
 800a5b2:	7808      	ldrb	r0, [r1, #0]
 800a5b4:	f7ff ff8c 	bl	800a4d0 <__hexdig_fun>
 800a5b8:	1e43      	subs	r3, r0, #1
 800a5ba:	b2db      	uxtb	r3, r3
 800a5bc:	2b18      	cmp	r3, #24
 800a5be:	d830      	bhi.n	800a622 <__gethex+0x126>
 800a5c0:	f1a0 0210 	sub.w	r2, r0, #16
 800a5c4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a5c8:	f7ff ff82 	bl	800a4d0 <__hexdig_fun>
 800a5cc:	f100 3cff 	add.w	ip, r0, #4294967295
 800a5d0:	fa5f fc8c 	uxtb.w	ip, ip
 800a5d4:	f1bc 0f18 	cmp.w	ip, #24
 800a5d8:	f04f 030a 	mov.w	r3, #10
 800a5dc:	d91e      	bls.n	800a61c <__gethex+0x120>
 800a5de:	b104      	cbz	r4, 800a5e2 <__gethex+0xe6>
 800a5e0:	4252      	negs	r2, r2
 800a5e2:	4417      	add	r7, r2
 800a5e4:	f8ca 1000 	str.w	r1, [sl]
 800a5e8:	b1ed      	cbz	r5, 800a626 <__gethex+0x12a>
 800a5ea:	f1bb 0f00 	cmp.w	fp, #0
 800a5ee:	bf0c      	ite	eq
 800a5f0:	2506      	moveq	r5, #6
 800a5f2:	2500      	movne	r5, #0
 800a5f4:	4628      	mov	r0, r5
 800a5f6:	b005      	add	sp, #20
 800a5f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a5fc:	2500      	movs	r5, #0
 800a5fe:	462c      	mov	r4, r5
 800a600:	e7b0      	b.n	800a564 <__gethex+0x68>
 800a602:	2c00      	cmp	r4, #0
 800a604:	d1c7      	bne.n	800a596 <__gethex+0x9a>
 800a606:	4627      	mov	r7, r4
 800a608:	e7c7      	b.n	800a59a <__gethex+0x9e>
 800a60a:	464e      	mov	r6, r9
 800a60c:	462f      	mov	r7, r5
 800a60e:	2501      	movs	r5, #1
 800a610:	e7c3      	b.n	800a59a <__gethex+0x9e>
 800a612:	2400      	movs	r4, #0
 800a614:	1cb1      	adds	r1, r6, #2
 800a616:	e7cc      	b.n	800a5b2 <__gethex+0xb6>
 800a618:	2401      	movs	r4, #1
 800a61a:	e7fb      	b.n	800a614 <__gethex+0x118>
 800a61c:	fb03 0002 	mla	r0, r3, r2, r0
 800a620:	e7ce      	b.n	800a5c0 <__gethex+0xc4>
 800a622:	4631      	mov	r1, r6
 800a624:	e7de      	b.n	800a5e4 <__gethex+0xe8>
 800a626:	eba6 0309 	sub.w	r3, r6, r9
 800a62a:	3b01      	subs	r3, #1
 800a62c:	4629      	mov	r1, r5
 800a62e:	2b07      	cmp	r3, #7
 800a630:	dc0a      	bgt.n	800a648 <__gethex+0x14c>
 800a632:	9801      	ldr	r0, [sp, #4]
 800a634:	f000 fa8a 	bl	800ab4c <_Balloc>
 800a638:	4604      	mov	r4, r0
 800a63a:	b940      	cbnz	r0, 800a64e <__gethex+0x152>
 800a63c:	4b5c      	ldr	r3, [pc, #368]	@ (800a7b0 <__gethex+0x2b4>)
 800a63e:	4602      	mov	r2, r0
 800a640:	21e4      	movs	r1, #228	@ 0xe4
 800a642:	485c      	ldr	r0, [pc, #368]	@ (800a7b4 <__gethex+0x2b8>)
 800a644:	f001 fd6a 	bl	800c11c <__assert_func>
 800a648:	3101      	adds	r1, #1
 800a64a:	105b      	asrs	r3, r3, #1
 800a64c:	e7ef      	b.n	800a62e <__gethex+0x132>
 800a64e:	f100 0a14 	add.w	sl, r0, #20
 800a652:	2300      	movs	r3, #0
 800a654:	4655      	mov	r5, sl
 800a656:	469b      	mov	fp, r3
 800a658:	45b1      	cmp	r9, r6
 800a65a:	d337      	bcc.n	800a6cc <__gethex+0x1d0>
 800a65c:	f845 bb04 	str.w	fp, [r5], #4
 800a660:	eba5 050a 	sub.w	r5, r5, sl
 800a664:	10ad      	asrs	r5, r5, #2
 800a666:	6125      	str	r5, [r4, #16]
 800a668:	4658      	mov	r0, fp
 800a66a:	f000 fb61 	bl	800ad30 <__hi0bits>
 800a66e:	016d      	lsls	r5, r5, #5
 800a670:	f8d8 6000 	ldr.w	r6, [r8]
 800a674:	1a2d      	subs	r5, r5, r0
 800a676:	42b5      	cmp	r5, r6
 800a678:	dd54      	ble.n	800a724 <__gethex+0x228>
 800a67a:	1bad      	subs	r5, r5, r6
 800a67c:	4629      	mov	r1, r5
 800a67e:	4620      	mov	r0, r4
 800a680:	f000 fef5 	bl	800b46e <__any_on>
 800a684:	4681      	mov	r9, r0
 800a686:	b178      	cbz	r0, 800a6a8 <__gethex+0x1ac>
 800a688:	1e6b      	subs	r3, r5, #1
 800a68a:	1159      	asrs	r1, r3, #5
 800a68c:	f003 021f 	and.w	r2, r3, #31
 800a690:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800a694:	f04f 0901 	mov.w	r9, #1
 800a698:	fa09 f202 	lsl.w	r2, r9, r2
 800a69c:	420a      	tst	r2, r1
 800a69e:	d003      	beq.n	800a6a8 <__gethex+0x1ac>
 800a6a0:	454b      	cmp	r3, r9
 800a6a2:	dc36      	bgt.n	800a712 <__gethex+0x216>
 800a6a4:	f04f 0902 	mov.w	r9, #2
 800a6a8:	4629      	mov	r1, r5
 800a6aa:	4620      	mov	r0, r4
 800a6ac:	f7ff febe 	bl	800a42c <rshift>
 800a6b0:	442f      	add	r7, r5
 800a6b2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a6b6:	42bb      	cmp	r3, r7
 800a6b8:	da42      	bge.n	800a740 <__gethex+0x244>
 800a6ba:	9801      	ldr	r0, [sp, #4]
 800a6bc:	4621      	mov	r1, r4
 800a6be:	f000 fa85 	bl	800abcc <_Bfree>
 800a6c2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a6c4:	2300      	movs	r3, #0
 800a6c6:	6013      	str	r3, [r2, #0]
 800a6c8:	25a3      	movs	r5, #163	@ 0xa3
 800a6ca:	e793      	b.n	800a5f4 <__gethex+0xf8>
 800a6cc:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800a6d0:	2a2e      	cmp	r2, #46	@ 0x2e
 800a6d2:	d012      	beq.n	800a6fa <__gethex+0x1fe>
 800a6d4:	2b20      	cmp	r3, #32
 800a6d6:	d104      	bne.n	800a6e2 <__gethex+0x1e6>
 800a6d8:	f845 bb04 	str.w	fp, [r5], #4
 800a6dc:	f04f 0b00 	mov.w	fp, #0
 800a6e0:	465b      	mov	r3, fp
 800a6e2:	7830      	ldrb	r0, [r6, #0]
 800a6e4:	9303      	str	r3, [sp, #12]
 800a6e6:	f7ff fef3 	bl	800a4d0 <__hexdig_fun>
 800a6ea:	9b03      	ldr	r3, [sp, #12]
 800a6ec:	f000 000f 	and.w	r0, r0, #15
 800a6f0:	4098      	lsls	r0, r3
 800a6f2:	ea4b 0b00 	orr.w	fp, fp, r0
 800a6f6:	3304      	adds	r3, #4
 800a6f8:	e7ae      	b.n	800a658 <__gethex+0x15c>
 800a6fa:	45b1      	cmp	r9, r6
 800a6fc:	d8ea      	bhi.n	800a6d4 <__gethex+0x1d8>
 800a6fe:	492b      	ldr	r1, [pc, #172]	@ (800a7ac <__gethex+0x2b0>)
 800a700:	9303      	str	r3, [sp, #12]
 800a702:	2201      	movs	r2, #1
 800a704:	4630      	mov	r0, r6
 800a706:	f7fe f9b8 	bl	8008a7a <strncmp>
 800a70a:	9b03      	ldr	r3, [sp, #12]
 800a70c:	2800      	cmp	r0, #0
 800a70e:	d1e1      	bne.n	800a6d4 <__gethex+0x1d8>
 800a710:	e7a2      	b.n	800a658 <__gethex+0x15c>
 800a712:	1ea9      	subs	r1, r5, #2
 800a714:	4620      	mov	r0, r4
 800a716:	f000 feaa 	bl	800b46e <__any_on>
 800a71a:	2800      	cmp	r0, #0
 800a71c:	d0c2      	beq.n	800a6a4 <__gethex+0x1a8>
 800a71e:	f04f 0903 	mov.w	r9, #3
 800a722:	e7c1      	b.n	800a6a8 <__gethex+0x1ac>
 800a724:	da09      	bge.n	800a73a <__gethex+0x23e>
 800a726:	1b75      	subs	r5, r6, r5
 800a728:	4621      	mov	r1, r4
 800a72a:	9801      	ldr	r0, [sp, #4]
 800a72c:	462a      	mov	r2, r5
 800a72e:	f000 fc65 	bl	800affc <__lshift>
 800a732:	1b7f      	subs	r7, r7, r5
 800a734:	4604      	mov	r4, r0
 800a736:	f100 0a14 	add.w	sl, r0, #20
 800a73a:	f04f 0900 	mov.w	r9, #0
 800a73e:	e7b8      	b.n	800a6b2 <__gethex+0x1b6>
 800a740:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800a744:	42bd      	cmp	r5, r7
 800a746:	dd6f      	ble.n	800a828 <__gethex+0x32c>
 800a748:	1bed      	subs	r5, r5, r7
 800a74a:	42ae      	cmp	r6, r5
 800a74c:	dc34      	bgt.n	800a7b8 <__gethex+0x2bc>
 800a74e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a752:	2b02      	cmp	r3, #2
 800a754:	d022      	beq.n	800a79c <__gethex+0x2a0>
 800a756:	2b03      	cmp	r3, #3
 800a758:	d024      	beq.n	800a7a4 <__gethex+0x2a8>
 800a75a:	2b01      	cmp	r3, #1
 800a75c:	d115      	bne.n	800a78a <__gethex+0x28e>
 800a75e:	42ae      	cmp	r6, r5
 800a760:	d113      	bne.n	800a78a <__gethex+0x28e>
 800a762:	2e01      	cmp	r6, #1
 800a764:	d10b      	bne.n	800a77e <__gethex+0x282>
 800a766:	9a02      	ldr	r2, [sp, #8]
 800a768:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a76c:	6013      	str	r3, [r2, #0]
 800a76e:	2301      	movs	r3, #1
 800a770:	6123      	str	r3, [r4, #16]
 800a772:	f8ca 3000 	str.w	r3, [sl]
 800a776:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a778:	2562      	movs	r5, #98	@ 0x62
 800a77a:	601c      	str	r4, [r3, #0]
 800a77c:	e73a      	b.n	800a5f4 <__gethex+0xf8>
 800a77e:	1e71      	subs	r1, r6, #1
 800a780:	4620      	mov	r0, r4
 800a782:	f000 fe74 	bl	800b46e <__any_on>
 800a786:	2800      	cmp	r0, #0
 800a788:	d1ed      	bne.n	800a766 <__gethex+0x26a>
 800a78a:	9801      	ldr	r0, [sp, #4]
 800a78c:	4621      	mov	r1, r4
 800a78e:	f000 fa1d 	bl	800abcc <_Bfree>
 800a792:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a794:	2300      	movs	r3, #0
 800a796:	6013      	str	r3, [r2, #0]
 800a798:	2550      	movs	r5, #80	@ 0x50
 800a79a:	e72b      	b.n	800a5f4 <__gethex+0xf8>
 800a79c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	d1f3      	bne.n	800a78a <__gethex+0x28e>
 800a7a2:	e7e0      	b.n	800a766 <__gethex+0x26a>
 800a7a4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d1dd      	bne.n	800a766 <__gethex+0x26a>
 800a7aa:	e7ee      	b.n	800a78a <__gethex+0x28e>
 800a7ac:	0800ce78 	.word	0x0800ce78
 800a7b0:	0800d13a 	.word	0x0800d13a
 800a7b4:	0800d14b 	.word	0x0800d14b
 800a7b8:	1e6f      	subs	r7, r5, #1
 800a7ba:	f1b9 0f00 	cmp.w	r9, #0
 800a7be:	d130      	bne.n	800a822 <__gethex+0x326>
 800a7c0:	b127      	cbz	r7, 800a7cc <__gethex+0x2d0>
 800a7c2:	4639      	mov	r1, r7
 800a7c4:	4620      	mov	r0, r4
 800a7c6:	f000 fe52 	bl	800b46e <__any_on>
 800a7ca:	4681      	mov	r9, r0
 800a7cc:	117a      	asrs	r2, r7, #5
 800a7ce:	2301      	movs	r3, #1
 800a7d0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800a7d4:	f007 071f 	and.w	r7, r7, #31
 800a7d8:	40bb      	lsls	r3, r7
 800a7da:	4213      	tst	r3, r2
 800a7dc:	4629      	mov	r1, r5
 800a7de:	4620      	mov	r0, r4
 800a7e0:	bf18      	it	ne
 800a7e2:	f049 0902 	orrne.w	r9, r9, #2
 800a7e6:	f7ff fe21 	bl	800a42c <rshift>
 800a7ea:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800a7ee:	1b76      	subs	r6, r6, r5
 800a7f0:	2502      	movs	r5, #2
 800a7f2:	f1b9 0f00 	cmp.w	r9, #0
 800a7f6:	d047      	beq.n	800a888 <__gethex+0x38c>
 800a7f8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a7fc:	2b02      	cmp	r3, #2
 800a7fe:	d015      	beq.n	800a82c <__gethex+0x330>
 800a800:	2b03      	cmp	r3, #3
 800a802:	d017      	beq.n	800a834 <__gethex+0x338>
 800a804:	2b01      	cmp	r3, #1
 800a806:	d109      	bne.n	800a81c <__gethex+0x320>
 800a808:	f019 0f02 	tst.w	r9, #2
 800a80c:	d006      	beq.n	800a81c <__gethex+0x320>
 800a80e:	f8da 3000 	ldr.w	r3, [sl]
 800a812:	ea49 0903 	orr.w	r9, r9, r3
 800a816:	f019 0f01 	tst.w	r9, #1
 800a81a:	d10e      	bne.n	800a83a <__gethex+0x33e>
 800a81c:	f045 0510 	orr.w	r5, r5, #16
 800a820:	e032      	b.n	800a888 <__gethex+0x38c>
 800a822:	f04f 0901 	mov.w	r9, #1
 800a826:	e7d1      	b.n	800a7cc <__gethex+0x2d0>
 800a828:	2501      	movs	r5, #1
 800a82a:	e7e2      	b.n	800a7f2 <__gethex+0x2f6>
 800a82c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a82e:	f1c3 0301 	rsb	r3, r3, #1
 800a832:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a834:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a836:	2b00      	cmp	r3, #0
 800a838:	d0f0      	beq.n	800a81c <__gethex+0x320>
 800a83a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800a83e:	f104 0314 	add.w	r3, r4, #20
 800a842:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800a846:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800a84a:	f04f 0c00 	mov.w	ip, #0
 800a84e:	4618      	mov	r0, r3
 800a850:	f853 2b04 	ldr.w	r2, [r3], #4
 800a854:	f1b2 3fff 	cmp.w	r2, #4294967295
 800a858:	d01b      	beq.n	800a892 <__gethex+0x396>
 800a85a:	3201      	adds	r2, #1
 800a85c:	6002      	str	r2, [r0, #0]
 800a85e:	2d02      	cmp	r5, #2
 800a860:	f104 0314 	add.w	r3, r4, #20
 800a864:	d13c      	bne.n	800a8e0 <__gethex+0x3e4>
 800a866:	f8d8 2000 	ldr.w	r2, [r8]
 800a86a:	3a01      	subs	r2, #1
 800a86c:	42b2      	cmp	r2, r6
 800a86e:	d109      	bne.n	800a884 <__gethex+0x388>
 800a870:	1171      	asrs	r1, r6, #5
 800a872:	2201      	movs	r2, #1
 800a874:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a878:	f006 061f 	and.w	r6, r6, #31
 800a87c:	fa02 f606 	lsl.w	r6, r2, r6
 800a880:	421e      	tst	r6, r3
 800a882:	d13a      	bne.n	800a8fa <__gethex+0x3fe>
 800a884:	f045 0520 	orr.w	r5, r5, #32
 800a888:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a88a:	601c      	str	r4, [r3, #0]
 800a88c:	9b02      	ldr	r3, [sp, #8]
 800a88e:	601f      	str	r7, [r3, #0]
 800a890:	e6b0      	b.n	800a5f4 <__gethex+0xf8>
 800a892:	4299      	cmp	r1, r3
 800a894:	f843 cc04 	str.w	ip, [r3, #-4]
 800a898:	d8d9      	bhi.n	800a84e <__gethex+0x352>
 800a89a:	68a3      	ldr	r3, [r4, #8]
 800a89c:	459b      	cmp	fp, r3
 800a89e:	db17      	blt.n	800a8d0 <__gethex+0x3d4>
 800a8a0:	6861      	ldr	r1, [r4, #4]
 800a8a2:	9801      	ldr	r0, [sp, #4]
 800a8a4:	3101      	adds	r1, #1
 800a8a6:	f000 f951 	bl	800ab4c <_Balloc>
 800a8aa:	4681      	mov	r9, r0
 800a8ac:	b918      	cbnz	r0, 800a8b6 <__gethex+0x3ba>
 800a8ae:	4b1a      	ldr	r3, [pc, #104]	@ (800a918 <__gethex+0x41c>)
 800a8b0:	4602      	mov	r2, r0
 800a8b2:	2184      	movs	r1, #132	@ 0x84
 800a8b4:	e6c5      	b.n	800a642 <__gethex+0x146>
 800a8b6:	6922      	ldr	r2, [r4, #16]
 800a8b8:	3202      	adds	r2, #2
 800a8ba:	f104 010c 	add.w	r1, r4, #12
 800a8be:	0092      	lsls	r2, r2, #2
 800a8c0:	300c      	adds	r0, #12
 800a8c2:	f7fe fef6 	bl	80096b2 <memcpy>
 800a8c6:	4621      	mov	r1, r4
 800a8c8:	9801      	ldr	r0, [sp, #4]
 800a8ca:	f000 f97f 	bl	800abcc <_Bfree>
 800a8ce:	464c      	mov	r4, r9
 800a8d0:	6923      	ldr	r3, [r4, #16]
 800a8d2:	1c5a      	adds	r2, r3, #1
 800a8d4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a8d8:	6122      	str	r2, [r4, #16]
 800a8da:	2201      	movs	r2, #1
 800a8dc:	615a      	str	r2, [r3, #20]
 800a8de:	e7be      	b.n	800a85e <__gethex+0x362>
 800a8e0:	6922      	ldr	r2, [r4, #16]
 800a8e2:	455a      	cmp	r2, fp
 800a8e4:	dd0b      	ble.n	800a8fe <__gethex+0x402>
 800a8e6:	2101      	movs	r1, #1
 800a8e8:	4620      	mov	r0, r4
 800a8ea:	f7ff fd9f 	bl	800a42c <rshift>
 800a8ee:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a8f2:	3701      	adds	r7, #1
 800a8f4:	42bb      	cmp	r3, r7
 800a8f6:	f6ff aee0 	blt.w	800a6ba <__gethex+0x1be>
 800a8fa:	2501      	movs	r5, #1
 800a8fc:	e7c2      	b.n	800a884 <__gethex+0x388>
 800a8fe:	f016 061f 	ands.w	r6, r6, #31
 800a902:	d0fa      	beq.n	800a8fa <__gethex+0x3fe>
 800a904:	4453      	add	r3, sl
 800a906:	f1c6 0620 	rsb	r6, r6, #32
 800a90a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800a90e:	f000 fa0f 	bl	800ad30 <__hi0bits>
 800a912:	42b0      	cmp	r0, r6
 800a914:	dbe7      	blt.n	800a8e6 <__gethex+0x3ea>
 800a916:	e7f0      	b.n	800a8fa <__gethex+0x3fe>
 800a918:	0800d13a 	.word	0x0800d13a

0800a91c <L_shift>:
 800a91c:	f1c2 0208 	rsb	r2, r2, #8
 800a920:	0092      	lsls	r2, r2, #2
 800a922:	b570      	push	{r4, r5, r6, lr}
 800a924:	f1c2 0620 	rsb	r6, r2, #32
 800a928:	6843      	ldr	r3, [r0, #4]
 800a92a:	6804      	ldr	r4, [r0, #0]
 800a92c:	fa03 f506 	lsl.w	r5, r3, r6
 800a930:	432c      	orrs	r4, r5
 800a932:	40d3      	lsrs	r3, r2
 800a934:	6004      	str	r4, [r0, #0]
 800a936:	f840 3f04 	str.w	r3, [r0, #4]!
 800a93a:	4288      	cmp	r0, r1
 800a93c:	d3f4      	bcc.n	800a928 <L_shift+0xc>
 800a93e:	bd70      	pop	{r4, r5, r6, pc}

0800a940 <__match>:
 800a940:	b530      	push	{r4, r5, lr}
 800a942:	6803      	ldr	r3, [r0, #0]
 800a944:	3301      	adds	r3, #1
 800a946:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a94a:	b914      	cbnz	r4, 800a952 <__match+0x12>
 800a94c:	6003      	str	r3, [r0, #0]
 800a94e:	2001      	movs	r0, #1
 800a950:	bd30      	pop	{r4, r5, pc}
 800a952:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a956:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800a95a:	2d19      	cmp	r5, #25
 800a95c:	bf98      	it	ls
 800a95e:	3220      	addls	r2, #32
 800a960:	42a2      	cmp	r2, r4
 800a962:	d0f0      	beq.n	800a946 <__match+0x6>
 800a964:	2000      	movs	r0, #0
 800a966:	e7f3      	b.n	800a950 <__match+0x10>

0800a968 <__hexnan>:
 800a968:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a96c:	680b      	ldr	r3, [r1, #0]
 800a96e:	6801      	ldr	r1, [r0, #0]
 800a970:	115e      	asrs	r6, r3, #5
 800a972:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a976:	f013 031f 	ands.w	r3, r3, #31
 800a97a:	b087      	sub	sp, #28
 800a97c:	bf18      	it	ne
 800a97e:	3604      	addne	r6, #4
 800a980:	2500      	movs	r5, #0
 800a982:	1f37      	subs	r7, r6, #4
 800a984:	4682      	mov	sl, r0
 800a986:	4690      	mov	r8, r2
 800a988:	9301      	str	r3, [sp, #4]
 800a98a:	f846 5c04 	str.w	r5, [r6, #-4]
 800a98e:	46b9      	mov	r9, r7
 800a990:	463c      	mov	r4, r7
 800a992:	9502      	str	r5, [sp, #8]
 800a994:	46ab      	mov	fp, r5
 800a996:	784a      	ldrb	r2, [r1, #1]
 800a998:	1c4b      	adds	r3, r1, #1
 800a99a:	9303      	str	r3, [sp, #12]
 800a99c:	b342      	cbz	r2, 800a9f0 <__hexnan+0x88>
 800a99e:	4610      	mov	r0, r2
 800a9a0:	9105      	str	r1, [sp, #20]
 800a9a2:	9204      	str	r2, [sp, #16]
 800a9a4:	f7ff fd94 	bl	800a4d0 <__hexdig_fun>
 800a9a8:	2800      	cmp	r0, #0
 800a9aa:	d151      	bne.n	800aa50 <__hexnan+0xe8>
 800a9ac:	9a04      	ldr	r2, [sp, #16]
 800a9ae:	9905      	ldr	r1, [sp, #20]
 800a9b0:	2a20      	cmp	r2, #32
 800a9b2:	d818      	bhi.n	800a9e6 <__hexnan+0x7e>
 800a9b4:	9b02      	ldr	r3, [sp, #8]
 800a9b6:	459b      	cmp	fp, r3
 800a9b8:	dd13      	ble.n	800a9e2 <__hexnan+0x7a>
 800a9ba:	454c      	cmp	r4, r9
 800a9bc:	d206      	bcs.n	800a9cc <__hexnan+0x64>
 800a9be:	2d07      	cmp	r5, #7
 800a9c0:	dc04      	bgt.n	800a9cc <__hexnan+0x64>
 800a9c2:	462a      	mov	r2, r5
 800a9c4:	4649      	mov	r1, r9
 800a9c6:	4620      	mov	r0, r4
 800a9c8:	f7ff ffa8 	bl	800a91c <L_shift>
 800a9cc:	4544      	cmp	r4, r8
 800a9ce:	d952      	bls.n	800aa76 <__hexnan+0x10e>
 800a9d0:	2300      	movs	r3, #0
 800a9d2:	f1a4 0904 	sub.w	r9, r4, #4
 800a9d6:	f844 3c04 	str.w	r3, [r4, #-4]
 800a9da:	f8cd b008 	str.w	fp, [sp, #8]
 800a9de:	464c      	mov	r4, r9
 800a9e0:	461d      	mov	r5, r3
 800a9e2:	9903      	ldr	r1, [sp, #12]
 800a9e4:	e7d7      	b.n	800a996 <__hexnan+0x2e>
 800a9e6:	2a29      	cmp	r2, #41	@ 0x29
 800a9e8:	d157      	bne.n	800aa9a <__hexnan+0x132>
 800a9ea:	3102      	adds	r1, #2
 800a9ec:	f8ca 1000 	str.w	r1, [sl]
 800a9f0:	f1bb 0f00 	cmp.w	fp, #0
 800a9f4:	d051      	beq.n	800aa9a <__hexnan+0x132>
 800a9f6:	454c      	cmp	r4, r9
 800a9f8:	d206      	bcs.n	800aa08 <__hexnan+0xa0>
 800a9fa:	2d07      	cmp	r5, #7
 800a9fc:	dc04      	bgt.n	800aa08 <__hexnan+0xa0>
 800a9fe:	462a      	mov	r2, r5
 800aa00:	4649      	mov	r1, r9
 800aa02:	4620      	mov	r0, r4
 800aa04:	f7ff ff8a 	bl	800a91c <L_shift>
 800aa08:	4544      	cmp	r4, r8
 800aa0a:	d936      	bls.n	800aa7a <__hexnan+0x112>
 800aa0c:	f1a8 0204 	sub.w	r2, r8, #4
 800aa10:	4623      	mov	r3, r4
 800aa12:	f853 1b04 	ldr.w	r1, [r3], #4
 800aa16:	f842 1f04 	str.w	r1, [r2, #4]!
 800aa1a:	429f      	cmp	r7, r3
 800aa1c:	d2f9      	bcs.n	800aa12 <__hexnan+0xaa>
 800aa1e:	1b3b      	subs	r3, r7, r4
 800aa20:	f023 0303 	bic.w	r3, r3, #3
 800aa24:	3304      	adds	r3, #4
 800aa26:	3401      	adds	r4, #1
 800aa28:	3e03      	subs	r6, #3
 800aa2a:	42b4      	cmp	r4, r6
 800aa2c:	bf88      	it	hi
 800aa2e:	2304      	movhi	r3, #4
 800aa30:	4443      	add	r3, r8
 800aa32:	2200      	movs	r2, #0
 800aa34:	f843 2b04 	str.w	r2, [r3], #4
 800aa38:	429f      	cmp	r7, r3
 800aa3a:	d2fb      	bcs.n	800aa34 <__hexnan+0xcc>
 800aa3c:	683b      	ldr	r3, [r7, #0]
 800aa3e:	b91b      	cbnz	r3, 800aa48 <__hexnan+0xe0>
 800aa40:	4547      	cmp	r7, r8
 800aa42:	d128      	bne.n	800aa96 <__hexnan+0x12e>
 800aa44:	2301      	movs	r3, #1
 800aa46:	603b      	str	r3, [r7, #0]
 800aa48:	2005      	movs	r0, #5
 800aa4a:	b007      	add	sp, #28
 800aa4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa50:	3501      	adds	r5, #1
 800aa52:	2d08      	cmp	r5, #8
 800aa54:	f10b 0b01 	add.w	fp, fp, #1
 800aa58:	dd06      	ble.n	800aa68 <__hexnan+0x100>
 800aa5a:	4544      	cmp	r4, r8
 800aa5c:	d9c1      	bls.n	800a9e2 <__hexnan+0x7a>
 800aa5e:	2300      	movs	r3, #0
 800aa60:	f844 3c04 	str.w	r3, [r4, #-4]
 800aa64:	2501      	movs	r5, #1
 800aa66:	3c04      	subs	r4, #4
 800aa68:	6822      	ldr	r2, [r4, #0]
 800aa6a:	f000 000f 	and.w	r0, r0, #15
 800aa6e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800aa72:	6020      	str	r0, [r4, #0]
 800aa74:	e7b5      	b.n	800a9e2 <__hexnan+0x7a>
 800aa76:	2508      	movs	r5, #8
 800aa78:	e7b3      	b.n	800a9e2 <__hexnan+0x7a>
 800aa7a:	9b01      	ldr	r3, [sp, #4]
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	d0dd      	beq.n	800aa3c <__hexnan+0xd4>
 800aa80:	f1c3 0320 	rsb	r3, r3, #32
 800aa84:	f04f 32ff 	mov.w	r2, #4294967295
 800aa88:	40da      	lsrs	r2, r3
 800aa8a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800aa8e:	4013      	ands	r3, r2
 800aa90:	f846 3c04 	str.w	r3, [r6, #-4]
 800aa94:	e7d2      	b.n	800aa3c <__hexnan+0xd4>
 800aa96:	3f04      	subs	r7, #4
 800aa98:	e7d0      	b.n	800aa3c <__hexnan+0xd4>
 800aa9a:	2004      	movs	r0, #4
 800aa9c:	e7d5      	b.n	800aa4a <__hexnan+0xe2>
	...

0800aaa0 <_findenv_r>:
 800aaa0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aaa4:	f8df a06c 	ldr.w	sl, [pc, #108]	@ 800ab14 <_findenv_r+0x74>
 800aaa8:	4606      	mov	r6, r0
 800aaaa:	4689      	mov	r9, r1
 800aaac:	4617      	mov	r7, r2
 800aaae:	f001 fb67 	bl	800c180 <__env_lock>
 800aab2:	f8da 4000 	ldr.w	r4, [sl]
 800aab6:	b134      	cbz	r4, 800aac6 <_findenv_r+0x26>
 800aab8:	464b      	mov	r3, r9
 800aaba:	4698      	mov	r8, r3
 800aabc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aac0:	b13a      	cbz	r2, 800aad2 <_findenv_r+0x32>
 800aac2:	2a3d      	cmp	r2, #61	@ 0x3d
 800aac4:	d1f9      	bne.n	800aaba <_findenv_r+0x1a>
 800aac6:	4630      	mov	r0, r6
 800aac8:	f001 fb60 	bl	800c18c <__env_unlock>
 800aacc:	2000      	movs	r0, #0
 800aace:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aad2:	eba8 0809 	sub.w	r8, r8, r9
 800aad6:	46a3      	mov	fp, r4
 800aad8:	f854 0b04 	ldr.w	r0, [r4], #4
 800aadc:	2800      	cmp	r0, #0
 800aade:	d0f2      	beq.n	800aac6 <_findenv_r+0x26>
 800aae0:	4642      	mov	r2, r8
 800aae2:	4649      	mov	r1, r9
 800aae4:	f7fd ffc9 	bl	8008a7a <strncmp>
 800aae8:	2800      	cmp	r0, #0
 800aaea:	d1f4      	bne.n	800aad6 <_findenv_r+0x36>
 800aaec:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800aaf0:	eb03 0508 	add.w	r5, r3, r8
 800aaf4:	f813 3008 	ldrb.w	r3, [r3, r8]
 800aaf8:	2b3d      	cmp	r3, #61	@ 0x3d
 800aafa:	d1ec      	bne.n	800aad6 <_findenv_r+0x36>
 800aafc:	f8da 3000 	ldr.w	r3, [sl]
 800ab00:	ebab 0303 	sub.w	r3, fp, r3
 800ab04:	109b      	asrs	r3, r3, #2
 800ab06:	4630      	mov	r0, r6
 800ab08:	603b      	str	r3, [r7, #0]
 800ab0a:	f001 fb3f 	bl	800c18c <__env_unlock>
 800ab0e:	1c68      	adds	r0, r5, #1
 800ab10:	e7dd      	b.n	800aace <_findenv_r+0x2e>
 800ab12:	bf00      	nop
 800ab14:	20000008 	.word	0x20000008

0800ab18 <_getenv_r>:
 800ab18:	b507      	push	{r0, r1, r2, lr}
 800ab1a:	aa01      	add	r2, sp, #4
 800ab1c:	f7ff ffc0 	bl	800aaa0 <_findenv_r>
 800ab20:	b003      	add	sp, #12
 800ab22:	f85d fb04 	ldr.w	pc, [sp], #4

0800ab26 <__ascii_mbtowc>:
 800ab26:	b082      	sub	sp, #8
 800ab28:	b901      	cbnz	r1, 800ab2c <__ascii_mbtowc+0x6>
 800ab2a:	a901      	add	r1, sp, #4
 800ab2c:	b142      	cbz	r2, 800ab40 <__ascii_mbtowc+0x1a>
 800ab2e:	b14b      	cbz	r3, 800ab44 <__ascii_mbtowc+0x1e>
 800ab30:	7813      	ldrb	r3, [r2, #0]
 800ab32:	600b      	str	r3, [r1, #0]
 800ab34:	7812      	ldrb	r2, [r2, #0]
 800ab36:	1e10      	subs	r0, r2, #0
 800ab38:	bf18      	it	ne
 800ab3a:	2001      	movne	r0, #1
 800ab3c:	b002      	add	sp, #8
 800ab3e:	4770      	bx	lr
 800ab40:	4610      	mov	r0, r2
 800ab42:	e7fb      	b.n	800ab3c <__ascii_mbtowc+0x16>
 800ab44:	f06f 0001 	mvn.w	r0, #1
 800ab48:	e7f8      	b.n	800ab3c <__ascii_mbtowc+0x16>
	...

0800ab4c <_Balloc>:
 800ab4c:	b570      	push	{r4, r5, r6, lr}
 800ab4e:	69c6      	ldr	r6, [r0, #28]
 800ab50:	4604      	mov	r4, r0
 800ab52:	460d      	mov	r5, r1
 800ab54:	b976      	cbnz	r6, 800ab74 <_Balloc+0x28>
 800ab56:	2010      	movs	r0, #16
 800ab58:	f7fc f80c 	bl	8006b74 <malloc>
 800ab5c:	4602      	mov	r2, r0
 800ab5e:	61e0      	str	r0, [r4, #28]
 800ab60:	b920      	cbnz	r0, 800ab6c <_Balloc+0x20>
 800ab62:	4b18      	ldr	r3, [pc, #96]	@ (800abc4 <_Balloc+0x78>)
 800ab64:	4818      	ldr	r0, [pc, #96]	@ (800abc8 <_Balloc+0x7c>)
 800ab66:	216b      	movs	r1, #107	@ 0x6b
 800ab68:	f001 fad8 	bl	800c11c <__assert_func>
 800ab6c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ab70:	6006      	str	r6, [r0, #0]
 800ab72:	60c6      	str	r6, [r0, #12]
 800ab74:	69e6      	ldr	r6, [r4, #28]
 800ab76:	68f3      	ldr	r3, [r6, #12]
 800ab78:	b183      	cbz	r3, 800ab9c <_Balloc+0x50>
 800ab7a:	69e3      	ldr	r3, [r4, #28]
 800ab7c:	68db      	ldr	r3, [r3, #12]
 800ab7e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ab82:	b9b8      	cbnz	r0, 800abb4 <_Balloc+0x68>
 800ab84:	2101      	movs	r1, #1
 800ab86:	fa01 f605 	lsl.w	r6, r1, r5
 800ab8a:	1d72      	adds	r2, r6, #5
 800ab8c:	0092      	lsls	r2, r2, #2
 800ab8e:	4620      	mov	r0, r4
 800ab90:	f001 fae2 	bl	800c158 <_calloc_r>
 800ab94:	b160      	cbz	r0, 800abb0 <_Balloc+0x64>
 800ab96:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ab9a:	e00e      	b.n	800abba <_Balloc+0x6e>
 800ab9c:	2221      	movs	r2, #33	@ 0x21
 800ab9e:	2104      	movs	r1, #4
 800aba0:	4620      	mov	r0, r4
 800aba2:	f001 fad9 	bl	800c158 <_calloc_r>
 800aba6:	69e3      	ldr	r3, [r4, #28]
 800aba8:	60f0      	str	r0, [r6, #12]
 800abaa:	68db      	ldr	r3, [r3, #12]
 800abac:	2b00      	cmp	r3, #0
 800abae:	d1e4      	bne.n	800ab7a <_Balloc+0x2e>
 800abb0:	2000      	movs	r0, #0
 800abb2:	bd70      	pop	{r4, r5, r6, pc}
 800abb4:	6802      	ldr	r2, [r0, #0]
 800abb6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800abba:	2300      	movs	r3, #0
 800abbc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800abc0:	e7f7      	b.n	800abb2 <_Balloc+0x66>
 800abc2:	bf00      	nop
 800abc4:	0800d0cb 	.word	0x0800d0cb
 800abc8:	0800d1ab 	.word	0x0800d1ab

0800abcc <_Bfree>:
 800abcc:	b570      	push	{r4, r5, r6, lr}
 800abce:	69c6      	ldr	r6, [r0, #28]
 800abd0:	4605      	mov	r5, r0
 800abd2:	460c      	mov	r4, r1
 800abd4:	b976      	cbnz	r6, 800abf4 <_Bfree+0x28>
 800abd6:	2010      	movs	r0, #16
 800abd8:	f7fb ffcc 	bl	8006b74 <malloc>
 800abdc:	4602      	mov	r2, r0
 800abde:	61e8      	str	r0, [r5, #28]
 800abe0:	b920      	cbnz	r0, 800abec <_Bfree+0x20>
 800abe2:	4b09      	ldr	r3, [pc, #36]	@ (800ac08 <_Bfree+0x3c>)
 800abe4:	4809      	ldr	r0, [pc, #36]	@ (800ac0c <_Bfree+0x40>)
 800abe6:	218f      	movs	r1, #143	@ 0x8f
 800abe8:	f001 fa98 	bl	800c11c <__assert_func>
 800abec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800abf0:	6006      	str	r6, [r0, #0]
 800abf2:	60c6      	str	r6, [r0, #12]
 800abf4:	b13c      	cbz	r4, 800ac06 <_Bfree+0x3a>
 800abf6:	69eb      	ldr	r3, [r5, #28]
 800abf8:	6862      	ldr	r2, [r4, #4]
 800abfa:	68db      	ldr	r3, [r3, #12]
 800abfc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ac00:	6021      	str	r1, [r4, #0]
 800ac02:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ac06:	bd70      	pop	{r4, r5, r6, pc}
 800ac08:	0800d0cb 	.word	0x0800d0cb
 800ac0c:	0800d1ab 	.word	0x0800d1ab

0800ac10 <__multadd>:
 800ac10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac14:	690d      	ldr	r5, [r1, #16]
 800ac16:	4607      	mov	r7, r0
 800ac18:	460c      	mov	r4, r1
 800ac1a:	461e      	mov	r6, r3
 800ac1c:	f101 0c14 	add.w	ip, r1, #20
 800ac20:	2000      	movs	r0, #0
 800ac22:	f8dc 3000 	ldr.w	r3, [ip]
 800ac26:	b299      	uxth	r1, r3
 800ac28:	fb02 6101 	mla	r1, r2, r1, r6
 800ac2c:	0c1e      	lsrs	r6, r3, #16
 800ac2e:	0c0b      	lsrs	r3, r1, #16
 800ac30:	fb02 3306 	mla	r3, r2, r6, r3
 800ac34:	b289      	uxth	r1, r1
 800ac36:	3001      	adds	r0, #1
 800ac38:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ac3c:	4285      	cmp	r5, r0
 800ac3e:	f84c 1b04 	str.w	r1, [ip], #4
 800ac42:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ac46:	dcec      	bgt.n	800ac22 <__multadd+0x12>
 800ac48:	b30e      	cbz	r6, 800ac8e <__multadd+0x7e>
 800ac4a:	68a3      	ldr	r3, [r4, #8]
 800ac4c:	42ab      	cmp	r3, r5
 800ac4e:	dc19      	bgt.n	800ac84 <__multadd+0x74>
 800ac50:	6861      	ldr	r1, [r4, #4]
 800ac52:	4638      	mov	r0, r7
 800ac54:	3101      	adds	r1, #1
 800ac56:	f7ff ff79 	bl	800ab4c <_Balloc>
 800ac5a:	4680      	mov	r8, r0
 800ac5c:	b928      	cbnz	r0, 800ac6a <__multadd+0x5a>
 800ac5e:	4602      	mov	r2, r0
 800ac60:	4b0c      	ldr	r3, [pc, #48]	@ (800ac94 <__multadd+0x84>)
 800ac62:	480d      	ldr	r0, [pc, #52]	@ (800ac98 <__multadd+0x88>)
 800ac64:	21ba      	movs	r1, #186	@ 0xba
 800ac66:	f001 fa59 	bl	800c11c <__assert_func>
 800ac6a:	6922      	ldr	r2, [r4, #16]
 800ac6c:	3202      	adds	r2, #2
 800ac6e:	f104 010c 	add.w	r1, r4, #12
 800ac72:	0092      	lsls	r2, r2, #2
 800ac74:	300c      	adds	r0, #12
 800ac76:	f7fe fd1c 	bl	80096b2 <memcpy>
 800ac7a:	4621      	mov	r1, r4
 800ac7c:	4638      	mov	r0, r7
 800ac7e:	f7ff ffa5 	bl	800abcc <_Bfree>
 800ac82:	4644      	mov	r4, r8
 800ac84:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ac88:	3501      	adds	r5, #1
 800ac8a:	615e      	str	r6, [r3, #20]
 800ac8c:	6125      	str	r5, [r4, #16]
 800ac8e:	4620      	mov	r0, r4
 800ac90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ac94:	0800d13a 	.word	0x0800d13a
 800ac98:	0800d1ab 	.word	0x0800d1ab

0800ac9c <__s2b>:
 800ac9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aca0:	460c      	mov	r4, r1
 800aca2:	4615      	mov	r5, r2
 800aca4:	461f      	mov	r7, r3
 800aca6:	2209      	movs	r2, #9
 800aca8:	3308      	adds	r3, #8
 800acaa:	4606      	mov	r6, r0
 800acac:	fb93 f3f2 	sdiv	r3, r3, r2
 800acb0:	2100      	movs	r1, #0
 800acb2:	2201      	movs	r2, #1
 800acb4:	429a      	cmp	r2, r3
 800acb6:	db09      	blt.n	800accc <__s2b+0x30>
 800acb8:	4630      	mov	r0, r6
 800acba:	f7ff ff47 	bl	800ab4c <_Balloc>
 800acbe:	b940      	cbnz	r0, 800acd2 <__s2b+0x36>
 800acc0:	4602      	mov	r2, r0
 800acc2:	4b19      	ldr	r3, [pc, #100]	@ (800ad28 <__s2b+0x8c>)
 800acc4:	4819      	ldr	r0, [pc, #100]	@ (800ad2c <__s2b+0x90>)
 800acc6:	21d3      	movs	r1, #211	@ 0xd3
 800acc8:	f001 fa28 	bl	800c11c <__assert_func>
 800accc:	0052      	lsls	r2, r2, #1
 800acce:	3101      	adds	r1, #1
 800acd0:	e7f0      	b.n	800acb4 <__s2b+0x18>
 800acd2:	9b08      	ldr	r3, [sp, #32]
 800acd4:	6143      	str	r3, [r0, #20]
 800acd6:	2d09      	cmp	r5, #9
 800acd8:	f04f 0301 	mov.w	r3, #1
 800acdc:	6103      	str	r3, [r0, #16]
 800acde:	dd16      	ble.n	800ad0e <__s2b+0x72>
 800ace0:	f104 0909 	add.w	r9, r4, #9
 800ace4:	46c8      	mov	r8, r9
 800ace6:	442c      	add	r4, r5
 800ace8:	f818 3b01 	ldrb.w	r3, [r8], #1
 800acec:	4601      	mov	r1, r0
 800acee:	3b30      	subs	r3, #48	@ 0x30
 800acf0:	220a      	movs	r2, #10
 800acf2:	4630      	mov	r0, r6
 800acf4:	f7ff ff8c 	bl	800ac10 <__multadd>
 800acf8:	45a0      	cmp	r8, r4
 800acfa:	d1f5      	bne.n	800ace8 <__s2b+0x4c>
 800acfc:	f1a5 0408 	sub.w	r4, r5, #8
 800ad00:	444c      	add	r4, r9
 800ad02:	1b2d      	subs	r5, r5, r4
 800ad04:	1963      	adds	r3, r4, r5
 800ad06:	42bb      	cmp	r3, r7
 800ad08:	db04      	blt.n	800ad14 <__s2b+0x78>
 800ad0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ad0e:	340a      	adds	r4, #10
 800ad10:	2509      	movs	r5, #9
 800ad12:	e7f6      	b.n	800ad02 <__s2b+0x66>
 800ad14:	f814 3b01 	ldrb.w	r3, [r4], #1
 800ad18:	4601      	mov	r1, r0
 800ad1a:	3b30      	subs	r3, #48	@ 0x30
 800ad1c:	220a      	movs	r2, #10
 800ad1e:	4630      	mov	r0, r6
 800ad20:	f7ff ff76 	bl	800ac10 <__multadd>
 800ad24:	e7ee      	b.n	800ad04 <__s2b+0x68>
 800ad26:	bf00      	nop
 800ad28:	0800d13a 	.word	0x0800d13a
 800ad2c:	0800d1ab 	.word	0x0800d1ab

0800ad30 <__hi0bits>:
 800ad30:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800ad34:	4603      	mov	r3, r0
 800ad36:	bf36      	itet	cc
 800ad38:	0403      	lslcc	r3, r0, #16
 800ad3a:	2000      	movcs	r0, #0
 800ad3c:	2010      	movcc	r0, #16
 800ad3e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800ad42:	bf3c      	itt	cc
 800ad44:	021b      	lslcc	r3, r3, #8
 800ad46:	3008      	addcc	r0, #8
 800ad48:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ad4c:	bf3c      	itt	cc
 800ad4e:	011b      	lslcc	r3, r3, #4
 800ad50:	3004      	addcc	r0, #4
 800ad52:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ad56:	bf3c      	itt	cc
 800ad58:	009b      	lslcc	r3, r3, #2
 800ad5a:	3002      	addcc	r0, #2
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	db05      	blt.n	800ad6c <__hi0bits+0x3c>
 800ad60:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800ad64:	f100 0001 	add.w	r0, r0, #1
 800ad68:	bf08      	it	eq
 800ad6a:	2020      	moveq	r0, #32
 800ad6c:	4770      	bx	lr

0800ad6e <__lo0bits>:
 800ad6e:	6803      	ldr	r3, [r0, #0]
 800ad70:	4602      	mov	r2, r0
 800ad72:	f013 0007 	ands.w	r0, r3, #7
 800ad76:	d00b      	beq.n	800ad90 <__lo0bits+0x22>
 800ad78:	07d9      	lsls	r1, r3, #31
 800ad7a:	d421      	bmi.n	800adc0 <__lo0bits+0x52>
 800ad7c:	0798      	lsls	r0, r3, #30
 800ad7e:	bf49      	itett	mi
 800ad80:	085b      	lsrmi	r3, r3, #1
 800ad82:	089b      	lsrpl	r3, r3, #2
 800ad84:	2001      	movmi	r0, #1
 800ad86:	6013      	strmi	r3, [r2, #0]
 800ad88:	bf5c      	itt	pl
 800ad8a:	6013      	strpl	r3, [r2, #0]
 800ad8c:	2002      	movpl	r0, #2
 800ad8e:	4770      	bx	lr
 800ad90:	b299      	uxth	r1, r3
 800ad92:	b909      	cbnz	r1, 800ad98 <__lo0bits+0x2a>
 800ad94:	0c1b      	lsrs	r3, r3, #16
 800ad96:	2010      	movs	r0, #16
 800ad98:	b2d9      	uxtb	r1, r3
 800ad9a:	b909      	cbnz	r1, 800ada0 <__lo0bits+0x32>
 800ad9c:	3008      	adds	r0, #8
 800ad9e:	0a1b      	lsrs	r3, r3, #8
 800ada0:	0719      	lsls	r1, r3, #28
 800ada2:	bf04      	itt	eq
 800ada4:	091b      	lsreq	r3, r3, #4
 800ada6:	3004      	addeq	r0, #4
 800ada8:	0799      	lsls	r1, r3, #30
 800adaa:	bf04      	itt	eq
 800adac:	089b      	lsreq	r3, r3, #2
 800adae:	3002      	addeq	r0, #2
 800adb0:	07d9      	lsls	r1, r3, #31
 800adb2:	d403      	bmi.n	800adbc <__lo0bits+0x4e>
 800adb4:	085b      	lsrs	r3, r3, #1
 800adb6:	f100 0001 	add.w	r0, r0, #1
 800adba:	d003      	beq.n	800adc4 <__lo0bits+0x56>
 800adbc:	6013      	str	r3, [r2, #0]
 800adbe:	4770      	bx	lr
 800adc0:	2000      	movs	r0, #0
 800adc2:	4770      	bx	lr
 800adc4:	2020      	movs	r0, #32
 800adc6:	4770      	bx	lr

0800adc8 <__i2b>:
 800adc8:	b510      	push	{r4, lr}
 800adca:	460c      	mov	r4, r1
 800adcc:	2101      	movs	r1, #1
 800adce:	f7ff febd 	bl	800ab4c <_Balloc>
 800add2:	4602      	mov	r2, r0
 800add4:	b928      	cbnz	r0, 800ade2 <__i2b+0x1a>
 800add6:	4b05      	ldr	r3, [pc, #20]	@ (800adec <__i2b+0x24>)
 800add8:	4805      	ldr	r0, [pc, #20]	@ (800adf0 <__i2b+0x28>)
 800adda:	f240 1145 	movw	r1, #325	@ 0x145
 800adde:	f001 f99d 	bl	800c11c <__assert_func>
 800ade2:	2301      	movs	r3, #1
 800ade4:	6144      	str	r4, [r0, #20]
 800ade6:	6103      	str	r3, [r0, #16]
 800ade8:	bd10      	pop	{r4, pc}
 800adea:	bf00      	nop
 800adec:	0800d13a 	.word	0x0800d13a
 800adf0:	0800d1ab 	.word	0x0800d1ab

0800adf4 <__multiply>:
 800adf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800adf8:	4614      	mov	r4, r2
 800adfa:	690a      	ldr	r2, [r1, #16]
 800adfc:	6923      	ldr	r3, [r4, #16]
 800adfe:	429a      	cmp	r2, r3
 800ae00:	bfa8      	it	ge
 800ae02:	4623      	movge	r3, r4
 800ae04:	460f      	mov	r7, r1
 800ae06:	bfa4      	itt	ge
 800ae08:	460c      	movge	r4, r1
 800ae0a:	461f      	movge	r7, r3
 800ae0c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800ae10:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800ae14:	68a3      	ldr	r3, [r4, #8]
 800ae16:	6861      	ldr	r1, [r4, #4]
 800ae18:	eb0a 0609 	add.w	r6, sl, r9
 800ae1c:	42b3      	cmp	r3, r6
 800ae1e:	b085      	sub	sp, #20
 800ae20:	bfb8      	it	lt
 800ae22:	3101      	addlt	r1, #1
 800ae24:	f7ff fe92 	bl	800ab4c <_Balloc>
 800ae28:	b930      	cbnz	r0, 800ae38 <__multiply+0x44>
 800ae2a:	4602      	mov	r2, r0
 800ae2c:	4b44      	ldr	r3, [pc, #272]	@ (800af40 <__multiply+0x14c>)
 800ae2e:	4845      	ldr	r0, [pc, #276]	@ (800af44 <__multiply+0x150>)
 800ae30:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800ae34:	f001 f972 	bl	800c11c <__assert_func>
 800ae38:	f100 0514 	add.w	r5, r0, #20
 800ae3c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800ae40:	462b      	mov	r3, r5
 800ae42:	2200      	movs	r2, #0
 800ae44:	4543      	cmp	r3, r8
 800ae46:	d321      	bcc.n	800ae8c <__multiply+0x98>
 800ae48:	f107 0114 	add.w	r1, r7, #20
 800ae4c:	f104 0214 	add.w	r2, r4, #20
 800ae50:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800ae54:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800ae58:	9302      	str	r3, [sp, #8]
 800ae5a:	1b13      	subs	r3, r2, r4
 800ae5c:	3b15      	subs	r3, #21
 800ae5e:	f023 0303 	bic.w	r3, r3, #3
 800ae62:	3304      	adds	r3, #4
 800ae64:	f104 0715 	add.w	r7, r4, #21
 800ae68:	42ba      	cmp	r2, r7
 800ae6a:	bf38      	it	cc
 800ae6c:	2304      	movcc	r3, #4
 800ae6e:	9301      	str	r3, [sp, #4]
 800ae70:	9b02      	ldr	r3, [sp, #8]
 800ae72:	9103      	str	r1, [sp, #12]
 800ae74:	428b      	cmp	r3, r1
 800ae76:	d80c      	bhi.n	800ae92 <__multiply+0x9e>
 800ae78:	2e00      	cmp	r6, #0
 800ae7a:	dd03      	ble.n	800ae84 <__multiply+0x90>
 800ae7c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	d05b      	beq.n	800af3c <__multiply+0x148>
 800ae84:	6106      	str	r6, [r0, #16]
 800ae86:	b005      	add	sp, #20
 800ae88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae8c:	f843 2b04 	str.w	r2, [r3], #4
 800ae90:	e7d8      	b.n	800ae44 <__multiply+0x50>
 800ae92:	f8b1 a000 	ldrh.w	sl, [r1]
 800ae96:	f1ba 0f00 	cmp.w	sl, #0
 800ae9a:	d024      	beq.n	800aee6 <__multiply+0xf2>
 800ae9c:	f104 0e14 	add.w	lr, r4, #20
 800aea0:	46a9      	mov	r9, r5
 800aea2:	f04f 0c00 	mov.w	ip, #0
 800aea6:	f85e 7b04 	ldr.w	r7, [lr], #4
 800aeaa:	f8d9 3000 	ldr.w	r3, [r9]
 800aeae:	fa1f fb87 	uxth.w	fp, r7
 800aeb2:	b29b      	uxth	r3, r3
 800aeb4:	fb0a 330b 	mla	r3, sl, fp, r3
 800aeb8:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800aebc:	f8d9 7000 	ldr.w	r7, [r9]
 800aec0:	4463      	add	r3, ip
 800aec2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800aec6:	fb0a c70b 	mla	r7, sl, fp, ip
 800aeca:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800aece:	b29b      	uxth	r3, r3
 800aed0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800aed4:	4572      	cmp	r2, lr
 800aed6:	f849 3b04 	str.w	r3, [r9], #4
 800aeda:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800aede:	d8e2      	bhi.n	800aea6 <__multiply+0xb2>
 800aee0:	9b01      	ldr	r3, [sp, #4]
 800aee2:	f845 c003 	str.w	ip, [r5, r3]
 800aee6:	9b03      	ldr	r3, [sp, #12]
 800aee8:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800aeec:	3104      	adds	r1, #4
 800aeee:	f1b9 0f00 	cmp.w	r9, #0
 800aef2:	d021      	beq.n	800af38 <__multiply+0x144>
 800aef4:	682b      	ldr	r3, [r5, #0]
 800aef6:	f104 0c14 	add.w	ip, r4, #20
 800aefa:	46ae      	mov	lr, r5
 800aefc:	f04f 0a00 	mov.w	sl, #0
 800af00:	f8bc b000 	ldrh.w	fp, [ip]
 800af04:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800af08:	fb09 770b 	mla	r7, r9, fp, r7
 800af0c:	4457      	add	r7, sl
 800af0e:	b29b      	uxth	r3, r3
 800af10:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800af14:	f84e 3b04 	str.w	r3, [lr], #4
 800af18:	f85c 3b04 	ldr.w	r3, [ip], #4
 800af1c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800af20:	f8be 3000 	ldrh.w	r3, [lr]
 800af24:	fb09 330a 	mla	r3, r9, sl, r3
 800af28:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800af2c:	4562      	cmp	r2, ip
 800af2e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800af32:	d8e5      	bhi.n	800af00 <__multiply+0x10c>
 800af34:	9f01      	ldr	r7, [sp, #4]
 800af36:	51eb      	str	r3, [r5, r7]
 800af38:	3504      	adds	r5, #4
 800af3a:	e799      	b.n	800ae70 <__multiply+0x7c>
 800af3c:	3e01      	subs	r6, #1
 800af3e:	e79b      	b.n	800ae78 <__multiply+0x84>
 800af40:	0800d13a 	.word	0x0800d13a
 800af44:	0800d1ab 	.word	0x0800d1ab

0800af48 <__pow5mult>:
 800af48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800af4c:	4615      	mov	r5, r2
 800af4e:	f012 0203 	ands.w	r2, r2, #3
 800af52:	4607      	mov	r7, r0
 800af54:	460e      	mov	r6, r1
 800af56:	d007      	beq.n	800af68 <__pow5mult+0x20>
 800af58:	4c25      	ldr	r4, [pc, #148]	@ (800aff0 <__pow5mult+0xa8>)
 800af5a:	3a01      	subs	r2, #1
 800af5c:	2300      	movs	r3, #0
 800af5e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800af62:	f7ff fe55 	bl	800ac10 <__multadd>
 800af66:	4606      	mov	r6, r0
 800af68:	10ad      	asrs	r5, r5, #2
 800af6a:	d03d      	beq.n	800afe8 <__pow5mult+0xa0>
 800af6c:	69fc      	ldr	r4, [r7, #28]
 800af6e:	b97c      	cbnz	r4, 800af90 <__pow5mult+0x48>
 800af70:	2010      	movs	r0, #16
 800af72:	f7fb fdff 	bl	8006b74 <malloc>
 800af76:	4602      	mov	r2, r0
 800af78:	61f8      	str	r0, [r7, #28]
 800af7a:	b928      	cbnz	r0, 800af88 <__pow5mult+0x40>
 800af7c:	4b1d      	ldr	r3, [pc, #116]	@ (800aff4 <__pow5mult+0xac>)
 800af7e:	481e      	ldr	r0, [pc, #120]	@ (800aff8 <__pow5mult+0xb0>)
 800af80:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800af84:	f001 f8ca 	bl	800c11c <__assert_func>
 800af88:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800af8c:	6004      	str	r4, [r0, #0]
 800af8e:	60c4      	str	r4, [r0, #12]
 800af90:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800af94:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800af98:	b94c      	cbnz	r4, 800afae <__pow5mult+0x66>
 800af9a:	f240 2171 	movw	r1, #625	@ 0x271
 800af9e:	4638      	mov	r0, r7
 800afa0:	f7ff ff12 	bl	800adc8 <__i2b>
 800afa4:	2300      	movs	r3, #0
 800afa6:	f8c8 0008 	str.w	r0, [r8, #8]
 800afaa:	4604      	mov	r4, r0
 800afac:	6003      	str	r3, [r0, #0]
 800afae:	f04f 0900 	mov.w	r9, #0
 800afb2:	07eb      	lsls	r3, r5, #31
 800afb4:	d50a      	bpl.n	800afcc <__pow5mult+0x84>
 800afb6:	4631      	mov	r1, r6
 800afb8:	4622      	mov	r2, r4
 800afba:	4638      	mov	r0, r7
 800afbc:	f7ff ff1a 	bl	800adf4 <__multiply>
 800afc0:	4631      	mov	r1, r6
 800afc2:	4680      	mov	r8, r0
 800afc4:	4638      	mov	r0, r7
 800afc6:	f7ff fe01 	bl	800abcc <_Bfree>
 800afca:	4646      	mov	r6, r8
 800afcc:	106d      	asrs	r5, r5, #1
 800afce:	d00b      	beq.n	800afe8 <__pow5mult+0xa0>
 800afd0:	6820      	ldr	r0, [r4, #0]
 800afd2:	b938      	cbnz	r0, 800afe4 <__pow5mult+0x9c>
 800afd4:	4622      	mov	r2, r4
 800afd6:	4621      	mov	r1, r4
 800afd8:	4638      	mov	r0, r7
 800afda:	f7ff ff0b 	bl	800adf4 <__multiply>
 800afde:	6020      	str	r0, [r4, #0]
 800afe0:	f8c0 9000 	str.w	r9, [r0]
 800afe4:	4604      	mov	r4, r0
 800afe6:	e7e4      	b.n	800afb2 <__pow5mult+0x6a>
 800afe8:	4630      	mov	r0, r6
 800afea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800afee:	bf00      	nop
 800aff0:	0800d204 	.word	0x0800d204
 800aff4:	0800d0cb 	.word	0x0800d0cb
 800aff8:	0800d1ab 	.word	0x0800d1ab

0800affc <__lshift>:
 800affc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b000:	460c      	mov	r4, r1
 800b002:	6849      	ldr	r1, [r1, #4]
 800b004:	6923      	ldr	r3, [r4, #16]
 800b006:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b00a:	68a3      	ldr	r3, [r4, #8]
 800b00c:	4607      	mov	r7, r0
 800b00e:	4691      	mov	r9, r2
 800b010:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b014:	f108 0601 	add.w	r6, r8, #1
 800b018:	42b3      	cmp	r3, r6
 800b01a:	db0b      	blt.n	800b034 <__lshift+0x38>
 800b01c:	4638      	mov	r0, r7
 800b01e:	f7ff fd95 	bl	800ab4c <_Balloc>
 800b022:	4605      	mov	r5, r0
 800b024:	b948      	cbnz	r0, 800b03a <__lshift+0x3e>
 800b026:	4602      	mov	r2, r0
 800b028:	4b28      	ldr	r3, [pc, #160]	@ (800b0cc <__lshift+0xd0>)
 800b02a:	4829      	ldr	r0, [pc, #164]	@ (800b0d0 <__lshift+0xd4>)
 800b02c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800b030:	f001 f874 	bl	800c11c <__assert_func>
 800b034:	3101      	adds	r1, #1
 800b036:	005b      	lsls	r3, r3, #1
 800b038:	e7ee      	b.n	800b018 <__lshift+0x1c>
 800b03a:	2300      	movs	r3, #0
 800b03c:	f100 0114 	add.w	r1, r0, #20
 800b040:	f100 0210 	add.w	r2, r0, #16
 800b044:	4618      	mov	r0, r3
 800b046:	4553      	cmp	r3, sl
 800b048:	db33      	blt.n	800b0b2 <__lshift+0xb6>
 800b04a:	6920      	ldr	r0, [r4, #16]
 800b04c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b050:	f104 0314 	add.w	r3, r4, #20
 800b054:	f019 091f 	ands.w	r9, r9, #31
 800b058:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b05c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b060:	d02b      	beq.n	800b0ba <__lshift+0xbe>
 800b062:	f1c9 0e20 	rsb	lr, r9, #32
 800b066:	468a      	mov	sl, r1
 800b068:	2200      	movs	r2, #0
 800b06a:	6818      	ldr	r0, [r3, #0]
 800b06c:	fa00 f009 	lsl.w	r0, r0, r9
 800b070:	4310      	orrs	r0, r2
 800b072:	f84a 0b04 	str.w	r0, [sl], #4
 800b076:	f853 2b04 	ldr.w	r2, [r3], #4
 800b07a:	459c      	cmp	ip, r3
 800b07c:	fa22 f20e 	lsr.w	r2, r2, lr
 800b080:	d8f3      	bhi.n	800b06a <__lshift+0x6e>
 800b082:	ebac 0304 	sub.w	r3, ip, r4
 800b086:	3b15      	subs	r3, #21
 800b088:	f023 0303 	bic.w	r3, r3, #3
 800b08c:	3304      	adds	r3, #4
 800b08e:	f104 0015 	add.w	r0, r4, #21
 800b092:	4584      	cmp	ip, r0
 800b094:	bf38      	it	cc
 800b096:	2304      	movcc	r3, #4
 800b098:	50ca      	str	r2, [r1, r3]
 800b09a:	b10a      	cbz	r2, 800b0a0 <__lshift+0xa4>
 800b09c:	f108 0602 	add.w	r6, r8, #2
 800b0a0:	3e01      	subs	r6, #1
 800b0a2:	4638      	mov	r0, r7
 800b0a4:	612e      	str	r6, [r5, #16]
 800b0a6:	4621      	mov	r1, r4
 800b0a8:	f7ff fd90 	bl	800abcc <_Bfree>
 800b0ac:	4628      	mov	r0, r5
 800b0ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b0b2:	f842 0f04 	str.w	r0, [r2, #4]!
 800b0b6:	3301      	adds	r3, #1
 800b0b8:	e7c5      	b.n	800b046 <__lshift+0x4a>
 800b0ba:	3904      	subs	r1, #4
 800b0bc:	f853 2b04 	ldr.w	r2, [r3], #4
 800b0c0:	f841 2f04 	str.w	r2, [r1, #4]!
 800b0c4:	459c      	cmp	ip, r3
 800b0c6:	d8f9      	bhi.n	800b0bc <__lshift+0xc0>
 800b0c8:	e7ea      	b.n	800b0a0 <__lshift+0xa4>
 800b0ca:	bf00      	nop
 800b0cc:	0800d13a 	.word	0x0800d13a
 800b0d0:	0800d1ab 	.word	0x0800d1ab

0800b0d4 <__mcmp>:
 800b0d4:	690a      	ldr	r2, [r1, #16]
 800b0d6:	4603      	mov	r3, r0
 800b0d8:	6900      	ldr	r0, [r0, #16]
 800b0da:	1a80      	subs	r0, r0, r2
 800b0dc:	b530      	push	{r4, r5, lr}
 800b0de:	d10e      	bne.n	800b0fe <__mcmp+0x2a>
 800b0e0:	3314      	adds	r3, #20
 800b0e2:	3114      	adds	r1, #20
 800b0e4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800b0e8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800b0ec:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b0f0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b0f4:	4295      	cmp	r5, r2
 800b0f6:	d003      	beq.n	800b100 <__mcmp+0x2c>
 800b0f8:	d205      	bcs.n	800b106 <__mcmp+0x32>
 800b0fa:	f04f 30ff 	mov.w	r0, #4294967295
 800b0fe:	bd30      	pop	{r4, r5, pc}
 800b100:	42a3      	cmp	r3, r4
 800b102:	d3f3      	bcc.n	800b0ec <__mcmp+0x18>
 800b104:	e7fb      	b.n	800b0fe <__mcmp+0x2a>
 800b106:	2001      	movs	r0, #1
 800b108:	e7f9      	b.n	800b0fe <__mcmp+0x2a>
	...

0800b10c <__mdiff>:
 800b10c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b110:	4689      	mov	r9, r1
 800b112:	4606      	mov	r6, r0
 800b114:	4611      	mov	r1, r2
 800b116:	4648      	mov	r0, r9
 800b118:	4614      	mov	r4, r2
 800b11a:	f7ff ffdb 	bl	800b0d4 <__mcmp>
 800b11e:	1e05      	subs	r5, r0, #0
 800b120:	d112      	bne.n	800b148 <__mdiff+0x3c>
 800b122:	4629      	mov	r1, r5
 800b124:	4630      	mov	r0, r6
 800b126:	f7ff fd11 	bl	800ab4c <_Balloc>
 800b12a:	4602      	mov	r2, r0
 800b12c:	b928      	cbnz	r0, 800b13a <__mdiff+0x2e>
 800b12e:	4b3f      	ldr	r3, [pc, #252]	@ (800b22c <__mdiff+0x120>)
 800b130:	f240 2137 	movw	r1, #567	@ 0x237
 800b134:	483e      	ldr	r0, [pc, #248]	@ (800b230 <__mdiff+0x124>)
 800b136:	f000 fff1 	bl	800c11c <__assert_func>
 800b13a:	2301      	movs	r3, #1
 800b13c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b140:	4610      	mov	r0, r2
 800b142:	b003      	add	sp, #12
 800b144:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b148:	bfbc      	itt	lt
 800b14a:	464b      	movlt	r3, r9
 800b14c:	46a1      	movlt	r9, r4
 800b14e:	4630      	mov	r0, r6
 800b150:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800b154:	bfba      	itte	lt
 800b156:	461c      	movlt	r4, r3
 800b158:	2501      	movlt	r5, #1
 800b15a:	2500      	movge	r5, #0
 800b15c:	f7ff fcf6 	bl	800ab4c <_Balloc>
 800b160:	4602      	mov	r2, r0
 800b162:	b918      	cbnz	r0, 800b16c <__mdiff+0x60>
 800b164:	4b31      	ldr	r3, [pc, #196]	@ (800b22c <__mdiff+0x120>)
 800b166:	f240 2145 	movw	r1, #581	@ 0x245
 800b16a:	e7e3      	b.n	800b134 <__mdiff+0x28>
 800b16c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800b170:	6926      	ldr	r6, [r4, #16]
 800b172:	60c5      	str	r5, [r0, #12]
 800b174:	f109 0310 	add.w	r3, r9, #16
 800b178:	f109 0514 	add.w	r5, r9, #20
 800b17c:	f104 0e14 	add.w	lr, r4, #20
 800b180:	f100 0b14 	add.w	fp, r0, #20
 800b184:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800b188:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800b18c:	9301      	str	r3, [sp, #4]
 800b18e:	46d9      	mov	r9, fp
 800b190:	f04f 0c00 	mov.w	ip, #0
 800b194:	9b01      	ldr	r3, [sp, #4]
 800b196:	f85e 0b04 	ldr.w	r0, [lr], #4
 800b19a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800b19e:	9301      	str	r3, [sp, #4]
 800b1a0:	fa1f f38a 	uxth.w	r3, sl
 800b1a4:	4619      	mov	r1, r3
 800b1a6:	b283      	uxth	r3, r0
 800b1a8:	1acb      	subs	r3, r1, r3
 800b1aa:	0c00      	lsrs	r0, r0, #16
 800b1ac:	4463      	add	r3, ip
 800b1ae:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800b1b2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800b1b6:	b29b      	uxth	r3, r3
 800b1b8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800b1bc:	4576      	cmp	r6, lr
 800b1be:	f849 3b04 	str.w	r3, [r9], #4
 800b1c2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b1c6:	d8e5      	bhi.n	800b194 <__mdiff+0x88>
 800b1c8:	1b33      	subs	r3, r6, r4
 800b1ca:	3b15      	subs	r3, #21
 800b1cc:	f023 0303 	bic.w	r3, r3, #3
 800b1d0:	3415      	adds	r4, #21
 800b1d2:	3304      	adds	r3, #4
 800b1d4:	42a6      	cmp	r6, r4
 800b1d6:	bf38      	it	cc
 800b1d8:	2304      	movcc	r3, #4
 800b1da:	441d      	add	r5, r3
 800b1dc:	445b      	add	r3, fp
 800b1de:	461e      	mov	r6, r3
 800b1e0:	462c      	mov	r4, r5
 800b1e2:	4544      	cmp	r4, r8
 800b1e4:	d30e      	bcc.n	800b204 <__mdiff+0xf8>
 800b1e6:	f108 0103 	add.w	r1, r8, #3
 800b1ea:	1b49      	subs	r1, r1, r5
 800b1ec:	f021 0103 	bic.w	r1, r1, #3
 800b1f0:	3d03      	subs	r5, #3
 800b1f2:	45a8      	cmp	r8, r5
 800b1f4:	bf38      	it	cc
 800b1f6:	2100      	movcc	r1, #0
 800b1f8:	440b      	add	r3, r1
 800b1fa:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b1fe:	b191      	cbz	r1, 800b226 <__mdiff+0x11a>
 800b200:	6117      	str	r7, [r2, #16]
 800b202:	e79d      	b.n	800b140 <__mdiff+0x34>
 800b204:	f854 1b04 	ldr.w	r1, [r4], #4
 800b208:	46e6      	mov	lr, ip
 800b20a:	0c08      	lsrs	r0, r1, #16
 800b20c:	fa1c fc81 	uxtah	ip, ip, r1
 800b210:	4471      	add	r1, lr
 800b212:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800b216:	b289      	uxth	r1, r1
 800b218:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800b21c:	f846 1b04 	str.w	r1, [r6], #4
 800b220:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b224:	e7dd      	b.n	800b1e2 <__mdiff+0xd6>
 800b226:	3f01      	subs	r7, #1
 800b228:	e7e7      	b.n	800b1fa <__mdiff+0xee>
 800b22a:	bf00      	nop
 800b22c:	0800d13a 	.word	0x0800d13a
 800b230:	0800d1ab 	.word	0x0800d1ab

0800b234 <__ulp>:
 800b234:	b082      	sub	sp, #8
 800b236:	ed8d 0b00 	vstr	d0, [sp]
 800b23a:	9a01      	ldr	r2, [sp, #4]
 800b23c:	4b0f      	ldr	r3, [pc, #60]	@ (800b27c <__ulp+0x48>)
 800b23e:	4013      	ands	r3, r2
 800b240:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800b244:	2b00      	cmp	r3, #0
 800b246:	dc08      	bgt.n	800b25a <__ulp+0x26>
 800b248:	425b      	negs	r3, r3
 800b24a:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800b24e:	ea4f 5223 	mov.w	r2, r3, asr #20
 800b252:	da04      	bge.n	800b25e <__ulp+0x2a>
 800b254:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800b258:	4113      	asrs	r3, r2
 800b25a:	2200      	movs	r2, #0
 800b25c:	e008      	b.n	800b270 <__ulp+0x3c>
 800b25e:	f1a2 0314 	sub.w	r3, r2, #20
 800b262:	2b1e      	cmp	r3, #30
 800b264:	bfda      	itte	le
 800b266:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800b26a:	40da      	lsrle	r2, r3
 800b26c:	2201      	movgt	r2, #1
 800b26e:	2300      	movs	r3, #0
 800b270:	4619      	mov	r1, r3
 800b272:	4610      	mov	r0, r2
 800b274:	ec41 0b10 	vmov	d0, r0, r1
 800b278:	b002      	add	sp, #8
 800b27a:	4770      	bx	lr
 800b27c:	7ff00000 	.word	0x7ff00000

0800b280 <__b2d>:
 800b280:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b284:	6906      	ldr	r6, [r0, #16]
 800b286:	f100 0814 	add.w	r8, r0, #20
 800b28a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800b28e:	1f37      	subs	r7, r6, #4
 800b290:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800b294:	4610      	mov	r0, r2
 800b296:	f7ff fd4b 	bl	800ad30 <__hi0bits>
 800b29a:	f1c0 0320 	rsb	r3, r0, #32
 800b29e:	280a      	cmp	r0, #10
 800b2a0:	600b      	str	r3, [r1, #0]
 800b2a2:	491b      	ldr	r1, [pc, #108]	@ (800b310 <__b2d+0x90>)
 800b2a4:	dc15      	bgt.n	800b2d2 <__b2d+0x52>
 800b2a6:	f1c0 0c0b 	rsb	ip, r0, #11
 800b2aa:	fa22 f30c 	lsr.w	r3, r2, ip
 800b2ae:	45b8      	cmp	r8, r7
 800b2b0:	ea43 0501 	orr.w	r5, r3, r1
 800b2b4:	bf34      	ite	cc
 800b2b6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800b2ba:	2300      	movcs	r3, #0
 800b2bc:	3015      	adds	r0, #21
 800b2be:	fa02 f000 	lsl.w	r0, r2, r0
 800b2c2:	fa23 f30c 	lsr.w	r3, r3, ip
 800b2c6:	4303      	orrs	r3, r0
 800b2c8:	461c      	mov	r4, r3
 800b2ca:	ec45 4b10 	vmov	d0, r4, r5
 800b2ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b2d2:	45b8      	cmp	r8, r7
 800b2d4:	bf3a      	itte	cc
 800b2d6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800b2da:	f1a6 0708 	subcc.w	r7, r6, #8
 800b2de:	2300      	movcs	r3, #0
 800b2e0:	380b      	subs	r0, #11
 800b2e2:	d012      	beq.n	800b30a <__b2d+0x8a>
 800b2e4:	f1c0 0120 	rsb	r1, r0, #32
 800b2e8:	fa23 f401 	lsr.w	r4, r3, r1
 800b2ec:	4082      	lsls	r2, r0
 800b2ee:	4322      	orrs	r2, r4
 800b2f0:	4547      	cmp	r7, r8
 800b2f2:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800b2f6:	bf8c      	ite	hi
 800b2f8:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800b2fc:	2200      	movls	r2, #0
 800b2fe:	4083      	lsls	r3, r0
 800b300:	40ca      	lsrs	r2, r1
 800b302:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800b306:	4313      	orrs	r3, r2
 800b308:	e7de      	b.n	800b2c8 <__b2d+0x48>
 800b30a:	ea42 0501 	orr.w	r5, r2, r1
 800b30e:	e7db      	b.n	800b2c8 <__b2d+0x48>
 800b310:	3ff00000 	.word	0x3ff00000

0800b314 <__d2b>:
 800b314:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b318:	460f      	mov	r7, r1
 800b31a:	2101      	movs	r1, #1
 800b31c:	ec59 8b10 	vmov	r8, r9, d0
 800b320:	4616      	mov	r6, r2
 800b322:	f7ff fc13 	bl	800ab4c <_Balloc>
 800b326:	4604      	mov	r4, r0
 800b328:	b930      	cbnz	r0, 800b338 <__d2b+0x24>
 800b32a:	4602      	mov	r2, r0
 800b32c:	4b23      	ldr	r3, [pc, #140]	@ (800b3bc <__d2b+0xa8>)
 800b32e:	4824      	ldr	r0, [pc, #144]	@ (800b3c0 <__d2b+0xac>)
 800b330:	f240 310f 	movw	r1, #783	@ 0x30f
 800b334:	f000 fef2 	bl	800c11c <__assert_func>
 800b338:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b33c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b340:	b10d      	cbz	r5, 800b346 <__d2b+0x32>
 800b342:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b346:	9301      	str	r3, [sp, #4]
 800b348:	f1b8 0300 	subs.w	r3, r8, #0
 800b34c:	d023      	beq.n	800b396 <__d2b+0x82>
 800b34e:	4668      	mov	r0, sp
 800b350:	9300      	str	r3, [sp, #0]
 800b352:	f7ff fd0c 	bl	800ad6e <__lo0bits>
 800b356:	e9dd 1200 	ldrd	r1, r2, [sp]
 800b35a:	b1d0      	cbz	r0, 800b392 <__d2b+0x7e>
 800b35c:	f1c0 0320 	rsb	r3, r0, #32
 800b360:	fa02 f303 	lsl.w	r3, r2, r3
 800b364:	430b      	orrs	r3, r1
 800b366:	40c2      	lsrs	r2, r0
 800b368:	6163      	str	r3, [r4, #20]
 800b36a:	9201      	str	r2, [sp, #4]
 800b36c:	9b01      	ldr	r3, [sp, #4]
 800b36e:	61a3      	str	r3, [r4, #24]
 800b370:	2b00      	cmp	r3, #0
 800b372:	bf0c      	ite	eq
 800b374:	2201      	moveq	r2, #1
 800b376:	2202      	movne	r2, #2
 800b378:	6122      	str	r2, [r4, #16]
 800b37a:	b1a5      	cbz	r5, 800b3a6 <__d2b+0x92>
 800b37c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800b380:	4405      	add	r5, r0
 800b382:	603d      	str	r5, [r7, #0]
 800b384:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800b388:	6030      	str	r0, [r6, #0]
 800b38a:	4620      	mov	r0, r4
 800b38c:	b003      	add	sp, #12
 800b38e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b392:	6161      	str	r1, [r4, #20]
 800b394:	e7ea      	b.n	800b36c <__d2b+0x58>
 800b396:	a801      	add	r0, sp, #4
 800b398:	f7ff fce9 	bl	800ad6e <__lo0bits>
 800b39c:	9b01      	ldr	r3, [sp, #4]
 800b39e:	6163      	str	r3, [r4, #20]
 800b3a0:	3020      	adds	r0, #32
 800b3a2:	2201      	movs	r2, #1
 800b3a4:	e7e8      	b.n	800b378 <__d2b+0x64>
 800b3a6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b3aa:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800b3ae:	6038      	str	r0, [r7, #0]
 800b3b0:	6918      	ldr	r0, [r3, #16]
 800b3b2:	f7ff fcbd 	bl	800ad30 <__hi0bits>
 800b3b6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b3ba:	e7e5      	b.n	800b388 <__d2b+0x74>
 800b3bc:	0800d13a 	.word	0x0800d13a
 800b3c0:	0800d1ab 	.word	0x0800d1ab

0800b3c4 <__ratio>:
 800b3c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3c8:	b085      	sub	sp, #20
 800b3ca:	e9cd 1000 	strd	r1, r0, [sp]
 800b3ce:	a902      	add	r1, sp, #8
 800b3d0:	f7ff ff56 	bl	800b280 <__b2d>
 800b3d4:	9800      	ldr	r0, [sp, #0]
 800b3d6:	a903      	add	r1, sp, #12
 800b3d8:	ec55 4b10 	vmov	r4, r5, d0
 800b3dc:	f7ff ff50 	bl	800b280 <__b2d>
 800b3e0:	9b01      	ldr	r3, [sp, #4]
 800b3e2:	6919      	ldr	r1, [r3, #16]
 800b3e4:	9b00      	ldr	r3, [sp, #0]
 800b3e6:	691b      	ldr	r3, [r3, #16]
 800b3e8:	1ac9      	subs	r1, r1, r3
 800b3ea:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800b3ee:	1a9b      	subs	r3, r3, r2
 800b3f0:	ec5b ab10 	vmov	sl, fp, d0
 800b3f4:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	bfce      	itee	gt
 800b3fc:	462a      	movgt	r2, r5
 800b3fe:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800b402:	465a      	movle	r2, fp
 800b404:	462f      	mov	r7, r5
 800b406:	46d9      	mov	r9, fp
 800b408:	bfcc      	ite	gt
 800b40a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800b40e:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800b412:	464b      	mov	r3, r9
 800b414:	4652      	mov	r2, sl
 800b416:	4620      	mov	r0, r4
 800b418:	4639      	mov	r1, r7
 800b41a:	f7f5 fa27 	bl	800086c <__aeabi_ddiv>
 800b41e:	ec41 0b10 	vmov	d0, r0, r1
 800b422:	b005      	add	sp, #20
 800b424:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b428 <__copybits>:
 800b428:	3901      	subs	r1, #1
 800b42a:	b570      	push	{r4, r5, r6, lr}
 800b42c:	1149      	asrs	r1, r1, #5
 800b42e:	6914      	ldr	r4, [r2, #16]
 800b430:	3101      	adds	r1, #1
 800b432:	f102 0314 	add.w	r3, r2, #20
 800b436:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b43a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b43e:	1f05      	subs	r5, r0, #4
 800b440:	42a3      	cmp	r3, r4
 800b442:	d30c      	bcc.n	800b45e <__copybits+0x36>
 800b444:	1aa3      	subs	r3, r4, r2
 800b446:	3b11      	subs	r3, #17
 800b448:	f023 0303 	bic.w	r3, r3, #3
 800b44c:	3211      	adds	r2, #17
 800b44e:	42a2      	cmp	r2, r4
 800b450:	bf88      	it	hi
 800b452:	2300      	movhi	r3, #0
 800b454:	4418      	add	r0, r3
 800b456:	2300      	movs	r3, #0
 800b458:	4288      	cmp	r0, r1
 800b45a:	d305      	bcc.n	800b468 <__copybits+0x40>
 800b45c:	bd70      	pop	{r4, r5, r6, pc}
 800b45e:	f853 6b04 	ldr.w	r6, [r3], #4
 800b462:	f845 6f04 	str.w	r6, [r5, #4]!
 800b466:	e7eb      	b.n	800b440 <__copybits+0x18>
 800b468:	f840 3b04 	str.w	r3, [r0], #4
 800b46c:	e7f4      	b.n	800b458 <__copybits+0x30>

0800b46e <__any_on>:
 800b46e:	f100 0214 	add.w	r2, r0, #20
 800b472:	6900      	ldr	r0, [r0, #16]
 800b474:	114b      	asrs	r3, r1, #5
 800b476:	4298      	cmp	r0, r3
 800b478:	b510      	push	{r4, lr}
 800b47a:	db11      	blt.n	800b4a0 <__any_on+0x32>
 800b47c:	dd0a      	ble.n	800b494 <__any_on+0x26>
 800b47e:	f011 011f 	ands.w	r1, r1, #31
 800b482:	d007      	beq.n	800b494 <__any_on+0x26>
 800b484:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800b488:	fa24 f001 	lsr.w	r0, r4, r1
 800b48c:	fa00 f101 	lsl.w	r1, r0, r1
 800b490:	428c      	cmp	r4, r1
 800b492:	d10b      	bne.n	800b4ac <__any_on+0x3e>
 800b494:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b498:	4293      	cmp	r3, r2
 800b49a:	d803      	bhi.n	800b4a4 <__any_on+0x36>
 800b49c:	2000      	movs	r0, #0
 800b49e:	bd10      	pop	{r4, pc}
 800b4a0:	4603      	mov	r3, r0
 800b4a2:	e7f7      	b.n	800b494 <__any_on+0x26>
 800b4a4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b4a8:	2900      	cmp	r1, #0
 800b4aa:	d0f5      	beq.n	800b498 <__any_on+0x2a>
 800b4ac:	2001      	movs	r0, #1
 800b4ae:	e7f6      	b.n	800b49e <__any_on+0x30>

0800b4b0 <_strtoul_l.constprop.0>:
 800b4b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b4b4:	4e34      	ldr	r6, [pc, #208]	@ (800b588 <_strtoul_l.constprop.0+0xd8>)
 800b4b6:	4686      	mov	lr, r0
 800b4b8:	460d      	mov	r5, r1
 800b4ba:	4628      	mov	r0, r5
 800b4bc:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b4c0:	5d37      	ldrb	r7, [r6, r4]
 800b4c2:	f017 0708 	ands.w	r7, r7, #8
 800b4c6:	d1f8      	bne.n	800b4ba <_strtoul_l.constprop.0+0xa>
 800b4c8:	2c2d      	cmp	r4, #45	@ 0x2d
 800b4ca:	d12f      	bne.n	800b52c <_strtoul_l.constprop.0+0x7c>
 800b4cc:	782c      	ldrb	r4, [r5, #0]
 800b4ce:	2701      	movs	r7, #1
 800b4d0:	1c85      	adds	r5, r0, #2
 800b4d2:	f033 0010 	bics.w	r0, r3, #16
 800b4d6:	d109      	bne.n	800b4ec <_strtoul_l.constprop.0+0x3c>
 800b4d8:	2c30      	cmp	r4, #48	@ 0x30
 800b4da:	d12c      	bne.n	800b536 <_strtoul_l.constprop.0+0x86>
 800b4dc:	7828      	ldrb	r0, [r5, #0]
 800b4de:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 800b4e2:	2858      	cmp	r0, #88	@ 0x58
 800b4e4:	d127      	bne.n	800b536 <_strtoul_l.constprop.0+0x86>
 800b4e6:	786c      	ldrb	r4, [r5, #1]
 800b4e8:	2310      	movs	r3, #16
 800b4ea:	3502      	adds	r5, #2
 800b4ec:	f04f 38ff 	mov.w	r8, #4294967295
 800b4f0:	2600      	movs	r6, #0
 800b4f2:	fbb8 f8f3 	udiv	r8, r8, r3
 800b4f6:	fb03 f908 	mul.w	r9, r3, r8
 800b4fa:	ea6f 0909 	mvn.w	r9, r9
 800b4fe:	4630      	mov	r0, r6
 800b500:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 800b504:	f1bc 0f09 	cmp.w	ip, #9
 800b508:	d81c      	bhi.n	800b544 <_strtoul_l.constprop.0+0x94>
 800b50a:	4664      	mov	r4, ip
 800b50c:	42a3      	cmp	r3, r4
 800b50e:	dd2a      	ble.n	800b566 <_strtoul_l.constprop.0+0xb6>
 800b510:	f1b6 3fff 	cmp.w	r6, #4294967295
 800b514:	d007      	beq.n	800b526 <_strtoul_l.constprop.0+0x76>
 800b516:	4580      	cmp	r8, r0
 800b518:	d322      	bcc.n	800b560 <_strtoul_l.constprop.0+0xb0>
 800b51a:	d101      	bne.n	800b520 <_strtoul_l.constprop.0+0x70>
 800b51c:	45a1      	cmp	r9, r4
 800b51e:	db1f      	blt.n	800b560 <_strtoul_l.constprop.0+0xb0>
 800b520:	fb00 4003 	mla	r0, r0, r3, r4
 800b524:	2601      	movs	r6, #1
 800b526:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b52a:	e7e9      	b.n	800b500 <_strtoul_l.constprop.0+0x50>
 800b52c:	2c2b      	cmp	r4, #43	@ 0x2b
 800b52e:	bf04      	itt	eq
 800b530:	782c      	ldrbeq	r4, [r5, #0]
 800b532:	1c85      	addeq	r5, r0, #2
 800b534:	e7cd      	b.n	800b4d2 <_strtoul_l.constprop.0+0x22>
 800b536:	2b00      	cmp	r3, #0
 800b538:	d1d8      	bne.n	800b4ec <_strtoul_l.constprop.0+0x3c>
 800b53a:	2c30      	cmp	r4, #48	@ 0x30
 800b53c:	bf0c      	ite	eq
 800b53e:	2308      	moveq	r3, #8
 800b540:	230a      	movne	r3, #10
 800b542:	e7d3      	b.n	800b4ec <_strtoul_l.constprop.0+0x3c>
 800b544:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 800b548:	f1bc 0f19 	cmp.w	ip, #25
 800b54c:	d801      	bhi.n	800b552 <_strtoul_l.constprop.0+0xa2>
 800b54e:	3c37      	subs	r4, #55	@ 0x37
 800b550:	e7dc      	b.n	800b50c <_strtoul_l.constprop.0+0x5c>
 800b552:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 800b556:	f1bc 0f19 	cmp.w	ip, #25
 800b55a:	d804      	bhi.n	800b566 <_strtoul_l.constprop.0+0xb6>
 800b55c:	3c57      	subs	r4, #87	@ 0x57
 800b55e:	e7d5      	b.n	800b50c <_strtoul_l.constprop.0+0x5c>
 800b560:	f04f 36ff 	mov.w	r6, #4294967295
 800b564:	e7df      	b.n	800b526 <_strtoul_l.constprop.0+0x76>
 800b566:	1c73      	adds	r3, r6, #1
 800b568:	d106      	bne.n	800b578 <_strtoul_l.constprop.0+0xc8>
 800b56a:	2322      	movs	r3, #34	@ 0x22
 800b56c:	f8ce 3000 	str.w	r3, [lr]
 800b570:	4630      	mov	r0, r6
 800b572:	b932      	cbnz	r2, 800b582 <_strtoul_l.constprop.0+0xd2>
 800b574:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b578:	b107      	cbz	r7, 800b57c <_strtoul_l.constprop.0+0xcc>
 800b57a:	4240      	negs	r0, r0
 800b57c:	2a00      	cmp	r2, #0
 800b57e:	d0f9      	beq.n	800b574 <_strtoul_l.constprop.0+0xc4>
 800b580:	b106      	cbz	r6, 800b584 <_strtoul_l.constprop.0+0xd4>
 800b582:	1e69      	subs	r1, r5, #1
 800b584:	6011      	str	r1, [r2, #0]
 800b586:	e7f5      	b.n	800b574 <_strtoul_l.constprop.0+0xc4>
 800b588:	0800ced1 	.word	0x0800ced1

0800b58c <_strtoul_r>:
 800b58c:	f7ff bf90 	b.w	800b4b0 <_strtoul_l.constprop.0>

0800b590 <strtoul>:
 800b590:	4613      	mov	r3, r2
 800b592:	460a      	mov	r2, r1
 800b594:	4601      	mov	r1, r0
 800b596:	4802      	ldr	r0, [pc, #8]	@ (800b5a0 <strtoul+0x10>)
 800b598:	6800      	ldr	r0, [r0, #0]
 800b59a:	f7ff bf89 	b.w	800b4b0 <_strtoul_l.constprop.0>
 800b59e:	bf00      	nop
 800b5a0:	2000019c 	.word	0x2000019c

0800b5a4 <__ascii_wctomb>:
 800b5a4:	4603      	mov	r3, r0
 800b5a6:	4608      	mov	r0, r1
 800b5a8:	b141      	cbz	r1, 800b5bc <__ascii_wctomb+0x18>
 800b5aa:	2aff      	cmp	r2, #255	@ 0xff
 800b5ac:	d904      	bls.n	800b5b8 <__ascii_wctomb+0x14>
 800b5ae:	228a      	movs	r2, #138	@ 0x8a
 800b5b0:	601a      	str	r2, [r3, #0]
 800b5b2:	f04f 30ff 	mov.w	r0, #4294967295
 800b5b6:	4770      	bx	lr
 800b5b8:	700a      	strb	r2, [r1, #0]
 800b5ba:	2001      	movs	r0, #1
 800b5bc:	4770      	bx	lr

0800b5be <__ssputs_r>:
 800b5be:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b5c2:	688e      	ldr	r6, [r1, #8]
 800b5c4:	461f      	mov	r7, r3
 800b5c6:	42be      	cmp	r6, r7
 800b5c8:	680b      	ldr	r3, [r1, #0]
 800b5ca:	4682      	mov	sl, r0
 800b5cc:	460c      	mov	r4, r1
 800b5ce:	4690      	mov	r8, r2
 800b5d0:	d82d      	bhi.n	800b62e <__ssputs_r+0x70>
 800b5d2:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b5d6:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800b5da:	d026      	beq.n	800b62a <__ssputs_r+0x6c>
 800b5dc:	6965      	ldr	r5, [r4, #20]
 800b5de:	6909      	ldr	r1, [r1, #16]
 800b5e0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b5e4:	eba3 0901 	sub.w	r9, r3, r1
 800b5e8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b5ec:	1c7b      	adds	r3, r7, #1
 800b5ee:	444b      	add	r3, r9
 800b5f0:	106d      	asrs	r5, r5, #1
 800b5f2:	429d      	cmp	r5, r3
 800b5f4:	bf38      	it	cc
 800b5f6:	461d      	movcc	r5, r3
 800b5f8:	0553      	lsls	r3, r2, #21
 800b5fa:	d527      	bpl.n	800b64c <__ssputs_r+0x8e>
 800b5fc:	4629      	mov	r1, r5
 800b5fe:	f7fb faeb 	bl	8006bd8 <_malloc_r>
 800b602:	4606      	mov	r6, r0
 800b604:	b360      	cbz	r0, 800b660 <__ssputs_r+0xa2>
 800b606:	6921      	ldr	r1, [r4, #16]
 800b608:	464a      	mov	r2, r9
 800b60a:	f7fe f852 	bl	80096b2 <memcpy>
 800b60e:	89a3      	ldrh	r3, [r4, #12]
 800b610:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800b614:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b618:	81a3      	strh	r3, [r4, #12]
 800b61a:	6126      	str	r6, [r4, #16]
 800b61c:	6165      	str	r5, [r4, #20]
 800b61e:	444e      	add	r6, r9
 800b620:	eba5 0509 	sub.w	r5, r5, r9
 800b624:	6026      	str	r6, [r4, #0]
 800b626:	60a5      	str	r5, [r4, #8]
 800b628:	463e      	mov	r6, r7
 800b62a:	42be      	cmp	r6, r7
 800b62c:	d900      	bls.n	800b630 <__ssputs_r+0x72>
 800b62e:	463e      	mov	r6, r7
 800b630:	6820      	ldr	r0, [r4, #0]
 800b632:	4632      	mov	r2, r6
 800b634:	4641      	mov	r1, r8
 800b636:	f000 fd52 	bl	800c0de <memmove>
 800b63a:	68a3      	ldr	r3, [r4, #8]
 800b63c:	1b9b      	subs	r3, r3, r6
 800b63e:	60a3      	str	r3, [r4, #8]
 800b640:	6823      	ldr	r3, [r4, #0]
 800b642:	4433      	add	r3, r6
 800b644:	6023      	str	r3, [r4, #0]
 800b646:	2000      	movs	r0, #0
 800b648:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b64c:	462a      	mov	r2, r5
 800b64e:	f000 fda3 	bl	800c198 <_realloc_r>
 800b652:	4606      	mov	r6, r0
 800b654:	2800      	cmp	r0, #0
 800b656:	d1e0      	bne.n	800b61a <__ssputs_r+0x5c>
 800b658:	6921      	ldr	r1, [r4, #16]
 800b65a:	4650      	mov	r0, sl
 800b65c:	f7fe fe9c 	bl	800a398 <_free_r>
 800b660:	230c      	movs	r3, #12
 800b662:	f8ca 3000 	str.w	r3, [sl]
 800b666:	89a3      	ldrh	r3, [r4, #12]
 800b668:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b66c:	81a3      	strh	r3, [r4, #12]
 800b66e:	f04f 30ff 	mov.w	r0, #4294967295
 800b672:	e7e9      	b.n	800b648 <__ssputs_r+0x8a>

0800b674 <_svfiprintf_r>:
 800b674:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b678:	4698      	mov	r8, r3
 800b67a:	898b      	ldrh	r3, [r1, #12]
 800b67c:	061b      	lsls	r3, r3, #24
 800b67e:	b09d      	sub	sp, #116	@ 0x74
 800b680:	4607      	mov	r7, r0
 800b682:	460d      	mov	r5, r1
 800b684:	4614      	mov	r4, r2
 800b686:	d510      	bpl.n	800b6aa <_svfiprintf_r+0x36>
 800b688:	690b      	ldr	r3, [r1, #16]
 800b68a:	b973      	cbnz	r3, 800b6aa <_svfiprintf_r+0x36>
 800b68c:	2140      	movs	r1, #64	@ 0x40
 800b68e:	f7fb faa3 	bl	8006bd8 <_malloc_r>
 800b692:	6028      	str	r0, [r5, #0]
 800b694:	6128      	str	r0, [r5, #16]
 800b696:	b930      	cbnz	r0, 800b6a6 <_svfiprintf_r+0x32>
 800b698:	230c      	movs	r3, #12
 800b69a:	603b      	str	r3, [r7, #0]
 800b69c:	f04f 30ff 	mov.w	r0, #4294967295
 800b6a0:	b01d      	add	sp, #116	@ 0x74
 800b6a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b6a6:	2340      	movs	r3, #64	@ 0x40
 800b6a8:	616b      	str	r3, [r5, #20]
 800b6aa:	2300      	movs	r3, #0
 800b6ac:	9309      	str	r3, [sp, #36]	@ 0x24
 800b6ae:	2320      	movs	r3, #32
 800b6b0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b6b4:	f8cd 800c 	str.w	r8, [sp, #12]
 800b6b8:	2330      	movs	r3, #48	@ 0x30
 800b6ba:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800b858 <_svfiprintf_r+0x1e4>
 800b6be:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b6c2:	f04f 0901 	mov.w	r9, #1
 800b6c6:	4623      	mov	r3, r4
 800b6c8:	469a      	mov	sl, r3
 800b6ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b6ce:	b10a      	cbz	r2, 800b6d4 <_svfiprintf_r+0x60>
 800b6d0:	2a25      	cmp	r2, #37	@ 0x25
 800b6d2:	d1f9      	bne.n	800b6c8 <_svfiprintf_r+0x54>
 800b6d4:	ebba 0b04 	subs.w	fp, sl, r4
 800b6d8:	d00b      	beq.n	800b6f2 <_svfiprintf_r+0x7e>
 800b6da:	465b      	mov	r3, fp
 800b6dc:	4622      	mov	r2, r4
 800b6de:	4629      	mov	r1, r5
 800b6e0:	4638      	mov	r0, r7
 800b6e2:	f7ff ff6c 	bl	800b5be <__ssputs_r>
 800b6e6:	3001      	adds	r0, #1
 800b6e8:	f000 80a7 	beq.w	800b83a <_svfiprintf_r+0x1c6>
 800b6ec:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b6ee:	445a      	add	r2, fp
 800b6f0:	9209      	str	r2, [sp, #36]	@ 0x24
 800b6f2:	f89a 3000 	ldrb.w	r3, [sl]
 800b6f6:	2b00      	cmp	r3, #0
 800b6f8:	f000 809f 	beq.w	800b83a <_svfiprintf_r+0x1c6>
 800b6fc:	2300      	movs	r3, #0
 800b6fe:	f04f 32ff 	mov.w	r2, #4294967295
 800b702:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b706:	f10a 0a01 	add.w	sl, sl, #1
 800b70a:	9304      	str	r3, [sp, #16]
 800b70c:	9307      	str	r3, [sp, #28]
 800b70e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b712:	931a      	str	r3, [sp, #104]	@ 0x68
 800b714:	4654      	mov	r4, sl
 800b716:	2205      	movs	r2, #5
 800b718:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b71c:	484e      	ldr	r0, [pc, #312]	@ (800b858 <_svfiprintf_r+0x1e4>)
 800b71e:	f7f4 fd67 	bl	80001f0 <memchr>
 800b722:	9a04      	ldr	r2, [sp, #16]
 800b724:	b9d8      	cbnz	r0, 800b75e <_svfiprintf_r+0xea>
 800b726:	06d0      	lsls	r0, r2, #27
 800b728:	bf44      	itt	mi
 800b72a:	2320      	movmi	r3, #32
 800b72c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b730:	0711      	lsls	r1, r2, #28
 800b732:	bf44      	itt	mi
 800b734:	232b      	movmi	r3, #43	@ 0x2b
 800b736:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b73a:	f89a 3000 	ldrb.w	r3, [sl]
 800b73e:	2b2a      	cmp	r3, #42	@ 0x2a
 800b740:	d015      	beq.n	800b76e <_svfiprintf_r+0xfa>
 800b742:	9a07      	ldr	r2, [sp, #28]
 800b744:	4654      	mov	r4, sl
 800b746:	2000      	movs	r0, #0
 800b748:	f04f 0c0a 	mov.w	ip, #10
 800b74c:	4621      	mov	r1, r4
 800b74e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b752:	3b30      	subs	r3, #48	@ 0x30
 800b754:	2b09      	cmp	r3, #9
 800b756:	d94b      	bls.n	800b7f0 <_svfiprintf_r+0x17c>
 800b758:	b1b0      	cbz	r0, 800b788 <_svfiprintf_r+0x114>
 800b75a:	9207      	str	r2, [sp, #28]
 800b75c:	e014      	b.n	800b788 <_svfiprintf_r+0x114>
 800b75e:	eba0 0308 	sub.w	r3, r0, r8
 800b762:	fa09 f303 	lsl.w	r3, r9, r3
 800b766:	4313      	orrs	r3, r2
 800b768:	9304      	str	r3, [sp, #16]
 800b76a:	46a2      	mov	sl, r4
 800b76c:	e7d2      	b.n	800b714 <_svfiprintf_r+0xa0>
 800b76e:	9b03      	ldr	r3, [sp, #12]
 800b770:	1d19      	adds	r1, r3, #4
 800b772:	681b      	ldr	r3, [r3, #0]
 800b774:	9103      	str	r1, [sp, #12]
 800b776:	2b00      	cmp	r3, #0
 800b778:	bfbb      	ittet	lt
 800b77a:	425b      	neglt	r3, r3
 800b77c:	f042 0202 	orrlt.w	r2, r2, #2
 800b780:	9307      	strge	r3, [sp, #28]
 800b782:	9307      	strlt	r3, [sp, #28]
 800b784:	bfb8      	it	lt
 800b786:	9204      	strlt	r2, [sp, #16]
 800b788:	7823      	ldrb	r3, [r4, #0]
 800b78a:	2b2e      	cmp	r3, #46	@ 0x2e
 800b78c:	d10a      	bne.n	800b7a4 <_svfiprintf_r+0x130>
 800b78e:	7863      	ldrb	r3, [r4, #1]
 800b790:	2b2a      	cmp	r3, #42	@ 0x2a
 800b792:	d132      	bne.n	800b7fa <_svfiprintf_r+0x186>
 800b794:	9b03      	ldr	r3, [sp, #12]
 800b796:	1d1a      	adds	r2, r3, #4
 800b798:	681b      	ldr	r3, [r3, #0]
 800b79a:	9203      	str	r2, [sp, #12]
 800b79c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b7a0:	3402      	adds	r4, #2
 800b7a2:	9305      	str	r3, [sp, #20]
 800b7a4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800b868 <_svfiprintf_r+0x1f4>
 800b7a8:	7821      	ldrb	r1, [r4, #0]
 800b7aa:	2203      	movs	r2, #3
 800b7ac:	4650      	mov	r0, sl
 800b7ae:	f7f4 fd1f 	bl	80001f0 <memchr>
 800b7b2:	b138      	cbz	r0, 800b7c4 <_svfiprintf_r+0x150>
 800b7b4:	9b04      	ldr	r3, [sp, #16]
 800b7b6:	eba0 000a 	sub.w	r0, r0, sl
 800b7ba:	2240      	movs	r2, #64	@ 0x40
 800b7bc:	4082      	lsls	r2, r0
 800b7be:	4313      	orrs	r3, r2
 800b7c0:	3401      	adds	r4, #1
 800b7c2:	9304      	str	r3, [sp, #16]
 800b7c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b7c8:	4824      	ldr	r0, [pc, #144]	@ (800b85c <_svfiprintf_r+0x1e8>)
 800b7ca:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b7ce:	2206      	movs	r2, #6
 800b7d0:	f7f4 fd0e 	bl	80001f0 <memchr>
 800b7d4:	2800      	cmp	r0, #0
 800b7d6:	d036      	beq.n	800b846 <_svfiprintf_r+0x1d2>
 800b7d8:	4b21      	ldr	r3, [pc, #132]	@ (800b860 <_svfiprintf_r+0x1ec>)
 800b7da:	bb1b      	cbnz	r3, 800b824 <_svfiprintf_r+0x1b0>
 800b7dc:	9b03      	ldr	r3, [sp, #12]
 800b7de:	3307      	adds	r3, #7
 800b7e0:	f023 0307 	bic.w	r3, r3, #7
 800b7e4:	3308      	adds	r3, #8
 800b7e6:	9303      	str	r3, [sp, #12]
 800b7e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b7ea:	4433      	add	r3, r6
 800b7ec:	9309      	str	r3, [sp, #36]	@ 0x24
 800b7ee:	e76a      	b.n	800b6c6 <_svfiprintf_r+0x52>
 800b7f0:	fb0c 3202 	mla	r2, ip, r2, r3
 800b7f4:	460c      	mov	r4, r1
 800b7f6:	2001      	movs	r0, #1
 800b7f8:	e7a8      	b.n	800b74c <_svfiprintf_r+0xd8>
 800b7fa:	2300      	movs	r3, #0
 800b7fc:	3401      	adds	r4, #1
 800b7fe:	9305      	str	r3, [sp, #20]
 800b800:	4619      	mov	r1, r3
 800b802:	f04f 0c0a 	mov.w	ip, #10
 800b806:	4620      	mov	r0, r4
 800b808:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b80c:	3a30      	subs	r2, #48	@ 0x30
 800b80e:	2a09      	cmp	r2, #9
 800b810:	d903      	bls.n	800b81a <_svfiprintf_r+0x1a6>
 800b812:	2b00      	cmp	r3, #0
 800b814:	d0c6      	beq.n	800b7a4 <_svfiprintf_r+0x130>
 800b816:	9105      	str	r1, [sp, #20]
 800b818:	e7c4      	b.n	800b7a4 <_svfiprintf_r+0x130>
 800b81a:	fb0c 2101 	mla	r1, ip, r1, r2
 800b81e:	4604      	mov	r4, r0
 800b820:	2301      	movs	r3, #1
 800b822:	e7f0      	b.n	800b806 <_svfiprintf_r+0x192>
 800b824:	ab03      	add	r3, sp, #12
 800b826:	9300      	str	r3, [sp, #0]
 800b828:	462a      	mov	r2, r5
 800b82a:	4b0e      	ldr	r3, [pc, #56]	@ (800b864 <_svfiprintf_r+0x1f0>)
 800b82c:	a904      	add	r1, sp, #16
 800b82e:	4638      	mov	r0, r7
 800b830:	f7fc f984 	bl	8007b3c <_printf_float>
 800b834:	1c42      	adds	r2, r0, #1
 800b836:	4606      	mov	r6, r0
 800b838:	d1d6      	bne.n	800b7e8 <_svfiprintf_r+0x174>
 800b83a:	89ab      	ldrh	r3, [r5, #12]
 800b83c:	065b      	lsls	r3, r3, #25
 800b83e:	f53f af2d 	bmi.w	800b69c <_svfiprintf_r+0x28>
 800b842:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b844:	e72c      	b.n	800b6a0 <_svfiprintf_r+0x2c>
 800b846:	ab03      	add	r3, sp, #12
 800b848:	9300      	str	r3, [sp, #0]
 800b84a:	462a      	mov	r2, r5
 800b84c:	4b05      	ldr	r3, [pc, #20]	@ (800b864 <_svfiprintf_r+0x1f0>)
 800b84e:	a904      	add	r1, sp, #16
 800b850:	4638      	mov	r0, r7
 800b852:	f7fc fc0b 	bl	800806c <_printf_i>
 800b856:	e7ed      	b.n	800b834 <_svfiprintf_r+0x1c0>
 800b858:	0800d300 	.word	0x0800d300
 800b85c:	0800d30a 	.word	0x0800d30a
 800b860:	08007b3d 	.word	0x08007b3d
 800b864:	0800b5bf 	.word	0x0800b5bf
 800b868:	0800d306 	.word	0x0800d306

0800b86c <_sungetc_r>:
 800b86c:	b538      	push	{r3, r4, r5, lr}
 800b86e:	1c4b      	adds	r3, r1, #1
 800b870:	4614      	mov	r4, r2
 800b872:	d103      	bne.n	800b87c <_sungetc_r+0x10>
 800b874:	f04f 35ff 	mov.w	r5, #4294967295
 800b878:	4628      	mov	r0, r5
 800b87a:	bd38      	pop	{r3, r4, r5, pc}
 800b87c:	8993      	ldrh	r3, [r2, #12]
 800b87e:	f023 0320 	bic.w	r3, r3, #32
 800b882:	8193      	strh	r3, [r2, #12]
 800b884:	6853      	ldr	r3, [r2, #4]
 800b886:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800b888:	b2cd      	uxtb	r5, r1
 800b88a:	b18a      	cbz	r2, 800b8b0 <_sungetc_r+0x44>
 800b88c:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800b88e:	429a      	cmp	r2, r3
 800b890:	dd08      	ble.n	800b8a4 <_sungetc_r+0x38>
 800b892:	6823      	ldr	r3, [r4, #0]
 800b894:	1e5a      	subs	r2, r3, #1
 800b896:	6022      	str	r2, [r4, #0]
 800b898:	f803 5c01 	strb.w	r5, [r3, #-1]
 800b89c:	6863      	ldr	r3, [r4, #4]
 800b89e:	3301      	adds	r3, #1
 800b8a0:	6063      	str	r3, [r4, #4]
 800b8a2:	e7e9      	b.n	800b878 <_sungetc_r+0xc>
 800b8a4:	4621      	mov	r1, r4
 800b8a6:	f000 fbe0 	bl	800c06a <__submore>
 800b8aa:	2800      	cmp	r0, #0
 800b8ac:	d0f1      	beq.n	800b892 <_sungetc_r+0x26>
 800b8ae:	e7e1      	b.n	800b874 <_sungetc_r+0x8>
 800b8b0:	6921      	ldr	r1, [r4, #16]
 800b8b2:	6822      	ldr	r2, [r4, #0]
 800b8b4:	b141      	cbz	r1, 800b8c8 <_sungetc_r+0x5c>
 800b8b6:	4291      	cmp	r1, r2
 800b8b8:	d206      	bcs.n	800b8c8 <_sungetc_r+0x5c>
 800b8ba:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 800b8be:	42a9      	cmp	r1, r5
 800b8c0:	d102      	bne.n	800b8c8 <_sungetc_r+0x5c>
 800b8c2:	3a01      	subs	r2, #1
 800b8c4:	6022      	str	r2, [r4, #0]
 800b8c6:	e7ea      	b.n	800b89e <_sungetc_r+0x32>
 800b8c8:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 800b8cc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b8d0:	6363      	str	r3, [r4, #52]	@ 0x34
 800b8d2:	2303      	movs	r3, #3
 800b8d4:	63a3      	str	r3, [r4, #56]	@ 0x38
 800b8d6:	4623      	mov	r3, r4
 800b8d8:	f803 5f46 	strb.w	r5, [r3, #70]!
 800b8dc:	6023      	str	r3, [r4, #0]
 800b8de:	2301      	movs	r3, #1
 800b8e0:	e7de      	b.n	800b8a0 <_sungetc_r+0x34>

0800b8e2 <__ssrefill_r>:
 800b8e2:	b510      	push	{r4, lr}
 800b8e4:	460c      	mov	r4, r1
 800b8e6:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800b8e8:	b169      	cbz	r1, 800b906 <__ssrefill_r+0x24>
 800b8ea:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b8ee:	4299      	cmp	r1, r3
 800b8f0:	d001      	beq.n	800b8f6 <__ssrefill_r+0x14>
 800b8f2:	f7fe fd51 	bl	800a398 <_free_r>
 800b8f6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b8f8:	6063      	str	r3, [r4, #4]
 800b8fa:	2000      	movs	r0, #0
 800b8fc:	6360      	str	r0, [r4, #52]	@ 0x34
 800b8fe:	b113      	cbz	r3, 800b906 <__ssrefill_r+0x24>
 800b900:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800b902:	6023      	str	r3, [r4, #0]
 800b904:	bd10      	pop	{r4, pc}
 800b906:	6923      	ldr	r3, [r4, #16]
 800b908:	6023      	str	r3, [r4, #0]
 800b90a:	2300      	movs	r3, #0
 800b90c:	6063      	str	r3, [r4, #4]
 800b90e:	89a3      	ldrh	r3, [r4, #12]
 800b910:	f043 0320 	orr.w	r3, r3, #32
 800b914:	81a3      	strh	r3, [r4, #12]
 800b916:	f04f 30ff 	mov.w	r0, #4294967295
 800b91a:	e7f3      	b.n	800b904 <__ssrefill_r+0x22>

0800b91c <__ssvfiscanf_r>:
 800b91c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b920:	460c      	mov	r4, r1
 800b922:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 800b926:	2100      	movs	r1, #0
 800b928:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 800b92c:	49a5      	ldr	r1, [pc, #660]	@ (800bbc4 <__ssvfiscanf_r+0x2a8>)
 800b92e:	91a0      	str	r1, [sp, #640]	@ 0x280
 800b930:	f10d 0804 	add.w	r8, sp, #4
 800b934:	49a4      	ldr	r1, [pc, #656]	@ (800bbc8 <__ssvfiscanf_r+0x2ac>)
 800b936:	4fa5      	ldr	r7, [pc, #660]	@ (800bbcc <__ssvfiscanf_r+0x2b0>)
 800b938:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 800b93c:	4606      	mov	r6, r0
 800b93e:	91a1      	str	r1, [sp, #644]	@ 0x284
 800b940:	9300      	str	r3, [sp, #0]
 800b942:	7813      	ldrb	r3, [r2, #0]
 800b944:	2b00      	cmp	r3, #0
 800b946:	f000 8158 	beq.w	800bbfa <__ssvfiscanf_r+0x2de>
 800b94a:	5cf9      	ldrb	r1, [r7, r3]
 800b94c:	f011 0108 	ands.w	r1, r1, #8
 800b950:	f102 0501 	add.w	r5, r2, #1
 800b954:	d019      	beq.n	800b98a <__ssvfiscanf_r+0x6e>
 800b956:	6863      	ldr	r3, [r4, #4]
 800b958:	2b00      	cmp	r3, #0
 800b95a:	dd0f      	ble.n	800b97c <__ssvfiscanf_r+0x60>
 800b95c:	6823      	ldr	r3, [r4, #0]
 800b95e:	781a      	ldrb	r2, [r3, #0]
 800b960:	5cba      	ldrb	r2, [r7, r2]
 800b962:	0712      	lsls	r2, r2, #28
 800b964:	d401      	bmi.n	800b96a <__ssvfiscanf_r+0x4e>
 800b966:	462a      	mov	r2, r5
 800b968:	e7eb      	b.n	800b942 <__ssvfiscanf_r+0x26>
 800b96a:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800b96c:	3201      	adds	r2, #1
 800b96e:	9245      	str	r2, [sp, #276]	@ 0x114
 800b970:	6862      	ldr	r2, [r4, #4]
 800b972:	3301      	adds	r3, #1
 800b974:	3a01      	subs	r2, #1
 800b976:	6062      	str	r2, [r4, #4]
 800b978:	6023      	str	r3, [r4, #0]
 800b97a:	e7ec      	b.n	800b956 <__ssvfiscanf_r+0x3a>
 800b97c:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800b97e:	4621      	mov	r1, r4
 800b980:	4630      	mov	r0, r6
 800b982:	4798      	blx	r3
 800b984:	2800      	cmp	r0, #0
 800b986:	d0e9      	beq.n	800b95c <__ssvfiscanf_r+0x40>
 800b988:	e7ed      	b.n	800b966 <__ssvfiscanf_r+0x4a>
 800b98a:	2b25      	cmp	r3, #37	@ 0x25
 800b98c:	d012      	beq.n	800b9b4 <__ssvfiscanf_r+0x98>
 800b98e:	4699      	mov	r9, r3
 800b990:	6863      	ldr	r3, [r4, #4]
 800b992:	2b00      	cmp	r3, #0
 800b994:	f340 8093 	ble.w	800babe <__ssvfiscanf_r+0x1a2>
 800b998:	6822      	ldr	r2, [r4, #0]
 800b99a:	7813      	ldrb	r3, [r2, #0]
 800b99c:	454b      	cmp	r3, r9
 800b99e:	f040 812c 	bne.w	800bbfa <__ssvfiscanf_r+0x2de>
 800b9a2:	6863      	ldr	r3, [r4, #4]
 800b9a4:	3b01      	subs	r3, #1
 800b9a6:	6063      	str	r3, [r4, #4]
 800b9a8:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 800b9aa:	3201      	adds	r2, #1
 800b9ac:	3301      	adds	r3, #1
 800b9ae:	6022      	str	r2, [r4, #0]
 800b9b0:	9345      	str	r3, [sp, #276]	@ 0x114
 800b9b2:	e7d8      	b.n	800b966 <__ssvfiscanf_r+0x4a>
 800b9b4:	9141      	str	r1, [sp, #260]	@ 0x104
 800b9b6:	9143      	str	r1, [sp, #268]	@ 0x10c
 800b9b8:	7853      	ldrb	r3, [r2, #1]
 800b9ba:	2b2a      	cmp	r3, #42	@ 0x2a
 800b9bc:	bf02      	ittt	eq
 800b9be:	2310      	moveq	r3, #16
 800b9c0:	1c95      	addeq	r5, r2, #2
 800b9c2:	9341      	streq	r3, [sp, #260]	@ 0x104
 800b9c4:	220a      	movs	r2, #10
 800b9c6:	46a9      	mov	r9, r5
 800b9c8:	f819 1b01 	ldrb.w	r1, [r9], #1
 800b9cc:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 800b9d0:	2b09      	cmp	r3, #9
 800b9d2:	d91e      	bls.n	800ba12 <__ssvfiscanf_r+0xf6>
 800b9d4:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 800bbd0 <__ssvfiscanf_r+0x2b4>
 800b9d8:	2203      	movs	r2, #3
 800b9da:	4650      	mov	r0, sl
 800b9dc:	f7f4 fc08 	bl	80001f0 <memchr>
 800b9e0:	b138      	cbz	r0, 800b9f2 <__ssvfiscanf_r+0xd6>
 800b9e2:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800b9e4:	eba0 000a 	sub.w	r0, r0, sl
 800b9e8:	2301      	movs	r3, #1
 800b9ea:	4083      	lsls	r3, r0
 800b9ec:	4313      	orrs	r3, r2
 800b9ee:	9341      	str	r3, [sp, #260]	@ 0x104
 800b9f0:	464d      	mov	r5, r9
 800b9f2:	f815 3b01 	ldrb.w	r3, [r5], #1
 800b9f6:	2b78      	cmp	r3, #120	@ 0x78
 800b9f8:	d806      	bhi.n	800ba08 <__ssvfiscanf_r+0xec>
 800b9fa:	2b57      	cmp	r3, #87	@ 0x57
 800b9fc:	d810      	bhi.n	800ba20 <__ssvfiscanf_r+0x104>
 800b9fe:	2b25      	cmp	r3, #37	@ 0x25
 800ba00:	d0c5      	beq.n	800b98e <__ssvfiscanf_r+0x72>
 800ba02:	d857      	bhi.n	800bab4 <__ssvfiscanf_r+0x198>
 800ba04:	2b00      	cmp	r3, #0
 800ba06:	d065      	beq.n	800bad4 <__ssvfiscanf_r+0x1b8>
 800ba08:	2303      	movs	r3, #3
 800ba0a:	9347      	str	r3, [sp, #284]	@ 0x11c
 800ba0c:	230a      	movs	r3, #10
 800ba0e:	9342      	str	r3, [sp, #264]	@ 0x108
 800ba10:	e078      	b.n	800bb04 <__ssvfiscanf_r+0x1e8>
 800ba12:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 800ba14:	fb02 1103 	mla	r1, r2, r3, r1
 800ba18:	3930      	subs	r1, #48	@ 0x30
 800ba1a:	9143      	str	r1, [sp, #268]	@ 0x10c
 800ba1c:	464d      	mov	r5, r9
 800ba1e:	e7d2      	b.n	800b9c6 <__ssvfiscanf_r+0xaa>
 800ba20:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 800ba24:	2a20      	cmp	r2, #32
 800ba26:	d8ef      	bhi.n	800ba08 <__ssvfiscanf_r+0xec>
 800ba28:	a101      	add	r1, pc, #4	@ (adr r1, 800ba30 <__ssvfiscanf_r+0x114>)
 800ba2a:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800ba2e:	bf00      	nop
 800ba30:	0800bae3 	.word	0x0800bae3
 800ba34:	0800ba09 	.word	0x0800ba09
 800ba38:	0800ba09 	.word	0x0800ba09
 800ba3c:	0800bb3d 	.word	0x0800bb3d
 800ba40:	0800ba09 	.word	0x0800ba09
 800ba44:	0800ba09 	.word	0x0800ba09
 800ba48:	0800ba09 	.word	0x0800ba09
 800ba4c:	0800ba09 	.word	0x0800ba09
 800ba50:	0800ba09 	.word	0x0800ba09
 800ba54:	0800ba09 	.word	0x0800ba09
 800ba58:	0800ba09 	.word	0x0800ba09
 800ba5c:	0800bb53 	.word	0x0800bb53
 800ba60:	0800bb39 	.word	0x0800bb39
 800ba64:	0800babb 	.word	0x0800babb
 800ba68:	0800babb 	.word	0x0800babb
 800ba6c:	0800babb 	.word	0x0800babb
 800ba70:	0800ba09 	.word	0x0800ba09
 800ba74:	0800baf5 	.word	0x0800baf5
 800ba78:	0800ba09 	.word	0x0800ba09
 800ba7c:	0800ba09 	.word	0x0800ba09
 800ba80:	0800ba09 	.word	0x0800ba09
 800ba84:	0800ba09 	.word	0x0800ba09
 800ba88:	0800bb63 	.word	0x0800bb63
 800ba8c:	0800bafd 	.word	0x0800bafd
 800ba90:	0800badb 	.word	0x0800badb
 800ba94:	0800ba09 	.word	0x0800ba09
 800ba98:	0800ba09 	.word	0x0800ba09
 800ba9c:	0800bb5f 	.word	0x0800bb5f
 800baa0:	0800ba09 	.word	0x0800ba09
 800baa4:	0800bb39 	.word	0x0800bb39
 800baa8:	0800ba09 	.word	0x0800ba09
 800baac:	0800ba09 	.word	0x0800ba09
 800bab0:	0800bae3 	.word	0x0800bae3
 800bab4:	3b45      	subs	r3, #69	@ 0x45
 800bab6:	2b02      	cmp	r3, #2
 800bab8:	d8a6      	bhi.n	800ba08 <__ssvfiscanf_r+0xec>
 800baba:	2305      	movs	r3, #5
 800babc:	e021      	b.n	800bb02 <__ssvfiscanf_r+0x1e6>
 800babe:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800bac0:	4621      	mov	r1, r4
 800bac2:	4630      	mov	r0, r6
 800bac4:	4798      	blx	r3
 800bac6:	2800      	cmp	r0, #0
 800bac8:	f43f af66 	beq.w	800b998 <__ssvfiscanf_r+0x7c>
 800bacc:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800bace:	2800      	cmp	r0, #0
 800bad0:	f040 808b 	bne.w	800bbea <__ssvfiscanf_r+0x2ce>
 800bad4:	f04f 30ff 	mov.w	r0, #4294967295
 800bad8:	e08b      	b.n	800bbf2 <__ssvfiscanf_r+0x2d6>
 800bada:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800badc:	f042 0220 	orr.w	r2, r2, #32
 800bae0:	9241      	str	r2, [sp, #260]	@ 0x104
 800bae2:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800bae4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800bae8:	9241      	str	r2, [sp, #260]	@ 0x104
 800baea:	2210      	movs	r2, #16
 800baec:	2b6e      	cmp	r3, #110	@ 0x6e
 800baee:	9242      	str	r2, [sp, #264]	@ 0x108
 800baf0:	d902      	bls.n	800baf8 <__ssvfiscanf_r+0x1dc>
 800baf2:	e005      	b.n	800bb00 <__ssvfiscanf_r+0x1e4>
 800baf4:	2300      	movs	r3, #0
 800baf6:	9342      	str	r3, [sp, #264]	@ 0x108
 800baf8:	2303      	movs	r3, #3
 800bafa:	e002      	b.n	800bb02 <__ssvfiscanf_r+0x1e6>
 800bafc:	2308      	movs	r3, #8
 800bafe:	9342      	str	r3, [sp, #264]	@ 0x108
 800bb00:	2304      	movs	r3, #4
 800bb02:	9347      	str	r3, [sp, #284]	@ 0x11c
 800bb04:	6863      	ldr	r3, [r4, #4]
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	dd39      	ble.n	800bb7e <__ssvfiscanf_r+0x262>
 800bb0a:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800bb0c:	0659      	lsls	r1, r3, #25
 800bb0e:	d404      	bmi.n	800bb1a <__ssvfiscanf_r+0x1fe>
 800bb10:	6823      	ldr	r3, [r4, #0]
 800bb12:	781a      	ldrb	r2, [r3, #0]
 800bb14:	5cba      	ldrb	r2, [r7, r2]
 800bb16:	0712      	lsls	r2, r2, #28
 800bb18:	d438      	bmi.n	800bb8c <__ssvfiscanf_r+0x270>
 800bb1a:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 800bb1c:	2b02      	cmp	r3, #2
 800bb1e:	dc47      	bgt.n	800bbb0 <__ssvfiscanf_r+0x294>
 800bb20:	466b      	mov	r3, sp
 800bb22:	4622      	mov	r2, r4
 800bb24:	a941      	add	r1, sp, #260	@ 0x104
 800bb26:	4630      	mov	r0, r6
 800bb28:	f000 f86c 	bl	800bc04 <_scanf_chars>
 800bb2c:	2801      	cmp	r0, #1
 800bb2e:	d064      	beq.n	800bbfa <__ssvfiscanf_r+0x2de>
 800bb30:	2802      	cmp	r0, #2
 800bb32:	f47f af18 	bne.w	800b966 <__ssvfiscanf_r+0x4a>
 800bb36:	e7c9      	b.n	800bacc <__ssvfiscanf_r+0x1b0>
 800bb38:	220a      	movs	r2, #10
 800bb3a:	e7d7      	b.n	800baec <__ssvfiscanf_r+0x1d0>
 800bb3c:	4629      	mov	r1, r5
 800bb3e:	4640      	mov	r0, r8
 800bb40:	f000 fa5a 	bl	800bff8 <__sccl>
 800bb44:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800bb46:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bb4a:	9341      	str	r3, [sp, #260]	@ 0x104
 800bb4c:	4605      	mov	r5, r0
 800bb4e:	2301      	movs	r3, #1
 800bb50:	e7d7      	b.n	800bb02 <__ssvfiscanf_r+0x1e6>
 800bb52:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800bb54:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bb58:	9341      	str	r3, [sp, #260]	@ 0x104
 800bb5a:	2300      	movs	r3, #0
 800bb5c:	e7d1      	b.n	800bb02 <__ssvfiscanf_r+0x1e6>
 800bb5e:	2302      	movs	r3, #2
 800bb60:	e7cf      	b.n	800bb02 <__ssvfiscanf_r+0x1e6>
 800bb62:	9841      	ldr	r0, [sp, #260]	@ 0x104
 800bb64:	06c3      	lsls	r3, r0, #27
 800bb66:	f53f aefe 	bmi.w	800b966 <__ssvfiscanf_r+0x4a>
 800bb6a:	9b00      	ldr	r3, [sp, #0]
 800bb6c:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800bb6e:	1d19      	adds	r1, r3, #4
 800bb70:	9100      	str	r1, [sp, #0]
 800bb72:	681b      	ldr	r3, [r3, #0]
 800bb74:	07c0      	lsls	r0, r0, #31
 800bb76:	bf4c      	ite	mi
 800bb78:	801a      	strhmi	r2, [r3, #0]
 800bb7a:	601a      	strpl	r2, [r3, #0]
 800bb7c:	e6f3      	b.n	800b966 <__ssvfiscanf_r+0x4a>
 800bb7e:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800bb80:	4621      	mov	r1, r4
 800bb82:	4630      	mov	r0, r6
 800bb84:	4798      	blx	r3
 800bb86:	2800      	cmp	r0, #0
 800bb88:	d0bf      	beq.n	800bb0a <__ssvfiscanf_r+0x1ee>
 800bb8a:	e79f      	b.n	800bacc <__ssvfiscanf_r+0x1b0>
 800bb8c:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800bb8e:	3201      	adds	r2, #1
 800bb90:	9245      	str	r2, [sp, #276]	@ 0x114
 800bb92:	6862      	ldr	r2, [r4, #4]
 800bb94:	3a01      	subs	r2, #1
 800bb96:	2a00      	cmp	r2, #0
 800bb98:	6062      	str	r2, [r4, #4]
 800bb9a:	dd02      	ble.n	800bba2 <__ssvfiscanf_r+0x286>
 800bb9c:	3301      	adds	r3, #1
 800bb9e:	6023      	str	r3, [r4, #0]
 800bba0:	e7b6      	b.n	800bb10 <__ssvfiscanf_r+0x1f4>
 800bba2:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800bba4:	4621      	mov	r1, r4
 800bba6:	4630      	mov	r0, r6
 800bba8:	4798      	blx	r3
 800bbaa:	2800      	cmp	r0, #0
 800bbac:	d0b0      	beq.n	800bb10 <__ssvfiscanf_r+0x1f4>
 800bbae:	e78d      	b.n	800bacc <__ssvfiscanf_r+0x1b0>
 800bbb0:	2b04      	cmp	r3, #4
 800bbb2:	dc0f      	bgt.n	800bbd4 <__ssvfiscanf_r+0x2b8>
 800bbb4:	466b      	mov	r3, sp
 800bbb6:	4622      	mov	r2, r4
 800bbb8:	a941      	add	r1, sp, #260	@ 0x104
 800bbba:	4630      	mov	r0, r6
 800bbbc:	f000 f87c 	bl	800bcb8 <_scanf_i>
 800bbc0:	e7b4      	b.n	800bb2c <__ssvfiscanf_r+0x210>
 800bbc2:	bf00      	nop
 800bbc4:	0800b86d 	.word	0x0800b86d
 800bbc8:	0800b8e3 	.word	0x0800b8e3
 800bbcc:	0800ced1 	.word	0x0800ced1
 800bbd0:	0800d306 	.word	0x0800d306
 800bbd4:	4b0a      	ldr	r3, [pc, #40]	@ (800bc00 <__ssvfiscanf_r+0x2e4>)
 800bbd6:	2b00      	cmp	r3, #0
 800bbd8:	f43f aec5 	beq.w	800b966 <__ssvfiscanf_r+0x4a>
 800bbdc:	466b      	mov	r3, sp
 800bbde:	4622      	mov	r2, r4
 800bbe0:	a941      	add	r1, sp, #260	@ 0x104
 800bbe2:	4630      	mov	r0, r6
 800bbe4:	f7fc fb62 	bl	80082ac <_scanf_float>
 800bbe8:	e7a0      	b.n	800bb2c <__ssvfiscanf_r+0x210>
 800bbea:	89a3      	ldrh	r3, [r4, #12]
 800bbec:	065b      	lsls	r3, r3, #25
 800bbee:	f53f af71 	bmi.w	800bad4 <__ssvfiscanf_r+0x1b8>
 800bbf2:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 800bbf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bbfa:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800bbfc:	e7f9      	b.n	800bbf2 <__ssvfiscanf_r+0x2d6>
 800bbfe:	bf00      	nop
 800bc00:	080082ad 	.word	0x080082ad

0800bc04 <_scanf_chars>:
 800bc04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bc08:	4615      	mov	r5, r2
 800bc0a:	688a      	ldr	r2, [r1, #8]
 800bc0c:	4680      	mov	r8, r0
 800bc0e:	460c      	mov	r4, r1
 800bc10:	b932      	cbnz	r2, 800bc20 <_scanf_chars+0x1c>
 800bc12:	698a      	ldr	r2, [r1, #24]
 800bc14:	2a00      	cmp	r2, #0
 800bc16:	bf14      	ite	ne
 800bc18:	f04f 32ff 	movne.w	r2, #4294967295
 800bc1c:	2201      	moveq	r2, #1
 800bc1e:	608a      	str	r2, [r1, #8]
 800bc20:	6822      	ldr	r2, [r4, #0]
 800bc22:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 800bcb4 <_scanf_chars+0xb0>
 800bc26:	06d1      	lsls	r1, r2, #27
 800bc28:	bf5f      	itttt	pl
 800bc2a:	681a      	ldrpl	r2, [r3, #0]
 800bc2c:	1d11      	addpl	r1, r2, #4
 800bc2e:	6019      	strpl	r1, [r3, #0]
 800bc30:	6816      	ldrpl	r6, [r2, #0]
 800bc32:	2700      	movs	r7, #0
 800bc34:	69a0      	ldr	r0, [r4, #24]
 800bc36:	b188      	cbz	r0, 800bc5c <_scanf_chars+0x58>
 800bc38:	2801      	cmp	r0, #1
 800bc3a:	d107      	bne.n	800bc4c <_scanf_chars+0x48>
 800bc3c:	682b      	ldr	r3, [r5, #0]
 800bc3e:	781a      	ldrb	r2, [r3, #0]
 800bc40:	6963      	ldr	r3, [r4, #20]
 800bc42:	5c9b      	ldrb	r3, [r3, r2]
 800bc44:	b953      	cbnz	r3, 800bc5c <_scanf_chars+0x58>
 800bc46:	2f00      	cmp	r7, #0
 800bc48:	d031      	beq.n	800bcae <_scanf_chars+0xaa>
 800bc4a:	e022      	b.n	800bc92 <_scanf_chars+0x8e>
 800bc4c:	2802      	cmp	r0, #2
 800bc4e:	d120      	bne.n	800bc92 <_scanf_chars+0x8e>
 800bc50:	682b      	ldr	r3, [r5, #0]
 800bc52:	781b      	ldrb	r3, [r3, #0]
 800bc54:	f819 3003 	ldrb.w	r3, [r9, r3]
 800bc58:	071b      	lsls	r3, r3, #28
 800bc5a:	d41a      	bmi.n	800bc92 <_scanf_chars+0x8e>
 800bc5c:	6823      	ldr	r3, [r4, #0]
 800bc5e:	06da      	lsls	r2, r3, #27
 800bc60:	bf5e      	ittt	pl
 800bc62:	682b      	ldrpl	r3, [r5, #0]
 800bc64:	781b      	ldrbpl	r3, [r3, #0]
 800bc66:	f806 3b01 	strbpl.w	r3, [r6], #1
 800bc6a:	682a      	ldr	r2, [r5, #0]
 800bc6c:	686b      	ldr	r3, [r5, #4]
 800bc6e:	3201      	adds	r2, #1
 800bc70:	602a      	str	r2, [r5, #0]
 800bc72:	68a2      	ldr	r2, [r4, #8]
 800bc74:	3b01      	subs	r3, #1
 800bc76:	3a01      	subs	r2, #1
 800bc78:	606b      	str	r3, [r5, #4]
 800bc7a:	3701      	adds	r7, #1
 800bc7c:	60a2      	str	r2, [r4, #8]
 800bc7e:	b142      	cbz	r2, 800bc92 <_scanf_chars+0x8e>
 800bc80:	2b00      	cmp	r3, #0
 800bc82:	dcd7      	bgt.n	800bc34 <_scanf_chars+0x30>
 800bc84:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800bc88:	4629      	mov	r1, r5
 800bc8a:	4640      	mov	r0, r8
 800bc8c:	4798      	blx	r3
 800bc8e:	2800      	cmp	r0, #0
 800bc90:	d0d0      	beq.n	800bc34 <_scanf_chars+0x30>
 800bc92:	6823      	ldr	r3, [r4, #0]
 800bc94:	f013 0310 	ands.w	r3, r3, #16
 800bc98:	d105      	bne.n	800bca6 <_scanf_chars+0xa2>
 800bc9a:	68e2      	ldr	r2, [r4, #12]
 800bc9c:	3201      	adds	r2, #1
 800bc9e:	60e2      	str	r2, [r4, #12]
 800bca0:	69a2      	ldr	r2, [r4, #24]
 800bca2:	b102      	cbz	r2, 800bca6 <_scanf_chars+0xa2>
 800bca4:	7033      	strb	r3, [r6, #0]
 800bca6:	6923      	ldr	r3, [r4, #16]
 800bca8:	443b      	add	r3, r7
 800bcaa:	6123      	str	r3, [r4, #16]
 800bcac:	2000      	movs	r0, #0
 800bcae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bcb2:	bf00      	nop
 800bcb4:	0800ced1 	.word	0x0800ced1

0800bcb8 <_scanf_i>:
 800bcb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bcbc:	4698      	mov	r8, r3
 800bcbe:	4b74      	ldr	r3, [pc, #464]	@ (800be90 <_scanf_i+0x1d8>)
 800bcc0:	460c      	mov	r4, r1
 800bcc2:	4682      	mov	sl, r0
 800bcc4:	4616      	mov	r6, r2
 800bcc6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800bcca:	b087      	sub	sp, #28
 800bccc:	ab03      	add	r3, sp, #12
 800bcce:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800bcd2:	4b70      	ldr	r3, [pc, #448]	@ (800be94 <_scanf_i+0x1dc>)
 800bcd4:	69a1      	ldr	r1, [r4, #24]
 800bcd6:	4a70      	ldr	r2, [pc, #448]	@ (800be98 <_scanf_i+0x1e0>)
 800bcd8:	2903      	cmp	r1, #3
 800bcda:	bf08      	it	eq
 800bcdc:	461a      	moveq	r2, r3
 800bcde:	68a3      	ldr	r3, [r4, #8]
 800bce0:	9201      	str	r2, [sp, #4]
 800bce2:	1e5a      	subs	r2, r3, #1
 800bce4:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800bce8:	bf88      	it	hi
 800bcea:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800bcee:	4627      	mov	r7, r4
 800bcf0:	bf82      	ittt	hi
 800bcf2:	eb03 0905 	addhi.w	r9, r3, r5
 800bcf6:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800bcfa:	60a3      	strhi	r3, [r4, #8]
 800bcfc:	f857 3b1c 	ldr.w	r3, [r7], #28
 800bd00:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 800bd04:	bf98      	it	ls
 800bd06:	f04f 0900 	movls.w	r9, #0
 800bd0a:	6023      	str	r3, [r4, #0]
 800bd0c:	463d      	mov	r5, r7
 800bd0e:	f04f 0b00 	mov.w	fp, #0
 800bd12:	6831      	ldr	r1, [r6, #0]
 800bd14:	ab03      	add	r3, sp, #12
 800bd16:	7809      	ldrb	r1, [r1, #0]
 800bd18:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800bd1c:	2202      	movs	r2, #2
 800bd1e:	f7f4 fa67 	bl	80001f0 <memchr>
 800bd22:	b328      	cbz	r0, 800bd70 <_scanf_i+0xb8>
 800bd24:	f1bb 0f01 	cmp.w	fp, #1
 800bd28:	d159      	bne.n	800bdde <_scanf_i+0x126>
 800bd2a:	6862      	ldr	r2, [r4, #4]
 800bd2c:	b92a      	cbnz	r2, 800bd3a <_scanf_i+0x82>
 800bd2e:	6822      	ldr	r2, [r4, #0]
 800bd30:	2108      	movs	r1, #8
 800bd32:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800bd36:	6061      	str	r1, [r4, #4]
 800bd38:	6022      	str	r2, [r4, #0]
 800bd3a:	6822      	ldr	r2, [r4, #0]
 800bd3c:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 800bd40:	6022      	str	r2, [r4, #0]
 800bd42:	68a2      	ldr	r2, [r4, #8]
 800bd44:	1e51      	subs	r1, r2, #1
 800bd46:	60a1      	str	r1, [r4, #8]
 800bd48:	b192      	cbz	r2, 800bd70 <_scanf_i+0xb8>
 800bd4a:	6832      	ldr	r2, [r6, #0]
 800bd4c:	1c51      	adds	r1, r2, #1
 800bd4e:	6031      	str	r1, [r6, #0]
 800bd50:	7812      	ldrb	r2, [r2, #0]
 800bd52:	f805 2b01 	strb.w	r2, [r5], #1
 800bd56:	6872      	ldr	r2, [r6, #4]
 800bd58:	3a01      	subs	r2, #1
 800bd5a:	2a00      	cmp	r2, #0
 800bd5c:	6072      	str	r2, [r6, #4]
 800bd5e:	dc07      	bgt.n	800bd70 <_scanf_i+0xb8>
 800bd60:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 800bd64:	4631      	mov	r1, r6
 800bd66:	4650      	mov	r0, sl
 800bd68:	4790      	blx	r2
 800bd6a:	2800      	cmp	r0, #0
 800bd6c:	f040 8085 	bne.w	800be7a <_scanf_i+0x1c2>
 800bd70:	f10b 0b01 	add.w	fp, fp, #1
 800bd74:	f1bb 0f03 	cmp.w	fp, #3
 800bd78:	d1cb      	bne.n	800bd12 <_scanf_i+0x5a>
 800bd7a:	6863      	ldr	r3, [r4, #4]
 800bd7c:	b90b      	cbnz	r3, 800bd82 <_scanf_i+0xca>
 800bd7e:	230a      	movs	r3, #10
 800bd80:	6063      	str	r3, [r4, #4]
 800bd82:	6863      	ldr	r3, [r4, #4]
 800bd84:	4945      	ldr	r1, [pc, #276]	@ (800be9c <_scanf_i+0x1e4>)
 800bd86:	6960      	ldr	r0, [r4, #20]
 800bd88:	1ac9      	subs	r1, r1, r3
 800bd8a:	f000 f935 	bl	800bff8 <__sccl>
 800bd8e:	f04f 0b00 	mov.w	fp, #0
 800bd92:	68a3      	ldr	r3, [r4, #8]
 800bd94:	6822      	ldr	r2, [r4, #0]
 800bd96:	2b00      	cmp	r3, #0
 800bd98:	d03d      	beq.n	800be16 <_scanf_i+0x15e>
 800bd9a:	6831      	ldr	r1, [r6, #0]
 800bd9c:	6960      	ldr	r0, [r4, #20]
 800bd9e:	f891 c000 	ldrb.w	ip, [r1]
 800bda2:	f810 000c 	ldrb.w	r0, [r0, ip]
 800bda6:	2800      	cmp	r0, #0
 800bda8:	d035      	beq.n	800be16 <_scanf_i+0x15e>
 800bdaa:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 800bdae:	d124      	bne.n	800bdfa <_scanf_i+0x142>
 800bdb0:	0510      	lsls	r0, r2, #20
 800bdb2:	d522      	bpl.n	800bdfa <_scanf_i+0x142>
 800bdb4:	f10b 0b01 	add.w	fp, fp, #1
 800bdb8:	f1b9 0f00 	cmp.w	r9, #0
 800bdbc:	d003      	beq.n	800bdc6 <_scanf_i+0x10e>
 800bdbe:	3301      	adds	r3, #1
 800bdc0:	f109 39ff 	add.w	r9, r9, #4294967295
 800bdc4:	60a3      	str	r3, [r4, #8]
 800bdc6:	6873      	ldr	r3, [r6, #4]
 800bdc8:	3b01      	subs	r3, #1
 800bdca:	2b00      	cmp	r3, #0
 800bdcc:	6073      	str	r3, [r6, #4]
 800bdce:	dd1b      	ble.n	800be08 <_scanf_i+0x150>
 800bdd0:	6833      	ldr	r3, [r6, #0]
 800bdd2:	3301      	adds	r3, #1
 800bdd4:	6033      	str	r3, [r6, #0]
 800bdd6:	68a3      	ldr	r3, [r4, #8]
 800bdd8:	3b01      	subs	r3, #1
 800bdda:	60a3      	str	r3, [r4, #8]
 800bddc:	e7d9      	b.n	800bd92 <_scanf_i+0xda>
 800bdde:	f1bb 0f02 	cmp.w	fp, #2
 800bde2:	d1ae      	bne.n	800bd42 <_scanf_i+0x8a>
 800bde4:	6822      	ldr	r2, [r4, #0]
 800bde6:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 800bdea:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 800bdee:	d1bf      	bne.n	800bd70 <_scanf_i+0xb8>
 800bdf0:	2110      	movs	r1, #16
 800bdf2:	6061      	str	r1, [r4, #4]
 800bdf4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800bdf8:	e7a2      	b.n	800bd40 <_scanf_i+0x88>
 800bdfa:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 800bdfe:	6022      	str	r2, [r4, #0]
 800be00:	780b      	ldrb	r3, [r1, #0]
 800be02:	f805 3b01 	strb.w	r3, [r5], #1
 800be06:	e7de      	b.n	800bdc6 <_scanf_i+0x10e>
 800be08:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800be0c:	4631      	mov	r1, r6
 800be0e:	4650      	mov	r0, sl
 800be10:	4798      	blx	r3
 800be12:	2800      	cmp	r0, #0
 800be14:	d0df      	beq.n	800bdd6 <_scanf_i+0x11e>
 800be16:	6823      	ldr	r3, [r4, #0]
 800be18:	05d9      	lsls	r1, r3, #23
 800be1a:	d50d      	bpl.n	800be38 <_scanf_i+0x180>
 800be1c:	42bd      	cmp	r5, r7
 800be1e:	d909      	bls.n	800be34 <_scanf_i+0x17c>
 800be20:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800be24:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800be28:	4632      	mov	r2, r6
 800be2a:	4650      	mov	r0, sl
 800be2c:	4798      	blx	r3
 800be2e:	f105 39ff 	add.w	r9, r5, #4294967295
 800be32:	464d      	mov	r5, r9
 800be34:	42bd      	cmp	r5, r7
 800be36:	d028      	beq.n	800be8a <_scanf_i+0x1d2>
 800be38:	6822      	ldr	r2, [r4, #0]
 800be3a:	f012 0210 	ands.w	r2, r2, #16
 800be3e:	d113      	bne.n	800be68 <_scanf_i+0x1b0>
 800be40:	702a      	strb	r2, [r5, #0]
 800be42:	6863      	ldr	r3, [r4, #4]
 800be44:	9e01      	ldr	r6, [sp, #4]
 800be46:	4639      	mov	r1, r7
 800be48:	4650      	mov	r0, sl
 800be4a:	47b0      	blx	r6
 800be4c:	f8d8 3000 	ldr.w	r3, [r8]
 800be50:	6821      	ldr	r1, [r4, #0]
 800be52:	1d1a      	adds	r2, r3, #4
 800be54:	f8c8 2000 	str.w	r2, [r8]
 800be58:	f011 0f20 	tst.w	r1, #32
 800be5c:	681b      	ldr	r3, [r3, #0]
 800be5e:	d00f      	beq.n	800be80 <_scanf_i+0x1c8>
 800be60:	6018      	str	r0, [r3, #0]
 800be62:	68e3      	ldr	r3, [r4, #12]
 800be64:	3301      	adds	r3, #1
 800be66:	60e3      	str	r3, [r4, #12]
 800be68:	6923      	ldr	r3, [r4, #16]
 800be6a:	1bed      	subs	r5, r5, r7
 800be6c:	445d      	add	r5, fp
 800be6e:	442b      	add	r3, r5
 800be70:	6123      	str	r3, [r4, #16]
 800be72:	2000      	movs	r0, #0
 800be74:	b007      	add	sp, #28
 800be76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be7a:	f04f 0b00 	mov.w	fp, #0
 800be7e:	e7ca      	b.n	800be16 <_scanf_i+0x15e>
 800be80:	07ca      	lsls	r2, r1, #31
 800be82:	bf4c      	ite	mi
 800be84:	8018      	strhmi	r0, [r3, #0]
 800be86:	6018      	strpl	r0, [r3, #0]
 800be88:	e7eb      	b.n	800be62 <_scanf_i+0x1aa>
 800be8a:	2001      	movs	r0, #1
 800be8c:	e7f2      	b.n	800be74 <_scanf_i+0x1bc>
 800be8e:	bf00      	nop
 800be90:	0800c7dc 	.word	0x0800c7dc
 800be94:	080079f9 	.word	0x080079f9
 800be98:	0800b58d 	.word	0x0800b58d
 800be9c:	0800d321 	.word	0x0800d321

0800bea0 <__sflush_r>:
 800bea0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800bea4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bea8:	0716      	lsls	r6, r2, #28
 800beaa:	4605      	mov	r5, r0
 800beac:	460c      	mov	r4, r1
 800beae:	d454      	bmi.n	800bf5a <__sflush_r+0xba>
 800beb0:	684b      	ldr	r3, [r1, #4]
 800beb2:	2b00      	cmp	r3, #0
 800beb4:	dc02      	bgt.n	800bebc <__sflush_r+0x1c>
 800beb6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800beb8:	2b00      	cmp	r3, #0
 800beba:	dd48      	ble.n	800bf4e <__sflush_r+0xae>
 800bebc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800bebe:	2e00      	cmp	r6, #0
 800bec0:	d045      	beq.n	800bf4e <__sflush_r+0xae>
 800bec2:	2300      	movs	r3, #0
 800bec4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800bec8:	682f      	ldr	r7, [r5, #0]
 800beca:	6a21      	ldr	r1, [r4, #32]
 800becc:	602b      	str	r3, [r5, #0]
 800bece:	d030      	beq.n	800bf32 <__sflush_r+0x92>
 800bed0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800bed2:	89a3      	ldrh	r3, [r4, #12]
 800bed4:	0759      	lsls	r1, r3, #29
 800bed6:	d505      	bpl.n	800bee4 <__sflush_r+0x44>
 800bed8:	6863      	ldr	r3, [r4, #4]
 800beda:	1ad2      	subs	r2, r2, r3
 800bedc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800bede:	b10b      	cbz	r3, 800bee4 <__sflush_r+0x44>
 800bee0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800bee2:	1ad2      	subs	r2, r2, r3
 800bee4:	2300      	movs	r3, #0
 800bee6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800bee8:	6a21      	ldr	r1, [r4, #32]
 800beea:	4628      	mov	r0, r5
 800beec:	47b0      	blx	r6
 800beee:	1c43      	adds	r3, r0, #1
 800bef0:	89a3      	ldrh	r3, [r4, #12]
 800bef2:	d106      	bne.n	800bf02 <__sflush_r+0x62>
 800bef4:	6829      	ldr	r1, [r5, #0]
 800bef6:	291d      	cmp	r1, #29
 800bef8:	d82b      	bhi.n	800bf52 <__sflush_r+0xb2>
 800befa:	4a2a      	ldr	r2, [pc, #168]	@ (800bfa4 <__sflush_r+0x104>)
 800befc:	410a      	asrs	r2, r1
 800befe:	07d6      	lsls	r6, r2, #31
 800bf00:	d427      	bmi.n	800bf52 <__sflush_r+0xb2>
 800bf02:	2200      	movs	r2, #0
 800bf04:	6062      	str	r2, [r4, #4]
 800bf06:	04d9      	lsls	r1, r3, #19
 800bf08:	6922      	ldr	r2, [r4, #16]
 800bf0a:	6022      	str	r2, [r4, #0]
 800bf0c:	d504      	bpl.n	800bf18 <__sflush_r+0x78>
 800bf0e:	1c42      	adds	r2, r0, #1
 800bf10:	d101      	bne.n	800bf16 <__sflush_r+0x76>
 800bf12:	682b      	ldr	r3, [r5, #0]
 800bf14:	b903      	cbnz	r3, 800bf18 <__sflush_r+0x78>
 800bf16:	6560      	str	r0, [r4, #84]	@ 0x54
 800bf18:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bf1a:	602f      	str	r7, [r5, #0]
 800bf1c:	b1b9      	cbz	r1, 800bf4e <__sflush_r+0xae>
 800bf1e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800bf22:	4299      	cmp	r1, r3
 800bf24:	d002      	beq.n	800bf2c <__sflush_r+0x8c>
 800bf26:	4628      	mov	r0, r5
 800bf28:	f7fe fa36 	bl	800a398 <_free_r>
 800bf2c:	2300      	movs	r3, #0
 800bf2e:	6363      	str	r3, [r4, #52]	@ 0x34
 800bf30:	e00d      	b.n	800bf4e <__sflush_r+0xae>
 800bf32:	2301      	movs	r3, #1
 800bf34:	4628      	mov	r0, r5
 800bf36:	47b0      	blx	r6
 800bf38:	4602      	mov	r2, r0
 800bf3a:	1c50      	adds	r0, r2, #1
 800bf3c:	d1c9      	bne.n	800bed2 <__sflush_r+0x32>
 800bf3e:	682b      	ldr	r3, [r5, #0]
 800bf40:	2b00      	cmp	r3, #0
 800bf42:	d0c6      	beq.n	800bed2 <__sflush_r+0x32>
 800bf44:	2b1d      	cmp	r3, #29
 800bf46:	d001      	beq.n	800bf4c <__sflush_r+0xac>
 800bf48:	2b16      	cmp	r3, #22
 800bf4a:	d11e      	bne.n	800bf8a <__sflush_r+0xea>
 800bf4c:	602f      	str	r7, [r5, #0]
 800bf4e:	2000      	movs	r0, #0
 800bf50:	e022      	b.n	800bf98 <__sflush_r+0xf8>
 800bf52:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bf56:	b21b      	sxth	r3, r3
 800bf58:	e01b      	b.n	800bf92 <__sflush_r+0xf2>
 800bf5a:	690f      	ldr	r7, [r1, #16]
 800bf5c:	2f00      	cmp	r7, #0
 800bf5e:	d0f6      	beq.n	800bf4e <__sflush_r+0xae>
 800bf60:	0793      	lsls	r3, r2, #30
 800bf62:	680e      	ldr	r6, [r1, #0]
 800bf64:	bf08      	it	eq
 800bf66:	694b      	ldreq	r3, [r1, #20]
 800bf68:	600f      	str	r7, [r1, #0]
 800bf6a:	bf18      	it	ne
 800bf6c:	2300      	movne	r3, #0
 800bf6e:	eba6 0807 	sub.w	r8, r6, r7
 800bf72:	608b      	str	r3, [r1, #8]
 800bf74:	f1b8 0f00 	cmp.w	r8, #0
 800bf78:	dde9      	ble.n	800bf4e <__sflush_r+0xae>
 800bf7a:	6a21      	ldr	r1, [r4, #32]
 800bf7c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800bf7e:	4643      	mov	r3, r8
 800bf80:	463a      	mov	r2, r7
 800bf82:	4628      	mov	r0, r5
 800bf84:	47b0      	blx	r6
 800bf86:	2800      	cmp	r0, #0
 800bf88:	dc08      	bgt.n	800bf9c <__sflush_r+0xfc>
 800bf8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bf8e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bf92:	81a3      	strh	r3, [r4, #12]
 800bf94:	f04f 30ff 	mov.w	r0, #4294967295
 800bf98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bf9c:	4407      	add	r7, r0
 800bf9e:	eba8 0800 	sub.w	r8, r8, r0
 800bfa2:	e7e7      	b.n	800bf74 <__sflush_r+0xd4>
 800bfa4:	dfbffffe 	.word	0xdfbffffe

0800bfa8 <_fflush_r>:
 800bfa8:	b538      	push	{r3, r4, r5, lr}
 800bfaa:	690b      	ldr	r3, [r1, #16]
 800bfac:	4605      	mov	r5, r0
 800bfae:	460c      	mov	r4, r1
 800bfb0:	b913      	cbnz	r3, 800bfb8 <_fflush_r+0x10>
 800bfb2:	2500      	movs	r5, #0
 800bfb4:	4628      	mov	r0, r5
 800bfb6:	bd38      	pop	{r3, r4, r5, pc}
 800bfb8:	b118      	cbz	r0, 800bfc2 <_fflush_r+0x1a>
 800bfba:	6a03      	ldr	r3, [r0, #32]
 800bfbc:	b90b      	cbnz	r3, 800bfc2 <_fflush_r+0x1a>
 800bfbe:	f7fc fc15 	bl	80087ec <__sinit>
 800bfc2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bfc6:	2b00      	cmp	r3, #0
 800bfc8:	d0f3      	beq.n	800bfb2 <_fflush_r+0xa>
 800bfca:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800bfcc:	07d0      	lsls	r0, r2, #31
 800bfce:	d404      	bmi.n	800bfda <_fflush_r+0x32>
 800bfd0:	0599      	lsls	r1, r3, #22
 800bfd2:	d402      	bmi.n	800bfda <_fflush_r+0x32>
 800bfd4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bfd6:	f7fd fb61 	bl	800969c <__retarget_lock_acquire_recursive>
 800bfda:	4628      	mov	r0, r5
 800bfdc:	4621      	mov	r1, r4
 800bfde:	f7ff ff5f 	bl	800bea0 <__sflush_r>
 800bfe2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800bfe4:	07da      	lsls	r2, r3, #31
 800bfe6:	4605      	mov	r5, r0
 800bfe8:	d4e4      	bmi.n	800bfb4 <_fflush_r+0xc>
 800bfea:	89a3      	ldrh	r3, [r4, #12]
 800bfec:	059b      	lsls	r3, r3, #22
 800bfee:	d4e1      	bmi.n	800bfb4 <_fflush_r+0xc>
 800bff0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bff2:	f7fd fb55 	bl	80096a0 <__retarget_lock_release_recursive>
 800bff6:	e7dd      	b.n	800bfb4 <_fflush_r+0xc>

0800bff8 <__sccl>:
 800bff8:	b570      	push	{r4, r5, r6, lr}
 800bffa:	780b      	ldrb	r3, [r1, #0]
 800bffc:	4604      	mov	r4, r0
 800bffe:	2b5e      	cmp	r3, #94	@ 0x5e
 800c000:	bf0b      	itete	eq
 800c002:	784b      	ldrbeq	r3, [r1, #1]
 800c004:	1c4a      	addne	r2, r1, #1
 800c006:	1c8a      	addeq	r2, r1, #2
 800c008:	2100      	movne	r1, #0
 800c00a:	bf08      	it	eq
 800c00c:	2101      	moveq	r1, #1
 800c00e:	3801      	subs	r0, #1
 800c010:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 800c014:	f800 1f01 	strb.w	r1, [r0, #1]!
 800c018:	42a8      	cmp	r0, r5
 800c01a:	d1fb      	bne.n	800c014 <__sccl+0x1c>
 800c01c:	b90b      	cbnz	r3, 800c022 <__sccl+0x2a>
 800c01e:	1e50      	subs	r0, r2, #1
 800c020:	bd70      	pop	{r4, r5, r6, pc}
 800c022:	f081 0101 	eor.w	r1, r1, #1
 800c026:	54e1      	strb	r1, [r4, r3]
 800c028:	4610      	mov	r0, r2
 800c02a:	4602      	mov	r2, r0
 800c02c:	f812 5b01 	ldrb.w	r5, [r2], #1
 800c030:	2d2d      	cmp	r5, #45	@ 0x2d
 800c032:	d005      	beq.n	800c040 <__sccl+0x48>
 800c034:	2d5d      	cmp	r5, #93	@ 0x5d
 800c036:	d016      	beq.n	800c066 <__sccl+0x6e>
 800c038:	2d00      	cmp	r5, #0
 800c03a:	d0f1      	beq.n	800c020 <__sccl+0x28>
 800c03c:	462b      	mov	r3, r5
 800c03e:	e7f2      	b.n	800c026 <__sccl+0x2e>
 800c040:	7846      	ldrb	r6, [r0, #1]
 800c042:	2e5d      	cmp	r6, #93	@ 0x5d
 800c044:	d0fa      	beq.n	800c03c <__sccl+0x44>
 800c046:	42b3      	cmp	r3, r6
 800c048:	dcf8      	bgt.n	800c03c <__sccl+0x44>
 800c04a:	3002      	adds	r0, #2
 800c04c:	461a      	mov	r2, r3
 800c04e:	3201      	adds	r2, #1
 800c050:	4296      	cmp	r6, r2
 800c052:	54a1      	strb	r1, [r4, r2]
 800c054:	dcfb      	bgt.n	800c04e <__sccl+0x56>
 800c056:	1af2      	subs	r2, r6, r3
 800c058:	3a01      	subs	r2, #1
 800c05a:	1c5d      	adds	r5, r3, #1
 800c05c:	42b3      	cmp	r3, r6
 800c05e:	bfa8      	it	ge
 800c060:	2200      	movge	r2, #0
 800c062:	18ab      	adds	r3, r5, r2
 800c064:	e7e1      	b.n	800c02a <__sccl+0x32>
 800c066:	4610      	mov	r0, r2
 800c068:	e7da      	b.n	800c020 <__sccl+0x28>

0800c06a <__submore>:
 800c06a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c06e:	460c      	mov	r4, r1
 800c070:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800c072:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c076:	4299      	cmp	r1, r3
 800c078:	d11d      	bne.n	800c0b6 <__submore+0x4c>
 800c07a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800c07e:	f7fa fdab 	bl	8006bd8 <_malloc_r>
 800c082:	b918      	cbnz	r0, 800c08c <__submore+0x22>
 800c084:	f04f 30ff 	mov.w	r0, #4294967295
 800c088:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c08c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c090:	63a3      	str	r3, [r4, #56]	@ 0x38
 800c092:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 800c096:	6360      	str	r0, [r4, #52]	@ 0x34
 800c098:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 800c09c:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800c0a0:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 800c0a4:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800c0a8:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 800c0ac:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 800c0b0:	6020      	str	r0, [r4, #0]
 800c0b2:	2000      	movs	r0, #0
 800c0b4:	e7e8      	b.n	800c088 <__submore+0x1e>
 800c0b6:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 800c0b8:	0077      	lsls	r7, r6, #1
 800c0ba:	463a      	mov	r2, r7
 800c0bc:	f000 f86c 	bl	800c198 <_realloc_r>
 800c0c0:	4605      	mov	r5, r0
 800c0c2:	2800      	cmp	r0, #0
 800c0c4:	d0de      	beq.n	800c084 <__submore+0x1a>
 800c0c6:	eb00 0806 	add.w	r8, r0, r6
 800c0ca:	4601      	mov	r1, r0
 800c0cc:	4632      	mov	r2, r6
 800c0ce:	4640      	mov	r0, r8
 800c0d0:	f7fd faef 	bl	80096b2 <memcpy>
 800c0d4:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 800c0d8:	f8c4 8000 	str.w	r8, [r4]
 800c0dc:	e7e9      	b.n	800c0b2 <__submore+0x48>

0800c0de <memmove>:
 800c0de:	4288      	cmp	r0, r1
 800c0e0:	b510      	push	{r4, lr}
 800c0e2:	eb01 0402 	add.w	r4, r1, r2
 800c0e6:	d902      	bls.n	800c0ee <memmove+0x10>
 800c0e8:	4284      	cmp	r4, r0
 800c0ea:	4623      	mov	r3, r4
 800c0ec:	d807      	bhi.n	800c0fe <memmove+0x20>
 800c0ee:	1e43      	subs	r3, r0, #1
 800c0f0:	42a1      	cmp	r1, r4
 800c0f2:	d008      	beq.n	800c106 <memmove+0x28>
 800c0f4:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c0f8:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c0fc:	e7f8      	b.n	800c0f0 <memmove+0x12>
 800c0fe:	4402      	add	r2, r0
 800c100:	4601      	mov	r1, r0
 800c102:	428a      	cmp	r2, r1
 800c104:	d100      	bne.n	800c108 <memmove+0x2a>
 800c106:	bd10      	pop	{r4, pc}
 800c108:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c10c:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c110:	e7f7      	b.n	800c102 <memmove+0x24>
	...

0800c114 <__gettzinfo>:
 800c114:	4800      	ldr	r0, [pc, #0]	@ (800c118 <__gettzinfo+0x4>)
 800c116:	4770      	bx	lr
 800c118:	200001f0 	.word	0x200001f0

0800c11c <__assert_func>:
 800c11c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c11e:	4614      	mov	r4, r2
 800c120:	461a      	mov	r2, r3
 800c122:	4b09      	ldr	r3, [pc, #36]	@ (800c148 <__assert_func+0x2c>)
 800c124:	681b      	ldr	r3, [r3, #0]
 800c126:	4605      	mov	r5, r0
 800c128:	68d8      	ldr	r0, [r3, #12]
 800c12a:	b954      	cbnz	r4, 800c142 <__assert_func+0x26>
 800c12c:	4b07      	ldr	r3, [pc, #28]	@ (800c14c <__assert_func+0x30>)
 800c12e:	461c      	mov	r4, r3
 800c130:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c134:	9100      	str	r1, [sp, #0]
 800c136:	462b      	mov	r3, r5
 800c138:	4905      	ldr	r1, [pc, #20]	@ (800c150 <__assert_func+0x34>)
 800c13a:	f000 f85b 	bl	800c1f4 <fiprintf>
 800c13e:	f000 f86b 	bl	800c218 <abort>
 800c142:	4b04      	ldr	r3, [pc, #16]	@ (800c154 <__assert_func+0x38>)
 800c144:	e7f4      	b.n	800c130 <__assert_func+0x14>
 800c146:	bf00      	nop
 800c148:	2000019c 	.word	0x2000019c
 800c14c:	0800ce24 	.word	0x0800ce24
 800c150:	0800d399 	.word	0x0800d399
 800c154:	0800d38c 	.word	0x0800d38c

0800c158 <_calloc_r>:
 800c158:	b570      	push	{r4, r5, r6, lr}
 800c15a:	fba1 5402 	umull	r5, r4, r1, r2
 800c15e:	b93c      	cbnz	r4, 800c170 <_calloc_r+0x18>
 800c160:	4629      	mov	r1, r5
 800c162:	f7fa fd39 	bl	8006bd8 <_malloc_r>
 800c166:	4606      	mov	r6, r0
 800c168:	b928      	cbnz	r0, 800c176 <_calloc_r+0x1e>
 800c16a:	2600      	movs	r6, #0
 800c16c:	4630      	mov	r0, r6
 800c16e:	bd70      	pop	{r4, r5, r6, pc}
 800c170:	220c      	movs	r2, #12
 800c172:	6002      	str	r2, [r0, #0]
 800c174:	e7f9      	b.n	800c16a <_calloc_r+0x12>
 800c176:	462a      	mov	r2, r5
 800c178:	4621      	mov	r1, r4
 800c17a:	f7fc fc69 	bl	8008a50 <memset>
 800c17e:	e7f5      	b.n	800c16c <_calloc_r+0x14>

0800c180 <__env_lock>:
 800c180:	4801      	ldr	r0, [pc, #4]	@ (800c188 <__env_lock+0x8>)
 800c182:	f7fd ba8b 	b.w	800969c <__retarget_lock_acquire_recursive>
 800c186:	bf00      	nop
 800c188:	20006dc1 	.word	0x20006dc1

0800c18c <__env_unlock>:
 800c18c:	4801      	ldr	r0, [pc, #4]	@ (800c194 <__env_unlock+0x8>)
 800c18e:	f7fd ba87 	b.w	80096a0 <__retarget_lock_release_recursive>
 800c192:	bf00      	nop
 800c194:	20006dc1 	.word	0x20006dc1

0800c198 <_realloc_r>:
 800c198:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c19c:	4680      	mov	r8, r0
 800c19e:	4615      	mov	r5, r2
 800c1a0:	460c      	mov	r4, r1
 800c1a2:	b921      	cbnz	r1, 800c1ae <_realloc_r+0x16>
 800c1a4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c1a8:	4611      	mov	r1, r2
 800c1aa:	f7fa bd15 	b.w	8006bd8 <_malloc_r>
 800c1ae:	b92a      	cbnz	r2, 800c1bc <_realloc_r+0x24>
 800c1b0:	f7fe f8f2 	bl	800a398 <_free_r>
 800c1b4:	2400      	movs	r4, #0
 800c1b6:	4620      	mov	r0, r4
 800c1b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c1bc:	f000 f833 	bl	800c226 <_malloc_usable_size_r>
 800c1c0:	4285      	cmp	r5, r0
 800c1c2:	4606      	mov	r6, r0
 800c1c4:	d802      	bhi.n	800c1cc <_realloc_r+0x34>
 800c1c6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800c1ca:	d8f4      	bhi.n	800c1b6 <_realloc_r+0x1e>
 800c1cc:	4629      	mov	r1, r5
 800c1ce:	4640      	mov	r0, r8
 800c1d0:	f7fa fd02 	bl	8006bd8 <_malloc_r>
 800c1d4:	4607      	mov	r7, r0
 800c1d6:	2800      	cmp	r0, #0
 800c1d8:	d0ec      	beq.n	800c1b4 <_realloc_r+0x1c>
 800c1da:	42b5      	cmp	r5, r6
 800c1dc:	462a      	mov	r2, r5
 800c1de:	4621      	mov	r1, r4
 800c1e0:	bf28      	it	cs
 800c1e2:	4632      	movcs	r2, r6
 800c1e4:	f7fd fa65 	bl	80096b2 <memcpy>
 800c1e8:	4621      	mov	r1, r4
 800c1ea:	4640      	mov	r0, r8
 800c1ec:	f7fe f8d4 	bl	800a398 <_free_r>
 800c1f0:	463c      	mov	r4, r7
 800c1f2:	e7e0      	b.n	800c1b6 <_realloc_r+0x1e>

0800c1f4 <fiprintf>:
 800c1f4:	b40e      	push	{r1, r2, r3}
 800c1f6:	b503      	push	{r0, r1, lr}
 800c1f8:	4601      	mov	r1, r0
 800c1fa:	ab03      	add	r3, sp, #12
 800c1fc:	4805      	ldr	r0, [pc, #20]	@ (800c214 <fiprintf+0x20>)
 800c1fe:	f853 2b04 	ldr.w	r2, [r3], #4
 800c202:	6800      	ldr	r0, [r0, #0]
 800c204:	9301      	str	r3, [sp, #4]
 800c206:	f000 f83f 	bl	800c288 <_vfiprintf_r>
 800c20a:	b002      	add	sp, #8
 800c20c:	f85d eb04 	ldr.w	lr, [sp], #4
 800c210:	b003      	add	sp, #12
 800c212:	4770      	bx	lr
 800c214:	2000019c 	.word	0x2000019c

0800c218 <abort>:
 800c218:	b508      	push	{r3, lr}
 800c21a:	2006      	movs	r0, #6
 800c21c:	f000 fa08 	bl	800c630 <raise>
 800c220:	2001      	movs	r0, #1
 800c222:	f7f6 f90f 	bl	8002444 <_exit>

0800c226 <_malloc_usable_size_r>:
 800c226:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c22a:	1f18      	subs	r0, r3, #4
 800c22c:	2b00      	cmp	r3, #0
 800c22e:	bfbc      	itt	lt
 800c230:	580b      	ldrlt	r3, [r1, r0]
 800c232:	18c0      	addlt	r0, r0, r3
 800c234:	4770      	bx	lr

0800c236 <__sfputc_r>:
 800c236:	6893      	ldr	r3, [r2, #8]
 800c238:	3b01      	subs	r3, #1
 800c23a:	2b00      	cmp	r3, #0
 800c23c:	b410      	push	{r4}
 800c23e:	6093      	str	r3, [r2, #8]
 800c240:	da08      	bge.n	800c254 <__sfputc_r+0x1e>
 800c242:	6994      	ldr	r4, [r2, #24]
 800c244:	42a3      	cmp	r3, r4
 800c246:	db01      	blt.n	800c24c <__sfputc_r+0x16>
 800c248:	290a      	cmp	r1, #10
 800c24a:	d103      	bne.n	800c254 <__sfputc_r+0x1e>
 800c24c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c250:	f000 b932 	b.w	800c4b8 <__swbuf_r>
 800c254:	6813      	ldr	r3, [r2, #0]
 800c256:	1c58      	adds	r0, r3, #1
 800c258:	6010      	str	r0, [r2, #0]
 800c25a:	7019      	strb	r1, [r3, #0]
 800c25c:	4608      	mov	r0, r1
 800c25e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c262:	4770      	bx	lr

0800c264 <__sfputs_r>:
 800c264:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c266:	4606      	mov	r6, r0
 800c268:	460f      	mov	r7, r1
 800c26a:	4614      	mov	r4, r2
 800c26c:	18d5      	adds	r5, r2, r3
 800c26e:	42ac      	cmp	r4, r5
 800c270:	d101      	bne.n	800c276 <__sfputs_r+0x12>
 800c272:	2000      	movs	r0, #0
 800c274:	e007      	b.n	800c286 <__sfputs_r+0x22>
 800c276:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c27a:	463a      	mov	r2, r7
 800c27c:	4630      	mov	r0, r6
 800c27e:	f7ff ffda 	bl	800c236 <__sfputc_r>
 800c282:	1c43      	adds	r3, r0, #1
 800c284:	d1f3      	bne.n	800c26e <__sfputs_r+0xa>
 800c286:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c288 <_vfiprintf_r>:
 800c288:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c28c:	460d      	mov	r5, r1
 800c28e:	b09d      	sub	sp, #116	@ 0x74
 800c290:	4614      	mov	r4, r2
 800c292:	4698      	mov	r8, r3
 800c294:	4606      	mov	r6, r0
 800c296:	b118      	cbz	r0, 800c2a0 <_vfiprintf_r+0x18>
 800c298:	6a03      	ldr	r3, [r0, #32]
 800c29a:	b90b      	cbnz	r3, 800c2a0 <_vfiprintf_r+0x18>
 800c29c:	f7fc faa6 	bl	80087ec <__sinit>
 800c2a0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c2a2:	07d9      	lsls	r1, r3, #31
 800c2a4:	d405      	bmi.n	800c2b2 <_vfiprintf_r+0x2a>
 800c2a6:	89ab      	ldrh	r3, [r5, #12]
 800c2a8:	059a      	lsls	r2, r3, #22
 800c2aa:	d402      	bmi.n	800c2b2 <_vfiprintf_r+0x2a>
 800c2ac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c2ae:	f7fd f9f5 	bl	800969c <__retarget_lock_acquire_recursive>
 800c2b2:	89ab      	ldrh	r3, [r5, #12]
 800c2b4:	071b      	lsls	r3, r3, #28
 800c2b6:	d501      	bpl.n	800c2bc <_vfiprintf_r+0x34>
 800c2b8:	692b      	ldr	r3, [r5, #16]
 800c2ba:	b99b      	cbnz	r3, 800c2e4 <_vfiprintf_r+0x5c>
 800c2bc:	4629      	mov	r1, r5
 800c2be:	4630      	mov	r0, r6
 800c2c0:	f000 f938 	bl	800c534 <__swsetup_r>
 800c2c4:	b170      	cbz	r0, 800c2e4 <_vfiprintf_r+0x5c>
 800c2c6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c2c8:	07dc      	lsls	r4, r3, #31
 800c2ca:	d504      	bpl.n	800c2d6 <_vfiprintf_r+0x4e>
 800c2cc:	f04f 30ff 	mov.w	r0, #4294967295
 800c2d0:	b01d      	add	sp, #116	@ 0x74
 800c2d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c2d6:	89ab      	ldrh	r3, [r5, #12]
 800c2d8:	0598      	lsls	r0, r3, #22
 800c2da:	d4f7      	bmi.n	800c2cc <_vfiprintf_r+0x44>
 800c2dc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c2de:	f7fd f9df 	bl	80096a0 <__retarget_lock_release_recursive>
 800c2e2:	e7f3      	b.n	800c2cc <_vfiprintf_r+0x44>
 800c2e4:	2300      	movs	r3, #0
 800c2e6:	9309      	str	r3, [sp, #36]	@ 0x24
 800c2e8:	2320      	movs	r3, #32
 800c2ea:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c2ee:	f8cd 800c 	str.w	r8, [sp, #12]
 800c2f2:	2330      	movs	r3, #48	@ 0x30
 800c2f4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800c4a4 <_vfiprintf_r+0x21c>
 800c2f8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c2fc:	f04f 0901 	mov.w	r9, #1
 800c300:	4623      	mov	r3, r4
 800c302:	469a      	mov	sl, r3
 800c304:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c308:	b10a      	cbz	r2, 800c30e <_vfiprintf_r+0x86>
 800c30a:	2a25      	cmp	r2, #37	@ 0x25
 800c30c:	d1f9      	bne.n	800c302 <_vfiprintf_r+0x7a>
 800c30e:	ebba 0b04 	subs.w	fp, sl, r4
 800c312:	d00b      	beq.n	800c32c <_vfiprintf_r+0xa4>
 800c314:	465b      	mov	r3, fp
 800c316:	4622      	mov	r2, r4
 800c318:	4629      	mov	r1, r5
 800c31a:	4630      	mov	r0, r6
 800c31c:	f7ff ffa2 	bl	800c264 <__sfputs_r>
 800c320:	3001      	adds	r0, #1
 800c322:	f000 80a7 	beq.w	800c474 <_vfiprintf_r+0x1ec>
 800c326:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c328:	445a      	add	r2, fp
 800c32a:	9209      	str	r2, [sp, #36]	@ 0x24
 800c32c:	f89a 3000 	ldrb.w	r3, [sl]
 800c330:	2b00      	cmp	r3, #0
 800c332:	f000 809f 	beq.w	800c474 <_vfiprintf_r+0x1ec>
 800c336:	2300      	movs	r3, #0
 800c338:	f04f 32ff 	mov.w	r2, #4294967295
 800c33c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c340:	f10a 0a01 	add.w	sl, sl, #1
 800c344:	9304      	str	r3, [sp, #16]
 800c346:	9307      	str	r3, [sp, #28]
 800c348:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c34c:	931a      	str	r3, [sp, #104]	@ 0x68
 800c34e:	4654      	mov	r4, sl
 800c350:	2205      	movs	r2, #5
 800c352:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c356:	4853      	ldr	r0, [pc, #332]	@ (800c4a4 <_vfiprintf_r+0x21c>)
 800c358:	f7f3 ff4a 	bl	80001f0 <memchr>
 800c35c:	9a04      	ldr	r2, [sp, #16]
 800c35e:	b9d8      	cbnz	r0, 800c398 <_vfiprintf_r+0x110>
 800c360:	06d1      	lsls	r1, r2, #27
 800c362:	bf44      	itt	mi
 800c364:	2320      	movmi	r3, #32
 800c366:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c36a:	0713      	lsls	r3, r2, #28
 800c36c:	bf44      	itt	mi
 800c36e:	232b      	movmi	r3, #43	@ 0x2b
 800c370:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c374:	f89a 3000 	ldrb.w	r3, [sl]
 800c378:	2b2a      	cmp	r3, #42	@ 0x2a
 800c37a:	d015      	beq.n	800c3a8 <_vfiprintf_r+0x120>
 800c37c:	9a07      	ldr	r2, [sp, #28]
 800c37e:	4654      	mov	r4, sl
 800c380:	2000      	movs	r0, #0
 800c382:	f04f 0c0a 	mov.w	ip, #10
 800c386:	4621      	mov	r1, r4
 800c388:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c38c:	3b30      	subs	r3, #48	@ 0x30
 800c38e:	2b09      	cmp	r3, #9
 800c390:	d94b      	bls.n	800c42a <_vfiprintf_r+0x1a2>
 800c392:	b1b0      	cbz	r0, 800c3c2 <_vfiprintf_r+0x13a>
 800c394:	9207      	str	r2, [sp, #28]
 800c396:	e014      	b.n	800c3c2 <_vfiprintf_r+0x13a>
 800c398:	eba0 0308 	sub.w	r3, r0, r8
 800c39c:	fa09 f303 	lsl.w	r3, r9, r3
 800c3a0:	4313      	orrs	r3, r2
 800c3a2:	9304      	str	r3, [sp, #16]
 800c3a4:	46a2      	mov	sl, r4
 800c3a6:	e7d2      	b.n	800c34e <_vfiprintf_r+0xc6>
 800c3a8:	9b03      	ldr	r3, [sp, #12]
 800c3aa:	1d19      	adds	r1, r3, #4
 800c3ac:	681b      	ldr	r3, [r3, #0]
 800c3ae:	9103      	str	r1, [sp, #12]
 800c3b0:	2b00      	cmp	r3, #0
 800c3b2:	bfbb      	ittet	lt
 800c3b4:	425b      	neglt	r3, r3
 800c3b6:	f042 0202 	orrlt.w	r2, r2, #2
 800c3ba:	9307      	strge	r3, [sp, #28]
 800c3bc:	9307      	strlt	r3, [sp, #28]
 800c3be:	bfb8      	it	lt
 800c3c0:	9204      	strlt	r2, [sp, #16]
 800c3c2:	7823      	ldrb	r3, [r4, #0]
 800c3c4:	2b2e      	cmp	r3, #46	@ 0x2e
 800c3c6:	d10a      	bne.n	800c3de <_vfiprintf_r+0x156>
 800c3c8:	7863      	ldrb	r3, [r4, #1]
 800c3ca:	2b2a      	cmp	r3, #42	@ 0x2a
 800c3cc:	d132      	bne.n	800c434 <_vfiprintf_r+0x1ac>
 800c3ce:	9b03      	ldr	r3, [sp, #12]
 800c3d0:	1d1a      	adds	r2, r3, #4
 800c3d2:	681b      	ldr	r3, [r3, #0]
 800c3d4:	9203      	str	r2, [sp, #12]
 800c3d6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c3da:	3402      	adds	r4, #2
 800c3dc:	9305      	str	r3, [sp, #20]
 800c3de:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800c4b4 <_vfiprintf_r+0x22c>
 800c3e2:	7821      	ldrb	r1, [r4, #0]
 800c3e4:	2203      	movs	r2, #3
 800c3e6:	4650      	mov	r0, sl
 800c3e8:	f7f3 ff02 	bl	80001f0 <memchr>
 800c3ec:	b138      	cbz	r0, 800c3fe <_vfiprintf_r+0x176>
 800c3ee:	9b04      	ldr	r3, [sp, #16]
 800c3f0:	eba0 000a 	sub.w	r0, r0, sl
 800c3f4:	2240      	movs	r2, #64	@ 0x40
 800c3f6:	4082      	lsls	r2, r0
 800c3f8:	4313      	orrs	r3, r2
 800c3fa:	3401      	adds	r4, #1
 800c3fc:	9304      	str	r3, [sp, #16]
 800c3fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c402:	4829      	ldr	r0, [pc, #164]	@ (800c4a8 <_vfiprintf_r+0x220>)
 800c404:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c408:	2206      	movs	r2, #6
 800c40a:	f7f3 fef1 	bl	80001f0 <memchr>
 800c40e:	2800      	cmp	r0, #0
 800c410:	d03f      	beq.n	800c492 <_vfiprintf_r+0x20a>
 800c412:	4b26      	ldr	r3, [pc, #152]	@ (800c4ac <_vfiprintf_r+0x224>)
 800c414:	bb1b      	cbnz	r3, 800c45e <_vfiprintf_r+0x1d6>
 800c416:	9b03      	ldr	r3, [sp, #12]
 800c418:	3307      	adds	r3, #7
 800c41a:	f023 0307 	bic.w	r3, r3, #7
 800c41e:	3308      	adds	r3, #8
 800c420:	9303      	str	r3, [sp, #12]
 800c422:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c424:	443b      	add	r3, r7
 800c426:	9309      	str	r3, [sp, #36]	@ 0x24
 800c428:	e76a      	b.n	800c300 <_vfiprintf_r+0x78>
 800c42a:	fb0c 3202 	mla	r2, ip, r2, r3
 800c42e:	460c      	mov	r4, r1
 800c430:	2001      	movs	r0, #1
 800c432:	e7a8      	b.n	800c386 <_vfiprintf_r+0xfe>
 800c434:	2300      	movs	r3, #0
 800c436:	3401      	adds	r4, #1
 800c438:	9305      	str	r3, [sp, #20]
 800c43a:	4619      	mov	r1, r3
 800c43c:	f04f 0c0a 	mov.w	ip, #10
 800c440:	4620      	mov	r0, r4
 800c442:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c446:	3a30      	subs	r2, #48	@ 0x30
 800c448:	2a09      	cmp	r2, #9
 800c44a:	d903      	bls.n	800c454 <_vfiprintf_r+0x1cc>
 800c44c:	2b00      	cmp	r3, #0
 800c44e:	d0c6      	beq.n	800c3de <_vfiprintf_r+0x156>
 800c450:	9105      	str	r1, [sp, #20]
 800c452:	e7c4      	b.n	800c3de <_vfiprintf_r+0x156>
 800c454:	fb0c 2101 	mla	r1, ip, r1, r2
 800c458:	4604      	mov	r4, r0
 800c45a:	2301      	movs	r3, #1
 800c45c:	e7f0      	b.n	800c440 <_vfiprintf_r+0x1b8>
 800c45e:	ab03      	add	r3, sp, #12
 800c460:	9300      	str	r3, [sp, #0]
 800c462:	462a      	mov	r2, r5
 800c464:	4b12      	ldr	r3, [pc, #72]	@ (800c4b0 <_vfiprintf_r+0x228>)
 800c466:	a904      	add	r1, sp, #16
 800c468:	4630      	mov	r0, r6
 800c46a:	f7fb fb67 	bl	8007b3c <_printf_float>
 800c46e:	4607      	mov	r7, r0
 800c470:	1c78      	adds	r0, r7, #1
 800c472:	d1d6      	bne.n	800c422 <_vfiprintf_r+0x19a>
 800c474:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c476:	07d9      	lsls	r1, r3, #31
 800c478:	d405      	bmi.n	800c486 <_vfiprintf_r+0x1fe>
 800c47a:	89ab      	ldrh	r3, [r5, #12]
 800c47c:	059a      	lsls	r2, r3, #22
 800c47e:	d402      	bmi.n	800c486 <_vfiprintf_r+0x1fe>
 800c480:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c482:	f7fd f90d 	bl	80096a0 <__retarget_lock_release_recursive>
 800c486:	89ab      	ldrh	r3, [r5, #12]
 800c488:	065b      	lsls	r3, r3, #25
 800c48a:	f53f af1f 	bmi.w	800c2cc <_vfiprintf_r+0x44>
 800c48e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c490:	e71e      	b.n	800c2d0 <_vfiprintf_r+0x48>
 800c492:	ab03      	add	r3, sp, #12
 800c494:	9300      	str	r3, [sp, #0]
 800c496:	462a      	mov	r2, r5
 800c498:	4b05      	ldr	r3, [pc, #20]	@ (800c4b0 <_vfiprintf_r+0x228>)
 800c49a:	a904      	add	r1, sp, #16
 800c49c:	4630      	mov	r0, r6
 800c49e:	f7fb fde5 	bl	800806c <_printf_i>
 800c4a2:	e7e4      	b.n	800c46e <_vfiprintf_r+0x1e6>
 800c4a4:	0800d300 	.word	0x0800d300
 800c4a8:	0800d30a 	.word	0x0800d30a
 800c4ac:	08007b3d 	.word	0x08007b3d
 800c4b0:	0800c265 	.word	0x0800c265
 800c4b4:	0800d306 	.word	0x0800d306

0800c4b8 <__swbuf_r>:
 800c4b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c4ba:	460e      	mov	r6, r1
 800c4bc:	4614      	mov	r4, r2
 800c4be:	4605      	mov	r5, r0
 800c4c0:	b118      	cbz	r0, 800c4ca <__swbuf_r+0x12>
 800c4c2:	6a03      	ldr	r3, [r0, #32]
 800c4c4:	b90b      	cbnz	r3, 800c4ca <__swbuf_r+0x12>
 800c4c6:	f7fc f991 	bl	80087ec <__sinit>
 800c4ca:	69a3      	ldr	r3, [r4, #24]
 800c4cc:	60a3      	str	r3, [r4, #8]
 800c4ce:	89a3      	ldrh	r3, [r4, #12]
 800c4d0:	071a      	lsls	r2, r3, #28
 800c4d2:	d501      	bpl.n	800c4d8 <__swbuf_r+0x20>
 800c4d4:	6923      	ldr	r3, [r4, #16]
 800c4d6:	b943      	cbnz	r3, 800c4ea <__swbuf_r+0x32>
 800c4d8:	4621      	mov	r1, r4
 800c4da:	4628      	mov	r0, r5
 800c4dc:	f000 f82a 	bl	800c534 <__swsetup_r>
 800c4e0:	b118      	cbz	r0, 800c4ea <__swbuf_r+0x32>
 800c4e2:	f04f 37ff 	mov.w	r7, #4294967295
 800c4e6:	4638      	mov	r0, r7
 800c4e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c4ea:	6823      	ldr	r3, [r4, #0]
 800c4ec:	6922      	ldr	r2, [r4, #16]
 800c4ee:	1a98      	subs	r0, r3, r2
 800c4f0:	6963      	ldr	r3, [r4, #20]
 800c4f2:	b2f6      	uxtb	r6, r6
 800c4f4:	4283      	cmp	r3, r0
 800c4f6:	4637      	mov	r7, r6
 800c4f8:	dc05      	bgt.n	800c506 <__swbuf_r+0x4e>
 800c4fa:	4621      	mov	r1, r4
 800c4fc:	4628      	mov	r0, r5
 800c4fe:	f7ff fd53 	bl	800bfa8 <_fflush_r>
 800c502:	2800      	cmp	r0, #0
 800c504:	d1ed      	bne.n	800c4e2 <__swbuf_r+0x2a>
 800c506:	68a3      	ldr	r3, [r4, #8]
 800c508:	3b01      	subs	r3, #1
 800c50a:	60a3      	str	r3, [r4, #8]
 800c50c:	6823      	ldr	r3, [r4, #0]
 800c50e:	1c5a      	adds	r2, r3, #1
 800c510:	6022      	str	r2, [r4, #0]
 800c512:	701e      	strb	r6, [r3, #0]
 800c514:	6962      	ldr	r2, [r4, #20]
 800c516:	1c43      	adds	r3, r0, #1
 800c518:	429a      	cmp	r2, r3
 800c51a:	d004      	beq.n	800c526 <__swbuf_r+0x6e>
 800c51c:	89a3      	ldrh	r3, [r4, #12]
 800c51e:	07db      	lsls	r3, r3, #31
 800c520:	d5e1      	bpl.n	800c4e6 <__swbuf_r+0x2e>
 800c522:	2e0a      	cmp	r6, #10
 800c524:	d1df      	bne.n	800c4e6 <__swbuf_r+0x2e>
 800c526:	4621      	mov	r1, r4
 800c528:	4628      	mov	r0, r5
 800c52a:	f7ff fd3d 	bl	800bfa8 <_fflush_r>
 800c52e:	2800      	cmp	r0, #0
 800c530:	d0d9      	beq.n	800c4e6 <__swbuf_r+0x2e>
 800c532:	e7d6      	b.n	800c4e2 <__swbuf_r+0x2a>

0800c534 <__swsetup_r>:
 800c534:	b538      	push	{r3, r4, r5, lr}
 800c536:	4b29      	ldr	r3, [pc, #164]	@ (800c5dc <__swsetup_r+0xa8>)
 800c538:	4605      	mov	r5, r0
 800c53a:	6818      	ldr	r0, [r3, #0]
 800c53c:	460c      	mov	r4, r1
 800c53e:	b118      	cbz	r0, 800c548 <__swsetup_r+0x14>
 800c540:	6a03      	ldr	r3, [r0, #32]
 800c542:	b90b      	cbnz	r3, 800c548 <__swsetup_r+0x14>
 800c544:	f7fc f952 	bl	80087ec <__sinit>
 800c548:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c54c:	0719      	lsls	r1, r3, #28
 800c54e:	d422      	bmi.n	800c596 <__swsetup_r+0x62>
 800c550:	06da      	lsls	r2, r3, #27
 800c552:	d407      	bmi.n	800c564 <__swsetup_r+0x30>
 800c554:	2209      	movs	r2, #9
 800c556:	602a      	str	r2, [r5, #0]
 800c558:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c55c:	81a3      	strh	r3, [r4, #12]
 800c55e:	f04f 30ff 	mov.w	r0, #4294967295
 800c562:	e033      	b.n	800c5cc <__swsetup_r+0x98>
 800c564:	0758      	lsls	r0, r3, #29
 800c566:	d512      	bpl.n	800c58e <__swsetup_r+0x5a>
 800c568:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c56a:	b141      	cbz	r1, 800c57e <__swsetup_r+0x4a>
 800c56c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c570:	4299      	cmp	r1, r3
 800c572:	d002      	beq.n	800c57a <__swsetup_r+0x46>
 800c574:	4628      	mov	r0, r5
 800c576:	f7fd ff0f 	bl	800a398 <_free_r>
 800c57a:	2300      	movs	r3, #0
 800c57c:	6363      	str	r3, [r4, #52]	@ 0x34
 800c57e:	89a3      	ldrh	r3, [r4, #12]
 800c580:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800c584:	81a3      	strh	r3, [r4, #12]
 800c586:	2300      	movs	r3, #0
 800c588:	6063      	str	r3, [r4, #4]
 800c58a:	6923      	ldr	r3, [r4, #16]
 800c58c:	6023      	str	r3, [r4, #0]
 800c58e:	89a3      	ldrh	r3, [r4, #12]
 800c590:	f043 0308 	orr.w	r3, r3, #8
 800c594:	81a3      	strh	r3, [r4, #12]
 800c596:	6923      	ldr	r3, [r4, #16]
 800c598:	b94b      	cbnz	r3, 800c5ae <__swsetup_r+0x7a>
 800c59a:	89a3      	ldrh	r3, [r4, #12]
 800c59c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800c5a0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c5a4:	d003      	beq.n	800c5ae <__swsetup_r+0x7a>
 800c5a6:	4621      	mov	r1, r4
 800c5a8:	4628      	mov	r0, r5
 800c5aa:	f000 f883 	bl	800c6b4 <__smakebuf_r>
 800c5ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c5b2:	f013 0201 	ands.w	r2, r3, #1
 800c5b6:	d00a      	beq.n	800c5ce <__swsetup_r+0x9a>
 800c5b8:	2200      	movs	r2, #0
 800c5ba:	60a2      	str	r2, [r4, #8]
 800c5bc:	6962      	ldr	r2, [r4, #20]
 800c5be:	4252      	negs	r2, r2
 800c5c0:	61a2      	str	r2, [r4, #24]
 800c5c2:	6922      	ldr	r2, [r4, #16]
 800c5c4:	b942      	cbnz	r2, 800c5d8 <__swsetup_r+0xa4>
 800c5c6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800c5ca:	d1c5      	bne.n	800c558 <__swsetup_r+0x24>
 800c5cc:	bd38      	pop	{r3, r4, r5, pc}
 800c5ce:	0799      	lsls	r1, r3, #30
 800c5d0:	bf58      	it	pl
 800c5d2:	6962      	ldrpl	r2, [r4, #20]
 800c5d4:	60a2      	str	r2, [r4, #8]
 800c5d6:	e7f4      	b.n	800c5c2 <__swsetup_r+0x8e>
 800c5d8:	2000      	movs	r0, #0
 800c5da:	e7f7      	b.n	800c5cc <__swsetup_r+0x98>
 800c5dc:	2000019c 	.word	0x2000019c

0800c5e0 <_raise_r>:
 800c5e0:	291f      	cmp	r1, #31
 800c5e2:	b538      	push	{r3, r4, r5, lr}
 800c5e4:	4605      	mov	r5, r0
 800c5e6:	460c      	mov	r4, r1
 800c5e8:	d904      	bls.n	800c5f4 <_raise_r+0x14>
 800c5ea:	2316      	movs	r3, #22
 800c5ec:	6003      	str	r3, [r0, #0]
 800c5ee:	f04f 30ff 	mov.w	r0, #4294967295
 800c5f2:	bd38      	pop	{r3, r4, r5, pc}
 800c5f4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800c5f6:	b112      	cbz	r2, 800c5fe <_raise_r+0x1e>
 800c5f8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c5fc:	b94b      	cbnz	r3, 800c612 <_raise_r+0x32>
 800c5fe:	4628      	mov	r0, r5
 800c600:	f000 f830 	bl	800c664 <_getpid_r>
 800c604:	4622      	mov	r2, r4
 800c606:	4601      	mov	r1, r0
 800c608:	4628      	mov	r0, r5
 800c60a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c60e:	f000 b817 	b.w	800c640 <_kill_r>
 800c612:	2b01      	cmp	r3, #1
 800c614:	d00a      	beq.n	800c62c <_raise_r+0x4c>
 800c616:	1c59      	adds	r1, r3, #1
 800c618:	d103      	bne.n	800c622 <_raise_r+0x42>
 800c61a:	2316      	movs	r3, #22
 800c61c:	6003      	str	r3, [r0, #0]
 800c61e:	2001      	movs	r0, #1
 800c620:	e7e7      	b.n	800c5f2 <_raise_r+0x12>
 800c622:	2100      	movs	r1, #0
 800c624:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800c628:	4620      	mov	r0, r4
 800c62a:	4798      	blx	r3
 800c62c:	2000      	movs	r0, #0
 800c62e:	e7e0      	b.n	800c5f2 <_raise_r+0x12>

0800c630 <raise>:
 800c630:	4b02      	ldr	r3, [pc, #8]	@ (800c63c <raise+0xc>)
 800c632:	4601      	mov	r1, r0
 800c634:	6818      	ldr	r0, [r3, #0]
 800c636:	f7ff bfd3 	b.w	800c5e0 <_raise_r>
 800c63a:	bf00      	nop
 800c63c:	2000019c 	.word	0x2000019c

0800c640 <_kill_r>:
 800c640:	b538      	push	{r3, r4, r5, lr}
 800c642:	4d07      	ldr	r5, [pc, #28]	@ (800c660 <_kill_r+0x20>)
 800c644:	2300      	movs	r3, #0
 800c646:	4604      	mov	r4, r0
 800c648:	4608      	mov	r0, r1
 800c64a:	4611      	mov	r1, r2
 800c64c:	602b      	str	r3, [r5, #0]
 800c64e:	f7f5 fef1 	bl	8002434 <_kill>
 800c652:	1c43      	adds	r3, r0, #1
 800c654:	d102      	bne.n	800c65c <_kill_r+0x1c>
 800c656:	682b      	ldr	r3, [r5, #0]
 800c658:	b103      	cbz	r3, 800c65c <_kill_r+0x1c>
 800c65a:	6023      	str	r3, [r4, #0]
 800c65c:	bd38      	pop	{r3, r4, r5, pc}
 800c65e:	bf00      	nop
 800c660:	20006dbc 	.word	0x20006dbc

0800c664 <_getpid_r>:
 800c664:	f7f5 bee4 	b.w	8002430 <_getpid>

0800c668 <__swhatbuf_r>:
 800c668:	b570      	push	{r4, r5, r6, lr}
 800c66a:	460c      	mov	r4, r1
 800c66c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c670:	2900      	cmp	r1, #0
 800c672:	b096      	sub	sp, #88	@ 0x58
 800c674:	4615      	mov	r5, r2
 800c676:	461e      	mov	r6, r3
 800c678:	da0d      	bge.n	800c696 <__swhatbuf_r+0x2e>
 800c67a:	89a3      	ldrh	r3, [r4, #12]
 800c67c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800c680:	f04f 0100 	mov.w	r1, #0
 800c684:	bf14      	ite	ne
 800c686:	2340      	movne	r3, #64	@ 0x40
 800c688:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800c68c:	2000      	movs	r0, #0
 800c68e:	6031      	str	r1, [r6, #0]
 800c690:	602b      	str	r3, [r5, #0]
 800c692:	b016      	add	sp, #88	@ 0x58
 800c694:	bd70      	pop	{r4, r5, r6, pc}
 800c696:	466a      	mov	r2, sp
 800c698:	f000 f848 	bl	800c72c <_fstat_r>
 800c69c:	2800      	cmp	r0, #0
 800c69e:	dbec      	blt.n	800c67a <__swhatbuf_r+0x12>
 800c6a0:	9901      	ldr	r1, [sp, #4]
 800c6a2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800c6a6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800c6aa:	4259      	negs	r1, r3
 800c6ac:	4159      	adcs	r1, r3
 800c6ae:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c6b2:	e7eb      	b.n	800c68c <__swhatbuf_r+0x24>

0800c6b4 <__smakebuf_r>:
 800c6b4:	898b      	ldrh	r3, [r1, #12]
 800c6b6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c6b8:	079d      	lsls	r5, r3, #30
 800c6ba:	4606      	mov	r6, r0
 800c6bc:	460c      	mov	r4, r1
 800c6be:	d507      	bpl.n	800c6d0 <__smakebuf_r+0x1c>
 800c6c0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800c6c4:	6023      	str	r3, [r4, #0]
 800c6c6:	6123      	str	r3, [r4, #16]
 800c6c8:	2301      	movs	r3, #1
 800c6ca:	6163      	str	r3, [r4, #20]
 800c6cc:	b003      	add	sp, #12
 800c6ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c6d0:	ab01      	add	r3, sp, #4
 800c6d2:	466a      	mov	r2, sp
 800c6d4:	f7ff ffc8 	bl	800c668 <__swhatbuf_r>
 800c6d8:	9f00      	ldr	r7, [sp, #0]
 800c6da:	4605      	mov	r5, r0
 800c6dc:	4639      	mov	r1, r7
 800c6de:	4630      	mov	r0, r6
 800c6e0:	f7fa fa7a 	bl	8006bd8 <_malloc_r>
 800c6e4:	b948      	cbnz	r0, 800c6fa <__smakebuf_r+0x46>
 800c6e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c6ea:	059a      	lsls	r2, r3, #22
 800c6ec:	d4ee      	bmi.n	800c6cc <__smakebuf_r+0x18>
 800c6ee:	f023 0303 	bic.w	r3, r3, #3
 800c6f2:	f043 0302 	orr.w	r3, r3, #2
 800c6f6:	81a3      	strh	r3, [r4, #12]
 800c6f8:	e7e2      	b.n	800c6c0 <__smakebuf_r+0xc>
 800c6fa:	89a3      	ldrh	r3, [r4, #12]
 800c6fc:	6020      	str	r0, [r4, #0]
 800c6fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c702:	81a3      	strh	r3, [r4, #12]
 800c704:	9b01      	ldr	r3, [sp, #4]
 800c706:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800c70a:	b15b      	cbz	r3, 800c724 <__smakebuf_r+0x70>
 800c70c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c710:	4630      	mov	r0, r6
 800c712:	f000 f81d 	bl	800c750 <_isatty_r>
 800c716:	b128      	cbz	r0, 800c724 <__smakebuf_r+0x70>
 800c718:	89a3      	ldrh	r3, [r4, #12]
 800c71a:	f023 0303 	bic.w	r3, r3, #3
 800c71e:	f043 0301 	orr.w	r3, r3, #1
 800c722:	81a3      	strh	r3, [r4, #12]
 800c724:	89a3      	ldrh	r3, [r4, #12]
 800c726:	431d      	orrs	r5, r3
 800c728:	81a5      	strh	r5, [r4, #12]
 800c72a:	e7cf      	b.n	800c6cc <__smakebuf_r+0x18>

0800c72c <_fstat_r>:
 800c72c:	b538      	push	{r3, r4, r5, lr}
 800c72e:	4d07      	ldr	r5, [pc, #28]	@ (800c74c <_fstat_r+0x20>)
 800c730:	2300      	movs	r3, #0
 800c732:	4604      	mov	r4, r0
 800c734:	4608      	mov	r0, r1
 800c736:	4611      	mov	r1, r2
 800c738:	602b      	str	r3, [r5, #0]
 800c73a:	f7f5 fea8 	bl	800248e <_fstat>
 800c73e:	1c43      	adds	r3, r0, #1
 800c740:	d102      	bne.n	800c748 <_fstat_r+0x1c>
 800c742:	682b      	ldr	r3, [r5, #0]
 800c744:	b103      	cbz	r3, 800c748 <_fstat_r+0x1c>
 800c746:	6023      	str	r3, [r4, #0]
 800c748:	bd38      	pop	{r3, r4, r5, pc}
 800c74a:	bf00      	nop
 800c74c:	20006dbc 	.word	0x20006dbc

0800c750 <_isatty_r>:
 800c750:	b538      	push	{r3, r4, r5, lr}
 800c752:	4d06      	ldr	r5, [pc, #24]	@ (800c76c <_isatty_r+0x1c>)
 800c754:	2300      	movs	r3, #0
 800c756:	4604      	mov	r4, r0
 800c758:	4608      	mov	r0, r1
 800c75a:	602b      	str	r3, [r5, #0]
 800c75c:	f7f5 fe9c 	bl	8002498 <_isatty>
 800c760:	1c43      	adds	r3, r0, #1
 800c762:	d102      	bne.n	800c76a <_isatty_r+0x1a>
 800c764:	682b      	ldr	r3, [r5, #0]
 800c766:	b103      	cbz	r3, 800c76a <_isatty_r+0x1a>
 800c768:	6023      	str	r3, [r4, #0]
 800c76a:	bd38      	pop	{r3, r4, r5, pc}
 800c76c:	20006dbc 	.word	0x20006dbc

0800c770 <_init>:
 800c770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c772:	bf00      	nop
 800c774:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c776:	bc08      	pop	{r3}
 800c778:	469e      	mov	lr, r3
 800c77a:	4770      	bx	lr

0800c77c <_fini>:
 800c77c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c77e:	bf00      	nop
 800c780:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c782:	bc08      	pop	{r3}
 800c784:	469e      	mov	lr, r3
 800c786:	4770      	bx	lr
>>>>>>> 2522f85 (adding the shift left all FLASH by a sector)
