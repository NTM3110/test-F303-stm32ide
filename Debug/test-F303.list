
test-F303.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000103fc  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002c20  08010590  08010590  00011590  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080131b0  080131b0  00015268  2**0
                  CONTENTS
  4 .ARM          00000008  080131b0  080131b0  000141b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080131b8  080131b8  00015268  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080131b8  080131b8  000141b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080131bc  080131bc  000141bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000268  20000000  080131c0  00015000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00015268  2**0
                  CONTENTS
 10 .bss          000095dc  20000268  20000268  00015268  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  20009844  20009844  00015268  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00015268  2**0
                  CONTENTS, READONLY
 13 .debug_info   0003a80e  00000000  00000000  00015298  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000074e7  00000000  00000000  0004faa6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loclists 0001389c  00000000  00000000  00056f8d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00002010  00000000  00000000  0006a830  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000022ed  00000000  00000000  0006c840  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000258ce  00000000  00000000  0006eb2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000361ad  00000000  00000000  000943fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d978a  00000000  00000000  000ca5a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  001a3d32  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00007538  00000000  00000000  001a3d78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000051  00000000  00000000  001ab2b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000268 	.word	0x20000268
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08010574 	.word	0x08010574

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000026c 	.word	0x2000026c
 80001cc:	08010574 	.word	0x08010574

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_d2lz>:
 8000ca8:	b538      	push	{r3, r4, r5, lr}
 8000caa:	2200      	movs	r2, #0
 8000cac:	2300      	movs	r3, #0
 8000cae:	4604      	mov	r4, r0
 8000cb0:	460d      	mov	r5, r1
 8000cb2:	f7ff ff23 	bl	8000afc <__aeabi_dcmplt>
 8000cb6:	b928      	cbnz	r0, 8000cc4 <__aeabi_d2lz+0x1c>
 8000cb8:	4620      	mov	r0, r4
 8000cba:	4629      	mov	r1, r5
 8000cbc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cc0:	f000 b80a 	b.w	8000cd8 <__aeabi_d2ulz>
 8000cc4:	4620      	mov	r0, r4
 8000cc6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cca:	f000 f805 	bl	8000cd8 <__aeabi_d2ulz>
 8000cce:	4240      	negs	r0, r0
 8000cd0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cd4:	bd38      	pop	{r3, r4, r5, pc}
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_d2ulz>:
 8000cd8:	b5d0      	push	{r4, r6, r7, lr}
 8000cda:	4b0c      	ldr	r3, [pc, #48]	@ (8000d0c <__aeabi_d2ulz+0x34>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	4606      	mov	r6, r0
 8000ce0:	460f      	mov	r7, r1
 8000ce2:	f7ff fc99 	bl	8000618 <__aeabi_dmul>
 8000ce6:	f7ff ff6f 	bl	8000bc8 <__aeabi_d2uiz>
 8000cea:	4604      	mov	r4, r0
 8000cec:	f7ff fc1a 	bl	8000524 <__aeabi_ui2d>
 8000cf0:	4b07      	ldr	r3, [pc, #28]	@ (8000d10 <__aeabi_d2ulz+0x38>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	f7ff fc90 	bl	8000618 <__aeabi_dmul>
 8000cf8:	4602      	mov	r2, r0
 8000cfa:	460b      	mov	r3, r1
 8000cfc:	4630      	mov	r0, r6
 8000cfe:	4639      	mov	r1, r7
 8000d00:	f7ff fad2 	bl	80002a8 <__aeabi_dsub>
 8000d04:	f7ff ff60 	bl	8000bc8 <__aeabi_d2uiz>
 8000d08:	4621      	mov	r1, r4
 8000d0a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d0c:	3df00000 	.word	0x3df00000
 8000d10:	41f00000 	.word	0x41f00000

08000d14 <coldStart>:
	//memset(gnssDmaRingBufferMemory, 0x20, sizeof(gnssDmaRingBufferMemory));	// insert buffer with space character	
	RingBufferDmaU8_initUSARTRx(&GPSRxDMARing, &huart2, gpsSentence, GPS_STACK_SIZE);
}

void coldStart(void){
	HAL_UART_Transmit(&huart2, (uint8_t*)"$PMTK104*37\r\n", strlen("$PMTK104*37\r\n"), 2000);
 8000d14:	4903      	ldr	r1, [pc, #12]	@ (8000d24 <coldStart+0x10>)
 8000d16:	4804      	ldr	r0, [pc, #16]	@ (8000d28 <coldStart+0x14>)
 8000d18:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000d1c:	220d      	movs	r2, #13
 8000d1e:	f007 bd75 	b.w	800880c <HAL_UART_Transmit>
 8000d22:	bf00      	nop
 8000d24:	0801066c 	.word	0x0801066c
 8000d28:	20006f24 	.word	0x20006f24

08000d2c <validateChecksum>:
}

// Function to validate the checksum of an NMEA sentence
int validateChecksum(uint8_t *nmeaSentence, size_t len) {
 8000d2c:	b538      	push	{r3, r4, r5, lr}
 8000d2e:	4401      	add	r1, r0
 8000d30:	4603      	mov	r3, r0
    const uint8_t *start = nmeaSentence;  // Start of the sentence (after '$')
    const uint8_t *checksumStart = NULL;

    // Find the checksum part (after '*')
    for (size_t i = 0; i < len; i++) {
 8000d32:	4299      	cmp	r1, r3
 8000d34:	d101      	bne.n	8000d3a <validateChecksum+0xe>
            break;
        }
    }

    if (!checksumStart) {
        return 0;  // Invalid sentence format
 8000d36:	2000      	movs	r0, #0
 8000d38:	e021      	b.n	8000d7e <validateChecksum+0x52>
        if (nmeaSentence[i] == '*') {
 8000d3a:	461c      	mov	r4, r3
 8000d3c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000d40:	2a2a      	cmp	r2, #42	@ 0x2a
 8000d42:	d1f6      	bne.n	8000d32 <validateChecksum+0x6>

    uint8_t calculatedChecksum = 0;
    uint8_t receivedChecksum = 1;

    // XOR all characters between '$' and '*', excluding both symbols
    for (const uint8_t *p = start + 1; p < checksumStart; ++p) {
 8000d44:	3001      	adds	r0, #1
    uint8_t calculatedChecksum = 0;
 8000d46:	2500      	movs	r5, #0
    for (const uint8_t *p = start + 1; p < checksumStart; ++p) {
 8000d48:	e002      	b.n	8000d50 <validateChecksum+0x24>
        calculatedChecksum ^= *p;
 8000d4a:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000d4e:	405d      	eors	r5, r3
    for (const uint8_t *p = start + 1; p < checksumStart; ++p) {
 8000d50:	4284      	cmp	r4, r0
 8000d52:	d8fa      	bhi.n	8000d4a <validateChecksum+0x1e>
    }

    // Extract the received checksum (after '*')
    if (checksumStart + 2 < nmeaSentence + len) {
 8000d54:	1ca3      	adds	r3, r4, #2
 8000d56:	428b      	cmp	r3, r1
 8000d58:	d212      	bcs.n	8000d80 <validateChecksum+0x54>
        receivedChecksum = (uint8_t)strtol((char *)(checksumStart + 1), NULL, 16);
 8000d5a:	2210      	movs	r2, #16
 8000d5c:	2100      	movs	r1, #0
 8000d5e:	1c60      	adds	r0, r4, #1
 8000d60:	f00a fc60 	bl	800b624 <strtol>
 8000d64:	4604      	mov	r4, r0

        // Debugging: Print calculated and received checksums
        Debug_printf("Calculated checksum: %02x\n", calculatedChecksum);
 8000d66:	4629      	mov	r1, r5
 8000d68:	4808      	ldr	r0, [pc, #32]	@ (8000d8c <validateChecksum+0x60>)
        Debug_printf("Received checksum: %02x\n", receivedChecksum);
 8000d6a:	b2e4      	uxtb	r4, r4
        Debug_printf("Calculated checksum: %02x\n", calculatedChecksum);
 8000d6c:	f004 fda8 	bl	80058c0 <Debug_printf>
        Debug_printf("Received checksum: %02x\n", receivedChecksum);
 8000d70:	4807      	ldr	r0, [pc, #28]	@ (8000d90 <validateChecksum+0x64>)
 8000d72:	4621      	mov	r1, r4
 8000d74:	f004 fda4 	bl	80058c0 <Debug_printf>

        // Compare the calculated checksum with the received checksum
        return calculatedChecksum == receivedChecksum;
 8000d78:	1b63      	subs	r3, r4, r5
 8000d7a:	4258      	negs	r0, r3
 8000d7c:	4158      	adcs	r0, r3
    }
    Debug_printf("Checksum mismatch: calculated 0x%02X, received 0x%02X\n",
                         calculatedChecksum, receivedChecksum);
    return 0; // Invalid checksum
}
 8000d7e:	bd38      	pop	{r3, r4, r5, pc}
    Debug_printf("Checksum mismatch: calculated 0x%02X, received 0x%02X\n",
 8000d80:	4804      	ldr	r0, [pc, #16]	@ (8000d94 <validateChecksum+0x68>)
 8000d82:	2201      	movs	r2, #1
 8000d84:	4629      	mov	r1, r5
 8000d86:	f004 fd9b 	bl	80058c0 <Debug_printf>
    return 0; // Invalid checksum
 8000d8a:	e7d4      	b.n	8000d36 <validateChecksum+0xa>
 8000d8c:	0801067a 	.word	0x0801067a
 8000d90:	08010695 	.word	0x08010695
 8000d94:	080106ae 	.word	0x080106ae

08000d98 <convertToEpoch>:
    Debug_printf("Course: %.1f\r\n", rmc.course);

    Debug_printf("Validity: %s\r\n", rmc.isValid ? "Valid" : "Invalid");
}

time_t convertToEpoch(int year, int month, int day, int hour, int min, int sec) {
 8000d98:	b510      	push	{r4, lr}
 8000d9a:	b08a      	sub	sp, #40	@ 0x28
    struct tm timeinfo = {0};

    // Set timeinfo fields
    timeinfo.tm_year = year + 100; // Year since 1900
 8000d9c:	3064      	adds	r0, #100	@ 0x64
    timeinfo.tm_mon = month - 1;    // Month (0-11, so subtract 1)
    timeinfo.tm_mday = day;         // Day of the month
    timeinfo.tm_hour = hour;        // Hour (0-23)
 8000d9e:	9303      	str	r3, [sp, #12]
    timeinfo.tm_min = min;          // Minute (0-59)
 8000da0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8000da2:	9302      	str	r3, [sp, #8]
    timeinfo.tm_sec = sec;          // Second (0-59)
 8000da4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
    timeinfo.tm_year = year + 100; // Year since 1900
 8000da6:	9006      	str	r0, [sp, #24]
    timeinfo.tm_sec = sec;          // Second (0-59)
 8000da8:	9301      	str	r3, [sp, #4]
    struct tm timeinfo = {0};
 8000daa:	2400      	movs	r4, #0
    timeinfo.tm_isdst = -1;         // Automatically determine Daylight Saving Time
 8000dac:	f04f 33ff 	mov.w	r3, #4294967295
    timeinfo.tm_mon = month - 1;    // Month (0-11, so subtract 1)
 8000db0:	3901      	subs	r1, #1

    // Convert to epoch time (seconds since 1970-01-01 00:00:00 UTC)
    time_t epoch = mktime(&timeinfo);
 8000db2:	a801      	add	r0, sp, #4
    struct tm timeinfo = {0};
 8000db4:	e9cd 4407 	strd	r4, r4, [sp, #28]
    timeinfo.tm_mday = day;         // Day of the month
 8000db8:	e9cd 2104 	strd	r2, r1, [sp, #16]
    timeinfo.tm_isdst = -1;         // Automatically determine Daylight Saving Time
 8000dbc:	9309      	str	r3, [sp, #36]	@ 0x24
    time_t epoch = mktime(&timeinfo);
 8000dbe:	f00b fd9f 	bl	800c900 <mktime>

    return epoch;
}
 8000dc2:	b00a      	add	sp, #40	@ 0x28
 8000dc4:	bd10      	pop	{r4, pc}
	...

08000dc8 <parse_rmc>:

void parse_rmc(uint8_t *rmc_sentence) {
 8000dc8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000dcc:	ed2d 8b02 	vpush	{d8}
 8000dd0:	b0a3      	sub	sp, #140	@ 0x8c
    int field = 0;
    uint8_t str_cpy[128];
    strcpy((char*)str_cpy,(char*) rmc_sentence);
 8000dd2:	4601      	mov	r1, r0
void parse_rmc(uint8_t *rmc_sentence) {
 8000dd4:	4604      	mov	r4, r0
    strcpy((char*)str_cpy,(char*) rmc_sentence);
 8000dd6:	a802      	add	r0, sp, #8
 8000dd8:	f00c faa4 	bl	800d324 <strcpy>
    str_cpy[sizeof(str_cpy) - 1] = '\0';
 8000ddc:	2600      	movs	r6, #0

    Debug_printf("\n");
 8000dde:	4882      	ldr	r0, [pc, #520]	@ (8000fe8 <parse_rmc+0x220>)
    str_cpy[sizeof(str_cpy) - 1] = '\0';
 8000de0:	f88d 6087 	strb.w	r6, [sp, #135]	@ 0x87
    Debug_printf("\n");
 8000de4:	f004 fd6c 	bl	80058c0 <Debug_printf>
    Debug_printf((char *)rmc_sentence);
 8000de8:	4620      	mov	r0, r4
 8000dea:	f004 fd69 	bl	80058c0 <Debug_printf>
    Debug_printf("\n");
 8000dee:	487e      	ldr	r0, [pc, #504]	@ (8000fe8 <parse_rmc+0x220>)
 8000df0:	f004 fd66 	bl	80058c0 <Debug_printf>

	if(validateChecksum(rmc_sentence, 128) == 0){
 8000df4:	2180      	movs	r1, #128	@ 0x80
 8000df6:	4620      	mov	r0, r4
 8000df8:	f7ff ff98 	bl	8000d2c <validateChecksum>
 8000dfc:	b1a0      	cbz	r0, 8000e28 <parse_rmc+0x60>
 8000dfe:	ad02      	add	r5, sp, #8

    uint8_t *ptr = str_cpy;

    while (*ptr) {
        if (*ptr == ',' || *ptr == '*') {
            *ptr = '\0';
 8000e00:	4637      	mov	r7, r6
    while (*ptr) {
 8000e02:	f815 3b01 	ldrb.w	r3, [r5], #1
 8000e06:	b9a3      	cbnz	r3, 8000e32 <parse_rmc+0x6a>
            rmc_sentence = ptr + 1;
            field++;
        }
        ptr++;
    }
	if(rmc.isValid == 1)
 8000e08:	4c78      	ldr	r4, [pc, #480]	@ (8000fec <parse_rmc+0x224>)
 8000e0a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8000e0c:	2b01      	cmp	r3, #1
 8000e0e:	d10b      	bne.n	8000e28 <parse_rmc+0x60>
		rmc.date.epoch = convertToEpoch(rmc.date.Yr, rmc.date.Mon, rmc.date.Day, rmc.tim.hour, rmc.tim.min, rmc.tim.sec);
 8000e10:	68a3      	ldr	r3, [r4, #8]
 8000e12:	9301      	str	r3, [sp, #4]
 8000e14:	6863      	ldr	r3, [r4, #4]
 8000e16:	9300      	str	r3, [sp, #0]
 8000e18:	e9d4 2104 	ldrd	r2, r1, [r4, #16]
 8000e1c:	6823      	ldr	r3, [r4, #0]
 8000e1e:	69a0      	ldr	r0, [r4, #24]
 8000e20:	f7ff ffba 	bl	8000d98 <convertToEpoch>
 8000e24:	e9c4 0108 	strd	r0, r1, [r4, #32]
}
 8000e28:	b023      	add	sp, #140	@ 0x8c
 8000e2a:	ecbd 8b02 	vpop	{d8}
 8000e2e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (*ptr == ',' || *ptr == '*') {
 8000e32:	2b2c      	cmp	r3, #44	@ 0x2c
 8000e34:	d001      	beq.n	8000e3a <parse_rmc+0x72>
 8000e36:	2b2a      	cmp	r3, #42	@ 0x2a
 8000e38:	d1e3      	bne.n	8000e02 <parse_rmc+0x3a>
            switch (field) {
 8000e3a:	1e73      	subs	r3, r6, #1
            *ptr = '\0';
 8000e3c:	f805 7c01 	strb.w	r7, [r5, #-1]
            switch (field) {
 8000e40:	2b08      	cmp	r3, #8
 8000e42:	d81d      	bhi.n	8000e80 <parse_rmc+0xb8>
 8000e44:	e8df f003 	tbb	[pc, r3]
 8000e48:	5d271f05 	.word	0x5d271f05
 8000e4c:	a79d9862 	.word	0xa79d9862
 8000e50:	b1          	.byte	0xb1
 8000e51:	00          	.byte	0x00
                    rmc.tim.hour = (rmc_sentence[0] - '0') * 10 + (rmc_sentence[1] - '0');
 8000e52:	7820      	ldrb	r0, [r4, #0]
 8000e54:	7863      	ldrb	r3, [r4, #1]
 8000e56:	4a65      	ldr	r2, [pc, #404]	@ (8000fec <parse_rmc+0x224>)
 8000e58:	210a      	movs	r1, #10
 8000e5a:	3830      	subs	r0, #48	@ 0x30
 8000e5c:	3b30      	subs	r3, #48	@ 0x30
 8000e5e:	fb01 3300 	mla	r3, r1, r0, r3
 8000e62:	6013      	str	r3, [r2, #0]
                    rmc.tim.min = (rmc_sentence[2] - '0') * 10 + (rmc_sentence[3] - '0');
 8000e64:	78a0      	ldrb	r0, [r4, #2]
 8000e66:	78e3      	ldrb	r3, [r4, #3]
 8000e68:	3830      	subs	r0, #48	@ 0x30
 8000e6a:	3b30      	subs	r3, #48	@ 0x30
 8000e6c:	fb01 3300 	mla	r3, r1, r0, r3
 8000e70:	6053      	str	r3, [r2, #4]
                    rmc.tim.sec = (rmc_sentence[4] - '0') * 10 + (rmc_sentence[5] - '0');
 8000e72:	7920      	ldrb	r0, [r4, #4]
 8000e74:	7963      	ldrb	r3, [r4, #5]
 8000e76:	3830      	subs	r0, #48	@ 0x30
 8000e78:	3b30      	subs	r3, #48	@ 0x30
 8000e7a:	fb01 3300 	mla	r3, r1, r0, r3
 8000e7e:	6093      	str	r3, [r2, #8]
            field++;
 8000e80:	3601      	adds	r6, #1
            rmc_sentence = ptr + 1;
 8000e82:	462c      	mov	r4, r5
        ptr++;
 8000e84:	e7bd      	b.n	8000e02 <parse_rmc+0x3a>
                    rmc.isValid = (rmc_sentence[0] == 'A') ? 1 : 0;
 8000e86:	7823      	ldrb	r3, [r4, #0]
 8000e88:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8000e8c:	4253      	negs	r3, r2
 8000e8e:	4153      	adcs	r3, r2
 8000e90:	4a56      	ldr	r2, [pc, #344]	@ (8000fec <parse_rmc+0x224>)
 8000e92:	6313      	str	r3, [r2, #48]	@ 0x30
                    break;
 8000e94:	e7f4      	b.n	8000e80 <parse_rmc+0xb8>
                    rmc.lcation.latitude = (atof((char *)rmc_sentence) )/100;
 8000e96:	4620      	mov	r0, r4
 8000e98:	f009 fc6c 	bl	800a774 <atof>
 8000e9c:	4b54      	ldr	r3, [pc, #336]	@ (8000ff0 <parse_rmc+0x228>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	ec51 0b10 	vmov	r0, r1, d0
 8000ea4:	f7ff fce2 	bl	800086c <__aeabi_ddiv>
 8000ea8:	4680      	mov	r8, r0
 8000eaa:	4689      	mov	r9, r1
                    int lati_int = (int)floor(rmc.lcation.latitude);
 8000eac:	ec49 8b10 	vmov	d0, r8, r9
 8000eb0:	f00f fa9e 	bl	80103f0 <floor>
 8000eb4:	ec51 0b10 	vmov	r0, r1, d0
 8000eb8:	f7ff fe5e 	bl	8000b78 <__aeabi_d2iz>
 8000ebc:	ee08 0a10 	vmov	s16, r0
					float lati_float = rmc.lcation.latitude - lati_int;
 8000ec0:	f7ff fb40 	bl	8000544 <__aeabi_i2d>
 8000ec4:	4602      	mov	r2, r0
 8000ec6:	460b      	mov	r3, r1
 8000ec8:	4640      	mov	r0, r8
 8000eca:	4649      	mov	r1, r9
 8000ecc:	f7ff f9ec 	bl	80002a8 <__aeabi_dsub>
 8000ed0:	f7ff fe9a 	bl	8000c08 <__aeabi_d2f>
					lati_float = lati_float/0.6;
 8000ed4:	f7ff fb48 	bl	8000568 <__aeabi_f2d>
 8000ed8:	a341      	add	r3, pc, #260	@ (adr r3, 8000fe0 <parse_rmc+0x218>)
 8000eda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ede:	f7ff fcc5 	bl	800086c <__aeabi_ddiv>
 8000ee2:	f7ff fe91 	bl	8000c08 <__aeabi_d2f>
					rmc.lcation.latitude = lati_int + lati_float;
 8000ee6:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
					lati_float = lati_float/0.6;
 8000eea:	ee07 0a90 	vmov	s15, r0
					rmc.lcation.latitude = lati_int + lati_float;
 8000eee:	ee78 7a27 	vadd.f32	s15, s16, s15
 8000ef2:	ee17 0a90 	vmov	r0, s15
 8000ef6:	f7ff fb37 	bl	8000568 <__aeabi_f2d>
 8000efa:	4b3c      	ldr	r3, [pc, #240]	@ (8000fec <parse_rmc+0x224>)
 8000efc:	e9c3 010e 	strd	r0, r1, [r3, #56]	@ 0x38
                    break;
 8000f00:	e7be      	b.n	8000e80 <parse_rmc+0xb8>
                    rmc.lcation.NS = rmc_sentence[0];
 8000f02:	4b3a      	ldr	r3, [pc, #232]	@ (8000fec <parse_rmc+0x224>)
 8000f04:	7822      	ldrb	r2, [r4, #0]
 8000f06:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
                    break;
 8000f0a:	e7b9      	b.n	8000e80 <parse_rmc+0xb8>
                    rmc.lcation.longitude = (atof((char *)rmc_sentence))/100;
 8000f0c:	4620      	mov	r0, r4
 8000f0e:	f009 fc31 	bl	800a774 <atof>
 8000f12:	4b37      	ldr	r3, [pc, #220]	@ (8000ff0 <parse_rmc+0x228>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	ec51 0b10 	vmov	r0, r1, d0
 8000f1a:	f7ff fca7 	bl	800086c <__aeabi_ddiv>
 8000f1e:	4680      	mov	r8, r0
 8000f20:	4689      	mov	r9, r1
                    int longi_int = (int)floor(rmc.lcation.longitude);
 8000f22:	ec49 8b10 	vmov	d0, r8, r9
 8000f26:	f00f fa63 	bl	80103f0 <floor>
 8000f2a:	ec51 0b10 	vmov	r0, r1, d0
 8000f2e:	f7ff fe23 	bl	8000b78 <__aeabi_d2iz>
 8000f32:	ee08 0a10 	vmov	s16, r0
					float longi_float = rmc.lcation.longitude - longi_int;
 8000f36:	f7ff fb05 	bl	8000544 <__aeabi_i2d>
 8000f3a:	4602      	mov	r2, r0
 8000f3c:	460b      	mov	r3, r1
 8000f3e:	4640      	mov	r0, r8
 8000f40:	4649      	mov	r1, r9
 8000f42:	f7ff f9b1 	bl	80002a8 <__aeabi_dsub>
 8000f46:	f7ff fe5f 	bl	8000c08 <__aeabi_d2f>
					longi_float = longi_float / 0.6;
 8000f4a:	f7ff fb0d 	bl	8000568 <__aeabi_f2d>
 8000f4e:	a324      	add	r3, pc, #144	@ (adr r3, 8000fe0 <parse_rmc+0x218>)
 8000f50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f54:	f7ff fc8a 	bl	800086c <__aeabi_ddiv>
 8000f58:	f7ff fe56 	bl	8000c08 <__aeabi_d2f>
					rmc.lcation.longitude = longi_int + longi_float;
 8000f5c:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
					longi_float = longi_float / 0.6;
 8000f60:	ee07 0a90 	vmov	s15, r0
					rmc.lcation.longitude = longi_int + longi_float;
 8000f64:	ee78 7a27 	vadd.f32	s15, s16, s15
 8000f68:	ee17 0a90 	vmov	r0, s15
 8000f6c:	f7ff fafc 	bl	8000568 <__aeabi_f2d>
 8000f70:	4b1e      	ldr	r3, [pc, #120]	@ (8000fec <parse_rmc+0x224>)
 8000f72:	e9c3 0112 	strd	r0, r1, [r3, #72]	@ 0x48
                    break;
 8000f76:	e783      	b.n	8000e80 <parse_rmc+0xb8>
                    rmc.lcation.EW = rmc_sentence[0];
 8000f78:	4b1c      	ldr	r3, [pc, #112]	@ (8000fec <parse_rmc+0x224>)
 8000f7a:	7822      	ldrb	r2, [r4, #0]
 8000f7c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
                    break;
 8000f80:	e77e      	b.n	8000e80 <parse_rmc+0xb8>
                    rmc.speed = atof((char *)rmc_sentence);
 8000f82:	4620      	mov	r0, r4
 8000f84:	f009 fbf6 	bl	800a774 <atof>
 8000f88:	ec51 0b10 	vmov	r0, r1, d0
 8000f8c:	f7ff fe3c 	bl	8000c08 <__aeabi_d2f>
 8000f90:	4b16      	ldr	r3, [pc, #88]	@ (8000fec <parse_rmc+0x224>)
 8000f92:	6298      	str	r0, [r3, #40]	@ 0x28
                    break;
 8000f94:	e774      	b.n	8000e80 <parse_rmc+0xb8>
                    rmc.course = atof((char *)rmc_sentence);
 8000f96:	4620      	mov	r0, r4
 8000f98:	f009 fbec 	bl	800a774 <atof>
 8000f9c:	ec51 0b10 	vmov	r0, r1, d0
 8000fa0:	f7ff fe32 	bl	8000c08 <__aeabi_d2f>
 8000fa4:	4b11      	ldr	r3, [pc, #68]	@ (8000fec <parse_rmc+0x224>)
 8000fa6:	62d8      	str	r0, [r3, #44]	@ 0x2c
                    break;
 8000fa8:	e76a      	b.n	8000e80 <parse_rmc+0xb8>
                    rmc.date.Day = (rmc_sentence[0] - '0') * 10 + (rmc_sentence[1] - '0');
 8000faa:	7820      	ldrb	r0, [r4, #0]
 8000fac:	7863      	ldrb	r3, [r4, #1]
 8000fae:	4a0f      	ldr	r2, [pc, #60]	@ (8000fec <parse_rmc+0x224>)
 8000fb0:	210a      	movs	r1, #10
 8000fb2:	3830      	subs	r0, #48	@ 0x30
 8000fb4:	3b30      	subs	r3, #48	@ 0x30
 8000fb6:	fb01 3300 	mla	r3, r1, r0, r3
 8000fba:	6113      	str	r3, [r2, #16]
                    rmc.date.Mon = (rmc_sentence[2] - '0') * 10 + (rmc_sentence[3] - '0');
 8000fbc:	78a0      	ldrb	r0, [r4, #2]
 8000fbe:	78e3      	ldrb	r3, [r4, #3]
 8000fc0:	3830      	subs	r0, #48	@ 0x30
 8000fc2:	3b30      	subs	r3, #48	@ 0x30
 8000fc4:	fb01 3300 	mla	r3, r1, r0, r3
 8000fc8:	6153      	str	r3, [r2, #20]
                    rmc.date.Yr = (rmc_sentence[4] - '0') * 10 + (rmc_sentence[5] - '0');
 8000fca:	7920      	ldrb	r0, [r4, #4]
 8000fcc:	7963      	ldrb	r3, [r4, #5]
 8000fce:	3830      	subs	r0, #48	@ 0x30
 8000fd0:	3b30      	subs	r3, #48	@ 0x30
 8000fd2:	fb01 3300 	mla	r3, r1, r0, r3
 8000fd6:	6193      	str	r3, [r2, #24]
                    break;
 8000fd8:	e752      	b.n	8000e80 <parse_rmc+0xb8>
 8000fda:	bf00      	nop
 8000fdc:	f3af 8000 	nop.w
 8000fe0:	33333333 	.word	0x33333333
 8000fe4:	3fe33333 	.word	0x3fe33333
 8000fe8:	08011a81 	.word	0x08011a81
 8000fec:	200003e8 	.word	0x200003e8
 8000ff0:	40590000 	.word	0x40590000

08000ff4 <sendRMCDataToFlash>:


void sendRMCDataToFlash(RMCSTRUCT *rmcData) {
 8000ff4:	b510      	push	{r4, lr}
	HAL_UART_Transmit(&huart1, (uint8_t*) "SENDING RMC TO FLASH\n",  strlen("SENDING RMC\n") , HAL_MAX_DELAY);
 8000ff6:	490c      	ldr	r1, [pc, #48]	@ (8001028 <sendRMCDataToFlash+0x34>)
void sendRMCDataToFlash(RMCSTRUCT *rmcData) {
 8000ff8:	4604      	mov	r4, r0
	HAL_UART_Transmit(&huart1, (uint8_t*) "SENDING RMC TO FLASH\n",  strlen("SENDING RMC\n") , HAL_MAX_DELAY);
 8000ffa:	f04f 33ff 	mov.w	r3, #4294967295
 8000ffe:	220c      	movs	r2, #12
 8001000:	480a      	ldr	r0, [pc, #40]	@ (800102c <sendRMCDataToFlash+0x38>)
 8001002:	f007 fc03 	bl	800880c <HAL_UART_Transmit>
	osStatus_t status = osMessageQueuePut(RMC_MailQFLASHIdHandle, rmcData, 0, 1000);
 8001006:	480a      	ldr	r0, [pc, #40]	@ (8001030 <sendRMCDataToFlash+0x3c>)
 8001008:	4621      	mov	r1, r4
 800100a:	6800      	ldr	r0, [r0, #0]
 800100c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001010:	2200      	movs	r2, #0
 8001012:	f007 fe4d 	bl	8008cb0 <osMessageQueuePut>
	if (status != osOK) {
 8001016:	4601      	mov	r1, r0
 8001018:	b120      	cbz	r0, 8001024 <sendRMCDataToFlash+0x30>
	   Debug_printf("\n\n-------------------------Failed to send message: %d ------------------------\n\n", status);
 800101a:	4806      	ldr	r0, [pc, #24]	@ (8001034 <sendRMCDataToFlash+0x40>)
	}
	else{
		Debug_printf("\n\n-------------------------SEND message successfullly at GPS: %d ------------------------\n\n", status);

	}
}
 800101c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		Debug_printf("\n\n-------------------------SEND message successfullly at GPS: %d ------------------------\n\n", status);
 8001020:	f004 bc4e 	b.w	80058c0 <Debug_printf>
 8001024:	4804      	ldr	r0, [pc, #16]	@ (8001038 <sendRMCDataToFlash+0x44>)
 8001026:	e7f9      	b.n	800101c <sendRMCDataToFlash+0x28>
 8001028:	080106e5 	.word	0x080106e5
 800102c:	20006fac 	.word	0x20006fac
 8001030:	20003ca8 	.word	0x20003ca8
 8001034:	080106fb 	.word	0x080106fb
 8001038:	0801074c 	.word	0x0801074c

0800103c <handleIncomingChar>:

int handleIncomingChar(char c) {
 800103c:	b570      	push	{r4, r5, r6, lr}
    static char tempBuffer[256]; // Increased size for safety
    static uint16_t tempIndex = 0;

    if (c == '\n') { // Sentence delimiter
        tempBuffer[tempIndex] = '\0'; // Null-terminate the string
 800103e:	4c12      	ldr	r4, [pc, #72]	@ (8001088 <handleIncomingChar+0x4c>)
    if (c == '\n') { // Sentence delimiter
 8001040:	280a      	cmp	r0, #10
        tempBuffer[tempIndex] = '\0'; // Null-terminate the string
 8001042:	8823      	ldrh	r3, [r4, #0]
    if (c == '\n') { // Sentence delimiter
 8001044:	d112      	bne.n	800106c <handleIncomingChar+0x30>
        tempBuffer[tempIndex] = '\0'; // Null-terminate the string
 8001046:	4d11      	ldr	r5, [pc, #68]	@ (800108c <handleIncomingChar+0x50>)
        if (strstr(tempBuffer, "$GNRMC")){ // Detect `$GNRMC`
 8001048:	4911      	ldr	r1, [pc, #68]	@ (8001090 <handleIncomingChar+0x54>)
        tempBuffer[tempIndex] = '\0'; // Null-terminate the string
 800104a:	2600      	movs	r6, #0
        if (strstr(tempBuffer, "$GNRMC")){ // Detect `$GNRMC`
 800104c:	4628      	mov	r0, r5
        tempBuffer[tempIndex] = '\0'; // Null-terminate the string
 800104e:	54ee      	strb	r6, [r5, r3]
        if (strstr(tempBuffer, "$GNRMC")){ // Detect `$GNRMC`
 8001050:	f00b fb6c 	bl	800c72c <strstr>
 8001054:	b138      	cbz	r0, 8001066 <handleIncomingChar+0x2a>
            strncpy((char*)rmc_str, tempBuffer, sizeof(rmc_str)); // Copy sentence
 8001056:	480f      	ldr	r0, [pc, #60]	@ (8001094 <handleIncomingChar+0x58>)
 8001058:	2280      	movs	r2, #128	@ 0x80
 800105a:	4629      	mov	r1, r5
 800105c:	f00b fb3d 	bl	800c6da <strncpy>
            tempIndex = 0;
 8001060:	8026      	strh	r6, [r4, #0]
 8001062:	2001      	movs	r0, #1
    } else {
        Debug_printf("Warning: Sentence too long, discarding\n");
        tempIndex = 0; // Reset if line too long
    }
    return 0;
}
 8001064:	bd70      	pop	{r4, r5, r6, pc}
        tempIndex = 0; // Reset for the next sentence
 8001066:	8020      	strh	r0, [r4, #0]
    return 0;
 8001068:	2000      	movs	r0, #0
 800106a:	e7fb      	b.n	8001064 <handleIncomingChar+0x28>
    } else if (tempIndex < sizeof(tempBuffer) - 1) {
 800106c:	2bfe      	cmp	r3, #254	@ 0xfe
 800106e:	d804      	bhi.n	800107a <handleIncomingChar+0x3e>
        tempBuffer[tempIndex++] = c;
 8001070:	1c5a      	adds	r2, r3, #1
 8001072:	8022      	strh	r2, [r4, #0]
 8001074:	4a05      	ldr	r2, [pc, #20]	@ (800108c <handleIncomingChar+0x50>)
 8001076:	54d0      	strb	r0, [r2, r3]
 8001078:	e7f6      	b.n	8001068 <handleIncomingChar+0x2c>
        Debug_printf("Warning: Sentence too long, discarding\n");
 800107a:	4807      	ldr	r0, [pc, #28]	@ (8001098 <handleIncomingChar+0x5c>)
 800107c:	f004 fc20 	bl	80058c0 <Debug_printf>
        tempIndex = 0; // Reset if line too long
 8001080:	2300      	movs	r3, #0
 8001082:	8023      	strh	r3, [r4, #0]
 8001084:	e7f0      	b.n	8001068 <handleIncomingChar+0x2c>
 8001086:	bf00      	nop
 8001088:	20000386 	.word	0x20000386
 800108c:	20000286 	.word	0x20000286
 8001090:	080107a8 	.word	0x080107a8
 8001094:	20001ad4 	.word	0x20001ad4
 8001098:	080107af 	.word	0x080107af

0800109c <getRMC>:

void getRMC() {
    static uint16_t lastReadIndex = 0; // Tracks the last read position in DMA
    uint16_t writeIndex = GPS_STACK_SIZE - __HAL_DMA_GET_COUNTER(&hdma_usart2_rx);
 800109c:	4b41      	ldr	r3, [pc, #260]	@ (80011a4 <getRMC+0x108>)
 800109e:	681b      	ldr	r3, [r3, #0]
void getRMC() {
 80010a0:	b570      	push	{r4, r5, r6, lr}
    uint16_t writeIndex = GPS_STACK_SIZE - __HAL_DMA_GET_COUNTER(&hdma_usart2_rx);
 80010a2:	685c      	ldr	r4, [r3, #4]

    // Process new data in the buffer
    while (lastReadIndex != writeIndex) {
 80010a4:	4d40      	ldr	r5, [pc, #256]	@ (80011a8 <getRMC+0x10c>)
        char c = gpsSentence[lastReadIndex];
 80010a6:	4e41      	ldr	r6, [pc, #260]	@ (80011ac <getRMC+0x110>)
    uint16_t writeIndex = GPS_STACK_SIZE - __HAL_DMA_GET_COUNTER(&hdma_usart2_rx);
 80010a8:	f5c4 54b4 	rsb	r4, r4, #5760	@ 0x1680
 80010ac:	b2a4      	uxth	r4, r4
    while (lastReadIndex != writeIndex) {
 80010ae:	882b      	ldrh	r3, [r5, #0]
 80010b0:	42a3      	cmp	r3, r4
 80010b2:	d14d      	bne.n	8001150 <getRMC+0xb4>

        lastReadIndex = (lastReadIndex + 1) % GPS_STACK_SIZE;
    }

    // Process `$GNRMC` sentence if detected
    if (isRMCExist) {
 80010b4:	4e3e      	ldr	r6, [pc, #248]	@ (80011b0 <getRMC+0x114>)
 80010b6:	4c3f      	ldr	r4, [pc, #252]	@ (80011b4 <getRMC+0x118>)
 80010b8:	6833      	ldr	r3, [r6, #0]
 80010ba:	b30b      	cbz	r3, 8001100 <getRMC+0x64>
		parse_rmc(rmc_str);// Parse the `$GNRMC` sentence
		//display_rmc_data();
		get_RTC_time_date(&rmc);
 80010bc:	4d3e      	ldr	r5, [pc, #248]	@ (80011b8 <getRMC+0x11c>)
		parse_rmc(rmc_str);// Parse the `$GNRMC` sentence
 80010be:	483f      	ldr	r0, [pc, #252]	@ (80011bc <getRMC+0x120>)
 80010c0:	f7ff fe82 	bl	8000dc8 <parse_rmc>
		get_RTC_time_date(&rmc);
 80010c4:	4628      	mov	r0, r5
 80010c6:	f002 fd6d 	bl	8003ba4 <get_RTC_time_date>

//		if (rmc.isValid &&
//			(rmc_saved.isValid == 0 ||
//			 isWithinThreshold(rmc_saved.lcation.latitude, rmc_saved.lcation.longitude,
//							   rmc.lcation.latitude, rmc.lcation.longitude, 1.0))) {
		if (rmc.isValid){
 80010ca:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d050      	beq.n	8001172 <getRMC+0xd6>
			Debug_printf("\n\n------------ Sending RMC ------------\n\n");
 80010d0:	483b      	ldr	r0, [pc, #236]	@ (80011c0 <getRMC+0x124>)
 80010d2:	f004 fbf5 	bl	80058c0 <Debug_printf>
			sendRMCDataToFlash(&rmc);
 80010d6:	4628      	mov	r0, r5
 80010d8:	f7ff ff8c 	bl	8000ff4 <sendRMCDataToFlash>
			count_send_gps++;
 80010dc:	4a39      	ldr	r2, [pc, #228]	@ (80011c4 <getRMC+0x128>)
			getRMC_time = 0;
			rmc_saved = rmc;
 80010de:	483a      	ldr	r0, [pc, #232]	@ (80011c8 <getRMC+0x12c>)
			count_send_gps++;
 80010e0:	6813      	ldr	r3, [r2, #0]
 80010e2:	3301      	adds	r3, #1
 80010e4:	6013      	str	r3, [r2, #0]
			rmc_saved = rmc;
 80010e6:	4629      	mov	r1, r5
			getRMC_time = 0;
 80010e8:	2300      	movs	r3, #0
			rmc_saved = rmc;
 80010ea:	2258      	movs	r2, #88	@ 0x58
			getRMC_time = 0;
 80010ec:	6023      	str	r3, [r4, #0]
			rmc_saved = rmc;
 80010ee:	f00c f921 	bl	800d334 <memcpy>
			Debug_printf("\n\n------------ DATA FROM GPS MODULE IS NOT VALID YET ------------\n\n");
		}


        // Clear RMC data after processing
        memset(rmc_str, 0x00, sizeof(rmc_str));
 80010f2:	4832      	ldr	r0, [pc, #200]	@ (80011bc <getRMC+0x120>)
 80010f4:	2280      	movs	r2, #128	@ 0x80
 80010f6:	2100      	movs	r1, #0
 80010f8:	f00b fac8 	bl	800c68c <memset>
        isRMCExist = 0;
 80010fc:	2300      	movs	r3, #0
 80010fe:	6033      	str	r3, [r6, #0]
    }

    // GPS timeout logic
    if (getRMC_time >= 150 && getRMC_time % 150 == 0) {
 8001100:	6823      	ldr	r3, [r4, #0]
 8001102:	2b95      	cmp	r3, #149	@ 0x95
 8001104:	dd0a      	ble.n	800111c <getRMC+0x80>
 8001106:	2296      	movs	r2, #150	@ 0x96
 8001108:	fb93 f1f2 	sdiv	r1, r3, r2
 800110c:	fb02 3311 	mls	r3, r2, r1, r3
 8001110:	b923      	cbnz	r3, 800111c <getRMC+0x80>
        Debug_printf("\n\n-------------------  COLD START GPS module -----------------------\n\n");
 8001112:	482e      	ldr	r0, [pc, #184]	@ (80011cc <getRMC+0x130>)
 8001114:	f004 fbd4 	bl	80058c0 <Debug_printf>
        coldStart();
 8001118:	f7ff fdfc 	bl	8000d14 <coldStart>
    }

    if (getRMC_time >= 500) {
 800111c:	6823      	ldr	r3, [r4, #0]
 800111e:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001122:	db0f      	blt.n	8001144 <getRMC+0xa8>
        GPS_DISABLE();
 8001124:	2201      	movs	r2, #1
 8001126:	2104      	movs	r1, #4
 8001128:	4829      	ldr	r0, [pc, #164]	@ (80011d0 <getRMC+0x134>)
 800112a:	f005 fc0d 	bl	8006948 <HAL_GPIO_WritePin>
        osDelay(500);
 800112e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001132:	f007 fd5b 	bl	8008bec <osDelay>
        GPS_ENABLE();
 8001136:	4826      	ldr	r0, [pc, #152]	@ (80011d0 <getRMC+0x134>)
 8001138:	2200      	movs	r2, #0
 800113a:	2104      	movs	r1, #4
 800113c:	f005 fc04 	bl	8006948 <HAL_GPIO_WritePin>
        getRMC_time = 0;
 8001140:	2300      	movs	r3, #0
 8001142:	6023      	str	r3, [r4, #0]
    }

    Debug_printf("Elapsed Time: %d\n", getRMC_time);
 8001144:	6821      	ldr	r1, [r4, #0]
 8001146:	4823      	ldr	r0, [pc, #140]	@ (80011d4 <getRMC+0x138>)
}
 8001148:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    Debug_printf("Elapsed Time: %d\n", getRMC_time);
 800114c:	f004 bbb8 	b.w	80058c0 <Debug_printf>
        if (handleIncomingChar(c)){
 8001150:	5cf0      	ldrb	r0, [r6, r3]
 8001152:	f7ff ff73 	bl	800103c <handleIncomingChar>
 8001156:	b110      	cbz	r0, 800115e <getRMC+0xc2>
            isRMCExist = 1; // `$GNRMC` sentence is ready
 8001158:	4b15      	ldr	r3, [pc, #84]	@ (80011b0 <getRMC+0x114>)
 800115a:	2201      	movs	r2, #1
 800115c:	601a      	str	r2, [r3, #0]
        lastReadIndex = (lastReadIndex + 1) % GPS_STACK_SIZE;
 800115e:	882b      	ldrh	r3, [r5, #0]
 8001160:	f44f 52b4 	mov.w	r2, #5760	@ 0x1680
 8001164:	3301      	adds	r3, #1
 8001166:	fbb3 f1f2 	udiv	r1, r3, r2
 800116a:	fb02 3311 	mls	r3, r2, r1, r3
 800116e:	802b      	strh	r3, [r5, #0]
 8001170:	e79d      	b.n	80010ae <getRMC+0x12>
		} else if (rmc_saved.isValid) {
 8001172:	4d15      	ldr	r5, [pc, #84]	@ (80011c8 <getRMC+0x12c>)
 8001174:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8001176:	b183      	cbz	r3, 800119a <getRMC+0xfe>
			Debug_printf("\n\n------------ GPS BUG: Sending latest RMC ------------\n\n");
 8001178:	4817      	ldr	r0, [pc, #92]	@ (80011d8 <getRMC+0x13c>)
 800117a:	f004 fba1 	bl	80058c0 <Debug_printf>
			get_RTC_time_date(&rmc_saved);
 800117e:	4628      	mov	r0, r5
 8001180:	f002 fd10 	bl	8003ba4 <get_RTC_time_date>
			sendRMCDataToFlash(&rmc_saved);
 8001184:	4628      	mov	r0, r5
 8001186:	f7ff ff35 	bl	8000ff4 <sendRMCDataToFlash>
			if(rmc_saved.date.Yr >= 24)
 800118a:	69ab      	ldr	r3, [r5, #24]
 800118c:	2b17      	cmp	r3, #23
 800118e:	ddb0      	ble.n	80010f2 <getRMC+0x56>
				count_send_gps++;
 8001190:	4a0c      	ldr	r2, [pc, #48]	@ (80011c4 <getRMC+0x128>)
 8001192:	6813      	ldr	r3, [r2, #0]
 8001194:	3301      	adds	r3, #1
 8001196:	6013      	str	r3, [r2, #0]
 8001198:	e7ab      	b.n	80010f2 <getRMC+0x56>
			Debug_printf("\n\n------------ DATA FROM GPS MODULE IS NOT VALID YET ------------\n\n");
 800119a:	4810      	ldr	r0, [pc, #64]	@ (80011dc <getRMC+0x140>)
 800119c:	f004 fb90 	bl	80058c0 <Debug_printf>
 80011a0:	e7a7      	b.n	80010f2 <getRMC+0x56>
 80011a2:	bf00      	nop
 80011a4:	20006e14 	.word	0x20006e14
 80011a8:	20000284 	.word	0x20000284
 80011ac:	20000444 	.word	0x20000444
 80011b0:	2000038c 	.word	0x2000038c
 80011b4:	20000388 	.word	0x20000388
 80011b8:	200003e8 	.word	0x200003e8
 80011bc:	20001ad4 	.word	0x20001ad4
 80011c0:	080107d7 	.word	0x080107d7
 80011c4:	20000440 	.word	0x20000440
 80011c8:	20000390 	.word	0x20000390
 80011cc:	0801087f 	.word	0x0801087f
 80011d0:	48000800 	.word	0x48000800
 80011d4:	080108c6 	.word	0x080108c6
 80011d8:	08010801 	.word	0x08010801
 80011dc:	0801083b 	.word	0x0801083b

080011e0 <StartGPS>:
////	HAL_UART_Transmit(&huart1, (uint8_t*)"\n",1, 1000);
//}


void StartGPS(void const * argument)
{
 80011e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	Debug_printf("\n\n--------------------STARTING GPS ---------------------\n\n");
 80011e2:	4820      	ldr	r0, [pc, #128]	@ (8001264 <StartGPS+0x84>)

	RingBufferDmaU8_initUSARTRx(&GPSRxDMARing, &huart2, gpsSentence, GPS_STACK_SIZE);
	memset(gpsSentence, 0x00, GPS_STACK_SIZE);
	while(1)
	{
		Debug_printf("\n\n----------------------- Inside GPS ------------------------\n\n");
 80011e4:	4f20      	ldr	r7, [pc, #128]	@ (8001268 <StartGPS+0x88>)
		uint32_t freeStack2 = osThreadGetStackSpace(GPSHandle);
 80011e6:	4e21      	ldr	r6, [pc, #132]	@ (800126c <StartGPS+0x8c>)
		Debug_printf("Thread GPS %p is running low on stack: %04d bytes remaining\n", GPSHandle, freeStack2);
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 80011e8:	4d21      	ldr	r5, [pc, #132]	@ (8001270 <StartGPS+0x90>)
	Debug_printf("\n\n--------------------STARTING GPS ---------------------\n\n");
 80011ea:	f004 fb69 	bl	80058c0 <Debug_printf>
	RingBufferDmaU8_initUSARTRx(&GPSRxDMARing, &huart2, gpsSentence, GPS_STACK_SIZE);
 80011ee:	4a21      	ldr	r2, [pc, #132]	@ (8001274 <StartGPS+0x94>)
 80011f0:	4921      	ldr	r1, [pc, #132]	@ (8001278 <StartGPS+0x98>)
 80011f2:	4822      	ldr	r0, [pc, #136]	@ (800127c <StartGPS+0x9c>)
 80011f4:	f44f 53b4 	mov.w	r3, #5760	@ 0x1680
 80011f8:	f002 fc90 	bl	8003b1c <RingBufferDmaU8_initUSARTRx>
	memset(gpsSentence, 0x00, GPS_STACK_SIZE);
 80011fc:	481d      	ldr	r0, [pc, #116]	@ (8001274 <StartGPS+0x94>)
 80011fe:	f44f 52b4 	mov.w	r2, #5760	@ 0x1680
 8001202:	2100      	movs	r1, #0
 8001204:	f00b fa42 	bl	800c68c <memset>
		Debug_printf("\n\n----------------------- Inside GPS ------------------------\n\n");
 8001208:	4638      	mov	r0, r7
 800120a:	f004 fb59 	bl	80058c0 <Debug_printf>
		uint32_t freeStack2 = osThreadGetStackSpace(GPSHandle);
 800120e:	6830      	ldr	r0, [r6, #0]
		osDelay(500);
		getRMC();
		Debug_printf("\n\n ---------------------------------------------- COUNT SEND GPS: %d ---------------------------------------- \n\n", count_send_gps);
 8001210:	4c1b      	ldr	r4, [pc, #108]	@ (8001280 <StartGPS+0xa0>)
		uint32_t freeStack2 = osThreadGetStackSpace(GPSHandle);
 8001212:	f007 fcd7 	bl	8008bc4 <osThreadGetStackSpace>
		Debug_printf("Thread GPS %p is running low on stack: %04d bytes remaining\n", GPSHandle, freeStack2);
 8001216:	6831      	ldr	r1, [r6, #0]
		uint32_t freeStack2 = osThreadGetStackSpace(GPSHandle);
 8001218:	4602      	mov	r2, r0
		Debug_printf("Thread GPS %p is running low on stack: %04d bytes remaining\n", GPSHandle, freeStack2);
 800121a:	481a      	ldr	r0, [pc, #104]	@ (8001284 <StartGPS+0xa4>)
 800121c:	f004 fb50 	bl	80058c0 <Debug_printf>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 8001220:	2201      	movs	r2, #1
 8001222:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001226:	4628      	mov	r0, r5
 8001228:	f005 fb8e 	bl	8006948 <HAL_GPIO_WritePin>
		osDelay(500);
 800122c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001230:	f007 fcdc 	bl	8008bec <osDelay>
		getRMC();
 8001234:	f7ff ff32 	bl	800109c <getRMC>
		Debug_printf("\n\n ---------------------------------------------- COUNT SEND GPS: %d ---------------------------------------- \n\n", count_send_gps);
 8001238:	6821      	ldr	r1, [r4, #0]
 800123a:	4813      	ldr	r0, [pc, #76]	@ (8001288 <StartGPS+0xa8>)
 800123c:	f004 fb40 	bl	80058c0 <Debug_printf>
		if(count_send_gps == 29)
 8001240:	6823      	ldr	r3, [r4, #0]
 8001242:	2b1d      	cmp	r3, #29
			count_send_gps = 0;
 8001244:	bf08      	it	eq
 8001246:	2300      	moveq	r3, #0
//		Debug_printf("\n------------------------------ GPS SENTENCE ------------------------------\n");
//		Debug_printf((char*) gpsSentence);
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 8001248:	4628      	mov	r0, r5
 800124a:	f04f 0200 	mov.w	r2, #0
 800124e:	f44f 7100 	mov.w	r1, #512	@ 0x200
			count_send_gps = 0;
 8001252:	bf08      	it	eq
 8001254:	6023      	streq	r3, [r4, #0]
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 8001256:	f005 fb77 	bl	8006948 <HAL_GPIO_WritePin>
		osDelay(500);
 800125a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800125e:	f007 fcc5 	bl	8008bec <osDelay>
	{
 8001262:	e7d1      	b.n	8001208 <StartGPS+0x28>
 8001264:	080108d8 	.word	0x080108d8
 8001268:	08010913 	.word	0x08010913
 800126c:	2000556c 	.word	0x2000556c
 8001270:	48000800 	.word	0x48000800
 8001274:	20000444 	.word	0x20000444
 8001278:	20006f24 	.word	0x20006f24
 800127c:	20001ac4 	.word	0x20001ac4
 8001280:	20000440 	.word	0x20000440
 8001284:	08010953 	.word	0x08010953
 8001288:	08010990 	.word	0x08010990

0800128c <create_terminal_registration>:
RMCSTRUCT rmc_jt;
uint8_t terminal_phone_number[6] = {0};
GSM_MAIL_STRUCT receivedDataGSM;


JT808_TerminalRegistration create_terminal_registration(){
 800128c:	b5f0      	push	{r4, r5, r6, r7, lr}
	JT808_TerminalRegistration reg_msg = {
 800128e:	4b11      	ldr	r3, [pc, #68]	@ (80012d4 <create_terminal_registration+0x48>)
JT808_TerminalRegistration create_terminal_registration(){
 8001290:	b091      	sub	sp, #68	@ 0x44
	JT808_TerminalRegistration reg_msg = {
 8001292:	ac01      	add	r4, sp, #4
JT808_TerminalRegistration create_terminal_registration(){
 8001294:	4605      	mov	r5, r0
	JT808_TerminalRegistration reg_msg = {
 8001296:	f103 0738 	add.w	r7, r3, #56	@ 0x38
 800129a:	4622      	mov	r2, r4
 800129c:	6818      	ldr	r0, [r3, #0]
 800129e:	6859      	ldr	r1, [r3, #4]
 80012a0:	4626      	mov	r6, r4
 80012a2:	c603      	stmia	r6!, {r0, r1}
 80012a4:	3308      	adds	r3, #8
 80012a6:	42bb      	cmp	r3, r7
 80012a8:	4634      	mov	r4, r6
 80012aa:	d1f7      	bne.n	800129c <create_terminal_registration+0x10>
 80012ac:	6818      	ldr	r0, [r3, #0]
 80012ae:	6030      	str	r0, [r6, #0]
        .plate_no = {0x00, 0x00, 0x00, 0x00, 0x35, 0x36, 0x37, 0x38, 0x39, 0x31, 0x20, 0x32, 0x39, 0x4C, 0x31, 0x33, 0x34, 0x31, 0x35, 0x34},
        .check_sum = 0x00,  // Placeholder, will be set by the function
        .end_mask = 0x7E
    };

	return reg_msg;
 80012b0:	4613      	mov	r3, r2
 80012b2:	ae0f      	add	r6, sp, #60	@ 0x3c
 80012b4:	462a      	mov	r2, r5
 80012b6:	461c      	mov	r4, r3
 80012b8:	cc03      	ldmia	r4!, {r0, r1}
 80012ba:	42b4      	cmp	r4, r6
 80012bc:	6010      	str	r0, [r2, #0]
 80012be:	6051      	str	r1, [r2, #4]
 80012c0:	4623      	mov	r3, r4
 80012c2:	f102 0208 	add.w	r2, r2, #8
 80012c6:	d1f6      	bne.n	80012b6 <create_terminal_registration+0x2a>
 80012c8:	6820      	ldr	r0, [r4, #0]
 80012ca:	6010      	str	r0, [r2, #0]
}
 80012cc:	4628      	mov	r0, r5
 80012ce:	b011      	add	sp, #68	@ 0x44
 80012d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012d2:	bf00      	nop
 80012d4:	08010590 	.word	0x08010590

080012d8 <create_location_info_report>:


JT808_LocationInfoReport create_location_info_report() {
 80012d8:	b530      	push	{r4, r5, lr}
	JT808_LocationInfoReport location_info = {
 80012da:	2541      	movs	r5, #65	@ 0x41
JT808_LocationInfoReport create_location_info_report() {
 80012dc:	b093      	sub	sp, #76	@ 0x4c
 80012de:	4604      	mov	r4, r0
	JT808_LocationInfoReport location_info = {
 80012e0:	462a      	mov	r2, r5
 80012e2:	4906      	ldr	r1, [pc, #24]	@ (80012fc <create_location_info_report+0x24>)
 80012e4:	a801      	add	r0, sp, #4
 80012e6:	f00c f825 	bl	800d334 <memcpy>
        .additional = {0x01, 0x00, 0xFD, 0x04, 0x03, 0xF1, 0x00, 0x00, 0x0A}, // 01 00 FD 04 03 F1 00 00 0A
        .end_mask = 0x7E                       // 7E
    };
	// Copy the terminal phone number into the structure

    return location_info;
 80012ea:	462a      	mov	r2, r5
 80012ec:	a901      	add	r1, sp, #4
 80012ee:	4620      	mov	r0, r4
 80012f0:	f00c f820 	bl	800d334 <memcpy>
}
 80012f4:	4620      	mov	r0, r4
 80012f6:	b013      	add	sp, #76	@ 0x4c
 80012f8:	bd30      	pop	{r4, r5, pc}
 80012fa:	bf00      	nop
 80012fc:	080105cc 	.word	0x080105cc

08001300 <set_status_bit>:
void clearBit(uint8_t *status, int bitPosition) {
    *status &= ~(1 << bitPosition); // Clear the specific bit to 0
}

void set_status_bit(uint8_t *status_bit){
	if(rmc_jt.lcation.NS == 'N') clearBit(status_bit+3, 2);
 8001300:	4a0a      	ldr	r2, [pc, #40]	@ (800132c <set_status_bit+0x2c>)
    *status &= ~(1 << bitPosition); // Clear the specific bit to 0
 8001302:	78c3      	ldrb	r3, [r0, #3]
	if(rmc_jt.lcation.NS == 'N') clearBit(status_bit+3, 2);
 8001304:	f892 1040 	ldrb.w	r1, [r2, #64]	@ 0x40
 8001308:	294e      	cmp	r1, #78	@ 0x4e
    *status &= ~(1 << bitPosition); // Clear the specific bit to 0
 800130a:	bf0c      	ite	eq
 800130c:	f003 03fb 	andeq.w	r3, r3, #251	@ 0xfb
    *status |= (1 << bitPosition);  // Set the specific bit to 1
 8001310:	f043 0304 	orrne.w	r3, r3, #4
 8001314:	70c3      	strb	r3, [r0, #3]
	else setBit(status_bit+3, 2);

	if(rmc_jt.lcation.EW == 'E') clearBit(status_bit+3, 3);
 8001316:	f892 2050 	ldrb.w	r2, [r2, #80]	@ 0x50
 800131a:	2a45      	cmp	r2, #69	@ 0x45
    *status &= ~(1 << bitPosition); // Clear the specific bit to 0
 800131c:	bf0c      	ite	eq
 800131e:	f003 03f7 	andeq.w	r3, r3, #247	@ 0xf7
    *status |= (1 << bitPosition);  // Set the specific bit to 1
 8001322:	f043 0308 	orrne.w	r3, r3, #8
 8001326:	70c3      	strb	r3, [r0, #3]
	else setBit(status_bit+3, 3);
}
 8001328:	4770      	bx	lr
 800132a:	bf00      	nop
 800132c:	20001bc0 	.word	0x20001bc0

08001330 <send_AT_command>:
    memcpy(message_array, location_info, *array_length);  // Copy struct data into message array

    return message_array;
}

void send_AT_command(const char *command) {
 8001330:	b510      	push	{r4, lr}
 8001332:	4604      	mov	r4, r0
    HAL_UART_Transmit(&huart3, (uint8_t *)command, strlen(command), HAL_MAX_DELAY);
 8001334:	f7fe ffac 	bl	8000290 <strlen>
 8001338:	4621      	mov	r1, r4
 800133a:	b282      	uxth	r2, r0
}
 800133c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_UART_Transmit(&huart3, (uint8_t *)command, strlen(command), HAL_MAX_DELAY);
 8001340:	4802      	ldr	r0, [pc, #8]	@ (800134c <send_AT_command+0x1c>)
 8001342:	f04f 33ff 	mov.w	r3, #4294967295
 8001346:	f007 ba61 	b.w	800880c <HAL_UART_Transmit>
 800134a:	bf00      	nop
 800134c:	20006e9c 	.word	0x20006e9c

08001350 <SIM_UART_ReInitializeRxDMA>:

void SIM_UART_ReInitializeRxDMA(void){
 8001350:	b510      	push	{r4, lr}
	HAL_StatusTypeDef ret = HAL_UART_Abort(&huart3);
 8001352:	4809      	ldr	r0, [pc, #36]	@ (8001378 <SIM_UART_ReInitializeRxDMA+0x28>)
 8001354:	f006 ffed 	bl	8008332 <HAL_UART_Abort>
	if(ret != HAL_OK)
 8001358:	b108      	cbz	r0, 800135e <SIM_UART_ReInitializeRxDMA+0xe>
	{
		Error_Handler();			
 800135a:	f002 ff9a 	bl	8004292 <Error_Handler>
	}		
	osDelay(50);	//	50 is OK
 800135e:	2032      	movs	r0, #50	@ 0x32
 8001360:	f007 fc44 	bl	8008bec <osDelay>
	//memset(gnssDmaRingBufferMemory, 0x20, sizeof(gnssDmaRingBufferMemory));	// insert buffer with space character	
	RingBufferDmaU8_initUSARTRx(&SIMRxDMARing, &huart3, response, SIM_RESPONSE_MAX_SIZE);
}
 8001364:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	RingBufferDmaU8_initUSARTRx(&SIMRxDMARing, &huart3, response, SIM_RESPONSE_MAX_SIZE);
 8001368:	4a04      	ldr	r2, [pc, #16]	@ (800137c <SIM_UART_ReInitializeRxDMA+0x2c>)
 800136a:	4903      	ldr	r1, [pc, #12]	@ (8001378 <SIM_UART_ReInitializeRxDMA+0x28>)
 800136c:	4804      	ldr	r0, [pc, #16]	@ (8001380 <SIM_UART_ReInitializeRxDMA+0x30>)
 800136e:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8001372:	f002 bbd3 	b.w	8003b1c <RingBufferDmaU8_initUSARTRx>
 8001376:	bf00      	nop
 8001378:	20006e9c 	.word	0x20006e9c
 800137c:	20001e78 	.word	0x20001e78
 8001380:	20001e68 	.word	0x20001e68

08001384 <receive_response>:
	}
	return i;
		
}

void receive_response(char *cmd_str) {
 8001384:	b508      	push	{r3, lr}
 8001386:	4601      	mov	r1, r0
	Debug_printf("Response at command: %s\n", cmd_str);
 8001388:	4805      	ldr	r0, [pc, #20]	@ (80013a0 <receive_response+0x1c>)
 800138a:	f004 fa99 	bl	80058c0 <Debug_printf>
	//while(response[1] == '\0'){}
	Debug_printf((char *)response);
 800138e:	4805      	ldr	r0, [pc, #20]	@ (80013a4 <receive_response+0x20>)
 8001390:	f004 fa96 	bl	80058c0 <Debug_printf>
	Debug_printf("\n");
//	osDelay(1000);
}
 8001394:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	Debug_printf("\n");
 8001398:	4803      	ldr	r0, [pc, #12]	@ (80013a8 <receive_response+0x24>)
 800139a:	f004 ba91 	b.w	80058c0 <Debug_printf>
 800139e:	bf00      	nop
 80013a0:	08010a01 	.word	0x08010a01
 80013a4:	20001e78 	.word	0x20001e78
 80013a8:	08011a81 	.word	0x08011a81

080013ac <init_SIM_module>:

void init_SIM_module() {
 80013ac:	b510      	push	{r4, lr}
    
    // Check if module responds
	SIM_ENABLE();
 80013ae:	4c0b      	ldr	r4, [pc, #44]	@ (80013dc <init_SIM_module+0x30>)
 80013b0:	2201      	movs	r2, #1
 80013b2:	4611      	mov	r1, r2
 80013b4:	4620      	mov	r0, r4
 80013b6:	f005 fac7 	bl	8006948 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 80013ba:	2200      	movs	r2, #0
 80013bc:	2102      	movs	r1, #2
 80013be:	4620      	mov	r0, r4
 80013c0:	f005 fac2 	bl	8006948 <HAL_GPIO_WritePin>
	osDelay(2000);
 80013c4:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80013c8:	f007 fc10 	bl	8008bec <osDelay>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 80013cc:	4620      	mov	r0, r4
 80013ce:	2201      	movs	r2, #1
}
 80013d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 80013d4:	2102      	movs	r1, #2
 80013d6:	f005 bab7 	b.w	8006948 <HAL_GPIO_WritePin>
 80013da:	bf00      	nop
 80013dc:	48000800 	.word	0x48000800

080013e0 <reboot_SIM_module>:

void reboot_SIM_module(){
 80013e0:	b510      	push	{r4, lr}
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 80013e2:	4c11      	ldr	r4, [pc, #68]	@ (8001428 <reboot_SIM_module+0x48>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	2102      	movs	r1, #2
 80013e8:	4620      	mov	r0, r4
 80013ea:	f005 faad 	bl	8006948 <HAL_GPIO_WritePin>
	osDelay(1500);
 80013ee:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 80013f2:	f007 fbfb 	bl	8008bec <osDelay>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 80013f6:	2201      	movs	r2, #1
 80013f8:	2102      	movs	r1, #2
 80013fa:	4620      	mov	r0, r4
 80013fc:	f005 faa4 	bl	8006948 <HAL_GPIO_WritePin>
	osDelay(10000);
 8001400:	f242 7010 	movw	r0, #10000	@ 0x2710
 8001404:	f007 fbf2 	bl	8008bec <osDelay>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 8001408:	2200      	movs	r2, #0
 800140a:	2102      	movs	r1, #2
 800140c:	4620      	mov	r0, r4
 800140e:	f005 fa9b 	bl	8006948 <HAL_GPIO_WritePin>
	osDelay(1500);
 8001412:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8001416:	f007 fbe9 	bl	8008bec <osDelay>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 800141a:	4620      	mov	r0, r4
 800141c:	2201      	movs	r2, #1
}
 800141e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 8001422:	2102      	movs	r1, #2
 8001424:	f005 ba90 	b.w	8006948 <HAL_GPIO_WritePin>
 8001428:	48000800 	.word	0x48000800

0800142c <convert_dec_to_hex_value>:

int convert_dec_to_hex_value(int int_value){
    return (int_value /10*16) + (int_value%10);
 800142c:	220a      	movs	r2, #10
 800142e:	fb90 f3f2 	sdiv	r3, r0, r2
 8001432:	fb02 0013 	mls	r0, r2, r3, r0
}
 8001436:	eb00 1003 	add.w	r0, r0, r3, lsl #4
 800143a:	4770      	bx	lr
 800143c:	0000      	movs	r0, r0
	...

08001440 <save_rmc_to_location_info>:


void save_rmc_to_location_info(JT808_LocationInfoReport* location_info){
 8001440:	b570      	push	{r4, r5, r6, lr}
	location_info->timestamp[0] = (uint8_t)convert_dec_to_hex_value(rmc_jt.date.Yr);  // Assign year (0x23)
 8001442:	4d43      	ldr	r5, [pc, #268]	@ (8001550 <save_rmc_to_location_info+0x110>)
void save_rmc_to_location_info(JT808_LocationInfoReport* location_info){
 8001444:	4604      	mov	r4, r0
	location_info->timestamp[0] = (uint8_t)convert_dec_to_hex_value(rmc_jt.date.Yr);  // Assign year (0x23)
 8001446:	69a8      	ldr	r0, [r5, #24]
 8001448:	f7ff fff0 	bl	800142c <convert_dec_to_hex_value>
 800144c:	f884 0023 	strb.w	r0, [r4, #35]	@ 0x23
	location_info->timestamp[1] = (uint8_t)convert_dec_to_hex_value(rmc_jt.date.Mon);          // Assign month (0x11)
 8001450:	6968      	ldr	r0, [r5, #20]
 8001452:	f7ff ffeb 	bl	800142c <convert_dec_to_hex_value>
 8001456:	f884 0024 	strb.w	r0, [r4, #36]	@ 0x24
	location_info->timestamp[2] = (uint8_t)convert_dec_to_hex_value(rmc_jt.date.Day);            // Assign day (0x08)
 800145a:	6928      	ldr	r0, [r5, #16]
 800145c:	f7ff ffe6 	bl	800142c <convert_dec_to_hex_value>
 8001460:	f884 0025 	strb.w	r0, [r4, #37]	@ 0x25
	location_info->timestamp[3] = (uint8_t)convert_dec_to_hex_value(rmc_jt.tim.hour);           // Assign hour (0x14)
 8001464:	6828      	ldr	r0, [r5, #0]
 8001466:	f7ff ffe1 	bl	800142c <convert_dec_to_hex_value>
 800146a:	f884 0026 	strb.w	r0, [r4, #38]	@ 0x26
	location_info->timestamp[4] = (uint8_t)convert_dec_to_hex_value(rmc_jt.tim.min);         // Assign minute (0x55)
 800146e:	6868      	ldr	r0, [r5, #4]
 8001470:	f7ff ffdc 	bl	800142c <convert_dec_to_hex_value>
 8001474:	f884 0027 	strb.w	r0, [r4, #39]	@ 0x27
	location_info->timestamp[5] = (uint8_t)convert_dec_to_hex_value(rmc_jt.tim.sec);  
 8001478:	68a8      	ldr	r0, [r5, #8]
 800147a:	f7ff ffd7 	bl	800142c <convert_dec_to_hex_value>
 800147e:	f884 0028 	strb.w	r0, [r4, #40]	@ 0x28
	double latitude = rmc_jt.lcation.latitude * 1000000;
 8001482:	e9d5 010e 	ldrd	r0, r1, [r5, #56]	@ 0x38
 8001486:	a32e      	add	r3, pc, #184	@ (adr r3, 8001540 <save_rmc_to_location_info+0x100>)
 8001488:	e9d3 2300 	ldrd	r2, r3, [r3]
 800148c:	f7ff f8c4 	bl	8000618 <__aeabi_dmul>
	double longitude = rmc_jt.lcation.longitude * 1000000;
	int32_t latitude_int = (int32_t)round(latitude);  // Convert to integer, rounding if needed
 8001490:	ec41 0b10 	vmov	d0, r0, r1
 8001494:	f00f f828 	bl	80104e8 <round>
 8001498:	ec51 0b10 	vmov	r0, r1, d0
 800149c:	f7ff fb6c 	bl	8000b78 <__aeabi_d2iz>
	double longitude = rmc_jt.lcation.longitude * 1000000;
 80014a0:	a327      	add	r3, pc, #156	@ (adr r3, 8001540 <save_rmc_to_location_info+0x100>)
 80014a2:	e9d3 2300 	ldrd	r2, r3, [r3]
	int32_t latitude_int = (int32_t)round(latitude);  // Convert to integer, rounding if needed
 80014a6:	4606      	mov	r6, r0
	double longitude = rmc_jt.lcation.longitude * 1000000;
 80014a8:	e9d5 0112 	ldrd	r0, r1, [r5, #72]	@ 0x48
 80014ac:	f7ff f8b4 	bl	8000618 <__aeabi_dmul>
	int32_t longitude_int = (int32_t)round(longitude);
 80014b0:	ec41 0b10 	vmov	d0, r0, r1
 80014b4:	f00f f818 	bl	80104e8 <round>
 80014b8:	ec51 0b10 	vmov	r0, r1, d0
 80014bc:	f7ff fb5c 	bl	8000b78 <__aeabi_d2iz>
	
	location_info->latitude[0] = (latitude_int >> 24) & 0xFF;  // Most significant byte
 80014c0:	0e33      	lsrs	r3, r6, #24
 80014c2:	7563      	strb	r3, [r4, #21]
	location_info->latitude[1] = (latitude_int >> 16) & 0xFF;
 80014c4:	1433      	asrs	r3, r6, #16
 80014c6:	75a3      	strb	r3, [r4, #22]
	location_info->latitude[2] = (latitude_int >> 8) & 0xFF;
 80014c8:	1233      	asrs	r3, r6, #8
 80014ca:	75e3      	strb	r3, [r4, #23]
	location_info->latitude[3] = latitude_int & 0xFF;
	
	location_info->longitude[0] = (longitude_int >> 24) & 0xFF;  // Most significant byte
 80014cc:	0e03      	lsrs	r3, r0, #24
 80014ce:	7663      	strb	r3, [r4, #25]
	location_info->longitude[1] = (longitude_int >> 16) & 0xFF;
 80014d0:	1403      	asrs	r3, r0, #16
 80014d2:	76a3      	strb	r3, [r4, #26]
	location_info->longitude[2] = (longitude_int >> 8) & 0xFF;
 80014d4:	1203      	asrs	r3, r0, #8
 80014d6:	76e3      	strb	r3, [r4, #27]
	location_info->longitude[3] = longitude_int & 0xFF;
 80014d8:	7720      	strb	r0, [r4, #28]
	location_info->latitude[3] = latitude_int & 0xFF;
 80014da:	7626      	strb	r6, [r4, #24]
	
	int speed = round(rmc_jt.speed * 10 * 1.852);
 80014dc:	ed95 7a0a 	vldr	s14, [r5, #40]	@ 0x28
 80014e0:	eef2 7a04 	vmov.f32	s15, #36	@ 0x41200000  10.0
 80014e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014e8:	ee17 0a90 	vmov	r0, s15
 80014ec:	f7ff f83c 	bl	8000568 <__aeabi_f2d>
 80014f0:	a315      	add	r3, pc, #84	@ (adr r3, 8001548 <save_rmc_to_location_info+0x108>)
 80014f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014f6:	f7ff f88f 	bl	8000618 <__aeabi_dmul>
 80014fa:	ec41 0b10 	vmov	d0, r0, r1
 80014fe:	f00e fff3 	bl	80104e8 <round>
 8001502:	ec51 0b10 	vmov	r0, r1, d0
 8001506:	f7ff fb37 	bl	8000b78 <__aeabi_d2iz>
	location_info->speed[0] = (speed >> 8) & 0xFF;
 800150a:	1203      	asrs	r3, r0, #8
 800150c:	77e3      	strb	r3, [r4, #31]
	location_info->speed[1] =  speed & 0xFF;
 800150e:	f884 0020 	strb.w	r0, [r4, #32]
	
	int direction = round(rmc_jt.course);
 8001512:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 8001514:	f7ff f828 	bl	8000568 <__aeabi_f2d>
 8001518:	ec41 0b10 	vmov	d0, r0, r1
 800151c:	f00e ffe4 	bl	80104e8 <round>
 8001520:	ec51 0b10 	vmov	r0, r1, d0
 8001524:	f7ff fb28 	bl	8000b78 <__aeabi_d2iz>
	location_info->direction[0] = (direction >> 8) & 0xFF;
 8001528:	1203      	asrs	r3, r0, #8
	location_info->direction[1] =  direction & 0xFF;
 800152a:	f884 0022 	strb.w	r0, [r4, #34]	@ 0x22
	location_info->direction[0] = (direction >> 8) & 0xFF;
 800152e:	f884 3021 	strb.w	r3, [r4, #33]	@ 0x21
	
	set_status_bit(location_info->status);
 8001532:	f104 0011 	add.w	r0, r4, #17
}
 8001536:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	set_status_bit(location_info->status);
 800153a:	f7ff bee1 	b.w	8001300 <set_status_bit>
 800153e:	bf00      	nop
 8001540:	00000000 	.word	0x00000000
 8001544:	412e8480 	.word	0x412e8480
 8001548:	c083126f 	.word	0xc083126f
 800154c:	3ffda1ca 	.word	0x3ffda1ca
 8001550:	20001bc0 	.word	0x20001bc0

08001554 <first_check_SIM>:

//AT
int first_check_SIM()
{
 8001554:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8001556:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 800155a:	2100      	movs	r1, #0
 800155c:	4847      	ldr	r0, [pc, #284]	@ (800167c <first_check_SIM+0x128>)
	SIM_UART_ReInitializeRxDMA();
	const char *substring = "PB DONE";
	int count_check = 0;
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
	SIM_UART_ReInitializeRxDMA();
	while(strstr((char *) response, substring) == NULL)
 800155e:	4d48      	ldr	r5, [pc, #288]	@ (8001680 <first_check_SIM+0x12c>)
 8001560:	4c46      	ldr	r4, [pc, #280]	@ (800167c <first_check_SIM+0x128>)
	{
		receive_response("WAITING FOR SIM MODULE TO BE READY\n");
 8001562:	4e48      	ldr	r6, [pc, #288]	@ (8001684 <first_check_SIM+0x130>)
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8001564:	f00b f892 	bl	800c68c <memset>
	SIM_UART_ReInitializeRxDMA();
 8001568:	f7ff fef2 	bl	8001350 <SIM_UART_ReInitializeRxDMA>
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 800156c:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8001570:	2100      	movs	r1, #0
 8001572:	4842      	ldr	r0, [pc, #264]	@ (800167c <first_check_SIM+0x128>)
 8001574:	f00b f88a 	bl	800c68c <memset>
	SIM_UART_ReInitializeRxDMA();
 8001578:	f7ff feea 	bl	8001350 <SIM_UART_ReInitializeRxDMA>
	while(strstr((char *) response, substring) == NULL)
 800157c:	4629      	mov	r1, r5
 800157e:	4620      	mov	r0, r4
 8001580:	f00b f8d4 	bl	800c72c <strstr>
 8001584:	2800      	cmp	r0, #0
 8001586:	d056      	beq.n	8001636 <first_check_SIM+0xe2>
			SIM_UART_ReInitializeRxDMA();
			return 0;
		}
		osDelay(200);
	}
	receive_response("WAITING FOR SIM MODULE TO BE READY\n");
 8001588:	483e      	ldr	r0, [pc, #248]	@ (8001684 <first_check_SIM+0x130>)
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
	SIM_UART_ReInitializeRxDMA();
	count_check = 0;

	send_AT_command(FIRST_CHECK);
	while(strstr((char *) response, CHECK_RESPONSE) != NULL){
 800158a:	4e3f      	ldr	r6, [pc, #252]	@ (8001688 <first_check_SIM+0x134>)
 800158c:	4d3b      	ldr	r5, [pc, #236]	@ (800167c <first_check_SIM+0x128>)
		receive_response("First check SIM MODULE\n");
 800158e:	4f3f      	ldr	r7, [pc, #252]	@ (800168c <first_check_SIM+0x138>)
	receive_response("WAITING FOR SIM MODULE TO BE READY\n");
 8001590:	f7ff fef8 	bl	8001384 <receive_response>
	osDelay(1000);
 8001594:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001598:	f007 fb28 	bl	8008bec <osDelay>
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 800159c:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 80015a0:	2100      	movs	r1, #0
 80015a2:	4836      	ldr	r0, [pc, #216]	@ (800167c <first_check_SIM+0x128>)
 80015a4:	f00b f872 	bl	800c68c <memset>
	SIM_UART_ReInitializeRxDMA();
 80015a8:	f7ff fed2 	bl	8001350 <SIM_UART_ReInitializeRxDMA>
	send_AT_command(FIRST_CHECK);
 80015ac:	4838      	ldr	r0, [pc, #224]	@ (8001690 <first_check_SIM+0x13c>)
 80015ae:	f7ff febf 	bl	8001330 <send_AT_command>
	while(strstr((char *) response, CHECK_RESPONSE) != NULL){
 80015b2:	4631      	mov	r1, r6
 80015b4:	4628      	mov	r0, r5
 80015b6:	f00b f8b9 	bl	800c72c <strstr>
 80015ba:	4604      	mov	r4, r0
 80015bc:	2800      	cmp	r0, #0
 80015be:	d145      	bne.n	800164c <first_check_SIM+0xf8>
			SIM_UART_ReInitializeRxDMA();
			return 0;
		}
		osDelay(1000);
	}
	receive_response("First check SIM MODULE\n");
 80015c0:	4832      	ldr	r0, [pc, #200]	@ (800168c <first_check_SIM+0x138>)
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
	SIM_UART_ReInitializeRxDMA();
	count_check = 0;

	send_AT_command("AT+CPAS\r\n");
	while(strstr((char *) response, CHECK_RESPONSE) != NULL){
 80015c2:	4e31      	ldr	r6, [pc, #196]	@ (8001688 <first_check_SIM+0x134>)
 80015c4:	4d2d      	ldr	r5, [pc, #180]	@ (800167c <first_check_SIM+0x128>)
		receive_response("Check status of SIM MODULE\n");
 80015c6:	4f33      	ldr	r7, [pc, #204]	@ (8001694 <first_check_SIM+0x140>)
	receive_response("First check SIM MODULE\n");
 80015c8:	f7ff fedc 	bl	8001384 <receive_response>
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 80015cc:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 80015d0:	4621      	mov	r1, r4
 80015d2:	482a      	ldr	r0, [pc, #168]	@ (800167c <first_check_SIM+0x128>)
 80015d4:	f00b f85a 	bl	800c68c <memset>
	SIM_UART_ReInitializeRxDMA();
 80015d8:	f7ff feba 	bl	8001350 <SIM_UART_ReInitializeRxDMA>
	send_AT_command("AT+CPAS\r\n");
 80015dc:	482e      	ldr	r0, [pc, #184]	@ (8001698 <first_check_SIM+0x144>)
 80015de:	f7ff fea7 	bl	8001330 <send_AT_command>
	while(strstr((char *) response, CHECK_RESPONSE) != NULL){
 80015e2:	4631      	mov	r1, r6
 80015e4:	4628      	mov	r0, r5
 80015e6:	f00b f8a1 	bl	800c72c <strstr>
 80015ea:	4604      	mov	r4, r0
 80015ec:	bbb0      	cbnz	r0, 800165c <first_check_SIM+0x108>
			SIM_UART_ReInitializeRxDMA();
			return 0;
		}
		osDelay(1000);
	}
	receive_response("Check status of SIM MODULE\n");
 80015ee:	4829      	ldr	r0, [pc, #164]	@ (8001694 <first_check_SIM+0x140>)
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
	SIM_UART_ReInitializeRxDMA();
	count_check = 0;

	send_AT_command("AT+CMEE=2\r\n");
	while(strstr((char *) response, CHECK_RESPONSE) != NULL){
 80015f0:	4e25      	ldr	r6, [pc, #148]	@ (8001688 <first_check_SIM+0x134>)
 80015f2:	4d22      	ldr	r5, [pc, #136]	@ (800167c <first_check_SIM+0x128>)
		receive_response("Check enable result code\n");
 80015f4:	4f29      	ldr	r7, [pc, #164]	@ (800169c <first_check_SIM+0x148>)
	receive_response("Check status of SIM MODULE\n");
 80015f6:	f7ff fec5 	bl	8001384 <receive_response>
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 80015fa:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 80015fe:	4621      	mov	r1, r4
 8001600:	481e      	ldr	r0, [pc, #120]	@ (800167c <first_check_SIM+0x128>)
 8001602:	f00b f843 	bl	800c68c <memset>
	SIM_UART_ReInitializeRxDMA();
 8001606:	f7ff fea3 	bl	8001350 <SIM_UART_ReInitializeRxDMA>
	send_AT_command("AT+CMEE=2\r\n");
 800160a:	4825      	ldr	r0, [pc, #148]	@ (80016a0 <first_check_SIM+0x14c>)
 800160c:	f7ff fe90 	bl	8001330 <send_AT_command>
	while(strstr((char *) response, CHECK_RESPONSE) != NULL){
 8001610:	4631      	mov	r1, r6
 8001612:	4628      	mov	r0, r5
 8001614:	f00b f88a 	bl	800c72c <strstr>
 8001618:	4604      	mov	r4, r0
 800161a:	bb38      	cbnz	r0, 800166c <first_check_SIM+0x118>
			SIM_UART_ReInitializeRxDMA();
			return 0;
		}
		osDelay(1000);
	}
	receive_response("Check enable result code\n");
 800161c:	481f      	ldr	r0, [pc, #124]	@ (800169c <first_check_SIM+0x148>)
 800161e:	f7ff feb1 	bl	8001384 <receive_response>
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8001622:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8001626:	4621      	mov	r1, r4
 8001628:	4814      	ldr	r0, [pc, #80]	@ (800167c <first_check_SIM+0x128>)
 800162a:	f00b f82f 	bl	800c68c <memset>
	SIM_UART_ReInitializeRxDMA();
 800162e:	f7ff fe8f 	bl	8001350 <SIM_UART_ReInitializeRxDMA>
	count_check = 0;

	return 1;
}
 8001632:	2001      	movs	r0, #1
 8001634:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		receive_response("WAITING FOR SIM MODULE TO BE READY\n");
 8001636:	4630      	mov	r0, r6
 8001638:	f7ff fea4 	bl	8001384 <receive_response>
		osDelay(1000);
 800163c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001640:	f007 fad4 	bl	8008bec <osDelay>
		osDelay(200);
 8001644:	20c8      	movs	r0, #200	@ 0xc8
 8001646:	f007 fad1 	bl	8008bec <osDelay>
 800164a:	e797      	b.n	800157c <first_check_SIM+0x28>
		receive_response("First check SIM MODULE\n");
 800164c:	4638      	mov	r0, r7
 800164e:	f7ff fe99 	bl	8001384 <receive_response>
		osDelay(1000);
 8001652:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001656:	f007 fac9 	bl	8008bec <osDelay>
 800165a:	e7aa      	b.n	80015b2 <first_check_SIM+0x5e>
		receive_response("Check status of SIM MODULE\n");
 800165c:	4638      	mov	r0, r7
 800165e:	f7ff fe91 	bl	8001384 <receive_response>
		osDelay(1000);
 8001662:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001666:	f007 fac1 	bl	8008bec <osDelay>
 800166a:	e7ba      	b.n	80015e2 <first_check_SIM+0x8e>
		receive_response("Check enable result code\n");
 800166c:	4638      	mov	r0, r7
 800166e:	f7ff fe89 	bl	8001384 <receive_response>
		osDelay(1000);
 8001672:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001676:	f007 fab9 	bl	8008bec <osDelay>
 800167a:	e7c9      	b.n	8001610 <first_check_SIM+0xbc>
 800167c:	20001e78 	.word	0x20001e78
 8001680:	08010a3e 	.word	0x08010a3e
 8001684:	08010a1a 	.word	0x08010a1a
 8001688:	08010e7a 	.word	0x08010e7a
 800168c:	08010a4b 	.word	0x08010a4b
 8001690:	08010a46 	.word	0x08010a46
 8001694:	08010a6d 	.word	0x08010a6d
 8001698:	08010a63 	.word	0x08010a63
 800169c:	08010a95 	.word	0x08010a95
 80016a0:	08010a89 	.word	0x08010a89

080016a4 <extract_last_12_digits_bcd>:


void extract_last_12_digits_bcd(const uint8_t *response, uint8_t *output) {
 80016a4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80016a6:	460d      	mov	r5, r1
	uint8_t output_buffer[10];
	const uint8_t *start = response;
	while (*start && !(start[0] == 'A' && start[1] == 'T' && start[2] == '+' &&
 80016a8:	4604      	mov	r4, r0
 80016aa:	f810 3b01 	ldrb.w	r3, [r0], #1
 80016ae:	b1cb      	cbz	r3, 80016e4 <extract_last_12_digits_bcd+0x40>
 80016b0:	2b41      	cmp	r3, #65	@ 0x41
 80016b2:	d1f9      	bne.n	80016a8 <extract_last_12_digits_bcd+0x4>
 80016b4:	7803      	ldrb	r3, [r0, #0]
 80016b6:	2b54      	cmp	r3, #84	@ 0x54
 80016b8:	d1f6      	bne.n	80016a8 <extract_last_12_digits_bcd+0x4>
 80016ba:	7843      	ldrb	r3, [r0, #1]
 80016bc:	2b2b      	cmp	r3, #43	@ 0x2b
 80016be:	d1f3      	bne.n	80016a8 <extract_last_12_digits_bcd+0x4>
 80016c0:	7883      	ldrb	r3, [r0, #2]
 80016c2:	2b43      	cmp	r3, #67	@ 0x43
 80016c4:	d1f0      	bne.n	80016a8 <extract_last_12_digits_bcd+0x4>
					   start[3] == 'C' && start[4] == 'G' && start[5] == 'S' &&
 80016c6:	78c3      	ldrb	r3, [r0, #3]
 80016c8:	2b47      	cmp	r3, #71	@ 0x47
 80016ca:	d1ed      	bne.n	80016a8 <extract_last_12_digits_bcd+0x4>
 80016cc:	7903      	ldrb	r3, [r0, #4]
 80016ce:	2b53      	cmp	r3, #83	@ 0x53
 80016d0:	d1ea      	bne.n	80016a8 <extract_last_12_digits_bcd+0x4>
 80016d2:	7943      	ldrb	r3, [r0, #5]
 80016d4:	2b4e      	cmp	r3, #78	@ 0x4e
 80016d6:	d1e7      	bne.n	80016a8 <extract_last_12_digits_bcd+0x4>
					   start[6] == 'N' && start[7] == '=' && start[8] == '1')) {
 80016d8:	7983      	ldrb	r3, [r0, #6]
 80016da:	2b3d      	cmp	r3, #61	@ 0x3d
 80016dc:	d1e4      	bne.n	80016a8 <extract_last_12_digits_bcd+0x4>
	while (*start && !(start[0] == 'A' && start[1] == 'T' && start[2] == '+' &&
 80016de:	79c3      	ldrb	r3, [r0, #7]
 80016e0:	2b31      	cmp	r3, #49	@ 0x31
 80016e2:	d1e1      	bne.n	80016a8 <extract_last_12_digits_bcd+0x4>
		start++;
	}
//	uart_transmit_string(&huart1, (uint8_t *)"Inside Checking terminal Number: ");
//	uart_transmit_string( &huart1,(uint8_t *) start);
	Debug_printf("Inside Checking terminal Number: ");
 80016e4:	4821      	ldr	r0, [pc, #132]	@ (800176c <extract_last_12_digits_bcd+0xc8>)
 80016e6:	f004 f8eb 	bl	80058c0 <Debug_printf>
	Debug_printf((char*)start);
 80016ea:	4620      	mov	r0, r4
 80016ec:	f004 f8e8 	bl	80058c0 <Debug_printf>
	// If "AT+CGSN=1" is found, move to the start of the number (skip "AT+CGSN=1 ")
	if (*start) {
 80016f0:	7823      	ldrb	r3, [r4, #0]
 80016f2:	b96b      	cbnz	r3, 8001710 <extract_last_12_digits_bcd+0x6c>
			for (int i = 0; i < 6; i++) {
				output[i] = ((last_12[i * 2] - '0') << 4) | (last_12[i * 2 + 1] - '0');
			}
		}
	}
	uart_transmit_string(&huart1, (uint8_t *)" Check terminal Number-0: ");
 80016f4:	491e      	ldr	r1, [pc, #120]	@ (8001770 <extract_last_12_digits_bcd+0xcc>)
 80016f6:	481f      	ldr	r0, [pc, #124]	@ (8001774 <extract_last_12_digits_bcd+0xd0>)
 80016f8:	f004 f8be 	bl	8005878 <uart_transmit_string>
	uart_transmit_string(&huart1, output);
 80016fc:	4629      	mov	r1, r5
 80016fe:	481d      	ldr	r0, [pc, #116]	@ (8001774 <extract_last_12_digits_bcd+0xd0>)
 8001700:	f004 f8ba 	bl	8005878 <uart_transmit_string>
	uart_transmit_string(&huart1, (uint8_t *)" \n");
 8001704:	491c      	ldr	r1, [pc, #112]	@ (8001778 <extract_last_12_digits_bcd+0xd4>)
 8001706:	481b      	ldr	r0, [pc, #108]	@ (8001774 <extract_last_12_digits_bcd+0xd0>)
 8001708:	f004 f8b6 	bl	8005878 <uart_transmit_string>
}
 800170c:	b004      	add	sp, #16
 800170e:	bd70      	pop	{r4, r5, r6, pc}
		start += 10;  // Move pointer past "AT+CGSN=1 "
 8001710:	340a      	adds	r4, #10
		while (*start && (*start < '0' || *start > '9')) {
 8001712:	7821      	ldrb	r1, [r4, #0]
 8001714:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8001718:	4623      	mov	r3, r4
 800171a:	b2d2      	uxtb	r2, r2
 800171c:	3401      	adds	r4, #1
 800171e:	b109      	cbz	r1, 8001724 <extract_last_12_digits_bcd+0x80>
 8001720:	2a09      	cmp	r2, #9
 8001722:	d8f6      	bhi.n	8001712 <extract_last_12_digits_bcd+0x6e>
 8001724:	461a      	mov	r2, r3
		while (*end && (*end >= '0' && *end <= '9')) {
 8001726:	4616      	mov	r6, r2
 8001728:	f812 1b01 	ldrb.w	r1, [r2], #1
 800172c:	3930      	subs	r1, #48	@ 0x30
 800172e:	2909      	cmp	r1, #9
 8001730:	d9f9      	bls.n	8001726 <extract_last_12_digits_bcd+0x82>
 8001732:	1af4      	subs	r4, r6, r3
		uart_transmit_string(&huart1, (uint8_t *)"Inside Checking terminal Number-2: LEN ");
 8001734:	4911      	ldr	r1, [pc, #68]	@ (800177c <extract_last_12_digits_bcd+0xd8>)
 8001736:	480f      	ldr	r0, [pc, #60]	@ (8001774 <extract_last_12_digits_bcd+0xd0>)
 8001738:	f004 f89e 	bl	8005878 <uart_transmit_string>
		snprintf((char*)output_buffer, 10, "%d", digit_count);
 800173c:	4a10      	ldr	r2, [pc, #64]	@ (8001780 <extract_last_12_digits_bcd+0xdc>)
 800173e:	4623      	mov	r3, r4
 8001740:	210a      	movs	r1, #10
 8001742:	a801      	add	r0, sp, #4
 8001744:	f00a fea6 	bl	800c494 <sniprintf>
		if (digit_count >= 12) {
 8001748:	2c0b      	cmp	r4, #11
 800174a:	d9d3      	bls.n	80016f4 <extract_last_12_digits_bcd+0x50>
			const uint8_t *last_12 = end - 12;
 800174c:	f1a6 030c 	sub.w	r3, r6, #12
 8001750:	1e68      	subs	r0, r5, #1
				output[i] = ((last_12[i * 2] - '0') << 4) | (last_12[i * 2 + 1] - '0');
 8001752:	7819      	ldrb	r1, [r3, #0]
 8001754:	785a      	ldrb	r2, [r3, #1]
 8001756:	3930      	subs	r1, #48	@ 0x30
 8001758:	3a30      	subs	r2, #48	@ 0x30
			for (int i = 0; i < 6; i++) {
 800175a:	3302      	adds	r3, #2
				output[i] = ((last_12[i * 2] - '0') << 4) | (last_12[i * 2 + 1] - '0');
 800175c:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
			for (int i = 0; i < 6; i++) {
 8001760:	429e      	cmp	r6, r3
				output[i] = ((last_12[i * 2] - '0') << 4) | (last_12[i * 2 + 1] - '0');
 8001762:	f800 2f01 	strb.w	r2, [r0, #1]!
			for (int i = 0; i < 6; i++) {
 8001766:	d1f4      	bne.n	8001752 <extract_last_12_digits_bcd+0xae>
 8001768:	e7c4      	b.n	80016f4 <extract_last_12_digits_bcd+0x50>
 800176a:	bf00      	nop
 800176c:	08010aaf 	.word	0x08010aaf
 8001770:	08010ad1 	.word	0x08010ad1
 8001774:	20006fac 	.word	0x20006fac
 8001778:	08012ad8 	.word	0x08012ad8
 800177c:	08010aec 	.word	0x08010aec
 8001780:	080110cc 	.word	0x080110cc

08001784 <has_number>:
    }
    return -1; // Failure
}

int has_number(const char *str) {
    while (*str) {
 8001784:	1e43      	subs	r3, r0, #1
 8001786:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 800178a:	b900      	cbnz	r0, 800178e <has_number+0xa>
 800178c:	4770      	bx	lr
        if (*str >= '0' && *str <= '9') {
 800178e:	3830      	subs	r0, #48	@ 0x30
 8001790:	2809      	cmp	r0, #9
 8001792:	d8f8      	bhi.n	8001786 <has_number+0x2>
            return 1; // Found a digit
 8001794:	2001      	movs	r0, #1
        }
        str++;
    }
    return 0; // No digits found
}
 8001796:	4770      	bx	lr

08001798 <check_SIM_ready>:

int check_SIM_ready(){
 8001798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	const int TIME_LIMIT = 5;
	int count_check_sim = 0;
	//GET IMEI
	send_AT_command(GET_IMEI);
 800179a:	488e      	ldr	r0, [pc, #568]	@ (80019d4 <check_SIM_ready+0x23c>)
	while(strstr((char *) response, CHECK_RESPONSE) == NULL && has_number((char*) response) == 0){
 800179c:	4e8e      	ldr	r6, [pc, #568]	@ (80019d8 <check_SIM_ready+0x240>)
 800179e:	4d8f      	ldr	r5, [pc, #572]	@ (80019dc <check_SIM_ready+0x244>)
		if (count_check_sim >= 5){
			memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
			SIM_UART_ReInitializeRxDMA();
			return 0;
		}
		receive_response("Check IMEI-0:\n");
 80017a0:	4f8f      	ldr	r7, [pc, #572]	@ (80019e0 <check_SIM_ready+0x248>)
	send_AT_command(GET_IMEI);
 80017a2:	f7ff fdc5 	bl	8001330 <send_AT_command>
	while(strstr((char *) response, CHECK_RESPONSE) == NULL && has_number((char*) response) == 0){
 80017a6:	2405      	movs	r4, #5
 80017a8:	4631      	mov	r1, r6
 80017aa:	4628      	mov	r0, r5
 80017ac:	f00a ffbe 	bl	800c72c <strstr>
 80017b0:	b928      	cbnz	r0, 80017be <check_SIM_ready+0x26>
 80017b2:	4628      	mov	r0, r5
 80017b4:	f7ff ffe6 	bl	8001784 <has_number>
 80017b8:	2800      	cmp	r0, #0
 80017ba:	f000 80dc 	beq.w	8001976 <check_SIM_ready+0x1de>
		osDelay(1000);
	}
	receive_response("Check IMEI-0:\n");
 80017be:	4888      	ldr	r0, [pc, #544]	@ (80019e0 <check_SIM_ready+0x248>)
	count_check_sim = 0;

	// Check if SIM is ready
	send_AT_command(CHECK_SIM_READY);
	osDelay(100);
	while(strstr((char *) response, CHECK_RESPONSE) == NULL){
 80017c0:	4e85      	ldr	r6, [pc, #532]	@ (80019d8 <check_SIM_ready+0x240>)
 80017c2:	4d86      	ldr	r5, [pc, #536]	@ (80019dc <check_SIM_ready+0x244>)
		receive_response("Check SIM\n");
 80017c4:	4f87      	ldr	r7, [pc, #540]	@ (80019e4 <check_SIM_ready+0x24c>)
	receive_response("Check IMEI-0:\n");
 80017c6:	f7ff fddd 	bl	8001384 <receive_response>
	extract_last_12_digits_bcd(response, terminal_phone_number);
 80017ca:	4987      	ldr	r1, [pc, #540]	@ (80019e8 <check_SIM_ready+0x250>)
 80017cc:	4883      	ldr	r0, [pc, #524]	@ (80019dc <check_SIM_ready+0x244>)
 80017ce:	f7ff ff69 	bl	80016a4 <extract_last_12_digits_bcd>
	uart_transmit_string(&huart1, (uint8_t *)" Check terminal Number: ");
 80017d2:	4986      	ldr	r1, [pc, #536]	@ (80019ec <check_SIM_ready+0x254>)
 80017d4:	4886      	ldr	r0, [pc, #536]	@ (80019f0 <check_SIM_ready+0x258>)
 80017d6:	f004 f84f 	bl	8005878 <uart_transmit_string>
	uart_transmit_string(&huart1, terminal_phone_number);
 80017da:	4983      	ldr	r1, [pc, #524]	@ (80019e8 <check_SIM_ready+0x250>)
 80017dc:	4884      	ldr	r0, [pc, #528]	@ (80019f0 <check_SIM_ready+0x258>)
 80017de:	f004 f84b 	bl	8005878 <uart_transmit_string>
	uart_transmit_string(&huart1, (uint8_t *)" \n");
 80017e2:	4984      	ldr	r1, [pc, #528]	@ (80019f4 <check_SIM_ready+0x25c>)
 80017e4:	4882      	ldr	r0, [pc, #520]	@ (80019f0 <check_SIM_ready+0x258>)
 80017e6:	f004 f847 	bl	8005878 <uart_transmit_string>
	osDelay(100);
 80017ea:	2064      	movs	r0, #100	@ 0x64
 80017ec:	f007 f9fe 	bl	8008bec <osDelay>
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 80017f0:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 80017f4:	2100      	movs	r1, #0
 80017f6:	4879      	ldr	r0, [pc, #484]	@ (80019dc <check_SIM_ready+0x244>)
 80017f8:	f00a ff48 	bl	800c68c <memset>
	SIM_UART_ReInitializeRxDMA();
 80017fc:	f7ff fda8 	bl	8001350 <SIM_UART_ReInitializeRxDMA>
	send_AT_command(CHECK_SIM_READY);
 8001800:	487d      	ldr	r0, [pc, #500]	@ (80019f8 <check_SIM_ready+0x260>)
 8001802:	f7ff fd95 	bl	8001330 <send_AT_command>
	osDelay(100);
 8001806:	2064      	movs	r0, #100	@ 0x64
 8001808:	f007 f9f0 	bl	8008bec <osDelay>
	while(strstr((char *) response, CHECK_RESPONSE) == NULL){
 800180c:	2405      	movs	r4, #5
 800180e:	4631      	mov	r1, r6
 8001810:	4628      	mov	r0, r5
 8001812:	f00a ff8b 	bl	800c72c <strstr>
 8001816:	2800      	cmp	r0, #0
 8001818:	f000 80c1 	beq.w	800199e <check_SIM_ready+0x206>
			memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
			SIM_UART_ReInitializeRxDMA();
			return 0;
		}
	}
	receive_response("Check SIM\n");
 800181c:	4871      	ldr	r0, [pc, #452]	@ (80019e4 <check_SIM_ready+0x24c>)
	count_check_sim = 0;


	//GET SIM CCID
	send_AT_command(GET_SIM_CCID);
	while(strstr((char *) response, "+QCCID:") == NULL){
 800181e:	4e77      	ldr	r6, [pc, #476]	@ (80019fc <check_SIM_ready+0x264>)
 8001820:	4d6e      	ldr	r5, [pc, #440]	@ (80019dc <check_SIM_ready+0x244>)
		receive_response("Check SIM CCID\n");
 8001822:	4f77      	ldr	r7, [pc, #476]	@ (8001a00 <check_SIM_ready+0x268>)
	receive_response("Check SIM\n");
 8001824:	f7ff fdae 	bl	8001384 <receive_response>
	osDelay(100);
 8001828:	2064      	movs	r0, #100	@ 0x64
 800182a:	f007 f9df 	bl	8008bec <osDelay>
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 800182e:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8001832:	2100      	movs	r1, #0
 8001834:	4869      	ldr	r0, [pc, #420]	@ (80019dc <check_SIM_ready+0x244>)
 8001836:	f00a ff29 	bl	800c68c <memset>
	SIM_UART_ReInitializeRxDMA();
 800183a:	f7ff fd89 	bl	8001350 <SIM_UART_ReInitializeRxDMA>
	osDelay(100);
 800183e:	2064      	movs	r0, #100	@ 0x64
 8001840:	f007 f9d4 	bl	8008bec <osDelay>
	send_AT_command(GET_SIM_CCID);
 8001844:	486f      	ldr	r0, [pc, #444]	@ (8001a04 <check_SIM_ready+0x26c>)
 8001846:	f7ff fd73 	bl	8001330 <send_AT_command>
	while(strstr((char *) response, "+QCCID:") == NULL){
 800184a:	2405      	movs	r4, #5
 800184c:	4631      	mov	r1, r6
 800184e:	4628      	mov	r0, r5
 8001850:	f00a ff6c 	bl	800c72c <strstr>
 8001854:	2800      	cmp	r0, #0
 8001856:	f000 80ad 	beq.w	80019b4 <check_SIM_ready+0x21c>
			memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
			SIM_UART_ReInitializeRxDMA();
			return 0;
		}
	}
	receive_response("Check SIM CCID\n");
 800185a:	4869      	ldr	r0, [pc, #420]	@ (8001a00 <check_SIM_ready+0x268>)
	send_AT_command(CONFIGURE_CS_SERVICE);
	char *first_pointer = NULL;
	char *second_pointer = NULL;
	receive_response("Configuring Network Registration Status (CS Service)");
	while (first_pointer == NULL || second_pointer == NULL){
		send_AT_command("AT+CREG?\r\n");
 800185c:	4d6a      	ldr	r5, [pc, #424]	@ (8001a08 <check_SIM_ready+0x270>)
		osDelay(150);
		receive_response("Check Network Registration Status (CS Service)\n");
 800185e:	4e6b      	ldr	r6, [pc, #428]	@ (8001a0c <check_SIM_ready+0x274>)
		osDelay(1000);
		osDelay(300);
		first_pointer = strstr((char*)response, CHECK_RESPONSE);
 8001860:	4c5d      	ldr	r4, [pc, #372]	@ (80019d8 <check_SIM_ready+0x240>)
	receive_response("Check SIM CCID\n");
 8001862:	f7ff fd8f 	bl	8001384 <receive_response>
	osDelay(100);
 8001866:	2064      	movs	r0, #100	@ 0x64
 8001868:	f007 f9c0 	bl	8008bec <osDelay>
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 800186c:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8001870:	2100      	movs	r1, #0
 8001872:	485a      	ldr	r0, [pc, #360]	@ (80019dc <check_SIM_ready+0x244>)
 8001874:	f00a ff0a 	bl	800c68c <memset>
	SIM_UART_ReInitializeRxDMA();
 8001878:	f7ff fd6a 	bl	8001350 <SIM_UART_ReInitializeRxDMA>
	send_AT_command(CONFIGURE_CS_SERVICE);
 800187c:	4864      	ldr	r0, [pc, #400]	@ (8001a10 <check_SIM_ready+0x278>)
 800187e:	f7ff fd57 	bl	8001330 <send_AT_command>
	receive_response("Configuring Network Registration Status (CS Service)");
 8001882:	4864      	ldr	r0, [pc, #400]	@ (8001a14 <check_SIM_ready+0x27c>)
 8001884:	f7ff fd7e 	bl	8001384 <receive_response>
		send_AT_command("AT+CREG?\r\n");
 8001888:	4628      	mov	r0, r5
 800188a:	f7ff fd51 	bl	8001330 <send_AT_command>
		osDelay(150);
 800188e:	2096      	movs	r0, #150	@ 0x96
 8001890:	f007 f9ac 	bl	8008bec <osDelay>
		receive_response("Check Network Registration Status (CS Service)\n");
 8001894:	4630      	mov	r0, r6
 8001896:	f7ff fd75 	bl	8001384 <receive_response>
		osDelay(1000);
 800189a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800189e:	f007 f9a5 	bl	8008bec <osDelay>
		osDelay(300);
 80018a2:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80018a6:	f007 f9a1 	bl	8008bec <osDelay>
		first_pointer = strstr((char*)response, CHECK_RESPONSE);
 80018aa:	484c      	ldr	r0, [pc, #304]	@ (80019dc <check_SIM_ready+0x244>)
 80018ac:	4621      	mov	r1, r4
 80018ae:	f00a ff3d 	bl	800c72c <strstr>
		if(first_pointer != NULL){
 80018b2:	2800      	cmp	r0, #0
 80018b4:	d0e8      	beq.n	8001888 <check_SIM_ready+0xf0>
			second_pointer = strstr(first_pointer+1, CHECK_RESPONSE);
 80018b6:	4621      	mov	r1, r4
 80018b8:	3001      	adds	r0, #1
 80018ba:	f00a ff37 	bl	800c72c <strstr>
	while (first_pointer == NULL || second_pointer == NULL){
 80018be:	2800      	cmp	r0, #0
 80018c0:	d0e2      	beq.n	8001888 <check_SIM_ready+0xf0>
			memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
			SIM_UART_ReInitializeRxDMA();
			return 0;
		}
	}
	osDelay(100);
 80018c2:	2064      	movs	r0, #100	@ 0x64
 80018c4:	f007 f992 	bl	8008bec <osDelay>
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 80018c8:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 80018cc:	2100      	movs	r1, #0
 80018ce:	4843      	ldr	r0, [pc, #268]	@ (80019dc <check_SIM_ready+0x244>)
	send_AT_command(CONFIGURE_PS_SERVICE);
	first_pointer = NULL;
	second_pointer = NULL;
	receive_response("Configuring Network Registration Status (PS Service)");
	while (first_pointer == NULL || second_pointer == NULL){
		send_AT_command("AT+CGREG?\r\n");
 80018d0:	4d51      	ldr	r5, [pc, #324]	@ (8001a18 <check_SIM_ready+0x280>)
		osDelay(150);
		receive_response("Check Network Registration Status (PS Service)\n");
 80018d2:	4e52      	ldr	r6, [pc, #328]	@ (8001a1c <check_SIM_ready+0x284>)
		osDelay(1000);
		osDelay(300);
		first_pointer = strstr((char*)response, CHECK_RESPONSE);
 80018d4:	4c40      	ldr	r4, [pc, #256]	@ (80019d8 <check_SIM_ready+0x240>)
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 80018d6:	f00a fed9 	bl	800c68c <memset>
	SIM_UART_ReInitializeRxDMA();
 80018da:	f7ff fd39 	bl	8001350 <SIM_UART_ReInitializeRxDMA>
	send_AT_command(CONFIGURE_PS_SERVICE);
 80018de:	4850      	ldr	r0, [pc, #320]	@ (8001a20 <check_SIM_ready+0x288>)
 80018e0:	f7ff fd26 	bl	8001330 <send_AT_command>
	receive_response("Configuring Network Registration Status (PS Service)");
 80018e4:	484f      	ldr	r0, [pc, #316]	@ (8001a24 <check_SIM_ready+0x28c>)
 80018e6:	f7ff fd4d 	bl	8001384 <receive_response>
		send_AT_command("AT+CGREG?\r\n");
 80018ea:	4628      	mov	r0, r5
 80018ec:	f7ff fd20 	bl	8001330 <send_AT_command>
		osDelay(150);
 80018f0:	2096      	movs	r0, #150	@ 0x96
 80018f2:	f007 f97b 	bl	8008bec <osDelay>
		receive_response("Check Network Registration Status (PS Service)\n");
 80018f6:	4630      	mov	r0, r6
 80018f8:	f7ff fd44 	bl	8001384 <receive_response>
		osDelay(1000);
 80018fc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001900:	f007 f974 	bl	8008bec <osDelay>
		osDelay(300);
 8001904:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001908:	f007 f970 	bl	8008bec <osDelay>
		first_pointer = strstr((char*)response, CHECK_RESPONSE);
 800190c:	4833      	ldr	r0, [pc, #204]	@ (80019dc <check_SIM_ready+0x244>)
 800190e:	4621      	mov	r1, r4
 8001910:	f00a ff0c 	bl	800c72c <strstr>
		if(first_pointer != NULL){
 8001914:	2800      	cmp	r0, #0
 8001916:	d0e8      	beq.n	80018ea <check_SIM_ready+0x152>
			second_pointer = strstr(first_pointer + 1, CHECK_RESPONSE);
 8001918:	4621      	mov	r1, r4
 800191a:	3001      	adds	r0, #1
 800191c:	f00a ff06 	bl	800c72c <strstr>
	while (first_pointer == NULL || second_pointer == NULL){
 8001920:	2800      	cmp	r0, #0
 8001922:	d0e2      	beq.n	80018ea <check_SIM_ready+0x152>
			memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
			SIM_UART_ReInitializeRxDMA();
			return 0;
		}
	}
	osDelay(100);
 8001924:	2064      	movs	r0, #100	@ 0x64
 8001926:	f007 f961 	bl	8008bec <osDelay>
	receive_response("Check Network Registration Status (PS Service)\n");
 800192a:	483c      	ldr	r0, [pc, #240]	@ (8001a1c <check_SIM_ready+0x284>)
	count_check_sim = 0;


	//CHECK SIGNAL QUALITY
	send_AT_command(CHECK_SIGNAL_QUALITY);
	while(strstr((char *) response, CHECK_RESPONSE) == NULL){
 800192c:	4d2a      	ldr	r5, [pc, #168]	@ (80019d8 <check_SIM_ready+0x240>)
 800192e:	4c2b      	ldr	r4, [pc, #172]	@ (80019dc <check_SIM_ready+0x244>)
		if (count_check_sim >= TIME_LIMIT){
			memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
			SIM_UART_ReInitializeRxDMA();
			return 0;
		}
		receive_response("Check Signal Quality Report\n");
 8001930:	4e3d      	ldr	r6, [pc, #244]	@ (8001a28 <check_SIM_ready+0x290>)
	receive_response("Check Network Registration Status (PS Service)\n");
 8001932:	f7ff fd27 	bl	8001384 <receive_response>
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8001936:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 800193a:	2100      	movs	r1, #0
 800193c:	4827      	ldr	r0, [pc, #156]	@ (80019dc <check_SIM_ready+0x244>)
 800193e:	f00a fea5 	bl	800c68c <memset>
	SIM_UART_ReInitializeRxDMA();
 8001942:	f7ff fd05 	bl	8001350 <SIM_UART_ReInitializeRxDMA>
	send_AT_command(CHECK_SIGNAL_QUALITY);
 8001946:	4839      	ldr	r0, [pc, #228]	@ (8001a2c <check_SIM_ready+0x294>)
 8001948:	f7ff fcf2 	bl	8001330 <send_AT_command>
	while(strstr((char *) response, CHECK_RESPONSE) == NULL){
 800194c:	4629      	mov	r1, r5
 800194e:	4620      	mov	r0, r4
 8001950:	f00a feec 	bl	800c72c <strstr>
 8001954:	b3c8      	cbz	r0, 80019ca <check_SIM_ready+0x232>
	}
	receive_response("Check Signal Quality Report\n");
 8001956:	4834      	ldr	r0, [pc, #208]	@ (8001a28 <check_SIM_ready+0x290>)
 8001958:	f7ff fd14 	bl	8001384 <receive_response>
	osDelay(100);
 800195c:	2064      	movs	r0, #100	@ 0x64
 800195e:	f007 f945 	bl	8008bec <osDelay>
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8001962:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8001966:	2100      	movs	r1, #0
 8001968:	481c      	ldr	r0, [pc, #112]	@ (80019dc <check_SIM_ready+0x244>)
 800196a:	f00a fe8f 	bl	800c68c <memset>
	SIM_UART_ReInitializeRxDMA();
 800196e:	f7ff fcef 	bl	8001350 <SIM_UART_ReInitializeRxDMA>
	count_check_sim = 0;
	return 1;
 8001972:	2001      	movs	r0, #1
 8001974:	e00a      	b.n	800198c <check_SIM_ready+0x1f4>
		if (count_check_sim >= 5){
 8001976:	3c01      	subs	r4, #1
 8001978:	d109      	bne.n	800198e <check_SIM_ready+0x1f6>
			memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 800197a:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 800197e:	2100      	movs	r1, #0
 8001980:	4816      	ldr	r0, [pc, #88]	@ (80019dc <check_SIM_ready+0x244>)
 8001982:	f00a fe83 	bl	800c68c <memset>
			SIM_UART_ReInitializeRxDMA();
 8001986:	f7ff fce3 	bl	8001350 <SIM_UART_ReInitializeRxDMA>
			return 0;
 800198a:	2000      	movs	r0, #0


}
 800198c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		receive_response("Check IMEI-0:\n");
 800198e:	4638      	mov	r0, r7
 8001990:	f7ff fcf8 	bl	8001384 <receive_response>
		osDelay(1000);
 8001994:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001998:	f007 f928 	bl	8008bec <osDelay>
 800199c:	e704      	b.n	80017a8 <check_SIM_ready+0x10>
		receive_response("Check SIM\n");
 800199e:	4638      	mov	r0, r7
 80019a0:	f7ff fcf0 	bl	8001384 <receive_response>
		osDelay(1000);
 80019a4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80019a8:	f007 f920 	bl	8008bec <osDelay>
		if (count_check_sim >= 5){
 80019ac:	3c01      	subs	r4, #1
 80019ae:	f47f af2e 	bne.w	800180e <check_SIM_ready+0x76>
 80019b2:	e7e2      	b.n	800197a <check_SIM_ready+0x1e2>
		receive_response("Check SIM CCID\n");
 80019b4:	4638      	mov	r0, r7
 80019b6:	f7ff fce5 	bl	8001384 <receive_response>
		osDelay(1000);
 80019ba:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80019be:	f007 f915 	bl	8008bec <osDelay>
		if (count_check_sim >= TIME_LIMIT){
 80019c2:	3c01      	subs	r4, #1
 80019c4:	f47f af42 	bne.w	800184c <check_SIM_ready+0xb4>
 80019c8:	e7d7      	b.n	800197a <check_SIM_ready+0x1e2>
		receive_response("Check Signal Quality Report\n");
 80019ca:	4630      	mov	r0, r6
 80019cc:	f7ff fcda 	bl	8001384 <receive_response>
 80019d0:	e7bc      	b.n	800194c <check_SIM_ready+0x1b4>
 80019d2:	bf00      	nop
 80019d4:	08010b14 	.word	0x08010b14
 80019d8:	08010e7a 	.word	0x08010e7a
 80019dc:	20001e78 	.word	0x20001e78
 80019e0:	08010b20 	.word	0x08010b20
 80019e4:	08010b53 	.word	0x08010b53
 80019e8:	20001bb8 	.word	0x20001bb8
 80019ec:	08010b2f 	.word	0x08010b2f
 80019f0:	20006fac 	.word	0x20006fac
 80019f4:	08012ad8 	.word	0x08012ad8
 80019f8:	08010b48 	.word	0x08010b48
 80019fc:	08010b79 	.word	0x08010b79
 8001a00:	08010b69 	.word	0x08010b69
 8001a04:	08010b5e 	.word	0x08010b5e
 8001a08:	08010bc2 	.word	0x08010bc2
 8001a0c:	08010bcd 	.word	0x08010bcd
 8001a10:	08010b81 	.word	0x08010b81
 8001a14:	08010b8d 	.word	0x08010b8d
 8001a18:	08010c3f 	.word	0x08010c3f
 8001a1c:	08010c4b 	.word	0x08010c4b
 8001a20:	08010bfd 	.word	0x08010bfd
 8001a24:	08010c0a 	.word	0x08010c0a
 8001a28:	08010c84 	.word	0x08010c84
 8001a2c:	08010c7b 	.word	0x08010c7b

08001a30 <check_configure_APN>:

void check_configure_APN(){
 8001a30:	b508      	push	{r3, lr}
	send_AT_command(CHECK_CONFIGURE_APN);
 8001a32:	4805      	ldr	r0, [pc, #20]	@ (8001a48 <check_configure_APN+0x18>)
 8001a34:	f7ff fc7c 	bl	8001330 <send_AT_command>
	osDelay(150);
 8001a38:	2096      	movs	r0, #150	@ 0x96
 8001a3a:	f007 f8d7 	bl	8008bec <osDelay>
	receive_response("Check Configuring APN\n");
}
 8001a3e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	receive_response("Check Configuring APN\n");
 8001a42:	4802      	ldr	r0, [pc, #8]	@ (8001a4c <check_configure_APN+0x1c>)
 8001a44:	f7ff bc9e 	b.w	8001384 <receive_response>
 8001a48:	08010ca1 	.word	0x08010ca1
 8001a4c:	08010caf 	.word	0x08010caf

08001a50 <configure_APN>:

int configure_APN(int context_id){
 8001a50:	b530      	push	{r4, r5, lr}
 8001a52:	b0c7      	sub	sp, #284	@ 0x11c
	uint8_t command[256];
	snprintf((char *)command, sizeof(command), "AT+QICSGP=%d,%d,\"%s\",\"%s\",\"%s\",%d,0\r\n", context_id, 1, APN_NAME, APN_USERNAME, APN_PASSWD, APN_AUTHEN);
 8001a54:	2200      	movs	r2, #0
 8001a56:	9204      	str	r2, [sp, #16]
 8001a58:	4a16      	ldr	r2, [pc, #88]	@ (8001ab4 <configure_APN+0x64>)
	char *first_pointer = NULL;
	char *second_pointer = NULL; 	
	while (first_pointer == NULL || second_pointer == NULL){
		check_configure_APN();
		osDelay(1300);
		first_pointer = strstr((char*)response, CHECK_RESPONSE);
 8001a5a:	4c17      	ldr	r4, [pc, #92]	@ (8001ab8 <configure_APN+0x68>)
 8001a5c:	4d17      	ldr	r5, [pc, #92]	@ (8001abc <configure_APN+0x6c>)
	snprintf((char *)command, sizeof(command), "AT+QICSGP=%d,%d,\"%s\",\"%s\",\"%s\",%d,0\r\n", context_id, 1, APN_NAME, APN_USERNAME, APN_PASSWD, APN_AUTHEN);
 8001a5e:	e9cd 2202 	strd	r2, r2, [sp, #8]
 8001a62:	4a17      	ldr	r2, [pc, #92]	@ (8001ac0 <configure_APN+0x70>)
 8001a64:	9201      	str	r2, [sp, #4]
 8001a66:	2201      	movs	r2, #1
int configure_APN(int context_id){
 8001a68:	4603      	mov	r3, r0
	snprintf((char *)command, sizeof(command), "AT+QICSGP=%d,%d,\"%s\",\"%s\",\"%s\",%d,0\r\n", context_id, 1, APN_NAME, APN_USERNAME, APN_PASSWD, APN_AUTHEN);
 8001a6a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001a6e:	9200      	str	r2, [sp, #0]
 8001a70:	a806      	add	r0, sp, #24
 8001a72:	4a14      	ldr	r2, [pc, #80]	@ (8001ac4 <configure_APN+0x74>)
 8001a74:	f00a fd0e 	bl	800c494 <sniprintf>
	send_AT_command((char*)command);
 8001a78:	a806      	add	r0, sp, #24
 8001a7a:	f7ff fc59 	bl	8001330 <send_AT_command>
	osDelay(150);
 8001a7e:	2096      	movs	r0, #150	@ 0x96
 8001a80:	f007 f8b4 	bl	8008bec <osDelay>
	receive_response("CONFIGURE APN\n");
 8001a84:	4810      	ldr	r0, [pc, #64]	@ (8001ac8 <configure_APN+0x78>)
 8001a86:	f7ff fc7d 	bl	8001384 <receive_response>
		check_configure_APN();
 8001a8a:	f7ff ffd1 	bl	8001a30 <check_configure_APN>
		osDelay(1300);
 8001a8e:	f240 5014 	movw	r0, #1300	@ 0x514
 8001a92:	f007 f8ab 	bl	8008bec <osDelay>
		first_pointer = strstr((char*)response, CHECK_RESPONSE);
 8001a96:	4908      	ldr	r1, [pc, #32]	@ (8001ab8 <configure_APN+0x68>)
 8001a98:	4628      	mov	r0, r5
 8001a9a:	f00a fe47 	bl	800c72c <strstr>
		if(first_pointer != NULL){
 8001a9e:	2800      	cmp	r0, #0
 8001aa0:	d0f3      	beq.n	8001a8a <configure_APN+0x3a>
			second_pointer = strstr(first_pointer+1, CHECK_RESPONSE);
 8001aa2:	4621      	mov	r1, r4
 8001aa4:	3001      	adds	r0, #1
 8001aa6:	f00a fe41 	bl	800c72c <strstr>
	while (first_pointer == NULL || second_pointer == NULL){
 8001aaa:	2800      	cmp	r0, #0
 8001aac:	d0ed      	beq.n	8001a8a <configure_APN+0x3a>
		}
	}
	return 1;
}
 8001aae:	2001      	movs	r0, #1
 8001ab0:	b047      	add	sp, #284	@ 0x11c
 8001ab2:	bd30      	pop	{r4, r5, pc}
 8001ab4:	08011a82 	.word	0x08011a82
 8001ab8:	08010e7a 	.word	0x08010e7a
 8001abc:	20001e78 	.word	0x20001e78
 8001ac0:	08010cec 	.word	0x08010cec
 8001ac4:	08010cc6 	.word	0x08010cc6
 8001ac8:	08010cf6 	.word	0x08010cf6

08001acc <check_activate_context>:

void check_activate_context(){
 8001acc:	b500      	push	{lr}
 8001ace:	b0a1      	sub	sp, #132	@ 0x84
	uint8_t command[128];
	snprintf((char *)command, sizeof(command), CHECK_ACTIVATE_CONTEXT);
 8001ad0:	4906      	ldr	r1, [pc, #24]	@ (8001aec <check_activate_context+0x20>)
 8001ad2:	4668      	mov	r0, sp
 8001ad4:	f00b fc26 	bl	800d324 <strcpy>
	send_AT_command((char*)command);
 8001ad8:	4668      	mov	r0, sp
 8001ada:	f7ff fc29 	bl	8001330 <send_AT_command>
	receive_response("CHECK Activate CONTEXT\n");
 8001ade:	4804      	ldr	r0, [pc, #16]	@ (8001af0 <check_activate_context+0x24>)
 8001ae0:	f7ff fc50 	bl	8001384 <receive_response>
}
 8001ae4:	b021      	add	sp, #132	@ 0x84
 8001ae6:	f85d fb04 	ldr.w	pc, [sp], #4
 8001aea:	bf00      	nop
 8001aec:	08010d05 	.word	0x08010d05
 8001af0:	08010d11 	.word	0x08010d11

08001af4 <activate_context>:
//		// Wait until the counter reaches 1000
//		while (__HAL_TIM_GET_COUNTER(&htim3) < 1000);
//	}
//	is_40s = 1;
//}
int activate_context(int context_id){
 8001af4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001af8:	b0a0      	sub	sp, #128	@ 0x80
 8001afa:	4603      	mov	r3, r0
	uint8_t command[128];
	snprintf((char *)command, sizeof(command), "AT+QIACT=%d\r\n", context_id);
 8001afc:	4a2c      	ldr	r2, [pc, #176]	@ (8001bb0 <activate_context+0xbc>)
		if(count_check >= 50){
			count_check = 0;
//			return 0;
			break;
		}
		if (strstr((char*)response, "ERROR") != NULL){
 8001afe:	4f2d      	ldr	r7, [pc, #180]	@ (8001bb4 <activate_context+0xc0>)
 8001b00:	4e2d      	ldr	r6, [pc, #180]	@ (8001bb8 <activate_context+0xc4>)
			count_error = 0;
//			return 0;
			break;
		}

		receive_response("Check Activate Context\r\n");
 8001b02:	f8df 80c0 	ldr.w	r8, [pc, #192]	@ 8001bc4 <activate_context+0xd0>
	snprintf((char *)command, sizeof(command), "AT+QIACT=%d\r\n", context_id);
 8001b06:	2180      	movs	r1, #128	@ 0x80
 8001b08:	4668      	mov	r0, sp
 8001b0a:	f00a fcc3 	bl	800c494 <sniprintf>
	send_AT_command((char*)command);
 8001b0e:	4668      	mov	r0, sp
 8001b10:	f7ff fc0e 	bl	8001330 <send_AT_command>
	osDelay(150);
 8001b14:	2096      	movs	r0, #150	@ 0x96
 8001b16:	f007 f869 	bl	8008bec <osDelay>
	receive_response("Activate Context\r\n");
 8001b1a:	4828      	ldr	r0, [pc, #160]	@ (8001bbc <activate_context+0xc8>)
 8001b1c:	f7ff fc32 	bl	8001384 <receive_response>
 8001b20:	2533      	movs	r5, #51	@ 0x33
	int count_error = 0;
 8001b22:	2400      	movs	r4, #0
		check_activate_context();
 8001b24:	f7ff ffd2 	bl	8001acc <check_activate_context>
		osDelay(300);
 8001b28:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001b2c:	f007 f85e 	bl	8008bec <osDelay>
		if(count_check >= 50){
 8001b30:	3d01      	subs	r5, #1
 8001b32:	d021      	beq.n	8001b78 <activate_context+0x84>
		if (strstr((char*)response, "ERROR") != NULL){
 8001b34:	4639      	mov	r1, r7
 8001b36:	4630      	mov	r0, r6
 8001b38:	f00a fdf8 	bl	800c72c <strstr>
 8001b3c:	b340      	cbz	r0, 8001b90 <activate_context+0x9c>
			osDelay(500);
 8001b3e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001b42:	f007 f853 	bl	8008bec <osDelay>
			memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8001b46:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8001b4a:	2100      	movs	r1, #0
 8001b4c:	4630      	mov	r0, r6
 8001b4e:	f00a fd9d 	bl	800c68c <memset>
			SIM_UART_ReInitializeRxDMA();
 8001b52:	f7ff fbfd 	bl	8001350 <SIM_UART_ReInitializeRxDMA>
			send_AT_command((char *) command);
 8001b56:	4668      	mov	r0, sp
 8001b58:	f7ff fbea 	bl	8001330 <send_AT_command>
			count_error++;
 8001b5c:	3401      	adds	r4, #1
			osDelay(200);
 8001b5e:	20c8      	movs	r0, #200	@ 0xc8
 8001b60:	f007 f844 	bl	8008bec <osDelay>
		if(count_error >= 3){
 8001b64:	2c03      	cmp	r4, #3
 8001b66:	d113      	bne.n	8001b90 <activate_context+0x9c>
			memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8001b68:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8001b6c:	2100      	movs	r1, #0
 8001b6e:	4812      	ldr	r0, [pc, #72]	@ (8001bb8 <activate_context+0xc4>)
 8001b70:	f00a fd8c 	bl	800c68c <memset>
			SIM_UART_ReInitializeRxDMA();
 8001b74:	f7ff fbec 	bl	8001350 <SIM_UART_ReInitializeRxDMA>
			second_pointer = strstr(first_pointer+1, CHECK_RESPONSE);
		}
		count_check++;
	}
//	HAL_TIM_Base_Start(&htim3);
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8001b78:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8001b7c:	2100      	movs	r1, #0
 8001b7e:	480e      	ldr	r0, [pc, #56]	@ (8001bb8 <activate_context+0xc4>)
 8001b80:	f00a fd84 	bl	800c68c <memset>
	SIM_UART_ReInitializeRxDMA();
 8001b84:	f7ff fbe4 	bl	8001350 <SIM_UART_ReInitializeRxDMA>
	return 1;
}
 8001b88:	2001      	movs	r0, #1
 8001b8a:	b020      	add	sp, #128	@ 0x80
 8001b8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		receive_response("Check Activate Context\r\n");
 8001b90:	4640      	mov	r0, r8
 8001b92:	f7ff fbf7 	bl	8001384 <receive_response>
		first_pointer = strstr((char*)response, CHECK_RESPONSE);
 8001b96:	490a      	ldr	r1, [pc, #40]	@ (8001bc0 <activate_context+0xcc>)
 8001b98:	4630      	mov	r0, r6
 8001b9a:	f00a fdc7 	bl	800c72c <strstr>
		if(first_pointer != NULL){
 8001b9e:	2800      	cmp	r0, #0
 8001ba0:	d0c0      	beq.n	8001b24 <activate_context+0x30>
			second_pointer = strstr(first_pointer+1, CHECK_RESPONSE);
 8001ba2:	4907      	ldr	r1, [pc, #28]	@ (8001bc0 <activate_context+0xcc>)
 8001ba4:	3001      	adds	r0, #1
 8001ba6:	f00a fdc1 	bl	800c72c <strstr>
	while ((first_pointer == NULL || second_pointer == NULL)){
 8001baa:	2800      	cmp	r0, #0
 8001bac:	d0ba      	beq.n	8001b24 <activate_context+0x30>
 8001bae:	e7e3      	b.n	8001b78 <activate_context+0x84>
 8001bb0:	08010d29 	.word	0x08010d29
 8001bb4:	08010d37 	.word	0x08010d37
 8001bb8:	20001e78 	.word	0x20001e78
 8001bbc:	08010d43 	.word	0x08010d43
 8001bc0:	08010e7a 	.word	0x08010e7a
 8001bc4:	08010d3d 	.word	0x08010d3d

08001bc8 <deactivate_context>:

int deactivate_context(int context_id){
 8001bc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001bca:	4604      	mov	r4, r0
 8001bcc:	b0a1      	sub	sp, #132	@ 0x84
	uint8_t command[128];
	int count_check = 0;
	osDelay(100);
 8001bce:	2064      	movs	r0, #100	@ 0x64
 8001bd0:	f007 f80c 	bl	8008bec <osDelay>
	snprintf((char *)command, sizeof(command), "AT+QIDEACT=%d\r\n", context_id);
 8001bd4:	4623      	mov	r3, r4
 8001bd6:	4a1d      	ldr	r2, [pc, #116]	@ (8001c4c <deactivate_context+0x84>)
	send_AT_command((char*)command);
	while(strstr((char *) response, CHECK_RESPONSE) == NULL){
 8001bd8:	4e1d      	ldr	r6, [pc, #116]	@ (8001c50 <deactivate_context+0x88>)
 8001bda:	4d1e      	ldr	r5, [pc, #120]	@ (8001c54 <deactivate_context+0x8c>)
		receive_response("DEACTIVATE CONTEXT\n");
 8001bdc:	4f1e      	ldr	r7, [pc, #120]	@ (8001c58 <deactivate_context+0x90>)
	snprintf((char *)command, sizeof(command), "AT+QIDEACT=%d\r\n", context_id);
 8001bde:	2180      	movs	r1, #128	@ 0x80
 8001be0:	4668      	mov	r0, sp
 8001be2:	f00a fc57 	bl	800c494 <sniprintf>
	send_AT_command((char*)command);
 8001be6:	4668      	mov	r0, sp
 8001be8:	f7ff fba2 	bl	8001330 <send_AT_command>
	while(strstr((char *) response, CHECK_RESPONSE) == NULL){
 8001bec:	2415      	movs	r4, #21
 8001bee:	4631      	mov	r1, r6
 8001bf0:	4628      	mov	r0, r5
 8001bf2:	f00a fd9b 	bl	800c72c <strstr>
 8001bf6:	b178      	cbz	r0, 8001c18 <deactivate_context+0x50>
			return 0;
		}
		count_check++;
		osDelay(1200);
	}
	receive_response("DEACTIVATE CONTEXT\n");
 8001bf8:	4817      	ldr	r0, [pc, #92]	@ (8001c58 <deactivate_context+0x90>)
 8001bfa:	f7ff fbc3 	bl	8001384 <receive_response>
	osDelay(100);
 8001bfe:	2064      	movs	r0, #100	@ 0x64
 8001c00:	f006 fff4 	bl	8008bec <osDelay>
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8001c04:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8001c08:	2100      	movs	r1, #0
 8001c0a:	4812      	ldr	r0, [pc, #72]	@ (8001c54 <deactivate_context+0x8c>)
 8001c0c:	f00a fd3e 	bl	800c68c <memset>
	SIM_UART_ReInitializeRxDMA();
 8001c10:	f7ff fb9e 	bl	8001350 <SIM_UART_ReInitializeRxDMA>
	return 1;
 8001c14:	2001      	movs	r0, #1
 8001c16:	e010      	b.n	8001c3a <deactivate_context+0x72>
		receive_response("DEACTIVATE CONTEXT\n");
 8001c18:	4638      	mov	r0, r7
 8001c1a:	f7ff fbb3 	bl	8001384 <receive_response>
		if (strstr((char *) response, "ERROR") != NULL){
 8001c1e:	490f      	ldr	r1, [pc, #60]	@ (8001c5c <deactivate_context+0x94>)
 8001c20:	4628      	mov	r0, r5
 8001c22:	f00a fd83 	bl	800c72c <strstr>
 8001c26:	b150      	cbz	r0, 8001c3e <deactivate_context+0x76>
			memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8001c28:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8001c2c:	2100      	movs	r1, #0
 8001c2e:	4809      	ldr	r0, [pc, #36]	@ (8001c54 <deactivate_context+0x8c>)
 8001c30:	f00a fd2c 	bl	800c68c <memset>
			SIM_UART_ReInitializeRxDMA();
 8001c34:	f7ff fb8c 	bl	8001350 <SIM_UART_ReInitializeRxDMA>
			return 0;
 8001c38:	2000      	movs	r0, #0
}
 8001c3a:	b021      	add	sp, #132	@ 0x84
 8001c3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if(count_check >= 20){
 8001c3e:	3c01      	subs	r4, #1
 8001c40:	d0f2      	beq.n	8001c28 <deactivate_context+0x60>
		osDelay(1200);
 8001c42:	f44f 6096 	mov.w	r0, #1200	@ 0x4b0
 8001c46:	f006 ffd1 	bl	8008bec <osDelay>
 8001c4a:	e7d0      	b.n	8001bee <deactivate_context+0x26>
 8001c4c:	08010d56 	.word	0x08010d56
 8001c50:	08010e7a 	.word	0x08010e7a
 8001c54:	20001e78 	.word	0x20001e78
 8001c58:	08010d66 	.word	0x08010d66
 8001c5c:	08010d37 	.word	0x08010d37

08001c60 <open_socket_service>:


int open_socket_service(int context_id, int connect_id, int local_port, int access_mode){
 8001c60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001c64:	b0e6      	sub	sp, #408	@ 0x198
	const int timeout_seconds = 50; // Receive response each second
	//TODO: CHANGE timeout to 150 after testing
	int elapsed_time_ms = 0;
	uint8_t command[256];
	snprintf((char *)command, sizeof(command), "AT+QIOPEN=%d,%d,\"%s\",\"%s\",%d,%d,%d\r\n",context_id, connect_id, SERVICE_TYPE, IP_ADDRESS, REMOTE_PORT, local_port, access_mode);
 8001c66:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001c6a:	f241 3397 	movw	r3, #5015	@ 0x1397
 8001c6e:	9303      	str	r3, [sp, #12]
 8001c70:	4b4c      	ldr	r3, [pc, #304]	@ (8001da4 <open_socket_service+0x144>)
 8001c72:	9302      	str	r3, [sp, #8]
 8001c74:	4b4c      	ldr	r3, [pc, #304]	@ (8001da8 <open_socket_service+0x148>)
 8001c76:	4a4d      	ldr	r2, [pc, #308]	@ (8001dac <open_socket_service+0x14c>)
	int count_error = 0;
	uart_transmit_string(&huart1, (uint8_t *) "Init start TIME\n");
//	while(elapsed_time_ms < timeout_seconds){
	while(first_pointer == NULL && elapsed_time_ms < timeout_seconds){
		char output_elapsed[128];
		receive_response("Check OPEN socket service: \r\n");
 8001c78:	f8df 9148 	ldr.w	r9, [pc, #328]	@ 8001dc4 <open_socket_service+0x164>
		if (strstr((char *) response, "ERROR") != NULL){
 8001c7c:	f8df a154 	ldr.w	sl, [pc, #340]	@ 8001dd4 <open_socket_service+0x174>
 8001c80:	f8df 8134 	ldr.w	r8, [pc, #308]	@ 8001db8 <open_socket_service+0x158>
	snprintf((char *)command, sizeof(command), "AT+QIOPEN=%d,%d,\"%s\",\"%s\",%d,%d,%d\r\n",context_id, connect_id, SERVICE_TYPE, IP_ADDRESS, REMOTE_PORT, local_port, access_mode);
 8001c84:	e9cd 1300 	strd	r1, r3, [sp]
int open_socket_service(int context_id, int connect_id, int local_port, int access_mode){
 8001c88:	460c      	mov	r4, r1
	snprintf((char *)command, sizeof(command), "AT+QIOPEN=%d,%d,\"%s\",\"%s\",%d,%d,%d\r\n",context_id, connect_id, SERVICE_TYPE, IP_ADDRESS, REMOTE_PORT, local_port, access_mode);
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001c90:	a826      	add	r0, sp, #152	@ 0x98
 8001c92:	f00a fbff 	bl	800c494 <sniprintf>
	send_AT_command((char *) command);
 8001c96:	a826      	add	r0, sp, #152	@ 0x98
 8001c98:	f7ff fb4a 	bl	8001330 <send_AT_command>
	osDelay(100);
 8001c9c:	2064      	movs	r0, #100	@ 0x64
 8001c9e:	f006 ffa5 	bl	8008bec <osDelay>
	uart_transmit_string(&huart1, (uint8_t *) "Init start TIME\n");
 8001ca2:	4943      	ldr	r1, [pc, #268]	@ (8001db0 <open_socket_service+0x150>)
 8001ca4:	4843      	ldr	r0, [pc, #268]	@ (8001db4 <open_socket_service+0x154>)
 8001ca6:	f003 fde7 	bl	8005878 <uart_transmit_string>
	int count_error = 0;
 8001caa:	2700      	movs	r7, #0
	int elapsed_time_ms = 0;
 8001cac:	463e      	mov	r6, r7
		receive_response("Check OPEN socket service: \r\n");
 8001cae:	4648      	mov	r0, r9
 8001cb0:	f7ff fb68 	bl	8001384 <receive_response>
		if (strstr((char *) response, "ERROR") != NULL){
 8001cb4:	4651      	mov	r1, sl
 8001cb6:	4640      	mov	r0, r8
 8001cb8:	f00a fd38 	bl	800c72c <strstr>
 8001cbc:	b1e8      	cbz	r0, 8001cfa <open_socket_service+0x9a>
			memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8001cbe:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8001cc2:	2100      	movs	r1, #0
 8001cc4:	4640      	mov	r0, r8
 8001cc6:	f00a fce1 	bl	800c68c <memset>
			SIM_UART_ReInitializeRxDMA();
 8001cca:	f7ff fb41 	bl	8001350 <SIM_UART_ReInitializeRxDMA>
			count_error++;
			osDelay(500);
 8001cce:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001cd2:	f006 ff8b 	bl	8008bec <osDelay>
			count_error++;
 8001cd6:	3701      	adds	r7, #1
			send_AT_command((char *) command);
 8001cd8:	a826      	add	r0, sp, #152	@ 0x98
 8001cda:	f7ff fb29 	bl	8001330 <send_AT_command>
		}
		if(count_error >= 6){
 8001cde:	2f06      	cmp	r7, #6
 8001ce0:	d10b      	bne.n	8001cfa <open_socket_service+0x9a>
			memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8001ce2:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8001ce6:	2100      	movs	r1, #0
		snprintf((char *)command, sizeof(command), "AT+QISTATE=1,%d\r\n",connect_id);
		send_AT_command((char*) command);
		while(strstr((char *) response, CHECK_RESPONSE) == NULL){
			receive_response("Check SOCKET CONNECTION\n");
			if (strstr((char *) response, "ERROR") != NULL){
				memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8001ce8:	4833      	ldr	r0, [pc, #204]	@ (8001db8 <open_socket_service+0x158>)
 8001cea:	f00a fccf 	bl	800c68c <memset>
				SIM_UART_ReInitializeRxDMA();
 8001cee:	f7ff fb2f 	bl	8001350 <SIM_UART_ReInitializeRxDMA>
			return 0;
 8001cf2:	2000      	movs	r0, #0
		memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
		SIM_UART_ReInitializeRxDMA();
		return 1;
	}
	else return 0;
}
 8001cf4:	b066      	add	sp, #408	@ 0x198
 8001cf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		first_pointer = strstr((char*)response, "+QIOPEN:");
 8001cfa:	4930      	ldr	r1, [pc, #192]	@ (8001dbc <open_socket_service+0x15c>)
 8001cfc:	4640      	mov	r0, r8
 8001cfe:	f00a fd15 	bl	800c72c <strstr>
		elapsed_time_ms++;
 8001d02:	3601      	adds	r6, #1
		snprintf(output_elapsed, 128, "Elapsed Time: %d\n", elapsed_time_ms);
 8001d04:	4a2e      	ldr	r2, [pc, #184]	@ (8001dc0 <open_socket_service+0x160>)
		first_pointer = strstr((char*)response, "+QIOPEN:");
 8001d06:	4605      	mov	r5, r0
		snprintf(output_elapsed, 128, "Elapsed Time: %d\n", elapsed_time_ms);
 8001d08:	4633      	mov	r3, r6
 8001d0a:	2180      	movs	r1, #128	@ 0x80
 8001d0c:	a806      	add	r0, sp, #24
 8001d0e:	f00a fbc1 	bl	800c494 <sniprintf>
		uart_transmit_string(&huart1, (uint8_t *)output_elapsed);
 8001d12:	4828      	ldr	r0, [pc, #160]	@ (8001db4 <open_socket_service+0x154>)
 8001d14:	a906      	add	r1, sp, #24
 8001d16:	f003 fdaf 	bl	8005878 <uart_transmit_string>
		osDelay(1000);
 8001d1a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001d1e:	f006 ff65 	bl	8008bec <osDelay>
	while(first_pointer == NULL && elapsed_time_ms < timeout_seconds){
 8001d22:	b90d      	cbnz	r5, 8001d28 <open_socket_service+0xc8>
 8001d24:	2e32      	cmp	r6, #50	@ 0x32
 8001d26:	d1c2      	bne.n	8001cae <open_socket_service+0x4e>
	receive_response("Check OPEN socket service: \r\n");
 8001d28:	4826      	ldr	r0, [pc, #152]	@ (8001dc4 <open_socket_service+0x164>)
 8001d2a:	f7ff fb2b 	bl	8001384 <receive_response>
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8001d2e:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8001d32:	2100      	movs	r1, #0
 8001d34:	4820      	ldr	r0, [pc, #128]	@ (8001db8 <open_socket_service+0x158>)
 8001d36:	f00a fca9 	bl	800c68c <memset>
	SIM_UART_ReInitializeRxDMA();
 8001d3a:	f7ff fb09 	bl	8001350 <SIM_UART_ReInitializeRxDMA>
	if(first_pointer != NULL)
 8001d3e:	2d00      	cmp	r5, #0
 8001d40:	d0d7      	beq.n	8001cf2 <open_socket_service+0x92>
		snprintf((char *)command, sizeof(command), "AT+QISTATE=1,%d\r\n",connect_id);
 8001d42:	4a21      	ldr	r2, [pc, #132]	@ (8001dc8 <open_socket_service+0x168>)
		while(strstr((char *) response, CHECK_RESPONSE) == NULL){
 8001d44:	4e21      	ldr	r6, [pc, #132]	@ (8001dcc <open_socket_service+0x16c>)
 8001d46:	4d1c      	ldr	r5, [pc, #112]	@ (8001db8 <open_socket_service+0x158>)
			receive_response("Check SOCKET CONNECTION\n");
 8001d48:	4f21      	ldr	r7, [pc, #132]	@ (8001dd0 <open_socket_service+0x170>)
		snprintf((char *)command, sizeof(command), "AT+QISTATE=1,%d\r\n",connect_id);
 8001d4a:	4623      	mov	r3, r4
 8001d4c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001d50:	a826      	add	r0, sp, #152	@ 0x98
 8001d52:	f00a fb9f 	bl	800c494 <sniprintf>
		send_AT_command((char*) command);
 8001d56:	a826      	add	r0, sp, #152	@ 0x98
 8001d58:	f7ff faea 	bl	8001330 <send_AT_command>
		while(strstr((char *) response, CHECK_RESPONSE) == NULL){
 8001d5c:	4631      	mov	r1, r6
 8001d5e:	4628      	mov	r0, r5
 8001d60:	f00a fce4 	bl	800c72c <strstr>
 8001d64:	4604      	mov	r4, r0
 8001d66:	b160      	cbz	r0, 8001d82 <open_socket_service+0x122>
		osDelay(100);
 8001d68:	2064      	movs	r0, #100	@ 0x64
 8001d6a:	f006 ff3f 	bl	8008bec <osDelay>
		memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8001d6e:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8001d72:	2100      	movs	r1, #0
 8001d74:	4810      	ldr	r0, [pc, #64]	@ (8001db8 <open_socket_service+0x158>)
 8001d76:	f00a fc89 	bl	800c68c <memset>
		SIM_UART_ReInitializeRxDMA();
 8001d7a:	f7ff fae9 	bl	8001350 <SIM_UART_ReInitializeRxDMA>
		return 1;
 8001d7e:	2001      	movs	r0, #1
 8001d80:	e7b8      	b.n	8001cf4 <open_socket_service+0x94>
			receive_response("Check SOCKET CONNECTION\n");
 8001d82:	4638      	mov	r0, r7
 8001d84:	f7ff fafe 	bl	8001384 <receive_response>
			if (strstr((char *) response, "ERROR") != NULL){
 8001d88:	4912      	ldr	r1, [pc, #72]	@ (8001dd4 <open_socket_service+0x174>)
 8001d8a:	4628      	mov	r0, r5
 8001d8c:	f00a fcce 	bl	800c72c <strstr>
 8001d90:	b118      	cbz	r0, 8001d9a <open_socket_service+0x13a>
				memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8001d92:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8001d96:	4621      	mov	r1, r4
 8001d98:	e7a6      	b.n	8001ce8 <open_socket_service+0x88>
			osDelay(1000);
 8001d9a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001d9e:	f006 ff25 	bl	8008bec <osDelay>
 8001da2:	e7db      	b.n	8001d5c <open_socket_service+0xfc>
 8001da4:	08010d9f 	.word	0x08010d9f
 8001da8:	08010dae 	.word	0x08010dae
 8001dac:	08010d7a 	.word	0x08010d7a
 8001db0:	08010db2 	.word	0x08010db2
 8001db4:	20006fac 	.word	0x20006fac
 8001db8:	20001e78 	.word	0x20001e78
 8001dbc:	08010de1 	.word	0x08010de1
 8001dc0:	080108c6 	.word	0x080108c6
 8001dc4:	08010dc3 	.word	0x08010dc3
 8001dc8:	08010dea 	.word	0x08010dea
 8001dcc:	08010e7a 	.word	0x08010e7a
 8001dd0:	08010dfc 	.word	0x08010dfc
 8001dd4:	08010d37 	.word	0x08010d37

08001dd8 <formatToHexString>:
	SIM_UART_ReInitializeRxDMA();
	return 1;
}

// Function to format data into a hex string
int formatToHexString( const uint8_t* data, int length, char* output, int max_len, int writeIndex) {
 8001dd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    for (int i = 0; i < length; i++) {
 8001ddc:	9c08      	ldr	r4, [sp, #32]
        if (writeIndex + 2 >= max_len) {
            // Prevent buffer overflow
            return -1;
        }
        sprintf(output + writeIndex, "%02X", data[i]);
 8001dde:	f8df a034 	ldr.w	sl, [pc, #52]	@ 8001e14 <formatToHexString+0x3c>
int formatToHexString( const uint8_t* data, int length, char* output, int max_len, int writeIndex) {
 8001de2:	4607      	mov	r7, r0
 8001de4:	460e      	mov	r6, r1
 8001de6:	4698      	mov	r8, r3
    for (int i = 0; i < length; i++) {
 8001de8:	2500      	movs	r5, #0
        sprintf(output + writeIndex, "%02X", data[i]);
 8001dea:	f1a2 0902 	sub.w	r9, r2, #2
    for (int i = 0; i < length; i++) {
 8001dee:	42b5      	cmp	r5, r6
 8001df0:	db02      	blt.n	8001df8 <formatToHexString+0x20>
        writeIndex += 2;
    }
    return writeIndex;
}
 8001df2:	4620      	mov	r0, r4
 8001df4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        if (writeIndex + 2 >= max_len) {
 8001df8:	3402      	adds	r4, #2
 8001dfa:	4544      	cmp	r4, r8
 8001dfc:	da07      	bge.n	8001e0e <formatToHexString+0x36>
        sprintf(output + writeIndex, "%02X", data[i]);
 8001dfe:	5d7a      	ldrb	r2, [r7, r5]
 8001e00:	4651      	mov	r1, sl
 8001e02:	eb09 0004 	add.w	r0, r9, r4
 8001e06:	f00a fb79 	bl	800c4fc <siprintf>
    for (int i = 0; i < length; i++) {
 8001e0a:	3501      	adds	r5, #1
 8001e0c:	e7ef      	b.n	8001dee <formatToHexString+0x16>
            return -1;
 8001e0e:	f04f 34ff 	mov.w	r4, #4294967295
 8001e12:	e7ee      	b.n	8001df2 <formatToHexString+0x1a>
 8001e14:	08012138 	.word	0x08012138

08001e18 <generateRegistrationMessage>:

int generateRegistrationMessage(const JT808_TerminalRegistration *data, char *hexString, int max_len) {
 8001e18:	b573      	push	{r0, r1, r4, r5, r6, lr}
    int writeIndex = 0;
    writeIndex = formatToHexString(&(data->start_mask), sizeof(data->start_mask), hexString, max_len, writeIndex);
 8001e1a:	2300      	movs	r3, #0
int generateRegistrationMessage(const JT808_TerminalRegistration *data, char *hexString, int max_len) {
 8001e1c:	460c      	mov	r4, r1
 8001e1e:	4615      	mov	r5, r2
    writeIndex = formatToHexString(&(data->start_mask), sizeof(data->start_mask), hexString, max_len, writeIndex);
 8001e20:	9300      	str	r3, [sp, #0]
 8001e22:	4613      	mov	r3, r2
 8001e24:	460a      	mov	r2, r1
 8001e26:	2101      	movs	r1, #1
int generateRegistrationMessage(const JT808_TerminalRegistration *data, char *hexString, int max_len) {
 8001e28:	4606      	mov	r6, r0
    writeIndex = formatToHexString(&(data->start_mask), sizeof(data->start_mask), hexString, max_len, writeIndex);
 8001e2a:	f7ff ffd5 	bl	8001dd8 <formatToHexString>
    writeIndex = formatToHexString(data->message_type, sizeof(data->message_type), hexString, max_len, writeIndex);
 8001e2e:	462b      	mov	r3, r5
 8001e30:	9000      	str	r0, [sp, #0]
 8001e32:	4622      	mov	r2, r4
 8001e34:	2102      	movs	r1, #2
 8001e36:	1c70      	adds	r0, r6, #1
 8001e38:	f7ff ffce 	bl	8001dd8 <formatToHexString>
    writeIndex = formatToHexString(data->message_length, sizeof(data->message_length), hexString, max_len, writeIndex);
 8001e3c:	462b      	mov	r3, r5
 8001e3e:	9000      	str	r0, [sp, #0]
 8001e40:	4622      	mov	r2, r4
 8001e42:	2102      	movs	r1, #2
 8001e44:	1cf0      	adds	r0, r6, #3
 8001e46:	f7ff ffc7 	bl	8001dd8 <formatToHexString>
    writeIndex = formatToHexString(data->terminal_phone_number, sizeof(data->terminal_phone_number), hexString, max_len, writeIndex);
 8001e4a:	462b      	mov	r3, r5
 8001e4c:	9000      	str	r0, [sp, #0]
 8001e4e:	4622      	mov	r2, r4
 8001e50:	2106      	movs	r1, #6
 8001e52:	1d70      	adds	r0, r6, #5
 8001e54:	f7ff ffc0 	bl	8001dd8 <formatToHexString>
    writeIndex = formatToHexString(data->message_serial_number, sizeof(data->message_serial_number), hexString, max_len, writeIndex);
 8001e58:	462b      	mov	r3, r5
 8001e5a:	9000      	str	r0, [sp, #0]
 8001e5c:	4622      	mov	r2, r4
 8001e5e:	2102      	movs	r1, #2
 8001e60:	f106 000b 	add.w	r0, r6, #11
 8001e64:	f7ff ffb8 	bl	8001dd8 <formatToHexString>
    writeIndex = formatToHexString(data->province_ID, sizeof(data->province_ID), hexString, max_len, writeIndex);
 8001e68:	462b      	mov	r3, r5
 8001e6a:	9000      	str	r0, [sp, #0]
 8001e6c:	4622      	mov	r2, r4
 8001e6e:	2102      	movs	r1, #2
 8001e70:	f106 000d 	add.w	r0, r6, #13
 8001e74:	f7ff ffb0 	bl	8001dd8 <formatToHexString>
    writeIndex = formatToHexString(data->city_ID, sizeof(data->city_ID), hexString, max_len, writeIndex);
 8001e78:	462b      	mov	r3, r5
 8001e7a:	9000      	str	r0, [sp, #0]
 8001e7c:	4622      	mov	r2, r4
 8001e7e:	2102      	movs	r1, #2
 8001e80:	f106 000f 	add.w	r0, r6, #15
 8001e84:	f7ff ffa8 	bl	8001dd8 <formatToHexString>
    writeIndex = formatToHexString(data->manufacturer_ID, sizeof(data->manufacturer_ID), hexString, max_len, writeIndex);
 8001e88:	462b      	mov	r3, r5
 8001e8a:	9000      	str	r0, [sp, #0]
 8001e8c:	4622      	mov	r2, r4
 8001e8e:	2105      	movs	r1, #5
 8001e90:	f106 0011 	add.w	r0, r6, #17
 8001e94:	f7ff ffa0 	bl	8001dd8 <formatToHexString>
    writeIndex = formatToHexString(data->terminal_type, sizeof(data->terminal_type), hexString, max_len, writeIndex);
 8001e98:	462b      	mov	r3, r5
 8001e9a:	9000      	str	r0, [sp, #0]
 8001e9c:	4622      	mov	r2, r4
 8001e9e:	2108      	movs	r1, #8
 8001ea0:	f106 0016 	add.w	r0, r6, #22
 8001ea4:	f7ff ff98 	bl	8001dd8 <formatToHexString>
    writeIndex = formatToHexString(data->terminal_ID, sizeof(data->terminal_ID), hexString, max_len, writeIndex);
 8001ea8:	462b      	mov	r3, r5
 8001eaa:	9000      	str	r0, [sp, #0]
 8001eac:	4622      	mov	r2, r4
 8001eae:	2107      	movs	r1, #7
 8001eb0:	f106 001e 	add.w	r0, r6, #30
 8001eb4:	f7ff ff90 	bl	8001dd8 <formatToHexString>
    writeIndex = formatToHexString(&(data->plate_color), sizeof(data->plate_color), hexString, max_len, writeIndex);
 8001eb8:	462b      	mov	r3, r5
 8001eba:	9000      	str	r0, [sp, #0]
 8001ebc:	4622      	mov	r2, r4
 8001ebe:	2101      	movs	r1, #1
 8001ec0:	f106 0025 	add.w	r0, r6, #37	@ 0x25
 8001ec4:	f7ff ff88 	bl	8001dd8 <formatToHexString>
    writeIndex = formatToHexString(data->plate_no, sizeof(data->plate_no), hexString, max_len, writeIndex);
 8001ec8:	462b      	mov	r3, r5
 8001eca:	9000      	str	r0, [sp, #0]
 8001ecc:	4622      	mov	r2, r4
 8001ece:	2114      	movs	r1, #20
 8001ed0:	f106 0026 	add.w	r0, r6, #38	@ 0x26
 8001ed4:	f7ff ff80 	bl	8001dd8 <formatToHexString>
    writeIndex = formatToHexString(&(data->check_sum), sizeof(data->check_sum), hexString, max_len, writeIndex);
 8001ed8:	462b      	mov	r3, r5
 8001eda:	9000      	str	r0, [sp, #0]
 8001edc:	4622      	mov	r2, r4
 8001ede:	2101      	movs	r1, #1
 8001ee0:	f106 003a 	add.w	r0, r6, #58	@ 0x3a
 8001ee4:	f7ff ff78 	bl	8001dd8 <formatToHexString>
    writeIndex = formatToHexString(&(data->end_mask), sizeof(data->end_mask), hexString, max_len, writeIndex);
 8001ee8:	462b      	mov	r3, r5
 8001eea:	9000      	str	r0, [sp, #0]
 8001eec:	4622      	mov	r2, r4
 8001eee:	2101      	movs	r1, #1
 8001ef0:	f106 003b 	add.w	r0, r6, #59	@ 0x3b
 8001ef4:	f7ff ff70 	bl	8001dd8 <formatToHexString>
    if (writeIndex < 0) {
        // Handle error in formatting
        return -1;
    }
    return writeIndex;
}
 8001ef8:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 8001efc:	b002      	add	sp, #8
 8001efe:	bd70      	pop	{r4, r5, r6, pc}

08001f00 <generateLocationInfoMessage>:

int generateLocationInfoMessage(const JT808_LocationInfoReport* report, char* hexString, int max_len) {
 8001f00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001f04:	b0aa      	sub	sp, #168	@ 0xa8
   const uint8_t* fields[] = {
        &(report->start_mask), report->message_type, report->message_length,
 8001f06:	1c43      	adds	r3, r0, #1
   const uint8_t* fields[] = {
 8001f08:	9303      	str	r3, [sp, #12]
        &(report->start_mask), report->message_type, report->message_length,
 8001f0a:	1cc3      	adds	r3, r0, #3
   const uint8_t* fields[] = {
 8001f0c:	9304      	str	r3, [sp, #16]
        report->terminal_phone_number, report->terminal_serial_number, report->alarm,
 8001f0e:	1d43      	adds	r3, r0, #5
   const uint8_t* fields[] = {
 8001f10:	9305      	str	r3, [sp, #20]
        report->terminal_phone_number, report->terminal_serial_number, report->alarm,
 8001f12:	f100 030b 	add.w	r3, r0, #11
   const uint8_t* fields[] = {
 8001f16:	9306      	str	r3, [sp, #24]
        report->terminal_phone_number, report->terminal_serial_number, report->alarm,
 8001f18:	f100 030d 	add.w	r3, r0, #13
   const uint8_t* fields[] = {
 8001f1c:	9307      	str	r3, [sp, #28]
        report->status, report->latitude, report->longitude, report->altitude,
 8001f1e:	f100 0311 	add.w	r3, r0, #17
   const uint8_t* fields[] = {
 8001f22:	9308      	str	r3, [sp, #32]
        report->status, report->latitude, report->longitude, report->altitude,
 8001f24:	f100 0315 	add.w	r3, r0, #21
   const uint8_t* fields[] = {
 8001f28:	9309      	str	r3, [sp, #36]	@ 0x24
        report->status, report->latitude, report->longitude, report->altitude,
 8001f2a:	f100 0319 	add.w	r3, r0, #25
   const uint8_t* fields[] = {
 8001f2e:	930a      	str	r3, [sp, #40]	@ 0x28
        report->status, report->latitude, report->longitude, report->altitude,
 8001f30:	f100 031d 	add.w	r3, r0, #29
   const uint8_t* fields[] = {
 8001f34:	930b      	str	r3, [sp, #44]	@ 0x2c
        report->speed, report->direction, report->timestamp, report->mileage,
 8001f36:	f100 031f 	add.w	r3, r0, #31
   const uint8_t* fields[] = {
 8001f3a:	930c      	str	r3, [sp, #48]	@ 0x30
        report->speed, report->direction, report->timestamp, report->mileage,
 8001f3c:	f100 0321 	add.w	r3, r0, #33	@ 0x21
   const uint8_t* fields[] = {
 8001f40:	930d      	str	r3, [sp, #52]	@ 0x34
        report->speed, report->direction, report->timestamp, report->mileage,
 8001f42:	f100 0323 	add.w	r3, r0, #35	@ 0x23
   const uint8_t* fields[] = {
 8001f46:	930e      	str	r3, [sp, #56]	@ 0x38
        report->speed, report->direction, report->timestamp, report->mileage,
 8001f48:	f100 0329 	add.w	r3, r0, #41	@ 0x29
   const uint8_t* fields[] = {
 8001f4c:	930f      	str	r3, [sp, #60]	@ 0x3c
        report->oil, report->driving_record_speed, report->vehicle_id, report->signal,
 8001f4e:	f100 032f 	add.w	r3, r0, #47	@ 0x2f
   const uint8_t* fields[] = {
 8001f52:	9310      	str	r3, [sp, #64]	@ 0x40
        report->oil, report->driving_record_speed, report->vehicle_id, report->signal,
 8001f54:	f100 0331 	add.w	r3, r0, #49	@ 0x31
   const uint8_t* fields[] = {
 8001f58:	9311      	str	r3, [sp, #68]	@ 0x44
        report->oil, report->driving_record_speed, report->vehicle_id, report->signal,
 8001f5a:	f100 0333 	add.w	r3, r0, #51	@ 0x33
   const uint8_t* fields[] = {
 8001f5e:	9312      	str	r3, [sp, #72]	@ 0x48
        report->oil, report->driving_record_speed, report->vehicle_id, report->signal,
 8001f60:	f100 0336 	add.w	r3, r0, #54	@ 0x36
   const uint8_t* fields[] = {
 8001f64:	9002      	str	r0, [sp, #8]
 8001f66:	9313      	str	r3, [sp, #76]	@ 0x4c
        report->additional, &(report->end_mask)
    };
    int lengths[] = { 1, 2, 2, 6, 2, 4, 4, 4, 4, 2, 2, 2, 6, 6, 2, 2, 3, 1, 9, 1 };
 8001f68:	af16      	add	r7, sp, #88	@ 0x58
        report->additional, &(report->end_mask)
 8001f6a:	f100 0337 	add.w	r3, r0, #55	@ 0x37
 8001f6e:	3040      	adds	r0, #64	@ 0x40
   const uint8_t* fields[] = {
 8001f70:	9015      	str	r0, [sp, #84]	@ 0x54
int generateLocationInfoMessage(const JT808_LocationInfoReport* report, char* hexString, int max_len) {
 8001f72:	460d      	mov	r5, r1
 8001f74:	4616      	mov	r6, r2
    int lengths[] = { 1, 2, 2, 6, 2, 4, 4, 4, 4, 2, 2, 2, 6, 6, 2, 2, 3, 1, 9, 1 };
 8001f76:	490f      	ldr	r1, [pc, #60]	@ (8001fb4 <generateLocationInfoMessage+0xb4>)
   const uint8_t* fields[] = {
 8001f78:	9314      	str	r3, [sp, #80]	@ 0x50
    int lengths[] = { 1, 2, 2, 6, 2, 4, 4, 4, 4, 2, 2, 2, 6, 6, 2, 2, 3, 1, 9, 1 };
 8001f7a:	2250      	movs	r2, #80	@ 0x50
 8001f7c:	4638      	mov	r0, r7

    int writeIndex = 0;
    for (int i = 0; i < sizeof(fields) / sizeof(fields[0]); i++) {
 8001f7e:	2400      	movs	r4, #0
    int lengths[] = { 1, 2, 2, 6, 2, 4, 4, 4, 4, 2, 2, 2, 6, 6, 2, 2, 3, 1, 9, 1 };
 8001f80:	f00b f9d8 	bl	800d334 <memcpy>
        writeIndex = formatToHexString(fields[i], lengths[i], hexString, max_len, writeIndex);
 8001f84:	f10d 0808 	add.w	r8, sp, #8
    int writeIndex = 0;
 8001f88:	4620      	mov	r0, r4
        writeIndex = formatToHexString(fields[i], lengths[i], hexString, max_len, writeIndex);
 8001f8a:	9000      	str	r0, [sp, #0]
 8001f8c:	f857 1024 	ldr.w	r1, [r7, r4, lsl #2]
 8001f90:	f858 0024 	ldr.w	r0, [r8, r4, lsl #2]
 8001f94:	4633      	mov	r3, r6
 8001f96:	462a      	mov	r2, r5
 8001f98:	f7ff ff1e 	bl	8001dd8 <formatToHexString>
        if (writeIndex < 0) return -1;
 8001f9c:	2800      	cmp	r0, #0
 8001f9e:	db05      	blt.n	8001fac <generateLocationInfoMessage+0xac>
    for (int i = 0; i < sizeof(fields) / sizeof(fields[0]); i++) {
 8001fa0:	3401      	adds	r4, #1
 8001fa2:	2c14      	cmp	r4, #20
 8001fa4:	d1f1      	bne.n	8001f8a <generateLocationInfoMessage+0x8a>
    }
    return writeIndex;
}
 8001fa6:	b02a      	add	sp, #168	@ 0xa8
 8001fa8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if (writeIndex < 0) return -1;
 8001fac:	f04f 30ff 	mov.w	r0, #4294967295
 8001fb0:	e7f9      	b.n	8001fa6 <generateLocationInfoMessage+0xa6>
 8001fb2:	bf00      	nop
 8001fb4:	08010610 	.word	0x08010610

08001fb8 <login_to_server>:



int login_to_server(int connect_id, const JT808_TerminalRegistration *reg_msg){
 8001fb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001fbc:	f5ad 7d02 	sub.w	sp, sp, #520	@ 0x208
	uint8_t command[256];  // Increased buffer size
	char hexString[128] = {0};
 8001fc0:	2400      	movs	r4, #0
int login_to_server(int connect_id, const JT808_TerminalRegistration *reg_msg){
 8001fc2:	460f      	mov	r7, r1
	char hexString[128] = {0};
 8001fc4:	ae02      	add	r6, sp, #8
 8001fc6:	227c      	movs	r2, #124	@ 0x7c
 8001fc8:	4621      	mov	r1, r4
int login_to_server(int connect_id, const JT808_TerminalRegistration *reg_msg){
 8001fca:	4605      	mov	r5, r0
	char hexString[128] = {0};
 8001fcc:	a803      	add	r0, sp, #12
 8001fce:	6034      	str	r4, [r6, #0]
 8001fd0:	f00a fb5c 	bl	800c68c <memset>
	int count_check = 0;
	int result = generateRegistrationMessage(reg_msg, hexString, 128);
 8001fd4:	2280      	movs	r2, #128	@ 0x80
 8001fd6:	4631      	mov	r1, r6
 8001fd8:	4638      	mov	r0, r7
 8001fda:	f7ff ff1d 	bl	8001e18 <generateRegistrationMessage>
	if (result < 0) {
 8001fde:	42a0      	cmp	r0, r4
 8001fe0:	da05      	bge.n	8001fee <login_to_server+0x36>
		uart_transmit_string(&huart1,(uint8_t*) "ERROR: FAILED to generate message string\n");
 8001fe2:	4930      	ldr	r1, [pc, #192]	@ (80020a4 <login_to_server+0xec>)
 8001fe4:	4830      	ldr	r0, [pc, #192]	@ (80020a8 <login_to_server+0xf0>)
 8001fe6:	f003 fc47 	bl	8005878 <uart_transmit_string>
		return 1;
 8001fea:	2001      	movs	r0, #1
 8001fec:	e02d      	b.n	800204a <login_to_server+0x92>
	}

	// Format the AT command with the hex message
	snprintf((char*)command, sizeof(command), "AT+QISENDEX=%d,\"%s\"\r\n", connect_id, hexString);
 8001fee:	4a2f      	ldr	r2, [pc, #188]	@ (80020ac <login_to_server+0xf4>)
 8001ff0:	9600      	str	r6, [sp, #0]
 8001ff2:	462b      	mov	r3, r5
 8001ff4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001ff8:	a842      	add	r0, sp, #264	@ 0x108
 8001ffa:	f00a fa4b 	bl	800c494 <sniprintf>
	//snprintf((char *)command, sizeof(command), "AT+QISENDEX=%d,\"%s\"\r\n", connect_id, message);
	send_AT_command((char*)command);
 8001ffe:	a842      	add	r0, sp, #264	@ 0x108
 8002000:	f7ff f996 	bl	8001330 <send_AT_command>

//	while(1){
	while(strstr((char *) response, CHECK_RESPONSE ) == NULL){
 8002004:	4f2a      	ldr	r7, [pc, #168]	@ (80020b0 <login_to_server+0xf8>)
 8002006:	4e2b      	ldr	r6, [pc, #172]	@ (80020b4 <login_to_server+0xfc>)
			count_check = 0;
			memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
			SIM_UART_ReInitializeRxDMA();
			return 0;
		}
		if (strstr((char*) response, "ERROR") != NULL){
 8002008:	f8df 80b8 	ldr.w	r8, [pc, #184]	@ 80020c4 <login_to_server+0x10c>
	while(strstr((char *) response, CHECK_RESPONSE ) == NULL){
 800200c:	4639      	mov	r1, r7
 800200e:	4630      	mov	r0, r6
 8002010:	f00a fb8c 	bl	800c72c <strstr>
 8002014:	b170      	cbz	r0, 8002034 <login_to_server+0x7c>
		snprintf(output_elapsed, 128, "Elapsed Time: %d\n", count_check);
		uart_transmit_string(&huart1, (uint8_t *)output_elapsed);
		receive_response("Check sending to server\n");
		osDelay(100);
	}
	receive_response("Check sending to server\n");
 8002016:	4828      	ldr	r0, [pc, #160]	@ (80020b8 <login_to_server+0x100>)
 8002018:	f7ff f9b4 	bl	8001384 <receive_response>
	osDelay(100);
 800201c:	2064      	movs	r0, #100	@ 0x64
 800201e:	f006 fde5 	bl	8008bec <osDelay>
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8002022:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8002026:	2100      	movs	r1, #0
 8002028:	4822      	ldr	r0, [pc, #136]	@ (80020b4 <login_to_server+0xfc>)
 800202a:	f00a fb2f 	bl	800c68c <memset>
	SIM_UART_ReInitializeRxDMA();
 800202e:	f7ff f98f 	bl	8001350 <SIM_UART_ReInitializeRxDMA>
	return 1;
 8002032:	e7da      	b.n	8001fea <login_to_server+0x32>
		if(count_check >= 50){
 8002034:	2c32      	cmp	r4, #50	@ 0x32
 8002036:	d10c      	bne.n	8002052 <login_to_server+0x9a>
			memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8002038:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 800203c:	2100      	movs	r1, #0
 800203e:	481d      	ldr	r0, [pc, #116]	@ (80020b4 <login_to_server+0xfc>)
 8002040:	f00a fb24 	bl	800c68c <memset>
			SIM_UART_ReInitializeRxDMA();
 8002044:	f7ff f984 	bl	8001350 <SIM_UART_ReInitializeRxDMA>
			return 0;
 8002048:	2000      	movs	r0, #0
}
 800204a:	f50d 7d02 	add.w	sp, sp, #520	@ 0x208
 800204e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (strstr((char*) response, "ERROR") != NULL){
 8002052:	4641      	mov	r1, r8
 8002054:	4630      	mov	r0, r6
 8002056:	f00a fb69 	bl	800c72c <strstr>
 800205a:	4605      	mov	r5, r0
 800205c:	2800      	cmp	r0, #0
 800205e:	d1eb      	bne.n	8002038 <login_to_server+0x80>
		if (strstr((char*)response, "closed") != NULL) {
 8002060:	4916      	ldr	r1, [pc, #88]	@ (80020bc <login_to_server+0x104>)
 8002062:	4630      	mov	r0, r6
 8002064:	f00a fb62 	bl	800c72c <strstr>
 8002068:	b148      	cbz	r0, 800207e <login_to_server+0xc6>
			memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 800206a:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 800206e:	4629      	mov	r1, r5
 8002070:	4810      	ldr	r0, [pc, #64]	@ (80020b4 <login_to_server+0xfc>)
 8002072:	f00a fb0b 	bl	800c68c <memset>
			SIM_UART_ReInitializeRxDMA();
 8002076:	f7ff f96b 	bl	8001350 <SIM_UART_ReInitializeRxDMA>
			return 2;
 800207a:	2002      	movs	r0, #2
 800207c:	e7e5      	b.n	800204a <login_to_server+0x92>
		count_check++;
 800207e:	3401      	adds	r4, #1
		snprintf(output_elapsed, 128, "Elapsed Time: %d\n", count_check);
 8002080:	4a0f      	ldr	r2, [pc, #60]	@ (80020c0 <login_to_server+0x108>)
 8002082:	4623      	mov	r3, r4
 8002084:	2180      	movs	r1, #128	@ 0x80
 8002086:	a822      	add	r0, sp, #136	@ 0x88
 8002088:	f00a fa04 	bl	800c494 <sniprintf>
		uart_transmit_string(&huart1, (uint8_t *)output_elapsed);
 800208c:	a922      	add	r1, sp, #136	@ 0x88
 800208e:	4806      	ldr	r0, [pc, #24]	@ (80020a8 <login_to_server+0xf0>)
 8002090:	f003 fbf2 	bl	8005878 <uart_transmit_string>
		receive_response("Check sending to server\n");
 8002094:	4808      	ldr	r0, [pc, #32]	@ (80020b8 <login_to_server+0x100>)
 8002096:	f7ff f975 	bl	8001384 <receive_response>
		osDelay(100);
 800209a:	2064      	movs	r0, #100	@ 0x64
 800209c:	f006 fda6 	bl	8008bec <osDelay>
 80020a0:	e7b4      	b.n	800200c <login_to_server+0x54>
 80020a2:	bf00      	nop
 80020a4:	08010e15 	.word	0x08010e15
 80020a8:	20006fac 	.word	0x20006fac
 80020ac:	08010e3f 	.word	0x08010e3f
 80020b0:	08010e7a 	.word	0x08010e7a
 80020b4:	20001e78 	.word	0x20001e78
 80020b8:	08010e5c 	.word	0x08010e5c
 80020bc:	08010e55 	.word	0x08010e55
 80020c0:	080108c6 	.word	0x080108c6
 80020c4:	08010d37 	.word	0x08010d37

080020c8 <send_location_to_server>:

int send_location_to_server(int connect_id, const JT808_LocationInfoReport *location_info){
 80020c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80020cc:	f5ad 7d04 	sub.w	sp, sp, #528	@ 0x210
	uint8_t command[256];  // Increased buffer size
	char hexString[131] = {0};
 80020d0:	2400      	movs	r4, #0
int send_location_to_server(int connect_id, const JT808_LocationInfoReport *location_info){
 80020d2:	460f      	mov	r7, r1
	char hexString[131] = {0};
 80020d4:	ae23      	add	r6, sp, #140	@ 0x8c
 80020d6:	227f      	movs	r2, #127	@ 0x7f
 80020d8:	4621      	mov	r1, r4
int send_location_to_server(int connect_id, const JT808_LocationInfoReport *location_info){
 80020da:	4605      	mov	r5, r0
	char hexString[131] = {0};
 80020dc:	a824      	add	r0, sp, #144	@ 0x90
 80020de:	6034      	str	r4, [r6, #0]
 80020e0:	f00a fad4 	bl	800c68c <memset>
	int count_check = 0;

	int count_resend = 0;
	int result = generateLocationInfoMessage(location_info, hexString, 131);
 80020e4:	2283      	movs	r2, #131	@ 0x83
 80020e6:	4631      	mov	r1, r6
 80020e8:	4638      	mov	r0, r7
 80020ea:	f7ff ff09 	bl	8001f00 <generateLocationInfoMessage>
	if (result < 0) {
 80020ee:	42a0      	cmp	r0, r4
 80020f0:	da05      	bge.n	80020fe <send_location_to_server+0x36>
		uart_transmit_string(&huart1,(uint8_t*) "ERROR: FAILED to generate message string\n");
 80020f2:	492e      	ldr	r1, [pc, #184]	@ (80021ac <send_location_to_server+0xe4>)
 80020f4:	482e      	ldr	r0, [pc, #184]	@ (80021b0 <send_location_to_server+0xe8>)
 80020f6:	f003 fbbf 	bl	8005878 <uart_transmit_string>
		return 1;
 80020fa:	2001      	movs	r0, #1
 80020fc:	e031      	b.n	8002162 <send_location_to_server+0x9a>
	}

		// Format the AT command with the hex message
	snprintf((char *) command, sizeof(command), "AT+QISENDEX=%d,\"%s\"\r\n", connect_id, hexString);
 80020fe:	4a2d      	ldr	r2, [pc, #180]	@ (80021b4 <send_location_to_server+0xec>)
 8002100:	9600      	str	r6, [sp, #0]
 8002102:	462b      	mov	r3, r5
 8002104:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002108:	a844      	add	r0, sp, #272	@ 0x110
 800210a:	f00a f9c3 	bl	800c494 <sniprintf>
	send_AT_command((char*)command);
 800210e:	a844      	add	r0, sp, #272	@ 0x110
 8002110:	f7ff f90e 	bl	8001330 <send_AT_command>
	while(strstr((char *) response, "SEND OK") == NULL){
 8002114:	4f28      	ldr	r7, [pc, #160]	@ (80021b8 <send_location_to_server+0xf0>)
 8002116:	4e29      	ldr	r6, [pc, #164]	@ (80021bc <send_location_to_server+0xf4>)
		char output_elapsed[128];
		osDelay(100);
		if (strstr((char*)response, "closed") != NULL) {
 8002118:	f8df 80b0 	ldr.w	r8, [pc, #176]	@ 80021cc <send_location_to_server+0x104>
	while(strstr((char *) response, "SEND OK") == NULL){
 800211c:	4639      	mov	r1, r7
 800211e:	4630      	mov	r0, r6
 8002120:	f00a fb04 	bl	800c72c <strstr>
 8002124:	4605      	mov	r5, r0
 8002126:	b158      	cbz	r0, 8002140 <send_location_to_server+0x78>
		count_check++;
		snprintf(output_elapsed, 128, "Elapsed Time: %d\n", count_check);
		uart_transmit_string(&huart1, (uint8_t *)output_elapsed);
		receive_response("Check sending to server\n");
	}
	receive_response("Check sending to server\n");
 8002128:	4825      	ldr	r0, [pc, #148]	@ (80021c0 <send_location_to_server+0xf8>)
 800212a:	f7ff f92b 	bl	8001384 <receive_response>
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 800212e:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8002132:	2100      	movs	r1, #0
 8002134:	4821      	ldr	r0, [pc, #132]	@ (80021bc <send_location_to_server+0xf4>)
 8002136:	f00a faa9 	bl	800c68c <memset>
	SIM_UART_ReInitializeRxDMA();
 800213a:	f7ff f909 	bl	8001350 <SIM_UART_ReInitializeRxDMA>
	return 1;
 800213e:	e7dc      	b.n	80020fa <send_location_to_server+0x32>
		osDelay(100);
 8002140:	2064      	movs	r0, #100	@ 0x64
 8002142:	f006 fd53 	bl	8008bec <osDelay>
		if (strstr((char*)response, "closed") != NULL) {
 8002146:	4641      	mov	r1, r8
 8002148:	4630      	mov	r0, r6
 800214a:	f00a faef 	bl	800c72c <strstr>
 800214e:	b160      	cbz	r0, 800216a <send_location_to_server+0xa2>
			 memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8002150:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8002154:	4629      	mov	r1, r5
 8002156:	4819      	ldr	r0, [pc, #100]	@ (80021bc <send_location_to_server+0xf4>)
 8002158:	f00a fa98 	bl	800c68c <memset>
			 SIM_UART_ReInitializeRxDMA();
 800215c:	f7ff f8f8 	bl	8001350 <SIM_UART_ReInitializeRxDMA>
			 return 2;
 8002160:	2002      	movs	r0, #2
}
 8002162:	f50d 7d04 	add.w	sp, sp, #528	@ 0x210
 8002166:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if(count_check >= 50){
 800216a:	2c32      	cmp	r4, #50	@ 0x32
 800216c:	d109      	bne.n	8002182 <send_location_to_server+0xba>
			memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 800216e:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8002172:	2100      	movs	r1, #0
 8002174:	4811      	ldr	r0, [pc, #68]	@ (80021bc <send_location_to_server+0xf4>)
 8002176:	f00a fa89 	bl	800c68c <memset>
			SIM_UART_ReInitializeRxDMA();
 800217a:	f7ff f8e9 	bl	8001350 <SIM_UART_ReInitializeRxDMA>
			return 0;
 800217e:	2000      	movs	r0, #0
 8002180:	e7ef      	b.n	8002162 <send_location_to_server+0x9a>
		if (strstr((char*) response, "ERROR") != NULL){
 8002182:	4910      	ldr	r1, [pc, #64]	@ (80021c4 <send_location_to_server+0xfc>)
 8002184:	4630      	mov	r0, r6
 8002186:	f00a fad1 	bl	800c72c <strstr>
 800218a:	2800      	cmp	r0, #0
 800218c:	d1ef      	bne.n	800216e <send_location_to_server+0xa6>
		count_check++;
 800218e:	3401      	adds	r4, #1
		snprintf(output_elapsed, 128, "Elapsed Time: %d\n", count_check);
 8002190:	4a0d      	ldr	r2, [pc, #52]	@ (80021c8 <send_location_to_server+0x100>)
 8002192:	4623      	mov	r3, r4
 8002194:	2180      	movs	r1, #128	@ 0x80
 8002196:	a803      	add	r0, sp, #12
 8002198:	f00a f97c 	bl	800c494 <sniprintf>
		uart_transmit_string(&huart1, (uint8_t *)output_elapsed);
 800219c:	4804      	ldr	r0, [pc, #16]	@ (80021b0 <send_location_to_server+0xe8>)
 800219e:	a903      	add	r1, sp, #12
 80021a0:	f003 fb6a 	bl	8005878 <uart_transmit_string>
		receive_response("Check sending to server\n");
 80021a4:	4806      	ldr	r0, [pc, #24]	@ (80021c0 <send_location_to_server+0xf8>)
 80021a6:	f7ff f8ed 	bl	8001384 <receive_response>
 80021aa:	e7b7      	b.n	800211c <send_location_to_server+0x54>
 80021ac:	08010e15 	.word	0x08010e15
 80021b0:	20006fac 	.word	0x20006fac
 80021b4:	08010e3f 	.word	0x08010e3f
 80021b8:	08010e75 	.word	0x08010e75
 80021bc:	20001e78 	.word	0x20001e78
 80021c0:	08010e5c 	.word	0x08010e5c
 80021c4:	08010d37 	.word	0x08010d37
 80021c8:	080108c6 	.word	0x080108c6
 80021cc:	08010e55 	.word	0x08010e55

080021d0 <check_data_sent_to_server>:


int check_data_sent_to_server(int connect_id){
 80021d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80021d4:	4604      	mov	r4, r0
 80021d6:	f5ad 7d05 	sub.w	sp, sp, #532	@ 0x214
	int count_check = 0;
	uint8_t output[128];
	int count_resend = 0;
	int is_sent_ok = 0;

	Debug_printf("\n\n---------------- IN QIRD: 0X1500h ------------------\n\n");
 80021da:	4886      	ldr	r0, [pc, #536]	@ (80023f4 <check_data_sent_to_server+0x224>)
	while(count_resend < 5){
		snprintf((char *)command, sizeof(command), "AT+QIRD=%d,100\r\n", connect_id);
 80021dc:	f8df 925c 	ldr.w	r9, [pc, #604]	@ 800243c <check_data_sent_to_server+0x26c>
		send_AT_command((char*)command);
		Debug_printf("\n\n---------------- IN QIRD:0X100 SENDING COUNT: %d ------------------\n\n", count_resend);
 80021e0:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8002440 <check_data_sent_to_server+0x270>
	Debug_printf("\n\n---------------- IN QIRD: 0X1500h ------------------\n\n");
 80021e4:	f003 fb6c 	bl	80058c0 <Debug_printf>
 80021e8:	2501      	movs	r5, #1
		snprintf((char *)command, sizeof(command), "AT+QIRD=%d,100\r\n", connect_id);
 80021ea:	4623      	mov	r3, r4
 80021ec:	464a      	mov	r2, r9
 80021ee:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80021f2:	a844      	add	r0, sp, #272	@ 0x110
 80021f4:	f00a f94e 	bl	800c494 <sniprintf>
		send_AT_command((char*)command);
 80021f8:	a844      	add	r0, sp, #272	@ 0x110
 80021fa:	f7ff f899 	bl	8001330 <send_AT_command>
		Debug_printf("\n\n---------------- IN QIRD:0X100 SENDING COUNT: %d ------------------\n\n", count_resend);
 80021fe:	1e69      	subs	r1, r5, #1
 8002200:	4650      	mov	r0, sl
 8002202:	f003 fb5d 	bl	80058c0 <Debug_printf>
		is_sent_ok = 1;
		while(strstr((char *) response, "+QIRD") == NULL){
 8002206:	f8df 81fc 	ldr.w	r8, [pc, #508]	@ 8002404 <check_data_sent_to_server+0x234>
			char output_elapsed[128];
			if (strstr((char*)response, "ERROR") != NULL){
 800220a:	f8df b238 	ldr.w	fp, [pc, #568]	@ 8002444 <check_data_sent_to_server+0x274>
		while(strstr((char *) response, "+QIRD") == NULL){
 800220e:	2700      	movs	r7, #0
 8002210:	4979      	ldr	r1, [pc, #484]	@ (80023f8 <check_data_sent_to_server+0x228>)
 8002212:	4640      	mov	r0, r8
 8002214:	f00a fa8a 	bl	800c72c <strstr>
 8002218:	4606      	mov	r6, r0
 800221a:	b338      	cbz	r0, 800226c <check_data_sent_to_server+0x9c>
			count_resend++;
			count_check = 0;
			osDelay(100);
			continue;
		}
		receive_response("Check received data from server\n");
 800221c:	4877      	ldr	r0, [pc, #476]	@ (80023fc <check_data_sent_to_server+0x22c>)
 800221e:	f7ff f8b1 	bl	8001384 <receive_response>
		char *token = strstr((char*)response, "+QIRD: ");
 8002222:	4977      	ldr	r1, [pc, #476]	@ (8002400 <check_data_sent_to_server+0x230>)
 8002224:	4877      	ldr	r0, [pc, #476]	@ (8002404 <check_data_sent_to_server+0x234>)
 8002226:	f00a fa81 	bl	800c72c <strstr>
		int value = 0;

		if (token != NULL) {
 800222a:	b110      	cbz	r0, 8002232 <check_data_sent_to_server+0x62>
			value = atoi(token + 7);  // Move past "+QIRD: " and convert to integer
 800222c:	3007      	adds	r0, #7
 800222e:	f008 faa4 	bl	800a77a <atoi>
		}
		snprintf((char*)output, 128, "\nNumber of character received: %d\n", value);
 8002232:	4603      	mov	r3, r0
 8002234:	4a74      	ldr	r2, [pc, #464]	@ (8002408 <check_data_sent_to_server+0x238>)
		int value = 0;
 8002236:	4606      	mov	r6, r0
		snprintf((char*)output, 128, "\nNumber of character received: %d\n", value);
 8002238:	2180      	movs	r1, #128	@ 0x80
 800223a:	a804      	add	r0, sp, #16
 800223c:	f00a f92a 	bl	800c494 <sniprintf>
		uart_transmit_string(&huart1, output);
 8002240:	4872      	ldr	r0, [pc, #456]	@ (800240c <check_data_sent_to_server+0x23c>)
 8002242:	a904      	add	r1, sp, #16
 8002244:	f003 fb18 	bl	8005878 <uart_transmit_string>

		uart_transmit_string(&huart1, (uint8_t*) "OUT OF receive data from server\n");
 8002248:	4971      	ldr	r1, [pc, #452]	@ (8002410 <check_data_sent_to_server+0x240>)
 800224a:	4870      	ldr	r0, [pc, #448]	@ (800240c <check_data_sent_to_server+0x23c>)
 800224c:	f003 fb14 	bl	8005878 <uart_transmit_string>
		memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8002250:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8002254:	2100      	movs	r1, #0
 8002256:	486b      	ldr	r0, [pc, #428]	@ (8002404 <check_data_sent_to_server+0x234>)
 8002258:	f00a fa18 	bl	800c68c <memset>
		SIM_UART_ReInitializeRxDMA();
 800225c:	f7ff f878 	bl	8001350 <SIM_UART_ReInitializeRxDMA>
		if(value == 0) {
 8002260:	bb1e      	cbnz	r6, 80022aa <check_data_sent_to_server+0xda>
			count_resend++;
			count_check = 0;
			osDelay(100);
 8002262:	2064      	movs	r0, #100	@ 0x64
 8002264:	f006 fcc2 	bl	8008bec <osDelay>
		is_sent_ok = 1;
 8002268:	2601      	movs	r6, #1
 800226a:	e018      	b.n	800229e <check_data_sent_to_server+0xce>
			if (strstr((char*)response, "ERROR") != NULL){
 800226c:	4659      	mov	r1, fp
 800226e:	4640      	mov	r0, r8
 8002270:	f00a fa5c 	bl	800c72c <strstr>
 8002274:	4601      	mov	r1, r0
 8002276:	2800      	cmp	r0, #0
 8002278:	d066      	beq.n	8002348 <check_data_sent_to_server+0x178>
				Debug_printf("\n\n---------------- IN QIRD: 0X1500h: ERROR ------------------\n\n");
 800227a:	4866      	ldr	r0, [pc, #408]	@ (8002414 <check_data_sent_to_server+0x244>)
 800227c:	f003 fb20 	bl	80058c0 <Debug_printf>
				memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8002280:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8002284:	4631      	mov	r1, r6
				memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8002286:	485f      	ldr	r0, [pc, #380]	@ (8002404 <check_data_sent_to_server+0x234>)
 8002288:	f00a fa00 	bl	800c68c <memset>
				SIM_UART_ReInitializeRxDMA();
 800228c:	f7ff f860 	bl	8001350 <SIM_UART_ReInitializeRxDMA>
				send_AT_command((char*)command);
 8002290:	a844      	add	r0, sp, #272	@ 0x110
 8002292:	f7ff f84d 	bl	8001330 <send_AT_command>
			osDelay(100);
 8002296:	2064      	movs	r0, #100	@ 0x64
 8002298:	f006 fca8 	bl	8008bec <osDelay>
			continue;
 800229c:	2600      	movs	r6, #0
	while(count_resend < 5){
 800229e:	3501      	adds	r5, #1
 80022a0:	2d06      	cmp	r5, #6
 80022a2:	d1a2      	bne.n	80021ea <check_data_sent_to_server+0x1a>
		}
		else break;
	}
//	osDelay(50);
// --------------------------------------------------------------End of  QIRD ------------------------------------------------------------
	if(is_sent_ok == 1){
 80022a4:	2e00      	cmp	r6, #0
 80022a6:	f000 80a1 	beq.w	80023ec <check_data_sent_to_server+0x21c>
//		memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
//		SIM_UART_ReInitializeRxDMA();
	//Reset value
		count_check = 0;
		count_resend = 0;
		Debug_printf("\n\n---------------- IN QISEND: 0X0 ------------------\n\n");
 80022aa:	485b      	ldr	r0, [pc, #364]	@ (8002418 <check_data_sent_to_server+0x248>)

		while(count_resend < 3){
			is_sent_ok = 1;
			snprintf((char *)command, sizeof(command), "AT+QISEND=%d,0\r\n", connect_id);
 80022ac:	f8df 9198 	ldr.w	r9, [pc, #408]	@ 8002448 <check_data_sent_to_server+0x278>
			send_AT_command((char*)command);
			Debug_printf("\n\n---------------- IN QISEND:0X0 SENDING COUNT: %d ------------------\n\n", count_resend);
 80022b0:	f8df a198 	ldr.w	sl, [pc, #408]	@ 800244c <check_data_sent_to_server+0x27c>
		Debug_printf("\n\n---------------- IN QISEND: 0X0 ------------------\n\n");
 80022b4:	f003 fb04 	bl	80058c0 <Debug_printf>
		count_resend = 0;
 80022b8:	2500      	movs	r5, #0
		count_check = 0;
 80022ba:	462f      	mov	r7, r5
			snprintf((char *)command, sizeof(command), "AT+QISEND=%d,0\r\n", connect_id);
 80022bc:	4623      	mov	r3, r4
 80022be:	464a      	mov	r2, r9
 80022c0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80022c4:	a844      	add	r0, sp, #272	@ 0x110
 80022c6:	f00a f8e5 	bl	800c494 <sniprintf>
			send_AT_command((char*)command);
 80022ca:	a844      	add	r0, sp, #272	@ 0x110
 80022cc:	f7ff f830 	bl	8001330 <send_AT_command>
			Debug_printf("\n\n---------------- IN QISEND:0X0 SENDING COUNT: %d ------------------\n\n", count_resend);
 80022d0:	4629      	mov	r1, r5
 80022d2:	4650      	mov	r0, sl
 80022d4:	f003 faf4 	bl	80058c0 <Debug_printf>
			while(strstr((char *) response, CHECK_RESPONSE) == NULL){
 80022d8:	f8df 8128 	ldr.w	r8, [pc, #296]	@ 8002404 <check_data_sent_to_server+0x234>
					SIM_UART_ReInitializeRxDMA();
					send_AT_command((char*)command);
					is_sent_ok = 0;
					break;
				}
				if (strstr((char*) response, "ERROR") != NULL){
 80022dc:	f8df b164 	ldr.w	fp, [pc, #356]	@ 8002444 <check_data_sent_to_server+0x274>
			while(strstr((char *) response, CHECK_RESPONSE) == NULL){
 80022e0:	494e      	ldr	r1, [pc, #312]	@ (800241c <check_data_sent_to_server+0x24c>)
 80022e2:	4640      	mov	r0, r8
 80022e4:	f00a fa22 	bl	800c72c <strstr>
 80022e8:	4606      	mov	r6, r0
 80022ea:	2800      	cmp	r0, #0
 80022ec:	d043      	beq.n	8002376 <check_data_sent_to_server+0x1a6>

			if(is_sent_ok == 0) {
				count_resend++;
				continue;
			}
			receive_response("Check sending to server\n");
 80022ee:	484c      	ldr	r0, [pc, #304]	@ (8002420 <check_data_sent_to_server+0x250>)
			int sentBytes, ackedBytes, unackedBytes;

			int result = sscanf((char*)response, "AT+QISEND=0,0 +QISEND: %d,%d,%d", &sentBytes, &ackedBytes, &unackedBytes);
 80022f0:	ae24      	add	r6, sp, #144	@ 0x90
			receive_response("Check sending to server\n");
 80022f2:	f7ff f847 	bl	8001384 <receive_response>
			int result = sscanf((char*)response, "AT+QISEND=0,0 +QISEND: %d,%d,%d", &sentBytes, &ackedBytes, &unackedBytes);
 80022f6:	494b      	ldr	r1, [pc, #300]	@ (8002424 <check_data_sent_to_server+0x254>)
 80022f8:	4842      	ldr	r0, [pc, #264]	@ (8002404 <check_data_sent_to_server+0x234>)
 80022fa:	9600      	str	r6, [sp, #0]
 80022fc:	ab03      	add	r3, sp, #12
 80022fe:	aa02      	add	r2, sp, #8
 8002300:	f00a f91c 	bl	800c53c <siscanf>
			snprintf((char *)output, 128, "Lost Transmit BYTES: %d\n", unackedBytes);
 8002304:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8002306:	4a48      	ldr	r2, [pc, #288]	@ (8002428 <check_data_sent_to_server+0x258>)
			int result = sscanf((char*)response, "AT+QISEND=0,0 +QISEND: %d,%d,%d", &sentBytes, &ackedBytes, &unackedBytes);
 8002308:	4680      	mov	r8, r0
			snprintf((char *)output, 128, "Lost Transmit BYTES: %d\n", unackedBytes);
 800230a:	2180      	movs	r1, #128	@ 0x80
 800230c:	a804      	add	r0, sp, #16
 800230e:	f00a f8c1 	bl	800c494 <sniprintf>
			uart_transmit_string(&huart1, output);
 8002312:	483e      	ldr	r0, [pc, #248]	@ (800240c <check_data_sent_to_server+0x23c>)
 8002314:	a904      	add	r1, sp, #16
 8002316:	f003 faaf 	bl	8005878 <uart_transmit_string>
			memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 800231a:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 800231e:	2100      	movs	r1, #0
 8002320:	4838      	ldr	r0, [pc, #224]	@ (8002404 <check_data_sent_to_server+0x234>)
 8002322:	f00a f9b3 	bl	800c68c <memset>
			SIM_UART_ReInitializeRxDMA();
 8002326:	f7ff f813 	bl	8001350 <SIM_UART_ReInitializeRxDMA>
			if (result == 3) {
 800232a:	f1b8 0f03 	cmp.w	r8, #3
 800232e:	d15b      	bne.n	80023e8 <check_data_sent_to_server+0x218>
				if (unackedBytes > 0) {
 8002330:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8002332:	2b00      	cmp	r3, #0
 8002334:	dc30      	bgt.n	8002398 <check_data_sent_to_server+0x1c8>
					count_resend++;
					is_sent_ok = 0;
				}
				else{
					Debug_printf("NO DATA LOSS\n");
 8002336:	483d      	ldr	r0, [pc, #244]	@ (800242c <check_data_sent_to_server+0x25c>)
 8002338:	f003 fac2 	bl	80058c0 <Debug_printf>
					break;
 800233c:	2601      	movs	r6, #1
	}
	else{
		Debug_printf("\n\n------------------QIRD ERROR SKIP QISEND0X0 ----------------------\n\n");
	}
	return is_sent_ok;
}
 800233e:	4630      	mov	r0, r6
 8002340:	f50d 7d05 	add.w	sp, sp, #532	@ 0x214
 8002344:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if(count_check >= 10){
 8002348:	2f0a      	cmp	r7, #10
 800234a:	d102      	bne.n	8002352 <check_data_sent_to_server+0x182>
				memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 800234c:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8002350:	e799      	b.n	8002286 <check_data_sent_to_server+0xb6>
			osDelay(100);
 8002352:	2064      	movs	r0, #100	@ 0x64
 8002354:	f006 fc4a 	bl	8008bec <osDelay>
			snprintf(output_elapsed, 128, "Elapsed Time +QISEND: 0,0: %d\n", count_check);
 8002358:	463b      	mov	r3, r7
 800235a:	4a35      	ldr	r2, [pc, #212]	@ (8002430 <check_data_sent_to_server+0x260>)
 800235c:	2180      	movs	r1, #128	@ 0x80
 800235e:	a824      	add	r0, sp, #144	@ 0x90
 8002360:	f00a f898 	bl	800c494 <sniprintf>
			uart_transmit_string(&huart1, (uint8_t *)output_elapsed);
 8002364:	4829      	ldr	r0, [pc, #164]	@ (800240c <check_data_sent_to_server+0x23c>)
 8002366:	a924      	add	r1, sp, #144	@ 0x90
 8002368:	f003 fa86 	bl	8005878 <uart_transmit_string>
			receive_response("Check received data from server\n");
 800236c:	4823      	ldr	r0, [pc, #140]	@ (80023fc <check_data_sent_to_server+0x22c>)
			count_check++;
 800236e:	3701      	adds	r7, #1
			receive_response("Check received data from server\n");
 8002370:	f7ff f808 	bl	8001384 <receive_response>
 8002374:	e74c      	b.n	8002210 <check_data_sent_to_server+0x40>
				osDelay(100);
 8002376:	2064      	movs	r0, #100	@ 0x64
 8002378:	f006 fc38 	bl	8008bec <osDelay>
				if(count_check >= 50){
 800237c:	2f31      	cmp	r7, #49	@ 0x31
 800237e:	dd10      	ble.n	80023a2 <check_data_sent_to_server+0x1d2>
					memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8002380:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8002384:	4631      	mov	r1, r6
 8002386:	481f      	ldr	r0, [pc, #124]	@ (8002404 <check_data_sent_to_server+0x234>)
 8002388:	f00a f980 	bl	800c68c <memset>
					SIM_UART_ReInitializeRxDMA();
 800238c:	f7fe ffe0 	bl	8001350 <SIM_UART_ReInitializeRxDMA>
					send_AT_command((char*)command);
 8002390:	a844      	add	r0, sp, #272	@ 0x110
 8002392:	f7fe ffcd 	bl	8001330 <send_AT_command>
					count_check = 0;
 8002396:	4637      	mov	r7, r6
					count_resend++;
 8002398:	3501      	adds	r5, #1
					is_sent_ok = 0;
 800239a:	2600      	movs	r6, #0
		while(count_resend < 3){
 800239c:	2d03      	cmp	r5, #3
 800239e:	d18d      	bne.n	80022bc <check_data_sent_to_server+0xec>
 80023a0:	e7cd      	b.n	800233e <check_data_sent_to_server+0x16e>
				if (strstr((char*) response, "ERROR") != NULL){
 80023a2:	4659      	mov	r1, fp
 80023a4:	4640      	mov	r0, r8
 80023a6:	f00a f9c1 	bl	800c72c <strstr>
 80023aa:	b170      	cbz	r0, 80023ca <check_data_sent_to_server+0x1fa>
					Debug_printf("\n\n---------------- IN QISEND: 0X0: ERROR ------------------\n\n");
 80023ac:	4821      	ldr	r0, [pc, #132]	@ (8002434 <check_data_sent_to_server+0x264>)
 80023ae:	f003 fa87 	bl	80058c0 <Debug_printf>
					memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 80023b2:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 80023b6:	4631      	mov	r1, r6
 80023b8:	4812      	ldr	r0, [pc, #72]	@ (8002404 <check_data_sent_to_server+0x234>)
 80023ba:	f00a f967 	bl	800c68c <memset>
					SIM_UART_ReInitializeRxDMA();
 80023be:	f7fe ffc7 	bl	8001350 <SIM_UART_ReInitializeRxDMA>
					send_AT_command((char*)command);
 80023c2:	a844      	add	r0, sp, #272	@ 0x110
 80023c4:	f7fe ffb4 	bl	8001330 <send_AT_command>
					break;
 80023c8:	e7e6      	b.n	8002398 <check_data_sent_to_server+0x1c8>
				count_check++;
 80023ca:	3701      	adds	r7, #1
				snprintf(output_elapsed, 128, "Elapsed Time +QISEND: 0,0: %d\n", count_check);
 80023cc:	4a18      	ldr	r2, [pc, #96]	@ (8002430 <check_data_sent_to_server+0x260>)
 80023ce:	463b      	mov	r3, r7
 80023d0:	2180      	movs	r1, #128	@ 0x80
 80023d2:	a824      	add	r0, sp, #144	@ 0x90
 80023d4:	f00a f85e 	bl	800c494 <sniprintf>
				uart_transmit_string(&huart1, (uint8_t *)output_elapsed);
 80023d8:	480c      	ldr	r0, [pc, #48]	@ (800240c <check_data_sent_to_server+0x23c>)
 80023da:	a924      	add	r1, sp, #144	@ 0x90
 80023dc:	f003 fa4c 	bl	8005878 <uart_transmit_string>
				receive_response("Check sending to server\n");
 80023e0:	480f      	ldr	r0, [pc, #60]	@ (8002420 <check_data_sent_to_server+0x250>)
 80023e2:	f7fe ffcf 	bl	8001384 <receive_response>
 80023e6:	e77b      	b.n	80022e0 <check_data_sent_to_server+0x110>
 80023e8:	2601      	movs	r6, #1
 80023ea:	e7d7      	b.n	800239c <check_data_sent_to_server+0x1cc>
		Debug_printf("\n\n------------------QIRD ERROR SKIP QISEND0X0 ----------------------\n\n");
 80023ec:	4812      	ldr	r0, [pc, #72]	@ (8002438 <check_data_sent_to_server+0x268>)
 80023ee:	f003 fa67 	bl	80058c0 <Debug_printf>
	return is_sent_ok;
 80023f2:	e7a4      	b.n	800233e <check_data_sent_to_server+0x16e>
 80023f4:	08010e7d 	.word	0x08010e7d
 80023f8:	08010f8f 	.word	0x08010f8f
 80023fc:	08010f6e 	.word	0x08010f6e
 8002400:	08010f95 	.word	0x08010f95
 8002404:	20001e78 	.word	0x20001e78
 8002408:	08010f9d 	.word	0x08010f9d
 800240c:	20006fac 	.word	0x20006fac
 8002410:	08010fc0 	.word	0x08010fc0
 8002414:	08010f0f 	.word	0x08010f0f
 8002418:	08010fe1 	.word	0x08010fe1
 800241c:	08010e7a 	.word	0x08010e7a
 8002420:	08010e5c 	.word	0x08010e5c
 8002424:	080110af 	.word	0x080110af
 8002428:	080110cf 	.word	0x080110cf
 800242c:	080110e8 	.word	0x080110e8
 8002430:	08010f4f 	.word	0x08010f4f
 8002434:	08011071 	.word	0x08011071
 8002438:	080110f6 	.word	0x080110f6
 800243c:	08010eb6 	.word	0x08010eb6
 8002440:	08010ec7 	.word	0x08010ec7
 8002444:	08010d37 	.word	0x08010d37
 8002448:	08011018 	.word	0x08011018
 800244c:	08011029 	.word	0x08011029

08002450 <close_connection>:


int close_connection(int connect_id){
 8002450:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002452:	b0c1      	sub	sp, #260	@ 0x104
 8002454:	4603      	mov	r3, r0
	uint8_t command[256];
	snprintf((char *)command, sizeof(command), "AT+QICLOSE=%d\r\n", connect_id);
 8002456:	4a1e      	ldr	r2, [pc, #120]	@ (80024d0 <close_connection+0x80>)
	send_AT_command((char*)command);
	int count_check = 0;
	while(strstr((char *) response, CHECK_RESPONSE) == NULL){
 8002458:	4e1e      	ldr	r6, [pc, #120]	@ (80024d4 <close_connection+0x84>)
 800245a:	4d1f      	ldr	r5, [pc, #124]	@ (80024d8 <close_connection+0x88>)
		receive_response("Check CLOSING to server\n");
 800245c:	4f1f      	ldr	r7, [pc, #124]	@ (80024dc <close_connection+0x8c>)
	snprintf((char *)command, sizeof(command), "AT+QICLOSE=%d\r\n", connect_id);
 800245e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002462:	4668      	mov	r0, sp
 8002464:	f00a f816 	bl	800c494 <sniprintf>
	send_AT_command((char*)command);
 8002468:	4668      	mov	r0, sp
 800246a:	f7fe ff61 	bl	8001330 <send_AT_command>
	while(strstr((char *) response, CHECK_RESPONSE) == NULL){
 800246e:	2406      	movs	r4, #6
 8002470:	4631      	mov	r1, r6
 8002472:	4628      	mov	r0, r5
 8002474:	f00a f95a 	bl	800c72c <strstr>
 8002478:	b178      	cbz	r0, 800249a <close_connection+0x4a>
			return 0;
		}
		osDelay(1000);
		count_check++;
	}
	receive_response("Check CLOSING to server\n");
 800247a:	4818      	ldr	r0, [pc, #96]	@ (80024dc <close_connection+0x8c>)
 800247c:	f7fe ff82 	bl	8001384 <receive_response>
	osDelay(100);
 8002480:	2064      	movs	r0, #100	@ 0x64
 8002482:	f006 fbb3 	bl	8008bec <osDelay>
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8002486:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 800248a:	2100      	movs	r1, #0
 800248c:	4812      	ldr	r0, [pc, #72]	@ (80024d8 <close_connection+0x88>)
 800248e:	f00a f8fd 	bl	800c68c <memset>
	SIM_UART_ReInitializeRxDMA();
 8002492:	f7fe ff5d 	bl	8001350 <SIM_UART_ReInitializeRxDMA>
	return 1;
 8002496:	2001      	movs	r0, #1
 8002498:	e010      	b.n	80024bc <close_connection+0x6c>
		receive_response("Check CLOSING to server\n");
 800249a:	4638      	mov	r0, r7
 800249c:	f7fe ff72 	bl	8001384 <receive_response>
		if (strstr((char*)response, "ERROR") != NULL){
 80024a0:	490f      	ldr	r1, [pc, #60]	@ (80024e0 <close_connection+0x90>)
 80024a2:	4628      	mov	r0, r5
 80024a4:	f00a f942 	bl	800c72c <strstr>
 80024a8:	b150      	cbz	r0, 80024c0 <close_connection+0x70>
			memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 80024aa:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 80024ae:	2100      	movs	r1, #0
 80024b0:	4809      	ldr	r0, [pc, #36]	@ (80024d8 <close_connection+0x88>)
 80024b2:	f00a f8eb 	bl	800c68c <memset>
			SIM_UART_ReInitializeRxDMA();
 80024b6:	f7fe ff4b 	bl	8001350 <SIM_UART_ReInitializeRxDMA>
			return 0;
 80024ba:	2000      	movs	r0, #0
}
 80024bc:	b041      	add	sp, #260	@ 0x104
 80024be:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if(count_check >= 5){
 80024c0:	3c01      	subs	r4, #1
 80024c2:	d0f2      	beq.n	80024aa <close_connection+0x5a>
		osDelay(1000);
 80024c4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80024c8:	f006 fb90 	bl	8008bec <osDelay>
		count_check++;
 80024cc:	e7d0      	b.n	8002470 <close_connection+0x20>
 80024ce:	bf00      	nop
 80024d0:	0801113d 	.word	0x0801113d
 80024d4:	08010e7a 	.word	0x08010e7a
 80024d8:	20001e78 	.word	0x20001e78
 80024dc:	0801114d 	.word	0x0801114d
 80024e0:	08010d37 	.word	0x08010d37

080024e4 <extract_time_CCLK>:


int extract_time_CCLK(uint8_t* message){
 80024e4:	b510      	push	{r4, lr}
 80024e6:	b0ae      	sub	sp, #184	@ 0xb8
	int year, month, day, hour, minute, second, timezone;
	uint8_t output_buffer[128];

	sscanf((char*) message, "AT+CCLK?\r\n+CCLK: \"%2d/%2d/%2d,%2d:%2d:%2d%2d\"",
 80024e8:	ab0d      	add	r3, sp, #52	@ 0x34
 80024ea:	9304      	str	r3, [sp, #16]
 80024ec:	ab0c      	add	r3, sp, #48	@ 0x30
 80024ee:	9303      	str	r3, [sp, #12]
 80024f0:	ab0b      	add	r3, sp, #44	@ 0x2c
 80024f2:	9302      	str	r3, [sp, #8]
 80024f4:	ab0a      	add	r3, sp, #40	@ 0x28
 80024f6:	9301      	str	r3, [sp, #4]
 80024f8:	ab09      	add	r3, sp, #36	@ 0x24
 80024fa:	9300      	str	r3, [sp, #0]
 80024fc:	aa07      	add	r2, sp, #28
 80024fe:	ab08      	add	r3, sp, #32
 8002500:	4925      	ldr	r1, [pc, #148]	@ (8002598 <extract_time_CCLK+0xb4>)
 8002502:	f00a f81b 	bl	800c53c <siscanf>
						&year, &month, &day, &hour, &minute, &second, &timezone);
	hour += 1;
 8002506:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8002508:	1c5a      	adds	r2, r3, #1
	if (hour >= 24) {
 800250a:	2a17      	cmp	r2, #23
		hour -= 24;
 800250c:	bfc3      	ittte	gt
 800250e:	3b17      	subgt	r3, #23
 8002510:	930a      	strgt	r3, [sp, #40]	@ 0x28
		day += 1;
 8002512:	9b09      	ldrgt	r3, [sp, #36]	@ 0x24
	hour += 1;
 8002514:	920a      	strle	r2, [sp, #40]	@ 0x28
		day += 1;
 8002516:	bfc4      	itt	gt
 8002518:	3301      	addgt	r3, #1
 800251a:	9309      	strgt	r3, [sp, #36]	@ 0x24
		// Simplified example: Add code here to handle month/day overflow as needed
	}
	if(year < 24) return 0;
 800251c:	9b07      	ldr	r3, [sp, #28]
 800251e:	2b17      	cmp	r3, #23
 8002520:	dd37      	ble.n	8002592 <extract_time_CCLK+0xae>
	rmc_jt.date.Yr = year;
 8002522:	4c1e      	ldr	r4, [pc, #120]	@ (800259c <extract_time_CCLK+0xb8>)
	rmc_jt.date.Mon = month;
	rmc_jt.date.Day = day;
	rmc_jt.tim.hour = hour;
 8002524:	980a      	ldr	r0, [sp, #40]	@ 0x28
	rmc_jt.tim.min = minute;
 8002526:	990b      	ldr	r1, [sp, #44]	@ 0x2c
	rmc_jt.tim.sec = second;
 8002528:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
	rmc_jt.date.Yr = year;
 800252a:	61a3      	str	r3, [r4, #24]
	rmc_jt.date.Mon = month;
 800252c:	9b08      	ldr	r3, [sp, #32]
 800252e:	6163      	str	r3, [r4, #20]
	rmc_jt.tim.hour = hour;
 8002530:	6020      	str	r0, [r4, #0]
	rmc_jt.date.Day = day;
 8002532:	9b09      	ldr	r3, [sp, #36]	@ 0x24
	rmc_jt.tim.min = minute;
 8002534:	6061      	str	r1, [r4, #4]
	rmc_jt.tim.sec = second;
 8002536:	60a2      	str	r2, [r4, #8]
	set_time(hour, minute, second);
 8002538:	b2c9      	uxtb	r1, r1
 800253a:	b2d2      	uxtb	r2, r2
 800253c:	b2c0      	uxtb	r0, r0
	rmc_jt.date.Day = day;
 800253e:	6123      	str	r3, [r4, #16]
	set_time(hour, minute, second);
 8002540:	f001 fafa 	bl	8003b38 <set_time>
	set_date(year, month, day);
 8002544:	f89d 2024 	ldrb.w	r2, [sp, #36]	@ 0x24
 8002548:	f89d 1020 	ldrb.w	r1, [sp, #32]
 800254c:	f89d 001c 	ldrb.w	r0, [sp, #28]
 8002550:	f001 fb10 	bl	8003b74 <set_date>
	snprintf((char*)output_buffer, 128, "Adjusted time to GMT+8: 20%02d/%02d/%02d, %02d:%02d:%02d\n", rmc_jt.date.Yr, rmc_jt.date.Mon, rmc_jt.date.Day, rmc_jt.tim.hour, rmc_jt.tim.min, rmc_jt.tim.sec);
 8002554:	68a3      	ldr	r3, [r4, #8]
 8002556:	9304      	str	r3, [sp, #16]
 8002558:	6863      	ldr	r3, [r4, #4]
 800255a:	9303      	str	r3, [sp, #12]
 800255c:	6823      	ldr	r3, [r4, #0]
 800255e:	9302      	str	r3, [sp, #8]
 8002560:	6923      	ldr	r3, [r4, #16]
 8002562:	9301      	str	r3, [sp, #4]
 8002564:	6963      	ldr	r3, [r4, #20]
 8002566:	9300      	str	r3, [sp, #0]
 8002568:	69a3      	ldr	r3, [r4, #24]
 800256a:	4a0d      	ldr	r2, [pc, #52]	@ (80025a0 <extract_time_CCLK+0xbc>)
 800256c:	2180      	movs	r1, #128	@ 0x80
 800256e:	a80e      	add	r0, sp, #56	@ 0x38
 8002570:	f009 ff90 	bl	800c494 <sniprintf>
	uart_transmit_string(&huart1, (uint8_t*) "RTC Time: ");
 8002574:	490b      	ldr	r1, [pc, #44]	@ (80025a4 <extract_time_CCLK+0xc0>)
 8002576:	480c      	ldr	r0, [pc, #48]	@ (80025a8 <extract_time_CCLK+0xc4>)
 8002578:	f003 f97e 	bl	8005878 <uart_transmit_string>
	uart_transmit_string(&huart1, (uint8_t*) "\n");
 800257c:	490b      	ldr	r1, [pc, #44]	@ (80025ac <extract_time_CCLK+0xc8>)
 800257e:	480a      	ldr	r0, [pc, #40]	@ (80025a8 <extract_time_CCLK+0xc4>)
 8002580:	f003 f97a 	bl	8005878 <uart_transmit_string>
	uart_transmit_string(&huart1, output_buffer);
 8002584:	4808      	ldr	r0, [pc, #32]	@ (80025a8 <extract_time_CCLK+0xc4>)
 8002586:	a90e      	add	r1, sp, #56	@ 0x38
 8002588:	f003 f976 	bl	8005878 <uart_transmit_string>
	return 1;
 800258c:	2001      	movs	r0, #1
}
 800258e:	b02e      	add	sp, #184	@ 0xb8
 8002590:	bd10      	pop	{r4, pc}
	if(year < 24) return 0;
 8002592:	2000      	movs	r0, #0
 8002594:	e7fb      	b.n	800258e <extract_time_CCLK+0xaa>
 8002596:	bf00      	nop
 8002598:	08011166 	.word	0x08011166
 800259c:	20001bc0 	.word	0x20001bc0
 80025a0:	08011194 	.word	0x08011194
 80025a4:	080111ce 	.word	0x080111ce
 80025a8:	20006fac 	.word	0x20006fac
 80025ac:	08011a81 	.word	0x08011a81

080025b0 <getCurrentTime>:


int getCurrentTime(){
 80025b0:	b570      	push	{r4, r5, r6, lr}
	int count_check = 0;
	send_AT_command("AT+CCLK?\r\n");
 80025b2:	4818      	ldr	r0, [pc, #96]	@ (8002614 <getCurrentTime+0x64>)
	while(strstr((char *) response, CHECK_RESPONSE) == NULL){
 80025b4:	4d18      	ldr	r5, [pc, #96]	@ (8002618 <getCurrentTime+0x68>)
			count_check = 0;
			memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
			SIM_UART_ReInitializeRxDMA();
			return 0;
		}
		receive_response("Get time\n");
 80025b6:	4e19      	ldr	r6, [pc, #100]	@ (800261c <getCurrentTime+0x6c>)
	send_AT_command("AT+CCLK?\r\n");
 80025b8:	f7fe feba 	bl	8001330 <send_AT_command>
	while(strstr((char *) response, CHECK_RESPONSE) == NULL){
 80025bc:	2404      	movs	r4, #4
 80025be:	4818      	ldr	r0, [pc, #96]	@ (8002620 <getCurrentTime+0x70>)
 80025c0:	4629      	mov	r1, r5
 80025c2:	f00a f8b3 	bl	800c72c <strstr>
 80025c6:	b190      	cbz	r0, 80025ee <getCurrentTime+0x3e>
		osDelay(100);
		count_check++;
	}
	receive_response("Get time\n");
 80025c8:	4814      	ldr	r0, [pc, #80]	@ (800261c <getCurrentTime+0x6c>)
 80025ca:	f7fe fedb 	bl	8001384 <receive_response>
	int result_extract = extract_time_CCLK(response);
 80025ce:	4814      	ldr	r0, [pc, #80]	@ (8002620 <getCurrentTime+0x70>)
 80025d0:	f7ff ff88 	bl	80024e4 <extract_time_CCLK>
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 80025d4:	f44f 72c0 	mov.w	r2, #384	@ 0x180
	int result_extract = extract_time_CCLK(response);
 80025d8:	4604      	mov	r4, r0
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 80025da:	2100      	movs	r1, #0
 80025dc:	4810      	ldr	r0, [pc, #64]	@ (8002620 <getCurrentTime+0x70>)
 80025de:	f00a f855 	bl	800c68c <memset>
	SIM_UART_ReInitializeRxDMA();
 80025e2:	f7fe feb5 	bl	8001350 <SIM_UART_ReInitializeRxDMA>
	if(result_extract)
 80025e6:	1e20      	subs	r0, r4, #0
 80025e8:	bf18      	it	ne
 80025ea:	2001      	movne	r0, #1
 80025ec:	e00a      	b.n	8002604 <getCurrentTime+0x54>
		if(count_check >= 3 ){
 80025ee:	3c01      	subs	r4, #1
 80025f0:	d109      	bne.n	8002606 <getCurrentTime+0x56>
			memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 80025f2:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 80025f6:	4621      	mov	r1, r4
 80025f8:	4809      	ldr	r0, [pc, #36]	@ (8002620 <getCurrentTime+0x70>)
 80025fa:	f00a f847 	bl	800c68c <memset>
			SIM_UART_ReInitializeRxDMA();
 80025fe:	f7fe fea7 	bl	8001350 <SIM_UART_ReInitializeRxDMA>
			return 0;
 8002602:	4620      	mov	r0, r4
		return 1;
	else return 0;
}
 8002604:	bd70      	pop	{r4, r5, r6, pc}
		receive_response("Get time\n");
 8002606:	4630      	mov	r0, r6
 8002608:	f7fe febc 	bl	8001384 <receive_response>
		osDelay(100);
 800260c:	2064      	movs	r0, #100	@ 0x64
 800260e:	f006 faed 	bl	8008bec <osDelay>
		count_check++;
 8002612:	e7d4      	b.n	80025be <getCurrentTime+0xe>
 8002614:	080111d9 	.word	0x080111d9
 8002618:	08010e7a 	.word	0x08010e7a
 800261c:	080111e4 	.word	0x080111e4
 8002620:	20001e78 	.word	0x20001e78

08002624 <receiveRMCDataWithAddrGSM>:


void receiveRMCDataWithAddrGSM(){
 8002624:	b530      	push	{r4, r5, lr}
	uint8_t output_buffer[70];
	uart_transmit_string(&huart1, (uint8_t*)"\\Inside Receiving Data at GSM\n\n");
 8002626:	4963      	ldr	r1, [pc, #396]	@ (80027b4 <receiveRMCDataWithAddrGSM+0x190>)
 8002628:	4863      	ldr	r0, [pc, #396]	@ (80027b8 <receiveRMCDataWithAddrGSM+0x194>)
	osStatus_t status = osMessageQueueGet(RMC_MailQGSMIdHandle, &receivedDataGSM, NULL, 3000); // Wait for mail
 800262a:	4d64      	ldr	r5, [pc, #400]	@ (80027bc <receiveRMCDataWithAddrGSM+0x198>)
void receiveRMCDataWithAddrGSM(){
 800262c:	b09b      	sub	sp, #108	@ 0x6c
	uart_transmit_string(&huart1, (uint8_t*)"\\Inside Receiving Data at GSM\n\n");
 800262e:	f003 f923 	bl	8005878 <uart_transmit_string>
	osStatus_t status = osMessageQueueGet(RMC_MailQGSMIdHandle, &receivedDataGSM, NULL, 3000); // Wait for mail
 8002632:	4863      	ldr	r0, [pc, #396]	@ (80027c0 <receiveRMCDataWithAddrGSM+0x19c>)
 8002634:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8002638:	6800      	ldr	r0, [r0, #0]
 800263a:	2200      	movs	r2, #0
 800263c:	4629      	mov	r1, r5
 800263e:	f006 fb7b 	bl	8008d38 <osMessageQueueGet>
	if(status == osOK){
 8002642:	2800      	cmp	r0, #0
 8002644:	f040 80a3 	bne.w	800278e <receiveRMCDataWithAddrGSM+0x16a>
		uart_transmit_string(&huart1, (uint8_t*)"\n\nReceived  ADDRESS Data at GSM: \n");
 8002648:	495e      	ldr	r1, [pc, #376]	@ (80027c4 <receiveRMCDataWithAddrGSM+0x1a0>)
 800264a:	485b      	ldr	r0, [pc, #364]	@ (80027b8 <receiveRMCDataWithAddrGSM+0x194>)
		uart_transmit_string(&huart1, (uint8_t*)"Address received from MAIL QUEUE: \n");
		current_addr_gsm = receivedDataGSM.address;
 800264c:	4c5e      	ldr	r4, [pc, #376]	@ (80027c8 <receiveRMCDataWithAddrGSM+0x1a4>)
		uart_transmit_string(&huart1, (uint8_t*)"\n\nReceived  ADDRESS Data at GSM: \n");
 800264e:	f003 f913 	bl	8005878 <uart_transmit_string>
		uart_transmit_string(&huart1, (uint8_t*)"Address received from MAIL QUEUE: \n");
 8002652:	495e      	ldr	r1, [pc, #376]	@ (80027cc <receiveRMCDataWithAddrGSM+0x1a8>)
 8002654:	4858      	ldr	r0, [pc, #352]	@ (80027b8 <receiveRMCDataWithAddrGSM+0x194>)
 8002656:	f003 f90f 	bl	8005878 <uart_transmit_string>
		current_addr_gsm = receivedDataGSM.address;
 800265a:	6dab      	ldr	r3, [r5, #88]	@ 0x58
 800265c:	6023      	str	r3, [r4, #0]
		if(checkAddrExistInQueue(current_addr_gsm, &result_addr_queue) == 0 || (current_addr_gsm >= end_addr_disconnect && current_addr_gsm <= (FLASH_END_ADDRESS - 0x100))){
 800265e:	6820      	ldr	r0, [r4, #0]
 8002660:	495b      	ldr	r1, [pc, #364]	@ (80027d0 <receiveRMCDataWithAddrGSM+0x1ac>)
 8002662:	f000 fea1 	bl	80033a8 <checkAddrExistInQueue>
 8002666:	b148      	cbz	r0, 800267c <receiveRMCDataWithAddrGSM+0x58>
 8002668:	4b5a      	ldr	r3, [pc, #360]	@ (80027d4 <receiveRMCDataWithAddrGSM+0x1b0>)
 800266a:	6822      	ldr	r2, [r4, #0]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	429a      	cmp	r2, r3
 8002670:	f0c0 8081 	bcc.w	8002776 <receiveRMCDataWithAddrGSM+0x152>
 8002674:	6823      	ldr	r3, [r4, #0]
 8002676:	f5b3 4f9e 	cmp.w	r3, #20224	@ 0x4f00
 800267a:	d87c      	bhi.n	8002776 <receiveRMCDataWithAddrGSM+0x152>
//			current_addr_gsm = receivedDataGSM->address;
			Debug_printf("Saving data to variable to send to the server\n");
 800267c:	4856      	ldr	r0, [pc, #344]	@ (80027d8 <receiveRMCDataWithAddrGSM+0x1b4>)
 800267e:	f003 f91f 	bl	80058c0 <Debug_printf>
			Uint32ToHex(current_addr_gsm, addr_out_gsm, 8);
 8002682:	6820      	ldr	r0, [r4, #0]
 8002684:	4955      	ldr	r1, [pc, #340]	@ (80027dc <receiveRMCDataWithAddrGSM+0x1b8>)
			Debug_printf("\n---------- Current data accepted at address: %s----------\n", addr_out_gsm);
			rmc_jt.lcation.latitude = receivedDataGSM.rmc.lcation.latitude;
 8002686:	4c56      	ldr	r4, [pc, #344]	@ (80027e0 <receiveRMCDataWithAddrGSM+0x1bc>)
			Uint32ToHex(current_addr_gsm, addr_out_gsm, 8);
 8002688:	2208      	movs	r2, #8
 800268a:	f003 f904 	bl	8005896 <Uint32ToHex>
			Debug_printf("\n---------- Current data accepted at address: %s----------\n", addr_out_gsm);
 800268e:	4953      	ldr	r1, [pc, #332]	@ (80027dc <receiveRMCDataWithAddrGSM+0x1b8>)
 8002690:	4854      	ldr	r0, [pc, #336]	@ (80027e4 <receiveRMCDataWithAddrGSM+0x1c0>)
 8002692:	f003 f915 	bl	80058c0 <Debug_printf>
			rmc_jt.lcation.latitude = receivedDataGSM.rmc.lcation.latitude;
 8002696:	e9d5 230e 	ldrd	r2, r3, [r5, #56]	@ 0x38
 800269a:	e9c4 230e 	strd	r2, r3, [r4, #56]	@ 0x38
			rmc_jt.lcation.longitude = receivedDataGSM.rmc.lcation.longitude;
 800269e:	e9d5 2312 	ldrd	r2, r3, [r5, #72]	@ 0x48
 80026a2:	e9c4 2312 	strd	r2, r3, [r4, #72]	@ 0x48
			rmc_jt.speed = receivedDataGSM.rmc.speed;
 80026a6:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 80026a8:	62a3      	str	r3, [r4, #40]	@ 0x28
			rmc_jt.course = receivedDataGSM.rmc.course;
 80026aa:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 80026ac:	62e3      	str	r3, [r4, #44]	@ 0x2c
			rmc_jt.lcation.NS = receivedDataGSM.rmc.lcation.NS;
 80026ae:	f895 3040 	ldrb.w	r3, [r5, #64]	@ 0x40
 80026b2:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
			rmc_jt.lcation.EW = receivedDataGSM.rmc.lcation.EW;
 80026b6:	f895 3050 	ldrb.w	r3, [r5, #80]	@ 0x50
 80026ba:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
			rmc_jt.isValid = receivedDataGSM.rmc.isValid;
 80026be:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80026c0:	6323      	str	r3, [r4, #48]	@ 0x30
			rmc_jt.date.Yr = receivedDataGSM.rmc.date.Yr;
 80026c2:	69ab      	ldr	r3, [r5, #24]
 80026c4:	61a3      	str	r3, [r4, #24]
			rmc_jt.date.Mon = receivedDataGSM.rmc.date.Mon;
 80026c6:	696b      	ldr	r3, [r5, #20]
			rmc_jt.date.Day = receivedDataGSM.rmc.date.Day;
			rmc_jt.tim.hour = receivedDataGSM.rmc.tim.hour;
			rmc_jt.tim.min = receivedDataGSM.rmc.tim.min;
 80026c8:	686a      	ldr	r2, [r5, #4]
			rmc_jt.tim.sec = receivedDataGSM.rmc.tim.sec;
 80026ca:	68a9      	ldr	r1, [r5, #8]
			rmc_jt.date.Mon = receivedDataGSM.rmc.date.Mon;
 80026cc:	6163      	str	r3, [r4, #20]
			rmc_jt.date.Day = receivedDataGSM.rmc.date.Day;
 80026ce:	692b      	ldr	r3, [r5, #16]
 80026d0:	6123      	str	r3, [r4, #16]
			rmc_jt.tim.hour = receivedDataGSM.rmc.tim.hour;
 80026d2:	682b      	ldr	r3, [r5, #0]
 80026d4:	6023      	str	r3, [r4, #0]
			rmc_jt.tim.min = receivedDataGSM.rmc.tim.min;
 80026d6:	6062      	str	r2, [r4, #4]
			rmc_jt.tim.sec = receivedDataGSM.rmc.tim.sec;
 80026d8:	60a1      	str	r1, [r4, #8]

			snprintf((char *)output_buffer, sizeof(output_buffer), "Time SENDING TO SERVER at GSM: %d:%d:%d\n", rmc_jt.tim.hour, rmc_jt.tim.min, rmc_jt.tim.sec);
 80026da:	a808      	add	r0, sp, #32
 80026dc:	e9cd 2100 	strd	r2, r1, [sp]
 80026e0:	4a41      	ldr	r2, [pc, #260]	@ (80027e8 <receiveRMCDataWithAddrGSM+0x1c4>)
 80026e2:	2146      	movs	r1, #70	@ 0x46
 80026e4:	f009 fed6 	bl	800c494 <sniprintf>
			uart_transmit_string(&huart1, output_buffer);
 80026e8:	4833      	ldr	r0, [pc, #204]	@ (80027b8 <receiveRMCDataWithAddrGSM+0x194>)
 80026ea:	a908      	add	r1, sp, #32
 80026ec:	f003 f8c4 	bl	8005878 <uart_transmit_string>

			snprintf((char *)output_buffer, sizeof(output_buffer), "Date SENDING TO SERVER at GSM: %d/%d/%d\n", rmc_jt.date.Day, rmc_jt.date.Mon, rmc_jt.date.Yr);
 80026f0:	69a3      	ldr	r3, [r4, #24]
 80026f2:	9301      	str	r3, [sp, #4]
 80026f4:	6963      	ldr	r3, [r4, #20]
 80026f6:	9300      	str	r3, [sp, #0]
 80026f8:	6923      	ldr	r3, [r4, #16]
 80026fa:	4a3c      	ldr	r2, [pc, #240]	@ (80027ec <receiveRMCDataWithAddrGSM+0x1c8>)
 80026fc:	2146      	movs	r1, #70	@ 0x46
 80026fe:	a808      	add	r0, sp, #32
 8002700:	f009 fec8 	bl	800c494 <sniprintf>
			uart_transmit_string(&huart1, output_buffer);
 8002704:	482c      	ldr	r0, [pc, #176]	@ (80027b8 <receiveRMCDataWithAddrGSM+0x194>)
 8002706:	a908      	add	r1, sp, #32
 8002708:	f003 f8b6 	bl	8005878 <uart_transmit_string>

			snprintf((char *)output_buffer, sizeof(output_buffer), "Location SENDING TO SERVER at GSM: %.6f %c, %.6f %c\n", rmc_jt.lcation.latitude, rmc_jt.lcation.NS, rmc_jt.lcation.longitude, receivedDataGSM.rmc.lcation.EW);
 800270c:	f895 3050 	ldrb.w	r3, [r5, #80]	@ 0x50
 8002710:	9306      	str	r3, [sp, #24]
 8002712:	e9d4 2312 	ldrd	r2, r3, [r4, #72]	@ 0x48
 8002716:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800271a:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 800271e:	9302      	str	r3, [sp, #8]
 8002720:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	@ 0x38
 8002724:	2146      	movs	r1, #70	@ 0x46
 8002726:	e9cd 2300 	strd	r2, r3, [sp]
 800272a:	a808      	add	r0, sp, #32
 800272c:	4a30      	ldr	r2, [pc, #192]	@ (80027f0 <receiveRMCDataWithAddrGSM+0x1cc>)
 800272e:	f009 feb1 	bl	800c494 <sniprintf>
			uart_transmit_string(&huart1, output_buffer);
 8002732:	4821      	ldr	r0, [pc, #132]	@ (80027b8 <receiveRMCDataWithAddrGSM+0x194>)
 8002734:	a908      	add	r1, sp, #32
 8002736:	f003 f89f 	bl	8005878 <uart_transmit_string>

			snprintf((char *)output_buffer, sizeof(output_buffer),"Speed SENDING TO SERVER at GSM: %.2f, Course: %.2f, Valid: %d\n", rmc_jt.speed, rmc_jt.course, rmc_jt.isValid);
 800273a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800273c:	9304      	str	r3, [sp, #16]
 800273e:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8002740:	f7fd ff12 	bl	8000568 <__aeabi_f2d>
 8002744:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002748:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 800274a:	f7fd ff0d 	bl	8000568 <__aeabi_f2d>
 800274e:	4a29      	ldr	r2, [pc, #164]	@ (80027f4 <receiveRMCDataWithAddrGSM+0x1d0>)
 8002750:	e9cd 0100 	strd	r0, r1, [sp]
 8002754:	2146      	movs	r1, #70	@ 0x46
 8002756:	a808      	add	r0, sp, #32
 8002758:	f009 fe9c 	bl	800c494 <sniprintf>
			uart_transmit_string(&huart1, output_buffer);
 800275c:	4816      	ldr	r0, [pc, #88]	@ (80027b8 <receiveRMCDataWithAddrGSM+0x194>)
 800275e:	a908      	add	r1, sp, #32
 8002760:	f003 f88a 	bl	8005878 <uart_transmit_string>

			received_RMC = 1;
 8002764:	4b24      	ldr	r3, [pc, #144]	@ (80027f8 <receiveRMCDataWithAddrGSM+0x1d4>)
 8002766:	2201      	movs	r2, #1
 8002768:	601a      	str	r2, [r3, #0]
			count_send_gsm++;
 800276a:	4a24      	ldr	r2, [pc, #144]	@ (80027fc <receiveRMCDataWithAddrGSM+0x1d8>)
 800276c:	6813      	ldr	r3, [r2, #0]
 800276e:	3301      	adds	r3, #1
 8002770:	6013      	str	r3, [r2, #0]
		if(is_disconnect == 0 && is_using_flash == 1 && is_keep_up == 0) {
			Debug_printf("----------------------KEEP UP WITH THE MOST CURRENT DATA ---------------------------");
			is_keep_up = 1;
		}
	}
}
 8002772:	b01b      	add	sp, #108	@ 0x6c
 8002774:	bd30      	pop	{r4, r5, pc}
			Uint32ToHex(receivedDataGSM.address, addr_out_gsm, 8);
 8002776:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8002778:	4918      	ldr	r1, [pc, #96]	@ (80027dc <receiveRMCDataWithAddrGSM+0x1b8>)
 800277a:	2208      	movs	r2, #8
 800277c:	f003 f88b 	bl	8005896 <Uint32ToHex>
			Debug_printf("\n----------------Have sent data in this address successfully already: %s ----------------\n", addr_out_gsm);
 8002780:	4916      	ldr	r1, [pc, #88]	@ (80027dc <receiveRMCDataWithAddrGSM+0x1b8>)
 8002782:	481f      	ldr	r0, [pc, #124]	@ (8002800 <receiveRMCDataWithAddrGSM+0x1dc>)
}
 8002784:	b01b      	add	sp, #108	@ 0x6c
 8002786:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
			Debug_printf("\n----------------Have sent data in this address successfully already: %s ----------------\n", addr_out_gsm);
 800278a:	f003 b899 	b.w	80058c0 <Debug_printf>
		Debug_printf("There is no address mail left\n");
 800278e:	481d      	ldr	r0, [pc, #116]	@ (8002804 <receiveRMCDataWithAddrGSM+0x1e0>)
 8002790:	f003 f896 	bl	80058c0 <Debug_printf>
		if(is_disconnect == 0 && is_using_flash == 1 && is_keep_up == 0) {
 8002794:	4b1c      	ldr	r3, [pc, #112]	@ (8002808 <receiveRMCDataWithAddrGSM+0x1e4>)
 8002796:	681d      	ldr	r5, [r3, #0]
 8002798:	2d01      	cmp	r5, #1
 800279a:	d1ea      	bne.n	8002772 <receiveRMCDataWithAddrGSM+0x14e>
 800279c:	4c1b      	ldr	r4, [pc, #108]	@ (800280c <receiveRMCDataWithAddrGSM+0x1e8>)
 800279e:	4b1c      	ldr	r3, [pc, #112]	@ (8002810 <receiveRMCDataWithAddrGSM+0x1ec>)
 80027a0:	6822      	ldr	r2, [r4, #0]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4313      	orrs	r3, r2
 80027a6:	d1e4      	bne.n	8002772 <receiveRMCDataWithAddrGSM+0x14e>
			Debug_printf("----------------------KEEP UP WITH THE MOST CURRENT DATA ---------------------------");
 80027a8:	481a      	ldr	r0, [pc, #104]	@ (8002814 <receiveRMCDataWithAddrGSM+0x1f0>)
 80027aa:	f003 f889 	bl	80058c0 <Debug_printf>
			is_keep_up = 1;
 80027ae:	6025      	str	r5, [r4, #0]
}
 80027b0:	e7df      	b.n	8002772 <receiveRMCDataWithAddrGSM+0x14e>
 80027b2:	bf00      	nop
 80027b4:	080111ee 	.word	0x080111ee
 80027b8:	20006fac 	.word	0x20006fac
 80027bc:	20001b58 	.word	0x20001b58
 80027c0:	20003b4c 	.word	0x20003b4c
 80027c4:	0801120e 	.word	0x0801120e
 80027c8:	20001c28 	.word	0x20001c28
 80027cc:	08011231 	.word	0x08011231
 80027d0:	20001c30 	.word	0x20001c30
 80027d4:	20001c24 	.word	0x20001c24
 80027d8:	08011255 	.word	0x08011255
 80027dc:	20001c18 	.word	0x20001c18
 80027e0:	20001bc0 	.word	0x20001bc0
 80027e4:	08011284 	.word	0x08011284
 80027e8:	080112c0 	.word	0x080112c0
 80027ec:	080112e9 	.word	0x080112e9
 80027f0:	08011312 	.word	0x08011312
 80027f4:	08011347 	.word	0x08011347
 80027f8:	20001e64 	.word	0x20001e64
 80027fc:	20001e3c 	.word	0x20001e3c
 8002800:	08011386 	.word	0x08011386
 8002804:	080113e1 	.word	0x080113e1
 8002808:	20001e50 	.word	0x20001e50
 800280c:	20001e4c 	.word	0x20001e4c
 8002810:	20001e54 	.word	0x20001e54
 8002814:	08011400 	.word	0x08011400

08002818 <processUploadDataToServer>:

int processUploadDataToServer(JT808_LocationInfoReport *location_info){
 8002818:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	int count_resend = 0;
	int count_check = 0;
	int result_send_location = 1;
	while(count_resend < 3){
		uint32_t freeStack1 = osThreadGetStackSpace(GSMHandle);
 800281c:	f8df 8140 	ldr.w	r8, [pc, #320]	@ 8002960 <processUploadDataToServer+0x148>
		Debug_printf("\n\n --------------Thread GSM %p is running low on stack: %04d bytes remaining----------\n\n",GSMHandle, freeStack1);
 8002820:	f8df 9140 	ldr.w	r9, [pc, #320]	@ 8002964 <processUploadDataToServer+0x14c>
		Debug_printf(" \n\n--------------------------- GOING TO SEND DATA TO SERVER: RESEND COUNT %d -----------------------\n\n", count_resend);
 8002824:	f8df a140 	ldr.w	sl, [pc, #320]	@ 8002968 <processUploadDataToServer+0x150>
int processUploadDataToServer(JT808_LocationInfoReport *location_info){
 8002828:	4607      	mov	r7, r0
 800282a:	2501      	movs	r5, #1
		uint32_t freeStack1 = osThreadGetStackSpace(GSMHandle);
 800282c:	f8d8 0000 	ldr.w	r0, [r8]
 8002830:	f006 f9c8 	bl	8008bc4 <osThreadGetStackSpace>
		Debug_printf("\n\n --------------Thread GSM %p is running low on stack: %04d bytes remaining----------\n\n",GSMHandle, freeStack1);
 8002834:	f8d8 1000 	ldr.w	r1, [r8]
		uint32_t freeStack1 = osThreadGetStackSpace(GSMHandle);
 8002838:	4602      	mov	r2, r0
		Debug_printf("\n\n --------------Thread GSM %p is running low on stack: %04d bytes remaining----------\n\n",GSMHandle, freeStack1);
 800283a:	4648      	mov	r0, r9
 800283c:	f003 f840 	bl	80058c0 <Debug_printf>
		Debug_printf(" \n\n--------------------------- GOING TO SEND DATA TO SERVER: RESEND COUNT %d -----------------------\n\n", count_resend);
 8002840:	1e69      	subs	r1, r5, #1
 8002842:	4650      	mov	r0, sl
 8002844:	f003 f83c 	bl	80058c0 <Debug_printf>
		result_send_location = send_location_to_server(0, location_info);
 8002848:	4639      	mov	r1, r7
 800284a:	2000      	movs	r0, #0
 800284c:	f7ff fc3c 	bl	80020c8 <send_location_to_server>

		if(result_send_location == 1){
 8002850:	2801      	cmp	r0, #1
		result_send_location = send_location_to_server(0, location_info);
 8002852:	4604      	mov	r4, r0
		if(result_send_location == 1){
 8002854:	d13e      	bne.n	80028d4 <processUploadDataToServer+0xbc>
			uart_transmit_string(&huart1, (uint8_t *)"Inside process: Check Sending Location Report\r\n");
 8002856:	4834      	ldr	r0, [pc, #208]	@ (8002928 <processUploadDataToServer+0x110>)
 8002858:	4934      	ldr	r1, [pc, #208]	@ (800292c <processUploadDataToServer+0x114>)
 800285a:	f003 f80d 	bl	8005878 <uart_transmit_string>
			int result_check = check_data_sent_to_server(0);
 800285e:	2000      	movs	r0, #0
 8002860:	f7ff fcb6 	bl	80021d0 <check_data_sent_to_server>
			if(result_check){
 8002864:	b188      	cbz	r0, 800288a <processUploadDataToServer+0x72>
				uart_transmit_string(&huart1, (uint8_t *)"Sending SUCCESS\n");
 8002866:	4932      	ldr	r1, [pc, #200]	@ (8002930 <processUploadDataToServer+0x118>)
 8002868:	482f      	ldr	r0, [pc, #188]	@ (8002928 <processUploadDataToServer+0x110>)
 800286a:	f003 f805 	bl	8005878 <uart_transmit_string>
				Debug_printf("\n\n--------------------------------- COUNT SEND GSM: %d -------------------------------------------\n\n", count_send_gsm);
 800286e:	4b31      	ldr	r3, [pc, #196]	@ (8002934 <processUploadDataToServer+0x11c>)
 8002870:	4831      	ldr	r0, [pc, #196]	@ (8002938 <processUploadDataToServer+0x120>)
 8002872:	6819      	ldr	r1, [r3, #0]
 8002874:	f003 f824 	bl	80058c0 <Debug_printf>
//				receive_response("Check location report\n");
				memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8002878:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 800287c:	2100      	movs	r1, #0
		}
		count_check++;
		osDelay(100);
	}
	receive_response("First check SIM MODULE\n");
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 800287e:	482f      	ldr	r0, [pc, #188]	@ (800293c <processUploadDataToServer+0x124>)
 8002880:	f009 ff04 	bl	800c68c <memset>
	SIM_UART_ReInitializeRxDMA();
 8002884:	f7fe fd64 	bl	8001350 <SIM_UART_ReInitializeRxDMA>
	return 0;
 8002888:	e035      	b.n	80028f6 <processUploadDataToServer+0xde>
				uart_transmit_string(&huart1, (uint8_t *)"Sending ERROR (CHECKING SENDING RESULT ERROR)\n");
 800288a:	492d      	ldr	r1, [pc, #180]	@ (8002940 <processUploadDataToServer+0x128>)
			uart_transmit_string(&huart1, (uint8_t *)"\n\n---------------------  Sending ERROR (SENDING ERROR)  -------------------\n\n");
 800288c:	4826      	ldr	r0, [pc, #152]	@ (8002928 <processUploadDataToServer+0x110>)
 800288e:	f002 fff3 	bl	8005878 <uart_transmit_string>
			memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8002892:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8002896:	2100      	movs	r1, #0
 8002898:	4828      	ldr	r0, [pc, #160]	@ (800293c <processUploadDataToServer+0x124>)
 800289a:	f009 fef7 	bl	800c68c <memset>
	while(count_resend < 3){
 800289e:	3501      	adds	r5, #1
			SIM_UART_ReInitializeRxDMA();
 80028a0:	f7fe fd56 	bl	8001350 <SIM_UART_ReInitializeRxDMA>
		osDelay(200);
 80028a4:	20c8      	movs	r0, #200	@ 0xc8
 80028a6:	f006 f9a1 	bl	8008bec <osDelay>
	while(count_resend < 3){
 80028aa:	2d04      	cmp	r5, #4
 80028ac:	d1be      	bne.n	800282c <processUploadDataToServer+0x14>
	send_AT_command(FIRST_CHECK);
 80028ae:	4825      	ldr	r0, [pc, #148]	@ (8002944 <processUploadDataToServer+0x12c>)
	while(strstr((char *) response, CHECK_RESPONSE) != NULL){
 80028b0:	4e25      	ldr	r6, [pc, #148]	@ (8002948 <processUploadDataToServer+0x130>)
		receive_response("First check SIM MODULE\n");
 80028b2:	4f26      	ldr	r7, [pc, #152]	@ (800294c <processUploadDataToServer+0x134>)
	send_AT_command(FIRST_CHECK);
 80028b4:	f7fe fd3c 	bl	8001330 <send_AT_command>
	while(strstr((char *) response, CHECK_RESPONSE) != NULL){
 80028b8:	250c      	movs	r5, #12
 80028ba:	4820      	ldr	r0, [pc, #128]	@ (800293c <processUploadDataToServer+0x124>)
 80028bc:	4631      	mov	r1, r6
 80028be:	f009 ff35 	bl	800c72c <strstr>
 80028c2:	4604      	mov	r4, r0
 80028c4:	b9e0      	cbnz	r0, 8002900 <processUploadDataToServer+0xe8>
	receive_response("First check SIM MODULE\n");
 80028c6:	4821      	ldr	r0, [pc, #132]	@ (800294c <processUploadDataToServer+0x134>)
 80028c8:	f7fe fd5c 	bl	8001384 <receive_response>
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 80028cc:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 80028d0:	4621      	mov	r1, r4
 80028d2:	e7d4      	b.n	800287e <processUploadDataToServer+0x66>
		else if(result_send_location == 2){
 80028d4:	2802      	cmp	r0, #2
 80028d6:	d111      	bne.n	80028fc <processUploadDataToServer+0xe4>
			receive_response("Check location report\n");
 80028d8:	481d      	ldr	r0, [pc, #116]	@ (8002950 <processUploadDataToServer+0x138>)
 80028da:	f7fe fd53 	bl	8001384 <receive_response>
			memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 80028de:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 80028e2:	2100      	movs	r1, #0
 80028e4:	4815      	ldr	r0, [pc, #84]	@ (800293c <processUploadDataToServer+0x124>)
 80028e6:	f009 fed1 	bl	800c68c <memset>
			SIM_UART_ReInitializeRxDMA();
 80028ea:	f7fe fd31 	bl	8001350 <SIM_UART_ReInitializeRxDMA>
			Debug_printf("The connection to server is closed. \n");
 80028ee:	4819      	ldr	r0, [pc, #100]	@ (8002954 <processUploadDataToServer+0x13c>)
 80028f0:	f002 ffe6 	bl	80058c0 <Debug_printf>
			return 2;
 80028f4:	2402      	movs	r4, #2
}
 80028f6:	4620      	mov	r0, r4
 80028f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			uart_transmit_string(&huart1, (uint8_t *)"\n\n---------------------  Sending ERROR (SENDING ERROR)  -------------------\n\n");
 80028fc:	4916      	ldr	r1, [pc, #88]	@ (8002958 <processUploadDataToServer+0x140>)
 80028fe:	e7c5      	b.n	800288c <processUploadDataToServer+0x74>
		receive_response("First check SIM MODULE\n");
 8002900:	4638      	mov	r0, r7
 8002902:	f7fe fd3f 	bl	8001384 <receive_response>
		if(count_check > 10){
 8002906:	3d01      	subs	r5, #1
 8002908:	d109      	bne.n	800291e <processUploadDataToServer+0x106>
			Debug_printf("SIM MODULE BUG");
 800290a:	4814      	ldr	r0, [pc, #80]	@ (800295c <processUploadDataToServer+0x144>)
 800290c:	f002 ffd8 	bl	80058c0 <Debug_printf>
			memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8002910:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8002914:	4629      	mov	r1, r5
 8002916:	4809      	ldr	r0, [pc, #36]	@ (800293c <processUploadDataToServer+0x124>)
 8002918:	f009 feb8 	bl	800c68c <memset>
			return 2;
 800291c:	e7ea      	b.n	80028f4 <processUploadDataToServer+0xdc>
		osDelay(100);
 800291e:	2064      	movs	r0, #100	@ 0x64
 8002920:	f006 f964 	bl	8008bec <osDelay>
 8002924:	e7c9      	b.n	80028ba <processUploadDataToServer+0xa2>
 8002926:	bf00      	nop
 8002928:	20006fac 	.word	0x20006fac
 800292c:	08011515 	.word	0x08011515
 8002930:	08011545 	.word	0x08011545
 8002934:	20001e3c 	.word	0x20001e3c
 8002938:	08011556 	.word	0x08011556
 800293c:	20001e78 	.word	0x20001e78
 8002940:	080115bb 	.word	0x080115bb
 8002944:	08010a46 	.word	0x08010a46
 8002948:	08010e7a 	.word	0x08010e7a
 800294c:	08010a4b 	.word	0x08010a4b
 8002950:	080115ea 	.word	0x080115ea
 8002954:	08011601 	.word	0x08011601
 8002958:	08011627 	.word	0x08011627
 800295c:	08011675 	.word	0x08011675
 8002960:	20004d08 	.word	0x20004d08
 8002964:	08011455 	.word	0x08011455
 8002968:	080114ae 	.word	0x080114ae

0800296c <StartGSM>:

void StartGSM(void const * argument)
{
 800296c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  /* USER CODE BEGIN StartGSM */
	Debug_printf("------------------------ Starting GSM: Pushing data to Server ------------------------");
 8002970:	4881      	ldr	r0, [pc, #516]	@ (8002b78 <StartGSM+0x20c>)
					if(received_RMC == 1){
						received_RMC = 0;
						uart_transmit_string(&huart1, (uint8_t *)"RECEIVED RMC DATA AT GSM MODULE\n");
						save_rmc_to_location_info(&location_info);
						Debug_printf("Current stack address to be sent to the server: \n");
						Uint32ToHex(current_addr_gsm, addr_out_gsm, 8);
 8002972:	f8df b260 	ldr.w	fp, [pc, #608]	@ 8002bd4 <StartGSM+0x268>
{
 8002976:	b0a3      	sub	sp, #140	@ 0x8c
	Debug_printf("------------------------ Starting GSM: Pushing data to Server ------------------------");
 8002978:	f002 ffa2 	bl	80058c0 <Debug_printf>
	RingBufferDmaU8_initUSARTRx(&SIMRxDMARing, &huart3, response, SIM_RESPONSE_MAX_SIZE);
 800297c:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8002980:	4a7e      	ldr	r2, [pc, #504]	@ (8002b7c <StartGSM+0x210>)
 8002982:	497f      	ldr	r1, [pc, #508]	@ (8002b80 <StartGSM+0x214>)
 8002984:	487f      	ldr	r0, [pc, #508]	@ (8002b84 <StartGSM+0x218>)
 8002986:	f001 f8c9 	bl	8003b1c <RingBufferDmaU8_initUSARTRx>
	JT808_TerminalRegistration reg_msg = create_terminal_registration();
 800298a:	a802      	add	r0, sp, #8
 800298c:	f7fe fc7e 	bl	800128c <create_terminal_registration>
	JT808_LocationInfoReport location_info = create_location_info_report();
 8002990:	a811      	add	r0, sp, #68	@ 0x44
 8002992:	f7fe fca1 	bl	80012d8 <create_location_info_report>
	initQueue_GSM(&result_addr_queue);
 8002996:	487c      	ldr	r0, [pc, #496]	@ (8002b88 <StartGSM+0x21c>)
 8002998:	f000 fc9a 	bl	80032d0 <initQueue_GSM>
	init_SIM_module();
 800299c:	f7fe fd06 	bl	80013ac <init_SIM_module>
	int is_set_uniqueID = 0;
 80029a0:	2300      	movs	r3, #0
 80029a2:	9301      	str	r3, [sp, #4]
	int process = 0;
 80029a4:	461c      	mov	r4, r3
		osDelay(300);
 80029a6:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80029aa:	f006 f91f 	bl	8008bec <osDelay>
		switch(process){
 80029ae:	2c08      	cmp	r4, #8
 80029b0:	d866      	bhi.n	8002a80 <StartGSM+0x114>
 80029b2:	e8df f014 	tbh	[pc, r4, lsl #1]
 80029b6:	0009      	.short	0x0009
 80029b8:	004d001c 	.word	0x004d001c
 80029bc:	00a30074 	.word	0x00a30074
 80029c0:	00d200b7 	.word	0x00d200b7
 80029c4:	045f0111 	.word	0x045f0111
				uart_transmit_string(&huart1, (uint8_t *)"First CHECK\r\n");
 80029c8:	4970      	ldr	r1, [pc, #448]	@ (8002b8c <StartGSM+0x220>)
 80029ca:	4871      	ldr	r0, [pc, #452]	@ (8002b90 <StartGSM+0x224>)
 80029cc:	f002 ff54 	bl	8005878 <uart_transmit_string>
				isReady = first_check_SIM();
 80029d0:	f7fe fdc0 	bl	8001554 <first_check_SIM>
				if(isReady) process++;
 80029d4:	4601      	mov	r1, r0
 80029d6:	2800      	cmp	r0, #0
 80029d8:	f040 808e 	bne.w	8002af8 <StartGSM+0x18c>
					memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 80029dc:	f44f 72c0 	mov.w	r2, #384	@ 0x180
						uart_transmit_string(&huart1,(uint8_t*) "REOPEN CONNECTION TO SERVER\n");
						process = 4;
					}
				}
				else{
					memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 80029e0:	4866      	ldr	r0, [pc, #408]	@ (8002b7c <StartGSM+0x210>)
 80029e2:	f009 fe53 	bl	800c68c <memset>
					SIM_UART_ReInitializeRxDMA();
 80029e6:	f7fe fcb3 	bl	8001350 <SIM_UART_ReInitializeRxDMA>
					uart_transmit_string(&huart1,(uint8_t*) "Rebooting SIM module\n");
 80029ea:	496a      	ldr	r1, [pc, #424]	@ (8002b94 <StartGSM+0x228>)
 80029ec:	e01b      	b.n	8002a26 <StartGSM+0xba>
				uart_transmit_string(&huart1, (uint8_t *)"Check EVERYTHING READY\r\n");
 80029ee:	496a      	ldr	r1, [pc, #424]	@ (8002b98 <StartGSM+0x22c>)
 80029f0:	4867      	ldr	r0, [pc, #412]	@ (8002b90 <StartGSM+0x224>)
 80029f2:	f002 ff41 	bl	8005878 <uart_transmit_string>
				osDelay(100);
 80029f6:	2064      	movs	r0, #100	@ 0x64
 80029f8:	f006 f8f8 	bl	8008bec <osDelay>
				int check_SIM = check_SIM_ready();
 80029fc:	f7fe fecc 	bl	8001798 <check_SIM_ready>
				if(is_set_uniqueID == 0 && check_SIM == 1){
 8002a00:	9b01      	ldr	r3, [sp, #4]
				int check_SIM = check_SIM_ready();
 8002a02:	4605      	mov	r5, r0
				if(is_set_uniqueID == 0 && check_SIM == 1){
 8002a04:	b1b3      	cbz	r3, 8002a34 <StartGSM+0xc8>
	int process = 0;
 8002a06:	9401      	str	r4, [sp, #4]
				osDelay(150);
 8002a08:	2096      	movs	r0, #150	@ 0x96
 8002a0a:	f006 f8ef 	bl	8008bec <osDelay>
				if (check_SIM == 0){
 8002a0e:	2d00      	cmp	r5, #0
 8002a10:	f040 844d 	bne.w	80032ae <StartGSM+0x942>
					memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8002a14:	4629      	mov	r1, r5
 8002a16:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8002a1a:	4858      	ldr	r0, [pc, #352]	@ (8002b7c <StartGSM+0x210>)
 8002a1c:	f009 fe36 	bl	800c68c <memset>
					SIM_UART_ReInitializeRxDMA();
 8002a20:	f7fe fc96 	bl	8001350 <SIM_UART_ReInitializeRxDMA>
					uart_transmit_string(&huart1,(uint8_t*) "Rebooting SIM module");
 8002a24:	495d      	ldr	r1, [pc, #372]	@ (8002b9c <StartGSM+0x230>)
					uart_transmit_string(&huart1,(uint8_t*) "Rebooting SIM module\n");
 8002a26:	485a      	ldr	r0, [pc, #360]	@ (8002b90 <StartGSM+0x224>)
 8002a28:	f002 ff26 	bl	8005878 <uart_transmit_string>
									process++;
 8002a2c:	2400      	movs	r4, #0
					reboot_SIM_module();
 8002a2e:	f7fe fcd7 	bl	80013e0 <reboot_SIM_module>
					process = 0;
 8002a32:	e025      	b.n	8002a80 <StartGSM+0x114>
				if(is_set_uniqueID == 0 && check_SIM == 1){
 8002a34:	2801      	cmp	r0, #1
 8002a36:	d1e7      	bne.n	8002a08 <StartGSM+0x9c>
					memcpy(reg_msg.terminal_phone_number, terminal_phone_number, sizeof(terminal_phone_number));
 8002a38:	4b59      	ldr	r3, [pc, #356]	@ (8002ba0 <StartGSM+0x234>)
 8002a3a:	681a      	ldr	r2, [r3, #0]
 8002a3c:	889b      	ldrh	r3, [r3, #4]
 8002a3e:	f8cd 200d 	str.w	r2, [sp, #13]
 8002a42:	f8ad 3011 	strh.w	r3, [sp, #17]
					memcpy(location_info.terminal_phone_number, terminal_phone_number, sizeof(terminal_phone_number));
 8002a46:	f8cd 2049 	str.w	r2, [sp, #73]	@ 0x49
 8002a4a:	f8ad 304d 	strh.w	r3, [sp, #77]	@ 0x4d
					is_set_uniqueID = 1;
 8002a4e:	e7da      	b.n	8002a06 <StartGSM+0x9a>
				uart_transmit_string(&huart1, (uint8_t *)"Inside process: Configure PDP context\r\n");
 8002a50:	4954      	ldr	r1, [pc, #336]	@ (8002ba4 <StartGSM+0x238>)
 8002a52:	484f      	ldr	r0, [pc, #316]	@ (8002b90 <StartGSM+0x224>)
 8002a54:	f002 ff10 	bl	8005878 <uart_transmit_string>
				memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8002a58:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8002a5c:	2100      	movs	r1, #0
 8002a5e:	4847      	ldr	r0, [pc, #284]	@ (8002b7c <StartGSM+0x210>)
 8002a60:	f009 fe14 	bl	800c68c <memset>
				SIM_UART_ReInitializeRxDMA();
 8002a64:	f7fe fc74 	bl	8001350 <SIM_UART_ReInitializeRxDMA>
				configure_APN(1);
 8002a68:	2001      	movs	r0, #1
 8002a6a:	f7fe fff1 	bl	8001a50 <configure_APN>
				memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8002a6e:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8002a72:	2100      	movs	r1, #0
 8002a74:	4841      	ldr	r0, [pc, #260]	@ (8002b7c <StartGSM+0x210>)
 8002a76:	f009 fe09 	bl	800c68c <memset>
				SIM_UART_ReInitializeRxDMA();
 8002a7a:	f7fe fc69 	bl	8001350 <SIM_UART_ReInitializeRxDMA>
				process++;
 8002a7e:	2403      	movs	r4, #3
				}
				break;
		}
		if(is_in_sending == 0 && is_disconnect == 1){
 8002a80:	4d49      	ldr	r5, [pc, #292]	@ (8002ba8 <StartGSM+0x23c>)
 8002a82:	682b      	ldr	r3, [r5, #0]
 8002a84:	b92b      	cbnz	r3, 8002a92 <StartGSM+0x126>
 8002a86:	4b49      	ldr	r3, [pc, #292]	@ (8002bac <StartGSM+0x240>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	2b01      	cmp	r3, #1
 8002a8c:	d18b      	bne.n	80029a6 <StartGSM+0x3a>
			receiveRMCDataWithAddrGSM();
 8002a8e:	f7ff fdc9 	bl	8002624 <receiveRMCDataWithAddrGSM>
		}
		if(is_in_sending == 1){
 8002a92:	682b      	ldr	r3, [r5, #0]
 8002a94:	2b01      	cmp	r3, #1
 8002a96:	d186      	bne.n	80029a6 <StartGSM+0x3a>
			is_in_sending = 0;
 8002a98:	2300      	movs	r3, #0
 8002a9a:	602b      	str	r3, [r5, #0]
 8002a9c:	e783      	b.n	80029a6 <StartGSM+0x3a>
				uart_transmit_string(&huart1, (uint8_t *)"Inside process: Activate PDP context\r\n");
 8002a9e:	4944      	ldr	r1, [pc, #272]	@ (8002bb0 <StartGSM+0x244>)
 8002aa0:	483b      	ldr	r0, [pc, #236]	@ (8002b90 <StartGSM+0x224>)
 8002aa2:	f002 fee9 	bl	8005878 <uart_transmit_string>
				int receive_activate = activate_context(1);
 8002aa6:	2001      	movs	r0, #1
 8002aa8:	f7ff f824 	bl	8001af4 <activate_context>
				if(receive_activate){
 8002aac:	4605      	mov	r5, r0
 8002aae:	b190      	cbz	r0, 8002ad6 <StartGSM+0x16a>
					getCurrentTime();
 8002ab0:	f7ff fd7e 	bl	80025b0 <getCurrentTime>
					uart_transmit_string(&huart1, (uint8_t*) "Activate PDP context successfully\n");
 8002ab4:	493f      	ldr	r1, [pc, #252]	@ (8002bb4 <StartGSM+0x248>)
 8002ab6:	4836      	ldr	r0, [pc, #216]	@ (8002b90 <StartGSM+0x224>)
 8002ab8:	f002 fede 	bl	8005878 <uart_transmit_string>
					osDelay(200);
 8002abc:	20c8      	movs	r0, #200	@ 0xc8
 8002abe:	f006 f895 	bl	8008bec <osDelay>
					memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8002ac2:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8002ac6:	2100      	movs	r1, #0
 8002ac8:	482c      	ldr	r0, [pc, #176]	@ (8002b7c <StartGSM+0x210>)
 8002aca:	f009 fddf 	bl	800c68c <memset>
					SIM_UART_ReInitializeRxDMA();
 8002ace:	f7fe fc3f 	bl	8001350 <SIM_UART_ReInitializeRxDMA>
					process++;
 8002ad2:	2404      	movs	r4, #4
 8002ad4:	e7d4      	b.n	8002a80 <StartGSM+0x114>
					uart_transmit_string(&huart1, (uint8_t*) "Activate PDP Context Failed\n");
 8002ad6:	4938      	ldr	r1, [pc, #224]	@ (8002bb8 <StartGSM+0x24c>)
					uart_transmit_string(&huart1, (uint8_t*) "Connect to Server Failed\n");
 8002ad8:	482d      	ldr	r0, [pc, #180]	@ (8002b90 <StartGSM+0x224>)
 8002ada:	f002 fecd 	bl	8005878 <uart_transmit_string>
					int receive_deactivate = deactivate_context(1);
 8002ade:	2001      	movs	r0, #1
 8002ae0:	f7ff f872 	bl	8001bc8 <deactivate_context>
					memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8002ae4:	f44f 72c0 	mov.w	r2, #384	@ 0x180
					int receive_deactivate = deactivate_context(1);
 8002ae8:	4604      	mov	r4, r0
					memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8002aea:	4629      	mov	r1, r5
 8002aec:	4823      	ldr	r0, [pc, #140]	@ (8002b7c <StartGSM+0x210>)
 8002aee:	f009 fdcd 	bl	800c68c <memset>
					SIM_UART_ReInitializeRxDMA();
 8002af2:	f7fe fc2d 	bl	8001350 <SIM_UART_ReInitializeRxDMA>
					if (receive_deactivate) process = 1;
 8002af6:	b18c      	cbz	r4, 8002b1c <StartGSM+0x1b0>
					if (receive_deactivate) process = 1;
 8002af8:	2401      	movs	r4, #1
 8002afa:	e7c1      	b.n	8002a80 <StartGSM+0x114>
				uart_transmit_string(&huart1, (uint8_t *)"Inside process: OPEN SOCKET SERVICE\r\n");
 8002afc:	492f      	ldr	r1, [pc, #188]	@ (8002bbc <StartGSM+0x250>)
 8002afe:	4824      	ldr	r0, [pc, #144]	@ (8002b90 <StartGSM+0x224>)
 8002b00:	f002 feba 	bl	8005878 <uart_transmit_string>
				int received_res = open_socket_service(1, 0, 0, 0);
 8002b04:	2300      	movs	r3, #0
 8002b06:	461a      	mov	r2, r3
 8002b08:	4619      	mov	r1, r3
 8002b0a:	2001      	movs	r0, #1
 8002b0c:	f7ff f8a8 	bl	8001c60 <open_socket_service>
				if(received_res){
 8002b10:	4605      	mov	r5, r0
 8002b12:	2800      	cmp	r0, #0
 8002b14:	f040 83ce 	bne.w	80032b4 <StartGSM+0x948>
					uart_transmit_string(&huart1, (uint8_t*) "Connect to Server Failed\n");
 8002b18:	4929      	ldr	r1, [pc, #164]	@ (8002bc0 <StartGSM+0x254>)
 8002b1a:	e7dd      	b.n	8002ad8 <StartGSM+0x16c>
						memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8002b1c:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8002b20:	4621      	mov	r1, r4
 8002b22:	e75d      	b.n	80029e0 <StartGSM+0x74>
				uart_transmit_string(&huart1, (uint8_t *)"Inside process: Register/Login to the server.\r\n");
 8002b24:	4927      	ldr	r1, [pc, #156]	@ (8002bc4 <StartGSM+0x258>)
 8002b26:	481a      	ldr	r0, [pc, #104]	@ (8002b90 <StartGSM+0x224>)
					receive_response("Check terminal register\n");
 8002b28:	4e27      	ldr	r6, [pc, #156]	@ (8002bc8 <StartGSM+0x25c>)
				uart_transmit_string(&huart1, (uint8_t *)"Inside process: Register/Login to the server.\r\n");
 8002b2a:	f002 fea5 	bl	8005878 <uart_transmit_string>
 8002b2e:	2403      	movs	r4, #3
					int result_send_login = login_to_server(0,&reg_msg);
 8002b30:	a902      	add	r1, sp, #8
 8002b32:	2000      	movs	r0, #0
 8002b34:	f7ff fa40 	bl	8001fb8 <login_to_server>
 8002b38:	4605      	mov	r5, r0
					receive_response("Check terminal register\n");
 8002b3a:	4630      	mov	r0, r6
 8002b3c:	f7fe fc22 	bl	8001384 <receive_response>
					if(result_send_login){
 8002b40:	b125      	cbz	r5, 8002b4c <StartGSM+0x1e0>
						Debug_printf("LOGIN TO SERVER SUCCESSFULLY\n");
 8002b42:	4822      	ldr	r0, [pc, #136]	@ (8002bcc <StartGSM+0x260>)
 8002b44:	f002 febc 	bl	80058c0 <Debug_printf>
				else process++;
 8002b48:	2406      	movs	r4, #6
 8002b4a:	e799      	b.n	8002a80 <StartGSM+0x114>
					osDelay(200);
 8002b4c:	20c8      	movs	r0, #200	@ 0xc8
 8002b4e:	f006 f84d 	bl	8008bec <osDelay>
				while(count_resend_login < 3){
 8002b52:	3c01      	subs	r4, #1
 8002b54:	d1ec      	bne.n	8002b30 <StartGSM+0x1c4>
				else process = 8;
 8002b56:	2408      	movs	r4, #8
 8002b58:	e792      	b.n	8002a80 <StartGSM+0x114>
				uart_transmit_string(&huart1, (uint8_t *)"Inside process: Check Register/Login\r\n");
 8002b5a:	480d      	ldr	r0, [pc, #52]	@ (8002b90 <StartGSM+0x224>)
 8002b5c:	491c      	ldr	r1, [pc, #112]	@ (8002bd0 <StartGSM+0x264>)
 8002b5e:	f002 fe8b 	bl	8005878 <uart_transmit_string>
				int result_check_login = check_data_sent_to_server(0);
 8002b62:	2000      	movs	r0, #0
 8002b64:	f7ff fb34 	bl	80021d0 <check_data_sent_to_server>
				if(result_check_login){
 8002b68:	2800      	cmp	r0, #0
 8002b6a:	d0f4      	beq.n	8002b56 <StartGSM+0x1ea>
					receive_response("Check terminal register\n");
 8002b6c:	4816      	ldr	r0, [pc, #88]	@ (8002bc8 <StartGSM+0x25c>)
 8002b6e:	f7fe fc09 	bl	8001384 <receive_response>
					process++;
 8002b72:	2407      	movs	r4, #7
 8002b74:	e784      	b.n	8002a80 <StartGSM+0x114>
 8002b76:	bf00      	nop
 8002b78:	08011684 	.word	0x08011684
 8002b7c:	20001e78 	.word	0x20001e78
 8002b80:	20006e9c 	.word	0x20006e9c
 8002b84:	20001e68 	.word	0x20001e68
 8002b88:	20001c30 	.word	0x20001c30
 8002b8c:	080116db 	.word	0x080116db
 8002b90:	20006fac 	.word	0x20006fac
 8002b94:	080116e9 	.word	0x080116e9
 8002b98:	080116ff 	.word	0x080116ff
 8002b9c:	08011718 	.word	0x08011718
 8002ba0:	20001bb8 	.word	0x20001bb8
 8002ba4:	0801172d 	.word	0x0801172d
 8002ba8:	20001e60 	.word	0x20001e60
 8002bac:	20001e54 	.word	0x20001e54
 8002bb0:	08011755 	.word	0x08011755
 8002bb4:	0801177c 	.word	0x0801177c
 8002bb8:	0801179f 	.word	0x0801179f
 8002bbc:	080117bc 	.word	0x080117bc
 8002bc0:	080117e2 	.word	0x080117e2
 8002bc4:	080117fc 	.word	0x080117fc
 8002bc8:	0801182c 	.word	0x0801182c
 8002bcc:	08011845 	.word	0x08011845
 8002bd0:	08011863 	.word	0x08011863
 8002bd4:	20001c28 	.word	0x20001c28
				is_in_sending = 1;
 8002bd8:	4baf      	ldr	r3, [pc, #700]	@ (8002e98 <StartGSM+0x52c>)
				uart_transmit_string(&huart1, (uint8_t *)"Inside process: Send Location\r\n");
 8002bda:	49b0      	ldr	r1, [pc, #704]	@ (8002e9c <StartGSM+0x530>)
 8002bdc:	48b0      	ldr	r0, [pc, #704]	@ (8002ea0 <StartGSM+0x534>)
				is_in_sending = 1;
 8002bde:	2201      	movs	r2, #1
 8002be0:	601a      	str	r2, [r3, #0]
				uart_transmit_string(&huart1, (uint8_t *)"Inside process: Send Location\r\n");
 8002be2:	f002 fe49 	bl	8005878 <uart_transmit_string>
				int result_get_current = getCurrentTime();
 8002be6:	f7ff fce3 	bl	80025b0 <getCurrentTime>
				if(result_get_current == 0){
 8002bea:	2800      	cmp	r0, #0
 8002bec:	d0b3      	beq.n	8002b56 <StartGSM+0x1ea>
						Uint32ToHex(current_addr_gsm, addr_out_gsm, 8);
 8002bee:	4ead      	ldr	r6, [pc, #692]	@ (8002ea4 <StartGSM+0x538>)
						while(strstr((char *) response, CHECK_RESPONSE) == NULL){
 8002bf0:	4dad      	ldr	r5, [pc, #692]	@ (8002ea8 <StartGSM+0x53c>)
					if(received_RMC == 1){
 8002bf2:	4cae      	ldr	r4, [pc, #696]	@ (8002eac <StartGSM+0x540>)
					receiveRMCDataWithAddrGSM();
 8002bf4:	f7ff fd16 	bl	8002624 <receiveRMCDataWithAddrGSM>
					if(received_RMC == 1){
 8002bf8:	6823      	ldr	r3, [r4, #0]
 8002bfa:	2b01      	cmp	r3, #1
 8002bfc:	d1fa      	bne.n	8002bf4 <StartGSM+0x288>
						received_RMC = 0;
 8002bfe:	2300      	movs	r3, #0
						uart_transmit_string(&huart1, (uint8_t *)"RECEIVED RMC DATA AT GSM MODULE\n");
 8002c00:	49ab      	ldr	r1, [pc, #684]	@ (8002eb0 <StartGSM+0x544>)
 8002c02:	48a7      	ldr	r0, [pc, #668]	@ (8002ea0 <StartGSM+0x534>)
						received_RMC = 0;
 8002c04:	6023      	str	r3, [r4, #0]
						uart_transmit_string(&huart1, (uint8_t *)"RECEIVED RMC DATA AT GSM MODULE\n");
 8002c06:	f002 fe37 	bl	8005878 <uart_transmit_string>
						save_rmc_to_location_info(&location_info);
 8002c0a:	a811      	add	r0, sp, #68	@ 0x44
 8002c0c:	f7fe fc18 	bl	8001440 <save_rmc_to_location_info>
						Debug_printf("Current stack address to be sent to the server: \n");
 8002c10:	48a8      	ldr	r0, [pc, #672]	@ (8002eb4 <StartGSM+0x548>)
						while(strstr((char *) response, CHECK_RESPONSE) == NULL){
 8002c12:	4fa9      	ldr	r7, [pc, #676]	@ (8002eb8 <StartGSM+0x54c>)
 8002c14:	4ca9      	ldr	r4, [pc, #676]	@ (8002ebc <StartGSM+0x550>)
						Debug_printf("Current stack address to be sent to the server: \n");
 8002c16:	f002 fe53 	bl	80058c0 <Debug_printf>
						Uint32ToHex(current_addr_gsm, addr_out_gsm, 8);
 8002c1a:	2208      	movs	r2, #8
 8002c1c:	f8db 0000 	ldr.w	r0, [fp]
 8002c20:	4631      	mov	r1, r6
 8002c22:	f002 fe38 	bl	8005896 <Uint32ToHex>
						Debug_printf("Address going to send to server at GSM:(STACK FROM MAIL QUEUE)  %s\n", addr_out_gsm);
 8002c26:	48a6      	ldr	r0, [pc, #664]	@ (8002ec0 <StartGSM+0x554>)
 8002c28:	4631      	mov	r1, r6
 8002c2a:	f002 fe49 	bl	80058c0 <Debug_printf>
						send_AT_command(CHECK_SIGNAL_QUALITY);
 8002c2e:	48a5      	ldr	r0, [pc, #660]	@ (8002ec4 <StartGSM+0x558>)
 8002c30:	f7fe fb7e 	bl	8001330 <send_AT_command>
						while(strstr((char *) response, CHECK_RESPONSE) == NULL){
 8002c34:	4639      	mov	r1, r7
 8002c36:	4628      	mov	r0, r5
 8002c38:	f009 fd78 	bl	800c72c <strstr>
 8002c3c:	4601      	mov	r1, r0
 8002c3e:	b950      	cbnz	r0, 8002c56 <StartGSM+0x2ea>
							if (count_check_csq >= 5){
 8002c40:	6823      	ldr	r3, [r4, #0]
 8002c42:	2b04      	cmp	r3, #4
 8002c44:	f340 80a4 	ble.w	8002d90 <StartGSM+0x424>
								memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8002c48:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8002c4c:	4628      	mov	r0, r5
 8002c4e:	f009 fd1d 	bl	800c68c <memset>
								SIM_UART_ReInitializeRxDMA();
 8002c52:	f7fe fb7d 	bl	8001350 <SIM_UART_ReInitializeRxDMA>
						receive_response("Check Signal Quality Report\n");
 8002c56:	489c      	ldr	r0, [pc, #624]	@ (8002ec8 <StartGSM+0x55c>)
						HAL_TIM_Base_Start(&htim3);
 8002c58:	4f9c      	ldr	r7, [pc, #624]	@ (8002ecc <StartGSM+0x560>)
							result_final = processUploadDataToServer(&location_info);
 8002c5a:	f8df 82d0 	ldr.w	r8, [pc, #720]	@ 8002f2c <StartGSM+0x5c0>
						receive_response("Check Signal Quality Report\n");
 8002c5e:	f7fe fb91 	bl	8001384 <receive_response>
						osDelay(100);
 8002c62:	2064      	movs	r0, #100	@ 0x64
 8002c64:	f005 ffc2 	bl	8008bec <osDelay>
						memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8002c68:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8002c6c:	2100      	movs	r1, #0
 8002c6e:	4628      	mov	r0, r5
 8002c70:	f009 fd0c 	bl	800c68c <memset>
						count_check_csq = 0;
 8002c74:	f04f 0900 	mov.w	r9, #0
						SIM_UART_ReInitializeRxDMA();
 8002c78:	f7fe fb6a 	bl	8001350 <SIM_UART_ReInitializeRxDMA>
						HAL_TIM_Base_Start(&htim3);
 8002c7c:	4638      	mov	r0, r7
						count_check_csq = 0;
 8002c7e:	f8c4 9000 	str.w	r9, [r4]
						HAL_TIM_Base_Start(&htim3);
 8002c82:	f005 f8a5 	bl	8007dd0 <HAL_TIM_Base_Start>
						__HAL_TIM_SET_COUNTER(&htim3, 0);
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	4c91      	ldr	r4, [pc, #580]	@ (8002ed0 <StartGSM+0x564>)
 8002c8a:	f8c3 9024 	str.w	r9, [r3, #36]	@ 0x24
							result_final = processUploadDataToServer(&location_info);
 8002c8e:	a811      	add	r0, sp, #68	@ 0x44
 8002c90:	f7ff fdc2 	bl	8002818 <processUploadDataToServer>
							if(result_final == 1){
 8002c94:	2801      	cmp	r0, #1
							result_final = processUploadDataToServer(&location_info);
 8002c96:	f8c8 0000 	str.w	r0, [r8]
							if(result_final == 1){
 8002c9a:	f040 814f 	bne.w	8002f3c <StartGSM+0x5d0>
								uart_transmit_string(&huart1, (uint8_t *)"Sending SUCCESS\n");
 8002c9e:	498d      	ldr	r1, [pc, #564]	@ (8002ed4 <StartGSM+0x568>)
 8002ca0:	487f      	ldr	r0, [pc, #508]	@ (8002ea0 <StartGSM+0x534>)
 8002ca2:	f002 fde9 	bl	8005878 <uart_transmit_string>
								receive_response("Check location report\n");
 8002ca6:	488c      	ldr	r0, [pc, #560]	@ (8002ed8 <StartGSM+0x56c>)
 8002ca8:	f7fe fb6c 	bl	8001384 <receive_response>
								memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8002cac:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8002cb0:	4649      	mov	r1, r9
 8002cb2:	4628      	mov	r0, r5
 8002cb4:	f009 fcea 	bl	800c68c <memset>
								SIM_UART_ReInitializeRxDMA();
 8002cb8:	f7fe fb4a 	bl	8001350 <SIM_UART_ReInitializeRxDMA>
								if(is_disconnect == 1 || is_using_flash == 1){
 8002cbc:	6822      	ldr	r2, [r4, #0]
 8002cbe:	2a01      	cmp	r2, #1
 8002cc0:	d06a      	beq.n	8002d98 <StartGSM+0x42c>
 8002cc2:	4b86      	ldr	r3, [pc, #536]	@ (8002edc <StartGSM+0x570>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	2b01      	cmp	r3, #1
 8002cc8:	f040 80cf 	bne.w	8002e6a <StartGSM+0x4fe>
									enqueue_GSM(&result_addr_queue, current_addr_gsm);
 8002ccc:	f8df 821c 	ldr.w	r8, [pc, #540]	@ 8002eec <StartGSM+0x580>
									Debug_printf("\n-----------ADDING current address to the result queue----------\n");
 8002cd0:	4883      	ldr	r0, [pc, #524]	@ (8002ee0 <StartGSM+0x574>)
									if(is_keep_up == 0) num_in_mail_sent++;
 8002cd2:	f8df 925c 	ldr.w	r9, [pc, #604]	@ 8002f30 <StartGSM+0x5c4>
									Debug_printf("\n-----------ADDING current address to the result queue----------\n");
 8002cd6:	f002 fdf3 	bl	80058c0 <Debug_printf>
									enqueue_GSM(&result_addr_queue, current_addr_gsm);
 8002cda:	f8db 1000 	ldr.w	r1, [fp]
 8002cde:	4640      	mov	r0, r8
 8002ce0:	f000 fafe 	bl	80032e0 <enqueue_GSM>
									if(is_keep_up == 0) num_in_mail_sent++;
 8002ce4:	f8d9 3000 	ldr.w	r3, [r9]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d160      	bne.n	8002dae <StartGSM+0x442>
 8002cec:	4a7d      	ldr	r2, [pc, #500]	@ (8002ee4 <StartGSM+0x578>)
 8002cee:	6813      	ldr	r3, [r2, #0]
 8002cf0:	3301      	adds	r3, #1
 8002cf2:	6013      	str	r3, [r2, #0]
									Debug_printf("\n--------------RESULT ADDRESS QUEUE----------------\n");
 8002cf4:	487c      	ldr	r0, [pc, #496]	@ (8002ee8 <StartGSM+0x57c>)
									if(start_addr_disconnect >= end_addr_disconnect - 128 && checkAddrExistInQueue(end_addr_disconnect - 128, &result_addr_queue)){
 8002cf6:	f8df 820c 	ldr.w	r8, [pc, #524]	@ 8002f04 <StartGSM+0x598>
 8002cfa:	f8df a214 	ldr.w	sl, [pc, #532]	@ 8002f10 <StartGSM+0x5a4>
									Debug_printf("\n--------------RESULT ADDRESS QUEUE----------------\n");
 8002cfe:	f002 fddf 	bl	80058c0 <Debug_printf>
									printQueue_GSM(&result_addr_queue);
 8002d02:	487a      	ldr	r0, [pc, #488]	@ (8002eec <StartGSM+0x580>)
 8002d04:	f000 fb1c 	bl	8003340 <printQueue_GSM>
									if(start_addr_disconnect >= end_addr_disconnect - 128 && checkAddrExistInQueue(end_addr_disconnect - 128, &result_addr_queue)){
 8002d08:	f8d8 3000 	ldr.w	r3, [r8]
 8002d0c:	f8da 1000 	ldr.w	r1, [sl]
 8002d10:	3b80      	subs	r3, #128	@ 0x80
 8002d12:	428b      	cmp	r3, r1
 8002d14:	f200 80b8 	bhi.w	8002e88 <StartGSM+0x51c>
 8002d18:	f8d8 0000 	ldr.w	r0, [r8]
 8002d1c:	4973      	ldr	r1, [pc, #460]	@ (8002eec <StartGSM+0x580>)
 8002d1e:	3880      	subs	r0, #128	@ 0x80
 8002d20:	f000 fb42 	bl	80033a8 <checkAddrExistInQueue>
 8002d24:	2800      	cmp	r0, #0
 8002d26:	f000 80af 	beq.w	8002e88 <StartGSM+0x51c>
										Debug_printf("\n\n\n\n---------------END GETTING FROM FLASH-------------\n\n\n\n");
 8002d2a:	4871      	ldr	r0, [pc, #452]	@ (8002ef0 <StartGSM+0x584>)
 8002d2c:	f002 fdc8 	bl	80058c0 <Debug_printf>
										is_using_flash = 0;
 8002d30:	4a6a      	ldr	r2, [pc, #424]	@ (8002edc <StartGSM+0x570>)
										clearQueue_GSM(&result_addr_queue);
 8002d32:	486e      	ldr	r0, [pc, #440]	@ (8002eec <StartGSM+0x580>)
										is_using_flash = 0;
 8002d34:	2300      	movs	r3, #0
 8002d36:	6013      	str	r3, [r2, #0]
										clearQueue_GSM(&result_addr_queue);
 8002d38:	f000 faf2 	bl	8003320 <clearQueue_GSM>
										count_shiftleft = 0;
 8002d3c:	4a6d      	ldr	r2, [pc, #436]	@ (8002ef4 <StartGSM+0x588>)
										Debug_printf("\n\n---------------- CLEAR THE MAIL QUEUE ---------------------\n\n");
 8002d3e:	486e      	ldr	r0, [pc, #440]	@ (8002ef8 <StartGSM+0x58c>)
										start_addr_disconnect = 0;
 8002d40:	2300      	movs	r3, #0
 8002d42:	f8ca 3000 	str.w	r3, [sl]
										is_keep_up = 0;
 8002d46:	f8c9 3000 	str.w	r3, [r9]
										end_addr_disconnect = 0;
 8002d4a:	f8c8 3000 	str.w	r3, [r8]
										count_shiftleft = 0;
 8002d4e:	7013      	strb	r3, [r2, #0]
										Debug_printf("\n\n---------------- CLEAR THE MAIL QUEUE ---------------------\n\n");
 8002d50:	f002 fdb6 	bl	80058c0 <Debug_printf>
											Debug_printf("Receiving MAIL\n");
 8002d54:	f8df a1dc 	ldr.w	sl, [pc, #476]	@ 8002f34 <StartGSM+0x5c8>
											osStatus_t status = osMessageQueueGet(RMC_MailQGSMIdHandle, &receivedDataGSM, NULL, 3000); // Wait for mail
 8002d58:	f8df 81a0 	ldr.w	r8, [pc, #416]	@ 8002efc <StartGSM+0x590>
 8002d5c:	f8df 91d8 	ldr.w	r9, [pc, #472]	@ 8002f38 <StartGSM+0x5cc>
											Debug_printf("Receiving MAIL\n");
 8002d60:	4650      	mov	r0, sl
 8002d62:	f002 fdad 	bl	80058c0 <Debug_printf>
											osStatus_t status = osMessageQueueGet(RMC_MailQGSMIdHandle, &receivedDataGSM, NULL, 3000); // Wait for mail
 8002d66:	4965      	ldr	r1, [pc, #404]	@ (8002efc <StartGSM+0x590>)
 8002d68:	f8d9 0000 	ldr.w	r0, [r9]
 8002d6c:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8002d70:	2200      	movs	r2, #0
 8002d72:	f005 ffe1 	bl	8008d38 <osMessageQueueGet>
											if(status == osOK){
 8002d76:	2800      	cmp	r0, #0
 8002d78:	d172      	bne.n	8002e60 <StartGSM+0x4f4>
												Uint32ToHex(receivedDataGSM.address, addr_out_gsm, 8);
 8002d7a:	f8d8 0058 	ldr.w	r0, [r8, #88]	@ 0x58
 8002d7e:	4631      	mov	r1, r6
 8002d80:	2208      	movs	r2, #8
 8002d82:	f002 fd88 	bl	8005896 <Uint32ToHex>
												Debug_printf("Receiving MAIL For CLEARING: %s\n", addr_out_gsm);
 8002d86:	485e      	ldr	r0, [pc, #376]	@ (8002f00 <StartGSM+0x594>)
 8002d88:	4631      	mov	r1, r6
 8002d8a:	f002 fd99 	bl	80058c0 <Debug_printf>
										while(1){
 8002d8e:	e7e7      	b.n	8002d60 <StartGSM+0x3f4>
							receive_response("Check Signal Quality Report\n");
 8002d90:	484d      	ldr	r0, [pc, #308]	@ (8002ec8 <StartGSM+0x55c>)
 8002d92:	f7fe faf7 	bl	8001384 <receive_response>
 8002d96:	e74d      	b.n	8002c34 <StartGSM+0x2c8>
										end_addr_disconnect = current_addr_gsm;
 8002d98:	4b5a      	ldr	r3, [pc, #360]	@ (8002f04 <StartGSM+0x598>)
 8002d9a:	f8db 1000 	ldr.w	r1, [fp]
 8002d9e:	6019      	str	r1, [r3, #0]
										in_getting_mail_stack = 1;
 8002da0:	4959      	ldr	r1, [pc, #356]	@ (8002f08 <StartGSM+0x59c>)
										Debug_printf("End address of network outage. RECONNECTED SUCCESSFULLY: %08x\n", end_addr_disconnect);
 8002da2:	485a      	ldr	r0, [pc, #360]	@ (8002f0c <StartGSM+0x5a0>)
										in_getting_mail_stack = 1;
 8002da4:	600a      	str	r2, [r1, #0]
										Debug_printf("End address of network outage. RECONNECTED SUCCESSFULLY: %08x\n", end_addr_disconnect);
 8002da6:	6819      	ldr	r1, [r3, #0]
 8002da8:	f002 fd8a 	bl	80058c0 <Debug_printf>
 8002dac:	e78e      	b.n	8002ccc <StartGSM+0x360>
									if(is_keep_up == 1 && in_getting_mail_stack == 1){
 8002dae:	2b01      	cmp	r3, #1
 8002db0:	d1a0      	bne.n	8002cf4 <StartGSM+0x388>
 8002db2:	4b55      	ldr	r3, [pc, #340]	@ (8002f08 <StartGSM+0x59c>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	2b01      	cmp	r3, #1
 8002db8:	d19c      	bne.n	8002cf4 <StartGSM+0x388>
										for (int i = 0; i < result_addr_queue.size-1; i++) {
 8002dba:	f8d8 0208 	ldr.w	r0, [r8, #520]	@ 0x208
											int idx = (result_addr_queue.front + i) % MAX_SIZE;
 8002dbe:	f8d8 c200 	ldr.w	ip, [r8, #512]	@ 0x200
										for (int i = 0; i < result_addr_queue.size-1; i++) {
 8002dc2:	f04f 0e00 	mov.w	lr, #0
 8002dc6:	3801      	subs	r0, #1
										int count_stack = 0;
 8002dc8:	4672      	mov	r2, lr
										for (int i = 0; i < result_addr_queue.size-1; i++) {
 8002dca:	4570      	cmp	r0, lr
 8002dcc:	dc12      	bgt.n	8002df4 <StartGSM+0x488>
										for (int i = 0; i < result_addr_queue.size-1; i++) {
 8002dce:	f04f 0e00 	mov.w	lr, #0
 8002dd2:	4570      	cmp	r0, lr
 8002dd4:	dc26      	bgt.n	8002e24 <StartGSM+0x4b8>
										start_addr_disconnect -= count_shiftleft * 128;
 8002dd6:	494e      	ldr	r1, [pc, #312]	@ (8002f10 <StartGSM+0x5a4>)
 8002dd8:	4a46      	ldr	r2, [pc, #280]	@ (8002ef4 <StartGSM+0x588>)
 8002dda:	680b      	ldr	r3, [r1, #0]
 8002ddc:	7810      	ldrb	r0, [r2, #0]
 8002dde:	eba3 13c0 	sub.w	r3, r3, r0, lsl #7
 8002de2:	600b      	str	r3, [r1, #0]
										count_shiftleft = 0;
 8002de4:	2300      	movs	r3, #0
 8002de6:	7013      	strb	r3, [r2, #0]
										in_getting_mail_stack = 0;
 8002de8:	4a47      	ldr	r2, [pc, #284]	@ (8002f08 <StartGSM+0x59c>)
										Debug_printf("\n\n-------------- HAVE SENT ALL THE STACKED DATA IN MAIL QUEUE ----------------\n\n");
 8002dea:	484a      	ldr	r0, [pc, #296]	@ (8002f14 <StartGSM+0x5a8>)
										in_getting_mail_stack = 0;
 8002dec:	6013      	str	r3, [r2, #0]
										Debug_printf("\n\n-------------- HAVE SENT ALL THE STACKED DATA IN MAIL QUEUE ----------------\n\n");
 8002dee:	f002 fd67 	bl	80058c0 <Debug_printf>
 8002df2:	e77f      	b.n	8002cf4 <StartGSM+0x388>
											int idx = (result_addr_queue.front + i) % MAX_SIZE;
 8002df4:	eb0c 030e 	add.w	r3, ip, lr
 8002df8:	4259      	negs	r1, r3
 8002dfa:	f001 017f 	and.w	r1, r1, #127	@ 0x7f
 8002dfe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002e02:	bf58      	it	pl
 8002e04:	424b      	negpl	r3, r1
											if(result_addr_queue.data[idx] == (FLASH_END_ADDRESS - 0x100) && result_addr_queue.data[idx+1] == (FLASH_END_ADDRESS - 0x100)){
 8002e06:	f858 1023 	ldr.w	r1, [r8, r3, lsl #2]
 8002e0a:	f5b1 4f9e 	cmp.w	r1, #20224	@ 0x4f00
 8002e0e:	d106      	bne.n	8002e1e <StartGSM+0x4b2>
 8002e10:	3301      	adds	r3, #1
 8002e12:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 8002e16:	f5b3 4f9e 	cmp.w	r3, #20224	@ 0x4f00
												count_stack++;
 8002e1a:	bf08      	it	eq
 8002e1c:	3201      	addeq	r2, #1
										for (int i = 0; i < result_addr_queue.size-1; i++) {
 8002e1e:	f10e 0e01 	add.w	lr, lr, #1
 8002e22:	e7d2      	b.n	8002dca <StartGSM+0x45e>
											int idx = (result_addr_queue.front + i) % MAX_SIZE;
 8002e24:	eb0c 010e 	add.w	r1, ip, lr
 8002e28:	424b      	negs	r3, r1
 8002e2a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002e2e:	f001 017f 	and.w	r1, r1, #127	@ 0x7f
 8002e32:	bf58      	it	pl
 8002e34:	4259      	negpl	r1, r3
											if(result_addr_queue.data[idx] == (FLASH_END_ADDRESS - 0x100) && result_addr_queue.data[idx+1] == (FLASH_END_ADDRESS - 0x100)){
 8002e36:	f858 3021 	ldr.w	r3, [r8, r1, lsl #2]
 8002e3a:	f5b3 4f9e 	cmp.w	r3, #20224	@ 0x4f00
 8002e3e:	d10c      	bne.n	8002e5a <StartGSM+0x4ee>
 8002e40:	1c4b      	adds	r3, r1, #1
 8002e42:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 8002e46:	f5b3 4f9e 	cmp.w	r3, #20224	@ 0x4f00
												result_addr_queue.data[idx] -= 128 * count_stack;
 8002e4a:	bf01      	itttt	eq
 8002e4c:	01d3      	lsleq	r3, r2, #7
 8002e4e:	f5c3 439e 	rsbeq	r3, r3, #20224	@ 0x4f00
 8002e52:	f848 3021 	streq.w	r3, [r8, r1, lsl #2]
												count_stack--;
 8002e56:	f102 32ff 	addeq.w	r2, r2, #4294967295
										for (int i = 0; i < result_addr_queue.size-1; i++) {
 8002e5a:	f10e 0e01 	add.w	lr, lr, #1
 8002e5e:	e7b8      	b.n	8002dd2 <StartGSM+0x466>
												Debug_printf("Have cleared out all mail queue\n");
 8002e60:	482d      	ldr	r0, [pc, #180]	@ (8002f18 <StartGSM+0x5ac>)
 8002e62:	f002 fd2d 	bl	80058c0 <Debug_printf>
									is_disconnect = 0;
 8002e66:	2300      	movs	r3, #0
 8002e68:	6023      	str	r3, [r4, #0]
								is_pushing_data = 0;
 8002e6a:	4b2c      	ldr	r3, [pc, #176]	@ (8002f1c <StartGSM+0x5b0>)
							Debug_printf("\n--------------------Sending to SERVER takes %d -----------------------\n\n",period);
 8002e6c:	482c      	ldr	r0, [pc, #176]	@ (8002f20 <StartGSM+0x5b4>)
								is_pushing_data = 0;
 8002e6e:	2200      	movs	r2, #0
 8002e70:	601a      	str	r2, [r3, #0]
							int period = __HAL_TIM_GET_COUNTER(&htim3);
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	6a59      	ldr	r1, [r3, #36]	@ 0x24
							Debug_printf("\n--------------------Sending to SERVER takes %d -----------------------\n\n",period);
 8002e76:	f002 fd23 	bl	80058c0 <Debug_printf>
							Debug_printf("\n--------------------END OF SENDING SERVER --------------------------\n\n");
 8002e7a:	482a      	ldr	r0, [pc, #168]	@ (8002f24 <StartGSM+0x5b8>)
 8002e7c:	f002 fd20 	bl	80058c0 <Debug_printf>
							osDelay(200);
 8002e80:	20c8      	movs	r0, #200	@ 0xc8
 8002e82:	f005 feb3 	bl	8008bec <osDelay>
 8002e86:	e6b4      	b.n	8002bf2 <StartGSM+0x286>
										Debug_printf("\n\n------------------ USING FLASH TO PUSH TO SERVER -----------------\n\n");
 8002e88:	4827      	ldr	r0, [pc, #156]	@ (8002f28 <StartGSM+0x5bc>)
 8002e8a:	f002 fd19 	bl	80058c0 <Debug_printf>
										is_using_flash = 1;
 8002e8e:	4a13      	ldr	r2, [pc, #76]	@ (8002edc <StartGSM+0x570>)
 8002e90:	2301      	movs	r3, #1
 8002e92:	6013      	str	r3, [r2, #0]
 8002e94:	e7e7      	b.n	8002e66 <StartGSM+0x4fa>
 8002e96:	bf00      	nop
 8002e98:	20001e60 	.word	0x20001e60
 8002e9c:	0801188a 	.word	0x0801188a
 8002ea0:	20006fac 	.word	0x20006fac
 8002ea4:	20001c18 	.word	0x20001c18
 8002ea8:	20001e78 	.word	0x20001e78
 8002eac:	20001e64 	.word	0x20001e64
 8002eb0:	080118aa 	.word	0x080118aa
 8002eb4:	080118cb 	.word	0x080118cb
 8002eb8:	08010e7a 	.word	0x08010e7a
 8002ebc:	20001e40 	.word	0x20001e40
 8002ec0:	080118fd 	.word	0x080118fd
 8002ec4:	08010c7b 	.word	0x08010c7b
 8002ec8:	08010c84 	.word	0x08010c84
 8002ecc:	20007034 	.word	0x20007034
 8002ed0:	20001e54 	.word	0x20001e54
 8002ed4:	08011545 	.word	0x08011545
 8002ed8:	080115ea 	.word	0x080115ea
 8002edc:	20001e50 	.word	0x20001e50
 8002ee0:	08011980 	.word	0x08011980
 8002ee4:	20001e58 	.word	0x20001e58
 8002ee8:	08011a13 	.word	0x08011a13
 8002eec:	20001c30 	.word	0x20001c30
 8002ef0:	08011a48 	.word	0x08011a48
 8002ef4:	20001e48 	.word	0x20001e48
 8002ef8:	08011a83 	.word	0x08011a83
 8002efc:	20001b58 	.word	0x20001b58
 8002f00:	08011ad3 	.word	0x08011ad3
 8002f04:	20001c24 	.word	0x20001c24
 8002f08:	20001e5c 	.word	0x20001e5c
 8002f0c:	08011941 	.word	0x08011941
 8002f10:	20001c2c 	.word	0x20001c2c
 8002f14:	080119c2 	.word	0x080119c2
 8002f18:	08011af4 	.word	0x08011af4
 8002f1c:	20001e44 	.word	0x20001e44
 8002f20:	08011b5c 	.word	0x08011b5c
 8002f24:	08011ba6 	.word	0x08011ba6
 8002f28:	08011b15 	.word	0x08011b15
 8002f2c:	20000000 	.word	0x20000000
 8002f30:	20001e4c 	.word	0x20001e4c
 8002f34:	08011ac3 	.word	0x08011ac3
 8002f38:	20003b4c 	.word	0x20003b4c
								uart_transmit_string(&huart1, (uint8_t *)"Sending ERROR\n");
 8002f3c:	49b3      	ldr	r1, [pc, #716]	@ (800320c <StartGSM+0x8a0>)
 8002f3e:	48b4      	ldr	r0, [pc, #720]	@ (8003210 <StartGSM+0x8a4>)
 8002f40:	4fb4      	ldr	r7, [pc, #720]	@ (8003214 <StartGSM+0x8a8>)
 8002f42:	f002 fc99 	bl	8005878 <uart_transmit_string>
								memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8002f46:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8002f4a:	4649      	mov	r1, r9
 8002f4c:	48b2      	ldr	r0, [pc, #712]	@ (8003218 <StartGSM+0x8ac>)
 8002f4e:	f009 fb9d 	bl	800c68c <memset>
								SIM_UART_ReInitializeRxDMA();
 8002f52:	f7fe f9fd 	bl	8001350 <SIM_UART_ReInitializeRxDMA>
								if(is_disconnect == 0){
 8002f56:	6823      	ldr	r3, [r4, #0]
 8002f58:	b95b      	cbnz	r3, 8002f72 <StartGSM+0x606>
									if(is_using_flash == 0){
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	b93b      	cbnz	r3, 8002f6e <StartGSM+0x602>
										start_addr_disconnect = current_addr_gsm;
 8002f5e:	4baf      	ldr	r3, [pc, #700]	@ (800321c <StartGSM+0x8b0>)
 8002f60:	f8db 2000 	ldr.w	r2, [fp]
 8002f64:	601a      	str	r2, [r3, #0]
										Debug_printf("Saving start address of connection outage: %08x\n", start_addr_disconnect);
 8002f66:	6819      	ldr	r1, [r3, #0]
 8002f68:	48ad      	ldr	r0, [pc, #692]	@ (8003220 <StartGSM+0x8b4>)
 8002f6a:	f002 fca9 	bl	80058c0 <Debug_printf>
									is_disconnect = 1;
 8002f6e:	2301      	movs	r3, #1
 8002f70:	6023      	str	r3, [r4, #0]
								if(is_using_flash == 1){
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	2b01      	cmp	r3, #1
 8002f76:	f040 810e 	bne.w	8003196 <StartGSM+0x82a>
									if(is_keep_up){
 8002f7a:	f8df 92f4 	ldr.w	r9, [pc, #756]	@ 8003270 <StartGSM+0x904>
 8002f7e:	4ca9      	ldr	r4, [pc, #676]	@ (8003224 <StartGSM+0x8b8>)
 8002f80:	f8d9 2000 	ldr.w	r2, [r9]
 8002f84:	bb3a      	cbnz	r2, 8002fd6 <StartGSM+0x66a>
										for (int i = 0; i < result_addr_queue.size-1; i++) {
 8002f86:	f8d4 0208 	ldr.w	r0, [r4, #520]	@ 0x208
											int idx = (result_addr_queue.front + i) % MAX_SIZE;
 8002f8a:	f8d4 6200 	ldr.w	r6, [r4, #512]	@ 0x200
										for (int i = 0; i < result_addr_queue.size-1; i++) {
 8002f8e:	3801      	subs	r0, #1
 8002f90:	4694      	mov	ip, r2
										int count_stack = 0;
 8002f92:	4611      	mov	r1, r2
										for (int i = 0; i < result_addr_queue.size-1; i++) {
 8002f94:	4560      	cmp	r0, ip
 8002f96:	f300 80c1 	bgt.w	800311c <StartGSM+0x7b0>
										for (int i = 0; i < result_addr_queue.size-1; i++) {
 8002f9a:	4290      	cmp	r0, r2
 8002f9c:	dd36      	ble.n	800300c <StartGSM+0x6a0>
											int idx = (result_addr_queue.front + i) % MAX_SIZE;
 8002f9e:	1995      	adds	r5, r2, r6
 8002fa0:	426b      	negs	r3, r5
 8002fa2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002fa6:	f005 057f 	and.w	r5, r5, #127	@ 0x7f
 8002faa:	bf58      	it	pl
 8002fac:	425d      	negpl	r5, r3
											if(result_addr_queue.data[idx] == (FLASH_END_ADDRESS - 0x100) && result_addr_queue.data[idx+1] == (FLASH_END_ADDRESS - 0x100)){
 8002fae:	f854 3025 	ldr.w	r3, [r4, r5, lsl #2]
 8002fb2:	f5b3 4f9e 	cmp.w	r3, #20224	@ 0x4f00
 8002fb6:	d10c      	bne.n	8002fd2 <StartGSM+0x666>
 8002fb8:	1c6b      	adds	r3, r5, #1
 8002fba:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8002fbe:	f5b3 4f9e 	cmp.w	r3, #20224	@ 0x4f00
												result_addr_queue.data[idx] -= 128 * count_stack;
 8002fc2:	bf01      	itttt	eq
 8002fc4:	01cb      	lsleq	r3, r1, #7
 8002fc6:	f5c3 439e 	rsbeq	r3, r3, #20224	@ 0x4f00
 8002fca:	f844 3025 	streq.w	r3, [r4, r5, lsl #2]
												count_stack--;
 8002fce:	f101 31ff 	addeq.w	r1, r1, #4294967295
										for (int i = 0; i < result_addr_queue.size-1; i++) {
 8002fd2:	3201      	adds	r2, #1
 8002fd4:	e7e1      	b.n	8002f9a <StartGSM+0x62e>
										Debug_printf("\n-----------------BEFORE update the result address data: GSM --------------\n");
 8002fd6:	4894      	ldr	r0, [pc, #592]	@ (8003228 <StartGSM+0x8bc>)
												Uint32ToHex(result_addr_queue.data[idx], addr_out_gsm, 8);
 8002fd8:	f8df a268 	ldr.w	sl, [pc, #616]	@ 8003244 <StartGSM+0x8d8>
										Debug_printf("\n-----------------BEFORE update the result address data: GSM --------------\n");
 8002fdc:	f002 fc70 	bl	80058c0 <Debug_printf>
										printQueue_GSM(&result_addr_queue);
 8002fe0:	4620      	mov	r0, r4
 8002fe2:	f000 f9ad 	bl	8003340 <printQueue_GSM>
										Debug_printf("\n--------------- Update the result address data: GSM --------------\n");
 8002fe6:	4891      	ldr	r0, [pc, #580]	@ (800322c <StartGSM+0x8c0>)
 8002fe8:	f002 fc6a 	bl	80058c0 <Debug_printf>
											if(result_addr_queue.data[idx] < start_addr_disconnect){
 8002fec:	4b8b      	ldr	r3, [pc, #556]	@ (800321c <StartGSM+0x8b0>)
										for (int i = 0; i < result_addr_queue.size; i++) {
 8002fee:	2600      	movs	r6, #0
 8002ff0:	f8d4 0208 	ldr.w	r0, [r4, #520]	@ 0x208
											int idx = (result_addr_queue.front + i) % MAX_SIZE;
 8002ff4:	f8d4 5200 	ldr.w	r5, [r4, #512]	@ 0x200
										for (int i = 0; i < result_addr_queue.size; i++) {
 8002ff8:	42b0      	cmp	r0, r6
 8002ffa:	dc59      	bgt.n	80030b0 <StartGSM+0x744>
										int count_shiftleft_dub = count_shiftleft;
 8002ffc:	4b8c      	ldr	r3, [pc, #560]	@ (8003230 <StartGSM+0x8c4>)
 8002ffe:	f893 c000 	ldrb.w	ip, [r3]
												result_addr_queue.data[idx] -= 128 * count_shiftleft;
 8003002:	4666      	mov	r6, ip
 8003004:	01f6      	lsls	r6, r6, #7
										for (int i = 0; i < result_addr_queue.size; i++){
 8003006:	2100      	movs	r1, #0
 8003008:	4288      	cmp	r0, r1
 800300a:	dc6e      	bgt.n	80030ea <StartGSM+0x77e>
									printQueue_GSM(&result_addr_queue);
 800300c:	4885      	ldr	r0, [pc, #532]	@ (8003224 <StartGSM+0x8b8>)
 800300e:	f000 f997 	bl	8003340 <printQueue_GSM>
									start_addr_disconnect -= 128 * count_shiftleft;
 8003012:	4b82      	ldr	r3, [pc, #520]	@ (800321c <StartGSM+0x8b0>)
 8003014:	4986      	ldr	r1, [pc, #536]	@ (8003230 <StartGSM+0x8c4>)
 8003016:	681a      	ldr	r2, [r3, #0]
 8003018:	780d      	ldrb	r5, [r1, #0]
 800301a:	eba2 12c5 	sub.w	r2, r2, r5, lsl #7
 800301e:	601a      	str	r2, [r3, #0]
									if(start_addr_disconnect < 0x3000) start_addr_disconnect = 0x3000;
 8003020:	681a      	ldr	r2, [r3, #0]
 8003022:	f5b2 5f40 	cmp.w	r2, #12288	@ 0x3000
									start_addr_disconnect -= 128 * count_shiftleft;
 8003026:	ea4f 10c5 	mov.w	r0, r5, lsl #7
									if(start_addr_disconnect < 0x3000) start_addr_disconnect = 0x3000;
 800302a:	f0c0 808f 	bcc.w	800314c <StartGSM+0x7e0>
									end_addr_disconnect -= 128 *count_shiftleft;
 800302e:	4a81      	ldr	r2, [pc, #516]	@ (8003234 <StartGSM+0x8c8>)
										Debug_printf("Receiving MAIL\n");
 8003030:	f8df a234 	ldr.w	sl, [pc, #564]	@ 8003268 <StartGSM+0x8fc>
									end_addr_disconnect -= 128 *count_shiftleft;
 8003034:	6813      	ldr	r3, [r2, #0]
										osStatus_t status = osMessageQueueGet(RMC_MailQGSMIdHandle, &receivedDataGSM, NULL, 3000); // Wait for mail
 8003036:	4d80      	ldr	r5, [pc, #512]	@ (8003238 <StartGSM+0x8cc>)
 8003038:	4e80      	ldr	r6, [pc, #512]	@ (800323c <StartGSM+0x8d0>)
									end_addr_disconnect -= 128 *count_shiftleft;
 800303a:	1a1b      	subs	r3, r3, r0
 800303c:	6013      	str	r3, [r2, #0]
									Debug_printf("\n\n---------------- CLEAR THE MAIL QUEUE ---------------------\n\n");
 800303e:	4880      	ldr	r0, [pc, #512]	@ (8003240 <StartGSM+0x8d4>)
									count_shiftleft = 0;
 8003040:	2300      	movs	r3, #0
 8003042:	700b      	strb	r3, [r1, #0]
									Debug_printf("\n\n---------------- CLEAR THE MAIL QUEUE ---------------------\n\n");
 8003044:	f002 fc3c 	bl	80058c0 <Debug_printf>
										Debug_printf("Receiving MAIL\n");
 8003048:	4650      	mov	r0, sl
 800304a:	f002 fc39 	bl	80058c0 <Debug_printf>
										osStatus_t status = osMessageQueueGet(RMC_MailQGSMIdHandle, &receivedDataGSM, NULL, 3000); // Wait for mail
 800304e:	497a      	ldr	r1, [pc, #488]	@ (8003238 <StartGSM+0x8cc>)
 8003050:	6830      	ldr	r0, [r6, #0]
 8003052:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8003056:	2200      	movs	r2, #0
 8003058:	f005 fe6e 	bl	8008d38 <osMessageQueueGet>
										if(status == osOK){
 800305c:	2800      	cmp	r0, #0
 800305e:	d179      	bne.n	8003154 <StartGSM+0x7e8>
											Uint32ToHex(receivedDataGSM.address, addr_out_gsm, 8);
 8003060:	2208      	movs	r2, #8
 8003062:	4978      	ldr	r1, [pc, #480]	@ (8003244 <StartGSM+0x8d8>)
 8003064:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003066:	f002 fc16 	bl	8005896 <Uint32ToHex>
											Debug_printf("Receiving MAIL: %s\n", addr_out_gsm);
 800306a:	4976      	ldr	r1, [pc, #472]	@ (8003244 <StartGSM+0x8d8>)
 800306c:	4876      	ldr	r0, [pc, #472]	@ (8003248 <StartGSM+0x8dc>)
 800306e:	f002 fc27 	bl	80058c0 <Debug_printf>
											if(is_keep_up == 0 && receivedDataGSM.address == 0x4F00){
 8003072:	f8d9 2000 	ldr.w	r2, [r9]
 8003076:	2a00      	cmp	r2, #0
 8003078:	d1e6      	bne.n	8003048 <StartGSM+0x6dc>
 800307a:	6dab      	ldr	r3, [r5, #88]	@ 0x58
 800307c:	f5b3 4f9e 	cmp.w	r3, #20224	@ 0x4f00
 8003080:	d1e2      	bne.n	8003048 <StartGSM+0x6dc>
												for (int i = 0; i < num_in_mail_sent; i++) {
 8003082:	4b72      	ldr	r3, [pc, #456]	@ (800324c <StartGSM+0x8e0>)
													int idx = (result_addr_queue.rear - i + MAX_SIZE) % MAX_SIZE; // Calculate the index in reverse
 8003084:	f8d4 1204 	ldr.w	r1, [r4, #516]	@ 0x204
												for (int i = 0; i < num_in_mail_sent; i++) {
 8003088:	f8d3 c000 	ldr.w	ip, [r3]
													int idx = (result_addr_queue.rear - i + MAX_SIZE) % MAX_SIZE; // Calculate the index in reverse
 800308c:	3180      	adds	r1, #128	@ 0x80
												for (int i = 0; i < num_in_mail_sent; i++) {
 800308e:	4594      	cmp	ip, r2
 8003090:	ddda      	ble.n	8003048 <StartGSM+0x6dc>
													int idx = (result_addr_queue.rear - i + MAX_SIZE) % MAX_SIZE; // Calculate the index in reverse
 8003092:	1a8b      	subs	r3, r1, r2
 8003094:	4258      	negs	r0, r3
 8003096:	f000 007f 	and.w	r0, r0, #127	@ 0x7f
 800309a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800309e:	bf58      	it	pl
 80030a0:	4243      	negpl	r3, r0
												for (int i = 0; i < num_in_mail_sent; i++) {
 80030a2:	3201      	adds	r2, #1
													result_addr_queue.data[idx] -= 128;
 80030a4:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 80030a8:	3880      	subs	r0, #128	@ 0x80
 80030aa:	f844 0023 	str.w	r0, [r4, r3, lsl #2]
												for (int i = 0; i < num_in_mail_sent; i++) {
 80030ae:	e7ee      	b.n	800308e <StartGSM+0x722>
											int idx = (result_addr_queue.front + i) % MAX_SIZE;
 80030b0:	4435      	add	r5, r6
 80030b2:	426a      	negs	r2, r5
 80030b4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80030b8:	f005 057f 	and.w	r5, r5, #127	@ 0x7f
 80030bc:	bf58      	it	pl
 80030be:	4255      	negpl	r5, r2
											if(result_addr_queue.data[idx] < start_addr_disconnect){
 80030c0:	681a      	ldr	r2, [r3, #0]
 80030c2:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]
 80030c6:	4290      	cmp	r0, r2
 80030c8:	d20d      	bcs.n	80030e6 <StartGSM+0x77a>
												Uint32ToHex(result_addr_queue.data[idx], addr_out_gsm, 8);
 80030ca:	2208      	movs	r2, #8
 80030cc:	4651      	mov	r1, sl
 80030ce:	f002 fbe2 	bl	8005896 <Uint32ToHex>
												Debug_printf("CURRENT INDEX TO CHECK DELETING: %s", addr_out_gsm);
 80030d2:	485f      	ldr	r0, [pc, #380]	@ (8003250 <StartGSM+0x8e4>)
 80030d4:	4651      	mov	r1, sl
 80030d6:	f002 fbf3 	bl	80058c0 <Debug_printf>
												deleteMiddle_GSM(&result_addr_queue, idx);
 80030da:	4852      	ldr	r0, [pc, #328]	@ (8003224 <StartGSM+0x8b8>)
 80030dc:	4629      	mov	r1, r5
 80030de:	f000 f989 	bl	80033f4 <deleteMiddle_GSM>
												i--;
 80030e2:	4b4e      	ldr	r3, [pc, #312]	@ (800321c <StartGSM+0x8b0>)
 80030e4:	3e01      	subs	r6, #1
										for (int i = 0; i < result_addr_queue.size; i++) {
 80030e6:	3601      	adds	r6, #1
 80030e8:	e782      	b.n	8002ff0 <StartGSM+0x684>
											int idx = (result_addr_queue.front + i) % MAX_SIZE;
 80030ea:	194b      	adds	r3, r1, r5
 80030ec:	425a      	negs	r2, r3
 80030ee:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80030f2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80030f6:	bf58      	it	pl
 80030f8:	4253      	negpl	r3, r2
										for (int i = 0; i < result_addr_queue.size; i++){
 80030fa:	3101      	adds	r1, #1
											if(result_addr_queue.data[idx] == FLASH_END_ADDRESS-0x100){
 80030fc:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
 8003100:	f5b2 4f9e 	cmp.w	r2, #20224	@ 0x4f00
												result_addr_queue.data[idx] -= 128 * count_shiftleft_dub;
 8003104:	bf06      	itte	eq
 8003106:	ea4f 12cc 	moveq.w	r2, ip, lsl #7
 800310a:	f5c2 429e 	rsbeq	r2, r2, #20224	@ 0x4f00
												result_addr_queue.data[idx] -= 128 * count_shiftleft;
 800310e:	1b92      	subne	r2, r2, r6
 8003110:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
												count_shiftleft_dub -= 1;
 8003114:	bf08      	it	eq
 8003116:	f10c 3cff 	addeq.w	ip, ip, #4294967295
										for (int i = 0; i < result_addr_queue.size; i++){
 800311a:	e775      	b.n	8003008 <StartGSM+0x69c>
											int idx = (result_addr_queue.front + i) % MAX_SIZE;
 800311c:	eb06 030c 	add.w	r3, r6, ip
 8003120:	425d      	negs	r5, r3
 8003122:	f005 057f 	and.w	r5, r5, #127	@ 0x7f
 8003126:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800312a:	bf58      	it	pl
 800312c:	426b      	negpl	r3, r5
											if(result_addr_queue.data[idx] == (FLASH_END_ADDRESS - 0x100) && result_addr_queue.data[idx+1] == (FLASH_END_ADDRESS - 0x100)){
 800312e:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8003132:	f5b5 4f9e 	cmp.w	r5, #20224	@ 0x4f00
 8003136:	d106      	bne.n	8003146 <StartGSM+0x7da>
 8003138:	3301      	adds	r3, #1
 800313a:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 800313e:	f5b3 4f9e 	cmp.w	r3, #20224	@ 0x4f00
												count_stack++;
 8003142:	bf08      	it	eq
 8003144:	3101      	addeq	r1, #1
										for (int i = 0; i < result_addr_queue.size-1; i++) {
 8003146:	f10c 0c01 	add.w	ip, ip, #1
 800314a:	e723      	b.n	8002f94 <StartGSM+0x628>
									if(start_addr_disconnect < 0x3000) start_addr_disconnect = 0x3000;
 800314c:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
 8003150:	601a      	str	r2, [r3, #0]
 8003152:	e76c      	b.n	800302e <StartGSM+0x6c2>
											Debug_printf("Have cleared out all mail queue\n");
 8003154:	483f      	ldr	r0, [pc, #252]	@ (8003254 <StartGSM+0x8e8>)
 8003156:	f002 fbb3 	bl	80058c0 <Debug_printf>
									is_using_flash = 0;
 800315a:	2300      	movs	r3, #0
 800315c:	603b      	str	r3, [r7, #0]
								is_pushing_data = 0;
 800315e:	4b3e      	ldr	r3, [pc, #248]	@ (8003258 <StartGSM+0x8ec>)
 8003160:	2400      	movs	r4, #0
 8003162:	601c      	str	r4, [r3, #0]
								if(result_final == 2){
 8003164:	f8d8 3000 	ldr.w	r3, [r8]
 8003168:	2b02      	cmp	r3, #2
 800316a:	d14a      	bne.n	8003202 <StartGSM+0x896>
									Debug_printf("---------------------SIM ERROR ----------------------\n");
 800316c:	483b      	ldr	r0, [pc, #236]	@ (800325c <StartGSM+0x8f0>)
 800316e:	f002 fba7 	bl	80058c0 <Debug_printf>
									memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8003172:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8003176:	4621      	mov	r1, r4
 8003178:	4827      	ldr	r0, [pc, #156]	@ (8003218 <StartGSM+0x8ac>)
 800317a:	f009 fa87 	bl	800c68c <memset>
									SIM_UART_ReInitializeRxDMA();
 800317e:	f7fe f8e7 	bl	8001350 <SIM_UART_ReInitializeRxDMA>
									uart_transmit_string(&huart1,(uint8_t*) "Rebooting SIM module\n");
 8003182:	4937      	ldr	r1, [pc, #220]	@ (8003260 <StartGSM+0x8f4>)
 8003184:	4822      	ldr	r0, [pc, #136]	@ (8003210 <StartGSM+0x8a4>)
 8003186:	f002 fb77 	bl	8005878 <uart_transmit_string>
									reboot_SIM_module();
 800318a:	f7fe f929 	bl	80013e0 <reboot_SIM_module>
				Debug_printf("\n--------------------END OF CASE 7 --------------------------\n\n");
 800318e:	4835      	ldr	r0, [pc, #212]	@ (8003264 <StartGSM+0x8f8>)
 8003190:	f002 fb96 	bl	80058c0 <Debug_printf>
				break;
 8003194:	e474      	b.n	8002a80 <StartGSM+0x114>
									Debug_printf("\n\n---------------- CLEAR THE MAIL QUEUE ---------------------\n\n");
 8003196:	482a      	ldr	r0, [pc, #168]	@ (8003240 <StartGSM+0x8d4>)
										Debug_printf("Receiving MAIL\n");
 8003198:	4f33      	ldr	r7, [pc, #204]	@ (8003268 <StartGSM+0x8fc>)
										osStatus_t status = osMessageQueueGet(RMC_MailQGSMIdHandle, &receivedDataGSM, NULL, 3000); // Wait for mail
 800319a:	4d27      	ldr	r5, [pc, #156]	@ (8003238 <StartGSM+0x8cc>)
 800319c:	4e27      	ldr	r6, [pc, #156]	@ (800323c <StartGSM+0x8d0>)
									Debug_printf("\n\n---------------- CLEAR THE MAIL QUEUE ---------------------\n\n");
 800319e:	f002 fb8f 	bl	80058c0 <Debug_printf>
									int count_mail_end_addr = 0;
 80031a2:	2400      	movs	r4, #0
										Debug_printf("Receiving MAIL\n");
 80031a4:	4638      	mov	r0, r7
 80031a6:	f002 fb8b 	bl	80058c0 <Debug_printf>
										osStatus_t status = osMessageQueueGet(RMC_MailQGSMIdHandle, &receivedDataGSM, NULL, 3000); // Wait for mail
 80031aa:	4923      	ldr	r1, [pc, #140]	@ (8003238 <StartGSM+0x8cc>)
 80031ac:	6830      	ldr	r0, [r6, #0]
 80031ae:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 80031b2:	2200      	movs	r2, #0
 80031b4:	f005 fdc0 	bl	8008d38 <osMessageQueueGet>
										if(status == osOK){
 80031b8:	b970      	cbnz	r0, 80031d8 <StartGSM+0x86c>
											Uint32ToHex(receivedDataGSM.address, addr_out_gsm, 8);
 80031ba:	4922      	ldr	r1, [pc, #136]	@ (8003244 <StartGSM+0x8d8>)
 80031bc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80031be:	2208      	movs	r2, #8
 80031c0:	f002 fb69 	bl	8005896 <Uint32ToHex>
											Debug_printf("Receiving MAIL: %s\n", addr_out_gsm);
 80031c4:	491f      	ldr	r1, [pc, #124]	@ (8003244 <StartGSM+0x8d8>)
 80031c6:	4820      	ldr	r0, [pc, #128]	@ (8003248 <StartGSM+0x8dc>)
 80031c8:	f002 fb7a 	bl	80058c0 <Debug_printf>
											if(receivedDataGSM.address == (FLASH_END_ADDRESS - 0X100)){
 80031cc:	6dab      	ldr	r3, [r5, #88]	@ 0x58
 80031ce:	f5b3 4f9e 	cmp.w	r3, #20224	@ 0x4f00
 80031d2:	d1e7      	bne.n	80031a4 <StartGSM+0x838>
												count_mail_end_addr++;
 80031d4:	3401      	adds	r4, #1
 80031d6:	e7e5      	b.n	80031a4 <StartGSM+0x838>
											Debug_printf("Have cleared out all mail queue\n");
 80031d8:	481e      	ldr	r0, [pc, #120]	@ (8003254 <StartGSM+0x8e8>)
 80031da:	f002 fb71 	bl	80058c0 <Debug_printf>
									if(count_mail_end_addr > 0){
 80031de:	2c00      	cmp	r4, #0
 80031e0:	d0bd      	beq.n	800315e <StartGSM+0x7f2>
										if(start_addr_disconnect == (FLASH_END_ADDRESS - 0x100)){
 80031e2:	4a0e      	ldr	r2, [pc, #56]	@ (800321c <StartGSM+0x8b0>)
 80031e4:	6813      	ldr	r3, [r2, #0]
 80031e6:	f5b3 4f9e 	cmp.w	r3, #20224	@ 0x4f00
											start_addr_disconnect -= count_mail_end_addr * 128;
 80031ea:	bf0d      	iteet	eq
 80031ec:	6813      	ldreq	r3, [r2, #0]
											start_addr_disconnect -= (count_mail_end_addr - 1) * 128;
 80031ee:	6811      	ldrne	r1, [r2, #0]
 80031f0:	f104 33ff 	addne.w	r3, r4, #4294967295
											start_addr_disconnect -= count_mail_end_addr * 128;
 80031f4:	eba3 13c4 	subeq.w	r3, r3, r4, lsl #7
											start_addr_disconnect -= (count_mail_end_addr - 1) * 128;
 80031f8:	bf18      	it	ne
 80031fa:	eba1 13c3 	subne.w	r3, r1, r3, lsl #7
 80031fe:	6013      	str	r3, [r2, #0]
 8003200:	e7ad      	b.n	800315e <StartGSM+0x7f2>
									Debug_printf("\n--------------------SENDING ERROR -----------------------\n");
 8003202:	481a      	ldr	r0, [pc, #104]	@ (800326c <StartGSM+0x900>)
 8003204:	f002 fb5c 	bl	80058c0 <Debug_printf>
									process++;
 8003208:	2408      	movs	r4, #8
									break;
 800320a:	e7c0      	b.n	800318e <StartGSM+0x822>
 800320c:	08011bee 	.word	0x08011bee
 8003210:	20006fac 	.word	0x20006fac
 8003214:	20001e50 	.word	0x20001e50
 8003218:	20001e78 	.word	0x20001e78
 800321c:	20001c2c 	.word	0x20001c2c
 8003220:	08011bfd 	.word	0x08011bfd
 8003224:	20001c30 	.word	0x20001c30
 8003228:	08011c2e 	.word	0x08011c2e
 800322c:	08011c7b 	.word	0x08011c7b
 8003230:	20001e48 	.word	0x20001e48
 8003234:	20001c24 	.word	0x20001c24
 8003238:	20001b58 	.word	0x20001b58
 800323c:	20003b4c 	.word	0x20003b4c
 8003240:	08011a83 	.word	0x08011a83
 8003244:	20001c18 	.word	0x20001c18
 8003248:	08011ce4 	.word	0x08011ce4
 800324c:	20001e58 	.word	0x20001e58
 8003250:	08011cc0 	.word	0x08011cc0
 8003254:	08011af4 	.word	0x08011af4
 8003258:	20001e44 	.word	0x20001e44
 800325c:	08011cf8 	.word	0x08011cf8
 8003260:	080116e9 	.word	0x080116e9
 8003264:	08011d6b 	.word	0x08011d6b
 8003268:	08011ac3 	.word	0x08011ac3
 800326c:	08011d2f 	.word	0x08011d2f
 8003270:	20001e4c 	.word	0x20001e4c
				uint32_t freeStack1 = osThreadGetStackSpace(GSMHandle);
 8003274:	4c11      	ldr	r4, [pc, #68]	@ (80032bc <StartGSM+0x950>)
 8003276:	6820      	ldr	r0, [r4, #0]
 8003278:	f005 fca4 	bl	8008bc4 <osThreadGetStackSpace>
				Debug_printf("\n\n --------------Thread GSM %p is running low on stack: %04d bytes remaining----------\n\n",GSMHandle, freeStack1);
 800327c:	6821      	ldr	r1, [r4, #0]
				uint32_t freeStack1 = osThreadGetStackSpace(GSMHandle);
 800327e:	4602      	mov	r2, r0
				Debug_printf("\n\n --------------Thread GSM %p is running low on stack: %04d bytes remaining----------\n\n",GSMHandle, freeStack1);
 8003280:	480f      	ldr	r0, [pc, #60]	@ (80032c0 <StartGSM+0x954>)
 8003282:	f002 fb1d 	bl	80058c0 <Debug_printf>
				int result_close = close_connection(0);
 8003286:	2000      	movs	r0, #0
 8003288:	f7ff f8e2 	bl	8002450 <close_connection>
					memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 800328c:	f44f 72c0 	mov.w	r2, #384	@ 0x180
				if(result_close){
 8003290:	4601      	mov	r1, r0
 8003292:	2800      	cmp	r0, #0
 8003294:	f43f aba4 	beq.w	80029e0 <StartGSM+0x74>
					memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8003298:	2100      	movs	r1, #0
 800329a:	480a      	ldr	r0, [pc, #40]	@ (80032c4 <StartGSM+0x958>)
 800329c:	f009 f9f6 	bl	800c68c <memset>
					SIM_UART_ReInitializeRxDMA();
 80032a0:	f7fe f856 	bl	8001350 <SIM_UART_ReInitializeRxDMA>
						uart_transmit_string(&huart1,(uint8_t*) "REOPEN CONNECTION TO SERVER\n");
 80032a4:	4908      	ldr	r1, [pc, #32]	@ (80032c8 <StartGSM+0x95c>)
 80032a6:	4809      	ldr	r0, [pc, #36]	@ (80032cc <StartGSM+0x960>)
 80032a8:	f002 fae6 	bl	8005878 <uart_transmit_string>
						process = 4;
 80032ac:	e411      	b.n	8002ad2 <StartGSM+0x166>
				else process++;
 80032ae:	2402      	movs	r4, #2
 80032b0:	f7ff bbe6 	b.w	8002a80 <StartGSM+0x114>
						process++;
 80032b4:	2405      	movs	r4, #5
 80032b6:	f7ff bbe3 	b.w	8002a80 <StartGSM+0x114>
 80032ba:	bf00      	nop
 80032bc:	20004d08 	.word	0x20004d08
 80032c0:	08011455 	.word	0x08011455
 80032c4:	20001e78 	.word	0x20001e78
 80032c8:	08011dab 	.word	0x08011dab
 80032cc:	20006fac 	.word	0x20006fac

080032d0 <initQueue_GSM>:


// Function to initialize the Queue_GSM
void initQueue_GSM(Queue_GSM* q) {
    q->front = 0;
    q->rear = -1;
 80032d0:	2300      	movs	r3, #0
 80032d2:	f04f 32ff 	mov.w	r2, #4294967295
 80032d6:	e9c0 3280 	strd	r3, r2, [r0, #512]	@ 0x200
    q->size = 0;
 80032da:	f8c0 3208 	str.w	r3, [r0, #520]	@ 0x208
}
 80032de:	4770      	bx	lr

080032e0 <enqueue_GSM>:
    return q->size == 0;
}

// Function to check if the Queue_GSM is full
int isFull_GSM(Queue_GSM* q) {
    return q->size == MAX_SIZE;
 80032e0:	f8d0 2208 	ldr.w	r2, [r0, #520]	@ 0x208
}

// Function to enqueue (add) a uint32_t value to the Queue_GSM
void enqueue_GSM(Queue_GSM* q, uint32_t value) {
    if (isFull_GSM(q)) {
 80032e4:	2a80      	cmp	r2, #128	@ 0x80
void enqueue_GSM(Queue_GSM* q, uint32_t value) {
 80032e6:	b410      	push	{r4}
    if (isFull_GSM(q)) {
 80032e8:	d104      	bne.n	80032f4 <enqueue_GSM+0x14>
        Debug_printf("Queue_GSM is full\n");
 80032ea:	480c      	ldr	r0, [pc, #48]	@ (800331c <enqueue_GSM+0x3c>)
        return;
    }
    q->rear = (q->rear + 1) % MAX_SIZE; // Circular increment
    q->data[q->rear] = value;
    q->size++;
}
 80032ec:	f85d 4b04 	ldr.w	r4, [sp], #4
        Debug_printf("Queue_GSM is full\n");
 80032f0:	f002 bae6 	b.w	80058c0 <Debug_printf>
    q->rear = (q->rear + 1) % MAX_SIZE; // Circular increment
 80032f4:	f8d0 3204 	ldr.w	r3, [r0, #516]	@ 0x204
 80032f8:	3301      	adds	r3, #1
 80032fa:	425c      	negs	r4, r3
 80032fc:	f004 047f 	and.w	r4, r4, #127	@ 0x7f
 8003300:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003304:	bf58      	it	pl
 8003306:	4263      	negpl	r3, r4
    q->size++;
 8003308:	3201      	adds	r2, #1
    q->rear = (q->rear + 1) % MAX_SIZE; // Circular increment
 800330a:	f8c0 3204 	str.w	r3, [r0, #516]	@ 0x204
}
 800330e:	f85d 4b04 	ldr.w	r4, [sp], #4
    q->data[q->rear] = value;
 8003312:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
    q->size++;
 8003316:	f8c0 2208 	str.w	r2, [r0, #520]	@ 0x208
}
 800331a:	4770      	bx	lr
 800331c:	08011dc8 	.word	0x08011dc8

08003320 <clearQueue_GSM>:
    }
    return q->data[q->front];
}

// Function to clear the entire Queue_GSM
void clearQueue_GSM(Queue_GSM* q) {
 8003320:	b510      	push	{r4, lr}
	for (int i = 0; i < MAX_SIZE; i++) {
		q->data[i] = 0; // Clear the data explicitly
 8003322:	f44f 7200 	mov.w	r2, #512	@ 0x200
void clearQueue_GSM(Queue_GSM* q) {
 8003326:	4604      	mov	r4, r0
		q->data[i] = 0; // Clear the data explicitly
 8003328:	2100      	movs	r1, #0
 800332a:	f009 f9af 	bl	800c68c <memset>
	}
    q->front = 0;
    q->rear = -1;
 800332e:	2300      	movs	r3, #0
 8003330:	f04f 32ff 	mov.w	r2, #4294967295
 8003334:	e9c4 3280 	strd	r3, r2, [r4, #512]	@ 0x200
    q->size = 0;
 8003338:	f8c4 3208 	str.w	r3, [r4, #520]	@ 0x208
}
 800333c:	bd10      	pop	{r4, pc}
	...

08003340 <printQueue_GSM>:

// Function to print the Queue_GSM contents (for debugging)
int printQueue_GSM(Queue_GSM* q) {
 8003340:	b570      	push	{r4, r5, r6, lr}
    return q->size == 0;
 8003342:	f8d0 5208 	ldr.w	r5, [r0, #520]	@ 0x208
int printQueue_GSM(Queue_GSM* q) {
 8003346:	4604      	mov	r4, r0
    if (isEmpty_GSM(q)) {
 8003348:	b925      	cbnz	r5, 8003354 <printQueue_GSM+0x14>
        Debug_printf("Queue_GSM is empty\n");
 800334a:	4813      	ldr	r0, [pc, #76]	@ (8003398 <printQueue_GSM+0x58>)
 800334c:	f002 fab8 	bl	80058c0 <Debug_printf>
        int idx = (q->front + i) % MAX_SIZE;
        Debug_printf("Index %d: %08x\n", i, q->data[idx]);
    }
    Debug_printf("\n");
    return q->size;
}
 8003350:	4628      	mov	r0, r5
 8003352:	bd70      	pop	{r4, r5, r6, pc}
    Debug_printf("Queue_GSM contents: \n");
 8003354:	4811      	ldr	r0, [pc, #68]	@ (800339c <printQueue_GSM+0x5c>)
        Debug_printf("Index %d: %08x\n", i, q->data[idx]);
 8003356:	4e12      	ldr	r6, [pc, #72]	@ (80033a0 <printQueue_GSM+0x60>)
    Debug_printf("Queue_GSM contents: \n");
 8003358:	f002 fab2 	bl	80058c0 <Debug_printf>
    for (int i = 0; i < q->size; i++) {
 800335c:	2500      	movs	r5, #0
 800335e:	f8d4 3208 	ldr.w	r3, [r4, #520]	@ 0x208
 8003362:	42ab      	cmp	r3, r5
 8003364:	dc05      	bgt.n	8003372 <printQueue_GSM+0x32>
    Debug_printf("\n");
 8003366:	480f      	ldr	r0, [pc, #60]	@ (80033a4 <printQueue_GSM+0x64>)
 8003368:	f002 faaa 	bl	80058c0 <Debug_printf>
    return q->size;
 800336c:	f8d4 5208 	ldr.w	r5, [r4, #520]	@ 0x208
 8003370:	e7ee      	b.n	8003350 <printQueue_GSM+0x10>
        int idx = (q->front + i) % MAX_SIZE;
 8003372:	f8d4 3200 	ldr.w	r3, [r4, #512]	@ 0x200
 8003376:	442b      	add	r3, r5
 8003378:	425a      	negs	r2, r3
 800337a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800337e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003382:	bf58      	it	pl
 8003384:	4253      	negpl	r3, r2
        Debug_printf("Index %d: %08x\n", i, q->data[idx]);
 8003386:	4629      	mov	r1, r5
 8003388:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
 800338c:	4630      	mov	r0, r6
 800338e:	f002 fa97 	bl	80058c0 <Debug_printf>
    for (int i = 0; i < q->size; i++) {
 8003392:	3501      	adds	r5, #1
 8003394:	e7e3      	b.n	800335e <printQueue_GSM+0x1e>
 8003396:	bf00      	nop
 8003398:	08011ddb 	.word	0x08011ddb
 800339c:	08011def 	.word	0x08011def
 80033a0:	08011e05 	.word	0x08011e05
 80033a4:	08011a81 	.word	0x08011a81

080033a8 <checkAddrExistInQueue>:

// Function to check if an address exists in the Queue_GSM
int checkAddrExistInQueue(uint32_t addr, Queue_GSM* q) {
 80033a8:	b538      	push	{r3, r4, r5, lr}
    for (int i = 0; i < q->size; i++) {
 80033aa:	f8d1 5208 	ldr.w	r5, [r1, #520]	@ 0x208
 80033ae:	2200      	movs	r2, #0
 80033b0:	4295      	cmp	r5, r2
 80033b2:	dc05      	bgt.n	80033c0 <checkAddrExistInQueue+0x18>
        }
//        if(addr > q->data[idx] && addr < end_addr){
//        	Debug_printf("INVALID ADDRESS: %08lx\n", addr);
//        }
    }
    Debug_printf("NOT FOUND ADDRESS: %08lx\n", addr);
 80033b4:	4601      	mov	r1, r0
 80033b6:	480d      	ldr	r0, [pc, #52]	@ (80033ec <checkAddrExistInQueue+0x44>)
 80033b8:	f002 fa82 	bl	80058c0 <Debug_printf>
    return 0;
 80033bc:	2000      	movs	r0, #0
 80033be:	e012      	b.n	80033e6 <checkAddrExistInQueue+0x3e>
        int idx = (q->front + i) % MAX_SIZE;
 80033c0:	f8d1 3200 	ldr.w	r3, [r1, #512]	@ 0x200
 80033c4:	4413      	add	r3, r2
 80033c6:	425c      	negs	r4, r3
 80033c8:	f004 047f 	and.w	r4, r4, #127	@ 0x7f
 80033cc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80033d0:	bf58      	it	pl
 80033d2:	4263      	negpl	r3, r4
        if (q->data[idx] == addr) {
 80033d4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80033d8:	4283      	cmp	r3, r0
 80033da:	d105      	bne.n	80033e8 <checkAddrExistInQueue+0x40>
            Debug_printf("FOUND ADDRESS: %08lx\n", addr);
 80033dc:	4601      	mov	r1, r0
 80033de:	4804      	ldr	r0, [pc, #16]	@ (80033f0 <checkAddrExistInQueue+0x48>)
 80033e0:	f002 fa6e 	bl	80058c0 <Debug_printf>
            return 1;
 80033e4:	2001      	movs	r0, #1
}
 80033e6:	bd38      	pop	{r3, r4, r5, pc}
    for (int i = 0; i < q->size; i++) {
 80033e8:	3201      	adds	r2, #1
 80033ea:	e7e1      	b.n	80033b0 <checkAddrExistInQueue+0x8>
 80033ec:	08011e15 	.word	0x08011e15
 80033f0:	08011e19 	.word	0x08011e19

080033f4 <deleteMiddle_GSM>:

// Function to delete a parameter in the middle of the Queue_GSM
void deleteMiddle_GSM(Queue_GSM* q, int indexToDelete) {
 80033f4:	b4f0      	push	{r4, r5, r6, r7}
    return q->size == 0;
 80033f6:	f8d0 5208 	ldr.w	r5, [r0, #520]	@ 0x208
    if (isEmpty_GSM(q)) {
 80033fa:	b91d      	cbnz	r5, 8003404 <deleteMiddle_GSM+0x10>
        Debug_printf("Queue_GSM is empty. Nothing to delete.\n");
 80033fc:	481f      	ldr	r0, [pc, #124]	@ (800347c <deleteMiddle_GSM+0x88>)

    // Update rear and size
    q->rear = (q->rear - 1 + MAX_SIZE) % MAX_SIZE;
    q->size--;
    Debug_printf("Element at index %d deleted successfully.\n", indexToDelete);
}
 80033fe:	bcf0      	pop	{r4, r5, r6, r7}
        Debug_printf("Invalid index. Cannot delete.\n");
 8003400:	f002 ba5e 	b.w	80058c0 <Debug_printf>
    if (indexToDelete < 0 || indexToDelete >= q->size) {
 8003404:	2900      	cmp	r1, #0
 8003406:	db01      	blt.n	800340c <deleteMiddle_GSM+0x18>
 8003408:	428d      	cmp	r5, r1
 800340a:	dc01      	bgt.n	8003410 <deleteMiddle_GSM+0x1c>
        Debug_printf("Invalid index. Cannot delete.\n");
 800340c:	481c      	ldr	r0, [pc, #112]	@ (8003480 <deleteMiddle_GSM+0x8c>)
 800340e:	e7f6      	b.n	80033fe <deleteMiddle_GSM+0xa>
    int actualIndex = (q->front + indexToDelete) % MAX_SIZE;
 8003410:	f8d0 3200 	ldr.w	r3, [r0, #512]	@ 0x200
 8003414:	440b      	add	r3, r1
 8003416:	425a      	negs	r2, r3
 8003418:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800341c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
    for (int i = 0; i < q->size - 1; i++) {
 8003420:	f04f 0600 	mov.w	r6, #0
    int actualIndex = (q->front + indexToDelete) % MAX_SIZE;
 8003424:	bf58      	it	pl
 8003426:	4253      	negpl	r3, r2
    for (int i = 0; i < q->size - 1; i++) {
 8003428:	3d01      	subs	r5, #1
 800342a:	42b5      	cmp	r5, r6
 800342c:	dc0f      	bgt.n	800344e <deleteMiddle_GSM+0x5a>
    q->rear = (q->rear - 1 + MAX_SIZE) % MAX_SIZE;
 800342e:	f8d0 3204 	ldr.w	r3, [r0, #516]	@ 0x204
 8003432:	337f      	adds	r3, #127	@ 0x7f
 8003434:	425a      	negs	r2, r3
 8003436:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800343a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800343e:	bf58      	it	pl
 8003440:	4253      	negpl	r3, r2
    q->size--;
 8003442:	e9c0 3581 	strd	r3, r5, [r0, #516]	@ 0x204
}
 8003446:	bcf0      	pop	{r4, r5, r6, r7}
    Debug_printf("Element at index %d deleted successfully.\n", indexToDelete);
 8003448:	480e      	ldr	r0, [pc, #56]	@ (8003484 <deleteMiddle_GSM+0x90>)
 800344a:	f002 ba39 	b.w	80058c0 <Debug_printf>
        int currentIdx = (actualIndex + i) % MAX_SIZE;
 800344e:	199a      	adds	r2, r3, r6
 8003450:	4254      	negs	r4, r2
 8003452:	f004 047f 	and.w	r4, r4, #127	@ 0x7f
 8003456:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800345a:	bf58      	it	pl
 800345c:	4262      	negpl	r2, r4
        int nextIdx = (currentIdx + 1) % MAX_SIZE;
 800345e:	1c54      	adds	r4, r2, #1
 8003460:	4267      	negs	r7, r4
 8003462:	f007 077f 	and.w	r7, r7, #127	@ 0x7f
 8003466:	f004 047f 	and.w	r4, r4, #127	@ 0x7f
 800346a:	bf58      	it	pl
 800346c:	427c      	negpl	r4, r7
    for (int i = 0; i < q->size - 1; i++) {
 800346e:	3601      	adds	r6, #1
        q->data[currentIdx] = q->data[nextIdx];
 8003470:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
 8003474:	f840 4022 	str.w	r4, [r0, r2, lsl #2]
    for (int i = 0; i < q->size - 1; i++) {
 8003478:	e7d7      	b.n	800342a <deleteMiddle_GSM+0x36>
 800347a:	bf00      	nop
 800347c:	08011e2f 	.word	0x08011e2f
 8003480:	08011e57 	.word	0x08011e57
 8003484:	08011e76 	.word	0x08011e76

08003488 <reader_nss>:
  osDelay(8);
}

// For SPI SS pin
void reader_nss(uint8_t enable) {
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, enable ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8003488:	fab0 f280 	clz	r2, r0
 800348c:	0952      	lsrs	r2, r2, #5
 800348e:	4802      	ldr	r0, [pc, #8]	@ (8003498 <reader_nss+0x10>)
 8003490:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003494:	f003 ba58 	b.w	8006948 <HAL_GPIO_WritePin>
 8003498:	48000400 	.word	0x48000400

0800349c <reader_irq_pulse>:
void reader_irq_pulse() {
 800349c:	b510      	push	{r4, lr}
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 800349e:	4c0a      	ldr	r4, [pc, #40]	@ (80034c8 <reader_irq_pulse+0x2c>)
 80034a0:	2200      	movs	r2, #0
 80034a2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80034a6:	4620      	mov	r0, r4
 80034a8:	f003 fa4e 	bl	8006948 <HAL_GPIO_WritePin>
  osDelay(1);
 80034ac:	2001      	movs	r0, #1
 80034ae:	f005 fb9d 	bl	8008bec <osDelay>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 80034b2:	4620      	mov	r0, r4
 80034b4:	2201      	movs	r2, #1
 80034b6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80034ba:	f003 fa45 	bl	8006948 <HAL_GPIO_WritePin>
}
 80034be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  osDelay(8);
 80034c2:	2008      	movs	r0, #8
 80034c4:	f005 bb92 	b.w	8008bec <osDelay>
 80034c8:	48000800 	.word	0x48000800

080034cc <reader_tx>:
}

// SPI Tx function
void reader_tx(uint8_t *data, size_t len) {
  HAL_SPI_Transmit(&hspi2, data, len, HAL_MAX_DELAY);
 80034cc:	b28a      	uxth	r2, r1
 80034ce:	f04f 33ff 	mov.w	r3, #4294967295
 80034d2:	4601      	mov	r1, r0
 80034d4:	4801      	ldr	r0, [pc, #4]	@ (80034dc <reader_tx+0x10>)
 80034d6:	f004 b9ca 	b.w	800786e <HAL_SPI_Transmit>
 80034da:	bf00      	nop
 80034dc:	20007080 	.word	0x20007080

080034e0 <reader_rx>:
}

// SPI Rx function
void reader_rx(uint8_t *data, size_t len) {
  HAL_SPI_Receive(&hspi2, data, len, HAL_MAX_DELAY);
 80034e0:	b28a      	uxth	r2, r1
 80034e2:	f04f 33ff 	mov.w	r3, #4294967295
 80034e6:	4601      	mov	r1, r0
 80034e8:	4801      	ldr	r0, [pc, #4]	@ (80034f0 <reader_rx+0x10>)
 80034ea:	f004 bbba 	b.w	8007c62 <HAL_SPI_Receive>
 80034ee:	bf00      	nop
 80034f0:	20007080 	.word	0x20007080

080034f4 <st25_card_callback>:
}

// Define a callback function when tag detected
void st25_card_callback(uint8_t* uid) {
 80034f4:	4601      	mov	r1, r0
  uart_transmit_string(&huart1,uid);
 80034f6:	4801      	ldr	r0, [pc, #4]	@ (80034fc <st25_card_callback+0x8>)
 80034f8:	f002 b9be 	b.w	8005878 <uart_transmit_string>
 80034fc:	20006fac 	.word	0x20006fac

08003500 <st25r95_spi_tx>:
void st25r95_spi_tx(st25r95_handle *handler) {
 8003500:	b510      	push	{r4, lr}
  handler->tx(tx_buffer, tx_len);
 8003502:	4c04      	ldr	r4, [pc, #16]	@ (8003514 <st25r95_spi_tx+0x14>)
 8003504:	69c3      	ldr	r3, [r0, #28]
 8003506:	6821      	ldr	r1, [r4, #0]
 8003508:	4803      	ldr	r0, [pc, #12]	@ (8003518 <st25r95_spi_tx+0x18>)
 800350a:	4798      	blx	r3
  tx_len = 0;
 800350c:	2300      	movs	r3, #0
 800350e:	6023      	str	r3, [r4, #0]
}
 8003510:	bd10      	pop	{r4, pc}
 8003512:	bf00      	nop
 8003514:	20002120 	.word	0x20002120
 8003518:	20002124 	.word	0x20002124

0800351c <st25r95_spi_byte>:
  tx_len = 1;
 800351c:	4b03      	ldr	r3, [pc, #12]	@ (800352c <st25r95_spi_byte+0x10>)
 800351e:	2201      	movs	r2, #1
 8003520:	601a      	str	r2, [r3, #0]
  tx_buffer[0] = data;
 8003522:	4b03      	ldr	r3, [pc, #12]	@ (8003530 <st25r95_spi_byte+0x14>)
 8003524:	7019      	strb	r1, [r3, #0]
  st25r95_spi_tx(handler);
 8003526:	f7ff bfeb 	b.w	8003500 <st25r95_spi_tx>
 800352a:	bf00      	nop
 800352c:	20002120 	.word	0x20002120
 8003530:	20002124 	.word	0x20002124

08003534 <st25r95_response>:
uint8_t *st25r95_response(st25r95_handle *handler) {
 8003534:	b570      	push	{r4, r5, r6, lr}
 8003536:	4604      	mov	r4, r0
  while (handler->irq_flag == 0);
 8003538:	7c63      	ldrb	r3, [r4, #17]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d0fc      	beq.n	8003538 <st25r95_response+0x4>
  handler->irq_flag = 0;
 800353e:	2600      	movs	r6, #0
  handler->nss(1);
 8003540:	69a3      	ldr	r3, [r4, #24]
  handler->rx(rx_data, 1);
 8003542:	4d0e      	ldr	r5, [pc, #56]	@ (800357c <st25r95_response+0x48>)
  handler->irq_flag = 0;
 8003544:	7466      	strb	r6, [r4, #17]
  handler->nss(1);
 8003546:	2001      	movs	r0, #1
 8003548:	4798      	blx	r3
  st25r95_spi_byte(handler, ST25_READ);
 800354a:	2102      	movs	r1, #2
 800354c:	4620      	mov	r0, r4
 800354e:	f7ff ffe5 	bl	800351c <st25r95_spi_byte>
  handler->rx(rx_data, 1);
 8003552:	6a23      	ldr	r3, [r4, #32]
 8003554:	2101      	movs	r1, #1
 8003556:	4628      	mov	r0, r5
 8003558:	4798      	blx	r3
  if (rx_data[0] == ST25_ECHO) {
 800355a:	782b      	ldrb	r3, [r5, #0]
 800355c:	2b55      	cmp	r3, #85	@ 0x55
 800355e:	d104      	bne.n	800356a <st25r95_response+0x36>
  handler->nss(0);
 8003560:	4630      	mov	r0, r6
 8003562:	69a3      	ldr	r3, [r4, #24]
 8003564:	4798      	blx	r3
}
 8003566:	4805      	ldr	r0, [pc, #20]	@ (800357c <st25r95_response+0x48>)
 8003568:	bd70      	pop	{r4, r5, r6, pc}
  handler->rx(rx_data + 1, 1);
 800356a:	2101      	movs	r1, #1
 800356c:	1868      	adds	r0, r5, r1
 800356e:	6a23      	ldr	r3, [r4, #32]
 8003570:	4798      	blx	r3
  handler->rx(rx_data + 2, *(rx_data + 1));
 8003572:	6a23      	ldr	r3, [r4, #32]
 8003574:	7869      	ldrb	r1, [r5, #1]
 8003576:	1ca8      	adds	r0, r5, #2
 8003578:	4798      	blx	r3
 800357a:	e7f1      	b.n	8003560 <st25r95_response+0x2c>
 800357c:	20001ff8 	.word	0x20001ff8

08003580 <st25r95_reset>:
void st25r95_reset(st25r95_handle *handler) {
 8003580:	b510      	push	{r4, lr}
  handler->nss(1);
 8003582:	6983      	ldr	r3, [r0, #24]
void st25r95_reset(st25r95_handle *handler) {
 8003584:	4604      	mov	r4, r0
  handler->nss(1);
 8003586:	2001      	movs	r0, #1
 8003588:	4798      	blx	r3
  st25r95_spi_byte(handler, ST25_RESET);
 800358a:	4620      	mov	r0, r4
 800358c:	2101      	movs	r1, #1
 800358e:	f7ff ffc5 	bl	800351c <st25r95_spi_byte>
  handler->nss(0);
 8003592:	69a3      	ldr	r3, [r4, #24]
 8003594:	2000      	movs	r0, #0
}
 8003596:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  handler->nss(0);
 800359a:	4718      	bx	r3

0800359c <st25r95_off>:
st25r95_status_t st25r95_off(st25r95_handle *handler) {
 800359c:	b538      	push	{r3, r4, r5, lr}
  tx_buffer[0] = ST25_SEND;
 800359e:	4b0d      	ldr	r3, [pc, #52]	@ (80035d4 <st25r95_off+0x38>)
 80035a0:	2500      	movs	r5, #0
  tx_buffer[1] = ST25_PS;
 80035a2:	2202      	movs	r2, #2
  tx_buffer[0] = ST25_SEND;
 80035a4:	701d      	strb	r5, [r3, #0]
  tx_buffer[1] = ST25_PS;
 80035a6:	705a      	strb	r2, [r3, #1]
  tx_buffer[2] = 2;
 80035a8:	709a      	strb	r2, [r3, #2]
  tx_buffer[3] = ST25_PROTOCOL_OFF;
 80035aa:	70dd      	strb	r5, [r3, #3]
  tx_buffer[4] = 0;
 80035ac:	711d      	strb	r5, [r3, #4]
  tx_len = 5;
 80035ae:	4b0a      	ldr	r3, [pc, #40]	@ (80035d8 <st25r95_off+0x3c>)
 80035b0:	2205      	movs	r2, #5
 80035b2:	601a      	str	r2, [r3, #0]
st25r95_status_t st25r95_off(st25r95_handle *handler) {
 80035b4:	4604      	mov	r4, r0
  handler->nss(1);
 80035b6:	6983      	ldr	r3, [r0, #24]
 80035b8:	2001      	movs	r0, #1
 80035ba:	4798      	blx	r3
  st25r95_spi_tx(handler);
 80035bc:	4620      	mov	r0, r4
 80035be:	f7ff ff9f 	bl	8003500 <st25r95_spi_tx>
  handler->nss(0);
 80035c2:	69a3      	ldr	r3, [r4, #24]
 80035c4:	4628      	mov	r0, r5
 80035c6:	4798      	blx	r3
  uint8_t *res = st25r95_response(handler);
 80035c8:	4620      	mov	r0, r4
 80035ca:	f7ff ffb3 	bl	8003534 <st25r95_response>
}
 80035ce:	7800      	ldrb	r0, [r0, #0]
 80035d0:	bd38      	pop	{r3, r4, r5, pc}
 80035d2:	bf00      	nop
 80035d4:	20002124 	.word	0x20002124
 80035d8:	20002120 	.word	0x20002120

080035dc <st25r95_14443A>:
st25r95_status_t st25r95_14443A(st25r95_handle *handler) {
 80035dc:	b570      	push	{r4, r5, r6, lr}
  tx_buffer[0] = ST25_SEND;
 80035de:	4a10      	ldr	r2, [pc, #64]	@ (8003620 <st25r95_14443A+0x44>)
  tx_buffer[4] = handler->tx_speed << 6 | handler->rx_speed << 4;
 80035e0:	7903      	ldrb	r3, [r0, #4]
  tx_buffer[1] = ST25_PS;
 80035e2:	2502      	movs	r5, #2
  tx_buffer[0] = ST25_SEND;
 80035e4:	2600      	movs	r6, #0
 80035e6:	7016      	strb	r6, [r2, #0]
  tx_buffer[1] = ST25_PS;
 80035e8:	7055      	strb	r5, [r2, #1]
  tx_buffer[2] = 2;
 80035ea:	7095      	strb	r5, [r2, #2]
  tx_buffer[3] = ST25_PROTOCOL_14443A;
 80035ec:	70d5      	strb	r5, [r2, #3]
  tx_buffer[4] = handler->tx_speed << 6 | handler->rx_speed << 4;
 80035ee:	78c1      	ldrb	r1, [r0, #3]
 80035f0:	011b      	lsls	r3, r3, #4
 80035f2:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 80035f6:	b2db      	uxtb	r3, r3
 80035f8:	7113      	strb	r3, [r2, #4]
  tx_len = 5;
 80035fa:	4b0a      	ldr	r3, [pc, #40]	@ (8003624 <st25r95_14443A+0x48>)
 80035fc:	2205      	movs	r2, #5
st25r95_status_t st25r95_14443A(st25r95_handle *handler) {
 80035fe:	4604      	mov	r4, r0
  tx_len = 5;
 8003600:	601a      	str	r2, [r3, #0]
  handler->nss(1);
 8003602:	6983      	ldr	r3, [r0, #24]
 8003604:	2001      	movs	r0, #1
 8003606:	4798      	blx	r3
  st25r95_spi_tx(handler);
 8003608:	4620      	mov	r0, r4
 800360a:	f7ff ff79 	bl	8003500 <st25r95_spi_tx>
  handler->nss(0);
 800360e:	69a3      	ldr	r3, [r4, #24]
 8003610:	4630      	mov	r0, r6
 8003612:	4798      	blx	r3
  handler->protocol = ST25_PROTOCOL_14443A;
 8003614:	7065      	strb	r5, [r4, #1]
  uint8_t *res = st25r95_response(handler);
 8003616:	4620      	mov	r0, r4
 8003618:	f7ff ff8c 	bl	8003534 <st25r95_response>
}
 800361c:	7800      	ldrb	r0, [r0, #0]
 800361e:	bd70      	pop	{r4, r5, r6, pc}
 8003620:	20002124 	.word	0x20002124
 8003624:	20002120 	.word	0x20002120

08003628 <st25r95_write_timerw>:
st25r95_status_t st25r95_write_timerw(st25r95_handle *handler, uint8_t data) {
 8003628:	b538      	push	{r3, r4, r5, lr}
  tx_buffer[0] = ST25_SEND;
 800362a:	4b0f      	ldr	r3, [pc, #60]	@ (8003668 <st25r95_write_timerw+0x40>)
 800362c:	2500      	movs	r5, #0
  tx_buffer[1] = ST25_WR;
 800362e:	2209      	movs	r2, #9
  tx_buffer[0] = ST25_SEND;
 8003630:	701d      	strb	r5, [r3, #0]
st25r95_status_t st25r95_write_timerw(st25r95_handle *handler, uint8_t data) {
 8003632:	4604      	mov	r4, r0
  tx_buffer[1] = ST25_WR;
 8003634:	705a      	strb	r2, [r3, #1]
  tx_buffer[3] = 0x3A;
 8003636:	203a      	movs	r0, #58	@ 0x3a
  tx_buffer[2] = 0x4;
 8003638:	2204      	movs	r2, #4
 800363a:	709a      	strb	r2, [r3, #2]
  tx_buffer[3] = 0x3A;
 800363c:	70d8      	strb	r0, [r3, #3]
  tx_buffer[4] = 0x0;
 800363e:	711d      	strb	r5, [r3, #4]
  tx_buffer[5] = data;
 8003640:	7159      	strb	r1, [r3, #5]
  tx_buffer[6] = 0x4;
 8003642:	719a      	strb	r2, [r3, #6]
  tx_len = 7;
 8003644:	4b09      	ldr	r3, [pc, #36]	@ (800366c <st25r95_write_timerw+0x44>)
 8003646:	2207      	movs	r2, #7
 8003648:	601a      	str	r2, [r3, #0]
  handler->nss(1);
 800364a:	2001      	movs	r0, #1
 800364c:	69a3      	ldr	r3, [r4, #24]
 800364e:	4798      	blx	r3
  st25r95_spi_tx(handler);
 8003650:	4620      	mov	r0, r4
 8003652:	f7ff ff55 	bl	8003500 <st25r95_spi_tx>
  handler->nss(0);
 8003656:	69a3      	ldr	r3, [r4, #24]
 8003658:	4628      	mov	r0, r5
 800365a:	4798      	blx	r3
  uint8_t *res = st25r95_response(handler);
 800365c:	4620      	mov	r0, r4
 800365e:	f7ff ff69 	bl	8003534 <st25r95_response>
}
 8003662:	7800      	ldrb	r0, [r0, #0]
 8003664:	bd38      	pop	{r3, r4, r5, pc}
 8003666:	bf00      	nop
 8003668:	20002124 	.word	0x20002124
 800366c:	20002120 	.word	0x20002120

08003670 <st25r95_write_ARC>:
st25r95_status_t st25r95_write_ARC(st25r95_handle *handler, uint8_t index, uint8_t data) {
 8003670:	b538      	push	{r3, r4, r5, lr}
  tx_buffer[0] = ST25_SEND;
 8003672:	4b0f      	ldr	r3, [pc, #60]	@ (80036b0 <st25r95_write_ARC+0x40>)
st25r95_status_t st25r95_write_ARC(st25r95_handle *handler, uint8_t index, uint8_t data) {
 8003674:	4604      	mov	r4, r0
  tx_buffer[0] = ST25_SEND;
 8003676:	2500      	movs	r5, #0
  tx_buffer[1] = ST25_WR;
 8003678:	2009      	movs	r0, #9
  tx_buffer[0] = ST25_SEND;
 800367a:	701d      	strb	r5, [r3, #0]
  tx_buffer[1] = ST25_WR;
 800367c:	7058      	strb	r0, [r3, #1]
  tx_buffer[2] = 0x4;
 800367e:	2004      	movs	r0, #4
 8003680:	7098      	strb	r0, [r3, #2]
  tx_buffer[3] = 0x68;
 8003682:	2068      	movs	r0, #104	@ 0x68
 8003684:	70d8      	strb	r0, [r3, #3]
  tx_buffer[4] = 0x1;
 8003686:	2001      	movs	r0, #1
 8003688:	7118      	strb	r0, [r3, #4]
  tx_buffer[5] = index;
 800368a:	7159      	strb	r1, [r3, #5]
  tx_buffer[6] = data;
 800368c:	719a      	strb	r2, [r3, #6]
  tx_len = 7;
 800368e:	4b09      	ldr	r3, [pc, #36]	@ (80036b4 <st25r95_write_ARC+0x44>)
 8003690:	2207      	movs	r2, #7
 8003692:	601a      	str	r2, [r3, #0]
  handler->nss(1);
 8003694:	69a3      	ldr	r3, [r4, #24]
 8003696:	4798      	blx	r3
  st25r95_spi_tx(handler);
 8003698:	4620      	mov	r0, r4
 800369a:	f7ff ff31 	bl	8003500 <st25r95_spi_tx>
  handler->nss(0);
 800369e:	69a3      	ldr	r3, [r4, #24]
 80036a0:	4628      	mov	r0, r5
 80036a2:	4798      	blx	r3
  uint8_t *res = st25r95_response(handler);
 80036a4:	4620      	mov	r0, r4
 80036a6:	f7ff ff45 	bl	8003534 <st25r95_response>
}
 80036aa:	7800      	ldrb	r0, [r0, #0]
 80036ac:	bd38      	pop	{r3, r4, r5, pc}
 80036ae:	bf00      	nop
 80036b0:	20002124 	.word	0x20002124
 80036b4:	20002120 	.word	0x20002120

080036b8 <st25r95_init>:
void st25r95_init(st25r95_handle *handler) {
 80036b8:	b510      	push	{r4, lr}
 80036ba:	4604      	mov	r4, r0
  st25r95_reset(handler);
 80036bc:	f7ff ff60 	bl	8003580 <st25r95_reset>
  handler->irq_pulse();
 80036c0:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80036c2:	4798      	blx	r3
  handler->state = ST25_STATE_NORMAL;
 80036c4:	2300      	movs	r3, #0
 80036c6:	7023      	strb	r3, [r4, #0]
  switch (handler->protocol) {
 80036c8:	7863      	ldrb	r3, [r4, #1]
 80036ca:	2b02      	cmp	r3, #2
      st25r95_off(handler);
 80036cc:	4620      	mov	r0, r4
  switch (handler->protocol) {
 80036ce:	d10c      	bne.n	80036ea <st25r95_init+0x32>
      st25r95_14443A(handler);
 80036d0:	f7ff ff84 	bl	80035dc <st25r95_14443A>
      st25r95_write_timerw(handler, handler->timerw);
 80036d4:	7961      	ldrb	r1, [r4, #5]
 80036d6:	4620      	mov	r0, r4
 80036d8:	f7ff ffa6 	bl	8003628 <st25r95_write_timerw>
      st25r95_write_ARC(handler, 1, handler->ARC);
 80036dc:	79a2      	ldrb	r2, [r4, #6]
 80036de:	4620      	mov	r0, r4
 80036e0:	2101      	movs	r1, #1
}
 80036e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      st25r95_write_ARC(handler, 1, handler->ARC);
 80036e6:	f7ff bfc3 	b.w	8003670 <st25r95_write_ARC>
}
 80036ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      st25r95_off(handler);
 80036ee:	f7ff bf55 	b.w	800359c <st25r95_off>
	...

080036f4 <st25r95_14443A_REQA>:
  tx_buffer[0] = ST25_SEND;
 80036f4:	4b13      	ldr	r3, [pc, #76]	@ (8003744 <st25r95_14443A_REQA+0x50>)
void st25r95_14443A_REQA(st25r95_handle *handler, uint8_t *data) {
 80036f6:	b570      	push	{r4, r5, r6, lr}
  tx_buffer[1] = ST25_SR;
 80036f8:	2204      	movs	r2, #4
  tx_buffer[0] = ST25_SEND;
 80036fa:	2600      	movs	r6, #0
 80036fc:	701e      	strb	r6, [r3, #0]
  tx_buffer[1] = ST25_SR;
 80036fe:	705a      	strb	r2, [r3, #1]
  tx_buffer[2] = 0x2;
 8003700:	2202      	movs	r2, #2
 8003702:	709a      	strb	r2, [r3, #2]
  tx_buffer[3] = REQA;
 8003704:	2226      	movs	r2, #38	@ 0x26
 8003706:	70da      	strb	r2, [r3, #3]
  tx_buffer[4] = 7; // REQA is a 7bits command.
 8003708:	2207      	movs	r2, #7
 800370a:	711a      	strb	r2, [r3, #4]
  tx_len = 5;
 800370c:	4b0e      	ldr	r3, [pc, #56]	@ (8003748 <st25r95_14443A_REQA+0x54>)
 800370e:	2205      	movs	r2, #5
 8003710:	601a      	str	r2, [r3, #0]
void st25r95_14443A_REQA(st25r95_handle *handler, uint8_t *data) {
 8003712:	4604      	mov	r4, r0
  handler->nss(1);
 8003714:	6983      	ldr	r3, [r0, #24]
 8003716:	2001      	movs	r0, #1
void st25r95_14443A_REQA(st25r95_handle *handler, uint8_t *data) {
 8003718:	460d      	mov	r5, r1
  handler->nss(1);
 800371a:	4798      	blx	r3
  st25r95_spi_tx(handler);
 800371c:	4620      	mov	r0, r4
 800371e:	f7ff feef 	bl	8003500 <st25r95_spi_tx>
  handler->nss(0);
 8003722:	69a3      	ldr	r3, [r4, #24]
 8003724:	4630      	mov	r0, r6
 8003726:	4798      	blx	r3
  uint8_t *res = st25r95_response(handler);
 8003728:	4620      	mov	r0, r4
 800372a:	f7ff ff03 	bl	8003534 <st25r95_response>
  if (res[0] != ST25_EFrameRecvOK) return;
 800372e:	7803      	ldrb	r3, [r0, #0]
 8003730:	2b80      	cmp	r3, #128	@ 0x80
 8003732:	d106      	bne.n	8003742 <st25r95_14443A_REQA+0x4e>
  memcpy(data, res + 2, res[1]);
 8003734:	7842      	ldrb	r2, [r0, #1]
 8003736:	1c81      	adds	r1, r0, #2
 8003738:	4628      	mov	r0, r5
}
 800373a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  memcpy(data, res + 2, res[1]);
 800373e:	f009 bdf9 	b.w	800d334 <memcpy>
}
 8003742:	bd70      	pop	{r4, r5, r6, pc}
 8003744:	20002124 	.word	0x20002124
 8003748:	20002120 	.word	0x20002120

0800374c <st25r95_14443A_ANTICOLLISION>:
  tx_buffer[0] = ST25_SEND;
 800374c:	4b15      	ldr	r3, [pc, #84]	@ (80037a4 <st25r95_14443A_ANTICOLLISION+0x58>)
void st25r95_14443A_ANTICOLLISION(st25r95_handle *handler, uint8_t level, uint8_t *data) {
 800374e:	b570      	push	{r4, r5, r6, lr}
  tx_buffer[0] = ST25_SEND;
 8003750:	2600      	movs	r6, #0
void st25r95_14443A_ANTICOLLISION(st25r95_handle *handler, uint8_t level, uint8_t *data) {
 8003752:	4615      	mov	r5, r2
  tx_buffer[1] = ST25_SR;
 8003754:	2204      	movs	r2, #4
  tx_buffer[0] = ST25_SEND;
 8003756:	701e      	strb	r6, [r3, #0]
  tx_buffer[1] = ST25_SR;
 8003758:	705a      	strb	r2, [r3, #1]
  tx_buffer[2] = 0x03;
 800375a:	2203      	movs	r2, #3
 800375c:	709a      	strb	r2, [r3, #2]
  tx_buffer[3] = cascade_level[level];
 800375e:	4a12      	ldr	r2, [pc, #72]	@ (80037a8 <st25r95_14443A_ANTICOLLISION+0x5c>)
 8003760:	5c52      	ldrb	r2, [r2, r1]
 8003762:	70da      	strb	r2, [r3, #3]
  tx_buffer[4] = 0x20; // NVB
 8003764:	2220      	movs	r2, #32
 8003766:	711a      	strb	r2, [r3, #4]
  tx_buffer[5] = 0x08;
 8003768:	2208      	movs	r2, #8
 800376a:	715a      	strb	r2, [r3, #5]
  tx_len = 6;
 800376c:	4b0f      	ldr	r3, [pc, #60]	@ (80037ac <st25r95_14443A_ANTICOLLISION+0x60>)
 800376e:	2206      	movs	r2, #6
 8003770:	601a      	str	r2, [r3, #0]
void st25r95_14443A_ANTICOLLISION(st25r95_handle *handler, uint8_t level, uint8_t *data) {
 8003772:	4604      	mov	r4, r0
  handler->nss(1);
 8003774:	6983      	ldr	r3, [r0, #24]
 8003776:	2001      	movs	r0, #1
 8003778:	4798      	blx	r3
  st25r95_spi_tx(handler);
 800377a:	4620      	mov	r0, r4
 800377c:	f7ff fec0 	bl	8003500 <st25r95_spi_tx>
  handler->nss(0);
 8003780:	69a3      	ldr	r3, [r4, #24]
 8003782:	4630      	mov	r0, r6
 8003784:	4798      	blx	r3
  uint8_t *res = st25r95_response(handler);
 8003786:	4620      	mov	r0, r4
 8003788:	f7ff fed4 	bl	8003534 <st25r95_response>
  if (res[0] != ST25_EFrameRecvOK) return;
 800378c:	7803      	ldrb	r3, [r0, #0]
 800378e:	2b80      	cmp	r3, #128	@ 0x80
 8003790:	d106      	bne.n	80037a0 <st25r95_14443A_ANTICOLLISION+0x54>
  memcpy(data, res + 2, res[1]);
 8003792:	7842      	ldrb	r2, [r0, #1]
 8003794:	1c81      	adds	r1, r0, #2
 8003796:	4628      	mov	r0, r5
}
 8003798:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  memcpy(data, res + 2, res[1]);
 800379c:	f009 bdca 	b.w	800d334 <memcpy>
}
 80037a0:	bd70      	pop	{r4, r5, r6, pc}
 80037a2:	bf00      	nop
 80037a4:	20002124 	.word	0x20002124
 80037a8:	08011ea1 	.word	0x08011ea1
 80037ac:	20002120 	.word	0x20002120

080037b0 <st25r95_14443A_select>:
                      uint8_t uid3) {
 80037b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  tx_buffer[0] = ST25_SEND;
 80037b4:	4c20      	ldr	r4, [pc, #128]	@ (8003838 <st25r95_14443A_select+0x88>)
                      uint8_t uid3) {
 80037b6:	f89d 6018 	ldrb.w	r6, [sp, #24]
  tx_buffer[0] = ST25_SEND;
 80037ba:	f04f 0800 	mov.w	r8, #0
  tx_buffer[1] = ST25_SR;
 80037be:	f04f 0c04 	mov.w	ip, #4
  tx_buffer[0] = ST25_SEND;
 80037c2:	f884 8000 	strb.w	r8, [r4]
  tx_buffer[1] = ST25_SR;
 80037c6:	f884 c001 	strb.w	ip, [r4, #1]
  tx_buffer[2] = 0x08;
 80037ca:	f04f 0c08 	mov.w	ip, #8
 80037ce:	f884 c002 	strb.w	ip, [r4, #2]
  tx_buffer[3] = cascade_level[level];
 80037d2:	f8df c06c 	ldr.w	ip, [pc, #108]	@ 8003840 <st25r95_14443A_select+0x90>
                      uint8_t uid3) {
 80037d6:	4605      	mov	r5, r0
  tx_buffer[3] = cascade_level[level];
 80037d8:	f81c 1001 	ldrb.w	r1, [ip, r1]
                      uint8_t uid3) {
 80037dc:	f89d 0020 	ldrb.w	r0, [sp, #32]
  tx_buffer[3] = cascade_level[level];
 80037e0:	70e1      	strb	r1, [r4, #3]
                      uint8_t uid3) {
 80037e2:	4617      	mov	r7, r2
 80037e4:	f89d 201c 	ldrb.w	r2, [sp, #28]
  tx_buffer[4] = 0x70;
 80037e8:	2170      	movs	r1, #112	@ 0x70
 80037ea:	7121      	strb	r1, [r4, #4]
  tx_buffer[5] = uid0;
 80037ec:	7163      	strb	r3, [r4, #5]
  tx_buffer[6] = uid1;
 80037ee:	71a6      	strb	r6, [r4, #6]
  tx_buffer[7] = uid2;
 80037f0:	71e2      	strb	r2, [r4, #7]
  tx_buffer[9] = uid0 ^ uid1 ^ uid2 ^ uid3;
 80037f2:	4042      	eors	r2, r0
 80037f4:	4056      	eors	r6, r2
 80037f6:	4073      	eors	r3, r6
  tx_buffer[8] = uid3;
 80037f8:	7220      	strb	r0, [r4, #8]
  tx_buffer[9] = uid0 ^ uid1 ^ uid2 ^ uid3;
 80037fa:	7263      	strb	r3, [r4, #9]
  tx_buffer[10] = tx_flag_AppendCRC | 8;
 80037fc:	2328      	movs	r3, #40	@ 0x28
 80037fe:	72a3      	strb	r3, [r4, #10]
  tx_len = 11;
 8003800:	4b0e      	ldr	r3, [pc, #56]	@ (800383c <st25r95_14443A_select+0x8c>)
 8003802:	220b      	movs	r2, #11
 8003804:	601a      	str	r2, [r3, #0]
  handler->nss(1);
 8003806:	2001      	movs	r0, #1
 8003808:	69ab      	ldr	r3, [r5, #24]
 800380a:	4798      	blx	r3
  st25r95_spi_tx(handler);
 800380c:	4628      	mov	r0, r5
 800380e:	f7ff fe77 	bl	8003500 <st25r95_spi_tx>
  handler->nss(0);
 8003812:	69ab      	ldr	r3, [r5, #24]
 8003814:	4640      	mov	r0, r8
 8003816:	4798      	blx	r3
  uint8_t *res = st25r95_response(handler);
 8003818:	4628      	mov	r0, r5
 800381a:	f7ff fe8b 	bl	8003534 <st25r95_response>
  if (res[0] != ST25_EFrameRecvOK) return;
 800381e:	7803      	ldrb	r3, [r0, #0]
 8003820:	2b80      	cmp	r3, #128	@ 0x80
 8003822:	d106      	bne.n	8003832 <st25r95_14443A_select+0x82>
  memcpy(data, res + 2, res[1]);
 8003824:	7842      	ldrb	r2, [r0, #1]
 8003826:	1c81      	adds	r1, r0, #2
 8003828:	4638      	mov	r0, r7
}
 800382a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  memcpy(data, res + 2, res[1]);
 800382e:	f009 bd81 	b.w	800d334 <memcpy>
}
 8003832:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003836:	bf00      	nop
 8003838:	20002124 	.word	0x20002124
 800383c:	20002120 	.word	0x20002120
 8003840:	08011ea1 	.word	0x08011ea1

08003844 <st25r95_14443A_detect>:
uint8_t st25r95_14443A_detect(st25r95_handle *handler) {
 8003844:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003848:	b08a      	sub	sp, #40	@ 0x28
  uint8_t data[10] = {0xff};
 800384a:	2300      	movs	r3, #0
 800384c:	f04f 09ff 	mov.w	r9, #255	@ 0xff
  st25r95_14443A_REQA(handler, data);
 8003850:	a904      	add	r1, sp, #16
  uint8_t data[10] = {0xff};
 8003852:	e9cd 9304 	strd	r9, r3, [sp, #16]
uint8_t st25r95_14443A_detect(st25r95_handle *handler) {
 8003856:	4604      	mov	r4, r0
  uint8_t data[10] = {0xff};
 8003858:	f8ad 3018 	strh.w	r3, [sp, #24]
  st25r95_14443A_REQA(handler, data);
 800385c:	f7ff ff4a 	bl	80036f4 <st25r95_14443A_REQA>
  if (data[0] == 0xff) return 0;
 8003860:	f89d 7010 	ldrb.w	r7, [sp, #16]
 8003864:	454f      	cmp	r7, r9
 8003866:	d103      	bne.n	8003870 <st25r95_14443A_detect+0x2c>
 8003868:	2000      	movs	r0, #0
}
 800386a:	b00a      	add	sp, #40	@ 0x28
 800386c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (data[0] & 0b00100000) {
 8003870:	f017 0820 	ands.w	r8, r7, #32
 8003874:	d1f8      	bne.n	8003868 <st25r95_14443A_detect+0x24>
  uint8_t UID_size = data[0] >> 6;
 8003876:	ae07      	add	r6, sp, #28
 8003878:	09bf      	lsrs	r7, r7, #6
  for (uint8_t i = 0; i < UID_size + 1; i++) {
 800387a:	4635      	mov	r5, r6
 800387c:	fa5f fa88 	uxtb.w	sl, r8
    st25r95_14443A_ANTICOLLISION(handler, i, data);
 8003880:	aa04      	add	r2, sp, #16
 8003882:	4651      	mov	r1, sl
 8003884:	4620      	mov	r0, r4
    data[0] = 0xff;
 8003886:	f88d 9010 	strb.w	r9, [sp, #16]
    st25r95_14443A_ANTICOLLISION(handler, i, data);
 800388a:	f7ff ff5f 	bl	800374c <st25r95_14443A_ANTICOLLISION>
    if (data[0] == 0xff) return 0;
 800388e:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8003892:	2bff      	cmp	r3, #255	@ 0xff
 8003894:	d0e8      	beq.n	8003868 <st25r95_14443A_detect+0x24>
    if (data[0] ^ data[1] ^ data[2] ^ data[3] ^ data[4]) return 0;
 8003896:	f89d 1011 	ldrb.w	r1, [sp, #17]
 800389a:	f89d 0012 	ldrb.w	r0, [sp, #18]
 800389e:	f89d c013 	ldrb.w	ip, [sp, #19]
 80038a2:	f89d e014 	ldrb.w	lr, [sp, #20]
 80038a6:	ea83 0201 	eor.w	r2, r3, r1
 80038aa:	4042      	eors	r2, r0
 80038ac:	ea8c 0202 	eor.w	r2, ip, r2
 80038b0:	4596      	cmp	lr, r2
 80038b2:	d1d9      	bne.n	8003868 <st25r95_14443A_detect+0x24>
    UID[4 * i + 0] = data[0];
 80038b4:	7033      	strb	r3, [r6, #0]
    UID[4 * i + 1] = data[1];
 80038b6:	7071      	strb	r1, [r6, #1]
    UID[4 * i + 2] = data[2];
 80038b8:	70b0      	strb	r0, [r6, #2]
    UID[4 * i + 3] = data[3];
 80038ba:	f886 c003 	strb.w	ip, [r6, #3]
    st25r95_14443A_select(handler, i, data, data[0], data[1], data[2], data[3]);
 80038be:	aa04      	add	r2, sp, #16
 80038c0:	e9cd 0c01 	strd	r0, ip, [sp, #4]
 80038c4:	9100      	str	r1, [sp, #0]
 80038c6:	4620      	mov	r0, r4
 80038c8:	4651      	mov	r1, sl
 80038ca:	f7ff ff71 	bl	80037b0 <st25r95_14443A_select>
    if (data[0] & 0x4)
 80038ce:	f89d 3010 	ldrb.w	r3, [sp, #16]
 80038d2:	075b      	lsls	r3, r3, #29
 80038d4:	d507      	bpl.n	80038e6 <st25r95_14443A_detect+0xa2>
  for (uint8_t i = 0; i < UID_size + 1; i++) {
 80038d6:	f108 0801 	add.w	r8, r8, #1
 80038da:	fa5f f388 	uxtb.w	r3, r8
 80038de:	429f      	cmp	r7, r3
 80038e0:	f106 0604 	add.w	r6, r6, #4
 80038e4:	d2ca      	bcs.n	800387c <st25r95_14443A_detect+0x38>
  memcpy(handler->uid, UID, 10);
 80038e6:	462b      	mov	r3, r5
 80038e8:	cb03      	ldmia	r3!, {r0, r1}
 80038ea:	881b      	ldrh	r3, [r3, #0]
 80038ec:	f8c4 0007 	str.w	r0, [r4, #7]
 80038f0:	f8c4 100b 	str.w	r1, [r4, #11]
 80038f4:	f8a4 300f 	strh.w	r3, [r4, #15]
  return 1;
 80038f8:	2001      	movs	r0, #1
 80038fa:	e7b6      	b.n	800386a <st25r95_14443A_detect+0x26>

080038fc <st25r95_idle>:
  tx_buffer[0] = ST25_SEND;
 80038fc:	4b19      	ldr	r3, [pc, #100]	@ (8003964 <st25r95_idle+0x68>)
void st25r95_idle(st25r95_handle *handler) {
 80038fe:	b570      	push	{r4, r5, r6, lr}
  tx_buffer[1] = ST25_IDLE;
 8003900:	2207      	movs	r2, #7
  tx_buffer[0] = ST25_SEND;
 8003902:	2600      	movs	r6, #0
 8003904:	701e      	strb	r6, [r3, #0]
  tx_buffer[1] = ST25_IDLE;
 8003906:	705a      	strb	r2, [r3, #1]
  tx_buffer[2] = 0x0E;
 8003908:	220e      	movs	r2, #14
 800390a:	709a      	strb	r2, [r3, #2]
  tx_buffer[3] = ST25_WU_SRC_TagDetection;
 800390c:	2202      	movs	r2, #2
 800390e:	70da      	strb	r2, [r3, #3]
  tx_buffer[4] = ST25_EC_TagDetection >> 8;
 8003910:	2221      	movs	r2, #33	@ 0x21
 8003912:	711a      	strb	r2, [r3, #4]
  tx_buffer[6] = ST25_WU_CTRL_TagDetection >> 8;
 8003914:	2279      	movs	r2, #121	@ 0x79
  tx_buffer[5] = ST25_EC_TagDetection & 0xFF;
 8003916:	715e      	strb	r6, [r3, #5]
  tx_buffer[7] = ST25_WU_CTRL_TagDetection & 0xFF;
 8003918:	2501      	movs	r5, #1
  tx_buffer[6] = ST25_WU_CTRL_TagDetection >> 8;
 800391a:	719a      	strb	r2, [r3, #6]
  tx_buffer[8] = ST25_LEAVE_CTRL_TagDetection >> 8;
 800391c:	2218      	movs	r2, #24
  tx_buffer[7] = ST25_WU_CTRL_TagDetection & 0xFF;
 800391e:	71dd      	strb	r5, [r3, #7]
  tx_buffer[8] = ST25_LEAVE_CTRL_TagDetection >> 8;
 8003920:	721a      	strb	r2, [r3, #8]
  tx_buffer[10] = 0x20;
 8003922:	2220      	movs	r2, #32
  tx_buffer[9] = ST25_LEAVE_CTRL_TagDetection & 0xFF;
 8003924:	725e      	strb	r6, [r3, #9]
  tx_buffer[10] = 0x20;
 8003926:	729a      	strb	r2, [r3, #10]
  tx_buffer[11] = 0x60;
 8003928:	2260      	movs	r2, #96	@ 0x60
 800392a:	72da      	strb	r2, [r3, #11]
  tx_buffer[12] = 0x60;
 800392c:	731a      	strb	r2, [r3, #12]
  tx_buffer[13] = handler->DACRef - 8;
 800392e:	7882      	ldrb	r2, [r0, #2]
 8003930:	3a08      	subs	r2, #8
 8003932:	b2d2      	uxtb	r2, r2
 8003934:	735a      	strb	r2, [r3, #13]
  tx_buffer[14] = handler->DACRef + 8;
 8003936:	7882      	ldrb	r2, [r0, #2]
 8003938:	3208      	adds	r2, #8
 800393a:	b2d2      	uxtb	r2, r2
 800393c:	739a      	strb	r2, [r3, #14]
  tx_buffer[15] = 0x3F;
 800393e:	223f      	movs	r2, #63	@ 0x3f
 8003940:	73da      	strb	r2, [r3, #15]
  tx_buffer[16] = 0x01;
 8003942:	741d      	strb	r5, [r3, #16]
  tx_len = 17;
 8003944:	4b08      	ldr	r3, [pc, #32]	@ (8003968 <st25r95_idle+0x6c>)
 8003946:	2211      	movs	r2, #17
void st25r95_idle(st25r95_handle *handler) {
 8003948:	4604      	mov	r4, r0
  tx_len = 17;
 800394a:	601a      	str	r2, [r3, #0]
  handler->nss(1);
 800394c:	6983      	ldr	r3, [r0, #24]
 800394e:	4628      	mov	r0, r5
 8003950:	4798      	blx	r3
  st25r95_spi_tx(handler);
 8003952:	4620      	mov	r0, r4
 8003954:	f7ff fdd4 	bl	8003500 <st25r95_spi_tx>
  handler->nss(0);
 8003958:	69a3      	ldr	r3, [r4, #24]
 800395a:	4630      	mov	r0, r6
 800395c:	4798      	blx	r3
  handler->state = ST25_STATE_IDLE;
 800395e:	7025      	strb	r5, [r4, #0]
}
 8003960:	bd70      	pop	{r4, r5, r6, pc}
 8003962:	bf00      	nop
 8003964:	20002124 	.word	0x20002124
 8003968:	20002120 	.word	0x20002120

0800396c <st25r95_service>:
void st25r95_service(st25r95_handle *handler) {
 800396c:	b510      	push	{r4, lr}
  if (handler->irq_flag == 1) {
 800396e:	7c43      	ldrb	r3, [r0, #17]
 8003970:	2b01      	cmp	r3, #1
void st25r95_service(st25r95_handle *handler) {
 8003972:	4604      	mov	r4, r0
  if (handler->irq_flag == 1) {
 8003974:	d112      	bne.n	800399c <st25r95_service+0x30>
    handler->irq_flag = 0;
 8003976:	2300      	movs	r3, #0
 8003978:	7443      	strb	r3, [r0, #17]
    if (handler->state == ST25_STATE_IDLE) {
 800397a:	7803      	ldrb	r3, [r0, #0]
 800397c:	2b01      	cmp	r3, #1
 800397e:	d10d      	bne.n	800399c <st25r95_service+0x30>
      st25r95_init(handler);
 8003980:	f7ff fe9a 	bl	80036b8 <st25r95_init>
      if (st25r95_14443A_detect(handler)) {
 8003984:	4620      	mov	r0, r4
 8003986:	f7ff ff5d 	bl	8003844 <st25r95_14443A_detect>
 800398a:	b110      	cbz	r0, 8003992 <st25r95_service+0x26>
        handler->callback(handler->uid);
 800398c:	6963      	ldr	r3, [r4, #20]
 800398e:	1de0      	adds	r0, r4, #7
 8003990:	4798      	blx	r3
      st25r95_idle(handler);
 8003992:	4620      	mov	r0, r4
}
 8003994:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      st25r95_idle(handler);
 8003998:	f7ff bfb0 	b.w	80038fc <st25r95_idle>
}
 800399c:	bd10      	pop	{r4, pc}
	...

080039a0 <st25r95_calibrate>:
void st25r95_calibrate(st25r95_handle *handler) {
 80039a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    tx_len = 17;
 80039a4:	4f3d      	ldr	r7, [pc, #244]	@ (8003a9c <st25r95_calibrate+0xfc>)
void st25r95_calibrate(st25r95_handle *handler) {
 80039a6:	4606      	mov	r6, r0
 80039a8:	f04f 35ff 	mov.w	r5, #4294967295
    tx_len = 17;
 80039ac:	f04f 0811 	mov.w	r8, #17
    memcpy(tx_buffer, calibrate_data, sizeof(calibrate_data));
 80039b0:	4b3b      	ldr	r3, [pc, #236]	@ (8003aa0 <st25r95_calibrate+0x100>)
 80039b2:	4a3c      	ldr	r2, [pc, #240]	@ (8003aa4 <st25r95_calibrate+0x104>)
    tx_len = 17;
 80039b4:	f8c7 8000 	str.w	r8, [r7]
    memcpy(tx_buffer, calibrate_data, sizeof(calibrate_data));
 80039b8:	f103 0110 	add.w	r1, r3, #16
 80039bc:	461c      	mov	r4, r3
 80039be:	f853 0b04 	ldr.w	r0, [r3], #4
 80039c2:	f842 0b04 	str.w	r0, [r2], #4
 80039c6:	428b      	cmp	r3, r1
 80039c8:	d1f9      	bne.n	80039be <st25r95_calibrate+0x1e>
 80039ca:	781b      	ldrb	r3, [r3, #0]
 80039cc:	7013      	strb	r3, [r2, #0]
    handler->nss(1);
 80039ce:	69b3      	ldr	r3, [r6, #24]
 80039d0:	2001      	movs	r0, #1
 80039d2:	4798      	blx	r3
    st25r95_spi_tx(handler);
 80039d4:	4630      	mov	r0, r6
 80039d6:	f7ff fd93 	bl	8003500 <st25r95_spi_tx>
    handler->nss(0);
 80039da:	69b3      	ldr	r3, [r6, #24]
 80039dc:	2000      	movs	r0, #0
 80039de:	4798      	blx	r3
    res = st25r95_response(handler);
 80039e0:	4630      	mov	r0, r6
 80039e2:	f7ff fda7 	bl	8003534 <st25r95_response>
    if (res[0] == 0x00 && res[1] == 0x01) {
 80039e6:	7803      	ldrb	r3, [r0, #0]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d14f      	bne.n	8003a8c <st25r95_calibrate+0xec>
 80039ec:	7843      	ldrb	r3, [r0, #1]
 80039ee:	2b01      	cmp	r3, #1
 80039f0:	d14c      	bne.n	8003a8c <st25r95_calibrate+0xec>
      if (res[2] == 0x02) {
 80039f2:	7883      	ldrb	r3, [r0, #2]
 80039f4:	2b02      	cmp	r3, #2
 80039f6:	d128      	bne.n	8003a4a <st25r95_calibrate+0xaa>
        switch (i - 1) {
 80039f8:	2d06      	cmp	r5, #6
 80039fa:	d847      	bhi.n	8003a8c <st25r95_calibrate+0xec>
 80039fc:	e8df f005 	tbb	[pc, r5]
 8003a00:	0e084604 	.word	0x0e084604
 8003a04:	1a14      	.short	0x1a14
 8003a06:	20          	.byte	0x20
 8003a07:	00          	.byte	0x00
            calibrate_data[14] = 0xFC;
 8003a08:	23fc      	movs	r3, #252	@ 0xfc
 8003a0a:	73a3      	strb	r3, [r4, #14]
  for (uint8_t i = 0; i < 9; i++) {
 8003a0c:	2501      	movs	r5, #1
 8003a0e:	e7cf      	b.n	80039b0 <st25r95_calibrate+0x10>
            calibrate_data[14] += 0x40;
 8003a10:	7ba3      	ldrb	r3, [r4, #14]
 8003a12:	3340      	adds	r3, #64	@ 0x40
            calibrate_data[14] -= 0x40;
 8003a14:	b2db      	uxtb	r3, r3
 8003a16:	73a3      	strb	r3, [r4, #14]
  for (uint8_t i = 0; i < 9; i++) {
 8003a18:	2503      	movs	r5, #3
 8003a1a:	e7c9      	b.n	80039b0 <st25r95_calibrate+0x10>
            calibrate_data[14] += 0x20;
 8003a1c:	7ba3      	ldrb	r3, [r4, #14]
 8003a1e:	3320      	adds	r3, #32
 8003a20:	b2db      	uxtb	r3, r3
 8003a22:	73a3      	strb	r3, [r4, #14]
  for (uint8_t i = 0; i < 9; i++) {
 8003a24:	2504      	movs	r5, #4
 8003a26:	e7c3      	b.n	80039b0 <st25r95_calibrate+0x10>
            calibrate_data[14] += 0x10;
 8003a28:	7ba3      	ldrb	r3, [r4, #14]
 8003a2a:	3310      	adds	r3, #16
 8003a2c:	b2db      	uxtb	r3, r3
 8003a2e:	73a3      	strb	r3, [r4, #14]
  for (uint8_t i = 0; i < 9; i++) {
 8003a30:	2505      	movs	r5, #5
 8003a32:	e7bd      	b.n	80039b0 <st25r95_calibrate+0x10>
            calibrate_data[14] += 0x08;
 8003a34:	7ba3      	ldrb	r3, [r4, #14]
 8003a36:	3308      	adds	r3, #8
            calibrate_data[14] -= 0x08;
 8003a38:	b2db      	uxtb	r3, r3
 8003a3a:	73a3      	strb	r3, [r4, #14]
  for (uint8_t i = 0; i < 9; i++) {
 8003a3c:	2506      	movs	r5, #6
 8003a3e:	e7b7      	b.n	80039b0 <st25r95_calibrate+0x10>
            calibrate_data[14] += 0x04;
 8003a40:	7ba3      	ldrb	r3, [r4, #14]
 8003a42:	3304      	adds	r3, #4
 8003a44:	73a3      	strb	r3, [r4, #14]
  for (uint8_t i = 0; i < 9; i++) {
 8003a46:	2507      	movs	r5, #7
 8003a48:	e7b2      	b.n	80039b0 <st25r95_calibrate+0x10>
      } else if (res[2] == 0x01) {
 8003a4a:	2b01      	cmp	r3, #1
 8003a4c:	d11e      	bne.n	8003a8c <st25r95_calibrate+0xec>
        switch (i - 1) {
 8003a4e:	1e6b      	subs	r3, r5, #1
 8003a50:	2b06      	cmp	r3, #6
 8003a52:	d805      	bhi.n	8003a60 <st25r95_calibrate+0xc0>
 8003a54:	e8df f003 	tbb	[pc, r3]
 8003a58:	110e0b06 	.word	0x110e0b06
 8003a5c:	1714      	.short	0x1714
 8003a5e:	17          	.byte	0x17
 8003a5f:	00          	.byte	0x00
  for (uint8_t i = 0; i < 9; i++) {
 8003a60:	3501      	adds	r5, #1
 8003a62:	e7a5      	b.n	80039b0 <st25r95_calibrate+0x10>
            calibrate_data[14] -= 0x80;
 8003a64:	7ba3      	ldrb	r3, [r4, #14]
 8003a66:	3b80      	subs	r3, #128	@ 0x80
 8003a68:	73a3      	strb	r3, [r4, #14]
  for (uint8_t i = 0; i < 9; i++) {
 8003a6a:	2502      	movs	r5, #2
 8003a6c:	e7a0      	b.n	80039b0 <st25r95_calibrate+0x10>
            calibrate_data[14] -= 0x40;
 8003a6e:	7ba3      	ldrb	r3, [r4, #14]
 8003a70:	3b40      	subs	r3, #64	@ 0x40
 8003a72:	e7cf      	b.n	8003a14 <st25r95_calibrate+0x74>
            calibrate_data[14] -= 0x20;
 8003a74:	7ba3      	ldrb	r3, [r4, #14]
 8003a76:	3b20      	subs	r3, #32
 8003a78:	e7d2      	b.n	8003a20 <st25r95_calibrate+0x80>
            calibrate_data[14] -= 0x10;
 8003a7a:	7ba3      	ldrb	r3, [r4, #14]
 8003a7c:	3b10      	subs	r3, #16
 8003a7e:	e7d5      	b.n	8003a2c <st25r95_calibrate+0x8c>
            calibrate_data[14] -= 0x08;
 8003a80:	7ba3      	ldrb	r3, [r4, #14]
 8003a82:	3b08      	subs	r3, #8
 8003a84:	e7d8      	b.n	8003a38 <st25r95_calibrate+0x98>
            calibrate_data[14] -= 0x04;
 8003a86:	7ba3      	ldrb	r3, [r4, #14]
 8003a88:	3b04      	subs	r3, #4
 8003a8a:	73a3      	strb	r3, [r4, #14]
  for (uint8_t i = 0; i < 9; i++) {
 8003a8c:	3501      	adds	r5, #1
 8003a8e:	2d08      	cmp	r5, #8
 8003a90:	d18e      	bne.n	80039b0 <st25r95_calibrate+0x10>
  handler->DACRef = calibrate_data[14];
 8003a92:	7ba3      	ldrb	r3, [r4, #14]
 8003a94:	70b3      	strb	r3, [r6, #2]
}
 8003a96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003a9a:	bf00      	nop
 8003a9c:	20002120 	.word	0x20002120
 8003aa0:	20000004 	.word	0x20000004
 8003aa4:	20002124 	.word	0x20002124

08003aa8 <reader_enable>:
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_SET);
 8003aa8:	4802      	ldr	r0, [pc, #8]	@ (8003ab4 <reader_enable+0xc>)
 8003aaa:	2201      	movs	r2, #1
 8003aac:	2104      	movs	r1, #4
 8003aae:	f002 bf4b 	b.w	8006948 <HAL_GPIO_WritePin>
 8003ab2:	bf00      	nop
 8003ab4:	48000400 	.word	0x48000400

08003ab8 <StartRFID>:
}

void StartRFID(void const * argument){
	reader_enable();
	reader_handler.protocol = ST25_PROTOCOL_14443A;
 8003ab8:	4c12      	ldr	r4, [pc, #72]	@ (8003b04 <StartRFID+0x4c>)
void StartRFID(void const * argument){
 8003aba:	b508      	push	{r3, lr}
	reader_enable();
 8003abc:	f7ff fff4 	bl	8003aa8 <reader_enable>
	reader_handler.protocol = ST25_PROTOCOL_14443A;
 8003ac0:	2302      	movs	r3, #2
 8003ac2:	7063      	strb	r3, [r4, #1]
	reader_handler.tx_speed = ST25_26K_106K;
	reader_handler.rx_speed = ST25_26K_106K;
	reader_handler.timerw = 0x58;
 8003ac4:	2258      	movs	r2, #88	@ 0x58
	reader_handler.tx_speed = ST25_26K_106K;
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	70e3      	strb	r3, [r4, #3]
	reader_handler.rx_speed = ST25_26K_106K;
 8003aca:	7123      	strb	r3, [r4, #4]
	reader_handler.timerw = 0x58;
 8003acc:	7162      	strb	r2, [r4, #5]
	reader_handler.ARC = 0xD1;
 8003ace:	22d1      	movs	r2, #209	@ 0xd1
 8003ad0:	71a2      	strb	r2, [r4, #6]
	reader_handler.irq_flag = 0;
 8003ad2:	7463      	strb	r3, [r4, #17]

	/* Bind BSP Functions */
	reader_handler.nss = reader_nss;
 8003ad4:	4b0c      	ldr	r3, [pc, #48]	@ (8003b08 <StartRFID+0x50>)
 8003ad6:	61a3      	str	r3, [r4, #24]
	reader_handler.tx = reader_tx;
 8003ad8:	4b0c      	ldr	r3, [pc, #48]	@ (8003b0c <StartRFID+0x54>)
 8003ada:	61e3      	str	r3, [r4, #28]
	reader_handler.rx = reader_rx;
 8003adc:	4b0c      	ldr	r3, [pc, #48]	@ (8003b10 <StartRFID+0x58>)
 8003ade:	6223      	str	r3, [r4, #32]
	reader_handler.irq_pulse = reader_irq_pulse;
 8003ae0:	4b0c      	ldr	r3, [pc, #48]	@ (8003b14 <StartRFID+0x5c>)
 8003ae2:	6263      	str	r3, [r4, #36]	@ 0x24

	/* Bind the callback function when tag detected */
	reader_handler.callback = st25_card_callback;

	/* Init the board */
	st25r95_init(&reader_handler);
 8003ae4:	4620      	mov	r0, r4
	reader_handler.callback = st25_card_callback;
 8003ae6:	4b0c      	ldr	r3, [pc, #48]	@ (8003b18 <StartRFID+0x60>)
 8003ae8:	6163      	str	r3, [r4, #20]
	st25r95_init(&reader_handler);
 8003aea:	f7ff fde5 	bl	80036b8 <st25r95_init>

	/* Calibration */
	st25r95_calibrate(&reader_handler);
 8003aee:	4620      	mov	r0, r4
 8003af0:	f7ff ff56 	bl	80039a0 <st25r95_calibrate>

	/* Switches the board into low consumption mode */
	st25r95_idle(&reader_handler);
 8003af4:	4620      	mov	r0, r4
 8003af6:	f7ff ff01 	bl	80038fc <st25r95_idle>
	while(1) {
		st25r95_service(&reader_handler);
 8003afa:	4620      	mov	r0, r4
 8003afc:	f7ff ff36 	bl	800396c <st25r95_service>
	while(1) {
 8003b00:	e7fb      	b.n	8003afa <StartRFID+0x42>
 8003b02:	bf00      	nop
 8003b04:	200020f8 	.word	0x200020f8
 8003b08:	08003489 	.word	0x08003489
 8003b0c:	080034cd 	.word	0x080034cd
 8003b10:	080034e1 	.word	0x080034e1
 8003b14:	0800349d 	.word	0x0800349d
 8003b18:	080034f5 	.word	0x080034f5

08003b1c <RingBufferDmaU8_initUSARTRx>:
// int daychange = 0;

uint8_t message1[] = "Hello from DSS\n";

void RingBufferDmaU8_initUSARTRx(RingBufferDmaU8_TypeDef* ring, UART_HandleTypeDef* husart, uint8_t* buffer, uint16_t size) // cai dat dma
{
 8003b1c:	b410      	push	{r4}
 8003b1e:	4604      	mov	r4, r0
 8003b20:	4608      	mov	r0, r1
  ring->buffer = buffer;
  ring->size = size;
 8003b22:	80a3      	strh	r3, [r4, #4]
{
 8003b24:	4611      	mov	r1, r2
 8003b26:	461a      	mov	r2, r3
  ring->tailPtr = buffer;
  ring->dmaHandle = husart->hdmarx;
 8003b28:	6f43      	ldr	r3, [r0, #116]	@ 0x74
  ring->buffer = buffer;
 8003b2a:	6021      	str	r1, [r4, #0]
  ring->tailPtr = buffer;
 8003b2c:	60a1      	str	r1, [r4, #8]
  ring->dmaHandle = husart->hdmarx;
 8003b2e:	60e3      	str	r3, [r4, #12]
  HAL_UART_Receive_DMA(husart, buffer, size);
}
 8003b30:	f85d 4b04 	ldr.w	r4, [sp], #4
  HAL_UART_Receive_DMA(husart, buffer, size);
 8003b34:	f004 bf90 	b.w	8008a58 <HAL_UART_Receive_DMA>

08003b38 <set_time>:
#include "RTC.h"
#include "system_management.h"
#include "spi_flash.h"

void set_time (uint8_t hr, uint8_t min, uint8_t sec)
{
 8003b38:	b570      	push	{r4, r5, r6, lr}
 8003b3a:	b086      	sub	sp, #24
 8003b3c:	4606      	mov	r6, r0
 8003b3e:	460d      	mov	r5, r1
 8003b40:	4614      	mov	r4, r2
	RTC_TimeTypeDef sTime = {0};
 8003b42:	2100      	movs	r1, #0
 8003b44:	2211      	movs	r2, #17
 8003b46:	f10d 0007 	add.w	r0, sp, #7
 8003b4a:	f008 fd9f 	bl	800c68c <memset>
	sTime.Hours = hr;
	sTime.Minutes = min;
	sTime.Seconds = sec;
	sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
	sTime.StoreOperation = RTC_STOREOPERATION_RESET;
	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8003b4e:	4808      	ldr	r0, [pc, #32]	@ (8003b70 <set_time+0x38>)
	sTime.Hours = hr;
 8003b50:	f88d 6004 	strb.w	r6, [sp, #4]
	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8003b54:	2200      	movs	r2, #0
 8003b56:	a901      	add	r1, sp, #4
	sTime.Minutes = min;
 8003b58:	f88d 5005 	strb.w	r5, [sp, #5]
	sTime.Seconds = sec;
 8003b5c:	f88d 4006 	strb.w	r4, [sp, #6]
	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8003b60:	f003 fc14 	bl	800738c <HAL_RTC_SetTime>
 8003b64:	b108      	cbz	r0, 8003b6a <set_time+0x32>
	{
		Error_Handler();
 8003b66:	f000 fb94 	bl	8004292 <Error_Handler>
	}
}
 8003b6a:	b006      	add	sp, #24
 8003b6c:	bd70      	pop	{r4, r5, r6, pc}
 8003b6e:	bf00      	nop
 8003b70:	20007148 	.word	0x20007148

08003b74 <set_date>:

void set_date (uint8_t year, uint8_t month, uint8_t date)  // monday = 1
{
 8003b74:	b507      	push	{r0, r1, r2, lr}
	RTC_DateTypeDef sDate = {0};
 8003b76:	2300      	movs	r3, #0
	sDate.Month = month;
 8003b78:	f88d 1005 	strb.w	r1, [sp, #5]
	sDate.Date = date;
 8003b7c:	f88d 2006 	strb.w	r2, [sp, #6]
	sDate.Year = year;
 8003b80:	f88d 0007 	strb.w	r0, [sp, #7]
	if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8003b84:	461a      	mov	r2, r3
 8003b86:	4806      	ldr	r0, [pc, #24]	@ (8003ba0 <set_date+0x2c>)
	RTC_DateTypeDef sDate = {0};
 8003b88:	f88d 3004 	strb.w	r3, [sp, #4]
	if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8003b8c:	a901      	add	r1, sp, #4
 8003b8e:	f003 fc57 	bl	8007440 <HAL_RTC_SetDate>
 8003b92:	b108      	cbz	r0, 8003b98 <set_date+0x24>
	{
		Error_Handler();
 8003b94:	f000 fb7d 	bl	8004292 <Error_Handler>
	}
}
 8003b98:	b003      	add	sp, #12
 8003b9a:	f85d fb04 	ldr.w	pc, [sp], #4
 8003b9e:	bf00      	nop
 8003ba0:	20007148 	.word	0x20007148

08003ba4 <get_RTC_time_date>:

void get_RTC_time_date(RMCSTRUCT *rmc)
{
 8003ba4:	b5f0      	push	{r4, r5, r6, r7, lr}
	char date[12]; // "YYYY-MM-DD" format, 10 characters + null terminator
	RTC_DateTypeDef gDate;
	RTC_TimeTypeDef gTime;

	  /* Get the RTC current Time */
	HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BIN);
 8003ba6:	4d29      	ldr	r5, [pc, #164]	@ (8003c4c <get_RTC_time_date+0xa8>)
{
 8003ba8:	b0b3      	sub	sp, #204	@ 0xcc
 8003baa:	4604      	mov	r4, r0
	HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BIN);
 8003bac:	a90d      	add	r1, sp, #52	@ 0x34
 8003bae:	2200      	movs	r2, #0
 8003bb0:	4628      	mov	r0, r5
 8003bb2:	f003 fc95 	bl	80074e0 <HAL_RTC_GetTime>
	/* Get the RTC current Date */
	HAL_RTC_GetDate(&hrtc, &gDate, RTC_FORMAT_BIN);
 8003bb6:	a906      	add	r1, sp, #24
 8003bb8:	2200      	movs	r2, #0
 8003bba:	4628      	mov	r0, r5
 8003bbc:	f003 fcb3 	bl	8007526 <HAL_RTC_GetDate>

  /* Display time Format: hh:mm:ss */
  /* Format time as "HH:MM:SS" */
	snprintf(time, sizeof(time), "%02d:%02d:%02d\n", gTime.Hours, gTime.Minutes, gTime.Seconds);
 8003bc0:	f89d 3036 	ldrb.w	r3, [sp, #54]	@ 0x36
	uart_transmit_string(&huart1,(uint8_t*) time);
 8003bc4:	4d22      	ldr	r5, [pc, #136]	@ (8003c50 <get_RTC_time_date+0xac>)
	snprintf(time, sizeof(time), "%02d:%02d:%02d\n", gTime.Hours, gTime.Minutes, gTime.Seconds);
 8003bc6:	9301      	str	r3, [sp, #4]
 8003bc8:	f89d 3035 	ldrb.w	r3, [sp, #53]	@ 0x35
 8003bcc:	4a21      	ldr	r2, [pc, #132]	@ (8003c54 <get_RTC_time_date+0xb0>)
 8003bce:	9300      	str	r3, [sp, #0]
 8003bd0:	210a      	movs	r1, #10
 8003bd2:	f89d 3034 	ldrb.w	r3, [sp, #52]	@ 0x34
 8003bd6:	a807      	add	r0, sp, #28
 8003bd8:	f008 fc5c 	bl	800c494 <sniprintf>
	uart_transmit_string(&huart1,(uint8_t*) time);
 8003bdc:	a907      	add	r1, sp, #28
 8003bde:	4628      	mov	r0, r5
 8003be0:	f001 fe4a 	bl	8005878 <uart_transmit_string>

	/* Format date as "YYYY-MM-DD" */
	snprintf(date, sizeof(date), "20%02d-%02d-%02d\n", gDate.Year, gDate.Month, gDate.Date);
 8003be4:	f89d 301a 	ldrb.w	r3, [sp, #26]
 8003be8:	9301      	str	r3, [sp, #4]
 8003bea:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8003bee:	4a1a      	ldr	r2, [pc, #104]	@ (8003c58 <get_RTC_time_date+0xb4>)
 8003bf0:	9300      	str	r3, [sp, #0]
 8003bf2:	210c      	movs	r1, #12
 8003bf4:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8003bf8:	a80a      	add	r0, sp, #40	@ 0x28
 8003bfa:	f008 fc4b 	bl	800c494 <sniprintf>
	uart_transmit_string(&huart1,(uint8_t*) date);
 8003bfe:	a90a      	add	r1, sp, #40	@ 0x28
 8003c00:	4628      	mov	r0, r5
 8003c02:	f001 fe39 	bl	8005878 <uart_transmit_string>

	rmc->date.Yr = gDate.Year;
	rmc->date.Mon = gDate.Month;
	rmc->date.Day = gDate.Date;
 8003c06:	f89d 101a 	ldrb.w	r1, [sp, #26]
	rmc->tim.hour = gTime.Hours;
 8003c0a:	f89d 0034 	ldrb.w	r0, [sp, #52]	@ 0x34
	rmc->tim.min = gTime.Minutes;
 8003c0e:	f89d 6035 	ldrb.w	r6, [sp, #53]	@ 0x35
	rmc->tim.sec = gTime.Seconds;
 8003c12:	f89d 7036 	ldrb.w	r7, [sp, #54]	@ 0x36
	rmc->date.Mon = gDate.Month;
 8003c16:	f89d 2019 	ldrb.w	r2, [sp, #25]
	rmc->date.Yr = gDate.Year;
 8003c1a:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8003c1e:	61a3      	str	r3, [r4, #24]
	rmc->date.Mon = gDate.Month;
 8003c20:	6162      	str	r2, [r4, #20]
	rmc->date.Day = gDate.Date;
 8003c22:	6121      	str	r1, [r4, #16]
	rmc->tim.hour = gTime.Hours;
 8003c24:	6020      	str	r0, [r4, #0]
	rmc->tim.min = gTime.Minutes;
 8003c26:	6066      	str	r6, [r4, #4]
	rmc->tim.sec = gTime.Seconds;
 8003c28:	60a7      	str	r7, [r4, #8]

	//save_rmc_to_location_info(location_info);
	snprintf((char*)output_buffer, 128, "Time to GMT+8 saved to RMC: 20%02d/%02d/%02d, %02d:%02d:%02d\n", rmc->date.Yr, rmc->date.Mon, rmc->date.Day, rmc->tim.hour, rmc->tim.min, rmc->tim.sec);
 8003c2a:	e9cd 1001 	strd	r1, r0, [sp, #4]
 8003c2e:	9200      	str	r2, [sp, #0]
 8003c30:	e9cd 6703 	strd	r6, r7, [sp, #12]
 8003c34:	4a09      	ldr	r2, [pc, #36]	@ (8003c5c <get_RTC_time_date+0xb8>)
 8003c36:	2180      	movs	r1, #128	@ 0x80
 8003c38:	a812      	add	r0, sp, #72	@ 0x48
 8003c3a:	f008 fc2b 	bl	800c494 <sniprintf>
	uart_transmit_string(&huart1, (uint8_t*) output_buffer);
 8003c3e:	a912      	add	r1, sp, #72	@ 0x48
 8003c40:	4628      	mov	r0, r5
 8003c42:	f001 fe19 	bl	8005878 <uart_transmit_string>
}
 8003c46:	b033      	add	sp, #204	@ 0xcc
 8003c48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003c4a:	bf00      	nop
 8003c4c:	20007148 	.word	0x20007148
 8003c50:	20006fac 	.word	0x20006fac
 8003c54:	080111be 	.word	0x080111be
 8003c58:	08011ea4 	.word	0x08011ea4
 8003c5c:	08011eb6 	.word	0x08011eb6

08003c60 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8003c60:	b510      	push	{r4, lr}
 8003c62:	b086      	sub	sp, #24

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8003c64:	2214      	movs	r2, #20
 8003c66:	2100      	movs	r1, #0
 8003c68:	a801      	add	r0, sp, #4
 8003c6a:	f008 fd0f 	bl	800c68c <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8003c6e:	4c16      	ldr	r4, [pc, #88]	@ (8003cc8 <MX_RTC_Init+0x68>)
 8003c70:	4a16      	ldr	r2, [pc, #88]	@ (8003ccc <MX_RTC_Init+0x6c>)
  RTC_DateTypeDef sDate = {0};
 8003c72:	2300      	movs	r3, #0
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8003c74:	e9c4 2300 	strd	r2, r3, [r4]
  hrtc.Init.AsynchPrediv = 127;
  hrtc.Init.SynchPrediv = 255;
 8003c78:	217f      	movs	r1, #127	@ 0x7f
 8003c7a:	22ff      	movs	r2, #255	@ 0xff
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8003c7c:	4620      	mov	r0, r4
  hrtc.Init.SynchPrediv = 255;
 8003c7e:	e9c4 1202 	strd	r1, r2, [r4, #8]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8003c82:	e9c4 3304 	strd	r3, r3, [r4, #16]
  RTC_DateTypeDef sDate = {0};
 8003c86:	9300      	str	r3, [sp, #0]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8003c88:	61a3      	str	r3, [r4, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8003c8a:	f003 fb2c 	bl	80072e6 <HAL_RTC_Init>
 8003c8e:	4602      	mov	r2, r0
 8003c90:	b108      	cbz	r0, 8003c96 <MX_RTC_Init+0x36>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003c92:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003c94:	e7fe      	b.n	8003c94 <MX_RTC_Init+0x34>
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8003c96:	e9cd 0004 	strd	r0, r0, [sp, #16]
  sTime.Hours = 0;
 8003c9a:	f8ad 0004 	strh.w	r0, [sp, #4]
  sTime.Seconds = 0;
 8003c9e:	f88d 0006 	strb.w	r0, [sp, #6]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8003ca2:	a901      	add	r1, sp, #4
 8003ca4:	4620      	mov	r0, r4
 8003ca6:	f003 fb71 	bl	800738c <HAL_RTC_SetTime>
 8003caa:	4602      	mov	r2, r0
 8003cac:	b108      	cbz	r0, 8003cb2 <MX_RTC_Init+0x52>
 8003cae:	b672      	cpsid	i
  while (1)
 8003cb0:	e7fe      	b.n	8003cb0 <MX_RTC_Init+0x50>
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8003cb2:	4b07      	ldr	r3, [pc, #28]	@ (8003cd0 <MX_RTC_Init+0x70>)
 8003cb4:	9300      	str	r3, [sp, #0]
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8003cb6:	4669      	mov	r1, sp
 8003cb8:	4620      	mov	r0, r4
 8003cba:	f003 fbc1 	bl	8007440 <HAL_RTC_SetDate>
 8003cbe:	b108      	cbz	r0, 8003cc4 <MX_RTC_Init+0x64>
 8003cc0:	b672      	cpsid	i
  while (1)
 8003cc2:	e7fe      	b.n	8003cc2 <MX_RTC_Init+0x62>
}
 8003cc4:	b006      	add	sp, #24
 8003cc6:	bd10      	pop	{r4, pc}
 8003cc8:	20007148 	.word	0x20007148
 8003ccc:	40002800 	.word	0x40002800
 8003cd0:	00010101 	.word	0x00010101

08003cd4 <Initialize_RTC>:
    __HAL_RCC_PWR_CLK_ENABLE();
 8003cd4:	4b18      	ldr	r3, [pc, #96]	@ (8003d38 <Initialize_RTC+0x64>)
void Initialize_RTC(void) {
 8003cd6:	b510      	push	{r4, lr}
    __HAL_RCC_PWR_CLK_ENABLE();
 8003cd8:	69da      	ldr	r2, [r3, #28]
 8003cda:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8003cde:	61da      	str	r2, [r3, #28]
 8003ce0:	69db      	ldr	r3, [r3, #28]
void Initialize_RTC(void) {
 8003ce2:	b088      	sub	sp, #32
    __HAL_RCC_PWR_CLK_ENABLE();
 8003ce4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ce8:	9301      	str	r3, [sp, #4]
 8003cea:	9b01      	ldr	r3, [sp, #4]
    HAL_PWR_EnableBkUpAccess();
 8003cec:	f002 fe32 	bl	8006954 <HAL_PWR_EnableBkUpAccess>
    if (HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR1) != RTC_INIT_FLAG) {
 8003cf0:	4812      	ldr	r0, [pc, #72]	@ (8003d3c <Initialize_RTC+0x68>)
 8003cf2:	2101      	movs	r1, #1
 8003cf4:	f003 fc39 	bl	800756a <HAL_RTCEx_BKUPRead>
 8003cf8:	f243 24f2 	movw	r4, #13042	@ 0x32f2
 8003cfc:	42a0      	cmp	r0, r4
 8003cfe:	d00c      	beq.n	8003d1a <Initialize_RTC+0x46>
    	Debug_printf("\n--------------------------------------------- FIRST TIME RTC INITIALISATION ----------------------------------------------\n");
 8003d00:	480f      	ldr	r0, [pc, #60]	@ (8003d40 <Initialize_RTC+0x6c>)
 8003d02:	f001 fddd 	bl	80058c0 <Debug_printf>
        MX_RTC_Init();  // Configure RTC
 8003d06:	f7ff ffab 	bl	8003c60 <MX_RTC_Init>
        HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, RTC_INIT_FLAG);  // Store initialization flag
 8003d0a:	480c      	ldr	r0, [pc, #48]	@ (8003d3c <Initialize_RTC+0x68>)
 8003d0c:	4622      	mov	r2, r4
 8003d0e:	2101      	movs	r1, #1
}
 8003d10:	b008      	add	sp, #32
 8003d12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, RTC_INIT_FLAG);  // Store initialization flag
 8003d16:	f003 bc23 	b.w	8007560 <HAL_RTCEx_BKUPWrite>
    	Debug_printf("\n-------------------------------------------- BACK UP RTC:  GETTING RTC FROM BACK UP ----------------------------------------\n");
 8003d1a:	480a      	ldr	r0, [pc, #40]	@ (8003d44 <Initialize_RTC+0x70>)
 8003d1c:	f001 fdd0 	bl	80058c0 <Debug_printf>
        HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8003d20:	a903      	add	r1, sp, #12
 8003d22:	2200      	movs	r2, #0
 8003d24:	4805      	ldr	r0, [pc, #20]	@ (8003d3c <Initialize_RTC+0x68>)
 8003d26:	f003 fbdb 	bl	80074e0 <HAL_RTC_GetTime>
        HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	a902      	add	r1, sp, #8
 8003d2e:	4803      	ldr	r0, [pc, #12]	@ (8003d3c <Initialize_RTC+0x68>)
 8003d30:	f003 fbf9 	bl	8007526 <HAL_RTC_GetDate>
}
 8003d34:	b008      	add	sp, #32
 8003d36:	bd10      	pop	{r4, pc}
 8003d38:	40021000 	.word	0x40021000
 8003d3c:	20007148 	.word	0x20007148
 8003d40:	08011ef4 	.word	0x08011ef4
 8003d44:	08011f71 	.word	0x08011f71

08003d48 <SystemClock_Config>:
{
 8003d48:	b500      	push	{lr}
 8003d4a:	b09f      	sub	sp, #124	@ 0x7c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003d4c:	2228      	movs	r2, #40	@ 0x28
 8003d4e:	2100      	movs	r1, #0
 8003d50:	a805      	add	r0, sp, #20
 8003d52:	f008 fc9b 	bl	800c68c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003d56:	2214      	movs	r2, #20
 8003d58:	2100      	movs	r1, #0
 8003d5a:	4668      	mov	r0, sp
 8003d5c:	f008 fc96 	bl	800c68c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003d60:	223c      	movs	r2, #60	@ 0x3c
 8003d62:	2100      	movs	r1, #0
 8003d64:	eb0d 0002 	add.w	r0, sp, r2
 8003d68:	f008 fc90 	bl	800c68c <memset>
  HAL_PWR_EnableBkUpAccess();
 8003d6c:	f002 fdf2 	bl	8006954 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8003d70:	4a1d      	ldr	r2, [pc, #116]	@ (8003de8 <SystemClock_Config+0xa0>)
 8003d72:	6a13      	ldr	r3, [r2, #32]
 8003d74:	f023 0318 	bic.w	r3, r3, #24
 8003d78:	6213      	str	r3, [r2, #32]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 8003d7a:	2306      	movs	r3, #6
 8003d7c:	9305      	str	r3, [sp, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8003d7e:	2301      	movs	r3, #1
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003d80:	e9cd 3308 	strd	r3, r3, [sp, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003d84:	2310      	movs	r3, #16
 8003d86:	930a      	str	r3, [sp, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003d88:	2002      	movs	r0, #2
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	e9cd 030c 	strd	r0, r3, [sp, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 8003d90:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003d94:	a805      	add	r0, sp, #20
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 8003d96:	930e      	str	r3, [sp, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003d98:	f002 fde4 	bl	8006964 <HAL_RCC_OscConfig>
 8003d9c:	4601      	mov	r1, r0
 8003d9e:	b108      	cbz	r0, 8003da4 <SystemClock_Config+0x5c>
 8003da0:	b672      	cpsid	i
  while (1)
 8003da2:	e7fe      	b.n	8003da2 <SystemClock_Config+0x5a>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003da4:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8003da6:	e9cd 3000 	strd	r3, r0, [sp]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003daa:	e9cd 0002 	strd	r0, r0, [sp, #8]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003dae:	9004      	str	r0, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8003db0:	4668      	mov	r0, sp
 8003db2:	f003 f857 	bl	8006e64 <HAL_RCC_ClockConfig>
 8003db6:	b108      	cbz	r0, 8003dbc <SystemClock_Config+0x74>
 8003db8:	b672      	cpsid	i
  while (1)
 8003dba:	e7fe      	b.n	8003dba <SystemClock_Config+0x72>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 8003dbc:	4b0b      	ldr	r3, [pc, #44]	@ (8003dec <SystemClock_Config+0xa4>)
 8003dbe:	930f      	str	r3, [sp, #60]	@ 0x3c
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003dc0:	e9cd 0011 	strd	r0, r0, [sp, #68]	@ 0x44
  PeriphClkInit.Adc34ClockSelection = RCC_ADC34PLLCLK_DIV1;
 8003dc4:	f44f 7380 	mov.w	r3, #256	@ 0x100
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8003dc8:	9013      	str	r0, [sp, #76]	@ 0x4c
  PeriphClkInit.Adc34ClockSelection = RCC_ADC34PLLCLK_DIV1;
 8003dca:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003dce:	a80f      	add	r0, sp, #60	@ 0x3c
  PeriphClkInit.Adc34ClockSelection = RCC_ADC34PLLCLK_DIV1;
 8003dd0:	e9cd 3218 	strd	r3, r2, [sp, #96]	@ 0x60
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8003dd4:	9310      	str	r3, [sp, #64]	@ 0x40
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003dd6:	f003 f93b 	bl	8007050 <HAL_RCCEx_PeriphCLKConfig>
 8003dda:	b108      	cbz	r0, 8003de0 <SystemClock_Config+0x98>
 8003ddc:	b672      	cpsid	i
  while (1)
 8003dde:	e7fe      	b.n	8003dde <SystemClock_Config+0x96>
}
 8003de0:	b01f      	add	sp, #124	@ 0x7c
 8003de2:	f85d fb04 	ldr.w	pc, [sp], #4
 8003de6:	bf00      	nop
 8003de8:	40021000 	.word	0x40021000
 8003dec:	00010187 	.word	0x00010187

08003df0 <main>:
{
 8003df0:	b580      	push	{r7, lr}
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003df2:	4db9      	ldr	r5, [pc, #740]	@ (80040d8 <main+0x2e8>)
{
 8003df4:	b08e      	sub	sp, #56	@ 0x38
  HAL_Init();
 8003df6:	f001 fe49 	bl	8005a8c <HAL_Init>
  SystemClock_Config();
 8003dfa:	f7ff ffa5 	bl	8003d48 <SystemClock_Config>
  	Initialize_RTC();
 8003dfe:	f7ff ff69 	bl	8003cd4 <Initialize_RTC>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e02:	2214      	movs	r2, #20
 8003e04:	2100      	movs	r1, #0
 8003e06:	a808      	add	r0, sp, #32
 8003e08:	f008 fc40 	bl	800c68c <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003e0c:	696b      	ldr	r3, [r5, #20]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
 8003e0e:	48b3      	ldr	r0, [pc, #716]	@ (80040dc <main+0x2ec>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003e10:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003e14:	616b      	str	r3, [r5, #20]
 8003e16:	696b      	ldr	r3, [r5, #20]
 8003e18:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003e1c:	9302      	str	r3, [sp, #8]
 8003e1e:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e20:	696b      	ldr	r3, [r5, #20]
 8003e22:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003e26:	616b      	str	r3, [r5, #20]
 8003e28:	696b      	ldr	r3, [r5, #20]
 8003e2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e2e:	9303      	str	r3, [sp, #12]
 8003e30:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003e32:	696b      	ldr	r3, [r5, #20]
 8003e34:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003e38:	616b      	str	r3, [r5, #20]
 8003e3a:	696b      	ldr	r3, [r5, #20]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
 8003e3c:	2201      	movs	r2, #1
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003e3e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
 8003e42:	4611      	mov	r1, r2
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003e44:	9304      	str	r3, [sp, #16]
 8003e46:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
 8003e48:	f002 fd7e 	bl	8006948 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_6
 8003e4c:	48a3      	ldr	r0, [pc, #652]	@ (80040dc <main+0x2ec>)
 8003e4e:	2200      	movs	r2, #0
 8003e50:	f240 3156 	movw	r1, #854	@ 0x356
 8003e54:	f002 fd78 	bl	8006948 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 8003e58:	48a1      	ldr	r0, [pc, #644]	@ (80040e0 <main+0x2f0>)
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	2104      	movs	r1, #4
 8003e5e:	f002 fd73 	bl	8006948 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8003e62:	489f      	ldr	r0, [pc, #636]	@ (80040e0 <main+0x2f0>)
 8003e64:	2201      	movs	r2, #1
 8003e66:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003e6a:	f002 fd6d 	bl	8006948 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
 8003e6e:	2201      	movs	r2, #1
 8003e70:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003e74:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e78:	2400      	movs	r4, #0
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
 8003e7a:	f002 fd65 	bl	8006948 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003e7e:	2601      	movs	r6, #1
 8003e80:	f240 2303 	movw	r3, #515	@ 0x203
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003e84:	4895      	ldr	r0, [pc, #596]	@ (80040dc <main+0x2ec>)
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003e86:	960a      	str	r6, [sp, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003e88:	a908      	add	r1, sp, #32
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003e8a:	e9cd 3608 	strd	r3, r6, [sp, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e8e:	940b      	str	r4, [sp, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003e90:	f002 fc96 	bl	80067c0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_8;
 8003e94:	f44f 73aa 	mov.w	r3, #340	@ 0x154
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003e98:	4890      	ldr	r0, [pc, #576]	@ (80040dc <main+0x2ec>)
 8003e9a:	a908      	add	r1, sp, #32
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003e9c:	e9cd 3608 	strd	r3, r6, [sp, #32]
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8003ea0:	f04f 0802 	mov.w	r8, #2
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ea4:	e9cd 440a 	strd	r4, r4, [sp, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003ea8:	f002 fc8a 	bl	80067c0 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003eac:	488c      	ldr	r0, [pc, #560]	@ (80040e0 <main+0x2f0>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003eae:	940a      	str	r4, [sp, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003eb0:	a908      	add	r1, sp, #32
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003eb2:	e9cd 8408 	strd	r8, r4, [sp, #32]
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003eb6:	2704      	movs	r7, #4
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003eb8:	f002 fc82 	bl	80067c0 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003ebc:	4888      	ldr	r0, [pc, #544]	@ (80040e0 <main+0x2f0>)
 8003ebe:	a908      	add	r1, sp, #32
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003ec0:	f04f 0a03 	mov.w	sl, #3
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003ec4:	e9cd 7608 	strd	r7, r6, [sp, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ec8:	e9cd 440a 	strd	r4, r4, [sp, #40]	@ 0x28
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8003ecc:	f44f 5980 	mov.w	r9, #4096	@ 0x1000
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003ed0:	f002 fc76 	bl	80067c0 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003ed4:	4882      	ldr	r0, [pc, #520]	@ (80040e0 <main+0x2f0>)
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003ed6:	960a      	str	r6, [sp, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003ed8:	a908      	add	r1, sp, #32
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003eda:	e9cd 9608 	strd	r9, r6, [sp, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003ede:	f8cd a02c 	str.w	sl, [sp, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003ee2:	f002 fc6d 	bl	80067c0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8003ee6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003eea:	a908      	add	r1, sp, #32
 8003eec:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003ef0:	e9cd 3608 	strd	r3, r6, [sp, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003ef4:	e9cd 6a0a 	strd	r6, sl, [sp, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ef8:	f002 fc62 	bl	80067c0 <HAL_GPIO_Init>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003efc:	696b      	ldr	r3, [r5, #20]
 8003efe:	4333      	orrs	r3, r6
 8003f00:	616b      	str	r3, [r5, #20]
 8003f02:	696b      	ldr	r3, [r5, #20]
 8003f04:	4033      	ands	r3, r6
 8003f06:	9300      	str	r3, [sp, #0]
 8003f08:	9b00      	ldr	r3, [sp, #0]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8003f0a:	696b      	ldr	r3, [r5, #20]
 8003f0c:	ea43 0308 	orr.w	r3, r3, r8
 8003f10:	616b      	str	r3, [r5, #20]
 8003f12:	696b      	ldr	r3, [r5, #20]
 8003f14:	ea03 0308 	and.w	r3, r3, r8
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 5, 0);
 8003f18:	4622      	mov	r2, r4
 8003f1a:	2105      	movs	r1, #5
  __HAL_RCC_DMA2_CLK_ENABLE();
 8003f1c:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 5, 0);
 8003f1e:	200d      	movs	r0, #13
  __HAL_RCC_DMA2_CLK_ENABLE();
 8003f20:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 5, 0);
 8003f22:	f002 fb29 	bl	8006578 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8003f26:	200d      	movs	r0, #13
 8003f28:	f002 fb58 	bl	80065dc <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 5, 0);
 8003f2c:	4622      	mov	r2, r4
 8003f2e:	2105      	movs	r1, #5
 8003f30:	200f      	movs	r0, #15
 8003f32:	f002 fb21 	bl	8006578 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8003f36:	200f      	movs	r0, #15
 8003f38:	f002 fb50 	bl	80065dc <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 5, 0);
 8003f3c:	4622      	mov	r2, r4
 8003f3e:	2105      	movs	r1, #5
 8003f40:	2010      	movs	r0, #16
 8003f42:	f002 fb19 	bl	8006578 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8003f46:	2010      	movs	r0, #16
 8003f48:	f002 fb48 	bl	80065dc <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Channel1_IRQn, 5, 0);
 8003f4c:	4622      	mov	r2, r4
 8003f4e:	2105      	movs	r1, #5
 8003f50:	2038      	movs	r0, #56	@ 0x38
 8003f52:	f002 fb11 	bl	8006578 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 8003f56:	2038      	movs	r0, #56	@ 0x38
 8003f58:	f002 fb40 	bl	80065dc <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Channel5_IRQn, 5, 0);
 8003f5c:	4622      	mov	r2, r4
 8003f5e:	2105      	movs	r1, #5
 8003f60:	203c      	movs	r0, #60	@ 0x3c
 8003f62:	f002 fb09 	bl	8006578 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel5_IRQn);
 8003f66:	203c      	movs	r0, #60	@ 0x3c
 8003f68:	f002 fb38 	bl	80065dc <HAL_NVIC_EnableIRQ>
  MX_RTC_Init();
 8003f6c:	f7ff fe78 	bl	8003c60 <MX_RTC_Init>
  hspi1.Instance = SPI1;
 8003f70:	485c      	ldr	r0, [pc, #368]	@ (80040e4 <main+0x2f4>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003f72:	f8df e198 	ldr.w	lr, [pc, #408]	@ 800410c <main+0x31c>
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003f76:	6084      	str	r4, [r0, #8]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003f78:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8003f7c:	e9c0 e300 	strd	lr, r3, [r0]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003f80:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003f84:	e9c0 3403 	strd	r3, r4, [r0, #12]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8003f88:	2510      	movs	r5, #16
 8003f8a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003f8e:	e9c0 3506 	strd	r3, r5, [r0, #24]
  hspi1.Init.CRCPolynomial = 7;
 8003f92:	2307      	movs	r3, #7
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8003f94:	e9c0 340b 	strd	r3, r4, [r0, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8003f98:	2308      	movs	r3, #8
 8003f9a:	6343      	str	r3, [r0, #52]	@ 0x34
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003f9c:	e9c0 4408 	strd	r4, r4, [r0, #32]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003fa0:	6144      	str	r4, [r0, #20]
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003fa2:	6284      	str	r4, [r0, #40]	@ 0x28
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003fa4:	f003 fbf5 	bl	8007792 <HAL_SPI_Init>
 8003fa8:	4603      	mov	r3, r0
 8003faa:	b108      	cbz	r0, 8003fb0 <main+0x1c0>
 8003fac:	b672      	cpsid	i
  while (1)
 8003fae:	e7fe      	b.n	8003fae <main+0x1be>
  huart1.Instance = USART1;
 8003fb0:	484d      	ldr	r0, [pc, #308]	@ (80040e8 <main+0x2f8>)
  huart1.Init.BaudRate = 115200;
 8003fb2:	4a4e      	ldr	r2, [pc, #312]	@ (80040ec <main+0x2fc>)
  huart1.Init.Parity = UART_PARITY_NONE;
 8003fb4:	6103      	str	r3, [r0, #16]
  huart1.Init.BaudRate = 115200;
 8003fb6:	f44f 34e1 	mov.w	r4, #115200	@ 0x1c200
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003fba:	f04f 0a0c 	mov.w	sl, #12
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003fbe:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003fc2:	e9c0 a305 	strd	sl, r3, [r0, #20]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003fc6:	e9c0 3307 	strd	r3, r3, [r0, #28]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003fca:	6243      	str	r3, [r0, #36]	@ 0x24
  huart1.Init.BaudRate = 115200;
 8003fcc:	e9c0 2400 	strd	r2, r4, [r0]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003fd0:	f004 fcc6 	bl	8008960 <HAL_UART_Init>
 8003fd4:	4603      	mov	r3, r0
 8003fd6:	b108      	cbz	r0, 8003fdc <main+0x1ec>
 8003fd8:	b672      	cpsid	i
  while (1)
 8003fda:	e7fe      	b.n	8003fda <main+0x1ea>
  huart2.Instance = USART2;
 8003fdc:	4844      	ldr	r0, [pc, #272]	@ (80040f0 <main+0x300>)
  huart2.Init.BaudRate = 9600;
 8003fde:	f8df c130 	ldr.w	ip, [pc, #304]	@ 8004110 <main+0x320>
 8003fe2:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003fe6:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003fea:	e9c0 3a04 	strd	r3, sl, [r0, #16]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003fee:	e9c0 3306 	strd	r3, r3, [r0, #24]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003ff2:	e9c0 3308 	strd	r3, r3, [r0, #32]
  huart2.Init.BaudRate = 9600;
 8003ff6:	e9c0 c200 	strd	ip, r2, [r0]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003ffa:	f004 fcb1 	bl	8008960 <HAL_UART_Init>
 8003ffe:	4603      	mov	r3, r0
 8004000:	b108      	cbz	r0, 8004006 <main+0x216>
 8004002:	b672      	cpsid	i
  while (1)
 8004004:	e7fe      	b.n	8004004 <main+0x214>
  huart3.Instance = USART3;
 8004006:	483b      	ldr	r0, [pc, #236]	@ (80040f4 <main+0x304>)
 8004008:	4a3b      	ldr	r2, [pc, #236]	@ (80040f8 <main+0x308>)
  huart3.Init.StopBits = UART_STOPBITS_1;
 800400a:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart3.Init.BaudRate = 115200;
 800400e:	e9c0 2400 	strd	r2, r4, [r0]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8004012:	e9c0 3a04 	strd	r3, sl, [r0, #16]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8004016:	e9c0 3306 	strd	r3, r3, [r0, #24]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800401a:	e9c0 3308 	strd	r3, r3, [r0, #32]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800401e:	f004 fc9f 	bl	8008960 <HAL_UART_Init>
 8004022:	4604      	mov	r4, r0
 8004024:	b108      	cbz	r0, 800402a <main+0x23a>
 8004026:	b672      	cpsid	i
  while (1)
 8004028:	e7fe      	b.n	8004028 <main+0x238>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800402a:	462a      	mov	r2, r5
 800402c:	4601      	mov	r1, r0
 800402e:	a808      	add	r0, sp, #32
 8004030:	f008 fb2c 	bl	800c68c <memset>
  htim3.Instance = TIM3;
 8004034:	4d31      	ldr	r5, [pc, #196]	@ (80040fc <main+0x30c>)
  htim3.Init.Prescaler = 8000;
 8004036:	4832      	ldr	r0, [pc, #200]	@ (8004100 <main+0x310>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004038:	9407      	str	r4, [sp, #28]
  htim3.Init.Prescaler = 8000;
 800403a:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 800403e:	e9c5 0300 	strd	r0, r3, [r5]
  htim3.Init.Period = 65535;
 8004042:	f64f 73ff 	movw	r3, #65535	@ 0xffff
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8004046:	4628      	mov	r0, r5
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004048:	e9cd 4405 	strd	r4, r4, [sp, #20]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800404c:	e9c5 3403 	strd	r3, r4, [r5, #12]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004050:	60ac      	str	r4, [r5, #8]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004052:	61ac      	str	r4, [r5, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8004054:	f004 f82c 	bl	80080b0 <HAL_TIM_Base_Init>
 8004058:	b108      	cbz	r0, 800405e <main+0x26e>
 800405a:	b672      	cpsid	i
  while (1)
 800405c:	e7fe      	b.n	800405c <main+0x26c>
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800405e:	a908      	add	r1, sp, #32
 8004060:	4628      	mov	r0, r5
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004062:	f8cd 9020 	str.w	r9, [sp, #32]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8004066:	f004 f85d 	bl	8008124 <HAL_TIM_ConfigClockSource>
 800406a:	b108      	cbz	r0, 8004070 <main+0x280>
 800406c:	b672      	cpsid	i
  while (1)
 800406e:	e7fe      	b.n	800406e <main+0x27e>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004070:	9005      	str	r0, [sp, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004072:	9007      	str	r0, [sp, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004074:	a905      	add	r1, sp, #20
 8004076:	4628      	mov	r0, r5
 8004078:	f004 f8ee 	bl	8008258 <HAL_TIMEx_MasterConfigSynchronization>
 800407c:	4605      	mov	r5, r0
 800407e:	b108      	cbz	r0, 8004084 <main+0x294>
 8004080:	b672      	cpsid	i
  while (1)
 8004082:	e7fe      	b.n	8004082 <main+0x292>
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8004084:	4c1f      	ldr	r4, [pc, #124]	@ (8004104 <main+0x314>)
  ADC_ChannelConfTypeDef sConfig = {0};
 8004086:	4601      	mov	r1, r0
 8004088:	2218      	movs	r2, #24
 800408a:	a808      	add	r0, sp, #32
 800408c:	f008 fafe 	bl	800c68c <memset>
  hadc2.Instance = ADC2;
 8004090:	4b1d      	ldr	r3, [pc, #116]	@ (8004108 <main+0x318>)
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8004092:	f884 5020 	strb.w	r5, [r4, #32]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8004096:	4620      	mov	r0, r4
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004098:	e9c4 650a 	strd	r6, r5, [r4, #40]	@ 0x28
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800409c:	e9c4 3500 	strd	r3, r5, [r4]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80040a0:	e9c4 5502 	strd	r5, r5, [r4, #8]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80040a4:	e9c4 5704 	strd	r5, r7, [r4, #16]
  hadc2.Init.NbrOfConversion = 1;
 80040a8:	61e6      	str	r6, [r4, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80040aa:	f884 5030 	strb.w	r5, [r4, #48]	@ 0x30
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80040ae:	8325      	strh	r5, [r4, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80040b0:	6365      	str	r5, [r4, #52]	@ 0x34
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80040b2:	f001 fd45 	bl	8005b40 <HAL_ADC_Init>
 80040b6:	b108      	cbz	r0, 80040bc <main+0x2cc>
 80040b8:	b672      	cpsid	i
  while (1)
 80040ba:	e7fe      	b.n	80040ba <main+0x2ca>
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80040bc:	e9cd 000a 	strd	r0, r0, [sp, #40]	@ 0x28
  sConfig.Offset = 0;
 80040c0:	e9cd 000c 	strd	r0, r0, [sp, #48]	@ 0x30
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80040c4:	a908      	add	r1, sp, #32
 80040c6:	4620      	mov	r0, r4
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80040c8:	e9cd 8608 	strd	r8, r6, [sp, #32]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80040cc:	f002 f83a 	bl	8006144 <HAL_ADC_ConfigChannel>
 80040d0:	4604      	mov	r4, r0
 80040d2:	b1f8      	cbz	r0, 8004114 <main+0x324>
 80040d4:	b672      	cpsid	i
  while (1)
 80040d6:	e7fe      	b.n	80040d6 <main+0x2e6>
 80040d8:	40021000 	.word	0x40021000
 80040dc:	48000800 	.word	0x48000800
 80040e0:	48000400 	.word	0x48000400
 80040e4:	200070e4 	.word	0x200070e4
 80040e8:	20006fac 	.word	0x20006fac
 80040ec:	40013800 	.word	0x40013800
 80040f0:	20006f24 	.word	0x20006f24
 80040f4:	20006e9c 	.word	0x20006e9c
 80040f8:	40004800 	.word	0x40004800
 80040fc:	20007034 	.word	0x20007034
 8004100:	40000400 	.word	0x40000400
 8004104:	20007240 	.word	0x20007240
 8004108:	50000100 	.word	0x50000100
 800410c:	40013000 	.word	0x40013000
 8004110:	40004400 	.word	0x40004400
  ADC_MultiModeTypeDef multimode = {0};
 8004114:	e9cd 0005 	strd	r0, r0, [sp, #20]
 8004118:	9007      	str	r0, [sp, #28]
  ADC_ChannelConfTypeDef sConfig = {0};
 800411a:	4601      	mov	r1, r0
 800411c:	2218      	movs	r2, #24
 800411e:	a808      	add	r0, sp, #32
 8004120:	f008 fab4 	bl	800c68c <memset>
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8004124:	4841      	ldr	r0, [pc, #260]	@ (800422c <main+0x43c>)
  hadc3.Instance = ADC3;
 8004126:	4b42      	ldr	r3, [pc, #264]	@ (8004230 <main+0x440>)
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8004128:	f880 4020 	strb.w	r4, [r0, #32]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800412c:	e9c0 640a 	strd	r6, r4, [r0, #40]	@ 0x28
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8004130:	e9c0 3400 	strd	r3, r4, [r0]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004134:	e9c0 4402 	strd	r4, r4, [r0, #8]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8004138:	e9c0 4704 	strd	r4, r7, [r0, #16]
  hadc3.Init.NbrOfConversion = 1;
 800413c:	61c6      	str	r6, [r0, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 800413e:	f880 4030 	strb.w	r4, [r0, #48]	@ 0x30
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8004142:	8304      	strh	r4, [r0, #24]
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8004144:	6344      	str	r4, [r0, #52]	@ 0x34
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8004146:	f001 fcfb 	bl	8005b40 <HAL_ADC_Init>
 800414a:	b108      	cbz	r0, 8004150 <main+0x360>
 800414c:	b672      	cpsid	i
  while (1)
 800414e:	e7fe      	b.n	800414e <main+0x35e>
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8004150:	2300      	movs	r3, #0
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 8004152:	4836      	ldr	r0, [pc, #216]	@ (800422c <main+0x43c>)
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8004154:	9305      	str	r3, [sp, #20]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 8004156:	a905      	add	r1, sp, #20
 8004158:	f002 f978 	bl	800644c <HAL_ADCEx_MultiModeConfigChannel>
 800415c:	b108      	cbz	r0, 8004162 <main+0x372>
 800415e:	b672      	cpsid	i
  while (1)
 8004160:	e7fe      	b.n	8004160 <main+0x370>
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8004162:	230c      	movs	r3, #12
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8004164:	e9cd 000a 	strd	r0, r0, [sp, #40]	@ 0x28
  sConfig.Offset = 0;
 8004168:	e9cd 000c 	strd	r0, r0, [sp, #48]	@ 0x30
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800416c:	2501      	movs	r5, #1
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800416e:	482f      	ldr	r0, [pc, #188]	@ (800422c <main+0x43c>)
 8004170:	a908      	add	r1, sp, #32
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8004172:	e9cd 3508 	strd	r3, r5, [sp, #32]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8004176:	f001 ffe5 	bl	8006144 <HAL_ADC_ConfigChannel>
 800417a:	4603      	mov	r3, r0
 800417c:	b108      	cbz	r0, 8004182 <main+0x392>
 800417e:	b672      	cpsid	i
  while (1)
 8004180:	e7fe      	b.n	8004180 <main+0x390>
  hspi2.Instance = SPI2;
 8004182:	482c      	ldr	r0, [pc, #176]	@ (8004234 <main+0x444>)
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8004184:	492c      	ldr	r1, [pc, #176]	@ (8004238 <main+0x448>)
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8004186:	6083      	str	r3, [r0, #8]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8004188:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800418c:	e9c0 1200 	strd	r1, r2, [r0]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8004190:	f44f 7240 	mov.w	r2, #768	@ 0x300
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004194:	e9c0 2303 	strd	r2, r3, [r0, #12]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8004198:	f44f 7200 	mov.w	r2, #512	@ 0x200
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800419c:	e9c0 2306 	strd	r2, r3, [r0, #24]
  hspi2.Init.CRCPolynomial = 7;
 80041a0:	2207      	movs	r2, #7
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80041a2:	e9c0 3308 	strd	r3, r3, [r0, #32]
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80041a6:	e9c0 230b 	strd	r2, r3, [r0, #44]	@ 0x2c
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80041aa:	6143      	str	r3, [r0, #20]
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80041ac:	6283      	str	r3, [r0, #40]	@ 0x28
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80041ae:	2308      	movs	r3, #8
 80041b0:	6343      	str	r3, [r0, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80041b2:	f003 faee 	bl	8007792 <HAL_SPI_Init>
 80041b6:	4604      	mov	r4, r0
 80041b8:	b108      	cbz	r0, 80041be <main+0x3ce>
 80041ba:	b672      	cpsid	i
  while (1)
 80041bc:	e7fe      	b.n	80041bc <main+0x3cc>
  osKernelInitialize();
 80041be:	f004 fc69 	bl	8008a94 <osKernelInitialize>
  RMC_MailQFLASHIdHandle = osMessageQueueNew (3, 88, &RMC_MailQFLASHId_attributes);
 80041c2:	4a1e      	ldr	r2, [pc, #120]	@ (800423c <main+0x44c>)
 80041c4:	2158      	movs	r1, #88	@ 0x58
 80041c6:	2003      	movs	r0, #3
 80041c8:	f004 fd2a 	bl	8008c20 <osMessageQueueNew>
 80041cc:	4b1c      	ldr	r3, [pc, #112]	@ (8004240 <main+0x450>)
  RMC_MailQGSMIdHandle = osMessageQueueNew (64, 96, &RMC_MailQGSMId_attributes);
 80041ce:	4a1d      	ldr	r2, [pc, #116]	@ (8004244 <main+0x454>)
  RMC_MailQFLASHIdHandle = osMessageQueueNew (3, 88, &RMC_MailQFLASHId_attributes);
 80041d0:	6018      	str	r0, [r3, #0]
  RMC_MailQGSMIdHandle = osMessageQueueNew (64, 96, &RMC_MailQGSMId_attributes);
 80041d2:	2160      	movs	r1, #96	@ 0x60
 80041d4:	2040      	movs	r0, #64	@ 0x40
 80041d6:	f004 fd23 	bl	8008c20 <osMessageQueueNew>
 80041da:	4b1b      	ldr	r3, [pc, #108]	@ (8004248 <main+0x458>)
  tax_MailQIdHandle = osMessageQueueNew (1, 128, &tax_MailQId_attributes);
 80041dc:	4a1b      	ldr	r2, [pc, #108]	@ (800424c <main+0x45c>)
  RMC_MailQGSMIdHandle = osMessageQueueNew (64, 96, &RMC_MailQGSMId_attributes);
 80041de:	6018      	str	r0, [r3, #0]
  tax_MailQIdHandle = osMessageQueueNew (1, 128, &tax_MailQId_attributes);
 80041e0:	2180      	movs	r1, #128	@ 0x80
 80041e2:	4628      	mov	r0, r5
 80041e4:	f004 fd1c 	bl	8008c20 <osMessageQueueNew>
 80041e8:	4b19      	ldr	r3, [pc, #100]	@ (8004250 <main+0x460>)
  SpiFlashHandle = osThreadNew(StartSpiFlash, NULL, &SpiFlash_attributes);
 80041ea:	4a1a      	ldr	r2, [pc, #104]	@ (8004254 <main+0x464>)
  tax_MailQIdHandle = osMessageQueueNew (1, 128, &tax_MailQId_attributes);
 80041ec:	6018      	str	r0, [r3, #0]
  SpiFlashHandle = osThreadNew(StartSpiFlash, NULL, &SpiFlash_attributes);
 80041ee:	4621      	mov	r1, r4
 80041f0:	4819      	ldr	r0, [pc, #100]	@ (8004258 <main+0x468>)
 80041f2:	f004 fc8b 	bl	8008b0c <osThreadNew>
 80041f6:	4b19      	ldr	r3, [pc, #100]	@ (800425c <main+0x46c>)
  GPSHandle = osThreadNew(StartGPS, NULL, &GPS_attributes);
 80041f8:	4a19      	ldr	r2, [pc, #100]	@ (8004260 <main+0x470>)
  SpiFlashHandle = osThreadNew(StartSpiFlash, NULL, &SpiFlash_attributes);
 80041fa:	6018      	str	r0, [r3, #0]
  GPSHandle = osThreadNew(StartGPS, NULL, &GPS_attributes);
 80041fc:	4621      	mov	r1, r4
 80041fe:	4819      	ldr	r0, [pc, #100]	@ (8004264 <main+0x474>)
 8004200:	f004 fc84 	bl	8008b0c <osThreadNew>
 8004204:	4b18      	ldr	r3, [pc, #96]	@ (8004268 <main+0x478>)
  RFIDHandle = osThreadNew(StartRFID, NULL, &RFID_attributes);
 8004206:	4a19      	ldr	r2, [pc, #100]	@ (800426c <main+0x47c>)
  GPSHandle = osThreadNew(StartGPS, NULL, &GPS_attributes);
 8004208:	6018      	str	r0, [r3, #0]
  RFIDHandle = osThreadNew(StartRFID, NULL, &RFID_attributes);
 800420a:	4621      	mov	r1, r4
 800420c:	4818      	ldr	r0, [pc, #96]	@ (8004270 <main+0x480>)
 800420e:	f004 fc7d 	bl	8008b0c <osThreadNew>
 8004212:	4b18      	ldr	r3, [pc, #96]	@ (8004274 <main+0x484>)
  GSMHandle = osThreadNew(StartGSM, NULL, &GSM_attributes);
 8004214:	4a18      	ldr	r2, [pc, #96]	@ (8004278 <main+0x488>)
  RFIDHandle = osThreadNew(StartRFID, NULL, &RFID_attributes);
 8004216:	6018      	str	r0, [r3, #0]
  GSMHandle = osThreadNew(StartGSM, NULL, &GSM_attributes);
 8004218:	4621      	mov	r1, r4
 800421a:	4818      	ldr	r0, [pc, #96]	@ (800427c <main+0x48c>)
 800421c:	f004 fc76 	bl	8008b0c <osThreadNew>
 8004220:	4b17      	ldr	r3, [pc, #92]	@ (8004280 <main+0x490>)
 8004222:	6018      	str	r0, [r3, #0]
  osKernelStart();
 8004224:	f004 fc52 	bl	8008acc <osKernelStart>
  while (1)
 8004228:	e7fe      	b.n	8004228 <main+0x438>
 800422a:	bf00      	nop
 800422c:	200071f0 	.word	0x200071f0
 8004230:	50000400 	.word	0x50000400
 8004234:	20007080 	.word	0x20007080
 8004238:	40003800 	.word	0x40003800
 800423c:	08012084 	.word	0x08012084
 8004240:	20003ca8 	.word	0x20003ca8
 8004244:	0801206c 	.word	0x0801206c
 8004248:	20003b4c 	.word	0x20003b4c
 800424c:	08012054 	.word	0x08012054
 8004250:	200022f8 	.word	0x200022f8
 8004254:	08012108 	.word	0x08012108
 8004258:	08005181 	.word	0x08005181
 800425c:	20006dcc 	.word	0x20006dcc
 8004260:	080120e4 	.word	0x080120e4
 8004264:	080011e1 	.word	0x080011e1
 8004268:	2000556c 	.word	0x2000556c
 800426c:	080120c0 	.word	0x080120c0
 8004270:	08003ab9 	.word	0x08003ab9
 8004274:	20004d0c 	.word	0x20004d0c
 8004278:	0801209c 	.word	0x0801209c
 800427c:	0800296d 	.word	0x0800296d
 8004280:	20004d08 	.word	0x20004d08

08004284 <HAL_TIM_PeriodElapsedCallback>:
  if (htim->Instance == TIM2) {
 8004284:	6803      	ldr	r3, [r0, #0]
 8004286:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800428a:	d101      	bne.n	8004290 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
 800428c:	f001 bc10 	b.w	8005ab0 <HAL_IncTick>
}
 8004290:	4770      	bx	lr

08004292 <Error_Handler>:
 8004292:	b672      	cpsid	i
  while (1)
 8004294:	e7fe      	b.n	8004294 <Error_Handler+0x2>
	...

08004298 <W25_ReadStatusReg1>:
	W25_CS_DISABLE();
	W25_DelayWhileBusy(CHIP_ERASE_TIMEOUT);
	return retval;
} // W25_ChipErase()

uint8_t W25_ReadStatusReg1(void) {
 8004298:	b513      	push	{r0, r1, r4, lr}
	uint8_t cmd = W25_CMD_READ_STATUS_REG_1;
 800429a:	2305      	movs	r3, #5
	uint8_t status_reg1;
	int retval;
	W25_CS_ENABLE(); // Drive Winbond chip select, /CS low
 800429c:	2200      	movs	r2, #0
 800429e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80042a2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
	uint8_t cmd = W25_CMD_READ_STATUS_REG_1;
 80042a6:	f88d 3006 	strb.w	r3, [sp, #6]
	W25_CS_ENABLE(); // Drive Winbond chip select, /CS low
 80042aa:	f002 fb4d 	bl	8006948 <HAL_GPIO_WritePin>
	retval = HAL_SPI_Transmit(&hspi1, &cmd , sizeof(cmd), TIMEOUT); // Send Read Status Reg 1 command
 80042ae:	4810      	ldr	r0, [pc, #64]	@ (80042f0 <W25_ReadStatusReg1+0x58>)
 80042b0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80042b4:	2201      	movs	r2, #1
 80042b6:	f10d 0106 	add.w	r1, sp, #6
 80042ba:	f003 fad8 	bl	800786e <HAL_SPI_Transmit>
	if(retval == HAL_OK)
 80042be:	4604      	mov	r4, r0
 80042c0:	b940      	cbnz	r0, 80042d4 <W25_ReadStatusReg1+0x3c>
	retval = HAL_SPI_Receive(&hspi1, &status_reg1, sizeof(status_reg1), TIMEOUT);
 80042c2:	480b      	ldr	r0, [pc, #44]	@ (80042f0 <W25_ReadStatusReg1+0x58>)
 80042c4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80042c8:	2201      	movs	r2, #1
 80042ca:	f10d 0107 	add.w	r1, sp, #7
 80042ce:	f003 fcc8 	bl	8007c62 <HAL_SPI_Receive>
 80042d2:	4604      	mov	r4, r0
	W25_CS_DISABLE();
 80042d4:	2201      	movs	r2, #1
 80042d6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80042da:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80042de:	f002 fb33 	bl	8006948 <HAL_GPIO_WritePin>
	return retval == HAL_OK ? status_reg1:0xFF; // return 0xFF if error
 80042e2:	b91c      	cbnz	r4, 80042ec <W25_ReadStatusReg1+0x54>
 80042e4:	f89d 0007 	ldrb.w	r0, [sp, #7]
} // W25_ReadStatusReg1()
 80042e8:	b002      	add	sp, #8
 80042ea:	bd10      	pop	{r4, pc}
	return retval == HAL_OK ? status_reg1:0xFF; // return 0xFF if error
 80042ec:	20ff      	movs	r0, #255	@ 0xff
 80042ee:	e7fb      	b.n	80042e8 <W25_ReadStatusReg1+0x50>
 80042f0:	200070e4 	.word	0x200070e4

080042f4 <W25_Busy>:

int W25_Busy(void)
{
 80042f4:	b508      	push	{r3, lr}
	return (W25_ReadStatusReg1() & W25_STATUS1_BUSY);
 80042f6:	f7ff ffcf 	bl	8004298 <W25_ReadStatusReg1>
}
 80042fa:	f000 0001 	and.w	r0, r0, #1
 80042fe:	bd08      	pop	{r3, pc}

08004300 <W25_DelayWhileBusy>:

int W25_DelayWhileBusy(uint32_t msTimeout)
{
 8004300:	b570      	push	{r4, r5, r6, lr}
 8004302:	4605      	mov	r5, r0
	uint32_t initial_count = HAL_GetTick();
 8004304:	f001 fbe0 	bl	8005ac8 <HAL_GetTick>
 8004308:	4606      	mov	r6, r0
	int busy;
	uint32_t deltaticks;
	uint32_t count = 0;
	do {
	busy = W25_Busy();
 800430a:	f7ff fff3 	bl	80042f4 <W25_Busy>
 800430e:	4604      	mov	r4, r0
	deltaticks = HAL_GetTick() - initial_count;
 8004310:	f001 fbda 	bl	8005ac8 <HAL_GetTick>
 8004314:	1b83      	subs	r3, r0, r6
	count++;
	} while(busy && deltaticks < msTimeout);
 8004316:	b114      	cbz	r4, 800431e <W25_DelayWhileBusy+0x1e>
 8004318:	42ab      	cmp	r3, r5
 800431a:	d3f6      	bcc.n	800430a <W25_DelayWhileBusy+0xa>
	int retval = busy ? HAL_TIMEOUT:HAL_OK;
 800431c:	2403      	movs	r4, #3
	return retval;
}
 800431e:	4620      	mov	r0, r4
 8004320:	bd70      	pop	{r4, r5, r6, pc}

08004322 <W25_Reset>:
void W25_Reset(){
 8004322:	b508      	push	{r3, lr}
	W25_CS_ENABLE();
 8004324:	2200      	movs	r2, #0
 8004326:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800432a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800432e:	f002 fb0b 	bl	8006948 <HAL_GPIO_WritePin>
	W25_CS_DISABLE();
 8004332:	2201      	movs	r2, #1
 8004334:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004338:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800433c:	f002 fb04 	bl	8006948 <HAL_GPIO_WritePin>
	W25_CS_ENABLE();
 8004340:	2200      	movs	r2, #0
 8004342:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004346:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800434a:	f002 fafd 	bl	8006948 <HAL_GPIO_WritePin>
	W25_CS_DISABLE();
 800434e:	2201      	movs	r2, #1
 8004350:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004354:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004358:	f002 faf6 	bl	8006948 <HAL_GPIO_WritePin>
	W25_CS_ENABLE();
 800435c:	2200      	movs	r2, #0
 800435e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004362:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004366:	f002 faef 	bl	8006948 <HAL_GPIO_WritePin>
	W25_CS_DISABLE();
}
 800436a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	W25_CS_DISABLE();
 800436e:	2201      	movs	r2, #1
 8004370:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004374:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004378:	f002 bae6 	b.w	8006948 <HAL_GPIO_WritePin>

0800437c <W25_ReadJedecID>:

int W25_ReadJedecID() {
 800437c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800437e:	b08d      	sub	sp, #52	@ 0x34
	int retval;
	uint8_t idcmd = W25_CMD_READ_JEDEC_ID;
 8004380:	239f      	movs	r3, #159	@ 0x9f
	uint8_t jdec_id[4];
	char result[11];
	W25_CS_ENABLE(); // Drive Winbond chip select, /CS low
 8004382:	2200      	movs	r2, #0
 8004384:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004388:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
	uint8_t idcmd = W25_CMD_READ_JEDEC_ID;
 800438c:	f88d 300b 	strb.w	r3, [sp, #11]
	W25_CS_ENABLE(); // Drive Winbond chip select, /CS low
 8004390:	f002 fada 	bl	8006948 <HAL_GPIO_WritePin>
	retval = HAL_SPI_TransmitReceive(&hspi1, &idcmd, jdec_id, 4, 4000);
 8004394:	f44f 637a 	mov.w	r3, #4000	@ 0xfa0
 8004398:	9300      	str	r3, [sp, #0]
 800439a:	aa03      	add	r2, sp, #12
 800439c:	2304      	movs	r3, #4
 800439e:	f10d 010b 	add.w	r1, sp, #11
 80043a2:	4820      	ldr	r0, [pc, #128]	@ (8004424 <W25_ReadJedecID+0xa8>)
 80043a4:	f003 fb2d 	bl	8007a02 <HAL_SPI_TransmitReceive>
	W25_CS_DISABLE();
 80043a8:	2201      	movs	r2, #1
	retval = HAL_SPI_TransmitReceive(&hspi1, &idcmd, jdec_id, 4, 4000);
 80043aa:	4605      	mov	r5, r0
	W25_CS_DISABLE();
 80043ac:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80043b0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80043b4:	f002 fac8 	bl	8006948 <HAL_GPIO_WritePin>
	char spi_flash_intro[] = "Flash ID received: ";
 80043b8:	4b1b      	ldr	r3, [pc, #108]	@ (8004428 <W25_ReadJedecID+0xac>)
 80043ba:	aa07      	add	r2, sp, #28
 80043bc:	f103 0710 	add.w	r7, r3, #16
 80043c0:	4616      	mov	r6, r2
 80043c2:	6818      	ldr	r0, [r3, #0]
 80043c4:	6859      	ldr	r1, [r3, #4]
 80043c6:	4614      	mov	r4, r2
 80043c8:	c403      	stmia	r4!, {r0, r1}
 80043ca:	3308      	adds	r3, #8
 80043cc:	42bb      	cmp	r3, r7
 80043ce:	4622      	mov	r2, r4
 80043d0:	d1f7      	bne.n	80043c2 <W25_ReadJedecID+0x46>
 80043d2:	6818      	ldr	r0, [r3, #0]
 80043d4:	6020      	str	r0, [r4, #0]
	HAL_UART_Transmit(&huart1, (uint8_t*) spi_flash_intro, strlen(spi_flash_intro), 1000);
 80043d6:	4630      	mov	r0, r6
 80043d8:	f7fb ff5a 	bl	8000290 <strlen>
 80043dc:	4631      	mov	r1, r6
 80043de:	b282      	uxth	r2, r0
 80043e0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80043e4:	4811      	ldr	r0, [pc, #68]	@ (800442c <W25_ReadJedecID+0xb0>)
 80043e6:	f004 fa11 	bl	800880c <HAL_UART_Transmit>

	sprintf(result, "%02X, %02X, %02X", jdec_id[1], jdec_id[2], jdec_id[3]);
 80043ea:	f89d 300f 	ldrb.w	r3, [sp, #15]
 80043ee:	f89d 200d 	ldrb.w	r2, [sp, #13]
 80043f2:	9300      	str	r3, [sp, #0]
 80043f4:	490e      	ldr	r1, [pc, #56]	@ (8004430 <W25_ReadJedecID+0xb4>)
 80043f6:	f89d 300e 	ldrb.w	r3, [sp, #14]
 80043fa:	a804      	add	r0, sp, #16
 80043fc:	f008 f87e 	bl	800c4fc <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*) result, 11, 1000);
 8004400:	a904      	add	r1, sp, #16
 8004402:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004406:	220b      	movs	r2, #11
 8004408:	4808      	ldr	r0, [pc, #32]	@ (800442c <W25_ReadJedecID+0xb0>)
 800440a:	f004 f9ff 	bl	800880c <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, (uint8_t*)"\n", 1, 1000);
 800440e:	4909      	ldr	r1, [pc, #36]	@ (8004434 <W25_ReadJedecID+0xb8>)
 8004410:	4806      	ldr	r0, [pc, #24]	@ (800442c <W25_ReadJedecID+0xb0>)
 8004412:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004416:	2201      	movs	r2, #1
 8004418:	f004 f9f8 	bl	800880c <HAL_UART_Transmit>
	return retval;
} // W25_ReadJEDECID()
 800441c:	4628      	mov	r0, r5
 800441e:	b00d      	add	sp, #52	@ 0x34
 8004420:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004422:	bf00      	nop
 8004424:	200070e4 	.word	0x200070e4
 8004428:	0801213d 	.word	0x0801213d
 800442c:	20006fac 	.word	0x20006fac
 8004430:	0801212c 	.word	0x0801212c
 8004434:	08011a81 	.word	0x08011a81

08004438 <W25_WriteEnable>:

	return retval;
} // W25_ReadUniqueID()


int W25_WriteEnable(void) {
 8004438:	b513      	push	{r0, r1, r4, lr}
	uint8_t cmd = W25_CMD_WRITE_ENABLE;
 800443a:	2306      	movs	r3, #6
	W25_CS_ENABLE(); // Drive Winbond chip select, /CS low
 800443c:	2200      	movs	r2, #0
 800443e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004442:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
	uint8_t cmd = W25_CMD_WRITE_ENABLE;
 8004446:	f88d 3007 	strb.w	r3, [sp, #7]
	W25_CS_ENABLE(); // Drive Winbond chip select, /CS low
 800444a:	f002 fa7d 	bl	8006948 <HAL_GPIO_WritePin>
	int retval = HAL_SPI_Transmit(&hspi1, &cmd , sizeof(cmd), TIMEOUT); // Send Write Enable command
 800444e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004452:	f10d 0107 	add.w	r1, sp, #7
 8004456:	2201      	movs	r2, #1
 8004458:	4806      	ldr	r0, [pc, #24]	@ (8004474 <W25_WriteEnable+0x3c>)
 800445a:	f003 fa08 	bl	800786e <HAL_SPI_Transmit>
	W25_CS_DISABLE();
 800445e:	2201      	movs	r2, #1
	int retval = HAL_SPI_Transmit(&hspi1, &cmd , sizeof(cmd), TIMEOUT); // Send Write Enable command
 8004460:	4604      	mov	r4, r0
	W25_CS_DISABLE();
 8004462:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004466:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800446a:	f002 fa6d 	bl	8006948 <HAL_GPIO_WritePin>
	return retval;
} // W25_WriteEnable()
 800446e:	4620      	mov	r0, r4
 8004470:	b002      	add	sp, #8
 8004472:	bd10      	pop	{r4, pc}
 8004474:	200070e4 	.word	0x200070e4

08004478 <W25_SectorErase>:

int W25_SectorErase(uint32_t address)
{
 8004478:	b513      	push	{r0, r1, r4, lr}
	int retval;
	uint8_t cmdaddr[4] = {W25_CMD_SECTOR_ERASE,address>>16,address>>8,address};
 800447a:	2320      	movs	r3, #32
 800447c:	f88d 3004 	strb.w	r3, [sp, #4]
 8004480:	0c03      	lsrs	r3, r0, #16
 8004482:	ba40      	rev16	r0, r0
 8004484:	f88d 3005 	strb.w	r3, [sp, #5]
 8004488:	f8ad 0006 	strh.w	r0, [sp, #6]
	W25_WriteEnable(); // Make sure we can write...
 800448c:	f7ff ffd4 	bl	8004438 <W25_WriteEnable>
	W25_CS_ENABLE(); // Drive Winbond chip select, /CS low
 8004490:	2200      	movs	r2, #0
 8004492:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004496:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800449a:	f002 fa55 	bl	8006948 <HAL_GPIO_WritePin>
	retval = HAL_SPI_Transmit(&hspi1, cmdaddr , sizeof(cmdaddr ), TIMEOUT); // Send Sector Erase command with address
 800449e:	2204      	movs	r2, #4
 80044a0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80044a4:	eb0d 0102 	add.w	r1, sp, r2
 80044a8:	4808      	ldr	r0, [pc, #32]	@ (80044cc <W25_SectorErase+0x54>)
 80044aa:	f003 f9e0 	bl	800786e <HAL_SPI_Transmit>
	W25_CS_DISABLE();
 80044ae:	2201      	movs	r2, #1
	retval = HAL_SPI_Transmit(&hspi1, cmdaddr , sizeof(cmdaddr ), TIMEOUT); // Send Sector Erase command with address
 80044b0:	4604      	mov	r4, r0
	W25_CS_DISABLE();
 80044b2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80044b6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80044ba:	f002 fa45 	bl	8006948 <HAL_GPIO_WritePin>
	W25_DelayWhileBusy(SECTOR_ERASE_TIMEOUT);
 80044be:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80044c2:	f7ff ff1d 	bl	8004300 <W25_DelayWhileBusy>
	return retval;
} // W25_SectorErase()
 80044c6:	4620      	mov	r0, r4
 80044c8:	b002      	add	sp, #8
 80044ca:	bd10      	pop	{r4, pc}
 80044cc:	200070e4 	.word	0x200070e4

080044d0 <W25_PageProgram>:

int W25_PageProgram(uint32_t address, uint8_t *buf, uint32_t count)
{
 80044d0:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80044d4:	4606      	mov	r6, r0
 80044d6:	4688      	mov	r8, r1
 80044d8:	4617      	mov	r7, r2
	int retval = HAL_OK;
	W25_WriteEnable(); // Make sure we can write...
 80044da:	f7ff ffad 	bl	8004438 <W25_WriteEnable>
	while(count) {
		uint8_t cmdaddr[4] = {W25_CMD_PAGE_PROGRAM,address>>16,address>>8,address};
		uint32_t space_left_in_page = 0x100 - (address & 0xFF);
		uint32_t count_this_pass = count <= space_left_in_page? count:space_left_in_page;
		W25_CS_ENABLE(); // Drive Winbond chip select, /CS low
		retval = HAL_SPI_Transmit(&hspi1, cmdaddr , sizeof(cmdaddr ), TIMEOUT); // Send Page Program command with address
 80044de:	f8df a080 	ldr.w	sl, [pc, #128]	@ 8004560 <W25_PageProgram+0x90>
	int retval = HAL_OK;
 80044e2:	2400      	movs	r4, #0
		uint8_t cmdaddr[4] = {W25_CMD_PAGE_PROGRAM,address>>16,address>>8,address};
 80044e4:	f04f 0902 	mov.w	r9, #2
	while(count) {
 80044e8:	b91f      	cbnz	r7, 80044f2 <W25_PageProgram+0x22>
		address += count_this_pass;
		buf += count_this_pass;
		W25_DelayWhileBusy(PAGE_PROGRAM_TIMEOUT);
	}
	return retval;
} 
 80044ea:	4620      	mov	r0, r4
 80044ec:	b002      	add	sp, #8
 80044ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		uint32_t space_left_in_page = 0x100 - (address & 0xFF);
 80044f2:	b2f5      	uxtb	r5, r6
		uint8_t cmdaddr[4] = {W25_CMD_PAGE_PROGRAM,address>>16,address>>8,address};
 80044f4:	0c33      	lsrs	r3, r6, #16
		uint32_t space_left_in_page = 0x100 - (address & 0xFF);
 80044f6:	f5c5 7580 	rsb	r5, r5, #256	@ 0x100
		uint32_t count_this_pass = count <= space_left_in_page? count:space_left_in_page;
 80044fa:	42bd      	cmp	r5, r7
		uint8_t cmdaddr[4] = {W25_CMD_PAGE_PROGRAM,address>>16,address>>8,address};
 80044fc:	f88d 3005 	strb.w	r3, [sp, #5]
		W25_CS_ENABLE(); // Drive Winbond chip select, /CS low
 8004500:	f04f 0200 	mov.w	r2, #0
		uint8_t cmdaddr[4] = {W25_CMD_PAGE_PROGRAM,address>>16,address>>8,address};
 8004504:	ba73      	rev16	r3, r6
		W25_CS_ENABLE(); // Drive Winbond chip select, /CS low
 8004506:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800450a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
		uint8_t cmdaddr[4] = {W25_CMD_PAGE_PROGRAM,address>>16,address>>8,address};
 800450e:	f8ad 3006 	strh.w	r3, [sp, #6]
		uint32_t count_this_pass = count <= space_left_in_page? count:space_left_in_page;
 8004512:	bf28      	it	cs
 8004514:	463d      	movcs	r5, r7
		uint8_t cmdaddr[4] = {W25_CMD_PAGE_PROGRAM,address>>16,address>>8,address};
 8004516:	f88d 9004 	strb.w	r9, [sp, #4]
		W25_CS_ENABLE(); // Drive Winbond chip select, /CS low
 800451a:	f002 fa15 	bl	8006948 <HAL_GPIO_WritePin>
		retval = HAL_SPI_Transmit(&hspi1, cmdaddr , sizeof(cmdaddr ), TIMEOUT); // Send Page Program command with address
 800451e:	2204      	movs	r2, #4
 8004520:	480f      	ldr	r0, [pc, #60]	@ (8004560 <W25_PageProgram+0x90>)
 8004522:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004526:	eb0d 0102 	add.w	r1, sp, r2
 800452a:	f003 f9a0 	bl	800786e <HAL_SPI_Transmit>
		if(retval == HAL_OK)
 800452e:	4604      	mov	r4, r0
 8004530:	b938      	cbnz	r0, 8004542 <W25_PageProgram+0x72>
		  retval = HAL_SPI_Transmit(&hspi1, buf, count_this_pass, TIMEOUT); // Write page data
 8004532:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004536:	b2aa      	uxth	r2, r5
 8004538:	4641      	mov	r1, r8
 800453a:	4650      	mov	r0, sl
 800453c:	f003 f997 	bl	800786e <HAL_SPI_Transmit>
 8004540:	4604      	mov	r4, r0
		W25_CS_DISABLE();
 8004542:	2201      	movs	r2, #1
 8004544:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004548:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800454c:	f002 f9fc 	bl	8006948 <HAL_GPIO_WritePin>
		W25_DelayWhileBusy(PAGE_PROGRAM_TIMEOUT);
 8004550:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
		count -= count_this_pass;
 8004554:	1b7f      	subs	r7, r7, r5
		address += count_this_pass;
 8004556:	442e      	add	r6, r5
		buf += count_this_pass;
 8004558:	44a8      	add	r8, r5
		W25_DelayWhileBusy(PAGE_PROGRAM_TIMEOUT);
 800455a:	f7ff fed1 	bl	8004300 <W25_DelayWhileBusy>
 800455e:	e7c3      	b.n	80044e8 <W25_PageProgram+0x18>
 8004560:	200070e4 	.word	0x200070e4

08004564 <W25_ReadData>:

// Winbond 8.2.6 Read Data (03h)
// The only limit for quantity of data is memory / device size
int W25_ReadData(uint32_t address, uint8_t *buf, int bufSize)
{
 8004564:	b573      	push	{r0, r1, r4, r5, r6, lr}
	int retval;
	uint8_t cmdaddr[4] = {W25_CMD_READ_DATA,address>>16,address>>8,address};
 8004566:	2303      	movs	r3, #3
 8004568:	f88d 3004 	strb.w	r3, [sp, #4]
 800456c:	0c03      	lsrs	r3, r0, #16
 800456e:	ba40      	rev16	r0, r0
 8004570:	f8ad 0006 	strh.w	r0, [sp, #6]
{
 8004574:	460d      	mov	r5, r1
	//printf("+%s(Addr 0x%06X, buf 0x%08X, Len 0x%04X)\r\n",__func__,address,buf,bufSize);
	W25_CS_ENABLE(); // Drive Winbond chip select, /CS low
 8004576:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800457a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
{
 800457e:	4616      	mov	r6, r2
	W25_CS_ENABLE(); // Drive Winbond chip select, /CS low
 8004580:	2200      	movs	r2, #0
	uint8_t cmdaddr[4] = {W25_CMD_READ_DATA,address>>16,address>>8,address};
 8004582:	f88d 3005 	strb.w	r3, [sp, #5]
	W25_CS_ENABLE(); // Drive Winbond chip select, /CS low
 8004586:	f002 f9df 	bl	8006948 <HAL_GPIO_WritePin>
	retval = HAL_SPI_Transmit(&hspi1, cmdaddr , sizeof(cmdaddr), 500); // Send Read Data command with address
 800458a:	2204      	movs	r2, #4
 800458c:	480d      	ldr	r0, [pc, #52]	@ (80045c4 <W25_ReadData+0x60>)
 800458e:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8004592:	eb0d 0102 	add.w	r1, sp, r2
 8004596:	f003 f96a 	bl	800786e <HAL_SPI_Transmit>
	if(retval != HAL_OK) {
 800459a:	4604      	mov	r4, r0
 800459c:	b978      	cbnz	r0, 80045be <W25_ReadData+0x5a>
		return retval;
	}
	//memset(buf,0,bufSize); // Buffer is transmitted during receive
	retval = HAL_SPI_Receive(&hspi1, buf, bufSize, 2000); // need longer time-outs when using slow SPI clock
 800459e:	4809      	ldr	r0, [pc, #36]	@ (80045c4 <W25_ReadData+0x60>)
 80045a0:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80045a4:	b2b2      	uxth	r2, r6
 80045a6:	4629      	mov	r1, r5
 80045a8:	f003 fb5b 	bl	8007c62 <HAL_SPI_Receive>
	if(retval != HAL_OK)
 80045ac:	4604      	mov	r4, r0
 80045ae:	b130      	cbz	r0, 80045be <W25_ReadData+0x5a>

	W25_CS_DISABLE();
 80045b0:	2201      	movs	r2, #1
 80045b2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80045b6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80045ba:	f002 f9c5 	bl	8006948 <HAL_GPIO_WritePin>

	return retval;
} // W25_ReadData()
 80045be:	4620      	mov	r0, r4
 80045c0:	b002      	add	sp, #8
 80045c2:	bd70      	pop	{r4, r5, r6, pc}
 80045c4:	200070e4 	.word	0x200070e4

080045c8 <IsPageValid>:


// Function to check if a page contains valid data
int IsPageValid(uint8_t *page) {
 80045c8:	b510      	push	{r4, lr}
    char *last_semicolon = strrchr((char *)page, ';'); // Find the last semicolon
 80045ca:	213b      	movs	r1, #59	@ 0x3b
 80045cc:	f008 f898 	bl	800c700 <strrchr>
    if (!last_semicolon) {
 80045d0:	4604      	mov	r4, r0
 80045d2:	b1a0      	cbz	r0, 80045fe <IsPageValid+0x36>
        return 0; // No semicolon found, invalid page
    }

    char *last_param = last_semicolon + 1; // Last parameter starts after the last semicolon
    size_t len = strlen(last_param);
 80045d4:	3001      	adds	r0, #1
 80045d6:	f7fb fe5b 	bl	8000290 <strlen>

    // Ensure the last parameter is exactly 6 characters and numeric
    if (len < 6) {
 80045da:	2805      	cmp	r0, #5
 80045dc:	d90f      	bls.n	80045fe <IsPageValid+0x36>
 80045de:	1da2      	adds	r2, r4, #6
        return 0; // Too short to be valid
    }

    for (int i = 0; i < 6; ++i) {
        if ((last_param[i] < '0' || last_param[i] > '9' ) &&
 80045e0:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80045e4:	f1a3 0130 	sub.w	r1, r3, #48	@ 0x30
 80045e8:	2909      	cmp	r1, #9
 80045ea:	d904      	bls.n	80045f6 <IsPageValid+0x2e>
 80045ec:	f023 0320 	bic.w	r3, r3, #32
 80045f0:	3b41      	subs	r3, #65	@ 0x41
 80045f2:	2b05      	cmp	r3, #5
 80045f4:	d803      	bhi.n	80045fe <IsPageValid+0x36>
    for (int i = 0; i < 6; ++i) {
 80045f6:	4294      	cmp	r4, r2
 80045f8:	d1f2      	bne.n	80045e0 <IsPageValid+0x18>
				(last_param[i] < 'A' || last_param[i] > 'F')) {
            return 0; // Not numeric
        }
    }

    return 1; // Page contains valid data
 80045fa:	2001      	movs	r0, #1
}
 80045fc:	bd10      	pop	{r4, pc}
        return 0; // No semicolon found, invalid page
 80045fe:	2000      	movs	r0, #0
 8004600:	e7fc      	b.n	80045fc <IsPageValid+0x34>

08004602 <UpdatePageAddress>:


// Function to update the last parameter of the page (address)
void UpdatePageAddress(uint8_t *page, uint32_t new_address) {
 8004602:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004604:	4604      	mov	r4, r0
    char new_address_str[10];
    Uint32ToHex(new_address, new_address_str, 8);
 8004606:	2208      	movs	r2, #8
void UpdatePageAddress(uint8_t *page, uint32_t new_address) {
 8004608:	4608      	mov	r0, r1
    Uint32ToHex(new_address, new_address_str, 8);
 800460a:	a901      	add	r1, sp, #4
 800460c:	f001 f943 	bl	8005896 <Uint32ToHex>
    memcpy(page + strlen((char *)page) - 6, new_address_str+2, 6); // Overwrite last 6 characters
 8004610:	4620      	mov	r0, r4
 8004612:	f7fb fe3d 	bl	8000290 <strlen>
 8004616:	3806      	subs	r0, #6
 8004618:	f8dd 2006 	ldr.w	r2, [sp, #6]
 800461c:	5022      	str	r2, [r4, r0]
 800461e:	1823      	adds	r3, r4, r0
 8004620:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 8004624:	809a      	strh	r2, [r3, #4]
}
 8004626:	b004      	add	sp, #16
 8004628:	bd10      	pop	{r4, pc}
	...

0800462c <W25_ShiftLeftFlashDataByPage>:

int W25_ShiftLeftFlashDataByPage(void) {
 800462c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint32_t current_sector_start = FLASH_START_ADDRESS;

    Debug_printf("\n\n ------------------------------ IN SHIFT LEFT: ----------------------------\n\n");
 8004630:	488e      	ldr	r0, [pc, #568]	@ (800486c <W25_ShiftLeftFlashDataByPage+0x240>)
int W25_ShiftLeftFlashDataByPage(void) {
 8004632:	b08f      	sub	sp, #60	@ 0x3c
    Debug_printf("\n\n ------------------------------ IN SHIFT LEFT: ----------------------------\n\n");
 8004634:	f001 f944 	bl	80058c0 <Debug_printf>
    uint32_t current_sector_start = FLASH_START_ADDRESS;
 8004638:	f44f 5640 	mov.w	r6, #12288	@ 0x3000
    while (current_sector_start < FLASH_END_ADDRESS) {
        uint32_t next_sector_start = current_sector_start + SECTOR_SIZE;

        W25_Reset();
 800463c:	f7ff fe71 	bl	8004322 <W25_Reset>
        // Step 1: Read the entire current sector into the buffer
        if (W25_ReadData(current_sector_start, current_sector_buffer, SECTOR_SIZE) != HAL_OK) {
 8004640:	498b      	ldr	r1, [pc, #556]	@ (8004870 <W25_ShiftLeftFlashDataByPage+0x244>)
 8004642:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8004646:	4630      	mov	r0, r6
        uint32_t next_sector_start = current_sector_start + SECTOR_SIZE;
 8004648:	f506 5980 	add.w	r9, r6, #4096	@ 0x1000
        if (W25_ReadData(current_sector_start, current_sector_buffer, SECTOR_SIZE) != HAL_OK) {
 800464c:	f7ff ff8a 	bl	8004564 <W25_ReadData>
 8004650:	b138      	cbz	r0, 8004662 <W25_ShiftLeftFlashDataByPage+0x36>
        	Debug_printf("READING ALL THE SECTOR: ERROR\n");
 8004652:	4888      	ldr	r0, [pc, #544]	@ (8004874 <W25_ShiftLeftFlashDataByPage+0x248>)

        // Step 2: Read the first page of the next sector (if exists)
        if (next_sector_start < FLASH_END_ADDRESS) {
        	W25_Reset();
            if (W25_ReadData(next_sector_start, next_page_buffer, PAGE_SIZE) != HAL_OK) {
            	Debug_printf("\nREADING FIRST PAGE OF THE NEXT SECTOR: ERROR\n");
 8004654:	f001 f934 	bl	80058c0 <Debug_printf>
            return HAL_ERROR; // Exit if read fails
 8004658:	2401      	movs	r4, #1
        current_sector_start = next_sector_start;
    }

    Debug_printf("\n\n ----------------------END OF SHIFT LEFT -----------------------------\n\n");
    return HAL_OK;
}
 800465a:	4620      	mov	r0, r4
 800465c:	b00f      	add	sp, #60	@ 0x3c
 800465e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        	char spi_flash_data_intro[] = "\nFirst page of Flash DATA at Reading All Sector: \n";
 8004662:	4b85      	ldr	r3, [pc, #532]	@ (8004878 <W25_ShiftLeftFlashDataByPage+0x24c>)
 8004664:	aa01      	add	r2, sp, #4
 8004666:	f103 0730 	add.w	r7, r3, #48	@ 0x30
 800466a:	4614      	mov	r4, r2
 800466c:	6818      	ldr	r0, [r3, #0]
 800466e:	6859      	ldr	r1, [r3, #4]
 8004670:	4615      	mov	r5, r2
 8004672:	c503      	stmia	r5!, {r0, r1}
 8004674:	3308      	adds	r3, #8
 8004676:	42bb      	cmp	r3, r7
 8004678:	462a      	mov	r2, r5
 800467a:	d1f7      	bne.n	800466c <W25_ShiftLeftFlashDataByPage+0x40>
 800467c:	8819      	ldrh	r1, [r3, #0]
 800467e:	789b      	ldrb	r3, [r3, #2]
 8004680:	8029      	strh	r1, [r5, #0]
 8004682:	70ab      	strb	r3, [r5, #2]
			HAL_UART_Transmit(&huart1, (uint8_t*) spi_flash_data_intro, strlen(spi_flash_data_intro), 1000);
 8004684:	4620      	mov	r0, r4
 8004686:	f7fb fe03 	bl	8000290 <strlen>
 800468a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800468e:	b282      	uxth	r2, r0
 8004690:	4621      	mov	r1, r4
 8004692:	487a      	ldr	r0, [pc, #488]	@ (800487c <W25_ShiftLeftFlashDataByPage+0x250>)
 8004694:	f004 f8ba 	bl	800880c <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart1, current_sector_buffer, 128, 1000);
 8004698:	4975      	ldr	r1, [pc, #468]	@ (8004870 <W25_ShiftLeftFlashDataByPage+0x244>)
 800469a:	4878      	ldr	r0, [pc, #480]	@ (800487c <W25_ShiftLeftFlashDataByPage+0x250>)
 800469c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80046a0:	2280      	movs	r2, #128	@ 0x80
 80046a2:	f004 f8b3 	bl	800880c <HAL_UART_Transmit>
			Debug_printf("\n\n");
 80046a6:	4876      	ldr	r0, [pc, #472]	@ (8004880 <W25_ShiftLeftFlashDataByPage+0x254>)
 80046a8:	f001 f90a 	bl	80058c0 <Debug_printf>
        if (next_sector_start < FLASH_END_ADDRESS) {
 80046ac:	f5b9 4fa0 	cmp.w	r9, #20480	@ 0x5000
 80046b0:	d02e      	beq.n	8004710 <W25_ShiftLeftFlashDataByPage+0xe4>
        	W25_Reset();
 80046b2:	f7ff fe36 	bl	8004322 <W25_Reset>
            if (W25_ReadData(next_sector_start, next_page_buffer, PAGE_SIZE) != HAL_OK) {
 80046b6:	4973      	ldr	r1, [pc, #460]	@ (8004884 <W25_ShiftLeftFlashDataByPage+0x258>)
 80046b8:	2280      	movs	r2, #128	@ 0x80
 80046ba:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 80046be:	f7ff ff51 	bl	8004564 <W25_ReadData>
 80046c2:	b108      	cbz	r0, 80046c8 <W25_ShiftLeftFlashDataByPage+0x9c>
            	Debug_printf("\nREADING FIRST PAGE OF THE NEXT SECTOR: ERROR\n");
 80046c4:	4870      	ldr	r0, [pc, #448]	@ (8004888 <W25_ShiftLeftFlashDataByPage+0x25c>)
 80046c6:	e7c5      	b.n	8004654 <W25_ShiftLeftFlashDataByPage+0x28>
            	char spi_flash_data_intro[] = "First page of Flash DATA at reading NEXT SECTOR: \n";
 80046c8:	4b70      	ldr	r3, [pc, #448]	@ (800488c <W25_ShiftLeftFlashDataByPage+0x260>)
 80046ca:	4622      	mov	r2, r4
 80046cc:	f103 0730 	add.w	r7, r3, #48	@ 0x30
 80046d0:	6818      	ldr	r0, [r3, #0]
 80046d2:	6859      	ldr	r1, [r3, #4]
 80046d4:	4615      	mov	r5, r2
 80046d6:	c503      	stmia	r5!, {r0, r1}
 80046d8:	3308      	adds	r3, #8
 80046da:	42bb      	cmp	r3, r7
 80046dc:	462a      	mov	r2, r5
 80046de:	d1f7      	bne.n	80046d0 <W25_ShiftLeftFlashDataByPage+0xa4>
 80046e0:	8819      	ldrh	r1, [r3, #0]
 80046e2:	789b      	ldrb	r3, [r3, #2]
 80046e4:	8029      	strh	r1, [r5, #0]
 80046e6:	70ab      	strb	r3, [r5, #2]
				HAL_UART_Transmit(&huart1, (uint8_t*) spi_flash_data_intro, strlen(spi_flash_data_intro), 1000);
 80046e8:	4620      	mov	r0, r4
 80046ea:	f7fb fdd1 	bl	8000290 <strlen>
 80046ee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80046f2:	b282      	uxth	r2, r0
 80046f4:	4621      	mov	r1, r4
 80046f6:	4861      	ldr	r0, [pc, #388]	@ (800487c <W25_ShiftLeftFlashDataByPage+0x250>)
 80046f8:	f004 f888 	bl	800880c <HAL_UART_Transmit>
				HAL_UART_Transmit(&huart1, next_page_buffer, 128, 1000);
 80046fc:	4961      	ldr	r1, [pc, #388]	@ (8004884 <W25_ShiftLeftFlashDataByPage+0x258>)
 80046fe:	485f      	ldr	r0, [pc, #380]	@ (800487c <W25_ShiftLeftFlashDataByPage+0x250>)
 8004700:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004704:	2280      	movs	r2, #128	@ 0x80
 8004706:	f004 f881 	bl	800880c <HAL_UART_Transmit>
				Debug_printf("\n\n");
 800470a:	485d      	ldr	r0, [pc, #372]	@ (8004880 <W25_ShiftLeftFlashDataByPage+0x254>)
 800470c:	f001 f8d8 	bl	80058c0 <Debug_printf>
        for (uint32_t offset = 0; offset < SECTOR_SIZE - PAGE_SIZE; offset += PAGE_SIZE) {
 8004710:	f8df b15c 	ldr.w	fp, [pc, #348]	@ 8004870 <W25_ShiftLeftFlashDataByPage+0x244>
				HAL_UART_Transmit(&huart1, (uint8_t*) spi_flash_data_intro, strlen(spi_flash_data_intro), 1000);
 8004714:	f8df 8164 	ldr.w	r8, [pc, #356]	@ 800487c <W25_ShiftLeftFlashDataByPage+0x250>
    uint32_t current_sector_start = FLASH_START_ADDRESS;
 8004718:	465d      	mov	r5, fp
 800471a:	2700      	movs	r7, #0
            if (IsPageValid(current_sector_buffer + offset + PAGE_SIZE)) {
 800471c:	46aa      	mov	sl, r5
 800471e:	3580      	adds	r5, #128	@ 0x80
 8004720:	4628      	mov	r0, r5
 8004722:	f7ff ff51 	bl	80045c8 <IsPageValid>
 8004726:	2800      	cmp	r0, #0
 8004728:	d04e      	beq.n	80047c8 <W25_ShiftLeftFlashDataByPage+0x19c>
            	char spi_flash_data_intro[] = "Valid Page Data: \n";
 800472a:	4b59      	ldr	r3, [pc, #356]	@ (8004890 <W25_ShiftLeftFlashDataByPage+0x264>)
 800472c:	4622      	mov	r2, r4
 800472e:	f103 0e10 	add.w	lr, r3, #16
 8004732:	6818      	ldr	r0, [r3, #0]
 8004734:	6859      	ldr	r1, [r3, #4]
 8004736:	4694      	mov	ip, r2
 8004738:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 800473c:	3308      	adds	r3, #8
 800473e:	4573      	cmp	r3, lr
 8004740:	4662      	mov	r2, ip
 8004742:	d1f6      	bne.n	8004732 <W25_ShiftLeftFlashDataByPage+0x106>
 8004744:	8819      	ldrh	r1, [r3, #0]
 8004746:	789b      	ldrb	r3, [r3, #2]
 8004748:	f8ac 1000 	strh.w	r1, [ip]
 800474c:	f88c 3002 	strb.w	r3, [ip, #2]
				HAL_UART_Transmit(&huart1, (uint8_t*) spi_flash_data_intro, strlen(spi_flash_data_intro), 1000);
 8004750:	4620      	mov	r0, r4
 8004752:	f7fb fd9d 	bl	8000290 <strlen>
 8004756:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800475a:	b282      	uxth	r2, r0
 800475c:	4621      	mov	r1, r4
 800475e:	4640      	mov	r0, r8
 8004760:	f004 f854 	bl	800880c <HAL_UART_Transmit>
				HAL_UART_Transmit(&huart1, current_sector_buffer + offset+ PAGE_SIZE, 128, 1000);
 8004764:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004768:	2280      	movs	r2, #128	@ 0x80
 800476a:	4629      	mov	r1, r5
 800476c:	4640      	mov	r0, r8
 800476e:	f004 f84d 	bl	800880c <HAL_UART_Transmit>
				Debug_printf("\n\n");
 8004772:	4843      	ldr	r0, [pc, #268]	@ (8004880 <W25_ShiftLeftFlashDataByPage+0x254>)
 8004774:	f001 f8a4 	bl	80058c0 <Debug_printf>
                memcpy(current_sector_buffer + offset, current_sector_buffer + offset + PAGE_SIZE, PAGE_SIZE);
 8004778:	4629      	mov	r1, r5
 800477a:	2280      	movs	r2, #128	@ 0x80
 800477c:	4650      	mov	r0, sl
 800477e:	f008 fdd9 	bl	800d334 <memcpy>
                UpdatePageAddress(current_sector_buffer + offset, current_sector_start + offset);
 8004782:	19b9      	adds	r1, r7, r6
 8004784:	4650      	mov	r0, sl
 8004786:	f7ff ff3c 	bl	8004602 <UpdatePageAddress>
        for (uint32_t offset = 0; offset < SECTOR_SIZE - PAGE_SIZE; offset += PAGE_SIZE) {
 800478a:	3780      	adds	r7, #128	@ 0x80
 800478c:	f5b7 6f78 	cmp.w	r7, #3968	@ 0xf80
 8004790:	d1c4      	bne.n	800471c <W25_ShiftLeftFlashDataByPage+0xf0>
        if (next_sector_start < FLASH_END_ADDRESS && IsPageValid(next_page_buffer)) {
 8004792:	f5b9 4fa0 	cmp.w	r9, #20480	@ 0x5000
 8004796:	d044      	beq.n	8004822 <W25_ShiftLeftFlashDataByPage+0x1f6>
 8004798:	483a      	ldr	r0, [pc, #232]	@ (8004884 <W25_ShiftLeftFlashDataByPage+0x258>)
 800479a:	f7ff ff15 	bl	80045c8 <IsPageValid>
 800479e:	2800      	cmp	r0, #0
 80047a0:	d03f      	beq.n	8004822 <W25_ShiftLeftFlashDataByPage+0x1f6>
            memcpy(current_sector_buffer + (SECTOR_SIZE - PAGE_SIZE), next_page_buffer, PAGE_SIZE);
 80047a2:	4938      	ldr	r1, [pc, #224]	@ (8004884 <W25_ShiftLeftFlashDataByPage+0x258>)
 80047a4:	483b      	ldr	r0, [pc, #236]	@ (8004894 <W25_ShiftLeftFlashDataByPage+0x268>)
 80047a6:	2280      	movs	r2, #128	@ 0x80
 80047a8:	f008 fdc4 	bl	800d334 <memcpy>
            UpdatePageAddress(current_sector_buffer + (SECTOR_SIZE - PAGE_SIZE), current_sector_start + (SECTOR_SIZE - PAGE_SIZE));
 80047ac:	4839      	ldr	r0, [pc, #228]	@ (8004894 <W25_ShiftLeftFlashDataByPage+0x268>)
 80047ae:	f44f 517e 	mov.w	r1, #16256	@ 0x3f80
 80047b2:	f7ff ff26 	bl	8004602 <UpdatePageAddress>
        W25_Reset();
 80047b6:	f7ff fdb4 	bl	8004322 <W25_Reset>
        if (W25_SectorErase(current_sector_start) != HAL_OK) {
 80047ba:	4630      	mov	r0, r6
 80047bc:	f7ff fe5c 	bl	8004478 <W25_SectorErase>
 80047c0:	4604      	mov	r4, r0
 80047c2:	b3a0      	cbz	r0, 800482e <W25_ShiftLeftFlashDataByPage+0x202>
        	Debug_printf("Erase ALL CURRENT SECTOR: ERROR\n");
 80047c4:	4834      	ldr	r0, [pc, #208]	@ (8004898 <W25_ShiftLeftFlashDataByPage+0x26c>)
 80047c6:	e745      	b.n	8004654 <W25_ShiftLeftFlashDataByPage+0x28>
            	char spi_flash_data_intro[] = "Invalid Page Data: \n";
 80047c8:	4b34      	ldr	r3, [pc, #208]	@ (800489c <W25_ShiftLeftFlashDataByPage+0x270>)
 80047ca:	4622      	mov	r2, r4
 80047cc:	f103 0e10 	add.w	lr, r3, #16
 80047d0:	6818      	ldr	r0, [r3, #0]
 80047d2:	6859      	ldr	r1, [r3, #4]
 80047d4:	4694      	mov	ip, r2
 80047d6:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 80047da:	3308      	adds	r3, #8
 80047dc:	4573      	cmp	r3, lr
 80047de:	4662      	mov	r2, ip
 80047e0:	d1f6      	bne.n	80047d0 <W25_ShiftLeftFlashDataByPage+0x1a4>
 80047e2:	6818      	ldr	r0, [r3, #0]
 80047e4:	791b      	ldrb	r3, [r3, #4]
 80047e6:	f8cc 0000 	str.w	r0, [ip]
 80047ea:	f88c 3004 	strb.w	r3, [ip, #4]
				HAL_UART_Transmit(&huart1, (uint8_t*) spi_flash_data_intro, strlen(spi_flash_data_intro), 1000);
 80047ee:	4620      	mov	r0, r4
 80047f0:	f7fb fd4e 	bl	8000290 <strlen>
 80047f4:	4621      	mov	r1, r4
 80047f6:	b282      	uxth	r2, r0
 80047f8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80047fc:	4640      	mov	r0, r8
 80047fe:	f004 f805 	bl	800880c <HAL_UART_Transmit>
				HAL_UART_Transmit(&huart1, current_sector_buffer + offset +PAGE_SIZE, 128, 1000);
 8004802:	4629      	mov	r1, r5
 8004804:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004808:	2280      	movs	r2, #128	@ 0x80
 800480a:	4640      	mov	r0, r8
 800480c:	f003 fffe 	bl	800880c <HAL_UART_Transmit>
				Debug_printf("\n\n");
 8004810:	481b      	ldr	r0, [pc, #108]	@ (8004880 <W25_ShiftLeftFlashDataByPage+0x254>)
 8004812:	f001 f855 	bl	80058c0 <Debug_printf>
                memset(current_sector_buffer + offset, 0xFF, PAGE_SIZE); // Invalidate the page
 8004816:	2280      	movs	r2, #128	@ 0x80
 8004818:	21ff      	movs	r1, #255	@ 0xff
 800481a:	4650      	mov	r0, sl
 800481c:	f007 ff36 	bl	800c68c <memset>
 8004820:	e7b3      	b.n	800478a <W25_ShiftLeftFlashDataByPage+0x15e>
        	memset(current_sector_buffer + (SECTOR_SIZE - PAGE_SIZE), 0xFF, PAGE_SIZE); // Invalidate the last page
 8004822:	2280      	movs	r2, #128	@ 0x80
 8004824:	21ff      	movs	r1, #255	@ 0xff
 8004826:	481b      	ldr	r0, [pc, #108]	@ (8004894 <W25_ShiftLeftFlashDataByPage+0x268>)
 8004828:	f007 ff30 	bl	800c68c <memset>
 800482c:	e7c3      	b.n	80047b6 <W25_ShiftLeftFlashDataByPage+0x18a>
        for (uint32_t offset = 0; offset < SECTOR_SIZE; offset += PAGE_SIZE) {
 800482e:	4605      	mov	r5, r0
        	uint8_t *page_data = current_sector_buffer + offset;
 8004830:	eb0b 0705 	add.w	r7, fp, r5
        	W25_Reset();
 8004834:	f7ff fd75 	bl	8004322 <W25_Reset>
        	if (IsPageValid(page_data)) {
 8004838:	4638      	mov	r0, r7
 800483a:	f7ff fec5 	bl	80045c8 <IsPageValid>
 800483e:	b138      	cbz	r0, 8004850 <W25_ShiftLeftFlashDataByPage+0x224>
        		if (W25_PageProgram(current_sector_start + offset, current_sector_buffer + offset, PAGE_SIZE) != HAL_OK) {
 8004840:	2280      	movs	r2, #128	@ 0x80
 8004842:	4639      	mov	r1, r7
 8004844:	1970      	adds	r0, r6, r5
 8004846:	f7ff fe43 	bl	80044d0 <W25_PageProgram>
 800484a:	b108      	cbz	r0, 8004850 <W25_ShiftLeftFlashDataByPage+0x224>
					Debug_printf("PAGE PROGRAM: ERROR at page offset");
 800484c:	4814      	ldr	r0, [pc, #80]	@ (80048a0 <W25_ShiftLeftFlashDataByPage+0x274>)
 800484e:	e701      	b.n	8004654 <W25_ShiftLeftFlashDataByPage+0x28>
        for (uint32_t offset = 0; offset < SECTOR_SIZE; offset += PAGE_SIZE) {
 8004850:	3580      	adds	r5, #128	@ 0x80
 8004852:	f5b5 5f80 	cmp.w	r5, #4096	@ 0x1000
 8004856:	d1eb      	bne.n	8004830 <W25_ShiftLeftFlashDataByPage+0x204>
    while (current_sector_start < FLASH_END_ADDRESS) {
 8004858:	f5b9 4fa0 	cmp.w	r9, #20480	@ 0x5000
        uint32_t next_sector_start = current_sector_start + SECTOR_SIZE;
 800485c:	f44f 4680 	mov.w	r6, #16384	@ 0x4000
    while (current_sector_start < FLASH_END_ADDRESS) {
 8004860:	f47f aeec 	bne.w	800463c <W25_ShiftLeftFlashDataByPage+0x10>
    Debug_printf("\n\n ----------------------END OF SHIFT LEFT -----------------------------\n\n");
 8004864:	480f      	ldr	r0, [pc, #60]	@ (80048a4 <W25_ShiftLeftFlashDataByPage+0x278>)
 8004866:	f001 f82b 	bl	80058c0 <Debug_printf>
    return HAL_OK;
 800486a:	e6f6      	b.n	800465a <W25_ShiftLeftFlashDataByPage+0x2e>
 800486c:	08012151 	.word	0x08012151
 8004870:	20007430 	.word	0x20007430
 8004874:	080121a1 	.word	0x080121a1
 8004878:	0801227e 	.word	0x0801227e
 800487c:	20006fac 	.word	0x20006fac
 8004880:	08011a80 	.word	0x08011a80
 8004884:	200073b0 	.word	0x200073b0
 8004888:	080121c0 	.word	0x080121c0
 800488c:	080122b1 	.word	0x080122b1
 8004890:	080122e4 	.word	0x080122e4
 8004894:	200083b0 	.word	0x200083b0
 8004898:	080121ef 	.word	0x080121ef
 800489c:	080122f7 	.word	0x080122f7
 80048a0:	08012210 	.word	0x08012210
 80048a4:	08012233 	.word	0x08012233

080048a8 <calculate_epoch_time_utc>:
		osDelay(1000);
		memset(flashBufferTaxReceived, 0x00,128);
	}
}

uint32_t calculate_epoch_time_utc(DATE *date, TIME *time) {
 80048a8:	b500      	push	{lr}
    struct tm timeinfo;
    // Set up time structure
    timeinfo.tm_year = date->Yr - 1900; // - 1900 + 2000
 80048aa:	6883      	ldr	r3, [r0, #8]
uint32_t calculate_epoch_time_utc(DATE *date, TIME *time) {
 80048ac:	b08b      	sub	sp, #44	@ 0x2c
    timeinfo.tm_year = date->Yr - 1900; // - 1900 + 2000
 80048ae:	f2a3 736c 	subw	r3, r3, #1900	@ 0x76c
 80048b2:	9306      	str	r3, [sp, #24]
    timeinfo.tm_mon = date->Mon - 1;
 80048b4:	6843      	ldr	r3, [r0, #4]
 80048b6:	3b01      	subs	r3, #1
 80048b8:	9305      	str	r3, [sp, #20]
    timeinfo.tm_mday = date->Day;
 80048ba:	6803      	ldr	r3, [r0, #0]
 80048bc:	9304      	str	r3, [sp, #16]
    timeinfo.tm_hour = time->hour;
 80048be:	680b      	ldr	r3, [r1, #0]
 80048c0:	9303      	str	r3, [sp, #12]
    timeinfo.tm_min = time->min;
 80048c2:	684b      	ldr	r3, [r1, #4]
 80048c4:	9302      	str	r3, [sp, #8]
    timeinfo.tm_sec = time->sec;
 80048c6:	688b      	ldr	r3, [r1, #8]
 80048c8:	9301      	str	r3, [sp, #4]
    timeinfo.tm_isdst = -1; // Let mktime determine DST if necessary

    // Get the local epoch time and then adjust for timezone offset
    time_t local_epoch = mktime(&timeinfo);
 80048ca:	a801      	add	r0, sp, #4
    timeinfo.tm_isdst = -1; // Let mktime determine DST if necessary
 80048cc:	f04f 33ff 	mov.w	r3, #4294967295
 80048d0:	9309      	str	r3, [sp, #36]	@ 0x24
    time_t local_epoch = mktime(&timeinfo);
 80048d2:	f008 f815 	bl	800c900 <mktime>
    return (uint32_t)(local_epoch + 25200); // Subtract timezone offset
}
 80048d6:	f500 40c4 	add.w	r0, r0, #25088	@ 0x6200
 80048da:	3070      	adds	r0, #112	@ 0x70
 80048dc:	b00b      	add	sp, #44	@ 0x2c
 80048de:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080048e4 <format_rmc_data>:

void format_rmc_data(RMCSTRUCT *rmc_data, char *output_buffer, size_t buffer_size) {
 80048e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048e8:	ed2d 8b04 	vpush	{d8-d9}
 80048ec:	4604      	mov	r4, r0
 80048ee:	b09b      	sub	sp, #108	@ 0x6c
 80048f0:	e9cd 1218 	strd	r1, r2, [sp, #96]	@ 0x60
	//uart_transmit_string(&huart1, (uint8_t*) "Format RMC data");
    uint32_t epoch_time = calculate_epoch_time_utc(&rmc_data->date, &rmc_data->tim);
 80048f4:	4601      	mov	r1, r0
 80048f6:	3010      	adds	r0, #16
 80048f8:	f7ff ffd6 	bl	80048a8 <calculate_epoch_time_utc>

    // Format all fields in a single line with semicolon separation, including date
    snprintf(output_buffer, buffer_size, "%d;%d;%d;%d;%d;%d;%.6f;%c;%.6f;%c;%.1f;%.1f;%s;%lu", rmc_data->date.Yr, rmc_data->date.Mon, rmc_data->date.Day, rmc_data->tim.hour, rmc_data->tim.min, rmc_data->tim.sec, rmc_data->lcation.latitude, rmc_data->lcation.NS, rmc_data->lcation.longitude, rmc_data->lcation.EW, rmc_data->speed, rmc_data->course, rmc_data->isValid ? "Valid" : "Invalid", epoch_time);
 80048fc:	69a3      	ldr	r3, [r4, #24]
 80048fe:	9314      	str	r3, [sp, #80]	@ 0x50
 8004900:	e9d4 3504 	ldrd	r3, r5, [r4, #16]
    uint32_t epoch_time = calculate_epoch_time_utc(&rmc_data->date, &rmc_data->tim);
 8004904:	4607      	mov	r7, r0
    snprintf(output_buffer, buffer_size, "%d;%d;%d;%d;%d;%d;%.6f;%c;%.6f;%c;%.1f;%.1f;%s;%lu", rmc_data->date.Yr, rmc_data->date.Mon, rmc_data->date.Day, rmc_data->tim.hour, rmc_data->tim.min, rmc_data->tim.sec, rmc_data->lcation.latitude, rmc_data->lcation.NS, rmc_data->lcation.longitude, rmc_data->lcation.EW, rmc_data->speed, rmc_data->course, rmc_data->isValid ? "Valid" : "Invalid", epoch_time);
 8004906:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8004908:	9315      	str	r3, [sp, #84]	@ 0x54
 800490a:	f7fb fe2d 	bl	8000568 <__aeabi_f2d>
 800490e:	e9cd 0116 	strd	r0, r1, [sp, #88]	@ 0x58
 8004912:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8004914:	f8d4 b008 	ldr.w	fp, [r4, #8]
 8004918:	f894 6040 	ldrb.w	r6, [r4, #64]	@ 0x40
 800491c:	f894 8050 	ldrb.w	r8, [r4, #80]	@ 0x50
 8004920:	f7fb fe22 	bl	8000568 <__aeabi_f2d>
 8004924:	e9d4 9a00 	ldrd	r9, sl, [r4]
 8004928:	ed94 8b0e 	vldr	d8, [r4, #56]	@ 0x38
 800492c:	ed94 9b12 	vldr	d9, [r4, #72]	@ 0x48
 8004930:	ed9d 7b16 	vldr	d7, [sp, #88]	@ 0x58
 8004934:	6b24      	ldr	r4, [r4, #48]	@ 0x30
 8004936:	f8cd 8030 	str.w	r8, [sp, #48]	@ 0x30
 800493a:	4602      	mov	r2, r0
 800493c:	460b      	mov	r3, r1
 800493e:	4811      	ldr	r0, [pc, #68]	@ (8004984 <format_rmc_data+0xa0>)
 8004940:	4911      	ldr	r1, [pc, #68]	@ (8004988 <format_rmc_data+0xa4>)
 8004942:	9608      	str	r6, [sp, #32]
 8004944:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8004948:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800494a:	4a10      	ldr	r2, [pc, #64]	@ (800498c <format_rmc_data+0xa8>)
 800494c:	f8cd 9008 	str.w	r9, [sp, #8]
 8004950:	2c00      	cmp	r4, #0
 8004952:	bf08      	it	eq
 8004954:	4601      	moveq	r1, r0
 8004956:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800495a:	e9cd 5300 	strd	r5, r3, [sp]
 800495e:	e9cd 1712 	strd	r1, r7, [sp, #72]	@ 0x48
 8004962:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8004964:	ed8d 9b0a 	vstr	d9, [sp, #40]	@ 0x28
 8004968:	ed8d 8b06 	vstr	d8, [sp, #24]
 800496c:	e9cd ab03 	strd	sl, fp, [sp, #12]
 8004970:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	@ 0x60
 8004974:	f007 fd8e 	bl	800c494 <sniprintf>
}
 8004978:	b01b      	add	sp, #108	@ 0x6c
 800497a:	ecbd 8b04 	vpop	{d8-d9}
 800497e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004982:	bf00      	nop
 8004984:	08012345 	.word	0x08012345
 8004988:	0801233f 	.word	0x0801233f
 800498c:	0801234d 	.word	0x0801234d

08004990 <saveRMC>:


void saveRMC(){
 8004990:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	Debug_printf("\n\n Inside SAVING RMC TO FLASH \n\n");
	int k = 0;
	int j = 0;
	W25_Reset();
	if (is_erased_rmc == 0){
 8004994:	4cb4      	ldr	r4, [pc, #720]	@ (8004c68 <saveRMC+0x2d8>)
	Debug_printf("\n\n Inside SAVING RMC TO FLASH \n\n");
 8004996:	48b5      	ldr	r0, [pc, #724]	@ (8004c6c <saveRMC+0x2dc>)
void saveRMC(){
 8004998:	b093      	sub	sp, #76	@ 0x4c
	Debug_printf("\n\n Inside SAVING RMC TO FLASH \n\n");
 800499a:	f000 ff91 	bl	80058c0 <Debug_printf>
	W25_Reset();
 800499e:	f7ff fcc0 	bl	8004322 <W25_Reset>
	if (is_erased_rmc == 0){
 80049a2:	6823      	ldr	r3, [r4, #0]
 80049a4:	b92b      	cbnz	r3, 80049b2 <saveRMC+0x22>
		W25_SectorErase(address_rmc);
 80049a6:	4bb2      	ldr	r3, [pc, #712]	@ (8004c70 <saveRMC+0x2e0>)
 80049a8:	6818      	ldr	r0, [r3, #0]
 80049aa:	f7ff fd65 	bl	8004478 <W25_SectorErase>
		is_erased_rmc = 1;
 80049ae:	2301      	movs	r3, #1
 80049b0:	6023      	str	r3, [r4, #0]
	}
	
	for(size_t i = 0; i < 128; i++){
 80049b2:	4ab0      	ldr	r2, [pc, #704]	@ (8004c74 <saveRMC+0x2e4>)
 80049b4:	2300      	movs	r3, #0
 80049b6:	4616      	mov	r6, r2
		if(rmcBufferDemo[i] != 0x00 && rmcBufferDemo[i+1] == 0x00){
 80049b8:	f812 1b01 	ldrb.w	r1, [r2], #1
 80049bc:	461d      	mov	r5, r3
 80049be:	3301      	adds	r3, #1
 80049c0:	b109      	cbz	r1, 80049c6 <saveRMC+0x36>
 80049c2:	7811      	ldrb	r1, [r2, #0]
 80049c4:	b111      	cbz	r1, 80049cc <saveRMC+0x3c>
	for(size_t i = 0; i < 128; i++){
 80049c6:	2b80      	cmp	r3, #128	@ 0x80
 80049c8:	d1f6      	bne.n	80049b8 <saveRMC+0x28>
	int k = 0;
 80049ca:	2500      	movs	r5, #0
			k = i;
			break;
		}
	}
	Uint32ToHex(address_rmc, addr_out_flash, 8);
 80049cc:	4faa      	ldr	r7, [pc, #680]	@ (8004c78 <saveRMC+0x2e8>)
 80049ce:	4ca8      	ldr	r4, [pc, #672]	@ (8004c70 <saveRMC+0x2e0>)
 80049d0:	2208      	movs	r2, #8
 80049d2:	6820      	ldr	r0, [r4, #0]
 80049d4:	4639      	mov	r1, r7
 80049d6:	f000 ff5e 	bl	8005896 <Uint32ToHex>
	HAL_UART_Transmit(&huart1, (uint8_t*) addr_out_flash, 8, 1000);
 80049da:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80049de:	2208      	movs	r2, #8
 80049e0:	4639      	mov	r1, r7
 80049e2:	48a6      	ldr	r0, [pc, #664]	@ (8004c7c <saveRMC+0x2ec>)
 80049e4:	f003 ff12 	bl	800880c <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, (uint8_t*)"\r\n", 1, 1000);
 80049e8:	49a5      	ldr	r1, [pc, #660]	@ (8004c80 <saveRMC+0x2f0>)
 80049ea:	48a4      	ldr	r0, [pc, #656]	@ (8004c7c <saveRMC+0x2ec>)
 80049ec:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80049f0:	2201      	movs	r2, #1
 80049f2:	f003 ff0b 	bl	800880c <HAL_UART_Transmit>

	k++;
	rmcBufferDemo[k] = ';';
 80049f6:	1973      	adds	r3, r6, r5
 80049f8:	223b      	movs	r2, #59	@ 0x3b
 80049fa:	705a      	strb	r2, [r3, #1]
	for(size_t idx = 6; idx > 0 ; idx--){
		k++;
		rmcBufferDemo[k] = addr_out_flash[8 - idx];
 80049fc:	1cab      	adds	r3, r5, #2
 80049fe:	f8d7 1002 	ldr.w	r1, [r7, #2]
 8004a02:	50f1      	str	r1, [r6, r3]
 8004a04:	18f2      	adds	r2, r6, r3
 8004a06:	88fb      	ldrh	r3, [r7, #6]
 8004a08:	8093      	strh	r3, [r2, #4]
	}
	
	for (j=0;j<110-k-1;j++)
	{
		rmcBufferDemo[j+k+1]=0x00;
 8004a0a:	f105 0008 	add.w	r0, r5, #8
 8004a0e:	f1c5 0266 	rsb	r2, r5, #102	@ 0x66
 8004a12:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 8004a16:	2100      	movs	r1, #0
 8004a18:	4430      	add	r0, r6
 8004a1a:	f007 fe37 	bl	800c68c <memset>
	}

	if(address_rmc % 0x1000 == 0x0000){
 8004a1e:	6823      	ldr	r3, [r4, #0]
 8004a20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a24:	b92b      	cbnz	r3, 8004a32 <saveRMC+0xa2>
		Debug_printf("\n\nErasing SECTOR IN ADVANCE\n");
 8004a26:	4897      	ldr	r0, [pc, #604]	@ (8004c84 <saveRMC+0x2f4>)
 8004a28:	f000 ff4a 	bl	80058c0 <Debug_printf>
		W25_SectorErase(address_rmc);
 8004a2c:	6820      	ldr	r0, [r4, #0]
 8004a2e:	f7ff fd23 	bl	8004478 <W25_SectorErase>
	}

	W25_Reset();
 8004a32:	f7ff fc76 	bl	8004322 <W25_Reset>
	W25_PageProgram(address_rmc, rmcBufferDemo, 128);
 8004a36:	498f      	ldr	r1, [pc, #572]	@ (8004c74 <saveRMC+0x2e4>)
 8004a38:	6820      	ldr	r0, [r4, #0]
	Debug_printf("Buffer before saving to FLASH: ");
	Debug_printf((char*)rmcBufferDemo);
	Debug_printf("\n");

	current_addr = address_rmc;
 8004a3a:	4d93      	ldr	r5, [pc, #588]	@ (8004c88 <saveRMC+0x2f8>)
	W25_PageProgram(address_rmc, rmcBufferDemo, 128);
 8004a3c:	2280      	movs	r2, #128	@ 0x80
 8004a3e:	f7ff fd47 	bl	80044d0 <W25_PageProgram>
	Debug_printf("Buffer before saving to FLASH: ");
 8004a42:	4892      	ldr	r0, [pc, #584]	@ (8004c8c <saveRMC+0x2fc>)
 8004a44:	f000 ff3c 	bl	80058c0 <Debug_printf>
	Debug_printf((char*)rmcBufferDemo);
 8004a48:	488a      	ldr	r0, [pc, #552]	@ (8004c74 <saveRMC+0x2e4>)
 8004a4a:	f000 ff39 	bl	80058c0 <Debug_printf>
	Debug_printf("\n");
 8004a4e:	4890      	ldr	r0, [pc, #576]	@ (8004c90 <saveRMC+0x300>)
 8004a50:	f000 ff36 	bl	80058c0 <Debug_printf>
	current_addr = address_rmc;
 8004a54:	6823      	ldr	r3, [r4, #0]
	Debug_printf("Buffer after saving to FLASH: ");
 8004a56:	488f      	ldr	r0, [pc, #572]	@ (8004c94 <saveRMC+0x304>)
	current_addr = address_rmc;
 8004a58:	602b      	str	r3, [r5, #0]
	Debug_printf("Buffer after saving to FLASH: ");
 8004a5a:	f000 ff31 	bl	80058c0 <Debug_printf>
	W25_Reset();
 8004a5e:	f7ff fc60 	bl	8004322 <W25_Reset>
	W25_ReadData(current_addr, flashBufferRMCReceived, 128);
 8004a62:	2280      	movs	r2, #128	@ 0x80
 8004a64:	498c      	ldr	r1, [pc, #560]	@ (8004c98 <saveRMC+0x308>)
 8004a66:	6828      	ldr	r0, [r5, #0]
 8004a68:	f7ff fd7c 	bl	8004564 <W25_ReadData>
	char spi_flash_data_intro[] = "Flash DATA received: ";
 8004a6c:	4b8b      	ldr	r3, [pc, #556]	@ (8004c9c <saveRMC+0x30c>)
 8004a6e:	aa01      	add	r2, sp, #4
 8004a70:	f103 0c10 	add.w	ip, r3, #16
 8004a74:	4617      	mov	r7, r2
 8004a76:	6818      	ldr	r0, [r3, #0]
 8004a78:	6859      	ldr	r1, [r3, #4]
 8004a7a:	4616      	mov	r6, r2
 8004a7c:	c603      	stmia	r6!, {r0, r1}
 8004a7e:	3308      	adds	r3, #8
 8004a80:	4563      	cmp	r3, ip
 8004a82:	4632      	mov	r2, r6
 8004a84:	d1f7      	bne.n	8004a76 <saveRMC+0xe6>
 8004a86:	6818      	ldr	r0, [r3, #0]
 8004a88:	889b      	ldrh	r3, [r3, #4]
 8004a8a:	6030      	str	r0, [r6, #0]
 8004a8c:	80b3      	strh	r3, [r6, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*) spi_flash_data_intro, strlen(spi_flash_data_intro), 1000);
 8004a8e:	4638      	mov	r0, r7
 8004a90:	f7fb fbfe 	bl	8000290 <strlen>
 8004a94:	4639      	mov	r1, r7
 8004a96:	b282      	uxth	r2, r0
 8004a98:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004a9c:	4877      	ldr	r0, [pc, #476]	@ (8004c7c <saveRMC+0x2ec>)
 8004a9e:	f003 feb5 	bl	800880c <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, flashBufferRMCReceived, sizeof(flashBufferRMCReceived), 1000);
 8004aa2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004aa6:	497c      	ldr	r1, [pc, #496]	@ (8004c98 <saveRMC+0x308>)
 8004aa8:	4874      	ldr	r0, [pc, #464]	@ (8004c7c <saveRMC+0x2ec>)
 8004aaa:	2280      	movs	r2, #128	@ 0x80
 8004aac:	f003 feae 	bl	800880c <HAL_UART_Transmit>

	memset(flashBufferRMCReceived, 0x00,128);
 8004ab0:	2280      	movs	r2, #128	@ 0x80
 8004ab2:	2100      	movs	r1, #0
 8004ab4:	4878      	ldr	r0, [pc, #480]	@ (8004c98 <saveRMC+0x308>)
 8004ab6:	f007 fde9 	bl	800c68c <memset>


	Debug_printf("\n-------------------------- Updating the latest location info----------------\n");
 8004aba:	4879      	ldr	r0, [pc, #484]	@ (8004ca0 <saveRMC+0x310>)
 8004abc:	f000 ff00 	bl	80058c0 <Debug_printf>
	W25_Reset();
 8004ac0:	f7ff fc2f 	bl	8004322 <W25_Reset>
	W25_SectorErase(0x9000);
 8004ac4:	f44f 4010 	mov.w	r0, #36864	@ 0x9000
 8004ac8:	f7ff fcd6 	bl	8004478 <W25_SectorErase>
	W25_Reset();
 8004acc:	f7ff fc29 	bl	8004322 <W25_Reset>
	W25_PageProgram(0x9000, rmcBufferDemo, 128);
 8004ad0:	4968      	ldr	r1, [pc, #416]	@ (8004c74 <saveRMC+0x2e4>)
 8004ad2:	2280      	movs	r2, #128	@ 0x80
 8004ad4:	f44f 4010 	mov.w	r0, #36864	@ 0x9000
 8004ad8:	f7ff fcfa 	bl	80044d0 <W25_PageProgram>
	W25_ReadData(0x9000, flashBufferRMCReceived, 128);
 8004adc:	2280      	movs	r2, #128	@ 0x80
 8004ade:	496e      	ldr	r1, [pc, #440]	@ (8004c98 <saveRMC+0x308>)
 8004ae0:	f44f 4010 	mov.w	r0, #36864	@ 0x9000
 8004ae4:	f7ff fd3e 	bl	8004564 <W25_ReadData>
	char spi_flash_data_intro_backup[] = "Flash DATA received at 0x9000 (BACKUP): ";
 8004ae8:	4b6e      	ldr	r3, [pc, #440]	@ (8004ca4 <saveRMC+0x314>)
 8004aea:	aa07      	add	r2, sp, #28
 8004aec:	f103 0c28 	add.w	ip, r3, #40	@ 0x28
 8004af0:	4617      	mov	r7, r2
 8004af2:	6818      	ldr	r0, [r3, #0]
 8004af4:	6859      	ldr	r1, [r3, #4]
 8004af6:	4616      	mov	r6, r2
 8004af8:	c603      	stmia	r6!, {r0, r1}
 8004afa:	3308      	adds	r3, #8
 8004afc:	4563      	cmp	r3, ip
 8004afe:	4632      	mov	r2, r6
 8004b00:	d1f7      	bne.n	8004af2 <saveRMC+0x162>
 8004b02:	781b      	ldrb	r3, [r3, #0]
 8004b04:	7033      	strb	r3, [r6, #0]
	HAL_UART_Transmit(&huart1, (uint8_t*) spi_flash_data_intro_backup, strlen(spi_flash_data_intro_backup), 1000);
 8004b06:	4638      	mov	r0, r7
 8004b08:	f7fb fbc2 	bl	8000290 <strlen>
 8004b0c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004b10:	b282      	uxth	r2, r0
 8004b12:	4639      	mov	r1, r7
 8004b14:	4859      	ldr	r0, [pc, #356]	@ (8004c7c <saveRMC+0x2ec>)
 8004b16:	f003 fe79 	bl	800880c <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, flashBufferRMCReceived, sizeof(flashBufferRMCReceived), 1000);
 8004b1a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004b1e:	495e      	ldr	r1, [pc, #376]	@ (8004c98 <saveRMC+0x308>)
 8004b20:	4856      	ldr	r0, [pc, #344]	@ (8004c7c <saveRMC+0x2ec>)
 8004b22:	2280      	movs	r2, #128	@ 0x80
 8004b24:	f003 fe72 	bl	800880c <HAL_UART_Transmit>
	memset(flashBufferRMCReceived, 0x00,128);
 8004b28:	485b      	ldr	r0, [pc, #364]	@ (8004c98 <saveRMC+0x308>)
 8004b2a:	2280      	movs	r2, #128	@ 0x80
 8004b2c:	2100      	movs	r1, #0
 8004b2e:	f007 fdad 	bl	800c68c <memset>

	if(address_rmc == FLASH_END_ADDRESS-128){
 8004b32:	6823      	ldr	r3, [r4, #0]
 8004b34:	f5b3 4f9f 	cmp.w	r3, #20352	@ 0x4f80
 8004b38:	4b5b      	ldr	r3, [pc, #364]	@ (8004ca8 <saveRMC+0x318>)
 8004b3a:	f040 80e7 	bne.w	8004d0c <saveRMC+0x37c>
		is_flash_overflow = 1;
 8004b3e:	2201      	movs	r2, #1
		Debug_printf(" ADDRESS RMC before SHIFT LEFT BY ONE PAGE");
 8004b40:	485a      	ldr	r0, [pc, #360]	@ (8004cac <saveRMC+0x31c>)
		is_flash_overflow = 1;
 8004b42:	601a      	str	r2, [r3, #0]
		Debug_printf(" ADDRESS RMC before SHIFT LEFT BY ONE PAGE");
 8004b44:	f000 febc 	bl	80058c0 <Debug_printf>
		W25_Reset();
 8004b48:	f7ff fbeb 	bl	8004322 <W25_Reset>
		W25_ReadData(address_rmc, flashBufferRMCReceived, 128);
 8004b4c:	4952      	ldr	r1, [pc, #328]	@ (8004c98 <saveRMC+0x308>)
 8004b4e:	6820      	ldr	r0, [r4, #0]
 8004b50:	4f57      	ldr	r7, [pc, #348]	@ (8004cb0 <saveRMC+0x320>)
 8004b52:	2280      	movs	r2, #128	@ 0x80
 8004b54:	f7ff fd06 	bl	8004564 <W25_ReadData>
		Debug_printf((char*) flashBufferRMCReceived);
 8004b58:	484f      	ldr	r0, [pc, #316]	@ (8004c98 <saveRMC+0x308>)
 8004b5a:	f000 feb1 	bl	80058c0 <Debug_printf>

		W25_ShiftLeftFlashDataByPage();
 8004b5e:	f7ff fd65 	bl	800462c <W25_ShiftLeftFlashDataByPage>
		address_rmc -= 128;
 8004b62:	6823      	ldr	r3, [r4, #0]
 8004b64:	3b80      	subs	r3, #128	@ 0x80
 8004b66:	6023      	str	r3, [r4, #0]
		if(is_using_flash == 0){
 8004b68:	4b52      	ldr	r3, [pc, #328]	@ (8004cb4 <saveRMC+0x324>)
 8004b6a:	f8d3 8000 	ldr.w	r8, [r3]
 8004b6e:	f1b8 0f00 	cmp.w	r8, #0
 8004b72:	f040 80c6 	bne.w	8004d02 <saveRMC+0x372>
			if(start_addr_disconnect > FLASH_START_ADDRESS)
 8004b76:	683b      	ldr	r3, [r7, #0]
				start_addr_disconnect -= 128;
			Debug_printf("\n-----------------BEFORE update the result address data --------------\n");
			printQueue_GSM(&result_addr_queue);
 8004b78:	4e4f      	ldr	r6, [pc, #316]	@ (8004cb8 <saveRMC+0x328>)
			Debug_printf("\n-----------------BEFORE update the result address data --------------\n");
 8004b7a:	4850      	ldr	r0, [pc, #320]	@ (8004cbc <saveRMC+0x32c>)
			if(start_addr_disconnect > FLASH_START_ADDRESS)
 8004b7c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
				start_addr_disconnect -= 128;
 8004b80:	bf82      	ittt	hi
 8004b82:	683b      	ldrhi	r3, [r7, #0]
 8004b84:	3b80      	subhi	r3, #128	@ 0x80
 8004b86:	603b      	strhi	r3, [r7, #0]
			Debug_printf("\n-----------------BEFORE update the result address data --------------\n");
 8004b88:	f000 fe9a 	bl	80058c0 <Debug_printf>
			printQueue_GSM(&result_addr_queue);
 8004b8c:	4630      	mov	r0, r6
 8004b8e:	f7fe fbd7 	bl	8003340 <printQueue_GSM>
			Debug_printf("\n---------------Update the result address data--------------\n");
 8004b92:	484b      	ldr	r0, [pc, #300]	@ (8004cc0 <saveRMC+0x330>)
 8004b94:	f000 fe94 	bl	80058c0 <Debug_printf>
			for (int i = 0; i < result_addr_queue.size; i++) {
 8004b98:	f8d6 0208 	ldr.w	r0, [r6, #520]	@ 0x208
				int idx = (result_addr_queue.front + i) % MAX_SIZE;
 8004b9c:	f8d6 c200 	ldr.w	ip, [r6, #512]	@ 0x200
			for (int i = 0; i < result_addr_queue.size; i++) {
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	4290      	cmp	r0, r2
 8004ba4:	dc4c      	bgt.n	8004c40 <saveRMC+0x2b0>
					result_addr_queue.data[idx] -= 128;
			}
			for (int i = 0; i < result_addr_queue.size; i++) {
				int idx = (result_addr_queue.front + i) % MAX_SIZE;
				if(result_addr_queue.data[idx] < 0x3000)
					deleteMiddle_GSM(&result_addr_queue, idx);
 8004ba6:	f8df 9110 	ldr.w	r9, [pc, #272]	@ 8004cb8 <saveRMC+0x328>
			for (int i = 0; i < result_addr_queue.size; i++) {
 8004baa:	f8d6 3208 	ldr.w	r3, [r6, #520]	@ 0x208
 8004bae:	4543      	cmp	r3, r8
 8004bb0:	f300 8092 	bgt.w	8004cd8 <saveRMC+0x348>
			}
			printQueue_GSM(&result_addr_queue);
 8004bb4:	4840      	ldr	r0, [pc, #256]	@ (8004cb8 <saveRMC+0x328>)
 8004bb6:	f7fe fbc3 	bl	8003340 <printQueue_GSM>
			if(end_addr_disconnect > start_addr_disconnect)
 8004bba:	4b42      	ldr	r3, [pc, #264]	@ (8004cc4 <saveRMC+0x334>)
 8004bbc:	6819      	ldr	r1, [r3, #0]
 8004bbe:	683a      	ldr	r2, [r7, #0]
 8004bc0:	4291      	cmp	r1, r2
 8004bc2:	d902      	bls.n	8004bca <saveRMC+0x23a>
				end_addr_disconnect -= 128;
 8004bc4:	681a      	ldr	r2, [r3, #0]
 8004bc6:	3a80      	subs	r2, #128	@ 0x80
 8004bc8:	601a      	str	r2, [r3, #0]
		}
		else{
			count_shiftleft++;
		}
		Uint32ToHex(start_addr_disconnect, addr_out_flash, 8);
 8004bca:	2208      	movs	r2, #8
 8004bcc:	6838      	ldr	r0, [r7, #0]
 8004bce:	492a      	ldr	r1, [pc, #168]	@ (8004c78 <saveRMC+0x2e8>)
 8004bd0:	f000 fe61 	bl	8005896 <Uint32ToHex>
		Debug_printf("\n\n------------------ CURRENT START ADDRESS DISCONNECT: %s ---------------\n\n", addr_out_flash);
 8004bd4:	4928      	ldr	r1, [pc, #160]	@ (8004c78 <saveRMC+0x2e8>)
 8004bd6:	483c      	ldr	r0, [pc, #240]	@ (8004cc8 <saveRMC+0x338>)
 8004bd8:	f000 fe72 	bl	80058c0 <Debug_printf>
		Debug_printf("\n--------------SHIFT LEFT COUNT: %d-------------\n", count_shiftleft);
 8004bdc:	4b3b      	ldr	r3, [pc, #236]	@ (8004ccc <saveRMC+0x33c>)
 8004bde:	483c      	ldr	r0, [pc, #240]	@ (8004cd0 <saveRMC+0x340>)
 8004be0:	7819      	ldrb	r1, [r3, #0]
 8004be2:	f000 fe6d 	bl	80058c0 <Debug_printf>
		current_addr -= 128;
 8004be6:	682b      	ldr	r3, [r5, #0]
	    Debug_printf("\n");
 8004be8:	4829      	ldr	r0, [pc, #164]	@ (8004c90 <saveRMC+0x300>)
		current_addr -= 128;
 8004bea:	3b80      	subs	r3, #128	@ 0x80
 8004bec:	602b      	str	r3, [r5, #0]
	    Debug_printf("\n");
 8004bee:	f000 fe67 	bl	80058c0 <Debug_printf>
		Debug_printf(" ADDRESS RMC after SHIFT LEFT BY ONE PAGE:");
 8004bf2:	4838      	ldr	r0, [pc, #224]	@ (8004cd4 <saveRMC+0x344>)
 8004bf4:	f000 fe64 	bl	80058c0 <Debug_printf>
		W25_Reset();
 8004bf8:	f7ff fb93 	bl	8004322 <W25_Reset>
		W25_ReadData(address_rmc, flashBufferRMCReceived, 128);
 8004bfc:	4926      	ldr	r1, [pc, #152]	@ (8004c98 <saveRMC+0x308>)
 8004bfe:	6820      	ldr	r0, [r4, #0]
 8004c00:	2280      	movs	r2, #128	@ 0x80
 8004c02:	f7ff fcaf 	bl	8004564 <W25_ReadData>
		HAL_UART_Transmit(&huart1, flashBufferRMCReceived, sizeof(flashBufferRMCReceived), 1000);
 8004c06:	4924      	ldr	r1, [pc, #144]	@ (8004c98 <saveRMC+0x308>)
 8004c08:	481c      	ldr	r0, [pc, #112]	@ (8004c7c <saveRMC+0x2ec>)
 8004c0a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004c0e:	2280      	movs	r2, #128	@ 0x80
 8004c10:	f003 fdfc 	bl	800880c <HAL_UART_Transmit>
	}
	else {
		is_flash_overflow = 0;
	}
	if(address_rmc < FLASH_END_ADDRESS-128)
 8004c14:	6823      	ldr	r3, [r4, #0]
 8004c16:	f5b3 4f9f 	cmp.w	r3, #20352	@ 0x4f80
		address_rmc += 128;
 8004c1a:	bf38      	it	cc
 8004c1c:	3380      	addcc	r3, #128	@ 0x80
	osDelay(1000);
 8004c1e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
		address_rmc += 128;
 8004c22:	bf38      	it	cc
 8004c24:	6023      	strcc	r3, [r4, #0]
	osDelay(1000);
 8004c26:	f003 ffe1 	bl	8008bec <osDelay>
	Debug_printf("\n");
 8004c2a:	4819      	ldr	r0, [pc, #100]	@ (8004c90 <saveRMC+0x300>)
 8004c2c:	f000 fe48 	bl	80058c0 <Debug_printf>
	memset(flashBufferRMCReceived, 0x00,128);
 8004c30:	4819      	ldr	r0, [pc, #100]	@ (8004c98 <saveRMC+0x308>)
 8004c32:	2280      	movs	r2, #128	@ 0x80
 8004c34:	2100      	movs	r1, #0
}
 8004c36:	b013      	add	sp, #76	@ 0x4c
 8004c38:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	memset(flashBufferRMCReceived, 0x00,128);
 8004c3c:	f007 bd26 	b.w	800c68c <memset>
				int idx = (result_addr_queue.front + i) % MAX_SIZE;
 8004c40:	eb02 030c 	add.w	r3, r2, ip
 8004c44:	4259      	negs	r1, r3
 8004c46:	f001 017f 	and.w	r1, r1, #127	@ 0x7f
 8004c4a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004c4e:	bf58      	it	pl
 8004c50:	424b      	negpl	r3, r1
			for (int i = 0; i < result_addr_queue.size; i++) {
 8004c52:	3201      	adds	r2, #1
				if(result_addr_queue.data[idx] >= 0x3000)
 8004c54:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 8004c58:	f5b1 5f40 	cmp.w	r1, #12288	@ 0x3000
					result_addr_queue.data[idx] -= 128;
 8004c5c:	bf24      	itt	cs
 8004c5e:	3980      	subcs	r1, #128	@ 0x80
 8004c60:	f846 1023 	strcs.w	r1, [r6, r3, lsl #2]
			for (int i = 0; i < result_addr_queue.size; i++) {
 8004c64:	e79d      	b.n	8004ba2 <saveRMC+0x212>
 8004c66:	bf00      	nop
 8004c68:	20008530 	.word	0x20008530
 8004c6c:	08012380 	.word	0x08012380
 8004c70:	20000020 	.word	0x20000020
 8004c74:	20008430 	.word	0x20008430
 8004c78:	20007294 	.word	0x20007294
 8004c7c:	20006fac 	.word	0x20006fac
 8004c80:	08010dde 	.word	0x08010dde
 8004c84:	080123a1 	.word	0x080123a1
 8004c88:	2000001c 	.word	0x2000001c
 8004c8c:	080123be 	.word	0x080123be
 8004c90:	08011a81 	.word	0x08011a81
 8004c94:	080123de 	.word	0x080123de
 8004c98:	200084b0 	.word	0x200084b0
 8004c9c:	080125a6 	.word	0x080125a6
 8004ca0:	080123fd 	.word	0x080123fd
 8004ca4:	080125bc 	.word	0x080125bc
 8004ca8:	20008538 	.word	0x20008538
 8004cac:	0801244c 	.word	0x0801244c
 8004cb0:	20001c2c 	.word	0x20001c2c
 8004cb4:	20001e50 	.word	0x20001e50
 8004cb8:	20001c30 	.word	0x20001c30
 8004cbc:	08012477 	.word	0x08012477
 8004cc0:	080124bf 	.word	0x080124bf
 8004cc4:	20001c24 	.word	0x20001c24
 8004cc8:	080124fd 	.word	0x080124fd
 8004ccc:	20001e48 	.word	0x20001e48
 8004cd0:	08012549 	.word	0x08012549
 8004cd4:	0801257b 	.word	0x0801257b
				int idx = (result_addr_queue.front + i) % MAX_SIZE;
 8004cd8:	f8d6 1200 	ldr.w	r1, [r6, #512]	@ 0x200
 8004cdc:	4441      	add	r1, r8
 8004cde:	424b      	negs	r3, r1
 8004ce0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004ce4:	f001 017f 	and.w	r1, r1, #127	@ 0x7f
 8004ce8:	bf58      	it	pl
 8004cea:	4259      	negpl	r1, r3
				if(result_addr_queue.data[idx] < 0x3000)
 8004cec:	f856 3021 	ldr.w	r3, [r6, r1, lsl #2]
 8004cf0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004cf4:	d202      	bcs.n	8004cfc <saveRMC+0x36c>
					deleteMiddle_GSM(&result_addr_queue, idx);
 8004cf6:	4648      	mov	r0, r9
 8004cf8:	f7fe fb7c 	bl	80033f4 <deleteMiddle_GSM>
			for (int i = 0; i < result_addr_queue.size; i++) {
 8004cfc:	f108 0801 	add.w	r8, r8, #1
 8004d00:	e753      	b.n	8004baa <saveRMC+0x21a>
			count_shiftleft++;
 8004d02:	4a04      	ldr	r2, [pc, #16]	@ (8004d14 <saveRMC+0x384>)
 8004d04:	7813      	ldrb	r3, [r2, #0]
 8004d06:	3301      	adds	r3, #1
 8004d08:	7013      	strb	r3, [r2, #0]
 8004d0a:	e75e      	b.n	8004bca <saveRMC+0x23a>
		is_flash_overflow = 0;
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	601a      	str	r2, [r3, #0]
 8004d10:	e780      	b.n	8004c14 <saveRMC+0x284>
 8004d12:	bf00      	nop
 8004d14:	20001e48 	.word	0x20001e48

08004d18 <sendRMCDataWithAddrToGSM>:


void sendRMCDataWithAddrToGSM(GSM_MAIL_STRUCT *mail_data){
	if(mail_data->rmc.date.Yr >= 24){
 8004d18:	6983      	ldr	r3, [r0, #24]
 8004d1a:	2b17      	cmp	r3, #23
void sendRMCDataWithAddrToGSM(GSM_MAIL_STRUCT *mail_data){
 8004d1c:	b510      	push	{r4, lr}
 8004d1e:	4604      	mov	r4, r0
	if(mail_data->rmc.date.Yr >= 24){
 8004d20:	dd0c      	ble.n	8004d3c <sendRMCDataWithAddrToGSM+0x24>
		Debug_printf("\n\n\nSENDING RMC with Addr TO GSM\n\n");
 8004d22:	4807      	ldr	r0, [pc, #28]	@ (8004d40 <sendRMCDataWithAddrToGSM+0x28>)
 8004d24:	f000 fdcc 	bl	80058c0 <Debug_printf>
		osMessageQueuePut(RMC_MailQGSMIdHandle, mail_data, 0, 1000);
 8004d28:	4806      	ldr	r0, [pc, #24]	@ (8004d44 <sendRMCDataWithAddrToGSM+0x2c>)
 8004d2a:	4621      	mov	r1, r4
 8004d2c:	6800      	ldr	r0, [r0, #0]
	}
}
 8004d2e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		osMessageQueuePut(RMC_MailQGSMIdHandle, mail_data, 0, 1000);
 8004d32:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004d36:	2200      	movs	r2, #0
 8004d38:	f003 bfba 	b.w	8008cb0 <osMessageQueuePut>
}
 8004d3c:	bd10      	pop	{r4, pc}
 8004d3e:	bf00      	nop
 8004d40:	080125e5 	.word	0x080125e5
 8004d44:	20003b4c 	.word	0x20003b4c

08004d48 <parseRMCString>:

void parseRMCString(uint8_t *str, RMCSTRUCT *rmc) {
 8004d48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d4c:	b0d4      	sub	sp, #336	@ 0x150
 8004d4e:	460c      	mov	r4, r1
    // Cast the uint8_t* to char* for string operations
    char buffer[256];
    strncpy(buffer, (char*)str, sizeof(buffer));
 8004d50:	22ff      	movs	r2, #255	@ 0xff
 8004d52:	4601      	mov	r1, r0
 8004d54:	a814      	add	r0, sp, #80	@ 0x50
 8004d56:	f007 fcc0 	bl	800c6da <strncpy>
    buffer[sizeof(buffer) - 1] = '\0'; // Ensure null termination
 8004d5a:	2500      	movs	r5, #0

    // Remove the last parameter by locating the last ';'
    char *lastSemicolon = strrchr(buffer, ';');
 8004d5c:	213b      	movs	r1, #59	@ 0x3b
 8004d5e:	a814      	add	r0, sp, #80	@ 0x50
    buffer[sizeof(buffer) - 1] = '\0'; // Ensure null termination
 8004d60:	f88d 514f 	strb.w	r5, [sp, #335]	@ 0x14f
    char *lastSemicolon = strrchr(buffer, ';');
 8004d64:	f007 fccc 	bl	800c700 <strrchr>
    if (lastSemicolon) {
 8004d68:	b100      	cbz	r0, 8004d6c <parseRMCString+0x24>
        *lastSemicolon = '\0'; // Terminate the string here to exclude the last parameter
 8004d6a:	7005      	strb	r5, [r0, #0]

    // Parse the string (now excluding the last parameter)
    char validStr[10];
   // unsigned long long epoch;
    int epoch0, epoch1, epoch2;
    sscanf(buffer, "%d;%d;%d;%d;%d;%d;%lf;%c;%lf;%c;%f;%f;%9[^;];%04d%04d%02d",
 8004d6c:	f104 032c 	add.w	r3, r4, #44	@ 0x2c
 8004d70:	9309      	str	r3, [sp, #36]	@ 0x24
 8004d72:	f104 0328 	add.w	r3, r4, #40	@ 0x28
 8004d76:	9308      	str	r3, [sp, #32]
 8004d78:	f104 0350 	add.w	r3, r4, #80	@ 0x50
 8004d7c:	9307      	str	r3, [sp, #28]
 8004d7e:	f104 0348 	add.w	r3, r4, #72	@ 0x48
 8004d82:	9306      	str	r3, [sp, #24]
 8004d84:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 8004d88:	9305      	str	r3, [sp, #20]
 8004d8a:	f104 0338 	add.w	r3, r4, #56	@ 0x38
 8004d8e:	9304      	str	r3, [sp, #16]
 8004d90:	f104 0308 	add.w	r3, r4, #8
 8004d94:	9303      	str	r3, [sp, #12]
 8004d96:	1d23      	adds	r3, r4, #4
 8004d98:	e9cd 4301 	strd	r4, r3, [sp, #4]
 8004d9c:	f10d 0844 	add.w	r8, sp, #68	@ 0x44
 8004da0:	f104 0310 	add.w	r3, r4, #16
 8004da4:	ad10      	add	r5, sp, #64	@ 0x40
 8004da6:	ae0f      	add	r6, sp, #60	@ 0x3c
 8004da8:	af0e      	add	r7, sp, #56	@ 0x38
 8004daa:	f104 0218 	add.w	r2, r4, #24
 8004dae:	9300      	str	r3, [sp, #0]
 8004db0:	4911      	ldr	r1, [pc, #68]	@ (8004df8 <parseRMCString+0xb0>)
 8004db2:	950d      	str	r5, [sp, #52]	@ 0x34
 8004db4:	f104 0314 	add.w	r3, r4, #20
 8004db8:	960c      	str	r6, [sp, #48]	@ 0x30
 8004dba:	970b      	str	r7, [sp, #44]	@ 0x2c
 8004dbc:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8004dc0:	a814      	add	r0, sp, #80	@ 0x50
 8004dc2:	f007 fbbb 	bl	800c53c <siscanf>
		   &epoch1,
		   &epoch2// Epoch time
    );

    // Set validity as an integer (1 for "Valid", 0 for others)
    rmc->isValid = (strcmp(validStr, "Valid") == 0) ? 1 : 0;
 8004dc6:	490d      	ldr	r1, [pc, #52]	@ (8004dfc <parseRMCString+0xb4>)
 8004dc8:	4640      	mov	r0, r8
 8004dca:	f7fb fa01 	bl	80001d0 <strcmp>

    // Store the epoch value
    rmc->date.epoch = ((uint64_t)epoch0 << 32) | ((uint64_t)epoch1 << 16) | (uint64_t)epoch2;
 8004dce:	e9dd 320e 	ldrd	r3, r2, [sp, #56]	@ 0x38
 8004dd2:	17d1      	asrs	r1, r2, #31
 8004dd4:	0409      	lsls	r1, r1, #16
 8004dd6:	ea41 4112 	orr.w	r1, r1, r2, lsr #16
 8004dda:	430b      	orrs	r3, r1
 8004ddc:	9910      	ldr	r1, [sp, #64]	@ 0x40
    rmc->isValid = (strcmp(validStr, "Valid") == 0) ? 1 : 0;
 8004dde:	fab0 f080 	clz	r0, r0
 8004de2:	0940      	lsrs	r0, r0, #5
    rmc->date.epoch = ((uint64_t)epoch0 << 32) | ((uint64_t)epoch1 << 16) | (uint64_t)epoch2;
 8004de4:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 8004de8:	ea43 73e1 	orr.w	r3, r3, r1, asr #31
 8004dec:	e9c4 2308 	strd	r2, r3, [r4, #32]
    rmc->isValid = (strcmp(validStr, "Valid") == 0) ? 1 : 0;
 8004df0:	6320      	str	r0, [r4, #48]	@ 0x30
}
 8004df2:	b054      	add	sp, #336	@ 0x150
 8004df4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004df8:	08012607 	.word	0x08012607
 8004dfc:	0801233f 	.word	0x0801233f

08004e00 <readFlash>:

RMCSTRUCT readFlash(uint32_t addr){
 8004e00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004e02:	460d      	mov	r5, r1
 8004e04:	b0a7      	sub	sp, #156	@ 0x9c
	Uint32ToHex(addr, addr_out_flash, 8);
 8004e06:	2208      	movs	r2, #8
 8004e08:	4942      	ldr	r1, [pc, #264]	@ (8004f14 <readFlash+0x114>)
RMCSTRUCT readFlash(uint32_t addr){
 8004e0a:	4604      	mov	r4, r0
	Uint32ToHex(addr, addr_out_flash, 8);
 8004e0c:	4628      	mov	r0, r5
 8004e0e:	f000 fd42 	bl	8005896 <Uint32ToHex>
	Debug_printf("Address received from FLASH: %s \n", addr_out_flash);
 8004e12:	4940      	ldr	r1, [pc, #256]	@ (8004f14 <readFlash+0x114>)
 8004e14:	4840      	ldr	r0, [pc, #256]	@ (8004f18 <readFlash+0x118>)
 8004e16:	f000 fd53 	bl	80058c0 <Debug_printf>
	W25_Reset();
 8004e1a:	f7ff fa82 	bl	8004322 <W25_Reset>
	W25_ReadData(addr, flashBufferRMCReceived, 128);
 8004e1e:	2280      	movs	r2, #128	@ 0x80
 8004e20:	493e      	ldr	r1, [pc, #248]	@ (8004f1c <readFlash+0x11c>)
 8004e22:	4628      	mov	r0, r5
 8004e24:	f7ff fb9e 	bl	8004564 <W25_ReadData>
	char spi_flash_data_intro[] = "Flash DATA at READ FLASH received: ";
 8004e28:	4b3d      	ldr	r3, [pc, #244]	@ (8004f20 <readFlash+0x120>)
 8004e2a:	aa07      	add	r2, sp, #28
 8004e2c:	f103 0720 	add.w	r7, r3, #32
 8004e30:	4616      	mov	r6, r2
 8004e32:	6818      	ldr	r0, [r3, #0]
 8004e34:	6859      	ldr	r1, [r3, #4]
 8004e36:	4615      	mov	r5, r2
 8004e38:	c503      	stmia	r5!, {r0, r1}
 8004e3a:	3308      	adds	r3, #8
 8004e3c:	42bb      	cmp	r3, r7
 8004e3e:	462a      	mov	r2, r5
 8004e40:	d1f7      	bne.n	8004e32 <readFlash+0x32>
 8004e42:	6818      	ldr	r0, [r3, #0]
 8004e44:	6028      	str	r0, [r5, #0]
	HAL_UART_Transmit(&huart1, (uint8_t*) spi_flash_data_intro, strlen(spi_flash_data_intro), 1000);
 8004e46:	4630      	mov	r0, r6
 8004e48:	f7fb fa22 	bl	8000290 <strlen>
 8004e4c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004e50:	b282      	uxth	r2, r0
 8004e52:	4631      	mov	r1, r6
 8004e54:	4833      	ldr	r0, [pc, #204]	@ (8004f24 <readFlash+0x124>)
 8004e56:	f003 fcd9 	bl	800880c <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, flashBufferRMCReceived, sizeof(flashBufferRMCReceived), 1000);
 8004e5a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004e5e:	492f      	ldr	r1, [pc, #188]	@ (8004f1c <readFlash+0x11c>)
 8004e60:	4830      	ldr	r0, [pc, #192]	@ (8004f24 <readFlash+0x124>)
 8004e62:	2280      	movs	r2, #128	@ 0x80
 8004e64:	f003 fcd2 	bl	800880c <HAL_UART_Transmit>

	RMCSTRUCT rmc = {0};
 8004e68:	2258      	movs	r2, #88	@ 0x58
 8004e6a:	2100      	movs	r1, #0
 8004e6c:	a810      	add	r0, sp, #64	@ 0x40
 8004e6e:	f007 fc0d 	bl	800c68c <memset>
	parseRMCString(flashBufferRMCReceived, &rmc);
 8004e72:	482a      	ldr	r0, [pc, #168]	@ (8004f1c <readFlash+0x11c>)
 8004e74:	a910      	add	r1, sp, #64	@ 0x40
 8004e76:	f7ff ff67 	bl	8004d48 <parseRMCString>

	if(IsPageValid(flashBufferRMCReceived) == 0){
 8004e7a:	4828      	ldr	r0, [pc, #160]	@ (8004f1c <readFlash+0x11c>)
 8004e7c:	f7ff fba4 	bl	80045c8 <IsPageValid>
 8004e80:	4a29      	ldr	r2, [pc, #164]	@ (8004f28 <readFlash+0x128>)
 8004e82:	2800      	cmp	r0, #0
 8004e84:	d141      	bne.n	8004f0a <readFlash+0x10a>
		is_read_flash_valid = 0;
 8004e86:	6010      	str	r0, [r2, #0]
		rmc.isValid = 0;
 8004e88:	901c      	str	r0, [sp, #112]	@ 0x70
		Debug_printf("\n\n--------------------- READING FLASH (RMC) ERROR ----------------------------\n\n");
 8004e8a:	4828      	ldr	r0, [pc, #160]	@ (8004f2c <readFlash+0x12c>)
	}
	else{
		is_read_flash_valid = 1;
		rmc.isValid = 1;
		Debug_printf("\n\n--------------------- READING FLASH (RMC) SUCCESSFULLY ----------------------------\n\n");
 8004e8c:	f000 fd18 	bl	80058c0 <Debug_printf>
	}

	Debug_printf("Date: %02d-%02d-%02d\n", rmc.date.Yr, rmc.date.Mon, rmc.date.Day);
 8004e90:	e9dd 3214 	ldrd	r3, r2, [sp, #80]	@ 0x50
 8004e94:	9916      	ldr	r1, [sp, #88]	@ 0x58
 8004e96:	4826      	ldr	r0, [pc, #152]	@ (8004f30 <readFlash+0x130>)
 8004e98:	f000 fd12 	bl	80058c0 <Debug_printf>

	Debug_printf("Time: %02d:%02d:%02d\n", rmc.tim.hour, rmc.tim.min, rmc.tim.sec);
 8004e9c:	e9dd 2311 	ldrd	r2, r3, [sp, #68]	@ 0x44
 8004ea0:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8004ea2:	4824      	ldr	r0, [pc, #144]	@ (8004f34 <readFlash+0x134>)
 8004ea4:	f000 fd0c 	bl	80058c0 <Debug_printf>

	Debug_printf("Location: %.6f %c, %.6f %c\n", rmc.lcation.latitude, rmc.lcation.NS,
 8004ea8:	f89d 3090 	ldrb.w	r3, [sp, #144]	@ 0x90
 8004eac:	9304      	str	r3, [sp, #16]
 8004eae:	e9dd 2322 	ldrd	r2, r3, [sp, #136]	@ 0x88
 8004eb2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004eb6:	f89d 3080 	ldrb.w	r3, [sp, #128]	@ 0x80
 8004eba:	9300      	str	r3, [sp, #0]
 8004ebc:	481e      	ldr	r0, [pc, #120]	@ (8004f38 <readFlash+0x138>)
 8004ebe:	e9dd 231e 	ldrd	r2, r3, [sp, #120]	@ 0x78
 8004ec2:	f000 fcfd 	bl	80058c0 <Debug_printf>
		   rmc.lcation.longitude, rmc.lcation.EW);

	Debug_printf("Speed: %.2f\n", rmc.speed);
 8004ec6:	981a      	ldr	r0, [sp, #104]	@ 0x68
 8004ec8:	f7fb fb4e 	bl	8000568 <__aeabi_f2d>
 8004ecc:	4602      	mov	r2, r0
 8004ece:	460b      	mov	r3, r1
 8004ed0:	481a      	ldr	r0, [pc, #104]	@ (8004f3c <readFlash+0x13c>)
 8004ed2:	f000 fcf5 	bl	80058c0 <Debug_printf>

	Debug_printf("Course: %.2f\n", rmc.course);
 8004ed6:	981b      	ldr	r0, [sp, #108]	@ 0x6c
 8004ed8:	f7fb fb46 	bl	8000568 <__aeabi_f2d>
 8004edc:	4602      	mov	r2, r0
 8004ede:	460b      	mov	r3, r1
 8004ee0:	4817      	ldr	r0, [pc, #92]	@ (8004f40 <readFlash+0x140>)
 8004ee2:	f000 fced 	bl	80058c0 <Debug_printf>

	Debug_printf("Validity: %s\n", rmc.isValid ? "Valid" : "Invalid");
 8004ee6:	4b17      	ldr	r3, [pc, #92]	@ (8004f44 <readFlash+0x144>)
 8004ee8:	991c      	ldr	r1, [sp, #112]	@ 0x70
 8004eea:	4a17      	ldr	r2, [pc, #92]	@ (8004f48 <readFlash+0x148>)
 8004eec:	4817      	ldr	r0, [pc, #92]	@ (8004f4c <readFlash+0x14c>)
 8004eee:	2900      	cmp	r1, #0
 8004ef0:	bf0c      	ite	eq
 8004ef2:	4611      	moveq	r1, r2
 8004ef4:	4619      	movne	r1, r3
 8004ef6:	f000 fce3 	bl	80058c0 <Debug_printf>

	return rmc;
 8004efa:	2258      	movs	r2, #88	@ 0x58
 8004efc:	a910      	add	r1, sp, #64	@ 0x40
 8004efe:	4620      	mov	r0, r4
 8004f00:	f008 fa18 	bl	800d334 <memcpy>
}
 8004f04:	4620      	mov	r0, r4
 8004f06:	b027      	add	sp, #156	@ 0x9c
 8004f08:	bdf0      	pop	{r4, r5, r6, r7, pc}
		is_read_flash_valid = 1;
 8004f0a:	2301      	movs	r3, #1
		Debug_printf("\n\n--------------------- READING FLASH (RMC) SUCCESSFULLY ----------------------------\n\n");
 8004f0c:	4810      	ldr	r0, [pc, #64]	@ (8004f50 <readFlash+0x150>)
		is_read_flash_valid = 1;
 8004f0e:	6013      	str	r3, [r2, #0]
		rmc.isValid = 1;
 8004f10:	931c      	str	r3, [sp, #112]	@ 0x70
		Debug_printf("\n\n--------------------- READING FLASH (RMC) SUCCESSFULLY ----------------------------\n\n");
 8004f12:	e7bb      	b.n	8004e8c <readFlash+0x8c>
 8004f14:	20007294 	.word	0x20007294
 8004f18:	08012641 	.word	0x08012641
 8004f1c:	200084b0 	.word	0x200084b0
 8004f20:	0801277d 	.word	0x0801277d
 8004f24:	20006fac 	.word	0x20006fac
 8004f28:	20000018 	.word	0x20000018
 8004f2c:	08012663 	.word	0x08012663
 8004f30:	0801270c 	.word	0x0801270c
 8004f34:	08012722 	.word	0x08012722
 8004f38:	08012738 	.word	0x08012738
 8004f3c:	08012754 	.word	0x08012754
 8004f40:	08012761 	.word	0x08012761
 8004f44:	0801233f 	.word	0x0801233f
 8004f48:	08012345 	.word	0x08012345
 8004f4c:	0801276f 	.word	0x0801276f
 8004f50:	080126b4 	.word	0x080126b4

08004f54 <receiveRMCDataFromGPS>:


void receiveRMCDataFromGPS(void) {
 8004f54:	b5f0      	push	{r4, r5, r6, r7, lr}
	static int countRMCReceived = 0;
//	uint8_t output_buffer[70];

	// Wait until there are at least 10 messages in the queue
	osStatus_t status = osMessageQueueGet(RMC_MailQFLASHIdHandle, &receivedDataRMCFLASH, NULL, 1000); // Wait for mail
 8004f56:	4871      	ldr	r0, [pc, #452]	@ (800511c <receiveRMCDataFromGPS+0x1c8>)
 8004f58:	4d71      	ldr	r5, [pc, #452]	@ (8005120 <receiveRMCDataFromGPS+0x1cc>)
 8004f5a:	6800      	ldr	r0, [r0, #0]
void receiveRMCDataFromGPS(void) {
 8004f5c:	b097      	sub	sp, #92	@ 0x5c
	osStatus_t status = osMessageQueueGet(RMC_MailQFLASHIdHandle, &receivedDataRMCFLASH, NULL, 1000); // Wait for mail
 8004f5e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004f62:	2200      	movs	r2, #0
 8004f64:	4629      	mov	r1, r5
 8004f66:	f003 fee7 	bl	8008d38 <osMessageQueueGet>
	if(status == osOK){
 8004f6a:	4606      	mov	r6, r0
 8004f6c:	2800      	cmp	r0, #0
 8004f6e:	f040 80cd 	bne.w	800510c <receiveRMCDataFromGPS+0x1b8>
		Debug_printf("\nReceived  RMC Data SPI FLASH: \n");
 8004f72:	486c      	ldr	r0, [pc, #432]	@ (8005124 <receiveRMCDataFromGPS+0x1d0>)
		//Sending DATA to GSM
		rmc_flash.lcation.latitude = receivedDataRMCFLASH.lcation.latitude;
 8004f74:	4c6c      	ldr	r4, [pc, #432]	@ (8005128 <receiveRMCDataFromGPS+0x1d4>)
		Debug_printf("\nReceived  RMC Data SPI FLASH: \n");
 8004f76:	f000 fca3 	bl	80058c0 <Debug_printf>
		rmc_flash.lcation.latitude = receivedDataRMCFLASH.lcation.latitude;
 8004f7a:	e9d5 230e 	ldrd	r2, r3, [r5, #56]	@ 0x38
 8004f7e:	e9c4 230e 	strd	r2, r3, [r4, #56]	@ 0x38
		rmc_flash.lcation.longitude = receivedDataRMCFLASH.lcation.longitude;
 8004f82:	e9d5 2312 	ldrd	r2, r3, [r5, #72]	@ 0x48
 8004f86:	e9c4 2312 	strd	r2, r3, [r4, #72]	@ 0x48
		rmc_flash.speed = receivedDataRMCFLASH.speed;
 8004f8a:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 8004f8c:	62a3      	str	r3, [r4, #40]	@ 0x28
		rmc_flash.course = receivedDataRMCFLASH.course;
 8004f8e:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8004f90:	62e3      	str	r3, [r4, #44]	@ 0x2c
		rmc_flash.lcation.NS = receivedDataRMCFLASH.lcation.NS;
 8004f92:	f895 3040 	ldrb.w	r3, [r5, #64]	@ 0x40
 8004f96:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
		rmc_flash.lcation.EW = receivedDataRMCFLASH.lcation.EW;
 8004f9a:	f895 3050 	ldrb.w	r3, [r5, #80]	@ 0x50
 8004f9e:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
		rmc_flash.isValid = receivedDataRMCFLASH.isValid;
 8004fa2:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8004fa4:	6323      	str	r3, [r4, #48]	@ 0x30
		rmc_flash.tim.hour = receivedDataRMCFLASH.tim.hour;
 8004fa6:	682b      	ldr	r3, [r5, #0]
 8004fa8:	6023      	str	r3, [r4, #0]
		rmc_flash.tim.min = receivedDataRMCFLASH.tim.min;
 8004faa:	686b      	ldr	r3, [r5, #4]
 8004fac:	6063      	str	r3, [r4, #4]
		rmc_flash.tim.sec = receivedDataRMCFLASH.tim.sec;
 8004fae:	68ab      	ldr	r3, [r5, #8]
 8004fb0:	60a3      	str	r3, [r4, #8]
		rmc_flash.date.Yr = receivedDataRMCFLASH.date.Yr;
 8004fb2:	69ab      	ldr	r3, [r5, #24]
		rmc_flash.date.Mon = receivedDataRMCFLASH.date.Mon;
 8004fb4:	696a      	ldr	r2, [r5, #20]
 8004fb6:	6162      	str	r2, [r4, #20]
		rmc_flash.date.Day = receivedDataRMCFLASH.date.Day;

		if(rmc_flash.date.Yr >= 24){
 8004fb8:	2b17      	cmp	r3, #23
		rmc_flash.date.Day = receivedDataRMCFLASH.date.Day;
 8004fba:	692a      	ldr	r2, [r5, #16]
		rmc_flash.date.Yr = receivedDataRMCFLASH.date.Yr;
 8004fbc:	61a3      	str	r3, [r4, #24]
		rmc_flash.date.Day = receivedDataRMCFLASH.date.Day;
 8004fbe:	6122      	str	r2, [r4, #16]
		if(rmc_flash.date.Yr >= 24){
 8004fc0:	dd4b      	ble.n	800505a <receiveRMCDataFromGPS+0x106>
			countRMCReceived++;
 8004fc2:	4f5a      	ldr	r7, [pc, #360]	@ (800512c <receiveRMCDataFromGPS+0x1d8>)
			Debug_printf("\n\n --------------------------------- COUNT RMC RECEIVED AT SPI FLASH is %d --------------------------\n\n", countRMCReceived);
 8004fc4:	485a      	ldr	r0, [pc, #360]	@ (8005130 <receiveRMCDataFromGPS+0x1dc>)
			countRMCReceived++;
 8004fc6:	6839      	ldr	r1, [r7, #0]
 8004fc8:	3101      	adds	r1, #1
 8004fca:	6039      	str	r1, [r7, #0]
			Debug_printf("\n\n --------------------------------- COUNT RMC RECEIVED AT SPI FLASH is %d --------------------------\n\n", countRMCReceived);
 8004fcc:	f000 fc78 	bl	80058c0 <Debug_printf>


			Debug_printf("Time Received from GPS AT SPI FLASH: %d:%d:%d\n", rmc_flash.tim.hour, rmc_flash.tim.min, rmc_flash.tim.sec);
 8004fd0:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 8004fd4:	6821      	ldr	r1, [r4, #0]
 8004fd6:	4857      	ldr	r0, [pc, #348]	@ (8005134 <receiveRMCDataFromGPS+0x1e0>)
 8004fd8:	f000 fc72 	bl	80058c0 <Debug_printf>
//
//		Debug_printf("Location Received FROM GPS AT SPI FLASH: %.6f %c, %.6f %c\n", rmc_flash.lcation.latitude, rmc_flash.lcation.NS, rmc_flash.lcation.longitude, rmc_flash.lcation.EW);
//
//		Debug_printf("Speed FROM GPS AT SPI FLASH: %.2f, Course: %.2f, Valid: %d\n\n\n", rmc_flash.speed, rmc_flash.course, rmc_flash.isValid);

			format_rmc_data(&rmc_flash,(char*) rmcBufferDemo, 128);
 8004fdc:	4956      	ldr	r1, [pc, #344]	@ (8005138 <receiveRMCDataFromGPS+0x1e4>)
 8004fde:	2280      	movs	r2, #128	@ 0x80
 8004fe0:	4620      	mov	r0, r4
 8004fe2:	f7ff fc7f 	bl	80048e4 <format_rmc_data>

			if(countRMCReceived == 29){
 8004fe6:	683b      	ldr	r3, [r7, #0]
 8004fe8:	2b1d      	cmp	r3, #29
 8004fea:	d138      	bne.n	800505e <receiveRMCDataFromGPS+0x10a>

				saveRMC();
 8004fec:	f7ff fcd0 	bl	8004990 <saveRMC>
				Debug_printf("---------------------Sending the current data----------------");
 8004ff0:	4852      	ldr	r0, [pc, #328]	@ (800513c <receiveRMCDataFromGPS+0x1e8>)
				mail_gsm.rmc.lcation.latitude = rmc_flash.lcation.latitude;
 8004ff2:	4d53      	ldr	r5, [pc, #332]	@ (8005140 <receiveRMCDataFromGPS+0x1ec>)
				Debug_printf("---------------------Sending the current data----------------");
 8004ff4:	f000 fc64 	bl	80058c0 <Debug_printf>
				mail_gsm.rmc.lcation.latitude = rmc_flash.lcation.latitude;
 8004ff8:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	@ 0x38
 8004ffc:	e9c5 230e 	strd	r2, r3, [r5, #56]	@ 0x38
				mail_gsm.rmc.lcation.longitude = rmc_flash.lcation.longitude;
 8005000:	e9d4 2312 	ldrd	r2, r3, [r4, #72]	@ 0x48
 8005004:	e9c5 2312 	strd	r2, r3, [r5, #72]	@ 0x48
				mail_gsm.rmc.speed = rmc_flash.speed;
 8005008:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800500a:	62ab      	str	r3, [r5, #40]	@ 0x28
				mail_gsm.rmc.course = rmc_flash.course;
 800500c:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800500e:	62eb      	str	r3, [r5, #44]	@ 0x2c
				mail_gsm.rmc.lcation.NS = rmc_flash.lcation.NS;
 8005010:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 8005014:	f885 3040 	strb.w	r3, [r5, #64]	@ 0x40
				mail_gsm.rmc.lcation.EW = rmc_flash.lcation.EW;
 8005018:	f894 3050 	ldrb.w	r3, [r4, #80]	@ 0x50
 800501c:	f885 3050 	strb.w	r3, [r5, #80]	@ 0x50
				mail_gsm.rmc.isValid = rmc_flash.isValid;
 8005020:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8005022:	632b      	str	r3, [r5, #48]	@ 0x30
				mail_gsm.rmc.tim.hour = rmc_flash.tim.hour;
 8005024:	6823      	ldr	r3, [r4, #0]
 8005026:	602b      	str	r3, [r5, #0]
				mail_gsm.rmc.tim.min = rmc_flash.tim.min;
 8005028:	6863      	ldr	r3, [r4, #4]
 800502a:	606b      	str	r3, [r5, #4]
				mail_gsm.rmc.tim.sec = rmc_flash.tim.sec;
 800502c:	68a3      	ldr	r3, [r4, #8]
 800502e:	60ab      	str	r3, [r5, #8]
				mail_gsm.rmc.date.Yr = rmc_flash.date.Yr;
 8005030:	69a3      	ldr	r3, [r4, #24]
 8005032:	61ab      	str	r3, [r5, #24]
				mail_gsm.rmc.date.Mon = rmc_flash.date.Mon;
 8005034:	6963      	ldr	r3, [r4, #20]
 8005036:	616b      	str	r3, [r5, #20]
				mail_gsm.rmc.date.Day = rmc_flash.date.Day;
 8005038:	6923      	ldr	r3, [r4, #16]
 800503a:	612b      	str	r3, [r5, #16]
				mail_gsm.address = current_addr;
 800503c:	4b41      	ldr	r3, [pc, #260]	@ (8005144 <receiveRMCDataFromGPS+0x1f0>)

				Uint32ToHex(mail_gsm.address, addr_out_flash, 8);
 800503e:	4942      	ldr	r1, [pc, #264]	@ (8005148 <receiveRMCDataFromGPS+0x1f4>)
				mail_gsm.address = current_addr;
 8005040:	6818      	ldr	r0, [r3, #0]
 8005042:	65a8      	str	r0, [r5, #88]	@ 0x58
				Uint32ToHex(mail_gsm.address, addr_out_flash, 8);
 8005044:	2208      	movs	r2, #8
 8005046:	f000 fc26 	bl	8005896 <Uint32ToHex>
				Debug_printf("-------------------SENDING CURRENT ADDR DATA: %s----------------------", addr_out_flash);
 800504a:	493f      	ldr	r1, [pc, #252]	@ (8005148 <receiveRMCDataFromGPS+0x1f4>)
 800504c:	483f      	ldr	r0, [pc, #252]	@ (800514c <receiveRMCDataFromGPS+0x1f8>)
 800504e:	f000 fc37 	bl	80058c0 <Debug_printf>
				sendRMCDataWithAddrToGSM(&mail_gsm);
 8005052:	4628      	mov	r0, r5
 8005054:	f7ff fe60 	bl	8004d18 <sendRMCDataWithAddrToGSM>
				countRMCReceived = 0;
 8005058:	603e      	str	r6, [r7, #0]
		// Free memory after use
	}
	else{
		Debug_printf("\n\n-------------------------- RECEIVED MAIL FROM GPS AT SPI FLASH FAILED: %d ------------------------\n\n",status);
	}
}
 800505a:	b017      	add	sp, #92	@ 0x5c
 800505c:	bdf0      	pop	{r4, r5, r6, r7, pc}
				Debug_printf("\n\n ---------------------------- There is no mail in SPI FLASH FROM GPS ------------------\n\n");
 800505e:	483c      	ldr	r0, [pc, #240]	@ (8005150 <receiveRMCDataFromGPS+0x1fc>)
 8005060:	f000 fc2e 	bl	80058c0 <Debug_printf>
				if(is_using_flash == 1 && is_disconnect == 0 && is_keep_up == 1){
 8005064:	4b3b      	ldr	r3, [pc, #236]	@ (8005154 <receiveRMCDataFromGPS+0x200>)
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	2b01      	cmp	r3, #1
 800506a:	d1f6      	bne.n	800505a <receiveRMCDataFromGPS+0x106>
 800506c:	4b3a      	ldr	r3, [pc, #232]	@ (8005158 <receiveRMCDataFromGPS+0x204>)
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	2b00      	cmp	r3, #0
 8005072:	d1f2      	bne.n	800505a <receiveRMCDataFromGPS+0x106>
 8005074:	4b39      	ldr	r3, [pc, #228]	@ (800515c <receiveRMCDataFromGPS+0x208>)
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	2b01      	cmp	r3, #1
 800507a:	d1ee      	bne.n	800505a <receiveRMCDataFromGPS+0x106>
					if(checkAddrExistInQueue(start_addr_disconnect, &result_addr_queue) && (start_addr_disconnect <= (FLASH_END_ADDRESS - 0x100))){
 800507c:	4c38      	ldr	r4, [pc, #224]	@ (8005160 <receiveRMCDataFromGPS+0x20c>)
 800507e:	4939      	ldr	r1, [pc, #228]	@ (8005164 <receiveRMCDataFromGPS+0x210>)
 8005080:	6820      	ldr	r0, [r4, #0]
 8005082:	f7fe f991 	bl	80033a8 <checkAddrExistInQueue>
 8005086:	b1b0      	cbz	r0, 80050b6 <receiveRMCDataFromGPS+0x162>
 8005088:	6823      	ldr	r3, [r4, #0]
 800508a:	f5b3 4f9e 	cmp.w	r3, #20224	@ 0x4f00
 800508e:	d812      	bhi.n	80050b6 <receiveRMCDataFromGPS+0x162>
						Uint32ToHex(start_addr_disconnect, addr_out_flash, 8);
 8005090:	2208      	movs	r2, #8
 8005092:	6820      	ldr	r0, [r4, #0]
 8005094:	492c      	ldr	r1, [pc, #176]	@ (8005148 <receiveRMCDataFromGPS+0x1f4>)
 8005096:	f000 fbfe 	bl	8005896 <Uint32ToHex>
						Debug_printf("\n-------SKIPPING address cause it was sent already: %s--------\n", addr_out_flash);
 800509a:	492b      	ldr	r1, [pc, #172]	@ (8005148 <receiveRMCDataFromGPS+0x1f4>)
 800509c:	4832      	ldr	r0, [pc, #200]	@ (8005168 <receiveRMCDataFromGPS+0x214>)
 800509e:	f000 fc0f 	bl	80058c0 <Debug_printf>
						if(start_addr_disconnect <= (current_addr - 128)) start_addr_disconnect +=128;
 80050a2:	4b28      	ldr	r3, [pc, #160]	@ (8005144 <receiveRMCDataFromGPS+0x1f0>)
 80050a4:	6822      	ldr	r2, [r4, #0]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	3b80      	subs	r3, #128	@ 0x80
 80050aa:	4293      	cmp	r3, r2
 80050ac:	d3d5      	bcc.n	800505a <receiveRMCDataFromGPS+0x106>
 80050ae:	6823      	ldr	r3, [r4, #0]
 80050b0:	3380      	adds	r3, #128	@ 0x80
 80050b2:	6023      	str	r3, [r4, #0]
 80050b4:	e7d1      	b.n	800505a <receiveRMCDataFromGPS+0x106>
						addr_to_get_from_FLASH = start_addr_disconnect - (count_shiftleft * 128);
 80050b6:	4a2d      	ldr	r2, [pc, #180]	@ (800516c <receiveRMCDataFromGPS+0x218>)
 80050b8:	6823      	ldr	r3, [r4, #0]
 80050ba:	7812      	ldrb	r2, [r2, #0]
 80050bc:	4e2c      	ldr	r6, [pc, #176]	@ (8005170 <receiveRMCDataFromGPS+0x21c>)
						Uint32ToHex(start_addr_disconnect, addr_out_flash, 8);
 80050be:	6820      	ldr	r0, [r4, #0]
 80050c0:	4921      	ldr	r1, [pc, #132]	@ (8005148 <receiveRMCDataFromGPS+0x1f4>)
						mail_gsm.rmc = readFlash(addr_to_get_from_FLASH);
 80050c2:	4d1f      	ldr	r5, [pc, #124]	@ (8005140 <receiveRMCDataFromGPS+0x1ec>)
						addr_to_get_from_FLASH = start_addr_disconnect - (count_shiftleft * 128);
 80050c4:	eba3 13c2 	sub.w	r3, r3, r2, lsl #7
						if(addr_to_get_from_FLASH < FLASH_START_ADDRESS) addr_to_get_from_FLASH = FLASH_START_ADDRESS;
 80050c8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80050cc:	bf38      	it	cc
 80050ce:	f44f 5340 	movcc.w	r3, #12288	@ 0x3000
						Uint32ToHex(start_addr_disconnect, addr_out_flash, 8);
 80050d2:	2208      	movs	r2, #8
						addr_to_get_from_FLASH = start_addr_disconnect - (count_shiftleft * 128);
 80050d4:	6033      	str	r3, [r6, #0]
						Uint32ToHex(start_addr_disconnect, addr_out_flash, 8);
 80050d6:	f000 fbde 	bl	8005896 <Uint32ToHex>
						Debug_printf("\n---------------- Sending data in disconnected phase to GSM: %s -------------------\n", addr_out_flash);
 80050da:	491b      	ldr	r1, [pc, #108]	@ (8005148 <receiveRMCDataFromGPS+0x1f4>)
 80050dc:	4825      	ldr	r0, [pc, #148]	@ (8005174 <receiveRMCDataFromGPS+0x220>)
 80050de:	f000 fbef 	bl	80058c0 <Debug_printf>
						mail_gsm.rmc = readFlash(addr_to_get_from_FLASH);
 80050e2:	6831      	ldr	r1, [r6, #0]
 80050e4:	4668      	mov	r0, sp
 80050e6:	f7ff fe8b 	bl	8004e00 <readFlash>
 80050ea:	2258      	movs	r2, #88	@ 0x58
 80050ec:	4669      	mov	r1, sp
 80050ee:	4628      	mov	r0, r5
 80050f0:	f008 f920 	bl	800d334 <memcpy>
						mail_gsm.address = start_addr_disconnect;
 80050f4:	6823      	ldr	r3, [r4, #0]
 80050f6:	65ab      	str	r3, [r5, #88]	@ 0x58
						if(is_read_flash_valid == 1)
 80050f8:	4b1f      	ldr	r3, [pc, #124]	@ (8005178 <receiveRMCDataFromGPS+0x224>)
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	2b01      	cmp	r3, #1
 80050fe:	d1ac      	bne.n	800505a <receiveRMCDataFromGPS+0x106>
							sendRMCDataWithAddrToGSM(&mail_gsm);
 8005100:	4628      	mov	r0, r5
}
 8005102:	b017      	add	sp, #92	@ 0x5c
 8005104:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
							sendRMCDataWithAddrToGSM(&mail_gsm);
 8005108:	f7ff be06 	b.w	8004d18 <sendRMCDataWithAddrToGSM>
		Debug_printf("\n\n-------------------------- RECEIVED MAIL FROM GPS AT SPI FLASH FAILED: %d ------------------------\n\n",status);
 800510c:	4601      	mov	r1, r0
 800510e:	481b      	ldr	r0, [pc, #108]	@ (800517c <receiveRMCDataFromGPS+0x228>)
}
 8005110:	b017      	add	sp, #92	@ 0x5c
 8005112:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		Debug_printf("\n\n-------------------------- RECEIVED MAIL FROM GPS AT SPI FLASH FAILED: %d ------------------------\n\n",status);
 8005116:	f000 bbd3 	b.w	80058c0 <Debug_printf>
 800511a:	bf00      	nop
 800511c:	20003ca8 	.word	0x20003ca8
 8005120:	200072a0 	.word	0x200072a0
 8005124:	080127a1 	.word	0x080127a1
 8005128:	20007358 	.word	0x20007358
 800512c:	20007290 	.word	0x20007290
 8005130:	080127c2 	.word	0x080127c2
 8005134:	0801282a 	.word	0x0801282a
 8005138:	20008430 	.word	0x20008430
 800513c:	08012859 	.word	0x08012859
 8005140:	200072f8 	.word	0x200072f8
 8005144:	2000001c 	.word	0x2000001c
 8005148:	20007294 	.word	0x20007294
 800514c:	08012897 	.word	0x08012897
 8005150:	080128de 	.word	0x080128de
 8005154:	20001e50 	.word	0x20001e50
 8005158:	20001e54 	.word	0x20001e54
 800515c:	20001e4c 	.word	0x20001e4c
 8005160:	20001c2c 	.word	0x20001c2c
 8005164:	20001c30 	.word	0x20001c30
 8005168:	0801293a 	.word	0x0801293a
 800516c:	20001e48 	.word	0x20001e48
 8005170:	20008534 	.word	0x20008534
 8005174:	0801297a 	.word	0x0801297a
 8005178:	20000018 	.word	0x20000018
 800517c:	080129cf 	.word	0x080129cf

08005180 <StartSpiFlash>:



void StartSpiFlash(void const * argument)
{
 8005180:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  /* USER CODE BEGIN StartSpiFlash */
  /* Infinite loop */
	Debug_printf("\n\n\n------------------------------- STARTING SPI FLASH ------------------------------\n\n\n");
 8005184:	4848      	ldr	r0, [pc, #288]	@ (80052a8 <StartSpiFlash+0x128>)
//	myMutex = osMutexNew(NULL);  // NULL means default attributes
//	if (myMutex == NULL) {
//		Debug_printf("\n\n ----------------- Failed to create mutex -----------------\n\n");
//	}
//	Debug_printf("\n\n --------------------Creating a MESSAGE QUEUE --------------------- \n\n");
	rmc_saved = readFlash(0x9000);
 8005186:	4c49      	ldr	r4, [pc, #292]	@ (80052ac <StartSpiFlash+0x12c>)
	current_addr = address_rmc;
 8005188:	4e49      	ldr	r6, [pc, #292]	@ (80052b0 <StartSpiFlash+0x130>)
{
 800518a:	b09d      	sub	sp, #116	@ 0x74
	Debug_printf("\n\n\n------------------------------- STARTING SPI FLASH ------------------------------\n\n\n");
 800518c:	f000 fb98 	bl	80058c0 <Debug_printf>
	current_addr = address_rmc;
 8005190:	4b48      	ldr	r3, [pc, #288]	@ (80052b4 <StartSpiFlash+0x134>)
	rmc_saved = readFlash(0x9000);
 8005192:	f44f 4110 	mov.w	r1, #36864	@ 0x9000
	current_addr = address_rmc;
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	6033      	str	r3, [r6, #0]
	rmc_saved = readFlash(0x9000);
 800519a:	4668      	mov	r0, sp
 800519c:	f7ff fe30 	bl	8004e00 <readFlash>
 80051a0:	2258      	movs	r2, #88	@ 0x58
 80051a2:	4669      	mov	r1, sp
 80051a4:	4620      	mov	r0, r4
 80051a6:	f008 f8c5 	bl	800d334 <memcpy>
	Debug_printf("\n-------------------------- BACK UP GPS FROM FLASH ----------------------- \n");
 80051aa:	4843      	ldr	r0, [pc, #268]	@ (80052b8 <StartSpiFlash+0x138>)
 80051ac:	f000 fb88 	bl	80058c0 <Debug_printf>
	if(rmc_saved.isValid == 0){
 80051b0:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80051b2:	b9f5      	cbnz	r5, 80051f2 <StartSpiFlash+0x72>
		Debug_printf("There is not back up GPS from FLASH");
 80051b4:	4841      	ldr	r0, [pc, #260]	@ (80052bc <StartSpiFlash+0x13c>)
 80051b6:	f000 fb83 	bl	80058c0 <Debug_printf>
		rmc_saved.tim.hour = 0;
		rmc_saved.tim.min = 0;
		rmc_saved.tim.sec = 0;
		rmc_saved.lcation.latitude = 20.998022;
 80051ba:	a337      	add	r3, pc, #220	@ (adr r3, 8005298 <StartSpiFlash+0x118>)
 80051bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051c0:	e9c4 230e 	strd	r2, r3, [r4, #56]	@ 0x38
		rmc_saved.lcation.longitude = 105.794756;
 80051c4:	a336      	add	r3, pc, #216	@ (adr r3, 80052a0 <StartSpiFlash+0x120>)
 80051c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051ca:	e9c4 2312 	strd	r2, r3, [r4, #72]	@ 0x48
		rmc_saved.speed = 22.4;
 80051ce:	4b3c      	ldr	r3, [pc, #240]	@ (80052c0 <StartSpiFlash+0x140>)
 80051d0:	62a3      	str	r3, [r4, #40]	@ 0x28
		rmc_saved.course = 30.5;
 80051d2:	4b3c      	ldr	r3, [pc, #240]	@ (80052c4 <StartSpiFlash+0x144>)
 80051d4:	62e3      	str	r3, [r4, #44]	@ 0x2c
		rmc_saved.lcation.NS = 'N';
 80051d6:	234e      	movs	r3, #78	@ 0x4e
 80051d8:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
		rmc_saved.tim.min = 0;
 80051dc:	e9c4 5500 	strd	r5, r5, [r4]
		rmc_saved.lcation.EW = 'E';
 80051e0:	2345      	movs	r3, #69	@ 0x45
		rmc_saved.isValid = 1;
		rmc_saved.date.Day = 0;
		rmc_saved.date.Mon = 0;
 80051e2:	e9c4 5504 	strd	r5, r5, [r4, #16]
		rmc_saved.lcation.EW = 'E';
 80051e6:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
		rmc_saved.isValid = 1;
 80051ea:	2301      	movs	r3, #1
		rmc_saved.tim.sec = 0;
 80051ec:	60a5      	str	r5, [r4, #8]
		rmc_saved.isValid = 1;
 80051ee:	6323      	str	r3, [r4, #48]	@ 0x30
		rmc_saved.date.Yr = 0;
 80051f0:	61a5      	str	r5, [r4, #24]
		uint32_t freeStack2 = osThreadGetStackSpace(SpiFlashHandle);
		Debug_printf("\n\n --------------Thread SPI FLASH %p is running low on stack: %04d bytes remaining----------\n\n", SpiFlashHandle, freeStack2);
		W25_Reset();
		W25_ReadJedecID();
		W25_Reset();
		W25_ReadData(current_addr, flashBufferRMCReceived, 128);
 80051f2:	f8df 80f4 	ldr.w	r8, [pc, #244]	@ 80052e8 <StartSpiFlash+0x168>
		char spi_flash_data_intro[] = "Flash DATA received: ";
		HAL_UART_Transmit(&huart1, (uint8_t*) spi_flash_data_intro, strlen(spi_flash_data_intro), 1000);
 80051f6:	4f34      	ldr	r7, [pc, #208]	@ (80052c8 <StartSpiFlash+0x148>)
		HAL_UART_Transmit(&huart1, flashBufferRMCReceived, sizeof(flashBufferRMCReceived), 1000);
		Uint32ToHex(current_addr, addr_out_flash, 8);
 80051f8:	4d34      	ldr	r5, [pc, #208]	@ (80052cc <StartSpiFlash+0x14c>)
		uint32_t freeStack2 = osThreadGetStackSpace(SpiFlashHandle);
 80051fa:	4c35      	ldr	r4, [pc, #212]	@ (80052d0 <StartSpiFlash+0x150>)
		osDelay(125);
 80051fc:	207d      	movs	r0, #125	@ 0x7d
 80051fe:	f003 fcf5 	bl	8008bec <osDelay>
		Debug_printf("\n\n--------------------------- INSIDE SPI FLASH --------------------------------\n\n");
 8005202:	4834      	ldr	r0, [pc, #208]	@ (80052d4 <StartSpiFlash+0x154>)
 8005204:	f000 fb5c 	bl	80058c0 <Debug_printf>
		uint32_t freeStack2 = osThreadGetStackSpace(SpiFlashHandle);
 8005208:	6820      	ldr	r0, [r4, #0]
 800520a:	f003 fcdb 	bl	8008bc4 <osThreadGetStackSpace>
		Debug_printf("\n\n --------------Thread SPI FLASH %p is running low on stack: %04d bytes remaining----------\n\n", SpiFlashHandle, freeStack2);
 800520e:	6821      	ldr	r1, [r4, #0]
		uint32_t freeStack2 = osThreadGetStackSpace(SpiFlashHandle);
 8005210:	4602      	mov	r2, r0
		Debug_printf("\n\n --------------Thread SPI FLASH %p is running low on stack: %04d bytes remaining----------\n\n", SpiFlashHandle, freeStack2);
 8005212:	4831      	ldr	r0, [pc, #196]	@ (80052d8 <StartSpiFlash+0x158>)
 8005214:	f000 fb54 	bl	80058c0 <Debug_printf>
		W25_Reset();
 8005218:	f7ff f883 	bl	8004322 <W25_Reset>
		W25_ReadJedecID();
 800521c:	f7ff f8ae 	bl	800437c <W25_ReadJedecID>
		W25_Reset();
 8005220:	f7ff f87f 	bl	8004322 <W25_Reset>
		W25_ReadData(current_addr, flashBufferRMCReceived, 128);
 8005224:	2280      	movs	r2, #128	@ 0x80
 8005226:	6830      	ldr	r0, [r6, #0]
 8005228:	4641      	mov	r1, r8
 800522a:	f7ff f99b 	bl	8004564 <W25_ReadData>
		char spi_flash_data_intro[] = "Flash DATA received: ";
 800522e:	4b2b      	ldr	r3, [pc, #172]	@ (80052dc <StartSpiFlash+0x15c>)
 8005230:	aa16      	add	r2, sp, #88	@ 0x58
 8005232:	f103 0c10 	add.w	ip, r3, #16
 8005236:	4691      	mov	r9, r2
 8005238:	6818      	ldr	r0, [r3, #0]
 800523a:	6859      	ldr	r1, [r3, #4]
 800523c:	4614      	mov	r4, r2
 800523e:	c403      	stmia	r4!, {r0, r1}
 8005240:	3308      	adds	r3, #8
 8005242:	4563      	cmp	r3, ip
 8005244:	4622      	mov	r2, r4
 8005246:	d1f7      	bne.n	8005238 <StartSpiFlash+0xb8>
 8005248:	6818      	ldr	r0, [r3, #0]
 800524a:	889b      	ldrh	r3, [r3, #4]
 800524c:	6020      	str	r0, [r4, #0]
 800524e:	80a3      	strh	r3, [r4, #4]
		HAL_UART_Transmit(&huart1, (uint8_t*) spi_flash_data_intro, strlen(spi_flash_data_intro), 1000);
 8005250:	4648      	mov	r0, r9
 8005252:	f7fb f81d 	bl	8000290 <strlen>
 8005256:	4649      	mov	r1, r9
 8005258:	b282      	uxth	r2, r0
 800525a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800525e:	4638      	mov	r0, r7
 8005260:	f003 fad4 	bl	800880c <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart1, flashBufferRMCReceived, sizeof(flashBufferRMCReceived), 1000);
 8005264:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005268:	4641      	mov	r1, r8
 800526a:	2280      	movs	r2, #128	@ 0x80
 800526c:	4638      	mov	r0, r7
 800526e:	f003 facd 	bl	800880c <HAL_UART_Transmit>
		Uint32ToHex(current_addr, addr_out_flash, 8);
 8005272:	2208      	movs	r2, #8
 8005274:	6830      	ldr	r0, [r6, #0]
 8005276:	4629      	mov	r1, r5
 8005278:	f000 fb0d 	bl	8005896 <Uint32ToHex>
		Debug_printf("\n------------- Current address FLASH: %s -------------\n", addr_out_flash);
 800527c:	4629      	mov	r1, r5
 800527e:	4818      	ldr	r0, [pc, #96]	@ (80052e0 <StartSpiFlash+0x160>)
 8005280:	f000 fb1e 	bl	80058c0 <Debug_printf>
		//receiveTaxData();
		receiveRMCDataFromGPS();
 8005284:	f7ff fe66 	bl	8004f54 <receiveRMCDataFromGPS>
		Debug_printf("\n\n");
 8005288:	4816      	ldr	r0, [pc, #88]	@ (80052e4 <StartSpiFlash+0x164>)
 800528a:	f000 fb19 	bl	80058c0 <Debug_printf>
		osDelay(125);
 800528e:	207d      	movs	r0, #125	@ 0x7d
 8005290:	f003 fcac 	bl	8008bec <osDelay>
	for(;;){
 8005294:	e7b1      	b.n	80051fa <StartSpiFlash+0x7a>
 8005296:	bf00      	nop
 8005298:	5eaab042 	.word	0x5eaab042
 800529c:	4034ff7e 	.word	0x4034ff7e
 80052a0:	48451330 	.word	0x48451330
 80052a4:	405a72dd 	.word	0x405a72dd
 80052a8:	08012a36 	.word	0x08012a36
 80052ac:	20000390 	.word	0x20000390
 80052b0:	2000001c 	.word	0x2000001c
 80052b4:	20000020 	.word	0x20000020
 80052b8:	08012a8e 	.word	0x08012a8e
 80052bc:	08012adb 	.word	0x08012adb
 80052c0:	41b33333 	.word	0x41b33333
 80052c4:	41f40000 	.word	0x41f40000
 80052c8:	20006fac 	.word	0x20006fac
 80052cc:	20007294 	.word	0x20007294
 80052d0:	20006dcc 	.word	0x20006dcc
 80052d4:	08012aff 	.word	0x08012aff
 80052d8:	08012b51 	.word	0x08012b51
 80052dc:	080125a6 	.word	0x080125a6
 80052e0:	08012bb0 	.word	0x08012bb0
 80052e4:	08011a80 	.word	0x08011a80
 80052e8:	200084b0 	.word	0x200084b0

080052ec <HAL_MspInit>:

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80052ec:	4b0d      	ldr	r3, [pc, #52]	@ (8005324 <HAL_MspInit+0x38>)
 80052ee:	699a      	ldr	r2, [r3, #24]
 80052f0:	f042 0201 	orr.w	r2, r2, #1
 80052f4:	619a      	str	r2, [r3, #24]
 80052f6:	699a      	ldr	r2, [r3, #24]
{
 80052f8:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80052fa:	f002 0201 	and.w	r2, r2, #1
 80052fe:	9200      	str	r2, [sp, #0]
 8005300:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005302:	69da      	ldr	r2, [r3, #28]
 8005304:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8005308:	61da      	str	r2, [r3, #28]
 800530a:	69db      	ldr	r3, [r3, #28]
 800530c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005310:	9301      	str	r3, [sp, #4]
 8005312:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8005314:	2200      	movs	r2, #0
 8005316:	210f      	movs	r1, #15
 8005318:	f06f 0001 	mvn.w	r0, #1

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800531c:	b002      	add	sp, #8
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800531e:	f001 b92b 	b.w	8006578 <HAL_NVIC_SetPriority>
 8005322:	bf00      	nop
 8005324:	40021000 	.word	0x40021000

08005328 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8005328:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800532a:	2214      	movs	r2, #20
{
 800532c:	b08a      	sub	sp, #40	@ 0x28
 800532e:	4605      	mov	r5, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005330:	2100      	movs	r1, #0
 8005332:	eb0d 0002 	add.w	r0, sp, r2
 8005336:	f007 f9a9 	bl	800c68c <memset>
  if(hadc->Instance==ADC2)
 800533a:	682b      	ldr	r3, [r5, #0]
 800533c:	4a3d      	ldr	r2, [pc, #244]	@ (8005434 <HAL_ADC_MspInit+0x10c>)
 800533e:	4293      	cmp	r3, r2
 8005340:	d137      	bne.n	80053b2 <HAL_ADC_MspInit+0x8a>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8005342:	4b3d      	ldr	r3, [pc, #244]	@ (8005438 <HAL_ADC_MspInit+0x110>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA2_Channel1;
 8005344:	4c3d      	ldr	r4, [pc, #244]	@ (800543c <HAL_ADC_MspInit+0x114>)
    __HAL_RCC_ADC12_CLK_ENABLE();
 8005346:	695a      	ldr	r2, [r3, #20]
 8005348:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 800534c:	615a      	str	r2, [r3, #20]
 800534e:	695a      	ldr	r2, [r3, #20]
 8005350:	f002 5280 	and.w	r2, r2, #268435456	@ 0x10000000
 8005354:	9201      	str	r2, [sp, #4]
 8005356:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005358:	695a      	ldr	r2, [r3, #20]
 800535a:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800535e:	615a      	str	r2, [r3, #20]
 8005360:	695b      	ldr	r3, [r3, #20]
 8005362:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005366:	9302      	str	r3, [sp, #8]
 8005368:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800536a:	2620      	movs	r6, #32
 800536c:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800536e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8005372:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005374:	e9cd 6305 	strd	r6, r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005378:	f001 fa22 	bl	80067c0 <HAL_GPIO_Init>
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800537c:	f44f 7280 	mov.w	r2, #256	@ 0x100
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005380:	f8df c0cc 	ldr.w	ip, [pc, #204]	@ 8005450 <HAL_ADC_MspInit+0x128>
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8005384:	f04f 0e80 	mov.w	lr, #128	@ 0x80
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005388:	2300      	movs	r3, #0
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800538a:	e9c4 e203 	strd	lr, r2, [r4, #12]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 800538e:	4620      	mov	r0, r4
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8005390:	f44f 6280 	mov.w	r2, #1024	@ 0x400
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005394:	e9c4 c300 	strd	ip, r3, [r4]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8005398:	e9c4 2605 	strd	r2, r6, [r4, #20]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 800539c:	60a3      	str	r3, [r4, #8]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 800539e:	61e3      	str	r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 80053a0:	f001 f94a 	bl	8006638 <HAL_DMA_Init>
 80053a4:	b108      	cbz	r0, 80053aa <HAL_ADC_MspInit+0x82>
    {
      Error_Handler();
 80053a6:	f7fe ff74 	bl	8004292 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 80053aa:	63ac      	str	r4, [r5, #56]	@ 0x38
 80053ac:	6265      	str	r5, [r4, #36]	@ 0x24
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 80053ae:	b00a      	add	sp, #40	@ 0x28
 80053b0:	bd70      	pop	{r4, r5, r6, pc}
  else if(hadc->Instance==ADC3)
 80053b2:	4a23      	ldr	r2, [pc, #140]	@ (8005440 <HAL_ADC_MspInit+0x118>)
 80053b4:	4293      	cmp	r3, r2
 80053b6:	d1fa      	bne.n	80053ae <HAL_ADC_MspInit+0x86>
    __HAL_RCC_ADC34_CLK_ENABLE();
 80053b8:	4b1f      	ldr	r3, [pc, #124]	@ (8005438 <HAL_ADC_MspInit+0x110>)
    hdma_adc3.Instance = DMA2_Channel5;
 80053ba:	4c22      	ldr	r4, [pc, #136]	@ (8005444 <HAL_ADC_MspInit+0x11c>)
    __HAL_RCC_ADC34_CLK_ENABLE();
 80053bc:	695a      	ldr	r2, [r3, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80053be:	4822      	ldr	r0, [pc, #136]	@ (8005448 <HAL_ADC_MspInit+0x120>)
    __HAL_RCC_ADC34_CLK_ENABLE();
 80053c0:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 80053c4:	615a      	str	r2, [r3, #20]
 80053c6:	695a      	ldr	r2, [r3, #20]
 80053c8:	f002 5200 	and.w	r2, r2, #536870912	@ 0x20000000
 80053cc:	9203      	str	r2, [sp, #12]
 80053ce:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80053d0:	695a      	ldr	r2, [r3, #20]
 80053d2:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 80053d6:	615a      	str	r2, [r3, #20]
 80053d8:	695b      	ldr	r3, [r3, #20]
 80053da:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80053de:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80053e0:	2201      	movs	r2, #1
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80053e2:	9b04      	ldr	r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80053e4:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80053e6:	2303      	movs	r3, #3
 80053e8:	e9cd 2305 	strd	r2, r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80053ec:	f001 f9e8 	bl	80067c0 <HAL_GPIO_Init>
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80053f0:	2080      	movs	r0, #128	@ 0x80
 80053f2:	f44f 7280 	mov.w	r2, #256	@ 0x100
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80053f6:	4915      	ldr	r1, [pc, #84]	@ (800544c <HAL_ADC_MspInit+0x124>)
 80053f8:	2300      	movs	r3, #0
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80053fa:	e9c4 0203 	strd	r0, r2, [r4, #12]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 80053fe:	f44f 6680 	mov.w	r6, #1024	@ 0x400
 8005402:	2220      	movs	r2, #32
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8005404:	4620      	mov	r0, r4
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005406:	e9c4 1300 	strd	r1, r3, [r4]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 800540a:	e9c4 6205 	strd	r6, r2, [r4, #20]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 800540e:	60a3      	str	r3, [r4, #8]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8005410:	61e3      	str	r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8005412:	f001 f911 	bl	8006638 <HAL_DMA_Init>
 8005416:	b108      	cbz	r0, 800541c <HAL_ADC_MspInit+0xf4>
      Error_Handler();
 8005418:	f7fe ff3b 	bl	8004292 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 800541c:	63ac      	str	r4, [r5, #56]	@ 0x38
    HAL_NVIC_SetPriority(ADC3_IRQn, 5, 0);
 800541e:	2200      	movs	r2, #0
 8005420:	2105      	movs	r1, #5
 8005422:	202f      	movs	r0, #47	@ 0x2f
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8005424:	6265      	str	r5, [r4, #36]	@ 0x24
    HAL_NVIC_SetPriority(ADC3_IRQn, 5, 0);
 8005426:	f001 f8a7 	bl	8006578 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC3_IRQn);
 800542a:	202f      	movs	r0, #47	@ 0x2f
 800542c:	f001 f8d6 	bl	80065dc <HAL_NVIC_EnableIRQ>
}
 8005430:	e7bd      	b.n	80053ae <HAL_ADC_MspInit+0x86>
 8005432:	bf00      	nop
 8005434:	50000100 	.word	0x50000100
 8005438:	40021000 	.word	0x40021000
 800543c:	200071ac 	.word	0x200071ac
 8005440:	50000400 	.word	0x50000400
 8005444:	20007168 	.word	0x20007168
 8005448:	48000400 	.word	0x48000400
 800544c:	40020458 	.word	0x40020458
 8005450:	40020408 	.word	0x40020408

08005454 <HAL_RTC_MspInit>:
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
  if(hrtc->Instance==RTC)
 8005454:	6802      	ldr	r2, [r0, #0]
 8005456:	4b07      	ldr	r3, [pc, #28]	@ (8005474 <HAL_RTC_MspInit+0x20>)
 8005458:	429a      	cmp	r2, r3
 800545a:	d10a      	bne.n	8005472 <HAL_RTC_MspInit+0x1e>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800545c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8005460:	fa92 f2a2 	rbit	r2, r2
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8005464:	4b04      	ldr	r3, [pc, #16]	@ (8005478 <HAL_RTC_MspInit+0x24>)
 8005466:	fab2 f282 	clz	r2, r2
 800546a:	4413      	add	r3, r2
 800546c:	009b      	lsls	r3, r3, #2
 800546e:	2201      	movs	r2, #1
 8005470:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTC_MspInit 1 */

  }

}
 8005472:	4770      	bx	lr
 8005474:	40002800 	.word	0x40002800
 8005478:	10908100 	.word	0x10908100

0800547c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800547c:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800547e:	2214      	movs	r2, #20
{
 8005480:	b08a      	sub	sp, #40	@ 0x28
 8005482:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005484:	2100      	movs	r1, #0
 8005486:	eb0d 0002 	add.w	r0, sp, r2
 800548a:	f007 f8ff 	bl	800c68c <memset>
  if(hspi->Instance==SPI1)
 800548e:	6823      	ldr	r3, [r4, #0]
 8005490:	4a1e      	ldr	r2, [pc, #120]	@ (800550c <HAL_SPI_MspInit+0x90>)
 8005492:	4293      	cmp	r3, r2
 8005494:	d120      	bne.n	80054d8 <HAL_SPI_MspInit+0x5c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8005496:	4b1e      	ldr	r3, [pc, #120]	@ (8005510 <HAL_SPI_MspInit+0x94>)
 8005498:	699a      	ldr	r2, [r3, #24]
 800549a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800549e:	619a      	str	r2, [r3, #24]
 80054a0:	699a      	ldr	r2, [r3, #24]
 80054a2:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 80054a6:	9201      	str	r2, [sp, #4]
 80054a8:	9a01      	ldr	r2, [sp, #4]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80054aa:	695a      	ldr	r2, [r3, #20]
 80054ac:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 80054b0:	615a      	str	r2, [r3, #20]
 80054b2:	695b      	ldr	r3, [r3, #20]
 80054b4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80054b8:	9302      	str	r3, [sp, #8]
 80054ba:	9b02      	ldr	r3, [sp, #8]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80054bc:	2338      	movs	r3, #56	@ 0x38
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80054be:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80054c0:	2302      	movs	r3, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80054c2:	2103      	movs	r1, #3
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80054c4:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80054c6:	2305      	movs	r3, #5
 80054c8:	e9cd 1308 	strd	r1, r3, [sp, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80054cc:	4811      	ldr	r0, [pc, #68]	@ (8005514 <HAL_SPI_MspInit+0x98>)
 80054ce:	a905      	add	r1, sp, #20
 80054d0:	f001 f976 	bl	80067c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80054d4:	b00a      	add	sp, #40	@ 0x28
 80054d6:	bd10      	pop	{r4, pc}
  else if(hspi->Instance==SPI2)
 80054d8:	4a0f      	ldr	r2, [pc, #60]	@ (8005518 <HAL_SPI_MspInit+0x9c>)
 80054da:	4293      	cmp	r3, r2
 80054dc:	d1fa      	bne.n	80054d4 <HAL_SPI_MspInit+0x58>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80054de:	4b0c      	ldr	r3, [pc, #48]	@ (8005510 <HAL_SPI_MspInit+0x94>)
 80054e0:	69da      	ldr	r2, [r3, #28]
 80054e2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80054e6:	61da      	str	r2, [r3, #28]
 80054e8:	69da      	ldr	r2, [r3, #28]
 80054ea:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 80054ee:	9203      	str	r2, [sp, #12]
 80054f0:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80054f2:	695a      	ldr	r2, [r3, #20]
 80054f4:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 80054f8:	615a      	str	r2, [r3, #20]
 80054fa:	695b      	ldr	r3, [r3, #20]
 80054fc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005500:	9304      	str	r3, [sp, #16]
 8005502:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8005504:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8005508:	e7d9      	b.n	80054be <HAL_SPI_MspInit+0x42>
 800550a:	bf00      	nop
 800550c:	40013000 	.word	0x40013000
 8005510:	40021000 	.word	0x40021000
 8005514:	48000400 	.word	0x48000400
 8005518:	40003800 	.word	0x40003800

0800551c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800551c:	b507      	push	{r0, r1, r2, lr}
  if(htim_base->Instance==TIM3)
 800551e:	4b0e      	ldr	r3, [pc, #56]	@ (8005558 <HAL_TIM_Base_MspInit+0x3c>)
 8005520:	6802      	ldr	r2, [r0, #0]
 8005522:	429a      	cmp	r2, r3
 8005524:	d115      	bne.n	8005552 <HAL_TIM_Base_MspInit+0x36>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005526:	f503 3303 	add.w	r3, r3, #134144	@ 0x20c00
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 800552a:	2105      	movs	r1, #5
    __HAL_RCC_TIM3_CLK_ENABLE();
 800552c:	69da      	ldr	r2, [r3, #28]
 800552e:	f042 0202 	orr.w	r2, r2, #2
 8005532:	61da      	str	r2, [r3, #28]
 8005534:	69db      	ldr	r3, [r3, #28]
 8005536:	f003 0302 	and.w	r3, r3, #2
 800553a:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 800553c:	2200      	movs	r2, #0
 800553e:	201d      	movs	r0, #29
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005540:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8005542:	f001 f819 	bl	8006578 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8005546:	201d      	movs	r0, #29

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 8005548:	b003      	add	sp, #12
 800554a:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800554e:	f001 b845 	b.w	80065dc <HAL_NVIC_EnableIRQ>
}
 8005552:	b003      	add	sp, #12
 8005554:	f85d fb04 	ldr.w	pc, [sp], #4
 8005558:	40000400 	.word	0x40000400

0800555c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800555c:	b530      	push	{r4, r5, lr}
 800555e:	4605      	mov	r5, r0
 8005560:	b08d      	sub	sp, #52	@ 0x34
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005562:	2214      	movs	r2, #20
 8005564:	2100      	movs	r1, #0
 8005566:	a807      	add	r0, sp, #28
 8005568:	f007 f890 	bl	800c68c <memset>
  if(huart->Instance==USART1)
 800556c:	682b      	ldr	r3, [r5, #0]
 800556e:	4a4a      	ldr	r2, [pc, #296]	@ (8005698 <HAL_UART_MspInit+0x13c>)
 8005570:	4293      	cmp	r3, r2
 8005572:	d138      	bne.n	80055e6 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8005574:	4b49      	ldr	r3, [pc, #292]	@ (800569c <HAL_UART_MspInit+0x140>)
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8005576:	4c4a      	ldr	r4, [pc, #296]	@ (80056a0 <HAL_UART_MspInit+0x144>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8005578:	699a      	ldr	r2, [r3, #24]
 800557a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800557e:	619a      	str	r2, [r3, #24]
 8005580:	699a      	ldr	r2, [r3, #24]
 8005582:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8005586:	9201      	str	r2, [sp, #4]
 8005588:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800558a:	695a      	ldr	r2, [r3, #20]
 800558c:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8005590:	615a      	str	r2, [r3, #20]
 8005592:	695b      	ldr	r3, [r3, #20]
 8005594:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005598:	9302      	str	r3, [sp, #8]
 800559a:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800559c:	f44f 6cc0 	mov.w	ip, #1536	@ 0x600
 80055a0:	2302      	movs	r3, #2
 80055a2:	e9cd c307 	strd	ip, r3, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80055a6:	f04f 0e03 	mov.w	lr, #3
 80055aa:	2307      	movs	r3, #7
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80055ac:	a907      	add	r1, sp, #28
 80055ae:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80055b2:	e9cd e30a 	strd	lr, r3, [sp, #40]	@ 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80055b6:	f001 f903 	bl	80067c0 <HAL_GPIO_Init>
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80055ba:	4a3a      	ldr	r2, [pc, #232]	@ (80056a4 <HAL_UART_MspInit+0x148>)
 80055bc:	2300      	movs	r3, #0
 80055be:	e9c4 2300 	strd	r2, r3, [r4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80055c2:	2280      	movs	r2, #128	@ 0x80
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80055c4:	e9c4 2303 	strd	r2, r3, [r4, #12]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 80055c8:	2220      	movs	r2, #32
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80055ca:	60a3      	str	r3, [r4, #8]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80055cc:	6163      	str	r3, [r4, #20]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 80055ce:	61a2      	str	r2, [r4, #24]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80055d0:	61e3      	str	r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80055d2:	4620      	mov	r0, r4
 80055d4:	f001 f830 	bl	8006638 <HAL_DMA_Init>
 80055d8:	b108      	cbz	r0, 80055de <HAL_UART_MspInit+0x82>
    {
      Error_Handler();
 80055da:	f7fe fe5a 	bl	8004292 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 80055de:	676c      	str	r4, [r5, #116]	@ 0x74
 80055e0:	6265      	str	r5, [r4, #36]	@ 0x24
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80055e2:	b00d      	add	sp, #52	@ 0x34
 80055e4:	bd30      	pop	{r4, r5, pc}
  else if(huart->Instance==USART2)
 80055e6:	4a30      	ldr	r2, [pc, #192]	@ (80056a8 <HAL_UART_MspInit+0x14c>)
 80055e8:	4293      	cmp	r3, r2
 80055ea:	d12e      	bne.n	800564a <HAL_UART_MspInit+0xee>
    __HAL_RCC_USART2_CLK_ENABLE();
 80055ec:	4b2b      	ldr	r3, [pc, #172]	@ (800569c <HAL_UART_MspInit+0x140>)
 80055ee:	69da      	ldr	r2, [r3, #28]
 80055f0:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 80055f4:	61da      	str	r2, [r3, #28]
 80055f6:	69da      	ldr	r2, [r3, #28]
 80055f8:	f402 3200 	and.w	r2, r2, #131072	@ 0x20000
 80055fc:	9203      	str	r2, [sp, #12]
 80055fe:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005600:	695a      	ldr	r2, [r3, #20]
 8005602:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8005606:	615a      	str	r2, [r3, #20]
 8005608:	695b      	ldr	r3, [r3, #20]
 800560a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800560e:	9304      	str	r3, [sp, #16]
 8005610:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005612:	200c      	movs	r0, #12
 8005614:	2302      	movs	r3, #2
 8005616:	e9cd 0307 	strd	r0, r3, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800561a:	2403      	movs	r4, #3
 800561c:	2307      	movs	r3, #7
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800561e:	a907      	add	r1, sp, #28
 8005620:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8005624:	e9cd 430a 	strd	r4, r3, [sp, #40]	@ 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005628:	f001 f8ca 	bl	80067c0 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel6;
 800562c:	4c1f      	ldr	r4, [pc, #124]	@ (80056ac <HAL_UART_MspInit+0x150>)
 800562e:	4b20      	ldr	r3, [pc, #128]	@ (80056b0 <HAL_UART_MspInit+0x154>)
    hdma_usart3_rx.Instance = DMA1_Channel3;
 8005630:	6023      	str	r3, [r4, #0]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005632:	2280      	movs	r2, #128	@ 0x80
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005634:	2300      	movs	r3, #0
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005636:	e9c4 3301 	strd	r3, r3, [r4, #4]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800563a:	e9c4 2303 	strd	r2, r3, [r4, #12]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800563e:	6163      	str	r3, [r4, #20]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8005640:	2320      	movs	r3, #32
 8005642:	61a3      	str	r3, [r4, #24]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8005644:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005648:	e7c2      	b.n	80055d0 <HAL_UART_MspInit+0x74>
  else if(huart->Instance==USART3)
 800564a:	4a1a      	ldr	r2, [pc, #104]	@ (80056b4 <HAL_UART_MspInit+0x158>)
 800564c:	4293      	cmp	r3, r2
 800564e:	d1c8      	bne.n	80055e2 <HAL_UART_MspInit+0x86>
    __HAL_RCC_USART3_CLK_ENABLE();
 8005650:	4b12      	ldr	r3, [pc, #72]	@ (800569c <HAL_UART_MspInit+0x140>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005652:	4819      	ldr	r0, [pc, #100]	@ (80056b8 <HAL_UART_MspInit+0x15c>)
    __HAL_RCC_USART3_CLK_ENABLE();
 8005654:	69da      	ldr	r2, [r3, #28]
    hdma_usart3_rx.Instance = DMA1_Channel3;
 8005656:	4c19      	ldr	r4, [pc, #100]	@ (80056bc <HAL_UART_MspInit+0x160>)
    __HAL_RCC_USART3_CLK_ENABLE();
 8005658:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800565c:	61da      	str	r2, [r3, #28]
 800565e:	69da      	ldr	r2, [r3, #28]
 8005660:	f402 2280 	and.w	r2, r2, #262144	@ 0x40000
 8005664:	9205      	str	r2, [sp, #20]
 8005666:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005668:	695a      	ldr	r2, [r3, #20]
 800566a:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800566e:	615a      	str	r2, [r3, #20]
 8005670:	695b      	ldr	r3, [r3, #20]
 8005672:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005676:	9306      	str	r3, [sp, #24]
 8005678:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800567a:	f44f 6240 	mov.w	r2, #3072	@ 0xc00
 800567e:	2302      	movs	r3, #2
 8005680:	e9cd 2307 	strd	r2, r3, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8005684:	2103      	movs	r1, #3
 8005686:	2307      	movs	r3, #7
 8005688:	e9cd 130a 	strd	r1, r3, [sp, #40]	@ 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800568c:	a907      	add	r1, sp, #28
 800568e:	f001 f897 	bl	80067c0 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Channel3;
 8005692:	4b0b      	ldr	r3, [pc, #44]	@ (80056c0 <HAL_UART_MspInit+0x164>)
 8005694:	e7cc      	b.n	8005630 <HAL_UART_MspInit+0xd4>
 8005696:	bf00      	nop
 8005698:	40013800 	.word	0x40013800
 800569c:	40021000 	.word	0x40021000
 80056a0:	20006e58 	.word	0x20006e58
 80056a4:	40020058 	.word	0x40020058
 80056a8:	40004400 	.word	0x40004400
 80056ac:	20006e14 	.word	0x20006e14
 80056b0:	4002006c 	.word	0x4002006c
 80056b4:	40004800 	.word	0x40004800
 80056b8:	48000400 	.word	0x48000400
 80056bc:	20006dd0 	.word	0x20006dd0
 80056c0:	40020030 	.word	0x40020030

080056c4 <HAL_InitTick>:
  uint32_t              uwPrescalerValue = 0U;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 80056c4:	4b21      	ldr	r3, [pc, #132]	@ (800574c <HAL_InitTick+0x88>)
{
 80056c6:	b570      	push	{r4, r5, r6, lr}
  __HAL_RCC_TIM2_CLK_ENABLE();
 80056c8:	69da      	ldr	r2, [r3, #28]
 80056ca:	f042 0201 	orr.w	r2, r2, #1
 80056ce:	61da      	str	r2, [r3, #28]
 80056d0:	69db      	ldr	r3, [r3, #28]
{
 80056d2:	b088      	sub	sp, #32
  __HAL_RCC_TIM2_CLK_ENABLE();
 80056d4:	f003 0301 	and.w	r3, r3, #1
 80056d8:	9302      	str	r3, [sp, #8]
{
 80056da:	4605      	mov	r5, r0
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80056dc:	a901      	add	r1, sp, #4
 80056de:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM2_CLK_ENABLE();
 80056e0:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80056e2:	f001 fc97 	bl	8007014 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80056e6:	9b06      	ldr	r3, [sp, #24]
 80056e8:	bb53      	cbnz	r3, 8005740 <HAL_InitTick+0x7c>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80056ea:	f001 fc63 	bl	8006fb4 <HAL_RCC_GetPCLK1Freq>

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 80056ee:	4e18      	ldr	r6, [pc, #96]	@ (8005750 <HAL_InitTick+0x8c>)
 80056f0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80056f4:	6033      	str	r3, [r6, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 80056f6:	f240 33e7 	movw	r3, #999	@ 0x3e7
 80056fa:	60f3      	str	r3, [r6, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80056fc:	4b15      	ldr	r3, [pc, #84]	@ (8005754 <HAL_InitTick+0x90>)
 80056fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8005702:	3b01      	subs	r3, #1
  htim2.Init.Prescaler = uwPrescalerValue;
 8005704:	6073      	str	r3, [r6, #4]
  htim2.Init.ClockDivision = 0;
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;

  status = HAL_TIM_Base_Init(&htim2);
 8005706:	4630      	mov	r0, r6
  htim2.Init.ClockDivision = 0;
 8005708:	2300      	movs	r3, #0
 800570a:	6133      	str	r3, [r6, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800570c:	60b3      	str	r3, [r6, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800570e:	61b3      	str	r3, [r6, #24]
  status = HAL_TIM_Base_Init(&htim2);
 8005710:	f002 fcce 	bl	80080b0 <HAL_TIM_Base_Init>
  if (status == HAL_OK)
 8005714:	4604      	mov	r4, r0
 8005716:	b980      	cbnz	r0, 800573a <HAL_InitTick+0x76>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 8005718:	4630      	mov	r0, r6
 800571a:	f002 fb8b 	bl	8007e34 <HAL_TIM_Base_Start_IT>
    if (status == HAL_OK)
 800571e:	4604      	mov	r4, r0
 8005720:	b958      	cbnz	r0, 800573a <HAL_InitTick+0x76>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8005722:	201c      	movs	r0, #28
 8005724:	f000 ff5a 	bl	80065dc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005728:	2d0f      	cmp	r5, #15
 800572a:	d80d      	bhi.n	8005748 <HAL_InitTick+0x84>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 800572c:	4622      	mov	r2, r4
 800572e:	4629      	mov	r1, r5
 8005730:	201c      	movs	r0, #28
 8005732:	f000 ff21 	bl	8006578 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8005736:	4b08      	ldr	r3, [pc, #32]	@ (8005758 <HAL_InitTick+0x94>)
 8005738:	601d      	str	r5, [r3, #0]
    }
  }

 /* Return function status */
  return status;
}
 800573a:	4620      	mov	r0, r4
 800573c:	b008      	add	sp, #32
 800573e:	bd70      	pop	{r4, r5, r6, pc}
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8005740:	f001 fc38 	bl	8006fb4 <HAL_RCC_GetPCLK1Freq>
 8005744:	0040      	lsls	r0, r0, #1
 8005746:	e7d2      	b.n	80056ee <HAL_InitTick+0x2a>
        status = HAL_ERROR;
 8005748:	2401      	movs	r4, #1
 800574a:	e7f6      	b.n	800573a <HAL_InitTick+0x76>
 800574c:	40021000 	.word	0x40021000
 8005750:	2000853c 	.word	0x2000853c
 8005754:	000f4240 	.word	0x000f4240
 8005758:	20000034 	.word	0x20000034

0800575c <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800575c:	e7fe      	b.n	800575c <NMI_Handler>

0800575e <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800575e:	e7fe      	b.n	800575e <HardFault_Handler>

08005760 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005760:	e7fe      	b.n	8005760 <MemManage_Handler>

08005762 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005762:	e7fe      	b.n	8005762 <BusFault_Handler>

08005764 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005764:	e7fe      	b.n	8005764 <UsageFault_Handler>

08005766 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005766:	4770      	bx	lr

08005768 <DMA1_Channel3_IRQHandler>:
void DMA1_Channel3_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8005768:	4801      	ldr	r0, [pc, #4]	@ (8005770 <DMA1_Channel3_IRQHandler+0x8>)
 800576a:	f000 bfe1 	b.w	8006730 <HAL_DMA_IRQHandler>
 800576e:	bf00      	nop
 8005770:	20006dd0 	.word	0x20006dd0

08005774 <DMA1_Channel5_IRQHandler>:
void DMA1_Channel5_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8005774:	4801      	ldr	r0, [pc, #4]	@ (800577c <DMA1_Channel5_IRQHandler+0x8>)
 8005776:	f000 bfdb 	b.w	8006730 <HAL_DMA_IRQHandler>
 800577a:	bf00      	nop
 800577c:	20006e58 	.word	0x20006e58

08005780 <DMA1_Channel6_IRQHandler>:
void DMA1_Channel6_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8005780:	4801      	ldr	r0, [pc, #4]	@ (8005788 <DMA1_Channel6_IRQHandler+0x8>)
 8005782:	f000 bfd5 	b.w	8006730 <HAL_DMA_IRQHandler>
 8005786:	bf00      	nop
 8005788:	20006e14 	.word	0x20006e14

0800578c <TIM2_IRQHandler>:
void TIM2_IRQHandler(void)
{
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800578c:	4801      	ldr	r0, [pc, #4]	@ (8005794 <TIM2_IRQHandler+0x8>)
 800578e:	f002 bb8b 	b.w	8007ea8 <HAL_TIM_IRQHandler>
 8005792:	bf00      	nop
 8005794:	2000853c 	.word	0x2000853c

08005798 <TIM3_IRQHandler>:
void TIM3_IRQHandler(void)
{
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8005798:	4801      	ldr	r0, [pc, #4]	@ (80057a0 <TIM3_IRQHandler+0x8>)
 800579a:	f002 bb85 	b.w	8007ea8 <HAL_TIM_IRQHandler>
 800579e:	bf00      	nop
 80057a0:	20007034 	.word	0x20007034

080057a4 <ADC3_IRQHandler>:
void ADC3_IRQHandler(void)
{
  /* USER CODE BEGIN ADC3_IRQn 0 */

  /* USER CODE END ADC3_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc3);
 80057a4:	4801      	ldr	r0, [pc, #4]	@ (80057ac <ADC3_IRQHandler+0x8>)
 80057a6:	f000 baeb 	b.w	8005d80 <HAL_ADC_IRQHandler>
 80057aa:	bf00      	nop
 80057ac:	200071f0 	.word	0x200071f0

080057b0 <DMA2_Channel1_IRQHandler>:
void DMA2_Channel1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Channel1_IRQn 0 */

  /* USER CODE END DMA2_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 80057b0:	4801      	ldr	r0, [pc, #4]	@ (80057b8 <DMA2_Channel1_IRQHandler+0x8>)
 80057b2:	f000 bfbd 	b.w	8006730 <HAL_DMA_IRQHandler>
 80057b6:	bf00      	nop
 80057b8:	200071ac 	.word	0x200071ac

080057bc <DMA2_Channel5_IRQHandler>:
void DMA2_Channel5_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Channel5_IRQn 0 */

  /* USER CODE END DMA2_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 80057bc:	4801      	ldr	r0, [pc, #4]	@ (80057c4 <DMA2_Channel5_IRQHandler+0x8>)
 80057be:	f000 bfb7 	b.w	8006730 <HAL_DMA_IRQHandler>
 80057c2:	bf00      	nop
 80057c4:	20007168 	.word	0x20007168

080057c8 <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 80057c8:	2001      	movs	r0, #1
 80057ca:	4770      	bx	lr

080057cc <_kill>:

int _kill(int pid, int sig)
{
 80057cc:	b508      	push	{r3, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80057ce:	f007 fd7f 	bl	800d2d0 <__errno>
 80057d2:	2316      	movs	r3, #22
 80057d4:	6003      	str	r3, [r0, #0]
  return -1;
}
 80057d6:	f04f 30ff 	mov.w	r0, #4294967295
 80057da:	bd08      	pop	{r3, pc}

080057dc <_exit>:

void _exit (int status)
{
 80057dc:	b508      	push	{r3, lr}
  errno = EINVAL;
 80057de:	f007 fd77 	bl	800d2d0 <__errno>
 80057e2:	2316      	movs	r3, #22
 80057e4:	6003      	str	r3, [r0, #0]
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
 80057e6:	e7fe      	b.n	80057e6 <_exit+0xa>

080057e8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80057e8:	b570      	push	{r4, r5, r6, lr}
 80057ea:	460d      	mov	r5, r1
 80057ec:	4614      	mov	r4, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80057ee:	460e      	mov	r6, r1
 80057f0:	1b73      	subs	r3, r6, r5
 80057f2:	429c      	cmp	r4, r3
 80057f4:	dc01      	bgt.n	80057fa <_read+0x12>
  {
    *ptr++ = __io_getchar();
  }

  return len;
}
 80057f6:	4620      	mov	r0, r4
 80057f8:	bd70      	pop	{r4, r5, r6, pc}
    *ptr++ = __io_getchar();
 80057fa:	f3af 8000 	nop.w
 80057fe:	f806 0b01 	strb.w	r0, [r6], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005802:	e7f5      	b.n	80057f0 <_read+0x8>

08005804 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8005804:	b570      	push	{r4, r5, r6, lr}
 8005806:	460d      	mov	r5, r1
 8005808:	4614      	mov	r4, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800580a:	460e      	mov	r6, r1
 800580c:	1b73      	subs	r3, r6, r5
 800580e:	429c      	cmp	r4, r3
 8005810:	dc01      	bgt.n	8005816 <_write+0x12>
  {
    __io_putchar(*ptr++);
  }
  return len;
}
 8005812:	4620      	mov	r0, r4
 8005814:	bd70      	pop	{r4, r5, r6, pc}
    __io_putchar(*ptr++);
 8005816:	f816 0b01 	ldrb.w	r0, [r6], #1
 800581a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800581e:	e7f5      	b.n	800580c <_write+0x8>

08005820 <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 8005820:	f04f 30ff 	mov.w	r0, #4294967295
 8005824:	4770      	bx	lr

08005826 <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 8005826:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800582a:	604b      	str	r3, [r1, #4]
  return 0;
}
 800582c:	2000      	movs	r0, #0
 800582e:	4770      	bx	lr

08005830 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 8005830:	2001      	movs	r0, #1
 8005832:	4770      	bx	lr

08005834 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 8005834:	2000      	movs	r0, #0
 8005836:	4770      	bx	lr

08005838 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005838:	4a0b      	ldr	r2, [pc, #44]	@ (8005868 <_sbrk+0x30>)
 800583a:	6811      	ldr	r1, [r2, #0]
{
 800583c:	b510      	push	{r4, lr}
 800583e:	4603      	mov	r3, r0
  if (NULL == __sbrk_heap_end)
 8005840:	b909      	cbnz	r1, 8005846 <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 8005842:	490a      	ldr	r1, [pc, #40]	@ (800586c <_sbrk+0x34>)
 8005844:	6011      	str	r1, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005846:	6810      	ldr	r0, [r2, #0]
 8005848:	4909      	ldr	r1, [pc, #36]	@ (8005870 <_sbrk+0x38>)
 800584a:	4c0a      	ldr	r4, [pc, #40]	@ (8005874 <_sbrk+0x3c>)
 800584c:	4403      	add	r3, r0
 800584e:	1b09      	subs	r1, r1, r4
 8005850:	428b      	cmp	r3, r1
 8005852:	d906      	bls.n	8005862 <_sbrk+0x2a>
  {
    errno = ENOMEM;
 8005854:	f007 fd3c 	bl	800d2d0 <__errno>
 8005858:	230c      	movs	r3, #12
 800585a:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 800585c:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 8005860:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 8005862:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 8005864:	e7fc      	b.n	8005860 <_sbrk+0x28>
 8005866:	bf00      	nop
 8005868:	2000858c 	.word	0x2000858c
 800586c:	20009848 	.word	0x20009848
 8005870:	2000a000 	.word	0x2000a000
 8005874:	00000400 	.word	0x00000400

08005878 <uart_transmit_string>:

#include "spi_flash.h"

uint32_t current_addr_debug = DEBUG_START_ADDRESS;

void uart_transmit_string(UART_HandleTypeDef *huart, uint8_t *string) {
 8005878:	b570      	push	{r4, r5, r6, lr}
 800587a:	4605      	mov	r5, r0
    HAL_UART_Transmit(huart, string, strlen((char *)string), 1000);
 800587c:	4608      	mov	r0, r1
void uart_transmit_string(UART_HandleTypeDef *huart, uint8_t *string) {
 800587e:	460c      	mov	r4, r1
    HAL_UART_Transmit(huart, string, strlen((char *)string), 1000);
 8005880:	f7fa fd06 	bl	8000290 <strlen>
 8005884:	4621      	mov	r1, r4
 8005886:	b282      	uxth	r2, r0
 8005888:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800588c:	4628      	mov	r0, r5
}
 800588e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UART_Transmit(huart, string, strlen((char *)string), 1000);
 8005892:	f002 bfbb 	b.w	800880c <HAL_UART_Transmit>

08005896 <Uint32ToHex>:

void Uint32ToHex(uint32_t value, char *output, uint8_t width) {
 8005896:	b530      	push	{r4, r5, lr}
 8005898:	1e54      	subs	r4, r2, #1
 800589a:	1e4d      	subs	r5, r1, #1
 800589c:	00a4      	lsls	r4, r4, #2
    for (int i = 0; i < width; i++) {
 800589e:	1d23      	adds	r3, r4, #4
 80058a0:	d102      	bne.n	80058a8 <Uint32ToHex+0x12>
        uint8_t nibble = (value >> (4 * (width - 1 - i))) & 0xF; // Extract each nibble
        output[i] = (nibble < 10) ? ('0' + nibble) : ('A' + nibble - 10); // Convert to hex char
    }
    output[width] = '\0'; // Null-terminate
 80058a2:	2300      	movs	r3, #0
 80058a4:	548b      	strb	r3, [r1, r2]
}
 80058a6:	bd30      	pop	{r4, r5, pc}
        uint8_t nibble = (value >> (4 * (width - 1 - i))) & 0xF; // Extract each nibble
 80058a8:	fa20 f304 	lsr.w	r3, r0, r4
 80058ac:	f003 030f 	and.w	r3, r3, #15
        output[i] = (nibble < 10) ? ('0' + nibble) : ('A' + nibble - 10); // Convert to hex char
 80058b0:	2b09      	cmp	r3, #9
 80058b2:	bf94      	ite	ls
 80058b4:	3330      	addls	r3, #48	@ 0x30
 80058b6:	3337      	addhi	r3, #55	@ 0x37
 80058b8:	f805 3f01 	strb.w	r3, [r5, #1]!
    for (int i = 0; i < width; i++) {
 80058bc:	3c04      	subs	r4, #4
 80058be:	e7ee      	b.n	800589e <Uint32ToHex+0x8>

080058c0 <Debug_printf>:


void Debug_printf(const char *format, ...) {
 80058c0:	b40f      	push	{r0, r1, r2, r3}
 80058c2:	b510      	push	{r4, lr}
 80058c4:	b0c4      	sub	sp, #272	@ 0x110
 80058c6:	ab46      	add	r3, sp, #280	@ 0x118

    // Start processing the variadic arguments
    va_start(args, format);

    // Format the string
    vsnprintf((char*)output_buffer, sizeof(output_buffer), format, args);
 80058c8:	f44f 7180 	mov.w	r1, #256	@ 0x100
void Debug_printf(const char *format, ...) {
 80058cc:	f853 2b04 	ldr.w	r2, [r3], #4
    va_start(args, format);
 80058d0:	9300      	str	r3, [sp, #0]
    vsnprintf((char*)output_buffer, sizeof(output_buffer), format, args);
 80058d2:	a804      	add	r0, sp, #16
 80058d4:	f006 fecc 	bl	800c670 <vsniprintf>

    if(is_saving_debug && (strstr((char *)output_buffer, "$GNRMC")) ){
 80058d8:	4b20      	ldr	r3, [pc, #128]	@ (800595c <Debug_printf+0x9c>)
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d033      	beq.n	8005948 <Debug_printf+0x88>
 80058e0:	491f      	ldr	r1, [pc, #124]	@ (8005960 <Debug_printf+0xa0>)
 80058e2:	a804      	add	r0, sp, #16
 80058e4:	f006 ff22 	bl	800c72c <strstr>
 80058e8:	b370      	cbz	r0, 8005948 <Debug_printf+0x88>
    	uart_transmit_string(&huart1, (uint8_t*) "SAVING GNRMC OUTPUT TO FLASH AT 0X7000");
    	W25_Reset();
    	W25_PageProgram(current_addr_debug, output_buffer, 256);
 80058ea:	4c1e      	ldr	r4, [pc, #120]	@ (8005964 <Debug_printf+0xa4>)
    	uart_transmit_string(&huart1, (uint8_t*) "SAVING GNRMC OUTPUT TO FLASH AT 0X7000");
 80058ec:	491e      	ldr	r1, [pc, #120]	@ (8005968 <Debug_printf+0xa8>)
 80058ee:	481f      	ldr	r0, [pc, #124]	@ (800596c <Debug_printf+0xac>)
 80058f0:	f7ff ffc2 	bl	8005878 <uart_transmit_string>
    	W25_Reset();
 80058f4:	f7fe fd15 	bl	8004322 <W25_Reset>
    	W25_PageProgram(current_addr_debug, output_buffer, 256);
 80058f8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80058fc:	a904      	add	r1, sp, #16
 80058fe:	6820      	ldr	r0, [r4, #0]
 8005900:	f7fe fde6 	bl	80044d0 <W25_PageProgram>
    	current_addr_debug += 256;
 8005904:	6822      	ldr	r2, [r4, #0]
    	char addr_out[10];
    	sprintf(addr_out, "%08lx", current_addr_debug);
 8005906:	491a      	ldr	r1, [pc, #104]	@ (8005970 <Debug_printf+0xb0>)
    	current_addr_debug += 256;
 8005908:	f502 7280 	add.w	r2, r2, #256	@ 0x100
    	sprintf(addr_out, "%08lx", current_addr_debug);
 800590c:	a801      	add	r0, sp, #4
    	current_addr_debug += 256;
 800590e:	6022      	str	r2, [r4, #0]
    	sprintf(addr_out, "%08lx", current_addr_debug);
 8005910:	f006 fdf4 	bl	800c4fc <siprintf>
    	HAL_UART_Transmit(&huart1, (uint8_t*) addr_out, 8, 1000);
 8005914:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005918:	2208      	movs	r2, #8
 800591a:	a901      	add	r1, sp, #4
 800591c:	4813      	ldr	r0, [pc, #76]	@ (800596c <Debug_printf+0xac>)
 800591e:	f002 ff75 	bl	800880c <HAL_UART_Transmit>
    	HAL_UART_Transmit(&huart1, (uint8_t*)"\r\n", 1, 1000);
 8005922:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005926:	4913      	ldr	r1, [pc, #76]	@ (8005974 <Debug_printf+0xb4>)
 8005928:	4810      	ldr	r0, [pc, #64]	@ (800596c <Debug_printf+0xac>)
 800592a:	2201      	movs	r2, #1
 800592c:	f002 ff6e 	bl	800880c <HAL_UART_Transmit>
    	if(current_addr_debug == 0x8F00){
 8005930:	6823      	ldr	r3, [r4, #0]
 8005932:	f5b3 4f0f 	cmp.w	r3, #36608	@ 0x8f00
 8005936:	d107      	bne.n	8005948 <Debug_printf+0x88>
    		current_addr_debug = 0x7000;
 8005938:	f44f 43e0 	mov.w	r3, #28672	@ 0x7000
 800593c:	6023      	str	r3, [r4, #0]
    		W25_Reset();
 800593e:	f7fe fcf0 	bl	8004322 <W25_Reset>
    		W25_SectorErase(current_addr_debug);
 8005942:	6820      	ldr	r0, [r4, #0]
 8005944:	f7fe fd98 	bl	8004478 <W25_SectorErase>
    }
    // End processing the arguments
    va_end(args);

    // Transmit the formatted string over UART
    uart_transmit_string(&huart1,(uint8_t*) output_buffer);
 8005948:	4808      	ldr	r0, [pc, #32]	@ (800596c <Debug_printf+0xac>)
 800594a:	a904      	add	r1, sp, #16
 800594c:	f7ff ff94 	bl	8005878 <uart_transmit_string>
}
 8005950:	b044      	add	sp, #272	@ 0x110
 8005952:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005956:	b004      	add	sp, #16
 8005958:	4770      	bx	lr
 800595a:	bf00      	nop
 800595c:	20002224 	.word	0x20002224
 8005960:	080107a8 	.word	0x080107a8
 8005964:	20000028 	.word	0x20000028
 8005968:	08012be8 	.word	0x08012be8
 800596c:	20006fac 	.word	0x20006fac
 8005970:	08012c0f 	.word	0x08012c0f
 8005974:	08010dde 	.word	0x08010dde

08005978 <SystemInit>:
  */
void SystemInit(void)
{
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005978:	4a03      	ldr	r2, [pc, #12]	@ (8005988 <SystemInit+0x10>)
 800597a:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 800597e:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005982:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005986:	4770      	bx	lr
 8005988:	e000ed00 	.word	0xe000ed00

0800598c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800598c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80059c4 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8005990:	f7ff fff2 	bl	8005978 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005994:	480c      	ldr	r0, [pc, #48]	@ (80059c8 <LoopForever+0x6>)
  ldr r1, =_edata
 8005996:	490d      	ldr	r1, [pc, #52]	@ (80059cc <LoopForever+0xa>)
  ldr r2, =_sidata
 8005998:	4a0d      	ldr	r2, [pc, #52]	@ (80059d0 <LoopForever+0xe>)
  movs r3, #0
 800599a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800599c:	e002      	b.n	80059a4 <LoopCopyDataInit>

0800599e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800599e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80059a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80059a2:	3304      	adds	r3, #4

080059a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80059a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80059a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80059a8:	d3f9      	bcc.n	800599e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80059aa:	4a0a      	ldr	r2, [pc, #40]	@ (80059d4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80059ac:	4c0a      	ldr	r4, [pc, #40]	@ (80059d8 <LoopForever+0x16>)
  movs r3, #0
 80059ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80059b0:	e001      	b.n	80059b6 <LoopFillZerobss>

080059b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80059b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80059b4:	3204      	adds	r2, #4

080059b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80059b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80059b8:	d3fb      	bcc.n	80059b2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80059ba:	f007 fc8f 	bl	800d2dc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80059be:	f7fe fa17 	bl	8003df0 <main>

080059c2 <LoopForever>:

LoopForever:
    b LoopForever
 80059c2:	e7fe      	b.n	80059c2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80059c4:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 80059c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80059cc:	20000268 	.word	0x20000268
  ldr r2, =_sidata
 80059d0:	080131c0 	.word	0x080131c0
  ldr r2, =_sbss
 80059d4:	20000268 	.word	0x20000268
  ldr r4, =_ebss
 80059d8:	20009844 	.word	0x20009844

080059dc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80059dc:	e7fe      	b.n	80059dc <ADC1_2_IRQHandler>

080059de <__cxa_guard_abort.part.0>:

/**
  * @brief Acquire STM32 lock
  * @param lock The lock to acquire
  */
static inline void stm32_lock_acquire(LockingData_t *lock)
 80059de:	b508      	push	{r3, lr}
  __ASM volatile ("cpsid i" : : : "memory");
 80059e0:	b672      	cpsid	i
{
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 80059e2:	f7fe fc56 	bl	8004292 <Error_Handler>
 80059e6:	e7fe      	b.n	80059e6 <__cxa_guard_abort.part.0+0x8>

080059e8 <stm32_lock_acquire>:
{
 80059e8:	b508      	push	{r3, lr}
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 80059ea:	7a03      	ldrb	r3, [r0, #8]
 80059ec:	2b01      	cmp	r3, #1
 80059ee:	d903      	bls.n	80059f8 <stm32_lock_acquire+0x10>
 80059f0:	b672      	cpsid	i
 80059f2:	f7fe fc4e 	bl	8004292 <Error_Handler>
 80059f6:	e7fe      	b.n	80059f6 <stm32_lock_acquire+0xe>
  lock->basepri[lock->nesting_level++] = taskENTER_CRITICAL_FROM_ISR();
 80059f8:	1c5a      	adds	r2, r3, #1
 80059fa:	7202      	strb	r2, [r0, #8]

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80059fc:	f3ef 8211 	mrs	r2, BASEPRI
 8005a00:	f04f 0150 	mov.w	r1, #80	@ 0x50
 8005a04:	f381 8811 	msr	BASEPRI, r1
 8005a08:	f3bf 8f6f 	isb	sy
 8005a0c:	f3bf 8f4f 	dsb	sy
 8005a10:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8005a14:	bd08      	pop	{r3, pc}

08005a16 <stm32_lock_release>:
/**
  * @brief Release STM32 lock
  * @param lock The lock to release
  */
static inline void stm32_lock_release(LockingData_t *lock)
{
 8005a16:	b508      	push	{r3, lr}
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
  lock->nesting_level--;
 8005a18:	7a03      	ldrb	r3, [r0, #8]
 8005a1a:	3b01      	subs	r3, #1
 8005a1c:	b2db      	uxtb	r3, r3
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 8005a1e:	2b01      	cmp	r3, #1
  lock->nesting_level--;
 8005a20:	7203      	strb	r3, [r0, #8]
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 8005a22:	d903      	bls.n	8005a2c <stm32_lock_release+0x16>
 8005a24:	b672      	cpsid	i
 8005a26:	f7fe fc34 	bl	8004292 <Error_Handler>
 8005a2a:	e7fe      	b.n	8005a2a <stm32_lock_release+0x14>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005a2c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8005a30:	f383 8811 	msr	BASEPRI, r3
  taskEXIT_CRITICAL_FROM_ISR(lock->basepri[lock->nesting_level]);
}
 8005a34:	bd08      	pop	{r3, pc}

08005a36 <__retarget_lock_init_recursive>:
/**
  * @brief Initialize recursive lock
  * @param lock The lock
  */
void __retarget_lock_init_recursive(_LOCK_T *lock)
{
 8005a36:	b510      	push	{r4, lr}
  if (lock == NULL)
 8005a38:	4604      	mov	r4, r0
 8005a3a:	b920      	cbnz	r0, 8005a46 <__retarget_lock_init_recursive+0x10>
  {
    errno = EINVAL;
 8005a3c:	f007 fc48 	bl	800d2d0 <__errno>
 8005a40:	2316      	movs	r3, #22
 8005a42:	6003      	str	r3, [r0, #0]
    return;
  }

  /* Unable to allocate memory */
  STM32_LOCK_BLOCK();
}
 8005a44:	bd10      	pop	{r4, pc}
  *lock = (_LOCK_T)malloc(sizeof(struct __lock));
 8005a46:	200c      	movs	r0, #12
 8005a48:	f004 fe9c 	bl	800a784 <malloc>
 8005a4c:	6020      	str	r0, [r4, #0]
  if (*lock != NULL)
 8005a4e:	b120      	cbz	r0, 8005a5a <__retarget_lock_init_recursive+0x24>
    lock->basepri[i] = 0;
 8005a50:	2300      	movs	r3, #0
 8005a52:	e9c0 3300 	strd	r3, r3, [r0]
  lock->nesting_level = 0;
 8005a56:	7203      	strb	r3, [r0, #8]
}
 8005a58:	e7f4      	b.n	8005a44 <__retarget_lock_init_recursive+0xe>
 8005a5a:	f7ff ffc0 	bl	80059de <__cxa_guard_abort.part.0>

08005a5e <__retarget_lock_acquire>:
/**
  * @brief Acquire lock
  * @param lock The lock
  */
void __retarget_lock_acquire(_LOCK_T lock)
{
 8005a5e:	b508      	push	{r3, lr}
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8005a60:	b908      	cbnz	r0, 8005a66 <__retarget_lock_acquire+0x8>
 8005a62:	f7ff ffbc 	bl	80059de <__cxa_guard_abort.part.0>
  stm32_lock_acquire(STM32_LOCK_PARAMETER(lock));
}
 8005a66:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  stm32_lock_acquire(STM32_LOCK_PARAMETER(lock));
 8005a6a:	f7ff bfbd 	b.w	80059e8 <stm32_lock_acquire>

08005a6e <__retarget_lock_acquire_recursive>:
#define __lock_close(lock) __retarget_lock_close(lock)
extern void __retarget_lock_close_recursive(_LOCK_T lock);
#define __lock_close_recursive(lock) __retarget_lock_close_recursive(lock)
extern void __retarget_lock_acquire(_LOCK_T lock);
#define __lock_acquire(lock) __retarget_lock_acquire(lock)
extern void __retarget_lock_acquire_recursive(_LOCK_T lock);
 8005a6e:	f7ff bff6 	b.w	8005a5e <__retarget_lock_acquire>

08005a72 <__retarget_lock_release>:
/**
  * @brief Release lock
  * @param lock The lock
  */
void __retarget_lock_release(_LOCK_T lock)
{
 8005a72:	b508      	push	{r3, lr}
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8005a74:	b918      	cbnz	r0, 8005a7e <__retarget_lock_release+0xc>
 8005a76:	b672      	cpsid	i
 8005a78:	f7fe fc0b 	bl	8004292 <Error_Handler>
 8005a7c:	e7fe      	b.n	8005a7c <__retarget_lock_release+0xa>
  stm32_lock_release(STM32_LOCK_PARAMETER(lock));
}
 8005a7e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  stm32_lock_release(STM32_LOCK_PARAMETER(lock));
 8005a82:	f7ff bfc8 	b.w	8005a16 <stm32_lock_release>

08005a86 <__retarget_lock_release_recursive>:
extern int __retarget_lock_try_acquire_recursive(_LOCK_T lock);
#define __lock_try_acquire_recursive(lock) \
  __retarget_lock_try_acquire_recursive(lock)
extern void __retarget_lock_release(_LOCK_T lock);
#define __lock_release(lock) __retarget_lock_release(lock)
extern void __retarget_lock_release_recursive(_LOCK_T lock);
 8005a86:	f7ff bff4 	b.w	8005a72 <__retarget_lock_release>
	...

08005a8c <HAL_Init>:
  */
HAL_StatusTypeDef HAL_Init(void)
{
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005a8c:	4a07      	ldr	r2, [pc, #28]	@ (8005aac <HAL_Init+0x20>)
{
 8005a8e:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005a90:	6813      	ldr	r3, [r2, #0]
 8005a92:	f043 0310 	orr.w	r3, r3, #16
 8005a96:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005a98:	2003      	movs	r0, #3
 8005a9a:	f000 fd5b 	bl	8006554 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005a9e:	200f      	movs	r0, #15
 8005aa0:	f7ff fe10 	bl	80056c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005aa4:	f7ff fc22 	bl	80052ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8005aa8:	2000      	movs	r0, #0
 8005aaa:	bd08      	pop	{r3, pc}
 8005aac:	40022000 	.word	0x40022000

08005ab0 <HAL_IncTick>:
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8005ab0:	4a03      	ldr	r2, [pc, #12]	@ (8005ac0 <HAL_IncTick+0x10>)
 8005ab2:	4b04      	ldr	r3, [pc, #16]	@ (8005ac4 <HAL_IncTick+0x14>)
 8005ab4:	6811      	ldr	r1, [r2, #0]
 8005ab6:	781b      	ldrb	r3, [r3, #0]
 8005ab8:	440b      	add	r3, r1
 8005aba:	6013      	str	r3, [r2, #0]
}
 8005abc:	4770      	bx	lr
 8005abe:	bf00      	nop
 8005ac0:	200085c0 	.word	0x200085c0
 8005ac4:	20000030 	.word	0x20000030

08005ac8 <HAL_GetTick>:
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;  
 8005ac8:	4b01      	ldr	r3, [pc, #4]	@ (8005ad0 <HAL_GetTick+0x8>)
 8005aca:	6818      	ldr	r0, [r3, #0]
}
 8005acc:	4770      	bx	lr
 8005ace:	bf00      	nop
 8005ad0:	200085c0 	.word	0x200085c0

08005ad4 <HAL_ADC_ConvCpltCallback>:
/**
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
 8005ad4:	4770      	bx	lr

08005ad6 <HAL_ADC_LevelOutOfWindowCallback>:
/**
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
 8005ad6:	4770      	bx	lr

08005ad8 <HAL_ADC_ErrorCallback>:
  * @brief  ADC error callback in non blocking mode
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
 8005ad8:	4770      	bx	lr

08005ada <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8005ada:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8005adc:	6803      	ldr	r3, [r0, #0]
 8005ade:	689a      	ldr	r2, [r3, #8]
 8005ae0:	f002 0203 	and.w	r2, r2, #3
 8005ae4:	2a01      	cmp	r2, #1
{
 8005ae6:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET )
 8005ae8:	d001      	beq.n	8005aee <ADC_Disable+0x14>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8005aea:	2000      	movs	r0, #0
}
 8005aec:	bd38      	pop	{r3, r4, r5, pc}
  if (ADC_IS_ENABLE(hadc) != RESET )
 8005aee:	681a      	ldr	r2, [r3, #0]
 8005af0:	07d1      	lsls	r1, r2, #31
 8005af2:	d5fa      	bpl.n	8005aea <ADC_Disable+0x10>
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8005af4:	689a      	ldr	r2, [r3, #8]
 8005af6:	f002 020d 	and.w	r2, r2, #13
 8005afa:	2a01      	cmp	r2, #1
 8005afc:	d115      	bne.n	8005b2a <ADC_Disable+0x50>
      __HAL_ADC_DISABLE(hadc);
 8005afe:	689a      	ldr	r2, [r3, #8]
 8005b00:	f042 0202 	orr.w	r2, r2, #2
 8005b04:	609a      	str	r2, [r3, #8]
 8005b06:	2203      	movs	r2, #3
 8005b08:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8005b0a:	f7ff ffdd 	bl	8005ac8 <HAL_GetTick>
 8005b0e:	4605      	mov	r5, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8005b10:	6823      	ldr	r3, [r4, #0]
 8005b12:	689b      	ldr	r3, [r3, #8]
 8005b14:	07db      	lsls	r3, r3, #31
 8005b16:	d5e8      	bpl.n	8005aea <ADC_Disable+0x10>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8005b18:	f7ff ffd6 	bl	8005ac8 <HAL_GetTick>
 8005b1c:	1b40      	subs	r0, r0, r5
 8005b1e:	2802      	cmp	r0, #2
 8005b20:	d9f6      	bls.n	8005b10 <ADC_Disable+0x36>
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8005b22:	6823      	ldr	r3, [r4, #0]
 8005b24:	689b      	ldr	r3, [r3, #8]
 8005b26:	07da      	lsls	r2, r3, #31
 8005b28:	d5f2      	bpl.n	8005b10 <ADC_Disable+0x36>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005b2a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005b2c:	f043 0310 	orr.w	r3, r3, #16
 8005b30:	6423      	str	r3, [r4, #64]	@ 0x40
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005b32:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8005b34:	f043 0301 	orr.w	r3, r3, #1
 8005b38:	6463      	str	r3, [r4, #68]	@ 0x44
      return HAL_ERROR;
 8005b3a:	2001      	movs	r0, #1
 8005b3c:	e7d6      	b.n	8005aec <ADC_Disable+0x12>
	...

08005b40 <HAL_ADC_Init>:
{
 8005b40:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __IO uint32_t wait_loop_index = 0U;
 8005b42:	2300      	movs	r3, #0
 8005b44:	9301      	str	r3, [sp, #4]
  if(hadc == NULL)
 8005b46:	4604      	mov	r4, r0
 8005b48:	2800      	cmp	r0, #0
 8005b4a:	f000 8103 	beq.w	8005d54 <HAL_ADC_Init+0x214>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8005b4e:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 8005b50:	06d5      	lsls	r5, r2, #27
 8005b52:	d46a      	bmi.n	8005c2a <HAL_ADC_Init+0xea>
    if (hadc->State == HAL_ADC_STATE_RESET)
 8005b54:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d035      	beq.n	8005bc6 <HAL_ADC_Init+0x86>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005b5a:	2000      	movs	r0, #0
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8005b5c:	6823      	ldr	r3, [r4, #0]
 8005b5e:	689a      	ldr	r2, [r3, #8]
 8005b60:	00d2      	lsls	r2, r2, #3
 8005b62:	d502      	bpl.n	8005b6a <HAL_ADC_Init+0x2a>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8005b64:	689b      	ldr	r3, [r3, #8]
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8005b66:	009d      	lsls	r5, r3, #2
 8005b68:	d50a      	bpl.n	8005b80 <HAL_ADC_Init+0x40>
      ADC_STATE_CLR_SET(hadc->State,
 8005b6a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005b6c:	f023 0312 	bic.w	r3, r3, #18
 8005b70:	f043 0310 	orr.w	r3, r3, #16
 8005b74:	6423      	str	r3, [r4, #64]	@ 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005b76:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8005b78:	f043 0301 	orr.w	r3, r3, #1
 8005b7c:	6463      	str	r3, [r4, #68]	@ 0x44
      tmp_hal_status = HAL_ERROR;
 8005b7e:	2001      	movs	r0, #1
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8005b80:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005b82:	06d9      	lsls	r1, r3, #27
 8005b84:	f100 80e0 	bmi.w	8005d48 <HAL_ADC_Init+0x208>
 8005b88:	2800      	cmp	r0, #0
 8005b8a:	f040 80dd 	bne.w	8005d48 <HAL_ADC_Init+0x208>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8005b8e:	6823      	ldr	r3, [r4, #0]
 8005b90:	689a      	ldr	r2, [r3, #8]
      (tmp_hal_status == HAL_OK)                                &&
 8005b92:	0752      	lsls	r2, r2, #29
 8005b94:	f100 80d8 	bmi.w	8005d48 <HAL_ADC_Init+0x208>
    ADC_STATE_CLR_SET(hadc->State,
 8005b98:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8005b9a:	f422 7281 	bic.w	r2, r2, #258	@ 0x102
 8005b9e:	f042 0202 	orr.w	r2, r2, #2
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005ba2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
    ADC_STATE_CLR_SET(hadc->State,
 8005ba6:	6422      	str	r2, [r4, #64]	@ 0x40
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005ba8:	4a6b      	ldr	r2, [pc, #428]	@ (8005d58 <HAL_ADC_Init+0x218>)
 8005baa:	d042      	beq.n	8005c32 <HAL_ADC_Init+0xf2>
 8005bac:	4293      	cmp	r3, r2
 8005bae:	d03e      	beq.n	8005c2e <HAL_ADC_Init+0xee>
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8005bb0:	f502 7240 	add.w	r2, r2, #768	@ 0x300
 8005bb4:	4293      	cmp	r3, r2
 8005bb6:	4969      	ldr	r1, [pc, #420]	@ (8005d5c <HAL_ADC_Init+0x21c>)
 8005bb8:	f000 80b3 	beq.w	8005d22 <HAL_ADC_Init+0x1e2>
 8005bbc:	428b      	cmp	r3, r1
 8005bbe:	bf18      	it	ne
 8005bc0:	2200      	movne	r2, #0
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005bc2:	4967      	ldr	r1, [pc, #412]	@ (8005d60 <HAL_ADC_Init+0x220>)
 8005bc4:	e036      	b.n	8005c34 <HAL_ADC_Init+0xf4>
      hadc->InjectionConfig.ContextQueue = 0U;
 8005bc6:	e9c0 3312 	strd	r3, r3, [r0, #72]	@ 0x48
      ADC_CLEAR_ERRORCODE(hadc);
 8005bca:	6443      	str	r3, [r0, #68]	@ 0x44
      hadc->Lock = HAL_UNLOCKED;
 8005bcc:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_ADC_MspInit(hadc);
 8005bd0:	f7ff fbaa 	bl	8005328 <HAL_ADC_MspInit>
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8005bd4:	6823      	ldr	r3, [r4, #0]
 8005bd6:	689b      	ldr	r3, [r3, #8]
 8005bd8:	00d8      	lsls	r0, r3, #3
 8005bda:	d4be      	bmi.n	8005b5a <HAL_ADC_Init+0x1a>
        tmp_hal_status = ADC_Disable(hadc);
 8005bdc:	4620      	mov	r0, r4
 8005bde:	f7ff ff7c 	bl	8005ada <ADC_Disable>
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8005be2:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8005be4:	06d1      	lsls	r1, r2, #27
 8005be6:	d4b9      	bmi.n	8005b5c <HAL_ADC_Init+0x1c>
 8005be8:	2800      	cmp	r0, #0
 8005bea:	d1b7      	bne.n	8005b5c <HAL_ADC_Init+0x1c>
          ADC_STATE_CLR_SET(hadc->State,
 8005bec:	6c23      	ldr	r3, [r4, #64]	@ 0x40
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8005bee:	6822      	ldr	r2, [r4, #0]
          ADC_STATE_CLR_SET(hadc->State,
 8005bf0:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8005bf4:	f023 0302 	bic.w	r3, r3, #2
 8005bf8:	f043 0302 	orr.w	r3, r3, #2
 8005bfc:	6423      	str	r3, [r4, #64]	@ 0x40
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8005bfe:	6893      	ldr	r3, [r2, #8]
 8005c00:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
 8005c04:	6093      	str	r3, [r2, #8]
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8005c06:	6893      	ldr	r3, [r2, #8]
 8005c08:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005c0c:	6093      	str	r3, [r2, #8]
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8005c0e:	4b55      	ldr	r3, [pc, #340]	@ (8005d64 <HAL_ADC_Init+0x224>)
 8005c10:	4a55      	ldr	r2, [pc, #340]	@ (8005d68 <HAL_ADC_Init+0x228>)
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	fbb3 f3f2 	udiv	r3, r3, r2
 8005c18:	220a      	movs	r2, #10
 8005c1a:	4353      	muls	r3, r2
            wait_loop_index--;
 8005c1c:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 8005c1e:	9b01      	ldr	r3, [sp, #4]
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d09a      	beq.n	8005b5a <HAL_ADC_Init+0x1a>
            wait_loop_index--;
 8005c24:	9b01      	ldr	r3, [sp, #4]
 8005c26:	3b01      	subs	r3, #1
 8005c28:	e7f8      	b.n	8005c1c <HAL_ADC_Init+0xdc>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	e7a8      	b.n	8005b80 <HAL_ADC_Init+0x40>
 8005c2e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005c32:	494e      	ldr	r1, [pc, #312]	@ (8005d6c <HAL_ADC_Init+0x22c>)
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8005c34:	689d      	ldr	r5, [r3, #8]
 8005c36:	f005 0503 	and.w	r5, r5, #3
 8005c3a:	2d01      	cmp	r5, #1
 8005c3c:	d102      	bne.n	8005c44 <HAL_ADC_Init+0x104>
 8005c3e:	681d      	ldr	r5, [r3, #0]
 8005c40:	07ed      	lsls	r5, r5, #31
 8005c42:	d40e      	bmi.n	8005c62 <HAL_ADC_Init+0x122>
 8005c44:	b13a      	cbz	r2, 8005c56 <HAL_ADC_Init+0x116>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8005c46:	6895      	ldr	r5, [r2, #8]
 8005c48:	f005 0503 	and.w	r5, r5, #3
 8005c4c:	2d01      	cmp	r5, #1
 8005c4e:	d102      	bne.n	8005c56 <HAL_ADC_Init+0x116>
 8005c50:	6812      	ldr	r2, [r2, #0]
 8005c52:	07d2      	lsls	r2, r2, #31
 8005c54:	d405      	bmi.n	8005c62 <HAL_ADC_Init+0x122>
      MODIFY_REG(tmpADC_Common->CCR       ,
 8005c56:	688a      	ldr	r2, [r1, #8]
 8005c58:	6865      	ldr	r5, [r4, #4]
 8005c5a:	f422 3240 	bic.w	r2, r2, #196608	@ 0x30000
 8005c5e:	432a      	orrs	r2, r5
 8005c60:	608a      	str	r2, [r1, #8]
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8005c62:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 8005c66:	430a      	orrs	r2, r1
 8005c68:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005c6a:	7e65      	ldrb	r5, [r4, #25]
 8005c6c:	3901      	subs	r1, #1
 8005c6e:	bf18      	it	ne
 8005c70:	2101      	movne	r1, #1
 8005c72:	ea42 3245 	orr.w	r2, r2, r5, lsl #13
 8005c76:	ea42 3201 	orr.w	r2, r2, r1, lsl #12
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8005c7a:	f894 1020 	ldrb.w	r1, [r4, #32]
 8005c7e:	2901      	cmp	r1, #1
 8005c80:	d107      	bne.n	8005c92 <HAL_ADC_Init+0x152>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8005c82:	2d00      	cmp	r5, #0
 8005c84:	d14f      	bne.n	8005d26 <HAL_ADC_Init+0x1e6>
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8005c86:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8005c88:	3901      	subs	r1, #1
 8005c8a:	ea42 4141 	orr.w	r1, r2, r1, lsl #17
 8005c8e:	f441 3280 	orr.w	r2, r1, #65536	@ 0x10000
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005c92:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8005c94:	2901      	cmp	r1, #1
 8005c96:	d015      	beq.n	8005cc4 <HAL_ADC_Init+0x184>
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8005c98:	4d35      	ldr	r5, [pc, #212]	@ (8005d70 <HAL_ADC_Init+0x230>)
 8005c9a:	42ab      	cmp	r3, r5
 8005c9c:	d003      	beq.n	8005ca6 <HAL_ADC_Init+0x166>
 8005c9e:	f505 7580 	add.w	r5, r5, #256	@ 0x100
 8005ca2:	42ab      	cmp	r3, r5
 8005ca4:	d10a      	bne.n	8005cbc <HAL_ADC_Init+0x17c>
 8005ca6:	f5b1 7f30 	cmp.w	r1, #704	@ 0x2c0
 8005caa:	d047      	beq.n	8005d3c <HAL_ADC_Init+0x1fc>
 8005cac:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 8005cb0:	d047      	beq.n	8005d42 <HAL_ADC_Init+0x202>
 8005cb2:	f5b1 7fe0 	cmp.w	r1, #448	@ 0x1c0
 8005cb6:	bf08      	it	eq
 8005cb8:	f44f 7180 	moveq.w	r1, #256	@ 0x100
 8005cbc:	6ae5      	ldr	r5, [r4, #44]	@ 0x2c
 8005cbe:	4315      	orrs	r5, r2
 8005cc0:	ea45 0201 	orr.w	r2, r5, r1
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8005cc4:	6899      	ldr	r1, [r3, #8]
 8005cc6:	f011 0f0c 	tst.w	r1, #12
 8005cca:	d10c      	bne.n	8005ce6 <HAL_ADC_Init+0x1a6>
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8005ccc:	68d9      	ldr	r1, [r3, #12]
 8005cce:	f421 4180 	bic.w	r1, r1, #16384	@ 0x4000
 8005cd2:	f021 0102 	bic.w	r1, r1, #2
 8005cd6:	60d9      	str	r1, [r3, #12]
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8005cd8:	f894 1030 	ldrb.w	r1, [r4, #48]	@ 0x30
 8005cdc:	7e25      	ldrb	r5, [r4, #24]
 8005cde:	0049      	lsls	r1, r1, #1
 8005ce0:	ea41 3185 	orr.w	r1, r1, r5, lsl #14
 8005ce4:	430a      	orrs	r2, r1
    MODIFY_REG(hadc->Instance->CFGR,
 8005ce6:	68dd      	ldr	r5, [r3, #12]
 8005ce8:	4922      	ldr	r1, [pc, #136]	@ (8005d74 <HAL_ADC_Init+0x234>)
 8005cea:	4029      	ands	r1, r5
 8005cec:	4311      	orrs	r1, r2
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8005cee:	6922      	ldr	r2, [r4, #16]
    MODIFY_REG(hadc->Instance->CFGR,
 8005cf0:	60d9      	str	r1, [r3, #12]
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8005cf2:	2a01      	cmp	r2, #1
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8005cf4:	bf05      	ittet	eq
 8005cf6:	6b19      	ldreq	r1, [r3, #48]	@ 0x30
 8005cf8:	69e2      	ldreq	r2, [r4, #28]
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8005cfa:	6b1a      	ldrne	r2, [r3, #48]	@ 0x30
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8005cfc:	f102 32ff 	addeq.w	r2, r2, #4294967295
 8005d00:	bf06      	itte	eq
 8005d02:	f021 010f 	biceq.w	r1, r1, #15
 8005d06:	430a      	orreq	r2, r1
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8005d08:	f022 020f 	bicne.w	r2, r2, #15
 8005d0c:	631a      	str	r2, [r3, #48]	@ 0x30
    ADC_CLEAR_ERRORCODE(hadc);
 8005d0e:	2300      	movs	r3, #0
 8005d10:	6463      	str	r3, [r4, #68]	@ 0x44
    ADC_STATE_CLR_SET(hadc->State,
 8005d12:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005d14:	f023 0303 	bic.w	r3, r3, #3
 8005d18:	f043 0301 	orr.w	r3, r3, #1
 8005d1c:	6423      	str	r3, [r4, #64]	@ 0x40
}
 8005d1e:	b003      	add	sp, #12
 8005d20:	bd30      	pop	{r4, r5, pc}
 8005d22:	460a      	mov	r2, r1
 8005d24:	e74d      	b.n	8005bc2 <HAL_ADC_Init+0x82>
        ADC_STATE_CLR_SET(hadc->State,
 8005d26:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 8005d28:	f021 0122 	bic.w	r1, r1, #34	@ 0x22
 8005d2c:	f041 0120 	orr.w	r1, r1, #32
 8005d30:	6421      	str	r1, [r4, #64]	@ 0x40
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005d32:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8005d34:	f041 0101 	orr.w	r1, r1, #1
 8005d38:	6461      	str	r1, [r4, #68]	@ 0x44
 8005d3a:	e7aa      	b.n	8005c92 <HAL_ADC_Init+0x152>
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8005d3c:	f44f 71e0 	mov.w	r1, #448	@ 0x1c0
 8005d40:	e7bc      	b.n	8005cbc <HAL_ADC_Init+0x17c>
 8005d42:	f44f 7130 	mov.w	r1, #704	@ 0x2c0
 8005d46:	e7b9      	b.n	8005cbc <HAL_ADC_Init+0x17c>
    ADC_STATE_CLR_SET(hadc->State,
 8005d48:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005d4a:	f023 0312 	bic.w	r3, r3, #18
 8005d4e:	f043 0310 	orr.w	r3, r3, #16
 8005d52:	6423      	str	r3, [r4, #64]	@ 0x40
    return HAL_ERROR;
 8005d54:	2001      	movs	r0, #1
 8005d56:	e7e2      	b.n	8005d1e <HAL_ADC_Init+0x1de>
 8005d58:	50000100 	.word	0x50000100
 8005d5c:	50000500 	.word	0x50000500
 8005d60:	50000700 	.word	0x50000700
 8005d64:	2000002c 	.word	0x2000002c
 8005d68:	000f4240 	.word	0x000f4240
 8005d6c:	50000300 	.word	0x50000300
 8005d70:	50000400 	.word	0x50000400
 8005d74:	fff0c007 	.word	0xfff0c007

08005d78 <HAL_ADCEx_InjectedConvCpltCallback>:
}
 8005d78:	4770      	bx	lr

08005d7a <HAL_ADCEx_InjectedQueueOverflowCallback>:
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef* hadc)
 8005d7a:	4770      	bx	lr

08005d7c <HAL_ADCEx_LevelOutOfWindow2Callback>:
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef* hadc)
 8005d7c:	4770      	bx	lr

08005d7e <HAL_ADCEx_LevelOutOfWindow3Callback>:
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef* hadc)
 8005d7e:	4770      	bx	lr

08005d80 <HAL_ADC_IRQHandler>:
  uint32_t tmp_isr = hadc->Instance->ISR;
 8005d80:	6803      	ldr	r3, [r0, #0]
{
 8005d82:	b570      	push	{r4, r5, r6, lr}
  uint32_t tmp_isr = hadc->Instance->ISR;
 8005d84:	681d      	ldr	r5, [r3, #0]
  uint32_t tmp_ier = hadc->Instance->IER;
 8005d86:	685e      	ldr	r6, [r3, #4]
  if( (((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8005d88:	076a      	lsls	r2, r5, #29
{
 8005d8a:	4604      	mov	r4, r0
  if( (((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8005d8c:	d501      	bpl.n	8005d92 <HAL_ADC_IRQHandler+0x12>
 8005d8e:	0770      	lsls	r0, r6, #29
 8005d90:	d403      	bmi.n	8005d9a <HAL_ADC_IRQHandler+0x1a>
 8005d92:	0729      	lsls	r1, r5, #28
 8005d94:	d543      	bpl.n	8005e1e <HAL_ADC_IRQHandler+0x9e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))   )
 8005d96:	0732      	lsls	r2, r6, #28
 8005d98:	d541      	bpl.n	8005e1e <HAL_ADC_IRQHandler+0x9e>
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8005d9a:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8005d9c:	06d0      	lsls	r0, r2, #27
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8005d9e:	bf5e      	ittt	pl
 8005da0:	6c22      	ldrpl	r2, [r4, #64]	@ 0x40
 8005da2:	f442 7200 	orrpl.w	r2, r2, #512	@ 0x200
 8005da6:	6422      	strpl	r2, [r4, #64]	@ 0x40
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8005da8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005dac:	d003      	beq.n	8005db6 <HAL_ADC_IRQHandler+0x36>
 8005dae:	4a90      	ldr	r2, [pc, #576]	@ (8005ff0 <HAL_ADC_IRQHandler+0x270>)
 8005db0:	4293      	cmp	r3, r2
 8005db2:	f040 8105 	bne.w	8005fc0 <HAL_ADC_IRQHandler+0x240>
 8005db6:	4a8f      	ldr	r2, [pc, #572]	@ (8005ff4 <HAL_ADC_IRQHandler+0x274>)
 8005db8:	6891      	ldr	r1, [r2, #8]
 8005dba:	06c9      	lsls	r1, r1, #27
 8005dbc:	d00c      	beq.n	8005dd8 <HAL_ADC_IRQHandler+0x58>
 8005dbe:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005dc2:	d003      	beq.n	8005dcc <HAL_ADC_IRQHandler+0x4c>
 8005dc4:	498a      	ldr	r1, [pc, #552]	@ (8005ff0 <HAL_ADC_IRQHandler+0x270>)
 8005dc6:	428b      	cmp	r3, r1
 8005dc8:	f040 80ff 	bne.w	8005fca <HAL_ADC_IRQHandler+0x24a>
 8005dcc:	6892      	ldr	r2, [r2, #8]
 8005dce:	f002 021f 	and.w	r2, r2, #31
 8005dd2:	2a05      	cmp	r2, #5
 8005dd4:	f040 8114 	bne.w	8006000 <HAL_ADC_IRQHandler+0x280>
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8005dd8:	68da      	ldr	r2, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 8005dda:	68d9      	ldr	r1, [r3, #12]
       (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == RESET)  )
 8005ddc:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 8005de0:	f401 6140 	and.w	r1, r1, #3072	@ 0xc00
 8005de4:	4311      	orrs	r1, r2
 8005de6:	d114      	bne.n	8005e12 <HAL_ADC_IRQHandler+0x92>
      if((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS)
 8005de8:	0729      	lsls	r1, r5, #28
 8005dea:	d512      	bpl.n	8005e12 <HAL_ADC_IRQHandler+0x92>
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8005dec:	689a      	ldr	r2, [r3, #8]
 8005dee:	0752      	lsls	r2, r2, #29
 8005df0:	f100 8122 	bmi.w	8006038 <HAL_ADC_IRQHandler+0x2b8>
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8005df4:	685a      	ldr	r2, [r3, #4]
 8005df6:	f022 020c 	bic.w	r2, r2, #12
 8005dfa:	605a      	str	r2, [r3, #4]
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8005dfc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005dfe:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005e02:	6423      	str	r3, [r4, #64]	@ 0x40
          if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005e04:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005e06:	04d8      	lsls	r0, r3, #19
 8005e08:	d403      	bmi.n	8005e12 <HAL_ADC_IRQHandler+0x92>
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005e0a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005e0c:	f043 0301 	orr.w	r3, r3, #1
 8005e10:	6423      	str	r3, [r4, #64]	@ 0x40
      HAL_ADC_ConvCpltCallback(hadc);
 8005e12:	4620      	mov	r0, r4
 8005e14:	f7ff fe5e 	bl	8005ad4 <HAL_ADC_ConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 8005e18:	6823      	ldr	r3, [r4, #0]
 8005e1a:	220c      	movs	r2, #12
 8005e1c:	601a      	str	r2, [r3, #0]
  if( (((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8005e1e:	06a9      	lsls	r1, r5, #26
 8005e20:	d501      	bpl.n	8005e26 <HAL_ADC_IRQHandler+0xa6>
 8005e22:	06b2      	lsls	r2, r6, #26
 8005e24:	d403      	bmi.n	8005e2e <HAL_ADC_IRQHandler+0xae>
 8005e26:	066b      	lsls	r3, r5, #25
 8005e28:	d562      	bpl.n	8005ef0 <HAL_ADC_IRQHandler+0x170>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS))   )
 8005e2a:	0670      	lsls	r0, r6, #25
 8005e2c:	d560      	bpl.n	8005ef0 <HAL_ADC_IRQHandler+0x170>
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8005e2e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005e30:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8005e34:	6423      	str	r3, [r4, #64]	@ 0x40
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8005e36:	6823      	ldr	r3, [r4, #0]
 8005e38:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005e3c:	d003      	beq.n	8005e46 <HAL_ADC_IRQHandler+0xc6>
 8005e3e:	4a6c      	ldr	r2, [pc, #432]	@ (8005ff0 <HAL_ADC_IRQHandler+0x270>)
 8005e40:	4293      	cmp	r3, r2
 8005e42:	f040 8102 	bne.w	800604a <HAL_ADC_IRQHandler+0x2ca>
 8005e46:	4a6b      	ldr	r2, [pc, #428]	@ (8005ff4 <HAL_ADC_IRQHandler+0x274>)
 8005e48:	6891      	ldr	r1, [r2, #8]
 8005e4a:	06c9      	lsls	r1, r1, #27
 8005e4c:	d00c      	beq.n	8005e68 <HAL_ADC_IRQHandler+0xe8>
 8005e4e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005e52:	d003      	beq.n	8005e5c <HAL_ADC_IRQHandler+0xdc>
 8005e54:	4966      	ldr	r1, [pc, #408]	@ (8005ff0 <HAL_ADC_IRQHandler+0x270>)
 8005e56:	428b      	cmp	r3, r1
 8005e58:	f040 80fc 	bne.w	8006054 <HAL_ADC_IRQHandler+0x2d4>
 8005e5c:	6892      	ldr	r2, [r2, #8]
 8005e5e:	f002 021f 	and.w	r2, r2, #31
 8005e62:	2a05      	cmp	r2, #5
 8005e64:	f040 8108 	bne.w	8006078 <HAL_ADC_IRQHandler+0x2f8>
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8005e68:	68da      	ldr	r2, [r3, #12]
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc))
 8005e6a:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8005e6c:	f011 0fc0 	tst.w	r1, #192	@ 0xc0
 8005e70:	d138      	bne.n	8005ee4 <HAL_ADC_IRQHandler+0x164>
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 8005e72:	0191      	lsls	r1, r2, #6
 8005e74:	d506      	bpl.n	8005e84 <HAL_ADC_IRQHandler+0x104>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 8005e76:	68d9      	ldr	r1, [r3, #12]
          (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )   )
 8005e78:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 8005e7c:	f401 6140 	and.w	r1, r1, #3072	@ 0xc00
 8005e80:	4311      	orrs	r1, r2
 8005e82:	d12f      	bne.n	8005ee4 <HAL_ADC_IRQHandler+0x164>
        if((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS)
 8005e84:	0668      	lsls	r0, r5, #25
 8005e86:	d52d      	bpl.n	8005ee4 <HAL_ADC_IRQHandler+0x164>
          if (ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc))
 8005e88:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005e8c:	d003      	beq.n	8005e96 <HAL_ADC_IRQHandler+0x116>
 8005e8e:	4a58      	ldr	r2, [pc, #352]	@ (8005ff0 <HAL_ADC_IRQHandler+0x270>)
 8005e90:	4293      	cmp	r3, r2
 8005e92:	f040 810d 	bne.w	80060b0 <HAL_ADC_IRQHandler+0x330>
 8005e96:	4a57      	ldr	r2, [pc, #348]	@ (8005ff4 <HAL_ADC_IRQHandler+0x274>)
 8005e98:	6891      	ldr	r1, [r2, #8]
 8005e9a:	06c9      	lsls	r1, r1, #27
 8005e9c:	d00c      	beq.n	8005eb8 <HAL_ADC_IRQHandler+0x138>
 8005e9e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005ea2:	d003      	beq.n	8005eac <HAL_ADC_IRQHandler+0x12c>
 8005ea4:	4952      	ldr	r1, [pc, #328]	@ (8005ff0 <HAL_ADC_IRQHandler+0x270>)
 8005ea6:	428b      	cmp	r3, r1
 8005ea8:	f040 8107 	bne.w	80060ba <HAL_ADC_IRQHandler+0x33a>
 8005eac:	6892      	ldr	r2, [r2, #8]
 8005eae:	f002 021f 	and.w	r2, r2, #31
 8005eb2:	2a06      	cmp	r2, #6
 8005eb4:	f040 8113 	bne.w	80060de <HAL_ADC_IRQHandler+0x35e>
            tmp_cfgr_jqm = READ_REG(hadc->Instance->CFGR); 
 8005eb8:	68da      	ldr	r2, [r3, #12]
          if(READ_BIT(tmp_cfgr_jqm, ADC_CFGR_JQM) == RESET)
 8005eba:	0291      	lsls	r1, r2, #10
 8005ebc:	d412      	bmi.n	8005ee4 <HAL_ADC_IRQHandler+0x164>
            if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 8005ebe:	689a      	ldr	r2, [r3, #8]
 8005ec0:	0712      	lsls	r2, r2, #28
 8005ec2:	f100 8128 	bmi.w	8006116 <HAL_ADC_IRQHandler+0x396>
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8005ec6:	685a      	ldr	r2, [r3, #4]
 8005ec8:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005ecc:	605a      	str	r2, [r3, #4]
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8005ece:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005ed0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005ed4:	6423      	str	r3, [r4, #64]	@ 0x40
              if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8005ed6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005ed8:	05d8      	lsls	r0, r3, #23
 8005eda:	d403      	bmi.n	8005ee4 <HAL_ADC_IRQHandler+0x164>
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005edc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005ede:	f043 0301 	orr.w	r3, r3, #1
 8005ee2:	6423      	str	r3, [r4, #64]	@ 0x40
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8005ee4:	4620      	mov	r0, r4
 8005ee6:	f7ff ff47 	bl	8005d78 <HAL_ADCEx_InjectedConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8005eea:	6823      	ldr	r3, [r4, #0]
 8005eec:	2260      	movs	r2, #96	@ 0x60
 8005eee:	601a      	str	r2, [r3, #0]
  if(((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8005ef0:	0629      	lsls	r1, r5, #24
 8005ef2:	d50b      	bpl.n	8005f0c <HAL_ADC_IRQHandler+0x18c>
 8005ef4:	0632      	lsls	r2, r6, #24
 8005ef6:	d509      	bpl.n	8005f0c <HAL_ADC_IRQHandler+0x18c>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8005ef8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005efa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005efe:	6423      	str	r3, [r4, #64]	@ 0x40
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8005f00:	4620      	mov	r0, r4
 8005f02:	f7ff fde8 	bl	8005ad6 <HAL_ADC_LevelOutOfWindowCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8005f06:	6823      	ldr	r3, [r4, #0]
 8005f08:	2280      	movs	r2, #128	@ 0x80
 8005f0a:	601a      	str	r2, [r3, #0]
  if(((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8005f0c:	05eb      	lsls	r3, r5, #23
 8005f0e:	d50c      	bpl.n	8005f2a <HAL_ADC_IRQHandler+0x1aa>
 8005f10:	05f0      	lsls	r0, r6, #23
 8005f12:	d50a      	bpl.n	8005f2a <HAL_ADC_IRQHandler+0x1aa>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8005f14:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005f16:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005f1a:	6423      	str	r3, [r4, #64]	@ 0x40
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8005f1c:	4620      	mov	r0, r4
 8005f1e:	f7ff ff2d 	bl	8005d7c <HAL_ADCEx_LevelOutOfWindow2Callback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8005f22:	6823      	ldr	r3, [r4, #0]
 8005f24:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005f28:	601a      	str	r2, [r3, #0]
  if(((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8005f2a:	05a9      	lsls	r1, r5, #22
 8005f2c:	d50c      	bpl.n	8005f48 <HAL_ADC_IRQHandler+0x1c8>
 8005f2e:	05b2      	lsls	r2, r6, #22
 8005f30:	d50a      	bpl.n	8005f48 <HAL_ADC_IRQHandler+0x1c8>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8005f32:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005f34:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005f38:	6423      	str	r3, [r4, #64]	@ 0x40
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8005f3a:	4620      	mov	r0, r4
 8005f3c:	f7ff ff1f 	bl	8005d7e <HAL_ADCEx_LevelOutOfWindow3Callback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8005f40:	6823      	ldr	r3, [r4, #0]
 8005f42:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005f46:	601a      	str	r2, [r3, #0]
  if(((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8005f48:	06eb      	lsls	r3, r5, #27
 8005f4a:	d525      	bpl.n	8005f98 <HAL_ADC_IRQHandler+0x218>
 8005f4c:	06f0      	lsls	r0, r6, #27
 8005f4e:	d523      	bpl.n	8005f98 <HAL_ADC_IRQHandler+0x218>
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8005f50:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005f52:	2b01      	cmp	r3, #1
 8005f54:	d012      	beq.n	8005f7c <HAL_ADC_IRQHandler+0x1fc>
      tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005f56:	6822      	ldr	r2, [r4, #0]
 8005f58:	f1b2 4fa0 	cmp.w	r2, #1342177280	@ 0x50000000
 8005f5c:	f000 80e4 	beq.w	8006128 <HAL_ADC_IRQHandler+0x3a8>
 8005f60:	4823      	ldr	r0, [pc, #140]	@ (8005ff0 <HAL_ADC_IRQHandler+0x270>)
 8005f62:	4b25      	ldr	r3, [pc, #148]	@ (8005ff8 <HAL_ADC_IRQHandler+0x278>)
 8005f64:	4923      	ldr	r1, [pc, #140]	@ (8005ff4 <HAL_ADC_IRQHandler+0x274>)
 8005f66:	4282      	cmp	r2, r0
 8005f68:	bf08      	it	eq
 8005f6a:	460b      	moveq	r3, r1
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8005f6c:	6899      	ldr	r1, [r3, #8]
 8005f6e:	06c9      	lsls	r1, r1, #27
 8005f70:	f040 80dc 	bne.w	800612c <HAL_ADC_IRQHandler+0x3ac>
        if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8005f74:	68d3      	ldr	r3, [r2, #12]
 8005f76:	f013 0f01 	tst.w	r3, #1
        if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 8005f7a:	d00a      	beq.n	8005f92 <HAL_ADC_IRQHandler+0x212>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8005f7c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005f7e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005f82:	6423      	str	r3, [r4, #64]	@ 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8005f84:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8005f86:	f043 0302 	orr.w	r3, r3, #2
 8005f8a:	6463      	str	r3, [r4, #68]	@ 0x44
      HAL_ADC_ErrorCallback(hadc);
 8005f8c:	4620      	mov	r0, r4
 8005f8e:	f7ff fda3 	bl	8005ad8 <HAL_ADC_ErrorCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8005f92:	6823      	ldr	r3, [r4, #0]
 8005f94:	2210      	movs	r2, #16
 8005f96:	601a      	str	r2, [r3, #0]
  if(((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8005f98:	056a      	lsls	r2, r5, #21
 8005f9a:	d510      	bpl.n	8005fbe <HAL_ADC_IRQHandler+0x23e>
 8005f9c:	0573      	lsls	r3, r6, #21
 8005f9e:	d50e      	bpl.n	8005fbe <HAL_ADC_IRQHandler+0x23e>
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8005fa0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005fa2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005fa6:	6423      	str	r3, [r4, #64]	@ 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8005fa8:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8005faa:	f043 0308 	orr.w	r3, r3, #8
 8005fae:	6463      	str	r3, [r4, #68]	@ 0x44
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8005fb0:	6823      	ldr	r3, [r4, #0]
 8005fb2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005fb6:	601a      	str	r2, [r3, #0]
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8005fb8:	4620      	mov	r0, r4
 8005fba:	f7ff fede 	bl	8005d7a <HAL_ADCEx_InjectedQueueOverflowCallback>
}
 8005fbe:	bd70      	pop	{r4, r5, r6, pc}
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8005fc0:	4a0d      	ldr	r2, [pc, #52]	@ (8005ff8 <HAL_ADC_IRQHandler+0x278>)
 8005fc2:	6892      	ldr	r2, [r2, #8]
 8005fc4:	06d0      	lsls	r0, r2, #27
 8005fc6:	f43f af07 	beq.w	8005dd8 <HAL_ADC_IRQHandler+0x58>
 8005fca:	4a0b      	ldr	r2, [pc, #44]	@ (8005ff8 <HAL_ADC_IRQHandler+0x278>)
 8005fcc:	6892      	ldr	r2, [r2, #8]
 8005fce:	f002 021f 	and.w	r2, r2, #31
 8005fd2:	2a05      	cmp	r2, #5
 8005fd4:	f43f af00 	beq.w	8005dd8 <HAL_ADC_IRQHandler+0x58>
 8005fd8:	4a07      	ldr	r2, [pc, #28]	@ (8005ff8 <HAL_ADC_IRQHandler+0x278>)
 8005fda:	6892      	ldr	r2, [r2, #8]
 8005fdc:	f002 021f 	and.w	r2, r2, #31
 8005fe0:	2a09      	cmp	r2, #9
 8005fe2:	f43f aef9 	beq.w	8005dd8 <HAL_ADC_IRQHandler+0x58>
 8005fe6:	4a05      	ldr	r2, [pc, #20]	@ (8005ffc <HAL_ADC_IRQHandler+0x27c>)
 8005fe8:	4293      	cmp	r3, r2
 8005fea:	d123      	bne.n	8006034 <HAL_ADC_IRQHandler+0x2b4>
 8005fec:	e6f4      	b.n	8005dd8 <HAL_ADC_IRQHandler+0x58>
 8005fee:	bf00      	nop
 8005ff0:	50000100 	.word	0x50000100
 8005ff4:	50000300 	.word	0x50000300
 8005ff8:	50000700 	.word	0x50000700
 8005ffc:	50000400 	.word	0x50000400
 8006000:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006004:	d002      	beq.n	800600c <HAL_ADC_IRQHandler+0x28c>
 8006006:	4a4b      	ldr	r2, [pc, #300]	@ (8006134 <HAL_ADC_IRQHandler+0x3b4>)
 8006008:	4293      	cmp	r3, r2
 800600a:	d1e5      	bne.n	8005fd8 <HAL_ADC_IRQHandler+0x258>
 800600c:	4a4a      	ldr	r2, [pc, #296]	@ (8006138 <HAL_ADC_IRQHandler+0x3b8>)
 800600e:	6892      	ldr	r2, [r2, #8]
 8006010:	f002 021f 	and.w	r2, r2, #31
 8006014:	2a09      	cmp	r2, #9
 8006016:	f43f aedf 	beq.w	8005dd8 <HAL_ADC_IRQHandler+0x58>
 800601a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800601e:	f43f aedb 	beq.w	8005dd8 <HAL_ADC_IRQHandler+0x58>
 8006022:	4a46      	ldr	r2, [pc, #280]	@ (800613c <HAL_ADC_IRQHandler+0x3bc>)
 8006024:	4293      	cmp	r3, r2
 8006026:	f43f aed7 	beq.w	8005dd8 <HAL_ADC_IRQHandler+0x58>
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 800602a:	4942      	ldr	r1, [pc, #264]	@ (8006134 <HAL_ADC_IRQHandler+0x3b4>)
 800602c:	428b      	cmp	r3, r1
 800602e:	bf08      	it	eq
 8006030:	f04f 42a0 	moveq.w	r2, #1342177280	@ 0x50000000
 8006034:	68d2      	ldr	r2, [r2, #12]
 8006036:	e6d0      	b.n	8005dda <HAL_ADC_IRQHandler+0x5a>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006038:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800603a:	f043 0310 	orr.w	r3, r3, #16
 800603e:	6423      	str	r3, [r4, #64]	@ 0x40
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006040:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8006042:	f043 0301 	orr.w	r3, r3, #1
 8006046:	6463      	str	r3, [r4, #68]	@ 0x44
 8006048:	e6e3      	b.n	8005e12 <HAL_ADC_IRQHandler+0x92>
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 800604a:	4a3d      	ldr	r2, [pc, #244]	@ (8006140 <HAL_ADC_IRQHandler+0x3c0>)
 800604c:	6892      	ldr	r2, [r2, #8]
 800604e:	06d0      	lsls	r0, r2, #27
 8006050:	f43f af0a 	beq.w	8005e68 <HAL_ADC_IRQHandler+0xe8>
 8006054:	4a3a      	ldr	r2, [pc, #232]	@ (8006140 <HAL_ADC_IRQHandler+0x3c0>)
 8006056:	6892      	ldr	r2, [r2, #8]
 8006058:	f002 021f 	and.w	r2, r2, #31
 800605c:	2a05      	cmp	r2, #5
 800605e:	f43f af03 	beq.w	8005e68 <HAL_ADC_IRQHandler+0xe8>
 8006062:	4a37      	ldr	r2, [pc, #220]	@ (8006140 <HAL_ADC_IRQHandler+0x3c0>)
 8006064:	6892      	ldr	r2, [r2, #8]
 8006066:	f002 021f 	and.w	r2, r2, #31
 800606a:	2a09      	cmp	r2, #9
 800606c:	f43f aefc 	beq.w	8005e68 <HAL_ADC_IRQHandler+0xe8>
 8006070:	4a32      	ldr	r2, [pc, #200]	@ (800613c <HAL_ADC_IRQHandler+0x3bc>)
 8006072:	4293      	cmp	r3, r2
 8006074:	d11a      	bne.n	80060ac <HAL_ADC_IRQHandler+0x32c>
 8006076:	e6f7      	b.n	8005e68 <HAL_ADC_IRQHandler+0xe8>
 8006078:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800607c:	d002      	beq.n	8006084 <HAL_ADC_IRQHandler+0x304>
 800607e:	4a2d      	ldr	r2, [pc, #180]	@ (8006134 <HAL_ADC_IRQHandler+0x3b4>)
 8006080:	4293      	cmp	r3, r2
 8006082:	d1ee      	bne.n	8006062 <HAL_ADC_IRQHandler+0x2e2>
 8006084:	4a2c      	ldr	r2, [pc, #176]	@ (8006138 <HAL_ADC_IRQHandler+0x3b8>)
 8006086:	6892      	ldr	r2, [r2, #8]
 8006088:	f002 021f 	and.w	r2, r2, #31
 800608c:	2a09      	cmp	r2, #9
 800608e:	f43f aeeb 	beq.w	8005e68 <HAL_ADC_IRQHandler+0xe8>
 8006092:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006096:	f43f aee7 	beq.w	8005e68 <HAL_ADC_IRQHandler+0xe8>
 800609a:	4a28      	ldr	r2, [pc, #160]	@ (800613c <HAL_ADC_IRQHandler+0x3bc>)
 800609c:	4293      	cmp	r3, r2
 800609e:	f43f aee3 	beq.w	8005e68 <HAL_ADC_IRQHandler+0xe8>
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 80060a2:	4924      	ldr	r1, [pc, #144]	@ (8006134 <HAL_ADC_IRQHandler+0x3b4>)
 80060a4:	428b      	cmp	r3, r1
 80060a6:	bf08      	it	eq
 80060a8:	f04f 42a0 	moveq.w	r2, #1342177280	@ 0x50000000
 80060ac:	68d2      	ldr	r2, [r2, #12]
 80060ae:	e6dc      	b.n	8005e6a <HAL_ADC_IRQHandler+0xea>
          if (ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc))
 80060b0:	4a23      	ldr	r2, [pc, #140]	@ (8006140 <HAL_ADC_IRQHandler+0x3c0>)
 80060b2:	6892      	ldr	r2, [r2, #8]
 80060b4:	06d0      	lsls	r0, r2, #27
 80060b6:	f43f aeff 	beq.w	8005eb8 <HAL_ADC_IRQHandler+0x138>
 80060ba:	4a21      	ldr	r2, [pc, #132]	@ (8006140 <HAL_ADC_IRQHandler+0x3c0>)
 80060bc:	6892      	ldr	r2, [r2, #8]
 80060be:	f002 021f 	and.w	r2, r2, #31
 80060c2:	2a06      	cmp	r2, #6
 80060c4:	f43f aef8 	beq.w	8005eb8 <HAL_ADC_IRQHandler+0x138>
 80060c8:	4a1d      	ldr	r2, [pc, #116]	@ (8006140 <HAL_ADC_IRQHandler+0x3c0>)
 80060ca:	6892      	ldr	r2, [r2, #8]
 80060cc:	f002 021f 	and.w	r2, r2, #31
 80060d0:	2a07      	cmp	r2, #7
 80060d2:	f43f aef1 	beq.w	8005eb8 <HAL_ADC_IRQHandler+0x138>
 80060d6:	4a19      	ldr	r2, [pc, #100]	@ (800613c <HAL_ADC_IRQHandler+0x3bc>)
 80060d8:	4293      	cmp	r3, r2
 80060da:	d11a      	bne.n	8006112 <HAL_ADC_IRQHandler+0x392>
 80060dc:	e6ec      	b.n	8005eb8 <HAL_ADC_IRQHandler+0x138>
 80060de:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80060e2:	d002      	beq.n	80060ea <HAL_ADC_IRQHandler+0x36a>
 80060e4:	4a13      	ldr	r2, [pc, #76]	@ (8006134 <HAL_ADC_IRQHandler+0x3b4>)
 80060e6:	4293      	cmp	r3, r2
 80060e8:	d1ee      	bne.n	80060c8 <HAL_ADC_IRQHandler+0x348>
 80060ea:	4a13      	ldr	r2, [pc, #76]	@ (8006138 <HAL_ADC_IRQHandler+0x3b8>)
 80060ec:	6892      	ldr	r2, [r2, #8]
 80060ee:	f002 021f 	and.w	r2, r2, #31
 80060f2:	2a07      	cmp	r2, #7
 80060f4:	f43f aee0 	beq.w	8005eb8 <HAL_ADC_IRQHandler+0x138>
 80060f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80060fc:	f43f aedc 	beq.w	8005eb8 <HAL_ADC_IRQHandler+0x138>
 8006100:	4a0e      	ldr	r2, [pc, #56]	@ (800613c <HAL_ADC_IRQHandler+0x3bc>)
 8006102:	4293      	cmp	r3, r2
 8006104:	f43f aed8 	beq.w	8005eb8 <HAL_ADC_IRQHandler+0x138>
            tmp_cfgr_jqm = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8006108:	490a      	ldr	r1, [pc, #40]	@ (8006134 <HAL_ADC_IRQHandler+0x3b4>)
 800610a:	428b      	cmp	r3, r1
 800610c:	bf08      	it	eq
 800610e:	f04f 42a0 	moveq.w	r2, #1342177280	@ 0x50000000
 8006112:	68d2      	ldr	r2, [r2, #12]
 8006114:	e6d1      	b.n	8005eba <HAL_ADC_IRQHandler+0x13a>
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006116:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006118:	f043 0310 	orr.w	r3, r3, #16
 800611c:	6423      	str	r3, [r4, #64]	@ 0x40
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800611e:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8006120:	f043 0301 	orr.w	r3, r3, #1
 8006124:	6463      	str	r3, [r4, #68]	@ 0x44
 8006126:	e6dd      	b.n	8005ee4 <HAL_ADC_IRQHandler+0x164>
      tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006128:	4b03      	ldr	r3, [pc, #12]	@ (8006138 <HAL_ADC_IRQHandler+0x3b8>)
 800612a:	e71f      	b.n	8005f6c <HAL_ADC_IRQHandler+0x1ec>
        if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 800612c:	689b      	ldr	r3, [r3, #8]
 800612e:	f413 4f40 	tst.w	r3, #49152	@ 0xc000
 8006132:	e722      	b.n	8005f7a <HAL_ADC_IRQHandler+0x1fa>
 8006134:	50000100 	.word	0x50000100
 8006138:	50000300 	.word	0x50000300
 800613c:	50000400 	.word	0x50000400
 8006140:	50000700 	.word	0x50000700

08006144 <HAL_ADC_ConfigChannel>:
{
 8006144:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006146:	4605      	mov	r5, r0
  __IO uint32_t wait_loop_index = 0U;
 8006148:	2300      	movs	r3, #0
 800614a:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 800614c:	f895 303c 	ldrb.w	r3, [r5, #60]	@ 0x3c
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8006150:	68c8      	ldr	r0, [r1, #12]
  __HAL_LOCK(hadc);
 8006152:	2b01      	cmp	r3, #1
 8006154:	f000 816a 	beq.w	800642c <HAL_ADC_ConfigChannel+0x2e8>
 8006158:	2301      	movs	r3, #1
 800615a:	f885 303c 	strb.w	r3, [r5, #60]	@ 0x3c
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800615e:	682b      	ldr	r3, [r5, #0]
 8006160:	689a      	ldr	r2, [r3, #8]
 8006162:	0757      	lsls	r7, r2, #29
 8006164:	f100 815c 	bmi.w	8006420 <HAL_ADC_ConfigChannel+0x2dc>
    if (sConfig->Rank < 5U)
 8006168:	684e      	ldr	r6, [r1, #4]
      MODIFY_REG(hadc->Instance->SQR1,
 800616a:	680c      	ldr	r4, [r1, #0]
 800616c:	2206      	movs	r2, #6
    if (sConfig->Rank < 5U)
 800616e:	2e04      	cmp	r6, #4
      MODIFY_REG(hadc->Instance->SQR1,
 8006170:	fb06 f202 	mul.w	r2, r6, r2
    if (sConfig->Rank < 5U)
 8006174:	d82c      	bhi.n	80061d0 <HAL_ADC_ConfigChannel+0x8c>
      MODIFY_REG(hadc->Instance->SQR1,
 8006176:	6b1e      	ldr	r6, [r3, #48]	@ 0x30
 8006178:	271f      	movs	r7, #31
 800617a:	4097      	lsls	r7, r2
 800617c:	ea26 0607 	bic.w	r6, r6, r7
 8006180:	fa04 f202 	lsl.w	r2, r4, r2
 8006184:	4332      	orrs	r2, r6
 8006186:	631a      	str	r2, [r3, #48]	@ 0x30
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8006188:	689a      	ldr	r2, [r3, #8]
 800618a:	f012 0f0c 	tst.w	r2, #12
 800618e:	d158      	bne.n	8006242 <HAL_ADC_ConfigChannel+0xfe>
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8006190:	2c09      	cmp	r4, #9
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8006192:	f8d1 c008 	ldr.w	ip, [r1, #8]
 8006196:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 800619a:	f04f 0607 	mov.w	r6, #7
    if (sConfig->Channel >= ADC_CHANNEL_10)
 800619e:	d93c      	bls.n	800621a <HAL_ADC_ConfigChannel+0xd6>
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 80061a0:	699f      	ldr	r7, [r3, #24]
 80061a2:	3a1e      	subs	r2, #30
 80061a4:	4096      	lsls	r6, r2
 80061a6:	ea27 0606 	bic.w	r6, r7, r6
 80061aa:	fa0c f202 	lsl.w	r2, ip, r2
 80061ae:	4332      	orrs	r2, r6
 80061b0:	619a      	str	r2, [r3, #24]
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 80061b2:	68da      	ldr	r2, [r3, #12]
 80061b4:	694e      	ldr	r6, [r1, #20]
 80061b6:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 80061ba:	0052      	lsls	r2, r2, #1
 80061bc:	4096      	lsls	r6, r2
    switch (sConfig->OffsetNumber)
 80061be:	690a      	ldr	r2, [r1, #16]
 80061c0:	3a01      	subs	r2, #1
      MODIFY_REG(hadc->Instance->OFR1               ,
 80061c2:	06a7      	lsls	r7, r4, #26
    switch (sConfig->OffsetNumber)
 80061c4:	2a03      	cmp	r2, #3
 80061c6:	d86b      	bhi.n	80062a0 <HAL_ADC_ConfigChannel+0x15c>
 80061c8:	e8df f002 	tbb	[pc, r2]
 80061cc:	5f544931 	.word	0x5f544931
    else if (sConfig->Rank < 10U)
 80061d0:	2e09      	cmp	r6, #9
 80061d2:	d80a      	bhi.n	80061ea <HAL_ADC_ConfigChannel+0xa6>
      MODIFY_REG(hadc->Instance->SQR2,
 80061d4:	6b5e      	ldr	r6, [r3, #52]	@ 0x34
 80061d6:	3a1e      	subs	r2, #30
 80061d8:	271f      	movs	r7, #31
 80061da:	4097      	lsls	r7, r2
 80061dc:	ea26 0607 	bic.w	r6, r6, r7
 80061e0:	fa04 f202 	lsl.w	r2, r4, r2
 80061e4:	4332      	orrs	r2, r6
 80061e6:	635a      	str	r2, [r3, #52]	@ 0x34
 80061e8:	e7ce      	b.n	8006188 <HAL_ADC_ConfigChannel+0x44>
    else if (sConfig->Rank < 15U)
 80061ea:	2e0e      	cmp	r6, #14
 80061ec:	f04f 061f 	mov.w	r6, #31
 80061f0:	d809      	bhi.n	8006206 <HAL_ADC_ConfigChannel+0xc2>
      MODIFY_REG(hadc->Instance->SQR3                        ,
 80061f2:	6b9f      	ldr	r7, [r3, #56]	@ 0x38
 80061f4:	3a3c      	subs	r2, #60	@ 0x3c
 80061f6:	4096      	lsls	r6, r2
 80061f8:	ea27 0606 	bic.w	r6, r7, r6
 80061fc:	fa04 f202 	lsl.w	r2, r4, r2
 8006200:	4332      	orrs	r2, r6
 8006202:	639a      	str	r2, [r3, #56]	@ 0x38
 8006204:	e7c0      	b.n	8006188 <HAL_ADC_ConfigChannel+0x44>
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8006206:	6bdf      	ldr	r7, [r3, #60]	@ 0x3c
 8006208:	3a5a      	subs	r2, #90	@ 0x5a
 800620a:	4096      	lsls	r6, r2
 800620c:	ea27 0606 	bic.w	r6, r7, r6
 8006210:	fa04 f202 	lsl.w	r2, r4, r2
 8006214:	4332      	orrs	r2, r6
 8006216:	63da      	str	r2, [r3, #60]	@ 0x3c
 8006218:	e7b6      	b.n	8006188 <HAL_ADC_ConfigChannel+0x44>
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 800621a:	695f      	ldr	r7, [r3, #20]
 800621c:	4096      	lsls	r6, r2
 800621e:	ea27 0606 	bic.w	r6, r7, r6
 8006222:	fa0c fc02 	lsl.w	ip, ip, r2
 8006226:	ea46 060c 	orr.w	r6, r6, ip
 800622a:	615e      	str	r6, [r3, #20]
 800622c:	e7c1      	b.n	80061b2 <HAL_ADC_ConfigChannel+0x6e>
      MODIFY_REG(hadc->Instance->OFR1               ,
 800622e:	f8d3 c060 	ldr.w	ip, [r3, #96]	@ 0x60
 8006232:	4a7f      	ldr	r2, [pc, #508]	@ (8006430 <HAL_ADC_ConfigChannel+0x2ec>)
 8006234:	ea0c 0202 	and.w	r2, ip, r2
 8006238:	433a      	orrs	r2, r7
 800623a:	4332      	orrs	r2, r6
 800623c:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8006240:	661a      	str	r2, [r3, #96]	@ 0x60
  if (ADC_IS_ENABLE(hadc) == RESET)
 8006242:	689a      	ldr	r2, [r3, #8]
 8006244:	f002 0203 	and.w	r2, r2, #3
 8006248:	2a01      	cmp	r2, #1
 800624a:	d14d      	bne.n	80062e8 <HAL_ADC_ConfigChannel+0x1a4>
 800624c:	681a      	ldr	r2, [r3, #0]
 800624e:	07d6      	lsls	r6, r2, #31
 8006250:	d54a      	bpl.n	80062e8 <HAL_ADC_ConfigChannel+0x1a4>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006252:	2000      	movs	r0, #0
  __HAL_UNLOCK(hadc);
 8006254:	2300      	movs	r3, #0
 8006256:	f885 303c 	strb.w	r3, [r5, #60]	@ 0x3c
}
 800625a:	b003      	add	sp, #12
 800625c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      MODIFY_REG(hadc->Instance->OFR2               ,
 800625e:	f8d3 c064 	ldr.w	ip, [r3, #100]	@ 0x64
 8006262:	4a73      	ldr	r2, [pc, #460]	@ (8006430 <HAL_ADC_ConfigChannel+0x2ec>)
 8006264:	ea0c 0202 	and.w	r2, ip, r2
 8006268:	433a      	orrs	r2, r7
 800626a:	4332      	orrs	r2, r6
 800626c:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8006270:	665a      	str	r2, [r3, #100]	@ 0x64
      break;
 8006272:	e7e6      	b.n	8006242 <HAL_ADC_ConfigChannel+0xfe>
      MODIFY_REG(hadc->Instance->OFR3               ,
 8006274:	f8d3 c068 	ldr.w	ip, [r3, #104]	@ 0x68
 8006278:	4a6d      	ldr	r2, [pc, #436]	@ (8006430 <HAL_ADC_ConfigChannel+0x2ec>)
 800627a:	ea0c 0202 	and.w	r2, ip, r2
 800627e:	433a      	orrs	r2, r7
 8006280:	4332      	orrs	r2, r6
 8006282:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8006286:	669a      	str	r2, [r3, #104]	@ 0x68
      break;
 8006288:	e7db      	b.n	8006242 <HAL_ADC_ConfigChannel+0xfe>
      MODIFY_REG(hadc->Instance->OFR4               ,
 800628a:	f8d3 c06c 	ldr.w	ip, [r3, #108]	@ 0x6c
 800628e:	4a68      	ldr	r2, [pc, #416]	@ (8006430 <HAL_ADC_ConfigChannel+0x2ec>)
 8006290:	ea0c 0202 	and.w	r2, ip, r2
 8006294:	433a      	orrs	r2, r7
 8006296:	4332      	orrs	r2, r6
 8006298:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 800629c:	66da      	str	r2, [r3, #108]	@ 0x6c
 800629e:	e7d0      	b.n	8006242 <HAL_ADC_ConfigChannel+0xfe>
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80062a0:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80062a2:	f002 42f8 	and.w	r2, r2, #2080374784	@ 0x7c000000
 80062a6:	42ba      	cmp	r2, r7
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 80062a8:	bf02      	ittt	eq
 80062aa:	6e1a      	ldreq	r2, [r3, #96]	@ 0x60
 80062ac:	f022 4200 	biceq.w	r2, r2, #2147483648	@ 0x80000000
 80062b0:	661a      	streq	r2, [r3, #96]	@ 0x60
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80062b2:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80062b4:	f002 42f8 	and.w	r2, r2, #2080374784	@ 0x7c000000
 80062b8:	42ba      	cmp	r2, r7
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 80062ba:	bf02      	ittt	eq
 80062bc:	6e5a      	ldreq	r2, [r3, #100]	@ 0x64
 80062be:	f022 4200 	biceq.w	r2, r2, #2147483648	@ 0x80000000
 80062c2:	665a      	streq	r2, [r3, #100]	@ 0x64
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80062c4:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80062c6:	f002 42f8 	and.w	r2, r2, #2080374784	@ 0x7c000000
 80062ca:	42ba      	cmp	r2, r7
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 80062cc:	bf02      	ittt	eq
 80062ce:	6e9a      	ldreq	r2, [r3, #104]	@ 0x68
 80062d0:	f022 4200 	biceq.w	r2, r2, #2147483648	@ 0x80000000
 80062d4:	669a      	streq	r2, [r3, #104]	@ 0x68
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80062d6:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80062d8:	f002 42f8 	and.w	r2, r2, #2080374784	@ 0x7c000000
 80062dc:	42ba      	cmp	r2, r7
 80062de:	d1b0      	bne.n	8006242 <HAL_ADC_ConfigChannel+0xfe>
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 80062e0:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80062e2:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80062e6:	e7d9      	b.n	800629c <HAL_ADC_ConfigChannel+0x158>
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80062e8:	2201      	movs	r2, #1
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80062ea:	2801      	cmp	r0, #1
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80062ec:	fa02 f204 	lsl.w	r2, r2, r4
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80062f0:	d047      	beq.n	8006382 <HAL_ADC_ConfigChannel+0x23e>
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80062f2:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 80062f6:	ea21 0202 	bic.w	r2, r1, r2
 80062fa:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80062fe:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006302:	d164      	bne.n	80063ce <HAL_ADC_ConfigChannel+0x28a>
 8006304:	494b      	ldr	r1, [pc, #300]	@ (8006434 <HAL_ADC_ConfigChannel+0x2f0>)
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8006306:	2c10      	cmp	r4, #16
 8006308:	d166      	bne.n	80063d8 <HAL_ADC_ConfigChannel+0x294>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 800630a:	688a      	ldr	r2, [r1, #8]
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800630c:	f412 0f00 	tst.w	r2, #8388608	@ 0x800000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8006310:	d19f      	bne.n	8006252 <HAL_ADC_ConfigChannel+0x10e>
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8006312:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006316:	4a48      	ldr	r2, [pc, #288]	@ (8006438 <HAL_ADC_ConfigChannel+0x2f4>)
 8006318:	d009      	beq.n	800632e <HAL_ADC_ConfigChannel+0x1ea>
 800631a:	4293      	cmp	r3, r2
 800631c:	d069      	beq.n	80063f2 <HAL_ADC_ConfigChannel+0x2ae>
 800631e:	f502 7240 	add.w	r2, r2, #768	@ 0x300
 8006322:	4293      	cmp	r3, r2
 8006324:	4845      	ldr	r0, [pc, #276]	@ (800643c <HAL_ADC_ConfigChannel+0x2f8>)
 8006326:	d067      	beq.n	80063f8 <HAL_ADC_ConfigChannel+0x2b4>
 8006328:	4283      	cmp	r3, r0
 800632a:	bf18      	it	ne
 800632c:	2200      	movne	r2, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800632e:	6898      	ldr	r0, [r3, #8]
 8006330:	f000 0003 	and.w	r0, r0, #3
 8006334:	2801      	cmp	r0, #1
 8006336:	d102      	bne.n	800633e <HAL_ADC_ConfigChannel+0x1fa>
 8006338:	6818      	ldr	r0, [r3, #0]
 800633a:	07c0      	lsls	r0, r0, #31
 800633c:	d470      	bmi.n	8006420 <HAL_ADC_ConfigChannel+0x2dc>
 800633e:	b13a      	cbz	r2, 8006350 <HAL_ADC_ConfigChannel+0x20c>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8006340:	6890      	ldr	r0, [r2, #8]
 8006342:	f000 0003 	and.w	r0, r0, #3
 8006346:	2801      	cmp	r0, #1
 8006348:	d102      	bne.n	8006350 <HAL_ADC_ConfigChannel+0x20c>
 800634a:	6812      	ldr	r2, [r2, #0]
 800634c:	07d2      	lsls	r2, r2, #31
 800634e:	d467      	bmi.n	8006420 <HAL_ADC_ConfigChannel+0x2dc>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8006350:	2c10      	cmp	r4, #16
 8006352:	d153      	bne.n	80063fc <HAL_ADC_ConfigChannel+0x2b8>
 8006354:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006358:	f47f af7b 	bne.w	8006252 <HAL_ADC_ConfigChannel+0x10e>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 800635c:	688b      	ldr	r3, [r1, #8]
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800635e:	4a38      	ldr	r2, [pc, #224]	@ (8006440 <HAL_ADC_ConfigChannel+0x2fc>)
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8006360:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8006364:	608b      	str	r3, [r1, #8]
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8006366:	4b37      	ldr	r3, [pc, #220]	@ (8006444 <HAL_ADC_ConfigChannel+0x300>)
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	fbb3 f3f2 	udiv	r3, r3, r2
 800636e:	220a      	movs	r2, #10
 8006370:	4353      	muls	r3, r2
            wait_loop_index--;
 8006372:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 8006374:	9b01      	ldr	r3, [sp, #4]
 8006376:	2b00      	cmp	r3, #0
 8006378:	f43f af6b 	beq.w	8006252 <HAL_ADC_ConfigChannel+0x10e>
            wait_loop_index--;
 800637c:	9b01      	ldr	r3, [sp, #4]
 800637e:	3b01      	subs	r3, #1
 8006380:	e7f7      	b.n	8006372 <HAL_ADC_ConfigChannel+0x22e>
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8006382:	f8d3 00b0 	ldr.w	r0, [r3, #176]	@ 0xb0
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8006386:	2c09      	cmp	r4, #9
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8006388:	ea42 0200 	orr.w	r2, r2, r0
 800638c:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8006390:	6888      	ldr	r0, [r1, #8]
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8006392:	d90c      	bls.n	80063ae <HAL_ADC_ConfigChannel+0x26a>
        MODIFY_REG(hadc->Instance->SMPR2,
 8006394:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 8006398:	6999      	ldr	r1, [r3, #24]
 800639a:	3a1b      	subs	r2, #27
 800639c:	2607      	movs	r6, #7
 800639e:	4096      	lsls	r6, r2
 80063a0:	ea21 0106 	bic.w	r1, r1, r6
 80063a4:	fa00 f202 	lsl.w	r2, r0, r2
 80063a8:	430a      	orrs	r2, r1
 80063aa:	619a      	str	r2, [r3, #24]
 80063ac:	e7a7      	b.n	80062fe <HAL_ADC_ConfigChannel+0x1ba>
        MODIFY_REG(hadc->Instance->SMPR1,
 80063ae:	1c61      	adds	r1, r4, #1
 80063b0:	695a      	ldr	r2, [r3, #20]
 80063b2:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80063b6:	2607      	movs	r6, #7
 80063b8:	408e      	lsls	r6, r1
 80063ba:	ea22 0206 	bic.w	r2, r2, r6
 80063be:	fa00 f101 	lsl.w	r1, r0, r1
 80063c2:	430a      	orrs	r2, r1
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80063c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
        MODIFY_REG(hadc->Instance->SMPR1,
 80063c8:	615a      	str	r2, [r3, #20]
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80063ca:	f43f af42 	beq.w	8006252 <HAL_ADC_ConfigChannel+0x10e>
 80063ce:	4a1a      	ldr	r2, [pc, #104]	@ (8006438 <HAL_ADC_ConfigChannel+0x2f4>)
 80063d0:	4293      	cmp	r3, r2
 80063d2:	d097      	beq.n	8006304 <HAL_ADC_ConfigChannel+0x1c0>
 80063d4:	491c      	ldr	r1, [pc, #112]	@ (8006448 <HAL_ADC_ConfigChannel+0x304>)
 80063d6:	e796      	b.n	8006306 <HAL_ADC_ConfigChannel+0x1c2>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80063d8:	2c11      	cmp	r4, #17
 80063da:	d103      	bne.n	80063e4 <HAL_ADC_ConfigChannel+0x2a0>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80063dc:	688a      	ldr	r2, [r1, #8]
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80063de:	f012 7f80 	tst.w	r2, #16777216	@ 0x1000000
 80063e2:	e795      	b.n	8006310 <HAL_ADC_ConfigChannel+0x1cc>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80063e4:	2c12      	cmp	r4, #18
 80063e6:	f47f af34 	bne.w	8006252 <HAL_ADC_ConfigChannel+0x10e>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 80063ea:	688a      	ldr	r2, [r1, #8]
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80063ec:	f412 0f80 	tst.w	r2, #4194304	@ 0x400000
 80063f0:	e78e      	b.n	8006310 <HAL_ADC_ConfigChannel+0x1cc>
 80063f2:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80063f6:	e79a      	b.n	800632e <HAL_ADC_ConfigChannel+0x1ea>
 80063f8:	4602      	mov	r2, r0
 80063fa:	e798      	b.n	800632e <HAL_ADC_ConfigChannel+0x1ea>
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 80063fc:	2c11      	cmp	r4, #17
 80063fe:	d108      	bne.n	8006412 <HAL_ADC_ConfigChannel+0x2ce>
 8006400:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006404:	f47f af25 	bne.w	8006252 <HAL_ADC_ConfigChannel+0x10e>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8006408:	688b      	ldr	r3, [r1, #8]
 800640a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 800640e:	608b      	str	r3, [r1, #8]
 8006410:	e71f      	b.n	8006252 <HAL_ADC_ConfigChannel+0x10e>
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8006412:	2c12      	cmp	r4, #18
 8006414:	f47f af1d 	bne.w	8006252 <HAL_ADC_ConfigChannel+0x10e>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8006418:	688b      	ldr	r3, [r1, #8]
 800641a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800641e:	e7f6      	b.n	800640e <HAL_ADC_ConfigChannel+0x2ca>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006420:	6c2b      	ldr	r3, [r5, #64]	@ 0x40
 8006422:	f043 0320 	orr.w	r3, r3, #32
 8006426:	642b      	str	r3, [r5, #64]	@ 0x40
    tmp_hal_status = HAL_ERROR;
 8006428:	2001      	movs	r0, #1
 800642a:	e713      	b.n	8006254 <HAL_ADC_ConfigChannel+0x110>
  __HAL_LOCK(hadc);
 800642c:	2002      	movs	r0, #2
 800642e:	e714      	b.n	800625a <HAL_ADC_ConfigChannel+0x116>
 8006430:	83fff000 	.word	0x83fff000
 8006434:	50000300 	.word	0x50000300
 8006438:	50000100 	.word	0x50000100
 800643c:	50000500 	.word	0x50000500
 8006440:	000f4240 	.word	0x000f4240
 8006444:	2000002c 	.word	0x2000002c
 8006448:	50000700 	.word	0x50000700

0800644c <HAL_ADCEx_MultiModeConfigChannel>:
{
 800644c:	b5f0      	push	{r4, r5, r6, r7, lr}
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800644e:	6804      	ldr	r4, [r0, #0]
 8006450:	4b3c      	ldr	r3, [pc, #240]	@ (8006544 <HAL_ADCEx_MultiModeConfigChannel+0xf8>)
 8006452:	f1b4 4fa0 	cmp.w	r4, #1342177280	@ 0x50000000
{
 8006456:	4605      	mov	r5, r0
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8006458:	d009      	beq.n	800646e <HAL_ADCEx_MultiModeConfigChannel+0x22>
 800645a:	429c      	cmp	r4, r3
 800645c:	d047      	beq.n	80064ee <HAL_ADCEx_MultiModeConfigChannel+0xa2>
 800645e:	4a3a      	ldr	r2, [pc, #232]	@ (8006548 <HAL_ADCEx_MultiModeConfigChannel+0xfc>)
 8006460:	4294      	cmp	r4, r2
 8006462:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006466:	d002      	beq.n	800646e <HAL_ADCEx_MultiModeConfigChannel+0x22>
 8006468:	429c      	cmp	r4, r3
 800646a:	d166      	bne.n	800653a <HAL_ADCEx_MultiModeConfigChannel+0xee>
 800646c:	4613      	mov	r3, r2
  __HAL_LOCK(hadc);
 800646e:	f895 203c 	ldrb.w	r2, [r5, #60]	@ 0x3c
 8006472:	2a01      	cmp	r2, #1
 8006474:	d063      	beq.n	800653e <HAL_ADCEx_MultiModeConfigChannel+0xf2>
 8006476:	2201      	movs	r2, #1
  if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8006478:	6808      	ldr	r0, [r1, #0]
  __HAL_LOCK(hadc);
 800647a:	f885 203c 	strb.w	r2, [r5, #60]	@ 0x3c
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 800647e:	68a2      	ldr	r2, [r4, #8]
 8006480:	0752      	lsls	r2, r2, #29
 8006482:	d454      	bmi.n	800652e <HAL_ADCEx_MultiModeConfigChannel+0xe2>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8006484:	689a      	ldr	r2, [r3, #8]
 8006486:	0757      	lsls	r7, r2, #29
 8006488:	d451      	bmi.n	800652e <HAL_ADCEx_MultiModeConfigChannel+0xe2>
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800648a:	f1b4 4fa0 	cmp.w	r4, #1342177280	@ 0x50000000
 800648e:	d031      	beq.n	80064f4 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8006490:	4f2c      	ldr	r7, [pc, #176]	@ (8006544 <HAL_ADCEx_MultiModeConfigChannel+0xf8>)
 8006492:	4a2e      	ldr	r2, [pc, #184]	@ (800654c <HAL_ADCEx_MultiModeConfigChannel+0x100>)
 8006494:	4e2e      	ldr	r6, [pc, #184]	@ (8006550 <HAL_ADCEx_MultiModeConfigChannel+0x104>)
 8006496:	42bc      	cmp	r4, r7
 8006498:	bf08      	it	eq
 800649a:	4632      	moveq	r2, r6
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800649c:	b360      	cbz	r0, 80064f8 <HAL_ADCEx_MultiModeConfigChannel+0xac>
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 800649e:	6897      	ldr	r7, [r2, #8]
 80064a0:	f895 c030 	ldrb.w	ip, [r5, #48]	@ 0x30
 80064a4:	684e      	ldr	r6, [r1, #4]
 80064a6:	f427 4760 	bic.w	r7, r7, #57344	@ 0xe000
 80064aa:	ea46 364c 	orr.w	r6, r6, ip, lsl #13
 80064ae:	433e      	orrs	r6, r7
 80064b0:	6096      	str	r6, [r2, #8]
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80064b2:	68a6      	ldr	r6, [r4, #8]
 80064b4:	f006 0603 	and.w	r6, r6, #3
 80064b8:	2e01      	cmp	r6, #1
 80064ba:	d102      	bne.n	80064c2 <HAL_ADCEx_MultiModeConfigChannel+0x76>
 80064bc:	6824      	ldr	r4, [r4, #0]
 80064be:	07e6      	lsls	r6, r4, #31
 80064c0:	d410      	bmi.n	80064e4 <HAL_ADCEx_MultiModeConfigChannel+0x98>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80064c2:	689c      	ldr	r4, [r3, #8]
 80064c4:	f004 0403 	and.w	r4, r4, #3
 80064c8:	2c01      	cmp	r4, #1
 80064ca:	d102      	bne.n	80064d2 <HAL_ADCEx_MultiModeConfigChannel+0x86>
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	07dc      	lsls	r4, r3, #31
 80064d0:	d408      	bmi.n	80064e4 <HAL_ADCEx_MultiModeConfigChannel+0x98>
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 80064d2:	6893      	ldr	r3, [r2, #8]
 80064d4:	6889      	ldr	r1, [r1, #8]
 80064d6:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80064da:	4308      	orrs	r0, r1
 80064dc:	f023 030f 	bic.w	r3, r3, #15
 80064e0:	4318      	orrs	r0, r3
 80064e2:	6090      	str	r0, [r2, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80064e4:	2000      	movs	r0, #0
  __HAL_UNLOCK(hadc);
 80064e6:	2300      	movs	r3, #0
 80064e8:	f885 303c 	strb.w	r3, [r5, #60]	@ 0x3c
} 
 80064ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80064ee:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80064f2:	e7bc      	b.n	800646e <HAL_ADCEx_MultiModeConfigChannel+0x22>
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80064f4:	4a16      	ldr	r2, [pc, #88]	@ (8006550 <HAL_ADCEx_MultiModeConfigChannel+0x104>)
 80064f6:	e7d1      	b.n	800649c <HAL_ADCEx_MultiModeConfigChannel+0x50>
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80064f8:	6891      	ldr	r1, [r2, #8]
 80064fa:	f421 4160 	bic.w	r1, r1, #57344	@ 0xe000
 80064fe:	6091      	str	r1, [r2, #8]
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8006500:	68a1      	ldr	r1, [r4, #8]
 8006502:	f001 0103 	and.w	r1, r1, #3
 8006506:	2901      	cmp	r1, #1
 8006508:	d102      	bne.n	8006510 <HAL_ADCEx_MultiModeConfigChannel+0xc4>
 800650a:	6821      	ldr	r1, [r4, #0]
 800650c:	07c9      	lsls	r1, r1, #31
 800650e:	d4e9      	bmi.n	80064e4 <HAL_ADCEx_MultiModeConfigChannel+0x98>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8006510:	6899      	ldr	r1, [r3, #8]
 8006512:	f001 0103 	and.w	r1, r1, #3
 8006516:	2901      	cmp	r1, #1
 8006518:	d102      	bne.n	8006520 <HAL_ADCEx_MultiModeConfigChannel+0xd4>
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	07db      	lsls	r3, r3, #31
 800651e:	d4e1      	bmi.n	80064e4 <HAL_ADCEx_MultiModeConfigChannel+0x98>
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8006520:	6893      	ldr	r3, [r2, #8]
 8006522:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8006526:	f023 030f 	bic.w	r3, r3, #15
 800652a:	6093      	str	r3, [r2, #8]
 800652c:	e7da      	b.n	80064e4 <HAL_ADCEx_MultiModeConfigChannel+0x98>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800652e:	6c2b      	ldr	r3, [r5, #64]	@ 0x40
 8006530:	f043 0320 	orr.w	r3, r3, #32
 8006534:	642b      	str	r3, [r5, #64]	@ 0x40
    tmp_hal_status = HAL_ERROR;
 8006536:	2001      	movs	r0, #1
 8006538:	e7d5      	b.n	80064e6 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
    return HAL_ERROR;
 800653a:	2001      	movs	r0, #1
 800653c:	e7d6      	b.n	80064ec <HAL_ADCEx_MultiModeConfigChannel+0xa0>
  __HAL_LOCK(hadc);
 800653e:	2002      	movs	r0, #2
 8006540:	e7d4      	b.n	80064ec <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 8006542:	bf00      	nop
 8006544:	50000100 	.word	0x50000100
 8006548:	50000400 	.word	0x50000400
 800654c:	50000700 	.word	0x50000700
 8006550:	50000300 	.word	0x50000300

08006554 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006554:	4907      	ldr	r1, [pc, #28]	@ (8006574 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8006556:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006558:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800655c:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800655e:	0412      	lsls	r2, r2, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006560:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006564:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006566:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006568:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800656c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8006570:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8006572:	4770      	bx	lr
 8006574:	e000ed00 	.word	0xe000ed00

08006578 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006578:	4b16      	ldr	r3, [pc, #88]	@ (80065d4 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800657a:	b530      	push	{r4, r5, lr}
 800657c:	68dc      	ldr	r4, [r3, #12]
 800657e:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006582:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006586:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006588:	2b04      	cmp	r3, #4
 800658a:	bf28      	it	cs
 800658c:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800658e:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006590:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006594:	bf8c      	ite	hi
 8006596:	3c03      	subhi	r4, #3
 8006598:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800659a:	fa05 f303 	lsl.w	r3, r5, r3
 800659e:	ea21 0303 	bic.w	r3, r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80065a2:	40a5      	lsls	r5, r4
 80065a4:	ea22 0205 	bic.w	r2, r2, r5
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80065a8:	40a3      	lsls	r3, r4
  if ((int32_t)(IRQn) >= 0)
 80065aa:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80065ac:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80065b0:	bfac      	ite	ge
 80065b2:	f100 4060 	addge.w	r0, r0, #3758096384	@ 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80065b6:	4a08      	ldrlt	r2, [pc, #32]	@ (80065d8 <HAL_NVIC_SetPriority+0x60>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80065b8:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80065bc:	bfb8      	it	lt
 80065be:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80065c2:	b2db      	uxtb	r3, r3
 80065c4:	bfaa      	itet	ge
 80065c6:	f500 4061 	addge.w	r0, r0, #57600	@ 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80065ca:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80065cc:	f880 3300 	strbge.w	r3, [r0, #768]	@ 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80065d0:	bd30      	pop	{r4, r5, pc}
 80065d2:	bf00      	nop
 80065d4:	e000ed00 	.word	0xe000ed00
 80065d8:	e000ed14 	.word	0xe000ed14

080065dc <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80065dc:	2800      	cmp	r0, #0
 80065de:	db07      	blt.n	80065f0 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80065e0:	0941      	lsrs	r1, r0, #5
 80065e2:	4a04      	ldr	r2, [pc, #16]	@ (80065f4 <HAL_NVIC_EnableIRQ+0x18>)
 80065e4:	f000 001f 	and.w	r0, r0, #31
 80065e8:	2301      	movs	r3, #1
 80065ea:	4083      	lsls	r3, r0
 80065ec:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80065f0:	4770      	bx	lr
 80065f2:	bf00      	nop
 80065f4:	e000e100 	.word	0xe000e100

080065f8 <DMA_CalcBaseAndBitshift>:
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80065f8:	6802      	ldr	r2, [r0, #0]
 80065fa:	4b0a      	ldr	r3, [pc, #40]	@ (8006624 <DMA_CalcBaseAndBitshift+0x2c>)
 80065fc:	429a      	cmp	r2, r3
 80065fe:	f04f 0114 	mov.w	r1, #20
 8006602:	d808      	bhi.n	8006616 <DMA_CalcBaseAndBitshift+0x1e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8006604:	4b08      	ldr	r3, [pc, #32]	@ (8006628 <DMA_CalcBaseAndBitshift+0x30>)
 8006606:	4413      	add	r3, r2
 8006608:	4a08      	ldr	r2, [pc, #32]	@ (800662c <DMA_CalcBaseAndBitshift+0x34>)
 800660a:	fbb3 f3f1 	udiv	r3, r3, r1
 800660e:	009b      	lsls	r3, r3, #2
    hdma->DmaBaseAddress = DMA1;
 8006610:	e9c0 230f 	strd	r2, r3, [r0, #60]	@ 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 8006614:	4770      	bx	lr
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8006616:	4b06      	ldr	r3, [pc, #24]	@ (8006630 <DMA_CalcBaseAndBitshift+0x38>)
 8006618:	4413      	add	r3, r2
 800661a:	4a06      	ldr	r2, [pc, #24]	@ (8006634 <DMA_CalcBaseAndBitshift+0x3c>)
 800661c:	fbb3 f3f1 	udiv	r3, r3, r1
 8006620:	009b      	lsls	r3, r3, #2
    hdma->DmaBaseAddress = DMA2;
 8006622:	e7f5      	b.n	8006610 <DMA_CalcBaseAndBitshift+0x18>
 8006624:	40020407 	.word	0x40020407
 8006628:	bffdfff8 	.word	0xbffdfff8
 800662c:	40020000 	.word	0x40020000
 8006630:	bffdfbf8 	.word	0xbffdfbf8
 8006634:	40020400 	.word	0x40020400

08006638 <HAL_DMA_Init>:
{
 8006638:	b538      	push	{r3, r4, r5, lr}
  if(NULL == hdma)
 800663a:	4604      	mov	r4, r0
 800663c:	b1e0      	cbz	r0, 8006678 <HAL_DMA_Init+0x40>
  tmp |=  hdma->Init.Direction        |
 800663e:	e9d0 3501 	ldrd	r3, r5, [r0, #4]
 8006642:	432b      	orrs	r3, r5
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006644:	68c5      	ldr	r5, [r0, #12]
  tmp = hdma->Instance->CCR;
 8006646:	6801      	ldr	r1, [r0, #0]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006648:	432b      	orrs	r3, r5
 800664a:	6905      	ldr	r5, [r0, #16]
  tmp = hdma->Instance->CCR;
 800664c:	680a      	ldr	r2, [r1, #0]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800664e:	432b      	orrs	r3, r5
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006650:	6945      	ldr	r5, [r0, #20]
 8006652:	432b      	orrs	r3, r5
 8006654:	6985      	ldr	r5, [r0, #24]
 8006656:	432b      	orrs	r3, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 8006658:	69c5      	ldr	r5, [r0, #28]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800665a:	f422 527f 	bic.w	r2, r2, #16320	@ 0x3fc0
 800665e:	f022 0230 	bic.w	r2, r2, #48	@ 0x30
          hdma->Init.Mode                | hdma->Init.Priority;
 8006662:	432b      	orrs	r3, r5
  tmp |=  hdma->Init.Direction        |
 8006664:	4313      	orrs	r3, r2
  hdma->Instance->CCR = tmp;
 8006666:	600b      	str	r3, [r1, #0]
  DMA_CalcBaseAndBitshift(hdma);
 8006668:	f7ff ffc6 	bl	80065f8 <DMA_CalcBaseAndBitshift>
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800666c:	2000      	movs	r0, #0
  hdma->Lock = HAL_UNLOCKED;
 800666e:	f44f 7380 	mov.w	r3, #256	@ 0x100
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006672:	63a0      	str	r0, [r4, #56]	@ 0x38
  hdma->Lock = HAL_UNLOCKED;
 8006674:	8423      	strh	r3, [r4, #32]
}
 8006676:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8006678:	2001      	movs	r0, #1
 800667a:	e7fc      	b.n	8006676 <HAL_DMA_Init+0x3e>

0800667c <HAL_DMA_Start_IT>:
{
 800667c:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hdma);
 800667e:	f890 4020 	ldrb.w	r4, [r0, #32]
 8006682:	2c01      	cmp	r4, #1
 8006684:	d033      	beq.n	80066ee <HAL_DMA_Start_IT+0x72>
  if(HAL_DMA_STATE_READY == hdma->State)
 8006686:	f890 5021 	ldrb.w	r5, [r0, #33]	@ 0x21
  __HAL_LOCK(hdma);
 800668a:	2401      	movs	r4, #1
  if(HAL_DMA_STATE_READY == hdma->State)
 800668c:	42a5      	cmp	r5, r4
  __HAL_LOCK(hdma);
 800668e:	f880 4020 	strb.w	r4, [r0, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 8006692:	f04f 0400 	mov.w	r4, #0
 8006696:	d128      	bne.n	80066ea <HAL_DMA_Start_IT+0x6e>
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006698:	6384      	str	r4, [r0, #56]	@ 0x38
    hdma->State = HAL_DMA_STATE_BUSY;
 800669a:	2602      	movs	r6, #2
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800669c:	6804      	ldr	r4, [r0, #0]
    hdma->State = HAL_DMA_STATE_BUSY;
 800669e:	f880 6021 	strb.w	r6, [r0, #33]	@ 0x21
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80066a2:	6826      	ldr	r6, [r4, #0]
 80066a4:	f026 0601 	bic.w	r6, r6, #1
 80066a8:	6026      	str	r6, [r4, #0]
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80066aa:	e9d0 670f 	ldrd	r6, r7, [r0, #60]	@ 0x3c
 80066ae:	40bd      	lsls	r5, r7
 80066b0:	6075      	str	r5, [r6, #4]
  hdma->Instance->CNDTR = DataLength;
 80066b2:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80066b4:	6843      	ldr	r3, [r0, #4]
 80066b6:	2b10      	cmp	r3, #16
    if(NULL != hdma->XferHalfCpltCallback )
 80066b8:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
    hdma->Instance->CPAR = DstAddress;
 80066ba:	bf0b      	itete	eq
 80066bc:	60a2      	streq	r2, [r4, #8]
    hdma->Instance->CPAR = SrcAddress;
 80066be:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 80066c0:	60e1      	streq	r1, [r4, #12]
    hdma->Instance->CMAR = DstAddress;
 80066c2:	60e2      	strne	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback )
 80066c4:	b14b      	cbz	r3, 80066da <HAL_DMA_Start_IT+0x5e>
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80066c6:	6823      	ldr	r3, [r4, #0]
 80066c8:	f043 030e 	orr.w	r3, r3, #14
      hdma->Instance->CCR &= ~DMA_IT_HT;
 80066cc:	6023      	str	r3, [r4, #0]
    hdma->Instance->CCR |= DMA_CCR_EN;
 80066ce:	6823      	ldr	r3, [r4, #0]
 80066d0:	f043 0301 	orr.w	r3, r3, #1
 80066d4:	6023      	str	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80066d6:	2000      	movs	r0, #0
}
 80066d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 80066da:	6823      	ldr	r3, [r4, #0]
 80066dc:	f043 030a 	orr.w	r3, r3, #10
 80066e0:	6023      	str	r3, [r4, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 80066e2:	6823      	ldr	r3, [r4, #0]
 80066e4:	f023 0304 	bic.w	r3, r3, #4
 80066e8:	e7f0      	b.n	80066cc <HAL_DMA_Start_IT+0x50>
    __HAL_UNLOCK(hdma);
 80066ea:	f880 4020 	strb.w	r4, [r0, #32]
  __HAL_LOCK(hdma);
 80066ee:	2002      	movs	r0, #2
 80066f0:	e7f2      	b.n	80066d8 <HAL_DMA_Start_IT+0x5c>

080066f2 <HAL_DMA_Abort>:
  if(NULL == hdma)
 80066f2:	b140      	cbz	r0, 8006706 <HAL_DMA_Abort+0x14>
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80066f4:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 80066f8:	2b02      	cmp	r3, #2
 80066fa:	d006      	beq.n	800670a <HAL_DMA_Abort+0x18>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80066fc:	2304      	movs	r3, #4
 80066fe:	6383      	str	r3, [r0, #56]	@ 0x38
    __HAL_UNLOCK(hdma);
 8006700:	2300      	movs	r3, #0
 8006702:	f880 3020 	strb.w	r3, [r0, #32]
    return HAL_ERROR;
 8006706:	2001      	movs	r0, #1
 8006708:	4770      	bx	lr
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800670a:	6803      	ldr	r3, [r0, #0]
 800670c:	681a      	ldr	r2, [r3, #0]
 800670e:	f022 020e 	bic.w	r2, r2, #14
 8006712:	601a      	str	r2, [r3, #0]
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8006714:	681a      	ldr	r2, [r3, #0]
 8006716:	f022 0201 	bic.w	r2, r2, #1
 800671a:	601a      	str	r2, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800671c:	e9d0 210f 	ldrd	r2, r1, [r0, #60]	@ 0x3c
 8006720:	2301      	movs	r3, #1
 8006722:	408b      	lsls	r3, r1
 8006724:	6053      	str	r3, [r2, #4]
  __HAL_UNLOCK(hdma);
 8006726:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800672a:	8403      	strh	r3, [r0, #32]
  return HAL_OK;
 800672c:	2000      	movs	r0, #0
}
 800672e:	4770      	bx	lr

08006730 <HAL_DMA_IRQHandler>:
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8006730:	6bc1      	ldr	r1, [r0, #60]	@ 0x3c
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8006732:	6c02      	ldr	r2, [r0, #64]	@ 0x40
  uint32_t source_it = hdma->Instance->CCR;
 8006734:	6803      	ldr	r3, [r0, #0]
{
 8006736:	b470      	push	{r4, r5, r6}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8006738:	680e      	ldr	r6, [r1, #0]
  uint32_t source_it = hdma->Instance->CCR;
 800673a:	681d      	ldr	r5, [r3, #0]
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 800673c:	2404      	movs	r4, #4
 800673e:	4094      	lsls	r4, r2
 8006740:	4234      	tst	r4, r6
 8006742:	d00e      	beq.n	8006762 <HAL_DMA_IRQHandler+0x32>
 8006744:	f015 0f04 	tst.w	r5, #4
 8006748:	d00b      	beq.n	8006762 <HAL_DMA_IRQHandler+0x32>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800674a:	681a      	ldr	r2, [r3, #0]
 800674c:	0692      	lsls	r2, r2, #26
      hdma->Instance->CCR &= ~DMA_IT_HT;
 800674e:	bf5e      	ittt	pl
 8006750:	681a      	ldrpl	r2, [r3, #0]
 8006752:	f022 0204 	bicpl.w	r2, r2, #4
 8006756:	601a      	strpl	r2, [r3, #0]
    if(hdma->XferHalfCpltCallback != NULL)
 8006758:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 800675a:	604c      	str	r4, [r1, #4]
    if(hdma->XferErrorCallback != NULL)
 800675c:	b363      	cbz	r3, 80067b8 <HAL_DMA_IRQHandler+0x88>
}
 800675e:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 8006760:	4718      	bx	r3
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8006762:	2402      	movs	r4, #2
 8006764:	4094      	lsls	r4, r2
 8006766:	4234      	tst	r4, r6
 8006768:	d012      	beq.n	8006790 <HAL_DMA_IRQHandler+0x60>
 800676a:	f015 0f02 	tst.w	r5, #2
 800676e:	d00f      	beq.n	8006790 <HAL_DMA_IRQHandler+0x60>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006770:	681a      	ldr	r2, [r3, #0]
 8006772:	0695      	lsls	r5, r2, #26
 8006774:	d406      	bmi.n	8006784 <HAL_DMA_IRQHandler+0x54>
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8006776:	681a      	ldr	r2, [r3, #0]
 8006778:	f022 020a 	bic.w	r2, r2, #10
 800677c:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 800677e:	2301      	movs	r3, #1
 8006780:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
    __HAL_UNLOCK(hdma);
 8006784:	2300      	movs	r3, #0
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8006786:	604c      	str	r4, [r1, #4]
    __HAL_UNLOCK(hdma);
 8006788:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 800678c:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800678e:	e7e5      	b.n	800675c <HAL_DMA_IRQHandler+0x2c>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8006790:	2408      	movs	r4, #8
 8006792:	4094      	lsls	r4, r2
 8006794:	4234      	tst	r4, r6
 8006796:	d00f      	beq.n	80067b8 <HAL_DMA_IRQHandler+0x88>
 8006798:	072c      	lsls	r4, r5, #28
 800679a:	d50d      	bpl.n	80067b8 <HAL_DMA_IRQHandler+0x88>
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800679c:	681c      	ldr	r4, [r3, #0]
 800679e:	f024 040e 	bic.w	r4, r4, #14
 80067a2:	601c      	str	r4, [r3, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80067a4:	2301      	movs	r3, #1
 80067a6:	fa03 f202 	lsl.w	r2, r3, r2
 80067aa:	604a      	str	r2, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80067ac:	6383      	str	r3, [r0, #56]	@ 0x38
    __HAL_UNLOCK(hdma);
 80067ae:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80067b2:	8403      	strh	r3, [r0, #32]
    if(hdma->XferErrorCallback != NULL)
 80067b4:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80067b6:	e7d1      	b.n	800675c <HAL_DMA_IRQHandler+0x2c>
}
 80067b8:	bc70      	pop	{r4, r5, r6}
 80067ba:	4770      	bx	lr

080067bc <HAL_DMA_GetError>:
  return hdma->ErrorCode;
 80067bc:	6b80      	ldr	r0, [r0, #56]	@ 0x38
}
 80067be:	4770      	bx	lr

080067c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80067c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80067c4:	f8df 917c 	ldr.w	r9, [pc, #380]	@ 8006944 <HAL_GPIO_Init+0x184>
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80067c8:	4c5c      	ldr	r4, [pc, #368]	@ (800693c <HAL_GPIO_Init+0x17c>)
  uint32_t position = 0x00u;
 80067ca:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80067cc:	680a      	ldr	r2, [r1, #0]
 80067ce:	fa32 f503 	lsrs.w	r5, r2, r3
 80067d2:	d102      	bne.n	80067da <HAL_GPIO_Init+0x1a>
      }
    }

    position++;
  }
}
 80067d4:	b003      	add	sp, #12
 80067d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80067da:	2501      	movs	r5, #1
 80067dc:	fa05 f803 	lsl.w	r8, r5, r3
    if (iocurrent != 0x00u)
 80067e0:	ea18 0202 	ands.w	r2, r8, r2
 80067e4:	f000 80a0 	beq.w	8006928 <HAL_GPIO_Init+0x168>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80067e8:	684e      	ldr	r6, [r1, #4]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80067ea:	2703      	movs	r7, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80067ec:	f006 0503 	and.w	r5, r6, #3
 80067f0:	ea4f 0e43 	mov.w	lr, r3, lsl #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80067f4:	fa07 fc0e 	lsl.w	ip, r7, lr
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80067f8:	1e6f      	subs	r7, r5, #1
 80067fa:	2f01      	cmp	r7, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80067fc:	ea6f 0c0c 	mvn.w	ip, ip
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006800:	d834      	bhi.n	800686c <HAL_GPIO_Init+0xac>
        temp = GPIOx->OSPEEDR;
 8006802:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8006804:	ea07 0a0c 	and.w	sl, r7, ip
        temp |= (GPIO_Init->Speed << (position * 2u));
 8006808:	68cf      	ldr	r7, [r1, #12]
 800680a:	fa07 f70e 	lsl.w	r7, r7, lr
 800680e:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
 8006812:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8006814:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006816:	ea27 0808 	bic.w	r8, r7, r8
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800681a:	f3c6 1700 	ubfx	r7, r6, #4, #1
 800681e:	409f      	lsls	r7, r3
 8006820:	ea47 0708 	orr.w	r7, r7, r8
        GPIOx->OTYPER = temp;
 8006824:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 8006826:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8006828:	ea07 080c 	and.w	r8, r7, ip
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800682c:	688f      	ldr	r7, [r1, #8]
 800682e:	fa07 f70e 	lsl.w	r7, r7, lr
 8006832:	ea47 0708 	orr.w	r7, r7, r8
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006836:	2d02      	cmp	r5, #2
        GPIOx->PUPDR = temp;
 8006838:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800683a:	d119      	bne.n	8006870 <HAL_GPIO_Init+0xb0>
        temp = GPIOx->AFR[position >> 3u];
 800683c:	ea4f 08d3 	mov.w	r8, r3, lsr #3
 8006840:	eb00 0888 	add.w	r8, r0, r8, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8006844:	f003 0a07 	and.w	sl, r3, #7
        temp = GPIOx->AFR[position >> 3u];
 8006848:	f8d8 7020 	ldr.w	r7, [r8, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800684c:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 8006850:	f04f 0b0f 	mov.w	fp, #15
 8006854:	fa0b fb0a 	lsl.w	fp, fp, sl
 8006858:	ea27 0b0b 	bic.w	fp, r7, fp
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800685c:	690f      	ldr	r7, [r1, #16]
 800685e:	fa07 f70a 	lsl.w	r7, r7, sl
 8006862:	ea47 070b 	orr.w	r7, r7, fp
        GPIOx->AFR[position >> 3u] = temp;
 8006866:	f8c8 7020 	str.w	r7, [r8, #32]
 800686a:	e001      	b.n	8006870 <HAL_GPIO_Init+0xb0>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800686c:	2d03      	cmp	r5, #3
 800686e:	d1da      	bne.n	8006826 <HAL_GPIO_Init+0x66>
      temp = GPIOx->MODER;
 8006870:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8006872:	fa05 f50e 	lsl.w	r5, r5, lr
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8006876:	ea07 070c 	and.w	r7, r7, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800687a:	433d      	orrs	r5, r7
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800687c:	f416 3f40 	tst.w	r6, #196608	@ 0x30000
      GPIOx->MODER = temp;
 8006880:	6005      	str	r5, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006882:	d051      	beq.n	8006928 <HAL_GPIO_Init+0x168>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006884:	f8d9 5018 	ldr.w	r5, [r9, #24]
 8006888:	f045 0501 	orr.w	r5, r5, #1
 800688c:	f8c9 5018 	str.w	r5, [r9, #24]
 8006890:	f8d9 5018 	ldr.w	r5, [r9, #24]
 8006894:	f023 0703 	bic.w	r7, r3, #3
 8006898:	f107 4780 	add.w	r7, r7, #1073741824	@ 0x40000000
 800689c:	f005 0501 	and.w	r5, r5, #1
 80068a0:	f507 3780 	add.w	r7, r7, #65536	@ 0x10000
 80068a4:	9501      	str	r5, [sp, #4]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80068a6:	f003 0c03 	and.w	ip, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80068aa:	9d01      	ldr	r5, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2u];
 80068ac:	68bd      	ldr	r5, [r7, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80068ae:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 80068b2:	f04f 0e0f 	mov.w	lr, #15
 80068b6:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80068ba:	f1b0 4f90 	cmp.w	r0, #1207959552	@ 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80068be:	ea25 0e0e 	bic.w	lr, r5, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80068c2:	d033      	beq.n	800692c <HAL_GPIO_Init+0x16c>
 80068c4:	4d1e      	ldr	r5, [pc, #120]	@ (8006940 <HAL_GPIO_Init+0x180>)
 80068c6:	42a8      	cmp	r0, r5
 80068c8:	d032      	beq.n	8006930 <HAL_GPIO_Init+0x170>
 80068ca:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 80068ce:	42a8      	cmp	r0, r5
 80068d0:	d030      	beq.n	8006934 <HAL_GPIO_Init+0x174>
 80068d2:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 80068d6:	42a8      	cmp	r0, r5
 80068d8:	d02e      	beq.n	8006938 <HAL_GPIO_Init+0x178>
 80068da:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 80068de:	42a8      	cmp	r0, r5
 80068e0:	bf14      	ite	ne
 80068e2:	2505      	movne	r5, #5
 80068e4:	2504      	moveq	r5, #4
 80068e6:	fa05 f50c 	lsl.w	r5, r5, ip
 80068ea:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2u] = temp;
 80068ee:	60bd      	str	r5, [r7, #8]
        temp = EXTI->RTSR;
 80068f0:	68a5      	ldr	r5, [r4, #8]
        temp &= ~(iocurrent);
 80068f2:	43d7      	mvns	r7, r2
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80068f4:	f416 1f80 	tst.w	r6, #1048576	@ 0x100000
        temp &= ~(iocurrent);
 80068f8:	bf0c      	ite	eq
 80068fa:	403d      	andeq	r5, r7
          temp |= iocurrent;
 80068fc:	4315      	orrne	r5, r2
        EXTI->RTSR = temp;
 80068fe:	60a5      	str	r5, [r4, #8]
        temp = EXTI->FTSR;
 8006900:	68e5      	ldr	r5, [r4, #12]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8006902:	f416 1f00 	tst.w	r6, #2097152	@ 0x200000
        temp &= ~(iocurrent);
 8006906:	bf0c      	ite	eq
 8006908:	403d      	andeq	r5, r7
          temp |= iocurrent;
 800690a:	4315      	orrne	r5, r2
        EXTI->FTSR = temp;
 800690c:	60e5      	str	r5, [r4, #12]
        temp = EXTI->EMR;
 800690e:	6865      	ldr	r5, [r4, #4]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8006910:	f416 3f00 	tst.w	r6, #131072	@ 0x20000
        temp &= ~(iocurrent);
 8006914:	bf0c      	ite	eq
 8006916:	403d      	andeq	r5, r7
          temp |= iocurrent;
 8006918:	4315      	orrne	r5, r2
        EXTI->EMR = temp;
 800691a:	6065      	str	r5, [r4, #4]
        temp = EXTI->IMR;
 800691c:	6825      	ldr	r5, [r4, #0]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800691e:	03f6      	lsls	r6, r6, #15
        temp &= ~(iocurrent);
 8006920:	bf54      	ite	pl
 8006922:	403d      	andpl	r5, r7
          temp |= iocurrent;
 8006924:	4315      	orrmi	r5, r2
        EXTI->IMR = temp;
 8006926:	6025      	str	r5, [r4, #0]
    position++;
 8006928:	3301      	adds	r3, #1
 800692a:	e74f      	b.n	80067cc <HAL_GPIO_Init+0xc>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800692c:	2500      	movs	r5, #0
 800692e:	e7da      	b.n	80068e6 <HAL_GPIO_Init+0x126>
 8006930:	2501      	movs	r5, #1
 8006932:	e7d8      	b.n	80068e6 <HAL_GPIO_Init+0x126>
 8006934:	2502      	movs	r5, #2
 8006936:	e7d6      	b.n	80068e6 <HAL_GPIO_Init+0x126>
 8006938:	2503      	movs	r5, #3
 800693a:	e7d4      	b.n	80068e6 <HAL_GPIO_Init+0x126>
 800693c:	40010400 	.word	0x40010400
 8006940:	48000400 	.word	0x48000400
 8006944:	40021000 	.word	0x40021000

08006948 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006948:	b10a      	cbz	r2, 800694e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800694a:	6181      	str	r1, [r0, #24]
 800694c:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800694e:	6281      	str	r1, [r0, #40]	@ 0x28
  }
}
 8006950:	4770      	bx	lr
	...

08006954 <HAL_PWR_EnableBkUpAccess>:
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  SET_BIT(PWR->CR, PWR_CR_DBP);  
 8006954:	4a02      	ldr	r2, [pc, #8]	@ (8006960 <HAL_PWR_EnableBkUpAccess+0xc>)
 8006956:	6813      	ldr	r3, [r2, #0]
 8006958:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800695c:	6013      	str	r3, [r2, #0]
}
 800695e:	4770      	bx	lr
 8006960:	40007000 	.word	0x40007000

08006964 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006964:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006968:	4605      	mov	r5, r0
 800696a:	2800      	cmp	r0, #0
 800696c:	d033      	beq.n	80069d6 <HAL_RCC_OscConfig+0x72>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800696e:	6803      	ldr	r3, [r0, #0]
 8006970:	07da      	lsls	r2, r3, #31
 8006972:	d411      	bmi.n	8006998 <HAL_RCC_OscConfig+0x34>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006974:	682b      	ldr	r3, [r5, #0]
 8006976:	079b      	lsls	r3, r3, #30
 8006978:	f100 8081 	bmi.w	8006a7e <HAL_RCC_OscConfig+0x11a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800697c:	682b      	ldr	r3, [r5, #0]
 800697e:	071c      	lsls	r4, r3, #28
 8006980:	f100 80eb 	bmi.w	8006b5a <HAL_RCC_OscConfig+0x1f6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006984:	682b      	ldr	r3, [r5, #0]
 8006986:	0758      	lsls	r0, r3, #29
 8006988:	f100 8130 	bmi.w	8006bec <HAL_RCC_OscConfig+0x288>
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800698c:	69eb      	ldr	r3, [r5, #28]
 800698e:	2b00      	cmp	r3, #0
 8006990:	f040 81b5 	bne.w	8006cfe <HAL_RCC_OscConfig+0x39a>
        }
      }
    }
  }

  return HAL_OK;
 8006994:	2000      	movs	r0, #0
 8006996:	e047      	b.n	8006a28 <HAL_RCC_OscConfig+0xc4>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8006998:	4cb0      	ldr	r4, [pc, #704]	@ (8006c5c <HAL_RCC_OscConfig+0x2f8>)
 800699a:	6863      	ldr	r3, [r4, #4]
 800699c:	f003 030c 	and.w	r3, r3, #12
 80069a0:	2b04      	cmp	r3, #4
 80069a2:	d007      	beq.n	80069b4 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80069a4:	6863      	ldr	r3, [r4, #4]
 80069a6:	f003 030c 	and.w	r3, r3, #12
 80069aa:	2b08      	cmp	r3, #8
 80069ac:	d115      	bne.n	80069da <HAL_RCC_OscConfig+0x76>
 80069ae:	6863      	ldr	r3, [r4, #4]
 80069b0:	03df      	lsls	r7, r3, #15
 80069b2:	d512      	bpl.n	80069da <HAL_RCC_OscConfig+0x76>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80069b4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80069b8:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80069bc:	6821      	ldr	r1, [r4, #0]
 80069be:	fa93 f3a3 	rbit	r3, r3
 80069c2:	2201      	movs	r2, #1
 80069c4:	fab3 f383 	clz	r3, r3
 80069c8:	fa02 f303 	lsl.w	r3, r2, r3
 80069cc:	420b      	tst	r3, r1
 80069ce:	d0d1      	beq.n	8006974 <HAL_RCC_OscConfig+0x10>
 80069d0:	686b      	ldr	r3, [r5, #4]
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d1ce      	bne.n	8006974 <HAL_RCC_OscConfig+0x10>
    return HAL_ERROR;
 80069d6:	2001      	movs	r0, #1
 80069d8:	e026      	b.n	8006a28 <HAL_RCC_OscConfig+0xc4>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80069da:	686a      	ldr	r2, [r5, #4]
 80069dc:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 80069e0:	d125      	bne.n	8006a2e <HAL_RCC_OscConfig+0xca>
 80069e2:	6823      	ldr	r3, [r4, #0]
 80069e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80069e8:	6023      	str	r3, [r4, #0]
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80069ea:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80069ec:	68a9      	ldr	r1, [r5, #8]
 80069ee:	f023 030f 	bic.w	r3, r3, #15
 80069f2:	430b      	orrs	r3, r1
 80069f4:	62e3      	str	r3, [r4, #44]	@ 0x2c
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80069f6:	b352      	cbz	r2, 8006a4e <HAL_RCC_OscConfig+0xea>
        tickstart = HAL_GetTick();
 80069f8:	f7ff f866 	bl	8005ac8 <HAL_GetTick>
 80069fc:	f44f 3700 	mov.w	r7, #131072	@ 0x20000
 8006a00:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006a02:	f04f 0801 	mov.w	r8, #1
 8006a06:	fa97 f3a7 	rbit	r3, r7
 8006a0a:	6822      	ldr	r2, [r4, #0]
 8006a0c:	fa97 f3a7 	rbit	r3, r7
 8006a10:	fab3 f383 	clz	r3, r3
 8006a14:	fa08 f303 	lsl.w	r3, r8, r3
 8006a18:	4213      	tst	r3, r2
 8006a1a:	d1ab      	bne.n	8006974 <HAL_RCC_OscConfig+0x10>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006a1c:	f7ff f854 	bl	8005ac8 <HAL_GetTick>
 8006a20:	1b80      	subs	r0, r0, r6
 8006a22:	2864      	cmp	r0, #100	@ 0x64
 8006a24:	d9ef      	bls.n	8006a06 <HAL_RCC_OscConfig+0xa2>
            return HAL_TIMEOUT;
 8006a26:	2003      	movs	r0, #3
}
 8006a28:	b002      	add	sp, #8
 8006a2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006a2e:	6823      	ldr	r3, [r4, #0]
 8006a30:	b932      	cbnz	r2, 8006a40 <HAL_RCC_OscConfig+0xdc>
 8006a32:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006a36:	6023      	str	r3, [r4, #0]
 8006a38:	6823      	ldr	r3, [r4, #0]
 8006a3a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006a3e:	e7d3      	b.n	80069e8 <HAL_RCC_OscConfig+0x84>
 8006a40:	f5b2 2fa0 	cmp.w	r2, #327680	@ 0x50000
 8006a44:	d1f5      	bne.n	8006a32 <HAL_RCC_OscConfig+0xce>
 8006a46:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006a4a:	6023      	str	r3, [r4, #0]
 8006a4c:	e7c9      	b.n	80069e2 <HAL_RCC_OscConfig+0x7e>
        tickstart = HAL_GetTick();
 8006a4e:	f7ff f83b 	bl	8005ac8 <HAL_GetTick>
 8006a52:	f44f 3700 	mov.w	r7, #131072	@ 0x20000
 8006a56:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006a58:	f04f 0801 	mov.w	r8, #1
 8006a5c:	fa97 f3a7 	rbit	r3, r7
 8006a60:	6822      	ldr	r2, [r4, #0]
 8006a62:	fa97 f3a7 	rbit	r3, r7
 8006a66:	fab3 f383 	clz	r3, r3
 8006a6a:	fa08 f303 	lsl.w	r3, r8, r3
 8006a6e:	4213      	tst	r3, r2
 8006a70:	d080      	beq.n	8006974 <HAL_RCC_OscConfig+0x10>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006a72:	f7ff f829 	bl	8005ac8 <HAL_GetTick>
 8006a76:	1b80      	subs	r0, r0, r6
 8006a78:	2864      	cmp	r0, #100	@ 0x64
 8006a7a:	d9ef      	bls.n	8006a5c <HAL_RCC_OscConfig+0xf8>
 8006a7c:	e7d3      	b.n	8006a26 <HAL_RCC_OscConfig+0xc2>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8006a7e:	4c77      	ldr	r4, [pc, #476]	@ (8006c5c <HAL_RCC_OscConfig+0x2f8>)
 8006a80:	6863      	ldr	r3, [r4, #4]
 8006a82:	f013 0f0c 	tst.w	r3, #12
 8006a86:	d007      	beq.n	8006a98 <HAL_RCC_OscConfig+0x134>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8006a88:	6863      	ldr	r3, [r4, #4]
 8006a8a:	f003 030c 	and.w	r3, r3, #12
 8006a8e:	2b08      	cmp	r3, #8
 8006a90:	d11f      	bne.n	8006ad2 <HAL_RCC_OscConfig+0x16e>
 8006a92:	6863      	ldr	r3, [r4, #4]
 8006a94:	03de      	lsls	r6, r3, #15
 8006a96:	d41c      	bmi.n	8006ad2 <HAL_RCC_OscConfig+0x16e>
 8006a98:	2302      	movs	r3, #2
 8006a9a:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006a9e:	6821      	ldr	r1, [r4, #0]
 8006aa0:	fa93 f3a3 	rbit	r3, r3
 8006aa4:	2201      	movs	r2, #1
 8006aa6:	fab3 f383 	clz	r3, r3
 8006aaa:	fa02 f303 	lsl.w	r3, r2, r3
 8006aae:	420b      	tst	r3, r1
 8006ab0:	d002      	beq.n	8006ab8 <HAL_RCC_OscConfig+0x154>
 8006ab2:	692b      	ldr	r3, [r5, #16]
 8006ab4:	4293      	cmp	r3, r2
 8006ab6:	d18e      	bne.n	80069d6 <HAL_RCC_OscConfig+0x72>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006ab8:	6821      	ldr	r1, [r4, #0]
 8006aba:	22f8      	movs	r2, #248	@ 0xf8
 8006abc:	fa92 f2a2 	rbit	r2, r2
 8006ac0:	696b      	ldr	r3, [r5, #20]
 8006ac2:	fab2 f282 	clz	r2, r2
 8006ac6:	4093      	lsls	r3, r2
 8006ac8:	f021 02f8 	bic.w	r2, r1, #248	@ 0xf8
 8006acc:	4313      	orrs	r3, r2
 8006ace:	6023      	str	r3, [r4, #0]
 8006ad0:	e754      	b.n	800697c <HAL_RCC_OscConfig+0x18>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006ad2:	692a      	ldr	r2, [r5, #16]
 8006ad4:	2601      	movs	r6, #1
 8006ad6:	b1fa      	cbz	r2, 8006b18 <HAL_RCC_OscConfig+0x1b4>
 8006ad8:	fa96 f3a6 	rbit	r3, r6
        __HAL_RCC_HSI_ENABLE();
 8006adc:	fab3 f383 	clz	r3, r3
 8006ae0:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8006ae4:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8006ae8:	009b      	lsls	r3, r3, #2
 8006aea:	f04f 0802 	mov.w	r8, #2
 8006aee:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 8006af0:	f7fe ffea 	bl	8005ac8 <HAL_GetTick>
 8006af4:	4607      	mov	r7, r0
 8006af6:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006afa:	6822      	ldr	r2, [r4, #0]
 8006afc:	fa98 f3a8 	rbit	r3, r8
 8006b00:	fab3 f383 	clz	r3, r3
 8006b04:	fa06 f303 	lsl.w	r3, r6, r3
 8006b08:	4213      	tst	r3, r2
 8006b0a:	d1d5      	bne.n	8006ab8 <HAL_RCC_OscConfig+0x154>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006b0c:	f7fe ffdc 	bl	8005ac8 <HAL_GetTick>
 8006b10:	1bc0      	subs	r0, r0, r7
 8006b12:	2802      	cmp	r0, #2
 8006b14:	d9ef      	bls.n	8006af6 <HAL_RCC_OscConfig+0x192>
 8006b16:	e786      	b.n	8006a26 <HAL_RCC_OscConfig+0xc2>
 8006b18:	fa96 f3a6 	rbit	r3, r6
        __HAL_RCC_HSI_DISABLE();
 8006b1c:	fab3 f383 	clz	r3, r3
 8006b20:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8006b24:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8006b28:	009b      	lsls	r3, r3, #2
 8006b2a:	f04f 0802 	mov.w	r8, #2
 8006b2e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8006b30:	f7fe ffca 	bl	8005ac8 <HAL_GetTick>
 8006b34:	4607      	mov	r7, r0
 8006b36:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006b3a:	6822      	ldr	r2, [r4, #0]
 8006b3c:	fa98 f3a8 	rbit	r3, r8
 8006b40:	fab3 f383 	clz	r3, r3
 8006b44:	fa06 f303 	lsl.w	r3, r6, r3
 8006b48:	4213      	tst	r3, r2
 8006b4a:	f43f af17 	beq.w	800697c <HAL_RCC_OscConfig+0x18>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006b4e:	f7fe ffbb 	bl	8005ac8 <HAL_GetTick>
 8006b52:	1bc0      	subs	r0, r0, r7
 8006b54:	2802      	cmp	r0, #2
 8006b56:	d9ee      	bls.n	8006b36 <HAL_RCC_OscConfig+0x1d2>
 8006b58:	e765      	b.n	8006a26 <HAL_RCC_OscConfig+0xc2>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006b5a:	69aa      	ldr	r2, [r5, #24]
 8006b5c:	4e3f      	ldr	r6, [pc, #252]	@ (8006c5c <HAL_RCC_OscConfig+0x2f8>)
 8006b5e:	4940      	ldr	r1, [pc, #256]	@ (8006c60 <HAL_RCC_OscConfig+0x2fc>)
 8006b60:	2401      	movs	r4, #1
 8006b62:	b30a      	cbz	r2, 8006ba8 <HAL_RCC_OscConfig+0x244>
 8006b64:	fa94 f3a4 	rbit	r3, r4
      __HAL_RCC_LSI_ENABLE();
 8006b68:	fab3 f383 	clz	r3, r3
 8006b6c:	440b      	add	r3, r1
 8006b6e:	009b      	lsls	r3, r3, #2
 8006b70:	2702      	movs	r7, #2
 8006b72:	601c      	str	r4, [r3, #0]
      tickstart = HAL_GetTick();
 8006b74:	f7fe ffa8 	bl	8005ac8 <HAL_GetTick>
 8006b78:	4680      	mov	r8, r0
 8006b7a:	fa97 f3a7 	rbit	r3, r7
 8006b7e:	fa97 f3a7 	rbit	r3, r7
 8006b82:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006b86:	6a72      	ldr	r2, [r6, #36]	@ 0x24
 8006b88:	fa97 f3a7 	rbit	r3, r7
 8006b8c:	fab3 f383 	clz	r3, r3
 8006b90:	fa04 f303 	lsl.w	r3, r4, r3
 8006b94:	4213      	tst	r3, r2
 8006b96:	f47f aef5 	bne.w	8006984 <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006b9a:	f7fe ff95 	bl	8005ac8 <HAL_GetTick>
 8006b9e:	eba0 0008 	sub.w	r0, r0, r8
 8006ba2:	2802      	cmp	r0, #2
 8006ba4:	d9e9      	bls.n	8006b7a <HAL_RCC_OscConfig+0x216>
 8006ba6:	e73e      	b.n	8006a26 <HAL_RCC_OscConfig+0xc2>
 8006ba8:	fa94 f3a4 	rbit	r3, r4
      __HAL_RCC_LSI_DISABLE();
 8006bac:	fab3 f383 	clz	r3, r3
 8006bb0:	440b      	add	r3, r1
 8006bb2:	009b      	lsls	r3, r3, #2
 8006bb4:	2702      	movs	r7, #2
 8006bb6:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8006bb8:	f7fe ff86 	bl	8005ac8 <HAL_GetTick>
 8006bbc:	4680      	mov	r8, r0
 8006bbe:	fa97 f3a7 	rbit	r3, r7
 8006bc2:	fa97 f3a7 	rbit	r3, r7
 8006bc6:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006bca:	6a72      	ldr	r2, [r6, #36]	@ 0x24
 8006bcc:	fa97 f3a7 	rbit	r3, r7
 8006bd0:	fab3 f383 	clz	r3, r3
 8006bd4:	fa04 f303 	lsl.w	r3, r4, r3
 8006bd8:	4213      	tst	r3, r2
 8006bda:	f43f aed3 	beq.w	8006984 <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006bde:	f7fe ff73 	bl	8005ac8 <HAL_GetTick>
 8006be2:	eba0 0008 	sub.w	r0, r0, r8
 8006be6:	2802      	cmp	r0, #2
 8006be8:	d9e9      	bls.n	8006bbe <HAL_RCC_OscConfig+0x25a>
 8006bea:	e71c      	b.n	8006a26 <HAL_RCC_OscConfig+0xc2>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006bec:	4c1b      	ldr	r4, [pc, #108]	@ (8006c5c <HAL_RCC_OscConfig+0x2f8>)
 8006bee:	69e3      	ldr	r3, [r4, #28]
 8006bf0:	00d9      	lsls	r1, r3, #3
 8006bf2:	d431      	bmi.n	8006c58 <HAL_RCC_OscConfig+0x2f4>
      __HAL_RCC_PWR_CLK_ENABLE();
 8006bf4:	69e3      	ldr	r3, [r4, #28]
 8006bf6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006bfa:	61e3      	str	r3, [r4, #28]
 8006bfc:	69e3      	ldr	r3, [r4, #28]
 8006bfe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006c02:	9301      	str	r3, [sp, #4]
 8006c04:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8006c06:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006c08:	4f16      	ldr	r7, [pc, #88]	@ (8006c64 <HAL_RCC_OscConfig+0x300>)
 8006c0a:	683b      	ldr	r3, [r7, #0]
 8006c0c:	05da      	lsls	r2, r3, #23
 8006c0e:	d52b      	bpl.n	8006c68 <HAL_RCC_OscConfig+0x304>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006c10:	68eb      	ldr	r3, [r5, #12]
 8006c12:	2b01      	cmp	r3, #1
 8006c14:	d139      	bne.n	8006c8a <HAL_RCC_OscConfig+0x326>
 8006c16:	6a23      	ldr	r3, [r4, #32]
 8006c18:	f043 0301 	orr.w	r3, r3, #1
 8006c1c:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8006c1e:	f7fe ff53 	bl	8005ac8 <HAL_GetTick>
 8006c22:	2702      	movs	r7, #2
 8006c24:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006c26:	f04f 0901 	mov.w	r9, #1
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006c2a:	f241 3a88 	movw	sl, #5000	@ 0x1388
 8006c2e:	fa97 f3a7 	rbit	r3, r7
 8006c32:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006c36:	6a22      	ldr	r2, [r4, #32]
 8006c38:	fa97 f3a7 	rbit	r3, r7
 8006c3c:	fab3 f383 	clz	r3, r3
 8006c40:	fa09 f303 	lsl.w	r3, r9, r3
 8006c44:	4213      	tst	r3, r2
 8006c46:	d053      	beq.n	8006cf0 <HAL_RCC_OscConfig+0x38c>
    if(pwrclkchanged == SET)
 8006c48:	2e00      	cmp	r6, #0
 8006c4a:	f43f ae9f 	beq.w	800698c <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 8006c4e:	69e3      	ldr	r3, [r4, #28]
 8006c50:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006c54:	61e3      	str	r3, [r4, #28]
 8006c56:	e699      	b.n	800698c <HAL_RCC_OscConfig+0x28>
    FlagStatus       pwrclkchanged = RESET;
 8006c58:	2600      	movs	r6, #0
 8006c5a:	e7d5      	b.n	8006c08 <HAL_RCC_OscConfig+0x2a4>
 8006c5c:	40021000 	.word	0x40021000
 8006c60:	10908120 	.word	0x10908120
 8006c64:	40007000 	.word	0x40007000
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006c68:	683b      	ldr	r3, [r7, #0]
 8006c6a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006c6e:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8006c70:	f7fe ff2a 	bl	8005ac8 <HAL_GetTick>
 8006c74:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006c76:	683b      	ldr	r3, [r7, #0]
 8006c78:	05db      	lsls	r3, r3, #23
 8006c7a:	d4c9      	bmi.n	8006c10 <HAL_RCC_OscConfig+0x2ac>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006c7c:	f7fe ff24 	bl	8005ac8 <HAL_GetTick>
 8006c80:	eba0 0008 	sub.w	r0, r0, r8
 8006c84:	2864      	cmp	r0, #100	@ 0x64
 8006c86:	d9f6      	bls.n	8006c76 <HAL_RCC_OscConfig+0x312>
 8006c88:	e6cd      	b.n	8006a26 <HAL_RCC_OscConfig+0xc2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006c8a:	bb1b      	cbnz	r3, 8006cd4 <HAL_RCC_OscConfig+0x370>
 8006c8c:	6a23      	ldr	r3, [r4, #32]
 8006c8e:	f023 0301 	bic.w	r3, r3, #1
 8006c92:	6223      	str	r3, [r4, #32]
 8006c94:	6a23      	ldr	r3, [r4, #32]
 8006c96:	f023 0304 	bic.w	r3, r3, #4
 8006c9a:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8006c9c:	f7fe ff14 	bl	8005ac8 <HAL_GetTick>
 8006ca0:	2702      	movs	r7, #2
 8006ca2:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006ca4:	f04f 0901 	mov.w	r9, #1
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006ca8:	f241 3a88 	movw	sl, #5000	@ 0x1388
 8006cac:	fa97 f3a7 	rbit	r3, r7
 8006cb0:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006cb4:	6a22      	ldr	r2, [r4, #32]
 8006cb6:	fa97 f3a7 	rbit	r3, r7
 8006cba:	fab3 f383 	clz	r3, r3
 8006cbe:	fa09 f303 	lsl.w	r3, r9, r3
 8006cc2:	4213      	tst	r3, r2
 8006cc4:	d0c0      	beq.n	8006c48 <HAL_RCC_OscConfig+0x2e4>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006cc6:	f7fe feff 	bl	8005ac8 <HAL_GetTick>
 8006cca:	eba0 0008 	sub.w	r0, r0, r8
 8006cce:	4550      	cmp	r0, sl
 8006cd0:	d9ec      	bls.n	8006cac <HAL_RCC_OscConfig+0x348>
 8006cd2:	e6a8      	b.n	8006a26 <HAL_RCC_OscConfig+0xc2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006cd4:	2b05      	cmp	r3, #5
 8006cd6:	6a23      	ldr	r3, [r4, #32]
 8006cd8:	d103      	bne.n	8006ce2 <HAL_RCC_OscConfig+0x37e>
 8006cda:	f043 0304 	orr.w	r3, r3, #4
 8006cde:	6223      	str	r3, [r4, #32]
 8006ce0:	e799      	b.n	8006c16 <HAL_RCC_OscConfig+0x2b2>
 8006ce2:	f023 0301 	bic.w	r3, r3, #1
 8006ce6:	6223      	str	r3, [r4, #32]
 8006ce8:	6a23      	ldr	r3, [r4, #32]
 8006cea:	f023 0304 	bic.w	r3, r3, #4
 8006cee:	e795      	b.n	8006c1c <HAL_RCC_OscConfig+0x2b8>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006cf0:	f7fe feea 	bl	8005ac8 <HAL_GetTick>
 8006cf4:	eba0 0008 	sub.w	r0, r0, r8
 8006cf8:	4550      	cmp	r0, sl
 8006cfa:	d998      	bls.n	8006c2e <HAL_RCC_OscConfig+0x2ca>
 8006cfc:	e693      	b.n	8006a26 <HAL_RCC_OscConfig+0xc2>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006cfe:	4c46      	ldr	r4, [pc, #280]	@ (8006e18 <HAL_RCC_OscConfig+0x4b4>)
 8006d00:	6862      	ldr	r2, [r4, #4]
 8006d02:	f002 020c 	and.w	r2, r2, #12
 8006d06:	2a08      	cmp	r2, #8
 8006d08:	d074      	beq.n	8006df4 <HAL_RCC_OscConfig+0x490>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006d0a:	2b02      	cmp	r3, #2
 8006d0c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006d10:	d14d      	bne.n	8006dae <HAL_RCC_OscConfig+0x44a>
 8006d12:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8006d16:	fab3 f383 	clz	r3, r3
 8006d1a:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8006d1e:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8006d22:	009b      	lsls	r3, r3, #2
 8006d24:	2200      	movs	r2, #0
 8006d26:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8006d28:	f7fe fece 	bl	8005ac8 <HAL_GetTick>
 8006d2c:	f04f 7800 	mov.w	r8, #33554432	@ 0x2000000
 8006d30:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006d32:	2601      	movs	r6, #1
 8006d34:	fa98 f3a8 	rbit	r3, r8
 8006d38:	6822      	ldr	r2, [r4, #0]
 8006d3a:	fa98 f3a8 	rbit	r3, r8
 8006d3e:	fab3 f383 	clz	r3, r3
 8006d42:	fa06 f303 	lsl.w	r3, r6, r3
 8006d46:	4213      	tst	r3, r2
 8006d48:	d12b      	bne.n	8006da2 <HAL_RCC_OscConfig+0x43e>
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006d4a:	e9d5 1308 	ldrd	r1, r3, [r5, #32]
 8006d4e:	6862      	ldr	r2, [r4, #4]
 8006d50:	430b      	orrs	r3, r1
 8006d52:	f422 1274 	bic.w	r2, r2, #3997696	@ 0x3d0000
 8006d56:	4313      	orrs	r3, r2
 8006d58:	6063      	str	r3, [r4, #4]
 8006d5a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006d5e:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 8006d62:	fab3 f383 	clz	r3, r3
 8006d66:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8006d6a:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8006d6e:	009b      	lsls	r3, r3, #2
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006d70:	2701      	movs	r7, #1
        __HAL_RCC_PLL_ENABLE();
 8006d72:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 8006d74:	f7fe fea8 	bl	8005ac8 <HAL_GetTick>
 8006d78:	f04f 7600 	mov.w	r6, #33554432	@ 0x2000000
 8006d7c:	4605      	mov	r5, r0
 8006d7e:	fa96 f3a6 	rbit	r3, r6
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006d82:	6822      	ldr	r2, [r4, #0]
 8006d84:	fa96 f3a6 	rbit	r3, r6
 8006d88:	fab3 f383 	clz	r3, r3
 8006d8c:	fa07 f303 	lsl.w	r3, r7, r3
 8006d90:	4213      	tst	r3, r2
 8006d92:	f47f adff 	bne.w	8006994 <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006d96:	f7fe fe97 	bl	8005ac8 <HAL_GetTick>
 8006d9a:	1b40      	subs	r0, r0, r5
 8006d9c:	2802      	cmp	r0, #2
 8006d9e:	d9ee      	bls.n	8006d7e <HAL_RCC_OscConfig+0x41a>
 8006da0:	e641      	b.n	8006a26 <HAL_RCC_OscConfig+0xc2>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006da2:	f7fe fe91 	bl	8005ac8 <HAL_GetTick>
 8006da6:	1bc0      	subs	r0, r0, r7
 8006da8:	2802      	cmp	r0, #2
 8006daa:	d9c3      	bls.n	8006d34 <HAL_RCC_OscConfig+0x3d0>
 8006dac:	e63b      	b.n	8006a26 <HAL_RCC_OscConfig+0xc2>
 8006dae:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8006db2:	fab3 f383 	clz	r3, r3
 8006db6:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8006dba:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8006dbe:	009b      	lsls	r3, r3, #2
 8006dc0:	2200      	movs	r2, #0
 8006dc2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8006dc4:	f7fe fe80 	bl	8005ac8 <HAL_GetTick>
 8006dc8:	f04f 7600 	mov.w	r6, #33554432	@ 0x2000000
 8006dcc:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006dce:	2701      	movs	r7, #1
 8006dd0:	fa96 f3a6 	rbit	r3, r6
 8006dd4:	6822      	ldr	r2, [r4, #0]
 8006dd6:	fa96 f3a6 	rbit	r3, r6
 8006dda:	fab3 f383 	clz	r3, r3
 8006dde:	fa07 f303 	lsl.w	r3, r7, r3
 8006de2:	4213      	tst	r3, r2
 8006de4:	f43f add6 	beq.w	8006994 <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006de8:	f7fe fe6e 	bl	8005ac8 <HAL_GetTick>
 8006dec:	1b40      	subs	r0, r0, r5
 8006dee:	2802      	cmp	r0, #2
 8006df0:	d9ee      	bls.n	8006dd0 <HAL_RCC_OscConfig+0x46c>
 8006df2:	e618      	b.n	8006a26 <HAL_RCC_OscConfig+0xc2>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006df4:	2b01      	cmp	r3, #1
 8006df6:	f43f adee 	beq.w	80069d6 <HAL_RCC_OscConfig+0x72>
        pll_config = RCC->CFGR;
 8006dfa:	6860      	ldr	r0, [r4, #4]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8006dfc:	6a2b      	ldr	r3, [r5, #32]
 8006dfe:	f400 3280 	and.w	r2, r0, #65536	@ 0x10000
 8006e02:	429a      	cmp	r2, r3
 8006e04:	f47f ade7 	bne.w	80069d6 <HAL_RCC_OscConfig+0x72>
 8006e08:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8006e0a:	f400 1070 	and.w	r0, r0, #3932160	@ 0x3c0000
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8006e0e:	1ac0      	subs	r0, r0, r3
 8006e10:	bf18      	it	ne
 8006e12:	2001      	movne	r0, #1
 8006e14:	e608      	b.n	8006a28 <HAL_RCC_OscConfig+0xc4>
 8006e16:	bf00      	nop
 8006e18:	40021000 	.word	0x40021000

08006e1c <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 8006e1c:	4b0c      	ldr	r3, [pc, #48]	@ (8006e50 <HAL_RCC_GetSysClockFreq+0x34>)
 8006e1e:	685a      	ldr	r2, [r3, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006e20:	f002 010c 	and.w	r1, r2, #12
 8006e24:	2908      	cmp	r1, #8
 8006e26:	d111      	bne.n	8006e4c <HAL_RCC_GetSysClockFreq+0x30>
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8006e28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8006e2a:	480a      	ldr	r0, [pc, #40]	@ (8006e54 <HAL_RCC_GetSysClockFreq+0x38>)
 8006e2c:	f3c2 4183 	ubfx	r1, r2, #18, #4
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8006e30:	03d2      	lsls	r2, r2, #15
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8006e32:	bf44      	itt	mi
 8006e34:	f003 030f 	andmi.w	r3, r3, #15
 8006e38:	4a07      	ldrmi	r2, [pc, #28]	@ (8006e58 <HAL_RCC_GetSysClockFreq+0x3c>)
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8006e3a:	5c40      	ldrb	r0, [r0, r1]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8006e3c:	bf49      	itett	mi
 8006e3e:	5cd2      	ldrbmi	r2, [r2, r3]
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8006e40:	4b06      	ldrpl	r3, [pc, #24]	@ (8006e5c <HAL_RCC_GetSysClockFreq+0x40>)
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8006e42:	4b07      	ldrmi	r3, [pc, #28]	@ (8006e60 <HAL_RCC_GetSysClockFreq+0x44>)
 8006e44:	fbb3 f3f2 	udivmi	r3, r3, r2
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8006e48:	4358      	muls	r0, r3
 8006e4a:	4770      	bx	lr
      sysclockfreq = HSE_VALUE;
 8006e4c:	4804      	ldr	r0, [pc, #16]	@ (8006e60 <HAL_RCC_GetSysClockFreq+0x44>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8006e4e:	4770      	bx	lr
 8006e50:	40021000 	.word	0x40021000
 8006e54:	08012c3d 	.word	0x08012c3d
 8006e58:	08012c2d 	.word	0x08012c2d
 8006e5c:	003d0900 	.word	0x003d0900
 8006e60:	007a1200 	.word	0x007a1200

08006e64 <HAL_RCC_ClockConfig>:
{
 8006e64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e68:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8006e6a:	4604      	mov	r4, r0
 8006e6c:	b910      	cbnz	r0, 8006e74 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8006e6e:	2001      	movs	r0, #1
}
 8006e70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006e74:	4a4a      	ldr	r2, [pc, #296]	@ (8006fa0 <HAL_RCC_ClockConfig+0x13c>)
 8006e76:	6813      	ldr	r3, [r2, #0]
 8006e78:	f003 0307 	and.w	r3, r3, #7
 8006e7c:	428b      	cmp	r3, r1
 8006e7e:	d32e      	bcc.n	8006ede <HAL_RCC_ClockConfig+0x7a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006e80:	6822      	ldr	r2, [r4, #0]
 8006e82:	0791      	lsls	r1, r2, #30
 8006e84:	d436      	bmi.n	8006ef4 <HAL_RCC_ClockConfig+0x90>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006e86:	07d2      	lsls	r2, r2, #31
 8006e88:	d43c      	bmi.n	8006f04 <HAL_RCC_ClockConfig+0xa0>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006e8a:	4a45      	ldr	r2, [pc, #276]	@ (8006fa0 <HAL_RCC_ClockConfig+0x13c>)
 8006e8c:	6813      	ldr	r3, [r2, #0]
 8006e8e:	f003 0307 	and.w	r3, r3, #7
 8006e92:	42ab      	cmp	r3, r5
 8006e94:	d870      	bhi.n	8006f78 <HAL_RCC_ClockConfig+0x114>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006e96:	6822      	ldr	r2, [r4, #0]
 8006e98:	4d42      	ldr	r5, [pc, #264]	@ (8006fa4 <HAL_RCC_ClockConfig+0x140>)
 8006e9a:	f012 0f04 	tst.w	r2, #4
 8006e9e:	d177      	bne.n	8006f90 <HAL_RCC_ClockConfig+0x12c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006ea0:	0713      	lsls	r3, r2, #28
 8006ea2:	d506      	bpl.n	8006eb2 <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006ea4:	686b      	ldr	r3, [r5, #4]
 8006ea6:	6922      	ldr	r2, [r4, #16]
 8006ea8:	f423 5360 	bic.w	r3, r3, #14336	@ 0x3800
 8006eac:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8006eb0:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8006eb2:	f7ff ffb3 	bl	8006e1c <HAL_RCC_GetSysClockFreq>
 8006eb6:	686b      	ldr	r3, [r5, #4]
 8006eb8:	22f0      	movs	r2, #240	@ 0xf0
 8006eba:	fa92 f2a2 	rbit	r2, r2
 8006ebe:	fab2 f282 	clz	r2, r2
 8006ec2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006ec6:	40d3      	lsrs	r3, r2
 8006ec8:	4a37      	ldr	r2, [pc, #220]	@ (8006fa8 <HAL_RCC_ClockConfig+0x144>)
 8006eca:	5cd3      	ldrb	r3, [r2, r3]
 8006ecc:	40d8      	lsrs	r0, r3
 8006ece:	4b37      	ldr	r3, [pc, #220]	@ (8006fac <HAL_RCC_ClockConfig+0x148>)
 8006ed0:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 8006ed2:	4b37      	ldr	r3, [pc, #220]	@ (8006fb0 <HAL_RCC_ClockConfig+0x14c>)
 8006ed4:	6818      	ldr	r0, [r3, #0]
 8006ed6:	f7fe fbf5 	bl	80056c4 <HAL_InitTick>
  return HAL_OK;
 8006eda:	2000      	movs	r0, #0
 8006edc:	e7c8      	b.n	8006e70 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006ede:	6813      	ldr	r3, [r2, #0]
 8006ee0:	f023 0307 	bic.w	r3, r3, #7
 8006ee4:	430b      	orrs	r3, r1
 8006ee6:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006ee8:	6813      	ldr	r3, [r2, #0]
 8006eea:	f003 0307 	and.w	r3, r3, #7
 8006eee:	428b      	cmp	r3, r1
 8006ef0:	d1bd      	bne.n	8006e6e <HAL_RCC_ClockConfig+0xa>
 8006ef2:	e7c5      	b.n	8006e80 <HAL_RCC_ClockConfig+0x1c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006ef4:	492b      	ldr	r1, [pc, #172]	@ (8006fa4 <HAL_RCC_ClockConfig+0x140>)
 8006ef6:	68a0      	ldr	r0, [r4, #8]
 8006ef8:	684b      	ldr	r3, [r1, #4]
 8006efa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006efe:	4303      	orrs	r3, r0
 8006f00:	604b      	str	r3, [r1, #4]
 8006f02:	e7c0      	b.n	8006e86 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006f04:	6862      	ldr	r2, [r4, #4]
 8006f06:	4e27      	ldr	r6, [pc, #156]	@ (8006fa4 <HAL_RCC_ClockConfig+0x140>)
 8006f08:	2a01      	cmp	r2, #1
 8006f0a:	d124      	bne.n	8006f56 <HAL_RCC_ClockConfig+0xf2>
 8006f0c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8006f10:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006f14:	6831      	ldr	r1, [r6, #0]
 8006f16:	fa93 f3a3 	rbit	r3, r3
 8006f1a:	fab3 f383 	clz	r3, r3
 8006f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8006f22:	420b      	tst	r3, r1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006f24:	d0a3      	beq.n	8006e6e <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006f26:	6873      	ldr	r3, [r6, #4]
 8006f28:	f023 0303 	bic.w	r3, r3, #3
 8006f2c:	4313      	orrs	r3, r2
 8006f2e:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8006f30:	f7fe fdca 	bl	8005ac8 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006f34:	f241 3888 	movw	r8, #5000	@ 0x1388
    tickstart = HAL_GetTick();
 8006f38:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006f3a:	6873      	ldr	r3, [r6, #4]
 8006f3c:	6862      	ldr	r2, [r4, #4]
 8006f3e:	f003 030c 	and.w	r3, r3, #12
 8006f42:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8006f46:	d0a0      	beq.n	8006e8a <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006f48:	f7fe fdbe 	bl	8005ac8 <HAL_GetTick>
 8006f4c:	1bc0      	subs	r0, r0, r7
 8006f4e:	4540      	cmp	r0, r8
 8006f50:	d9f3      	bls.n	8006f3a <HAL_RCC_ClockConfig+0xd6>
        return HAL_TIMEOUT;
 8006f52:	2003      	movs	r0, #3
 8006f54:	e78c      	b.n	8006e70 <HAL_RCC_ClockConfig+0xc>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006f56:	2a02      	cmp	r2, #2
 8006f58:	bf0c      	ite	eq
 8006f5a:	f04f 7300 	moveq.w	r3, #33554432	@ 0x2000000
 8006f5e:	2302      	movne	r3, #2
 8006f60:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006f64:	6830      	ldr	r0, [r6, #0]
 8006f66:	fa93 f3a3 	rbit	r3, r3
 8006f6a:	2101      	movs	r1, #1
 8006f6c:	fab3 f383 	clz	r3, r3
 8006f70:	fa01 f303 	lsl.w	r3, r1, r3
 8006f74:	4203      	tst	r3, r0
 8006f76:	e7d5      	b.n	8006f24 <HAL_RCC_ClockConfig+0xc0>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006f78:	6813      	ldr	r3, [r2, #0]
 8006f7a:	f023 0307 	bic.w	r3, r3, #7
 8006f7e:	432b      	orrs	r3, r5
 8006f80:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006f82:	6813      	ldr	r3, [r2, #0]
 8006f84:	f003 0307 	and.w	r3, r3, #7
 8006f88:	42ab      	cmp	r3, r5
 8006f8a:	f47f af70 	bne.w	8006e6e <HAL_RCC_ClockConfig+0xa>
 8006f8e:	e782      	b.n	8006e96 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006f90:	686b      	ldr	r3, [r5, #4]
 8006f92:	68e1      	ldr	r1, [r4, #12]
 8006f94:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8006f98:	430b      	orrs	r3, r1
 8006f9a:	606b      	str	r3, [r5, #4]
 8006f9c:	e780      	b.n	8006ea0 <HAL_RCC_ClockConfig+0x3c>
 8006f9e:	bf00      	nop
 8006fa0:	40022000 	.word	0x40022000
 8006fa4:	40021000 	.word	0x40021000
 8006fa8:	08012c1d 	.word	0x08012c1d
 8006fac:	2000002c 	.word	0x2000002c
 8006fb0:	20000034 	.word	0x20000034

08006fb4 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8006fb4:	4b08      	ldr	r3, [pc, #32]	@ (8006fd8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006fb6:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8006fba:	685b      	ldr	r3, [r3, #4]
 8006fbc:	fa92 f2a2 	rbit	r2, r2
 8006fc0:	fab2 f282 	clz	r2, r2
 8006fc4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006fc8:	40d3      	lsrs	r3, r2
 8006fca:	4a04      	ldr	r2, [pc, #16]	@ (8006fdc <HAL_RCC_GetPCLK1Freq+0x28>)
 8006fcc:	5cd3      	ldrb	r3, [r2, r3]
 8006fce:	4a04      	ldr	r2, [pc, #16]	@ (8006fe0 <HAL_RCC_GetPCLK1Freq+0x2c>)
 8006fd0:	6810      	ldr	r0, [r2, #0]
}    
 8006fd2:	40d8      	lsrs	r0, r3
 8006fd4:	4770      	bx	lr
 8006fd6:	bf00      	nop
 8006fd8:	40021000 	.word	0x40021000
 8006fdc:	08012c15 	.word	0x08012c15
 8006fe0:	2000002c 	.word	0x2000002c

08006fe4 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8006fe4:	4b08      	ldr	r3, [pc, #32]	@ (8007008 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006fe6:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8006fea:	685b      	ldr	r3, [r3, #4]
 8006fec:	fa92 f2a2 	rbit	r2, r2
 8006ff0:	fab2 f282 	clz	r2, r2
 8006ff4:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8006ff8:	40d3      	lsrs	r3, r2
 8006ffa:	4a04      	ldr	r2, [pc, #16]	@ (800700c <HAL_RCC_GetPCLK2Freq+0x28>)
 8006ffc:	5cd3      	ldrb	r3, [r2, r3]
 8006ffe:	4a04      	ldr	r2, [pc, #16]	@ (8007010 <HAL_RCC_GetPCLK2Freq+0x2c>)
 8007000:	6810      	ldr	r0, [r2, #0]
} 
 8007002:	40d8      	lsrs	r0, r3
 8007004:	4770      	bx	lr
 8007006:	bf00      	nop
 8007008:	40021000 	.word	0x40021000
 800700c:	08012c15 	.word	0x08012c15
 8007010:	2000002c 	.word	0x2000002c

08007014 <HAL_RCC_GetClockConfig>:
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8007014:	230f      	movs	r3, #15
 8007016:	6003      	str	r3, [r0, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007018:	4b0b      	ldr	r3, [pc, #44]	@ (8007048 <HAL_RCC_GetClockConfig+0x34>)
 800701a:	685a      	ldr	r2, [r3, #4]
 800701c:	f002 0203 	and.w	r2, r2, #3
 8007020:	6042      	str	r2, [r0, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8007022:	685a      	ldr	r2, [r3, #4]
 8007024:	f002 02f0 	and.w	r2, r2, #240	@ 0xf0
 8007028:	6082      	str	r2, [r0, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 800702a:	685a      	ldr	r2, [r3, #4]
 800702c:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
 8007030:	60c2      	str	r2, [r0, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8007032:	685b      	ldr	r3, [r3, #4]
 8007034:	08db      	lsrs	r3, r3, #3
 8007036:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800703a:	6103      	str	r3, [r0, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 800703c:	4b03      	ldr	r3, [pc, #12]	@ (800704c <HAL_RCC_GetClockConfig+0x38>)
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	f003 0307 	and.w	r3, r3, #7
 8007044:	600b      	str	r3, [r1, #0]
}
 8007046:	4770      	bx	lr
 8007048:	40021000 	.word	0x40021000
 800704c:	40022000 	.word	0x40022000

08007050 <HAL_RCCEx_PeriphCLKConfig>:
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007050:	6803      	ldr	r3, [r0, #0]
{
 8007052:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007056:	03dd      	lsls	r5, r3, #15
{
 8007058:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800705a:	d524      	bpl.n	80070a6 <HAL_RCCEx_PeriphCLKConfig+0x56>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800705c:	4d78      	ldr	r5, [pc, #480]	@ (8007240 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 800705e:	69eb      	ldr	r3, [r5, #28]
 8007060:	00d8      	lsls	r0, r3, #3
 8007062:	f100 8091 	bmi.w	8007188 <HAL_RCCEx_PeriphCLKConfig+0x138>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007066:	69eb      	ldr	r3, [r5, #28]
 8007068:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800706c:	61eb      	str	r3, [r5, #28]
 800706e:	69eb      	ldr	r3, [r5, #28]
 8007070:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007074:	9301      	str	r3, [sp, #4]
 8007076:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8007078:	2601      	movs	r6, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800707a:	4f72      	ldr	r7, [pc, #456]	@ (8007244 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 800707c:	683b      	ldr	r3, [r7, #0]
 800707e:	05d9      	lsls	r1, r3, #23
 8007080:	f140 8084 	bpl.w	800718c <HAL_RCCEx_PeriphCLKConfig+0x13c>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007084:	6a2b      	ldr	r3, [r5, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007086:	6862      	ldr	r2, [r4, #4]
 8007088:	f413 7340 	ands.w	r3, r3, #768	@ 0x300
 800708c:	f040 8093 	bne.w	80071b6 <HAL_RCCEx_PeriphCLKConfig+0x166>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8007090:	6a2b      	ldr	r3, [r5, #32]
 8007092:	6862      	ldr	r2, [r4, #4]
 8007094:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007098:	4313      	orrs	r3, r2
 800709a:	622b      	str	r3, [r5, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800709c:	b11e      	cbz	r6, 80070a6 <HAL_RCCEx_PeriphCLKConfig+0x56>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800709e:	69eb      	ldr	r3, [r5, #28]
 80070a0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80070a4:	61eb      	str	r3, [r5, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80070a6:	6823      	ldr	r3, [r4, #0]
 80070a8:	07df      	lsls	r7, r3, #31
 80070aa:	d506      	bpl.n	80070ba <HAL_RCCEx_PeriphCLKConfig+0x6a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80070ac:	4964      	ldr	r1, [pc, #400]	@ (8007240 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 80070ae:	68a0      	ldr	r0, [r4, #8]
 80070b0:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 80070b2:	f022 0203 	bic.w	r2, r2, #3
 80070b6:	4302      	orrs	r2, r0
 80070b8:	630a      	str	r2, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80070ba:	079e      	lsls	r6, r3, #30
 80070bc:	d506      	bpl.n	80070cc <HAL_RCCEx_PeriphCLKConfig+0x7c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80070be:	4960      	ldr	r1, [pc, #384]	@ (8007240 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 80070c0:	68e0      	ldr	r0, [r4, #12]
 80070c2:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 80070c4:	f422 3240 	bic.w	r2, r2, #196608	@ 0x30000
 80070c8:	4302      	orrs	r2, r0
 80070ca:	630a      	str	r2, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80070cc:	075d      	lsls	r5, r3, #29
 80070ce:	d506      	bpl.n	80070de <HAL_RCCEx_PeriphCLKConfig+0x8e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80070d0:	495b      	ldr	r1, [pc, #364]	@ (8007240 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 80070d2:	6920      	ldr	r0, [r4, #16]
 80070d4:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 80070d6:	f422 2240 	bic.w	r2, r2, #786432	@ 0xc0000
 80070da:	4302      	orrs	r2, r0
 80070dc:	630a      	str	r2, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80070de:	0698      	lsls	r0, r3, #26
 80070e0:	d506      	bpl.n	80070f0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80070e2:	4957      	ldr	r1, [pc, #348]	@ (8007240 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 80070e4:	69e0      	ldr	r0, [r4, #28]
 80070e6:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 80070e8:	f022 0210 	bic.w	r2, r2, #16
 80070ec:	4302      	orrs	r2, r0
 80070ee:	630a      	str	r2, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80070f0:	0399      	lsls	r1, r3, #14
 80070f2:	d506      	bpl.n	8007102 <HAL_RCCEx_PeriphCLKConfig+0xb2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80070f4:	4952      	ldr	r1, [pc, #328]	@ (8007240 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 80070f6:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 80070f8:	684a      	ldr	r2, [r1, #4]
 80070fa:	f422 0280 	bic.w	r2, r2, #4194304	@ 0x400000
 80070fe:	4302      	orrs	r2, r0
 8007100:	604a      	str	r2, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007102:	065a      	lsls	r2, r3, #25
 8007104:	d506      	bpl.n	8007114 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007106:	494e      	ldr	r1, [pc, #312]	@ (8007240 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8007108:	6a20      	ldr	r0, [r4, #32]
 800710a:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 800710c:	f022 0220 	bic.w	r2, r2, #32
 8007110:	4302      	orrs	r2, r0
 8007112:	630a      	str	r2, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007114:	071f      	lsls	r7, r3, #28
 8007116:	d506      	bpl.n	8007126 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007118:	4949      	ldr	r1, [pc, #292]	@ (8007240 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 800711a:	6960      	ldr	r0, [r4, #20]
 800711c:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 800711e:	f422 1240 	bic.w	r2, r2, #3145728	@ 0x300000
 8007122:	4302      	orrs	r2, r0
 8007124:	630a      	str	r2, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007126:	06de      	lsls	r6, r3, #27
 8007128:	d506      	bpl.n	8007138 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800712a:	4945      	ldr	r1, [pc, #276]	@ (8007240 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 800712c:	69a0      	ldr	r0, [r4, #24]
 800712e:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 8007130:	f422 0240 	bic.w	r2, r2, #12582912	@ 0xc00000
 8007134:	4302      	orrs	r2, r0
 8007136:	630a      	str	r2, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8007138:	059d      	lsls	r5, r3, #22
 800713a:	d506      	bpl.n	800714a <HAL_RCCEx_PeriphCLKConfig+0xfa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800713c:	4940      	ldr	r1, [pc, #256]	@ (8007240 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 800713e:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8007140:	684a      	ldr	r2, [r1, #4]
 8007142:	f422 0200 	bic.w	r2, r2, #8388608	@ 0x800000
 8007146:	4302      	orrs	r2, r0
 8007148:	604a      	str	r2, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800714a:	0618      	lsls	r0, r3, #24
 800714c:	d506      	bpl.n	800715c <HAL_RCCEx_PeriphCLKConfig+0x10c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800714e:	493c      	ldr	r1, [pc, #240]	@ (8007240 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8007150:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8007152:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 8007154:	f422 72f8 	bic.w	r2, r2, #496	@ 0x1f0
 8007158:	4302      	orrs	r2, r0
 800715a:	62ca      	str	r2, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 800715c:	05d9      	lsls	r1, r3, #23
 800715e:	d506      	bpl.n	800716e <HAL_RCCEx_PeriphCLKConfig+0x11e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8007160:	4937      	ldr	r1, [pc, #220]	@ (8007240 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8007162:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8007164:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 8007166:	f422 5278 	bic.w	r2, r2, #15872	@ 0x3e00
 800716a:	4302      	orrs	r2, r0
 800716c:	62ca      	str	r2, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800716e:	04da      	lsls	r2, r3, #19
 8007170:	d506      	bpl.n	8007180 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8007172:	4933      	ldr	r1, [pc, #204]	@ (8007240 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8007174:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8007176:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 8007178:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800717c:	4302      	orrs	r2, r0
 800717e:	630a      	str	r2, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8007180:	049b      	lsls	r3, r3, #18
 8007182:	d454      	bmi.n	800722e <HAL_RCCEx_PeriphCLKConfig+0x1de>
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8007184:	2000      	movs	r0, #0
 8007186:	e013      	b.n	80071b0 <HAL_RCCEx_PeriphCLKConfig+0x160>
  FlagStatus       pwrclkchanged = RESET;
 8007188:	2600      	movs	r6, #0
 800718a:	e776      	b.n	800707a <HAL_RCCEx_PeriphCLKConfig+0x2a>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800718c:	683b      	ldr	r3, [r7, #0]
 800718e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007192:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8007194:	f7fe fc98 	bl	8005ac8 <HAL_GetTick>
 8007198:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800719a:	683b      	ldr	r3, [r7, #0]
 800719c:	05da      	lsls	r2, r3, #23
 800719e:	f53f af71 	bmi.w	8007084 <HAL_RCCEx_PeriphCLKConfig+0x34>
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80071a2:	f7fe fc91 	bl	8005ac8 <HAL_GetTick>
 80071a6:	eba0 0008 	sub.w	r0, r0, r8
 80071aa:	2864      	cmp	r0, #100	@ 0x64
 80071ac:	d9f5      	bls.n	800719a <HAL_RCCEx_PeriphCLKConfig+0x14a>
          return HAL_TIMEOUT;
 80071ae:	2003      	movs	r0, #3
}
 80071b0:	b002      	add	sp, #8
 80071b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80071b6:	f402 7240 	and.w	r2, r2, #768	@ 0x300
 80071ba:	429a      	cmp	r2, r3
 80071bc:	f43f af68 	beq.w	8007090 <HAL_RCCEx_PeriphCLKConfig+0x40>
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80071c0:	6a29      	ldr	r1, [r5, #32]
 80071c2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80071c6:	f421 7040 	bic.w	r0, r1, #768	@ 0x300
 80071ca:	fa93 f2a3 	rbit	r2, r3
      __HAL_RCC_BACKUPRESET_FORCE();
 80071ce:	f8df c078 	ldr.w	ip, [pc, #120]	@ 8007248 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80071d2:	fab2 f282 	clz	r2, r2
 80071d6:	4462      	add	r2, ip
 80071d8:	0092      	lsls	r2, r2, #2
 80071da:	2701      	movs	r7, #1
 80071dc:	6017      	str	r7, [r2, #0]
 80071de:	fa93 f3a3 	rbit	r3, r3
      __HAL_RCC_BACKUPRESET_RELEASE();
 80071e2:	fab3 f383 	clz	r3, r3
 80071e6:	4463      	add	r3, ip
 80071e8:	009b      	lsls	r3, r3, #2
 80071ea:	2200      	movs	r2, #0
 80071ec:	601a      	str	r2, [r3, #0]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80071ee:	07cb      	lsls	r3, r1, #31
      RCC->BDCR = temp_reg;
 80071f0:	6228      	str	r0, [r5, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80071f2:	f57f af4d 	bpl.w	8007090 <HAL_RCCEx_PeriphCLKConfig+0x40>
        tickstart = HAL_GetTick();
 80071f6:	f7fe fc67 	bl	8005ac8 <HAL_GetTick>
 80071fa:	f04f 0802 	mov.w	r8, #2
 80071fe:	4681      	mov	r9, r0
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007200:	f241 3a88 	movw	sl, #5000	@ 0x1388
 8007204:	fa98 f3a8 	rbit	r3, r8
 8007208:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800720c:	6a2a      	ldr	r2, [r5, #32]
 800720e:	fa98 f3a8 	rbit	r3, r8
 8007212:	fab3 f383 	clz	r3, r3
 8007216:	fa07 f303 	lsl.w	r3, r7, r3
 800721a:	4213      	tst	r3, r2
 800721c:	f47f af38 	bne.w	8007090 <HAL_RCCEx_PeriphCLKConfig+0x40>
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007220:	f7fe fc52 	bl	8005ac8 <HAL_GetTick>
 8007224:	eba0 0009 	sub.w	r0, r0, r9
 8007228:	4550      	cmp	r0, sl
 800722a:	d9eb      	bls.n	8007204 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 800722c:	e7bf      	b.n	80071ae <HAL_RCCEx_PeriphCLKConfig+0x15e>
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 800722e:	4a04      	ldr	r2, [pc, #16]	@ (8007240 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8007230:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007232:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8007234:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007238:	430b      	orrs	r3, r1
 800723a:	6313      	str	r3, [r2, #48]	@ 0x30
 800723c:	e7a2      	b.n	8007184 <HAL_RCCEx_PeriphCLKConfig+0x134>
 800723e:	bf00      	nop
 8007240:	40021000 	.word	0x40021000
 8007244:	40007000 	.word	0x40007000
 8007248:	10908100 	.word	0x10908100

0800724c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800724c:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 800724e:	6803      	ldr	r3, [r0, #0]
 8007250:	4a09      	ldr	r2, [pc, #36]	@ (8007278 <HAL_RTC_WaitForSynchro+0x2c>)
 8007252:	60da      	str	r2, [r3, #12]
{
 8007254:	4604      	mov	r4, r0

  /* Get tick */
  tickstart = HAL_GetTick();
 8007256:	f7fe fc37 	bl	8005ac8 <HAL_GetTick>
 800725a:	4605      	mov	r5, r0

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800725c:	6823      	ldr	r3, [r4, #0]
 800725e:	68db      	ldr	r3, [r3, #12]
 8007260:	069b      	lsls	r3, r3, #26
 8007262:	d501      	bpl.n	8007268 <HAL_RTC_WaitForSynchro+0x1c>
    {
      return HAL_TIMEOUT;
    }
  }

  return HAL_OK;
 8007264:	2000      	movs	r0, #0
}
 8007266:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007268:	f7fe fc2e 	bl	8005ac8 <HAL_GetTick>
 800726c:	1b40      	subs	r0, r0, r5
 800726e:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8007272:	d9f3      	bls.n	800725c <HAL_RTC_WaitForSynchro+0x10>
      return HAL_TIMEOUT;
 8007274:	2003      	movs	r0, #3
 8007276:	e7f6      	b.n	8007266 <HAL_RTC_WaitForSynchro+0x1a>
 8007278:	0001ff5f 	.word	0x0001ff5f

0800727c <RTC_EnterInitMode>:
{
  uint32_t tickstart = 0U;
  HAL_StatusTypeDef status = HAL_OK;

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 800727c:	6803      	ldr	r3, [r0, #0]
{
 800727e:	b570      	push	{r4, r5, r6, lr}
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8007280:	68dc      	ldr	r4, [r3, #12]
 8007282:	f014 0440 	ands.w	r4, r4, #64	@ 0x40
{
 8007286:	4605      	mov	r5, r0
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8007288:	d117      	bne.n	80072ba <RTC_EnterInitMode+0x3e>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800728a:	68da      	ldr	r2, [r3, #12]
 800728c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8007290:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007292:	f7fe fc19 	bl	8005ac8 <HAL_GetTick>
 8007296:	4606      	mov	r6, r0

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8007298:	682b      	ldr	r3, [r5, #0]
 800729a:	68db      	ldr	r3, [r3, #12]
 800729c:	065b      	lsls	r3, r3, #25
 800729e:	d400      	bmi.n	80072a2 <RTC_EnterInitMode+0x26>
 80072a0:	b10c      	cbz	r4, 80072a6 <RTC_EnterInitMode+0x2a>
      }
    }
  }

  return status;
}
 80072a2:	4620      	mov	r0, r4
 80072a4:	bd70      	pop	{r4, r5, r6, pc}
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80072a6:	f7fe fc0f 	bl	8005ac8 <HAL_GetTick>
 80072aa:	1b80      	subs	r0, r0, r6
 80072ac:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
        hrtc->State = HAL_RTC_STATE_ERROR;
 80072b0:	bf82      	ittt	hi
 80072b2:	2304      	movhi	r3, #4
 80072b4:	776b      	strbhi	r3, [r5, #29]
        status = HAL_ERROR;
 80072b6:	2401      	movhi	r4, #1
 80072b8:	e7ee      	b.n	8007298 <RTC_EnterInitMode+0x1c>
  HAL_StatusTypeDef status = HAL_OK;
 80072ba:	2400      	movs	r4, #0
 80072bc:	e7f1      	b.n	80072a2 <RTC_EnterInitMode+0x26>

080072be <RTC_ExitInitMode>:
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
  HAL_StatusTypeDef status = HAL_OK;

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80072be:	6803      	ldr	r3, [r0, #0]
 80072c0:	68da      	ldr	r2, [r3, #12]
 80072c2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
{
 80072c6:	b510      	push	{r4, lr}
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80072c8:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80072ca:	689b      	ldr	r3, [r3, #8]
 80072cc:	069b      	lsls	r3, r3, #26
{
 80072ce:	4604      	mov	r4, r0
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80072d0:	d501      	bpl.n	80072d6 <RTC_ExitInitMode+0x18>
  HAL_StatusTypeDef status = HAL_OK;
 80072d2:	2000      	movs	r0, #0
      status = HAL_ERROR;
    }
  }

  return status;
}
 80072d4:	bd10      	pop	{r4, pc}
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80072d6:	f7ff ffb9 	bl	800724c <HAL_RTC_WaitForSynchro>
 80072da:	2800      	cmp	r0, #0
 80072dc:	d0f9      	beq.n	80072d2 <RTC_ExitInitMode+0x14>
      hrtc->State = HAL_RTC_STATE_ERROR;
 80072de:	2304      	movs	r3, #4
 80072e0:	7763      	strb	r3, [r4, #29]
      status = HAL_ERROR;
 80072e2:	2001      	movs	r0, #1
 80072e4:	e7f6      	b.n	80072d4 <RTC_ExitInitMode+0x16>

080072e6 <HAL_RTC_Init>:
{
 80072e6:	b510      	push	{r4, lr}
  if (hrtc == NULL)
 80072e8:	4604      	mov	r4, r0
 80072ea:	2800      	cmp	r0, #0
 80072ec:	d041      	beq.n	8007372 <HAL_RTC_Init+0x8c>
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80072ee:	7f43      	ldrb	r3, [r0, #29]
 80072f0:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 80072f4:	b913      	cbnz	r3, 80072fc <HAL_RTC_Init+0x16>
    hrtc->Lock = HAL_UNLOCKED;
 80072f6:	7702      	strb	r2, [r0, #28]
    HAL_RTC_MspInit(hrtc);
 80072f8:	f7fe f8ac 	bl	8005454 <HAL_RTC_MspInit>
  hrtc->State = HAL_RTC_STATE_BUSY;
 80072fc:	2302      	movs	r3, #2
 80072fe:	7763      	strb	r3, [r4, #29]
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8007300:	6823      	ldr	r3, [r4, #0]
 8007302:	68da      	ldr	r2, [r3, #12]
 8007304:	06d2      	lsls	r2, r2, #27
 8007306:	d503      	bpl.n	8007310 <HAL_RTC_Init+0x2a>
    hrtc->State = HAL_RTC_STATE_READY;
 8007308:	2301      	movs	r3, #1
 800730a:	7763      	strb	r3, [r4, #29]
 800730c:	2000      	movs	r0, #0
}
 800730e:	bd10      	pop	{r4, pc}
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007310:	22ca      	movs	r2, #202	@ 0xca
 8007312:	625a      	str	r2, [r3, #36]	@ 0x24
 8007314:	2253      	movs	r2, #83	@ 0x53
 8007316:	625a      	str	r2, [r3, #36]	@ 0x24
    status = RTC_EnterInitMode(hrtc);
 8007318:	4620      	mov	r0, r4
 800731a:	f7ff ffaf 	bl	800727c <RTC_EnterInitMode>
    if (status == HAL_OK)
 800731e:	bb10      	cbnz	r0, 8007366 <HAL_RTC_Init+0x80>
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8007320:	6823      	ldr	r3, [r4, #0]
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8007322:	6920      	ldr	r0, [r4, #16]
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8007324:	689a      	ldr	r2, [r3, #8]
 8007326:	f422 02e0 	bic.w	r2, r2, #7340032	@ 0x700000
 800732a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800732e:	609a      	str	r2, [r3, #8]
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8007330:	6862      	ldr	r2, [r4, #4]
 8007332:	6899      	ldr	r1, [r3, #8]
 8007334:	4302      	orrs	r2, r0
 8007336:	6960      	ldr	r0, [r4, #20]
 8007338:	4302      	orrs	r2, r0
 800733a:	430a      	orrs	r2, r1
 800733c:	609a      	str	r2, [r3, #8]
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800733e:	68e2      	ldr	r2, [r4, #12]
 8007340:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8007342:	691a      	ldr	r2, [r3, #16]
 8007344:	68a1      	ldr	r1, [r4, #8]
 8007346:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800734a:	611a      	str	r2, [r3, #16]
      status = RTC_ExitInitMode(hrtc);
 800734c:	4620      	mov	r0, r4
 800734e:	f7ff ffb6 	bl	80072be <RTC_ExitInitMode>
    if (status == HAL_OK)
 8007352:	b940      	cbnz	r0, 8007366 <HAL_RTC_Init+0x80>
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8007354:	6823      	ldr	r3, [r4, #0]
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8007356:	69a1      	ldr	r1, [r4, #24]
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8007358:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800735a:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800735e:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8007360:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007362:	430a      	orrs	r2, r1
 8007364:	641a      	str	r2, [r3, #64]	@ 0x40
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007366:	6823      	ldr	r3, [r4, #0]
 8007368:	22ff      	movs	r2, #255	@ 0xff
 800736a:	625a      	str	r2, [r3, #36]	@ 0x24
  if (status == HAL_OK)
 800736c:	2800      	cmp	r0, #0
 800736e:	d0cb      	beq.n	8007308 <HAL_RTC_Init+0x22>
 8007370:	e7cd      	b.n	800730e <HAL_RTC_Init+0x28>
    return HAL_ERROR;
 8007372:	2001      	movs	r0, #1
 8007374:	e7cb      	b.n	800730e <HAL_RTC_Init+0x28>

08007376 <RTC_ByteToBcd2>:
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
  uint32_t bcdhigh = 0U;
 8007376:	2300      	movs	r3, #0

  while (number >= 10U)
 8007378:	2809      	cmp	r0, #9
 800737a:	d803      	bhi.n	8007384 <RTC_ByteToBcd2+0xe>
  {
    bcdhigh++;
    number -= 10U;
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 800737c:	ea40 1003 	orr.w	r0, r0, r3, lsl #4
}
 8007380:	b2c0      	uxtb	r0, r0
 8007382:	4770      	bx	lr
    number -= 10U;
 8007384:	380a      	subs	r0, #10
    bcdhigh++;
 8007386:	3301      	adds	r3, #1
    number -= 10U;
 8007388:	b2c0      	uxtb	r0, r0
 800738a:	e7f5      	b.n	8007378 <RTC_ByteToBcd2+0x2>

0800738c <HAL_RTC_SetTime>:
{
 800738c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(hrtc);
 8007390:	7f03      	ldrb	r3, [r0, #28]
 8007392:	2b01      	cmp	r3, #1
{
 8007394:	4606      	mov	r6, r0
 8007396:	460f      	mov	r7, r1
 8007398:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(hrtc);
 800739c:	d041      	beq.n	8007422 <HAL_RTC_SetTime+0x96>
 800739e:	2301      	movs	r3, #1
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80073a0:	6831      	ldr	r1, [r6, #0]
  __HAL_LOCK(hrtc);
 80073a2:	7733      	strb	r3, [r6, #28]
  hrtc->State = HAL_RTC_STATE_BUSY;
 80073a4:	7770      	strb	r0, [r6, #29]
  if (Format == RTC_FORMAT_BIN)
 80073a6:	7838      	ldrb	r0, [r7, #0]
 80073a8:	787d      	ldrb	r5, [r7, #1]
 80073aa:	78bc      	ldrb	r4, [r7, #2]
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80073ac:	688b      	ldr	r3, [r1, #8]
  if (Format == RTC_FORMAT_BIN)
 80073ae:	2a00      	cmp	r2, #0
 80073b0:	d139      	bne.n	8007426 <HAL_RTC_SetTime+0x9a>
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80073b2:	f013 0340 	ands.w	r3, r3, #64	@ 0x40
      sTime->TimeFormat = 0x00U;
 80073b6:	bf08      	it	eq
 80073b8:	70fb      	strbeq	r3, [r7, #3]
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80073ba:	f7ff ffdc 	bl	8007376 <RTC_ByteToBcd2>
 80073be:	4680      	mov	r8, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80073c0:	4628      	mov	r0, r5
 80073c2:	f7ff ffd8 	bl	8007376 <RTC_ByteToBcd2>
 80073c6:	4602      	mov	r2, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 80073c8:	4620      	mov	r0, r4
 80073ca:	f7ff ffd4 	bl	8007376 <RTC_ByteToBcd2>
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 80073ce:	78fb      	ldrb	r3, [r7, #3]
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80073d0:	ea40 5383 	orr.w	r3, r0, r3, lsl #22
 80073d4:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80073d8:	ea43 2402 	orr.w	r4, r3, r2, lsl #8
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80073dc:	23ca      	movs	r3, #202	@ 0xca
 80073de:	624b      	str	r3, [r1, #36]	@ 0x24
 80073e0:	2353      	movs	r3, #83	@ 0x53
 80073e2:	624b      	str	r3, [r1, #36]	@ 0x24
  status = RTC_EnterInitMode(hrtc);
 80073e4:	4630      	mov	r0, r6
 80073e6:	f7ff ff49 	bl	800727c <RTC_EnterInitMode>
  if (status == HAL_OK)
 80073ea:	b9a8      	cbnz	r0, 8007418 <HAL_RTC_SetTime+0x8c>
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80073ec:	6832      	ldr	r2, [r6, #0]
 80073ee:	f004 347f 	and.w	r4, r4, #2139062143	@ 0x7f7f7f7f
 80073f2:	f024 44fe 	bic.w	r4, r4, #2130706432	@ 0x7f000000
 80073f6:	6014      	str	r4, [r2, #0]
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 80073f8:	6893      	ldr	r3, [r2, #8]
 80073fa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80073fe:	6093      	str	r3, [r2, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8007400:	e9d7 3003 	ldrd	r3, r0, [r7, #12]
 8007404:	6891      	ldr	r1, [r2, #8]
 8007406:	4303      	orrs	r3, r0
 8007408:	430b      	orrs	r3, r1
 800740a:	6093      	str	r3, [r2, #8]
    status = RTC_ExitInitMode(hrtc);
 800740c:	4630      	mov	r0, r6
 800740e:	f7ff ff56 	bl	80072be <RTC_ExitInitMode>
  if (status == HAL_OK)
 8007412:	b908      	cbnz	r0, 8007418 <HAL_RTC_SetTime+0x8c>
    hrtc->State = HAL_RTC_STATE_READY;
 8007414:	2301      	movs	r3, #1
 8007416:	7773      	strb	r3, [r6, #29]
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007418:	6833      	ldr	r3, [r6, #0]
 800741a:	22ff      	movs	r2, #255	@ 0xff
 800741c:	625a      	str	r2, [r3, #36]	@ 0x24
  __HAL_UNLOCK(hrtc);
 800741e:	2300      	movs	r3, #0
 8007420:	7733      	strb	r3, [r6, #28]
}
 8007422:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8007426:	f013 0340 	ands.w	r3, r3, #64	@ 0x40
      sTime->TimeFormat = 0x00U;
 800742a:	bf08      	it	eq
 800742c:	70fb      	strbeq	r3, [r7, #3]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800742e:	022d      	lsls	r5, r5, #8
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8007430:	78fa      	ldrb	r2, [r7, #3]
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8007432:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8007436:	ea45 0304 	orr.w	r3, r5, r4
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800743a:	ea43 5482 	orr.w	r4, r3, r2, lsl #22
 800743e:	e7cd      	b.n	80073dc <HAL_RTC_SetTime+0x50>

08007440 <HAL_RTC_SetDate>:
{
 8007440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hrtc);
 8007442:	7f03      	ldrb	r3, [r0, #28]
 8007444:	2b01      	cmp	r3, #1
{
 8007446:	4605      	mov	r5, r0
 8007448:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(hrtc);
 800744c:	d027      	beq.n	800749e <HAL_RTC_SetDate+0x5e>
 800744e:	2301      	movs	r3, #1
 8007450:	772b      	strb	r3, [r5, #28]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8007452:	7768      	strb	r0, [r5, #29]
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8007454:	780e      	ldrb	r6, [r1, #0]
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8007456:	78c8      	ldrb	r0, [r1, #3]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8007458:	784c      	ldrb	r4, [r1, #1]
                  ((uint32_t) sDate->Date)                      | \
 800745a:	788f      	ldrb	r7, [r1, #2]
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800745c:	0376      	lsls	r6, r6, #13
  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800745e:	b1fa      	cbz	r2, 80074a0 <HAL_RTC_SetDate+0x60>
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8007460:	ea46 4300 	orr.w	r3, r6, r0, lsl #16
 8007464:	433b      	orrs	r3, r7
 8007466:	ea43 2404 	orr.w	r4, r3, r4, lsl #8
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800746a:	682b      	ldr	r3, [r5, #0]
 800746c:	22ca      	movs	r2, #202	@ 0xca
 800746e:	625a      	str	r2, [r3, #36]	@ 0x24
 8007470:	2253      	movs	r2, #83	@ 0x53
 8007472:	625a      	str	r2, [r3, #36]	@ 0x24
  status = RTC_EnterInitMode(hrtc);
 8007474:	4628      	mov	r0, r5
 8007476:	f7ff ff01 	bl	800727c <RTC_EnterInitMode>
  if (status == HAL_OK)
 800747a:	b958      	cbnz	r0, 8007494 <HAL_RTC_SetDate+0x54>
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800747c:	682a      	ldr	r2, [r5, #0]
 800747e:	f024 447f 	bic.w	r4, r4, #4278190080	@ 0xff000000
 8007482:	f024 04c0 	bic.w	r4, r4, #192	@ 0xc0
 8007486:	6054      	str	r4, [r2, #4]
    status = RTC_ExitInitMode(hrtc);
 8007488:	4628      	mov	r0, r5
 800748a:	f7ff ff18 	bl	80072be <RTC_ExitInitMode>
  if (status == HAL_OK)
 800748e:	b908      	cbnz	r0, 8007494 <HAL_RTC_SetDate+0x54>
    hrtc->State = HAL_RTC_STATE_READY;
 8007490:	2301      	movs	r3, #1
 8007492:	776b      	strb	r3, [r5, #29]
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007494:	682b      	ldr	r3, [r5, #0]
 8007496:	22ff      	movs	r2, #255	@ 0xff
 8007498:	625a      	str	r2, [r3, #36]	@ 0x24
  __HAL_UNLOCK(hrtc);
 800749a:	2300      	movs	r3, #0
 800749c:	772b      	strb	r3, [r5, #28]
}
 800749e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80074a0:	06e3      	lsls	r3, r4, #27
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80074a2:	bf42      	ittt	mi
 80074a4:	f024 0410 	bicmi.w	r4, r4, #16
 80074a8:	340a      	addmi	r4, #10
 80074aa:	704c      	strbmi	r4, [r1, #1]
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80074ac:	f7ff ff63 	bl	8007376 <RTC_ByteToBcd2>
 80074b0:	4604      	mov	r4, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80074b2:	7848      	ldrb	r0, [r1, #1]
 80074b4:	f7ff ff5f 	bl	8007376 <RTC_ByteToBcd2>
 80074b8:	4602      	mov	r2, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 80074ba:	4638      	mov	r0, r7
 80074bc:	f7ff ff5b 	bl	8007376 <RTC_ByteToBcd2>
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80074c0:	ea40 0306 	orr.w	r3, r0, r6
 80074c4:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80074c8:	ea43 2402 	orr.w	r4, r3, r2, lsl #8
 80074cc:	e7cd      	b.n	800746a <HAL_RTC_SetDate+0x2a>

080074ce <RTC_Bcd2ToByte>:
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
  uint32_t tens = 0U;
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 80074ce:	0903      	lsrs	r3, r0, #4
 80074d0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 80074d4:	f000 000f 	and.w	r0, r0, #15
 80074d8:	eb00 0043 	add.w	r0, r0, r3, lsl #1
}
 80074dc:	b2c0      	uxtb	r0, r0
 80074de:	4770      	bx	lr

080074e0 <HAL_RTC_GetTime>:
{
 80074e0:	b538      	push	{r3, r4, r5, lr}
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80074e2:	6803      	ldr	r3, [r0, #0]
 80074e4:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 80074e6:	6048      	str	r0, [r1, #4]
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80074e8:	6918      	ldr	r0, [r3, #16]
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80074ea:	681b      	ldr	r3, [r3, #0]
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80074ec:	f3c0 000e 	ubfx	r0, r0, #0, #15
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 80074f0:	f3c3 2506 	ubfx	r5, r3, #8, #7
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 80074f4:	f003 047f 	and.w	r4, r3, #127	@ 0x7f
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80074f8:	6088      	str	r0, [r1, #8]
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 80074fa:	f3c3 4005 	ubfx	r0, r3, #16, #6
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 80074fe:	f3c3 5380 	ubfx	r3, r3, #22, #1
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8007502:	7008      	strb	r0, [r1, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8007504:	704d      	strb	r5, [r1, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8007506:	708c      	strb	r4, [r1, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8007508:	70cb      	strb	r3, [r1, #3]
  if (Format == RTC_FORMAT_BIN)
 800750a:	b952      	cbnz	r2, 8007522 <HAL_RTC_GetTime+0x42>
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800750c:	f7ff ffdf 	bl	80074ce <RTC_Bcd2ToByte>
 8007510:	7008      	strb	r0, [r1, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8007512:	4628      	mov	r0, r5
 8007514:	f7ff ffdb 	bl	80074ce <RTC_Bcd2ToByte>
 8007518:	7048      	strb	r0, [r1, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800751a:	4620      	mov	r0, r4
 800751c:	f7ff ffd7 	bl	80074ce <RTC_Bcd2ToByte>
 8007520:	7088      	strb	r0, [r1, #2]
}
 8007522:	2000      	movs	r0, #0
 8007524:	bd38      	pop	{r3, r4, r5, pc}

08007526 <HAL_RTC_GetDate>:
{
 8007526:	b538      	push	{r3, r4, r5, lr}
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8007528:	6803      	ldr	r3, [r0, #0]
 800752a:	685b      	ldr	r3, [r3, #4]
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800752c:	f3c3 4007 	ubfx	r0, r3, #16, #8
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8007530:	f3c3 2504 	ubfx	r5, r3, #8, #5
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8007534:	f003 043f 	and.w	r4, r3, #63	@ 0x3f
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8007538:	f3c3 3342 	ubfx	r3, r3, #13, #3
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800753c:	70c8      	strb	r0, [r1, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800753e:	704d      	strb	r5, [r1, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8007540:	708c      	strb	r4, [r1, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8007542:	700b      	strb	r3, [r1, #0]
  if (Format == RTC_FORMAT_BIN)
 8007544:	b952      	cbnz	r2, 800755c <HAL_RTC_GetDate+0x36>
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8007546:	f7ff ffc2 	bl	80074ce <RTC_Bcd2ToByte>
 800754a:	70c8      	strb	r0, [r1, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800754c:	4628      	mov	r0, r5
 800754e:	f7ff ffbe 	bl	80074ce <RTC_Bcd2ToByte>
 8007552:	7048      	strb	r0, [r1, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8007554:	4620      	mov	r0, r4
 8007556:	f7ff ffba 	bl	80074ce <RTC_Bcd2ToByte>
 800755a:	7088      	strb	r0, [r1, #2]
}
 800755c:	2000      	movs	r0, #0
 800755e:	bd38      	pop	{r3, r4, r5, pc}

08007560 <HAL_RTCEx_BKUPWrite>:
  uint32_t tmp = 0U;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) &(hrtc->Instance->BKP0R);
 8007560:	6803      	ldr	r3, [r0, #0]
 8007562:	3350      	adds	r3, #80	@ 0x50
  tmp += (BackupRegister * 4U);

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8007564:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
}
 8007568:	4770      	bx	lr

0800756a <HAL_RTCEx_BKUPRead>:
  uint32_t tmp = 0U;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) &(hrtc->Instance->BKP0R);
 800756a:	6803      	ldr	r3, [r0, #0]
 800756c:	3350      	adds	r3, #80	@ 0x50
  tmp += (BackupRegister * 4U);

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 800756e:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
}
 8007572:	4770      	bx	lr

08007574 <SPI_WaitFlagStateUntilTimeout.constprop.0>:
  * @param  State flag state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 8007574:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007576:	460e      	mov	r6, r1
 8007578:	4614      	mov	r4, r2
 800757a:	4605      	mov	r5, r0
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800757c:	f7fe faa4 	bl	8005ac8 <HAL_GetTick>
 8007580:	4434      	add	r4, r6
 8007582:	1a24      	subs	r4, r4, r0
  tmp_tickstart = HAL_GetTick();
 8007584:	f7fe faa0 	bl	8005ac8 <HAL_GetTick>

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007588:	4b22      	ldr	r3, [pc, #136]	@ (8007614 <SPI_WaitFlagStateUntilTimeout.constprop.0+0xa0>)
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 8007590:	4363      	muls	r3, r4
  tmp_tickstart = HAL_GetTick();
 8007592:	4607      	mov	r7, r0
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007594:	9301      	str	r3, [sp, #4]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007596:	682a      	ldr	r2, [r5, #0]
 8007598:	6890      	ldr	r0, [r2, #8]
 800759a:	f010 0080 	ands.w	r0, r0, #128	@ 0x80
 800759e:	d02d      	beq.n	80075fc <SPI_WaitFlagStateUntilTimeout.constprop.0+0x88>
  {
    if (Timeout != HAL_MAX_DELAY)
 80075a0:	1c73      	adds	r3, r6, #1
 80075a2:	d0f9      	beq.n	8007598 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x24>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80075a4:	f7fe fa90 	bl	8005ac8 <HAL_GetTick>
 80075a8:	1bc0      	subs	r0, r0, r7
 80075aa:	42a0      	cmp	r0, r4
 80075ac:	d328      	bcc.n	8007600 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x8c>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80075ae:	682b      	ldr	r3, [r5, #0]
 80075b0:	685a      	ldr	r2, [r3, #4]
 80075b2:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80075b6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80075b8:	686a      	ldr	r2, [r5, #4]
 80075ba:	f5b2 7f82 	cmp.w	r2, #260	@ 0x104
 80075be:	d10a      	bne.n	80075d6 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x62>
 80075c0:	68aa      	ldr	r2, [r5, #8]
 80075c2:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
 80075c6:	d002      	beq.n	80075ce <SPI_WaitFlagStateUntilTimeout.constprop.0+0x5a>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80075c8:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 80075cc:	d103      	bne.n	80075d6 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x62>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80075ce:	681a      	ldr	r2, [r3, #0]
 80075d0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80075d4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80075d6:	6aaa      	ldr	r2, [r5, #40]	@ 0x28
 80075d8:	f5b2 5f00 	cmp.w	r2, #8192	@ 0x2000
 80075dc:	d107      	bne.n	80075ee <SPI_WaitFlagStateUntilTimeout.constprop.0+0x7a>
        {
          SPI_RESET_CRC(hspi);
 80075de:	681a      	ldr	r2, [r3, #0]
 80075e0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80075e4:	601a      	str	r2, [r3, #0]
 80075e6:	681a      	ldr	r2, [r3, #0]
 80075e8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80075ec:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80075ee:	2301      	movs	r3, #1
 80075f0:	f885 305d 	strb.w	r3, [r5, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80075f4:	2300      	movs	r3, #0
 80075f6:	f885 305c 	strb.w	r3, [r5, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80075fa:	2003      	movs	r0, #3
      count--;
    }
  }

  return HAL_OK;
}
 80075fc:	b003      	add	sp, #12
 80075fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (count == 0U)
 8007600:	9a01      	ldr	r2, [sp, #4]
      count--;
 8007602:	9b01      	ldr	r3, [sp, #4]
      if (count == 0U)
 8007604:	2a00      	cmp	r2, #0
      count--;
 8007606:	f103 33ff 	add.w	r3, r3, #4294967295
 800760a:	9301      	str	r3, [sp, #4]
 800760c:	bf08      	it	eq
 800760e:	4614      	moveq	r4, r2
 8007610:	e7c1      	b.n	8007596 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x22>
 8007612:	bf00      	nop
 8007614:	2000002c 	.word	0x2000002c

08007618 <SPI_WaitFifoStateUntilTimeout.constprop.0>:
  * @param  State Fifo state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8007618:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800761c:	461c      	mov	r4, r3
{
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800761e:	2300      	movs	r3, #0
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8007620:	4617      	mov	r7, r2
  __IO uint8_t  tmpreg8 = 0;
 8007622:	f88d 3003 	strb.w	r3, [sp, #3]
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8007626:	4605      	mov	r5, r0
 8007628:	460e      	mov	r6, r1

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800762a:	f7fe fa4d 	bl	8005ac8 <HAL_GetTick>
 800762e:	443c      	add	r4, r7
 8007630:	1a24      	subs	r4, r4, r0
  tmp_tickstart = HAL_GetTick();
 8007632:	f7fe fa49 	bl	8005ac8 <HAL_GetTick>

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8007636:	4b29      	ldr	r3, [pc, #164]	@ (80076dc <SPI_WaitFifoStateUntilTimeout.constprop.0+0xc4>)
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8007638:	f8d5 9000 	ldr.w	r9, [r5]
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	2223      	movs	r2, #35	@ 0x23
 8007640:	4353      	muls	r3, r2
 8007642:	0d1b      	lsrs	r3, r3, #20
 8007644:	4363      	muls	r3, r4
  tmp_tickstart = HAL_GetTick();
 8007646:	4680      	mov	r8, r0
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8007648:	9301      	str	r3, [sp, #4]

  while ((hspi->Instance->SR & Fifo) != State)
 800764a:	682a      	ldr	r2, [r5, #0]
 800764c:	6890      	ldr	r0, [r2, #8]
 800764e:	4030      	ands	r0, r6
 8007650:	d038      	beq.n	80076c4 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xac>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8007652:	f5b6 6fc0 	cmp.w	r6, #1536	@ 0x600
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8007656:	bf01      	itttt	eq
 8007658:	f899 300c 	ldrbeq.w	r3, [r9, #12]
 800765c:	b2db      	uxtbeq	r3, r3
 800765e:	f88d 3003 	strbeq.w	r3, [sp, #3]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8007662:	f89d 3003 	ldrbeq.w	r3, [sp, #3]
    }

    if (Timeout != HAL_MAX_DELAY)
 8007666:	1c7b      	adds	r3, r7, #1
 8007668:	d0f0      	beq.n	800764c <SPI_WaitFifoStateUntilTimeout.constprop.0+0x34>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800766a:	f7fe fa2d 	bl	8005ac8 <HAL_GetTick>
 800766e:	eba0 0008 	sub.w	r0, r0, r8
 8007672:	42a0      	cmp	r0, r4
 8007674:	d329      	bcc.n	80076ca <SPI_WaitFifoStateUntilTimeout.constprop.0+0xb2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007676:	682b      	ldr	r3, [r5, #0]
 8007678:	685a      	ldr	r2, [r3, #4]
 800767a:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800767e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007680:	686a      	ldr	r2, [r5, #4]
 8007682:	f5b2 7f82 	cmp.w	r2, #260	@ 0x104
 8007686:	d10a      	bne.n	800769e <SPI_WaitFifoStateUntilTimeout.constprop.0+0x86>
 8007688:	68aa      	ldr	r2, [r5, #8]
 800768a:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
 800768e:	d002      	beq.n	8007696 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x7e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007690:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 8007694:	d103      	bne.n	800769e <SPI_WaitFifoStateUntilTimeout.constprop.0+0x86>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007696:	681a      	ldr	r2, [r3, #0]
 8007698:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800769c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800769e:	6aaa      	ldr	r2, [r5, #40]	@ 0x28
 80076a0:	f5b2 5f00 	cmp.w	r2, #8192	@ 0x2000
 80076a4:	d107      	bne.n	80076b6 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x9e>
        {
          SPI_RESET_CRC(hspi);
 80076a6:	681a      	ldr	r2, [r3, #0]
 80076a8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80076ac:	601a      	str	r2, [r3, #0]
 80076ae:	681a      	ldr	r2, [r3, #0]
 80076b0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80076b4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80076b6:	2301      	movs	r3, #1
 80076b8:	f885 305d 	strb.w	r3, [r5, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80076bc:	2300      	movs	r3, #0
 80076be:	f885 305c 	strb.w	r3, [r5, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80076c2:	2003      	movs	r0, #3
      count--;
    }
  }

  return HAL_OK;
}
 80076c4:	b003      	add	sp, #12
 80076c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      if (count == 0U)
 80076ca:	9a01      	ldr	r2, [sp, #4]
      count--;
 80076cc:	9b01      	ldr	r3, [sp, #4]
      if (count == 0U)
 80076ce:	2a00      	cmp	r2, #0
      count--;
 80076d0:	f103 33ff 	add.w	r3, r3, #4294967295
 80076d4:	9301      	str	r3, [sp, #4]
 80076d6:	bf08      	it	eq
 80076d8:	4614      	moveq	r4, r2
 80076da:	e7b6      	b.n	800764a <SPI_WaitFifoStateUntilTimeout.constprop.0+0x32>
 80076dc:	2000002c 	.word	0x2000002c

080076e0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80076e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80076e2:	6843      	ldr	r3, [r0, #4]
 80076e4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
{
 80076e8:	4604      	mov	r4, r0
 80076ea:	460e      	mov	r6, r1
 80076ec:	4617      	mov	r7, r2
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80076ee:	d10b      	bne.n	8007708 <SPI_EndRxTransaction+0x28>
 80076f0:	6883      	ldr	r3, [r0, #8]
 80076f2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80076f6:	d002      	beq.n	80076fe <SPI_EndRxTransaction+0x1e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80076f8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80076fc:	d104      	bne.n	8007708 <SPI_EndRxTransaction+0x28>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80076fe:	6822      	ldr	r2, [r4, #0]
 8007700:	6813      	ldr	r3, [r2, #0]
 8007702:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007706:	6013      	str	r3, [r2, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007708:	463a      	mov	r2, r7
 800770a:	4631      	mov	r1, r6
 800770c:	4620      	mov	r0, r4
 800770e:	f7ff ff31 	bl	8007574 <SPI_WaitFlagStateUntilTimeout.constprop.0>
 8007712:	4605      	mov	r5, r0
 8007714:	b128      	cbz	r0, 8007722 <SPI_EndRxTransaction+0x42>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007716:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8007718:	f043 0320 	orr.w	r3, r3, #32
 800771c:	6623      	str	r3, [r4, #96]	@ 0x60
    return HAL_TIMEOUT;
 800771e:	2503      	movs	r5, #3
 8007720:	e013      	b.n	800774a <SPI_EndRxTransaction+0x6a>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007722:	6863      	ldr	r3, [r4, #4]
 8007724:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007728:	d10f      	bne.n	800774a <SPI_EndRxTransaction+0x6a>
 800772a:	68a3      	ldr	r3, [r4, #8]
 800772c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007730:	d002      	beq.n	8007738 <SPI_EndRxTransaction+0x58>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007732:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007736:	d108      	bne.n	800774a <SPI_EndRxTransaction+0x6a>
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007738:	463b      	mov	r3, r7
 800773a:	4632      	mov	r2, r6
 800773c:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8007740:	4620      	mov	r0, r4
 8007742:	f7ff ff69 	bl	8007618 <SPI_WaitFifoStateUntilTimeout.constprop.0>
 8007746:	2800      	cmp	r0, #0
 8007748:	d1e5      	bne.n	8007716 <SPI_EndRxTransaction+0x36>
      return HAL_TIMEOUT;
    }
  }
  return HAL_OK;
}
 800774a:	4628      	mov	r0, r5
 800774c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800774e <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800774e:	b570      	push	{r4, r5, r6, lr}
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007750:	4613      	mov	r3, r2
{
 8007752:	460d      	mov	r5, r1
 8007754:	4616      	mov	r6, r2
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007756:	460a      	mov	r2, r1
 8007758:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
{
 800775c:	4604      	mov	r4, r0
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800775e:	f7ff ff5b 	bl	8007618 <SPI_WaitFifoStateUntilTimeout.constprop.0>
 8007762:	b128      	cbz	r0, 8007770 <SPI_EndRxTxTransaction+0x22>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007764:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8007766:	f043 0320 	orr.w	r3, r3, #32
 800776a:	6623      	str	r3, [r4, #96]	@ 0x60
    return HAL_TIMEOUT;
 800776c:	2003      	movs	r0, #3
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  return HAL_OK;
}
 800776e:	bd70      	pop	{r4, r5, r6, pc}
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007770:	4632      	mov	r2, r6
 8007772:	4629      	mov	r1, r5
 8007774:	4620      	mov	r0, r4
 8007776:	f7ff fefd 	bl	8007574 <SPI_WaitFlagStateUntilTimeout.constprop.0>
 800777a:	2800      	cmp	r0, #0
 800777c:	d1f2      	bne.n	8007764 <SPI_EndRxTxTransaction+0x16>
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800777e:	4633      	mov	r3, r6
 8007780:	462a      	mov	r2, r5
 8007782:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8007786:	4620      	mov	r0, r4
 8007788:	f7ff ff46 	bl	8007618 <SPI_WaitFifoStateUntilTimeout.constprop.0>
 800778c:	2800      	cmp	r0, #0
 800778e:	d0ee      	beq.n	800776e <SPI_EndRxTxTransaction+0x20>
 8007790:	e7e8      	b.n	8007764 <SPI_EndRxTxTransaction+0x16>

08007792 <HAL_SPI_Init>:
{
 8007792:	b570      	push	{r4, r5, r6, lr}
  if (hspi == NULL)
 8007794:	4604      	mov	r4, r0
 8007796:	2800      	cmp	r0, #0
 8007798:	d067      	beq.n	800786a <HAL_SPI_Init+0xd8>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800779a:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800779c:	2b00      	cmp	r3, #0
 800779e:	d15d      	bne.n	800785c <HAL_SPI_Init+0xca>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80077a0:	6842      	ldr	r2, [r0, #4]
 80077a2:	f5b2 7f82 	cmp.w	r2, #260	@ 0x104
 80077a6:	d000      	beq.n	80077aa <HAL_SPI_Init+0x18>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80077a8:	61c3      	str	r3, [r0, #28]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80077aa:	2300      	movs	r3, #0
 80077ac:	62a3      	str	r3, [r4, #40]	@ 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 80077ae:	f894 305d 	ldrb.w	r3, [r4, #93]	@ 0x5d
 80077b2:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 80077b6:	b923      	cbnz	r3, 80077c2 <HAL_SPI_Init+0x30>
    hspi->Lock = HAL_UNLOCKED;
 80077b8:	f884 205c 	strb.w	r2, [r4, #92]	@ 0x5c
    HAL_SPI_MspInit(hspi);
 80077bc:	4620      	mov	r0, r4
 80077be:	f7fd fe5d 	bl	800547c <HAL_SPI_MspInit>
  __HAL_SPI_DISABLE(hspi);
 80077c2:	6822      	ldr	r2, [r4, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80077c4:	68e0      	ldr	r0, [r4, #12]
  hspi->State = HAL_SPI_STATE_BUSY;
 80077c6:	2302      	movs	r3, #2
 80077c8:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
  __HAL_SPI_DISABLE(hspi);
 80077cc:	6813      	ldr	r3, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80077ce:	f5b0 6fe0 	cmp.w	r0, #1792	@ 0x700
  __HAL_SPI_DISABLE(hspi);
 80077d2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80077d6:	6013      	str	r3, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80077d8:	f04f 0300 	mov.w	r3, #0
 80077dc:	d942      	bls.n	8007864 <HAL_SPI_Init+0xd2>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80077de:	461d      	mov	r5, r3
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80077e0:	f5b0 6f70 	cmp.w	r0, #3840	@ 0xf00
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80077e4:	bf18      	it	ne
 80077e6:	62a3      	strne	r3, [r4, #40]	@ 0x28
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80077e8:	68a6      	ldr	r6, [r4, #8]
 80077ea:	6863      	ldr	r3, [r4, #4]
 80077ec:	69a1      	ldr	r1, [r4, #24]
 80077ee:	f406 4604 	and.w	r6, r6, #33792	@ 0x8400
 80077f2:	f403 7382 	and.w	r3, r3, #260	@ 0x104
 80077f6:	4333      	orrs	r3, r6
 80077f8:	6926      	ldr	r6, [r4, #16]
 80077fa:	f006 0602 	and.w	r6, r6, #2
 80077fe:	4333      	orrs	r3, r6
 8007800:	6966      	ldr	r6, [r4, #20]
 8007802:	f006 0601 	and.w	r6, r6, #1
 8007806:	4333      	orrs	r3, r6
 8007808:	f401 7600 	and.w	r6, r1, #512	@ 0x200
 800780c:	4333      	orrs	r3, r6
 800780e:	69e6      	ldr	r6, [r4, #28]
 8007810:	f006 0638 	and.w	r6, r6, #56	@ 0x38
 8007814:	4333      	orrs	r3, r6
 8007816:	6a26      	ldr	r6, [r4, #32]
 8007818:	f006 0680 	and.w	r6, r6, #128	@ 0x80
 800781c:	4333      	orrs	r3, r6
 800781e:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8007820:	f406 5600 	and.w	r6, r6, #8192	@ 0x2000
 8007824:	4333      	orrs	r3, r6
 8007826:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007828:	6b66      	ldr	r6, [r4, #52]	@ 0x34
 800782a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800782c:	f006 0608 	and.w	r6, r6, #8
 8007830:	f003 0310 	and.w	r3, r3, #16
 8007834:	f400 6070 	and.w	r0, r0, #3840	@ 0xf00
 8007838:	4333      	orrs	r3, r6
 800783a:	0c09      	lsrs	r1, r1, #16
 800783c:	4303      	orrs	r3, r0
 800783e:	f001 0104 	and.w	r1, r1, #4
 8007842:	430b      	orrs	r3, r1
 8007844:	432b      	orrs	r3, r5
 8007846:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007848:	69d3      	ldr	r3, [r2, #28]
 800784a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800784e:	61d3      	str	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007850:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 8007852:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007854:	6620      	str	r0, [r4, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007856:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
}
 800785a:	bd70      	pop	{r4, r5, r6, pc}
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800785c:	2300      	movs	r3, #0
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800785e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007862:	e7a2      	b.n	80077aa <HAL_SPI_Init+0x18>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8007864:	f44f 5580 	mov.w	r5, #4096	@ 0x1000
 8007868:	e7bc      	b.n	80077e4 <HAL_SPI_Init+0x52>
    return HAL_ERROR;
 800786a:	2001      	movs	r0, #1
 800786c:	e7f5      	b.n	800785a <HAL_SPI_Init+0xc8>

0800786e <HAL_SPI_Transmit>:
{
 800786e:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8007872:	461f      	mov	r7, r3
  __HAL_LOCK(hspi);
 8007874:	f890 305c 	ldrb.w	r3, [r0, #92]	@ 0x5c
 8007878:	2b01      	cmp	r3, #1
{
 800787a:	4604      	mov	r4, r0
 800787c:	460d      	mov	r5, r1
 800787e:	4690      	mov	r8, r2
  __HAL_LOCK(hspi);
 8007880:	f000 80bc 	beq.w	80079fc <HAL_SPI_Transmit+0x18e>
 8007884:	2301      	movs	r3, #1
 8007886:	f880 305c 	strb.w	r3, [r0, #92]	@ 0x5c
  tickstart = HAL_GetTick();
 800788a:	f7fe f91d 	bl	8005ac8 <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 800788e:	f894 305d 	ldrb.w	r3, [r4, #93]	@ 0x5d
 8007892:	2b01      	cmp	r3, #1
  tickstart = HAL_GetTick();
 8007894:	4682      	mov	sl, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8007896:	fa5f f983 	uxtb.w	r9, r3
 800789a:	f040 80ac 	bne.w	80079f6 <HAL_SPI_Transmit+0x188>
  if ((pData == NULL) || (Size == 0U))
 800789e:	2d00      	cmp	r5, #0
 80078a0:	d069      	beq.n	8007976 <HAL_SPI_Transmit+0x108>
 80078a2:	f1b8 0f00 	cmp.w	r8, #0
 80078a6:	d066      	beq.n	8007976 <HAL_SPI_Transmit+0x108>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80078a8:	2303      	movs	r3, #3
 80078aa:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80078ae:	2300      	movs	r3, #0
 80078b0:	6623      	str	r3, [r4, #96]	@ 0x60
  hspi->RxISR       = NULL;
 80078b2:	e9c4 3313 	strd	r3, r3, [r4, #76]	@ 0x4c
  hspi->TxXferCount = Size;
 80078b6:	f8a4 803e 	strh.w	r8, [r4, #62]	@ 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80078ba:	6423      	str	r3, [r4, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 80078bc:	f8a4 3044 	strh.w	r3, [r4, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 80078c0:	f8a4 3046 	strh.w	r3, [r4, #70]	@ 0x46
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80078c4:	68a3      	ldr	r3, [r4, #8]
    __HAL_SPI_DISABLE(hspi);
 80078c6:	6826      	ldr	r6, [r4, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80078c8:	63a5      	str	r5, [r4, #56]	@ 0x38
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80078ca:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
  hspi->TxXferSize  = Size;
 80078ce:	f8a4 803c 	strh.w	r8, [r4, #60]	@ 0x3c
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80078d2:	d107      	bne.n	80078e4 <HAL_SPI_Transmit+0x76>
    __HAL_SPI_DISABLE(hspi);
 80078d4:	6833      	ldr	r3, [r6, #0]
 80078d6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80078da:	6033      	str	r3, [r6, #0]
    SPI_1LINE_TX(hspi);
 80078dc:	6833      	ldr	r3, [r6, #0]
 80078de:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80078e2:	6033      	str	r3, [r6, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80078e4:	6833      	ldr	r3, [r6, #0]
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80078e6:	6862      	ldr	r2, [r4, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80078e8:	065b      	lsls	r3, r3, #25
    __HAL_SPI_ENABLE(hspi);
 80078ea:	bf5e      	ittt	pl
 80078ec:	6833      	ldrpl	r3, [r6, #0]
 80078ee:	f043 0340 	orrpl.w	r3, r3, #64	@ 0x40
 80078f2:	6033      	strpl	r3, [r6, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80078f4:	68e3      	ldr	r3, [r4, #12]
 80078f6:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80078fa:	d943      	bls.n	8007984 <HAL_SPI_Transmit+0x116>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80078fc:	b112      	cbz	r2, 8007904 <HAL_SPI_Transmit+0x96>
 80078fe:	f1b8 0f01 	cmp.w	r8, #1
 8007902:	d107      	bne.n	8007914 <HAL_SPI_Transmit+0xa6>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007904:	f835 3b02 	ldrh.w	r3, [r5], #2
 8007908:	60f3      	str	r3, [r6, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800790a:	63a5      	str	r5, [r4, #56]	@ 0x38
        hspi->TxXferCount--;
 800790c:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 800790e:	3b01      	subs	r3, #1
 8007910:	b29b      	uxth	r3, r3
 8007912:	87e3      	strh	r3, [r4, #62]	@ 0x3e
    while (hspi->TxXferCount > 0U)
 8007914:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8007916:	b29b      	uxth	r3, r3
 8007918:	b9b3      	cbnz	r3, 8007948 <HAL_SPI_Transmit+0xda>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800791a:	4652      	mov	r2, sl
 800791c:	4639      	mov	r1, r7
 800791e:	4620      	mov	r0, r4
 8007920:	f7ff ff15 	bl	800774e <SPI_EndRxTxTransaction>
 8007924:	2800      	cmp	r0, #0
 8007926:	d163      	bne.n	80079f0 <HAL_SPI_Transmit+0x182>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007928:	68a3      	ldr	r3, [r4, #8]
 800792a:	b933      	cbnz	r3, 800793a <HAL_SPI_Transmit+0xcc>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800792c:	9301      	str	r3, [sp, #4]
 800792e:	6823      	ldr	r3, [r4, #0]
 8007930:	68da      	ldr	r2, [r3, #12]
 8007932:	9201      	str	r2, [sp, #4]
 8007934:	689b      	ldr	r3, [r3, #8]
 8007936:	9301      	str	r3, [sp, #4]
 8007938:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800793a:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 800793c:	b9db      	cbnz	r3, 8007976 <HAL_SPI_Transmit+0x108>
    hspi->State = HAL_SPI_STATE_READY;
 800793e:	2201      	movs	r2, #1
 8007940:	f884 205d 	strb.w	r2, [r4, #93]	@ 0x5d
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007944:	4699      	mov	r9, r3
 8007946:	e016      	b.n	8007976 <HAL_SPI_Transmit+0x108>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007948:	6822      	ldr	r2, [r4, #0]
 800794a:	6893      	ldr	r3, [r2, #8]
 800794c:	079d      	lsls	r5, r3, #30
 800794e:	d505      	bpl.n	800795c <HAL_SPI_Transmit+0xee>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007950:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8007952:	f833 1b02 	ldrh.w	r1, [r3], #2
 8007956:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007958:	63a3      	str	r3, [r4, #56]	@ 0x38
 800795a:	e7d7      	b.n	800790c <HAL_SPI_Transmit+0x9e>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800795c:	f7fe f8b4 	bl	8005ac8 <HAL_GetTick>
 8007960:	eba0 000a 	sub.w	r0, r0, sl
 8007964:	42b8      	cmp	r0, r7
 8007966:	d3d5      	bcc.n	8007914 <HAL_SPI_Transmit+0xa6>
 8007968:	1c78      	adds	r0, r7, #1
 800796a:	d0d3      	beq.n	8007914 <HAL_SPI_Transmit+0xa6>
          hspi->State = HAL_SPI_STATE_READY;
 800796c:	2301      	movs	r3, #1
 800796e:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
          errorcode = HAL_TIMEOUT;
 8007972:	f04f 0903 	mov.w	r9, #3
  __HAL_UNLOCK(hspi);
 8007976:	2300      	movs	r3, #0
 8007978:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
}
 800797c:	4648      	mov	r0, r9
 800797e:	b002      	add	sp, #8
 8007980:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007984:	b112      	cbz	r2, 800798c <HAL_SPI_Transmit+0x11e>
 8007986:	f1b8 0f01 	cmp.w	r8, #1
 800798a:	d113      	bne.n	80079b4 <HAL_SPI_Transmit+0x146>
      if (hspi->TxXferCount > 1U)
 800798c:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 800798e:	b29b      	uxth	r3, r3
 8007990:	2b01      	cmp	r3, #1
 8007992:	d906      	bls.n	80079a2 <HAL_SPI_Transmit+0x134>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007994:	f835 3b02 	ldrh.w	r3, [r5], #2
 8007998:	60f3      	str	r3, [r6, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800799a:	63a5      	str	r5, [r4, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800799c:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 800799e:	3b02      	subs	r3, #2
 80079a0:	e006      	b.n	80079b0 <HAL_SPI_Transmit+0x142>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80079a2:	782b      	ldrb	r3, [r5, #0]
 80079a4:	7333      	strb	r3, [r6, #12]
        hspi->pTxBuffPtr ++;
 80079a6:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80079a8:	3301      	adds	r3, #1
 80079aa:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->TxXferCount--;
 80079ac:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80079ae:	3b01      	subs	r3, #1
 80079b0:	b29b      	uxth	r3, r3
 80079b2:	87e3      	strh	r3, [r4, #62]	@ 0x3e
    while (hspi->TxXferCount > 0U)
 80079b4:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80079b6:	b29b      	uxth	r3, r3
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d0ae      	beq.n	800791a <HAL_SPI_Transmit+0xac>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80079bc:	6822      	ldr	r2, [r4, #0]
 80079be:	6893      	ldr	r3, [r2, #8]
 80079c0:	0799      	lsls	r1, r3, #30
 80079c2:	d50c      	bpl.n	80079de <HAL_SPI_Transmit+0x170>
        if (hspi->TxXferCount > 1U)
 80079c4:	8fe1      	ldrh	r1, [r4, #62]	@ 0x3e
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80079c6:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
        if (hspi->TxXferCount > 1U)
 80079c8:	b289      	uxth	r1, r1
 80079ca:	2901      	cmp	r1, #1
 80079cc:	d904      	bls.n	80079d8 <HAL_SPI_Transmit+0x16a>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80079ce:	f833 1b02 	ldrh.w	r1, [r3], #2
 80079d2:	60d1      	str	r1, [r2, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80079d4:	63a3      	str	r3, [r4, #56]	@ 0x38
 80079d6:	e7e1      	b.n	800799c <HAL_SPI_Transmit+0x12e>
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80079d8:	781b      	ldrb	r3, [r3, #0]
 80079da:	7313      	strb	r3, [r2, #12]
          hspi->pTxBuffPtr++;
 80079dc:	e7e3      	b.n	80079a6 <HAL_SPI_Transmit+0x138>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80079de:	f7fe f873 	bl	8005ac8 <HAL_GetTick>
 80079e2:	eba0 000a 	sub.w	r0, r0, sl
 80079e6:	42b8      	cmp	r0, r7
 80079e8:	d3e4      	bcc.n	80079b4 <HAL_SPI_Transmit+0x146>
 80079ea:	1c7b      	adds	r3, r7, #1
 80079ec:	d0e2      	beq.n	80079b4 <HAL_SPI_Transmit+0x146>
 80079ee:	e7bd      	b.n	800796c <HAL_SPI_Transmit+0xfe>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80079f0:	2320      	movs	r3, #32
 80079f2:	6623      	str	r3, [r4, #96]	@ 0x60
 80079f4:	e798      	b.n	8007928 <HAL_SPI_Transmit+0xba>
    errorcode = HAL_BUSY;
 80079f6:	f04f 0902 	mov.w	r9, #2
 80079fa:	e7bc      	b.n	8007976 <HAL_SPI_Transmit+0x108>
  __HAL_LOCK(hspi);
 80079fc:	f04f 0902 	mov.w	r9, #2
 8007a00:	e7bc      	b.n	800797c <HAL_SPI_Transmit+0x10e>

08007a02 <HAL_SPI_TransmitReceive>:
{
 8007a02:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007a06:	461e      	mov	r6, r3
  __HAL_LOCK(hspi);
 8007a08:	f890 305c 	ldrb.w	r3, [r0, #92]	@ 0x5c
{
 8007a0c:	9f08      	ldr	r7, [sp, #32]
  __HAL_LOCK(hspi);
 8007a0e:	2b01      	cmp	r3, #1
{
 8007a10:	4604      	mov	r4, r0
 8007a12:	460d      	mov	r5, r1
 8007a14:	4691      	mov	r9, r2
  __HAL_LOCK(hspi);
 8007a16:	f000 8122 	beq.w	8007c5e <HAL_SPI_TransmitReceive+0x25c>
 8007a1a:	2301      	movs	r3, #1
 8007a1c:	f880 305c 	strb.w	r3, [r0, #92]	@ 0x5c
  tickstart = HAL_GetTick();
 8007a20:	f7fe f852 	bl	8005ac8 <HAL_GetTick>
  tmp_state           = hspi->State;
 8007a24:	f894 205d 	ldrb.w	r2, [r4, #93]	@ 0x5d
  tmp_mode            = hspi->Init.Mode;
 8007a28:	6863      	ldr	r3, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007a2a:	2a01      	cmp	r2, #1
  tickstart = HAL_GetTick();
 8007a2c:	4680      	mov	r8, r0
  tmp_state           = hspi->State;
 8007a2e:	b2d1      	uxtb	r1, r2
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007a30:	d00a      	beq.n	8007a48 <HAL_SPI_TransmitReceive+0x46>
 8007a32:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007a36:	f040 8110 	bne.w	8007c5a <HAL_SPI_TransmitReceive+0x258>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007a3a:	68a2      	ldr	r2, [r4, #8]
 8007a3c:	2a00      	cmp	r2, #0
 8007a3e:	f040 810c 	bne.w	8007c5a <HAL_SPI_TransmitReceive+0x258>
 8007a42:	2904      	cmp	r1, #4
 8007a44:	f040 8109 	bne.w	8007c5a <HAL_SPI_TransmitReceive+0x258>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007a48:	b92d      	cbnz	r5, 8007a56 <HAL_SPI_TransmitReceive+0x54>
    errorcode = HAL_ERROR;
 8007a4a:	2001      	movs	r0, #1
  __HAL_UNLOCK(hspi);
 8007a4c:	2300      	movs	r3, #0
 8007a4e:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
}
 8007a52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007a56:	f1b9 0f00 	cmp.w	r9, #0
 8007a5a:	d0f6      	beq.n	8007a4a <HAL_SPI_TransmitReceive+0x48>
 8007a5c:	2e00      	cmp	r6, #0
 8007a5e:	d0f4      	beq.n	8007a4a <HAL_SPI_TransmitReceive+0x48>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007a60:	f894 205d 	ldrb.w	r2, [r4, #93]	@ 0x5d
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8007a64:	68e0      	ldr	r0, [r4, #12]
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007a66:	6821      	ldr	r1, [r4, #0]
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007a68:	f8c4 9040 	str.w	r9, [r4, #64]	@ 0x40
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007a6c:	2a04      	cmp	r2, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007a6e:	bf1c      	itt	ne
 8007a70:	2205      	movne	r2, #5
 8007a72:	f884 205d 	strbne.w	r2, [r4, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007a76:	2200      	movs	r2, #0
 8007a78:	6622      	str	r2, [r4, #96]	@ 0x60
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8007a7a:	f5b0 6fe0 	cmp.w	r0, #1792	@ 0x700
  hspi->RxXferCount = Size;
 8007a7e:	f8a4 6046 	strh.w	r6, [r4, #70]	@ 0x46
  hspi->TxXferCount = Size;
 8007a82:	87e6      	strh	r6, [r4, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8007a84:	e9c4 2213 	strd	r2, r2, [r4, #76]	@ 0x4c
  hspi->RxXferSize  = Size;
 8007a88:	f8a4 6044 	strh.w	r6, [r4, #68]	@ 0x44
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007a8c:	684a      	ldr	r2, [r1, #4]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007a8e:	63a5      	str	r5, [r4, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8007a90:	87a6      	strh	r6, [r4, #60]	@ 0x3c
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8007a92:	d801      	bhi.n	8007a98 <HAL_SPI_TransmitReceive+0x96>
 8007a94:	2e01      	cmp	r6, #1
 8007a96:	d02e      	beq.n	8007af6 <HAL_SPI_TransmitReceive+0xf4>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007a98:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007a9c:	604a      	str	r2, [r1, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007a9e:	680a      	ldr	r2, [r1, #0]
 8007aa0:	0652      	lsls	r2, r2, #25
    __HAL_SPI_ENABLE(hspi);
 8007aa2:	bf5e      	ittt	pl
 8007aa4:	680a      	ldrpl	r2, [r1, #0]
 8007aa6:	f042 0240 	orrpl.w	r2, r2, #64	@ 0x40
 8007aaa:	600a      	strpl	r2, [r1, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007aac:	f5b0 6fe0 	cmp.w	r0, #1792	@ 0x700
 8007ab0:	d957      	bls.n	8007b62 <HAL_SPI_TransmitReceive+0x160>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007ab2:	b10b      	cbz	r3, 8007ab8 <HAL_SPI_TransmitReceive+0xb6>
 8007ab4:	2e01      	cmp	r6, #1
 8007ab6:	d107      	bne.n	8007ac8 <HAL_SPI_TransmitReceive+0xc6>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007ab8:	f835 3b02 	ldrh.w	r3, [r5], #2
 8007abc:	60cb      	str	r3, [r1, #12]
      hspi->TxXferCount--;
 8007abe:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007ac0:	63a5      	str	r5, [r4, #56]	@ 0x38
      hspi->TxXferCount--;
 8007ac2:	3b01      	subs	r3, #1
 8007ac4:	b29b      	uxth	r3, r3
 8007ac6:	87e3      	strh	r3, [r4, #62]	@ 0x3e
        txallowed = 1U;
 8007ac8:	2501      	movs	r5, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007aca:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8007acc:	b29b      	uxth	r3, r3
 8007ace:	b9ab      	cbnz	r3, 8007afc <HAL_SPI_TransmitReceive+0xfa>
 8007ad0:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 8007ad4:	b29b      	uxth	r3, r3
 8007ad6:	b98b      	cbnz	r3, 8007afc <HAL_SPI_TransmitReceive+0xfa>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007ad8:	4642      	mov	r2, r8
 8007ada:	4639      	mov	r1, r7
 8007adc:	4620      	mov	r0, r4
 8007ade:	f7ff fe36 	bl	800774e <SPI_EndRxTxTransaction>
 8007ae2:	2800      	cmp	r0, #0
 8007ae4:	f040 80b5 	bne.w	8007c52 <HAL_SPI_TransmitReceive+0x250>
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007ae8:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d1ad      	bne.n	8007a4a <HAL_SPI_TransmitReceive+0x48>
    hspi->State = HAL_SPI_STATE_READY;
 8007aee:	2301      	movs	r3, #1
 8007af0:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
 8007af4:	e7aa      	b.n	8007a4c <HAL_SPI_TransmitReceive+0x4a>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007af6:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8007afa:	e7cf      	b.n	8007a9c <HAL_SPI_TransmitReceive+0x9a>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007afc:	6821      	ldr	r1, [r4, #0]
 8007afe:	688b      	ldr	r3, [r1, #8]
 8007b00:	079e      	lsls	r6, r3, #30
 8007b02:	d50d      	bpl.n	8007b20 <HAL_SPI_TransmitReceive+0x11e>
 8007b04:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8007b06:	b29b      	uxth	r3, r3
 8007b08:	b153      	cbz	r3, 8007b20 <HAL_SPI_TransmitReceive+0x11e>
 8007b0a:	b145      	cbz	r5, 8007b1e <HAL_SPI_TransmitReceive+0x11c>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007b0c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8007b0e:	f833 2b02 	ldrh.w	r2, [r3], #2
 8007b12:	60ca      	str	r2, [r1, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007b14:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->TxXferCount--;
 8007b16:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8007b18:	3b01      	subs	r3, #1
 8007b1a:	b29b      	uxth	r3, r3
 8007b1c:	87e3      	strh	r3, [r4, #62]	@ 0x3e
        txallowed = 0U;
 8007b1e:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007b20:	688a      	ldr	r2, [r1, #8]
 8007b22:	f012 0201 	ands.w	r2, r2, #1
 8007b26:	d00f      	beq.n	8007b48 <HAL_SPI_TransmitReceive+0x146>
 8007b28:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 8007b2c:	b29b      	uxth	r3, r3
 8007b2e:	b15b      	cbz	r3, 8007b48 <HAL_SPI_TransmitReceive+0x146>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007b30:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007b32:	68c9      	ldr	r1, [r1, #12]
 8007b34:	f823 1b02 	strh.w	r1, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007b38:	6423      	str	r3, [r4, #64]	@ 0x40
        hspi->RxXferCount--;
 8007b3a:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 8007b3e:	3b01      	subs	r3, #1
 8007b40:	b29b      	uxth	r3, r3
 8007b42:	f8a4 3046 	strh.w	r3, [r4, #70]	@ 0x46
        txallowed = 1U;
 8007b46:	4615      	mov	r5, r2
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007b48:	f7fd ffbe 	bl	8005ac8 <HAL_GetTick>
 8007b4c:	eba0 0008 	sub.w	r0, r0, r8
 8007b50:	42b8      	cmp	r0, r7
 8007b52:	d3ba      	bcc.n	8007aca <HAL_SPI_TransmitReceive+0xc8>
 8007b54:	1c78      	adds	r0, r7, #1
 8007b56:	d0b8      	beq.n	8007aca <HAL_SPI_TransmitReceive+0xc8>
        hspi->State = HAL_SPI_STATE_READY;
 8007b58:	2301      	movs	r3, #1
 8007b5a:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
        errorcode = HAL_TIMEOUT;
 8007b5e:	2003      	movs	r0, #3
 8007b60:	e774      	b.n	8007a4c <HAL_SPI_TransmitReceive+0x4a>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007b62:	b10b      	cbz	r3, 8007b68 <HAL_SPI_TransmitReceive+0x166>
 8007b64:	2e01      	cmp	r6, #1
 8007b66:	d10b      	bne.n	8007b80 <HAL_SPI_TransmitReceive+0x17e>
      if (hspi->TxXferCount > 1U)
 8007b68:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8007b6a:	b29b      	uxth	r3, r3
 8007b6c:	2b01      	cmp	r3, #1
 8007b6e:	d909      	bls.n	8007b84 <HAL_SPI_TransmitReceive+0x182>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007b70:	f835 3b02 	ldrh.w	r3, [r5], #2
 8007b74:	60cb      	str	r3, [r1, #12]
        hspi->TxXferCount -= 2U;
 8007b76:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007b78:	63a5      	str	r5, [r4, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8007b7a:	3b02      	subs	r3, #2
        hspi->TxXferCount--;
 8007b7c:	b29b      	uxth	r3, r3
 8007b7e:	87e3      	strh	r3, [r4, #62]	@ 0x3e
        txallowed = 1U;
 8007b80:	2501      	movs	r5, #1
 8007b82:	e048      	b.n	8007c16 <HAL_SPI_TransmitReceive+0x214>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007b84:	782b      	ldrb	r3, [r5, #0]
 8007b86:	730b      	strb	r3, [r1, #12]
        hspi->pTxBuffPtr++;
 8007b88:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8007b8a:	3301      	adds	r3, #1
 8007b8c:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->TxXferCount--;
 8007b8e:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8007b90:	3b01      	subs	r3, #1
 8007b92:	e7f3      	b.n	8007b7c <HAL_SPI_TransmitReceive+0x17a>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007b94:	6822      	ldr	r2, [r4, #0]
 8007b96:	6893      	ldr	r3, [r2, #8]
 8007b98:	0799      	lsls	r1, r3, #30
 8007b9a:	d511      	bpl.n	8007bc0 <HAL_SPI_TransmitReceive+0x1be>
 8007b9c:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8007b9e:	b29b      	uxth	r3, r3
 8007ba0:	b173      	cbz	r3, 8007bc0 <HAL_SPI_TransmitReceive+0x1be>
 8007ba2:	b165      	cbz	r5, 8007bbe <HAL_SPI_TransmitReceive+0x1bc>
        if (hspi->TxXferCount > 1U)
 8007ba4:	8fe1      	ldrh	r1, [r4, #62]	@ 0x3e
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007ba6:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
        if (hspi->TxXferCount > 1U)
 8007ba8:	b289      	uxth	r1, r1
 8007baa:	2901      	cmp	r1, #1
 8007bac:	d93d      	bls.n	8007c2a <HAL_SPI_TransmitReceive+0x228>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007bae:	f833 1b02 	ldrh.w	r1, [r3], #2
 8007bb2:	60d1      	str	r1, [r2, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007bb4:	63a3      	str	r3, [r4, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8007bb6:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8007bb8:	3b02      	subs	r3, #2
 8007bba:	b29b      	uxth	r3, r3
 8007bbc:	87e3      	strh	r3, [r4, #62]	@ 0x3e
        txallowed = 0U;
 8007bbe:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007bc0:	6822      	ldr	r2, [r4, #0]
 8007bc2:	6891      	ldr	r1, [r2, #8]
 8007bc4:	f011 0101 	ands.w	r1, r1, #1
 8007bc8:	d01d      	beq.n	8007c06 <HAL_SPI_TransmitReceive+0x204>
 8007bca:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 8007bce:	b29b      	uxth	r3, r3
 8007bd0:	b1cb      	cbz	r3, 8007c06 <HAL_SPI_TransmitReceive+0x204>
        if (hspi->RxXferCount > 1U)
 8007bd2:	f8b4 0046 	ldrh.w	r0, [r4, #70]	@ 0x46
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007bd6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
        if (hspi->RxXferCount > 1U)
 8007bd8:	b280      	uxth	r0, r0
 8007bda:	2801      	cmp	r0, #1
 8007bdc:	d92d      	bls.n	8007c3a <HAL_SPI_TransmitReceive+0x238>
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007bde:	68d0      	ldr	r0, [r2, #12]
 8007be0:	f823 0b02 	strh.w	r0, [r3], #2
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8007be4:	6423      	str	r3, [r4, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8007be6:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 8007bea:	3b02      	subs	r3, #2
 8007bec:	b29b      	uxth	r3, r3
 8007bee:	f8a4 3046 	strh.w	r3, [r4, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8007bf2:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 8007bf6:	b29b      	uxth	r3, r3
 8007bf8:	2b01      	cmp	r3, #1
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007bfa:	bf9e      	ittt	ls
 8007bfc:	6853      	ldrls	r3, [r2, #4]
 8007bfe:	f443 5380 	orrls.w	r3, r3, #4096	@ 0x1000
 8007c02:	6053      	strls	r3, [r2, #4]
        txallowed = 1U;
 8007c04:	460d      	mov	r5, r1
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007c06:	f7fd ff5f 	bl	8005ac8 <HAL_GetTick>
 8007c0a:	eba0 0008 	sub.w	r0, r0, r8
 8007c0e:	42b8      	cmp	r0, r7
 8007c10:	d301      	bcc.n	8007c16 <HAL_SPI_TransmitReceive+0x214>
 8007c12:	1c7b      	adds	r3, r7, #1
 8007c14:	d1a0      	bne.n	8007b58 <HAL_SPI_TransmitReceive+0x156>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007c16:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8007c18:	b29b      	uxth	r3, r3
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d1ba      	bne.n	8007b94 <HAL_SPI_TransmitReceive+0x192>
 8007c1e:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 8007c22:	b29b      	uxth	r3, r3
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d1b5      	bne.n	8007b94 <HAL_SPI_TransmitReceive+0x192>
 8007c28:	e756      	b.n	8007ad8 <HAL_SPI_TransmitReceive+0xd6>
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007c2a:	781b      	ldrb	r3, [r3, #0]
 8007c2c:	7313      	strb	r3, [r2, #12]
          hspi->pTxBuffPtr++;
 8007c2e:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8007c30:	3301      	adds	r3, #1
 8007c32:	63a3      	str	r3, [r4, #56]	@ 0x38
          hspi->TxXferCount--;
 8007c34:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8007c36:	3b01      	subs	r3, #1
 8007c38:	e7bf      	b.n	8007bba <HAL_SPI_TransmitReceive+0x1b8>
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007c3a:	7b12      	ldrb	r2, [r2, #12]
 8007c3c:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8007c3e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007c40:	3301      	adds	r3, #1
 8007c42:	6423      	str	r3, [r4, #64]	@ 0x40
          hspi->RxXferCount--;
 8007c44:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 8007c48:	3b01      	subs	r3, #1
 8007c4a:	b29b      	uxth	r3, r3
 8007c4c:	f8a4 3046 	strh.w	r3, [r4, #70]	@ 0x46
 8007c50:	e7d8      	b.n	8007c04 <HAL_SPI_TransmitReceive+0x202>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007c52:	2320      	movs	r3, #32
 8007c54:	6623      	str	r3, [r4, #96]	@ 0x60
    errorcode = HAL_ERROR;
 8007c56:	2001      	movs	r0, #1
 8007c58:	e746      	b.n	8007ae8 <HAL_SPI_TransmitReceive+0xe6>
    errorcode = HAL_BUSY;
 8007c5a:	2002      	movs	r0, #2
 8007c5c:	e6f6      	b.n	8007a4c <HAL_SPI_TransmitReceive+0x4a>
  __HAL_LOCK(hspi);
 8007c5e:	2002      	movs	r0, #2
 8007c60:	e6f7      	b.n	8007a52 <HAL_SPI_TransmitReceive+0x50>

08007c62 <HAL_SPI_Receive>:
{
 8007c62:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8007c66:	461f      	mov	r7, r3
  if (hspi->State != HAL_SPI_STATE_READY)
 8007c68:	f890 305d 	ldrb.w	r3, [r0, #93]	@ 0x5d
 8007c6c:	2b01      	cmp	r3, #1
{
 8007c6e:	4604      	mov	r4, r0
 8007c70:	468a      	mov	sl, r1
 8007c72:	4690      	mov	r8, r2
  if (hspi->State != HAL_SPI_STATE_READY)
 8007c74:	b2de      	uxtb	r6, r3
 8007c76:	f040 80a7 	bne.w	8007dc8 <HAL_SPI_Receive+0x166>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8007c7a:	6843      	ldr	r3, [r0, #4]
 8007c7c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007c80:	d10e      	bne.n	8007ca0 <HAL_SPI_Receive+0x3e>
 8007c82:	6883      	ldr	r3, [r0, #8]
 8007c84:	b963      	cbnz	r3, 8007ca0 <HAL_SPI_Receive+0x3e>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8007c86:	2304      	movs	r3, #4
 8007c88:	f880 305d 	strb.w	r3, [r0, #93]	@ 0x5d
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8007c8c:	4613      	mov	r3, r2
 8007c8e:	9700      	str	r7, [sp, #0]
 8007c90:	460a      	mov	r2, r1
 8007c92:	f7ff feb6 	bl	8007a02 <HAL_SPI_TransmitReceive>
 8007c96:	4606      	mov	r6, r0
}
 8007c98:	4630      	mov	r0, r6
 8007c9a:	b002      	add	sp, #8
 8007c9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  __HAL_LOCK(hspi);
 8007ca0:	f894 305c 	ldrb.w	r3, [r4, #92]	@ 0x5c
 8007ca4:	2b01      	cmp	r3, #1
 8007ca6:	f000 8091 	beq.w	8007dcc <HAL_SPI_Receive+0x16a>
 8007caa:	2301      	movs	r3, #1
 8007cac:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
  tickstart = HAL_GetTick();
 8007cb0:	f7fd ff0a 	bl	8005ac8 <HAL_GetTick>
 8007cb4:	4681      	mov	r9, r0
  if ((pData == NULL) || (Size == 0U))
 8007cb6:	f1ba 0f00 	cmp.w	sl, #0
 8007cba:	d075      	beq.n	8007da8 <HAL_SPI_Receive+0x146>
 8007cbc:	f1b8 0f00 	cmp.w	r8, #0
 8007cc0:	d072      	beq.n	8007da8 <HAL_SPI_Receive+0x146>
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007cc2:	2500      	movs	r5, #0
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8007cc4:	2304      	movs	r3, #4
 8007cc6:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
  hspi->TxISR       = NULL;
 8007cca:	e9c4 5513 	strd	r5, r5, [r4, #76]	@ 0x4c
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007cce:	6625      	str	r5, [r4, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8007cd0:	63a5      	str	r5, [r4, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8007cd2:	f8a4 8046 	strh.w	r8, [r4, #70]	@ 0x46
  hspi->TxXferSize  = 0U;
 8007cd6:	87a5      	strh	r5, [r4, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 8007cd8:	87e5      	strh	r5, [r4, #62]	@ 0x3e
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007cda:	6825      	ldr	r5, [r4, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007cdc:	68e2      	ldr	r2, [r4, #12]
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007cde:	686b      	ldr	r3, [r5, #4]
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8007ce0:	f8c4 a040 	str.w	sl, [r4, #64]	@ 0x40
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007ce4:	f5b2 6fe0 	cmp.w	r2, #1792	@ 0x700
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007ce8:	bf8c      	ite	hi
 8007cea:	f423 5380 	bichi.w	r3, r3, #4096	@ 0x1000
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007cee:	f443 5380 	orrls.w	r3, r3, #4096	@ 0x1000
  hspi->RxXferSize  = Size;
 8007cf2:	f8a4 8044 	strh.w	r8, [r4, #68]	@ 0x44
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007cf6:	606b      	str	r3, [r5, #4]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007cf8:	68a3      	ldr	r3, [r4, #8]
 8007cfa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007cfe:	d107      	bne.n	8007d10 <HAL_SPI_Receive+0xae>
    __HAL_SPI_DISABLE(hspi);
 8007d00:	682b      	ldr	r3, [r5, #0]
 8007d02:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007d06:	602b      	str	r3, [r5, #0]
    SPI_1LINE_RX(hspi);
 8007d08:	682b      	ldr	r3, [r5, #0]
 8007d0a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007d0e:	602b      	str	r3, [r5, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007d10:	682b      	ldr	r3, [r5, #0]
 8007d12:	065b      	lsls	r3, r3, #25
    __HAL_SPI_ENABLE(hspi);
 8007d14:	bf5e      	ittt	pl
 8007d16:	682b      	ldrpl	r3, [r5, #0]
 8007d18:	f043 0340 	orrpl.w	r3, r3, #64	@ 0x40
 8007d1c:	602b      	strpl	r3, [r5, #0]
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8007d1e:	f5b2 6fe0 	cmp.w	r2, #1792	@ 0x700
 8007d22:	d923      	bls.n	8007d6c <HAL_SPI_Receive+0x10a>
    while (hspi->RxXferCount > 0U)
 8007d24:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 8007d28:	b29b      	uxth	r3, r3
 8007d2a:	b323      	cbz	r3, 8007d76 <HAL_SPI_Receive+0x114>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007d2c:	6823      	ldr	r3, [r4, #0]
 8007d2e:	689a      	ldr	r2, [r3, #8]
 8007d30:	07d2      	lsls	r2, r2, #31
 8007d32:	d53d      	bpl.n	8007db0 <HAL_SPI_Receive+0x14e>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007d34:	68da      	ldr	r2, [r3, #12]
 8007d36:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007d38:	f823 2b02 	strh.w	r2, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007d3c:	6423      	str	r3, [r4, #64]	@ 0x40
        hspi->RxXferCount--;
 8007d3e:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 8007d42:	3b01      	subs	r3, #1
 8007d44:	b29b      	uxth	r3, r3
 8007d46:	f8a4 3046 	strh.w	r3, [r4, #70]	@ 0x46
 8007d4a:	e7eb      	b.n	8007d24 <HAL_SPI_Receive+0xc2>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007d4c:	6823      	ldr	r3, [r4, #0]
 8007d4e:	689a      	ldr	r2, [r3, #8]
 8007d50:	07d0      	lsls	r0, r2, #31
 8007d52:	d51d      	bpl.n	8007d90 <HAL_SPI_Receive+0x12e>
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007d54:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8007d56:	7b1b      	ldrb	r3, [r3, #12]
 8007d58:	7013      	strb	r3, [r2, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007d5a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007d5c:	3301      	adds	r3, #1
 8007d5e:	6423      	str	r3, [r4, #64]	@ 0x40
        hspi->RxXferCount--;
 8007d60:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 8007d64:	3b01      	subs	r3, #1
 8007d66:	b29b      	uxth	r3, r3
 8007d68:	f8a4 3046 	strh.w	r3, [r4, #70]	@ 0x46
    while (hspi->RxXferCount > 0U)
 8007d6c:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 8007d70:	b29b      	uxth	r3, r3
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d1ea      	bne.n	8007d4c <HAL_SPI_Receive+0xea>
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007d76:	464a      	mov	r2, r9
 8007d78:	4639      	mov	r1, r7
 8007d7a:	4620      	mov	r0, r4
 8007d7c:	f7ff fcb0 	bl	80076e0 <SPI_EndRxTransaction>
 8007d80:	b9f8      	cbnz	r0, 8007dc2 <HAL_SPI_Receive+0x160>
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007d82:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8007d84:	b983      	cbnz	r3, 8007da8 <HAL_SPI_Receive+0x146>
    hspi->State = HAL_SPI_STATE_READY;
 8007d86:	2201      	movs	r2, #1
 8007d88:	f884 205d 	strb.w	r2, [r4, #93]	@ 0x5d
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007d8c:	461e      	mov	r6, r3
 8007d8e:	e00b      	b.n	8007da8 <HAL_SPI_Receive+0x146>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007d90:	f7fd fe9a 	bl	8005ac8 <HAL_GetTick>
 8007d94:	eba0 0009 	sub.w	r0, r0, r9
 8007d98:	42b8      	cmp	r0, r7
 8007d9a:	d3e7      	bcc.n	8007d6c <HAL_SPI_Receive+0x10a>
 8007d9c:	1c79      	adds	r1, r7, #1
 8007d9e:	d0e5      	beq.n	8007d6c <HAL_SPI_Receive+0x10a>
          hspi->State = HAL_SPI_STATE_READY;
 8007da0:	2301      	movs	r3, #1
 8007da2:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
          errorcode = HAL_TIMEOUT;
 8007da6:	2603      	movs	r6, #3
  __HAL_UNLOCK(hspi);
 8007da8:	2300      	movs	r3, #0
 8007daa:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
  return errorcode;
 8007dae:	e773      	b.n	8007c98 <HAL_SPI_Receive+0x36>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007db0:	f7fd fe8a 	bl	8005ac8 <HAL_GetTick>
 8007db4:	eba0 0009 	sub.w	r0, r0, r9
 8007db8:	42b8      	cmp	r0, r7
 8007dba:	d3b3      	bcc.n	8007d24 <HAL_SPI_Receive+0xc2>
 8007dbc:	1c7b      	adds	r3, r7, #1
 8007dbe:	d0b1      	beq.n	8007d24 <HAL_SPI_Receive+0xc2>
 8007dc0:	e7ee      	b.n	8007da0 <HAL_SPI_Receive+0x13e>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007dc2:	2320      	movs	r3, #32
 8007dc4:	6623      	str	r3, [r4, #96]	@ 0x60
 8007dc6:	e7dc      	b.n	8007d82 <HAL_SPI_Receive+0x120>
    errorcode = HAL_BUSY;
 8007dc8:	2602      	movs	r6, #2
 8007dca:	e7ed      	b.n	8007da8 <HAL_SPI_Receive+0x146>
  __HAL_LOCK(hspi);
 8007dcc:	2602      	movs	r6, #2
 8007dce:	e763      	b.n	8007c98 <HAL_SPI_Receive+0x36>

08007dd0 <HAL_TIM_Base_Start>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007dd0:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8007dd4:	2b01      	cmp	r3, #1
 8007dd6:	d127      	bne.n	8007e28 <HAL_TIM_Base_Start+0x58>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007dd8:	2302      	movs	r3, #2

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007dda:	4a14      	ldr	r2, [pc, #80]	@ (8007e2c <HAL_TIM_Base_Start+0x5c>)
  htim->State = HAL_TIM_STATE_BUSY;
 8007ddc:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007de0:	6803      	ldr	r3, [r0, #0]
 8007de2:	4293      	cmp	r3, r2
 8007de4:	d012      	beq.n	8007e0c <HAL_TIM_Base_Start+0x3c>
 8007de6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007dea:	d00f      	beq.n	8007e0c <HAL_TIM_Base_Start+0x3c>
 8007dec:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 8007df0:	4293      	cmp	r3, r2
 8007df2:	d00b      	beq.n	8007e0c <HAL_TIM_Base_Start+0x3c>
 8007df4:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8007df8:	4293      	cmp	r3, r2
 8007dfa:	d007      	beq.n	8007e0c <HAL_TIM_Base_Start+0x3c>
 8007dfc:	f502 3296 	add.w	r2, r2, #76800	@ 0x12c00
 8007e00:	4293      	cmp	r3, r2
 8007e02:	d003      	beq.n	8007e0c <HAL_TIM_Base_Start+0x3c>
 8007e04:	f502 6240 	add.w	r2, r2, #3072	@ 0xc00
 8007e08:	4293      	cmp	r3, r2
 8007e0a:	d107      	bne.n	8007e1c <HAL_TIM_Base_Start+0x4c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007e0c:	6899      	ldr	r1, [r3, #8]
 8007e0e:	4a08      	ldr	r2, [pc, #32]	@ (8007e30 <HAL_TIM_Base_Start+0x60>)
 8007e10:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007e12:	2a06      	cmp	r2, #6
 8007e14:	d006      	beq.n	8007e24 <HAL_TIM_Base_Start+0x54>
 8007e16:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 8007e1a:	d003      	beq.n	8007e24 <HAL_TIM_Base_Start+0x54>
    {
      __HAL_TIM_ENABLE(htim);
 8007e1c:	681a      	ldr	r2, [r3, #0]
 8007e1e:	f042 0201 	orr.w	r2, r2, #1
 8007e22:	601a      	str	r2, [r3, #0]
  {
    __HAL_TIM_ENABLE(htim);
  }

  /* Return function status */
  return HAL_OK;
 8007e24:	2000      	movs	r0, #0
 8007e26:	4770      	bx	lr
    return HAL_ERROR;
 8007e28:	2001      	movs	r0, #1
}
 8007e2a:	4770      	bx	lr
 8007e2c:	40012c00 	.word	0x40012c00
 8007e30:	00010007 	.word	0x00010007

08007e34 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007e34:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8007e38:	2b01      	cmp	r3, #1
 8007e3a:	d12b      	bne.n	8007e94 <HAL_TIM_Base_Start_IT+0x60>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007e3c:	2302      	movs	r3, #2
 8007e3e:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007e42:	6803      	ldr	r3, [r0, #0]
 8007e44:	68da      	ldr	r2, [r3, #12]
 8007e46:	f042 0201 	orr.w	r2, r2, #1
 8007e4a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007e4c:	4a12      	ldr	r2, [pc, #72]	@ (8007e98 <HAL_TIM_Base_Start_IT+0x64>)
 8007e4e:	4293      	cmp	r3, r2
 8007e50:	d012      	beq.n	8007e78 <HAL_TIM_Base_Start_IT+0x44>
 8007e52:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007e56:	d00f      	beq.n	8007e78 <HAL_TIM_Base_Start_IT+0x44>
 8007e58:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 8007e5c:	4293      	cmp	r3, r2
 8007e5e:	d00b      	beq.n	8007e78 <HAL_TIM_Base_Start_IT+0x44>
 8007e60:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8007e64:	4293      	cmp	r3, r2
 8007e66:	d007      	beq.n	8007e78 <HAL_TIM_Base_Start_IT+0x44>
 8007e68:	f502 3296 	add.w	r2, r2, #76800	@ 0x12c00
 8007e6c:	4293      	cmp	r3, r2
 8007e6e:	d003      	beq.n	8007e78 <HAL_TIM_Base_Start_IT+0x44>
 8007e70:	f502 6240 	add.w	r2, r2, #3072	@ 0xc00
 8007e74:	4293      	cmp	r3, r2
 8007e76:	d107      	bne.n	8007e88 <HAL_TIM_Base_Start_IT+0x54>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007e78:	6899      	ldr	r1, [r3, #8]
 8007e7a:	4a08      	ldr	r2, [pc, #32]	@ (8007e9c <HAL_TIM_Base_Start_IT+0x68>)
 8007e7c:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007e7e:	2a06      	cmp	r2, #6
 8007e80:	d006      	beq.n	8007e90 <HAL_TIM_Base_Start_IT+0x5c>
 8007e82:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 8007e86:	d003      	beq.n	8007e90 <HAL_TIM_Base_Start_IT+0x5c>
    {
      __HAL_TIM_ENABLE(htim);
 8007e88:	681a      	ldr	r2, [r3, #0]
 8007e8a:	f042 0201 	orr.w	r2, r2, #1
 8007e8e:	601a      	str	r2, [r3, #0]
  {
    __HAL_TIM_ENABLE(htim);
  }

  /* Return function status */
  return HAL_OK;
 8007e90:	2000      	movs	r0, #0
 8007e92:	4770      	bx	lr
    return HAL_ERROR;
 8007e94:	2001      	movs	r0, #1
}
 8007e96:	4770      	bx	lr
 8007e98:	40012c00 	.word	0x40012c00
 8007e9c:	00010007 	.word	0x00010007

08007ea0 <HAL_TIM_OC_DelayElapsedCallback>:
/**
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
 8007ea0:	4770      	bx	lr

08007ea2 <HAL_TIM_IC_CaptureCallback>:
/**
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
 8007ea2:	4770      	bx	lr

08007ea4 <HAL_TIM_PWM_PulseFinishedCallback>:
/**
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
 8007ea4:	4770      	bx	lr

08007ea6 <HAL_TIM_TriggerCallback>:
/**
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
 8007ea6:	4770      	bx	lr

08007ea8 <HAL_TIM_IRQHandler>:
  uint32_t itsource = htim->Instance->DIER;
 8007ea8:	6803      	ldr	r3, [r0, #0]
{
 8007eaa:	b570      	push	{r4, r5, r6, lr}
  uint32_t itsource = htim->Instance->DIER;
 8007eac:	68dd      	ldr	r5, [r3, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007eae:	691e      	ldr	r6, [r3, #16]
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007eb0:	07b2      	lsls	r2, r6, #30
{
 8007eb2:	4604      	mov	r4, r0
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007eb4:	d50d      	bpl.n	8007ed2 <HAL_TIM_IRQHandler+0x2a>
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007eb6:	07a9      	lsls	r1, r5, #30
 8007eb8:	d50b      	bpl.n	8007ed2 <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007eba:	f06f 0202 	mvn.w	r2, #2
 8007ebe:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007ec0:	2201      	movs	r2, #1
 8007ec2:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007ec4:	699b      	ldr	r3, [r3, #24]
 8007ec6:	079a      	lsls	r2, r3, #30
 8007ec8:	d074      	beq.n	8007fb4 <HAL_TIM_IRQHandler+0x10c>
          HAL_TIM_IC_CaptureCallback(htim);
 8007eca:	f7ff ffea 	bl	8007ea2 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007ece:	2300      	movs	r3, #0
 8007ed0:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007ed2:	0773      	lsls	r3, r6, #29
 8007ed4:	d510      	bpl.n	8007ef8 <HAL_TIM_IRQHandler+0x50>
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007ed6:	0768      	lsls	r0, r5, #29
 8007ed8:	d50e      	bpl.n	8007ef8 <HAL_TIM_IRQHandler+0x50>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007eda:	6823      	ldr	r3, [r4, #0]
 8007edc:	f06f 0204 	mvn.w	r2, #4
 8007ee0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007ee2:	2202      	movs	r2, #2
 8007ee4:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007ee6:	699b      	ldr	r3, [r3, #24]
 8007ee8:	f413 7f40 	tst.w	r3, #768	@ 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8007eec:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007eee:	d067      	beq.n	8007fc0 <HAL_TIM_IRQHandler+0x118>
        HAL_TIM_IC_CaptureCallback(htim);
 8007ef0:	f7ff ffd7 	bl	8007ea2 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007ef4:	2300      	movs	r3, #0
 8007ef6:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007ef8:	0731      	lsls	r1, r6, #28
 8007efa:	d50f      	bpl.n	8007f1c <HAL_TIM_IRQHandler+0x74>
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007efc:	072a      	lsls	r2, r5, #28
 8007efe:	d50d      	bpl.n	8007f1c <HAL_TIM_IRQHandler+0x74>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007f00:	6823      	ldr	r3, [r4, #0]
 8007f02:	f06f 0208 	mvn.w	r2, #8
 8007f06:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007f08:	2204      	movs	r2, #4
 8007f0a:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007f0c:	69db      	ldr	r3, [r3, #28]
 8007f0e:	079b      	lsls	r3, r3, #30
        HAL_TIM_IC_CaptureCallback(htim);
 8007f10:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007f12:	d05b      	beq.n	8007fcc <HAL_TIM_IRQHandler+0x124>
        HAL_TIM_IC_CaptureCallback(htim);
 8007f14:	f7ff ffc5 	bl	8007ea2 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007f18:	2300      	movs	r3, #0
 8007f1a:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007f1c:	06f0      	lsls	r0, r6, #27
 8007f1e:	d510      	bpl.n	8007f42 <HAL_TIM_IRQHandler+0x9a>
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007f20:	06e9      	lsls	r1, r5, #27
 8007f22:	d50e      	bpl.n	8007f42 <HAL_TIM_IRQHandler+0x9a>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007f24:	6823      	ldr	r3, [r4, #0]
 8007f26:	f06f 0210 	mvn.w	r2, #16
 8007f2a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007f2c:	2208      	movs	r2, #8
 8007f2e:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007f30:	69db      	ldr	r3, [r3, #28]
 8007f32:	f413 7f40 	tst.w	r3, #768	@ 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8007f36:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007f38:	d04e      	beq.n	8007fd8 <HAL_TIM_IRQHandler+0x130>
        HAL_TIM_IC_CaptureCallback(htim);
 8007f3a:	f7ff ffb2 	bl	8007ea2 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007f3e:	2300      	movs	r3, #0
 8007f40:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007f42:	07f2      	lsls	r2, r6, #31
 8007f44:	d508      	bpl.n	8007f58 <HAL_TIM_IRQHandler+0xb0>
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007f46:	07eb      	lsls	r3, r5, #31
 8007f48:	d506      	bpl.n	8007f58 <HAL_TIM_IRQHandler+0xb0>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007f4a:	6823      	ldr	r3, [r4, #0]
 8007f4c:	f06f 0201 	mvn.w	r2, #1
 8007f50:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8007f52:	4620      	mov	r0, r4
 8007f54:	f7fc f996 	bl	8004284 <HAL_TIM_PeriodElapsedCallback>
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8007f58:	0630      	lsls	r0, r6, #24
 8007f5a:	d508      	bpl.n	8007f6e <HAL_TIM_IRQHandler+0xc6>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007f5c:	0629      	lsls	r1, r5, #24
 8007f5e:	d506      	bpl.n	8007f6e <HAL_TIM_IRQHandler+0xc6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8007f60:	6823      	ldr	r3, [r4, #0]
 8007f62:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8007f66:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8007f68:	4620      	mov	r0, r4
 8007f6a:	f000 f9b8 	bl	80082de <HAL_TIMEx_BreakCallback>
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8007f6e:	05f2      	lsls	r2, r6, #23
 8007f70:	d508      	bpl.n	8007f84 <HAL_TIM_IRQHandler+0xdc>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007f72:	062b      	lsls	r3, r5, #24
 8007f74:	d506      	bpl.n	8007f84 <HAL_TIM_IRQHandler+0xdc>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007f76:	6823      	ldr	r3, [r4, #0]
 8007f78:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8007f7c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8007f7e:	4620      	mov	r0, r4
 8007f80:	f000 f9ae 	bl	80082e0 <HAL_TIMEx_Break2Callback>
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007f84:	0670      	lsls	r0, r6, #25
 8007f86:	d508      	bpl.n	8007f9a <HAL_TIM_IRQHandler+0xf2>
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007f88:	0669      	lsls	r1, r5, #25
 8007f8a:	d506      	bpl.n	8007f9a <HAL_TIM_IRQHandler+0xf2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007f8c:	6823      	ldr	r3, [r4, #0]
 8007f8e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007f92:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8007f94:	4620      	mov	r0, r4
 8007f96:	f7ff ff86 	bl	8007ea6 <HAL_TIM_TriggerCallback>
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007f9a:	06b2      	lsls	r2, r6, #26
 8007f9c:	d522      	bpl.n	8007fe4 <HAL_TIM_IRQHandler+0x13c>
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007f9e:	06ab      	lsls	r3, r5, #26
 8007fa0:	d520      	bpl.n	8007fe4 <HAL_TIM_IRQHandler+0x13c>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007fa2:	6823      	ldr	r3, [r4, #0]
 8007fa4:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 8007fa8:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007faa:	611a      	str	r2, [r3, #16]
}
 8007fac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      HAL_TIMEx_CommutCallback(htim);
 8007fb0:	f000 b994 	b.w	80082dc <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007fb4:	f7ff ff74 	bl	8007ea0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007fb8:	4620      	mov	r0, r4
 8007fba:	f7ff ff73 	bl	8007ea4 <HAL_TIM_PWM_PulseFinishedCallback>
 8007fbe:	e786      	b.n	8007ece <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007fc0:	f7ff ff6e 	bl	8007ea0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007fc4:	4620      	mov	r0, r4
 8007fc6:	f7ff ff6d 	bl	8007ea4 <HAL_TIM_PWM_PulseFinishedCallback>
 8007fca:	e793      	b.n	8007ef4 <HAL_TIM_IRQHandler+0x4c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007fcc:	f7ff ff68 	bl	8007ea0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007fd0:	4620      	mov	r0, r4
 8007fd2:	f7ff ff67 	bl	8007ea4 <HAL_TIM_PWM_PulseFinishedCallback>
 8007fd6:	e79f      	b.n	8007f18 <HAL_TIM_IRQHandler+0x70>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007fd8:	f7ff ff62 	bl	8007ea0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007fdc:	4620      	mov	r0, r4
 8007fde:	f7ff ff61 	bl	8007ea4 <HAL_TIM_PWM_PulseFinishedCallback>
 8007fe2:	e7ac      	b.n	8007f3e <HAL_TIM_IRQHandler+0x96>
}
 8007fe4:	bd70      	pop	{r4, r5, r6, pc}
	...

08007fe8 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007fe8:	4a2f      	ldr	r2, [pc, #188]	@ (80080a8 <TIM_Base_SetConfig+0xc0>)
  tmpcr1 = TIMx->CR1;
 8007fea:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007fec:	4290      	cmp	r0, r2
 8007fee:	d00e      	beq.n	800800e <TIM_Base_SetConfig+0x26>
 8007ff0:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8007ff4:	d00b      	beq.n	800800e <TIM_Base_SetConfig+0x26>
 8007ff6:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 8007ffa:	4290      	cmp	r0, r2
 8007ffc:	d007      	beq.n	800800e <TIM_Base_SetConfig+0x26>
 8007ffe:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8008002:	4290      	cmp	r0, r2
 8008004:	d003      	beq.n	800800e <TIM_Base_SetConfig+0x26>
 8008006:	f502 3296 	add.w	r2, r2, #76800	@ 0x12c00
 800800a:	4290      	cmp	r0, r2
 800800c:	d115      	bne.n	800803a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 800800e:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008010:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8008014:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008016:	4a24      	ldr	r2, [pc, #144]	@ (80080a8 <TIM_Base_SetConfig+0xc0>)
 8008018:	4290      	cmp	r0, r2
 800801a:	d019      	beq.n	8008050 <TIM_Base_SetConfig+0x68>
 800801c:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8008020:	d016      	beq.n	8008050 <TIM_Base_SetConfig+0x68>
 8008022:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 8008026:	4290      	cmp	r0, r2
 8008028:	d012      	beq.n	8008050 <TIM_Base_SetConfig+0x68>
 800802a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800802e:	4290      	cmp	r0, r2
 8008030:	d00e      	beq.n	8008050 <TIM_Base_SetConfig+0x68>
 8008032:	f502 3296 	add.w	r2, r2, #76800	@ 0x12c00
 8008036:	4290      	cmp	r0, r2
 8008038:	d00a      	beq.n	8008050 <TIM_Base_SetConfig+0x68>
 800803a:	4a1c      	ldr	r2, [pc, #112]	@ (80080ac <TIM_Base_SetConfig+0xc4>)
 800803c:	4290      	cmp	r0, r2
 800803e:	d007      	beq.n	8008050 <TIM_Base_SetConfig+0x68>
 8008040:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8008044:	4290      	cmp	r0, r2
 8008046:	d003      	beq.n	8008050 <TIM_Base_SetConfig+0x68>
 8008048:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800804c:	4290      	cmp	r0, r2
 800804e:	d103      	bne.n	8008058 <TIM_Base_SetConfig+0x70>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008050:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8008052:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008056:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008058:	694a      	ldr	r2, [r1, #20]
 800805a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800805e:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8008060:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008062:	688b      	ldr	r3, [r1, #8]
 8008064:	62c3      	str	r3, [r0, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008066:	680b      	ldr	r3, [r1, #0]
 8008068:	6283      	str	r3, [r0, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800806a:	4b0f      	ldr	r3, [pc, #60]	@ (80080a8 <TIM_Base_SetConfig+0xc0>)
 800806c:	4298      	cmp	r0, r3
 800806e:	d00f      	beq.n	8008090 <TIM_Base_SetConfig+0xa8>
 8008070:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008074:	4298      	cmp	r0, r3
 8008076:	d00b      	beq.n	8008090 <TIM_Base_SetConfig+0xa8>
 8008078:	f503 6340 	add.w	r3, r3, #3072	@ 0xc00
 800807c:	4298      	cmp	r0, r3
 800807e:	d007      	beq.n	8008090 <TIM_Base_SetConfig+0xa8>
 8008080:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008084:	4298      	cmp	r0, r3
 8008086:	d003      	beq.n	8008090 <TIM_Base_SetConfig+0xa8>
 8008088:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800808c:	4298      	cmp	r0, r3
 800808e:	d101      	bne.n	8008094 <TIM_Base_SetConfig+0xac>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008090:	690b      	ldr	r3, [r1, #16]
 8008092:	6303      	str	r3, [r0, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008094:	2301      	movs	r3, #1
 8008096:	6143      	str	r3, [r0, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008098:	6903      	ldr	r3, [r0, #16]
 800809a:	07db      	lsls	r3, r3, #31
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800809c:	bf42      	ittt	mi
 800809e:	6903      	ldrmi	r3, [r0, #16]
 80080a0:	f023 0301 	bicmi.w	r3, r3, #1
 80080a4:	6103      	strmi	r3, [r0, #16]
  }
}
 80080a6:	4770      	bx	lr
 80080a8:	40012c00 	.word	0x40012c00
 80080ac:	40014000 	.word	0x40014000

080080b0 <HAL_TIM_Base_Init>:
{
 80080b0:	b510      	push	{r4, lr}
  if (htim == NULL)
 80080b2:	4604      	mov	r4, r0
 80080b4:	b350      	cbz	r0, 800810c <HAL_TIM_Base_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 80080b6:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 80080ba:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 80080be:	b91b      	cbnz	r3, 80080c8 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 80080c0:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 80080c4:	f7fd fa2a 	bl	800551c <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 80080c8:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80080ca:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80080cc:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80080d0:	1d21      	adds	r1, r4, #4
 80080d2:	f7ff ff89 	bl	8007fe8 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80080d6:	2301      	movs	r3, #1
 80080d8:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
  return HAL_OK;
 80080dc:	2000      	movs	r0, #0
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80080de:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 80080e2:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 80080e6:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 80080ea:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 80080ee:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80080f2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80080f6:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 80080fa:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 80080fe:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
 8008102:	f884 3047 	strb.w	r3, [r4, #71]	@ 0x47
  htim->State = HAL_TIM_STATE_READY;
 8008106:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
}
 800810a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800810c:	2001      	movs	r0, #1
 800810e:	e7fc      	b.n	800810a <HAL_TIM_Base_Init+0x5a>

08008110 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008110:	b510      	push	{r4, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008112:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008114:	430a      	orrs	r2, r1
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008116:	f424 447f 	bic.w	r4, r4, #65280	@ 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800811a:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 800811e:	4322      	orrs	r2, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008120:	6082      	str	r2, [r0, #8]
}
 8008122:	bd10      	pop	{r4, pc}

08008124 <HAL_TIM_ConfigClockSource>:
{
 8008124:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8008126:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 800812a:	2b01      	cmp	r3, #1
{
 800812c:	4604      	mov	r4, r0
 800812e:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 8008132:	f000 808c 	beq.w	800824e <HAL_TIM_ConfigClockSource+0x12a>
  htim->State = HAL_TIM_STATE_BUSY;
 8008136:	f884 003d 	strb.w	r0, [r4, #61]	@ 0x3d
  __HAL_LOCK(htim);
 800813a:	2201      	movs	r2, #1
  tmpsmcr = htim->Instance->SMCR;
 800813c:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(htim);
 800813e:	f884 203c 	strb.w	r2, [r4, #60]	@ 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8008142:	6885      	ldr	r5, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008144:	4b43      	ldr	r3, [pc, #268]	@ (8008254 <HAL_TIM_ConfigClockSource+0x130>)
 8008146:	402b      	ands	r3, r5
  htim->Instance->SMCR = tmpsmcr;
 8008148:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 800814a:	680b      	ldr	r3, [r1, #0]
 800814c:	2b60      	cmp	r3, #96	@ 0x60
 800814e:	d04f      	beq.n	80081f0 <HAL_TIM_ConfigClockSource+0xcc>
 8008150:	d832      	bhi.n	80081b8 <HAL_TIM_ConfigClockSource+0x94>
 8008152:	2b40      	cmp	r3, #64	@ 0x40
 8008154:	d064      	beq.n	8008220 <HAL_TIM_ConfigClockSource+0xfc>
 8008156:	d816      	bhi.n	8008186 <HAL_TIM_ConfigClockSource+0x62>
 8008158:	2b20      	cmp	r3, #32
 800815a:	d00d      	beq.n	8008178 <HAL_TIM_ConfigClockSource+0x54>
 800815c:	d80a      	bhi.n	8008174 <HAL_TIM_ConfigClockSource+0x50>
 800815e:	f033 0110 	bics.w	r1, r3, #16
 8008162:	d009      	beq.n	8008178 <HAL_TIM_ConfigClockSource+0x54>
  htim->State = HAL_TIM_STATE_READY;
 8008164:	2301      	movs	r3, #1
 8008166:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 800816a:	2300      	movs	r3, #0
 800816c:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 8008170:	4610      	mov	r0, r2
 8008172:	bd38      	pop	{r3, r4, r5, pc}
  switch (sClockSourceConfig->ClockSource)
 8008174:	2b30      	cmp	r3, #48	@ 0x30
 8008176:	d1f5      	bne.n	8008164 <HAL_TIM_ConfigClockSource+0x40>
  tmpsmcr = TIMx->SMCR;
 8008178:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800817a:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800817e:	4313      	orrs	r3, r2
 8008180:	f043 0307 	orr.w	r3, r3, #7
  TIMx->SMCR = tmpsmcr;
 8008184:	e028      	b.n	80081d8 <HAL_TIM_ConfigClockSource+0xb4>
  switch (sClockSourceConfig->ClockSource)
 8008186:	2b50      	cmp	r3, #80	@ 0x50
 8008188:	d1ec      	bne.n	8008164 <HAL_TIM_ConfigClockSource+0x40>
                               sClockSourceConfig->ClockPolarity,
 800818a:	684a      	ldr	r2, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 800818c:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 800818e:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008190:	6a03      	ldr	r3, [r0, #32]
 8008192:	f023 0301 	bic.w	r3, r3, #1
 8008196:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008198:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800819a:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800819e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80081a2:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccer |= TIM_ICPolarity;
 80081a6:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 80081a8:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 80081aa:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 80081ac:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80081ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80081b2:	f043 0357 	orr.w	r3, r3, #87	@ 0x57
  TIMx->SMCR = tmpsmcr;
 80081b6:	e00f      	b.n	80081d8 <HAL_TIM_ConfigClockSource+0xb4>
  switch (sClockSourceConfig->ClockSource)
 80081b8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80081bc:	d00d      	beq.n	80081da <HAL_TIM_ConfigClockSource+0xb6>
 80081be:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80081c2:	d00c      	beq.n	80081de <HAL_TIM_ConfigClockSource+0xba>
 80081c4:	2b70      	cmp	r3, #112	@ 0x70
 80081c6:	d1cd      	bne.n	8008164 <HAL_TIM_ConfigClockSource+0x40>
      TIM_ETR_SetConfig(htim->Instance,
 80081c8:	68cb      	ldr	r3, [r1, #12]
 80081ca:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 80081ce:	f7ff ff9f 	bl	8008110 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80081d2:	6883      	ldr	r3, [r0, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80081d4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
      htim->Instance->SMCR = tmpsmcr;
 80081d8:	6083      	str	r3, [r0, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80081da:	2200      	movs	r2, #0
 80081dc:	e7c2      	b.n	8008164 <HAL_TIM_ConfigClockSource+0x40>
      TIM_ETR_SetConfig(htim->Instance,
 80081de:	68cb      	ldr	r3, [r1, #12]
 80081e0:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 80081e4:	f7ff ff94 	bl	8008110 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80081e8:	6883      	ldr	r3, [r0, #8]
 80081ea:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80081ee:	e7f3      	b.n	80081d8 <HAL_TIM_ConfigClockSource+0xb4>
  tmpccer = TIMx->CCER;
 80081f0:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80081f2:	6a02      	ldr	r2, [r0, #32]
                               sClockSourceConfig->ClockPolarity,
 80081f4:	684d      	ldr	r5, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 80081f6:	68c9      	ldr	r1, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80081f8:	f022 0210 	bic.w	r2, r2, #16
 80081fc:	6202      	str	r2, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80081fe:	6982      	ldr	r2, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008200:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008204:	f422 4270 	bic.w	r2, r2, #61440	@ 0xf000
  tmpccer |= (TIM_ICPolarity << 4U);
 8008208:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800820c:	ea42 3201 	orr.w	r2, r2, r1, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8008210:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8008212:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8008214:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8008216:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800821a:	f043 0367 	orr.w	r3, r3, #103	@ 0x67
  TIMx->SMCR = tmpsmcr;
 800821e:	e7db      	b.n	80081d8 <HAL_TIM_ConfigClockSource+0xb4>
                               sClockSourceConfig->ClockPolarity,
 8008220:	684a      	ldr	r2, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8008222:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 8008224:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008226:	6a03      	ldr	r3, [r0, #32]
 8008228:	f023 0301 	bic.w	r3, r3, #1
 800822c:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800822e:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008230:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008234:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008238:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccer |= TIM_ICPolarity;
 800823c:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 800823e:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8008240:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8008242:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8008244:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008248:	f043 0347 	orr.w	r3, r3, #71	@ 0x47
  TIMx->SMCR = tmpsmcr;
 800824c:	e7c4      	b.n	80081d8 <HAL_TIM_ConfigClockSource+0xb4>
  __HAL_LOCK(htim);
 800824e:	4602      	mov	r2, r0
 8008250:	e78e      	b.n	8008170 <HAL_TIM_ConfigClockSource+0x4c>
 8008252:	bf00      	nop
 8008254:	fffe0088 	.word	0xfffe0088

08008258 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008258:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800825a:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 800825e:	2b01      	cmp	r3, #1
{
 8008260:	4604      	mov	r4, r0
 8008262:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 8008266:	d032      	beq.n	80082ce <HAL_TIMEx_MasterConfigSynchronization+0x76>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008268:	6823      	ldr	r3, [r4, #0]
  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800826a:	4d19      	ldr	r5, [pc, #100]	@ (80082d0 <HAL_TIMEx_MasterConfigSynchronization+0x78>)
  htim->State = HAL_TIM_STATE_BUSY;
 800826c:	f884 003d 	strb.w	r0, [r4, #61]	@ 0x3d
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008270:	42ab      	cmp	r3, r5
  tmpcr2 = htim->Instance->CR2;
 8008272:	685a      	ldr	r2, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;
 8008274:	6898      	ldr	r0, [r3, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008276:	d002      	beq.n	800827e <HAL_TIMEx_MasterConfigSynchronization+0x26>
 8008278:	4e16      	ldr	r6, [pc, #88]	@ (80082d4 <HAL_TIMEx_MasterConfigSynchronization+0x7c>)
 800827a:	42b3      	cmp	r3, r6
 800827c:	d103      	bne.n	8008286 <HAL_TIMEx_MasterConfigSynchronization+0x2e>
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800827e:	684e      	ldr	r6, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008280:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008284:	4332      	orrs	r2, r6
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008286:	680e      	ldr	r6, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 8008288:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800828c:	4332      	orrs	r2, r6

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800828e:	42ab      	cmp	r3, r5
  htim->Instance->CR2 = tmpcr2;
 8008290:	605a      	str	r2, [r3, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008292:	d011      	beq.n	80082b8 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 8008294:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008298:	d00e      	beq.n	80082b8 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800829a:	4a0f      	ldr	r2, [pc, #60]	@ (80082d8 <HAL_TIMEx_MasterConfigSynchronization+0x80>)
 800829c:	4293      	cmp	r3, r2
 800829e:	d00b      	beq.n	80082b8 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 80082a0:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80082a4:	4293      	cmp	r3, r2
 80082a6:	d007      	beq.n	80082b8 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 80082a8:	f502 3296 	add.w	r2, r2, #76800	@ 0x12c00
 80082ac:	4293      	cmp	r3, r2
 80082ae:	d003      	beq.n	80082b8 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 80082b0:	f502 6240 	add.w	r2, r2, #3072	@ 0xc00
 80082b4:	4293      	cmp	r3, r2
 80082b6:	d104      	bne.n	80082c2 <HAL_TIMEx_MasterConfigSynchronization+0x6a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80082b8:	6889      	ldr	r1, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 80082ba:	f020 0280 	bic.w	r2, r0, #128	@ 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80082be:	430a      	orrs	r2, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80082c0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80082c2:	2301      	movs	r3, #1

  __HAL_UNLOCK(htim);
 80082c4:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80082c6:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 80082ca:	f884 003c 	strb.w	r0, [r4, #60]	@ 0x3c

  return HAL_OK;
}
 80082ce:	bd70      	pop	{r4, r5, r6, pc}
 80082d0:	40012c00 	.word	0x40012c00
 80082d4:	40013400 	.word	0x40013400
 80082d8:	40000400 	.word	0x40000400

080082dc <HAL_TIMEx_CommutCallback>:
/**
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
 80082dc:	4770      	bx	lr

080082de <HAL_TIMEx_BreakCallback>:
/**
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
 80082de:	4770      	bx	lr

080082e0 <HAL_TIMEx_Break2Callback>:
/**
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
 80082e0:	4770      	bx	lr

080082e2 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80082e2:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082e4:	e852 3f00 	ldrex	r3, [r2]
 80082e8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082ec:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 80082f0:	6802      	ldr	r2, [r0, #0]
 80082f2:	2900      	cmp	r1, #0
 80082f4:	d1f5      	bne.n	80082e2 <UART_EndRxTransfer>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082f6:	f102 0308 	add.w	r3, r2, #8
 80082fa:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80082fe:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008302:	f102 0c08 	add.w	ip, r2, #8
 8008306:	e84c 3100 	strex	r1, r3, [ip]
 800830a:	2900      	cmp	r1, #0
 800830c:	d1f3      	bne.n	80082f6 <UART_EndRxTransfer+0x14>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800830e:	6e03      	ldr	r3, [r0, #96]	@ 0x60
 8008310:	2b01      	cmp	r3, #1
 8008312:	d107      	bne.n	8008324 <UART_EndRxTransfer+0x42>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008314:	e852 3f00 	ldrex	r3, [r2]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008318:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800831c:	e842 3100 	strex	r1, r3, [r2]
 8008320:	2900      	cmp	r1, #0
 8008322:	d1f7      	bne.n	8008314 <UART_EndRxTransfer+0x32>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008324:	2320      	movs	r3, #32
 8008326:	f8c0 3080 	str.w	r3, [r0, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800832a:	2300      	movs	r3, #0
 800832c:	6603      	str	r3, [r0, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800832e:	6683      	str	r3, [r0, #104]	@ 0x68
}
 8008330:	4770      	bx	lr

08008332 <HAL_UART_Abort>:
{
 8008332:	b510      	push	{r4, lr}
 8008334:	4604      	mov	r4, r0
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 8008336:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008338:	e852 3f00 	ldrex	r3, [r2]
 800833c:	f423 73f0 	bic.w	r3, r3, #480	@ 0x1e0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008340:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 8008344:	6823      	ldr	r3, [r4, #0]
 8008346:	2900      	cmp	r1, #0
 8008348:	d1f5      	bne.n	8008336 <HAL_UART_Abort+0x4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800834a:	f103 0208 	add.w	r2, r3, #8
 800834e:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008352:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008356:	f103 0008 	add.w	r0, r3, #8
 800835a:	e840 2100 	strex	r1, r2, [r0]
 800835e:	2900      	cmp	r1, #0
 8008360:	d1f3      	bne.n	800834a <HAL_UART_Abort+0x18>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008362:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 8008364:	2a01      	cmp	r2, #1
 8008366:	d107      	bne.n	8008378 <HAL_UART_Abort+0x46>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008368:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 800836c:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008370:	e843 2100 	strex	r1, r2, [r3]
 8008374:	2900      	cmp	r1, #0
 8008376:	d1f7      	bne.n	8008368 <HAL_UART_Abort+0x36>
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8008378:	689a      	ldr	r2, [r3, #8]
 800837a:	0612      	lsls	r2, r2, #24
 800837c:	d51b      	bpl.n	80083b6 <HAL_UART_Abort+0x84>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800837e:	f103 0208 	add.w	r2, r3, #8
 8008382:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008386:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800838a:	f103 0008 	add.w	r0, r3, #8
 800838e:	e840 2100 	strex	r1, r2, [r0]
 8008392:	2900      	cmp	r1, #0
 8008394:	d1f3      	bne.n	800837e <HAL_UART_Abort+0x4c>
    if (huart->hdmatx != NULL)
 8008396:	6f20      	ldr	r0, [r4, #112]	@ 0x70
 8008398:	b168      	cbz	r0, 80083b6 <HAL_UART_Abort+0x84>
      huart->hdmatx->XferAbortCallback = NULL;
 800839a:	6341      	str	r1, [r0, #52]	@ 0x34
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 800839c:	f7fe f9a9 	bl	80066f2 <HAL_DMA_Abort>
 80083a0:	b148      	cbz	r0, 80083b6 <HAL_UART_Abort+0x84>
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 80083a2:	6f20      	ldr	r0, [r4, #112]	@ 0x70
 80083a4:	f7fe fa0a 	bl	80067bc <HAL_DMA_GetError>
 80083a8:	2820      	cmp	r0, #32
 80083aa:	d104      	bne.n	80083b6 <HAL_UART_Abort+0x84>
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80083ac:	2310      	movs	r3, #16
 80083ae:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
          return HAL_TIMEOUT;
 80083b2:	2003      	movs	r0, #3
}
 80083b4:	bd10      	pop	{r4, pc}
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80083b6:	6822      	ldr	r2, [r4, #0]
 80083b8:	6893      	ldr	r3, [r2, #8]
 80083ba:	065b      	lsls	r3, r3, #25
 80083bc:	d516      	bpl.n	80083ec <HAL_UART_Abort+0xba>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083be:	f102 0308 	add.w	r3, r2, #8
 80083c2:	e853 3f00 	ldrex	r3, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80083c6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083ca:	f102 0008 	add.w	r0, r2, #8
 80083ce:	e840 3100 	strex	r1, r3, [r0]
 80083d2:	2900      	cmp	r1, #0
 80083d4:	d1f3      	bne.n	80083be <HAL_UART_Abort+0x8c>
    if (huart->hdmarx != NULL)
 80083d6:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 80083d8:	b140      	cbz	r0, 80083ec <HAL_UART_Abort+0xba>
      huart->hdmarx->XferAbortCallback = NULL;
 80083da:	6341      	str	r1, [r0, #52]	@ 0x34
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 80083dc:	f7fe f989 	bl	80066f2 <HAL_DMA_Abort>
 80083e0:	b120      	cbz	r0, 80083ec <HAL_UART_Abort+0xba>
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 80083e2:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 80083e4:	f7fe f9ea 	bl	80067bc <HAL_DMA_GetError>
 80083e8:	2820      	cmp	r0, #32
 80083ea:	d0df      	beq.n	80083ac <HAL_UART_Abort+0x7a>
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 80083ec:	6823      	ldr	r3, [r4, #0]
  huart->TxXferCount = 0U;
 80083ee:	2000      	movs	r0, #0
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 80083f0:	220f      	movs	r2, #15
  huart->TxXferCount = 0U;
 80083f2:	f8a4 0052 	strh.w	r0, [r4, #82]	@ 0x52
  huart->RxXferCount = 0U;
 80083f6:	f8a4 005a 	strh.w	r0, [r4, #90]	@ 0x5a
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 80083fa:	621a      	str	r2, [r3, #32]
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80083fc:	699a      	ldr	r2, [r3, #24]
 80083fe:	f042 0208 	orr.w	r2, r2, #8
 8008402:	619a      	str	r2, [r3, #24]
  huart->gState  = HAL_UART_STATE_READY;
 8008404:	2320      	movs	r3, #32
 8008406:	67e3      	str	r3, [r4, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8008408:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800840c:	6620      	str	r0, [r4, #96]	@ 0x60
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800840e:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
  return HAL_OK;
 8008412:	e7cf      	b.n	80083b4 <HAL_UART_Abort+0x82>

08008414 <HAL_UART_RxCpltCallback>:
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
 8008414:	4770      	bx	lr

08008416 <HAL_UART_RxHalfCpltCallback>:
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
 8008416:	4770      	bx	lr

08008418 <HAL_UART_ErrorCallback>:
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
 8008418:	4770      	bx	lr

0800841a <UART_DMAError>:
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800841a:	6a40      	ldr	r0, [r0, #36]	@ 0x24

  const HAL_UART_StateTypeDef gstate = huart->gState;
  const HAL_UART_StateTypeDef rxstate = huart->RxState;

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800841c:	6803      	ldr	r3, [r0, #0]
  const HAL_UART_StateTypeDef gstate = huart->gState;
 800841e:	6fc2      	ldr	r2, [r0, #124]	@ 0x7c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8008420:	f8d0 1080 	ldr.w	r1, [r0, #128]	@ 0x80
{
 8008424:	b510      	push	{r4, lr}
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8008426:	689c      	ldr	r4, [r3, #8]
 8008428:	0624      	lsls	r4, r4, #24
 800842a:	d50e      	bpl.n	800844a <UART_DMAError+0x30>
 800842c:	2a21      	cmp	r2, #33	@ 0x21
 800842e:	d10c      	bne.n	800844a <UART_DMAError+0x30>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8008430:	2200      	movs	r2, #0
 8008432:	f8a0 2052 	strh.w	r2, [r0, #82]	@ 0x52
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008436:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800843a:	f022 02c0 	bic.w	r2, r2, #192	@ 0xc0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800843e:	e843 2400 	strex	r4, r2, [r3]
 8008442:	2c00      	cmp	r4, #0
 8008444:	d1f7      	bne.n	8008436 <UART_DMAError+0x1c>
  huart->gState = HAL_UART_STATE_READY;
 8008446:	2220      	movs	r2, #32
 8008448:	67c2      	str	r2, [r0, #124]	@ 0x7c
    UART_EndTxTransfer(huart);
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800844a:	689b      	ldr	r3, [r3, #8]
 800844c:	065b      	lsls	r3, r3, #25
 800844e:	d506      	bpl.n	800845e <UART_DMAError+0x44>
 8008450:	2922      	cmp	r1, #34	@ 0x22
 8008452:	d104      	bne.n	800845e <UART_DMAError+0x44>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8008454:	2300      	movs	r3, #0
 8008456:	f8a0 305a 	strh.w	r3, [r0, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 800845a:	f7ff ff42 	bl	80082e2 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800845e:	f8d0 3084 	ldr.w	r3, [r0, #132]	@ 0x84
 8008462:	f043 0310 	orr.w	r3, r3, #16
 8008466:	f8c0 3084 	str.w	r3, [r0, #132]	@ 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800846a:	f7ff ffd5 	bl	8008418 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800846e:	bd10      	pop	{r4, pc}

08008470 <HAL_UARTEx_RxEventCallback>:
}
 8008470:	4770      	bx	lr

08008472 <UART_DMARxHalfCplt>:
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008472:	6a40      	ldr	r0, [r0, #36]	@ 0x24
{
 8008474:	b508      	push	{r3, lr}
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8008476:	2301      	movs	r3, #1
 8008478:	6643      	str	r3, [r0, #100]	@ 0x64
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800847a:	6e03      	ldr	r3, [r0, #96]	@ 0x60
 800847c:	2b01      	cmp	r3, #1
 800847e:	d105      	bne.n	800848c <UART_DMARxHalfCplt+0x1a>
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8008480:	f8b0 1058 	ldrh.w	r1, [r0, #88]	@ 0x58
 8008484:	0849      	lsrs	r1, r1, #1
 8008486:	f7ff fff3 	bl	8008470 <HAL_UARTEx_RxEventCallback>
}
 800848a:	bd08      	pop	{r3, pc}
    HAL_UART_RxHalfCpltCallback(huart);
 800848c:	f7ff ffc3 	bl	8008416 <HAL_UART_RxHalfCpltCallback>
}
 8008490:	e7fb      	b.n	800848a <UART_DMARxHalfCplt+0x18>

08008492 <UART_DMAReceiveCplt>:
{
 8008492:	b508      	push	{r3, lr}
 8008494:	4603      	mov	r3, r0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008496:	6a40      	ldr	r0, [r0, #36]	@ 0x24
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8008498:	699b      	ldr	r3, [r3, #24]
 800849a:	2b20      	cmp	r3, #32
 800849c:	d032      	beq.n	8008504 <UART_DMAReceiveCplt+0x72>
    huart->RxXferCount = 0U;
 800849e:	2300      	movs	r3, #0
 80084a0:	f8a0 305a 	strh.w	r3, [r0, #90]	@ 0x5a
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80084a4:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084a6:	e852 3f00 	ldrex	r3, [r2]
 80084aa:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084ae:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 80084b2:	6803      	ldr	r3, [r0, #0]
 80084b4:	2900      	cmp	r1, #0
 80084b6:	d1f5      	bne.n	80084a4 <UART_DMAReceiveCplt+0x12>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084b8:	f103 0208 	add.w	r2, r3, #8
 80084bc:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80084c0:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084c4:	f103 0c08 	add.w	ip, r3, #8
 80084c8:	e84c 2100 	strex	r1, r2, [ip]
 80084cc:	2900      	cmp	r1, #0
 80084ce:	d1f3      	bne.n	80084b8 <UART_DMAReceiveCplt+0x26>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084d0:	f103 0208 	add.w	r2, r3, #8
 80084d4:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80084d8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084dc:	f103 0c08 	add.w	ip, r3, #8
 80084e0:	e84c 2100 	strex	r1, r2, [ip]
 80084e4:	2900      	cmp	r1, #0
 80084e6:	d1f3      	bne.n	80084d0 <UART_DMAReceiveCplt+0x3e>
    huart->RxState = HAL_UART_STATE_READY;
 80084e8:	2220      	movs	r2, #32
 80084ea:	f8c0 2080 	str.w	r2, [r0, #128]	@ 0x80
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80084ee:	6e02      	ldr	r2, [r0, #96]	@ 0x60
 80084f0:	2a01      	cmp	r2, #1
 80084f2:	d107      	bne.n	8008504 <UART_DMAReceiveCplt+0x72>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084f4:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80084f8:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084fc:	e843 2100 	strex	r1, r2, [r3]
 8008500:	2900      	cmp	r1, #0
 8008502:	d1f7      	bne.n	80084f4 <UART_DMAReceiveCplt+0x62>
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008504:	2300      	movs	r3, #0
 8008506:	6643      	str	r3, [r0, #100]	@ 0x64
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008508:	6e03      	ldr	r3, [r0, #96]	@ 0x60
 800850a:	2b01      	cmp	r3, #1
 800850c:	d104      	bne.n	8008518 <UART_DMAReceiveCplt+0x86>
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800850e:	f8b0 1058 	ldrh.w	r1, [r0, #88]	@ 0x58
 8008512:	f7ff ffad 	bl	8008470 <HAL_UARTEx_RxEventCallback>
}
 8008516:	bd08      	pop	{r3, pc}
    HAL_UART_RxCpltCallback(huart);
 8008518:	f7ff ff7c 	bl	8008414 <HAL_UART_RxCpltCallback>
}
 800851c:	e7fb      	b.n	8008516 <UART_DMAReceiveCplt+0x84>
	...

08008520 <UART_SetConfig>:
{
 8008520:	b538      	push	{r3, r4, r5, lr}
 8008522:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008524:	69c0      	ldr	r0, [r0, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008526:	6823      	ldr	r3, [r4, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008528:	6925      	ldr	r5, [r4, #16]
 800852a:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800852c:	6819      	ldr	r1, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800852e:	432a      	orrs	r2, r5
 8008530:	6965      	ldr	r5, [r4, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008532:	f421 4116 	bic.w	r1, r1, #38400	@ 0x9600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008536:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008538:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800853c:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800853e:	430a      	orrs	r2, r1
 8008540:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008542:	685a      	ldr	r2, [r3, #4]
 8008544:	68e1      	ldr	r1, [r4, #12]
  tmpreg |= huart->Init.OneBitSampling;
 8008546:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008548:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 800854c:	430a      	orrs	r2, r1
 800854e:	605a      	str	r2, [r3, #4]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008550:	6899      	ldr	r1, [r3, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008552:	69a2      	ldr	r2, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008554:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
  tmpreg |= huart->Init.OneBitSampling;
 8008558:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800855a:	430a      	orrs	r2, r1
 800855c:	609a      	str	r2, [r3, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 800855e:	4a56      	ldr	r2, [pc, #344]	@ (80086b8 <UART_SetConfig+0x198>)
 8008560:	4293      	cmp	r3, r2
 8008562:	d112      	bne.n	800858a <UART_SetConfig+0x6a>
 8008564:	4b55      	ldr	r3, [pc, #340]	@ (80086bc <UART_SetConfig+0x19c>)
 8008566:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008568:	f003 0303 	and.w	r3, r3, #3
 800856c:	2b02      	cmp	r3, #2
 800856e:	f000 8091 	beq.w	8008694 <UART_SetConfig+0x174>
 8008572:	2b03      	cmp	r3, #3
 8008574:	d022      	beq.n	80085bc <UART_SetConfig+0x9c>
 8008576:	2b01      	cmp	r3, #1
 8008578:	f040 8092 	bne.w	80086a0 <UART_SetConfig+0x180>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800857c:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8008580:	f040 8085 	bne.w	800868e <UART_SetConfig+0x16e>
        pclk = HAL_RCC_GetSysClockFreq();
 8008584:	f7fe fc4a 	bl	8006e1c <HAL_RCC_GetSysClockFreq>
        break;
 8008588:	e06b      	b.n	8008662 <UART_SetConfig+0x142>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800858a:	4a4d      	ldr	r2, [pc, #308]	@ (80086c0 <UART_SetConfig+0x1a0>)
 800858c:	4293      	cmp	r3, r2
 800858e:	d12e      	bne.n	80085ee <UART_SetConfig+0xce>
 8008590:	4b4a      	ldr	r3, [pc, #296]	@ (80086bc <UART_SetConfig+0x19c>)
 8008592:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008594:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8008598:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800859c:	d07a      	beq.n	8008694 <UART_SetConfig+0x174>
 800859e:	d80a      	bhi.n	80085b6 <UART_SetConfig+0x96>
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	f000 8083 	beq.w	80086ac <UART_SetConfig+0x18c>
 80085a6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80085aa:	d0e7      	beq.n	800857c <UART_SetConfig+0x5c>
        ret = HAL_ERROR;
 80085ac:	2001      	movs	r0, #1
  huart->RxISR = NULL;
 80085ae:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 80085b0:	e9c4 331a 	strd	r3, r3, [r4, #104]	@ 0x68
}
 80085b4:	bd38      	pop	{r3, r4, r5, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 80085b6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80085ba:	d1f7      	bne.n	80085ac <UART_SetConfig+0x8c>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80085bc:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 80085c0:	4840      	ldr	r0, [pc, #256]	@ (80086c4 <UART_SetConfig+0x1a4>)
 80085c2:	d156      	bne.n	8008672 <UART_SetConfig+0x152>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80085c4:	6862      	ldr	r2, [r4, #4]
 80085c6:	0853      	lsrs	r3, r2, #1
 80085c8:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 80085cc:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80085d0:	f64f 72ef 	movw	r2, #65519	@ 0xffef
 80085d4:	f1a3 0110 	sub.w	r1, r3, #16
 80085d8:	4291      	cmp	r1, r2
 80085da:	d8e7      	bhi.n	80085ac <UART_SetConfig+0x8c>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80085dc:	f023 020f 	bic.w	r2, r3, #15
        huart->Instance->BRR = brrtemp;
 80085e0:	6821      	ldr	r1, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80085e2:	b292      	uxth	r2, r2
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80085e4:	f3c3 0342 	ubfx	r3, r3, #1, #3
        huart->Instance->BRR = brrtemp;
 80085e8:	4313      	orrs	r3, r2
 80085ea:	60cb      	str	r3, [r1, #12]
 80085ec:	e03b      	b.n	8008666 <UART_SetConfig+0x146>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80085ee:	4a36      	ldr	r2, [pc, #216]	@ (80086c8 <UART_SetConfig+0x1a8>)
 80085f0:	4293      	cmp	r3, r2
 80085f2:	d10f      	bne.n	8008614 <UART_SetConfig+0xf4>
 80085f4:	4b31      	ldr	r3, [pc, #196]	@ (80086bc <UART_SetConfig+0x19c>)
 80085f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80085f8:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 80085fc:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8008600:	d048      	beq.n	8008694 <UART_SetConfig+0x174>
 8008602:	d804      	bhi.n	800860e <UART_SetConfig+0xee>
 8008604:	2b00      	cmp	r3, #0
 8008606:	d051      	beq.n	80086ac <UART_SetConfig+0x18c>
 8008608:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800860c:	e7cd      	b.n	80085aa <UART_SetConfig+0x8a>
 800860e:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8008612:	e7d2      	b.n	80085ba <UART_SetConfig+0x9a>
 8008614:	4a2d      	ldr	r2, [pc, #180]	@ (80086cc <UART_SetConfig+0x1ac>)
 8008616:	4293      	cmp	r3, r2
 8008618:	d10f      	bne.n	800863a <UART_SetConfig+0x11a>
 800861a:	4b28      	ldr	r3, [pc, #160]	@ (80086bc <UART_SetConfig+0x19c>)
 800861c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800861e:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8008622:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008626:	d035      	beq.n	8008694 <UART_SetConfig+0x174>
 8008628:	d804      	bhi.n	8008634 <UART_SetConfig+0x114>
 800862a:	2b00      	cmp	r3, #0
 800862c:	d03e      	beq.n	80086ac <UART_SetConfig+0x18c>
 800862e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008632:	e7ba      	b.n	80085aa <UART_SetConfig+0x8a>
 8008634:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008638:	e7bf      	b.n	80085ba <UART_SetConfig+0x9a>
 800863a:	4a25      	ldr	r2, [pc, #148]	@ (80086d0 <UART_SetConfig+0x1b0>)
 800863c:	4293      	cmp	r3, r2
 800863e:	d1b5      	bne.n	80085ac <UART_SetConfig+0x8c>
 8008640:	4b1e      	ldr	r3, [pc, #120]	@ (80086bc <UART_SetConfig+0x19c>)
 8008642:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008644:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8008648:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800864c:	d022      	beq.n	8008694 <UART_SetConfig+0x174>
 800864e:	d803      	bhi.n	8008658 <UART_SetConfig+0x138>
 8008650:	b363      	cbz	r3, 80086ac <UART_SetConfig+0x18c>
 8008652:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008656:	e7a8      	b.n	80085aa <UART_SetConfig+0x8a>
 8008658:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800865c:	e7ad      	b.n	80085ba <UART_SetConfig+0x9a>
        pclk = HAL_RCC_GetPCLK2Freq();
 800865e:	f7fe fcc1 	bl	8006fe4 <HAL_RCC_GetPCLK2Freq>
    if (pclk != 0U)
 8008662:	2800      	cmp	r0, #0
 8008664:	d1ae      	bne.n	80085c4 <UART_SetConfig+0xa4>
        pclk = (uint32_t) HSI_VALUE;
 8008666:	2000      	movs	r0, #0
 8008668:	e7a1      	b.n	80085ae <UART_SetConfig+0x8e>
        pclk = HAL_RCC_GetPCLK1Freq();
 800866a:	f7fe fca3 	bl	8006fb4 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 800866e:	2800      	cmp	r0, #0
 8008670:	d0f9      	beq.n	8008666 <UART_SetConfig+0x146>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008672:	6862      	ldr	r2, [r4, #4]
 8008674:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 8008678:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800867c:	f64f 72ef 	movw	r2, #65519	@ 0xffef
 8008680:	f1a3 0110 	sub.w	r1, r3, #16
 8008684:	4291      	cmp	r1, r2
 8008686:	d891      	bhi.n	80085ac <UART_SetConfig+0x8c>
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008688:	6822      	ldr	r2, [r4, #0]
 800868a:	60d3      	str	r3, [r2, #12]
 800868c:	e7eb      	b.n	8008666 <UART_SetConfig+0x146>
        pclk = HAL_RCC_GetSysClockFreq();
 800868e:	f7fe fbc5 	bl	8006e1c <HAL_RCC_GetSysClockFreq>
        break;
 8008692:	e7ec      	b.n	800866e <UART_SetConfig+0x14e>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008694:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8008698:	d094      	beq.n	80085c4 <UART_SetConfig+0xa4>
 800869a:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 800869e:	e7e8      	b.n	8008672 <UART_SetConfig+0x152>
 80086a0:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 80086a4:	d0db      	beq.n	800865e <UART_SetConfig+0x13e>
        pclk = HAL_RCC_GetPCLK2Freq();
 80086a6:	f7fe fc9d 	bl	8006fe4 <HAL_RCC_GetPCLK2Freq>
        break;
 80086aa:	e7e0      	b.n	800866e <UART_SetConfig+0x14e>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80086ac:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 80086b0:	d1db      	bne.n	800866a <UART_SetConfig+0x14a>
        pclk = HAL_RCC_GetPCLK1Freq();
 80086b2:	f7fe fc7f 	bl	8006fb4 <HAL_RCC_GetPCLK1Freq>
        break;
 80086b6:	e7d4      	b.n	8008662 <UART_SetConfig+0x142>
 80086b8:	40013800 	.word	0x40013800
 80086bc:	40021000 	.word	0x40021000
 80086c0:	40004400 	.word	0x40004400
 80086c4:	007a1200 	.word	0x007a1200
 80086c8:	40004800 	.word	0x40004800
 80086cc:	40004c00 	.word	0x40004c00
 80086d0:	40005000 	.word	0x40005000

080086d4 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80086d4:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 80086d6:	071a      	lsls	r2, r3, #28
{
 80086d8:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80086da:	d506      	bpl.n	80086ea <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80086dc:	6801      	ldr	r1, [r0, #0]
 80086de:	6b44      	ldr	r4, [r0, #52]	@ 0x34
 80086e0:	684a      	ldr	r2, [r1, #4]
 80086e2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80086e6:	4322      	orrs	r2, r4
 80086e8:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80086ea:	07dc      	lsls	r4, r3, #31
 80086ec:	d506      	bpl.n	80086fc <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80086ee:	6801      	ldr	r1, [r0, #0]
 80086f0:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 80086f2:	684a      	ldr	r2, [r1, #4]
 80086f4:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 80086f8:	4322      	orrs	r2, r4
 80086fa:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80086fc:	0799      	lsls	r1, r3, #30
 80086fe:	d506      	bpl.n	800870e <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008700:	6801      	ldr	r1, [r0, #0]
 8008702:	6ac4      	ldr	r4, [r0, #44]	@ 0x2c
 8008704:	684a      	ldr	r2, [r1, #4]
 8008706:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800870a:	4322      	orrs	r2, r4
 800870c:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800870e:	075a      	lsls	r2, r3, #29
 8008710:	d506      	bpl.n	8008720 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008712:	6801      	ldr	r1, [r0, #0]
 8008714:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 8008716:	684a      	ldr	r2, [r1, #4]
 8008718:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800871c:	4322      	orrs	r2, r4
 800871e:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008720:	06dc      	lsls	r4, r3, #27
 8008722:	d506      	bpl.n	8008732 <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008724:	6801      	ldr	r1, [r0, #0]
 8008726:	6b84      	ldr	r4, [r0, #56]	@ 0x38
 8008728:	688a      	ldr	r2, [r1, #8]
 800872a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800872e:	4322      	orrs	r2, r4
 8008730:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008732:	0699      	lsls	r1, r3, #26
 8008734:	d506      	bpl.n	8008744 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008736:	6801      	ldr	r1, [r0, #0]
 8008738:	6bc4      	ldr	r4, [r0, #60]	@ 0x3c
 800873a:	688a      	ldr	r2, [r1, #8]
 800873c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008740:	4322      	orrs	r2, r4
 8008742:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008744:	065a      	lsls	r2, r3, #25
 8008746:	d50f      	bpl.n	8008768 <UART_AdvFeatureConfig+0x94>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008748:	6801      	ldr	r1, [r0, #0]
 800874a:	6c04      	ldr	r4, [r0, #64]	@ 0x40
 800874c:	684a      	ldr	r2, [r1, #4]
 800874e:	f422 1280 	bic.w	r2, r2, #1048576	@ 0x100000
 8008752:	4322      	orrs	r2, r4
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008754:	f5b4 1f80 	cmp.w	r4, #1048576	@ 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008758:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800875a:	d105      	bne.n	8008768 <UART_AdvFeatureConfig+0x94>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800875c:	684a      	ldr	r2, [r1, #4]
 800875e:	6c44      	ldr	r4, [r0, #68]	@ 0x44
 8008760:	f422 02c0 	bic.w	r2, r2, #6291456	@ 0x600000
 8008764:	4322      	orrs	r2, r4
 8008766:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008768:	061b      	lsls	r3, r3, #24
 800876a:	d506      	bpl.n	800877a <UART_AdvFeatureConfig+0xa6>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800876c:	6802      	ldr	r2, [r0, #0]
 800876e:	6c81      	ldr	r1, [r0, #72]	@ 0x48
 8008770:	6853      	ldr	r3, [r2, #4]
 8008772:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 8008776:	430b      	orrs	r3, r1
 8008778:	6053      	str	r3, [r2, #4]
}
 800877a:	bd10      	pop	{r4, pc}

0800877c <UART_WaitOnFlagUntilTimeout>:
{
 800877c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008780:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008784:	4604      	mov	r4, r0
 8008786:	460d      	mov	r5, r1
 8008788:	4617      	mov	r7, r2
 800878a:	4698      	mov	r8, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800878c:	6822      	ldr	r2, [r4, #0]
 800878e:	69d3      	ldr	r3, [r2, #28]
 8008790:	ea35 0303 	bics.w	r3, r5, r3
 8008794:	bf0c      	ite	eq
 8008796:	2301      	moveq	r3, #1
 8008798:	2300      	movne	r3, #0
 800879a:	42bb      	cmp	r3, r7
 800879c:	d001      	beq.n	80087a2 <UART_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
 800879e:	2000      	movs	r0, #0
 80087a0:	e022      	b.n	80087e8 <UART_WaitOnFlagUntilTimeout+0x6c>
    if (Timeout != HAL_MAX_DELAY)
 80087a2:	f1b9 3fff 	cmp.w	r9, #4294967295
 80087a6:	d0f2      	beq.n	800878e <UART_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80087a8:	f7fd f98e 	bl	8005ac8 <HAL_GetTick>
 80087ac:	eba0 0008 	sub.w	r0, r0, r8
 80087b0:	4548      	cmp	r0, r9
 80087b2:	d829      	bhi.n	8008808 <UART_WaitOnFlagUntilTimeout+0x8c>
 80087b4:	f1b9 0f00 	cmp.w	r9, #0
 80087b8:	d026      	beq.n	8008808 <UART_WaitOnFlagUntilTimeout+0x8c>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80087ba:	6821      	ldr	r1, [r4, #0]
 80087bc:	680b      	ldr	r3, [r1, #0]
 80087be:	075a      	lsls	r2, r3, #29
 80087c0:	d5e4      	bpl.n	800878c <UART_WaitOnFlagUntilTimeout+0x10>
 80087c2:	2d80      	cmp	r5, #128	@ 0x80
 80087c4:	d0e2      	beq.n	800878c <UART_WaitOnFlagUntilTimeout+0x10>
 80087c6:	2d40      	cmp	r5, #64	@ 0x40
 80087c8:	d0e0      	beq.n	800878c <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80087ca:	69ce      	ldr	r6, [r1, #28]
 80087cc:	f016 0608 	ands.w	r6, r6, #8
 80087d0:	d00c      	beq.n	80087ec <UART_WaitOnFlagUntilTimeout+0x70>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80087d2:	2508      	movs	r5, #8
          UART_EndRxTransfer(huart);
 80087d4:	4620      	mov	r0, r4
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80087d6:	620d      	str	r5, [r1, #32]
          UART_EndRxTransfer(huart);
 80087d8:	f7ff fd83 	bl	80082e2 <UART_EndRxTransfer>
          __HAL_UNLOCK(huart);
 80087dc:	2300      	movs	r3, #0
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80087de:	f8c4 5084 	str.w	r5, [r4, #132]	@ 0x84
          __HAL_UNLOCK(huart);
 80087e2:	f884 3078 	strb.w	r3, [r4, #120]	@ 0x78
          return HAL_ERROR;
 80087e6:	2001      	movs	r0, #1
}
 80087e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80087ec:	69cb      	ldr	r3, [r1, #28]
 80087ee:	051b      	lsls	r3, r3, #20
 80087f0:	d5cc      	bpl.n	800878c <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80087f2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80087f6:	620b      	str	r3, [r1, #32]
          UART_EndRxTransfer(huart);
 80087f8:	4620      	mov	r0, r4
 80087fa:	f7ff fd72 	bl	80082e2 <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80087fe:	2320      	movs	r3, #32
 8008800:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
          __HAL_UNLOCK(huart);
 8008804:	f884 6078 	strb.w	r6, [r4, #120]	@ 0x78
        return HAL_TIMEOUT;
 8008808:	2003      	movs	r0, #3
 800880a:	e7ed      	b.n	80087e8 <UART_WaitOnFlagUntilTimeout+0x6c>

0800880c <HAL_UART_Transmit>:
{
 800880c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008810:	4698      	mov	r8, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8008812:	6fc3      	ldr	r3, [r0, #124]	@ 0x7c
 8008814:	2b20      	cmp	r3, #32
{
 8008816:	4604      	mov	r4, r0
 8008818:	460e      	mov	r6, r1
 800881a:	4617      	mov	r7, r2
  if (huart->gState == HAL_UART_STATE_READY)
 800881c:	d143      	bne.n	80088a6 <HAL_UART_Transmit+0x9a>
    if ((pData == NULL) || (Size == 0U))
 800881e:	2900      	cmp	r1, #0
 8008820:	d043      	beq.n	80088aa <HAL_UART_Transmit+0x9e>
 8008822:	2a00      	cmp	r2, #0
 8008824:	d041      	beq.n	80088aa <HAL_UART_Transmit+0x9e>
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008826:	2321      	movs	r3, #33	@ 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008828:	2500      	movs	r5, #0
 800882a:	f8c0 5084 	str.w	r5, [r0, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800882e:	67c3      	str	r3, [r0, #124]	@ 0x7c
    tickstart = HAL_GetTick();
 8008830:	f7fd f94a 	bl	8005ac8 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008834:	68a3      	ldr	r3, [r4, #8]
    huart->TxXferSize  = Size;
 8008836:	f8a4 7050 	strh.w	r7, [r4, #80]	@ 0x50
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800883a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
    tickstart = HAL_GetTick();
 800883e:	4681      	mov	r9, r0
    huart->TxXferCount = Size;
 8008840:	f8a4 7052 	strh.w	r7, [r4, #82]	@ 0x52
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008844:	d103      	bne.n	800884e <HAL_UART_Transmit+0x42>
 8008846:	6923      	ldr	r3, [r4, #16]
 8008848:	b90b      	cbnz	r3, 800884e <HAL_UART_Transmit+0x42>
 800884a:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 800884c:	461e      	mov	r6, r3
    while (huart->TxXferCount > 0U)
 800884e:	f8b4 2052 	ldrh.w	r2, [r4, #82]	@ 0x52
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008852:	f8cd 8000 	str.w	r8, [sp]
    while (huart->TxXferCount > 0U)
 8008856:	b292      	uxth	r2, r2
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008858:	464b      	mov	r3, r9
    while (huart->TxXferCount > 0U)
 800885a:	b93a      	cbnz	r2, 800886c <HAL_UART_Transmit+0x60>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800885c:	2140      	movs	r1, #64	@ 0x40
 800885e:	4620      	mov	r0, r4
 8008860:	f7ff ff8c 	bl	800877c <UART_WaitOnFlagUntilTimeout>
 8008864:	2320      	movs	r3, #32
 8008866:	b940      	cbnz	r0, 800887a <HAL_UART_Transmit+0x6e>
    huart->gState = HAL_UART_STATE_READY;
 8008868:	67e3      	str	r3, [r4, #124]	@ 0x7c
    return HAL_OK;
 800886a:	e008      	b.n	800887e <HAL_UART_Transmit+0x72>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800886c:	2200      	movs	r2, #0
 800886e:	2180      	movs	r1, #128	@ 0x80
 8008870:	4620      	mov	r0, r4
 8008872:	f7ff ff83 	bl	800877c <UART_WaitOnFlagUntilTimeout>
 8008876:	b128      	cbz	r0, 8008884 <HAL_UART_Transmit+0x78>
        huart->gState = HAL_UART_STATE_READY;
 8008878:	2320      	movs	r3, #32
 800887a:	67e3      	str	r3, [r4, #124]	@ 0x7c
        return HAL_TIMEOUT;
 800887c:	2003      	movs	r0, #3
}
 800887e:	b003      	add	sp, #12
 8008880:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008884:	6822      	ldr	r2, [r4, #0]
      if (pdata8bits == NULL)
 8008886:	b95e      	cbnz	r6, 80088a0 <HAL_UART_Transmit+0x94>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008888:	f835 3b02 	ldrh.w	r3, [r5], #2
 800888c:	f3c3 0308 	ubfx	r3, r3, #0, #9
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008890:	8513      	strh	r3, [r2, #40]	@ 0x28
      huart->TxXferCount--;
 8008892:	f8b4 2052 	ldrh.w	r2, [r4, #82]	@ 0x52
 8008896:	3a01      	subs	r2, #1
 8008898:	b292      	uxth	r2, r2
 800889a:	f8a4 2052 	strh.w	r2, [r4, #82]	@ 0x52
 800889e:	e7d6      	b.n	800884e <HAL_UART_Transmit+0x42>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80088a0:	f816 3b01 	ldrb.w	r3, [r6], #1
 80088a4:	e7f4      	b.n	8008890 <HAL_UART_Transmit+0x84>
    return HAL_BUSY;
 80088a6:	2002      	movs	r0, #2
 80088a8:	e7e9      	b.n	800887e <HAL_UART_Transmit+0x72>
      return  HAL_ERROR;
 80088aa:	2001      	movs	r0, #1
 80088ac:	e7e7      	b.n	800887e <HAL_UART_Transmit+0x72>

080088ae <UART_CheckIdleState>:
{
 80088ae:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80088b0:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80088b2:	2600      	movs	r6, #0
 80088b4:	f8c0 6084 	str.w	r6, [r0, #132]	@ 0x84
  tickstart = HAL_GetTick();
 80088b8:	f7fd f906 	bl	8005ac8 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80088bc:	6823      	ldr	r3, [r4, #0]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	071a      	lsls	r2, r3, #28
  tickstart = HAL_GetTick();
 80088c2:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80088c4:	d51b      	bpl.n	80088fe <UART_CheckIdleState+0x50>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80088c6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80088ca:	9300      	str	r3, [sp, #0]
 80088cc:	4632      	mov	r2, r6
 80088ce:	4603      	mov	r3, r0
 80088d0:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80088d4:	4620      	mov	r0, r4
 80088d6:	f7ff ff51 	bl	800877c <UART_WaitOnFlagUntilTimeout>
 80088da:	b180      	cbz	r0, 80088fe <UART_CheckIdleState+0x50>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80088dc:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088de:	e852 3f00 	ldrex	r3, [r2]
 80088e2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088e6:	e842 3100 	strex	r1, r3, [r2]
 80088ea:	2900      	cmp	r1, #0
 80088ec:	d1f6      	bne.n	80088dc <UART_CheckIdleState+0x2e>
      huart->gState = HAL_UART_STATE_READY;
 80088ee:	2320      	movs	r3, #32
 80088f0:	67e3      	str	r3, [r4, #124]	@ 0x7c
      return HAL_TIMEOUT;
 80088f2:	2003      	movs	r0, #3
      __HAL_UNLOCK(huart);
 80088f4:	2300      	movs	r3, #0
 80088f6:	f884 3078 	strb.w	r3, [r4, #120]	@ 0x78
}
 80088fa:	b002      	add	sp, #8
 80088fc:	bd70      	pop	{r4, r5, r6, pc}
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80088fe:	6823      	ldr	r3, [r4, #0]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	075b      	lsls	r3, r3, #29
 8008904:	d524      	bpl.n	8008950 <UART_CheckIdleState+0xa2>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008906:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800890a:	9300      	str	r3, [sp, #0]
 800890c:	2200      	movs	r2, #0
 800890e:	462b      	mov	r3, r5
 8008910:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8008914:	4620      	mov	r0, r4
 8008916:	f7ff ff31 	bl	800877c <UART_WaitOnFlagUntilTimeout>
 800891a:	b1c8      	cbz	r0, 8008950 <UART_CheckIdleState+0xa2>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800891c:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800891e:	e852 3f00 	ldrex	r3, [r2]
 8008922:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008926:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 800892a:	6822      	ldr	r2, [r4, #0]
 800892c:	2900      	cmp	r1, #0
 800892e:	d1f5      	bne.n	800891c <UART_CheckIdleState+0x6e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008930:	f102 0308 	add.w	r3, r2, #8
 8008934:	e853 3f00 	ldrex	r3, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008938:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800893c:	f102 0008 	add.w	r0, r2, #8
 8008940:	e840 3100 	strex	r1, r3, [r0]
 8008944:	2900      	cmp	r1, #0
 8008946:	d1f3      	bne.n	8008930 <UART_CheckIdleState+0x82>
      huart->RxState = HAL_UART_STATE_READY;
 8008948:	2320      	movs	r3, #32
 800894a:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
      return HAL_TIMEOUT;
 800894e:	e7d0      	b.n	80088f2 <UART_CheckIdleState+0x44>
  huart->gState = HAL_UART_STATE_READY;
 8008950:	2320      	movs	r3, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008952:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8008954:	67e3      	str	r3, [r4, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8008956:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800895a:	6620      	str	r0, [r4, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800895c:	6660      	str	r0, [r4, #100]	@ 0x64
  return HAL_OK;
 800895e:	e7c9      	b.n	80088f4 <UART_CheckIdleState+0x46>

08008960 <HAL_UART_Init>:
{
 8008960:	b510      	push	{r4, lr}
  if (huart == NULL)
 8008962:	4604      	mov	r4, r0
 8008964:	b340      	cbz	r0, 80089b8 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 8008966:	6fc3      	ldr	r3, [r0, #124]	@ 0x7c
 8008968:	b91b      	cbnz	r3, 8008972 <HAL_UART_Init+0x12>
    huart->Lock = HAL_UNLOCKED;
 800896a:	f880 3078 	strb.w	r3, [r0, #120]	@ 0x78
    HAL_UART_MspInit(huart);
 800896e:	f7fc fdf5 	bl	800555c <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8008972:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8008974:	2324      	movs	r3, #36	@ 0x24
 8008976:	67e3      	str	r3, [r4, #124]	@ 0x7c
  __HAL_UART_DISABLE(huart);
 8008978:	6813      	ldr	r3, [r2, #0]
 800897a:	f023 0301 	bic.w	r3, r3, #1
 800897e:	6013      	str	r3, [r2, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008980:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8008982:	b113      	cbz	r3, 800898a <HAL_UART_Init+0x2a>
    UART_AdvFeatureConfig(huart);
 8008984:	4620      	mov	r0, r4
 8008986:	f7ff fea5 	bl	80086d4 <UART_AdvFeatureConfig>
  if (UART_SetConfig(huart) == HAL_ERROR)
 800898a:	4620      	mov	r0, r4
 800898c:	f7ff fdc8 	bl	8008520 <UART_SetConfig>
 8008990:	2801      	cmp	r0, #1
 8008992:	d011      	beq.n	80089b8 <HAL_UART_Init+0x58>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008994:	6823      	ldr	r3, [r4, #0]
 8008996:	685a      	ldr	r2, [r3, #4]
 8008998:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800899c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800899e:	689a      	ldr	r2, [r3, #8]
 80089a0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80089a4:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 80089a6:	681a      	ldr	r2, [r3, #0]
 80089a8:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 80089ac:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 80089ae:	601a      	str	r2, [r3, #0]
}
 80089b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 80089b4:	f7ff bf7b 	b.w	80088ae <UART_CheckIdleState>
}
 80089b8:	2001      	movs	r0, #1
 80089ba:	bd10      	pop	{r4, pc}

080089bc <UART_Start_Receive_DMA>:
{
 80089bc:	b570      	push	{r4, r5, r6, lr}
 80089be:	4613      	mov	r3, r2
 80089c0:	4604      	mov	r4, r0
  huart->RxXferSize = Size;
 80089c2:	f8a0 2058 	strh.w	r2, [r0, #88]	@ 0x58
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80089c6:	2200      	movs	r2, #0
  huart->pRxBuffPtr = pData;
 80089c8:	6541      	str	r1, [r0, #84]	@ 0x54
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80089ca:	f8c0 2084 	str.w	r2, [r0, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80089ce:	2022      	movs	r0, #34	@ 0x22
 80089d0:	f8c4 0080 	str.w	r0, [r4, #128]	@ 0x80
  if (huart->hdmarx != NULL)
 80089d4:	6f60      	ldr	r0, [r4, #116]	@ 0x74
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80089d6:	6825      	ldr	r5, [r4, #0]
  if (huart->hdmarx != NULL)
 80089d8:	b1a0      	cbz	r0, 8008a04 <UART_Start_Receive_DMA+0x48>
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80089da:	4e1c      	ldr	r6, [pc, #112]	@ (8008a4c <UART_Start_Receive_DMA+0x90>)
 80089dc:	6286      	str	r6, [r0, #40]	@ 0x28
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80089de:	4e1c      	ldr	r6, [pc, #112]	@ (8008a50 <UART_Start_Receive_DMA+0x94>)
 80089e0:	62c6      	str	r6, [r0, #44]	@ 0x2c
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80089e2:	4e1c      	ldr	r6, [pc, #112]	@ (8008a54 <UART_Start_Receive_DMA+0x98>)
    huart->hdmarx->XferAbortCallback = NULL;
 80089e4:	e9c0 620c 	strd	r6, r2, [r0, #48]	@ 0x30
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80089e8:	460a      	mov	r2, r1
 80089ea:	f105 0124 	add.w	r1, r5, #36	@ 0x24
 80089ee:	f7fd fe45 	bl	800667c <HAL_DMA_Start_IT>
 80089f2:	b138      	cbz	r0, 8008a04 <UART_Start_Receive_DMA+0x48>
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80089f4:	2310      	movs	r3, #16
 80089f6:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
      huart->RxState = HAL_UART_STATE_READY;
 80089fa:	2320      	movs	r3, #32
 80089fc:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
      return HAL_ERROR;
 8008a00:	2001      	movs	r0, #1
}
 8008a02:	bd70      	pop	{r4, r5, r6, pc}
  if (huart->Init.Parity != UART_PARITY_NONE)
 8008a04:	6922      	ldr	r2, [r4, #16]
 8008a06:	6823      	ldr	r3, [r4, #0]
 8008a08:	b13a      	cbz	r2, 8008a1a <UART_Start_Receive_DMA+0x5e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a0a:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008a0e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a12:	e843 2100 	strex	r1, r2, [r3]
 8008a16:	2900      	cmp	r1, #0
 8008a18:	d1f7      	bne.n	8008a0a <UART_Start_Receive_DMA+0x4e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a1a:	f103 0208 	add.w	r2, r3, #8
 8008a1e:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a22:	f042 0201 	orr.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a26:	f103 0008 	add.w	r0, r3, #8
 8008a2a:	e840 2100 	strex	r1, r2, [r0]
 8008a2e:	2900      	cmp	r1, #0
 8008a30:	d1f3      	bne.n	8008a1a <UART_Start_Receive_DMA+0x5e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a32:	f103 0208 	add.w	r2, r3, #8
 8008a36:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008a3a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a3e:	f103 0108 	add.w	r1, r3, #8
 8008a42:	e841 2000 	strex	r0, r2, [r1]
 8008a46:	2800      	cmp	r0, #0
 8008a48:	d1f3      	bne.n	8008a32 <UART_Start_Receive_DMA+0x76>
 8008a4a:	e7da      	b.n	8008a02 <UART_Start_Receive_DMA+0x46>
 8008a4c:	08008493 	.word	0x08008493
 8008a50:	08008473 	.word	0x08008473
 8008a54:	0800841b 	.word	0x0800841b

08008a58 <HAL_UART_Receive_DMA>:
  if (huart->RxState == HAL_UART_STATE_READY)
 8008a58:	f8d0 3080 	ldr.w	r3, [r0, #128]	@ 0x80
 8008a5c:	2b20      	cmp	r3, #32
{
 8008a5e:	b430      	push	{r4, r5}
  if (huart->RxState == HAL_UART_STATE_READY)
 8008a60:	d112      	bne.n	8008a88 <HAL_UART_Receive_DMA+0x30>
    if ((pData == NULL) || (Size == 0U))
 8008a62:	b1a1      	cbz	r1, 8008a8e <HAL_UART_Receive_DMA+0x36>
 8008a64:	b19a      	cbz	r2, 8008a8e <HAL_UART_Receive_DMA+0x36>
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a66:	2300      	movs	r3, #0
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008a68:	6804      	ldr	r4, [r0, #0]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a6a:	6603      	str	r3, [r0, #96]	@ 0x60
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008a6c:	6863      	ldr	r3, [r4, #4]
 8008a6e:	021b      	lsls	r3, r3, #8
 8008a70:	d507      	bpl.n	8008a82 <HAL_UART_Receive_DMA+0x2a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a72:	e854 3f00 	ldrex	r3, [r4]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008a76:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a7a:	e844 3500 	strex	r5, r3, [r4]
 8008a7e:	2d00      	cmp	r5, #0
 8008a80:	d1f7      	bne.n	8008a72 <HAL_UART_Receive_DMA+0x1a>
}
 8008a82:	bc30      	pop	{r4, r5}
    return (UART_Start_Receive_DMA(huart, pData, Size));
 8008a84:	f7ff bf9a 	b.w	80089bc <UART_Start_Receive_DMA>
    return HAL_BUSY;
 8008a88:	2002      	movs	r0, #2
}
 8008a8a:	bc30      	pop	{r4, r5}
 8008a8c:	4770      	bx	lr
      return HAL_ERROR;
 8008a8e:	2001      	movs	r0, #1
 8008a90:	e7fb      	b.n	8008a8a <HAL_UART_Receive_DMA+0x32>
	...

08008a94 <osKernelInitialize>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008a94:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 8008a98:	b113      	cbz	r3, 8008aa0 <osKernelInitialize+0xc>
    stat = osErrorISR;
 8008a9a:	f06f 0005 	mvn.w	r0, #5
 8008a9e:	4770      	bx	lr
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008aa0:	f3ef 8310 	mrs	r3, PRIMASK
  if (IS_IRQ()) {
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d1f8      	bne.n	8008a9a <osKernelInitialize+0x6>
 8008aa8:	4b07      	ldr	r3, [pc, #28]	@ (8008ac8 <osKernelInitialize+0x34>)
 8008aaa:	6818      	ldr	r0, [r3, #0]
 8008aac:	2802      	cmp	r0, #2
 8008aae:	d106      	bne.n	8008abe <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008ab0:	f3ef 8311 	mrs	r3, BASEPRI
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d1f0      	bne.n	8008a9a <osKernelInitialize+0x6>
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
      stat = osOK;
    } else {
      stat = osError;
 8008ab8:	f04f 30ff 	mov.w	r0, #4294967295
    }
  }

  return (stat);
}
 8008abc:	4770      	bx	lr
    if (KernelState == osKernelInactive) {
 8008abe:	2800      	cmp	r0, #0
 8008ac0:	d1fa      	bne.n	8008ab8 <osKernelInitialize+0x24>
      KernelState = osKernelReady;
 8008ac2:	2201      	movs	r2, #1
 8008ac4:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8008ac6:	4770      	bx	lr
 8008ac8:	2000897c 	.word	0x2000897c

08008acc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8008acc:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008ace:	f3ef 8305 	mrs	r3, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 8008ad2:	b113      	cbz	r3, 8008ada <osKernelStart+0xe>
    stat = osErrorISR;
 8008ad4:	f06f 0005 	mvn.w	r0, #5
      stat = osError;
    }
  }

  return (stat);
}
 8008ad8:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008ada:	f3ef 8410 	mrs	r4, PRIMASK
  if (IS_IRQ()) {
 8008ade:	2c00      	cmp	r4, #0
 8008ae0:	d1f8      	bne.n	8008ad4 <osKernelStart+0x8>
 8008ae2:	4b09      	ldr	r3, [pc, #36]	@ (8008b08 <osKernelStart+0x3c>)
 8008ae4:	681a      	ldr	r2, [r3, #0]
 8008ae6:	2a02      	cmp	r2, #2
 8008ae8:	d106      	bne.n	8008af8 <osKernelStart+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008aea:	f3ef 8311 	mrs	r3, BASEPRI
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d1f0      	bne.n	8008ad4 <osKernelStart+0x8>
      stat = osError;
 8008af2:	f04f 30ff 	mov.w	r0, #4294967295
  return (stat);
 8008af6:	e7ef      	b.n	8008ad8 <osKernelStart+0xc>
    if (KernelState == osKernelReady) {
 8008af8:	2a01      	cmp	r2, #1
 8008afa:	d1fa      	bne.n	8008af2 <osKernelStart+0x26>
      KernelState = osKernelRunning;
 8008afc:	2202      	movs	r2, #2
 8008afe:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8008b00:	f000 fee2 	bl	80098c8 <vTaskStartScheduler>
      stat = osOK;
 8008b04:	4620      	mov	r0, r4
 8008b06:	e7e7      	b.n	8008ad8 <osKernelStart+0xc>
 8008b08:	2000897c 	.word	0x2000897c

08008b0c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8008b0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008b0e:	b087      	sub	sp, #28
 8008b10:	4614      	mov	r4, r2
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8008b12:	2200      	movs	r2, #0
osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8008b14:	460b      	mov	r3, r1
  hTask = NULL;
 8008b16:	9205      	str	r2, [sp, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008b18:	f3ef 8205 	mrs	r2, IPSR

  if (!IS_IRQ() && (func != NULL)) {
 8008b1c:	bb52      	cbnz	r2, 8008b74 <osThreadNew+0x68>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008b1e:	f3ef 8210 	mrs	r2, PRIMASK
 8008b22:	bb3a      	cbnz	r2, 8008b74 <osThreadNew+0x68>
 8008b24:	4a26      	ldr	r2, [pc, #152]	@ (8008bc0 <osThreadNew+0xb4>)
 8008b26:	6812      	ldr	r2, [r2, #0]
 8008b28:	2a02      	cmp	r2, #2
 8008b2a:	d102      	bne.n	8008b32 <osThreadNew+0x26>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008b2c:	f3ef 8211 	mrs	r2, BASEPRI
 8008b30:	bb02      	cbnz	r2, 8008b74 <osThreadNew+0x68>
 8008b32:	b1f8      	cbz	r0, 8008b74 <osThreadNew+0x68>
    stack = configMINIMAL_STACK_SIZE;
    prio  = (UBaseType_t)osPriorityNormal;

    empty = '\0';
 8008b34:	2200      	movs	r2, #0
 8008b36:	f88d 2013 	strb.w	r2, [sp, #19]
    name  = &empty;
    mem   = -1;

    if (attr != NULL) {
 8008b3a:	2c00      	cmp	r4, #0
 8008b3c:	d030      	beq.n	8008ba0 <osThreadNew+0x94>
      if (attr->name != NULL) {
 8008b3e:	6821      	ldr	r1, [r4, #0]
 8008b40:	b909      	cbnz	r1, 8008b46 <osThreadNew+0x3a>
    name  = &empty;
 8008b42:	f10d 0113 	add.w	r1, sp, #19
        name = attr->name;
      }
      if (attr->priority != osPriorityNone) {
 8008b46:	69a5      	ldr	r5, [r4, #24]
 8008b48:	2d00      	cmp	r5, #0
 8008b4a:	bf08      	it	eq
 8008b4c:	2518      	moveq	r5, #24
        prio = (UBaseType_t)attr->priority;
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8008b4e:	1e6a      	subs	r2, r5, #1
 8008b50:	2a37      	cmp	r2, #55	@ 0x37
 8008b52:	46ac      	mov	ip, r5
 8008b54:	d82a      	bhi.n	8008bac <osThreadNew+0xa0>
 8008b56:	6862      	ldr	r2, [r4, #4]
 8008b58:	07d2      	lsls	r2, r2, #31
 8008b5a:	d427      	bmi.n	8008bac <osThreadNew+0xa0>
        return (NULL);
      }

      if (attr->stack_size > 0U) {
 8008b5c:	6966      	ldr	r6, [r4, #20]
 8008b5e:	b166      	cbz	r6, 8008b7a <osThreadNew+0x6e>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8008b60:	08b2      	lsrs	r2, r6, #2
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008b62:	e9d4 7e02 	ldrd	r7, lr, [r4, #8]
 8008b66:	b157      	cbz	r7, 8008b7e <osThreadNew+0x72>
 8008b68:	f1be 0f5b 	cmp.w	lr, #91	@ 0x5b
 8008b6c:	d902      	bls.n	8008b74 <osThreadNew+0x68>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008b6e:	6924      	ldr	r4, [r4, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008b70:	b104      	cbz	r4, 8008b74 <osThreadNew+0x68>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008b72:	b9ee      	cbnz	r6, 8008bb0 <osThreadNew+0xa4>
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8008b74:	9805      	ldr	r0, [sp, #20]
}
 8008b76:	b007      	add	sp, #28
 8008b78:	bdf0      	pop	{r4, r5, r6, r7, pc}
    stack = configMINIMAL_STACK_SIZE;
 8008b7a:	2240      	movs	r2, #64	@ 0x40
 8008b7c:	e7f1      	b.n	8008b62 <osThreadNew+0x56>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8008b7e:	f1be 0f00 	cmp.w	lr, #0
 8008b82:	d1f7      	bne.n	8008b74 <osThreadNew+0x68>
      if (mem == 0) {
 8008b84:	6924      	ldr	r4, [r4, #16]
 8008b86:	2c00      	cmp	r4, #0
 8008b88:	d1f4      	bne.n	8008b74 <osThreadNew+0x68>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8008b8a:	ac05      	add	r4, sp, #20
 8008b8c:	e9cd c400 	strd	ip, r4, [sp]
 8008b90:	b292      	uxth	r2, r2
 8008b92:	f000 fe6b 	bl	800986c <xTaskCreate>
 8008b96:	2801      	cmp	r0, #1
          hTask = NULL;
 8008b98:	bf1c      	itt	ne
 8008b9a:	2300      	movne	r3, #0
 8008b9c:	9305      	strne	r3, [sp, #20]
 8008b9e:	e7e9      	b.n	8008b74 <osThreadNew+0x68>
    prio  = (UBaseType_t)osPriorityNormal;
 8008ba0:	f04f 0c18 	mov.w	ip, #24
    stack = configMINIMAL_STACK_SIZE;
 8008ba4:	2240      	movs	r2, #64	@ 0x40
    name  = &empty;
 8008ba6:	f10d 0113 	add.w	r1, sp, #19
 8008baa:	e7ee      	b.n	8008b8a <osThreadNew+0x7e>
        return (NULL);
 8008bac:	2000      	movs	r0, #0
 8008bae:	e7e2      	b.n	8008b76 <osThreadNew+0x6a>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008bb0:	e9cd 4701 	strd	r4, r7, [sp, #4]
 8008bb4:	9500      	str	r5, [sp, #0]
 8008bb6:	f000 fe22 	bl	80097fe <xTaskCreateStatic>
 8008bba:	9005      	str	r0, [sp, #20]
 8008bbc:	e7da      	b.n	8008b74 <osThreadNew+0x68>
 8008bbe:	bf00      	nop
 8008bc0:	2000897c 	.word	0x2000897c

08008bc4 <osThreadGetStackSpace>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008bc4:	f3ef 8305 	mrs	r3, IPSR

uint32_t osThreadGetStackSpace (osThreadId_t thread_id) {
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
  uint32_t sz;

  if (IS_IRQ() || (hTask == NULL)) {
 8008bc8:	b963      	cbnz	r3, 8008be4 <osThreadGetStackSpace+0x20>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008bca:	f3ef 8310 	mrs	r3, PRIMASK
 8008bce:	b94b      	cbnz	r3, 8008be4 <osThreadGetStackSpace+0x20>
 8008bd0:	4b05      	ldr	r3, [pc, #20]	@ (8008be8 <osThreadGetStackSpace+0x24>)
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	2b02      	cmp	r3, #2
 8008bd6:	d102      	bne.n	8008bde <osThreadGetStackSpace+0x1a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008bd8:	f3ef 8311 	mrs	r3, BASEPRI
 8008bdc:	b913      	cbnz	r3, 8008be4 <osThreadGetStackSpace+0x20>
 8008bde:	b108      	cbz	r0, 8008be4 <osThreadGetStackSpace+0x20>
    sz = 0U;
  } else {
    sz = (uint32_t)uxTaskGetStackHighWaterMark (hTask);
 8008be0:	f001 b8f4 	b.w	8009dcc <uxTaskGetStackHighWaterMark>
  }

  return (sz);
}
 8008be4:	2000      	movs	r0, #0
 8008be6:	4770      	bx	lr
 8008be8:	2000897c 	.word	0x2000897c

08008bec <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8008bec:	b508      	push	{r3, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008bee:	f3ef 8305 	mrs	r3, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 8008bf2:	b113      	cbz	r3, 8008bfa <osDelay+0xe>
    stat = osErrorISR;
 8008bf4:	f06f 0005 	mvn.w	r0, #5
      vTaskDelay(ticks);
    }
  }

  return (stat);
}
 8008bf8:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008bfa:	f3ef 8310 	mrs	r3, PRIMASK
  if (IS_IRQ()) {
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d1f8      	bne.n	8008bf4 <osDelay+0x8>
 8008c02:	4b06      	ldr	r3, [pc, #24]	@ (8008c1c <osDelay+0x30>)
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	2b02      	cmp	r3, #2
 8008c08:	d103      	bne.n	8008c12 <osDelay+0x26>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008c0a:	f3ef 8311 	mrs	r3, BASEPRI
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d1f0      	bne.n	8008bf4 <osDelay+0x8>
    if (ticks != 0U) {
 8008c12:	b108      	cbz	r0, 8008c18 <osDelay+0x2c>
      vTaskDelay(ticks);
 8008c14:	f000 ffb6 	bl	8009b84 <vTaskDelay>
    stat = osOK;
 8008c18:	2000      	movs	r0, #0
  return (stat);
 8008c1a:	e7ed      	b.n	8008bf8 <osDelay+0xc>
 8008c1c:	2000897c 	.word	0x2000897c

08008c20 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8008c20:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008c22:	4614      	mov	r4, r2
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008c24:	f3ef 8305 	mrs	r3, IPSR
  const char *name;
  #endif

  hQueue = NULL;

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8008c28:	b11b      	cbz	r3, 8008c32 <osMessageQueueNew+0x12>
  hQueue = NULL;
 8008c2a:	2500      	movs	r5, #0
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
}
 8008c2c:	4628      	mov	r0, r5
 8008c2e:	b002      	add	sp, #8
 8008c30:	bd70      	pop	{r4, r5, r6, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008c32:	f3ef 8310 	mrs	r3, PRIMASK
  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d1f7      	bne.n	8008c2a <osMessageQueueNew+0xa>
 8008c3a:	4b1c      	ldr	r3, [pc, #112]	@ (8008cac <osMessageQueueNew+0x8c>)
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	2b02      	cmp	r3, #2
 8008c40:	d103      	bne.n	8008c4a <osMessageQueueNew+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008c42:	f3ef 8311 	mrs	r3, BASEPRI
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d1ef      	bne.n	8008c2a <osMessageQueueNew+0xa>
 8008c4a:	2800      	cmp	r0, #0
 8008c4c:	d0ed      	beq.n	8008c2a <osMessageQueueNew+0xa>
 8008c4e:	2900      	cmp	r1, #0
 8008c50:	d0eb      	beq.n	8008c2a <osMessageQueueNew+0xa>
    if (attr != NULL) {
 8008c52:	b1ec      	cbz	r4, 8008c90 <osMessageQueueNew+0x70>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8008c54:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
 8008c58:	b193      	cbz	r3, 8008c80 <osMessageQueueNew+0x60>
 8008c5a:	2a4f      	cmp	r2, #79	@ 0x4f
 8008c5c:	d9e5      	bls.n	8008c2a <osMessageQueueNew+0xa>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8008c5e:	6922      	ldr	r2, [r4, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8008c60:	2a00      	cmp	r2, #0
 8008c62:	d0e2      	beq.n	8008c2a <osMessageQueueNew+0xa>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8008c64:	6966      	ldr	r6, [r4, #20]
 8008c66:	fb01 f500 	mul.w	r5, r1, r0
 8008c6a:	42ae      	cmp	r6, r5
 8008c6c:	d3dd      	bcc.n	8008c2a <osMessageQueueNew+0xa>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8008c6e:	2500      	movs	r5, #0
 8008c70:	9500      	str	r5, [sp, #0]
 8008c72:	f000 f9c6 	bl	8009002 <xQueueGenericCreateStatic>
    if (hQueue != NULL) {
 8008c76:	4605      	mov	r5, r0
 8008c78:	2800      	cmp	r0, #0
 8008c7a:	d0d6      	beq.n	8008c2a <osMessageQueueNew+0xa>
        name = attr->name;
 8008c7c:	6824      	ldr	r4, [r4, #0]
 8008c7e:	e00f      	b.n	8008ca0 <osMessageQueueNew+0x80>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8008c80:	2a00      	cmp	r2, #0
 8008c82:	d1d2      	bne.n	8008c2a <osMessageQueueNew+0xa>
 8008c84:	6923      	ldr	r3, [r4, #16]
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d1cf      	bne.n	8008c2a <osMessageQueueNew+0xa>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8008c8a:	6963      	ldr	r3, [r4, #20]
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d1cc      	bne.n	8008c2a <osMessageQueueNew+0xa>
        hQueue = xQueueCreate (msg_count, msg_size);
 8008c90:	2200      	movs	r2, #0
 8008c92:	f000 fa03 	bl	800909c <xQueueGenericCreate>
    if (hQueue != NULL) {
 8008c96:	4605      	mov	r5, r0
 8008c98:	2800      	cmp	r0, #0
 8008c9a:	d0c6      	beq.n	8008c2a <osMessageQueueNew+0xa>
      if (attr != NULL) {
 8008c9c:	2c00      	cmp	r4, #0
 8008c9e:	d1ed      	bne.n	8008c7c <osMessageQueueNew+0x5c>
      vQueueAddToRegistry (hQueue, name);
 8008ca0:	4621      	mov	r1, r4
 8008ca2:	4628      	mov	r0, r5
 8008ca4:	f000 fc1a 	bl	80094dc <vQueueAddToRegistry>
  return ((osMessageQueueId_t)hQueue);
 8008ca8:	e7c0      	b.n	8008c2c <osMessageQueueNew+0xc>
 8008caa:	bf00      	nop
 8008cac:	2000897c 	.word	0x2000897c

08008cb0 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8008cb0:	b513      	push	{r0, r1, r4, lr}
 8008cb2:	461c      	mov	r4, r3
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008cb4:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 8008cb8:	b123      	cbz	r3, 8008cc4 <osMessageQueuePut+0x14>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8008cba:	b9e8      	cbnz	r0, 8008cf8 <osMessageQueuePut+0x48>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
      stat = osErrorParameter;
 8008cbc:	f06f 0003 	mvn.w	r0, #3
      }
    }
  }

  return (stat);
}
 8008cc0:	b002      	add	sp, #8
 8008cc2:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008cc4:	f3ef 8310 	mrs	r3, PRIMASK
  if (IS_IRQ()) {
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d1f6      	bne.n	8008cba <osMessageQueuePut+0xa>
 8008ccc:	4b19      	ldr	r3, [pc, #100]	@ (8008d34 <osMessageQueuePut+0x84>)
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	2b02      	cmp	r3, #2
 8008cd2:	d103      	bne.n	8008cdc <osMessageQueuePut+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008cd4:	f3ef 8311 	mrs	r3, BASEPRI
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d1ee      	bne.n	8008cba <osMessageQueuePut+0xa>
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8008cdc:	2800      	cmp	r0, #0
 8008cde:	d0ed      	beq.n	8008cbc <osMessageQueuePut+0xc>
 8008ce0:	2900      	cmp	r1, #0
 8008ce2:	d0eb      	beq.n	8008cbc <osMessageQueuePut+0xc>
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8008ce4:	2300      	movs	r3, #0
 8008ce6:	4622      	mov	r2, r4
 8008ce8:	f000 f9ff 	bl	80090ea <xQueueGenericSend>
 8008cec:	2801      	cmp	r0, #1
 8008cee:	d013      	beq.n	8008d18 <osMessageQueuePut+0x68>
        if (timeout != 0U) {
 8008cf0:	b16c      	cbz	r4, 8008d0e <osMessageQueuePut+0x5e>
          stat = osErrorTimeout;
 8008cf2:	f06f 0001 	mvn.w	r0, #1
  return (stat);
 8008cf6:	e7e3      	b.n	8008cc0 <osMessageQueuePut+0x10>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8008cf8:	2900      	cmp	r1, #0
 8008cfa:	d0df      	beq.n	8008cbc <osMessageQueuePut+0xc>
 8008cfc:	2c00      	cmp	r4, #0
 8008cfe:	d1dd      	bne.n	8008cbc <osMessageQueuePut+0xc>
      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8008d00:	4623      	mov	r3, r4
 8008d02:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 8008d04:	9401      	str	r4, [sp, #4]
      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8008d06:	f000 faa2 	bl	800924e <xQueueGenericSendFromISR>
 8008d0a:	2801      	cmp	r0, #1
 8008d0c:	d002      	beq.n	8008d14 <osMessageQueuePut+0x64>
        stat = osErrorResource;
 8008d0e:	f06f 0002 	mvn.w	r0, #2
 8008d12:	e7d5      	b.n	8008cc0 <osMessageQueuePut+0x10>
        portYIELD_FROM_ISR (yield);
 8008d14:	9b01      	ldr	r3, [sp, #4]
 8008d16:	b90b      	cbnz	r3, 8008d1c <osMessageQueuePut+0x6c>
  stat = osOK;
 8008d18:	2000      	movs	r0, #0
 8008d1a:	e7d1      	b.n	8008cc0 <osMessageQueuePut+0x10>
        portYIELD_FROM_ISR (yield);
 8008d1c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8008d20:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008d24:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8008d28:	f3bf 8f4f 	dsb	sy
 8008d2c:	f3bf 8f6f 	isb	sy
 8008d30:	e7f2      	b.n	8008d18 <osMessageQueuePut+0x68>
 8008d32:	bf00      	nop
 8008d34:	2000897c 	.word	0x2000897c

08008d38 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8008d38:	b513      	push	{r0, r1, r4, lr}
 8008d3a:	461c      	mov	r4, r3
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008d3c:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 8008d40:	b123      	cbz	r3, 8008d4c <osMessageQueueGet+0x14>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8008d42:	b9e0      	cbnz	r0, 8008d7e <osMessageQueueGet+0x46>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
      stat = osErrorParameter;
 8008d44:	f06f 0003 	mvn.w	r0, #3
      }
    }
  }

  return (stat);
}
 8008d48:	b002      	add	sp, #8
 8008d4a:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008d4c:	f3ef 8310 	mrs	r3, PRIMASK
  if (IS_IRQ()) {
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d1f6      	bne.n	8008d42 <osMessageQueueGet+0xa>
 8008d54:	4b18      	ldr	r3, [pc, #96]	@ (8008db8 <osMessageQueueGet+0x80>)
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	2b02      	cmp	r3, #2
 8008d5a:	d103      	bne.n	8008d64 <osMessageQueueGet+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008d5c:	f3ef 8311 	mrs	r3, BASEPRI
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d1ee      	bne.n	8008d42 <osMessageQueueGet+0xa>
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8008d64:	2800      	cmp	r0, #0
 8008d66:	d0ed      	beq.n	8008d44 <osMessageQueueGet+0xc>
 8008d68:	2900      	cmp	r1, #0
 8008d6a:	d0eb      	beq.n	8008d44 <osMessageQueueGet+0xc>
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8008d6c:	4622      	mov	r2, r4
 8008d6e:	f000 faca 	bl	8009306 <xQueueReceive>
 8008d72:	2801      	cmp	r0, #1
 8008d74:	d012      	beq.n	8008d9c <osMessageQueueGet+0x64>
        if (timeout != 0U) {
 8008d76:	b164      	cbz	r4, 8008d92 <osMessageQueueGet+0x5a>
          stat = osErrorTimeout;
 8008d78:	f06f 0001 	mvn.w	r0, #1
  return (stat);
 8008d7c:	e7e4      	b.n	8008d48 <osMessageQueueGet+0x10>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8008d7e:	2900      	cmp	r1, #0
 8008d80:	d0e0      	beq.n	8008d44 <osMessageQueueGet+0xc>
 8008d82:	2c00      	cmp	r4, #0
 8008d84:	d1de      	bne.n	8008d44 <osMessageQueueGet+0xc>
      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8008d86:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 8008d88:	9401      	str	r4, [sp, #4]
      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8008d8a:	f000 fb5a 	bl	8009442 <xQueueReceiveFromISR>
 8008d8e:	2801      	cmp	r0, #1
 8008d90:	d002      	beq.n	8008d98 <osMessageQueueGet+0x60>
        stat = osErrorResource;
 8008d92:	f06f 0002 	mvn.w	r0, #2
 8008d96:	e7d7      	b.n	8008d48 <osMessageQueueGet+0x10>
        portYIELD_FROM_ISR (yield);
 8008d98:	9b01      	ldr	r3, [sp, #4]
 8008d9a:	b90b      	cbnz	r3, 8008da0 <osMessageQueueGet+0x68>
  stat = osOK;
 8008d9c:	2000      	movs	r0, #0
 8008d9e:	e7d3      	b.n	8008d48 <osMessageQueueGet+0x10>
        portYIELD_FROM_ISR (yield);
 8008da0:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8008da4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008da8:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8008dac:	f3bf 8f4f 	dsb	sy
 8008db0:	f3bf 8f6f 	isb	sy
 8008db4:	e7f2      	b.n	8008d9c <osMessageQueueGet+0x64>
 8008db6:	bf00      	nop
 8008db8:	2000897c 	.word	0x2000897c

08008dbc <vApplicationGetIdleTaskMemory>:
/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8008dbc:	4b03      	ldr	r3, [pc, #12]	@ (8008dcc <vApplicationGetIdleTaskMemory+0x10>)
 8008dbe:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8008dc0:	4b03      	ldr	r3, [pc, #12]	@ (8008dd0 <vApplicationGetIdleTaskMemory+0x14>)
 8008dc2:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8008dc4:	2340      	movs	r3, #64	@ 0x40
 8008dc6:	6013      	str	r3, [r2, #0]
}
 8008dc8:	4770      	bx	lr
 8008dca:	bf00      	nop
 8008dcc:	20008920 	.word	0x20008920
 8008dd0:	20008820 	.word	0x20008820

08008dd4 <vApplicationGetTimerTaskMemory>:
/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8008dd4:	4b03      	ldr	r3, [pc, #12]	@ (8008de4 <vApplicationGetTimerTaskMemory+0x10>)
 8008dd6:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8008dd8:	4b03      	ldr	r3, [pc, #12]	@ (8008de8 <vApplicationGetTimerTaskMemory+0x14>)
 8008dda:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8008ddc:	2380      	movs	r3, #128	@ 0x80
 8008dde:	6013      	str	r3, [r2, #0]
}
 8008de0:	4770      	bx	lr
 8008de2:	bf00      	nop
 8008de4:	200087c4 	.word	0x200087c4
 8008de8:	200085c4 	.word	0x200085c4

08008dec <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008dec:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008df0:	f04f 32ff 	mov.w	r2, #4294967295

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008df4:	e9c0 2302 	strd	r2, r3, [r0, #8]
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008df8:	6043      	str	r3, [r0, #4]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008dfa:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008dfc:	2300      	movs	r3, #0
 8008dfe:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008e00:	4770      	bx	lr

08008e02 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8008e02:	2300      	movs	r3, #0
 8008e04:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008e06:	4770      	bx	lr

08008e08 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8008e08:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008e0a:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008e0c:	689a      	ldr	r2, [r3, #8]
 8008e0e:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008e10:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008e12:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8008e14:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 8008e16:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8008e18:	3301      	adds	r3, #1
 8008e1a:	6003      	str	r3, [r0, #0]
}
 8008e1c:	4770      	bx	lr

08008e1e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008e1e:	b530      	push	{r4, r5, lr}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008e20:	680c      	ldr	r4, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008e22:	1c63      	adds	r3, r4, #1
 8008e24:	d10a      	bne.n	8008e3c <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008e26:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008e28:	685a      	ldr	r2, [r3, #4]
 8008e2a:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008e2c:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008e2e:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8008e30:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8008e32:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 8008e34:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8008e36:	3301      	adds	r3, #1
 8008e38:	6003      	str	r3, [r0, #0]
}
 8008e3a:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008e3c:	f100 0208 	add.w	r2, r0, #8
 8008e40:	4613      	mov	r3, r2
 8008e42:	6852      	ldr	r2, [r2, #4]
 8008e44:	6815      	ldr	r5, [r2, #0]
 8008e46:	42a5      	cmp	r5, r4
 8008e48:	d9fa      	bls.n	8008e40 <vListInsert+0x22>
 8008e4a:	e7ed      	b.n	8008e28 <vListInsert+0xa>

08008e4c <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008e4c:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8008e50:	6903      	ldr	r3, [r0, #16]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008e52:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008e54:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008e56:	6859      	ldr	r1, [r3, #4]
 8008e58:	4281      	cmp	r1, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008e5a:	bf08      	it	eq
 8008e5c:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8008e5e:	2200      	movs	r2, #0
 8008e60:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8008e62:	681a      	ldr	r2, [r3, #0]
 8008e64:	3a01      	subs	r2, #1
 8008e66:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008e68:	6818      	ldr	r0, [r3, #0]
}
 8008e6a:	4770      	bx	lr

08008e6c <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008e6c:	b510      	push	{r4, lr}
 8008e6e:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008e70:	f001 fa50 	bl	800a314 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008e74:	6ba4      	ldr	r4, [r4, #56]	@ 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8008e76:	f001 fa6d 	bl	800a354 <vPortExitCritical>

	return xReturn;
}
 8008e7a:	fab4 f084 	clz	r0, r4
 8008e7e:	0940      	lsrs	r0, r0, #5
 8008e80:	bd10      	pop	{r4, pc}

08008e82 <prvCopyDataToQueue>:
{
 8008e82:	b570      	push	{r4, r5, r6, lr}
 8008e84:	4616      	mov	r6, r2
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008e86:	6c02      	ldr	r2, [r0, #64]	@ 0x40
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008e88:	6b85      	ldr	r5, [r0, #56]	@ 0x38
{
 8008e8a:	4604      	mov	r4, r0
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008e8c:	b942      	cbnz	r2, 8008ea0 <prvCopyDataToQueue+0x1e>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008e8e:	6806      	ldr	r6, [r0, #0]
 8008e90:	b99e      	cbnz	r6, 8008eba <prvCopyDataToQueue+0x38>
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8008e92:	6840      	ldr	r0, [r0, #4]
 8008e94:	f000 ffba 	bl	8009e0c <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 8008e98:	6066      	str	r6, [r4, #4]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008e9a:	3501      	adds	r5, #1
 8008e9c:	63a5      	str	r5, [r4, #56]	@ 0x38
}
 8008e9e:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 8008ea0:	b96e      	cbnz	r6, 8008ebe <prvCopyDataToQueue+0x3c>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8008ea2:	6880      	ldr	r0, [r0, #8]
 8008ea4:	f004 fa46 	bl	800d334 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8008ea8:	68a3      	ldr	r3, [r4, #8]
 8008eaa:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8008eac:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008eae:	6862      	ldr	r2, [r4, #4]
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8008eb0:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008eb2:	4293      	cmp	r3, r2
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008eb4:	bf24      	itt	cs
 8008eb6:	6823      	ldrcs	r3, [r4, #0]
 8008eb8:	60a3      	strcs	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
 8008eba:	2000      	movs	r0, #0
 8008ebc:	e7ed      	b.n	8008e9a <prvCopyDataToQueue+0x18>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008ebe:	68c0      	ldr	r0, [r0, #12]
 8008ec0:	f004 fa38 	bl	800d334 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8008ec4:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8008ec6:	68e3      	ldr	r3, [r4, #12]
 8008ec8:	4251      	negs	r1, r2
 8008eca:	1a9b      	subs	r3, r3, r2
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008ecc:	6822      	ldr	r2, [r4, #0]
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8008ece:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008ed0:	4293      	cmp	r3, r2
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8008ed2:	bf3e      	ittt	cc
 8008ed4:	6863      	ldrcc	r3, [r4, #4]
 8008ed6:	185b      	addcc	r3, r3, r1
 8008ed8:	60e3      	strcc	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 8008eda:	2e02      	cmp	r6, #2
 8008edc:	d1ed      	bne.n	8008eba <prvCopyDataToQueue+0x38>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008ede:	b10d      	cbz	r5, 8008ee4 <prvCopyDataToQueue+0x62>
				--uxMessagesWaiting;
 8008ee0:	3d01      	subs	r5, #1
 8008ee2:	e7ea      	b.n	8008eba <prvCopyDataToQueue+0x38>
BaseType_t xReturn = pdFALSE;
 8008ee4:	4628      	mov	r0, r5
 8008ee6:	e7d8      	b.n	8008e9a <prvCopyDataToQueue+0x18>

08008ee8 <prvCopyDataFromQueue>:
{
 8008ee8:	4603      	mov	r3, r0
 8008eea:	b410      	push	{r4}
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008eec:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
{
 8008eee:	4608      	mov	r0, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008ef0:	b16a      	cbz	r2, 8008f0e <prvCopyDataFromQueue+0x26>
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8008ef2:	68dc      	ldr	r4, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008ef4:	6859      	ldr	r1, [r3, #4]
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8008ef6:	4414      	add	r4, r2
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008ef8:	428c      	cmp	r4, r1
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8008efa:	bf28      	it	cs
 8008efc:	6819      	ldrcs	r1, [r3, #0]
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8008efe:	60dc      	str	r4, [r3, #12]
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8008f00:	bf28      	it	cs
 8008f02:	60d9      	strcs	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8008f04:	68d9      	ldr	r1, [r3, #12]
}
 8008f06:	f85d 4b04 	ldr.w	r4, [sp], #4
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8008f0a:	f004 ba13 	b.w	800d334 <memcpy>
}
 8008f0e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008f12:	4770      	bx	lr

08008f14 <prvUnlockQueue>:
{
 8008f14:	b570      	push	{r4, r5, r6, lr}
 8008f16:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8008f18:	f001 f9fc 	bl	800a314 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8008f1c:	f894 5045 	ldrb.w	r5, [r4, #69]	@ 0x45
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008f20:	f104 0624 	add.w	r6, r4, #36	@ 0x24
		int8_t cTxLock = pxQueue->cTxLock;
 8008f24:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008f26:	2d00      	cmp	r5, #0
 8008f28:	dc14      	bgt.n	8008f54 <prvUnlockQueue+0x40>
		pxQueue->cTxLock = queueUNLOCKED;
 8008f2a:	23ff      	movs	r3, #255	@ 0xff
 8008f2c:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
	taskEXIT_CRITICAL();
 8008f30:	f001 fa10 	bl	800a354 <vPortExitCritical>
	taskENTER_CRITICAL();
 8008f34:	f001 f9ee 	bl	800a314 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8008f38:	f894 5044 	ldrb.w	r5, [r4, #68]	@ 0x44
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008f3c:	f104 0610 	add.w	r6, r4, #16
		int8_t cRxLock = pxQueue->cRxLock;
 8008f40:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008f42:	2d00      	cmp	r5, #0
 8008f44:	dc12      	bgt.n	8008f6c <prvUnlockQueue+0x58>
		pxQueue->cRxLock = queueUNLOCKED;
 8008f46:	23ff      	movs	r3, #255	@ 0xff
 8008f48:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
}
 8008f4c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 8008f50:	f001 ba00 	b.w	800a354 <vPortExitCritical>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008f54:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d0e7      	beq.n	8008f2a <prvUnlockQueue+0x16>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008f5a:	4630      	mov	r0, r6
 8008f5c:	f000 fea8 	bl	8009cb0 <xTaskRemoveFromEventList>
 8008f60:	b108      	cbz	r0, 8008f66 <prvUnlockQueue+0x52>
						vTaskMissedYield();
 8008f62:	f000 ff2d 	bl	8009dc0 <vTaskMissedYield>
			--cTxLock;
 8008f66:	3d01      	subs	r5, #1
 8008f68:	b26d      	sxtb	r5, r5
 8008f6a:	e7dc      	b.n	8008f26 <prvUnlockQueue+0x12>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008f6c:	6923      	ldr	r3, [r4, #16]
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d0e9      	beq.n	8008f46 <prvUnlockQueue+0x32>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008f72:	4630      	mov	r0, r6
 8008f74:	f000 fe9c 	bl	8009cb0 <xTaskRemoveFromEventList>
 8008f78:	b108      	cbz	r0, 8008f7e <prvUnlockQueue+0x6a>
					vTaskMissedYield();
 8008f7a:	f000 ff21 	bl	8009dc0 <vTaskMissedYield>
				--cRxLock;
 8008f7e:	3d01      	subs	r5, #1
 8008f80:	b26d      	sxtb	r5, r5
 8008f82:	e7de      	b.n	8008f42 <prvUnlockQueue+0x2e>

08008f84 <xQueueGenericReset>:
{
 8008f84:	b538      	push	{r3, r4, r5, lr}
 8008f86:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 8008f88:	4604      	mov	r4, r0
 8008f8a:	b940      	cbnz	r0, 8008f9e <xQueueGenericReset+0x1a>
	__asm volatile
 8008f8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f90:	f383 8811 	msr	BASEPRI, r3
 8008f94:	f3bf 8f6f 	isb	sy
 8008f98:	f3bf 8f4f 	dsb	sy
 8008f9c:	e7fe      	b.n	8008f9c <xQueueGenericReset+0x18>
	taskENTER_CRITICAL();
 8008f9e:	f001 f9b9 	bl	800a314 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8008fa2:	e9d4 310f 	ldrd	r3, r1, [r4, #60]	@ 0x3c
 8008fa6:	6822      	ldr	r2, [r4, #0]
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008fa8:	60a2      	str	r2, [r4, #8]
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8008faa:	434b      	muls	r3, r1
 8008fac:	18d0      	adds	r0, r2, r3
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8008fae:	1a5b      	subs	r3, r3, r1
 8008fb0:	441a      	add	r2, r3
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8008fb2:	6060      	str	r0, [r4, #4]
		pxQueue->cRxLock = queueUNLOCKED;
 8008fb4:	23ff      	movs	r3, #255	@ 0xff
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008fb6:	2000      	movs	r0, #0
 8008fb8:	63a0      	str	r0, [r4, #56]	@ 0x38
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8008fba:	60e2      	str	r2, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008fbc:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008fc0:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
		if( xNewQueue == pdFALSE )
 8008fc4:	b9a5      	cbnz	r5, 8008ff0 <xQueueGenericReset+0x6c>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008fc6:	6923      	ldr	r3, [r4, #16]
 8008fc8:	b173      	cbz	r3, 8008fe8 <xQueueGenericReset+0x64>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008fca:	f104 0010 	add.w	r0, r4, #16
 8008fce:	f000 fe6f 	bl	8009cb0 <xTaskRemoveFromEventList>
 8008fd2:	b148      	cbz	r0, 8008fe8 <xQueueGenericReset+0x64>
					queueYIELD_IF_USING_PREEMPTION();
 8008fd4:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8008fd8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008fdc:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8008fe0:	f3bf 8f4f 	dsb	sy
 8008fe4:	f3bf 8f6f 	isb	sy
	taskEXIT_CRITICAL();
 8008fe8:	f001 f9b4 	bl	800a354 <vPortExitCritical>
}
 8008fec:	2001      	movs	r0, #1
 8008fee:	bd38      	pop	{r3, r4, r5, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008ff0:	f104 0010 	add.w	r0, r4, #16
 8008ff4:	f7ff fefa 	bl	8008dec <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008ff8:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8008ffc:	f7ff fef6 	bl	8008dec <vListInitialise>
 8009000:	e7f2      	b.n	8008fe8 <xQueueGenericReset+0x64>

08009002 <xQueueGenericCreateStatic>:
	{
 8009002:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009004:	460d      	mov	r5, r1
 8009006:	461c      	mov	r4, r3
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009008:	b940      	cbnz	r0, 800901c <xQueueGenericCreateStatic+0x1a>
 800900a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800900e:	f383 8811 	msr	BASEPRI, r3
 8009012:	f3bf 8f6f 	isb	sy
 8009016:	f3bf 8f4f 	dsb	sy
 800901a:	e7fe      	b.n	800901a <xQueueGenericCreateStatic+0x18>
		configASSERT( pxStaticQueue != NULL );
 800901c:	b943      	cbnz	r3, 8009030 <xQueueGenericCreateStatic+0x2e>
 800901e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009022:	f383 8811 	msr	BASEPRI, r3
 8009026:	f3bf 8f6f 	isb	sy
 800902a:	f3bf 8f4f 	dsb	sy
 800902e:	e7fe      	b.n	800902e <xQueueGenericCreateStatic+0x2c>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8009030:	b14a      	cbz	r2, 8009046 <xQueueGenericCreateStatic+0x44>
 8009032:	b991      	cbnz	r1, 800905a <xQueueGenericCreateStatic+0x58>
 8009034:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009038:	f383 8811 	msr	BASEPRI, r3
 800903c:	f3bf 8f6f 	isb	sy
 8009040:	f3bf 8f4f 	dsb	sy
 8009044:	e7fe      	b.n	8009044 <xQueueGenericCreateStatic+0x42>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009046:	b141      	cbz	r1, 800905a <xQueueGenericCreateStatic+0x58>
 8009048:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800904c:	f383 8811 	msr	BASEPRI, r3
 8009050:	f3bf 8f6f 	isb	sy
 8009054:	f3bf 8f4f 	dsb	sy
 8009058:	e7fe      	b.n	8009058 <xQueueGenericCreateStatic+0x56>
			volatile size_t xSize = sizeof( StaticQueue_t );
 800905a:	2350      	movs	r3, #80	@ 0x50
 800905c:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 800905e:	9b01      	ldr	r3, [sp, #4]
 8009060:	2b50      	cmp	r3, #80	@ 0x50
 8009062:	d008      	beq.n	8009076 <xQueueGenericCreateStatic+0x74>
 8009064:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009068:	f383 8811 	msr	BASEPRI, r3
 800906c:	f3bf 8f6f 	isb	sy
 8009070:	f3bf 8f4f 	dsb	sy
 8009074:	e7fe      	b.n	8009074 <xQueueGenericCreateStatic+0x72>
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009076:	2101      	movs	r1, #1
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009078:	2d00      	cmp	r5, #0
 800907a:	bf08      	it	eq
 800907c:	4622      	moveq	r2, r4
	pxNewQueue->uxItemSize = uxItemSize;
 800907e:	e9c4 050f 	strd	r0, r5, [r4, #60]	@ 0x3c
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009082:	f884 1046 	strb.w	r1, [r4, #70]	@ 0x46
	if( uxItemSize == ( UBaseType_t ) 0 )
 8009086:	6022      	str	r2, [r4, #0]
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009088:	4620      	mov	r0, r4
 800908a:	f7ff ff7b 	bl	8008f84 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 800908e:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8009092:	f884 304c 	strb.w	r3, [r4, #76]	@ 0x4c
	}
 8009096:	4620      	mov	r0, r4
 8009098:	b003      	add	sp, #12
 800909a:	bd30      	pop	{r4, r5, pc}

0800909c <xQueueGenericCreate>:
	{
 800909c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800909e:	460d      	mov	r5, r1
 80090a0:	4617      	mov	r7, r2
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80090a2:	4606      	mov	r6, r0
 80090a4:	b940      	cbnz	r0, 80090b8 <xQueueGenericCreate+0x1c>
 80090a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090aa:	f383 8811 	msr	BASEPRI, r3
 80090ae:	f3bf 8f6f 	isb	sy
 80090b2:	f3bf 8f4f 	dsb	sy
 80090b6:	e7fe      	b.n	80090b6 <xQueueGenericCreate+0x1a>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80090b8:	4348      	muls	r0, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 80090ba:	3050      	adds	r0, #80	@ 0x50
 80090bc:	f001 fa90 	bl	800a5e0 <pvPortMalloc>
		if( pxNewQueue != NULL )
 80090c0:	4604      	mov	r4, r0
 80090c2:	b170      	cbz	r0, 80090e2 <xQueueGenericCreate+0x46>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80090c4:	2300      	movs	r3, #0
 80090c6:	f880 3046 	strb.w	r3, [r0, #70]	@ 0x46
	if( uxItemSize == ( UBaseType_t ) 0 )
 80090ca:	b165      	cbz	r5, 80090e6 <xQueueGenericCreate+0x4a>
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 80090cc:	f100 0350 	add.w	r3, r0, #80	@ 0x50
	pxNewQueue->uxItemSize = uxItemSize;
 80090d0:	e9c4 650f 	strd	r6, r5, [r4, #60]	@ 0x3c
 80090d4:	6023      	str	r3, [r4, #0]
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80090d6:	2101      	movs	r1, #1
 80090d8:	4620      	mov	r0, r4
 80090da:	f7ff ff53 	bl	8008f84 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 80090de:	f884 704c 	strb.w	r7, [r4, #76]	@ 0x4c
	}
 80090e2:	4620      	mov	r0, r4
 80090e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80090e6:	4603      	mov	r3, r0
 80090e8:	e7f2      	b.n	80090d0 <xQueueGenericCreate+0x34>

080090ea <xQueueGenericSend>:
{
 80090ea:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80090ee:	460f      	mov	r7, r1
 80090f0:	9201      	str	r2, [sp, #4]
 80090f2:	461e      	mov	r6, r3
	configASSERT( pxQueue );
 80090f4:	4604      	mov	r4, r0
 80090f6:	b940      	cbnz	r0, 800910a <xQueueGenericSend+0x20>
 80090f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090fc:	f383 8811 	msr	BASEPRI, r3
 8009100:	f3bf 8f6f 	isb	sy
 8009104:	f3bf 8f4f 	dsb	sy
 8009108:	e7fe      	b.n	8009108 <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800910a:	b951      	cbnz	r1, 8009122 <xQueueGenericSend+0x38>
 800910c:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800910e:	b143      	cbz	r3, 8009122 <xQueueGenericSend+0x38>
 8009110:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009114:	f383 8811 	msr	BASEPRI, r3
 8009118:	f3bf 8f6f 	isb	sy
 800911c:	f3bf 8f4f 	dsb	sy
 8009120:	e7fe      	b.n	8009120 <xQueueGenericSend+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009122:	2e02      	cmp	r6, #2
 8009124:	d10b      	bne.n	800913e <xQueueGenericSend+0x54>
 8009126:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8009128:	2b01      	cmp	r3, #1
 800912a:	d008      	beq.n	800913e <xQueueGenericSend+0x54>
 800912c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009130:	f383 8811 	msr	BASEPRI, r3
 8009134:	f3bf 8f6f 	isb	sy
 8009138:	f3bf 8f4f 	dsb	sy
 800913c:	e7fe      	b.n	800913c <xQueueGenericSend+0x52>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800913e:	f000 fe55 	bl	8009dec <xTaskGetSchedulerState>
 8009142:	4605      	mov	r5, r0
 8009144:	b330      	cbz	r0, 8009194 <xQueueGenericSend+0xaa>
 8009146:	2500      	movs	r5, #0
		prvLockQueue( pxQueue );
 8009148:	f04f 0800 	mov.w	r8, #0
		taskENTER_CRITICAL();
 800914c:	f001 f8e2 	bl	800a314 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009150:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8009152:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8009154:	429a      	cmp	r2, r3
 8009156:	d301      	bcc.n	800915c <xQueueGenericSend+0x72>
 8009158:	2e02      	cmp	r6, #2
 800915a:	d127      	bne.n	80091ac <xQueueGenericSend+0xc2>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800915c:	4632      	mov	r2, r6
 800915e:	4639      	mov	r1, r7
 8009160:	4620      	mov	r0, r4
 8009162:	f7ff fe8e 	bl	8008e82 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009166:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8009168:	b11b      	cbz	r3, 8009172 <xQueueGenericSend+0x88>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800916a:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800916e:	f000 fd9f 	bl	8009cb0 <xTaskRemoveFromEventList>
					else if( xYieldRequired != pdFALSE )
 8009172:	b148      	cbz	r0, 8009188 <xQueueGenericSend+0x9e>
						queueYIELD_IF_USING_PREEMPTION();
 8009174:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8009178:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800917c:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8009180:	f3bf 8f4f 	dsb	sy
 8009184:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8009188:	f001 f8e4 	bl	800a354 <vPortExitCritical>
				return pdPASS;
 800918c:	2001      	movs	r0, #1
}
 800918e:	b004      	add	sp, #16
 8009190:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009194:	9b01      	ldr	r3, [sp, #4]
 8009196:	2b00      	cmp	r3, #0
 8009198:	d0d6      	beq.n	8009148 <xQueueGenericSend+0x5e>
 800919a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800919e:	f383 8811 	msr	BASEPRI, r3
 80091a2:	f3bf 8f6f 	isb	sy
 80091a6:	f3bf 8f4f 	dsb	sy
 80091aa:	e7fe      	b.n	80091aa <xQueueGenericSend+0xc0>
				if( xTicksToWait == ( TickType_t ) 0 )
 80091ac:	9b01      	ldr	r3, [sp, #4]
 80091ae:	b91b      	cbnz	r3, 80091b8 <xQueueGenericSend+0xce>
					taskEXIT_CRITICAL();
 80091b0:	f001 f8d0 	bl	800a354 <vPortExitCritical>
					return errQUEUE_FULL;
 80091b4:	2000      	movs	r0, #0
 80091b6:	e7ea      	b.n	800918e <xQueueGenericSend+0xa4>
				else if( xEntryTimeSet == pdFALSE )
 80091b8:	b915      	cbnz	r5, 80091c0 <xQueueGenericSend+0xd6>
					vTaskInternalSetTimeOutState( &xTimeOut );
 80091ba:	a802      	add	r0, sp, #8
 80091bc:	f000 fdb8 	bl	8009d30 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 80091c0:	f001 f8c8 	bl	800a354 <vPortExitCritical>
		vTaskSuspendAll();
 80091c4:	f000 fbc6 	bl	8009954 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80091c8:	f001 f8a4 	bl	800a314 <vPortEnterCritical>
 80091cc:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 80091d0:	2bff      	cmp	r3, #255	@ 0xff
 80091d2:	bf08      	it	eq
 80091d4:	f884 8044 	strbeq.w	r8, [r4, #68]	@ 0x44
 80091d8:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 80091dc:	2bff      	cmp	r3, #255	@ 0xff
 80091de:	bf08      	it	eq
 80091e0:	f884 8045 	strbeq.w	r8, [r4, #69]	@ 0x45
 80091e4:	f001 f8b6 	bl	800a354 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80091e8:	a901      	add	r1, sp, #4
 80091ea:	a802      	add	r0, sp, #8
 80091ec:	f000 fdac 	bl	8009d48 <xTaskCheckForTimeOut>
 80091f0:	bb38      	cbnz	r0, 8009242 <xQueueGenericSend+0x158>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80091f2:	f001 f88f 	bl	800a314 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80091f6:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80091f8:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80091fa:	429a      	cmp	r2, r3
 80091fc:	d10e      	bne.n	800921c <xQueueGenericSend+0x132>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 80091fe:	f001 f8a9 	bl	800a354 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8009202:	9901      	ldr	r1, [sp, #4]
 8009204:	f104 0010 	add.w	r0, r4, #16
 8009208:	f000 fd1a 	bl	8009c40 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800920c:	4620      	mov	r0, r4
 800920e:	f7ff fe81 	bl	8008f14 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009212:	f000 fc43 	bl	8009a9c <xTaskResumeAll>
 8009216:	b148      	cbz	r0, 800922c <xQueueGenericSend+0x142>
 8009218:	2501      	movs	r5, #1
 800921a:	e797      	b.n	800914c <xQueueGenericSend+0x62>
	taskEXIT_CRITICAL();
 800921c:	f001 f89a 	bl	800a354 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 8009220:	4620      	mov	r0, r4
 8009222:	f7ff fe77 	bl	8008f14 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009226:	f000 fc39 	bl	8009a9c <xTaskResumeAll>
 800922a:	e7f5      	b.n	8009218 <xQueueGenericSend+0x12e>
					portYIELD_WITHIN_API();
 800922c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8009230:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009234:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8009238:	f3bf 8f4f 	dsb	sy
 800923c:	f3bf 8f6f 	isb	sy
 8009240:	e7ea      	b.n	8009218 <xQueueGenericSend+0x12e>
			prvUnlockQueue( pxQueue );
 8009242:	4620      	mov	r0, r4
 8009244:	f7ff fe66 	bl	8008f14 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009248:	f000 fc28 	bl	8009a9c <xTaskResumeAll>
			return errQUEUE_FULL;
 800924c:	e7b2      	b.n	80091b4 <xQueueGenericSend+0xca>

0800924e <xQueueGenericSendFromISR>:
{
 800924e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009252:	4689      	mov	r9, r1
 8009254:	4617      	mov	r7, r2
 8009256:	461e      	mov	r6, r3
	configASSERT( pxQueue );
 8009258:	4604      	mov	r4, r0
 800925a:	b940      	cbnz	r0, 800926e <xQueueGenericSendFromISR+0x20>
 800925c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009260:	f383 8811 	msr	BASEPRI, r3
 8009264:	f3bf 8f6f 	isb	sy
 8009268:	f3bf 8f4f 	dsb	sy
 800926c:	e7fe      	b.n	800926c <xQueueGenericSendFromISR+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800926e:	b951      	cbnz	r1, 8009286 <xQueueGenericSendFromISR+0x38>
 8009270:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8009272:	b143      	cbz	r3, 8009286 <xQueueGenericSendFromISR+0x38>
 8009274:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009278:	f383 8811 	msr	BASEPRI, r3
 800927c:	f3bf 8f6f 	isb	sy
 8009280:	f3bf 8f4f 	dsb	sy
 8009284:	e7fe      	b.n	8009284 <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009286:	2e02      	cmp	r6, #2
 8009288:	d10b      	bne.n	80092a2 <xQueueGenericSendFromISR+0x54>
 800928a:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800928c:	2b01      	cmp	r3, #1
 800928e:	d008      	beq.n	80092a2 <xQueueGenericSendFromISR+0x54>
 8009290:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009294:	f383 8811 	msr	BASEPRI, r3
 8009298:	f3bf 8f6f 	isb	sy
 800929c:	f3bf 8f4f 	dsb	sy
 80092a0:	e7fe      	b.n	80092a0 <xQueueGenericSendFromISR+0x52>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80092a2:	f001 f949 	bl	800a538 <vPortValidateInterruptPriority>
	__asm volatile
 80092a6:	f3ef 8811 	mrs	r8, BASEPRI
 80092aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092ae:	f383 8811 	msr	BASEPRI, r3
 80092b2:	f3bf 8f6f 	isb	sy
 80092b6:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80092ba:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80092bc:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80092be:	429a      	cmp	r2, r3
 80092c0:	d301      	bcc.n	80092c6 <xQueueGenericSendFromISR+0x78>
 80092c2:	2e02      	cmp	r6, #2
 80092c4:	d11d      	bne.n	8009302 <xQueueGenericSendFromISR+0xb4>
			const int8_t cTxLock = pxQueue->cTxLock;
 80092c6:	f894 5045 	ldrb.w	r5, [r4, #69]	@ 0x45
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80092ca:	4632      	mov	r2, r6
			const int8_t cTxLock = pxQueue->cTxLock;
 80092cc:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80092ce:	4649      	mov	r1, r9
 80092d0:	4620      	mov	r0, r4
 80092d2:	f7ff fdd6 	bl	8008e82 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 80092d6:	1c6b      	adds	r3, r5, #1
 80092d8:	d10e      	bne.n	80092f8 <xQueueGenericSendFromISR+0xaa>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80092da:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80092dc:	b13b      	cbz	r3, 80092ee <xQueueGenericSendFromISR+0xa0>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80092de:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 80092e2:	f000 fce5 	bl	8009cb0 <xTaskRemoveFromEventList>
 80092e6:	b110      	cbz	r0, 80092ee <xQueueGenericSendFromISR+0xa0>
							if( pxHigherPriorityTaskWoken != NULL )
 80092e8:	b10f      	cbz	r7, 80092ee <xQueueGenericSendFromISR+0xa0>
								*pxHigherPriorityTaskWoken = pdTRUE;
 80092ea:	2301      	movs	r3, #1
 80092ec:	603b      	str	r3, [r7, #0]
			xReturn = pdPASS;
 80092ee:	2001      	movs	r0, #1
	__asm volatile
 80092f0:	f388 8811 	msr	BASEPRI, r8
}
 80092f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80092f8:	3501      	adds	r5, #1
 80092fa:	b26d      	sxtb	r5, r5
 80092fc:	f884 5045 	strb.w	r5, [r4, #69]	@ 0x45
 8009300:	e7f5      	b.n	80092ee <xQueueGenericSendFromISR+0xa0>
			xReturn = errQUEUE_FULL;
 8009302:	2000      	movs	r0, #0
 8009304:	e7f4      	b.n	80092f0 <xQueueGenericSendFromISR+0xa2>

08009306 <xQueueReceive>:
{
 8009306:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800930a:	460e      	mov	r6, r1
 800930c:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 800930e:	4604      	mov	r4, r0
 8009310:	b940      	cbnz	r0, 8009324 <xQueueReceive+0x1e>
	__asm volatile
 8009312:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009316:	f383 8811 	msr	BASEPRI, r3
 800931a:	f3bf 8f6f 	isb	sy
 800931e:	f3bf 8f4f 	dsb	sy
 8009322:	e7fe      	b.n	8009322 <xQueueReceive+0x1c>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009324:	b951      	cbnz	r1, 800933c <xQueueReceive+0x36>
 8009326:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8009328:	b143      	cbz	r3, 800933c <xQueueReceive+0x36>
 800932a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800932e:	f383 8811 	msr	BASEPRI, r3
 8009332:	f3bf 8f6f 	isb	sy
 8009336:	f3bf 8f4f 	dsb	sy
 800933a:	e7fe      	b.n	800933a <xQueueReceive+0x34>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800933c:	f000 fd56 	bl	8009dec <xTaskGetSchedulerState>
 8009340:	4605      	mov	r5, r0
 8009342:	b318      	cbz	r0, 800938c <xQueueReceive+0x86>
 8009344:	2500      	movs	r5, #0
		prvLockQueue( pxQueue );
 8009346:	f04f 0800 	mov.w	r8, #0
		taskENTER_CRITICAL();
 800934a:	f000 ffe3 	bl	800a314 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800934e:	6ba7      	ldr	r7, [r4, #56]	@ 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009350:	b347      	cbz	r7, 80093a4 <xQueueReceive+0x9e>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009352:	4631      	mov	r1, r6
 8009354:	4620      	mov	r0, r4
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009356:	3f01      	subs	r7, #1
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009358:	f7ff fdc6 	bl	8008ee8 <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800935c:	63a7      	str	r7, [r4, #56]	@ 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800935e:	6923      	ldr	r3, [r4, #16]
 8009360:	b173      	cbz	r3, 8009380 <xQueueReceive+0x7a>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009362:	f104 0010 	add.w	r0, r4, #16
 8009366:	f000 fca3 	bl	8009cb0 <xTaskRemoveFromEventList>
 800936a:	b148      	cbz	r0, 8009380 <xQueueReceive+0x7a>
						queueYIELD_IF_USING_PREEMPTION();
 800936c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8009370:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009374:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8009378:	f3bf 8f4f 	dsb	sy
 800937c:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8009380:	f000 ffe8 	bl	800a354 <vPortExitCritical>
				return pdPASS;
 8009384:	2001      	movs	r0, #1
}
 8009386:	b004      	add	sp, #16
 8009388:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800938c:	9b01      	ldr	r3, [sp, #4]
 800938e:	2b00      	cmp	r3, #0
 8009390:	d0d9      	beq.n	8009346 <xQueueReceive+0x40>
 8009392:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009396:	f383 8811 	msr	BASEPRI, r3
 800939a:	f3bf 8f6f 	isb	sy
 800939e:	f3bf 8f4f 	dsb	sy
 80093a2:	e7fe      	b.n	80093a2 <xQueueReceive+0x9c>
				if( xTicksToWait == ( TickType_t ) 0 )
 80093a4:	9b01      	ldr	r3, [sp, #4]
 80093a6:	b91b      	cbnz	r3, 80093b0 <xQueueReceive+0xaa>
					taskEXIT_CRITICAL();
 80093a8:	f000 ffd4 	bl	800a354 <vPortExitCritical>
					return errQUEUE_EMPTY;
 80093ac:	2000      	movs	r0, #0
 80093ae:	e7ea      	b.n	8009386 <xQueueReceive+0x80>
				else if( xEntryTimeSet == pdFALSE )
 80093b0:	b915      	cbnz	r5, 80093b8 <xQueueReceive+0xb2>
					vTaskInternalSetTimeOutState( &xTimeOut );
 80093b2:	a802      	add	r0, sp, #8
 80093b4:	f000 fcbc 	bl	8009d30 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 80093b8:	f000 ffcc 	bl	800a354 <vPortExitCritical>
		vTaskSuspendAll();
 80093bc:	f000 faca 	bl	8009954 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80093c0:	f000 ffa8 	bl	800a314 <vPortEnterCritical>
 80093c4:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 80093c8:	2bff      	cmp	r3, #255	@ 0xff
 80093ca:	bf08      	it	eq
 80093cc:	f884 8044 	strbeq.w	r8, [r4, #68]	@ 0x44
 80093d0:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 80093d4:	2bff      	cmp	r3, #255	@ 0xff
 80093d6:	bf08      	it	eq
 80093d8:	f884 8045 	strbeq.w	r8, [r4, #69]	@ 0x45
 80093dc:	f000 ffba 	bl	800a354 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80093e0:	a901      	add	r1, sp, #4
 80093e2:	a802      	add	r0, sp, #8
 80093e4:	f000 fcb0 	bl	8009d48 <xTaskCheckForTimeOut>
 80093e8:	bb00      	cbnz	r0, 800942c <xQueueReceive+0x126>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80093ea:	4620      	mov	r0, r4
 80093ec:	f7ff fd3e 	bl	8008e6c <prvIsQueueEmpty>
 80093f0:	b1b0      	cbz	r0, 8009420 <xQueueReceive+0x11a>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80093f2:	9901      	ldr	r1, [sp, #4]
 80093f4:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 80093f8:	f000 fc22 	bl	8009c40 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80093fc:	4620      	mov	r0, r4
 80093fe:	f7ff fd89 	bl	8008f14 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009402:	f000 fb4b 	bl	8009a9c <xTaskResumeAll>
 8009406:	b948      	cbnz	r0, 800941c <xQueueReceive+0x116>
					portYIELD_WITHIN_API();
 8009408:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800940c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009410:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8009414:	f3bf 8f4f 	dsb	sy
 8009418:	f3bf 8f6f 	isb	sy
 800941c:	2501      	movs	r5, #1
 800941e:	e794      	b.n	800934a <xQueueReceive+0x44>
				prvUnlockQueue( pxQueue );
 8009420:	4620      	mov	r0, r4
 8009422:	f7ff fd77 	bl	8008f14 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009426:	f000 fb39 	bl	8009a9c <xTaskResumeAll>
 800942a:	e7f7      	b.n	800941c <xQueueReceive+0x116>
			prvUnlockQueue( pxQueue );
 800942c:	4620      	mov	r0, r4
 800942e:	f7ff fd71 	bl	8008f14 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009432:	f000 fb33 	bl	8009a9c <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009436:	4620      	mov	r0, r4
 8009438:	f7ff fd18 	bl	8008e6c <prvIsQueueEmpty>
 800943c:	2800      	cmp	r0, #0
 800943e:	d0ed      	beq.n	800941c <xQueueReceive+0x116>
 8009440:	e7b4      	b.n	80093ac <xQueueReceive+0xa6>

08009442 <xQueueReceiveFromISR>:
{
 8009442:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009446:	4689      	mov	r9, r1
 8009448:	4690      	mov	r8, r2
	configASSERT( pxQueue );
 800944a:	4604      	mov	r4, r0
 800944c:	b940      	cbnz	r0, 8009460 <xQueueReceiveFromISR+0x1e>
 800944e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009452:	f383 8811 	msr	BASEPRI, r3
 8009456:	f3bf 8f6f 	isb	sy
 800945a:	f3bf 8f4f 	dsb	sy
 800945e:	e7fe      	b.n	800945e <xQueueReceiveFromISR+0x1c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009460:	b951      	cbnz	r1, 8009478 <xQueueReceiveFromISR+0x36>
 8009462:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8009464:	b143      	cbz	r3, 8009478 <xQueueReceiveFromISR+0x36>
 8009466:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800946a:	f383 8811 	msr	BASEPRI, r3
 800946e:	f3bf 8f6f 	isb	sy
 8009472:	f3bf 8f4f 	dsb	sy
 8009476:	e7fe      	b.n	8009476 <xQueueReceiveFromISR+0x34>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009478:	f001 f85e 	bl	800a538 <vPortValidateInterruptPriority>
	__asm volatile
 800947c:	f3ef 8711 	mrs	r7, BASEPRI
 8009480:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009484:	f383 8811 	msr	BASEPRI, r3
 8009488:	f3bf 8f6f 	isb	sy
 800948c:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009490:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009492:	b30d      	cbz	r5, 80094d8 <xQueueReceiveFromISR+0x96>
			const int8_t cRxLock = pxQueue->cRxLock;
 8009494:	f894 6044 	ldrb.w	r6, [r4, #68]	@ 0x44
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009498:	4649      	mov	r1, r9
			const int8_t cRxLock = pxQueue->cRxLock;
 800949a:	b276      	sxtb	r6, r6
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800949c:	4620      	mov	r0, r4
 800949e:	f7ff fd23 	bl	8008ee8 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80094a2:	3d01      	subs	r5, #1
			if( cRxLock == queueUNLOCKED )
 80094a4:	1c73      	adds	r3, r6, #1
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80094a6:	63a5      	str	r5, [r4, #56]	@ 0x38
			if( cRxLock == queueUNLOCKED )
 80094a8:	d111      	bne.n	80094ce <xQueueReceiveFromISR+0x8c>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80094aa:	6923      	ldr	r3, [r4, #16]
 80094ac:	b153      	cbz	r3, 80094c4 <xQueueReceiveFromISR+0x82>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80094ae:	f104 0010 	add.w	r0, r4, #16
 80094b2:	f000 fbfd 	bl	8009cb0 <xTaskRemoveFromEventList>
 80094b6:	b128      	cbz	r0, 80094c4 <xQueueReceiveFromISR+0x82>
						if( pxHigherPriorityTaskWoken != NULL )
 80094b8:	f1b8 0f00 	cmp.w	r8, #0
 80094bc:	d002      	beq.n	80094c4 <xQueueReceiveFromISR+0x82>
							*pxHigherPriorityTaskWoken = pdTRUE;
 80094be:	2301      	movs	r3, #1
 80094c0:	f8c8 3000 	str.w	r3, [r8]
			xReturn = pdPASS;
 80094c4:	2001      	movs	r0, #1
	__asm volatile
 80094c6:	f387 8811 	msr	BASEPRI, r7
}
 80094ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80094ce:	3601      	adds	r6, #1
 80094d0:	b276      	sxtb	r6, r6
 80094d2:	f884 6044 	strb.w	r6, [r4, #68]	@ 0x44
 80094d6:	e7f5      	b.n	80094c4 <xQueueReceiveFromISR+0x82>
			xReturn = pdFAIL;
 80094d8:	4628      	mov	r0, r5
 80094da:	e7f4      	b.n	80094c6 <xQueueReceiveFromISR+0x84>

080094dc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80094dc:	b530      	push	{r4, r5, lr}

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80094de:	4a07      	ldr	r2, [pc, #28]	@ (80094fc <vQueueAddToRegistry+0x20>)
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80094e0:	2300      	movs	r3, #0
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80094e2:	f852 5033 	ldr.w	r5, [r2, r3, lsl #3]
 80094e6:	eb02 04c3 	add.w	r4, r2, r3, lsl #3
 80094ea:	b91d      	cbnz	r5, 80094f4 <vQueueAddToRegistry+0x18>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80094ec:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80094f0:	6060      	str	r0, [r4, #4]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80094f2:	bd30      	pop	{r4, r5, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80094f4:	3301      	adds	r3, #1
 80094f6:	2b20      	cmp	r3, #32
 80094f8:	d1f3      	bne.n	80094e2 <vQueueAddToRegistry+0x6>
 80094fa:	e7fa      	b.n	80094f2 <vQueueAddToRegistry+0x16>
 80094fc:	20008980 	.word	0x20008980

08009500 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009500:	b570      	push	{r4, r5, r6, lr}
 8009502:	4604      	mov	r4, r0
 8009504:	460d      	mov	r5, r1
 8009506:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009508:	f000 ff04 	bl	800a314 <vPortEnterCritical>
 800950c:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8009510:	2bff      	cmp	r3, #255	@ 0xff
 8009512:	bf04      	itt	eq
 8009514:	2300      	moveq	r3, #0
 8009516:	f884 3044 	strbeq.w	r3, [r4, #68]	@ 0x44
 800951a:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800951e:	2bff      	cmp	r3, #255	@ 0xff
 8009520:	bf04      	itt	eq
 8009522:	2300      	moveq	r3, #0
 8009524:	f884 3045 	strbeq.w	r3, [r4, #69]	@ 0x45
 8009528:	f000 ff14 	bl	800a354 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800952c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800952e:	b92b      	cbnz	r3, 800953c <vQueueWaitForMessageRestricted+0x3c>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009530:	4632      	mov	r2, r6
 8009532:	4629      	mov	r1, r5
 8009534:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8009538:	f000 fb9c 	bl	8009c74 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800953c:	4620      	mov	r0, r4
	}
 800953e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		prvUnlockQueue( pxQueue );
 8009542:	f7ff bce7 	b.w	8008f14 <prvUnlockQueue>
	...

08009548 <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009548:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800954c:	4604      	mov	r4, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800954e:	f000 fee1 	bl	800a314 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009552:	4b30      	ldr	r3, [pc, #192]	@ (8009614 <prvAddNewTaskToReadyList+0xcc>)
		if( pxCurrentTCB == NULL )
 8009554:	4e30      	ldr	r6, [pc, #192]	@ (8009618 <prvAddNewTaskToReadyList+0xd0>)
		uxCurrentNumberOfTasks++;
 8009556:	681a      	ldr	r2, [r3, #0]
 8009558:	4f30      	ldr	r7, [pc, #192]	@ (800961c <prvAddNewTaskToReadyList+0xd4>)
 800955a:	3201      	adds	r2, #1
 800955c:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 800955e:	6835      	ldr	r5, [r6, #0]
 8009560:	2d00      	cmp	r5, #0
 8009562:	d14b      	bne.n	80095fc <prvAddNewTaskToReadyList+0xb4>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009564:	6034      	str	r4, [r6, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	2b01      	cmp	r3, #1
 800956a:	d11f      	bne.n	80095ac <prvAddNewTaskToReadyList+0x64>
 800956c:	46b8      	mov	r8, r7
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800956e:	4640      	mov	r0, r8
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009570:	3501      	adds	r5, #1
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009572:	f7ff fc3b 	bl	8008dec <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009576:	2d38      	cmp	r5, #56	@ 0x38
 8009578:	f108 0814 	add.w	r8, r8, #20
 800957c:	d1f7      	bne.n	800956e <prvAddNewTaskToReadyList+0x26>
	}

	vListInitialise( &xDelayedTaskList1 );
 800957e:	f8df 80c4 	ldr.w	r8, [pc, #196]	@ 8009644 <prvAddNewTaskToReadyList+0xfc>
	vListInitialise( &xDelayedTaskList2 );
 8009582:	4d27      	ldr	r5, [pc, #156]	@ (8009620 <prvAddNewTaskToReadyList+0xd8>)
	vListInitialise( &xDelayedTaskList1 );
 8009584:	4640      	mov	r0, r8
 8009586:	f7ff fc31 	bl	8008dec <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800958a:	4628      	mov	r0, r5
 800958c:	f7ff fc2e 	bl	8008dec <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009590:	4824      	ldr	r0, [pc, #144]	@ (8009624 <prvAddNewTaskToReadyList+0xdc>)
 8009592:	f7ff fc2b 	bl	8008dec <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009596:	4824      	ldr	r0, [pc, #144]	@ (8009628 <prvAddNewTaskToReadyList+0xe0>)
 8009598:	f7ff fc28 	bl	8008dec <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800959c:	4823      	ldr	r0, [pc, #140]	@ (800962c <prvAddNewTaskToReadyList+0xe4>)
 800959e:	f7ff fc25 	bl	8008dec <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80095a2:	4b23      	ldr	r3, [pc, #140]	@ (8009630 <prvAddNewTaskToReadyList+0xe8>)
 80095a4:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80095a8:	4b22      	ldr	r3, [pc, #136]	@ (8009634 <prvAddNewTaskToReadyList+0xec>)
 80095aa:	601d      	str	r5, [r3, #0]
		uxTaskNumber++;
 80095ac:	4a22      	ldr	r2, [pc, #136]	@ (8009638 <prvAddNewTaskToReadyList+0xf0>)
 80095ae:	6813      	ldr	r3, [r2, #0]
 80095b0:	3301      	adds	r3, #1
 80095b2:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 80095b4:	4a21      	ldr	r2, [pc, #132]	@ (800963c <prvAddNewTaskToReadyList+0xf4>)
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80095b6:	6463      	str	r3, [r4, #68]	@ 0x44
		prvAddTaskToReadyList( pxNewTCB );
 80095b8:	6811      	ldr	r1, [r2, #0]
 80095ba:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80095bc:	2014      	movs	r0, #20
 80095be:	428b      	cmp	r3, r1
 80095c0:	fb00 7003 	mla	r0, r0, r3, r7
 80095c4:	f104 0104 	add.w	r1, r4, #4
 80095c8:	bf88      	it	hi
 80095ca:	6013      	strhi	r3, [r2, #0]
 80095cc:	f7ff fc1c 	bl	8008e08 <vListInsertEnd>
	taskEXIT_CRITICAL();
 80095d0:	f000 fec0 	bl	800a354 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 80095d4:	4b1a      	ldr	r3, [pc, #104]	@ (8009640 <prvAddNewTaskToReadyList+0xf8>)
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	b173      	cbz	r3, 80095f8 <prvAddNewTaskToReadyList+0xb0>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80095da:	6833      	ldr	r3, [r6, #0]
 80095dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80095de:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80095e0:	429a      	cmp	r2, r3
 80095e2:	d209      	bcs.n	80095f8 <prvAddNewTaskToReadyList+0xb0>
			taskYIELD_IF_USING_PREEMPTION();
 80095e4:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80095e8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80095ec:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80095f0:	f3bf 8f4f 	dsb	sy
 80095f4:	f3bf 8f6f 	isb	sy
}
 80095f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( xSchedulerRunning == pdFALSE )
 80095fc:	4b10      	ldr	r3, [pc, #64]	@ (8009640 <prvAddNewTaskToReadyList+0xf8>)
 80095fe:	681a      	ldr	r2, [r3, #0]
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009600:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
			if( xSchedulerRunning == pdFALSE )
 8009602:	2a00      	cmp	r2, #0
 8009604:	d1d2      	bne.n	80095ac <prvAddNewTaskToReadyList+0x64>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009606:	6832      	ldr	r2, [r6, #0]
 8009608:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800960a:	429a      	cmp	r2, r3
					pxCurrentTCB = pxNewTCB;
 800960c:	bf98      	it	ls
 800960e:	6034      	strls	r4, [r6, #0]
 8009610:	e7cc      	b.n	80095ac <prvAddNewTaskToReadyList+0x64>
 8009612:	bf00      	nop
 8009614:	20008aa4 	.word	0x20008aa4
 8009618:	20008f78 	.word	0x20008f78
 800961c:	20008b18 	.word	0x20008b18
 8009620:	20008af0 	.word	0x20008af0
 8009624:	20008ad4 	.word	0x20008ad4
 8009628:	20008ac0 	.word	0x20008ac0
 800962c:	20008aa8 	.word	0x20008aa8
 8009630:	20008aec 	.word	0x20008aec
 8009634:	20008ae8 	.word	0x20008ae8
 8009638:	20008a88 	.word	0x20008a88
 800963c:	20008a9c 	.word	0x20008a9c
 8009640:	20008a98 	.word	0x20008a98
 8009644:	20008b04 	.word	0x20008b04

08009648 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009648:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800964a:	4b15      	ldr	r3, [pc, #84]	@ (80096a0 <prvAddCurrentTaskToDelayedList+0x58>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800964c:	4d15      	ldr	r5, [pc, #84]	@ (80096a4 <prvAddCurrentTaskToDelayedList+0x5c>)
const TickType_t xConstTickCount = xTickCount;
 800964e:	681c      	ldr	r4, [r3, #0]
{
 8009650:	4606      	mov	r6, r0
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009652:	6828      	ldr	r0, [r5, #0]
 8009654:	3004      	adds	r0, #4
{
 8009656:	460f      	mov	r7, r1
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009658:	f7ff fbf8 	bl	8008e4c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800965c:	1c73      	adds	r3, r6, #1
 800965e:	d107      	bne.n	8009670 <prvAddCurrentTaskToDelayedList+0x28>
 8009660:	b137      	cbz	r7, 8009670 <prvAddCurrentTaskToDelayedList+0x28>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009662:	6829      	ldr	r1, [r5, #0]
 8009664:	4810      	ldr	r0, [pc, #64]	@ (80096a8 <prvAddCurrentTaskToDelayedList+0x60>)

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009666:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800966a:	3104      	adds	r1, #4
 800966c:	f7ff bbcc 	b.w	8008e08 <vListInsertEnd>
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009670:	682b      	ldr	r3, [r5, #0]
 8009672:	19a4      	adds	r4, r4, r6
 8009674:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009676:	d307      	bcc.n	8009688 <prvAddCurrentTaskToDelayedList+0x40>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009678:	4b0c      	ldr	r3, [pc, #48]	@ (80096ac <prvAddCurrentTaskToDelayedList+0x64>)
 800967a:	6818      	ldr	r0, [r3, #0]
 800967c:	6829      	ldr	r1, [r5, #0]
}
 800967e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009682:	3104      	adds	r1, #4
 8009684:	f7ff bbcb 	b.w	8008e1e <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009688:	4b09      	ldr	r3, [pc, #36]	@ (80096b0 <prvAddCurrentTaskToDelayedList+0x68>)
 800968a:	6818      	ldr	r0, [r3, #0]
 800968c:	6829      	ldr	r1, [r5, #0]
 800968e:	3104      	adds	r1, #4
 8009690:	f7ff fbc5 	bl	8008e1e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009694:	4b07      	ldr	r3, [pc, #28]	@ (80096b4 <prvAddCurrentTaskToDelayedList+0x6c>)
 8009696:	681a      	ldr	r2, [r3, #0]
 8009698:	42a2      	cmp	r2, r4
					xNextTaskUnblockTime = xTimeToWake;
 800969a:	bf88      	it	hi
 800969c:	601c      	strhi	r4, [r3, #0]
}
 800969e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80096a0:	20008aa0 	.word	0x20008aa0
 80096a4:	20008f78 	.word	0x20008f78
 80096a8:	20008aa8 	.word	0x20008aa8
 80096ac:	20008ae8 	.word	0x20008ae8
 80096b0:	20008aec 	.word	0x20008aec
 80096b4:	20008a84 	.word	0x20008a84

080096b8 <prvResetNextTaskUnblockTime>:
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80096b8:	4a06      	ldr	r2, [pc, #24]	@ (80096d4 <prvResetNextTaskUnblockTime+0x1c>)
 80096ba:	6813      	ldr	r3, [r2, #0]
 80096bc:	6819      	ldr	r1, [r3, #0]
 80096be:	4b06      	ldr	r3, [pc, #24]	@ (80096d8 <prvResetNextTaskUnblockTime+0x20>)
 80096c0:	b919      	cbnz	r1, 80096ca <prvResetNextTaskUnblockTime+0x12>
		xNextTaskUnblockTime = portMAX_DELAY;
 80096c2:	f04f 32ff 	mov.w	r2, #4294967295
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80096c6:	601a      	str	r2, [r3, #0]
}
 80096c8:	4770      	bx	lr
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80096ca:	6812      	ldr	r2, [r2, #0]
 80096cc:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80096ce:	68d2      	ldr	r2, [r2, #12]
 80096d0:	6852      	ldr	r2, [r2, #4]
 80096d2:	e7f8      	b.n	80096c6 <prvResetNextTaskUnblockTime+0xe>
 80096d4:	20008aec 	.word	0x20008aec
 80096d8:	20008a84 	.word	0x20008a84

080096dc <prvDeleteTCB>:
	{
 80096dc:	b510      	push	{r4, lr}
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80096de:	f890 3059 	ldrb.w	r3, [r0, #89]	@ 0x59
	{
 80096e2:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80096e4:	b93b      	cbnz	r3, 80096f6 <prvDeleteTCB+0x1a>
				vPortFree( pxTCB->pxStack );
 80096e6:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 80096e8:	f001 f80c 	bl	800a704 <vPortFree>
				vPortFree( pxTCB );
 80096ec:	4620      	mov	r0, r4
	}
 80096ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				vPortFree( pxTCB );
 80096f2:	f001 b807 	b.w	800a704 <vPortFree>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80096f6:	2b01      	cmp	r3, #1
 80096f8:	d0f9      	beq.n	80096ee <prvDeleteTCB+0x12>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80096fa:	2b02      	cmp	r3, #2
 80096fc:	d008      	beq.n	8009710 <prvDeleteTCB+0x34>
	__asm volatile
 80096fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009702:	f383 8811 	msr	BASEPRI, r3
 8009706:	f3bf 8f6f 	isb	sy
 800970a:	f3bf 8f4f 	dsb	sy
 800970e:	e7fe      	b.n	800970e <prvDeleteTCB+0x32>
	}
 8009710:	bd10      	pop	{r4, pc}
	...

08009714 <prvIdleTask>:
{
 8009714:	b580      	push	{r7, lr}
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009716:	4c13      	ldr	r4, [pc, #76]	@ (8009764 <prvIdleTask+0x50>)
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8009718:	4f13      	ldr	r7, [pc, #76]	@ (8009768 <prvIdleTask+0x54>)
				--uxCurrentNumberOfTasks;
 800971a:	4d14      	ldr	r5, [pc, #80]	@ (800976c <prvIdleTask+0x58>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800971c:	6823      	ldr	r3, [r4, #0]
 800971e:	b973      	cbnz	r3, 800973e <prvIdleTask+0x2a>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009720:	4b13      	ldr	r3, [pc, #76]	@ (8009770 <prvIdleTask+0x5c>)
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	2b01      	cmp	r3, #1
 8009726:	d9f8      	bls.n	800971a <prvIdleTask+0x6>
				taskYIELD();
 8009728:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800972c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009730:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8009734:	f3bf 8f4f 	dsb	sy
 8009738:	f3bf 8f6f 	isb	sy
 800973c:	e7ed      	b.n	800971a <prvIdleTask+0x6>
			taskENTER_CRITICAL();
 800973e:	f000 fde9 	bl	800a314 <vPortEnterCritical>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	68de      	ldr	r6, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009746:	1d30      	adds	r0, r6, #4
 8009748:	f7ff fb80 	bl	8008e4c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800974c:	682b      	ldr	r3, [r5, #0]
 800974e:	3b01      	subs	r3, #1
 8009750:	602b      	str	r3, [r5, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009752:	6823      	ldr	r3, [r4, #0]
 8009754:	3b01      	subs	r3, #1
 8009756:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 8009758:	f000 fdfc 	bl	800a354 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 800975c:	4630      	mov	r0, r6
 800975e:	f7ff ffbd 	bl	80096dc <prvDeleteTCB>
 8009762:	e7db      	b.n	800971c <prvIdleTask+0x8>
 8009764:	20008abc 	.word	0x20008abc
 8009768:	20008ac0 	.word	0x20008ac0
 800976c:	20008aa4 	.word	0x20008aa4
 8009770:	20008b18 	.word	0x20008b18

08009774 <prvInitialiseNewTask.constprop.0>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8009774:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009778:	e9dd 9409 	ldrd	r9, r4, [sp, #36]	@ 0x24
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800977c:	0096      	lsls	r6, r2, #2
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800977e:	460d      	mov	r5, r1
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009780:	4632      	mov	r2, r6
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8009782:	4607      	mov	r7, r0
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009784:	21a5      	movs	r1, #165	@ 0xa5
 8009786:	6b20      	ldr	r0, [r4, #48]	@ 0x30
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8009788:	4698      	mov	r8, r3
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800978a:	f002 ff7f 	bl	800c68c <memset>
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800978e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8009790:	3e04      	subs	r6, #4
 8009792:	441e      	add	r6, r3
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8009794:	f026 0607 	bic.w	r6, r6, #7
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009798:	1e6b      	subs	r3, r5, #1
 800979a:	f104 0233 	add.w	r2, r4, #51	@ 0x33
 800979e:	350f      	adds	r5, #15
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80097a0:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 80097a4:	f802 1f01 	strb.w	r1, [r2, #1]!
		if( pcName[ x ] == 0x00 )
 80097a8:	b109      	cbz	r1, 80097ae <prvInitialiseNewTask.constprop.0+0x3a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80097aa:	42ab      	cmp	r3, r5
 80097ac:	d1f8      	bne.n	80097a0 <prvInitialiseNewTask.constprop.0+0x2c>
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80097ae:	9d08      	ldr	r5, [sp, #32]
 80097b0:	2d37      	cmp	r5, #55	@ 0x37
 80097b2:	bf28      	it	cs
 80097b4:	2537      	movcs	r5, #55	@ 0x37
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80097b6:	f04f 0a00 	mov.w	sl, #0
		pxNewTCB->uxMutexesHeld = 0;
 80097ba:	e9c4 5a13 	strd	r5, sl, [r4, #76]	@ 0x4c
	pxNewTCB->uxPriority = uxPriority;
 80097be:	62e5      	str	r5, [r4, #44]	@ 0x2c
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80097c0:	1d20      	adds	r0, r4, #4
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80097c2:	f884 a043 	strb.w	sl, [r4, #67]	@ 0x43
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80097c6:	f7ff fb1c 	bl	8008e02 <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80097ca:	f1c5 0538 	rsb	r5, r5, #56	@ 0x38
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80097ce:	f104 0018 	add.w	r0, r4, #24
 80097d2:	f7ff fb16 	bl	8008e02 <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 80097d6:	f8c4 a054 	str.w	sl, [r4, #84]	@ 0x54
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80097da:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80097dc:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80097de:	6264      	str	r4, [r4, #36]	@ 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80097e0:	f884 a058 	strb.w	sl, [r4, #88]	@ 0x58
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80097e4:	4642      	mov	r2, r8
 80097e6:	4639      	mov	r1, r7
 80097e8:	4630      	mov	r0, r6
 80097ea:	f000 fd6b 	bl	800a2c4 <pxPortInitialiseStack>
 80097ee:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 80097f0:	f1b9 0f00 	cmp.w	r9, #0
 80097f4:	d001      	beq.n	80097fa <prvInitialiseNewTask.constprop.0+0x86>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80097f6:	f8c9 4000 	str.w	r4, [r9]
}
 80097fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080097fe <xTaskCreateStatic>:
	{
 80097fe:	b570      	push	{r4, r5, r6, lr}
 8009800:	b086      	sub	sp, #24
 8009802:	e9dd 540b 	ldrd	r5, r4, [sp, #44]	@ 0x2c
		configASSERT( puxStackBuffer != NULL );
 8009806:	b945      	cbnz	r5, 800981a <xTaskCreateStatic+0x1c>
 8009808:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800980c:	f383 8811 	msr	BASEPRI, r3
 8009810:	f3bf 8f6f 	isb	sy
 8009814:	f3bf 8f4f 	dsb	sy
 8009818:	e7fe      	b.n	8009818 <xTaskCreateStatic+0x1a>
		configASSERT( pxTaskBuffer != NULL );
 800981a:	b944      	cbnz	r4, 800982e <xTaskCreateStatic+0x30>
 800981c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009820:	f383 8811 	msr	BASEPRI, r3
 8009824:	f3bf 8f6f 	isb	sy
 8009828:	f3bf 8f4f 	dsb	sy
 800982c:	e7fe      	b.n	800982c <xTaskCreateStatic+0x2e>
			volatile size_t xSize = sizeof( StaticTask_t );
 800982e:	265c      	movs	r6, #92	@ 0x5c
 8009830:	9605      	str	r6, [sp, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009832:	9e05      	ldr	r6, [sp, #20]
 8009834:	2e5c      	cmp	r6, #92	@ 0x5c
 8009836:	d008      	beq.n	800984a <xTaskCreateStatic+0x4c>
 8009838:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800983c:	f383 8811 	msr	BASEPRI, r3
 8009840:	f3bf 8f6f 	isb	sy
 8009844:	f3bf 8f4f 	dsb	sy
 8009848:	e7fe      	b.n	8009848 <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800984a:	6325      	str	r5, [r4, #48]	@ 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800984c:	2502      	movs	r5, #2
 800984e:	f884 5059 	strb.w	r5, [r4, #89]	@ 0x59
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009852:	ad04      	add	r5, sp, #16
 8009854:	9501      	str	r5, [sp, #4]
 8009856:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8009858:	9402      	str	r4, [sp, #8]
 800985a:	9500      	str	r5, [sp, #0]
 800985c:	f7ff ff8a 	bl	8009774 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009860:	4620      	mov	r0, r4
 8009862:	f7ff fe71 	bl	8009548 <prvAddNewTaskToReadyList>
	}
 8009866:	9804      	ldr	r0, [sp, #16]
 8009868:	b006      	add	sp, #24
 800986a:	bd70      	pop	{r4, r5, r6, pc}

0800986c <xTaskCreate>:
	{
 800986c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009870:	4607      	mov	r7, r0
 8009872:	b085      	sub	sp, #20
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009874:	0090      	lsls	r0, r2, #2
	{
 8009876:	4688      	mov	r8, r1
 8009878:	4616      	mov	r6, r2
 800987a:	4699      	mov	r9, r3
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800987c:	f000 feb0 	bl	800a5e0 <pvPortMalloc>
			if( pxStack != NULL )
 8009880:	4605      	mov	r5, r0
 8009882:	b920      	cbnz	r0, 800988e <xTaskCreate+0x22>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009884:	f04f 30ff 	mov.w	r0, #4294967295
	}
 8009888:	b005      	add	sp, #20
 800988a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800988e:	205c      	movs	r0, #92	@ 0x5c
 8009890:	f000 fea6 	bl	800a5e0 <pvPortMalloc>
				if( pxNewTCB != NULL )
 8009894:	4604      	mov	r4, r0
 8009896:	b198      	cbz	r0, 80098c0 <xTaskCreate+0x54>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009898:	2300      	movs	r3, #0
 800989a:	f880 3059 	strb.w	r3, [r0, #89]	@ 0x59
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800989e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
					pxNewTCB->pxStack = pxStack;
 80098a0:	6305      	str	r5, [r0, #48]	@ 0x30
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80098a2:	9301      	str	r3, [sp, #4]
 80098a4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80098a6:	9002      	str	r0, [sp, #8]
 80098a8:	9300      	str	r3, [sp, #0]
 80098aa:	4632      	mov	r2, r6
 80098ac:	464b      	mov	r3, r9
 80098ae:	4641      	mov	r1, r8
 80098b0:	4638      	mov	r0, r7
 80098b2:	f7ff ff5f 	bl	8009774 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 80098b6:	4620      	mov	r0, r4
 80098b8:	f7ff fe46 	bl	8009548 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80098bc:	2001      	movs	r0, #1
 80098be:	e7e3      	b.n	8009888 <xTaskCreate+0x1c>
					vPortFree( pxStack );
 80098c0:	4628      	mov	r0, r5
 80098c2:	f000 ff1f 	bl	800a704 <vPortFree>
		if( pxNewTCB != NULL )
 80098c6:	e7dd      	b.n	8009884 <xTaskCreate+0x18>

080098c8 <vTaskStartScheduler>:
{
 80098c8:	b510      	push	{r4, lr}
 80098ca:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80098cc:	2400      	movs	r4, #0
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80098ce:	aa07      	add	r2, sp, #28
 80098d0:	a906      	add	r1, sp, #24
 80098d2:	a805      	add	r0, sp, #20
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80098d4:	e9cd 4405 	strd	r4, r4, [sp, #20]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80098d8:	f7ff fa70 	bl	8008dbc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80098dc:	9b05      	ldr	r3, [sp, #20]
 80098de:	9302      	str	r3, [sp, #8]
 80098e0:	9b06      	ldr	r3, [sp, #24]
 80098e2:	9a07      	ldr	r2, [sp, #28]
 80098e4:	4916      	ldr	r1, [pc, #88]	@ (8009940 <vTaskStartScheduler+0x78>)
 80098e6:	4817      	ldr	r0, [pc, #92]	@ (8009944 <vTaskStartScheduler+0x7c>)
 80098e8:	e9cd 4300 	strd	r4, r3, [sp]
 80098ec:	4623      	mov	r3, r4
 80098ee:	f7ff ff86 	bl	80097fe <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 80098f2:	b318      	cbz	r0, 800993c <vTaskStartScheduler+0x74>
			xReturn = xTimerCreateTimerTask();
 80098f4:	f000 fb1e 	bl	8009f34 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 80098f8:	2801      	cmp	r0, #1
 80098fa:	d114      	bne.n	8009926 <vTaskStartScheduler+0x5e>
 80098fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009900:	f383 8811 	msr	BASEPRI, r3
 8009904:	f3bf 8f6f 	isb	sy
 8009908:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 800990c:	4b0e      	ldr	r3, [pc, #56]	@ (8009948 <vTaskStartScheduler+0x80>)
 800990e:	f04f 32ff 	mov.w	r2, #4294967295
 8009912:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009914:	4b0d      	ldr	r3, [pc, #52]	@ (800994c <vTaskStartScheduler+0x84>)
 8009916:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8009918:	4b0d      	ldr	r3, [pc, #52]	@ (8009950 <vTaskStartScheduler+0x88>)
 800991a:	601c      	str	r4, [r3, #0]
}
 800991c:	b008      	add	sp, #32
 800991e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if( xPortStartScheduler() != pdFALSE )
 8009922:	f000 bd87 	b.w	800a434 <xPortStartScheduler>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009926:	3001      	adds	r0, #1
 8009928:	d108      	bne.n	800993c <vTaskStartScheduler+0x74>
 800992a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800992e:	f383 8811 	msr	BASEPRI, r3
 8009932:	f3bf 8f6f 	isb	sy
 8009936:	f3bf 8f4f 	dsb	sy
 800993a:	e7fe      	b.n	800993a <vTaskStartScheduler+0x72>
}
 800993c:	b008      	add	sp, #32
 800993e:	bd10      	pop	{r4, pc}
 8009940:	08012c4d 	.word	0x08012c4d
 8009944:	08009715 	.word	0x08009715
 8009948:	20008a84 	.word	0x20008a84
 800994c:	20008a98 	.word	0x20008a98
 8009950:	20008aa0 	.word	0x20008aa0

08009954 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8009954:	4a02      	ldr	r2, [pc, #8]	@ (8009960 <vTaskSuspendAll+0xc>)
 8009956:	6813      	ldr	r3, [r2, #0]
 8009958:	3301      	adds	r3, #1
 800995a:	6013      	str	r3, [r2, #0]
}
 800995c:	4770      	bx	lr
 800995e:	bf00      	nop
 8009960:	20008a80 	.word	0x20008a80

08009964 <xTaskGetTickCount>:
		xTicks = xTickCount;
 8009964:	4b01      	ldr	r3, [pc, #4]	@ (800996c <xTaskGetTickCount+0x8>)
 8009966:	6818      	ldr	r0, [r3, #0]
}
 8009968:	4770      	bx	lr
 800996a:	bf00      	nop
 800996c:	20008aa0 	.word	0x20008aa0

08009970 <xTaskIncrementTick>:
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009970:	4b3f      	ldr	r3, [pc, #252]	@ (8009a70 <xTaskIncrementTick+0x100>)
 8009972:	681b      	ldr	r3, [r3, #0]
{
 8009974:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009978:	2b00      	cmp	r3, #0
 800997a:	d171      	bne.n	8009a60 <xTaskIncrementTick+0xf0>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800997c:	4b3d      	ldr	r3, [pc, #244]	@ (8009a74 <xTaskIncrementTick+0x104>)
 800997e:	681c      	ldr	r4, [r3, #0]
 8009980:	3401      	adds	r4, #1
		xTickCount = xConstTickCount;
 8009982:	601c      	str	r4, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009984:	b9bc      	cbnz	r4, 80099b6 <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 8009986:	4b3c      	ldr	r3, [pc, #240]	@ (8009a78 <xTaskIncrementTick+0x108>)
 8009988:	681a      	ldr	r2, [r3, #0]
 800998a:	6812      	ldr	r2, [r2, #0]
 800998c:	b142      	cbz	r2, 80099a0 <xTaskIncrementTick+0x30>
 800998e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009992:	f383 8811 	msr	BASEPRI, r3
 8009996:	f3bf 8f6f 	isb	sy
 800999a:	f3bf 8f4f 	dsb	sy
 800999e:	e7fe      	b.n	800999e <xTaskIncrementTick+0x2e>
 80099a0:	4a36      	ldr	r2, [pc, #216]	@ (8009a7c <xTaskIncrementTick+0x10c>)
 80099a2:	6819      	ldr	r1, [r3, #0]
 80099a4:	6810      	ldr	r0, [r2, #0]
 80099a6:	6018      	str	r0, [r3, #0]
 80099a8:	6011      	str	r1, [r2, #0]
 80099aa:	4a35      	ldr	r2, [pc, #212]	@ (8009a80 <xTaskIncrementTick+0x110>)
 80099ac:	6813      	ldr	r3, [r2, #0]
 80099ae:	3301      	adds	r3, #1
 80099b0:	6013      	str	r3, [r2, #0]
 80099b2:	f7ff fe81 	bl	80096b8 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 80099b6:	4d33      	ldr	r5, [pc, #204]	@ (8009a84 <xTaskIncrementTick+0x114>)
 80099b8:	4e33      	ldr	r6, [pc, #204]	@ (8009a88 <xTaskIncrementTick+0x118>)
 80099ba:	682b      	ldr	r3, [r5, #0]
 80099bc:	4f33      	ldr	r7, [pc, #204]	@ (8009a8c <xTaskIncrementTick+0x11c>)
 80099be:	42a3      	cmp	r3, r4
BaseType_t xSwitchRequired = pdFALSE;
 80099c0:	f04f 0b00 	mov.w	fp, #0
		if( xConstTickCount >= xNextTaskUnblockTime )
 80099c4:	d911      	bls.n	80099ea <xTaskIncrementTick+0x7a>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80099c6:	683a      	ldr	r2, [r7, #0]
 80099c8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80099ca:	2114      	movs	r1, #20
 80099cc:	434a      	muls	r2, r1
 80099ce:	58b2      	ldr	r2, [r6, r2]
				xSwitchRequired = pdTRUE;
 80099d0:	2a02      	cmp	r2, #2
 80099d2:	bf28      	it	cs
 80099d4:	f04f 0b01 	movcs.w	fp, #1
		if( xYieldPending != pdFALSE )
 80099d8:	4a2d      	ldr	r2, [pc, #180]	@ (8009a90 <xTaskIncrementTick+0x120>)
 80099da:	6812      	ldr	r2, [r2, #0]
			xSwitchRequired = pdTRUE;
 80099dc:	2a00      	cmp	r2, #0
}
 80099de:	bf0c      	ite	eq
 80099e0:	4658      	moveq	r0, fp
 80099e2:	2001      	movne	r0, #1
 80099e4:	b003      	add	sp, #12
 80099e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80099ea:	f8df 908c 	ldr.w	r9, [pc, #140]	@ 8009a78 <xTaskIncrementTick+0x108>
					prvAddTaskToReadyList( pxTCB );
 80099ee:	f8df a0a8 	ldr.w	sl, [pc, #168]	@ 8009a98 <xTaskIncrementTick+0x128>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80099f2:	f8d9 2000 	ldr.w	r2, [r9]
 80099f6:	6812      	ldr	r2, [r2, #0]
 80099f8:	b91a      	cbnz	r2, 8009a02 <xTaskIncrementTick+0x92>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80099fa:	f04f 32ff 	mov.w	r2, #4294967295
 80099fe:	602a      	str	r2, [r5, #0]
					break;
 8009a00:	e7e1      	b.n	80099c6 <xTaskIncrementTick+0x56>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8009a02:	f8d9 2000 	ldr.w	r2, [r9]
 8009a06:	68d2      	ldr	r2, [r2, #12]
 8009a08:	f8d2 800c 	ldr.w	r8, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009a0c:	f8d8 1004 	ldr.w	r1, [r8, #4]
					if( xConstTickCount < xItemValue )
 8009a10:	428c      	cmp	r4, r1
 8009a12:	d201      	bcs.n	8009a18 <xTaskIncrementTick+0xa8>
						xNextTaskUnblockTime = xItemValue;
 8009a14:	6029      	str	r1, [r5, #0]
						break;
 8009a16:	e7d6      	b.n	80099c6 <xTaskIncrementTick+0x56>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009a18:	f108 0304 	add.w	r3, r8, #4
 8009a1c:	4618      	mov	r0, r3
 8009a1e:	9301      	str	r3, [sp, #4]
 8009a20:	f7ff fa14 	bl	8008e4c <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009a24:	f8d8 1028 	ldr.w	r1, [r8, #40]	@ 0x28
 8009a28:	b119      	cbz	r1, 8009a32 <xTaskIncrementTick+0xc2>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009a2a:	f108 0018 	add.w	r0, r8, #24
 8009a2e:	f7ff fa0d 	bl	8008e4c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009a32:	f8d8 002c 	ldr.w	r0, [r8, #44]	@ 0x2c
 8009a36:	f8da 1000 	ldr.w	r1, [sl]
 8009a3a:	2314      	movs	r3, #20
 8009a3c:	4288      	cmp	r0, r1
 8009a3e:	bf88      	it	hi
 8009a40:	f8ca 0000 	strhi.w	r0, [sl]
 8009a44:	9901      	ldr	r1, [sp, #4]
 8009a46:	fb03 6000 	mla	r0, r3, r0, r6
 8009a4a:	f7ff f9dd 	bl	8008e08 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009a4e:	6838      	ldr	r0, [r7, #0]
 8009a50:	f8d8 102c 	ldr.w	r1, [r8, #44]	@ 0x2c
 8009a54:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
							xSwitchRequired = pdTRUE;
 8009a56:	4291      	cmp	r1, r2
 8009a58:	bf28      	it	cs
 8009a5a:	f04f 0b01 	movcs.w	fp, #1
 8009a5e:	e7c8      	b.n	80099f2 <xTaskIncrementTick+0x82>
		++uxPendedTicks;
 8009a60:	4a0c      	ldr	r2, [pc, #48]	@ (8009a94 <xTaskIncrementTick+0x124>)
 8009a62:	6813      	ldr	r3, [r2, #0]
 8009a64:	3301      	adds	r3, #1
 8009a66:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 8009a68:	f04f 0b00 	mov.w	fp, #0
 8009a6c:	e7b4      	b.n	80099d8 <xTaskIncrementTick+0x68>
 8009a6e:	bf00      	nop
 8009a70:	20008a80 	.word	0x20008a80
 8009a74:	20008aa0 	.word	0x20008aa0
 8009a78:	20008aec 	.word	0x20008aec
 8009a7c:	20008ae8 	.word	0x20008ae8
 8009a80:	20008a8c 	.word	0x20008a8c
 8009a84:	20008a84 	.word	0x20008a84
 8009a88:	20008b18 	.word	0x20008b18
 8009a8c:	20008f78 	.word	0x20008f78
 8009a90:	20008a90 	.word	0x20008a90
 8009a94:	20008a94 	.word	0x20008a94
 8009a98:	20008a9c 	.word	0x20008a9c

08009a9c <xTaskResumeAll>:
{
 8009a9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	configASSERT( uxSchedulerSuspended );
 8009aa0:	4c30      	ldr	r4, [pc, #192]	@ (8009b64 <xTaskResumeAll+0xc8>)
 8009aa2:	6823      	ldr	r3, [r4, #0]
 8009aa4:	b943      	cbnz	r3, 8009ab8 <xTaskResumeAll+0x1c>
 8009aa6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009aaa:	f383 8811 	msr	BASEPRI, r3
 8009aae:	f3bf 8f6f 	isb	sy
 8009ab2:	f3bf 8f4f 	dsb	sy
 8009ab6:	e7fe      	b.n	8009ab6 <xTaskResumeAll+0x1a>
	taskENTER_CRITICAL();
 8009ab8:	f000 fc2c 	bl	800a314 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8009abc:	6823      	ldr	r3, [r4, #0]
 8009abe:	3b01      	subs	r3, #1
 8009ac0:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009ac2:	6824      	ldr	r4, [r4, #0]
 8009ac4:	b12c      	cbz	r4, 8009ad2 <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 8009ac6:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8009ac8:	f000 fc44 	bl	800a354 <vPortExitCritical>
}
 8009acc:	4620      	mov	r0, r4
 8009ace:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009ad2:	4b25      	ldr	r3, [pc, #148]	@ (8009b68 <xTaskResumeAll+0xcc>)
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d0f5      	beq.n	8009ac6 <xTaskResumeAll+0x2a>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009ada:	4d24      	ldr	r5, [pc, #144]	@ (8009b6c <xTaskResumeAll+0xd0>)
					prvAddTaskToReadyList( pxTCB );
 8009adc:	4e24      	ldr	r6, [pc, #144]	@ (8009b70 <xTaskResumeAll+0xd4>)
 8009ade:	f8df 80a0 	ldr.w	r8, [pc, #160]	@ 8009b80 <xTaskResumeAll+0xe4>
 8009ae2:	e01d      	b.n	8009b20 <xTaskResumeAll+0x84>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8009ae4:	68eb      	ldr	r3, [r5, #12]
 8009ae6:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009ae8:	1d27      	adds	r7, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009aea:	f104 0018 	add.w	r0, r4, #24
 8009aee:	f7ff f9ad 	bl	8008e4c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009af2:	4638      	mov	r0, r7
 8009af4:	f7ff f9aa 	bl	8008e4c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009af8:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8009afa:	6832      	ldr	r2, [r6, #0]
 8009afc:	2014      	movs	r0, #20
 8009afe:	4293      	cmp	r3, r2
 8009b00:	fb00 8003 	mla	r0, r0, r3, r8
 8009b04:	4639      	mov	r1, r7
 8009b06:	bf88      	it	hi
 8009b08:	6033      	strhi	r3, [r6, #0]
 8009b0a:	f7ff f97d 	bl	8008e08 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009b0e:	4b19      	ldr	r3, [pc, #100]	@ (8009b74 <xTaskResumeAll+0xd8>)
 8009b10:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b16:	429a      	cmp	r2, r3
 8009b18:	d302      	bcc.n	8009b20 <xTaskResumeAll+0x84>
						xYieldPending = pdTRUE;
 8009b1a:	4b17      	ldr	r3, [pc, #92]	@ (8009b78 <xTaskResumeAll+0xdc>)
 8009b1c:	2201      	movs	r2, #1
 8009b1e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009b20:	682b      	ldr	r3, [r5, #0]
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d1de      	bne.n	8009ae4 <xTaskResumeAll+0x48>
				if( pxTCB != NULL )
 8009b26:	b10c      	cbz	r4, 8009b2c <xTaskResumeAll+0x90>
					prvResetNextTaskUnblockTime();
 8009b28:	f7ff fdc6 	bl	80096b8 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8009b2c:	4d13      	ldr	r5, [pc, #76]	@ (8009b7c <xTaskResumeAll+0xe0>)
 8009b2e:	682c      	ldr	r4, [r5, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8009b30:	b144      	cbz	r4, 8009b44 <xTaskResumeAll+0xa8>
								xYieldPending = pdTRUE;
 8009b32:	4e11      	ldr	r6, [pc, #68]	@ (8009b78 <xTaskResumeAll+0xdc>)
 8009b34:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 8009b36:	f7ff ff1b 	bl	8009970 <xTaskIncrementTick>
 8009b3a:	b100      	cbz	r0, 8009b3e <xTaskResumeAll+0xa2>
								xYieldPending = pdTRUE;
 8009b3c:	6037      	str	r7, [r6, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8009b3e:	3c01      	subs	r4, #1
 8009b40:	d1f9      	bne.n	8009b36 <xTaskResumeAll+0x9a>
						uxPendedTicks = 0;
 8009b42:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 8009b44:	4b0c      	ldr	r3, [pc, #48]	@ (8009b78 <xTaskResumeAll+0xdc>)
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d0bc      	beq.n	8009ac6 <xTaskResumeAll+0x2a>
					taskYIELD_IF_USING_PREEMPTION();
 8009b4c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8009b50:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009b54:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8009b58:	f3bf 8f4f 	dsb	sy
 8009b5c:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8009b60:	2401      	movs	r4, #1
 8009b62:	e7b1      	b.n	8009ac8 <xTaskResumeAll+0x2c>
 8009b64:	20008a80 	.word	0x20008a80
 8009b68:	20008aa4 	.word	0x20008aa4
 8009b6c:	20008ad4 	.word	0x20008ad4
 8009b70:	20008a9c 	.word	0x20008a9c
 8009b74:	20008f78 	.word	0x20008f78
 8009b78:	20008a90 	.word	0x20008a90
 8009b7c:	20008a94 	.word	0x20008a94
 8009b80:	20008b18 	.word	0x20008b18

08009b84 <vTaskDelay>:
	{
 8009b84:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009b86:	b950      	cbnz	r0, 8009b9e <vTaskDelay+0x1a>
			portYIELD_WITHIN_API();
 8009b88:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8009b8c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009b90:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8009b94:	f3bf 8f4f 	dsb	sy
 8009b98:	f3bf 8f6f 	isb	sy
	}
 8009b9c:	bd08      	pop	{r3, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 8009b9e:	4b0a      	ldr	r3, [pc, #40]	@ (8009bc8 <vTaskDelay+0x44>)
 8009ba0:	6819      	ldr	r1, [r3, #0]
 8009ba2:	b141      	cbz	r1, 8009bb6 <vTaskDelay+0x32>
 8009ba4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ba8:	f383 8811 	msr	BASEPRI, r3
 8009bac:	f3bf 8f6f 	isb	sy
 8009bb0:	f3bf 8f4f 	dsb	sy
 8009bb4:	e7fe      	b.n	8009bb4 <vTaskDelay+0x30>
			vTaskSuspendAll();
 8009bb6:	f7ff fecd 	bl	8009954 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009bba:	f7ff fd45 	bl	8009648 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 8009bbe:	f7ff ff6d 	bl	8009a9c <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8009bc2:	2800      	cmp	r0, #0
 8009bc4:	d0e0      	beq.n	8009b88 <vTaskDelay+0x4>
 8009bc6:	e7e9      	b.n	8009b9c <vTaskDelay+0x18>
 8009bc8:	20008a80 	.word	0x20008a80

08009bcc <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009bcc:	4b17      	ldr	r3, [pc, #92]	@ (8009c2c <vTaskSwitchContext+0x60>)
 8009bce:	681a      	ldr	r2, [r3, #0]
 8009bd0:	4b17      	ldr	r3, [pc, #92]	@ (8009c30 <vTaskSwitchContext+0x64>)
{
 8009bd2:	b570      	push	{r4, r5, r6, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009bd4:	b112      	cbz	r2, 8009bdc <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 8009bd6:	2201      	movs	r2, #1
 8009bd8:	601a      	str	r2, [r3, #0]
}
 8009bda:	bd70      	pop	{r4, r5, r6, pc}
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8009bdc:	4d15      	ldr	r5, [pc, #84]	@ (8009c34 <vTaskSwitchContext+0x68>)
		xYieldPending = pdFALSE;
 8009bde:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8009be0:	682a      	ldr	r2, [r5, #0]
 8009be2:	4915      	ldr	r1, [pc, #84]	@ (8009c38 <vTaskSwitchContext+0x6c>)
 8009be4:	2614      	movs	r6, #20
 8009be6:	fb06 f302 	mul.w	r3, r6, r2
 8009bea:	18c8      	adds	r0, r1, r3
 8009bec:	58cc      	ldr	r4, [r1, r3]
 8009bee:	b18c      	cbz	r4, 8009c14 <vTaskSwitchContext+0x48>
 8009bf0:	6844      	ldr	r4, [r0, #4]
 8009bf2:	3308      	adds	r3, #8
 8009bf4:	6864      	ldr	r4, [r4, #4]
 8009bf6:	6044      	str	r4, [r0, #4]
 8009bf8:	440b      	add	r3, r1
 8009bfa:	429c      	cmp	r4, r3
 8009bfc:	bf04      	itt	eq
 8009bfe:	6863      	ldreq	r3, [r4, #4]
 8009c00:	6043      	streq	r3, [r0, #4]
 8009c02:	2314      	movs	r3, #20
 8009c04:	fb03 1102 	mla	r1, r3, r2, r1
 8009c08:	684b      	ldr	r3, [r1, #4]
 8009c0a:	68d9      	ldr	r1, [r3, #12]
 8009c0c:	4b0b      	ldr	r3, [pc, #44]	@ (8009c3c <vTaskSwitchContext+0x70>)
 8009c0e:	6019      	str	r1, [r3, #0]
 8009c10:	602a      	str	r2, [r5, #0]
}
 8009c12:	e7e2      	b.n	8009bda <vTaskSwitchContext+0xe>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8009c14:	b942      	cbnz	r2, 8009c28 <vTaskSwitchContext+0x5c>
 8009c16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c1a:	f383 8811 	msr	BASEPRI, r3
 8009c1e:	f3bf 8f6f 	isb	sy
 8009c22:	f3bf 8f4f 	dsb	sy
 8009c26:	e7fe      	b.n	8009c26 <vTaskSwitchContext+0x5a>
 8009c28:	3a01      	subs	r2, #1
 8009c2a:	e7dc      	b.n	8009be6 <vTaskSwitchContext+0x1a>
 8009c2c:	20008a80 	.word	0x20008a80
 8009c30:	20008a90 	.word	0x20008a90
 8009c34:	20008a9c 	.word	0x20008a9c
 8009c38:	20008b18 	.word	0x20008b18
 8009c3c:	20008f78 	.word	0x20008f78

08009c40 <vTaskPlaceOnEventList>:
{
 8009c40:	b510      	push	{r4, lr}
 8009c42:	460c      	mov	r4, r1
	configASSERT( pxEventList );
 8009c44:	b940      	cbnz	r0, 8009c58 <vTaskPlaceOnEventList+0x18>
 8009c46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c4a:	f383 8811 	msr	BASEPRI, r3
 8009c4e:	f3bf 8f6f 	isb	sy
 8009c52:	f3bf 8f4f 	dsb	sy
 8009c56:	e7fe      	b.n	8009c56 <vTaskPlaceOnEventList+0x16>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009c58:	4b05      	ldr	r3, [pc, #20]	@ (8009c70 <vTaskPlaceOnEventList+0x30>)
 8009c5a:	6819      	ldr	r1, [r3, #0]
 8009c5c:	3118      	adds	r1, #24
 8009c5e:	f7ff f8de 	bl	8008e1e <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009c62:	4620      	mov	r0, r4
 8009c64:	2101      	movs	r1, #1
}
 8009c66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009c6a:	f7ff bced 	b.w	8009648 <prvAddCurrentTaskToDelayedList>
 8009c6e:	bf00      	nop
 8009c70:	20008f78 	.word	0x20008f78

08009c74 <vTaskPlaceOnEventListRestricted>:
	{
 8009c74:	b538      	push	{r3, r4, r5, lr}
 8009c76:	460d      	mov	r5, r1
 8009c78:	4614      	mov	r4, r2
		configASSERT( pxEventList );
 8009c7a:	b940      	cbnz	r0, 8009c8e <vTaskPlaceOnEventListRestricted+0x1a>
 8009c7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c80:	f383 8811 	msr	BASEPRI, r3
 8009c84:	f3bf 8f6f 	isb	sy
 8009c88:	f3bf 8f4f 	dsb	sy
 8009c8c:	e7fe      	b.n	8009c8c <vTaskPlaceOnEventListRestricted+0x18>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009c8e:	4b07      	ldr	r3, [pc, #28]	@ (8009cac <vTaskPlaceOnEventListRestricted+0x38>)
 8009c90:	6819      	ldr	r1, [r3, #0]
 8009c92:	3118      	adds	r1, #24
 8009c94:	f7ff f8b8 	bl	8008e08 <vListInsertEnd>
			xTicksToWait = portMAX_DELAY;
 8009c98:	2c00      	cmp	r4, #0
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009c9a:	4621      	mov	r1, r4
 8009c9c:	bf0c      	ite	eq
 8009c9e:	4628      	moveq	r0, r5
 8009ca0:	f04f 30ff 	movne.w	r0, #4294967295
	}
 8009ca4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009ca8:	f7ff bcce 	b.w	8009648 <prvAddCurrentTaskToDelayedList>
 8009cac:	20008f78 	.word	0x20008f78

08009cb0 <xTaskRemoveFromEventList>:
{
 8009cb0:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8009cb2:	68c3      	ldr	r3, [r0, #12]
 8009cb4:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 8009cb6:	b944      	cbnz	r4, 8009cca <xTaskRemoveFromEventList+0x1a>
 8009cb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009cbc:	f383 8811 	msr	BASEPRI, r3
 8009cc0:	f3bf 8f6f 	isb	sy
 8009cc4:	f3bf 8f4f 	dsb	sy
 8009cc8:	e7fe      	b.n	8009cc8 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009cca:	f104 0518 	add.w	r5, r4, #24
 8009cce:	4628      	mov	r0, r5
 8009cd0:	f7ff f8bc 	bl	8008e4c <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009cd4:	4b10      	ldr	r3, [pc, #64]	@ (8009d18 <xTaskRemoveFromEventList+0x68>)
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	b9db      	cbnz	r3, 8009d12 <xTaskRemoveFromEventList+0x62>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009cda:	1d25      	adds	r5, r4, #4
 8009cdc:	4628      	mov	r0, r5
 8009cde:	f7ff f8b5 	bl	8008e4c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009ce2:	4a0e      	ldr	r2, [pc, #56]	@ (8009d1c <xTaskRemoveFromEventList+0x6c>)
 8009ce4:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8009ce6:	6811      	ldr	r1, [r2, #0]
 8009ce8:	428b      	cmp	r3, r1
 8009cea:	bf88      	it	hi
 8009cec:	6013      	strhi	r3, [r2, #0]
 8009cee:	4a0c      	ldr	r2, [pc, #48]	@ (8009d20 <xTaskRemoveFromEventList+0x70>)
 8009cf0:	2014      	movs	r0, #20
 8009cf2:	4629      	mov	r1, r5
 8009cf4:	fb00 2003 	mla	r0, r0, r3, r2
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009cf8:	f7ff f886 	bl	8008e08 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009cfc:	4b09      	ldr	r3, [pc, #36]	@ (8009d24 <xTaskRemoveFromEventList+0x74>)
 8009cfe:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d04:	429a      	cmp	r2, r3
		xYieldPending = pdTRUE;
 8009d06:	bf83      	ittte	hi
 8009d08:	4b07      	ldrhi	r3, [pc, #28]	@ (8009d28 <xTaskRemoveFromEventList+0x78>)
 8009d0a:	2001      	movhi	r0, #1
 8009d0c:	6018      	strhi	r0, [r3, #0]
		xReturn = pdFALSE;
 8009d0e:	2000      	movls	r0, #0
}
 8009d10:	bd38      	pop	{r3, r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009d12:	4806      	ldr	r0, [pc, #24]	@ (8009d2c <xTaskRemoveFromEventList+0x7c>)
 8009d14:	4629      	mov	r1, r5
 8009d16:	e7ef      	b.n	8009cf8 <xTaskRemoveFromEventList+0x48>
 8009d18:	20008a80 	.word	0x20008a80
 8009d1c:	20008a9c 	.word	0x20008a9c
 8009d20:	20008b18 	.word	0x20008b18
 8009d24:	20008f78 	.word	0x20008f78
 8009d28:	20008a90 	.word	0x20008a90
 8009d2c:	20008ad4 	.word	0x20008ad4

08009d30 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009d30:	4b03      	ldr	r3, [pc, #12]	@ (8009d40 <vTaskInternalSetTimeOutState+0x10>)
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009d36:	4b03      	ldr	r3, [pc, #12]	@ (8009d44 <vTaskInternalSetTimeOutState+0x14>)
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	6043      	str	r3, [r0, #4]
}
 8009d3c:	4770      	bx	lr
 8009d3e:	bf00      	nop
 8009d40:	20008a8c 	.word	0x20008a8c
 8009d44:	20008aa0 	.word	0x20008aa0

08009d48 <xTaskCheckForTimeOut>:
{
 8009d48:	b570      	push	{r4, r5, r6, lr}
 8009d4a:	460c      	mov	r4, r1
	configASSERT( pxTimeOut );
 8009d4c:	4605      	mov	r5, r0
 8009d4e:	b940      	cbnz	r0, 8009d62 <xTaskCheckForTimeOut+0x1a>
 8009d50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d54:	f383 8811 	msr	BASEPRI, r3
 8009d58:	f3bf 8f6f 	isb	sy
 8009d5c:	f3bf 8f4f 	dsb	sy
 8009d60:	e7fe      	b.n	8009d60 <xTaskCheckForTimeOut+0x18>
	configASSERT( pxTicksToWait );
 8009d62:	b941      	cbnz	r1, 8009d76 <xTaskCheckForTimeOut+0x2e>
 8009d64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d68:	f383 8811 	msr	BASEPRI, r3
 8009d6c:	f3bf 8f6f 	isb	sy
 8009d70:	f3bf 8f4f 	dsb	sy
 8009d74:	e7fe      	b.n	8009d74 <xTaskCheckForTimeOut+0x2c>
	taskENTER_CRITICAL();
 8009d76:	f000 facd 	bl	800a314 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 8009d7a:	4b0f      	ldr	r3, [pc, #60]	@ (8009db8 <xTaskCheckForTimeOut+0x70>)
 8009d7c:	6819      	ldr	r1, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 8009d7e:	6823      	ldr	r3, [r4, #0]
 8009d80:	1c5a      	adds	r2, r3, #1
 8009d82:	d010      	beq.n	8009da6 <xTaskCheckForTimeOut+0x5e>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009d84:	480d      	ldr	r0, [pc, #52]	@ (8009dbc <xTaskCheckForTimeOut+0x74>)
 8009d86:	682e      	ldr	r6, [r5, #0]
 8009d88:	6800      	ldr	r0, [r0, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009d8a:	686a      	ldr	r2, [r5, #4]
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009d8c:	4286      	cmp	r6, r0
 8009d8e:	d001      	beq.n	8009d94 <xTaskCheckForTimeOut+0x4c>
 8009d90:	428a      	cmp	r2, r1
 8009d92:	d90f      	bls.n	8009db4 <xTaskCheckForTimeOut+0x6c>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009d94:	1a88      	subs	r0, r1, r2
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009d96:	4283      	cmp	r3, r0
 8009d98:	d90a      	bls.n	8009db0 <xTaskCheckForTimeOut+0x68>
			*pxTicksToWait -= xElapsedTime;
 8009d9a:	1a5b      	subs	r3, r3, r1
 8009d9c:	4413      	add	r3, r2
 8009d9e:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009da0:	4628      	mov	r0, r5
 8009da2:	f7ff ffc5 	bl	8009d30 <vTaskInternalSetTimeOutState>
				xReturn = pdFALSE;
 8009da6:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8009da8:	f000 fad4 	bl	800a354 <vPortExitCritical>
}
 8009dac:	4620      	mov	r0, r4
 8009dae:	bd70      	pop	{r4, r5, r6, pc}
			*pxTicksToWait = 0;
 8009db0:	2300      	movs	r3, #0
 8009db2:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 8009db4:	2401      	movs	r4, #1
 8009db6:	e7f7      	b.n	8009da8 <xTaskCheckForTimeOut+0x60>
 8009db8:	20008aa0 	.word	0x20008aa0
 8009dbc:	20008a8c 	.word	0x20008a8c

08009dc0 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8009dc0:	4b01      	ldr	r3, [pc, #4]	@ (8009dc8 <vTaskMissedYield+0x8>)
 8009dc2:	2201      	movs	r2, #1
 8009dc4:	601a      	str	r2, [r3, #0]
}
 8009dc6:	4770      	bx	lr
 8009dc8:	20008a90 	.word	0x20008a90

08009dcc <uxTaskGetStackHighWaterMark>:
		pxTCB = prvGetTCBFromHandle( xTask );
 8009dcc:	b908      	cbnz	r0, 8009dd2 <uxTaskGetStackHighWaterMark+0x6>
 8009dce:	4b06      	ldr	r3, [pc, #24]	@ (8009de8 <uxTaskGetStackHighWaterMark+0x1c>)
 8009dd0:	6818      	ldr	r0, [r3, #0]
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 8009dd2:	6b02      	ldr	r2, [r0, #48]	@ 0x30
	uint32_t ulCount = 0U;
 8009dd4:	2000      	movs	r0, #0
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8009dd6:	5c13      	ldrb	r3, [r2, r0]
 8009dd8:	2ba5      	cmp	r3, #165	@ 0xa5
 8009dda:	d002      	beq.n	8009de2 <uxTaskGetStackHighWaterMark+0x16>
	}
 8009ddc:	f3c0 008f 	ubfx	r0, r0, #2, #16
 8009de0:	4770      	bx	lr
			ulCount++;
 8009de2:	3001      	adds	r0, #1
 8009de4:	e7f7      	b.n	8009dd6 <uxTaskGetStackHighWaterMark+0xa>
 8009de6:	bf00      	nop
 8009de8:	20008f78 	.word	0x20008f78

08009dec <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8009dec:	4b05      	ldr	r3, [pc, #20]	@ (8009e04 <xTaskGetSchedulerState+0x18>)
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	b133      	cbz	r3, 8009e00 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009df2:	4b05      	ldr	r3, [pc, #20]	@ (8009e08 <xTaskGetSchedulerState+0x1c>)
 8009df4:	6818      	ldr	r0, [r3, #0]
 8009df6:	fab0 f080 	clz	r0, r0
 8009dfa:	0940      	lsrs	r0, r0, #5
 8009dfc:	0040      	lsls	r0, r0, #1
 8009dfe:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009e00:	2001      	movs	r0, #1
	}
 8009e02:	4770      	bx	lr
 8009e04:	20008a98 	.word	0x20008a98
 8009e08:	20008a80 	.word	0x20008a80

08009e0c <xTaskPriorityDisinherit>:
	{
 8009e0c:	b538      	push	{r3, r4, r5, lr}
		if( pxMutexHolder != NULL )
 8009e0e:	b908      	cbnz	r0, 8009e14 <xTaskPriorityDisinherit+0x8>
	BaseType_t xReturn = pdFALSE;
 8009e10:	2000      	movs	r0, #0
	}
 8009e12:	bd38      	pop	{r3, r4, r5, pc}
			configASSERT( pxTCB == pxCurrentTCB );
 8009e14:	4b1b      	ldr	r3, [pc, #108]	@ (8009e84 <xTaskPriorityDisinherit+0x78>)
 8009e16:	681c      	ldr	r4, [r3, #0]
 8009e18:	4284      	cmp	r4, r0
 8009e1a:	d008      	beq.n	8009e2e <xTaskPriorityDisinherit+0x22>
 8009e1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e20:	f383 8811 	msr	BASEPRI, r3
 8009e24:	f3bf 8f6f 	isb	sy
 8009e28:	f3bf 8f4f 	dsb	sy
 8009e2c:	e7fe      	b.n	8009e2c <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
 8009e2e:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8009e30:	b943      	cbnz	r3, 8009e44 <xTaskPriorityDisinherit+0x38>
 8009e32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e36:	f383 8811 	msr	BASEPRI, r3
 8009e3a:	f3bf 8f6f 	isb	sy
 8009e3e:	f3bf 8f4f 	dsb	sy
 8009e42:	e7fe      	b.n	8009e42 <xTaskPriorityDisinherit+0x36>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009e44:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8009e46:	6ce2      	ldr	r2, [r4, #76]	@ 0x4c
			( pxTCB->uxMutexesHeld )--;
 8009e48:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009e4a:	4291      	cmp	r1, r2
			( pxTCB->uxMutexesHeld )--;
 8009e4c:	6523      	str	r3, [r4, #80]	@ 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009e4e:	d0df      	beq.n	8009e10 <xTaskPriorityDisinherit+0x4>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d1dd      	bne.n	8009e10 <xTaskPriorityDisinherit+0x4>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009e54:	1d25      	adds	r5, r4, #4
 8009e56:	4628      	mov	r0, r5
 8009e58:	f7fe fff8 	bl	8008e4c <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009e5c:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8009e5e:	62e3      	str	r3, [r4, #44]	@ 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009e60:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8009e64:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 8009e66:	4a08      	ldr	r2, [pc, #32]	@ (8009e88 <xTaskPriorityDisinherit+0x7c>)
 8009e68:	6811      	ldr	r1, [r2, #0]
 8009e6a:	428b      	cmp	r3, r1
 8009e6c:	bf88      	it	hi
 8009e6e:	6013      	strhi	r3, [r2, #0]
 8009e70:	4a06      	ldr	r2, [pc, #24]	@ (8009e8c <xTaskPriorityDisinherit+0x80>)
 8009e72:	2014      	movs	r0, #20
 8009e74:	fb00 2003 	mla	r0, r0, r3, r2
 8009e78:	4629      	mov	r1, r5
 8009e7a:	f7fe ffc5 	bl	8008e08 <vListInsertEnd>
					xReturn = pdTRUE;
 8009e7e:	2001      	movs	r0, #1
		return xReturn;
 8009e80:	e7c7      	b.n	8009e12 <xTaskPriorityDisinherit+0x6>
 8009e82:	bf00      	nop
 8009e84:	20008f78 	.word	0x20008f78
 8009e88:	20008a9c 	.word	0x20008a9c
 8009e8c:	20008b18 	.word	0x20008b18

08009e90 <prvInsertTimerInActiveList>:
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );

	if( xNextExpiryTime <= xTimeNow )
 8009e90:	4291      	cmp	r1, r2
{
 8009e92:	b508      	push	{r3, lr}
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009e94:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009e96:	6100      	str	r0, [r0, #16]
	if( xNextExpiryTime <= xTimeNow )
 8009e98:	d80a      	bhi.n	8009eb0 <prvInsertTimerInActiveList+0x20>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009e9a:	1ad2      	subs	r2, r2, r3
 8009e9c:	6983      	ldr	r3, [r0, #24]
 8009e9e:	429a      	cmp	r2, r3
 8009ea0:	d20d      	bcs.n	8009ebe <prvInsertTimerInActiveList+0x2e>
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009ea2:	4b08      	ldr	r3, [pc, #32]	@ (8009ec4 <prvInsertTimerInActiveList+0x34>)
 8009ea4:	1d01      	adds	r1, r0, #4
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009ea6:	6818      	ldr	r0, [r3, #0]
 8009ea8:	f7fe ffb9 	bl	8008e1e <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 8009eac:	2000      	movs	r0, #0
		}
	}

	return xProcessTimerNow;
}
 8009eae:	bd08      	pop	{r3, pc}
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009eb0:	429a      	cmp	r2, r3
 8009eb2:	d201      	bcs.n	8009eb8 <prvInsertTimerInActiveList+0x28>
 8009eb4:	4299      	cmp	r1, r3
 8009eb6:	d202      	bcs.n	8009ebe <prvInsertTimerInActiveList+0x2e>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009eb8:	4b03      	ldr	r3, [pc, #12]	@ (8009ec8 <prvInsertTimerInActiveList+0x38>)
 8009eba:	1d01      	adds	r1, r0, #4
 8009ebc:	e7f3      	b.n	8009ea6 <prvInsertTimerInActiveList+0x16>
			xProcessTimerNow = pdTRUE;
 8009ebe:	2001      	movs	r0, #1
	return xProcessTimerNow;
 8009ec0:	e7f5      	b.n	8009eae <prvInsertTimerInActiveList+0x1e>
 8009ec2:	bf00      	nop
 8009ec4:	20009078 	.word	0x20009078
 8009ec8:	2000907c 	.word	0x2000907c

08009ecc <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009ecc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
 8009ece:	4c11      	ldr	r4, [pc, #68]	@ (8009f14 <prvCheckForValidListAndQueue+0x48>)
	taskENTER_CRITICAL();
 8009ed0:	f000 fa20 	bl	800a314 <vPortEnterCritical>
		if( xTimerQueue == NULL )
 8009ed4:	6825      	ldr	r5, [r4, #0]
 8009ed6:	b9bd      	cbnz	r5, 8009f08 <prvCheckForValidListAndQueue+0x3c>
		{
			vListInitialise( &xActiveTimerList1 );
 8009ed8:	4f0f      	ldr	r7, [pc, #60]	@ (8009f18 <prvCheckForValidListAndQueue+0x4c>)
			vListInitialise( &xActiveTimerList2 );
 8009eda:	4e10      	ldr	r6, [pc, #64]	@ (8009f1c <prvCheckForValidListAndQueue+0x50>)
			vListInitialise( &xActiveTimerList1 );
 8009edc:	4638      	mov	r0, r7
 8009ede:	f7fe ff85 	bl	8008dec <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009ee2:	4630      	mov	r0, r6
 8009ee4:	f7fe ff82 	bl	8008dec <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009ee8:	4b0d      	ldr	r3, [pc, #52]	@ (8009f20 <prvCheckForValidListAndQueue+0x54>)
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009eea:	4a0e      	ldr	r2, [pc, #56]	@ (8009f24 <prvCheckForValidListAndQueue+0x58>)
			pxCurrentTimerList = &xActiveTimerList1;
 8009eec:	601f      	str	r7, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009eee:	4b0e      	ldr	r3, [pc, #56]	@ (8009f28 <prvCheckForValidListAndQueue+0x5c>)
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009ef0:	2110      	movs	r1, #16
			pxOverflowTimerList = &xActiveTimerList2;
 8009ef2:	601e      	str	r6, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009ef4:	200a      	movs	r0, #10
 8009ef6:	4b0d      	ldr	r3, [pc, #52]	@ (8009f2c <prvCheckForValidListAndQueue+0x60>)
 8009ef8:	9500      	str	r5, [sp, #0]
 8009efa:	f7ff f882 	bl	8009002 <xQueueGenericCreateStatic>
 8009efe:	6020      	str	r0, [r4, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009f00:	b110      	cbz	r0, 8009f08 <prvCheckForValidListAndQueue+0x3c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009f02:	490b      	ldr	r1, [pc, #44]	@ (8009f30 <prvCheckForValidListAndQueue+0x64>)
 8009f04:	f7ff faea 	bl	80094dc <vQueueAddToRegistry>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
}
 8009f08:	b003      	add	sp, #12
 8009f0a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	taskEXIT_CRITICAL();
 8009f0e:	f000 ba21 	b.w	800a354 <vPortExitCritical>
 8009f12:	bf00      	nop
 8009f14:	20009074 	.word	0x20009074
 8009f18:	20009094 	.word	0x20009094
 8009f1c:	20009080 	.word	0x20009080
 8009f20:	2000907c 	.word	0x2000907c
 8009f24:	20008fcc 	.word	0x20008fcc
 8009f28:	20009078 	.word	0x20009078
 8009f2c:	20008f7c 	.word	0x20008f7c
 8009f30:	08012c52 	.word	0x08012c52

08009f34 <xTimerCreateTimerTask>:
{
 8009f34:	b510      	push	{r4, lr}
 8009f36:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
 8009f38:	f7ff ffc8 	bl	8009ecc <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 8009f3c:	4b12      	ldr	r3, [pc, #72]	@ (8009f88 <xTimerCreateTimerTask+0x54>)
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	b1b3      	cbz	r3, 8009f70 <xTimerCreateTimerTask+0x3c>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009f42:	2400      	movs	r4, #0
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009f44:	aa07      	add	r2, sp, #28
 8009f46:	a906      	add	r1, sp, #24
 8009f48:	a805      	add	r0, sp, #20
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009f4a:	e9cd 4405 	strd	r4, r4, [sp, #20]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009f4e:	f7fe ff41 	bl	8008dd4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009f52:	9b05      	ldr	r3, [sp, #20]
 8009f54:	9302      	str	r3, [sp, #8]
 8009f56:	9b06      	ldr	r3, [sp, #24]
 8009f58:	9301      	str	r3, [sp, #4]
 8009f5a:	2302      	movs	r3, #2
 8009f5c:	9300      	str	r3, [sp, #0]
 8009f5e:	9a07      	ldr	r2, [sp, #28]
 8009f60:	490a      	ldr	r1, [pc, #40]	@ (8009f8c <xTimerCreateTimerTask+0x58>)
 8009f62:	480b      	ldr	r0, [pc, #44]	@ (8009f90 <xTimerCreateTimerTask+0x5c>)
 8009f64:	4623      	mov	r3, r4
 8009f66:	f7ff fc4a 	bl	80097fe <xTaskCreateStatic>
 8009f6a:	4b0a      	ldr	r3, [pc, #40]	@ (8009f94 <xTimerCreateTimerTask+0x60>)
 8009f6c:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 8009f6e:	b940      	cbnz	r0, 8009f82 <xTimerCreateTimerTask+0x4e>
 8009f70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f74:	f383 8811 	msr	BASEPRI, r3
 8009f78:	f3bf 8f6f 	isb	sy
 8009f7c:	f3bf 8f4f 	dsb	sy
	configASSERT( xReturn );
 8009f80:	e7fe      	b.n	8009f80 <xTimerCreateTimerTask+0x4c>
}
 8009f82:	2001      	movs	r0, #1
 8009f84:	b008      	add	sp, #32
 8009f86:	bd10      	pop	{r4, pc}
 8009f88:	20009074 	.word	0x20009074
 8009f8c:	08012c57 	.word	0x08012c57
 8009f90:	0800a091 	.word	0x0800a091
 8009f94:	20009070 	.word	0x20009070

08009f98 <xTimerGenericCommand>:
{
 8009f98:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8009f9a:	4616      	mov	r6, r2
	configASSERT( xTimer );
 8009f9c:	4604      	mov	r4, r0
{
 8009f9e:	461a      	mov	r2, r3
	configASSERT( xTimer );
 8009fa0:	b940      	cbnz	r0, 8009fb4 <xTimerGenericCommand+0x1c>
 8009fa2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009fa6:	f383 8811 	msr	BASEPRI, r3
 8009faa:	f3bf 8f6f 	isb	sy
 8009fae:	f3bf 8f4f 	dsb	sy
 8009fb2:	e7fe      	b.n	8009fb2 <xTimerGenericCommand+0x1a>
	if( xTimerQueue != NULL )
 8009fb4:	4d0d      	ldr	r5, [pc, #52]	@ (8009fec <xTimerGenericCommand+0x54>)
 8009fb6:	6828      	ldr	r0, [r5, #0]
 8009fb8:	b180      	cbz	r0, 8009fdc <xTimerGenericCommand+0x44>
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009fba:	2905      	cmp	r1, #5
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009fbc:	e9cd 1600 	strd	r1, r6, [sp]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8009fc0:	9402      	str	r4, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009fc2:	dc0d      	bgt.n	8009fe0 <xTimerGenericCommand+0x48>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009fc4:	f7ff ff12 	bl	8009dec <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009fc8:	2300      	movs	r3, #0
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009fca:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009fcc:	bf08      	it	eq
 8009fce:	9a08      	ldreq	r2, [sp, #32]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009fd0:	6828      	ldr	r0, [r5, #0]
 8009fd2:	bf18      	it	ne
 8009fd4:	461a      	movne	r2, r3
 8009fd6:	4669      	mov	r1, sp
 8009fd8:	f7ff f887 	bl	80090ea <xQueueGenericSend>
}
 8009fdc:	b004      	add	sp, #16
 8009fde:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009fe0:	2300      	movs	r3, #0
 8009fe2:	4669      	mov	r1, sp
 8009fe4:	f7ff f933 	bl	800924e <xQueueGenericSendFromISR>
 8009fe8:	e7f8      	b.n	8009fdc <xTimerGenericCommand+0x44>
 8009fea:	bf00      	nop
 8009fec:	20009074 	.word	0x20009074

08009ff0 <prvSampleTimeNow>:
{
 8009ff0:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	if( xTimeNow < xLastTime )
 8009ff4:	f8df 8094 	ldr.w	r8, [pc, #148]	@ 800a08c <prvSampleTimeNow+0x9c>
{
 8009ff8:	4606      	mov	r6, r0
	xTimeNow = xTaskGetTickCount();
 8009ffa:	f7ff fcb3 	bl	8009964 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 8009ffe:	f8d8 3000 	ldr.w	r3, [r8]
 800a002:	4283      	cmp	r3, r0
	xTimeNow = xTaskGetTickCount();
 800a004:	4605      	mov	r5, r0
	if( xTimeNow < xLastTime )
 800a006:	d909      	bls.n	800a01c <prvSampleTimeNow+0x2c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a008:	4f1e      	ldr	r7, [pc, #120]	@ (800a084 <prvSampleTimeNow+0x94>)
 800a00a:	683b      	ldr	r3, [r7, #0]
 800a00c:	681a      	ldr	r2, [r3, #0]
 800a00e:	b96a      	cbnz	r2, 800a02c <prvSampleTimeNow+0x3c>
	pxCurrentTimerList = pxOverflowTimerList;
 800a010:	4a1d      	ldr	r2, [pc, #116]	@ (800a088 <prvSampleTimeNow+0x98>)
 800a012:	6811      	ldr	r1, [r2, #0]
 800a014:	6039      	str	r1, [r7, #0]
	pxOverflowTimerList = pxTemp;
 800a016:	6013      	str	r3, [r2, #0]
		*pxTimerListsWereSwitched = pdTRUE;
 800a018:	2301      	movs	r3, #1
 800a01a:	e000      	b.n	800a01e <prvSampleTimeNow+0x2e>
 800a01c:	2300      	movs	r3, #0
}
 800a01e:	4628      	mov	r0, r5
		*pxTimerListsWereSwitched = pdTRUE;
 800a020:	6033      	str	r3, [r6, #0]
	xLastTime = xTimeNow;
 800a022:	f8c8 5000 	str.w	r5, [r8]
}
 800a026:	b002      	add	sp, #8
 800a028:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a02c:	68db      	ldr	r3, [r3, #12]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a02e:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a030:	f8d3 9000 	ldr.w	r9, [r3]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a034:	f104 0a04 	add.w	sl, r4, #4
 800a038:	4650      	mov	r0, sl
 800a03a:	f7fe ff07 	bl	8008e4c <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a03e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800a040:	4620      	mov	r0, r4
 800a042:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800a044:	69e3      	ldr	r3, [r4, #28]
 800a046:	2b01      	cmp	r3, #1
 800a048:	d1df      	bne.n	800a00a <prvSampleTimeNow+0x1a>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a04a:	69a3      	ldr	r3, [r4, #24]
 800a04c:	444b      	add	r3, r9
			if( xReloadTime > xNextExpireTime )
 800a04e:	4599      	cmp	r9, r3
 800a050:	d206      	bcs.n	800a060 <prvSampleTimeNow+0x70>
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a052:	6838      	ldr	r0, [r7, #0]
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a054:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a056:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a058:	4651      	mov	r1, sl
 800a05a:	f7fe fee0 	bl	8008e1e <vListInsert>
 800a05e:	e7d4      	b.n	800a00a <prvSampleTimeNow+0x1a>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a060:	2300      	movs	r3, #0
 800a062:	9300      	str	r3, [sp, #0]
 800a064:	464a      	mov	r2, r9
 800a066:	4619      	mov	r1, r3
 800a068:	4620      	mov	r0, r4
 800a06a:	f7ff ff95 	bl	8009f98 <xTimerGenericCommand>
				configASSERT( xResult );
 800a06e:	2800      	cmp	r0, #0
 800a070:	d1cb      	bne.n	800a00a <prvSampleTimeNow+0x1a>
 800a072:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a076:	f383 8811 	msr	BASEPRI, r3
 800a07a:	f3bf 8f6f 	isb	sy
 800a07e:	f3bf 8f4f 	dsb	sy
 800a082:	e7fe      	b.n	800a082 <prvSampleTimeNow+0x92>
 800a084:	2000907c 	.word	0x2000907c
 800a088:	20009078 	.word	0x20009078
 800a08c:	2000906c 	.word	0x2000906c

0800a090 <prvTimerTask>:
{
 800a090:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a094:	4e69      	ldr	r6, [pc, #420]	@ (800a23c <prvTimerTask+0x1ac>)
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a096:	4f6a      	ldr	r7, [pc, #424]	@ (800a240 <prvTimerTask+0x1b0>)
{
 800a098:	b089      	sub	sp, #36	@ 0x24
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a09a:	6833      	ldr	r3, [r6, #0]
 800a09c:	681d      	ldr	r5, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a09e:	2d00      	cmp	r5, #0
 800a0a0:	d033      	beq.n	800a10a <prvTimerTask+0x7a>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a0a2:	68db      	ldr	r3, [r3, #12]
 800a0a4:	f8d3 8000 	ldr.w	r8, [r3]
	vTaskSuspendAll();
 800a0a8:	f7ff fc54 	bl	8009954 <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a0ac:	a804      	add	r0, sp, #16
 800a0ae:	f7ff ff9f 	bl	8009ff0 <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
 800a0b2:	9c04      	ldr	r4, [sp, #16]
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a0b4:	4681      	mov	r9, r0
		if( xTimerListsWereSwitched == pdFALSE )
 800a0b6:	2c00      	cmp	r4, #0
 800a0b8:	d175      	bne.n	800a1a6 <prvTimerTask+0x116>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a0ba:	2d00      	cmp	r5, #0
 800a0bc:	d058      	beq.n	800a170 <prvTimerTask+0xe0>
 800a0be:	4540      	cmp	r0, r8
 800a0c0:	d35c      	bcc.n	800a17c <prvTimerTask+0xec>
				( void ) xTaskResumeAll();
 800a0c2:	f7ff fceb 	bl	8009a9c <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a0c6:	6833      	ldr	r3, [r6, #0]
 800a0c8:	68db      	ldr	r3, [r3, #12]
 800a0ca:	68dd      	ldr	r5, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a0cc:	1d28      	adds	r0, r5, #4
 800a0ce:	f7fe febd 	bl	8008e4c <uxListRemove>
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800a0d2:	69eb      	ldr	r3, [r5, #28]
 800a0d4:	2b01      	cmp	r3, #1
 800a0d6:	d11a      	bne.n	800a10e <prvTimerTask+0x7e>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a0d8:	69a9      	ldr	r1, [r5, #24]
 800a0da:	4643      	mov	r3, r8
 800a0dc:	464a      	mov	r2, r9
 800a0de:	4441      	add	r1, r8
 800a0e0:	4628      	mov	r0, r5
 800a0e2:	f7ff fed5 	bl	8009e90 <prvInsertTimerInActiveList>
 800a0e6:	b190      	cbz	r0, 800a10e <prvTimerTask+0x7e>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a0e8:	9400      	str	r4, [sp, #0]
 800a0ea:	4623      	mov	r3, r4
 800a0ec:	4642      	mov	r2, r8
 800a0ee:	4621      	mov	r1, r4
 800a0f0:	4628      	mov	r0, r5
 800a0f2:	f7ff ff51 	bl	8009f98 <xTimerGenericCommand>
			configASSERT( xResult );
 800a0f6:	b950      	cbnz	r0, 800a10e <prvTimerTask+0x7e>
 800a0f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a0fc:	f383 8811 	msr	BASEPRI, r3
 800a100:	f3bf 8f6f 	isb	sy
 800a104:	f3bf 8f4f 	dsb	sy
 800a108:	e7fe      	b.n	800a108 <prvTimerTask+0x78>
		xNextExpireTime = ( TickType_t ) 0U;
 800a10a:	46a8      	mov	r8, r5
 800a10c:	e7cc      	b.n	800a0a8 <prvTimerTask+0x18>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a10e:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 800a110:	4628      	mov	r0, r5
 800a112:	4798      	blx	r3
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a114:	6838      	ldr	r0, [r7, #0]
 800a116:	2200      	movs	r2, #0
 800a118:	a904      	add	r1, sp, #16
 800a11a:	f7ff f8f4 	bl	8009306 <xQueueReceive>
 800a11e:	2800      	cmp	r0, #0
 800a120:	d0bb      	beq.n	800a09a <prvTimerTask+0xa>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a122:	9b04      	ldr	r3, [sp, #16]
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a124:	9806      	ldr	r0, [sp, #24]
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a126:	2b00      	cmp	r3, #0
 800a128:	db40      	blt.n	800a1ac <prvTimerTask+0x11c>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a12a:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a12c:	6963      	ldr	r3, [r4, #20]
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d143      	bne.n	800a1ba <prvTimerTask+0x12a>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a132:	a803      	add	r0, sp, #12
 800a134:	f7ff ff5c 	bl	8009ff0 <prvSampleTimeNow>
			switch( xMessage.xMessageID )
 800a138:	9b04      	ldr	r3, [sp, #16]
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a13a:	4602      	mov	r2, r0
			switch( xMessage.xMessageID )
 800a13c:	2b09      	cmp	r3, #9
 800a13e:	d8e9      	bhi.n	800a114 <prvTimerTask+0x84>
 800a140:	a101      	add	r1, pc, #4	@ (adr r1, 800a148 <prvTimerTask+0xb8>)
 800a142:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a146:	bf00      	nop
 800a148:	0800a1c3 	.word	0x0800a1c3
 800a14c:	0800a1c3 	.word	0x0800a1c3
 800a150:	0800a1c3 	.word	0x0800a1c3
 800a154:	0800a115 	.word	0x0800a115
 800a158:	0800a207 	.word	0x0800a207
 800a15c:	0800a22b 	.word	0x0800a22b
 800a160:	0800a1c3 	.word	0x0800a1c3
 800a164:	0800a1c3 	.word	0x0800a1c3
 800a168:	0800a115 	.word	0x0800a115
 800a16c:	0800a207 	.word	0x0800a207
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a170:	4b34      	ldr	r3, [pc, #208]	@ (800a244 <prvTimerTask+0x1b4>)
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	681c      	ldr	r4, [r3, #0]
 800a176:	fab4 f484 	clz	r4, r4
 800a17a:	0964      	lsrs	r4, r4, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a17c:	6838      	ldr	r0, [r7, #0]
 800a17e:	4622      	mov	r2, r4
 800a180:	eba8 0109 	sub.w	r1, r8, r9
 800a184:	f7ff f9bc 	bl	8009500 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a188:	f7ff fc88 	bl	8009a9c <xTaskResumeAll>
 800a18c:	2800      	cmp	r0, #0
 800a18e:	d1c1      	bne.n	800a114 <prvTimerTask+0x84>
					portYIELD_WITHIN_API();
 800a190:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800a194:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a198:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800a19c:	f3bf 8f4f 	dsb	sy
 800a1a0:	f3bf 8f6f 	isb	sy
 800a1a4:	e7b6      	b.n	800a114 <prvTimerTask+0x84>
			( void ) xTaskResumeAll();
 800a1a6:	f7ff fc79 	bl	8009a9c <xTaskResumeAll>
}
 800a1aa:	e7b3      	b.n	800a114 <prvTimerTask+0x84>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a1ac:	9b05      	ldr	r3, [sp, #20]
 800a1ae:	9907      	ldr	r1, [sp, #28]
 800a1b0:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a1b2:	9b04      	ldr	r3, [sp, #16]
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	dbad      	blt.n	800a114 <prvTimerTask+0x84>
 800a1b8:	e7b7      	b.n	800a12a <prvTimerTask+0x9a>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a1ba:	1d20      	adds	r0, r4, #4
 800a1bc:	f7fe fe46 	bl	8008e4c <uxListRemove>
 800a1c0:	e7b7      	b.n	800a132 <prvTimerTask+0xa2>
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a1c2:	69a1      	ldr	r1, [r4, #24]
 800a1c4:	9b05      	ldr	r3, [sp, #20]
 800a1c6:	4620      	mov	r0, r4
 800a1c8:	4419      	add	r1, r3
 800a1ca:	f7ff fe61 	bl	8009e90 <prvInsertTimerInActiveList>
 800a1ce:	2800      	cmp	r0, #0
 800a1d0:	d0a0      	beq.n	800a114 <prvTimerTask+0x84>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a1d2:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800a1d4:	4620      	mov	r0, r4
 800a1d6:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800a1d8:	69e3      	ldr	r3, [r4, #28]
 800a1da:	2b01      	cmp	r3, #1
 800a1dc:	d19a      	bne.n	800a114 <prvTimerTask+0x84>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a1de:	69a2      	ldr	r2, [r4, #24]
 800a1e0:	9905      	ldr	r1, [sp, #20]
 800a1e2:	2300      	movs	r3, #0
 800a1e4:	440a      	add	r2, r1
 800a1e6:	9300      	str	r3, [sp, #0]
 800a1e8:	4619      	mov	r1, r3
 800a1ea:	4620      	mov	r0, r4
 800a1ec:	f7ff fed4 	bl	8009f98 <xTimerGenericCommand>
							configASSERT( xResult );
 800a1f0:	2800      	cmp	r0, #0
 800a1f2:	d18f      	bne.n	800a114 <prvTimerTask+0x84>
 800a1f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a1f8:	f383 8811 	msr	BASEPRI, r3
 800a1fc:	f3bf 8f6f 	isb	sy
 800a200:	f3bf 8f4f 	dsb	sy
 800a204:	e7fe      	b.n	800a204 <prvTimerTask+0x174>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a206:	9905      	ldr	r1, [sp, #20]
 800a208:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a20a:	b941      	cbnz	r1, 800a21e <prvTimerTask+0x18e>
 800a20c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a210:	f383 8811 	msr	BASEPRI, r3
 800a214:	f3bf 8f6f 	isb	sy
 800a218:	f3bf 8f4f 	dsb	sy
 800a21c:	e7fe      	b.n	800a21c <prvTimerTask+0x18c>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a21e:	4603      	mov	r3, r0
 800a220:	4401      	add	r1, r0
 800a222:	4620      	mov	r0, r4
 800a224:	f7ff fe34 	bl	8009e90 <prvInsertTimerInActiveList>
					break;
 800a228:	e774      	b.n	800a114 <prvTimerTask+0x84>
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800a22a:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 800a22e:	2b00      	cmp	r3, #0
 800a230:	f47f af70 	bne.w	800a114 <prvTimerTask+0x84>
							vPortFree( pxTimer );
 800a234:	4620      	mov	r0, r4
 800a236:	f000 fa65 	bl	800a704 <vPortFree>
 800a23a:	e76b      	b.n	800a114 <prvTimerTask+0x84>
 800a23c:	2000907c 	.word	0x2000907c
 800a240:	20009074 	.word	0x20009074
 800a244:	20009078 	.word	0x20009078

0800a248 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a248:	4808      	ldr	r0, [pc, #32]	@ (800a26c <prvPortStartFirstTask+0x24>)
 800a24a:	6800      	ldr	r0, [r0, #0]
 800a24c:	6800      	ldr	r0, [r0, #0]
 800a24e:	f380 8808 	msr	MSP, r0
 800a252:	f04f 0000 	mov.w	r0, #0
 800a256:	f380 8814 	msr	CONTROL, r0
 800a25a:	b662      	cpsie	i
 800a25c:	b661      	cpsie	f
 800a25e:	f3bf 8f4f 	dsb	sy
 800a262:	f3bf 8f6f 	isb	sy
 800a266:	df00      	svc	0
 800a268:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a26a:	0000      	.short	0x0000
 800a26c:	e000ed08 	.word	0xe000ed08

0800a270 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a270:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800a280 <vPortEnableVFP+0x10>
 800a274:	6801      	ldr	r1, [r0, #0]
 800a276:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800a27a:	6001      	str	r1, [r0, #0]
 800a27c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a27e:	0000      	.short	0x0000
 800a280:	e000ed88 	.word	0xe000ed88

0800a284 <prvTaskExitError>:
{
 800a284:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 800a286:	2300      	movs	r3, #0
 800a288:	9301      	str	r3, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
 800a28a:	4b0d      	ldr	r3, [pc, #52]	@ (800a2c0 <prvTaskExitError+0x3c>)
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	3301      	adds	r3, #1
 800a290:	d008      	beq.n	800a2a4 <prvTaskExitError+0x20>
 800a292:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a296:	f383 8811 	msr	BASEPRI, r3
 800a29a:	f3bf 8f6f 	isb	sy
 800a29e:	f3bf 8f4f 	dsb	sy
 800a2a2:	e7fe      	b.n	800a2a2 <prvTaskExitError+0x1e>
 800a2a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a2a8:	f383 8811 	msr	BASEPRI, r3
 800a2ac:	f3bf 8f6f 	isb	sy
 800a2b0:	f3bf 8f4f 	dsb	sy
	while( ulDummy == 0 )
 800a2b4:	9b01      	ldr	r3, [sp, #4]
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d0fc      	beq.n	800a2b4 <prvTaskExitError+0x30>
}
 800a2ba:	b002      	add	sp, #8
 800a2bc:	4770      	bx	lr
 800a2be:	bf00      	nop
 800a2c0:	20000038 	.word	0x20000038

0800a2c4 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a2c4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800a2c8:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a2cc:	4b07      	ldr	r3, [pc, #28]	@ (800a2ec <pxPortInitialiseStack+0x28>)
 800a2ce:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a2d2:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a2d6:	f06f 0302 	mvn.w	r3, #2
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a2da:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a2de:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a2e2:	f840 3c24 	str.w	r3, [r0, #-36]
}
 800a2e6:	3844      	subs	r0, #68	@ 0x44
 800a2e8:	4770      	bx	lr
 800a2ea:	bf00      	nop
 800a2ec:	0800a285 	.word	0x0800a285

0800a2f0 <SVC_Handler>:
	__asm volatile (
 800a2f0:	4b07      	ldr	r3, [pc, #28]	@ (800a310 <pxCurrentTCBConst2>)
 800a2f2:	6819      	ldr	r1, [r3, #0]
 800a2f4:	6808      	ldr	r0, [r1, #0]
 800a2f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2fa:	f380 8809 	msr	PSP, r0
 800a2fe:	f3bf 8f6f 	isb	sy
 800a302:	f04f 0000 	mov.w	r0, #0
 800a306:	f380 8811 	msr	BASEPRI, r0
 800a30a:	4770      	bx	lr
 800a30c:	f3af 8000 	nop.w

0800a310 <pxCurrentTCBConst2>:
 800a310:	20008f78 	.word	0x20008f78

0800a314 <vPortEnterCritical>:
 800a314:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a318:	f383 8811 	msr	BASEPRI, r3
 800a31c:	f3bf 8f6f 	isb	sy
 800a320:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 800a324:	4a0a      	ldr	r2, [pc, #40]	@ (800a350 <vPortEnterCritical+0x3c>)
 800a326:	6813      	ldr	r3, [r2, #0]
 800a328:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 800a32a:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 800a32c:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 800a32e:	d10e      	bne.n	800a34e <vPortEnterCritical+0x3a>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a330:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800a334:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	@ 0xd04
 800a338:	b2db      	uxtb	r3, r3
 800a33a:	b143      	cbz	r3, 800a34e <vPortEnterCritical+0x3a>
 800a33c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a340:	f383 8811 	msr	BASEPRI, r3
 800a344:	f3bf 8f6f 	isb	sy
 800a348:	f3bf 8f4f 	dsb	sy
 800a34c:	e7fe      	b.n	800a34c <vPortEnterCritical+0x38>
}
 800a34e:	4770      	bx	lr
 800a350:	20000038 	.word	0x20000038

0800a354 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 800a354:	4a08      	ldr	r2, [pc, #32]	@ (800a378 <vPortExitCritical+0x24>)
 800a356:	6813      	ldr	r3, [r2, #0]
 800a358:	b943      	cbnz	r3, 800a36c <vPortExitCritical+0x18>
 800a35a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a35e:	f383 8811 	msr	BASEPRI, r3
 800a362:	f3bf 8f6f 	isb	sy
 800a366:	f3bf 8f4f 	dsb	sy
 800a36a:	e7fe      	b.n	800a36a <vPortExitCritical+0x16>
	uxCriticalNesting--;
 800a36c:	3b01      	subs	r3, #1
 800a36e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a370:	b90b      	cbnz	r3, 800a376 <vPortExitCritical+0x22>
	__asm volatile
 800a372:	f383 8811 	msr	BASEPRI, r3
}
 800a376:	4770      	bx	lr
 800a378:	20000038 	.word	0x20000038
 800a37c:	00000000 	.word	0x00000000

0800a380 <PendSV_Handler>:
	__asm volatile
 800a380:	f3ef 8009 	mrs	r0, PSP
 800a384:	f3bf 8f6f 	isb	sy
 800a388:	4b15      	ldr	r3, [pc, #84]	@ (800a3e0 <pxCurrentTCBConst>)
 800a38a:	681a      	ldr	r2, [r3, #0]
 800a38c:	f01e 0f10 	tst.w	lr, #16
 800a390:	bf08      	it	eq
 800a392:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a396:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a39a:	6010      	str	r0, [r2, #0]
 800a39c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a3a0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800a3a4:	f380 8811 	msr	BASEPRI, r0
 800a3a8:	f3bf 8f4f 	dsb	sy
 800a3ac:	f3bf 8f6f 	isb	sy
 800a3b0:	f7ff fc0c 	bl	8009bcc <vTaskSwitchContext>
 800a3b4:	f04f 0000 	mov.w	r0, #0
 800a3b8:	f380 8811 	msr	BASEPRI, r0
 800a3bc:	bc09      	pop	{r0, r3}
 800a3be:	6819      	ldr	r1, [r3, #0]
 800a3c0:	6808      	ldr	r0, [r1, #0]
 800a3c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3c6:	f01e 0f10 	tst.w	lr, #16
 800a3ca:	bf08      	it	eq
 800a3cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a3d0:	f380 8809 	msr	PSP, r0
 800a3d4:	f3bf 8f6f 	isb	sy
 800a3d8:	4770      	bx	lr
 800a3da:	bf00      	nop
 800a3dc:	f3af 8000 	nop.w

0800a3e0 <pxCurrentTCBConst>:
 800a3e0:	20008f78 	.word	0x20008f78

0800a3e4 <SysTick_Handler>:
{
 800a3e4:	b508      	push	{r3, lr}
	__asm volatile
 800a3e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a3ea:	f383 8811 	msr	BASEPRI, r3
 800a3ee:	f3bf 8f6f 	isb	sy
 800a3f2:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 800a3f6:	f7ff fabb 	bl	8009970 <xTaskIncrementTick>
 800a3fa:	b128      	cbz	r0, 800a408 <SysTick_Handler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a3fc:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800a400:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a404:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
	__asm volatile
 800a408:	2300      	movs	r3, #0
 800a40a:	f383 8811 	msr	BASEPRI, r3
}
 800a40e:	bd08      	pop	{r3, pc}

0800a410 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a410:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
 800a414:	2300      	movs	r3, #0
 800a416:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a418:	6193      	str	r3, [r2, #24]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a41a:	4b05      	ldr	r3, [pc, #20]	@ (800a430 <vPortSetupTimerInterrupt+0x20>)
 800a41c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	fbb3 f3f1 	udiv	r3, r3, r1
 800a426:	3b01      	subs	r3, #1
 800a428:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a42a:	2307      	movs	r3, #7
 800a42c:	6113      	str	r3, [r2, #16]
}
 800a42e:	4770      	bx	lr
 800a430:	2000002c 	.word	0x2000002c

0800a434 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a434:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
{
 800a438:	b537      	push	{r0, r1, r2, r4, r5, lr}
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a43a:	f8d3 1d00 	ldr.w	r1, [r3, #3328]	@ 0xd00
 800a43e:	4a38      	ldr	r2, [pc, #224]	@ (800a520 <xPortStartScheduler+0xec>)
 800a440:	4291      	cmp	r1, r2
 800a442:	d108      	bne.n	800a456 <xPortStartScheduler+0x22>
	__asm volatile
 800a444:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a448:	f383 8811 	msr	BASEPRI, r3
 800a44c:	f3bf 8f6f 	isb	sy
 800a450:	f3bf 8f4f 	dsb	sy
 800a454:	e7fe      	b.n	800a454 <xPortStartScheduler+0x20>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a456:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 800a45a:	4b32      	ldr	r3, [pc, #200]	@ (800a524 <xPortStartScheduler+0xf0>)
 800a45c:	429a      	cmp	r2, r3
 800a45e:	d108      	bne.n	800a472 <xPortStartScheduler+0x3e>
 800a460:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a464:	f383 8811 	msr	BASEPRI, r3
 800a468:	f3bf 8f6f 	isb	sy
 800a46c:	f3bf 8f4f 	dsb	sy
 800a470:	e7fe      	b.n	800a470 <xPortStartScheduler+0x3c>
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a472:	4b2d      	ldr	r3, [pc, #180]	@ (800a528 <xPortStartScheduler+0xf4>)
 800a474:	781a      	ldrb	r2, [r3, #0]
 800a476:	b2d2      	uxtb	r2, r2
 800a478:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a47a:	22ff      	movs	r2, #255	@ 0xff
 800a47c:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a47e:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a480:	4a2a      	ldr	r2, [pc, #168]	@ (800a52c <xPortStartScheduler+0xf8>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a482:	b2db      	uxtb	r3, r3
 800a484:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a488:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800a48c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800a490:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a492:	4a27      	ldr	r2, [pc, #156]	@ (800a530 <xPortStartScheduler+0xfc>)
 800a494:	2307      	movs	r3, #7
 800a496:	6013      	str	r3, [r2, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a498:	f89d 1003 	ldrb.w	r1, [sp, #3]
			ulMaxPRIGROUPValue--;
 800a49c:	6813      	ldr	r3, [r2, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a49e:	0609      	lsls	r1, r1, #24
 800a4a0:	d40a      	bmi.n	800a4b8 <xPortStartScheduler+0x84>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a4a2:	2b03      	cmp	r3, #3
 800a4a4:	d011      	beq.n	800a4ca <xPortStartScheduler+0x96>
 800a4a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4aa:	f383 8811 	msr	BASEPRI, r3
 800a4ae:	f3bf 8f6f 	isb	sy
 800a4b2:	f3bf 8f4f 	dsb	sy
 800a4b6:	e7fe      	b.n	800a4b6 <xPortStartScheduler+0x82>
			ulMaxPRIGROUPValue--;
 800a4b8:	3b01      	subs	r3, #1
 800a4ba:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a4bc:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800a4c0:	005b      	lsls	r3, r3, #1
 800a4c2:	b2db      	uxtb	r3, r3
 800a4c4:	f88d 3003 	strb.w	r3, [sp, #3]
 800a4c8:	e7e6      	b.n	800a498 <xPortStartScheduler+0x64>
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a4ca:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800a4ce:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a4d0:	9b01      	ldr	r3, [sp, #4]
 800a4d2:	4a15      	ldr	r2, [pc, #84]	@ (800a528 <xPortStartScheduler+0xf4>)
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a4d4:	f04f 24e0 	mov.w	r4, #3758153728	@ 0xe000e000
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a4d8:	b2db      	uxtb	r3, r3
 800a4da:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a4dc:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 800a4e0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800a4e4:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a4e8:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 800a4ec:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800a4f0:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	vPortSetupTimerInterrupt();
 800a4f4:	f7ff ff8c 	bl	800a410 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 800a4f8:	4b0e      	ldr	r3, [pc, #56]	@ (800a534 <xPortStartScheduler+0x100>)
 800a4fa:	2500      	movs	r5, #0
 800a4fc:	601d      	str	r5, [r3, #0]
	vPortEnableVFP();
 800a4fe:	f7ff feb7 	bl	800a270 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a502:	f8d4 3f34 	ldr.w	r3, [r4, #3892]	@ 0xf34
 800a506:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800a50a:	f8c4 3f34 	str.w	r3, [r4, #3892]	@ 0xf34
	prvPortStartFirstTask();
 800a50e:	f7ff fe9b 	bl	800a248 <prvPortStartFirstTask>
	vTaskSwitchContext();
 800a512:	f7ff fb5b 	bl	8009bcc <vTaskSwitchContext>
	prvTaskExitError();
 800a516:	f7ff feb5 	bl	800a284 <prvTaskExitError>
}
 800a51a:	4628      	mov	r0, r5
 800a51c:	b003      	add	sp, #12
 800a51e:	bd30      	pop	{r4, r5, pc}
 800a520:	410fc271 	.word	0x410fc271
 800a524:	410fc270 	.word	0x410fc270
 800a528:	e000e400 	.word	0xe000e400
 800a52c:	200090ac 	.word	0x200090ac
 800a530:	200090a8 	.word	0x200090a8
 800a534:	20000038 	.word	0x20000038

0800a538 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a538:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a53c:	2b0f      	cmp	r3, #15
 800a53e:	d90e      	bls.n	800a55e <vPortValidateInterruptPriority+0x26>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a540:	4a11      	ldr	r2, [pc, #68]	@ (800a588 <vPortValidateInterruptPriority+0x50>)
 800a542:	5c9b      	ldrb	r3, [r3, r2]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a544:	4a11      	ldr	r2, [pc, #68]	@ (800a58c <vPortValidateInterruptPriority+0x54>)
 800a546:	7812      	ldrb	r2, [r2, #0]
 800a548:	429a      	cmp	r2, r3
 800a54a:	d908      	bls.n	800a55e <vPortValidateInterruptPriority+0x26>
 800a54c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a550:	f383 8811 	msr	BASEPRI, r3
 800a554:	f3bf 8f6f 	isb	sy
 800a558:	f3bf 8f4f 	dsb	sy
 800a55c:	e7fe      	b.n	800a55c <vPortValidateInterruptPriority+0x24>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a55e:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800a562:	4a0b      	ldr	r2, [pc, #44]	@ (800a590 <vPortValidateInterruptPriority+0x58>)
 800a564:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	@ 0xd0c
 800a568:	6812      	ldr	r2, [r2, #0]
 800a56a:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800a56e:	4293      	cmp	r3, r2
 800a570:	d908      	bls.n	800a584 <vPortValidateInterruptPriority+0x4c>
 800a572:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a576:	f383 8811 	msr	BASEPRI, r3
 800a57a:	f3bf 8f6f 	isb	sy
 800a57e:	f3bf 8f4f 	dsb	sy
 800a582:	e7fe      	b.n	800a582 <vPortValidateInterruptPriority+0x4a>
	}
 800a584:	4770      	bx	lr
 800a586:	bf00      	nop
 800a588:	e000e3f0 	.word	0xe000e3f0
 800a58c:	200090ac 	.word	0x200090ac
 800a590:	200090a8 	.word	0x200090a8

0800a594 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a594:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a596:	4b10      	ldr	r3, [pc, #64]	@ (800a5d8 <prvInsertBlockIntoFreeList+0x44>)
 800a598:	461a      	mov	r2, r3
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	4283      	cmp	r3, r0
 800a59e:	d3fb      	bcc.n	800a598 <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a5a0:	6854      	ldr	r4, [r2, #4]
 800a5a2:	1911      	adds	r1, r2, r4
 800a5a4:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a5a6:	bf01      	itttt	eq
 800a5a8:	6841      	ldreq	r1, [r0, #4]
 800a5aa:	4610      	moveq	r0, r2
 800a5ac:	1909      	addeq	r1, r1, r4
 800a5ae:	6051      	streq	r1, [r2, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a5b0:	6844      	ldr	r4, [r0, #4]
 800a5b2:	1901      	adds	r1, r0, r4
 800a5b4:	428b      	cmp	r3, r1
 800a5b6:	d10c      	bne.n	800a5d2 <prvInsertBlockIntoFreeList+0x3e>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a5b8:	4908      	ldr	r1, [pc, #32]	@ (800a5dc <prvInsertBlockIntoFreeList+0x48>)
 800a5ba:	6809      	ldr	r1, [r1, #0]
 800a5bc:	428b      	cmp	r3, r1
 800a5be:	d003      	beq.n	800a5c8 <prvInsertBlockIntoFreeList+0x34>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a5c0:	6859      	ldr	r1, [r3, #4]
 800a5c2:	4421      	add	r1, r4
 800a5c4:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a5c6:	6819      	ldr	r1, [r3, #0]
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a5c8:	6001      	str	r1, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a5ca:	4290      	cmp	r0, r2
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a5cc:	bf18      	it	ne
 800a5ce:	6010      	strne	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a5d0:	bd10      	pop	{r4, pc}
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a5d2:	4619      	mov	r1, r3
 800a5d4:	e7f8      	b.n	800a5c8 <prvInsertBlockIntoFreeList+0x34>
 800a5d6:	bf00      	nop
 800a5d8:	200090c0 	.word	0x200090c0
 800a5dc:	200090bc 	.word	0x200090bc

0800a5e0 <pvPortMalloc>:
{
 800a5e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a5e4:	4604      	mov	r4, r0
	vTaskSuspendAll();
 800a5e6:	f7ff f9b5 	bl	8009954 <vTaskSuspendAll>
		if( pxEnd == NULL )
 800a5ea:	4940      	ldr	r1, [pc, #256]	@ (800a6ec <pvPortMalloc+0x10c>)
 800a5ec:	4d40      	ldr	r5, [pc, #256]	@ (800a6f0 <pvPortMalloc+0x110>)
 800a5ee:	680b      	ldr	r3, [r1, #0]
 800a5f0:	bb0b      	cbnz	r3, 800a636 <pvPortMalloc+0x56>
	uxAddress = ( size_t ) ucHeap;
 800a5f2:	4a40      	ldr	r2, [pc, #256]	@ (800a6f4 <pvPortMalloc+0x114>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a5f4:	0756      	lsls	r6, r2, #29
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a5f6:	bf1f      	itttt	ne
 800a5f8:	1dd0      	addne	r0, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a5fa:	f020 0007 	bicne.w	r0, r0, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a5fe:	f202 620e 	addwne	r2, r2, #1550	@ 0x60e
 800a602:	1a13      	subne	r3, r2, r0
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a604:	bf0c      	ite	eq
 800a606:	f240 630e 	movweq	r3, #1550	@ 0x60e
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a60a:	4602      	movne	r2, r0
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a60c:	4413      	add	r3, r2
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a60e:	4e3a      	ldr	r6, [pc, #232]	@ (800a6f8 <pvPortMalloc+0x118>)
	uxAddress -= xHeapStructSize;
 800a610:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a612:	f023 0307 	bic.w	r3, r3, #7
	xStart.xBlockSize = ( size_t ) 0;
 800a616:	2000      	movs	r0, #0
 800a618:	6070      	str	r0, [r6, #4]
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a61a:	6032      	str	r2, [r6, #0]
	pxEnd->pxNextFreeBlock = NULL;
 800a61c:	e9c3 0000 	strd	r0, r0, [r3]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a620:	1a98      	subs	r0, r3, r2
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a622:	e9c2 3000 	strd	r3, r0, [r2]
	pxEnd = ( void * ) uxAddress;
 800a626:	600b      	str	r3, [r1, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a628:	4b34      	ldr	r3, [pc, #208]	@ (800a6fc <pvPortMalloc+0x11c>)
 800a62a:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a62c:	4b34      	ldr	r3, [pc, #208]	@ (800a700 <pvPortMalloc+0x120>)
 800a62e:	6018      	str	r0, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a630:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800a634:	602b      	str	r3, [r5, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a636:	682e      	ldr	r6, [r5, #0]
 800a638:	4226      	tst	r6, r4
 800a63a:	d152      	bne.n	800a6e2 <pvPortMalloc+0x102>
			if( xWantedSize > 0 )
 800a63c:	2c00      	cmp	r4, #0
 800a63e:	d043      	beq.n	800a6c8 <pvPortMalloc+0xe8>
				xWantedSize += xHeapStructSize;
 800a640:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a644:	0760      	lsls	r0, r4, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a646:	bf1c      	itt	ne
 800a648:	f023 0307 	bicne.w	r3, r3, #7
 800a64c:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a64e:	2b00      	cmp	r3, #0
 800a650:	d047      	beq.n	800a6e2 <pvPortMalloc+0x102>
 800a652:	4f2b      	ldr	r7, [pc, #172]	@ (800a700 <pvPortMalloc+0x120>)
 800a654:	683c      	ldr	r4, [r7, #0]
 800a656:	429c      	cmp	r4, r3
 800a658:	d343      	bcc.n	800a6e2 <pvPortMalloc+0x102>
				pxBlock = xStart.pxNextFreeBlock;
 800a65a:	4a27      	ldr	r2, [pc, #156]	@ (800a6f8 <pvPortMalloc+0x118>)
 800a65c:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a65e:	6868      	ldr	r0, [r5, #4]
 800a660:	4298      	cmp	r0, r3
 800a662:	d204      	bcs.n	800a66e <pvPortMalloc+0x8e>
 800a664:	f8d5 c000 	ldr.w	ip, [r5]
 800a668:	f1bc 0f00 	cmp.w	ip, #0
 800a66c:	d115      	bne.n	800a69a <pvPortMalloc+0xba>
				if( pxBlock != pxEnd )
 800a66e:	6809      	ldr	r1, [r1, #0]
 800a670:	42a9      	cmp	r1, r5
 800a672:	d036      	beq.n	800a6e2 <pvPortMalloc+0x102>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a674:	6829      	ldr	r1, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a676:	f8d2 8000 	ldr.w	r8, [r2]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a67a:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a67c:	1ac2      	subs	r2, r0, r3
 800a67e:	2a10      	cmp	r2, #16
 800a680:	d912      	bls.n	800a6a8 <pvPortMalloc+0xc8>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a682:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a684:	0741      	lsls	r1, r0, #29
 800a686:	d00b      	beq.n	800a6a0 <pvPortMalloc+0xc0>
 800a688:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a68c:	f383 8811 	msr	BASEPRI, r3
 800a690:	f3bf 8f6f 	isb	sy
 800a694:	f3bf 8f4f 	dsb	sy
 800a698:	e7fe      	b.n	800a698 <pvPortMalloc+0xb8>
 800a69a:	462a      	mov	r2, r5
 800a69c:	4665      	mov	r5, ip
 800a69e:	e7de      	b.n	800a65e <pvPortMalloc+0x7e>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a6a0:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a6a2:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a6a4:	f7ff ff76 	bl	800a594 <prvInsertBlockIntoFreeList>
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a6a8:	4914      	ldr	r1, [pc, #80]	@ (800a6fc <pvPortMalloc+0x11c>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a6aa:	686a      	ldr	r2, [r5, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a6ac:	6808      	ldr	r0, [r1, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a6ae:	1aa4      	subs	r4, r4, r2
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a6b0:	4284      	cmp	r4, r0
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a6b2:	ea46 0602 	orr.w	r6, r6, r2
					pxBlock->pxNextFreeBlock = NULL;
 800a6b6:	f04f 0300 	mov.w	r3, #0
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a6ba:	603c      	str	r4, [r7, #0]
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a6bc:	bf38      	it	cc
 800a6be:	600c      	strcc	r4, [r1, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a6c0:	606e      	str	r6, [r5, #4]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a6c2:	f108 0408 	add.w	r4, r8, #8
					pxBlock->pxNextFreeBlock = NULL;
 800a6c6:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
 800a6c8:	f7ff f9e8 	bl	8009a9c <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a6cc:	0763      	lsls	r3, r4, #29
 800a6ce:	d00a      	beq.n	800a6e6 <pvPortMalloc+0x106>
 800a6d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a6d4:	f383 8811 	msr	BASEPRI, r3
 800a6d8:	f3bf 8f6f 	isb	sy
 800a6dc:	f3bf 8f4f 	dsb	sy
 800a6e0:	e7fe      	b.n	800a6e0 <pvPortMalloc+0x100>
void *pvReturn = NULL;
 800a6e2:	2400      	movs	r4, #0
 800a6e4:	e7f0      	b.n	800a6c8 <pvPortMalloc+0xe8>
}
 800a6e6:	4620      	mov	r0, r4
 800a6e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a6ec:	200090bc 	.word	0x200090bc
 800a6f0:	200090b0 	.word	0x200090b0
 800a6f4:	200090c8 	.word	0x200090c8
 800a6f8:	200090c0 	.word	0x200090c0
 800a6fc:	200090b4 	.word	0x200090b4
 800a700:	200090b8 	.word	0x200090b8

0800a704 <vPortFree>:
{
 800a704:	b510      	push	{r4, lr}
	if( pv != NULL )
 800a706:	4604      	mov	r4, r0
 800a708:	b370      	cbz	r0, 800a768 <vPortFree+0x64>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a70a:	4a18      	ldr	r2, [pc, #96]	@ (800a76c <vPortFree+0x68>)
 800a70c:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800a710:	6812      	ldr	r2, [r2, #0]
 800a712:	4213      	tst	r3, r2
 800a714:	d108      	bne.n	800a728 <vPortFree+0x24>
 800a716:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a71a:	f383 8811 	msr	BASEPRI, r3
 800a71e:	f3bf 8f6f 	isb	sy
 800a722:	f3bf 8f4f 	dsb	sy
 800a726:	e7fe      	b.n	800a726 <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a728:	f850 1c08 	ldr.w	r1, [r0, #-8]
 800a72c:	b141      	cbz	r1, 800a740 <vPortFree+0x3c>
 800a72e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a732:	f383 8811 	msr	BASEPRI, r3
 800a736:	f3bf 8f6f 	isb	sy
 800a73a:	f3bf 8f4f 	dsb	sy
 800a73e:	e7fe      	b.n	800a73e <vPortFree+0x3a>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a740:	ea23 0302 	bic.w	r3, r3, r2
 800a744:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 800a748:	f7ff f904 	bl	8009954 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a74c:	4a08      	ldr	r2, [pc, #32]	@ (800a770 <vPortFree+0x6c>)
 800a74e:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800a752:	6811      	ldr	r1, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a754:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a758:	440b      	add	r3, r1
 800a75a:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a75c:	f7ff ff1a 	bl	800a594 <prvInsertBlockIntoFreeList>
}
 800a760:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 800a764:	f7ff b99a 	b.w	8009a9c <xTaskResumeAll>
}
 800a768:	bd10      	pop	{r4, pc}
 800a76a:	bf00      	nop
 800a76c:	200090b0 	.word	0x200090b0
 800a770:	200090b8 	.word	0x200090b8

0800a774 <atof>:
 800a774:	2100      	movs	r1, #0
 800a776:	f000 becd 	b.w	800b514 <strtod>

0800a77a <atoi>:
 800a77a:	220a      	movs	r2, #10
 800a77c:	2100      	movs	r1, #0
 800a77e:	f000 bf51 	b.w	800b624 <strtol>
	...

0800a784 <malloc>:
 800a784:	4b02      	ldr	r3, [pc, #8]	@ (800a790 <malloc+0xc>)
 800a786:	4601      	mov	r1, r0
 800a788:	6818      	ldr	r0, [r3, #0]
 800a78a:	f000 b82d 	b.w	800a7e8 <_malloc_r>
 800a78e:	bf00      	nop
 800a790:	200001bc 	.word	0x200001bc

0800a794 <free>:
 800a794:	4b02      	ldr	r3, [pc, #8]	@ (800a7a0 <free+0xc>)
 800a796:	4601      	mov	r1, r0
 800a798:	6818      	ldr	r0, [r3, #0]
 800a79a:	f003 bc3d 	b.w	800e018 <_free_r>
 800a79e:	bf00      	nop
 800a7a0:	200001bc 	.word	0x200001bc

0800a7a4 <sbrk_aligned>:
 800a7a4:	b570      	push	{r4, r5, r6, lr}
 800a7a6:	4e0f      	ldr	r6, [pc, #60]	@ (800a7e4 <sbrk_aligned+0x40>)
 800a7a8:	460c      	mov	r4, r1
 800a7aa:	6831      	ldr	r1, [r6, #0]
 800a7ac:	4605      	mov	r5, r0
 800a7ae:	b911      	cbnz	r1, 800a7b6 <sbrk_aligned+0x12>
 800a7b0:	f002 fd6c 	bl	800d28c <_sbrk_r>
 800a7b4:	6030      	str	r0, [r6, #0]
 800a7b6:	4621      	mov	r1, r4
 800a7b8:	4628      	mov	r0, r5
 800a7ba:	f002 fd67 	bl	800d28c <_sbrk_r>
 800a7be:	1c43      	adds	r3, r0, #1
 800a7c0:	d103      	bne.n	800a7ca <sbrk_aligned+0x26>
 800a7c2:	f04f 34ff 	mov.w	r4, #4294967295
 800a7c6:	4620      	mov	r0, r4
 800a7c8:	bd70      	pop	{r4, r5, r6, pc}
 800a7ca:	1cc4      	adds	r4, r0, #3
 800a7cc:	f024 0403 	bic.w	r4, r4, #3
 800a7d0:	42a0      	cmp	r0, r4
 800a7d2:	d0f8      	beq.n	800a7c6 <sbrk_aligned+0x22>
 800a7d4:	1a21      	subs	r1, r4, r0
 800a7d6:	4628      	mov	r0, r5
 800a7d8:	f002 fd58 	bl	800d28c <_sbrk_r>
 800a7dc:	3001      	adds	r0, #1
 800a7de:	d1f2      	bne.n	800a7c6 <sbrk_aligned+0x22>
 800a7e0:	e7ef      	b.n	800a7c2 <sbrk_aligned+0x1e>
 800a7e2:	bf00      	nop
 800a7e4:	200096d8 	.word	0x200096d8

0800a7e8 <_malloc_r>:
 800a7e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a7ec:	1ccd      	adds	r5, r1, #3
 800a7ee:	f025 0503 	bic.w	r5, r5, #3
 800a7f2:	3508      	adds	r5, #8
 800a7f4:	2d0c      	cmp	r5, #12
 800a7f6:	bf38      	it	cc
 800a7f8:	250c      	movcc	r5, #12
 800a7fa:	2d00      	cmp	r5, #0
 800a7fc:	4606      	mov	r6, r0
 800a7fe:	db01      	blt.n	800a804 <_malloc_r+0x1c>
 800a800:	42a9      	cmp	r1, r5
 800a802:	d904      	bls.n	800a80e <_malloc_r+0x26>
 800a804:	230c      	movs	r3, #12
 800a806:	6033      	str	r3, [r6, #0]
 800a808:	2000      	movs	r0, #0
 800a80a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a80e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a8e4 <_malloc_r+0xfc>
 800a812:	f000 f869 	bl	800a8e8 <__malloc_lock>
 800a816:	f8d8 3000 	ldr.w	r3, [r8]
 800a81a:	461c      	mov	r4, r3
 800a81c:	bb44      	cbnz	r4, 800a870 <_malloc_r+0x88>
 800a81e:	4629      	mov	r1, r5
 800a820:	4630      	mov	r0, r6
 800a822:	f7ff ffbf 	bl	800a7a4 <sbrk_aligned>
 800a826:	1c43      	adds	r3, r0, #1
 800a828:	4604      	mov	r4, r0
 800a82a:	d158      	bne.n	800a8de <_malloc_r+0xf6>
 800a82c:	f8d8 4000 	ldr.w	r4, [r8]
 800a830:	4627      	mov	r7, r4
 800a832:	2f00      	cmp	r7, #0
 800a834:	d143      	bne.n	800a8be <_malloc_r+0xd6>
 800a836:	2c00      	cmp	r4, #0
 800a838:	d04b      	beq.n	800a8d2 <_malloc_r+0xea>
 800a83a:	6823      	ldr	r3, [r4, #0]
 800a83c:	4639      	mov	r1, r7
 800a83e:	4630      	mov	r0, r6
 800a840:	eb04 0903 	add.w	r9, r4, r3
 800a844:	f002 fd22 	bl	800d28c <_sbrk_r>
 800a848:	4581      	cmp	r9, r0
 800a84a:	d142      	bne.n	800a8d2 <_malloc_r+0xea>
 800a84c:	6821      	ldr	r1, [r4, #0]
 800a84e:	1a6d      	subs	r5, r5, r1
 800a850:	4629      	mov	r1, r5
 800a852:	4630      	mov	r0, r6
 800a854:	f7ff ffa6 	bl	800a7a4 <sbrk_aligned>
 800a858:	3001      	adds	r0, #1
 800a85a:	d03a      	beq.n	800a8d2 <_malloc_r+0xea>
 800a85c:	6823      	ldr	r3, [r4, #0]
 800a85e:	442b      	add	r3, r5
 800a860:	6023      	str	r3, [r4, #0]
 800a862:	f8d8 3000 	ldr.w	r3, [r8]
 800a866:	685a      	ldr	r2, [r3, #4]
 800a868:	bb62      	cbnz	r2, 800a8c4 <_malloc_r+0xdc>
 800a86a:	f8c8 7000 	str.w	r7, [r8]
 800a86e:	e00f      	b.n	800a890 <_malloc_r+0xa8>
 800a870:	6822      	ldr	r2, [r4, #0]
 800a872:	1b52      	subs	r2, r2, r5
 800a874:	d420      	bmi.n	800a8b8 <_malloc_r+0xd0>
 800a876:	2a0b      	cmp	r2, #11
 800a878:	d917      	bls.n	800a8aa <_malloc_r+0xc2>
 800a87a:	1961      	adds	r1, r4, r5
 800a87c:	42a3      	cmp	r3, r4
 800a87e:	6025      	str	r5, [r4, #0]
 800a880:	bf18      	it	ne
 800a882:	6059      	strne	r1, [r3, #4]
 800a884:	6863      	ldr	r3, [r4, #4]
 800a886:	bf08      	it	eq
 800a888:	f8c8 1000 	streq.w	r1, [r8]
 800a88c:	5162      	str	r2, [r4, r5]
 800a88e:	604b      	str	r3, [r1, #4]
 800a890:	4630      	mov	r0, r6
 800a892:	f000 f82f 	bl	800a8f4 <__malloc_unlock>
 800a896:	f104 000b 	add.w	r0, r4, #11
 800a89a:	1d23      	adds	r3, r4, #4
 800a89c:	f020 0007 	bic.w	r0, r0, #7
 800a8a0:	1ac2      	subs	r2, r0, r3
 800a8a2:	bf1c      	itt	ne
 800a8a4:	1a1b      	subne	r3, r3, r0
 800a8a6:	50a3      	strne	r3, [r4, r2]
 800a8a8:	e7af      	b.n	800a80a <_malloc_r+0x22>
 800a8aa:	6862      	ldr	r2, [r4, #4]
 800a8ac:	42a3      	cmp	r3, r4
 800a8ae:	bf0c      	ite	eq
 800a8b0:	f8c8 2000 	streq.w	r2, [r8]
 800a8b4:	605a      	strne	r2, [r3, #4]
 800a8b6:	e7eb      	b.n	800a890 <_malloc_r+0xa8>
 800a8b8:	4623      	mov	r3, r4
 800a8ba:	6864      	ldr	r4, [r4, #4]
 800a8bc:	e7ae      	b.n	800a81c <_malloc_r+0x34>
 800a8be:	463c      	mov	r4, r7
 800a8c0:	687f      	ldr	r7, [r7, #4]
 800a8c2:	e7b6      	b.n	800a832 <_malloc_r+0x4a>
 800a8c4:	461a      	mov	r2, r3
 800a8c6:	685b      	ldr	r3, [r3, #4]
 800a8c8:	42a3      	cmp	r3, r4
 800a8ca:	d1fb      	bne.n	800a8c4 <_malloc_r+0xdc>
 800a8cc:	2300      	movs	r3, #0
 800a8ce:	6053      	str	r3, [r2, #4]
 800a8d0:	e7de      	b.n	800a890 <_malloc_r+0xa8>
 800a8d2:	230c      	movs	r3, #12
 800a8d4:	6033      	str	r3, [r6, #0]
 800a8d6:	4630      	mov	r0, r6
 800a8d8:	f000 f80c 	bl	800a8f4 <__malloc_unlock>
 800a8dc:	e794      	b.n	800a808 <_malloc_r+0x20>
 800a8de:	6005      	str	r5, [r0, #0]
 800a8e0:	e7d6      	b.n	800a890 <_malloc_r+0xa8>
 800a8e2:	bf00      	nop
 800a8e4:	200096dc 	.word	0x200096dc

0800a8e8 <__malloc_lock>:
 800a8e8:	4801      	ldr	r0, [pc, #4]	@ (800a8f0 <__malloc_lock+0x8>)
 800a8ea:	f7fb b8c0 	b.w	8005a6e <__retarget_lock_acquire_recursive>
 800a8ee:	bf00      	nop
 800a8f0:	200085a8 	.word	0x200085a8

0800a8f4 <__malloc_unlock>:
 800a8f4:	4801      	ldr	r0, [pc, #4]	@ (800a8fc <__malloc_unlock+0x8>)
 800a8f6:	f7fb b8c6 	b.w	8005a86 <__retarget_lock_release_recursive>
 800a8fa:	bf00      	nop
 800a8fc:	200085a8 	.word	0x200085a8

0800a900 <sulp>:
 800a900:	b570      	push	{r4, r5, r6, lr}
 800a902:	4604      	mov	r4, r0
 800a904:	460d      	mov	r5, r1
 800a906:	ec45 4b10 	vmov	d0, r4, r5
 800a90a:	4616      	mov	r6, r2
 800a90c:	f004 fad2 	bl	800eeb4 <__ulp>
 800a910:	ec51 0b10 	vmov	r0, r1, d0
 800a914:	b17e      	cbz	r6, 800a936 <sulp+0x36>
 800a916:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800a91a:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800a91e:	2b00      	cmp	r3, #0
 800a920:	dd09      	ble.n	800a936 <sulp+0x36>
 800a922:	051b      	lsls	r3, r3, #20
 800a924:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800a928:	2400      	movs	r4, #0
 800a92a:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800a92e:	4622      	mov	r2, r4
 800a930:	462b      	mov	r3, r5
 800a932:	f7f5 fe71 	bl	8000618 <__aeabi_dmul>
 800a936:	ec41 0b10 	vmov	d0, r0, r1
 800a93a:	bd70      	pop	{r4, r5, r6, pc}
 800a93c:	0000      	movs	r0, r0
	...

0800a940 <_strtod_l>:
 800a940:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a944:	b09f      	sub	sp, #124	@ 0x7c
 800a946:	460c      	mov	r4, r1
 800a948:	9217      	str	r2, [sp, #92]	@ 0x5c
 800a94a:	2200      	movs	r2, #0
 800a94c:	921a      	str	r2, [sp, #104]	@ 0x68
 800a94e:	9005      	str	r0, [sp, #20]
 800a950:	f04f 0a00 	mov.w	sl, #0
 800a954:	f04f 0b00 	mov.w	fp, #0
 800a958:	460a      	mov	r2, r1
 800a95a:	9219      	str	r2, [sp, #100]	@ 0x64
 800a95c:	7811      	ldrb	r1, [r2, #0]
 800a95e:	292b      	cmp	r1, #43	@ 0x2b
 800a960:	d04a      	beq.n	800a9f8 <_strtod_l+0xb8>
 800a962:	d838      	bhi.n	800a9d6 <_strtod_l+0x96>
 800a964:	290d      	cmp	r1, #13
 800a966:	d832      	bhi.n	800a9ce <_strtod_l+0x8e>
 800a968:	2908      	cmp	r1, #8
 800a96a:	d832      	bhi.n	800a9d2 <_strtod_l+0x92>
 800a96c:	2900      	cmp	r1, #0
 800a96e:	d03b      	beq.n	800a9e8 <_strtod_l+0xa8>
 800a970:	2200      	movs	r2, #0
 800a972:	920b      	str	r2, [sp, #44]	@ 0x2c
 800a974:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800a976:	782a      	ldrb	r2, [r5, #0]
 800a978:	2a30      	cmp	r2, #48	@ 0x30
 800a97a:	f040 80b3 	bne.w	800aae4 <_strtod_l+0x1a4>
 800a97e:	786a      	ldrb	r2, [r5, #1]
 800a980:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800a984:	2a58      	cmp	r2, #88	@ 0x58
 800a986:	d16e      	bne.n	800aa66 <_strtod_l+0x126>
 800a988:	9302      	str	r3, [sp, #8]
 800a98a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a98c:	9301      	str	r3, [sp, #4]
 800a98e:	ab1a      	add	r3, sp, #104	@ 0x68
 800a990:	9300      	str	r3, [sp, #0]
 800a992:	4a8e      	ldr	r2, [pc, #568]	@ (800abcc <_strtod_l+0x28c>)
 800a994:	9805      	ldr	r0, [sp, #20]
 800a996:	ab1b      	add	r3, sp, #108	@ 0x6c
 800a998:	a919      	add	r1, sp, #100	@ 0x64
 800a99a:	f003 fbef 	bl	800e17c <__gethex>
 800a99e:	f010 060f 	ands.w	r6, r0, #15
 800a9a2:	4604      	mov	r4, r0
 800a9a4:	d005      	beq.n	800a9b2 <_strtod_l+0x72>
 800a9a6:	2e06      	cmp	r6, #6
 800a9a8:	d128      	bne.n	800a9fc <_strtod_l+0xbc>
 800a9aa:	3501      	adds	r5, #1
 800a9ac:	2300      	movs	r3, #0
 800a9ae:	9519      	str	r5, [sp, #100]	@ 0x64
 800a9b0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a9b2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	f040 858e 	bne.w	800b4d6 <_strtod_l+0xb96>
 800a9ba:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a9bc:	b1cb      	cbz	r3, 800a9f2 <_strtod_l+0xb2>
 800a9be:	4652      	mov	r2, sl
 800a9c0:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800a9c4:	ec43 2b10 	vmov	d0, r2, r3
 800a9c8:	b01f      	add	sp, #124	@ 0x7c
 800a9ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a9ce:	2920      	cmp	r1, #32
 800a9d0:	d1ce      	bne.n	800a970 <_strtod_l+0x30>
 800a9d2:	3201      	adds	r2, #1
 800a9d4:	e7c1      	b.n	800a95a <_strtod_l+0x1a>
 800a9d6:	292d      	cmp	r1, #45	@ 0x2d
 800a9d8:	d1ca      	bne.n	800a970 <_strtod_l+0x30>
 800a9da:	2101      	movs	r1, #1
 800a9dc:	910b      	str	r1, [sp, #44]	@ 0x2c
 800a9de:	1c51      	adds	r1, r2, #1
 800a9e0:	9119      	str	r1, [sp, #100]	@ 0x64
 800a9e2:	7852      	ldrb	r2, [r2, #1]
 800a9e4:	2a00      	cmp	r2, #0
 800a9e6:	d1c5      	bne.n	800a974 <_strtod_l+0x34>
 800a9e8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800a9ea:	9419      	str	r4, [sp, #100]	@ 0x64
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	f040 8570 	bne.w	800b4d2 <_strtod_l+0xb92>
 800a9f2:	4652      	mov	r2, sl
 800a9f4:	465b      	mov	r3, fp
 800a9f6:	e7e5      	b.n	800a9c4 <_strtod_l+0x84>
 800a9f8:	2100      	movs	r1, #0
 800a9fa:	e7ef      	b.n	800a9dc <_strtod_l+0x9c>
 800a9fc:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800a9fe:	b13a      	cbz	r2, 800aa10 <_strtod_l+0xd0>
 800aa00:	2135      	movs	r1, #53	@ 0x35
 800aa02:	a81c      	add	r0, sp, #112	@ 0x70
 800aa04:	f004 fb50 	bl	800f0a8 <__copybits>
 800aa08:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800aa0a:	9805      	ldr	r0, [sp, #20]
 800aa0c:	f003 ff1e 	bl	800e84c <_Bfree>
 800aa10:	3e01      	subs	r6, #1
 800aa12:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800aa14:	2e04      	cmp	r6, #4
 800aa16:	d806      	bhi.n	800aa26 <_strtod_l+0xe6>
 800aa18:	e8df f006 	tbb	[pc, r6]
 800aa1c:	201d0314 	.word	0x201d0314
 800aa20:	14          	.byte	0x14
 800aa21:	00          	.byte	0x00
 800aa22:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800aa26:	05e1      	lsls	r1, r4, #23
 800aa28:	bf48      	it	mi
 800aa2a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800aa2e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800aa32:	0d1b      	lsrs	r3, r3, #20
 800aa34:	051b      	lsls	r3, r3, #20
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	d1bb      	bne.n	800a9b2 <_strtod_l+0x72>
 800aa3a:	f002 fc49 	bl	800d2d0 <__errno>
 800aa3e:	2322      	movs	r3, #34	@ 0x22
 800aa40:	6003      	str	r3, [r0, #0]
 800aa42:	e7b6      	b.n	800a9b2 <_strtod_l+0x72>
 800aa44:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800aa48:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800aa4c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800aa50:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800aa54:	e7e7      	b.n	800aa26 <_strtod_l+0xe6>
 800aa56:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800abd4 <_strtod_l+0x294>
 800aa5a:	e7e4      	b.n	800aa26 <_strtod_l+0xe6>
 800aa5c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800aa60:	f04f 3aff 	mov.w	sl, #4294967295
 800aa64:	e7df      	b.n	800aa26 <_strtod_l+0xe6>
 800aa66:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800aa68:	1c5a      	adds	r2, r3, #1
 800aa6a:	9219      	str	r2, [sp, #100]	@ 0x64
 800aa6c:	785b      	ldrb	r3, [r3, #1]
 800aa6e:	2b30      	cmp	r3, #48	@ 0x30
 800aa70:	d0f9      	beq.n	800aa66 <_strtod_l+0x126>
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	d09d      	beq.n	800a9b2 <_strtod_l+0x72>
 800aa76:	2301      	movs	r3, #1
 800aa78:	9309      	str	r3, [sp, #36]	@ 0x24
 800aa7a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800aa7c:	930c      	str	r3, [sp, #48]	@ 0x30
 800aa7e:	2300      	movs	r3, #0
 800aa80:	9308      	str	r3, [sp, #32]
 800aa82:	930a      	str	r3, [sp, #40]	@ 0x28
 800aa84:	461f      	mov	r7, r3
 800aa86:	220a      	movs	r2, #10
 800aa88:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800aa8a:	7805      	ldrb	r5, [r0, #0]
 800aa8c:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800aa90:	b2d9      	uxtb	r1, r3
 800aa92:	2909      	cmp	r1, #9
 800aa94:	d928      	bls.n	800aae8 <_strtod_l+0x1a8>
 800aa96:	494e      	ldr	r1, [pc, #312]	@ (800abd0 <_strtod_l+0x290>)
 800aa98:	2201      	movs	r2, #1
 800aa9a:	f001 fe0c 	bl	800c6b6 <strncmp>
 800aa9e:	2800      	cmp	r0, #0
 800aaa0:	d032      	beq.n	800ab08 <_strtod_l+0x1c8>
 800aaa2:	2000      	movs	r0, #0
 800aaa4:	462a      	mov	r2, r5
 800aaa6:	4681      	mov	r9, r0
 800aaa8:	463d      	mov	r5, r7
 800aaaa:	4603      	mov	r3, r0
 800aaac:	2a65      	cmp	r2, #101	@ 0x65
 800aaae:	d001      	beq.n	800aab4 <_strtod_l+0x174>
 800aab0:	2a45      	cmp	r2, #69	@ 0x45
 800aab2:	d114      	bne.n	800aade <_strtod_l+0x19e>
 800aab4:	b91d      	cbnz	r5, 800aabe <_strtod_l+0x17e>
 800aab6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800aab8:	4302      	orrs	r2, r0
 800aaba:	d095      	beq.n	800a9e8 <_strtod_l+0xa8>
 800aabc:	2500      	movs	r5, #0
 800aabe:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800aac0:	1c62      	adds	r2, r4, #1
 800aac2:	9219      	str	r2, [sp, #100]	@ 0x64
 800aac4:	7862      	ldrb	r2, [r4, #1]
 800aac6:	2a2b      	cmp	r2, #43	@ 0x2b
 800aac8:	d077      	beq.n	800abba <_strtod_l+0x27a>
 800aaca:	2a2d      	cmp	r2, #45	@ 0x2d
 800aacc:	d07b      	beq.n	800abc6 <_strtod_l+0x286>
 800aace:	f04f 0c00 	mov.w	ip, #0
 800aad2:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800aad6:	2909      	cmp	r1, #9
 800aad8:	f240 8082 	bls.w	800abe0 <_strtod_l+0x2a0>
 800aadc:	9419      	str	r4, [sp, #100]	@ 0x64
 800aade:	f04f 0800 	mov.w	r8, #0
 800aae2:	e0a2      	b.n	800ac2a <_strtod_l+0x2ea>
 800aae4:	2300      	movs	r3, #0
 800aae6:	e7c7      	b.n	800aa78 <_strtod_l+0x138>
 800aae8:	2f08      	cmp	r7, #8
 800aaea:	bfd5      	itete	le
 800aaec:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800aaee:	9908      	ldrgt	r1, [sp, #32]
 800aaf0:	fb02 3301 	mlale	r3, r2, r1, r3
 800aaf4:	fb02 3301 	mlagt	r3, r2, r1, r3
 800aaf8:	f100 0001 	add.w	r0, r0, #1
 800aafc:	bfd4      	ite	le
 800aafe:	930a      	strle	r3, [sp, #40]	@ 0x28
 800ab00:	9308      	strgt	r3, [sp, #32]
 800ab02:	3701      	adds	r7, #1
 800ab04:	9019      	str	r0, [sp, #100]	@ 0x64
 800ab06:	e7bf      	b.n	800aa88 <_strtod_l+0x148>
 800ab08:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ab0a:	1c5a      	adds	r2, r3, #1
 800ab0c:	9219      	str	r2, [sp, #100]	@ 0x64
 800ab0e:	785a      	ldrb	r2, [r3, #1]
 800ab10:	b37f      	cbz	r7, 800ab72 <_strtod_l+0x232>
 800ab12:	4681      	mov	r9, r0
 800ab14:	463d      	mov	r5, r7
 800ab16:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800ab1a:	2b09      	cmp	r3, #9
 800ab1c:	d912      	bls.n	800ab44 <_strtod_l+0x204>
 800ab1e:	2301      	movs	r3, #1
 800ab20:	e7c4      	b.n	800aaac <_strtod_l+0x16c>
 800ab22:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ab24:	1c5a      	adds	r2, r3, #1
 800ab26:	9219      	str	r2, [sp, #100]	@ 0x64
 800ab28:	785a      	ldrb	r2, [r3, #1]
 800ab2a:	3001      	adds	r0, #1
 800ab2c:	2a30      	cmp	r2, #48	@ 0x30
 800ab2e:	d0f8      	beq.n	800ab22 <_strtod_l+0x1e2>
 800ab30:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800ab34:	2b08      	cmp	r3, #8
 800ab36:	f200 84d3 	bhi.w	800b4e0 <_strtod_l+0xba0>
 800ab3a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ab3c:	930c      	str	r3, [sp, #48]	@ 0x30
 800ab3e:	4681      	mov	r9, r0
 800ab40:	2000      	movs	r0, #0
 800ab42:	4605      	mov	r5, r0
 800ab44:	3a30      	subs	r2, #48	@ 0x30
 800ab46:	f100 0301 	add.w	r3, r0, #1
 800ab4a:	d02a      	beq.n	800aba2 <_strtod_l+0x262>
 800ab4c:	4499      	add	r9, r3
 800ab4e:	eb00 0c05 	add.w	ip, r0, r5
 800ab52:	462b      	mov	r3, r5
 800ab54:	210a      	movs	r1, #10
 800ab56:	4563      	cmp	r3, ip
 800ab58:	d10d      	bne.n	800ab76 <_strtod_l+0x236>
 800ab5a:	1c69      	adds	r1, r5, #1
 800ab5c:	4401      	add	r1, r0
 800ab5e:	4428      	add	r0, r5
 800ab60:	2808      	cmp	r0, #8
 800ab62:	dc16      	bgt.n	800ab92 <_strtod_l+0x252>
 800ab64:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800ab66:	230a      	movs	r3, #10
 800ab68:	fb03 2300 	mla	r3, r3, r0, r2
 800ab6c:	930a      	str	r3, [sp, #40]	@ 0x28
 800ab6e:	2300      	movs	r3, #0
 800ab70:	e018      	b.n	800aba4 <_strtod_l+0x264>
 800ab72:	4638      	mov	r0, r7
 800ab74:	e7da      	b.n	800ab2c <_strtod_l+0x1ec>
 800ab76:	2b08      	cmp	r3, #8
 800ab78:	f103 0301 	add.w	r3, r3, #1
 800ab7c:	dc03      	bgt.n	800ab86 <_strtod_l+0x246>
 800ab7e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800ab80:	434e      	muls	r6, r1
 800ab82:	960a      	str	r6, [sp, #40]	@ 0x28
 800ab84:	e7e7      	b.n	800ab56 <_strtod_l+0x216>
 800ab86:	2b10      	cmp	r3, #16
 800ab88:	bfde      	ittt	le
 800ab8a:	9e08      	ldrle	r6, [sp, #32]
 800ab8c:	434e      	mulle	r6, r1
 800ab8e:	9608      	strle	r6, [sp, #32]
 800ab90:	e7e1      	b.n	800ab56 <_strtod_l+0x216>
 800ab92:	280f      	cmp	r0, #15
 800ab94:	dceb      	bgt.n	800ab6e <_strtod_l+0x22e>
 800ab96:	9808      	ldr	r0, [sp, #32]
 800ab98:	230a      	movs	r3, #10
 800ab9a:	fb03 2300 	mla	r3, r3, r0, r2
 800ab9e:	9308      	str	r3, [sp, #32]
 800aba0:	e7e5      	b.n	800ab6e <_strtod_l+0x22e>
 800aba2:	4629      	mov	r1, r5
 800aba4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800aba6:	1c50      	adds	r0, r2, #1
 800aba8:	9019      	str	r0, [sp, #100]	@ 0x64
 800abaa:	7852      	ldrb	r2, [r2, #1]
 800abac:	4618      	mov	r0, r3
 800abae:	460d      	mov	r5, r1
 800abb0:	e7b1      	b.n	800ab16 <_strtod_l+0x1d6>
 800abb2:	f04f 0900 	mov.w	r9, #0
 800abb6:	2301      	movs	r3, #1
 800abb8:	e77d      	b.n	800aab6 <_strtod_l+0x176>
 800abba:	f04f 0c00 	mov.w	ip, #0
 800abbe:	1ca2      	adds	r2, r4, #2
 800abc0:	9219      	str	r2, [sp, #100]	@ 0x64
 800abc2:	78a2      	ldrb	r2, [r4, #2]
 800abc4:	e785      	b.n	800aad2 <_strtod_l+0x192>
 800abc6:	f04f 0c01 	mov.w	ip, #1
 800abca:	e7f8      	b.n	800abbe <_strtod_l+0x27e>
 800abcc:	08012c78 	.word	0x08012c78
 800abd0:	08012c5f 	.word	0x08012c5f
 800abd4:	7ff00000 	.word	0x7ff00000
 800abd8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800abda:	1c51      	adds	r1, r2, #1
 800abdc:	9119      	str	r1, [sp, #100]	@ 0x64
 800abde:	7852      	ldrb	r2, [r2, #1]
 800abe0:	2a30      	cmp	r2, #48	@ 0x30
 800abe2:	d0f9      	beq.n	800abd8 <_strtod_l+0x298>
 800abe4:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800abe8:	2908      	cmp	r1, #8
 800abea:	f63f af78 	bhi.w	800aade <_strtod_l+0x19e>
 800abee:	3a30      	subs	r2, #48	@ 0x30
 800abf0:	920e      	str	r2, [sp, #56]	@ 0x38
 800abf2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800abf4:	920f      	str	r2, [sp, #60]	@ 0x3c
 800abf6:	f04f 080a 	mov.w	r8, #10
 800abfa:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800abfc:	1c56      	adds	r6, r2, #1
 800abfe:	9619      	str	r6, [sp, #100]	@ 0x64
 800ac00:	7852      	ldrb	r2, [r2, #1]
 800ac02:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800ac06:	f1be 0f09 	cmp.w	lr, #9
 800ac0a:	d939      	bls.n	800ac80 <_strtod_l+0x340>
 800ac0c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800ac0e:	1a76      	subs	r6, r6, r1
 800ac10:	2e08      	cmp	r6, #8
 800ac12:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800ac16:	dc03      	bgt.n	800ac20 <_strtod_l+0x2e0>
 800ac18:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800ac1a:	4588      	cmp	r8, r1
 800ac1c:	bfa8      	it	ge
 800ac1e:	4688      	movge	r8, r1
 800ac20:	f1bc 0f00 	cmp.w	ip, #0
 800ac24:	d001      	beq.n	800ac2a <_strtod_l+0x2ea>
 800ac26:	f1c8 0800 	rsb	r8, r8, #0
 800ac2a:	2d00      	cmp	r5, #0
 800ac2c:	d14e      	bne.n	800accc <_strtod_l+0x38c>
 800ac2e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ac30:	4308      	orrs	r0, r1
 800ac32:	f47f aebe 	bne.w	800a9b2 <_strtod_l+0x72>
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	f47f aed6 	bne.w	800a9e8 <_strtod_l+0xa8>
 800ac3c:	2a69      	cmp	r2, #105	@ 0x69
 800ac3e:	d028      	beq.n	800ac92 <_strtod_l+0x352>
 800ac40:	dc25      	bgt.n	800ac8e <_strtod_l+0x34e>
 800ac42:	2a49      	cmp	r2, #73	@ 0x49
 800ac44:	d025      	beq.n	800ac92 <_strtod_l+0x352>
 800ac46:	2a4e      	cmp	r2, #78	@ 0x4e
 800ac48:	f47f aece 	bne.w	800a9e8 <_strtod_l+0xa8>
 800ac4c:	499b      	ldr	r1, [pc, #620]	@ (800aebc <_strtod_l+0x57c>)
 800ac4e:	a819      	add	r0, sp, #100	@ 0x64
 800ac50:	f003 fcb6 	bl	800e5c0 <__match>
 800ac54:	2800      	cmp	r0, #0
 800ac56:	f43f aec7 	beq.w	800a9e8 <_strtod_l+0xa8>
 800ac5a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ac5c:	781b      	ldrb	r3, [r3, #0]
 800ac5e:	2b28      	cmp	r3, #40	@ 0x28
 800ac60:	d12e      	bne.n	800acc0 <_strtod_l+0x380>
 800ac62:	4997      	ldr	r1, [pc, #604]	@ (800aec0 <_strtod_l+0x580>)
 800ac64:	aa1c      	add	r2, sp, #112	@ 0x70
 800ac66:	a819      	add	r0, sp, #100	@ 0x64
 800ac68:	f003 fcbe 	bl	800e5e8 <__hexnan>
 800ac6c:	2805      	cmp	r0, #5
 800ac6e:	d127      	bne.n	800acc0 <_strtod_l+0x380>
 800ac70:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800ac72:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800ac76:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800ac7a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800ac7e:	e698      	b.n	800a9b2 <_strtod_l+0x72>
 800ac80:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800ac82:	fb08 2101 	mla	r1, r8, r1, r2
 800ac86:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800ac8a:	920e      	str	r2, [sp, #56]	@ 0x38
 800ac8c:	e7b5      	b.n	800abfa <_strtod_l+0x2ba>
 800ac8e:	2a6e      	cmp	r2, #110	@ 0x6e
 800ac90:	e7da      	b.n	800ac48 <_strtod_l+0x308>
 800ac92:	498c      	ldr	r1, [pc, #560]	@ (800aec4 <_strtod_l+0x584>)
 800ac94:	a819      	add	r0, sp, #100	@ 0x64
 800ac96:	f003 fc93 	bl	800e5c0 <__match>
 800ac9a:	2800      	cmp	r0, #0
 800ac9c:	f43f aea4 	beq.w	800a9e8 <_strtod_l+0xa8>
 800aca0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800aca2:	4989      	ldr	r1, [pc, #548]	@ (800aec8 <_strtod_l+0x588>)
 800aca4:	3b01      	subs	r3, #1
 800aca6:	a819      	add	r0, sp, #100	@ 0x64
 800aca8:	9319      	str	r3, [sp, #100]	@ 0x64
 800acaa:	f003 fc89 	bl	800e5c0 <__match>
 800acae:	b910      	cbnz	r0, 800acb6 <_strtod_l+0x376>
 800acb0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800acb2:	3301      	adds	r3, #1
 800acb4:	9319      	str	r3, [sp, #100]	@ 0x64
 800acb6:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800aed8 <_strtod_l+0x598>
 800acba:	f04f 0a00 	mov.w	sl, #0
 800acbe:	e678      	b.n	800a9b2 <_strtod_l+0x72>
 800acc0:	4882      	ldr	r0, [pc, #520]	@ (800aecc <_strtod_l+0x58c>)
 800acc2:	f002 fb45 	bl	800d350 <nan>
 800acc6:	ec5b ab10 	vmov	sl, fp, d0
 800acca:	e672      	b.n	800a9b2 <_strtod_l+0x72>
 800accc:	eba8 0309 	sub.w	r3, r8, r9
 800acd0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800acd2:	9309      	str	r3, [sp, #36]	@ 0x24
 800acd4:	2f00      	cmp	r7, #0
 800acd6:	bf08      	it	eq
 800acd8:	462f      	moveq	r7, r5
 800acda:	2d10      	cmp	r5, #16
 800acdc:	462c      	mov	r4, r5
 800acde:	bfa8      	it	ge
 800ace0:	2410      	movge	r4, #16
 800ace2:	f7f5 fc1f 	bl	8000524 <__aeabi_ui2d>
 800ace6:	2d09      	cmp	r5, #9
 800ace8:	4682      	mov	sl, r0
 800acea:	468b      	mov	fp, r1
 800acec:	dc13      	bgt.n	800ad16 <_strtod_l+0x3d6>
 800acee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	f43f ae5e 	beq.w	800a9b2 <_strtod_l+0x72>
 800acf6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800acf8:	dd78      	ble.n	800adec <_strtod_l+0x4ac>
 800acfa:	2b16      	cmp	r3, #22
 800acfc:	dc5f      	bgt.n	800adbe <_strtod_l+0x47e>
 800acfe:	4974      	ldr	r1, [pc, #464]	@ (800aed0 <_strtod_l+0x590>)
 800ad00:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800ad04:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ad08:	4652      	mov	r2, sl
 800ad0a:	465b      	mov	r3, fp
 800ad0c:	f7f5 fc84 	bl	8000618 <__aeabi_dmul>
 800ad10:	4682      	mov	sl, r0
 800ad12:	468b      	mov	fp, r1
 800ad14:	e64d      	b.n	800a9b2 <_strtod_l+0x72>
 800ad16:	4b6e      	ldr	r3, [pc, #440]	@ (800aed0 <_strtod_l+0x590>)
 800ad18:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ad1c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800ad20:	f7f5 fc7a 	bl	8000618 <__aeabi_dmul>
 800ad24:	4682      	mov	sl, r0
 800ad26:	9808      	ldr	r0, [sp, #32]
 800ad28:	468b      	mov	fp, r1
 800ad2a:	f7f5 fbfb 	bl	8000524 <__aeabi_ui2d>
 800ad2e:	4602      	mov	r2, r0
 800ad30:	460b      	mov	r3, r1
 800ad32:	4650      	mov	r0, sl
 800ad34:	4659      	mov	r1, fp
 800ad36:	f7f5 fab9 	bl	80002ac <__adddf3>
 800ad3a:	2d0f      	cmp	r5, #15
 800ad3c:	4682      	mov	sl, r0
 800ad3e:	468b      	mov	fp, r1
 800ad40:	ddd5      	ble.n	800acee <_strtod_l+0x3ae>
 800ad42:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ad44:	1b2c      	subs	r4, r5, r4
 800ad46:	441c      	add	r4, r3
 800ad48:	2c00      	cmp	r4, #0
 800ad4a:	f340 8096 	ble.w	800ae7a <_strtod_l+0x53a>
 800ad4e:	f014 030f 	ands.w	r3, r4, #15
 800ad52:	d00a      	beq.n	800ad6a <_strtod_l+0x42a>
 800ad54:	495e      	ldr	r1, [pc, #376]	@ (800aed0 <_strtod_l+0x590>)
 800ad56:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800ad5a:	4652      	mov	r2, sl
 800ad5c:	465b      	mov	r3, fp
 800ad5e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ad62:	f7f5 fc59 	bl	8000618 <__aeabi_dmul>
 800ad66:	4682      	mov	sl, r0
 800ad68:	468b      	mov	fp, r1
 800ad6a:	f034 040f 	bics.w	r4, r4, #15
 800ad6e:	d073      	beq.n	800ae58 <_strtod_l+0x518>
 800ad70:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800ad74:	dd48      	ble.n	800ae08 <_strtod_l+0x4c8>
 800ad76:	2400      	movs	r4, #0
 800ad78:	46a0      	mov	r8, r4
 800ad7a:	940a      	str	r4, [sp, #40]	@ 0x28
 800ad7c:	46a1      	mov	r9, r4
 800ad7e:	9a05      	ldr	r2, [sp, #20]
 800ad80:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800aed8 <_strtod_l+0x598>
 800ad84:	2322      	movs	r3, #34	@ 0x22
 800ad86:	6013      	str	r3, [r2, #0]
 800ad88:	f04f 0a00 	mov.w	sl, #0
 800ad8c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	f43f ae0f 	beq.w	800a9b2 <_strtod_l+0x72>
 800ad94:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ad96:	9805      	ldr	r0, [sp, #20]
 800ad98:	f003 fd58 	bl	800e84c <_Bfree>
 800ad9c:	9805      	ldr	r0, [sp, #20]
 800ad9e:	4649      	mov	r1, r9
 800ada0:	f003 fd54 	bl	800e84c <_Bfree>
 800ada4:	9805      	ldr	r0, [sp, #20]
 800ada6:	4641      	mov	r1, r8
 800ada8:	f003 fd50 	bl	800e84c <_Bfree>
 800adac:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800adae:	9805      	ldr	r0, [sp, #20]
 800adb0:	f003 fd4c 	bl	800e84c <_Bfree>
 800adb4:	9805      	ldr	r0, [sp, #20]
 800adb6:	4621      	mov	r1, r4
 800adb8:	f003 fd48 	bl	800e84c <_Bfree>
 800adbc:	e5f9      	b.n	800a9b2 <_strtod_l+0x72>
 800adbe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800adc0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800adc4:	4293      	cmp	r3, r2
 800adc6:	dbbc      	blt.n	800ad42 <_strtod_l+0x402>
 800adc8:	4c41      	ldr	r4, [pc, #260]	@ (800aed0 <_strtod_l+0x590>)
 800adca:	f1c5 050f 	rsb	r5, r5, #15
 800adce:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800add2:	4652      	mov	r2, sl
 800add4:	465b      	mov	r3, fp
 800add6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800adda:	f7f5 fc1d 	bl	8000618 <__aeabi_dmul>
 800adde:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ade0:	1b5d      	subs	r5, r3, r5
 800ade2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800ade6:	e9d4 2300 	ldrd	r2, r3, [r4]
 800adea:	e78f      	b.n	800ad0c <_strtod_l+0x3cc>
 800adec:	3316      	adds	r3, #22
 800adee:	dba8      	blt.n	800ad42 <_strtod_l+0x402>
 800adf0:	4b37      	ldr	r3, [pc, #220]	@ (800aed0 <_strtod_l+0x590>)
 800adf2:	eba9 0808 	sub.w	r8, r9, r8
 800adf6:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800adfa:	e9d8 2300 	ldrd	r2, r3, [r8]
 800adfe:	4650      	mov	r0, sl
 800ae00:	4659      	mov	r1, fp
 800ae02:	f7f5 fd33 	bl	800086c <__aeabi_ddiv>
 800ae06:	e783      	b.n	800ad10 <_strtod_l+0x3d0>
 800ae08:	4b32      	ldr	r3, [pc, #200]	@ (800aed4 <_strtod_l+0x594>)
 800ae0a:	9308      	str	r3, [sp, #32]
 800ae0c:	2300      	movs	r3, #0
 800ae0e:	1124      	asrs	r4, r4, #4
 800ae10:	4650      	mov	r0, sl
 800ae12:	4659      	mov	r1, fp
 800ae14:	461e      	mov	r6, r3
 800ae16:	2c01      	cmp	r4, #1
 800ae18:	dc21      	bgt.n	800ae5e <_strtod_l+0x51e>
 800ae1a:	b10b      	cbz	r3, 800ae20 <_strtod_l+0x4e0>
 800ae1c:	4682      	mov	sl, r0
 800ae1e:	468b      	mov	fp, r1
 800ae20:	492c      	ldr	r1, [pc, #176]	@ (800aed4 <_strtod_l+0x594>)
 800ae22:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800ae26:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800ae2a:	4652      	mov	r2, sl
 800ae2c:	465b      	mov	r3, fp
 800ae2e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ae32:	f7f5 fbf1 	bl	8000618 <__aeabi_dmul>
 800ae36:	4b28      	ldr	r3, [pc, #160]	@ (800aed8 <_strtod_l+0x598>)
 800ae38:	460a      	mov	r2, r1
 800ae3a:	400b      	ands	r3, r1
 800ae3c:	4927      	ldr	r1, [pc, #156]	@ (800aedc <_strtod_l+0x59c>)
 800ae3e:	428b      	cmp	r3, r1
 800ae40:	4682      	mov	sl, r0
 800ae42:	d898      	bhi.n	800ad76 <_strtod_l+0x436>
 800ae44:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800ae48:	428b      	cmp	r3, r1
 800ae4a:	bf86      	itte	hi
 800ae4c:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800aee0 <_strtod_l+0x5a0>
 800ae50:	f04f 3aff 	movhi.w	sl, #4294967295
 800ae54:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800ae58:	2300      	movs	r3, #0
 800ae5a:	9308      	str	r3, [sp, #32]
 800ae5c:	e07a      	b.n	800af54 <_strtod_l+0x614>
 800ae5e:	07e2      	lsls	r2, r4, #31
 800ae60:	d505      	bpl.n	800ae6e <_strtod_l+0x52e>
 800ae62:	9b08      	ldr	r3, [sp, #32]
 800ae64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae68:	f7f5 fbd6 	bl	8000618 <__aeabi_dmul>
 800ae6c:	2301      	movs	r3, #1
 800ae6e:	9a08      	ldr	r2, [sp, #32]
 800ae70:	3208      	adds	r2, #8
 800ae72:	3601      	adds	r6, #1
 800ae74:	1064      	asrs	r4, r4, #1
 800ae76:	9208      	str	r2, [sp, #32]
 800ae78:	e7cd      	b.n	800ae16 <_strtod_l+0x4d6>
 800ae7a:	d0ed      	beq.n	800ae58 <_strtod_l+0x518>
 800ae7c:	4264      	negs	r4, r4
 800ae7e:	f014 020f 	ands.w	r2, r4, #15
 800ae82:	d00a      	beq.n	800ae9a <_strtod_l+0x55a>
 800ae84:	4b12      	ldr	r3, [pc, #72]	@ (800aed0 <_strtod_l+0x590>)
 800ae86:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ae8a:	4650      	mov	r0, sl
 800ae8c:	4659      	mov	r1, fp
 800ae8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae92:	f7f5 fceb 	bl	800086c <__aeabi_ddiv>
 800ae96:	4682      	mov	sl, r0
 800ae98:	468b      	mov	fp, r1
 800ae9a:	1124      	asrs	r4, r4, #4
 800ae9c:	d0dc      	beq.n	800ae58 <_strtod_l+0x518>
 800ae9e:	2c1f      	cmp	r4, #31
 800aea0:	dd20      	ble.n	800aee4 <_strtod_l+0x5a4>
 800aea2:	2400      	movs	r4, #0
 800aea4:	46a0      	mov	r8, r4
 800aea6:	940a      	str	r4, [sp, #40]	@ 0x28
 800aea8:	46a1      	mov	r9, r4
 800aeaa:	9a05      	ldr	r2, [sp, #20]
 800aeac:	2322      	movs	r3, #34	@ 0x22
 800aeae:	f04f 0a00 	mov.w	sl, #0
 800aeb2:	f04f 0b00 	mov.w	fp, #0
 800aeb6:	6013      	str	r3, [r2, #0]
 800aeb8:	e768      	b.n	800ad8c <_strtod_l+0x44c>
 800aeba:	bf00      	nop
 800aebc:	08012dc6 	.word	0x08012dc6
 800aec0:	08012c64 	.word	0x08012c64
 800aec4:	08012dbe 	.word	0x08012dbe
 800aec8:	08012ea7 	.word	0x08012ea7
 800aecc:	08011a82 	.word	0x08011a82
 800aed0:	08013020 	.word	0x08013020
 800aed4:	08012ff8 	.word	0x08012ff8
 800aed8:	7ff00000 	.word	0x7ff00000
 800aedc:	7ca00000 	.word	0x7ca00000
 800aee0:	7fefffff 	.word	0x7fefffff
 800aee4:	f014 0310 	ands.w	r3, r4, #16
 800aee8:	bf18      	it	ne
 800aeea:	236a      	movne	r3, #106	@ 0x6a
 800aeec:	4ea9      	ldr	r6, [pc, #676]	@ (800b194 <_strtod_l+0x854>)
 800aeee:	9308      	str	r3, [sp, #32]
 800aef0:	4650      	mov	r0, sl
 800aef2:	4659      	mov	r1, fp
 800aef4:	2300      	movs	r3, #0
 800aef6:	07e2      	lsls	r2, r4, #31
 800aef8:	d504      	bpl.n	800af04 <_strtod_l+0x5c4>
 800aefa:	e9d6 2300 	ldrd	r2, r3, [r6]
 800aefe:	f7f5 fb8b 	bl	8000618 <__aeabi_dmul>
 800af02:	2301      	movs	r3, #1
 800af04:	1064      	asrs	r4, r4, #1
 800af06:	f106 0608 	add.w	r6, r6, #8
 800af0a:	d1f4      	bne.n	800aef6 <_strtod_l+0x5b6>
 800af0c:	b10b      	cbz	r3, 800af12 <_strtod_l+0x5d2>
 800af0e:	4682      	mov	sl, r0
 800af10:	468b      	mov	fp, r1
 800af12:	9b08      	ldr	r3, [sp, #32]
 800af14:	b1b3      	cbz	r3, 800af44 <_strtod_l+0x604>
 800af16:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800af1a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800af1e:	2b00      	cmp	r3, #0
 800af20:	4659      	mov	r1, fp
 800af22:	dd0f      	ble.n	800af44 <_strtod_l+0x604>
 800af24:	2b1f      	cmp	r3, #31
 800af26:	dd55      	ble.n	800afd4 <_strtod_l+0x694>
 800af28:	2b34      	cmp	r3, #52	@ 0x34
 800af2a:	bfde      	ittt	le
 800af2c:	f04f 33ff 	movle.w	r3, #4294967295
 800af30:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800af34:	4093      	lslle	r3, r2
 800af36:	f04f 0a00 	mov.w	sl, #0
 800af3a:	bfcc      	ite	gt
 800af3c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800af40:	ea03 0b01 	andle.w	fp, r3, r1
 800af44:	2200      	movs	r2, #0
 800af46:	2300      	movs	r3, #0
 800af48:	4650      	mov	r0, sl
 800af4a:	4659      	mov	r1, fp
 800af4c:	f7f5 fdcc 	bl	8000ae8 <__aeabi_dcmpeq>
 800af50:	2800      	cmp	r0, #0
 800af52:	d1a6      	bne.n	800aea2 <_strtod_l+0x562>
 800af54:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800af56:	9300      	str	r3, [sp, #0]
 800af58:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800af5a:	9805      	ldr	r0, [sp, #20]
 800af5c:	462b      	mov	r3, r5
 800af5e:	463a      	mov	r2, r7
 800af60:	f003 fcdc 	bl	800e91c <__s2b>
 800af64:	900a      	str	r0, [sp, #40]	@ 0x28
 800af66:	2800      	cmp	r0, #0
 800af68:	f43f af05 	beq.w	800ad76 <_strtod_l+0x436>
 800af6c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800af6e:	2a00      	cmp	r2, #0
 800af70:	eba9 0308 	sub.w	r3, r9, r8
 800af74:	bfa8      	it	ge
 800af76:	2300      	movge	r3, #0
 800af78:	9312      	str	r3, [sp, #72]	@ 0x48
 800af7a:	2400      	movs	r4, #0
 800af7c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800af80:	9316      	str	r3, [sp, #88]	@ 0x58
 800af82:	46a0      	mov	r8, r4
 800af84:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800af86:	9805      	ldr	r0, [sp, #20]
 800af88:	6859      	ldr	r1, [r3, #4]
 800af8a:	f003 fc1f 	bl	800e7cc <_Balloc>
 800af8e:	4681      	mov	r9, r0
 800af90:	2800      	cmp	r0, #0
 800af92:	f43f aef4 	beq.w	800ad7e <_strtod_l+0x43e>
 800af96:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800af98:	691a      	ldr	r2, [r3, #16]
 800af9a:	3202      	adds	r2, #2
 800af9c:	f103 010c 	add.w	r1, r3, #12
 800afa0:	0092      	lsls	r2, r2, #2
 800afa2:	300c      	adds	r0, #12
 800afa4:	f002 f9c6 	bl	800d334 <memcpy>
 800afa8:	ec4b ab10 	vmov	d0, sl, fp
 800afac:	9805      	ldr	r0, [sp, #20]
 800afae:	aa1c      	add	r2, sp, #112	@ 0x70
 800afb0:	a91b      	add	r1, sp, #108	@ 0x6c
 800afb2:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800afb6:	f003 ffed 	bl	800ef94 <__d2b>
 800afba:	901a      	str	r0, [sp, #104]	@ 0x68
 800afbc:	2800      	cmp	r0, #0
 800afbe:	f43f aede 	beq.w	800ad7e <_strtod_l+0x43e>
 800afc2:	9805      	ldr	r0, [sp, #20]
 800afc4:	2101      	movs	r1, #1
 800afc6:	f003 fd3f 	bl	800ea48 <__i2b>
 800afca:	4680      	mov	r8, r0
 800afcc:	b948      	cbnz	r0, 800afe2 <_strtod_l+0x6a2>
 800afce:	f04f 0800 	mov.w	r8, #0
 800afd2:	e6d4      	b.n	800ad7e <_strtod_l+0x43e>
 800afd4:	f04f 32ff 	mov.w	r2, #4294967295
 800afd8:	fa02 f303 	lsl.w	r3, r2, r3
 800afdc:	ea03 0a0a 	and.w	sl, r3, sl
 800afe0:	e7b0      	b.n	800af44 <_strtod_l+0x604>
 800afe2:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800afe4:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800afe6:	2d00      	cmp	r5, #0
 800afe8:	bfab      	itete	ge
 800afea:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800afec:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800afee:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800aff0:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800aff2:	bfac      	ite	ge
 800aff4:	18ef      	addge	r7, r5, r3
 800aff6:	1b5e      	sublt	r6, r3, r5
 800aff8:	9b08      	ldr	r3, [sp, #32]
 800affa:	1aed      	subs	r5, r5, r3
 800affc:	4415      	add	r5, r2
 800affe:	4b66      	ldr	r3, [pc, #408]	@ (800b198 <_strtod_l+0x858>)
 800b000:	3d01      	subs	r5, #1
 800b002:	429d      	cmp	r5, r3
 800b004:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800b008:	da50      	bge.n	800b0ac <_strtod_l+0x76c>
 800b00a:	1b5b      	subs	r3, r3, r5
 800b00c:	2b1f      	cmp	r3, #31
 800b00e:	eba2 0203 	sub.w	r2, r2, r3
 800b012:	f04f 0101 	mov.w	r1, #1
 800b016:	dc3d      	bgt.n	800b094 <_strtod_l+0x754>
 800b018:	fa01 f303 	lsl.w	r3, r1, r3
 800b01c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b01e:	2300      	movs	r3, #0
 800b020:	9310      	str	r3, [sp, #64]	@ 0x40
 800b022:	18bd      	adds	r5, r7, r2
 800b024:	9b08      	ldr	r3, [sp, #32]
 800b026:	42af      	cmp	r7, r5
 800b028:	4416      	add	r6, r2
 800b02a:	441e      	add	r6, r3
 800b02c:	463b      	mov	r3, r7
 800b02e:	bfa8      	it	ge
 800b030:	462b      	movge	r3, r5
 800b032:	42b3      	cmp	r3, r6
 800b034:	bfa8      	it	ge
 800b036:	4633      	movge	r3, r6
 800b038:	2b00      	cmp	r3, #0
 800b03a:	bfc2      	ittt	gt
 800b03c:	1aed      	subgt	r5, r5, r3
 800b03e:	1af6      	subgt	r6, r6, r3
 800b040:	1aff      	subgt	r7, r7, r3
 800b042:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b044:	2b00      	cmp	r3, #0
 800b046:	dd16      	ble.n	800b076 <_strtod_l+0x736>
 800b048:	4641      	mov	r1, r8
 800b04a:	9805      	ldr	r0, [sp, #20]
 800b04c:	461a      	mov	r2, r3
 800b04e:	f003 fdbb 	bl	800ebc8 <__pow5mult>
 800b052:	4680      	mov	r8, r0
 800b054:	2800      	cmp	r0, #0
 800b056:	d0ba      	beq.n	800afce <_strtod_l+0x68e>
 800b058:	4601      	mov	r1, r0
 800b05a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800b05c:	9805      	ldr	r0, [sp, #20]
 800b05e:	f003 fd09 	bl	800ea74 <__multiply>
 800b062:	900e      	str	r0, [sp, #56]	@ 0x38
 800b064:	2800      	cmp	r0, #0
 800b066:	f43f ae8a 	beq.w	800ad7e <_strtod_l+0x43e>
 800b06a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b06c:	9805      	ldr	r0, [sp, #20]
 800b06e:	f003 fbed 	bl	800e84c <_Bfree>
 800b072:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b074:	931a      	str	r3, [sp, #104]	@ 0x68
 800b076:	2d00      	cmp	r5, #0
 800b078:	dc1d      	bgt.n	800b0b6 <_strtod_l+0x776>
 800b07a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	dd23      	ble.n	800b0c8 <_strtod_l+0x788>
 800b080:	4649      	mov	r1, r9
 800b082:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800b084:	9805      	ldr	r0, [sp, #20]
 800b086:	f003 fd9f 	bl	800ebc8 <__pow5mult>
 800b08a:	4681      	mov	r9, r0
 800b08c:	b9e0      	cbnz	r0, 800b0c8 <_strtod_l+0x788>
 800b08e:	f04f 0900 	mov.w	r9, #0
 800b092:	e674      	b.n	800ad7e <_strtod_l+0x43e>
 800b094:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800b098:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800b09c:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800b0a0:	35e2      	adds	r5, #226	@ 0xe2
 800b0a2:	fa01 f305 	lsl.w	r3, r1, r5
 800b0a6:	9310      	str	r3, [sp, #64]	@ 0x40
 800b0a8:	9113      	str	r1, [sp, #76]	@ 0x4c
 800b0aa:	e7ba      	b.n	800b022 <_strtod_l+0x6e2>
 800b0ac:	2300      	movs	r3, #0
 800b0ae:	9310      	str	r3, [sp, #64]	@ 0x40
 800b0b0:	2301      	movs	r3, #1
 800b0b2:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b0b4:	e7b5      	b.n	800b022 <_strtod_l+0x6e2>
 800b0b6:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b0b8:	9805      	ldr	r0, [sp, #20]
 800b0ba:	462a      	mov	r2, r5
 800b0bc:	f003 fdde 	bl	800ec7c <__lshift>
 800b0c0:	901a      	str	r0, [sp, #104]	@ 0x68
 800b0c2:	2800      	cmp	r0, #0
 800b0c4:	d1d9      	bne.n	800b07a <_strtod_l+0x73a>
 800b0c6:	e65a      	b.n	800ad7e <_strtod_l+0x43e>
 800b0c8:	2e00      	cmp	r6, #0
 800b0ca:	dd07      	ble.n	800b0dc <_strtod_l+0x79c>
 800b0cc:	4649      	mov	r1, r9
 800b0ce:	9805      	ldr	r0, [sp, #20]
 800b0d0:	4632      	mov	r2, r6
 800b0d2:	f003 fdd3 	bl	800ec7c <__lshift>
 800b0d6:	4681      	mov	r9, r0
 800b0d8:	2800      	cmp	r0, #0
 800b0da:	d0d8      	beq.n	800b08e <_strtod_l+0x74e>
 800b0dc:	2f00      	cmp	r7, #0
 800b0de:	dd08      	ble.n	800b0f2 <_strtod_l+0x7b2>
 800b0e0:	4641      	mov	r1, r8
 800b0e2:	9805      	ldr	r0, [sp, #20]
 800b0e4:	463a      	mov	r2, r7
 800b0e6:	f003 fdc9 	bl	800ec7c <__lshift>
 800b0ea:	4680      	mov	r8, r0
 800b0ec:	2800      	cmp	r0, #0
 800b0ee:	f43f ae46 	beq.w	800ad7e <_strtod_l+0x43e>
 800b0f2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b0f4:	9805      	ldr	r0, [sp, #20]
 800b0f6:	464a      	mov	r2, r9
 800b0f8:	f003 fe48 	bl	800ed8c <__mdiff>
 800b0fc:	4604      	mov	r4, r0
 800b0fe:	2800      	cmp	r0, #0
 800b100:	f43f ae3d 	beq.w	800ad7e <_strtod_l+0x43e>
 800b104:	68c3      	ldr	r3, [r0, #12]
 800b106:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b108:	2300      	movs	r3, #0
 800b10a:	60c3      	str	r3, [r0, #12]
 800b10c:	4641      	mov	r1, r8
 800b10e:	f003 fe21 	bl	800ed54 <__mcmp>
 800b112:	2800      	cmp	r0, #0
 800b114:	da46      	bge.n	800b1a4 <_strtod_l+0x864>
 800b116:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b118:	ea53 030a 	orrs.w	r3, r3, sl
 800b11c:	d16c      	bne.n	800b1f8 <_strtod_l+0x8b8>
 800b11e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b122:	2b00      	cmp	r3, #0
 800b124:	d168      	bne.n	800b1f8 <_strtod_l+0x8b8>
 800b126:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b12a:	0d1b      	lsrs	r3, r3, #20
 800b12c:	051b      	lsls	r3, r3, #20
 800b12e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800b132:	d961      	bls.n	800b1f8 <_strtod_l+0x8b8>
 800b134:	6963      	ldr	r3, [r4, #20]
 800b136:	b913      	cbnz	r3, 800b13e <_strtod_l+0x7fe>
 800b138:	6923      	ldr	r3, [r4, #16]
 800b13a:	2b01      	cmp	r3, #1
 800b13c:	dd5c      	ble.n	800b1f8 <_strtod_l+0x8b8>
 800b13e:	4621      	mov	r1, r4
 800b140:	2201      	movs	r2, #1
 800b142:	9805      	ldr	r0, [sp, #20]
 800b144:	f003 fd9a 	bl	800ec7c <__lshift>
 800b148:	4641      	mov	r1, r8
 800b14a:	4604      	mov	r4, r0
 800b14c:	f003 fe02 	bl	800ed54 <__mcmp>
 800b150:	2800      	cmp	r0, #0
 800b152:	dd51      	ble.n	800b1f8 <_strtod_l+0x8b8>
 800b154:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b158:	9a08      	ldr	r2, [sp, #32]
 800b15a:	0d1b      	lsrs	r3, r3, #20
 800b15c:	051b      	lsls	r3, r3, #20
 800b15e:	2a00      	cmp	r2, #0
 800b160:	d06b      	beq.n	800b23a <_strtod_l+0x8fa>
 800b162:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800b166:	d868      	bhi.n	800b23a <_strtod_l+0x8fa>
 800b168:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800b16c:	f67f ae9d 	bls.w	800aeaa <_strtod_l+0x56a>
 800b170:	4b0a      	ldr	r3, [pc, #40]	@ (800b19c <_strtod_l+0x85c>)
 800b172:	4650      	mov	r0, sl
 800b174:	4659      	mov	r1, fp
 800b176:	2200      	movs	r2, #0
 800b178:	f7f5 fa4e 	bl	8000618 <__aeabi_dmul>
 800b17c:	4b08      	ldr	r3, [pc, #32]	@ (800b1a0 <_strtod_l+0x860>)
 800b17e:	400b      	ands	r3, r1
 800b180:	4682      	mov	sl, r0
 800b182:	468b      	mov	fp, r1
 800b184:	2b00      	cmp	r3, #0
 800b186:	f47f ae05 	bne.w	800ad94 <_strtod_l+0x454>
 800b18a:	9a05      	ldr	r2, [sp, #20]
 800b18c:	2322      	movs	r3, #34	@ 0x22
 800b18e:	6013      	str	r3, [r2, #0]
 800b190:	e600      	b.n	800ad94 <_strtod_l+0x454>
 800b192:	bf00      	nop
 800b194:	08012c90 	.word	0x08012c90
 800b198:	fffffc02 	.word	0xfffffc02
 800b19c:	39500000 	.word	0x39500000
 800b1a0:	7ff00000 	.word	0x7ff00000
 800b1a4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800b1a8:	d165      	bne.n	800b276 <_strtod_l+0x936>
 800b1aa:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800b1ac:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b1b0:	b35a      	cbz	r2, 800b20a <_strtod_l+0x8ca>
 800b1b2:	4a9f      	ldr	r2, [pc, #636]	@ (800b430 <_strtod_l+0xaf0>)
 800b1b4:	4293      	cmp	r3, r2
 800b1b6:	d12b      	bne.n	800b210 <_strtod_l+0x8d0>
 800b1b8:	9b08      	ldr	r3, [sp, #32]
 800b1ba:	4651      	mov	r1, sl
 800b1bc:	b303      	cbz	r3, 800b200 <_strtod_l+0x8c0>
 800b1be:	4b9d      	ldr	r3, [pc, #628]	@ (800b434 <_strtod_l+0xaf4>)
 800b1c0:	465a      	mov	r2, fp
 800b1c2:	4013      	ands	r3, r2
 800b1c4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800b1c8:	f04f 32ff 	mov.w	r2, #4294967295
 800b1cc:	d81b      	bhi.n	800b206 <_strtod_l+0x8c6>
 800b1ce:	0d1b      	lsrs	r3, r3, #20
 800b1d0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800b1d4:	fa02 f303 	lsl.w	r3, r2, r3
 800b1d8:	4299      	cmp	r1, r3
 800b1da:	d119      	bne.n	800b210 <_strtod_l+0x8d0>
 800b1dc:	4b96      	ldr	r3, [pc, #600]	@ (800b438 <_strtod_l+0xaf8>)
 800b1de:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b1e0:	429a      	cmp	r2, r3
 800b1e2:	d102      	bne.n	800b1ea <_strtod_l+0x8aa>
 800b1e4:	3101      	adds	r1, #1
 800b1e6:	f43f adca 	beq.w	800ad7e <_strtod_l+0x43e>
 800b1ea:	4b92      	ldr	r3, [pc, #584]	@ (800b434 <_strtod_l+0xaf4>)
 800b1ec:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b1ee:	401a      	ands	r2, r3
 800b1f0:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800b1f4:	f04f 0a00 	mov.w	sl, #0
 800b1f8:	9b08      	ldr	r3, [sp, #32]
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	d1b8      	bne.n	800b170 <_strtod_l+0x830>
 800b1fe:	e5c9      	b.n	800ad94 <_strtod_l+0x454>
 800b200:	f04f 33ff 	mov.w	r3, #4294967295
 800b204:	e7e8      	b.n	800b1d8 <_strtod_l+0x898>
 800b206:	4613      	mov	r3, r2
 800b208:	e7e6      	b.n	800b1d8 <_strtod_l+0x898>
 800b20a:	ea53 030a 	orrs.w	r3, r3, sl
 800b20e:	d0a1      	beq.n	800b154 <_strtod_l+0x814>
 800b210:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800b212:	b1db      	cbz	r3, 800b24c <_strtod_l+0x90c>
 800b214:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b216:	4213      	tst	r3, r2
 800b218:	d0ee      	beq.n	800b1f8 <_strtod_l+0x8b8>
 800b21a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b21c:	9a08      	ldr	r2, [sp, #32]
 800b21e:	4650      	mov	r0, sl
 800b220:	4659      	mov	r1, fp
 800b222:	b1bb      	cbz	r3, 800b254 <_strtod_l+0x914>
 800b224:	f7ff fb6c 	bl	800a900 <sulp>
 800b228:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b22c:	ec53 2b10 	vmov	r2, r3, d0
 800b230:	f7f5 f83c 	bl	80002ac <__adddf3>
 800b234:	4682      	mov	sl, r0
 800b236:	468b      	mov	fp, r1
 800b238:	e7de      	b.n	800b1f8 <_strtod_l+0x8b8>
 800b23a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800b23e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800b242:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800b246:	f04f 3aff 	mov.w	sl, #4294967295
 800b24a:	e7d5      	b.n	800b1f8 <_strtod_l+0x8b8>
 800b24c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800b24e:	ea13 0f0a 	tst.w	r3, sl
 800b252:	e7e1      	b.n	800b218 <_strtod_l+0x8d8>
 800b254:	f7ff fb54 	bl	800a900 <sulp>
 800b258:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b25c:	ec53 2b10 	vmov	r2, r3, d0
 800b260:	f7f5 f822 	bl	80002a8 <__aeabi_dsub>
 800b264:	2200      	movs	r2, #0
 800b266:	2300      	movs	r3, #0
 800b268:	4682      	mov	sl, r0
 800b26a:	468b      	mov	fp, r1
 800b26c:	f7f5 fc3c 	bl	8000ae8 <__aeabi_dcmpeq>
 800b270:	2800      	cmp	r0, #0
 800b272:	d0c1      	beq.n	800b1f8 <_strtod_l+0x8b8>
 800b274:	e619      	b.n	800aeaa <_strtod_l+0x56a>
 800b276:	4641      	mov	r1, r8
 800b278:	4620      	mov	r0, r4
 800b27a:	f003 fee3 	bl	800f044 <__ratio>
 800b27e:	ec57 6b10 	vmov	r6, r7, d0
 800b282:	2200      	movs	r2, #0
 800b284:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800b288:	4630      	mov	r0, r6
 800b28a:	4639      	mov	r1, r7
 800b28c:	f7f5 fc40 	bl	8000b10 <__aeabi_dcmple>
 800b290:	2800      	cmp	r0, #0
 800b292:	d06f      	beq.n	800b374 <_strtod_l+0xa34>
 800b294:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b296:	2b00      	cmp	r3, #0
 800b298:	d17a      	bne.n	800b390 <_strtod_l+0xa50>
 800b29a:	f1ba 0f00 	cmp.w	sl, #0
 800b29e:	d158      	bne.n	800b352 <_strtod_l+0xa12>
 800b2a0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b2a2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	d15a      	bne.n	800b360 <_strtod_l+0xa20>
 800b2aa:	4b64      	ldr	r3, [pc, #400]	@ (800b43c <_strtod_l+0xafc>)
 800b2ac:	2200      	movs	r2, #0
 800b2ae:	4630      	mov	r0, r6
 800b2b0:	4639      	mov	r1, r7
 800b2b2:	f7f5 fc23 	bl	8000afc <__aeabi_dcmplt>
 800b2b6:	2800      	cmp	r0, #0
 800b2b8:	d159      	bne.n	800b36e <_strtod_l+0xa2e>
 800b2ba:	4630      	mov	r0, r6
 800b2bc:	4639      	mov	r1, r7
 800b2be:	4b60      	ldr	r3, [pc, #384]	@ (800b440 <_strtod_l+0xb00>)
 800b2c0:	2200      	movs	r2, #0
 800b2c2:	f7f5 f9a9 	bl	8000618 <__aeabi_dmul>
 800b2c6:	4606      	mov	r6, r0
 800b2c8:	460f      	mov	r7, r1
 800b2ca:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800b2ce:	9606      	str	r6, [sp, #24]
 800b2d0:	9307      	str	r3, [sp, #28]
 800b2d2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b2d6:	4d57      	ldr	r5, [pc, #348]	@ (800b434 <_strtod_l+0xaf4>)
 800b2d8:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800b2dc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b2de:	401d      	ands	r5, r3
 800b2e0:	4b58      	ldr	r3, [pc, #352]	@ (800b444 <_strtod_l+0xb04>)
 800b2e2:	429d      	cmp	r5, r3
 800b2e4:	f040 80b2 	bne.w	800b44c <_strtod_l+0xb0c>
 800b2e8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b2ea:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800b2ee:	ec4b ab10 	vmov	d0, sl, fp
 800b2f2:	f003 fddf 	bl	800eeb4 <__ulp>
 800b2f6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b2fa:	ec51 0b10 	vmov	r0, r1, d0
 800b2fe:	f7f5 f98b 	bl	8000618 <__aeabi_dmul>
 800b302:	4652      	mov	r2, sl
 800b304:	465b      	mov	r3, fp
 800b306:	f7f4 ffd1 	bl	80002ac <__adddf3>
 800b30a:	460b      	mov	r3, r1
 800b30c:	4949      	ldr	r1, [pc, #292]	@ (800b434 <_strtod_l+0xaf4>)
 800b30e:	4a4e      	ldr	r2, [pc, #312]	@ (800b448 <_strtod_l+0xb08>)
 800b310:	4019      	ands	r1, r3
 800b312:	4291      	cmp	r1, r2
 800b314:	4682      	mov	sl, r0
 800b316:	d942      	bls.n	800b39e <_strtod_l+0xa5e>
 800b318:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800b31a:	4b47      	ldr	r3, [pc, #284]	@ (800b438 <_strtod_l+0xaf8>)
 800b31c:	429a      	cmp	r2, r3
 800b31e:	d103      	bne.n	800b328 <_strtod_l+0x9e8>
 800b320:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b322:	3301      	adds	r3, #1
 800b324:	f43f ad2b 	beq.w	800ad7e <_strtod_l+0x43e>
 800b328:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800b438 <_strtod_l+0xaf8>
 800b32c:	f04f 3aff 	mov.w	sl, #4294967295
 800b330:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b332:	9805      	ldr	r0, [sp, #20]
 800b334:	f003 fa8a 	bl	800e84c <_Bfree>
 800b338:	9805      	ldr	r0, [sp, #20]
 800b33a:	4649      	mov	r1, r9
 800b33c:	f003 fa86 	bl	800e84c <_Bfree>
 800b340:	9805      	ldr	r0, [sp, #20]
 800b342:	4641      	mov	r1, r8
 800b344:	f003 fa82 	bl	800e84c <_Bfree>
 800b348:	9805      	ldr	r0, [sp, #20]
 800b34a:	4621      	mov	r1, r4
 800b34c:	f003 fa7e 	bl	800e84c <_Bfree>
 800b350:	e618      	b.n	800af84 <_strtod_l+0x644>
 800b352:	f1ba 0f01 	cmp.w	sl, #1
 800b356:	d103      	bne.n	800b360 <_strtod_l+0xa20>
 800b358:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b35a:	2b00      	cmp	r3, #0
 800b35c:	f43f ada5 	beq.w	800aeaa <_strtod_l+0x56a>
 800b360:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800b410 <_strtod_l+0xad0>
 800b364:	4f35      	ldr	r7, [pc, #212]	@ (800b43c <_strtod_l+0xafc>)
 800b366:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b36a:	2600      	movs	r6, #0
 800b36c:	e7b1      	b.n	800b2d2 <_strtod_l+0x992>
 800b36e:	4f34      	ldr	r7, [pc, #208]	@ (800b440 <_strtod_l+0xb00>)
 800b370:	2600      	movs	r6, #0
 800b372:	e7aa      	b.n	800b2ca <_strtod_l+0x98a>
 800b374:	4b32      	ldr	r3, [pc, #200]	@ (800b440 <_strtod_l+0xb00>)
 800b376:	4630      	mov	r0, r6
 800b378:	4639      	mov	r1, r7
 800b37a:	2200      	movs	r2, #0
 800b37c:	f7f5 f94c 	bl	8000618 <__aeabi_dmul>
 800b380:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b382:	4606      	mov	r6, r0
 800b384:	460f      	mov	r7, r1
 800b386:	2b00      	cmp	r3, #0
 800b388:	d09f      	beq.n	800b2ca <_strtod_l+0x98a>
 800b38a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800b38e:	e7a0      	b.n	800b2d2 <_strtod_l+0x992>
 800b390:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800b418 <_strtod_l+0xad8>
 800b394:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b398:	ec57 6b17 	vmov	r6, r7, d7
 800b39c:	e799      	b.n	800b2d2 <_strtod_l+0x992>
 800b39e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800b3a2:	9b08      	ldr	r3, [sp, #32]
 800b3a4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800b3a8:	2b00      	cmp	r3, #0
 800b3aa:	d1c1      	bne.n	800b330 <_strtod_l+0x9f0>
 800b3ac:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b3b0:	0d1b      	lsrs	r3, r3, #20
 800b3b2:	051b      	lsls	r3, r3, #20
 800b3b4:	429d      	cmp	r5, r3
 800b3b6:	d1bb      	bne.n	800b330 <_strtod_l+0x9f0>
 800b3b8:	4630      	mov	r0, r6
 800b3ba:	4639      	mov	r1, r7
 800b3bc:	f7f5 fc74 	bl	8000ca8 <__aeabi_d2lz>
 800b3c0:	f7f5 f8fc 	bl	80005bc <__aeabi_l2d>
 800b3c4:	4602      	mov	r2, r0
 800b3c6:	460b      	mov	r3, r1
 800b3c8:	4630      	mov	r0, r6
 800b3ca:	4639      	mov	r1, r7
 800b3cc:	f7f4 ff6c 	bl	80002a8 <__aeabi_dsub>
 800b3d0:	460b      	mov	r3, r1
 800b3d2:	4602      	mov	r2, r0
 800b3d4:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800b3d8:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800b3dc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b3de:	ea46 060a 	orr.w	r6, r6, sl
 800b3e2:	431e      	orrs	r6, r3
 800b3e4:	d06f      	beq.n	800b4c6 <_strtod_l+0xb86>
 800b3e6:	a30e      	add	r3, pc, #56	@ (adr r3, 800b420 <_strtod_l+0xae0>)
 800b3e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3ec:	f7f5 fb86 	bl	8000afc <__aeabi_dcmplt>
 800b3f0:	2800      	cmp	r0, #0
 800b3f2:	f47f accf 	bne.w	800ad94 <_strtod_l+0x454>
 800b3f6:	a30c      	add	r3, pc, #48	@ (adr r3, 800b428 <_strtod_l+0xae8>)
 800b3f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3fc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b400:	f7f5 fb9a 	bl	8000b38 <__aeabi_dcmpgt>
 800b404:	2800      	cmp	r0, #0
 800b406:	d093      	beq.n	800b330 <_strtod_l+0x9f0>
 800b408:	e4c4      	b.n	800ad94 <_strtod_l+0x454>
 800b40a:	bf00      	nop
 800b40c:	f3af 8000 	nop.w
 800b410:	00000000 	.word	0x00000000
 800b414:	bff00000 	.word	0xbff00000
 800b418:	00000000 	.word	0x00000000
 800b41c:	3ff00000 	.word	0x3ff00000
 800b420:	94a03595 	.word	0x94a03595
 800b424:	3fdfffff 	.word	0x3fdfffff
 800b428:	35afe535 	.word	0x35afe535
 800b42c:	3fe00000 	.word	0x3fe00000
 800b430:	000fffff 	.word	0x000fffff
 800b434:	7ff00000 	.word	0x7ff00000
 800b438:	7fefffff 	.word	0x7fefffff
 800b43c:	3ff00000 	.word	0x3ff00000
 800b440:	3fe00000 	.word	0x3fe00000
 800b444:	7fe00000 	.word	0x7fe00000
 800b448:	7c9fffff 	.word	0x7c9fffff
 800b44c:	9b08      	ldr	r3, [sp, #32]
 800b44e:	b323      	cbz	r3, 800b49a <_strtod_l+0xb5a>
 800b450:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800b454:	d821      	bhi.n	800b49a <_strtod_l+0xb5a>
 800b456:	a328      	add	r3, pc, #160	@ (adr r3, 800b4f8 <_strtod_l+0xbb8>)
 800b458:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b45c:	4630      	mov	r0, r6
 800b45e:	4639      	mov	r1, r7
 800b460:	f7f5 fb56 	bl	8000b10 <__aeabi_dcmple>
 800b464:	b1a0      	cbz	r0, 800b490 <_strtod_l+0xb50>
 800b466:	4639      	mov	r1, r7
 800b468:	4630      	mov	r0, r6
 800b46a:	f7f5 fbad 	bl	8000bc8 <__aeabi_d2uiz>
 800b46e:	2801      	cmp	r0, #1
 800b470:	bf38      	it	cc
 800b472:	2001      	movcc	r0, #1
 800b474:	f7f5 f856 	bl	8000524 <__aeabi_ui2d>
 800b478:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b47a:	4606      	mov	r6, r0
 800b47c:	460f      	mov	r7, r1
 800b47e:	b9fb      	cbnz	r3, 800b4c0 <_strtod_l+0xb80>
 800b480:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800b484:	9014      	str	r0, [sp, #80]	@ 0x50
 800b486:	9315      	str	r3, [sp, #84]	@ 0x54
 800b488:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800b48c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800b490:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800b492:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800b496:	1b5b      	subs	r3, r3, r5
 800b498:	9311      	str	r3, [sp, #68]	@ 0x44
 800b49a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800b49e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800b4a2:	f003 fd07 	bl	800eeb4 <__ulp>
 800b4a6:	4650      	mov	r0, sl
 800b4a8:	ec53 2b10 	vmov	r2, r3, d0
 800b4ac:	4659      	mov	r1, fp
 800b4ae:	f7f5 f8b3 	bl	8000618 <__aeabi_dmul>
 800b4b2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800b4b6:	f7f4 fef9 	bl	80002ac <__adddf3>
 800b4ba:	4682      	mov	sl, r0
 800b4bc:	468b      	mov	fp, r1
 800b4be:	e770      	b.n	800b3a2 <_strtod_l+0xa62>
 800b4c0:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800b4c4:	e7e0      	b.n	800b488 <_strtod_l+0xb48>
 800b4c6:	a30e      	add	r3, pc, #56	@ (adr r3, 800b500 <_strtod_l+0xbc0>)
 800b4c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4cc:	f7f5 fb16 	bl	8000afc <__aeabi_dcmplt>
 800b4d0:	e798      	b.n	800b404 <_strtod_l+0xac4>
 800b4d2:	2300      	movs	r3, #0
 800b4d4:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b4d6:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800b4d8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b4da:	6013      	str	r3, [r2, #0]
 800b4dc:	f7ff ba6d 	b.w	800a9ba <_strtod_l+0x7a>
 800b4e0:	2a65      	cmp	r2, #101	@ 0x65
 800b4e2:	f43f ab66 	beq.w	800abb2 <_strtod_l+0x272>
 800b4e6:	2a45      	cmp	r2, #69	@ 0x45
 800b4e8:	f43f ab63 	beq.w	800abb2 <_strtod_l+0x272>
 800b4ec:	2301      	movs	r3, #1
 800b4ee:	f7ff bb9e 	b.w	800ac2e <_strtod_l+0x2ee>
 800b4f2:	bf00      	nop
 800b4f4:	f3af 8000 	nop.w
 800b4f8:	ffc00000 	.word	0xffc00000
 800b4fc:	41dfffff 	.word	0x41dfffff
 800b500:	94a03595 	.word	0x94a03595
 800b504:	3fcfffff 	.word	0x3fcfffff

0800b508 <_strtod_r>:
 800b508:	4b01      	ldr	r3, [pc, #4]	@ (800b510 <_strtod_r+0x8>)
 800b50a:	f7ff ba19 	b.w	800a940 <_strtod_l>
 800b50e:	bf00      	nop
 800b510:	20000050 	.word	0x20000050

0800b514 <strtod>:
 800b514:	460a      	mov	r2, r1
 800b516:	4601      	mov	r1, r0
 800b518:	4802      	ldr	r0, [pc, #8]	@ (800b524 <strtod+0x10>)
 800b51a:	4b03      	ldr	r3, [pc, #12]	@ (800b528 <strtod+0x14>)
 800b51c:	6800      	ldr	r0, [r0, #0]
 800b51e:	f7ff ba0f 	b.w	800a940 <_strtod_l>
 800b522:	bf00      	nop
 800b524:	200001bc 	.word	0x200001bc
 800b528:	20000050 	.word	0x20000050

0800b52c <_strtol_l.constprop.0>:
 800b52c:	2b24      	cmp	r3, #36	@ 0x24
 800b52e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b532:	4686      	mov	lr, r0
 800b534:	4690      	mov	r8, r2
 800b536:	d801      	bhi.n	800b53c <_strtol_l.constprop.0+0x10>
 800b538:	2b01      	cmp	r3, #1
 800b53a:	d106      	bne.n	800b54a <_strtol_l.constprop.0+0x1e>
 800b53c:	f001 fec8 	bl	800d2d0 <__errno>
 800b540:	2316      	movs	r3, #22
 800b542:	6003      	str	r3, [r0, #0]
 800b544:	2000      	movs	r0, #0
 800b546:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b54a:	4834      	ldr	r0, [pc, #208]	@ (800b61c <_strtol_l.constprop.0+0xf0>)
 800b54c:	460d      	mov	r5, r1
 800b54e:	462a      	mov	r2, r5
 800b550:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b554:	5d06      	ldrb	r6, [r0, r4]
 800b556:	f016 0608 	ands.w	r6, r6, #8
 800b55a:	d1f8      	bne.n	800b54e <_strtol_l.constprop.0+0x22>
 800b55c:	2c2d      	cmp	r4, #45	@ 0x2d
 800b55e:	d12d      	bne.n	800b5bc <_strtol_l.constprop.0+0x90>
 800b560:	782c      	ldrb	r4, [r5, #0]
 800b562:	2601      	movs	r6, #1
 800b564:	1c95      	adds	r5, r2, #2
 800b566:	f033 0210 	bics.w	r2, r3, #16
 800b56a:	d109      	bne.n	800b580 <_strtol_l.constprop.0+0x54>
 800b56c:	2c30      	cmp	r4, #48	@ 0x30
 800b56e:	d12a      	bne.n	800b5c6 <_strtol_l.constprop.0+0x9a>
 800b570:	782a      	ldrb	r2, [r5, #0]
 800b572:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800b576:	2a58      	cmp	r2, #88	@ 0x58
 800b578:	d125      	bne.n	800b5c6 <_strtol_l.constprop.0+0x9a>
 800b57a:	786c      	ldrb	r4, [r5, #1]
 800b57c:	2310      	movs	r3, #16
 800b57e:	3502      	adds	r5, #2
 800b580:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800b584:	f10c 3cff 	add.w	ip, ip, #4294967295
 800b588:	2200      	movs	r2, #0
 800b58a:	fbbc f9f3 	udiv	r9, ip, r3
 800b58e:	4610      	mov	r0, r2
 800b590:	fb03 ca19 	mls	sl, r3, r9, ip
 800b594:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800b598:	2f09      	cmp	r7, #9
 800b59a:	d81b      	bhi.n	800b5d4 <_strtol_l.constprop.0+0xa8>
 800b59c:	463c      	mov	r4, r7
 800b59e:	42a3      	cmp	r3, r4
 800b5a0:	dd27      	ble.n	800b5f2 <_strtol_l.constprop.0+0xc6>
 800b5a2:	1c57      	adds	r7, r2, #1
 800b5a4:	d007      	beq.n	800b5b6 <_strtol_l.constprop.0+0x8a>
 800b5a6:	4581      	cmp	r9, r0
 800b5a8:	d320      	bcc.n	800b5ec <_strtol_l.constprop.0+0xc0>
 800b5aa:	d101      	bne.n	800b5b0 <_strtol_l.constprop.0+0x84>
 800b5ac:	45a2      	cmp	sl, r4
 800b5ae:	db1d      	blt.n	800b5ec <_strtol_l.constprop.0+0xc0>
 800b5b0:	fb00 4003 	mla	r0, r0, r3, r4
 800b5b4:	2201      	movs	r2, #1
 800b5b6:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b5ba:	e7eb      	b.n	800b594 <_strtol_l.constprop.0+0x68>
 800b5bc:	2c2b      	cmp	r4, #43	@ 0x2b
 800b5be:	bf04      	itt	eq
 800b5c0:	782c      	ldrbeq	r4, [r5, #0]
 800b5c2:	1c95      	addeq	r5, r2, #2
 800b5c4:	e7cf      	b.n	800b566 <_strtol_l.constprop.0+0x3a>
 800b5c6:	2b00      	cmp	r3, #0
 800b5c8:	d1da      	bne.n	800b580 <_strtol_l.constprop.0+0x54>
 800b5ca:	2c30      	cmp	r4, #48	@ 0x30
 800b5cc:	bf0c      	ite	eq
 800b5ce:	2308      	moveq	r3, #8
 800b5d0:	230a      	movne	r3, #10
 800b5d2:	e7d5      	b.n	800b580 <_strtol_l.constprop.0+0x54>
 800b5d4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800b5d8:	2f19      	cmp	r7, #25
 800b5da:	d801      	bhi.n	800b5e0 <_strtol_l.constprop.0+0xb4>
 800b5dc:	3c37      	subs	r4, #55	@ 0x37
 800b5de:	e7de      	b.n	800b59e <_strtol_l.constprop.0+0x72>
 800b5e0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800b5e4:	2f19      	cmp	r7, #25
 800b5e6:	d804      	bhi.n	800b5f2 <_strtol_l.constprop.0+0xc6>
 800b5e8:	3c57      	subs	r4, #87	@ 0x57
 800b5ea:	e7d8      	b.n	800b59e <_strtol_l.constprop.0+0x72>
 800b5ec:	f04f 32ff 	mov.w	r2, #4294967295
 800b5f0:	e7e1      	b.n	800b5b6 <_strtol_l.constprop.0+0x8a>
 800b5f2:	1c53      	adds	r3, r2, #1
 800b5f4:	d108      	bne.n	800b608 <_strtol_l.constprop.0+0xdc>
 800b5f6:	2322      	movs	r3, #34	@ 0x22
 800b5f8:	f8ce 3000 	str.w	r3, [lr]
 800b5fc:	4660      	mov	r0, ip
 800b5fe:	f1b8 0f00 	cmp.w	r8, #0
 800b602:	d0a0      	beq.n	800b546 <_strtol_l.constprop.0+0x1a>
 800b604:	1e69      	subs	r1, r5, #1
 800b606:	e006      	b.n	800b616 <_strtol_l.constprop.0+0xea>
 800b608:	b106      	cbz	r6, 800b60c <_strtol_l.constprop.0+0xe0>
 800b60a:	4240      	negs	r0, r0
 800b60c:	f1b8 0f00 	cmp.w	r8, #0
 800b610:	d099      	beq.n	800b546 <_strtol_l.constprop.0+0x1a>
 800b612:	2a00      	cmp	r2, #0
 800b614:	d1f6      	bne.n	800b604 <_strtol_l.constprop.0+0xd8>
 800b616:	f8c8 1000 	str.w	r1, [r8]
 800b61a:	e794      	b.n	800b546 <_strtol_l.constprop.0+0x1a>
 800b61c:	08012cb9 	.word	0x08012cb9

0800b620 <_strtol_r>:
 800b620:	f7ff bf84 	b.w	800b52c <_strtol_l.constprop.0>

0800b624 <strtol>:
 800b624:	4613      	mov	r3, r2
 800b626:	460a      	mov	r2, r1
 800b628:	4601      	mov	r1, r0
 800b62a:	4802      	ldr	r0, [pc, #8]	@ (800b634 <strtol+0x10>)
 800b62c:	6800      	ldr	r0, [r0, #0]
 800b62e:	f7ff bf7d 	b.w	800b52c <_strtol_l.constprop.0>
 800b632:	bf00      	nop
 800b634:	200001bc 	.word	0x200001bc

0800b638 <__cvt>:
 800b638:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b63c:	ec57 6b10 	vmov	r6, r7, d0
 800b640:	2f00      	cmp	r7, #0
 800b642:	460c      	mov	r4, r1
 800b644:	4619      	mov	r1, r3
 800b646:	463b      	mov	r3, r7
 800b648:	bfbb      	ittet	lt
 800b64a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800b64e:	461f      	movlt	r7, r3
 800b650:	2300      	movge	r3, #0
 800b652:	232d      	movlt	r3, #45	@ 0x2d
 800b654:	700b      	strb	r3, [r1, #0]
 800b656:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b658:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800b65c:	4691      	mov	r9, r2
 800b65e:	f023 0820 	bic.w	r8, r3, #32
 800b662:	bfbc      	itt	lt
 800b664:	4632      	movlt	r2, r6
 800b666:	4616      	movlt	r6, r2
 800b668:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800b66c:	d005      	beq.n	800b67a <__cvt+0x42>
 800b66e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800b672:	d100      	bne.n	800b676 <__cvt+0x3e>
 800b674:	3401      	adds	r4, #1
 800b676:	2102      	movs	r1, #2
 800b678:	e000      	b.n	800b67c <__cvt+0x44>
 800b67a:	2103      	movs	r1, #3
 800b67c:	ab03      	add	r3, sp, #12
 800b67e:	9301      	str	r3, [sp, #4]
 800b680:	ab02      	add	r3, sp, #8
 800b682:	9300      	str	r3, [sp, #0]
 800b684:	ec47 6b10 	vmov	d0, r6, r7
 800b688:	4653      	mov	r3, sl
 800b68a:	4622      	mov	r2, r4
 800b68c:	f001 ff00 	bl	800d490 <_dtoa_r>
 800b690:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800b694:	4605      	mov	r5, r0
 800b696:	d119      	bne.n	800b6cc <__cvt+0x94>
 800b698:	f019 0f01 	tst.w	r9, #1
 800b69c:	d00e      	beq.n	800b6bc <__cvt+0x84>
 800b69e:	eb00 0904 	add.w	r9, r0, r4
 800b6a2:	2200      	movs	r2, #0
 800b6a4:	2300      	movs	r3, #0
 800b6a6:	4630      	mov	r0, r6
 800b6a8:	4639      	mov	r1, r7
 800b6aa:	f7f5 fa1d 	bl	8000ae8 <__aeabi_dcmpeq>
 800b6ae:	b108      	cbz	r0, 800b6b4 <__cvt+0x7c>
 800b6b0:	f8cd 900c 	str.w	r9, [sp, #12]
 800b6b4:	2230      	movs	r2, #48	@ 0x30
 800b6b6:	9b03      	ldr	r3, [sp, #12]
 800b6b8:	454b      	cmp	r3, r9
 800b6ba:	d31e      	bcc.n	800b6fa <__cvt+0xc2>
 800b6bc:	9b03      	ldr	r3, [sp, #12]
 800b6be:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b6c0:	1b5b      	subs	r3, r3, r5
 800b6c2:	4628      	mov	r0, r5
 800b6c4:	6013      	str	r3, [r2, #0]
 800b6c6:	b004      	add	sp, #16
 800b6c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b6cc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800b6d0:	eb00 0904 	add.w	r9, r0, r4
 800b6d4:	d1e5      	bne.n	800b6a2 <__cvt+0x6a>
 800b6d6:	7803      	ldrb	r3, [r0, #0]
 800b6d8:	2b30      	cmp	r3, #48	@ 0x30
 800b6da:	d10a      	bne.n	800b6f2 <__cvt+0xba>
 800b6dc:	2200      	movs	r2, #0
 800b6de:	2300      	movs	r3, #0
 800b6e0:	4630      	mov	r0, r6
 800b6e2:	4639      	mov	r1, r7
 800b6e4:	f7f5 fa00 	bl	8000ae8 <__aeabi_dcmpeq>
 800b6e8:	b918      	cbnz	r0, 800b6f2 <__cvt+0xba>
 800b6ea:	f1c4 0401 	rsb	r4, r4, #1
 800b6ee:	f8ca 4000 	str.w	r4, [sl]
 800b6f2:	f8da 3000 	ldr.w	r3, [sl]
 800b6f6:	4499      	add	r9, r3
 800b6f8:	e7d3      	b.n	800b6a2 <__cvt+0x6a>
 800b6fa:	1c59      	adds	r1, r3, #1
 800b6fc:	9103      	str	r1, [sp, #12]
 800b6fe:	701a      	strb	r2, [r3, #0]
 800b700:	e7d9      	b.n	800b6b6 <__cvt+0x7e>

0800b702 <__exponent>:
 800b702:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b704:	2900      	cmp	r1, #0
 800b706:	bfba      	itte	lt
 800b708:	4249      	neglt	r1, r1
 800b70a:	232d      	movlt	r3, #45	@ 0x2d
 800b70c:	232b      	movge	r3, #43	@ 0x2b
 800b70e:	2909      	cmp	r1, #9
 800b710:	7002      	strb	r2, [r0, #0]
 800b712:	7043      	strb	r3, [r0, #1]
 800b714:	dd29      	ble.n	800b76a <__exponent+0x68>
 800b716:	f10d 0307 	add.w	r3, sp, #7
 800b71a:	461d      	mov	r5, r3
 800b71c:	270a      	movs	r7, #10
 800b71e:	461a      	mov	r2, r3
 800b720:	fbb1 f6f7 	udiv	r6, r1, r7
 800b724:	fb07 1416 	mls	r4, r7, r6, r1
 800b728:	3430      	adds	r4, #48	@ 0x30
 800b72a:	f802 4c01 	strb.w	r4, [r2, #-1]
 800b72e:	460c      	mov	r4, r1
 800b730:	2c63      	cmp	r4, #99	@ 0x63
 800b732:	f103 33ff 	add.w	r3, r3, #4294967295
 800b736:	4631      	mov	r1, r6
 800b738:	dcf1      	bgt.n	800b71e <__exponent+0x1c>
 800b73a:	3130      	adds	r1, #48	@ 0x30
 800b73c:	1e94      	subs	r4, r2, #2
 800b73e:	f803 1c01 	strb.w	r1, [r3, #-1]
 800b742:	1c41      	adds	r1, r0, #1
 800b744:	4623      	mov	r3, r4
 800b746:	42ab      	cmp	r3, r5
 800b748:	d30a      	bcc.n	800b760 <__exponent+0x5e>
 800b74a:	f10d 0309 	add.w	r3, sp, #9
 800b74e:	1a9b      	subs	r3, r3, r2
 800b750:	42ac      	cmp	r4, r5
 800b752:	bf88      	it	hi
 800b754:	2300      	movhi	r3, #0
 800b756:	3302      	adds	r3, #2
 800b758:	4403      	add	r3, r0
 800b75a:	1a18      	subs	r0, r3, r0
 800b75c:	b003      	add	sp, #12
 800b75e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b760:	f813 6b01 	ldrb.w	r6, [r3], #1
 800b764:	f801 6f01 	strb.w	r6, [r1, #1]!
 800b768:	e7ed      	b.n	800b746 <__exponent+0x44>
 800b76a:	2330      	movs	r3, #48	@ 0x30
 800b76c:	3130      	adds	r1, #48	@ 0x30
 800b76e:	7083      	strb	r3, [r0, #2]
 800b770:	70c1      	strb	r1, [r0, #3]
 800b772:	1d03      	adds	r3, r0, #4
 800b774:	e7f1      	b.n	800b75a <__exponent+0x58>
	...

0800b778 <_printf_float>:
 800b778:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b77c:	b08d      	sub	sp, #52	@ 0x34
 800b77e:	460c      	mov	r4, r1
 800b780:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800b784:	4616      	mov	r6, r2
 800b786:	461f      	mov	r7, r3
 800b788:	4605      	mov	r5, r0
 800b78a:	f001 fd47 	bl	800d21c <_localeconv_r>
 800b78e:	6803      	ldr	r3, [r0, #0]
 800b790:	9304      	str	r3, [sp, #16]
 800b792:	4618      	mov	r0, r3
 800b794:	f7f4 fd7c 	bl	8000290 <strlen>
 800b798:	2300      	movs	r3, #0
 800b79a:	930a      	str	r3, [sp, #40]	@ 0x28
 800b79c:	f8d8 3000 	ldr.w	r3, [r8]
 800b7a0:	9005      	str	r0, [sp, #20]
 800b7a2:	3307      	adds	r3, #7
 800b7a4:	f023 0307 	bic.w	r3, r3, #7
 800b7a8:	f103 0208 	add.w	r2, r3, #8
 800b7ac:	f894 a018 	ldrb.w	sl, [r4, #24]
 800b7b0:	f8d4 b000 	ldr.w	fp, [r4]
 800b7b4:	f8c8 2000 	str.w	r2, [r8]
 800b7b8:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b7bc:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800b7c0:	9307      	str	r3, [sp, #28]
 800b7c2:	f8cd 8018 	str.w	r8, [sp, #24]
 800b7c6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800b7ca:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b7ce:	4b9c      	ldr	r3, [pc, #624]	@ (800ba40 <_printf_float+0x2c8>)
 800b7d0:	f04f 32ff 	mov.w	r2, #4294967295
 800b7d4:	f7f5 f9ba 	bl	8000b4c <__aeabi_dcmpun>
 800b7d8:	bb70      	cbnz	r0, 800b838 <_printf_float+0xc0>
 800b7da:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b7de:	4b98      	ldr	r3, [pc, #608]	@ (800ba40 <_printf_float+0x2c8>)
 800b7e0:	f04f 32ff 	mov.w	r2, #4294967295
 800b7e4:	f7f5 f994 	bl	8000b10 <__aeabi_dcmple>
 800b7e8:	bb30      	cbnz	r0, 800b838 <_printf_float+0xc0>
 800b7ea:	2200      	movs	r2, #0
 800b7ec:	2300      	movs	r3, #0
 800b7ee:	4640      	mov	r0, r8
 800b7f0:	4649      	mov	r1, r9
 800b7f2:	f7f5 f983 	bl	8000afc <__aeabi_dcmplt>
 800b7f6:	b110      	cbz	r0, 800b7fe <_printf_float+0x86>
 800b7f8:	232d      	movs	r3, #45	@ 0x2d
 800b7fa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b7fe:	4a91      	ldr	r2, [pc, #580]	@ (800ba44 <_printf_float+0x2cc>)
 800b800:	4b91      	ldr	r3, [pc, #580]	@ (800ba48 <_printf_float+0x2d0>)
 800b802:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800b806:	bf94      	ite	ls
 800b808:	4690      	movls	r8, r2
 800b80a:	4698      	movhi	r8, r3
 800b80c:	2303      	movs	r3, #3
 800b80e:	6123      	str	r3, [r4, #16]
 800b810:	f02b 0304 	bic.w	r3, fp, #4
 800b814:	6023      	str	r3, [r4, #0]
 800b816:	f04f 0900 	mov.w	r9, #0
 800b81a:	9700      	str	r7, [sp, #0]
 800b81c:	4633      	mov	r3, r6
 800b81e:	aa0b      	add	r2, sp, #44	@ 0x2c
 800b820:	4621      	mov	r1, r4
 800b822:	4628      	mov	r0, r5
 800b824:	f000 f9d2 	bl	800bbcc <_printf_common>
 800b828:	3001      	adds	r0, #1
 800b82a:	f040 808d 	bne.w	800b948 <_printf_float+0x1d0>
 800b82e:	f04f 30ff 	mov.w	r0, #4294967295
 800b832:	b00d      	add	sp, #52	@ 0x34
 800b834:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b838:	4642      	mov	r2, r8
 800b83a:	464b      	mov	r3, r9
 800b83c:	4640      	mov	r0, r8
 800b83e:	4649      	mov	r1, r9
 800b840:	f7f5 f984 	bl	8000b4c <__aeabi_dcmpun>
 800b844:	b140      	cbz	r0, 800b858 <_printf_float+0xe0>
 800b846:	464b      	mov	r3, r9
 800b848:	2b00      	cmp	r3, #0
 800b84a:	bfbc      	itt	lt
 800b84c:	232d      	movlt	r3, #45	@ 0x2d
 800b84e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800b852:	4a7e      	ldr	r2, [pc, #504]	@ (800ba4c <_printf_float+0x2d4>)
 800b854:	4b7e      	ldr	r3, [pc, #504]	@ (800ba50 <_printf_float+0x2d8>)
 800b856:	e7d4      	b.n	800b802 <_printf_float+0x8a>
 800b858:	6863      	ldr	r3, [r4, #4]
 800b85a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800b85e:	9206      	str	r2, [sp, #24]
 800b860:	1c5a      	adds	r2, r3, #1
 800b862:	d13b      	bne.n	800b8dc <_printf_float+0x164>
 800b864:	2306      	movs	r3, #6
 800b866:	6063      	str	r3, [r4, #4]
 800b868:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800b86c:	2300      	movs	r3, #0
 800b86e:	6022      	str	r2, [r4, #0]
 800b870:	9303      	str	r3, [sp, #12]
 800b872:	ab0a      	add	r3, sp, #40	@ 0x28
 800b874:	e9cd a301 	strd	sl, r3, [sp, #4]
 800b878:	ab09      	add	r3, sp, #36	@ 0x24
 800b87a:	9300      	str	r3, [sp, #0]
 800b87c:	6861      	ldr	r1, [r4, #4]
 800b87e:	ec49 8b10 	vmov	d0, r8, r9
 800b882:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800b886:	4628      	mov	r0, r5
 800b888:	f7ff fed6 	bl	800b638 <__cvt>
 800b88c:	9b06      	ldr	r3, [sp, #24]
 800b88e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b890:	2b47      	cmp	r3, #71	@ 0x47
 800b892:	4680      	mov	r8, r0
 800b894:	d129      	bne.n	800b8ea <_printf_float+0x172>
 800b896:	1cc8      	adds	r0, r1, #3
 800b898:	db02      	blt.n	800b8a0 <_printf_float+0x128>
 800b89a:	6863      	ldr	r3, [r4, #4]
 800b89c:	4299      	cmp	r1, r3
 800b89e:	dd41      	ble.n	800b924 <_printf_float+0x1ac>
 800b8a0:	f1aa 0a02 	sub.w	sl, sl, #2
 800b8a4:	fa5f fa8a 	uxtb.w	sl, sl
 800b8a8:	3901      	subs	r1, #1
 800b8aa:	4652      	mov	r2, sl
 800b8ac:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800b8b0:	9109      	str	r1, [sp, #36]	@ 0x24
 800b8b2:	f7ff ff26 	bl	800b702 <__exponent>
 800b8b6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b8b8:	1813      	adds	r3, r2, r0
 800b8ba:	2a01      	cmp	r2, #1
 800b8bc:	4681      	mov	r9, r0
 800b8be:	6123      	str	r3, [r4, #16]
 800b8c0:	dc02      	bgt.n	800b8c8 <_printf_float+0x150>
 800b8c2:	6822      	ldr	r2, [r4, #0]
 800b8c4:	07d2      	lsls	r2, r2, #31
 800b8c6:	d501      	bpl.n	800b8cc <_printf_float+0x154>
 800b8c8:	3301      	adds	r3, #1
 800b8ca:	6123      	str	r3, [r4, #16]
 800b8cc:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	d0a2      	beq.n	800b81a <_printf_float+0xa2>
 800b8d4:	232d      	movs	r3, #45	@ 0x2d
 800b8d6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b8da:	e79e      	b.n	800b81a <_printf_float+0xa2>
 800b8dc:	9a06      	ldr	r2, [sp, #24]
 800b8de:	2a47      	cmp	r2, #71	@ 0x47
 800b8e0:	d1c2      	bne.n	800b868 <_printf_float+0xf0>
 800b8e2:	2b00      	cmp	r3, #0
 800b8e4:	d1c0      	bne.n	800b868 <_printf_float+0xf0>
 800b8e6:	2301      	movs	r3, #1
 800b8e8:	e7bd      	b.n	800b866 <_printf_float+0xee>
 800b8ea:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800b8ee:	d9db      	bls.n	800b8a8 <_printf_float+0x130>
 800b8f0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800b8f4:	d118      	bne.n	800b928 <_printf_float+0x1b0>
 800b8f6:	2900      	cmp	r1, #0
 800b8f8:	6863      	ldr	r3, [r4, #4]
 800b8fa:	dd0b      	ble.n	800b914 <_printf_float+0x19c>
 800b8fc:	6121      	str	r1, [r4, #16]
 800b8fe:	b913      	cbnz	r3, 800b906 <_printf_float+0x18e>
 800b900:	6822      	ldr	r2, [r4, #0]
 800b902:	07d0      	lsls	r0, r2, #31
 800b904:	d502      	bpl.n	800b90c <_printf_float+0x194>
 800b906:	3301      	adds	r3, #1
 800b908:	440b      	add	r3, r1
 800b90a:	6123      	str	r3, [r4, #16]
 800b90c:	65a1      	str	r1, [r4, #88]	@ 0x58
 800b90e:	f04f 0900 	mov.w	r9, #0
 800b912:	e7db      	b.n	800b8cc <_printf_float+0x154>
 800b914:	b913      	cbnz	r3, 800b91c <_printf_float+0x1a4>
 800b916:	6822      	ldr	r2, [r4, #0]
 800b918:	07d2      	lsls	r2, r2, #31
 800b91a:	d501      	bpl.n	800b920 <_printf_float+0x1a8>
 800b91c:	3302      	adds	r3, #2
 800b91e:	e7f4      	b.n	800b90a <_printf_float+0x192>
 800b920:	2301      	movs	r3, #1
 800b922:	e7f2      	b.n	800b90a <_printf_float+0x192>
 800b924:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800b928:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b92a:	4299      	cmp	r1, r3
 800b92c:	db05      	blt.n	800b93a <_printf_float+0x1c2>
 800b92e:	6823      	ldr	r3, [r4, #0]
 800b930:	6121      	str	r1, [r4, #16]
 800b932:	07d8      	lsls	r0, r3, #31
 800b934:	d5ea      	bpl.n	800b90c <_printf_float+0x194>
 800b936:	1c4b      	adds	r3, r1, #1
 800b938:	e7e7      	b.n	800b90a <_printf_float+0x192>
 800b93a:	2900      	cmp	r1, #0
 800b93c:	bfd4      	ite	le
 800b93e:	f1c1 0202 	rsble	r2, r1, #2
 800b942:	2201      	movgt	r2, #1
 800b944:	4413      	add	r3, r2
 800b946:	e7e0      	b.n	800b90a <_printf_float+0x192>
 800b948:	6823      	ldr	r3, [r4, #0]
 800b94a:	055a      	lsls	r2, r3, #21
 800b94c:	d407      	bmi.n	800b95e <_printf_float+0x1e6>
 800b94e:	6923      	ldr	r3, [r4, #16]
 800b950:	4642      	mov	r2, r8
 800b952:	4631      	mov	r1, r6
 800b954:	4628      	mov	r0, r5
 800b956:	47b8      	blx	r7
 800b958:	3001      	adds	r0, #1
 800b95a:	d12b      	bne.n	800b9b4 <_printf_float+0x23c>
 800b95c:	e767      	b.n	800b82e <_printf_float+0xb6>
 800b95e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800b962:	f240 80dd 	bls.w	800bb20 <_printf_float+0x3a8>
 800b966:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800b96a:	2200      	movs	r2, #0
 800b96c:	2300      	movs	r3, #0
 800b96e:	f7f5 f8bb 	bl	8000ae8 <__aeabi_dcmpeq>
 800b972:	2800      	cmp	r0, #0
 800b974:	d033      	beq.n	800b9de <_printf_float+0x266>
 800b976:	4a37      	ldr	r2, [pc, #220]	@ (800ba54 <_printf_float+0x2dc>)
 800b978:	2301      	movs	r3, #1
 800b97a:	4631      	mov	r1, r6
 800b97c:	4628      	mov	r0, r5
 800b97e:	47b8      	blx	r7
 800b980:	3001      	adds	r0, #1
 800b982:	f43f af54 	beq.w	800b82e <_printf_float+0xb6>
 800b986:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800b98a:	4543      	cmp	r3, r8
 800b98c:	db02      	blt.n	800b994 <_printf_float+0x21c>
 800b98e:	6823      	ldr	r3, [r4, #0]
 800b990:	07d8      	lsls	r0, r3, #31
 800b992:	d50f      	bpl.n	800b9b4 <_printf_float+0x23c>
 800b994:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b998:	4631      	mov	r1, r6
 800b99a:	4628      	mov	r0, r5
 800b99c:	47b8      	blx	r7
 800b99e:	3001      	adds	r0, #1
 800b9a0:	f43f af45 	beq.w	800b82e <_printf_float+0xb6>
 800b9a4:	f04f 0900 	mov.w	r9, #0
 800b9a8:	f108 38ff 	add.w	r8, r8, #4294967295
 800b9ac:	f104 0a1a 	add.w	sl, r4, #26
 800b9b0:	45c8      	cmp	r8, r9
 800b9b2:	dc09      	bgt.n	800b9c8 <_printf_float+0x250>
 800b9b4:	6823      	ldr	r3, [r4, #0]
 800b9b6:	079b      	lsls	r3, r3, #30
 800b9b8:	f100 8103 	bmi.w	800bbc2 <_printf_float+0x44a>
 800b9bc:	68e0      	ldr	r0, [r4, #12]
 800b9be:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b9c0:	4298      	cmp	r0, r3
 800b9c2:	bfb8      	it	lt
 800b9c4:	4618      	movlt	r0, r3
 800b9c6:	e734      	b.n	800b832 <_printf_float+0xba>
 800b9c8:	2301      	movs	r3, #1
 800b9ca:	4652      	mov	r2, sl
 800b9cc:	4631      	mov	r1, r6
 800b9ce:	4628      	mov	r0, r5
 800b9d0:	47b8      	blx	r7
 800b9d2:	3001      	adds	r0, #1
 800b9d4:	f43f af2b 	beq.w	800b82e <_printf_float+0xb6>
 800b9d8:	f109 0901 	add.w	r9, r9, #1
 800b9dc:	e7e8      	b.n	800b9b0 <_printf_float+0x238>
 800b9de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b9e0:	2b00      	cmp	r3, #0
 800b9e2:	dc39      	bgt.n	800ba58 <_printf_float+0x2e0>
 800b9e4:	4a1b      	ldr	r2, [pc, #108]	@ (800ba54 <_printf_float+0x2dc>)
 800b9e6:	2301      	movs	r3, #1
 800b9e8:	4631      	mov	r1, r6
 800b9ea:	4628      	mov	r0, r5
 800b9ec:	47b8      	blx	r7
 800b9ee:	3001      	adds	r0, #1
 800b9f0:	f43f af1d 	beq.w	800b82e <_printf_float+0xb6>
 800b9f4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800b9f8:	ea59 0303 	orrs.w	r3, r9, r3
 800b9fc:	d102      	bne.n	800ba04 <_printf_float+0x28c>
 800b9fe:	6823      	ldr	r3, [r4, #0]
 800ba00:	07d9      	lsls	r1, r3, #31
 800ba02:	d5d7      	bpl.n	800b9b4 <_printf_float+0x23c>
 800ba04:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ba08:	4631      	mov	r1, r6
 800ba0a:	4628      	mov	r0, r5
 800ba0c:	47b8      	blx	r7
 800ba0e:	3001      	adds	r0, #1
 800ba10:	f43f af0d 	beq.w	800b82e <_printf_float+0xb6>
 800ba14:	f04f 0a00 	mov.w	sl, #0
 800ba18:	f104 0b1a 	add.w	fp, r4, #26
 800ba1c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ba1e:	425b      	negs	r3, r3
 800ba20:	4553      	cmp	r3, sl
 800ba22:	dc01      	bgt.n	800ba28 <_printf_float+0x2b0>
 800ba24:	464b      	mov	r3, r9
 800ba26:	e793      	b.n	800b950 <_printf_float+0x1d8>
 800ba28:	2301      	movs	r3, #1
 800ba2a:	465a      	mov	r2, fp
 800ba2c:	4631      	mov	r1, r6
 800ba2e:	4628      	mov	r0, r5
 800ba30:	47b8      	blx	r7
 800ba32:	3001      	adds	r0, #1
 800ba34:	f43f aefb 	beq.w	800b82e <_printf_float+0xb6>
 800ba38:	f10a 0a01 	add.w	sl, sl, #1
 800ba3c:	e7ee      	b.n	800ba1c <_printf_float+0x2a4>
 800ba3e:	bf00      	nop
 800ba40:	7fefffff 	.word	0x7fefffff
 800ba44:	08012db9 	.word	0x08012db9
 800ba48:	08012dbd 	.word	0x08012dbd
 800ba4c:	08012dc1 	.word	0x08012dc1
 800ba50:	08012dc5 	.word	0x08012dc5
 800ba54:	08012c0d 	.word	0x08012c0d
 800ba58:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800ba5a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800ba5e:	4553      	cmp	r3, sl
 800ba60:	bfa8      	it	ge
 800ba62:	4653      	movge	r3, sl
 800ba64:	2b00      	cmp	r3, #0
 800ba66:	4699      	mov	r9, r3
 800ba68:	dc36      	bgt.n	800bad8 <_printf_float+0x360>
 800ba6a:	f04f 0b00 	mov.w	fp, #0
 800ba6e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ba72:	f104 021a 	add.w	r2, r4, #26
 800ba76:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800ba78:	9306      	str	r3, [sp, #24]
 800ba7a:	eba3 0309 	sub.w	r3, r3, r9
 800ba7e:	455b      	cmp	r3, fp
 800ba80:	dc31      	bgt.n	800bae6 <_printf_float+0x36e>
 800ba82:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ba84:	459a      	cmp	sl, r3
 800ba86:	dc3a      	bgt.n	800bafe <_printf_float+0x386>
 800ba88:	6823      	ldr	r3, [r4, #0]
 800ba8a:	07da      	lsls	r2, r3, #31
 800ba8c:	d437      	bmi.n	800bafe <_printf_float+0x386>
 800ba8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ba90:	ebaa 0903 	sub.w	r9, sl, r3
 800ba94:	9b06      	ldr	r3, [sp, #24]
 800ba96:	ebaa 0303 	sub.w	r3, sl, r3
 800ba9a:	4599      	cmp	r9, r3
 800ba9c:	bfa8      	it	ge
 800ba9e:	4699      	movge	r9, r3
 800baa0:	f1b9 0f00 	cmp.w	r9, #0
 800baa4:	dc33      	bgt.n	800bb0e <_printf_float+0x396>
 800baa6:	f04f 0800 	mov.w	r8, #0
 800baaa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800baae:	f104 0b1a 	add.w	fp, r4, #26
 800bab2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bab4:	ebaa 0303 	sub.w	r3, sl, r3
 800bab8:	eba3 0309 	sub.w	r3, r3, r9
 800babc:	4543      	cmp	r3, r8
 800babe:	f77f af79 	ble.w	800b9b4 <_printf_float+0x23c>
 800bac2:	2301      	movs	r3, #1
 800bac4:	465a      	mov	r2, fp
 800bac6:	4631      	mov	r1, r6
 800bac8:	4628      	mov	r0, r5
 800baca:	47b8      	blx	r7
 800bacc:	3001      	adds	r0, #1
 800bace:	f43f aeae 	beq.w	800b82e <_printf_float+0xb6>
 800bad2:	f108 0801 	add.w	r8, r8, #1
 800bad6:	e7ec      	b.n	800bab2 <_printf_float+0x33a>
 800bad8:	4642      	mov	r2, r8
 800bada:	4631      	mov	r1, r6
 800badc:	4628      	mov	r0, r5
 800bade:	47b8      	blx	r7
 800bae0:	3001      	adds	r0, #1
 800bae2:	d1c2      	bne.n	800ba6a <_printf_float+0x2f2>
 800bae4:	e6a3      	b.n	800b82e <_printf_float+0xb6>
 800bae6:	2301      	movs	r3, #1
 800bae8:	4631      	mov	r1, r6
 800baea:	4628      	mov	r0, r5
 800baec:	9206      	str	r2, [sp, #24]
 800baee:	47b8      	blx	r7
 800baf0:	3001      	adds	r0, #1
 800baf2:	f43f ae9c 	beq.w	800b82e <_printf_float+0xb6>
 800baf6:	9a06      	ldr	r2, [sp, #24]
 800baf8:	f10b 0b01 	add.w	fp, fp, #1
 800bafc:	e7bb      	b.n	800ba76 <_printf_float+0x2fe>
 800bafe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bb02:	4631      	mov	r1, r6
 800bb04:	4628      	mov	r0, r5
 800bb06:	47b8      	blx	r7
 800bb08:	3001      	adds	r0, #1
 800bb0a:	d1c0      	bne.n	800ba8e <_printf_float+0x316>
 800bb0c:	e68f      	b.n	800b82e <_printf_float+0xb6>
 800bb0e:	9a06      	ldr	r2, [sp, #24]
 800bb10:	464b      	mov	r3, r9
 800bb12:	4442      	add	r2, r8
 800bb14:	4631      	mov	r1, r6
 800bb16:	4628      	mov	r0, r5
 800bb18:	47b8      	blx	r7
 800bb1a:	3001      	adds	r0, #1
 800bb1c:	d1c3      	bne.n	800baa6 <_printf_float+0x32e>
 800bb1e:	e686      	b.n	800b82e <_printf_float+0xb6>
 800bb20:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800bb24:	f1ba 0f01 	cmp.w	sl, #1
 800bb28:	dc01      	bgt.n	800bb2e <_printf_float+0x3b6>
 800bb2a:	07db      	lsls	r3, r3, #31
 800bb2c:	d536      	bpl.n	800bb9c <_printf_float+0x424>
 800bb2e:	2301      	movs	r3, #1
 800bb30:	4642      	mov	r2, r8
 800bb32:	4631      	mov	r1, r6
 800bb34:	4628      	mov	r0, r5
 800bb36:	47b8      	blx	r7
 800bb38:	3001      	adds	r0, #1
 800bb3a:	f43f ae78 	beq.w	800b82e <_printf_float+0xb6>
 800bb3e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bb42:	4631      	mov	r1, r6
 800bb44:	4628      	mov	r0, r5
 800bb46:	47b8      	blx	r7
 800bb48:	3001      	adds	r0, #1
 800bb4a:	f43f ae70 	beq.w	800b82e <_printf_float+0xb6>
 800bb4e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800bb52:	2200      	movs	r2, #0
 800bb54:	2300      	movs	r3, #0
 800bb56:	f10a 3aff 	add.w	sl, sl, #4294967295
 800bb5a:	f7f4 ffc5 	bl	8000ae8 <__aeabi_dcmpeq>
 800bb5e:	b9c0      	cbnz	r0, 800bb92 <_printf_float+0x41a>
 800bb60:	4653      	mov	r3, sl
 800bb62:	f108 0201 	add.w	r2, r8, #1
 800bb66:	4631      	mov	r1, r6
 800bb68:	4628      	mov	r0, r5
 800bb6a:	47b8      	blx	r7
 800bb6c:	3001      	adds	r0, #1
 800bb6e:	d10c      	bne.n	800bb8a <_printf_float+0x412>
 800bb70:	e65d      	b.n	800b82e <_printf_float+0xb6>
 800bb72:	2301      	movs	r3, #1
 800bb74:	465a      	mov	r2, fp
 800bb76:	4631      	mov	r1, r6
 800bb78:	4628      	mov	r0, r5
 800bb7a:	47b8      	blx	r7
 800bb7c:	3001      	adds	r0, #1
 800bb7e:	f43f ae56 	beq.w	800b82e <_printf_float+0xb6>
 800bb82:	f108 0801 	add.w	r8, r8, #1
 800bb86:	45d0      	cmp	r8, sl
 800bb88:	dbf3      	blt.n	800bb72 <_printf_float+0x3fa>
 800bb8a:	464b      	mov	r3, r9
 800bb8c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800bb90:	e6df      	b.n	800b952 <_printf_float+0x1da>
 800bb92:	f04f 0800 	mov.w	r8, #0
 800bb96:	f104 0b1a 	add.w	fp, r4, #26
 800bb9a:	e7f4      	b.n	800bb86 <_printf_float+0x40e>
 800bb9c:	2301      	movs	r3, #1
 800bb9e:	4642      	mov	r2, r8
 800bba0:	e7e1      	b.n	800bb66 <_printf_float+0x3ee>
 800bba2:	2301      	movs	r3, #1
 800bba4:	464a      	mov	r2, r9
 800bba6:	4631      	mov	r1, r6
 800bba8:	4628      	mov	r0, r5
 800bbaa:	47b8      	blx	r7
 800bbac:	3001      	adds	r0, #1
 800bbae:	f43f ae3e 	beq.w	800b82e <_printf_float+0xb6>
 800bbb2:	f108 0801 	add.w	r8, r8, #1
 800bbb6:	68e3      	ldr	r3, [r4, #12]
 800bbb8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800bbba:	1a5b      	subs	r3, r3, r1
 800bbbc:	4543      	cmp	r3, r8
 800bbbe:	dcf0      	bgt.n	800bba2 <_printf_float+0x42a>
 800bbc0:	e6fc      	b.n	800b9bc <_printf_float+0x244>
 800bbc2:	f04f 0800 	mov.w	r8, #0
 800bbc6:	f104 0919 	add.w	r9, r4, #25
 800bbca:	e7f4      	b.n	800bbb6 <_printf_float+0x43e>

0800bbcc <_printf_common>:
 800bbcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bbd0:	4616      	mov	r6, r2
 800bbd2:	4698      	mov	r8, r3
 800bbd4:	688a      	ldr	r2, [r1, #8]
 800bbd6:	690b      	ldr	r3, [r1, #16]
 800bbd8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800bbdc:	4293      	cmp	r3, r2
 800bbde:	bfb8      	it	lt
 800bbe0:	4613      	movlt	r3, r2
 800bbe2:	6033      	str	r3, [r6, #0]
 800bbe4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800bbe8:	4607      	mov	r7, r0
 800bbea:	460c      	mov	r4, r1
 800bbec:	b10a      	cbz	r2, 800bbf2 <_printf_common+0x26>
 800bbee:	3301      	adds	r3, #1
 800bbf0:	6033      	str	r3, [r6, #0]
 800bbf2:	6823      	ldr	r3, [r4, #0]
 800bbf4:	0699      	lsls	r1, r3, #26
 800bbf6:	bf42      	ittt	mi
 800bbf8:	6833      	ldrmi	r3, [r6, #0]
 800bbfa:	3302      	addmi	r3, #2
 800bbfc:	6033      	strmi	r3, [r6, #0]
 800bbfe:	6825      	ldr	r5, [r4, #0]
 800bc00:	f015 0506 	ands.w	r5, r5, #6
 800bc04:	d106      	bne.n	800bc14 <_printf_common+0x48>
 800bc06:	f104 0a19 	add.w	sl, r4, #25
 800bc0a:	68e3      	ldr	r3, [r4, #12]
 800bc0c:	6832      	ldr	r2, [r6, #0]
 800bc0e:	1a9b      	subs	r3, r3, r2
 800bc10:	42ab      	cmp	r3, r5
 800bc12:	dc26      	bgt.n	800bc62 <_printf_common+0x96>
 800bc14:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800bc18:	6822      	ldr	r2, [r4, #0]
 800bc1a:	3b00      	subs	r3, #0
 800bc1c:	bf18      	it	ne
 800bc1e:	2301      	movne	r3, #1
 800bc20:	0692      	lsls	r2, r2, #26
 800bc22:	d42b      	bmi.n	800bc7c <_printf_common+0xb0>
 800bc24:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800bc28:	4641      	mov	r1, r8
 800bc2a:	4638      	mov	r0, r7
 800bc2c:	47c8      	blx	r9
 800bc2e:	3001      	adds	r0, #1
 800bc30:	d01e      	beq.n	800bc70 <_printf_common+0xa4>
 800bc32:	6823      	ldr	r3, [r4, #0]
 800bc34:	6922      	ldr	r2, [r4, #16]
 800bc36:	f003 0306 	and.w	r3, r3, #6
 800bc3a:	2b04      	cmp	r3, #4
 800bc3c:	bf02      	ittt	eq
 800bc3e:	68e5      	ldreq	r5, [r4, #12]
 800bc40:	6833      	ldreq	r3, [r6, #0]
 800bc42:	1aed      	subeq	r5, r5, r3
 800bc44:	68a3      	ldr	r3, [r4, #8]
 800bc46:	bf0c      	ite	eq
 800bc48:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bc4c:	2500      	movne	r5, #0
 800bc4e:	4293      	cmp	r3, r2
 800bc50:	bfc4      	itt	gt
 800bc52:	1a9b      	subgt	r3, r3, r2
 800bc54:	18ed      	addgt	r5, r5, r3
 800bc56:	2600      	movs	r6, #0
 800bc58:	341a      	adds	r4, #26
 800bc5a:	42b5      	cmp	r5, r6
 800bc5c:	d11a      	bne.n	800bc94 <_printf_common+0xc8>
 800bc5e:	2000      	movs	r0, #0
 800bc60:	e008      	b.n	800bc74 <_printf_common+0xa8>
 800bc62:	2301      	movs	r3, #1
 800bc64:	4652      	mov	r2, sl
 800bc66:	4641      	mov	r1, r8
 800bc68:	4638      	mov	r0, r7
 800bc6a:	47c8      	blx	r9
 800bc6c:	3001      	adds	r0, #1
 800bc6e:	d103      	bne.n	800bc78 <_printf_common+0xac>
 800bc70:	f04f 30ff 	mov.w	r0, #4294967295
 800bc74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bc78:	3501      	adds	r5, #1
 800bc7a:	e7c6      	b.n	800bc0a <_printf_common+0x3e>
 800bc7c:	18e1      	adds	r1, r4, r3
 800bc7e:	1c5a      	adds	r2, r3, #1
 800bc80:	2030      	movs	r0, #48	@ 0x30
 800bc82:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800bc86:	4422      	add	r2, r4
 800bc88:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800bc8c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800bc90:	3302      	adds	r3, #2
 800bc92:	e7c7      	b.n	800bc24 <_printf_common+0x58>
 800bc94:	2301      	movs	r3, #1
 800bc96:	4622      	mov	r2, r4
 800bc98:	4641      	mov	r1, r8
 800bc9a:	4638      	mov	r0, r7
 800bc9c:	47c8      	blx	r9
 800bc9e:	3001      	adds	r0, #1
 800bca0:	d0e6      	beq.n	800bc70 <_printf_common+0xa4>
 800bca2:	3601      	adds	r6, #1
 800bca4:	e7d9      	b.n	800bc5a <_printf_common+0x8e>
	...

0800bca8 <_printf_i>:
 800bca8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bcac:	7e0f      	ldrb	r7, [r1, #24]
 800bcae:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800bcb0:	2f78      	cmp	r7, #120	@ 0x78
 800bcb2:	4691      	mov	r9, r2
 800bcb4:	4680      	mov	r8, r0
 800bcb6:	460c      	mov	r4, r1
 800bcb8:	469a      	mov	sl, r3
 800bcba:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800bcbe:	d807      	bhi.n	800bcd0 <_printf_i+0x28>
 800bcc0:	2f62      	cmp	r7, #98	@ 0x62
 800bcc2:	d80a      	bhi.n	800bcda <_printf_i+0x32>
 800bcc4:	2f00      	cmp	r7, #0
 800bcc6:	f000 80d2 	beq.w	800be6e <_printf_i+0x1c6>
 800bcca:	2f58      	cmp	r7, #88	@ 0x58
 800bccc:	f000 80b9 	beq.w	800be42 <_printf_i+0x19a>
 800bcd0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800bcd4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800bcd8:	e03a      	b.n	800bd50 <_printf_i+0xa8>
 800bcda:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800bcde:	2b15      	cmp	r3, #21
 800bce0:	d8f6      	bhi.n	800bcd0 <_printf_i+0x28>
 800bce2:	a101      	add	r1, pc, #4	@ (adr r1, 800bce8 <_printf_i+0x40>)
 800bce4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800bce8:	0800bd41 	.word	0x0800bd41
 800bcec:	0800bd55 	.word	0x0800bd55
 800bcf0:	0800bcd1 	.word	0x0800bcd1
 800bcf4:	0800bcd1 	.word	0x0800bcd1
 800bcf8:	0800bcd1 	.word	0x0800bcd1
 800bcfc:	0800bcd1 	.word	0x0800bcd1
 800bd00:	0800bd55 	.word	0x0800bd55
 800bd04:	0800bcd1 	.word	0x0800bcd1
 800bd08:	0800bcd1 	.word	0x0800bcd1
 800bd0c:	0800bcd1 	.word	0x0800bcd1
 800bd10:	0800bcd1 	.word	0x0800bcd1
 800bd14:	0800be55 	.word	0x0800be55
 800bd18:	0800bd7f 	.word	0x0800bd7f
 800bd1c:	0800be0f 	.word	0x0800be0f
 800bd20:	0800bcd1 	.word	0x0800bcd1
 800bd24:	0800bcd1 	.word	0x0800bcd1
 800bd28:	0800be77 	.word	0x0800be77
 800bd2c:	0800bcd1 	.word	0x0800bcd1
 800bd30:	0800bd7f 	.word	0x0800bd7f
 800bd34:	0800bcd1 	.word	0x0800bcd1
 800bd38:	0800bcd1 	.word	0x0800bcd1
 800bd3c:	0800be17 	.word	0x0800be17
 800bd40:	6833      	ldr	r3, [r6, #0]
 800bd42:	1d1a      	adds	r2, r3, #4
 800bd44:	681b      	ldr	r3, [r3, #0]
 800bd46:	6032      	str	r2, [r6, #0]
 800bd48:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800bd4c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800bd50:	2301      	movs	r3, #1
 800bd52:	e09d      	b.n	800be90 <_printf_i+0x1e8>
 800bd54:	6833      	ldr	r3, [r6, #0]
 800bd56:	6820      	ldr	r0, [r4, #0]
 800bd58:	1d19      	adds	r1, r3, #4
 800bd5a:	6031      	str	r1, [r6, #0]
 800bd5c:	0606      	lsls	r6, r0, #24
 800bd5e:	d501      	bpl.n	800bd64 <_printf_i+0xbc>
 800bd60:	681d      	ldr	r5, [r3, #0]
 800bd62:	e003      	b.n	800bd6c <_printf_i+0xc4>
 800bd64:	0645      	lsls	r5, r0, #25
 800bd66:	d5fb      	bpl.n	800bd60 <_printf_i+0xb8>
 800bd68:	f9b3 5000 	ldrsh.w	r5, [r3]
 800bd6c:	2d00      	cmp	r5, #0
 800bd6e:	da03      	bge.n	800bd78 <_printf_i+0xd0>
 800bd70:	232d      	movs	r3, #45	@ 0x2d
 800bd72:	426d      	negs	r5, r5
 800bd74:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bd78:	4859      	ldr	r0, [pc, #356]	@ (800bee0 <_printf_i+0x238>)
 800bd7a:	230a      	movs	r3, #10
 800bd7c:	e011      	b.n	800bda2 <_printf_i+0xfa>
 800bd7e:	6821      	ldr	r1, [r4, #0]
 800bd80:	6833      	ldr	r3, [r6, #0]
 800bd82:	0608      	lsls	r0, r1, #24
 800bd84:	f853 5b04 	ldr.w	r5, [r3], #4
 800bd88:	d402      	bmi.n	800bd90 <_printf_i+0xe8>
 800bd8a:	0649      	lsls	r1, r1, #25
 800bd8c:	bf48      	it	mi
 800bd8e:	b2ad      	uxthmi	r5, r5
 800bd90:	2f6f      	cmp	r7, #111	@ 0x6f
 800bd92:	4853      	ldr	r0, [pc, #332]	@ (800bee0 <_printf_i+0x238>)
 800bd94:	6033      	str	r3, [r6, #0]
 800bd96:	bf14      	ite	ne
 800bd98:	230a      	movne	r3, #10
 800bd9a:	2308      	moveq	r3, #8
 800bd9c:	2100      	movs	r1, #0
 800bd9e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800bda2:	6866      	ldr	r6, [r4, #4]
 800bda4:	60a6      	str	r6, [r4, #8]
 800bda6:	2e00      	cmp	r6, #0
 800bda8:	bfa2      	ittt	ge
 800bdaa:	6821      	ldrge	r1, [r4, #0]
 800bdac:	f021 0104 	bicge.w	r1, r1, #4
 800bdb0:	6021      	strge	r1, [r4, #0]
 800bdb2:	b90d      	cbnz	r5, 800bdb8 <_printf_i+0x110>
 800bdb4:	2e00      	cmp	r6, #0
 800bdb6:	d04b      	beq.n	800be50 <_printf_i+0x1a8>
 800bdb8:	4616      	mov	r6, r2
 800bdba:	fbb5 f1f3 	udiv	r1, r5, r3
 800bdbe:	fb03 5711 	mls	r7, r3, r1, r5
 800bdc2:	5dc7      	ldrb	r7, [r0, r7]
 800bdc4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800bdc8:	462f      	mov	r7, r5
 800bdca:	42bb      	cmp	r3, r7
 800bdcc:	460d      	mov	r5, r1
 800bdce:	d9f4      	bls.n	800bdba <_printf_i+0x112>
 800bdd0:	2b08      	cmp	r3, #8
 800bdd2:	d10b      	bne.n	800bdec <_printf_i+0x144>
 800bdd4:	6823      	ldr	r3, [r4, #0]
 800bdd6:	07df      	lsls	r7, r3, #31
 800bdd8:	d508      	bpl.n	800bdec <_printf_i+0x144>
 800bdda:	6923      	ldr	r3, [r4, #16]
 800bddc:	6861      	ldr	r1, [r4, #4]
 800bdde:	4299      	cmp	r1, r3
 800bde0:	bfde      	ittt	le
 800bde2:	2330      	movle	r3, #48	@ 0x30
 800bde4:	f806 3c01 	strble.w	r3, [r6, #-1]
 800bde8:	f106 36ff 	addle.w	r6, r6, #4294967295
 800bdec:	1b92      	subs	r2, r2, r6
 800bdee:	6122      	str	r2, [r4, #16]
 800bdf0:	f8cd a000 	str.w	sl, [sp]
 800bdf4:	464b      	mov	r3, r9
 800bdf6:	aa03      	add	r2, sp, #12
 800bdf8:	4621      	mov	r1, r4
 800bdfa:	4640      	mov	r0, r8
 800bdfc:	f7ff fee6 	bl	800bbcc <_printf_common>
 800be00:	3001      	adds	r0, #1
 800be02:	d14a      	bne.n	800be9a <_printf_i+0x1f2>
 800be04:	f04f 30ff 	mov.w	r0, #4294967295
 800be08:	b004      	add	sp, #16
 800be0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800be0e:	6823      	ldr	r3, [r4, #0]
 800be10:	f043 0320 	orr.w	r3, r3, #32
 800be14:	6023      	str	r3, [r4, #0]
 800be16:	4833      	ldr	r0, [pc, #204]	@ (800bee4 <_printf_i+0x23c>)
 800be18:	2778      	movs	r7, #120	@ 0x78
 800be1a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800be1e:	6823      	ldr	r3, [r4, #0]
 800be20:	6831      	ldr	r1, [r6, #0]
 800be22:	061f      	lsls	r7, r3, #24
 800be24:	f851 5b04 	ldr.w	r5, [r1], #4
 800be28:	d402      	bmi.n	800be30 <_printf_i+0x188>
 800be2a:	065f      	lsls	r7, r3, #25
 800be2c:	bf48      	it	mi
 800be2e:	b2ad      	uxthmi	r5, r5
 800be30:	6031      	str	r1, [r6, #0]
 800be32:	07d9      	lsls	r1, r3, #31
 800be34:	bf44      	itt	mi
 800be36:	f043 0320 	orrmi.w	r3, r3, #32
 800be3a:	6023      	strmi	r3, [r4, #0]
 800be3c:	b11d      	cbz	r5, 800be46 <_printf_i+0x19e>
 800be3e:	2310      	movs	r3, #16
 800be40:	e7ac      	b.n	800bd9c <_printf_i+0xf4>
 800be42:	4827      	ldr	r0, [pc, #156]	@ (800bee0 <_printf_i+0x238>)
 800be44:	e7e9      	b.n	800be1a <_printf_i+0x172>
 800be46:	6823      	ldr	r3, [r4, #0]
 800be48:	f023 0320 	bic.w	r3, r3, #32
 800be4c:	6023      	str	r3, [r4, #0]
 800be4e:	e7f6      	b.n	800be3e <_printf_i+0x196>
 800be50:	4616      	mov	r6, r2
 800be52:	e7bd      	b.n	800bdd0 <_printf_i+0x128>
 800be54:	6833      	ldr	r3, [r6, #0]
 800be56:	6825      	ldr	r5, [r4, #0]
 800be58:	6961      	ldr	r1, [r4, #20]
 800be5a:	1d18      	adds	r0, r3, #4
 800be5c:	6030      	str	r0, [r6, #0]
 800be5e:	062e      	lsls	r6, r5, #24
 800be60:	681b      	ldr	r3, [r3, #0]
 800be62:	d501      	bpl.n	800be68 <_printf_i+0x1c0>
 800be64:	6019      	str	r1, [r3, #0]
 800be66:	e002      	b.n	800be6e <_printf_i+0x1c6>
 800be68:	0668      	lsls	r0, r5, #25
 800be6a:	d5fb      	bpl.n	800be64 <_printf_i+0x1bc>
 800be6c:	8019      	strh	r1, [r3, #0]
 800be6e:	2300      	movs	r3, #0
 800be70:	6123      	str	r3, [r4, #16]
 800be72:	4616      	mov	r6, r2
 800be74:	e7bc      	b.n	800bdf0 <_printf_i+0x148>
 800be76:	6833      	ldr	r3, [r6, #0]
 800be78:	1d1a      	adds	r2, r3, #4
 800be7a:	6032      	str	r2, [r6, #0]
 800be7c:	681e      	ldr	r6, [r3, #0]
 800be7e:	6862      	ldr	r2, [r4, #4]
 800be80:	2100      	movs	r1, #0
 800be82:	4630      	mov	r0, r6
 800be84:	f7f4 f9b4 	bl	80001f0 <memchr>
 800be88:	b108      	cbz	r0, 800be8e <_printf_i+0x1e6>
 800be8a:	1b80      	subs	r0, r0, r6
 800be8c:	6060      	str	r0, [r4, #4]
 800be8e:	6863      	ldr	r3, [r4, #4]
 800be90:	6123      	str	r3, [r4, #16]
 800be92:	2300      	movs	r3, #0
 800be94:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800be98:	e7aa      	b.n	800bdf0 <_printf_i+0x148>
 800be9a:	6923      	ldr	r3, [r4, #16]
 800be9c:	4632      	mov	r2, r6
 800be9e:	4649      	mov	r1, r9
 800bea0:	4640      	mov	r0, r8
 800bea2:	47d0      	blx	sl
 800bea4:	3001      	adds	r0, #1
 800bea6:	d0ad      	beq.n	800be04 <_printf_i+0x15c>
 800bea8:	6823      	ldr	r3, [r4, #0]
 800beaa:	079b      	lsls	r3, r3, #30
 800beac:	d413      	bmi.n	800bed6 <_printf_i+0x22e>
 800beae:	68e0      	ldr	r0, [r4, #12]
 800beb0:	9b03      	ldr	r3, [sp, #12]
 800beb2:	4298      	cmp	r0, r3
 800beb4:	bfb8      	it	lt
 800beb6:	4618      	movlt	r0, r3
 800beb8:	e7a6      	b.n	800be08 <_printf_i+0x160>
 800beba:	2301      	movs	r3, #1
 800bebc:	4632      	mov	r2, r6
 800bebe:	4649      	mov	r1, r9
 800bec0:	4640      	mov	r0, r8
 800bec2:	47d0      	blx	sl
 800bec4:	3001      	adds	r0, #1
 800bec6:	d09d      	beq.n	800be04 <_printf_i+0x15c>
 800bec8:	3501      	adds	r5, #1
 800beca:	68e3      	ldr	r3, [r4, #12]
 800becc:	9903      	ldr	r1, [sp, #12]
 800bece:	1a5b      	subs	r3, r3, r1
 800bed0:	42ab      	cmp	r3, r5
 800bed2:	dcf2      	bgt.n	800beba <_printf_i+0x212>
 800bed4:	e7eb      	b.n	800beae <_printf_i+0x206>
 800bed6:	2500      	movs	r5, #0
 800bed8:	f104 0619 	add.w	r6, r4, #25
 800bedc:	e7f5      	b.n	800beca <_printf_i+0x222>
 800bede:	bf00      	nop
 800bee0:	08012dc9 	.word	0x08012dc9
 800bee4:	08012dda 	.word	0x08012dda

0800bee8 <_scanf_float>:
 800bee8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800beec:	b087      	sub	sp, #28
 800beee:	4617      	mov	r7, r2
 800bef0:	9303      	str	r3, [sp, #12]
 800bef2:	688b      	ldr	r3, [r1, #8]
 800bef4:	1e5a      	subs	r2, r3, #1
 800bef6:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800befa:	bf81      	itttt	hi
 800befc:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800bf00:	eb03 0b05 	addhi.w	fp, r3, r5
 800bf04:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800bf08:	608b      	strhi	r3, [r1, #8]
 800bf0a:	680b      	ldr	r3, [r1, #0]
 800bf0c:	460a      	mov	r2, r1
 800bf0e:	f04f 0500 	mov.w	r5, #0
 800bf12:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800bf16:	f842 3b1c 	str.w	r3, [r2], #28
 800bf1a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800bf1e:	4680      	mov	r8, r0
 800bf20:	460c      	mov	r4, r1
 800bf22:	bf98      	it	ls
 800bf24:	f04f 0b00 	movls.w	fp, #0
 800bf28:	9201      	str	r2, [sp, #4]
 800bf2a:	4616      	mov	r6, r2
 800bf2c:	46aa      	mov	sl, r5
 800bf2e:	46a9      	mov	r9, r5
 800bf30:	9502      	str	r5, [sp, #8]
 800bf32:	68a2      	ldr	r2, [r4, #8]
 800bf34:	b152      	cbz	r2, 800bf4c <_scanf_float+0x64>
 800bf36:	683b      	ldr	r3, [r7, #0]
 800bf38:	781b      	ldrb	r3, [r3, #0]
 800bf3a:	2b4e      	cmp	r3, #78	@ 0x4e
 800bf3c:	d864      	bhi.n	800c008 <_scanf_float+0x120>
 800bf3e:	2b40      	cmp	r3, #64	@ 0x40
 800bf40:	d83c      	bhi.n	800bfbc <_scanf_float+0xd4>
 800bf42:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800bf46:	b2c8      	uxtb	r0, r1
 800bf48:	280e      	cmp	r0, #14
 800bf4a:	d93a      	bls.n	800bfc2 <_scanf_float+0xda>
 800bf4c:	f1b9 0f00 	cmp.w	r9, #0
 800bf50:	d003      	beq.n	800bf5a <_scanf_float+0x72>
 800bf52:	6823      	ldr	r3, [r4, #0]
 800bf54:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800bf58:	6023      	str	r3, [r4, #0]
 800bf5a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800bf5e:	f1ba 0f01 	cmp.w	sl, #1
 800bf62:	f200 8117 	bhi.w	800c194 <_scanf_float+0x2ac>
 800bf66:	9b01      	ldr	r3, [sp, #4]
 800bf68:	429e      	cmp	r6, r3
 800bf6a:	f200 8108 	bhi.w	800c17e <_scanf_float+0x296>
 800bf6e:	2001      	movs	r0, #1
 800bf70:	b007      	add	sp, #28
 800bf72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf76:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800bf7a:	2a0d      	cmp	r2, #13
 800bf7c:	d8e6      	bhi.n	800bf4c <_scanf_float+0x64>
 800bf7e:	a101      	add	r1, pc, #4	@ (adr r1, 800bf84 <_scanf_float+0x9c>)
 800bf80:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800bf84:	0800c0cb 	.word	0x0800c0cb
 800bf88:	0800bf4d 	.word	0x0800bf4d
 800bf8c:	0800bf4d 	.word	0x0800bf4d
 800bf90:	0800bf4d 	.word	0x0800bf4d
 800bf94:	0800c12b 	.word	0x0800c12b
 800bf98:	0800c103 	.word	0x0800c103
 800bf9c:	0800bf4d 	.word	0x0800bf4d
 800bfa0:	0800bf4d 	.word	0x0800bf4d
 800bfa4:	0800c0d9 	.word	0x0800c0d9
 800bfa8:	0800bf4d 	.word	0x0800bf4d
 800bfac:	0800bf4d 	.word	0x0800bf4d
 800bfb0:	0800bf4d 	.word	0x0800bf4d
 800bfb4:	0800bf4d 	.word	0x0800bf4d
 800bfb8:	0800c091 	.word	0x0800c091
 800bfbc:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800bfc0:	e7db      	b.n	800bf7a <_scanf_float+0x92>
 800bfc2:	290e      	cmp	r1, #14
 800bfc4:	d8c2      	bhi.n	800bf4c <_scanf_float+0x64>
 800bfc6:	a001      	add	r0, pc, #4	@ (adr r0, 800bfcc <_scanf_float+0xe4>)
 800bfc8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800bfcc:	0800c081 	.word	0x0800c081
 800bfd0:	0800bf4d 	.word	0x0800bf4d
 800bfd4:	0800c081 	.word	0x0800c081
 800bfd8:	0800c117 	.word	0x0800c117
 800bfdc:	0800bf4d 	.word	0x0800bf4d
 800bfe0:	0800c029 	.word	0x0800c029
 800bfe4:	0800c067 	.word	0x0800c067
 800bfe8:	0800c067 	.word	0x0800c067
 800bfec:	0800c067 	.word	0x0800c067
 800bff0:	0800c067 	.word	0x0800c067
 800bff4:	0800c067 	.word	0x0800c067
 800bff8:	0800c067 	.word	0x0800c067
 800bffc:	0800c067 	.word	0x0800c067
 800c000:	0800c067 	.word	0x0800c067
 800c004:	0800c067 	.word	0x0800c067
 800c008:	2b6e      	cmp	r3, #110	@ 0x6e
 800c00a:	d809      	bhi.n	800c020 <_scanf_float+0x138>
 800c00c:	2b60      	cmp	r3, #96	@ 0x60
 800c00e:	d8b2      	bhi.n	800bf76 <_scanf_float+0x8e>
 800c010:	2b54      	cmp	r3, #84	@ 0x54
 800c012:	d07b      	beq.n	800c10c <_scanf_float+0x224>
 800c014:	2b59      	cmp	r3, #89	@ 0x59
 800c016:	d199      	bne.n	800bf4c <_scanf_float+0x64>
 800c018:	2d07      	cmp	r5, #7
 800c01a:	d197      	bne.n	800bf4c <_scanf_float+0x64>
 800c01c:	2508      	movs	r5, #8
 800c01e:	e02c      	b.n	800c07a <_scanf_float+0x192>
 800c020:	2b74      	cmp	r3, #116	@ 0x74
 800c022:	d073      	beq.n	800c10c <_scanf_float+0x224>
 800c024:	2b79      	cmp	r3, #121	@ 0x79
 800c026:	e7f6      	b.n	800c016 <_scanf_float+0x12e>
 800c028:	6821      	ldr	r1, [r4, #0]
 800c02a:	05c8      	lsls	r0, r1, #23
 800c02c:	d51b      	bpl.n	800c066 <_scanf_float+0x17e>
 800c02e:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800c032:	6021      	str	r1, [r4, #0]
 800c034:	f109 0901 	add.w	r9, r9, #1
 800c038:	f1bb 0f00 	cmp.w	fp, #0
 800c03c:	d003      	beq.n	800c046 <_scanf_float+0x15e>
 800c03e:	3201      	adds	r2, #1
 800c040:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c044:	60a2      	str	r2, [r4, #8]
 800c046:	68a3      	ldr	r3, [r4, #8]
 800c048:	3b01      	subs	r3, #1
 800c04a:	60a3      	str	r3, [r4, #8]
 800c04c:	6923      	ldr	r3, [r4, #16]
 800c04e:	3301      	adds	r3, #1
 800c050:	6123      	str	r3, [r4, #16]
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	3b01      	subs	r3, #1
 800c056:	2b00      	cmp	r3, #0
 800c058:	607b      	str	r3, [r7, #4]
 800c05a:	f340 8087 	ble.w	800c16c <_scanf_float+0x284>
 800c05e:	683b      	ldr	r3, [r7, #0]
 800c060:	3301      	adds	r3, #1
 800c062:	603b      	str	r3, [r7, #0]
 800c064:	e765      	b.n	800bf32 <_scanf_float+0x4a>
 800c066:	eb1a 0105 	adds.w	r1, sl, r5
 800c06a:	f47f af6f 	bne.w	800bf4c <_scanf_float+0x64>
 800c06e:	6822      	ldr	r2, [r4, #0]
 800c070:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800c074:	6022      	str	r2, [r4, #0]
 800c076:	460d      	mov	r5, r1
 800c078:	468a      	mov	sl, r1
 800c07a:	f806 3b01 	strb.w	r3, [r6], #1
 800c07e:	e7e2      	b.n	800c046 <_scanf_float+0x15e>
 800c080:	6822      	ldr	r2, [r4, #0]
 800c082:	0610      	lsls	r0, r2, #24
 800c084:	f57f af62 	bpl.w	800bf4c <_scanf_float+0x64>
 800c088:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800c08c:	6022      	str	r2, [r4, #0]
 800c08e:	e7f4      	b.n	800c07a <_scanf_float+0x192>
 800c090:	f1ba 0f00 	cmp.w	sl, #0
 800c094:	d10e      	bne.n	800c0b4 <_scanf_float+0x1cc>
 800c096:	f1b9 0f00 	cmp.w	r9, #0
 800c09a:	d10e      	bne.n	800c0ba <_scanf_float+0x1d2>
 800c09c:	6822      	ldr	r2, [r4, #0]
 800c09e:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800c0a2:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800c0a6:	d108      	bne.n	800c0ba <_scanf_float+0x1d2>
 800c0a8:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800c0ac:	6022      	str	r2, [r4, #0]
 800c0ae:	f04f 0a01 	mov.w	sl, #1
 800c0b2:	e7e2      	b.n	800c07a <_scanf_float+0x192>
 800c0b4:	f1ba 0f02 	cmp.w	sl, #2
 800c0b8:	d055      	beq.n	800c166 <_scanf_float+0x27e>
 800c0ba:	2d01      	cmp	r5, #1
 800c0bc:	d002      	beq.n	800c0c4 <_scanf_float+0x1dc>
 800c0be:	2d04      	cmp	r5, #4
 800c0c0:	f47f af44 	bne.w	800bf4c <_scanf_float+0x64>
 800c0c4:	3501      	adds	r5, #1
 800c0c6:	b2ed      	uxtb	r5, r5
 800c0c8:	e7d7      	b.n	800c07a <_scanf_float+0x192>
 800c0ca:	f1ba 0f01 	cmp.w	sl, #1
 800c0ce:	f47f af3d 	bne.w	800bf4c <_scanf_float+0x64>
 800c0d2:	f04f 0a02 	mov.w	sl, #2
 800c0d6:	e7d0      	b.n	800c07a <_scanf_float+0x192>
 800c0d8:	b97d      	cbnz	r5, 800c0fa <_scanf_float+0x212>
 800c0da:	f1b9 0f00 	cmp.w	r9, #0
 800c0de:	f47f af38 	bne.w	800bf52 <_scanf_float+0x6a>
 800c0e2:	6822      	ldr	r2, [r4, #0]
 800c0e4:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800c0e8:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800c0ec:	f040 8108 	bne.w	800c300 <_scanf_float+0x418>
 800c0f0:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800c0f4:	6022      	str	r2, [r4, #0]
 800c0f6:	2501      	movs	r5, #1
 800c0f8:	e7bf      	b.n	800c07a <_scanf_float+0x192>
 800c0fa:	2d03      	cmp	r5, #3
 800c0fc:	d0e2      	beq.n	800c0c4 <_scanf_float+0x1dc>
 800c0fe:	2d05      	cmp	r5, #5
 800c100:	e7de      	b.n	800c0c0 <_scanf_float+0x1d8>
 800c102:	2d02      	cmp	r5, #2
 800c104:	f47f af22 	bne.w	800bf4c <_scanf_float+0x64>
 800c108:	2503      	movs	r5, #3
 800c10a:	e7b6      	b.n	800c07a <_scanf_float+0x192>
 800c10c:	2d06      	cmp	r5, #6
 800c10e:	f47f af1d 	bne.w	800bf4c <_scanf_float+0x64>
 800c112:	2507      	movs	r5, #7
 800c114:	e7b1      	b.n	800c07a <_scanf_float+0x192>
 800c116:	6822      	ldr	r2, [r4, #0]
 800c118:	0591      	lsls	r1, r2, #22
 800c11a:	f57f af17 	bpl.w	800bf4c <_scanf_float+0x64>
 800c11e:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800c122:	6022      	str	r2, [r4, #0]
 800c124:	f8cd 9008 	str.w	r9, [sp, #8]
 800c128:	e7a7      	b.n	800c07a <_scanf_float+0x192>
 800c12a:	6822      	ldr	r2, [r4, #0]
 800c12c:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800c130:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800c134:	d006      	beq.n	800c144 <_scanf_float+0x25c>
 800c136:	0550      	lsls	r0, r2, #21
 800c138:	f57f af08 	bpl.w	800bf4c <_scanf_float+0x64>
 800c13c:	f1b9 0f00 	cmp.w	r9, #0
 800c140:	f000 80de 	beq.w	800c300 <_scanf_float+0x418>
 800c144:	0591      	lsls	r1, r2, #22
 800c146:	bf58      	it	pl
 800c148:	9902      	ldrpl	r1, [sp, #8]
 800c14a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800c14e:	bf58      	it	pl
 800c150:	eba9 0101 	subpl.w	r1, r9, r1
 800c154:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800c158:	bf58      	it	pl
 800c15a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800c15e:	6022      	str	r2, [r4, #0]
 800c160:	f04f 0900 	mov.w	r9, #0
 800c164:	e789      	b.n	800c07a <_scanf_float+0x192>
 800c166:	f04f 0a03 	mov.w	sl, #3
 800c16a:	e786      	b.n	800c07a <_scanf_float+0x192>
 800c16c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800c170:	4639      	mov	r1, r7
 800c172:	4640      	mov	r0, r8
 800c174:	4798      	blx	r3
 800c176:	2800      	cmp	r0, #0
 800c178:	f43f aedb 	beq.w	800bf32 <_scanf_float+0x4a>
 800c17c:	e6e6      	b.n	800bf4c <_scanf_float+0x64>
 800c17e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800c182:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800c186:	463a      	mov	r2, r7
 800c188:	4640      	mov	r0, r8
 800c18a:	4798      	blx	r3
 800c18c:	6923      	ldr	r3, [r4, #16]
 800c18e:	3b01      	subs	r3, #1
 800c190:	6123      	str	r3, [r4, #16]
 800c192:	e6e8      	b.n	800bf66 <_scanf_float+0x7e>
 800c194:	1e6b      	subs	r3, r5, #1
 800c196:	2b06      	cmp	r3, #6
 800c198:	d824      	bhi.n	800c1e4 <_scanf_float+0x2fc>
 800c19a:	2d02      	cmp	r5, #2
 800c19c:	d836      	bhi.n	800c20c <_scanf_float+0x324>
 800c19e:	9b01      	ldr	r3, [sp, #4]
 800c1a0:	429e      	cmp	r6, r3
 800c1a2:	f67f aee4 	bls.w	800bf6e <_scanf_float+0x86>
 800c1a6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800c1aa:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800c1ae:	463a      	mov	r2, r7
 800c1b0:	4640      	mov	r0, r8
 800c1b2:	4798      	blx	r3
 800c1b4:	6923      	ldr	r3, [r4, #16]
 800c1b6:	3b01      	subs	r3, #1
 800c1b8:	6123      	str	r3, [r4, #16]
 800c1ba:	e7f0      	b.n	800c19e <_scanf_float+0x2b6>
 800c1bc:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800c1c0:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800c1c4:	463a      	mov	r2, r7
 800c1c6:	4640      	mov	r0, r8
 800c1c8:	4798      	blx	r3
 800c1ca:	6923      	ldr	r3, [r4, #16]
 800c1cc:	3b01      	subs	r3, #1
 800c1ce:	6123      	str	r3, [r4, #16]
 800c1d0:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c1d4:	fa5f fa8a 	uxtb.w	sl, sl
 800c1d8:	f1ba 0f02 	cmp.w	sl, #2
 800c1dc:	d1ee      	bne.n	800c1bc <_scanf_float+0x2d4>
 800c1de:	3d03      	subs	r5, #3
 800c1e0:	b2ed      	uxtb	r5, r5
 800c1e2:	1b76      	subs	r6, r6, r5
 800c1e4:	6823      	ldr	r3, [r4, #0]
 800c1e6:	05da      	lsls	r2, r3, #23
 800c1e8:	d530      	bpl.n	800c24c <_scanf_float+0x364>
 800c1ea:	055b      	lsls	r3, r3, #21
 800c1ec:	d511      	bpl.n	800c212 <_scanf_float+0x32a>
 800c1ee:	9b01      	ldr	r3, [sp, #4]
 800c1f0:	429e      	cmp	r6, r3
 800c1f2:	f67f aebc 	bls.w	800bf6e <_scanf_float+0x86>
 800c1f6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800c1fa:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800c1fe:	463a      	mov	r2, r7
 800c200:	4640      	mov	r0, r8
 800c202:	4798      	blx	r3
 800c204:	6923      	ldr	r3, [r4, #16]
 800c206:	3b01      	subs	r3, #1
 800c208:	6123      	str	r3, [r4, #16]
 800c20a:	e7f0      	b.n	800c1ee <_scanf_float+0x306>
 800c20c:	46aa      	mov	sl, r5
 800c20e:	46b3      	mov	fp, r6
 800c210:	e7de      	b.n	800c1d0 <_scanf_float+0x2e8>
 800c212:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800c216:	6923      	ldr	r3, [r4, #16]
 800c218:	2965      	cmp	r1, #101	@ 0x65
 800c21a:	f103 33ff 	add.w	r3, r3, #4294967295
 800c21e:	f106 35ff 	add.w	r5, r6, #4294967295
 800c222:	6123      	str	r3, [r4, #16]
 800c224:	d00c      	beq.n	800c240 <_scanf_float+0x358>
 800c226:	2945      	cmp	r1, #69	@ 0x45
 800c228:	d00a      	beq.n	800c240 <_scanf_float+0x358>
 800c22a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800c22e:	463a      	mov	r2, r7
 800c230:	4640      	mov	r0, r8
 800c232:	4798      	blx	r3
 800c234:	6923      	ldr	r3, [r4, #16]
 800c236:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800c23a:	3b01      	subs	r3, #1
 800c23c:	1eb5      	subs	r5, r6, #2
 800c23e:	6123      	str	r3, [r4, #16]
 800c240:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800c244:	463a      	mov	r2, r7
 800c246:	4640      	mov	r0, r8
 800c248:	4798      	blx	r3
 800c24a:	462e      	mov	r6, r5
 800c24c:	6822      	ldr	r2, [r4, #0]
 800c24e:	f012 0210 	ands.w	r2, r2, #16
 800c252:	d001      	beq.n	800c258 <_scanf_float+0x370>
 800c254:	2000      	movs	r0, #0
 800c256:	e68b      	b.n	800bf70 <_scanf_float+0x88>
 800c258:	7032      	strb	r2, [r6, #0]
 800c25a:	6823      	ldr	r3, [r4, #0]
 800c25c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800c260:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c264:	d11c      	bne.n	800c2a0 <_scanf_float+0x3b8>
 800c266:	9b02      	ldr	r3, [sp, #8]
 800c268:	454b      	cmp	r3, r9
 800c26a:	eba3 0209 	sub.w	r2, r3, r9
 800c26e:	d123      	bne.n	800c2b8 <_scanf_float+0x3d0>
 800c270:	9901      	ldr	r1, [sp, #4]
 800c272:	2200      	movs	r2, #0
 800c274:	4640      	mov	r0, r8
 800c276:	f7ff f947 	bl	800b508 <_strtod_r>
 800c27a:	9b03      	ldr	r3, [sp, #12]
 800c27c:	6821      	ldr	r1, [r4, #0]
 800c27e:	681b      	ldr	r3, [r3, #0]
 800c280:	f011 0f02 	tst.w	r1, #2
 800c284:	ec57 6b10 	vmov	r6, r7, d0
 800c288:	f103 0204 	add.w	r2, r3, #4
 800c28c:	d01f      	beq.n	800c2ce <_scanf_float+0x3e6>
 800c28e:	9903      	ldr	r1, [sp, #12]
 800c290:	600a      	str	r2, [r1, #0]
 800c292:	681b      	ldr	r3, [r3, #0]
 800c294:	e9c3 6700 	strd	r6, r7, [r3]
 800c298:	68e3      	ldr	r3, [r4, #12]
 800c29a:	3301      	adds	r3, #1
 800c29c:	60e3      	str	r3, [r4, #12]
 800c29e:	e7d9      	b.n	800c254 <_scanf_float+0x36c>
 800c2a0:	9b04      	ldr	r3, [sp, #16]
 800c2a2:	2b00      	cmp	r3, #0
 800c2a4:	d0e4      	beq.n	800c270 <_scanf_float+0x388>
 800c2a6:	9905      	ldr	r1, [sp, #20]
 800c2a8:	230a      	movs	r3, #10
 800c2aa:	3101      	adds	r1, #1
 800c2ac:	4640      	mov	r0, r8
 800c2ae:	f7ff f9b7 	bl	800b620 <_strtol_r>
 800c2b2:	9b04      	ldr	r3, [sp, #16]
 800c2b4:	9e05      	ldr	r6, [sp, #20]
 800c2b6:	1ac2      	subs	r2, r0, r3
 800c2b8:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800c2bc:	429e      	cmp	r6, r3
 800c2be:	bf28      	it	cs
 800c2c0:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800c2c4:	4910      	ldr	r1, [pc, #64]	@ (800c308 <_scanf_float+0x420>)
 800c2c6:	4630      	mov	r0, r6
 800c2c8:	f000 f918 	bl	800c4fc <siprintf>
 800c2cc:	e7d0      	b.n	800c270 <_scanf_float+0x388>
 800c2ce:	f011 0f04 	tst.w	r1, #4
 800c2d2:	9903      	ldr	r1, [sp, #12]
 800c2d4:	600a      	str	r2, [r1, #0]
 800c2d6:	d1dc      	bne.n	800c292 <_scanf_float+0x3aa>
 800c2d8:	681d      	ldr	r5, [r3, #0]
 800c2da:	4632      	mov	r2, r6
 800c2dc:	463b      	mov	r3, r7
 800c2de:	4630      	mov	r0, r6
 800c2e0:	4639      	mov	r1, r7
 800c2e2:	f7f4 fc33 	bl	8000b4c <__aeabi_dcmpun>
 800c2e6:	b128      	cbz	r0, 800c2f4 <_scanf_float+0x40c>
 800c2e8:	4808      	ldr	r0, [pc, #32]	@ (800c30c <_scanf_float+0x424>)
 800c2ea:	f001 f839 	bl	800d360 <nanf>
 800c2ee:	ed85 0a00 	vstr	s0, [r5]
 800c2f2:	e7d1      	b.n	800c298 <_scanf_float+0x3b0>
 800c2f4:	4630      	mov	r0, r6
 800c2f6:	4639      	mov	r1, r7
 800c2f8:	f7f4 fc86 	bl	8000c08 <__aeabi_d2f>
 800c2fc:	6028      	str	r0, [r5, #0]
 800c2fe:	e7cb      	b.n	800c298 <_scanf_float+0x3b0>
 800c300:	f04f 0900 	mov.w	r9, #0
 800c304:	e629      	b.n	800bf5a <_scanf_float+0x72>
 800c306:	bf00      	nop
 800c308:	08012deb 	.word	0x08012deb
 800c30c:	08011a82 	.word	0x08011a82

0800c310 <std>:
 800c310:	2300      	movs	r3, #0
 800c312:	b510      	push	{r4, lr}
 800c314:	4604      	mov	r4, r0
 800c316:	e9c0 3300 	strd	r3, r3, [r0]
 800c31a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c31e:	6083      	str	r3, [r0, #8]
 800c320:	8181      	strh	r1, [r0, #12]
 800c322:	6643      	str	r3, [r0, #100]	@ 0x64
 800c324:	81c2      	strh	r2, [r0, #14]
 800c326:	6183      	str	r3, [r0, #24]
 800c328:	4619      	mov	r1, r3
 800c32a:	2208      	movs	r2, #8
 800c32c:	305c      	adds	r0, #92	@ 0x5c
 800c32e:	f000 f9ad 	bl	800c68c <memset>
 800c332:	4b0d      	ldr	r3, [pc, #52]	@ (800c368 <std+0x58>)
 800c334:	6263      	str	r3, [r4, #36]	@ 0x24
 800c336:	4b0d      	ldr	r3, [pc, #52]	@ (800c36c <std+0x5c>)
 800c338:	62a3      	str	r3, [r4, #40]	@ 0x28
 800c33a:	4b0d      	ldr	r3, [pc, #52]	@ (800c370 <std+0x60>)
 800c33c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800c33e:	4b0d      	ldr	r3, [pc, #52]	@ (800c374 <std+0x64>)
 800c340:	6323      	str	r3, [r4, #48]	@ 0x30
 800c342:	4b0d      	ldr	r3, [pc, #52]	@ (800c378 <std+0x68>)
 800c344:	6224      	str	r4, [r4, #32]
 800c346:	429c      	cmp	r4, r3
 800c348:	d006      	beq.n	800c358 <std+0x48>
 800c34a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800c34e:	4294      	cmp	r4, r2
 800c350:	d002      	beq.n	800c358 <std+0x48>
 800c352:	33d0      	adds	r3, #208	@ 0xd0
 800c354:	429c      	cmp	r4, r3
 800c356:	d105      	bne.n	800c364 <std+0x54>
 800c358:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800c35c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c360:	f7f9 bb69 	b.w	8005a36 <__retarget_lock_init_recursive>
 800c364:	bd10      	pop	{r4, pc}
 800c366:	bf00      	nop
 800c368:	0800c591 	.word	0x0800c591
 800c36c:	0800c5b7 	.word	0x0800c5b7
 800c370:	0800c5ef 	.word	0x0800c5ef
 800c374:	0800c613 	.word	0x0800c613
 800c378:	200096e0 	.word	0x200096e0

0800c37c <stdio_exit_handler>:
 800c37c:	4a02      	ldr	r2, [pc, #8]	@ (800c388 <stdio_exit_handler+0xc>)
 800c37e:	4903      	ldr	r1, [pc, #12]	@ (800c38c <stdio_exit_handler+0x10>)
 800c380:	4803      	ldr	r0, [pc, #12]	@ (800c390 <stdio_exit_handler+0x14>)
 800c382:	f000 b869 	b.w	800c458 <_fwalk_sglue>
 800c386:	bf00      	nop
 800c388:	2000003c 	.word	0x2000003c
 800c38c:	0800fc29 	.word	0x0800fc29
 800c390:	200001c0 	.word	0x200001c0

0800c394 <cleanup_stdio>:
 800c394:	6841      	ldr	r1, [r0, #4]
 800c396:	4b0c      	ldr	r3, [pc, #48]	@ (800c3c8 <cleanup_stdio+0x34>)
 800c398:	4299      	cmp	r1, r3
 800c39a:	b510      	push	{r4, lr}
 800c39c:	4604      	mov	r4, r0
 800c39e:	d001      	beq.n	800c3a4 <cleanup_stdio+0x10>
 800c3a0:	f003 fc42 	bl	800fc28 <_fflush_r>
 800c3a4:	68a1      	ldr	r1, [r4, #8]
 800c3a6:	4b09      	ldr	r3, [pc, #36]	@ (800c3cc <cleanup_stdio+0x38>)
 800c3a8:	4299      	cmp	r1, r3
 800c3aa:	d002      	beq.n	800c3b2 <cleanup_stdio+0x1e>
 800c3ac:	4620      	mov	r0, r4
 800c3ae:	f003 fc3b 	bl	800fc28 <_fflush_r>
 800c3b2:	68e1      	ldr	r1, [r4, #12]
 800c3b4:	4b06      	ldr	r3, [pc, #24]	@ (800c3d0 <cleanup_stdio+0x3c>)
 800c3b6:	4299      	cmp	r1, r3
 800c3b8:	d004      	beq.n	800c3c4 <cleanup_stdio+0x30>
 800c3ba:	4620      	mov	r0, r4
 800c3bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c3c0:	f003 bc32 	b.w	800fc28 <_fflush_r>
 800c3c4:	bd10      	pop	{r4, pc}
 800c3c6:	bf00      	nop
 800c3c8:	200096e0 	.word	0x200096e0
 800c3cc:	20009748 	.word	0x20009748
 800c3d0:	200097b0 	.word	0x200097b0

0800c3d4 <global_stdio_init.part.0>:
 800c3d4:	b510      	push	{r4, lr}
 800c3d6:	4b0b      	ldr	r3, [pc, #44]	@ (800c404 <global_stdio_init.part.0+0x30>)
 800c3d8:	4c0b      	ldr	r4, [pc, #44]	@ (800c408 <global_stdio_init.part.0+0x34>)
 800c3da:	4a0c      	ldr	r2, [pc, #48]	@ (800c40c <global_stdio_init.part.0+0x38>)
 800c3dc:	601a      	str	r2, [r3, #0]
 800c3de:	4620      	mov	r0, r4
 800c3e0:	2200      	movs	r2, #0
 800c3e2:	2104      	movs	r1, #4
 800c3e4:	f7ff ff94 	bl	800c310 <std>
 800c3e8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800c3ec:	2201      	movs	r2, #1
 800c3ee:	2109      	movs	r1, #9
 800c3f0:	f7ff ff8e 	bl	800c310 <std>
 800c3f4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800c3f8:	2202      	movs	r2, #2
 800c3fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c3fe:	2112      	movs	r1, #18
 800c400:	f7ff bf86 	b.w	800c310 <std>
 800c404:	20009818 	.word	0x20009818
 800c408:	200096e0 	.word	0x200096e0
 800c40c:	0800c37d 	.word	0x0800c37d

0800c410 <__sfp_lock_acquire>:
 800c410:	4801      	ldr	r0, [pc, #4]	@ (800c418 <__sfp_lock_acquire+0x8>)
 800c412:	f7f9 bb2c 	b.w	8005a6e <__retarget_lock_acquire_recursive>
 800c416:	bf00      	nop
 800c418:	200085b4 	.word	0x200085b4

0800c41c <__sfp_lock_release>:
 800c41c:	4801      	ldr	r0, [pc, #4]	@ (800c424 <__sfp_lock_release+0x8>)
 800c41e:	f7f9 bb32 	b.w	8005a86 <__retarget_lock_release_recursive>
 800c422:	bf00      	nop
 800c424:	200085b4 	.word	0x200085b4

0800c428 <__sinit>:
 800c428:	b510      	push	{r4, lr}
 800c42a:	4604      	mov	r4, r0
 800c42c:	f7ff fff0 	bl	800c410 <__sfp_lock_acquire>
 800c430:	6a23      	ldr	r3, [r4, #32]
 800c432:	b11b      	cbz	r3, 800c43c <__sinit+0x14>
 800c434:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c438:	f7ff bff0 	b.w	800c41c <__sfp_lock_release>
 800c43c:	4b04      	ldr	r3, [pc, #16]	@ (800c450 <__sinit+0x28>)
 800c43e:	6223      	str	r3, [r4, #32]
 800c440:	4b04      	ldr	r3, [pc, #16]	@ (800c454 <__sinit+0x2c>)
 800c442:	681b      	ldr	r3, [r3, #0]
 800c444:	2b00      	cmp	r3, #0
 800c446:	d1f5      	bne.n	800c434 <__sinit+0xc>
 800c448:	f7ff ffc4 	bl	800c3d4 <global_stdio_init.part.0>
 800c44c:	e7f2      	b.n	800c434 <__sinit+0xc>
 800c44e:	bf00      	nop
 800c450:	0800c395 	.word	0x0800c395
 800c454:	20009818 	.word	0x20009818

0800c458 <_fwalk_sglue>:
 800c458:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c45c:	4607      	mov	r7, r0
 800c45e:	4688      	mov	r8, r1
 800c460:	4614      	mov	r4, r2
 800c462:	2600      	movs	r6, #0
 800c464:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c468:	f1b9 0901 	subs.w	r9, r9, #1
 800c46c:	d505      	bpl.n	800c47a <_fwalk_sglue+0x22>
 800c46e:	6824      	ldr	r4, [r4, #0]
 800c470:	2c00      	cmp	r4, #0
 800c472:	d1f7      	bne.n	800c464 <_fwalk_sglue+0xc>
 800c474:	4630      	mov	r0, r6
 800c476:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c47a:	89ab      	ldrh	r3, [r5, #12]
 800c47c:	2b01      	cmp	r3, #1
 800c47e:	d907      	bls.n	800c490 <_fwalk_sglue+0x38>
 800c480:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c484:	3301      	adds	r3, #1
 800c486:	d003      	beq.n	800c490 <_fwalk_sglue+0x38>
 800c488:	4629      	mov	r1, r5
 800c48a:	4638      	mov	r0, r7
 800c48c:	47c0      	blx	r8
 800c48e:	4306      	orrs	r6, r0
 800c490:	3568      	adds	r5, #104	@ 0x68
 800c492:	e7e9      	b.n	800c468 <_fwalk_sglue+0x10>

0800c494 <sniprintf>:
 800c494:	b40c      	push	{r2, r3}
 800c496:	b530      	push	{r4, r5, lr}
 800c498:	4b17      	ldr	r3, [pc, #92]	@ (800c4f8 <sniprintf+0x64>)
 800c49a:	1e0c      	subs	r4, r1, #0
 800c49c:	681d      	ldr	r5, [r3, #0]
 800c49e:	b09d      	sub	sp, #116	@ 0x74
 800c4a0:	da08      	bge.n	800c4b4 <sniprintf+0x20>
 800c4a2:	238b      	movs	r3, #139	@ 0x8b
 800c4a4:	602b      	str	r3, [r5, #0]
 800c4a6:	f04f 30ff 	mov.w	r0, #4294967295
 800c4aa:	b01d      	add	sp, #116	@ 0x74
 800c4ac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c4b0:	b002      	add	sp, #8
 800c4b2:	4770      	bx	lr
 800c4b4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800c4b8:	f8ad 3014 	strh.w	r3, [sp, #20]
 800c4bc:	bf14      	ite	ne
 800c4be:	f104 33ff 	addne.w	r3, r4, #4294967295
 800c4c2:	4623      	moveq	r3, r4
 800c4c4:	9304      	str	r3, [sp, #16]
 800c4c6:	9307      	str	r3, [sp, #28]
 800c4c8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800c4cc:	9002      	str	r0, [sp, #8]
 800c4ce:	9006      	str	r0, [sp, #24]
 800c4d0:	f8ad 3016 	strh.w	r3, [sp, #22]
 800c4d4:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800c4d6:	ab21      	add	r3, sp, #132	@ 0x84
 800c4d8:	a902      	add	r1, sp, #8
 800c4da:	4628      	mov	r0, r5
 800c4dc:	9301      	str	r3, [sp, #4]
 800c4de:	f002 ff09 	bl	800f2f4 <_svfiprintf_r>
 800c4e2:	1c43      	adds	r3, r0, #1
 800c4e4:	bfbc      	itt	lt
 800c4e6:	238b      	movlt	r3, #139	@ 0x8b
 800c4e8:	602b      	strlt	r3, [r5, #0]
 800c4ea:	2c00      	cmp	r4, #0
 800c4ec:	d0dd      	beq.n	800c4aa <sniprintf+0x16>
 800c4ee:	9b02      	ldr	r3, [sp, #8]
 800c4f0:	2200      	movs	r2, #0
 800c4f2:	701a      	strb	r2, [r3, #0]
 800c4f4:	e7d9      	b.n	800c4aa <sniprintf+0x16>
 800c4f6:	bf00      	nop
 800c4f8:	200001bc 	.word	0x200001bc

0800c4fc <siprintf>:
 800c4fc:	b40e      	push	{r1, r2, r3}
 800c4fe:	b500      	push	{lr}
 800c500:	b09c      	sub	sp, #112	@ 0x70
 800c502:	ab1d      	add	r3, sp, #116	@ 0x74
 800c504:	9002      	str	r0, [sp, #8]
 800c506:	9006      	str	r0, [sp, #24]
 800c508:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800c50c:	4809      	ldr	r0, [pc, #36]	@ (800c534 <siprintf+0x38>)
 800c50e:	9107      	str	r1, [sp, #28]
 800c510:	9104      	str	r1, [sp, #16]
 800c512:	4909      	ldr	r1, [pc, #36]	@ (800c538 <siprintf+0x3c>)
 800c514:	f853 2b04 	ldr.w	r2, [r3], #4
 800c518:	9105      	str	r1, [sp, #20]
 800c51a:	6800      	ldr	r0, [r0, #0]
 800c51c:	9301      	str	r3, [sp, #4]
 800c51e:	a902      	add	r1, sp, #8
 800c520:	f002 fee8 	bl	800f2f4 <_svfiprintf_r>
 800c524:	9b02      	ldr	r3, [sp, #8]
 800c526:	2200      	movs	r2, #0
 800c528:	701a      	strb	r2, [r3, #0]
 800c52a:	b01c      	add	sp, #112	@ 0x70
 800c52c:	f85d eb04 	ldr.w	lr, [sp], #4
 800c530:	b003      	add	sp, #12
 800c532:	4770      	bx	lr
 800c534:	200001bc 	.word	0x200001bc
 800c538:	ffff0208 	.word	0xffff0208

0800c53c <siscanf>:
 800c53c:	b40e      	push	{r1, r2, r3}
 800c53e:	b530      	push	{r4, r5, lr}
 800c540:	b09c      	sub	sp, #112	@ 0x70
 800c542:	ac1f      	add	r4, sp, #124	@ 0x7c
 800c544:	f44f 7201 	mov.w	r2, #516	@ 0x204
 800c548:	f854 5b04 	ldr.w	r5, [r4], #4
 800c54c:	f8ad 2014 	strh.w	r2, [sp, #20]
 800c550:	9002      	str	r0, [sp, #8]
 800c552:	9006      	str	r0, [sp, #24]
 800c554:	f7f3 fe9c 	bl	8000290 <strlen>
 800c558:	4b0b      	ldr	r3, [pc, #44]	@ (800c588 <siscanf+0x4c>)
 800c55a:	9003      	str	r0, [sp, #12]
 800c55c:	9007      	str	r0, [sp, #28]
 800c55e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c560:	480a      	ldr	r0, [pc, #40]	@ (800c58c <siscanf+0x50>)
 800c562:	9401      	str	r4, [sp, #4]
 800c564:	2300      	movs	r3, #0
 800c566:	930f      	str	r3, [sp, #60]	@ 0x3c
 800c568:	9314      	str	r3, [sp, #80]	@ 0x50
 800c56a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800c56e:	f8ad 3016 	strh.w	r3, [sp, #22]
 800c572:	462a      	mov	r2, r5
 800c574:	4623      	mov	r3, r4
 800c576:	a902      	add	r1, sp, #8
 800c578:	6800      	ldr	r0, [r0, #0]
 800c57a:	f003 f80f 	bl	800f59c <__ssvfiscanf_r>
 800c57e:	b01c      	add	sp, #112	@ 0x70
 800c580:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c584:	b003      	add	sp, #12
 800c586:	4770      	bx	lr
 800c588:	0800c5b3 	.word	0x0800c5b3
 800c58c:	200001bc 	.word	0x200001bc

0800c590 <__sread>:
 800c590:	b510      	push	{r4, lr}
 800c592:	460c      	mov	r4, r1
 800c594:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c598:	f000 fe66 	bl	800d268 <_read_r>
 800c59c:	2800      	cmp	r0, #0
 800c59e:	bfab      	itete	ge
 800c5a0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800c5a2:	89a3      	ldrhlt	r3, [r4, #12]
 800c5a4:	181b      	addge	r3, r3, r0
 800c5a6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800c5aa:	bfac      	ite	ge
 800c5ac:	6563      	strge	r3, [r4, #84]	@ 0x54
 800c5ae:	81a3      	strhlt	r3, [r4, #12]
 800c5b0:	bd10      	pop	{r4, pc}

0800c5b2 <__seofread>:
 800c5b2:	2000      	movs	r0, #0
 800c5b4:	4770      	bx	lr

0800c5b6 <__swrite>:
 800c5b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c5ba:	461f      	mov	r7, r3
 800c5bc:	898b      	ldrh	r3, [r1, #12]
 800c5be:	05db      	lsls	r3, r3, #23
 800c5c0:	4605      	mov	r5, r0
 800c5c2:	460c      	mov	r4, r1
 800c5c4:	4616      	mov	r6, r2
 800c5c6:	d505      	bpl.n	800c5d4 <__swrite+0x1e>
 800c5c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c5cc:	2302      	movs	r3, #2
 800c5ce:	2200      	movs	r2, #0
 800c5d0:	f000 fe38 	bl	800d244 <_lseek_r>
 800c5d4:	89a3      	ldrh	r3, [r4, #12]
 800c5d6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c5da:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c5de:	81a3      	strh	r3, [r4, #12]
 800c5e0:	4632      	mov	r2, r6
 800c5e2:	463b      	mov	r3, r7
 800c5e4:	4628      	mov	r0, r5
 800c5e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c5ea:	f000 be5f 	b.w	800d2ac <_write_r>

0800c5ee <__sseek>:
 800c5ee:	b510      	push	{r4, lr}
 800c5f0:	460c      	mov	r4, r1
 800c5f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c5f6:	f000 fe25 	bl	800d244 <_lseek_r>
 800c5fa:	1c43      	adds	r3, r0, #1
 800c5fc:	89a3      	ldrh	r3, [r4, #12]
 800c5fe:	bf15      	itete	ne
 800c600:	6560      	strne	r0, [r4, #84]	@ 0x54
 800c602:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800c606:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800c60a:	81a3      	strheq	r3, [r4, #12]
 800c60c:	bf18      	it	ne
 800c60e:	81a3      	strhne	r3, [r4, #12]
 800c610:	bd10      	pop	{r4, pc}

0800c612 <__sclose>:
 800c612:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c616:	f000 be05 	b.w	800d224 <_close_r>

0800c61a <_vsniprintf_r>:
 800c61a:	b530      	push	{r4, r5, lr}
 800c61c:	4614      	mov	r4, r2
 800c61e:	2c00      	cmp	r4, #0
 800c620:	b09b      	sub	sp, #108	@ 0x6c
 800c622:	4605      	mov	r5, r0
 800c624:	461a      	mov	r2, r3
 800c626:	da05      	bge.n	800c634 <_vsniprintf_r+0x1a>
 800c628:	238b      	movs	r3, #139	@ 0x8b
 800c62a:	6003      	str	r3, [r0, #0]
 800c62c:	f04f 30ff 	mov.w	r0, #4294967295
 800c630:	b01b      	add	sp, #108	@ 0x6c
 800c632:	bd30      	pop	{r4, r5, pc}
 800c634:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800c638:	f8ad 300c 	strh.w	r3, [sp, #12]
 800c63c:	bf14      	ite	ne
 800c63e:	f104 33ff 	addne.w	r3, r4, #4294967295
 800c642:	4623      	moveq	r3, r4
 800c644:	9302      	str	r3, [sp, #8]
 800c646:	9305      	str	r3, [sp, #20]
 800c648:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800c64c:	9100      	str	r1, [sp, #0]
 800c64e:	9104      	str	r1, [sp, #16]
 800c650:	f8ad 300e 	strh.w	r3, [sp, #14]
 800c654:	4669      	mov	r1, sp
 800c656:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800c658:	f002 fe4c 	bl	800f2f4 <_svfiprintf_r>
 800c65c:	1c43      	adds	r3, r0, #1
 800c65e:	bfbc      	itt	lt
 800c660:	238b      	movlt	r3, #139	@ 0x8b
 800c662:	602b      	strlt	r3, [r5, #0]
 800c664:	2c00      	cmp	r4, #0
 800c666:	d0e3      	beq.n	800c630 <_vsniprintf_r+0x16>
 800c668:	9b00      	ldr	r3, [sp, #0]
 800c66a:	2200      	movs	r2, #0
 800c66c:	701a      	strb	r2, [r3, #0]
 800c66e:	e7df      	b.n	800c630 <_vsniprintf_r+0x16>

0800c670 <vsniprintf>:
 800c670:	b507      	push	{r0, r1, r2, lr}
 800c672:	9300      	str	r3, [sp, #0]
 800c674:	4613      	mov	r3, r2
 800c676:	460a      	mov	r2, r1
 800c678:	4601      	mov	r1, r0
 800c67a:	4803      	ldr	r0, [pc, #12]	@ (800c688 <vsniprintf+0x18>)
 800c67c:	6800      	ldr	r0, [r0, #0]
 800c67e:	f7ff ffcc 	bl	800c61a <_vsniprintf_r>
 800c682:	b003      	add	sp, #12
 800c684:	f85d fb04 	ldr.w	pc, [sp], #4
 800c688:	200001bc 	.word	0x200001bc

0800c68c <memset>:
 800c68c:	4402      	add	r2, r0
 800c68e:	4603      	mov	r3, r0
 800c690:	4293      	cmp	r3, r2
 800c692:	d100      	bne.n	800c696 <memset+0xa>
 800c694:	4770      	bx	lr
 800c696:	f803 1b01 	strb.w	r1, [r3], #1
 800c69a:	e7f9      	b.n	800c690 <memset+0x4>

0800c69c <strchr>:
 800c69c:	b2c9      	uxtb	r1, r1
 800c69e:	4603      	mov	r3, r0
 800c6a0:	4618      	mov	r0, r3
 800c6a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c6a6:	b112      	cbz	r2, 800c6ae <strchr+0x12>
 800c6a8:	428a      	cmp	r2, r1
 800c6aa:	d1f9      	bne.n	800c6a0 <strchr+0x4>
 800c6ac:	4770      	bx	lr
 800c6ae:	2900      	cmp	r1, #0
 800c6b0:	bf18      	it	ne
 800c6b2:	2000      	movne	r0, #0
 800c6b4:	4770      	bx	lr

0800c6b6 <strncmp>:
 800c6b6:	b510      	push	{r4, lr}
 800c6b8:	b16a      	cbz	r2, 800c6d6 <strncmp+0x20>
 800c6ba:	3901      	subs	r1, #1
 800c6bc:	1884      	adds	r4, r0, r2
 800c6be:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c6c2:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800c6c6:	429a      	cmp	r2, r3
 800c6c8:	d103      	bne.n	800c6d2 <strncmp+0x1c>
 800c6ca:	42a0      	cmp	r0, r4
 800c6cc:	d001      	beq.n	800c6d2 <strncmp+0x1c>
 800c6ce:	2a00      	cmp	r2, #0
 800c6d0:	d1f5      	bne.n	800c6be <strncmp+0x8>
 800c6d2:	1ad0      	subs	r0, r2, r3
 800c6d4:	bd10      	pop	{r4, pc}
 800c6d6:	4610      	mov	r0, r2
 800c6d8:	e7fc      	b.n	800c6d4 <strncmp+0x1e>

0800c6da <strncpy>:
 800c6da:	b510      	push	{r4, lr}
 800c6dc:	3901      	subs	r1, #1
 800c6de:	4603      	mov	r3, r0
 800c6e0:	b132      	cbz	r2, 800c6f0 <strncpy+0x16>
 800c6e2:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800c6e6:	f803 4b01 	strb.w	r4, [r3], #1
 800c6ea:	3a01      	subs	r2, #1
 800c6ec:	2c00      	cmp	r4, #0
 800c6ee:	d1f7      	bne.n	800c6e0 <strncpy+0x6>
 800c6f0:	441a      	add	r2, r3
 800c6f2:	2100      	movs	r1, #0
 800c6f4:	4293      	cmp	r3, r2
 800c6f6:	d100      	bne.n	800c6fa <strncpy+0x20>
 800c6f8:	bd10      	pop	{r4, pc}
 800c6fa:	f803 1b01 	strb.w	r1, [r3], #1
 800c6fe:	e7f9      	b.n	800c6f4 <strncpy+0x1a>

0800c700 <strrchr>:
 800c700:	b538      	push	{r3, r4, r5, lr}
 800c702:	f011 04ff 	ands.w	r4, r1, #255	@ 0xff
 800c706:	4603      	mov	r3, r0
 800c708:	d10e      	bne.n	800c728 <strrchr+0x28>
 800c70a:	4621      	mov	r1, r4
 800c70c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c710:	f7ff bfc4 	b.w	800c69c <strchr>
 800c714:	1c43      	adds	r3, r0, #1
 800c716:	4605      	mov	r5, r0
 800c718:	4621      	mov	r1, r4
 800c71a:	4618      	mov	r0, r3
 800c71c:	f7ff ffbe 	bl	800c69c <strchr>
 800c720:	2800      	cmp	r0, #0
 800c722:	d1f7      	bne.n	800c714 <strrchr+0x14>
 800c724:	4628      	mov	r0, r5
 800c726:	bd38      	pop	{r3, r4, r5, pc}
 800c728:	2500      	movs	r5, #0
 800c72a:	e7f5      	b.n	800c718 <strrchr+0x18>

0800c72c <strstr>:
 800c72c:	780a      	ldrb	r2, [r1, #0]
 800c72e:	b570      	push	{r4, r5, r6, lr}
 800c730:	b96a      	cbnz	r2, 800c74e <strstr+0x22>
 800c732:	bd70      	pop	{r4, r5, r6, pc}
 800c734:	429a      	cmp	r2, r3
 800c736:	d109      	bne.n	800c74c <strstr+0x20>
 800c738:	460c      	mov	r4, r1
 800c73a:	4605      	mov	r5, r0
 800c73c:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800c740:	2b00      	cmp	r3, #0
 800c742:	d0f6      	beq.n	800c732 <strstr+0x6>
 800c744:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800c748:	429e      	cmp	r6, r3
 800c74a:	d0f7      	beq.n	800c73c <strstr+0x10>
 800c74c:	3001      	adds	r0, #1
 800c74e:	7803      	ldrb	r3, [r0, #0]
 800c750:	2b00      	cmp	r3, #0
 800c752:	d1ef      	bne.n	800c734 <strstr+0x8>
 800c754:	4618      	mov	r0, r3
 800c756:	e7ec      	b.n	800c732 <strstr+0x6>

0800c758 <validate_structure>:
 800c758:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c75a:	6801      	ldr	r1, [r0, #0]
 800c75c:	293b      	cmp	r1, #59	@ 0x3b
 800c75e:	4604      	mov	r4, r0
 800c760:	d911      	bls.n	800c786 <validate_structure+0x2e>
 800c762:	223c      	movs	r2, #60	@ 0x3c
 800c764:	4668      	mov	r0, sp
 800c766:	f000 fe01 	bl	800d36c <div>
 800c76a:	9a01      	ldr	r2, [sp, #4]
 800c76c:	6863      	ldr	r3, [r4, #4]
 800c76e:	9900      	ldr	r1, [sp, #0]
 800c770:	2a00      	cmp	r2, #0
 800c772:	440b      	add	r3, r1
 800c774:	6063      	str	r3, [r4, #4]
 800c776:	bfbb      	ittet	lt
 800c778:	323c      	addlt	r2, #60	@ 0x3c
 800c77a:	f103 33ff 	addlt.w	r3, r3, #4294967295
 800c77e:	6022      	strge	r2, [r4, #0]
 800c780:	6022      	strlt	r2, [r4, #0]
 800c782:	bfb8      	it	lt
 800c784:	6063      	strlt	r3, [r4, #4]
 800c786:	6861      	ldr	r1, [r4, #4]
 800c788:	293b      	cmp	r1, #59	@ 0x3b
 800c78a:	d911      	bls.n	800c7b0 <validate_structure+0x58>
 800c78c:	223c      	movs	r2, #60	@ 0x3c
 800c78e:	4668      	mov	r0, sp
 800c790:	f000 fdec 	bl	800d36c <div>
 800c794:	9a01      	ldr	r2, [sp, #4]
 800c796:	68a3      	ldr	r3, [r4, #8]
 800c798:	9900      	ldr	r1, [sp, #0]
 800c79a:	2a00      	cmp	r2, #0
 800c79c:	440b      	add	r3, r1
 800c79e:	60a3      	str	r3, [r4, #8]
 800c7a0:	bfbb      	ittet	lt
 800c7a2:	323c      	addlt	r2, #60	@ 0x3c
 800c7a4:	f103 33ff 	addlt.w	r3, r3, #4294967295
 800c7a8:	6062      	strge	r2, [r4, #4]
 800c7aa:	6062      	strlt	r2, [r4, #4]
 800c7ac:	bfb8      	it	lt
 800c7ae:	60a3      	strlt	r3, [r4, #8]
 800c7b0:	68a1      	ldr	r1, [r4, #8]
 800c7b2:	2917      	cmp	r1, #23
 800c7b4:	d911      	bls.n	800c7da <validate_structure+0x82>
 800c7b6:	2218      	movs	r2, #24
 800c7b8:	4668      	mov	r0, sp
 800c7ba:	f000 fdd7 	bl	800d36c <div>
 800c7be:	9a01      	ldr	r2, [sp, #4]
 800c7c0:	68e3      	ldr	r3, [r4, #12]
 800c7c2:	9900      	ldr	r1, [sp, #0]
 800c7c4:	2a00      	cmp	r2, #0
 800c7c6:	440b      	add	r3, r1
 800c7c8:	60e3      	str	r3, [r4, #12]
 800c7ca:	bfbb      	ittet	lt
 800c7cc:	3218      	addlt	r2, #24
 800c7ce:	f103 33ff 	addlt.w	r3, r3, #4294967295
 800c7d2:	60a2      	strge	r2, [r4, #8]
 800c7d4:	60a2      	strlt	r2, [r4, #8]
 800c7d6:	bfb8      	it	lt
 800c7d8:	60e3      	strlt	r3, [r4, #12]
 800c7da:	6921      	ldr	r1, [r4, #16]
 800c7dc:	290b      	cmp	r1, #11
 800c7de:	d911      	bls.n	800c804 <validate_structure+0xac>
 800c7e0:	220c      	movs	r2, #12
 800c7e2:	4668      	mov	r0, sp
 800c7e4:	f000 fdc2 	bl	800d36c <div>
 800c7e8:	9a01      	ldr	r2, [sp, #4]
 800c7ea:	6963      	ldr	r3, [r4, #20]
 800c7ec:	9900      	ldr	r1, [sp, #0]
 800c7ee:	2a00      	cmp	r2, #0
 800c7f0:	440b      	add	r3, r1
 800c7f2:	6163      	str	r3, [r4, #20]
 800c7f4:	bfbb      	ittet	lt
 800c7f6:	320c      	addlt	r2, #12
 800c7f8:	f103 33ff 	addlt.w	r3, r3, #4294967295
 800c7fc:	6122      	strge	r2, [r4, #16]
 800c7fe:	6122      	strlt	r2, [r4, #16]
 800c800:	bfb8      	it	lt
 800c802:	6163      	strlt	r3, [r4, #20]
 800c804:	6963      	ldr	r3, [r4, #20]
 800c806:	079a      	lsls	r2, r3, #30
 800c808:	d11c      	bne.n	800c844 <validate_structure+0xec>
 800c80a:	2164      	movs	r1, #100	@ 0x64
 800c80c:	fb93 f2f1 	sdiv	r2, r3, r1
 800c810:	fb01 3212 	mls	r2, r1, r2, r3
 800c814:	b9c2      	cbnz	r2, 800c848 <validate_structure+0xf0>
 800c816:	f203 736c 	addw	r3, r3, #1900	@ 0x76c
 800c81a:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800c81e:	fb93 f1f2 	sdiv	r1, r3, r2
 800c822:	fb02 3311 	mls	r3, r2, r1, r3
 800c826:	2b00      	cmp	r3, #0
 800c828:	bf14      	ite	ne
 800c82a:	231c      	movne	r3, #28
 800c82c:	231d      	moveq	r3, #29
 800c82e:	68e2      	ldr	r2, [r4, #12]
 800c830:	2a00      	cmp	r2, #0
 800c832:	dc0b      	bgt.n	800c84c <validate_structure+0xf4>
 800c834:	4d31      	ldr	r5, [pc, #196]	@ (800c8fc <validate_structure+0x1a4>)
 800c836:	200b      	movs	r0, #11
 800c838:	2164      	movs	r1, #100	@ 0x64
 800c83a:	68e6      	ldr	r6, [r4, #12]
 800c83c:	2e00      	cmp	r6, #0
 800c83e:	dd30      	ble.n	800c8a2 <validate_structure+0x14a>
 800c840:	b003      	add	sp, #12
 800c842:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c844:	231c      	movs	r3, #28
 800c846:	e7f2      	b.n	800c82e <validate_structure+0xd6>
 800c848:	231d      	movs	r3, #29
 800c84a:	e7f0      	b.n	800c82e <validate_structure+0xd6>
 800c84c:	4d2b      	ldr	r5, [pc, #172]	@ (800c8fc <validate_structure+0x1a4>)
 800c84e:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
 800c852:	2a01      	cmp	r2, #1
 800c854:	bf14      	ite	ne
 800c856:	f855 0022 	ldrne.w	r0, [r5, r2, lsl #2]
 800c85a:	4618      	moveq	r0, r3
 800c85c:	4281      	cmp	r1, r0
 800c85e:	ddef      	ble.n	800c840 <validate_structure+0xe8>
 800c860:	3201      	adds	r2, #1
 800c862:	1a09      	subs	r1, r1, r0
 800c864:	2a0c      	cmp	r2, #12
 800c866:	60e1      	str	r1, [r4, #12]
 800c868:	6122      	str	r2, [r4, #16]
 800c86a:	d1f0      	bne.n	800c84e <validate_structure+0xf6>
 800c86c:	6963      	ldr	r3, [r4, #20]
 800c86e:	2100      	movs	r1, #0
 800c870:	1c5a      	adds	r2, r3, #1
 800c872:	6121      	str	r1, [r4, #16]
 800c874:	0791      	lsls	r1, r2, #30
 800c876:	6162      	str	r2, [r4, #20]
 800c878:	d13c      	bne.n	800c8f4 <validate_structure+0x19c>
 800c87a:	2164      	movs	r1, #100	@ 0x64
 800c87c:	fb92 f0f1 	sdiv	r0, r2, r1
 800c880:	fb01 2210 	mls	r2, r1, r0, r2
 800c884:	2a00      	cmp	r2, #0
 800c886:	d137      	bne.n	800c8f8 <validate_structure+0x1a0>
 800c888:	f203 736d 	addw	r3, r3, #1901	@ 0x76d
 800c88c:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800c890:	fb93 f1f2 	sdiv	r1, r3, r2
 800c894:	fb02 3311 	mls	r3, r2, r1, r3
 800c898:	2b00      	cmp	r3, #0
 800c89a:	bf14      	ite	ne
 800c89c:	231c      	movne	r3, #28
 800c89e:	231d      	moveq	r3, #29
 800c8a0:	e7d5      	b.n	800c84e <validate_structure+0xf6>
 800c8a2:	6922      	ldr	r2, [r4, #16]
 800c8a4:	3a01      	subs	r2, #1
 800c8a6:	6122      	str	r2, [r4, #16]
 800c8a8:	3201      	adds	r2, #1
 800c8aa:	d116      	bne.n	800c8da <validate_structure+0x182>
 800c8ac:	6963      	ldr	r3, [r4, #20]
 800c8ae:	1e5a      	subs	r2, r3, #1
 800c8b0:	0797      	lsls	r7, r2, #30
 800c8b2:	e9c4 0204 	strd	r0, r2, [r4, #16]
 800c8b6:	d119      	bne.n	800c8ec <validate_structure+0x194>
 800c8b8:	fb92 f7f1 	sdiv	r7, r2, r1
 800c8bc:	fb01 2217 	mls	r2, r1, r7, r2
 800c8c0:	b9b2      	cbnz	r2, 800c8f0 <validate_structure+0x198>
 800c8c2:	f203 736b 	addw	r3, r3, #1899	@ 0x76b
 800c8c6:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800c8ca:	fb93 f7f2 	sdiv	r7, r3, r2
 800c8ce:	fb02 3317 	mls	r3, r2, r7, r3
 800c8d2:	2b00      	cmp	r3, #0
 800c8d4:	bf14      	ite	ne
 800c8d6:	231c      	movne	r3, #28
 800c8d8:	231d      	moveq	r3, #29
 800c8da:	6922      	ldr	r2, [r4, #16]
 800c8dc:	2a01      	cmp	r2, #1
 800c8de:	bf14      	ite	ne
 800c8e0:	f855 2022 	ldrne.w	r2, [r5, r2, lsl #2]
 800c8e4:	461a      	moveq	r2, r3
 800c8e6:	4432      	add	r2, r6
 800c8e8:	60e2      	str	r2, [r4, #12]
 800c8ea:	e7a6      	b.n	800c83a <validate_structure+0xe2>
 800c8ec:	231c      	movs	r3, #28
 800c8ee:	e7f4      	b.n	800c8da <validate_structure+0x182>
 800c8f0:	231d      	movs	r3, #29
 800c8f2:	e7f2      	b.n	800c8da <validate_structure+0x182>
 800c8f4:	231c      	movs	r3, #28
 800c8f6:	e7aa      	b.n	800c84e <validate_structure+0xf6>
 800c8f8:	231d      	movs	r3, #29
 800c8fa:	e7a8      	b.n	800c84e <validate_structure+0xf6>
 800c8fc:	08012e20 	.word	0x08012e20

0800c900 <mktime>:
 800c900:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c904:	b085      	sub	sp, #20
 800c906:	4607      	mov	r7, r0
 800c908:	f003 fa44 	bl	800fd94 <__gettzinfo>
 800c90c:	4681      	mov	r9, r0
 800c90e:	4638      	mov	r0, r7
 800c910:	f7ff ff22 	bl	800c758 <validate_structure>
 800c914:	e9d7 4300 	ldrd	r4, r3, [r7]
 800c918:	223c      	movs	r2, #60	@ 0x3c
 800c91a:	fb02 4403 	mla	r4, r2, r3, r4
 800c91e:	68bb      	ldr	r3, [r7, #8]
 800c920:	697d      	ldr	r5, [r7, #20]
 800c922:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 800c926:	fb02 4403 	mla	r4, r2, r3, r4
 800c92a:	e9d7 6303 	ldrd	r6, r3, [r7, #12]
 800c92e:	4ac1      	ldr	r2, [pc, #772]	@ (800cc34 <mktime+0x334>)
 800c930:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800c934:	3e01      	subs	r6, #1
 800c936:	2b01      	cmp	r3, #1
 800c938:	4416      	add	r6, r2
 800c93a:	dd11      	ble.n	800c960 <mktime+0x60>
 800c93c:	07a9      	lsls	r1, r5, #30
 800c93e:	d10f      	bne.n	800c960 <mktime+0x60>
 800c940:	2264      	movs	r2, #100	@ 0x64
 800c942:	fb95 f3f2 	sdiv	r3, r5, r2
 800c946:	fb02 5313 	mls	r3, r2, r3, r5
 800c94a:	b943      	cbnz	r3, 800c95e <mktime+0x5e>
 800c94c:	f205 736c 	addw	r3, r5, #1900	@ 0x76c
 800c950:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800c954:	fb93 f1f2 	sdiv	r1, r3, r2
 800c958:	fb02 3311 	mls	r3, r2, r1, r3
 800c95c:	b903      	cbnz	r3, 800c960 <mktime+0x60>
 800c95e:	3601      	adds	r6, #1
 800c960:	f505 531c 	add.w	r3, r5, #9984	@ 0x2700
 800c964:	3310      	adds	r3, #16
 800c966:	f644 6220 	movw	r2, #20000	@ 0x4e20
 800c96a:	4293      	cmp	r3, r2
 800c96c:	61fe      	str	r6, [r7, #28]
 800c96e:	f200 8167 	bhi.w	800cc40 <mktime+0x340>
 800c972:	2d46      	cmp	r5, #70	@ 0x46
 800c974:	f340 808e 	ble.w	800ca94 <mktime+0x194>
 800c978:	2346      	movs	r3, #70	@ 0x46
 800c97a:	f240 1c6d 	movw	ip, #365	@ 0x16d
 800c97e:	2164      	movs	r1, #100	@ 0x64
 800c980:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 800c984:	079a      	lsls	r2, r3, #30
 800c986:	d17f      	bne.n	800ca88 <mktime+0x188>
 800c988:	fb93 f2f1 	sdiv	r2, r3, r1
 800c98c:	fb01 3212 	mls	r2, r1, r2, r3
 800c990:	2a00      	cmp	r2, #0
 800c992:	d17c      	bne.n	800ca8e <mktime+0x18e>
 800c994:	f203 726c 	addw	r2, r3, #1900	@ 0x76c
 800c998:	fb92 fef0 	sdiv	lr, r2, r0
 800c99c:	fb00 221e 	mls	r2, r0, lr, r2
 800c9a0:	2a00      	cmp	r2, #0
 800c9a2:	bf14      	ite	ne
 800c9a4:	4662      	movne	r2, ip
 800c9a6:	f44f 72b7 	moveq.w	r2, #366	@ 0x16e
 800c9aa:	3301      	adds	r3, #1
 800c9ac:	429d      	cmp	r5, r3
 800c9ae:	4416      	add	r6, r2
 800c9b0:	d1e8      	bne.n	800c984 <mktime+0x84>
 800c9b2:	4ba1      	ldr	r3, [pc, #644]	@ (800cc38 <mktime+0x338>)
 800c9b4:	ea4f 78e4 	mov.w	r8, r4, asr #31
 800c9b8:	fbc6 4803 	smlal	r4, r8, r6, r3
 800c9bc:	f000 f9fa 	bl	800cdb4 <__tz_lock>
 800c9c0:	f000 fa04 	bl	800cdcc <_tzset_unlocked>
 800c9c4:	4b9d      	ldr	r3, [pc, #628]	@ (800cc3c <mktime+0x33c>)
 800c9c6:	681b      	ldr	r3, [r3, #0]
 800c9c8:	2b00      	cmp	r3, #0
 800c9ca:	f000 8140 	beq.w	800cc4e <mktime+0x34e>
 800c9ce:	f8d7 a020 	ldr.w	sl, [r7, #32]
 800c9d2:	6978      	ldr	r0, [r7, #20]
 800c9d4:	4653      	mov	r3, sl
 800c9d6:	2b01      	cmp	r3, #1
 800c9d8:	bfa8      	it	ge
 800c9da:	2301      	movge	r3, #1
 800c9dc:	9301      	str	r3, [sp, #4]
 800c9de:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800c9e2:	f200 706c 	addw	r0, r0, #1900	@ 0x76c
 800c9e6:	4283      	cmp	r3, r0
 800c9e8:	f040 8096 	bne.w	800cb18 <mktime+0x218>
 800c9ec:	e9d9 2108 	ldrd	r2, r1, [r9, #32]
 800c9f0:	f8d9 0050 	ldr.w	r0, [r9, #80]	@ 0x50
 800c9f4:	f8d9 c04c 	ldr.w	ip, [r9, #76]	@ 0x4c
 800c9f8:	1a13      	subs	r3, r2, r0
 800c9fa:	9303      	str	r3, [sp, #12]
 800c9fc:	f8d9 3048 	ldr.w	r3, [r9, #72]	@ 0x48
 800ca00:	9302      	str	r3, [sp, #8]
 800ca02:	9a02      	ldr	r2, [sp, #8]
 800ca04:	f8d9 3028 	ldr.w	r3, [r9, #40]	@ 0x28
 800ca08:	eb61 7be0 	sbc.w	fp, r1, r0, asr #31
 800ca0c:	ebb2 0e03 	subs.w	lr, r2, r3
 800ca10:	eb6c 71e3 	sbc.w	r1, ip, r3, asr #31
 800ca14:	4574      	cmp	r4, lr
 800ca16:	eb78 0201 	sbcs.w	r2, r8, r1
 800ca1a:	f280 8085 	bge.w	800cb28 <mktime+0x228>
 800ca1e:	f8d9 2000 	ldr.w	r2, [r9]
 800ca22:	2a00      	cmp	r2, #0
 800ca24:	f000 808d 	beq.w	800cb42 <mktime+0x242>
 800ca28:	9a03      	ldr	r2, [sp, #12]
 800ca2a:	4294      	cmp	r4, r2
 800ca2c:	eb78 020b 	sbcs.w	r2, r8, fp
 800ca30:	f2c0 810a 	blt.w	800cc48 <mktime+0x348>
 800ca34:	4574      	cmp	r4, lr
 800ca36:	eb78 0101 	sbcs.w	r1, r8, r1
 800ca3a:	bfb4      	ite	lt
 800ca3c:	f04f 0b01 	movlt.w	fp, #1
 800ca40:	f04f 0b00 	movge.w	fp, #0
 800ca44:	f1ba 0f00 	cmp.w	sl, #0
 800ca48:	f280 8087 	bge.w	800cb5a <mktime+0x25a>
 800ca4c:	f1bb 0f01 	cmp.w	fp, #1
 800ca50:	f040 80ff 	bne.w	800cc52 <mktime+0x352>
 800ca54:	f8d9 3050 	ldr.w	r3, [r9, #80]	@ 0x50
 800ca58:	191c      	adds	r4, r3, r4
 800ca5a:	eb48 78e3 	adc.w	r8, r8, r3, asr #31
 800ca5e:	f04f 0b01 	mov.w	fp, #1
 800ca62:	f000 f9ad 	bl	800cdc0 <__tz_unlock>
 800ca66:	3604      	adds	r6, #4
 800ca68:	2307      	movs	r3, #7
 800ca6a:	fb96 f3f3 	sdiv	r3, r6, r3
 800ca6e:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800ca72:	1af6      	subs	r6, r6, r3
 800ca74:	f100 80db 	bmi.w	800cc2e <mktime+0x32e>
 800ca78:	f8c7 b020 	str.w	fp, [r7, #32]
 800ca7c:	61be      	str	r6, [r7, #24]
 800ca7e:	4620      	mov	r0, r4
 800ca80:	4641      	mov	r1, r8
 800ca82:	b005      	add	sp, #20
 800ca84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca88:	f240 126d 	movw	r2, #365	@ 0x16d
 800ca8c:	e78d      	b.n	800c9aa <mktime+0xaa>
 800ca8e:	f44f 72b7 	mov.w	r2, #366	@ 0x16e
 800ca92:	e78a      	b.n	800c9aa <mktime+0xaa>
 800ca94:	d08d      	beq.n	800c9b2 <mktime+0xb2>
 800ca96:	2345      	movs	r3, #69	@ 0x45
 800ca98:	f240 1c6d 	movw	ip, #365	@ 0x16d
 800ca9c:	2164      	movs	r1, #100	@ 0x64
 800ca9e:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 800caa2:	e012      	b.n	800caca <mktime+0x1ca>
 800caa4:	bb62      	cbnz	r2, 800cb00 <mktime+0x200>
 800caa6:	fb93 f2f1 	sdiv	r2, r3, r1
 800caaa:	fb01 3212 	mls	r2, r1, r2, r3
 800caae:	bb52      	cbnz	r2, 800cb06 <mktime+0x206>
 800cab0:	f203 726c 	addw	r2, r3, #1900	@ 0x76c
 800cab4:	fb92 fef0 	sdiv	lr, r2, r0
 800cab8:	fb00 221e 	mls	r2, r0, lr, r2
 800cabc:	2a00      	cmp	r2, #0
 800cabe:	bf14      	ite	ne
 800cac0:	4662      	movne	r2, ip
 800cac2:	f44f 72b7 	moveq.w	r2, #366	@ 0x16e
 800cac6:	1ab6      	subs	r6, r6, r2
 800cac8:	3b01      	subs	r3, #1
 800caca:	429d      	cmp	r5, r3
 800cacc:	f003 0203 	and.w	r2, r3, #3
 800cad0:	dbe8      	blt.n	800caa4 <mktime+0x1a4>
 800cad2:	b9da      	cbnz	r2, 800cb0c <mktime+0x20c>
 800cad4:	2264      	movs	r2, #100	@ 0x64
 800cad6:	fb95 f3f2 	sdiv	r3, r5, r2
 800cada:	fb02 5313 	mls	r3, r2, r3, r5
 800cade:	b9c3      	cbnz	r3, 800cb12 <mktime+0x212>
 800cae0:	f205 736c 	addw	r3, r5, #1900	@ 0x76c
 800cae4:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800cae8:	fb93 f1f2 	sdiv	r1, r3, r2
 800caec:	fb02 3311 	mls	r3, r2, r1, r3
 800caf0:	2b00      	cmp	r3, #0
 800caf2:	f240 136d 	movw	r3, #365	@ 0x16d
 800caf6:	bf08      	it	eq
 800caf8:	f44f 73b7 	moveq.w	r3, #366	@ 0x16e
 800cafc:	1af6      	subs	r6, r6, r3
 800cafe:	e758      	b.n	800c9b2 <mktime+0xb2>
 800cb00:	f240 126d 	movw	r2, #365	@ 0x16d
 800cb04:	e7df      	b.n	800cac6 <mktime+0x1c6>
 800cb06:	f44f 72b7 	mov.w	r2, #366	@ 0x16e
 800cb0a:	e7dc      	b.n	800cac6 <mktime+0x1c6>
 800cb0c:	f240 136d 	movw	r3, #365	@ 0x16d
 800cb10:	e7f4      	b.n	800cafc <mktime+0x1fc>
 800cb12:	f44f 73b7 	mov.w	r3, #366	@ 0x16e
 800cb16:	e7f1      	b.n	800cafc <mktime+0x1fc>
 800cb18:	f000 f8a2 	bl	800cc60 <__tzcalc_limits>
 800cb1c:	2800      	cmp	r0, #0
 800cb1e:	f47f af65 	bne.w	800c9ec <mktime+0xec>
 800cb22:	f8dd b004 	ldr.w	fp, [sp, #4]
 800cb26:	e791      	b.n	800ca4c <mktime+0x14c>
 800cb28:	9a02      	ldr	r2, [sp, #8]
 800cb2a:	1a12      	subs	r2, r2, r0
 800cb2c:	9202      	str	r2, [sp, #8]
 800cb2e:	ea4f 72e0 	mov.w	r2, r0, asr #31
 800cb32:	eb6c 0c02 	sbc.w	ip, ip, r2
 800cb36:	9a02      	ldr	r2, [sp, #8]
 800cb38:	4294      	cmp	r4, r2
 800cb3a:	eb78 0c0c 	sbcs.w	ip, r8, ip
 800cb3e:	dbf0      	blt.n	800cb22 <mktime+0x222>
 800cb40:	e76d      	b.n	800ca1e <mktime+0x11e>
 800cb42:	9a03      	ldr	r2, [sp, #12]
 800cb44:	4294      	cmp	r4, r2
 800cb46:	eb78 020b 	sbcs.w	r2, r8, fp
 800cb4a:	f6ff af73 	blt.w	800ca34 <mktime+0x134>
 800cb4e:	f1ba 0f00 	cmp.w	sl, #0
 800cb52:	f6ff af7f 	blt.w	800ca54 <mktime+0x154>
 800cb56:	f04f 0b01 	mov.w	fp, #1
 800cb5a:	9a01      	ldr	r2, [sp, #4]
 800cb5c:	ea82 020b 	eor.w	r2, r2, fp
 800cb60:	2a01      	cmp	r2, #1
 800cb62:	f47f af73 	bne.w	800ca4c <mktime+0x14c>
 800cb66:	f1bb 0f00 	cmp.w	fp, #0
 800cb6a:	d035      	beq.n	800cbd8 <mktime+0x2d8>
 800cb6c:	1a1b      	subs	r3, r3, r0
 800cb6e:	683a      	ldr	r2, [r7, #0]
 800cb70:	f8d7 a00c 	ldr.w	sl, [r7, #12]
 800cb74:	441a      	add	r2, r3
 800cb76:	191c      	adds	r4, r3, r4
 800cb78:	603a      	str	r2, [r7, #0]
 800cb7a:	4638      	mov	r0, r7
 800cb7c:	eb48 78e3 	adc.w	r8, r8, r3, asr #31
 800cb80:	f7ff fdea 	bl	800c758 <validate_structure>
 800cb84:	68fa      	ldr	r2, [r7, #12]
 800cb86:	ebb2 020a 	subs.w	r2, r2, sl
 800cb8a:	f43f af5f 	beq.w	800ca4c <mktime+0x14c>
 800cb8e:	2a01      	cmp	r2, #1
 800cb90:	dc24      	bgt.n	800cbdc <mktime+0x2dc>
 800cb92:	1c93      	adds	r3, r2, #2
 800cb94:	bfd8      	it	le
 800cb96:	2201      	movle	r2, #1
 800cb98:	69fb      	ldr	r3, [r7, #28]
 800cb9a:	18d3      	adds	r3, r2, r3
 800cb9c:	d527      	bpl.n	800cbee <mktime+0x2ee>
 800cb9e:	1e6b      	subs	r3, r5, #1
 800cba0:	0798      	lsls	r0, r3, #30
 800cba2:	d11e      	bne.n	800cbe2 <mktime+0x2e2>
 800cba4:	2164      	movs	r1, #100	@ 0x64
 800cba6:	fb93 f0f1 	sdiv	r0, r3, r1
 800cbaa:	fb01 3310 	mls	r3, r1, r0, r3
 800cbae:	b9db      	cbnz	r3, 800cbe8 <mktime+0x2e8>
 800cbb0:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 800cbb4:	f205 756b 	addw	r5, r5, #1899	@ 0x76b
 800cbb8:	fb95 f1f3 	sdiv	r1, r5, r3
 800cbbc:	fb03 5511 	mls	r5, r3, r1, r5
 800cbc0:	2d00      	cmp	r5, #0
 800cbc2:	f240 136d 	movw	r3, #365	@ 0x16d
 800cbc6:	bf18      	it	ne
 800cbc8:	f44f 73b6 	movne.w	r3, #364	@ 0x16c
 800cbcc:	61fb      	str	r3, [r7, #28]
 800cbce:	4416      	add	r6, r2
 800cbd0:	e73c      	b.n	800ca4c <mktime+0x14c>
 800cbd2:	f04f 0b00 	mov.w	fp, #0
 800cbd6:	e7c0      	b.n	800cb5a <mktime+0x25a>
 800cbd8:	1ac3      	subs	r3, r0, r3
 800cbda:	e7c8      	b.n	800cb6e <mktime+0x26e>
 800cbdc:	f04f 32ff 	mov.w	r2, #4294967295
 800cbe0:	e7da      	b.n	800cb98 <mktime+0x298>
 800cbe2:	f44f 73b6 	mov.w	r3, #364	@ 0x16c
 800cbe6:	e7f1      	b.n	800cbcc <mktime+0x2cc>
 800cbe8:	f240 136d 	movw	r3, #365	@ 0x16d
 800cbec:	e7ee      	b.n	800cbcc <mktime+0x2cc>
 800cbee:	07a9      	lsls	r1, r5, #30
 800cbf0:	d117      	bne.n	800cc22 <mktime+0x322>
 800cbf2:	2064      	movs	r0, #100	@ 0x64
 800cbf4:	fb95 f1f0 	sdiv	r1, r5, r0
 800cbf8:	fb00 5111 	mls	r1, r0, r1, r5
 800cbfc:	b9a1      	cbnz	r1, 800cc28 <mktime+0x328>
 800cbfe:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 800cc02:	f205 756c 	addw	r5, r5, #1900	@ 0x76c
 800cc06:	fb95 f0f1 	sdiv	r0, r5, r1
 800cc0a:	fb01 5510 	mls	r5, r1, r0, r5
 800cc0e:	2d00      	cmp	r5, #0
 800cc10:	f240 116d 	movw	r1, #365	@ 0x16d
 800cc14:	bf08      	it	eq
 800cc16:	f44f 71b7 	moveq.w	r1, #366	@ 0x16e
 800cc1a:	428b      	cmp	r3, r1
 800cc1c:	bfa8      	it	ge
 800cc1e:	1a5b      	subge	r3, r3, r1
 800cc20:	e7d4      	b.n	800cbcc <mktime+0x2cc>
 800cc22:	f240 116d 	movw	r1, #365	@ 0x16d
 800cc26:	e7f8      	b.n	800cc1a <mktime+0x31a>
 800cc28:	f44f 71b7 	mov.w	r1, #366	@ 0x16e
 800cc2c:	e7f5      	b.n	800cc1a <mktime+0x31a>
 800cc2e:	3607      	adds	r6, #7
 800cc30:	e722      	b.n	800ca78 <mktime+0x178>
 800cc32:	bf00      	nop
 800cc34:	08012df0 	.word	0x08012df0
 800cc38:	00015180 	.word	0x00015180
 800cc3c:	2000983c 	.word	0x2000983c
 800cc40:	f04f 34ff 	mov.w	r4, #4294967295
 800cc44:	46a0      	mov	r8, r4
 800cc46:	e71a      	b.n	800ca7e <mktime+0x17e>
 800cc48:	f1ba 0f00 	cmp.w	sl, #0
 800cc4c:	dac1      	bge.n	800cbd2 <mktime+0x2d2>
 800cc4e:	f04f 0b00 	mov.w	fp, #0
 800cc52:	f8d9 3028 	ldr.w	r3, [r9, #40]	@ 0x28
 800cc56:	191c      	adds	r4, r3, r4
 800cc58:	eb48 78e3 	adc.w	r8, r8, r3, asr #31
 800cc5c:	e701      	b.n	800ca62 <mktime+0x162>
 800cc5e:	bf00      	nop

0800cc60 <__tzcalc_limits>:
 800cc60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cc64:	4604      	mov	r4, r0
 800cc66:	f003 f895 	bl	800fd94 <__gettzinfo>
 800cc6a:	f240 73b1 	movw	r3, #1969	@ 0x7b1
 800cc6e:	429c      	cmp	r4, r3
 800cc70:	f340 8099 	ble.w	800cda6 <__tzcalc_limits+0x146>
 800cc74:	f46f 67f6 	mvn.w	r7, #1968	@ 0x7b0
 800cc78:	19e5      	adds	r5, r4, r7
 800cc7a:	f2a4 73b2 	subw	r3, r4, #1970	@ 0x7b2
 800cc7e:	f240 126d 	movw	r2, #365	@ 0x16d
 800cc82:	10ad      	asrs	r5, r5, #2
 800cc84:	fb02 5503 	mla	r5, r2, r3, r5
 800cc88:	f46f 6cc8 	mvn.w	ip, #1600	@ 0x640
 800cc8c:	f06f 0263 	mvn.w	r2, #99	@ 0x63
 800cc90:	f2a4 736d 	subw	r3, r4, #1901	@ 0x76d
 800cc94:	4f45      	ldr	r7, [pc, #276]	@ (800cdac <__tzcalc_limits+0x14c>)
 800cc96:	fb93 f3f2 	sdiv	r3, r3, r2
 800cc9a:	441d      	add	r5, r3
 800cc9c:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800cca0:	eb04 030c 	add.w	r3, r4, ip
 800cca4:	6044      	str	r4, [r0, #4]
 800cca6:	fbb3 f3f2 	udiv	r3, r3, r2
 800ccaa:	4601      	mov	r1, r0
 800ccac:	441d      	add	r5, r3
 800ccae:	f100 0c50 	add.w	ip, r0, #80	@ 0x50
 800ccb2:	7a0b      	ldrb	r3, [r1, #8]
 800ccb4:	694a      	ldr	r2, [r1, #20]
 800ccb6:	2b4a      	cmp	r3, #74	@ 0x4a
 800ccb8:	d133      	bne.n	800cd22 <__tzcalc_limits+0xc2>
 800ccba:	07a6      	lsls	r6, r4, #30
 800ccbc:	eb05 0302 	add.w	r3, r5, r2
 800ccc0:	d106      	bne.n	800ccd0 <__tzcalc_limits+0x70>
 800ccc2:	f04f 0e64 	mov.w	lr, #100	@ 0x64
 800ccc6:	fb94 f6fe 	sdiv	r6, r4, lr
 800ccca:	fb0e 4616 	mls	r6, lr, r6, r4
 800ccce:	b936      	cbnz	r6, 800ccde <__tzcalc_limits+0x7e>
 800ccd0:	f44f 7ec8 	mov.w	lr, #400	@ 0x190
 800ccd4:	fb94 f6fe 	sdiv	r6, r4, lr
 800ccd8:	fb0e 4616 	mls	r6, lr, r6, r4
 800ccdc:	b9fe      	cbnz	r6, 800cd1e <__tzcalc_limits+0xbe>
 800ccde:	2a3b      	cmp	r2, #59	@ 0x3b
 800cce0:	bfd4      	ite	le
 800cce2:	2200      	movle	r2, #0
 800cce4:	2201      	movgt	r2, #1
 800cce6:	4413      	add	r3, r2
 800cce8:	3b01      	subs	r3, #1
 800ccea:	698a      	ldr	r2, [r1, #24]
 800ccec:	17d6      	asrs	r6, r2, #31
 800ccee:	fbc3 2607 	smlal	r2, r6, r3, r7
 800ccf2:	6a8b      	ldr	r3, [r1, #40]	@ 0x28
 800ccf4:	18d2      	adds	r2, r2, r3
 800ccf6:	eb46 73e3 	adc.w	r3, r6, r3, asr #31
 800ccfa:	e9c1 2308 	strd	r2, r3, [r1, #32]
 800ccfe:	3128      	adds	r1, #40	@ 0x28
 800cd00:	458c      	cmp	ip, r1
 800cd02:	d1d6      	bne.n	800ccb2 <__tzcalc_limits+0x52>
 800cd04:	e9d0 4308 	ldrd	r4, r3, [r0, #32]
 800cd08:	e9d0 1212 	ldrd	r1, r2, [r0, #72]	@ 0x48
 800cd0c:	428c      	cmp	r4, r1
 800cd0e:	4193      	sbcs	r3, r2
 800cd10:	bfb4      	ite	lt
 800cd12:	2301      	movlt	r3, #1
 800cd14:	2300      	movge	r3, #0
 800cd16:	6003      	str	r3, [r0, #0]
 800cd18:	2001      	movs	r0, #1
 800cd1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cd1e:	2200      	movs	r2, #0
 800cd20:	e7e1      	b.n	800cce6 <__tzcalc_limits+0x86>
 800cd22:	2b44      	cmp	r3, #68	@ 0x44
 800cd24:	d101      	bne.n	800cd2a <__tzcalc_limits+0xca>
 800cd26:	18ab      	adds	r3, r5, r2
 800cd28:	e7df      	b.n	800ccea <__tzcalc_limits+0x8a>
 800cd2a:	07a3      	lsls	r3, r4, #30
 800cd2c:	d105      	bne.n	800cd3a <__tzcalc_limits+0xda>
 800cd2e:	2664      	movs	r6, #100	@ 0x64
 800cd30:	fb94 f3f6 	sdiv	r3, r4, r6
 800cd34:	fb06 4313 	mls	r3, r6, r3, r4
 800cd38:	bb7b      	cbnz	r3, 800cd9a <__tzcalc_limits+0x13a>
 800cd3a:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 800cd3e:	fb94 f6f3 	sdiv	r6, r4, r3
 800cd42:	fb03 4616 	mls	r6, r3, r6, r4
 800cd46:	fab6 f686 	clz	r6, r6
 800cd4a:	0976      	lsrs	r6, r6, #5
 800cd4c:	f8df e060 	ldr.w	lr, [pc, #96]	@ 800cdb0 <__tzcalc_limits+0x150>
 800cd50:	f8d1 900c 	ldr.w	r9, [r1, #12]
 800cd54:	f04f 0a30 	mov.w	sl, #48	@ 0x30
 800cd58:	462b      	mov	r3, r5
 800cd5a:	f04f 0800 	mov.w	r8, #0
 800cd5e:	fb0a e606 	mla	r6, sl, r6, lr
 800cd62:	f108 0801 	add.w	r8, r8, #1
 800cd66:	45c1      	cmp	r9, r8
 800cd68:	f856 e028 	ldr.w	lr, [r6, r8, lsl #2]
 800cd6c:	dc17      	bgt.n	800cd9e <__tzcalc_limits+0x13e>
 800cd6e:	f103 0804 	add.w	r8, r3, #4
 800cd72:	2607      	movs	r6, #7
 800cd74:	fb98 f6f6 	sdiv	r6, r8, r6
 800cd78:	ebc6 06c6 	rsb	r6, r6, r6, lsl #3
 800cd7c:	eba8 0606 	sub.w	r6, r8, r6
 800cd80:	1b92      	subs	r2, r2, r6
 800cd82:	690e      	ldr	r6, [r1, #16]
 800cd84:	f106 36ff 	add.w	r6, r6, #4294967295
 800cd88:	bf48      	it	mi
 800cd8a:	3207      	addmi	r2, #7
 800cd8c:	ebc6 06c6 	rsb	r6, r6, r6, lsl #3
 800cd90:	4432      	add	r2, r6
 800cd92:	4572      	cmp	r2, lr
 800cd94:	da05      	bge.n	800cda2 <__tzcalc_limits+0x142>
 800cd96:	4413      	add	r3, r2
 800cd98:	e7a7      	b.n	800ccea <__tzcalc_limits+0x8a>
 800cd9a:	2601      	movs	r6, #1
 800cd9c:	e7d6      	b.n	800cd4c <__tzcalc_limits+0xec>
 800cd9e:	4473      	add	r3, lr
 800cda0:	e7df      	b.n	800cd62 <__tzcalc_limits+0x102>
 800cda2:	3a07      	subs	r2, #7
 800cda4:	e7f5      	b.n	800cd92 <__tzcalc_limits+0x132>
 800cda6:	2000      	movs	r0, #0
 800cda8:	e7b7      	b.n	800cd1a <__tzcalc_limits+0xba>
 800cdaa:	bf00      	nop
 800cdac:	00015180 	.word	0x00015180
 800cdb0:	08013110 	.word	0x08013110

0800cdb4 <__tz_lock>:
 800cdb4:	4801      	ldr	r0, [pc, #4]	@ (800cdbc <__tz_lock+0x8>)
 800cdb6:	f7f8 be52 	b.w	8005a5e <__retarget_lock_acquire>
 800cdba:	bf00      	nop
 800cdbc:	20008590 	.word	0x20008590

0800cdc0 <__tz_unlock>:
 800cdc0:	4801      	ldr	r0, [pc, #4]	@ (800cdc8 <__tz_unlock+0x8>)
 800cdc2:	f7f8 be56 	b.w	8005a72 <__retarget_lock_release>
 800cdc6:	bf00      	nop
 800cdc8:	20008590 	.word	0x20008590

0800cdcc <_tzset_unlocked>:
 800cdcc:	4b01      	ldr	r3, [pc, #4]	@ (800cdd4 <_tzset_unlocked+0x8>)
 800cdce:	6818      	ldr	r0, [r3, #0]
 800cdd0:	f000 b802 	b.w	800cdd8 <_tzset_unlocked_r>
 800cdd4:	200001bc 	.word	0x200001bc

0800cdd8 <_tzset_unlocked_r>:
 800cdd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cddc:	b08d      	sub	sp, #52	@ 0x34
 800cdde:	4607      	mov	r7, r0
 800cde0:	f002 ffd8 	bl	800fd94 <__gettzinfo>
 800cde4:	49bc      	ldr	r1, [pc, #752]	@ (800d0d8 <_tzset_unlocked_r+0x300>)
 800cde6:	4dbd      	ldr	r5, [pc, #756]	@ (800d0dc <_tzset_unlocked_r+0x304>)
 800cde8:	4604      	mov	r4, r0
 800cdea:	4638      	mov	r0, r7
 800cdec:	f001 fcd4 	bl	800e798 <_getenv_r>
 800cdf0:	4606      	mov	r6, r0
 800cdf2:	bb10      	cbnz	r0, 800ce3a <_tzset_unlocked_r+0x62>
 800cdf4:	4bba      	ldr	r3, [pc, #744]	@ (800d0e0 <_tzset_unlocked_r+0x308>)
 800cdf6:	4abb      	ldr	r2, [pc, #748]	@ (800d0e4 <_tzset_unlocked_r+0x30c>)
 800cdf8:	6018      	str	r0, [r3, #0]
 800cdfa:	4bbb      	ldr	r3, [pc, #748]	@ (800d0e8 <_tzset_unlocked_r+0x310>)
 800cdfc:	62a0      	str	r0, [r4, #40]	@ 0x28
 800cdfe:	6018      	str	r0, [r3, #0]
 800ce00:	4bba      	ldr	r3, [pc, #744]	@ (800d0ec <_tzset_unlocked_r+0x314>)
 800ce02:	6520      	str	r0, [r4, #80]	@ 0x50
 800ce04:	e9c3 2200 	strd	r2, r2, [r3]
 800ce08:	214a      	movs	r1, #74	@ 0x4a
 800ce0a:	2200      	movs	r2, #0
 800ce0c:	2300      	movs	r3, #0
 800ce0e:	e9c4 0003 	strd	r0, r0, [r4, #12]
 800ce12:	e9c4 0005 	strd	r0, r0, [r4, #20]
 800ce16:	e9c4 000d 	strd	r0, r0, [r4, #52]	@ 0x34
 800ce1a:	e9c4 000f 	strd	r0, r0, [r4, #60]	@ 0x3c
 800ce1e:	e9c4 2308 	strd	r2, r3, [r4, #32]
 800ce22:	e9c4 2312 	strd	r2, r3, [r4, #72]	@ 0x48
 800ce26:	6828      	ldr	r0, [r5, #0]
 800ce28:	7221      	strb	r1, [r4, #8]
 800ce2a:	f884 1030 	strb.w	r1, [r4, #48]	@ 0x30
 800ce2e:	f7fd fcb1 	bl	800a794 <free>
 800ce32:	602e      	str	r6, [r5, #0]
 800ce34:	b00d      	add	sp, #52	@ 0x34
 800ce36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce3a:	6829      	ldr	r1, [r5, #0]
 800ce3c:	2900      	cmp	r1, #0
 800ce3e:	f040 808e 	bne.w	800cf5e <_tzset_unlocked_r+0x186>
 800ce42:	6828      	ldr	r0, [r5, #0]
 800ce44:	f7fd fca6 	bl	800a794 <free>
 800ce48:	4630      	mov	r0, r6
 800ce4a:	f7f3 fa21 	bl	8000290 <strlen>
 800ce4e:	1c41      	adds	r1, r0, #1
 800ce50:	4638      	mov	r0, r7
 800ce52:	f7fd fcc9 	bl	800a7e8 <_malloc_r>
 800ce56:	6028      	str	r0, [r5, #0]
 800ce58:	2800      	cmp	r0, #0
 800ce5a:	f040 8086 	bne.w	800cf6a <_tzset_unlocked_r+0x192>
 800ce5e:	4aa2      	ldr	r2, [pc, #648]	@ (800d0e8 <_tzset_unlocked_r+0x310>)
 800ce60:	f8df 8288 	ldr.w	r8, [pc, #648]	@ 800d0ec <_tzset_unlocked_r+0x314>
 800ce64:	f8df a278 	ldr.w	sl, [pc, #632]	@ 800d0e0 <_tzset_unlocked_r+0x308>
 800ce68:	2300      	movs	r3, #0
 800ce6a:	6013      	str	r3, [r2, #0]
 800ce6c:	4aa0      	ldr	r2, [pc, #640]	@ (800d0f0 <_tzset_unlocked_r+0x318>)
 800ce6e:	f8ca 3000 	str.w	r3, [sl]
 800ce72:	2000      	movs	r0, #0
 800ce74:	2100      	movs	r1, #0
 800ce76:	e9c8 2200 	strd	r2, r2, [r8]
 800ce7a:	e9c4 3303 	strd	r3, r3, [r4, #12]
 800ce7e:	e9c4 3305 	strd	r3, r3, [r4, #20]
 800ce82:	e9c4 0108 	strd	r0, r1, [r4, #32]
 800ce86:	e9c4 330d 	strd	r3, r3, [r4, #52]	@ 0x34
 800ce8a:	e9c4 330f 	strd	r3, r3, [r4, #60]	@ 0x3c
 800ce8e:	e9c4 0112 	strd	r0, r1, [r4, #72]	@ 0x48
 800ce92:	224a      	movs	r2, #74	@ 0x4a
 800ce94:	7222      	strb	r2, [r4, #8]
 800ce96:	62a3      	str	r3, [r4, #40]	@ 0x28
 800ce98:	f884 2030 	strb.w	r2, [r4, #48]	@ 0x30
 800ce9c:	6523      	str	r3, [r4, #80]	@ 0x50
 800ce9e:	7833      	ldrb	r3, [r6, #0]
 800cea0:	2b3a      	cmp	r3, #58	@ 0x3a
 800cea2:	bf08      	it	eq
 800cea4:	3601      	addeq	r6, #1
 800cea6:	7833      	ldrb	r3, [r6, #0]
 800cea8:	2b3c      	cmp	r3, #60	@ 0x3c
 800ceaa:	d162      	bne.n	800cf72 <_tzset_unlocked_r+0x19a>
 800ceac:	1c75      	adds	r5, r6, #1
 800ceae:	4a91      	ldr	r2, [pc, #580]	@ (800d0f4 <_tzset_unlocked_r+0x31c>)
 800ceb0:	4991      	ldr	r1, [pc, #580]	@ (800d0f8 <_tzset_unlocked_r+0x320>)
 800ceb2:	ab0a      	add	r3, sp, #40	@ 0x28
 800ceb4:	4628      	mov	r0, r5
 800ceb6:	f7ff fb41 	bl	800c53c <siscanf>
 800ceba:	2800      	cmp	r0, #0
 800cebc:	ddba      	ble.n	800ce34 <_tzset_unlocked_r+0x5c>
 800cebe:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cec0:	1eda      	subs	r2, r3, #3
 800cec2:	2a07      	cmp	r2, #7
 800cec4:	d8b6      	bhi.n	800ce34 <_tzset_unlocked_r+0x5c>
 800cec6:	5ceb      	ldrb	r3, [r5, r3]
 800cec8:	2b3e      	cmp	r3, #62	@ 0x3e
 800ceca:	d1b3      	bne.n	800ce34 <_tzset_unlocked_r+0x5c>
 800cecc:	3602      	adds	r6, #2
 800cece:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ced0:	18f5      	adds	r5, r6, r3
 800ced2:	5cf3      	ldrb	r3, [r6, r3]
 800ced4:	2b2d      	cmp	r3, #45	@ 0x2d
 800ced6:	d15a      	bne.n	800cf8e <_tzset_unlocked_r+0x1b6>
 800ced8:	3501      	adds	r5, #1
 800ceda:	f04f 39ff 	mov.w	r9, #4294967295
 800cede:	2300      	movs	r3, #0
 800cee0:	f8ad 301e 	strh.w	r3, [sp, #30]
 800cee4:	f8ad 3020 	strh.w	r3, [sp, #32]
 800cee8:	af08      	add	r7, sp, #32
 800ceea:	ab0a      	add	r3, sp, #40	@ 0x28
 800ceec:	e9cd 3701 	strd	r3, r7, [sp, #4]
 800cef0:	9303      	str	r3, [sp, #12]
 800cef2:	f10d 031e 	add.w	r3, sp, #30
 800cef6:	9300      	str	r3, [sp, #0]
 800cef8:	4980      	ldr	r1, [pc, #512]	@ (800d0fc <_tzset_unlocked_r+0x324>)
 800cefa:	ab0a      	add	r3, sp, #40	@ 0x28
 800cefc:	aa07      	add	r2, sp, #28
 800cefe:	4628      	mov	r0, r5
 800cf00:	f7ff fb1c 	bl	800c53c <siscanf>
 800cf04:	2800      	cmp	r0, #0
 800cf06:	dd95      	ble.n	800ce34 <_tzset_unlocked_r+0x5c>
 800cf08:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 800cf0c:	f8bd 6020 	ldrh.w	r6, [sp, #32]
 800cf10:	223c      	movs	r2, #60	@ 0x3c
 800cf12:	fb02 6603 	mla	r6, r2, r3, r6
 800cf16:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 800cf1a:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 800cf1e:	fb02 6603 	mla	r6, r2, r3, r6
 800cf22:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cf24:	fb09 f606 	mul.w	r6, r9, r6
 800cf28:	eb05 0903 	add.w	r9, r5, r3
 800cf2c:	5ceb      	ldrb	r3, [r5, r3]
 800cf2e:	2b3c      	cmp	r3, #60	@ 0x3c
 800cf30:	f040 80ee 	bne.w	800d110 <_tzset_unlocked_r+0x338>
 800cf34:	f109 0501 	add.w	r5, r9, #1
 800cf38:	4a71      	ldr	r2, [pc, #452]	@ (800d100 <_tzset_unlocked_r+0x328>)
 800cf3a:	496f      	ldr	r1, [pc, #444]	@ (800d0f8 <_tzset_unlocked_r+0x320>)
 800cf3c:	ab0a      	add	r3, sp, #40	@ 0x28
 800cf3e:	4628      	mov	r0, r5
 800cf40:	f7ff fafc 	bl	800c53c <siscanf>
 800cf44:	2800      	cmp	r0, #0
 800cf46:	dc28      	bgt.n	800cf9a <_tzset_unlocked_r+0x1c2>
 800cf48:	f899 3001 	ldrb.w	r3, [r9, #1]
 800cf4c:	2b3e      	cmp	r3, #62	@ 0x3e
 800cf4e:	d124      	bne.n	800cf9a <_tzset_unlocked_r+0x1c2>
 800cf50:	4b68      	ldr	r3, [pc, #416]	@ (800d0f4 <_tzset_unlocked_r+0x31c>)
 800cf52:	62a6      	str	r6, [r4, #40]	@ 0x28
 800cf54:	e9c8 3300 	strd	r3, r3, [r8]
 800cf58:	f8ca 6000 	str.w	r6, [sl]
 800cf5c:	e76a      	b.n	800ce34 <_tzset_unlocked_r+0x5c>
 800cf5e:	f7f3 f937 	bl	80001d0 <strcmp>
 800cf62:	2800      	cmp	r0, #0
 800cf64:	f47f af6d 	bne.w	800ce42 <_tzset_unlocked_r+0x6a>
 800cf68:	e764      	b.n	800ce34 <_tzset_unlocked_r+0x5c>
 800cf6a:	4631      	mov	r1, r6
 800cf6c:	f000 f9da 	bl	800d324 <strcpy>
 800cf70:	e775      	b.n	800ce5e <_tzset_unlocked_r+0x86>
 800cf72:	4a60      	ldr	r2, [pc, #384]	@ (800d0f4 <_tzset_unlocked_r+0x31c>)
 800cf74:	4963      	ldr	r1, [pc, #396]	@ (800d104 <_tzset_unlocked_r+0x32c>)
 800cf76:	ab0a      	add	r3, sp, #40	@ 0x28
 800cf78:	4630      	mov	r0, r6
 800cf7a:	f7ff fadf 	bl	800c53c <siscanf>
 800cf7e:	2800      	cmp	r0, #0
 800cf80:	f77f af58 	ble.w	800ce34 <_tzset_unlocked_r+0x5c>
 800cf84:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cf86:	3b03      	subs	r3, #3
 800cf88:	2b07      	cmp	r3, #7
 800cf8a:	d9a0      	bls.n	800cece <_tzset_unlocked_r+0xf6>
 800cf8c:	e752      	b.n	800ce34 <_tzset_unlocked_r+0x5c>
 800cf8e:	2b2b      	cmp	r3, #43	@ 0x2b
 800cf90:	bf08      	it	eq
 800cf92:	3501      	addeq	r5, #1
 800cf94:	f04f 0901 	mov.w	r9, #1
 800cf98:	e7a1      	b.n	800cede <_tzset_unlocked_r+0x106>
 800cf9a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cf9c:	1eda      	subs	r2, r3, #3
 800cf9e:	2a07      	cmp	r2, #7
 800cfa0:	f63f af48 	bhi.w	800ce34 <_tzset_unlocked_r+0x5c>
 800cfa4:	5ceb      	ldrb	r3, [r5, r3]
 800cfa6:	2b3e      	cmp	r3, #62	@ 0x3e
 800cfa8:	f47f af44 	bne.w	800ce34 <_tzset_unlocked_r+0x5c>
 800cfac:	f109 0902 	add.w	r9, r9, #2
 800cfb0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cfb2:	eb09 0503 	add.w	r5, r9, r3
 800cfb6:	f819 3003 	ldrb.w	r3, [r9, r3]
 800cfba:	2b2d      	cmp	r3, #45	@ 0x2d
 800cfbc:	f040 80b7 	bne.w	800d12e <_tzset_unlocked_r+0x356>
 800cfc0:	3501      	adds	r5, #1
 800cfc2:	f04f 39ff 	mov.w	r9, #4294967295
 800cfc6:	2300      	movs	r3, #0
 800cfc8:	f8ad 301c 	strh.w	r3, [sp, #28]
 800cfcc:	f8ad 301e 	strh.w	r3, [sp, #30]
 800cfd0:	f8ad 3020 	strh.w	r3, [sp, #32]
 800cfd4:	930a      	str	r3, [sp, #40]	@ 0x28
 800cfd6:	ab0a      	add	r3, sp, #40	@ 0x28
 800cfd8:	e9cd 7302 	strd	r7, r3, [sp, #8]
 800cfdc:	9301      	str	r3, [sp, #4]
 800cfde:	f10d 031e 	add.w	r3, sp, #30
 800cfe2:	9300      	str	r3, [sp, #0]
 800cfe4:	4945      	ldr	r1, [pc, #276]	@ (800d0fc <_tzset_unlocked_r+0x324>)
 800cfe6:	ab0a      	add	r3, sp, #40	@ 0x28
 800cfe8:	aa07      	add	r2, sp, #28
 800cfea:	4628      	mov	r0, r5
 800cfec:	f7ff faa6 	bl	800c53c <siscanf>
 800cff0:	2800      	cmp	r0, #0
 800cff2:	f300 80a2 	bgt.w	800d13a <_tzset_unlocked_r+0x362>
 800cff6:	f5a6 6361 	sub.w	r3, r6, #3600	@ 0xe10
 800cffa:	9304      	str	r3, [sp, #16]
 800cffc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cffe:	4627      	mov	r7, r4
 800d000:	441d      	add	r5, r3
 800d002:	f04f 0b00 	mov.w	fp, #0
 800d006:	782b      	ldrb	r3, [r5, #0]
 800d008:	2b2c      	cmp	r3, #44	@ 0x2c
 800d00a:	bf08      	it	eq
 800d00c:	3501      	addeq	r5, #1
 800d00e:	f895 9000 	ldrb.w	r9, [r5]
 800d012:	f1b9 0f4d 	cmp.w	r9, #77	@ 0x4d
 800d016:	f040 80a3 	bne.w	800d160 <_tzset_unlocked_r+0x388>
 800d01a:	ab0a      	add	r3, sp, #40	@ 0x28
 800d01c:	f10d 0226 	add.w	r2, sp, #38	@ 0x26
 800d020:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800d024:	aa09      	add	r2, sp, #36	@ 0x24
 800d026:	9200      	str	r2, [sp, #0]
 800d028:	4937      	ldr	r1, [pc, #220]	@ (800d108 <_tzset_unlocked_r+0x330>)
 800d02a:	9303      	str	r3, [sp, #12]
 800d02c:	f10d 0222 	add.w	r2, sp, #34	@ 0x22
 800d030:	4628      	mov	r0, r5
 800d032:	f7ff fa83 	bl	800c53c <siscanf>
 800d036:	2803      	cmp	r0, #3
 800d038:	f47f aefc 	bne.w	800ce34 <_tzset_unlocked_r+0x5c>
 800d03c:	f8bd 1022 	ldrh.w	r1, [sp, #34]	@ 0x22
 800d040:	1e4b      	subs	r3, r1, #1
 800d042:	2b0b      	cmp	r3, #11
 800d044:	f63f aef6 	bhi.w	800ce34 <_tzset_unlocked_r+0x5c>
 800d048:	f8bd 2024 	ldrh.w	r2, [sp, #36]	@ 0x24
 800d04c:	1e53      	subs	r3, r2, #1
 800d04e:	2b04      	cmp	r3, #4
 800d050:	f63f aef0 	bhi.w	800ce34 <_tzset_unlocked_r+0x5c>
 800d054:	f8bd 3026 	ldrh.w	r3, [sp, #38]	@ 0x26
 800d058:	2b06      	cmp	r3, #6
 800d05a:	f63f aeeb 	bhi.w	800ce34 <_tzset_unlocked_r+0x5c>
 800d05e:	e9c7 1203 	strd	r1, r2, [r7, #12]
 800d062:	f887 9008 	strb.w	r9, [r7, #8]
 800d066:	617b      	str	r3, [r7, #20]
 800d068:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d06a:	eb05 0903 	add.w	r9, r5, r3
 800d06e:	2500      	movs	r5, #0
 800d070:	f04f 0302 	mov.w	r3, #2
 800d074:	f8ad 301c 	strh.w	r3, [sp, #28]
 800d078:	f8ad 501e 	strh.w	r5, [sp, #30]
 800d07c:	f8ad 5020 	strh.w	r5, [sp, #32]
 800d080:	950a      	str	r5, [sp, #40]	@ 0x28
 800d082:	f899 3000 	ldrb.w	r3, [r9]
 800d086:	2b2f      	cmp	r3, #47	@ 0x2f
 800d088:	f040 8096 	bne.w	800d1b8 <_tzset_unlocked_r+0x3e0>
 800d08c:	ab0a      	add	r3, sp, #40	@ 0x28
 800d08e:	aa08      	add	r2, sp, #32
 800d090:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800d094:	f10d 021e 	add.w	r2, sp, #30
 800d098:	9200      	str	r2, [sp, #0]
 800d09a:	491c      	ldr	r1, [pc, #112]	@ (800d10c <_tzset_unlocked_r+0x334>)
 800d09c:	9303      	str	r3, [sp, #12]
 800d09e:	aa07      	add	r2, sp, #28
 800d0a0:	4648      	mov	r0, r9
 800d0a2:	f7ff fa4b 	bl	800c53c <siscanf>
 800d0a6:	42a8      	cmp	r0, r5
 800d0a8:	f300 8086 	bgt.w	800d1b8 <_tzset_unlocked_r+0x3e0>
 800d0ac:	214a      	movs	r1, #74	@ 0x4a
 800d0ae:	2200      	movs	r2, #0
 800d0b0:	2300      	movs	r3, #0
 800d0b2:	e9c4 5503 	strd	r5, r5, [r4, #12]
 800d0b6:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800d0ba:	e9c4 2308 	strd	r2, r3, [r4, #32]
 800d0be:	e9c4 550d 	strd	r5, r5, [r4, #52]	@ 0x34
 800d0c2:	e9c4 550f 	strd	r5, r5, [r4, #60]	@ 0x3c
 800d0c6:	e9c4 2312 	strd	r2, r3, [r4, #72]	@ 0x48
 800d0ca:	7221      	strb	r1, [r4, #8]
 800d0cc:	62a5      	str	r5, [r4, #40]	@ 0x28
 800d0ce:	f884 1030 	strb.w	r1, [r4, #48]	@ 0x30
 800d0d2:	6525      	str	r5, [r4, #80]	@ 0x50
 800d0d4:	e6ae      	b.n	800ce34 <_tzset_unlocked_r+0x5c>
 800d0d6:	bf00      	nop
 800d0d8:	08012e50 	.word	0x08012e50
 800d0dc:	2000981c 	.word	0x2000981c
 800d0e0:	20009838 	.word	0x20009838
 800d0e4:	08012e53 	.word	0x08012e53
 800d0e8:	2000983c 	.word	0x2000983c
 800d0ec:	20000048 	.word	0x20000048
 800d0f0:	08011a82 	.word	0x08011a82
 800d0f4:	2000982c 	.word	0x2000982c
 800d0f8:	08012e57 	.word	0x08012e57
 800d0fc:	08012e8c 	.word	0x08012e8c
 800d100:	20009820 	.word	0x20009820
 800d104:	08012e6a 	.word	0x08012e6a
 800d108:	08012e78 	.word	0x08012e78
 800d10c:	08012e8b 	.word	0x08012e8b
 800d110:	4a3e      	ldr	r2, [pc, #248]	@ (800d20c <_tzset_unlocked_r+0x434>)
 800d112:	493f      	ldr	r1, [pc, #252]	@ (800d210 <_tzset_unlocked_r+0x438>)
 800d114:	ab0a      	add	r3, sp, #40	@ 0x28
 800d116:	4648      	mov	r0, r9
 800d118:	f7ff fa10 	bl	800c53c <siscanf>
 800d11c:	2800      	cmp	r0, #0
 800d11e:	f77f af17 	ble.w	800cf50 <_tzset_unlocked_r+0x178>
 800d122:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d124:	3b03      	subs	r3, #3
 800d126:	2b07      	cmp	r3, #7
 800d128:	f67f af42 	bls.w	800cfb0 <_tzset_unlocked_r+0x1d8>
 800d12c:	e682      	b.n	800ce34 <_tzset_unlocked_r+0x5c>
 800d12e:	2b2b      	cmp	r3, #43	@ 0x2b
 800d130:	bf08      	it	eq
 800d132:	3501      	addeq	r5, #1
 800d134:	f04f 0901 	mov.w	r9, #1
 800d138:	e745      	b.n	800cfc6 <_tzset_unlocked_r+0x1ee>
 800d13a:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 800d13e:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 800d142:	213c      	movs	r1, #60	@ 0x3c
 800d144:	fb01 3302 	mla	r3, r1, r2, r3
 800d148:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 800d14c:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 800d150:	fb01 3302 	mla	r3, r1, r2, r3
 800d154:	fb09 f303 	mul.w	r3, r9, r3
 800d158:	e74f      	b.n	800cffa <_tzset_unlocked_r+0x222>
 800d15a:	f04f 0b01 	mov.w	fp, #1
 800d15e:	e752      	b.n	800d006 <_tzset_unlocked_r+0x22e>
 800d160:	f1b9 0f4a 	cmp.w	r9, #74	@ 0x4a
 800d164:	bf06      	itte	eq
 800d166:	3501      	addeq	r5, #1
 800d168:	464b      	moveq	r3, r9
 800d16a:	2344      	movne	r3, #68	@ 0x44
 800d16c:	220a      	movs	r2, #10
 800d16e:	a90b      	add	r1, sp, #44	@ 0x2c
 800d170:	4628      	mov	r0, r5
 800d172:	9305      	str	r3, [sp, #20]
 800d174:	f002 f84c 	bl	800f210 <strtoul>
 800d178:	f8dd 902c 	ldr.w	r9, [sp, #44]	@ 0x2c
 800d17c:	9b05      	ldr	r3, [sp, #20]
 800d17e:	f8ad 0026 	strh.w	r0, [sp, #38]	@ 0x26
 800d182:	45a9      	cmp	r9, r5
 800d184:	d114      	bne.n	800d1b0 <_tzset_unlocked_r+0x3d8>
 800d186:	234d      	movs	r3, #77	@ 0x4d
 800d188:	f1bb 0f00 	cmp.w	fp, #0
 800d18c:	d107      	bne.n	800d19e <_tzset_unlocked_r+0x3c6>
 800d18e:	7223      	strb	r3, [r4, #8]
 800d190:	2103      	movs	r1, #3
 800d192:	2302      	movs	r3, #2
 800d194:	e9c4 1303 	strd	r1, r3, [r4, #12]
 800d198:	f8c4 b014 	str.w	fp, [r4, #20]
 800d19c:	e767      	b.n	800d06e <_tzset_unlocked_r+0x296>
 800d19e:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
 800d1a2:	220b      	movs	r2, #11
 800d1a4:	2301      	movs	r3, #1
 800d1a6:	e9c4 230d 	strd	r2, r3, [r4, #52]	@ 0x34
 800d1aa:	2300      	movs	r3, #0
 800d1ac:	63e3      	str	r3, [r4, #60]	@ 0x3c
 800d1ae:	e75e      	b.n	800d06e <_tzset_unlocked_r+0x296>
 800d1b0:	b280      	uxth	r0, r0
 800d1b2:	723b      	strb	r3, [r7, #8]
 800d1b4:	6178      	str	r0, [r7, #20]
 800d1b6:	e75a      	b.n	800d06e <_tzset_unlocked_r+0x296>
 800d1b8:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 800d1bc:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 800d1c0:	213c      	movs	r1, #60	@ 0x3c
 800d1c2:	fb01 3302 	mla	r3, r1, r2, r3
 800d1c6:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 800d1ca:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 800d1ce:	fb01 3302 	mla	r3, r1, r2, r3
 800d1d2:	61bb      	str	r3, [r7, #24]
 800d1d4:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 800d1d6:	3728      	adds	r7, #40	@ 0x28
 800d1d8:	444d      	add	r5, r9
 800d1da:	f1bb 0f00 	cmp.w	fp, #0
 800d1de:	d0bc      	beq.n	800d15a <_tzset_unlocked_r+0x382>
 800d1e0:	9b04      	ldr	r3, [sp, #16]
 800d1e2:	6523      	str	r3, [r4, #80]	@ 0x50
 800d1e4:	4b0b      	ldr	r3, [pc, #44]	@ (800d214 <_tzset_unlocked_r+0x43c>)
 800d1e6:	f8c8 3000 	str.w	r3, [r8]
 800d1ea:	6860      	ldr	r0, [r4, #4]
 800d1ec:	4b07      	ldr	r3, [pc, #28]	@ (800d20c <_tzset_unlocked_r+0x434>)
 800d1ee:	62a6      	str	r6, [r4, #40]	@ 0x28
 800d1f0:	f8c8 3004 	str.w	r3, [r8, #4]
 800d1f4:	f7ff fd34 	bl	800cc60 <__tzcalc_limits>
 800d1f8:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800d1fa:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 800d1fc:	f8ca 2000 	str.w	r2, [sl]
 800d200:	1a9b      	subs	r3, r3, r2
 800d202:	4a05      	ldr	r2, [pc, #20]	@ (800d218 <_tzset_unlocked_r+0x440>)
 800d204:	bf18      	it	ne
 800d206:	2301      	movne	r3, #1
 800d208:	6013      	str	r3, [r2, #0]
 800d20a:	e613      	b.n	800ce34 <_tzset_unlocked_r+0x5c>
 800d20c:	20009820 	.word	0x20009820
 800d210:	08012e6a 	.word	0x08012e6a
 800d214:	2000982c 	.word	0x2000982c
 800d218:	2000983c 	.word	0x2000983c

0800d21c <_localeconv_r>:
 800d21c:	4800      	ldr	r0, [pc, #0]	@ (800d220 <_localeconv_r+0x4>)
 800d21e:	4770      	bx	lr
 800d220:	20000140 	.word	0x20000140

0800d224 <_close_r>:
 800d224:	b538      	push	{r3, r4, r5, lr}
 800d226:	4d06      	ldr	r5, [pc, #24]	@ (800d240 <_close_r+0x1c>)
 800d228:	2300      	movs	r3, #0
 800d22a:	4604      	mov	r4, r0
 800d22c:	4608      	mov	r0, r1
 800d22e:	602b      	str	r3, [r5, #0]
 800d230:	f7f8 faf6 	bl	8005820 <_close>
 800d234:	1c43      	adds	r3, r0, #1
 800d236:	d102      	bne.n	800d23e <_close_r+0x1a>
 800d238:	682b      	ldr	r3, [r5, #0]
 800d23a:	b103      	cbz	r3, 800d23e <_close_r+0x1a>
 800d23c:	6023      	str	r3, [r4, #0]
 800d23e:	bd38      	pop	{r3, r4, r5, pc}
 800d240:	20009840 	.word	0x20009840

0800d244 <_lseek_r>:
 800d244:	b538      	push	{r3, r4, r5, lr}
 800d246:	4d07      	ldr	r5, [pc, #28]	@ (800d264 <_lseek_r+0x20>)
 800d248:	4604      	mov	r4, r0
 800d24a:	4608      	mov	r0, r1
 800d24c:	4611      	mov	r1, r2
 800d24e:	2200      	movs	r2, #0
 800d250:	602a      	str	r2, [r5, #0]
 800d252:	461a      	mov	r2, r3
 800d254:	f7f8 faee 	bl	8005834 <_lseek>
 800d258:	1c43      	adds	r3, r0, #1
 800d25a:	d102      	bne.n	800d262 <_lseek_r+0x1e>
 800d25c:	682b      	ldr	r3, [r5, #0]
 800d25e:	b103      	cbz	r3, 800d262 <_lseek_r+0x1e>
 800d260:	6023      	str	r3, [r4, #0]
 800d262:	bd38      	pop	{r3, r4, r5, pc}
 800d264:	20009840 	.word	0x20009840

0800d268 <_read_r>:
 800d268:	b538      	push	{r3, r4, r5, lr}
 800d26a:	4d07      	ldr	r5, [pc, #28]	@ (800d288 <_read_r+0x20>)
 800d26c:	4604      	mov	r4, r0
 800d26e:	4608      	mov	r0, r1
 800d270:	4611      	mov	r1, r2
 800d272:	2200      	movs	r2, #0
 800d274:	602a      	str	r2, [r5, #0]
 800d276:	461a      	mov	r2, r3
 800d278:	f7f8 fab6 	bl	80057e8 <_read>
 800d27c:	1c43      	adds	r3, r0, #1
 800d27e:	d102      	bne.n	800d286 <_read_r+0x1e>
 800d280:	682b      	ldr	r3, [r5, #0]
 800d282:	b103      	cbz	r3, 800d286 <_read_r+0x1e>
 800d284:	6023      	str	r3, [r4, #0]
 800d286:	bd38      	pop	{r3, r4, r5, pc}
 800d288:	20009840 	.word	0x20009840

0800d28c <_sbrk_r>:
 800d28c:	b538      	push	{r3, r4, r5, lr}
 800d28e:	4d06      	ldr	r5, [pc, #24]	@ (800d2a8 <_sbrk_r+0x1c>)
 800d290:	2300      	movs	r3, #0
 800d292:	4604      	mov	r4, r0
 800d294:	4608      	mov	r0, r1
 800d296:	602b      	str	r3, [r5, #0]
 800d298:	f7f8 face 	bl	8005838 <_sbrk>
 800d29c:	1c43      	adds	r3, r0, #1
 800d29e:	d102      	bne.n	800d2a6 <_sbrk_r+0x1a>
 800d2a0:	682b      	ldr	r3, [r5, #0]
 800d2a2:	b103      	cbz	r3, 800d2a6 <_sbrk_r+0x1a>
 800d2a4:	6023      	str	r3, [r4, #0]
 800d2a6:	bd38      	pop	{r3, r4, r5, pc}
 800d2a8:	20009840 	.word	0x20009840

0800d2ac <_write_r>:
 800d2ac:	b538      	push	{r3, r4, r5, lr}
 800d2ae:	4d07      	ldr	r5, [pc, #28]	@ (800d2cc <_write_r+0x20>)
 800d2b0:	4604      	mov	r4, r0
 800d2b2:	4608      	mov	r0, r1
 800d2b4:	4611      	mov	r1, r2
 800d2b6:	2200      	movs	r2, #0
 800d2b8:	602a      	str	r2, [r5, #0]
 800d2ba:	461a      	mov	r2, r3
 800d2bc:	f7f8 faa2 	bl	8005804 <_write>
 800d2c0:	1c43      	adds	r3, r0, #1
 800d2c2:	d102      	bne.n	800d2ca <_write_r+0x1e>
 800d2c4:	682b      	ldr	r3, [r5, #0]
 800d2c6:	b103      	cbz	r3, 800d2ca <_write_r+0x1e>
 800d2c8:	6023      	str	r3, [r4, #0]
 800d2ca:	bd38      	pop	{r3, r4, r5, pc}
 800d2cc:	20009840 	.word	0x20009840

0800d2d0 <__errno>:
 800d2d0:	4b01      	ldr	r3, [pc, #4]	@ (800d2d8 <__errno+0x8>)
 800d2d2:	6818      	ldr	r0, [r3, #0]
 800d2d4:	4770      	bx	lr
 800d2d6:	bf00      	nop
 800d2d8:	200001bc 	.word	0x200001bc

0800d2dc <__libc_init_array>:
 800d2dc:	b570      	push	{r4, r5, r6, lr}
 800d2de:	4d0d      	ldr	r5, [pc, #52]	@ (800d314 <__libc_init_array+0x38>)
 800d2e0:	4c0d      	ldr	r4, [pc, #52]	@ (800d318 <__libc_init_array+0x3c>)
 800d2e2:	1b64      	subs	r4, r4, r5
 800d2e4:	10a4      	asrs	r4, r4, #2
 800d2e6:	2600      	movs	r6, #0
 800d2e8:	42a6      	cmp	r6, r4
 800d2ea:	d109      	bne.n	800d300 <__libc_init_array+0x24>
 800d2ec:	4d0b      	ldr	r5, [pc, #44]	@ (800d31c <__libc_init_array+0x40>)
 800d2ee:	4c0c      	ldr	r4, [pc, #48]	@ (800d320 <__libc_init_array+0x44>)
 800d2f0:	f003 f940 	bl	8010574 <_init>
 800d2f4:	1b64      	subs	r4, r4, r5
 800d2f6:	10a4      	asrs	r4, r4, #2
 800d2f8:	2600      	movs	r6, #0
 800d2fa:	42a6      	cmp	r6, r4
 800d2fc:	d105      	bne.n	800d30a <__libc_init_array+0x2e>
 800d2fe:	bd70      	pop	{r4, r5, r6, pc}
 800d300:	f855 3b04 	ldr.w	r3, [r5], #4
 800d304:	4798      	blx	r3
 800d306:	3601      	adds	r6, #1
 800d308:	e7ee      	b.n	800d2e8 <__libc_init_array+0xc>
 800d30a:	f855 3b04 	ldr.w	r3, [r5], #4
 800d30e:	4798      	blx	r3
 800d310:	3601      	adds	r6, #1
 800d312:	e7f2      	b.n	800d2fa <__libc_init_array+0x1e>
 800d314:	080131b8 	.word	0x080131b8
 800d318:	080131b8 	.word	0x080131b8
 800d31c:	080131b8 	.word	0x080131b8
 800d320:	080131bc 	.word	0x080131bc

0800d324 <strcpy>:
 800d324:	4603      	mov	r3, r0
 800d326:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d32a:	f803 2b01 	strb.w	r2, [r3], #1
 800d32e:	2a00      	cmp	r2, #0
 800d330:	d1f9      	bne.n	800d326 <strcpy+0x2>
 800d332:	4770      	bx	lr

0800d334 <memcpy>:
 800d334:	440a      	add	r2, r1
 800d336:	4291      	cmp	r1, r2
 800d338:	f100 33ff 	add.w	r3, r0, #4294967295
 800d33c:	d100      	bne.n	800d340 <memcpy+0xc>
 800d33e:	4770      	bx	lr
 800d340:	b510      	push	{r4, lr}
 800d342:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d346:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d34a:	4291      	cmp	r1, r2
 800d34c:	d1f9      	bne.n	800d342 <memcpy+0xe>
 800d34e:	bd10      	pop	{r4, pc}

0800d350 <nan>:
 800d350:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800d358 <nan+0x8>
 800d354:	4770      	bx	lr
 800d356:	bf00      	nop
 800d358:	00000000 	.word	0x00000000
 800d35c:	7ff80000 	.word	0x7ff80000

0800d360 <nanf>:
 800d360:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800d368 <nanf+0x8>
 800d364:	4770      	bx	lr
 800d366:	bf00      	nop
 800d368:	7fc00000 	.word	0x7fc00000

0800d36c <div>:
 800d36c:	b510      	push	{r4, lr}
 800d36e:	fb91 f4f2 	sdiv	r4, r1, r2
 800d372:	fb02 1114 	mls	r1, r2, r4, r1
 800d376:	6004      	str	r4, [r0, #0]
 800d378:	6041      	str	r1, [r0, #4]
 800d37a:	bd10      	pop	{r4, pc}

0800d37c <quorem>:
 800d37c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d380:	6903      	ldr	r3, [r0, #16]
 800d382:	690c      	ldr	r4, [r1, #16]
 800d384:	42a3      	cmp	r3, r4
 800d386:	4607      	mov	r7, r0
 800d388:	db7e      	blt.n	800d488 <quorem+0x10c>
 800d38a:	3c01      	subs	r4, #1
 800d38c:	f101 0814 	add.w	r8, r1, #20
 800d390:	00a3      	lsls	r3, r4, #2
 800d392:	f100 0514 	add.w	r5, r0, #20
 800d396:	9300      	str	r3, [sp, #0]
 800d398:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d39c:	9301      	str	r3, [sp, #4]
 800d39e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800d3a2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d3a6:	3301      	adds	r3, #1
 800d3a8:	429a      	cmp	r2, r3
 800d3aa:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800d3ae:	fbb2 f6f3 	udiv	r6, r2, r3
 800d3b2:	d32e      	bcc.n	800d412 <quorem+0x96>
 800d3b4:	f04f 0a00 	mov.w	sl, #0
 800d3b8:	46c4      	mov	ip, r8
 800d3ba:	46ae      	mov	lr, r5
 800d3bc:	46d3      	mov	fp, sl
 800d3be:	f85c 3b04 	ldr.w	r3, [ip], #4
 800d3c2:	b298      	uxth	r0, r3
 800d3c4:	fb06 a000 	mla	r0, r6, r0, sl
 800d3c8:	0c02      	lsrs	r2, r0, #16
 800d3ca:	0c1b      	lsrs	r3, r3, #16
 800d3cc:	fb06 2303 	mla	r3, r6, r3, r2
 800d3d0:	f8de 2000 	ldr.w	r2, [lr]
 800d3d4:	b280      	uxth	r0, r0
 800d3d6:	b292      	uxth	r2, r2
 800d3d8:	1a12      	subs	r2, r2, r0
 800d3da:	445a      	add	r2, fp
 800d3dc:	f8de 0000 	ldr.w	r0, [lr]
 800d3e0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d3e4:	b29b      	uxth	r3, r3
 800d3e6:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800d3ea:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800d3ee:	b292      	uxth	r2, r2
 800d3f0:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800d3f4:	45e1      	cmp	r9, ip
 800d3f6:	f84e 2b04 	str.w	r2, [lr], #4
 800d3fa:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800d3fe:	d2de      	bcs.n	800d3be <quorem+0x42>
 800d400:	9b00      	ldr	r3, [sp, #0]
 800d402:	58eb      	ldr	r3, [r5, r3]
 800d404:	b92b      	cbnz	r3, 800d412 <quorem+0x96>
 800d406:	9b01      	ldr	r3, [sp, #4]
 800d408:	3b04      	subs	r3, #4
 800d40a:	429d      	cmp	r5, r3
 800d40c:	461a      	mov	r2, r3
 800d40e:	d32f      	bcc.n	800d470 <quorem+0xf4>
 800d410:	613c      	str	r4, [r7, #16]
 800d412:	4638      	mov	r0, r7
 800d414:	f001 fc9e 	bl	800ed54 <__mcmp>
 800d418:	2800      	cmp	r0, #0
 800d41a:	db25      	blt.n	800d468 <quorem+0xec>
 800d41c:	4629      	mov	r1, r5
 800d41e:	2000      	movs	r0, #0
 800d420:	f858 2b04 	ldr.w	r2, [r8], #4
 800d424:	f8d1 c000 	ldr.w	ip, [r1]
 800d428:	fa1f fe82 	uxth.w	lr, r2
 800d42c:	fa1f f38c 	uxth.w	r3, ip
 800d430:	eba3 030e 	sub.w	r3, r3, lr
 800d434:	4403      	add	r3, r0
 800d436:	0c12      	lsrs	r2, r2, #16
 800d438:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800d43c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800d440:	b29b      	uxth	r3, r3
 800d442:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d446:	45c1      	cmp	r9, r8
 800d448:	f841 3b04 	str.w	r3, [r1], #4
 800d44c:	ea4f 4022 	mov.w	r0, r2, asr #16
 800d450:	d2e6      	bcs.n	800d420 <quorem+0xa4>
 800d452:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d456:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d45a:	b922      	cbnz	r2, 800d466 <quorem+0xea>
 800d45c:	3b04      	subs	r3, #4
 800d45e:	429d      	cmp	r5, r3
 800d460:	461a      	mov	r2, r3
 800d462:	d30b      	bcc.n	800d47c <quorem+0x100>
 800d464:	613c      	str	r4, [r7, #16]
 800d466:	3601      	adds	r6, #1
 800d468:	4630      	mov	r0, r6
 800d46a:	b003      	add	sp, #12
 800d46c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d470:	6812      	ldr	r2, [r2, #0]
 800d472:	3b04      	subs	r3, #4
 800d474:	2a00      	cmp	r2, #0
 800d476:	d1cb      	bne.n	800d410 <quorem+0x94>
 800d478:	3c01      	subs	r4, #1
 800d47a:	e7c6      	b.n	800d40a <quorem+0x8e>
 800d47c:	6812      	ldr	r2, [r2, #0]
 800d47e:	3b04      	subs	r3, #4
 800d480:	2a00      	cmp	r2, #0
 800d482:	d1ef      	bne.n	800d464 <quorem+0xe8>
 800d484:	3c01      	subs	r4, #1
 800d486:	e7ea      	b.n	800d45e <quorem+0xe2>
 800d488:	2000      	movs	r0, #0
 800d48a:	e7ee      	b.n	800d46a <quorem+0xee>
 800d48c:	0000      	movs	r0, r0
	...

0800d490 <_dtoa_r>:
 800d490:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d494:	69c7      	ldr	r7, [r0, #28]
 800d496:	b099      	sub	sp, #100	@ 0x64
 800d498:	ed8d 0b02 	vstr	d0, [sp, #8]
 800d49c:	ec55 4b10 	vmov	r4, r5, d0
 800d4a0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800d4a2:	9109      	str	r1, [sp, #36]	@ 0x24
 800d4a4:	4683      	mov	fp, r0
 800d4a6:	920e      	str	r2, [sp, #56]	@ 0x38
 800d4a8:	9313      	str	r3, [sp, #76]	@ 0x4c
 800d4aa:	b97f      	cbnz	r7, 800d4cc <_dtoa_r+0x3c>
 800d4ac:	2010      	movs	r0, #16
 800d4ae:	f7fd f969 	bl	800a784 <malloc>
 800d4b2:	4602      	mov	r2, r0
 800d4b4:	f8cb 001c 	str.w	r0, [fp, #28]
 800d4b8:	b920      	cbnz	r0, 800d4c4 <_dtoa_r+0x34>
 800d4ba:	4ba7      	ldr	r3, [pc, #668]	@ (800d758 <_dtoa_r+0x2c8>)
 800d4bc:	21ef      	movs	r1, #239	@ 0xef
 800d4be:	48a7      	ldr	r0, [pc, #668]	@ (800d75c <_dtoa_r+0x2cc>)
 800d4c0:	f002 fc6c 	bl	800fd9c <__assert_func>
 800d4c4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800d4c8:	6007      	str	r7, [r0, #0]
 800d4ca:	60c7      	str	r7, [r0, #12]
 800d4cc:	f8db 301c 	ldr.w	r3, [fp, #28]
 800d4d0:	6819      	ldr	r1, [r3, #0]
 800d4d2:	b159      	cbz	r1, 800d4ec <_dtoa_r+0x5c>
 800d4d4:	685a      	ldr	r2, [r3, #4]
 800d4d6:	604a      	str	r2, [r1, #4]
 800d4d8:	2301      	movs	r3, #1
 800d4da:	4093      	lsls	r3, r2
 800d4dc:	608b      	str	r3, [r1, #8]
 800d4de:	4658      	mov	r0, fp
 800d4e0:	f001 f9b4 	bl	800e84c <_Bfree>
 800d4e4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800d4e8:	2200      	movs	r2, #0
 800d4ea:	601a      	str	r2, [r3, #0]
 800d4ec:	1e2b      	subs	r3, r5, #0
 800d4ee:	bfb9      	ittee	lt
 800d4f0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800d4f4:	9303      	strlt	r3, [sp, #12]
 800d4f6:	2300      	movge	r3, #0
 800d4f8:	6033      	strge	r3, [r6, #0]
 800d4fa:	9f03      	ldr	r7, [sp, #12]
 800d4fc:	4b98      	ldr	r3, [pc, #608]	@ (800d760 <_dtoa_r+0x2d0>)
 800d4fe:	bfbc      	itt	lt
 800d500:	2201      	movlt	r2, #1
 800d502:	6032      	strlt	r2, [r6, #0]
 800d504:	43bb      	bics	r3, r7
 800d506:	d112      	bne.n	800d52e <_dtoa_r+0x9e>
 800d508:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800d50a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800d50e:	6013      	str	r3, [r2, #0]
 800d510:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800d514:	4323      	orrs	r3, r4
 800d516:	f000 854d 	beq.w	800dfb4 <_dtoa_r+0xb24>
 800d51a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800d51c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800d774 <_dtoa_r+0x2e4>
 800d520:	2b00      	cmp	r3, #0
 800d522:	f000 854f 	beq.w	800dfc4 <_dtoa_r+0xb34>
 800d526:	f10a 0303 	add.w	r3, sl, #3
 800d52a:	f000 bd49 	b.w	800dfc0 <_dtoa_r+0xb30>
 800d52e:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d532:	2200      	movs	r2, #0
 800d534:	ec51 0b17 	vmov	r0, r1, d7
 800d538:	2300      	movs	r3, #0
 800d53a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800d53e:	f7f3 fad3 	bl	8000ae8 <__aeabi_dcmpeq>
 800d542:	4680      	mov	r8, r0
 800d544:	b158      	cbz	r0, 800d55e <_dtoa_r+0xce>
 800d546:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800d548:	2301      	movs	r3, #1
 800d54a:	6013      	str	r3, [r2, #0]
 800d54c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800d54e:	b113      	cbz	r3, 800d556 <_dtoa_r+0xc6>
 800d550:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800d552:	4b84      	ldr	r3, [pc, #528]	@ (800d764 <_dtoa_r+0x2d4>)
 800d554:	6013      	str	r3, [r2, #0]
 800d556:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800d778 <_dtoa_r+0x2e8>
 800d55a:	f000 bd33 	b.w	800dfc4 <_dtoa_r+0xb34>
 800d55e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800d562:	aa16      	add	r2, sp, #88	@ 0x58
 800d564:	a917      	add	r1, sp, #92	@ 0x5c
 800d566:	4658      	mov	r0, fp
 800d568:	f001 fd14 	bl	800ef94 <__d2b>
 800d56c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800d570:	4681      	mov	r9, r0
 800d572:	2e00      	cmp	r6, #0
 800d574:	d077      	beq.n	800d666 <_dtoa_r+0x1d6>
 800d576:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d578:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800d57c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d580:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d584:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800d588:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800d58c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800d590:	4619      	mov	r1, r3
 800d592:	2200      	movs	r2, #0
 800d594:	4b74      	ldr	r3, [pc, #464]	@ (800d768 <_dtoa_r+0x2d8>)
 800d596:	f7f2 fe87 	bl	80002a8 <__aeabi_dsub>
 800d59a:	a369      	add	r3, pc, #420	@ (adr r3, 800d740 <_dtoa_r+0x2b0>)
 800d59c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5a0:	f7f3 f83a 	bl	8000618 <__aeabi_dmul>
 800d5a4:	a368      	add	r3, pc, #416	@ (adr r3, 800d748 <_dtoa_r+0x2b8>)
 800d5a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5aa:	f7f2 fe7f 	bl	80002ac <__adddf3>
 800d5ae:	4604      	mov	r4, r0
 800d5b0:	4630      	mov	r0, r6
 800d5b2:	460d      	mov	r5, r1
 800d5b4:	f7f2 ffc6 	bl	8000544 <__aeabi_i2d>
 800d5b8:	a365      	add	r3, pc, #404	@ (adr r3, 800d750 <_dtoa_r+0x2c0>)
 800d5ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5be:	f7f3 f82b 	bl	8000618 <__aeabi_dmul>
 800d5c2:	4602      	mov	r2, r0
 800d5c4:	460b      	mov	r3, r1
 800d5c6:	4620      	mov	r0, r4
 800d5c8:	4629      	mov	r1, r5
 800d5ca:	f7f2 fe6f 	bl	80002ac <__adddf3>
 800d5ce:	4604      	mov	r4, r0
 800d5d0:	460d      	mov	r5, r1
 800d5d2:	f7f3 fad1 	bl	8000b78 <__aeabi_d2iz>
 800d5d6:	2200      	movs	r2, #0
 800d5d8:	4607      	mov	r7, r0
 800d5da:	2300      	movs	r3, #0
 800d5dc:	4620      	mov	r0, r4
 800d5de:	4629      	mov	r1, r5
 800d5e0:	f7f3 fa8c 	bl	8000afc <__aeabi_dcmplt>
 800d5e4:	b140      	cbz	r0, 800d5f8 <_dtoa_r+0x168>
 800d5e6:	4638      	mov	r0, r7
 800d5e8:	f7f2 ffac 	bl	8000544 <__aeabi_i2d>
 800d5ec:	4622      	mov	r2, r4
 800d5ee:	462b      	mov	r3, r5
 800d5f0:	f7f3 fa7a 	bl	8000ae8 <__aeabi_dcmpeq>
 800d5f4:	b900      	cbnz	r0, 800d5f8 <_dtoa_r+0x168>
 800d5f6:	3f01      	subs	r7, #1
 800d5f8:	2f16      	cmp	r7, #22
 800d5fa:	d851      	bhi.n	800d6a0 <_dtoa_r+0x210>
 800d5fc:	4b5b      	ldr	r3, [pc, #364]	@ (800d76c <_dtoa_r+0x2dc>)
 800d5fe:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800d602:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d606:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d60a:	f7f3 fa77 	bl	8000afc <__aeabi_dcmplt>
 800d60e:	2800      	cmp	r0, #0
 800d610:	d048      	beq.n	800d6a4 <_dtoa_r+0x214>
 800d612:	3f01      	subs	r7, #1
 800d614:	2300      	movs	r3, #0
 800d616:	9312      	str	r3, [sp, #72]	@ 0x48
 800d618:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800d61a:	1b9b      	subs	r3, r3, r6
 800d61c:	1e5a      	subs	r2, r3, #1
 800d61e:	bf44      	itt	mi
 800d620:	f1c3 0801 	rsbmi	r8, r3, #1
 800d624:	2300      	movmi	r3, #0
 800d626:	9208      	str	r2, [sp, #32]
 800d628:	bf54      	ite	pl
 800d62a:	f04f 0800 	movpl.w	r8, #0
 800d62e:	9308      	strmi	r3, [sp, #32]
 800d630:	2f00      	cmp	r7, #0
 800d632:	db39      	blt.n	800d6a8 <_dtoa_r+0x218>
 800d634:	9b08      	ldr	r3, [sp, #32]
 800d636:	970f      	str	r7, [sp, #60]	@ 0x3c
 800d638:	443b      	add	r3, r7
 800d63a:	9308      	str	r3, [sp, #32]
 800d63c:	2300      	movs	r3, #0
 800d63e:	930a      	str	r3, [sp, #40]	@ 0x28
 800d640:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d642:	2b09      	cmp	r3, #9
 800d644:	d864      	bhi.n	800d710 <_dtoa_r+0x280>
 800d646:	2b05      	cmp	r3, #5
 800d648:	bfc4      	itt	gt
 800d64a:	3b04      	subgt	r3, #4
 800d64c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800d64e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d650:	f1a3 0302 	sub.w	r3, r3, #2
 800d654:	bfcc      	ite	gt
 800d656:	2400      	movgt	r4, #0
 800d658:	2401      	movle	r4, #1
 800d65a:	2b03      	cmp	r3, #3
 800d65c:	d863      	bhi.n	800d726 <_dtoa_r+0x296>
 800d65e:	e8df f003 	tbb	[pc, r3]
 800d662:	372a      	.short	0x372a
 800d664:	5535      	.short	0x5535
 800d666:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800d66a:	441e      	add	r6, r3
 800d66c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800d670:	2b20      	cmp	r3, #32
 800d672:	bfc1      	itttt	gt
 800d674:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800d678:	409f      	lslgt	r7, r3
 800d67a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800d67e:	fa24 f303 	lsrgt.w	r3, r4, r3
 800d682:	bfd6      	itet	le
 800d684:	f1c3 0320 	rsble	r3, r3, #32
 800d688:	ea47 0003 	orrgt.w	r0, r7, r3
 800d68c:	fa04 f003 	lslle.w	r0, r4, r3
 800d690:	f7f2 ff48 	bl	8000524 <__aeabi_ui2d>
 800d694:	2201      	movs	r2, #1
 800d696:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800d69a:	3e01      	subs	r6, #1
 800d69c:	9214      	str	r2, [sp, #80]	@ 0x50
 800d69e:	e777      	b.n	800d590 <_dtoa_r+0x100>
 800d6a0:	2301      	movs	r3, #1
 800d6a2:	e7b8      	b.n	800d616 <_dtoa_r+0x186>
 800d6a4:	9012      	str	r0, [sp, #72]	@ 0x48
 800d6a6:	e7b7      	b.n	800d618 <_dtoa_r+0x188>
 800d6a8:	427b      	negs	r3, r7
 800d6aa:	930a      	str	r3, [sp, #40]	@ 0x28
 800d6ac:	2300      	movs	r3, #0
 800d6ae:	eba8 0807 	sub.w	r8, r8, r7
 800d6b2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800d6b4:	e7c4      	b.n	800d640 <_dtoa_r+0x1b0>
 800d6b6:	2300      	movs	r3, #0
 800d6b8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d6ba:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d6bc:	2b00      	cmp	r3, #0
 800d6be:	dc35      	bgt.n	800d72c <_dtoa_r+0x29c>
 800d6c0:	2301      	movs	r3, #1
 800d6c2:	9300      	str	r3, [sp, #0]
 800d6c4:	9307      	str	r3, [sp, #28]
 800d6c6:	461a      	mov	r2, r3
 800d6c8:	920e      	str	r2, [sp, #56]	@ 0x38
 800d6ca:	e00b      	b.n	800d6e4 <_dtoa_r+0x254>
 800d6cc:	2301      	movs	r3, #1
 800d6ce:	e7f3      	b.n	800d6b8 <_dtoa_r+0x228>
 800d6d0:	2300      	movs	r3, #0
 800d6d2:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d6d4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d6d6:	18fb      	adds	r3, r7, r3
 800d6d8:	9300      	str	r3, [sp, #0]
 800d6da:	3301      	adds	r3, #1
 800d6dc:	2b01      	cmp	r3, #1
 800d6de:	9307      	str	r3, [sp, #28]
 800d6e0:	bfb8      	it	lt
 800d6e2:	2301      	movlt	r3, #1
 800d6e4:	f8db 001c 	ldr.w	r0, [fp, #28]
 800d6e8:	2100      	movs	r1, #0
 800d6ea:	2204      	movs	r2, #4
 800d6ec:	f102 0514 	add.w	r5, r2, #20
 800d6f0:	429d      	cmp	r5, r3
 800d6f2:	d91f      	bls.n	800d734 <_dtoa_r+0x2a4>
 800d6f4:	6041      	str	r1, [r0, #4]
 800d6f6:	4658      	mov	r0, fp
 800d6f8:	f001 f868 	bl	800e7cc <_Balloc>
 800d6fc:	4682      	mov	sl, r0
 800d6fe:	2800      	cmp	r0, #0
 800d700:	d13c      	bne.n	800d77c <_dtoa_r+0x2ec>
 800d702:	4b1b      	ldr	r3, [pc, #108]	@ (800d770 <_dtoa_r+0x2e0>)
 800d704:	4602      	mov	r2, r0
 800d706:	f240 11af 	movw	r1, #431	@ 0x1af
 800d70a:	e6d8      	b.n	800d4be <_dtoa_r+0x2e>
 800d70c:	2301      	movs	r3, #1
 800d70e:	e7e0      	b.n	800d6d2 <_dtoa_r+0x242>
 800d710:	2401      	movs	r4, #1
 800d712:	2300      	movs	r3, #0
 800d714:	9309      	str	r3, [sp, #36]	@ 0x24
 800d716:	940b      	str	r4, [sp, #44]	@ 0x2c
 800d718:	f04f 33ff 	mov.w	r3, #4294967295
 800d71c:	9300      	str	r3, [sp, #0]
 800d71e:	9307      	str	r3, [sp, #28]
 800d720:	2200      	movs	r2, #0
 800d722:	2312      	movs	r3, #18
 800d724:	e7d0      	b.n	800d6c8 <_dtoa_r+0x238>
 800d726:	2301      	movs	r3, #1
 800d728:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d72a:	e7f5      	b.n	800d718 <_dtoa_r+0x288>
 800d72c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d72e:	9300      	str	r3, [sp, #0]
 800d730:	9307      	str	r3, [sp, #28]
 800d732:	e7d7      	b.n	800d6e4 <_dtoa_r+0x254>
 800d734:	3101      	adds	r1, #1
 800d736:	0052      	lsls	r2, r2, #1
 800d738:	e7d8      	b.n	800d6ec <_dtoa_r+0x25c>
 800d73a:	bf00      	nop
 800d73c:	f3af 8000 	nop.w
 800d740:	636f4361 	.word	0x636f4361
 800d744:	3fd287a7 	.word	0x3fd287a7
 800d748:	8b60c8b3 	.word	0x8b60c8b3
 800d74c:	3fc68a28 	.word	0x3fc68a28
 800d750:	509f79fb 	.word	0x509f79fb
 800d754:	3fd34413 	.word	0x3fd34413
 800d758:	08012eb1 	.word	0x08012eb1
 800d75c:	08012ec8 	.word	0x08012ec8
 800d760:	7ff00000 	.word	0x7ff00000
 800d764:	08012c0e 	.word	0x08012c0e
 800d768:	3ff80000 	.word	0x3ff80000
 800d76c:	08013020 	.word	0x08013020
 800d770:	08012f20 	.word	0x08012f20
 800d774:	08012ead 	.word	0x08012ead
 800d778:	08012c0d 	.word	0x08012c0d
 800d77c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800d780:	6018      	str	r0, [r3, #0]
 800d782:	9b07      	ldr	r3, [sp, #28]
 800d784:	2b0e      	cmp	r3, #14
 800d786:	f200 80a4 	bhi.w	800d8d2 <_dtoa_r+0x442>
 800d78a:	2c00      	cmp	r4, #0
 800d78c:	f000 80a1 	beq.w	800d8d2 <_dtoa_r+0x442>
 800d790:	2f00      	cmp	r7, #0
 800d792:	dd33      	ble.n	800d7fc <_dtoa_r+0x36c>
 800d794:	4bad      	ldr	r3, [pc, #692]	@ (800da4c <_dtoa_r+0x5bc>)
 800d796:	f007 020f 	and.w	r2, r7, #15
 800d79a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d79e:	ed93 7b00 	vldr	d7, [r3]
 800d7a2:	05f8      	lsls	r0, r7, #23
 800d7a4:	ed8d 7b04 	vstr	d7, [sp, #16]
 800d7a8:	ea4f 1427 	mov.w	r4, r7, asr #4
 800d7ac:	d516      	bpl.n	800d7dc <_dtoa_r+0x34c>
 800d7ae:	4ba8      	ldr	r3, [pc, #672]	@ (800da50 <_dtoa_r+0x5c0>)
 800d7b0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d7b4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800d7b8:	f7f3 f858 	bl	800086c <__aeabi_ddiv>
 800d7bc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d7c0:	f004 040f 	and.w	r4, r4, #15
 800d7c4:	2603      	movs	r6, #3
 800d7c6:	4da2      	ldr	r5, [pc, #648]	@ (800da50 <_dtoa_r+0x5c0>)
 800d7c8:	b954      	cbnz	r4, 800d7e0 <_dtoa_r+0x350>
 800d7ca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d7ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d7d2:	f7f3 f84b 	bl	800086c <__aeabi_ddiv>
 800d7d6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d7da:	e028      	b.n	800d82e <_dtoa_r+0x39e>
 800d7dc:	2602      	movs	r6, #2
 800d7de:	e7f2      	b.n	800d7c6 <_dtoa_r+0x336>
 800d7e0:	07e1      	lsls	r1, r4, #31
 800d7e2:	d508      	bpl.n	800d7f6 <_dtoa_r+0x366>
 800d7e4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d7e8:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d7ec:	f7f2 ff14 	bl	8000618 <__aeabi_dmul>
 800d7f0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d7f4:	3601      	adds	r6, #1
 800d7f6:	1064      	asrs	r4, r4, #1
 800d7f8:	3508      	adds	r5, #8
 800d7fa:	e7e5      	b.n	800d7c8 <_dtoa_r+0x338>
 800d7fc:	f000 80d2 	beq.w	800d9a4 <_dtoa_r+0x514>
 800d800:	427c      	negs	r4, r7
 800d802:	4b92      	ldr	r3, [pc, #584]	@ (800da4c <_dtoa_r+0x5bc>)
 800d804:	4d92      	ldr	r5, [pc, #584]	@ (800da50 <_dtoa_r+0x5c0>)
 800d806:	f004 020f 	and.w	r2, r4, #15
 800d80a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d80e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d812:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d816:	f7f2 feff 	bl	8000618 <__aeabi_dmul>
 800d81a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d81e:	1124      	asrs	r4, r4, #4
 800d820:	2300      	movs	r3, #0
 800d822:	2602      	movs	r6, #2
 800d824:	2c00      	cmp	r4, #0
 800d826:	f040 80b2 	bne.w	800d98e <_dtoa_r+0x4fe>
 800d82a:	2b00      	cmp	r3, #0
 800d82c:	d1d3      	bne.n	800d7d6 <_dtoa_r+0x346>
 800d82e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800d830:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800d834:	2b00      	cmp	r3, #0
 800d836:	f000 80b7 	beq.w	800d9a8 <_dtoa_r+0x518>
 800d83a:	4b86      	ldr	r3, [pc, #536]	@ (800da54 <_dtoa_r+0x5c4>)
 800d83c:	2200      	movs	r2, #0
 800d83e:	4620      	mov	r0, r4
 800d840:	4629      	mov	r1, r5
 800d842:	f7f3 f95b 	bl	8000afc <__aeabi_dcmplt>
 800d846:	2800      	cmp	r0, #0
 800d848:	f000 80ae 	beq.w	800d9a8 <_dtoa_r+0x518>
 800d84c:	9b07      	ldr	r3, [sp, #28]
 800d84e:	2b00      	cmp	r3, #0
 800d850:	f000 80aa 	beq.w	800d9a8 <_dtoa_r+0x518>
 800d854:	9b00      	ldr	r3, [sp, #0]
 800d856:	2b00      	cmp	r3, #0
 800d858:	dd37      	ble.n	800d8ca <_dtoa_r+0x43a>
 800d85a:	1e7b      	subs	r3, r7, #1
 800d85c:	9304      	str	r3, [sp, #16]
 800d85e:	4620      	mov	r0, r4
 800d860:	4b7d      	ldr	r3, [pc, #500]	@ (800da58 <_dtoa_r+0x5c8>)
 800d862:	2200      	movs	r2, #0
 800d864:	4629      	mov	r1, r5
 800d866:	f7f2 fed7 	bl	8000618 <__aeabi_dmul>
 800d86a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d86e:	9c00      	ldr	r4, [sp, #0]
 800d870:	3601      	adds	r6, #1
 800d872:	4630      	mov	r0, r6
 800d874:	f7f2 fe66 	bl	8000544 <__aeabi_i2d>
 800d878:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d87c:	f7f2 fecc 	bl	8000618 <__aeabi_dmul>
 800d880:	4b76      	ldr	r3, [pc, #472]	@ (800da5c <_dtoa_r+0x5cc>)
 800d882:	2200      	movs	r2, #0
 800d884:	f7f2 fd12 	bl	80002ac <__adddf3>
 800d888:	4605      	mov	r5, r0
 800d88a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800d88e:	2c00      	cmp	r4, #0
 800d890:	f040 808d 	bne.w	800d9ae <_dtoa_r+0x51e>
 800d894:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d898:	4b71      	ldr	r3, [pc, #452]	@ (800da60 <_dtoa_r+0x5d0>)
 800d89a:	2200      	movs	r2, #0
 800d89c:	f7f2 fd04 	bl	80002a8 <__aeabi_dsub>
 800d8a0:	4602      	mov	r2, r0
 800d8a2:	460b      	mov	r3, r1
 800d8a4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d8a8:	462a      	mov	r2, r5
 800d8aa:	4633      	mov	r3, r6
 800d8ac:	f7f3 f944 	bl	8000b38 <__aeabi_dcmpgt>
 800d8b0:	2800      	cmp	r0, #0
 800d8b2:	f040 828b 	bne.w	800ddcc <_dtoa_r+0x93c>
 800d8b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d8ba:	462a      	mov	r2, r5
 800d8bc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800d8c0:	f7f3 f91c 	bl	8000afc <__aeabi_dcmplt>
 800d8c4:	2800      	cmp	r0, #0
 800d8c6:	f040 8128 	bne.w	800db1a <_dtoa_r+0x68a>
 800d8ca:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800d8ce:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800d8d2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800d8d4:	2b00      	cmp	r3, #0
 800d8d6:	f2c0 815a 	blt.w	800db8e <_dtoa_r+0x6fe>
 800d8da:	2f0e      	cmp	r7, #14
 800d8dc:	f300 8157 	bgt.w	800db8e <_dtoa_r+0x6fe>
 800d8e0:	4b5a      	ldr	r3, [pc, #360]	@ (800da4c <_dtoa_r+0x5bc>)
 800d8e2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800d8e6:	ed93 7b00 	vldr	d7, [r3]
 800d8ea:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d8ec:	2b00      	cmp	r3, #0
 800d8ee:	ed8d 7b00 	vstr	d7, [sp]
 800d8f2:	da03      	bge.n	800d8fc <_dtoa_r+0x46c>
 800d8f4:	9b07      	ldr	r3, [sp, #28]
 800d8f6:	2b00      	cmp	r3, #0
 800d8f8:	f340 8101 	ble.w	800dafe <_dtoa_r+0x66e>
 800d8fc:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800d900:	4656      	mov	r6, sl
 800d902:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d906:	4620      	mov	r0, r4
 800d908:	4629      	mov	r1, r5
 800d90a:	f7f2 ffaf 	bl	800086c <__aeabi_ddiv>
 800d90e:	f7f3 f933 	bl	8000b78 <__aeabi_d2iz>
 800d912:	4680      	mov	r8, r0
 800d914:	f7f2 fe16 	bl	8000544 <__aeabi_i2d>
 800d918:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d91c:	f7f2 fe7c 	bl	8000618 <__aeabi_dmul>
 800d920:	4602      	mov	r2, r0
 800d922:	460b      	mov	r3, r1
 800d924:	4620      	mov	r0, r4
 800d926:	4629      	mov	r1, r5
 800d928:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800d92c:	f7f2 fcbc 	bl	80002a8 <__aeabi_dsub>
 800d930:	f806 4b01 	strb.w	r4, [r6], #1
 800d934:	9d07      	ldr	r5, [sp, #28]
 800d936:	eba6 040a 	sub.w	r4, r6, sl
 800d93a:	42a5      	cmp	r5, r4
 800d93c:	4602      	mov	r2, r0
 800d93e:	460b      	mov	r3, r1
 800d940:	f040 8117 	bne.w	800db72 <_dtoa_r+0x6e2>
 800d944:	f7f2 fcb2 	bl	80002ac <__adddf3>
 800d948:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d94c:	4604      	mov	r4, r0
 800d94e:	460d      	mov	r5, r1
 800d950:	f7f3 f8f2 	bl	8000b38 <__aeabi_dcmpgt>
 800d954:	2800      	cmp	r0, #0
 800d956:	f040 80f9 	bne.w	800db4c <_dtoa_r+0x6bc>
 800d95a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d95e:	4620      	mov	r0, r4
 800d960:	4629      	mov	r1, r5
 800d962:	f7f3 f8c1 	bl	8000ae8 <__aeabi_dcmpeq>
 800d966:	b118      	cbz	r0, 800d970 <_dtoa_r+0x4e0>
 800d968:	f018 0f01 	tst.w	r8, #1
 800d96c:	f040 80ee 	bne.w	800db4c <_dtoa_r+0x6bc>
 800d970:	4649      	mov	r1, r9
 800d972:	4658      	mov	r0, fp
 800d974:	f000 ff6a 	bl	800e84c <_Bfree>
 800d978:	2300      	movs	r3, #0
 800d97a:	7033      	strb	r3, [r6, #0]
 800d97c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800d97e:	3701      	adds	r7, #1
 800d980:	601f      	str	r7, [r3, #0]
 800d982:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800d984:	2b00      	cmp	r3, #0
 800d986:	f000 831d 	beq.w	800dfc4 <_dtoa_r+0xb34>
 800d98a:	601e      	str	r6, [r3, #0]
 800d98c:	e31a      	b.n	800dfc4 <_dtoa_r+0xb34>
 800d98e:	07e2      	lsls	r2, r4, #31
 800d990:	d505      	bpl.n	800d99e <_dtoa_r+0x50e>
 800d992:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d996:	f7f2 fe3f 	bl	8000618 <__aeabi_dmul>
 800d99a:	3601      	adds	r6, #1
 800d99c:	2301      	movs	r3, #1
 800d99e:	1064      	asrs	r4, r4, #1
 800d9a0:	3508      	adds	r5, #8
 800d9a2:	e73f      	b.n	800d824 <_dtoa_r+0x394>
 800d9a4:	2602      	movs	r6, #2
 800d9a6:	e742      	b.n	800d82e <_dtoa_r+0x39e>
 800d9a8:	9c07      	ldr	r4, [sp, #28]
 800d9aa:	9704      	str	r7, [sp, #16]
 800d9ac:	e761      	b.n	800d872 <_dtoa_r+0x3e2>
 800d9ae:	4b27      	ldr	r3, [pc, #156]	@ (800da4c <_dtoa_r+0x5bc>)
 800d9b0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800d9b2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d9b6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800d9ba:	4454      	add	r4, sl
 800d9bc:	2900      	cmp	r1, #0
 800d9be:	d053      	beq.n	800da68 <_dtoa_r+0x5d8>
 800d9c0:	4928      	ldr	r1, [pc, #160]	@ (800da64 <_dtoa_r+0x5d4>)
 800d9c2:	2000      	movs	r0, #0
 800d9c4:	f7f2 ff52 	bl	800086c <__aeabi_ddiv>
 800d9c8:	4633      	mov	r3, r6
 800d9ca:	462a      	mov	r2, r5
 800d9cc:	f7f2 fc6c 	bl	80002a8 <__aeabi_dsub>
 800d9d0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800d9d4:	4656      	mov	r6, sl
 800d9d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d9da:	f7f3 f8cd 	bl	8000b78 <__aeabi_d2iz>
 800d9de:	4605      	mov	r5, r0
 800d9e0:	f7f2 fdb0 	bl	8000544 <__aeabi_i2d>
 800d9e4:	4602      	mov	r2, r0
 800d9e6:	460b      	mov	r3, r1
 800d9e8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d9ec:	f7f2 fc5c 	bl	80002a8 <__aeabi_dsub>
 800d9f0:	3530      	adds	r5, #48	@ 0x30
 800d9f2:	4602      	mov	r2, r0
 800d9f4:	460b      	mov	r3, r1
 800d9f6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d9fa:	f806 5b01 	strb.w	r5, [r6], #1
 800d9fe:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800da02:	f7f3 f87b 	bl	8000afc <__aeabi_dcmplt>
 800da06:	2800      	cmp	r0, #0
 800da08:	d171      	bne.n	800daee <_dtoa_r+0x65e>
 800da0a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800da0e:	4911      	ldr	r1, [pc, #68]	@ (800da54 <_dtoa_r+0x5c4>)
 800da10:	2000      	movs	r0, #0
 800da12:	f7f2 fc49 	bl	80002a8 <__aeabi_dsub>
 800da16:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800da1a:	f7f3 f86f 	bl	8000afc <__aeabi_dcmplt>
 800da1e:	2800      	cmp	r0, #0
 800da20:	f040 8095 	bne.w	800db4e <_dtoa_r+0x6be>
 800da24:	42a6      	cmp	r6, r4
 800da26:	f43f af50 	beq.w	800d8ca <_dtoa_r+0x43a>
 800da2a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800da2e:	4b0a      	ldr	r3, [pc, #40]	@ (800da58 <_dtoa_r+0x5c8>)
 800da30:	2200      	movs	r2, #0
 800da32:	f7f2 fdf1 	bl	8000618 <__aeabi_dmul>
 800da36:	4b08      	ldr	r3, [pc, #32]	@ (800da58 <_dtoa_r+0x5c8>)
 800da38:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800da3c:	2200      	movs	r2, #0
 800da3e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800da42:	f7f2 fde9 	bl	8000618 <__aeabi_dmul>
 800da46:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800da4a:	e7c4      	b.n	800d9d6 <_dtoa_r+0x546>
 800da4c:	08013020 	.word	0x08013020
 800da50:	08012ff8 	.word	0x08012ff8
 800da54:	3ff00000 	.word	0x3ff00000
 800da58:	40240000 	.word	0x40240000
 800da5c:	401c0000 	.word	0x401c0000
 800da60:	40140000 	.word	0x40140000
 800da64:	3fe00000 	.word	0x3fe00000
 800da68:	4631      	mov	r1, r6
 800da6a:	4628      	mov	r0, r5
 800da6c:	f7f2 fdd4 	bl	8000618 <__aeabi_dmul>
 800da70:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800da74:	9415      	str	r4, [sp, #84]	@ 0x54
 800da76:	4656      	mov	r6, sl
 800da78:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800da7c:	f7f3 f87c 	bl	8000b78 <__aeabi_d2iz>
 800da80:	4605      	mov	r5, r0
 800da82:	f7f2 fd5f 	bl	8000544 <__aeabi_i2d>
 800da86:	4602      	mov	r2, r0
 800da88:	460b      	mov	r3, r1
 800da8a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800da8e:	f7f2 fc0b 	bl	80002a8 <__aeabi_dsub>
 800da92:	3530      	adds	r5, #48	@ 0x30
 800da94:	f806 5b01 	strb.w	r5, [r6], #1
 800da98:	4602      	mov	r2, r0
 800da9a:	460b      	mov	r3, r1
 800da9c:	42a6      	cmp	r6, r4
 800da9e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800daa2:	f04f 0200 	mov.w	r2, #0
 800daa6:	d124      	bne.n	800daf2 <_dtoa_r+0x662>
 800daa8:	4bac      	ldr	r3, [pc, #688]	@ (800dd5c <_dtoa_r+0x8cc>)
 800daaa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800daae:	f7f2 fbfd 	bl	80002ac <__adddf3>
 800dab2:	4602      	mov	r2, r0
 800dab4:	460b      	mov	r3, r1
 800dab6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800daba:	f7f3 f83d 	bl	8000b38 <__aeabi_dcmpgt>
 800dabe:	2800      	cmp	r0, #0
 800dac0:	d145      	bne.n	800db4e <_dtoa_r+0x6be>
 800dac2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800dac6:	49a5      	ldr	r1, [pc, #660]	@ (800dd5c <_dtoa_r+0x8cc>)
 800dac8:	2000      	movs	r0, #0
 800daca:	f7f2 fbed 	bl	80002a8 <__aeabi_dsub>
 800dace:	4602      	mov	r2, r0
 800dad0:	460b      	mov	r3, r1
 800dad2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800dad6:	f7f3 f811 	bl	8000afc <__aeabi_dcmplt>
 800dada:	2800      	cmp	r0, #0
 800dadc:	f43f aef5 	beq.w	800d8ca <_dtoa_r+0x43a>
 800dae0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800dae2:	1e73      	subs	r3, r6, #1
 800dae4:	9315      	str	r3, [sp, #84]	@ 0x54
 800dae6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800daea:	2b30      	cmp	r3, #48	@ 0x30
 800daec:	d0f8      	beq.n	800dae0 <_dtoa_r+0x650>
 800daee:	9f04      	ldr	r7, [sp, #16]
 800daf0:	e73e      	b.n	800d970 <_dtoa_r+0x4e0>
 800daf2:	4b9b      	ldr	r3, [pc, #620]	@ (800dd60 <_dtoa_r+0x8d0>)
 800daf4:	f7f2 fd90 	bl	8000618 <__aeabi_dmul>
 800daf8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800dafc:	e7bc      	b.n	800da78 <_dtoa_r+0x5e8>
 800dafe:	d10c      	bne.n	800db1a <_dtoa_r+0x68a>
 800db00:	4b98      	ldr	r3, [pc, #608]	@ (800dd64 <_dtoa_r+0x8d4>)
 800db02:	2200      	movs	r2, #0
 800db04:	e9dd 0100 	ldrd	r0, r1, [sp]
 800db08:	f7f2 fd86 	bl	8000618 <__aeabi_dmul>
 800db0c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800db10:	f7f3 f808 	bl	8000b24 <__aeabi_dcmpge>
 800db14:	2800      	cmp	r0, #0
 800db16:	f000 8157 	beq.w	800ddc8 <_dtoa_r+0x938>
 800db1a:	2400      	movs	r4, #0
 800db1c:	4625      	mov	r5, r4
 800db1e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800db20:	43db      	mvns	r3, r3
 800db22:	9304      	str	r3, [sp, #16]
 800db24:	4656      	mov	r6, sl
 800db26:	2700      	movs	r7, #0
 800db28:	4621      	mov	r1, r4
 800db2a:	4658      	mov	r0, fp
 800db2c:	f000 fe8e 	bl	800e84c <_Bfree>
 800db30:	2d00      	cmp	r5, #0
 800db32:	d0dc      	beq.n	800daee <_dtoa_r+0x65e>
 800db34:	b12f      	cbz	r7, 800db42 <_dtoa_r+0x6b2>
 800db36:	42af      	cmp	r7, r5
 800db38:	d003      	beq.n	800db42 <_dtoa_r+0x6b2>
 800db3a:	4639      	mov	r1, r7
 800db3c:	4658      	mov	r0, fp
 800db3e:	f000 fe85 	bl	800e84c <_Bfree>
 800db42:	4629      	mov	r1, r5
 800db44:	4658      	mov	r0, fp
 800db46:	f000 fe81 	bl	800e84c <_Bfree>
 800db4a:	e7d0      	b.n	800daee <_dtoa_r+0x65e>
 800db4c:	9704      	str	r7, [sp, #16]
 800db4e:	4633      	mov	r3, r6
 800db50:	461e      	mov	r6, r3
 800db52:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800db56:	2a39      	cmp	r2, #57	@ 0x39
 800db58:	d107      	bne.n	800db6a <_dtoa_r+0x6da>
 800db5a:	459a      	cmp	sl, r3
 800db5c:	d1f8      	bne.n	800db50 <_dtoa_r+0x6c0>
 800db5e:	9a04      	ldr	r2, [sp, #16]
 800db60:	3201      	adds	r2, #1
 800db62:	9204      	str	r2, [sp, #16]
 800db64:	2230      	movs	r2, #48	@ 0x30
 800db66:	f88a 2000 	strb.w	r2, [sl]
 800db6a:	781a      	ldrb	r2, [r3, #0]
 800db6c:	3201      	adds	r2, #1
 800db6e:	701a      	strb	r2, [r3, #0]
 800db70:	e7bd      	b.n	800daee <_dtoa_r+0x65e>
 800db72:	4b7b      	ldr	r3, [pc, #492]	@ (800dd60 <_dtoa_r+0x8d0>)
 800db74:	2200      	movs	r2, #0
 800db76:	f7f2 fd4f 	bl	8000618 <__aeabi_dmul>
 800db7a:	2200      	movs	r2, #0
 800db7c:	2300      	movs	r3, #0
 800db7e:	4604      	mov	r4, r0
 800db80:	460d      	mov	r5, r1
 800db82:	f7f2 ffb1 	bl	8000ae8 <__aeabi_dcmpeq>
 800db86:	2800      	cmp	r0, #0
 800db88:	f43f aebb 	beq.w	800d902 <_dtoa_r+0x472>
 800db8c:	e6f0      	b.n	800d970 <_dtoa_r+0x4e0>
 800db8e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800db90:	2a00      	cmp	r2, #0
 800db92:	f000 80db 	beq.w	800dd4c <_dtoa_r+0x8bc>
 800db96:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800db98:	2a01      	cmp	r2, #1
 800db9a:	f300 80bf 	bgt.w	800dd1c <_dtoa_r+0x88c>
 800db9e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800dba0:	2a00      	cmp	r2, #0
 800dba2:	f000 80b7 	beq.w	800dd14 <_dtoa_r+0x884>
 800dba6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800dbaa:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800dbac:	4646      	mov	r6, r8
 800dbae:	9a08      	ldr	r2, [sp, #32]
 800dbb0:	2101      	movs	r1, #1
 800dbb2:	441a      	add	r2, r3
 800dbb4:	4658      	mov	r0, fp
 800dbb6:	4498      	add	r8, r3
 800dbb8:	9208      	str	r2, [sp, #32]
 800dbba:	f000 ff45 	bl	800ea48 <__i2b>
 800dbbe:	4605      	mov	r5, r0
 800dbc0:	b15e      	cbz	r6, 800dbda <_dtoa_r+0x74a>
 800dbc2:	9b08      	ldr	r3, [sp, #32]
 800dbc4:	2b00      	cmp	r3, #0
 800dbc6:	dd08      	ble.n	800dbda <_dtoa_r+0x74a>
 800dbc8:	42b3      	cmp	r3, r6
 800dbca:	9a08      	ldr	r2, [sp, #32]
 800dbcc:	bfa8      	it	ge
 800dbce:	4633      	movge	r3, r6
 800dbd0:	eba8 0803 	sub.w	r8, r8, r3
 800dbd4:	1af6      	subs	r6, r6, r3
 800dbd6:	1ad3      	subs	r3, r2, r3
 800dbd8:	9308      	str	r3, [sp, #32]
 800dbda:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800dbdc:	b1f3      	cbz	r3, 800dc1c <_dtoa_r+0x78c>
 800dbde:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800dbe0:	2b00      	cmp	r3, #0
 800dbe2:	f000 80b7 	beq.w	800dd54 <_dtoa_r+0x8c4>
 800dbe6:	b18c      	cbz	r4, 800dc0c <_dtoa_r+0x77c>
 800dbe8:	4629      	mov	r1, r5
 800dbea:	4622      	mov	r2, r4
 800dbec:	4658      	mov	r0, fp
 800dbee:	f000 ffeb 	bl	800ebc8 <__pow5mult>
 800dbf2:	464a      	mov	r2, r9
 800dbf4:	4601      	mov	r1, r0
 800dbf6:	4605      	mov	r5, r0
 800dbf8:	4658      	mov	r0, fp
 800dbfa:	f000 ff3b 	bl	800ea74 <__multiply>
 800dbfe:	4649      	mov	r1, r9
 800dc00:	9004      	str	r0, [sp, #16]
 800dc02:	4658      	mov	r0, fp
 800dc04:	f000 fe22 	bl	800e84c <_Bfree>
 800dc08:	9b04      	ldr	r3, [sp, #16]
 800dc0a:	4699      	mov	r9, r3
 800dc0c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800dc0e:	1b1a      	subs	r2, r3, r4
 800dc10:	d004      	beq.n	800dc1c <_dtoa_r+0x78c>
 800dc12:	4649      	mov	r1, r9
 800dc14:	4658      	mov	r0, fp
 800dc16:	f000 ffd7 	bl	800ebc8 <__pow5mult>
 800dc1a:	4681      	mov	r9, r0
 800dc1c:	2101      	movs	r1, #1
 800dc1e:	4658      	mov	r0, fp
 800dc20:	f000 ff12 	bl	800ea48 <__i2b>
 800dc24:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800dc26:	4604      	mov	r4, r0
 800dc28:	2b00      	cmp	r3, #0
 800dc2a:	f000 81cf 	beq.w	800dfcc <_dtoa_r+0xb3c>
 800dc2e:	461a      	mov	r2, r3
 800dc30:	4601      	mov	r1, r0
 800dc32:	4658      	mov	r0, fp
 800dc34:	f000 ffc8 	bl	800ebc8 <__pow5mult>
 800dc38:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dc3a:	2b01      	cmp	r3, #1
 800dc3c:	4604      	mov	r4, r0
 800dc3e:	f300 8095 	bgt.w	800dd6c <_dtoa_r+0x8dc>
 800dc42:	9b02      	ldr	r3, [sp, #8]
 800dc44:	2b00      	cmp	r3, #0
 800dc46:	f040 8087 	bne.w	800dd58 <_dtoa_r+0x8c8>
 800dc4a:	9b03      	ldr	r3, [sp, #12]
 800dc4c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800dc50:	2b00      	cmp	r3, #0
 800dc52:	f040 8089 	bne.w	800dd68 <_dtoa_r+0x8d8>
 800dc56:	9b03      	ldr	r3, [sp, #12]
 800dc58:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800dc5c:	0d1b      	lsrs	r3, r3, #20
 800dc5e:	051b      	lsls	r3, r3, #20
 800dc60:	b12b      	cbz	r3, 800dc6e <_dtoa_r+0x7de>
 800dc62:	9b08      	ldr	r3, [sp, #32]
 800dc64:	3301      	adds	r3, #1
 800dc66:	9308      	str	r3, [sp, #32]
 800dc68:	f108 0801 	add.w	r8, r8, #1
 800dc6c:	2301      	movs	r3, #1
 800dc6e:	930a      	str	r3, [sp, #40]	@ 0x28
 800dc70:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800dc72:	2b00      	cmp	r3, #0
 800dc74:	f000 81b0 	beq.w	800dfd8 <_dtoa_r+0xb48>
 800dc78:	6923      	ldr	r3, [r4, #16]
 800dc7a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800dc7e:	6918      	ldr	r0, [r3, #16]
 800dc80:	f000 fe96 	bl	800e9b0 <__hi0bits>
 800dc84:	f1c0 0020 	rsb	r0, r0, #32
 800dc88:	9b08      	ldr	r3, [sp, #32]
 800dc8a:	4418      	add	r0, r3
 800dc8c:	f010 001f 	ands.w	r0, r0, #31
 800dc90:	d077      	beq.n	800dd82 <_dtoa_r+0x8f2>
 800dc92:	f1c0 0320 	rsb	r3, r0, #32
 800dc96:	2b04      	cmp	r3, #4
 800dc98:	dd6b      	ble.n	800dd72 <_dtoa_r+0x8e2>
 800dc9a:	9b08      	ldr	r3, [sp, #32]
 800dc9c:	f1c0 001c 	rsb	r0, r0, #28
 800dca0:	4403      	add	r3, r0
 800dca2:	4480      	add	r8, r0
 800dca4:	4406      	add	r6, r0
 800dca6:	9308      	str	r3, [sp, #32]
 800dca8:	f1b8 0f00 	cmp.w	r8, #0
 800dcac:	dd05      	ble.n	800dcba <_dtoa_r+0x82a>
 800dcae:	4649      	mov	r1, r9
 800dcb0:	4642      	mov	r2, r8
 800dcb2:	4658      	mov	r0, fp
 800dcb4:	f000 ffe2 	bl	800ec7c <__lshift>
 800dcb8:	4681      	mov	r9, r0
 800dcba:	9b08      	ldr	r3, [sp, #32]
 800dcbc:	2b00      	cmp	r3, #0
 800dcbe:	dd05      	ble.n	800dccc <_dtoa_r+0x83c>
 800dcc0:	4621      	mov	r1, r4
 800dcc2:	461a      	mov	r2, r3
 800dcc4:	4658      	mov	r0, fp
 800dcc6:	f000 ffd9 	bl	800ec7c <__lshift>
 800dcca:	4604      	mov	r4, r0
 800dccc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800dcce:	2b00      	cmp	r3, #0
 800dcd0:	d059      	beq.n	800dd86 <_dtoa_r+0x8f6>
 800dcd2:	4621      	mov	r1, r4
 800dcd4:	4648      	mov	r0, r9
 800dcd6:	f001 f83d 	bl	800ed54 <__mcmp>
 800dcda:	2800      	cmp	r0, #0
 800dcdc:	da53      	bge.n	800dd86 <_dtoa_r+0x8f6>
 800dcde:	1e7b      	subs	r3, r7, #1
 800dce0:	9304      	str	r3, [sp, #16]
 800dce2:	4649      	mov	r1, r9
 800dce4:	2300      	movs	r3, #0
 800dce6:	220a      	movs	r2, #10
 800dce8:	4658      	mov	r0, fp
 800dcea:	f000 fdd1 	bl	800e890 <__multadd>
 800dcee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800dcf0:	4681      	mov	r9, r0
 800dcf2:	2b00      	cmp	r3, #0
 800dcf4:	f000 8172 	beq.w	800dfdc <_dtoa_r+0xb4c>
 800dcf8:	2300      	movs	r3, #0
 800dcfa:	4629      	mov	r1, r5
 800dcfc:	220a      	movs	r2, #10
 800dcfe:	4658      	mov	r0, fp
 800dd00:	f000 fdc6 	bl	800e890 <__multadd>
 800dd04:	9b00      	ldr	r3, [sp, #0]
 800dd06:	2b00      	cmp	r3, #0
 800dd08:	4605      	mov	r5, r0
 800dd0a:	dc67      	bgt.n	800dddc <_dtoa_r+0x94c>
 800dd0c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dd0e:	2b02      	cmp	r3, #2
 800dd10:	dc41      	bgt.n	800dd96 <_dtoa_r+0x906>
 800dd12:	e063      	b.n	800dddc <_dtoa_r+0x94c>
 800dd14:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800dd16:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800dd1a:	e746      	b.n	800dbaa <_dtoa_r+0x71a>
 800dd1c:	9b07      	ldr	r3, [sp, #28]
 800dd1e:	1e5c      	subs	r4, r3, #1
 800dd20:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800dd22:	42a3      	cmp	r3, r4
 800dd24:	bfbf      	itttt	lt
 800dd26:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800dd28:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800dd2a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800dd2c:	1ae3      	sublt	r3, r4, r3
 800dd2e:	bfb4      	ite	lt
 800dd30:	18d2      	addlt	r2, r2, r3
 800dd32:	1b1c      	subge	r4, r3, r4
 800dd34:	9b07      	ldr	r3, [sp, #28]
 800dd36:	bfbc      	itt	lt
 800dd38:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800dd3a:	2400      	movlt	r4, #0
 800dd3c:	2b00      	cmp	r3, #0
 800dd3e:	bfb5      	itete	lt
 800dd40:	eba8 0603 	sublt.w	r6, r8, r3
 800dd44:	9b07      	ldrge	r3, [sp, #28]
 800dd46:	2300      	movlt	r3, #0
 800dd48:	4646      	movge	r6, r8
 800dd4a:	e730      	b.n	800dbae <_dtoa_r+0x71e>
 800dd4c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800dd4e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800dd50:	4646      	mov	r6, r8
 800dd52:	e735      	b.n	800dbc0 <_dtoa_r+0x730>
 800dd54:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800dd56:	e75c      	b.n	800dc12 <_dtoa_r+0x782>
 800dd58:	2300      	movs	r3, #0
 800dd5a:	e788      	b.n	800dc6e <_dtoa_r+0x7de>
 800dd5c:	3fe00000 	.word	0x3fe00000
 800dd60:	40240000 	.word	0x40240000
 800dd64:	40140000 	.word	0x40140000
 800dd68:	9b02      	ldr	r3, [sp, #8]
 800dd6a:	e780      	b.n	800dc6e <_dtoa_r+0x7de>
 800dd6c:	2300      	movs	r3, #0
 800dd6e:	930a      	str	r3, [sp, #40]	@ 0x28
 800dd70:	e782      	b.n	800dc78 <_dtoa_r+0x7e8>
 800dd72:	d099      	beq.n	800dca8 <_dtoa_r+0x818>
 800dd74:	9a08      	ldr	r2, [sp, #32]
 800dd76:	331c      	adds	r3, #28
 800dd78:	441a      	add	r2, r3
 800dd7a:	4498      	add	r8, r3
 800dd7c:	441e      	add	r6, r3
 800dd7e:	9208      	str	r2, [sp, #32]
 800dd80:	e792      	b.n	800dca8 <_dtoa_r+0x818>
 800dd82:	4603      	mov	r3, r0
 800dd84:	e7f6      	b.n	800dd74 <_dtoa_r+0x8e4>
 800dd86:	9b07      	ldr	r3, [sp, #28]
 800dd88:	9704      	str	r7, [sp, #16]
 800dd8a:	2b00      	cmp	r3, #0
 800dd8c:	dc20      	bgt.n	800ddd0 <_dtoa_r+0x940>
 800dd8e:	9300      	str	r3, [sp, #0]
 800dd90:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dd92:	2b02      	cmp	r3, #2
 800dd94:	dd1e      	ble.n	800ddd4 <_dtoa_r+0x944>
 800dd96:	9b00      	ldr	r3, [sp, #0]
 800dd98:	2b00      	cmp	r3, #0
 800dd9a:	f47f aec0 	bne.w	800db1e <_dtoa_r+0x68e>
 800dd9e:	4621      	mov	r1, r4
 800dda0:	2205      	movs	r2, #5
 800dda2:	4658      	mov	r0, fp
 800dda4:	f000 fd74 	bl	800e890 <__multadd>
 800dda8:	4601      	mov	r1, r0
 800ddaa:	4604      	mov	r4, r0
 800ddac:	4648      	mov	r0, r9
 800ddae:	f000 ffd1 	bl	800ed54 <__mcmp>
 800ddb2:	2800      	cmp	r0, #0
 800ddb4:	f77f aeb3 	ble.w	800db1e <_dtoa_r+0x68e>
 800ddb8:	4656      	mov	r6, sl
 800ddba:	2331      	movs	r3, #49	@ 0x31
 800ddbc:	f806 3b01 	strb.w	r3, [r6], #1
 800ddc0:	9b04      	ldr	r3, [sp, #16]
 800ddc2:	3301      	adds	r3, #1
 800ddc4:	9304      	str	r3, [sp, #16]
 800ddc6:	e6ae      	b.n	800db26 <_dtoa_r+0x696>
 800ddc8:	9c07      	ldr	r4, [sp, #28]
 800ddca:	9704      	str	r7, [sp, #16]
 800ddcc:	4625      	mov	r5, r4
 800ddce:	e7f3      	b.n	800ddb8 <_dtoa_r+0x928>
 800ddd0:	9b07      	ldr	r3, [sp, #28]
 800ddd2:	9300      	str	r3, [sp, #0]
 800ddd4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ddd6:	2b00      	cmp	r3, #0
 800ddd8:	f000 8104 	beq.w	800dfe4 <_dtoa_r+0xb54>
 800dddc:	2e00      	cmp	r6, #0
 800ddde:	dd05      	ble.n	800ddec <_dtoa_r+0x95c>
 800dde0:	4629      	mov	r1, r5
 800dde2:	4632      	mov	r2, r6
 800dde4:	4658      	mov	r0, fp
 800dde6:	f000 ff49 	bl	800ec7c <__lshift>
 800ddea:	4605      	mov	r5, r0
 800ddec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ddee:	2b00      	cmp	r3, #0
 800ddf0:	d05a      	beq.n	800dea8 <_dtoa_r+0xa18>
 800ddf2:	6869      	ldr	r1, [r5, #4]
 800ddf4:	4658      	mov	r0, fp
 800ddf6:	f000 fce9 	bl	800e7cc <_Balloc>
 800ddfa:	4606      	mov	r6, r0
 800ddfc:	b928      	cbnz	r0, 800de0a <_dtoa_r+0x97a>
 800ddfe:	4b84      	ldr	r3, [pc, #528]	@ (800e010 <_dtoa_r+0xb80>)
 800de00:	4602      	mov	r2, r0
 800de02:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800de06:	f7ff bb5a 	b.w	800d4be <_dtoa_r+0x2e>
 800de0a:	692a      	ldr	r2, [r5, #16]
 800de0c:	3202      	adds	r2, #2
 800de0e:	0092      	lsls	r2, r2, #2
 800de10:	f105 010c 	add.w	r1, r5, #12
 800de14:	300c      	adds	r0, #12
 800de16:	f7ff fa8d 	bl	800d334 <memcpy>
 800de1a:	2201      	movs	r2, #1
 800de1c:	4631      	mov	r1, r6
 800de1e:	4658      	mov	r0, fp
 800de20:	f000 ff2c 	bl	800ec7c <__lshift>
 800de24:	f10a 0301 	add.w	r3, sl, #1
 800de28:	9307      	str	r3, [sp, #28]
 800de2a:	9b00      	ldr	r3, [sp, #0]
 800de2c:	4453      	add	r3, sl
 800de2e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800de30:	9b02      	ldr	r3, [sp, #8]
 800de32:	f003 0301 	and.w	r3, r3, #1
 800de36:	462f      	mov	r7, r5
 800de38:	930a      	str	r3, [sp, #40]	@ 0x28
 800de3a:	4605      	mov	r5, r0
 800de3c:	9b07      	ldr	r3, [sp, #28]
 800de3e:	4621      	mov	r1, r4
 800de40:	3b01      	subs	r3, #1
 800de42:	4648      	mov	r0, r9
 800de44:	9300      	str	r3, [sp, #0]
 800de46:	f7ff fa99 	bl	800d37c <quorem>
 800de4a:	4639      	mov	r1, r7
 800de4c:	9002      	str	r0, [sp, #8]
 800de4e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800de52:	4648      	mov	r0, r9
 800de54:	f000 ff7e 	bl	800ed54 <__mcmp>
 800de58:	462a      	mov	r2, r5
 800de5a:	9008      	str	r0, [sp, #32]
 800de5c:	4621      	mov	r1, r4
 800de5e:	4658      	mov	r0, fp
 800de60:	f000 ff94 	bl	800ed8c <__mdiff>
 800de64:	68c2      	ldr	r2, [r0, #12]
 800de66:	4606      	mov	r6, r0
 800de68:	bb02      	cbnz	r2, 800deac <_dtoa_r+0xa1c>
 800de6a:	4601      	mov	r1, r0
 800de6c:	4648      	mov	r0, r9
 800de6e:	f000 ff71 	bl	800ed54 <__mcmp>
 800de72:	4602      	mov	r2, r0
 800de74:	4631      	mov	r1, r6
 800de76:	4658      	mov	r0, fp
 800de78:	920e      	str	r2, [sp, #56]	@ 0x38
 800de7a:	f000 fce7 	bl	800e84c <_Bfree>
 800de7e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800de80:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800de82:	9e07      	ldr	r6, [sp, #28]
 800de84:	ea43 0102 	orr.w	r1, r3, r2
 800de88:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800de8a:	4319      	orrs	r1, r3
 800de8c:	d110      	bne.n	800deb0 <_dtoa_r+0xa20>
 800de8e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800de92:	d029      	beq.n	800dee8 <_dtoa_r+0xa58>
 800de94:	9b08      	ldr	r3, [sp, #32]
 800de96:	2b00      	cmp	r3, #0
 800de98:	dd02      	ble.n	800dea0 <_dtoa_r+0xa10>
 800de9a:	9b02      	ldr	r3, [sp, #8]
 800de9c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800dea0:	9b00      	ldr	r3, [sp, #0]
 800dea2:	f883 8000 	strb.w	r8, [r3]
 800dea6:	e63f      	b.n	800db28 <_dtoa_r+0x698>
 800dea8:	4628      	mov	r0, r5
 800deaa:	e7bb      	b.n	800de24 <_dtoa_r+0x994>
 800deac:	2201      	movs	r2, #1
 800deae:	e7e1      	b.n	800de74 <_dtoa_r+0x9e4>
 800deb0:	9b08      	ldr	r3, [sp, #32]
 800deb2:	2b00      	cmp	r3, #0
 800deb4:	db04      	blt.n	800dec0 <_dtoa_r+0xa30>
 800deb6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800deb8:	430b      	orrs	r3, r1
 800deba:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800debc:	430b      	orrs	r3, r1
 800debe:	d120      	bne.n	800df02 <_dtoa_r+0xa72>
 800dec0:	2a00      	cmp	r2, #0
 800dec2:	dded      	ble.n	800dea0 <_dtoa_r+0xa10>
 800dec4:	4649      	mov	r1, r9
 800dec6:	2201      	movs	r2, #1
 800dec8:	4658      	mov	r0, fp
 800deca:	f000 fed7 	bl	800ec7c <__lshift>
 800dece:	4621      	mov	r1, r4
 800ded0:	4681      	mov	r9, r0
 800ded2:	f000 ff3f 	bl	800ed54 <__mcmp>
 800ded6:	2800      	cmp	r0, #0
 800ded8:	dc03      	bgt.n	800dee2 <_dtoa_r+0xa52>
 800deda:	d1e1      	bne.n	800dea0 <_dtoa_r+0xa10>
 800dedc:	f018 0f01 	tst.w	r8, #1
 800dee0:	d0de      	beq.n	800dea0 <_dtoa_r+0xa10>
 800dee2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800dee6:	d1d8      	bne.n	800de9a <_dtoa_r+0xa0a>
 800dee8:	9a00      	ldr	r2, [sp, #0]
 800deea:	2339      	movs	r3, #57	@ 0x39
 800deec:	7013      	strb	r3, [r2, #0]
 800deee:	4633      	mov	r3, r6
 800def0:	461e      	mov	r6, r3
 800def2:	3b01      	subs	r3, #1
 800def4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800def8:	2a39      	cmp	r2, #57	@ 0x39
 800defa:	d052      	beq.n	800dfa2 <_dtoa_r+0xb12>
 800defc:	3201      	adds	r2, #1
 800defe:	701a      	strb	r2, [r3, #0]
 800df00:	e612      	b.n	800db28 <_dtoa_r+0x698>
 800df02:	2a00      	cmp	r2, #0
 800df04:	dd07      	ble.n	800df16 <_dtoa_r+0xa86>
 800df06:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800df0a:	d0ed      	beq.n	800dee8 <_dtoa_r+0xa58>
 800df0c:	9a00      	ldr	r2, [sp, #0]
 800df0e:	f108 0301 	add.w	r3, r8, #1
 800df12:	7013      	strb	r3, [r2, #0]
 800df14:	e608      	b.n	800db28 <_dtoa_r+0x698>
 800df16:	9b07      	ldr	r3, [sp, #28]
 800df18:	9a07      	ldr	r2, [sp, #28]
 800df1a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800df1e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800df20:	4293      	cmp	r3, r2
 800df22:	d028      	beq.n	800df76 <_dtoa_r+0xae6>
 800df24:	4649      	mov	r1, r9
 800df26:	2300      	movs	r3, #0
 800df28:	220a      	movs	r2, #10
 800df2a:	4658      	mov	r0, fp
 800df2c:	f000 fcb0 	bl	800e890 <__multadd>
 800df30:	42af      	cmp	r7, r5
 800df32:	4681      	mov	r9, r0
 800df34:	f04f 0300 	mov.w	r3, #0
 800df38:	f04f 020a 	mov.w	r2, #10
 800df3c:	4639      	mov	r1, r7
 800df3e:	4658      	mov	r0, fp
 800df40:	d107      	bne.n	800df52 <_dtoa_r+0xac2>
 800df42:	f000 fca5 	bl	800e890 <__multadd>
 800df46:	4607      	mov	r7, r0
 800df48:	4605      	mov	r5, r0
 800df4a:	9b07      	ldr	r3, [sp, #28]
 800df4c:	3301      	adds	r3, #1
 800df4e:	9307      	str	r3, [sp, #28]
 800df50:	e774      	b.n	800de3c <_dtoa_r+0x9ac>
 800df52:	f000 fc9d 	bl	800e890 <__multadd>
 800df56:	4629      	mov	r1, r5
 800df58:	4607      	mov	r7, r0
 800df5a:	2300      	movs	r3, #0
 800df5c:	220a      	movs	r2, #10
 800df5e:	4658      	mov	r0, fp
 800df60:	f000 fc96 	bl	800e890 <__multadd>
 800df64:	4605      	mov	r5, r0
 800df66:	e7f0      	b.n	800df4a <_dtoa_r+0xaba>
 800df68:	9b00      	ldr	r3, [sp, #0]
 800df6a:	2b00      	cmp	r3, #0
 800df6c:	bfcc      	ite	gt
 800df6e:	461e      	movgt	r6, r3
 800df70:	2601      	movle	r6, #1
 800df72:	4456      	add	r6, sl
 800df74:	2700      	movs	r7, #0
 800df76:	4649      	mov	r1, r9
 800df78:	2201      	movs	r2, #1
 800df7a:	4658      	mov	r0, fp
 800df7c:	f000 fe7e 	bl	800ec7c <__lshift>
 800df80:	4621      	mov	r1, r4
 800df82:	4681      	mov	r9, r0
 800df84:	f000 fee6 	bl	800ed54 <__mcmp>
 800df88:	2800      	cmp	r0, #0
 800df8a:	dcb0      	bgt.n	800deee <_dtoa_r+0xa5e>
 800df8c:	d102      	bne.n	800df94 <_dtoa_r+0xb04>
 800df8e:	f018 0f01 	tst.w	r8, #1
 800df92:	d1ac      	bne.n	800deee <_dtoa_r+0xa5e>
 800df94:	4633      	mov	r3, r6
 800df96:	461e      	mov	r6, r3
 800df98:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800df9c:	2a30      	cmp	r2, #48	@ 0x30
 800df9e:	d0fa      	beq.n	800df96 <_dtoa_r+0xb06>
 800dfa0:	e5c2      	b.n	800db28 <_dtoa_r+0x698>
 800dfa2:	459a      	cmp	sl, r3
 800dfa4:	d1a4      	bne.n	800def0 <_dtoa_r+0xa60>
 800dfa6:	9b04      	ldr	r3, [sp, #16]
 800dfa8:	3301      	adds	r3, #1
 800dfaa:	9304      	str	r3, [sp, #16]
 800dfac:	2331      	movs	r3, #49	@ 0x31
 800dfae:	f88a 3000 	strb.w	r3, [sl]
 800dfb2:	e5b9      	b.n	800db28 <_dtoa_r+0x698>
 800dfb4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800dfb6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800e014 <_dtoa_r+0xb84>
 800dfba:	b11b      	cbz	r3, 800dfc4 <_dtoa_r+0xb34>
 800dfbc:	f10a 0308 	add.w	r3, sl, #8
 800dfc0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800dfc2:	6013      	str	r3, [r2, #0]
 800dfc4:	4650      	mov	r0, sl
 800dfc6:	b019      	add	sp, #100	@ 0x64
 800dfc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dfcc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dfce:	2b01      	cmp	r3, #1
 800dfd0:	f77f ae37 	ble.w	800dc42 <_dtoa_r+0x7b2>
 800dfd4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800dfd6:	930a      	str	r3, [sp, #40]	@ 0x28
 800dfd8:	2001      	movs	r0, #1
 800dfda:	e655      	b.n	800dc88 <_dtoa_r+0x7f8>
 800dfdc:	9b00      	ldr	r3, [sp, #0]
 800dfde:	2b00      	cmp	r3, #0
 800dfe0:	f77f aed6 	ble.w	800dd90 <_dtoa_r+0x900>
 800dfe4:	4656      	mov	r6, sl
 800dfe6:	4621      	mov	r1, r4
 800dfe8:	4648      	mov	r0, r9
 800dfea:	f7ff f9c7 	bl	800d37c <quorem>
 800dfee:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800dff2:	f806 8b01 	strb.w	r8, [r6], #1
 800dff6:	9b00      	ldr	r3, [sp, #0]
 800dff8:	eba6 020a 	sub.w	r2, r6, sl
 800dffc:	4293      	cmp	r3, r2
 800dffe:	ddb3      	ble.n	800df68 <_dtoa_r+0xad8>
 800e000:	4649      	mov	r1, r9
 800e002:	2300      	movs	r3, #0
 800e004:	220a      	movs	r2, #10
 800e006:	4658      	mov	r0, fp
 800e008:	f000 fc42 	bl	800e890 <__multadd>
 800e00c:	4681      	mov	r9, r0
 800e00e:	e7ea      	b.n	800dfe6 <_dtoa_r+0xb56>
 800e010:	08012f20 	.word	0x08012f20
 800e014:	08012ea4 	.word	0x08012ea4

0800e018 <_free_r>:
 800e018:	b538      	push	{r3, r4, r5, lr}
 800e01a:	4605      	mov	r5, r0
 800e01c:	2900      	cmp	r1, #0
 800e01e:	d041      	beq.n	800e0a4 <_free_r+0x8c>
 800e020:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e024:	1f0c      	subs	r4, r1, #4
 800e026:	2b00      	cmp	r3, #0
 800e028:	bfb8      	it	lt
 800e02a:	18e4      	addlt	r4, r4, r3
 800e02c:	f7fc fc5c 	bl	800a8e8 <__malloc_lock>
 800e030:	4a1d      	ldr	r2, [pc, #116]	@ (800e0a8 <_free_r+0x90>)
 800e032:	6813      	ldr	r3, [r2, #0]
 800e034:	b933      	cbnz	r3, 800e044 <_free_r+0x2c>
 800e036:	6063      	str	r3, [r4, #4]
 800e038:	6014      	str	r4, [r2, #0]
 800e03a:	4628      	mov	r0, r5
 800e03c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e040:	f7fc bc58 	b.w	800a8f4 <__malloc_unlock>
 800e044:	42a3      	cmp	r3, r4
 800e046:	d908      	bls.n	800e05a <_free_r+0x42>
 800e048:	6820      	ldr	r0, [r4, #0]
 800e04a:	1821      	adds	r1, r4, r0
 800e04c:	428b      	cmp	r3, r1
 800e04e:	bf01      	itttt	eq
 800e050:	6819      	ldreq	r1, [r3, #0]
 800e052:	685b      	ldreq	r3, [r3, #4]
 800e054:	1809      	addeq	r1, r1, r0
 800e056:	6021      	streq	r1, [r4, #0]
 800e058:	e7ed      	b.n	800e036 <_free_r+0x1e>
 800e05a:	461a      	mov	r2, r3
 800e05c:	685b      	ldr	r3, [r3, #4]
 800e05e:	b10b      	cbz	r3, 800e064 <_free_r+0x4c>
 800e060:	42a3      	cmp	r3, r4
 800e062:	d9fa      	bls.n	800e05a <_free_r+0x42>
 800e064:	6811      	ldr	r1, [r2, #0]
 800e066:	1850      	adds	r0, r2, r1
 800e068:	42a0      	cmp	r0, r4
 800e06a:	d10b      	bne.n	800e084 <_free_r+0x6c>
 800e06c:	6820      	ldr	r0, [r4, #0]
 800e06e:	4401      	add	r1, r0
 800e070:	1850      	adds	r0, r2, r1
 800e072:	4283      	cmp	r3, r0
 800e074:	6011      	str	r1, [r2, #0]
 800e076:	d1e0      	bne.n	800e03a <_free_r+0x22>
 800e078:	6818      	ldr	r0, [r3, #0]
 800e07a:	685b      	ldr	r3, [r3, #4]
 800e07c:	6053      	str	r3, [r2, #4]
 800e07e:	4408      	add	r0, r1
 800e080:	6010      	str	r0, [r2, #0]
 800e082:	e7da      	b.n	800e03a <_free_r+0x22>
 800e084:	d902      	bls.n	800e08c <_free_r+0x74>
 800e086:	230c      	movs	r3, #12
 800e088:	602b      	str	r3, [r5, #0]
 800e08a:	e7d6      	b.n	800e03a <_free_r+0x22>
 800e08c:	6820      	ldr	r0, [r4, #0]
 800e08e:	1821      	adds	r1, r4, r0
 800e090:	428b      	cmp	r3, r1
 800e092:	bf04      	itt	eq
 800e094:	6819      	ldreq	r1, [r3, #0]
 800e096:	685b      	ldreq	r3, [r3, #4]
 800e098:	6063      	str	r3, [r4, #4]
 800e09a:	bf04      	itt	eq
 800e09c:	1809      	addeq	r1, r1, r0
 800e09e:	6021      	streq	r1, [r4, #0]
 800e0a0:	6054      	str	r4, [r2, #4]
 800e0a2:	e7ca      	b.n	800e03a <_free_r+0x22>
 800e0a4:	bd38      	pop	{r3, r4, r5, pc}
 800e0a6:	bf00      	nop
 800e0a8:	200096dc 	.word	0x200096dc

0800e0ac <rshift>:
 800e0ac:	6903      	ldr	r3, [r0, #16]
 800e0ae:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800e0b2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e0b6:	ea4f 1261 	mov.w	r2, r1, asr #5
 800e0ba:	f100 0414 	add.w	r4, r0, #20
 800e0be:	dd45      	ble.n	800e14c <rshift+0xa0>
 800e0c0:	f011 011f 	ands.w	r1, r1, #31
 800e0c4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800e0c8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800e0cc:	d10c      	bne.n	800e0e8 <rshift+0x3c>
 800e0ce:	f100 0710 	add.w	r7, r0, #16
 800e0d2:	4629      	mov	r1, r5
 800e0d4:	42b1      	cmp	r1, r6
 800e0d6:	d334      	bcc.n	800e142 <rshift+0x96>
 800e0d8:	1a9b      	subs	r3, r3, r2
 800e0da:	009b      	lsls	r3, r3, #2
 800e0dc:	1eea      	subs	r2, r5, #3
 800e0de:	4296      	cmp	r6, r2
 800e0e0:	bf38      	it	cc
 800e0e2:	2300      	movcc	r3, #0
 800e0e4:	4423      	add	r3, r4
 800e0e6:	e015      	b.n	800e114 <rshift+0x68>
 800e0e8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800e0ec:	f1c1 0820 	rsb	r8, r1, #32
 800e0f0:	40cf      	lsrs	r7, r1
 800e0f2:	f105 0e04 	add.w	lr, r5, #4
 800e0f6:	46a1      	mov	r9, r4
 800e0f8:	4576      	cmp	r6, lr
 800e0fa:	46f4      	mov	ip, lr
 800e0fc:	d815      	bhi.n	800e12a <rshift+0x7e>
 800e0fe:	1a9a      	subs	r2, r3, r2
 800e100:	0092      	lsls	r2, r2, #2
 800e102:	3a04      	subs	r2, #4
 800e104:	3501      	adds	r5, #1
 800e106:	42ae      	cmp	r6, r5
 800e108:	bf38      	it	cc
 800e10a:	2200      	movcc	r2, #0
 800e10c:	18a3      	adds	r3, r4, r2
 800e10e:	50a7      	str	r7, [r4, r2]
 800e110:	b107      	cbz	r7, 800e114 <rshift+0x68>
 800e112:	3304      	adds	r3, #4
 800e114:	1b1a      	subs	r2, r3, r4
 800e116:	42a3      	cmp	r3, r4
 800e118:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800e11c:	bf08      	it	eq
 800e11e:	2300      	moveq	r3, #0
 800e120:	6102      	str	r2, [r0, #16]
 800e122:	bf08      	it	eq
 800e124:	6143      	streq	r3, [r0, #20]
 800e126:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e12a:	f8dc c000 	ldr.w	ip, [ip]
 800e12e:	fa0c fc08 	lsl.w	ip, ip, r8
 800e132:	ea4c 0707 	orr.w	r7, ip, r7
 800e136:	f849 7b04 	str.w	r7, [r9], #4
 800e13a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800e13e:	40cf      	lsrs	r7, r1
 800e140:	e7da      	b.n	800e0f8 <rshift+0x4c>
 800e142:	f851 cb04 	ldr.w	ip, [r1], #4
 800e146:	f847 cf04 	str.w	ip, [r7, #4]!
 800e14a:	e7c3      	b.n	800e0d4 <rshift+0x28>
 800e14c:	4623      	mov	r3, r4
 800e14e:	e7e1      	b.n	800e114 <rshift+0x68>

0800e150 <__hexdig_fun>:
 800e150:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800e154:	2b09      	cmp	r3, #9
 800e156:	d802      	bhi.n	800e15e <__hexdig_fun+0xe>
 800e158:	3820      	subs	r0, #32
 800e15a:	b2c0      	uxtb	r0, r0
 800e15c:	4770      	bx	lr
 800e15e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800e162:	2b05      	cmp	r3, #5
 800e164:	d801      	bhi.n	800e16a <__hexdig_fun+0x1a>
 800e166:	3847      	subs	r0, #71	@ 0x47
 800e168:	e7f7      	b.n	800e15a <__hexdig_fun+0xa>
 800e16a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800e16e:	2b05      	cmp	r3, #5
 800e170:	d801      	bhi.n	800e176 <__hexdig_fun+0x26>
 800e172:	3827      	subs	r0, #39	@ 0x27
 800e174:	e7f1      	b.n	800e15a <__hexdig_fun+0xa>
 800e176:	2000      	movs	r0, #0
 800e178:	4770      	bx	lr
	...

0800e17c <__gethex>:
 800e17c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e180:	b085      	sub	sp, #20
 800e182:	468a      	mov	sl, r1
 800e184:	9302      	str	r3, [sp, #8]
 800e186:	680b      	ldr	r3, [r1, #0]
 800e188:	9001      	str	r0, [sp, #4]
 800e18a:	4690      	mov	r8, r2
 800e18c:	1c9c      	adds	r4, r3, #2
 800e18e:	46a1      	mov	r9, r4
 800e190:	f814 0b01 	ldrb.w	r0, [r4], #1
 800e194:	2830      	cmp	r0, #48	@ 0x30
 800e196:	d0fa      	beq.n	800e18e <__gethex+0x12>
 800e198:	eba9 0303 	sub.w	r3, r9, r3
 800e19c:	f1a3 0b02 	sub.w	fp, r3, #2
 800e1a0:	f7ff ffd6 	bl	800e150 <__hexdig_fun>
 800e1a4:	4605      	mov	r5, r0
 800e1a6:	2800      	cmp	r0, #0
 800e1a8:	d168      	bne.n	800e27c <__gethex+0x100>
 800e1aa:	49a0      	ldr	r1, [pc, #640]	@ (800e42c <__gethex+0x2b0>)
 800e1ac:	2201      	movs	r2, #1
 800e1ae:	4648      	mov	r0, r9
 800e1b0:	f7fe fa81 	bl	800c6b6 <strncmp>
 800e1b4:	4607      	mov	r7, r0
 800e1b6:	2800      	cmp	r0, #0
 800e1b8:	d167      	bne.n	800e28a <__gethex+0x10e>
 800e1ba:	f899 0001 	ldrb.w	r0, [r9, #1]
 800e1be:	4626      	mov	r6, r4
 800e1c0:	f7ff ffc6 	bl	800e150 <__hexdig_fun>
 800e1c4:	2800      	cmp	r0, #0
 800e1c6:	d062      	beq.n	800e28e <__gethex+0x112>
 800e1c8:	4623      	mov	r3, r4
 800e1ca:	7818      	ldrb	r0, [r3, #0]
 800e1cc:	2830      	cmp	r0, #48	@ 0x30
 800e1ce:	4699      	mov	r9, r3
 800e1d0:	f103 0301 	add.w	r3, r3, #1
 800e1d4:	d0f9      	beq.n	800e1ca <__gethex+0x4e>
 800e1d6:	f7ff ffbb 	bl	800e150 <__hexdig_fun>
 800e1da:	fab0 f580 	clz	r5, r0
 800e1de:	096d      	lsrs	r5, r5, #5
 800e1e0:	f04f 0b01 	mov.w	fp, #1
 800e1e4:	464a      	mov	r2, r9
 800e1e6:	4616      	mov	r6, r2
 800e1e8:	3201      	adds	r2, #1
 800e1ea:	7830      	ldrb	r0, [r6, #0]
 800e1ec:	f7ff ffb0 	bl	800e150 <__hexdig_fun>
 800e1f0:	2800      	cmp	r0, #0
 800e1f2:	d1f8      	bne.n	800e1e6 <__gethex+0x6a>
 800e1f4:	498d      	ldr	r1, [pc, #564]	@ (800e42c <__gethex+0x2b0>)
 800e1f6:	2201      	movs	r2, #1
 800e1f8:	4630      	mov	r0, r6
 800e1fa:	f7fe fa5c 	bl	800c6b6 <strncmp>
 800e1fe:	2800      	cmp	r0, #0
 800e200:	d13f      	bne.n	800e282 <__gethex+0x106>
 800e202:	b944      	cbnz	r4, 800e216 <__gethex+0x9a>
 800e204:	1c74      	adds	r4, r6, #1
 800e206:	4622      	mov	r2, r4
 800e208:	4616      	mov	r6, r2
 800e20a:	3201      	adds	r2, #1
 800e20c:	7830      	ldrb	r0, [r6, #0]
 800e20e:	f7ff ff9f 	bl	800e150 <__hexdig_fun>
 800e212:	2800      	cmp	r0, #0
 800e214:	d1f8      	bne.n	800e208 <__gethex+0x8c>
 800e216:	1ba4      	subs	r4, r4, r6
 800e218:	00a7      	lsls	r7, r4, #2
 800e21a:	7833      	ldrb	r3, [r6, #0]
 800e21c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800e220:	2b50      	cmp	r3, #80	@ 0x50
 800e222:	d13e      	bne.n	800e2a2 <__gethex+0x126>
 800e224:	7873      	ldrb	r3, [r6, #1]
 800e226:	2b2b      	cmp	r3, #43	@ 0x2b
 800e228:	d033      	beq.n	800e292 <__gethex+0x116>
 800e22a:	2b2d      	cmp	r3, #45	@ 0x2d
 800e22c:	d034      	beq.n	800e298 <__gethex+0x11c>
 800e22e:	1c71      	adds	r1, r6, #1
 800e230:	2400      	movs	r4, #0
 800e232:	7808      	ldrb	r0, [r1, #0]
 800e234:	f7ff ff8c 	bl	800e150 <__hexdig_fun>
 800e238:	1e43      	subs	r3, r0, #1
 800e23a:	b2db      	uxtb	r3, r3
 800e23c:	2b18      	cmp	r3, #24
 800e23e:	d830      	bhi.n	800e2a2 <__gethex+0x126>
 800e240:	f1a0 0210 	sub.w	r2, r0, #16
 800e244:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800e248:	f7ff ff82 	bl	800e150 <__hexdig_fun>
 800e24c:	f100 3cff 	add.w	ip, r0, #4294967295
 800e250:	fa5f fc8c 	uxtb.w	ip, ip
 800e254:	f1bc 0f18 	cmp.w	ip, #24
 800e258:	f04f 030a 	mov.w	r3, #10
 800e25c:	d91e      	bls.n	800e29c <__gethex+0x120>
 800e25e:	b104      	cbz	r4, 800e262 <__gethex+0xe6>
 800e260:	4252      	negs	r2, r2
 800e262:	4417      	add	r7, r2
 800e264:	f8ca 1000 	str.w	r1, [sl]
 800e268:	b1ed      	cbz	r5, 800e2a6 <__gethex+0x12a>
 800e26a:	f1bb 0f00 	cmp.w	fp, #0
 800e26e:	bf0c      	ite	eq
 800e270:	2506      	moveq	r5, #6
 800e272:	2500      	movne	r5, #0
 800e274:	4628      	mov	r0, r5
 800e276:	b005      	add	sp, #20
 800e278:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e27c:	2500      	movs	r5, #0
 800e27e:	462c      	mov	r4, r5
 800e280:	e7b0      	b.n	800e1e4 <__gethex+0x68>
 800e282:	2c00      	cmp	r4, #0
 800e284:	d1c7      	bne.n	800e216 <__gethex+0x9a>
 800e286:	4627      	mov	r7, r4
 800e288:	e7c7      	b.n	800e21a <__gethex+0x9e>
 800e28a:	464e      	mov	r6, r9
 800e28c:	462f      	mov	r7, r5
 800e28e:	2501      	movs	r5, #1
 800e290:	e7c3      	b.n	800e21a <__gethex+0x9e>
 800e292:	2400      	movs	r4, #0
 800e294:	1cb1      	adds	r1, r6, #2
 800e296:	e7cc      	b.n	800e232 <__gethex+0xb6>
 800e298:	2401      	movs	r4, #1
 800e29a:	e7fb      	b.n	800e294 <__gethex+0x118>
 800e29c:	fb03 0002 	mla	r0, r3, r2, r0
 800e2a0:	e7ce      	b.n	800e240 <__gethex+0xc4>
 800e2a2:	4631      	mov	r1, r6
 800e2a4:	e7de      	b.n	800e264 <__gethex+0xe8>
 800e2a6:	eba6 0309 	sub.w	r3, r6, r9
 800e2aa:	3b01      	subs	r3, #1
 800e2ac:	4629      	mov	r1, r5
 800e2ae:	2b07      	cmp	r3, #7
 800e2b0:	dc0a      	bgt.n	800e2c8 <__gethex+0x14c>
 800e2b2:	9801      	ldr	r0, [sp, #4]
 800e2b4:	f000 fa8a 	bl	800e7cc <_Balloc>
 800e2b8:	4604      	mov	r4, r0
 800e2ba:	b940      	cbnz	r0, 800e2ce <__gethex+0x152>
 800e2bc:	4b5c      	ldr	r3, [pc, #368]	@ (800e430 <__gethex+0x2b4>)
 800e2be:	4602      	mov	r2, r0
 800e2c0:	21e4      	movs	r1, #228	@ 0xe4
 800e2c2:	485c      	ldr	r0, [pc, #368]	@ (800e434 <__gethex+0x2b8>)
 800e2c4:	f001 fd6a 	bl	800fd9c <__assert_func>
 800e2c8:	3101      	adds	r1, #1
 800e2ca:	105b      	asrs	r3, r3, #1
 800e2cc:	e7ef      	b.n	800e2ae <__gethex+0x132>
 800e2ce:	f100 0a14 	add.w	sl, r0, #20
 800e2d2:	2300      	movs	r3, #0
 800e2d4:	4655      	mov	r5, sl
 800e2d6:	469b      	mov	fp, r3
 800e2d8:	45b1      	cmp	r9, r6
 800e2da:	d337      	bcc.n	800e34c <__gethex+0x1d0>
 800e2dc:	f845 bb04 	str.w	fp, [r5], #4
 800e2e0:	eba5 050a 	sub.w	r5, r5, sl
 800e2e4:	10ad      	asrs	r5, r5, #2
 800e2e6:	6125      	str	r5, [r4, #16]
 800e2e8:	4658      	mov	r0, fp
 800e2ea:	f000 fb61 	bl	800e9b0 <__hi0bits>
 800e2ee:	016d      	lsls	r5, r5, #5
 800e2f0:	f8d8 6000 	ldr.w	r6, [r8]
 800e2f4:	1a2d      	subs	r5, r5, r0
 800e2f6:	42b5      	cmp	r5, r6
 800e2f8:	dd54      	ble.n	800e3a4 <__gethex+0x228>
 800e2fa:	1bad      	subs	r5, r5, r6
 800e2fc:	4629      	mov	r1, r5
 800e2fe:	4620      	mov	r0, r4
 800e300:	f000 fef5 	bl	800f0ee <__any_on>
 800e304:	4681      	mov	r9, r0
 800e306:	b178      	cbz	r0, 800e328 <__gethex+0x1ac>
 800e308:	1e6b      	subs	r3, r5, #1
 800e30a:	1159      	asrs	r1, r3, #5
 800e30c:	f003 021f 	and.w	r2, r3, #31
 800e310:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800e314:	f04f 0901 	mov.w	r9, #1
 800e318:	fa09 f202 	lsl.w	r2, r9, r2
 800e31c:	420a      	tst	r2, r1
 800e31e:	d003      	beq.n	800e328 <__gethex+0x1ac>
 800e320:	454b      	cmp	r3, r9
 800e322:	dc36      	bgt.n	800e392 <__gethex+0x216>
 800e324:	f04f 0902 	mov.w	r9, #2
 800e328:	4629      	mov	r1, r5
 800e32a:	4620      	mov	r0, r4
 800e32c:	f7ff febe 	bl	800e0ac <rshift>
 800e330:	442f      	add	r7, r5
 800e332:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e336:	42bb      	cmp	r3, r7
 800e338:	da42      	bge.n	800e3c0 <__gethex+0x244>
 800e33a:	9801      	ldr	r0, [sp, #4]
 800e33c:	4621      	mov	r1, r4
 800e33e:	f000 fa85 	bl	800e84c <_Bfree>
 800e342:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e344:	2300      	movs	r3, #0
 800e346:	6013      	str	r3, [r2, #0]
 800e348:	25a3      	movs	r5, #163	@ 0xa3
 800e34a:	e793      	b.n	800e274 <__gethex+0xf8>
 800e34c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800e350:	2a2e      	cmp	r2, #46	@ 0x2e
 800e352:	d012      	beq.n	800e37a <__gethex+0x1fe>
 800e354:	2b20      	cmp	r3, #32
 800e356:	d104      	bne.n	800e362 <__gethex+0x1e6>
 800e358:	f845 bb04 	str.w	fp, [r5], #4
 800e35c:	f04f 0b00 	mov.w	fp, #0
 800e360:	465b      	mov	r3, fp
 800e362:	7830      	ldrb	r0, [r6, #0]
 800e364:	9303      	str	r3, [sp, #12]
 800e366:	f7ff fef3 	bl	800e150 <__hexdig_fun>
 800e36a:	9b03      	ldr	r3, [sp, #12]
 800e36c:	f000 000f 	and.w	r0, r0, #15
 800e370:	4098      	lsls	r0, r3
 800e372:	ea4b 0b00 	orr.w	fp, fp, r0
 800e376:	3304      	adds	r3, #4
 800e378:	e7ae      	b.n	800e2d8 <__gethex+0x15c>
 800e37a:	45b1      	cmp	r9, r6
 800e37c:	d8ea      	bhi.n	800e354 <__gethex+0x1d8>
 800e37e:	492b      	ldr	r1, [pc, #172]	@ (800e42c <__gethex+0x2b0>)
 800e380:	9303      	str	r3, [sp, #12]
 800e382:	2201      	movs	r2, #1
 800e384:	4630      	mov	r0, r6
 800e386:	f7fe f996 	bl	800c6b6 <strncmp>
 800e38a:	9b03      	ldr	r3, [sp, #12]
 800e38c:	2800      	cmp	r0, #0
 800e38e:	d1e1      	bne.n	800e354 <__gethex+0x1d8>
 800e390:	e7a2      	b.n	800e2d8 <__gethex+0x15c>
 800e392:	1ea9      	subs	r1, r5, #2
 800e394:	4620      	mov	r0, r4
 800e396:	f000 feaa 	bl	800f0ee <__any_on>
 800e39a:	2800      	cmp	r0, #0
 800e39c:	d0c2      	beq.n	800e324 <__gethex+0x1a8>
 800e39e:	f04f 0903 	mov.w	r9, #3
 800e3a2:	e7c1      	b.n	800e328 <__gethex+0x1ac>
 800e3a4:	da09      	bge.n	800e3ba <__gethex+0x23e>
 800e3a6:	1b75      	subs	r5, r6, r5
 800e3a8:	4621      	mov	r1, r4
 800e3aa:	9801      	ldr	r0, [sp, #4]
 800e3ac:	462a      	mov	r2, r5
 800e3ae:	f000 fc65 	bl	800ec7c <__lshift>
 800e3b2:	1b7f      	subs	r7, r7, r5
 800e3b4:	4604      	mov	r4, r0
 800e3b6:	f100 0a14 	add.w	sl, r0, #20
 800e3ba:	f04f 0900 	mov.w	r9, #0
 800e3be:	e7b8      	b.n	800e332 <__gethex+0x1b6>
 800e3c0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800e3c4:	42bd      	cmp	r5, r7
 800e3c6:	dd6f      	ble.n	800e4a8 <__gethex+0x32c>
 800e3c8:	1bed      	subs	r5, r5, r7
 800e3ca:	42ae      	cmp	r6, r5
 800e3cc:	dc34      	bgt.n	800e438 <__gethex+0x2bc>
 800e3ce:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e3d2:	2b02      	cmp	r3, #2
 800e3d4:	d022      	beq.n	800e41c <__gethex+0x2a0>
 800e3d6:	2b03      	cmp	r3, #3
 800e3d8:	d024      	beq.n	800e424 <__gethex+0x2a8>
 800e3da:	2b01      	cmp	r3, #1
 800e3dc:	d115      	bne.n	800e40a <__gethex+0x28e>
 800e3de:	42ae      	cmp	r6, r5
 800e3e0:	d113      	bne.n	800e40a <__gethex+0x28e>
 800e3e2:	2e01      	cmp	r6, #1
 800e3e4:	d10b      	bne.n	800e3fe <__gethex+0x282>
 800e3e6:	9a02      	ldr	r2, [sp, #8]
 800e3e8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800e3ec:	6013      	str	r3, [r2, #0]
 800e3ee:	2301      	movs	r3, #1
 800e3f0:	6123      	str	r3, [r4, #16]
 800e3f2:	f8ca 3000 	str.w	r3, [sl]
 800e3f6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e3f8:	2562      	movs	r5, #98	@ 0x62
 800e3fa:	601c      	str	r4, [r3, #0]
 800e3fc:	e73a      	b.n	800e274 <__gethex+0xf8>
 800e3fe:	1e71      	subs	r1, r6, #1
 800e400:	4620      	mov	r0, r4
 800e402:	f000 fe74 	bl	800f0ee <__any_on>
 800e406:	2800      	cmp	r0, #0
 800e408:	d1ed      	bne.n	800e3e6 <__gethex+0x26a>
 800e40a:	9801      	ldr	r0, [sp, #4]
 800e40c:	4621      	mov	r1, r4
 800e40e:	f000 fa1d 	bl	800e84c <_Bfree>
 800e412:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e414:	2300      	movs	r3, #0
 800e416:	6013      	str	r3, [r2, #0]
 800e418:	2550      	movs	r5, #80	@ 0x50
 800e41a:	e72b      	b.n	800e274 <__gethex+0xf8>
 800e41c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e41e:	2b00      	cmp	r3, #0
 800e420:	d1f3      	bne.n	800e40a <__gethex+0x28e>
 800e422:	e7e0      	b.n	800e3e6 <__gethex+0x26a>
 800e424:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e426:	2b00      	cmp	r3, #0
 800e428:	d1dd      	bne.n	800e3e6 <__gethex+0x26a>
 800e42a:	e7ee      	b.n	800e40a <__gethex+0x28e>
 800e42c:	08012c5f 	.word	0x08012c5f
 800e430:	08012f20 	.word	0x08012f20
 800e434:	08012f31 	.word	0x08012f31
 800e438:	1e6f      	subs	r7, r5, #1
 800e43a:	f1b9 0f00 	cmp.w	r9, #0
 800e43e:	d130      	bne.n	800e4a2 <__gethex+0x326>
 800e440:	b127      	cbz	r7, 800e44c <__gethex+0x2d0>
 800e442:	4639      	mov	r1, r7
 800e444:	4620      	mov	r0, r4
 800e446:	f000 fe52 	bl	800f0ee <__any_on>
 800e44a:	4681      	mov	r9, r0
 800e44c:	117a      	asrs	r2, r7, #5
 800e44e:	2301      	movs	r3, #1
 800e450:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800e454:	f007 071f 	and.w	r7, r7, #31
 800e458:	40bb      	lsls	r3, r7
 800e45a:	4213      	tst	r3, r2
 800e45c:	4629      	mov	r1, r5
 800e45e:	4620      	mov	r0, r4
 800e460:	bf18      	it	ne
 800e462:	f049 0902 	orrne.w	r9, r9, #2
 800e466:	f7ff fe21 	bl	800e0ac <rshift>
 800e46a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800e46e:	1b76      	subs	r6, r6, r5
 800e470:	2502      	movs	r5, #2
 800e472:	f1b9 0f00 	cmp.w	r9, #0
 800e476:	d047      	beq.n	800e508 <__gethex+0x38c>
 800e478:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e47c:	2b02      	cmp	r3, #2
 800e47e:	d015      	beq.n	800e4ac <__gethex+0x330>
 800e480:	2b03      	cmp	r3, #3
 800e482:	d017      	beq.n	800e4b4 <__gethex+0x338>
 800e484:	2b01      	cmp	r3, #1
 800e486:	d109      	bne.n	800e49c <__gethex+0x320>
 800e488:	f019 0f02 	tst.w	r9, #2
 800e48c:	d006      	beq.n	800e49c <__gethex+0x320>
 800e48e:	f8da 3000 	ldr.w	r3, [sl]
 800e492:	ea49 0903 	orr.w	r9, r9, r3
 800e496:	f019 0f01 	tst.w	r9, #1
 800e49a:	d10e      	bne.n	800e4ba <__gethex+0x33e>
 800e49c:	f045 0510 	orr.w	r5, r5, #16
 800e4a0:	e032      	b.n	800e508 <__gethex+0x38c>
 800e4a2:	f04f 0901 	mov.w	r9, #1
 800e4a6:	e7d1      	b.n	800e44c <__gethex+0x2d0>
 800e4a8:	2501      	movs	r5, #1
 800e4aa:	e7e2      	b.n	800e472 <__gethex+0x2f6>
 800e4ac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e4ae:	f1c3 0301 	rsb	r3, r3, #1
 800e4b2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800e4b4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e4b6:	2b00      	cmp	r3, #0
 800e4b8:	d0f0      	beq.n	800e49c <__gethex+0x320>
 800e4ba:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800e4be:	f104 0314 	add.w	r3, r4, #20
 800e4c2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800e4c6:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800e4ca:	f04f 0c00 	mov.w	ip, #0
 800e4ce:	4618      	mov	r0, r3
 800e4d0:	f853 2b04 	ldr.w	r2, [r3], #4
 800e4d4:	f1b2 3fff 	cmp.w	r2, #4294967295
 800e4d8:	d01b      	beq.n	800e512 <__gethex+0x396>
 800e4da:	3201      	adds	r2, #1
 800e4dc:	6002      	str	r2, [r0, #0]
 800e4de:	2d02      	cmp	r5, #2
 800e4e0:	f104 0314 	add.w	r3, r4, #20
 800e4e4:	d13c      	bne.n	800e560 <__gethex+0x3e4>
 800e4e6:	f8d8 2000 	ldr.w	r2, [r8]
 800e4ea:	3a01      	subs	r2, #1
 800e4ec:	42b2      	cmp	r2, r6
 800e4ee:	d109      	bne.n	800e504 <__gethex+0x388>
 800e4f0:	1171      	asrs	r1, r6, #5
 800e4f2:	2201      	movs	r2, #1
 800e4f4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800e4f8:	f006 061f 	and.w	r6, r6, #31
 800e4fc:	fa02 f606 	lsl.w	r6, r2, r6
 800e500:	421e      	tst	r6, r3
 800e502:	d13a      	bne.n	800e57a <__gethex+0x3fe>
 800e504:	f045 0520 	orr.w	r5, r5, #32
 800e508:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e50a:	601c      	str	r4, [r3, #0]
 800e50c:	9b02      	ldr	r3, [sp, #8]
 800e50e:	601f      	str	r7, [r3, #0]
 800e510:	e6b0      	b.n	800e274 <__gethex+0xf8>
 800e512:	4299      	cmp	r1, r3
 800e514:	f843 cc04 	str.w	ip, [r3, #-4]
 800e518:	d8d9      	bhi.n	800e4ce <__gethex+0x352>
 800e51a:	68a3      	ldr	r3, [r4, #8]
 800e51c:	459b      	cmp	fp, r3
 800e51e:	db17      	blt.n	800e550 <__gethex+0x3d4>
 800e520:	6861      	ldr	r1, [r4, #4]
 800e522:	9801      	ldr	r0, [sp, #4]
 800e524:	3101      	adds	r1, #1
 800e526:	f000 f951 	bl	800e7cc <_Balloc>
 800e52a:	4681      	mov	r9, r0
 800e52c:	b918      	cbnz	r0, 800e536 <__gethex+0x3ba>
 800e52e:	4b1a      	ldr	r3, [pc, #104]	@ (800e598 <__gethex+0x41c>)
 800e530:	4602      	mov	r2, r0
 800e532:	2184      	movs	r1, #132	@ 0x84
 800e534:	e6c5      	b.n	800e2c2 <__gethex+0x146>
 800e536:	6922      	ldr	r2, [r4, #16]
 800e538:	3202      	adds	r2, #2
 800e53a:	f104 010c 	add.w	r1, r4, #12
 800e53e:	0092      	lsls	r2, r2, #2
 800e540:	300c      	adds	r0, #12
 800e542:	f7fe fef7 	bl	800d334 <memcpy>
 800e546:	4621      	mov	r1, r4
 800e548:	9801      	ldr	r0, [sp, #4]
 800e54a:	f000 f97f 	bl	800e84c <_Bfree>
 800e54e:	464c      	mov	r4, r9
 800e550:	6923      	ldr	r3, [r4, #16]
 800e552:	1c5a      	adds	r2, r3, #1
 800e554:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800e558:	6122      	str	r2, [r4, #16]
 800e55a:	2201      	movs	r2, #1
 800e55c:	615a      	str	r2, [r3, #20]
 800e55e:	e7be      	b.n	800e4de <__gethex+0x362>
 800e560:	6922      	ldr	r2, [r4, #16]
 800e562:	455a      	cmp	r2, fp
 800e564:	dd0b      	ble.n	800e57e <__gethex+0x402>
 800e566:	2101      	movs	r1, #1
 800e568:	4620      	mov	r0, r4
 800e56a:	f7ff fd9f 	bl	800e0ac <rshift>
 800e56e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e572:	3701      	adds	r7, #1
 800e574:	42bb      	cmp	r3, r7
 800e576:	f6ff aee0 	blt.w	800e33a <__gethex+0x1be>
 800e57a:	2501      	movs	r5, #1
 800e57c:	e7c2      	b.n	800e504 <__gethex+0x388>
 800e57e:	f016 061f 	ands.w	r6, r6, #31
 800e582:	d0fa      	beq.n	800e57a <__gethex+0x3fe>
 800e584:	4453      	add	r3, sl
 800e586:	f1c6 0620 	rsb	r6, r6, #32
 800e58a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800e58e:	f000 fa0f 	bl	800e9b0 <__hi0bits>
 800e592:	42b0      	cmp	r0, r6
 800e594:	dbe7      	blt.n	800e566 <__gethex+0x3ea>
 800e596:	e7f0      	b.n	800e57a <__gethex+0x3fe>
 800e598:	08012f20 	.word	0x08012f20

0800e59c <L_shift>:
 800e59c:	f1c2 0208 	rsb	r2, r2, #8
 800e5a0:	0092      	lsls	r2, r2, #2
 800e5a2:	b570      	push	{r4, r5, r6, lr}
 800e5a4:	f1c2 0620 	rsb	r6, r2, #32
 800e5a8:	6843      	ldr	r3, [r0, #4]
 800e5aa:	6804      	ldr	r4, [r0, #0]
 800e5ac:	fa03 f506 	lsl.w	r5, r3, r6
 800e5b0:	432c      	orrs	r4, r5
 800e5b2:	40d3      	lsrs	r3, r2
 800e5b4:	6004      	str	r4, [r0, #0]
 800e5b6:	f840 3f04 	str.w	r3, [r0, #4]!
 800e5ba:	4288      	cmp	r0, r1
 800e5bc:	d3f4      	bcc.n	800e5a8 <L_shift+0xc>
 800e5be:	bd70      	pop	{r4, r5, r6, pc}

0800e5c0 <__match>:
 800e5c0:	b530      	push	{r4, r5, lr}
 800e5c2:	6803      	ldr	r3, [r0, #0]
 800e5c4:	3301      	adds	r3, #1
 800e5c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e5ca:	b914      	cbnz	r4, 800e5d2 <__match+0x12>
 800e5cc:	6003      	str	r3, [r0, #0]
 800e5ce:	2001      	movs	r0, #1
 800e5d0:	bd30      	pop	{r4, r5, pc}
 800e5d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e5d6:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800e5da:	2d19      	cmp	r5, #25
 800e5dc:	bf98      	it	ls
 800e5de:	3220      	addls	r2, #32
 800e5e0:	42a2      	cmp	r2, r4
 800e5e2:	d0f0      	beq.n	800e5c6 <__match+0x6>
 800e5e4:	2000      	movs	r0, #0
 800e5e6:	e7f3      	b.n	800e5d0 <__match+0x10>

0800e5e8 <__hexnan>:
 800e5e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e5ec:	680b      	ldr	r3, [r1, #0]
 800e5ee:	6801      	ldr	r1, [r0, #0]
 800e5f0:	115e      	asrs	r6, r3, #5
 800e5f2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800e5f6:	f013 031f 	ands.w	r3, r3, #31
 800e5fa:	b087      	sub	sp, #28
 800e5fc:	bf18      	it	ne
 800e5fe:	3604      	addne	r6, #4
 800e600:	2500      	movs	r5, #0
 800e602:	1f37      	subs	r7, r6, #4
 800e604:	4682      	mov	sl, r0
 800e606:	4690      	mov	r8, r2
 800e608:	9301      	str	r3, [sp, #4]
 800e60a:	f846 5c04 	str.w	r5, [r6, #-4]
 800e60e:	46b9      	mov	r9, r7
 800e610:	463c      	mov	r4, r7
 800e612:	9502      	str	r5, [sp, #8]
 800e614:	46ab      	mov	fp, r5
 800e616:	784a      	ldrb	r2, [r1, #1]
 800e618:	1c4b      	adds	r3, r1, #1
 800e61a:	9303      	str	r3, [sp, #12]
 800e61c:	b342      	cbz	r2, 800e670 <__hexnan+0x88>
 800e61e:	4610      	mov	r0, r2
 800e620:	9105      	str	r1, [sp, #20]
 800e622:	9204      	str	r2, [sp, #16]
 800e624:	f7ff fd94 	bl	800e150 <__hexdig_fun>
 800e628:	2800      	cmp	r0, #0
 800e62a:	d151      	bne.n	800e6d0 <__hexnan+0xe8>
 800e62c:	9a04      	ldr	r2, [sp, #16]
 800e62e:	9905      	ldr	r1, [sp, #20]
 800e630:	2a20      	cmp	r2, #32
 800e632:	d818      	bhi.n	800e666 <__hexnan+0x7e>
 800e634:	9b02      	ldr	r3, [sp, #8]
 800e636:	459b      	cmp	fp, r3
 800e638:	dd13      	ble.n	800e662 <__hexnan+0x7a>
 800e63a:	454c      	cmp	r4, r9
 800e63c:	d206      	bcs.n	800e64c <__hexnan+0x64>
 800e63e:	2d07      	cmp	r5, #7
 800e640:	dc04      	bgt.n	800e64c <__hexnan+0x64>
 800e642:	462a      	mov	r2, r5
 800e644:	4649      	mov	r1, r9
 800e646:	4620      	mov	r0, r4
 800e648:	f7ff ffa8 	bl	800e59c <L_shift>
 800e64c:	4544      	cmp	r4, r8
 800e64e:	d952      	bls.n	800e6f6 <__hexnan+0x10e>
 800e650:	2300      	movs	r3, #0
 800e652:	f1a4 0904 	sub.w	r9, r4, #4
 800e656:	f844 3c04 	str.w	r3, [r4, #-4]
 800e65a:	f8cd b008 	str.w	fp, [sp, #8]
 800e65e:	464c      	mov	r4, r9
 800e660:	461d      	mov	r5, r3
 800e662:	9903      	ldr	r1, [sp, #12]
 800e664:	e7d7      	b.n	800e616 <__hexnan+0x2e>
 800e666:	2a29      	cmp	r2, #41	@ 0x29
 800e668:	d157      	bne.n	800e71a <__hexnan+0x132>
 800e66a:	3102      	adds	r1, #2
 800e66c:	f8ca 1000 	str.w	r1, [sl]
 800e670:	f1bb 0f00 	cmp.w	fp, #0
 800e674:	d051      	beq.n	800e71a <__hexnan+0x132>
 800e676:	454c      	cmp	r4, r9
 800e678:	d206      	bcs.n	800e688 <__hexnan+0xa0>
 800e67a:	2d07      	cmp	r5, #7
 800e67c:	dc04      	bgt.n	800e688 <__hexnan+0xa0>
 800e67e:	462a      	mov	r2, r5
 800e680:	4649      	mov	r1, r9
 800e682:	4620      	mov	r0, r4
 800e684:	f7ff ff8a 	bl	800e59c <L_shift>
 800e688:	4544      	cmp	r4, r8
 800e68a:	d936      	bls.n	800e6fa <__hexnan+0x112>
 800e68c:	f1a8 0204 	sub.w	r2, r8, #4
 800e690:	4623      	mov	r3, r4
 800e692:	f853 1b04 	ldr.w	r1, [r3], #4
 800e696:	f842 1f04 	str.w	r1, [r2, #4]!
 800e69a:	429f      	cmp	r7, r3
 800e69c:	d2f9      	bcs.n	800e692 <__hexnan+0xaa>
 800e69e:	1b3b      	subs	r3, r7, r4
 800e6a0:	f023 0303 	bic.w	r3, r3, #3
 800e6a4:	3304      	adds	r3, #4
 800e6a6:	3401      	adds	r4, #1
 800e6a8:	3e03      	subs	r6, #3
 800e6aa:	42b4      	cmp	r4, r6
 800e6ac:	bf88      	it	hi
 800e6ae:	2304      	movhi	r3, #4
 800e6b0:	4443      	add	r3, r8
 800e6b2:	2200      	movs	r2, #0
 800e6b4:	f843 2b04 	str.w	r2, [r3], #4
 800e6b8:	429f      	cmp	r7, r3
 800e6ba:	d2fb      	bcs.n	800e6b4 <__hexnan+0xcc>
 800e6bc:	683b      	ldr	r3, [r7, #0]
 800e6be:	b91b      	cbnz	r3, 800e6c8 <__hexnan+0xe0>
 800e6c0:	4547      	cmp	r7, r8
 800e6c2:	d128      	bne.n	800e716 <__hexnan+0x12e>
 800e6c4:	2301      	movs	r3, #1
 800e6c6:	603b      	str	r3, [r7, #0]
 800e6c8:	2005      	movs	r0, #5
 800e6ca:	b007      	add	sp, #28
 800e6cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e6d0:	3501      	adds	r5, #1
 800e6d2:	2d08      	cmp	r5, #8
 800e6d4:	f10b 0b01 	add.w	fp, fp, #1
 800e6d8:	dd06      	ble.n	800e6e8 <__hexnan+0x100>
 800e6da:	4544      	cmp	r4, r8
 800e6dc:	d9c1      	bls.n	800e662 <__hexnan+0x7a>
 800e6de:	2300      	movs	r3, #0
 800e6e0:	f844 3c04 	str.w	r3, [r4, #-4]
 800e6e4:	2501      	movs	r5, #1
 800e6e6:	3c04      	subs	r4, #4
 800e6e8:	6822      	ldr	r2, [r4, #0]
 800e6ea:	f000 000f 	and.w	r0, r0, #15
 800e6ee:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800e6f2:	6020      	str	r0, [r4, #0]
 800e6f4:	e7b5      	b.n	800e662 <__hexnan+0x7a>
 800e6f6:	2508      	movs	r5, #8
 800e6f8:	e7b3      	b.n	800e662 <__hexnan+0x7a>
 800e6fa:	9b01      	ldr	r3, [sp, #4]
 800e6fc:	2b00      	cmp	r3, #0
 800e6fe:	d0dd      	beq.n	800e6bc <__hexnan+0xd4>
 800e700:	f1c3 0320 	rsb	r3, r3, #32
 800e704:	f04f 32ff 	mov.w	r2, #4294967295
 800e708:	40da      	lsrs	r2, r3
 800e70a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800e70e:	4013      	ands	r3, r2
 800e710:	f846 3c04 	str.w	r3, [r6, #-4]
 800e714:	e7d2      	b.n	800e6bc <__hexnan+0xd4>
 800e716:	3f04      	subs	r7, #4
 800e718:	e7d0      	b.n	800e6bc <__hexnan+0xd4>
 800e71a:	2004      	movs	r0, #4
 800e71c:	e7d5      	b.n	800e6ca <__hexnan+0xe2>
	...

0800e720 <_findenv_r>:
 800e720:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e724:	f8df a06c 	ldr.w	sl, [pc, #108]	@ 800e794 <_findenv_r+0x74>
 800e728:	4606      	mov	r6, r0
 800e72a:	4689      	mov	r9, r1
 800e72c:	4617      	mov	r7, r2
 800e72e:	f001 fb67 	bl	800fe00 <__env_lock>
 800e732:	f8da 4000 	ldr.w	r4, [sl]
 800e736:	b134      	cbz	r4, 800e746 <_findenv_r+0x26>
 800e738:	464b      	mov	r3, r9
 800e73a:	4698      	mov	r8, r3
 800e73c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e740:	b13a      	cbz	r2, 800e752 <_findenv_r+0x32>
 800e742:	2a3d      	cmp	r2, #61	@ 0x3d
 800e744:	d1f9      	bne.n	800e73a <_findenv_r+0x1a>
 800e746:	4630      	mov	r0, r6
 800e748:	f001 fb60 	bl	800fe0c <__env_unlock>
 800e74c:	2000      	movs	r0, #0
 800e74e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e752:	eba8 0809 	sub.w	r8, r8, r9
 800e756:	46a3      	mov	fp, r4
 800e758:	f854 0b04 	ldr.w	r0, [r4], #4
 800e75c:	2800      	cmp	r0, #0
 800e75e:	d0f2      	beq.n	800e746 <_findenv_r+0x26>
 800e760:	4642      	mov	r2, r8
 800e762:	4649      	mov	r1, r9
 800e764:	f7fd ffa7 	bl	800c6b6 <strncmp>
 800e768:	2800      	cmp	r0, #0
 800e76a:	d1f4      	bne.n	800e756 <_findenv_r+0x36>
 800e76c:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800e770:	eb03 0508 	add.w	r5, r3, r8
 800e774:	f813 3008 	ldrb.w	r3, [r3, r8]
 800e778:	2b3d      	cmp	r3, #61	@ 0x3d
 800e77a:	d1ec      	bne.n	800e756 <_findenv_r+0x36>
 800e77c:	f8da 3000 	ldr.w	r3, [sl]
 800e780:	ebab 0303 	sub.w	r3, fp, r3
 800e784:	109b      	asrs	r3, r3, #2
 800e786:	4630      	mov	r0, r6
 800e788:	603b      	str	r3, [r7, #0]
 800e78a:	f001 fb3f 	bl	800fe0c <__env_unlock>
 800e78e:	1c68      	adds	r0, r5, #1
 800e790:	e7dd      	b.n	800e74e <_findenv_r+0x2e>
 800e792:	bf00      	nop
 800e794:	20000024 	.word	0x20000024

0800e798 <_getenv_r>:
 800e798:	b507      	push	{r0, r1, r2, lr}
 800e79a:	aa01      	add	r2, sp, #4
 800e79c:	f7ff ffc0 	bl	800e720 <_findenv_r>
 800e7a0:	b003      	add	sp, #12
 800e7a2:	f85d fb04 	ldr.w	pc, [sp], #4

0800e7a6 <__ascii_mbtowc>:
 800e7a6:	b082      	sub	sp, #8
 800e7a8:	b901      	cbnz	r1, 800e7ac <__ascii_mbtowc+0x6>
 800e7aa:	a901      	add	r1, sp, #4
 800e7ac:	b142      	cbz	r2, 800e7c0 <__ascii_mbtowc+0x1a>
 800e7ae:	b14b      	cbz	r3, 800e7c4 <__ascii_mbtowc+0x1e>
 800e7b0:	7813      	ldrb	r3, [r2, #0]
 800e7b2:	600b      	str	r3, [r1, #0]
 800e7b4:	7812      	ldrb	r2, [r2, #0]
 800e7b6:	1e10      	subs	r0, r2, #0
 800e7b8:	bf18      	it	ne
 800e7ba:	2001      	movne	r0, #1
 800e7bc:	b002      	add	sp, #8
 800e7be:	4770      	bx	lr
 800e7c0:	4610      	mov	r0, r2
 800e7c2:	e7fb      	b.n	800e7bc <__ascii_mbtowc+0x16>
 800e7c4:	f06f 0001 	mvn.w	r0, #1
 800e7c8:	e7f8      	b.n	800e7bc <__ascii_mbtowc+0x16>
	...

0800e7cc <_Balloc>:
 800e7cc:	b570      	push	{r4, r5, r6, lr}
 800e7ce:	69c6      	ldr	r6, [r0, #28]
 800e7d0:	4604      	mov	r4, r0
 800e7d2:	460d      	mov	r5, r1
 800e7d4:	b976      	cbnz	r6, 800e7f4 <_Balloc+0x28>
 800e7d6:	2010      	movs	r0, #16
 800e7d8:	f7fb ffd4 	bl	800a784 <malloc>
 800e7dc:	4602      	mov	r2, r0
 800e7de:	61e0      	str	r0, [r4, #28]
 800e7e0:	b920      	cbnz	r0, 800e7ec <_Balloc+0x20>
 800e7e2:	4b18      	ldr	r3, [pc, #96]	@ (800e844 <_Balloc+0x78>)
 800e7e4:	4818      	ldr	r0, [pc, #96]	@ (800e848 <_Balloc+0x7c>)
 800e7e6:	216b      	movs	r1, #107	@ 0x6b
 800e7e8:	f001 fad8 	bl	800fd9c <__assert_func>
 800e7ec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e7f0:	6006      	str	r6, [r0, #0]
 800e7f2:	60c6      	str	r6, [r0, #12]
 800e7f4:	69e6      	ldr	r6, [r4, #28]
 800e7f6:	68f3      	ldr	r3, [r6, #12]
 800e7f8:	b183      	cbz	r3, 800e81c <_Balloc+0x50>
 800e7fa:	69e3      	ldr	r3, [r4, #28]
 800e7fc:	68db      	ldr	r3, [r3, #12]
 800e7fe:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e802:	b9b8      	cbnz	r0, 800e834 <_Balloc+0x68>
 800e804:	2101      	movs	r1, #1
 800e806:	fa01 f605 	lsl.w	r6, r1, r5
 800e80a:	1d72      	adds	r2, r6, #5
 800e80c:	0092      	lsls	r2, r2, #2
 800e80e:	4620      	mov	r0, r4
 800e810:	f001 fae2 	bl	800fdd8 <_calloc_r>
 800e814:	b160      	cbz	r0, 800e830 <_Balloc+0x64>
 800e816:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800e81a:	e00e      	b.n	800e83a <_Balloc+0x6e>
 800e81c:	2221      	movs	r2, #33	@ 0x21
 800e81e:	2104      	movs	r1, #4
 800e820:	4620      	mov	r0, r4
 800e822:	f001 fad9 	bl	800fdd8 <_calloc_r>
 800e826:	69e3      	ldr	r3, [r4, #28]
 800e828:	60f0      	str	r0, [r6, #12]
 800e82a:	68db      	ldr	r3, [r3, #12]
 800e82c:	2b00      	cmp	r3, #0
 800e82e:	d1e4      	bne.n	800e7fa <_Balloc+0x2e>
 800e830:	2000      	movs	r0, #0
 800e832:	bd70      	pop	{r4, r5, r6, pc}
 800e834:	6802      	ldr	r2, [r0, #0]
 800e836:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e83a:	2300      	movs	r3, #0
 800e83c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e840:	e7f7      	b.n	800e832 <_Balloc+0x66>
 800e842:	bf00      	nop
 800e844:	08012eb1 	.word	0x08012eb1
 800e848:	08012f91 	.word	0x08012f91

0800e84c <_Bfree>:
 800e84c:	b570      	push	{r4, r5, r6, lr}
 800e84e:	69c6      	ldr	r6, [r0, #28]
 800e850:	4605      	mov	r5, r0
 800e852:	460c      	mov	r4, r1
 800e854:	b976      	cbnz	r6, 800e874 <_Bfree+0x28>
 800e856:	2010      	movs	r0, #16
 800e858:	f7fb ff94 	bl	800a784 <malloc>
 800e85c:	4602      	mov	r2, r0
 800e85e:	61e8      	str	r0, [r5, #28]
 800e860:	b920      	cbnz	r0, 800e86c <_Bfree+0x20>
 800e862:	4b09      	ldr	r3, [pc, #36]	@ (800e888 <_Bfree+0x3c>)
 800e864:	4809      	ldr	r0, [pc, #36]	@ (800e88c <_Bfree+0x40>)
 800e866:	218f      	movs	r1, #143	@ 0x8f
 800e868:	f001 fa98 	bl	800fd9c <__assert_func>
 800e86c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e870:	6006      	str	r6, [r0, #0]
 800e872:	60c6      	str	r6, [r0, #12]
 800e874:	b13c      	cbz	r4, 800e886 <_Bfree+0x3a>
 800e876:	69eb      	ldr	r3, [r5, #28]
 800e878:	6862      	ldr	r2, [r4, #4]
 800e87a:	68db      	ldr	r3, [r3, #12]
 800e87c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e880:	6021      	str	r1, [r4, #0]
 800e882:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e886:	bd70      	pop	{r4, r5, r6, pc}
 800e888:	08012eb1 	.word	0x08012eb1
 800e88c:	08012f91 	.word	0x08012f91

0800e890 <__multadd>:
 800e890:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e894:	690d      	ldr	r5, [r1, #16]
 800e896:	4607      	mov	r7, r0
 800e898:	460c      	mov	r4, r1
 800e89a:	461e      	mov	r6, r3
 800e89c:	f101 0c14 	add.w	ip, r1, #20
 800e8a0:	2000      	movs	r0, #0
 800e8a2:	f8dc 3000 	ldr.w	r3, [ip]
 800e8a6:	b299      	uxth	r1, r3
 800e8a8:	fb02 6101 	mla	r1, r2, r1, r6
 800e8ac:	0c1e      	lsrs	r6, r3, #16
 800e8ae:	0c0b      	lsrs	r3, r1, #16
 800e8b0:	fb02 3306 	mla	r3, r2, r6, r3
 800e8b4:	b289      	uxth	r1, r1
 800e8b6:	3001      	adds	r0, #1
 800e8b8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800e8bc:	4285      	cmp	r5, r0
 800e8be:	f84c 1b04 	str.w	r1, [ip], #4
 800e8c2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800e8c6:	dcec      	bgt.n	800e8a2 <__multadd+0x12>
 800e8c8:	b30e      	cbz	r6, 800e90e <__multadd+0x7e>
 800e8ca:	68a3      	ldr	r3, [r4, #8]
 800e8cc:	42ab      	cmp	r3, r5
 800e8ce:	dc19      	bgt.n	800e904 <__multadd+0x74>
 800e8d0:	6861      	ldr	r1, [r4, #4]
 800e8d2:	4638      	mov	r0, r7
 800e8d4:	3101      	adds	r1, #1
 800e8d6:	f7ff ff79 	bl	800e7cc <_Balloc>
 800e8da:	4680      	mov	r8, r0
 800e8dc:	b928      	cbnz	r0, 800e8ea <__multadd+0x5a>
 800e8de:	4602      	mov	r2, r0
 800e8e0:	4b0c      	ldr	r3, [pc, #48]	@ (800e914 <__multadd+0x84>)
 800e8e2:	480d      	ldr	r0, [pc, #52]	@ (800e918 <__multadd+0x88>)
 800e8e4:	21ba      	movs	r1, #186	@ 0xba
 800e8e6:	f001 fa59 	bl	800fd9c <__assert_func>
 800e8ea:	6922      	ldr	r2, [r4, #16]
 800e8ec:	3202      	adds	r2, #2
 800e8ee:	f104 010c 	add.w	r1, r4, #12
 800e8f2:	0092      	lsls	r2, r2, #2
 800e8f4:	300c      	adds	r0, #12
 800e8f6:	f7fe fd1d 	bl	800d334 <memcpy>
 800e8fa:	4621      	mov	r1, r4
 800e8fc:	4638      	mov	r0, r7
 800e8fe:	f7ff ffa5 	bl	800e84c <_Bfree>
 800e902:	4644      	mov	r4, r8
 800e904:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e908:	3501      	adds	r5, #1
 800e90a:	615e      	str	r6, [r3, #20]
 800e90c:	6125      	str	r5, [r4, #16]
 800e90e:	4620      	mov	r0, r4
 800e910:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e914:	08012f20 	.word	0x08012f20
 800e918:	08012f91 	.word	0x08012f91

0800e91c <__s2b>:
 800e91c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e920:	460c      	mov	r4, r1
 800e922:	4615      	mov	r5, r2
 800e924:	461f      	mov	r7, r3
 800e926:	2209      	movs	r2, #9
 800e928:	3308      	adds	r3, #8
 800e92a:	4606      	mov	r6, r0
 800e92c:	fb93 f3f2 	sdiv	r3, r3, r2
 800e930:	2100      	movs	r1, #0
 800e932:	2201      	movs	r2, #1
 800e934:	429a      	cmp	r2, r3
 800e936:	db09      	blt.n	800e94c <__s2b+0x30>
 800e938:	4630      	mov	r0, r6
 800e93a:	f7ff ff47 	bl	800e7cc <_Balloc>
 800e93e:	b940      	cbnz	r0, 800e952 <__s2b+0x36>
 800e940:	4602      	mov	r2, r0
 800e942:	4b19      	ldr	r3, [pc, #100]	@ (800e9a8 <__s2b+0x8c>)
 800e944:	4819      	ldr	r0, [pc, #100]	@ (800e9ac <__s2b+0x90>)
 800e946:	21d3      	movs	r1, #211	@ 0xd3
 800e948:	f001 fa28 	bl	800fd9c <__assert_func>
 800e94c:	0052      	lsls	r2, r2, #1
 800e94e:	3101      	adds	r1, #1
 800e950:	e7f0      	b.n	800e934 <__s2b+0x18>
 800e952:	9b08      	ldr	r3, [sp, #32]
 800e954:	6143      	str	r3, [r0, #20]
 800e956:	2d09      	cmp	r5, #9
 800e958:	f04f 0301 	mov.w	r3, #1
 800e95c:	6103      	str	r3, [r0, #16]
 800e95e:	dd16      	ble.n	800e98e <__s2b+0x72>
 800e960:	f104 0909 	add.w	r9, r4, #9
 800e964:	46c8      	mov	r8, r9
 800e966:	442c      	add	r4, r5
 800e968:	f818 3b01 	ldrb.w	r3, [r8], #1
 800e96c:	4601      	mov	r1, r0
 800e96e:	3b30      	subs	r3, #48	@ 0x30
 800e970:	220a      	movs	r2, #10
 800e972:	4630      	mov	r0, r6
 800e974:	f7ff ff8c 	bl	800e890 <__multadd>
 800e978:	45a0      	cmp	r8, r4
 800e97a:	d1f5      	bne.n	800e968 <__s2b+0x4c>
 800e97c:	f1a5 0408 	sub.w	r4, r5, #8
 800e980:	444c      	add	r4, r9
 800e982:	1b2d      	subs	r5, r5, r4
 800e984:	1963      	adds	r3, r4, r5
 800e986:	42bb      	cmp	r3, r7
 800e988:	db04      	blt.n	800e994 <__s2b+0x78>
 800e98a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e98e:	340a      	adds	r4, #10
 800e990:	2509      	movs	r5, #9
 800e992:	e7f6      	b.n	800e982 <__s2b+0x66>
 800e994:	f814 3b01 	ldrb.w	r3, [r4], #1
 800e998:	4601      	mov	r1, r0
 800e99a:	3b30      	subs	r3, #48	@ 0x30
 800e99c:	220a      	movs	r2, #10
 800e99e:	4630      	mov	r0, r6
 800e9a0:	f7ff ff76 	bl	800e890 <__multadd>
 800e9a4:	e7ee      	b.n	800e984 <__s2b+0x68>
 800e9a6:	bf00      	nop
 800e9a8:	08012f20 	.word	0x08012f20
 800e9ac:	08012f91 	.word	0x08012f91

0800e9b0 <__hi0bits>:
 800e9b0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800e9b4:	4603      	mov	r3, r0
 800e9b6:	bf36      	itet	cc
 800e9b8:	0403      	lslcc	r3, r0, #16
 800e9ba:	2000      	movcs	r0, #0
 800e9bc:	2010      	movcc	r0, #16
 800e9be:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800e9c2:	bf3c      	itt	cc
 800e9c4:	021b      	lslcc	r3, r3, #8
 800e9c6:	3008      	addcc	r0, #8
 800e9c8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800e9cc:	bf3c      	itt	cc
 800e9ce:	011b      	lslcc	r3, r3, #4
 800e9d0:	3004      	addcc	r0, #4
 800e9d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e9d6:	bf3c      	itt	cc
 800e9d8:	009b      	lslcc	r3, r3, #2
 800e9da:	3002      	addcc	r0, #2
 800e9dc:	2b00      	cmp	r3, #0
 800e9de:	db05      	blt.n	800e9ec <__hi0bits+0x3c>
 800e9e0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800e9e4:	f100 0001 	add.w	r0, r0, #1
 800e9e8:	bf08      	it	eq
 800e9ea:	2020      	moveq	r0, #32
 800e9ec:	4770      	bx	lr

0800e9ee <__lo0bits>:
 800e9ee:	6803      	ldr	r3, [r0, #0]
 800e9f0:	4602      	mov	r2, r0
 800e9f2:	f013 0007 	ands.w	r0, r3, #7
 800e9f6:	d00b      	beq.n	800ea10 <__lo0bits+0x22>
 800e9f8:	07d9      	lsls	r1, r3, #31
 800e9fa:	d421      	bmi.n	800ea40 <__lo0bits+0x52>
 800e9fc:	0798      	lsls	r0, r3, #30
 800e9fe:	bf49      	itett	mi
 800ea00:	085b      	lsrmi	r3, r3, #1
 800ea02:	089b      	lsrpl	r3, r3, #2
 800ea04:	2001      	movmi	r0, #1
 800ea06:	6013      	strmi	r3, [r2, #0]
 800ea08:	bf5c      	itt	pl
 800ea0a:	6013      	strpl	r3, [r2, #0]
 800ea0c:	2002      	movpl	r0, #2
 800ea0e:	4770      	bx	lr
 800ea10:	b299      	uxth	r1, r3
 800ea12:	b909      	cbnz	r1, 800ea18 <__lo0bits+0x2a>
 800ea14:	0c1b      	lsrs	r3, r3, #16
 800ea16:	2010      	movs	r0, #16
 800ea18:	b2d9      	uxtb	r1, r3
 800ea1a:	b909      	cbnz	r1, 800ea20 <__lo0bits+0x32>
 800ea1c:	3008      	adds	r0, #8
 800ea1e:	0a1b      	lsrs	r3, r3, #8
 800ea20:	0719      	lsls	r1, r3, #28
 800ea22:	bf04      	itt	eq
 800ea24:	091b      	lsreq	r3, r3, #4
 800ea26:	3004      	addeq	r0, #4
 800ea28:	0799      	lsls	r1, r3, #30
 800ea2a:	bf04      	itt	eq
 800ea2c:	089b      	lsreq	r3, r3, #2
 800ea2e:	3002      	addeq	r0, #2
 800ea30:	07d9      	lsls	r1, r3, #31
 800ea32:	d403      	bmi.n	800ea3c <__lo0bits+0x4e>
 800ea34:	085b      	lsrs	r3, r3, #1
 800ea36:	f100 0001 	add.w	r0, r0, #1
 800ea3a:	d003      	beq.n	800ea44 <__lo0bits+0x56>
 800ea3c:	6013      	str	r3, [r2, #0]
 800ea3e:	4770      	bx	lr
 800ea40:	2000      	movs	r0, #0
 800ea42:	4770      	bx	lr
 800ea44:	2020      	movs	r0, #32
 800ea46:	4770      	bx	lr

0800ea48 <__i2b>:
 800ea48:	b510      	push	{r4, lr}
 800ea4a:	460c      	mov	r4, r1
 800ea4c:	2101      	movs	r1, #1
 800ea4e:	f7ff febd 	bl	800e7cc <_Balloc>
 800ea52:	4602      	mov	r2, r0
 800ea54:	b928      	cbnz	r0, 800ea62 <__i2b+0x1a>
 800ea56:	4b05      	ldr	r3, [pc, #20]	@ (800ea6c <__i2b+0x24>)
 800ea58:	4805      	ldr	r0, [pc, #20]	@ (800ea70 <__i2b+0x28>)
 800ea5a:	f240 1145 	movw	r1, #325	@ 0x145
 800ea5e:	f001 f99d 	bl	800fd9c <__assert_func>
 800ea62:	2301      	movs	r3, #1
 800ea64:	6144      	str	r4, [r0, #20]
 800ea66:	6103      	str	r3, [r0, #16]
 800ea68:	bd10      	pop	{r4, pc}
 800ea6a:	bf00      	nop
 800ea6c:	08012f20 	.word	0x08012f20
 800ea70:	08012f91 	.word	0x08012f91

0800ea74 <__multiply>:
 800ea74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea78:	4614      	mov	r4, r2
 800ea7a:	690a      	ldr	r2, [r1, #16]
 800ea7c:	6923      	ldr	r3, [r4, #16]
 800ea7e:	429a      	cmp	r2, r3
 800ea80:	bfa8      	it	ge
 800ea82:	4623      	movge	r3, r4
 800ea84:	460f      	mov	r7, r1
 800ea86:	bfa4      	itt	ge
 800ea88:	460c      	movge	r4, r1
 800ea8a:	461f      	movge	r7, r3
 800ea8c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800ea90:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800ea94:	68a3      	ldr	r3, [r4, #8]
 800ea96:	6861      	ldr	r1, [r4, #4]
 800ea98:	eb0a 0609 	add.w	r6, sl, r9
 800ea9c:	42b3      	cmp	r3, r6
 800ea9e:	b085      	sub	sp, #20
 800eaa0:	bfb8      	it	lt
 800eaa2:	3101      	addlt	r1, #1
 800eaa4:	f7ff fe92 	bl	800e7cc <_Balloc>
 800eaa8:	b930      	cbnz	r0, 800eab8 <__multiply+0x44>
 800eaaa:	4602      	mov	r2, r0
 800eaac:	4b44      	ldr	r3, [pc, #272]	@ (800ebc0 <__multiply+0x14c>)
 800eaae:	4845      	ldr	r0, [pc, #276]	@ (800ebc4 <__multiply+0x150>)
 800eab0:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800eab4:	f001 f972 	bl	800fd9c <__assert_func>
 800eab8:	f100 0514 	add.w	r5, r0, #20
 800eabc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800eac0:	462b      	mov	r3, r5
 800eac2:	2200      	movs	r2, #0
 800eac4:	4543      	cmp	r3, r8
 800eac6:	d321      	bcc.n	800eb0c <__multiply+0x98>
 800eac8:	f107 0114 	add.w	r1, r7, #20
 800eacc:	f104 0214 	add.w	r2, r4, #20
 800ead0:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800ead4:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800ead8:	9302      	str	r3, [sp, #8]
 800eada:	1b13      	subs	r3, r2, r4
 800eadc:	3b15      	subs	r3, #21
 800eade:	f023 0303 	bic.w	r3, r3, #3
 800eae2:	3304      	adds	r3, #4
 800eae4:	f104 0715 	add.w	r7, r4, #21
 800eae8:	42ba      	cmp	r2, r7
 800eaea:	bf38      	it	cc
 800eaec:	2304      	movcc	r3, #4
 800eaee:	9301      	str	r3, [sp, #4]
 800eaf0:	9b02      	ldr	r3, [sp, #8]
 800eaf2:	9103      	str	r1, [sp, #12]
 800eaf4:	428b      	cmp	r3, r1
 800eaf6:	d80c      	bhi.n	800eb12 <__multiply+0x9e>
 800eaf8:	2e00      	cmp	r6, #0
 800eafa:	dd03      	ble.n	800eb04 <__multiply+0x90>
 800eafc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800eb00:	2b00      	cmp	r3, #0
 800eb02:	d05b      	beq.n	800ebbc <__multiply+0x148>
 800eb04:	6106      	str	r6, [r0, #16]
 800eb06:	b005      	add	sp, #20
 800eb08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eb0c:	f843 2b04 	str.w	r2, [r3], #4
 800eb10:	e7d8      	b.n	800eac4 <__multiply+0x50>
 800eb12:	f8b1 a000 	ldrh.w	sl, [r1]
 800eb16:	f1ba 0f00 	cmp.w	sl, #0
 800eb1a:	d024      	beq.n	800eb66 <__multiply+0xf2>
 800eb1c:	f104 0e14 	add.w	lr, r4, #20
 800eb20:	46a9      	mov	r9, r5
 800eb22:	f04f 0c00 	mov.w	ip, #0
 800eb26:	f85e 7b04 	ldr.w	r7, [lr], #4
 800eb2a:	f8d9 3000 	ldr.w	r3, [r9]
 800eb2e:	fa1f fb87 	uxth.w	fp, r7
 800eb32:	b29b      	uxth	r3, r3
 800eb34:	fb0a 330b 	mla	r3, sl, fp, r3
 800eb38:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800eb3c:	f8d9 7000 	ldr.w	r7, [r9]
 800eb40:	4463      	add	r3, ip
 800eb42:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800eb46:	fb0a c70b 	mla	r7, sl, fp, ip
 800eb4a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800eb4e:	b29b      	uxth	r3, r3
 800eb50:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800eb54:	4572      	cmp	r2, lr
 800eb56:	f849 3b04 	str.w	r3, [r9], #4
 800eb5a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800eb5e:	d8e2      	bhi.n	800eb26 <__multiply+0xb2>
 800eb60:	9b01      	ldr	r3, [sp, #4]
 800eb62:	f845 c003 	str.w	ip, [r5, r3]
 800eb66:	9b03      	ldr	r3, [sp, #12]
 800eb68:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800eb6c:	3104      	adds	r1, #4
 800eb6e:	f1b9 0f00 	cmp.w	r9, #0
 800eb72:	d021      	beq.n	800ebb8 <__multiply+0x144>
 800eb74:	682b      	ldr	r3, [r5, #0]
 800eb76:	f104 0c14 	add.w	ip, r4, #20
 800eb7a:	46ae      	mov	lr, r5
 800eb7c:	f04f 0a00 	mov.w	sl, #0
 800eb80:	f8bc b000 	ldrh.w	fp, [ip]
 800eb84:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800eb88:	fb09 770b 	mla	r7, r9, fp, r7
 800eb8c:	4457      	add	r7, sl
 800eb8e:	b29b      	uxth	r3, r3
 800eb90:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800eb94:	f84e 3b04 	str.w	r3, [lr], #4
 800eb98:	f85c 3b04 	ldr.w	r3, [ip], #4
 800eb9c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800eba0:	f8be 3000 	ldrh.w	r3, [lr]
 800eba4:	fb09 330a 	mla	r3, r9, sl, r3
 800eba8:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800ebac:	4562      	cmp	r2, ip
 800ebae:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ebb2:	d8e5      	bhi.n	800eb80 <__multiply+0x10c>
 800ebb4:	9f01      	ldr	r7, [sp, #4]
 800ebb6:	51eb      	str	r3, [r5, r7]
 800ebb8:	3504      	adds	r5, #4
 800ebba:	e799      	b.n	800eaf0 <__multiply+0x7c>
 800ebbc:	3e01      	subs	r6, #1
 800ebbe:	e79b      	b.n	800eaf8 <__multiply+0x84>
 800ebc0:	08012f20 	.word	0x08012f20
 800ebc4:	08012f91 	.word	0x08012f91

0800ebc8 <__pow5mult>:
 800ebc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ebcc:	4615      	mov	r5, r2
 800ebce:	f012 0203 	ands.w	r2, r2, #3
 800ebd2:	4607      	mov	r7, r0
 800ebd4:	460e      	mov	r6, r1
 800ebd6:	d007      	beq.n	800ebe8 <__pow5mult+0x20>
 800ebd8:	4c25      	ldr	r4, [pc, #148]	@ (800ec70 <__pow5mult+0xa8>)
 800ebda:	3a01      	subs	r2, #1
 800ebdc:	2300      	movs	r3, #0
 800ebde:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ebe2:	f7ff fe55 	bl	800e890 <__multadd>
 800ebe6:	4606      	mov	r6, r0
 800ebe8:	10ad      	asrs	r5, r5, #2
 800ebea:	d03d      	beq.n	800ec68 <__pow5mult+0xa0>
 800ebec:	69fc      	ldr	r4, [r7, #28]
 800ebee:	b97c      	cbnz	r4, 800ec10 <__pow5mult+0x48>
 800ebf0:	2010      	movs	r0, #16
 800ebf2:	f7fb fdc7 	bl	800a784 <malloc>
 800ebf6:	4602      	mov	r2, r0
 800ebf8:	61f8      	str	r0, [r7, #28]
 800ebfa:	b928      	cbnz	r0, 800ec08 <__pow5mult+0x40>
 800ebfc:	4b1d      	ldr	r3, [pc, #116]	@ (800ec74 <__pow5mult+0xac>)
 800ebfe:	481e      	ldr	r0, [pc, #120]	@ (800ec78 <__pow5mult+0xb0>)
 800ec00:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800ec04:	f001 f8ca 	bl	800fd9c <__assert_func>
 800ec08:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ec0c:	6004      	str	r4, [r0, #0]
 800ec0e:	60c4      	str	r4, [r0, #12]
 800ec10:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800ec14:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ec18:	b94c      	cbnz	r4, 800ec2e <__pow5mult+0x66>
 800ec1a:	f240 2171 	movw	r1, #625	@ 0x271
 800ec1e:	4638      	mov	r0, r7
 800ec20:	f7ff ff12 	bl	800ea48 <__i2b>
 800ec24:	2300      	movs	r3, #0
 800ec26:	f8c8 0008 	str.w	r0, [r8, #8]
 800ec2a:	4604      	mov	r4, r0
 800ec2c:	6003      	str	r3, [r0, #0]
 800ec2e:	f04f 0900 	mov.w	r9, #0
 800ec32:	07eb      	lsls	r3, r5, #31
 800ec34:	d50a      	bpl.n	800ec4c <__pow5mult+0x84>
 800ec36:	4631      	mov	r1, r6
 800ec38:	4622      	mov	r2, r4
 800ec3a:	4638      	mov	r0, r7
 800ec3c:	f7ff ff1a 	bl	800ea74 <__multiply>
 800ec40:	4631      	mov	r1, r6
 800ec42:	4680      	mov	r8, r0
 800ec44:	4638      	mov	r0, r7
 800ec46:	f7ff fe01 	bl	800e84c <_Bfree>
 800ec4a:	4646      	mov	r6, r8
 800ec4c:	106d      	asrs	r5, r5, #1
 800ec4e:	d00b      	beq.n	800ec68 <__pow5mult+0xa0>
 800ec50:	6820      	ldr	r0, [r4, #0]
 800ec52:	b938      	cbnz	r0, 800ec64 <__pow5mult+0x9c>
 800ec54:	4622      	mov	r2, r4
 800ec56:	4621      	mov	r1, r4
 800ec58:	4638      	mov	r0, r7
 800ec5a:	f7ff ff0b 	bl	800ea74 <__multiply>
 800ec5e:	6020      	str	r0, [r4, #0]
 800ec60:	f8c0 9000 	str.w	r9, [r0]
 800ec64:	4604      	mov	r4, r0
 800ec66:	e7e4      	b.n	800ec32 <__pow5mult+0x6a>
 800ec68:	4630      	mov	r0, r6
 800ec6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ec6e:	bf00      	nop
 800ec70:	08012fec 	.word	0x08012fec
 800ec74:	08012eb1 	.word	0x08012eb1
 800ec78:	08012f91 	.word	0x08012f91

0800ec7c <__lshift>:
 800ec7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ec80:	460c      	mov	r4, r1
 800ec82:	6849      	ldr	r1, [r1, #4]
 800ec84:	6923      	ldr	r3, [r4, #16]
 800ec86:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ec8a:	68a3      	ldr	r3, [r4, #8]
 800ec8c:	4607      	mov	r7, r0
 800ec8e:	4691      	mov	r9, r2
 800ec90:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ec94:	f108 0601 	add.w	r6, r8, #1
 800ec98:	42b3      	cmp	r3, r6
 800ec9a:	db0b      	blt.n	800ecb4 <__lshift+0x38>
 800ec9c:	4638      	mov	r0, r7
 800ec9e:	f7ff fd95 	bl	800e7cc <_Balloc>
 800eca2:	4605      	mov	r5, r0
 800eca4:	b948      	cbnz	r0, 800ecba <__lshift+0x3e>
 800eca6:	4602      	mov	r2, r0
 800eca8:	4b28      	ldr	r3, [pc, #160]	@ (800ed4c <__lshift+0xd0>)
 800ecaa:	4829      	ldr	r0, [pc, #164]	@ (800ed50 <__lshift+0xd4>)
 800ecac:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800ecb0:	f001 f874 	bl	800fd9c <__assert_func>
 800ecb4:	3101      	adds	r1, #1
 800ecb6:	005b      	lsls	r3, r3, #1
 800ecb8:	e7ee      	b.n	800ec98 <__lshift+0x1c>
 800ecba:	2300      	movs	r3, #0
 800ecbc:	f100 0114 	add.w	r1, r0, #20
 800ecc0:	f100 0210 	add.w	r2, r0, #16
 800ecc4:	4618      	mov	r0, r3
 800ecc6:	4553      	cmp	r3, sl
 800ecc8:	db33      	blt.n	800ed32 <__lshift+0xb6>
 800ecca:	6920      	ldr	r0, [r4, #16]
 800eccc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ecd0:	f104 0314 	add.w	r3, r4, #20
 800ecd4:	f019 091f 	ands.w	r9, r9, #31
 800ecd8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ecdc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ece0:	d02b      	beq.n	800ed3a <__lshift+0xbe>
 800ece2:	f1c9 0e20 	rsb	lr, r9, #32
 800ece6:	468a      	mov	sl, r1
 800ece8:	2200      	movs	r2, #0
 800ecea:	6818      	ldr	r0, [r3, #0]
 800ecec:	fa00 f009 	lsl.w	r0, r0, r9
 800ecf0:	4310      	orrs	r0, r2
 800ecf2:	f84a 0b04 	str.w	r0, [sl], #4
 800ecf6:	f853 2b04 	ldr.w	r2, [r3], #4
 800ecfa:	459c      	cmp	ip, r3
 800ecfc:	fa22 f20e 	lsr.w	r2, r2, lr
 800ed00:	d8f3      	bhi.n	800ecea <__lshift+0x6e>
 800ed02:	ebac 0304 	sub.w	r3, ip, r4
 800ed06:	3b15      	subs	r3, #21
 800ed08:	f023 0303 	bic.w	r3, r3, #3
 800ed0c:	3304      	adds	r3, #4
 800ed0e:	f104 0015 	add.w	r0, r4, #21
 800ed12:	4584      	cmp	ip, r0
 800ed14:	bf38      	it	cc
 800ed16:	2304      	movcc	r3, #4
 800ed18:	50ca      	str	r2, [r1, r3]
 800ed1a:	b10a      	cbz	r2, 800ed20 <__lshift+0xa4>
 800ed1c:	f108 0602 	add.w	r6, r8, #2
 800ed20:	3e01      	subs	r6, #1
 800ed22:	4638      	mov	r0, r7
 800ed24:	612e      	str	r6, [r5, #16]
 800ed26:	4621      	mov	r1, r4
 800ed28:	f7ff fd90 	bl	800e84c <_Bfree>
 800ed2c:	4628      	mov	r0, r5
 800ed2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ed32:	f842 0f04 	str.w	r0, [r2, #4]!
 800ed36:	3301      	adds	r3, #1
 800ed38:	e7c5      	b.n	800ecc6 <__lshift+0x4a>
 800ed3a:	3904      	subs	r1, #4
 800ed3c:	f853 2b04 	ldr.w	r2, [r3], #4
 800ed40:	f841 2f04 	str.w	r2, [r1, #4]!
 800ed44:	459c      	cmp	ip, r3
 800ed46:	d8f9      	bhi.n	800ed3c <__lshift+0xc0>
 800ed48:	e7ea      	b.n	800ed20 <__lshift+0xa4>
 800ed4a:	bf00      	nop
 800ed4c:	08012f20 	.word	0x08012f20
 800ed50:	08012f91 	.word	0x08012f91

0800ed54 <__mcmp>:
 800ed54:	690a      	ldr	r2, [r1, #16]
 800ed56:	4603      	mov	r3, r0
 800ed58:	6900      	ldr	r0, [r0, #16]
 800ed5a:	1a80      	subs	r0, r0, r2
 800ed5c:	b530      	push	{r4, r5, lr}
 800ed5e:	d10e      	bne.n	800ed7e <__mcmp+0x2a>
 800ed60:	3314      	adds	r3, #20
 800ed62:	3114      	adds	r1, #20
 800ed64:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800ed68:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800ed6c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800ed70:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800ed74:	4295      	cmp	r5, r2
 800ed76:	d003      	beq.n	800ed80 <__mcmp+0x2c>
 800ed78:	d205      	bcs.n	800ed86 <__mcmp+0x32>
 800ed7a:	f04f 30ff 	mov.w	r0, #4294967295
 800ed7e:	bd30      	pop	{r4, r5, pc}
 800ed80:	42a3      	cmp	r3, r4
 800ed82:	d3f3      	bcc.n	800ed6c <__mcmp+0x18>
 800ed84:	e7fb      	b.n	800ed7e <__mcmp+0x2a>
 800ed86:	2001      	movs	r0, #1
 800ed88:	e7f9      	b.n	800ed7e <__mcmp+0x2a>
	...

0800ed8c <__mdiff>:
 800ed8c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed90:	4689      	mov	r9, r1
 800ed92:	4606      	mov	r6, r0
 800ed94:	4611      	mov	r1, r2
 800ed96:	4648      	mov	r0, r9
 800ed98:	4614      	mov	r4, r2
 800ed9a:	f7ff ffdb 	bl	800ed54 <__mcmp>
 800ed9e:	1e05      	subs	r5, r0, #0
 800eda0:	d112      	bne.n	800edc8 <__mdiff+0x3c>
 800eda2:	4629      	mov	r1, r5
 800eda4:	4630      	mov	r0, r6
 800eda6:	f7ff fd11 	bl	800e7cc <_Balloc>
 800edaa:	4602      	mov	r2, r0
 800edac:	b928      	cbnz	r0, 800edba <__mdiff+0x2e>
 800edae:	4b3f      	ldr	r3, [pc, #252]	@ (800eeac <__mdiff+0x120>)
 800edb0:	f240 2137 	movw	r1, #567	@ 0x237
 800edb4:	483e      	ldr	r0, [pc, #248]	@ (800eeb0 <__mdiff+0x124>)
 800edb6:	f000 fff1 	bl	800fd9c <__assert_func>
 800edba:	2301      	movs	r3, #1
 800edbc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800edc0:	4610      	mov	r0, r2
 800edc2:	b003      	add	sp, #12
 800edc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800edc8:	bfbc      	itt	lt
 800edca:	464b      	movlt	r3, r9
 800edcc:	46a1      	movlt	r9, r4
 800edce:	4630      	mov	r0, r6
 800edd0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800edd4:	bfba      	itte	lt
 800edd6:	461c      	movlt	r4, r3
 800edd8:	2501      	movlt	r5, #1
 800edda:	2500      	movge	r5, #0
 800eddc:	f7ff fcf6 	bl	800e7cc <_Balloc>
 800ede0:	4602      	mov	r2, r0
 800ede2:	b918      	cbnz	r0, 800edec <__mdiff+0x60>
 800ede4:	4b31      	ldr	r3, [pc, #196]	@ (800eeac <__mdiff+0x120>)
 800ede6:	f240 2145 	movw	r1, #581	@ 0x245
 800edea:	e7e3      	b.n	800edb4 <__mdiff+0x28>
 800edec:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800edf0:	6926      	ldr	r6, [r4, #16]
 800edf2:	60c5      	str	r5, [r0, #12]
 800edf4:	f109 0310 	add.w	r3, r9, #16
 800edf8:	f109 0514 	add.w	r5, r9, #20
 800edfc:	f104 0e14 	add.w	lr, r4, #20
 800ee00:	f100 0b14 	add.w	fp, r0, #20
 800ee04:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800ee08:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800ee0c:	9301      	str	r3, [sp, #4]
 800ee0e:	46d9      	mov	r9, fp
 800ee10:	f04f 0c00 	mov.w	ip, #0
 800ee14:	9b01      	ldr	r3, [sp, #4]
 800ee16:	f85e 0b04 	ldr.w	r0, [lr], #4
 800ee1a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800ee1e:	9301      	str	r3, [sp, #4]
 800ee20:	fa1f f38a 	uxth.w	r3, sl
 800ee24:	4619      	mov	r1, r3
 800ee26:	b283      	uxth	r3, r0
 800ee28:	1acb      	subs	r3, r1, r3
 800ee2a:	0c00      	lsrs	r0, r0, #16
 800ee2c:	4463      	add	r3, ip
 800ee2e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800ee32:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800ee36:	b29b      	uxth	r3, r3
 800ee38:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800ee3c:	4576      	cmp	r6, lr
 800ee3e:	f849 3b04 	str.w	r3, [r9], #4
 800ee42:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ee46:	d8e5      	bhi.n	800ee14 <__mdiff+0x88>
 800ee48:	1b33      	subs	r3, r6, r4
 800ee4a:	3b15      	subs	r3, #21
 800ee4c:	f023 0303 	bic.w	r3, r3, #3
 800ee50:	3415      	adds	r4, #21
 800ee52:	3304      	adds	r3, #4
 800ee54:	42a6      	cmp	r6, r4
 800ee56:	bf38      	it	cc
 800ee58:	2304      	movcc	r3, #4
 800ee5a:	441d      	add	r5, r3
 800ee5c:	445b      	add	r3, fp
 800ee5e:	461e      	mov	r6, r3
 800ee60:	462c      	mov	r4, r5
 800ee62:	4544      	cmp	r4, r8
 800ee64:	d30e      	bcc.n	800ee84 <__mdiff+0xf8>
 800ee66:	f108 0103 	add.w	r1, r8, #3
 800ee6a:	1b49      	subs	r1, r1, r5
 800ee6c:	f021 0103 	bic.w	r1, r1, #3
 800ee70:	3d03      	subs	r5, #3
 800ee72:	45a8      	cmp	r8, r5
 800ee74:	bf38      	it	cc
 800ee76:	2100      	movcc	r1, #0
 800ee78:	440b      	add	r3, r1
 800ee7a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ee7e:	b191      	cbz	r1, 800eea6 <__mdiff+0x11a>
 800ee80:	6117      	str	r7, [r2, #16]
 800ee82:	e79d      	b.n	800edc0 <__mdiff+0x34>
 800ee84:	f854 1b04 	ldr.w	r1, [r4], #4
 800ee88:	46e6      	mov	lr, ip
 800ee8a:	0c08      	lsrs	r0, r1, #16
 800ee8c:	fa1c fc81 	uxtah	ip, ip, r1
 800ee90:	4471      	add	r1, lr
 800ee92:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800ee96:	b289      	uxth	r1, r1
 800ee98:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800ee9c:	f846 1b04 	str.w	r1, [r6], #4
 800eea0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800eea4:	e7dd      	b.n	800ee62 <__mdiff+0xd6>
 800eea6:	3f01      	subs	r7, #1
 800eea8:	e7e7      	b.n	800ee7a <__mdiff+0xee>
 800eeaa:	bf00      	nop
 800eeac:	08012f20 	.word	0x08012f20
 800eeb0:	08012f91 	.word	0x08012f91

0800eeb4 <__ulp>:
 800eeb4:	b082      	sub	sp, #8
 800eeb6:	ed8d 0b00 	vstr	d0, [sp]
 800eeba:	9a01      	ldr	r2, [sp, #4]
 800eebc:	4b0f      	ldr	r3, [pc, #60]	@ (800eefc <__ulp+0x48>)
 800eebe:	4013      	ands	r3, r2
 800eec0:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800eec4:	2b00      	cmp	r3, #0
 800eec6:	dc08      	bgt.n	800eeda <__ulp+0x26>
 800eec8:	425b      	negs	r3, r3
 800eeca:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800eece:	ea4f 5223 	mov.w	r2, r3, asr #20
 800eed2:	da04      	bge.n	800eede <__ulp+0x2a>
 800eed4:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800eed8:	4113      	asrs	r3, r2
 800eeda:	2200      	movs	r2, #0
 800eedc:	e008      	b.n	800eef0 <__ulp+0x3c>
 800eede:	f1a2 0314 	sub.w	r3, r2, #20
 800eee2:	2b1e      	cmp	r3, #30
 800eee4:	bfda      	itte	le
 800eee6:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800eeea:	40da      	lsrle	r2, r3
 800eeec:	2201      	movgt	r2, #1
 800eeee:	2300      	movs	r3, #0
 800eef0:	4619      	mov	r1, r3
 800eef2:	4610      	mov	r0, r2
 800eef4:	ec41 0b10 	vmov	d0, r0, r1
 800eef8:	b002      	add	sp, #8
 800eefa:	4770      	bx	lr
 800eefc:	7ff00000 	.word	0x7ff00000

0800ef00 <__b2d>:
 800ef00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ef04:	6906      	ldr	r6, [r0, #16]
 800ef06:	f100 0814 	add.w	r8, r0, #20
 800ef0a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800ef0e:	1f37      	subs	r7, r6, #4
 800ef10:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800ef14:	4610      	mov	r0, r2
 800ef16:	f7ff fd4b 	bl	800e9b0 <__hi0bits>
 800ef1a:	f1c0 0320 	rsb	r3, r0, #32
 800ef1e:	280a      	cmp	r0, #10
 800ef20:	600b      	str	r3, [r1, #0]
 800ef22:	491b      	ldr	r1, [pc, #108]	@ (800ef90 <__b2d+0x90>)
 800ef24:	dc15      	bgt.n	800ef52 <__b2d+0x52>
 800ef26:	f1c0 0c0b 	rsb	ip, r0, #11
 800ef2a:	fa22 f30c 	lsr.w	r3, r2, ip
 800ef2e:	45b8      	cmp	r8, r7
 800ef30:	ea43 0501 	orr.w	r5, r3, r1
 800ef34:	bf34      	ite	cc
 800ef36:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800ef3a:	2300      	movcs	r3, #0
 800ef3c:	3015      	adds	r0, #21
 800ef3e:	fa02 f000 	lsl.w	r0, r2, r0
 800ef42:	fa23 f30c 	lsr.w	r3, r3, ip
 800ef46:	4303      	orrs	r3, r0
 800ef48:	461c      	mov	r4, r3
 800ef4a:	ec45 4b10 	vmov	d0, r4, r5
 800ef4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ef52:	45b8      	cmp	r8, r7
 800ef54:	bf3a      	itte	cc
 800ef56:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800ef5a:	f1a6 0708 	subcc.w	r7, r6, #8
 800ef5e:	2300      	movcs	r3, #0
 800ef60:	380b      	subs	r0, #11
 800ef62:	d012      	beq.n	800ef8a <__b2d+0x8a>
 800ef64:	f1c0 0120 	rsb	r1, r0, #32
 800ef68:	fa23 f401 	lsr.w	r4, r3, r1
 800ef6c:	4082      	lsls	r2, r0
 800ef6e:	4322      	orrs	r2, r4
 800ef70:	4547      	cmp	r7, r8
 800ef72:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800ef76:	bf8c      	ite	hi
 800ef78:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800ef7c:	2200      	movls	r2, #0
 800ef7e:	4083      	lsls	r3, r0
 800ef80:	40ca      	lsrs	r2, r1
 800ef82:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800ef86:	4313      	orrs	r3, r2
 800ef88:	e7de      	b.n	800ef48 <__b2d+0x48>
 800ef8a:	ea42 0501 	orr.w	r5, r2, r1
 800ef8e:	e7db      	b.n	800ef48 <__b2d+0x48>
 800ef90:	3ff00000 	.word	0x3ff00000

0800ef94 <__d2b>:
 800ef94:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ef98:	460f      	mov	r7, r1
 800ef9a:	2101      	movs	r1, #1
 800ef9c:	ec59 8b10 	vmov	r8, r9, d0
 800efa0:	4616      	mov	r6, r2
 800efa2:	f7ff fc13 	bl	800e7cc <_Balloc>
 800efa6:	4604      	mov	r4, r0
 800efa8:	b930      	cbnz	r0, 800efb8 <__d2b+0x24>
 800efaa:	4602      	mov	r2, r0
 800efac:	4b23      	ldr	r3, [pc, #140]	@ (800f03c <__d2b+0xa8>)
 800efae:	4824      	ldr	r0, [pc, #144]	@ (800f040 <__d2b+0xac>)
 800efb0:	f240 310f 	movw	r1, #783	@ 0x30f
 800efb4:	f000 fef2 	bl	800fd9c <__assert_func>
 800efb8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800efbc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800efc0:	b10d      	cbz	r5, 800efc6 <__d2b+0x32>
 800efc2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800efc6:	9301      	str	r3, [sp, #4]
 800efc8:	f1b8 0300 	subs.w	r3, r8, #0
 800efcc:	d023      	beq.n	800f016 <__d2b+0x82>
 800efce:	4668      	mov	r0, sp
 800efd0:	9300      	str	r3, [sp, #0]
 800efd2:	f7ff fd0c 	bl	800e9ee <__lo0bits>
 800efd6:	e9dd 1200 	ldrd	r1, r2, [sp]
 800efda:	b1d0      	cbz	r0, 800f012 <__d2b+0x7e>
 800efdc:	f1c0 0320 	rsb	r3, r0, #32
 800efe0:	fa02 f303 	lsl.w	r3, r2, r3
 800efe4:	430b      	orrs	r3, r1
 800efe6:	40c2      	lsrs	r2, r0
 800efe8:	6163      	str	r3, [r4, #20]
 800efea:	9201      	str	r2, [sp, #4]
 800efec:	9b01      	ldr	r3, [sp, #4]
 800efee:	61a3      	str	r3, [r4, #24]
 800eff0:	2b00      	cmp	r3, #0
 800eff2:	bf0c      	ite	eq
 800eff4:	2201      	moveq	r2, #1
 800eff6:	2202      	movne	r2, #2
 800eff8:	6122      	str	r2, [r4, #16]
 800effa:	b1a5      	cbz	r5, 800f026 <__d2b+0x92>
 800effc:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800f000:	4405      	add	r5, r0
 800f002:	603d      	str	r5, [r7, #0]
 800f004:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800f008:	6030      	str	r0, [r6, #0]
 800f00a:	4620      	mov	r0, r4
 800f00c:	b003      	add	sp, #12
 800f00e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f012:	6161      	str	r1, [r4, #20]
 800f014:	e7ea      	b.n	800efec <__d2b+0x58>
 800f016:	a801      	add	r0, sp, #4
 800f018:	f7ff fce9 	bl	800e9ee <__lo0bits>
 800f01c:	9b01      	ldr	r3, [sp, #4]
 800f01e:	6163      	str	r3, [r4, #20]
 800f020:	3020      	adds	r0, #32
 800f022:	2201      	movs	r2, #1
 800f024:	e7e8      	b.n	800eff8 <__d2b+0x64>
 800f026:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800f02a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800f02e:	6038      	str	r0, [r7, #0]
 800f030:	6918      	ldr	r0, [r3, #16]
 800f032:	f7ff fcbd 	bl	800e9b0 <__hi0bits>
 800f036:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800f03a:	e7e5      	b.n	800f008 <__d2b+0x74>
 800f03c:	08012f20 	.word	0x08012f20
 800f040:	08012f91 	.word	0x08012f91

0800f044 <__ratio>:
 800f044:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f048:	b085      	sub	sp, #20
 800f04a:	e9cd 1000 	strd	r1, r0, [sp]
 800f04e:	a902      	add	r1, sp, #8
 800f050:	f7ff ff56 	bl	800ef00 <__b2d>
 800f054:	9800      	ldr	r0, [sp, #0]
 800f056:	a903      	add	r1, sp, #12
 800f058:	ec55 4b10 	vmov	r4, r5, d0
 800f05c:	f7ff ff50 	bl	800ef00 <__b2d>
 800f060:	9b01      	ldr	r3, [sp, #4]
 800f062:	6919      	ldr	r1, [r3, #16]
 800f064:	9b00      	ldr	r3, [sp, #0]
 800f066:	691b      	ldr	r3, [r3, #16]
 800f068:	1ac9      	subs	r1, r1, r3
 800f06a:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800f06e:	1a9b      	subs	r3, r3, r2
 800f070:	ec5b ab10 	vmov	sl, fp, d0
 800f074:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800f078:	2b00      	cmp	r3, #0
 800f07a:	bfce      	itee	gt
 800f07c:	462a      	movgt	r2, r5
 800f07e:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800f082:	465a      	movle	r2, fp
 800f084:	462f      	mov	r7, r5
 800f086:	46d9      	mov	r9, fp
 800f088:	bfcc      	ite	gt
 800f08a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800f08e:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800f092:	464b      	mov	r3, r9
 800f094:	4652      	mov	r2, sl
 800f096:	4620      	mov	r0, r4
 800f098:	4639      	mov	r1, r7
 800f09a:	f7f1 fbe7 	bl	800086c <__aeabi_ddiv>
 800f09e:	ec41 0b10 	vmov	d0, r0, r1
 800f0a2:	b005      	add	sp, #20
 800f0a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800f0a8 <__copybits>:
 800f0a8:	3901      	subs	r1, #1
 800f0aa:	b570      	push	{r4, r5, r6, lr}
 800f0ac:	1149      	asrs	r1, r1, #5
 800f0ae:	6914      	ldr	r4, [r2, #16]
 800f0b0:	3101      	adds	r1, #1
 800f0b2:	f102 0314 	add.w	r3, r2, #20
 800f0b6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800f0ba:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800f0be:	1f05      	subs	r5, r0, #4
 800f0c0:	42a3      	cmp	r3, r4
 800f0c2:	d30c      	bcc.n	800f0de <__copybits+0x36>
 800f0c4:	1aa3      	subs	r3, r4, r2
 800f0c6:	3b11      	subs	r3, #17
 800f0c8:	f023 0303 	bic.w	r3, r3, #3
 800f0cc:	3211      	adds	r2, #17
 800f0ce:	42a2      	cmp	r2, r4
 800f0d0:	bf88      	it	hi
 800f0d2:	2300      	movhi	r3, #0
 800f0d4:	4418      	add	r0, r3
 800f0d6:	2300      	movs	r3, #0
 800f0d8:	4288      	cmp	r0, r1
 800f0da:	d305      	bcc.n	800f0e8 <__copybits+0x40>
 800f0dc:	bd70      	pop	{r4, r5, r6, pc}
 800f0de:	f853 6b04 	ldr.w	r6, [r3], #4
 800f0e2:	f845 6f04 	str.w	r6, [r5, #4]!
 800f0e6:	e7eb      	b.n	800f0c0 <__copybits+0x18>
 800f0e8:	f840 3b04 	str.w	r3, [r0], #4
 800f0ec:	e7f4      	b.n	800f0d8 <__copybits+0x30>

0800f0ee <__any_on>:
 800f0ee:	f100 0214 	add.w	r2, r0, #20
 800f0f2:	6900      	ldr	r0, [r0, #16]
 800f0f4:	114b      	asrs	r3, r1, #5
 800f0f6:	4298      	cmp	r0, r3
 800f0f8:	b510      	push	{r4, lr}
 800f0fa:	db11      	blt.n	800f120 <__any_on+0x32>
 800f0fc:	dd0a      	ble.n	800f114 <__any_on+0x26>
 800f0fe:	f011 011f 	ands.w	r1, r1, #31
 800f102:	d007      	beq.n	800f114 <__any_on+0x26>
 800f104:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800f108:	fa24 f001 	lsr.w	r0, r4, r1
 800f10c:	fa00 f101 	lsl.w	r1, r0, r1
 800f110:	428c      	cmp	r4, r1
 800f112:	d10b      	bne.n	800f12c <__any_on+0x3e>
 800f114:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800f118:	4293      	cmp	r3, r2
 800f11a:	d803      	bhi.n	800f124 <__any_on+0x36>
 800f11c:	2000      	movs	r0, #0
 800f11e:	bd10      	pop	{r4, pc}
 800f120:	4603      	mov	r3, r0
 800f122:	e7f7      	b.n	800f114 <__any_on+0x26>
 800f124:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800f128:	2900      	cmp	r1, #0
 800f12a:	d0f5      	beq.n	800f118 <__any_on+0x2a>
 800f12c:	2001      	movs	r0, #1
 800f12e:	e7f6      	b.n	800f11e <__any_on+0x30>

0800f130 <_strtoul_l.constprop.0>:
 800f130:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f134:	4e34      	ldr	r6, [pc, #208]	@ (800f208 <_strtoul_l.constprop.0+0xd8>)
 800f136:	4686      	mov	lr, r0
 800f138:	460d      	mov	r5, r1
 800f13a:	4628      	mov	r0, r5
 800f13c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f140:	5d37      	ldrb	r7, [r6, r4]
 800f142:	f017 0708 	ands.w	r7, r7, #8
 800f146:	d1f8      	bne.n	800f13a <_strtoul_l.constprop.0+0xa>
 800f148:	2c2d      	cmp	r4, #45	@ 0x2d
 800f14a:	d12f      	bne.n	800f1ac <_strtoul_l.constprop.0+0x7c>
 800f14c:	782c      	ldrb	r4, [r5, #0]
 800f14e:	2701      	movs	r7, #1
 800f150:	1c85      	adds	r5, r0, #2
 800f152:	f033 0010 	bics.w	r0, r3, #16
 800f156:	d109      	bne.n	800f16c <_strtoul_l.constprop.0+0x3c>
 800f158:	2c30      	cmp	r4, #48	@ 0x30
 800f15a:	d12c      	bne.n	800f1b6 <_strtoul_l.constprop.0+0x86>
 800f15c:	7828      	ldrb	r0, [r5, #0]
 800f15e:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 800f162:	2858      	cmp	r0, #88	@ 0x58
 800f164:	d127      	bne.n	800f1b6 <_strtoul_l.constprop.0+0x86>
 800f166:	786c      	ldrb	r4, [r5, #1]
 800f168:	2310      	movs	r3, #16
 800f16a:	3502      	adds	r5, #2
 800f16c:	f04f 38ff 	mov.w	r8, #4294967295
 800f170:	2600      	movs	r6, #0
 800f172:	fbb8 f8f3 	udiv	r8, r8, r3
 800f176:	fb03 f908 	mul.w	r9, r3, r8
 800f17a:	ea6f 0909 	mvn.w	r9, r9
 800f17e:	4630      	mov	r0, r6
 800f180:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 800f184:	f1bc 0f09 	cmp.w	ip, #9
 800f188:	d81c      	bhi.n	800f1c4 <_strtoul_l.constprop.0+0x94>
 800f18a:	4664      	mov	r4, ip
 800f18c:	42a3      	cmp	r3, r4
 800f18e:	dd2a      	ble.n	800f1e6 <_strtoul_l.constprop.0+0xb6>
 800f190:	f1b6 3fff 	cmp.w	r6, #4294967295
 800f194:	d007      	beq.n	800f1a6 <_strtoul_l.constprop.0+0x76>
 800f196:	4580      	cmp	r8, r0
 800f198:	d322      	bcc.n	800f1e0 <_strtoul_l.constprop.0+0xb0>
 800f19a:	d101      	bne.n	800f1a0 <_strtoul_l.constprop.0+0x70>
 800f19c:	45a1      	cmp	r9, r4
 800f19e:	db1f      	blt.n	800f1e0 <_strtoul_l.constprop.0+0xb0>
 800f1a0:	fb00 4003 	mla	r0, r0, r3, r4
 800f1a4:	2601      	movs	r6, #1
 800f1a6:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f1aa:	e7e9      	b.n	800f180 <_strtoul_l.constprop.0+0x50>
 800f1ac:	2c2b      	cmp	r4, #43	@ 0x2b
 800f1ae:	bf04      	itt	eq
 800f1b0:	782c      	ldrbeq	r4, [r5, #0]
 800f1b2:	1c85      	addeq	r5, r0, #2
 800f1b4:	e7cd      	b.n	800f152 <_strtoul_l.constprop.0+0x22>
 800f1b6:	2b00      	cmp	r3, #0
 800f1b8:	d1d8      	bne.n	800f16c <_strtoul_l.constprop.0+0x3c>
 800f1ba:	2c30      	cmp	r4, #48	@ 0x30
 800f1bc:	bf0c      	ite	eq
 800f1be:	2308      	moveq	r3, #8
 800f1c0:	230a      	movne	r3, #10
 800f1c2:	e7d3      	b.n	800f16c <_strtoul_l.constprop.0+0x3c>
 800f1c4:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 800f1c8:	f1bc 0f19 	cmp.w	ip, #25
 800f1cc:	d801      	bhi.n	800f1d2 <_strtoul_l.constprop.0+0xa2>
 800f1ce:	3c37      	subs	r4, #55	@ 0x37
 800f1d0:	e7dc      	b.n	800f18c <_strtoul_l.constprop.0+0x5c>
 800f1d2:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 800f1d6:	f1bc 0f19 	cmp.w	ip, #25
 800f1da:	d804      	bhi.n	800f1e6 <_strtoul_l.constprop.0+0xb6>
 800f1dc:	3c57      	subs	r4, #87	@ 0x57
 800f1de:	e7d5      	b.n	800f18c <_strtoul_l.constprop.0+0x5c>
 800f1e0:	f04f 36ff 	mov.w	r6, #4294967295
 800f1e4:	e7df      	b.n	800f1a6 <_strtoul_l.constprop.0+0x76>
 800f1e6:	1c73      	adds	r3, r6, #1
 800f1e8:	d106      	bne.n	800f1f8 <_strtoul_l.constprop.0+0xc8>
 800f1ea:	2322      	movs	r3, #34	@ 0x22
 800f1ec:	f8ce 3000 	str.w	r3, [lr]
 800f1f0:	4630      	mov	r0, r6
 800f1f2:	b932      	cbnz	r2, 800f202 <_strtoul_l.constprop.0+0xd2>
 800f1f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f1f8:	b107      	cbz	r7, 800f1fc <_strtoul_l.constprop.0+0xcc>
 800f1fa:	4240      	negs	r0, r0
 800f1fc:	2a00      	cmp	r2, #0
 800f1fe:	d0f9      	beq.n	800f1f4 <_strtoul_l.constprop.0+0xc4>
 800f200:	b106      	cbz	r6, 800f204 <_strtoul_l.constprop.0+0xd4>
 800f202:	1e69      	subs	r1, r5, #1
 800f204:	6011      	str	r1, [r2, #0]
 800f206:	e7f5      	b.n	800f1f4 <_strtoul_l.constprop.0+0xc4>
 800f208:	08012cb9 	.word	0x08012cb9

0800f20c <_strtoul_r>:
 800f20c:	f7ff bf90 	b.w	800f130 <_strtoul_l.constprop.0>

0800f210 <strtoul>:
 800f210:	4613      	mov	r3, r2
 800f212:	460a      	mov	r2, r1
 800f214:	4601      	mov	r1, r0
 800f216:	4802      	ldr	r0, [pc, #8]	@ (800f220 <strtoul+0x10>)
 800f218:	6800      	ldr	r0, [r0, #0]
 800f21a:	f7ff bf89 	b.w	800f130 <_strtoul_l.constprop.0>
 800f21e:	bf00      	nop
 800f220:	200001bc 	.word	0x200001bc

0800f224 <__ascii_wctomb>:
 800f224:	4603      	mov	r3, r0
 800f226:	4608      	mov	r0, r1
 800f228:	b141      	cbz	r1, 800f23c <__ascii_wctomb+0x18>
 800f22a:	2aff      	cmp	r2, #255	@ 0xff
 800f22c:	d904      	bls.n	800f238 <__ascii_wctomb+0x14>
 800f22e:	228a      	movs	r2, #138	@ 0x8a
 800f230:	601a      	str	r2, [r3, #0]
 800f232:	f04f 30ff 	mov.w	r0, #4294967295
 800f236:	4770      	bx	lr
 800f238:	700a      	strb	r2, [r1, #0]
 800f23a:	2001      	movs	r0, #1
 800f23c:	4770      	bx	lr

0800f23e <__ssputs_r>:
 800f23e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f242:	688e      	ldr	r6, [r1, #8]
 800f244:	461f      	mov	r7, r3
 800f246:	42be      	cmp	r6, r7
 800f248:	680b      	ldr	r3, [r1, #0]
 800f24a:	4682      	mov	sl, r0
 800f24c:	460c      	mov	r4, r1
 800f24e:	4690      	mov	r8, r2
 800f250:	d82d      	bhi.n	800f2ae <__ssputs_r+0x70>
 800f252:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800f256:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800f25a:	d026      	beq.n	800f2aa <__ssputs_r+0x6c>
 800f25c:	6965      	ldr	r5, [r4, #20]
 800f25e:	6909      	ldr	r1, [r1, #16]
 800f260:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f264:	eba3 0901 	sub.w	r9, r3, r1
 800f268:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f26c:	1c7b      	adds	r3, r7, #1
 800f26e:	444b      	add	r3, r9
 800f270:	106d      	asrs	r5, r5, #1
 800f272:	429d      	cmp	r5, r3
 800f274:	bf38      	it	cc
 800f276:	461d      	movcc	r5, r3
 800f278:	0553      	lsls	r3, r2, #21
 800f27a:	d527      	bpl.n	800f2cc <__ssputs_r+0x8e>
 800f27c:	4629      	mov	r1, r5
 800f27e:	f7fb fab3 	bl	800a7e8 <_malloc_r>
 800f282:	4606      	mov	r6, r0
 800f284:	b360      	cbz	r0, 800f2e0 <__ssputs_r+0xa2>
 800f286:	6921      	ldr	r1, [r4, #16]
 800f288:	464a      	mov	r2, r9
 800f28a:	f7fe f853 	bl	800d334 <memcpy>
 800f28e:	89a3      	ldrh	r3, [r4, #12]
 800f290:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800f294:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f298:	81a3      	strh	r3, [r4, #12]
 800f29a:	6126      	str	r6, [r4, #16]
 800f29c:	6165      	str	r5, [r4, #20]
 800f29e:	444e      	add	r6, r9
 800f2a0:	eba5 0509 	sub.w	r5, r5, r9
 800f2a4:	6026      	str	r6, [r4, #0]
 800f2a6:	60a5      	str	r5, [r4, #8]
 800f2a8:	463e      	mov	r6, r7
 800f2aa:	42be      	cmp	r6, r7
 800f2ac:	d900      	bls.n	800f2b0 <__ssputs_r+0x72>
 800f2ae:	463e      	mov	r6, r7
 800f2b0:	6820      	ldr	r0, [r4, #0]
 800f2b2:	4632      	mov	r2, r6
 800f2b4:	4641      	mov	r1, r8
 800f2b6:	f000 fd52 	bl	800fd5e <memmove>
 800f2ba:	68a3      	ldr	r3, [r4, #8]
 800f2bc:	1b9b      	subs	r3, r3, r6
 800f2be:	60a3      	str	r3, [r4, #8]
 800f2c0:	6823      	ldr	r3, [r4, #0]
 800f2c2:	4433      	add	r3, r6
 800f2c4:	6023      	str	r3, [r4, #0]
 800f2c6:	2000      	movs	r0, #0
 800f2c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f2cc:	462a      	mov	r2, r5
 800f2ce:	f000 fda3 	bl	800fe18 <_realloc_r>
 800f2d2:	4606      	mov	r6, r0
 800f2d4:	2800      	cmp	r0, #0
 800f2d6:	d1e0      	bne.n	800f29a <__ssputs_r+0x5c>
 800f2d8:	6921      	ldr	r1, [r4, #16]
 800f2da:	4650      	mov	r0, sl
 800f2dc:	f7fe fe9c 	bl	800e018 <_free_r>
 800f2e0:	230c      	movs	r3, #12
 800f2e2:	f8ca 3000 	str.w	r3, [sl]
 800f2e6:	89a3      	ldrh	r3, [r4, #12]
 800f2e8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f2ec:	81a3      	strh	r3, [r4, #12]
 800f2ee:	f04f 30ff 	mov.w	r0, #4294967295
 800f2f2:	e7e9      	b.n	800f2c8 <__ssputs_r+0x8a>

0800f2f4 <_svfiprintf_r>:
 800f2f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f2f8:	4698      	mov	r8, r3
 800f2fa:	898b      	ldrh	r3, [r1, #12]
 800f2fc:	061b      	lsls	r3, r3, #24
 800f2fe:	b09d      	sub	sp, #116	@ 0x74
 800f300:	4607      	mov	r7, r0
 800f302:	460d      	mov	r5, r1
 800f304:	4614      	mov	r4, r2
 800f306:	d510      	bpl.n	800f32a <_svfiprintf_r+0x36>
 800f308:	690b      	ldr	r3, [r1, #16]
 800f30a:	b973      	cbnz	r3, 800f32a <_svfiprintf_r+0x36>
 800f30c:	2140      	movs	r1, #64	@ 0x40
 800f30e:	f7fb fa6b 	bl	800a7e8 <_malloc_r>
 800f312:	6028      	str	r0, [r5, #0]
 800f314:	6128      	str	r0, [r5, #16]
 800f316:	b930      	cbnz	r0, 800f326 <_svfiprintf_r+0x32>
 800f318:	230c      	movs	r3, #12
 800f31a:	603b      	str	r3, [r7, #0]
 800f31c:	f04f 30ff 	mov.w	r0, #4294967295
 800f320:	b01d      	add	sp, #116	@ 0x74
 800f322:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f326:	2340      	movs	r3, #64	@ 0x40
 800f328:	616b      	str	r3, [r5, #20]
 800f32a:	2300      	movs	r3, #0
 800f32c:	9309      	str	r3, [sp, #36]	@ 0x24
 800f32e:	2320      	movs	r3, #32
 800f330:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f334:	f8cd 800c 	str.w	r8, [sp, #12]
 800f338:	2330      	movs	r3, #48	@ 0x30
 800f33a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800f4d8 <_svfiprintf_r+0x1e4>
 800f33e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f342:	f04f 0901 	mov.w	r9, #1
 800f346:	4623      	mov	r3, r4
 800f348:	469a      	mov	sl, r3
 800f34a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f34e:	b10a      	cbz	r2, 800f354 <_svfiprintf_r+0x60>
 800f350:	2a25      	cmp	r2, #37	@ 0x25
 800f352:	d1f9      	bne.n	800f348 <_svfiprintf_r+0x54>
 800f354:	ebba 0b04 	subs.w	fp, sl, r4
 800f358:	d00b      	beq.n	800f372 <_svfiprintf_r+0x7e>
 800f35a:	465b      	mov	r3, fp
 800f35c:	4622      	mov	r2, r4
 800f35e:	4629      	mov	r1, r5
 800f360:	4638      	mov	r0, r7
 800f362:	f7ff ff6c 	bl	800f23e <__ssputs_r>
 800f366:	3001      	adds	r0, #1
 800f368:	f000 80a7 	beq.w	800f4ba <_svfiprintf_r+0x1c6>
 800f36c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f36e:	445a      	add	r2, fp
 800f370:	9209      	str	r2, [sp, #36]	@ 0x24
 800f372:	f89a 3000 	ldrb.w	r3, [sl]
 800f376:	2b00      	cmp	r3, #0
 800f378:	f000 809f 	beq.w	800f4ba <_svfiprintf_r+0x1c6>
 800f37c:	2300      	movs	r3, #0
 800f37e:	f04f 32ff 	mov.w	r2, #4294967295
 800f382:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f386:	f10a 0a01 	add.w	sl, sl, #1
 800f38a:	9304      	str	r3, [sp, #16]
 800f38c:	9307      	str	r3, [sp, #28]
 800f38e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800f392:	931a      	str	r3, [sp, #104]	@ 0x68
 800f394:	4654      	mov	r4, sl
 800f396:	2205      	movs	r2, #5
 800f398:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f39c:	484e      	ldr	r0, [pc, #312]	@ (800f4d8 <_svfiprintf_r+0x1e4>)
 800f39e:	f7f0 ff27 	bl	80001f0 <memchr>
 800f3a2:	9a04      	ldr	r2, [sp, #16]
 800f3a4:	b9d8      	cbnz	r0, 800f3de <_svfiprintf_r+0xea>
 800f3a6:	06d0      	lsls	r0, r2, #27
 800f3a8:	bf44      	itt	mi
 800f3aa:	2320      	movmi	r3, #32
 800f3ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f3b0:	0711      	lsls	r1, r2, #28
 800f3b2:	bf44      	itt	mi
 800f3b4:	232b      	movmi	r3, #43	@ 0x2b
 800f3b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f3ba:	f89a 3000 	ldrb.w	r3, [sl]
 800f3be:	2b2a      	cmp	r3, #42	@ 0x2a
 800f3c0:	d015      	beq.n	800f3ee <_svfiprintf_r+0xfa>
 800f3c2:	9a07      	ldr	r2, [sp, #28]
 800f3c4:	4654      	mov	r4, sl
 800f3c6:	2000      	movs	r0, #0
 800f3c8:	f04f 0c0a 	mov.w	ip, #10
 800f3cc:	4621      	mov	r1, r4
 800f3ce:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f3d2:	3b30      	subs	r3, #48	@ 0x30
 800f3d4:	2b09      	cmp	r3, #9
 800f3d6:	d94b      	bls.n	800f470 <_svfiprintf_r+0x17c>
 800f3d8:	b1b0      	cbz	r0, 800f408 <_svfiprintf_r+0x114>
 800f3da:	9207      	str	r2, [sp, #28]
 800f3dc:	e014      	b.n	800f408 <_svfiprintf_r+0x114>
 800f3de:	eba0 0308 	sub.w	r3, r0, r8
 800f3e2:	fa09 f303 	lsl.w	r3, r9, r3
 800f3e6:	4313      	orrs	r3, r2
 800f3e8:	9304      	str	r3, [sp, #16]
 800f3ea:	46a2      	mov	sl, r4
 800f3ec:	e7d2      	b.n	800f394 <_svfiprintf_r+0xa0>
 800f3ee:	9b03      	ldr	r3, [sp, #12]
 800f3f0:	1d19      	adds	r1, r3, #4
 800f3f2:	681b      	ldr	r3, [r3, #0]
 800f3f4:	9103      	str	r1, [sp, #12]
 800f3f6:	2b00      	cmp	r3, #0
 800f3f8:	bfbb      	ittet	lt
 800f3fa:	425b      	neglt	r3, r3
 800f3fc:	f042 0202 	orrlt.w	r2, r2, #2
 800f400:	9307      	strge	r3, [sp, #28]
 800f402:	9307      	strlt	r3, [sp, #28]
 800f404:	bfb8      	it	lt
 800f406:	9204      	strlt	r2, [sp, #16]
 800f408:	7823      	ldrb	r3, [r4, #0]
 800f40a:	2b2e      	cmp	r3, #46	@ 0x2e
 800f40c:	d10a      	bne.n	800f424 <_svfiprintf_r+0x130>
 800f40e:	7863      	ldrb	r3, [r4, #1]
 800f410:	2b2a      	cmp	r3, #42	@ 0x2a
 800f412:	d132      	bne.n	800f47a <_svfiprintf_r+0x186>
 800f414:	9b03      	ldr	r3, [sp, #12]
 800f416:	1d1a      	adds	r2, r3, #4
 800f418:	681b      	ldr	r3, [r3, #0]
 800f41a:	9203      	str	r2, [sp, #12]
 800f41c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f420:	3402      	adds	r4, #2
 800f422:	9305      	str	r3, [sp, #20]
 800f424:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800f4e8 <_svfiprintf_r+0x1f4>
 800f428:	7821      	ldrb	r1, [r4, #0]
 800f42a:	2203      	movs	r2, #3
 800f42c:	4650      	mov	r0, sl
 800f42e:	f7f0 fedf 	bl	80001f0 <memchr>
 800f432:	b138      	cbz	r0, 800f444 <_svfiprintf_r+0x150>
 800f434:	9b04      	ldr	r3, [sp, #16]
 800f436:	eba0 000a 	sub.w	r0, r0, sl
 800f43a:	2240      	movs	r2, #64	@ 0x40
 800f43c:	4082      	lsls	r2, r0
 800f43e:	4313      	orrs	r3, r2
 800f440:	3401      	adds	r4, #1
 800f442:	9304      	str	r3, [sp, #16]
 800f444:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f448:	4824      	ldr	r0, [pc, #144]	@ (800f4dc <_svfiprintf_r+0x1e8>)
 800f44a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800f44e:	2206      	movs	r2, #6
 800f450:	f7f0 fece 	bl	80001f0 <memchr>
 800f454:	2800      	cmp	r0, #0
 800f456:	d036      	beq.n	800f4c6 <_svfiprintf_r+0x1d2>
 800f458:	4b21      	ldr	r3, [pc, #132]	@ (800f4e0 <_svfiprintf_r+0x1ec>)
 800f45a:	bb1b      	cbnz	r3, 800f4a4 <_svfiprintf_r+0x1b0>
 800f45c:	9b03      	ldr	r3, [sp, #12]
 800f45e:	3307      	adds	r3, #7
 800f460:	f023 0307 	bic.w	r3, r3, #7
 800f464:	3308      	adds	r3, #8
 800f466:	9303      	str	r3, [sp, #12]
 800f468:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f46a:	4433      	add	r3, r6
 800f46c:	9309      	str	r3, [sp, #36]	@ 0x24
 800f46e:	e76a      	b.n	800f346 <_svfiprintf_r+0x52>
 800f470:	fb0c 3202 	mla	r2, ip, r2, r3
 800f474:	460c      	mov	r4, r1
 800f476:	2001      	movs	r0, #1
 800f478:	e7a8      	b.n	800f3cc <_svfiprintf_r+0xd8>
 800f47a:	2300      	movs	r3, #0
 800f47c:	3401      	adds	r4, #1
 800f47e:	9305      	str	r3, [sp, #20]
 800f480:	4619      	mov	r1, r3
 800f482:	f04f 0c0a 	mov.w	ip, #10
 800f486:	4620      	mov	r0, r4
 800f488:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f48c:	3a30      	subs	r2, #48	@ 0x30
 800f48e:	2a09      	cmp	r2, #9
 800f490:	d903      	bls.n	800f49a <_svfiprintf_r+0x1a6>
 800f492:	2b00      	cmp	r3, #0
 800f494:	d0c6      	beq.n	800f424 <_svfiprintf_r+0x130>
 800f496:	9105      	str	r1, [sp, #20]
 800f498:	e7c4      	b.n	800f424 <_svfiprintf_r+0x130>
 800f49a:	fb0c 2101 	mla	r1, ip, r1, r2
 800f49e:	4604      	mov	r4, r0
 800f4a0:	2301      	movs	r3, #1
 800f4a2:	e7f0      	b.n	800f486 <_svfiprintf_r+0x192>
 800f4a4:	ab03      	add	r3, sp, #12
 800f4a6:	9300      	str	r3, [sp, #0]
 800f4a8:	462a      	mov	r2, r5
 800f4aa:	4b0e      	ldr	r3, [pc, #56]	@ (800f4e4 <_svfiprintf_r+0x1f0>)
 800f4ac:	a904      	add	r1, sp, #16
 800f4ae:	4638      	mov	r0, r7
 800f4b0:	f7fc f962 	bl	800b778 <_printf_float>
 800f4b4:	1c42      	adds	r2, r0, #1
 800f4b6:	4606      	mov	r6, r0
 800f4b8:	d1d6      	bne.n	800f468 <_svfiprintf_r+0x174>
 800f4ba:	89ab      	ldrh	r3, [r5, #12]
 800f4bc:	065b      	lsls	r3, r3, #25
 800f4be:	f53f af2d 	bmi.w	800f31c <_svfiprintf_r+0x28>
 800f4c2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f4c4:	e72c      	b.n	800f320 <_svfiprintf_r+0x2c>
 800f4c6:	ab03      	add	r3, sp, #12
 800f4c8:	9300      	str	r3, [sp, #0]
 800f4ca:	462a      	mov	r2, r5
 800f4cc:	4b05      	ldr	r3, [pc, #20]	@ (800f4e4 <_svfiprintf_r+0x1f0>)
 800f4ce:	a904      	add	r1, sp, #16
 800f4d0:	4638      	mov	r0, r7
 800f4d2:	f7fc fbe9 	bl	800bca8 <_printf_i>
 800f4d6:	e7ed      	b.n	800f4b4 <_svfiprintf_r+0x1c0>
 800f4d8:	080130e8 	.word	0x080130e8
 800f4dc:	080130f2 	.word	0x080130f2
 800f4e0:	0800b779 	.word	0x0800b779
 800f4e4:	0800f23f 	.word	0x0800f23f
 800f4e8:	080130ee 	.word	0x080130ee

0800f4ec <_sungetc_r>:
 800f4ec:	b538      	push	{r3, r4, r5, lr}
 800f4ee:	1c4b      	adds	r3, r1, #1
 800f4f0:	4614      	mov	r4, r2
 800f4f2:	d103      	bne.n	800f4fc <_sungetc_r+0x10>
 800f4f4:	f04f 35ff 	mov.w	r5, #4294967295
 800f4f8:	4628      	mov	r0, r5
 800f4fa:	bd38      	pop	{r3, r4, r5, pc}
 800f4fc:	8993      	ldrh	r3, [r2, #12]
 800f4fe:	f023 0320 	bic.w	r3, r3, #32
 800f502:	8193      	strh	r3, [r2, #12]
 800f504:	6853      	ldr	r3, [r2, #4]
 800f506:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800f508:	b2cd      	uxtb	r5, r1
 800f50a:	b18a      	cbz	r2, 800f530 <_sungetc_r+0x44>
 800f50c:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800f50e:	429a      	cmp	r2, r3
 800f510:	dd08      	ble.n	800f524 <_sungetc_r+0x38>
 800f512:	6823      	ldr	r3, [r4, #0]
 800f514:	1e5a      	subs	r2, r3, #1
 800f516:	6022      	str	r2, [r4, #0]
 800f518:	f803 5c01 	strb.w	r5, [r3, #-1]
 800f51c:	6863      	ldr	r3, [r4, #4]
 800f51e:	3301      	adds	r3, #1
 800f520:	6063      	str	r3, [r4, #4]
 800f522:	e7e9      	b.n	800f4f8 <_sungetc_r+0xc>
 800f524:	4621      	mov	r1, r4
 800f526:	f000 fbe0 	bl	800fcea <__submore>
 800f52a:	2800      	cmp	r0, #0
 800f52c:	d0f1      	beq.n	800f512 <_sungetc_r+0x26>
 800f52e:	e7e1      	b.n	800f4f4 <_sungetc_r+0x8>
 800f530:	6921      	ldr	r1, [r4, #16]
 800f532:	6822      	ldr	r2, [r4, #0]
 800f534:	b141      	cbz	r1, 800f548 <_sungetc_r+0x5c>
 800f536:	4291      	cmp	r1, r2
 800f538:	d206      	bcs.n	800f548 <_sungetc_r+0x5c>
 800f53a:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 800f53e:	42a9      	cmp	r1, r5
 800f540:	d102      	bne.n	800f548 <_sungetc_r+0x5c>
 800f542:	3a01      	subs	r2, #1
 800f544:	6022      	str	r2, [r4, #0]
 800f546:	e7ea      	b.n	800f51e <_sungetc_r+0x32>
 800f548:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 800f54c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f550:	6363      	str	r3, [r4, #52]	@ 0x34
 800f552:	2303      	movs	r3, #3
 800f554:	63a3      	str	r3, [r4, #56]	@ 0x38
 800f556:	4623      	mov	r3, r4
 800f558:	f803 5f46 	strb.w	r5, [r3, #70]!
 800f55c:	6023      	str	r3, [r4, #0]
 800f55e:	2301      	movs	r3, #1
 800f560:	e7de      	b.n	800f520 <_sungetc_r+0x34>

0800f562 <__ssrefill_r>:
 800f562:	b510      	push	{r4, lr}
 800f564:	460c      	mov	r4, r1
 800f566:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800f568:	b169      	cbz	r1, 800f586 <__ssrefill_r+0x24>
 800f56a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f56e:	4299      	cmp	r1, r3
 800f570:	d001      	beq.n	800f576 <__ssrefill_r+0x14>
 800f572:	f7fe fd51 	bl	800e018 <_free_r>
 800f576:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800f578:	6063      	str	r3, [r4, #4]
 800f57a:	2000      	movs	r0, #0
 800f57c:	6360      	str	r0, [r4, #52]	@ 0x34
 800f57e:	b113      	cbz	r3, 800f586 <__ssrefill_r+0x24>
 800f580:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800f582:	6023      	str	r3, [r4, #0]
 800f584:	bd10      	pop	{r4, pc}
 800f586:	6923      	ldr	r3, [r4, #16]
 800f588:	6023      	str	r3, [r4, #0]
 800f58a:	2300      	movs	r3, #0
 800f58c:	6063      	str	r3, [r4, #4]
 800f58e:	89a3      	ldrh	r3, [r4, #12]
 800f590:	f043 0320 	orr.w	r3, r3, #32
 800f594:	81a3      	strh	r3, [r4, #12]
 800f596:	f04f 30ff 	mov.w	r0, #4294967295
 800f59a:	e7f3      	b.n	800f584 <__ssrefill_r+0x22>

0800f59c <__ssvfiscanf_r>:
 800f59c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f5a0:	460c      	mov	r4, r1
 800f5a2:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 800f5a6:	2100      	movs	r1, #0
 800f5a8:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 800f5ac:	49a5      	ldr	r1, [pc, #660]	@ (800f844 <__ssvfiscanf_r+0x2a8>)
 800f5ae:	91a0      	str	r1, [sp, #640]	@ 0x280
 800f5b0:	f10d 0804 	add.w	r8, sp, #4
 800f5b4:	49a4      	ldr	r1, [pc, #656]	@ (800f848 <__ssvfiscanf_r+0x2ac>)
 800f5b6:	4fa5      	ldr	r7, [pc, #660]	@ (800f84c <__ssvfiscanf_r+0x2b0>)
 800f5b8:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 800f5bc:	4606      	mov	r6, r0
 800f5be:	91a1      	str	r1, [sp, #644]	@ 0x284
 800f5c0:	9300      	str	r3, [sp, #0]
 800f5c2:	7813      	ldrb	r3, [r2, #0]
 800f5c4:	2b00      	cmp	r3, #0
 800f5c6:	f000 8158 	beq.w	800f87a <__ssvfiscanf_r+0x2de>
 800f5ca:	5cf9      	ldrb	r1, [r7, r3]
 800f5cc:	f011 0108 	ands.w	r1, r1, #8
 800f5d0:	f102 0501 	add.w	r5, r2, #1
 800f5d4:	d019      	beq.n	800f60a <__ssvfiscanf_r+0x6e>
 800f5d6:	6863      	ldr	r3, [r4, #4]
 800f5d8:	2b00      	cmp	r3, #0
 800f5da:	dd0f      	ble.n	800f5fc <__ssvfiscanf_r+0x60>
 800f5dc:	6823      	ldr	r3, [r4, #0]
 800f5de:	781a      	ldrb	r2, [r3, #0]
 800f5e0:	5cba      	ldrb	r2, [r7, r2]
 800f5e2:	0712      	lsls	r2, r2, #28
 800f5e4:	d401      	bmi.n	800f5ea <__ssvfiscanf_r+0x4e>
 800f5e6:	462a      	mov	r2, r5
 800f5e8:	e7eb      	b.n	800f5c2 <__ssvfiscanf_r+0x26>
 800f5ea:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800f5ec:	3201      	adds	r2, #1
 800f5ee:	9245      	str	r2, [sp, #276]	@ 0x114
 800f5f0:	6862      	ldr	r2, [r4, #4]
 800f5f2:	3301      	adds	r3, #1
 800f5f4:	3a01      	subs	r2, #1
 800f5f6:	6062      	str	r2, [r4, #4]
 800f5f8:	6023      	str	r3, [r4, #0]
 800f5fa:	e7ec      	b.n	800f5d6 <__ssvfiscanf_r+0x3a>
 800f5fc:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800f5fe:	4621      	mov	r1, r4
 800f600:	4630      	mov	r0, r6
 800f602:	4798      	blx	r3
 800f604:	2800      	cmp	r0, #0
 800f606:	d0e9      	beq.n	800f5dc <__ssvfiscanf_r+0x40>
 800f608:	e7ed      	b.n	800f5e6 <__ssvfiscanf_r+0x4a>
 800f60a:	2b25      	cmp	r3, #37	@ 0x25
 800f60c:	d012      	beq.n	800f634 <__ssvfiscanf_r+0x98>
 800f60e:	4699      	mov	r9, r3
 800f610:	6863      	ldr	r3, [r4, #4]
 800f612:	2b00      	cmp	r3, #0
 800f614:	f340 8093 	ble.w	800f73e <__ssvfiscanf_r+0x1a2>
 800f618:	6822      	ldr	r2, [r4, #0]
 800f61a:	7813      	ldrb	r3, [r2, #0]
 800f61c:	454b      	cmp	r3, r9
 800f61e:	f040 812c 	bne.w	800f87a <__ssvfiscanf_r+0x2de>
 800f622:	6863      	ldr	r3, [r4, #4]
 800f624:	3b01      	subs	r3, #1
 800f626:	6063      	str	r3, [r4, #4]
 800f628:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 800f62a:	3201      	adds	r2, #1
 800f62c:	3301      	adds	r3, #1
 800f62e:	6022      	str	r2, [r4, #0]
 800f630:	9345      	str	r3, [sp, #276]	@ 0x114
 800f632:	e7d8      	b.n	800f5e6 <__ssvfiscanf_r+0x4a>
 800f634:	9141      	str	r1, [sp, #260]	@ 0x104
 800f636:	9143      	str	r1, [sp, #268]	@ 0x10c
 800f638:	7853      	ldrb	r3, [r2, #1]
 800f63a:	2b2a      	cmp	r3, #42	@ 0x2a
 800f63c:	bf02      	ittt	eq
 800f63e:	2310      	moveq	r3, #16
 800f640:	1c95      	addeq	r5, r2, #2
 800f642:	9341      	streq	r3, [sp, #260]	@ 0x104
 800f644:	220a      	movs	r2, #10
 800f646:	46a9      	mov	r9, r5
 800f648:	f819 1b01 	ldrb.w	r1, [r9], #1
 800f64c:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 800f650:	2b09      	cmp	r3, #9
 800f652:	d91e      	bls.n	800f692 <__ssvfiscanf_r+0xf6>
 800f654:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 800f850 <__ssvfiscanf_r+0x2b4>
 800f658:	2203      	movs	r2, #3
 800f65a:	4650      	mov	r0, sl
 800f65c:	f7f0 fdc8 	bl	80001f0 <memchr>
 800f660:	b138      	cbz	r0, 800f672 <__ssvfiscanf_r+0xd6>
 800f662:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800f664:	eba0 000a 	sub.w	r0, r0, sl
 800f668:	2301      	movs	r3, #1
 800f66a:	4083      	lsls	r3, r0
 800f66c:	4313      	orrs	r3, r2
 800f66e:	9341      	str	r3, [sp, #260]	@ 0x104
 800f670:	464d      	mov	r5, r9
 800f672:	f815 3b01 	ldrb.w	r3, [r5], #1
 800f676:	2b78      	cmp	r3, #120	@ 0x78
 800f678:	d806      	bhi.n	800f688 <__ssvfiscanf_r+0xec>
 800f67a:	2b57      	cmp	r3, #87	@ 0x57
 800f67c:	d810      	bhi.n	800f6a0 <__ssvfiscanf_r+0x104>
 800f67e:	2b25      	cmp	r3, #37	@ 0x25
 800f680:	d0c5      	beq.n	800f60e <__ssvfiscanf_r+0x72>
 800f682:	d857      	bhi.n	800f734 <__ssvfiscanf_r+0x198>
 800f684:	2b00      	cmp	r3, #0
 800f686:	d065      	beq.n	800f754 <__ssvfiscanf_r+0x1b8>
 800f688:	2303      	movs	r3, #3
 800f68a:	9347      	str	r3, [sp, #284]	@ 0x11c
 800f68c:	230a      	movs	r3, #10
 800f68e:	9342      	str	r3, [sp, #264]	@ 0x108
 800f690:	e078      	b.n	800f784 <__ssvfiscanf_r+0x1e8>
 800f692:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 800f694:	fb02 1103 	mla	r1, r2, r3, r1
 800f698:	3930      	subs	r1, #48	@ 0x30
 800f69a:	9143      	str	r1, [sp, #268]	@ 0x10c
 800f69c:	464d      	mov	r5, r9
 800f69e:	e7d2      	b.n	800f646 <__ssvfiscanf_r+0xaa>
 800f6a0:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 800f6a4:	2a20      	cmp	r2, #32
 800f6a6:	d8ef      	bhi.n	800f688 <__ssvfiscanf_r+0xec>
 800f6a8:	a101      	add	r1, pc, #4	@ (adr r1, 800f6b0 <__ssvfiscanf_r+0x114>)
 800f6aa:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800f6ae:	bf00      	nop
 800f6b0:	0800f763 	.word	0x0800f763
 800f6b4:	0800f689 	.word	0x0800f689
 800f6b8:	0800f689 	.word	0x0800f689
 800f6bc:	0800f7bd 	.word	0x0800f7bd
 800f6c0:	0800f689 	.word	0x0800f689
 800f6c4:	0800f689 	.word	0x0800f689
 800f6c8:	0800f689 	.word	0x0800f689
 800f6cc:	0800f689 	.word	0x0800f689
 800f6d0:	0800f689 	.word	0x0800f689
 800f6d4:	0800f689 	.word	0x0800f689
 800f6d8:	0800f689 	.word	0x0800f689
 800f6dc:	0800f7d3 	.word	0x0800f7d3
 800f6e0:	0800f7b9 	.word	0x0800f7b9
 800f6e4:	0800f73b 	.word	0x0800f73b
 800f6e8:	0800f73b 	.word	0x0800f73b
 800f6ec:	0800f73b 	.word	0x0800f73b
 800f6f0:	0800f689 	.word	0x0800f689
 800f6f4:	0800f775 	.word	0x0800f775
 800f6f8:	0800f689 	.word	0x0800f689
 800f6fc:	0800f689 	.word	0x0800f689
 800f700:	0800f689 	.word	0x0800f689
 800f704:	0800f689 	.word	0x0800f689
 800f708:	0800f7e3 	.word	0x0800f7e3
 800f70c:	0800f77d 	.word	0x0800f77d
 800f710:	0800f75b 	.word	0x0800f75b
 800f714:	0800f689 	.word	0x0800f689
 800f718:	0800f689 	.word	0x0800f689
 800f71c:	0800f7df 	.word	0x0800f7df
 800f720:	0800f689 	.word	0x0800f689
 800f724:	0800f7b9 	.word	0x0800f7b9
 800f728:	0800f689 	.word	0x0800f689
 800f72c:	0800f689 	.word	0x0800f689
 800f730:	0800f763 	.word	0x0800f763
 800f734:	3b45      	subs	r3, #69	@ 0x45
 800f736:	2b02      	cmp	r3, #2
 800f738:	d8a6      	bhi.n	800f688 <__ssvfiscanf_r+0xec>
 800f73a:	2305      	movs	r3, #5
 800f73c:	e021      	b.n	800f782 <__ssvfiscanf_r+0x1e6>
 800f73e:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800f740:	4621      	mov	r1, r4
 800f742:	4630      	mov	r0, r6
 800f744:	4798      	blx	r3
 800f746:	2800      	cmp	r0, #0
 800f748:	f43f af66 	beq.w	800f618 <__ssvfiscanf_r+0x7c>
 800f74c:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800f74e:	2800      	cmp	r0, #0
 800f750:	f040 808b 	bne.w	800f86a <__ssvfiscanf_r+0x2ce>
 800f754:	f04f 30ff 	mov.w	r0, #4294967295
 800f758:	e08b      	b.n	800f872 <__ssvfiscanf_r+0x2d6>
 800f75a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800f75c:	f042 0220 	orr.w	r2, r2, #32
 800f760:	9241      	str	r2, [sp, #260]	@ 0x104
 800f762:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800f764:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800f768:	9241      	str	r2, [sp, #260]	@ 0x104
 800f76a:	2210      	movs	r2, #16
 800f76c:	2b6e      	cmp	r3, #110	@ 0x6e
 800f76e:	9242      	str	r2, [sp, #264]	@ 0x108
 800f770:	d902      	bls.n	800f778 <__ssvfiscanf_r+0x1dc>
 800f772:	e005      	b.n	800f780 <__ssvfiscanf_r+0x1e4>
 800f774:	2300      	movs	r3, #0
 800f776:	9342      	str	r3, [sp, #264]	@ 0x108
 800f778:	2303      	movs	r3, #3
 800f77a:	e002      	b.n	800f782 <__ssvfiscanf_r+0x1e6>
 800f77c:	2308      	movs	r3, #8
 800f77e:	9342      	str	r3, [sp, #264]	@ 0x108
 800f780:	2304      	movs	r3, #4
 800f782:	9347      	str	r3, [sp, #284]	@ 0x11c
 800f784:	6863      	ldr	r3, [r4, #4]
 800f786:	2b00      	cmp	r3, #0
 800f788:	dd39      	ble.n	800f7fe <__ssvfiscanf_r+0x262>
 800f78a:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800f78c:	0659      	lsls	r1, r3, #25
 800f78e:	d404      	bmi.n	800f79a <__ssvfiscanf_r+0x1fe>
 800f790:	6823      	ldr	r3, [r4, #0]
 800f792:	781a      	ldrb	r2, [r3, #0]
 800f794:	5cba      	ldrb	r2, [r7, r2]
 800f796:	0712      	lsls	r2, r2, #28
 800f798:	d438      	bmi.n	800f80c <__ssvfiscanf_r+0x270>
 800f79a:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 800f79c:	2b02      	cmp	r3, #2
 800f79e:	dc47      	bgt.n	800f830 <__ssvfiscanf_r+0x294>
 800f7a0:	466b      	mov	r3, sp
 800f7a2:	4622      	mov	r2, r4
 800f7a4:	a941      	add	r1, sp, #260	@ 0x104
 800f7a6:	4630      	mov	r0, r6
 800f7a8:	f000 f86c 	bl	800f884 <_scanf_chars>
 800f7ac:	2801      	cmp	r0, #1
 800f7ae:	d064      	beq.n	800f87a <__ssvfiscanf_r+0x2de>
 800f7b0:	2802      	cmp	r0, #2
 800f7b2:	f47f af18 	bne.w	800f5e6 <__ssvfiscanf_r+0x4a>
 800f7b6:	e7c9      	b.n	800f74c <__ssvfiscanf_r+0x1b0>
 800f7b8:	220a      	movs	r2, #10
 800f7ba:	e7d7      	b.n	800f76c <__ssvfiscanf_r+0x1d0>
 800f7bc:	4629      	mov	r1, r5
 800f7be:	4640      	mov	r0, r8
 800f7c0:	f000 fa5a 	bl	800fc78 <__sccl>
 800f7c4:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800f7c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f7ca:	9341      	str	r3, [sp, #260]	@ 0x104
 800f7cc:	4605      	mov	r5, r0
 800f7ce:	2301      	movs	r3, #1
 800f7d0:	e7d7      	b.n	800f782 <__ssvfiscanf_r+0x1e6>
 800f7d2:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800f7d4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f7d8:	9341      	str	r3, [sp, #260]	@ 0x104
 800f7da:	2300      	movs	r3, #0
 800f7dc:	e7d1      	b.n	800f782 <__ssvfiscanf_r+0x1e6>
 800f7de:	2302      	movs	r3, #2
 800f7e0:	e7cf      	b.n	800f782 <__ssvfiscanf_r+0x1e6>
 800f7e2:	9841      	ldr	r0, [sp, #260]	@ 0x104
 800f7e4:	06c3      	lsls	r3, r0, #27
 800f7e6:	f53f aefe 	bmi.w	800f5e6 <__ssvfiscanf_r+0x4a>
 800f7ea:	9b00      	ldr	r3, [sp, #0]
 800f7ec:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800f7ee:	1d19      	adds	r1, r3, #4
 800f7f0:	9100      	str	r1, [sp, #0]
 800f7f2:	681b      	ldr	r3, [r3, #0]
 800f7f4:	07c0      	lsls	r0, r0, #31
 800f7f6:	bf4c      	ite	mi
 800f7f8:	801a      	strhmi	r2, [r3, #0]
 800f7fa:	601a      	strpl	r2, [r3, #0]
 800f7fc:	e6f3      	b.n	800f5e6 <__ssvfiscanf_r+0x4a>
 800f7fe:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800f800:	4621      	mov	r1, r4
 800f802:	4630      	mov	r0, r6
 800f804:	4798      	blx	r3
 800f806:	2800      	cmp	r0, #0
 800f808:	d0bf      	beq.n	800f78a <__ssvfiscanf_r+0x1ee>
 800f80a:	e79f      	b.n	800f74c <__ssvfiscanf_r+0x1b0>
 800f80c:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800f80e:	3201      	adds	r2, #1
 800f810:	9245      	str	r2, [sp, #276]	@ 0x114
 800f812:	6862      	ldr	r2, [r4, #4]
 800f814:	3a01      	subs	r2, #1
 800f816:	2a00      	cmp	r2, #0
 800f818:	6062      	str	r2, [r4, #4]
 800f81a:	dd02      	ble.n	800f822 <__ssvfiscanf_r+0x286>
 800f81c:	3301      	adds	r3, #1
 800f81e:	6023      	str	r3, [r4, #0]
 800f820:	e7b6      	b.n	800f790 <__ssvfiscanf_r+0x1f4>
 800f822:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800f824:	4621      	mov	r1, r4
 800f826:	4630      	mov	r0, r6
 800f828:	4798      	blx	r3
 800f82a:	2800      	cmp	r0, #0
 800f82c:	d0b0      	beq.n	800f790 <__ssvfiscanf_r+0x1f4>
 800f82e:	e78d      	b.n	800f74c <__ssvfiscanf_r+0x1b0>
 800f830:	2b04      	cmp	r3, #4
 800f832:	dc0f      	bgt.n	800f854 <__ssvfiscanf_r+0x2b8>
 800f834:	466b      	mov	r3, sp
 800f836:	4622      	mov	r2, r4
 800f838:	a941      	add	r1, sp, #260	@ 0x104
 800f83a:	4630      	mov	r0, r6
 800f83c:	f000 f87c 	bl	800f938 <_scanf_i>
 800f840:	e7b4      	b.n	800f7ac <__ssvfiscanf_r+0x210>
 800f842:	bf00      	nop
 800f844:	0800f4ed 	.word	0x0800f4ed
 800f848:	0800f563 	.word	0x0800f563
 800f84c:	08012cb9 	.word	0x08012cb9
 800f850:	080130ee 	.word	0x080130ee
 800f854:	4b0a      	ldr	r3, [pc, #40]	@ (800f880 <__ssvfiscanf_r+0x2e4>)
 800f856:	2b00      	cmp	r3, #0
 800f858:	f43f aec5 	beq.w	800f5e6 <__ssvfiscanf_r+0x4a>
 800f85c:	466b      	mov	r3, sp
 800f85e:	4622      	mov	r2, r4
 800f860:	a941      	add	r1, sp, #260	@ 0x104
 800f862:	4630      	mov	r0, r6
 800f864:	f7fc fb40 	bl	800bee8 <_scanf_float>
 800f868:	e7a0      	b.n	800f7ac <__ssvfiscanf_r+0x210>
 800f86a:	89a3      	ldrh	r3, [r4, #12]
 800f86c:	065b      	lsls	r3, r3, #25
 800f86e:	f53f af71 	bmi.w	800f754 <__ssvfiscanf_r+0x1b8>
 800f872:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 800f876:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f87a:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800f87c:	e7f9      	b.n	800f872 <__ssvfiscanf_r+0x2d6>
 800f87e:	bf00      	nop
 800f880:	0800bee9 	.word	0x0800bee9

0800f884 <_scanf_chars>:
 800f884:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f888:	4615      	mov	r5, r2
 800f88a:	688a      	ldr	r2, [r1, #8]
 800f88c:	4680      	mov	r8, r0
 800f88e:	460c      	mov	r4, r1
 800f890:	b932      	cbnz	r2, 800f8a0 <_scanf_chars+0x1c>
 800f892:	698a      	ldr	r2, [r1, #24]
 800f894:	2a00      	cmp	r2, #0
 800f896:	bf14      	ite	ne
 800f898:	f04f 32ff 	movne.w	r2, #4294967295
 800f89c:	2201      	moveq	r2, #1
 800f89e:	608a      	str	r2, [r1, #8]
 800f8a0:	6822      	ldr	r2, [r4, #0]
 800f8a2:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 800f934 <_scanf_chars+0xb0>
 800f8a6:	06d1      	lsls	r1, r2, #27
 800f8a8:	bf5f      	itttt	pl
 800f8aa:	681a      	ldrpl	r2, [r3, #0]
 800f8ac:	1d11      	addpl	r1, r2, #4
 800f8ae:	6019      	strpl	r1, [r3, #0]
 800f8b0:	6816      	ldrpl	r6, [r2, #0]
 800f8b2:	2700      	movs	r7, #0
 800f8b4:	69a0      	ldr	r0, [r4, #24]
 800f8b6:	b188      	cbz	r0, 800f8dc <_scanf_chars+0x58>
 800f8b8:	2801      	cmp	r0, #1
 800f8ba:	d107      	bne.n	800f8cc <_scanf_chars+0x48>
 800f8bc:	682b      	ldr	r3, [r5, #0]
 800f8be:	781a      	ldrb	r2, [r3, #0]
 800f8c0:	6963      	ldr	r3, [r4, #20]
 800f8c2:	5c9b      	ldrb	r3, [r3, r2]
 800f8c4:	b953      	cbnz	r3, 800f8dc <_scanf_chars+0x58>
 800f8c6:	2f00      	cmp	r7, #0
 800f8c8:	d031      	beq.n	800f92e <_scanf_chars+0xaa>
 800f8ca:	e022      	b.n	800f912 <_scanf_chars+0x8e>
 800f8cc:	2802      	cmp	r0, #2
 800f8ce:	d120      	bne.n	800f912 <_scanf_chars+0x8e>
 800f8d0:	682b      	ldr	r3, [r5, #0]
 800f8d2:	781b      	ldrb	r3, [r3, #0]
 800f8d4:	f819 3003 	ldrb.w	r3, [r9, r3]
 800f8d8:	071b      	lsls	r3, r3, #28
 800f8da:	d41a      	bmi.n	800f912 <_scanf_chars+0x8e>
 800f8dc:	6823      	ldr	r3, [r4, #0]
 800f8de:	06da      	lsls	r2, r3, #27
 800f8e0:	bf5e      	ittt	pl
 800f8e2:	682b      	ldrpl	r3, [r5, #0]
 800f8e4:	781b      	ldrbpl	r3, [r3, #0]
 800f8e6:	f806 3b01 	strbpl.w	r3, [r6], #1
 800f8ea:	682a      	ldr	r2, [r5, #0]
 800f8ec:	686b      	ldr	r3, [r5, #4]
 800f8ee:	3201      	adds	r2, #1
 800f8f0:	602a      	str	r2, [r5, #0]
 800f8f2:	68a2      	ldr	r2, [r4, #8]
 800f8f4:	3b01      	subs	r3, #1
 800f8f6:	3a01      	subs	r2, #1
 800f8f8:	606b      	str	r3, [r5, #4]
 800f8fa:	3701      	adds	r7, #1
 800f8fc:	60a2      	str	r2, [r4, #8]
 800f8fe:	b142      	cbz	r2, 800f912 <_scanf_chars+0x8e>
 800f900:	2b00      	cmp	r3, #0
 800f902:	dcd7      	bgt.n	800f8b4 <_scanf_chars+0x30>
 800f904:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800f908:	4629      	mov	r1, r5
 800f90a:	4640      	mov	r0, r8
 800f90c:	4798      	blx	r3
 800f90e:	2800      	cmp	r0, #0
 800f910:	d0d0      	beq.n	800f8b4 <_scanf_chars+0x30>
 800f912:	6823      	ldr	r3, [r4, #0]
 800f914:	f013 0310 	ands.w	r3, r3, #16
 800f918:	d105      	bne.n	800f926 <_scanf_chars+0xa2>
 800f91a:	68e2      	ldr	r2, [r4, #12]
 800f91c:	3201      	adds	r2, #1
 800f91e:	60e2      	str	r2, [r4, #12]
 800f920:	69a2      	ldr	r2, [r4, #24]
 800f922:	b102      	cbz	r2, 800f926 <_scanf_chars+0xa2>
 800f924:	7033      	strb	r3, [r6, #0]
 800f926:	6923      	ldr	r3, [r4, #16]
 800f928:	443b      	add	r3, r7
 800f92a:	6123      	str	r3, [r4, #16]
 800f92c:	2000      	movs	r0, #0
 800f92e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f932:	bf00      	nop
 800f934:	08012cb9 	.word	0x08012cb9

0800f938 <_scanf_i>:
 800f938:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f93c:	4698      	mov	r8, r3
 800f93e:	4b74      	ldr	r3, [pc, #464]	@ (800fb10 <_scanf_i+0x1d8>)
 800f940:	460c      	mov	r4, r1
 800f942:	4682      	mov	sl, r0
 800f944:	4616      	mov	r6, r2
 800f946:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800f94a:	b087      	sub	sp, #28
 800f94c:	ab03      	add	r3, sp, #12
 800f94e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800f952:	4b70      	ldr	r3, [pc, #448]	@ (800fb14 <_scanf_i+0x1dc>)
 800f954:	69a1      	ldr	r1, [r4, #24]
 800f956:	4a70      	ldr	r2, [pc, #448]	@ (800fb18 <_scanf_i+0x1e0>)
 800f958:	2903      	cmp	r1, #3
 800f95a:	bf08      	it	eq
 800f95c:	461a      	moveq	r2, r3
 800f95e:	68a3      	ldr	r3, [r4, #8]
 800f960:	9201      	str	r2, [sp, #4]
 800f962:	1e5a      	subs	r2, r3, #1
 800f964:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800f968:	bf88      	it	hi
 800f96a:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800f96e:	4627      	mov	r7, r4
 800f970:	bf82      	ittt	hi
 800f972:	eb03 0905 	addhi.w	r9, r3, r5
 800f976:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800f97a:	60a3      	strhi	r3, [r4, #8]
 800f97c:	f857 3b1c 	ldr.w	r3, [r7], #28
 800f980:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 800f984:	bf98      	it	ls
 800f986:	f04f 0900 	movls.w	r9, #0
 800f98a:	6023      	str	r3, [r4, #0]
 800f98c:	463d      	mov	r5, r7
 800f98e:	f04f 0b00 	mov.w	fp, #0
 800f992:	6831      	ldr	r1, [r6, #0]
 800f994:	ab03      	add	r3, sp, #12
 800f996:	7809      	ldrb	r1, [r1, #0]
 800f998:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800f99c:	2202      	movs	r2, #2
 800f99e:	f7f0 fc27 	bl	80001f0 <memchr>
 800f9a2:	b328      	cbz	r0, 800f9f0 <_scanf_i+0xb8>
 800f9a4:	f1bb 0f01 	cmp.w	fp, #1
 800f9a8:	d159      	bne.n	800fa5e <_scanf_i+0x126>
 800f9aa:	6862      	ldr	r2, [r4, #4]
 800f9ac:	b92a      	cbnz	r2, 800f9ba <_scanf_i+0x82>
 800f9ae:	6822      	ldr	r2, [r4, #0]
 800f9b0:	2108      	movs	r1, #8
 800f9b2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800f9b6:	6061      	str	r1, [r4, #4]
 800f9b8:	6022      	str	r2, [r4, #0]
 800f9ba:	6822      	ldr	r2, [r4, #0]
 800f9bc:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 800f9c0:	6022      	str	r2, [r4, #0]
 800f9c2:	68a2      	ldr	r2, [r4, #8]
 800f9c4:	1e51      	subs	r1, r2, #1
 800f9c6:	60a1      	str	r1, [r4, #8]
 800f9c8:	b192      	cbz	r2, 800f9f0 <_scanf_i+0xb8>
 800f9ca:	6832      	ldr	r2, [r6, #0]
 800f9cc:	1c51      	adds	r1, r2, #1
 800f9ce:	6031      	str	r1, [r6, #0]
 800f9d0:	7812      	ldrb	r2, [r2, #0]
 800f9d2:	f805 2b01 	strb.w	r2, [r5], #1
 800f9d6:	6872      	ldr	r2, [r6, #4]
 800f9d8:	3a01      	subs	r2, #1
 800f9da:	2a00      	cmp	r2, #0
 800f9dc:	6072      	str	r2, [r6, #4]
 800f9de:	dc07      	bgt.n	800f9f0 <_scanf_i+0xb8>
 800f9e0:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 800f9e4:	4631      	mov	r1, r6
 800f9e6:	4650      	mov	r0, sl
 800f9e8:	4790      	blx	r2
 800f9ea:	2800      	cmp	r0, #0
 800f9ec:	f040 8085 	bne.w	800fafa <_scanf_i+0x1c2>
 800f9f0:	f10b 0b01 	add.w	fp, fp, #1
 800f9f4:	f1bb 0f03 	cmp.w	fp, #3
 800f9f8:	d1cb      	bne.n	800f992 <_scanf_i+0x5a>
 800f9fa:	6863      	ldr	r3, [r4, #4]
 800f9fc:	b90b      	cbnz	r3, 800fa02 <_scanf_i+0xca>
 800f9fe:	230a      	movs	r3, #10
 800fa00:	6063      	str	r3, [r4, #4]
 800fa02:	6863      	ldr	r3, [r4, #4]
 800fa04:	4945      	ldr	r1, [pc, #276]	@ (800fb1c <_scanf_i+0x1e4>)
 800fa06:	6960      	ldr	r0, [r4, #20]
 800fa08:	1ac9      	subs	r1, r1, r3
 800fa0a:	f000 f935 	bl	800fc78 <__sccl>
 800fa0e:	f04f 0b00 	mov.w	fp, #0
 800fa12:	68a3      	ldr	r3, [r4, #8]
 800fa14:	6822      	ldr	r2, [r4, #0]
 800fa16:	2b00      	cmp	r3, #0
 800fa18:	d03d      	beq.n	800fa96 <_scanf_i+0x15e>
 800fa1a:	6831      	ldr	r1, [r6, #0]
 800fa1c:	6960      	ldr	r0, [r4, #20]
 800fa1e:	f891 c000 	ldrb.w	ip, [r1]
 800fa22:	f810 000c 	ldrb.w	r0, [r0, ip]
 800fa26:	2800      	cmp	r0, #0
 800fa28:	d035      	beq.n	800fa96 <_scanf_i+0x15e>
 800fa2a:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 800fa2e:	d124      	bne.n	800fa7a <_scanf_i+0x142>
 800fa30:	0510      	lsls	r0, r2, #20
 800fa32:	d522      	bpl.n	800fa7a <_scanf_i+0x142>
 800fa34:	f10b 0b01 	add.w	fp, fp, #1
 800fa38:	f1b9 0f00 	cmp.w	r9, #0
 800fa3c:	d003      	beq.n	800fa46 <_scanf_i+0x10e>
 800fa3e:	3301      	adds	r3, #1
 800fa40:	f109 39ff 	add.w	r9, r9, #4294967295
 800fa44:	60a3      	str	r3, [r4, #8]
 800fa46:	6873      	ldr	r3, [r6, #4]
 800fa48:	3b01      	subs	r3, #1
 800fa4a:	2b00      	cmp	r3, #0
 800fa4c:	6073      	str	r3, [r6, #4]
 800fa4e:	dd1b      	ble.n	800fa88 <_scanf_i+0x150>
 800fa50:	6833      	ldr	r3, [r6, #0]
 800fa52:	3301      	adds	r3, #1
 800fa54:	6033      	str	r3, [r6, #0]
 800fa56:	68a3      	ldr	r3, [r4, #8]
 800fa58:	3b01      	subs	r3, #1
 800fa5a:	60a3      	str	r3, [r4, #8]
 800fa5c:	e7d9      	b.n	800fa12 <_scanf_i+0xda>
 800fa5e:	f1bb 0f02 	cmp.w	fp, #2
 800fa62:	d1ae      	bne.n	800f9c2 <_scanf_i+0x8a>
 800fa64:	6822      	ldr	r2, [r4, #0]
 800fa66:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 800fa6a:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 800fa6e:	d1bf      	bne.n	800f9f0 <_scanf_i+0xb8>
 800fa70:	2110      	movs	r1, #16
 800fa72:	6061      	str	r1, [r4, #4]
 800fa74:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800fa78:	e7a2      	b.n	800f9c0 <_scanf_i+0x88>
 800fa7a:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 800fa7e:	6022      	str	r2, [r4, #0]
 800fa80:	780b      	ldrb	r3, [r1, #0]
 800fa82:	f805 3b01 	strb.w	r3, [r5], #1
 800fa86:	e7de      	b.n	800fa46 <_scanf_i+0x10e>
 800fa88:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800fa8c:	4631      	mov	r1, r6
 800fa8e:	4650      	mov	r0, sl
 800fa90:	4798      	blx	r3
 800fa92:	2800      	cmp	r0, #0
 800fa94:	d0df      	beq.n	800fa56 <_scanf_i+0x11e>
 800fa96:	6823      	ldr	r3, [r4, #0]
 800fa98:	05d9      	lsls	r1, r3, #23
 800fa9a:	d50d      	bpl.n	800fab8 <_scanf_i+0x180>
 800fa9c:	42bd      	cmp	r5, r7
 800fa9e:	d909      	bls.n	800fab4 <_scanf_i+0x17c>
 800faa0:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800faa4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800faa8:	4632      	mov	r2, r6
 800faaa:	4650      	mov	r0, sl
 800faac:	4798      	blx	r3
 800faae:	f105 39ff 	add.w	r9, r5, #4294967295
 800fab2:	464d      	mov	r5, r9
 800fab4:	42bd      	cmp	r5, r7
 800fab6:	d028      	beq.n	800fb0a <_scanf_i+0x1d2>
 800fab8:	6822      	ldr	r2, [r4, #0]
 800faba:	f012 0210 	ands.w	r2, r2, #16
 800fabe:	d113      	bne.n	800fae8 <_scanf_i+0x1b0>
 800fac0:	702a      	strb	r2, [r5, #0]
 800fac2:	6863      	ldr	r3, [r4, #4]
 800fac4:	9e01      	ldr	r6, [sp, #4]
 800fac6:	4639      	mov	r1, r7
 800fac8:	4650      	mov	r0, sl
 800faca:	47b0      	blx	r6
 800facc:	f8d8 3000 	ldr.w	r3, [r8]
 800fad0:	6821      	ldr	r1, [r4, #0]
 800fad2:	1d1a      	adds	r2, r3, #4
 800fad4:	f8c8 2000 	str.w	r2, [r8]
 800fad8:	f011 0f20 	tst.w	r1, #32
 800fadc:	681b      	ldr	r3, [r3, #0]
 800fade:	d00f      	beq.n	800fb00 <_scanf_i+0x1c8>
 800fae0:	6018      	str	r0, [r3, #0]
 800fae2:	68e3      	ldr	r3, [r4, #12]
 800fae4:	3301      	adds	r3, #1
 800fae6:	60e3      	str	r3, [r4, #12]
 800fae8:	6923      	ldr	r3, [r4, #16]
 800faea:	1bed      	subs	r5, r5, r7
 800faec:	445d      	add	r5, fp
 800faee:	442b      	add	r3, r5
 800faf0:	6123      	str	r3, [r4, #16]
 800faf2:	2000      	movs	r0, #0
 800faf4:	b007      	add	sp, #28
 800faf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fafa:	f04f 0b00 	mov.w	fp, #0
 800fafe:	e7ca      	b.n	800fa96 <_scanf_i+0x15e>
 800fb00:	07ca      	lsls	r2, r1, #31
 800fb02:	bf4c      	ite	mi
 800fb04:	8018      	strhmi	r0, [r3, #0]
 800fb06:	6018      	strpl	r0, [r3, #0]
 800fb08:	e7eb      	b.n	800fae2 <_scanf_i+0x1aa>
 800fb0a:	2001      	movs	r0, #1
 800fb0c:	e7f2      	b.n	800faf4 <_scanf_i+0x1bc>
 800fb0e:	bf00      	nop
 800fb10:	08010660 	.word	0x08010660
 800fb14:	0800b621 	.word	0x0800b621
 800fb18:	0800f20d 	.word	0x0800f20d
 800fb1c:	08013109 	.word	0x08013109

0800fb20 <__sflush_r>:
 800fb20:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800fb24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fb28:	0716      	lsls	r6, r2, #28
 800fb2a:	4605      	mov	r5, r0
 800fb2c:	460c      	mov	r4, r1
 800fb2e:	d454      	bmi.n	800fbda <__sflush_r+0xba>
 800fb30:	684b      	ldr	r3, [r1, #4]
 800fb32:	2b00      	cmp	r3, #0
 800fb34:	dc02      	bgt.n	800fb3c <__sflush_r+0x1c>
 800fb36:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800fb38:	2b00      	cmp	r3, #0
 800fb3a:	dd48      	ble.n	800fbce <__sflush_r+0xae>
 800fb3c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800fb3e:	2e00      	cmp	r6, #0
 800fb40:	d045      	beq.n	800fbce <__sflush_r+0xae>
 800fb42:	2300      	movs	r3, #0
 800fb44:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800fb48:	682f      	ldr	r7, [r5, #0]
 800fb4a:	6a21      	ldr	r1, [r4, #32]
 800fb4c:	602b      	str	r3, [r5, #0]
 800fb4e:	d030      	beq.n	800fbb2 <__sflush_r+0x92>
 800fb50:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800fb52:	89a3      	ldrh	r3, [r4, #12]
 800fb54:	0759      	lsls	r1, r3, #29
 800fb56:	d505      	bpl.n	800fb64 <__sflush_r+0x44>
 800fb58:	6863      	ldr	r3, [r4, #4]
 800fb5a:	1ad2      	subs	r2, r2, r3
 800fb5c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800fb5e:	b10b      	cbz	r3, 800fb64 <__sflush_r+0x44>
 800fb60:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800fb62:	1ad2      	subs	r2, r2, r3
 800fb64:	2300      	movs	r3, #0
 800fb66:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800fb68:	6a21      	ldr	r1, [r4, #32]
 800fb6a:	4628      	mov	r0, r5
 800fb6c:	47b0      	blx	r6
 800fb6e:	1c43      	adds	r3, r0, #1
 800fb70:	89a3      	ldrh	r3, [r4, #12]
 800fb72:	d106      	bne.n	800fb82 <__sflush_r+0x62>
 800fb74:	6829      	ldr	r1, [r5, #0]
 800fb76:	291d      	cmp	r1, #29
 800fb78:	d82b      	bhi.n	800fbd2 <__sflush_r+0xb2>
 800fb7a:	4a2a      	ldr	r2, [pc, #168]	@ (800fc24 <__sflush_r+0x104>)
 800fb7c:	410a      	asrs	r2, r1
 800fb7e:	07d6      	lsls	r6, r2, #31
 800fb80:	d427      	bmi.n	800fbd2 <__sflush_r+0xb2>
 800fb82:	2200      	movs	r2, #0
 800fb84:	6062      	str	r2, [r4, #4]
 800fb86:	04d9      	lsls	r1, r3, #19
 800fb88:	6922      	ldr	r2, [r4, #16]
 800fb8a:	6022      	str	r2, [r4, #0]
 800fb8c:	d504      	bpl.n	800fb98 <__sflush_r+0x78>
 800fb8e:	1c42      	adds	r2, r0, #1
 800fb90:	d101      	bne.n	800fb96 <__sflush_r+0x76>
 800fb92:	682b      	ldr	r3, [r5, #0]
 800fb94:	b903      	cbnz	r3, 800fb98 <__sflush_r+0x78>
 800fb96:	6560      	str	r0, [r4, #84]	@ 0x54
 800fb98:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800fb9a:	602f      	str	r7, [r5, #0]
 800fb9c:	b1b9      	cbz	r1, 800fbce <__sflush_r+0xae>
 800fb9e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800fba2:	4299      	cmp	r1, r3
 800fba4:	d002      	beq.n	800fbac <__sflush_r+0x8c>
 800fba6:	4628      	mov	r0, r5
 800fba8:	f7fe fa36 	bl	800e018 <_free_r>
 800fbac:	2300      	movs	r3, #0
 800fbae:	6363      	str	r3, [r4, #52]	@ 0x34
 800fbb0:	e00d      	b.n	800fbce <__sflush_r+0xae>
 800fbb2:	2301      	movs	r3, #1
 800fbb4:	4628      	mov	r0, r5
 800fbb6:	47b0      	blx	r6
 800fbb8:	4602      	mov	r2, r0
 800fbba:	1c50      	adds	r0, r2, #1
 800fbbc:	d1c9      	bne.n	800fb52 <__sflush_r+0x32>
 800fbbe:	682b      	ldr	r3, [r5, #0]
 800fbc0:	2b00      	cmp	r3, #0
 800fbc2:	d0c6      	beq.n	800fb52 <__sflush_r+0x32>
 800fbc4:	2b1d      	cmp	r3, #29
 800fbc6:	d001      	beq.n	800fbcc <__sflush_r+0xac>
 800fbc8:	2b16      	cmp	r3, #22
 800fbca:	d11e      	bne.n	800fc0a <__sflush_r+0xea>
 800fbcc:	602f      	str	r7, [r5, #0]
 800fbce:	2000      	movs	r0, #0
 800fbd0:	e022      	b.n	800fc18 <__sflush_r+0xf8>
 800fbd2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fbd6:	b21b      	sxth	r3, r3
 800fbd8:	e01b      	b.n	800fc12 <__sflush_r+0xf2>
 800fbda:	690f      	ldr	r7, [r1, #16]
 800fbdc:	2f00      	cmp	r7, #0
 800fbde:	d0f6      	beq.n	800fbce <__sflush_r+0xae>
 800fbe0:	0793      	lsls	r3, r2, #30
 800fbe2:	680e      	ldr	r6, [r1, #0]
 800fbe4:	bf08      	it	eq
 800fbe6:	694b      	ldreq	r3, [r1, #20]
 800fbe8:	600f      	str	r7, [r1, #0]
 800fbea:	bf18      	it	ne
 800fbec:	2300      	movne	r3, #0
 800fbee:	eba6 0807 	sub.w	r8, r6, r7
 800fbf2:	608b      	str	r3, [r1, #8]
 800fbf4:	f1b8 0f00 	cmp.w	r8, #0
 800fbf8:	dde9      	ble.n	800fbce <__sflush_r+0xae>
 800fbfa:	6a21      	ldr	r1, [r4, #32]
 800fbfc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800fbfe:	4643      	mov	r3, r8
 800fc00:	463a      	mov	r2, r7
 800fc02:	4628      	mov	r0, r5
 800fc04:	47b0      	blx	r6
 800fc06:	2800      	cmp	r0, #0
 800fc08:	dc08      	bgt.n	800fc1c <__sflush_r+0xfc>
 800fc0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fc0e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fc12:	81a3      	strh	r3, [r4, #12]
 800fc14:	f04f 30ff 	mov.w	r0, #4294967295
 800fc18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fc1c:	4407      	add	r7, r0
 800fc1e:	eba8 0800 	sub.w	r8, r8, r0
 800fc22:	e7e7      	b.n	800fbf4 <__sflush_r+0xd4>
 800fc24:	dfbffffe 	.word	0xdfbffffe

0800fc28 <_fflush_r>:
 800fc28:	b538      	push	{r3, r4, r5, lr}
 800fc2a:	690b      	ldr	r3, [r1, #16]
 800fc2c:	4605      	mov	r5, r0
 800fc2e:	460c      	mov	r4, r1
 800fc30:	b913      	cbnz	r3, 800fc38 <_fflush_r+0x10>
 800fc32:	2500      	movs	r5, #0
 800fc34:	4628      	mov	r0, r5
 800fc36:	bd38      	pop	{r3, r4, r5, pc}
 800fc38:	b118      	cbz	r0, 800fc42 <_fflush_r+0x1a>
 800fc3a:	6a03      	ldr	r3, [r0, #32]
 800fc3c:	b90b      	cbnz	r3, 800fc42 <_fflush_r+0x1a>
 800fc3e:	f7fc fbf3 	bl	800c428 <__sinit>
 800fc42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fc46:	2b00      	cmp	r3, #0
 800fc48:	d0f3      	beq.n	800fc32 <_fflush_r+0xa>
 800fc4a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800fc4c:	07d0      	lsls	r0, r2, #31
 800fc4e:	d404      	bmi.n	800fc5a <_fflush_r+0x32>
 800fc50:	0599      	lsls	r1, r3, #22
 800fc52:	d402      	bmi.n	800fc5a <_fflush_r+0x32>
 800fc54:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800fc56:	f7f5 ff0a 	bl	8005a6e <__retarget_lock_acquire_recursive>
 800fc5a:	4628      	mov	r0, r5
 800fc5c:	4621      	mov	r1, r4
 800fc5e:	f7ff ff5f 	bl	800fb20 <__sflush_r>
 800fc62:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800fc64:	07da      	lsls	r2, r3, #31
 800fc66:	4605      	mov	r5, r0
 800fc68:	d4e4      	bmi.n	800fc34 <_fflush_r+0xc>
 800fc6a:	89a3      	ldrh	r3, [r4, #12]
 800fc6c:	059b      	lsls	r3, r3, #22
 800fc6e:	d4e1      	bmi.n	800fc34 <_fflush_r+0xc>
 800fc70:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800fc72:	f7f5 ff08 	bl	8005a86 <__retarget_lock_release_recursive>
 800fc76:	e7dd      	b.n	800fc34 <_fflush_r+0xc>

0800fc78 <__sccl>:
 800fc78:	b570      	push	{r4, r5, r6, lr}
 800fc7a:	780b      	ldrb	r3, [r1, #0]
 800fc7c:	4604      	mov	r4, r0
 800fc7e:	2b5e      	cmp	r3, #94	@ 0x5e
 800fc80:	bf0b      	itete	eq
 800fc82:	784b      	ldrbeq	r3, [r1, #1]
 800fc84:	1c4a      	addne	r2, r1, #1
 800fc86:	1c8a      	addeq	r2, r1, #2
 800fc88:	2100      	movne	r1, #0
 800fc8a:	bf08      	it	eq
 800fc8c:	2101      	moveq	r1, #1
 800fc8e:	3801      	subs	r0, #1
 800fc90:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 800fc94:	f800 1f01 	strb.w	r1, [r0, #1]!
 800fc98:	42a8      	cmp	r0, r5
 800fc9a:	d1fb      	bne.n	800fc94 <__sccl+0x1c>
 800fc9c:	b90b      	cbnz	r3, 800fca2 <__sccl+0x2a>
 800fc9e:	1e50      	subs	r0, r2, #1
 800fca0:	bd70      	pop	{r4, r5, r6, pc}
 800fca2:	f081 0101 	eor.w	r1, r1, #1
 800fca6:	54e1      	strb	r1, [r4, r3]
 800fca8:	4610      	mov	r0, r2
 800fcaa:	4602      	mov	r2, r0
 800fcac:	f812 5b01 	ldrb.w	r5, [r2], #1
 800fcb0:	2d2d      	cmp	r5, #45	@ 0x2d
 800fcb2:	d005      	beq.n	800fcc0 <__sccl+0x48>
 800fcb4:	2d5d      	cmp	r5, #93	@ 0x5d
 800fcb6:	d016      	beq.n	800fce6 <__sccl+0x6e>
 800fcb8:	2d00      	cmp	r5, #0
 800fcba:	d0f1      	beq.n	800fca0 <__sccl+0x28>
 800fcbc:	462b      	mov	r3, r5
 800fcbe:	e7f2      	b.n	800fca6 <__sccl+0x2e>
 800fcc0:	7846      	ldrb	r6, [r0, #1]
 800fcc2:	2e5d      	cmp	r6, #93	@ 0x5d
 800fcc4:	d0fa      	beq.n	800fcbc <__sccl+0x44>
 800fcc6:	42b3      	cmp	r3, r6
 800fcc8:	dcf8      	bgt.n	800fcbc <__sccl+0x44>
 800fcca:	3002      	adds	r0, #2
 800fccc:	461a      	mov	r2, r3
 800fcce:	3201      	adds	r2, #1
 800fcd0:	4296      	cmp	r6, r2
 800fcd2:	54a1      	strb	r1, [r4, r2]
 800fcd4:	dcfb      	bgt.n	800fcce <__sccl+0x56>
 800fcd6:	1af2      	subs	r2, r6, r3
 800fcd8:	3a01      	subs	r2, #1
 800fcda:	1c5d      	adds	r5, r3, #1
 800fcdc:	42b3      	cmp	r3, r6
 800fcde:	bfa8      	it	ge
 800fce0:	2200      	movge	r2, #0
 800fce2:	18ab      	adds	r3, r5, r2
 800fce4:	e7e1      	b.n	800fcaa <__sccl+0x32>
 800fce6:	4610      	mov	r0, r2
 800fce8:	e7da      	b.n	800fca0 <__sccl+0x28>

0800fcea <__submore>:
 800fcea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fcee:	460c      	mov	r4, r1
 800fcf0:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800fcf2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800fcf6:	4299      	cmp	r1, r3
 800fcf8:	d11d      	bne.n	800fd36 <__submore+0x4c>
 800fcfa:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800fcfe:	f7fa fd73 	bl	800a7e8 <_malloc_r>
 800fd02:	b918      	cbnz	r0, 800fd0c <__submore+0x22>
 800fd04:	f04f 30ff 	mov.w	r0, #4294967295
 800fd08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fd0c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800fd10:	63a3      	str	r3, [r4, #56]	@ 0x38
 800fd12:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 800fd16:	6360      	str	r0, [r4, #52]	@ 0x34
 800fd18:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 800fd1c:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800fd20:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 800fd24:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800fd28:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 800fd2c:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 800fd30:	6020      	str	r0, [r4, #0]
 800fd32:	2000      	movs	r0, #0
 800fd34:	e7e8      	b.n	800fd08 <__submore+0x1e>
 800fd36:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 800fd38:	0077      	lsls	r7, r6, #1
 800fd3a:	463a      	mov	r2, r7
 800fd3c:	f000 f86c 	bl	800fe18 <_realloc_r>
 800fd40:	4605      	mov	r5, r0
 800fd42:	2800      	cmp	r0, #0
 800fd44:	d0de      	beq.n	800fd04 <__submore+0x1a>
 800fd46:	eb00 0806 	add.w	r8, r0, r6
 800fd4a:	4601      	mov	r1, r0
 800fd4c:	4632      	mov	r2, r6
 800fd4e:	4640      	mov	r0, r8
 800fd50:	f7fd faf0 	bl	800d334 <memcpy>
 800fd54:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 800fd58:	f8c4 8000 	str.w	r8, [r4]
 800fd5c:	e7e9      	b.n	800fd32 <__submore+0x48>

0800fd5e <memmove>:
 800fd5e:	4288      	cmp	r0, r1
 800fd60:	b510      	push	{r4, lr}
 800fd62:	eb01 0402 	add.w	r4, r1, r2
 800fd66:	d902      	bls.n	800fd6e <memmove+0x10>
 800fd68:	4284      	cmp	r4, r0
 800fd6a:	4623      	mov	r3, r4
 800fd6c:	d807      	bhi.n	800fd7e <memmove+0x20>
 800fd6e:	1e43      	subs	r3, r0, #1
 800fd70:	42a1      	cmp	r1, r4
 800fd72:	d008      	beq.n	800fd86 <memmove+0x28>
 800fd74:	f811 2b01 	ldrb.w	r2, [r1], #1
 800fd78:	f803 2f01 	strb.w	r2, [r3, #1]!
 800fd7c:	e7f8      	b.n	800fd70 <memmove+0x12>
 800fd7e:	4402      	add	r2, r0
 800fd80:	4601      	mov	r1, r0
 800fd82:	428a      	cmp	r2, r1
 800fd84:	d100      	bne.n	800fd88 <memmove+0x2a>
 800fd86:	bd10      	pop	{r4, pc}
 800fd88:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800fd8c:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800fd90:	e7f7      	b.n	800fd82 <memmove+0x24>
	...

0800fd94 <__gettzinfo>:
 800fd94:	4800      	ldr	r0, [pc, #0]	@ (800fd98 <__gettzinfo+0x4>)
 800fd96:	4770      	bx	lr
 800fd98:	20000210 	.word	0x20000210

0800fd9c <__assert_func>:
 800fd9c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800fd9e:	4614      	mov	r4, r2
 800fda0:	461a      	mov	r2, r3
 800fda2:	4b09      	ldr	r3, [pc, #36]	@ (800fdc8 <__assert_func+0x2c>)
 800fda4:	681b      	ldr	r3, [r3, #0]
 800fda6:	4605      	mov	r5, r0
 800fda8:	68d8      	ldr	r0, [r3, #12]
 800fdaa:	b954      	cbnz	r4, 800fdc2 <__assert_func+0x26>
 800fdac:	4b07      	ldr	r3, [pc, #28]	@ (800fdcc <__assert_func+0x30>)
 800fdae:	461c      	mov	r4, r3
 800fdb0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800fdb4:	9100      	str	r1, [sp, #0]
 800fdb6:	462b      	mov	r3, r5
 800fdb8:	4905      	ldr	r1, [pc, #20]	@ (800fdd0 <__assert_func+0x34>)
 800fdba:	f000 f85b 	bl	800fe74 <fiprintf>
 800fdbe:	f000 f86b 	bl	800fe98 <abort>
 800fdc2:	4b04      	ldr	r3, [pc, #16]	@ (800fdd4 <__assert_func+0x38>)
 800fdc4:	e7f4      	b.n	800fdb0 <__assert_func+0x14>
 800fdc6:	bf00      	nop
 800fdc8:	200001bc 	.word	0x200001bc
 800fdcc:	08011a82 	.word	0x08011a82
 800fdd0:	08013181 	.word	0x08013181
 800fdd4:	08013174 	.word	0x08013174

0800fdd8 <_calloc_r>:
 800fdd8:	b570      	push	{r4, r5, r6, lr}
 800fdda:	fba1 5402 	umull	r5, r4, r1, r2
 800fdde:	b93c      	cbnz	r4, 800fdf0 <_calloc_r+0x18>
 800fde0:	4629      	mov	r1, r5
 800fde2:	f7fa fd01 	bl	800a7e8 <_malloc_r>
 800fde6:	4606      	mov	r6, r0
 800fde8:	b928      	cbnz	r0, 800fdf6 <_calloc_r+0x1e>
 800fdea:	2600      	movs	r6, #0
 800fdec:	4630      	mov	r0, r6
 800fdee:	bd70      	pop	{r4, r5, r6, pc}
 800fdf0:	220c      	movs	r2, #12
 800fdf2:	6002      	str	r2, [r0, #0]
 800fdf4:	e7f9      	b.n	800fdea <_calloc_r+0x12>
 800fdf6:	462a      	mov	r2, r5
 800fdf8:	4621      	mov	r1, r4
 800fdfa:	f7fc fc47 	bl	800c68c <memset>
 800fdfe:	e7f5      	b.n	800fdec <_calloc_r+0x14>

0800fe00 <__env_lock>:
 800fe00:	4801      	ldr	r0, [pc, #4]	@ (800fe08 <__env_lock+0x8>)
 800fe02:	f7f5 be34 	b.w	8005a6e <__retarget_lock_acquire_recursive>
 800fe06:	bf00      	nop
 800fe08:	2000859c 	.word	0x2000859c

0800fe0c <__env_unlock>:
 800fe0c:	4801      	ldr	r0, [pc, #4]	@ (800fe14 <__env_unlock+0x8>)
 800fe0e:	f7f5 be3a 	b.w	8005a86 <__retarget_lock_release_recursive>
 800fe12:	bf00      	nop
 800fe14:	2000859c 	.word	0x2000859c

0800fe18 <_realloc_r>:
 800fe18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fe1c:	4680      	mov	r8, r0
 800fe1e:	4615      	mov	r5, r2
 800fe20:	460c      	mov	r4, r1
 800fe22:	b921      	cbnz	r1, 800fe2e <_realloc_r+0x16>
 800fe24:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fe28:	4611      	mov	r1, r2
 800fe2a:	f7fa bcdd 	b.w	800a7e8 <_malloc_r>
 800fe2e:	b92a      	cbnz	r2, 800fe3c <_realloc_r+0x24>
 800fe30:	f7fe f8f2 	bl	800e018 <_free_r>
 800fe34:	2400      	movs	r4, #0
 800fe36:	4620      	mov	r0, r4
 800fe38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fe3c:	f000 f833 	bl	800fea6 <_malloc_usable_size_r>
 800fe40:	4285      	cmp	r5, r0
 800fe42:	4606      	mov	r6, r0
 800fe44:	d802      	bhi.n	800fe4c <_realloc_r+0x34>
 800fe46:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800fe4a:	d8f4      	bhi.n	800fe36 <_realloc_r+0x1e>
 800fe4c:	4629      	mov	r1, r5
 800fe4e:	4640      	mov	r0, r8
 800fe50:	f7fa fcca 	bl	800a7e8 <_malloc_r>
 800fe54:	4607      	mov	r7, r0
 800fe56:	2800      	cmp	r0, #0
 800fe58:	d0ec      	beq.n	800fe34 <_realloc_r+0x1c>
 800fe5a:	42b5      	cmp	r5, r6
 800fe5c:	462a      	mov	r2, r5
 800fe5e:	4621      	mov	r1, r4
 800fe60:	bf28      	it	cs
 800fe62:	4632      	movcs	r2, r6
 800fe64:	f7fd fa66 	bl	800d334 <memcpy>
 800fe68:	4621      	mov	r1, r4
 800fe6a:	4640      	mov	r0, r8
 800fe6c:	f7fe f8d4 	bl	800e018 <_free_r>
 800fe70:	463c      	mov	r4, r7
 800fe72:	e7e0      	b.n	800fe36 <_realloc_r+0x1e>

0800fe74 <fiprintf>:
 800fe74:	b40e      	push	{r1, r2, r3}
 800fe76:	b503      	push	{r0, r1, lr}
 800fe78:	4601      	mov	r1, r0
 800fe7a:	ab03      	add	r3, sp, #12
 800fe7c:	4805      	ldr	r0, [pc, #20]	@ (800fe94 <fiprintf+0x20>)
 800fe7e:	f853 2b04 	ldr.w	r2, [r3], #4
 800fe82:	6800      	ldr	r0, [r0, #0]
 800fe84:	9301      	str	r3, [sp, #4]
 800fe86:	f000 f83f 	bl	800ff08 <_vfiprintf_r>
 800fe8a:	b002      	add	sp, #8
 800fe8c:	f85d eb04 	ldr.w	lr, [sp], #4
 800fe90:	b003      	add	sp, #12
 800fe92:	4770      	bx	lr
 800fe94:	200001bc 	.word	0x200001bc

0800fe98 <abort>:
 800fe98:	b508      	push	{r3, lr}
 800fe9a:	2006      	movs	r0, #6
 800fe9c:	f000 fa08 	bl	80102b0 <raise>
 800fea0:	2001      	movs	r0, #1
 800fea2:	f7f5 fc9b 	bl	80057dc <_exit>

0800fea6 <_malloc_usable_size_r>:
 800fea6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800feaa:	1f18      	subs	r0, r3, #4
 800feac:	2b00      	cmp	r3, #0
 800feae:	bfbc      	itt	lt
 800feb0:	580b      	ldrlt	r3, [r1, r0]
 800feb2:	18c0      	addlt	r0, r0, r3
 800feb4:	4770      	bx	lr

0800feb6 <__sfputc_r>:
 800feb6:	6893      	ldr	r3, [r2, #8]
 800feb8:	3b01      	subs	r3, #1
 800feba:	2b00      	cmp	r3, #0
 800febc:	b410      	push	{r4}
 800febe:	6093      	str	r3, [r2, #8]
 800fec0:	da08      	bge.n	800fed4 <__sfputc_r+0x1e>
 800fec2:	6994      	ldr	r4, [r2, #24]
 800fec4:	42a3      	cmp	r3, r4
 800fec6:	db01      	blt.n	800fecc <__sfputc_r+0x16>
 800fec8:	290a      	cmp	r1, #10
 800feca:	d103      	bne.n	800fed4 <__sfputc_r+0x1e>
 800fecc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fed0:	f000 b932 	b.w	8010138 <__swbuf_r>
 800fed4:	6813      	ldr	r3, [r2, #0]
 800fed6:	1c58      	adds	r0, r3, #1
 800fed8:	6010      	str	r0, [r2, #0]
 800feda:	7019      	strb	r1, [r3, #0]
 800fedc:	4608      	mov	r0, r1
 800fede:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fee2:	4770      	bx	lr

0800fee4 <__sfputs_r>:
 800fee4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fee6:	4606      	mov	r6, r0
 800fee8:	460f      	mov	r7, r1
 800feea:	4614      	mov	r4, r2
 800feec:	18d5      	adds	r5, r2, r3
 800feee:	42ac      	cmp	r4, r5
 800fef0:	d101      	bne.n	800fef6 <__sfputs_r+0x12>
 800fef2:	2000      	movs	r0, #0
 800fef4:	e007      	b.n	800ff06 <__sfputs_r+0x22>
 800fef6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fefa:	463a      	mov	r2, r7
 800fefc:	4630      	mov	r0, r6
 800fefe:	f7ff ffda 	bl	800feb6 <__sfputc_r>
 800ff02:	1c43      	adds	r3, r0, #1
 800ff04:	d1f3      	bne.n	800feee <__sfputs_r+0xa>
 800ff06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800ff08 <_vfiprintf_r>:
 800ff08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ff0c:	460d      	mov	r5, r1
 800ff0e:	b09d      	sub	sp, #116	@ 0x74
 800ff10:	4614      	mov	r4, r2
 800ff12:	4698      	mov	r8, r3
 800ff14:	4606      	mov	r6, r0
 800ff16:	b118      	cbz	r0, 800ff20 <_vfiprintf_r+0x18>
 800ff18:	6a03      	ldr	r3, [r0, #32]
 800ff1a:	b90b      	cbnz	r3, 800ff20 <_vfiprintf_r+0x18>
 800ff1c:	f7fc fa84 	bl	800c428 <__sinit>
 800ff20:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ff22:	07d9      	lsls	r1, r3, #31
 800ff24:	d405      	bmi.n	800ff32 <_vfiprintf_r+0x2a>
 800ff26:	89ab      	ldrh	r3, [r5, #12]
 800ff28:	059a      	lsls	r2, r3, #22
 800ff2a:	d402      	bmi.n	800ff32 <_vfiprintf_r+0x2a>
 800ff2c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ff2e:	f7f5 fd9e 	bl	8005a6e <__retarget_lock_acquire_recursive>
 800ff32:	89ab      	ldrh	r3, [r5, #12]
 800ff34:	071b      	lsls	r3, r3, #28
 800ff36:	d501      	bpl.n	800ff3c <_vfiprintf_r+0x34>
 800ff38:	692b      	ldr	r3, [r5, #16]
 800ff3a:	b99b      	cbnz	r3, 800ff64 <_vfiprintf_r+0x5c>
 800ff3c:	4629      	mov	r1, r5
 800ff3e:	4630      	mov	r0, r6
 800ff40:	f000 f938 	bl	80101b4 <__swsetup_r>
 800ff44:	b170      	cbz	r0, 800ff64 <_vfiprintf_r+0x5c>
 800ff46:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ff48:	07dc      	lsls	r4, r3, #31
 800ff4a:	d504      	bpl.n	800ff56 <_vfiprintf_r+0x4e>
 800ff4c:	f04f 30ff 	mov.w	r0, #4294967295
 800ff50:	b01d      	add	sp, #116	@ 0x74
 800ff52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ff56:	89ab      	ldrh	r3, [r5, #12]
 800ff58:	0598      	lsls	r0, r3, #22
 800ff5a:	d4f7      	bmi.n	800ff4c <_vfiprintf_r+0x44>
 800ff5c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ff5e:	f7f5 fd92 	bl	8005a86 <__retarget_lock_release_recursive>
 800ff62:	e7f3      	b.n	800ff4c <_vfiprintf_r+0x44>
 800ff64:	2300      	movs	r3, #0
 800ff66:	9309      	str	r3, [sp, #36]	@ 0x24
 800ff68:	2320      	movs	r3, #32
 800ff6a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ff6e:	f8cd 800c 	str.w	r8, [sp, #12]
 800ff72:	2330      	movs	r3, #48	@ 0x30
 800ff74:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8010124 <_vfiprintf_r+0x21c>
 800ff78:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ff7c:	f04f 0901 	mov.w	r9, #1
 800ff80:	4623      	mov	r3, r4
 800ff82:	469a      	mov	sl, r3
 800ff84:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ff88:	b10a      	cbz	r2, 800ff8e <_vfiprintf_r+0x86>
 800ff8a:	2a25      	cmp	r2, #37	@ 0x25
 800ff8c:	d1f9      	bne.n	800ff82 <_vfiprintf_r+0x7a>
 800ff8e:	ebba 0b04 	subs.w	fp, sl, r4
 800ff92:	d00b      	beq.n	800ffac <_vfiprintf_r+0xa4>
 800ff94:	465b      	mov	r3, fp
 800ff96:	4622      	mov	r2, r4
 800ff98:	4629      	mov	r1, r5
 800ff9a:	4630      	mov	r0, r6
 800ff9c:	f7ff ffa2 	bl	800fee4 <__sfputs_r>
 800ffa0:	3001      	adds	r0, #1
 800ffa2:	f000 80a7 	beq.w	80100f4 <_vfiprintf_r+0x1ec>
 800ffa6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ffa8:	445a      	add	r2, fp
 800ffaa:	9209      	str	r2, [sp, #36]	@ 0x24
 800ffac:	f89a 3000 	ldrb.w	r3, [sl]
 800ffb0:	2b00      	cmp	r3, #0
 800ffb2:	f000 809f 	beq.w	80100f4 <_vfiprintf_r+0x1ec>
 800ffb6:	2300      	movs	r3, #0
 800ffb8:	f04f 32ff 	mov.w	r2, #4294967295
 800ffbc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ffc0:	f10a 0a01 	add.w	sl, sl, #1
 800ffc4:	9304      	str	r3, [sp, #16]
 800ffc6:	9307      	str	r3, [sp, #28]
 800ffc8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ffcc:	931a      	str	r3, [sp, #104]	@ 0x68
 800ffce:	4654      	mov	r4, sl
 800ffd0:	2205      	movs	r2, #5
 800ffd2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ffd6:	4853      	ldr	r0, [pc, #332]	@ (8010124 <_vfiprintf_r+0x21c>)
 800ffd8:	f7f0 f90a 	bl	80001f0 <memchr>
 800ffdc:	9a04      	ldr	r2, [sp, #16]
 800ffde:	b9d8      	cbnz	r0, 8010018 <_vfiprintf_r+0x110>
 800ffe0:	06d1      	lsls	r1, r2, #27
 800ffe2:	bf44      	itt	mi
 800ffe4:	2320      	movmi	r3, #32
 800ffe6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ffea:	0713      	lsls	r3, r2, #28
 800ffec:	bf44      	itt	mi
 800ffee:	232b      	movmi	r3, #43	@ 0x2b
 800fff0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800fff4:	f89a 3000 	ldrb.w	r3, [sl]
 800fff8:	2b2a      	cmp	r3, #42	@ 0x2a
 800fffa:	d015      	beq.n	8010028 <_vfiprintf_r+0x120>
 800fffc:	9a07      	ldr	r2, [sp, #28]
 800fffe:	4654      	mov	r4, sl
 8010000:	2000      	movs	r0, #0
 8010002:	f04f 0c0a 	mov.w	ip, #10
 8010006:	4621      	mov	r1, r4
 8010008:	f811 3b01 	ldrb.w	r3, [r1], #1
 801000c:	3b30      	subs	r3, #48	@ 0x30
 801000e:	2b09      	cmp	r3, #9
 8010010:	d94b      	bls.n	80100aa <_vfiprintf_r+0x1a2>
 8010012:	b1b0      	cbz	r0, 8010042 <_vfiprintf_r+0x13a>
 8010014:	9207      	str	r2, [sp, #28]
 8010016:	e014      	b.n	8010042 <_vfiprintf_r+0x13a>
 8010018:	eba0 0308 	sub.w	r3, r0, r8
 801001c:	fa09 f303 	lsl.w	r3, r9, r3
 8010020:	4313      	orrs	r3, r2
 8010022:	9304      	str	r3, [sp, #16]
 8010024:	46a2      	mov	sl, r4
 8010026:	e7d2      	b.n	800ffce <_vfiprintf_r+0xc6>
 8010028:	9b03      	ldr	r3, [sp, #12]
 801002a:	1d19      	adds	r1, r3, #4
 801002c:	681b      	ldr	r3, [r3, #0]
 801002e:	9103      	str	r1, [sp, #12]
 8010030:	2b00      	cmp	r3, #0
 8010032:	bfbb      	ittet	lt
 8010034:	425b      	neglt	r3, r3
 8010036:	f042 0202 	orrlt.w	r2, r2, #2
 801003a:	9307      	strge	r3, [sp, #28]
 801003c:	9307      	strlt	r3, [sp, #28]
 801003e:	bfb8      	it	lt
 8010040:	9204      	strlt	r2, [sp, #16]
 8010042:	7823      	ldrb	r3, [r4, #0]
 8010044:	2b2e      	cmp	r3, #46	@ 0x2e
 8010046:	d10a      	bne.n	801005e <_vfiprintf_r+0x156>
 8010048:	7863      	ldrb	r3, [r4, #1]
 801004a:	2b2a      	cmp	r3, #42	@ 0x2a
 801004c:	d132      	bne.n	80100b4 <_vfiprintf_r+0x1ac>
 801004e:	9b03      	ldr	r3, [sp, #12]
 8010050:	1d1a      	adds	r2, r3, #4
 8010052:	681b      	ldr	r3, [r3, #0]
 8010054:	9203      	str	r2, [sp, #12]
 8010056:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801005a:	3402      	adds	r4, #2
 801005c:	9305      	str	r3, [sp, #20]
 801005e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8010134 <_vfiprintf_r+0x22c>
 8010062:	7821      	ldrb	r1, [r4, #0]
 8010064:	2203      	movs	r2, #3
 8010066:	4650      	mov	r0, sl
 8010068:	f7f0 f8c2 	bl	80001f0 <memchr>
 801006c:	b138      	cbz	r0, 801007e <_vfiprintf_r+0x176>
 801006e:	9b04      	ldr	r3, [sp, #16]
 8010070:	eba0 000a 	sub.w	r0, r0, sl
 8010074:	2240      	movs	r2, #64	@ 0x40
 8010076:	4082      	lsls	r2, r0
 8010078:	4313      	orrs	r3, r2
 801007a:	3401      	adds	r4, #1
 801007c:	9304      	str	r3, [sp, #16]
 801007e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010082:	4829      	ldr	r0, [pc, #164]	@ (8010128 <_vfiprintf_r+0x220>)
 8010084:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8010088:	2206      	movs	r2, #6
 801008a:	f7f0 f8b1 	bl	80001f0 <memchr>
 801008e:	2800      	cmp	r0, #0
 8010090:	d03f      	beq.n	8010112 <_vfiprintf_r+0x20a>
 8010092:	4b26      	ldr	r3, [pc, #152]	@ (801012c <_vfiprintf_r+0x224>)
 8010094:	bb1b      	cbnz	r3, 80100de <_vfiprintf_r+0x1d6>
 8010096:	9b03      	ldr	r3, [sp, #12]
 8010098:	3307      	adds	r3, #7
 801009a:	f023 0307 	bic.w	r3, r3, #7
 801009e:	3308      	adds	r3, #8
 80100a0:	9303      	str	r3, [sp, #12]
 80100a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80100a4:	443b      	add	r3, r7
 80100a6:	9309      	str	r3, [sp, #36]	@ 0x24
 80100a8:	e76a      	b.n	800ff80 <_vfiprintf_r+0x78>
 80100aa:	fb0c 3202 	mla	r2, ip, r2, r3
 80100ae:	460c      	mov	r4, r1
 80100b0:	2001      	movs	r0, #1
 80100b2:	e7a8      	b.n	8010006 <_vfiprintf_r+0xfe>
 80100b4:	2300      	movs	r3, #0
 80100b6:	3401      	adds	r4, #1
 80100b8:	9305      	str	r3, [sp, #20]
 80100ba:	4619      	mov	r1, r3
 80100bc:	f04f 0c0a 	mov.w	ip, #10
 80100c0:	4620      	mov	r0, r4
 80100c2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80100c6:	3a30      	subs	r2, #48	@ 0x30
 80100c8:	2a09      	cmp	r2, #9
 80100ca:	d903      	bls.n	80100d4 <_vfiprintf_r+0x1cc>
 80100cc:	2b00      	cmp	r3, #0
 80100ce:	d0c6      	beq.n	801005e <_vfiprintf_r+0x156>
 80100d0:	9105      	str	r1, [sp, #20]
 80100d2:	e7c4      	b.n	801005e <_vfiprintf_r+0x156>
 80100d4:	fb0c 2101 	mla	r1, ip, r1, r2
 80100d8:	4604      	mov	r4, r0
 80100da:	2301      	movs	r3, #1
 80100dc:	e7f0      	b.n	80100c0 <_vfiprintf_r+0x1b8>
 80100de:	ab03      	add	r3, sp, #12
 80100e0:	9300      	str	r3, [sp, #0]
 80100e2:	462a      	mov	r2, r5
 80100e4:	4b12      	ldr	r3, [pc, #72]	@ (8010130 <_vfiprintf_r+0x228>)
 80100e6:	a904      	add	r1, sp, #16
 80100e8:	4630      	mov	r0, r6
 80100ea:	f7fb fb45 	bl	800b778 <_printf_float>
 80100ee:	4607      	mov	r7, r0
 80100f0:	1c78      	adds	r0, r7, #1
 80100f2:	d1d6      	bne.n	80100a2 <_vfiprintf_r+0x19a>
 80100f4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80100f6:	07d9      	lsls	r1, r3, #31
 80100f8:	d405      	bmi.n	8010106 <_vfiprintf_r+0x1fe>
 80100fa:	89ab      	ldrh	r3, [r5, #12]
 80100fc:	059a      	lsls	r2, r3, #22
 80100fe:	d402      	bmi.n	8010106 <_vfiprintf_r+0x1fe>
 8010100:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010102:	f7f5 fcc0 	bl	8005a86 <__retarget_lock_release_recursive>
 8010106:	89ab      	ldrh	r3, [r5, #12]
 8010108:	065b      	lsls	r3, r3, #25
 801010a:	f53f af1f 	bmi.w	800ff4c <_vfiprintf_r+0x44>
 801010e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010110:	e71e      	b.n	800ff50 <_vfiprintf_r+0x48>
 8010112:	ab03      	add	r3, sp, #12
 8010114:	9300      	str	r3, [sp, #0]
 8010116:	462a      	mov	r2, r5
 8010118:	4b05      	ldr	r3, [pc, #20]	@ (8010130 <_vfiprintf_r+0x228>)
 801011a:	a904      	add	r1, sp, #16
 801011c:	4630      	mov	r0, r6
 801011e:	f7fb fdc3 	bl	800bca8 <_printf_i>
 8010122:	e7e4      	b.n	80100ee <_vfiprintf_r+0x1e6>
 8010124:	080130e8 	.word	0x080130e8
 8010128:	080130f2 	.word	0x080130f2
 801012c:	0800b779 	.word	0x0800b779
 8010130:	0800fee5 	.word	0x0800fee5
 8010134:	080130ee 	.word	0x080130ee

08010138 <__swbuf_r>:
 8010138:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801013a:	460e      	mov	r6, r1
 801013c:	4614      	mov	r4, r2
 801013e:	4605      	mov	r5, r0
 8010140:	b118      	cbz	r0, 801014a <__swbuf_r+0x12>
 8010142:	6a03      	ldr	r3, [r0, #32]
 8010144:	b90b      	cbnz	r3, 801014a <__swbuf_r+0x12>
 8010146:	f7fc f96f 	bl	800c428 <__sinit>
 801014a:	69a3      	ldr	r3, [r4, #24]
 801014c:	60a3      	str	r3, [r4, #8]
 801014e:	89a3      	ldrh	r3, [r4, #12]
 8010150:	071a      	lsls	r2, r3, #28
 8010152:	d501      	bpl.n	8010158 <__swbuf_r+0x20>
 8010154:	6923      	ldr	r3, [r4, #16]
 8010156:	b943      	cbnz	r3, 801016a <__swbuf_r+0x32>
 8010158:	4621      	mov	r1, r4
 801015a:	4628      	mov	r0, r5
 801015c:	f000 f82a 	bl	80101b4 <__swsetup_r>
 8010160:	b118      	cbz	r0, 801016a <__swbuf_r+0x32>
 8010162:	f04f 37ff 	mov.w	r7, #4294967295
 8010166:	4638      	mov	r0, r7
 8010168:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801016a:	6823      	ldr	r3, [r4, #0]
 801016c:	6922      	ldr	r2, [r4, #16]
 801016e:	1a98      	subs	r0, r3, r2
 8010170:	6963      	ldr	r3, [r4, #20]
 8010172:	b2f6      	uxtb	r6, r6
 8010174:	4283      	cmp	r3, r0
 8010176:	4637      	mov	r7, r6
 8010178:	dc05      	bgt.n	8010186 <__swbuf_r+0x4e>
 801017a:	4621      	mov	r1, r4
 801017c:	4628      	mov	r0, r5
 801017e:	f7ff fd53 	bl	800fc28 <_fflush_r>
 8010182:	2800      	cmp	r0, #0
 8010184:	d1ed      	bne.n	8010162 <__swbuf_r+0x2a>
 8010186:	68a3      	ldr	r3, [r4, #8]
 8010188:	3b01      	subs	r3, #1
 801018a:	60a3      	str	r3, [r4, #8]
 801018c:	6823      	ldr	r3, [r4, #0]
 801018e:	1c5a      	adds	r2, r3, #1
 8010190:	6022      	str	r2, [r4, #0]
 8010192:	701e      	strb	r6, [r3, #0]
 8010194:	6962      	ldr	r2, [r4, #20]
 8010196:	1c43      	adds	r3, r0, #1
 8010198:	429a      	cmp	r2, r3
 801019a:	d004      	beq.n	80101a6 <__swbuf_r+0x6e>
 801019c:	89a3      	ldrh	r3, [r4, #12]
 801019e:	07db      	lsls	r3, r3, #31
 80101a0:	d5e1      	bpl.n	8010166 <__swbuf_r+0x2e>
 80101a2:	2e0a      	cmp	r6, #10
 80101a4:	d1df      	bne.n	8010166 <__swbuf_r+0x2e>
 80101a6:	4621      	mov	r1, r4
 80101a8:	4628      	mov	r0, r5
 80101aa:	f7ff fd3d 	bl	800fc28 <_fflush_r>
 80101ae:	2800      	cmp	r0, #0
 80101b0:	d0d9      	beq.n	8010166 <__swbuf_r+0x2e>
 80101b2:	e7d6      	b.n	8010162 <__swbuf_r+0x2a>

080101b4 <__swsetup_r>:
 80101b4:	b538      	push	{r3, r4, r5, lr}
 80101b6:	4b29      	ldr	r3, [pc, #164]	@ (801025c <__swsetup_r+0xa8>)
 80101b8:	4605      	mov	r5, r0
 80101ba:	6818      	ldr	r0, [r3, #0]
 80101bc:	460c      	mov	r4, r1
 80101be:	b118      	cbz	r0, 80101c8 <__swsetup_r+0x14>
 80101c0:	6a03      	ldr	r3, [r0, #32]
 80101c2:	b90b      	cbnz	r3, 80101c8 <__swsetup_r+0x14>
 80101c4:	f7fc f930 	bl	800c428 <__sinit>
 80101c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80101cc:	0719      	lsls	r1, r3, #28
 80101ce:	d422      	bmi.n	8010216 <__swsetup_r+0x62>
 80101d0:	06da      	lsls	r2, r3, #27
 80101d2:	d407      	bmi.n	80101e4 <__swsetup_r+0x30>
 80101d4:	2209      	movs	r2, #9
 80101d6:	602a      	str	r2, [r5, #0]
 80101d8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80101dc:	81a3      	strh	r3, [r4, #12]
 80101de:	f04f 30ff 	mov.w	r0, #4294967295
 80101e2:	e033      	b.n	801024c <__swsetup_r+0x98>
 80101e4:	0758      	lsls	r0, r3, #29
 80101e6:	d512      	bpl.n	801020e <__swsetup_r+0x5a>
 80101e8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80101ea:	b141      	cbz	r1, 80101fe <__swsetup_r+0x4a>
 80101ec:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80101f0:	4299      	cmp	r1, r3
 80101f2:	d002      	beq.n	80101fa <__swsetup_r+0x46>
 80101f4:	4628      	mov	r0, r5
 80101f6:	f7fd ff0f 	bl	800e018 <_free_r>
 80101fa:	2300      	movs	r3, #0
 80101fc:	6363      	str	r3, [r4, #52]	@ 0x34
 80101fe:	89a3      	ldrh	r3, [r4, #12]
 8010200:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8010204:	81a3      	strh	r3, [r4, #12]
 8010206:	2300      	movs	r3, #0
 8010208:	6063      	str	r3, [r4, #4]
 801020a:	6923      	ldr	r3, [r4, #16]
 801020c:	6023      	str	r3, [r4, #0]
 801020e:	89a3      	ldrh	r3, [r4, #12]
 8010210:	f043 0308 	orr.w	r3, r3, #8
 8010214:	81a3      	strh	r3, [r4, #12]
 8010216:	6923      	ldr	r3, [r4, #16]
 8010218:	b94b      	cbnz	r3, 801022e <__swsetup_r+0x7a>
 801021a:	89a3      	ldrh	r3, [r4, #12]
 801021c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8010220:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010224:	d003      	beq.n	801022e <__swsetup_r+0x7a>
 8010226:	4621      	mov	r1, r4
 8010228:	4628      	mov	r0, r5
 801022a:	f000 f883 	bl	8010334 <__smakebuf_r>
 801022e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010232:	f013 0201 	ands.w	r2, r3, #1
 8010236:	d00a      	beq.n	801024e <__swsetup_r+0x9a>
 8010238:	2200      	movs	r2, #0
 801023a:	60a2      	str	r2, [r4, #8]
 801023c:	6962      	ldr	r2, [r4, #20]
 801023e:	4252      	negs	r2, r2
 8010240:	61a2      	str	r2, [r4, #24]
 8010242:	6922      	ldr	r2, [r4, #16]
 8010244:	b942      	cbnz	r2, 8010258 <__swsetup_r+0xa4>
 8010246:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801024a:	d1c5      	bne.n	80101d8 <__swsetup_r+0x24>
 801024c:	bd38      	pop	{r3, r4, r5, pc}
 801024e:	0799      	lsls	r1, r3, #30
 8010250:	bf58      	it	pl
 8010252:	6962      	ldrpl	r2, [r4, #20]
 8010254:	60a2      	str	r2, [r4, #8]
 8010256:	e7f4      	b.n	8010242 <__swsetup_r+0x8e>
 8010258:	2000      	movs	r0, #0
 801025a:	e7f7      	b.n	801024c <__swsetup_r+0x98>
 801025c:	200001bc 	.word	0x200001bc

08010260 <_raise_r>:
 8010260:	291f      	cmp	r1, #31
 8010262:	b538      	push	{r3, r4, r5, lr}
 8010264:	4605      	mov	r5, r0
 8010266:	460c      	mov	r4, r1
 8010268:	d904      	bls.n	8010274 <_raise_r+0x14>
 801026a:	2316      	movs	r3, #22
 801026c:	6003      	str	r3, [r0, #0]
 801026e:	f04f 30ff 	mov.w	r0, #4294967295
 8010272:	bd38      	pop	{r3, r4, r5, pc}
 8010274:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8010276:	b112      	cbz	r2, 801027e <_raise_r+0x1e>
 8010278:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801027c:	b94b      	cbnz	r3, 8010292 <_raise_r+0x32>
 801027e:	4628      	mov	r0, r5
 8010280:	f000 f830 	bl	80102e4 <_getpid_r>
 8010284:	4622      	mov	r2, r4
 8010286:	4601      	mov	r1, r0
 8010288:	4628      	mov	r0, r5
 801028a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801028e:	f000 b817 	b.w	80102c0 <_kill_r>
 8010292:	2b01      	cmp	r3, #1
 8010294:	d00a      	beq.n	80102ac <_raise_r+0x4c>
 8010296:	1c59      	adds	r1, r3, #1
 8010298:	d103      	bne.n	80102a2 <_raise_r+0x42>
 801029a:	2316      	movs	r3, #22
 801029c:	6003      	str	r3, [r0, #0]
 801029e:	2001      	movs	r0, #1
 80102a0:	e7e7      	b.n	8010272 <_raise_r+0x12>
 80102a2:	2100      	movs	r1, #0
 80102a4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80102a8:	4620      	mov	r0, r4
 80102aa:	4798      	blx	r3
 80102ac:	2000      	movs	r0, #0
 80102ae:	e7e0      	b.n	8010272 <_raise_r+0x12>

080102b0 <raise>:
 80102b0:	4b02      	ldr	r3, [pc, #8]	@ (80102bc <raise+0xc>)
 80102b2:	4601      	mov	r1, r0
 80102b4:	6818      	ldr	r0, [r3, #0]
 80102b6:	f7ff bfd3 	b.w	8010260 <_raise_r>
 80102ba:	bf00      	nop
 80102bc:	200001bc 	.word	0x200001bc

080102c0 <_kill_r>:
 80102c0:	b538      	push	{r3, r4, r5, lr}
 80102c2:	4d07      	ldr	r5, [pc, #28]	@ (80102e0 <_kill_r+0x20>)
 80102c4:	2300      	movs	r3, #0
 80102c6:	4604      	mov	r4, r0
 80102c8:	4608      	mov	r0, r1
 80102ca:	4611      	mov	r1, r2
 80102cc:	602b      	str	r3, [r5, #0]
 80102ce:	f7f5 fa7d 	bl	80057cc <_kill>
 80102d2:	1c43      	adds	r3, r0, #1
 80102d4:	d102      	bne.n	80102dc <_kill_r+0x1c>
 80102d6:	682b      	ldr	r3, [r5, #0]
 80102d8:	b103      	cbz	r3, 80102dc <_kill_r+0x1c>
 80102da:	6023      	str	r3, [r4, #0]
 80102dc:	bd38      	pop	{r3, r4, r5, pc}
 80102de:	bf00      	nop
 80102e0:	20009840 	.word	0x20009840

080102e4 <_getpid_r>:
 80102e4:	f7f5 ba70 	b.w	80057c8 <_getpid>

080102e8 <__swhatbuf_r>:
 80102e8:	b570      	push	{r4, r5, r6, lr}
 80102ea:	460c      	mov	r4, r1
 80102ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80102f0:	2900      	cmp	r1, #0
 80102f2:	b096      	sub	sp, #88	@ 0x58
 80102f4:	4615      	mov	r5, r2
 80102f6:	461e      	mov	r6, r3
 80102f8:	da0d      	bge.n	8010316 <__swhatbuf_r+0x2e>
 80102fa:	89a3      	ldrh	r3, [r4, #12]
 80102fc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8010300:	f04f 0100 	mov.w	r1, #0
 8010304:	bf14      	ite	ne
 8010306:	2340      	movne	r3, #64	@ 0x40
 8010308:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801030c:	2000      	movs	r0, #0
 801030e:	6031      	str	r1, [r6, #0]
 8010310:	602b      	str	r3, [r5, #0]
 8010312:	b016      	add	sp, #88	@ 0x58
 8010314:	bd70      	pop	{r4, r5, r6, pc}
 8010316:	466a      	mov	r2, sp
 8010318:	f000 f848 	bl	80103ac <_fstat_r>
 801031c:	2800      	cmp	r0, #0
 801031e:	dbec      	blt.n	80102fa <__swhatbuf_r+0x12>
 8010320:	9901      	ldr	r1, [sp, #4]
 8010322:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8010326:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801032a:	4259      	negs	r1, r3
 801032c:	4159      	adcs	r1, r3
 801032e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010332:	e7eb      	b.n	801030c <__swhatbuf_r+0x24>

08010334 <__smakebuf_r>:
 8010334:	898b      	ldrh	r3, [r1, #12]
 8010336:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010338:	079d      	lsls	r5, r3, #30
 801033a:	4606      	mov	r6, r0
 801033c:	460c      	mov	r4, r1
 801033e:	d507      	bpl.n	8010350 <__smakebuf_r+0x1c>
 8010340:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8010344:	6023      	str	r3, [r4, #0]
 8010346:	6123      	str	r3, [r4, #16]
 8010348:	2301      	movs	r3, #1
 801034a:	6163      	str	r3, [r4, #20]
 801034c:	b003      	add	sp, #12
 801034e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010350:	ab01      	add	r3, sp, #4
 8010352:	466a      	mov	r2, sp
 8010354:	f7ff ffc8 	bl	80102e8 <__swhatbuf_r>
 8010358:	9f00      	ldr	r7, [sp, #0]
 801035a:	4605      	mov	r5, r0
 801035c:	4639      	mov	r1, r7
 801035e:	4630      	mov	r0, r6
 8010360:	f7fa fa42 	bl	800a7e8 <_malloc_r>
 8010364:	b948      	cbnz	r0, 801037a <__smakebuf_r+0x46>
 8010366:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801036a:	059a      	lsls	r2, r3, #22
 801036c:	d4ee      	bmi.n	801034c <__smakebuf_r+0x18>
 801036e:	f023 0303 	bic.w	r3, r3, #3
 8010372:	f043 0302 	orr.w	r3, r3, #2
 8010376:	81a3      	strh	r3, [r4, #12]
 8010378:	e7e2      	b.n	8010340 <__smakebuf_r+0xc>
 801037a:	89a3      	ldrh	r3, [r4, #12]
 801037c:	6020      	str	r0, [r4, #0]
 801037e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010382:	81a3      	strh	r3, [r4, #12]
 8010384:	9b01      	ldr	r3, [sp, #4]
 8010386:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801038a:	b15b      	cbz	r3, 80103a4 <__smakebuf_r+0x70>
 801038c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010390:	4630      	mov	r0, r6
 8010392:	f000 f81d 	bl	80103d0 <_isatty_r>
 8010396:	b128      	cbz	r0, 80103a4 <__smakebuf_r+0x70>
 8010398:	89a3      	ldrh	r3, [r4, #12]
 801039a:	f023 0303 	bic.w	r3, r3, #3
 801039e:	f043 0301 	orr.w	r3, r3, #1
 80103a2:	81a3      	strh	r3, [r4, #12]
 80103a4:	89a3      	ldrh	r3, [r4, #12]
 80103a6:	431d      	orrs	r5, r3
 80103a8:	81a5      	strh	r5, [r4, #12]
 80103aa:	e7cf      	b.n	801034c <__smakebuf_r+0x18>

080103ac <_fstat_r>:
 80103ac:	b538      	push	{r3, r4, r5, lr}
 80103ae:	4d07      	ldr	r5, [pc, #28]	@ (80103cc <_fstat_r+0x20>)
 80103b0:	2300      	movs	r3, #0
 80103b2:	4604      	mov	r4, r0
 80103b4:	4608      	mov	r0, r1
 80103b6:	4611      	mov	r1, r2
 80103b8:	602b      	str	r3, [r5, #0]
 80103ba:	f7f5 fa34 	bl	8005826 <_fstat>
 80103be:	1c43      	adds	r3, r0, #1
 80103c0:	d102      	bne.n	80103c8 <_fstat_r+0x1c>
 80103c2:	682b      	ldr	r3, [r5, #0]
 80103c4:	b103      	cbz	r3, 80103c8 <_fstat_r+0x1c>
 80103c6:	6023      	str	r3, [r4, #0]
 80103c8:	bd38      	pop	{r3, r4, r5, pc}
 80103ca:	bf00      	nop
 80103cc:	20009840 	.word	0x20009840

080103d0 <_isatty_r>:
 80103d0:	b538      	push	{r3, r4, r5, lr}
 80103d2:	4d06      	ldr	r5, [pc, #24]	@ (80103ec <_isatty_r+0x1c>)
 80103d4:	2300      	movs	r3, #0
 80103d6:	4604      	mov	r4, r0
 80103d8:	4608      	mov	r0, r1
 80103da:	602b      	str	r3, [r5, #0]
 80103dc:	f7f5 fa28 	bl	8005830 <_isatty>
 80103e0:	1c43      	adds	r3, r0, #1
 80103e2:	d102      	bne.n	80103ea <_isatty_r+0x1a>
 80103e4:	682b      	ldr	r3, [r5, #0]
 80103e6:	b103      	cbz	r3, 80103ea <_isatty_r+0x1a>
 80103e8:	6023      	str	r3, [r4, #0]
 80103ea:	bd38      	pop	{r3, r4, r5, pc}
 80103ec:	20009840 	.word	0x20009840

080103f0 <floor>:
 80103f0:	ec51 0b10 	vmov	r0, r1, d0
 80103f4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80103f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80103fc:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 8010400:	2e13      	cmp	r6, #19
 8010402:	460c      	mov	r4, r1
 8010404:	4605      	mov	r5, r0
 8010406:	4680      	mov	r8, r0
 8010408:	dc34      	bgt.n	8010474 <floor+0x84>
 801040a:	2e00      	cmp	r6, #0
 801040c:	da17      	bge.n	801043e <floor+0x4e>
 801040e:	a332      	add	r3, pc, #200	@ (adr r3, 80104d8 <floor+0xe8>)
 8010410:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010414:	f7ef ff4a 	bl	80002ac <__adddf3>
 8010418:	2200      	movs	r2, #0
 801041a:	2300      	movs	r3, #0
 801041c:	f7f0 fb8c 	bl	8000b38 <__aeabi_dcmpgt>
 8010420:	b150      	cbz	r0, 8010438 <floor+0x48>
 8010422:	2c00      	cmp	r4, #0
 8010424:	da55      	bge.n	80104d2 <floor+0xe2>
 8010426:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 801042a:	432c      	orrs	r4, r5
 801042c:	2500      	movs	r5, #0
 801042e:	42ac      	cmp	r4, r5
 8010430:	4c2b      	ldr	r4, [pc, #172]	@ (80104e0 <floor+0xf0>)
 8010432:	bf08      	it	eq
 8010434:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 8010438:	4621      	mov	r1, r4
 801043a:	4628      	mov	r0, r5
 801043c:	e023      	b.n	8010486 <floor+0x96>
 801043e:	4f29      	ldr	r7, [pc, #164]	@ (80104e4 <floor+0xf4>)
 8010440:	4137      	asrs	r7, r6
 8010442:	ea01 0307 	and.w	r3, r1, r7
 8010446:	4303      	orrs	r3, r0
 8010448:	d01d      	beq.n	8010486 <floor+0x96>
 801044a:	a323      	add	r3, pc, #140	@ (adr r3, 80104d8 <floor+0xe8>)
 801044c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010450:	f7ef ff2c 	bl	80002ac <__adddf3>
 8010454:	2200      	movs	r2, #0
 8010456:	2300      	movs	r3, #0
 8010458:	f7f0 fb6e 	bl	8000b38 <__aeabi_dcmpgt>
 801045c:	2800      	cmp	r0, #0
 801045e:	d0eb      	beq.n	8010438 <floor+0x48>
 8010460:	2c00      	cmp	r4, #0
 8010462:	bfbe      	ittt	lt
 8010464:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 8010468:	4133      	asrlt	r3, r6
 801046a:	18e4      	addlt	r4, r4, r3
 801046c:	ea24 0407 	bic.w	r4, r4, r7
 8010470:	2500      	movs	r5, #0
 8010472:	e7e1      	b.n	8010438 <floor+0x48>
 8010474:	2e33      	cmp	r6, #51	@ 0x33
 8010476:	dd0a      	ble.n	801048e <floor+0x9e>
 8010478:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 801047c:	d103      	bne.n	8010486 <floor+0x96>
 801047e:	4602      	mov	r2, r0
 8010480:	460b      	mov	r3, r1
 8010482:	f7ef ff13 	bl	80002ac <__adddf3>
 8010486:	ec41 0b10 	vmov	d0, r0, r1
 801048a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801048e:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 8010492:	f04f 37ff 	mov.w	r7, #4294967295
 8010496:	40df      	lsrs	r7, r3
 8010498:	4207      	tst	r7, r0
 801049a:	d0f4      	beq.n	8010486 <floor+0x96>
 801049c:	a30e      	add	r3, pc, #56	@ (adr r3, 80104d8 <floor+0xe8>)
 801049e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80104a2:	f7ef ff03 	bl	80002ac <__adddf3>
 80104a6:	2200      	movs	r2, #0
 80104a8:	2300      	movs	r3, #0
 80104aa:	f7f0 fb45 	bl	8000b38 <__aeabi_dcmpgt>
 80104ae:	2800      	cmp	r0, #0
 80104b0:	d0c2      	beq.n	8010438 <floor+0x48>
 80104b2:	2c00      	cmp	r4, #0
 80104b4:	da0a      	bge.n	80104cc <floor+0xdc>
 80104b6:	2e14      	cmp	r6, #20
 80104b8:	d101      	bne.n	80104be <floor+0xce>
 80104ba:	3401      	adds	r4, #1
 80104bc:	e006      	b.n	80104cc <floor+0xdc>
 80104be:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 80104c2:	2301      	movs	r3, #1
 80104c4:	40b3      	lsls	r3, r6
 80104c6:	441d      	add	r5, r3
 80104c8:	4545      	cmp	r5, r8
 80104ca:	d3f6      	bcc.n	80104ba <floor+0xca>
 80104cc:	ea25 0507 	bic.w	r5, r5, r7
 80104d0:	e7b2      	b.n	8010438 <floor+0x48>
 80104d2:	2500      	movs	r5, #0
 80104d4:	462c      	mov	r4, r5
 80104d6:	e7af      	b.n	8010438 <floor+0x48>
 80104d8:	8800759c 	.word	0x8800759c
 80104dc:	7e37e43c 	.word	0x7e37e43c
 80104e0:	bff00000 	.word	0xbff00000
 80104e4:	000fffff 	.word	0x000fffff

080104e8 <round>:
 80104e8:	ec51 0b10 	vmov	r0, r1, d0
 80104ec:	b570      	push	{r4, r5, r6, lr}
 80104ee:	f3c1 540a 	ubfx	r4, r1, #20, #11
 80104f2:	f2a4 32ff 	subw	r2, r4, #1023	@ 0x3ff
 80104f6:	2a13      	cmp	r2, #19
 80104f8:	460b      	mov	r3, r1
 80104fa:	4605      	mov	r5, r0
 80104fc:	dc1b      	bgt.n	8010536 <round+0x4e>
 80104fe:	2a00      	cmp	r2, #0
 8010500:	da0b      	bge.n	801051a <round+0x32>
 8010502:	f001 4300 	and.w	r3, r1, #2147483648	@ 0x80000000
 8010506:	3201      	adds	r2, #1
 8010508:	bf04      	itt	eq
 801050a:	f043 537f 	orreq.w	r3, r3, #1069547520	@ 0x3fc00000
 801050e:	f443 1340 	orreq.w	r3, r3, #3145728	@ 0x300000
 8010512:	2200      	movs	r2, #0
 8010514:	4619      	mov	r1, r3
 8010516:	4610      	mov	r0, r2
 8010518:	e015      	b.n	8010546 <round+0x5e>
 801051a:	4c15      	ldr	r4, [pc, #84]	@ (8010570 <round+0x88>)
 801051c:	4114      	asrs	r4, r2
 801051e:	ea04 0601 	and.w	r6, r4, r1
 8010522:	4306      	orrs	r6, r0
 8010524:	d00f      	beq.n	8010546 <round+0x5e>
 8010526:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 801052a:	fa41 f202 	asr.w	r2, r1, r2
 801052e:	4413      	add	r3, r2
 8010530:	ea23 0304 	bic.w	r3, r3, r4
 8010534:	e7ed      	b.n	8010512 <round+0x2a>
 8010536:	2a33      	cmp	r2, #51	@ 0x33
 8010538:	dd08      	ble.n	801054c <round+0x64>
 801053a:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 801053e:	d102      	bne.n	8010546 <round+0x5e>
 8010540:	4602      	mov	r2, r0
 8010542:	f7ef feb3 	bl	80002ac <__adddf3>
 8010546:	ec41 0b10 	vmov	d0, r0, r1
 801054a:	bd70      	pop	{r4, r5, r6, pc}
 801054c:	f2a4 4613 	subw	r6, r4, #1043	@ 0x413
 8010550:	f04f 34ff 	mov.w	r4, #4294967295
 8010554:	40f4      	lsrs	r4, r6
 8010556:	4204      	tst	r4, r0
 8010558:	d0f5      	beq.n	8010546 <round+0x5e>
 801055a:	f1c2 0133 	rsb	r1, r2, #51	@ 0x33
 801055e:	2201      	movs	r2, #1
 8010560:	408a      	lsls	r2, r1
 8010562:	1952      	adds	r2, r2, r5
 8010564:	bf28      	it	cs
 8010566:	3301      	addcs	r3, #1
 8010568:	ea22 0204 	bic.w	r2, r2, r4
 801056c:	e7d2      	b.n	8010514 <round+0x2c>
 801056e:	bf00      	nop
 8010570:	000fffff 	.word	0x000fffff

08010574 <_init>:
 8010574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010576:	bf00      	nop
 8010578:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801057a:	bc08      	pop	{r3}
 801057c:	469e      	mov	lr, r3
 801057e:	4770      	bx	lr

08010580 <_fini>:
 8010580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010582:	bf00      	nop
 8010584:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010586:	bc08      	pop	{r3}
 8010588:	469e      	mov	lr, r3
 801058a:	4770      	bx	lr
