
test-F303.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c61c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000011a4  0800c7b0  0800c7b0  0000d7b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d954  0800d954  0000f240  2**0
                  CONTENTS
  4 .ARM          00000008  0800d954  0800d954  0000e954  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d95c  0800d95c  0000f240  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d95c  0800d95c  0000e95c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d960  0800d960  0000e960  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000240  20000000  0800d964  0000f000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000f240  2**0
                  CONTENTS
 10 .bss          000049ec  20000240  20000240  0000f240  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  20004c2c  20004c2c  0000f240  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000f240  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002a311  00000000  00000000  0000f270  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005acc  00000000  00000000  00039581  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loclists 0000dcca  00000000  00000000  0003f04d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001940  00000000  00000000  0004cd18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000018fc  00000000  00000000  0004e658  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00006827  00000000  00000000  0004ff54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000299ef  00000000  00000000  0005677b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000cbe18  00000000  00000000  0008016a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  0014bf82  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00005f98  00000000  00000000  0014bfc8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000048  00000000  00000000  00151f60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000240 	.word	0x20000240
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c794 	.word	0x0800c794

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000244 	.word	0x20000244
 80001cc:	0800c794 	.word	0x0800c794

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_d2lz>:
 8000ca8:	b538      	push	{r3, r4, r5, lr}
 8000caa:	2200      	movs	r2, #0
 8000cac:	2300      	movs	r3, #0
 8000cae:	4604      	mov	r4, r0
 8000cb0:	460d      	mov	r5, r1
 8000cb2:	f7ff ff23 	bl	8000afc <__aeabi_dcmplt>
 8000cb6:	b928      	cbnz	r0, 8000cc4 <__aeabi_d2lz+0x1c>
 8000cb8:	4620      	mov	r0, r4
 8000cba:	4629      	mov	r1, r5
 8000cbc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cc0:	f000 b80a 	b.w	8000cd8 <__aeabi_d2ulz>
 8000cc4:	4620      	mov	r0, r4
 8000cc6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cca:	f000 f805 	bl	8000cd8 <__aeabi_d2ulz>
 8000cce:	4240      	negs	r0, r0
 8000cd0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cd4:	bd38      	pop	{r3, r4, r5, pc}
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_d2ulz>:
 8000cd8:	b5d0      	push	{r4, r6, r7, lr}
 8000cda:	4b0c      	ldr	r3, [pc, #48]	@ (8000d0c <__aeabi_d2ulz+0x34>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	4606      	mov	r6, r0
 8000ce0:	460f      	mov	r7, r1
 8000ce2:	f7ff fc99 	bl	8000618 <__aeabi_dmul>
 8000ce6:	f7ff ff6f 	bl	8000bc8 <__aeabi_d2uiz>
 8000cea:	4604      	mov	r4, r0
 8000cec:	f7ff fc1a 	bl	8000524 <__aeabi_ui2d>
 8000cf0:	4b07      	ldr	r3, [pc, #28]	@ (8000d10 <__aeabi_d2ulz+0x38>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	f7ff fc90 	bl	8000618 <__aeabi_dmul>
 8000cf8:	4602      	mov	r2, r0
 8000cfa:	460b      	mov	r3, r1
 8000cfc:	4630      	mov	r0, r6
 8000cfe:	4639      	mov	r1, r7
 8000d00:	f7ff fad2 	bl	80002a8 <__aeabi_dsub>
 8000d04:	f7ff ff60 	bl	8000bc8 <__aeabi_d2uiz>
 8000d08:	4621      	mov	r1, r4
 8000d0a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d0c:	3df00000 	.word	0x3df00000
 8000d10:	41f00000 	.word	0x41f00000

08000d14 <display_rmc_data>:
	//memset(gnssDmaRingBufferMemory, 0x20, sizeof(gnssDmaRingBufferMemory));	// insert buffer with space character	
	RingBufferDmaU8_initUSARTRx(&GPSRxDMARing, &huart2, gpsSentence, GPS_STACK_SIZE);
}


void display_rmc_data(UART_HandleTypeDef *huart) {
 8000d14:	b530      	push	{r4, r5, lr}
    uint8_t output_buffer[50];

    snprintf((char *)output_buffer, sizeof(output_buffer), "Time: %02d:%02d:%02d\r\n", rmc.tim.hour, rmc.tim.min, rmc.tim.sec);
 8000d16:	4c36      	ldr	r4, [pc, #216]	@ (8000df0 <display_rmc_data+0xdc>)
 8000d18:	4a36      	ldr	r2, [pc, #216]	@ (8000df4 <display_rmc_data+0xe0>)
 8000d1a:	68a3      	ldr	r3, [r4, #8]
void display_rmc_data(UART_HandleTypeDef *huart) {
 8000d1c:	b093      	sub	sp, #76	@ 0x4c
 8000d1e:	4605      	mov	r5, r0
    snprintf((char *)output_buffer, sizeof(output_buffer), "Time: %02d:%02d:%02d\r\n", rmc.tim.hour, rmc.tim.min, rmc.tim.sec);
 8000d20:	9301      	str	r3, [sp, #4]
 8000d22:	6863      	ldr	r3, [r4, #4]
 8000d24:	9300      	str	r3, [sp, #0]
 8000d26:	6823      	ldr	r3, [r4, #0]
 8000d28:	2132      	movs	r1, #50	@ 0x32
 8000d2a:	a805      	add	r0, sp, #20
 8000d2c:	f007 fcb6 	bl	800869c <sniprintf>
    uart_transmit_string(huart, output_buffer);
 8000d30:	a905      	add	r1, sp, #20
 8000d32:	4628      	mov	r0, r5
 8000d34:	f002 fb40 	bl	80033b8 <uart_transmit_string>

    snprintf((char *)output_buffer, sizeof(output_buffer), "Date: %02d/%02d/%04d\r\n", rmc.date.Day, rmc.date.Mon, rmc.date.Yr);
 8000d38:	69a3      	ldr	r3, [r4, #24]
 8000d3a:	9301      	str	r3, [sp, #4]
 8000d3c:	6963      	ldr	r3, [r4, #20]
 8000d3e:	9300      	str	r3, [sp, #0]
 8000d40:	6923      	ldr	r3, [r4, #16]
 8000d42:	4a2d      	ldr	r2, [pc, #180]	@ (8000df8 <display_rmc_data+0xe4>)
 8000d44:	2132      	movs	r1, #50	@ 0x32
 8000d46:	a805      	add	r0, sp, #20
 8000d48:	f007 fca8 	bl	800869c <sniprintf>
    uart_transmit_string(huart, output_buffer);
 8000d4c:	a905      	add	r1, sp, #20
 8000d4e:	4628      	mov	r0, r5
 8000d50:	f002 fb32 	bl	80033b8 <uart_transmit_string>
	
    snprintf((char *)output_buffer, sizeof(output_buffer), "Latitude: %.6f %c\r\n", rmc.lcation.latitude, rmc.lcation.NS);
 8000d54:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 8000d58:	9302      	str	r3, [sp, #8]
 8000d5a:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	@ 0x38
 8000d5e:	2132      	movs	r1, #50	@ 0x32
 8000d60:	e9cd 2300 	strd	r2, r3, [sp]
 8000d64:	a805      	add	r0, sp, #20
 8000d66:	4a25      	ldr	r2, [pc, #148]	@ (8000dfc <display_rmc_data+0xe8>)
 8000d68:	f007 fc98 	bl	800869c <sniprintf>
    uart_transmit_string(huart, output_buffer);
 8000d6c:	a905      	add	r1, sp, #20
 8000d6e:	4628      	mov	r0, r5
 8000d70:	f002 fb22 	bl	80033b8 <uart_transmit_string>

    snprintf((char *)output_buffer, sizeof(output_buffer), "Longitude: %.6f %c\r\n", rmc.lcation.longitude, rmc.lcation.EW);
 8000d74:	f894 3050 	ldrb.w	r3, [r4, #80]	@ 0x50
 8000d78:	9302      	str	r3, [sp, #8]
 8000d7a:	e9d4 2312 	ldrd	r2, r3, [r4, #72]	@ 0x48
 8000d7e:	2132      	movs	r1, #50	@ 0x32
 8000d80:	e9cd 2300 	strd	r2, r3, [sp]
 8000d84:	a805      	add	r0, sp, #20
 8000d86:	4a1e      	ldr	r2, [pc, #120]	@ (8000e00 <display_rmc_data+0xec>)
 8000d88:	f007 fc88 	bl	800869c <sniprintf>
    uart_transmit_string(huart, output_buffer);
 8000d8c:	a905      	add	r1, sp, #20
 8000d8e:	4628      	mov	r0, r5
 8000d90:	f002 fb12 	bl	80033b8 <uart_transmit_string>

    snprintf((char *)output_buffer, sizeof(output_buffer), "Speed: %.1f knots\r\n", rmc.speed);
 8000d94:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8000d96:	f7ff fbe7 	bl	8000568 <__aeabi_f2d>
 8000d9a:	4a1a      	ldr	r2, [pc, #104]	@ (8000e04 <display_rmc_data+0xf0>)
 8000d9c:	e9cd 0100 	strd	r0, r1, [sp]
 8000da0:	2132      	movs	r1, #50	@ 0x32
 8000da2:	a805      	add	r0, sp, #20
 8000da4:	f007 fc7a 	bl	800869c <sniprintf>
    uart_transmit_string(huart, output_buffer);
 8000da8:	a905      	add	r1, sp, #20
 8000daa:	4628      	mov	r0, r5
 8000dac:	f002 fb04 	bl	80033b8 <uart_transmit_string>

    snprintf((char *)output_buffer, sizeof(output_buffer), "Course: %.1f\r\n", rmc.course);
 8000db0:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8000db2:	f7ff fbd9 	bl	8000568 <__aeabi_f2d>
 8000db6:	4a14      	ldr	r2, [pc, #80]	@ (8000e08 <display_rmc_data+0xf4>)
 8000db8:	e9cd 0100 	strd	r0, r1, [sp]
 8000dbc:	2132      	movs	r1, #50	@ 0x32
 8000dbe:	a805      	add	r0, sp, #20
 8000dc0:	f007 fc6c 	bl	800869c <sniprintf>
    uart_transmit_string(huart, output_buffer);
 8000dc4:	a905      	add	r1, sp, #20
 8000dc6:	4628      	mov	r0, r5
 8000dc8:	f002 faf6 	bl	80033b8 <uart_transmit_string>

    snprintf((char *)output_buffer, sizeof(output_buffer), "Validity: %s\r\n", rmc.isValid ? "Valid" : "Invalid");
 8000dcc:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8000dce:	4a0f      	ldr	r2, [pc, #60]	@ (8000e0c <display_rmc_data+0xf8>)
 8000dd0:	4b0f      	ldr	r3, [pc, #60]	@ (8000e10 <display_rmc_data+0xfc>)
 8000dd2:	a805      	add	r0, sp, #20
 8000dd4:	2900      	cmp	r1, #0
 8000dd6:	bf18      	it	ne
 8000dd8:	4613      	movne	r3, r2
 8000dda:	4a0e      	ldr	r2, [pc, #56]	@ (8000e14 <display_rmc_data+0x100>)
 8000ddc:	2132      	movs	r1, #50	@ 0x32
 8000dde:	f007 fc5d 	bl	800869c <sniprintf>
    uart_transmit_string(huart, output_buffer);
 8000de2:	a905      	add	r1, sp, #20
 8000de4:	4628      	mov	r0, r5
 8000de6:	f002 fae7 	bl	80033b8 <uart_transmit_string>
}
 8000dea:	b013      	add	sp, #76	@ 0x4c
 8000dec:	bd30      	pop	{r4, r5, pc}
 8000dee:	bf00      	nop
 8000df0:	20000268 	.word	0x20000268
 8000df4:	0800c89e 	.word	0x0800c89e
 8000df8:	0800c8b5 	.word	0x0800c8b5
 8000dfc:	0800c8cc 	.word	0x0800c8cc
 8000e00:	0800c8e0 	.word	0x0800c8e0
 8000e04:	0800c8f5 	.word	0x0800c8f5
 8000e08:	0800c909 	.word	0x0800c909
 8000e0c:	0800c890 	.word	0x0800c890
 8000e10:	0800c896 	.word	0x0800c896
 8000e14:	0800c918 	.word	0x0800c918

08000e18 <convertToEpoch>:

time_t convertToEpoch(int year, int month, int day, int hour, int min, int sec) {
 8000e18:	b500      	push	{lr}
 8000e1a:	b08b      	sub	sp, #44	@ 0x2c
    struct tm timeinfo;

    // Set timeinfo fields
    timeinfo.tm_year = year - 1900; // Year since 1900
 8000e1c:	f2a0 706c 	subw	r0, r0, #1900	@ 0x76c
    timeinfo.tm_mon = month - 1;    // Month (0-11, so subtract 1)
    timeinfo.tm_mday = day;         // Day of the month
    timeinfo.tm_hour = hour;        // Hour (0-23)
 8000e20:	9303      	str	r3, [sp, #12]
    timeinfo.tm_min = min;          // Minute (0-59)
 8000e22:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8000e24:	9302      	str	r3, [sp, #8]
    timeinfo.tm_sec = sec;          // Second (0-59)
 8000e26:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
    timeinfo.tm_year = year - 1900; // Year since 1900
 8000e28:	9006      	str	r0, [sp, #24]
    timeinfo.tm_sec = sec;          // Second (0-59)
 8000e2a:	9301      	str	r3, [sp, #4]
    timeinfo.tm_mon = month - 1;    // Month (0-11, so subtract 1)
 8000e2c:	3901      	subs	r1, #1
    timeinfo.tm_isdst = -1;         // Automatically determine Daylight Saving Time
 8000e2e:	f04f 33ff 	mov.w	r3, #4294967295

    // Convert to epoch time (seconds since 1970-01-01 00:00:00 UTC)
    time_t epoch = mktime(&timeinfo);
 8000e32:	a801      	add	r0, sp, #4
    timeinfo.tm_mday = day;         // Day of the month
 8000e34:	e9cd 2104 	strd	r2, r1, [sp, #16]
    timeinfo.tm_isdst = -1;         // Automatically determine Daylight Saving Time
 8000e38:	9309      	str	r3, [sp, #36]	@ 0x24
    time_t epoch = mktime(&timeinfo);
 8000e3a:	f007 fdf7 	bl	8008a2c <mktime>

    return epoch;
}
 8000e3e:	b00b      	add	sp, #44	@ 0x2c
 8000e40:	f85d fb04 	ldr.w	pc, [sp], #4
 8000e44:	0000      	movs	r0, r0
	...

08000e48 <parse_rmc>:

void parse_rmc(uint8_t *rmc_sentence) {
 8000e48:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000e4c:	ed2d 8b02 	vpush	{d8}
    int field = 0;
 8000e50:	2500      	movs	r5, #0
void parse_rmc(uint8_t *rmc_sentence) {
 8000e52:	b083      	sub	sp, #12
 8000e54:	4604      	mov	r4, r0
    uint8_t *ptr = rmc_sentence;

    while (*ptr) {
        if (*ptr == ',' || *ptr == '*') {
            *ptr = '\0';
 8000e56:	462e      	mov	r6, r5
    while (*ptr) {
 8000e58:	f814 3b01 	ldrb.w	r3, [r4], #1
 8000e5c:	b9a3      	cbnz	r3, 8000e88 <parse_rmc+0x40>
            rmc_sentence = ptr + 1;
            field++;
        }
        ptr++;
    }
	if(rmc.isValid == 1)
 8000e5e:	4c76      	ldr	r4, [pc, #472]	@ (8001038 <parse_rmc+0x1f0>)
 8000e60:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8000e62:	2b01      	cmp	r3, #1
 8000e64:	d10b      	bne.n	8000e7e <parse_rmc+0x36>
		rmc.date.epoch = convertToEpoch(rmc.date.Yr, rmc.date.Mon, rmc.date.Day, rmc.tim.hour, rmc.tim.min, rmc.tim.sec);
 8000e66:	68a3      	ldr	r3, [r4, #8]
 8000e68:	9301      	str	r3, [sp, #4]
 8000e6a:	6863      	ldr	r3, [r4, #4]
 8000e6c:	9300      	str	r3, [sp, #0]
 8000e6e:	e9d4 2104 	ldrd	r2, r1, [r4, #16]
 8000e72:	6823      	ldr	r3, [r4, #0]
 8000e74:	69a0      	ldr	r0, [r4, #24]
 8000e76:	f7ff ffcf 	bl	8000e18 <convertToEpoch>
 8000e7a:	e9c4 0108 	strd	r0, r1, [r4, #32]
}
 8000e7e:	b003      	add	sp, #12
 8000e80:	ecbd 8b02 	vpop	{d8}
 8000e84:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (*ptr == ',' || *ptr == '*') {
 8000e88:	2b2c      	cmp	r3, #44	@ 0x2c
 8000e8a:	d001      	beq.n	8000e90 <parse_rmc+0x48>
 8000e8c:	2b2a      	cmp	r3, #42	@ 0x2a
 8000e8e:	d1e3      	bne.n	8000e58 <parse_rmc+0x10>
            switch (field) {
 8000e90:	1e6b      	subs	r3, r5, #1
            *ptr = '\0';
 8000e92:	f804 6c01 	strb.w	r6, [r4, #-1]
            switch (field) {
 8000e96:	2b08      	cmp	r3, #8
 8000e98:	d81d      	bhi.n	8000ed6 <parse_rmc+0x8e>
 8000e9a:	e8df f003 	tbb	[pc, r3]
 8000e9e:	1f05      	.short	0x1f05
 8000ea0:	96615c27 	.word	0x96615c27
 8000ea4:	a49b      	.short	0xa49b
 8000ea6:	ad          	.byte	0xad
 8000ea7:	00          	.byte	0x00
                    rmc.tim.hour = (rmc_sentence[0] - '0') * 10 + (rmc_sentence[1] - '0');
 8000ea8:	7807      	ldrb	r7, [r0, #0]
 8000eaa:	7843      	ldrb	r3, [r0, #1]
 8000eac:	4a62      	ldr	r2, [pc, #392]	@ (8001038 <parse_rmc+0x1f0>)
 8000eae:	210a      	movs	r1, #10
 8000eb0:	3f30      	subs	r7, #48	@ 0x30
 8000eb2:	3b30      	subs	r3, #48	@ 0x30
 8000eb4:	fb01 3307 	mla	r3, r1, r7, r3
 8000eb8:	6013      	str	r3, [r2, #0]
                    rmc.tim.min = (rmc_sentence[2] - '0') * 10 + (rmc_sentence[3] - '0');
 8000eba:	7887      	ldrb	r7, [r0, #2]
 8000ebc:	78c3      	ldrb	r3, [r0, #3]
 8000ebe:	3f30      	subs	r7, #48	@ 0x30
 8000ec0:	3b30      	subs	r3, #48	@ 0x30
 8000ec2:	fb01 3307 	mla	r3, r1, r7, r3
 8000ec6:	6053      	str	r3, [r2, #4]
                    rmc.tim.sec = (rmc_sentence[4] - '0') * 10 + (rmc_sentence[5] - '0');
 8000ec8:	7907      	ldrb	r7, [r0, #4]
 8000eca:	7943      	ldrb	r3, [r0, #5]
 8000ecc:	3f30      	subs	r7, #48	@ 0x30
 8000ece:	3b30      	subs	r3, #48	@ 0x30
 8000ed0:	fb01 3307 	mla	r3, r1, r7, r3
 8000ed4:	6093      	str	r3, [r2, #8]
            field++;
 8000ed6:	3501      	adds	r5, #1
            rmc_sentence = ptr + 1;
 8000ed8:	4620      	mov	r0, r4
        ptr++;
 8000eda:	e7bd      	b.n	8000e58 <parse_rmc+0x10>
                    rmc.isValid = (rmc_sentence[0] == 'A') ? 1 : 0;
 8000edc:	7803      	ldrb	r3, [r0, #0]
 8000ede:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8000ee2:	4253      	negs	r3, r2
 8000ee4:	4153      	adcs	r3, r2
 8000ee6:	4a54      	ldr	r2, [pc, #336]	@ (8001038 <parse_rmc+0x1f0>)
 8000ee8:	6313      	str	r3, [r2, #48]	@ 0x30
                    break;
 8000eea:	e7f4      	b.n	8000ed6 <parse_rmc+0x8e>
                    rmc.lcation.latitude = (atof((char *)rmc_sentence) )/100;
 8000eec:	f005 ffea 	bl	8006ec4 <atof>
 8000ef0:	4b52      	ldr	r3, [pc, #328]	@ (800103c <parse_rmc+0x1f4>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	ec51 0b10 	vmov	r0, r1, d0
 8000ef8:	f7ff fcb8 	bl	800086c <__aeabi_ddiv>
 8000efc:	4680      	mov	r8, r0
 8000efe:	4689      	mov	r9, r1
                    int lati_int = (int)floor(rmc.lcation.latitude);
 8000f00:	ec49 8b10 	vmov	d0, r8, r9
 8000f04:	f00b fb84 	bl	800c610 <floor>
 8000f08:	ec51 0b10 	vmov	r0, r1, d0
 8000f0c:	f7ff fe34 	bl	8000b78 <__aeabi_d2iz>
 8000f10:	ee08 0a10 	vmov	s16, r0
					float lati_float = rmc.lcation.latitude - lati_int;
 8000f14:	f7ff fb16 	bl	8000544 <__aeabi_i2d>
 8000f18:	4602      	mov	r2, r0
 8000f1a:	460b      	mov	r3, r1
 8000f1c:	4640      	mov	r0, r8
 8000f1e:	4649      	mov	r1, r9
 8000f20:	f7ff f9c2 	bl	80002a8 <__aeabi_dsub>
 8000f24:	f7ff fe70 	bl	8000c08 <__aeabi_d2f>
					lati_float = lati_float/0.6;
 8000f28:	f7ff fb1e 	bl	8000568 <__aeabi_f2d>
 8000f2c:	a340      	add	r3, pc, #256	@ (adr r3, 8001030 <parse_rmc+0x1e8>)
 8000f2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f32:	f7ff fc9b 	bl	800086c <__aeabi_ddiv>
 8000f36:	f7ff fe67 	bl	8000c08 <__aeabi_d2f>
					rmc.lcation.latitude = lati_int + lati_float;
 8000f3a:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
					lati_float = lati_float/0.6;
 8000f3e:	ee07 0a90 	vmov	s15, r0
					rmc.lcation.latitude = lati_int + lati_float;
 8000f42:	ee78 7a27 	vadd.f32	s15, s16, s15
 8000f46:	ee17 0a90 	vmov	r0, s15
 8000f4a:	f7ff fb0d 	bl	8000568 <__aeabi_f2d>
 8000f4e:	4b3a      	ldr	r3, [pc, #232]	@ (8001038 <parse_rmc+0x1f0>)
 8000f50:	e9c3 010e 	strd	r0, r1, [r3, #56]	@ 0x38
                    break;
 8000f54:	e7bf      	b.n	8000ed6 <parse_rmc+0x8e>
                    rmc.lcation.NS = rmc_sentence[0];
 8000f56:	4b38      	ldr	r3, [pc, #224]	@ (8001038 <parse_rmc+0x1f0>)
 8000f58:	7802      	ldrb	r2, [r0, #0]
 8000f5a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
                    break;
 8000f5e:	e7ba      	b.n	8000ed6 <parse_rmc+0x8e>
                    rmc.lcation.longitude = (atof((char *)rmc_sentence))/100;
 8000f60:	f005 ffb0 	bl	8006ec4 <atof>
 8000f64:	4b35      	ldr	r3, [pc, #212]	@ (800103c <parse_rmc+0x1f4>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	ec51 0b10 	vmov	r0, r1, d0
 8000f6c:	f7ff fc7e 	bl	800086c <__aeabi_ddiv>
 8000f70:	4680      	mov	r8, r0
 8000f72:	4689      	mov	r9, r1
                    int longi_int = (int)floor(rmc.lcation.longitude);
 8000f74:	ec49 8b10 	vmov	d0, r8, r9
 8000f78:	f00b fb4a 	bl	800c610 <floor>
 8000f7c:	ec51 0b10 	vmov	r0, r1, d0
 8000f80:	f7ff fdfa 	bl	8000b78 <__aeabi_d2iz>
 8000f84:	ee08 0a10 	vmov	s16, r0
					float longi_float = rmc.lcation.longitude - longi_int;
 8000f88:	f7ff fadc 	bl	8000544 <__aeabi_i2d>
 8000f8c:	4602      	mov	r2, r0
 8000f8e:	460b      	mov	r3, r1
 8000f90:	4640      	mov	r0, r8
 8000f92:	4649      	mov	r1, r9
 8000f94:	f7ff f988 	bl	80002a8 <__aeabi_dsub>
 8000f98:	f7ff fe36 	bl	8000c08 <__aeabi_d2f>
					longi_float = longi_float/0.6;
 8000f9c:	f7ff fae4 	bl	8000568 <__aeabi_f2d>
 8000fa0:	a323      	add	r3, pc, #140	@ (adr r3, 8001030 <parse_rmc+0x1e8>)
 8000fa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fa6:	f7ff fc61 	bl	800086c <__aeabi_ddiv>
 8000faa:	f7ff fe2d 	bl	8000c08 <__aeabi_d2f>
					rmc.lcation.longitude = longi_int + longi_float;
 8000fae:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
					longi_float = longi_float/0.6;
 8000fb2:	ee07 0a90 	vmov	s15, r0
					rmc.lcation.longitude = longi_int + longi_float;
 8000fb6:	ee78 7a27 	vadd.f32	s15, s16, s15
 8000fba:	ee17 0a90 	vmov	r0, s15
 8000fbe:	f7ff fad3 	bl	8000568 <__aeabi_f2d>
 8000fc2:	4b1d      	ldr	r3, [pc, #116]	@ (8001038 <parse_rmc+0x1f0>)
 8000fc4:	e9c3 0112 	strd	r0, r1, [r3, #72]	@ 0x48
                    break;
 8000fc8:	e785      	b.n	8000ed6 <parse_rmc+0x8e>
                    rmc.lcation.EW = rmc_sentence[0];
 8000fca:	4b1b      	ldr	r3, [pc, #108]	@ (8001038 <parse_rmc+0x1f0>)
 8000fcc:	7802      	ldrb	r2, [r0, #0]
 8000fce:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
                    break;
 8000fd2:	e780      	b.n	8000ed6 <parse_rmc+0x8e>
                    rmc.speed = atof((char *)rmc_sentence);
 8000fd4:	f005 ff76 	bl	8006ec4 <atof>
 8000fd8:	ec51 0b10 	vmov	r0, r1, d0
 8000fdc:	f7ff fe14 	bl	8000c08 <__aeabi_d2f>
 8000fe0:	4b15      	ldr	r3, [pc, #84]	@ (8001038 <parse_rmc+0x1f0>)
 8000fe2:	6298      	str	r0, [r3, #40]	@ 0x28
                    break;
 8000fe4:	e777      	b.n	8000ed6 <parse_rmc+0x8e>
                    rmc.course = atof((char *)rmc_sentence);
 8000fe6:	f005 ff6d 	bl	8006ec4 <atof>
 8000fea:	ec51 0b10 	vmov	r0, r1, d0
 8000fee:	f7ff fe0b 	bl	8000c08 <__aeabi_d2f>
 8000ff2:	4b11      	ldr	r3, [pc, #68]	@ (8001038 <parse_rmc+0x1f0>)
 8000ff4:	62d8      	str	r0, [r3, #44]	@ 0x2c
                    break;
 8000ff6:	e76e      	b.n	8000ed6 <parse_rmc+0x8e>
                    rmc.date.Day = (rmc_sentence[0] - '0') * 10 + (rmc_sentence[1] - '0');
 8000ff8:	7801      	ldrb	r1, [r0, #0]
 8000ffa:	7843      	ldrb	r3, [r0, #1]
 8000ffc:	4a0e      	ldr	r2, [pc, #56]	@ (8001038 <parse_rmc+0x1f0>)
 8000ffe:	270a      	movs	r7, #10
 8001000:	3930      	subs	r1, #48	@ 0x30
 8001002:	3b30      	subs	r3, #48	@ 0x30
 8001004:	fb07 3301 	mla	r3, r7, r1, r3
 8001008:	6113      	str	r3, [r2, #16]
                    rmc.date.Mon = (rmc_sentence[2] - '0') * 10 + (rmc_sentence[3] - '0');
 800100a:	7881      	ldrb	r1, [r0, #2]
 800100c:	78c3      	ldrb	r3, [r0, #3]
 800100e:	3930      	subs	r1, #48	@ 0x30
 8001010:	3b30      	subs	r3, #48	@ 0x30
 8001012:	fb07 3301 	mla	r3, r7, r1, r3
 8001016:	6153      	str	r3, [r2, #20]
                    rmc.date.Yr = 2000 + (rmc_sentence[4] - '0') * 10 + (rmc_sentence[5] - '0');
 8001018:	7901      	ldrb	r1, [r0, #4]
 800101a:	7943      	ldrb	r3, [r0, #5]
 800101c:	3930      	subs	r1, #48	@ 0x30
 800101e:	fb07 3301 	mla	r3, r7, r1, r3
 8001022:	f503 63f4 	add.w	r3, r3, #1952	@ 0x7a0
 8001026:	6193      	str	r3, [r2, #24]
                    break;
 8001028:	e755      	b.n	8000ed6 <parse_rmc+0x8e>
 800102a:	bf00      	nop
 800102c:	f3af 8000 	nop.w
 8001030:	33333333 	.word	0x33333333
 8001034:	3fe33333 	.word	0x3fe33333
 8001038:	20000268 	.word	0x20000268
 800103c:	40590000 	.word	0x40590000

08001040 <sendRMCDataToFlash>:


void sendRMCDataToFlash(RMCSTRUCT *rmcData) {
 8001040:	b570      	push	{r4, r5, r6, lr}
	HAL_UART_Transmit(&huart1, (uint8_t*) "SENDING RMC TO FLASH\n",  strlen("SENDING RMC\n") , HAL_MAX_DELAY);
    RMCSTRUCT *mail = (RMCSTRUCT *)osMailAlloc(RMC_MailQFLASHId, osWaitForever); // Allocate memory for mail
 8001042:	4e0d      	ldr	r6, [pc, #52]	@ (8001078 <sendRMCDataToFlash+0x38>)
	HAL_UART_Transmit(&huart1, (uint8_t*) "SENDING RMC TO FLASH\n",  strlen("SENDING RMC\n") , HAL_MAX_DELAY);
 8001044:	490d      	ldr	r1, [pc, #52]	@ (800107c <sendRMCDataToFlash+0x3c>)
 8001046:	f04f 33ff 	mov.w	r3, #4294967295
 800104a:	220c      	movs	r2, #12
void sendRMCDataToFlash(RMCSTRUCT *rmcData) {
 800104c:	4605      	mov	r5, r0
	HAL_UART_Transmit(&huart1, (uint8_t*) "SENDING RMC TO FLASH\n",  strlen("SENDING RMC\n") , HAL_MAX_DELAY);
 800104e:	480c      	ldr	r0, [pc, #48]	@ (8001080 <sendRMCDataToFlash+0x40>)
 8001050:	f004 fa70 	bl	8005534 <HAL_UART_Transmit>
    RMCSTRUCT *mail = (RMCSTRUCT *)osMailAlloc(RMC_MailQFLASHId, osWaitForever); // Allocate memory for mail
 8001054:	6830      	ldr	r0, [r6, #0]
 8001056:	f04f 31ff 	mov.w	r1, #4294967295
 800105a:	f004 fc85 	bl	8005968 <osMailAlloc>
 800105e:	4604      	mov	r4, r0
    if (mail != NULL) {
 8001060:	b148      	cbz	r0, 8001076 <sendRMCDataToFlash+0x36>
        *mail = *rmcData; // Copy data into allocated memory
 8001062:	4629      	mov	r1, r5
 8001064:	2258      	movs	r2, #88	@ 0x58
 8001066:	f008 fa00 	bl	800946a <memcpy>
        osMailPut(RMC_MailQFLASHId, mail); // Put message in queue
 800106a:	6830      	ldr	r0, [r6, #0]
 800106c:	4621      	mov	r1, r4
    }
}
 800106e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        osMailPut(RMC_MailQFLASHId, mail); // Put message in queue
 8001072:	f004 bc7e 	b.w	8005972 <osMailPut>
}
 8001076:	bd70      	pop	{r4, r5, r6, pc}
 8001078:	200002c0 	.word	0x200002c0
 800107c:	0800c927 	.word	0x0800c927
 8001080:	2000118c 	.word	0x2000118c

08001084 <getRMC>:


void getRMC(){
 8001084:	b570      	push	{r4, r5, r6, lr}
	int idx = 0;
	//uint8_t temp[128];
	getRMC_time++;
 8001086:	4d3f      	ldr	r5, [pc, #252]	@ (8001184 <getRMC+0x100>)
 8001088:	682b      	ldr	r3, [r5, #0]
 800108a:	3301      	adds	r3, #1
 800108c:	602b      	str	r3, [r5, #0]
	int length = 0;
	for(size_t i = 0; i < GPS_STACK_SIZE; i++){
 800108e:	4b3e      	ldr	r3, [pc, #248]	@ (8001188 <getRMC+0x104>)
void getRMC(){
 8001090:	b0a0      	sub	sp, #128	@ 0x80
	for(size_t i = 0; i < GPS_STACK_SIZE; i++){
 8001092:	2200      	movs	r2, #0
 8001094:	461e      	mov	r6, r3
		if (gpsSentence[i] == '$' && gpsSentence[i+1] == 'G' && gpsSentence[i+2] == 'N' && gpsSentence[i+3] == 'R' && gpsSentence[i+4] == 'M' && gpsSentence[i+5] == 'C'
 8001096:	f813 1b01 	ldrb.w	r1, [r3], #1
 800109a:	2924      	cmp	r1, #36	@ 0x24
 800109c:	4614      	mov	r4, r2
 800109e:	f102 0201 	add.w	r2, r2, #1
 80010a2:	d16a      	bne.n	800117a <getRMC+0xf6>
 80010a4:	7819      	ldrb	r1, [r3, #0]
 80010a6:	2947      	cmp	r1, #71	@ 0x47
 80010a8:	d167      	bne.n	800117a <getRMC+0xf6>
 80010aa:	7859      	ldrb	r1, [r3, #1]
 80010ac:	294e      	cmp	r1, #78	@ 0x4e
 80010ae:	d164      	bne.n	800117a <getRMC+0xf6>
 80010b0:	7899      	ldrb	r1, [r3, #2]
 80010b2:	2952      	cmp	r1, #82	@ 0x52
 80010b4:	d161      	bne.n	800117a <getRMC+0xf6>
 80010b6:	78d9      	ldrb	r1, [r3, #3]
 80010b8:	294d      	cmp	r1, #77	@ 0x4d
 80010ba:	d15e      	bne.n	800117a <getRMC+0xf6>
 80010bc:	7919      	ldrb	r1, [r3, #4]
 80010be:	2943      	cmp	r1, #67	@ 0x43
 80010c0:	d15b      	bne.n	800117a <getRMC+0xf6>
			&& (GPS_STACK_SIZE -i) > 200 ){
 80010c2:	f5c2 6100 	rsb	r1, r2, #2048	@ 0x800
 80010c6:	3101      	adds	r1, #1
 80010c8:	29c8      	cmp	r1, #200	@ 0xc8
 80010ca:	d956      	bls.n	800117a <getRMC+0xf6>
			isRMCExist = 1;
 80010cc:	4b2f      	ldr	r3, [pc, #188]	@ (800118c <getRMC+0x108>)
			HAL_UART_Transmit(&huart1, (uint8_t *)"Getting RMC\n", strlen("Getting RMC\n"), 1000);
 80010ce:	4930      	ldr	r1, [pc, #192]	@ (8001190 <getRMC+0x10c>)
 80010d0:	4830      	ldr	r0, [pc, #192]	@ (8001194 <getRMC+0x110>)
			isRMCExist = 1;
 80010d2:	2201      	movs	r2, #1
 80010d4:	601a      	str	r2, [r3, #0]
			HAL_UART_Transmit(&huart1, (uint8_t *)"Getting RMC\n", strlen("Getting RMC\n"), 1000);
 80010d6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010da:	220c      	movs	r2, #12
 80010dc:	f004 fa2a 	bl	8005534 <HAL_UART_Transmit>
			while(gpsSentence[i+1] != 0x0A ){
 80010e0:	4a2d      	ldr	r2, [pc, #180]	@ (8001198 <getRMC+0x114>)
 80010e2:	1933      	adds	r3, r6, r4
	int idx = 0;
 80010e4:	2000      	movs	r0, #0
			while(gpsSentence[i+1] != 0x0A ){
 80010e6:	7859      	ldrb	r1, [r3, #1]
 80010e8:	290a      	cmp	r1, #10
 80010ea:	461c      	mov	r4, r3
 80010ec:	d13f      	bne.n	800116e <getRMC+0xea>
			idx = 0;
			break;
		}
	 }
	for(size_t i = length; i < 128; i++){
		rmc_str[i] = 0;
 80010ee:	4e2a      	ldr	r6, [pc, #168]	@ (8001198 <getRMC+0x114>)
	}
	if(isRMCExist == 1){
 80010f0:	4c26      	ldr	r4, [pc, #152]	@ (800118c <getRMC+0x108>)
		rmc_str[i] = 0;
 80010f2:	f1c0 0280 	rsb	r2, r0, #128	@ 0x80
 80010f6:	2100      	movs	r1, #0
 80010f8:	4430      	add	r0, r6
 80010fa:	f007 fb92 	bl	8008822 <memset>
	if(isRMCExist == 1){
 80010fe:	6823      	ldr	r3, [r4, #0]
 8001100:	2b01      	cmp	r3, #1
 8001102:	d10d      	bne.n	8001120 <getRMC+0x9c>
		parse_rmc(rmc_str);
 8001104:	4630      	mov	r0, r6
 8001106:	f7ff fe9f 	bl	8000e48 <parse_rmc>
		display_rmc_data(&huart1);
 800110a:	4822      	ldr	r0, [pc, #136]	@ (8001194 <getRMC+0x110>)
 800110c:	f7ff fe02 	bl	8000d14 <display_rmc_data>
		if(rmc.isValid == 1){
 8001110:	4822      	ldr	r0, [pc, #136]	@ (800119c <getRMC+0x118>)
 8001112:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8001114:	2b01      	cmp	r3, #1
 8001116:	d101      	bne.n	800111c <getRMC+0x98>
			sendRMCDataToFlash(&rmc);
 8001118:	f7ff ff92 	bl	8001040 <sendRMCDataToFlash>
			//sendRMCDataToGSM(&rmc);
		}
		isRMCExist = 0;
 800111c:	2300      	movs	r3, #0
 800111e:	6023      	str	r3, [r4, #0]
	}
	if(getRMC_time >= 500){
 8001120:	682b      	ldr	r3, [r5, #0]
 8001122:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001126:	db0f      	blt.n	8001148 <getRMC+0xc4>
		GPS_DISABLE();
 8001128:	2201      	movs	r2, #1
 800112a:	2104      	movs	r1, #4
 800112c:	481c      	ldr	r0, [pc, #112]	@ (80011a0 <getRMC+0x11c>)
 800112e:	f002 fbb9 	bl	80038a4 <HAL_GPIO_WritePin>
		osDelay(500);
 8001132:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001136:	f004 fb6d 	bl	8005814 <osDelay>
		GPS_ENABLE();
 800113a:	4819      	ldr	r0, [pc, #100]	@ (80011a0 <getRMC+0x11c>)
 800113c:	2200      	movs	r2, #0
 800113e:	2104      	movs	r1, #4
 8001140:	f002 fbb0 	bl	80038a4 <HAL_GPIO_WritePin>
		getRMC_time = 0;
 8001144:	2300      	movs	r3, #0
 8001146:	602b      	str	r3, [r5, #0]
	}
	char output_elapsed[128];
	snprintf(output_elapsed, 128, "Elapsed Time: %d\n", getRMC_time);
 8001148:	682b      	ldr	r3, [r5, #0]
 800114a:	4a16      	ldr	r2, [pc, #88]	@ (80011a4 <getRMC+0x120>)
 800114c:	2180      	movs	r1, #128	@ 0x80
 800114e:	4668      	mov	r0, sp
 8001150:	f007 faa4 	bl	800869c <sniprintf>
	uart_transmit_string(&huart1, (uint8_t *)output_elapsed);
 8001154:	4669      	mov	r1, sp
 8001156:	480f      	ldr	r0, [pc, #60]	@ (8001194 <getRMC+0x110>)
 8001158:	f002 f92e 	bl	80033b8 <uart_transmit_string>
	HAL_UART_Transmit(&huart1, rmc_str, 128,1000);
 800115c:	490e      	ldr	r1, [pc, #56]	@ (8001198 <getRMC+0x114>)
 800115e:	480d      	ldr	r0, [pc, #52]	@ (8001194 <getRMC+0x110>)
 8001160:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001164:	2280      	movs	r2, #128	@ 0x80
 8001166:	f004 f9e5 	bl	8005534 <HAL_UART_Transmit>
	
}
 800116a:	b020      	add	sp, #128	@ 0x80
 800116c:	bd70      	pop	{r4, r5, r6, pc}
				rmc_str[idx] = gpsSentence[i];
 800116e:	7821      	ldrb	r1, [r4, #0]
 8001170:	f802 1b01 	strb.w	r1, [r2], #1
				idx++;
 8001174:	3301      	adds	r3, #1
 8001176:	3001      	adds	r0, #1
				i++;
 8001178:	e7b5      	b.n	80010e6 <getRMC+0x62>
	for(size_t i = 0; i < GPS_STACK_SIZE; i++){
 800117a:	f5b2 6f00 	cmp.w	r2, #2048	@ 0x800
 800117e:	d18a      	bne.n	8001096 <getRMC+0x12>
	int length = 0;
 8001180:	2000      	movs	r0, #0
 8001182:	e7b4      	b.n	80010ee <getRMC+0x6a>
 8001184:	2000025c 	.word	0x2000025c
 8001188:	200002c4 	.word	0x200002c4
 800118c:	20000260 	.word	0x20000260
 8001190:	0800c93d 	.word	0x0800c93d
 8001194:	2000118c 	.word	0x2000118c
 8001198:	20000ad4 	.word	0x20000ad4
 800119c:	20000268 	.word	0x20000268
 80011a0:	48000800 	.word	0x48000800
 80011a4:	0800c94a 	.word	0x0800c94a

080011a8 <StartGPS>:
void StartGPS(void const * argument)
{
 80011a8:	b530      	push	{r4, r5, lr}
	HAL_UART_Transmit(&huart1,(uint8_t*) "STARTING GPS", strlen("STARTING GPS"), 1000);
 80011aa:	4922      	ldr	r1, [pc, #136]	@ (8001234 <StartGPS+0x8c>)
 80011ac:	4822      	ldr	r0, [pc, #136]	@ (8001238 <StartGPS+0x90>)
	RMC_MailQFLASHId = osMailCreate(osMailQ(FLASH_MailQ), NULL);
	int countSent = 0;
	memset(gpsSentence, 0x00, GPS_STACK_SIZE);
	while(1)
	{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 80011ae:	4d23      	ldr	r5, [pc, #140]	@ (800123c <StartGPS+0x94>)
		HAL_Delay(1000);
		getRMC();
//		rmc.tim.sec += 2;
		HAL_UART_Transmit(&huart1, (uint8_t *)"Getting GPS \n", strlen("Getting GPS \n"), 1000);
 80011b0:	4c21      	ldr	r4, [pc, #132]	@ (8001238 <StartGPS+0x90>)
{
 80011b2:	b085      	sub	sp, #20
	HAL_UART_Transmit(&huart1,(uint8_t*) "STARTING GPS", strlen("STARTING GPS"), 1000);
 80011b4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011b8:	220c      	movs	r2, #12
 80011ba:	f004 f9bb 	bl	8005534 <HAL_UART_Transmit>
	RingBufferDmaU8_initUSARTRx(&GPSRxDMARing, &huart2, gpsSentence, GPS_STACK_SIZE);
 80011be:	4a20      	ldr	r2, [pc, #128]	@ (8001240 <StartGPS+0x98>)
 80011c0:	4920      	ldr	r1, [pc, #128]	@ (8001244 <StartGPS+0x9c>)
 80011c2:	4821      	ldr	r0, [pc, #132]	@ (8001248 <StartGPS+0xa0>)
 80011c4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80011c8:	f001 f954 	bl	8002474 <RingBufferDmaU8_initUSARTRx>
	osMailQDef(FLASH_MailQ, 11, RMCSTRUCT);
 80011cc:	220b      	movs	r2, #11
 80011ce:	2358      	movs	r3, #88	@ 0x58
	RMC_MailQFLASHId = osMailCreate(osMailQ(FLASH_MailQ), NULL);
 80011d0:	2100      	movs	r1, #0
 80011d2:	a801      	add	r0, sp, #4
	osMailQDef(FLASH_MailQ, 11, RMCSTRUCT);
 80011d4:	e9cd 2301 	strd	r2, r3, [sp, #4]
 80011d8:	f8cd d00c 	str.w	sp, [sp, #12]
	RMC_MailQFLASHId = osMailCreate(osMailQ(FLASH_MailQ), NULL);
 80011dc:	f004 fb99 	bl	8005912 <osMailCreate>
 80011e0:	4b1a      	ldr	r3, [pc, #104]	@ (800124c <StartGPS+0xa4>)
	memset(gpsSentence, 0x00, GPS_STACK_SIZE);
 80011e2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
	RMC_MailQFLASHId = osMailCreate(osMailQ(FLASH_MailQ), NULL);
 80011e6:	6018      	str	r0, [r3, #0]
	memset(gpsSentence, 0x00, GPS_STACK_SIZE);
 80011e8:	2100      	movs	r1, #0
 80011ea:	4815      	ldr	r0, [pc, #84]	@ (8001240 <StartGPS+0x98>)
 80011ec:	f007 fb19 	bl	8008822 <memset>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 80011f0:	2201      	movs	r2, #1
 80011f2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80011f6:	4628      	mov	r0, r5
 80011f8:	f002 fb54 	bl	80038a4 <HAL_GPIO_WritePin>
		HAL_Delay(1000);
 80011fc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001200:	f002 f942 	bl	8003488 <HAL_Delay>
		getRMC();
 8001204:	f7ff ff3e 	bl	8001084 <getRMC>
		HAL_UART_Transmit(&huart1, (uint8_t *)"Getting GPS \n", strlen("Getting GPS \n"), 1000);
 8001208:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800120c:	4910      	ldr	r1, [pc, #64]	@ (8001250 <StartGPS+0xa8>)
 800120e:	220d      	movs	r2, #13
 8001210:	4620      	mov	r0, r4
 8001212:	f004 f98f 	bl	8005534 <HAL_UART_Transmit>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 8001216:	2200      	movs	r2, #0
 8001218:	4628      	mov	r0, r5
 800121a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800121e:	f002 fb41 	bl	80038a4 <HAL_GPIO_WritePin>
		uart_transmit_string(&huart1,(uint8_t*) "\n\n");
 8001222:	4620      	mov	r0, r4
 8001224:	490b      	ldr	r1, [pc, #44]	@ (8001254 <StartGPS+0xac>)
 8001226:	f002 f8c7 	bl	80033b8 <uart_transmit_string>
		HAL_Delay(1000);
 800122a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800122e:	f002 f92b 	bl	8003488 <HAL_Delay>
	while(1)
 8001232:	e7dd      	b.n	80011f0 <StartGPS+0x48>
 8001234:	0800c95c 	.word	0x0800c95c
 8001238:	2000118c 	.word	0x2000118c
 800123c:	48000800 	.word	0x48000800
 8001240:	200002c4 	.word	0x200002c4
 8001244:	20001104 	.word	0x20001104
 8001248:	20000ac4 	.word	0x20000ac4
 800124c:	200002c0 	.word	0x200002c0
 8001250:	0800c969 	.word	0x0800c969
 8001254:	0800c977 	.word	0x0800c977

08001258 <create_location_info_report>:
int is_set_time = 0;
int received_RMC = 0;
RMCSTRUCT rmc_jt;
uint8_t terminal_phone_number[6] = {0};

JT808_LocationInfoReport create_location_info_report() {
 8001258:	b530      	push	{r4, r5, lr}
	JT808_LocationInfoReport location_info = {
 800125a:	2541      	movs	r5, #65	@ 0x41
JT808_LocationInfoReport create_location_info_report() {
 800125c:	b093      	sub	sp, #76	@ 0x4c
 800125e:	4604      	mov	r4, r0
	JT808_LocationInfoReport location_info = {
 8001260:	462a      	mov	r2, r5
 8001262:	4906      	ldr	r1, [pc, #24]	@ (800127c <create_location_info_report+0x24>)
 8001264:	a801      	add	r0, sp, #4
 8001266:	f008 f900 	bl	800946a <memcpy>
        .signal = {0x31},                      // 31
        .additional = {0x01, 0x00, 0xFD, 0x04, 0x03, 0xF1, 0x00, 0x00, 0x0A}, // 01 00 FD 04 03 F1 00 00 0A
        .end_mask = 0x7E                       // 7E
    };
    
    return location_info;
 800126a:	462a      	mov	r2, r5
 800126c:	a901      	add	r1, sp, #4
 800126e:	4620      	mov	r0, r4
 8001270:	f008 f8fb 	bl	800946a <memcpy>
}
 8001274:	4620      	mov	r0, r4
 8001276:	b013      	add	sp, #76	@ 0x4c
 8001278:	bd30      	pop	{r4, r5, pc}
 800127a:	bf00      	nop
 800127c:	0800c7b0 	.word	0x0800c7b0

08001280 <create_terminal_registration>:

JT808_TerminalRegistration create_terminal_registration(){
 8001280:	b5f0      	push	{r4, r5, r6, r7, lr}
	JT808_TerminalRegistration reg_msg = {
 8001282:	4b11      	ldr	r3, [pc, #68]	@ (80012c8 <create_terminal_registration+0x48>)
JT808_TerminalRegistration create_terminal_registration(){
 8001284:	b091      	sub	sp, #68	@ 0x44
	JT808_TerminalRegistration reg_msg = {
 8001286:	ac01      	add	r4, sp, #4
JT808_TerminalRegistration create_terminal_registration(){
 8001288:	4605      	mov	r5, r0
	JT808_TerminalRegistration reg_msg = {
 800128a:	f103 0738 	add.w	r7, r3, #56	@ 0x38
 800128e:	4622      	mov	r2, r4
 8001290:	6818      	ldr	r0, [r3, #0]
 8001292:	6859      	ldr	r1, [r3, #4]
 8001294:	4626      	mov	r6, r4
 8001296:	c603      	stmia	r6!, {r0, r1}
 8001298:	3308      	adds	r3, #8
 800129a:	42bb      	cmp	r3, r7
 800129c:	4634      	mov	r4, r6
 800129e:	d1f7      	bne.n	8001290 <create_terminal_registration+0x10>
 80012a0:	6818      	ldr	r0, [r3, #0]
 80012a2:	6030      	str	r0, [r6, #0]
        .plate_no = {0x00, 0x00, 0x00, 0x00, 0x35, 0x36, 0x37, 0x38, 0x39, 0x31, 0x20, 0x02, 0xD4, 0xC1, 0x41, 0x30, 0x30, 0x30, 0x30, 0x30},
        .check_sum = 0x00,  // Placeholder, will be set by the function
        .end_mask = 0x7E
    };

	return reg_msg;
 80012a4:	4613      	mov	r3, r2
 80012a6:	ae0f      	add	r6, sp, #60	@ 0x3c
 80012a8:	462a      	mov	r2, r5
 80012aa:	461c      	mov	r4, r3
 80012ac:	cc03      	ldmia	r4!, {r0, r1}
 80012ae:	42b4      	cmp	r4, r6
 80012b0:	6010      	str	r0, [r2, #0]
 80012b2:	6051      	str	r1, [r2, #4]
 80012b4:	4623      	mov	r3, r4
 80012b6:	f102 0208 	add.w	r2, r2, #8
 80012ba:	d1f6      	bne.n	80012aa <create_terminal_registration+0x2a>
 80012bc:	6820      	ldr	r0, [r4, #0]
 80012be:	6010      	str	r0, [r2, #0]
}
 80012c0:	4628      	mov	r0, r5
 80012c2:	b011      	add	sp, #68	@ 0x44
 80012c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012c6:	bf00      	nop
 80012c8:	0800c7f1 	.word	0x0800c7f1

080012cc <set_status_bit>:
void clearBit(uint8_t *status, int bitPosition) {
    *status &= ~(1 << bitPosition); // Clear the specific bit to 0
}

void set_status_bit(uint8_t *status_bit){
	if(rmc_jt.lcation.NS == 'N') clearBit(status_bit+3, 2);
 80012cc:	4a0a      	ldr	r2, [pc, #40]	@ (80012f8 <set_status_bit+0x2c>)
    *status &= ~(1 << bitPosition); // Clear the specific bit to 0
 80012ce:	78c3      	ldrb	r3, [r0, #3]
	if(rmc_jt.lcation.NS == 'N') clearBit(status_bit+3, 2);
 80012d0:	f892 1040 	ldrb.w	r1, [r2, #64]	@ 0x40
 80012d4:	294e      	cmp	r1, #78	@ 0x4e
    *status &= ~(1 << bitPosition); // Clear the specific bit to 0
 80012d6:	bf0c      	ite	eq
 80012d8:	f003 03fb 	andeq.w	r3, r3, #251	@ 0xfb
    *status |= (1 << bitPosition);  // Set the specific bit to 1
 80012dc:	f043 0304 	orrne.w	r3, r3, #4
 80012e0:	70c3      	strb	r3, [r0, #3]
	else setBit(status_bit+3, 2);

	if(rmc_jt.lcation.EW == 'E') clearBit(status_bit+3, 3);
 80012e2:	f892 2050 	ldrb.w	r2, [r2, #80]	@ 0x50
 80012e6:	2a45      	cmp	r2, #69	@ 0x45
    *status &= ~(1 << bitPosition); // Clear the specific bit to 0
 80012e8:	bf0c      	ite	eq
 80012ea:	f003 03f7 	andeq.w	r3, r3, #247	@ 0xf7
    *status |= (1 << bitPosition);  // Set the specific bit to 1
 80012ee:	f043 0308 	orrne.w	r3, r3, #8
 80012f2:	70c3      	strb	r3, [r0, #3]
	else setBit(status_bit+3, 3);
}
 80012f4:	4770      	bx	lr
 80012f6:	bf00      	nop
 80012f8:	20000b60 	.word	0x20000b60

080012fc <calculate_checksum>:

uint8_t calculate_checksum(uint8_t *data, size_t length) {
 80012fc:	b510      	push	{r4, lr}
 80012fe:	4602      	mov	r2, r0
    uint8_t checksum = 0;
    for (size_t i = 1; i < length - 2; i++) {  // Skip start and end markers
 8001300:	2301      	movs	r3, #1
    uint8_t checksum = 0;
 8001302:	2000      	movs	r0, #0
    for (size_t i = 1; i < length - 2; i++) {  // Skip start and end markers
 8001304:	3902      	subs	r1, #2
 8001306:	4299      	cmp	r1, r3
 8001308:	d800      	bhi.n	800130c <calculate_checksum+0x10>
        checksum ^= data[i];
    }
    return checksum;
}
 800130a:	bd10      	pop	{r4, pc}
        checksum ^= data[i];
 800130c:	5cd4      	ldrb	r4, [r2, r3]
    for (size_t i = 1; i < length - 2; i++) {  // Skip start and end markers
 800130e:	3301      	adds	r3, #1
        checksum ^= data[i];
 8001310:	4060      	eors	r0, r4
    for (size_t i = 1; i < length - 2; i++) {  // Skip start and end markers
 8001312:	e7f8      	b.n	8001306 <calculate_checksum+0xa>

08001314 <create_message_array>:

// Function to create and return the message array
uint8_t* create_message_array(JT808_TerminalRegistration *reg_msg, size_t *array_length) {
 8001314:	b570      	push	{r4, r5, r6, lr}
    // Calculate the size of the array
    *array_length = sizeof(JT808_TerminalRegistration);
 8001316:	263c      	movs	r6, #60	@ 0x3c
uint8_t* create_message_array(JT808_TerminalRegistration *reg_msg, size_t *array_length) {
 8001318:	4604      	mov	r4, r0
    *array_length = sizeof(JT808_TerminalRegistration);
 800131a:	600e      	str	r6, [r1, #0]
    
    // Allocate memory for the message array
    uint8_t *message_array = (uint8_t *)malloc(*array_length);
 800131c:	4630      	mov	r0, r6
 800131e:	f005 fdd5 	bl	8006ecc <malloc>
    if (message_array == NULL) {
 8001322:	4605      	mov	r5, r0
 8001324:	b198      	cbz	r0, 800134e <create_message_array+0x3a>
        return NULL; // Return NULL if allocation fails
    }

    // Calculate checksum and assign it to the struct
    reg_msg->check_sum = calculate_checksum((uint8_t *)reg_msg, sizeof(JT808_TerminalRegistration));
 8001326:	4631      	mov	r1, r6
 8001328:	4620      	mov	r0, r4
 800132a:	f7ff ffe7 	bl	80012fc <calculate_checksum>

    // Copy struct contents into the message array
    memcpy(message_array, reg_msg, *array_length);
 800132e:	f104 0638 	add.w	r6, r4, #56	@ 0x38
    reg_msg->check_sum = calculate_checksum((uint8_t *)reg_msg, sizeof(JT808_TerminalRegistration));
 8001332:	f884 003a 	strb.w	r0, [r4, #58]	@ 0x3a
    memcpy(message_array, reg_msg, *array_length);
 8001336:	4623      	mov	r3, r4
 8001338:	462a      	mov	r2, r5
 800133a:	6818      	ldr	r0, [r3, #0]
 800133c:	6859      	ldr	r1, [r3, #4]
 800133e:	4614      	mov	r4, r2
 8001340:	c403      	stmia	r4!, {r0, r1}
 8001342:	3308      	adds	r3, #8
 8001344:	42b3      	cmp	r3, r6
 8001346:	4622      	mov	r2, r4
 8001348:	d1f7      	bne.n	800133a <create_message_array+0x26>
 800134a:	6818      	ldr	r0, [r3, #0]
 800134c:	6020      	str	r0, [r4, #0]

    return message_array;
}
 800134e:	4628      	mov	r0, r5
 8001350:	bd70      	pop	{r4, r5, r6, pc}

08001352 <convert_location_info_to_array>:

uint8_t *convert_location_info_to_array(JT808_LocationInfoReport *location_info, size_t *array_length) {
 8001352:	b570      	push	{r4, r5, r6, lr}
    *array_length = sizeof(JT808_LocationInfoReport);
 8001354:	2641      	movs	r6, #65	@ 0x41
uint8_t *convert_location_info_to_array(JT808_LocationInfoReport *location_info, size_t *array_length) {
 8001356:	4605      	mov	r5, r0
    *array_length = sizeof(JT808_LocationInfoReport);
 8001358:	600e      	str	r6, [r1, #0]
    uint8_t *message_array = malloc(*array_length);
 800135a:	4630      	mov	r0, r6
 800135c:	f005 fdb6 	bl	8006ecc <malloc>
 8001360:	4604      	mov	r4, r0

    if (message_array == NULL) {
 8001362:	b118      	cbz	r0, 800136c <convert_location_info_to_array+0x1a>
        return NULL;  // Allocation failed
    }

    memcpy(message_array, location_info, *array_length);  // Copy struct data into message array
 8001364:	4632      	mov	r2, r6
 8001366:	4629      	mov	r1, r5
 8001368:	f008 f87f 	bl	800946a <memcpy>

    return message_array;
}
 800136c:	4620      	mov	r0, r4
 800136e:	bd70      	pop	{r4, r5, r6, pc}

08001370 <send_AT_command>:

void send_AT_command(const char *command) {
 8001370:	b510      	push	{r4, lr}
 8001372:	4604      	mov	r4, r0
    HAL_UART_Transmit(&huart3, (uint8_t *)command, strlen(command), HAL_MAX_DELAY);
 8001374:	f7fe ff8c 	bl	8000290 <strlen>
 8001378:	4621      	mov	r1, r4
 800137a:	b282      	uxth	r2, r0
}
 800137c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_UART_Transmit(&huart3, (uint8_t *)command, strlen(command), HAL_MAX_DELAY);
 8001380:	4802      	ldr	r0, [pc, #8]	@ (800138c <send_AT_command+0x1c>)
 8001382:	f04f 33ff 	mov.w	r3, #4294967295
 8001386:	f004 b8d5 	b.w	8005534 <HAL_UART_Transmit>
 800138a:	bf00      	nop
 800138c:	2000107c 	.word	0x2000107c

08001390 <SIM_UART_ReInitializeRxDMA>:

void SIM_UART_ReInitializeRxDMA(void){
 8001390:	b510      	push	{r4, lr}
	HAL_StatusTypeDef ret = HAL_UART_Abort(&huart3);
 8001392:	4809      	ldr	r0, [pc, #36]	@ (80013b8 <SIM_UART_ReInitializeRxDMA+0x28>)
 8001394:	f003 fe61 	bl	800505a <HAL_UART_Abort>
	if(ret != HAL_OK)
 8001398:	b108      	cbz	r0, 800139e <SIM_UART_ReInitializeRxDMA+0xe>
	{
		Error_Handler();			
 800139a:	f001 fa34 	bl	8002806 <Error_Handler>
	}		
	HAL_Delay(50);	//	50 is OK
 800139e:	2032      	movs	r0, #50	@ 0x32
 80013a0:	f002 f872 	bl	8003488 <HAL_Delay>
	//memset(gnssDmaRingBufferMemory, 0x20, sizeof(gnssDmaRingBufferMemory));	// insert buffer with space character	
	RingBufferDmaU8_initUSARTRx(&SIMRxDMARing, &huart3, response, SIM_RESPONSE_MAX_SIZE);
}
 80013a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	RingBufferDmaU8_initUSARTRx(&SIMRxDMARing, &huart3, response, SIM_RESPONSE_MAX_SIZE);
 80013a8:	4a04      	ldr	r2, [pc, #16]	@ (80013bc <SIM_UART_ReInitializeRxDMA+0x2c>)
 80013aa:	4903      	ldr	r1, [pc, #12]	@ (80013b8 <SIM_UART_ReInitializeRxDMA+0x28>)
 80013ac:	4804      	ldr	r0, [pc, #16]	@ (80013c0 <SIM_UART_ReInitializeRxDMA+0x30>)
 80013ae:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 80013b2:	f001 b85f 	b.w	8002474 <RingBufferDmaU8_initUSARTRx>
 80013b6:	bf00      	nop
 80013b8:	2000107c 	.word	0x2000107c
 80013bc:	20000bd0 	.word	0x20000bd0
 80013c0:	20000bc0 	.word	0x20000bc0

080013c4 <find_length>:

int find_length(uint8_t *str){
	int i = 0;
	while(str[i] != 0x00){
 80013c4:	f7fe bf64 	b.w	8000290 <strlen>

080013c8 <receive_response>:
	}
	return i;
		
}

void receive_response(char *cmd_str) {
 80013c8:	b530      	push	{r4, r5, lr}
	uint8_t output_buffer[128];
	snprintf((char *)output_buffer, 128, "Response at command: %s\n", cmd_str);
	uart_transmit_string(&huart1, output_buffer);
 80013ca:	4c10      	ldr	r4, [pc, #64]	@ (800140c <receive_response+0x44>)
	snprintf((char *)output_buffer, 128, "Response at command: %s\n", cmd_str);
 80013cc:	4a10      	ldr	r2, [pc, #64]	@ (8001410 <receive_response+0x48>)
	//while(response[1] == '\0'){}

	HAL_UART_Transmit(&huart1, response, find_length(response), 1000);
 80013ce:	4d11      	ldr	r5, [pc, #68]	@ (8001414 <receive_response+0x4c>)
void receive_response(char *cmd_str) {
 80013d0:	b0a1      	sub	sp, #132	@ 0x84
 80013d2:	4603      	mov	r3, r0
	snprintf((char *)output_buffer, 128, "Response at command: %s\n", cmd_str);
 80013d4:	2180      	movs	r1, #128	@ 0x80
 80013d6:	4668      	mov	r0, sp
 80013d8:	f007 f960 	bl	800869c <sniprintf>
	uart_transmit_string(&huart1, output_buffer);
 80013dc:	4669      	mov	r1, sp
 80013de:	4620      	mov	r0, r4
 80013e0:	f001 ffea 	bl	80033b8 <uart_transmit_string>
	HAL_UART_Transmit(&huart1, response, find_length(response), 1000);
 80013e4:	4628      	mov	r0, r5
 80013e6:	f7ff ffed 	bl	80013c4 <find_length>
 80013ea:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80013ee:	b282      	uxth	r2, r0
 80013f0:	4629      	mov	r1, r5
 80013f2:	4620      	mov	r0, r4
 80013f4:	f004 f89e 	bl	8005534 <HAL_UART_Transmit>
	uart_transmit_string(&huart1, (uint8_t*)"\n");
 80013f8:	4907      	ldr	r1, [pc, #28]	@ (8001418 <receive_response+0x50>)
 80013fa:	4620      	mov	r0, r4
 80013fc:	f001 ffdc 	bl	80033b8 <uart_transmit_string>
	osDelay(1000);
 8001400:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001404:	f004 fa06 	bl	8005814 <osDelay>
}
 8001408:	b021      	add	sp, #132	@ 0x84
 800140a:	bd30      	pop	{r4, r5, pc}
 800140c:	2000118c 	.word	0x2000118c
 8001410:	0800c97a 	.word	0x0800c97a
 8001414:	20000bd0 	.word	0x20000bd0
 8001418:	0800c978 	.word	0x0800c978

0800141c <init_SIM_module>:

void init_SIM_module() {
 800141c:	b510      	push	{r4, lr}
    
    // Check if module responds
	SIM_ENABLE();
 800141e:	4c0b      	ldr	r4, [pc, #44]	@ (800144c <init_SIM_module+0x30>)
 8001420:	2201      	movs	r2, #1
 8001422:	4611      	mov	r1, r2
 8001424:	4620      	mov	r0, r4
 8001426:	f002 fa3d 	bl	80038a4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 800142a:	2200      	movs	r2, #0
 800142c:	2102      	movs	r1, #2
 800142e:	4620      	mov	r0, r4
 8001430:	f002 fa38 	bl	80038a4 <HAL_GPIO_WritePin>
	osDelay(1000);
 8001434:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001438:	f004 f9ec 	bl	8005814 <osDelay>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 800143c:	4620      	mov	r0, r4
 800143e:	2201      	movs	r2, #1
}
 8001440:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 8001444:	2102      	movs	r1, #2
 8001446:	f002 ba2d 	b.w	80038a4 <HAL_GPIO_WritePin>
 800144a:	bf00      	nop
 800144c:	48000800 	.word	0x48000800

08001450 <reboot_SIM_module>:

void reboot_SIM_module(){
 8001450:	b510      	push	{r4, lr}
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 8001452:	4c11      	ldr	r4, [pc, #68]	@ (8001498 <reboot_SIM_module+0x48>)
 8001454:	2200      	movs	r2, #0
 8001456:	2102      	movs	r1, #2
 8001458:	4620      	mov	r0, r4
 800145a:	f002 fa23 	bl	80038a4 <HAL_GPIO_WritePin>
	osDelay(1500);
 800145e:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8001462:	f004 f9d7 	bl	8005814 <osDelay>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 8001466:	2201      	movs	r2, #1
 8001468:	2102      	movs	r1, #2
 800146a:	4620      	mov	r0, r4
 800146c:	f002 fa1a 	bl	80038a4 <HAL_GPIO_WritePin>
	osDelay(2000);
 8001470:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001474:	f004 f9ce 	bl	8005814 <osDelay>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 8001478:	2200      	movs	r2, #0
 800147a:	2102      	movs	r1, #2
 800147c:	4620      	mov	r0, r4
 800147e:	f002 fa11 	bl	80038a4 <HAL_GPIO_WritePin>
	osDelay(1500);
 8001482:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8001486:	f004 f9c5 	bl	8005814 <osDelay>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 800148a:	4620      	mov	r0, r4
 800148c:	2201      	movs	r2, #1
}
 800148e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 8001492:	2102      	movs	r1, #2
 8001494:	f002 ba06 	b.w	80038a4 <HAL_GPIO_WritePin>
 8001498:	48000800 	.word	0x48000800

0800149c <first_check_SIM>:


int first_check_SIM(){
 800149c:	b508      	push	{r3, lr}
		const char *substring = "READY";
		int receive_OK = 0;
		if(strstr((char *) response, substring) != NULL)
 800149e:	490c      	ldr	r1, [pc, #48]	@ (80014d0 <first_check_SIM+0x34>)
 80014a0:	480c      	ldr	r0, [pc, #48]	@ (80014d4 <first_check_SIM+0x38>)
 80014a2:	f007 f9d8 	bl	8008856 <strstr>
 80014a6:	b188      	cbz	r0, 80014cc <first_check_SIM+0x30>
		{
			send_AT_command(FIRST_CHECK);
 80014a8:	480b      	ldr	r0, [pc, #44]	@ (80014d8 <first_check_SIM+0x3c>)
 80014aa:	f7ff ff61 	bl	8001370 <send_AT_command>
			receive_response("First check SIM MODULE\n");
 80014ae:	480b      	ldr	r0, [pc, #44]	@ (80014dc <first_check_SIM+0x40>)
 80014b0:	f7ff ff8a 	bl	80013c8 <receive_response>
			osDelay(100);
 80014b4:	2064      	movs	r0, #100	@ 0x64
 80014b6:	f004 f9ad 	bl	8005814 <osDelay>
			memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 80014ba:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 80014be:	2100      	movs	r1, #0
 80014c0:	4804      	ldr	r0, [pc, #16]	@ (80014d4 <first_check_SIM+0x38>)
 80014c2:	f007 f9ae 	bl	8008822 <memset>
			SIM_UART_ReInitializeRxDMA();
 80014c6:	f7ff ff63 	bl	8001390 <SIM_UART_ReInitializeRxDMA>
 80014ca:	2001      	movs	r0, #1
			receive_OK = 1;
		}
		return receive_OK;
}
 80014cc:	bd08      	pop	{r3, pc}
 80014ce:	bf00      	nop
 80014d0:	0800c993 	.word	0x0800c993
 80014d4:	20000bd0 	.word	0x20000bd0
 80014d8:	0800c999 	.word	0x0800c999
 80014dc:	0800c99e 	.word	0x0800c99e

080014e0 <set_time>:

void set_time (uint8_t hr, uint8_t min, uint8_t sec)
{
 80014e0:	b570      	push	{r4, r5, r6, lr}
 80014e2:	b086      	sub	sp, #24
 80014e4:	4606      	mov	r6, r0
 80014e6:	460d      	mov	r5, r1
 80014e8:	4614      	mov	r4, r2
	RTC_TimeTypeDef sTime = {0};
 80014ea:	2100      	movs	r1, #0
 80014ec:	2211      	movs	r2, #17
 80014ee:	f10d 0007 	add.w	r0, sp, #7
 80014f2:	f007 f996 	bl	8008822 <memset>
	sTime.Hours = hr;
	sTime.Minutes = min;
	sTime.Seconds = sec;
	sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
	sTime.StoreOperation = RTC_STOREOPERATION_RESET;
	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 80014f6:	4808      	ldr	r0, [pc, #32]	@ (8001518 <set_time+0x38>)
	sTime.Hours = hr;
 80014f8:	f88d 6004 	strb.w	r6, [sp, #4]
	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 80014fc:	2200      	movs	r2, #0
 80014fe:	a901      	add	r1, sp, #4
	sTime.Minutes = min;
 8001500:	f88d 5005 	strb.w	r5, [sp, #5]
	sTime.Seconds = sec;
 8001504:	f88d 4006 	strb.w	r4, [sp, #6]
	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8001508:	f002 feee 	bl	80042e8 <HAL_RTC_SetTime>
 800150c:	b108      	cbz	r0, 8001512 <set_time+0x32>
	{
		Error_Handler();
 800150e:	f001 f97a 	bl	8002806 <Error_Handler>
	}
}
 8001512:	b006      	add	sp, #24
 8001514:	bd70      	pop	{r4, r5, r6, pc}
 8001516:	bf00      	nop
 8001518:	20001278 	.word	0x20001278

0800151c <set_date>:

void set_date (uint8_t year, uint8_t month, uint8_t date)  // monday = 1
{
 800151c:	b507      	push	{r0, r1, r2, lr}
	RTC_DateTypeDef sDate = {0};
 800151e:	2300      	movs	r3, #0
	sDate.Month = month;
 8001520:	f88d 1005 	strb.w	r1, [sp, #5]
	sDate.Date = date;
 8001524:	f88d 2006 	strb.w	r2, [sp, #6]
	sDate.Year = year;
 8001528:	f88d 0007 	strb.w	r0, [sp, #7]
	if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 800152c:	461a      	mov	r2, r3
 800152e:	4809      	ldr	r0, [pc, #36]	@ (8001554 <set_date+0x38>)
	RTC_DateTypeDef sDate = {0};
 8001530:	f88d 3004 	strb.w	r3, [sp, #4]
	if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8001534:	a901      	add	r1, sp, #4
 8001536:	f002 ff31 	bl	800439c <HAL_RTC_SetDate>
 800153a:	b108      	cbz	r0, 8001540 <set_date+0x24>
	{
		Error_Handler();
 800153c:	f001 f963 	bl	8002806 <Error_Handler>
	}

	HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x2345);  // backup register
 8001540:	4804      	ldr	r0, [pc, #16]	@ (8001554 <set_date+0x38>)
 8001542:	f242 3245 	movw	r2, #9029	@ 0x2345
 8001546:	2101      	movs	r1, #1
 8001548:	f002 ffb8 	bl	80044bc <HAL_RTCEx_BKUPWrite>
}
 800154c:	b003      	add	sp, #12
 800154e:	f85d fb04 	ldr.w	pc, [sp], #4
 8001552:	bf00      	nop
 8001554:	20001278 	.word	0x20001278

08001558 <convert_dec_to_hex_value>:

int convert_dec_to_hex_value(int int_value){
    return (int_value /10*16) + (int_value%10);
 8001558:	220a      	movs	r2, #10
 800155a:	fb90 f3f2 	sdiv	r3, r0, r2
 800155e:	fb02 0013 	mls	r0, r2, r3, r0
}
 8001562:	eb00 1003 	add.w	r0, r0, r3, lsl #4
 8001566:	4770      	bx	lr

08001568 <save_rmc_to_location_info>:


void save_rmc_to_location_info(JT808_LocationInfoReport* location_info){
 8001568:	b570      	push	{r4, r5, r6, lr}
	location_info->timestamp[0] = (uint8_t)convert_dec_to_hex_value(rmc_jt.date.Yr);  // Assign year (0x23)
 800156a:	4d43      	ldr	r5, [pc, #268]	@ (8001678 <save_rmc_to_location_info+0x110>)
void save_rmc_to_location_info(JT808_LocationInfoReport* location_info){
 800156c:	4604      	mov	r4, r0
	location_info->timestamp[0] = (uint8_t)convert_dec_to_hex_value(rmc_jt.date.Yr);  // Assign year (0x23)
 800156e:	69a8      	ldr	r0, [r5, #24]
 8001570:	f7ff fff2 	bl	8001558 <convert_dec_to_hex_value>
 8001574:	f884 0023 	strb.w	r0, [r4, #35]	@ 0x23
	location_info->timestamp[1] = (uint8_t)convert_dec_to_hex_value(rmc_jt.date.Mon);          // Assign month (0x11)
 8001578:	6968      	ldr	r0, [r5, #20]
 800157a:	f7ff ffed 	bl	8001558 <convert_dec_to_hex_value>
 800157e:	f884 0024 	strb.w	r0, [r4, #36]	@ 0x24
	location_info->timestamp[2] = (uint8_t)convert_dec_to_hex_value(rmc_jt.date.Day);            // Assign day (0x08)
 8001582:	6928      	ldr	r0, [r5, #16]
 8001584:	f7ff ffe8 	bl	8001558 <convert_dec_to_hex_value>
 8001588:	f884 0025 	strb.w	r0, [r4, #37]	@ 0x25
	location_info->timestamp[3] = (uint8_t)convert_dec_to_hex_value(rmc_jt.tim.hour);           // Assign hour (0x14)
 800158c:	6828      	ldr	r0, [r5, #0]
 800158e:	f7ff ffe3 	bl	8001558 <convert_dec_to_hex_value>
 8001592:	f884 0026 	strb.w	r0, [r4, #38]	@ 0x26
	location_info->timestamp[4] = (uint8_t)convert_dec_to_hex_value(rmc_jt.tim.min);         // Assign minute (0x55)
 8001596:	6868      	ldr	r0, [r5, #4]
 8001598:	f7ff ffde 	bl	8001558 <convert_dec_to_hex_value>
 800159c:	f884 0027 	strb.w	r0, [r4, #39]	@ 0x27
	location_info->timestamp[5] = (uint8_t)convert_dec_to_hex_value(rmc_jt.tim.sec);  
 80015a0:	68a8      	ldr	r0, [r5, #8]
 80015a2:	f7ff ffd9 	bl	8001558 <convert_dec_to_hex_value>
 80015a6:	f884 0028 	strb.w	r0, [r4, #40]	@ 0x28
	double latitude = rmc_jt.lcation.latitude * 1000000;
 80015aa:	e9d5 010e 	ldrd	r0, r1, [r5, #56]	@ 0x38
 80015ae:	a32e      	add	r3, pc, #184	@ (adr r3, 8001668 <save_rmc_to_location_info+0x100>)
 80015b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015b4:	f7ff f830 	bl	8000618 <__aeabi_dmul>
	double longitude = rmc_jt.lcation.longitude * 1000000;
	int32_t latitude_int = (int32_t)round(latitude);  // Convert to integer, rounding if needed
 80015b8:	ec41 0b10 	vmov	d0, r0, r1
 80015bc:	f00b f8a4 	bl	800c708 <round>
 80015c0:	ec51 0b10 	vmov	r0, r1, d0
 80015c4:	f7ff fad8 	bl	8000b78 <__aeabi_d2iz>
	double longitude = rmc_jt.lcation.longitude * 1000000;
 80015c8:	a327      	add	r3, pc, #156	@ (adr r3, 8001668 <save_rmc_to_location_info+0x100>)
 80015ca:	e9d3 2300 	ldrd	r2, r3, [r3]
	int32_t latitude_int = (int32_t)round(latitude);  // Convert to integer, rounding if needed
 80015ce:	4606      	mov	r6, r0
	double longitude = rmc_jt.lcation.longitude * 1000000;
 80015d0:	e9d5 0112 	ldrd	r0, r1, [r5, #72]	@ 0x48
 80015d4:	f7ff f820 	bl	8000618 <__aeabi_dmul>
	int32_t longitude_int = (int32_t)round(longitude);
 80015d8:	ec41 0b10 	vmov	d0, r0, r1
 80015dc:	f00b f894 	bl	800c708 <round>
 80015e0:	ec51 0b10 	vmov	r0, r1, d0
 80015e4:	f7ff fac8 	bl	8000b78 <__aeabi_d2iz>
	
	location_info->latitude[0] = (latitude_int >> 24) & 0xFF;  // Most significant byte
 80015e8:	0e33      	lsrs	r3, r6, #24
 80015ea:	7563      	strb	r3, [r4, #21]
	location_info->latitude[1] = (latitude_int >> 16) & 0xFF;
 80015ec:	1433      	asrs	r3, r6, #16
 80015ee:	75a3      	strb	r3, [r4, #22]
	location_info->latitude[2] = (latitude_int >> 8) & 0xFF;
 80015f0:	1233      	asrs	r3, r6, #8
 80015f2:	75e3      	strb	r3, [r4, #23]
	location_info->latitude[3] = latitude_int & 0xFF;
	
	location_info->longitude[0] = (longitude_int >> 24) & 0xFF;  // Most significant byte
 80015f4:	0e03      	lsrs	r3, r0, #24
 80015f6:	7663      	strb	r3, [r4, #25]
	location_info->longitude[1] = (longitude_int >> 16) & 0xFF;
 80015f8:	1403      	asrs	r3, r0, #16
 80015fa:	76a3      	strb	r3, [r4, #26]
	location_info->longitude[2] = (longitude_int >> 8) & 0xFF;
 80015fc:	1203      	asrs	r3, r0, #8
 80015fe:	76e3      	strb	r3, [r4, #27]
	location_info->longitude[3] = longitude_int & 0xFF;
 8001600:	7720      	strb	r0, [r4, #28]
	location_info->latitude[3] = latitude_int & 0xFF;
 8001602:	7626      	strb	r6, [r4, #24]
	
	int speed = round(rmc_jt.speed * 10 * 1.852);
 8001604:	ed95 7a0a 	vldr	s14, [r5, #40]	@ 0x28
 8001608:	eef2 7a04 	vmov.f32	s15, #36	@ 0x41200000  10.0
 800160c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001610:	ee17 0a90 	vmov	r0, s15
 8001614:	f7fe ffa8 	bl	8000568 <__aeabi_f2d>
 8001618:	a315      	add	r3, pc, #84	@ (adr r3, 8001670 <save_rmc_to_location_info+0x108>)
 800161a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800161e:	f7fe fffb 	bl	8000618 <__aeabi_dmul>
 8001622:	ec41 0b10 	vmov	d0, r0, r1
 8001626:	f00b f86f 	bl	800c708 <round>
 800162a:	ec51 0b10 	vmov	r0, r1, d0
 800162e:	f7ff faa3 	bl	8000b78 <__aeabi_d2iz>
	location_info->speed[0] = (speed >> 8) & 0xFF;
 8001632:	1203      	asrs	r3, r0, #8
 8001634:	77e3      	strb	r3, [r4, #31]
	location_info->speed[1] =  speed & 0xFF;
 8001636:	f884 0020 	strb.w	r0, [r4, #32]
	
	int direction = round(rmc_jt.course);
 800163a:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 800163c:	f7fe ff94 	bl	8000568 <__aeabi_f2d>
 8001640:	ec41 0b10 	vmov	d0, r0, r1
 8001644:	f00b f860 	bl	800c708 <round>
 8001648:	ec51 0b10 	vmov	r0, r1, d0
 800164c:	f7ff fa94 	bl	8000b78 <__aeabi_d2iz>
	location_info->direction[0] = (direction >> 8) & 0xFF;
 8001650:	1203      	asrs	r3, r0, #8
	location_info->direction[1] =  direction & 0xFF;
 8001652:	f884 0022 	strb.w	r0, [r4, #34]	@ 0x22
	location_info->direction[0] = (direction >> 8) & 0xFF;
 8001656:	f884 3021 	strb.w	r3, [r4, #33]	@ 0x21
	
	set_status_bit(&(location_info->status));
 800165a:	f104 0011 	add.w	r0, r4, #17
}
 800165e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	set_status_bit(&(location_info->status));
 8001662:	f7ff be33 	b.w	80012cc <set_status_bit>
 8001666:	bf00      	nop
 8001668:	00000000 	.word	0x00000000
 800166c:	412e8480 	.word	0x412e8480
 8001670:	c083126f 	.word	0xc083126f
 8001674:	3ffda1ca 	.word	0x3ffda1ca
 8001678:	20000b60 	.word	0x20000b60

0800167c <get_RTC_time_date>:

void get_RTC_time_date()
{
 800167c:	b5f0      	push	{r4, r5, r6, r7, lr}
	char date[12]; // "YYYY-MM-DD" format, 10 characters + null terminator
	RTC_DateTypeDef gDate;
	RTC_TimeTypeDef gTime;

	  /* Get the RTC current Time */
	HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BIN);
 800167e:	4c29      	ldr	r4, [pc, #164]	@ (8001724 <get_RTC_time_date+0xa8>)
{
 8001680:	b0b3      	sub	sp, #204	@ 0xcc
	HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BIN);
 8001682:	a90d      	add	r1, sp, #52	@ 0x34
 8001684:	2200      	movs	r2, #0
 8001686:	4620      	mov	r0, r4
 8001688:	f002 fed8 	bl	800443c <HAL_RTC_GetTime>
	/* Get the RTC current Date */
	HAL_RTC_GetDate(&hrtc, &gDate, RTC_FORMAT_BIN);
 800168c:	a906      	add	r1, sp, #24
 800168e:	2200      	movs	r2, #0
 8001690:	4620      	mov	r0, r4
 8001692:	f002 fef6 	bl	8004482 <HAL_RTC_GetDate>

  /* Display time Format: hh:mm:ss */
  /* Format time as "HH:MM:SS" */
	snprintf(time, sizeof(time), "%02d:%02d:%02d\n", gTime.Hours, gTime.Minutes, gTime.Seconds);
 8001696:	f89d 3036 	ldrb.w	r3, [sp, #54]	@ 0x36
	uart_transmit_string(&huart1,(uint8_t*) time);
 800169a:	4c23      	ldr	r4, [pc, #140]	@ (8001728 <get_RTC_time_date+0xac>)
	snprintf(time, sizeof(time), "%02d:%02d:%02d\n", gTime.Hours, gTime.Minutes, gTime.Seconds);
 800169c:	9301      	str	r3, [sp, #4]
 800169e:	f89d 3035 	ldrb.w	r3, [sp, #53]	@ 0x35
 80016a2:	4a22      	ldr	r2, [pc, #136]	@ (800172c <get_RTC_time_date+0xb0>)
 80016a4:	9300      	str	r3, [sp, #0]
 80016a6:	210a      	movs	r1, #10
 80016a8:	f89d 3034 	ldrb.w	r3, [sp, #52]	@ 0x34
 80016ac:	a807      	add	r0, sp, #28
 80016ae:	f006 fff5 	bl	800869c <sniprintf>
	uart_transmit_string(&huart1,(uint8_t*) time);
 80016b2:	a907      	add	r1, sp, #28
 80016b4:	4620      	mov	r0, r4
 80016b6:	f001 fe7f 	bl	80033b8 <uart_transmit_string>

	/* Format date as "YYYY-MM-DD" */
	snprintf(date, sizeof(date), "20%02d-%02d-%02d\n", gDate.Year, gDate.Month, gDate.Date);
 80016ba:	f89d 301a 	ldrb.w	r3, [sp, #26]
 80016be:	9301      	str	r3, [sp, #4]
 80016c0:	f89d 3019 	ldrb.w	r3, [sp, #25]
 80016c4:	4a1a      	ldr	r2, [pc, #104]	@ (8001730 <get_RTC_time_date+0xb4>)
 80016c6:	9300      	str	r3, [sp, #0]
 80016c8:	210c      	movs	r1, #12
 80016ca:	f89d 301b 	ldrb.w	r3, [sp, #27]
 80016ce:	a80a      	add	r0, sp, #40	@ 0x28
 80016d0:	f006 ffe4 	bl	800869c <sniprintf>
	uart_transmit_string(&huart1,(uint8_t*) date);
 80016d4:	a90a      	add	r1, sp, #40	@ 0x28
 80016d6:	4620      	mov	r0, r4
 80016d8:	f001 fe6e 	bl	80033b8 <uart_transmit_string>
	
	rmc_jt.date.Yr = gDate.Year;
 80016dc:	4a15      	ldr	r2, [pc, #84]	@ (8001734 <get_RTC_time_date+0xb8>)
	rmc_jt.date.Mon = gDate.Month;
	rmc_jt.date.Day = gDate.Date;
 80016de:	f89d 001a 	ldrb.w	r0, [sp, #26]
	rmc_jt.tim.hour = gTime.Hours;
 80016e2:	f89d 5034 	ldrb.w	r5, [sp, #52]	@ 0x34
	rmc_jt.tim.min = gTime.Minutes;
 80016e6:	f89d 6035 	ldrb.w	r6, [sp, #53]	@ 0x35
	rmc_jt.tim.sec = gTime.Seconds;
 80016ea:	f89d 7036 	ldrb.w	r7, [sp, #54]	@ 0x36
	rmc_jt.date.Mon = gDate.Month;
 80016ee:	f89d 1019 	ldrb.w	r1, [sp, #25]
	rmc_jt.date.Yr = gDate.Year;
 80016f2:	f89d 301b 	ldrb.w	r3, [sp, #27]
 80016f6:	6193      	str	r3, [r2, #24]
	rmc_jt.date.Mon = gDate.Month;
 80016f8:	6151      	str	r1, [r2, #20]
	rmc_jt.date.Day = gDate.Date;
 80016fa:	6110      	str	r0, [r2, #16]
	rmc_jt.tim.hour = gTime.Hours;
 80016fc:	6015      	str	r5, [r2, #0]
	rmc_jt.tim.min = gTime.Minutes;
 80016fe:	6056      	str	r6, [r2, #4]
	rmc_jt.tim.sec = gTime.Seconds;
 8001700:	6097      	str	r7, [r2, #8]
	
	//save_rmc_to_location_info(location_info);
	snprintf((char*)output_buffer, 128, "Time to GMT+8 saved to RMC: 20%02d/%02d/%02d, %02d:%02d:%02d\n", rmc_jt.date.Yr, rmc_jt.date.Mon, rmc_jt.date.Day, rmc_jt.tim.hour, rmc_jt.tim.min, rmc_jt.tim.sec);
 8001702:	e9cd 0501 	strd	r0, r5, [sp, #4]
 8001706:	4a0c      	ldr	r2, [pc, #48]	@ (8001738 <get_RTC_time_date+0xbc>)
 8001708:	9100      	str	r1, [sp, #0]
 800170a:	e9cd 6703 	strd	r6, r7, [sp, #12]
 800170e:	2180      	movs	r1, #128	@ 0x80
 8001710:	a812      	add	r0, sp, #72	@ 0x48
 8001712:	f006 ffc3 	bl	800869c <sniprintf>
	uart_transmit_string(&huart1, (uint8_t*) output_buffer);
 8001716:	a912      	add	r1, sp, #72	@ 0x48
 8001718:	4620      	mov	r0, r4
 800171a:	f001 fe4d 	bl	80033b8 <uart_transmit_string>
}
 800171e:	b033      	add	sp, #204	@ 0xcc
 8001720:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001722:	bf00      	nop
 8001724:	20001278 	.word	0x20001278
 8001728:	2000118c 	.word	0x2000118c
 800172c:	0800ca59 	.word	0x0800ca59
 8001730:	0800c9b6 	.word	0x0800c9b6
 8001734:	20000b60 	.word	0x20000b60
 8001738:	0800c9c8 	.word	0x0800c9c8

0800173c <extract_time>:


void extract_time(uint8_t *message){
 800173c:	b570      	push	{r4, r5, r6, lr}
    int year, month, day, hour, minute, second;
    uint8_t output_buffer[128];
    // Search for the +CTZE line and extract date and time
    char *tz_line = strstr((char*) message, "+CTZE");
 800173e:	492f      	ldr	r1, [pc, #188]	@ (80017fc <extract_time+0xc0>)
void extract_time(uint8_t *message){
 8001740:	b0ac      	sub	sp, #176	@ 0xb0
    char *tz_line = strstr((char*) message, "+CTZE");
 8001742:	f007 f888 	bl	8008856 <strstr>
    if (tz_line){
 8001746:	2800      	cmp	r0, #0
 8001748:	d052      	beq.n	80017f0 <extract_time+0xb4>
        sscanf(tz_line, "+CTZE: \"+28\",0,\"%d/%d/%d,%d:%d:%d\"", &year, &month, &day, &hour, &minute, &second);
 800174a:	ab0b      	add	r3, sp, #44	@ 0x2c
 800174c:	9303      	str	r3, [sp, #12]
 800174e:	ab0a      	add	r3, sp, #40	@ 0x28
 8001750:	9302      	str	r3, [sp, #8]
 8001752:	ab09      	add	r3, sp, #36	@ 0x24
 8001754:	9301      	str	r3, [sp, #4]
 8001756:	ab08      	add	r3, sp, #32
 8001758:	4929      	ldr	r1, [pc, #164]	@ (8001800 <extract_time+0xc4>)
 800175a:	9300      	str	r3, [sp, #0]
 800175c:	aa06      	add	r2, sp, #24
 800175e:	ab07      	add	r3, sp, #28
 8001760:	f006 fff0 	bl	8008744 <siscanf>
        
        // Adjust for GMT+8 (originally in UTC+8, so add 1 hour)
        hour += 8;
 8001764:	9b09      	ldr	r3, [sp, #36]	@ 0x24
        
		rmc_jt.date.Yr = year-2000;
		rmc_jt.date.Mon = month;
		rmc_jt.date.Day = day;
		rmc_jt.tim.hour = hour;
		rmc_jt.tim.min = minute;
 8001766:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
		rmc_jt.tim.sec = second;
 8001768:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
		rmc_jt.date.Mon = month;
 800176a:	9907      	ldr	r1, [sp, #28]
        hour += 8;
 800176c:	f103 0208 	add.w	r2, r3, #8
        if (hour >= 24) {
 8001770:	2a17      	cmp	r2, #23
            hour -= 24;
 8001772:	bfc3      	ittte	gt
 8001774:	3b10      	subgt	r3, #16
 8001776:	9309      	strgt	r3, [sp, #36]	@ 0x24
            day += 1;
 8001778:	9b08      	ldrgt	r3, [sp, #32]
        hour += 8;
 800177a:	9209      	strle	r2, [sp, #36]	@ 0x24
            day += 1;
 800177c:	bfc4      	itt	gt
 800177e:	3301      	addgt	r3, #1
 8001780:	9308      	strgt	r3, [sp, #32]
		rmc_jt.date.Yr = year-2000;
 8001782:	9b06      	ldr	r3, [sp, #24]
 8001784:	4a1f      	ldr	r2, [pc, #124]	@ (8001804 <extract_time+0xc8>)
		rmc_jt.date.Day = day;
 8001786:	9808      	ldr	r0, [sp, #32]
		rmc_jt.tim.hour = hour;
 8001788:	9c09      	ldr	r4, [sp, #36]	@ 0x24
		rmc_jt.date.Mon = month;
 800178a:	6151      	str	r1, [r2, #20]
		rmc_jt.date.Yr = year-2000;
 800178c:	f5a3 63fa 	sub.w	r3, r3, #2000	@ 0x7d0
 8001790:	6193      	str	r3, [r2, #24]
		rmc_jt.date.Day = day;
 8001792:	6110      	str	r0, [r2, #16]
		rmc_jt.tim.hour = hour;
 8001794:	6014      	str	r4, [r2, #0]
		rmc_jt.tim.min = minute;
 8001796:	6055      	str	r5, [r2, #4]
		rmc_jt.tim.sec = second;
 8001798:	6096      	str	r6, [r2, #8]
        snprintf((char*)output_buffer, 128, "Adjusted time to GMT+8: 20%02d/%02d/%02d, %02d:%02d:%02d\n", rmc_jt.date.Yr, rmc_jt.date.Mon, rmc_jt.date.Day, rmc_jt.tim.hour, rmc_jt.tim.min, rmc_jt.tim.sec);
 800179a:	4a1b      	ldr	r2, [pc, #108]	@ (8001808 <extract_time+0xcc>)
 800179c:	9100      	str	r1, [sp, #0]
 800179e:	e9cd 0401 	strd	r0, r4, [sp, #4]
 80017a2:	2180      	movs	r1, #128	@ 0x80
 80017a4:	e9cd 5603 	strd	r5, r6, [sp, #12]
 80017a8:	a80c      	add	r0, sp, #48	@ 0x30
 80017aa:	f006 ff77 	bl	800869c <sniprintf>
		uart_transmit_string(&huart1, (uint8_t*) "RTC Time: ");
 80017ae:	4917      	ldr	r1, [pc, #92]	@ (800180c <extract_time+0xd0>)
 80017b0:	4817      	ldr	r0, [pc, #92]	@ (8001810 <extract_time+0xd4>)
 80017b2:	f001 fe01 	bl	80033b8 <uart_transmit_string>
		set_time(hour, minute, second);
 80017b6:	f89d 202c 	ldrb.w	r2, [sp, #44]	@ 0x2c
 80017ba:	f89d 1028 	ldrb.w	r1, [sp, #40]	@ 0x28
 80017be:	f89d 0024 	ldrb.w	r0, [sp, #36]	@ 0x24
 80017c2:	f7ff fe8d 	bl	80014e0 <set_time>
		set_date(year-2000, month, day);
 80017c6:	9806      	ldr	r0, [sp, #24]
 80017c8:	f89d 2020 	ldrb.w	r2, [sp, #32]
 80017cc:	f89d 101c 	ldrb.w	r1, [sp, #28]
 80017d0:	3030      	adds	r0, #48	@ 0x30
 80017d2:	b2c0      	uxtb	r0, r0
 80017d4:	f7ff fea2 	bl	800151c <set_date>
		uart_transmit_string(&huart1, (uint8_t*) "\n");
 80017d8:	490e      	ldr	r1, [pc, #56]	@ (8001814 <extract_time+0xd8>)
 80017da:	480d      	ldr	r0, [pc, #52]	@ (8001810 <extract_time+0xd4>)
 80017dc:	f001 fdec 	bl	80033b8 <uart_transmit_string>
		get_RTC_time_date();
 80017e0:	f7ff ff4c 	bl	800167c <get_RTC_time_date>
		uart_transmit_string(&huart1, output_buffer);
	} else {
		snprintf((char*)output_buffer, 128, "Time information not found");
		uart_transmit_string(&huart1, output_buffer);
 80017e4:	480a      	ldr	r0, [pc, #40]	@ (8001810 <extract_time+0xd4>)
 80017e6:	a90c      	add	r1, sp, #48	@ 0x30
 80017e8:	f001 fde6 	bl	80033b8 <uart_transmit_string>
	}
}
 80017ec:	b02c      	add	sp, #176	@ 0xb0
 80017ee:	bd70      	pop	{r4, r5, r6, pc}
		snprintf((char*)output_buffer, 128, "Time information not found");
 80017f0:	4909      	ldr	r1, [pc, #36]	@ (8001818 <extract_time+0xdc>)
 80017f2:	a80c      	add	r0, sp, #48	@ 0x30
 80017f4:	f007 fe31 	bl	800945a <strcpy>
 80017f8:	e7f4      	b.n	80017e4 <extract_time+0xa8>
 80017fa:	bf00      	nop
 80017fc:	0800ca06 	.word	0x0800ca06
 8001800:	0800ca0c 	.word	0x0800ca0c
 8001804:	20000b60 	.word	0x20000b60
 8001808:	0800ca2f 	.word	0x0800ca2f
 800180c:	0800ca69 	.word	0x0800ca69
 8001810:	2000118c 	.word	0x2000118c
 8001814:	0800c978 	.word	0x0800c978
 8001818:	0800ca74 	.word	0x0800ca74

0800181c <extract_last_12_digits_bcd>:

void extract_last_12_digits_bcd(const uint8_t *response, uint8_t *output) {
 800181c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800181e:	460d      	mov	r5, r1
	uint8_t output_buffer[10];
	const uint8_t *start = response;
	while (*start && !(start[0] == 'A' && start[1] == 'T' && start[2] == '+' &&
 8001820:	4604      	mov	r4, r0
 8001822:	f810 3b01 	ldrb.w	r3, [r0], #1
 8001826:	b1cb      	cbz	r3, 800185c <extract_last_12_digits_bcd+0x40>
 8001828:	2b41      	cmp	r3, #65	@ 0x41
 800182a:	d1f9      	bne.n	8001820 <extract_last_12_digits_bcd+0x4>
 800182c:	7803      	ldrb	r3, [r0, #0]
 800182e:	2b54      	cmp	r3, #84	@ 0x54
 8001830:	d1f6      	bne.n	8001820 <extract_last_12_digits_bcd+0x4>
 8001832:	7843      	ldrb	r3, [r0, #1]
 8001834:	2b2b      	cmp	r3, #43	@ 0x2b
 8001836:	d1f3      	bne.n	8001820 <extract_last_12_digits_bcd+0x4>
 8001838:	7883      	ldrb	r3, [r0, #2]
 800183a:	2b43      	cmp	r3, #67	@ 0x43
 800183c:	d1f0      	bne.n	8001820 <extract_last_12_digits_bcd+0x4>
					   start[3] == 'C' && start[4] == 'G' && start[5] == 'S' &&
 800183e:	78c3      	ldrb	r3, [r0, #3]
 8001840:	2b47      	cmp	r3, #71	@ 0x47
 8001842:	d1ed      	bne.n	8001820 <extract_last_12_digits_bcd+0x4>
 8001844:	7903      	ldrb	r3, [r0, #4]
 8001846:	2b53      	cmp	r3, #83	@ 0x53
 8001848:	d1ea      	bne.n	8001820 <extract_last_12_digits_bcd+0x4>
 800184a:	7943      	ldrb	r3, [r0, #5]
 800184c:	2b4e      	cmp	r3, #78	@ 0x4e
 800184e:	d1e7      	bne.n	8001820 <extract_last_12_digits_bcd+0x4>
					   start[6] == 'N' && start[7] == '=' && start[8] == '1')) {
 8001850:	7983      	ldrb	r3, [r0, #6]
 8001852:	2b3d      	cmp	r3, #61	@ 0x3d
 8001854:	d1e4      	bne.n	8001820 <extract_last_12_digits_bcd+0x4>
	while (*start && !(start[0] == 'A' && start[1] == 'T' && start[2] == '+' &&
 8001856:	79c3      	ldrb	r3, [r0, #7]
 8001858:	2b31      	cmp	r3, #49	@ 0x31
 800185a:	d1e1      	bne.n	8001820 <extract_last_12_digits_bcd+0x4>
		start++;
	}
	uart_transmit_string(&huart1, (uint8_t *)"Inside Checking terminal Number: ");
 800185c:	4922      	ldr	r1, [pc, #136]	@ (80018e8 <extract_last_12_digits_bcd+0xcc>)
 800185e:	4823      	ldr	r0, [pc, #140]	@ (80018ec <extract_last_12_digits_bcd+0xd0>)
 8001860:	f001 fdaa 	bl	80033b8 <uart_transmit_string>
	uart_transmit_string( &huart1,(uint8_t *) start);
 8001864:	4821      	ldr	r0, [pc, #132]	@ (80018ec <extract_last_12_digits_bcd+0xd0>)
 8001866:	4621      	mov	r1, r4
 8001868:	f001 fda6 	bl	80033b8 <uart_transmit_string>
	// If "AT+CGSN=1" is found, move to the start of the number (skip "AT+CGSN=1 ")
	if (*start) {
 800186c:	7823      	ldrb	r3, [r4, #0]
 800186e:	b96b      	cbnz	r3, 800188c <extract_last_12_digits_bcd+0x70>
			for (int i = 0; i < 6; i++) {
				output[i] = ((last_12[i * 2] - '0') << 4) | (last_12[i * 2 + 1] - '0');
			}
		}
	}
	uart_transmit_string(&huart1, (uint8_t *)" Check terminal Number - 0: ");
 8001870:	491f      	ldr	r1, [pc, #124]	@ (80018f0 <extract_last_12_digits_bcd+0xd4>)
 8001872:	481e      	ldr	r0, [pc, #120]	@ (80018ec <extract_last_12_digits_bcd+0xd0>)
 8001874:	f001 fda0 	bl	80033b8 <uart_transmit_string>
	uart_transmit_string(&huart1, output);
 8001878:	4629      	mov	r1, r5
 800187a:	481c      	ldr	r0, [pc, #112]	@ (80018ec <extract_last_12_digits_bcd+0xd0>)
 800187c:	f001 fd9c 	bl	80033b8 <uart_transmit_string>
	uart_transmit_string(&huart1, (uint8_t *)" \n");
 8001880:	491c      	ldr	r1, [pc, #112]	@ (80018f4 <extract_last_12_digits_bcd+0xd8>)
 8001882:	481a      	ldr	r0, [pc, #104]	@ (80018ec <extract_last_12_digits_bcd+0xd0>)
 8001884:	f001 fd98 	bl	80033b8 <uart_transmit_string>
}
 8001888:	b004      	add	sp, #16
 800188a:	bd70      	pop	{r4, r5, r6, pc}
		start += 10;  // Move pointer past "AT+CGSN=1 "
 800188c:	340a      	adds	r4, #10
		while (*start && (*start < '0' || *start > '9')) {
 800188e:	7821      	ldrb	r1, [r4, #0]
 8001890:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8001894:	4623      	mov	r3, r4
 8001896:	b2d2      	uxtb	r2, r2
 8001898:	3401      	adds	r4, #1
 800189a:	b109      	cbz	r1, 80018a0 <extract_last_12_digits_bcd+0x84>
 800189c:	2a09      	cmp	r2, #9
 800189e:	d8f6      	bhi.n	800188e <extract_last_12_digits_bcd+0x72>
 80018a0:	461a      	mov	r2, r3
		while (*end && (*end >= '0' && *end <= '9')) {
 80018a2:	4616      	mov	r6, r2
 80018a4:	f812 1b01 	ldrb.w	r1, [r2], #1
 80018a8:	3930      	subs	r1, #48	@ 0x30
 80018aa:	2909      	cmp	r1, #9
 80018ac:	d9f9      	bls.n	80018a2 <extract_last_12_digits_bcd+0x86>
 80018ae:	1af4      	subs	r4, r6, r3
		uart_transmit_string(&huart1, (uint8_t *)"Inside Checking terminal Number -2:LEN ");
 80018b0:	4911      	ldr	r1, [pc, #68]	@ (80018f8 <extract_last_12_digits_bcd+0xdc>)
 80018b2:	480e      	ldr	r0, [pc, #56]	@ (80018ec <extract_last_12_digits_bcd+0xd0>)
 80018b4:	f001 fd80 	bl	80033b8 <uart_transmit_string>
		snprintf(output_buffer, 10, "%d", digit_count);
 80018b8:	4a10      	ldr	r2, [pc, #64]	@ (80018fc <extract_last_12_digits_bcd+0xe0>)
 80018ba:	4623      	mov	r3, r4
 80018bc:	210a      	movs	r1, #10
 80018be:	a801      	add	r0, sp, #4
 80018c0:	f006 feec 	bl	800869c <sniprintf>
		if (digit_count >= 12) {
 80018c4:	2c0b      	cmp	r4, #11
 80018c6:	d9d3      	bls.n	8001870 <extract_last_12_digits_bcd+0x54>
			const uint8_t *last_12 = end - 12;
 80018c8:	f1a6 030c 	sub.w	r3, r6, #12
 80018cc:	1e68      	subs	r0, r5, #1
				output[i] = ((last_12[i * 2] - '0') << 4) | (last_12[i * 2 + 1] - '0');
 80018ce:	7819      	ldrb	r1, [r3, #0]
 80018d0:	785a      	ldrb	r2, [r3, #1]
 80018d2:	3930      	subs	r1, #48	@ 0x30
 80018d4:	3a30      	subs	r2, #48	@ 0x30
			for (int i = 0; i < 6; i++) {
 80018d6:	3302      	adds	r3, #2
				output[i] = ((last_12[i * 2] - '0') << 4) | (last_12[i * 2 + 1] - '0');
 80018d8:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
			for (int i = 0; i < 6; i++) {
 80018dc:	429e      	cmp	r6, r3
				output[i] = ((last_12[i * 2] - '0') << 4) | (last_12[i * 2 + 1] - '0');
 80018de:	f800 2f01 	strb.w	r2, [r0, #1]!
			for (int i = 0; i < 6; i++) {
 80018e2:	d1f4      	bne.n	80018ce <extract_last_12_digits_bcd+0xb2>
 80018e4:	e7c4      	b.n	8001870 <extract_last_12_digits_bcd+0x54>
 80018e6:	bf00      	nop
 80018e8:	0800ca8f 	.word	0x0800ca8f
 80018ec:	2000118c 	.word	0x2000118c
 80018f0:	0800cab1 	.word	0x0800cab1
 80018f4:	0800d254 	.word	0x0800d254
 80018f8:	0800cace 	.word	0x0800cace
 80018fc:	0800caf6 	.word	0x0800caf6

08001900 <check_SIM_ready>:
int check_SIM_ready(){
 8001900:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	const int TIME_LIMIT = 20;
	int count_check_sim = 0;
 // Check if SIM is ready
	send_AT_command(CHECK_SIM_READY);
 8001902:	4884      	ldr	r0, [pc, #528]	@ (8001b14 <check_SIM_ready+0x214>)
	osDelay(100);
	while(strstr((char *) response, "PB DONE") == NULL){
 8001904:	4e84      	ldr	r6, [pc, #528]	@ (8001b18 <check_SIM_ready+0x218>)
 8001906:	4d85      	ldr	r5, [pc, #532]	@ (8001b1c <check_SIM_ready+0x21c>)
		if(!is_set_time){
 8001908:	4f85      	ldr	r7, [pc, #532]	@ (8001b20 <check_SIM_ready+0x220>)
	send_AT_command(CHECK_SIM_READY);
 800190a:	f7ff fd31 	bl	8001370 <send_AT_command>
	osDelay(100);
 800190e:	2064      	movs	r0, #100	@ 0x64
 8001910:	f003 ff80 	bl	8005814 <osDelay>
	while(strstr((char *) response, "PB DONE") == NULL){
 8001914:	2414      	movs	r4, #20
 8001916:	4631      	mov	r1, r6
 8001918:	4628      	mov	r0, r5
 800191a:	f006 ff9c 	bl	8008856 <strstr>
 800191e:	2800      	cmp	r0, #0
 8001920:	f000 80db 	beq.w	8001ada <check_SIM_ready+0x1da>
		count_check_sim++;
		if (count_check_sim >= TIME_LIMIT){
			return 0;
		}
	}
	receive_response("Check SIM\n");
 8001924:	487f      	ldr	r0, [pc, #508]	@ (8001b24 <check_SIM_ready+0x224>)
	SIM_UART_ReInitializeRxDMA();
	osDelay(100);

	//GET SIM CCID
	send_AT_command(GET_SIM_CCID);
	while(strstr((char *) response, "+QCCID:") == NULL){
 8001926:	4d80      	ldr	r5, [pc, #512]	@ (8001b28 <check_SIM_ready+0x228>)
 8001928:	4c7c      	ldr	r4, [pc, #496]	@ (8001b1c <check_SIM_ready+0x21c>)
		receive_response("Check SIM CCID\n");
 800192a:	4e80      	ldr	r6, [pc, #512]	@ (8001b2c <check_SIM_ready+0x22c>)
	receive_response("Check SIM\n");
 800192c:	f7ff fd4c 	bl	80013c8 <receive_response>
	osDelay(100);
 8001930:	2064      	movs	r0, #100	@ 0x64
 8001932:	f003 ff6f 	bl	8005814 <osDelay>
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8001936:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 800193a:	2100      	movs	r1, #0
 800193c:	4877      	ldr	r0, [pc, #476]	@ (8001b1c <check_SIM_ready+0x21c>)
 800193e:	f006 ff70 	bl	8008822 <memset>
	SIM_UART_ReInitializeRxDMA();
 8001942:	f7ff fd25 	bl	8001390 <SIM_UART_ReInitializeRxDMA>
	osDelay(100);
 8001946:	2064      	movs	r0, #100	@ 0x64
 8001948:	f003 ff64 	bl	8005814 <osDelay>
	send_AT_command(GET_SIM_CCID);
 800194c:	4878      	ldr	r0, [pc, #480]	@ (8001b30 <check_SIM_ready+0x230>)
 800194e:	f7ff fd0f 	bl	8001370 <send_AT_command>
	while(strstr((char *) response, "+QCCID:") == NULL){
 8001952:	4629      	mov	r1, r5
 8001954:	4620      	mov	r0, r4
 8001956:	f006 ff7e 	bl	8008856 <strstr>
 800195a:	2800      	cmp	r0, #0
 800195c:	f000 80ca 	beq.w	8001af4 <check_SIM_ready+0x1f4>
	}
	osDelay(100);
 8001960:	2064      	movs	r0, #100	@ 0x64
 8001962:	f003 ff57 	bl	8005814 <osDelay>
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8001966:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 800196a:	2100      	movs	r1, #0
 800196c:	486b      	ldr	r0, [pc, #428]	@ (8001b1c <check_SIM_ready+0x21c>)
	SIM_UART_ReInitializeRxDMA();

	//GET IMEI
	send_AT_command("AT+CGSN=1\r\n");
	while(strstr((char *) response, CHECK_RESPONSE) == NULL){
 800196e:	4d71      	ldr	r5, [pc, #452]	@ (8001b34 <check_SIM_ready+0x234>)
 8001970:	4c6a      	ldr	r4, [pc, #424]	@ (8001b1c <check_SIM_ready+0x21c>)
		receive_response("Check IMEI-0\n");
 8001972:	4e71      	ldr	r6, [pc, #452]	@ (8001b38 <check_SIM_ready+0x238>)
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8001974:	f006 ff55 	bl	8008822 <memset>
	SIM_UART_ReInitializeRxDMA();
 8001978:	f7ff fd0a 	bl	8001390 <SIM_UART_ReInitializeRxDMA>
	send_AT_command("AT+CGSN=1\r\n");
 800197c:	486f      	ldr	r0, [pc, #444]	@ (8001b3c <check_SIM_ready+0x23c>)
 800197e:	f7ff fcf7 	bl	8001370 <send_AT_command>
	while(strstr((char *) response, CHECK_RESPONSE) == NULL){
 8001982:	4629      	mov	r1, r5
 8001984:	4620      	mov	r0, r4
 8001986:	f006 ff66 	bl	8008856 <strstr>
 800198a:	2800      	cmp	r0, #0
 800198c:	f000 80b6 	beq.w	8001afc <check_SIM_ready+0x1fc>
	}
	extract_last_12_digits_bcd(response, terminal_phone_number);
 8001990:	496b      	ldr	r1, [pc, #428]	@ (8001b40 <check_SIM_ready+0x240>)
 8001992:	4862      	ldr	r0, [pc, #392]	@ (8001b1c <check_SIM_ready+0x21c>)
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
	SIM_UART_ReInitializeRxDMA();

	//GET MODEL IDENTIFICATION
	send_AT_command("AT+CGMM\r\n");
	while(strstr((char *) response, CHECK_RESPONSE) == NULL){
 8001994:	4d67      	ldr	r5, [pc, #412]	@ (8001b34 <check_SIM_ready+0x234>)
 8001996:	4c61      	ldr	r4, [pc, #388]	@ (8001b1c <check_SIM_ready+0x21c>)
		receive_response("Check MODEL IDENTIFICATION\n");
 8001998:	4e6a      	ldr	r6, [pc, #424]	@ (8001b44 <check_SIM_ready+0x244>)
	extract_last_12_digits_bcd(response, terminal_phone_number);
 800199a:	f7ff ff3f 	bl	800181c <extract_last_12_digits_bcd>
	uart_transmit_string(&huart1, (uint8_t *)" Check terminal Number: ");
 800199e:	496a      	ldr	r1, [pc, #424]	@ (8001b48 <check_SIM_ready+0x248>)
 80019a0:	486a      	ldr	r0, [pc, #424]	@ (8001b4c <check_SIM_ready+0x24c>)
 80019a2:	f001 fd09 	bl	80033b8 <uart_transmit_string>
	uart_transmit_string(&huart1, terminal_phone_number);
 80019a6:	4966      	ldr	r1, [pc, #408]	@ (8001b40 <check_SIM_ready+0x240>)
 80019a8:	4868      	ldr	r0, [pc, #416]	@ (8001b4c <check_SIM_ready+0x24c>)
 80019aa:	f001 fd05 	bl	80033b8 <uart_transmit_string>
	uart_transmit_string(&huart1, (uint8_t *)" \n");
 80019ae:	4968      	ldr	r1, [pc, #416]	@ (8001b50 <check_SIM_ready+0x250>)
 80019b0:	4866      	ldr	r0, [pc, #408]	@ (8001b4c <check_SIM_ready+0x24c>)
 80019b2:	f001 fd01 	bl	80033b8 <uart_transmit_string>
	osDelay(100);
 80019b6:	2064      	movs	r0, #100	@ 0x64
 80019b8:	f003 ff2c 	bl	8005814 <osDelay>
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 80019bc:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 80019c0:	2100      	movs	r1, #0
 80019c2:	4856      	ldr	r0, [pc, #344]	@ (8001b1c <check_SIM_ready+0x21c>)
 80019c4:	f006 ff2d 	bl	8008822 <memset>
	SIM_UART_ReInitializeRxDMA();
 80019c8:	f7ff fce2 	bl	8001390 <SIM_UART_ReInitializeRxDMA>
	send_AT_command("AT+CGMM\r\n");
 80019cc:	4861      	ldr	r0, [pc, #388]	@ (8001b54 <check_SIM_ready+0x254>)
 80019ce:	f7ff fccf 	bl	8001370 <send_AT_command>
	while(strstr((char *) response, CHECK_RESPONSE) == NULL){
 80019d2:	4629      	mov	r1, r5
 80019d4:	4620      	mov	r0, r4
 80019d6:	f006 ff3e 	bl	8008856 <strstr>
 80019da:	2800      	cmp	r0, #0
 80019dc:	f000 8092 	beq.w	8001b04 <check_SIM_ready+0x204>
	}
	osDelay(100);
 80019e0:	2064      	movs	r0, #100	@ 0x64
 80019e2:	f003 ff17 	bl	8005814 <osDelay>
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 80019e6:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 80019ea:	2100      	movs	r1, #0
 80019ec:	484b      	ldr	r0, [pc, #300]	@ (8001b1c <check_SIM_ready+0x21c>)
	send_AT_command("AT+CREG=1\r\n");
	char *first_pointer = NULL;
	char *second_pointer = NULL;
	receive_response("Configuring Network Registration Status (CS Service)");
	while (first_pointer == NULL || second_pointer == NULL){
		send_AT_command("AT+CREG?\r\n");
 80019ee:	4d5a      	ldr	r5, [pc, #360]	@ (8001b58 <check_SIM_ready+0x258>)
		osDelay(150);
		receive_response("Check Network Registration Status (CS Service)\n");
 80019f0:	4e5a      	ldr	r6, [pc, #360]	@ (8001b5c <check_SIM_ready+0x25c>)
		osDelay(300);
		first_pointer = strstr((char*)response, CHECK_RESPONSE);
 80019f2:	4c50      	ldr	r4, [pc, #320]	@ (8001b34 <check_SIM_ready+0x234>)
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 80019f4:	f006 ff15 	bl	8008822 <memset>
	SIM_UART_ReInitializeRxDMA();
 80019f8:	f7ff fcca 	bl	8001390 <SIM_UART_ReInitializeRxDMA>
	send_AT_command("AT+CREG=1\r\n");
 80019fc:	4858      	ldr	r0, [pc, #352]	@ (8001b60 <check_SIM_ready+0x260>)
 80019fe:	f7ff fcb7 	bl	8001370 <send_AT_command>
	receive_response("Configuring Network Registration Status (CS Service)");
 8001a02:	4858      	ldr	r0, [pc, #352]	@ (8001b64 <check_SIM_ready+0x264>)
 8001a04:	f7ff fce0 	bl	80013c8 <receive_response>
		send_AT_command("AT+CREG?\r\n");
 8001a08:	4628      	mov	r0, r5
 8001a0a:	f7ff fcb1 	bl	8001370 <send_AT_command>
		osDelay(150);
 8001a0e:	2096      	movs	r0, #150	@ 0x96
 8001a10:	f003 ff00 	bl	8005814 <osDelay>
		receive_response("Check Network Registration Status (CS Service)\n");
 8001a14:	4630      	mov	r0, r6
 8001a16:	f7ff fcd7 	bl	80013c8 <receive_response>
		osDelay(300);
 8001a1a:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001a1e:	f003 fef9 	bl	8005814 <osDelay>
		first_pointer = strstr((char*)response, CHECK_RESPONSE);
 8001a22:	483e      	ldr	r0, [pc, #248]	@ (8001b1c <check_SIM_ready+0x21c>)
 8001a24:	4621      	mov	r1, r4
 8001a26:	f006 ff16 	bl	8008856 <strstr>
		if(first_pointer != NULL){
 8001a2a:	2800      	cmp	r0, #0
 8001a2c:	d0ec      	beq.n	8001a08 <check_SIM_ready+0x108>
			second_pointer = strstr(first_pointer+1, CHECK_RESPONSE);
 8001a2e:	4621      	mov	r1, r4
 8001a30:	3001      	adds	r0, #1
 8001a32:	f006 ff10 	bl	8008856 <strstr>
	while (first_pointer == NULL || second_pointer == NULL){
 8001a36:	2800      	cmp	r0, #0
 8001a38:	d0e6      	beq.n	8001a08 <check_SIM_ready+0x108>
		}
	}
	osDelay(100);
 8001a3a:	2064      	movs	r0, #100	@ 0x64
 8001a3c:	f003 feea 	bl	8005814 <osDelay>
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8001a40:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8001a44:	2100      	movs	r1, #0
 8001a46:	4835      	ldr	r0, [pc, #212]	@ (8001b1c <check_SIM_ready+0x21c>)
	send_AT_command("AT+CGREG=1\r\n");
	first_pointer = NULL;
	second_pointer = NULL;
	receive_response("Configuring Network Registration Status (PS Service)");
	while (first_pointer == NULL || second_pointer == NULL){
		send_AT_command("AT+CGREG?\r\n");
 8001a48:	4d47      	ldr	r5, [pc, #284]	@ (8001b68 <check_SIM_ready+0x268>)
		osDelay(150);
		receive_response("Check Network Registration Status (PS Service)\n");
 8001a4a:	4e48      	ldr	r6, [pc, #288]	@ (8001b6c <check_SIM_ready+0x26c>)
		osDelay(300);
		first_pointer = strstr((char*)response, CHECK_RESPONSE);
 8001a4c:	4c39      	ldr	r4, [pc, #228]	@ (8001b34 <check_SIM_ready+0x234>)
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8001a4e:	f006 fee8 	bl	8008822 <memset>
	SIM_UART_ReInitializeRxDMA();
 8001a52:	f7ff fc9d 	bl	8001390 <SIM_UART_ReInitializeRxDMA>
	send_AT_command("AT+CGREG=1\r\n");
 8001a56:	4846      	ldr	r0, [pc, #280]	@ (8001b70 <check_SIM_ready+0x270>)
 8001a58:	f7ff fc8a 	bl	8001370 <send_AT_command>
	receive_response("Configuring Network Registration Status (PS Service)");
 8001a5c:	4845      	ldr	r0, [pc, #276]	@ (8001b74 <check_SIM_ready+0x274>)
 8001a5e:	f7ff fcb3 	bl	80013c8 <receive_response>
		send_AT_command("AT+CGREG?\r\n");
 8001a62:	4628      	mov	r0, r5
 8001a64:	f7ff fc84 	bl	8001370 <send_AT_command>
		osDelay(150);
 8001a68:	2096      	movs	r0, #150	@ 0x96
 8001a6a:	f003 fed3 	bl	8005814 <osDelay>
		receive_response("Check Network Registration Status (PS Service)\n");
 8001a6e:	4630      	mov	r0, r6
 8001a70:	f7ff fcaa 	bl	80013c8 <receive_response>
		osDelay(300);
 8001a74:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001a78:	f003 fecc 	bl	8005814 <osDelay>
		first_pointer = strstr((char*)response, CHECK_RESPONSE);
 8001a7c:	4827      	ldr	r0, [pc, #156]	@ (8001b1c <check_SIM_ready+0x21c>)
 8001a7e:	4621      	mov	r1, r4
 8001a80:	f006 fee9 	bl	8008856 <strstr>
		if(first_pointer != NULL){
 8001a84:	2800      	cmp	r0, #0
 8001a86:	d0ec      	beq.n	8001a62 <check_SIM_ready+0x162>
			second_pointer = strstr(first_pointer+1, CHECK_RESPONSE);
 8001a88:	4621      	mov	r1, r4
 8001a8a:	3001      	adds	r0, #1
 8001a8c:	f006 fee3 	bl	8008856 <strstr>
	while (first_pointer == NULL || second_pointer == NULL){
 8001a90:	2800      	cmp	r0, #0
 8001a92:	d0e6      	beq.n	8001a62 <check_SIM_ready+0x162>
		}
	}
	osDelay(100);
 8001a94:	2064      	movs	r0, #100	@ 0x64
 8001a96:	f003 febd 	bl	8005814 <osDelay>
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8001a9a:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8001a9e:	2100      	movs	r1, #0
 8001aa0:	481e      	ldr	r0, [pc, #120]	@ (8001b1c <check_SIM_ready+0x21c>)
	SIM_UART_ReInitializeRxDMA();

		//GET IMEI
	send_AT_command("AT+CSQ\r\n");
	while(strstr((char *) response, CHECK_RESPONSE) == NULL){
 8001aa2:	4d24      	ldr	r5, [pc, #144]	@ (8001b34 <check_SIM_ready+0x234>)
 8001aa4:	4c1d      	ldr	r4, [pc, #116]	@ (8001b1c <check_SIM_ready+0x21c>)
		receive_response("Check Signal Quality Report\n");
 8001aa6:	4e34      	ldr	r6, [pc, #208]	@ (8001b78 <check_SIM_ready+0x278>)
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8001aa8:	f006 febb 	bl	8008822 <memset>
	SIM_UART_ReInitializeRxDMA();
 8001aac:	f7ff fc70 	bl	8001390 <SIM_UART_ReInitializeRxDMA>
	send_AT_command("AT+CSQ\r\n");
 8001ab0:	4832      	ldr	r0, [pc, #200]	@ (8001b7c <check_SIM_ready+0x27c>)
 8001ab2:	f7ff fc5d 	bl	8001370 <send_AT_command>
	while(strstr((char *) response, CHECK_RESPONSE) == NULL){
 8001ab6:	4629      	mov	r1, r5
 8001ab8:	4620      	mov	r0, r4
 8001aba:	f006 fecc 	bl	8008856 <strstr>
 8001abe:	b328      	cbz	r0, 8001b0c <check_SIM_ready+0x20c>
	}
	osDelay(100);
 8001ac0:	2064      	movs	r0, #100	@ 0x64
 8001ac2:	f003 fea7 	bl	8005814 <osDelay>
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8001ac6:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8001aca:	2100      	movs	r1, #0
 8001acc:	4813      	ldr	r0, [pc, #76]	@ (8001b1c <check_SIM_ready+0x21c>)
 8001ace:	f006 fea8 	bl	8008822 <memset>
	SIM_UART_ReInitializeRxDMA();
 8001ad2:	f7ff fc5d 	bl	8001390 <SIM_UART_ReInitializeRxDMA>
 8001ad6:	2001      	movs	r0, #1
	
	return 1;
}
 8001ad8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if(!is_set_time){
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	b913      	cbnz	r3, 8001ae4 <check_SIM_ready+0x1e4>
			extract_time(response);
 8001ade:	4628      	mov	r0, r5
 8001ae0:	f7ff fe2c 	bl	800173c <extract_time>
		receive_response("Check SIM\n");
 8001ae4:	480f      	ldr	r0, [pc, #60]	@ (8001b24 <check_SIM_ready+0x224>)
 8001ae6:	f7ff fc6f 	bl	80013c8 <receive_response>
		if (count_check_sim >= TIME_LIMIT){
 8001aea:	3c01      	subs	r4, #1
 8001aec:	f47f af13 	bne.w	8001916 <check_SIM_ready+0x16>
			return 0;
 8001af0:	4620      	mov	r0, r4
 8001af2:	e7f1      	b.n	8001ad8 <check_SIM_ready+0x1d8>
		receive_response("Check SIM CCID\n");
 8001af4:	4630      	mov	r0, r6
 8001af6:	f7ff fc67 	bl	80013c8 <receive_response>
 8001afa:	e72a      	b.n	8001952 <check_SIM_ready+0x52>
		receive_response("Check IMEI-0\n");
 8001afc:	4630      	mov	r0, r6
 8001afe:	f7ff fc63 	bl	80013c8 <receive_response>
 8001b02:	e73e      	b.n	8001982 <check_SIM_ready+0x82>
		receive_response("Check MODEL IDENTIFICATION\n");
 8001b04:	4630      	mov	r0, r6
 8001b06:	f7ff fc5f 	bl	80013c8 <receive_response>
 8001b0a:	e762      	b.n	80019d2 <check_SIM_ready+0xd2>
		receive_response("Check Signal Quality Report\n");
 8001b0c:	4630      	mov	r0, r6
 8001b0e:	f7ff fc5b 	bl	80013c8 <receive_response>
 8001b12:	e7d0      	b.n	8001ab6 <check_SIM_ready+0x1b6>
 8001b14:	0800caf9 	.word	0x0800caf9
 8001b18:	0800cb0f 	.word	0x0800cb0f
 8001b1c:	20000bd0 	.word	0x20000bd0
 8001b20:	20000bbc 	.word	0x20000bbc
 8001b24:	0800cb04 	.word	0x0800cb04
 8001b28:	0800cb32 	.word	0x0800cb32
 8001b2c:	0800cb22 	.word	0x0800cb22
 8001b30:	0800cb17 	.word	0x0800cb17
 8001b34:	0800cb54 	.word	0x0800cb54
 8001b38:	0800cb46 	.word	0x0800cb46
 8001b3c:	0800cb3a 	.word	0x0800cb3a
 8001b40:	20000b54 	.word	0x20000b54
 8001b44:	0800cb7a 	.word	0x0800cb7a
 8001b48:	0800cb57 	.word	0x0800cb57
 8001b4c:	2000118c 	.word	0x2000118c
 8001b50:	0800d254 	.word	0x0800d254
 8001b54:	0800cb70 	.word	0x0800cb70
 8001b58:	0800cbd7 	.word	0x0800cbd7
 8001b5c:	0800cbe2 	.word	0x0800cbe2
 8001b60:	0800cb96 	.word	0x0800cb96
 8001b64:	0800cba2 	.word	0x0800cba2
 8001b68:	0800cc54 	.word	0x0800cc54
 8001b6c:	0800cc60 	.word	0x0800cc60
 8001b70:	0800cc12 	.word	0x0800cc12
 8001b74:	0800cc1f 	.word	0x0800cc1f
 8001b78:	0800cc99 	.word	0x0800cc99
 8001b7c:	0800cc90 	.word	0x0800cc90

08001b80 <check_configure_APN>:

void check_configure_APN(){
 8001b80:	b508      	push	{r3, lr}
	send_AT_command("AT+QICSGP=1\r\n");
 8001b82:	4805      	ldr	r0, [pc, #20]	@ (8001b98 <check_configure_APN+0x18>)
 8001b84:	f7ff fbf4 	bl	8001370 <send_AT_command>
	osDelay(150);
 8001b88:	2096      	movs	r0, #150	@ 0x96
 8001b8a:	f003 fe43 	bl	8005814 <osDelay>
	receive_response("Check Configuring APN\n");
}
 8001b8e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	receive_response("Check Configuring APN\n");
 8001b92:	4802      	ldr	r0, [pc, #8]	@ (8001b9c <check_configure_APN+0x1c>)
 8001b94:	f7ff bc18 	b.w	80013c8 <receive_response>
 8001b98:	0800ccb6 	.word	0x0800ccb6
 8001b9c:	0800ccc4 	.word	0x0800ccc4

08001ba0 <configure_APN>:

int configure_APN(int context_id){
 8001ba0:	b530      	push	{r4, r5, lr}
 8001ba2:	b0c7      	sub	sp, #284	@ 0x11c
	uint8_t command[256];
	snprintf((char *)command, sizeof(command), "AT+QICSGP=%d,%d,\"%s\",\"%s\",\"%s\",%d,0\r\n", context_id, 1, APN_NAME, APN_USERNAME, APN_PASSWD, APN_AUTHEN);
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	9204      	str	r2, [sp, #16]
 8001ba8:	4a16      	ldr	r2, [pc, #88]	@ (8001c04 <configure_APN+0x64>)
	char *first_pointer = NULL;
	char *second_pointer = NULL; 	
	while (first_pointer == NULL || second_pointer == NULL){
		check_configure_APN();
		osDelay(300);
		first_pointer = strstr((char*)response, CHECK_RESPONSE);
 8001baa:	4c17      	ldr	r4, [pc, #92]	@ (8001c08 <configure_APN+0x68>)
 8001bac:	4d17      	ldr	r5, [pc, #92]	@ (8001c0c <configure_APN+0x6c>)
	snprintf((char *)command, sizeof(command), "AT+QICSGP=%d,%d,\"%s\",\"%s\",\"%s\",%d,0\r\n", context_id, 1, APN_NAME, APN_USERNAME, APN_PASSWD, APN_AUTHEN);
 8001bae:	e9cd 2202 	strd	r2, r2, [sp, #8]
 8001bb2:	4a17      	ldr	r2, [pc, #92]	@ (8001c10 <configure_APN+0x70>)
 8001bb4:	9201      	str	r2, [sp, #4]
 8001bb6:	2201      	movs	r2, #1
int configure_APN(int context_id){
 8001bb8:	4603      	mov	r3, r0
	snprintf((char *)command, sizeof(command), "AT+QICSGP=%d,%d,\"%s\",\"%s\",\"%s\",%d,0\r\n", context_id, 1, APN_NAME, APN_USERNAME, APN_PASSWD, APN_AUTHEN);
 8001bba:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001bbe:	9200      	str	r2, [sp, #0]
 8001bc0:	a806      	add	r0, sp, #24
 8001bc2:	4a14      	ldr	r2, [pc, #80]	@ (8001c14 <configure_APN+0x74>)
 8001bc4:	f006 fd6a 	bl	800869c <sniprintf>
	send_AT_command((char*)command);
 8001bc8:	a806      	add	r0, sp, #24
 8001bca:	f7ff fbd1 	bl	8001370 <send_AT_command>
	osDelay(150);
 8001bce:	2096      	movs	r0, #150	@ 0x96
 8001bd0:	f003 fe20 	bl	8005814 <osDelay>
	receive_response("CONFIGURE APN\n");
 8001bd4:	4810      	ldr	r0, [pc, #64]	@ (8001c18 <configure_APN+0x78>)
 8001bd6:	f7ff fbf7 	bl	80013c8 <receive_response>
		check_configure_APN();
 8001bda:	f7ff ffd1 	bl	8001b80 <check_configure_APN>
		osDelay(300);
 8001bde:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001be2:	f003 fe17 	bl	8005814 <osDelay>
		first_pointer = strstr((char*)response, CHECK_RESPONSE);
 8001be6:	4908      	ldr	r1, [pc, #32]	@ (8001c08 <configure_APN+0x68>)
 8001be8:	4628      	mov	r0, r5
 8001bea:	f006 fe34 	bl	8008856 <strstr>
		if(first_pointer != NULL){
 8001bee:	2800      	cmp	r0, #0
 8001bf0:	d0f3      	beq.n	8001bda <configure_APN+0x3a>
			second_pointer = strstr(first_pointer+1, CHECK_RESPONSE);
 8001bf2:	4621      	mov	r1, r4
 8001bf4:	3001      	adds	r0, #1
 8001bf6:	f006 fe2e 	bl	8008856 <strstr>
	while (first_pointer == NULL || second_pointer == NULL){
 8001bfa:	2800      	cmp	r0, #0
 8001bfc:	d0ed      	beq.n	8001bda <configure_APN+0x3a>
		}
	}
	return 1;
}
 8001bfe:	2001      	movs	r0, #1
 8001c00:	b047      	add	sp, #284	@ 0x11c
 8001c02:	bd30      	pop	{r4, r5, pc}
 8001c04:	0800c979 	.word	0x0800c979
 8001c08:	0800cb54 	.word	0x0800cb54
 8001c0c:	20000bd0 	.word	0x20000bd0
 8001c10:	0800cd01 	.word	0x0800cd01
 8001c14:	0800ccdb 	.word	0x0800ccdb
 8001c18:	0800cd0b 	.word	0x0800cd0b

08001c1c <check_activate_context>:

void check_activate_context(){
 8001c1c:	b500      	push	{lr}
 8001c1e:	b0a1      	sub	sp, #132	@ 0x84
	uint8_t command[128];
	snprintf((char *)command, sizeof(command), "AT+QIACT?\r\n");
 8001c20:	4906      	ldr	r1, [pc, #24]	@ (8001c3c <check_activate_context+0x20>)
 8001c22:	4668      	mov	r0, sp
 8001c24:	f007 fc19 	bl	800945a <strcpy>
	send_AT_command((char*)command);
 8001c28:	4668      	mov	r0, sp
 8001c2a:	f7ff fba1 	bl	8001370 <send_AT_command>
	receive_response("CHECK Activate CONTEXT");
 8001c2e:	4804      	ldr	r0, [pc, #16]	@ (8001c40 <check_activate_context+0x24>)
 8001c30:	f7ff fbca 	bl	80013c8 <receive_response>
}
 8001c34:	b021      	add	sp, #132	@ 0x84
 8001c36:	f85d fb04 	ldr.w	pc, [sp], #4
 8001c3a:	bf00      	nop
 8001c3c:	0800cd1a 	.word	0x0800cd1a
 8001c40:	0800cd26 	.word	0x0800cd26

08001c44 <activate_context>:

void activate_context(int context_id){
 8001c44:	b570      	push	{r4, r5, r6, lr}
 8001c46:	b0a0      	sub	sp, #128	@ 0x80
 8001c48:	4603      	mov	r3, r0
	uint8_t command[128];
	snprintf((char *)command, sizeof(command), "AT+QIACT=%d\r\n", context_id);
 8001c4a:	4a14      	ldr	r2, [pc, #80]	@ (8001c9c <activate_context+0x58>)
	char *first_pointer = NULL;
	char *second_pointer = NULL; 	
	while (first_pointer == NULL || second_pointer == NULL){
		check_activate_context();
		osDelay(300);
		receive_response("Check Activate Context\r\n");
 8001c4c:	4d14      	ldr	r5, [pc, #80]	@ (8001ca0 <activate_context+0x5c>)
		first_pointer = strstr((char*)response, CHECK_RESPONSE);
 8001c4e:	4c15      	ldr	r4, [pc, #84]	@ (8001ca4 <activate_context+0x60>)
 8001c50:	4e15      	ldr	r6, [pc, #84]	@ (8001ca8 <activate_context+0x64>)
	snprintf((char *)command, sizeof(command), "AT+QIACT=%d\r\n", context_id);
 8001c52:	2180      	movs	r1, #128	@ 0x80
 8001c54:	4668      	mov	r0, sp
 8001c56:	f006 fd21 	bl	800869c <sniprintf>
	send_AT_command((char*)command);
 8001c5a:	4668      	mov	r0, sp
 8001c5c:	f7ff fb88 	bl	8001370 <send_AT_command>
	osDelay(150);
 8001c60:	2096      	movs	r0, #150	@ 0x96
 8001c62:	f003 fdd7 	bl	8005814 <osDelay>
	receive_response("Activate Context\r\n");
 8001c66:	4811      	ldr	r0, [pc, #68]	@ (8001cac <activate_context+0x68>)
 8001c68:	f7ff fbae 	bl	80013c8 <receive_response>
		check_activate_context();
 8001c6c:	f7ff ffd6 	bl	8001c1c <check_activate_context>
		osDelay(300);
 8001c70:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001c74:	f003 fdce 	bl	8005814 <osDelay>
		receive_response("Check Activate Context\r\n");
 8001c78:	4628      	mov	r0, r5
 8001c7a:	f7ff fba5 	bl	80013c8 <receive_response>
		first_pointer = strstr((char*)response, CHECK_RESPONSE);
 8001c7e:	4909      	ldr	r1, [pc, #36]	@ (8001ca4 <activate_context+0x60>)
 8001c80:	4630      	mov	r0, r6
 8001c82:	f006 fde8 	bl	8008856 <strstr>
		if(first_pointer != NULL){
 8001c86:	2800      	cmp	r0, #0
 8001c88:	d0f0      	beq.n	8001c6c <activate_context+0x28>
			second_pointer = strstr(first_pointer+1, CHECK_RESPONSE);
 8001c8a:	4621      	mov	r1, r4
 8001c8c:	3001      	adds	r0, #1
 8001c8e:	f006 fde2 	bl	8008856 <strstr>
	while (first_pointer == NULL || second_pointer == NULL){
 8001c92:	2800      	cmp	r0, #0
 8001c94:	d0ea      	beq.n	8001c6c <activate_context+0x28>
		}
	}
}
 8001c96:	b020      	add	sp, #128	@ 0x80
 8001c98:	bd70      	pop	{r4, r5, r6, pc}
 8001c9a:	bf00      	nop
 8001c9c:	0800cd3d 	.word	0x0800cd3d
 8001ca0:	0800cd4b 	.word	0x0800cd4b
 8001ca4:	0800cb54 	.word	0x0800cb54
 8001ca8:	20000bd0 	.word	0x20000bd0
 8001cac:	0800cd51 	.word	0x0800cd51

08001cb0 <deactivate_context>:

int deactivate_context(int context_id){
 8001cb0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001cb4:	4607      	mov	r7, r0
 8001cb6:	b0a1      	sub	sp, #132	@ 0x84
	uint8_t command[128];
	int count_error = 0;
	osDelay(100);
 8001cb8:	2064      	movs	r0, #100	@ 0x64
 8001cba:	f003 fdab 	bl	8005814 <osDelay>
	while(strstr((char *) response, CHECK_RESPONSE) == NULL){
 8001cbe:	f8df 80a8 	ldr.w	r8, [pc, #168]	@ 8001d68 <deactivate_context+0xb8>
 8001cc2:	4d24      	ldr	r5, [pc, #144]	@ (8001d54 <deactivate_context+0xa4>)
			snprintf((char *)command, sizeof(command), "AT+QIDEACT=%d\r\n", context_id);
 8001cc4:	f8df 90a4 	ldr.w	r9, [pc, #164]	@ 8001d6c <deactivate_context+0xbc>
	int count_error = 0;
 8001cc8:	2600      	movs	r6, #0
	while(strstr((char *) response, CHECK_RESPONSE) == NULL){
 8001cca:	4641      	mov	r1, r8
 8001ccc:	4628      	mov	r0, r5
 8001cce:	f006 fdc2 	bl	8008856 <strstr>
 8001cd2:	4604      	mov	r4, r0
 8001cd4:	b178      	cbz	r0, 8001cf6 <deactivate_context+0x46>
				SIM_UART_ReInitializeRxDMA();
				return 0;
			}
	}
	count_error = 0;
	receive_response("DEACTIVATE CONTEXT");
 8001cd6:	4820      	ldr	r0, [pc, #128]	@ (8001d58 <deactivate_context+0xa8>)
 8001cd8:	f7ff fb76 	bl	80013c8 <receive_response>
	osDelay(100);
 8001cdc:	2064      	movs	r0, #100	@ 0x64
 8001cde:	f003 fd99 	bl	8005814 <osDelay>
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8001ce2:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8001ce6:	2100      	movs	r1, #0
 8001ce8:	481a      	ldr	r0, [pc, #104]	@ (8001d54 <deactivate_context+0xa4>)
 8001cea:	f006 fd9a 	bl	8008822 <memset>
	SIM_UART_ReInitializeRxDMA();
 8001cee:	f7ff fb4f 	bl	8001390 <SIM_UART_ReInitializeRxDMA>
	return 1;
 8001cf2:	2001      	movs	r0, #1
 8001cf4:	e02b      	b.n	8001d4e <deactivate_context+0x9e>
			snprintf((char *)command, sizeof(command), "AT+QIDEACT=%d\r\n", context_id);
 8001cf6:	2180      	movs	r1, #128	@ 0x80
 8001cf8:	463b      	mov	r3, r7
 8001cfa:	464a      	mov	r2, r9
 8001cfc:	4668      	mov	r0, sp
 8001cfe:	f006 fccd 	bl	800869c <sniprintf>
			send_AT_command((char*)command);
 8001d02:	4668      	mov	r0, sp
 8001d04:	f7ff fb34 	bl	8001370 <send_AT_command>
			receive_response("DEACTIVATE CONTEXT");
 8001d08:	4813      	ldr	r0, [pc, #76]	@ (8001d58 <deactivate_context+0xa8>)
 8001d0a:	f7ff fb5d 	bl	80013c8 <receive_response>
			if (strstr((char *) response, "ERROR") != NULL){
 8001d0e:	4913      	ldr	r1, [pc, #76]	@ (8001d5c <deactivate_context+0xac>)
 8001d10:	4628      	mov	r0, r5
 8001d12:	f006 fda0 	bl	8008856 <strstr>
 8001d16:	2800      	cmp	r0, #0
 8001d18:	d0d7      	beq.n	8001cca <deactivate_context+0x1a>
				memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8001d1a:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8001d1e:	4621      	mov	r1, r4
				count_error++;
 8001d20:	3601      	adds	r6, #1
				memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8001d22:	4628      	mov	r0, r5
 8001d24:	f006 fd7d 	bl	8008822 <memset>
				SIM_UART_ReInitializeRxDMA();
 8001d28:	f7ff fb32 	bl	8001390 <SIM_UART_ReInitializeRxDMA>
			if (count_error >= 5){
 8001d2c:	2e05      	cmp	r6, #5
 8001d2e:	d1cc      	bne.n	8001cca <deactivate_context+0x1a>
				uart_transmit_string(&huart1,(uint8_t*) "Rebooting SIM module");
 8001d30:	490b      	ldr	r1, [pc, #44]	@ (8001d60 <deactivate_context+0xb0>)
 8001d32:	480c      	ldr	r0, [pc, #48]	@ (8001d64 <deactivate_context+0xb4>)
 8001d34:	f001 fb40 	bl	80033b8 <uart_transmit_string>
				reboot_SIM_module();
 8001d38:	f7ff fb8a 	bl	8001450 <reboot_SIM_module>
				memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8001d3c:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8001d40:	4621      	mov	r1, r4
 8001d42:	4804      	ldr	r0, [pc, #16]	@ (8001d54 <deactivate_context+0xa4>)
 8001d44:	f006 fd6d 	bl	8008822 <memset>
				SIM_UART_ReInitializeRxDMA();
 8001d48:	f7ff fb22 	bl	8001390 <SIM_UART_ReInitializeRxDMA>
				return 0;
 8001d4c:	4620      	mov	r0, r4
}
 8001d4e:	b021      	add	sp, #132	@ 0x84
 8001d50:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001d54:	20000bd0 	.word	0x20000bd0
 8001d58:	0800cd74 	.word	0x0800cd74
 8001d5c:	0800cd87 	.word	0x0800cd87
 8001d60:	0800cd8d 	.word	0x0800cd8d
 8001d64:	2000118c 	.word	0x2000118c
 8001d68:	0800cb54 	.word	0x0800cb54
 8001d6c:	0800cd64 	.word	0x0800cd64

08001d70 <open_socket_service>:
	snprintf((char *)command, sizeof(command), "AT+QIOPEN?\r\n");
	send_AT_command((char*)command);
	receive_response("CHECK Activate CONTEXT");
}

int open_socket_service(int context_id, int connect_id, int local_port, int access_mode){
 8001d70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001d74:	b0e6      	sub	sp, #408	@ 0x198
	const int timeout_seconds = 150; // Receive response each second 
	int elapsed_time_ms = 0;
	uint8_t command[256];
	snprintf((char *)command, sizeof(command), "AT+QIOPEN=%d,%d,\"%s\",\"%s\",%d,%d,%d\r\n",context_id, connect_id, SERVICE_TYPE, IP_ADDRESS, REMOTE_PORT, local_port, access_mode);
 8001d76:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001d7a:	f241 3397 	movw	r3, #5015	@ 0x1397
 8001d7e:	9303      	str	r3, [sp, #12]
 8001d80:	4b2e      	ldr	r3, [pc, #184]	@ (8001e3c <open_socket_service+0xcc>)
 8001d82:	9302      	str	r3, [sp, #8]
 8001d84:	4b2e      	ldr	r3, [pc, #184]	@ (8001e40 <open_socket_service+0xd0>)
 8001d86:	4a2f      	ldr	r2, [pc, #188]	@ (8001e44 <open_socket_service+0xd4>)
	char *first_pointer = NULL;
	//time_t start = time(NULL);
	uart_transmit_string(&huart1, (uint8_t *) "Ini start TIME");
	while(first_pointer == NULL && elapsed_time_ms < timeout_seconds){
		char output_elapsed[128];
		receive_response("Check OPEN socket service: \r\n");
 8001d88:	4e2f      	ldr	r6, [pc, #188]	@ (8001e48 <open_socket_service+0xd8>)
		first_pointer = strstr((char*)response, "+QIOPEN:");
 8001d8a:	4f30      	ldr	r7, [pc, #192]	@ (8001e4c <open_socket_service+0xdc>)
 8001d8c:	f8df 80cc 	ldr.w	r8, [pc, #204]	@ 8001e5c <open_socket_service+0xec>
	snprintf((char *)command, sizeof(command), "AT+QIOPEN=%d,%d,\"%s\",\"%s\",%d,%d,%d\r\n",context_id, connect_id, SERVICE_TYPE, IP_ADDRESS, REMOTE_PORT, local_port, access_mode);
 8001d90:	e9cd 1300 	strd	r1, r3, [sp]
 8001d94:	4603      	mov	r3, r0
 8001d96:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001d9a:	a826      	add	r0, sp, #152	@ 0x98
 8001d9c:	f006 fc7e 	bl	800869c <sniprintf>
	send_AT_command((char *) command);
 8001da0:	a826      	add	r0, sp, #152	@ 0x98
 8001da2:	f7ff fae5 	bl	8001370 <send_AT_command>
	osDelay(100);
 8001da6:	2064      	movs	r0, #100	@ 0x64
 8001da8:	f003 fd34 	bl	8005814 <osDelay>
	uart_transmit_string(&huart1, (uint8_t *) "Ini start TIME");
 8001dac:	4928      	ldr	r1, [pc, #160]	@ (8001e50 <open_socket_service+0xe0>)
 8001dae:	4829      	ldr	r0, [pc, #164]	@ (8001e54 <open_socket_service+0xe4>)
 8001db0:	f001 fb02 	bl	80033b8 <uart_transmit_string>
	int elapsed_time_ms = 0;
 8001db4:	2500      	movs	r5, #0
		receive_response("Check OPEN socket service: \r\n");
 8001db6:	4630      	mov	r0, r6
 8001db8:	f7ff fb06 	bl	80013c8 <receive_response>
		first_pointer = strstr((char*)response, "+QIOPEN:");
 8001dbc:	4639      	mov	r1, r7
 8001dbe:	4640      	mov	r0, r8
 8001dc0:	f006 fd49 	bl	8008856 <strstr>
		elapsed_time_ms++;
 8001dc4:	3501      	adds	r5, #1
		first_pointer = strstr((char*)response, "+QIOPEN:");
 8001dc6:	4604      	mov	r4, r0
		snprintf(output_elapsed, 128, "Elapsed Time: %d\n", elapsed_time_ms);
 8001dc8:	2180      	movs	r1, #128	@ 0x80
 8001dca:	4a23      	ldr	r2, [pc, #140]	@ (8001e58 <open_socket_service+0xe8>)
 8001dcc:	462b      	mov	r3, r5
 8001dce:	a806      	add	r0, sp, #24
 8001dd0:	f006 fc64 	bl	800869c <sniprintf>
		uart_transmit_string(&huart1, (uint8_t *)output_elapsed);
 8001dd4:	481f      	ldr	r0, [pc, #124]	@ (8001e54 <open_socket_service+0xe4>)
 8001dd6:	a906      	add	r1, sp, #24
 8001dd8:	f001 faee 	bl	80033b8 <uart_transmit_string>
	while(first_pointer == NULL && elapsed_time_ms < timeout_seconds){
 8001ddc:	b90c      	cbnz	r4, 8001de2 <open_socket_service+0x72>
 8001dde:	2d96      	cmp	r5, #150	@ 0x96
 8001de0:	d1e9      	bne.n	8001db6 <open_socket_service+0x46>
	}
	receive_response("Check OPEN socket service: \r\n");
 8001de2:	4819      	ldr	r0, [pc, #100]	@ (8001e48 <open_socket_service+0xd8>)
 8001de4:	f7ff faf0 	bl	80013c8 <receive_response>
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8001de8:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8001dec:	2100      	movs	r1, #0
 8001dee:	481b      	ldr	r0, [pc, #108]	@ (8001e5c <open_socket_service+0xec>)
 8001df0:	f006 fd17 	bl	8008822 <memset>
	SIM_UART_ReInitializeRxDMA();
 8001df4:	f7ff facc 	bl	8001390 <SIM_UART_ReInitializeRxDMA>
	
	if(first_pointer != NULL)
 8001df8:	b1ec      	cbz	r4, 8001e36 <open_socket_service+0xc6>
	{
		send_AT_command("AT+QISTATE=1,0\r\n");
 8001dfa:	4819      	ldr	r0, [pc, #100]	@ (8001e60 <open_socket_service+0xf0>)
		while(strstr((char *) response, CHECK_RESPONSE) == NULL){
 8001dfc:	4d19      	ldr	r5, [pc, #100]	@ (8001e64 <open_socket_service+0xf4>)
 8001dfe:	4c17      	ldr	r4, [pc, #92]	@ (8001e5c <open_socket_service+0xec>)
			receive_response("Check SOCKET CONNECTION\n");
 8001e00:	4e19      	ldr	r6, [pc, #100]	@ (8001e68 <open_socket_service+0xf8>)
		send_AT_command("AT+QISTATE=1,0\r\n");
 8001e02:	f7ff fab5 	bl	8001370 <send_AT_command>
		while(strstr((char *) response, CHECK_RESPONSE) == NULL){
 8001e06:	4629      	mov	r1, r5
 8001e08:	4620      	mov	r0, r4
 8001e0a:	f006 fd24 	bl	8008856 <strstr>
 8001e0e:	b170      	cbz	r0, 8001e2e <open_socket_service+0xbe>
		}
		osDelay(100);
 8001e10:	2064      	movs	r0, #100	@ 0x64
 8001e12:	f003 fcff 	bl	8005814 <osDelay>
		memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8001e16:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8001e1a:	2100      	movs	r1, #0
 8001e1c:	480f      	ldr	r0, [pc, #60]	@ (8001e5c <open_socket_service+0xec>)
 8001e1e:	f006 fd00 	bl	8008822 <memset>
		SIM_UART_ReInitializeRxDMA();
 8001e22:	f7ff fab5 	bl	8001390 <SIM_UART_ReInitializeRxDMA>
		return 1;
 8001e26:	2001      	movs	r0, #1
	}
	else return 0;
}
 8001e28:	b066      	add	sp, #408	@ 0x198
 8001e2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			receive_response("Check SOCKET CONNECTION\n");
 8001e2e:	4630      	mov	r0, r6
 8001e30:	f7ff faca 	bl	80013c8 <receive_response>
 8001e34:	e7e7      	b.n	8001e06 <open_socket_service+0x96>
	else return 0;
 8001e36:	4620      	mov	r0, r4
 8001e38:	e7f6      	b.n	8001e28 <open_socket_service+0xb8>
 8001e3a:	bf00      	nop
 8001e3c:	0800cdc7 	.word	0x0800cdc7
 8001e40:	0800cdd4 	.word	0x0800cdd4
 8001e44:	0800cda2 	.word	0x0800cda2
 8001e48:	0800cde7 	.word	0x0800cde7
 8001e4c:	0800ce05 	.word	0x0800ce05
 8001e50:	0800cdd8 	.word	0x0800cdd8
 8001e54:	2000118c 	.word	0x2000118c
 8001e58:	0800c94a 	.word	0x0800c94a
 8001e5c:	20000bd0 	.word	0x20000bd0
 8001e60:	0800ce0e 	.word	0x0800ce0e
 8001e64:	0800cb54 	.word	0x0800cb54
 8001e68:	0800ce1f 	.word	0x0800ce1f

08001e6c <send_data_to_server>:
	osDelay(100);
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
	SIM_UART_ReInitializeRxDMA();
}

void send_data_to_server(int connect_id, uint8_t* message, int message_length){
 8001e6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001e70:	f5ad 7d42 	sub.w	sp, sp, #776	@ 0x308
 8001e74:	ad42      	add	r5, sp, #264	@ 0x108
	uint8_t command[256];
	int count_check = 0;
	char message_hex[512];  // Each byte takes 2 hex chars

	for (int i = 0; i < message_length; i++) {
		snprintf(&message_hex[i * 2], 3, "%02X", message[i]);
 8001e76:	f8df a088 	ldr.w	sl, [pc, #136]	@ 8001f00 <send_data_to_server+0x94>
void send_data_to_server(int connect_id, uint8_t* message, int message_length){
 8001e7a:	4606      	mov	r6, r0
 8001e7c:	4688      	mov	r8, r1
 8001e7e:	4617      	mov	r7, r2
	for (int i = 0; i < message_length; i++) {
 8001e80:	2400      	movs	r4, #0
 8001e82:	46a9      	mov	r9, r5
 8001e84:	42bc      	cmp	r4, r7
 8001e86:	db25      	blt.n	8001ed4 <send_data_to_server+0x68>
	}

	snprintf((char *)command, sizeof(command), "AT+QISENDEX=%d,\"%s\"\r\n", connect_id, message_hex);
 8001e88:	4633      	mov	r3, r6
 8001e8a:	4a19      	ldr	r2, [pc, #100]	@ (8001ef0 <send_data_to_server+0x84>)
 8001e8c:	f8cd 9000 	str.w	r9, [sp]
 8001e90:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001e94:	a802      	add	r0, sp, #8
 8001e96:	f006 fc01 	bl	800869c <sniprintf>

	//snprintf((char *)command, sizeof(command), "AT+QISENDEX=%d,\"%s\"\r\n", connect_id, message);
	send_AT_command((char*)command);
 8001e9a:	a802      	add	r0, sp, #8
 8001e9c:	f7ff fa68 	bl	8001370 <send_AT_command>
	
	while(strstr((char *) response, CHECK_RESPONSE) == NULL){
 8001ea0:	4d14      	ldr	r5, [pc, #80]	@ (8001ef4 <send_data_to_server+0x88>)
 8001ea2:	4c15      	ldr	r4, [pc, #84]	@ (8001ef8 <send_data_to_server+0x8c>)
		receive_response("Check sending to server\n");
 8001ea4:	4e15      	ldr	r6, [pc, #84]	@ (8001efc <send_data_to_server+0x90>)
	while(strstr((char *) response, CHECK_RESPONSE) == NULL){
 8001ea6:	4629      	mov	r1, r5
 8001ea8:	4620      	mov	r0, r4
 8001eaa:	f006 fcd4 	bl	8008856 <strstr>
 8001eae:	b1d8      	cbz	r0, 8001ee8 <send_data_to_server+0x7c>
	}
	receive_response("Check sending to server\n");
 8001eb0:	4812      	ldr	r0, [pc, #72]	@ (8001efc <send_data_to_server+0x90>)
 8001eb2:	f7ff fa89 	bl	80013c8 <receive_response>
	osDelay(100);
 8001eb6:	2064      	movs	r0, #100	@ 0x64
 8001eb8:	f003 fcac 	bl	8005814 <osDelay>
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8001ebc:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8001ec0:	2100      	movs	r1, #0
 8001ec2:	480d      	ldr	r0, [pc, #52]	@ (8001ef8 <send_data_to_server+0x8c>)
 8001ec4:	f006 fcad 	bl	8008822 <memset>
	SIM_UART_ReInitializeRxDMA();
 8001ec8:	f7ff fa62 	bl	8001390 <SIM_UART_ReInitializeRxDMA>
}
 8001ecc:	f50d 7d42 	add.w	sp, sp, #776	@ 0x308
 8001ed0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		snprintf(&message_hex[i * 2], 3, "%02X", message[i]);
 8001ed4:	f818 3004 	ldrb.w	r3, [r8, r4]
 8001ed8:	4628      	mov	r0, r5
 8001eda:	4652      	mov	r2, sl
 8001edc:	2103      	movs	r1, #3
 8001ede:	f006 fbdd 	bl	800869c <sniprintf>
	for (int i = 0; i < message_length; i++) {
 8001ee2:	3401      	adds	r4, #1
 8001ee4:	3502      	adds	r5, #2
 8001ee6:	e7cd      	b.n	8001e84 <send_data_to_server+0x18>
		receive_response("Check sending to server\n");
 8001ee8:	4630      	mov	r0, r6
 8001eea:	f7ff fa6d 	bl	80013c8 <receive_response>
 8001eee:	e7da      	b.n	8001ea6 <send_data_to_server+0x3a>
 8001ef0:	0800ce38 	.word	0x0800ce38
 8001ef4:	0800cb54 	.word	0x0800cb54
 8001ef8:	20000bd0 	.word	0x20000bd0
 8001efc:	0800ce4e 	.word	0x0800ce4e
 8001f00:	0800d226 	.word	0x0800d226

08001f04 <check_data_sent_to_server>:

void check_data_sent_to_server(int connect_id){
 8001f04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001f08:	b0e0      	sub	sp, #384	@ 0x180
	uint8_t command[256];
	int count_check = 0;
	snprintf((char *)command, sizeof(command), "AT+QISEND=%d,0\r\n", connect_id);
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	4a2d      	ldr	r2, [pc, #180]	@ (8001fc4 <check_data_sent_to_server+0xc0>)
	send_AT_command((char*)command);
	while(strstr((char *) response, CHECK_RESPONSE) == NULL){
 8001f0e:	4f2e      	ldr	r7, [pc, #184]	@ (8001fc8 <check_data_sent_to_server+0xc4>)
 8001f10:	4e2e      	ldr	r6, [pc, #184]	@ (8001fcc <check_data_sent_to_server+0xc8>)
		if(count_check >= 3){
			count_check = 0;
			break;
		}
		count_check++;
		snprintf(output_elapsed, 128, "Elapsed Time: %d\n", count_check);
 8001f12:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8001fe8 <check_data_sent_to_server+0xe4>
	snprintf((char *)command, sizeof(command), "AT+QISEND=%d,0\r\n", connect_id);
 8001f16:	f44f 7180 	mov.w	r1, #256	@ 0x100
void check_data_sent_to_server(int connect_id){
 8001f1a:	4604      	mov	r4, r0
	snprintf((char *)command, sizeof(command), "AT+QISEND=%d,0\r\n", connect_id);
 8001f1c:	a820      	add	r0, sp, #128	@ 0x80
 8001f1e:	f006 fbbd 	bl	800869c <sniprintf>
	send_AT_command((char*)command);
 8001f22:	a820      	add	r0, sp, #128	@ 0x80
 8001f24:	f7ff fa24 	bl	8001370 <send_AT_command>
	int count_check = 0;
 8001f28:	2500      	movs	r5, #0
	while(strstr((char *) response, CHECK_RESPONSE) == NULL){
 8001f2a:	4639      	mov	r1, r7
 8001f2c:	4630      	mov	r0, r6
 8001f2e:	f006 fc92 	bl	8008856 <strstr>
 8001f32:	b388      	cbz	r0, 8001f98 <check_data_sent_to_server+0x94>
		uart_transmit_string(&huart1, (uint8_t *)output_elapsed);
		receive_response("Check sending to server\n");
	}
	receive_response("Check sending to server\n");
 8001f34:	4826      	ldr	r0, [pc, #152]	@ (8001fd0 <check_data_sent_to_server+0xcc>)
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
	SIM_UART_ReInitializeRxDMA();
	
	snprintf((char *)command, sizeof(command), "AT+QIRD=%d,1500\r\n", connect_id);
	send_AT_command((char*)command);
	while(strstr((char *) response, "+QIRD") == NULL){
 8001f36:	4d27      	ldr	r5, [pc, #156]	@ (8001fd4 <check_data_sent_to_server+0xd0>)
		receive_response("Check received data from server\n");
 8001f38:	4e27      	ldr	r6, [pc, #156]	@ (8001fd8 <check_data_sent_to_server+0xd4>)
	receive_response("Check sending to server\n");
 8001f3a:	f7ff fa45 	bl	80013c8 <receive_response>
	osDelay(100);
 8001f3e:	2064      	movs	r0, #100	@ 0x64
 8001f40:	f003 fc68 	bl	8005814 <osDelay>
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8001f44:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8001f48:	2100      	movs	r1, #0
 8001f4a:	4820      	ldr	r0, [pc, #128]	@ (8001fcc <check_data_sent_to_server+0xc8>)
 8001f4c:	f006 fc69 	bl	8008822 <memset>
	SIM_UART_ReInitializeRxDMA();
 8001f50:	f7ff fa1e 	bl	8001390 <SIM_UART_ReInitializeRxDMA>
	snprintf((char *)command, sizeof(command), "AT+QIRD=%d,1500\r\n", connect_id);
 8001f54:	4623      	mov	r3, r4
 8001f56:	4a21      	ldr	r2, [pc, #132]	@ (8001fdc <check_data_sent_to_server+0xd8>)
	while(strstr((char *) response, "+QIRD") == NULL){
 8001f58:	4c1c      	ldr	r4, [pc, #112]	@ (8001fcc <check_data_sent_to_server+0xc8>)
	snprintf((char *)command, sizeof(command), "AT+QIRD=%d,1500\r\n", connect_id);
 8001f5a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001f5e:	a820      	add	r0, sp, #128	@ 0x80
 8001f60:	f006 fb9c 	bl	800869c <sniprintf>
	send_AT_command((char*)command);
 8001f64:	a820      	add	r0, sp, #128	@ 0x80
 8001f66:	f7ff fa03 	bl	8001370 <send_AT_command>
	while(strstr((char *) response, "+QIRD") == NULL){
 8001f6a:	4629      	mov	r1, r5
 8001f6c:	4620      	mov	r0, r4
 8001f6e:	f006 fc72 	bl	8008856 <strstr>
 8001f72:	b310      	cbz	r0, 8001fba <check_data_sent_to_server+0xb6>
	}
	osDelay(100);
 8001f74:	2064      	movs	r0, #100	@ 0x64
 8001f76:	f003 fc4d 	bl	8005814 <osDelay>
	uart_transmit_string(&huart1, (uint8_t*) "OUT OF receive data from server");
 8001f7a:	4919      	ldr	r1, [pc, #100]	@ (8001fe0 <check_data_sent_to_server+0xdc>)
 8001f7c:	4819      	ldr	r0, [pc, #100]	@ (8001fe4 <check_data_sent_to_server+0xe0>)
 8001f7e:	f001 fa1b 	bl	80033b8 <uart_transmit_string>
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8001f82:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8001f86:	2100      	movs	r1, #0
 8001f88:	4810      	ldr	r0, [pc, #64]	@ (8001fcc <check_data_sent_to_server+0xc8>)
 8001f8a:	f006 fc4a 	bl	8008822 <memset>
	SIM_UART_ReInitializeRxDMA();
 8001f8e:	f7ff f9ff 	bl	8001390 <SIM_UART_ReInitializeRxDMA>
	
}
 8001f92:	b060      	add	sp, #384	@ 0x180
 8001f94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if(count_check >= 3){
 8001f98:	2d03      	cmp	r5, #3
 8001f9a:	d0cb      	beq.n	8001f34 <check_data_sent_to_server+0x30>
		count_check++;
 8001f9c:	3501      	adds	r5, #1
		snprintf(output_elapsed, 128, "Elapsed Time: %d\n", count_check);
 8001f9e:	462b      	mov	r3, r5
 8001fa0:	4642      	mov	r2, r8
 8001fa2:	2180      	movs	r1, #128	@ 0x80
 8001fa4:	4668      	mov	r0, sp
 8001fa6:	f006 fb79 	bl	800869c <sniprintf>
		uart_transmit_string(&huart1, (uint8_t *)output_elapsed);
 8001faa:	480e      	ldr	r0, [pc, #56]	@ (8001fe4 <check_data_sent_to_server+0xe0>)
 8001fac:	4669      	mov	r1, sp
 8001fae:	f001 fa03 	bl	80033b8 <uart_transmit_string>
		receive_response("Check sending to server\n");
 8001fb2:	4807      	ldr	r0, [pc, #28]	@ (8001fd0 <check_data_sent_to_server+0xcc>)
 8001fb4:	f7ff fa08 	bl	80013c8 <receive_response>
 8001fb8:	e7b7      	b.n	8001f2a <check_data_sent_to_server+0x26>
		receive_response("Check received data from server\n");
 8001fba:	4630      	mov	r0, r6
 8001fbc:	f7ff fa04 	bl	80013c8 <receive_response>
 8001fc0:	e7d3      	b.n	8001f6a <check_data_sent_to_server+0x66>
 8001fc2:	bf00      	nop
 8001fc4:	0800ce67 	.word	0x0800ce67
 8001fc8:	0800cb54 	.word	0x0800cb54
 8001fcc:	20000bd0 	.word	0x20000bd0
 8001fd0:	0800ce4e 	.word	0x0800ce4e
 8001fd4:	0800ceab 	.word	0x0800ceab
 8001fd8:	0800ce8a 	.word	0x0800ce8a
 8001fdc:	0800ce78 	.word	0x0800ce78
 8001fe0:	0800ceb1 	.word	0x0800ceb1
 8001fe4:	2000118c 	.word	0x2000118c
 8001fe8:	0800c94a 	.word	0x0800c94a

08001fec <close_connection>:
void close_connection(int connect_id){
 8001fec:	b530      	push	{r4, r5, lr}
 8001fee:	b0c1      	sub	sp, #260	@ 0x104
 8001ff0:	4603      	mov	r3, r0
	uint8_t command[256];
	snprintf((char *)command, sizeof(command), "AT+QICLOSE=%d\r\n", connect_id);
 8001ff2:	4a12      	ldr	r2, [pc, #72]	@ (800203c <close_connection+0x50>)
	send_AT_command((char*)command);
	while(strstr((char *) response, CHECK_RESPONSE) == NULL){
 8001ff4:	4c12      	ldr	r4, [pc, #72]	@ (8002040 <close_connection+0x54>)
		receive_response("Check CLOSING to server\n");
 8001ff6:	4d13      	ldr	r5, [pc, #76]	@ (8002044 <close_connection+0x58>)
	snprintf((char *)command, sizeof(command), "AT+QICLOSE=%d\r\n", connect_id);
 8001ff8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001ffc:	4668      	mov	r0, sp
 8001ffe:	f006 fb4d 	bl	800869c <sniprintf>
	send_AT_command((char*)command);
 8002002:	4668      	mov	r0, sp
 8002004:	f7ff f9b4 	bl	8001370 <send_AT_command>
	while(strstr((char *) response, CHECK_RESPONSE) == NULL){
 8002008:	480f      	ldr	r0, [pc, #60]	@ (8002048 <close_connection+0x5c>)
 800200a:	4621      	mov	r1, r4
 800200c:	f006 fc23 	bl	8008856 <strstr>
 8002010:	b178      	cbz	r0, 8002032 <close_connection+0x46>
	}
	receive_response("Check CLOSING to server\n");
 8002012:	480c      	ldr	r0, [pc, #48]	@ (8002044 <close_connection+0x58>)
 8002014:	f7ff f9d8 	bl	80013c8 <receive_response>
	osDelay(100);
 8002018:	2064      	movs	r0, #100	@ 0x64
 800201a:	f003 fbfb 	bl	8005814 <osDelay>
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 800201e:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8002022:	2100      	movs	r1, #0
 8002024:	4808      	ldr	r0, [pc, #32]	@ (8002048 <close_connection+0x5c>)
 8002026:	f006 fbfc 	bl	8008822 <memset>
	SIM_UART_ReInitializeRxDMA();
 800202a:	f7ff f9b1 	bl	8001390 <SIM_UART_ReInitializeRxDMA>
}
 800202e:	b041      	add	sp, #260	@ 0x104
 8002030:	bd30      	pop	{r4, r5, pc}
		receive_response("Check CLOSING to server\n");
 8002032:	4628      	mov	r0, r5
 8002034:	f7ff f9c8 	bl	80013c8 <receive_response>
 8002038:	e7e6      	b.n	8002008 <close_connection+0x1c>
 800203a:	bf00      	nop
 800203c:	0800ced1 	.word	0x0800ced1
 8002040:	0800cb54 	.word	0x0800cb54
 8002044:	0800cee1 	.word	0x0800cee1
 8002048:	20000bd0 	.word	0x20000bd0

0800204c <receiveRMCDataGSM>:

void receiveRMCDataGSM(void) {
 800204c:	b570      	push	{r4, r5, r6, lr}
	uint8_t output_buffer[70];
	uart_transmit_string(&huart1, (uint8_t*)"Inside Receiving RMC Data GSM\n");
	osEvent evt = osMailGet(RMC_MailQGSMId, 90000); // Wait for mail
 800204e:	4e56      	ldr	r6, [pc, #344]	@ (80021a8 <receiveRMCDataGSM+0x15c>)
	uart_transmit_string(&huart1, (uint8_t*)"Inside Receiving RMC Data GSM\n");
 8002050:	4956      	ldr	r1, [pc, #344]	@ (80021ac <receiveRMCDataGSM+0x160>)
 8002052:	4857      	ldr	r0, [pc, #348]	@ (80021b0 <receiveRMCDataGSM+0x164>)
void receiveRMCDataGSM(void) {
 8002054:	b09e      	sub	sp, #120	@ 0x78
	uart_transmit_string(&huart1, (uint8_t*)"Inside Receiving RMC Data GSM\n");
 8002056:	f001 f9af 	bl	80033b8 <uart_transmit_string>
	osEvent evt = osMailGet(RMC_MailQGSMId, 90000); // Wait for mail
 800205a:	4a56      	ldr	r2, [pc, #344]	@ (80021b4 <receiveRMCDataGSM+0x168>)
 800205c:	6831      	ldr	r1, [r6, #0]
 800205e:	a809      	add	r0, sp, #36	@ 0x24
 8002060:	f003 fcb2 	bl	80059c8 <osMailGet>
	
	int countReceived = 0;
	//if(evt.status == osEventMail){
	if(evt.status == osEventMail){
 8002064:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002066:	2b20      	cmp	r3, #32
 8002068:	f040 809b 	bne.w	80021a2 <receiveRMCDataGSM+0x156>
		uart_transmit_string(&huart1, (uint8_t*)"Received  RMC Data GSM\n");
 800206c:	4952      	ldr	r1, [pc, #328]	@ (80021b8 <receiveRMCDataGSM+0x16c>)
 800206e:	4850      	ldr	r0, [pc, #320]	@ (80021b0 <receiveRMCDataGSM+0x164>)
		uart_transmit_string(&huart1, output_buffer);

		snprintf((char *)output_buffer, sizeof(output_buffer),"Speed GSM: %.2f, Course: %.2f, Valid: %d\n", receivedData->speed, receivedData->course, receivedData->isValid);
		uart_transmit_string(&huart1, output_buffer);

		rmc_jt.lcation.latitude = receivedData->lcation.latitude;
 8002070:	4d52      	ldr	r5, [pc, #328]	@ (80021bc <receiveRMCDataGSM+0x170>)
		uart_transmit_string(&huart1, (uint8_t*)"Received  RMC Data GSM\n");
 8002072:	f001 f9a1 	bl	80033b8 <uart_transmit_string>
		RMCSTRUCT *receivedData = (RMCSTRUCT *)evt.value.p;
 8002076:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
		snprintf((char *)output_buffer, sizeof(output_buffer), "Time Received GSM: %d:%d:%d\n", receivedData->tim.hour, receivedData->tim.min, receivedData->tim.sec);
 8002078:	4a51      	ldr	r2, [pc, #324]	@ (80021c0 <receiveRMCDataGSM+0x174>)
 800207a:	68a3      	ldr	r3, [r4, #8]
 800207c:	9301      	str	r3, [sp, #4]
 800207e:	6863      	ldr	r3, [r4, #4]
 8002080:	9300      	str	r3, [sp, #0]
 8002082:	6823      	ldr	r3, [r4, #0]
 8002084:	2146      	movs	r1, #70	@ 0x46
 8002086:	a80c      	add	r0, sp, #48	@ 0x30
 8002088:	f006 fb08 	bl	800869c <sniprintf>
		uart_transmit_string(&huart1, output_buffer);
 800208c:	4848      	ldr	r0, [pc, #288]	@ (80021b0 <receiveRMCDataGSM+0x164>)
 800208e:	a90c      	add	r1, sp, #48	@ 0x30
 8002090:	f001 f992 	bl	80033b8 <uart_transmit_string>
		snprintf((char *)output_buffer, sizeof(output_buffer), "Date Received GSM : %d/%d/%d\n", receivedData->date.Day, receivedData->date.Mon, receivedData->date.Yr);
 8002094:	69a3      	ldr	r3, [r4, #24]
 8002096:	9301      	str	r3, [sp, #4]
 8002098:	6963      	ldr	r3, [r4, #20]
 800209a:	9300      	str	r3, [sp, #0]
 800209c:	6923      	ldr	r3, [r4, #16]
 800209e:	4a49      	ldr	r2, [pc, #292]	@ (80021c4 <receiveRMCDataGSM+0x178>)
 80020a0:	2146      	movs	r1, #70	@ 0x46
 80020a2:	a80c      	add	r0, sp, #48	@ 0x30
 80020a4:	f006 fafa 	bl	800869c <sniprintf>
		uart_transmit_string(&huart1, output_buffer);
 80020a8:	4841      	ldr	r0, [pc, #260]	@ (80021b0 <receiveRMCDataGSM+0x164>)
 80020aa:	a90c      	add	r1, sp, #48	@ 0x30
 80020ac:	f001 f984 	bl	80033b8 <uart_transmit_string>
		snprintf((char *)output_buffer, sizeof(output_buffer), "Location Received GSM: %.6f %c, %.6f %c\n", receivedData->lcation.latitude, receivedData->lcation.NS, receivedData->lcation.longitude, receivedData->lcation.EW);
 80020b0:	f894 3050 	ldrb.w	r3, [r4, #80]	@ 0x50
 80020b4:	9306      	str	r3, [sp, #24]
 80020b6:	e9d4 2312 	ldrd	r2, r3, [r4, #72]	@ 0x48
 80020ba:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80020be:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 80020c2:	9302      	str	r3, [sp, #8]
 80020c4:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	@ 0x38
 80020c8:	2146      	movs	r1, #70	@ 0x46
 80020ca:	e9cd 2300 	strd	r2, r3, [sp]
 80020ce:	a80c      	add	r0, sp, #48	@ 0x30
 80020d0:	4a3d      	ldr	r2, [pc, #244]	@ (80021c8 <receiveRMCDataGSM+0x17c>)
 80020d2:	f006 fae3 	bl	800869c <sniprintf>
		uart_transmit_string(&huart1, output_buffer);
 80020d6:	4836      	ldr	r0, [pc, #216]	@ (80021b0 <receiveRMCDataGSM+0x164>)
 80020d8:	a90c      	add	r1, sp, #48	@ 0x30
 80020da:	f001 f96d 	bl	80033b8 <uart_transmit_string>
		snprintf((char *)output_buffer, sizeof(output_buffer),"Speed GSM: %.2f, Course: %.2f, Valid: %d\n", receivedData->speed, receivedData->course, receivedData->isValid);
 80020de:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80020e0:	9304      	str	r3, [sp, #16]
 80020e2:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 80020e4:	f7fe fa40 	bl	8000568 <__aeabi_f2d>
 80020e8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80020ec:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 80020ee:	f7fe fa3b 	bl	8000568 <__aeabi_f2d>
 80020f2:	4a36      	ldr	r2, [pc, #216]	@ (80021cc <receiveRMCDataGSM+0x180>)
 80020f4:	e9cd 0100 	strd	r0, r1, [sp]
 80020f8:	2146      	movs	r1, #70	@ 0x46
 80020fa:	a80c      	add	r0, sp, #48	@ 0x30
 80020fc:	f006 face 	bl	800869c <sniprintf>
		uart_transmit_string(&huart1, output_buffer);
 8002100:	482b      	ldr	r0, [pc, #172]	@ (80021b0 <receiveRMCDataGSM+0x164>)
 8002102:	a90c      	add	r1, sp, #48	@ 0x30
 8002104:	f001 f958 	bl	80033b8 <uart_transmit_string>
		rmc_jt.lcation.latitude = receivedData->lcation.latitude;
 8002108:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	@ 0x38
 800210c:	e9c5 230e 	strd	r2, r3, [r5, #56]	@ 0x38
		rmc_jt.lcation.longitude = receivedData->lcation.longitude;
 8002110:	e9d4 2312 	ldrd	r2, r3, [r4, #72]	@ 0x48
 8002114:	e9c5 2312 	strd	r2, r3, [r5, #72]	@ 0x48
		rmc_jt.speed = receivedData->speed;
 8002118:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800211a:	62ab      	str	r3, [r5, #40]	@ 0x28
		rmc_jt.course = receivedData->course;
 800211c:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800211e:	62eb      	str	r3, [r5, #44]	@ 0x2c
		rmc_jt.lcation.NS = receivedData->lcation.NS;
 8002120:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 8002124:	f885 3040 	strb.w	r3, [r5, #64]	@ 0x40
		rmc_jt.lcation.EW = receivedData->lcation.EW;
 8002128:	f894 3050 	ldrb.w	r3, [r4, #80]	@ 0x50
 800212c:	f885 3050 	strb.w	r3, [r5, #80]	@ 0x50
		rmc_jt.isValid = receivedData->isValid;
 8002130:	6b23      	ldr	r3, [r4, #48]	@ 0x30
			
		uart_transmit_string(&huart1, (uint8_t*)"RMC Data  Saved GSM\n");
 8002132:	4927      	ldr	r1, [pc, #156]	@ (80021d0 <receiveRMCDataGSM+0x184>)
 8002134:	481e      	ldr	r0, [pc, #120]	@ (80021b0 <receiveRMCDataGSM+0x164>)
		rmc_jt.isValid = receivedData->isValid;
 8002136:	632b      	str	r3, [r5, #48]	@ 0x30
		uart_transmit_string(&huart1, (uint8_t*)"RMC Data  Saved GSM\n");
 8002138:	f001 f93e 	bl	80033b8 <uart_transmit_string>
		// Process received data (e.g., display, log, or store data)
		snprintf((char *)output_buffer, sizeof(output_buffer), "Location Received FLASH: %.6f %c, %.6f %c\n", rmc_jt.lcation.latitude, rmc_jt.lcation.NS, rmc_jt.lcation.longitude, rmc_jt.lcation.EW);
 800213c:	f895 3050 	ldrb.w	r3, [r5, #80]	@ 0x50
 8002140:	9306      	str	r3, [sp, #24]
 8002142:	e9d5 2312 	ldrd	r2, r3, [r5, #72]	@ 0x48
 8002146:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800214a:	f895 3040 	ldrb.w	r3, [r5, #64]	@ 0x40
 800214e:	9302      	str	r3, [sp, #8]
 8002150:	e9d5 230e 	ldrd	r2, r3, [r5, #56]	@ 0x38
 8002154:	2146      	movs	r1, #70	@ 0x46
 8002156:	e9cd 2300 	strd	r2, r3, [sp]
 800215a:	a80c      	add	r0, sp, #48	@ 0x30
 800215c:	4a1d      	ldr	r2, [pc, #116]	@ (80021d4 <receiveRMCDataGSM+0x188>)
 800215e:	f006 fa9d 	bl	800869c <sniprintf>
		uart_transmit_string(&huart1, output_buffer);
 8002162:	4813      	ldr	r0, [pc, #76]	@ (80021b0 <receiveRMCDataGSM+0x164>)
 8002164:	a90c      	add	r1, sp, #48	@ 0x30
 8002166:	f001 f927 	bl	80033b8 <uart_transmit_string>

		snprintf((char *)output_buffer, sizeof(output_buffer),"Speed FLASH: %.2f, Course: %.2f, Valid: %d\n", rmc_jt.speed, rmc_jt.course, rmc_jt.isValid);
 800216a:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800216c:	9304      	str	r3, [sp, #16]
 800216e:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 8002170:	f7fe f9fa 	bl	8000568 <__aeabi_f2d>
 8002174:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002178:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 800217a:	f7fe f9f5 	bl	8000568 <__aeabi_f2d>
 800217e:	4a16      	ldr	r2, [pc, #88]	@ (80021d8 <receiveRMCDataGSM+0x18c>)
 8002180:	e9cd 0100 	strd	r0, r1, [sp]
 8002184:	2146      	movs	r1, #70	@ 0x46
 8002186:	a80c      	add	r0, sp, #48	@ 0x30
 8002188:	f006 fa88 	bl	800869c <sniprintf>
		uart_transmit_string(&huart1, output_buffer);
 800218c:	4808      	ldr	r0, [pc, #32]	@ (80021b0 <receiveRMCDataGSM+0x164>)
 800218e:	a90c      	add	r1, sp, #48	@ 0x30
 8002190:	f001 f912 	bl	80033b8 <uart_transmit_string>

		received_RMC = 1;
 8002194:	4b11      	ldr	r3, [pc, #68]	@ (80021dc <receiveRMCDataGSM+0x190>)
		osMailFree(RMC_MailQGSMId, receivedData); // Free memory after use
 8002196:	6830      	ldr	r0, [r6, #0]
		received_RMC = 1;
 8002198:	2201      	movs	r2, #1
		osMailFree(RMC_MailQGSMId, receivedData); // Free memory after use
 800219a:	4621      	mov	r1, r4
		received_RMC = 1;
 800219c:	601a      	str	r2, [r3, #0]
		osMailFree(RMC_MailQGSMId, receivedData); // Free memory after use
 800219e:	f003 fc4c 	bl	8005a3a <osMailFree>
   }
}
 80021a2:	b01e      	add	sp, #120	@ 0x78
 80021a4:	bd70      	pop	{r4, r5, r6, pc}
 80021a6:	bf00      	nop
 80021a8:	200013f8 	.word	0x200013f8
 80021ac:	0800cefa 	.word	0x0800cefa
 80021b0:	2000118c 	.word	0x2000118c
 80021b4:	00015f90 	.word	0x00015f90
 80021b8:	0800cf19 	.word	0x0800cf19
 80021bc:	20000b60 	.word	0x20000b60
 80021c0:	0800cf31 	.word	0x0800cf31
 80021c4:	0800cf4e 	.word	0x0800cf4e
 80021c8:	0800cf6c 	.word	0x0800cf6c
 80021cc:	0800cf95 	.word	0x0800cf95
 80021d0:	0800cfbf 	.word	0x0800cfbf
 80021d4:	0800cfd4 	.word	0x0800cfd4
 80021d8:	0800cfff 	.word	0x0800cfff
 80021dc:	20000bb8 	.word	0x20000bb8

080021e0 <StartGSM>:

void StartGSM(void const * argument)
{
 80021e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uart_transmit_string(&huart1, (uint8_t*)"Starting GSM: Pushing data to Server");
 80021e4:	498b      	ldr	r1, [pc, #556]	@ (8002414 <StartGSM+0x234>)
 80021e6:	488c      	ldr	r0, [pc, #560]	@ (8002418 <StartGSM+0x238>)
	int isReady = 0;
	int process = 0;
//HAL_UART_Receive_DMA(&huart1, rx_buffer, 128);
	for(;;)
	{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 80021e8:	4f8c      	ldr	r7, [pc, #560]	@ (800241c <StartGSM+0x23c>)
					received_RMC = 0;
				}
					process++;
					break;
			case 8:
					uart_transmit_string(&huart1, (uint8_t *)"Inside process: Check Sending Location Report\r\n");
 80021ea:	4d8b      	ldr	r5, [pc, #556]	@ (8002418 <StartGSM+0x238>)
{
 80021ec:	b0a2      	sub	sp, #136	@ 0x88
	uart_transmit_string(&huart1, (uint8_t*)"Starting GSM: Pushing data to Server");
 80021ee:	f001 f8e3 	bl	80033b8 <uart_transmit_string>
	RingBufferDmaU8_initUSARTRx(&SIMRxDMARing, &huart3, response, SIM_RESPONSE_MAX_SIZE);
 80021f2:	4a8b      	ldr	r2, [pc, #556]	@ (8002420 <StartGSM+0x240>)
 80021f4:	498b      	ldr	r1, [pc, #556]	@ (8002424 <StartGSM+0x244>)
 80021f6:	488c      	ldr	r0, [pc, #560]	@ (8002428 <StartGSM+0x248>)
 80021f8:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 80021fc:	f000 f93a 	bl	8002474 <RingBufferDmaU8_initUSARTRx>
	JT808_TerminalRegistration reg_msg = create_terminal_registration();
 8002200:	a802      	add	r0, sp, #8
 8002202:	f7ff f83d 	bl	8001280 <create_terminal_registration>
	JT808_LocationInfoReport location_info = create_location_info_report();
 8002206:	a811      	add	r0, sp, #68	@ 0x44
 8002208:	f7ff f826 	bl	8001258 <create_location_info_report>
	init_SIM_module();
 800220c:	f7ff f906 	bl	800141c <init_SIM_module>
	int process = 0;
 8002210:	2400      	movs	r4, #0
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 8002212:	4638      	mov	r0, r7
 8002214:	2201      	movs	r2, #1
 8002216:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800221a:	f001 fb43 	bl	80038a4 <HAL_GPIO_WritePin>
		osDelay(500);
 800221e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002222:	f003 faf7 	bl	8005814 <osDelay>
		switch(process){
 8002226:	2c09      	cmp	r4, #9
 8002228:	d847      	bhi.n	80022ba <StartGSM+0xda>
 800222a:	e8df f014 	tbh	[pc, r4, lsl #1]
 800222e:	000a      	.short	0x000a
 8002230:	005c0014 	.word	0x005c0014
 8002234:	00890075 	.word	0x00890075
 8002238:	00b000a2 	.word	0x00b000a2
 800223c:	00e100bc 	.word	0x00e100bc
 8002240:	00ed      	.short	0x00ed
				uart_transmit_string(&huart1, (uint8_t *)"First CHECK\r\n");
 8002242:	497a      	ldr	r1, [pc, #488]	@ (800242c <StartGSM+0x24c>)
 8002244:	4628      	mov	r0, r5
 8002246:	f001 f8b7 	bl	80033b8 <uart_transmit_string>
				isReady = first_check_SIM();
 800224a:	f7ff f927 	bl	800149c <first_check_SIM>
					if (receive_deactivate) process = 1;
 800224e:	1e04      	subs	r4, r0, #0
 8002250:	bf18      	it	ne
 8002252:	2401      	movne	r4, #1
 8002254:	e031      	b.n	80022ba <StartGSM+0xda>
				uart_transmit_string(&huart1, (uint8_t *)"Check EVERYTHING READY\r\n");
 8002256:	4976      	ldr	r1, [pc, #472]	@ (8002430 <StartGSM+0x250>)
 8002258:	4628      	mov	r0, r5
 800225a:	f001 f8ad 	bl	80033b8 <uart_transmit_string>
				osDelay(100);
 800225e:	2064      	movs	r0, #100	@ 0x64
 8002260:	f003 fad8 	bl	8005814 <osDelay>
				int check_SIM = check_SIM_ready();
 8002264:	f7ff fb4c 	bl	8001900 <check_SIM_ready>
				memcpy(reg_msg.terminal_phone_number, terminal_phone_number, sizeof(terminal_phone_number));
 8002268:	4b72      	ldr	r3, [pc, #456]	@ (8002434 <StartGSM+0x254>)
				int check_SIM = check_SIM_ready();
 800226a:	4604      	mov	r4, r0
				memcpy(reg_msg.terminal_phone_number, terminal_phone_number, sizeof(terminal_phone_number));
 800226c:	681a      	ldr	r2, [r3, #0]
 800226e:	889b      	ldrh	r3, [r3, #4]
 8002270:	f8cd 200d 	str.w	r2, [sp, #13]
				message_array = create_message_array(&reg_msg, &message_length);
 8002274:	4669      	mov	r1, sp
 8002276:	a802      	add	r0, sp, #8
				memcpy(reg_msg.terminal_phone_number, terminal_phone_number, sizeof(terminal_phone_number));
 8002278:	f8ad 3011 	strh.w	r3, [sp, #17]
				memcpy(location_info.terminal_phone_number, terminal_phone_number, sizeof(terminal_phone_number));
 800227c:	f8cd 2049 	str.w	r2, [sp, #73]	@ 0x49
 8002280:	f8ad 304d 	strh.w	r3, [sp, #77]	@ 0x4d
				message_array = create_message_array(&reg_msg, &message_length);
 8002284:	f7ff f846 	bl	8001314 <create_message_array>
				location_report_message_array = convert_location_info_to_array(&location_info, &location_report_message_length);
 8002288:	a901      	add	r1, sp, #4
				message_array = create_message_array(&reg_msg, &message_length);
 800228a:	4606      	mov	r6, r0
				location_report_message_array = convert_location_info_to_array(&location_info, &location_report_message_length);
 800228c:	a811      	add	r0, sp, #68	@ 0x44
 800228e:	f7ff f860 	bl	8001352 <convert_location_info_to_array>
				osDelay(150);
 8002292:	2096      	movs	r0, #150	@ 0x96
 8002294:	f003 fabe 	bl	8005814 <osDelay>
				if (check_SIM == 0){
 8002298:	2c00      	cmp	r4, #0
 800229a:	f040 80b9 	bne.w	8002410 <StartGSM+0x230>
					memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 800229e:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 80022a2:	4621      	mov	r1, r4
 80022a4:	485e      	ldr	r0, [pc, #376]	@ (8002420 <StartGSM+0x240>)
 80022a6:	f006 fabc 	bl	8008822 <memset>
					SIM_UART_ReInitializeRxDMA();
 80022aa:	f7ff f871 	bl	8001390 <SIM_UART_ReInitializeRxDMA>
					uart_transmit_string(&huart1,(uint8_t*) "Rebooting SIM module");
 80022ae:	4962      	ldr	r1, [pc, #392]	@ (8002438 <StartGSM+0x258>)
 80022b0:	4628      	mov	r0, r5
 80022b2:	f001 f881 	bl	80033b8 <uart_transmit_string>
					reboot_SIM_module();
 80022b6:	f7ff f8cb 	bl	8001450 <reboot_SIM_module>
					close_connection(0);
					process = 4;
					break;
					
		}
		HAL_UART_Transmit(&huart1, (uint8_t*) "Hello from GSM\n", strlen("Hello from GSM\n"), 1000);
 80022ba:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80022be:	495f      	ldr	r1, [pc, #380]	@ (800243c <StartGSM+0x25c>)
 80022c0:	220f      	movs	r2, #15
 80022c2:	4628      	mov	r0, r5
 80022c4:	f003 f936 	bl	8005534 <HAL_UART_Transmit>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 80022c8:	2200      	movs	r2, #0
 80022ca:	4638      	mov	r0, r7
 80022cc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80022d0:	f001 fae8 	bl	80038a4 <HAL_GPIO_WritePin>
		uart_transmit_string(&huart1,(uint8_t*) "\n\n");
 80022d4:	4628      	mov	r0, r5
 80022d6:	495a      	ldr	r1, [pc, #360]	@ (8002440 <StartGSM+0x260>)
 80022d8:	f001 f86e 	bl	80033b8 <uart_transmit_string>
		osDelay(500);
 80022dc:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80022e0:	f003 fa98 	bl	8005814 <osDelay>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 80022e4:	e795      	b.n	8002212 <StartGSM+0x32>
				uart_transmit_string(&huart1, (uint8_t *)"Inside process: Configure PDP context\r\n");
 80022e6:	4957      	ldr	r1, [pc, #348]	@ (8002444 <StartGSM+0x264>)
 80022e8:	4628      	mov	r0, r5
 80022ea:	f001 f865 	bl	80033b8 <uart_transmit_string>
				memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 80022ee:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 80022f2:	2100      	movs	r1, #0
 80022f4:	484a      	ldr	r0, [pc, #296]	@ (8002420 <StartGSM+0x240>)
 80022f6:	f006 fa94 	bl	8008822 <memset>
				SIM_UART_ReInitializeRxDMA();
 80022fa:	f7ff f849 	bl	8001390 <SIM_UART_ReInitializeRxDMA>
				configure_APN(1);
 80022fe:	2001      	movs	r0, #1
 8002300:	f7ff fc4e 	bl	8001ba0 <configure_APN>
				memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8002304:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8002308:	2100      	movs	r1, #0
 800230a:	4845      	ldr	r0, [pc, #276]	@ (8002420 <StartGSM+0x240>)
 800230c:	f006 fa89 	bl	8008822 <memset>
				process++;
 8002310:	2403      	movs	r4, #3
				SIM_UART_ReInitializeRxDMA();
 8002312:	f7ff f83d 	bl	8001390 <SIM_UART_ReInitializeRxDMA>
				break;
 8002316:	e7d0      	b.n	80022ba <StartGSM+0xda>
				uart_transmit_string(&huart1, (uint8_t *)"Inside process: Activate PDP context\r\n");
 8002318:	494b      	ldr	r1, [pc, #300]	@ (8002448 <StartGSM+0x268>)
 800231a:	4628      	mov	r0, r5
 800231c:	f001 f84c 	bl	80033b8 <uart_transmit_string>
				activate_context(1);
 8002320:	2001      	movs	r0, #1
 8002322:	f7ff fc8f 	bl	8001c44 <activate_context>
				osDelay(200);
 8002326:	20c8      	movs	r0, #200	@ 0xc8
 8002328:	f003 fa74 	bl	8005814 <osDelay>
				memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 800232c:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8002330:	2100      	movs	r1, #0
 8002332:	483b      	ldr	r0, [pc, #236]	@ (8002420 <StartGSM+0x240>)
 8002334:	f006 fa75 	bl	8008822 <memset>
				SIM_UART_ReInitializeRxDMA();
 8002338:	f7ff f82a 	bl	8001390 <SIM_UART_ReInitializeRxDMA>
					process = 4;
 800233c:	2404      	movs	r4, #4
					break;
 800233e:	e7bc      	b.n	80022ba <StartGSM+0xda>
				uart_transmit_string(&huart1, (uint8_t *)"Inside process: OPEN SOCKET SERVICE\r\n");
 8002340:	4942      	ldr	r1, [pc, #264]	@ (800244c <StartGSM+0x26c>)
 8002342:	4628      	mov	r0, r5
 8002344:	f001 f838 	bl	80033b8 <uart_transmit_string>
				int received_res = open_socket_service(1, 0, 0, 0);
 8002348:	2300      	movs	r3, #0
 800234a:	461a      	mov	r2, r3
 800234c:	4619      	mov	r1, r3
 800234e:	2001      	movs	r0, #1
 8002350:	f7ff fd0e 	bl	8001d70 <open_socket_service>
				if(received_res){
 8002354:	b128      	cbz	r0, 8002362 <StartGSM+0x182>
					uart_transmit_string(&huart1, (uint8_t*) "Connect to Server successfully\n");
 8002356:	493e      	ldr	r1, [pc, #248]	@ (8002450 <StartGSM+0x270>)
 8002358:	4628      	mov	r0, r5
 800235a:	f001 f82d 	bl	80033b8 <uart_transmit_string>
					process++;
 800235e:	2405      	movs	r4, #5
 8002360:	e7ab      	b.n	80022ba <StartGSM+0xda>
					uart_transmit_string(&huart1, (uint8_t*) "Connect to Server Failed\n");
 8002362:	4628      	mov	r0, r5
 8002364:	493b      	ldr	r1, [pc, #236]	@ (8002454 <StartGSM+0x274>)
 8002366:	f001 f827 	bl	80033b8 <uart_transmit_string>
					int receive_deactivate = deactivate_context(1);
 800236a:	2001      	movs	r0, #1
 800236c:	f7ff fca0 	bl	8001cb0 <deactivate_context>
 8002370:	e76d      	b.n	800224e <StartGSM+0x6e>
				uart_transmit_string(&huart1, (uint8_t *)"Inside process: Register/Login to the server.\r\n");
 8002372:	4939      	ldr	r1, [pc, #228]	@ (8002458 <StartGSM+0x278>)
 8002374:	4628      	mov	r0, r5
 8002376:	f001 f81f 	bl	80033b8 <uart_transmit_string>
				send_data_to_server(0,message_array, message_length);
 800237a:	9a00      	ldr	r2, [sp, #0]
 800237c:	4631      	mov	r1, r6
 800237e:	2000      	movs	r0, #0
 8002380:	f7ff fd74 	bl	8001e6c <send_data_to_server>
				free(message_array);
 8002384:	4630      	mov	r0, r6
 8002386:	f004 fda9 	bl	8006edc <free>
				process++;
 800238a:	2406      	movs	r4, #6
				break;
 800238c:	e795      	b.n	80022ba <StartGSM+0xda>
					uart_transmit_string(&huart1, (uint8_t *)"Inside process: Check Register/Login\r\n");
 800238e:	4933      	ldr	r1, [pc, #204]	@ (800245c <StartGSM+0x27c>)
 8002390:	4628      	mov	r0, r5
 8002392:	f001 f811 	bl	80033b8 <uart_transmit_string>
					check_data_sent_to_server(0);
 8002396:	2000      	movs	r0, #0
 8002398:	f7ff fdb4 	bl	8001f04 <check_data_sent_to_server>
					receive_response("Check terminal register\n");
 800239c:	4830      	ldr	r0, [pc, #192]	@ (8002460 <StartGSM+0x280>)
 800239e:	f7ff f813 	bl	80013c8 <receive_response>
					process++;
 80023a2:	2407      	movs	r4, #7
					break;
 80023a4:	e789      	b.n	80022ba <StartGSM+0xda>
				uart_transmit_string(&huart1, (uint8_t *)"Inside process: Send Location\r\n");
 80023a6:	492f      	ldr	r1, [pc, #188]	@ (8002464 <StartGSM+0x284>)
 80023a8:	4628      	mov	r0, r5
 80023aa:	f001 f805 	bl	80033b8 <uart_transmit_string>
				receiveRMCDataGSM();
 80023ae:	f7ff fe4d 	bl	800204c <receiveRMCDataGSM>
 80023b2:	2406      	movs	r4, #6
					get_RTC_time_date();
 80023b4:	f7ff f962 	bl	800167c <get_RTC_time_date>
					osDelay(500);
 80023b8:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80023bc:	f003 fa2a 	bl	8005814 <osDelay>
				for(size_t idx = 0; idx < 6 ; idx++){
 80023c0:	3c01      	subs	r4, #1
 80023c2:	d1f7      	bne.n	80023b4 <StartGSM+0x1d4>
				if(received_RMC == 1){
 80023c4:	f8df 80a8 	ldr.w	r8, [pc, #168]	@ 8002470 <StartGSM+0x290>
 80023c8:	f8d8 3000 	ldr.w	r3, [r8]
 80023cc:	2b01      	cmp	r3, #1
 80023ce:	d10d      	bne.n	80023ec <StartGSM+0x20c>
					save_rmc_to_location_info(&location_info);
 80023d0:	a811      	add	r0, sp, #68	@ 0x44
 80023d2:	f7ff f8c9 	bl	8001568 <save_rmc_to_location_info>
					location_report_message_array = convert_location_info_to_array(&location_info, &location_report_message_length);
 80023d6:	a901      	add	r1, sp, #4
 80023d8:	a811      	add	r0, sp, #68	@ 0x44
 80023da:	f7fe ffba 	bl	8001352 <convert_location_info_to_array>
					send_data_to_server(0, location_report_message_array ,location_report_message_length);
 80023de:	9a01      	ldr	r2, [sp, #4]
					location_report_message_array = convert_location_info_to_array(&location_info, &location_report_message_length);
 80023e0:	4601      	mov	r1, r0
					send_data_to_server(0, location_report_message_array ,location_report_message_length);
 80023e2:	4620      	mov	r0, r4
 80023e4:	f7ff fd42 	bl	8001e6c <send_data_to_server>
					received_RMC = 0;
 80023e8:	f8c8 4000 	str.w	r4, [r8]
					process++;
 80023ec:	2408      	movs	r4, #8
 80023ee:	e764      	b.n	80022ba <StartGSM+0xda>
					uart_transmit_string(&huart1, (uint8_t *)"Inside process: Check Sending Location Report\r\n");
 80023f0:	491d      	ldr	r1, [pc, #116]	@ (8002468 <StartGSM+0x288>)
 80023f2:	4628      	mov	r0, r5
 80023f4:	f000 ffe0 	bl	80033b8 <uart_transmit_string>
					check_data_sent_to_server(0);
 80023f8:	2000      	movs	r0, #0
 80023fa:	f7ff fd83 	bl	8001f04 <check_data_sent_to_server>
					receive_response("Check location report\n");
 80023fe:	481b      	ldr	r0, [pc, #108]	@ (800246c <StartGSM+0x28c>)
 8002400:	f7fe ffe2 	bl	80013c8 <receive_response>
					process++;
 8002404:	2409      	movs	r4, #9
					break;
 8002406:	e758      	b.n	80022ba <StartGSM+0xda>
					close_connection(0);
 8002408:	2000      	movs	r0, #0
 800240a:	f7ff fdef 	bl	8001fec <close_connection>
 800240e:	e795      	b.n	800233c <StartGSM+0x15c>
				else process++;
 8002410:	2402      	movs	r4, #2
 8002412:	e752      	b.n	80022ba <StartGSM+0xda>
 8002414:	0800d02b 	.word	0x0800d02b
 8002418:	2000118c 	.word	0x2000118c
 800241c:	48000800 	.word	0x48000800
 8002420:	20000bd0 	.word	0x20000bd0
 8002424:	2000107c 	.word	0x2000107c
 8002428:	20000bc0 	.word	0x20000bc0
 800242c:	0800d050 	.word	0x0800d050
 8002430:	0800d05e 	.word	0x0800d05e
 8002434:	20000b54 	.word	0x20000b54
 8002438:	0800cd8d 	.word	0x0800cd8d
 800243c:	0800d1fd 	.word	0x0800d1fd
 8002440:	0800c977 	.word	0x0800c977
 8002444:	0800d077 	.word	0x0800d077
 8002448:	0800d09f 	.word	0x0800d09f
 800244c:	0800d0c6 	.word	0x0800d0c6
 8002450:	0800d0ec 	.word	0x0800d0ec
 8002454:	0800d10c 	.word	0x0800d10c
 8002458:	0800d126 	.word	0x0800d126
 800245c:	0800d156 	.word	0x0800d156
 8002460:	0800d17d 	.word	0x0800d17d
 8002464:	0800d196 	.word	0x0800d196
 8002468:	0800d1b6 	.word	0x0800d1b6
 800246c:	0800d1e6 	.word	0x0800d1e6
 8002470:	20000bb8 	.word	0x20000bb8

08002474 <RingBufferDmaU8_initUSARTRx>:
// int daychange = 0;

uint8_t message1[] = "Hello from DSS\n";

void RingBufferDmaU8_initUSARTRx(RingBufferDmaU8_TypeDef* ring, UART_HandleTypeDef* husart, uint8_t* buffer, uint16_t size) // cai dat dma
{
 8002474:	b410      	push	{r4}
 8002476:	4604      	mov	r4, r0
 8002478:	4608      	mov	r0, r1
  ring->buffer = buffer;
  ring->size = size;
 800247a:	80a3      	strh	r3, [r4, #4]
{
 800247c:	4611      	mov	r1, r2
 800247e:	461a      	mov	r2, r3
  ring->tailPtr = buffer;
  ring->dmaHandle = husart->hdmarx;
 8002480:	6f43      	ldr	r3, [r0, #116]	@ 0x74
  ring->buffer = buffer;
 8002482:	6021      	str	r1, [r4, #0]
  ring->tailPtr = buffer;
 8002484:	60a1      	str	r1, [r4, #8]
  ring->dmaHandle = husart->hdmarx;
 8002486:	60e3      	str	r3, [r4, #12]
  HAL_UART_Receive_DMA(husart, buffer, size);
}
 8002488:	f85d 4b04 	ldr.w	r4, [sp], #4
  HAL_UART_Receive_DMA(husart, buffer, size);
 800248c:	f003 b978 	b.w	8005780 <HAL_UART_Receive_DMA>

08002490 <vApplicationGetIdleTaskMemory>:
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8002490:	4b03      	ldr	r3, [pc, #12]	@ (80024a0 <vApplicationGetIdleTaskMemory+0x10>)
 8002492:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8002494:	4b03      	ldr	r3, [pc, #12]	@ (80024a4 <vApplicationGetIdleTaskMemory+0x14>)
 8002496:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8002498:	2380      	movs	r3, #128	@ 0x80
 800249a:	6013      	str	r3, [r2, #0]
  /* place for user code */
}
 800249c:	4770      	bx	lr
 800249e:	bf00      	nop
 80024a0:	20000f50 	.word	0x20000f50
 80024a4:	20000d50 	.word	0x20000d50

080024a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80024a8:	b500      	push	{lr}
 80024aa:	b09f      	sub	sp, #124	@ 0x7c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80024ac:	2228      	movs	r2, #40	@ 0x28
 80024ae:	2100      	movs	r1, #0
 80024b0:	a805      	add	r0, sp, #20
 80024b2:	f006 f9b6 	bl	8008822 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80024b6:	2214      	movs	r2, #20
 80024b8:	2100      	movs	r1, #0
 80024ba:	4668      	mov	r0, sp
 80024bc:	f006 f9b1 	bl	8008822 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80024c0:	223c      	movs	r2, #60	@ 0x3c
 80024c2:	2100      	movs	r1, #0
 80024c4:	eb0d 0002 	add.w	r0, sp, r2
 80024c8:	f006 f9ab 	bl	8008822 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80024cc:	f001 f9f0 	bl	80038b0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80024d0:	4a18      	ldr	r2, [pc, #96]	@ (8002534 <SystemClock_Config+0x8c>)
 80024d2:	6a13      	ldr	r3, [r2, #32]
 80024d4:	f023 0318 	bic.w	r3, r3, #24
 80024d8:	6213      	str	r3, [r2, #32]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 80024da:	2306      	movs	r3, #6
 80024dc:	9305      	str	r3, [sp, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80024de:	2301      	movs	r3, #1
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80024e0:	e9cd 3308 	strd	r3, r3, [sp, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80024e4:	2310      	movs	r3, #16
 80024e6:	930a      	str	r3, [sp, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80024e8:	a805      	add	r0, sp, #20
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80024ea:	2300      	movs	r3, #0
 80024ec:	930c      	str	r3, [sp, #48]	@ 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80024ee:	f001 f9e7 	bl	80038c0 <HAL_RCC_OscConfig>
 80024f2:	4601      	mov	r1, r0
 80024f4:	b108      	cbz	r0, 80024fa <SystemClock_Config+0x52>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80024f6:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80024f8:	e7fe      	b.n	80024f8 <SystemClock_Config+0x50>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80024fa:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80024fc:	e9cd 3000 	strd	r3, r0, [sp]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002500:	e9cd 0002 	strd	r0, r0, [sp, #8]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002504:	9004      	str	r0, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002506:	4668      	mov	r0, sp
 8002508:	f001 fc5a 	bl	8003dc0 <HAL_RCC_ClockConfig>
 800250c:	b108      	cbz	r0, 8002512 <SystemClock_Config+0x6a>
 800250e:	b672      	cpsid	i
  while (1)
 8002510:	e7fe      	b.n	8002510 <SystemClock_Config+0x68>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 8002512:	4b09      	ldr	r3, [pc, #36]	@ (8002538 <SystemClock_Config+0x90>)
 8002514:	930f      	str	r3, [sp, #60]	@ 0x3c
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002516:	e9cd 0011 	strd	r0, r0, [sp, #68]	@ 0x44
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800251a:	9013      	str	r0, [sp, #76]	@ 0x4c
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800251c:	f44f 7380 	mov.w	r3, #256	@ 0x100
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002520:	a80f      	add	r0, sp, #60	@ 0x3c
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8002522:	9310      	str	r3, [sp, #64]	@ 0x40
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002524:	f001 fd42 	bl	8003fac <HAL_RCCEx_PeriphCLKConfig>
 8002528:	b108      	cbz	r0, 800252e <SystemClock_Config+0x86>
 800252a:	b672      	cpsid	i
  while (1)
 800252c:	e7fe      	b.n	800252c <SystemClock_Config+0x84>
}
 800252e:	b01f      	add	sp, #124	@ 0x7c
 8002530:	f85d fb04 	ldr.w	pc, [sp], #4
 8002534:	40021000 	.word	0x40021000
 8002538:	00010007 	.word	0x00010007

0800253c <main>:
{
 800253c:	b580      	push	{r7, lr}
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800253e:	4d9c      	ldr	r5, [pc, #624]	@ (80027b0 <main+0x274>)
{
 8002540:	b09a      	sub	sp, #104	@ 0x68
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002542:	2714      	movs	r7, #20
  HAL_Init();
 8002544:	f000 ff7c 	bl	8003440 <HAL_Init>
  SystemClock_Config();
 8002548:	f7ff ffae 	bl	80024a8 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800254c:	463a      	mov	r2, r7
 800254e:	2100      	movs	r1, #0
 8002550:	a813      	add	r0, sp, #76	@ 0x4c
 8002552:	f006 f966 	bl	8008822 <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002556:	696b      	ldr	r3, [r5, #20]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
 8002558:	4896      	ldr	r0, [pc, #600]	@ (80027b4 <main+0x278>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800255a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800255e:	616b      	str	r3, [r5, #20]
 8002560:	696b      	ldr	r3, [r5, #20]
 8002562:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002566:	9302      	str	r3, [sp, #8]
 8002568:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800256a:	696b      	ldr	r3, [r5, #20]
 800256c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002570:	616b      	str	r3, [r5, #20]
 8002572:	696b      	ldr	r3, [r5, #20]
 8002574:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002578:	9303      	str	r3, [sp, #12]
 800257a:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800257c:	696b      	ldr	r3, [r5, #20]
 800257e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002582:	616b      	str	r3, [r5, #20]
 8002584:	696b      	ldr	r3, [r5, #20]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
 8002586:	2201      	movs	r2, #1
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002588:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
 800258c:	4611      	mov	r1, r2
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800258e:	9304      	str	r3, [sp, #16]
 8002590:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
 8002592:	f001 f987 	bl	80038a4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_9, GPIO_PIN_RESET);
 8002596:	4887      	ldr	r0, [pc, #540]	@ (80027b4 <main+0x278>)
 8002598:	2200      	movs	r2, #0
 800259a:	f240 2116 	movw	r1, #534	@ 0x216
 800259e:	f001 f981 	bl	80038a4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
 80025a2:	2201      	movs	r2, #1
 80025a4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80025a8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025ac:	2400      	movs	r4, #0
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
 80025ae:	f001 f979 	bl	80038a4 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025b2:	2601      	movs	r6, #1
 80025b4:	f240 2303 	movw	r3, #515	@ 0x203
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80025b8:	487e      	ldr	r0, [pc, #504]	@ (80027b4 <main+0x278>)
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80025ba:	9615      	str	r6, [sp, #84]	@ 0x54
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80025bc:	a913      	add	r1, sp, #76	@ 0x4c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025be:	e9cd 3613 	strd	r3, r6, [sp, #76]	@ 0x4c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025c2:	9416      	str	r4, [sp, #88]	@ 0x58
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80025c4:	f001 f8aa 	bl	800371c <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80025c8:	487a      	ldr	r0, [pc, #488]	@ (80027b4 <main+0x278>)
 80025ca:	a913      	add	r1, sp, #76	@ 0x4c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025cc:	e9cd 7613 	strd	r7, r6, [sp, #76]	@ 0x4c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025d0:	e9cd 4415 	strd	r4, r4, [sp, #84]	@ 0x54
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80025d4:	f001 f8a2 	bl	800371c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80025d8:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025da:	4877      	ldr	r0, [pc, #476]	@ (80027b8 <main+0x27c>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025dc:	9415      	str	r4, [sp, #84]	@ 0x54
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025de:	a913      	add	r1, sp, #76	@ 0x4c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80025e0:	e9cd 3413 	strd	r3, r4, [sp, #76]	@ 0x4c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025e4:	f001 f89a 	bl	800371c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80025e8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025ec:	e9cd 3613 	strd	r3, r6, [sp, #76]	@ 0x4c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025f0:	a913      	add	r1, sp, #76	@ 0x4c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80025f2:	2303      	movs	r3, #3
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025f4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80025f8:	9316      	str	r3, [sp, #88]	@ 0x58
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80025fa:	9615      	str	r6, [sp, #84]	@ 0x54
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025fc:	f001 f88e 	bl	800371c <HAL_GPIO_Init>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002600:	696b      	ldr	r3, [r5, #20]
 8002602:	4333      	orrs	r3, r6
 8002604:	616b      	str	r3, [r5, #20]
 8002606:	696b      	ldr	r3, [r5, #20]
  hrtc.Instance = RTC;
 8002608:	4d6c      	ldr	r5, [pc, #432]	@ (80027bc <main+0x280>)
  __HAL_RCC_DMA1_CLK_ENABLE();
 800260a:	4033      	ands	r3, r6
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 5, 0);
 800260c:	4622      	mov	r2, r4
 800260e:	2105      	movs	r1, #5
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002610:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 5, 0);
 8002612:	200d      	movs	r0, #13
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002614:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 5, 0);
 8002616:	f000 ff5d 	bl	80034d4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 800261a:	200d      	movs	r0, #13
 800261c:	f000 ff8c 	bl	8003538 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 5, 0);
 8002620:	4622      	mov	r2, r4
 8002622:	2105      	movs	r1, #5
 8002624:	200f      	movs	r0, #15
 8002626:	f000 ff55 	bl	80034d4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 800262a:	200f      	movs	r0, #15
 800262c:	f000 ff84 	bl	8003538 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 5, 0);
 8002630:	4622      	mov	r2, r4
 8002632:	2105      	movs	r1, #5
 8002634:	2010      	movs	r0, #16
 8002636:	f000 ff4d 	bl	80034d4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 800263a:	2010      	movs	r0, #16
 800263c:	f000 ff7c 	bl	8003538 <HAL_NVIC_EnableIRQ>
  RTC_TimeTypeDef sTime = {0};
 8002640:	463a      	mov	r2, r7
 8002642:	4621      	mov	r1, r4
 8002644:	a813      	add	r0, sp, #76	@ 0x4c
 8002646:	f006 f8ec 	bl	8008822 <memset>
  hrtc.Instance = RTC;
 800264a:	4b5d      	ldr	r3, [pc, #372]	@ (80027c0 <main+0x284>)
  RTC_DateTypeDef sDate = {0};
 800264c:	940c      	str	r4, [sp, #48]	@ 0x30
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800264e:	e9c5 3400 	strd	r3, r4, [r5]
  hrtc.Init.SynchPrediv = 255;
 8002652:	277f      	movs	r7, #127	@ 0x7f
 8002654:	23ff      	movs	r3, #255	@ 0xff
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002656:	4628      	mov	r0, r5
  hrtc.Init.SynchPrediv = 255;
 8002658:	e9c5 7302 	strd	r7, r3, [r5, #8]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800265c:	e9c5 4404 	strd	r4, r4, [r5, #16]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002660:	61ac      	str	r4, [r5, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002662:	f001 fdee 	bl	8004242 <HAL_RTC_Init>
 8002666:	b108      	cbz	r0, 800266c <main+0x130>
 8002668:	b672      	cpsid	i
  while (1)
 800266a:	e7fe      	b.n	800266a <main+0x12e>
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800266c:	e9cd 0016 	strd	r0, r0, [sp, #88]	@ 0x58
  sTime.Hours = 0x0;
 8002670:	f8ad 004c 	strh.w	r0, [sp, #76]	@ 0x4c
  sTime.Seconds = 0x0;
 8002674:	f88d 004e 	strb.w	r0, [sp, #78]	@ 0x4e
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8002678:	4632      	mov	r2, r6
 800267a:	a913      	add	r1, sp, #76	@ 0x4c
 800267c:	4628      	mov	r0, r5
 800267e:	f001 fe33 	bl	80042e8 <HAL_RTC_SetTime>
 8002682:	b108      	cbz	r0, 8002688 <main+0x14c>
 8002684:	b672      	cpsid	i
  while (1)
 8002686:	e7fe      	b.n	8002686 <main+0x14a>
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8002688:	4b4e      	ldr	r3, [pc, #312]	@ (80027c4 <main+0x288>)
 800268a:	930c      	str	r3, [sp, #48]	@ 0x30
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800268c:	4632      	mov	r2, r6
 800268e:	a90c      	add	r1, sp, #48	@ 0x30
 8002690:	4628      	mov	r0, r5
 8002692:	f001 fe83 	bl	800439c <HAL_RTC_SetDate>
 8002696:	4603      	mov	r3, r0
 8002698:	b108      	cbz	r0, 800269e <main+0x162>
 800269a:	b672      	cpsid	i
  while (1)
 800269c:	e7fe      	b.n	800269c <main+0x160>
  hspi1.Instance = SPI1;
 800269e:	484a      	ldr	r0, [pc, #296]	@ (80027c8 <main+0x28c>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80026a0:	4c4a      	ldr	r4, [pc, #296]	@ (80027cc <main+0x290>)
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80026a2:	6083      	str	r3, [r0, #8]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80026a4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80026a8:	e9c0 4200 	strd	r4, r2, [r0]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80026ac:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80026b0:	e9c0 2303 	strd	r2, r3, [r0, #12]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80026b4:	f44f 7500 	mov.w	r5, #512	@ 0x200
 80026b8:	2210      	movs	r2, #16
 80026ba:	e9c0 5206 	strd	r5, r2, [r0, #24]
  hspi1.Init.CRCPolynomial = 7;
 80026be:	2207      	movs	r2, #7
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80026c0:	e9c0 3308 	strd	r3, r3, [r0, #32]
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80026c4:	e9c0 230b 	strd	r2, r3, [r0, #44]	@ 0x2c
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80026c8:	6143      	str	r3, [r0, #20]
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80026ca:	6283      	str	r3, [r0, #40]	@ 0x28
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80026cc:	2308      	movs	r3, #8
 80026ce:	6343      	str	r3, [r0, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80026d0:	f002 f809 	bl	80046e6 <HAL_SPI_Init>
 80026d4:	4603      	mov	r3, r0
 80026d6:	b108      	cbz	r0, 80026dc <main+0x1a0>
 80026d8:	b672      	cpsid	i
  while (1)
 80026da:	e7fe      	b.n	80026da <main+0x19e>
  huart1.Instance = USART1;
 80026dc:	483c      	ldr	r0, [pc, #240]	@ (80027d0 <main+0x294>)
  huart1.Init.BaudRate = 115200;
 80026de:	4a3d      	ldr	r2, [pc, #244]	@ (80027d4 <main+0x298>)
  huart1.Init.Parity = UART_PARITY_NONE;
 80026e0:	6103      	str	r3, [r0, #16]
  huart1.Init.BaudRate = 115200;
 80026e2:	f44f 34e1 	mov.w	r4, #115200	@ 0x1c200
  huart1.Init.Mode = UART_MODE_TX_RX;
 80026e6:	250c      	movs	r5, #12
  huart1.Init.StopBits = UART_STOPBITS_1;
 80026e8:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80026ec:	e9c0 5305 	strd	r5, r3, [r0, #20]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80026f0:	e9c0 3307 	strd	r3, r3, [r0, #28]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80026f4:	6243      	str	r3, [r0, #36]	@ 0x24
  huart1.Init.BaudRate = 115200;
 80026f6:	e9c0 2400 	strd	r2, r4, [r0]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80026fa:	f002 ffc5 	bl	8005688 <HAL_UART_Init>
 80026fe:	4603      	mov	r3, r0
 8002700:	b108      	cbz	r0, 8002706 <main+0x1ca>
 8002702:	b672      	cpsid	i
  while (1)
 8002704:	e7fe      	b.n	8002704 <main+0x1c8>
  huart2.Instance = USART2;
 8002706:	4834      	ldr	r0, [pc, #208]	@ (80027d8 <main+0x29c>)
  huart2.Init.BaudRate = 9600;
 8002708:	4934      	ldr	r1, [pc, #208]	@ (80027dc <main+0x2a0>)
 800270a:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
  huart2.Init.StopBits = UART_STOPBITS_1;
 800270e:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002712:	e9c0 3504 	strd	r3, r5, [r0, #16]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002716:	e9c0 3306 	strd	r3, r3, [r0, #24]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800271a:	e9c0 3308 	strd	r3, r3, [r0, #32]
  huart2.Init.BaudRate = 9600;
 800271e:	e9c0 1200 	strd	r1, r2, [r0]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002722:	f002 ffb1 	bl	8005688 <HAL_UART_Init>
 8002726:	4603      	mov	r3, r0
 8002728:	b108      	cbz	r0, 800272e <main+0x1f2>
 800272a:	b672      	cpsid	i
  while (1)
 800272c:	e7fe      	b.n	800272c <main+0x1f0>
  huart3.Instance = USART3;
 800272e:	482c      	ldr	r0, [pc, #176]	@ (80027e0 <main+0x2a4>)
 8002730:	4a2c      	ldr	r2, [pc, #176]	@ (80027e4 <main+0x2a8>)
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002732:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart3.Init.BaudRate = 115200;
 8002736:	e9c0 2400 	strd	r2, r4, [r0]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800273a:	e9c0 3504 	strd	r3, r5, [r0, #16]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800273e:	e9c0 3306 	strd	r3, r3, [r0, #24]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002742:	e9c0 3308 	strd	r3, r3, [r0, #32]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002746:	f002 ff9f 	bl	8005688 <HAL_UART_Init>
 800274a:	4607      	mov	r7, r0
 800274c:	b108      	cbz	r0, 8002752 <main+0x216>
 800274e:	b672      	cpsid	i
  while (1)
 8002750:	e7fe      	b.n	8002750 <main+0x214>
  osThreadDef(GPS, StartGPS, osPriorityIdle, 0, 640);
 8002752:	4c25      	ldr	r4, [pc, #148]	@ (80027e8 <main+0x2ac>)
 8002754:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002756:	ad05      	add	r5, sp, #20
 8002758:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800275a:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800275e:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  GPSHandle = osThreadCreate(osThread(GPS), NULL);
 8002762:	4639      	mov	r1, r7
 8002764:	a805      	add	r0, sp, #20
 8002766:	f003 f82d 	bl	80057c4 <osThreadCreate>
 800276a:	4b20      	ldr	r3, [pc, #128]	@ (80027ec <main+0x2b0>)
  osThreadDef(SpiFlash, StartSpiFlash, osPriorityIdle, 0, 1024);
 800276c:	f104 060c 	add.w	r6, r4, #12
  GPSHandle = osThreadCreate(osThread(GPS), NULL);
 8002770:	6018      	str	r0, [r3, #0]
  osThreadDef(SpiFlash, StartSpiFlash, osPriorityIdle, 0, 1024);
 8002772:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8002774:	ad0c      	add	r5, sp, #48	@ 0x30
 8002776:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002778:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 800277c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  SpiFlashHandle = osThreadCreate(osThread(SpiFlash), NULL);
 8002780:	4639      	mov	r1, r7
 8002782:	a80c      	add	r0, sp, #48	@ 0x30
 8002784:	f003 f81e 	bl	80057c4 <osThreadCreate>
 8002788:	4b19      	ldr	r3, [pc, #100]	@ (80027f0 <main+0x2b4>)
  osThreadDef(GSM, StartGSM, osPriorityNormal, 0, 640);
 800278a:	3428      	adds	r4, #40	@ 0x28
  SpiFlashHandle = osThreadCreate(osThread(SpiFlash), NULL);
 800278c:	6018      	str	r0, [r3, #0]
  osThreadDef(GSM, StartGSM, osPriorityNormal, 0, 640);
 800278e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002790:	ad13      	add	r5, sp, #76	@ 0x4c
 8002792:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002794:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8002798:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  GSMHandle = osThreadCreate(osThread(GSM), NULL);
 800279c:	4639      	mov	r1, r7
 800279e:	a813      	add	r0, sp, #76	@ 0x4c
 80027a0:	f003 f810 	bl	80057c4 <osThreadCreate>
 80027a4:	4b13      	ldr	r3, [pc, #76]	@ (80027f4 <main+0x2b8>)
 80027a6:	6018      	str	r0, [r3, #0]
  osKernelStart();
 80027a8:	f003 f807 	bl	80057ba <osKernelStart>
  while (1)
 80027ac:	e7fe      	b.n	80027ac <main+0x270>
 80027ae:	bf00      	nop
 80027b0:	40021000 	.word	0x40021000
 80027b4:	48000800 	.word	0x48000800
 80027b8:	48000400 	.word	0x48000400
 80027bc:	20001278 	.word	0x20001278
 80027c0:	40002800 	.word	0x40002800
 80027c4:	00010101 	.word	0x00010101
 80027c8:	20001214 	.word	0x20001214
 80027cc:	40013000 	.word	0x40013000
 80027d0:	2000118c 	.word	0x2000118c
 80027d4:	40013800 	.word	0x40013800
 80027d8:	20001104 	.word	0x20001104
 80027dc:	40004400 	.word	0x40004400
 80027e0:	2000107c 	.word	0x2000107c
 80027e4:	40004800 	.word	0x40004800
 80027e8:	0800c830 	.word	0x0800c830
 80027ec:	20000fa8 	.word	0x20000fa8
 80027f0:	20000fac 	.word	0x20000fac
 80027f4:	20000fa4 	.word	0x20000fa4

080027f8 <HAL_TIM_PeriodElapsedCallback>:
  if (htim->Instance == TIM2) {
 80027f8:	6803      	ldr	r3, [r0, #0]
 80027fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80027fe:	d101      	bne.n	8002804 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
 8002800:	f000 be30 	b.w	8003464 <HAL_IncTick>
}
 8002804:	4770      	bx	lr

08002806 <Error_Handler>:
 8002806:	b672      	cpsid	i
  while (1)
 8002808:	e7fe      	b.n	8002808 <Error_Handler+0x2>
	...

0800280c <W25_ReadStatusReg1>:
	W25_CS_DISABLE();
	W25_DelayWhileBusy(CHIP_ERASE_TIMEOUT);
	return retval;
} // W25_ChipErase()

uint8_t W25_ReadStatusReg1(void) {
 800280c:	b513      	push	{r0, r1, r4, lr}
	uint8_t cmd = W25_CMD_READ_STATUS_REG_1;
 800280e:	2305      	movs	r3, #5
	uint8_t status_reg1;
	int retval;
	W25_CS_ENABLE(); // Drive Winbond chip select, /CS low
 8002810:	2200      	movs	r2, #0
 8002812:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002816:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
	uint8_t cmd = W25_CMD_READ_STATUS_REG_1;
 800281a:	f88d 3006 	strb.w	r3, [sp, #6]
	W25_CS_ENABLE(); // Drive Winbond chip select, /CS low
 800281e:	f001 f841 	bl	80038a4 <HAL_GPIO_WritePin>
	retval = HAL_SPI_Transmit(&hspi1, &cmd , sizeof(cmd), TIMEOUT); // Send Read Status Reg 1 command
 8002822:	4810      	ldr	r0, [pc, #64]	@ (8002864 <W25_ReadStatusReg1+0x58>)
 8002824:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002828:	2201      	movs	r2, #1
 800282a:	f10d 0106 	add.w	r1, sp, #6
 800282e:	f001 ffc8 	bl	80047c2 <HAL_SPI_Transmit>
	if(retval == HAL_OK)
 8002832:	4604      	mov	r4, r0
 8002834:	b940      	cbnz	r0, 8002848 <W25_ReadStatusReg1+0x3c>
	retval = HAL_SPI_Receive(&hspi1, &status_reg1, sizeof(status_reg1), TIMEOUT);
 8002836:	480b      	ldr	r0, [pc, #44]	@ (8002864 <W25_ReadStatusReg1+0x58>)
 8002838:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800283c:	2201      	movs	r2, #1
 800283e:	f10d 0107 	add.w	r1, sp, #7
 8002842:	f002 f9b8 	bl	8004bb6 <HAL_SPI_Receive>
 8002846:	4604      	mov	r4, r0
	W25_CS_DISABLE();
 8002848:	2201      	movs	r2, #1
 800284a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800284e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002852:	f001 f827 	bl	80038a4 <HAL_GPIO_WritePin>
	return retval == HAL_OK ? status_reg1:0xFF; // return 0xFF if error
 8002856:	b91c      	cbnz	r4, 8002860 <W25_ReadStatusReg1+0x54>
 8002858:	f89d 0007 	ldrb.w	r0, [sp, #7]
} // W25_ReadStatusReg1()
 800285c:	b002      	add	sp, #8
 800285e:	bd10      	pop	{r4, pc}
	return retval == HAL_OK ? status_reg1:0xFF; // return 0xFF if error
 8002860:	20ff      	movs	r0, #255	@ 0xff
 8002862:	e7fb      	b.n	800285c <W25_ReadStatusReg1+0x50>
 8002864:	20001214 	.word	0x20001214

08002868 <W25_Busy>:

int W25_Busy(void)
{
 8002868:	b508      	push	{r3, lr}
	return (W25_ReadStatusReg1() & W25_STATUS1_BUSY);
 800286a:	f7ff ffcf 	bl	800280c <W25_ReadStatusReg1>
}
 800286e:	f000 0001 	and.w	r0, r0, #1
 8002872:	bd08      	pop	{r3, pc}

08002874 <W25_DelayWhileBusy>:

int W25_DelayWhileBusy(uint32_t msTimeout)
{
 8002874:	b570      	push	{r4, r5, r6, lr}
 8002876:	4605      	mov	r5, r0
	uint32_t initial_count = HAL_GetTick();
 8002878:	f000 fe00 	bl	800347c <HAL_GetTick>
 800287c:	4606      	mov	r6, r0
	int busy;
	uint32_t deltaticks;
	uint32_t count = 0;
	do {
	busy = W25_Busy();
 800287e:	f7ff fff3 	bl	8002868 <W25_Busy>
 8002882:	4604      	mov	r4, r0
	deltaticks = HAL_GetTick() - initial_count;
 8002884:	f000 fdfa 	bl	800347c <HAL_GetTick>
 8002888:	1b83      	subs	r3, r0, r6
	count++;
	} while(busy && deltaticks < msTimeout);
 800288a:	b114      	cbz	r4, 8002892 <W25_DelayWhileBusy+0x1e>
 800288c:	42ab      	cmp	r3, r5
 800288e:	d3f6      	bcc.n	800287e <W25_DelayWhileBusy+0xa>
	int retval = busy ? HAL_TIMEOUT:HAL_OK;
 8002890:	2403      	movs	r4, #3
	return retval;
}
 8002892:	4620      	mov	r0, r4
 8002894:	bd70      	pop	{r4, r5, r6, pc}

08002896 <W25_Reset>:
void W25_Reset(){
 8002896:	b508      	push	{r3, lr}
	W25_CS_ENABLE();
 8002898:	2200      	movs	r2, #0
 800289a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800289e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80028a2:	f000 ffff 	bl	80038a4 <HAL_GPIO_WritePin>
	W25_CS_DISABLE();
 80028a6:	2201      	movs	r2, #1
 80028a8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80028ac:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80028b0:	f000 fff8 	bl	80038a4 <HAL_GPIO_WritePin>
	W25_CS_ENABLE();
 80028b4:	2200      	movs	r2, #0
 80028b6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80028ba:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80028be:	f000 fff1 	bl	80038a4 <HAL_GPIO_WritePin>
	W25_CS_DISABLE();
 80028c2:	2201      	movs	r2, #1
 80028c4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80028c8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80028cc:	f000 ffea 	bl	80038a4 <HAL_GPIO_WritePin>
	W25_CS_ENABLE();
 80028d0:	2200      	movs	r2, #0
 80028d2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80028d6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80028da:	f000 ffe3 	bl	80038a4 <HAL_GPIO_WritePin>
	W25_CS_DISABLE();
}
 80028de:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	W25_CS_DISABLE();
 80028e2:	2201      	movs	r2, #1
 80028e4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80028e8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80028ec:	f000 bfda 	b.w	80038a4 <HAL_GPIO_WritePin>

080028f0 <W25_ReadJedecID>:

int W25_ReadJedecID() {
 80028f0:	b570      	push	{r4, r5, r6, lr}
 80028f2:	b08c      	sub	sp, #48	@ 0x30
	int retval;
	uint8_t idcmd = W25_CMD_READ_JEDEC_ID;
 80028f4:	239f      	movs	r3, #159	@ 0x9f
	// idcmd[0] = W25_CMD_READ_JEDEC_ID;
	uint8_t jdec_id[4];
	char result[11];
	W25_CS_ENABLE(); // Drive Winbond chip select, /CS low
 80028f6:	2200      	movs	r2, #0
 80028f8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80028fc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
	uint8_t idcmd = W25_CMD_READ_JEDEC_ID;
 8002900:	f88d 300b 	strb.w	r3, [sp, #11]
	W25_CS_ENABLE(); // Drive Winbond chip select, /CS low
 8002904:	f000 ffce 	bl	80038a4 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi1, &idcmd, jdec_id, 4, 4000);
 8002908:	f44f 637a 	mov.w	r3, #4000	@ 0xfa0
 800290c:	9300      	str	r3, [sp, #0]
 800290e:	aa03      	add	r2, sp, #12
 8002910:	2304      	movs	r3, #4
 8002912:	f10d 010b 	add.w	r1, sp, #11
 8002916:	481f      	ldr	r0, [pc, #124]	@ (8002994 <W25_ReadJedecID+0xa4>)
 8002918:	f002 f81d 	bl	8004956 <HAL_SPI_TransmitReceive>
	W25_CS_DISABLE();
 800291c:	2201      	movs	r2, #1
 800291e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002922:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002926:	f000 ffbd 	bl	80038a4 <HAL_GPIO_WritePin>
	char spi_flash_intro[] = "Flash ID received: ";
 800292a:	4b1b      	ldr	r3, [pc, #108]	@ (8002998 <W25_ReadJedecID+0xa8>)
 800292c:	aa07      	add	r2, sp, #28
 800292e:	f103 0610 	add.w	r6, r3, #16
 8002932:	4615      	mov	r5, r2
 8002934:	6818      	ldr	r0, [r3, #0]
 8002936:	6859      	ldr	r1, [r3, #4]
 8002938:	4614      	mov	r4, r2
 800293a:	c403      	stmia	r4!, {r0, r1}
 800293c:	3308      	adds	r3, #8
 800293e:	42b3      	cmp	r3, r6
 8002940:	4622      	mov	r2, r4
 8002942:	d1f7      	bne.n	8002934 <W25_ReadJedecID+0x44>
 8002944:	6818      	ldr	r0, [r3, #0]
 8002946:	6020      	str	r0, [r4, #0]
	HAL_UART_Transmit(&huart1, (uint8_t*) spi_flash_intro, strlen(spi_flash_intro), 1000);
 8002948:	4628      	mov	r0, r5
 800294a:	f7fd fca1 	bl	8000290 <strlen>
 800294e:	4629      	mov	r1, r5
 8002950:	b282      	uxth	r2, r0
 8002952:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002956:	4811      	ldr	r0, [pc, #68]	@ (800299c <W25_ReadJedecID+0xac>)
 8002958:	f002 fdec 	bl	8005534 <HAL_UART_Transmit>

	sprintf(result, "%02X, %02X, %02X", jdec_id[1], jdec_id[2], jdec_id[3]);
 800295c:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8002960:	f89d 200d 	ldrb.w	r2, [sp, #13]
 8002964:	9300      	str	r3, [sp, #0]
 8002966:	490e      	ldr	r1, [pc, #56]	@ (80029a0 <W25_ReadJedecID+0xb0>)
 8002968:	f89d 300e 	ldrb.w	r3, [sp, #14]
 800296c:	a804      	add	r0, sp, #16
 800296e:	f005 fec9 	bl	8008704 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*) result, 11, 1000);
 8002972:	a904      	add	r1, sp, #16
 8002974:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002978:	220b      	movs	r2, #11
 800297a:	4808      	ldr	r0, [pc, #32]	@ (800299c <W25_ReadJedecID+0xac>)
 800297c:	f002 fdda 	bl	8005534 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, (uint8_t*)"\r", 1, 1000);
 8002980:	4908      	ldr	r1, [pc, #32]	@ (80029a4 <W25_ReadJedecID+0xb4>)
 8002982:	4806      	ldr	r0, [pc, #24]	@ (800299c <W25_ReadJedecID+0xac>)
 8002984:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002988:	2201      	movs	r2, #1
 800298a:	f002 fdd3 	bl	8005534 <HAL_UART_Transmit>
	//printf("%s: retval %d, %02X, %02X, %02X\r\n",__func__, retval, buf[0],buf[1],buf[2]);
	return retval;
} // W25_ReadJEDECID()
 800298e:	2000      	movs	r0, #0
 8002990:	b00c      	add	sp, #48	@ 0x30
 8002992:	bd70      	pop	{r4, r5, r6, pc}
 8002994:	20001214 	.word	0x20001214
 8002998:	0800d22d 	.word	0x0800d22d
 800299c:	2000118c 	.word	0x2000118c
 80029a0:	0800d21a 	.word	0x0800d21a
 80029a4:	0800d22b 	.word	0x0800d22b

080029a8 <W25_WriteEnable>:

	return retval;
} // W25_ReadUniqueID()


int W25_WriteEnable(void) {
 80029a8:	b513      	push	{r0, r1, r4, lr}
	uint8_t cmd = W25_CMD_WRITE_ENABLE;
 80029aa:	2306      	movs	r3, #6
	W25_CS_ENABLE(); // Drive Winbond chip select, /CS low
 80029ac:	2200      	movs	r2, #0
 80029ae:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80029b2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
	uint8_t cmd = W25_CMD_WRITE_ENABLE;
 80029b6:	f88d 3007 	strb.w	r3, [sp, #7]
	W25_CS_ENABLE(); // Drive Winbond chip select, /CS low
 80029ba:	f000 ff73 	bl	80038a4 <HAL_GPIO_WritePin>
	int retval = HAL_SPI_Transmit(&hspi1, &cmd , sizeof(cmd), TIMEOUT); // Send Write Enable command
 80029be:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80029c2:	f10d 0107 	add.w	r1, sp, #7
 80029c6:	2201      	movs	r2, #1
 80029c8:	4806      	ldr	r0, [pc, #24]	@ (80029e4 <W25_WriteEnable+0x3c>)
 80029ca:	f001 fefa 	bl	80047c2 <HAL_SPI_Transmit>
	W25_CS_DISABLE();
 80029ce:	2201      	movs	r2, #1
	int retval = HAL_SPI_Transmit(&hspi1, &cmd , sizeof(cmd), TIMEOUT); // Send Write Enable command
 80029d0:	4604      	mov	r4, r0
	W25_CS_DISABLE();
 80029d2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80029d6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80029da:	f000 ff63 	bl	80038a4 <HAL_GPIO_WritePin>
	return retval;
} // W25_WriteEnable()
 80029de:	4620      	mov	r0, r4
 80029e0:	b002      	add	sp, #8
 80029e2:	bd10      	pop	{r4, pc}
 80029e4:	20001214 	.word	0x20001214

080029e8 <W25_SectorErase>:

int W25_SectorErase(uint32_t address)
{
 80029e8:	b513      	push	{r0, r1, r4, lr}
	int retval;
	uint8_t cmdaddr[4] = {W25_CMD_SECTOR_ERASE,address>>16,address>>8,address};
 80029ea:	2320      	movs	r3, #32
 80029ec:	f88d 3004 	strb.w	r3, [sp, #4]
 80029f0:	0c03      	lsrs	r3, r0, #16
 80029f2:	ba40      	rev16	r0, r0
 80029f4:	f88d 3005 	strb.w	r3, [sp, #5]
 80029f8:	f8ad 0006 	strh.w	r0, [sp, #6]
	W25_WriteEnable(); // Make sure we can write...
 80029fc:	f7ff ffd4 	bl	80029a8 <W25_WriteEnable>
	W25_CS_ENABLE(); // Drive Winbond chip select, /CS low
 8002a00:	2200      	movs	r2, #0
 8002a02:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002a06:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002a0a:	f000 ff4b 	bl	80038a4 <HAL_GPIO_WritePin>
	retval = HAL_SPI_Transmit(&hspi1, cmdaddr , sizeof(cmdaddr ), TIMEOUT); // Send Sector Erase command with address
 8002a0e:	2204      	movs	r2, #4
 8002a10:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002a14:	eb0d 0102 	add.w	r1, sp, r2
 8002a18:	4808      	ldr	r0, [pc, #32]	@ (8002a3c <W25_SectorErase+0x54>)
 8002a1a:	f001 fed2 	bl	80047c2 <HAL_SPI_Transmit>
	W25_CS_DISABLE();
 8002a1e:	2201      	movs	r2, #1
	retval = HAL_SPI_Transmit(&hspi1, cmdaddr , sizeof(cmdaddr ), TIMEOUT); // Send Sector Erase command with address
 8002a20:	4604      	mov	r4, r0
	W25_CS_DISABLE();
 8002a22:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002a26:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002a2a:	f000 ff3b 	bl	80038a4 <HAL_GPIO_WritePin>
	W25_DelayWhileBusy(SECTOR_ERASE_TIMEOUT);
 8002a2e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002a32:	f7ff ff1f 	bl	8002874 <W25_DelayWhileBusy>
	return retval;
} // W25_SectorErase()
 8002a36:	4620      	mov	r0, r4
 8002a38:	b002      	add	sp, #8
 8002a3a:	bd10      	pop	{r4, pc}
 8002a3c:	20001214 	.word	0x20001214

08002a40 <W25_PageProgram>:

int W25_PageProgram(uint32_t address, uint8_t *buf, uint32_t count)
{
 8002a40:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8002a44:	4606      	mov	r6, r0
 8002a46:	4688      	mov	r8, r1
 8002a48:	4617      	mov	r7, r2
	int retval;
	W25_WriteEnable(); // Make sure we can write...
 8002a4a:	f7ff ffad 	bl	80029a8 <W25_WriteEnable>
	while(count) {
		uint8_t cmdaddr[4] = {W25_CMD_PAGE_PROGRAM,address>>16,address>>8,address};
		uint32_t space_left_in_page = 0x100 - (address & 0xFF);
		uint32_t count_this_pass = count <= space_left_in_page? count:space_left_in_page;
		W25_CS_ENABLE(); // Drive Winbond chip select, /CS low
		retval = HAL_SPI_Transmit(&hspi1, cmdaddr , sizeof(cmdaddr ), TIMEOUT); // Send Page Program command with address
 8002a4e:	f8df a080 	ldr.w	sl, [pc, #128]	@ 8002ad0 <W25_PageProgram+0x90>
	while(count) {
 8002a52:	2400      	movs	r4, #0
		uint8_t cmdaddr[4] = {W25_CMD_PAGE_PROGRAM,address>>16,address>>8,address};
 8002a54:	f04f 0902 	mov.w	r9, #2
	while(count) {
 8002a58:	b91f      	cbnz	r7, 8002a62 <W25_PageProgram+0x22>
		address += count_this_pass;
		buf += count_this_pass;
		W25_DelayWhileBusy(PAGE_PROGRAM_TIMEOUT);
	}
	return retval;
} 
 8002a5a:	4620      	mov	r0, r4
 8002a5c:	b002      	add	sp, #8
 8002a5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		uint32_t space_left_in_page = 0x100 - (address & 0xFF);
 8002a62:	b2f5      	uxtb	r5, r6
		uint8_t cmdaddr[4] = {W25_CMD_PAGE_PROGRAM,address>>16,address>>8,address};
 8002a64:	0c33      	lsrs	r3, r6, #16
		uint32_t space_left_in_page = 0x100 - (address & 0xFF);
 8002a66:	f5c5 7580 	rsb	r5, r5, #256	@ 0x100
		uint32_t count_this_pass = count <= space_left_in_page? count:space_left_in_page;
 8002a6a:	42bd      	cmp	r5, r7
		uint8_t cmdaddr[4] = {W25_CMD_PAGE_PROGRAM,address>>16,address>>8,address};
 8002a6c:	f88d 3005 	strb.w	r3, [sp, #5]
		W25_CS_ENABLE(); // Drive Winbond chip select, /CS low
 8002a70:	f04f 0200 	mov.w	r2, #0
		uint8_t cmdaddr[4] = {W25_CMD_PAGE_PROGRAM,address>>16,address>>8,address};
 8002a74:	ba73      	rev16	r3, r6
		W25_CS_ENABLE(); // Drive Winbond chip select, /CS low
 8002a76:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002a7a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
		uint8_t cmdaddr[4] = {W25_CMD_PAGE_PROGRAM,address>>16,address>>8,address};
 8002a7e:	f8ad 3006 	strh.w	r3, [sp, #6]
		uint32_t count_this_pass = count <= space_left_in_page? count:space_left_in_page;
 8002a82:	bf28      	it	cs
 8002a84:	463d      	movcs	r5, r7
		uint8_t cmdaddr[4] = {W25_CMD_PAGE_PROGRAM,address>>16,address>>8,address};
 8002a86:	f88d 9004 	strb.w	r9, [sp, #4]
		W25_CS_ENABLE(); // Drive Winbond chip select, /CS low
 8002a8a:	f000 ff0b 	bl	80038a4 <HAL_GPIO_WritePin>
		retval = HAL_SPI_Transmit(&hspi1, cmdaddr , sizeof(cmdaddr ), TIMEOUT); // Send Page Program command with address
 8002a8e:	2204      	movs	r2, #4
 8002a90:	480f      	ldr	r0, [pc, #60]	@ (8002ad0 <W25_PageProgram+0x90>)
 8002a92:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002a96:	eb0d 0102 	add.w	r1, sp, r2
 8002a9a:	f001 fe92 	bl	80047c2 <HAL_SPI_Transmit>
		if(retval == HAL_OK)
 8002a9e:	4604      	mov	r4, r0
 8002aa0:	b938      	cbnz	r0, 8002ab2 <W25_PageProgram+0x72>
		  retval = HAL_SPI_Transmit(&hspi1, buf, count_this_pass, TIMEOUT); // Write page data
 8002aa2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002aa6:	b2aa      	uxth	r2, r5
 8002aa8:	4641      	mov	r1, r8
 8002aaa:	4650      	mov	r0, sl
 8002aac:	f001 fe89 	bl	80047c2 <HAL_SPI_Transmit>
 8002ab0:	4604      	mov	r4, r0
		W25_CS_DISABLE();
 8002ab2:	2201      	movs	r2, #1
 8002ab4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002ab8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002abc:	f000 fef2 	bl	80038a4 <HAL_GPIO_WritePin>
		W25_DelayWhileBusy(PAGE_PROGRAM_TIMEOUT);
 8002ac0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
		count -= count_this_pass;
 8002ac4:	1b7f      	subs	r7, r7, r5
		address += count_this_pass;
 8002ac6:	442e      	add	r6, r5
		buf += count_this_pass;
 8002ac8:	44a8      	add	r8, r5
		W25_DelayWhileBusy(PAGE_PROGRAM_TIMEOUT);
 8002aca:	f7ff fed3 	bl	8002874 <W25_DelayWhileBusy>
 8002ace:	e7c3      	b.n	8002a58 <W25_PageProgram+0x18>
 8002ad0:	20001214 	.word	0x20001214

08002ad4 <W25_ReadData>:

// Winbond 8.2.6 Read Data (03h)
// The only limit for quantity of data is memory / device size
int W25_ReadData(uint32_t address, uint8_t *buf, int bufSize)
{
 8002ad4:	b573      	push	{r0, r1, r4, r5, r6, lr}
	int retval;
	uint8_t cmdaddr[4] = {W25_CMD_READ_DATA,address>>16,address>>8,address};
 8002ad6:	2303      	movs	r3, #3
 8002ad8:	f88d 3004 	strb.w	r3, [sp, #4]
 8002adc:	0c03      	lsrs	r3, r0, #16
 8002ade:	ba40      	rev16	r0, r0
 8002ae0:	f8ad 0006 	strh.w	r0, [sp, #6]
{
 8002ae4:	460d      	mov	r5, r1
	//printf("+%s(Addr 0x%06X, buf 0x%08X, Len 0x%04X)\r\n",__func__,address,buf,bufSize);
	W25_CS_ENABLE(); // Drive Winbond chip select, /CS low
 8002ae6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002aea:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
{
 8002aee:	4616      	mov	r6, r2
	W25_CS_ENABLE(); // Drive Winbond chip select, /CS low
 8002af0:	2200      	movs	r2, #0
	uint8_t cmdaddr[4] = {W25_CMD_READ_DATA,address>>16,address>>8,address};
 8002af2:	f88d 3005 	strb.w	r3, [sp, #5]
	W25_CS_ENABLE(); // Drive Winbond chip select, /CS low
 8002af6:	f000 fed5 	bl	80038a4 <HAL_GPIO_WritePin>
	retval = HAL_SPI_Transmit(&hspi1, cmdaddr , sizeof(cmdaddr), 500); // Send Read Data command with address
 8002afa:	2204      	movs	r2, #4
 8002afc:	480d      	ldr	r0, [pc, #52]	@ (8002b34 <W25_ReadData+0x60>)
 8002afe:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8002b02:	eb0d 0102 	add.w	r1, sp, r2
 8002b06:	f001 fe5c 	bl	80047c2 <HAL_SPI_Transmit>
	if(retval != HAL_OK) {
 8002b0a:	4604      	mov	r4, r0
 8002b0c:	b978      	cbnz	r0, 8002b2e <W25_ReadData+0x5a>
		return retval;
	}
	//memset(buf,0,bufSize); // Buffer is transmitted during receive
	retval = HAL_SPI_Receive(&hspi1, buf, bufSize, 2000); // need longer time-outs when using slow SPI clock
 8002b0e:	4809      	ldr	r0, [pc, #36]	@ (8002b34 <W25_ReadData+0x60>)
 8002b10:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8002b14:	b2b2      	uxth	r2, r6
 8002b16:	4629      	mov	r1, r5
 8002b18:	f002 f84d 	bl	8004bb6 <HAL_SPI_Receive>
	if(retval != HAL_OK)
 8002b1c:	4604      	mov	r4, r0
 8002b1e:	b130      	cbz	r0, 8002b2e <W25_ReadData+0x5a>

	W25_CS_DISABLE();
 8002b20:	2201      	movs	r2, #1
 8002b22:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002b26:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002b2a:	f000 febb 	bl	80038a4 <HAL_GPIO_WritePin>

	return retval;
} // W25_ReadData()
 8002b2e:	4620      	mov	r0, r4
 8002b30:	b002      	add	sp, #8
 8002b32:	bd70      	pop	{r4, r5, r6, pc}
 8002b34:	20001214 	.word	0x20001214

08002b38 <calculate_epoch_time_utc>:
		HAL_Delay(1000);
		memset(flashBufferTaxReceived, 0x00,128);
	}
}

uint32_t calculate_epoch_time_utc(DATE *date, TIME *time) {
 8002b38:	b570      	push	{r4, r5, r6, lr}
	uart_transmit_string(&huart1, (uint8_t*) "Calculate Epoch data");
 8002b3a:	4e15      	ldr	r6, [pc, #84]	@ (8002b90 <calculate_epoch_time_utc+0x58>)
uint32_t calculate_epoch_time_utc(DATE *date, TIME *time) {
 8002b3c:	4605      	mov	r5, r0
 8002b3e:	b0aa      	sub	sp, #168	@ 0xa8
 8002b40:	460c      	mov	r4, r1
	uart_transmit_string(&huart1, (uint8_t*) "Calculate Epoch data");
 8002b42:	4630      	mov	r0, r6
 8002b44:	4913      	ldr	r1, [pc, #76]	@ (8002b94 <calculate_epoch_time_utc+0x5c>)
 8002b46:	f000 fc37 	bl	80033b8 <uart_transmit_string>
    struct tm timeinfo;
		uint8_t output_buffer[128];
    // Set up time structure
    timeinfo.tm_year = date->Yr - 1900; // - 1900 + 2000
 8002b4a:	68ab      	ldr	r3, [r5, #8]
		snprintf((char*)output_buffer, 128, "YEAR IN TIMEINFO: %d \n", timeinfo.tm_year);
 8002b4c:	4a12      	ldr	r2, [pc, #72]	@ (8002b98 <calculate_epoch_time_utc+0x60>)
    timeinfo.tm_year = date->Yr - 1900; // - 1900 + 2000
 8002b4e:	f2a3 736c 	subw	r3, r3, #1900	@ 0x76c
		snprintf((char*)output_buffer, 128, "YEAR IN TIMEINFO: %d \n", timeinfo.tm_year);
 8002b52:	2180      	movs	r1, #128	@ 0x80
 8002b54:	a80a      	add	r0, sp, #40	@ 0x28
    timeinfo.tm_year = date->Yr - 1900; // - 1900 + 2000
 8002b56:	9306      	str	r3, [sp, #24]
		snprintf((char*)output_buffer, 128, "YEAR IN TIMEINFO: %d \n", timeinfo.tm_year);
 8002b58:	f005 fda0 	bl	800869c <sniprintf>
		uart_transmit_string(&huart1, output_buffer);
 8002b5c:	a90a      	add	r1, sp, #40	@ 0x28
 8002b5e:	4630      	mov	r0, r6
 8002b60:	f000 fc2a 	bl	80033b8 <uart_transmit_string>
		
    timeinfo.tm_mon = date->Mon - 1;
 8002b64:	686b      	ldr	r3, [r5, #4]
 8002b66:	3b01      	subs	r3, #1
 8002b68:	9305      	str	r3, [sp, #20]
    timeinfo.tm_mday = date->Day;
 8002b6a:	682b      	ldr	r3, [r5, #0]
 8002b6c:	9304      	str	r3, [sp, #16]
    timeinfo.tm_hour = time->hour;
 8002b6e:	6823      	ldr	r3, [r4, #0]
 8002b70:	9303      	str	r3, [sp, #12]
    timeinfo.tm_min = time->min;
 8002b72:	6863      	ldr	r3, [r4, #4]
 8002b74:	9302      	str	r3, [sp, #8]
    timeinfo.tm_sec = time->sec;
 8002b76:	68a3      	ldr	r3, [r4, #8]
 8002b78:	9301      	str	r3, [sp, #4]
    timeinfo.tm_isdst = -1; // Let mktime determine DST if necessary

    // Get the local epoch time and then adjust for timezone offset
    time_t local_epoch = mktime(&timeinfo);
 8002b7a:	a801      	add	r0, sp, #4
    timeinfo.tm_isdst = -1; // Let mktime determine DST if necessary
 8002b7c:	f04f 33ff 	mov.w	r3, #4294967295
 8002b80:	9309      	str	r3, [sp, #36]	@ 0x24
    time_t local_epoch = mktime(&timeinfo);
 8002b82:	f005 ff53 	bl	8008a2c <mktime>
    return (uint32_t)(local_epoch + 25200); // Subtract timezone offset
}
 8002b86:	f500 40c4 	add.w	r0, r0, #25088	@ 0x6200
 8002b8a:	3070      	adds	r0, #112	@ 0x70
 8002b8c:	b02a      	add	sp, #168	@ 0xa8
 8002b8e:	bd70      	pop	{r4, r5, r6, pc}
 8002b90:	2000118c 	.word	0x2000118c
 8002b94:	0800d279 	.word	0x0800d279
 8002b98:	0800d28e 	.word	0x0800d28e

08002b9c <format_rmc_data>:

void format_rmc_data(RMCSTRUCT *rmc_data, char *output_buffer, size_t buffer_size) {
 8002b9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002ba0:	ed2d 8b04 	vpush	{d8-d9}
 8002ba4:	b09b      	sub	sp, #108	@ 0x6c
 8002ba6:	4604      	mov	r4, r0
 8002ba8:	e9cd 1218 	strd	r1, r2, [sp, #96]	@ 0x60
	uart_transmit_string(&huart1, (uint8_t*) "Format RMC data");
 8002bac:	4825      	ldr	r0, [pc, #148]	@ (8002c44 <format_rmc_data+0xa8>)
 8002bae:	4926      	ldr	r1, [pc, #152]	@ (8002c48 <format_rmc_data+0xac>)
 8002bb0:	f000 fc02 	bl	80033b8 <uart_transmit_string>
    uint32_t epoch_time = calculate_epoch_time_utc(&rmc_data->date, &rmc_data->tim);
 8002bb4:	4621      	mov	r1, r4
 8002bb6:	f104 0010 	add.w	r0, r4, #16
 8002bba:	f7ff ffbd 	bl	8002b38 <calculate_epoch_time_utc>

    // Format all fields in a single line with semicolon separation, including date
    snprintf(output_buffer, buffer_size, "%d;%d;%d;%d;%d;%d;%.4f;%c;%.4f;%c;%.1f;%.1f;%s;%u", rmc_data->date.Day, rmc_data->date.Mon, rmc_data->date.Yr, rmc_data->tim.hour, rmc_data->tim.min, rmc_data->tim.sec, rmc_data->lcation.latitude, rmc_data->lcation.NS, rmc_data->lcation.longitude, rmc_data->lcation.EW, rmc_data->speed, rmc_data->course, rmc_data->isValid ? "Valid" : "Invalid", epoch_time);
 8002bbe:	6923      	ldr	r3, [r4, #16]
 8002bc0:	9314      	str	r3, [sp, #80]	@ 0x50
 8002bc2:	e9d4 5305 	ldrd	r5, r3, [r4, #20]
    uint32_t epoch_time = calculate_epoch_time_utc(&rmc_data->date, &rmc_data->tim);
 8002bc6:	4607      	mov	r7, r0
    snprintf(output_buffer, buffer_size, "%d;%d;%d;%d;%d;%d;%.4f;%c;%.4f;%c;%.1f;%.1f;%s;%u", rmc_data->date.Day, rmc_data->date.Mon, rmc_data->date.Yr, rmc_data->tim.hour, rmc_data->tim.min, rmc_data->tim.sec, rmc_data->lcation.latitude, rmc_data->lcation.NS, rmc_data->lcation.longitude, rmc_data->lcation.EW, rmc_data->speed, rmc_data->course, rmc_data->isValid ? "Valid" : "Invalid", epoch_time);
 8002bc8:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8002bca:	9315      	str	r3, [sp, #84]	@ 0x54
 8002bcc:	f7fd fccc 	bl	8000568 <__aeabi_f2d>
 8002bd0:	e9cd 0116 	strd	r0, r1, [sp, #88]	@ 0x58
 8002bd4:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8002bd6:	f8d4 b008 	ldr.w	fp, [r4, #8]
 8002bda:	f894 6040 	ldrb.w	r6, [r4, #64]	@ 0x40
 8002bde:	f894 8050 	ldrb.w	r8, [r4, #80]	@ 0x50
 8002be2:	f7fd fcc1 	bl	8000568 <__aeabi_f2d>
 8002be6:	e9d4 9a00 	ldrd	r9, sl, [r4]
 8002bea:	ed94 8b0e 	vldr	d8, [r4, #56]	@ 0x38
 8002bee:	ed94 9b12 	vldr	d9, [r4, #72]	@ 0x48
 8002bf2:	ed9d 7b16 	vldr	d7, [sp, #88]	@ 0x58
 8002bf6:	6b24      	ldr	r4, [r4, #48]	@ 0x30
 8002bf8:	f8cd 8030 	str.w	r8, [sp, #48]	@ 0x30
 8002bfc:	4602      	mov	r2, r0
 8002bfe:	460b      	mov	r3, r1
 8002c00:	4812      	ldr	r0, [pc, #72]	@ (8002c4c <format_rmc_data+0xb0>)
 8002c02:	4913      	ldr	r1, [pc, #76]	@ (8002c50 <format_rmc_data+0xb4>)
 8002c04:	9608      	str	r6, [sp, #32]
 8002c06:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8002c0a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8002c0c:	4a11      	ldr	r2, [pc, #68]	@ (8002c54 <format_rmc_data+0xb8>)
 8002c0e:	f8cd 9008 	str.w	r9, [sp, #8]
 8002c12:	2c00      	cmp	r4, #0
 8002c14:	bf08      	it	eq
 8002c16:	4601      	moveq	r1, r0
 8002c18:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8002c1c:	e9cd 5300 	strd	r5, r3, [sp]
 8002c20:	e9cd 1712 	strd	r1, r7, [sp, #72]	@ 0x48
 8002c24:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8002c26:	ed8d 9b0a 	vstr	d9, [sp, #40]	@ 0x28
 8002c2a:	ed8d 8b06 	vstr	d8, [sp, #24]
 8002c2e:	e9cd ab03 	strd	sl, fp, [sp, #12]
 8002c32:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	@ 0x60
 8002c36:	f005 fd31 	bl	800869c <sniprintf>
}
 8002c3a:	b01b      	add	sp, #108	@ 0x6c
 8002c3c:	ecbd 8b04 	vpop	{d8-d9}
 8002c40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002c44:	2000118c 	.word	0x2000118c
 8002c48:	0800d2a5 	.word	0x0800d2a5
 8002c4c:	0800c896 	.word	0x0800c896
 8002c50:	0800c890 	.word	0x0800c890
 8002c54:	0800d2b5 	.word	0x0800d2b5

08002c58 <saveRMC>:


void saveRMC(){
 8002c58:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	int k = 0;
	int j = 0;
	W25_Reset();
	if (is_erased_rmc == 0){
 8002c5a:	4c35      	ldr	r4, [pc, #212]	@ (8002d30 <saveRMC+0xd8>)
	W25_Reset();
 8002c5c:	f7ff fe1b 	bl	8002896 <W25_Reset>
	if (is_erased_rmc == 0){
 8002c60:	6823      	ldr	r3, [r4, #0]
 8002c62:	b92b      	cbnz	r3, 8002c70 <saveRMC+0x18>
		W25_SectorErase(address_rmc);
 8002c64:	4b33      	ldr	r3, [pc, #204]	@ (8002d34 <saveRMC+0xdc>)
 8002c66:	6818      	ldr	r0, [r3, #0]
 8002c68:	f7ff febe 	bl	80029e8 <W25_SectorErase>
		is_erased_rmc = 1;
 8002c6c:	2301      	movs	r3, #1
 8002c6e:	6023      	str	r3, [r4, #0]
	}
	
	//format_rmc_data(&rmc_saved, (char*)rmcBufferDemo, 128);
	
	for(size_t i = 0; i < 128; i++){
 8002c70:	4a31      	ldr	r2, [pc, #196]	@ (8002d38 <saveRMC+0xe0>)
 8002c72:	2300      	movs	r3, #0
 8002c74:	4616      	mov	r6, r2
			if(rmcBufferDemo[i] != 0x00 && rmcBufferDemo[i+1] == 0x00){
 8002c76:	f812 1b01 	ldrb.w	r1, [r2], #1
 8002c7a:	461c      	mov	r4, r3
 8002c7c:	3301      	adds	r3, #1
 8002c7e:	b109      	cbz	r1, 8002c84 <saveRMC+0x2c>
 8002c80:	7811      	ldrb	r1, [r2, #0]
 8002c82:	b111      	cbz	r1, 8002c8a <saveRMC+0x32>
	for(size_t i = 0; i < 128; i++){
 8002c84:	2b80      	cmp	r3, #128	@ 0x80
 8002c86:	d1f6      	bne.n	8002c76 <saveRMC+0x1e>
	int k = 0;
 8002c88:	2400      	movs	r4, #0
				k = i;
				break;
			}
	}
	char addr_out[10];
	sprintf(addr_out, "%08x", address_rmc);
 8002c8a:	4d2a      	ldr	r5, [pc, #168]	@ (8002d34 <saveRMC+0xdc>)
 8002c8c:	492b      	ldr	r1, [pc, #172]	@ (8002d3c <saveRMC+0xe4>)
 8002c8e:	682a      	ldr	r2, [r5, #0]
 8002c90:	a801      	add	r0, sp, #4
 8002c92:	f005 fd37 	bl	8008704 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*) addr_out, 8, 1000);
 8002c96:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002c9a:	2208      	movs	r2, #8
 8002c9c:	a901      	add	r1, sp, #4
 8002c9e:	4828      	ldr	r0, [pc, #160]	@ (8002d40 <saveRMC+0xe8>)
 8002ca0:	f002 fc48 	bl	8005534 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, (uint8_t*)"\r\n", 1, 1000);
 8002ca4:	4927      	ldr	r1, [pc, #156]	@ (8002d44 <saveRMC+0xec>)
 8002ca6:	4826      	ldr	r0, [pc, #152]	@ (8002d40 <saveRMC+0xe8>)
 8002ca8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002cac:	2201      	movs	r2, #1
 8002cae:	f002 fc41 	bl	8005534 <HAL_UART_Transmit>
	
	k++;
	rmcBufferDemo[k] = ';';
 8002cb2:	1933      	adds	r3, r6, r4
 8002cb4:	223b      	movs	r2, #59	@ 0x3b
 8002cb6:	705a      	strb	r2, [r3, #1]
	for(size_t idx = 6; idx > 0 ; idx--){
		k++;
		rmcBufferDemo[k] = addr_out[8 - idx];
 8002cb8:	1ca3      	adds	r3, r4, #2
 8002cba:	f8dd 1006 	ldr.w	r1, [sp, #6]
 8002cbe:	50f1      	str	r1, [r6, r3]
 8002cc0:	18f2      	adds	r2, r6, r3
 8002cc2:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8002cc6:	8093      	strh	r3, [r2, #4]
	}
	
	for (j=0;j<110-k-1;j++)
	{
		rmcBufferDemo[j+k+1]=0x00;
 8002cc8:	f104 0008 	add.w	r0, r4, #8
 8002ccc:	f1c4 0266 	rsb	r2, r4, #102	@ 0x66
 8002cd0:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 8002cd4:	2100      	movs	r1, #0
 8002cd6:	4430      	add	r0, r6
 8002cd8:	f005 fda3 	bl	8008822 <memset>
	}
	W25_Reset();
 8002cdc:	f7ff fddb 	bl	8002896 <W25_Reset>
	W25_PageProgram(address_rmc, rmcBufferDemo, 128);
 8002ce0:	2280      	movs	r2, #128	@ 0x80
 8002ce2:	4915      	ldr	r1, [pc, #84]	@ (8002d38 <saveRMC+0xe0>)
 8002ce4:	6828      	ldr	r0, [r5, #0]
 8002ce6:	f7ff feab 	bl	8002a40 <W25_PageProgram>
	uart_transmit_string(&huart1, (uint8_t*) "Buffer before saving to FLASH: ");
 8002cea:	4917      	ldr	r1, [pc, #92]	@ (8002d48 <saveRMC+0xf0>)
 8002cec:	4814      	ldr	r0, [pc, #80]	@ (8002d40 <saveRMC+0xe8>)
 8002cee:	f000 fb63 	bl	80033b8 <uart_transmit_string>
	uart_transmit_string(&huart1, rmcBufferDemo);
 8002cf2:	4911      	ldr	r1, [pc, #68]	@ (8002d38 <saveRMC+0xe0>)
 8002cf4:	4812      	ldr	r0, [pc, #72]	@ (8002d40 <saveRMC+0xe8>)
 8002cf6:	f000 fb5f 	bl	80033b8 <uart_transmit_string>
	current_addr = address_rmc;
 8002cfa:	682b      	ldr	r3, [r5, #0]
 8002cfc:	4a13      	ldr	r2, [pc, #76]	@ (8002d4c <saveRMC+0xf4>)
	address_rmc+=128;
	if(current_addr == 0x3E80){
 8002cfe:	f5b3 5f7a 	cmp.w	r3, #16000	@ 0x3e80
	current_addr = address_rmc;
 8002d02:	6013      	str	r3, [r2, #0]
	address_rmc+=128;
 8002d04:	f103 0280 	add.w	r2, r3, #128	@ 0x80
	if(current_addr == 0x3E80){
 8002d08:	d00c      	beq.n	8002d24 <saveRMC+0xcc>
	address_rmc+=128;
 8002d0a:	602a      	str	r2, [r5, #0]
		address_rmc = 0x3000;
		W25_SectorErase(address_rmc);
	}
	HAL_Delay(1000);
 8002d0c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002d10:	f000 fbba 	bl	8003488 <HAL_Delay>
	memset(flashBufferRMCReceived, 0x00,128);
 8002d14:	480e      	ldr	r0, [pc, #56]	@ (8002d50 <saveRMC+0xf8>)
 8002d16:	2280      	movs	r2, #128	@ 0x80
 8002d18:	2100      	movs	r1, #0
}
 8002d1a:	b004      	add	sp, #16
 8002d1c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	memset(flashBufferRMCReceived, 0x00,128);
 8002d20:	f005 bd7f 	b.w	8008822 <memset>
		address_rmc = 0x3000;
 8002d24:	f44f 5040 	mov.w	r0, #12288	@ 0x3000
 8002d28:	6028      	str	r0, [r5, #0]
		W25_SectorErase(address_rmc);
 8002d2a:	f7ff fe5d 	bl	80029e8 <W25_SectorErase>
 8002d2e:	e7ed      	b.n	8002d0c <saveRMC+0xb4>
 8002d30:	200013f0 	.word	0x200013f0
 8002d34:	20000000 	.word	0x20000000
 8002d38:	200012f0 	.word	0x200012f0
 8002d3c:	0800d257 	.word	0x0800d257
 8002d40:	2000118c 	.word	0x2000118c
 8002d44:	0800ce02 	.word	0x0800ce02
 8002d48:	0800d2e7 	.word	0x0800d2e7
 8002d4c:	200013f4 	.word	0x200013f4
 8002d50:	20001370 	.word	0x20001370

08002d54 <receiveRMCDataFromGPS>:

void receiveRMCDataFromGPS(void) {
 8002d54:	b570      	push	{r4, r5, r6, lr}
	uint8_t output_buffer[70];

	// Wait until there are at least 10 messages in the queue
	uart_transmit_string(&huart1, (uint8_t*)"Inside Receiving RMC Data SPI FLASH\n");
	osEvent evt = osMailGet(RMC_MailQFLASHId, osWaitForever); // Wait for mail
 8002d56:	4e58      	ldr	r6, [pc, #352]	@ (8002eb8 <receiveRMCDataFromGPS+0x164>)
	uart_transmit_string(&huart1, (uint8_t*)"Inside Receiving RMC Data SPI FLASH\n");
 8002d58:	4958      	ldr	r1, [pc, #352]	@ (8002ebc <receiveRMCDataFromGPS+0x168>)
 8002d5a:	4859      	ldr	r0, [pc, #356]	@ (8002ec0 <receiveRMCDataFromGPS+0x16c>)
void receiveRMCDataFromGPS(void) {
 8002d5c:	b09e      	sub	sp, #120	@ 0x78
	uart_transmit_string(&huart1, (uint8_t*)"Inside Receiving RMC Data SPI FLASH\n");
 8002d5e:	f000 fb2b 	bl	80033b8 <uart_transmit_string>
	osEvent evt = osMailGet(RMC_MailQFLASHId, osWaitForever); // Wait for mail
 8002d62:	6831      	ldr	r1, [r6, #0]
 8002d64:	f04f 32ff 	mov.w	r2, #4294967295
 8002d68:	a809      	add	r0, sp, #36	@ 0x24
 8002d6a:	f002 fe2d 	bl	80059c8 <osMailGet>
	if(evt.status == osEventMail){
 8002d6e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002d70:	2b20      	cmp	r3, #32
 8002d72:	f040 809f 	bne.w	8002eb4 <receiveRMCDataFromGPS+0x160>
		uart_transmit_string(&huart1, (uint8_t*)"Received  RMC Data SPI FLASH\n");
 8002d76:	4953      	ldr	r1, [pc, #332]	@ (8002ec4 <receiveRMCDataFromGPS+0x170>)
 8002d78:	4851      	ldr	r0, [pc, #324]	@ (8002ec0 <receiveRMCDataFromGPS+0x16c>)
		snprintf((char *)output_buffer, sizeof(output_buffer),"Speed FLASH: %.2f, Course: %.2f, Valid: %d\n", receivedData->speed, receivedData->course, receivedData->isValid);
		uart_transmit_string(&huart1, output_buffer);


		//Sending DATA to GSM
		rmc_flash.lcation.latitude = receivedData->lcation.latitude;
 8002d7a:	4d53      	ldr	r5, [pc, #332]	@ (8002ec8 <receiveRMCDataFromGPS+0x174>)
		uart_transmit_string(&huart1, (uint8_t*)"Received  RMC Data SPI FLASH\n");
 8002d7c:	f000 fb1c 	bl	80033b8 <uart_transmit_string>
		RMCSTRUCT *receivedData = (RMCSTRUCT *)evt.value.p;
 8002d80:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
		snprintf((char *)output_buffer, sizeof(output_buffer), "Time Received FLASH: %d:%d:%d\n", receivedData->tim.hour, receivedData->tim.min, receivedData->tim.sec);
 8002d82:	4a52      	ldr	r2, [pc, #328]	@ (8002ecc <receiveRMCDataFromGPS+0x178>)
 8002d84:	68a3      	ldr	r3, [r4, #8]
 8002d86:	9301      	str	r3, [sp, #4]
 8002d88:	6863      	ldr	r3, [r4, #4]
 8002d8a:	9300      	str	r3, [sp, #0]
 8002d8c:	6823      	ldr	r3, [r4, #0]
 8002d8e:	2146      	movs	r1, #70	@ 0x46
 8002d90:	a80c      	add	r0, sp, #48	@ 0x30
 8002d92:	f005 fc83 	bl	800869c <sniprintf>
		uart_transmit_string(&huart1, output_buffer);
 8002d96:	484a      	ldr	r0, [pc, #296]	@ (8002ec0 <receiveRMCDataFromGPS+0x16c>)
 8002d98:	a90c      	add	r1, sp, #48	@ 0x30
 8002d9a:	f000 fb0d 	bl	80033b8 <uart_transmit_string>
		snprintf((char *)output_buffer, sizeof(output_buffer), "Date Received FLASH : %d/%d/%d\n", receivedData->date.Day, receivedData->date.Mon, receivedData->date.Yr);
 8002d9e:	69a3      	ldr	r3, [r4, #24]
 8002da0:	9301      	str	r3, [sp, #4]
 8002da2:	6963      	ldr	r3, [r4, #20]
 8002da4:	9300      	str	r3, [sp, #0]
 8002da6:	6923      	ldr	r3, [r4, #16]
 8002da8:	4a49      	ldr	r2, [pc, #292]	@ (8002ed0 <receiveRMCDataFromGPS+0x17c>)
 8002daa:	2146      	movs	r1, #70	@ 0x46
 8002dac:	a80c      	add	r0, sp, #48	@ 0x30
 8002dae:	f005 fc75 	bl	800869c <sniprintf>
		uart_transmit_string(&huart1, output_buffer);
 8002db2:	4843      	ldr	r0, [pc, #268]	@ (8002ec0 <receiveRMCDataFromGPS+0x16c>)
 8002db4:	a90c      	add	r1, sp, #48	@ 0x30
 8002db6:	f000 faff 	bl	80033b8 <uart_transmit_string>
		snprintf((char *)output_buffer, sizeof(output_buffer), "Location Received FLASH: %.6f %c, %.6f %c\n", receivedData->lcation.latitude, receivedData->lcation.NS, receivedData->lcation.longitude, receivedData->lcation.EW);
 8002dba:	f894 3050 	ldrb.w	r3, [r4, #80]	@ 0x50
 8002dbe:	9306      	str	r3, [sp, #24]
 8002dc0:	e9d4 2312 	ldrd	r2, r3, [r4, #72]	@ 0x48
 8002dc4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8002dc8:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 8002dcc:	9302      	str	r3, [sp, #8]
 8002dce:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	@ 0x38
 8002dd2:	2146      	movs	r1, #70	@ 0x46
 8002dd4:	e9cd 2300 	strd	r2, r3, [sp]
 8002dd8:	a80c      	add	r0, sp, #48	@ 0x30
 8002dda:	4a3e      	ldr	r2, [pc, #248]	@ (8002ed4 <receiveRMCDataFromGPS+0x180>)
 8002ddc:	f005 fc5e 	bl	800869c <sniprintf>
		uart_transmit_string(&huart1, output_buffer);
 8002de0:	4837      	ldr	r0, [pc, #220]	@ (8002ec0 <receiveRMCDataFromGPS+0x16c>)
 8002de2:	a90c      	add	r1, sp, #48	@ 0x30
 8002de4:	f000 fae8 	bl	80033b8 <uart_transmit_string>
		snprintf((char *)output_buffer, sizeof(output_buffer),"Speed FLASH: %.2f, Course: %.2f, Valid: %d\n", receivedData->speed, receivedData->course, receivedData->isValid);
 8002de8:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8002dea:	9304      	str	r3, [sp, #16]
 8002dec:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8002dee:	f7fd fbbb 	bl	8000568 <__aeabi_f2d>
 8002df2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002df6:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8002df8:	f7fd fbb6 	bl	8000568 <__aeabi_f2d>
 8002dfc:	4a36      	ldr	r2, [pc, #216]	@ (8002ed8 <receiveRMCDataFromGPS+0x184>)
 8002dfe:	e9cd 0100 	strd	r0, r1, [sp]
 8002e02:	2146      	movs	r1, #70	@ 0x46
 8002e04:	a80c      	add	r0, sp, #48	@ 0x30
 8002e06:	f005 fc49 	bl	800869c <sniprintf>
		uart_transmit_string(&huart1, output_buffer);
 8002e0a:	482d      	ldr	r0, [pc, #180]	@ (8002ec0 <receiveRMCDataFromGPS+0x16c>)
 8002e0c:	a90c      	add	r1, sp, #48	@ 0x30
 8002e0e:	f000 fad3 	bl	80033b8 <uart_transmit_string>
		rmc_flash.lcation.latitude = receivedData->lcation.latitude;
 8002e12:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	@ 0x38
 8002e16:	e9c5 230e 	strd	r2, r3, [r5, #56]	@ 0x38
		rmc_flash.lcation.longitude = receivedData->lcation.longitude;
 8002e1a:	e9d4 2312 	ldrd	r2, r3, [r4, #72]	@ 0x48
 8002e1e:	e9c5 2312 	strd	r2, r3, [r5, #72]	@ 0x48
		rmc_flash.speed = receivedData->speed;
 8002e22:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8002e24:	62ab      	str	r3, [r5, #40]	@ 0x28
		rmc_flash.course = receivedData->course;
 8002e26:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8002e28:	62eb      	str	r3, [r5, #44]	@ 0x2c
		rmc_flash.lcation.NS = receivedData->lcation.NS;
 8002e2a:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 8002e2e:	f885 3040 	strb.w	r3, [r5, #64]	@ 0x40
		rmc_flash.lcation.EW = receivedData->lcation.EW;
 8002e32:	f894 3050 	ldrb.w	r3, [r4, #80]	@ 0x50
 8002e36:	f885 3050 	strb.w	r3, [r5, #80]	@ 0x50
		rmc_flash.isValid = receivedData->isValid;
 8002e3a:	6b23      	ldr	r3, [r4, #48]	@ 0x30

		uart_transmit_string(&huart1, (uint8_t*)"RMC Data  Saved GSM\n");
 8002e3c:	4927      	ldr	r1, [pc, #156]	@ (8002edc <receiveRMCDataFromGPS+0x188>)
 8002e3e:	4820      	ldr	r0, [pc, #128]	@ (8002ec0 <receiveRMCDataFromGPS+0x16c>)
		rmc_flash.isValid = receivedData->isValid;
 8002e40:	632b      	str	r3, [r5, #48]	@ 0x30
		uart_transmit_string(&huart1, (uint8_t*)"RMC Data  Saved GSM\n");
 8002e42:	f000 fab9 	bl	80033b8 <uart_transmit_string>
		// Process received data (e.g., display, log, or store data)
		snprintf((char *)output_buffer, sizeof(output_buffer), "Location Received FLASH: %.6f %c, %.6f %c\n", rmc_flash.lcation.latitude, rmc_flash.lcation.NS, rmc_flash.lcation.longitude, rmc_flash.lcation.EW);
 8002e46:	f895 3050 	ldrb.w	r3, [r5, #80]	@ 0x50
 8002e4a:	9306      	str	r3, [sp, #24]
 8002e4c:	e9d5 2312 	ldrd	r2, r3, [r5, #72]	@ 0x48
 8002e50:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8002e54:	f895 3040 	ldrb.w	r3, [r5, #64]	@ 0x40
 8002e58:	9302      	str	r3, [sp, #8]
 8002e5a:	e9d5 230e 	ldrd	r2, r3, [r5, #56]	@ 0x38
 8002e5e:	2146      	movs	r1, #70	@ 0x46
 8002e60:	e9cd 2300 	strd	r2, r3, [sp]
 8002e64:	a80c      	add	r0, sp, #48	@ 0x30
 8002e66:	4a1b      	ldr	r2, [pc, #108]	@ (8002ed4 <receiveRMCDataFromGPS+0x180>)
 8002e68:	f005 fc18 	bl	800869c <sniprintf>
		uart_transmit_string(&huart1, output_buffer);
 8002e6c:	4814      	ldr	r0, [pc, #80]	@ (8002ec0 <receiveRMCDataFromGPS+0x16c>)
 8002e6e:	a90c      	add	r1, sp, #48	@ 0x30
 8002e70:	f000 faa2 	bl	80033b8 <uart_transmit_string>

		snprintf((char *)output_buffer, sizeof(output_buffer),"Speed FLASH: %.2f, Course: %.2f, Valid: %d\n", rmc_flash.speed, rmc_flash.course, rmc_flash.isValid);
 8002e74:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8002e76:	9304      	str	r3, [sp, #16]
 8002e78:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 8002e7a:	f7fd fb75 	bl	8000568 <__aeabi_f2d>
 8002e7e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002e82:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 8002e84:	f7fd fb70 	bl	8000568 <__aeabi_f2d>
 8002e88:	4a13      	ldr	r2, [pc, #76]	@ (8002ed8 <receiveRMCDataFromGPS+0x184>)
 8002e8a:	e9cd 0100 	strd	r0, r1, [sp]
 8002e8e:	2146      	movs	r1, #70	@ 0x46
 8002e90:	a80c      	add	r0, sp, #48	@ 0x30
 8002e92:	f005 fc03 	bl	800869c <sniprintf>
		uart_transmit_string(&huart1, output_buffer);
 8002e96:	480a      	ldr	r0, [pc, #40]	@ (8002ec0 <receiveRMCDataFromGPS+0x16c>)
 8002e98:	a90c      	add	r1, sp, #48	@ 0x30
 8002e9a:	f000 fa8d 	bl	80033b8 <uart_transmit_string>

		format_rmc_data(receivedData,(char*) rmcBufferDemo, 128);
 8002e9e:	4910      	ldr	r1, [pc, #64]	@ (8002ee0 <receiveRMCDataFromGPS+0x18c>)
 8002ea0:	4620      	mov	r0, r4
 8002ea2:	2280      	movs	r2, #128	@ 0x80
 8002ea4:	f7ff fe7a 	bl	8002b9c <format_rmc_data>
		saveRMC();
 8002ea8:	f7ff fed6 	bl	8002c58 <saveRMC>
		osMailFree(RMC_MailQFLASHId, receivedData); // Free memory after use
 8002eac:	6830      	ldr	r0, [r6, #0]
 8002eae:	4621      	mov	r1, r4
 8002eb0:	f002 fdc3 	bl	8005a3a <osMailFree>
	}
}
 8002eb4:	b01e      	add	sp, #120	@ 0x78
 8002eb6:	bd70      	pop	{r4, r5, r6, pc}
 8002eb8:	200002c0 	.word	0x200002c0
 8002ebc:	0800d307 	.word	0x0800d307
 8002ec0:	2000118c 	.word	0x2000118c
 8002ec4:	0800d32c 	.word	0x0800d32c
 8002ec8:	20001298 	.word	0x20001298
 8002ecc:	0800d34a 	.word	0x0800d34a
 8002ed0:	0800d369 	.word	0x0800d369
 8002ed4:	0800cfd4 	.word	0x0800cfd4
 8002ed8:	0800cfff 	.word	0x0800cfff
 8002edc:	0800cfbf 	.word	0x0800cfbf
 8002ee0:	200012f0 	.word	0x200012f0

08002ee4 <sendRMCDataToGSM>:

void sendRMCDataToGSM(RMCSTRUCT *rmcData) {
 8002ee4:	b570      	push	{r4, r5, r6, lr}
	HAL_UART_Transmit(&huart1, (uint8_t*) "SENDING RMC TO GSM\n",  strlen("SENDING RMC TO GSM\n") , HAL_MAX_DELAY);
    RMCSTRUCT *mail = (RMCSTRUCT *)osMailAlloc(RMC_MailQGSMId, osWaitForever); // Allocate memory for mail
 8002ee6:	4e0d      	ldr	r6, [pc, #52]	@ (8002f1c <sendRMCDataToGSM+0x38>)
	HAL_UART_Transmit(&huart1, (uint8_t*) "SENDING RMC TO GSM\n",  strlen("SENDING RMC TO GSM\n") , HAL_MAX_DELAY);
 8002ee8:	490d      	ldr	r1, [pc, #52]	@ (8002f20 <sendRMCDataToGSM+0x3c>)
 8002eea:	f04f 33ff 	mov.w	r3, #4294967295
 8002eee:	2213      	movs	r2, #19
void sendRMCDataToGSM(RMCSTRUCT *rmcData) {
 8002ef0:	4605      	mov	r5, r0
	HAL_UART_Transmit(&huart1, (uint8_t*) "SENDING RMC TO GSM\n",  strlen("SENDING RMC TO GSM\n") , HAL_MAX_DELAY);
 8002ef2:	480c      	ldr	r0, [pc, #48]	@ (8002f24 <sendRMCDataToGSM+0x40>)
 8002ef4:	f002 fb1e 	bl	8005534 <HAL_UART_Transmit>
    RMCSTRUCT *mail = (RMCSTRUCT *)osMailAlloc(RMC_MailQGSMId, osWaitForever); // Allocate memory for mail
 8002ef8:	6830      	ldr	r0, [r6, #0]
 8002efa:	f04f 31ff 	mov.w	r1, #4294967295
 8002efe:	f002 fd33 	bl	8005968 <osMailAlloc>
 8002f02:	4604      	mov	r4, r0
    if (mail != NULL) {
 8002f04:	b148      	cbz	r0, 8002f1a <sendRMCDataToGSM+0x36>
        *mail = *rmcData; // Copy data into allocated memory
 8002f06:	4629      	mov	r1, r5
 8002f08:	2258      	movs	r2, #88	@ 0x58
 8002f0a:	f006 faae 	bl	800946a <memcpy>
        osMailPut(RMC_MailQGSMId, mail); // Put message in queue
 8002f0e:	6830      	ldr	r0, [r6, #0]
 8002f10:	4621      	mov	r1, r4
    }
}
 8002f12:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        osMailPut(RMC_MailQGSMId, mail); // Put message in queue
 8002f16:	f002 bd2c 	b.w	8005972 <osMailPut>
}
 8002f1a:	bd70      	pop	{r4, r5, r6, pc}
 8002f1c:	200013f8 	.word	0x200013f8
 8002f20:	0800d389 	.word	0x0800d389
 8002f24:	2000118c 	.word	0x2000118c

08002f28 <StartSpiFlash>:

void StartSpiFlash(void const * argument)
{
 8002f28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  /* USER CODE BEGIN StartSpiFlash */
  /* Infinite loop */
	current_addr = address_rmc;
 8002f2c:	4b2c      	ldr	r3, [pc, #176]	@ (8002fe0 <StartSpiFlash+0xb8>)
 8002f2e:	f8df 80d0 	ldr.w	r8, [pc, #208]	@ 8003000 <StartSpiFlash+0xd8>
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f8c8 3000 	str.w	r3, [r8]
{
 8002f38:	b08a      	sub	sp, #40	@ 0x28

	osMailQDef(GSM_MailQ, 11, RMCSTRUCT);
 8002f3a:	2358      	movs	r3, #88	@ 0x58
 8002f3c:	220b      	movs	r2, #11
	RMC_MailQGSMId = osMailCreate(osMailQ(GSM_MailQ), NULL);
 8002f3e:	2100      	movs	r1, #0
 8002f40:	a801      	add	r0, sp, #4
	osMailQDef(GSM_MailQ, 11, RMCSTRUCT);
 8002f42:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8002f46:	f8cd d00c 	str.w	sp, [sp, #12]
	RMC_MailQGSMId = osMailCreate(osMailQ(GSM_MailQ), NULL);
 8002f4a:	f002 fce2 	bl	8005912 <osMailCreate>
 8002f4e:	4b25      	ldr	r3, [pc, #148]	@ (8002fe4 <StartSpiFlash+0xbc>)
	int countDelayGSM = 0;
	for(;;){
		osDelay(1000);
		uart_transmit_string(&huart1, (uint8_t*) "INSIDE SPI FLASH\n");
 8002f50:	4c25      	ldr	r4, [pc, #148]	@ (8002fe8 <StartSpiFlash+0xc0>)
		W25_Reset();
		W25_ReadJedecID();
		W25_Reset();
		W25_ReadData(current_addr, flashBufferRMCReceived, 128);
 8002f52:	4e26      	ldr	r6, [pc, #152]	@ (8002fec <StartSpiFlash+0xc4>)
	RMC_MailQGSMId = osMailCreate(osMailQ(GSM_MailQ), NULL);
 8002f54:	6018      	str	r0, [r3, #0]
		osDelay(1000);
 8002f56:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002f5a:	f002 fc5b 	bl	8005814 <osDelay>
		uart_transmit_string(&huart1, (uint8_t*) "INSIDE SPI FLASH\n");
 8002f5e:	4924      	ldr	r1, [pc, #144]	@ (8002ff0 <StartSpiFlash+0xc8>)
 8002f60:	4620      	mov	r0, r4
 8002f62:	f000 fa29 	bl	80033b8 <uart_transmit_string>
		W25_Reset();
 8002f66:	f7ff fc96 	bl	8002896 <W25_Reset>
		W25_ReadJedecID();
 8002f6a:	f7ff fcc1 	bl	80028f0 <W25_ReadJedecID>
		W25_Reset();
 8002f6e:	f7ff fc92 	bl	8002896 <W25_Reset>
		W25_ReadData(current_addr, flashBufferRMCReceived, 128);
 8002f72:	2280      	movs	r2, #128	@ 0x80
 8002f74:	f8d8 0000 	ldr.w	r0, [r8]
 8002f78:	4631      	mov	r1, r6
 8002f7a:	f7ff fdab 	bl	8002ad4 <W25_ReadData>
		char spi_flash_data_intro[] = "Flash DATA received: ";
 8002f7e:	4b1d      	ldr	r3, [pc, #116]	@ (8002ff4 <StartSpiFlash+0xcc>)
 8002f80:	aa04      	add	r2, sp, #16
 8002f82:	f103 0c10 	add.w	ip, r3, #16
 8002f86:	4617      	mov	r7, r2
 8002f88:	6818      	ldr	r0, [r3, #0]
 8002f8a:	6859      	ldr	r1, [r3, #4]
 8002f8c:	4615      	mov	r5, r2
 8002f8e:	c503      	stmia	r5!, {r0, r1}
 8002f90:	3308      	adds	r3, #8
 8002f92:	4563      	cmp	r3, ip
 8002f94:	462a      	mov	r2, r5
 8002f96:	d1f7      	bne.n	8002f88 <StartSpiFlash+0x60>
 8002f98:	6818      	ldr	r0, [r3, #0]
 8002f9a:	889b      	ldrh	r3, [r3, #4]
 8002f9c:	6028      	str	r0, [r5, #0]
 8002f9e:	80ab      	strh	r3, [r5, #4]
		HAL_UART_Transmit(&huart1, (uint8_t*) spi_flash_data_intro, strlen(spi_flash_data_intro), 1000);
 8002fa0:	4638      	mov	r0, r7
 8002fa2:	f7fd f975 	bl	8000290 <strlen>
 8002fa6:	4639      	mov	r1, r7
 8002fa8:	b282      	uxth	r2, r0
 8002faa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002fae:	4620      	mov	r0, r4
 8002fb0:	f002 fac0 	bl	8005534 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart1, flashBufferRMCReceived, sizeof(flashBufferRMCReceived), 1000);
 8002fb4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002fb8:	2280      	movs	r2, #128	@ 0x80
 8002fba:	4631      	mov	r1, r6
 8002fbc:	4620      	mov	r0, r4
 8002fbe:	f002 fab9 	bl	8005534 <HAL_UART_Transmit>
		//receiveTaxData();
		receiveRMCDataFromGPS();
 8002fc2:	f7ff fec7 	bl	8002d54 <receiveRMCDataFromGPS>

		sendRMCDataToGSM(&rmc_flash);
 8002fc6:	480c      	ldr	r0, [pc, #48]	@ (8002ff8 <StartSpiFlash+0xd0>)
 8002fc8:	f7ff ff8c 	bl	8002ee4 <sendRMCDataToGSM>

		uart_transmit_string(&huart1,(uint8_t*) "\n\n");
 8002fcc:	4620      	mov	r0, r4
 8002fce:	490b      	ldr	r1, [pc, #44]	@ (8002ffc <StartSpiFlash+0xd4>)
 8002fd0:	f000 f9f2 	bl	80033b8 <uart_transmit_string>
		osDelay(1000);
 8002fd4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002fd8:	f002 fc1c 	bl	8005814 <osDelay>
	for(;;){
 8002fdc:	e7bb      	b.n	8002f56 <StartSpiFlash+0x2e>
 8002fde:	bf00      	nop
 8002fe0:	20000000 	.word	0x20000000
 8002fe4:	200013f8 	.word	0x200013f8
 8002fe8:	2000118c 	.word	0x2000118c
 8002fec:	20001370 	.word	0x20001370
 8002ff0:	0800d39d 	.word	0x0800d39d
 8002ff4:	0800d3af 	.word	0x0800d3af
 8002ff8:	20001298 	.word	0x20001298
 8002ffc:	0800c977 	.word	0x0800c977
 8003000:	200013f4 	.word	0x200013f4

08003004 <HAL_MspInit>:

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003004:	4b0d      	ldr	r3, [pc, #52]	@ (800303c <HAL_MspInit+0x38>)
 8003006:	699a      	ldr	r2, [r3, #24]
 8003008:	f042 0201 	orr.w	r2, r2, #1
 800300c:	619a      	str	r2, [r3, #24]
 800300e:	699a      	ldr	r2, [r3, #24]
{
 8003010:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003012:	f002 0201 	and.w	r2, r2, #1
 8003016:	9200      	str	r2, [sp, #0]
 8003018:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800301a:	69da      	ldr	r2, [r3, #28]
 800301c:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8003020:	61da      	str	r2, [r3, #28]
 8003022:	69db      	ldr	r3, [r3, #28]
 8003024:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003028:	9301      	str	r3, [sp, #4]
 800302a:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800302c:	2200      	movs	r2, #0
 800302e:	210f      	movs	r1, #15
 8003030:	f06f 0001 	mvn.w	r0, #1

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003034:	b002      	add	sp, #8
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003036:	f000 ba4d 	b.w	80034d4 <HAL_NVIC_SetPriority>
 800303a:	bf00      	nop
 800303c:	40021000 	.word	0x40021000

08003040 <HAL_RTC_MspInit>:
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
  if(hrtc->Instance==RTC)
 8003040:	6802      	ldr	r2, [r0, #0]
 8003042:	4b07      	ldr	r3, [pc, #28]	@ (8003060 <HAL_RTC_MspInit+0x20>)
 8003044:	429a      	cmp	r2, r3
 8003046:	d10a      	bne.n	800305e <HAL_RTC_MspInit+0x1e>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003048:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800304c:	fa92 f2a2 	rbit	r2, r2
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003050:	4b04      	ldr	r3, [pc, #16]	@ (8003064 <HAL_RTC_MspInit+0x24>)
 8003052:	fab2 f282 	clz	r2, r2
 8003056:	4413      	add	r3, r2
 8003058:	009b      	lsls	r3, r3, #2
 800305a:	2201      	movs	r2, #1
 800305c:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTC_MspInit 1 */

  }

}
 800305e:	4770      	bx	lr
 8003060:	40002800 	.word	0x40002800
 8003064:	10908100 	.word	0x10908100

08003068 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003068:	b510      	push	{r4, lr}
 800306a:	4604      	mov	r4, r0
 800306c:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800306e:	2214      	movs	r2, #20
 8003070:	2100      	movs	r1, #0
 8003072:	a803      	add	r0, sp, #12
 8003074:	f005 fbd5 	bl	8008822 <memset>
  if(hspi->Instance==SPI1)
 8003078:	6822      	ldr	r2, [r4, #0]
 800307a:	4b12      	ldr	r3, [pc, #72]	@ (80030c4 <HAL_SPI_MspInit+0x5c>)
 800307c:	429a      	cmp	r2, r3
 800307e:	d11f      	bne.n	80030c0 <HAL_SPI_MspInit+0x58>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003080:	f503 4360 	add.w	r3, r3, #57344	@ 0xe000
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003084:	2103      	movs	r1, #3
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003086:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003088:	480f      	ldr	r0, [pc, #60]	@ (80030c8 <HAL_SPI_MspInit+0x60>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 800308a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800308e:	619a      	str	r2, [r3, #24]
 8003090:	699a      	ldr	r2, [r3, #24]
 8003092:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8003096:	9201      	str	r2, [sp, #4]
 8003098:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800309a:	695a      	ldr	r2, [r3, #20]
 800309c:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 80030a0:	615a      	str	r2, [r3, #20]
 80030a2:	695b      	ldr	r3, [r3, #20]
 80030a4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80030a8:	9302      	str	r3, [sp, #8]
 80030aa:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030ac:	2238      	movs	r2, #56	@ 0x38
 80030ae:	2302      	movs	r3, #2
 80030b0:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80030b4:	2305      	movs	r3, #5
 80030b6:	e9cd 1306 	strd	r1, r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80030ba:	a903      	add	r1, sp, #12
 80030bc:	f000 fb2e 	bl	800371c <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 80030c0:	b008      	add	sp, #32
 80030c2:	bd10      	pop	{r4, pc}
 80030c4:	40013000 	.word	0x40013000
 80030c8:	48000400 	.word	0x48000400

080030cc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80030cc:	b530      	push	{r4, r5, lr}
 80030ce:	4605      	mov	r5, r0
 80030d0:	b08d      	sub	sp, #52	@ 0x34
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030d2:	2214      	movs	r2, #20
 80030d4:	2100      	movs	r1, #0
 80030d6:	a807      	add	r0, sp, #28
 80030d8:	f005 fba3 	bl	8008822 <memset>
  if(huart->Instance==USART1)
 80030dc:	682b      	ldr	r3, [r5, #0]
 80030de:	4a4a      	ldr	r2, [pc, #296]	@ (8003208 <HAL_UART_MspInit+0x13c>)
 80030e0:	4293      	cmp	r3, r2
 80030e2:	d137      	bne.n	8003154 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80030e4:	4b49      	ldr	r3, [pc, #292]	@ (800320c <HAL_UART_MspInit+0x140>)
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 80030e6:	4c4a      	ldr	r4, [pc, #296]	@ (8003210 <HAL_UART_MspInit+0x144>)
    __HAL_RCC_USART1_CLK_ENABLE();
 80030e8:	699a      	ldr	r2, [r3, #24]
 80030ea:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80030ee:	619a      	str	r2, [r3, #24]
 80030f0:	699a      	ldr	r2, [r3, #24]
 80030f2:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 80030f6:	9201      	str	r2, [sp, #4]
 80030f8:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030fa:	695a      	ldr	r2, [r3, #20]
 80030fc:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8003100:	615a      	str	r2, [r3, #20]
 8003102:	695b      	ldr	r3, [r3, #20]
 8003104:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003108:	9302      	str	r3, [sp, #8]
 800310a:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800310c:	f44f 6ec0 	mov.w	lr, #1536	@ 0x600
 8003110:	2302      	movs	r3, #2
 8003112:	e9cd e307 	strd	lr, r3, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003116:	2203      	movs	r2, #3
 8003118:	2307      	movs	r3, #7
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800311a:	a907      	add	r1, sp, #28
 800311c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003120:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003124:	f000 fafa 	bl	800371c <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8003128:	4b3a      	ldr	r3, [pc, #232]	@ (8003214 <HAL_UART_MspInit+0x148>)
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 800312a:	6023      	str	r3, [r4, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800312c:	2300      	movs	r3, #0
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800312e:	2280      	movs	r2, #128	@ 0x80
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003130:	e9c4 3301 	strd	r3, r3, [r4, #4]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003134:	e9c4 2303 	strd	r2, r3, [r4, #12]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8003138:	2220      	movs	r2, #32
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800313a:	6163      	str	r3, [r4, #20]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 800313c:	61a2      	str	r2, [r4, #24]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 800313e:	61e3      	str	r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8003140:	4620      	mov	r0, r4
 8003142:	f000 fa27 	bl	8003594 <HAL_DMA_Init>
 8003146:	b108      	cbz	r0, 800314c <HAL_UART_MspInit+0x80>
    {
      Error_Handler();
 8003148:	f7ff fb5d 	bl	8002806 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 800314c:	676c      	str	r4, [r5, #116]	@ 0x74
 800314e:	6265      	str	r5, [r4, #36]	@ 0x24
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8003150:	b00d      	add	sp, #52	@ 0x34
 8003152:	bd30      	pop	{r4, r5, pc}
  else if(huart->Instance==USART2)
 8003154:	4a30      	ldr	r2, [pc, #192]	@ (8003218 <HAL_UART_MspInit+0x14c>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d123      	bne.n	80031a2 <HAL_UART_MspInit+0xd6>
    __HAL_RCC_USART2_CLK_ENABLE();
 800315a:	4b2c      	ldr	r3, [pc, #176]	@ (800320c <HAL_UART_MspInit+0x140>)
 800315c:	69da      	ldr	r2, [r3, #28]
 800315e:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8003162:	61da      	str	r2, [r3, #28]
 8003164:	69da      	ldr	r2, [r3, #28]
 8003166:	f402 3200 	and.w	r2, r2, #131072	@ 0x20000
 800316a:	9203      	str	r2, [sp, #12]
 800316c:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800316e:	695a      	ldr	r2, [r3, #20]
 8003170:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8003174:	615a      	str	r2, [r3, #20]
 8003176:	695b      	ldr	r3, [r3, #20]
 8003178:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800317c:	9304      	str	r3, [sp, #16]
 800317e:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003180:	240c      	movs	r4, #12
 8003182:	2302      	movs	r3, #2
 8003184:	e9cd 4307 	strd	r4, r3, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003188:	f04f 0c03 	mov.w	ip, #3
 800318c:	2307      	movs	r3, #7
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800318e:	a907      	add	r1, sp, #28
 8003190:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003194:	e9cd c30a 	strd	ip, r3, [sp, #40]	@ 0x28
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8003198:	4c20      	ldr	r4, [pc, #128]	@ (800321c <HAL_UART_MspInit+0x150>)
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800319a:	f000 fabf 	bl	800371c <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel6;
 800319e:	4b20      	ldr	r3, [pc, #128]	@ (8003220 <HAL_UART_MspInit+0x154>)
 80031a0:	e7c3      	b.n	800312a <HAL_UART_MspInit+0x5e>
  else if(huart->Instance==USART3)
 80031a2:	4a20      	ldr	r2, [pc, #128]	@ (8003224 <HAL_UART_MspInit+0x158>)
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d1d3      	bne.n	8003150 <HAL_UART_MspInit+0x84>
    __HAL_RCC_USART3_CLK_ENABLE();
 80031a8:	4b18      	ldr	r3, [pc, #96]	@ (800320c <HAL_UART_MspInit+0x140>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031aa:	481f      	ldr	r0, [pc, #124]	@ (8003228 <HAL_UART_MspInit+0x15c>)
    __HAL_RCC_USART3_CLK_ENABLE();
 80031ac:	69da      	ldr	r2, [r3, #28]
    hdma_usart3_rx.Instance = DMA1_Channel3;
 80031ae:	4c1f      	ldr	r4, [pc, #124]	@ (800322c <HAL_UART_MspInit+0x160>)
    __HAL_RCC_USART3_CLK_ENABLE();
 80031b0:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 80031b4:	61da      	str	r2, [r3, #28]
 80031b6:	69da      	ldr	r2, [r3, #28]
 80031b8:	f402 2280 	and.w	r2, r2, #262144	@ 0x40000
 80031bc:	9205      	str	r2, [sp, #20]
 80031be:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80031c0:	695a      	ldr	r2, [r3, #20]
 80031c2:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 80031c6:	615a      	str	r2, [r3, #20]
 80031c8:	695b      	ldr	r3, [r3, #20]
 80031ca:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80031ce:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031d0:	f44f 6240 	mov.w	r2, #3072	@ 0xc00
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80031d4:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031d6:	2302      	movs	r3, #2
 80031d8:	e9cd 2307 	strd	r2, r3, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80031dc:	2103      	movs	r1, #3
 80031de:	2307      	movs	r3, #7
 80031e0:	e9cd 130a 	strd	r1, r3, [sp, #40]	@ 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031e4:	a907      	add	r1, sp, #28
 80031e6:	f000 fa99 	bl	800371c <HAL_GPIO_Init>
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80031ea:	4811      	ldr	r0, [pc, #68]	@ (8003230 <HAL_UART_MspInit+0x164>)
 80031ec:	2300      	movs	r3, #0
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80031ee:	2280      	movs	r2, #128	@ 0x80
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80031f0:	e9c4 0300 	strd	r0, r3, [r4]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80031f4:	e9c4 2303 	strd	r2, r3, [r4, #12]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80031f8:	60a3      	str	r3, [r4, #8]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80031fa:	6163      	str	r3, [r4, #20]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 80031fc:	2320      	movs	r3, #32
 80031fe:	61a3      	str	r3, [r4, #24]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8003200:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003204:	e79b      	b.n	800313e <HAL_UART_MspInit+0x72>
 8003206:	bf00      	nop
 8003208:	40013800 	.word	0x40013800
 800320c:	40021000 	.word	0x40021000
 8003210:	20001038 	.word	0x20001038
 8003214:	40020058 	.word	0x40020058
 8003218:	40004400 	.word	0x40004400
 800321c:	20000ff4 	.word	0x20000ff4
 8003220:	4002006c 	.word	0x4002006c
 8003224:	40004800 	.word	0x40004800
 8003228:	48000400 	.word	0x48000400
 800322c:	20000fb0 	.word	0x20000fb0
 8003230:	40020030 	.word	0x40020030

08003234 <HAL_InitTick>:
  uint32_t              uwPrescalerValue = 0U;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8003234:	4b21      	ldr	r3, [pc, #132]	@ (80032bc <HAL_InitTick+0x88>)
{
 8003236:	b570      	push	{r4, r5, r6, lr}
  __HAL_RCC_TIM2_CLK_ENABLE();
 8003238:	69da      	ldr	r2, [r3, #28]
 800323a:	f042 0201 	orr.w	r2, r2, #1
 800323e:	61da      	str	r2, [r3, #28]
 8003240:	69db      	ldr	r3, [r3, #28]
{
 8003242:	b088      	sub	sp, #32
  __HAL_RCC_TIM2_CLK_ENABLE();
 8003244:	f003 0301 	and.w	r3, r3, #1
 8003248:	9302      	str	r3, [sp, #8]
{
 800324a:	4605      	mov	r5, r0
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800324c:	a901      	add	r1, sp, #4
 800324e:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM2_CLK_ENABLE();
 8003250:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003252:	f000 fe8d 	bl	8003f70 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8003256:	9b06      	ldr	r3, [sp, #24]
 8003258:	bb53      	cbnz	r3, 80032b0 <HAL_InitTick+0x7c>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800325a:	f000 fe59 	bl	8003f10 <HAL_RCC_GetPCLK1Freq>

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 800325e:	4e18      	ldr	r6, [pc, #96]	@ (80032c0 <HAL_InitTick+0x8c>)
 8003260:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8003264:	6033      	str	r3, [r6, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8003266:	f240 33e7 	movw	r3, #999	@ 0x3e7
 800326a:	60f3      	str	r3, [r6, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800326c:	4b15      	ldr	r3, [pc, #84]	@ (80032c4 <HAL_InitTick+0x90>)
 800326e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003272:	3b01      	subs	r3, #1
  htim2.Init.Prescaler = uwPrescalerValue;
 8003274:	6073      	str	r3, [r6, #4]
  htim2.Init.ClockDivision = 0;
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;

  status = HAL_TIM_Base_Init(&htim2);
 8003276:	4630      	mov	r0, r6
  htim2.Init.ClockDivision = 0;
 8003278:	2300      	movs	r3, #0
 800327a:	6133      	str	r3, [r6, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800327c:	60b3      	str	r3, [r6, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800327e:	61b3      	str	r3, [r6, #24]
  status = HAL_TIM_Base_Init(&htim2);
 8003280:	f001 fe90 	bl	8004fa4 <HAL_TIM_Base_Init>
  if (status == HAL_OK)
 8003284:	4604      	mov	r4, r0
 8003286:	b980      	cbnz	r0, 80032aa <HAL_InitTick+0x76>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 8003288:	4630      	mov	r0, r6
 800328a:	f001 fd4d 	bl	8004d28 <HAL_TIM_Base_Start_IT>
    if (status == HAL_OK)
 800328e:	4604      	mov	r4, r0
 8003290:	b958      	cbnz	r0, 80032aa <HAL_InitTick+0x76>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003292:	201c      	movs	r0, #28
 8003294:	f000 f950 	bl	8003538 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003298:	2d0f      	cmp	r5, #15
 800329a:	d80d      	bhi.n	80032b8 <HAL_InitTick+0x84>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 800329c:	4622      	mov	r2, r4
 800329e:	4629      	mov	r1, r5
 80032a0:	201c      	movs	r0, #28
 80032a2:	f000 f917 	bl	80034d4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80032a6:	4b08      	ldr	r3, [pc, #32]	@ (80032c8 <HAL_InitTick+0x94>)
 80032a8:	601d      	str	r5, [r3, #0]
    }
  }

 /* Return function status */
  return status;
}
 80032aa:	4620      	mov	r0, r4
 80032ac:	b008      	add	sp, #32
 80032ae:	bd70      	pop	{r4, r5, r6, pc}
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80032b0:	f000 fe2e 	bl	8003f10 <HAL_RCC_GetPCLK1Freq>
 80032b4:	0040      	lsls	r0, r0, #1
 80032b6:	e7d2      	b.n	800325e <HAL_InitTick+0x2a>
        status = HAL_ERROR;
 80032b8:	2401      	movs	r4, #1
 80032ba:	e7f6      	b.n	80032aa <HAL_InitTick+0x76>
 80032bc:	40021000 	.word	0x40021000
 80032c0:	200013fc 	.word	0x200013fc
 80032c4:	000f4240 	.word	0x000f4240
 80032c8:	20000010 	.word	0x20000010

080032cc <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80032cc:	e7fe      	b.n	80032cc <NMI_Handler>

080032ce <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80032ce:	e7fe      	b.n	80032ce <HardFault_Handler>

080032d0 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80032d0:	e7fe      	b.n	80032d0 <MemManage_Handler>

080032d2 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80032d2:	e7fe      	b.n	80032d2 <BusFault_Handler>

080032d4 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80032d4:	e7fe      	b.n	80032d4 <UsageFault_Handler>

080032d6 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80032d6:	4770      	bx	lr

080032d8 <DMA1_Channel3_IRQHandler>:
void DMA1_Channel3_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80032d8:	4801      	ldr	r0, [pc, #4]	@ (80032e0 <DMA1_Channel3_IRQHandler+0x8>)
 80032da:	f000 b9d7 	b.w	800368c <HAL_DMA_IRQHandler>
 80032de:	bf00      	nop
 80032e0:	20000fb0 	.word	0x20000fb0

080032e4 <DMA1_Channel5_IRQHandler>:
void DMA1_Channel5_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80032e4:	4801      	ldr	r0, [pc, #4]	@ (80032ec <DMA1_Channel5_IRQHandler+0x8>)
 80032e6:	f000 b9d1 	b.w	800368c <HAL_DMA_IRQHandler>
 80032ea:	bf00      	nop
 80032ec:	20001038 	.word	0x20001038

080032f0 <DMA1_Channel6_IRQHandler>:
void DMA1_Channel6_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80032f0:	4801      	ldr	r0, [pc, #4]	@ (80032f8 <DMA1_Channel6_IRQHandler+0x8>)
 80032f2:	f000 b9cb 	b.w	800368c <HAL_DMA_IRQHandler>
 80032f6:	bf00      	nop
 80032f8:	20000ff4 	.word	0x20000ff4

080032fc <TIM2_IRQHandler>:
void TIM2_IRQHandler(void)
{
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80032fc:	4801      	ldr	r0, [pc, #4]	@ (8003304 <TIM2_IRQHandler+0x8>)
 80032fe:	f001 bd4d 	b.w	8004d9c <HAL_TIM_IRQHandler>
 8003302:	bf00      	nop
 8003304:	200013fc 	.word	0x200013fc

08003308 <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 8003308:	2001      	movs	r0, #1
 800330a:	4770      	bx	lr

0800330c <_kill>:

int _kill(int pid, int sig)
{
 800330c:	b508      	push	{r3, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800330e:	f006 f875 	bl	80093fc <__errno>
 8003312:	2316      	movs	r3, #22
 8003314:	6003      	str	r3, [r0, #0]
  return -1;
}
 8003316:	f04f 30ff 	mov.w	r0, #4294967295
 800331a:	bd08      	pop	{r3, pc}

0800331c <_exit>:

void _exit (int status)
{
 800331c:	b508      	push	{r3, lr}
  errno = EINVAL;
 800331e:	f006 f86d 	bl	80093fc <__errno>
 8003322:	2316      	movs	r3, #22
 8003324:	6003      	str	r3, [r0, #0]
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
 8003326:	e7fe      	b.n	8003326 <_exit+0xa>

08003328 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003328:	b570      	push	{r4, r5, r6, lr}
 800332a:	460d      	mov	r5, r1
 800332c:	4614      	mov	r4, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800332e:	460e      	mov	r6, r1
 8003330:	1b73      	subs	r3, r6, r5
 8003332:	429c      	cmp	r4, r3
 8003334:	dc01      	bgt.n	800333a <_read+0x12>
  {
    *ptr++ = __io_getchar();
  }

  return len;
}
 8003336:	4620      	mov	r0, r4
 8003338:	bd70      	pop	{r4, r5, r6, pc}
    *ptr++ = __io_getchar();
 800333a:	f3af 8000 	nop.w
 800333e:	f806 0b01 	strb.w	r0, [r6], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003342:	e7f5      	b.n	8003330 <_read+0x8>

08003344 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003344:	b570      	push	{r4, r5, r6, lr}
 8003346:	460d      	mov	r5, r1
 8003348:	4614      	mov	r4, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800334a:	460e      	mov	r6, r1
 800334c:	1b73      	subs	r3, r6, r5
 800334e:	429c      	cmp	r4, r3
 8003350:	dc01      	bgt.n	8003356 <_write+0x12>
  {
    __io_putchar(*ptr++);
  }
  return len;
}
 8003352:	4620      	mov	r0, r4
 8003354:	bd70      	pop	{r4, r5, r6, pc}
    __io_putchar(*ptr++);
 8003356:	f816 0b01 	ldrb.w	r0, [r6], #1
 800335a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800335e:	e7f5      	b.n	800334c <_write+0x8>

08003360 <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 8003360:	f04f 30ff 	mov.w	r0, #4294967295
 8003364:	4770      	bx	lr

08003366 <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 8003366:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800336a:	604b      	str	r3, [r1, #4]
  return 0;
}
 800336c:	2000      	movs	r0, #0
 800336e:	4770      	bx	lr

08003370 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 8003370:	2001      	movs	r0, #1
 8003372:	4770      	bx	lr

08003374 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 8003374:	2000      	movs	r0, #0
 8003376:	4770      	bx	lr

08003378 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003378:	4a0b      	ldr	r2, [pc, #44]	@ (80033a8 <_sbrk+0x30>)
 800337a:	6811      	ldr	r1, [r2, #0]
{
 800337c:	b510      	push	{r4, lr}
 800337e:	4603      	mov	r3, r0
  if (NULL == __sbrk_heap_end)
 8003380:	b909      	cbnz	r1, 8003386 <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 8003382:	490a      	ldr	r1, [pc, #40]	@ (80033ac <_sbrk+0x34>)
 8003384:	6011      	str	r1, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003386:	6810      	ldr	r0, [r2, #0]
 8003388:	4909      	ldr	r1, [pc, #36]	@ (80033b0 <_sbrk+0x38>)
 800338a:	4c0a      	ldr	r4, [pc, #40]	@ (80033b4 <_sbrk+0x3c>)
 800338c:	4403      	add	r3, r0
 800338e:	1b09      	subs	r1, r1, r4
 8003390:	428b      	cmp	r3, r1
 8003392:	d906      	bls.n	80033a2 <_sbrk+0x2a>
  {
    errno = ENOMEM;
 8003394:	f006 f832 	bl	80093fc <__errno>
 8003398:	230c      	movs	r3, #12
 800339a:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 800339c:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 80033a0:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 80033a2:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 80033a4:	e7fc      	b.n	80033a0 <_sbrk+0x28>
 80033a6:	bf00      	nop
 80033a8:	2000144c 	.word	0x2000144c
 80033ac:	20004c30 	.word	0x20004c30
 80033b0:	2000a000 	.word	0x2000a000
 80033b4:	00000400 	.word	0x00000400

080033b8 <uart_transmit_string>:
#include "system_management.h"
#include "string.h"

void uart_transmit_string(UART_HandleTypeDef *huart, uint8_t *string) {
 80033b8:	b570      	push	{r4, r5, r6, lr}
 80033ba:	4605      	mov	r5, r0
    HAL_UART_Transmit(huart, string, strlen((char *)string), 1000);
 80033bc:	4608      	mov	r0, r1
void uart_transmit_string(UART_HandleTypeDef *huart, uint8_t *string) {
 80033be:	460c      	mov	r4, r1
    HAL_UART_Transmit(huart, string, strlen((char *)string), 1000);
 80033c0:	f7fc ff66 	bl	8000290 <strlen>
 80033c4:	4621      	mov	r1, r4
 80033c6:	b282      	uxth	r2, r0
 80033c8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80033cc:	4628      	mov	r0, r5
 80033ce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UART_Transmit(huart, string, strlen((char *)string), 1000);
 80033d2:	f002 b8af 	b.w	8005534 <HAL_UART_Transmit>
	...

080033d8 <SystemInit>:
  */
void SystemInit(void)
{
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80033d8:	4a03      	ldr	r2, [pc, #12]	@ (80033e8 <SystemInit+0x10>)
 80033da:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 80033de:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80033e2:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80033e6:	4770      	bx	lr
 80033e8:	e000ed00 	.word	0xe000ed00

080033ec <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80033ec:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003424 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80033f0:	f7ff fff2 	bl	80033d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80033f4:	480c      	ldr	r0, [pc, #48]	@ (8003428 <LoopForever+0x6>)
  ldr r1, =_edata
 80033f6:	490d      	ldr	r1, [pc, #52]	@ (800342c <LoopForever+0xa>)
  ldr r2, =_sidata
 80033f8:	4a0d      	ldr	r2, [pc, #52]	@ (8003430 <LoopForever+0xe>)
  movs r3, #0
 80033fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80033fc:	e002      	b.n	8003404 <LoopCopyDataInit>

080033fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80033fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003400:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003402:	3304      	adds	r3, #4

08003404 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003404:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003406:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003408:	d3f9      	bcc.n	80033fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800340a:	4a0a      	ldr	r2, [pc, #40]	@ (8003434 <LoopForever+0x12>)
  ldr r4, =_ebss
 800340c:	4c0a      	ldr	r4, [pc, #40]	@ (8003438 <LoopForever+0x16>)
  movs r3, #0
 800340e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003410:	e001      	b.n	8003416 <LoopFillZerobss>

08003412 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003412:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003414:	3204      	adds	r2, #4

08003416 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003416:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003418:	d3fb      	bcc.n	8003412 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800341a:	f005 fff5 	bl	8009408 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800341e:	f7ff f88d 	bl	800253c <main>

08003422 <LoopForever>:

LoopForever:
    b LoopForever
 8003422:	e7fe      	b.n	8003422 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003424:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8003428:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800342c:	20000240 	.word	0x20000240
  ldr r2, =_sidata
 8003430:	0800d964 	.word	0x0800d964
  ldr r2, =_sbss
 8003434:	20000240 	.word	0x20000240
  ldr r4, =_ebss
 8003438:	20004c2c 	.word	0x20004c2c

0800343c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800343c:	e7fe      	b.n	800343c <ADC1_2_IRQHandler>
	...

08003440 <HAL_Init>:
  */
HAL_StatusTypeDef HAL_Init(void)
{
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003440:	4a07      	ldr	r2, [pc, #28]	@ (8003460 <HAL_Init+0x20>)
{
 8003442:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003444:	6813      	ldr	r3, [r2, #0]
 8003446:	f043 0310 	orr.w	r3, r3, #16
 800344a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800344c:	2003      	movs	r0, #3
 800344e:	f000 f82f 	bl	80034b0 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003452:	200f      	movs	r0, #15
 8003454:	f7ff feee 	bl	8003234 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003458:	f7ff fdd4 	bl	8003004 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 800345c:	2000      	movs	r0, #0
 800345e:	bd08      	pop	{r3, pc}
 8003460:	40022000 	.word	0x40022000

08003464 <HAL_IncTick>:
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8003464:	4a03      	ldr	r2, [pc, #12]	@ (8003474 <HAL_IncTick+0x10>)
 8003466:	4b04      	ldr	r3, [pc, #16]	@ (8003478 <HAL_IncTick+0x14>)
 8003468:	6811      	ldr	r1, [r2, #0]
 800346a:	781b      	ldrb	r3, [r3, #0]
 800346c:	440b      	add	r3, r1
 800346e:	6013      	str	r3, [r2, #0]
}
 8003470:	4770      	bx	lr
 8003472:	bf00      	nop
 8003474:	20001450 	.word	0x20001450
 8003478:	2000000c 	.word	0x2000000c

0800347c <HAL_GetTick>:
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;  
 800347c:	4b01      	ldr	r3, [pc, #4]	@ (8003484 <HAL_GetTick+0x8>)
 800347e:	6818      	ldr	r0, [r3, #0]
}
 8003480:	4770      	bx	lr
 8003482:	bf00      	nop
 8003484:	20001450 	.word	0x20001450

08003488 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003488:	b538      	push	{r3, r4, r5, lr}
 800348a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800348c:	f7ff fff6 	bl	800347c <HAL_GetTick>
  uint32_t wait = Delay;
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003490:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8003492:	bf1c      	itt	ne
 8003494:	4b05      	ldrne	r3, [pc, #20]	@ (80034ac <HAL_Delay+0x24>)
 8003496:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8003498:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 800349a:	bf18      	it	ne
 800349c:	18e4      	addne	r4, r4, r3
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800349e:	f7ff ffed 	bl	800347c <HAL_GetTick>
 80034a2:	1b43      	subs	r3, r0, r5
 80034a4:	42a3      	cmp	r3, r4
 80034a6:	d3fa      	bcc.n	800349e <HAL_Delay+0x16>
  {
  }
}
 80034a8:	bd38      	pop	{r3, r4, r5, pc}
 80034aa:	bf00      	nop
 80034ac:	2000000c 	.word	0x2000000c

080034b0 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80034b0:	4907      	ldr	r1, [pc, #28]	@ (80034d0 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80034b2:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80034b4:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80034b8:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80034ba:	0412      	lsls	r2, r2, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80034bc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80034c0:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80034c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80034c4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80034c8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 80034cc:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80034ce:	4770      	bx	lr
 80034d0:	e000ed00 	.word	0xe000ed00

080034d4 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80034d4:	4b16      	ldr	r3, [pc, #88]	@ (8003530 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80034d6:	b530      	push	{r4, r5, lr}
 80034d8:	68dc      	ldr	r4, [r3, #12]
 80034da:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80034de:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80034e2:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80034e4:	2b04      	cmp	r3, #4
 80034e6:	bf28      	it	cs
 80034e8:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80034ea:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034ec:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80034f0:	bf8c      	ite	hi
 80034f2:	3c03      	subhi	r4, #3
 80034f4:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034f6:	fa05 f303 	lsl.w	r3, r5, r3
 80034fa:	ea21 0303 	bic.w	r3, r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80034fe:	40a5      	lsls	r5, r4
 8003500:	ea22 0205 	bic.w	r2, r2, r5
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003504:	40a3      	lsls	r3, r4
  if ((int32_t)(IRQn) >= 0)
 8003506:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003508:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800350c:	bfac      	ite	ge
 800350e:	f100 4060 	addge.w	r0, r0, #3758096384	@ 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003512:	4a08      	ldrlt	r2, [pc, #32]	@ (8003534 <HAL_NVIC_SetPriority+0x60>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003514:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003518:	bfb8      	it	lt
 800351a:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800351e:	b2db      	uxtb	r3, r3
 8003520:	bfaa      	itet	ge
 8003522:	f500 4061 	addge.w	r0, r0, #57600	@ 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003526:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003528:	f880 3300 	strbge.w	r3, [r0, #768]	@ 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800352c:	bd30      	pop	{r4, r5, pc}
 800352e:	bf00      	nop
 8003530:	e000ed00 	.word	0xe000ed00
 8003534:	e000ed14 	.word	0xe000ed14

08003538 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8003538:	2800      	cmp	r0, #0
 800353a:	db07      	blt.n	800354c <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800353c:	0941      	lsrs	r1, r0, #5
 800353e:	4a04      	ldr	r2, [pc, #16]	@ (8003550 <HAL_NVIC_EnableIRQ+0x18>)
 8003540:	f000 001f 	and.w	r0, r0, #31
 8003544:	2301      	movs	r3, #1
 8003546:	4083      	lsls	r3, r0
 8003548:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800354c:	4770      	bx	lr
 800354e:	bf00      	nop
 8003550:	e000e100 	.word	0xe000e100

08003554 <DMA_CalcBaseAndBitshift>:
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003554:	6802      	ldr	r2, [r0, #0]
 8003556:	4b0a      	ldr	r3, [pc, #40]	@ (8003580 <DMA_CalcBaseAndBitshift+0x2c>)
 8003558:	429a      	cmp	r2, r3
 800355a:	f04f 0114 	mov.w	r1, #20
 800355e:	d808      	bhi.n	8003572 <DMA_CalcBaseAndBitshift+0x1e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003560:	4b08      	ldr	r3, [pc, #32]	@ (8003584 <DMA_CalcBaseAndBitshift+0x30>)
 8003562:	4413      	add	r3, r2
 8003564:	4a08      	ldr	r2, [pc, #32]	@ (8003588 <DMA_CalcBaseAndBitshift+0x34>)
 8003566:	fbb3 f3f1 	udiv	r3, r3, r1
 800356a:	009b      	lsls	r3, r3, #2
    hdma->DmaBaseAddress = DMA1;
 800356c:	e9c0 230f 	strd	r2, r3, [r0, #60]	@ 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 8003570:	4770      	bx	lr
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003572:	4b06      	ldr	r3, [pc, #24]	@ (800358c <DMA_CalcBaseAndBitshift+0x38>)
 8003574:	4413      	add	r3, r2
 8003576:	4a06      	ldr	r2, [pc, #24]	@ (8003590 <DMA_CalcBaseAndBitshift+0x3c>)
 8003578:	fbb3 f3f1 	udiv	r3, r3, r1
 800357c:	009b      	lsls	r3, r3, #2
    hdma->DmaBaseAddress = DMA2;
 800357e:	e7f5      	b.n	800356c <DMA_CalcBaseAndBitshift+0x18>
 8003580:	40020407 	.word	0x40020407
 8003584:	bffdfff8 	.word	0xbffdfff8
 8003588:	40020000 	.word	0x40020000
 800358c:	bffdfbf8 	.word	0xbffdfbf8
 8003590:	40020400 	.word	0x40020400

08003594 <HAL_DMA_Init>:
{
 8003594:	b538      	push	{r3, r4, r5, lr}
  if(NULL == hdma)
 8003596:	4604      	mov	r4, r0
 8003598:	b1e0      	cbz	r0, 80035d4 <HAL_DMA_Init+0x40>
  tmp |=  hdma->Init.Direction        |
 800359a:	e9d0 3501 	ldrd	r3, r5, [r0, #4]
 800359e:	432b      	orrs	r3, r5
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80035a0:	68c5      	ldr	r5, [r0, #12]
  tmp = hdma->Instance->CCR;
 80035a2:	6801      	ldr	r1, [r0, #0]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80035a4:	432b      	orrs	r3, r5
 80035a6:	6905      	ldr	r5, [r0, #16]
  tmp = hdma->Instance->CCR;
 80035a8:	680a      	ldr	r2, [r1, #0]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80035aa:	432b      	orrs	r3, r5
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80035ac:	6945      	ldr	r5, [r0, #20]
 80035ae:	432b      	orrs	r3, r5
 80035b0:	6985      	ldr	r5, [r0, #24]
 80035b2:	432b      	orrs	r3, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 80035b4:	69c5      	ldr	r5, [r0, #28]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80035b6:	f422 527f 	bic.w	r2, r2, #16320	@ 0x3fc0
 80035ba:	f022 0230 	bic.w	r2, r2, #48	@ 0x30
          hdma->Init.Mode                | hdma->Init.Priority;
 80035be:	432b      	orrs	r3, r5
  tmp |=  hdma->Init.Direction        |
 80035c0:	4313      	orrs	r3, r2
  hdma->Instance->CCR = tmp;
 80035c2:	600b      	str	r3, [r1, #0]
  DMA_CalcBaseAndBitshift(hdma);
 80035c4:	f7ff ffc6 	bl	8003554 <DMA_CalcBaseAndBitshift>
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80035c8:	2000      	movs	r0, #0
  hdma->Lock = HAL_UNLOCKED;
 80035ca:	f44f 7380 	mov.w	r3, #256	@ 0x100
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80035ce:	63a0      	str	r0, [r4, #56]	@ 0x38
  hdma->Lock = HAL_UNLOCKED;
 80035d0:	8423      	strh	r3, [r4, #32]
}
 80035d2:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80035d4:	2001      	movs	r0, #1
 80035d6:	e7fc      	b.n	80035d2 <HAL_DMA_Init+0x3e>

080035d8 <HAL_DMA_Start_IT>:
{
 80035d8:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hdma);
 80035da:	f890 4020 	ldrb.w	r4, [r0, #32]
 80035de:	2c01      	cmp	r4, #1
 80035e0:	d033      	beq.n	800364a <HAL_DMA_Start_IT+0x72>
  if(HAL_DMA_STATE_READY == hdma->State)
 80035e2:	f890 5021 	ldrb.w	r5, [r0, #33]	@ 0x21
  __HAL_LOCK(hdma);
 80035e6:	2401      	movs	r4, #1
  if(HAL_DMA_STATE_READY == hdma->State)
 80035e8:	42a5      	cmp	r5, r4
  __HAL_LOCK(hdma);
 80035ea:	f880 4020 	strb.w	r4, [r0, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 80035ee:	f04f 0400 	mov.w	r4, #0
 80035f2:	d128      	bne.n	8003646 <HAL_DMA_Start_IT+0x6e>
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80035f4:	6384      	str	r4, [r0, #56]	@ 0x38
    hdma->State = HAL_DMA_STATE_BUSY;
 80035f6:	2602      	movs	r6, #2
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80035f8:	6804      	ldr	r4, [r0, #0]
    hdma->State = HAL_DMA_STATE_BUSY;
 80035fa:	f880 6021 	strb.w	r6, [r0, #33]	@ 0x21
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80035fe:	6826      	ldr	r6, [r4, #0]
 8003600:	f026 0601 	bic.w	r6, r6, #1
 8003604:	6026      	str	r6, [r4, #0]
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8003606:	e9d0 670f 	ldrd	r6, r7, [r0, #60]	@ 0x3c
 800360a:	40bd      	lsls	r5, r7
 800360c:	6075      	str	r5, [r6, #4]
  hdma->Instance->CNDTR = DataLength;
 800360e:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003610:	6843      	ldr	r3, [r0, #4]
 8003612:	2b10      	cmp	r3, #16
    if(NULL != hdma->XferHalfCpltCallback )
 8003614:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
    hdma->Instance->CPAR = DstAddress;
 8003616:	bf0b      	itete	eq
 8003618:	60a2      	streq	r2, [r4, #8]
    hdma->Instance->CPAR = SrcAddress;
 800361a:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 800361c:	60e1      	streq	r1, [r4, #12]
    hdma->Instance->CMAR = DstAddress;
 800361e:	60e2      	strne	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback )
 8003620:	b14b      	cbz	r3, 8003636 <HAL_DMA_Start_IT+0x5e>
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003622:	6823      	ldr	r3, [r4, #0]
 8003624:	f043 030e 	orr.w	r3, r3, #14
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8003628:	6023      	str	r3, [r4, #0]
    hdma->Instance->CCR |= DMA_CCR_EN;
 800362a:	6823      	ldr	r3, [r4, #0]
 800362c:	f043 0301 	orr.w	r3, r3, #1
 8003630:	6023      	str	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003632:	2000      	movs	r0, #0
}
 8003634:	bdf0      	pop	{r4, r5, r6, r7, pc}
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8003636:	6823      	ldr	r3, [r4, #0]
 8003638:	f043 030a 	orr.w	r3, r3, #10
 800363c:	6023      	str	r3, [r4, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 800363e:	6823      	ldr	r3, [r4, #0]
 8003640:	f023 0304 	bic.w	r3, r3, #4
 8003644:	e7f0      	b.n	8003628 <HAL_DMA_Start_IT+0x50>
    __HAL_UNLOCK(hdma);
 8003646:	f880 4020 	strb.w	r4, [r0, #32]
  __HAL_LOCK(hdma);
 800364a:	2002      	movs	r0, #2
 800364c:	e7f2      	b.n	8003634 <HAL_DMA_Start_IT+0x5c>

0800364e <HAL_DMA_Abort>:
  if(NULL == hdma)
 800364e:	b140      	cbz	r0, 8003662 <HAL_DMA_Abort+0x14>
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003650:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 8003654:	2b02      	cmp	r3, #2
 8003656:	d006      	beq.n	8003666 <HAL_DMA_Abort+0x18>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003658:	2304      	movs	r3, #4
 800365a:	6383      	str	r3, [r0, #56]	@ 0x38
    __HAL_UNLOCK(hdma);
 800365c:	2300      	movs	r3, #0
 800365e:	f880 3020 	strb.w	r3, [r0, #32]
    return HAL_ERROR;
 8003662:	2001      	movs	r0, #1
 8003664:	4770      	bx	lr
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003666:	6803      	ldr	r3, [r0, #0]
 8003668:	681a      	ldr	r2, [r3, #0]
 800366a:	f022 020e 	bic.w	r2, r2, #14
 800366e:	601a      	str	r2, [r3, #0]
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003670:	681a      	ldr	r2, [r3, #0]
 8003672:	f022 0201 	bic.w	r2, r2, #1
 8003676:	601a      	str	r2, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8003678:	e9d0 210f 	ldrd	r2, r1, [r0, #60]	@ 0x3c
 800367c:	2301      	movs	r3, #1
 800367e:	408b      	lsls	r3, r1
 8003680:	6053      	str	r3, [r2, #4]
  __HAL_UNLOCK(hdma);
 8003682:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003686:	8403      	strh	r3, [r0, #32]
  return HAL_OK;
 8003688:	2000      	movs	r0, #0
}
 800368a:	4770      	bx	lr

0800368c <HAL_DMA_IRQHandler>:
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800368c:	6bc1      	ldr	r1, [r0, #60]	@ 0x3c
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 800368e:	6c02      	ldr	r2, [r0, #64]	@ 0x40
  uint32_t source_it = hdma->Instance->CCR;
 8003690:	6803      	ldr	r3, [r0, #0]
{
 8003692:	b470      	push	{r4, r5, r6}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003694:	680e      	ldr	r6, [r1, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8003696:	681d      	ldr	r5, [r3, #0]
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8003698:	2404      	movs	r4, #4
 800369a:	4094      	lsls	r4, r2
 800369c:	4234      	tst	r4, r6
 800369e:	d00e      	beq.n	80036be <HAL_DMA_IRQHandler+0x32>
 80036a0:	f015 0f04 	tst.w	r5, #4
 80036a4:	d00b      	beq.n	80036be <HAL_DMA_IRQHandler+0x32>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80036a6:	681a      	ldr	r2, [r3, #0]
 80036a8:	0692      	lsls	r2, r2, #26
      hdma->Instance->CCR &= ~DMA_IT_HT;
 80036aa:	bf5e      	ittt	pl
 80036ac:	681a      	ldrpl	r2, [r3, #0]
 80036ae:	f022 0204 	bicpl.w	r2, r2, #4
 80036b2:	601a      	strpl	r2, [r3, #0]
    if(hdma->XferHalfCpltCallback != NULL)
 80036b4:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 80036b6:	604c      	str	r4, [r1, #4]
    if(hdma->XferErrorCallback != NULL)
 80036b8:	b363      	cbz	r3, 8003714 <HAL_DMA_IRQHandler+0x88>
}
 80036ba:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 80036bc:	4718      	bx	r3
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 80036be:	2402      	movs	r4, #2
 80036c0:	4094      	lsls	r4, r2
 80036c2:	4234      	tst	r4, r6
 80036c4:	d012      	beq.n	80036ec <HAL_DMA_IRQHandler+0x60>
 80036c6:	f015 0f02 	tst.w	r5, #2
 80036ca:	d00f      	beq.n	80036ec <HAL_DMA_IRQHandler+0x60>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80036cc:	681a      	ldr	r2, [r3, #0]
 80036ce:	0695      	lsls	r5, r2, #26
 80036d0:	d406      	bmi.n	80036e0 <HAL_DMA_IRQHandler+0x54>
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80036d2:	681a      	ldr	r2, [r3, #0]
 80036d4:	f022 020a 	bic.w	r2, r2, #10
 80036d8:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 80036da:	2301      	movs	r3, #1
 80036dc:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
    __HAL_UNLOCK(hdma);
 80036e0:	2300      	movs	r3, #0
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 80036e2:	604c      	str	r4, [r1, #4]
    __HAL_UNLOCK(hdma);
 80036e4:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 80036e8:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 80036ea:	e7e5      	b.n	80036b8 <HAL_DMA_IRQHandler+0x2c>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80036ec:	2408      	movs	r4, #8
 80036ee:	4094      	lsls	r4, r2
 80036f0:	4234      	tst	r4, r6
 80036f2:	d00f      	beq.n	8003714 <HAL_DMA_IRQHandler+0x88>
 80036f4:	072c      	lsls	r4, r5, #28
 80036f6:	d50d      	bpl.n	8003714 <HAL_DMA_IRQHandler+0x88>
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80036f8:	681c      	ldr	r4, [r3, #0]
 80036fa:	f024 040e 	bic.w	r4, r4, #14
 80036fe:	601c      	str	r4, [r3, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8003700:	2301      	movs	r3, #1
 8003702:	fa03 f202 	lsl.w	r2, r3, r2
 8003706:	604a      	str	r2, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003708:	6383      	str	r3, [r0, #56]	@ 0x38
    __HAL_UNLOCK(hdma);
 800370a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800370e:	8403      	strh	r3, [r0, #32]
    if(hdma->XferErrorCallback != NULL)
 8003710:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8003712:	e7d1      	b.n	80036b8 <HAL_DMA_IRQHandler+0x2c>
}
 8003714:	bc70      	pop	{r4, r5, r6}
 8003716:	4770      	bx	lr

08003718 <HAL_DMA_GetError>:
  return hdma->ErrorCode;
 8003718:	6b80      	ldr	r0, [r0, #56]	@ 0x38
}
 800371a:	4770      	bx	lr

0800371c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800371c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003720:	f8df 917c 	ldr.w	r9, [pc, #380]	@ 80038a0 <HAL_GPIO_Init+0x184>
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003724:	4c5c      	ldr	r4, [pc, #368]	@ (8003898 <HAL_GPIO_Init+0x17c>)
  uint32_t position = 0x00u;
 8003726:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003728:	680a      	ldr	r2, [r1, #0]
 800372a:	fa32 f503 	lsrs.w	r5, r2, r3
 800372e:	d102      	bne.n	8003736 <HAL_GPIO_Init+0x1a>
      }
    }

    position++;
  }
}
 8003730:	b003      	add	sp, #12
 8003732:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003736:	2501      	movs	r5, #1
 8003738:	fa05 f803 	lsl.w	r8, r5, r3
    if (iocurrent != 0x00u)
 800373c:	ea18 0202 	ands.w	r2, r8, r2
 8003740:	f000 80a0 	beq.w	8003884 <HAL_GPIO_Init+0x168>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003744:	684e      	ldr	r6, [r1, #4]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003746:	2703      	movs	r7, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003748:	f006 0503 	and.w	r5, r6, #3
 800374c:	ea4f 0e43 	mov.w	lr, r3, lsl #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003750:	fa07 fc0e 	lsl.w	ip, r7, lr
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003754:	1e6f      	subs	r7, r5, #1
 8003756:	2f01      	cmp	r7, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003758:	ea6f 0c0c 	mvn.w	ip, ip
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800375c:	d834      	bhi.n	80037c8 <HAL_GPIO_Init+0xac>
        temp = GPIOx->OSPEEDR;
 800375e:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003760:	ea07 0a0c 	and.w	sl, r7, ip
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003764:	68cf      	ldr	r7, [r1, #12]
 8003766:	fa07 f70e 	lsl.w	r7, r7, lr
 800376a:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
 800376e:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8003770:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003772:	ea27 0808 	bic.w	r8, r7, r8
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003776:	f3c6 1700 	ubfx	r7, r6, #4, #1
 800377a:	409f      	lsls	r7, r3
 800377c:	ea47 0708 	orr.w	r7, r7, r8
        GPIOx->OTYPER = temp;
 8003780:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 8003782:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003784:	ea07 080c 	and.w	r8, r7, ip
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003788:	688f      	ldr	r7, [r1, #8]
 800378a:	fa07 f70e 	lsl.w	r7, r7, lr
 800378e:	ea47 0708 	orr.w	r7, r7, r8
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003792:	2d02      	cmp	r5, #2
        GPIOx->PUPDR = temp;
 8003794:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003796:	d119      	bne.n	80037cc <HAL_GPIO_Init+0xb0>
        temp = GPIOx->AFR[position >> 3u];
 8003798:	ea4f 08d3 	mov.w	r8, r3, lsr #3
 800379c:	eb00 0888 	add.w	r8, r0, r8, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80037a0:	f003 0a07 	and.w	sl, r3, #7
        temp = GPIOx->AFR[position >> 3u];
 80037a4:	f8d8 7020 	ldr.w	r7, [r8, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80037a8:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 80037ac:	f04f 0b0f 	mov.w	fp, #15
 80037b0:	fa0b fb0a 	lsl.w	fp, fp, sl
 80037b4:	ea27 0b0b 	bic.w	fp, r7, fp
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80037b8:	690f      	ldr	r7, [r1, #16]
 80037ba:	fa07 f70a 	lsl.w	r7, r7, sl
 80037be:	ea47 070b 	orr.w	r7, r7, fp
        GPIOx->AFR[position >> 3u] = temp;
 80037c2:	f8c8 7020 	str.w	r7, [r8, #32]
 80037c6:	e001      	b.n	80037cc <HAL_GPIO_Init+0xb0>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80037c8:	2d03      	cmp	r5, #3
 80037ca:	d1da      	bne.n	8003782 <HAL_GPIO_Init+0x66>
      temp = GPIOx->MODER;
 80037cc:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80037ce:	fa05 f50e 	lsl.w	r5, r5, lr
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80037d2:	ea07 070c 	and.w	r7, r7, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80037d6:	433d      	orrs	r5, r7
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80037d8:	f416 3f40 	tst.w	r6, #196608	@ 0x30000
      GPIOx->MODER = temp;
 80037dc:	6005      	str	r5, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80037de:	d051      	beq.n	8003884 <HAL_GPIO_Init+0x168>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80037e0:	f8d9 5018 	ldr.w	r5, [r9, #24]
 80037e4:	f045 0501 	orr.w	r5, r5, #1
 80037e8:	f8c9 5018 	str.w	r5, [r9, #24]
 80037ec:	f8d9 5018 	ldr.w	r5, [r9, #24]
 80037f0:	f023 0703 	bic.w	r7, r3, #3
 80037f4:	f107 4780 	add.w	r7, r7, #1073741824	@ 0x40000000
 80037f8:	f005 0501 	and.w	r5, r5, #1
 80037fc:	f507 3780 	add.w	r7, r7, #65536	@ 0x10000
 8003800:	9501      	str	r5, [sp, #4]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003802:	f003 0c03 	and.w	ip, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003806:	9d01      	ldr	r5, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2u];
 8003808:	68bd      	ldr	r5, [r7, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800380a:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 800380e:	f04f 0e0f 	mov.w	lr, #15
 8003812:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003816:	f1b0 4f90 	cmp.w	r0, #1207959552	@ 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800381a:	ea25 0e0e 	bic.w	lr, r5, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800381e:	d033      	beq.n	8003888 <HAL_GPIO_Init+0x16c>
 8003820:	4d1e      	ldr	r5, [pc, #120]	@ (800389c <HAL_GPIO_Init+0x180>)
 8003822:	42a8      	cmp	r0, r5
 8003824:	d032      	beq.n	800388c <HAL_GPIO_Init+0x170>
 8003826:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 800382a:	42a8      	cmp	r0, r5
 800382c:	d030      	beq.n	8003890 <HAL_GPIO_Init+0x174>
 800382e:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8003832:	42a8      	cmp	r0, r5
 8003834:	d02e      	beq.n	8003894 <HAL_GPIO_Init+0x178>
 8003836:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 800383a:	42a8      	cmp	r0, r5
 800383c:	bf14      	ite	ne
 800383e:	2505      	movne	r5, #5
 8003840:	2504      	moveq	r5, #4
 8003842:	fa05 f50c 	lsl.w	r5, r5, ip
 8003846:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2u] = temp;
 800384a:	60bd      	str	r5, [r7, #8]
        temp = EXTI->RTSR;
 800384c:	68a5      	ldr	r5, [r4, #8]
        temp &= ~(iocurrent);
 800384e:	43d7      	mvns	r7, r2
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003850:	f416 1f80 	tst.w	r6, #1048576	@ 0x100000
        temp &= ~(iocurrent);
 8003854:	bf0c      	ite	eq
 8003856:	403d      	andeq	r5, r7
          temp |= iocurrent;
 8003858:	4315      	orrne	r5, r2
        EXTI->RTSR = temp;
 800385a:	60a5      	str	r5, [r4, #8]
        temp = EXTI->FTSR;
 800385c:	68e5      	ldr	r5, [r4, #12]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800385e:	f416 1f00 	tst.w	r6, #2097152	@ 0x200000
        temp &= ~(iocurrent);
 8003862:	bf0c      	ite	eq
 8003864:	403d      	andeq	r5, r7
          temp |= iocurrent;
 8003866:	4315      	orrne	r5, r2
        EXTI->FTSR = temp;
 8003868:	60e5      	str	r5, [r4, #12]
        temp = EXTI->EMR;
 800386a:	6865      	ldr	r5, [r4, #4]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800386c:	f416 3f00 	tst.w	r6, #131072	@ 0x20000
        temp &= ~(iocurrent);
 8003870:	bf0c      	ite	eq
 8003872:	403d      	andeq	r5, r7
          temp |= iocurrent;
 8003874:	4315      	orrne	r5, r2
        EXTI->EMR = temp;
 8003876:	6065      	str	r5, [r4, #4]
        temp = EXTI->IMR;
 8003878:	6825      	ldr	r5, [r4, #0]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800387a:	03f6      	lsls	r6, r6, #15
        temp &= ~(iocurrent);
 800387c:	bf54      	ite	pl
 800387e:	403d      	andpl	r5, r7
          temp |= iocurrent;
 8003880:	4315      	orrmi	r5, r2
        EXTI->IMR = temp;
 8003882:	6025      	str	r5, [r4, #0]
    position++;
 8003884:	3301      	adds	r3, #1
 8003886:	e74f      	b.n	8003728 <HAL_GPIO_Init+0xc>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003888:	2500      	movs	r5, #0
 800388a:	e7da      	b.n	8003842 <HAL_GPIO_Init+0x126>
 800388c:	2501      	movs	r5, #1
 800388e:	e7d8      	b.n	8003842 <HAL_GPIO_Init+0x126>
 8003890:	2502      	movs	r5, #2
 8003892:	e7d6      	b.n	8003842 <HAL_GPIO_Init+0x126>
 8003894:	2503      	movs	r5, #3
 8003896:	e7d4      	b.n	8003842 <HAL_GPIO_Init+0x126>
 8003898:	40010400 	.word	0x40010400
 800389c:	48000400 	.word	0x48000400
 80038a0:	40021000 	.word	0x40021000

080038a4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80038a4:	b10a      	cbz	r2, 80038aa <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80038a6:	6181      	str	r1, [r0, #24]
 80038a8:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80038aa:	6281      	str	r1, [r0, #40]	@ 0x28
  }
}
 80038ac:	4770      	bx	lr
	...

080038b0 <HAL_PWR_EnableBkUpAccess>:
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  SET_BIT(PWR->CR, PWR_CR_DBP);  
 80038b0:	4a02      	ldr	r2, [pc, #8]	@ (80038bc <HAL_PWR_EnableBkUpAccess+0xc>)
 80038b2:	6813      	ldr	r3, [r2, #0]
 80038b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80038b8:	6013      	str	r3, [r2, #0]
}
 80038ba:	4770      	bx	lr
 80038bc:	40007000 	.word	0x40007000

080038c0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80038c0:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80038c4:	4605      	mov	r5, r0
 80038c6:	2800      	cmp	r0, #0
 80038c8:	d033      	beq.n	8003932 <HAL_RCC_OscConfig+0x72>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80038ca:	6803      	ldr	r3, [r0, #0]
 80038cc:	07da      	lsls	r2, r3, #31
 80038ce:	d411      	bmi.n	80038f4 <HAL_RCC_OscConfig+0x34>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80038d0:	682b      	ldr	r3, [r5, #0]
 80038d2:	079b      	lsls	r3, r3, #30
 80038d4:	f100 8081 	bmi.w	80039da <HAL_RCC_OscConfig+0x11a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80038d8:	682b      	ldr	r3, [r5, #0]
 80038da:	071c      	lsls	r4, r3, #28
 80038dc:	f100 80eb 	bmi.w	8003ab6 <HAL_RCC_OscConfig+0x1f6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80038e0:	682b      	ldr	r3, [r5, #0]
 80038e2:	0758      	lsls	r0, r3, #29
 80038e4:	f100 8130 	bmi.w	8003b48 <HAL_RCC_OscConfig+0x288>
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80038e8:	69eb      	ldr	r3, [r5, #28]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	f040 81b5 	bne.w	8003c5a <HAL_RCC_OscConfig+0x39a>
        }
      }
    }
  }

  return HAL_OK;
 80038f0:	2000      	movs	r0, #0
 80038f2:	e047      	b.n	8003984 <HAL_RCC_OscConfig+0xc4>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80038f4:	4cb0      	ldr	r4, [pc, #704]	@ (8003bb8 <HAL_RCC_OscConfig+0x2f8>)
 80038f6:	6863      	ldr	r3, [r4, #4]
 80038f8:	f003 030c 	and.w	r3, r3, #12
 80038fc:	2b04      	cmp	r3, #4
 80038fe:	d007      	beq.n	8003910 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003900:	6863      	ldr	r3, [r4, #4]
 8003902:	f003 030c 	and.w	r3, r3, #12
 8003906:	2b08      	cmp	r3, #8
 8003908:	d115      	bne.n	8003936 <HAL_RCC_OscConfig+0x76>
 800390a:	6863      	ldr	r3, [r4, #4]
 800390c:	03df      	lsls	r7, r3, #15
 800390e:	d512      	bpl.n	8003936 <HAL_RCC_OscConfig+0x76>
 8003910:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003914:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003918:	6821      	ldr	r1, [r4, #0]
 800391a:	fa93 f3a3 	rbit	r3, r3
 800391e:	2201      	movs	r2, #1
 8003920:	fab3 f383 	clz	r3, r3
 8003924:	fa02 f303 	lsl.w	r3, r2, r3
 8003928:	420b      	tst	r3, r1
 800392a:	d0d1      	beq.n	80038d0 <HAL_RCC_OscConfig+0x10>
 800392c:	686b      	ldr	r3, [r5, #4]
 800392e:	2b00      	cmp	r3, #0
 8003930:	d1ce      	bne.n	80038d0 <HAL_RCC_OscConfig+0x10>
    return HAL_ERROR;
 8003932:	2001      	movs	r0, #1
 8003934:	e026      	b.n	8003984 <HAL_RCC_OscConfig+0xc4>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003936:	686a      	ldr	r2, [r5, #4]
 8003938:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 800393c:	d125      	bne.n	800398a <HAL_RCC_OscConfig+0xca>
 800393e:	6823      	ldr	r3, [r4, #0]
 8003940:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003944:	6023      	str	r3, [r4, #0]
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003946:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8003948:	68a9      	ldr	r1, [r5, #8]
 800394a:	f023 030f 	bic.w	r3, r3, #15
 800394e:	430b      	orrs	r3, r1
 8003950:	62e3      	str	r3, [r4, #44]	@ 0x2c
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003952:	b352      	cbz	r2, 80039aa <HAL_RCC_OscConfig+0xea>
        tickstart = HAL_GetTick();
 8003954:	f7ff fd92 	bl	800347c <HAL_GetTick>
 8003958:	f44f 3700 	mov.w	r7, #131072	@ 0x20000
 800395c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800395e:	f04f 0801 	mov.w	r8, #1
 8003962:	fa97 f3a7 	rbit	r3, r7
 8003966:	6822      	ldr	r2, [r4, #0]
 8003968:	fa97 f3a7 	rbit	r3, r7
 800396c:	fab3 f383 	clz	r3, r3
 8003970:	fa08 f303 	lsl.w	r3, r8, r3
 8003974:	4213      	tst	r3, r2
 8003976:	d1ab      	bne.n	80038d0 <HAL_RCC_OscConfig+0x10>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003978:	f7ff fd80 	bl	800347c <HAL_GetTick>
 800397c:	1b80      	subs	r0, r0, r6
 800397e:	2864      	cmp	r0, #100	@ 0x64
 8003980:	d9ef      	bls.n	8003962 <HAL_RCC_OscConfig+0xa2>
            return HAL_TIMEOUT;
 8003982:	2003      	movs	r0, #3
}
 8003984:	b002      	add	sp, #8
 8003986:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800398a:	6823      	ldr	r3, [r4, #0]
 800398c:	b932      	cbnz	r2, 800399c <HAL_RCC_OscConfig+0xdc>
 800398e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003992:	6023      	str	r3, [r4, #0]
 8003994:	6823      	ldr	r3, [r4, #0]
 8003996:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800399a:	e7d3      	b.n	8003944 <HAL_RCC_OscConfig+0x84>
 800399c:	f5b2 2fa0 	cmp.w	r2, #327680	@ 0x50000
 80039a0:	d1f5      	bne.n	800398e <HAL_RCC_OscConfig+0xce>
 80039a2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80039a6:	6023      	str	r3, [r4, #0]
 80039a8:	e7c9      	b.n	800393e <HAL_RCC_OscConfig+0x7e>
        tickstart = HAL_GetTick();
 80039aa:	f7ff fd67 	bl	800347c <HAL_GetTick>
 80039ae:	f44f 3700 	mov.w	r7, #131072	@ 0x20000
 80039b2:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039b4:	f04f 0801 	mov.w	r8, #1
 80039b8:	fa97 f3a7 	rbit	r3, r7
 80039bc:	6822      	ldr	r2, [r4, #0]
 80039be:	fa97 f3a7 	rbit	r3, r7
 80039c2:	fab3 f383 	clz	r3, r3
 80039c6:	fa08 f303 	lsl.w	r3, r8, r3
 80039ca:	4213      	tst	r3, r2
 80039cc:	d080      	beq.n	80038d0 <HAL_RCC_OscConfig+0x10>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80039ce:	f7ff fd55 	bl	800347c <HAL_GetTick>
 80039d2:	1b80      	subs	r0, r0, r6
 80039d4:	2864      	cmp	r0, #100	@ 0x64
 80039d6:	d9ef      	bls.n	80039b8 <HAL_RCC_OscConfig+0xf8>
 80039d8:	e7d3      	b.n	8003982 <HAL_RCC_OscConfig+0xc2>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80039da:	4c77      	ldr	r4, [pc, #476]	@ (8003bb8 <HAL_RCC_OscConfig+0x2f8>)
 80039dc:	6863      	ldr	r3, [r4, #4]
 80039de:	f013 0f0c 	tst.w	r3, #12
 80039e2:	d007      	beq.n	80039f4 <HAL_RCC_OscConfig+0x134>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80039e4:	6863      	ldr	r3, [r4, #4]
 80039e6:	f003 030c 	and.w	r3, r3, #12
 80039ea:	2b08      	cmp	r3, #8
 80039ec:	d11f      	bne.n	8003a2e <HAL_RCC_OscConfig+0x16e>
 80039ee:	6863      	ldr	r3, [r4, #4]
 80039f0:	03de      	lsls	r6, r3, #15
 80039f2:	d41c      	bmi.n	8003a2e <HAL_RCC_OscConfig+0x16e>
 80039f4:	2302      	movs	r3, #2
 80039f6:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80039fa:	6821      	ldr	r1, [r4, #0]
 80039fc:	fa93 f3a3 	rbit	r3, r3
 8003a00:	2201      	movs	r2, #1
 8003a02:	fab3 f383 	clz	r3, r3
 8003a06:	fa02 f303 	lsl.w	r3, r2, r3
 8003a0a:	420b      	tst	r3, r1
 8003a0c:	d002      	beq.n	8003a14 <HAL_RCC_OscConfig+0x154>
 8003a0e:	692b      	ldr	r3, [r5, #16]
 8003a10:	4293      	cmp	r3, r2
 8003a12:	d18e      	bne.n	8003932 <HAL_RCC_OscConfig+0x72>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a14:	6821      	ldr	r1, [r4, #0]
 8003a16:	22f8      	movs	r2, #248	@ 0xf8
 8003a18:	fa92 f2a2 	rbit	r2, r2
 8003a1c:	696b      	ldr	r3, [r5, #20]
 8003a1e:	fab2 f282 	clz	r2, r2
 8003a22:	4093      	lsls	r3, r2
 8003a24:	f021 02f8 	bic.w	r2, r1, #248	@ 0xf8
 8003a28:	4313      	orrs	r3, r2
 8003a2a:	6023      	str	r3, [r4, #0]
 8003a2c:	e754      	b.n	80038d8 <HAL_RCC_OscConfig+0x18>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003a2e:	692a      	ldr	r2, [r5, #16]
 8003a30:	2601      	movs	r6, #1
 8003a32:	b1fa      	cbz	r2, 8003a74 <HAL_RCC_OscConfig+0x1b4>
 8003a34:	fa96 f3a6 	rbit	r3, r6
        __HAL_RCC_HSI_ENABLE();
 8003a38:	fab3 f383 	clz	r3, r3
 8003a3c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003a40:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003a44:	009b      	lsls	r3, r3, #2
 8003a46:	f04f 0802 	mov.w	r8, #2
 8003a4a:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 8003a4c:	f7ff fd16 	bl	800347c <HAL_GetTick>
 8003a50:	4607      	mov	r7, r0
 8003a52:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a56:	6822      	ldr	r2, [r4, #0]
 8003a58:	fa98 f3a8 	rbit	r3, r8
 8003a5c:	fab3 f383 	clz	r3, r3
 8003a60:	fa06 f303 	lsl.w	r3, r6, r3
 8003a64:	4213      	tst	r3, r2
 8003a66:	d1d5      	bne.n	8003a14 <HAL_RCC_OscConfig+0x154>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a68:	f7ff fd08 	bl	800347c <HAL_GetTick>
 8003a6c:	1bc0      	subs	r0, r0, r7
 8003a6e:	2802      	cmp	r0, #2
 8003a70:	d9ef      	bls.n	8003a52 <HAL_RCC_OscConfig+0x192>
 8003a72:	e786      	b.n	8003982 <HAL_RCC_OscConfig+0xc2>
 8003a74:	fa96 f3a6 	rbit	r3, r6
        __HAL_RCC_HSI_DISABLE();
 8003a78:	fab3 f383 	clz	r3, r3
 8003a7c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003a80:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003a84:	009b      	lsls	r3, r3, #2
 8003a86:	f04f 0802 	mov.w	r8, #2
 8003a8a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003a8c:	f7ff fcf6 	bl	800347c <HAL_GetTick>
 8003a90:	4607      	mov	r7, r0
 8003a92:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a96:	6822      	ldr	r2, [r4, #0]
 8003a98:	fa98 f3a8 	rbit	r3, r8
 8003a9c:	fab3 f383 	clz	r3, r3
 8003aa0:	fa06 f303 	lsl.w	r3, r6, r3
 8003aa4:	4213      	tst	r3, r2
 8003aa6:	f43f af17 	beq.w	80038d8 <HAL_RCC_OscConfig+0x18>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003aaa:	f7ff fce7 	bl	800347c <HAL_GetTick>
 8003aae:	1bc0      	subs	r0, r0, r7
 8003ab0:	2802      	cmp	r0, #2
 8003ab2:	d9ee      	bls.n	8003a92 <HAL_RCC_OscConfig+0x1d2>
 8003ab4:	e765      	b.n	8003982 <HAL_RCC_OscConfig+0xc2>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003ab6:	69aa      	ldr	r2, [r5, #24]
 8003ab8:	4e3f      	ldr	r6, [pc, #252]	@ (8003bb8 <HAL_RCC_OscConfig+0x2f8>)
 8003aba:	4940      	ldr	r1, [pc, #256]	@ (8003bbc <HAL_RCC_OscConfig+0x2fc>)
 8003abc:	2401      	movs	r4, #1
 8003abe:	b30a      	cbz	r2, 8003b04 <HAL_RCC_OscConfig+0x244>
 8003ac0:	fa94 f3a4 	rbit	r3, r4
      __HAL_RCC_LSI_ENABLE();
 8003ac4:	fab3 f383 	clz	r3, r3
 8003ac8:	440b      	add	r3, r1
 8003aca:	009b      	lsls	r3, r3, #2
 8003acc:	2702      	movs	r7, #2
 8003ace:	601c      	str	r4, [r3, #0]
      tickstart = HAL_GetTick();
 8003ad0:	f7ff fcd4 	bl	800347c <HAL_GetTick>
 8003ad4:	4680      	mov	r8, r0
 8003ad6:	fa97 f3a7 	rbit	r3, r7
 8003ada:	fa97 f3a7 	rbit	r3, r7
 8003ade:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ae2:	6a72      	ldr	r2, [r6, #36]	@ 0x24
 8003ae4:	fa97 f3a7 	rbit	r3, r7
 8003ae8:	fab3 f383 	clz	r3, r3
 8003aec:	fa04 f303 	lsl.w	r3, r4, r3
 8003af0:	4213      	tst	r3, r2
 8003af2:	f47f aef5 	bne.w	80038e0 <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003af6:	f7ff fcc1 	bl	800347c <HAL_GetTick>
 8003afa:	eba0 0008 	sub.w	r0, r0, r8
 8003afe:	2802      	cmp	r0, #2
 8003b00:	d9e9      	bls.n	8003ad6 <HAL_RCC_OscConfig+0x216>
 8003b02:	e73e      	b.n	8003982 <HAL_RCC_OscConfig+0xc2>
 8003b04:	fa94 f3a4 	rbit	r3, r4
      __HAL_RCC_LSI_DISABLE();
 8003b08:	fab3 f383 	clz	r3, r3
 8003b0c:	440b      	add	r3, r1
 8003b0e:	009b      	lsls	r3, r3, #2
 8003b10:	2702      	movs	r7, #2
 8003b12:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8003b14:	f7ff fcb2 	bl	800347c <HAL_GetTick>
 8003b18:	4680      	mov	r8, r0
 8003b1a:	fa97 f3a7 	rbit	r3, r7
 8003b1e:	fa97 f3a7 	rbit	r3, r7
 8003b22:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b26:	6a72      	ldr	r2, [r6, #36]	@ 0x24
 8003b28:	fa97 f3a7 	rbit	r3, r7
 8003b2c:	fab3 f383 	clz	r3, r3
 8003b30:	fa04 f303 	lsl.w	r3, r4, r3
 8003b34:	4213      	tst	r3, r2
 8003b36:	f43f aed3 	beq.w	80038e0 <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b3a:	f7ff fc9f 	bl	800347c <HAL_GetTick>
 8003b3e:	eba0 0008 	sub.w	r0, r0, r8
 8003b42:	2802      	cmp	r0, #2
 8003b44:	d9e9      	bls.n	8003b1a <HAL_RCC_OscConfig+0x25a>
 8003b46:	e71c      	b.n	8003982 <HAL_RCC_OscConfig+0xc2>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b48:	4c1b      	ldr	r4, [pc, #108]	@ (8003bb8 <HAL_RCC_OscConfig+0x2f8>)
 8003b4a:	69e3      	ldr	r3, [r4, #28]
 8003b4c:	00d9      	lsls	r1, r3, #3
 8003b4e:	d431      	bmi.n	8003bb4 <HAL_RCC_OscConfig+0x2f4>
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b50:	69e3      	ldr	r3, [r4, #28]
 8003b52:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003b56:	61e3      	str	r3, [r4, #28]
 8003b58:	69e3      	ldr	r3, [r4, #28]
 8003b5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b5e:	9301      	str	r3, [sp, #4]
 8003b60:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8003b62:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b64:	4f16      	ldr	r7, [pc, #88]	@ (8003bc0 <HAL_RCC_OscConfig+0x300>)
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	05da      	lsls	r2, r3, #23
 8003b6a:	d52b      	bpl.n	8003bc4 <HAL_RCC_OscConfig+0x304>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b6c:	68eb      	ldr	r3, [r5, #12]
 8003b6e:	2b01      	cmp	r3, #1
 8003b70:	d139      	bne.n	8003be6 <HAL_RCC_OscConfig+0x326>
 8003b72:	6a23      	ldr	r3, [r4, #32]
 8003b74:	f043 0301 	orr.w	r3, r3, #1
 8003b78:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8003b7a:	f7ff fc7f 	bl	800347c <HAL_GetTick>
 8003b7e:	2702      	movs	r7, #2
 8003b80:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b82:	f04f 0901 	mov.w	r9, #1
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b86:	f241 3a88 	movw	sl, #5000	@ 0x1388
 8003b8a:	fa97 f3a7 	rbit	r3, r7
 8003b8e:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b92:	6a22      	ldr	r2, [r4, #32]
 8003b94:	fa97 f3a7 	rbit	r3, r7
 8003b98:	fab3 f383 	clz	r3, r3
 8003b9c:	fa09 f303 	lsl.w	r3, r9, r3
 8003ba0:	4213      	tst	r3, r2
 8003ba2:	d053      	beq.n	8003c4c <HAL_RCC_OscConfig+0x38c>
    if(pwrclkchanged == SET)
 8003ba4:	2e00      	cmp	r6, #0
 8003ba6:	f43f ae9f 	beq.w	80038e8 <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 8003baa:	69e3      	ldr	r3, [r4, #28]
 8003bac:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003bb0:	61e3      	str	r3, [r4, #28]
 8003bb2:	e699      	b.n	80038e8 <HAL_RCC_OscConfig+0x28>
    FlagStatus       pwrclkchanged = RESET;
 8003bb4:	2600      	movs	r6, #0
 8003bb6:	e7d5      	b.n	8003b64 <HAL_RCC_OscConfig+0x2a4>
 8003bb8:	40021000 	.word	0x40021000
 8003bbc:	10908120 	.word	0x10908120
 8003bc0:	40007000 	.word	0x40007000
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003bca:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8003bcc:	f7ff fc56 	bl	800347c <HAL_GetTick>
 8003bd0:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	05db      	lsls	r3, r3, #23
 8003bd6:	d4c9      	bmi.n	8003b6c <HAL_RCC_OscConfig+0x2ac>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003bd8:	f7ff fc50 	bl	800347c <HAL_GetTick>
 8003bdc:	eba0 0008 	sub.w	r0, r0, r8
 8003be0:	2864      	cmp	r0, #100	@ 0x64
 8003be2:	d9f6      	bls.n	8003bd2 <HAL_RCC_OscConfig+0x312>
 8003be4:	e6cd      	b.n	8003982 <HAL_RCC_OscConfig+0xc2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003be6:	bb1b      	cbnz	r3, 8003c30 <HAL_RCC_OscConfig+0x370>
 8003be8:	6a23      	ldr	r3, [r4, #32]
 8003bea:	f023 0301 	bic.w	r3, r3, #1
 8003bee:	6223      	str	r3, [r4, #32]
 8003bf0:	6a23      	ldr	r3, [r4, #32]
 8003bf2:	f023 0304 	bic.w	r3, r3, #4
 8003bf6:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8003bf8:	f7ff fc40 	bl	800347c <HAL_GetTick>
 8003bfc:	2702      	movs	r7, #2
 8003bfe:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c00:	f04f 0901 	mov.w	r9, #1
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c04:	f241 3a88 	movw	sl, #5000	@ 0x1388
 8003c08:	fa97 f3a7 	rbit	r3, r7
 8003c0c:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c10:	6a22      	ldr	r2, [r4, #32]
 8003c12:	fa97 f3a7 	rbit	r3, r7
 8003c16:	fab3 f383 	clz	r3, r3
 8003c1a:	fa09 f303 	lsl.w	r3, r9, r3
 8003c1e:	4213      	tst	r3, r2
 8003c20:	d0c0      	beq.n	8003ba4 <HAL_RCC_OscConfig+0x2e4>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c22:	f7ff fc2b 	bl	800347c <HAL_GetTick>
 8003c26:	eba0 0008 	sub.w	r0, r0, r8
 8003c2a:	4550      	cmp	r0, sl
 8003c2c:	d9ec      	bls.n	8003c08 <HAL_RCC_OscConfig+0x348>
 8003c2e:	e6a8      	b.n	8003982 <HAL_RCC_OscConfig+0xc2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c30:	2b05      	cmp	r3, #5
 8003c32:	6a23      	ldr	r3, [r4, #32]
 8003c34:	d103      	bne.n	8003c3e <HAL_RCC_OscConfig+0x37e>
 8003c36:	f043 0304 	orr.w	r3, r3, #4
 8003c3a:	6223      	str	r3, [r4, #32]
 8003c3c:	e799      	b.n	8003b72 <HAL_RCC_OscConfig+0x2b2>
 8003c3e:	f023 0301 	bic.w	r3, r3, #1
 8003c42:	6223      	str	r3, [r4, #32]
 8003c44:	6a23      	ldr	r3, [r4, #32]
 8003c46:	f023 0304 	bic.w	r3, r3, #4
 8003c4a:	e795      	b.n	8003b78 <HAL_RCC_OscConfig+0x2b8>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c4c:	f7ff fc16 	bl	800347c <HAL_GetTick>
 8003c50:	eba0 0008 	sub.w	r0, r0, r8
 8003c54:	4550      	cmp	r0, sl
 8003c56:	d998      	bls.n	8003b8a <HAL_RCC_OscConfig+0x2ca>
 8003c58:	e693      	b.n	8003982 <HAL_RCC_OscConfig+0xc2>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003c5a:	4c46      	ldr	r4, [pc, #280]	@ (8003d74 <HAL_RCC_OscConfig+0x4b4>)
 8003c5c:	6862      	ldr	r2, [r4, #4]
 8003c5e:	f002 020c 	and.w	r2, r2, #12
 8003c62:	2a08      	cmp	r2, #8
 8003c64:	d074      	beq.n	8003d50 <HAL_RCC_OscConfig+0x490>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c66:	2b02      	cmp	r3, #2
 8003c68:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003c6c:	d14d      	bne.n	8003d0a <HAL_RCC_OscConfig+0x44a>
 8003c6e:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8003c72:	fab3 f383 	clz	r3, r3
 8003c76:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003c7a:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003c7e:	009b      	lsls	r3, r3, #2
 8003c80:	2200      	movs	r2, #0
 8003c82:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003c84:	f7ff fbfa 	bl	800347c <HAL_GetTick>
 8003c88:	f04f 7800 	mov.w	r8, #33554432	@ 0x2000000
 8003c8c:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c8e:	2601      	movs	r6, #1
 8003c90:	fa98 f3a8 	rbit	r3, r8
 8003c94:	6822      	ldr	r2, [r4, #0]
 8003c96:	fa98 f3a8 	rbit	r3, r8
 8003c9a:	fab3 f383 	clz	r3, r3
 8003c9e:	fa06 f303 	lsl.w	r3, r6, r3
 8003ca2:	4213      	tst	r3, r2
 8003ca4:	d12b      	bne.n	8003cfe <HAL_RCC_OscConfig+0x43e>
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003ca6:	e9d5 1308 	ldrd	r1, r3, [r5, #32]
 8003caa:	6862      	ldr	r2, [r4, #4]
 8003cac:	430b      	orrs	r3, r1
 8003cae:	f422 1274 	bic.w	r2, r2, #3997696	@ 0x3d0000
 8003cb2:	4313      	orrs	r3, r2
 8003cb4:	6063      	str	r3, [r4, #4]
 8003cb6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003cba:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 8003cbe:	fab3 f383 	clz	r3, r3
 8003cc2:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003cc6:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003cca:	009b      	lsls	r3, r3, #2
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003ccc:	2701      	movs	r7, #1
        __HAL_RCC_PLL_ENABLE();
 8003cce:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 8003cd0:	f7ff fbd4 	bl	800347c <HAL_GetTick>
 8003cd4:	f04f 7600 	mov.w	r6, #33554432	@ 0x2000000
 8003cd8:	4605      	mov	r5, r0
 8003cda:	fa96 f3a6 	rbit	r3, r6
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003cde:	6822      	ldr	r2, [r4, #0]
 8003ce0:	fa96 f3a6 	rbit	r3, r6
 8003ce4:	fab3 f383 	clz	r3, r3
 8003ce8:	fa07 f303 	lsl.w	r3, r7, r3
 8003cec:	4213      	tst	r3, r2
 8003cee:	f47f adff 	bne.w	80038f0 <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003cf2:	f7ff fbc3 	bl	800347c <HAL_GetTick>
 8003cf6:	1b40      	subs	r0, r0, r5
 8003cf8:	2802      	cmp	r0, #2
 8003cfa:	d9ee      	bls.n	8003cda <HAL_RCC_OscConfig+0x41a>
 8003cfc:	e641      	b.n	8003982 <HAL_RCC_OscConfig+0xc2>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003cfe:	f7ff fbbd 	bl	800347c <HAL_GetTick>
 8003d02:	1bc0      	subs	r0, r0, r7
 8003d04:	2802      	cmp	r0, #2
 8003d06:	d9c3      	bls.n	8003c90 <HAL_RCC_OscConfig+0x3d0>
 8003d08:	e63b      	b.n	8003982 <HAL_RCC_OscConfig+0xc2>
 8003d0a:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8003d0e:	fab3 f383 	clz	r3, r3
 8003d12:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003d16:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003d1a:	009b      	lsls	r3, r3, #2
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003d20:	f7ff fbac 	bl	800347c <HAL_GetTick>
 8003d24:	f04f 7600 	mov.w	r6, #33554432	@ 0x2000000
 8003d28:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d2a:	2701      	movs	r7, #1
 8003d2c:	fa96 f3a6 	rbit	r3, r6
 8003d30:	6822      	ldr	r2, [r4, #0]
 8003d32:	fa96 f3a6 	rbit	r3, r6
 8003d36:	fab3 f383 	clz	r3, r3
 8003d3a:	fa07 f303 	lsl.w	r3, r7, r3
 8003d3e:	4213      	tst	r3, r2
 8003d40:	f43f add6 	beq.w	80038f0 <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d44:	f7ff fb9a 	bl	800347c <HAL_GetTick>
 8003d48:	1b40      	subs	r0, r0, r5
 8003d4a:	2802      	cmp	r0, #2
 8003d4c:	d9ee      	bls.n	8003d2c <HAL_RCC_OscConfig+0x46c>
 8003d4e:	e618      	b.n	8003982 <HAL_RCC_OscConfig+0xc2>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003d50:	2b01      	cmp	r3, #1
 8003d52:	f43f adee 	beq.w	8003932 <HAL_RCC_OscConfig+0x72>
        pll_config = RCC->CFGR;
 8003d56:	6860      	ldr	r0, [r4, #4]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003d58:	6a2b      	ldr	r3, [r5, #32]
 8003d5a:	f400 3280 	and.w	r2, r0, #65536	@ 0x10000
 8003d5e:	429a      	cmp	r2, r3
 8003d60:	f47f ade7 	bne.w	8003932 <HAL_RCC_OscConfig+0x72>
 8003d64:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8003d66:	f400 1070 	and.w	r0, r0, #3932160	@ 0x3c0000
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003d6a:	1ac0      	subs	r0, r0, r3
 8003d6c:	bf18      	it	ne
 8003d6e:	2001      	movne	r0, #1
 8003d70:	e608      	b.n	8003984 <HAL_RCC_OscConfig+0xc4>
 8003d72:	bf00      	nop
 8003d74:	40021000 	.word	0x40021000

08003d78 <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 8003d78:	4b0c      	ldr	r3, [pc, #48]	@ (8003dac <HAL_RCC_GetSysClockFreq+0x34>)
 8003d7a:	685a      	ldr	r2, [r3, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003d7c:	f002 010c 	and.w	r1, r2, #12
 8003d80:	2908      	cmp	r1, #8
 8003d82:	d111      	bne.n	8003da8 <HAL_RCC_GetSysClockFreq+0x30>
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8003d84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003d86:	480a      	ldr	r0, [pc, #40]	@ (8003db0 <HAL_RCC_GetSysClockFreq+0x38>)
 8003d88:	f3c2 4183 	ubfx	r1, r2, #18, #4
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003d8c:	03d2      	lsls	r2, r2, #15
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8003d8e:	bf44      	itt	mi
 8003d90:	f003 030f 	andmi.w	r3, r3, #15
 8003d94:	4a07      	ldrmi	r2, [pc, #28]	@ (8003db4 <HAL_RCC_GetSysClockFreq+0x3c>)
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003d96:	5c40      	ldrb	r0, [r0, r1]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8003d98:	bf49      	itett	mi
 8003d9a:	5cd2      	ldrbmi	r2, [r2, r3]
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003d9c:	4b06      	ldrpl	r3, [pc, #24]	@ (8003db8 <HAL_RCC_GetSysClockFreq+0x40>)
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003d9e:	4b07      	ldrmi	r3, [pc, #28]	@ (8003dbc <HAL_RCC_GetSysClockFreq+0x44>)
 8003da0:	fbb3 f3f2 	udivmi	r3, r3, r2
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003da4:	4358      	muls	r0, r3
 8003da6:	4770      	bx	lr
      sysclockfreq = HSE_VALUE;
 8003da8:	4804      	ldr	r0, [pc, #16]	@ (8003dbc <HAL_RCC_GetSysClockFreq+0x44>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8003daa:	4770      	bx	lr
 8003dac:	40021000 	.word	0x40021000
 8003db0:	0800d3ed 	.word	0x0800d3ed
 8003db4:	0800d3dd 	.word	0x0800d3dd
 8003db8:	003d0900 	.word	0x003d0900
 8003dbc:	007a1200 	.word	0x007a1200

08003dc0 <HAL_RCC_ClockConfig>:
{
 8003dc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003dc4:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8003dc6:	4604      	mov	r4, r0
 8003dc8:	b910      	cbnz	r0, 8003dd0 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8003dca:	2001      	movs	r0, #1
}
 8003dcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003dd0:	4a4a      	ldr	r2, [pc, #296]	@ (8003efc <HAL_RCC_ClockConfig+0x13c>)
 8003dd2:	6813      	ldr	r3, [r2, #0]
 8003dd4:	f003 0307 	and.w	r3, r3, #7
 8003dd8:	428b      	cmp	r3, r1
 8003dda:	d32e      	bcc.n	8003e3a <HAL_RCC_ClockConfig+0x7a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ddc:	6822      	ldr	r2, [r4, #0]
 8003dde:	0791      	lsls	r1, r2, #30
 8003de0:	d436      	bmi.n	8003e50 <HAL_RCC_ClockConfig+0x90>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003de2:	07d2      	lsls	r2, r2, #31
 8003de4:	d43c      	bmi.n	8003e60 <HAL_RCC_ClockConfig+0xa0>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003de6:	4a45      	ldr	r2, [pc, #276]	@ (8003efc <HAL_RCC_ClockConfig+0x13c>)
 8003de8:	6813      	ldr	r3, [r2, #0]
 8003dea:	f003 0307 	and.w	r3, r3, #7
 8003dee:	42ab      	cmp	r3, r5
 8003df0:	d870      	bhi.n	8003ed4 <HAL_RCC_ClockConfig+0x114>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003df2:	6822      	ldr	r2, [r4, #0]
 8003df4:	4d42      	ldr	r5, [pc, #264]	@ (8003f00 <HAL_RCC_ClockConfig+0x140>)
 8003df6:	f012 0f04 	tst.w	r2, #4
 8003dfa:	d177      	bne.n	8003eec <HAL_RCC_ClockConfig+0x12c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003dfc:	0713      	lsls	r3, r2, #28
 8003dfe:	d506      	bpl.n	8003e0e <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003e00:	686b      	ldr	r3, [r5, #4]
 8003e02:	6922      	ldr	r2, [r4, #16]
 8003e04:	f423 5360 	bic.w	r3, r3, #14336	@ 0x3800
 8003e08:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8003e0c:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003e0e:	f7ff ffb3 	bl	8003d78 <HAL_RCC_GetSysClockFreq>
 8003e12:	686b      	ldr	r3, [r5, #4]
 8003e14:	22f0      	movs	r2, #240	@ 0xf0
 8003e16:	fa92 f2a2 	rbit	r2, r2
 8003e1a:	fab2 f282 	clz	r2, r2
 8003e1e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003e22:	40d3      	lsrs	r3, r2
 8003e24:	4a37      	ldr	r2, [pc, #220]	@ (8003f04 <HAL_RCC_ClockConfig+0x144>)
 8003e26:	5cd3      	ldrb	r3, [r2, r3]
 8003e28:	40d8      	lsrs	r0, r3
 8003e2a:	4b37      	ldr	r3, [pc, #220]	@ (8003f08 <HAL_RCC_ClockConfig+0x148>)
 8003e2c:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 8003e2e:	4b37      	ldr	r3, [pc, #220]	@ (8003f0c <HAL_RCC_ClockConfig+0x14c>)
 8003e30:	6818      	ldr	r0, [r3, #0]
 8003e32:	f7ff f9ff 	bl	8003234 <HAL_InitTick>
  return HAL_OK;
 8003e36:	2000      	movs	r0, #0
 8003e38:	e7c8      	b.n	8003dcc <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e3a:	6813      	ldr	r3, [r2, #0]
 8003e3c:	f023 0307 	bic.w	r3, r3, #7
 8003e40:	430b      	orrs	r3, r1
 8003e42:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e44:	6813      	ldr	r3, [r2, #0]
 8003e46:	f003 0307 	and.w	r3, r3, #7
 8003e4a:	428b      	cmp	r3, r1
 8003e4c:	d1bd      	bne.n	8003dca <HAL_RCC_ClockConfig+0xa>
 8003e4e:	e7c5      	b.n	8003ddc <HAL_RCC_ClockConfig+0x1c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e50:	492b      	ldr	r1, [pc, #172]	@ (8003f00 <HAL_RCC_ClockConfig+0x140>)
 8003e52:	68a0      	ldr	r0, [r4, #8]
 8003e54:	684b      	ldr	r3, [r1, #4]
 8003e56:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003e5a:	4303      	orrs	r3, r0
 8003e5c:	604b      	str	r3, [r1, #4]
 8003e5e:	e7c0      	b.n	8003de2 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e60:	6862      	ldr	r2, [r4, #4]
 8003e62:	4e27      	ldr	r6, [pc, #156]	@ (8003f00 <HAL_RCC_ClockConfig+0x140>)
 8003e64:	2a01      	cmp	r2, #1
 8003e66:	d124      	bne.n	8003eb2 <HAL_RCC_ClockConfig+0xf2>
 8003e68:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003e6c:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e70:	6831      	ldr	r1, [r6, #0]
 8003e72:	fa93 f3a3 	rbit	r3, r3
 8003e76:	fab3 f383 	clz	r3, r3
 8003e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e7e:	420b      	tst	r3, r1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e80:	d0a3      	beq.n	8003dca <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003e82:	6873      	ldr	r3, [r6, #4]
 8003e84:	f023 0303 	bic.w	r3, r3, #3
 8003e88:	4313      	orrs	r3, r2
 8003e8a:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8003e8c:	f7ff faf6 	bl	800347c <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e90:	f241 3888 	movw	r8, #5000	@ 0x1388
    tickstart = HAL_GetTick();
 8003e94:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e96:	6873      	ldr	r3, [r6, #4]
 8003e98:	6862      	ldr	r2, [r4, #4]
 8003e9a:	f003 030c 	and.w	r3, r3, #12
 8003e9e:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8003ea2:	d0a0      	beq.n	8003de6 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ea4:	f7ff faea 	bl	800347c <HAL_GetTick>
 8003ea8:	1bc0      	subs	r0, r0, r7
 8003eaa:	4540      	cmp	r0, r8
 8003eac:	d9f3      	bls.n	8003e96 <HAL_RCC_ClockConfig+0xd6>
        return HAL_TIMEOUT;
 8003eae:	2003      	movs	r0, #3
 8003eb0:	e78c      	b.n	8003dcc <HAL_RCC_ClockConfig+0xc>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003eb2:	2a02      	cmp	r2, #2
 8003eb4:	bf0c      	ite	eq
 8003eb6:	f04f 7300 	moveq.w	r3, #33554432	@ 0x2000000
 8003eba:	2302      	movne	r3, #2
 8003ebc:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ec0:	6830      	ldr	r0, [r6, #0]
 8003ec2:	fa93 f3a3 	rbit	r3, r3
 8003ec6:	2101      	movs	r1, #1
 8003ec8:	fab3 f383 	clz	r3, r3
 8003ecc:	fa01 f303 	lsl.w	r3, r1, r3
 8003ed0:	4203      	tst	r3, r0
 8003ed2:	e7d5      	b.n	8003e80 <HAL_RCC_ClockConfig+0xc0>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ed4:	6813      	ldr	r3, [r2, #0]
 8003ed6:	f023 0307 	bic.w	r3, r3, #7
 8003eda:	432b      	orrs	r3, r5
 8003edc:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ede:	6813      	ldr	r3, [r2, #0]
 8003ee0:	f003 0307 	and.w	r3, r3, #7
 8003ee4:	42ab      	cmp	r3, r5
 8003ee6:	f47f af70 	bne.w	8003dca <HAL_RCC_ClockConfig+0xa>
 8003eea:	e782      	b.n	8003df2 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003eec:	686b      	ldr	r3, [r5, #4]
 8003eee:	68e1      	ldr	r1, [r4, #12]
 8003ef0:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8003ef4:	430b      	orrs	r3, r1
 8003ef6:	606b      	str	r3, [r5, #4]
 8003ef8:	e780      	b.n	8003dfc <HAL_RCC_ClockConfig+0x3c>
 8003efa:	bf00      	nop
 8003efc:	40022000 	.word	0x40022000
 8003f00:	40021000 	.word	0x40021000
 8003f04:	0800d3cd 	.word	0x0800d3cd
 8003f08:	20000008 	.word	0x20000008
 8003f0c:	20000010 	.word	0x20000010

08003f10 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003f10:	4b08      	ldr	r3, [pc, #32]	@ (8003f34 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003f12:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8003f16:	685b      	ldr	r3, [r3, #4]
 8003f18:	fa92 f2a2 	rbit	r2, r2
 8003f1c:	fab2 f282 	clz	r2, r2
 8003f20:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003f24:	40d3      	lsrs	r3, r2
 8003f26:	4a04      	ldr	r2, [pc, #16]	@ (8003f38 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003f28:	5cd3      	ldrb	r3, [r2, r3]
 8003f2a:	4a04      	ldr	r2, [pc, #16]	@ (8003f3c <HAL_RCC_GetPCLK1Freq+0x2c>)
 8003f2c:	6810      	ldr	r0, [r2, #0]
}    
 8003f2e:	40d8      	lsrs	r0, r3
 8003f30:	4770      	bx	lr
 8003f32:	bf00      	nop
 8003f34:	40021000 	.word	0x40021000
 8003f38:	0800d3c5 	.word	0x0800d3c5
 8003f3c:	20000008 	.word	0x20000008

08003f40 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003f40:	4b08      	ldr	r3, [pc, #32]	@ (8003f64 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003f42:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8003f46:	685b      	ldr	r3, [r3, #4]
 8003f48:	fa92 f2a2 	rbit	r2, r2
 8003f4c:	fab2 f282 	clz	r2, r2
 8003f50:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8003f54:	40d3      	lsrs	r3, r2
 8003f56:	4a04      	ldr	r2, [pc, #16]	@ (8003f68 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003f58:	5cd3      	ldrb	r3, [r2, r3]
 8003f5a:	4a04      	ldr	r2, [pc, #16]	@ (8003f6c <HAL_RCC_GetPCLK2Freq+0x2c>)
 8003f5c:	6810      	ldr	r0, [r2, #0]
} 
 8003f5e:	40d8      	lsrs	r0, r3
 8003f60:	4770      	bx	lr
 8003f62:	bf00      	nop
 8003f64:	40021000 	.word	0x40021000
 8003f68:	0800d3c5 	.word	0x0800d3c5
 8003f6c:	20000008 	.word	0x20000008

08003f70 <HAL_RCC_GetClockConfig>:
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003f70:	230f      	movs	r3, #15
 8003f72:	6003      	str	r3, [r0, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003f74:	4b0b      	ldr	r3, [pc, #44]	@ (8003fa4 <HAL_RCC_GetClockConfig+0x34>)
 8003f76:	685a      	ldr	r2, [r3, #4]
 8003f78:	f002 0203 	and.w	r2, r2, #3
 8003f7c:	6042      	str	r2, [r0, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8003f7e:	685a      	ldr	r2, [r3, #4]
 8003f80:	f002 02f0 	and.w	r2, r2, #240	@ 0xf0
 8003f84:	6082      	str	r2, [r0, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 8003f86:	685a      	ldr	r2, [r3, #4]
 8003f88:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
 8003f8c:	60c2      	str	r2, [r0, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003f8e:	685b      	ldr	r3, [r3, #4]
 8003f90:	08db      	lsrs	r3, r3, #3
 8003f92:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003f96:	6103      	str	r3, [r0, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 8003f98:	4b03      	ldr	r3, [pc, #12]	@ (8003fa8 <HAL_RCC_GetClockConfig+0x38>)
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f003 0307 	and.w	r3, r3, #7
 8003fa0:	600b      	str	r3, [r1, #0]
}
 8003fa2:	4770      	bx	lr
 8003fa4:	40021000 	.word	0x40021000
 8003fa8:	40022000 	.word	0x40022000

08003fac <HAL_RCCEx_PeriphCLKConfig>:
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003fac:	6803      	ldr	r3, [r0, #0]
{
 8003fae:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003fb2:	03dd      	lsls	r5, r3, #15
{
 8003fb4:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003fb6:	d524      	bpl.n	8004002 <HAL_RCCEx_PeriphCLKConfig+0x56>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003fb8:	4d78      	ldr	r5, [pc, #480]	@ (800419c <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8003fba:	69eb      	ldr	r3, [r5, #28]
 8003fbc:	00d8      	lsls	r0, r3, #3
 8003fbe:	f100 8091 	bmi.w	80040e4 <HAL_RCCEx_PeriphCLKConfig+0x138>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003fc2:	69eb      	ldr	r3, [r5, #28]
 8003fc4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003fc8:	61eb      	str	r3, [r5, #28]
 8003fca:	69eb      	ldr	r3, [r5, #28]
 8003fcc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003fd0:	9301      	str	r3, [sp, #4]
 8003fd2:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8003fd4:	2601      	movs	r6, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fd6:	4f72      	ldr	r7, [pc, #456]	@ (80041a0 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	05d9      	lsls	r1, r3, #23
 8003fdc:	f140 8084 	bpl.w	80040e8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003fe0:	6a2b      	ldr	r3, [r5, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003fe2:	6862      	ldr	r2, [r4, #4]
 8003fe4:	f413 7340 	ands.w	r3, r3, #768	@ 0x300
 8003fe8:	f040 8093 	bne.w	8004112 <HAL_RCCEx_PeriphCLKConfig+0x166>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003fec:	6a2b      	ldr	r3, [r5, #32]
 8003fee:	6862      	ldr	r2, [r4, #4]
 8003ff0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003ff4:	4313      	orrs	r3, r2
 8003ff6:	622b      	str	r3, [r5, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003ff8:	b11e      	cbz	r6, 8004002 <HAL_RCCEx_PeriphCLKConfig+0x56>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ffa:	69eb      	ldr	r3, [r5, #28]
 8003ffc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004000:	61eb      	str	r3, [r5, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004002:	6823      	ldr	r3, [r4, #0]
 8004004:	07df      	lsls	r7, r3, #31
 8004006:	d506      	bpl.n	8004016 <HAL_RCCEx_PeriphCLKConfig+0x6a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004008:	4964      	ldr	r1, [pc, #400]	@ (800419c <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 800400a:	68a0      	ldr	r0, [r4, #8]
 800400c:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 800400e:	f022 0203 	bic.w	r2, r2, #3
 8004012:	4302      	orrs	r2, r0
 8004014:	630a      	str	r2, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004016:	079e      	lsls	r6, r3, #30
 8004018:	d506      	bpl.n	8004028 <HAL_RCCEx_PeriphCLKConfig+0x7c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800401a:	4960      	ldr	r1, [pc, #384]	@ (800419c <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 800401c:	68e0      	ldr	r0, [r4, #12]
 800401e:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 8004020:	f422 3240 	bic.w	r2, r2, #196608	@ 0x30000
 8004024:	4302      	orrs	r2, r0
 8004026:	630a      	str	r2, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004028:	075d      	lsls	r5, r3, #29
 800402a:	d506      	bpl.n	800403a <HAL_RCCEx_PeriphCLKConfig+0x8e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800402c:	495b      	ldr	r1, [pc, #364]	@ (800419c <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 800402e:	6920      	ldr	r0, [r4, #16]
 8004030:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 8004032:	f422 2240 	bic.w	r2, r2, #786432	@ 0xc0000
 8004036:	4302      	orrs	r2, r0
 8004038:	630a      	str	r2, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800403a:	0698      	lsls	r0, r3, #26
 800403c:	d506      	bpl.n	800404c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800403e:	4957      	ldr	r1, [pc, #348]	@ (800419c <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8004040:	69e0      	ldr	r0, [r4, #28]
 8004042:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 8004044:	f022 0210 	bic.w	r2, r2, #16
 8004048:	4302      	orrs	r2, r0
 800404a:	630a      	str	r2, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800404c:	0399      	lsls	r1, r3, #14
 800404e:	d506      	bpl.n	800405e <HAL_RCCEx_PeriphCLKConfig+0xb2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8004050:	4952      	ldr	r1, [pc, #328]	@ (800419c <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8004052:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8004054:	684a      	ldr	r2, [r1, #4]
 8004056:	f422 0280 	bic.w	r2, r2, #4194304	@ 0x400000
 800405a:	4302      	orrs	r2, r0
 800405c:	604a      	str	r2, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800405e:	065a      	lsls	r2, r3, #25
 8004060:	d506      	bpl.n	8004070 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004062:	494e      	ldr	r1, [pc, #312]	@ (800419c <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8004064:	6a20      	ldr	r0, [r4, #32]
 8004066:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 8004068:	f022 0220 	bic.w	r2, r2, #32
 800406c:	4302      	orrs	r2, r0
 800406e:	630a      	str	r2, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004070:	071f      	lsls	r7, r3, #28
 8004072:	d506      	bpl.n	8004082 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004074:	4949      	ldr	r1, [pc, #292]	@ (800419c <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8004076:	6960      	ldr	r0, [r4, #20]
 8004078:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 800407a:	f422 1240 	bic.w	r2, r2, #3145728	@ 0x300000
 800407e:	4302      	orrs	r2, r0
 8004080:	630a      	str	r2, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004082:	06de      	lsls	r6, r3, #27
 8004084:	d506      	bpl.n	8004094 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004086:	4945      	ldr	r1, [pc, #276]	@ (800419c <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8004088:	69a0      	ldr	r0, [r4, #24]
 800408a:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 800408c:	f422 0240 	bic.w	r2, r2, #12582912	@ 0xc00000
 8004090:	4302      	orrs	r2, r0
 8004092:	630a      	str	r2, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004094:	059d      	lsls	r5, r3, #22
 8004096:	d506      	bpl.n	80040a6 <HAL_RCCEx_PeriphCLKConfig+0xfa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004098:	4940      	ldr	r1, [pc, #256]	@ (800419c <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 800409a:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 800409c:	684a      	ldr	r2, [r1, #4]
 800409e:	f422 0200 	bic.w	r2, r2, #8388608	@ 0x800000
 80040a2:	4302      	orrs	r2, r0
 80040a4:	604a      	str	r2, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80040a6:	0618      	lsls	r0, r3, #24
 80040a8:	d506      	bpl.n	80040b8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80040aa:	493c      	ldr	r1, [pc, #240]	@ (800419c <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 80040ac:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 80040ae:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 80040b0:	f422 72f8 	bic.w	r2, r2, #496	@ 0x1f0
 80040b4:	4302      	orrs	r2, r0
 80040b6:	62ca      	str	r2, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80040b8:	05d9      	lsls	r1, r3, #23
 80040ba:	d506      	bpl.n	80040ca <HAL_RCCEx_PeriphCLKConfig+0x11e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80040bc:	4937      	ldr	r1, [pc, #220]	@ (800419c <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 80040be:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 80040c0:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 80040c2:	f422 5278 	bic.w	r2, r2, #15872	@ 0x3e00
 80040c6:	4302      	orrs	r2, r0
 80040c8:	62ca      	str	r2, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80040ca:	04da      	lsls	r2, r3, #19
 80040cc:	d506      	bpl.n	80040dc <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80040ce:	4933      	ldr	r1, [pc, #204]	@ (800419c <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 80040d0:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 80040d2:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 80040d4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80040d8:	4302      	orrs	r2, r0
 80040da:	630a      	str	r2, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80040dc:	049b      	lsls	r3, r3, #18
 80040de:	d454      	bmi.n	800418a <HAL_RCCEx_PeriphCLKConfig+0x1de>
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80040e0:	2000      	movs	r0, #0
 80040e2:	e013      	b.n	800410c <HAL_RCCEx_PeriphCLKConfig+0x160>
  FlagStatus       pwrclkchanged = RESET;
 80040e4:	2600      	movs	r6, #0
 80040e6:	e776      	b.n	8003fd6 <HAL_RCCEx_PeriphCLKConfig+0x2a>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80040ee:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 80040f0:	f7ff f9c4 	bl	800347c <HAL_GetTick>
 80040f4:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	05da      	lsls	r2, r3, #23
 80040fa:	f53f af71 	bmi.w	8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x34>
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80040fe:	f7ff f9bd 	bl	800347c <HAL_GetTick>
 8004102:	eba0 0008 	sub.w	r0, r0, r8
 8004106:	2864      	cmp	r0, #100	@ 0x64
 8004108:	d9f5      	bls.n	80040f6 <HAL_RCCEx_PeriphCLKConfig+0x14a>
          return HAL_TIMEOUT;
 800410a:	2003      	movs	r0, #3
}
 800410c:	b002      	add	sp, #8
 800410e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004112:	f402 7240 	and.w	r2, r2, #768	@ 0x300
 8004116:	429a      	cmp	r2, r3
 8004118:	f43f af68 	beq.w	8003fec <HAL_RCCEx_PeriphCLKConfig+0x40>
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800411c:	6a29      	ldr	r1, [r5, #32]
 800411e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004122:	f421 7040 	bic.w	r0, r1, #768	@ 0x300
 8004126:	fa93 f2a3 	rbit	r2, r3
      __HAL_RCC_BACKUPRESET_FORCE();
 800412a:	f8df c078 	ldr.w	ip, [pc, #120]	@ 80041a4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 800412e:	fab2 f282 	clz	r2, r2
 8004132:	4462      	add	r2, ip
 8004134:	0092      	lsls	r2, r2, #2
 8004136:	2701      	movs	r7, #1
 8004138:	6017      	str	r7, [r2, #0]
 800413a:	fa93 f3a3 	rbit	r3, r3
      __HAL_RCC_BACKUPRESET_RELEASE();
 800413e:	fab3 f383 	clz	r3, r3
 8004142:	4463      	add	r3, ip
 8004144:	009b      	lsls	r3, r3, #2
 8004146:	2200      	movs	r2, #0
 8004148:	601a      	str	r2, [r3, #0]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800414a:	07cb      	lsls	r3, r1, #31
      RCC->BDCR = temp_reg;
 800414c:	6228      	str	r0, [r5, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800414e:	f57f af4d 	bpl.w	8003fec <HAL_RCCEx_PeriphCLKConfig+0x40>
        tickstart = HAL_GetTick();
 8004152:	f7ff f993 	bl	800347c <HAL_GetTick>
 8004156:	f04f 0802 	mov.w	r8, #2
 800415a:	4681      	mov	r9, r0
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800415c:	f241 3a88 	movw	sl, #5000	@ 0x1388
 8004160:	fa98 f3a8 	rbit	r3, r8
 8004164:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004168:	6a2a      	ldr	r2, [r5, #32]
 800416a:	fa98 f3a8 	rbit	r3, r8
 800416e:	fab3 f383 	clz	r3, r3
 8004172:	fa07 f303 	lsl.w	r3, r7, r3
 8004176:	4213      	tst	r3, r2
 8004178:	f47f af38 	bne.w	8003fec <HAL_RCCEx_PeriphCLKConfig+0x40>
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800417c:	f7ff f97e 	bl	800347c <HAL_GetTick>
 8004180:	eba0 0009 	sub.w	r0, r0, r9
 8004184:	4550      	cmp	r0, sl
 8004186:	d9eb      	bls.n	8004160 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 8004188:	e7bf      	b.n	800410a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 800418a:	4a04      	ldr	r2, [pc, #16]	@ (800419c <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 800418c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800418e:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8004190:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004194:	430b      	orrs	r3, r1
 8004196:	6313      	str	r3, [r2, #48]	@ 0x30
 8004198:	e7a2      	b.n	80040e0 <HAL_RCCEx_PeriphCLKConfig+0x134>
 800419a:	bf00      	nop
 800419c:	40021000 	.word	0x40021000
 80041a0:	40007000 	.word	0x40007000
 80041a4:	10908100 	.word	0x10908100

080041a8 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80041a8:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 80041aa:	6803      	ldr	r3, [r0, #0]
 80041ac:	4a09      	ldr	r2, [pc, #36]	@ (80041d4 <HAL_RTC_WaitForSynchro+0x2c>)
 80041ae:	60da      	str	r2, [r3, #12]
{
 80041b0:	4604      	mov	r4, r0

  /* Get tick */
  tickstart = HAL_GetTick();
 80041b2:	f7ff f963 	bl	800347c <HAL_GetTick>
 80041b6:	4605      	mov	r5, r0

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80041b8:	6823      	ldr	r3, [r4, #0]
 80041ba:	68db      	ldr	r3, [r3, #12]
 80041bc:	069b      	lsls	r3, r3, #26
 80041be:	d501      	bpl.n	80041c4 <HAL_RTC_WaitForSynchro+0x1c>
    {
      return HAL_TIMEOUT;
    }
  }

  return HAL_OK;
 80041c0:	2000      	movs	r0, #0
}
 80041c2:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80041c4:	f7ff f95a 	bl	800347c <HAL_GetTick>
 80041c8:	1b40      	subs	r0, r0, r5
 80041ca:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 80041ce:	d9f3      	bls.n	80041b8 <HAL_RTC_WaitForSynchro+0x10>
      return HAL_TIMEOUT;
 80041d0:	2003      	movs	r0, #3
 80041d2:	e7f6      	b.n	80041c2 <HAL_RTC_WaitForSynchro+0x1a>
 80041d4:	0001ff5f 	.word	0x0001ff5f

080041d8 <RTC_EnterInitMode>:
{
  uint32_t tickstart = 0U;
  HAL_StatusTypeDef status = HAL_OK;

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80041d8:	6803      	ldr	r3, [r0, #0]
{
 80041da:	b570      	push	{r4, r5, r6, lr}
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80041dc:	68dc      	ldr	r4, [r3, #12]
 80041de:	f014 0440 	ands.w	r4, r4, #64	@ 0x40
{
 80041e2:	4605      	mov	r5, r0
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80041e4:	d117      	bne.n	8004216 <RTC_EnterInitMode+0x3e>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80041e6:	68da      	ldr	r2, [r3, #12]
 80041e8:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80041ec:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80041ee:	f7ff f945 	bl	800347c <HAL_GetTick>
 80041f2:	4606      	mov	r6, r0

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80041f4:	682b      	ldr	r3, [r5, #0]
 80041f6:	68db      	ldr	r3, [r3, #12]
 80041f8:	065b      	lsls	r3, r3, #25
 80041fa:	d400      	bmi.n	80041fe <RTC_EnterInitMode+0x26>
 80041fc:	b10c      	cbz	r4, 8004202 <RTC_EnterInitMode+0x2a>
      }
    }
  }

  return status;
}
 80041fe:	4620      	mov	r0, r4
 8004200:	bd70      	pop	{r4, r5, r6, pc}
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004202:	f7ff f93b 	bl	800347c <HAL_GetTick>
 8004206:	1b80      	subs	r0, r0, r6
 8004208:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
        hrtc->State = HAL_RTC_STATE_ERROR;
 800420c:	bf82      	ittt	hi
 800420e:	2304      	movhi	r3, #4
 8004210:	776b      	strbhi	r3, [r5, #29]
        status = HAL_ERROR;
 8004212:	2401      	movhi	r4, #1
 8004214:	e7ee      	b.n	80041f4 <RTC_EnterInitMode+0x1c>
  HAL_StatusTypeDef status = HAL_OK;
 8004216:	2400      	movs	r4, #0
 8004218:	e7f1      	b.n	80041fe <RTC_EnterInitMode+0x26>

0800421a <RTC_ExitInitMode>:
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
  HAL_StatusTypeDef status = HAL_OK;

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800421a:	6803      	ldr	r3, [r0, #0]
 800421c:	68da      	ldr	r2, [r3, #12]
 800421e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
{
 8004222:	b510      	push	{r4, lr}
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8004224:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8004226:	689b      	ldr	r3, [r3, #8]
 8004228:	069b      	lsls	r3, r3, #26
{
 800422a:	4604      	mov	r4, r0
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800422c:	d501      	bpl.n	8004232 <RTC_ExitInitMode+0x18>
  HAL_StatusTypeDef status = HAL_OK;
 800422e:	2000      	movs	r0, #0
      status = HAL_ERROR;
    }
  }

  return status;
}
 8004230:	bd10      	pop	{r4, pc}
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004232:	f7ff ffb9 	bl	80041a8 <HAL_RTC_WaitForSynchro>
 8004236:	2800      	cmp	r0, #0
 8004238:	d0f9      	beq.n	800422e <RTC_ExitInitMode+0x14>
      hrtc->State = HAL_RTC_STATE_ERROR;
 800423a:	2304      	movs	r3, #4
 800423c:	7763      	strb	r3, [r4, #29]
      status = HAL_ERROR;
 800423e:	2001      	movs	r0, #1
 8004240:	e7f6      	b.n	8004230 <RTC_ExitInitMode+0x16>

08004242 <HAL_RTC_Init>:
{
 8004242:	b510      	push	{r4, lr}
  if (hrtc == NULL)
 8004244:	4604      	mov	r4, r0
 8004246:	2800      	cmp	r0, #0
 8004248:	d041      	beq.n	80042ce <HAL_RTC_Init+0x8c>
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800424a:	7f43      	ldrb	r3, [r0, #29]
 800424c:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8004250:	b913      	cbnz	r3, 8004258 <HAL_RTC_Init+0x16>
    hrtc->Lock = HAL_UNLOCKED;
 8004252:	7702      	strb	r2, [r0, #28]
    HAL_RTC_MspInit(hrtc);
 8004254:	f7fe fef4 	bl	8003040 <HAL_RTC_MspInit>
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004258:	2302      	movs	r3, #2
 800425a:	7763      	strb	r3, [r4, #29]
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800425c:	6823      	ldr	r3, [r4, #0]
 800425e:	68da      	ldr	r2, [r3, #12]
 8004260:	06d2      	lsls	r2, r2, #27
 8004262:	d503      	bpl.n	800426c <HAL_RTC_Init+0x2a>
    hrtc->State = HAL_RTC_STATE_READY;
 8004264:	2301      	movs	r3, #1
 8004266:	7763      	strb	r3, [r4, #29]
 8004268:	2000      	movs	r0, #0
}
 800426a:	bd10      	pop	{r4, pc}
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800426c:	22ca      	movs	r2, #202	@ 0xca
 800426e:	625a      	str	r2, [r3, #36]	@ 0x24
 8004270:	2253      	movs	r2, #83	@ 0x53
 8004272:	625a      	str	r2, [r3, #36]	@ 0x24
    status = RTC_EnterInitMode(hrtc);
 8004274:	4620      	mov	r0, r4
 8004276:	f7ff ffaf 	bl	80041d8 <RTC_EnterInitMode>
    if (status == HAL_OK)
 800427a:	bb10      	cbnz	r0, 80042c2 <HAL_RTC_Init+0x80>
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800427c:	6823      	ldr	r3, [r4, #0]
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800427e:	6920      	ldr	r0, [r4, #16]
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8004280:	689a      	ldr	r2, [r3, #8]
 8004282:	f422 02e0 	bic.w	r2, r2, #7340032	@ 0x700000
 8004286:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800428a:	609a      	str	r2, [r3, #8]
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800428c:	6862      	ldr	r2, [r4, #4]
 800428e:	6899      	ldr	r1, [r3, #8]
 8004290:	4302      	orrs	r2, r0
 8004292:	6960      	ldr	r0, [r4, #20]
 8004294:	4302      	orrs	r2, r0
 8004296:	430a      	orrs	r2, r1
 8004298:	609a      	str	r2, [r3, #8]
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800429a:	68e2      	ldr	r2, [r4, #12]
 800429c:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800429e:	691a      	ldr	r2, [r3, #16]
 80042a0:	68a1      	ldr	r1, [r4, #8]
 80042a2:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80042a6:	611a      	str	r2, [r3, #16]
      status = RTC_ExitInitMode(hrtc);
 80042a8:	4620      	mov	r0, r4
 80042aa:	f7ff ffb6 	bl	800421a <RTC_ExitInitMode>
    if (status == HAL_OK)
 80042ae:	b940      	cbnz	r0, 80042c2 <HAL_RTC_Init+0x80>
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 80042b0:	6823      	ldr	r3, [r4, #0]
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80042b2:	69a1      	ldr	r1, [r4, #24]
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 80042b4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80042b6:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80042ba:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80042bc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80042be:	430a      	orrs	r2, r1
 80042c0:	641a      	str	r2, [r3, #64]	@ 0x40
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80042c2:	6823      	ldr	r3, [r4, #0]
 80042c4:	22ff      	movs	r2, #255	@ 0xff
 80042c6:	625a      	str	r2, [r3, #36]	@ 0x24
  if (status == HAL_OK)
 80042c8:	2800      	cmp	r0, #0
 80042ca:	d0cb      	beq.n	8004264 <HAL_RTC_Init+0x22>
 80042cc:	e7cd      	b.n	800426a <HAL_RTC_Init+0x28>
    return HAL_ERROR;
 80042ce:	2001      	movs	r0, #1
 80042d0:	e7cb      	b.n	800426a <HAL_RTC_Init+0x28>

080042d2 <RTC_ByteToBcd2>:
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
  uint32_t bcdhigh = 0U;
 80042d2:	2300      	movs	r3, #0

  while (number >= 10U)
 80042d4:	2809      	cmp	r0, #9
 80042d6:	d803      	bhi.n	80042e0 <RTC_ByteToBcd2+0xe>
  {
    bcdhigh++;
    number -= 10U;
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 80042d8:	ea40 1003 	orr.w	r0, r0, r3, lsl #4
}
 80042dc:	b2c0      	uxtb	r0, r0
 80042de:	4770      	bx	lr
    number -= 10U;
 80042e0:	380a      	subs	r0, #10
    bcdhigh++;
 80042e2:	3301      	adds	r3, #1
    number -= 10U;
 80042e4:	b2c0      	uxtb	r0, r0
 80042e6:	e7f5      	b.n	80042d4 <RTC_ByteToBcd2+0x2>

080042e8 <HAL_RTC_SetTime>:
{
 80042e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(hrtc);
 80042ec:	7f03      	ldrb	r3, [r0, #28]
 80042ee:	2b01      	cmp	r3, #1
{
 80042f0:	4606      	mov	r6, r0
 80042f2:	460f      	mov	r7, r1
 80042f4:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(hrtc);
 80042f8:	d041      	beq.n	800437e <HAL_RTC_SetTime+0x96>
 80042fa:	2301      	movs	r3, #1
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80042fc:	6831      	ldr	r1, [r6, #0]
  __HAL_LOCK(hrtc);
 80042fe:	7733      	strb	r3, [r6, #28]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004300:	7770      	strb	r0, [r6, #29]
  if (Format == RTC_FORMAT_BIN)
 8004302:	7838      	ldrb	r0, [r7, #0]
 8004304:	787d      	ldrb	r5, [r7, #1]
 8004306:	78bc      	ldrb	r4, [r7, #2]
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004308:	688b      	ldr	r3, [r1, #8]
  if (Format == RTC_FORMAT_BIN)
 800430a:	2a00      	cmp	r2, #0
 800430c:	d139      	bne.n	8004382 <HAL_RTC_SetTime+0x9a>
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800430e:	f013 0340 	ands.w	r3, r3, #64	@ 0x40
      sTime->TimeFormat = 0x00U;
 8004312:	bf08      	it	eq
 8004314:	70fb      	strbeq	r3, [r7, #3]
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8004316:	f7ff ffdc 	bl	80042d2 <RTC_ByteToBcd2>
 800431a:	4680      	mov	r8, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800431c:	4628      	mov	r0, r5
 800431e:	f7ff ffd8 	bl	80042d2 <RTC_ByteToBcd2>
 8004322:	4602      	mov	r2, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8004324:	4620      	mov	r0, r4
 8004326:	f7ff ffd4 	bl	80042d2 <RTC_ByteToBcd2>
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 800432a:	78fb      	ldrb	r3, [r7, #3]
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800432c:	ea40 5383 	orr.w	r3, r0, r3, lsl #22
 8004330:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8004334:	ea43 2402 	orr.w	r4, r3, r2, lsl #8
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004338:	23ca      	movs	r3, #202	@ 0xca
 800433a:	624b      	str	r3, [r1, #36]	@ 0x24
 800433c:	2353      	movs	r3, #83	@ 0x53
 800433e:	624b      	str	r3, [r1, #36]	@ 0x24
  status = RTC_EnterInitMode(hrtc);
 8004340:	4630      	mov	r0, r6
 8004342:	f7ff ff49 	bl	80041d8 <RTC_EnterInitMode>
  if (status == HAL_OK)
 8004346:	b9a8      	cbnz	r0, 8004374 <HAL_RTC_SetTime+0x8c>
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8004348:	6832      	ldr	r2, [r6, #0]
 800434a:	f004 347f 	and.w	r4, r4, #2139062143	@ 0x7f7f7f7f
 800434e:	f024 44fe 	bic.w	r4, r4, #2130706432	@ 0x7f000000
 8004352:	6014      	str	r4, [r2, #0]
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8004354:	6893      	ldr	r3, [r2, #8]
 8004356:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800435a:	6093      	str	r3, [r2, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800435c:	e9d7 3003 	ldrd	r3, r0, [r7, #12]
 8004360:	6891      	ldr	r1, [r2, #8]
 8004362:	4303      	orrs	r3, r0
 8004364:	430b      	orrs	r3, r1
 8004366:	6093      	str	r3, [r2, #8]
    status = RTC_ExitInitMode(hrtc);
 8004368:	4630      	mov	r0, r6
 800436a:	f7ff ff56 	bl	800421a <RTC_ExitInitMode>
  if (status == HAL_OK)
 800436e:	b908      	cbnz	r0, 8004374 <HAL_RTC_SetTime+0x8c>
    hrtc->State = HAL_RTC_STATE_READY;
 8004370:	2301      	movs	r3, #1
 8004372:	7773      	strb	r3, [r6, #29]
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004374:	6833      	ldr	r3, [r6, #0]
 8004376:	22ff      	movs	r2, #255	@ 0xff
 8004378:	625a      	str	r2, [r3, #36]	@ 0x24
  __HAL_UNLOCK(hrtc);
 800437a:	2300      	movs	r3, #0
 800437c:	7733      	strb	r3, [r6, #28]
}
 800437e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004382:	f013 0340 	ands.w	r3, r3, #64	@ 0x40
      sTime->TimeFormat = 0x00U;
 8004386:	bf08      	it	eq
 8004388:	70fb      	strbeq	r3, [r7, #3]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800438a:	022d      	lsls	r5, r5, #8
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800438c:	78fa      	ldrb	r2, [r7, #3]
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800438e:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8004392:	ea45 0304 	orr.w	r3, r5, r4
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8004396:	ea43 5482 	orr.w	r4, r3, r2, lsl #22
 800439a:	e7cd      	b.n	8004338 <HAL_RTC_SetTime+0x50>

0800439c <HAL_RTC_SetDate>:
{
 800439c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hrtc);
 800439e:	7f03      	ldrb	r3, [r0, #28]
 80043a0:	2b01      	cmp	r3, #1
{
 80043a2:	4605      	mov	r5, r0
 80043a4:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(hrtc);
 80043a8:	d027      	beq.n	80043fa <HAL_RTC_SetDate+0x5e>
 80043aa:	2301      	movs	r3, #1
 80043ac:	772b      	strb	r3, [r5, #28]
  hrtc->State = HAL_RTC_STATE_BUSY;
 80043ae:	7768      	strb	r0, [r5, #29]
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80043b0:	780e      	ldrb	r6, [r1, #0]
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80043b2:	78c8      	ldrb	r0, [r1, #3]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80043b4:	784c      	ldrb	r4, [r1, #1]
                  ((uint32_t) sDate->Date)                      | \
 80043b6:	788f      	ldrb	r7, [r1, #2]
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80043b8:	0376      	lsls	r6, r6, #13
  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80043ba:	b1fa      	cbz	r2, 80043fc <HAL_RTC_SetDate+0x60>
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80043bc:	ea46 4300 	orr.w	r3, r6, r0, lsl #16
 80043c0:	433b      	orrs	r3, r7
 80043c2:	ea43 2404 	orr.w	r4, r3, r4, lsl #8
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80043c6:	682b      	ldr	r3, [r5, #0]
 80043c8:	22ca      	movs	r2, #202	@ 0xca
 80043ca:	625a      	str	r2, [r3, #36]	@ 0x24
 80043cc:	2253      	movs	r2, #83	@ 0x53
 80043ce:	625a      	str	r2, [r3, #36]	@ 0x24
  status = RTC_EnterInitMode(hrtc);
 80043d0:	4628      	mov	r0, r5
 80043d2:	f7ff ff01 	bl	80041d8 <RTC_EnterInitMode>
  if (status == HAL_OK)
 80043d6:	b958      	cbnz	r0, 80043f0 <HAL_RTC_SetDate+0x54>
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80043d8:	682a      	ldr	r2, [r5, #0]
 80043da:	f024 447f 	bic.w	r4, r4, #4278190080	@ 0xff000000
 80043de:	f024 04c0 	bic.w	r4, r4, #192	@ 0xc0
 80043e2:	6054      	str	r4, [r2, #4]
    status = RTC_ExitInitMode(hrtc);
 80043e4:	4628      	mov	r0, r5
 80043e6:	f7ff ff18 	bl	800421a <RTC_ExitInitMode>
  if (status == HAL_OK)
 80043ea:	b908      	cbnz	r0, 80043f0 <HAL_RTC_SetDate+0x54>
    hrtc->State = HAL_RTC_STATE_READY;
 80043ec:	2301      	movs	r3, #1
 80043ee:	776b      	strb	r3, [r5, #29]
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80043f0:	682b      	ldr	r3, [r5, #0]
 80043f2:	22ff      	movs	r2, #255	@ 0xff
 80043f4:	625a      	str	r2, [r3, #36]	@ 0x24
  __HAL_UNLOCK(hrtc);
 80043f6:	2300      	movs	r3, #0
 80043f8:	772b      	strb	r3, [r5, #28]
}
 80043fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80043fc:	06e3      	lsls	r3, r4, #27
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80043fe:	bf42      	ittt	mi
 8004400:	f024 0410 	bicmi.w	r4, r4, #16
 8004404:	340a      	addmi	r4, #10
 8004406:	704c      	strbmi	r4, [r1, #1]
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004408:	f7ff ff63 	bl	80042d2 <RTC_ByteToBcd2>
 800440c:	4604      	mov	r4, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800440e:	7848      	ldrb	r0, [r1, #1]
 8004410:	f7ff ff5f 	bl	80042d2 <RTC_ByteToBcd2>
 8004414:	4602      	mov	r2, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8004416:	4638      	mov	r0, r7
 8004418:	f7ff ff5b 	bl	80042d2 <RTC_ByteToBcd2>
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800441c:	ea40 0306 	orr.w	r3, r0, r6
 8004420:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8004424:	ea43 2402 	orr.w	r4, r3, r2, lsl #8
 8004428:	e7cd      	b.n	80043c6 <HAL_RTC_SetDate+0x2a>

0800442a <RTC_Bcd2ToByte>:
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
  uint32_t tens = 0U;
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 800442a:	0903      	lsrs	r3, r0, #4
 800442c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 8004430:	f000 000f 	and.w	r0, r0, #15
 8004434:	eb00 0043 	add.w	r0, r0, r3, lsl #1
}
 8004438:	b2c0      	uxtb	r0, r0
 800443a:	4770      	bx	lr

0800443c <HAL_RTC_GetTime>:
{
 800443c:	b538      	push	{r3, r4, r5, lr}
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800443e:	6803      	ldr	r3, [r0, #0]
 8004440:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8004442:	6048      	str	r0, [r1, #4]
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8004444:	6918      	ldr	r0, [r3, #16]
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8004446:	681b      	ldr	r3, [r3, #0]
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8004448:	f3c0 000e 	ubfx	r0, r0, #0, #15
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800444c:	f3c3 2506 	ubfx	r5, r3, #8, #7
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8004450:	f003 047f 	and.w	r4, r3, #127	@ 0x7f
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8004454:	6088      	str	r0, [r1, #8]
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8004456:	f3c3 4005 	ubfx	r0, r3, #16, #6
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 800445a:	f3c3 5380 	ubfx	r3, r3, #22, #1
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 800445e:	7008      	strb	r0, [r1, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8004460:	704d      	strb	r5, [r1, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8004462:	708c      	strb	r4, [r1, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8004464:	70cb      	strb	r3, [r1, #3]
  if (Format == RTC_FORMAT_BIN)
 8004466:	b952      	cbnz	r2, 800447e <HAL_RTC_GetTime+0x42>
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8004468:	f7ff ffdf 	bl	800442a <RTC_Bcd2ToByte>
 800446c:	7008      	strb	r0, [r1, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800446e:	4628      	mov	r0, r5
 8004470:	f7ff ffdb 	bl	800442a <RTC_Bcd2ToByte>
 8004474:	7048      	strb	r0, [r1, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8004476:	4620      	mov	r0, r4
 8004478:	f7ff ffd7 	bl	800442a <RTC_Bcd2ToByte>
 800447c:	7088      	strb	r0, [r1, #2]
}
 800447e:	2000      	movs	r0, #0
 8004480:	bd38      	pop	{r3, r4, r5, pc}

08004482 <HAL_RTC_GetDate>:
{
 8004482:	b538      	push	{r3, r4, r5, lr}
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8004484:	6803      	ldr	r3, [r0, #0]
 8004486:	685b      	ldr	r3, [r3, #4]
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8004488:	f3c3 4007 	ubfx	r0, r3, #16, #8
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800448c:	f3c3 2504 	ubfx	r5, r3, #8, #5
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8004490:	f003 043f 	and.w	r4, r3, #63	@ 0x3f
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8004494:	f3c3 3342 	ubfx	r3, r3, #13, #3
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8004498:	70c8      	strb	r0, [r1, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800449a:	704d      	strb	r5, [r1, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800449c:	708c      	strb	r4, [r1, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 800449e:	700b      	strb	r3, [r1, #0]
  if (Format == RTC_FORMAT_BIN)
 80044a0:	b952      	cbnz	r2, 80044b8 <HAL_RTC_GetDate+0x36>
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80044a2:	f7ff ffc2 	bl	800442a <RTC_Bcd2ToByte>
 80044a6:	70c8      	strb	r0, [r1, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80044a8:	4628      	mov	r0, r5
 80044aa:	f7ff ffbe 	bl	800442a <RTC_Bcd2ToByte>
 80044ae:	7048      	strb	r0, [r1, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80044b0:	4620      	mov	r0, r4
 80044b2:	f7ff ffba 	bl	800442a <RTC_Bcd2ToByte>
 80044b6:	7088      	strb	r0, [r1, #2]
}
 80044b8:	2000      	movs	r0, #0
 80044ba:	bd38      	pop	{r3, r4, r5, pc}

080044bc <HAL_RTCEx_BKUPWrite>:
  uint32_t tmp = 0U;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) &(hrtc->Instance->BKP0R);
 80044bc:	6803      	ldr	r3, [r0, #0]
 80044be:	3350      	adds	r3, #80	@ 0x50
  tmp += (BackupRegister * 4U);

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 80044c0:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
}
 80044c4:	4770      	bx	lr
	...

080044c8 <SPI_WaitFlagStateUntilTimeout.constprop.0>:
  * @param  State flag state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 80044c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80044ca:	460e      	mov	r6, r1
 80044cc:	4614      	mov	r4, r2
 80044ce:	4605      	mov	r5, r0
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80044d0:	f7fe ffd4 	bl	800347c <HAL_GetTick>
 80044d4:	4434      	add	r4, r6
 80044d6:	1a24      	subs	r4, r4, r0
  tmp_tickstart = HAL_GetTick();
 80044d8:	f7fe ffd0 	bl	800347c <HAL_GetTick>

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80044dc:	4b22      	ldr	r3, [pc, #136]	@ (8004568 <SPI_WaitFlagStateUntilTimeout.constprop.0+0xa0>)
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 80044e4:	4363      	muls	r3, r4
  tmp_tickstart = HAL_GetTick();
 80044e6:	4607      	mov	r7, r0
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80044e8:	9301      	str	r3, [sp, #4]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80044ea:	682a      	ldr	r2, [r5, #0]
 80044ec:	6890      	ldr	r0, [r2, #8]
 80044ee:	f010 0080 	ands.w	r0, r0, #128	@ 0x80
 80044f2:	d02d      	beq.n	8004550 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x88>
  {
    if (Timeout != HAL_MAX_DELAY)
 80044f4:	1c73      	adds	r3, r6, #1
 80044f6:	d0f9      	beq.n	80044ec <SPI_WaitFlagStateUntilTimeout.constprop.0+0x24>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80044f8:	f7fe ffc0 	bl	800347c <HAL_GetTick>
 80044fc:	1bc0      	subs	r0, r0, r7
 80044fe:	42a0      	cmp	r0, r4
 8004500:	d328      	bcc.n	8004554 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x8c>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004502:	682b      	ldr	r3, [r5, #0]
 8004504:	685a      	ldr	r2, [r3, #4]
 8004506:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800450a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800450c:	686a      	ldr	r2, [r5, #4]
 800450e:	f5b2 7f82 	cmp.w	r2, #260	@ 0x104
 8004512:	d10a      	bne.n	800452a <SPI_WaitFlagStateUntilTimeout.constprop.0+0x62>
 8004514:	68aa      	ldr	r2, [r5, #8]
 8004516:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
 800451a:	d002      	beq.n	8004522 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x5a>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800451c:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 8004520:	d103      	bne.n	800452a <SPI_WaitFlagStateUntilTimeout.constprop.0+0x62>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004522:	681a      	ldr	r2, [r3, #0]
 8004524:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004528:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800452a:	6aaa      	ldr	r2, [r5, #40]	@ 0x28
 800452c:	f5b2 5f00 	cmp.w	r2, #8192	@ 0x2000
 8004530:	d107      	bne.n	8004542 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x7a>
        {
          SPI_RESET_CRC(hspi);
 8004532:	681a      	ldr	r2, [r3, #0]
 8004534:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004538:	601a      	str	r2, [r3, #0]
 800453a:	681a      	ldr	r2, [r3, #0]
 800453c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004540:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004542:	2301      	movs	r3, #1
 8004544:	f885 305d 	strb.w	r3, [r5, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004548:	2300      	movs	r3, #0
 800454a:	f885 305c 	strb.w	r3, [r5, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800454e:	2003      	movs	r0, #3
      count--;
    }
  }

  return HAL_OK;
}
 8004550:	b003      	add	sp, #12
 8004552:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (count == 0U)
 8004554:	9a01      	ldr	r2, [sp, #4]
      count--;
 8004556:	9b01      	ldr	r3, [sp, #4]
      if (count == 0U)
 8004558:	2a00      	cmp	r2, #0
      count--;
 800455a:	f103 33ff 	add.w	r3, r3, #4294967295
 800455e:	9301      	str	r3, [sp, #4]
 8004560:	bf08      	it	eq
 8004562:	4614      	moveq	r4, r2
 8004564:	e7c1      	b.n	80044ea <SPI_WaitFlagStateUntilTimeout.constprop.0+0x22>
 8004566:	bf00      	nop
 8004568:	20000008 	.word	0x20000008

0800456c <SPI_WaitFifoStateUntilTimeout.constprop.0>:
  * @param  State Fifo state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 800456c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8004570:	461c      	mov	r4, r3
{
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004572:	2300      	movs	r3, #0
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8004574:	4617      	mov	r7, r2
  __IO uint8_t  tmpreg8 = 0;
 8004576:	f88d 3003 	strb.w	r3, [sp, #3]
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 800457a:	4605      	mov	r5, r0
 800457c:	460e      	mov	r6, r1

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800457e:	f7fe ff7d 	bl	800347c <HAL_GetTick>
 8004582:	443c      	add	r4, r7
 8004584:	1a24      	subs	r4, r4, r0
  tmp_tickstart = HAL_GetTick();
 8004586:	f7fe ff79 	bl	800347c <HAL_GetTick>

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800458a:	4b29      	ldr	r3, [pc, #164]	@ (8004630 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xc4>)
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800458c:	f8d5 9000 	ldr.w	r9, [r5]
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	2223      	movs	r2, #35	@ 0x23
 8004594:	4353      	muls	r3, r2
 8004596:	0d1b      	lsrs	r3, r3, #20
 8004598:	4363      	muls	r3, r4
  tmp_tickstart = HAL_GetTick();
 800459a:	4680      	mov	r8, r0
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800459c:	9301      	str	r3, [sp, #4]

  while ((hspi->Instance->SR & Fifo) != State)
 800459e:	682a      	ldr	r2, [r5, #0]
 80045a0:	6890      	ldr	r0, [r2, #8]
 80045a2:	4030      	ands	r0, r6
 80045a4:	d038      	beq.n	8004618 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xac>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80045a6:	f5b6 6fc0 	cmp.w	r6, #1536	@ 0x600
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80045aa:	bf01      	itttt	eq
 80045ac:	f899 300c 	ldrbeq.w	r3, [r9, #12]
 80045b0:	b2db      	uxtbeq	r3, r3
 80045b2:	f88d 3003 	strbeq.w	r3, [sp, #3]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80045b6:	f89d 3003 	ldrbeq.w	r3, [sp, #3]
    }

    if (Timeout != HAL_MAX_DELAY)
 80045ba:	1c7b      	adds	r3, r7, #1
 80045bc:	d0f0      	beq.n	80045a0 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x34>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80045be:	f7fe ff5d 	bl	800347c <HAL_GetTick>
 80045c2:	eba0 0008 	sub.w	r0, r0, r8
 80045c6:	42a0      	cmp	r0, r4
 80045c8:	d329      	bcc.n	800461e <SPI_WaitFifoStateUntilTimeout.constprop.0+0xb2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80045ca:	682b      	ldr	r3, [r5, #0]
 80045cc:	685a      	ldr	r2, [r3, #4]
 80045ce:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80045d2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80045d4:	686a      	ldr	r2, [r5, #4]
 80045d6:	f5b2 7f82 	cmp.w	r2, #260	@ 0x104
 80045da:	d10a      	bne.n	80045f2 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x86>
 80045dc:	68aa      	ldr	r2, [r5, #8]
 80045de:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
 80045e2:	d002      	beq.n	80045ea <SPI_WaitFifoStateUntilTimeout.constprop.0+0x7e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80045e4:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 80045e8:	d103      	bne.n	80045f2 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x86>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80045ea:	681a      	ldr	r2, [r3, #0]
 80045ec:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80045f0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80045f2:	6aaa      	ldr	r2, [r5, #40]	@ 0x28
 80045f4:	f5b2 5f00 	cmp.w	r2, #8192	@ 0x2000
 80045f8:	d107      	bne.n	800460a <SPI_WaitFifoStateUntilTimeout.constprop.0+0x9e>
        {
          SPI_RESET_CRC(hspi);
 80045fa:	681a      	ldr	r2, [r3, #0]
 80045fc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004600:	601a      	str	r2, [r3, #0]
 8004602:	681a      	ldr	r2, [r3, #0]
 8004604:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004608:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800460a:	2301      	movs	r3, #1
 800460c:	f885 305d 	strb.w	r3, [r5, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004610:	2300      	movs	r3, #0
 8004612:	f885 305c 	strb.w	r3, [r5, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8004616:	2003      	movs	r0, #3
      count--;
    }
  }

  return HAL_OK;
}
 8004618:	b003      	add	sp, #12
 800461a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      if (count == 0U)
 800461e:	9a01      	ldr	r2, [sp, #4]
      count--;
 8004620:	9b01      	ldr	r3, [sp, #4]
      if (count == 0U)
 8004622:	2a00      	cmp	r2, #0
      count--;
 8004624:	f103 33ff 	add.w	r3, r3, #4294967295
 8004628:	9301      	str	r3, [sp, #4]
 800462a:	bf08      	it	eq
 800462c:	4614      	moveq	r4, r2
 800462e:	e7b6      	b.n	800459e <SPI_WaitFifoStateUntilTimeout.constprop.0+0x32>
 8004630:	20000008 	.word	0x20000008

08004634 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004634:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004636:	6843      	ldr	r3, [r0, #4]
 8004638:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
{
 800463c:	4604      	mov	r4, r0
 800463e:	460e      	mov	r6, r1
 8004640:	4617      	mov	r7, r2
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004642:	d10b      	bne.n	800465c <SPI_EndRxTransaction+0x28>
 8004644:	6883      	ldr	r3, [r0, #8]
 8004646:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800464a:	d002      	beq.n	8004652 <SPI_EndRxTransaction+0x1e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800464c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004650:	d104      	bne.n	800465c <SPI_EndRxTransaction+0x28>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004652:	6822      	ldr	r2, [r4, #0]
 8004654:	6813      	ldr	r3, [r2, #0]
 8004656:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800465a:	6013      	str	r3, [r2, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800465c:	463a      	mov	r2, r7
 800465e:	4631      	mov	r1, r6
 8004660:	4620      	mov	r0, r4
 8004662:	f7ff ff31 	bl	80044c8 <SPI_WaitFlagStateUntilTimeout.constprop.0>
 8004666:	4605      	mov	r5, r0
 8004668:	b128      	cbz	r0, 8004676 <SPI_EndRxTransaction+0x42>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800466a:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 800466c:	f043 0320 	orr.w	r3, r3, #32
 8004670:	6623      	str	r3, [r4, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004672:	2503      	movs	r5, #3
 8004674:	e013      	b.n	800469e <SPI_EndRxTransaction+0x6a>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004676:	6863      	ldr	r3, [r4, #4]
 8004678:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800467c:	d10f      	bne.n	800469e <SPI_EndRxTransaction+0x6a>
 800467e:	68a3      	ldr	r3, [r4, #8]
 8004680:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004684:	d002      	beq.n	800468c <SPI_EndRxTransaction+0x58>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004686:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800468a:	d108      	bne.n	800469e <SPI_EndRxTransaction+0x6a>
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800468c:	463b      	mov	r3, r7
 800468e:	4632      	mov	r2, r6
 8004690:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8004694:	4620      	mov	r0, r4
 8004696:	f7ff ff69 	bl	800456c <SPI_WaitFifoStateUntilTimeout.constprop.0>
 800469a:	2800      	cmp	r0, #0
 800469c:	d1e5      	bne.n	800466a <SPI_EndRxTransaction+0x36>
      return HAL_TIMEOUT;
    }
  }
  return HAL_OK;
}
 800469e:	4628      	mov	r0, r5
 80046a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080046a2 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80046a2:	b570      	push	{r4, r5, r6, lr}
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80046a4:	4613      	mov	r3, r2
{
 80046a6:	460d      	mov	r5, r1
 80046a8:	4616      	mov	r6, r2
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80046aa:	460a      	mov	r2, r1
 80046ac:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
{
 80046b0:	4604      	mov	r4, r0
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80046b2:	f7ff ff5b 	bl	800456c <SPI_WaitFifoStateUntilTimeout.constprop.0>
 80046b6:	b128      	cbz	r0, 80046c4 <SPI_EndRxTxTransaction+0x22>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80046b8:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 80046ba:	f043 0320 	orr.w	r3, r3, #32
 80046be:	6623      	str	r3, [r4, #96]	@ 0x60
    return HAL_TIMEOUT;
 80046c0:	2003      	movs	r0, #3
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  return HAL_OK;
}
 80046c2:	bd70      	pop	{r4, r5, r6, pc}
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80046c4:	4632      	mov	r2, r6
 80046c6:	4629      	mov	r1, r5
 80046c8:	4620      	mov	r0, r4
 80046ca:	f7ff fefd 	bl	80044c8 <SPI_WaitFlagStateUntilTimeout.constprop.0>
 80046ce:	2800      	cmp	r0, #0
 80046d0:	d1f2      	bne.n	80046b8 <SPI_EndRxTxTransaction+0x16>
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80046d2:	4633      	mov	r3, r6
 80046d4:	462a      	mov	r2, r5
 80046d6:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80046da:	4620      	mov	r0, r4
 80046dc:	f7ff ff46 	bl	800456c <SPI_WaitFifoStateUntilTimeout.constprop.0>
 80046e0:	2800      	cmp	r0, #0
 80046e2:	d0ee      	beq.n	80046c2 <SPI_EndRxTxTransaction+0x20>
 80046e4:	e7e8      	b.n	80046b8 <SPI_EndRxTxTransaction+0x16>

080046e6 <HAL_SPI_Init>:
{
 80046e6:	b570      	push	{r4, r5, r6, lr}
  if (hspi == NULL)
 80046e8:	4604      	mov	r4, r0
 80046ea:	2800      	cmp	r0, #0
 80046ec:	d067      	beq.n	80047be <HAL_SPI_Init+0xd8>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80046ee:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d15d      	bne.n	80047b0 <HAL_SPI_Init+0xca>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80046f4:	6842      	ldr	r2, [r0, #4]
 80046f6:	f5b2 7f82 	cmp.w	r2, #260	@ 0x104
 80046fa:	d000      	beq.n	80046fe <HAL_SPI_Init+0x18>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80046fc:	61c3      	str	r3, [r0, #28]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80046fe:	2300      	movs	r3, #0
 8004700:	62a3      	str	r3, [r4, #40]	@ 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8004702:	f894 305d 	ldrb.w	r3, [r4, #93]	@ 0x5d
 8004706:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800470a:	b923      	cbnz	r3, 8004716 <HAL_SPI_Init+0x30>
    hspi->Lock = HAL_UNLOCKED;
 800470c:	f884 205c 	strb.w	r2, [r4, #92]	@ 0x5c
    HAL_SPI_MspInit(hspi);
 8004710:	4620      	mov	r0, r4
 8004712:	f7fe fca9 	bl	8003068 <HAL_SPI_MspInit>
  __HAL_SPI_DISABLE(hspi);
 8004716:	6822      	ldr	r2, [r4, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004718:	68e0      	ldr	r0, [r4, #12]
  hspi->State = HAL_SPI_STATE_BUSY;
 800471a:	2302      	movs	r3, #2
 800471c:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
  __HAL_SPI_DISABLE(hspi);
 8004720:	6813      	ldr	r3, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004722:	f5b0 6fe0 	cmp.w	r0, #1792	@ 0x700
  __HAL_SPI_DISABLE(hspi);
 8004726:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800472a:	6013      	str	r3, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800472c:	f04f 0300 	mov.w	r3, #0
 8004730:	d942      	bls.n	80047b8 <HAL_SPI_Init+0xd2>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004732:	461d      	mov	r5, r3
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004734:	f5b0 6f70 	cmp.w	r0, #3840	@ 0xf00
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004738:	bf18      	it	ne
 800473a:	62a3      	strne	r3, [r4, #40]	@ 0x28
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800473c:	68a6      	ldr	r6, [r4, #8]
 800473e:	6863      	ldr	r3, [r4, #4]
 8004740:	69a1      	ldr	r1, [r4, #24]
 8004742:	f406 4604 	and.w	r6, r6, #33792	@ 0x8400
 8004746:	f403 7382 	and.w	r3, r3, #260	@ 0x104
 800474a:	4333      	orrs	r3, r6
 800474c:	6926      	ldr	r6, [r4, #16]
 800474e:	f006 0602 	and.w	r6, r6, #2
 8004752:	4333      	orrs	r3, r6
 8004754:	6966      	ldr	r6, [r4, #20]
 8004756:	f006 0601 	and.w	r6, r6, #1
 800475a:	4333      	orrs	r3, r6
 800475c:	f401 7600 	and.w	r6, r1, #512	@ 0x200
 8004760:	4333      	orrs	r3, r6
 8004762:	69e6      	ldr	r6, [r4, #28]
 8004764:	f006 0638 	and.w	r6, r6, #56	@ 0x38
 8004768:	4333      	orrs	r3, r6
 800476a:	6a26      	ldr	r6, [r4, #32]
 800476c:	f006 0680 	and.w	r6, r6, #128	@ 0x80
 8004770:	4333      	orrs	r3, r6
 8004772:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8004774:	f406 5600 	and.w	r6, r6, #8192	@ 0x2000
 8004778:	4333      	orrs	r3, r6
 800477a:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800477c:	6b66      	ldr	r6, [r4, #52]	@ 0x34
 800477e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8004780:	f006 0608 	and.w	r6, r6, #8
 8004784:	f003 0310 	and.w	r3, r3, #16
 8004788:	f400 6070 	and.w	r0, r0, #3840	@ 0xf00
 800478c:	4333      	orrs	r3, r6
 800478e:	0c09      	lsrs	r1, r1, #16
 8004790:	4303      	orrs	r3, r0
 8004792:	f001 0104 	and.w	r1, r1, #4
 8004796:	430b      	orrs	r3, r1
 8004798:	432b      	orrs	r3, r5
 800479a:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800479c:	69d3      	ldr	r3, [r2, #28]
 800479e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80047a2:	61d3      	str	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80047a4:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 80047a6:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80047a8:	6620      	str	r0, [r4, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80047aa:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
}
 80047ae:	bd70      	pop	{r4, r5, r6, pc}
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80047b0:	2300      	movs	r3, #0
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80047b2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80047b6:	e7a2      	b.n	80046fe <HAL_SPI_Init+0x18>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80047b8:	f44f 5580 	mov.w	r5, #4096	@ 0x1000
 80047bc:	e7bc      	b.n	8004738 <HAL_SPI_Init+0x52>
    return HAL_ERROR;
 80047be:	2001      	movs	r0, #1
 80047c0:	e7f5      	b.n	80047ae <HAL_SPI_Init+0xc8>

080047c2 <HAL_SPI_Transmit>:
{
 80047c2:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80047c6:	461f      	mov	r7, r3
  __HAL_LOCK(hspi);
 80047c8:	f890 305c 	ldrb.w	r3, [r0, #92]	@ 0x5c
 80047cc:	2b01      	cmp	r3, #1
{
 80047ce:	4604      	mov	r4, r0
 80047d0:	460d      	mov	r5, r1
 80047d2:	4690      	mov	r8, r2
  __HAL_LOCK(hspi);
 80047d4:	f000 80bc 	beq.w	8004950 <HAL_SPI_Transmit+0x18e>
 80047d8:	2301      	movs	r3, #1
 80047da:	f880 305c 	strb.w	r3, [r0, #92]	@ 0x5c
  tickstart = HAL_GetTick();
 80047de:	f7fe fe4d 	bl	800347c <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 80047e2:	f894 305d 	ldrb.w	r3, [r4, #93]	@ 0x5d
 80047e6:	2b01      	cmp	r3, #1
  tickstart = HAL_GetTick();
 80047e8:	4682      	mov	sl, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 80047ea:	fa5f f983 	uxtb.w	r9, r3
 80047ee:	f040 80ac 	bne.w	800494a <HAL_SPI_Transmit+0x188>
  if ((pData == NULL) || (Size == 0U))
 80047f2:	2d00      	cmp	r5, #0
 80047f4:	d069      	beq.n	80048ca <HAL_SPI_Transmit+0x108>
 80047f6:	f1b8 0f00 	cmp.w	r8, #0
 80047fa:	d066      	beq.n	80048ca <HAL_SPI_Transmit+0x108>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80047fc:	2303      	movs	r3, #3
 80047fe:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004802:	2300      	movs	r3, #0
 8004804:	6623      	str	r3, [r4, #96]	@ 0x60
  hspi->RxISR       = NULL;
 8004806:	e9c4 3313 	strd	r3, r3, [r4, #76]	@ 0x4c
  hspi->TxXferCount = Size;
 800480a:	f8a4 803e 	strh.w	r8, [r4, #62]	@ 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800480e:	6423      	str	r3, [r4, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8004810:	f8a4 3044 	strh.w	r3, [r4, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8004814:	f8a4 3046 	strh.w	r3, [r4, #70]	@ 0x46
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004818:	68a3      	ldr	r3, [r4, #8]
    __HAL_SPI_DISABLE(hspi);
 800481a:	6826      	ldr	r6, [r4, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800481c:	63a5      	str	r5, [r4, #56]	@ 0x38
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800481e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
  hspi->TxXferSize  = Size;
 8004822:	f8a4 803c 	strh.w	r8, [r4, #60]	@ 0x3c
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004826:	d107      	bne.n	8004838 <HAL_SPI_Transmit+0x76>
    __HAL_SPI_DISABLE(hspi);
 8004828:	6833      	ldr	r3, [r6, #0]
 800482a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800482e:	6033      	str	r3, [r6, #0]
    SPI_1LINE_TX(hspi);
 8004830:	6833      	ldr	r3, [r6, #0]
 8004832:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004836:	6033      	str	r3, [r6, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004838:	6833      	ldr	r3, [r6, #0]
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800483a:	6862      	ldr	r2, [r4, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800483c:	065b      	lsls	r3, r3, #25
    __HAL_SPI_ENABLE(hspi);
 800483e:	bf5e      	ittt	pl
 8004840:	6833      	ldrpl	r3, [r6, #0]
 8004842:	f043 0340 	orrpl.w	r3, r3, #64	@ 0x40
 8004846:	6033      	strpl	r3, [r6, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004848:	68e3      	ldr	r3, [r4, #12]
 800484a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800484e:	d943      	bls.n	80048d8 <HAL_SPI_Transmit+0x116>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004850:	b112      	cbz	r2, 8004858 <HAL_SPI_Transmit+0x96>
 8004852:	f1b8 0f01 	cmp.w	r8, #1
 8004856:	d107      	bne.n	8004868 <HAL_SPI_Transmit+0xa6>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004858:	f835 3b02 	ldrh.w	r3, [r5], #2
 800485c:	60f3      	str	r3, [r6, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800485e:	63a5      	str	r5, [r4, #56]	@ 0x38
        hspi->TxXferCount--;
 8004860:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8004862:	3b01      	subs	r3, #1
 8004864:	b29b      	uxth	r3, r3
 8004866:	87e3      	strh	r3, [r4, #62]	@ 0x3e
    while (hspi->TxXferCount > 0U)
 8004868:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 800486a:	b29b      	uxth	r3, r3
 800486c:	b9b3      	cbnz	r3, 800489c <HAL_SPI_Transmit+0xda>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800486e:	4652      	mov	r2, sl
 8004870:	4639      	mov	r1, r7
 8004872:	4620      	mov	r0, r4
 8004874:	f7ff ff15 	bl	80046a2 <SPI_EndRxTxTransaction>
 8004878:	2800      	cmp	r0, #0
 800487a:	d163      	bne.n	8004944 <HAL_SPI_Transmit+0x182>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800487c:	68a3      	ldr	r3, [r4, #8]
 800487e:	b933      	cbnz	r3, 800488e <HAL_SPI_Transmit+0xcc>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004880:	9301      	str	r3, [sp, #4]
 8004882:	6823      	ldr	r3, [r4, #0]
 8004884:	68da      	ldr	r2, [r3, #12]
 8004886:	9201      	str	r2, [sp, #4]
 8004888:	689b      	ldr	r3, [r3, #8]
 800488a:	9301      	str	r3, [sp, #4]
 800488c:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800488e:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8004890:	b9db      	cbnz	r3, 80048ca <HAL_SPI_Transmit+0x108>
    hspi->State = HAL_SPI_STATE_READY;
 8004892:	2201      	movs	r2, #1
 8004894:	f884 205d 	strb.w	r2, [r4, #93]	@ 0x5d
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004898:	4699      	mov	r9, r3
 800489a:	e016      	b.n	80048ca <HAL_SPI_Transmit+0x108>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800489c:	6822      	ldr	r2, [r4, #0]
 800489e:	6893      	ldr	r3, [r2, #8]
 80048a0:	079d      	lsls	r5, r3, #30
 80048a2:	d505      	bpl.n	80048b0 <HAL_SPI_Transmit+0xee>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80048a4:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80048a6:	f833 1b02 	ldrh.w	r1, [r3], #2
 80048aa:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80048ac:	63a3      	str	r3, [r4, #56]	@ 0x38
 80048ae:	e7d7      	b.n	8004860 <HAL_SPI_Transmit+0x9e>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80048b0:	f7fe fde4 	bl	800347c <HAL_GetTick>
 80048b4:	eba0 000a 	sub.w	r0, r0, sl
 80048b8:	42b8      	cmp	r0, r7
 80048ba:	d3d5      	bcc.n	8004868 <HAL_SPI_Transmit+0xa6>
 80048bc:	1c78      	adds	r0, r7, #1
 80048be:	d0d3      	beq.n	8004868 <HAL_SPI_Transmit+0xa6>
          hspi->State = HAL_SPI_STATE_READY;
 80048c0:	2301      	movs	r3, #1
 80048c2:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
          errorcode = HAL_TIMEOUT;
 80048c6:	f04f 0903 	mov.w	r9, #3
  __HAL_UNLOCK(hspi);
 80048ca:	2300      	movs	r3, #0
 80048cc:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
}
 80048d0:	4648      	mov	r0, r9
 80048d2:	b002      	add	sp, #8
 80048d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80048d8:	b112      	cbz	r2, 80048e0 <HAL_SPI_Transmit+0x11e>
 80048da:	f1b8 0f01 	cmp.w	r8, #1
 80048de:	d113      	bne.n	8004908 <HAL_SPI_Transmit+0x146>
      if (hspi->TxXferCount > 1U)
 80048e0:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80048e2:	b29b      	uxth	r3, r3
 80048e4:	2b01      	cmp	r3, #1
 80048e6:	d906      	bls.n	80048f6 <HAL_SPI_Transmit+0x134>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80048e8:	f835 3b02 	ldrh.w	r3, [r5], #2
 80048ec:	60f3      	str	r3, [r6, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80048ee:	63a5      	str	r5, [r4, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80048f0:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80048f2:	3b02      	subs	r3, #2
 80048f4:	e006      	b.n	8004904 <HAL_SPI_Transmit+0x142>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80048f6:	782b      	ldrb	r3, [r5, #0]
 80048f8:	7333      	strb	r3, [r6, #12]
        hspi->pTxBuffPtr ++;
 80048fa:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80048fc:	3301      	adds	r3, #1
 80048fe:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->TxXferCount--;
 8004900:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8004902:	3b01      	subs	r3, #1
 8004904:	b29b      	uxth	r3, r3
 8004906:	87e3      	strh	r3, [r4, #62]	@ 0x3e
    while (hspi->TxXferCount > 0U)
 8004908:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 800490a:	b29b      	uxth	r3, r3
 800490c:	2b00      	cmp	r3, #0
 800490e:	d0ae      	beq.n	800486e <HAL_SPI_Transmit+0xac>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004910:	6822      	ldr	r2, [r4, #0]
 8004912:	6893      	ldr	r3, [r2, #8]
 8004914:	0799      	lsls	r1, r3, #30
 8004916:	d50c      	bpl.n	8004932 <HAL_SPI_Transmit+0x170>
        if (hspi->TxXferCount > 1U)
 8004918:	8fe1      	ldrh	r1, [r4, #62]	@ 0x3e
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800491a:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
        if (hspi->TxXferCount > 1U)
 800491c:	b289      	uxth	r1, r1
 800491e:	2901      	cmp	r1, #1
 8004920:	d904      	bls.n	800492c <HAL_SPI_Transmit+0x16a>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004922:	f833 1b02 	ldrh.w	r1, [r3], #2
 8004926:	60d1      	str	r1, [r2, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004928:	63a3      	str	r3, [r4, #56]	@ 0x38
 800492a:	e7e1      	b.n	80048f0 <HAL_SPI_Transmit+0x12e>
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800492c:	781b      	ldrb	r3, [r3, #0]
 800492e:	7313      	strb	r3, [r2, #12]
          hspi->pTxBuffPtr++;
 8004930:	e7e3      	b.n	80048fa <HAL_SPI_Transmit+0x138>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004932:	f7fe fda3 	bl	800347c <HAL_GetTick>
 8004936:	eba0 000a 	sub.w	r0, r0, sl
 800493a:	42b8      	cmp	r0, r7
 800493c:	d3e4      	bcc.n	8004908 <HAL_SPI_Transmit+0x146>
 800493e:	1c7b      	adds	r3, r7, #1
 8004940:	d0e2      	beq.n	8004908 <HAL_SPI_Transmit+0x146>
 8004942:	e7bd      	b.n	80048c0 <HAL_SPI_Transmit+0xfe>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004944:	2320      	movs	r3, #32
 8004946:	6623      	str	r3, [r4, #96]	@ 0x60
 8004948:	e798      	b.n	800487c <HAL_SPI_Transmit+0xba>
    errorcode = HAL_BUSY;
 800494a:	f04f 0902 	mov.w	r9, #2
 800494e:	e7bc      	b.n	80048ca <HAL_SPI_Transmit+0x108>
  __HAL_LOCK(hspi);
 8004950:	f04f 0902 	mov.w	r9, #2
 8004954:	e7bc      	b.n	80048d0 <HAL_SPI_Transmit+0x10e>

08004956 <HAL_SPI_TransmitReceive>:
{
 8004956:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800495a:	461e      	mov	r6, r3
  __HAL_LOCK(hspi);
 800495c:	f890 305c 	ldrb.w	r3, [r0, #92]	@ 0x5c
{
 8004960:	9f08      	ldr	r7, [sp, #32]
  __HAL_LOCK(hspi);
 8004962:	2b01      	cmp	r3, #1
{
 8004964:	4604      	mov	r4, r0
 8004966:	460d      	mov	r5, r1
 8004968:	4691      	mov	r9, r2
  __HAL_LOCK(hspi);
 800496a:	f000 8122 	beq.w	8004bb2 <HAL_SPI_TransmitReceive+0x25c>
 800496e:	2301      	movs	r3, #1
 8004970:	f880 305c 	strb.w	r3, [r0, #92]	@ 0x5c
  tickstart = HAL_GetTick();
 8004974:	f7fe fd82 	bl	800347c <HAL_GetTick>
  tmp_state           = hspi->State;
 8004978:	f894 205d 	ldrb.w	r2, [r4, #93]	@ 0x5d
  tmp_mode            = hspi->Init.Mode;
 800497c:	6863      	ldr	r3, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800497e:	2a01      	cmp	r2, #1
  tickstart = HAL_GetTick();
 8004980:	4680      	mov	r8, r0
  tmp_state           = hspi->State;
 8004982:	b2d1      	uxtb	r1, r2
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004984:	d00a      	beq.n	800499c <HAL_SPI_TransmitReceive+0x46>
 8004986:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800498a:	f040 8110 	bne.w	8004bae <HAL_SPI_TransmitReceive+0x258>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800498e:	68a2      	ldr	r2, [r4, #8]
 8004990:	2a00      	cmp	r2, #0
 8004992:	f040 810c 	bne.w	8004bae <HAL_SPI_TransmitReceive+0x258>
 8004996:	2904      	cmp	r1, #4
 8004998:	f040 8109 	bne.w	8004bae <HAL_SPI_TransmitReceive+0x258>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800499c:	b92d      	cbnz	r5, 80049aa <HAL_SPI_TransmitReceive+0x54>
    errorcode = HAL_ERROR;
 800499e:	2001      	movs	r0, #1
  __HAL_UNLOCK(hspi);
 80049a0:	2300      	movs	r3, #0
 80049a2:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
}
 80049a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80049aa:	f1b9 0f00 	cmp.w	r9, #0
 80049ae:	d0f6      	beq.n	800499e <HAL_SPI_TransmitReceive+0x48>
 80049b0:	2e00      	cmp	r6, #0
 80049b2:	d0f4      	beq.n	800499e <HAL_SPI_TransmitReceive+0x48>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80049b4:	f894 205d 	ldrb.w	r2, [r4, #93]	@ 0x5d
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80049b8:	68e0      	ldr	r0, [r4, #12]
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80049ba:	6821      	ldr	r1, [r4, #0]
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80049bc:	f8c4 9040 	str.w	r9, [r4, #64]	@ 0x40
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80049c0:	2a04      	cmp	r2, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80049c2:	bf1c      	itt	ne
 80049c4:	2205      	movne	r2, #5
 80049c6:	f884 205d 	strbne.w	r2, [r4, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80049ca:	2200      	movs	r2, #0
 80049cc:	6622      	str	r2, [r4, #96]	@ 0x60
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80049ce:	f5b0 6fe0 	cmp.w	r0, #1792	@ 0x700
  hspi->RxXferCount = Size;
 80049d2:	f8a4 6046 	strh.w	r6, [r4, #70]	@ 0x46
  hspi->TxXferCount = Size;
 80049d6:	87e6      	strh	r6, [r4, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80049d8:	e9c4 2213 	strd	r2, r2, [r4, #76]	@ 0x4c
  hspi->RxXferSize  = Size;
 80049dc:	f8a4 6044 	strh.w	r6, [r4, #68]	@ 0x44
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80049e0:	684a      	ldr	r2, [r1, #4]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80049e2:	63a5      	str	r5, [r4, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80049e4:	87a6      	strh	r6, [r4, #60]	@ 0x3c
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80049e6:	d801      	bhi.n	80049ec <HAL_SPI_TransmitReceive+0x96>
 80049e8:	2e01      	cmp	r6, #1
 80049ea:	d02e      	beq.n	8004a4a <HAL_SPI_TransmitReceive+0xf4>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80049ec:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80049f0:	604a      	str	r2, [r1, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80049f2:	680a      	ldr	r2, [r1, #0]
 80049f4:	0652      	lsls	r2, r2, #25
    __HAL_SPI_ENABLE(hspi);
 80049f6:	bf5e      	ittt	pl
 80049f8:	680a      	ldrpl	r2, [r1, #0]
 80049fa:	f042 0240 	orrpl.w	r2, r2, #64	@ 0x40
 80049fe:	600a      	strpl	r2, [r1, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004a00:	f5b0 6fe0 	cmp.w	r0, #1792	@ 0x700
 8004a04:	d957      	bls.n	8004ab6 <HAL_SPI_TransmitReceive+0x160>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004a06:	b10b      	cbz	r3, 8004a0c <HAL_SPI_TransmitReceive+0xb6>
 8004a08:	2e01      	cmp	r6, #1
 8004a0a:	d107      	bne.n	8004a1c <HAL_SPI_TransmitReceive+0xc6>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004a0c:	f835 3b02 	ldrh.w	r3, [r5], #2
 8004a10:	60cb      	str	r3, [r1, #12]
      hspi->TxXferCount--;
 8004a12:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004a14:	63a5      	str	r5, [r4, #56]	@ 0x38
      hspi->TxXferCount--;
 8004a16:	3b01      	subs	r3, #1
 8004a18:	b29b      	uxth	r3, r3
 8004a1a:	87e3      	strh	r3, [r4, #62]	@ 0x3e
        txallowed = 1U;
 8004a1c:	2501      	movs	r5, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004a1e:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8004a20:	b29b      	uxth	r3, r3
 8004a22:	b9ab      	cbnz	r3, 8004a50 <HAL_SPI_TransmitReceive+0xfa>
 8004a24:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 8004a28:	b29b      	uxth	r3, r3
 8004a2a:	b98b      	cbnz	r3, 8004a50 <HAL_SPI_TransmitReceive+0xfa>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004a2c:	4642      	mov	r2, r8
 8004a2e:	4639      	mov	r1, r7
 8004a30:	4620      	mov	r0, r4
 8004a32:	f7ff fe36 	bl	80046a2 <SPI_EndRxTxTransaction>
 8004a36:	2800      	cmp	r0, #0
 8004a38:	f040 80b5 	bne.w	8004ba6 <HAL_SPI_TransmitReceive+0x250>
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004a3c:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d1ad      	bne.n	800499e <HAL_SPI_TransmitReceive+0x48>
    hspi->State = HAL_SPI_STATE_READY;
 8004a42:	2301      	movs	r3, #1
 8004a44:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
 8004a48:	e7aa      	b.n	80049a0 <HAL_SPI_TransmitReceive+0x4a>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004a4a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004a4e:	e7cf      	b.n	80049f0 <HAL_SPI_TransmitReceive+0x9a>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004a50:	6821      	ldr	r1, [r4, #0]
 8004a52:	688b      	ldr	r3, [r1, #8]
 8004a54:	079e      	lsls	r6, r3, #30
 8004a56:	d50d      	bpl.n	8004a74 <HAL_SPI_TransmitReceive+0x11e>
 8004a58:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8004a5a:	b29b      	uxth	r3, r3
 8004a5c:	b153      	cbz	r3, 8004a74 <HAL_SPI_TransmitReceive+0x11e>
 8004a5e:	b145      	cbz	r5, 8004a72 <HAL_SPI_TransmitReceive+0x11c>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004a60:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8004a62:	f833 2b02 	ldrh.w	r2, [r3], #2
 8004a66:	60ca      	str	r2, [r1, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004a68:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->TxXferCount--;
 8004a6a:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8004a6c:	3b01      	subs	r3, #1
 8004a6e:	b29b      	uxth	r3, r3
 8004a70:	87e3      	strh	r3, [r4, #62]	@ 0x3e
        txallowed = 0U;
 8004a72:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004a74:	688a      	ldr	r2, [r1, #8]
 8004a76:	f012 0201 	ands.w	r2, r2, #1
 8004a7a:	d00f      	beq.n	8004a9c <HAL_SPI_TransmitReceive+0x146>
 8004a7c:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 8004a80:	b29b      	uxth	r3, r3
 8004a82:	b15b      	cbz	r3, 8004a9c <HAL_SPI_TransmitReceive+0x146>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004a84:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004a86:	68c9      	ldr	r1, [r1, #12]
 8004a88:	f823 1b02 	strh.w	r1, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004a8c:	6423      	str	r3, [r4, #64]	@ 0x40
        hspi->RxXferCount--;
 8004a8e:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 8004a92:	3b01      	subs	r3, #1
 8004a94:	b29b      	uxth	r3, r3
 8004a96:	f8a4 3046 	strh.w	r3, [r4, #70]	@ 0x46
        txallowed = 1U;
 8004a9a:	4615      	mov	r5, r2
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004a9c:	f7fe fcee 	bl	800347c <HAL_GetTick>
 8004aa0:	eba0 0008 	sub.w	r0, r0, r8
 8004aa4:	42b8      	cmp	r0, r7
 8004aa6:	d3ba      	bcc.n	8004a1e <HAL_SPI_TransmitReceive+0xc8>
 8004aa8:	1c78      	adds	r0, r7, #1
 8004aaa:	d0b8      	beq.n	8004a1e <HAL_SPI_TransmitReceive+0xc8>
        hspi->State = HAL_SPI_STATE_READY;
 8004aac:	2301      	movs	r3, #1
 8004aae:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
        errorcode = HAL_TIMEOUT;
 8004ab2:	2003      	movs	r0, #3
 8004ab4:	e774      	b.n	80049a0 <HAL_SPI_TransmitReceive+0x4a>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004ab6:	b10b      	cbz	r3, 8004abc <HAL_SPI_TransmitReceive+0x166>
 8004ab8:	2e01      	cmp	r6, #1
 8004aba:	d10b      	bne.n	8004ad4 <HAL_SPI_TransmitReceive+0x17e>
      if (hspi->TxXferCount > 1U)
 8004abc:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8004abe:	b29b      	uxth	r3, r3
 8004ac0:	2b01      	cmp	r3, #1
 8004ac2:	d909      	bls.n	8004ad8 <HAL_SPI_TransmitReceive+0x182>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004ac4:	f835 3b02 	ldrh.w	r3, [r5], #2
 8004ac8:	60cb      	str	r3, [r1, #12]
        hspi->TxXferCount -= 2U;
 8004aca:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004acc:	63a5      	str	r5, [r4, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8004ace:	3b02      	subs	r3, #2
        hspi->TxXferCount--;
 8004ad0:	b29b      	uxth	r3, r3
 8004ad2:	87e3      	strh	r3, [r4, #62]	@ 0x3e
        txallowed = 1U;
 8004ad4:	2501      	movs	r5, #1
 8004ad6:	e048      	b.n	8004b6a <HAL_SPI_TransmitReceive+0x214>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004ad8:	782b      	ldrb	r3, [r5, #0]
 8004ada:	730b      	strb	r3, [r1, #12]
        hspi->pTxBuffPtr++;
 8004adc:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8004ade:	3301      	adds	r3, #1
 8004ae0:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->TxXferCount--;
 8004ae2:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8004ae4:	3b01      	subs	r3, #1
 8004ae6:	e7f3      	b.n	8004ad0 <HAL_SPI_TransmitReceive+0x17a>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004ae8:	6822      	ldr	r2, [r4, #0]
 8004aea:	6893      	ldr	r3, [r2, #8]
 8004aec:	0799      	lsls	r1, r3, #30
 8004aee:	d511      	bpl.n	8004b14 <HAL_SPI_TransmitReceive+0x1be>
 8004af0:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8004af2:	b29b      	uxth	r3, r3
 8004af4:	b173      	cbz	r3, 8004b14 <HAL_SPI_TransmitReceive+0x1be>
 8004af6:	b165      	cbz	r5, 8004b12 <HAL_SPI_TransmitReceive+0x1bc>
        if (hspi->TxXferCount > 1U)
 8004af8:	8fe1      	ldrh	r1, [r4, #62]	@ 0x3e
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004afa:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
        if (hspi->TxXferCount > 1U)
 8004afc:	b289      	uxth	r1, r1
 8004afe:	2901      	cmp	r1, #1
 8004b00:	d93d      	bls.n	8004b7e <HAL_SPI_TransmitReceive+0x228>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004b02:	f833 1b02 	ldrh.w	r1, [r3], #2
 8004b06:	60d1      	str	r1, [r2, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b08:	63a3      	str	r3, [r4, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8004b0a:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8004b0c:	3b02      	subs	r3, #2
 8004b0e:	b29b      	uxth	r3, r3
 8004b10:	87e3      	strh	r3, [r4, #62]	@ 0x3e
        txallowed = 0U;
 8004b12:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004b14:	6822      	ldr	r2, [r4, #0]
 8004b16:	6891      	ldr	r1, [r2, #8]
 8004b18:	f011 0101 	ands.w	r1, r1, #1
 8004b1c:	d01d      	beq.n	8004b5a <HAL_SPI_TransmitReceive+0x204>
 8004b1e:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 8004b22:	b29b      	uxth	r3, r3
 8004b24:	b1cb      	cbz	r3, 8004b5a <HAL_SPI_TransmitReceive+0x204>
        if (hspi->RxXferCount > 1U)
 8004b26:	f8b4 0046 	ldrh.w	r0, [r4, #70]	@ 0x46
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004b2a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
        if (hspi->RxXferCount > 1U)
 8004b2c:	b280      	uxth	r0, r0
 8004b2e:	2801      	cmp	r0, #1
 8004b30:	d92d      	bls.n	8004b8e <HAL_SPI_TransmitReceive+0x238>
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004b32:	68d0      	ldr	r0, [r2, #12]
 8004b34:	f823 0b02 	strh.w	r0, [r3], #2
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8004b38:	6423      	str	r3, [r4, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8004b3a:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 8004b3e:	3b02      	subs	r3, #2
 8004b40:	b29b      	uxth	r3, r3
 8004b42:	f8a4 3046 	strh.w	r3, [r4, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8004b46:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 8004b4a:	b29b      	uxth	r3, r3
 8004b4c:	2b01      	cmp	r3, #1
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004b4e:	bf9e      	ittt	ls
 8004b50:	6853      	ldrls	r3, [r2, #4]
 8004b52:	f443 5380 	orrls.w	r3, r3, #4096	@ 0x1000
 8004b56:	6053      	strls	r3, [r2, #4]
        txallowed = 1U;
 8004b58:	460d      	mov	r5, r1
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004b5a:	f7fe fc8f 	bl	800347c <HAL_GetTick>
 8004b5e:	eba0 0008 	sub.w	r0, r0, r8
 8004b62:	42b8      	cmp	r0, r7
 8004b64:	d301      	bcc.n	8004b6a <HAL_SPI_TransmitReceive+0x214>
 8004b66:	1c7b      	adds	r3, r7, #1
 8004b68:	d1a0      	bne.n	8004aac <HAL_SPI_TransmitReceive+0x156>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004b6a:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8004b6c:	b29b      	uxth	r3, r3
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d1ba      	bne.n	8004ae8 <HAL_SPI_TransmitReceive+0x192>
 8004b72:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 8004b76:	b29b      	uxth	r3, r3
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d1b5      	bne.n	8004ae8 <HAL_SPI_TransmitReceive+0x192>
 8004b7c:	e756      	b.n	8004a2c <HAL_SPI_TransmitReceive+0xd6>
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004b7e:	781b      	ldrb	r3, [r3, #0]
 8004b80:	7313      	strb	r3, [r2, #12]
          hspi->pTxBuffPtr++;
 8004b82:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8004b84:	3301      	adds	r3, #1
 8004b86:	63a3      	str	r3, [r4, #56]	@ 0x38
          hspi->TxXferCount--;
 8004b88:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8004b8a:	3b01      	subs	r3, #1
 8004b8c:	e7bf      	b.n	8004b0e <HAL_SPI_TransmitReceive+0x1b8>
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004b8e:	7b12      	ldrb	r2, [r2, #12]
 8004b90:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8004b92:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004b94:	3301      	adds	r3, #1
 8004b96:	6423      	str	r3, [r4, #64]	@ 0x40
          hspi->RxXferCount--;
 8004b98:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 8004b9c:	3b01      	subs	r3, #1
 8004b9e:	b29b      	uxth	r3, r3
 8004ba0:	f8a4 3046 	strh.w	r3, [r4, #70]	@ 0x46
 8004ba4:	e7d8      	b.n	8004b58 <HAL_SPI_TransmitReceive+0x202>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004ba6:	2320      	movs	r3, #32
 8004ba8:	6623      	str	r3, [r4, #96]	@ 0x60
    errorcode = HAL_ERROR;
 8004baa:	2001      	movs	r0, #1
 8004bac:	e746      	b.n	8004a3c <HAL_SPI_TransmitReceive+0xe6>
    errorcode = HAL_BUSY;
 8004bae:	2002      	movs	r0, #2
 8004bb0:	e6f6      	b.n	80049a0 <HAL_SPI_TransmitReceive+0x4a>
  __HAL_LOCK(hspi);
 8004bb2:	2002      	movs	r0, #2
 8004bb4:	e6f7      	b.n	80049a6 <HAL_SPI_TransmitReceive+0x50>

08004bb6 <HAL_SPI_Receive>:
{
 8004bb6:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8004bba:	461f      	mov	r7, r3
  if (hspi->State != HAL_SPI_STATE_READY)
 8004bbc:	f890 305d 	ldrb.w	r3, [r0, #93]	@ 0x5d
 8004bc0:	2b01      	cmp	r3, #1
{
 8004bc2:	4604      	mov	r4, r0
 8004bc4:	468a      	mov	sl, r1
 8004bc6:	4690      	mov	r8, r2
  if (hspi->State != HAL_SPI_STATE_READY)
 8004bc8:	b2de      	uxtb	r6, r3
 8004bca:	f040 80a7 	bne.w	8004d1c <HAL_SPI_Receive+0x166>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004bce:	6843      	ldr	r3, [r0, #4]
 8004bd0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004bd4:	d10e      	bne.n	8004bf4 <HAL_SPI_Receive+0x3e>
 8004bd6:	6883      	ldr	r3, [r0, #8]
 8004bd8:	b963      	cbnz	r3, 8004bf4 <HAL_SPI_Receive+0x3e>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004bda:	2304      	movs	r3, #4
 8004bdc:	f880 305d 	strb.w	r3, [r0, #93]	@ 0x5d
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004be0:	4613      	mov	r3, r2
 8004be2:	9700      	str	r7, [sp, #0]
 8004be4:	460a      	mov	r2, r1
 8004be6:	f7ff feb6 	bl	8004956 <HAL_SPI_TransmitReceive>
 8004bea:	4606      	mov	r6, r0
}
 8004bec:	4630      	mov	r0, r6
 8004bee:	b002      	add	sp, #8
 8004bf0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  __HAL_LOCK(hspi);
 8004bf4:	f894 305c 	ldrb.w	r3, [r4, #92]	@ 0x5c
 8004bf8:	2b01      	cmp	r3, #1
 8004bfa:	f000 8091 	beq.w	8004d20 <HAL_SPI_Receive+0x16a>
 8004bfe:	2301      	movs	r3, #1
 8004c00:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
  tickstart = HAL_GetTick();
 8004c04:	f7fe fc3a 	bl	800347c <HAL_GetTick>
 8004c08:	4681      	mov	r9, r0
  if ((pData == NULL) || (Size == 0U))
 8004c0a:	f1ba 0f00 	cmp.w	sl, #0
 8004c0e:	d075      	beq.n	8004cfc <HAL_SPI_Receive+0x146>
 8004c10:	f1b8 0f00 	cmp.w	r8, #0
 8004c14:	d072      	beq.n	8004cfc <HAL_SPI_Receive+0x146>
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004c16:	2500      	movs	r5, #0
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004c18:	2304      	movs	r3, #4
 8004c1a:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
  hspi->TxISR       = NULL;
 8004c1e:	e9c4 5513 	strd	r5, r5, [r4, #76]	@ 0x4c
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004c22:	6625      	str	r5, [r4, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004c24:	63a5      	str	r5, [r4, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8004c26:	f8a4 8046 	strh.w	r8, [r4, #70]	@ 0x46
  hspi->TxXferSize  = 0U;
 8004c2a:	87a5      	strh	r5, [r4, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 8004c2c:	87e5      	strh	r5, [r4, #62]	@ 0x3e
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004c2e:	6825      	ldr	r5, [r4, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004c30:	68e2      	ldr	r2, [r4, #12]
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004c32:	686b      	ldr	r3, [r5, #4]
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004c34:	f8c4 a040 	str.w	sl, [r4, #64]	@ 0x40
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004c38:	f5b2 6fe0 	cmp.w	r2, #1792	@ 0x700
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004c3c:	bf8c      	ite	hi
 8004c3e:	f423 5380 	bichi.w	r3, r3, #4096	@ 0x1000
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004c42:	f443 5380 	orrls.w	r3, r3, #4096	@ 0x1000
  hspi->RxXferSize  = Size;
 8004c46:	f8a4 8044 	strh.w	r8, [r4, #68]	@ 0x44
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004c4a:	606b      	str	r3, [r5, #4]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004c4c:	68a3      	ldr	r3, [r4, #8]
 8004c4e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004c52:	d107      	bne.n	8004c64 <HAL_SPI_Receive+0xae>
    __HAL_SPI_DISABLE(hspi);
 8004c54:	682b      	ldr	r3, [r5, #0]
 8004c56:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004c5a:	602b      	str	r3, [r5, #0]
    SPI_1LINE_RX(hspi);
 8004c5c:	682b      	ldr	r3, [r5, #0]
 8004c5e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004c62:	602b      	str	r3, [r5, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004c64:	682b      	ldr	r3, [r5, #0]
 8004c66:	065b      	lsls	r3, r3, #25
    __HAL_SPI_ENABLE(hspi);
 8004c68:	bf5e      	ittt	pl
 8004c6a:	682b      	ldrpl	r3, [r5, #0]
 8004c6c:	f043 0340 	orrpl.w	r3, r3, #64	@ 0x40
 8004c70:	602b      	strpl	r3, [r5, #0]
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8004c72:	f5b2 6fe0 	cmp.w	r2, #1792	@ 0x700
 8004c76:	d923      	bls.n	8004cc0 <HAL_SPI_Receive+0x10a>
    while (hspi->RxXferCount > 0U)
 8004c78:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 8004c7c:	b29b      	uxth	r3, r3
 8004c7e:	b323      	cbz	r3, 8004cca <HAL_SPI_Receive+0x114>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004c80:	6823      	ldr	r3, [r4, #0]
 8004c82:	689a      	ldr	r2, [r3, #8]
 8004c84:	07d2      	lsls	r2, r2, #31
 8004c86:	d53d      	bpl.n	8004d04 <HAL_SPI_Receive+0x14e>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004c88:	68da      	ldr	r2, [r3, #12]
 8004c8a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004c8c:	f823 2b02 	strh.w	r2, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004c90:	6423      	str	r3, [r4, #64]	@ 0x40
        hspi->RxXferCount--;
 8004c92:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 8004c96:	3b01      	subs	r3, #1
 8004c98:	b29b      	uxth	r3, r3
 8004c9a:	f8a4 3046 	strh.w	r3, [r4, #70]	@ 0x46
 8004c9e:	e7eb      	b.n	8004c78 <HAL_SPI_Receive+0xc2>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004ca0:	6823      	ldr	r3, [r4, #0]
 8004ca2:	689a      	ldr	r2, [r3, #8]
 8004ca4:	07d0      	lsls	r0, r2, #31
 8004ca6:	d51d      	bpl.n	8004ce4 <HAL_SPI_Receive+0x12e>
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004ca8:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8004caa:	7b1b      	ldrb	r3, [r3, #12]
 8004cac:	7013      	strb	r3, [r2, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004cae:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004cb0:	3301      	adds	r3, #1
 8004cb2:	6423      	str	r3, [r4, #64]	@ 0x40
        hspi->RxXferCount--;
 8004cb4:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 8004cb8:	3b01      	subs	r3, #1
 8004cba:	b29b      	uxth	r3, r3
 8004cbc:	f8a4 3046 	strh.w	r3, [r4, #70]	@ 0x46
    while (hspi->RxXferCount > 0U)
 8004cc0:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 8004cc4:	b29b      	uxth	r3, r3
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d1ea      	bne.n	8004ca0 <HAL_SPI_Receive+0xea>
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004cca:	464a      	mov	r2, r9
 8004ccc:	4639      	mov	r1, r7
 8004cce:	4620      	mov	r0, r4
 8004cd0:	f7ff fcb0 	bl	8004634 <SPI_EndRxTransaction>
 8004cd4:	b9f8      	cbnz	r0, 8004d16 <HAL_SPI_Receive+0x160>
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004cd6:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8004cd8:	b983      	cbnz	r3, 8004cfc <HAL_SPI_Receive+0x146>
    hspi->State = HAL_SPI_STATE_READY;
 8004cda:	2201      	movs	r2, #1
 8004cdc:	f884 205d 	strb.w	r2, [r4, #93]	@ 0x5d
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004ce0:	461e      	mov	r6, r3
 8004ce2:	e00b      	b.n	8004cfc <HAL_SPI_Receive+0x146>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004ce4:	f7fe fbca 	bl	800347c <HAL_GetTick>
 8004ce8:	eba0 0009 	sub.w	r0, r0, r9
 8004cec:	42b8      	cmp	r0, r7
 8004cee:	d3e7      	bcc.n	8004cc0 <HAL_SPI_Receive+0x10a>
 8004cf0:	1c79      	adds	r1, r7, #1
 8004cf2:	d0e5      	beq.n	8004cc0 <HAL_SPI_Receive+0x10a>
          hspi->State = HAL_SPI_STATE_READY;
 8004cf4:	2301      	movs	r3, #1
 8004cf6:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
          errorcode = HAL_TIMEOUT;
 8004cfa:	2603      	movs	r6, #3
  __HAL_UNLOCK(hspi);
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
  return errorcode;
 8004d02:	e773      	b.n	8004bec <HAL_SPI_Receive+0x36>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004d04:	f7fe fbba 	bl	800347c <HAL_GetTick>
 8004d08:	eba0 0009 	sub.w	r0, r0, r9
 8004d0c:	42b8      	cmp	r0, r7
 8004d0e:	d3b3      	bcc.n	8004c78 <HAL_SPI_Receive+0xc2>
 8004d10:	1c7b      	adds	r3, r7, #1
 8004d12:	d0b1      	beq.n	8004c78 <HAL_SPI_Receive+0xc2>
 8004d14:	e7ee      	b.n	8004cf4 <HAL_SPI_Receive+0x13e>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004d16:	2320      	movs	r3, #32
 8004d18:	6623      	str	r3, [r4, #96]	@ 0x60
 8004d1a:	e7dc      	b.n	8004cd6 <HAL_SPI_Receive+0x120>
    errorcode = HAL_BUSY;
 8004d1c:	2602      	movs	r6, #2
 8004d1e:	e7ed      	b.n	8004cfc <HAL_SPI_Receive+0x146>
  __HAL_LOCK(hspi);
 8004d20:	2602      	movs	r6, #2
 8004d22:	e763      	b.n	8004bec <HAL_SPI_Receive+0x36>

08004d24 <HAL_TIM_Base_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004d24:	4770      	bx	lr
	...

08004d28 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004d28:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8004d2c:	2b01      	cmp	r3, #1
 8004d2e:	d12b      	bne.n	8004d88 <HAL_TIM_Base_Start_IT+0x60>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d30:	2302      	movs	r3, #2
 8004d32:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004d36:	6803      	ldr	r3, [r0, #0]
 8004d38:	68da      	ldr	r2, [r3, #12]
 8004d3a:	f042 0201 	orr.w	r2, r2, #1
 8004d3e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d40:	4a12      	ldr	r2, [pc, #72]	@ (8004d8c <HAL_TIM_Base_Start_IT+0x64>)
 8004d42:	4293      	cmp	r3, r2
 8004d44:	d012      	beq.n	8004d6c <HAL_TIM_Base_Start_IT+0x44>
 8004d46:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d4a:	d00f      	beq.n	8004d6c <HAL_TIM_Base_Start_IT+0x44>
 8004d4c:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 8004d50:	4293      	cmp	r3, r2
 8004d52:	d00b      	beq.n	8004d6c <HAL_TIM_Base_Start_IT+0x44>
 8004d54:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8004d58:	4293      	cmp	r3, r2
 8004d5a:	d007      	beq.n	8004d6c <HAL_TIM_Base_Start_IT+0x44>
 8004d5c:	f502 3296 	add.w	r2, r2, #76800	@ 0x12c00
 8004d60:	4293      	cmp	r3, r2
 8004d62:	d003      	beq.n	8004d6c <HAL_TIM_Base_Start_IT+0x44>
 8004d64:	f502 6240 	add.w	r2, r2, #3072	@ 0xc00
 8004d68:	4293      	cmp	r3, r2
 8004d6a:	d107      	bne.n	8004d7c <HAL_TIM_Base_Start_IT+0x54>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004d6c:	6899      	ldr	r1, [r3, #8]
 8004d6e:	4a08      	ldr	r2, [pc, #32]	@ (8004d90 <HAL_TIM_Base_Start_IT+0x68>)
 8004d70:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d72:	2a06      	cmp	r2, #6
 8004d74:	d006      	beq.n	8004d84 <HAL_TIM_Base_Start_IT+0x5c>
 8004d76:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 8004d7a:	d003      	beq.n	8004d84 <HAL_TIM_Base_Start_IT+0x5c>
    {
      __HAL_TIM_ENABLE(htim);
 8004d7c:	681a      	ldr	r2, [r3, #0]
 8004d7e:	f042 0201 	orr.w	r2, r2, #1
 8004d82:	601a      	str	r2, [r3, #0]
  {
    __HAL_TIM_ENABLE(htim);
  }

  /* Return function status */
  return HAL_OK;
 8004d84:	2000      	movs	r0, #0
 8004d86:	4770      	bx	lr
    return HAL_ERROR;
 8004d88:	2001      	movs	r0, #1
}
 8004d8a:	4770      	bx	lr
 8004d8c:	40012c00 	.word	0x40012c00
 8004d90:	00010007 	.word	0x00010007

08004d94 <HAL_TIM_OC_DelayElapsedCallback>:
/**
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
 8004d94:	4770      	bx	lr

08004d96 <HAL_TIM_IC_CaptureCallback>:
/**
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
 8004d96:	4770      	bx	lr

08004d98 <HAL_TIM_PWM_PulseFinishedCallback>:
/**
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
 8004d98:	4770      	bx	lr

08004d9a <HAL_TIM_TriggerCallback>:
/**
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
 8004d9a:	4770      	bx	lr

08004d9c <HAL_TIM_IRQHandler>:
  uint32_t itsource = htim->Instance->DIER;
 8004d9c:	6803      	ldr	r3, [r0, #0]
{
 8004d9e:	b570      	push	{r4, r5, r6, lr}
  uint32_t itsource = htim->Instance->DIER;
 8004da0:	68dd      	ldr	r5, [r3, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004da2:	691e      	ldr	r6, [r3, #16]
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004da4:	07b2      	lsls	r2, r6, #30
{
 8004da6:	4604      	mov	r4, r0
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004da8:	d50d      	bpl.n	8004dc6 <HAL_TIM_IRQHandler+0x2a>
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004daa:	07a9      	lsls	r1, r5, #30
 8004dac:	d50b      	bpl.n	8004dc6 <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004dae:	f06f 0202 	mvn.w	r2, #2
 8004db2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004db4:	2201      	movs	r2, #1
 8004db6:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004db8:	699b      	ldr	r3, [r3, #24]
 8004dba:	079a      	lsls	r2, r3, #30
 8004dbc:	d074      	beq.n	8004ea8 <HAL_TIM_IRQHandler+0x10c>
          HAL_TIM_IC_CaptureCallback(htim);
 8004dbe:	f7ff ffea 	bl	8004d96 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004dc6:	0773      	lsls	r3, r6, #29
 8004dc8:	d510      	bpl.n	8004dec <HAL_TIM_IRQHandler+0x50>
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004dca:	0768      	lsls	r0, r5, #29
 8004dcc:	d50e      	bpl.n	8004dec <HAL_TIM_IRQHandler+0x50>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004dce:	6823      	ldr	r3, [r4, #0]
 8004dd0:	f06f 0204 	mvn.w	r2, #4
 8004dd4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004dd6:	2202      	movs	r2, #2
 8004dd8:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004dda:	699b      	ldr	r3, [r3, #24]
 8004ddc:	f413 7f40 	tst.w	r3, #768	@ 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8004de0:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004de2:	d067      	beq.n	8004eb4 <HAL_TIM_IRQHandler+0x118>
        HAL_TIM_IC_CaptureCallback(htim);
 8004de4:	f7ff ffd7 	bl	8004d96 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004de8:	2300      	movs	r3, #0
 8004dea:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004dec:	0731      	lsls	r1, r6, #28
 8004dee:	d50f      	bpl.n	8004e10 <HAL_TIM_IRQHandler+0x74>
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004df0:	072a      	lsls	r2, r5, #28
 8004df2:	d50d      	bpl.n	8004e10 <HAL_TIM_IRQHandler+0x74>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004df4:	6823      	ldr	r3, [r4, #0]
 8004df6:	f06f 0208 	mvn.w	r2, #8
 8004dfa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004dfc:	2204      	movs	r2, #4
 8004dfe:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004e00:	69db      	ldr	r3, [r3, #28]
 8004e02:	079b      	lsls	r3, r3, #30
        HAL_TIM_IC_CaptureCallback(htim);
 8004e04:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004e06:	d05b      	beq.n	8004ec0 <HAL_TIM_IRQHandler+0x124>
        HAL_TIM_IC_CaptureCallback(htim);
 8004e08:	f7ff ffc5 	bl	8004d96 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e0c:	2300      	movs	r3, #0
 8004e0e:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004e10:	06f0      	lsls	r0, r6, #27
 8004e12:	d510      	bpl.n	8004e36 <HAL_TIM_IRQHandler+0x9a>
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004e14:	06e9      	lsls	r1, r5, #27
 8004e16:	d50e      	bpl.n	8004e36 <HAL_TIM_IRQHandler+0x9a>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004e18:	6823      	ldr	r3, [r4, #0]
 8004e1a:	f06f 0210 	mvn.w	r2, #16
 8004e1e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004e20:	2208      	movs	r2, #8
 8004e22:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004e24:	69db      	ldr	r3, [r3, #28]
 8004e26:	f413 7f40 	tst.w	r3, #768	@ 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8004e2a:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004e2c:	d04e      	beq.n	8004ecc <HAL_TIM_IRQHandler+0x130>
        HAL_TIM_IC_CaptureCallback(htim);
 8004e2e:	f7ff ffb2 	bl	8004d96 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e32:	2300      	movs	r3, #0
 8004e34:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004e36:	07f2      	lsls	r2, r6, #31
 8004e38:	d508      	bpl.n	8004e4c <HAL_TIM_IRQHandler+0xb0>
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004e3a:	07eb      	lsls	r3, r5, #31
 8004e3c:	d506      	bpl.n	8004e4c <HAL_TIM_IRQHandler+0xb0>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004e3e:	6823      	ldr	r3, [r4, #0]
 8004e40:	f06f 0201 	mvn.w	r2, #1
 8004e44:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8004e46:	4620      	mov	r0, r4
 8004e48:	f7fd fcd6 	bl	80027f8 <HAL_TIM_PeriodElapsedCallback>
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004e4c:	0630      	lsls	r0, r6, #24
 8004e4e:	d508      	bpl.n	8004e62 <HAL_TIM_IRQHandler+0xc6>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004e50:	0629      	lsls	r1, r5, #24
 8004e52:	d506      	bpl.n	8004e62 <HAL_TIM_IRQHandler+0xc6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004e54:	6823      	ldr	r3, [r4, #0]
 8004e56:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004e5a:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8004e5c:	4620      	mov	r0, r4
 8004e5e:	f000 f8d2 	bl	8005006 <HAL_TIMEx_BreakCallback>
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004e62:	05f2      	lsls	r2, r6, #23
 8004e64:	d508      	bpl.n	8004e78 <HAL_TIM_IRQHandler+0xdc>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004e66:	062b      	lsls	r3, r5, #24
 8004e68:	d506      	bpl.n	8004e78 <HAL_TIM_IRQHandler+0xdc>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004e6a:	6823      	ldr	r3, [r4, #0]
 8004e6c:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8004e70:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8004e72:	4620      	mov	r0, r4
 8004e74:	f000 f8c8 	bl	8005008 <HAL_TIMEx_Break2Callback>
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004e78:	0670      	lsls	r0, r6, #25
 8004e7a:	d508      	bpl.n	8004e8e <HAL_TIM_IRQHandler+0xf2>
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004e7c:	0669      	lsls	r1, r5, #25
 8004e7e:	d506      	bpl.n	8004e8e <HAL_TIM_IRQHandler+0xf2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004e80:	6823      	ldr	r3, [r4, #0]
 8004e82:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004e86:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8004e88:	4620      	mov	r0, r4
 8004e8a:	f7ff ff86 	bl	8004d9a <HAL_TIM_TriggerCallback>
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004e8e:	06b2      	lsls	r2, r6, #26
 8004e90:	d522      	bpl.n	8004ed8 <HAL_TIM_IRQHandler+0x13c>
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004e92:	06ab      	lsls	r3, r5, #26
 8004e94:	d520      	bpl.n	8004ed8 <HAL_TIM_IRQHandler+0x13c>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004e96:	6823      	ldr	r3, [r4, #0]
 8004e98:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 8004e9c:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004e9e:	611a      	str	r2, [r3, #16]
}
 8004ea0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      HAL_TIMEx_CommutCallback(htim);
 8004ea4:	f000 b8ae 	b.w	8005004 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ea8:	f7ff ff74 	bl	8004d94 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004eac:	4620      	mov	r0, r4
 8004eae:	f7ff ff73 	bl	8004d98 <HAL_TIM_PWM_PulseFinishedCallback>
 8004eb2:	e786      	b.n	8004dc2 <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004eb4:	f7ff ff6e 	bl	8004d94 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004eb8:	4620      	mov	r0, r4
 8004eba:	f7ff ff6d 	bl	8004d98 <HAL_TIM_PWM_PulseFinishedCallback>
 8004ebe:	e793      	b.n	8004de8 <HAL_TIM_IRQHandler+0x4c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ec0:	f7ff ff68 	bl	8004d94 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ec4:	4620      	mov	r0, r4
 8004ec6:	f7ff ff67 	bl	8004d98 <HAL_TIM_PWM_PulseFinishedCallback>
 8004eca:	e79f      	b.n	8004e0c <HAL_TIM_IRQHandler+0x70>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ecc:	f7ff ff62 	bl	8004d94 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ed0:	4620      	mov	r0, r4
 8004ed2:	f7ff ff61 	bl	8004d98 <HAL_TIM_PWM_PulseFinishedCallback>
 8004ed6:	e7ac      	b.n	8004e32 <HAL_TIM_IRQHandler+0x96>
}
 8004ed8:	bd70      	pop	{r4, r5, r6, pc}
	...

08004edc <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004edc:	4a2f      	ldr	r2, [pc, #188]	@ (8004f9c <TIM_Base_SetConfig+0xc0>)
  tmpcr1 = TIMx->CR1;
 8004ede:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004ee0:	4290      	cmp	r0, r2
 8004ee2:	d00e      	beq.n	8004f02 <TIM_Base_SetConfig+0x26>
 8004ee4:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8004ee8:	d00b      	beq.n	8004f02 <TIM_Base_SetConfig+0x26>
 8004eea:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 8004eee:	4290      	cmp	r0, r2
 8004ef0:	d007      	beq.n	8004f02 <TIM_Base_SetConfig+0x26>
 8004ef2:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8004ef6:	4290      	cmp	r0, r2
 8004ef8:	d003      	beq.n	8004f02 <TIM_Base_SetConfig+0x26>
 8004efa:	f502 3296 	add.w	r2, r2, #76800	@ 0x12c00
 8004efe:	4290      	cmp	r0, r2
 8004f00:	d115      	bne.n	8004f2e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8004f02:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004f04:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8004f08:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004f0a:	4a24      	ldr	r2, [pc, #144]	@ (8004f9c <TIM_Base_SetConfig+0xc0>)
 8004f0c:	4290      	cmp	r0, r2
 8004f0e:	d019      	beq.n	8004f44 <TIM_Base_SetConfig+0x68>
 8004f10:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8004f14:	d016      	beq.n	8004f44 <TIM_Base_SetConfig+0x68>
 8004f16:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 8004f1a:	4290      	cmp	r0, r2
 8004f1c:	d012      	beq.n	8004f44 <TIM_Base_SetConfig+0x68>
 8004f1e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8004f22:	4290      	cmp	r0, r2
 8004f24:	d00e      	beq.n	8004f44 <TIM_Base_SetConfig+0x68>
 8004f26:	f502 3296 	add.w	r2, r2, #76800	@ 0x12c00
 8004f2a:	4290      	cmp	r0, r2
 8004f2c:	d00a      	beq.n	8004f44 <TIM_Base_SetConfig+0x68>
 8004f2e:	4a1c      	ldr	r2, [pc, #112]	@ (8004fa0 <TIM_Base_SetConfig+0xc4>)
 8004f30:	4290      	cmp	r0, r2
 8004f32:	d007      	beq.n	8004f44 <TIM_Base_SetConfig+0x68>
 8004f34:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8004f38:	4290      	cmp	r0, r2
 8004f3a:	d003      	beq.n	8004f44 <TIM_Base_SetConfig+0x68>
 8004f3c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8004f40:	4290      	cmp	r0, r2
 8004f42:	d103      	bne.n	8004f4c <TIM_Base_SetConfig+0x70>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004f44:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8004f46:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004f4a:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004f4c:	694a      	ldr	r2, [r1, #20]
 8004f4e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004f52:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8004f54:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004f56:	688b      	ldr	r3, [r1, #8]
 8004f58:	62c3      	str	r3, [r0, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004f5a:	680b      	ldr	r3, [r1, #0]
 8004f5c:	6283      	str	r3, [r0, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004f5e:	4b0f      	ldr	r3, [pc, #60]	@ (8004f9c <TIM_Base_SetConfig+0xc0>)
 8004f60:	4298      	cmp	r0, r3
 8004f62:	d00f      	beq.n	8004f84 <TIM_Base_SetConfig+0xa8>
 8004f64:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004f68:	4298      	cmp	r0, r3
 8004f6a:	d00b      	beq.n	8004f84 <TIM_Base_SetConfig+0xa8>
 8004f6c:	f503 6340 	add.w	r3, r3, #3072	@ 0xc00
 8004f70:	4298      	cmp	r0, r3
 8004f72:	d007      	beq.n	8004f84 <TIM_Base_SetConfig+0xa8>
 8004f74:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004f78:	4298      	cmp	r0, r3
 8004f7a:	d003      	beq.n	8004f84 <TIM_Base_SetConfig+0xa8>
 8004f7c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004f80:	4298      	cmp	r0, r3
 8004f82:	d101      	bne.n	8004f88 <TIM_Base_SetConfig+0xac>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004f84:	690b      	ldr	r3, [r1, #16]
 8004f86:	6303      	str	r3, [r0, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004f88:	2301      	movs	r3, #1
 8004f8a:	6143      	str	r3, [r0, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004f8c:	6903      	ldr	r3, [r0, #16]
 8004f8e:	07db      	lsls	r3, r3, #31
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004f90:	bf42      	ittt	mi
 8004f92:	6903      	ldrmi	r3, [r0, #16]
 8004f94:	f023 0301 	bicmi.w	r3, r3, #1
 8004f98:	6103      	strmi	r3, [r0, #16]
  }
}
 8004f9a:	4770      	bx	lr
 8004f9c:	40012c00 	.word	0x40012c00
 8004fa0:	40014000 	.word	0x40014000

08004fa4 <HAL_TIM_Base_Init>:
{
 8004fa4:	b510      	push	{r4, lr}
  if (htim == NULL)
 8004fa6:	4604      	mov	r4, r0
 8004fa8:	b350      	cbz	r0, 8005000 <HAL_TIM_Base_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 8004faa:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8004fae:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8004fb2:	b91b      	cbnz	r3, 8004fbc <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8004fb4:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 8004fb8:	f7ff feb4 	bl	8004d24 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8004fbc:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004fbe:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8004fc0:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004fc4:	1d21      	adds	r1, r4, #4
 8004fc6:	f7ff ff89 	bl	8004edc <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004fca:	2301      	movs	r3, #1
 8004fcc:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
  return HAL_OK;
 8004fd0:	2000      	movs	r0, #0
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fd2:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8004fd6:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8004fda:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8004fde:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 8004fe2:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004fe6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fea:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8004fee:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 8004ff2:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
 8004ff6:	f884 3047 	strb.w	r3, [r4, #71]	@ 0x47
  htim->State = HAL_TIM_STATE_READY;
 8004ffa:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
}
 8004ffe:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8005000:	2001      	movs	r0, #1
 8005002:	e7fc      	b.n	8004ffe <HAL_TIM_Base_Init+0x5a>

08005004 <HAL_TIMEx_CommutCallback>:
/**
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
 8005004:	4770      	bx	lr

08005006 <HAL_TIMEx_BreakCallback>:
/**
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
 8005006:	4770      	bx	lr

08005008 <HAL_TIMEx_Break2Callback>:
/**
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
 8005008:	4770      	bx	lr

0800500a <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800500a:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800500c:	e852 3f00 	ldrex	r3, [r2]
 8005010:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005014:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 8005018:	6802      	ldr	r2, [r0, #0]
 800501a:	2900      	cmp	r1, #0
 800501c:	d1f5      	bne.n	800500a <UART_EndRxTransfer>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800501e:	f102 0308 	add.w	r3, r2, #8
 8005022:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005026:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800502a:	f102 0c08 	add.w	ip, r2, #8
 800502e:	e84c 3100 	strex	r1, r3, [ip]
 8005032:	2900      	cmp	r1, #0
 8005034:	d1f3      	bne.n	800501e <UART_EndRxTransfer+0x14>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005036:	6e03      	ldr	r3, [r0, #96]	@ 0x60
 8005038:	2b01      	cmp	r3, #1
 800503a:	d107      	bne.n	800504c <UART_EndRxTransfer+0x42>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800503c:	e852 3f00 	ldrex	r3, [r2]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005040:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005044:	e842 3100 	strex	r1, r3, [r2]
 8005048:	2900      	cmp	r1, #0
 800504a:	d1f7      	bne.n	800503c <UART_EndRxTransfer+0x32>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800504c:	2320      	movs	r3, #32
 800504e:	f8c0 3080 	str.w	r3, [r0, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005052:	2300      	movs	r3, #0
 8005054:	6603      	str	r3, [r0, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005056:	6683      	str	r3, [r0, #104]	@ 0x68
}
 8005058:	4770      	bx	lr

0800505a <HAL_UART_Abort>:
{
 800505a:	b510      	push	{r4, lr}
 800505c:	4604      	mov	r4, r0
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 800505e:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005060:	e852 3f00 	ldrex	r3, [r2]
 8005064:	f423 73f0 	bic.w	r3, r3, #480	@ 0x1e0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005068:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 800506c:	6823      	ldr	r3, [r4, #0]
 800506e:	2900      	cmp	r1, #0
 8005070:	d1f5      	bne.n	800505e <HAL_UART_Abort+0x4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005072:	f103 0208 	add.w	r2, r3, #8
 8005076:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800507a:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800507e:	f103 0008 	add.w	r0, r3, #8
 8005082:	e840 2100 	strex	r1, r2, [r0]
 8005086:	2900      	cmp	r1, #0
 8005088:	d1f3      	bne.n	8005072 <HAL_UART_Abort+0x18>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800508a:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 800508c:	2a01      	cmp	r2, #1
 800508e:	d107      	bne.n	80050a0 <HAL_UART_Abort+0x46>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005090:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8005094:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005098:	e843 2100 	strex	r1, r2, [r3]
 800509c:	2900      	cmp	r1, #0
 800509e:	d1f7      	bne.n	8005090 <HAL_UART_Abort+0x36>
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 80050a0:	689a      	ldr	r2, [r3, #8]
 80050a2:	0612      	lsls	r2, r2, #24
 80050a4:	d51b      	bpl.n	80050de <HAL_UART_Abort+0x84>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050a6:	f103 0208 	add.w	r2, r3, #8
 80050aa:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80050ae:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050b2:	f103 0008 	add.w	r0, r3, #8
 80050b6:	e840 2100 	strex	r1, r2, [r0]
 80050ba:	2900      	cmp	r1, #0
 80050bc:	d1f3      	bne.n	80050a6 <HAL_UART_Abort+0x4c>
    if (huart->hdmatx != NULL)
 80050be:	6f20      	ldr	r0, [r4, #112]	@ 0x70
 80050c0:	b168      	cbz	r0, 80050de <HAL_UART_Abort+0x84>
      huart->hdmatx->XferAbortCallback = NULL;
 80050c2:	6341      	str	r1, [r0, #52]	@ 0x34
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 80050c4:	f7fe fac3 	bl	800364e <HAL_DMA_Abort>
 80050c8:	b148      	cbz	r0, 80050de <HAL_UART_Abort+0x84>
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 80050ca:	6f20      	ldr	r0, [r4, #112]	@ 0x70
 80050cc:	f7fe fb24 	bl	8003718 <HAL_DMA_GetError>
 80050d0:	2820      	cmp	r0, #32
 80050d2:	d104      	bne.n	80050de <HAL_UART_Abort+0x84>
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80050d4:	2310      	movs	r3, #16
 80050d6:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
          return HAL_TIMEOUT;
 80050da:	2003      	movs	r0, #3
}
 80050dc:	bd10      	pop	{r4, pc}
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050de:	6822      	ldr	r2, [r4, #0]
 80050e0:	6893      	ldr	r3, [r2, #8]
 80050e2:	065b      	lsls	r3, r3, #25
 80050e4:	d516      	bpl.n	8005114 <HAL_UART_Abort+0xba>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050e6:	f102 0308 	add.w	r3, r2, #8
 80050ea:	e853 3f00 	ldrex	r3, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80050ee:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050f2:	f102 0008 	add.w	r0, r2, #8
 80050f6:	e840 3100 	strex	r1, r3, [r0]
 80050fa:	2900      	cmp	r1, #0
 80050fc:	d1f3      	bne.n	80050e6 <HAL_UART_Abort+0x8c>
    if (huart->hdmarx != NULL)
 80050fe:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 8005100:	b140      	cbz	r0, 8005114 <HAL_UART_Abort+0xba>
      huart->hdmarx->XferAbortCallback = NULL;
 8005102:	6341      	str	r1, [r0, #52]	@ 0x34
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8005104:	f7fe faa3 	bl	800364e <HAL_DMA_Abort>
 8005108:	b120      	cbz	r0, 8005114 <HAL_UART_Abort+0xba>
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800510a:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 800510c:	f7fe fb04 	bl	8003718 <HAL_DMA_GetError>
 8005110:	2820      	cmp	r0, #32
 8005112:	d0df      	beq.n	80050d4 <HAL_UART_Abort+0x7a>
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8005114:	6823      	ldr	r3, [r4, #0]
  huart->TxXferCount = 0U;
 8005116:	2000      	movs	r0, #0
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8005118:	220f      	movs	r2, #15
  huart->TxXferCount = 0U;
 800511a:	f8a4 0052 	strh.w	r0, [r4, #82]	@ 0x52
  huart->RxXferCount = 0U;
 800511e:	f8a4 005a 	strh.w	r0, [r4, #90]	@ 0x5a
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8005122:	621a      	str	r2, [r3, #32]
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005124:	699a      	ldr	r2, [r3, #24]
 8005126:	f042 0208 	orr.w	r2, r2, #8
 800512a:	619a      	str	r2, [r3, #24]
  huart->gState  = HAL_UART_STATE_READY;
 800512c:	2320      	movs	r3, #32
 800512e:	67e3      	str	r3, [r4, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005130:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005134:	6620      	str	r0, [r4, #96]	@ 0x60
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005136:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
  return HAL_OK;
 800513a:	e7cf      	b.n	80050dc <HAL_UART_Abort+0x82>

0800513c <HAL_UART_RxCpltCallback>:
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
 800513c:	4770      	bx	lr

0800513e <HAL_UART_RxHalfCpltCallback>:
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
 800513e:	4770      	bx	lr

08005140 <HAL_UART_ErrorCallback>:
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
 8005140:	4770      	bx	lr

08005142 <UART_DMAError>:
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005142:	6a40      	ldr	r0, [r0, #36]	@ 0x24

  const HAL_UART_StateTypeDef gstate = huart->gState;
  const HAL_UART_StateTypeDef rxstate = huart->RxState;

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8005144:	6803      	ldr	r3, [r0, #0]
  const HAL_UART_StateTypeDef gstate = huart->gState;
 8005146:	6fc2      	ldr	r2, [r0, #124]	@ 0x7c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8005148:	f8d0 1080 	ldr.w	r1, [r0, #128]	@ 0x80
{
 800514c:	b510      	push	{r4, lr}
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800514e:	689c      	ldr	r4, [r3, #8]
 8005150:	0624      	lsls	r4, r4, #24
 8005152:	d50e      	bpl.n	8005172 <UART_DMAError+0x30>
 8005154:	2a21      	cmp	r2, #33	@ 0x21
 8005156:	d10c      	bne.n	8005172 <UART_DMAError+0x30>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8005158:	2200      	movs	r2, #0
 800515a:	f8a0 2052 	strh.w	r2, [r0, #82]	@ 0x52
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800515e:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005162:	f022 02c0 	bic.w	r2, r2, #192	@ 0xc0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005166:	e843 2400 	strex	r4, r2, [r3]
 800516a:	2c00      	cmp	r4, #0
 800516c:	d1f7      	bne.n	800515e <UART_DMAError+0x1c>
  huart->gState = HAL_UART_STATE_READY;
 800516e:	2220      	movs	r2, #32
 8005170:	67c2      	str	r2, [r0, #124]	@ 0x7c
    UART_EndTxTransfer(huart);
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8005172:	689b      	ldr	r3, [r3, #8]
 8005174:	065b      	lsls	r3, r3, #25
 8005176:	d506      	bpl.n	8005186 <UART_DMAError+0x44>
 8005178:	2922      	cmp	r1, #34	@ 0x22
 800517a:	d104      	bne.n	8005186 <UART_DMAError+0x44>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800517c:	2300      	movs	r3, #0
 800517e:	f8a0 305a 	strh.w	r3, [r0, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 8005182:	f7ff ff42 	bl	800500a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005186:	f8d0 3084 	ldr.w	r3, [r0, #132]	@ 0x84
 800518a:	f043 0310 	orr.w	r3, r3, #16
 800518e:	f8c0 3084 	str.w	r3, [r0, #132]	@ 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005192:	f7ff ffd5 	bl	8005140 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005196:	bd10      	pop	{r4, pc}

08005198 <HAL_UARTEx_RxEventCallback>:
}
 8005198:	4770      	bx	lr

0800519a <UART_DMARxHalfCplt>:
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800519a:	6a40      	ldr	r0, [r0, #36]	@ 0x24
{
 800519c:	b508      	push	{r3, lr}
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800519e:	2301      	movs	r3, #1
 80051a0:	6643      	str	r3, [r0, #100]	@ 0x64
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80051a2:	6e03      	ldr	r3, [r0, #96]	@ 0x60
 80051a4:	2b01      	cmp	r3, #1
 80051a6:	d105      	bne.n	80051b4 <UART_DMARxHalfCplt+0x1a>
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80051a8:	f8b0 1058 	ldrh.w	r1, [r0, #88]	@ 0x58
 80051ac:	0849      	lsrs	r1, r1, #1
 80051ae:	f7ff fff3 	bl	8005198 <HAL_UARTEx_RxEventCallback>
}
 80051b2:	bd08      	pop	{r3, pc}
    HAL_UART_RxHalfCpltCallback(huart);
 80051b4:	f7ff ffc3 	bl	800513e <HAL_UART_RxHalfCpltCallback>
}
 80051b8:	e7fb      	b.n	80051b2 <UART_DMARxHalfCplt+0x18>

080051ba <UART_DMAReceiveCplt>:
{
 80051ba:	b508      	push	{r3, lr}
 80051bc:	4603      	mov	r3, r0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80051be:	6a40      	ldr	r0, [r0, #36]	@ 0x24
  if (hdma->Init.Mode != DMA_CIRCULAR)
 80051c0:	699b      	ldr	r3, [r3, #24]
 80051c2:	2b20      	cmp	r3, #32
 80051c4:	d032      	beq.n	800522c <UART_DMAReceiveCplt+0x72>
    huart->RxXferCount = 0U;
 80051c6:	2300      	movs	r3, #0
 80051c8:	f8a0 305a 	strh.w	r3, [r0, #90]	@ 0x5a
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80051cc:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051ce:	e852 3f00 	ldrex	r3, [r2]
 80051d2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051d6:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 80051da:	6803      	ldr	r3, [r0, #0]
 80051dc:	2900      	cmp	r1, #0
 80051de:	d1f5      	bne.n	80051cc <UART_DMAReceiveCplt+0x12>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051e0:	f103 0208 	add.w	r2, r3, #8
 80051e4:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051e8:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051ec:	f103 0c08 	add.w	ip, r3, #8
 80051f0:	e84c 2100 	strex	r1, r2, [ip]
 80051f4:	2900      	cmp	r1, #0
 80051f6:	d1f3      	bne.n	80051e0 <UART_DMAReceiveCplt+0x26>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051f8:	f103 0208 	add.w	r2, r3, #8
 80051fc:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005200:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005204:	f103 0c08 	add.w	ip, r3, #8
 8005208:	e84c 2100 	strex	r1, r2, [ip]
 800520c:	2900      	cmp	r1, #0
 800520e:	d1f3      	bne.n	80051f8 <UART_DMAReceiveCplt+0x3e>
    huart->RxState = HAL_UART_STATE_READY;
 8005210:	2220      	movs	r2, #32
 8005212:	f8c0 2080 	str.w	r2, [r0, #128]	@ 0x80
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005216:	6e02      	ldr	r2, [r0, #96]	@ 0x60
 8005218:	2a01      	cmp	r2, #1
 800521a:	d107      	bne.n	800522c <UART_DMAReceiveCplt+0x72>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800521c:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005220:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005224:	e843 2100 	strex	r1, r2, [r3]
 8005228:	2900      	cmp	r1, #0
 800522a:	d1f7      	bne.n	800521c <UART_DMAReceiveCplt+0x62>
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800522c:	2300      	movs	r3, #0
 800522e:	6643      	str	r3, [r0, #100]	@ 0x64
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005230:	6e03      	ldr	r3, [r0, #96]	@ 0x60
 8005232:	2b01      	cmp	r3, #1
 8005234:	d104      	bne.n	8005240 <UART_DMAReceiveCplt+0x86>
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005236:	f8b0 1058 	ldrh.w	r1, [r0, #88]	@ 0x58
 800523a:	f7ff ffad 	bl	8005198 <HAL_UARTEx_RxEventCallback>
}
 800523e:	bd08      	pop	{r3, pc}
    HAL_UART_RxCpltCallback(huart);
 8005240:	f7ff ff7c 	bl	800513c <HAL_UART_RxCpltCallback>
}
 8005244:	e7fb      	b.n	800523e <UART_DMAReceiveCplt+0x84>
	...

08005248 <UART_SetConfig>:
{
 8005248:	b538      	push	{r3, r4, r5, lr}
 800524a:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800524c:	69c0      	ldr	r0, [r0, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800524e:	6823      	ldr	r3, [r4, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005250:	6925      	ldr	r5, [r4, #16]
 8005252:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005254:	6819      	ldr	r1, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005256:	432a      	orrs	r2, r5
 8005258:	6965      	ldr	r5, [r4, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800525a:	f421 4116 	bic.w	r1, r1, #38400	@ 0x9600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800525e:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005260:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005264:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005266:	430a      	orrs	r2, r1
 8005268:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800526a:	685a      	ldr	r2, [r3, #4]
 800526c:	68e1      	ldr	r1, [r4, #12]
  tmpreg |= huart->Init.OneBitSampling;
 800526e:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005270:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 8005274:	430a      	orrs	r2, r1
 8005276:	605a      	str	r2, [r3, #4]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005278:	6899      	ldr	r1, [r3, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800527a:	69a2      	ldr	r2, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800527c:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
  tmpreg |= huart->Init.OneBitSampling;
 8005280:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005282:	430a      	orrs	r2, r1
 8005284:	609a      	str	r2, [r3, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005286:	4a56      	ldr	r2, [pc, #344]	@ (80053e0 <UART_SetConfig+0x198>)
 8005288:	4293      	cmp	r3, r2
 800528a:	d112      	bne.n	80052b2 <UART_SetConfig+0x6a>
 800528c:	4b55      	ldr	r3, [pc, #340]	@ (80053e4 <UART_SetConfig+0x19c>)
 800528e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005290:	f003 0303 	and.w	r3, r3, #3
 8005294:	2b02      	cmp	r3, #2
 8005296:	f000 8091 	beq.w	80053bc <UART_SetConfig+0x174>
 800529a:	2b03      	cmp	r3, #3
 800529c:	d022      	beq.n	80052e4 <UART_SetConfig+0x9c>
 800529e:	2b01      	cmp	r3, #1
 80052a0:	f040 8092 	bne.w	80053c8 <UART_SetConfig+0x180>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80052a4:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 80052a8:	f040 8085 	bne.w	80053b6 <UART_SetConfig+0x16e>
        pclk = HAL_RCC_GetSysClockFreq();
 80052ac:	f7fe fd64 	bl	8003d78 <HAL_RCC_GetSysClockFreq>
        break;
 80052b0:	e06b      	b.n	800538a <UART_SetConfig+0x142>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80052b2:	4a4d      	ldr	r2, [pc, #308]	@ (80053e8 <UART_SetConfig+0x1a0>)
 80052b4:	4293      	cmp	r3, r2
 80052b6:	d12e      	bne.n	8005316 <UART_SetConfig+0xce>
 80052b8:	4b4a      	ldr	r3, [pc, #296]	@ (80053e4 <UART_SetConfig+0x19c>)
 80052ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052bc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80052c0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80052c4:	d07a      	beq.n	80053bc <UART_SetConfig+0x174>
 80052c6:	d80a      	bhi.n	80052de <UART_SetConfig+0x96>
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	f000 8083 	beq.w	80053d4 <UART_SetConfig+0x18c>
 80052ce:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80052d2:	d0e7      	beq.n	80052a4 <UART_SetConfig+0x5c>
        ret = HAL_ERROR;
 80052d4:	2001      	movs	r0, #1
  huart->RxISR = NULL;
 80052d6:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 80052d8:	e9c4 331a 	strd	r3, r3, [r4, #104]	@ 0x68
}
 80052dc:	bd38      	pop	{r3, r4, r5, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 80052de:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80052e2:	d1f7      	bne.n	80052d4 <UART_SetConfig+0x8c>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80052e4:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 80052e8:	4840      	ldr	r0, [pc, #256]	@ (80053ec <UART_SetConfig+0x1a4>)
 80052ea:	d156      	bne.n	800539a <UART_SetConfig+0x152>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80052ec:	6862      	ldr	r2, [r4, #4]
 80052ee:	0853      	lsrs	r3, r2, #1
 80052f0:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 80052f4:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80052f8:	f64f 72ef 	movw	r2, #65519	@ 0xffef
 80052fc:	f1a3 0110 	sub.w	r1, r3, #16
 8005300:	4291      	cmp	r1, r2
 8005302:	d8e7      	bhi.n	80052d4 <UART_SetConfig+0x8c>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005304:	f023 020f 	bic.w	r2, r3, #15
        huart->Instance->BRR = brrtemp;
 8005308:	6821      	ldr	r1, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800530a:	b292      	uxth	r2, r2
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800530c:	f3c3 0342 	ubfx	r3, r3, #1, #3
        huart->Instance->BRR = brrtemp;
 8005310:	4313      	orrs	r3, r2
 8005312:	60cb      	str	r3, [r1, #12]
 8005314:	e03b      	b.n	800538e <UART_SetConfig+0x146>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005316:	4a36      	ldr	r2, [pc, #216]	@ (80053f0 <UART_SetConfig+0x1a8>)
 8005318:	4293      	cmp	r3, r2
 800531a:	d10f      	bne.n	800533c <UART_SetConfig+0xf4>
 800531c:	4b31      	ldr	r3, [pc, #196]	@ (80053e4 <UART_SetConfig+0x19c>)
 800531e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005320:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8005324:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8005328:	d048      	beq.n	80053bc <UART_SetConfig+0x174>
 800532a:	d804      	bhi.n	8005336 <UART_SetConfig+0xee>
 800532c:	2b00      	cmp	r3, #0
 800532e:	d051      	beq.n	80053d4 <UART_SetConfig+0x18c>
 8005330:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005334:	e7cd      	b.n	80052d2 <UART_SetConfig+0x8a>
 8005336:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800533a:	e7d2      	b.n	80052e2 <UART_SetConfig+0x9a>
 800533c:	4a2d      	ldr	r2, [pc, #180]	@ (80053f4 <UART_SetConfig+0x1ac>)
 800533e:	4293      	cmp	r3, r2
 8005340:	d10f      	bne.n	8005362 <UART_SetConfig+0x11a>
 8005342:	4b28      	ldr	r3, [pc, #160]	@ (80053e4 <UART_SetConfig+0x19c>)
 8005344:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005346:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800534a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800534e:	d035      	beq.n	80053bc <UART_SetConfig+0x174>
 8005350:	d804      	bhi.n	800535c <UART_SetConfig+0x114>
 8005352:	2b00      	cmp	r3, #0
 8005354:	d03e      	beq.n	80053d4 <UART_SetConfig+0x18c>
 8005356:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800535a:	e7ba      	b.n	80052d2 <UART_SetConfig+0x8a>
 800535c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005360:	e7bf      	b.n	80052e2 <UART_SetConfig+0x9a>
 8005362:	4a25      	ldr	r2, [pc, #148]	@ (80053f8 <UART_SetConfig+0x1b0>)
 8005364:	4293      	cmp	r3, r2
 8005366:	d1b5      	bne.n	80052d4 <UART_SetConfig+0x8c>
 8005368:	4b1e      	ldr	r3, [pc, #120]	@ (80053e4 <UART_SetConfig+0x19c>)
 800536a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800536c:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8005370:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005374:	d022      	beq.n	80053bc <UART_SetConfig+0x174>
 8005376:	d803      	bhi.n	8005380 <UART_SetConfig+0x138>
 8005378:	b363      	cbz	r3, 80053d4 <UART_SetConfig+0x18c>
 800537a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800537e:	e7a8      	b.n	80052d2 <UART_SetConfig+0x8a>
 8005380:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8005384:	e7ad      	b.n	80052e2 <UART_SetConfig+0x9a>
        pclk = HAL_RCC_GetPCLK2Freq();
 8005386:	f7fe fddb 	bl	8003f40 <HAL_RCC_GetPCLK2Freq>
    if (pclk != 0U)
 800538a:	2800      	cmp	r0, #0
 800538c:	d1ae      	bne.n	80052ec <UART_SetConfig+0xa4>
        pclk = (uint32_t) HSI_VALUE;
 800538e:	2000      	movs	r0, #0
 8005390:	e7a1      	b.n	80052d6 <UART_SetConfig+0x8e>
        pclk = HAL_RCC_GetPCLK1Freq();
 8005392:	f7fe fdbd 	bl	8003f10 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8005396:	2800      	cmp	r0, #0
 8005398:	d0f9      	beq.n	800538e <UART_SetConfig+0x146>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800539a:	6862      	ldr	r2, [r4, #4]
 800539c:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 80053a0:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80053a4:	f64f 72ef 	movw	r2, #65519	@ 0xffef
 80053a8:	f1a3 0110 	sub.w	r1, r3, #16
 80053ac:	4291      	cmp	r1, r2
 80053ae:	d891      	bhi.n	80052d4 <UART_SetConfig+0x8c>
        huart->Instance->BRR = (uint16_t)usartdiv;
 80053b0:	6822      	ldr	r2, [r4, #0]
 80053b2:	60d3      	str	r3, [r2, #12]
 80053b4:	e7eb      	b.n	800538e <UART_SetConfig+0x146>
        pclk = HAL_RCC_GetSysClockFreq();
 80053b6:	f7fe fcdf 	bl	8003d78 <HAL_RCC_GetSysClockFreq>
        break;
 80053ba:	e7ec      	b.n	8005396 <UART_SetConfig+0x14e>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80053bc:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 80053c0:	d094      	beq.n	80052ec <UART_SetConfig+0xa4>
 80053c2:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 80053c6:	e7e8      	b.n	800539a <UART_SetConfig+0x152>
 80053c8:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 80053cc:	d0db      	beq.n	8005386 <UART_SetConfig+0x13e>
        pclk = HAL_RCC_GetPCLK2Freq();
 80053ce:	f7fe fdb7 	bl	8003f40 <HAL_RCC_GetPCLK2Freq>
        break;
 80053d2:	e7e0      	b.n	8005396 <UART_SetConfig+0x14e>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80053d4:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 80053d8:	d1db      	bne.n	8005392 <UART_SetConfig+0x14a>
        pclk = HAL_RCC_GetPCLK1Freq();
 80053da:	f7fe fd99 	bl	8003f10 <HAL_RCC_GetPCLK1Freq>
        break;
 80053de:	e7d4      	b.n	800538a <UART_SetConfig+0x142>
 80053e0:	40013800 	.word	0x40013800
 80053e4:	40021000 	.word	0x40021000
 80053e8:	40004400 	.word	0x40004400
 80053ec:	007a1200 	.word	0x007a1200
 80053f0:	40004800 	.word	0x40004800
 80053f4:	40004c00 	.word	0x40004c00
 80053f8:	40005000 	.word	0x40005000

080053fc <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80053fc:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 80053fe:	071a      	lsls	r2, r3, #28
{
 8005400:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005402:	d506      	bpl.n	8005412 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005404:	6801      	ldr	r1, [r0, #0]
 8005406:	6b44      	ldr	r4, [r0, #52]	@ 0x34
 8005408:	684a      	ldr	r2, [r1, #4]
 800540a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800540e:	4322      	orrs	r2, r4
 8005410:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005412:	07dc      	lsls	r4, r3, #31
 8005414:	d506      	bpl.n	8005424 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005416:	6801      	ldr	r1, [r0, #0]
 8005418:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 800541a:	684a      	ldr	r2, [r1, #4]
 800541c:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8005420:	4322      	orrs	r2, r4
 8005422:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005424:	0799      	lsls	r1, r3, #30
 8005426:	d506      	bpl.n	8005436 <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005428:	6801      	ldr	r1, [r0, #0]
 800542a:	6ac4      	ldr	r4, [r0, #44]	@ 0x2c
 800542c:	684a      	ldr	r2, [r1, #4]
 800542e:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8005432:	4322      	orrs	r2, r4
 8005434:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005436:	075a      	lsls	r2, r3, #29
 8005438:	d506      	bpl.n	8005448 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800543a:	6801      	ldr	r1, [r0, #0]
 800543c:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 800543e:	684a      	ldr	r2, [r1, #4]
 8005440:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8005444:	4322      	orrs	r2, r4
 8005446:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005448:	06dc      	lsls	r4, r3, #27
 800544a:	d506      	bpl.n	800545a <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800544c:	6801      	ldr	r1, [r0, #0]
 800544e:	6b84      	ldr	r4, [r0, #56]	@ 0x38
 8005450:	688a      	ldr	r2, [r1, #8]
 8005452:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005456:	4322      	orrs	r2, r4
 8005458:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800545a:	0699      	lsls	r1, r3, #26
 800545c:	d506      	bpl.n	800546c <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800545e:	6801      	ldr	r1, [r0, #0]
 8005460:	6bc4      	ldr	r4, [r0, #60]	@ 0x3c
 8005462:	688a      	ldr	r2, [r1, #8]
 8005464:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005468:	4322      	orrs	r2, r4
 800546a:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800546c:	065a      	lsls	r2, r3, #25
 800546e:	d50f      	bpl.n	8005490 <UART_AdvFeatureConfig+0x94>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005470:	6801      	ldr	r1, [r0, #0]
 8005472:	6c04      	ldr	r4, [r0, #64]	@ 0x40
 8005474:	684a      	ldr	r2, [r1, #4]
 8005476:	f422 1280 	bic.w	r2, r2, #1048576	@ 0x100000
 800547a:	4322      	orrs	r2, r4
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800547c:	f5b4 1f80 	cmp.w	r4, #1048576	@ 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005480:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005482:	d105      	bne.n	8005490 <UART_AdvFeatureConfig+0x94>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005484:	684a      	ldr	r2, [r1, #4]
 8005486:	6c44      	ldr	r4, [r0, #68]	@ 0x44
 8005488:	f422 02c0 	bic.w	r2, r2, #6291456	@ 0x600000
 800548c:	4322      	orrs	r2, r4
 800548e:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005490:	061b      	lsls	r3, r3, #24
 8005492:	d506      	bpl.n	80054a2 <UART_AdvFeatureConfig+0xa6>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005494:	6802      	ldr	r2, [r0, #0]
 8005496:	6c81      	ldr	r1, [r0, #72]	@ 0x48
 8005498:	6853      	ldr	r3, [r2, #4]
 800549a:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 800549e:	430b      	orrs	r3, r1
 80054a0:	6053      	str	r3, [r2, #4]
}
 80054a2:	bd10      	pop	{r4, pc}

080054a4 <UART_WaitOnFlagUntilTimeout>:
{
 80054a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80054a8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80054ac:	4604      	mov	r4, r0
 80054ae:	460d      	mov	r5, r1
 80054b0:	4617      	mov	r7, r2
 80054b2:	4698      	mov	r8, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80054b4:	6822      	ldr	r2, [r4, #0]
 80054b6:	69d3      	ldr	r3, [r2, #28]
 80054b8:	ea35 0303 	bics.w	r3, r5, r3
 80054bc:	bf0c      	ite	eq
 80054be:	2301      	moveq	r3, #1
 80054c0:	2300      	movne	r3, #0
 80054c2:	42bb      	cmp	r3, r7
 80054c4:	d001      	beq.n	80054ca <UART_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
 80054c6:	2000      	movs	r0, #0
 80054c8:	e022      	b.n	8005510 <UART_WaitOnFlagUntilTimeout+0x6c>
    if (Timeout != HAL_MAX_DELAY)
 80054ca:	f1b9 3fff 	cmp.w	r9, #4294967295
 80054ce:	d0f2      	beq.n	80054b6 <UART_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054d0:	f7fd ffd4 	bl	800347c <HAL_GetTick>
 80054d4:	eba0 0008 	sub.w	r0, r0, r8
 80054d8:	4548      	cmp	r0, r9
 80054da:	d829      	bhi.n	8005530 <UART_WaitOnFlagUntilTimeout+0x8c>
 80054dc:	f1b9 0f00 	cmp.w	r9, #0
 80054e0:	d026      	beq.n	8005530 <UART_WaitOnFlagUntilTimeout+0x8c>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80054e2:	6821      	ldr	r1, [r4, #0]
 80054e4:	680b      	ldr	r3, [r1, #0]
 80054e6:	075a      	lsls	r2, r3, #29
 80054e8:	d5e4      	bpl.n	80054b4 <UART_WaitOnFlagUntilTimeout+0x10>
 80054ea:	2d80      	cmp	r5, #128	@ 0x80
 80054ec:	d0e2      	beq.n	80054b4 <UART_WaitOnFlagUntilTimeout+0x10>
 80054ee:	2d40      	cmp	r5, #64	@ 0x40
 80054f0:	d0e0      	beq.n	80054b4 <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80054f2:	69ce      	ldr	r6, [r1, #28]
 80054f4:	f016 0608 	ands.w	r6, r6, #8
 80054f8:	d00c      	beq.n	8005514 <UART_WaitOnFlagUntilTimeout+0x70>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80054fa:	2508      	movs	r5, #8
          UART_EndRxTransfer(huart);
 80054fc:	4620      	mov	r0, r4
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80054fe:	620d      	str	r5, [r1, #32]
          UART_EndRxTransfer(huart);
 8005500:	f7ff fd83 	bl	800500a <UART_EndRxTransfer>
          __HAL_UNLOCK(huart);
 8005504:	2300      	movs	r3, #0
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005506:	f8c4 5084 	str.w	r5, [r4, #132]	@ 0x84
          __HAL_UNLOCK(huart);
 800550a:	f884 3078 	strb.w	r3, [r4, #120]	@ 0x78
          return HAL_ERROR;
 800550e:	2001      	movs	r0, #1
}
 8005510:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005514:	69cb      	ldr	r3, [r1, #28]
 8005516:	051b      	lsls	r3, r3, #20
 8005518:	d5cc      	bpl.n	80054b4 <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800551a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800551e:	620b      	str	r3, [r1, #32]
          UART_EndRxTransfer(huart);
 8005520:	4620      	mov	r0, r4
 8005522:	f7ff fd72 	bl	800500a <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005526:	2320      	movs	r3, #32
 8005528:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
          __HAL_UNLOCK(huart);
 800552c:	f884 6078 	strb.w	r6, [r4, #120]	@ 0x78
        return HAL_TIMEOUT;
 8005530:	2003      	movs	r0, #3
 8005532:	e7ed      	b.n	8005510 <UART_WaitOnFlagUntilTimeout+0x6c>

08005534 <HAL_UART_Transmit>:
{
 8005534:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005538:	4698      	mov	r8, r3
  if (huart->gState == HAL_UART_STATE_READY)
 800553a:	6fc3      	ldr	r3, [r0, #124]	@ 0x7c
 800553c:	2b20      	cmp	r3, #32
{
 800553e:	4604      	mov	r4, r0
 8005540:	460e      	mov	r6, r1
 8005542:	4617      	mov	r7, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8005544:	d143      	bne.n	80055ce <HAL_UART_Transmit+0x9a>
    if ((pData == NULL) || (Size == 0U))
 8005546:	2900      	cmp	r1, #0
 8005548:	d043      	beq.n	80055d2 <HAL_UART_Transmit+0x9e>
 800554a:	2a00      	cmp	r2, #0
 800554c:	d041      	beq.n	80055d2 <HAL_UART_Transmit+0x9e>
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800554e:	2321      	movs	r3, #33	@ 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005550:	2500      	movs	r5, #0
 8005552:	f8c0 5084 	str.w	r5, [r0, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005556:	67c3      	str	r3, [r0, #124]	@ 0x7c
    tickstart = HAL_GetTick();
 8005558:	f7fd ff90 	bl	800347c <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800555c:	68a3      	ldr	r3, [r4, #8]
    huart->TxXferSize  = Size;
 800555e:	f8a4 7050 	strh.w	r7, [r4, #80]	@ 0x50
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005562:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
    tickstart = HAL_GetTick();
 8005566:	4681      	mov	r9, r0
    huart->TxXferCount = Size;
 8005568:	f8a4 7052 	strh.w	r7, [r4, #82]	@ 0x52
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800556c:	d103      	bne.n	8005576 <HAL_UART_Transmit+0x42>
 800556e:	6923      	ldr	r3, [r4, #16]
 8005570:	b90b      	cbnz	r3, 8005576 <HAL_UART_Transmit+0x42>
 8005572:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 8005574:	461e      	mov	r6, r3
    while (huart->TxXferCount > 0U)
 8005576:	f8b4 2052 	ldrh.w	r2, [r4, #82]	@ 0x52
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800557a:	f8cd 8000 	str.w	r8, [sp]
    while (huart->TxXferCount > 0U)
 800557e:	b292      	uxth	r2, r2
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005580:	464b      	mov	r3, r9
    while (huart->TxXferCount > 0U)
 8005582:	b93a      	cbnz	r2, 8005594 <HAL_UART_Transmit+0x60>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005584:	2140      	movs	r1, #64	@ 0x40
 8005586:	4620      	mov	r0, r4
 8005588:	f7ff ff8c 	bl	80054a4 <UART_WaitOnFlagUntilTimeout>
 800558c:	2320      	movs	r3, #32
 800558e:	b940      	cbnz	r0, 80055a2 <HAL_UART_Transmit+0x6e>
    huart->gState = HAL_UART_STATE_READY;
 8005590:	67e3      	str	r3, [r4, #124]	@ 0x7c
    return HAL_OK;
 8005592:	e008      	b.n	80055a6 <HAL_UART_Transmit+0x72>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005594:	2200      	movs	r2, #0
 8005596:	2180      	movs	r1, #128	@ 0x80
 8005598:	4620      	mov	r0, r4
 800559a:	f7ff ff83 	bl	80054a4 <UART_WaitOnFlagUntilTimeout>
 800559e:	b128      	cbz	r0, 80055ac <HAL_UART_Transmit+0x78>
        huart->gState = HAL_UART_STATE_READY;
 80055a0:	2320      	movs	r3, #32
 80055a2:	67e3      	str	r3, [r4, #124]	@ 0x7c
        return HAL_TIMEOUT;
 80055a4:	2003      	movs	r0, #3
}
 80055a6:	b003      	add	sp, #12
 80055a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80055ac:	6822      	ldr	r2, [r4, #0]
      if (pdata8bits == NULL)
 80055ae:	b95e      	cbnz	r6, 80055c8 <HAL_UART_Transmit+0x94>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80055b0:	f835 3b02 	ldrh.w	r3, [r5], #2
 80055b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80055b8:	8513      	strh	r3, [r2, #40]	@ 0x28
      huart->TxXferCount--;
 80055ba:	f8b4 2052 	ldrh.w	r2, [r4, #82]	@ 0x52
 80055be:	3a01      	subs	r2, #1
 80055c0:	b292      	uxth	r2, r2
 80055c2:	f8a4 2052 	strh.w	r2, [r4, #82]	@ 0x52
 80055c6:	e7d6      	b.n	8005576 <HAL_UART_Transmit+0x42>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80055c8:	f816 3b01 	ldrb.w	r3, [r6], #1
 80055cc:	e7f4      	b.n	80055b8 <HAL_UART_Transmit+0x84>
    return HAL_BUSY;
 80055ce:	2002      	movs	r0, #2
 80055d0:	e7e9      	b.n	80055a6 <HAL_UART_Transmit+0x72>
      return  HAL_ERROR;
 80055d2:	2001      	movs	r0, #1
 80055d4:	e7e7      	b.n	80055a6 <HAL_UART_Transmit+0x72>

080055d6 <UART_CheckIdleState>:
{
 80055d6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80055d8:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055da:	2600      	movs	r6, #0
 80055dc:	f8c0 6084 	str.w	r6, [r0, #132]	@ 0x84
  tickstart = HAL_GetTick();
 80055e0:	f7fd ff4c 	bl	800347c <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80055e4:	6823      	ldr	r3, [r4, #0]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	071a      	lsls	r2, r3, #28
  tickstart = HAL_GetTick();
 80055ea:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80055ec:	d51b      	bpl.n	8005626 <UART_CheckIdleState+0x50>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80055ee:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80055f2:	9300      	str	r3, [sp, #0]
 80055f4:	4632      	mov	r2, r6
 80055f6:	4603      	mov	r3, r0
 80055f8:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80055fc:	4620      	mov	r0, r4
 80055fe:	f7ff ff51 	bl	80054a4 <UART_WaitOnFlagUntilTimeout>
 8005602:	b180      	cbz	r0, 8005626 <UART_CheckIdleState+0x50>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005604:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005606:	e852 3f00 	ldrex	r3, [r2]
 800560a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800560e:	e842 3100 	strex	r1, r3, [r2]
 8005612:	2900      	cmp	r1, #0
 8005614:	d1f6      	bne.n	8005604 <UART_CheckIdleState+0x2e>
      huart->gState = HAL_UART_STATE_READY;
 8005616:	2320      	movs	r3, #32
 8005618:	67e3      	str	r3, [r4, #124]	@ 0x7c
      return HAL_TIMEOUT;
 800561a:	2003      	movs	r0, #3
      __HAL_UNLOCK(huart);
 800561c:	2300      	movs	r3, #0
 800561e:	f884 3078 	strb.w	r3, [r4, #120]	@ 0x78
}
 8005622:	b002      	add	sp, #8
 8005624:	bd70      	pop	{r4, r5, r6, pc}
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005626:	6823      	ldr	r3, [r4, #0]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	075b      	lsls	r3, r3, #29
 800562c:	d524      	bpl.n	8005678 <UART_CheckIdleState+0xa2>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800562e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005632:	9300      	str	r3, [sp, #0]
 8005634:	2200      	movs	r2, #0
 8005636:	462b      	mov	r3, r5
 8005638:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800563c:	4620      	mov	r0, r4
 800563e:	f7ff ff31 	bl	80054a4 <UART_WaitOnFlagUntilTimeout>
 8005642:	b1c8      	cbz	r0, 8005678 <UART_CheckIdleState+0xa2>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005644:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005646:	e852 3f00 	ldrex	r3, [r2]
 800564a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800564e:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 8005652:	6822      	ldr	r2, [r4, #0]
 8005654:	2900      	cmp	r1, #0
 8005656:	d1f5      	bne.n	8005644 <UART_CheckIdleState+0x6e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005658:	f102 0308 	add.w	r3, r2, #8
 800565c:	e853 3f00 	ldrex	r3, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005660:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005664:	f102 0008 	add.w	r0, r2, #8
 8005668:	e840 3100 	strex	r1, r3, [r0]
 800566c:	2900      	cmp	r1, #0
 800566e:	d1f3      	bne.n	8005658 <UART_CheckIdleState+0x82>
      huart->RxState = HAL_UART_STATE_READY;
 8005670:	2320      	movs	r3, #32
 8005672:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
      return HAL_TIMEOUT;
 8005676:	e7d0      	b.n	800561a <UART_CheckIdleState+0x44>
  huart->gState = HAL_UART_STATE_READY;
 8005678:	2320      	movs	r3, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800567a:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 800567c:	67e3      	str	r3, [r4, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800567e:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005682:	6620      	str	r0, [r4, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005684:	6660      	str	r0, [r4, #100]	@ 0x64
  return HAL_OK;
 8005686:	e7c9      	b.n	800561c <UART_CheckIdleState+0x46>

08005688 <HAL_UART_Init>:
{
 8005688:	b510      	push	{r4, lr}
  if (huart == NULL)
 800568a:	4604      	mov	r4, r0
 800568c:	b340      	cbz	r0, 80056e0 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 800568e:	6fc3      	ldr	r3, [r0, #124]	@ 0x7c
 8005690:	b91b      	cbnz	r3, 800569a <HAL_UART_Init+0x12>
    huart->Lock = HAL_UNLOCKED;
 8005692:	f880 3078 	strb.w	r3, [r0, #120]	@ 0x78
    HAL_UART_MspInit(huart);
 8005696:	f7fd fd19 	bl	80030cc <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 800569a:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800569c:	2324      	movs	r3, #36	@ 0x24
 800569e:	67e3      	str	r3, [r4, #124]	@ 0x7c
  __HAL_UART_DISABLE(huart);
 80056a0:	6813      	ldr	r3, [r2, #0]
 80056a2:	f023 0301 	bic.w	r3, r3, #1
 80056a6:	6013      	str	r3, [r2, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80056a8:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80056aa:	b113      	cbz	r3, 80056b2 <HAL_UART_Init+0x2a>
    UART_AdvFeatureConfig(huart);
 80056ac:	4620      	mov	r0, r4
 80056ae:	f7ff fea5 	bl	80053fc <UART_AdvFeatureConfig>
  if (UART_SetConfig(huart) == HAL_ERROR)
 80056b2:	4620      	mov	r0, r4
 80056b4:	f7ff fdc8 	bl	8005248 <UART_SetConfig>
 80056b8:	2801      	cmp	r0, #1
 80056ba:	d011      	beq.n	80056e0 <HAL_UART_Init+0x58>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80056bc:	6823      	ldr	r3, [r4, #0]
 80056be:	685a      	ldr	r2, [r3, #4]
 80056c0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80056c4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80056c6:	689a      	ldr	r2, [r3, #8]
 80056c8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80056cc:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 80056ce:	681a      	ldr	r2, [r3, #0]
 80056d0:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 80056d4:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 80056d6:	601a      	str	r2, [r3, #0]
}
 80056d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 80056dc:	f7ff bf7b 	b.w	80055d6 <UART_CheckIdleState>
}
 80056e0:	2001      	movs	r0, #1
 80056e2:	bd10      	pop	{r4, pc}

080056e4 <UART_Start_Receive_DMA>:
{
 80056e4:	b570      	push	{r4, r5, r6, lr}
 80056e6:	4613      	mov	r3, r2
 80056e8:	4604      	mov	r4, r0
  huart->RxXferSize = Size;
 80056ea:	f8a0 2058 	strh.w	r2, [r0, #88]	@ 0x58
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056ee:	2200      	movs	r2, #0
  huart->pRxBuffPtr = pData;
 80056f0:	6541      	str	r1, [r0, #84]	@ 0x54
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056f2:	f8c0 2084 	str.w	r2, [r0, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80056f6:	2022      	movs	r0, #34	@ 0x22
 80056f8:	f8c4 0080 	str.w	r0, [r4, #128]	@ 0x80
  if (huart->hdmarx != NULL)
 80056fc:	6f60      	ldr	r0, [r4, #116]	@ 0x74
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80056fe:	6825      	ldr	r5, [r4, #0]
  if (huart->hdmarx != NULL)
 8005700:	b1a0      	cbz	r0, 800572c <UART_Start_Receive_DMA+0x48>
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005702:	4e1c      	ldr	r6, [pc, #112]	@ (8005774 <UART_Start_Receive_DMA+0x90>)
 8005704:	6286      	str	r6, [r0, #40]	@ 0x28
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005706:	4e1c      	ldr	r6, [pc, #112]	@ (8005778 <UART_Start_Receive_DMA+0x94>)
 8005708:	62c6      	str	r6, [r0, #44]	@ 0x2c
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800570a:	4e1c      	ldr	r6, [pc, #112]	@ (800577c <UART_Start_Receive_DMA+0x98>)
    huart->hdmarx->XferAbortCallback = NULL;
 800570c:	e9c0 620c 	strd	r6, r2, [r0, #48]	@ 0x30
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8005710:	460a      	mov	r2, r1
 8005712:	f105 0124 	add.w	r1, r5, #36	@ 0x24
 8005716:	f7fd ff5f 	bl	80035d8 <HAL_DMA_Start_IT>
 800571a:	b138      	cbz	r0, 800572c <UART_Start_Receive_DMA+0x48>
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800571c:	2310      	movs	r3, #16
 800571e:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
      huart->RxState = HAL_UART_STATE_READY;
 8005722:	2320      	movs	r3, #32
 8005724:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
      return HAL_ERROR;
 8005728:	2001      	movs	r0, #1
}
 800572a:	bd70      	pop	{r4, r5, r6, pc}
  if (huart->Init.Parity != UART_PARITY_NONE)
 800572c:	6922      	ldr	r2, [r4, #16]
 800572e:	6823      	ldr	r3, [r4, #0]
 8005730:	b13a      	cbz	r2, 8005742 <UART_Start_Receive_DMA+0x5e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005732:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005736:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800573a:	e843 2100 	strex	r1, r2, [r3]
 800573e:	2900      	cmp	r1, #0
 8005740:	d1f7      	bne.n	8005732 <UART_Start_Receive_DMA+0x4e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005742:	f103 0208 	add.w	r2, r3, #8
 8005746:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800574a:	f042 0201 	orr.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800574e:	f103 0008 	add.w	r0, r3, #8
 8005752:	e840 2100 	strex	r1, r2, [r0]
 8005756:	2900      	cmp	r1, #0
 8005758:	d1f3      	bne.n	8005742 <UART_Start_Receive_DMA+0x5e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800575a:	f103 0208 	add.w	r2, r3, #8
 800575e:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005762:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005766:	f103 0108 	add.w	r1, r3, #8
 800576a:	e841 2000 	strex	r0, r2, [r1]
 800576e:	2800      	cmp	r0, #0
 8005770:	d1f3      	bne.n	800575a <UART_Start_Receive_DMA+0x76>
 8005772:	e7da      	b.n	800572a <UART_Start_Receive_DMA+0x46>
 8005774:	080051bb 	.word	0x080051bb
 8005778:	0800519b 	.word	0x0800519b
 800577c:	08005143 	.word	0x08005143

08005780 <HAL_UART_Receive_DMA>:
  if (huart->RxState == HAL_UART_STATE_READY)
 8005780:	f8d0 3080 	ldr.w	r3, [r0, #128]	@ 0x80
 8005784:	2b20      	cmp	r3, #32
{
 8005786:	b430      	push	{r4, r5}
  if (huart->RxState == HAL_UART_STATE_READY)
 8005788:	d112      	bne.n	80057b0 <HAL_UART_Receive_DMA+0x30>
    if ((pData == NULL) || (Size == 0U))
 800578a:	b1a1      	cbz	r1, 80057b6 <HAL_UART_Receive_DMA+0x36>
 800578c:	b19a      	cbz	r2, 80057b6 <HAL_UART_Receive_DMA+0x36>
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800578e:	2300      	movs	r3, #0
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005790:	6804      	ldr	r4, [r0, #0]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005792:	6603      	str	r3, [r0, #96]	@ 0x60
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005794:	6863      	ldr	r3, [r4, #4]
 8005796:	021b      	lsls	r3, r3, #8
 8005798:	d507      	bpl.n	80057aa <HAL_UART_Receive_DMA+0x2a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800579a:	e854 3f00 	ldrex	r3, [r4]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800579e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057a2:	e844 3500 	strex	r5, r3, [r4]
 80057a6:	2d00      	cmp	r5, #0
 80057a8:	d1f7      	bne.n	800579a <HAL_UART_Receive_DMA+0x1a>
}
 80057aa:	bc30      	pop	{r4, r5}
    return (UART_Start_Receive_DMA(huart, pData, Size));
 80057ac:	f7ff bf9a 	b.w	80056e4 <UART_Start_Receive_DMA>
    return HAL_BUSY;
 80057b0:	2002      	movs	r0, #2
}
 80057b2:	bc30      	pop	{r4, r5}
 80057b4:	4770      	bx	lr
      return HAL_ERROR;
 80057b6:	2001      	movs	r0, #1
 80057b8:	e7fb      	b.n	80057b2 <HAL_UART_Receive_DMA+0x32>

080057ba <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80057ba:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 80057bc:	f000 fe32 	bl	8006424 <vTaskStartScheduler>
  
  return osOK;
}
 80057c0:	2000      	movs	r0, #0
 80057c2:	bd08      	pop	{r3, pc}

080057c4 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80057c4:	b570      	push	{r4, r5, r6, lr}
 80057c6:	4605      	mov	r5, r0
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80057c8:	6946      	ldr	r6, [r0, #20]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80057ca:	692a      	ldr	r2, [r5, #16]
 80057cc:	f9b5 4008 	ldrsh.w	r4, [r5, #8]
{
 80057d0:	460b      	mov	r3, r1
 80057d2:	b086      	sub	sp, #24
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80057d4:	e9d0 1000 	ldrd	r1, r0, [r0]
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80057d8:	b176      	cbz	r6, 80057f8 <osThreadCreate+0x34>
 80057da:	69ad      	ldr	r5, [r5, #24]
 80057dc:	b165      	cbz	r5, 80057f8 <osThreadCreate+0x34>
  if (priority != osPriorityError) {
 80057de:	2c84      	cmp	r4, #132	@ 0x84
    fpriority += (priority - osPriorityIdle);
 80057e0:	bf14      	ite	ne
 80057e2:	3403      	addne	r4, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80057e4:	2400      	moveq	r4, #0
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80057e6:	e9cd 6501 	strd	r6, r5, [sp, #4]
 80057ea:	9400      	str	r4, [sp, #0]
 80057ec:	f000 fdb5 	bl	800635a <xTaskCreateStatic>
 80057f0:	9005      	str	r0, [sp, #20]
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80057f2:	9805      	ldr	r0, [sp, #20]
}
 80057f4:	b006      	add	sp, #24
 80057f6:	bd70      	pop	{r4, r5, r6, pc}
  if (priority != osPriorityError) {
 80057f8:	2c84      	cmp	r4, #132	@ 0x84
    fpriority += (priority - osPriorityIdle);
 80057fa:	bf14      	ite	ne
 80057fc:	3403      	addne	r4, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80057fe:	2400      	moveq	r4, #0
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005800:	ad05      	add	r5, sp, #20
 8005802:	e9cd 4500 	strd	r4, r5, [sp]
 8005806:	b292      	uxth	r2, r2
 8005808:	f000 fdde 	bl	80063c8 <xTaskCreate>
 800580c:	2801      	cmp	r0, #1
 800580e:	d0f0      	beq.n	80057f2 <osThreadCreate+0x2e>
      return NULL;
 8005810:	2000      	movs	r0, #0
 8005812:	e7ef      	b.n	80057f4 <osThreadCreate+0x30>

08005814 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8005814:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8005816:	2801      	cmp	r0, #1
 8005818:	bf38      	it	cc
 800581a:	2001      	movcc	r0, #1
 800581c:	f000 ff50 	bl	80066c0 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8005820:	2000      	movs	r0, #0
 8005822:	bd08      	pop	{r3, pc}

08005824 <osPoolCreate>:
* @param  pool_def      memory pool definition referenced with \ref osPool.
* @retval  memory pool ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osPoolCreate shall be consistent in every CMSIS-RTOS.
*/
osPoolId osPoolCreate (const osPoolDef_t *pool_def)
{
 8005824:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
  osPoolId thePool;
  int itemSize = 4 * ((pool_def->item_sz + 3) / 4);
 8005826:	6847      	ldr	r7, [r0, #4]
{
 8005828:	4606      	mov	r6, r0
  uint32_t i;
  
  /* First have to allocate memory for the pool control block. */
 thePool = pvPortMalloc(sizeof(os_pool_cb_t));
 800582a:	2014      	movs	r0, #20
 800582c:	f001 fa80 	bl	8006d30 <pvPortMalloc>

  
  if (thePool) {
 8005830:	4604      	mov	r4, r0
 8005832:	b1b8      	cbz	r0, 8005864 <osPoolCreate+0x40>
    thePool->pool_sz = pool_def->pool_sz;
 8005834:	6830      	ldr	r0, [r6, #0]
  int itemSize = 4 * ((pool_def->item_sz + 3) / 4);
 8005836:	3703      	adds	r7, #3
 8005838:	f027 0703 	bic.w	r7, r7, #3
    thePool->item_sz = itemSize;
    thePool->currentIndex = 0;
 800583c:	2500      	movs	r5, #0
    thePool->item_sz = itemSize;
 800583e:	e9c4 0702 	strd	r0, r7, [r4, #8]
    thePool->currentIndex = 0;
 8005842:	6125      	str	r5, [r4, #16]
    
    /* Memory for markers */
    thePool->markers = pvPortMalloc(pool_def->pool_sz);
 8005844:	f001 fa74 	bl	8006d30 <pvPortMalloc>
 8005848:	6060      	str	r0, [r4, #4]
   
    if (thePool->markers) {
 800584a:	b140      	cbz	r0, 800585e <osPoolCreate+0x3a>
      /* Now allocate the pool itself. */
     thePool->pool = pvPortMalloc(pool_def->pool_sz * itemSize);
 800584c:	6830      	ldr	r0, [r6, #0]
 800584e:	4378      	muls	r0, r7
 8005850:	f001 fa6e 	bl	8006d30 <pvPortMalloc>
 8005854:	6020      	str	r0, [r4, #0]
      
      if (thePool->pool) {
 8005856:	b978      	cbnz	r0, 8005878 <osPoolCreate+0x54>
        for (i = 0; i < pool_def->pool_sz; i++) {
          thePool->markers[i] = 0;
        }
      }
      else {
        vPortFree(thePool->markers);
 8005858:	6860      	ldr	r0, [r4, #4]
 800585a:	f001 fafb 	bl	8006e54 <vPortFree>
        vPortFree(thePool);
 800585e:	4620      	mov	r0, r4
 8005860:	f001 faf8 	bl	8006e54 <vPortFree>
 thePool = pvPortMalloc(sizeof(os_pool_cb_t));
 8005864:	2400      	movs	r4, #0
 8005866:	e005      	b.n	8005874 <osPoolCreate+0x50>
          thePool->markers[i] = 0;
 8005868:	6862      	ldr	r2, [r4, #4]
 800586a:	54d1      	strb	r1, [r2, r3]
        for (i = 0; i < pool_def->pool_sz; i++) {
 800586c:	3301      	adds	r3, #1
 800586e:	6832      	ldr	r2, [r6, #0]
 8005870:	429a      	cmp	r2, r3
 8005872:	d8f9      	bhi.n	8005868 <osPoolCreate+0x44>
  return thePool;
 
#else
  return NULL;
#endif
}
 8005874:	4620      	mov	r0, r4
 8005876:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        for (i = 0; i < pool_def->pool_sz; i++) {
 8005878:	462b      	mov	r3, r5
          thePool->markers[i] = 0;
 800587a:	4629      	mov	r1, r5
 800587c:	e7f7      	b.n	800586e <osPoolCreate+0x4a>

0800587e <osPoolAlloc>:
* @param pool_id       memory pool ID obtain referenced with \ref osPoolCreate.
* @retval  address of the allocated memory block or NULL in case of no memory available.
* @note   MUST REMAIN UNCHANGED: \b osPoolAlloc shall be consistent in every CMSIS-RTOS.
*/
void *osPoolAlloc (osPoolId pool_id)
{
 800587e:	b570      	push	{r4, r5, r6, lr}
 8005880:	4604      	mov	r4, r0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005882:	f3ef 8605 	mrs	r6, IPSR
  int dummy = 0;
  void *p = NULL;
  uint32_t i;
  uint32_t index;
  
  if (inHandlerMode()) {
 8005886:	b186      	cbz	r6, 80058aa <osPoolAlloc+0x2c>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005888:	f3ef 8511 	mrs	r5, BASEPRI
 800588c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005890:	f383 8811 	msr	BASEPRI, r3
 8005894:	f3bf 8f6f 	isb	sy
 8005898:	f3bf 8f4f 	dsb	sy
    dummy = portSET_INTERRUPT_MASK_FROM_ISR();
 800589c:	462e      	mov	r6, r5
  }
  else {
    vPortEnterCritical();
  }
  
  for (i = 0; i < pool_id->pool_sz; i++) {
 800589e:	68a1      	ldr	r1, [r4, #8]
 80058a0:	2200      	movs	r2, #0
 80058a2:	4291      	cmp	r1, r2
 80058a4:	d104      	bne.n	80058b0 <osPoolAlloc+0x32>
  void *p = NULL;
 80058a6:	2500      	movs	r5, #0
 80058a8:	e012      	b.n	80058d0 <osPoolAlloc+0x52>
    vPortEnterCritical();
 80058aa:	f001 f8db 	bl	8006a64 <vPortEnterCritical>
 80058ae:	e7f6      	b.n	800589e <osPoolAlloc+0x20>
    index = (pool_id->currentIndex + i) % pool_id->pool_sz;
 80058b0:	6923      	ldr	r3, [r4, #16]
 80058b2:	4413      	add	r3, r2
 80058b4:	fbb3 f0f1 	udiv	r0, r3, r1
 80058b8:	fb01 3310 	mls	r3, r1, r0, r3
    
    if (pool_id->markers[index] == 0) {
 80058bc:	6860      	ldr	r0, [r4, #4]
 80058be:	5cc5      	ldrb	r5, [r0, r3]
 80058c0:	b96d      	cbnz	r5, 80058de <osPoolAlloc+0x60>
      pool_id->markers[index] = 1;
 80058c2:	2201      	movs	r2, #1
 80058c4:	54c2      	strb	r2, [r0, r3]
      p = (void *)((uint32_t)(pool_id->pool) + (index * pool_id->item_sz));
 80058c6:	68e2      	ldr	r2, [r4, #12]
 80058c8:	6825      	ldr	r5, [r4, #0]
      pool_id->currentIndex = index;
 80058ca:	6123      	str	r3, [r4, #16]
      p = (void *)((uint32_t)(pool_id->pool) + (index * pool_id->item_sz));
 80058cc:	fb02 5503 	mla	r5, r2, r3, r5
 80058d0:	f3ef 8305 	mrs	r3, IPSR
      break;
    }
  }
  
  if (inHandlerMode()) {
 80058d4:	b12b      	cbz	r3, 80058e2 <osPoolAlloc+0x64>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80058d6:	f386 8811 	msr	BASEPRI, r6
  else {
    vPortExitCritical();
  }
  
  return p;
}
 80058da:	4628      	mov	r0, r5
 80058dc:	bd70      	pop	{r4, r5, r6, pc}
  for (i = 0; i < pool_id->pool_sz; i++) {
 80058de:	3201      	adds	r2, #1
 80058e0:	e7df      	b.n	80058a2 <osPoolAlloc+0x24>
    vPortExitCritical();
 80058e2:	f001 f8df 	bl	8006aa4 <vPortExitCritical>
  return p;
 80058e6:	e7f8      	b.n	80058da <osPoolAlloc+0x5c>

080058e8 <osPoolFree>:
*/
osStatus osPoolFree (osPoolId pool_id, void *block)
{
  uint32_t index;
  
  if (pool_id == NULL) {
 80058e8:	4603      	mov	r3, r0
 80058ea:	b180      	cbz	r0, 800590e <osPoolFree+0x26>
    return osErrorParameter;
  }
  
  if (block == NULL) {
 80058ec:	b179      	cbz	r1, 800590e <osPoolFree+0x26>
    return osErrorParameter;
  }
  
  if (block < pool_id->pool) {
 80058ee:	6802      	ldr	r2, [r0, #0]
 80058f0:	428a      	cmp	r2, r1
 80058f2:	d80c      	bhi.n	800590e <osPoolFree+0x26>
    return osErrorParameter;
  }
  
  index = (uint32_t)block - (uint32_t)(pool_id->pool);
  if (index % pool_id->item_sz) {
 80058f4:	68c0      	ldr	r0, [r0, #12]
  index = (uint32_t)block - (uint32_t)(pool_id->pool);
 80058f6:	1a89      	subs	r1, r1, r2
  if (index % pool_id->item_sz) {
 80058f8:	fbb1 f2f0 	udiv	r2, r1, r0
 80058fc:	fb00 1012 	mls	r0, r0, r2, r1
 8005900:	b928      	cbnz	r0, 800590e <osPoolFree+0x26>
    return osErrorParameter;
  }
  index = index / pool_id->item_sz;
  if (index >= pool_id->pool_sz) {
 8005902:	6899      	ldr	r1, [r3, #8]
 8005904:	4291      	cmp	r1, r2
 8005906:	d902      	bls.n	800590e <osPoolFree+0x26>
    return osErrorParameter;
  }
  
  pool_id->markers[index] = 0;
 8005908:	685b      	ldr	r3, [r3, #4]
 800590a:	5498      	strb	r0, [r3, r2]
  
  return osOK;
 800590c:	4770      	bx	lr
    return osErrorParameter;
 800590e:	2080      	movs	r0, #128	@ 0x80
}
 8005910:	4770      	bx	lr

08005912 <osMailCreate>:
* @param   thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval mail queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMailCreate shall be consistent in every CMSIS-RTOS.
*/
osMailQId osMailCreate (const osMailQDef_t *queue_def, osThreadId thread_id)
{
 8005912:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
  (void) thread_id;
  
  osPoolDef_t pool_def = {queue_def->queue_sz, queue_def->item_sz, NULL};
 8005914:	6803      	ldr	r3, [r0, #0]
  
  /* Create a mail queue control block */

  *(queue_def->cb) = pvPortMalloc(sizeof(struct os_mailQ_cb));
 8005916:	6885      	ldr	r5, [r0, #8]
  osPoolDef_t pool_def = {queue_def->queue_sz, queue_def->item_sz, NULL};
 8005918:	9301      	str	r3, [sp, #4]
{
 800591a:	4604      	mov	r4, r0
  osPoolDef_t pool_def = {queue_def->queue_sz, queue_def->item_sz, NULL};
 800591c:	6843      	ldr	r3, [r0, #4]
 800591e:	9302      	str	r3, [sp, #8]
 8005920:	2600      	movs	r6, #0
  *(queue_def->cb) = pvPortMalloc(sizeof(struct os_mailQ_cb));
 8005922:	200c      	movs	r0, #12
  osPoolDef_t pool_def = {queue_def->queue_sz, queue_def->item_sz, NULL};
 8005924:	9603      	str	r6, [sp, #12]
  *(queue_def->cb) = pvPortMalloc(sizeof(struct os_mailQ_cb));
 8005926:	f001 fa03 	bl	8006d30 <pvPortMalloc>

  if (*(queue_def->cb) == NULL) {
 800592a:	68a3      	ldr	r3, [r4, #8]
  *(queue_def->cb) = pvPortMalloc(sizeof(struct os_mailQ_cb));
 800592c:	6028      	str	r0, [r5, #0]
  if (*(queue_def->cb) == NULL) {
 800592e:	681d      	ldr	r5, [r3, #0]
 8005930:	b16d      	cbz	r5, 800594e <osMailCreate+0x3c>
    return NULL;
  }
  (*(queue_def->cb))->queue_def = queue_def;
 8005932:	602c      	str	r4, [r5, #0]
  
  /* Create a queue in FreeRTOS */
  (*(queue_def->cb))->handle = xQueueCreate(queue_def->queue_sz, sizeof(void *));
 8005934:	6820      	ldr	r0, [r4, #0]
 8005936:	4632      	mov	r2, r6
 8005938:	2104      	movs	r1, #4
 800593a:	f000 f98f 	bl	8005c5c <xQueueGenericCreate>


  if ((*(queue_def->cb))->handle == NULL) {
 800593e:	68a3      	ldr	r3, [r4, #8]
  (*(queue_def->cb))->handle = xQueueCreate(queue_def->queue_sz, sizeof(void *));
 8005940:	6068      	str	r0, [r5, #4]
  if ((*(queue_def->cb))->handle == NULL) {
 8005942:	681d      	ldr	r5, [r3, #0]
 8005944:	686b      	ldr	r3, [r5, #4]
 8005946:	b92b      	cbnz	r3, 8005954 <osMailCreate+0x42>
    vPortFree(*(queue_def->cb));
 8005948:	4628      	mov	r0, r5
 800594a:	f001 fa83 	bl	8006e54 <vPortFree>
    return NULL;
 800594e:	2000      	movs	r0, #0
  
  return *(queue_def->cb);
#else
  return NULL;
#endif
}
 8005950:	b004      	add	sp, #16
 8005952:	bd70      	pop	{r4, r5, r6, pc}
  (*(queue_def->cb))->pool = osPoolCreate(&pool_def);
 8005954:	a801      	add	r0, sp, #4
 8005956:	f7ff ff65 	bl	8005824 <osPoolCreate>
  if ((*(queue_def->cb))->pool == NULL) {
 800595a:	68a3      	ldr	r3, [r4, #8]
  (*(queue_def->cb))->pool = osPoolCreate(&pool_def);
 800595c:	60a8      	str	r0, [r5, #8]
  if ((*(queue_def->cb))->pool == NULL) {
 800595e:	6818      	ldr	r0, [r3, #0]
 8005960:	6883      	ldr	r3, [r0, #8]
 8005962:	2b00      	cmp	r3, #0
 8005964:	d1f4      	bne.n	8005950 <osMailCreate+0x3e>
 8005966:	e7f0      	b.n	800594a <osMailCreate+0x38>

08005968 <osMailAlloc>:
{
  (void) millisec;
  void *p;
  
  
  if (queue_id == NULL) {
 8005968:	b110      	cbz	r0, 8005970 <osMailAlloc+0x8>
    return NULL;
  }
  
  p = osPoolAlloc(queue_id->pool);
 800596a:	6880      	ldr	r0, [r0, #8]
 800596c:	f7ff bf87 	b.w	800587e <osPoolAlloc>
  
  return p;
}
 8005970:	4770      	bx	lr

08005972 <osMailPut>:
* @param  mail          memory block previously allocated with \ref osMailAlloc or \ref osMailCAlloc.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMailPut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMailPut (osMailQId queue_id, void *mail)
{
 8005972:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005974:	9101      	str	r1, [sp, #4]
  portBASE_TYPE taskWoken;
  
  
  if (queue_id == NULL) {
 8005976:	b328      	cbz	r0, 80059c4 <osMailPut+0x52>
    return osErrorParameter;
  }
  
  taskWoken = pdFALSE;
 8005978:	2200      	movs	r2, #0
 800597a:	9203      	str	r2, [sp, #12]
 800597c:	f3ef 8305 	mrs	r3, IPSR
  
  if (inHandlerMode()) {
    if (xQueueSendFromISR(queue_id->handle, &mail, &taskWoken) != pdTRUE) {
 8005980:	6840      	ldr	r0, [r0, #4]
  if (inHandlerMode()) {
 8005982:	b1c3      	cbz	r3, 80059b6 <osMailPut+0x44>
    if (xQueueSendFromISR(queue_id->handle, &mail, &taskWoken) != pdTRUE) {
 8005984:	4613      	mov	r3, r2
 8005986:	a901      	add	r1, sp, #4
 8005988:	aa03      	add	r2, sp, #12
 800598a:	f000 fa3d 	bl	8005e08 <xQueueGenericSendFromISR>
 800598e:	2801      	cmp	r0, #1
 8005990:	d003      	beq.n	800599a <osMailPut+0x28>
      return osErrorOS;
 8005992:	20ff      	movs	r0, #255	@ 0xff
      return osErrorOS;
    }
  }
  
  return osOK;
}
 8005994:	b005      	add	sp, #20
 8005996:	f85d fb04 	ldr.w	pc, [sp], #4
    portEND_SWITCHING_ISR(taskWoken);
 800599a:	9b03      	ldr	r3, [sp, #12]
 800599c:	b14b      	cbz	r3, 80059b2 <osMailPut+0x40>
 800599e:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80059a2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80059a6:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80059aa:	f3bf 8f4f 	dsb	sy
 80059ae:	f3bf 8f6f 	isb	sy
  return osOK;
 80059b2:	2000      	movs	r0, #0
 80059b4:	e7ee      	b.n	8005994 <osMailPut+0x22>
    if (xQueueSend(queue_id->handle, &mail, 0) != pdTRUE) { 
 80059b6:	461a      	mov	r2, r3
 80059b8:	a901      	add	r1, sp, #4
 80059ba:	f000 f973 	bl	8005ca4 <xQueueGenericSend>
 80059be:	2801      	cmp	r0, #1
 80059c0:	d0f7      	beq.n	80059b2 <osMailPut+0x40>
 80059c2:	e7e6      	b.n	8005992 <osMailPut+0x20>
    return osErrorParameter;
 80059c4:	2080      	movs	r0, #128	@ 0x80
 80059c6:	e7e5      	b.n	8005994 <osMailPut+0x22>

080059c8 <osMailGet>:
* @param millisec    timeout value or 0 in case of no time-out
* @retval event that contains mail information or error code.
* @note   MUST REMAIN UNCHANGED: \b osMailGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMailGet (osMailQId queue_id, uint32_t millisec)
{
 80059c8:	b530      	push	{r4, r5, lr}
 80059ca:	b085      	sub	sp, #20
 80059cc:	4605      	mov	r5, r0
 80059ce:	4614      	mov	r4, r2
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.mail_id = queue_id;
 80059d0:	9103      	str	r1, [sp, #12]
  
  if (queue_id == NULL) {
 80059d2:	b911      	cbnz	r1, 80059da <osMailGet+0x12>
    event.status = osErrorParameter;
 80059d4:	2380      	movs	r3, #128	@ 0x80
    portEND_SWITCHING_ISR(taskWoken);
  }
  else {
    if (xQueueReceive(queue_id->handle, &event.value.p, ticks) == pdTRUE) {
      /* We have mail */
      event.status = osEventMail;
 80059d6:	9301      	str	r3, [sp, #4]
 80059d8:	e01a      	b.n	8005a10 <osMailGet+0x48>
  taskWoken = pdFALSE;
 80059da:	2300      	movs	r3, #0
 80059dc:	9300      	str	r3, [sp, #0]
 80059de:	f3ef 8305 	mrs	r3, IPSR
    if (xQueueReceiveFromISR(queue_id->handle, &event.value.p, &taskWoken) == pdTRUE) {
 80059e2:	6848      	ldr	r0, [r1, #4]
  if (inHandlerMode()) {
 80059e4:	b1e3      	cbz	r3, 8005a20 <osMailGet+0x58>
    if (xQueueReceiveFromISR(queue_id->handle, &event.value.p, &taskWoken) == pdTRUE) {
 80059e6:	466a      	mov	r2, sp
 80059e8:	a902      	add	r1, sp, #8
 80059ea:	f000 fb07 	bl	8005ffc <xQueueReceiveFromISR>
 80059ee:	1e43      	subs	r3, r0, #1
 80059f0:	4258      	negs	r0, r3
 80059f2:	4158      	adcs	r0, r3
    portEND_SWITCHING_ISR(taskWoken);
 80059f4:	9b00      	ldr	r3, [sp, #0]
    if (xQueueReceiveFromISR(queue_id->handle, &event.value.p, &taskWoken) == pdTRUE) {
 80059f6:	0140      	lsls	r0, r0, #5
 80059f8:	9001      	str	r0, [sp, #4]
    portEND_SWITCHING_ISR(taskWoken);
 80059fa:	b14b      	cbz	r3, 8005a10 <osMailGet+0x48>
 80059fc:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8005a00:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005a04:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8005a08:	f3bf 8f4f 	dsb	sy
 8005a0c:	f3bf 8f6f 	isb	sy
    return event;
 8005a10:	ab04      	add	r3, sp, #16
 8005a12:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8005a16:	e885 0007 	stmia.w	r5, {r0, r1, r2}
      event.status = (ticks == 0) ? osOK : osEventTimeout;
    }
  }
  
  return event;
}
 8005a1a:	4628      	mov	r0, r5
 8005a1c:	b005      	add	sp, #20
 8005a1e:	bd30      	pop	{r4, r5, pc}
    if (xQueueReceive(queue_id->handle, &event.value.p, ticks) == pdTRUE) {
 8005a20:	a902      	add	r1, sp, #8
 8005a22:	f000 fa4d 	bl	8005ec0 <xQueueReceive>
 8005a26:	2801      	cmp	r0, #1
 8005a28:	d101      	bne.n	8005a2e <osMailGet+0x66>
      event.status = osEventMail;
 8005a2a:	2320      	movs	r3, #32
 8005a2c:	e7d3      	b.n	80059d6 <osMailGet+0xe>
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8005a2e:	3c00      	subs	r4, #0
 8005a30:	bf18      	it	ne
 8005a32:	2401      	movne	r4, #1
 8005a34:	01a4      	lsls	r4, r4, #6
 8005a36:	9401      	str	r4, [sp, #4]
  return event;
 8005a38:	e7ea      	b.n	8005a10 <osMailGet+0x48>

08005a3a <osMailFree>:
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMailFree shall be consistent in every CMSIS-RTOS.
*/
osStatus osMailFree (osMailQId queue_id, void *mail)
{
  if (queue_id == NULL) {
 8005a3a:	b110      	cbz	r0, 8005a42 <osMailFree+0x8>
    return osErrorParameter;
  }
  
  return osPoolFree(queue_id->pool, mail);
 8005a3c:	6880      	ldr	r0, [r0, #8]
 8005a3e:	f7ff bf53 	b.w	80058e8 <osPoolFree>
}
 8005a42:	2080      	movs	r0, #128	@ 0x80
 8005a44:	4770      	bx	lr

08005a46 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005a46:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005a4a:	f04f 32ff 	mov.w	r2, #4294967295

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005a4e:	e9c0 2302 	strd	r2, r3, [r0, #8]
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005a52:	6043      	str	r3, [r0, #4]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005a54:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005a56:	2300      	movs	r3, #0
 8005a58:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005a5a:	4770      	bx	lr

08005a5c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8005a5c:	2300      	movs	r3, #0
 8005a5e:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005a60:	4770      	bx	lr

08005a62 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8005a62:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005a64:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005a66:	689a      	ldr	r2, [r3, #8]
 8005a68:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005a6a:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005a6c:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8005a6e:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005a70:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8005a72:	3301      	adds	r3, #1
 8005a74:	6003      	str	r3, [r0, #0]
}
 8005a76:	4770      	bx	lr

08005a78 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005a78:	b530      	push	{r4, r5, lr}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005a7a:	680c      	ldr	r4, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005a7c:	1c63      	adds	r3, r4, #1
 8005a7e:	d10a      	bne.n	8005a96 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005a80:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005a82:	685a      	ldr	r2, [r3, #4]
 8005a84:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005a86:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005a88:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8005a8a:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8005a8c:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005a8e:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8005a90:	3301      	adds	r3, #1
 8005a92:	6003      	str	r3, [r0, #0]
}
 8005a94:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005a96:	f100 0208 	add.w	r2, r0, #8
 8005a9a:	4613      	mov	r3, r2
 8005a9c:	6852      	ldr	r2, [r2, #4]
 8005a9e:	6815      	ldr	r5, [r2, #0]
 8005aa0:	42a5      	cmp	r5, r4
 8005aa2:	d9fa      	bls.n	8005a9a <vListInsert+0x22>
 8005aa4:	e7ed      	b.n	8005a82 <vListInsert+0xa>

08005aa6 <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005aa6:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8005aaa:	6903      	ldr	r3, [r0, #16]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005aac:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005aae:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005ab0:	6859      	ldr	r1, [r3, #4]
 8005ab2:	4281      	cmp	r1, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005ab4:	bf08      	it	eq
 8005ab6:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8005ab8:	2200      	movs	r2, #0
 8005aba:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8005abc:	681a      	ldr	r2, [r3, #0]
 8005abe:	3a01      	subs	r2, #1
 8005ac0:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005ac2:	6818      	ldr	r0, [r3, #0]
}
 8005ac4:	4770      	bx	lr

08005ac6 <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005ac6:	b510      	push	{r4, lr}
 8005ac8:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005aca:	f000 ffcb 	bl	8006a64 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005ace:	6ba4      	ldr	r4, [r4, #56]	@ 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8005ad0:	f000 ffe8 	bl	8006aa4 <vPortExitCritical>

	return xReturn;
}
 8005ad4:	fab4 f084 	clz	r0, r4
 8005ad8:	0940      	lsrs	r0, r0, #5
 8005ada:	bd10      	pop	{r4, pc}

08005adc <prvCopyDataToQueue>:
{
 8005adc:	b570      	push	{r4, r5, r6, lr}
 8005ade:	4616      	mov	r6, r2
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005ae0:	6c02      	ldr	r2, [r0, #64]	@ 0x40
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005ae2:	6b85      	ldr	r5, [r0, #56]	@ 0x38
{
 8005ae4:	4604      	mov	r4, r0
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005ae6:	b942      	cbnz	r2, 8005afa <prvCopyDataToQueue+0x1e>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005ae8:	6806      	ldr	r6, [r0, #0]
 8005aea:	b99e      	cbnz	r6, 8005b14 <prvCopyDataToQueue+0x38>
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8005aec:	6840      	ldr	r0, [r0, #4]
 8005aee:	f000 feff 	bl	80068f0 <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 8005af2:	6066      	str	r6, [r4, #4]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005af4:	3501      	adds	r5, #1
 8005af6:	63a5      	str	r5, [r4, #56]	@ 0x38
}
 8005af8:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 8005afa:	b96e      	cbnz	r6, 8005b18 <prvCopyDataToQueue+0x3c>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8005afc:	6880      	ldr	r0, [r0, #8]
 8005afe:	f003 fcb4 	bl	800946a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8005b02:	68a3      	ldr	r3, [r4, #8]
 8005b04:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8005b06:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005b08:	6862      	ldr	r2, [r4, #4]
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8005b0a:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005b0c:	4293      	cmp	r3, r2
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005b0e:	bf24      	itt	cs
 8005b10:	6823      	ldrcs	r3, [r4, #0]
 8005b12:	60a3      	strcs	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
 8005b14:	2000      	movs	r0, #0
 8005b16:	e7ed      	b.n	8005af4 <prvCopyDataToQueue+0x18>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005b18:	68c0      	ldr	r0, [r0, #12]
 8005b1a:	f003 fca6 	bl	800946a <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8005b1e:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8005b20:	68e3      	ldr	r3, [r4, #12]
 8005b22:	4251      	negs	r1, r2
 8005b24:	1a9b      	subs	r3, r3, r2
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005b26:	6822      	ldr	r2, [r4, #0]
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8005b28:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005b2a:	4293      	cmp	r3, r2
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8005b2c:	bf3e      	ittt	cc
 8005b2e:	6863      	ldrcc	r3, [r4, #4]
 8005b30:	185b      	addcc	r3, r3, r1
 8005b32:	60e3      	strcc	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 8005b34:	2e02      	cmp	r6, #2
 8005b36:	d1ed      	bne.n	8005b14 <prvCopyDataToQueue+0x38>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005b38:	b10d      	cbz	r5, 8005b3e <prvCopyDataToQueue+0x62>
				--uxMessagesWaiting;
 8005b3a:	3d01      	subs	r5, #1
 8005b3c:	e7ea      	b.n	8005b14 <prvCopyDataToQueue+0x38>
BaseType_t xReturn = pdFALSE;
 8005b3e:	4628      	mov	r0, r5
 8005b40:	e7d8      	b.n	8005af4 <prvCopyDataToQueue+0x18>

08005b42 <prvCopyDataFromQueue>:
{
 8005b42:	4603      	mov	r3, r0
 8005b44:	b410      	push	{r4}
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005b46:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
{
 8005b48:	4608      	mov	r0, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005b4a:	b16a      	cbz	r2, 8005b68 <prvCopyDataFromQueue+0x26>
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8005b4c:	68dc      	ldr	r4, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005b4e:	6859      	ldr	r1, [r3, #4]
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8005b50:	4414      	add	r4, r2
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005b52:	428c      	cmp	r4, r1
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8005b54:	bf28      	it	cs
 8005b56:	6819      	ldrcs	r1, [r3, #0]
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8005b58:	60dc      	str	r4, [r3, #12]
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8005b5a:	bf28      	it	cs
 8005b5c:	60d9      	strcs	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8005b5e:	68d9      	ldr	r1, [r3, #12]
}
 8005b60:	f85d 4b04 	ldr.w	r4, [sp], #4
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8005b64:	f003 bc81 	b.w	800946a <memcpy>
}
 8005b68:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005b6c:	4770      	bx	lr

08005b6e <prvUnlockQueue>:
{
 8005b6e:	b570      	push	{r4, r5, r6, lr}
 8005b70:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8005b72:	f000 ff77 	bl	8006a64 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8005b76:	f894 5045 	ldrb.w	r5, [r4, #69]	@ 0x45
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005b7a:	f104 0624 	add.w	r6, r4, #36	@ 0x24
		int8_t cTxLock = pxQueue->cTxLock;
 8005b7e:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005b80:	2d00      	cmp	r5, #0
 8005b82:	dc14      	bgt.n	8005bae <prvUnlockQueue+0x40>
		pxQueue->cTxLock = queueUNLOCKED;
 8005b84:	23ff      	movs	r3, #255	@ 0xff
 8005b86:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
	taskEXIT_CRITICAL();
 8005b8a:	f000 ff8b 	bl	8006aa4 <vPortExitCritical>
	taskENTER_CRITICAL();
 8005b8e:	f000 ff69 	bl	8006a64 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8005b92:	f894 5044 	ldrb.w	r5, [r4, #68]	@ 0x44
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005b96:	f104 0610 	add.w	r6, r4, #16
		int8_t cRxLock = pxQueue->cRxLock;
 8005b9a:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005b9c:	2d00      	cmp	r5, #0
 8005b9e:	dc12      	bgt.n	8005bc6 <prvUnlockQueue+0x58>
		pxQueue->cRxLock = queueUNLOCKED;
 8005ba0:	23ff      	movs	r3, #255	@ 0xff
 8005ba2:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
}
 8005ba6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 8005baa:	f000 bf7b 	b.w	8006aa4 <vPortExitCritical>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005bae:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d0e7      	beq.n	8005b84 <prvUnlockQueue+0x16>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005bb4:	4630      	mov	r0, r6
 8005bb6:	f000 fdfb 	bl	80067b0 <xTaskRemoveFromEventList>
 8005bba:	b108      	cbz	r0, 8005bc0 <prvUnlockQueue+0x52>
						vTaskMissedYield();
 8005bbc:	f000 fe82 	bl	80068c4 <vTaskMissedYield>
			--cTxLock;
 8005bc0:	3d01      	subs	r5, #1
 8005bc2:	b26d      	sxtb	r5, r5
 8005bc4:	e7dc      	b.n	8005b80 <prvUnlockQueue+0x12>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005bc6:	6923      	ldr	r3, [r4, #16]
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d0e9      	beq.n	8005ba0 <prvUnlockQueue+0x32>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005bcc:	4630      	mov	r0, r6
 8005bce:	f000 fdef 	bl	80067b0 <xTaskRemoveFromEventList>
 8005bd2:	b108      	cbz	r0, 8005bd8 <prvUnlockQueue+0x6a>
					vTaskMissedYield();
 8005bd4:	f000 fe76 	bl	80068c4 <vTaskMissedYield>
				--cRxLock;
 8005bd8:	3d01      	subs	r5, #1
 8005bda:	b26d      	sxtb	r5, r5
 8005bdc:	e7de      	b.n	8005b9c <prvUnlockQueue+0x2e>

08005bde <xQueueGenericReset>:
{
 8005bde:	b538      	push	{r3, r4, r5, lr}
 8005be0:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 8005be2:	4604      	mov	r4, r0
 8005be4:	b940      	cbnz	r0, 8005bf8 <xQueueGenericReset+0x1a>
	__asm volatile
 8005be6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bea:	f383 8811 	msr	BASEPRI, r3
 8005bee:	f3bf 8f6f 	isb	sy
 8005bf2:	f3bf 8f4f 	dsb	sy
 8005bf6:	e7fe      	b.n	8005bf6 <xQueueGenericReset+0x18>
	taskENTER_CRITICAL();
 8005bf8:	f000 ff34 	bl	8006a64 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8005bfc:	e9d4 310f 	ldrd	r3, r1, [r4, #60]	@ 0x3c
 8005c00:	6822      	ldr	r2, [r4, #0]
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005c02:	60a2      	str	r2, [r4, #8]
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8005c04:	434b      	muls	r3, r1
 8005c06:	18d0      	adds	r0, r2, r3
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8005c08:	1a5b      	subs	r3, r3, r1
 8005c0a:	441a      	add	r2, r3
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8005c0c:	6060      	str	r0, [r4, #4]
		pxQueue->cRxLock = queueUNLOCKED;
 8005c0e:	23ff      	movs	r3, #255	@ 0xff
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005c10:	2000      	movs	r0, #0
 8005c12:	63a0      	str	r0, [r4, #56]	@ 0x38
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8005c14:	60e2      	str	r2, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005c16:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005c1a:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
		if( xNewQueue == pdFALSE )
 8005c1e:	b9a5      	cbnz	r5, 8005c4a <xQueueGenericReset+0x6c>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005c20:	6923      	ldr	r3, [r4, #16]
 8005c22:	b173      	cbz	r3, 8005c42 <xQueueGenericReset+0x64>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005c24:	f104 0010 	add.w	r0, r4, #16
 8005c28:	f000 fdc2 	bl	80067b0 <xTaskRemoveFromEventList>
 8005c2c:	b148      	cbz	r0, 8005c42 <xQueueGenericReset+0x64>
					queueYIELD_IF_USING_PREEMPTION();
 8005c2e:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8005c32:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005c36:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8005c3a:	f3bf 8f4f 	dsb	sy
 8005c3e:	f3bf 8f6f 	isb	sy
	taskEXIT_CRITICAL();
 8005c42:	f000 ff2f 	bl	8006aa4 <vPortExitCritical>
}
 8005c46:	2001      	movs	r0, #1
 8005c48:	bd38      	pop	{r3, r4, r5, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005c4a:	f104 0010 	add.w	r0, r4, #16
 8005c4e:	f7ff fefa 	bl	8005a46 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005c52:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8005c56:	f7ff fef6 	bl	8005a46 <vListInitialise>
 8005c5a:	e7f2      	b.n	8005c42 <xQueueGenericReset+0x64>

08005c5c <xQueueGenericCreate>:
	{
 8005c5c:	b570      	push	{r4, r5, r6, lr}
 8005c5e:	460d      	mov	r5, r1
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005c60:	4606      	mov	r6, r0
 8005c62:	b940      	cbnz	r0, 8005c76 <xQueueGenericCreate+0x1a>
 8005c64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c68:	f383 8811 	msr	BASEPRI, r3
 8005c6c:	f3bf 8f6f 	isb	sy
 8005c70:	f3bf 8f4f 	dsb	sy
 8005c74:	e7fe      	b.n	8005c74 <xQueueGenericCreate+0x18>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005c76:	4348      	muls	r0, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8005c78:	3048      	adds	r0, #72	@ 0x48
 8005c7a:	f001 f859 	bl	8006d30 <pvPortMalloc>
		if( pxNewQueue != NULL )
 8005c7e:	4604      	mov	r4, r0
 8005c80:	b160      	cbz	r0, 8005c9c <xQueueGenericCreate+0x40>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005c82:	2300      	movs	r3, #0
 8005c84:	f880 3046 	strb.w	r3, [r0, #70]	@ 0x46
	if( uxItemSize == ( UBaseType_t ) 0 )
 8005c88:	b155      	cbz	r5, 8005ca0 <xQueueGenericCreate+0x44>
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8005c8a:	f100 0348 	add.w	r3, r0, #72	@ 0x48
	pxNewQueue->uxItemSize = uxItemSize;
 8005c8e:	e9c4 650f 	strd	r6, r5, [r4, #60]	@ 0x3c
 8005c92:	6023      	str	r3, [r4, #0]
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005c94:	2101      	movs	r1, #1
 8005c96:	4620      	mov	r0, r4
 8005c98:	f7ff ffa1 	bl	8005bde <xQueueGenericReset>
	}
 8005c9c:	4620      	mov	r0, r4
 8005c9e:	bd70      	pop	{r4, r5, r6, pc}
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005ca0:	4603      	mov	r3, r0
 8005ca2:	e7f4      	b.n	8005c8e <xQueueGenericCreate+0x32>

08005ca4 <xQueueGenericSend>:
{
 8005ca4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8005ca8:	460f      	mov	r7, r1
 8005caa:	9201      	str	r2, [sp, #4]
 8005cac:	461e      	mov	r6, r3
	configASSERT( pxQueue );
 8005cae:	4604      	mov	r4, r0
 8005cb0:	b940      	cbnz	r0, 8005cc4 <xQueueGenericSend+0x20>
 8005cb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cb6:	f383 8811 	msr	BASEPRI, r3
 8005cba:	f3bf 8f6f 	isb	sy
 8005cbe:	f3bf 8f4f 	dsb	sy
 8005cc2:	e7fe      	b.n	8005cc2 <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005cc4:	b951      	cbnz	r1, 8005cdc <xQueueGenericSend+0x38>
 8005cc6:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8005cc8:	b143      	cbz	r3, 8005cdc <xQueueGenericSend+0x38>
 8005cca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cce:	f383 8811 	msr	BASEPRI, r3
 8005cd2:	f3bf 8f6f 	isb	sy
 8005cd6:	f3bf 8f4f 	dsb	sy
 8005cda:	e7fe      	b.n	8005cda <xQueueGenericSend+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005cdc:	2e02      	cmp	r6, #2
 8005cde:	d10b      	bne.n	8005cf8 <xQueueGenericSend+0x54>
 8005ce0:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8005ce2:	2b01      	cmp	r3, #1
 8005ce4:	d008      	beq.n	8005cf8 <xQueueGenericSend+0x54>
 8005ce6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cea:	f383 8811 	msr	BASEPRI, r3
 8005cee:	f3bf 8f6f 	isb	sy
 8005cf2:	f3bf 8f4f 	dsb	sy
 8005cf6:	e7fe      	b.n	8005cf6 <xQueueGenericSend+0x52>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005cf8:	f000 fdea 	bl	80068d0 <xTaskGetSchedulerState>
 8005cfc:	4605      	mov	r5, r0
 8005cfe:	b330      	cbz	r0, 8005d4e <xQueueGenericSend+0xaa>
 8005d00:	2500      	movs	r5, #0
		prvLockQueue( pxQueue );
 8005d02:	f04f 0800 	mov.w	r8, #0
		taskENTER_CRITICAL();
 8005d06:	f000 fead 	bl	8006a64 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005d0a:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8005d0c:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8005d0e:	429a      	cmp	r2, r3
 8005d10:	d301      	bcc.n	8005d16 <xQueueGenericSend+0x72>
 8005d12:	2e02      	cmp	r6, #2
 8005d14:	d127      	bne.n	8005d66 <xQueueGenericSend+0xc2>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005d16:	4632      	mov	r2, r6
 8005d18:	4639      	mov	r1, r7
 8005d1a:	4620      	mov	r0, r4
 8005d1c:	f7ff fede 	bl	8005adc <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005d20:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8005d22:	b11b      	cbz	r3, 8005d2c <xQueueGenericSend+0x88>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005d24:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8005d28:	f000 fd42 	bl	80067b0 <xTaskRemoveFromEventList>
					else if( xYieldRequired != pdFALSE )
 8005d2c:	b148      	cbz	r0, 8005d42 <xQueueGenericSend+0x9e>
						queueYIELD_IF_USING_PREEMPTION();
 8005d2e:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8005d32:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005d36:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8005d3a:	f3bf 8f4f 	dsb	sy
 8005d3e:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8005d42:	f000 feaf 	bl	8006aa4 <vPortExitCritical>
				return pdPASS;
 8005d46:	2001      	movs	r0, #1
}
 8005d48:	b004      	add	sp, #16
 8005d4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005d4e:	9b01      	ldr	r3, [sp, #4]
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d0d6      	beq.n	8005d02 <xQueueGenericSend+0x5e>
 8005d54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d58:	f383 8811 	msr	BASEPRI, r3
 8005d5c:	f3bf 8f6f 	isb	sy
 8005d60:	f3bf 8f4f 	dsb	sy
 8005d64:	e7fe      	b.n	8005d64 <xQueueGenericSend+0xc0>
				if( xTicksToWait == ( TickType_t ) 0 )
 8005d66:	9b01      	ldr	r3, [sp, #4]
 8005d68:	b91b      	cbnz	r3, 8005d72 <xQueueGenericSend+0xce>
					taskEXIT_CRITICAL();
 8005d6a:	f000 fe9b 	bl	8006aa4 <vPortExitCritical>
					return errQUEUE_FULL;
 8005d6e:	2000      	movs	r0, #0
 8005d70:	e7ea      	b.n	8005d48 <xQueueGenericSend+0xa4>
				else if( xEntryTimeSet == pdFALSE )
 8005d72:	b915      	cbnz	r5, 8005d7a <xQueueGenericSend+0xd6>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005d74:	a802      	add	r0, sp, #8
 8005d76:	f000 fd5d 	bl	8006834 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8005d7a:	f000 fe93 	bl	8006aa4 <vPortExitCritical>
		vTaskSuspendAll();
 8005d7e:	f000 fb89 	bl	8006494 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005d82:	f000 fe6f 	bl	8006a64 <vPortEnterCritical>
 8005d86:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8005d8a:	2bff      	cmp	r3, #255	@ 0xff
 8005d8c:	bf08      	it	eq
 8005d8e:	f884 8044 	strbeq.w	r8, [r4, #68]	@ 0x44
 8005d92:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8005d96:	2bff      	cmp	r3, #255	@ 0xff
 8005d98:	bf08      	it	eq
 8005d9a:	f884 8045 	strbeq.w	r8, [r4, #69]	@ 0x45
 8005d9e:	f000 fe81 	bl	8006aa4 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005da2:	a901      	add	r1, sp, #4
 8005da4:	a802      	add	r0, sp, #8
 8005da6:	f000 fd51 	bl	800684c <xTaskCheckForTimeOut>
 8005daa:	bb38      	cbnz	r0, 8005dfc <xQueueGenericSend+0x158>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005dac:	f000 fe5a 	bl	8006a64 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005db0:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8005db2:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8005db4:	429a      	cmp	r2, r3
 8005db6:	d10e      	bne.n	8005dd6 <xQueueGenericSend+0x132>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8005db8:	f000 fe74 	bl	8006aa4 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005dbc:	9901      	ldr	r1, [sp, #4]
 8005dbe:	f104 0010 	add.w	r0, r4, #16
 8005dc2:	f000 fcdb 	bl	800677c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005dc6:	4620      	mov	r0, r4
 8005dc8:	f7ff fed1 	bl	8005b6e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005dcc:	f000 fc02 	bl	80065d4 <xTaskResumeAll>
 8005dd0:	b148      	cbz	r0, 8005de6 <xQueueGenericSend+0x142>
 8005dd2:	2501      	movs	r5, #1
 8005dd4:	e797      	b.n	8005d06 <xQueueGenericSend+0x62>
	taskEXIT_CRITICAL();
 8005dd6:	f000 fe65 	bl	8006aa4 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 8005dda:	4620      	mov	r0, r4
 8005ddc:	f7ff fec7 	bl	8005b6e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005de0:	f000 fbf8 	bl	80065d4 <xTaskResumeAll>
 8005de4:	e7f5      	b.n	8005dd2 <xQueueGenericSend+0x12e>
					portYIELD_WITHIN_API();
 8005de6:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8005dea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005dee:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8005df2:	f3bf 8f4f 	dsb	sy
 8005df6:	f3bf 8f6f 	isb	sy
 8005dfa:	e7ea      	b.n	8005dd2 <xQueueGenericSend+0x12e>
			prvUnlockQueue( pxQueue );
 8005dfc:	4620      	mov	r0, r4
 8005dfe:	f7ff feb6 	bl	8005b6e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005e02:	f000 fbe7 	bl	80065d4 <xTaskResumeAll>
			return errQUEUE_FULL;
 8005e06:	e7b2      	b.n	8005d6e <xQueueGenericSend+0xca>

08005e08 <xQueueGenericSendFromISR>:
{
 8005e08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005e0c:	4689      	mov	r9, r1
 8005e0e:	4617      	mov	r7, r2
 8005e10:	461e      	mov	r6, r3
	configASSERT( pxQueue );
 8005e12:	4604      	mov	r4, r0
 8005e14:	b940      	cbnz	r0, 8005e28 <xQueueGenericSendFromISR+0x20>
 8005e16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e1a:	f383 8811 	msr	BASEPRI, r3
 8005e1e:	f3bf 8f6f 	isb	sy
 8005e22:	f3bf 8f4f 	dsb	sy
 8005e26:	e7fe      	b.n	8005e26 <xQueueGenericSendFromISR+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005e28:	b951      	cbnz	r1, 8005e40 <xQueueGenericSendFromISR+0x38>
 8005e2a:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8005e2c:	b143      	cbz	r3, 8005e40 <xQueueGenericSendFromISR+0x38>
 8005e2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e32:	f383 8811 	msr	BASEPRI, r3
 8005e36:	f3bf 8f6f 	isb	sy
 8005e3a:	f3bf 8f4f 	dsb	sy
 8005e3e:	e7fe      	b.n	8005e3e <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005e40:	2e02      	cmp	r6, #2
 8005e42:	d10b      	bne.n	8005e5c <xQueueGenericSendFromISR+0x54>
 8005e44:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8005e46:	2b01      	cmp	r3, #1
 8005e48:	d008      	beq.n	8005e5c <xQueueGenericSendFromISR+0x54>
 8005e4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e4e:	f383 8811 	msr	BASEPRI, r3
 8005e52:	f3bf 8f6f 	isb	sy
 8005e56:	f3bf 8f4f 	dsb	sy
 8005e5a:	e7fe      	b.n	8005e5a <xQueueGenericSendFromISR+0x52>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005e5c:	f000 ff14 	bl	8006c88 <vPortValidateInterruptPriority>
	__asm volatile
 8005e60:	f3ef 8811 	mrs	r8, BASEPRI
 8005e64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e68:	f383 8811 	msr	BASEPRI, r3
 8005e6c:	f3bf 8f6f 	isb	sy
 8005e70:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005e74:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8005e76:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8005e78:	429a      	cmp	r2, r3
 8005e7a:	d301      	bcc.n	8005e80 <xQueueGenericSendFromISR+0x78>
 8005e7c:	2e02      	cmp	r6, #2
 8005e7e:	d11d      	bne.n	8005ebc <xQueueGenericSendFromISR+0xb4>
			const int8_t cTxLock = pxQueue->cTxLock;
 8005e80:	f894 5045 	ldrb.w	r5, [r4, #69]	@ 0x45
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005e84:	4632      	mov	r2, r6
			const int8_t cTxLock = pxQueue->cTxLock;
 8005e86:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005e88:	4649      	mov	r1, r9
 8005e8a:	4620      	mov	r0, r4
 8005e8c:	f7ff fe26 	bl	8005adc <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 8005e90:	1c6b      	adds	r3, r5, #1
 8005e92:	d10e      	bne.n	8005eb2 <xQueueGenericSendFromISR+0xaa>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005e94:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8005e96:	b13b      	cbz	r3, 8005ea8 <xQueueGenericSendFromISR+0xa0>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005e98:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8005e9c:	f000 fc88 	bl	80067b0 <xTaskRemoveFromEventList>
 8005ea0:	b110      	cbz	r0, 8005ea8 <xQueueGenericSendFromISR+0xa0>
							if( pxHigherPriorityTaskWoken != NULL )
 8005ea2:	b10f      	cbz	r7, 8005ea8 <xQueueGenericSendFromISR+0xa0>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005ea4:	2301      	movs	r3, #1
 8005ea6:	603b      	str	r3, [r7, #0]
			xReturn = pdPASS;
 8005ea8:	2001      	movs	r0, #1
	__asm volatile
 8005eaa:	f388 8811 	msr	BASEPRI, r8
}
 8005eae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005eb2:	3501      	adds	r5, #1
 8005eb4:	b26d      	sxtb	r5, r5
 8005eb6:	f884 5045 	strb.w	r5, [r4, #69]	@ 0x45
 8005eba:	e7f5      	b.n	8005ea8 <xQueueGenericSendFromISR+0xa0>
			xReturn = errQUEUE_FULL;
 8005ebc:	2000      	movs	r0, #0
 8005ebe:	e7f4      	b.n	8005eaa <xQueueGenericSendFromISR+0xa2>

08005ec0 <xQueueReceive>:
{
 8005ec0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8005ec4:	460e      	mov	r6, r1
 8005ec6:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 8005ec8:	4604      	mov	r4, r0
 8005eca:	b940      	cbnz	r0, 8005ede <xQueueReceive+0x1e>
	__asm volatile
 8005ecc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ed0:	f383 8811 	msr	BASEPRI, r3
 8005ed4:	f3bf 8f6f 	isb	sy
 8005ed8:	f3bf 8f4f 	dsb	sy
 8005edc:	e7fe      	b.n	8005edc <xQueueReceive+0x1c>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005ede:	b951      	cbnz	r1, 8005ef6 <xQueueReceive+0x36>
 8005ee0:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8005ee2:	b143      	cbz	r3, 8005ef6 <xQueueReceive+0x36>
 8005ee4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ee8:	f383 8811 	msr	BASEPRI, r3
 8005eec:	f3bf 8f6f 	isb	sy
 8005ef0:	f3bf 8f4f 	dsb	sy
 8005ef4:	e7fe      	b.n	8005ef4 <xQueueReceive+0x34>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005ef6:	f000 fceb 	bl	80068d0 <xTaskGetSchedulerState>
 8005efa:	4605      	mov	r5, r0
 8005efc:	b318      	cbz	r0, 8005f46 <xQueueReceive+0x86>
 8005efe:	2500      	movs	r5, #0
		prvLockQueue( pxQueue );
 8005f00:	f04f 0800 	mov.w	r8, #0
		taskENTER_CRITICAL();
 8005f04:	f000 fdae 	bl	8006a64 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005f08:	6ba7      	ldr	r7, [r4, #56]	@ 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005f0a:	b347      	cbz	r7, 8005f5e <xQueueReceive+0x9e>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005f0c:	4631      	mov	r1, r6
 8005f0e:	4620      	mov	r0, r4
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005f10:	3f01      	subs	r7, #1
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005f12:	f7ff fe16 	bl	8005b42 <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005f16:	63a7      	str	r7, [r4, #56]	@ 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005f18:	6923      	ldr	r3, [r4, #16]
 8005f1a:	b173      	cbz	r3, 8005f3a <xQueueReceive+0x7a>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005f1c:	f104 0010 	add.w	r0, r4, #16
 8005f20:	f000 fc46 	bl	80067b0 <xTaskRemoveFromEventList>
 8005f24:	b148      	cbz	r0, 8005f3a <xQueueReceive+0x7a>
						queueYIELD_IF_USING_PREEMPTION();
 8005f26:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8005f2a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005f2e:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8005f32:	f3bf 8f4f 	dsb	sy
 8005f36:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8005f3a:	f000 fdb3 	bl	8006aa4 <vPortExitCritical>
				return pdPASS;
 8005f3e:	2001      	movs	r0, #1
}
 8005f40:	b004      	add	sp, #16
 8005f42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005f46:	9b01      	ldr	r3, [sp, #4]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d0d9      	beq.n	8005f00 <xQueueReceive+0x40>
 8005f4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f50:	f383 8811 	msr	BASEPRI, r3
 8005f54:	f3bf 8f6f 	isb	sy
 8005f58:	f3bf 8f4f 	dsb	sy
 8005f5c:	e7fe      	b.n	8005f5c <xQueueReceive+0x9c>
				if( xTicksToWait == ( TickType_t ) 0 )
 8005f5e:	9b01      	ldr	r3, [sp, #4]
 8005f60:	b91b      	cbnz	r3, 8005f6a <xQueueReceive+0xaa>
					taskEXIT_CRITICAL();
 8005f62:	f000 fd9f 	bl	8006aa4 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8005f66:	2000      	movs	r0, #0
 8005f68:	e7ea      	b.n	8005f40 <xQueueReceive+0x80>
				else if( xEntryTimeSet == pdFALSE )
 8005f6a:	b915      	cbnz	r5, 8005f72 <xQueueReceive+0xb2>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005f6c:	a802      	add	r0, sp, #8
 8005f6e:	f000 fc61 	bl	8006834 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8005f72:	f000 fd97 	bl	8006aa4 <vPortExitCritical>
		vTaskSuspendAll();
 8005f76:	f000 fa8d 	bl	8006494 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005f7a:	f000 fd73 	bl	8006a64 <vPortEnterCritical>
 8005f7e:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8005f82:	2bff      	cmp	r3, #255	@ 0xff
 8005f84:	bf08      	it	eq
 8005f86:	f884 8044 	strbeq.w	r8, [r4, #68]	@ 0x44
 8005f8a:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8005f8e:	2bff      	cmp	r3, #255	@ 0xff
 8005f90:	bf08      	it	eq
 8005f92:	f884 8045 	strbeq.w	r8, [r4, #69]	@ 0x45
 8005f96:	f000 fd85 	bl	8006aa4 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005f9a:	a901      	add	r1, sp, #4
 8005f9c:	a802      	add	r0, sp, #8
 8005f9e:	f000 fc55 	bl	800684c <xTaskCheckForTimeOut>
 8005fa2:	bb00      	cbnz	r0, 8005fe6 <xQueueReceive+0x126>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005fa4:	4620      	mov	r0, r4
 8005fa6:	f7ff fd8e 	bl	8005ac6 <prvIsQueueEmpty>
 8005faa:	b1b0      	cbz	r0, 8005fda <xQueueReceive+0x11a>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005fac:	9901      	ldr	r1, [sp, #4]
 8005fae:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8005fb2:	f000 fbe3 	bl	800677c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005fb6:	4620      	mov	r0, r4
 8005fb8:	f7ff fdd9 	bl	8005b6e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005fbc:	f000 fb0a 	bl	80065d4 <xTaskResumeAll>
 8005fc0:	b948      	cbnz	r0, 8005fd6 <xQueueReceive+0x116>
					portYIELD_WITHIN_API();
 8005fc2:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8005fc6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005fca:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8005fce:	f3bf 8f4f 	dsb	sy
 8005fd2:	f3bf 8f6f 	isb	sy
 8005fd6:	2501      	movs	r5, #1
 8005fd8:	e794      	b.n	8005f04 <xQueueReceive+0x44>
				prvUnlockQueue( pxQueue );
 8005fda:	4620      	mov	r0, r4
 8005fdc:	f7ff fdc7 	bl	8005b6e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005fe0:	f000 faf8 	bl	80065d4 <xTaskResumeAll>
 8005fe4:	e7f7      	b.n	8005fd6 <xQueueReceive+0x116>
			prvUnlockQueue( pxQueue );
 8005fe6:	4620      	mov	r0, r4
 8005fe8:	f7ff fdc1 	bl	8005b6e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005fec:	f000 faf2 	bl	80065d4 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005ff0:	4620      	mov	r0, r4
 8005ff2:	f7ff fd68 	bl	8005ac6 <prvIsQueueEmpty>
 8005ff6:	2800      	cmp	r0, #0
 8005ff8:	d0ed      	beq.n	8005fd6 <xQueueReceive+0x116>
 8005ffa:	e7b4      	b.n	8005f66 <xQueueReceive+0xa6>

08005ffc <xQueueReceiveFromISR>:
{
 8005ffc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006000:	4689      	mov	r9, r1
 8006002:	4690      	mov	r8, r2
	configASSERT( pxQueue );
 8006004:	4604      	mov	r4, r0
 8006006:	b940      	cbnz	r0, 800601a <xQueueReceiveFromISR+0x1e>
 8006008:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800600c:	f383 8811 	msr	BASEPRI, r3
 8006010:	f3bf 8f6f 	isb	sy
 8006014:	f3bf 8f4f 	dsb	sy
 8006018:	e7fe      	b.n	8006018 <xQueueReceiveFromISR+0x1c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800601a:	b951      	cbnz	r1, 8006032 <xQueueReceiveFromISR+0x36>
 800601c:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800601e:	b143      	cbz	r3, 8006032 <xQueueReceiveFromISR+0x36>
 8006020:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006024:	f383 8811 	msr	BASEPRI, r3
 8006028:	f3bf 8f6f 	isb	sy
 800602c:	f3bf 8f4f 	dsb	sy
 8006030:	e7fe      	b.n	8006030 <xQueueReceiveFromISR+0x34>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006032:	f000 fe29 	bl	8006c88 <vPortValidateInterruptPriority>
	__asm volatile
 8006036:	f3ef 8711 	mrs	r7, BASEPRI
 800603a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800603e:	f383 8811 	msr	BASEPRI, r3
 8006042:	f3bf 8f6f 	isb	sy
 8006046:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800604a:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800604c:	b30d      	cbz	r5, 8006092 <xQueueReceiveFromISR+0x96>
			const int8_t cRxLock = pxQueue->cRxLock;
 800604e:	f894 6044 	ldrb.w	r6, [r4, #68]	@ 0x44
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006052:	4649      	mov	r1, r9
			const int8_t cRxLock = pxQueue->cRxLock;
 8006054:	b276      	sxtb	r6, r6
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006056:	4620      	mov	r0, r4
 8006058:	f7ff fd73 	bl	8005b42 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800605c:	3d01      	subs	r5, #1
			if( cRxLock == queueUNLOCKED )
 800605e:	1c73      	adds	r3, r6, #1
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006060:	63a5      	str	r5, [r4, #56]	@ 0x38
			if( cRxLock == queueUNLOCKED )
 8006062:	d111      	bne.n	8006088 <xQueueReceiveFromISR+0x8c>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006064:	6923      	ldr	r3, [r4, #16]
 8006066:	b153      	cbz	r3, 800607e <xQueueReceiveFromISR+0x82>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006068:	f104 0010 	add.w	r0, r4, #16
 800606c:	f000 fba0 	bl	80067b0 <xTaskRemoveFromEventList>
 8006070:	b128      	cbz	r0, 800607e <xQueueReceiveFromISR+0x82>
						if( pxHigherPriorityTaskWoken != NULL )
 8006072:	f1b8 0f00 	cmp.w	r8, #0
 8006076:	d002      	beq.n	800607e <xQueueReceiveFromISR+0x82>
							*pxHigherPriorityTaskWoken = pdTRUE;
 8006078:	2301      	movs	r3, #1
 800607a:	f8c8 3000 	str.w	r3, [r8]
			xReturn = pdPASS;
 800607e:	2001      	movs	r0, #1
	__asm volatile
 8006080:	f387 8811 	msr	BASEPRI, r7
}
 8006084:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8006088:	3601      	adds	r6, #1
 800608a:	b276      	sxtb	r6, r6
 800608c:	f884 6044 	strb.w	r6, [r4, #68]	@ 0x44
 8006090:	e7f5      	b.n	800607e <xQueueReceiveFromISR+0x82>
			xReturn = pdFAIL;
 8006092:	4628      	mov	r0, r5
 8006094:	e7f4      	b.n	8006080 <xQueueReceiveFromISR+0x84>
	...

08006098 <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006098:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800609c:	4604      	mov	r4, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800609e:	f000 fce1 	bl	8006a64 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80060a2:	4b2f      	ldr	r3, [pc, #188]	@ (8006160 <prvAddNewTaskToReadyList+0xc8>)
		if( pxCurrentTCB == NULL )
 80060a4:	4e2f      	ldr	r6, [pc, #188]	@ (8006164 <prvAddNewTaskToReadyList+0xcc>)
		uxCurrentNumberOfTasks++;
 80060a6:	681a      	ldr	r2, [r3, #0]
 80060a8:	4f2f      	ldr	r7, [pc, #188]	@ (8006168 <prvAddNewTaskToReadyList+0xd0>)
 80060aa:	3201      	adds	r2, #1
 80060ac:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 80060ae:	6835      	ldr	r5, [r6, #0]
 80060b0:	2d00      	cmp	r5, #0
 80060b2:	d14a      	bne.n	800614a <prvAddNewTaskToReadyList+0xb2>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80060b4:	6034      	str	r4, [r6, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	2b01      	cmp	r3, #1
 80060ba:	d11f      	bne.n	80060fc <prvAddNewTaskToReadyList+0x64>
 80060bc:	46b8      	mov	r8, r7
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80060be:	4640      	mov	r0, r8
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80060c0:	3501      	adds	r5, #1
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80060c2:	f7ff fcc0 	bl	8005a46 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80060c6:	2d07      	cmp	r5, #7
 80060c8:	f108 0814 	add.w	r8, r8, #20
 80060cc:	d1f7      	bne.n	80060be <prvAddNewTaskToReadyList+0x26>
	}

	vListInitialise( &xDelayedTaskList1 );
 80060ce:	f8df 80c0 	ldr.w	r8, [pc, #192]	@ 8006190 <prvAddNewTaskToReadyList+0xf8>
	vListInitialise( &xDelayedTaskList2 );
 80060d2:	4d26      	ldr	r5, [pc, #152]	@ (800616c <prvAddNewTaskToReadyList+0xd4>)
	vListInitialise( &xDelayedTaskList1 );
 80060d4:	4640      	mov	r0, r8
 80060d6:	f7ff fcb6 	bl	8005a46 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80060da:	4628      	mov	r0, r5
 80060dc:	f7ff fcb3 	bl	8005a46 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80060e0:	4823      	ldr	r0, [pc, #140]	@ (8006170 <prvAddNewTaskToReadyList+0xd8>)
 80060e2:	f7ff fcb0 	bl	8005a46 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80060e6:	4823      	ldr	r0, [pc, #140]	@ (8006174 <prvAddNewTaskToReadyList+0xdc>)
 80060e8:	f7ff fcad 	bl	8005a46 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80060ec:	4822      	ldr	r0, [pc, #136]	@ (8006178 <prvAddNewTaskToReadyList+0xe0>)
 80060ee:	f7ff fcaa 	bl	8005a46 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80060f2:	4b22      	ldr	r3, [pc, #136]	@ (800617c <prvAddNewTaskToReadyList+0xe4>)
 80060f4:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80060f8:	4b21      	ldr	r3, [pc, #132]	@ (8006180 <prvAddNewTaskToReadyList+0xe8>)
 80060fa:	601d      	str	r5, [r3, #0]
		uxTaskNumber++;
 80060fc:	4a21      	ldr	r2, [pc, #132]	@ (8006184 <prvAddNewTaskToReadyList+0xec>)
		prvAddTaskToReadyList( pxNewTCB );
 80060fe:	4922      	ldr	r1, [pc, #136]	@ (8006188 <prvAddNewTaskToReadyList+0xf0>)
		uxTaskNumber++;
 8006100:	6813      	ldr	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8006102:	6808      	ldr	r0, [r1, #0]
		uxTaskNumber++;
 8006104:	3301      	adds	r3, #1
 8006106:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8006108:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800610a:	2301      	movs	r3, #1
 800610c:	4093      	lsls	r3, r2
 800610e:	4303      	orrs	r3, r0
 8006110:	2014      	movs	r0, #20
 8006112:	600b      	str	r3, [r1, #0]
 8006114:	fb00 7002 	mla	r0, r0, r2, r7
 8006118:	1d21      	adds	r1, r4, #4
 800611a:	f7ff fca2 	bl	8005a62 <vListInsertEnd>
	taskEXIT_CRITICAL();
 800611e:	f000 fcc1 	bl	8006aa4 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8006122:	4b1a      	ldr	r3, [pc, #104]	@ (800618c <prvAddNewTaskToReadyList+0xf4>)
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	b173      	cbz	r3, 8006146 <prvAddNewTaskToReadyList+0xae>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006128:	6833      	ldr	r3, [r6, #0]
 800612a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800612c:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800612e:	429a      	cmp	r2, r3
 8006130:	d209      	bcs.n	8006146 <prvAddNewTaskToReadyList+0xae>
			taskYIELD_IF_USING_PREEMPTION();
 8006132:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8006136:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800613a:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800613e:	f3bf 8f4f 	dsb	sy
 8006142:	f3bf 8f6f 	isb	sy
}
 8006146:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( xSchedulerRunning == pdFALSE )
 800614a:	4b10      	ldr	r3, [pc, #64]	@ (800618c <prvAddNewTaskToReadyList+0xf4>)
 800614c:	681a      	ldr	r2, [r3, #0]
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800614e:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
			if( xSchedulerRunning == pdFALSE )
 8006150:	2a00      	cmp	r2, #0
 8006152:	d1d3      	bne.n	80060fc <prvAddNewTaskToReadyList+0x64>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006154:	6832      	ldr	r2, [r6, #0]
 8006156:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8006158:	429a      	cmp	r2, r3
					pxCurrentTCB = pxNewTCB;
 800615a:	bf98      	it	ls
 800615c:	6034      	strls	r4, [r6, #0]
 800615e:	e7cd      	b.n	80060fc <prvAddNewTaskToReadyList+0x64>
 8006160:	20001478 	.word	0x20001478
 8006164:	20001578 	.word	0x20001578
 8006168:	200014ec 	.word	0x200014ec
 800616c:	200014c4 	.word	0x200014c4
 8006170:	200014a8 	.word	0x200014a8
 8006174:	20001494 	.word	0x20001494
 8006178:	2000147c 	.word	0x2000147c
 800617c:	200014c0 	.word	0x200014c0
 8006180:	200014bc 	.word	0x200014bc
 8006184:	2000145c 	.word	0x2000145c
 8006188:	20001470 	.word	0x20001470
 800618c:	2000146c 	.word	0x2000146c
 8006190:	200014d8 	.word	0x200014d8

08006194 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006196:	4b1a      	ldr	r3, [pc, #104]	@ (8006200 <prvAddCurrentTaskToDelayedList+0x6c>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006198:	4d1a      	ldr	r5, [pc, #104]	@ (8006204 <prvAddCurrentTaskToDelayedList+0x70>)
const TickType_t xConstTickCount = xTickCount;
 800619a:	681c      	ldr	r4, [r3, #0]
{
 800619c:	4606      	mov	r6, r0
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800619e:	6828      	ldr	r0, [r5, #0]
 80061a0:	3004      	adds	r0, #4
{
 80061a2:	460f      	mov	r7, r1
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80061a4:	f7ff fc7f 	bl	8005aa6 <uxListRemove>
 80061a8:	b940      	cbnz	r0, 80061bc <prvAddCurrentTaskToDelayedList+0x28>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80061aa:	682a      	ldr	r2, [r5, #0]
 80061ac:	4916      	ldr	r1, [pc, #88]	@ (8006208 <prvAddCurrentTaskToDelayedList+0x74>)
 80061ae:	6ad0      	ldr	r0, [r2, #44]	@ 0x2c
 80061b0:	680b      	ldr	r3, [r1, #0]
 80061b2:	2201      	movs	r2, #1
 80061b4:	4082      	lsls	r2, r0
 80061b6:	ea23 0302 	bic.w	r3, r3, r2
 80061ba:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80061bc:	1c73      	adds	r3, r6, #1
 80061be:	d107      	bne.n	80061d0 <prvAddCurrentTaskToDelayedList+0x3c>
 80061c0:	b137      	cbz	r7, 80061d0 <prvAddCurrentTaskToDelayedList+0x3c>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80061c2:	6829      	ldr	r1, [r5, #0]
 80061c4:	4811      	ldr	r0, [pc, #68]	@ (800620c <prvAddCurrentTaskToDelayedList+0x78>)

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80061c6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80061ca:	3104      	adds	r1, #4
 80061cc:	f7ff bc49 	b.w	8005a62 <vListInsertEnd>
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80061d0:	682b      	ldr	r3, [r5, #0]
 80061d2:	19a4      	adds	r4, r4, r6
 80061d4:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80061d6:	d307      	bcc.n	80061e8 <prvAddCurrentTaskToDelayedList+0x54>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80061d8:	4b0d      	ldr	r3, [pc, #52]	@ (8006210 <prvAddCurrentTaskToDelayedList+0x7c>)
 80061da:	6818      	ldr	r0, [r3, #0]
 80061dc:	6829      	ldr	r1, [r5, #0]
}
 80061de:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80061e2:	3104      	adds	r1, #4
 80061e4:	f7ff bc48 	b.w	8005a78 <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80061e8:	4b0a      	ldr	r3, [pc, #40]	@ (8006214 <prvAddCurrentTaskToDelayedList+0x80>)
 80061ea:	6818      	ldr	r0, [r3, #0]
 80061ec:	6829      	ldr	r1, [r5, #0]
 80061ee:	3104      	adds	r1, #4
 80061f0:	f7ff fc42 	bl	8005a78 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80061f4:	4b08      	ldr	r3, [pc, #32]	@ (8006218 <prvAddCurrentTaskToDelayedList+0x84>)
 80061f6:	681a      	ldr	r2, [r3, #0]
 80061f8:	42a2      	cmp	r2, r4
					xNextTaskUnblockTime = xTimeToWake;
 80061fa:	bf88      	it	hi
 80061fc:	601c      	strhi	r4, [r3, #0]
}
 80061fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006200:	20001474 	.word	0x20001474
 8006204:	20001578 	.word	0x20001578
 8006208:	20001470 	.word	0x20001470
 800620c:	2000147c 	.word	0x2000147c
 8006210:	200014bc 	.word	0x200014bc
 8006214:	200014c0 	.word	0x200014c0
 8006218:	20001458 	.word	0x20001458

0800621c <prvResetNextTaskUnblockTime>:
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800621c:	4a06      	ldr	r2, [pc, #24]	@ (8006238 <prvResetNextTaskUnblockTime+0x1c>)
 800621e:	6813      	ldr	r3, [r2, #0]
 8006220:	6819      	ldr	r1, [r3, #0]
 8006222:	4b06      	ldr	r3, [pc, #24]	@ (800623c <prvResetNextTaskUnblockTime+0x20>)
 8006224:	b919      	cbnz	r1, 800622e <prvResetNextTaskUnblockTime+0x12>
		xNextTaskUnblockTime = portMAX_DELAY;
 8006226:	f04f 32ff 	mov.w	r2, #4294967295
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800622a:	601a      	str	r2, [r3, #0]
}
 800622c:	4770      	bx	lr
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800622e:	6812      	ldr	r2, [r2, #0]
 8006230:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006232:	68d2      	ldr	r2, [r2, #12]
 8006234:	6852      	ldr	r2, [r2, #4]
 8006236:	e7f8      	b.n	800622a <prvResetNextTaskUnblockTime+0xe>
 8006238:	200014c0 	.word	0x200014c0
 800623c:	20001458 	.word	0x20001458

08006240 <prvDeleteTCB>:
	{
 8006240:	b510      	push	{r4, lr}
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006242:	f890 3051 	ldrb.w	r3, [r0, #81]	@ 0x51
	{
 8006246:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006248:	b93b      	cbnz	r3, 800625a <prvDeleteTCB+0x1a>
				vPortFree( pxTCB->pxStack );
 800624a:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 800624c:	f000 fe02 	bl	8006e54 <vPortFree>
				vPortFree( pxTCB );
 8006250:	4620      	mov	r0, r4
	}
 8006252:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				vPortFree( pxTCB );
 8006256:	f000 bdfd 	b.w	8006e54 <vPortFree>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800625a:	2b01      	cmp	r3, #1
 800625c:	d0f9      	beq.n	8006252 <prvDeleteTCB+0x12>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800625e:	2b02      	cmp	r3, #2
 8006260:	d008      	beq.n	8006274 <prvDeleteTCB+0x34>
	__asm volatile
 8006262:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006266:	f383 8811 	msr	BASEPRI, r3
 800626a:	f3bf 8f6f 	isb	sy
 800626e:	f3bf 8f4f 	dsb	sy
 8006272:	e7fe      	b.n	8006272 <prvDeleteTCB+0x32>
	}
 8006274:	bd10      	pop	{r4, pc}
	...

08006278 <prvIdleTask>:
{
 8006278:	b580      	push	{r7, lr}
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800627a:	4c13      	ldr	r4, [pc, #76]	@ (80062c8 <prvIdleTask+0x50>)
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800627c:	4f13      	ldr	r7, [pc, #76]	@ (80062cc <prvIdleTask+0x54>)
				--uxCurrentNumberOfTasks;
 800627e:	4d14      	ldr	r5, [pc, #80]	@ (80062d0 <prvIdleTask+0x58>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006280:	6823      	ldr	r3, [r4, #0]
 8006282:	b973      	cbnz	r3, 80062a2 <prvIdleTask+0x2a>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006284:	4b13      	ldr	r3, [pc, #76]	@ (80062d4 <prvIdleTask+0x5c>)
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	2b01      	cmp	r3, #1
 800628a:	d9f8      	bls.n	800627e <prvIdleTask+0x6>
				taskYIELD();
 800628c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8006290:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006294:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8006298:	f3bf 8f4f 	dsb	sy
 800629c:	f3bf 8f6f 	isb	sy
 80062a0:	e7ed      	b.n	800627e <prvIdleTask+0x6>
			taskENTER_CRITICAL();
 80062a2:	f000 fbdf 	bl	8006a64 <vPortEnterCritical>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	68de      	ldr	r6, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80062aa:	1d30      	adds	r0, r6, #4
 80062ac:	f7ff fbfb 	bl	8005aa6 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80062b0:	682b      	ldr	r3, [r5, #0]
 80062b2:	3b01      	subs	r3, #1
 80062b4:	602b      	str	r3, [r5, #0]
				--uxDeletedTasksWaitingCleanUp;
 80062b6:	6823      	ldr	r3, [r4, #0]
 80062b8:	3b01      	subs	r3, #1
 80062ba:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 80062bc:	f000 fbf2 	bl	8006aa4 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 80062c0:	4630      	mov	r0, r6
 80062c2:	f7ff ffbd 	bl	8006240 <prvDeleteTCB>
 80062c6:	e7db      	b.n	8006280 <prvIdleTask+0x8>
 80062c8:	20001490 	.word	0x20001490
 80062cc:	20001494 	.word	0x20001494
 80062d0:	20001478 	.word	0x20001478
 80062d4:	200014ec 	.word	0x200014ec

080062d8 <prvInitialiseNewTask.constprop.0>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 80062d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80062dc:	e9dd 8409 	ldrd	r8, r4, [sp, #36]	@ 0x24
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80062e0:	f102 4280 	add.w	r2, r2, #1073741824	@ 0x40000000
 80062e4:	6b26      	ldr	r6, [r4, #48]	@ 0x30
 80062e6:	3a01      	subs	r2, #1
 80062e8:	eb06 0682 	add.w	r6, r6, r2, lsl #2
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 80062ec:	4699      	mov	r9, r3
 80062ee:	4607      	mov	r7, r0
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80062f0:	1e4b      	subs	r3, r1, #1
 80062f2:	f026 0607 	bic.w	r6, r6, #7
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80062f6:	f104 0233 	add.w	r2, r4, #51	@ 0x33
 80062fa:	310f      	adds	r1, #15
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80062fc:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 8006300:	f802 0f01 	strb.w	r0, [r2, #1]!
		if( pcName[ x ] == 0x00 )
 8006304:	b108      	cbz	r0, 800630a <prvInitialiseNewTask.constprop.0+0x32>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006306:	428b      	cmp	r3, r1
 8006308:	d1f8      	bne.n	80062fc <prvInitialiseNewTask.constprop.0+0x24>
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800630a:	9d08      	ldr	r5, [sp, #32]
 800630c:	2d06      	cmp	r5, #6
 800630e:	bf28      	it	cs
 8006310:	2506      	movcs	r5, #6
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006312:	f04f 0a00 	mov.w	sl, #0
		pxNewTCB->uxMutexesHeld = 0;
 8006316:	e9c4 5a11 	strd	r5, sl, [r4, #68]	@ 0x44
	pxNewTCB->uxPriority = uxPriority;
 800631a:	62e5      	str	r5, [r4, #44]	@ 0x2c
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800631c:	1d20      	adds	r0, r4, #4
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800631e:	f884 a043 	strb.w	sl, [r4, #67]	@ 0x43
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006322:	f7ff fb9b 	bl	8005a5c <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006326:	f1c5 0507 	rsb	r5, r5, #7
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800632a:	f104 0018 	add.w	r0, r4, #24
 800632e:	f7ff fb95 	bl	8005a5c <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 8006332:	f8c4 a04c 	str.w	sl, [r4, #76]	@ 0x4c
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006336:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006338:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800633a:	6264      	str	r4, [r4, #36]	@ 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800633c:	f884 a050 	strb.w	sl, [r4, #80]	@ 0x50
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006340:	464a      	mov	r2, r9
 8006342:	4639      	mov	r1, r7
 8006344:	4630      	mov	r0, r6
 8006346:	f000 fb61 	bl	8006a0c <pxPortInitialiseStack>
 800634a:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 800634c:	f1b8 0f00 	cmp.w	r8, #0
 8006350:	d001      	beq.n	8006356 <prvInitialiseNewTask.constprop.0+0x7e>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006352:	f8c8 4000 	str.w	r4, [r8]
}
 8006356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800635a <xTaskCreateStatic>:
	{
 800635a:	b570      	push	{r4, r5, r6, lr}
 800635c:	b086      	sub	sp, #24
 800635e:	e9dd 540b 	ldrd	r5, r4, [sp, #44]	@ 0x2c
		configASSERT( puxStackBuffer != NULL );
 8006362:	b945      	cbnz	r5, 8006376 <xTaskCreateStatic+0x1c>
 8006364:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006368:	f383 8811 	msr	BASEPRI, r3
 800636c:	f3bf 8f6f 	isb	sy
 8006370:	f3bf 8f4f 	dsb	sy
 8006374:	e7fe      	b.n	8006374 <xTaskCreateStatic+0x1a>
		configASSERT( pxTaskBuffer != NULL );
 8006376:	b944      	cbnz	r4, 800638a <xTaskCreateStatic+0x30>
 8006378:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800637c:	f383 8811 	msr	BASEPRI, r3
 8006380:	f3bf 8f6f 	isb	sy
 8006384:	f3bf 8f4f 	dsb	sy
 8006388:	e7fe      	b.n	8006388 <xTaskCreateStatic+0x2e>
			volatile size_t xSize = sizeof( StaticTask_t );
 800638a:	2654      	movs	r6, #84	@ 0x54
 800638c:	9605      	str	r6, [sp, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 800638e:	9e05      	ldr	r6, [sp, #20]
 8006390:	2e54      	cmp	r6, #84	@ 0x54
 8006392:	d008      	beq.n	80063a6 <xTaskCreateStatic+0x4c>
 8006394:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006398:	f383 8811 	msr	BASEPRI, r3
 800639c:	f3bf 8f6f 	isb	sy
 80063a0:	f3bf 8f4f 	dsb	sy
 80063a4:	e7fe      	b.n	80063a4 <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80063a6:	6325      	str	r5, [r4, #48]	@ 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80063a8:	2502      	movs	r5, #2
 80063aa:	f884 5051 	strb.w	r5, [r4, #81]	@ 0x51
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80063ae:	ad04      	add	r5, sp, #16
 80063b0:	9501      	str	r5, [sp, #4]
 80063b2:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 80063b4:	9402      	str	r4, [sp, #8]
 80063b6:	9500      	str	r5, [sp, #0]
 80063b8:	f7ff ff8e 	bl	80062d8 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 80063bc:	4620      	mov	r0, r4
 80063be:	f7ff fe6b 	bl	8006098 <prvAddNewTaskToReadyList>
	}
 80063c2:	9804      	ldr	r0, [sp, #16]
 80063c4:	b006      	add	sp, #24
 80063c6:	bd70      	pop	{r4, r5, r6, pc}

080063c8 <xTaskCreate>:
	{
 80063c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80063cc:	4607      	mov	r7, r0
 80063ce:	b085      	sub	sp, #20
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80063d0:	0090      	lsls	r0, r2, #2
	{
 80063d2:	4688      	mov	r8, r1
 80063d4:	4616      	mov	r6, r2
 80063d6:	4699      	mov	r9, r3
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80063d8:	f000 fcaa 	bl	8006d30 <pvPortMalloc>
			if( pxStack != NULL )
 80063dc:	4605      	mov	r5, r0
 80063de:	b920      	cbnz	r0, 80063ea <xTaskCreate+0x22>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80063e0:	f04f 30ff 	mov.w	r0, #4294967295
	}
 80063e4:	b005      	add	sp, #20
 80063e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80063ea:	2054      	movs	r0, #84	@ 0x54
 80063ec:	f000 fca0 	bl	8006d30 <pvPortMalloc>
				if( pxNewTCB != NULL )
 80063f0:	4604      	mov	r4, r0
 80063f2:	b198      	cbz	r0, 800641c <xTaskCreate+0x54>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80063f4:	2300      	movs	r3, #0
 80063f6:	f880 3051 	strb.w	r3, [r0, #81]	@ 0x51
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80063fa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
					pxNewTCB->pxStack = pxStack;
 80063fc:	6305      	str	r5, [r0, #48]	@ 0x30
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80063fe:	9301      	str	r3, [sp, #4]
 8006400:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006402:	9002      	str	r0, [sp, #8]
 8006404:	9300      	str	r3, [sp, #0]
 8006406:	4632      	mov	r2, r6
 8006408:	464b      	mov	r3, r9
 800640a:	4641      	mov	r1, r8
 800640c:	4638      	mov	r0, r7
 800640e:	f7ff ff63 	bl	80062d8 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006412:	4620      	mov	r0, r4
 8006414:	f7ff fe40 	bl	8006098 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006418:	2001      	movs	r0, #1
 800641a:	e7e3      	b.n	80063e4 <xTaskCreate+0x1c>
					vPortFree( pxStack );
 800641c:	4628      	mov	r0, r5
 800641e:	f000 fd19 	bl	8006e54 <vPortFree>
		if( pxNewTCB != NULL )
 8006422:	e7dd      	b.n	80063e0 <xTaskCreate+0x18>

08006424 <vTaskStartScheduler>:
{
 8006424:	b510      	push	{r4, lr}
 8006426:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006428:	2400      	movs	r4, #0
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800642a:	aa07      	add	r2, sp, #28
 800642c:	a906      	add	r1, sp, #24
 800642e:	a805      	add	r0, sp, #20
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006430:	e9cd 4405 	strd	r4, r4, [sp, #20]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006434:	f7fc f82c 	bl	8002490 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006438:	9b05      	ldr	r3, [sp, #20]
 800643a:	9302      	str	r3, [sp, #8]
 800643c:	9b06      	ldr	r3, [sp, #24]
 800643e:	9a07      	ldr	r2, [sp, #28]
 8006440:	490f      	ldr	r1, [pc, #60]	@ (8006480 <vTaskStartScheduler+0x5c>)
 8006442:	4810      	ldr	r0, [pc, #64]	@ (8006484 <vTaskStartScheduler+0x60>)
 8006444:	e9cd 4300 	strd	r4, r3, [sp]
 8006448:	4623      	mov	r3, r4
 800644a:	f7ff ff86 	bl	800635a <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 800644e:	b1a8      	cbz	r0, 800647c <vTaskStartScheduler+0x58>
 8006450:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006454:	f383 8811 	msr	BASEPRI, r3
 8006458:	f3bf 8f6f 	isb	sy
 800645c:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 8006460:	4b09      	ldr	r3, [pc, #36]	@ (8006488 <vTaskStartScheduler+0x64>)
 8006462:	f04f 32ff 	mov.w	r2, #4294967295
 8006466:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006468:	4b08      	ldr	r3, [pc, #32]	@ (800648c <vTaskStartScheduler+0x68>)
 800646a:	2201      	movs	r2, #1
 800646c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800646e:	4b08      	ldr	r3, [pc, #32]	@ (8006490 <vTaskStartScheduler+0x6c>)
 8006470:	601c      	str	r4, [r3, #0]
}
 8006472:	b008      	add	sp, #32
 8006474:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if( xPortStartScheduler() != pdFALSE )
 8006478:	f000 bb84 	b.w	8006b84 <xPortStartScheduler>
}
 800647c:	b008      	add	sp, #32
 800647e:	bd10      	pop	{r4, pc}
 8006480:	0800d3fd 	.word	0x0800d3fd
 8006484:	08006279 	.word	0x08006279
 8006488:	20001458 	.word	0x20001458
 800648c:	2000146c 	.word	0x2000146c
 8006490:	20001474 	.word	0x20001474

08006494 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8006494:	4a02      	ldr	r2, [pc, #8]	@ (80064a0 <vTaskSuspendAll+0xc>)
 8006496:	6813      	ldr	r3, [r2, #0]
 8006498:	3301      	adds	r3, #1
 800649a:	6013      	str	r3, [r2, #0]
}
 800649c:	4770      	bx	lr
 800649e:	bf00      	nop
 80064a0:	20001454 	.word	0x20001454

080064a4 <xTaskIncrementTick>:
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80064a4:	4b40      	ldr	r3, [pc, #256]	@ (80065a8 <xTaskIncrementTick+0x104>)
 80064a6:	681b      	ldr	r3, [r3, #0]
{
 80064a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d174      	bne.n	800659a <xTaskIncrementTick+0xf6>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80064b0:	4b3e      	ldr	r3, [pc, #248]	@ (80065ac <xTaskIncrementTick+0x108>)
 80064b2:	681c      	ldr	r4, [r3, #0]
 80064b4:	3401      	adds	r4, #1
		xTickCount = xConstTickCount;
 80064b6:	601c      	str	r4, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80064b8:	b9bc      	cbnz	r4, 80064ea <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 80064ba:	4b3d      	ldr	r3, [pc, #244]	@ (80065b0 <xTaskIncrementTick+0x10c>)
 80064bc:	681a      	ldr	r2, [r3, #0]
 80064be:	6812      	ldr	r2, [r2, #0]
 80064c0:	b142      	cbz	r2, 80064d4 <xTaskIncrementTick+0x30>
 80064c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064c6:	f383 8811 	msr	BASEPRI, r3
 80064ca:	f3bf 8f6f 	isb	sy
 80064ce:	f3bf 8f4f 	dsb	sy
 80064d2:	e7fe      	b.n	80064d2 <xTaskIncrementTick+0x2e>
 80064d4:	4a37      	ldr	r2, [pc, #220]	@ (80065b4 <xTaskIncrementTick+0x110>)
 80064d6:	6819      	ldr	r1, [r3, #0]
 80064d8:	6810      	ldr	r0, [r2, #0]
 80064da:	6018      	str	r0, [r3, #0]
 80064dc:	6011      	str	r1, [r2, #0]
 80064de:	4a36      	ldr	r2, [pc, #216]	@ (80065b8 <xTaskIncrementTick+0x114>)
 80064e0:	6813      	ldr	r3, [r2, #0]
 80064e2:	3301      	adds	r3, #1
 80064e4:	6013      	str	r3, [r2, #0]
 80064e6:	f7ff fe99 	bl	800621c <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 80064ea:	4d34      	ldr	r5, [pc, #208]	@ (80065bc <xTaskIncrementTick+0x118>)
 80064ec:	4e34      	ldr	r6, [pc, #208]	@ (80065c0 <xTaskIncrementTick+0x11c>)
 80064ee:	682b      	ldr	r3, [r5, #0]
 80064f0:	4f34      	ldr	r7, [pc, #208]	@ (80065c4 <xTaskIncrementTick+0x120>)
 80064f2:	42a3      	cmp	r3, r4
BaseType_t xSwitchRequired = pdFALSE;
 80064f4:	f04f 0b00 	mov.w	fp, #0
		if( xConstTickCount >= xNextTaskUnblockTime )
 80064f8:	d911      	bls.n	800651e <xTaskIncrementTick+0x7a>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80064fa:	683a      	ldr	r2, [r7, #0]
 80064fc:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80064fe:	2114      	movs	r1, #20
 8006500:	434a      	muls	r2, r1
 8006502:	58b2      	ldr	r2, [r6, r2]
				xSwitchRequired = pdTRUE;
 8006504:	2a02      	cmp	r2, #2
 8006506:	bf28      	it	cs
 8006508:	f04f 0b01 	movcs.w	fp, #1
		if( xYieldPending != pdFALSE )
 800650c:	4a2e      	ldr	r2, [pc, #184]	@ (80065c8 <xTaskIncrementTick+0x124>)
 800650e:	6812      	ldr	r2, [r2, #0]
			xSwitchRequired = pdTRUE;
 8006510:	2a00      	cmp	r2, #0
}
 8006512:	bf0c      	ite	eq
 8006514:	4658      	moveq	r0, fp
 8006516:	2001      	movne	r0, #1
 8006518:	b003      	add	sp, #12
 800651a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800651e:	f8df a090 	ldr.w	sl, [pc, #144]	@ 80065b0 <xTaskIncrementTick+0x10c>
					prvAddTaskToReadyList( pxTCB );
 8006522:	f8df 90ac 	ldr.w	r9, [pc, #172]	@ 80065d0 <xTaskIncrementTick+0x12c>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006526:	f8da 2000 	ldr.w	r2, [sl]
 800652a:	6812      	ldr	r2, [r2, #0]
 800652c:	b91a      	cbnz	r2, 8006536 <xTaskIncrementTick+0x92>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800652e:	f04f 32ff 	mov.w	r2, #4294967295
 8006532:	602a      	str	r2, [r5, #0]
					break;
 8006534:	e7e1      	b.n	80064fa <xTaskIncrementTick+0x56>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006536:	f8da 2000 	ldr.w	r2, [sl]
 800653a:	68d2      	ldr	r2, [r2, #12]
 800653c:	f8d2 800c 	ldr.w	r8, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006540:	f8d8 1004 	ldr.w	r1, [r8, #4]
					if( xConstTickCount < xItemValue )
 8006544:	428c      	cmp	r4, r1
 8006546:	d201      	bcs.n	800654c <xTaskIncrementTick+0xa8>
						xNextTaskUnblockTime = xItemValue;
 8006548:	6029      	str	r1, [r5, #0]
						break;
 800654a:	e7d6      	b.n	80064fa <xTaskIncrementTick+0x56>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800654c:	f108 0304 	add.w	r3, r8, #4
 8006550:	4618      	mov	r0, r3
 8006552:	9301      	str	r3, [sp, #4]
 8006554:	f7ff faa7 	bl	8005aa6 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006558:	f8d8 1028 	ldr.w	r1, [r8, #40]	@ 0x28
 800655c:	b119      	cbz	r1, 8006566 <xTaskIncrementTick+0xc2>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800655e:	f108 0018 	add.w	r0, r8, #24
 8006562:	f7ff faa0 	bl	8005aa6 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006566:	f8d8 002c 	ldr.w	r0, [r8, #44]	@ 0x2c
 800656a:	f8d9 3000 	ldr.w	r3, [r9]
 800656e:	2201      	movs	r2, #1
 8006570:	fa02 f100 	lsl.w	r1, r2, r0
 8006574:	4319      	orrs	r1, r3
 8006576:	f04f 0c14 	mov.w	ip, #20
 800657a:	f8c9 1000 	str.w	r1, [r9]
 800657e:	fb0c 6000 	mla	r0, ip, r0, r6
 8006582:	9901      	ldr	r1, [sp, #4]
 8006584:	f7ff fa6d 	bl	8005a62 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006588:	6838      	ldr	r0, [r7, #0]
 800658a:	f8d8 102c 	ldr.w	r1, [r8, #44]	@ 0x2c
 800658e:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
							xSwitchRequired = pdTRUE;
 8006590:	4291      	cmp	r1, r2
 8006592:	bf28      	it	cs
 8006594:	f04f 0b01 	movcs.w	fp, #1
 8006598:	e7c5      	b.n	8006526 <xTaskIncrementTick+0x82>
		++uxPendedTicks;
 800659a:	4a0c      	ldr	r2, [pc, #48]	@ (80065cc <xTaskIncrementTick+0x128>)
 800659c:	6813      	ldr	r3, [r2, #0]
 800659e:	3301      	adds	r3, #1
 80065a0:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 80065a2:	f04f 0b00 	mov.w	fp, #0
 80065a6:	e7b1      	b.n	800650c <xTaskIncrementTick+0x68>
 80065a8:	20001454 	.word	0x20001454
 80065ac:	20001474 	.word	0x20001474
 80065b0:	200014c0 	.word	0x200014c0
 80065b4:	200014bc 	.word	0x200014bc
 80065b8:	20001460 	.word	0x20001460
 80065bc:	20001458 	.word	0x20001458
 80065c0:	200014ec 	.word	0x200014ec
 80065c4:	20001578 	.word	0x20001578
 80065c8:	20001464 	.word	0x20001464
 80065cc:	20001468 	.word	0x20001468
 80065d0:	20001470 	.word	0x20001470

080065d4 <xTaskResumeAll>:
{
 80065d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( uxSchedulerSuspended );
 80065d8:	4c31      	ldr	r4, [pc, #196]	@ (80066a0 <xTaskResumeAll+0xcc>)
 80065da:	6823      	ldr	r3, [r4, #0]
 80065dc:	b943      	cbnz	r3, 80065f0 <xTaskResumeAll+0x1c>
 80065de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065e2:	f383 8811 	msr	BASEPRI, r3
 80065e6:	f3bf 8f6f 	isb	sy
 80065ea:	f3bf 8f4f 	dsb	sy
 80065ee:	e7fe      	b.n	80065ee <xTaskResumeAll+0x1a>
	taskENTER_CRITICAL();
 80065f0:	f000 fa38 	bl	8006a64 <vPortEnterCritical>
		--uxSchedulerSuspended;
 80065f4:	6823      	ldr	r3, [r4, #0]
 80065f6:	3b01      	subs	r3, #1
 80065f8:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80065fa:	6824      	ldr	r4, [r4, #0]
 80065fc:	b12c      	cbz	r4, 800660a <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 80065fe:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8006600:	f000 fa50 	bl	8006aa4 <vPortExitCritical>
}
 8006604:	4620      	mov	r0, r4
 8006606:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800660a:	4b26      	ldr	r3, [pc, #152]	@ (80066a4 <xTaskResumeAll+0xd0>)
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	2b00      	cmp	r3, #0
 8006610:	d0f5      	beq.n	80065fe <xTaskResumeAll+0x2a>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006612:	4d25      	ldr	r5, [pc, #148]	@ (80066a8 <xTaskResumeAll+0xd4>)
					prvAddTaskToReadyList( pxTCB );
 8006614:	4e25      	ldr	r6, [pc, #148]	@ (80066ac <xTaskResumeAll+0xd8>)
 8006616:	f8df 80a4 	ldr.w	r8, [pc, #164]	@ 80066bc <xTaskResumeAll+0xe8>
 800661a:	e01f      	b.n	800665c <xTaskResumeAll+0x88>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800661c:	68eb      	ldr	r3, [r5, #12]
 800661e:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006620:	f104 0904 	add.w	r9, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006624:	f104 0018 	add.w	r0, r4, #24
 8006628:	f7ff fa3d 	bl	8005aa6 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800662c:	4648      	mov	r0, r9
 800662e:	f7ff fa3a 	bl	8005aa6 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006632:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8006634:	6831      	ldr	r1, [r6, #0]
 8006636:	2701      	movs	r7, #1
 8006638:	fa07 f302 	lsl.w	r3, r7, r2
 800663c:	2014      	movs	r0, #20
 800663e:	430b      	orrs	r3, r1
 8006640:	fb00 8002 	mla	r0, r0, r2, r8
 8006644:	4649      	mov	r1, r9
 8006646:	6033      	str	r3, [r6, #0]
 8006648:	f7ff fa0b 	bl	8005a62 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800664c:	4b18      	ldr	r3, [pc, #96]	@ (80066b0 <xTaskResumeAll+0xdc>)
 800664e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006654:	429a      	cmp	r2, r3
 8006656:	d301      	bcc.n	800665c <xTaskResumeAll+0x88>
						xYieldPending = pdTRUE;
 8006658:	4b16      	ldr	r3, [pc, #88]	@ (80066b4 <xTaskResumeAll+0xe0>)
 800665a:	601f      	str	r7, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800665c:	682b      	ldr	r3, [r5, #0]
 800665e:	2b00      	cmp	r3, #0
 8006660:	d1dc      	bne.n	800661c <xTaskResumeAll+0x48>
				if( pxTCB != NULL )
 8006662:	b10c      	cbz	r4, 8006668 <xTaskResumeAll+0x94>
					prvResetNextTaskUnblockTime();
 8006664:	f7ff fdda 	bl	800621c <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8006668:	4d13      	ldr	r5, [pc, #76]	@ (80066b8 <xTaskResumeAll+0xe4>)
 800666a:	682c      	ldr	r4, [r5, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800666c:	b144      	cbz	r4, 8006680 <xTaskResumeAll+0xac>
								xYieldPending = pdTRUE;
 800666e:	4e11      	ldr	r6, [pc, #68]	@ (80066b4 <xTaskResumeAll+0xe0>)
 8006670:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 8006672:	f7ff ff17 	bl	80064a4 <xTaskIncrementTick>
 8006676:	b100      	cbz	r0, 800667a <xTaskResumeAll+0xa6>
								xYieldPending = pdTRUE;
 8006678:	6037      	str	r7, [r6, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800667a:	3c01      	subs	r4, #1
 800667c:	d1f9      	bne.n	8006672 <xTaskResumeAll+0x9e>
						uxPendedTicks = 0;
 800667e:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 8006680:	4b0c      	ldr	r3, [pc, #48]	@ (80066b4 <xTaskResumeAll+0xe0>)
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	2b00      	cmp	r3, #0
 8006686:	d0ba      	beq.n	80065fe <xTaskResumeAll+0x2a>
					taskYIELD_IF_USING_PREEMPTION();
 8006688:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800668c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006690:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8006694:	f3bf 8f4f 	dsb	sy
 8006698:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 800669c:	2401      	movs	r4, #1
 800669e:	e7af      	b.n	8006600 <xTaskResumeAll+0x2c>
 80066a0:	20001454 	.word	0x20001454
 80066a4:	20001478 	.word	0x20001478
 80066a8:	200014a8 	.word	0x200014a8
 80066ac:	20001470 	.word	0x20001470
 80066b0:	20001578 	.word	0x20001578
 80066b4:	20001464 	.word	0x20001464
 80066b8:	20001468 	.word	0x20001468
 80066bc:	200014ec 	.word	0x200014ec

080066c0 <vTaskDelay>:
	{
 80066c0:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 80066c2:	b950      	cbnz	r0, 80066da <vTaskDelay+0x1a>
			portYIELD_WITHIN_API();
 80066c4:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80066c8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80066cc:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80066d0:	f3bf 8f4f 	dsb	sy
 80066d4:	f3bf 8f6f 	isb	sy
	}
 80066d8:	bd08      	pop	{r3, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 80066da:	4b0a      	ldr	r3, [pc, #40]	@ (8006704 <vTaskDelay+0x44>)
 80066dc:	6819      	ldr	r1, [r3, #0]
 80066de:	b141      	cbz	r1, 80066f2 <vTaskDelay+0x32>
 80066e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066e4:	f383 8811 	msr	BASEPRI, r3
 80066e8:	f3bf 8f6f 	isb	sy
 80066ec:	f3bf 8f4f 	dsb	sy
 80066f0:	e7fe      	b.n	80066f0 <vTaskDelay+0x30>
			vTaskSuspendAll();
 80066f2:	f7ff fecf 	bl	8006494 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80066f6:	f7ff fd4d 	bl	8006194 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 80066fa:	f7ff ff6b 	bl	80065d4 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 80066fe:	2800      	cmp	r0, #0
 8006700:	d0e0      	beq.n	80066c4 <vTaskDelay+0x4>
 8006702:	e7e9      	b.n	80066d8 <vTaskDelay+0x18>
 8006704:	20001454 	.word	0x20001454

08006708 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006708:	4b17      	ldr	r3, [pc, #92]	@ (8006768 <vTaskSwitchContext+0x60>)
 800670a:	681a      	ldr	r2, [r3, #0]
 800670c:	4b17      	ldr	r3, [pc, #92]	@ (800676c <vTaskSwitchContext+0x64>)
{
 800670e:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006710:	b112      	cbz	r2, 8006718 <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 8006712:	2201      	movs	r2, #1
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8006714:	601a      	str	r2, [r3, #0]
}
 8006716:	bd10      	pop	{r4, pc}
		xYieldPending = pdFALSE;
 8006718:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800671a:	4b15      	ldr	r3, [pc, #84]	@ (8006770 <vTaskSwitchContext+0x68>)
 800671c:	681a      	ldr	r2, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800671e:	fab2 f282 	clz	r2, r2
 8006722:	b2d2      	uxtb	r2, r2
 8006724:	f1c2 021f 	rsb	r2, r2, #31
 8006728:	2314      	movs	r3, #20
 800672a:	4912      	ldr	r1, [pc, #72]	@ (8006774 <vTaskSwitchContext+0x6c>)
 800672c:	4353      	muls	r3, r2
 800672e:	18c8      	adds	r0, r1, r3
 8006730:	58cc      	ldr	r4, [r1, r3]
 8006732:	b944      	cbnz	r4, 8006746 <vTaskSwitchContext+0x3e>
	__asm volatile
 8006734:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006738:	f383 8811 	msr	BASEPRI, r3
 800673c:	f3bf 8f6f 	isb	sy
 8006740:	f3bf 8f4f 	dsb	sy
 8006744:	e7fe      	b.n	8006744 <vTaskSwitchContext+0x3c>
 8006746:	6844      	ldr	r4, [r0, #4]
 8006748:	3308      	adds	r3, #8
 800674a:	6864      	ldr	r4, [r4, #4]
 800674c:	6044      	str	r4, [r0, #4]
 800674e:	440b      	add	r3, r1
 8006750:	429c      	cmp	r4, r3
 8006752:	bf04      	itt	eq
 8006754:	6863      	ldreq	r3, [r4, #4]
 8006756:	6043      	streq	r3, [r0, #4]
 8006758:	2314      	movs	r3, #20
 800675a:	fb03 1102 	mla	r1, r3, r2, r1
 800675e:	684b      	ldr	r3, [r1, #4]
 8006760:	68da      	ldr	r2, [r3, #12]
 8006762:	4b05      	ldr	r3, [pc, #20]	@ (8006778 <vTaskSwitchContext+0x70>)
 8006764:	e7d6      	b.n	8006714 <vTaskSwitchContext+0xc>
 8006766:	bf00      	nop
 8006768:	20001454 	.word	0x20001454
 800676c:	20001464 	.word	0x20001464
 8006770:	20001470 	.word	0x20001470
 8006774:	200014ec 	.word	0x200014ec
 8006778:	20001578 	.word	0x20001578

0800677c <vTaskPlaceOnEventList>:
{
 800677c:	b510      	push	{r4, lr}
 800677e:	460c      	mov	r4, r1
	configASSERT( pxEventList );
 8006780:	b940      	cbnz	r0, 8006794 <vTaskPlaceOnEventList+0x18>
 8006782:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006786:	f383 8811 	msr	BASEPRI, r3
 800678a:	f3bf 8f6f 	isb	sy
 800678e:	f3bf 8f4f 	dsb	sy
 8006792:	e7fe      	b.n	8006792 <vTaskPlaceOnEventList+0x16>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006794:	4b05      	ldr	r3, [pc, #20]	@ (80067ac <vTaskPlaceOnEventList+0x30>)
 8006796:	6819      	ldr	r1, [r3, #0]
 8006798:	3118      	adds	r1, #24
 800679a:	f7ff f96d 	bl	8005a78 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800679e:	4620      	mov	r0, r4
 80067a0:	2101      	movs	r1, #1
}
 80067a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80067a6:	f7ff bcf5 	b.w	8006194 <prvAddCurrentTaskToDelayedList>
 80067aa:	bf00      	nop
 80067ac:	20001578 	.word	0x20001578

080067b0 <xTaskRemoveFromEventList>:
{
 80067b0:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80067b2:	68c3      	ldr	r3, [r0, #12]
 80067b4:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 80067b6:	b944      	cbnz	r4, 80067ca <xTaskRemoveFromEventList+0x1a>
 80067b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067bc:	f383 8811 	msr	BASEPRI, r3
 80067c0:	f3bf 8f6f 	isb	sy
 80067c4:	f3bf 8f4f 	dsb	sy
 80067c8:	e7fe      	b.n	80067c8 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80067ca:	f104 0518 	add.w	r5, r4, #24
 80067ce:	4628      	mov	r0, r5
 80067d0:	f7ff f969 	bl	8005aa6 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80067d4:	4b11      	ldr	r3, [pc, #68]	@ (800681c <xTaskRemoveFromEventList+0x6c>)
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	b9e3      	cbnz	r3, 8006814 <xTaskRemoveFromEventList+0x64>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80067da:	1d25      	adds	r5, r4, #4
 80067dc:	4628      	mov	r0, r5
 80067de:	f7ff f962 	bl	8005aa6 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80067e2:	490f      	ldr	r1, [pc, #60]	@ (8006820 <xTaskRemoveFromEventList+0x70>)
 80067e4:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80067e6:	6808      	ldr	r0, [r1, #0]
 80067e8:	2301      	movs	r3, #1
 80067ea:	4093      	lsls	r3, r2
 80067ec:	4303      	orrs	r3, r0
 80067ee:	600b      	str	r3, [r1, #0]
 80067f0:	4b0c      	ldr	r3, [pc, #48]	@ (8006824 <xTaskRemoveFromEventList+0x74>)
 80067f2:	2014      	movs	r0, #20
 80067f4:	4629      	mov	r1, r5
 80067f6:	fb00 3002 	mla	r0, r0, r2, r3
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80067fa:	f7ff f932 	bl	8005a62 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80067fe:	4b0a      	ldr	r3, [pc, #40]	@ (8006828 <xTaskRemoveFromEventList+0x78>)
 8006800:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006806:	429a      	cmp	r2, r3
		xYieldPending = pdTRUE;
 8006808:	bf83      	ittte	hi
 800680a:	4b08      	ldrhi	r3, [pc, #32]	@ (800682c <xTaskRemoveFromEventList+0x7c>)
 800680c:	2001      	movhi	r0, #1
 800680e:	6018      	strhi	r0, [r3, #0]
		xReturn = pdFALSE;
 8006810:	2000      	movls	r0, #0
}
 8006812:	bd38      	pop	{r3, r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006814:	4806      	ldr	r0, [pc, #24]	@ (8006830 <xTaskRemoveFromEventList+0x80>)
 8006816:	4629      	mov	r1, r5
 8006818:	e7ef      	b.n	80067fa <xTaskRemoveFromEventList+0x4a>
 800681a:	bf00      	nop
 800681c:	20001454 	.word	0x20001454
 8006820:	20001470 	.word	0x20001470
 8006824:	200014ec 	.word	0x200014ec
 8006828:	20001578 	.word	0x20001578
 800682c:	20001464 	.word	0x20001464
 8006830:	200014a8 	.word	0x200014a8

08006834 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006834:	4b03      	ldr	r3, [pc, #12]	@ (8006844 <vTaskInternalSetTimeOutState+0x10>)
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800683a:	4b03      	ldr	r3, [pc, #12]	@ (8006848 <vTaskInternalSetTimeOutState+0x14>)
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	6043      	str	r3, [r0, #4]
}
 8006840:	4770      	bx	lr
 8006842:	bf00      	nop
 8006844:	20001460 	.word	0x20001460
 8006848:	20001474 	.word	0x20001474

0800684c <xTaskCheckForTimeOut>:
{
 800684c:	b570      	push	{r4, r5, r6, lr}
 800684e:	460c      	mov	r4, r1
	configASSERT( pxTimeOut );
 8006850:	4605      	mov	r5, r0
 8006852:	b940      	cbnz	r0, 8006866 <xTaskCheckForTimeOut+0x1a>
 8006854:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006858:	f383 8811 	msr	BASEPRI, r3
 800685c:	f3bf 8f6f 	isb	sy
 8006860:	f3bf 8f4f 	dsb	sy
 8006864:	e7fe      	b.n	8006864 <xTaskCheckForTimeOut+0x18>
	configASSERT( pxTicksToWait );
 8006866:	b941      	cbnz	r1, 800687a <xTaskCheckForTimeOut+0x2e>
 8006868:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800686c:	f383 8811 	msr	BASEPRI, r3
 8006870:	f3bf 8f6f 	isb	sy
 8006874:	f3bf 8f4f 	dsb	sy
 8006878:	e7fe      	b.n	8006878 <xTaskCheckForTimeOut+0x2c>
	taskENTER_CRITICAL();
 800687a:	f000 f8f3 	bl	8006a64 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 800687e:	4b0f      	ldr	r3, [pc, #60]	@ (80068bc <xTaskCheckForTimeOut+0x70>)
 8006880:	6819      	ldr	r1, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 8006882:	6823      	ldr	r3, [r4, #0]
 8006884:	1c5a      	adds	r2, r3, #1
 8006886:	d010      	beq.n	80068aa <xTaskCheckForTimeOut+0x5e>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006888:	480d      	ldr	r0, [pc, #52]	@ (80068c0 <xTaskCheckForTimeOut+0x74>)
 800688a:	682e      	ldr	r6, [r5, #0]
 800688c:	6800      	ldr	r0, [r0, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800688e:	686a      	ldr	r2, [r5, #4]
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006890:	4286      	cmp	r6, r0
 8006892:	d001      	beq.n	8006898 <xTaskCheckForTimeOut+0x4c>
 8006894:	428a      	cmp	r2, r1
 8006896:	d90f      	bls.n	80068b8 <xTaskCheckForTimeOut+0x6c>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006898:	1a88      	subs	r0, r1, r2
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800689a:	4283      	cmp	r3, r0
 800689c:	d90a      	bls.n	80068b4 <xTaskCheckForTimeOut+0x68>
			*pxTicksToWait -= xElapsedTime;
 800689e:	1a5b      	subs	r3, r3, r1
 80068a0:	4413      	add	r3, r2
 80068a2:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80068a4:	4628      	mov	r0, r5
 80068a6:	f7ff ffc5 	bl	8006834 <vTaskInternalSetTimeOutState>
				xReturn = pdFALSE;
 80068aa:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 80068ac:	f000 f8fa 	bl	8006aa4 <vPortExitCritical>
}
 80068b0:	4620      	mov	r0, r4
 80068b2:	bd70      	pop	{r4, r5, r6, pc}
			*pxTicksToWait = 0;
 80068b4:	2300      	movs	r3, #0
 80068b6:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 80068b8:	2401      	movs	r4, #1
 80068ba:	e7f7      	b.n	80068ac <xTaskCheckForTimeOut+0x60>
 80068bc:	20001474 	.word	0x20001474
 80068c0:	20001460 	.word	0x20001460

080068c4 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 80068c4:	4b01      	ldr	r3, [pc, #4]	@ (80068cc <vTaskMissedYield+0x8>)
 80068c6:	2201      	movs	r2, #1
 80068c8:	601a      	str	r2, [r3, #0]
}
 80068ca:	4770      	bx	lr
 80068cc:	20001464 	.word	0x20001464

080068d0 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 80068d0:	4b05      	ldr	r3, [pc, #20]	@ (80068e8 <xTaskGetSchedulerState+0x18>)
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	b133      	cbz	r3, 80068e4 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80068d6:	4b05      	ldr	r3, [pc, #20]	@ (80068ec <xTaskGetSchedulerState+0x1c>)
 80068d8:	6818      	ldr	r0, [r3, #0]
 80068da:	fab0 f080 	clz	r0, r0
 80068de:	0940      	lsrs	r0, r0, #5
 80068e0:	0040      	lsls	r0, r0, #1
 80068e2:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 80068e4:	2001      	movs	r0, #1
	}
 80068e6:	4770      	bx	lr
 80068e8:	2000146c 	.word	0x2000146c
 80068ec:	20001454 	.word	0x20001454

080068f0 <xTaskPriorityDisinherit>:
	{
 80068f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if( pxMutexHolder != NULL )
 80068f2:	4604      	mov	r4, r0
 80068f4:	b908      	cbnz	r0, 80068fa <xTaskPriorityDisinherit+0xa>
	BaseType_t xReturn = pdFALSE;
 80068f6:	2000      	movs	r0, #0
	}
 80068f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			configASSERT( pxTCB == pxCurrentTCB );
 80068fa:	4b22      	ldr	r3, [pc, #136]	@ (8006984 <xTaskPriorityDisinherit+0x94>)
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	4283      	cmp	r3, r0
 8006900:	d008      	beq.n	8006914 <xTaskPriorityDisinherit+0x24>
 8006902:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006906:	f383 8811 	msr	BASEPRI, r3
 800690a:	f3bf 8f6f 	isb	sy
 800690e:	f3bf 8f4f 	dsb	sy
 8006912:	e7fe      	b.n	8006912 <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 8006914:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006916:	b943      	cbnz	r3, 800692a <xTaskPriorityDisinherit+0x3a>
 8006918:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800691c:	f383 8811 	msr	BASEPRI, r3
 8006920:	f3bf 8f6f 	isb	sy
 8006924:	f3bf 8f4f 	dsb	sy
 8006928:	e7fe      	b.n	8006928 <xTaskPriorityDisinherit+0x38>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800692a:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 800692c:	6c42      	ldr	r2, [r0, #68]	@ 0x44
			( pxTCB->uxMutexesHeld )--;
 800692e:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006930:	4291      	cmp	r1, r2
			( pxTCB->uxMutexesHeld )--;
 8006932:	6483      	str	r3, [r0, #72]	@ 0x48
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006934:	d0df      	beq.n	80068f6 <xTaskPriorityDisinherit+0x6>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006936:	2b00      	cmp	r3, #0
 8006938:	d1dd      	bne.n	80068f6 <xTaskPriorityDisinherit+0x6>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800693a:	1d06      	adds	r6, r0, #4
 800693c:	4630      	mov	r0, r6
 800693e:	f7ff f8b2 	bl	8005aa6 <uxListRemove>
 8006942:	4f11      	ldr	r7, [pc, #68]	@ (8006988 <xTaskPriorityDisinherit+0x98>)
 8006944:	4a11      	ldr	r2, [pc, #68]	@ (800698c <xTaskPriorityDisinherit+0x9c>)
 8006946:	b950      	cbnz	r0, 800695e <xTaskPriorityDisinherit+0x6e>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8006948:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800694a:	2314      	movs	r3, #20
 800694c:	434b      	muls	r3, r1
 800694e:	58fb      	ldr	r3, [r7, r3]
 8006950:	b92b      	cbnz	r3, 800695e <xTaskPriorityDisinherit+0x6e>
 8006952:	6813      	ldr	r3, [r2, #0]
 8006954:	2501      	movs	r5, #1
 8006956:	408d      	lsls	r5, r1
 8006958:	ea23 0305 	bic.w	r3, r3, r5
 800695c:	6013      	str	r3, [r2, #0]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800695e:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8006960:	62e3      	str	r3, [r4, #44]	@ 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006962:	f1c3 0107 	rsb	r1, r3, #7
 8006966:	61a1      	str	r1, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 8006968:	6811      	ldr	r1, [r2, #0]
 800696a:	2401      	movs	r4, #1
 800696c:	fa04 f503 	lsl.w	r5, r4, r3
 8006970:	2014      	movs	r0, #20
 8006972:	430d      	orrs	r5, r1
 8006974:	fb00 7003 	mla	r0, r0, r3, r7
 8006978:	4631      	mov	r1, r6
 800697a:	6015      	str	r5, [r2, #0]
 800697c:	f7ff f871 	bl	8005a62 <vListInsertEnd>
					xReturn = pdTRUE;
 8006980:	4620      	mov	r0, r4
		return xReturn;
 8006982:	e7b9      	b.n	80068f8 <xTaskPriorityDisinherit+0x8>
 8006984:	20001578 	.word	0x20001578
 8006988:	200014ec 	.word	0x200014ec
 800698c:	20001470 	.word	0x20001470

08006990 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006990:	4808      	ldr	r0, [pc, #32]	@ (80069b4 <prvPortStartFirstTask+0x24>)
 8006992:	6800      	ldr	r0, [r0, #0]
 8006994:	6800      	ldr	r0, [r0, #0]
 8006996:	f380 8808 	msr	MSP, r0
 800699a:	f04f 0000 	mov.w	r0, #0
 800699e:	f380 8814 	msr	CONTROL, r0
 80069a2:	b662      	cpsie	i
 80069a4:	b661      	cpsie	f
 80069a6:	f3bf 8f4f 	dsb	sy
 80069aa:	f3bf 8f6f 	isb	sy
 80069ae:	df00      	svc	0
 80069b0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80069b2:	0000      	.short	0x0000
 80069b4:	e000ed08 	.word	0xe000ed08

080069b8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80069b8:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80069c8 <vPortEnableVFP+0x10>
 80069bc:	6801      	ldr	r1, [r0, #0]
 80069be:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80069c2:	6001      	str	r1, [r0, #0]
 80069c4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80069c6:	0000      	.short	0x0000
 80069c8:	e000ed88 	.word	0xe000ed88

080069cc <prvTaskExitError>:
{
 80069cc:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 80069ce:	2300      	movs	r3, #0
 80069d0:	9301      	str	r3, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
 80069d2:	4b0d      	ldr	r3, [pc, #52]	@ (8006a08 <prvTaskExitError+0x3c>)
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	3301      	adds	r3, #1
 80069d8:	d008      	beq.n	80069ec <prvTaskExitError+0x20>
 80069da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069de:	f383 8811 	msr	BASEPRI, r3
 80069e2:	f3bf 8f6f 	isb	sy
 80069e6:	f3bf 8f4f 	dsb	sy
 80069ea:	e7fe      	b.n	80069ea <prvTaskExitError+0x1e>
 80069ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069f0:	f383 8811 	msr	BASEPRI, r3
 80069f4:	f3bf 8f6f 	isb	sy
 80069f8:	f3bf 8f4f 	dsb	sy
	while( ulDummy == 0 )
 80069fc:	9b01      	ldr	r3, [sp, #4]
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d0fc      	beq.n	80069fc <prvTaskExitError+0x30>
}
 8006a02:	b002      	add	sp, #8
 8006a04:	4770      	bx	lr
 8006a06:	bf00      	nop
 8006a08:	20000014 	.word	0x20000014

08006a0c <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006a0c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006a10:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006a14:	4b07      	ldr	r3, [pc, #28]	@ (8006a34 <pxPortInitialiseStack+0x28>)
 8006a16:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006a1a:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006a1e:	f06f 0302 	mvn.w	r3, #2
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006a22:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006a26:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006a2a:	f840 3c24 	str.w	r3, [r0, #-36]
}
 8006a2e:	3844      	subs	r0, #68	@ 0x44
 8006a30:	4770      	bx	lr
 8006a32:	bf00      	nop
 8006a34:	080069cd 	.word	0x080069cd
	...

08006a40 <SVC_Handler>:
	__asm volatile (
 8006a40:	4b07      	ldr	r3, [pc, #28]	@ (8006a60 <pxCurrentTCBConst2>)
 8006a42:	6819      	ldr	r1, [r3, #0]
 8006a44:	6808      	ldr	r0, [r1, #0]
 8006a46:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a4a:	f380 8809 	msr	PSP, r0
 8006a4e:	f3bf 8f6f 	isb	sy
 8006a52:	f04f 0000 	mov.w	r0, #0
 8006a56:	f380 8811 	msr	BASEPRI, r0
 8006a5a:	4770      	bx	lr
 8006a5c:	f3af 8000 	nop.w

08006a60 <pxCurrentTCBConst2>:
 8006a60:	20001578 	.word	0x20001578

08006a64 <vPortEnterCritical>:
 8006a64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a68:	f383 8811 	msr	BASEPRI, r3
 8006a6c:	f3bf 8f6f 	isb	sy
 8006a70:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 8006a74:	4a0a      	ldr	r2, [pc, #40]	@ (8006aa0 <vPortEnterCritical+0x3c>)
 8006a76:	6813      	ldr	r3, [r2, #0]
 8006a78:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 8006a7a:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 8006a7c:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 8006a7e:	d10e      	bne.n	8006a9e <vPortEnterCritical+0x3a>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006a80:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8006a84:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	@ 0xd04
 8006a88:	b2db      	uxtb	r3, r3
 8006a8a:	b143      	cbz	r3, 8006a9e <vPortEnterCritical+0x3a>
 8006a8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a90:	f383 8811 	msr	BASEPRI, r3
 8006a94:	f3bf 8f6f 	isb	sy
 8006a98:	f3bf 8f4f 	dsb	sy
 8006a9c:	e7fe      	b.n	8006a9c <vPortEnterCritical+0x38>
}
 8006a9e:	4770      	bx	lr
 8006aa0:	20000014 	.word	0x20000014

08006aa4 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8006aa4:	4a08      	ldr	r2, [pc, #32]	@ (8006ac8 <vPortExitCritical+0x24>)
 8006aa6:	6813      	ldr	r3, [r2, #0]
 8006aa8:	b943      	cbnz	r3, 8006abc <vPortExitCritical+0x18>
 8006aaa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006aae:	f383 8811 	msr	BASEPRI, r3
 8006ab2:	f3bf 8f6f 	isb	sy
 8006ab6:	f3bf 8f4f 	dsb	sy
 8006aba:	e7fe      	b.n	8006aba <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8006abc:	3b01      	subs	r3, #1
 8006abe:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006ac0:	b90b      	cbnz	r3, 8006ac6 <vPortExitCritical+0x22>
	__asm volatile
 8006ac2:	f383 8811 	msr	BASEPRI, r3
}
 8006ac6:	4770      	bx	lr
 8006ac8:	20000014 	.word	0x20000014
 8006acc:	00000000 	.word	0x00000000

08006ad0 <PendSV_Handler>:
	__asm volatile
 8006ad0:	f3ef 8009 	mrs	r0, PSP
 8006ad4:	f3bf 8f6f 	isb	sy
 8006ad8:	4b15      	ldr	r3, [pc, #84]	@ (8006b30 <pxCurrentTCBConst>)
 8006ada:	681a      	ldr	r2, [r3, #0]
 8006adc:	f01e 0f10 	tst.w	lr, #16
 8006ae0:	bf08      	it	eq
 8006ae2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006ae6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006aea:	6010      	str	r0, [r2, #0]
 8006aec:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006af0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8006af4:	f380 8811 	msr	BASEPRI, r0
 8006af8:	f3bf 8f4f 	dsb	sy
 8006afc:	f3bf 8f6f 	isb	sy
 8006b00:	f7ff fe02 	bl	8006708 <vTaskSwitchContext>
 8006b04:	f04f 0000 	mov.w	r0, #0
 8006b08:	f380 8811 	msr	BASEPRI, r0
 8006b0c:	bc09      	pop	{r0, r3}
 8006b0e:	6819      	ldr	r1, [r3, #0]
 8006b10:	6808      	ldr	r0, [r1, #0]
 8006b12:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b16:	f01e 0f10 	tst.w	lr, #16
 8006b1a:	bf08      	it	eq
 8006b1c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006b20:	f380 8809 	msr	PSP, r0
 8006b24:	f3bf 8f6f 	isb	sy
 8006b28:	4770      	bx	lr
 8006b2a:	bf00      	nop
 8006b2c:	f3af 8000 	nop.w

08006b30 <pxCurrentTCBConst>:
 8006b30:	20001578 	.word	0x20001578

08006b34 <SysTick_Handler>:
{
 8006b34:	b508      	push	{r3, lr}
	__asm volatile
 8006b36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b3a:	f383 8811 	msr	BASEPRI, r3
 8006b3e:	f3bf 8f6f 	isb	sy
 8006b42:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 8006b46:	f7ff fcad 	bl	80064a4 <xTaskIncrementTick>
 8006b4a:	b128      	cbz	r0, 8006b58 <SysTick_Handler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006b4c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8006b50:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006b54:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
	__asm volatile
 8006b58:	2300      	movs	r3, #0
 8006b5a:	f383 8811 	msr	BASEPRI, r3
}
 8006b5e:	bd08      	pop	{r3, pc}

08006b60 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006b60:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
 8006b64:	2300      	movs	r3, #0
 8006b66:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006b68:	6193      	str	r3, [r2, #24]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006b6a:	4b05      	ldr	r3, [pc, #20]	@ (8006b80 <vPortSetupTimerInterrupt+0x20>)
 8006b6c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	fbb3 f3f1 	udiv	r3, r3, r1
 8006b76:	3b01      	subs	r3, #1
 8006b78:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006b7a:	2307      	movs	r3, #7
 8006b7c:	6113      	str	r3, [r2, #16]
}
 8006b7e:	4770      	bx	lr
 8006b80:	20000008 	.word	0x20000008

08006b84 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006b84:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
{
 8006b88:	b537      	push	{r0, r1, r2, r4, r5, lr}
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006b8a:	f8d3 1d00 	ldr.w	r1, [r3, #3328]	@ 0xd00
 8006b8e:	4a38      	ldr	r2, [pc, #224]	@ (8006c70 <xPortStartScheduler+0xec>)
 8006b90:	4291      	cmp	r1, r2
 8006b92:	d108      	bne.n	8006ba6 <xPortStartScheduler+0x22>
	__asm volatile
 8006b94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b98:	f383 8811 	msr	BASEPRI, r3
 8006b9c:	f3bf 8f6f 	isb	sy
 8006ba0:	f3bf 8f4f 	dsb	sy
 8006ba4:	e7fe      	b.n	8006ba4 <xPortStartScheduler+0x20>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006ba6:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 8006baa:	4b32      	ldr	r3, [pc, #200]	@ (8006c74 <xPortStartScheduler+0xf0>)
 8006bac:	429a      	cmp	r2, r3
 8006bae:	d108      	bne.n	8006bc2 <xPortStartScheduler+0x3e>
 8006bb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bb4:	f383 8811 	msr	BASEPRI, r3
 8006bb8:	f3bf 8f6f 	isb	sy
 8006bbc:	f3bf 8f4f 	dsb	sy
 8006bc0:	e7fe      	b.n	8006bc0 <xPortStartScheduler+0x3c>
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006bc2:	4b2d      	ldr	r3, [pc, #180]	@ (8006c78 <xPortStartScheduler+0xf4>)
 8006bc4:	781a      	ldrb	r2, [r3, #0]
 8006bc6:	b2d2      	uxtb	r2, r2
 8006bc8:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006bca:	22ff      	movs	r2, #255	@ 0xff
 8006bcc:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006bce:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006bd0:	4a2a      	ldr	r2, [pc, #168]	@ (8006c7c <xPortStartScheduler+0xf8>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006bd2:	b2db      	uxtb	r3, r3
 8006bd4:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006bd8:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8006bdc:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8006be0:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006be2:	4a27      	ldr	r2, [pc, #156]	@ (8006c80 <xPortStartScheduler+0xfc>)
 8006be4:	2307      	movs	r3, #7
 8006be6:	6013      	str	r3, [r2, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006be8:	f89d 1003 	ldrb.w	r1, [sp, #3]
			ulMaxPRIGROUPValue--;
 8006bec:	6813      	ldr	r3, [r2, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006bee:	0609      	lsls	r1, r1, #24
 8006bf0:	d40a      	bmi.n	8006c08 <xPortStartScheduler+0x84>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006bf2:	2b03      	cmp	r3, #3
 8006bf4:	d011      	beq.n	8006c1a <xPortStartScheduler+0x96>
 8006bf6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bfa:	f383 8811 	msr	BASEPRI, r3
 8006bfe:	f3bf 8f6f 	isb	sy
 8006c02:	f3bf 8f4f 	dsb	sy
 8006c06:	e7fe      	b.n	8006c06 <xPortStartScheduler+0x82>
			ulMaxPRIGROUPValue--;
 8006c08:	3b01      	subs	r3, #1
 8006c0a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006c0c:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8006c10:	005b      	lsls	r3, r3, #1
 8006c12:	b2db      	uxtb	r3, r3
 8006c14:	f88d 3003 	strb.w	r3, [sp, #3]
 8006c18:	e7e6      	b.n	8006be8 <xPortStartScheduler+0x64>
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006c1a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8006c1e:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006c20:	9b01      	ldr	r3, [sp, #4]
 8006c22:	4a15      	ldr	r2, [pc, #84]	@ (8006c78 <xPortStartScheduler+0xf4>)
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006c24:	f04f 24e0 	mov.w	r4, #3758153728	@ 0xe000e000
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006c28:	b2db      	uxtb	r3, r3
 8006c2a:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006c2c:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 8006c30:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006c34:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006c38:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 8006c3c:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8006c40:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	vPortSetupTimerInterrupt();
 8006c44:	f7ff ff8c 	bl	8006b60 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8006c48:	4b0e      	ldr	r3, [pc, #56]	@ (8006c84 <xPortStartScheduler+0x100>)
 8006c4a:	2500      	movs	r5, #0
 8006c4c:	601d      	str	r5, [r3, #0]
	vPortEnableVFP();
 8006c4e:	f7ff feb3 	bl	80069b8 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006c52:	f8d4 3f34 	ldr.w	r3, [r4, #3892]	@ 0xf34
 8006c56:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8006c5a:	f8c4 3f34 	str.w	r3, [r4, #3892]	@ 0xf34
	prvPortStartFirstTask();
 8006c5e:	f7ff fe97 	bl	8006990 <prvPortStartFirstTask>
	vTaskSwitchContext();
 8006c62:	f7ff fd51 	bl	8006708 <vTaskSwitchContext>
	prvTaskExitError();
 8006c66:	f7ff feb1 	bl	80069cc <prvTaskExitError>
}
 8006c6a:	4628      	mov	r0, r5
 8006c6c:	b003      	add	sp, #12
 8006c6e:	bd30      	pop	{r4, r5, pc}
 8006c70:	410fc271 	.word	0x410fc271
 8006c74:	410fc270 	.word	0x410fc270
 8006c78:	e000e400 	.word	0xe000e400
 8006c7c:	20001580 	.word	0x20001580
 8006c80:	2000157c 	.word	0x2000157c
 8006c84:	20000014 	.word	0x20000014

08006c88 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006c88:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006c8c:	2b0f      	cmp	r3, #15
 8006c8e:	d90e      	bls.n	8006cae <vPortValidateInterruptPriority+0x26>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006c90:	4a11      	ldr	r2, [pc, #68]	@ (8006cd8 <vPortValidateInterruptPriority+0x50>)
 8006c92:	5c9b      	ldrb	r3, [r3, r2]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006c94:	4a11      	ldr	r2, [pc, #68]	@ (8006cdc <vPortValidateInterruptPriority+0x54>)
 8006c96:	7812      	ldrb	r2, [r2, #0]
 8006c98:	429a      	cmp	r2, r3
 8006c9a:	d908      	bls.n	8006cae <vPortValidateInterruptPriority+0x26>
 8006c9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ca0:	f383 8811 	msr	BASEPRI, r3
 8006ca4:	f3bf 8f6f 	isb	sy
 8006ca8:	f3bf 8f4f 	dsb	sy
 8006cac:	e7fe      	b.n	8006cac <vPortValidateInterruptPriority+0x24>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006cae:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8006cb2:	4a0b      	ldr	r2, [pc, #44]	@ (8006ce0 <vPortValidateInterruptPriority+0x58>)
 8006cb4:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	@ 0xd0c
 8006cb8:	6812      	ldr	r2, [r2, #0]
 8006cba:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006cbe:	4293      	cmp	r3, r2
 8006cc0:	d908      	bls.n	8006cd4 <vPortValidateInterruptPriority+0x4c>
 8006cc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cc6:	f383 8811 	msr	BASEPRI, r3
 8006cca:	f3bf 8f6f 	isb	sy
 8006cce:	f3bf 8f4f 	dsb	sy
 8006cd2:	e7fe      	b.n	8006cd2 <vPortValidateInterruptPriority+0x4a>
	}
 8006cd4:	4770      	bx	lr
 8006cd6:	bf00      	nop
 8006cd8:	e000e3f0 	.word	0xe000e3f0
 8006cdc:	20001580 	.word	0x20001580
 8006ce0:	2000157c 	.word	0x2000157c

08006ce4 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006ce4:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006ce6:	4b10      	ldr	r3, [pc, #64]	@ (8006d28 <prvInsertBlockIntoFreeList+0x44>)
 8006ce8:	461a      	mov	r2, r3
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	4283      	cmp	r3, r0
 8006cee:	d3fb      	bcc.n	8006ce8 <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006cf0:	6854      	ldr	r4, [r2, #4]
 8006cf2:	1911      	adds	r1, r2, r4
 8006cf4:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006cf6:	bf01      	itttt	eq
 8006cf8:	6841      	ldreq	r1, [r0, #4]
 8006cfa:	4610      	moveq	r0, r2
 8006cfc:	1909      	addeq	r1, r1, r4
 8006cfe:	6051      	streq	r1, [r2, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006d00:	6844      	ldr	r4, [r0, #4]
 8006d02:	1901      	adds	r1, r0, r4
 8006d04:	428b      	cmp	r3, r1
 8006d06:	d10c      	bne.n	8006d22 <prvInsertBlockIntoFreeList+0x3e>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006d08:	4908      	ldr	r1, [pc, #32]	@ (8006d2c <prvInsertBlockIntoFreeList+0x48>)
 8006d0a:	6809      	ldr	r1, [r1, #0]
 8006d0c:	428b      	cmp	r3, r1
 8006d0e:	d003      	beq.n	8006d18 <prvInsertBlockIntoFreeList+0x34>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006d10:	6859      	ldr	r1, [r3, #4]
 8006d12:	4421      	add	r1, r4
 8006d14:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006d16:	6819      	ldr	r1, [r3, #0]
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006d18:	6001      	str	r1, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006d1a:	4290      	cmp	r0, r2
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006d1c:	bf18      	it	ne
 8006d1e:	6010      	strne	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006d20:	bd10      	pop	{r4, pc}
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006d22:	4619      	mov	r1, r3
 8006d24:	e7f8      	b.n	8006d18 <prvInsertBlockIntoFreeList+0x34>
 8006d26:	bf00      	nop
 8006d28:	20001594 	.word	0x20001594
 8006d2c:	20001590 	.word	0x20001590

08006d30 <pvPortMalloc>:
{
 8006d30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d34:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8006d36:	f7ff fbad 	bl	8006494 <vTaskSuspendAll>
		if( pxEnd == NULL )
 8006d3a:	493f      	ldr	r1, [pc, #252]	@ (8006e38 <pvPortMalloc+0x108>)
 8006d3c:	4d3f      	ldr	r5, [pc, #252]	@ (8006e3c <pvPortMalloc+0x10c>)
 8006d3e:	680b      	ldr	r3, [r1, #0]
 8006d40:	b9fb      	cbnz	r3, 8006d82 <pvPortMalloc+0x52>
	uxAddress = ( size_t ) ucHeap;
 8006d42:	4a3f      	ldr	r2, [pc, #252]	@ (8006e40 <pvPortMalloc+0x110>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006d44:	0756      	lsls	r6, r2, #29
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006d46:	bf1c      	itt	ne
 8006d48:	3207      	addne	r2, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006d4a:	4b3e      	ldrne	r3, [pc, #248]	@ (8006e44 <pvPortMalloc+0x114>)
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006d4c:	4e3e      	ldr	r6, [pc, #248]	@ (8006e48 <pvPortMalloc+0x118>)
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006d4e:	bf1a      	itte	ne
 8006d50:	f022 0207 	bicne.w	r2, r2, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006d54:	1a9b      	subne	r3, r3, r2
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006d56:	f243 5320 	movweq	r3, #13600	@ 0x3520
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006d5a:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 8006d5c:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006d5e:	f023 0307 	bic.w	r3, r3, #7
	xStart.xBlockSize = ( size_t ) 0;
 8006d62:	2000      	movs	r0, #0
 8006d64:	6070      	str	r0, [r6, #4]
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006d66:	6032      	str	r2, [r6, #0]
	pxEnd->pxNextFreeBlock = NULL;
 8006d68:	e9c3 0000 	strd	r0, r0, [r3]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006d6c:	1a98      	subs	r0, r3, r2
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006d6e:	e9c2 3000 	strd	r3, r0, [r2]
	pxEnd = ( void * ) uxAddress;
 8006d72:	600b      	str	r3, [r1, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006d74:	4b35      	ldr	r3, [pc, #212]	@ (8006e4c <pvPortMalloc+0x11c>)
 8006d76:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006d78:	4b35      	ldr	r3, [pc, #212]	@ (8006e50 <pvPortMalloc+0x120>)
 8006d7a:	6018      	str	r0, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006d7c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8006d80:	602b      	str	r3, [r5, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006d82:	682e      	ldr	r6, [r5, #0]
 8006d84:	4226      	tst	r6, r4
 8006d86:	d152      	bne.n	8006e2e <pvPortMalloc+0xfe>
			if( xWantedSize > 0 )
 8006d88:	2c00      	cmp	r4, #0
 8006d8a:	d043      	beq.n	8006e14 <pvPortMalloc+0xe4>
				xWantedSize += xHeapStructSize;
 8006d8c:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006d90:	0760      	lsls	r0, r4, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006d92:	bf1c      	itt	ne
 8006d94:	f023 0307 	bicne.w	r3, r3, #7
 8006d98:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d047      	beq.n	8006e2e <pvPortMalloc+0xfe>
 8006d9e:	4f2c      	ldr	r7, [pc, #176]	@ (8006e50 <pvPortMalloc+0x120>)
 8006da0:	683c      	ldr	r4, [r7, #0]
 8006da2:	429c      	cmp	r4, r3
 8006da4:	d343      	bcc.n	8006e2e <pvPortMalloc+0xfe>
				pxBlock = xStart.pxNextFreeBlock;
 8006da6:	4a28      	ldr	r2, [pc, #160]	@ (8006e48 <pvPortMalloc+0x118>)
 8006da8:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006daa:	6868      	ldr	r0, [r5, #4]
 8006dac:	4298      	cmp	r0, r3
 8006dae:	d204      	bcs.n	8006dba <pvPortMalloc+0x8a>
 8006db0:	f8d5 c000 	ldr.w	ip, [r5]
 8006db4:	f1bc 0f00 	cmp.w	ip, #0
 8006db8:	d115      	bne.n	8006de6 <pvPortMalloc+0xb6>
				if( pxBlock != pxEnd )
 8006dba:	6809      	ldr	r1, [r1, #0]
 8006dbc:	42a9      	cmp	r1, r5
 8006dbe:	d036      	beq.n	8006e2e <pvPortMalloc+0xfe>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006dc0:	6829      	ldr	r1, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006dc2:	f8d2 8000 	ldr.w	r8, [r2]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006dc6:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006dc8:	1ac2      	subs	r2, r0, r3
 8006dca:	2a10      	cmp	r2, #16
 8006dcc:	d912      	bls.n	8006df4 <pvPortMalloc+0xc4>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006dce:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006dd0:	0741      	lsls	r1, r0, #29
 8006dd2:	d00b      	beq.n	8006dec <pvPortMalloc+0xbc>
 8006dd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006dd8:	f383 8811 	msr	BASEPRI, r3
 8006ddc:	f3bf 8f6f 	isb	sy
 8006de0:	f3bf 8f4f 	dsb	sy
 8006de4:	e7fe      	b.n	8006de4 <pvPortMalloc+0xb4>
 8006de6:	462a      	mov	r2, r5
 8006de8:	4665      	mov	r5, ip
 8006dea:	e7de      	b.n	8006daa <pvPortMalloc+0x7a>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006dec:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006dee:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006df0:	f7ff ff78 	bl	8006ce4 <prvInsertBlockIntoFreeList>
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006df4:	4915      	ldr	r1, [pc, #84]	@ (8006e4c <pvPortMalloc+0x11c>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006df6:	686a      	ldr	r2, [r5, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006df8:	6808      	ldr	r0, [r1, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006dfa:	1aa4      	subs	r4, r4, r2
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006dfc:	4284      	cmp	r4, r0
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006dfe:	ea46 0602 	orr.w	r6, r6, r2
					pxBlock->pxNextFreeBlock = NULL;
 8006e02:	f04f 0300 	mov.w	r3, #0
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006e06:	603c      	str	r4, [r7, #0]
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006e08:	bf38      	it	cc
 8006e0a:	600c      	strcc	r4, [r1, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006e0c:	606e      	str	r6, [r5, #4]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006e0e:	f108 0408 	add.w	r4, r8, #8
					pxBlock->pxNextFreeBlock = NULL;
 8006e12:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
 8006e14:	f7ff fbde 	bl	80065d4 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006e18:	0763      	lsls	r3, r4, #29
 8006e1a:	d00a      	beq.n	8006e32 <pvPortMalloc+0x102>
 8006e1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e20:	f383 8811 	msr	BASEPRI, r3
 8006e24:	f3bf 8f6f 	isb	sy
 8006e28:	f3bf 8f4f 	dsb	sy
 8006e2c:	e7fe      	b.n	8006e2c <pvPortMalloc+0xfc>
void *pvReturn = NULL;
 8006e2e:	2400      	movs	r4, #0
 8006e30:	e7f0      	b.n	8006e14 <pvPortMalloc+0xe4>
}
 8006e32:	4620      	mov	r0, r4
 8006e34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006e38:	20001590 	.word	0x20001590
 8006e3c:	20001584 	.word	0x20001584
 8006e40:	2000159c 	.word	0x2000159c
 8006e44:	20004abc 	.word	0x20004abc
 8006e48:	20001594 	.word	0x20001594
 8006e4c:	20001588 	.word	0x20001588
 8006e50:	2000158c 	.word	0x2000158c

08006e54 <vPortFree>:
{
 8006e54:	b510      	push	{r4, lr}
	if( pv != NULL )
 8006e56:	4604      	mov	r4, r0
 8006e58:	b370      	cbz	r0, 8006eb8 <vPortFree+0x64>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006e5a:	4a18      	ldr	r2, [pc, #96]	@ (8006ebc <vPortFree+0x68>)
 8006e5c:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8006e60:	6812      	ldr	r2, [r2, #0]
 8006e62:	4213      	tst	r3, r2
 8006e64:	d108      	bne.n	8006e78 <vPortFree+0x24>
 8006e66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e6a:	f383 8811 	msr	BASEPRI, r3
 8006e6e:	f3bf 8f6f 	isb	sy
 8006e72:	f3bf 8f4f 	dsb	sy
 8006e76:	e7fe      	b.n	8006e76 <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006e78:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8006e7c:	b141      	cbz	r1, 8006e90 <vPortFree+0x3c>
 8006e7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e82:	f383 8811 	msr	BASEPRI, r3
 8006e86:	f3bf 8f6f 	isb	sy
 8006e8a:	f3bf 8f4f 	dsb	sy
 8006e8e:	e7fe      	b.n	8006e8e <vPortFree+0x3a>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006e90:	ea23 0302 	bic.w	r3, r3, r2
 8006e94:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 8006e98:	f7ff fafc 	bl	8006494 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006e9c:	4a08      	ldr	r2, [pc, #32]	@ (8006ec0 <vPortFree+0x6c>)
 8006e9e:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8006ea2:	6811      	ldr	r1, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006ea4:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006ea8:	440b      	add	r3, r1
 8006eaa:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006eac:	f7ff ff1a 	bl	8006ce4 <prvInsertBlockIntoFreeList>
}
 8006eb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 8006eb4:	f7ff bb8e 	b.w	80065d4 <xTaskResumeAll>
}
 8006eb8:	bd10      	pop	{r4, pc}
 8006eba:	bf00      	nop
 8006ebc:	20001584 	.word	0x20001584
 8006ec0:	2000158c 	.word	0x2000158c

08006ec4 <atof>:
 8006ec4:	2100      	movs	r1, #0
 8006ec6:	f000 bec3 	b.w	8007c50 <strtod>
	...

08006ecc <malloc>:
 8006ecc:	4b02      	ldr	r3, [pc, #8]	@ (8006ed8 <malloc+0xc>)
 8006ece:	4601      	mov	r1, r0
 8006ed0:	6818      	ldr	r0, [r3, #0]
 8006ed2:	f000 b82d 	b.w	8006f30 <_malloc_r>
 8006ed6:	bf00      	nop
 8006ed8:	20000198 	.word	0x20000198

08006edc <free>:
 8006edc:	4b02      	ldr	r3, [pc, #8]	@ (8006ee8 <free+0xc>)
 8006ede:	4601      	mov	r1, r0
 8006ee0:	6818      	ldr	r0, [r3, #0]
 8006ee2:	f003 b92d 	b.w	800a140 <_free_r>
 8006ee6:	bf00      	nop
 8006ee8:	20000198 	.word	0x20000198

08006eec <sbrk_aligned>:
 8006eec:	b570      	push	{r4, r5, r6, lr}
 8006eee:	4e0f      	ldr	r6, [pc, #60]	@ (8006f2c <sbrk_aligned+0x40>)
 8006ef0:	460c      	mov	r4, r1
 8006ef2:	6831      	ldr	r1, [r6, #0]
 8006ef4:	4605      	mov	r5, r0
 8006ef6:	b911      	cbnz	r1, 8006efe <sbrk_aligned+0x12>
 8006ef8:	f002 fa5e 	bl	80093b8 <_sbrk_r>
 8006efc:	6030      	str	r0, [r6, #0]
 8006efe:	4621      	mov	r1, r4
 8006f00:	4628      	mov	r0, r5
 8006f02:	f002 fa59 	bl	80093b8 <_sbrk_r>
 8006f06:	1c43      	adds	r3, r0, #1
 8006f08:	d103      	bne.n	8006f12 <sbrk_aligned+0x26>
 8006f0a:	f04f 34ff 	mov.w	r4, #4294967295
 8006f0e:	4620      	mov	r0, r4
 8006f10:	bd70      	pop	{r4, r5, r6, pc}
 8006f12:	1cc4      	adds	r4, r0, #3
 8006f14:	f024 0403 	bic.w	r4, r4, #3
 8006f18:	42a0      	cmp	r0, r4
 8006f1a:	d0f8      	beq.n	8006f0e <sbrk_aligned+0x22>
 8006f1c:	1a21      	subs	r1, r4, r0
 8006f1e:	4628      	mov	r0, r5
 8006f20:	f002 fa4a 	bl	80093b8 <_sbrk_r>
 8006f24:	3001      	adds	r0, #1
 8006f26:	d1f2      	bne.n	8006f0e <sbrk_aligned+0x22>
 8006f28:	e7ef      	b.n	8006f0a <sbrk_aligned+0x1e>
 8006f2a:	bf00      	nop
 8006f2c:	20004abc 	.word	0x20004abc

08006f30 <_malloc_r>:
 8006f30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006f34:	1ccd      	adds	r5, r1, #3
 8006f36:	f025 0503 	bic.w	r5, r5, #3
 8006f3a:	3508      	adds	r5, #8
 8006f3c:	2d0c      	cmp	r5, #12
 8006f3e:	bf38      	it	cc
 8006f40:	250c      	movcc	r5, #12
 8006f42:	2d00      	cmp	r5, #0
 8006f44:	4606      	mov	r6, r0
 8006f46:	db01      	blt.n	8006f4c <_malloc_r+0x1c>
 8006f48:	42a9      	cmp	r1, r5
 8006f4a:	d904      	bls.n	8006f56 <_malloc_r+0x26>
 8006f4c:	230c      	movs	r3, #12
 8006f4e:	6033      	str	r3, [r6, #0]
 8006f50:	2000      	movs	r0, #0
 8006f52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006f56:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800702c <_malloc_r+0xfc>
 8006f5a:	f000 f869 	bl	8007030 <__malloc_lock>
 8006f5e:	f8d8 3000 	ldr.w	r3, [r8]
 8006f62:	461c      	mov	r4, r3
 8006f64:	bb44      	cbnz	r4, 8006fb8 <_malloc_r+0x88>
 8006f66:	4629      	mov	r1, r5
 8006f68:	4630      	mov	r0, r6
 8006f6a:	f7ff ffbf 	bl	8006eec <sbrk_aligned>
 8006f6e:	1c43      	adds	r3, r0, #1
 8006f70:	4604      	mov	r4, r0
 8006f72:	d158      	bne.n	8007026 <_malloc_r+0xf6>
 8006f74:	f8d8 4000 	ldr.w	r4, [r8]
 8006f78:	4627      	mov	r7, r4
 8006f7a:	2f00      	cmp	r7, #0
 8006f7c:	d143      	bne.n	8007006 <_malloc_r+0xd6>
 8006f7e:	2c00      	cmp	r4, #0
 8006f80:	d04b      	beq.n	800701a <_malloc_r+0xea>
 8006f82:	6823      	ldr	r3, [r4, #0]
 8006f84:	4639      	mov	r1, r7
 8006f86:	4630      	mov	r0, r6
 8006f88:	eb04 0903 	add.w	r9, r4, r3
 8006f8c:	f002 fa14 	bl	80093b8 <_sbrk_r>
 8006f90:	4581      	cmp	r9, r0
 8006f92:	d142      	bne.n	800701a <_malloc_r+0xea>
 8006f94:	6821      	ldr	r1, [r4, #0]
 8006f96:	1a6d      	subs	r5, r5, r1
 8006f98:	4629      	mov	r1, r5
 8006f9a:	4630      	mov	r0, r6
 8006f9c:	f7ff ffa6 	bl	8006eec <sbrk_aligned>
 8006fa0:	3001      	adds	r0, #1
 8006fa2:	d03a      	beq.n	800701a <_malloc_r+0xea>
 8006fa4:	6823      	ldr	r3, [r4, #0]
 8006fa6:	442b      	add	r3, r5
 8006fa8:	6023      	str	r3, [r4, #0]
 8006faa:	f8d8 3000 	ldr.w	r3, [r8]
 8006fae:	685a      	ldr	r2, [r3, #4]
 8006fb0:	bb62      	cbnz	r2, 800700c <_malloc_r+0xdc>
 8006fb2:	f8c8 7000 	str.w	r7, [r8]
 8006fb6:	e00f      	b.n	8006fd8 <_malloc_r+0xa8>
 8006fb8:	6822      	ldr	r2, [r4, #0]
 8006fba:	1b52      	subs	r2, r2, r5
 8006fbc:	d420      	bmi.n	8007000 <_malloc_r+0xd0>
 8006fbe:	2a0b      	cmp	r2, #11
 8006fc0:	d917      	bls.n	8006ff2 <_malloc_r+0xc2>
 8006fc2:	1961      	adds	r1, r4, r5
 8006fc4:	42a3      	cmp	r3, r4
 8006fc6:	6025      	str	r5, [r4, #0]
 8006fc8:	bf18      	it	ne
 8006fca:	6059      	strne	r1, [r3, #4]
 8006fcc:	6863      	ldr	r3, [r4, #4]
 8006fce:	bf08      	it	eq
 8006fd0:	f8c8 1000 	streq.w	r1, [r8]
 8006fd4:	5162      	str	r2, [r4, r5]
 8006fd6:	604b      	str	r3, [r1, #4]
 8006fd8:	4630      	mov	r0, r6
 8006fda:	f000 f82f 	bl	800703c <__malloc_unlock>
 8006fde:	f104 000b 	add.w	r0, r4, #11
 8006fe2:	1d23      	adds	r3, r4, #4
 8006fe4:	f020 0007 	bic.w	r0, r0, #7
 8006fe8:	1ac2      	subs	r2, r0, r3
 8006fea:	bf1c      	itt	ne
 8006fec:	1a1b      	subne	r3, r3, r0
 8006fee:	50a3      	strne	r3, [r4, r2]
 8006ff0:	e7af      	b.n	8006f52 <_malloc_r+0x22>
 8006ff2:	6862      	ldr	r2, [r4, #4]
 8006ff4:	42a3      	cmp	r3, r4
 8006ff6:	bf0c      	ite	eq
 8006ff8:	f8c8 2000 	streq.w	r2, [r8]
 8006ffc:	605a      	strne	r2, [r3, #4]
 8006ffe:	e7eb      	b.n	8006fd8 <_malloc_r+0xa8>
 8007000:	4623      	mov	r3, r4
 8007002:	6864      	ldr	r4, [r4, #4]
 8007004:	e7ae      	b.n	8006f64 <_malloc_r+0x34>
 8007006:	463c      	mov	r4, r7
 8007008:	687f      	ldr	r7, [r7, #4]
 800700a:	e7b6      	b.n	8006f7a <_malloc_r+0x4a>
 800700c:	461a      	mov	r2, r3
 800700e:	685b      	ldr	r3, [r3, #4]
 8007010:	42a3      	cmp	r3, r4
 8007012:	d1fb      	bne.n	800700c <_malloc_r+0xdc>
 8007014:	2300      	movs	r3, #0
 8007016:	6053      	str	r3, [r2, #4]
 8007018:	e7de      	b.n	8006fd8 <_malloc_r+0xa8>
 800701a:	230c      	movs	r3, #12
 800701c:	6033      	str	r3, [r6, #0]
 800701e:	4630      	mov	r0, r6
 8007020:	f000 f80c 	bl	800703c <__malloc_unlock>
 8007024:	e794      	b.n	8006f50 <_malloc_r+0x20>
 8007026:	6005      	str	r5, [r0, #0]
 8007028:	e7d6      	b.n	8006fd8 <_malloc_r+0xa8>
 800702a:	bf00      	nop
 800702c:	20004ac0 	.word	0x20004ac0

08007030 <__malloc_lock>:
 8007030:	4801      	ldr	r0, [pc, #4]	@ (8007038 <__malloc_lock+0x8>)
 8007032:	f002 ba0f 	b.w	8009454 <__retarget_lock_acquire_recursive>
 8007036:	bf00      	nop
 8007038:	20004c2a 	.word	0x20004c2a

0800703c <__malloc_unlock>:
 800703c:	4801      	ldr	r0, [pc, #4]	@ (8007044 <__malloc_unlock+0x8>)
 800703e:	f002 ba0b 	b.w	8009458 <__retarget_lock_release_recursive>
 8007042:	bf00      	nop
 8007044:	20004c2a 	.word	0x20004c2a

08007048 <sulp>:
 8007048:	b570      	push	{r4, r5, r6, lr}
 800704a:	4604      	mov	r4, r0
 800704c:	460d      	mov	r5, r1
 800704e:	ec45 4b10 	vmov	d0, r4, r5
 8007052:	4616      	mov	r6, r2
 8007054:	f003 ffc2 	bl	800afdc <__ulp>
 8007058:	ec51 0b10 	vmov	r0, r1, d0
 800705c:	b17e      	cbz	r6, 800707e <sulp+0x36>
 800705e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8007062:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8007066:	2b00      	cmp	r3, #0
 8007068:	dd09      	ble.n	800707e <sulp+0x36>
 800706a:	051b      	lsls	r3, r3, #20
 800706c:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8007070:	2400      	movs	r4, #0
 8007072:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8007076:	4622      	mov	r2, r4
 8007078:	462b      	mov	r3, r5
 800707a:	f7f9 facd 	bl	8000618 <__aeabi_dmul>
 800707e:	ec41 0b10 	vmov	d0, r0, r1
 8007082:	bd70      	pop	{r4, r5, r6, pc}
 8007084:	0000      	movs	r0, r0
	...

08007088 <_strtod_l>:
 8007088:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800708c:	b09f      	sub	sp, #124	@ 0x7c
 800708e:	460c      	mov	r4, r1
 8007090:	9217      	str	r2, [sp, #92]	@ 0x5c
 8007092:	2200      	movs	r2, #0
 8007094:	921a      	str	r2, [sp, #104]	@ 0x68
 8007096:	9005      	str	r0, [sp, #20]
 8007098:	f04f 0a00 	mov.w	sl, #0
 800709c:	f04f 0b00 	mov.w	fp, #0
 80070a0:	460a      	mov	r2, r1
 80070a2:	9219      	str	r2, [sp, #100]	@ 0x64
 80070a4:	7811      	ldrb	r1, [r2, #0]
 80070a6:	292b      	cmp	r1, #43	@ 0x2b
 80070a8:	d04a      	beq.n	8007140 <_strtod_l+0xb8>
 80070aa:	d838      	bhi.n	800711e <_strtod_l+0x96>
 80070ac:	290d      	cmp	r1, #13
 80070ae:	d832      	bhi.n	8007116 <_strtod_l+0x8e>
 80070b0:	2908      	cmp	r1, #8
 80070b2:	d832      	bhi.n	800711a <_strtod_l+0x92>
 80070b4:	2900      	cmp	r1, #0
 80070b6:	d03b      	beq.n	8007130 <_strtod_l+0xa8>
 80070b8:	2200      	movs	r2, #0
 80070ba:	920b      	str	r2, [sp, #44]	@ 0x2c
 80070bc:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 80070be:	782a      	ldrb	r2, [r5, #0]
 80070c0:	2a30      	cmp	r2, #48	@ 0x30
 80070c2:	f040 80b3 	bne.w	800722c <_strtod_l+0x1a4>
 80070c6:	786a      	ldrb	r2, [r5, #1]
 80070c8:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80070cc:	2a58      	cmp	r2, #88	@ 0x58
 80070ce:	d16e      	bne.n	80071ae <_strtod_l+0x126>
 80070d0:	9302      	str	r3, [sp, #8]
 80070d2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80070d4:	9301      	str	r3, [sp, #4]
 80070d6:	ab1a      	add	r3, sp, #104	@ 0x68
 80070d8:	9300      	str	r3, [sp, #0]
 80070da:	4a8e      	ldr	r2, [pc, #568]	@ (8007314 <_strtod_l+0x28c>)
 80070dc:	9805      	ldr	r0, [sp, #20]
 80070de:	ab1b      	add	r3, sp, #108	@ 0x6c
 80070e0:	a919      	add	r1, sp, #100	@ 0x64
 80070e2:	f003 f8df 	bl	800a2a4 <__gethex>
 80070e6:	f010 060f 	ands.w	r6, r0, #15
 80070ea:	4604      	mov	r4, r0
 80070ec:	d005      	beq.n	80070fa <_strtod_l+0x72>
 80070ee:	2e06      	cmp	r6, #6
 80070f0:	d128      	bne.n	8007144 <_strtod_l+0xbc>
 80070f2:	3501      	adds	r5, #1
 80070f4:	2300      	movs	r3, #0
 80070f6:	9519      	str	r5, [sp, #100]	@ 0x64
 80070f8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80070fa:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	f040 858e 	bne.w	8007c1e <_strtod_l+0xb96>
 8007102:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007104:	b1cb      	cbz	r3, 800713a <_strtod_l+0xb2>
 8007106:	4652      	mov	r2, sl
 8007108:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800710c:	ec43 2b10 	vmov	d0, r2, r3
 8007110:	b01f      	add	sp, #124	@ 0x7c
 8007112:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007116:	2920      	cmp	r1, #32
 8007118:	d1ce      	bne.n	80070b8 <_strtod_l+0x30>
 800711a:	3201      	adds	r2, #1
 800711c:	e7c1      	b.n	80070a2 <_strtod_l+0x1a>
 800711e:	292d      	cmp	r1, #45	@ 0x2d
 8007120:	d1ca      	bne.n	80070b8 <_strtod_l+0x30>
 8007122:	2101      	movs	r1, #1
 8007124:	910b      	str	r1, [sp, #44]	@ 0x2c
 8007126:	1c51      	adds	r1, r2, #1
 8007128:	9119      	str	r1, [sp, #100]	@ 0x64
 800712a:	7852      	ldrb	r2, [r2, #1]
 800712c:	2a00      	cmp	r2, #0
 800712e:	d1c5      	bne.n	80070bc <_strtod_l+0x34>
 8007130:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8007132:	9419      	str	r4, [sp, #100]	@ 0x64
 8007134:	2b00      	cmp	r3, #0
 8007136:	f040 8570 	bne.w	8007c1a <_strtod_l+0xb92>
 800713a:	4652      	mov	r2, sl
 800713c:	465b      	mov	r3, fp
 800713e:	e7e5      	b.n	800710c <_strtod_l+0x84>
 8007140:	2100      	movs	r1, #0
 8007142:	e7ef      	b.n	8007124 <_strtod_l+0x9c>
 8007144:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8007146:	b13a      	cbz	r2, 8007158 <_strtod_l+0xd0>
 8007148:	2135      	movs	r1, #53	@ 0x35
 800714a:	a81c      	add	r0, sp, #112	@ 0x70
 800714c:	f004 f840 	bl	800b1d0 <__copybits>
 8007150:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007152:	9805      	ldr	r0, [sp, #20]
 8007154:	f003 fc0e 	bl	800a974 <_Bfree>
 8007158:	3e01      	subs	r6, #1
 800715a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800715c:	2e04      	cmp	r6, #4
 800715e:	d806      	bhi.n	800716e <_strtod_l+0xe6>
 8007160:	e8df f006 	tbb	[pc, r6]
 8007164:	201d0314 	.word	0x201d0314
 8007168:	14          	.byte	0x14
 8007169:	00          	.byte	0x00
 800716a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800716e:	05e1      	lsls	r1, r4, #23
 8007170:	bf48      	it	mi
 8007172:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8007176:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800717a:	0d1b      	lsrs	r3, r3, #20
 800717c:	051b      	lsls	r3, r3, #20
 800717e:	2b00      	cmp	r3, #0
 8007180:	d1bb      	bne.n	80070fa <_strtod_l+0x72>
 8007182:	f002 f93b 	bl	80093fc <__errno>
 8007186:	2322      	movs	r3, #34	@ 0x22
 8007188:	6003      	str	r3, [r0, #0]
 800718a:	e7b6      	b.n	80070fa <_strtod_l+0x72>
 800718c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8007190:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8007194:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8007198:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800719c:	e7e7      	b.n	800716e <_strtod_l+0xe6>
 800719e:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800731c <_strtod_l+0x294>
 80071a2:	e7e4      	b.n	800716e <_strtod_l+0xe6>
 80071a4:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 80071a8:	f04f 3aff 	mov.w	sl, #4294967295
 80071ac:	e7df      	b.n	800716e <_strtod_l+0xe6>
 80071ae:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80071b0:	1c5a      	adds	r2, r3, #1
 80071b2:	9219      	str	r2, [sp, #100]	@ 0x64
 80071b4:	785b      	ldrb	r3, [r3, #1]
 80071b6:	2b30      	cmp	r3, #48	@ 0x30
 80071b8:	d0f9      	beq.n	80071ae <_strtod_l+0x126>
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d09d      	beq.n	80070fa <_strtod_l+0x72>
 80071be:	2301      	movs	r3, #1
 80071c0:	9309      	str	r3, [sp, #36]	@ 0x24
 80071c2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80071c4:	930c      	str	r3, [sp, #48]	@ 0x30
 80071c6:	2300      	movs	r3, #0
 80071c8:	9308      	str	r3, [sp, #32]
 80071ca:	930a      	str	r3, [sp, #40]	@ 0x28
 80071cc:	461f      	mov	r7, r3
 80071ce:	220a      	movs	r2, #10
 80071d0:	9819      	ldr	r0, [sp, #100]	@ 0x64
 80071d2:	7805      	ldrb	r5, [r0, #0]
 80071d4:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 80071d8:	b2d9      	uxtb	r1, r3
 80071da:	2909      	cmp	r1, #9
 80071dc:	d928      	bls.n	8007230 <_strtod_l+0x1a8>
 80071de:	494e      	ldr	r1, [pc, #312]	@ (8007318 <_strtod_l+0x290>)
 80071e0:	2201      	movs	r2, #1
 80071e2:	f001 fb26 	bl	8008832 <strncmp>
 80071e6:	2800      	cmp	r0, #0
 80071e8:	d032      	beq.n	8007250 <_strtod_l+0x1c8>
 80071ea:	2000      	movs	r0, #0
 80071ec:	462a      	mov	r2, r5
 80071ee:	4681      	mov	r9, r0
 80071f0:	463d      	mov	r5, r7
 80071f2:	4603      	mov	r3, r0
 80071f4:	2a65      	cmp	r2, #101	@ 0x65
 80071f6:	d001      	beq.n	80071fc <_strtod_l+0x174>
 80071f8:	2a45      	cmp	r2, #69	@ 0x45
 80071fa:	d114      	bne.n	8007226 <_strtod_l+0x19e>
 80071fc:	b91d      	cbnz	r5, 8007206 <_strtod_l+0x17e>
 80071fe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007200:	4302      	orrs	r2, r0
 8007202:	d095      	beq.n	8007130 <_strtod_l+0xa8>
 8007204:	2500      	movs	r5, #0
 8007206:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8007208:	1c62      	adds	r2, r4, #1
 800720a:	9219      	str	r2, [sp, #100]	@ 0x64
 800720c:	7862      	ldrb	r2, [r4, #1]
 800720e:	2a2b      	cmp	r2, #43	@ 0x2b
 8007210:	d077      	beq.n	8007302 <_strtod_l+0x27a>
 8007212:	2a2d      	cmp	r2, #45	@ 0x2d
 8007214:	d07b      	beq.n	800730e <_strtod_l+0x286>
 8007216:	f04f 0c00 	mov.w	ip, #0
 800721a:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800721e:	2909      	cmp	r1, #9
 8007220:	f240 8082 	bls.w	8007328 <_strtod_l+0x2a0>
 8007224:	9419      	str	r4, [sp, #100]	@ 0x64
 8007226:	f04f 0800 	mov.w	r8, #0
 800722a:	e0a2      	b.n	8007372 <_strtod_l+0x2ea>
 800722c:	2300      	movs	r3, #0
 800722e:	e7c7      	b.n	80071c0 <_strtod_l+0x138>
 8007230:	2f08      	cmp	r7, #8
 8007232:	bfd5      	itete	le
 8007234:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8007236:	9908      	ldrgt	r1, [sp, #32]
 8007238:	fb02 3301 	mlale	r3, r2, r1, r3
 800723c:	fb02 3301 	mlagt	r3, r2, r1, r3
 8007240:	f100 0001 	add.w	r0, r0, #1
 8007244:	bfd4      	ite	le
 8007246:	930a      	strle	r3, [sp, #40]	@ 0x28
 8007248:	9308      	strgt	r3, [sp, #32]
 800724a:	3701      	adds	r7, #1
 800724c:	9019      	str	r0, [sp, #100]	@ 0x64
 800724e:	e7bf      	b.n	80071d0 <_strtod_l+0x148>
 8007250:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007252:	1c5a      	adds	r2, r3, #1
 8007254:	9219      	str	r2, [sp, #100]	@ 0x64
 8007256:	785a      	ldrb	r2, [r3, #1]
 8007258:	b37f      	cbz	r7, 80072ba <_strtod_l+0x232>
 800725a:	4681      	mov	r9, r0
 800725c:	463d      	mov	r5, r7
 800725e:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8007262:	2b09      	cmp	r3, #9
 8007264:	d912      	bls.n	800728c <_strtod_l+0x204>
 8007266:	2301      	movs	r3, #1
 8007268:	e7c4      	b.n	80071f4 <_strtod_l+0x16c>
 800726a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800726c:	1c5a      	adds	r2, r3, #1
 800726e:	9219      	str	r2, [sp, #100]	@ 0x64
 8007270:	785a      	ldrb	r2, [r3, #1]
 8007272:	3001      	adds	r0, #1
 8007274:	2a30      	cmp	r2, #48	@ 0x30
 8007276:	d0f8      	beq.n	800726a <_strtod_l+0x1e2>
 8007278:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800727c:	2b08      	cmp	r3, #8
 800727e:	f200 84d3 	bhi.w	8007c28 <_strtod_l+0xba0>
 8007282:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007284:	930c      	str	r3, [sp, #48]	@ 0x30
 8007286:	4681      	mov	r9, r0
 8007288:	2000      	movs	r0, #0
 800728a:	4605      	mov	r5, r0
 800728c:	3a30      	subs	r2, #48	@ 0x30
 800728e:	f100 0301 	add.w	r3, r0, #1
 8007292:	d02a      	beq.n	80072ea <_strtod_l+0x262>
 8007294:	4499      	add	r9, r3
 8007296:	eb00 0c05 	add.w	ip, r0, r5
 800729a:	462b      	mov	r3, r5
 800729c:	210a      	movs	r1, #10
 800729e:	4563      	cmp	r3, ip
 80072a0:	d10d      	bne.n	80072be <_strtod_l+0x236>
 80072a2:	1c69      	adds	r1, r5, #1
 80072a4:	4401      	add	r1, r0
 80072a6:	4428      	add	r0, r5
 80072a8:	2808      	cmp	r0, #8
 80072aa:	dc16      	bgt.n	80072da <_strtod_l+0x252>
 80072ac:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80072ae:	230a      	movs	r3, #10
 80072b0:	fb03 2300 	mla	r3, r3, r0, r2
 80072b4:	930a      	str	r3, [sp, #40]	@ 0x28
 80072b6:	2300      	movs	r3, #0
 80072b8:	e018      	b.n	80072ec <_strtod_l+0x264>
 80072ba:	4638      	mov	r0, r7
 80072bc:	e7da      	b.n	8007274 <_strtod_l+0x1ec>
 80072be:	2b08      	cmp	r3, #8
 80072c0:	f103 0301 	add.w	r3, r3, #1
 80072c4:	dc03      	bgt.n	80072ce <_strtod_l+0x246>
 80072c6:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 80072c8:	434e      	muls	r6, r1
 80072ca:	960a      	str	r6, [sp, #40]	@ 0x28
 80072cc:	e7e7      	b.n	800729e <_strtod_l+0x216>
 80072ce:	2b10      	cmp	r3, #16
 80072d0:	bfde      	ittt	le
 80072d2:	9e08      	ldrle	r6, [sp, #32]
 80072d4:	434e      	mulle	r6, r1
 80072d6:	9608      	strle	r6, [sp, #32]
 80072d8:	e7e1      	b.n	800729e <_strtod_l+0x216>
 80072da:	280f      	cmp	r0, #15
 80072dc:	dceb      	bgt.n	80072b6 <_strtod_l+0x22e>
 80072de:	9808      	ldr	r0, [sp, #32]
 80072e0:	230a      	movs	r3, #10
 80072e2:	fb03 2300 	mla	r3, r3, r0, r2
 80072e6:	9308      	str	r3, [sp, #32]
 80072e8:	e7e5      	b.n	80072b6 <_strtod_l+0x22e>
 80072ea:	4629      	mov	r1, r5
 80072ec:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80072ee:	1c50      	adds	r0, r2, #1
 80072f0:	9019      	str	r0, [sp, #100]	@ 0x64
 80072f2:	7852      	ldrb	r2, [r2, #1]
 80072f4:	4618      	mov	r0, r3
 80072f6:	460d      	mov	r5, r1
 80072f8:	e7b1      	b.n	800725e <_strtod_l+0x1d6>
 80072fa:	f04f 0900 	mov.w	r9, #0
 80072fe:	2301      	movs	r3, #1
 8007300:	e77d      	b.n	80071fe <_strtod_l+0x176>
 8007302:	f04f 0c00 	mov.w	ip, #0
 8007306:	1ca2      	adds	r2, r4, #2
 8007308:	9219      	str	r2, [sp, #100]	@ 0x64
 800730a:	78a2      	ldrb	r2, [r4, #2]
 800730c:	e785      	b.n	800721a <_strtod_l+0x192>
 800730e:	f04f 0c01 	mov.w	ip, #1
 8007312:	e7f8      	b.n	8007306 <_strtod_l+0x27e>
 8007314:	0800d418 	.word	0x0800d418
 8007318:	0800d402 	.word	0x0800d402
 800731c:	7ff00000 	.word	0x7ff00000
 8007320:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007322:	1c51      	adds	r1, r2, #1
 8007324:	9119      	str	r1, [sp, #100]	@ 0x64
 8007326:	7852      	ldrb	r2, [r2, #1]
 8007328:	2a30      	cmp	r2, #48	@ 0x30
 800732a:	d0f9      	beq.n	8007320 <_strtod_l+0x298>
 800732c:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8007330:	2908      	cmp	r1, #8
 8007332:	f63f af78 	bhi.w	8007226 <_strtod_l+0x19e>
 8007336:	3a30      	subs	r2, #48	@ 0x30
 8007338:	920e      	str	r2, [sp, #56]	@ 0x38
 800733a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800733c:	920f      	str	r2, [sp, #60]	@ 0x3c
 800733e:	f04f 080a 	mov.w	r8, #10
 8007342:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007344:	1c56      	adds	r6, r2, #1
 8007346:	9619      	str	r6, [sp, #100]	@ 0x64
 8007348:	7852      	ldrb	r2, [r2, #1]
 800734a:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800734e:	f1be 0f09 	cmp.w	lr, #9
 8007352:	d939      	bls.n	80073c8 <_strtod_l+0x340>
 8007354:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8007356:	1a76      	subs	r6, r6, r1
 8007358:	2e08      	cmp	r6, #8
 800735a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800735e:	dc03      	bgt.n	8007368 <_strtod_l+0x2e0>
 8007360:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8007362:	4588      	cmp	r8, r1
 8007364:	bfa8      	it	ge
 8007366:	4688      	movge	r8, r1
 8007368:	f1bc 0f00 	cmp.w	ip, #0
 800736c:	d001      	beq.n	8007372 <_strtod_l+0x2ea>
 800736e:	f1c8 0800 	rsb	r8, r8, #0
 8007372:	2d00      	cmp	r5, #0
 8007374:	d14e      	bne.n	8007414 <_strtod_l+0x38c>
 8007376:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007378:	4308      	orrs	r0, r1
 800737a:	f47f aebe 	bne.w	80070fa <_strtod_l+0x72>
 800737e:	2b00      	cmp	r3, #0
 8007380:	f47f aed6 	bne.w	8007130 <_strtod_l+0xa8>
 8007384:	2a69      	cmp	r2, #105	@ 0x69
 8007386:	d028      	beq.n	80073da <_strtod_l+0x352>
 8007388:	dc25      	bgt.n	80073d6 <_strtod_l+0x34e>
 800738a:	2a49      	cmp	r2, #73	@ 0x49
 800738c:	d025      	beq.n	80073da <_strtod_l+0x352>
 800738e:	2a4e      	cmp	r2, #78	@ 0x4e
 8007390:	f47f aece 	bne.w	8007130 <_strtod_l+0xa8>
 8007394:	499b      	ldr	r1, [pc, #620]	@ (8007604 <_strtod_l+0x57c>)
 8007396:	a819      	add	r0, sp, #100	@ 0x64
 8007398:	f003 f9a6 	bl	800a6e8 <__match>
 800739c:	2800      	cmp	r0, #0
 800739e:	f43f aec7 	beq.w	8007130 <_strtod_l+0xa8>
 80073a2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80073a4:	781b      	ldrb	r3, [r3, #0]
 80073a6:	2b28      	cmp	r3, #40	@ 0x28
 80073a8:	d12e      	bne.n	8007408 <_strtod_l+0x380>
 80073aa:	4997      	ldr	r1, [pc, #604]	@ (8007608 <_strtod_l+0x580>)
 80073ac:	aa1c      	add	r2, sp, #112	@ 0x70
 80073ae:	a819      	add	r0, sp, #100	@ 0x64
 80073b0:	f003 f9ae 	bl	800a710 <__hexnan>
 80073b4:	2805      	cmp	r0, #5
 80073b6:	d127      	bne.n	8007408 <_strtod_l+0x380>
 80073b8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80073ba:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 80073be:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 80073c2:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 80073c6:	e698      	b.n	80070fa <_strtod_l+0x72>
 80073c8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80073ca:	fb08 2101 	mla	r1, r8, r1, r2
 80073ce:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 80073d2:	920e      	str	r2, [sp, #56]	@ 0x38
 80073d4:	e7b5      	b.n	8007342 <_strtod_l+0x2ba>
 80073d6:	2a6e      	cmp	r2, #110	@ 0x6e
 80073d8:	e7da      	b.n	8007390 <_strtod_l+0x308>
 80073da:	498c      	ldr	r1, [pc, #560]	@ (800760c <_strtod_l+0x584>)
 80073dc:	a819      	add	r0, sp, #100	@ 0x64
 80073de:	f003 f983 	bl	800a6e8 <__match>
 80073e2:	2800      	cmp	r0, #0
 80073e4:	f43f aea4 	beq.w	8007130 <_strtod_l+0xa8>
 80073e8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80073ea:	4989      	ldr	r1, [pc, #548]	@ (8007610 <_strtod_l+0x588>)
 80073ec:	3b01      	subs	r3, #1
 80073ee:	a819      	add	r0, sp, #100	@ 0x64
 80073f0:	9319      	str	r3, [sp, #100]	@ 0x64
 80073f2:	f003 f979 	bl	800a6e8 <__match>
 80073f6:	b910      	cbnz	r0, 80073fe <_strtod_l+0x376>
 80073f8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80073fa:	3301      	adds	r3, #1
 80073fc:	9319      	str	r3, [sp, #100]	@ 0x64
 80073fe:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8007620 <_strtod_l+0x598>
 8007402:	f04f 0a00 	mov.w	sl, #0
 8007406:	e678      	b.n	80070fa <_strtod_l+0x72>
 8007408:	4882      	ldr	r0, [pc, #520]	@ (8007614 <_strtod_l+0x58c>)
 800740a:	f002 f83d 	bl	8009488 <nan>
 800740e:	ec5b ab10 	vmov	sl, fp, d0
 8007412:	e672      	b.n	80070fa <_strtod_l+0x72>
 8007414:	eba8 0309 	sub.w	r3, r8, r9
 8007418:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800741a:	9309      	str	r3, [sp, #36]	@ 0x24
 800741c:	2f00      	cmp	r7, #0
 800741e:	bf08      	it	eq
 8007420:	462f      	moveq	r7, r5
 8007422:	2d10      	cmp	r5, #16
 8007424:	462c      	mov	r4, r5
 8007426:	bfa8      	it	ge
 8007428:	2410      	movge	r4, #16
 800742a:	f7f9 f87b 	bl	8000524 <__aeabi_ui2d>
 800742e:	2d09      	cmp	r5, #9
 8007430:	4682      	mov	sl, r0
 8007432:	468b      	mov	fp, r1
 8007434:	dc13      	bgt.n	800745e <_strtod_l+0x3d6>
 8007436:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007438:	2b00      	cmp	r3, #0
 800743a:	f43f ae5e 	beq.w	80070fa <_strtod_l+0x72>
 800743e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007440:	dd78      	ble.n	8007534 <_strtod_l+0x4ac>
 8007442:	2b16      	cmp	r3, #22
 8007444:	dc5f      	bgt.n	8007506 <_strtod_l+0x47e>
 8007446:	4974      	ldr	r1, [pc, #464]	@ (8007618 <_strtod_l+0x590>)
 8007448:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800744c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007450:	4652      	mov	r2, sl
 8007452:	465b      	mov	r3, fp
 8007454:	f7f9 f8e0 	bl	8000618 <__aeabi_dmul>
 8007458:	4682      	mov	sl, r0
 800745a:	468b      	mov	fp, r1
 800745c:	e64d      	b.n	80070fa <_strtod_l+0x72>
 800745e:	4b6e      	ldr	r3, [pc, #440]	@ (8007618 <_strtod_l+0x590>)
 8007460:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007464:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8007468:	f7f9 f8d6 	bl	8000618 <__aeabi_dmul>
 800746c:	4682      	mov	sl, r0
 800746e:	9808      	ldr	r0, [sp, #32]
 8007470:	468b      	mov	fp, r1
 8007472:	f7f9 f857 	bl	8000524 <__aeabi_ui2d>
 8007476:	4602      	mov	r2, r0
 8007478:	460b      	mov	r3, r1
 800747a:	4650      	mov	r0, sl
 800747c:	4659      	mov	r1, fp
 800747e:	f7f8 ff15 	bl	80002ac <__adddf3>
 8007482:	2d0f      	cmp	r5, #15
 8007484:	4682      	mov	sl, r0
 8007486:	468b      	mov	fp, r1
 8007488:	ddd5      	ble.n	8007436 <_strtod_l+0x3ae>
 800748a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800748c:	1b2c      	subs	r4, r5, r4
 800748e:	441c      	add	r4, r3
 8007490:	2c00      	cmp	r4, #0
 8007492:	f340 8096 	ble.w	80075c2 <_strtod_l+0x53a>
 8007496:	f014 030f 	ands.w	r3, r4, #15
 800749a:	d00a      	beq.n	80074b2 <_strtod_l+0x42a>
 800749c:	495e      	ldr	r1, [pc, #376]	@ (8007618 <_strtod_l+0x590>)
 800749e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80074a2:	4652      	mov	r2, sl
 80074a4:	465b      	mov	r3, fp
 80074a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80074aa:	f7f9 f8b5 	bl	8000618 <__aeabi_dmul>
 80074ae:	4682      	mov	sl, r0
 80074b0:	468b      	mov	fp, r1
 80074b2:	f034 040f 	bics.w	r4, r4, #15
 80074b6:	d073      	beq.n	80075a0 <_strtod_l+0x518>
 80074b8:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 80074bc:	dd48      	ble.n	8007550 <_strtod_l+0x4c8>
 80074be:	2400      	movs	r4, #0
 80074c0:	46a0      	mov	r8, r4
 80074c2:	940a      	str	r4, [sp, #40]	@ 0x28
 80074c4:	46a1      	mov	r9, r4
 80074c6:	9a05      	ldr	r2, [sp, #20]
 80074c8:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8007620 <_strtod_l+0x598>
 80074cc:	2322      	movs	r3, #34	@ 0x22
 80074ce:	6013      	str	r3, [r2, #0]
 80074d0:	f04f 0a00 	mov.w	sl, #0
 80074d4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	f43f ae0f 	beq.w	80070fa <_strtod_l+0x72>
 80074dc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80074de:	9805      	ldr	r0, [sp, #20]
 80074e0:	f003 fa48 	bl	800a974 <_Bfree>
 80074e4:	9805      	ldr	r0, [sp, #20]
 80074e6:	4649      	mov	r1, r9
 80074e8:	f003 fa44 	bl	800a974 <_Bfree>
 80074ec:	9805      	ldr	r0, [sp, #20]
 80074ee:	4641      	mov	r1, r8
 80074f0:	f003 fa40 	bl	800a974 <_Bfree>
 80074f4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80074f6:	9805      	ldr	r0, [sp, #20]
 80074f8:	f003 fa3c 	bl	800a974 <_Bfree>
 80074fc:	9805      	ldr	r0, [sp, #20]
 80074fe:	4621      	mov	r1, r4
 8007500:	f003 fa38 	bl	800a974 <_Bfree>
 8007504:	e5f9      	b.n	80070fa <_strtod_l+0x72>
 8007506:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007508:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800750c:	4293      	cmp	r3, r2
 800750e:	dbbc      	blt.n	800748a <_strtod_l+0x402>
 8007510:	4c41      	ldr	r4, [pc, #260]	@ (8007618 <_strtod_l+0x590>)
 8007512:	f1c5 050f 	rsb	r5, r5, #15
 8007516:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800751a:	4652      	mov	r2, sl
 800751c:	465b      	mov	r3, fp
 800751e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007522:	f7f9 f879 	bl	8000618 <__aeabi_dmul>
 8007526:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007528:	1b5d      	subs	r5, r3, r5
 800752a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800752e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8007532:	e78f      	b.n	8007454 <_strtod_l+0x3cc>
 8007534:	3316      	adds	r3, #22
 8007536:	dba8      	blt.n	800748a <_strtod_l+0x402>
 8007538:	4b37      	ldr	r3, [pc, #220]	@ (8007618 <_strtod_l+0x590>)
 800753a:	eba9 0808 	sub.w	r8, r9, r8
 800753e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8007542:	e9d8 2300 	ldrd	r2, r3, [r8]
 8007546:	4650      	mov	r0, sl
 8007548:	4659      	mov	r1, fp
 800754a:	f7f9 f98f 	bl	800086c <__aeabi_ddiv>
 800754e:	e783      	b.n	8007458 <_strtod_l+0x3d0>
 8007550:	4b32      	ldr	r3, [pc, #200]	@ (800761c <_strtod_l+0x594>)
 8007552:	9308      	str	r3, [sp, #32]
 8007554:	2300      	movs	r3, #0
 8007556:	1124      	asrs	r4, r4, #4
 8007558:	4650      	mov	r0, sl
 800755a:	4659      	mov	r1, fp
 800755c:	461e      	mov	r6, r3
 800755e:	2c01      	cmp	r4, #1
 8007560:	dc21      	bgt.n	80075a6 <_strtod_l+0x51e>
 8007562:	b10b      	cbz	r3, 8007568 <_strtod_l+0x4e0>
 8007564:	4682      	mov	sl, r0
 8007566:	468b      	mov	fp, r1
 8007568:	492c      	ldr	r1, [pc, #176]	@ (800761c <_strtod_l+0x594>)
 800756a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800756e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8007572:	4652      	mov	r2, sl
 8007574:	465b      	mov	r3, fp
 8007576:	e9d1 0100 	ldrd	r0, r1, [r1]
 800757a:	f7f9 f84d 	bl	8000618 <__aeabi_dmul>
 800757e:	4b28      	ldr	r3, [pc, #160]	@ (8007620 <_strtod_l+0x598>)
 8007580:	460a      	mov	r2, r1
 8007582:	400b      	ands	r3, r1
 8007584:	4927      	ldr	r1, [pc, #156]	@ (8007624 <_strtod_l+0x59c>)
 8007586:	428b      	cmp	r3, r1
 8007588:	4682      	mov	sl, r0
 800758a:	d898      	bhi.n	80074be <_strtod_l+0x436>
 800758c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8007590:	428b      	cmp	r3, r1
 8007592:	bf86      	itte	hi
 8007594:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8007628 <_strtod_l+0x5a0>
 8007598:	f04f 3aff 	movhi.w	sl, #4294967295
 800759c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 80075a0:	2300      	movs	r3, #0
 80075a2:	9308      	str	r3, [sp, #32]
 80075a4:	e07a      	b.n	800769c <_strtod_l+0x614>
 80075a6:	07e2      	lsls	r2, r4, #31
 80075a8:	d505      	bpl.n	80075b6 <_strtod_l+0x52e>
 80075aa:	9b08      	ldr	r3, [sp, #32]
 80075ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075b0:	f7f9 f832 	bl	8000618 <__aeabi_dmul>
 80075b4:	2301      	movs	r3, #1
 80075b6:	9a08      	ldr	r2, [sp, #32]
 80075b8:	3208      	adds	r2, #8
 80075ba:	3601      	adds	r6, #1
 80075bc:	1064      	asrs	r4, r4, #1
 80075be:	9208      	str	r2, [sp, #32]
 80075c0:	e7cd      	b.n	800755e <_strtod_l+0x4d6>
 80075c2:	d0ed      	beq.n	80075a0 <_strtod_l+0x518>
 80075c4:	4264      	negs	r4, r4
 80075c6:	f014 020f 	ands.w	r2, r4, #15
 80075ca:	d00a      	beq.n	80075e2 <_strtod_l+0x55a>
 80075cc:	4b12      	ldr	r3, [pc, #72]	@ (8007618 <_strtod_l+0x590>)
 80075ce:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80075d2:	4650      	mov	r0, sl
 80075d4:	4659      	mov	r1, fp
 80075d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075da:	f7f9 f947 	bl	800086c <__aeabi_ddiv>
 80075de:	4682      	mov	sl, r0
 80075e0:	468b      	mov	fp, r1
 80075e2:	1124      	asrs	r4, r4, #4
 80075e4:	d0dc      	beq.n	80075a0 <_strtod_l+0x518>
 80075e6:	2c1f      	cmp	r4, #31
 80075e8:	dd20      	ble.n	800762c <_strtod_l+0x5a4>
 80075ea:	2400      	movs	r4, #0
 80075ec:	46a0      	mov	r8, r4
 80075ee:	940a      	str	r4, [sp, #40]	@ 0x28
 80075f0:	46a1      	mov	r9, r4
 80075f2:	9a05      	ldr	r2, [sp, #20]
 80075f4:	2322      	movs	r3, #34	@ 0x22
 80075f6:	f04f 0a00 	mov.w	sl, #0
 80075fa:	f04f 0b00 	mov.w	fp, #0
 80075fe:	6013      	str	r3, [r2, #0]
 8007600:	e768      	b.n	80074d4 <_strtod_l+0x44c>
 8007602:	bf00      	nop
 8007604:	0800d465 	.word	0x0800d465
 8007608:	0800d404 	.word	0x0800d404
 800760c:	0800d45d 	.word	0x0800d45d
 8007610:	0800d545 	.word	0x0800d545
 8007614:	0800c979 	.word	0x0800c979
 8007618:	0800d6c0 	.word	0x0800d6c0
 800761c:	0800d698 	.word	0x0800d698
 8007620:	7ff00000 	.word	0x7ff00000
 8007624:	7ca00000 	.word	0x7ca00000
 8007628:	7fefffff 	.word	0x7fefffff
 800762c:	f014 0310 	ands.w	r3, r4, #16
 8007630:	bf18      	it	ne
 8007632:	236a      	movne	r3, #106	@ 0x6a
 8007634:	4ea9      	ldr	r6, [pc, #676]	@ (80078dc <_strtod_l+0x854>)
 8007636:	9308      	str	r3, [sp, #32]
 8007638:	4650      	mov	r0, sl
 800763a:	4659      	mov	r1, fp
 800763c:	2300      	movs	r3, #0
 800763e:	07e2      	lsls	r2, r4, #31
 8007640:	d504      	bpl.n	800764c <_strtod_l+0x5c4>
 8007642:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007646:	f7f8 ffe7 	bl	8000618 <__aeabi_dmul>
 800764a:	2301      	movs	r3, #1
 800764c:	1064      	asrs	r4, r4, #1
 800764e:	f106 0608 	add.w	r6, r6, #8
 8007652:	d1f4      	bne.n	800763e <_strtod_l+0x5b6>
 8007654:	b10b      	cbz	r3, 800765a <_strtod_l+0x5d2>
 8007656:	4682      	mov	sl, r0
 8007658:	468b      	mov	fp, r1
 800765a:	9b08      	ldr	r3, [sp, #32]
 800765c:	b1b3      	cbz	r3, 800768c <_strtod_l+0x604>
 800765e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8007662:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8007666:	2b00      	cmp	r3, #0
 8007668:	4659      	mov	r1, fp
 800766a:	dd0f      	ble.n	800768c <_strtod_l+0x604>
 800766c:	2b1f      	cmp	r3, #31
 800766e:	dd55      	ble.n	800771c <_strtod_l+0x694>
 8007670:	2b34      	cmp	r3, #52	@ 0x34
 8007672:	bfde      	ittt	le
 8007674:	f04f 33ff 	movle.w	r3, #4294967295
 8007678:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800767c:	4093      	lslle	r3, r2
 800767e:	f04f 0a00 	mov.w	sl, #0
 8007682:	bfcc      	ite	gt
 8007684:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8007688:	ea03 0b01 	andle.w	fp, r3, r1
 800768c:	2200      	movs	r2, #0
 800768e:	2300      	movs	r3, #0
 8007690:	4650      	mov	r0, sl
 8007692:	4659      	mov	r1, fp
 8007694:	f7f9 fa28 	bl	8000ae8 <__aeabi_dcmpeq>
 8007698:	2800      	cmp	r0, #0
 800769a:	d1a6      	bne.n	80075ea <_strtod_l+0x562>
 800769c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800769e:	9300      	str	r3, [sp, #0]
 80076a0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80076a2:	9805      	ldr	r0, [sp, #20]
 80076a4:	462b      	mov	r3, r5
 80076a6:	463a      	mov	r2, r7
 80076a8:	f003 f9cc 	bl	800aa44 <__s2b>
 80076ac:	900a      	str	r0, [sp, #40]	@ 0x28
 80076ae:	2800      	cmp	r0, #0
 80076b0:	f43f af05 	beq.w	80074be <_strtod_l+0x436>
 80076b4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80076b6:	2a00      	cmp	r2, #0
 80076b8:	eba9 0308 	sub.w	r3, r9, r8
 80076bc:	bfa8      	it	ge
 80076be:	2300      	movge	r3, #0
 80076c0:	9312      	str	r3, [sp, #72]	@ 0x48
 80076c2:	2400      	movs	r4, #0
 80076c4:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80076c8:	9316      	str	r3, [sp, #88]	@ 0x58
 80076ca:	46a0      	mov	r8, r4
 80076cc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80076ce:	9805      	ldr	r0, [sp, #20]
 80076d0:	6859      	ldr	r1, [r3, #4]
 80076d2:	f003 f90f 	bl	800a8f4 <_Balloc>
 80076d6:	4681      	mov	r9, r0
 80076d8:	2800      	cmp	r0, #0
 80076da:	f43f aef4 	beq.w	80074c6 <_strtod_l+0x43e>
 80076de:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80076e0:	691a      	ldr	r2, [r3, #16]
 80076e2:	3202      	adds	r2, #2
 80076e4:	f103 010c 	add.w	r1, r3, #12
 80076e8:	0092      	lsls	r2, r2, #2
 80076ea:	300c      	adds	r0, #12
 80076ec:	f001 febd 	bl	800946a <memcpy>
 80076f0:	ec4b ab10 	vmov	d0, sl, fp
 80076f4:	9805      	ldr	r0, [sp, #20]
 80076f6:	aa1c      	add	r2, sp, #112	@ 0x70
 80076f8:	a91b      	add	r1, sp, #108	@ 0x6c
 80076fa:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 80076fe:	f003 fcdd 	bl	800b0bc <__d2b>
 8007702:	901a      	str	r0, [sp, #104]	@ 0x68
 8007704:	2800      	cmp	r0, #0
 8007706:	f43f aede 	beq.w	80074c6 <_strtod_l+0x43e>
 800770a:	9805      	ldr	r0, [sp, #20]
 800770c:	2101      	movs	r1, #1
 800770e:	f003 fa2f 	bl	800ab70 <__i2b>
 8007712:	4680      	mov	r8, r0
 8007714:	b948      	cbnz	r0, 800772a <_strtod_l+0x6a2>
 8007716:	f04f 0800 	mov.w	r8, #0
 800771a:	e6d4      	b.n	80074c6 <_strtod_l+0x43e>
 800771c:	f04f 32ff 	mov.w	r2, #4294967295
 8007720:	fa02 f303 	lsl.w	r3, r2, r3
 8007724:	ea03 0a0a 	and.w	sl, r3, sl
 8007728:	e7b0      	b.n	800768c <_strtod_l+0x604>
 800772a:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800772c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800772e:	2d00      	cmp	r5, #0
 8007730:	bfab      	itete	ge
 8007732:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8007734:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8007736:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8007738:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800773a:	bfac      	ite	ge
 800773c:	18ef      	addge	r7, r5, r3
 800773e:	1b5e      	sublt	r6, r3, r5
 8007740:	9b08      	ldr	r3, [sp, #32]
 8007742:	1aed      	subs	r5, r5, r3
 8007744:	4415      	add	r5, r2
 8007746:	4b66      	ldr	r3, [pc, #408]	@ (80078e0 <_strtod_l+0x858>)
 8007748:	3d01      	subs	r5, #1
 800774a:	429d      	cmp	r5, r3
 800774c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8007750:	da50      	bge.n	80077f4 <_strtod_l+0x76c>
 8007752:	1b5b      	subs	r3, r3, r5
 8007754:	2b1f      	cmp	r3, #31
 8007756:	eba2 0203 	sub.w	r2, r2, r3
 800775a:	f04f 0101 	mov.w	r1, #1
 800775e:	dc3d      	bgt.n	80077dc <_strtod_l+0x754>
 8007760:	fa01 f303 	lsl.w	r3, r1, r3
 8007764:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007766:	2300      	movs	r3, #0
 8007768:	9310      	str	r3, [sp, #64]	@ 0x40
 800776a:	18bd      	adds	r5, r7, r2
 800776c:	9b08      	ldr	r3, [sp, #32]
 800776e:	42af      	cmp	r7, r5
 8007770:	4416      	add	r6, r2
 8007772:	441e      	add	r6, r3
 8007774:	463b      	mov	r3, r7
 8007776:	bfa8      	it	ge
 8007778:	462b      	movge	r3, r5
 800777a:	42b3      	cmp	r3, r6
 800777c:	bfa8      	it	ge
 800777e:	4633      	movge	r3, r6
 8007780:	2b00      	cmp	r3, #0
 8007782:	bfc2      	ittt	gt
 8007784:	1aed      	subgt	r5, r5, r3
 8007786:	1af6      	subgt	r6, r6, r3
 8007788:	1aff      	subgt	r7, r7, r3
 800778a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800778c:	2b00      	cmp	r3, #0
 800778e:	dd16      	ble.n	80077be <_strtod_l+0x736>
 8007790:	4641      	mov	r1, r8
 8007792:	9805      	ldr	r0, [sp, #20]
 8007794:	461a      	mov	r2, r3
 8007796:	f003 faab 	bl	800acf0 <__pow5mult>
 800779a:	4680      	mov	r8, r0
 800779c:	2800      	cmp	r0, #0
 800779e:	d0ba      	beq.n	8007716 <_strtod_l+0x68e>
 80077a0:	4601      	mov	r1, r0
 80077a2:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80077a4:	9805      	ldr	r0, [sp, #20]
 80077a6:	f003 f9f9 	bl	800ab9c <__multiply>
 80077aa:	900e      	str	r0, [sp, #56]	@ 0x38
 80077ac:	2800      	cmp	r0, #0
 80077ae:	f43f ae8a 	beq.w	80074c6 <_strtod_l+0x43e>
 80077b2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80077b4:	9805      	ldr	r0, [sp, #20]
 80077b6:	f003 f8dd 	bl	800a974 <_Bfree>
 80077ba:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80077bc:	931a      	str	r3, [sp, #104]	@ 0x68
 80077be:	2d00      	cmp	r5, #0
 80077c0:	dc1d      	bgt.n	80077fe <_strtod_l+0x776>
 80077c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	dd23      	ble.n	8007810 <_strtod_l+0x788>
 80077c8:	4649      	mov	r1, r9
 80077ca:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80077cc:	9805      	ldr	r0, [sp, #20]
 80077ce:	f003 fa8f 	bl	800acf0 <__pow5mult>
 80077d2:	4681      	mov	r9, r0
 80077d4:	b9e0      	cbnz	r0, 8007810 <_strtod_l+0x788>
 80077d6:	f04f 0900 	mov.w	r9, #0
 80077da:	e674      	b.n	80074c6 <_strtod_l+0x43e>
 80077dc:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 80077e0:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 80077e4:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 80077e8:	35e2      	adds	r5, #226	@ 0xe2
 80077ea:	fa01 f305 	lsl.w	r3, r1, r5
 80077ee:	9310      	str	r3, [sp, #64]	@ 0x40
 80077f0:	9113      	str	r1, [sp, #76]	@ 0x4c
 80077f2:	e7ba      	b.n	800776a <_strtod_l+0x6e2>
 80077f4:	2300      	movs	r3, #0
 80077f6:	9310      	str	r3, [sp, #64]	@ 0x40
 80077f8:	2301      	movs	r3, #1
 80077fa:	9313      	str	r3, [sp, #76]	@ 0x4c
 80077fc:	e7b5      	b.n	800776a <_strtod_l+0x6e2>
 80077fe:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007800:	9805      	ldr	r0, [sp, #20]
 8007802:	462a      	mov	r2, r5
 8007804:	f003 face 	bl	800ada4 <__lshift>
 8007808:	901a      	str	r0, [sp, #104]	@ 0x68
 800780a:	2800      	cmp	r0, #0
 800780c:	d1d9      	bne.n	80077c2 <_strtod_l+0x73a>
 800780e:	e65a      	b.n	80074c6 <_strtod_l+0x43e>
 8007810:	2e00      	cmp	r6, #0
 8007812:	dd07      	ble.n	8007824 <_strtod_l+0x79c>
 8007814:	4649      	mov	r1, r9
 8007816:	9805      	ldr	r0, [sp, #20]
 8007818:	4632      	mov	r2, r6
 800781a:	f003 fac3 	bl	800ada4 <__lshift>
 800781e:	4681      	mov	r9, r0
 8007820:	2800      	cmp	r0, #0
 8007822:	d0d8      	beq.n	80077d6 <_strtod_l+0x74e>
 8007824:	2f00      	cmp	r7, #0
 8007826:	dd08      	ble.n	800783a <_strtod_l+0x7b2>
 8007828:	4641      	mov	r1, r8
 800782a:	9805      	ldr	r0, [sp, #20]
 800782c:	463a      	mov	r2, r7
 800782e:	f003 fab9 	bl	800ada4 <__lshift>
 8007832:	4680      	mov	r8, r0
 8007834:	2800      	cmp	r0, #0
 8007836:	f43f ae46 	beq.w	80074c6 <_strtod_l+0x43e>
 800783a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800783c:	9805      	ldr	r0, [sp, #20]
 800783e:	464a      	mov	r2, r9
 8007840:	f003 fb38 	bl	800aeb4 <__mdiff>
 8007844:	4604      	mov	r4, r0
 8007846:	2800      	cmp	r0, #0
 8007848:	f43f ae3d 	beq.w	80074c6 <_strtod_l+0x43e>
 800784c:	68c3      	ldr	r3, [r0, #12]
 800784e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007850:	2300      	movs	r3, #0
 8007852:	60c3      	str	r3, [r0, #12]
 8007854:	4641      	mov	r1, r8
 8007856:	f003 fb11 	bl	800ae7c <__mcmp>
 800785a:	2800      	cmp	r0, #0
 800785c:	da46      	bge.n	80078ec <_strtod_l+0x864>
 800785e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007860:	ea53 030a 	orrs.w	r3, r3, sl
 8007864:	d16c      	bne.n	8007940 <_strtod_l+0x8b8>
 8007866:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800786a:	2b00      	cmp	r3, #0
 800786c:	d168      	bne.n	8007940 <_strtod_l+0x8b8>
 800786e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007872:	0d1b      	lsrs	r3, r3, #20
 8007874:	051b      	lsls	r3, r3, #20
 8007876:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800787a:	d961      	bls.n	8007940 <_strtod_l+0x8b8>
 800787c:	6963      	ldr	r3, [r4, #20]
 800787e:	b913      	cbnz	r3, 8007886 <_strtod_l+0x7fe>
 8007880:	6923      	ldr	r3, [r4, #16]
 8007882:	2b01      	cmp	r3, #1
 8007884:	dd5c      	ble.n	8007940 <_strtod_l+0x8b8>
 8007886:	4621      	mov	r1, r4
 8007888:	2201      	movs	r2, #1
 800788a:	9805      	ldr	r0, [sp, #20]
 800788c:	f003 fa8a 	bl	800ada4 <__lshift>
 8007890:	4641      	mov	r1, r8
 8007892:	4604      	mov	r4, r0
 8007894:	f003 faf2 	bl	800ae7c <__mcmp>
 8007898:	2800      	cmp	r0, #0
 800789a:	dd51      	ble.n	8007940 <_strtod_l+0x8b8>
 800789c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80078a0:	9a08      	ldr	r2, [sp, #32]
 80078a2:	0d1b      	lsrs	r3, r3, #20
 80078a4:	051b      	lsls	r3, r3, #20
 80078a6:	2a00      	cmp	r2, #0
 80078a8:	d06b      	beq.n	8007982 <_strtod_l+0x8fa>
 80078aa:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80078ae:	d868      	bhi.n	8007982 <_strtod_l+0x8fa>
 80078b0:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 80078b4:	f67f ae9d 	bls.w	80075f2 <_strtod_l+0x56a>
 80078b8:	4b0a      	ldr	r3, [pc, #40]	@ (80078e4 <_strtod_l+0x85c>)
 80078ba:	4650      	mov	r0, sl
 80078bc:	4659      	mov	r1, fp
 80078be:	2200      	movs	r2, #0
 80078c0:	f7f8 feaa 	bl	8000618 <__aeabi_dmul>
 80078c4:	4b08      	ldr	r3, [pc, #32]	@ (80078e8 <_strtod_l+0x860>)
 80078c6:	400b      	ands	r3, r1
 80078c8:	4682      	mov	sl, r0
 80078ca:	468b      	mov	fp, r1
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	f47f ae05 	bne.w	80074dc <_strtod_l+0x454>
 80078d2:	9a05      	ldr	r2, [sp, #20]
 80078d4:	2322      	movs	r3, #34	@ 0x22
 80078d6:	6013      	str	r3, [r2, #0]
 80078d8:	e600      	b.n	80074dc <_strtod_l+0x454>
 80078da:	bf00      	nop
 80078dc:	0800d430 	.word	0x0800d430
 80078e0:	fffffc02 	.word	0xfffffc02
 80078e4:	39500000 	.word	0x39500000
 80078e8:	7ff00000 	.word	0x7ff00000
 80078ec:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 80078f0:	d165      	bne.n	80079be <_strtod_l+0x936>
 80078f2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80078f4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80078f8:	b35a      	cbz	r2, 8007952 <_strtod_l+0x8ca>
 80078fa:	4a9f      	ldr	r2, [pc, #636]	@ (8007b78 <_strtod_l+0xaf0>)
 80078fc:	4293      	cmp	r3, r2
 80078fe:	d12b      	bne.n	8007958 <_strtod_l+0x8d0>
 8007900:	9b08      	ldr	r3, [sp, #32]
 8007902:	4651      	mov	r1, sl
 8007904:	b303      	cbz	r3, 8007948 <_strtod_l+0x8c0>
 8007906:	4b9d      	ldr	r3, [pc, #628]	@ (8007b7c <_strtod_l+0xaf4>)
 8007908:	465a      	mov	r2, fp
 800790a:	4013      	ands	r3, r2
 800790c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8007910:	f04f 32ff 	mov.w	r2, #4294967295
 8007914:	d81b      	bhi.n	800794e <_strtod_l+0x8c6>
 8007916:	0d1b      	lsrs	r3, r3, #20
 8007918:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800791c:	fa02 f303 	lsl.w	r3, r2, r3
 8007920:	4299      	cmp	r1, r3
 8007922:	d119      	bne.n	8007958 <_strtod_l+0x8d0>
 8007924:	4b96      	ldr	r3, [pc, #600]	@ (8007b80 <_strtod_l+0xaf8>)
 8007926:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007928:	429a      	cmp	r2, r3
 800792a:	d102      	bne.n	8007932 <_strtod_l+0x8aa>
 800792c:	3101      	adds	r1, #1
 800792e:	f43f adca 	beq.w	80074c6 <_strtod_l+0x43e>
 8007932:	4b92      	ldr	r3, [pc, #584]	@ (8007b7c <_strtod_l+0xaf4>)
 8007934:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007936:	401a      	ands	r2, r3
 8007938:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800793c:	f04f 0a00 	mov.w	sl, #0
 8007940:	9b08      	ldr	r3, [sp, #32]
 8007942:	2b00      	cmp	r3, #0
 8007944:	d1b8      	bne.n	80078b8 <_strtod_l+0x830>
 8007946:	e5c9      	b.n	80074dc <_strtod_l+0x454>
 8007948:	f04f 33ff 	mov.w	r3, #4294967295
 800794c:	e7e8      	b.n	8007920 <_strtod_l+0x898>
 800794e:	4613      	mov	r3, r2
 8007950:	e7e6      	b.n	8007920 <_strtod_l+0x898>
 8007952:	ea53 030a 	orrs.w	r3, r3, sl
 8007956:	d0a1      	beq.n	800789c <_strtod_l+0x814>
 8007958:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800795a:	b1db      	cbz	r3, 8007994 <_strtod_l+0x90c>
 800795c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800795e:	4213      	tst	r3, r2
 8007960:	d0ee      	beq.n	8007940 <_strtod_l+0x8b8>
 8007962:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007964:	9a08      	ldr	r2, [sp, #32]
 8007966:	4650      	mov	r0, sl
 8007968:	4659      	mov	r1, fp
 800796a:	b1bb      	cbz	r3, 800799c <_strtod_l+0x914>
 800796c:	f7ff fb6c 	bl	8007048 <sulp>
 8007970:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007974:	ec53 2b10 	vmov	r2, r3, d0
 8007978:	f7f8 fc98 	bl	80002ac <__adddf3>
 800797c:	4682      	mov	sl, r0
 800797e:	468b      	mov	fp, r1
 8007980:	e7de      	b.n	8007940 <_strtod_l+0x8b8>
 8007982:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8007986:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800798a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800798e:	f04f 3aff 	mov.w	sl, #4294967295
 8007992:	e7d5      	b.n	8007940 <_strtod_l+0x8b8>
 8007994:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007996:	ea13 0f0a 	tst.w	r3, sl
 800799a:	e7e1      	b.n	8007960 <_strtod_l+0x8d8>
 800799c:	f7ff fb54 	bl	8007048 <sulp>
 80079a0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80079a4:	ec53 2b10 	vmov	r2, r3, d0
 80079a8:	f7f8 fc7e 	bl	80002a8 <__aeabi_dsub>
 80079ac:	2200      	movs	r2, #0
 80079ae:	2300      	movs	r3, #0
 80079b0:	4682      	mov	sl, r0
 80079b2:	468b      	mov	fp, r1
 80079b4:	f7f9 f898 	bl	8000ae8 <__aeabi_dcmpeq>
 80079b8:	2800      	cmp	r0, #0
 80079ba:	d0c1      	beq.n	8007940 <_strtod_l+0x8b8>
 80079bc:	e619      	b.n	80075f2 <_strtod_l+0x56a>
 80079be:	4641      	mov	r1, r8
 80079c0:	4620      	mov	r0, r4
 80079c2:	f003 fbd3 	bl	800b16c <__ratio>
 80079c6:	ec57 6b10 	vmov	r6, r7, d0
 80079ca:	2200      	movs	r2, #0
 80079cc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80079d0:	4630      	mov	r0, r6
 80079d2:	4639      	mov	r1, r7
 80079d4:	f7f9 f89c 	bl	8000b10 <__aeabi_dcmple>
 80079d8:	2800      	cmp	r0, #0
 80079da:	d06f      	beq.n	8007abc <_strtod_l+0xa34>
 80079dc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d17a      	bne.n	8007ad8 <_strtod_l+0xa50>
 80079e2:	f1ba 0f00 	cmp.w	sl, #0
 80079e6:	d158      	bne.n	8007a9a <_strtod_l+0xa12>
 80079e8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80079ea:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d15a      	bne.n	8007aa8 <_strtod_l+0xa20>
 80079f2:	4b64      	ldr	r3, [pc, #400]	@ (8007b84 <_strtod_l+0xafc>)
 80079f4:	2200      	movs	r2, #0
 80079f6:	4630      	mov	r0, r6
 80079f8:	4639      	mov	r1, r7
 80079fa:	f7f9 f87f 	bl	8000afc <__aeabi_dcmplt>
 80079fe:	2800      	cmp	r0, #0
 8007a00:	d159      	bne.n	8007ab6 <_strtod_l+0xa2e>
 8007a02:	4630      	mov	r0, r6
 8007a04:	4639      	mov	r1, r7
 8007a06:	4b60      	ldr	r3, [pc, #384]	@ (8007b88 <_strtod_l+0xb00>)
 8007a08:	2200      	movs	r2, #0
 8007a0a:	f7f8 fe05 	bl	8000618 <__aeabi_dmul>
 8007a0e:	4606      	mov	r6, r0
 8007a10:	460f      	mov	r7, r1
 8007a12:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8007a16:	9606      	str	r6, [sp, #24]
 8007a18:	9307      	str	r3, [sp, #28]
 8007a1a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007a1e:	4d57      	ldr	r5, [pc, #348]	@ (8007b7c <_strtod_l+0xaf4>)
 8007a20:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8007a24:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007a26:	401d      	ands	r5, r3
 8007a28:	4b58      	ldr	r3, [pc, #352]	@ (8007b8c <_strtod_l+0xb04>)
 8007a2a:	429d      	cmp	r5, r3
 8007a2c:	f040 80b2 	bne.w	8007b94 <_strtod_l+0xb0c>
 8007a30:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007a32:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8007a36:	ec4b ab10 	vmov	d0, sl, fp
 8007a3a:	f003 facf 	bl	800afdc <__ulp>
 8007a3e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007a42:	ec51 0b10 	vmov	r0, r1, d0
 8007a46:	f7f8 fde7 	bl	8000618 <__aeabi_dmul>
 8007a4a:	4652      	mov	r2, sl
 8007a4c:	465b      	mov	r3, fp
 8007a4e:	f7f8 fc2d 	bl	80002ac <__adddf3>
 8007a52:	460b      	mov	r3, r1
 8007a54:	4949      	ldr	r1, [pc, #292]	@ (8007b7c <_strtod_l+0xaf4>)
 8007a56:	4a4e      	ldr	r2, [pc, #312]	@ (8007b90 <_strtod_l+0xb08>)
 8007a58:	4019      	ands	r1, r3
 8007a5a:	4291      	cmp	r1, r2
 8007a5c:	4682      	mov	sl, r0
 8007a5e:	d942      	bls.n	8007ae6 <_strtod_l+0xa5e>
 8007a60:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007a62:	4b47      	ldr	r3, [pc, #284]	@ (8007b80 <_strtod_l+0xaf8>)
 8007a64:	429a      	cmp	r2, r3
 8007a66:	d103      	bne.n	8007a70 <_strtod_l+0x9e8>
 8007a68:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007a6a:	3301      	adds	r3, #1
 8007a6c:	f43f ad2b 	beq.w	80074c6 <_strtod_l+0x43e>
 8007a70:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8007b80 <_strtod_l+0xaf8>
 8007a74:	f04f 3aff 	mov.w	sl, #4294967295
 8007a78:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007a7a:	9805      	ldr	r0, [sp, #20]
 8007a7c:	f002 ff7a 	bl	800a974 <_Bfree>
 8007a80:	9805      	ldr	r0, [sp, #20]
 8007a82:	4649      	mov	r1, r9
 8007a84:	f002 ff76 	bl	800a974 <_Bfree>
 8007a88:	9805      	ldr	r0, [sp, #20]
 8007a8a:	4641      	mov	r1, r8
 8007a8c:	f002 ff72 	bl	800a974 <_Bfree>
 8007a90:	9805      	ldr	r0, [sp, #20]
 8007a92:	4621      	mov	r1, r4
 8007a94:	f002 ff6e 	bl	800a974 <_Bfree>
 8007a98:	e618      	b.n	80076cc <_strtod_l+0x644>
 8007a9a:	f1ba 0f01 	cmp.w	sl, #1
 8007a9e:	d103      	bne.n	8007aa8 <_strtod_l+0xa20>
 8007aa0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	f43f ada5 	beq.w	80075f2 <_strtod_l+0x56a>
 8007aa8:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8007b58 <_strtod_l+0xad0>
 8007aac:	4f35      	ldr	r7, [pc, #212]	@ (8007b84 <_strtod_l+0xafc>)
 8007aae:	ed8d 7b06 	vstr	d7, [sp, #24]
 8007ab2:	2600      	movs	r6, #0
 8007ab4:	e7b1      	b.n	8007a1a <_strtod_l+0x992>
 8007ab6:	4f34      	ldr	r7, [pc, #208]	@ (8007b88 <_strtod_l+0xb00>)
 8007ab8:	2600      	movs	r6, #0
 8007aba:	e7aa      	b.n	8007a12 <_strtod_l+0x98a>
 8007abc:	4b32      	ldr	r3, [pc, #200]	@ (8007b88 <_strtod_l+0xb00>)
 8007abe:	4630      	mov	r0, r6
 8007ac0:	4639      	mov	r1, r7
 8007ac2:	2200      	movs	r2, #0
 8007ac4:	f7f8 fda8 	bl	8000618 <__aeabi_dmul>
 8007ac8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007aca:	4606      	mov	r6, r0
 8007acc:	460f      	mov	r7, r1
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d09f      	beq.n	8007a12 <_strtod_l+0x98a>
 8007ad2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8007ad6:	e7a0      	b.n	8007a1a <_strtod_l+0x992>
 8007ad8:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8007b60 <_strtod_l+0xad8>
 8007adc:	ed8d 7b06 	vstr	d7, [sp, #24]
 8007ae0:	ec57 6b17 	vmov	r6, r7, d7
 8007ae4:	e799      	b.n	8007a1a <_strtod_l+0x992>
 8007ae6:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8007aea:	9b08      	ldr	r3, [sp, #32]
 8007aec:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d1c1      	bne.n	8007a78 <_strtod_l+0x9f0>
 8007af4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007af8:	0d1b      	lsrs	r3, r3, #20
 8007afa:	051b      	lsls	r3, r3, #20
 8007afc:	429d      	cmp	r5, r3
 8007afe:	d1bb      	bne.n	8007a78 <_strtod_l+0x9f0>
 8007b00:	4630      	mov	r0, r6
 8007b02:	4639      	mov	r1, r7
 8007b04:	f7f9 f8d0 	bl	8000ca8 <__aeabi_d2lz>
 8007b08:	f7f8 fd58 	bl	80005bc <__aeabi_l2d>
 8007b0c:	4602      	mov	r2, r0
 8007b0e:	460b      	mov	r3, r1
 8007b10:	4630      	mov	r0, r6
 8007b12:	4639      	mov	r1, r7
 8007b14:	f7f8 fbc8 	bl	80002a8 <__aeabi_dsub>
 8007b18:	460b      	mov	r3, r1
 8007b1a:	4602      	mov	r2, r0
 8007b1c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8007b20:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8007b24:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007b26:	ea46 060a 	orr.w	r6, r6, sl
 8007b2a:	431e      	orrs	r6, r3
 8007b2c:	d06f      	beq.n	8007c0e <_strtod_l+0xb86>
 8007b2e:	a30e      	add	r3, pc, #56	@ (adr r3, 8007b68 <_strtod_l+0xae0>)
 8007b30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b34:	f7f8 ffe2 	bl	8000afc <__aeabi_dcmplt>
 8007b38:	2800      	cmp	r0, #0
 8007b3a:	f47f accf 	bne.w	80074dc <_strtod_l+0x454>
 8007b3e:	a30c      	add	r3, pc, #48	@ (adr r3, 8007b70 <_strtod_l+0xae8>)
 8007b40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b44:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007b48:	f7f8 fff6 	bl	8000b38 <__aeabi_dcmpgt>
 8007b4c:	2800      	cmp	r0, #0
 8007b4e:	d093      	beq.n	8007a78 <_strtod_l+0x9f0>
 8007b50:	e4c4      	b.n	80074dc <_strtod_l+0x454>
 8007b52:	bf00      	nop
 8007b54:	f3af 8000 	nop.w
 8007b58:	00000000 	.word	0x00000000
 8007b5c:	bff00000 	.word	0xbff00000
 8007b60:	00000000 	.word	0x00000000
 8007b64:	3ff00000 	.word	0x3ff00000
 8007b68:	94a03595 	.word	0x94a03595
 8007b6c:	3fdfffff 	.word	0x3fdfffff
 8007b70:	35afe535 	.word	0x35afe535
 8007b74:	3fe00000 	.word	0x3fe00000
 8007b78:	000fffff 	.word	0x000fffff
 8007b7c:	7ff00000 	.word	0x7ff00000
 8007b80:	7fefffff 	.word	0x7fefffff
 8007b84:	3ff00000 	.word	0x3ff00000
 8007b88:	3fe00000 	.word	0x3fe00000
 8007b8c:	7fe00000 	.word	0x7fe00000
 8007b90:	7c9fffff 	.word	0x7c9fffff
 8007b94:	9b08      	ldr	r3, [sp, #32]
 8007b96:	b323      	cbz	r3, 8007be2 <_strtod_l+0xb5a>
 8007b98:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8007b9c:	d821      	bhi.n	8007be2 <_strtod_l+0xb5a>
 8007b9e:	a328      	add	r3, pc, #160	@ (adr r3, 8007c40 <_strtod_l+0xbb8>)
 8007ba0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ba4:	4630      	mov	r0, r6
 8007ba6:	4639      	mov	r1, r7
 8007ba8:	f7f8 ffb2 	bl	8000b10 <__aeabi_dcmple>
 8007bac:	b1a0      	cbz	r0, 8007bd8 <_strtod_l+0xb50>
 8007bae:	4639      	mov	r1, r7
 8007bb0:	4630      	mov	r0, r6
 8007bb2:	f7f9 f809 	bl	8000bc8 <__aeabi_d2uiz>
 8007bb6:	2801      	cmp	r0, #1
 8007bb8:	bf38      	it	cc
 8007bba:	2001      	movcc	r0, #1
 8007bbc:	f7f8 fcb2 	bl	8000524 <__aeabi_ui2d>
 8007bc0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007bc2:	4606      	mov	r6, r0
 8007bc4:	460f      	mov	r7, r1
 8007bc6:	b9fb      	cbnz	r3, 8007c08 <_strtod_l+0xb80>
 8007bc8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8007bcc:	9014      	str	r0, [sp, #80]	@ 0x50
 8007bce:	9315      	str	r3, [sp, #84]	@ 0x54
 8007bd0:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8007bd4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8007bd8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8007bda:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8007bde:	1b5b      	subs	r3, r3, r5
 8007be0:	9311      	str	r3, [sp, #68]	@ 0x44
 8007be2:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8007be6:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8007bea:	f003 f9f7 	bl	800afdc <__ulp>
 8007bee:	4650      	mov	r0, sl
 8007bf0:	ec53 2b10 	vmov	r2, r3, d0
 8007bf4:	4659      	mov	r1, fp
 8007bf6:	f7f8 fd0f 	bl	8000618 <__aeabi_dmul>
 8007bfa:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8007bfe:	f7f8 fb55 	bl	80002ac <__adddf3>
 8007c02:	4682      	mov	sl, r0
 8007c04:	468b      	mov	fp, r1
 8007c06:	e770      	b.n	8007aea <_strtod_l+0xa62>
 8007c08:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8007c0c:	e7e0      	b.n	8007bd0 <_strtod_l+0xb48>
 8007c0e:	a30e      	add	r3, pc, #56	@ (adr r3, 8007c48 <_strtod_l+0xbc0>)
 8007c10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c14:	f7f8 ff72 	bl	8000afc <__aeabi_dcmplt>
 8007c18:	e798      	b.n	8007b4c <_strtod_l+0xac4>
 8007c1a:	2300      	movs	r3, #0
 8007c1c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007c1e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8007c20:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007c22:	6013      	str	r3, [r2, #0]
 8007c24:	f7ff ba6d 	b.w	8007102 <_strtod_l+0x7a>
 8007c28:	2a65      	cmp	r2, #101	@ 0x65
 8007c2a:	f43f ab66 	beq.w	80072fa <_strtod_l+0x272>
 8007c2e:	2a45      	cmp	r2, #69	@ 0x45
 8007c30:	f43f ab63 	beq.w	80072fa <_strtod_l+0x272>
 8007c34:	2301      	movs	r3, #1
 8007c36:	f7ff bb9e 	b.w	8007376 <_strtod_l+0x2ee>
 8007c3a:	bf00      	nop
 8007c3c:	f3af 8000 	nop.w
 8007c40:	ffc00000 	.word	0xffc00000
 8007c44:	41dfffff 	.word	0x41dfffff
 8007c48:	94a03595 	.word	0x94a03595
 8007c4c:	3fcfffff 	.word	0x3fcfffff

08007c50 <strtod>:
 8007c50:	460a      	mov	r2, r1
 8007c52:	4601      	mov	r1, r0
 8007c54:	4802      	ldr	r0, [pc, #8]	@ (8007c60 <strtod+0x10>)
 8007c56:	4b03      	ldr	r3, [pc, #12]	@ (8007c64 <strtod+0x14>)
 8007c58:	6800      	ldr	r0, [r0, #0]
 8007c5a:	f7ff ba15 	b.w	8007088 <_strtod_l>
 8007c5e:	bf00      	nop
 8007c60:	20000198 	.word	0x20000198
 8007c64:	2000002c 	.word	0x2000002c

08007c68 <__cvt>:
 8007c68:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007c6c:	ec57 6b10 	vmov	r6, r7, d0
 8007c70:	2f00      	cmp	r7, #0
 8007c72:	460c      	mov	r4, r1
 8007c74:	4619      	mov	r1, r3
 8007c76:	463b      	mov	r3, r7
 8007c78:	bfbb      	ittet	lt
 8007c7a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8007c7e:	461f      	movlt	r7, r3
 8007c80:	2300      	movge	r3, #0
 8007c82:	232d      	movlt	r3, #45	@ 0x2d
 8007c84:	700b      	strb	r3, [r1, #0]
 8007c86:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007c88:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8007c8c:	4691      	mov	r9, r2
 8007c8e:	f023 0820 	bic.w	r8, r3, #32
 8007c92:	bfbc      	itt	lt
 8007c94:	4632      	movlt	r2, r6
 8007c96:	4616      	movlt	r6, r2
 8007c98:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007c9c:	d005      	beq.n	8007caa <__cvt+0x42>
 8007c9e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8007ca2:	d100      	bne.n	8007ca6 <__cvt+0x3e>
 8007ca4:	3401      	adds	r4, #1
 8007ca6:	2102      	movs	r1, #2
 8007ca8:	e000      	b.n	8007cac <__cvt+0x44>
 8007caa:	2103      	movs	r1, #3
 8007cac:	ab03      	add	r3, sp, #12
 8007cae:	9301      	str	r3, [sp, #4]
 8007cb0:	ab02      	add	r3, sp, #8
 8007cb2:	9300      	str	r3, [sp, #0]
 8007cb4:	ec47 6b10 	vmov	d0, r6, r7
 8007cb8:	4653      	mov	r3, sl
 8007cba:	4622      	mov	r2, r4
 8007cbc:	f001 fc7c 	bl	80095b8 <_dtoa_r>
 8007cc0:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8007cc4:	4605      	mov	r5, r0
 8007cc6:	d119      	bne.n	8007cfc <__cvt+0x94>
 8007cc8:	f019 0f01 	tst.w	r9, #1
 8007ccc:	d00e      	beq.n	8007cec <__cvt+0x84>
 8007cce:	eb00 0904 	add.w	r9, r0, r4
 8007cd2:	2200      	movs	r2, #0
 8007cd4:	2300      	movs	r3, #0
 8007cd6:	4630      	mov	r0, r6
 8007cd8:	4639      	mov	r1, r7
 8007cda:	f7f8 ff05 	bl	8000ae8 <__aeabi_dcmpeq>
 8007cde:	b108      	cbz	r0, 8007ce4 <__cvt+0x7c>
 8007ce0:	f8cd 900c 	str.w	r9, [sp, #12]
 8007ce4:	2230      	movs	r2, #48	@ 0x30
 8007ce6:	9b03      	ldr	r3, [sp, #12]
 8007ce8:	454b      	cmp	r3, r9
 8007cea:	d31e      	bcc.n	8007d2a <__cvt+0xc2>
 8007cec:	9b03      	ldr	r3, [sp, #12]
 8007cee:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007cf0:	1b5b      	subs	r3, r3, r5
 8007cf2:	4628      	mov	r0, r5
 8007cf4:	6013      	str	r3, [r2, #0]
 8007cf6:	b004      	add	sp, #16
 8007cf8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007cfc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007d00:	eb00 0904 	add.w	r9, r0, r4
 8007d04:	d1e5      	bne.n	8007cd2 <__cvt+0x6a>
 8007d06:	7803      	ldrb	r3, [r0, #0]
 8007d08:	2b30      	cmp	r3, #48	@ 0x30
 8007d0a:	d10a      	bne.n	8007d22 <__cvt+0xba>
 8007d0c:	2200      	movs	r2, #0
 8007d0e:	2300      	movs	r3, #0
 8007d10:	4630      	mov	r0, r6
 8007d12:	4639      	mov	r1, r7
 8007d14:	f7f8 fee8 	bl	8000ae8 <__aeabi_dcmpeq>
 8007d18:	b918      	cbnz	r0, 8007d22 <__cvt+0xba>
 8007d1a:	f1c4 0401 	rsb	r4, r4, #1
 8007d1e:	f8ca 4000 	str.w	r4, [sl]
 8007d22:	f8da 3000 	ldr.w	r3, [sl]
 8007d26:	4499      	add	r9, r3
 8007d28:	e7d3      	b.n	8007cd2 <__cvt+0x6a>
 8007d2a:	1c59      	adds	r1, r3, #1
 8007d2c:	9103      	str	r1, [sp, #12]
 8007d2e:	701a      	strb	r2, [r3, #0]
 8007d30:	e7d9      	b.n	8007ce6 <__cvt+0x7e>

08007d32 <__exponent>:
 8007d32:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007d34:	2900      	cmp	r1, #0
 8007d36:	bfba      	itte	lt
 8007d38:	4249      	neglt	r1, r1
 8007d3a:	232d      	movlt	r3, #45	@ 0x2d
 8007d3c:	232b      	movge	r3, #43	@ 0x2b
 8007d3e:	2909      	cmp	r1, #9
 8007d40:	7002      	strb	r2, [r0, #0]
 8007d42:	7043      	strb	r3, [r0, #1]
 8007d44:	dd29      	ble.n	8007d9a <__exponent+0x68>
 8007d46:	f10d 0307 	add.w	r3, sp, #7
 8007d4a:	461d      	mov	r5, r3
 8007d4c:	270a      	movs	r7, #10
 8007d4e:	461a      	mov	r2, r3
 8007d50:	fbb1 f6f7 	udiv	r6, r1, r7
 8007d54:	fb07 1416 	mls	r4, r7, r6, r1
 8007d58:	3430      	adds	r4, #48	@ 0x30
 8007d5a:	f802 4c01 	strb.w	r4, [r2, #-1]
 8007d5e:	460c      	mov	r4, r1
 8007d60:	2c63      	cmp	r4, #99	@ 0x63
 8007d62:	f103 33ff 	add.w	r3, r3, #4294967295
 8007d66:	4631      	mov	r1, r6
 8007d68:	dcf1      	bgt.n	8007d4e <__exponent+0x1c>
 8007d6a:	3130      	adds	r1, #48	@ 0x30
 8007d6c:	1e94      	subs	r4, r2, #2
 8007d6e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8007d72:	1c41      	adds	r1, r0, #1
 8007d74:	4623      	mov	r3, r4
 8007d76:	42ab      	cmp	r3, r5
 8007d78:	d30a      	bcc.n	8007d90 <__exponent+0x5e>
 8007d7a:	f10d 0309 	add.w	r3, sp, #9
 8007d7e:	1a9b      	subs	r3, r3, r2
 8007d80:	42ac      	cmp	r4, r5
 8007d82:	bf88      	it	hi
 8007d84:	2300      	movhi	r3, #0
 8007d86:	3302      	adds	r3, #2
 8007d88:	4403      	add	r3, r0
 8007d8a:	1a18      	subs	r0, r3, r0
 8007d8c:	b003      	add	sp, #12
 8007d8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007d90:	f813 6b01 	ldrb.w	r6, [r3], #1
 8007d94:	f801 6f01 	strb.w	r6, [r1, #1]!
 8007d98:	e7ed      	b.n	8007d76 <__exponent+0x44>
 8007d9a:	2330      	movs	r3, #48	@ 0x30
 8007d9c:	3130      	adds	r1, #48	@ 0x30
 8007d9e:	7083      	strb	r3, [r0, #2]
 8007da0:	70c1      	strb	r1, [r0, #3]
 8007da2:	1d03      	adds	r3, r0, #4
 8007da4:	e7f1      	b.n	8007d8a <__exponent+0x58>
	...

08007da8 <_printf_float>:
 8007da8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007dac:	b08d      	sub	sp, #52	@ 0x34
 8007dae:	460c      	mov	r4, r1
 8007db0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8007db4:	4616      	mov	r6, r2
 8007db6:	461f      	mov	r7, r3
 8007db8:	4605      	mov	r5, r0
 8007dba:	f001 fac5 	bl	8009348 <_localeconv_r>
 8007dbe:	6803      	ldr	r3, [r0, #0]
 8007dc0:	9304      	str	r3, [sp, #16]
 8007dc2:	4618      	mov	r0, r3
 8007dc4:	f7f8 fa64 	bl	8000290 <strlen>
 8007dc8:	2300      	movs	r3, #0
 8007dca:	930a      	str	r3, [sp, #40]	@ 0x28
 8007dcc:	f8d8 3000 	ldr.w	r3, [r8]
 8007dd0:	9005      	str	r0, [sp, #20]
 8007dd2:	3307      	adds	r3, #7
 8007dd4:	f023 0307 	bic.w	r3, r3, #7
 8007dd8:	f103 0208 	add.w	r2, r3, #8
 8007ddc:	f894 a018 	ldrb.w	sl, [r4, #24]
 8007de0:	f8d4 b000 	ldr.w	fp, [r4]
 8007de4:	f8c8 2000 	str.w	r2, [r8]
 8007de8:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007dec:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8007df0:	9307      	str	r3, [sp, #28]
 8007df2:	f8cd 8018 	str.w	r8, [sp, #24]
 8007df6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8007dfa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007dfe:	4b9c      	ldr	r3, [pc, #624]	@ (8008070 <_printf_float+0x2c8>)
 8007e00:	f04f 32ff 	mov.w	r2, #4294967295
 8007e04:	f7f8 fea2 	bl	8000b4c <__aeabi_dcmpun>
 8007e08:	bb70      	cbnz	r0, 8007e68 <_printf_float+0xc0>
 8007e0a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007e0e:	4b98      	ldr	r3, [pc, #608]	@ (8008070 <_printf_float+0x2c8>)
 8007e10:	f04f 32ff 	mov.w	r2, #4294967295
 8007e14:	f7f8 fe7c 	bl	8000b10 <__aeabi_dcmple>
 8007e18:	bb30      	cbnz	r0, 8007e68 <_printf_float+0xc0>
 8007e1a:	2200      	movs	r2, #0
 8007e1c:	2300      	movs	r3, #0
 8007e1e:	4640      	mov	r0, r8
 8007e20:	4649      	mov	r1, r9
 8007e22:	f7f8 fe6b 	bl	8000afc <__aeabi_dcmplt>
 8007e26:	b110      	cbz	r0, 8007e2e <_printf_float+0x86>
 8007e28:	232d      	movs	r3, #45	@ 0x2d
 8007e2a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007e2e:	4a91      	ldr	r2, [pc, #580]	@ (8008074 <_printf_float+0x2cc>)
 8007e30:	4b91      	ldr	r3, [pc, #580]	@ (8008078 <_printf_float+0x2d0>)
 8007e32:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8007e36:	bf94      	ite	ls
 8007e38:	4690      	movls	r8, r2
 8007e3a:	4698      	movhi	r8, r3
 8007e3c:	2303      	movs	r3, #3
 8007e3e:	6123      	str	r3, [r4, #16]
 8007e40:	f02b 0304 	bic.w	r3, fp, #4
 8007e44:	6023      	str	r3, [r4, #0]
 8007e46:	f04f 0900 	mov.w	r9, #0
 8007e4a:	9700      	str	r7, [sp, #0]
 8007e4c:	4633      	mov	r3, r6
 8007e4e:	aa0b      	add	r2, sp, #44	@ 0x2c
 8007e50:	4621      	mov	r1, r4
 8007e52:	4628      	mov	r0, r5
 8007e54:	f000 f9d2 	bl	80081fc <_printf_common>
 8007e58:	3001      	adds	r0, #1
 8007e5a:	f040 808d 	bne.w	8007f78 <_printf_float+0x1d0>
 8007e5e:	f04f 30ff 	mov.w	r0, #4294967295
 8007e62:	b00d      	add	sp, #52	@ 0x34
 8007e64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e68:	4642      	mov	r2, r8
 8007e6a:	464b      	mov	r3, r9
 8007e6c:	4640      	mov	r0, r8
 8007e6e:	4649      	mov	r1, r9
 8007e70:	f7f8 fe6c 	bl	8000b4c <__aeabi_dcmpun>
 8007e74:	b140      	cbz	r0, 8007e88 <_printf_float+0xe0>
 8007e76:	464b      	mov	r3, r9
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	bfbc      	itt	lt
 8007e7c:	232d      	movlt	r3, #45	@ 0x2d
 8007e7e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8007e82:	4a7e      	ldr	r2, [pc, #504]	@ (800807c <_printf_float+0x2d4>)
 8007e84:	4b7e      	ldr	r3, [pc, #504]	@ (8008080 <_printf_float+0x2d8>)
 8007e86:	e7d4      	b.n	8007e32 <_printf_float+0x8a>
 8007e88:	6863      	ldr	r3, [r4, #4]
 8007e8a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8007e8e:	9206      	str	r2, [sp, #24]
 8007e90:	1c5a      	adds	r2, r3, #1
 8007e92:	d13b      	bne.n	8007f0c <_printf_float+0x164>
 8007e94:	2306      	movs	r3, #6
 8007e96:	6063      	str	r3, [r4, #4]
 8007e98:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8007e9c:	2300      	movs	r3, #0
 8007e9e:	6022      	str	r2, [r4, #0]
 8007ea0:	9303      	str	r3, [sp, #12]
 8007ea2:	ab0a      	add	r3, sp, #40	@ 0x28
 8007ea4:	e9cd a301 	strd	sl, r3, [sp, #4]
 8007ea8:	ab09      	add	r3, sp, #36	@ 0x24
 8007eaa:	9300      	str	r3, [sp, #0]
 8007eac:	6861      	ldr	r1, [r4, #4]
 8007eae:	ec49 8b10 	vmov	d0, r8, r9
 8007eb2:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8007eb6:	4628      	mov	r0, r5
 8007eb8:	f7ff fed6 	bl	8007c68 <__cvt>
 8007ebc:	9b06      	ldr	r3, [sp, #24]
 8007ebe:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007ec0:	2b47      	cmp	r3, #71	@ 0x47
 8007ec2:	4680      	mov	r8, r0
 8007ec4:	d129      	bne.n	8007f1a <_printf_float+0x172>
 8007ec6:	1cc8      	adds	r0, r1, #3
 8007ec8:	db02      	blt.n	8007ed0 <_printf_float+0x128>
 8007eca:	6863      	ldr	r3, [r4, #4]
 8007ecc:	4299      	cmp	r1, r3
 8007ece:	dd41      	ble.n	8007f54 <_printf_float+0x1ac>
 8007ed0:	f1aa 0a02 	sub.w	sl, sl, #2
 8007ed4:	fa5f fa8a 	uxtb.w	sl, sl
 8007ed8:	3901      	subs	r1, #1
 8007eda:	4652      	mov	r2, sl
 8007edc:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8007ee0:	9109      	str	r1, [sp, #36]	@ 0x24
 8007ee2:	f7ff ff26 	bl	8007d32 <__exponent>
 8007ee6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007ee8:	1813      	adds	r3, r2, r0
 8007eea:	2a01      	cmp	r2, #1
 8007eec:	4681      	mov	r9, r0
 8007eee:	6123      	str	r3, [r4, #16]
 8007ef0:	dc02      	bgt.n	8007ef8 <_printf_float+0x150>
 8007ef2:	6822      	ldr	r2, [r4, #0]
 8007ef4:	07d2      	lsls	r2, r2, #31
 8007ef6:	d501      	bpl.n	8007efc <_printf_float+0x154>
 8007ef8:	3301      	adds	r3, #1
 8007efa:	6123      	str	r3, [r4, #16]
 8007efc:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d0a2      	beq.n	8007e4a <_printf_float+0xa2>
 8007f04:	232d      	movs	r3, #45	@ 0x2d
 8007f06:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007f0a:	e79e      	b.n	8007e4a <_printf_float+0xa2>
 8007f0c:	9a06      	ldr	r2, [sp, #24]
 8007f0e:	2a47      	cmp	r2, #71	@ 0x47
 8007f10:	d1c2      	bne.n	8007e98 <_printf_float+0xf0>
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d1c0      	bne.n	8007e98 <_printf_float+0xf0>
 8007f16:	2301      	movs	r3, #1
 8007f18:	e7bd      	b.n	8007e96 <_printf_float+0xee>
 8007f1a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007f1e:	d9db      	bls.n	8007ed8 <_printf_float+0x130>
 8007f20:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8007f24:	d118      	bne.n	8007f58 <_printf_float+0x1b0>
 8007f26:	2900      	cmp	r1, #0
 8007f28:	6863      	ldr	r3, [r4, #4]
 8007f2a:	dd0b      	ble.n	8007f44 <_printf_float+0x19c>
 8007f2c:	6121      	str	r1, [r4, #16]
 8007f2e:	b913      	cbnz	r3, 8007f36 <_printf_float+0x18e>
 8007f30:	6822      	ldr	r2, [r4, #0]
 8007f32:	07d0      	lsls	r0, r2, #31
 8007f34:	d502      	bpl.n	8007f3c <_printf_float+0x194>
 8007f36:	3301      	adds	r3, #1
 8007f38:	440b      	add	r3, r1
 8007f3a:	6123      	str	r3, [r4, #16]
 8007f3c:	65a1      	str	r1, [r4, #88]	@ 0x58
 8007f3e:	f04f 0900 	mov.w	r9, #0
 8007f42:	e7db      	b.n	8007efc <_printf_float+0x154>
 8007f44:	b913      	cbnz	r3, 8007f4c <_printf_float+0x1a4>
 8007f46:	6822      	ldr	r2, [r4, #0]
 8007f48:	07d2      	lsls	r2, r2, #31
 8007f4a:	d501      	bpl.n	8007f50 <_printf_float+0x1a8>
 8007f4c:	3302      	adds	r3, #2
 8007f4e:	e7f4      	b.n	8007f3a <_printf_float+0x192>
 8007f50:	2301      	movs	r3, #1
 8007f52:	e7f2      	b.n	8007f3a <_printf_float+0x192>
 8007f54:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8007f58:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007f5a:	4299      	cmp	r1, r3
 8007f5c:	db05      	blt.n	8007f6a <_printf_float+0x1c2>
 8007f5e:	6823      	ldr	r3, [r4, #0]
 8007f60:	6121      	str	r1, [r4, #16]
 8007f62:	07d8      	lsls	r0, r3, #31
 8007f64:	d5ea      	bpl.n	8007f3c <_printf_float+0x194>
 8007f66:	1c4b      	adds	r3, r1, #1
 8007f68:	e7e7      	b.n	8007f3a <_printf_float+0x192>
 8007f6a:	2900      	cmp	r1, #0
 8007f6c:	bfd4      	ite	le
 8007f6e:	f1c1 0202 	rsble	r2, r1, #2
 8007f72:	2201      	movgt	r2, #1
 8007f74:	4413      	add	r3, r2
 8007f76:	e7e0      	b.n	8007f3a <_printf_float+0x192>
 8007f78:	6823      	ldr	r3, [r4, #0]
 8007f7a:	055a      	lsls	r2, r3, #21
 8007f7c:	d407      	bmi.n	8007f8e <_printf_float+0x1e6>
 8007f7e:	6923      	ldr	r3, [r4, #16]
 8007f80:	4642      	mov	r2, r8
 8007f82:	4631      	mov	r1, r6
 8007f84:	4628      	mov	r0, r5
 8007f86:	47b8      	blx	r7
 8007f88:	3001      	adds	r0, #1
 8007f8a:	d12b      	bne.n	8007fe4 <_printf_float+0x23c>
 8007f8c:	e767      	b.n	8007e5e <_printf_float+0xb6>
 8007f8e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007f92:	f240 80dd 	bls.w	8008150 <_printf_float+0x3a8>
 8007f96:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007f9a:	2200      	movs	r2, #0
 8007f9c:	2300      	movs	r3, #0
 8007f9e:	f7f8 fda3 	bl	8000ae8 <__aeabi_dcmpeq>
 8007fa2:	2800      	cmp	r0, #0
 8007fa4:	d033      	beq.n	800800e <_printf_float+0x266>
 8007fa6:	4a37      	ldr	r2, [pc, #220]	@ (8008084 <_printf_float+0x2dc>)
 8007fa8:	2301      	movs	r3, #1
 8007faa:	4631      	mov	r1, r6
 8007fac:	4628      	mov	r0, r5
 8007fae:	47b8      	blx	r7
 8007fb0:	3001      	adds	r0, #1
 8007fb2:	f43f af54 	beq.w	8007e5e <_printf_float+0xb6>
 8007fb6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8007fba:	4543      	cmp	r3, r8
 8007fbc:	db02      	blt.n	8007fc4 <_printf_float+0x21c>
 8007fbe:	6823      	ldr	r3, [r4, #0]
 8007fc0:	07d8      	lsls	r0, r3, #31
 8007fc2:	d50f      	bpl.n	8007fe4 <_printf_float+0x23c>
 8007fc4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007fc8:	4631      	mov	r1, r6
 8007fca:	4628      	mov	r0, r5
 8007fcc:	47b8      	blx	r7
 8007fce:	3001      	adds	r0, #1
 8007fd0:	f43f af45 	beq.w	8007e5e <_printf_float+0xb6>
 8007fd4:	f04f 0900 	mov.w	r9, #0
 8007fd8:	f108 38ff 	add.w	r8, r8, #4294967295
 8007fdc:	f104 0a1a 	add.w	sl, r4, #26
 8007fe0:	45c8      	cmp	r8, r9
 8007fe2:	dc09      	bgt.n	8007ff8 <_printf_float+0x250>
 8007fe4:	6823      	ldr	r3, [r4, #0]
 8007fe6:	079b      	lsls	r3, r3, #30
 8007fe8:	f100 8103 	bmi.w	80081f2 <_printf_float+0x44a>
 8007fec:	68e0      	ldr	r0, [r4, #12]
 8007fee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007ff0:	4298      	cmp	r0, r3
 8007ff2:	bfb8      	it	lt
 8007ff4:	4618      	movlt	r0, r3
 8007ff6:	e734      	b.n	8007e62 <_printf_float+0xba>
 8007ff8:	2301      	movs	r3, #1
 8007ffa:	4652      	mov	r2, sl
 8007ffc:	4631      	mov	r1, r6
 8007ffe:	4628      	mov	r0, r5
 8008000:	47b8      	blx	r7
 8008002:	3001      	adds	r0, #1
 8008004:	f43f af2b 	beq.w	8007e5e <_printf_float+0xb6>
 8008008:	f109 0901 	add.w	r9, r9, #1
 800800c:	e7e8      	b.n	8007fe0 <_printf_float+0x238>
 800800e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008010:	2b00      	cmp	r3, #0
 8008012:	dc39      	bgt.n	8008088 <_printf_float+0x2e0>
 8008014:	4a1b      	ldr	r2, [pc, #108]	@ (8008084 <_printf_float+0x2dc>)
 8008016:	2301      	movs	r3, #1
 8008018:	4631      	mov	r1, r6
 800801a:	4628      	mov	r0, r5
 800801c:	47b8      	blx	r7
 800801e:	3001      	adds	r0, #1
 8008020:	f43f af1d 	beq.w	8007e5e <_printf_float+0xb6>
 8008024:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8008028:	ea59 0303 	orrs.w	r3, r9, r3
 800802c:	d102      	bne.n	8008034 <_printf_float+0x28c>
 800802e:	6823      	ldr	r3, [r4, #0]
 8008030:	07d9      	lsls	r1, r3, #31
 8008032:	d5d7      	bpl.n	8007fe4 <_printf_float+0x23c>
 8008034:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008038:	4631      	mov	r1, r6
 800803a:	4628      	mov	r0, r5
 800803c:	47b8      	blx	r7
 800803e:	3001      	adds	r0, #1
 8008040:	f43f af0d 	beq.w	8007e5e <_printf_float+0xb6>
 8008044:	f04f 0a00 	mov.w	sl, #0
 8008048:	f104 0b1a 	add.w	fp, r4, #26
 800804c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800804e:	425b      	negs	r3, r3
 8008050:	4553      	cmp	r3, sl
 8008052:	dc01      	bgt.n	8008058 <_printf_float+0x2b0>
 8008054:	464b      	mov	r3, r9
 8008056:	e793      	b.n	8007f80 <_printf_float+0x1d8>
 8008058:	2301      	movs	r3, #1
 800805a:	465a      	mov	r2, fp
 800805c:	4631      	mov	r1, r6
 800805e:	4628      	mov	r0, r5
 8008060:	47b8      	blx	r7
 8008062:	3001      	adds	r0, #1
 8008064:	f43f aefb 	beq.w	8007e5e <_printf_float+0xb6>
 8008068:	f10a 0a01 	add.w	sl, sl, #1
 800806c:	e7ee      	b.n	800804c <_printf_float+0x2a4>
 800806e:	bf00      	nop
 8008070:	7fefffff 	.word	0x7fefffff
 8008074:	0800d458 	.word	0x0800d458
 8008078:	0800d45c 	.word	0x0800d45c
 800807c:	0800d460 	.word	0x0800d460
 8008080:	0800d464 	.word	0x0800d464
 8008084:	0800d8b0 	.word	0x0800d8b0
 8008088:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800808a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800808e:	4553      	cmp	r3, sl
 8008090:	bfa8      	it	ge
 8008092:	4653      	movge	r3, sl
 8008094:	2b00      	cmp	r3, #0
 8008096:	4699      	mov	r9, r3
 8008098:	dc36      	bgt.n	8008108 <_printf_float+0x360>
 800809a:	f04f 0b00 	mov.w	fp, #0
 800809e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80080a2:	f104 021a 	add.w	r2, r4, #26
 80080a6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80080a8:	9306      	str	r3, [sp, #24]
 80080aa:	eba3 0309 	sub.w	r3, r3, r9
 80080ae:	455b      	cmp	r3, fp
 80080b0:	dc31      	bgt.n	8008116 <_printf_float+0x36e>
 80080b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80080b4:	459a      	cmp	sl, r3
 80080b6:	dc3a      	bgt.n	800812e <_printf_float+0x386>
 80080b8:	6823      	ldr	r3, [r4, #0]
 80080ba:	07da      	lsls	r2, r3, #31
 80080bc:	d437      	bmi.n	800812e <_printf_float+0x386>
 80080be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80080c0:	ebaa 0903 	sub.w	r9, sl, r3
 80080c4:	9b06      	ldr	r3, [sp, #24]
 80080c6:	ebaa 0303 	sub.w	r3, sl, r3
 80080ca:	4599      	cmp	r9, r3
 80080cc:	bfa8      	it	ge
 80080ce:	4699      	movge	r9, r3
 80080d0:	f1b9 0f00 	cmp.w	r9, #0
 80080d4:	dc33      	bgt.n	800813e <_printf_float+0x396>
 80080d6:	f04f 0800 	mov.w	r8, #0
 80080da:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80080de:	f104 0b1a 	add.w	fp, r4, #26
 80080e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80080e4:	ebaa 0303 	sub.w	r3, sl, r3
 80080e8:	eba3 0309 	sub.w	r3, r3, r9
 80080ec:	4543      	cmp	r3, r8
 80080ee:	f77f af79 	ble.w	8007fe4 <_printf_float+0x23c>
 80080f2:	2301      	movs	r3, #1
 80080f4:	465a      	mov	r2, fp
 80080f6:	4631      	mov	r1, r6
 80080f8:	4628      	mov	r0, r5
 80080fa:	47b8      	blx	r7
 80080fc:	3001      	adds	r0, #1
 80080fe:	f43f aeae 	beq.w	8007e5e <_printf_float+0xb6>
 8008102:	f108 0801 	add.w	r8, r8, #1
 8008106:	e7ec      	b.n	80080e2 <_printf_float+0x33a>
 8008108:	4642      	mov	r2, r8
 800810a:	4631      	mov	r1, r6
 800810c:	4628      	mov	r0, r5
 800810e:	47b8      	blx	r7
 8008110:	3001      	adds	r0, #1
 8008112:	d1c2      	bne.n	800809a <_printf_float+0x2f2>
 8008114:	e6a3      	b.n	8007e5e <_printf_float+0xb6>
 8008116:	2301      	movs	r3, #1
 8008118:	4631      	mov	r1, r6
 800811a:	4628      	mov	r0, r5
 800811c:	9206      	str	r2, [sp, #24]
 800811e:	47b8      	blx	r7
 8008120:	3001      	adds	r0, #1
 8008122:	f43f ae9c 	beq.w	8007e5e <_printf_float+0xb6>
 8008126:	9a06      	ldr	r2, [sp, #24]
 8008128:	f10b 0b01 	add.w	fp, fp, #1
 800812c:	e7bb      	b.n	80080a6 <_printf_float+0x2fe>
 800812e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008132:	4631      	mov	r1, r6
 8008134:	4628      	mov	r0, r5
 8008136:	47b8      	blx	r7
 8008138:	3001      	adds	r0, #1
 800813a:	d1c0      	bne.n	80080be <_printf_float+0x316>
 800813c:	e68f      	b.n	8007e5e <_printf_float+0xb6>
 800813e:	9a06      	ldr	r2, [sp, #24]
 8008140:	464b      	mov	r3, r9
 8008142:	4442      	add	r2, r8
 8008144:	4631      	mov	r1, r6
 8008146:	4628      	mov	r0, r5
 8008148:	47b8      	blx	r7
 800814a:	3001      	adds	r0, #1
 800814c:	d1c3      	bne.n	80080d6 <_printf_float+0x32e>
 800814e:	e686      	b.n	8007e5e <_printf_float+0xb6>
 8008150:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008154:	f1ba 0f01 	cmp.w	sl, #1
 8008158:	dc01      	bgt.n	800815e <_printf_float+0x3b6>
 800815a:	07db      	lsls	r3, r3, #31
 800815c:	d536      	bpl.n	80081cc <_printf_float+0x424>
 800815e:	2301      	movs	r3, #1
 8008160:	4642      	mov	r2, r8
 8008162:	4631      	mov	r1, r6
 8008164:	4628      	mov	r0, r5
 8008166:	47b8      	blx	r7
 8008168:	3001      	adds	r0, #1
 800816a:	f43f ae78 	beq.w	8007e5e <_printf_float+0xb6>
 800816e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008172:	4631      	mov	r1, r6
 8008174:	4628      	mov	r0, r5
 8008176:	47b8      	blx	r7
 8008178:	3001      	adds	r0, #1
 800817a:	f43f ae70 	beq.w	8007e5e <_printf_float+0xb6>
 800817e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008182:	2200      	movs	r2, #0
 8008184:	2300      	movs	r3, #0
 8008186:	f10a 3aff 	add.w	sl, sl, #4294967295
 800818a:	f7f8 fcad 	bl	8000ae8 <__aeabi_dcmpeq>
 800818e:	b9c0      	cbnz	r0, 80081c2 <_printf_float+0x41a>
 8008190:	4653      	mov	r3, sl
 8008192:	f108 0201 	add.w	r2, r8, #1
 8008196:	4631      	mov	r1, r6
 8008198:	4628      	mov	r0, r5
 800819a:	47b8      	blx	r7
 800819c:	3001      	adds	r0, #1
 800819e:	d10c      	bne.n	80081ba <_printf_float+0x412>
 80081a0:	e65d      	b.n	8007e5e <_printf_float+0xb6>
 80081a2:	2301      	movs	r3, #1
 80081a4:	465a      	mov	r2, fp
 80081a6:	4631      	mov	r1, r6
 80081a8:	4628      	mov	r0, r5
 80081aa:	47b8      	blx	r7
 80081ac:	3001      	adds	r0, #1
 80081ae:	f43f ae56 	beq.w	8007e5e <_printf_float+0xb6>
 80081b2:	f108 0801 	add.w	r8, r8, #1
 80081b6:	45d0      	cmp	r8, sl
 80081b8:	dbf3      	blt.n	80081a2 <_printf_float+0x3fa>
 80081ba:	464b      	mov	r3, r9
 80081bc:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80081c0:	e6df      	b.n	8007f82 <_printf_float+0x1da>
 80081c2:	f04f 0800 	mov.w	r8, #0
 80081c6:	f104 0b1a 	add.w	fp, r4, #26
 80081ca:	e7f4      	b.n	80081b6 <_printf_float+0x40e>
 80081cc:	2301      	movs	r3, #1
 80081ce:	4642      	mov	r2, r8
 80081d0:	e7e1      	b.n	8008196 <_printf_float+0x3ee>
 80081d2:	2301      	movs	r3, #1
 80081d4:	464a      	mov	r2, r9
 80081d6:	4631      	mov	r1, r6
 80081d8:	4628      	mov	r0, r5
 80081da:	47b8      	blx	r7
 80081dc:	3001      	adds	r0, #1
 80081de:	f43f ae3e 	beq.w	8007e5e <_printf_float+0xb6>
 80081e2:	f108 0801 	add.w	r8, r8, #1
 80081e6:	68e3      	ldr	r3, [r4, #12]
 80081e8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80081ea:	1a5b      	subs	r3, r3, r1
 80081ec:	4543      	cmp	r3, r8
 80081ee:	dcf0      	bgt.n	80081d2 <_printf_float+0x42a>
 80081f0:	e6fc      	b.n	8007fec <_printf_float+0x244>
 80081f2:	f04f 0800 	mov.w	r8, #0
 80081f6:	f104 0919 	add.w	r9, r4, #25
 80081fa:	e7f4      	b.n	80081e6 <_printf_float+0x43e>

080081fc <_printf_common>:
 80081fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008200:	4616      	mov	r6, r2
 8008202:	4698      	mov	r8, r3
 8008204:	688a      	ldr	r2, [r1, #8]
 8008206:	690b      	ldr	r3, [r1, #16]
 8008208:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800820c:	4293      	cmp	r3, r2
 800820e:	bfb8      	it	lt
 8008210:	4613      	movlt	r3, r2
 8008212:	6033      	str	r3, [r6, #0]
 8008214:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008218:	4607      	mov	r7, r0
 800821a:	460c      	mov	r4, r1
 800821c:	b10a      	cbz	r2, 8008222 <_printf_common+0x26>
 800821e:	3301      	adds	r3, #1
 8008220:	6033      	str	r3, [r6, #0]
 8008222:	6823      	ldr	r3, [r4, #0]
 8008224:	0699      	lsls	r1, r3, #26
 8008226:	bf42      	ittt	mi
 8008228:	6833      	ldrmi	r3, [r6, #0]
 800822a:	3302      	addmi	r3, #2
 800822c:	6033      	strmi	r3, [r6, #0]
 800822e:	6825      	ldr	r5, [r4, #0]
 8008230:	f015 0506 	ands.w	r5, r5, #6
 8008234:	d106      	bne.n	8008244 <_printf_common+0x48>
 8008236:	f104 0a19 	add.w	sl, r4, #25
 800823a:	68e3      	ldr	r3, [r4, #12]
 800823c:	6832      	ldr	r2, [r6, #0]
 800823e:	1a9b      	subs	r3, r3, r2
 8008240:	42ab      	cmp	r3, r5
 8008242:	dc26      	bgt.n	8008292 <_printf_common+0x96>
 8008244:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008248:	6822      	ldr	r2, [r4, #0]
 800824a:	3b00      	subs	r3, #0
 800824c:	bf18      	it	ne
 800824e:	2301      	movne	r3, #1
 8008250:	0692      	lsls	r2, r2, #26
 8008252:	d42b      	bmi.n	80082ac <_printf_common+0xb0>
 8008254:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008258:	4641      	mov	r1, r8
 800825a:	4638      	mov	r0, r7
 800825c:	47c8      	blx	r9
 800825e:	3001      	adds	r0, #1
 8008260:	d01e      	beq.n	80082a0 <_printf_common+0xa4>
 8008262:	6823      	ldr	r3, [r4, #0]
 8008264:	6922      	ldr	r2, [r4, #16]
 8008266:	f003 0306 	and.w	r3, r3, #6
 800826a:	2b04      	cmp	r3, #4
 800826c:	bf02      	ittt	eq
 800826e:	68e5      	ldreq	r5, [r4, #12]
 8008270:	6833      	ldreq	r3, [r6, #0]
 8008272:	1aed      	subeq	r5, r5, r3
 8008274:	68a3      	ldr	r3, [r4, #8]
 8008276:	bf0c      	ite	eq
 8008278:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800827c:	2500      	movne	r5, #0
 800827e:	4293      	cmp	r3, r2
 8008280:	bfc4      	itt	gt
 8008282:	1a9b      	subgt	r3, r3, r2
 8008284:	18ed      	addgt	r5, r5, r3
 8008286:	2600      	movs	r6, #0
 8008288:	341a      	adds	r4, #26
 800828a:	42b5      	cmp	r5, r6
 800828c:	d11a      	bne.n	80082c4 <_printf_common+0xc8>
 800828e:	2000      	movs	r0, #0
 8008290:	e008      	b.n	80082a4 <_printf_common+0xa8>
 8008292:	2301      	movs	r3, #1
 8008294:	4652      	mov	r2, sl
 8008296:	4641      	mov	r1, r8
 8008298:	4638      	mov	r0, r7
 800829a:	47c8      	blx	r9
 800829c:	3001      	adds	r0, #1
 800829e:	d103      	bne.n	80082a8 <_printf_common+0xac>
 80082a0:	f04f 30ff 	mov.w	r0, #4294967295
 80082a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80082a8:	3501      	adds	r5, #1
 80082aa:	e7c6      	b.n	800823a <_printf_common+0x3e>
 80082ac:	18e1      	adds	r1, r4, r3
 80082ae:	1c5a      	adds	r2, r3, #1
 80082b0:	2030      	movs	r0, #48	@ 0x30
 80082b2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80082b6:	4422      	add	r2, r4
 80082b8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80082bc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80082c0:	3302      	adds	r3, #2
 80082c2:	e7c7      	b.n	8008254 <_printf_common+0x58>
 80082c4:	2301      	movs	r3, #1
 80082c6:	4622      	mov	r2, r4
 80082c8:	4641      	mov	r1, r8
 80082ca:	4638      	mov	r0, r7
 80082cc:	47c8      	blx	r9
 80082ce:	3001      	adds	r0, #1
 80082d0:	d0e6      	beq.n	80082a0 <_printf_common+0xa4>
 80082d2:	3601      	adds	r6, #1
 80082d4:	e7d9      	b.n	800828a <_printf_common+0x8e>
	...

080082d8 <_printf_i>:
 80082d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80082dc:	7e0f      	ldrb	r7, [r1, #24]
 80082de:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80082e0:	2f78      	cmp	r7, #120	@ 0x78
 80082e2:	4691      	mov	r9, r2
 80082e4:	4680      	mov	r8, r0
 80082e6:	460c      	mov	r4, r1
 80082e8:	469a      	mov	sl, r3
 80082ea:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80082ee:	d807      	bhi.n	8008300 <_printf_i+0x28>
 80082f0:	2f62      	cmp	r7, #98	@ 0x62
 80082f2:	d80a      	bhi.n	800830a <_printf_i+0x32>
 80082f4:	2f00      	cmp	r7, #0
 80082f6:	f000 80d2 	beq.w	800849e <_printf_i+0x1c6>
 80082fa:	2f58      	cmp	r7, #88	@ 0x58
 80082fc:	f000 80b9 	beq.w	8008472 <_printf_i+0x19a>
 8008300:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008304:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008308:	e03a      	b.n	8008380 <_printf_i+0xa8>
 800830a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800830e:	2b15      	cmp	r3, #21
 8008310:	d8f6      	bhi.n	8008300 <_printf_i+0x28>
 8008312:	a101      	add	r1, pc, #4	@ (adr r1, 8008318 <_printf_i+0x40>)
 8008314:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008318:	08008371 	.word	0x08008371
 800831c:	08008385 	.word	0x08008385
 8008320:	08008301 	.word	0x08008301
 8008324:	08008301 	.word	0x08008301
 8008328:	08008301 	.word	0x08008301
 800832c:	08008301 	.word	0x08008301
 8008330:	08008385 	.word	0x08008385
 8008334:	08008301 	.word	0x08008301
 8008338:	08008301 	.word	0x08008301
 800833c:	08008301 	.word	0x08008301
 8008340:	08008301 	.word	0x08008301
 8008344:	08008485 	.word	0x08008485
 8008348:	080083af 	.word	0x080083af
 800834c:	0800843f 	.word	0x0800843f
 8008350:	08008301 	.word	0x08008301
 8008354:	08008301 	.word	0x08008301
 8008358:	080084a7 	.word	0x080084a7
 800835c:	08008301 	.word	0x08008301
 8008360:	080083af 	.word	0x080083af
 8008364:	08008301 	.word	0x08008301
 8008368:	08008301 	.word	0x08008301
 800836c:	08008447 	.word	0x08008447
 8008370:	6833      	ldr	r3, [r6, #0]
 8008372:	1d1a      	adds	r2, r3, #4
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	6032      	str	r2, [r6, #0]
 8008378:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800837c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008380:	2301      	movs	r3, #1
 8008382:	e09d      	b.n	80084c0 <_printf_i+0x1e8>
 8008384:	6833      	ldr	r3, [r6, #0]
 8008386:	6820      	ldr	r0, [r4, #0]
 8008388:	1d19      	adds	r1, r3, #4
 800838a:	6031      	str	r1, [r6, #0]
 800838c:	0606      	lsls	r6, r0, #24
 800838e:	d501      	bpl.n	8008394 <_printf_i+0xbc>
 8008390:	681d      	ldr	r5, [r3, #0]
 8008392:	e003      	b.n	800839c <_printf_i+0xc4>
 8008394:	0645      	lsls	r5, r0, #25
 8008396:	d5fb      	bpl.n	8008390 <_printf_i+0xb8>
 8008398:	f9b3 5000 	ldrsh.w	r5, [r3]
 800839c:	2d00      	cmp	r5, #0
 800839e:	da03      	bge.n	80083a8 <_printf_i+0xd0>
 80083a0:	232d      	movs	r3, #45	@ 0x2d
 80083a2:	426d      	negs	r5, r5
 80083a4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80083a8:	4859      	ldr	r0, [pc, #356]	@ (8008510 <_printf_i+0x238>)
 80083aa:	230a      	movs	r3, #10
 80083ac:	e011      	b.n	80083d2 <_printf_i+0xfa>
 80083ae:	6821      	ldr	r1, [r4, #0]
 80083b0:	6833      	ldr	r3, [r6, #0]
 80083b2:	0608      	lsls	r0, r1, #24
 80083b4:	f853 5b04 	ldr.w	r5, [r3], #4
 80083b8:	d402      	bmi.n	80083c0 <_printf_i+0xe8>
 80083ba:	0649      	lsls	r1, r1, #25
 80083bc:	bf48      	it	mi
 80083be:	b2ad      	uxthmi	r5, r5
 80083c0:	2f6f      	cmp	r7, #111	@ 0x6f
 80083c2:	4853      	ldr	r0, [pc, #332]	@ (8008510 <_printf_i+0x238>)
 80083c4:	6033      	str	r3, [r6, #0]
 80083c6:	bf14      	ite	ne
 80083c8:	230a      	movne	r3, #10
 80083ca:	2308      	moveq	r3, #8
 80083cc:	2100      	movs	r1, #0
 80083ce:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80083d2:	6866      	ldr	r6, [r4, #4]
 80083d4:	60a6      	str	r6, [r4, #8]
 80083d6:	2e00      	cmp	r6, #0
 80083d8:	bfa2      	ittt	ge
 80083da:	6821      	ldrge	r1, [r4, #0]
 80083dc:	f021 0104 	bicge.w	r1, r1, #4
 80083e0:	6021      	strge	r1, [r4, #0]
 80083e2:	b90d      	cbnz	r5, 80083e8 <_printf_i+0x110>
 80083e4:	2e00      	cmp	r6, #0
 80083e6:	d04b      	beq.n	8008480 <_printf_i+0x1a8>
 80083e8:	4616      	mov	r6, r2
 80083ea:	fbb5 f1f3 	udiv	r1, r5, r3
 80083ee:	fb03 5711 	mls	r7, r3, r1, r5
 80083f2:	5dc7      	ldrb	r7, [r0, r7]
 80083f4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80083f8:	462f      	mov	r7, r5
 80083fa:	42bb      	cmp	r3, r7
 80083fc:	460d      	mov	r5, r1
 80083fe:	d9f4      	bls.n	80083ea <_printf_i+0x112>
 8008400:	2b08      	cmp	r3, #8
 8008402:	d10b      	bne.n	800841c <_printf_i+0x144>
 8008404:	6823      	ldr	r3, [r4, #0]
 8008406:	07df      	lsls	r7, r3, #31
 8008408:	d508      	bpl.n	800841c <_printf_i+0x144>
 800840a:	6923      	ldr	r3, [r4, #16]
 800840c:	6861      	ldr	r1, [r4, #4]
 800840e:	4299      	cmp	r1, r3
 8008410:	bfde      	ittt	le
 8008412:	2330      	movle	r3, #48	@ 0x30
 8008414:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008418:	f106 36ff 	addle.w	r6, r6, #4294967295
 800841c:	1b92      	subs	r2, r2, r6
 800841e:	6122      	str	r2, [r4, #16]
 8008420:	f8cd a000 	str.w	sl, [sp]
 8008424:	464b      	mov	r3, r9
 8008426:	aa03      	add	r2, sp, #12
 8008428:	4621      	mov	r1, r4
 800842a:	4640      	mov	r0, r8
 800842c:	f7ff fee6 	bl	80081fc <_printf_common>
 8008430:	3001      	adds	r0, #1
 8008432:	d14a      	bne.n	80084ca <_printf_i+0x1f2>
 8008434:	f04f 30ff 	mov.w	r0, #4294967295
 8008438:	b004      	add	sp, #16
 800843a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800843e:	6823      	ldr	r3, [r4, #0]
 8008440:	f043 0320 	orr.w	r3, r3, #32
 8008444:	6023      	str	r3, [r4, #0]
 8008446:	4833      	ldr	r0, [pc, #204]	@ (8008514 <_printf_i+0x23c>)
 8008448:	2778      	movs	r7, #120	@ 0x78
 800844a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800844e:	6823      	ldr	r3, [r4, #0]
 8008450:	6831      	ldr	r1, [r6, #0]
 8008452:	061f      	lsls	r7, r3, #24
 8008454:	f851 5b04 	ldr.w	r5, [r1], #4
 8008458:	d402      	bmi.n	8008460 <_printf_i+0x188>
 800845a:	065f      	lsls	r7, r3, #25
 800845c:	bf48      	it	mi
 800845e:	b2ad      	uxthmi	r5, r5
 8008460:	6031      	str	r1, [r6, #0]
 8008462:	07d9      	lsls	r1, r3, #31
 8008464:	bf44      	itt	mi
 8008466:	f043 0320 	orrmi.w	r3, r3, #32
 800846a:	6023      	strmi	r3, [r4, #0]
 800846c:	b11d      	cbz	r5, 8008476 <_printf_i+0x19e>
 800846e:	2310      	movs	r3, #16
 8008470:	e7ac      	b.n	80083cc <_printf_i+0xf4>
 8008472:	4827      	ldr	r0, [pc, #156]	@ (8008510 <_printf_i+0x238>)
 8008474:	e7e9      	b.n	800844a <_printf_i+0x172>
 8008476:	6823      	ldr	r3, [r4, #0]
 8008478:	f023 0320 	bic.w	r3, r3, #32
 800847c:	6023      	str	r3, [r4, #0]
 800847e:	e7f6      	b.n	800846e <_printf_i+0x196>
 8008480:	4616      	mov	r6, r2
 8008482:	e7bd      	b.n	8008400 <_printf_i+0x128>
 8008484:	6833      	ldr	r3, [r6, #0]
 8008486:	6825      	ldr	r5, [r4, #0]
 8008488:	6961      	ldr	r1, [r4, #20]
 800848a:	1d18      	adds	r0, r3, #4
 800848c:	6030      	str	r0, [r6, #0]
 800848e:	062e      	lsls	r6, r5, #24
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	d501      	bpl.n	8008498 <_printf_i+0x1c0>
 8008494:	6019      	str	r1, [r3, #0]
 8008496:	e002      	b.n	800849e <_printf_i+0x1c6>
 8008498:	0668      	lsls	r0, r5, #25
 800849a:	d5fb      	bpl.n	8008494 <_printf_i+0x1bc>
 800849c:	8019      	strh	r1, [r3, #0]
 800849e:	2300      	movs	r3, #0
 80084a0:	6123      	str	r3, [r4, #16]
 80084a2:	4616      	mov	r6, r2
 80084a4:	e7bc      	b.n	8008420 <_printf_i+0x148>
 80084a6:	6833      	ldr	r3, [r6, #0]
 80084a8:	1d1a      	adds	r2, r3, #4
 80084aa:	6032      	str	r2, [r6, #0]
 80084ac:	681e      	ldr	r6, [r3, #0]
 80084ae:	6862      	ldr	r2, [r4, #4]
 80084b0:	2100      	movs	r1, #0
 80084b2:	4630      	mov	r0, r6
 80084b4:	f7f7 fe9c 	bl	80001f0 <memchr>
 80084b8:	b108      	cbz	r0, 80084be <_printf_i+0x1e6>
 80084ba:	1b80      	subs	r0, r0, r6
 80084bc:	6060      	str	r0, [r4, #4]
 80084be:	6863      	ldr	r3, [r4, #4]
 80084c0:	6123      	str	r3, [r4, #16]
 80084c2:	2300      	movs	r3, #0
 80084c4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80084c8:	e7aa      	b.n	8008420 <_printf_i+0x148>
 80084ca:	6923      	ldr	r3, [r4, #16]
 80084cc:	4632      	mov	r2, r6
 80084ce:	4649      	mov	r1, r9
 80084d0:	4640      	mov	r0, r8
 80084d2:	47d0      	blx	sl
 80084d4:	3001      	adds	r0, #1
 80084d6:	d0ad      	beq.n	8008434 <_printf_i+0x15c>
 80084d8:	6823      	ldr	r3, [r4, #0]
 80084da:	079b      	lsls	r3, r3, #30
 80084dc:	d413      	bmi.n	8008506 <_printf_i+0x22e>
 80084de:	68e0      	ldr	r0, [r4, #12]
 80084e0:	9b03      	ldr	r3, [sp, #12]
 80084e2:	4298      	cmp	r0, r3
 80084e4:	bfb8      	it	lt
 80084e6:	4618      	movlt	r0, r3
 80084e8:	e7a6      	b.n	8008438 <_printf_i+0x160>
 80084ea:	2301      	movs	r3, #1
 80084ec:	4632      	mov	r2, r6
 80084ee:	4649      	mov	r1, r9
 80084f0:	4640      	mov	r0, r8
 80084f2:	47d0      	blx	sl
 80084f4:	3001      	adds	r0, #1
 80084f6:	d09d      	beq.n	8008434 <_printf_i+0x15c>
 80084f8:	3501      	adds	r5, #1
 80084fa:	68e3      	ldr	r3, [r4, #12]
 80084fc:	9903      	ldr	r1, [sp, #12]
 80084fe:	1a5b      	subs	r3, r3, r1
 8008500:	42ab      	cmp	r3, r5
 8008502:	dcf2      	bgt.n	80084ea <_printf_i+0x212>
 8008504:	e7eb      	b.n	80084de <_printf_i+0x206>
 8008506:	2500      	movs	r5, #0
 8008508:	f104 0619 	add.w	r6, r4, #25
 800850c:	e7f5      	b.n	80084fa <_printf_i+0x222>
 800850e:	bf00      	nop
 8008510:	0800d468 	.word	0x0800d468
 8008514:	0800d479 	.word	0x0800d479

08008518 <std>:
 8008518:	2300      	movs	r3, #0
 800851a:	b510      	push	{r4, lr}
 800851c:	4604      	mov	r4, r0
 800851e:	e9c0 3300 	strd	r3, r3, [r0]
 8008522:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008526:	6083      	str	r3, [r0, #8]
 8008528:	8181      	strh	r1, [r0, #12]
 800852a:	6643      	str	r3, [r0, #100]	@ 0x64
 800852c:	81c2      	strh	r2, [r0, #14]
 800852e:	6183      	str	r3, [r0, #24]
 8008530:	4619      	mov	r1, r3
 8008532:	2208      	movs	r2, #8
 8008534:	305c      	adds	r0, #92	@ 0x5c
 8008536:	f000 f974 	bl	8008822 <memset>
 800853a:	4b0d      	ldr	r3, [pc, #52]	@ (8008570 <std+0x58>)
 800853c:	6263      	str	r3, [r4, #36]	@ 0x24
 800853e:	4b0d      	ldr	r3, [pc, #52]	@ (8008574 <std+0x5c>)
 8008540:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008542:	4b0d      	ldr	r3, [pc, #52]	@ (8008578 <std+0x60>)
 8008544:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008546:	4b0d      	ldr	r3, [pc, #52]	@ (800857c <std+0x64>)
 8008548:	6323      	str	r3, [r4, #48]	@ 0x30
 800854a:	4b0d      	ldr	r3, [pc, #52]	@ (8008580 <std+0x68>)
 800854c:	6224      	str	r4, [r4, #32]
 800854e:	429c      	cmp	r4, r3
 8008550:	d006      	beq.n	8008560 <std+0x48>
 8008552:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008556:	4294      	cmp	r4, r2
 8008558:	d002      	beq.n	8008560 <std+0x48>
 800855a:	33d0      	adds	r3, #208	@ 0xd0
 800855c:	429c      	cmp	r4, r3
 800855e:	d105      	bne.n	800856c <std+0x54>
 8008560:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008564:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008568:	f000 bf72 	b.w	8009450 <__retarget_lock_init_recursive>
 800856c:	bd10      	pop	{r4, pc}
 800856e:	bf00      	nop
 8008570:	08008799 	.word	0x08008799
 8008574:	080087bf 	.word	0x080087bf
 8008578:	080087f7 	.word	0x080087f7
 800857c:	0800881b 	.word	0x0800881b
 8008580:	20004ac4 	.word	0x20004ac4

08008584 <stdio_exit_handler>:
 8008584:	4a02      	ldr	r2, [pc, #8]	@ (8008590 <stdio_exit_handler+0xc>)
 8008586:	4903      	ldr	r1, [pc, #12]	@ (8008594 <stdio_exit_handler+0x10>)
 8008588:	4803      	ldr	r0, [pc, #12]	@ (8008598 <stdio_exit_handler+0x14>)
 800858a:	f000 b869 	b.w	8008660 <_fwalk_sglue>
 800858e:	bf00      	nop
 8008590:	20000018 	.word	0x20000018
 8008594:	0800bd51 	.word	0x0800bd51
 8008598:	2000019c 	.word	0x2000019c

0800859c <cleanup_stdio>:
 800859c:	6841      	ldr	r1, [r0, #4]
 800859e:	4b0c      	ldr	r3, [pc, #48]	@ (80085d0 <cleanup_stdio+0x34>)
 80085a0:	4299      	cmp	r1, r3
 80085a2:	b510      	push	{r4, lr}
 80085a4:	4604      	mov	r4, r0
 80085a6:	d001      	beq.n	80085ac <cleanup_stdio+0x10>
 80085a8:	f003 fbd2 	bl	800bd50 <_fflush_r>
 80085ac:	68a1      	ldr	r1, [r4, #8]
 80085ae:	4b09      	ldr	r3, [pc, #36]	@ (80085d4 <cleanup_stdio+0x38>)
 80085b0:	4299      	cmp	r1, r3
 80085b2:	d002      	beq.n	80085ba <cleanup_stdio+0x1e>
 80085b4:	4620      	mov	r0, r4
 80085b6:	f003 fbcb 	bl	800bd50 <_fflush_r>
 80085ba:	68e1      	ldr	r1, [r4, #12]
 80085bc:	4b06      	ldr	r3, [pc, #24]	@ (80085d8 <cleanup_stdio+0x3c>)
 80085be:	4299      	cmp	r1, r3
 80085c0:	d004      	beq.n	80085cc <cleanup_stdio+0x30>
 80085c2:	4620      	mov	r0, r4
 80085c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80085c8:	f003 bbc2 	b.w	800bd50 <_fflush_r>
 80085cc:	bd10      	pop	{r4, pc}
 80085ce:	bf00      	nop
 80085d0:	20004ac4 	.word	0x20004ac4
 80085d4:	20004b2c 	.word	0x20004b2c
 80085d8:	20004b94 	.word	0x20004b94

080085dc <global_stdio_init.part.0>:
 80085dc:	b510      	push	{r4, lr}
 80085de:	4b0b      	ldr	r3, [pc, #44]	@ (800860c <global_stdio_init.part.0+0x30>)
 80085e0:	4c0b      	ldr	r4, [pc, #44]	@ (8008610 <global_stdio_init.part.0+0x34>)
 80085e2:	4a0c      	ldr	r2, [pc, #48]	@ (8008614 <global_stdio_init.part.0+0x38>)
 80085e4:	601a      	str	r2, [r3, #0]
 80085e6:	4620      	mov	r0, r4
 80085e8:	2200      	movs	r2, #0
 80085ea:	2104      	movs	r1, #4
 80085ec:	f7ff ff94 	bl	8008518 <std>
 80085f0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80085f4:	2201      	movs	r2, #1
 80085f6:	2109      	movs	r1, #9
 80085f8:	f7ff ff8e 	bl	8008518 <std>
 80085fc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008600:	2202      	movs	r2, #2
 8008602:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008606:	2112      	movs	r1, #18
 8008608:	f7ff bf86 	b.w	8008518 <std>
 800860c:	20004bfc 	.word	0x20004bfc
 8008610:	20004ac4 	.word	0x20004ac4
 8008614:	08008585 	.word	0x08008585

08008618 <__sfp_lock_acquire>:
 8008618:	4801      	ldr	r0, [pc, #4]	@ (8008620 <__sfp_lock_acquire+0x8>)
 800861a:	f000 bf1b 	b.w	8009454 <__retarget_lock_acquire_recursive>
 800861e:	bf00      	nop
 8008620:	20004c2b 	.word	0x20004c2b

08008624 <__sfp_lock_release>:
 8008624:	4801      	ldr	r0, [pc, #4]	@ (800862c <__sfp_lock_release+0x8>)
 8008626:	f000 bf17 	b.w	8009458 <__retarget_lock_release_recursive>
 800862a:	bf00      	nop
 800862c:	20004c2b 	.word	0x20004c2b

08008630 <__sinit>:
 8008630:	b510      	push	{r4, lr}
 8008632:	4604      	mov	r4, r0
 8008634:	f7ff fff0 	bl	8008618 <__sfp_lock_acquire>
 8008638:	6a23      	ldr	r3, [r4, #32]
 800863a:	b11b      	cbz	r3, 8008644 <__sinit+0x14>
 800863c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008640:	f7ff bff0 	b.w	8008624 <__sfp_lock_release>
 8008644:	4b04      	ldr	r3, [pc, #16]	@ (8008658 <__sinit+0x28>)
 8008646:	6223      	str	r3, [r4, #32]
 8008648:	4b04      	ldr	r3, [pc, #16]	@ (800865c <__sinit+0x2c>)
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	2b00      	cmp	r3, #0
 800864e:	d1f5      	bne.n	800863c <__sinit+0xc>
 8008650:	f7ff ffc4 	bl	80085dc <global_stdio_init.part.0>
 8008654:	e7f2      	b.n	800863c <__sinit+0xc>
 8008656:	bf00      	nop
 8008658:	0800859d 	.word	0x0800859d
 800865c:	20004bfc 	.word	0x20004bfc

08008660 <_fwalk_sglue>:
 8008660:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008664:	4607      	mov	r7, r0
 8008666:	4688      	mov	r8, r1
 8008668:	4614      	mov	r4, r2
 800866a:	2600      	movs	r6, #0
 800866c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008670:	f1b9 0901 	subs.w	r9, r9, #1
 8008674:	d505      	bpl.n	8008682 <_fwalk_sglue+0x22>
 8008676:	6824      	ldr	r4, [r4, #0]
 8008678:	2c00      	cmp	r4, #0
 800867a:	d1f7      	bne.n	800866c <_fwalk_sglue+0xc>
 800867c:	4630      	mov	r0, r6
 800867e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008682:	89ab      	ldrh	r3, [r5, #12]
 8008684:	2b01      	cmp	r3, #1
 8008686:	d907      	bls.n	8008698 <_fwalk_sglue+0x38>
 8008688:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800868c:	3301      	adds	r3, #1
 800868e:	d003      	beq.n	8008698 <_fwalk_sglue+0x38>
 8008690:	4629      	mov	r1, r5
 8008692:	4638      	mov	r0, r7
 8008694:	47c0      	blx	r8
 8008696:	4306      	orrs	r6, r0
 8008698:	3568      	adds	r5, #104	@ 0x68
 800869a:	e7e9      	b.n	8008670 <_fwalk_sglue+0x10>

0800869c <sniprintf>:
 800869c:	b40c      	push	{r2, r3}
 800869e:	b530      	push	{r4, r5, lr}
 80086a0:	4b17      	ldr	r3, [pc, #92]	@ (8008700 <sniprintf+0x64>)
 80086a2:	1e0c      	subs	r4, r1, #0
 80086a4:	681d      	ldr	r5, [r3, #0]
 80086a6:	b09d      	sub	sp, #116	@ 0x74
 80086a8:	da08      	bge.n	80086bc <sniprintf+0x20>
 80086aa:	238b      	movs	r3, #139	@ 0x8b
 80086ac:	602b      	str	r3, [r5, #0]
 80086ae:	f04f 30ff 	mov.w	r0, #4294967295
 80086b2:	b01d      	add	sp, #116	@ 0x74
 80086b4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80086b8:	b002      	add	sp, #8
 80086ba:	4770      	bx	lr
 80086bc:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80086c0:	f8ad 3014 	strh.w	r3, [sp, #20]
 80086c4:	bf14      	ite	ne
 80086c6:	f104 33ff 	addne.w	r3, r4, #4294967295
 80086ca:	4623      	moveq	r3, r4
 80086cc:	9304      	str	r3, [sp, #16]
 80086ce:	9307      	str	r3, [sp, #28]
 80086d0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80086d4:	9002      	str	r0, [sp, #8]
 80086d6:	9006      	str	r0, [sp, #24]
 80086d8:	f8ad 3016 	strh.w	r3, [sp, #22]
 80086dc:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80086de:	ab21      	add	r3, sp, #132	@ 0x84
 80086e0:	a902      	add	r1, sp, #8
 80086e2:	4628      	mov	r0, r5
 80086e4:	9301      	str	r3, [sp, #4]
 80086e6:	f002 fe99 	bl	800b41c <_svfiprintf_r>
 80086ea:	1c43      	adds	r3, r0, #1
 80086ec:	bfbc      	itt	lt
 80086ee:	238b      	movlt	r3, #139	@ 0x8b
 80086f0:	602b      	strlt	r3, [r5, #0]
 80086f2:	2c00      	cmp	r4, #0
 80086f4:	d0dd      	beq.n	80086b2 <sniprintf+0x16>
 80086f6:	9b02      	ldr	r3, [sp, #8]
 80086f8:	2200      	movs	r2, #0
 80086fa:	701a      	strb	r2, [r3, #0]
 80086fc:	e7d9      	b.n	80086b2 <sniprintf+0x16>
 80086fe:	bf00      	nop
 8008700:	20000198 	.word	0x20000198

08008704 <siprintf>:
 8008704:	b40e      	push	{r1, r2, r3}
 8008706:	b500      	push	{lr}
 8008708:	b09c      	sub	sp, #112	@ 0x70
 800870a:	ab1d      	add	r3, sp, #116	@ 0x74
 800870c:	9002      	str	r0, [sp, #8]
 800870e:	9006      	str	r0, [sp, #24]
 8008710:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8008714:	4809      	ldr	r0, [pc, #36]	@ (800873c <siprintf+0x38>)
 8008716:	9107      	str	r1, [sp, #28]
 8008718:	9104      	str	r1, [sp, #16]
 800871a:	4909      	ldr	r1, [pc, #36]	@ (8008740 <siprintf+0x3c>)
 800871c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008720:	9105      	str	r1, [sp, #20]
 8008722:	6800      	ldr	r0, [r0, #0]
 8008724:	9301      	str	r3, [sp, #4]
 8008726:	a902      	add	r1, sp, #8
 8008728:	f002 fe78 	bl	800b41c <_svfiprintf_r>
 800872c:	9b02      	ldr	r3, [sp, #8]
 800872e:	2200      	movs	r2, #0
 8008730:	701a      	strb	r2, [r3, #0]
 8008732:	b01c      	add	sp, #112	@ 0x70
 8008734:	f85d eb04 	ldr.w	lr, [sp], #4
 8008738:	b003      	add	sp, #12
 800873a:	4770      	bx	lr
 800873c:	20000198 	.word	0x20000198
 8008740:	ffff0208 	.word	0xffff0208

08008744 <siscanf>:
 8008744:	b40e      	push	{r1, r2, r3}
 8008746:	b530      	push	{r4, r5, lr}
 8008748:	b09c      	sub	sp, #112	@ 0x70
 800874a:	ac1f      	add	r4, sp, #124	@ 0x7c
 800874c:	f44f 7201 	mov.w	r2, #516	@ 0x204
 8008750:	f854 5b04 	ldr.w	r5, [r4], #4
 8008754:	f8ad 2014 	strh.w	r2, [sp, #20]
 8008758:	9002      	str	r0, [sp, #8]
 800875a:	9006      	str	r0, [sp, #24]
 800875c:	f7f7 fd98 	bl	8000290 <strlen>
 8008760:	4b0b      	ldr	r3, [pc, #44]	@ (8008790 <siscanf+0x4c>)
 8008762:	9003      	str	r0, [sp, #12]
 8008764:	9007      	str	r0, [sp, #28]
 8008766:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008768:	480a      	ldr	r0, [pc, #40]	@ (8008794 <siscanf+0x50>)
 800876a:	9401      	str	r4, [sp, #4]
 800876c:	2300      	movs	r3, #0
 800876e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008770:	9314      	str	r3, [sp, #80]	@ 0x50
 8008772:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8008776:	f8ad 3016 	strh.w	r3, [sp, #22]
 800877a:	462a      	mov	r2, r5
 800877c:	4623      	mov	r3, r4
 800877e:	a902      	add	r1, sp, #8
 8008780:	6800      	ldr	r0, [r0, #0]
 8008782:	f002 ff9f 	bl	800b6c4 <__ssvfiscanf_r>
 8008786:	b01c      	add	sp, #112	@ 0x70
 8008788:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800878c:	b003      	add	sp, #12
 800878e:	4770      	bx	lr
 8008790:	080087bb 	.word	0x080087bb
 8008794:	20000198 	.word	0x20000198

08008798 <__sread>:
 8008798:	b510      	push	{r4, lr}
 800879a:	460c      	mov	r4, r1
 800879c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80087a0:	f000 fdf8 	bl	8009394 <_read_r>
 80087a4:	2800      	cmp	r0, #0
 80087a6:	bfab      	itete	ge
 80087a8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80087aa:	89a3      	ldrhlt	r3, [r4, #12]
 80087ac:	181b      	addge	r3, r3, r0
 80087ae:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80087b2:	bfac      	ite	ge
 80087b4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80087b6:	81a3      	strhlt	r3, [r4, #12]
 80087b8:	bd10      	pop	{r4, pc}

080087ba <__seofread>:
 80087ba:	2000      	movs	r0, #0
 80087bc:	4770      	bx	lr

080087be <__swrite>:
 80087be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80087c2:	461f      	mov	r7, r3
 80087c4:	898b      	ldrh	r3, [r1, #12]
 80087c6:	05db      	lsls	r3, r3, #23
 80087c8:	4605      	mov	r5, r0
 80087ca:	460c      	mov	r4, r1
 80087cc:	4616      	mov	r6, r2
 80087ce:	d505      	bpl.n	80087dc <__swrite+0x1e>
 80087d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80087d4:	2302      	movs	r3, #2
 80087d6:	2200      	movs	r2, #0
 80087d8:	f000 fdca 	bl	8009370 <_lseek_r>
 80087dc:	89a3      	ldrh	r3, [r4, #12]
 80087de:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80087e2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80087e6:	81a3      	strh	r3, [r4, #12]
 80087e8:	4632      	mov	r2, r6
 80087ea:	463b      	mov	r3, r7
 80087ec:	4628      	mov	r0, r5
 80087ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80087f2:	f000 bdf1 	b.w	80093d8 <_write_r>

080087f6 <__sseek>:
 80087f6:	b510      	push	{r4, lr}
 80087f8:	460c      	mov	r4, r1
 80087fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80087fe:	f000 fdb7 	bl	8009370 <_lseek_r>
 8008802:	1c43      	adds	r3, r0, #1
 8008804:	89a3      	ldrh	r3, [r4, #12]
 8008806:	bf15      	itete	ne
 8008808:	6560      	strne	r0, [r4, #84]	@ 0x54
 800880a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800880e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008812:	81a3      	strheq	r3, [r4, #12]
 8008814:	bf18      	it	ne
 8008816:	81a3      	strhne	r3, [r4, #12]
 8008818:	bd10      	pop	{r4, pc}

0800881a <__sclose>:
 800881a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800881e:	f000 bd97 	b.w	8009350 <_close_r>

08008822 <memset>:
 8008822:	4402      	add	r2, r0
 8008824:	4603      	mov	r3, r0
 8008826:	4293      	cmp	r3, r2
 8008828:	d100      	bne.n	800882c <memset+0xa>
 800882a:	4770      	bx	lr
 800882c:	f803 1b01 	strb.w	r1, [r3], #1
 8008830:	e7f9      	b.n	8008826 <memset+0x4>

08008832 <strncmp>:
 8008832:	b510      	push	{r4, lr}
 8008834:	b16a      	cbz	r2, 8008852 <strncmp+0x20>
 8008836:	3901      	subs	r1, #1
 8008838:	1884      	adds	r4, r0, r2
 800883a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800883e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8008842:	429a      	cmp	r2, r3
 8008844:	d103      	bne.n	800884e <strncmp+0x1c>
 8008846:	42a0      	cmp	r0, r4
 8008848:	d001      	beq.n	800884e <strncmp+0x1c>
 800884a:	2a00      	cmp	r2, #0
 800884c:	d1f5      	bne.n	800883a <strncmp+0x8>
 800884e:	1ad0      	subs	r0, r2, r3
 8008850:	bd10      	pop	{r4, pc}
 8008852:	4610      	mov	r0, r2
 8008854:	e7fc      	b.n	8008850 <strncmp+0x1e>

08008856 <strstr>:
 8008856:	780a      	ldrb	r2, [r1, #0]
 8008858:	b570      	push	{r4, r5, r6, lr}
 800885a:	b96a      	cbnz	r2, 8008878 <strstr+0x22>
 800885c:	bd70      	pop	{r4, r5, r6, pc}
 800885e:	429a      	cmp	r2, r3
 8008860:	d109      	bne.n	8008876 <strstr+0x20>
 8008862:	460c      	mov	r4, r1
 8008864:	4605      	mov	r5, r0
 8008866:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800886a:	2b00      	cmp	r3, #0
 800886c:	d0f6      	beq.n	800885c <strstr+0x6>
 800886e:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8008872:	429e      	cmp	r6, r3
 8008874:	d0f7      	beq.n	8008866 <strstr+0x10>
 8008876:	3001      	adds	r0, #1
 8008878:	7803      	ldrb	r3, [r0, #0]
 800887a:	2b00      	cmp	r3, #0
 800887c:	d1ef      	bne.n	800885e <strstr+0x8>
 800887e:	4618      	mov	r0, r3
 8008880:	e7ec      	b.n	800885c <strstr+0x6>
	...

08008884 <validate_structure>:
 8008884:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008886:	6801      	ldr	r1, [r0, #0]
 8008888:	293b      	cmp	r1, #59	@ 0x3b
 800888a:	4604      	mov	r4, r0
 800888c:	d911      	bls.n	80088b2 <validate_structure+0x2e>
 800888e:	223c      	movs	r2, #60	@ 0x3c
 8008890:	4668      	mov	r0, sp
 8008892:	f000 fe01 	bl	8009498 <div>
 8008896:	9a01      	ldr	r2, [sp, #4]
 8008898:	6863      	ldr	r3, [r4, #4]
 800889a:	9900      	ldr	r1, [sp, #0]
 800889c:	2a00      	cmp	r2, #0
 800889e:	440b      	add	r3, r1
 80088a0:	6063      	str	r3, [r4, #4]
 80088a2:	bfbb      	ittet	lt
 80088a4:	323c      	addlt	r2, #60	@ 0x3c
 80088a6:	f103 33ff 	addlt.w	r3, r3, #4294967295
 80088aa:	6022      	strge	r2, [r4, #0]
 80088ac:	6022      	strlt	r2, [r4, #0]
 80088ae:	bfb8      	it	lt
 80088b0:	6063      	strlt	r3, [r4, #4]
 80088b2:	6861      	ldr	r1, [r4, #4]
 80088b4:	293b      	cmp	r1, #59	@ 0x3b
 80088b6:	d911      	bls.n	80088dc <validate_structure+0x58>
 80088b8:	223c      	movs	r2, #60	@ 0x3c
 80088ba:	4668      	mov	r0, sp
 80088bc:	f000 fdec 	bl	8009498 <div>
 80088c0:	9a01      	ldr	r2, [sp, #4]
 80088c2:	68a3      	ldr	r3, [r4, #8]
 80088c4:	9900      	ldr	r1, [sp, #0]
 80088c6:	2a00      	cmp	r2, #0
 80088c8:	440b      	add	r3, r1
 80088ca:	60a3      	str	r3, [r4, #8]
 80088cc:	bfbb      	ittet	lt
 80088ce:	323c      	addlt	r2, #60	@ 0x3c
 80088d0:	f103 33ff 	addlt.w	r3, r3, #4294967295
 80088d4:	6062      	strge	r2, [r4, #4]
 80088d6:	6062      	strlt	r2, [r4, #4]
 80088d8:	bfb8      	it	lt
 80088da:	60a3      	strlt	r3, [r4, #8]
 80088dc:	68a1      	ldr	r1, [r4, #8]
 80088de:	2917      	cmp	r1, #23
 80088e0:	d911      	bls.n	8008906 <validate_structure+0x82>
 80088e2:	2218      	movs	r2, #24
 80088e4:	4668      	mov	r0, sp
 80088e6:	f000 fdd7 	bl	8009498 <div>
 80088ea:	9a01      	ldr	r2, [sp, #4]
 80088ec:	68e3      	ldr	r3, [r4, #12]
 80088ee:	9900      	ldr	r1, [sp, #0]
 80088f0:	2a00      	cmp	r2, #0
 80088f2:	440b      	add	r3, r1
 80088f4:	60e3      	str	r3, [r4, #12]
 80088f6:	bfbb      	ittet	lt
 80088f8:	3218      	addlt	r2, #24
 80088fa:	f103 33ff 	addlt.w	r3, r3, #4294967295
 80088fe:	60a2      	strge	r2, [r4, #8]
 8008900:	60a2      	strlt	r2, [r4, #8]
 8008902:	bfb8      	it	lt
 8008904:	60e3      	strlt	r3, [r4, #12]
 8008906:	6921      	ldr	r1, [r4, #16]
 8008908:	290b      	cmp	r1, #11
 800890a:	d911      	bls.n	8008930 <validate_structure+0xac>
 800890c:	220c      	movs	r2, #12
 800890e:	4668      	mov	r0, sp
 8008910:	f000 fdc2 	bl	8009498 <div>
 8008914:	9a01      	ldr	r2, [sp, #4]
 8008916:	6963      	ldr	r3, [r4, #20]
 8008918:	9900      	ldr	r1, [sp, #0]
 800891a:	2a00      	cmp	r2, #0
 800891c:	440b      	add	r3, r1
 800891e:	6163      	str	r3, [r4, #20]
 8008920:	bfbb      	ittet	lt
 8008922:	320c      	addlt	r2, #12
 8008924:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8008928:	6122      	strge	r2, [r4, #16]
 800892a:	6122      	strlt	r2, [r4, #16]
 800892c:	bfb8      	it	lt
 800892e:	6163      	strlt	r3, [r4, #20]
 8008930:	6963      	ldr	r3, [r4, #20]
 8008932:	079a      	lsls	r2, r3, #30
 8008934:	d11c      	bne.n	8008970 <validate_structure+0xec>
 8008936:	2164      	movs	r1, #100	@ 0x64
 8008938:	fb93 f2f1 	sdiv	r2, r3, r1
 800893c:	fb01 3212 	mls	r2, r1, r2, r3
 8008940:	b9c2      	cbnz	r2, 8008974 <validate_structure+0xf0>
 8008942:	f203 736c 	addw	r3, r3, #1900	@ 0x76c
 8008946:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800894a:	fb93 f1f2 	sdiv	r1, r3, r2
 800894e:	fb02 3311 	mls	r3, r2, r1, r3
 8008952:	2b00      	cmp	r3, #0
 8008954:	bf14      	ite	ne
 8008956:	231c      	movne	r3, #28
 8008958:	231d      	moveq	r3, #29
 800895a:	68e2      	ldr	r2, [r4, #12]
 800895c:	2a00      	cmp	r2, #0
 800895e:	dc0b      	bgt.n	8008978 <validate_structure+0xf4>
 8008960:	4d31      	ldr	r5, [pc, #196]	@ (8008a28 <validate_structure+0x1a4>)
 8008962:	200b      	movs	r0, #11
 8008964:	2164      	movs	r1, #100	@ 0x64
 8008966:	68e6      	ldr	r6, [r4, #12]
 8008968:	2e00      	cmp	r6, #0
 800896a:	dd30      	ble.n	80089ce <validate_structure+0x14a>
 800896c:	b003      	add	sp, #12
 800896e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008970:	231c      	movs	r3, #28
 8008972:	e7f2      	b.n	800895a <validate_structure+0xd6>
 8008974:	231d      	movs	r3, #29
 8008976:	e7f0      	b.n	800895a <validate_structure+0xd6>
 8008978:	4d2b      	ldr	r5, [pc, #172]	@ (8008a28 <validate_structure+0x1a4>)
 800897a:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
 800897e:	2a01      	cmp	r2, #1
 8008980:	bf14      	ite	ne
 8008982:	f855 0022 	ldrne.w	r0, [r5, r2, lsl #2]
 8008986:	4618      	moveq	r0, r3
 8008988:	4281      	cmp	r1, r0
 800898a:	ddef      	ble.n	800896c <validate_structure+0xe8>
 800898c:	3201      	adds	r2, #1
 800898e:	1a09      	subs	r1, r1, r0
 8008990:	2a0c      	cmp	r2, #12
 8008992:	60e1      	str	r1, [r4, #12]
 8008994:	6122      	str	r2, [r4, #16]
 8008996:	d1f0      	bne.n	800897a <validate_structure+0xf6>
 8008998:	6963      	ldr	r3, [r4, #20]
 800899a:	2100      	movs	r1, #0
 800899c:	1c5a      	adds	r2, r3, #1
 800899e:	6121      	str	r1, [r4, #16]
 80089a0:	0791      	lsls	r1, r2, #30
 80089a2:	6162      	str	r2, [r4, #20]
 80089a4:	d13c      	bne.n	8008a20 <validate_structure+0x19c>
 80089a6:	2164      	movs	r1, #100	@ 0x64
 80089a8:	fb92 f0f1 	sdiv	r0, r2, r1
 80089ac:	fb01 2210 	mls	r2, r1, r0, r2
 80089b0:	2a00      	cmp	r2, #0
 80089b2:	d137      	bne.n	8008a24 <validate_structure+0x1a0>
 80089b4:	f203 736d 	addw	r3, r3, #1901	@ 0x76d
 80089b8:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 80089bc:	fb93 f1f2 	sdiv	r1, r3, r2
 80089c0:	fb02 3311 	mls	r3, r2, r1, r3
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	bf14      	ite	ne
 80089c8:	231c      	movne	r3, #28
 80089ca:	231d      	moveq	r3, #29
 80089cc:	e7d5      	b.n	800897a <validate_structure+0xf6>
 80089ce:	6922      	ldr	r2, [r4, #16]
 80089d0:	3a01      	subs	r2, #1
 80089d2:	6122      	str	r2, [r4, #16]
 80089d4:	3201      	adds	r2, #1
 80089d6:	d116      	bne.n	8008a06 <validate_structure+0x182>
 80089d8:	6963      	ldr	r3, [r4, #20]
 80089da:	1e5a      	subs	r2, r3, #1
 80089dc:	0797      	lsls	r7, r2, #30
 80089de:	e9c4 0204 	strd	r0, r2, [r4, #16]
 80089e2:	d119      	bne.n	8008a18 <validate_structure+0x194>
 80089e4:	fb92 f7f1 	sdiv	r7, r2, r1
 80089e8:	fb01 2217 	mls	r2, r1, r7, r2
 80089ec:	b9b2      	cbnz	r2, 8008a1c <validate_structure+0x198>
 80089ee:	f203 736b 	addw	r3, r3, #1899	@ 0x76b
 80089f2:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 80089f6:	fb93 f7f2 	sdiv	r7, r3, r2
 80089fa:	fb02 3317 	mls	r3, r2, r7, r3
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	bf14      	ite	ne
 8008a02:	231c      	movne	r3, #28
 8008a04:	231d      	moveq	r3, #29
 8008a06:	6922      	ldr	r2, [r4, #16]
 8008a08:	2a01      	cmp	r2, #1
 8008a0a:	bf14      	ite	ne
 8008a0c:	f855 2022 	ldrne.w	r2, [r5, r2, lsl #2]
 8008a10:	461a      	moveq	r2, r3
 8008a12:	4432      	add	r2, r6
 8008a14:	60e2      	str	r2, [r4, #12]
 8008a16:	e7a6      	b.n	8008966 <validate_structure+0xe2>
 8008a18:	231c      	movs	r3, #28
 8008a1a:	e7f4      	b.n	8008a06 <validate_structure+0x182>
 8008a1c:	231d      	movs	r3, #29
 8008a1e:	e7f2      	b.n	8008a06 <validate_structure+0x182>
 8008a20:	231c      	movs	r3, #28
 8008a22:	e7aa      	b.n	800897a <validate_structure+0xf6>
 8008a24:	231d      	movs	r3, #29
 8008a26:	e7a8      	b.n	800897a <validate_structure+0xf6>
 8008a28:	0800d4bc 	.word	0x0800d4bc

08008a2c <mktime>:
 8008a2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a30:	b085      	sub	sp, #20
 8008a32:	4607      	mov	r7, r0
 8008a34:	f003 fa42 	bl	800bebc <__gettzinfo>
 8008a38:	4681      	mov	r9, r0
 8008a3a:	4638      	mov	r0, r7
 8008a3c:	f7ff ff22 	bl	8008884 <validate_structure>
 8008a40:	e9d7 4300 	ldrd	r4, r3, [r7]
 8008a44:	223c      	movs	r2, #60	@ 0x3c
 8008a46:	fb02 4403 	mla	r4, r2, r3, r4
 8008a4a:	68bb      	ldr	r3, [r7, #8]
 8008a4c:	697d      	ldr	r5, [r7, #20]
 8008a4e:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 8008a52:	fb02 4403 	mla	r4, r2, r3, r4
 8008a56:	e9d7 6303 	ldrd	r6, r3, [r7, #12]
 8008a5a:	4ac1      	ldr	r2, [pc, #772]	@ (8008d60 <mktime+0x334>)
 8008a5c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8008a60:	3e01      	subs	r6, #1
 8008a62:	2b01      	cmp	r3, #1
 8008a64:	4416      	add	r6, r2
 8008a66:	dd11      	ble.n	8008a8c <mktime+0x60>
 8008a68:	07a9      	lsls	r1, r5, #30
 8008a6a:	d10f      	bne.n	8008a8c <mktime+0x60>
 8008a6c:	2264      	movs	r2, #100	@ 0x64
 8008a6e:	fb95 f3f2 	sdiv	r3, r5, r2
 8008a72:	fb02 5313 	mls	r3, r2, r3, r5
 8008a76:	b943      	cbnz	r3, 8008a8a <mktime+0x5e>
 8008a78:	f205 736c 	addw	r3, r5, #1900	@ 0x76c
 8008a7c:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8008a80:	fb93 f1f2 	sdiv	r1, r3, r2
 8008a84:	fb02 3311 	mls	r3, r2, r1, r3
 8008a88:	b903      	cbnz	r3, 8008a8c <mktime+0x60>
 8008a8a:	3601      	adds	r6, #1
 8008a8c:	f505 531c 	add.w	r3, r5, #9984	@ 0x2700
 8008a90:	3310      	adds	r3, #16
 8008a92:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8008a96:	4293      	cmp	r3, r2
 8008a98:	61fe      	str	r6, [r7, #28]
 8008a9a:	f200 8167 	bhi.w	8008d6c <mktime+0x340>
 8008a9e:	2d46      	cmp	r5, #70	@ 0x46
 8008aa0:	f340 808e 	ble.w	8008bc0 <mktime+0x194>
 8008aa4:	2346      	movs	r3, #70	@ 0x46
 8008aa6:	f240 1c6d 	movw	ip, #365	@ 0x16d
 8008aaa:	2164      	movs	r1, #100	@ 0x64
 8008aac:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 8008ab0:	079a      	lsls	r2, r3, #30
 8008ab2:	d17f      	bne.n	8008bb4 <mktime+0x188>
 8008ab4:	fb93 f2f1 	sdiv	r2, r3, r1
 8008ab8:	fb01 3212 	mls	r2, r1, r2, r3
 8008abc:	2a00      	cmp	r2, #0
 8008abe:	d17c      	bne.n	8008bba <mktime+0x18e>
 8008ac0:	f203 726c 	addw	r2, r3, #1900	@ 0x76c
 8008ac4:	fb92 fef0 	sdiv	lr, r2, r0
 8008ac8:	fb00 221e 	mls	r2, r0, lr, r2
 8008acc:	2a00      	cmp	r2, #0
 8008ace:	bf14      	ite	ne
 8008ad0:	4662      	movne	r2, ip
 8008ad2:	f44f 72b7 	moveq.w	r2, #366	@ 0x16e
 8008ad6:	3301      	adds	r3, #1
 8008ad8:	429d      	cmp	r5, r3
 8008ada:	4416      	add	r6, r2
 8008adc:	d1e8      	bne.n	8008ab0 <mktime+0x84>
 8008ade:	4ba1      	ldr	r3, [pc, #644]	@ (8008d64 <mktime+0x338>)
 8008ae0:	ea4f 78e4 	mov.w	r8, r4, asr #31
 8008ae4:	fbc6 4803 	smlal	r4, r8, r6, r3
 8008ae8:	f000 f9fa 	bl	8008ee0 <__tz_lock>
 8008aec:	f000 fa04 	bl	8008ef8 <_tzset_unlocked>
 8008af0:	4b9d      	ldr	r3, [pc, #628]	@ (8008d68 <mktime+0x33c>)
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	f000 8140 	beq.w	8008d7a <mktime+0x34e>
 8008afa:	f8d7 a020 	ldr.w	sl, [r7, #32]
 8008afe:	6978      	ldr	r0, [r7, #20]
 8008b00:	4653      	mov	r3, sl
 8008b02:	2b01      	cmp	r3, #1
 8008b04:	bfa8      	it	ge
 8008b06:	2301      	movge	r3, #1
 8008b08:	9301      	str	r3, [sp, #4]
 8008b0a:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8008b0e:	f200 706c 	addw	r0, r0, #1900	@ 0x76c
 8008b12:	4283      	cmp	r3, r0
 8008b14:	f040 8096 	bne.w	8008c44 <mktime+0x218>
 8008b18:	e9d9 2108 	ldrd	r2, r1, [r9, #32]
 8008b1c:	f8d9 0050 	ldr.w	r0, [r9, #80]	@ 0x50
 8008b20:	f8d9 c04c 	ldr.w	ip, [r9, #76]	@ 0x4c
 8008b24:	1a13      	subs	r3, r2, r0
 8008b26:	9303      	str	r3, [sp, #12]
 8008b28:	f8d9 3048 	ldr.w	r3, [r9, #72]	@ 0x48
 8008b2c:	9302      	str	r3, [sp, #8]
 8008b2e:	9a02      	ldr	r2, [sp, #8]
 8008b30:	f8d9 3028 	ldr.w	r3, [r9, #40]	@ 0x28
 8008b34:	eb61 7be0 	sbc.w	fp, r1, r0, asr #31
 8008b38:	ebb2 0e03 	subs.w	lr, r2, r3
 8008b3c:	eb6c 71e3 	sbc.w	r1, ip, r3, asr #31
 8008b40:	4574      	cmp	r4, lr
 8008b42:	eb78 0201 	sbcs.w	r2, r8, r1
 8008b46:	f280 8085 	bge.w	8008c54 <mktime+0x228>
 8008b4a:	f8d9 2000 	ldr.w	r2, [r9]
 8008b4e:	2a00      	cmp	r2, #0
 8008b50:	f000 808d 	beq.w	8008c6e <mktime+0x242>
 8008b54:	9a03      	ldr	r2, [sp, #12]
 8008b56:	4294      	cmp	r4, r2
 8008b58:	eb78 020b 	sbcs.w	r2, r8, fp
 8008b5c:	f2c0 810a 	blt.w	8008d74 <mktime+0x348>
 8008b60:	4574      	cmp	r4, lr
 8008b62:	eb78 0101 	sbcs.w	r1, r8, r1
 8008b66:	bfb4      	ite	lt
 8008b68:	f04f 0b01 	movlt.w	fp, #1
 8008b6c:	f04f 0b00 	movge.w	fp, #0
 8008b70:	f1ba 0f00 	cmp.w	sl, #0
 8008b74:	f280 8087 	bge.w	8008c86 <mktime+0x25a>
 8008b78:	f1bb 0f01 	cmp.w	fp, #1
 8008b7c:	f040 80ff 	bne.w	8008d7e <mktime+0x352>
 8008b80:	f8d9 3050 	ldr.w	r3, [r9, #80]	@ 0x50
 8008b84:	191c      	adds	r4, r3, r4
 8008b86:	eb48 78e3 	adc.w	r8, r8, r3, asr #31
 8008b8a:	f04f 0b01 	mov.w	fp, #1
 8008b8e:	f000 f9ad 	bl	8008eec <__tz_unlock>
 8008b92:	3604      	adds	r6, #4
 8008b94:	2307      	movs	r3, #7
 8008b96:	fb96 f3f3 	sdiv	r3, r6, r3
 8008b9a:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8008b9e:	1af6      	subs	r6, r6, r3
 8008ba0:	f100 80db 	bmi.w	8008d5a <mktime+0x32e>
 8008ba4:	f8c7 b020 	str.w	fp, [r7, #32]
 8008ba8:	61be      	str	r6, [r7, #24]
 8008baa:	4620      	mov	r0, r4
 8008bac:	4641      	mov	r1, r8
 8008bae:	b005      	add	sp, #20
 8008bb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008bb4:	f240 126d 	movw	r2, #365	@ 0x16d
 8008bb8:	e78d      	b.n	8008ad6 <mktime+0xaa>
 8008bba:	f44f 72b7 	mov.w	r2, #366	@ 0x16e
 8008bbe:	e78a      	b.n	8008ad6 <mktime+0xaa>
 8008bc0:	d08d      	beq.n	8008ade <mktime+0xb2>
 8008bc2:	2345      	movs	r3, #69	@ 0x45
 8008bc4:	f240 1c6d 	movw	ip, #365	@ 0x16d
 8008bc8:	2164      	movs	r1, #100	@ 0x64
 8008bca:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 8008bce:	e012      	b.n	8008bf6 <mktime+0x1ca>
 8008bd0:	bb62      	cbnz	r2, 8008c2c <mktime+0x200>
 8008bd2:	fb93 f2f1 	sdiv	r2, r3, r1
 8008bd6:	fb01 3212 	mls	r2, r1, r2, r3
 8008bda:	bb52      	cbnz	r2, 8008c32 <mktime+0x206>
 8008bdc:	f203 726c 	addw	r2, r3, #1900	@ 0x76c
 8008be0:	fb92 fef0 	sdiv	lr, r2, r0
 8008be4:	fb00 221e 	mls	r2, r0, lr, r2
 8008be8:	2a00      	cmp	r2, #0
 8008bea:	bf14      	ite	ne
 8008bec:	4662      	movne	r2, ip
 8008bee:	f44f 72b7 	moveq.w	r2, #366	@ 0x16e
 8008bf2:	1ab6      	subs	r6, r6, r2
 8008bf4:	3b01      	subs	r3, #1
 8008bf6:	429d      	cmp	r5, r3
 8008bf8:	f003 0203 	and.w	r2, r3, #3
 8008bfc:	dbe8      	blt.n	8008bd0 <mktime+0x1a4>
 8008bfe:	b9da      	cbnz	r2, 8008c38 <mktime+0x20c>
 8008c00:	2264      	movs	r2, #100	@ 0x64
 8008c02:	fb95 f3f2 	sdiv	r3, r5, r2
 8008c06:	fb02 5313 	mls	r3, r2, r3, r5
 8008c0a:	b9c3      	cbnz	r3, 8008c3e <mktime+0x212>
 8008c0c:	f205 736c 	addw	r3, r5, #1900	@ 0x76c
 8008c10:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8008c14:	fb93 f1f2 	sdiv	r1, r3, r2
 8008c18:	fb02 3311 	mls	r3, r2, r1, r3
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	f240 136d 	movw	r3, #365	@ 0x16d
 8008c22:	bf08      	it	eq
 8008c24:	f44f 73b7 	moveq.w	r3, #366	@ 0x16e
 8008c28:	1af6      	subs	r6, r6, r3
 8008c2a:	e758      	b.n	8008ade <mktime+0xb2>
 8008c2c:	f240 126d 	movw	r2, #365	@ 0x16d
 8008c30:	e7df      	b.n	8008bf2 <mktime+0x1c6>
 8008c32:	f44f 72b7 	mov.w	r2, #366	@ 0x16e
 8008c36:	e7dc      	b.n	8008bf2 <mktime+0x1c6>
 8008c38:	f240 136d 	movw	r3, #365	@ 0x16d
 8008c3c:	e7f4      	b.n	8008c28 <mktime+0x1fc>
 8008c3e:	f44f 73b7 	mov.w	r3, #366	@ 0x16e
 8008c42:	e7f1      	b.n	8008c28 <mktime+0x1fc>
 8008c44:	f000 f8a2 	bl	8008d8c <__tzcalc_limits>
 8008c48:	2800      	cmp	r0, #0
 8008c4a:	f47f af65 	bne.w	8008b18 <mktime+0xec>
 8008c4e:	f8dd b004 	ldr.w	fp, [sp, #4]
 8008c52:	e791      	b.n	8008b78 <mktime+0x14c>
 8008c54:	9a02      	ldr	r2, [sp, #8]
 8008c56:	1a12      	subs	r2, r2, r0
 8008c58:	9202      	str	r2, [sp, #8]
 8008c5a:	ea4f 72e0 	mov.w	r2, r0, asr #31
 8008c5e:	eb6c 0c02 	sbc.w	ip, ip, r2
 8008c62:	9a02      	ldr	r2, [sp, #8]
 8008c64:	4294      	cmp	r4, r2
 8008c66:	eb78 0c0c 	sbcs.w	ip, r8, ip
 8008c6a:	dbf0      	blt.n	8008c4e <mktime+0x222>
 8008c6c:	e76d      	b.n	8008b4a <mktime+0x11e>
 8008c6e:	9a03      	ldr	r2, [sp, #12]
 8008c70:	4294      	cmp	r4, r2
 8008c72:	eb78 020b 	sbcs.w	r2, r8, fp
 8008c76:	f6ff af73 	blt.w	8008b60 <mktime+0x134>
 8008c7a:	f1ba 0f00 	cmp.w	sl, #0
 8008c7e:	f6ff af7f 	blt.w	8008b80 <mktime+0x154>
 8008c82:	f04f 0b01 	mov.w	fp, #1
 8008c86:	9a01      	ldr	r2, [sp, #4]
 8008c88:	ea82 020b 	eor.w	r2, r2, fp
 8008c8c:	2a01      	cmp	r2, #1
 8008c8e:	f47f af73 	bne.w	8008b78 <mktime+0x14c>
 8008c92:	f1bb 0f00 	cmp.w	fp, #0
 8008c96:	d035      	beq.n	8008d04 <mktime+0x2d8>
 8008c98:	1a1b      	subs	r3, r3, r0
 8008c9a:	683a      	ldr	r2, [r7, #0]
 8008c9c:	f8d7 a00c 	ldr.w	sl, [r7, #12]
 8008ca0:	441a      	add	r2, r3
 8008ca2:	191c      	adds	r4, r3, r4
 8008ca4:	603a      	str	r2, [r7, #0]
 8008ca6:	4638      	mov	r0, r7
 8008ca8:	eb48 78e3 	adc.w	r8, r8, r3, asr #31
 8008cac:	f7ff fdea 	bl	8008884 <validate_structure>
 8008cb0:	68fa      	ldr	r2, [r7, #12]
 8008cb2:	ebb2 020a 	subs.w	r2, r2, sl
 8008cb6:	f43f af5f 	beq.w	8008b78 <mktime+0x14c>
 8008cba:	2a01      	cmp	r2, #1
 8008cbc:	dc24      	bgt.n	8008d08 <mktime+0x2dc>
 8008cbe:	1c93      	adds	r3, r2, #2
 8008cc0:	bfd8      	it	le
 8008cc2:	2201      	movle	r2, #1
 8008cc4:	69fb      	ldr	r3, [r7, #28]
 8008cc6:	18d3      	adds	r3, r2, r3
 8008cc8:	d527      	bpl.n	8008d1a <mktime+0x2ee>
 8008cca:	1e6b      	subs	r3, r5, #1
 8008ccc:	0798      	lsls	r0, r3, #30
 8008cce:	d11e      	bne.n	8008d0e <mktime+0x2e2>
 8008cd0:	2164      	movs	r1, #100	@ 0x64
 8008cd2:	fb93 f0f1 	sdiv	r0, r3, r1
 8008cd6:	fb01 3310 	mls	r3, r1, r0, r3
 8008cda:	b9db      	cbnz	r3, 8008d14 <mktime+0x2e8>
 8008cdc:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8008ce0:	f205 756b 	addw	r5, r5, #1899	@ 0x76b
 8008ce4:	fb95 f1f3 	sdiv	r1, r5, r3
 8008ce8:	fb03 5511 	mls	r5, r3, r1, r5
 8008cec:	2d00      	cmp	r5, #0
 8008cee:	f240 136d 	movw	r3, #365	@ 0x16d
 8008cf2:	bf18      	it	ne
 8008cf4:	f44f 73b6 	movne.w	r3, #364	@ 0x16c
 8008cf8:	61fb      	str	r3, [r7, #28]
 8008cfa:	4416      	add	r6, r2
 8008cfc:	e73c      	b.n	8008b78 <mktime+0x14c>
 8008cfe:	f04f 0b00 	mov.w	fp, #0
 8008d02:	e7c0      	b.n	8008c86 <mktime+0x25a>
 8008d04:	1ac3      	subs	r3, r0, r3
 8008d06:	e7c8      	b.n	8008c9a <mktime+0x26e>
 8008d08:	f04f 32ff 	mov.w	r2, #4294967295
 8008d0c:	e7da      	b.n	8008cc4 <mktime+0x298>
 8008d0e:	f44f 73b6 	mov.w	r3, #364	@ 0x16c
 8008d12:	e7f1      	b.n	8008cf8 <mktime+0x2cc>
 8008d14:	f240 136d 	movw	r3, #365	@ 0x16d
 8008d18:	e7ee      	b.n	8008cf8 <mktime+0x2cc>
 8008d1a:	07a9      	lsls	r1, r5, #30
 8008d1c:	d117      	bne.n	8008d4e <mktime+0x322>
 8008d1e:	2064      	movs	r0, #100	@ 0x64
 8008d20:	fb95 f1f0 	sdiv	r1, r5, r0
 8008d24:	fb00 5111 	mls	r1, r0, r1, r5
 8008d28:	b9a1      	cbnz	r1, 8008d54 <mktime+0x328>
 8008d2a:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8008d2e:	f205 756c 	addw	r5, r5, #1900	@ 0x76c
 8008d32:	fb95 f0f1 	sdiv	r0, r5, r1
 8008d36:	fb01 5510 	mls	r5, r1, r0, r5
 8008d3a:	2d00      	cmp	r5, #0
 8008d3c:	f240 116d 	movw	r1, #365	@ 0x16d
 8008d40:	bf08      	it	eq
 8008d42:	f44f 71b7 	moveq.w	r1, #366	@ 0x16e
 8008d46:	428b      	cmp	r3, r1
 8008d48:	bfa8      	it	ge
 8008d4a:	1a5b      	subge	r3, r3, r1
 8008d4c:	e7d4      	b.n	8008cf8 <mktime+0x2cc>
 8008d4e:	f240 116d 	movw	r1, #365	@ 0x16d
 8008d52:	e7f8      	b.n	8008d46 <mktime+0x31a>
 8008d54:	f44f 71b7 	mov.w	r1, #366	@ 0x16e
 8008d58:	e7f5      	b.n	8008d46 <mktime+0x31a>
 8008d5a:	3607      	adds	r6, #7
 8008d5c:	e722      	b.n	8008ba4 <mktime+0x178>
 8008d5e:	bf00      	nop
 8008d60:	0800d48c 	.word	0x0800d48c
 8008d64:	00015180 	.word	0x00015180
 8008d68:	20004c20 	.word	0x20004c20
 8008d6c:	f04f 34ff 	mov.w	r4, #4294967295
 8008d70:	46a0      	mov	r8, r4
 8008d72:	e71a      	b.n	8008baa <mktime+0x17e>
 8008d74:	f1ba 0f00 	cmp.w	sl, #0
 8008d78:	dac1      	bge.n	8008cfe <mktime+0x2d2>
 8008d7a:	f04f 0b00 	mov.w	fp, #0
 8008d7e:	f8d9 3028 	ldr.w	r3, [r9, #40]	@ 0x28
 8008d82:	191c      	adds	r4, r3, r4
 8008d84:	eb48 78e3 	adc.w	r8, r8, r3, asr #31
 8008d88:	e701      	b.n	8008b8e <mktime+0x162>
 8008d8a:	bf00      	nop

08008d8c <__tzcalc_limits>:
 8008d8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008d90:	4604      	mov	r4, r0
 8008d92:	f003 f893 	bl	800bebc <__gettzinfo>
 8008d96:	f240 73b1 	movw	r3, #1969	@ 0x7b1
 8008d9a:	429c      	cmp	r4, r3
 8008d9c:	f340 8099 	ble.w	8008ed2 <__tzcalc_limits+0x146>
 8008da0:	f46f 67f6 	mvn.w	r7, #1968	@ 0x7b0
 8008da4:	19e5      	adds	r5, r4, r7
 8008da6:	f2a4 73b2 	subw	r3, r4, #1970	@ 0x7b2
 8008daa:	f240 126d 	movw	r2, #365	@ 0x16d
 8008dae:	10ad      	asrs	r5, r5, #2
 8008db0:	fb02 5503 	mla	r5, r2, r3, r5
 8008db4:	f46f 6cc8 	mvn.w	ip, #1600	@ 0x640
 8008db8:	f06f 0263 	mvn.w	r2, #99	@ 0x63
 8008dbc:	f2a4 736d 	subw	r3, r4, #1901	@ 0x76d
 8008dc0:	4f45      	ldr	r7, [pc, #276]	@ (8008ed8 <__tzcalc_limits+0x14c>)
 8008dc2:	fb93 f3f2 	sdiv	r3, r3, r2
 8008dc6:	441d      	add	r5, r3
 8008dc8:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8008dcc:	eb04 030c 	add.w	r3, r4, ip
 8008dd0:	6044      	str	r4, [r0, #4]
 8008dd2:	fbb3 f3f2 	udiv	r3, r3, r2
 8008dd6:	4601      	mov	r1, r0
 8008dd8:	441d      	add	r5, r3
 8008dda:	f100 0c50 	add.w	ip, r0, #80	@ 0x50
 8008dde:	7a0b      	ldrb	r3, [r1, #8]
 8008de0:	694a      	ldr	r2, [r1, #20]
 8008de2:	2b4a      	cmp	r3, #74	@ 0x4a
 8008de4:	d133      	bne.n	8008e4e <__tzcalc_limits+0xc2>
 8008de6:	07a6      	lsls	r6, r4, #30
 8008de8:	eb05 0302 	add.w	r3, r5, r2
 8008dec:	d106      	bne.n	8008dfc <__tzcalc_limits+0x70>
 8008dee:	f04f 0e64 	mov.w	lr, #100	@ 0x64
 8008df2:	fb94 f6fe 	sdiv	r6, r4, lr
 8008df6:	fb0e 4616 	mls	r6, lr, r6, r4
 8008dfa:	b936      	cbnz	r6, 8008e0a <__tzcalc_limits+0x7e>
 8008dfc:	f44f 7ec8 	mov.w	lr, #400	@ 0x190
 8008e00:	fb94 f6fe 	sdiv	r6, r4, lr
 8008e04:	fb0e 4616 	mls	r6, lr, r6, r4
 8008e08:	b9fe      	cbnz	r6, 8008e4a <__tzcalc_limits+0xbe>
 8008e0a:	2a3b      	cmp	r2, #59	@ 0x3b
 8008e0c:	bfd4      	ite	le
 8008e0e:	2200      	movle	r2, #0
 8008e10:	2201      	movgt	r2, #1
 8008e12:	4413      	add	r3, r2
 8008e14:	3b01      	subs	r3, #1
 8008e16:	698a      	ldr	r2, [r1, #24]
 8008e18:	17d6      	asrs	r6, r2, #31
 8008e1a:	fbc3 2607 	smlal	r2, r6, r3, r7
 8008e1e:	6a8b      	ldr	r3, [r1, #40]	@ 0x28
 8008e20:	18d2      	adds	r2, r2, r3
 8008e22:	eb46 73e3 	adc.w	r3, r6, r3, asr #31
 8008e26:	e9c1 2308 	strd	r2, r3, [r1, #32]
 8008e2a:	3128      	adds	r1, #40	@ 0x28
 8008e2c:	458c      	cmp	ip, r1
 8008e2e:	d1d6      	bne.n	8008dde <__tzcalc_limits+0x52>
 8008e30:	e9d0 4308 	ldrd	r4, r3, [r0, #32]
 8008e34:	e9d0 1212 	ldrd	r1, r2, [r0, #72]	@ 0x48
 8008e38:	428c      	cmp	r4, r1
 8008e3a:	4193      	sbcs	r3, r2
 8008e3c:	bfb4      	ite	lt
 8008e3e:	2301      	movlt	r3, #1
 8008e40:	2300      	movge	r3, #0
 8008e42:	6003      	str	r3, [r0, #0]
 8008e44:	2001      	movs	r0, #1
 8008e46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e4a:	2200      	movs	r2, #0
 8008e4c:	e7e1      	b.n	8008e12 <__tzcalc_limits+0x86>
 8008e4e:	2b44      	cmp	r3, #68	@ 0x44
 8008e50:	d101      	bne.n	8008e56 <__tzcalc_limits+0xca>
 8008e52:	18ab      	adds	r3, r5, r2
 8008e54:	e7df      	b.n	8008e16 <__tzcalc_limits+0x8a>
 8008e56:	07a3      	lsls	r3, r4, #30
 8008e58:	d105      	bne.n	8008e66 <__tzcalc_limits+0xda>
 8008e5a:	2664      	movs	r6, #100	@ 0x64
 8008e5c:	fb94 f3f6 	sdiv	r3, r4, r6
 8008e60:	fb06 4313 	mls	r3, r6, r3, r4
 8008e64:	bb7b      	cbnz	r3, 8008ec6 <__tzcalc_limits+0x13a>
 8008e66:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8008e6a:	fb94 f6f3 	sdiv	r6, r4, r3
 8008e6e:	fb03 4616 	mls	r6, r3, r6, r4
 8008e72:	fab6 f686 	clz	r6, r6
 8008e76:	0976      	lsrs	r6, r6, #5
 8008e78:	f8df e060 	ldr.w	lr, [pc, #96]	@ 8008edc <__tzcalc_limits+0x150>
 8008e7c:	f8d1 900c 	ldr.w	r9, [r1, #12]
 8008e80:	f04f 0a30 	mov.w	sl, #48	@ 0x30
 8008e84:	462b      	mov	r3, r5
 8008e86:	f04f 0800 	mov.w	r8, #0
 8008e8a:	fb0a e606 	mla	r6, sl, r6, lr
 8008e8e:	f108 0801 	add.w	r8, r8, #1
 8008e92:	45c1      	cmp	r9, r8
 8008e94:	f856 e028 	ldr.w	lr, [r6, r8, lsl #2]
 8008e98:	dc17      	bgt.n	8008eca <__tzcalc_limits+0x13e>
 8008e9a:	f103 0804 	add.w	r8, r3, #4
 8008e9e:	2607      	movs	r6, #7
 8008ea0:	fb98 f6f6 	sdiv	r6, r8, r6
 8008ea4:	ebc6 06c6 	rsb	r6, r6, r6, lsl #3
 8008ea8:	eba8 0606 	sub.w	r6, r8, r6
 8008eac:	1b92      	subs	r2, r2, r6
 8008eae:	690e      	ldr	r6, [r1, #16]
 8008eb0:	f106 36ff 	add.w	r6, r6, #4294967295
 8008eb4:	bf48      	it	mi
 8008eb6:	3207      	addmi	r2, #7
 8008eb8:	ebc6 06c6 	rsb	r6, r6, r6, lsl #3
 8008ebc:	4432      	add	r2, r6
 8008ebe:	4572      	cmp	r2, lr
 8008ec0:	da05      	bge.n	8008ece <__tzcalc_limits+0x142>
 8008ec2:	4413      	add	r3, r2
 8008ec4:	e7a7      	b.n	8008e16 <__tzcalc_limits+0x8a>
 8008ec6:	2601      	movs	r6, #1
 8008ec8:	e7d6      	b.n	8008e78 <__tzcalc_limits+0xec>
 8008eca:	4473      	add	r3, lr
 8008ecc:	e7df      	b.n	8008e8e <__tzcalc_limits+0x102>
 8008ece:	3a07      	subs	r2, #7
 8008ed0:	e7f5      	b.n	8008ebe <__tzcalc_limits+0x132>
 8008ed2:	2000      	movs	r0, #0
 8008ed4:	e7b7      	b.n	8008e46 <__tzcalc_limits+0xba>
 8008ed6:	bf00      	nop
 8008ed8:	00015180 	.word	0x00015180
 8008edc:	0800d8b4 	.word	0x0800d8b4

08008ee0 <__tz_lock>:
 8008ee0:	4801      	ldr	r0, [pc, #4]	@ (8008ee8 <__tz_lock+0x8>)
 8008ee2:	f000 bab6 	b.w	8009452 <__retarget_lock_acquire>
 8008ee6:	bf00      	nop
 8008ee8:	20004c28 	.word	0x20004c28

08008eec <__tz_unlock>:
 8008eec:	4801      	ldr	r0, [pc, #4]	@ (8008ef4 <__tz_unlock+0x8>)
 8008eee:	f000 bab2 	b.w	8009456 <__retarget_lock_release>
 8008ef2:	bf00      	nop
 8008ef4:	20004c28 	.word	0x20004c28

08008ef8 <_tzset_unlocked>:
 8008ef8:	4b01      	ldr	r3, [pc, #4]	@ (8008f00 <_tzset_unlocked+0x8>)
 8008efa:	6818      	ldr	r0, [r3, #0]
 8008efc:	f000 b802 	b.w	8008f04 <_tzset_unlocked_r>
 8008f00:	20000198 	.word	0x20000198

08008f04 <_tzset_unlocked_r>:
 8008f04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f08:	b08d      	sub	sp, #52	@ 0x34
 8008f0a:	4607      	mov	r7, r0
 8008f0c:	f002 ffd6 	bl	800bebc <__gettzinfo>
 8008f10:	49bc      	ldr	r1, [pc, #752]	@ (8009204 <_tzset_unlocked_r+0x300>)
 8008f12:	4dbd      	ldr	r5, [pc, #756]	@ (8009208 <_tzset_unlocked_r+0x304>)
 8008f14:	4604      	mov	r4, r0
 8008f16:	4638      	mov	r0, r7
 8008f18:	f001 fcd2 	bl	800a8c0 <_getenv_r>
 8008f1c:	4606      	mov	r6, r0
 8008f1e:	bb10      	cbnz	r0, 8008f66 <_tzset_unlocked_r+0x62>
 8008f20:	4bba      	ldr	r3, [pc, #744]	@ (800920c <_tzset_unlocked_r+0x308>)
 8008f22:	4abb      	ldr	r2, [pc, #748]	@ (8009210 <_tzset_unlocked_r+0x30c>)
 8008f24:	6018      	str	r0, [r3, #0]
 8008f26:	4bbb      	ldr	r3, [pc, #748]	@ (8009214 <_tzset_unlocked_r+0x310>)
 8008f28:	62a0      	str	r0, [r4, #40]	@ 0x28
 8008f2a:	6018      	str	r0, [r3, #0]
 8008f2c:	4bba      	ldr	r3, [pc, #744]	@ (8009218 <_tzset_unlocked_r+0x314>)
 8008f2e:	6520      	str	r0, [r4, #80]	@ 0x50
 8008f30:	e9c3 2200 	strd	r2, r2, [r3]
 8008f34:	214a      	movs	r1, #74	@ 0x4a
 8008f36:	2200      	movs	r2, #0
 8008f38:	2300      	movs	r3, #0
 8008f3a:	e9c4 0003 	strd	r0, r0, [r4, #12]
 8008f3e:	e9c4 0005 	strd	r0, r0, [r4, #20]
 8008f42:	e9c4 000d 	strd	r0, r0, [r4, #52]	@ 0x34
 8008f46:	e9c4 000f 	strd	r0, r0, [r4, #60]	@ 0x3c
 8008f4a:	e9c4 2308 	strd	r2, r3, [r4, #32]
 8008f4e:	e9c4 2312 	strd	r2, r3, [r4, #72]	@ 0x48
 8008f52:	6828      	ldr	r0, [r5, #0]
 8008f54:	7221      	strb	r1, [r4, #8]
 8008f56:	f884 1030 	strb.w	r1, [r4, #48]	@ 0x30
 8008f5a:	f7fd ffbf 	bl	8006edc <free>
 8008f5e:	602e      	str	r6, [r5, #0]
 8008f60:	b00d      	add	sp, #52	@ 0x34
 8008f62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f66:	6829      	ldr	r1, [r5, #0]
 8008f68:	2900      	cmp	r1, #0
 8008f6a:	f040 808e 	bne.w	800908a <_tzset_unlocked_r+0x186>
 8008f6e:	6828      	ldr	r0, [r5, #0]
 8008f70:	f7fd ffb4 	bl	8006edc <free>
 8008f74:	4630      	mov	r0, r6
 8008f76:	f7f7 f98b 	bl	8000290 <strlen>
 8008f7a:	1c41      	adds	r1, r0, #1
 8008f7c:	4638      	mov	r0, r7
 8008f7e:	f7fd ffd7 	bl	8006f30 <_malloc_r>
 8008f82:	6028      	str	r0, [r5, #0]
 8008f84:	2800      	cmp	r0, #0
 8008f86:	f040 8086 	bne.w	8009096 <_tzset_unlocked_r+0x192>
 8008f8a:	4aa2      	ldr	r2, [pc, #648]	@ (8009214 <_tzset_unlocked_r+0x310>)
 8008f8c:	f8df 8288 	ldr.w	r8, [pc, #648]	@ 8009218 <_tzset_unlocked_r+0x314>
 8008f90:	f8df a278 	ldr.w	sl, [pc, #632]	@ 800920c <_tzset_unlocked_r+0x308>
 8008f94:	2300      	movs	r3, #0
 8008f96:	6013      	str	r3, [r2, #0]
 8008f98:	4aa0      	ldr	r2, [pc, #640]	@ (800921c <_tzset_unlocked_r+0x318>)
 8008f9a:	f8ca 3000 	str.w	r3, [sl]
 8008f9e:	2000      	movs	r0, #0
 8008fa0:	2100      	movs	r1, #0
 8008fa2:	e9c8 2200 	strd	r2, r2, [r8]
 8008fa6:	e9c4 3303 	strd	r3, r3, [r4, #12]
 8008faa:	e9c4 3305 	strd	r3, r3, [r4, #20]
 8008fae:	e9c4 0108 	strd	r0, r1, [r4, #32]
 8008fb2:	e9c4 330d 	strd	r3, r3, [r4, #52]	@ 0x34
 8008fb6:	e9c4 330f 	strd	r3, r3, [r4, #60]	@ 0x3c
 8008fba:	e9c4 0112 	strd	r0, r1, [r4, #72]	@ 0x48
 8008fbe:	224a      	movs	r2, #74	@ 0x4a
 8008fc0:	7222      	strb	r2, [r4, #8]
 8008fc2:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008fc4:	f884 2030 	strb.w	r2, [r4, #48]	@ 0x30
 8008fc8:	6523      	str	r3, [r4, #80]	@ 0x50
 8008fca:	7833      	ldrb	r3, [r6, #0]
 8008fcc:	2b3a      	cmp	r3, #58	@ 0x3a
 8008fce:	bf08      	it	eq
 8008fd0:	3601      	addeq	r6, #1
 8008fd2:	7833      	ldrb	r3, [r6, #0]
 8008fd4:	2b3c      	cmp	r3, #60	@ 0x3c
 8008fd6:	d162      	bne.n	800909e <_tzset_unlocked_r+0x19a>
 8008fd8:	1c75      	adds	r5, r6, #1
 8008fda:	4a91      	ldr	r2, [pc, #580]	@ (8009220 <_tzset_unlocked_r+0x31c>)
 8008fdc:	4991      	ldr	r1, [pc, #580]	@ (8009224 <_tzset_unlocked_r+0x320>)
 8008fde:	ab0a      	add	r3, sp, #40	@ 0x28
 8008fe0:	4628      	mov	r0, r5
 8008fe2:	f7ff fbaf 	bl	8008744 <siscanf>
 8008fe6:	2800      	cmp	r0, #0
 8008fe8:	ddba      	ble.n	8008f60 <_tzset_unlocked_r+0x5c>
 8008fea:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008fec:	1eda      	subs	r2, r3, #3
 8008fee:	2a07      	cmp	r2, #7
 8008ff0:	d8b6      	bhi.n	8008f60 <_tzset_unlocked_r+0x5c>
 8008ff2:	5ceb      	ldrb	r3, [r5, r3]
 8008ff4:	2b3e      	cmp	r3, #62	@ 0x3e
 8008ff6:	d1b3      	bne.n	8008f60 <_tzset_unlocked_r+0x5c>
 8008ff8:	3602      	adds	r6, #2
 8008ffa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008ffc:	18f5      	adds	r5, r6, r3
 8008ffe:	5cf3      	ldrb	r3, [r6, r3]
 8009000:	2b2d      	cmp	r3, #45	@ 0x2d
 8009002:	d15a      	bne.n	80090ba <_tzset_unlocked_r+0x1b6>
 8009004:	3501      	adds	r5, #1
 8009006:	f04f 39ff 	mov.w	r9, #4294967295
 800900a:	2300      	movs	r3, #0
 800900c:	f8ad 301e 	strh.w	r3, [sp, #30]
 8009010:	f8ad 3020 	strh.w	r3, [sp, #32]
 8009014:	af08      	add	r7, sp, #32
 8009016:	ab0a      	add	r3, sp, #40	@ 0x28
 8009018:	e9cd 3701 	strd	r3, r7, [sp, #4]
 800901c:	9303      	str	r3, [sp, #12]
 800901e:	f10d 031e 	add.w	r3, sp, #30
 8009022:	9300      	str	r3, [sp, #0]
 8009024:	4980      	ldr	r1, [pc, #512]	@ (8009228 <_tzset_unlocked_r+0x324>)
 8009026:	ab0a      	add	r3, sp, #40	@ 0x28
 8009028:	aa07      	add	r2, sp, #28
 800902a:	4628      	mov	r0, r5
 800902c:	f7ff fb8a 	bl	8008744 <siscanf>
 8009030:	2800      	cmp	r0, #0
 8009032:	dd95      	ble.n	8008f60 <_tzset_unlocked_r+0x5c>
 8009034:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8009038:	f8bd 6020 	ldrh.w	r6, [sp, #32]
 800903c:	223c      	movs	r2, #60	@ 0x3c
 800903e:	fb02 6603 	mla	r6, r2, r3, r6
 8009042:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8009046:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 800904a:	fb02 6603 	mla	r6, r2, r3, r6
 800904e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009050:	fb09 f606 	mul.w	r6, r9, r6
 8009054:	eb05 0903 	add.w	r9, r5, r3
 8009058:	5ceb      	ldrb	r3, [r5, r3]
 800905a:	2b3c      	cmp	r3, #60	@ 0x3c
 800905c:	f040 80ee 	bne.w	800923c <_tzset_unlocked_r+0x338>
 8009060:	f109 0501 	add.w	r5, r9, #1
 8009064:	4a71      	ldr	r2, [pc, #452]	@ (800922c <_tzset_unlocked_r+0x328>)
 8009066:	496f      	ldr	r1, [pc, #444]	@ (8009224 <_tzset_unlocked_r+0x320>)
 8009068:	ab0a      	add	r3, sp, #40	@ 0x28
 800906a:	4628      	mov	r0, r5
 800906c:	f7ff fb6a 	bl	8008744 <siscanf>
 8009070:	2800      	cmp	r0, #0
 8009072:	dc28      	bgt.n	80090c6 <_tzset_unlocked_r+0x1c2>
 8009074:	f899 3001 	ldrb.w	r3, [r9, #1]
 8009078:	2b3e      	cmp	r3, #62	@ 0x3e
 800907a:	d124      	bne.n	80090c6 <_tzset_unlocked_r+0x1c2>
 800907c:	4b68      	ldr	r3, [pc, #416]	@ (8009220 <_tzset_unlocked_r+0x31c>)
 800907e:	62a6      	str	r6, [r4, #40]	@ 0x28
 8009080:	e9c8 3300 	strd	r3, r3, [r8]
 8009084:	f8ca 6000 	str.w	r6, [sl]
 8009088:	e76a      	b.n	8008f60 <_tzset_unlocked_r+0x5c>
 800908a:	f7f7 f8a1 	bl	80001d0 <strcmp>
 800908e:	2800      	cmp	r0, #0
 8009090:	f47f af6d 	bne.w	8008f6e <_tzset_unlocked_r+0x6a>
 8009094:	e764      	b.n	8008f60 <_tzset_unlocked_r+0x5c>
 8009096:	4631      	mov	r1, r6
 8009098:	f000 f9df 	bl	800945a <strcpy>
 800909c:	e775      	b.n	8008f8a <_tzset_unlocked_r+0x86>
 800909e:	4a60      	ldr	r2, [pc, #384]	@ (8009220 <_tzset_unlocked_r+0x31c>)
 80090a0:	4963      	ldr	r1, [pc, #396]	@ (8009230 <_tzset_unlocked_r+0x32c>)
 80090a2:	ab0a      	add	r3, sp, #40	@ 0x28
 80090a4:	4630      	mov	r0, r6
 80090a6:	f7ff fb4d 	bl	8008744 <siscanf>
 80090aa:	2800      	cmp	r0, #0
 80090ac:	f77f af58 	ble.w	8008f60 <_tzset_unlocked_r+0x5c>
 80090b0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80090b2:	3b03      	subs	r3, #3
 80090b4:	2b07      	cmp	r3, #7
 80090b6:	d9a0      	bls.n	8008ffa <_tzset_unlocked_r+0xf6>
 80090b8:	e752      	b.n	8008f60 <_tzset_unlocked_r+0x5c>
 80090ba:	2b2b      	cmp	r3, #43	@ 0x2b
 80090bc:	bf08      	it	eq
 80090be:	3501      	addeq	r5, #1
 80090c0:	f04f 0901 	mov.w	r9, #1
 80090c4:	e7a1      	b.n	800900a <_tzset_unlocked_r+0x106>
 80090c6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80090c8:	1eda      	subs	r2, r3, #3
 80090ca:	2a07      	cmp	r2, #7
 80090cc:	f63f af48 	bhi.w	8008f60 <_tzset_unlocked_r+0x5c>
 80090d0:	5ceb      	ldrb	r3, [r5, r3]
 80090d2:	2b3e      	cmp	r3, #62	@ 0x3e
 80090d4:	f47f af44 	bne.w	8008f60 <_tzset_unlocked_r+0x5c>
 80090d8:	f109 0902 	add.w	r9, r9, #2
 80090dc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80090de:	eb09 0503 	add.w	r5, r9, r3
 80090e2:	f819 3003 	ldrb.w	r3, [r9, r3]
 80090e6:	2b2d      	cmp	r3, #45	@ 0x2d
 80090e8:	f040 80b7 	bne.w	800925a <_tzset_unlocked_r+0x356>
 80090ec:	3501      	adds	r5, #1
 80090ee:	f04f 39ff 	mov.w	r9, #4294967295
 80090f2:	2300      	movs	r3, #0
 80090f4:	f8ad 301c 	strh.w	r3, [sp, #28]
 80090f8:	f8ad 301e 	strh.w	r3, [sp, #30]
 80090fc:	f8ad 3020 	strh.w	r3, [sp, #32]
 8009100:	930a      	str	r3, [sp, #40]	@ 0x28
 8009102:	ab0a      	add	r3, sp, #40	@ 0x28
 8009104:	e9cd 7302 	strd	r7, r3, [sp, #8]
 8009108:	9301      	str	r3, [sp, #4]
 800910a:	f10d 031e 	add.w	r3, sp, #30
 800910e:	9300      	str	r3, [sp, #0]
 8009110:	4945      	ldr	r1, [pc, #276]	@ (8009228 <_tzset_unlocked_r+0x324>)
 8009112:	ab0a      	add	r3, sp, #40	@ 0x28
 8009114:	aa07      	add	r2, sp, #28
 8009116:	4628      	mov	r0, r5
 8009118:	f7ff fb14 	bl	8008744 <siscanf>
 800911c:	2800      	cmp	r0, #0
 800911e:	f300 80a2 	bgt.w	8009266 <_tzset_unlocked_r+0x362>
 8009122:	f5a6 6361 	sub.w	r3, r6, #3600	@ 0xe10
 8009126:	9304      	str	r3, [sp, #16]
 8009128:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800912a:	4627      	mov	r7, r4
 800912c:	441d      	add	r5, r3
 800912e:	f04f 0b00 	mov.w	fp, #0
 8009132:	782b      	ldrb	r3, [r5, #0]
 8009134:	2b2c      	cmp	r3, #44	@ 0x2c
 8009136:	bf08      	it	eq
 8009138:	3501      	addeq	r5, #1
 800913a:	f895 9000 	ldrb.w	r9, [r5]
 800913e:	f1b9 0f4d 	cmp.w	r9, #77	@ 0x4d
 8009142:	f040 80a3 	bne.w	800928c <_tzset_unlocked_r+0x388>
 8009146:	ab0a      	add	r3, sp, #40	@ 0x28
 8009148:	f10d 0226 	add.w	r2, sp, #38	@ 0x26
 800914c:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8009150:	aa09      	add	r2, sp, #36	@ 0x24
 8009152:	9200      	str	r2, [sp, #0]
 8009154:	4937      	ldr	r1, [pc, #220]	@ (8009234 <_tzset_unlocked_r+0x330>)
 8009156:	9303      	str	r3, [sp, #12]
 8009158:	f10d 0222 	add.w	r2, sp, #34	@ 0x22
 800915c:	4628      	mov	r0, r5
 800915e:	f7ff faf1 	bl	8008744 <siscanf>
 8009162:	2803      	cmp	r0, #3
 8009164:	f47f aefc 	bne.w	8008f60 <_tzset_unlocked_r+0x5c>
 8009168:	f8bd 1022 	ldrh.w	r1, [sp, #34]	@ 0x22
 800916c:	1e4b      	subs	r3, r1, #1
 800916e:	2b0b      	cmp	r3, #11
 8009170:	f63f aef6 	bhi.w	8008f60 <_tzset_unlocked_r+0x5c>
 8009174:	f8bd 2024 	ldrh.w	r2, [sp, #36]	@ 0x24
 8009178:	1e53      	subs	r3, r2, #1
 800917a:	2b04      	cmp	r3, #4
 800917c:	f63f aef0 	bhi.w	8008f60 <_tzset_unlocked_r+0x5c>
 8009180:	f8bd 3026 	ldrh.w	r3, [sp, #38]	@ 0x26
 8009184:	2b06      	cmp	r3, #6
 8009186:	f63f aeeb 	bhi.w	8008f60 <_tzset_unlocked_r+0x5c>
 800918a:	e9c7 1203 	strd	r1, r2, [r7, #12]
 800918e:	f887 9008 	strb.w	r9, [r7, #8]
 8009192:	617b      	str	r3, [r7, #20]
 8009194:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009196:	eb05 0903 	add.w	r9, r5, r3
 800919a:	2500      	movs	r5, #0
 800919c:	f04f 0302 	mov.w	r3, #2
 80091a0:	f8ad 301c 	strh.w	r3, [sp, #28]
 80091a4:	f8ad 501e 	strh.w	r5, [sp, #30]
 80091a8:	f8ad 5020 	strh.w	r5, [sp, #32]
 80091ac:	950a      	str	r5, [sp, #40]	@ 0x28
 80091ae:	f899 3000 	ldrb.w	r3, [r9]
 80091b2:	2b2f      	cmp	r3, #47	@ 0x2f
 80091b4:	f040 8096 	bne.w	80092e4 <_tzset_unlocked_r+0x3e0>
 80091b8:	ab0a      	add	r3, sp, #40	@ 0x28
 80091ba:	aa08      	add	r2, sp, #32
 80091bc:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80091c0:	f10d 021e 	add.w	r2, sp, #30
 80091c4:	9200      	str	r2, [sp, #0]
 80091c6:	491c      	ldr	r1, [pc, #112]	@ (8009238 <_tzset_unlocked_r+0x334>)
 80091c8:	9303      	str	r3, [sp, #12]
 80091ca:	aa07      	add	r2, sp, #28
 80091cc:	4648      	mov	r0, r9
 80091ce:	f7ff fab9 	bl	8008744 <siscanf>
 80091d2:	42a8      	cmp	r0, r5
 80091d4:	f300 8086 	bgt.w	80092e4 <_tzset_unlocked_r+0x3e0>
 80091d8:	214a      	movs	r1, #74	@ 0x4a
 80091da:	2200      	movs	r2, #0
 80091dc:	2300      	movs	r3, #0
 80091de:	e9c4 5503 	strd	r5, r5, [r4, #12]
 80091e2:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80091e6:	e9c4 2308 	strd	r2, r3, [r4, #32]
 80091ea:	e9c4 550d 	strd	r5, r5, [r4, #52]	@ 0x34
 80091ee:	e9c4 550f 	strd	r5, r5, [r4, #60]	@ 0x3c
 80091f2:	e9c4 2312 	strd	r2, r3, [r4, #72]	@ 0x48
 80091f6:	7221      	strb	r1, [r4, #8]
 80091f8:	62a5      	str	r5, [r4, #40]	@ 0x28
 80091fa:	f884 1030 	strb.w	r1, [r4, #48]	@ 0x30
 80091fe:	6525      	str	r5, [r4, #80]	@ 0x50
 8009200:	e6ae      	b.n	8008f60 <_tzset_unlocked_r+0x5c>
 8009202:	bf00      	nop
 8009204:	0800d4ec 	.word	0x0800d4ec
 8009208:	20004c00 	.word	0x20004c00
 800920c:	20004c1c 	.word	0x20004c1c
 8009210:	0800d4ef 	.word	0x0800d4ef
 8009214:	20004c20 	.word	0x20004c20
 8009218:	20000024 	.word	0x20000024
 800921c:	0800c979 	.word	0x0800c979
 8009220:	20004c10 	.word	0x20004c10
 8009224:	0800d4f3 	.word	0x0800d4f3
 8009228:	0800d528 	.word	0x0800d528
 800922c:	20004c04 	.word	0x20004c04
 8009230:	0800d506 	.word	0x0800d506
 8009234:	0800d514 	.word	0x0800d514
 8009238:	0800d527 	.word	0x0800d527
 800923c:	4a3e      	ldr	r2, [pc, #248]	@ (8009338 <_tzset_unlocked_r+0x434>)
 800923e:	493f      	ldr	r1, [pc, #252]	@ (800933c <_tzset_unlocked_r+0x438>)
 8009240:	ab0a      	add	r3, sp, #40	@ 0x28
 8009242:	4648      	mov	r0, r9
 8009244:	f7ff fa7e 	bl	8008744 <siscanf>
 8009248:	2800      	cmp	r0, #0
 800924a:	f77f af17 	ble.w	800907c <_tzset_unlocked_r+0x178>
 800924e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009250:	3b03      	subs	r3, #3
 8009252:	2b07      	cmp	r3, #7
 8009254:	f67f af42 	bls.w	80090dc <_tzset_unlocked_r+0x1d8>
 8009258:	e682      	b.n	8008f60 <_tzset_unlocked_r+0x5c>
 800925a:	2b2b      	cmp	r3, #43	@ 0x2b
 800925c:	bf08      	it	eq
 800925e:	3501      	addeq	r5, #1
 8009260:	f04f 0901 	mov.w	r9, #1
 8009264:	e745      	b.n	80090f2 <_tzset_unlocked_r+0x1ee>
 8009266:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 800926a:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 800926e:	213c      	movs	r1, #60	@ 0x3c
 8009270:	fb01 3302 	mla	r3, r1, r2, r3
 8009274:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 8009278:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 800927c:	fb01 3302 	mla	r3, r1, r2, r3
 8009280:	fb09 f303 	mul.w	r3, r9, r3
 8009284:	e74f      	b.n	8009126 <_tzset_unlocked_r+0x222>
 8009286:	f04f 0b01 	mov.w	fp, #1
 800928a:	e752      	b.n	8009132 <_tzset_unlocked_r+0x22e>
 800928c:	f1b9 0f4a 	cmp.w	r9, #74	@ 0x4a
 8009290:	bf06      	itte	eq
 8009292:	3501      	addeq	r5, #1
 8009294:	464b      	moveq	r3, r9
 8009296:	2344      	movne	r3, #68	@ 0x44
 8009298:	220a      	movs	r2, #10
 800929a:	a90b      	add	r1, sp, #44	@ 0x2c
 800929c:	4628      	mov	r0, r5
 800929e:	9305      	str	r3, [sp, #20]
 80092a0:	f002 f84a 	bl	800b338 <strtoul>
 80092a4:	f8dd 902c 	ldr.w	r9, [sp, #44]	@ 0x2c
 80092a8:	9b05      	ldr	r3, [sp, #20]
 80092aa:	f8ad 0026 	strh.w	r0, [sp, #38]	@ 0x26
 80092ae:	45a9      	cmp	r9, r5
 80092b0:	d114      	bne.n	80092dc <_tzset_unlocked_r+0x3d8>
 80092b2:	234d      	movs	r3, #77	@ 0x4d
 80092b4:	f1bb 0f00 	cmp.w	fp, #0
 80092b8:	d107      	bne.n	80092ca <_tzset_unlocked_r+0x3c6>
 80092ba:	7223      	strb	r3, [r4, #8]
 80092bc:	2103      	movs	r1, #3
 80092be:	2302      	movs	r3, #2
 80092c0:	e9c4 1303 	strd	r1, r3, [r4, #12]
 80092c4:	f8c4 b014 	str.w	fp, [r4, #20]
 80092c8:	e767      	b.n	800919a <_tzset_unlocked_r+0x296>
 80092ca:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
 80092ce:	220b      	movs	r2, #11
 80092d0:	2301      	movs	r3, #1
 80092d2:	e9c4 230d 	strd	r2, r3, [r4, #52]	@ 0x34
 80092d6:	2300      	movs	r3, #0
 80092d8:	63e3      	str	r3, [r4, #60]	@ 0x3c
 80092da:	e75e      	b.n	800919a <_tzset_unlocked_r+0x296>
 80092dc:	b280      	uxth	r0, r0
 80092de:	723b      	strb	r3, [r7, #8]
 80092e0:	6178      	str	r0, [r7, #20]
 80092e2:	e75a      	b.n	800919a <_tzset_unlocked_r+0x296>
 80092e4:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 80092e8:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 80092ec:	213c      	movs	r1, #60	@ 0x3c
 80092ee:	fb01 3302 	mla	r3, r1, r2, r3
 80092f2:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 80092f6:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 80092fa:	fb01 3302 	mla	r3, r1, r2, r3
 80092fe:	61bb      	str	r3, [r7, #24]
 8009300:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8009302:	3728      	adds	r7, #40	@ 0x28
 8009304:	444d      	add	r5, r9
 8009306:	f1bb 0f00 	cmp.w	fp, #0
 800930a:	d0bc      	beq.n	8009286 <_tzset_unlocked_r+0x382>
 800930c:	9b04      	ldr	r3, [sp, #16]
 800930e:	6523      	str	r3, [r4, #80]	@ 0x50
 8009310:	4b0b      	ldr	r3, [pc, #44]	@ (8009340 <_tzset_unlocked_r+0x43c>)
 8009312:	f8c8 3000 	str.w	r3, [r8]
 8009316:	6860      	ldr	r0, [r4, #4]
 8009318:	4b07      	ldr	r3, [pc, #28]	@ (8009338 <_tzset_unlocked_r+0x434>)
 800931a:	62a6      	str	r6, [r4, #40]	@ 0x28
 800931c:	f8c8 3004 	str.w	r3, [r8, #4]
 8009320:	f7ff fd34 	bl	8008d8c <__tzcalc_limits>
 8009324:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8009326:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8009328:	f8ca 2000 	str.w	r2, [sl]
 800932c:	1a9b      	subs	r3, r3, r2
 800932e:	4a05      	ldr	r2, [pc, #20]	@ (8009344 <_tzset_unlocked_r+0x440>)
 8009330:	bf18      	it	ne
 8009332:	2301      	movne	r3, #1
 8009334:	6013      	str	r3, [r2, #0]
 8009336:	e613      	b.n	8008f60 <_tzset_unlocked_r+0x5c>
 8009338:	20004c04 	.word	0x20004c04
 800933c:	0800d506 	.word	0x0800d506
 8009340:	20004c10 	.word	0x20004c10
 8009344:	20004c20 	.word	0x20004c20

08009348 <_localeconv_r>:
 8009348:	4800      	ldr	r0, [pc, #0]	@ (800934c <_localeconv_r+0x4>)
 800934a:	4770      	bx	lr
 800934c:	2000011c 	.word	0x2000011c

08009350 <_close_r>:
 8009350:	b538      	push	{r3, r4, r5, lr}
 8009352:	4d06      	ldr	r5, [pc, #24]	@ (800936c <_close_r+0x1c>)
 8009354:	2300      	movs	r3, #0
 8009356:	4604      	mov	r4, r0
 8009358:	4608      	mov	r0, r1
 800935a:	602b      	str	r3, [r5, #0]
 800935c:	f7fa f800 	bl	8003360 <_close>
 8009360:	1c43      	adds	r3, r0, #1
 8009362:	d102      	bne.n	800936a <_close_r+0x1a>
 8009364:	682b      	ldr	r3, [r5, #0]
 8009366:	b103      	cbz	r3, 800936a <_close_r+0x1a>
 8009368:	6023      	str	r3, [r4, #0]
 800936a:	bd38      	pop	{r3, r4, r5, pc}
 800936c:	20004c24 	.word	0x20004c24

08009370 <_lseek_r>:
 8009370:	b538      	push	{r3, r4, r5, lr}
 8009372:	4d07      	ldr	r5, [pc, #28]	@ (8009390 <_lseek_r+0x20>)
 8009374:	4604      	mov	r4, r0
 8009376:	4608      	mov	r0, r1
 8009378:	4611      	mov	r1, r2
 800937a:	2200      	movs	r2, #0
 800937c:	602a      	str	r2, [r5, #0]
 800937e:	461a      	mov	r2, r3
 8009380:	f7f9 fff8 	bl	8003374 <_lseek>
 8009384:	1c43      	adds	r3, r0, #1
 8009386:	d102      	bne.n	800938e <_lseek_r+0x1e>
 8009388:	682b      	ldr	r3, [r5, #0]
 800938a:	b103      	cbz	r3, 800938e <_lseek_r+0x1e>
 800938c:	6023      	str	r3, [r4, #0]
 800938e:	bd38      	pop	{r3, r4, r5, pc}
 8009390:	20004c24 	.word	0x20004c24

08009394 <_read_r>:
 8009394:	b538      	push	{r3, r4, r5, lr}
 8009396:	4d07      	ldr	r5, [pc, #28]	@ (80093b4 <_read_r+0x20>)
 8009398:	4604      	mov	r4, r0
 800939a:	4608      	mov	r0, r1
 800939c:	4611      	mov	r1, r2
 800939e:	2200      	movs	r2, #0
 80093a0:	602a      	str	r2, [r5, #0]
 80093a2:	461a      	mov	r2, r3
 80093a4:	f7f9 ffc0 	bl	8003328 <_read>
 80093a8:	1c43      	adds	r3, r0, #1
 80093aa:	d102      	bne.n	80093b2 <_read_r+0x1e>
 80093ac:	682b      	ldr	r3, [r5, #0]
 80093ae:	b103      	cbz	r3, 80093b2 <_read_r+0x1e>
 80093b0:	6023      	str	r3, [r4, #0]
 80093b2:	bd38      	pop	{r3, r4, r5, pc}
 80093b4:	20004c24 	.word	0x20004c24

080093b8 <_sbrk_r>:
 80093b8:	b538      	push	{r3, r4, r5, lr}
 80093ba:	4d06      	ldr	r5, [pc, #24]	@ (80093d4 <_sbrk_r+0x1c>)
 80093bc:	2300      	movs	r3, #0
 80093be:	4604      	mov	r4, r0
 80093c0:	4608      	mov	r0, r1
 80093c2:	602b      	str	r3, [r5, #0]
 80093c4:	f7f9 ffd8 	bl	8003378 <_sbrk>
 80093c8:	1c43      	adds	r3, r0, #1
 80093ca:	d102      	bne.n	80093d2 <_sbrk_r+0x1a>
 80093cc:	682b      	ldr	r3, [r5, #0]
 80093ce:	b103      	cbz	r3, 80093d2 <_sbrk_r+0x1a>
 80093d0:	6023      	str	r3, [r4, #0]
 80093d2:	bd38      	pop	{r3, r4, r5, pc}
 80093d4:	20004c24 	.word	0x20004c24

080093d8 <_write_r>:
 80093d8:	b538      	push	{r3, r4, r5, lr}
 80093da:	4d07      	ldr	r5, [pc, #28]	@ (80093f8 <_write_r+0x20>)
 80093dc:	4604      	mov	r4, r0
 80093de:	4608      	mov	r0, r1
 80093e0:	4611      	mov	r1, r2
 80093e2:	2200      	movs	r2, #0
 80093e4:	602a      	str	r2, [r5, #0]
 80093e6:	461a      	mov	r2, r3
 80093e8:	f7f9 ffac 	bl	8003344 <_write>
 80093ec:	1c43      	adds	r3, r0, #1
 80093ee:	d102      	bne.n	80093f6 <_write_r+0x1e>
 80093f0:	682b      	ldr	r3, [r5, #0]
 80093f2:	b103      	cbz	r3, 80093f6 <_write_r+0x1e>
 80093f4:	6023      	str	r3, [r4, #0]
 80093f6:	bd38      	pop	{r3, r4, r5, pc}
 80093f8:	20004c24 	.word	0x20004c24

080093fc <__errno>:
 80093fc:	4b01      	ldr	r3, [pc, #4]	@ (8009404 <__errno+0x8>)
 80093fe:	6818      	ldr	r0, [r3, #0]
 8009400:	4770      	bx	lr
 8009402:	bf00      	nop
 8009404:	20000198 	.word	0x20000198

08009408 <__libc_init_array>:
 8009408:	b570      	push	{r4, r5, r6, lr}
 800940a:	4d0d      	ldr	r5, [pc, #52]	@ (8009440 <__libc_init_array+0x38>)
 800940c:	4c0d      	ldr	r4, [pc, #52]	@ (8009444 <__libc_init_array+0x3c>)
 800940e:	1b64      	subs	r4, r4, r5
 8009410:	10a4      	asrs	r4, r4, #2
 8009412:	2600      	movs	r6, #0
 8009414:	42a6      	cmp	r6, r4
 8009416:	d109      	bne.n	800942c <__libc_init_array+0x24>
 8009418:	4d0b      	ldr	r5, [pc, #44]	@ (8009448 <__libc_init_array+0x40>)
 800941a:	4c0c      	ldr	r4, [pc, #48]	@ (800944c <__libc_init_array+0x44>)
 800941c:	f003 f9ba 	bl	800c794 <_init>
 8009420:	1b64      	subs	r4, r4, r5
 8009422:	10a4      	asrs	r4, r4, #2
 8009424:	2600      	movs	r6, #0
 8009426:	42a6      	cmp	r6, r4
 8009428:	d105      	bne.n	8009436 <__libc_init_array+0x2e>
 800942a:	bd70      	pop	{r4, r5, r6, pc}
 800942c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009430:	4798      	blx	r3
 8009432:	3601      	adds	r6, #1
 8009434:	e7ee      	b.n	8009414 <__libc_init_array+0xc>
 8009436:	f855 3b04 	ldr.w	r3, [r5], #4
 800943a:	4798      	blx	r3
 800943c:	3601      	adds	r6, #1
 800943e:	e7f2      	b.n	8009426 <__libc_init_array+0x1e>
 8009440:	0800d95c 	.word	0x0800d95c
 8009444:	0800d95c 	.word	0x0800d95c
 8009448:	0800d95c 	.word	0x0800d95c
 800944c:	0800d960 	.word	0x0800d960

08009450 <__retarget_lock_init_recursive>:
 8009450:	4770      	bx	lr

08009452 <__retarget_lock_acquire>:
 8009452:	4770      	bx	lr

08009454 <__retarget_lock_acquire_recursive>:
 8009454:	4770      	bx	lr

08009456 <__retarget_lock_release>:
 8009456:	4770      	bx	lr

08009458 <__retarget_lock_release_recursive>:
 8009458:	4770      	bx	lr

0800945a <strcpy>:
 800945a:	4603      	mov	r3, r0
 800945c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009460:	f803 2b01 	strb.w	r2, [r3], #1
 8009464:	2a00      	cmp	r2, #0
 8009466:	d1f9      	bne.n	800945c <strcpy+0x2>
 8009468:	4770      	bx	lr

0800946a <memcpy>:
 800946a:	440a      	add	r2, r1
 800946c:	4291      	cmp	r1, r2
 800946e:	f100 33ff 	add.w	r3, r0, #4294967295
 8009472:	d100      	bne.n	8009476 <memcpy+0xc>
 8009474:	4770      	bx	lr
 8009476:	b510      	push	{r4, lr}
 8009478:	f811 4b01 	ldrb.w	r4, [r1], #1
 800947c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009480:	4291      	cmp	r1, r2
 8009482:	d1f9      	bne.n	8009478 <memcpy+0xe>
 8009484:	bd10      	pop	{r4, pc}
	...

08009488 <nan>:
 8009488:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8009490 <nan+0x8>
 800948c:	4770      	bx	lr
 800948e:	bf00      	nop
 8009490:	00000000 	.word	0x00000000
 8009494:	7ff80000 	.word	0x7ff80000

08009498 <div>:
 8009498:	b510      	push	{r4, lr}
 800949a:	fb91 f4f2 	sdiv	r4, r1, r2
 800949e:	fb02 1114 	mls	r1, r2, r4, r1
 80094a2:	6004      	str	r4, [r0, #0]
 80094a4:	6041      	str	r1, [r0, #4]
 80094a6:	bd10      	pop	{r4, pc}

080094a8 <quorem>:
 80094a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094ac:	6903      	ldr	r3, [r0, #16]
 80094ae:	690c      	ldr	r4, [r1, #16]
 80094b0:	42a3      	cmp	r3, r4
 80094b2:	4607      	mov	r7, r0
 80094b4:	db7e      	blt.n	80095b4 <quorem+0x10c>
 80094b6:	3c01      	subs	r4, #1
 80094b8:	f101 0814 	add.w	r8, r1, #20
 80094bc:	00a3      	lsls	r3, r4, #2
 80094be:	f100 0514 	add.w	r5, r0, #20
 80094c2:	9300      	str	r3, [sp, #0]
 80094c4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80094c8:	9301      	str	r3, [sp, #4]
 80094ca:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80094ce:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80094d2:	3301      	adds	r3, #1
 80094d4:	429a      	cmp	r2, r3
 80094d6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80094da:	fbb2 f6f3 	udiv	r6, r2, r3
 80094de:	d32e      	bcc.n	800953e <quorem+0x96>
 80094e0:	f04f 0a00 	mov.w	sl, #0
 80094e4:	46c4      	mov	ip, r8
 80094e6:	46ae      	mov	lr, r5
 80094e8:	46d3      	mov	fp, sl
 80094ea:	f85c 3b04 	ldr.w	r3, [ip], #4
 80094ee:	b298      	uxth	r0, r3
 80094f0:	fb06 a000 	mla	r0, r6, r0, sl
 80094f4:	0c02      	lsrs	r2, r0, #16
 80094f6:	0c1b      	lsrs	r3, r3, #16
 80094f8:	fb06 2303 	mla	r3, r6, r3, r2
 80094fc:	f8de 2000 	ldr.w	r2, [lr]
 8009500:	b280      	uxth	r0, r0
 8009502:	b292      	uxth	r2, r2
 8009504:	1a12      	subs	r2, r2, r0
 8009506:	445a      	add	r2, fp
 8009508:	f8de 0000 	ldr.w	r0, [lr]
 800950c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009510:	b29b      	uxth	r3, r3
 8009512:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8009516:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800951a:	b292      	uxth	r2, r2
 800951c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8009520:	45e1      	cmp	r9, ip
 8009522:	f84e 2b04 	str.w	r2, [lr], #4
 8009526:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800952a:	d2de      	bcs.n	80094ea <quorem+0x42>
 800952c:	9b00      	ldr	r3, [sp, #0]
 800952e:	58eb      	ldr	r3, [r5, r3]
 8009530:	b92b      	cbnz	r3, 800953e <quorem+0x96>
 8009532:	9b01      	ldr	r3, [sp, #4]
 8009534:	3b04      	subs	r3, #4
 8009536:	429d      	cmp	r5, r3
 8009538:	461a      	mov	r2, r3
 800953a:	d32f      	bcc.n	800959c <quorem+0xf4>
 800953c:	613c      	str	r4, [r7, #16]
 800953e:	4638      	mov	r0, r7
 8009540:	f001 fc9c 	bl	800ae7c <__mcmp>
 8009544:	2800      	cmp	r0, #0
 8009546:	db25      	blt.n	8009594 <quorem+0xec>
 8009548:	4629      	mov	r1, r5
 800954a:	2000      	movs	r0, #0
 800954c:	f858 2b04 	ldr.w	r2, [r8], #4
 8009550:	f8d1 c000 	ldr.w	ip, [r1]
 8009554:	fa1f fe82 	uxth.w	lr, r2
 8009558:	fa1f f38c 	uxth.w	r3, ip
 800955c:	eba3 030e 	sub.w	r3, r3, lr
 8009560:	4403      	add	r3, r0
 8009562:	0c12      	lsrs	r2, r2, #16
 8009564:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8009568:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800956c:	b29b      	uxth	r3, r3
 800956e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009572:	45c1      	cmp	r9, r8
 8009574:	f841 3b04 	str.w	r3, [r1], #4
 8009578:	ea4f 4022 	mov.w	r0, r2, asr #16
 800957c:	d2e6      	bcs.n	800954c <quorem+0xa4>
 800957e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009582:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009586:	b922      	cbnz	r2, 8009592 <quorem+0xea>
 8009588:	3b04      	subs	r3, #4
 800958a:	429d      	cmp	r5, r3
 800958c:	461a      	mov	r2, r3
 800958e:	d30b      	bcc.n	80095a8 <quorem+0x100>
 8009590:	613c      	str	r4, [r7, #16]
 8009592:	3601      	adds	r6, #1
 8009594:	4630      	mov	r0, r6
 8009596:	b003      	add	sp, #12
 8009598:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800959c:	6812      	ldr	r2, [r2, #0]
 800959e:	3b04      	subs	r3, #4
 80095a0:	2a00      	cmp	r2, #0
 80095a2:	d1cb      	bne.n	800953c <quorem+0x94>
 80095a4:	3c01      	subs	r4, #1
 80095a6:	e7c6      	b.n	8009536 <quorem+0x8e>
 80095a8:	6812      	ldr	r2, [r2, #0]
 80095aa:	3b04      	subs	r3, #4
 80095ac:	2a00      	cmp	r2, #0
 80095ae:	d1ef      	bne.n	8009590 <quorem+0xe8>
 80095b0:	3c01      	subs	r4, #1
 80095b2:	e7ea      	b.n	800958a <quorem+0xe2>
 80095b4:	2000      	movs	r0, #0
 80095b6:	e7ee      	b.n	8009596 <quorem+0xee>

080095b8 <_dtoa_r>:
 80095b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095bc:	69c7      	ldr	r7, [r0, #28]
 80095be:	b099      	sub	sp, #100	@ 0x64
 80095c0:	ed8d 0b02 	vstr	d0, [sp, #8]
 80095c4:	ec55 4b10 	vmov	r4, r5, d0
 80095c8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 80095ca:	9109      	str	r1, [sp, #36]	@ 0x24
 80095cc:	4683      	mov	fp, r0
 80095ce:	920e      	str	r2, [sp, #56]	@ 0x38
 80095d0:	9313      	str	r3, [sp, #76]	@ 0x4c
 80095d2:	b97f      	cbnz	r7, 80095f4 <_dtoa_r+0x3c>
 80095d4:	2010      	movs	r0, #16
 80095d6:	f7fd fc79 	bl	8006ecc <malloc>
 80095da:	4602      	mov	r2, r0
 80095dc:	f8cb 001c 	str.w	r0, [fp, #28]
 80095e0:	b920      	cbnz	r0, 80095ec <_dtoa_r+0x34>
 80095e2:	4ba7      	ldr	r3, [pc, #668]	@ (8009880 <_dtoa_r+0x2c8>)
 80095e4:	21ef      	movs	r1, #239	@ 0xef
 80095e6:	48a7      	ldr	r0, [pc, #668]	@ (8009884 <_dtoa_r+0x2cc>)
 80095e8:	f002 fc6c 	bl	800bec4 <__assert_func>
 80095ec:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80095f0:	6007      	str	r7, [r0, #0]
 80095f2:	60c7      	str	r7, [r0, #12]
 80095f4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80095f8:	6819      	ldr	r1, [r3, #0]
 80095fa:	b159      	cbz	r1, 8009614 <_dtoa_r+0x5c>
 80095fc:	685a      	ldr	r2, [r3, #4]
 80095fe:	604a      	str	r2, [r1, #4]
 8009600:	2301      	movs	r3, #1
 8009602:	4093      	lsls	r3, r2
 8009604:	608b      	str	r3, [r1, #8]
 8009606:	4658      	mov	r0, fp
 8009608:	f001 f9b4 	bl	800a974 <_Bfree>
 800960c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009610:	2200      	movs	r2, #0
 8009612:	601a      	str	r2, [r3, #0]
 8009614:	1e2b      	subs	r3, r5, #0
 8009616:	bfb9      	ittee	lt
 8009618:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800961c:	9303      	strlt	r3, [sp, #12]
 800961e:	2300      	movge	r3, #0
 8009620:	6033      	strge	r3, [r6, #0]
 8009622:	9f03      	ldr	r7, [sp, #12]
 8009624:	4b98      	ldr	r3, [pc, #608]	@ (8009888 <_dtoa_r+0x2d0>)
 8009626:	bfbc      	itt	lt
 8009628:	2201      	movlt	r2, #1
 800962a:	6032      	strlt	r2, [r6, #0]
 800962c:	43bb      	bics	r3, r7
 800962e:	d112      	bne.n	8009656 <_dtoa_r+0x9e>
 8009630:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8009632:	f242 730f 	movw	r3, #9999	@ 0x270f
 8009636:	6013      	str	r3, [r2, #0]
 8009638:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800963c:	4323      	orrs	r3, r4
 800963e:	f000 854d 	beq.w	800a0dc <_dtoa_r+0xb24>
 8009642:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009644:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800989c <_dtoa_r+0x2e4>
 8009648:	2b00      	cmp	r3, #0
 800964a:	f000 854f 	beq.w	800a0ec <_dtoa_r+0xb34>
 800964e:	f10a 0303 	add.w	r3, sl, #3
 8009652:	f000 bd49 	b.w	800a0e8 <_dtoa_r+0xb30>
 8009656:	ed9d 7b02 	vldr	d7, [sp, #8]
 800965a:	2200      	movs	r2, #0
 800965c:	ec51 0b17 	vmov	r0, r1, d7
 8009660:	2300      	movs	r3, #0
 8009662:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8009666:	f7f7 fa3f 	bl	8000ae8 <__aeabi_dcmpeq>
 800966a:	4680      	mov	r8, r0
 800966c:	b158      	cbz	r0, 8009686 <_dtoa_r+0xce>
 800966e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8009670:	2301      	movs	r3, #1
 8009672:	6013      	str	r3, [r2, #0]
 8009674:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009676:	b113      	cbz	r3, 800967e <_dtoa_r+0xc6>
 8009678:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800967a:	4b84      	ldr	r3, [pc, #528]	@ (800988c <_dtoa_r+0x2d4>)
 800967c:	6013      	str	r3, [r2, #0]
 800967e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 80098a0 <_dtoa_r+0x2e8>
 8009682:	f000 bd33 	b.w	800a0ec <_dtoa_r+0xb34>
 8009686:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800968a:	aa16      	add	r2, sp, #88	@ 0x58
 800968c:	a917      	add	r1, sp, #92	@ 0x5c
 800968e:	4658      	mov	r0, fp
 8009690:	f001 fd14 	bl	800b0bc <__d2b>
 8009694:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8009698:	4681      	mov	r9, r0
 800969a:	2e00      	cmp	r6, #0
 800969c:	d077      	beq.n	800978e <_dtoa_r+0x1d6>
 800969e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80096a0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 80096a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80096a8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80096ac:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80096b0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80096b4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80096b8:	4619      	mov	r1, r3
 80096ba:	2200      	movs	r2, #0
 80096bc:	4b74      	ldr	r3, [pc, #464]	@ (8009890 <_dtoa_r+0x2d8>)
 80096be:	f7f6 fdf3 	bl	80002a8 <__aeabi_dsub>
 80096c2:	a369      	add	r3, pc, #420	@ (adr r3, 8009868 <_dtoa_r+0x2b0>)
 80096c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096c8:	f7f6 ffa6 	bl	8000618 <__aeabi_dmul>
 80096cc:	a368      	add	r3, pc, #416	@ (adr r3, 8009870 <_dtoa_r+0x2b8>)
 80096ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096d2:	f7f6 fdeb 	bl	80002ac <__adddf3>
 80096d6:	4604      	mov	r4, r0
 80096d8:	4630      	mov	r0, r6
 80096da:	460d      	mov	r5, r1
 80096dc:	f7f6 ff32 	bl	8000544 <__aeabi_i2d>
 80096e0:	a365      	add	r3, pc, #404	@ (adr r3, 8009878 <_dtoa_r+0x2c0>)
 80096e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096e6:	f7f6 ff97 	bl	8000618 <__aeabi_dmul>
 80096ea:	4602      	mov	r2, r0
 80096ec:	460b      	mov	r3, r1
 80096ee:	4620      	mov	r0, r4
 80096f0:	4629      	mov	r1, r5
 80096f2:	f7f6 fddb 	bl	80002ac <__adddf3>
 80096f6:	4604      	mov	r4, r0
 80096f8:	460d      	mov	r5, r1
 80096fa:	f7f7 fa3d 	bl	8000b78 <__aeabi_d2iz>
 80096fe:	2200      	movs	r2, #0
 8009700:	4607      	mov	r7, r0
 8009702:	2300      	movs	r3, #0
 8009704:	4620      	mov	r0, r4
 8009706:	4629      	mov	r1, r5
 8009708:	f7f7 f9f8 	bl	8000afc <__aeabi_dcmplt>
 800970c:	b140      	cbz	r0, 8009720 <_dtoa_r+0x168>
 800970e:	4638      	mov	r0, r7
 8009710:	f7f6 ff18 	bl	8000544 <__aeabi_i2d>
 8009714:	4622      	mov	r2, r4
 8009716:	462b      	mov	r3, r5
 8009718:	f7f7 f9e6 	bl	8000ae8 <__aeabi_dcmpeq>
 800971c:	b900      	cbnz	r0, 8009720 <_dtoa_r+0x168>
 800971e:	3f01      	subs	r7, #1
 8009720:	2f16      	cmp	r7, #22
 8009722:	d851      	bhi.n	80097c8 <_dtoa_r+0x210>
 8009724:	4b5b      	ldr	r3, [pc, #364]	@ (8009894 <_dtoa_r+0x2dc>)
 8009726:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800972a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800972e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009732:	f7f7 f9e3 	bl	8000afc <__aeabi_dcmplt>
 8009736:	2800      	cmp	r0, #0
 8009738:	d048      	beq.n	80097cc <_dtoa_r+0x214>
 800973a:	3f01      	subs	r7, #1
 800973c:	2300      	movs	r3, #0
 800973e:	9312      	str	r3, [sp, #72]	@ 0x48
 8009740:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8009742:	1b9b      	subs	r3, r3, r6
 8009744:	1e5a      	subs	r2, r3, #1
 8009746:	bf44      	itt	mi
 8009748:	f1c3 0801 	rsbmi	r8, r3, #1
 800974c:	2300      	movmi	r3, #0
 800974e:	9208      	str	r2, [sp, #32]
 8009750:	bf54      	ite	pl
 8009752:	f04f 0800 	movpl.w	r8, #0
 8009756:	9308      	strmi	r3, [sp, #32]
 8009758:	2f00      	cmp	r7, #0
 800975a:	db39      	blt.n	80097d0 <_dtoa_r+0x218>
 800975c:	9b08      	ldr	r3, [sp, #32]
 800975e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8009760:	443b      	add	r3, r7
 8009762:	9308      	str	r3, [sp, #32]
 8009764:	2300      	movs	r3, #0
 8009766:	930a      	str	r3, [sp, #40]	@ 0x28
 8009768:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800976a:	2b09      	cmp	r3, #9
 800976c:	d864      	bhi.n	8009838 <_dtoa_r+0x280>
 800976e:	2b05      	cmp	r3, #5
 8009770:	bfc4      	itt	gt
 8009772:	3b04      	subgt	r3, #4
 8009774:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8009776:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009778:	f1a3 0302 	sub.w	r3, r3, #2
 800977c:	bfcc      	ite	gt
 800977e:	2400      	movgt	r4, #0
 8009780:	2401      	movle	r4, #1
 8009782:	2b03      	cmp	r3, #3
 8009784:	d863      	bhi.n	800984e <_dtoa_r+0x296>
 8009786:	e8df f003 	tbb	[pc, r3]
 800978a:	372a      	.short	0x372a
 800978c:	5535      	.short	0x5535
 800978e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8009792:	441e      	add	r6, r3
 8009794:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8009798:	2b20      	cmp	r3, #32
 800979a:	bfc1      	itttt	gt
 800979c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80097a0:	409f      	lslgt	r7, r3
 80097a2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80097a6:	fa24 f303 	lsrgt.w	r3, r4, r3
 80097aa:	bfd6      	itet	le
 80097ac:	f1c3 0320 	rsble	r3, r3, #32
 80097b0:	ea47 0003 	orrgt.w	r0, r7, r3
 80097b4:	fa04 f003 	lslle.w	r0, r4, r3
 80097b8:	f7f6 feb4 	bl	8000524 <__aeabi_ui2d>
 80097bc:	2201      	movs	r2, #1
 80097be:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80097c2:	3e01      	subs	r6, #1
 80097c4:	9214      	str	r2, [sp, #80]	@ 0x50
 80097c6:	e777      	b.n	80096b8 <_dtoa_r+0x100>
 80097c8:	2301      	movs	r3, #1
 80097ca:	e7b8      	b.n	800973e <_dtoa_r+0x186>
 80097cc:	9012      	str	r0, [sp, #72]	@ 0x48
 80097ce:	e7b7      	b.n	8009740 <_dtoa_r+0x188>
 80097d0:	427b      	negs	r3, r7
 80097d2:	930a      	str	r3, [sp, #40]	@ 0x28
 80097d4:	2300      	movs	r3, #0
 80097d6:	eba8 0807 	sub.w	r8, r8, r7
 80097da:	930f      	str	r3, [sp, #60]	@ 0x3c
 80097dc:	e7c4      	b.n	8009768 <_dtoa_r+0x1b0>
 80097de:	2300      	movs	r3, #0
 80097e0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80097e2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	dc35      	bgt.n	8009854 <_dtoa_r+0x29c>
 80097e8:	2301      	movs	r3, #1
 80097ea:	9300      	str	r3, [sp, #0]
 80097ec:	9307      	str	r3, [sp, #28]
 80097ee:	461a      	mov	r2, r3
 80097f0:	920e      	str	r2, [sp, #56]	@ 0x38
 80097f2:	e00b      	b.n	800980c <_dtoa_r+0x254>
 80097f4:	2301      	movs	r3, #1
 80097f6:	e7f3      	b.n	80097e0 <_dtoa_r+0x228>
 80097f8:	2300      	movs	r3, #0
 80097fa:	930b      	str	r3, [sp, #44]	@ 0x2c
 80097fc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80097fe:	18fb      	adds	r3, r7, r3
 8009800:	9300      	str	r3, [sp, #0]
 8009802:	3301      	adds	r3, #1
 8009804:	2b01      	cmp	r3, #1
 8009806:	9307      	str	r3, [sp, #28]
 8009808:	bfb8      	it	lt
 800980a:	2301      	movlt	r3, #1
 800980c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8009810:	2100      	movs	r1, #0
 8009812:	2204      	movs	r2, #4
 8009814:	f102 0514 	add.w	r5, r2, #20
 8009818:	429d      	cmp	r5, r3
 800981a:	d91f      	bls.n	800985c <_dtoa_r+0x2a4>
 800981c:	6041      	str	r1, [r0, #4]
 800981e:	4658      	mov	r0, fp
 8009820:	f001 f868 	bl	800a8f4 <_Balloc>
 8009824:	4682      	mov	sl, r0
 8009826:	2800      	cmp	r0, #0
 8009828:	d13c      	bne.n	80098a4 <_dtoa_r+0x2ec>
 800982a:	4b1b      	ldr	r3, [pc, #108]	@ (8009898 <_dtoa_r+0x2e0>)
 800982c:	4602      	mov	r2, r0
 800982e:	f240 11af 	movw	r1, #431	@ 0x1af
 8009832:	e6d8      	b.n	80095e6 <_dtoa_r+0x2e>
 8009834:	2301      	movs	r3, #1
 8009836:	e7e0      	b.n	80097fa <_dtoa_r+0x242>
 8009838:	2401      	movs	r4, #1
 800983a:	2300      	movs	r3, #0
 800983c:	9309      	str	r3, [sp, #36]	@ 0x24
 800983e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8009840:	f04f 33ff 	mov.w	r3, #4294967295
 8009844:	9300      	str	r3, [sp, #0]
 8009846:	9307      	str	r3, [sp, #28]
 8009848:	2200      	movs	r2, #0
 800984a:	2312      	movs	r3, #18
 800984c:	e7d0      	b.n	80097f0 <_dtoa_r+0x238>
 800984e:	2301      	movs	r3, #1
 8009850:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009852:	e7f5      	b.n	8009840 <_dtoa_r+0x288>
 8009854:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009856:	9300      	str	r3, [sp, #0]
 8009858:	9307      	str	r3, [sp, #28]
 800985a:	e7d7      	b.n	800980c <_dtoa_r+0x254>
 800985c:	3101      	adds	r1, #1
 800985e:	0052      	lsls	r2, r2, #1
 8009860:	e7d8      	b.n	8009814 <_dtoa_r+0x25c>
 8009862:	bf00      	nop
 8009864:	f3af 8000 	nop.w
 8009868:	636f4361 	.word	0x636f4361
 800986c:	3fd287a7 	.word	0x3fd287a7
 8009870:	8b60c8b3 	.word	0x8b60c8b3
 8009874:	3fc68a28 	.word	0x3fc68a28
 8009878:	509f79fb 	.word	0x509f79fb
 800987c:	3fd34413 	.word	0x3fd34413
 8009880:	0800d54f 	.word	0x0800d54f
 8009884:	0800d566 	.word	0x0800d566
 8009888:	7ff00000 	.word	0x7ff00000
 800988c:	0800d8b1 	.word	0x0800d8b1
 8009890:	3ff80000 	.word	0x3ff80000
 8009894:	0800d6c0 	.word	0x0800d6c0
 8009898:	0800d5be 	.word	0x0800d5be
 800989c:	0800d54b 	.word	0x0800d54b
 80098a0:	0800d8b0 	.word	0x0800d8b0
 80098a4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80098a8:	6018      	str	r0, [r3, #0]
 80098aa:	9b07      	ldr	r3, [sp, #28]
 80098ac:	2b0e      	cmp	r3, #14
 80098ae:	f200 80a4 	bhi.w	80099fa <_dtoa_r+0x442>
 80098b2:	2c00      	cmp	r4, #0
 80098b4:	f000 80a1 	beq.w	80099fa <_dtoa_r+0x442>
 80098b8:	2f00      	cmp	r7, #0
 80098ba:	dd33      	ble.n	8009924 <_dtoa_r+0x36c>
 80098bc:	4bad      	ldr	r3, [pc, #692]	@ (8009b74 <_dtoa_r+0x5bc>)
 80098be:	f007 020f 	and.w	r2, r7, #15
 80098c2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80098c6:	ed93 7b00 	vldr	d7, [r3]
 80098ca:	05f8      	lsls	r0, r7, #23
 80098cc:	ed8d 7b04 	vstr	d7, [sp, #16]
 80098d0:	ea4f 1427 	mov.w	r4, r7, asr #4
 80098d4:	d516      	bpl.n	8009904 <_dtoa_r+0x34c>
 80098d6:	4ba8      	ldr	r3, [pc, #672]	@ (8009b78 <_dtoa_r+0x5c0>)
 80098d8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80098dc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80098e0:	f7f6 ffc4 	bl	800086c <__aeabi_ddiv>
 80098e4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80098e8:	f004 040f 	and.w	r4, r4, #15
 80098ec:	2603      	movs	r6, #3
 80098ee:	4da2      	ldr	r5, [pc, #648]	@ (8009b78 <_dtoa_r+0x5c0>)
 80098f0:	b954      	cbnz	r4, 8009908 <_dtoa_r+0x350>
 80098f2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80098f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80098fa:	f7f6 ffb7 	bl	800086c <__aeabi_ddiv>
 80098fe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009902:	e028      	b.n	8009956 <_dtoa_r+0x39e>
 8009904:	2602      	movs	r6, #2
 8009906:	e7f2      	b.n	80098ee <_dtoa_r+0x336>
 8009908:	07e1      	lsls	r1, r4, #31
 800990a:	d508      	bpl.n	800991e <_dtoa_r+0x366>
 800990c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009910:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009914:	f7f6 fe80 	bl	8000618 <__aeabi_dmul>
 8009918:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800991c:	3601      	adds	r6, #1
 800991e:	1064      	asrs	r4, r4, #1
 8009920:	3508      	adds	r5, #8
 8009922:	e7e5      	b.n	80098f0 <_dtoa_r+0x338>
 8009924:	f000 80d2 	beq.w	8009acc <_dtoa_r+0x514>
 8009928:	427c      	negs	r4, r7
 800992a:	4b92      	ldr	r3, [pc, #584]	@ (8009b74 <_dtoa_r+0x5bc>)
 800992c:	4d92      	ldr	r5, [pc, #584]	@ (8009b78 <_dtoa_r+0x5c0>)
 800992e:	f004 020f 	and.w	r2, r4, #15
 8009932:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009936:	e9d3 2300 	ldrd	r2, r3, [r3]
 800993a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800993e:	f7f6 fe6b 	bl	8000618 <__aeabi_dmul>
 8009942:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009946:	1124      	asrs	r4, r4, #4
 8009948:	2300      	movs	r3, #0
 800994a:	2602      	movs	r6, #2
 800994c:	2c00      	cmp	r4, #0
 800994e:	f040 80b2 	bne.w	8009ab6 <_dtoa_r+0x4fe>
 8009952:	2b00      	cmp	r3, #0
 8009954:	d1d3      	bne.n	80098fe <_dtoa_r+0x346>
 8009956:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009958:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800995c:	2b00      	cmp	r3, #0
 800995e:	f000 80b7 	beq.w	8009ad0 <_dtoa_r+0x518>
 8009962:	4b86      	ldr	r3, [pc, #536]	@ (8009b7c <_dtoa_r+0x5c4>)
 8009964:	2200      	movs	r2, #0
 8009966:	4620      	mov	r0, r4
 8009968:	4629      	mov	r1, r5
 800996a:	f7f7 f8c7 	bl	8000afc <__aeabi_dcmplt>
 800996e:	2800      	cmp	r0, #0
 8009970:	f000 80ae 	beq.w	8009ad0 <_dtoa_r+0x518>
 8009974:	9b07      	ldr	r3, [sp, #28]
 8009976:	2b00      	cmp	r3, #0
 8009978:	f000 80aa 	beq.w	8009ad0 <_dtoa_r+0x518>
 800997c:	9b00      	ldr	r3, [sp, #0]
 800997e:	2b00      	cmp	r3, #0
 8009980:	dd37      	ble.n	80099f2 <_dtoa_r+0x43a>
 8009982:	1e7b      	subs	r3, r7, #1
 8009984:	9304      	str	r3, [sp, #16]
 8009986:	4620      	mov	r0, r4
 8009988:	4b7d      	ldr	r3, [pc, #500]	@ (8009b80 <_dtoa_r+0x5c8>)
 800998a:	2200      	movs	r2, #0
 800998c:	4629      	mov	r1, r5
 800998e:	f7f6 fe43 	bl	8000618 <__aeabi_dmul>
 8009992:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009996:	9c00      	ldr	r4, [sp, #0]
 8009998:	3601      	adds	r6, #1
 800999a:	4630      	mov	r0, r6
 800999c:	f7f6 fdd2 	bl	8000544 <__aeabi_i2d>
 80099a0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80099a4:	f7f6 fe38 	bl	8000618 <__aeabi_dmul>
 80099a8:	4b76      	ldr	r3, [pc, #472]	@ (8009b84 <_dtoa_r+0x5cc>)
 80099aa:	2200      	movs	r2, #0
 80099ac:	f7f6 fc7e 	bl	80002ac <__adddf3>
 80099b0:	4605      	mov	r5, r0
 80099b2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80099b6:	2c00      	cmp	r4, #0
 80099b8:	f040 808d 	bne.w	8009ad6 <_dtoa_r+0x51e>
 80099bc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80099c0:	4b71      	ldr	r3, [pc, #452]	@ (8009b88 <_dtoa_r+0x5d0>)
 80099c2:	2200      	movs	r2, #0
 80099c4:	f7f6 fc70 	bl	80002a8 <__aeabi_dsub>
 80099c8:	4602      	mov	r2, r0
 80099ca:	460b      	mov	r3, r1
 80099cc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80099d0:	462a      	mov	r2, r5
 80099d2:	4633      	mov	r3, r6
 80099d4:	f7f7 f8b0 	bl	8000b38 <__aeabi_dcmpgt>
 80099d8:	2800      	cmp	r0, #0
 80099da:	f040 828b 	bne.w	8009ef4 <_dtoa_r+0x93c>
 80099de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80099e2:	462a      	mov	r2, r5
 80099e4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80099e8:	f7f7 f888 	bl	8000afc <__aeabi_dcmplt>
 80099ec:	2800      	cmp	r0, #0
 80099ee:	f040 8128 	bne.w	8009c42 <_dtoa_r+0x68a>
 80099f2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80099f6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80099fa:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	f2c0 815a 	blt.w	8009cb6 <_dtoa_r+0x6fe>
 8009a02:	2f0e      	cmp	r7, #14
 8009a04:	f300 8157 	bgt.w	8009cb6 <_dtoa_r+0x6fe>
 8009a08:	4b5a      	ldr	r3, [pc, #360]	@ (8009b74 <_dtoa_r+0x5bc>)
 8009a0a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009a0e:	ed93 7b00 	vldr	d7, [r3]
 8009a12:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	ed8d 7b00 	vstr	d7, [sp]
 8009a1a:	da03      	bge.n	8009a24 <_dtoa_r+0x46c>
 8009a1c:	9b07      	ldr	r3, [sp, #28]
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	f340 8101 	ble.w	8009c26 <_dtoa_r+0x66e>
 8009a24:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8009a28:	4656      	mov	r6, sl
 8009a2a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009a2e:	4620      	mov	r0, r4
 8009a30:	4629      	mov	r1, r5
 8009a32:	f7f6 ff1b 	bl	800086c <__aeabi_ddiv>
 8009a36:	f7f7 f89f 	bl	8000b78 <__aeabi_d2iz>
 8009a3a:	4680      	mov	r8, r0
 8009a3c:	f7f6 fd82 	bl	8000544 <__aeabi_i2d>
 8009a40:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009a44:	f7f6 fde8 	bl	8000618 <__aeabi_dmul>
 8009a48:	4602      	mov	r2, r0
 8009a4a:	460b      	mov	r3, r1
 8009a4c:	4620      	mov	r0, r4
 8009a4e:	4629      	mov	r1, r5
 8009a50:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8009a54:	f7f6 fc28 	bl	80002a8 <__aeabi_dsub>
 8009a58:	f806 4b01 	strb.w	r4, [r6], #1
 8009a5c:	9d07      	ldr	r5, [sp, #28]
 8009a5e:	eba6 040a 	sub.w	r4, r6, sl
 8009a62:	42a5      	cmp	r5, r4
 8009a64:	4602      	mov	r2, r0
 8009a66:	460b      	mov	r3, r1
 8009a68:	f040 8117 	bne.w	8009c9a <_dtoa_r+0x6e2>
 8009a6c:	f7f6 fc1e 	bl	80002ac <__adddf3>
 8009a70:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009a74:	4604      	mov	r4, r0
 8009a76:	460d      	mov	r5, r1
 8009a78:	f7f7 f85e 	bl	8000b38 <__aeabi_dcmpgt>
 8009a7c:	2800      	cmp	r0, #0
 8009a7e:	f040 80f9 	bne.w	8009c74 <_dtoa_r+0x6bc>
 8009a82:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009a86:	4620      	mov	r0, r4
 8009a88:	4629      	mov	r1, r5
 8009a8a:	f7f7 f82d 	bl	8000ae8 <__aeabi_dcmpeq>
 8009a8e:	b118      	cbz	r0, 8009a98 <_dtoa_r+0x4e0>
 8009a90:	f018 0f01 	tst.w	r8, #1
 8009a94:	f040 80ee 	bne.w	8009c74 <_dtoa_r+0x6bc>
 8009a98:	4649      	mov	r1, r9
 8009a9a:	4658      	mov	r0, fp
 8009a9c:	f000 ff6a 	bl	800a974 <_Bfree>
 8009aa0:	2300      	movs	r3, #0
 8009aa2:	7033      	strb	r3, [r6, #0]
 8009aa4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009aa6:	3701      	adds	r7, #1
 8009aa8:	601f      	str	r7, [r3, #0]
 8009aaa:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	f000 831d 	beq.w	800a0ec <_dtoa_r+0xb34>
 8009ab2:	601e      	str	r6, [r3, #0]
 8009ab4:	e31a      	b.n	800a0ec <_dtoa_r+0xb34>
 8009ab6:	07e2      	lsls	r2, r4, #31
 8009ab8:	d505      	bpl.n	8009ac6 <_dtoa_r+0x50e>
 8009aba:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009abe:	f7f6 fdab 	bl	8000618 <__aeabi_dmul>
 8009ac2:	3601      	adds	r6, #1
 8009ac4:	2301      	movs	r3, #1
 8009ac6:	1064      	asrs	r4, r4, #1
 8009ac8:	3508      	adds	r5, #8
 8009aca:	e73f      	b.n	800994c <_dtoa_r+0x394>
 8009acc:	2602      	movs	r6, #2
 8009ace:	e742      	b.n	8009956 <_dtoa_r+0x39e>
 8009ad0:	9c07      	ldr	r4, [sp, #28]
 8009ad2:	9704      	str	r7, [sp, #16]
 8009ad4:	e761      	b.n	800999a <_dtoa_r+0x3e2>
 8009ad6:	4b27      	ldr	r3, [pc, #156]	@ (8009b74 <_dtoa_r+0x5bc>)
 8009ad8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009ada:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009ade:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009ae2:	4454      	add	r4, sl
 8009ae4:	2900      	cmp	r1, #0
 8009ae6:	d053      	beq.n	8009b90 <_dtoa_r+0x5d8>
 8009ae8:	4928      	ldr	r1, [pc, #160]	@ (8009b8c <_dtoa_r+0x5d4>)
 8009aea:	2000      	movs	r0, #0
 8009aec:	f7f6 febe 	bl	800086c <__aeabi_ddiv>
 8009af0:	4633      	mov	r3, r6
 8009af2:	462a      	mov	r2, r5
 8009af4:	f7f6 fbd8 	bl	80002a8 <__aeabi_dsub>
 8009af8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009afc:	4656      	mov	r6, sl
 8009afe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009b02:	f7f7 f839 	bl	8000b78 <__aeabi_d2iz>
 8009b06:	4605      	mov	r5, r0
 8009b08:	f7f6 fd1c 	bl	8000544 <__aeabi_i2d>
 8009b0c:	4602      	mov	r2, r0
 8009b0e:	460b      	mov	r3, r1
 8009b10:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009b14:	f7f6 fbc8 	bl	80002a8 <__aeabi_dsub>
 8009b18:	3530      	adds	r5, #48	@ 0x30
 8009b1a:	4602      	mov	r2, r0
 8009b1c:	460b      	mov	r3, r1
 8009b1e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009b22:	f806 5b01 	strb.w	r5, [r6], #1
 8009b26:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009b2a:	f7f6 ffe7 	bl	8000afc <__aeabi_dcmplt>
 8009b2e:	2800      	cmp	r0, #0
 8009b30:	d171      	bne.n	8009c16 <_dtoa_r+0x65e>
 8009b32:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009b36:	4911      	ldr	r1, [pc, #68]	@ (8009b7c <_dtoa_r+0x5c4>)
 8009b38:	2000      	movs	r0, #0
 8009b3a:	f7f6 fbb5 	bl	80002a8 <__aeabi_dsub>
 8009b3e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009b42:	f7f6 ffdb 	bl	8000afc <__aeabi_dcmplt>
 8009b46:	2800      	cmp	r0, #0
 8009b48:	f040 8095 	bne.w	8009c76 <_dtoa_r+0x6be>
 8009b4c:	42a6      	cmp	r6, r4
 8009b4e:	f43f af50 	beq.w	80099f2 <_dtoa_r+0x43a>
 8009b52:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8009b56:	4b0a      	ldr	r3, [pc, #40]	@ (8009b80 <_dtoa_r+0x5c8>)
 8009b58:	2200      	movs	r2, #0
 8009b5a:	f7f6 fd5d 	bl	8000618 <__aeabi_dmul>
 8009b5e:	4b08      	ldr	r3, [pc, #32]	@ (8009b80 <_dtoa_r+0x5c8>)
 8009b60:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009b64:	2200      	movs	r2, #0
 8009b66:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009b6a:	f7f6 fd55 	bl	8000618 <__aeabi_dmul>
 8009b6e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009b72:	e7c4      	b.n	8009afe <_dtoa_r+0x546>
 8009b74:	0800d6c0 	.word	0x0800d6c0
 8009b78:	0800d698 	.word	0x0800d698
 8009b7c:	3ff00000 	.word	0x3ff00000
 8009b80:	40240000 	.word	0x40240000
 8009b84:	401c0000 	.word	0x401c0000
 8009b88:	40140000 	.word	0x40140000
 8009b8c:	3fe00000 	.word	0x3fe00000
 8009b90:	4631      	mov	r1, r6
 8009b92:	4628      	mov	r0, r5
 8009b94:	f7f6 fd40 	bl	8000618 <__aeabi_dmul>
 8009b98:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009b9c:	9415      	str	r4, [sp, #84]	@ 0x54
 8009b9e:	4656      	mov	r6, sl
 8009ba0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009ba4:	f7f6 ffe8 	bl	8000b78 <__aeabi_d2iz>
 8009ba8:	4605      	mov	r5, r0
 8009baa:	f7f6 fccb 	bl	8000544 <__aeabi_i2d>
 8009bae:	4602      	mov	r2, r0
 8009bb0:	460b      	mov	r3, r1
 8009bb2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009bb6:	f7f6 fb77 	bl	80002a8 <__aeabi_dsub>
 8009bba:	3530      	adds	r5, #48	@ 0x30
 8009bbc:	f806 5b01 	strb.w	r5, [r6], #1
 8009bc0:	4602      	mov	r2, r0
 8009bc2:	460b      	mov	r3, r1
 8009bc4:	42a6      	cmp	r6, r4
 8009bc6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009bca:	f04f 0200 	mov.w	r2, #0
 8009bce:	d124      	bne.n	8009c1a <_dtoa_r+0x662>
 8009bd0:	4bac      	ldr	r3, [pc, #688]	@ (8009e84 <_dtoa_r+0x8cc>)
 8009bd2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8009bd6:	f7f6 fb69 	bl	80002ac <__adddf3>
 8009bda:	4602      	mov	r2, r0
 8009bdc:	460b      	mov	r3, r1
 8009bde:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009be2:	f7f6 ffa9 	bl	8000b38 <__aeabi_dcmpgt>
 8009be6:	2800      	cmp	r0, #0
 8009be8:	d145      	bne.n	8009c76 <_dtoa_r+0x6be>
 8009bea:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009bee:	49a5      	ldr	r1, [pc, #660]	@ (8009e84 <_dtoa_r+0x8cc>)
 8009bf0:	2000      	movs	r0, #0
 8009bf2:	f7f6 fb59 	bl	80002a8 <__aeabi_dsub>
 8009bf6:	4602      	mov	r2, r0
 8009bf8:	460b      	mov	r3, r1
 8009bfa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009bfe:	f7f6 ff7d 	bl	8000afc <__aeabi_dcmplt>
 8009c02:	2800      	cmp	r0, #0
 8009c04:	f43f aef5 	beq.w	80099f2 <_dtoa_r+0x43a>
 8009c08:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8009c0a:	1e73      	subs	r3, r6, #1
 8009c0c:	9315      	str	r3, [sp, #84]	@ 0x54
 8009c0e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009c12:	2b30      	cmp	r3, #48	@ 0x30
 8009c14:	d0f8      	beq.n	8009c08 <_dtoa_r+0x650>
 8009c16:	9f04      	ldr	r7, [sp, #16]
 8009c18:	e73e      	b.n	8009a98 <_dtoa_r+0x4e0>
 8009c1a:	4b9b      	ldr	r3, [pc, #620]	@ (8009e88 <_dtoa_r+0x8d0>)
 8009c1c:	f7f6 fcfc 	bl	8000618 <__aeabi_dmul>
 8009c20:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009c24:	e7bc      	b.n	8009ba0 <_dtoa_r+0x5e8>
 8009c26:	d10c      	bne.n	8009c42 <_dtoa_r+0x68a>
 8009c28:	4b98      	ldr	r3, [pc, #608]	@ (8009e8c <_dtoa_r+0x8d4>)
 8009c2a:	2200      	movs	r2, #0
 8009c2c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009c30:	f7f6 fcf2 	bl	8000618 <__aeabi_dmul>
 8009c34:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009c38:	f7f6 ff74 	bl	8000b24 <__aeabi_dcmpge>
 8009c3c:	2800      	cmp	r0, #0
 8009c3e:	f000 8157 	beq.w	8009ef0 <_dtoa_r+0x938>
 8009c42:	2400      	movs	r4, #0
 8009c44:	4625      	mov	r5, r4
 8009c46:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009c48:	43db      	mvns	r3, r3
 8009c4a:	9304      	str	r3, [sp, #16]
 8009c4c:	4656      	mov	r6, sl
 8009c4e:	2700      	movs	r7, #0
 8009c50:	4621      	mov	r1, r4
 8009c52:	4658      	mov	r0, fp
 8009c54:	f000 fe8e 	bl	800a974 <_Bfree>
 8009c58:	2d00      	cmp	r5, #0
 8009c5a:	d0dc      	beq.n	8009c16 <_dtoa_r+0x65e>
 8009c5c:	b12f      	cbz	r7, 8009c6a <_dtoa_r+0x6b2>
 8009c5e:	42af      	cmp	r7, r5
 8009c60:	d003      	beq.n	8009c6a <_dtoa_r+0x6b2>
 8009c62:	4639      	mov	r1, r7
 8009c64:	4658      	mov	r0, fp
 8009c66:	f000 fe85 	bl	800a974 <_Bfree>
 8009c6a:	4629      	mov	r1, r5
 8009c6c:	4658      	mov	r0, fp
 8009c6e:	f000 fe81 	bl	800a974 <_Bfree>
 8009c72:	e7d0      	b.n	8009c16 <_dtoa_r+0x65e>
 8009c74:	9704      	str	r7, [sp, #16]
 8009c76:	4633      	mov	r3, r6
 8009c78:	461e      	mov	r6, r3
 8009c7a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009c7e:	2a39      	cmp	r2, #57	@ 0x39
 8009c80:	d107      	bne.n	8009c92 <_dtoa_r+0x6da>
 8009c82:	459a      	cmp	sl, r3
 8009c84:	d1f8      	bne.n	8009c78 <_dtoa_r+0x6c0>
 8009c86:	9a04      	ldr	r2, [sp, #16]
 8009c88:	3201      	adds	r2, #1
 8009c8a:	9204      	str	r2, [sp, #16]
 8009c8c:	2230      	movs	r2, #48	@ 0x30
 8009c8e:	f88a 2000 	strb.w	r2, [sl]
 8009c92:	781a      	ldrb	r2, [r3, #0]
 8009c94:	3201      	adds	r2, #1
 8009c96:	701a      	strb	r2, [r3, #0]
 8009c98:	e7bd      	b.n	8009c16 <_dtoa_r+0x65e>
 8009c9a:	4b7b      	ldr	r3, [pc, #492]	@ (8009e88 <_dtoa_r+0x8d0>)
 8009c9c:	2200      	movs	r2, #0
 8009c9e:	f7f6 fcbb 	bl	8000618 <__aeabi_dmul>
 8009ca2:	2200      	movs	r2, #0
 8009ca4:	2300      	movs	r3, #0
 8009ca6:	4604      	mov	r4, r0
 8009ca8:	460d      	mov	r5, r1
 8009caa:	f7f6 ff1d 	bl	8000ae8 <__aeabi_dcmpeq>
 8009cae:	2800      	cmp	r0, #0
 8009cb0:	f43f aebb 	beq.w	8009a2a <_dtoa_r+0x472>
 8009cb4:	e6f0      	b.n	8009a98 <_dtoa_r+0x4e0>
 8009cb6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8009cb8:	2a00      	cmp	r2, #0
 8009cba:	f000 80db 	beq.w	8009e74 <_dtoa_r+0x8bc>
 8009cbe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009cc0:	2a01      	cmp	r2, #1
 8009cc2:	f300 80bf 	bgt.w	8009e44 <_dtoa_r+0x88c>
 8009cc6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8009cc8:	2a00      	cmp	r2, #0
 8009cca:	f000 80b7 	beq.w	8009e3c <_dtoa_r+0x884>
 8009cce:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8009cd2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8009cd4:	4646      	mov	r6, r8
 8009cd6:	9a08      	ldr	r2, [sp, #32]
 8009cd8:	2101      	movs	r1, #1
 8009cda:	441a      	add	r2, r3
 8009cdc:	4658      	mov	r0, fp
 8009cde:	4498      	add	r8, r3
 8009ce0:	9208      	str	r2, [sp, #32]
 8009ce2:	f000 ff45 	bl	800ab70 <__i2b>
 8009ce6:	4605      	mov	r5, r0
 8009ce8:	b15e      	cbz	r6, 8009d02 <_dtoa_r+0x74a>
 8009cea:	9b08      	ldr	r3, [sp, #32]
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	dd08      	ble.n	8009d02 <_dtoa_r+0x74a>
 8009cf0:	42b3      	cmp	r3, r6
 8009cf2:	9a08      	ldr	r2, [sp, #32]
 8009cf4:	bfa8      	it	ge
 8009cf6:	4633      	movge	r3, r6
 8009cf8:	eba8 0803 	sub.w	r8, r8, r3
 8009cfc:	1af6      	subs	r6, r6, r3
 8009cfe:	1ad3      	subs	r3, r2, r3
 8009d00:	9308      	str	r3, [sp, #32]
 8009d02:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009d04:	b1f3      	cbz	r3, 8009d44 <_dtoa_r+0x78c>
 8009d06:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	f000 80b7 	beq.w	8009e7c <_dtoa_r+0x8c4>
 8009d0e:	b18c      	cbz	r4, 8009d34 <_dtoa_r+0x77c>
 8009d10:	4629      	mov	r1, r5
 8009d12:	4622      	mov	r2, r4
 8009d14:	4658      	mov	r0, fp
 8009d16:	f000 ffeb 	bl	800acf0 <__pow5mult>
 8009d1a:	464a      	mov	r2, r9
 8009d1c:	4601      	mov	r1, r0
 8009d1e:	4605      	mov	r5, r0
 8009d20:	4658      	mov	r0, fp
 8009d22:	f000 ff3b 	bl	800ab9c <__multiply>
 8009d26:	4649      	mov	r1, r9
 8009d28:	9004      	str	r0, [sp, #16]
 8009d2a:	4658      	mov	r0, fp
 8009d2c:	f000 fe22 	bl	800a974 <_Bfree>
 8009d30:	9b04      	ldr	r3, [sp, #16]
 8009d32:	4699      	mov	r9, r3
 8009d34:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009d36:	1b1a      	subs	r2, r3, r4
 8009d38:	d004      	beq.n	8009d44 <_dtoa_r+0x78c>
 8009d3a:	4649      	mov	r1, r9
 8009d3c:	4658      	mov	r0, fp
 8009d3e:	f000 ffd7 	bl	800acf0 <__pow5mult>
 8009d42:	4681      	mov	r9, r0
 8009d44:	2101      	movs	r1, #1
 8009d46:	4658      	mov	r0, fp
 8009d48:	f000 ff12 	bl	800ab70 <__i2b>
 8009d4c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009d4e:	4604      	mov	r4, r0
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	f000 81cf 	beq.w	800a0f4 <_dtoa_r+0xb3c>
 8009d56:	461a      	mov	r2, r3
 8009d58:	4601      	mov	r1, r0
 8009d5a:	4658      	mov	r0, fp
 8009d5c:	f000 ffc8 	bl	800acf0 <__pow5mult>
 8009d60:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009d62:	2b01      	cmp	r3, #1
 8009d64:	4604      	mov	r4, r0
 8009d66:	f300 8095 	bgt.w	8009e94 <_dtoa_r+0x8dc>
 8009d6a:	9b02      	ldr	r3, [sp, #8]
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	f040 8087 	bne.w	8009e80 <_dtoa_r+0x8c8>
 8009d72:	9b03      	ldr	r3, [sp, #12]
 8009d74:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	f040 8089 	bne.w	8009e90 <_dtoa_r+0x8d8>
 8009d7e:	9b03      	ldr	r3, [sp, #12]
 8009d80:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009d84:	0d1b      	lsrs	r3, r3, #20
 8009d86:	051b      	lsls	r3, r3, #20
 8009d88:	b12b      	cbz	r3, 8009d96 <_dtoa_r+0x7de>
 8009d8a:	9b08      	ldr	r3, [sp, #32]
 8009d8c:	3301      	adds	r3, #1
 8009d8e:	9308      	str	r3, [sp, #32]
 8009d90:	f108 0801 	add.w	r8, r8, #1
 8009d94:	2301      	movs	r3, #1
 8009d96:	930a      	str	r3, [sp, #40]	@ 0x28
 8009d98:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	f000 81b0 	beq.w	800a100 <_dtoa_r+0xb48>
 8009da0:	6923      	ldr	r3, [r4, #16]
 8009da2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009da6:	6918      	ldr	r0, [r3, #16]
 8009da8:	f000 fe96 	bl	800aad8 <__hi0bits>
 8009dac:	f1c0 0020 	rsb	r0, r0, #32
 8009db0:	9b08      	ldr	r3, [sp, #32]
 8009db2:	4418      	add	r0, r3
 8009db4:	f010 001f 	ands.w	r0, r0, #31
 8009db8:	d077      	beq.n	8009eaa <_dtoa_r+0x8f2>
 8009dba:	f1c0 0320 	rsb	r3, r0, #32
 8009dbe:	2b04      	cmp	r3, #4
 8009dc0:	dd6b      	ble.n	8009e9a <_dtoa_r+0x8e2>
 8009dc2:	9b08      	ldr	r3, [sp, #32]
 8009dc4:	f1c0 001c 	rsb	r0, r0, #28
 8009dc8:	4403      	add	r3, r0
 8009dca:	4480      	add	r8, r0
 8009dcc:	4406      	add	r6, r0
 8009dce:	9308      	str	r3, [sp, #32]
 8009dd0:	f1b8 0f00 	cmp.w	r8, #0
 8009dd4:	dd05      	ble.n	8009de2 <_dtoa_r+0x82a>
 8009dd6:	4649      	mov	r1, r9
 8009dd8:	4642      	mov	r2, r8
 8009dda:	4658      	mov	r0, fp
 8009ddc:	f000 ffe2 	bl	800ada4 <__lshift>
 8009de0:	4681      	mov	r9, r0
 8009de2:	9b08      	ldr	r3, [sp, #32]
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	dd05      	ble.n	8009df4 <_dtoa_r+0x83c>
 8009de8:	4621      	mov	r1, r4
 8009dea:	461a      	mov	r2, r3
 8009dec:	4658      	mov	r0, fp
 8009dee:	f000 ffd9 	bl	800ada4 <__lshift>
 8009df2:	4604      	mov	r4, r0
 8009df4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d059      	beq.n	8009eae <_dtoa_r+0x8f6>
 8009dfa:	4621      	mov	r1, r4
 8009dfc:	4648      	mov	r0, r9
 8009dfe:	f001 f83d 	bl	800ae7c <__mcmp>
 8009e02:	2800      	cmp	r0, #0
 8009e04:	da53      	bge.n	8009eae <_dtoa_r+0x8f6>
 8009e06:	1e7b      	subs	r3, r7, #1
 8009e08:	9304      	str	r3, [sp, #16]
 8009e0a:	4649      	mov	r1, r9
 8009e0c:	2300      	movs	r3, #0
 8009e0e:	220a      	movs	r2, #10
 8009e10:	4658      	mov	r0, fp
 8009e12:	f000 fdd1 	bl	800a9b8 <__multadd>
 8009e16:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009e18:	4681      	mov	r9, r0
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	f000 8172 	beq.w	800a104 <_dtoa_r+0xb4c>
 8009e20:	2300      	movs	r3, #0
 8009e22:	4629      	mov	r1, r5
 8009e24:	220a      	movs	r2, #10
 8009e26:	4658      	mov	r0, fp
 8009e28:	f000 fdc6 	bl	800a9b8 <__multadd>
 8009e2c:	9b00      	ldr	r3, [sp, #0]
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	4605      	mov	r5, r0
 8009e32:	dc67      	bgt.n	8009f04 <_dtoa_r+0x94c>
 8009e34:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009e36:	2b02      	cmp	r3, #2
 8009e38:	dc41      	bgt.n	8009ebe <_dtoa_r+0x906>
 8009e3a:	e063      	b.n	8009f04 <_dtoa_r+0x94c>
 8009e3c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8009e3e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8009e42:	e746      	b.n	8009cd2 <_dtoa_r+0x71a>
 8009e44:	9b07      	ldr	r3, [sp, #28]
 8009e46:	1e5c      	subs	r4, r3, #1
 8009e48:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009e4a:	42a3      	cmp	r3, r4
 8009e4c:	bfbf      	itttt	lt
 8009e4e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8009e50:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8009e52:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8009e54:	1ae3      	sublt	r3, r4, r3
 8009e56:	bfb4      	ite	lt
 8009e58:	18d2      	addlt	r2, r2, r3
 8009e5a:	1b1c      	subge	r4, r3, r4
 8009e5c:	9b07      	ldr	r3, [sp, #28]
 8009e5e:	bfbc      	itt	lt
 8009e60:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8009e62:	2400      	movlt	r4, #0
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	bfb5      	itete	lt
 8009e68:	eba8 0603 	sublt.w	r6, r8, r3
 8009e6c:	9b07      	ldrge	r3, [sp, #28]
 8009e6e:	2300      	movlt	r3, #0
 8009e70:	4646      	movge	r6, r8
 8009e72:	e730      	b.n	8009cd6 <_dtoa_r+0x71e>
 8009e74:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8009e76:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8009e78:	4646      	mov	r6, r8
 8009e7a:	e735      	b.n	8009ce8 <_dtoa_r+0x730>
 8009e7c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009e7e:	e75c      	b.n	8009d3a <_dtoa_r+0x782>
 8009e80:	2300      	movs	r3, #0
 8009e82:	e788      	b.n	8009d96 <_dtoa_r+0x7de>
 8009e84:	3fe00000 	.word	0x3fe00000
 8009e88:	40240000 	.word	0x40240000
 8009e8c:	40140000 	.word	0x40140000
 8009e90:	9b02      	ldr	r3, [sp, #8]
 8009e92:	e780      	b.n	8009d96 <_dtoa_r+0x7de>
 8009e94:	2300      	movs	r3, #0
 8009e96:	930a      	str	r3, [sp, #40]	@ 0x28
 8009e98:	e782      	b.n	8009da0 <_dtoa_r+0x7e8>
 8009e9a:	d099      	beq.n	8009dd0 <_dtoa_r+0x818>
 8009e9c:	9a08      	ldr	r2, [sp, #32]
 8009e9e:	331c      	adds	r3, #28
 8009ea0:	441a      	add	r2, r3
 8009ea2:	4498      	add	r8, r3
 8009ea4:	441e      	add	r6, r3
 8009ea6:	9208      	str	r2, [sp, #32]
 8009ea8:	e792      	b.n	8009dd0 <_dtoa_r+0x818>
 8009eaa:	4603      	mov	r3, r0
 8009eac:	e7f6      	b.n	8009e9c <_dtoa_r+0x8e4>
 8009eae:	9b07      	ldr	r3, [sp, #28]
 8009eb0:	9704      	str	r7, [sp, #16]
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	dc20      	bgt.n	8009ef8 <_dtoa_r+0x940>
 8009eb6:	9300      	str	r3, [sp, #0]
 8009eb8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009eba:	2b02      	cmp	r3, #2
 8009ebc:	dd1e      	ble.n	8009efc <_dtoa_r+0x944>
 8009ebe:	9b00      	ldr	r3, [sp, #0]
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	f47f aec0 	bne.w	8009c46 <_dtoa_r+0x68e>
 8009ec6:	4621      	mov	r1, r4
 8009ec8:	2205      	movs	r2, #5
 8009eca:	4658      	mov	r0, fp
 8009ecc:	f000 fd74 	bl	800a9b8 <__multadd>
 8009ed0:	4601      	mov	r1, r0
 8009ed2:	4604      	mov	r4, r0
 8009ed4:	4648      	mov	r0, r9
 8009ed6:	f000 ffd1 	bl	800ae7c <__mcmp>
 8009eda:	2800      	cmp	r0, #0
 8009edc:	f77f aeb3 	ble.w	8009c46 <_dtoa_r+0x68e>
 8009ee0:	4656      	mov	r6, sl
 8009ee2:	2331      	movs	r3, #49	@ 0x31
 8009ee4:	f806 3b01 	strb.w	r3, [r6], #1
 8009ee8:	9b04      	ldr	r3, [sp, #16]
 8009eea:	3301      	adds	r3, #1
 8009eec:	9304      	str	r3, [sp, #16]
 8009eee:	e6ae      	b.n	8009c4e <_dtoa_r+0x696>
 8009ef0:	9c07      	ldr	r4, [sp, #28]
 8009ef2:	9704      	str	r7, [sp, #16]
 8009ef4:	4625      	mov	r5, r4
 8009ef6:	e7f3      	b.n	8009ee0 <_dtoa_r+0x928>
 8009ef8:	9b07      	ldr	r3, [sp, #28]
 8009efa:	9300      	str	r3, [sp, #0]
 8009efc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	f000 8104 	beq.w	800a10c <_dtoa_r+0xb54>
 8009f04:	2e00      	cmp	r6, #0
 8009f06:	dd05      	ble.n	8009f14 <_dtoa_r+0x95c>
 8009f08:	4629      	mov	r1, r5
 8009f0a:	4632      	mov	r2, r6
 8009f0c:	4658      	mov	r0, fp
 8009f0e:	f000 ff49 	bl	800ada4 <__lshift>
 8009f12:	4605      	mov	r5, r0
 8009f14:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d05a      	beq.n	8009fd0 <_dtoa_r+0xa18>
 8009f1a:	6869      	ldr	r1, [r5, #4]
 8009f1c:	4658      	mov	r0, fp
 8009f1e:	f000 fce9 	bl	800a8f4 <_Balloc>
 8009f22:	4606      	mov	r6, r0
 8009f24:	b928      	cbnz	r0, 8009f32 <_dtoa_r+0x97a>
 8009f26:	4b84      	ldr	r3, [pc, #528]	@ (800a138 <_dtoa_r+0xb80>)
 8009f28:	4602      	mov	r2, r0
 8009f2a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8009f2e:	f7ff bb5a 	b.w	80095e6 <_dtoa_r+0x2e>
 8009f32:	692a      	ldr	r2, [r5, #16]
 8009f34:	3202      	adds	r2, #2
 8009f36:	0092      	lsls	r2, r2, #2
 8009f38:	f105 010c 	add.w	r1, r5, #12
 8009f3c:	300c      	adds	r0, #12
 8009f3e:	f7ff fa94 	bl	800946a <memcpy>
 8009f42:	2201      	movs	r2, #1
 8009f44:	4631      	mov	r1, r6
 8009f46:	4658      	mov	r0, fp
 8009f48:	f000 ff2c 	bl	800ada4 <__lshift>
 8009f4c:	f10a 0301 	add.w	r3, sl, #1
 8009f50:	9307      	str	r3, [sp, #28]
 8009f52:	9b00      	ldr	r3, [sp, #0]
 8009f54:	4453      	add	r3, sl
 8009f56:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009f58:	9b02      	ldr	r3, [sp, #8]
 8009f5a:	f003 0301 	and.w	r3, r3, #1
 8009f5e:	462f      	mov	r7, r5
 8009f60:	930a      	str	r3, [sp, #40]	@ 0x28
 8009f62:	4605      	mov	r5, r0
 8009f64:	9b07      	ldr	r3, [sp, #28]
 8009f66:	4621      	mov	r1, r4
 8009f68:	3b01      	subs	r3, #1
 8009f6a:	4648      	mov	r0, r9
 8009f6c:	9300      	str	r3, [sp, #0]
 8009f6e:	f7ff fa9b 	bl	80094a8 <quorem>
 8009f72:	4639      	mov	r1, r7
 8009f74:	9002      	str	r0, [sp, #8]
 8009f76:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8009f7a:	4648      	mov	r0, r9
 8009f7c:	f000 ff7e 	bl	800ae7c <__mcmp>
 8009f80:	462a      	mov	r2, r5
 8009f82:	9008      	str	r0, [sp, #32]
 8009f84:	4621      	mov	r1, r4
 8009f86:	4658      	mov	r0, fp
 8009f88:	f000 ff94 	bl	800aeb4 <__mdiff>
 8009f8c:	68c2      	ldr	r2, [r0, #12]
 8009f8e:	4606      	mov	r6, r0
 8009f90:	bb02      	cbnz	r2, 8009fd4 <_dtoa_r+0xa1c>
 8009f92:	4601      	mov	r1, r0
 8009f94:	4648      	mov	r0, r9
 8009f96:	f000 ff71 	bl	800ae7c <__mcmp>
 8009f9a:	4602      	mov	r2, r0
 8009f9c:	4631      	mov	r1, r6
 8009f9e:	4658      	mov	r0, fp
 8009fa0:	920e      	str	r2, [sp, #56]	@ 0x38
 8009fa2:	f000 fce7 	bl	800a974 <_Bfree>
 8009fa6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009fa8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009faa:	9e07      	ldr	r6, [sp, #28]
 8009fac:	ea43 0102 	orr.w	r1, r3, r2
 8009fb0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009fb2:	4319      	orrs	r1, r3
 8009fb4:	d110      	bne.n	8009fd8 <_dtoa_r+0xa20>
 8009fb6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009fba:	d029      	beq.n	800a010 <_dtoa_r+0xa58>
 8009fbc:	9b08      	ldr	r3, [sp, #32]
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	dd02      	ble.n	8009fc8 <_dtoa_r+0xa10>
 8009fc2:	9b02      	ldr	r3, [sp, #8]
 8009fc4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8009fc8:	9b00      	ldr	r3, [sp, #0]
 8009fca:	f883 8000 	strb.w	r8, [r3]
 8009fce:	e63f      	b.n	8009c50 <_dtoa_r+0x698>
 8009fd0:	4628      	mov	r0, r5
 8009fd2:	e7bb      	b.n	8009f4c <_dtoa_r+0x994>
 8009fd4:	2201      	movs	r2, #1
 8009fd6:	e7e1      	b.n	8009f9c <_dtoa_r+0x9e4>
 8009fd8:	9b08      	ldr	r3, [sp, #32]
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	db04      	blt.n	8009fe8 <_dtoa_r+0xa30>
 8009fde:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009fe0:	430b      	orrs	r3, r1
 8009fe2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009fe4:	430b      	orrs	r3, r1
 8009fe6:	d120      	bne.n	800a02a <_dtoa_r+0xa72>
 8009fe8:	2a00      	cmp	r2, #0
 8009fea:	dded      	ble.n	8009fc8 <_dtoa_r+0xa10>
 8009fec:	4649      	mov	r1, r9
 8009fee:	2201      	movs	r2, #1
 8009ff0:	4658      	mov	r0, fp
 8009ff2:	f000 fed7 	bl	800ada4 <__lshift>
 8009ff6:	4621      	mov	r1, r4
 8009ff8:	4681      	mov	r9, r0
 8009ffa:	f000 ff3f 	bl	800ae7c <__mcmp>
 8009ffe:	2800      	cmp	r0, #0
 800a000:	dc03      	bgt.n	800a00a <_dtoa_r+0xa52>
 800a002:	d1e1      	bne.n	8009fc8 <_dtoa_r+0xa10>
 800a004:	f018 0f01 	tst.w	r8, #1
 800a008:	d0de      	beq.n	8009fc8 <_dtoa_r+0xa10>
 800a00a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a00e:	d1d8      	bne.n	8009fc2 <_dtoa_r+0xa0a>
 800a010:	9a00      	ldr	r2, [sp, #0]
 800a012:	2339      	movs	r3, #57	@ 0x39
 800a014:	7013      	strb	r3, [r2, #0]
 800a016:	4633      	mov	r3, r6
 800a018:	461e      	mov	r6, r3
 800a01a:	3b01      	subs	r3, #1
 800a01c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800a020:	2a39      	cmp	r2, #57	@ 0x39
 800a022:	d052      	beq.n	800a0ca <_dtoa_r+0xb12>
 800a024:	3201      	adds	r2, #1
 800a026:	701a      	strb	r2, [r3, #0]
 800a028:	e612      	b.n	8009c50 <_dtoa_r+0x698>
 800a02a:	2a00      	cmp	r2, #0
 800a02c:	dd07      	ble.n	800a03e <_dtoa_r+0xa86>
 800a02e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a032:	d0ed      	beq.n	800a010 <_dtoa_r+0xa58>
 800a034:	9a00      	ldr	r2, [sp, #0]
 800a036:	f108 0301 	add.w	r3, r8, #1
 800a03a:	7013      	strb	r3, [r2, #0]
 800a03c:	e608      	b.n	8009c50 <_dtoa_r+0x698>
 800a03e:	9b07      	ldr	r3, [sp, #28]
 800a040:	9a07      	ldr	r2, [sp, #28]
 800a042:	f803 8c01 	strb.w	r8, [r3, #-1]
 800a046:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a048:	4293      	cmp	r3, r2
 800a04a:	d028      	beq.n	800a09e <_dtoa_r+0xae6>
 800a04c:	4649      	mov	r1, r9
 800a04e:	2300      	movs	r3, #0
 800a050:	220a      	movs	r2, #10
 800a052:	4658      	mov	r0, fp
 800a054:	f000 fcb0 	bl	800a9b8 <__multadd>
 800a058:	42af      	cmp	r7, r5
 800a05a:	4681      	mov	r9, r0
 800a05c:	f04f 0300 	mov.w	r3, #0
 800a060:	f04f 020a 	mov.w	r2, #10
 800a064:	4639      	mov	r1, r7
 800a066:	4658      	mov	r0, fp
 800a068:	d107      	bne.n	800a07a <_dtoa_r+0xac2>
 800a06a:	f000 fca5 	bl	800a9b8 <__multadd>
 800a06e:	4607      	mov	r7, r0
 800a070:	4605      	mov	r5, r0
 800a072:	9b07      	ldr	r3, [sp, #28]
 800a074:	3301      	adds	r3, #1
 800a076:	9307      	str	r3, [sp, #28]
 800a078:	e774      	b.n	8009f64 <_dtoa_r+0x9ac>
 800a07a:	f000 fc9d 	bl	800a9b8 <__multadd>
 800a07e:	4629      	mov	r1, r5
 800a080:	4607      	mov	r7, r0
 800a082:	2300      	movs	r3, #0
 800a084:	220a      	movs	r2, #10
 800a086:	4658      	mov	r0, fp
 800a088:	f000 fc96 	bl	800a9b8 <__multadd>
 800a08c:	4605      	mov	r5, r0
 800a08e:	e7f0      	b.n	800a072 <_dtoa_r+0xaba>
 800a090:	9b00      	ldr	r3, [sp, #0]
 800a092:	2b00      	cmp	r3, #0
 800a094:	bfcc      	ite	gt
 800a096:	461e      	movgt	r6, r3
 800a098:	2601      	movle	r6, #1
 800a09a:	4456      	add	r6, sl
 800a09c:	2700      	movs	r7, #0
 800a09e:	4649      	mov	r1, r9
 800a0a0:	2201      	movs	r2, #1
 800a0a2:	4658      	mov	r0, fp
 800a0a4:	f000 fe7e 	bl	800ada4 <__lshift>
 800a0a8:	4621      	mov	r1, r4
 800a0aa:	4681      	mov	r9, r0
 800a0ac:	f000 fee6 	bl	800ae7c <__mcmp>
 800a0b0:	2800      	cmp	r0, #0
 800a0b2:	dcb0      	bgt.n	800a016 <_dtoa_r+0xa5e>
 800a0b4:	d102      	bne.n	800a0bc <_dtoa_r+0xb04>
 800a0b6:	f018 0f01 	tst.w	r8, #1
 800a0ba:	d1ac      	bne.n	800a016 <_dtoa_r+0xa5e>
 800a0bc:	4633      	mov	r3, r6
 800a0be:	461e      	mov	r6, r3
 800a0c0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a0c4:	2a30      	cmp	r2, #48	@ 0x30
 800a0c6:	d0fa      	beq.n	800a0be <_dtoa_r+0xb06>
 800a0c8:	e5c2      	b.n	8009c50 <_dtoa_r+0x698>
 800a0ca:	459a      	cmp	sl, r3
 800a0cc:	d1a4      	bne.n	800a018 <_dtoa_r+0xa60>
 800a0ce:	9b04      	ldr	r3, [sp, #16]
 800a0d0:	3301      	adds	r3, #1
 800a0d2:	9304      	str	r3, [sp, #16]
 800a0d4:	2331      	movs	r3, #49	@ 0x31
 800a0d6:	f88a 3000 	strb.w	r3, [sl]
 800a0da:	e5b9      	b.n	8009c50 <_dtoa_r+0x698>
 800a0dc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a0de:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800a13c <_dtoa_r+0xb84>
 800a0e2:	b11b      	cbz	r3, 800a0ec <_dtoa_r+0xb34>
 800a0e4:	f10a 0308 	add.w	r3, sl, #8
 800a0e8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800a0ea:	6013      	str	r3, [r2, #0]
 800a0ec:	4650      	mov	r0, sl
 800a0ee:	b019      	add	sp, #100	@ 0x64
 800a0f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a0f6:	2b01      	cmp	r3, #1
 800a0f8:	f77f ae37 	ble.w	8009d6a <_dtoa_r+0x7b2>
 800a0fc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a0fe:	930a      	str	r3, [sp, #40]	@ 0x28
 800a100:	2001      	movs	r0, #1
 800a102:	e655      	b.n	8009db0 <_dtoa_r+0x7f8>
 800a104:	9b00      	ldr	r3, [sp, #0]
 800a106:	2b00      	cmp	r3, #0
 800a108:	f77f aed6 	ble.w	8009eb8 <_dtoa_r+0x900>
 800a10c:	4656      	mov	r6, sl
 800a10e:	4621      	mov	r1, r4
 800a110:	4648      	mov	r0, r9
 800a112:	f7ff f9c9 	bl	80094a8 <quorem>
 800a116:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800a11a:	f806 8b01 	strb.w	r8, [r6], #1
 800a11e:	9b00      	ldr	r3, [sp, #0]
 800a120:	eba6 020a 	sub.w	r2, r6, sl
 800a124:	4293      	cmp	r3, r2
 800a126:	ddb3      	ble.n	800a090 <_dtoa_r+0xad8>
 800a128:	4649      	mov	r1, r9
 800a12a:	2300      	movs	r3, #0
 800a12c:	220a      	movs	r2, #10
 800a12e:	4658      	mov	r0, fp
 800a130:	f000 fc42 	bl	800a9b8 <__multadd>
 800a134:	4681      	mov	r9, r0
 800a136:	e7ea      	b.n	800a10e <_dtoa_r+0xb56>
 800a138:	0800d5be 	.word	0x0800d5be
 800a13c:	0800d542 	.word	0x0800d542

0800a140 <_free_r>:
 800a140:	b538      	push	{r3, r4, r5, lr}
 800a142:	4605      	mov	r5, r0
 800a144:	2900      	cmp	r1, #0
 800a146:	d041      	beq.n	800a1cc <_free_r+0x8c>
 800a148:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a14c:	1f0c      	subs	r4, r1, #4
 800a14e:	2b00      	cmp	r3, #0
 800a150:	bfb8      	it	lt
 800a152:	18e4      	addlt	r4, r4, r3
 800a154:	f7fc ff6c 	bl	8007030 <__malloc_lock>
 800a158:	4a1d      	ldr	r2, [pc, #116]	@ (800a1d0 <_free_r+0x90>)
 800a15a:	6813      	ldr	r3, [r2, #0]
 800a15c:	b933      	cbnz	r3, 800a16c <_free_r+0x2c>
 800a15e:	6063      	str	r3, [r4, #4]
 800a160:	6014      	str	r4, [r2, #0]
 800a162:	4628      	mov	r0, r5
 800a164:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a168:	f7fc bf68 	b.w	800703c <__malloc_unlock>
 800a16c:	42a3      	cmp	r3, r4
 800a16e:	d908      	bls.n	800a182 <_free_r+0x42>
 800a170:	6820      	ldr	r0, [r4, #0]
 800a172:	1821      	adds	r1, r4, r0
 800a174:	428b      	cmp	r3, r1
 800a176:	bf01      	itttt	eq
 800a178:	6819      	ldreq	r1, [r3, #0]
 800a17a:	685b      	ldreq	r3, [r3, #4]
 800a17c:	1809      	addeq	r1, r1, r0
 800a17e:	6021      	streq	r1, [r4, #0]
 800a180:	e7ed      	b.n	800a15e <_free_r+0x1e>
 800a182:	461a      	mov	r2, r3
 800a184:	685b      	ldr	r3, [r3, #4]
 800a186:	b10b      	cbz	r3, 800a18c <_free_r+0x4c>
 800a188:	42a3      	cmp	r3, r4
 800a18a:	d9fa      	bls.n	800a182 <_free_r+0x42>
 800a18c:	6811      	ldr	r1, [r2, #0]
 800a18e:	1850      	adds	r0, r2, r1
 800a190:	42a0      	cmp	r0, r4
 800a192:	d10b      	bne.n	800a1ac <_free_r+0x6c>
 800a194:	6820      	ldr	r0, [r4, #0]
 800a196:	4401      	add	r1, r0
 800a198:	1850      	adds	r0, r2, r1
 800a19a:	4283      	cmp	r3, r0
 800a19c:	6011      	str	r1, [r2, #0]
 800a19e:	d1e0      	bne.n	800a162 <_free_r+0x22>
 800a1a0:	6818      	ldr	r0, [r3, #0]
 800a1a2:	685b      	ldr	r3, [r3, #4]
 800a1a4:	6053      	str	r3, [r2, #4]
 800a1a6:	4408      	add	r0, r1
 800a1a8:	6010      	str	r0, [r2, #0]
 800a1aa:	e7da      	b.n	800a162 <_free_r+0x22>
 800a1ac:	d902      	bls.n	800a1b4 <_free_r+0x74>
 800a1ae:	230c      	movs	r3, #12
 800a1b0:	602b      	str	r3, [r5, #0]
 800a1b2:	e7d6      	b.n	800a162 <_free_r+0x22>
 800a1b4:	6820      	ldr	r0, [r4, #0]
 800a1b6:	1821      	adds	r1, r4, r0
 800a1b8:	428b      	cmp	r3, r1
 800a1ba:	bf04      	itt	eq
 800a1bc:	6819      	ldreq	r1, [r3, #0]
 800a1be:	685b      	ldreq	r3, [r3, #4]
 800a1c0:	6063      	str	r3, [r4, #4]
 800a1c2:	bf04      	itt	eq
 800a1c4:	1809      	addeq	r1, r1, r0
 800a1c6:	6021      	streq	r1, [r4, #0]
 800a1c8:	6054      	str	r4, [r2, #4]
 800a1ca:	e7ca      	b.n	800a162 <_free_r+0x22>
 800a1cc:	bd38      	pop	{r3, r4, r5, pc}
 800a1ce:	bf00      	nop
 800a1d0:	20004ac0 	.word	0x20004ac0

0800a1d4 <rshift>:
 800a1d4:	6903      	ldr	r3, [r0, #16]
 800a1d6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800a1da:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a1de:	ea4f 1261 	mov.w	r2, r1, asr #5
 800a1e2:	f100 0414 	add.w	r4, r0, #20
 800a1e6:	dd45      	ble.n	800a274 <rshift+0xa0>
 800a1e8:	f011 011f 	ands.w	r1, r1, #31
 800a1ec:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800a1f0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800a1f4:	d10c      	bne.n	800a210 <rshift+0x3c>
 800a1f6:	f100 0710 	add.w	r7, r0, #16
 800a1fa:	4629      	mov	r1, r5
 800a1fc:	42b1      	cmp	r1, r6
 800a1fe:	d334      	bcc.n	800a26a <rshift+0x96>
 800a200:	1a9b      	subs	r3, r3, r2
 800a202:	009b      	lsls	r3, r3, #2
 800a204:	1eea      	subs	r2, r5, #3
 800a206:	4296      	cmp	r6, r2
 800a208:	bf38      	it	cc
 800a20a:	2300      	movcc	r3, #0
 800a20c:	4423      	add	r3, r4
 800a20e:	e015      	b.n	800a23c <rshift+0x68>
 800a210:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800a214:	f1c1 0820 	rsb	r8, r1, #32
 800a218:	40cf      	lsrs	r7, r1
 800a21a:	f105 0e04 	add.w	lr, r5, #4
 800a21e:	46a1      	mov	r9, r4
 800a220:	4576      	cmp	r6, lr
 800a222:	46f4      	mov	ip, lr
 800a224:	d815      	bhi.n	800a252 <rshift+0x7e>
 800a226:	1a9a      	subs	r2, r3, r2
 800a228:	0092      	lsls	r2, r2, #2
 800a22a:	3a04      	subs	r2, #4
 800a22c:	3501      	adds	r5, #1
 800a22e:	42ae      	cmp	r6, r5
 800a230:	bf38      	it	cc
 800a232:	2200      	movcc	r2, #0
 800a234:	18a3      	adds	r3, r4, r2
 800a236:	50a7      	str	r7, [r4, r2]
 800a238:	b107      	cbz	r7, 800a23c <rshift+0x68>
 800a23a:	3304      	adds	r3, #4
 800a23c:	1b1a      	subs	r2, r3, r4
 800a23e:	42a3      	cmp	r3, r4
 800a240:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a244:	bf08      	it	eq
 800a246:	2300      	moveq	r3, #0
 800a248:	6102      	str	r2, [r0, #16]
 800a24a:	bf08      	it	eq
 800a24c:	6143      	streq	r3, [r0, #20]
 800a24e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a252:	f8dc c000 	ldr.w	ip, [ip]
 800a256:	fa0c fc08 	lsl.w	ip, ip, r8
 800a25a:	ea4c 0707 	orr.w	r7, ip, r7
 800a25e:	f849 7b04 	str.w	r7, [r9], #4
 800a262:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a266:	40cf      	lsrs	r7, r1
 800a268:	e7da      	b.n	800a220 <rshift+0x4c>
 800a26a:	f851 cb04 	ldr.w	ip, [r1], #4
 800a26e:	f847 cf04 	str.w	ip, [r7, #4]!
 800a272:	e7c3      	b.n	800a1fc <rshift+0x28>
 800a274:	4623      	mov	r3, r4
 800a276:	e7e1      	b.n	800a23c <rshift+0x68>

0800a278 <__hexdig_fun>:
 800a278:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800a27c:	2b09      	cmp	r3, #9
 800a27e:	d802      	bhi.n	800a286 <__hexdig_fun+0xe>
 800a280:	3820      	subs	r0, #32
 800a282:	b2c0      	uxtb	r0, r0
 800a284:	4770      	bx	lr
 800a286:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800a28a:	2b05      	cmp	r3, #5
 800a28c:	d801      	bhi.n	800a292 <__hexdig_fun+0x1a>
 800a28e:	3847      	subs	r0, #71	@ 0x47
 800a290:	e7f7      	b.n	800a282 <__hexdig_fun+0xa>
 800a292:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800a296:	2b05      	cmp	r3, #5
 800a298:	d801      	bhi.n	800a29e <__hexdig_fun+0x26>
 800a29a:	3827      	subs	r0, #39	@ 0x27
 800a29c:	e7f1      	b.n	800a282 <__hexdig_fun+0xa>
 800a29e:	2000      	movs	r0, #0
 800a2a0:	4770      	bx	lr
	...

0800a2a4 <__gethex>:
 800a2a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2a8:	b085      	sub	sp, #20
 800a2aa:	468a      	mov	sl, r1
 800a2ac:	9302      	str	r3, [sp, #8]
 800a2ae:	680b      	ldr	r3, [r1, #0]
 800a2b0:	9001      	str	r0, [sp, #4]
 800a2b2:	4690      	mov	r8, r2
 800a2b4:	1c9c      	adds	r4, r3, #2
 800a2b6:	46a1      	mov	r9, r4
 800a2b8:	f814 0b01 	ldrb.w	r0, [r4], #1
 800a2bc:	2830      	cmp	r0, #48	@ 0x30
 800a2be:	d0fa      	beq.n	800a2b6 <__gethex+0x12>
 800a2c0:	eba9 0303 	sub.w	r3, r9, r3
 800a2c4:	f1a3 0b02 	sub.w	fp, r3, #2
 800a2c8:	f7ff ffd6 	bl	800a278 <__hexdig_fun>
 800a2cc:	4605      	mov	r5, r0
 800a2ce:	2800      	cmp	r0, #0
 800a2d0:	d168      	bne.n	800a3a4 <__gethex+0x100>
 800a2d2:	49a0      	ldr	r1, [pc, #640]	@ (800a554 <__gethex+0x2b0>)
 800a2d4:	2201      	movs	r2, #1
 800a2d6:	4648      	mov	r0, r9
 800a2d8:	f7fe faab 	bl	8008832 <strncmp>
 800a2dc:	4607      	mov	r7, r0
 800a2de:	2800      	cmp	r0, #0
 800a2e0:	d167      	bne.n	800a3b2 <__gethex+0x10e>
 800a2e2:	f899 0001 	ldrb.w	r0, [r9, #1]
 800a2e6:	4626      	mov	r6, r4
 800a2e8:	f7ff ffc6 	bl	800a278 <__hexdig_fun>
 800a2ec:	2800      	cmp	r0, #0
 800a2ee:	d062      	beq.n	800a3b6 <__gethex+0x112>
 800a2f0:	4623      	mov	r3, r4
 800a2f2:	7818      	ldrb	r0, [r3, #0]
 800a2f4:	2830      	cmp	r0, #48	@ 0x30
 800a2f6:	4699      	mov	r9, r3
 800a2f8:	f103 0301 	add.w	r3, r3, #1
 800a2fc:	d0f9      	beq.n	800a2f2 <__gethex+0x4e>
 800a2fe:	f7ff ffbb 	bl	800a278 <__hexdig_fun>
 800a302:	fab0 f580 	clz	r5, r0
 800a306:	096d      	lsrs	r5, r5, #5
 800a308:	f04f 0b01 	mov.w	fp, #1
 800a30c:	464a      	mov	r2, r9
 800a30e:	4616      	mov	r6, r2
 800a310:	3201      	adds	r2, #1
 800a312:	7830      	ldrb	r0, [r6, #0]
 800a314:	f7ff ffb0 	bl	800a278 <__hexdig_fun>
 800a318:	2800      	cmp	r0, #0
 800a31a:	d1f8      	bne.n	800a30e <__gethex+0x6a>
 800a31c:	498d      	ldr	r1, [pc, #564]	@ (800a554 <__gethex+0x2b0>)
 800a31e:	2201      	movs	r2, #1
 800a320:	4630      	mov	r0, r6
 800a322:	f7fe fa86 	bl	8008832 <strncmp>
 800a326:	2800      	cmp	r0, #0
 800a328:	d13f      	bne.n	800a3aa <__gethex+0x106>
 800a32a:	b944      	cbnz	r4, 800a33e <__gethex+0x9a>
 800a32c:	1c74      	adds	r4, r6, #1
 800a32e:	4622      	mov	r2, r4
 800a330:	4616      	mov	r6, r2
 800a332:	3201      	adds	r2, #1
 800a334:	7830      	ldrb	r0, [r6, #0]
 800a336:	f7ff ff9f 	bl	800a278 <__hexdig_fun>
 800a33a:	2800      	cmp	r0, #0
 800a33c:	d1f8      	bne.n	800a330 <__gethex+0x8c>
 800a33e:	1ba4      	subs	r4, r4, r6
 800a340:	00a7      	lsls	r7, r4, #2
 800a342:	7833      	ldrb	r3, [r6, #0]
 800a344:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800a348:	2b50      	cmp	r3, #80	@ 0x50
 800a34a:	d13e      	bne.n	800a3ca <__gethex+0x126>
 800a34c:	7873      	ldrb	r3, [r6, #1]
 800a34e:	2b2b      	cmp	r3, #43	@ 0x2b
 800a350:	d033      	beq.n	800a3ba <__gethex+0x116>
 800a352:	2b2d      	cmp	r3, #45	@ 0x2d
 800a354:	d034      	beq.n	800a3c0 <__gethex+0x11c>
 800a356:	1c71      	adds	r1, r6, #1
 800a358:	2400      	movs	r4, #0
 800a35a:	7808      	ldrb	r0, [r1, #0]
 800a35c:	f7ff ff8c 	bl	800a278 <__hexdig_fun>
 800a360:	1e43      	subs	r3, r0, #1
 800a362:	b2db      	uxtb	r3, r3
 800a364:	2b18      	cmp	r3, #24
 800a366:	d830      	bhi.n	800a3ca <__gethex+0x126>
 800a368:	f1a0 0210 	sub.w	r2, r0, #16
 800a36c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a370:	f7ff ff82 	bl	800a278 <__hexdig_fun>
 800a374:	f100 3cff 	add.w	ip, r0, #4294967295
 800a378:	fa5f fc8c 	uxtb.w	ip, ip
 800a37c:	f1bc 0f18 	cmp.w	ip, #24
 800a380:	f04f 030a 	mov.w	r3, #10
 800a384:	d91e      	bls.n	800a3c4 <__gethex+0x120>
 800a386:	b104      	cbz	r4, 800a38a <__gethex+0xe6>
 800a388:	4252      	negs	r2, r2
 800a38a:	4417      	add	r7, r2
 800a38c:	f8ca 1000 	str.w	r1, [sl]
 800a390:	b1ed      	cbz	r5, 800a3ce <__gethex+0x12a>
 800a392:	f1bb 0f00 	cmp.w	fp, #0
 800a396:	bf0c      	ite	eq
 800a398:	2506      	moveq	r5, #6
 800a39a:	2500      	movne	r5, #0
 800a39c:	4628      	mov	r0, r5
 800a39e:	b005      	add	sp, #20
 800a3a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a3a4:	2500      	movs	r5, #0
 800a3a6:	462c      	mov	r4, r5
 800a3a8:	e7b0      	b.n	800a30c <__gethex+0x68>
 800a3aa:	2c00      	cmp	r4, #0
 800a3ac:	d1c7      	bne.n	800a33e <__gethex+0x9a>
 800a3ae:	4627      	mov	r7, r4
 800a3b0:	e7c7      	b.n	800a342 <__gethex+0x9e>
 800a3b2:	464e      	mov	r6, r9
 800a3b4:	462f      	mov	r7, r5
 800a3b6:	2501      	movs	r5, #1
 800a3b8:	e7c3      	b.n	800a342 <__gethex+0x9e>
 800a3ba:	2400      	movs	r4, #0
 800a3bc:	1cb1      	adds	r1, r6, #2
 800a3be:	e7cc      	b.n	800a35a <__gethex+0xb6>
 800a3c0:	2401      	movs	r4, #1
 800a3c2:	e7fb      	b.n	800a3bc <__gethex+0x118>
 800a3c4:	fb03 0002 	mla	r0, r3, r2, r0
 800a3c8:	e7ce      	b.n	800a368 <__gethex+0xc4>
 800a3ca:	4631      	mov	r1, r6
 800a3cc:	e7de      	b.n	800a38c <__gethex+0xe8>
 800a3ce:	eba6 0309 	sub.w	r3, r6, r9
 800a3d2:	3b01      	subs	r3, #1
 800a3d4:	4629      	mov	r1, r5
 800a3d6:	2b07      	cmp	r3, #7
 800a3d8:	dc0a      	bgt.n	800a3f0 <__gethex+0x14c>
 800a3da:	9801      	ldr	r0, [sp, #4]
 800a3dc:	f000 fa8a 	bl	800a8f4 <_Balloc>
 800a3e0:	4604      	mov	r4, r0
 800a3e2:	b940      	cbnz	r0, 800a3f6 <__gethex+0x152>
 800a3e4:	4b5c      	ldr	r3, [pc, #368]	@ (800a558 <__gethex+0x2b4>)
 800a3e6:	4602      	mov	r2, r0
 800a3e8:	21e4      	movs	r1, #228	@ 0xe4
 800a3ea:	485c      	ldr	r0, [pc, #368]	@ (800a55c <__gethex+0x2b8>)
 800a3ec:	f001 fd6a 	bl	800bec4 <__assert_func>
 800a3f0:	3101      	adds	r1, #1
 800a3f2:	105b      	asrs	r3, r3, #1
 800a3f4:	e7ef      	b.n	800a3d6 <__gethex+0x132>
 800a3f6:	f100 0a14 	add.w	sl, r0, #20
 800a3fa:	2300      	movs	r3, #0
 800a3fc:	4655      	mov	r5, sl
 800a3fe:	469b      	mov	fp, r3
 800a400:	45b1      	cmp	r9, r6
 800a402:	d337      	bcc.n	800a474 <__gethex+0x1d0>
 800a404:	f845 bb04 	str.w	fp, [r5], #4
 800a408:	eba5 050a 	sub.w	r5, r5, sl
 800a40c:	10ad      	asrs	r5, r5, #2
 800a40e:	6125      	str	r5, [r4, #16]
 800a410:	4658      	mov	r0, fp
 800a412:	f000 fb61 	bl	800aad8 <__hi0bits>
 800a416:	016d      	lsls	r5, r5, #5
 800a418:	f8d8 6000 	ldr.w	r6, [r8]
 800a41c:	1a2d      	subs	r5, r5, r0
 800a41e:	42b5      	cmp	r5, r6
 800a420:	dd54      	ble.n	800a4cc <__gethex+0x228>
 800a422:	1bad      	subs	r5, r5, r6
 800a424:	4629      	mov	r1, r5
 800a426:	4620      	mov	r0, r4
 800a428:	f000 fef5 	bl	800b216 <__any_on>
 800a42c:	4681      	mov	r9, r0
 800a42e:	b178      	cbz	r0, 800a450 <__gethex+0x1ac>
 800a430:	1e6b      	subs	r3, r5, #1
 800a432:	1159      	asrs	r1, r3, #5
 800a434:	f003 021f 	and.w	r2, r3, #31
 800a438:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800a43c:	f04f 0901 	mov.w	r9, #1
 800a440:	fa09 f202 	lsl.w	r2, r9, r2
 800a444:	420a      	tst	r2, r1
 800a446:	d003      	beq.n	800a450 <__gethex+0x1ac>
 800a448:	454b      	cmp	r3, r9
 800a44a:	dc36      	bgt.n	800a4ba <__gethex+0x216>
 800a44c:	f04f 0902 	mov.w	r9, #2
 800a450:	4629      	mov	r1, r5
 800a452:	4620      	mov	r0, r4
 800a454:	f7ff febe 	bl	800a1d4 <rshift>
 800a458:	442f      	add	r7, r5
 800a45a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a45e:	42bb      	cmp	r3, r7
 800a460:	da42      	bge.n	800a4e8 <__gethex+0x244>
 800a462:	9801      	ldr	r0, [sp, #4]
 800a464:	4621      	mov	r1, r4
 800a466:	f000 fa85 	bl	800a974 <_Bfree>
 800a46a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a46c:	2300      	movs	r3, #0
 800a46e:	6013      	str	r3, [r2, #0]
 800a470:	25a3      	movs	r5, #163	@ 0xa3
 800a472:	e793      	b.n	800a39c <__gethex+0xf8>
 800a474:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800a478:	2a2e      	cmp	r2, #46	@ 0x2e
 800a47a:	d012      	beq.n	800a4a2 <__gethex+0x1fe>
 800a47c:	2b20      	cmp	r3, #32
 800a47e:	d104      	bne.n	800a48a <__gethex+0x1e6>
 800a480:	f845 bb04 	str.w	fp, [r5], #4
 800a484:	f04f 0b00 	mov.w	fp, #0
 800a488:	465b      	mov	r3, fp
 800a48a:	7830      	ldrb	r0, [r6, #0]
 800a48c:	9303      	str	r3, [sp, #12]
 800a48e:	f7ff fef3 	bl	800a278 <__hexdig_fun>
 800a492:	9b03      	ldr	r3, [sp, #12]
 800a494:	f000 000f 	and.w	r0, r0, #15
 800a498:	4098      	lsls	r0, r3
 800a49a:	ea4b 0b00 	orr.w	fp, fp, r0
 800a49e:	3304      	adds	r3, #4
 800a4a0:	e7ae      	b.n	800a400 <__gethex+0x15c>
 800a4a2:	45b1      	cmp	r9, r6
 800a4a4:	d8ea      	bhi.n	800a47c <__gethex+0x1d8>
 800a4a6:	492b      	ldr	r1, [pc, #172]	@ (800a554 <__gethex+0x2b0>)
 800a4a8:	9303      	str	r3, [sp, #12]
 800a4aa:	2201      	movs	r2, #1
 800a4ac:	4630      	mov	r0, r6
 800a4ae:	f7fe f9c0 	bl	8008832 <strncmp>
 800a4b2:	9b03      	ldr	r3, [sp, #12]
 800a4b4:	2800      	cmp	r0, #0
 800a4b6:	d1e1      	bne.n	800a47c <__gethex+0x1d8>
 800a4b8:	e7a2      	b.n	800a400 <__gethex+0x15c>
 800a4ba:	1ea9      	subs	r1, r5, #2
 800a4bc:	4620      	mov	r0, r4
 800a4be:	f000 feaa 	bl	800b216 <__any_on>
 800a4c2:	2800      	cmp	r0, #0
 800a4c4:	d0c2      	beq.n	800a44c <__gethex+0x1a8>
 800a4c6:	f04f 0903 	mov.w	r9, #3
 800a4ca:	e7c1      	b.n	800a450 <__gethex+0x1ac>
 800a4cc:	da09      	bge.n	800a4e2 <__gethex+0x23e>
 800a4ce:	1b75      	subs	r5, r6, r5
 800a4d0:	4621      	mov	r1, r4
 800a4d2:	9801      	ldr	r0, [sp, #4]
 800a4d4:	462a      	mov	r2, r5
 800a4d6:	f000 fc65 	bl	800ada4 <__lshift>
 800a4da:	1b7f      	subs	r7, r7, r5
 800a4dc:	4604      	mov	r4, r0
 800a4de:	f100 0a14 	add.w	sl, r0, #20
 800a4e2:	f04f 0900 	mov.w	r9, #0
 800a4e6:	e7b8      	b.n	800a45a <__gethex+0x1b6>
 800a4e8:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800a4ec:	42bd      	cmp	r5, r7
 800a4ee:	dd6f      	ble.n	800a5d0 <__gethex+0x32c>
 800a4f0:	1bed      	subs	r5, r5, r7
 800a4f2:	42ae      	cmp	r6, r5
 800a4f4:	dc34      	bgt.n	800a560 <__gethex+0x2bc>
 800a4f6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a4fa:	2b02      	cmp	r3, #2
 800a4fc:	d022      	beq.n	800a544 <__gethex+0x2a0>
 800a4fe:	2b03      	cmp	r3, #3
 800a500:	d024      	beq.n	800a54c <__gethex+0x2a8>
 800a502:	2b01      	cmp	r3, #1
 800a504:	d115      	bne.n	800a532 <__gethex+0x28e>
 800a506:	42ae      	cmp	r6, r5
 800a508:	d113      	bne.n	800a532 <__gethex+0x28e>
 800a50a:	2e01      	cmp	r6, #1
 800a50c:	d10b      	bne.n	800a526 <__gethex+0x282>
 800a50e:	9a02      	ldr	r2, [sp, #8]
 800a510:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a514:	6013      	str	r3, [r2, #0]
 800a516:	2301      	movs	r3, #1
 800a518:	6123      	str	r3, [r4, #16]
 800a51a:	f8ca 3000 	str.w	r3, [sl]
 800a51e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a520:	2562      	movs	r5, #98	@ 0x62
 800a522:	601c      	str	r4, [r3, #0]
 800a524:	e73a      	b.n	800a39c <__gethex+0xf8>
 800a526:	1e71      	subs	r1, r6, #1
 800a528:	4620      	mov	r0, r4
 800a52a:	f000 fe74 	bl	800b216 <__any_on>
 800a52e:	2800      	cmp	r0, #0
 800a530:	d1ed      	bne.n	800a50e <__gethex+0x26a>
 800a532:	9801      	ldr	r0, [sp, #4]
 800a534:	4621      	mov	r1, r4
 800a536:	f000 fa1d 	bl	800a974 <_Bfree>
 800a53a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a53c:	2300      	movs	r3, #0
 800a53e:	6013      	str	r3, [r2, #0]
 800a540:	2550      	movs	r5, #80	@ 0x50
 800a542:	e72b      	b.n	800a39c <__gethex+0xf8>
 800a544:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a546:	2b00      	cmp	r3, #0
 800a548:	d1f3      	bne.n	800a532 <__gethex+0x28e>
 800a54a:	e7e0      	b.n	800a50e <__gethex+0x26a>
 800a54c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a54e:	2b00      	cmp	r3, #0
 800a550:	d1dd      	bne.n	800a50e <__gethex+0x26a>
 800a552:	e7ee      	b.n	800a532 <__gethex+0x28e>
 800a554:	0800d402 	.word	0x0800d402
 800a558:	0800d5be 	.word	0x0800d5be
 800a55c:	0800d5cf 	.word	0x0800d5cf
 800a560:	1e6f      	subs	r7, r5, #1
 800a562:	f1b9 0f00 	cmp.w	r9, #0
 800a566:	d130      	bne.n	800a5ca <__gethex+0x326>
 800a568:	b127      	cbz	r7, 800a574 <__gethex+0x2d0>
 800a56a:	4639      	mov	r1, r7
 800a56c:	4620      	mov	r0, r4
 800a56e:	f000 fe52 	bl	800b216 <__any_on>
 800a572:	4681      	mov	r9, r0
 800a574:	117a      	asrs	r2, r7, #5
 800a576:	2301      	movs	r3, #1
 800a578:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800a57c:	f007 071f 	and.w	r7, r7, #31
 800a580:	40bb      	lsls	r3, r7
 800a582:	4213      	tst	r3, r2
 800a584:	4629      	mov	r1, r5
 800a586:	4620      	mov	r0, r4
 800a588:	bf18      	it	ne
 800a58a:	f049 0902 	orrne.w	r9, r9, #2
 800a58e:	f7ff fe21 	bl	800a1d4 <rshift>
 800a592:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800a596:	1b76      	subs	r6, r6, r5
 800a598:	2502      	movs	r5, #2
 800a59a:	f1b9 0f00 	cmp.w	r9, #0
 800a59e:	d047      	beq.n	800a630 <__gethex+0x38c>
 800a5a0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a5a4:	2b02      	cmp	r3, #2
 800a5a6:	d015      	beq.n	800a5d4 <__gethex+0x330>
 800a5a8:	2b03      	cmp	r3, #3
 800a5aa:	d017      	beq.n	800a5dc <__gethex+0x338>
 800a5ac:	2b01      	cmp	r3, #1
 800a5ae:	d109      	bne.n	800a5c4 <__gethex+0x320>
 800a5b0:	f019 0f02 	tst.w	r9, #2
 800a5b4:	d006      	beq.n	800a5c4 <__gethex+0x320>
 800a5b6:	f8da 3000 	ldr.w	r3, [sl]
 800a5ba:	ea49 0903 	orr.w	r9, r9, r3
 800a5be:	f019 0f01 	tst.w	r9, #1
 800a5c2:	d10e      	bne.n	800a5e2 <__gethex+0x33e>
 800a5c4:	f045 0510 	orr.w	r5, r5, #16
 800a5c8:	e032      	b.n	800a630 <__gethex+0x38c>
 800a5ca:	f04f 0901 	mov.w	r9, #1
 800a5ce:	e7d1      	b.n	800a574 <__gethex+0x2d0>
 800a5d0:	2501      	movs	r5, #1
 800a5d2:	e7e2      	b.n	800a59a <__gethex+0x2f6>
 800a5d4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a5d6:	f1c3 0301 	rsb	r3, r3, #1
 800a5da:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a5dc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	d0f0      	beq.n	800a5c4 <__gethex+0x320>
 800a5e2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800a5e6:	f104 0314 	add.w	r3, r4, #20
 800a5ea:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800a5ee:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800a5f2:	f04f 0c00 	mov.w	ip, #0
 800a5f6:	4618      	mov	r0, r3
 800a5f8:	f853 2b04 	ldr.w	r2, [r3], #4
 800a5fc:	f1b2 3fff 	cmp.w	r2, #4294967295
 800a600:	d01b      	beq.n	800a63a <__gethex+0x396>
 800a602:	3201      	adds	r2, #1
 800a604:	6002      	str	r2, [r0, #0]
 800a606:	2d02      	cmp	r5, #2
 800a608:	f104 0314 	add.w	r3, r4, #20
 800a60c:	d13c      	bne.n	800a688 <__gethex+0x3e4>
 800a60e:	f8d8 2000 	ldr.w	r2, [r8]
 800a612:	3a01      	subs	r2, #1
 800a614:	42b2      	cmp	r2, r6
 800a616:	d109      	bne.n	800a62c <__gethex+0x388>
 800a618:	1171      	asrs	r1, r6, #5
 800a61a:	2201      	movs	r2, #1
 800a61c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a620:	f006 061f 	and.w	r6, r6, #31
 800a624:	fa02 f606 	lsl.w	r6, r2, r6
 800a628:	421e      	tst	r6, r3
 800a62a:	d13a      	bne.n	800a6a2 <__gethex+0x3fe>
 800a62c:	f045 0520 	orr.w	r5, r5, #32
 800a630:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a632:	601c      	str	r4, [r3, #0]
 800a634:	9b02      	ldr	r3, [sp, #8]
 800a636:	601f      	str	r7, [r3, #0]
 800a638:	e6b0      	b.n	800a39c <__gethex+0xf8>
 800a63a:	4299      	cmp	r1, r3
 800a63c:	f843 cc04 	str.w	ip, [r3, #-4]
 800a640:	d8d9      	bhi.n	800a5f6 <__gethex+0x352>
 800a642:	68a3      	ldr	r3, [r4, #8]
 800a644:	459b      	cmp	fp, r3
 800a646:	db17      	blt.n	800a678 <__gethex+0x3d4>
 800a648:	6861      	ldr	r1, [r4, #4]
 800a64a:	9801      	ldr	r0, [sp, #4]
 800a64c:	3101      	adds	r1, #1
 800a64e:	f000 f951 	bl	800a8f4 <_Balloc>
 800a652:	4681      	mov	r9, r0
 800a654:	b918      	cbnz	r0, 800a65e <__gethex+0x3ba>
 800a656:	4b1a      	ldr	r3, [pc, #104]	@ (800a6c0 <__gethex+0x41c>)
 800a658:	4602      	mov	r2, r0
 800a65a:	2184      	movs	r1, #132	@ 0x84
 800a65c:	e6c5      	b.n	800a3ea <__gethex+0x146>
 800a65e:	6922      	ldr	r2, [r4, #16]
 800a660:	3202      	adds	r2, #2
 800a662:	f104 010c 	add.w	r1, r4, #12
 800a666:	0092      	lsls	r2, r2, #2
 800a668:	300c      	adds	r0, #12
 800a66a:	f7fe fefe 	bl	800946a <memcpy>
 800a66e:	4621      	mov	r1, r4
 800a670:	9801      	ldr	r0, [sp, #4]
 800a672:	f000 f97f 	bl	800a974 <_Bfree>
 800a676:	464c      	mov	r4, r9
 800a678:	6923      	ldr	r3, [r4, #16]
 800a67a:	1c5a      	adds	r2, r3, #1
 800a67c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a680:	6122      	str	r2, [r4, #16]
 800a682:	2201      	movs	r2, #1
 800a684:	615a      	str	r2, [r3, #20]
 800a686:	e7be      	b.n	800a606 <__gethex+0x362>
 800a688:	6922      	ldr	r2, [r4, #16]
 800a68a:	455a      	cmp	r2, fp
 800a68c:	dd0b      	ble.n	800a6a6 <__gethex+0x402>
 800a68e:	2101      	movs	r1, #1
 800a690:	4620      	mov	r0, r4
 800a692:	f7ff fd9f 	bl	800a1d4 <rshift>
 800a696:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a69a:	3701      	adds	r7, #1
 800a69c:	42bb      	cmp	r3, r7
 800a69e:	f6ff aee0 	blt.w	800a462 <__gethex+0x1be>
 800a6a2:	2501      	movs	r5, #1
 800a6a4:	e7c2      	b.n	800a62c <__gethex+0x388>
 800a6a6:	f016 061f 	ands.w	r6, r6, #31
 800a6aa:	d0fa      	beq.n	800a6a2 <__gethex+0x3fe>
 800a6ac:	4453      	add	r3, sl
 800a6ae:	f1c6 0620 	rsb	r6, r6, #32
 800a6b2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800a6b6:	f000 fa0f 	bl	800aad8 <__hi0bits>
 800a6ba:	42b0      	cmp	r0, r6
 800a6bc:	dbe7      	blt.n	800a68e <__gethex+0x3ea>
 800a6be:	e7f0      	b.n	800a6a2 <__gethex+0x3fe>
 800a6c0:	0800d5be 	.word	0x0800d5be

0800a6c4 <L_shift>:
 800a6c4:	f1c2 0208 	rsb	r2, r2, #8
 800a6c8:	0092      	lsls	r2, r2, #2
 800a6ca:	b570      	push	{r4, r5, r6, lr}
 800a6cc:	f1c2 0620 	rsb	r6, r2, #32
 800a6d0:	6843      	ldr	r3, [r0, #4]
 800a6d2:	6804      	ldr	r4, [r0, #0]
 800a6d4:	fa03 f506 	lsl.w	r5, r3, r6
 800a6d8:	432c      	orrs	r4, r5
 800a6da:	40d3      	lsrs	r3, r2
 800a6dc:	6004      	str	r4, [r0, #0]
 800a6de:	f840 3f04 	str.w	r3, [r0, #4]!
 800a6e2:	4288      	cmp	r0, r1
 800a6e4:	d3f4      	bcc.n	800a6d0 <L_shift+0xc>
 800a6e6:	bd70      	pop	{r4, r5, r6, pc}

0800a6e8 <__match>:
 800a6e8:	b530      	push	{r4, r5, lr}
 800a6ea:	6803      	ldr	r3, [r0, #0]
 800a6ec:	3301      	adds	r3, #1
 800a6ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a6f2:	b914      	cbnz	r4, 800a6fa <__match+0x12>
 800a6f4:	6003      	str	r3, [r0, #0]
 800a6f6:	2001      	movs	r0, #1
 800a6f8:	bd30      	pop	{r4, r5, pc}
 800a6fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a6fe:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800a702:	2d19      	cmp	r5, #25
 800a704:	bf98      	it	ls
 800a706:	3220      	addls	r2, #32
 800a708:	42a2      	cmp	r2, r4
 800a70a:	d0f0      	beq.n	800a6ee <__match+0x6>
 800a70c:	2000      	movs	r0, #0
 800a70e:	e7f3      	b.n	800a6f8 <__match+0x10>

0800a710 <__hexnan>:
 800a710:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a714:	680b      	ldr	r3, [r1, #0]
 800a716:	6801      	ldr	r1, [r0, #0]
 800a718:	115e      	asrs	r6, r3, #5
 800a71a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a71e:	f013 031f 	ands.w	r3, r3, #31
 800a722:	b087      	sub	sp, #28
 800a724:	bf18      	it	ne
 800a726:	3604      	addne	r6, #4
 800a728:	2500      	movs	r5, #0
 800a72a:	1f37      	subs	r7, r6, #4
 800a72c:	4682      	mov	sl, r0
 800a72e:	4690      	mov	r8, r2
 800a730:	9301      	str	r3, [sp, #4]
 800a732:	f846 5c04 	str.w	r5, [r6, #-4]
 800a736:	46b9      	mov	r9, r7
 800a738:	463c      	mov	r4, r7
 800a73a:	9502      	str	r5, [sp, #8]
 800a73c:	46ab      	mov	fp, r5
 800a73e:	784a      	ldrb	r2, [r1, #1]
 800a740:	1c4b      	adds	r3, r1, #1
 800a742:	9303      	str	r3, [sp, #12]
 800a744:	b342      	cbz	r2, 800a798 <__hexnan+0x88>
 800a746:	4610      	mov	r0, r2
 800a748:	9105      	str	r1, [sp, #20]
 800a74a:	9204      	str	r2, [sp, #16]
 800a74c:	f7ff fd94 	bl	800a278 <__hexdig_fun>
 800a750:	2800      	cmp	r0, #0
 800a752:	d151      	bne.n	800a7f8 <__hexnan+0xe8>
 800a754:	9a04      	ldr	r2, [sp, #16]
 800a756:	9905      	ldr	r1, [sp, #20]
 800a758:	2a20      	cmp	r2, #32
 800a75a:	d818      	bhi.n	800a78e <__hexnan+0x7e>
 800a75c:	9b02      	ldr	r3, [sp, #8]
 800a75e:	459b      	cmp	fp, r3
 800a760:	dd13      	ble.n	800a78a <__hexnan+0x7a>
 800a762:	454c      	cmp	r4, r9
 800a764:	d206      	bcs.n	800a774 <__hexnan+0x64>
 800a766:	2d07      	cmp	r5, #7
 800a768:	dc04      	bgt.n	800a774 <__hexnan+0x64>
 800a76a:	462a      	mov	r2, r5
 800a76c:	4649      	mov	r1, r9
 800a76e:	4620      	mov	r0, r4
 800a770:	f7ff ffa8 	bl	800a6c4 <L_shift>
 800a774:	4544      	cmp	r4, r8
 800a776:	d952      	bls.n	800a81e <__hexnan+0x10e>
 800a778:	2300      	movs	r3, #0
 800a77a:	f1a4 0904 	sub.w	r9, r4, #4
 800a77e:	f844 3c04 	str.w	r3, [r4, #-4]
 800a782:	f8cd b008 	str.w	fp, [sp, #8]
 800a786:	464c      	mov	r4, r9
 800a788:	461d      	mov	r5, r3
 800a78a:	9903      	ldr	r1, [sp, #12]
 800a78c:	e7d7      	b.n	800a73e <__hexnan+0x2e>
 800a78e:	2a29      	cmp	r2, #41	@ 0x29
 800a790:	d157      	bne.n	800a842 <__hexnan+0x132>
 800a792:	3102      	adds	r1, #2
 800a794:	f8ca 1000 	str.w	r1, [sl]
 800a798:	f1bb 0f00 	cmp.w	fp, #0
 800a79c:	d051      	beq.n	800a842 <__hexnan+0x132>
 800a79e:	454c      	cmp	r4, r9
 800a7a0:	d206      	bcs.n	800a7b0 <__hexnan+0xa0>
 800a7a2:	2d07      	cmp	r5, #7
 800a7a4:	dc04      	bgt.n	800a7b0 <__hexnan+0xa0>
 800a7a6:	462a      	mov	r2, r5
 800a7a8:	4649      	mov	r1, r9
 800a7aa:	4620      	mov	r0, r4
 800a7ac:	f7ff ff8a 	bl	800a6c4 <L_shift>
 800a7b0:	4544      	cmp	r4, r8
 800a7b2:	d936      	bls.n	800a822 <__hexnan+0x112>
 800a7b4:	f1a8 0204 	sub.w	r2, r8, #4
 800a7b8:	4623      	mov	r3, r4
 800a7ba:	f853 1b04 	ldr.w	r1, [r3], #4
 800a7be:	f842 1f04 	str.w	r1, [r2, #4]!
 800a7c2:	429f      	cmp	r7, r3
 800a7c4:	d2f9      	bcs.n	800a7ba <__hexnan+0xaa>
 800a7c6:	1b3b      	subs	r3, r7, r4
 800a7c8:	f023 0303 	bic.w	r3, r3, #3
 800a7cc:	3304      	adds	r3, #4
 800a7ce:	3401      	adds	r4, #1
 800a7d0:	3e03      	subs	r6, #3
 800a7d2:	42b4      	cmp	r4, r6
 800a7d4:	bf88      	it	hi
 800a7d6:	2304      	movhi	r3, #4
 800a7d8:	4443      	add	r3, r8
 800a7da:	2200      	movs	r2, #0
 800a7dc:	f843 2b04 	str.w	r2, [r3], #4
 800a7e0:	429f      	cmp	r7, r3
 800a7e2:	d2fb      	bcs.n	800a7dc <__hexnan+0xcc>
 800a7e4:	683b      	ldr	r3, [r7, #0]
 800a7e6:	b91b      	cbnz	r3, 800a7f0 <__hexnan+0xe0>
 800a7e8:	4547      	cmp	r7, r8
 800a7ea:	d128      	bne.n	800a83e <__hexnan+0x12e>
 800a7ec:	2301      	movs	r3, #1
 800a7ee:	603b      	str	r3, [r7, #0]
 800a7f0:	2005      	movs	r0, #5
 800a7f2:	b007      	add	sp, #28
 800a7f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a7f8:	3501      	adds	r5, #1
 800a7fa:	2d08      	cmp	r5, #8
 800a7fc:	f10b 0b01 	add.w	fp, fp, #1
 800a800:	dd06      	ble.n	800a810 <__hexnan+0x100>
 800a802:	4544      	cmp	r4, r8
 800a804:	d9c1      	bls.n	800a78a <__hexnan+0x7a>
 800a806:	2300      	movs	r3, #0
 800a808:	f844 3c04 	str.w	r3, [r4, #-4]
 800a80c:	2501      	movs	r5, #1
 800a80e:	3c04      	subs	r4, #4
 800a810:	6822      	ldr	r2, [r4, #0]
 800a812:	f000 000f 	and.w	r0, r0, #15
 800a816:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800a81a:	6020      	str	r0, [r4, #0]
 800a81c:	e7b5      	b.n	800a78a <__hexnan+0x7a>
 800a81e:	2508      	movs	r5, #8
 800a820:	e7b3      	b.n	800a78a <__hexnan+0x7a>
 800a822:	9b01      	ldr	r3, [sp, #4]
 800a824:	2b00      	cmp	r3, #0
 800a826:	d0dd      	beq.n	800a7e4 <__hexnan+0xd4>
 800a828:	f1c3 0320 	rsb	r3, r3, #32
 800a82c:	f04f 32ff 	mov.w	r2, #4294967295
 800a830:	40da      	lsrs	r2, r3
 800a832:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800a836:	4013      	ands	r3, r2
 800a838:	f846 3c04 	str.w	r3, [r6, #-4]
 800a83c:	e7d2      	b.n	800a7e4 <__hexnan+0xd4>
 800a83e:	3f04      	subs	r7, #4
 800a840:	e7d0      	b.n	800a7e4 <__hexnan+0xd4>
 800a842:	2004      	movs	r0, #4
 800a844:	e7d5      	b.n	800a7f2 <__hexnan+0xe2>
	...

0800a848 <_findenv_r>:
 800a848:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a84c:	f8df a06c 	ldr.w	sl, [pc, #108]	@ 800a8bc <_findenv_r+0x74>
 800a850:	4606      	mov	r6, r0
 800a852:	4689      	mov	r9, r1
 800a854:	4617      	mov	r7, r2
 800a856:	f001 fb67 	bl	800bf28 <__env_lock>
 800a85a:	f8da 4000 	ldr.w	r4, [sl]
 800a85e:	b134      	cbz	r4, 800a86e <_findenv_r+0x26>
 800a860:	464b      	mov	r3, r9
 800a862:	4698      	mov	r8, r3
 800a864:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a868:	b13a      	cbz	r2, 800a87a <_findenv_r+0x32>
 800a86a:	2a3d      	cmp	r2, #61	@ 0x3d
 800a86c:	d1f9      	bne.n	800a862 <_findenv_r+0x1a>
 800a86e:	4630      	mov	r0, r6
 800a870:	f001 fb60 	bl	800bf34 <__env_unlock>
 800a874:	2000      	movs	r0, #0
 800a876:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a87a:	eba8 0809 	sub.w	r8, r8, r9
 800a87e:	46a3      	mov	fp, r4
 800a880:	f854 0b04 	ldr.w	r0, [r4], #4
 800a884:	2800      	cmp	r0, #0
 800a886:	d0f2      	beq.n	800a86e <_findenv_r+0x26>
 800a888:	4642      	mov	r2, r8
 800a88a:	4649      	mov	r1, r9
 800a88c:	f7fd ffd1 	bl	8008832 <strncmp>
 800a890:	2800      	cmp	r0, #0
 800a892:	d1f4      	bne.n	800a87e <_findenv_r+0x36>
 800a894:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800a898:	eb03 0508 	add.w	r5, r3, r8
 800a89c:	f813 3008 	ldrb.w	r3, [r3, r8]
 800a8a0:	2b3d      	cmp	r3, #61	@ 0x3d
 800a8a2:	d1ec      	bne.n	800a87e <_findenv_r+0x36>
 800a8a4:	f8da 3000 	ldr.w	r3, [sl]
 800a8a8:	ebab 0303 	sub.w	r3, fp, r3
 800a8ac:	109b      	asrs	r3, r3, #2
 800a8ae:	4630      	mov	r0, r6
 800a8b0:	603b      	str	r3, [r7, #0]
 800a8b2:	f001 fb3f 	bl	800bf34 <__env_unlock>
 800a8b6:	1c68      	adds	r0, r5, #1
 800a8b8:	e7dd      	b.n	800a876 <_findenv_r+0x2e>
 800a8ba:	bf00      	nop
 800a8bc:	20000004 	.word	0x20000004

0800a8c0 <_getenv_r>:
 800a8c0:	b507      	push	{r0, r1, r2, lr}
 800a8c2:	aa01      	add	r2, sp, #4
 800a8c4:	f7ff ffc0 	bl	800a848 <_findenv_r>
 800a8c8:	b003      	add	sp, #12
 800a8ca:	f85d fb04 	ldr.w	pc, [sp], #4

0800a8ce <__ascii_mbtowc>:
 800a8ce:	b082      	sub	sp, #8
 800a8d0:	b901      	cbnz	r1, 800a8d4 <__ascii_mbtowc+0x6>
 800a8d2:	a901      	add	r1, sp, #4
 800a8d4:	b142      	cbz	r2, 800a8e8 <__ascii_mbtowc+0x1a>
 800a8d6:	b14b      	cbz	r3, 800a8ec <__ascii_mbtowc+0x1e>
 800a8d8:	7813      	ldrb	r3, [r2, #0]
 800a8da:	600b      	str	r3, [r1, #0]
 800a8dc:	7812      	ldrb	r2, [r2, #0]
 800a8de:	1e10      	subs	r0, r2, #0
 800a8e0:	bf18      	it	ne
 800a8e2:	2001      	movne	r0, #1
 800a8e4:	b002      	add	sp, #8
 800a8e6:	4770      	bx	lr
 800a8e8:	4610      	mov	r0, r2
 800a8ea:	e7fb      	b.n	800a8e4 <__ascii_mbtowc+0x16>
 800a8ec:	f06f 0001 	mvn.w	r0, #1
 800a8f0:	e7f8      	b.n	800a8e4 <__ascii_mbtowc+0x16>
	...

0800a8f4 <_Balloc>:
 800a8f4:	b570      	push	{r4, r5, r6, lr}
 800a8f6:	69c6      	ldr	r6, [r0, #28]
 800a8f8:	4604      	mov	r4, r0
 800a8fa:	460d      	mov	r5, r1
 800a8fc:	b976      	cbnz	r6, 800a91c <_Balloc+0x28>
 800a8fe:	2010      	movs	r0, #16
 800a900:	f7fc fae4 	bl	8006ecc <malloc>
 800a904:	4602      	mov	r2, r0
 800a906:	61e0      	str	r0, [r4, #28]
 800a908:	b920      	cbnz	r0, 800a914 <_Balloc+0x20>
 800a90a:	4b18      	ldr	r3, [pc, #96]	@ (800a96c <_Balloc+0x78>)
 800a90c:	4818      	ldr	r0, [pc, #96]	@ (800a970 <_Balloc+0x7c>)
 800a90e:	216b      	movs	r1, #107	@ 0x6b
 800a910:	f001 fad8 	bl	800bec4 <__assert_func>
 800a914:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a918:	6006      	str	r6, [r0, #0]
 800a91a:	60c6      	str	r6, [r0, #12]
 800a91c:	69e6      	ldr	r6, [r4, #28]
 800a91e:	68f3      	ldr	r3, [r6, #12]
 800a920:	b183      	cbz	r3, 800a944 <_Balloc+0x50>
 800a922:	69e3      	ldr	r3, [r4, #28]
 800a924:	68db      	ldr	r3, [r3, #12]
 800a926:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a92a:	b9b8      	cbnz	r0, 800a95c <_Balloc+0x68>
 800a92c:	2101      	movs	r1, #1
 800a92e:	fa01 f605 	lsl.w	r6, r1, r5
 800a932:	1d72      	adds	r2, r6, #5
 800a934:	0092      	lsls	r2, r2, #2
 800a936:	4620      	mov	r0, r4
 800a938:	f001 fae2 	bl	800bf00 <_calloc_r>
 800a93c:	b160      	cbz	r0, 800a958 <_Balloc+0x64>
 800a93e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a942:	e00e      	b.n	800a962 <_Balloc+0x6e>
 800a944:	2221      	movs	r2, #33	@ 0x21
 800a946:	2104      	movs	r1, #4
 800a948:	4620      	mov	r0, r4
 800a94a:	f001 fad9 	bl	800bf00 <_calloc_r>
 800a94e:	69e3      	ldr	r3, [r4, #28]
 800a950:	60f0      	str	r0, [r6, #12]
 800a952:	68db      	ldr	r3, [r3, #12]
 800a954:	2b00      	cmp	r3, #0
 800a956:	d1e4      	bne.n	800a922 <_Balloc+0x2e>
 800a958:	2000      	movs	r0, #0
 800a95a:	bd70      	pop	{r4, r5, r6, pc}
 800a95c:	6802      	ldr	r2, [r0, #0]
 800a95e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a962:	2300      	movs	r3, #0
 800a964:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a968:	e7f7      	b.n	800a95a <_Balloc+0x66>
 800a96a:	bf00      	nop
 800a96c:	0800d54f 	.word	0x0800d54f
 800a970:	0800d62f 	.word	0x0800d62f

0800a974 <_Bfree>:
 800a974:	b570      	push	{r4, r5, r6, lr}
 800a976:	69c6      	ldr	r6, [r0, #28]
 800a978:	4605      	mov	r5, r0
 800a97a:	460c      	mov	r4, r1
 800a97c:	b976      	cbnz	r6, 800a99c <_Bfree+0x28>
 800a97e:	2010      	movs	r0, #16
 800a980:	f7fc faa4 	bl	8006ecc <malloc>
 800a984:	4602      	mov	r2, r0
 800a986:	61e8      	str	r0, [r5, #28]
 800a988:	b920      	cbnz	r0, 800a994 <_Bfree+0x20>
 800a98a:	4b09      	ldr	r3, [pc, #36]	@ (800a9b0 <_Bfree+0x3c>)
 800a98c:	4809      	ldr	r0, [pc, #36]	@ (800a9b4 <_Bfree+0x40>)
 800a98e:	218f      	movs	r1, #143	@ 0x8f
 800a990:	f001 fa98 	bl	800bec4 <__assert_func>
 800a994:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a998:	6006      	str	r6, [r0, #0]
 800a99a:	60c6      	str	r6, [r0, #12]
 800a99c:	b13c      	cbz	r4, 800a9ae <_Bfree+0x3a>
 800a99e:	69eb      	ldr	r3, [r5, #28]
 800a9a0:	6862      	ldr	r2, [r4, #4]
 800a9a2:	68db      	ldr	r3, [r3, #12]
 800a9a4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a9a8:	6021      	str	r1, [r4, #0]
 800a9aa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a9ae:	bd70      	pop	{r4, r5, r6, pc}
 800a9b0:	0800d54f 	.word	0x0800d54f
 800a9b4:	0800d62f 	.word	0x0800d62f

0800a9b8 <__multadd>:
 800a9b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a9bc:	690d      	ldr	r5, [r1, #16]
 800a9be:	4607      	mov	r7, r0
 800a9c0:	460c      	mov	r4, r1
 800a9c2:	461e      	mov	r6, r3
 800a9c4:	f101 0c14 	add.w	ip, r1, #20
 800a9c8:	2000      	movs	r0, #0
 800a9ca:	f8dc 3000 	ldr.w	r3, [ip]
 800a9ce:	b299      	uxth	r1, r3
 800a9d0:	fb02 6101 	mla	r1, r2, r1, r6
 800a9d4:	0c1e      	lsrs	r6, r3, #16
 800a9d6:	0c0b      	lsrs	r3, r1, #16
 800a9d8:	fb02 3306 	mla	r3, r2, r6, r3
 800a9dc:	b289      	uxth	r1, r1
 800a9de:	3001      	adds	r0, #1
 800a9e0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a9e4:	4285      	cmp	r5, r0
 800a9e6:	f84c 1b04 	str.w	r1, [ip], #4
 800a9ea:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a9ee:	dcec      	bgt.n	800a9ca <__multadd+0x12>
 800a9f0:	b30e      	cbz	r6, 800aa36 <__multadd+0x7e>
 800a9f2:	68a3      	ldr	r3, [r4, #8]
 800a9f4:	42ab      	cmp	r3, r5
 800a9f6:	dc19      	bgt.n	800aa2c <__multadd+0x74>
 800a9f8:	6861      	ldr	r1, [r4, #4]
 800a9fa:	4638      	mov	r0, r7
 800a9fc:	3101      	adds	r1, #1
 800a9fe:	f7ff ff79 	bl	800a8f4 <_Balloc>
 800aa02:	4680      	mov	r8, r0
 800aa04:	b928      	cbnz	r0, 800aa12 <__multadd+0x5a>
 800aa06:	4602      	mov	r2, r0
 800aa08:	4b0c      	ldr	r3, [pc, #48]	@ (800aa3c <__multadd+0x84>)
 800aa0a:	480d      	ldr	r0, [pc, #52]	@ (800aa40 <__multadd+0x88>)
 800aa0c:	21ba      	movs	r1, #186	@ 0xba
 800aa0e:	f001 fa59 	bl	800bec4 <__assert_func>
 800aa12:	6922      	ldr	r2, [r4, #16]
 800aa14:	3202      	adds	r2, #2
 800aa16:	f104 010c 	add.w	r1, r4, #12
 800aa1a:	0092      	lsls	r2, r2, #2
 800aa1c:	300c      	adds	r0, #12
 800aa1e:	f7fe fd24 	bl	800946a <memcpy>
 800aa22:	4621      	mov	r1, r4
 800aa24:	4638      	mov	r0, r7
 800aa26:	f7ff ffa5 	bl	800a974 <_Bfree>
 800aa2a:	4644      	mov	r4, r8
 800aa2c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800aa30:	3501      	adds	r5, #1
 800aa32:	615e      	str	r6, [r3, #20]
 800aa34:	6125      	str	r5, [r4, #16]
 800aa36:	4620      	mov	r0, r4
 800aa38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aa3c:	0800d5be 	.word	0x0800d5be
 800aa40:	0800d62f 	.word	0x0800d62f

0800aa44 <__s2b>:
 800aa44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aa48:	460c      	mov	r4, r1
 800aa4a:	4615      	mov	r5, r2
 800aa4c:	461f      	mov	r7, r3
 800aa4e:	2209      	movs	r2, #9
 800aa50:	3308      	adds	r3, #8
 800aa52:	4606      	mov	r6, r0
 800aa54:	fb93 f3f2 	sdiv	r3, r3, r2
 800aa58:	2100      	movs	r1, #0
 800aa5a:	2201      	movs	r2, #1
 800aa5c:	429a      	cmp	r2, r3
 800aa5e:	db09      	blt.n	800aa74 <__s2b+0x30>
 800aa60:	4630      	mov	r0, r6
 800aa62:	f7ff ff47 	bl	800a8f4 <_Balloc>
 800aa66:	b940      	cbnz	r0, 800aa7a <__s2b+0x36>
 800aa68:	4602      	mov	r2, r0
 800aa6a:	4b19      	ldr	r3, [pc, #100]	@ (800aad0 <__s2b+0x8c>)
 800aa6c:	4819      	ldr	r0, [pc, #100]	@ (800aad4 <__s2b+0x90>)
 800aa6e:	21d3      	movs	r1, #211	@ 0xd3
 800aa70:	f001 fa28 	bl	800bec4 <__assert_func>
 800aa74:	0052      	lsls	r2, r2, #1
 800aa76:	3101      	adds	r1, #1
 800aa78:	e7f0      	b.n	800aa5c <__s2b+0x18>
 800aa7a:	9b08      	ldr	r3, [sp, #32]
 800aa7c:	6143      	str	r3, [r0, #20]
 800aa7e:	2d09      	cmp	r5, #9
 800aa80:	f04f 0301 	mov.w	r3, #1
 800aa84:	6103      	str	r3, [r0, #16]
 800aa86:	dd16      	ble.n	800aab6 <__s2b+0x72>
 800aa88:	f104 0909 	add.w	r9, r4, #9
 800aa8c:	46c8      	mov	r8, r9
 800aa8e:	442c      	add	r4, r5
 800aa90:	f818 3b01 	ldrb.w	r3, [r8], #1
 800aa94:	4601      	mov	r1, r0
 800aa96:	3b30      	subs	r3, #48	@ 0x30
 800aa98:	220a      	movs	r2, #10
 800aa9a:	4630      	mov	r0, r6
 800aa9c:	f7ff ff8c 	bl	800a9b8 <__multadd>
 800aaa0:	45a0      	cmp	r8, r4
 800aaa2:	d1f5      	bne.n	800aa90 <__s2b+0x4c>
 800aaa4:	f1a5 0408 	sub.w	r4, r5, #8
 800aaa8:	444c      	add	r4, r9
 800aaaa:	1b2d      	subs	r5, r5, r4
 800aaac:	1963      	adds	r3, r4, r5
 800aaae:	42bb      	cmp	r3, r7
 800aab0:	db04      	blt.n	800aabc <__s2b+0x78>
 800aab2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aab6:	340a      	adds	r4, #10
 800aab8:	2509      	movs	r5, #9
 800aaba:	e7f6      	b.n	800aaaa <__s2b+0x66>
 800aabc:	f814 3b01 	ldrb.w	r3, [r4], #1
 800aac0:	4601      	mov	r1, r0
 800aac2:	3b30      	subs	r3, #48	@ 0x30
 800aac4:	220a      	movs	r2, #10
 800aac6:	4630      	mov	r0, r6
 800aac8:	f7ff ff76 	bl	800a9b8 <__multadd>
 800aacc:	e7ee      	b.n	800aaac <__s2b+0x68>
 800aace:	bf00      	nop
 800aad0:	0800d5be 	.word	0x0800d5be
 800aad4:	0800d62f 	.word	0x0800d62f

0800aad8 <__hi0bits>:
 800aad8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800aadc:	4603      	mov	r3, r0
 800aade:	bf36      	itet	cc
 800aae0:	0403      	lslcc	r3, r0, #16
 800aae2:	2000      	movcs	r0, #0
 800aae4:	2010      	movcc	r0, #16
 800aae6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800aaea:	bf3c      	itt	cc
 800aaec:	021b      	lslcc	r3, r3, #8
 800aaee:	3008      	addcc	r0, #8
 800aaf0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800aaf4:	bf3c      	itt	cc
 800aaf6:	011b      	lslcc	r3, r3, #4
 800aaf8:	3004      	addcc	r0, #4
 800aafa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800aafe:	bf3c      	itt	cc
 800ab00:	009b      	lslcc	r3, r3, #2
 800ab02:	3002      	addcc	r0, #2
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	db05      	blt.n	800ab14 <__hi0bits+0x3c>
 800ab08:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800ab0c:	f100 0001 	add.w	r0, r0, #1
 800ab10:	bf08      	it	eq
 800ab12:	2020      	moveq	r0, #32
 800ab14:	4770      	bx	lr

0800ab16 <__lo0bits>:
 800ab16:	6803      	ldr	r3, [r0, #0]
 800ab18:	4602      	mov	r2, r0
 800ab1a:	f013 0007 	ands.w	r0, r3, #7
 800ab1e:	d00b      	beq.n	800ab38 <__lo0bits+0x22>
 800ab20:	07d9      	lsls	r1, r3, #31
 800ab22:	d421      	bmi.n	800ab68 <__lo0bits+0x52>
 800ab24:	0798      	lsls	r0, r3, #30
 800ab26:	bf49      	itett	mi
 800ab28:	085b      	lsrmi	r3, r3, #1
 800ab2a:	089b      	lsrpl	r3, r3, #2
 800ab2c:	2001      	movmi	r0, #1
 800ab2e:	6013      	strmi	r3, [r2, #0]
 800ab30:	bf5c      	itt	pl
 800ab32:	6013      	strpl	r3, [r2, #0]
 800ab34:	2002      	movpl	r0, #2
 800ab36:	4770      	bx	lr
 800ab38:	b299      	uxth	r1, r3
 800ab3a:	b909      	cbnz	r1, 800ab40 <__lo0bits+0x2a>
 800ab3c:	0c1b      	lsrs	r3, r3, #16
 800ab3e:	2010      	movs	r0, #16
 800ab40:	b2d9      	uxtb	r1, r3
 800ab42:	b909      	cbnz	r1, 800ab48 <__lo0bits+0x32>
 800ab44:	3008      	adds	r0, #8
 800ab46:	0a1b      	lsrs	r3, r3, #8
 800ab48:	0719      	lsls	r1, r3, #28
 800ab4a:	bf04      	itt	eq
 800ab4c:	091b      	lsreq	r3, r3, #4
 800ab4e:	3004      	addeq	r0, #4
 800ab50:	0799      	lsls	r1, r3, #30
 800ab52:	bf04      	itt	eq
 800ab54:	089b      	lsreq	r3, r3, #2
 800ab56:	3002      	addeq	r0, #2
 800ab58:	07d9      	lsls	r1, r3, #31
 800ab5a:	d403      	bmi.n	800ab64 <__lo0bits+0x4e>
 800ab5c:	085b      	lsrs	r3, r3, #1
 800ab5e:	f100 0001 	add.w	r0, r0, #1
 800ab62:	d003      	beq.n	800ab6c <__lo0bits+0x56>
 800ab64:	6013      	str	r3, [r2, #0]
 800ab66:	4770      	bx	lr
 800ab68:	2000      	movs	r0, #0
 800ab6a:	4770      	bx	lr
 800ab6c:	2020      	movs	r0, #32
 800ab6e:	4770      	bx	lr

0800ab70 <__i2b>:
 800ab70:	b510      	push	{r4, lr}
 800ab72:	460c      	mov	r4, r1
 800ab74:	2101      	movs	r1, #1
 800ab76:	f7ff febd 	bl	800a8f4 <_Balloc>
 800ab7a:	4602      	mov	r2, r0
 800ab7c:	b928      	cbnz	r0, 800ab8a <__i2b+0x1a>
 800ab7e:	4b05      	ldr	r3, [pc, #20]	@ (800ab94 <__i2b+0x24>)
 800ab80:	4805      	ldr	r0, [pc, #20]	@ (800ab98 <__i2b+0x28>)
 800ab82:	f240 1145 	movw	r1, #325	@ 0x145
 800ab86:	f001 f99d 	bl	800bec4 <__assert_func>
 800ab8a:	2301      	movs	r3, #1
 800ab8c:	6144      	str	r4, [r0, #20]
 800ab8e:	6103      	str	r3, [r0, #16]
 800ab90:	bd10      	pop	{r4, pc}
 800ab92:	bf00      	nop
 800ab94:	0800d5be 	.word	0x0800d5be
 800ab98:	0800d62f 	.word	0x0800d62f

0800ab9c <__multiply>:
 800ab9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aba0:	4614      	mov	r4, r2
 800aba2:	690a      	ldr	r2, [r1, #16]
 800aba4:	6923      	ldr	r3, [r4, #16]
 800aba6:	429a      	cmp	r2, r3
 800aba8:	bfa8      	it	ge
 800abaa:	4623      	movge	r3, r4
 800abac:	460f      	mov	r7, r1
 800abae:	bfa4      	itt	ge
 800abb0:	460c      	movge	r4, r1
 800abb2:	461f      	movge	r7, r3
 800abb4:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800abb8:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800abbc:	68a3      	ldr	r3, [r4, #8]
 800abbe:	6861      	ldr	r1, [r4, #4]
 800abc0:	eb0a 0609 	add.w	r6, sl, r9
 800abc4:	42b3      	cmp	r3, r6
 800abc6:	b085      	sub	sp, #20
 800abc8:	bfb8      	it	lt
 800abca:	3101      	addlt	r1, #1
 800abcc:	f7ff fe92 	bl	800a8f4 <_Balloc>
 800abd0:	b930      	cbnz	r0, 800abe0 <__multiply+0x44>
 800abd2:	4602      	mov	r2, r0
 800abd4:	4b44      	ldr	r3, [pc, #272]	@ (800ace8 <__multiply+0x14c>)
 800abd6:	4845      	ldr	r0, [pc, #276]	@ (800acec <__multiply+0x150>)
 800abd8:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800abdc:	f001 f972 	bl	800bec4 <__assert_func>
 800abe0:	f100 0514 	add.w	r5, r0, #20
 800abe4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800abe8:	462b      	mov	r3, r5
 800abea:	2200      	movs	r2, #0
 800abec:	4543      	cmp	r3, r8
 800abee:	d321      	bcc.n	800ac34 <__multiply+0x98>
 800abf0:	f107 0114 	add.w	r1, r7, #20
 800abf4:	f104 0214 	add.w	r2, r4, #20
 800abf8:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800abfc:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800ac00:	9302      	str	r3, [sp, #8]
 800ac02:	1b13      	subs	r3, r2, r4
 800ac04:	3b15      	subs	r3, #21
 800ac06:	f023 0303 	bic.w	r3, r3, #3
 800ac0a:	3304      	adds	r3, #4
 800ac0c:	f104 0715 	add.w	r7, r4, #21
 800ac10:	42ba      	cmp	r2, r7
 800ac12:	bf38      	it	cc
 800ac14:	2304      	movcc	r3, #4
 800ac16:	9301      	str	r3, [sp, #4]
 800ac18:	9b02      	ldr	r3, [sp, #8]
 800ac1a:	9103      	str	r1, [sp, #12]
 800ac1c:	428b      	cmp	r3, r1
 800ac1e:	d80c      	bhi.n	800ac3a <__multiply+0x9e>
 800ac20:	2e00      	cmp	r6, #0
 800ac22:	dd03      	ble.n	800ac2c <__multiply+0x90>
 800ac24:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	d05b      	beq.n	800ace4 <__multiply+0x148>
 800ac2c:	6106      	str	r6, [r0, #16]
 800ac2e:	b005      	add	sp, #20
 800ac30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac34:	f843 2b04 	str.w	r2, [r3], #4
 800ac38:	e7d8      	b.n	800abec <__multiply+0x50>
 800ac3a:	f8b1 a000 	ldrh.w	sl, [r1]
 800ac3e:	f1ba 0f00 	cmp.w	sl, #0
 800ac42:	d024      	beq.n	800ac8e <__multiply+0xf2>
 800ac44:	f104 0e14 	add.w	lr, r4, #20
 800ac48:	46a9      	mov	r9, r5
 800ac4a:	f04f 0c00 	mov.w	ip, #0
 800ac4e:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ac52:	f8d9 3000 	ldr.w	r3, [r9]
 800ac56:	fa1f fb87 	uxth.w	fp, r7
 800ac5a:	b29b      	uxth	r3, r3
 800ac5c:	fb0a 330b 	mla	r3, sl, fp, r3
 800ac60:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800ac64:	f8d9 7000 	ldr.w	r7, [r9]
 800ac68:	4463      	add	r3, ip
 800ac6a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800ac6e:	fb0a c70b 	mla	r7, sl, fp, ip
 800ac72:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800ac76:	b29b      	uxth	r3, r3
 800ac78:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800ac7c:	4572      	cmp	r2, lr
 800ac7e:	f849 3b04 	str.w	r3, [r9], #4
 800ac82:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800ac86:	d8e2      	bhi.n	800ac4e <__multiply+0xb2>
 800ac88:	9b01      	ldr	r3, [sp, #4]
 800ac8a:	f845 c003 	str.w	ip, [r5, r3]
 800ac8e:	9b03      	ldr	r3, [sp, #12]
 800ac90:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800ac94:	3104      	adds	r1, #4
 800ac96:	f1b9 0f00 	cmp.w	r9, #0
 800ac9a:	d021      	beq.n	800ace0 <__multiply+0x144>
 800ac9c:	682b      	ldr	r3, [r5, #0]
 800ac9e:	f104 0c14 	add.w	ip, r4, #20
 800aca2:	46ae      	mov	lr, r5
 800aca4:	f04f 0a00 	mov.w	sl, #0
 800aca8:	f8bc b000 	ldrh.w	fp, [ip]
 800acac:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800acb0:	fb09 770b 	mla	r7, r9, fp, r7
 800acb4:	4457      	add	r7, sl
 800acb6:	b29b      	uxth	r3, r3
 800acb8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800acbc:	f84e 3b04 	str.w	r3, [lr], #4
 800acc0:	f85c 3b04 	ldr.w	r3, [ip], #4
 800acc4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800acc8:	f8be 3000 	ldrh.w	r3, [lr]
 800accc:	fb09 330a 	mla	r3, r9, sl, r3
 800acd0:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800acd4:	4562      	cmp	r2, ip
 800acd6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800acda:	d8e5      	bhi.n	800aca8 <__multiply+0x10c>
 800acdc:	9f01      	ldr	r7, [sp, #4]
 800acde:	51eb      	str	r3, [r5, r7]
 800ace0:	3504      	adds	r5, #4
 800ace2:	e799      	b.n	800ac18 <__multiply+0x7c>
 800ace4:	3e01      	subs	r6, #1
 800ace6:	e79b      	b.n	800ac20 <__multiply+0x84>
 800ace8:	0800d5be 	.word	0x0800d5be
 800acec:	0800d62f 	.word	0x0800d62f

0800acf0 <__pow5mult>:
 800acf0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800acf4:	4615      	mov	r5, r2
 800acf6:	f012 0203 	ands.w	r2, r2, #3
 800acfa:	4607      	mov	r7, r0
 800acfc:	460e      	mov	r6, r1
 800acfe:	d007      	beq.n	800ad10 <__pow5mult+0x20>
 800ad00:	4c25      	ldr	r4, [pc, #148]	@ (800ad98 <__pow5mult+0xa8>)
 800ad02:	3a01      	subs	r2, #1
 800ad04:	2300      	movs	r3, #0
 800ad06:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ad0a:	f7ff fe55 	bl	800a9b8 <__multadd>
 800ad0e:	4606      	mov	r6, r0
 800ad10:	10ad      	asrs	r5, r5, #2
 800ad12:	d03d      	beq.n	800ad90 <__pow5mult+0xa0>
 800ad14:	69fc      	ldr	r4, [r7, #28]
 800ad16:	b97c      	cbnz	r4, 800ad38 <__pow5mult+0x48>
 800ad18:	2010      	movs	r0, #16
 800ad1a:	f7fc f8d7 	bl	8006ecc <malloc>
 800ad1e:	4602      	mov	r2, r0
 800ad20:	61f8      	str	r0, [r7, #28]
 800ad22:	b928      	cbnz	r0, 800ad30 <__pow5mult+0x40>
 800ad24:	4b1d      	ldr	r3, [pc, #116]	@ (800ad9c <__pow5mult+0xac>)
 800ad26:	481e      	ldr	r0, [pc, #120]	@ (800ada0 <__pow5mult+0xb0>)
 800ad28:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800ad2c:	f001 f8ca 	bl	800bec4 <__assert_func>
 800ad30:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ad34:	6004      	str	r4, [r0, #0]
 800ad36:	60c4      	str	r4, [r0, #12]
 800ad38:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800ad3c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ad40:	b94c      	cbnz	r4, 800ad56 <__pow5mult+0x66>
 800ad42:	f240 2171 	movw	r1, #625	@ 0x271
 800ad46:	4638      	mov	r0, r7
 800ad48:	f7ff ff12 	bl	800ab70 <__i2b>
 800ad4c:	2300      	movs	r3, #0
 800ad4e:	f8c8 0008 	str.w	r0, [r8, #8]
 800ad52:	4604      	mov	r4, r0
 800ad54:	6003      	str	r3, [r0, #0]
 800ad56:	f04f 0900 	mov.w	r9, #0
 800ad5a:	07eb      	lsls	r3, r5, #31
 800ad5c:	d50a      	bpl.n	800ad74 <__pow5mult+0x84>
 800ad5e:	4631      	mov	r1, r6
 800ad60:	4622      	mov	r2, r4
 800ad62:	4638      	mov	r0, r7
 800ad64:	f7ff ff1a 	bl	800ab9c <__multiply>
 800ad68:	4631      	mov	r1, r6
 800ad6a:	4680      	mov	r8, r0
 800ad6c:	4638      	mov	r0, r7
 800ad6e:	f7ff fe01 	bl	800a974 <_Bfree>
 800ad72:	4646      	mov	r6, r8
 800ad74:	106d      	asrs	r5, r5, #1
 800ad76:	d00b      	beq.n	800ad90 <__pow5mult+0xa0>
 800ad78:	6820      	ldr	r0, [r4, #0]
 800ad7a:	b938      	cbnz	r0, 800ad8c <__pow5mult+0x9c>
 800ad7c:	4622      	mov	r2, r4
 800ad7e:	4621      	mov	r1, r4
 800ad80:	4638      	mov	r0, r7
 800ad82:	f7ff ff0b 	bl	800ab9c <__multiply>
 800ad86:	6020      	str	r0, [r4, #0]
 800ad88:	f8c0 9000 	str.w	r9, [r0]
 800ad8c:	4604      	mov	r4, r0
 800ad8e:	e7e4      	b.n	800ad5a <__pow5mult+0x6a>
 800ad90:	4630      	mov	r0, r6
 800ad92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ad96:	bf00      	nop
 800ad98:	0800d688 	.word	0x0800d688
 800ad9c:	0800d54f 	.word	0x0800d54f
 800ada0:	0800d62f 	.word	0x0800d62f

0800ada4 <__lshift>:
 800ada4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ada8:	460c      	mov	r4, r1
 800adaa:	6849      	ldr	r1, [r1, #4]
 800adac:	6923      	ldr	r3, [r4, #16]
 800adae:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800adb2:	68a3      	ldr	r3, [r4, #8]
 800adb4:	4607      	mov	r7, r0
 800adb6:	4691      	mov	r9, r2
 800adb8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800adbc:	f108 0601 	add.w	r6, r8, #1
 800adc0:	42b3      	cmp	r3, r6
 800adc2:	db0b      	blt.n	800addc <__lshift+0x38>
 800adc4:	4638      	mov	r0, r7
 800adc6:	f7ff fd95 	bl	800a8f4 <_Balloc>
 800adca:	4605      	mov	r5, r0
 800adcc:	b948      	cbnz	r0, 800ade2 <__lshift+0x3e>
 800adce:	4602      	mov	r2, r0
 800add0:	4b28      	ldr	r3, [pc, #160]	@ (800ae74 <__lshift+0xd0>)
 800add2:	4829      	ldr	r0, [pc, #164]	@ (800ae78 <__lshift+0xd4>)
 800add4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800add8:	f001 f874 	bl	800bec4 <__assert_func>
 800addc:	3101      	adds	r1, #1
 800adde:	005b      	lsls	r3, r3, #1
 800ade0:	e7ee      	b.n	800adc0 <__lshift+0x1c>
 800ade2:	2300      	movs	r3, #0
 800ade4:	f100 0114 	add.w	r1, r0, #20
 800ade8:	f100 0210 	add.w	r2, r0, #16
 800adec:	4618      	mov	r0, r3
 800adee:	4553      	cmp	r3, sl
 800adf0:	db33      	blt.n	800ae5a <__lshift+0xb6>
 800adf2:	6920      	ldr	r0, [r4, #16]
 800adf4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800adf8:	f104 0314 	add.w	r3, r4, #20
 800adfc:	f019 091f 	ands.w	r9, r9, #31
 800ae00:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ae04:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ae08:	d02b      	beq.n	800ae62 <__lshift+0xbe>
 800ae0a:	f1c9 0e20 	rsb	lr, r9, #32
 800ae0e:	468a      	mov	sl, r1
 800ae10:	2200      	movs	r2, #0
 800ae12:	6818      	ldr	r0, [r3, #0]
 800ae14:	fa00 f009 	lsl.w	r0, r0, r9
 800ae18:	4310      	orrs	r0, r2
 800ae1a:	f84a 0b04 	str.w	r0, [sl], #4
 800ae1e:	f853 2b04 	ldr.w	r2, [r3], #4
 800ae22:	459c      	cmp	ip, r3
 800ae24:	fa22 f20e 	lsr.w	r2, r2, lr
 800ae28:	d8f3      	bhi.n	800ae12 <__lshift+0x6e>
 800ae2a:	ebac 0304 	sub.w	r3, ip, r4
 800ae2e:	3b15      	subs	r3, #21
 800ae30:	f023 0303 	bic.w	r3, r3, #3
 800ae34:	3304      	adds	r3, #4
 800ae36:	f104 0015 	add.w	r0, r4, #21
 800ae3a:	4584      	cmp	ip, r0
 800ae3c:	bf38      	it	cc
 800ae3e:	2304      	movcc	r3, #4
 800ae40:	50ca      	str	r2, [r1, r3]
 800ae42:	b10a      	cbz	r2, 800ae48 <__lshift+0xa4>
 800ae44:	f108 0602 	add.w	r6, r8, #2
 800ae48:	3e01      	subs	r6, #1
 800ae4a:	4638      	mov	r0, r7
 800ae4c:	612e      	str	r6, [r5, #16]
 800ae4e:	4621      	mov	r1, r4
 800ae50:	f7ff fd90 	bl	800a974 <_Bfree>
 800ae54:	4628      	mov	r0, r5
 800ae56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ae5a:	f842 0f04 	str.w	r0, [r2, #4]!
 800ae5e:	3301      	adds	r3, #1
 800ae60:	e7c5      	b.n	800adee <__lshift+0x4a>
 800ae62:	3904      	subs	r1, #4
 800ae64:	f853 2b04 	ldr.w	r2, [r3], #4
 800ae68:	f841 2f04 	str.w	r2, [r1, #4]!
 800ae6c:	459c      	cmp	ip, r3
 800ae6e:	d8f9      	bhi.n	800ae64 <__lshift+0xc0>
 800ae70:	e7ea      	b.n	800ae48 <__lshift+0xa4>
 800ae72:	bf00      	nop
 800ae74:	0800d5be 	.word	0x0800d5be
 800ae78:	0800d62f 	.word	0x0800d62f

0800ae7c <__mcmp>:
 800ae7c:	690a      	ldr	r2, [r1, #16]
 800ae7e:	4603      	mov	r3, r0
 800ae80:	6900      	ldr	r0, [r0, #16]
 800ae82:	1a80      	subs	r0, r0, r2
 800ae84:	b530      	push	{r4, r5, lr}
 800ae86:	d10e      	bne.n	800aea6 <__mcmp+0x2a>
 800ae88:	3314      	adds	r3, #20
 800ae8a:	3114      	adds	r1, #20
 800ae8c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800ae90:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800ae94:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800ae98:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800ae9c:	4295      	cmp	r5, r2
 800ae9e:	d003      	beq.n	800aea8 <__mcmp+0x2c>
 800aea0:	d205      	bcs.n	800aeae <__mcmp+0x32>
 800aea2:	f04f 30ff 	mov.w	r0, #4294967295
 800aea6:	bd30      	pop	{r4, r5, pc}
 800aea8:	42a3      	cmp	r3, r4
 800aeaa:	d3f3      	bcc.n	800ae94 <__mcmp+0x18>
 800aeac:	e7fb      	b.n	800aea6 <__mcmp+0x2a>
 800aeae:	2001      	movs	r0, #1
 800aeb0:	e7f9      	b.n	800aea6 <__mcmp+0x2a>
	...

0800aeb4 <__mdiff>:
 800aeb4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aeb8:	4689      	mov	r9, r1
 800aeba:	4606      	mov	r6, r0
 800aebc:	4611      	mov	r1, r2
 800aebe:	4648      	mov	r0, r9
 800aec0:	4614      	mov	r4, r2
 800aec2:	f7ff ffdb 	bl	800ae7c <__mcmp>
 800aec6:	1e05      	subs	r5, r0, #0
 800aec8:	d112      	bne.n	800aef0 <__mdiff+0x3c>
 800aeca:	4629      	mov	r1, r5
 800aecc:	4630      	mov	r0, r6
 800aece:	f7ff fd11 	bl	800a8f4 <_Balloc>
 800aed2:	4602      	mov	r2, r0
 800aed4:	b928      	cbnz	r0, 800aee2 <__mdiff+0x2e>
 800aed6:	4b3f      	ldr	r3, [pc, #252]	@ (800afd4 <__mdiff+0x120>)
 800aed8:	f240 2137 	movw	r1, #567	@ 0x237
 800aedc:	483e      	ldr	r0, [pc, #248]	@ (800afd8 <__mdiff+0x124>)
 800aede:	f000 fff1 	bl	800bec4 <__assert_func>
 800aee2:	2301      	movs	r3, #1
 800aee4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800aee8:	4610      	mov	r0, r2
 800aeea:	b003      	add	sp, #12
 800aeec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aef0:	bfbc      	itt	lt
 800aef2:	464b      	movlt	r3, r9
 800aef4:	46a1      	movlt	r9, r4
 800aef6:	4630      	mov	r0, r6
 800aef8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800aefc:	bfba      	itte	lt
 800aefe:	461c      	movlt	r4, r3
 800af00:	2501      	movlt	r5, #1
 800af02:	2500      	movge	r5, #0
 800af04:	f7ff fcf6 	bl	800a8f4 <_Balloc>
 800af08:	4602      	mov	r2, r0
 800af0a:	b918      	cbnz	r0, 800af14 <__mdiff+0x60>
 800af0c:	4b31      	ldr	r3, [pc, #196]	@ (800afd4 <__mdiff+0x120>)
 800af0e:	f240 2145 	movw	r1, #581	@ 0x245
 800af12:	e7e3      	b.n	800aedc <__mdiff+0x28>
 800af14:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800af18:	6926      	ldr	r6, [r4, #16]
 800af1a:	60c5      	str	r5, [r0, #12]
 800af1c:	f109 0310 	add.w	r3, r9, #16
 800af20:	f109 0514 	add.w	r5, r9, #20
 800af24:	f104 0e14 	add.w	lr, r4, #20
 800af28:	f100 0b14 	add.w	fp, r0, #20
 800af2c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800af30:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800af34:	9301      	str	r3, [sp, #4]
 800af36:	46d9      	mov	r9, fp
 800af38:	f04f 0c00 	mov.w	ip, #0
 800af3c:	9b01      	ldr	r3, [sp, #4]
 800af3e:	f85e 0b04 	ldr.w	r0, [lr], #4
 800af42:	f853 af04 	ldr.w	sl, [r3, #4]!
 800af46:	9301      	str	r3, [sp, #4]
 800af48:	fa1f f38a 	uxth.w	r3, sl
 800af4c:	4619      	mov	r1, r3
 800af4e:	b283      	uxth	r3, r0
 800af50:	1acb      	subs	r3, r1, r3
 800af52:	0c00      	lsrs	r0, r0, #16
 800af54:	4463      	add	r3, ip
 800af56:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800af5a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800af5e:	b29b      	uxth	r3, r3
 800af60:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800af64:	4576      	cmp	r6, lr
 800af66:	f849 3b04 	str.w	r3, [r9], #4
 800af6a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800af6e:	d8e5      	bhi.n	800af3c <__mdiff+0x88>
 800af70:	1b33      	subs	r3, r6, r4
 800af72:	3b15      	subs	r3, #21
 800af74:	f023 0303 	bic.w	r3, r3, #3
 800af78:	3415      	adds	r4, #21
 800af7a:	3304      	adds	r3, #4
 800af7c:	42a6      	cmp	r6, r4
 800af7e:	bf38      	it	cc
 800af80:	2304      	movcc	r3, #4
 800af82:	441d      	add	r5, r3
 800af84:	445b      	add	r3, fp
 800af86:	461e      	mov	r6, r3
 800af88:	462c      	mov	r4, r5
 800af8a:	4544      	cmp	r4, r8
 800af8c:	d30e      	bcc.n	800afac <__mdiff+0xf8>
 800af8e:	f108 0103 	add.w	r1, r8, #3
 800af92:	1b49      	subs	r1, r1, r5
 800af94:	f021 0103 	bic.w	r1, r1, #3
 800af98:	3d03      	subs	r5, #3
 800af9a:	45a8      	cmp	r8, r5
 800af9c:	bf38      	it	cc
 800af9e:	2100      	movcc	r1, #0
 800afa0:	440b      	add	r3, r1
 800afa2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800afa6:	b191      	cbz	r1, 800afce <__mdiff+0x11a>
 800afa8:	6117      	str	r7, [r2, #16]
 800afaa:	e79d      	b.n	800aee8 <__mdiff+0x34>
 800afac:	f854 1b04 	ldr.w	r1, [r4], #4
 800afb0:	46e6      	mov	lr, ip
 800afb2:	0c08      	lsrs	r0, r1, #16
 800afb4:	fa1c fc81 	uxtah	ip, ip, r1
 800afb8:	4471      	add	r1, lr
 800afba:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800afbe:	b289      	uxth	r1, r1
 800afc0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800afc4:	f846 1b04 	str.w	r1, [r6], #4
 800afc8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800afcc:	e7dd      	b.n	800af8a <__mdiff+0xd6>
 800afce:	3f01      	subs	r7, #1
 800afd0:	e7e7      	b.n	800afa2 <__mdiff+0xee>
 800afd2:	bf00      	nop
 800afd4:	0800d5be 	.word	0x0800d5be
 800afd8:	0800d62f 	.word	0x0800d62f

0800afdc <__ulp>:
 800afdc:	b082      	sub	sp, #8
 800afde:	ed8d 0b00 	vstr	d0, [sp]
 800afe2:	9a01      	ldr	r2, [sp, #4]
 800afe4:	4b0f      	ldr	r3, [pc, #60]	@ (800b024 <__ulp+0x48>)
 800afe6:	4013      	ands	r3, r2
 800afe8:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800afec:	2b00      	cmp	r3, #0
 800afee:	dc08      	bgt.n	800b002 <__ulp+0x26>
 800aff0:	425b      	negs	r3, r3
 800aff2:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800aff6:	ea4f 5223 	mov.w	r2, r3, asr #20
 800affa:	da04      	bge.n	800b006 <__ulp+0x2a>
 800affc:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800b000:	4113      	asrs	r3, r2
 800b002:	2200      	movs	r2, #0
 800b004:	e008      	b.n	800b018 <__ulp+0x3c>
 800b006:	f1a2 0314 	sub.w	r3, r2, #20
 800b00a:	2b1e      	cmp	r3, #30
 800b00c:	bfda      	itte	le
 800b00e:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800b012:	40da      	lsrle	r2, r3
 800b014:	2201      	movgt	r2, #1
 800b016:	2300      	movs	r3, #0
 800b018:	4619      	mov	r1, r3
 800b01a:	4610      	mov	r0, r2
 800b01c:	ec41 0b10 	vmov	d0, r0, r1
 800b020:	b002      	add	sp, #8
 800b022:	4770      	bx	lr
 800b024:	7ff00000 	.word	0x7ff00000

0800b028 <__b2d>:
 800b028:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b02c:	6906      	ldr	r6, [r0, #16]
 800b02e:	f100 0814 	add.w	r8, r0, #20
 800b032:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800b036:	1f37      	subs	r7, r6, #4
 800b038:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800b03c:	4610      	mov	r0, r2
 800b03e:	f7ff fd4b 	bl	800aad8 <__hi0bits>
 800b042:	f1c0 0320 	rsb	r3, r0, #32
 800b046:	280a      	cmp	r0, #10
 800b048:	600b      	str	r3, [r1, #0]
 800b04a:	491b      	ldr	r1, [pc, #108]	@ (800b0b8 <__b2d+0x90>)
 800b04c:	dc15      	bgt.n	800b07a <__b2d+0x52>
 800b04e:	f1c0 0c0b 	rsb	ip, r0, #11
 800b052:	fa22 f30c 	lsr.w	r3, r2, ip
 800b056:	45b8      	cmp	r8, r7
 800b058:	ea43 0501 	orr.w	r5, r3, r1
 800b05c:	bf34      	ite	cc
 800b05e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800b062:	2300      	movcs	r3, #0
 800b064:	3015      	adds	r0, #21
 800b066:	fa02 f000 	lsl.w	r0, r2, r0
 800b06a:	fa23 f30c 	lsr.w	r3, r3, ip
 800b06e:	4303      	orrs	r3, r0
 800b070:	461c      	mov	r4, r3
 800b072:	ec45 4b10 	vmov	d0, r4, r5
 800b076:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b07a:	45b8      	cmp	r8, r7
 800b07c:	bf3a      	itte	cc
 800b07e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800b082:	f1a6 0708 	subcc.w	r7, r6, #8
 800b086:	2300      	movcs	r3, #0
 800b088:	380b      	subs	r0, #11
 800b08a:	d012      	beq.n	800b0b2 <__b2d+0x8a>
 800b08c:	f1c0 0120 	rsb	r1, r0, #32
 800b090:	fa23 f401 	lsr.w	r4, r3, r1
 800b094:	4082      	lsls	r2, r0
 800b096:	4322      	orrs	r2, r4
 800b098:	4547      	cmp	r7, r8
 800b09a:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800b09e:	bf8c      	ite	hi
 800b0a0:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800b0a4:	2200      	movls	r2, #0
 800b0a6:	4083      	lsls	r3, r0
 800b0a8:	40ca      	lsrs	r2, r1
 800b0aa:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800b0ae:	4313      	orrs	r3, r2
 800b0b0:	e7de      	b.n	800b070 <__b2d+0x48>
 800b0b2:	ea42 0501 	orr.w	r5, r2, r1
 800b0b6:	e7db      	b.n	800b070 <__b2d+0x48>
 800b0b8:	3ff00000 	.word	0x3ff00000

0800b0bc <__d2b>:
 800b0bc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b0c0:	460f      	mov	r7, r1
 800b0c2:	2101      	movs	r1, #1
 800b0c4:	ec59 8b10 	vmov	r8, r9, d0
 800b0c8:	4616      	mov	r6, r2
 800b0ca:	f7ff fc13 	bl	800a8f4 <_Balloc>
 800b0ce:	4604      	mov	r4, r0
 800b0d0:	b930      	cbnz	r0, 800b0e0 <__d2b+0x24>
 800b0d2:	4602      	mov	r2, r0
 800b0d4:	4b23      	ldr	r3, [pc, #140]	@ (800b164 <__d2b+0xa8>)
 800b0d6:	4824      	ldr	r0, [pc, #144]	@ (800b168 <__d2b+0xac>)
 800b0d8:	f240 310f 	movw	r1, #783	@ 0x30f
 800b0dc:	f000 fef2 	bl	800bec4 <__assert_func>
 800b0e0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b0e4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b0e8:	b10d      	cbz	r5, 800b0ee <__d2b+0x32>
 800b0ea:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b0ee:	9301      	str	r3, [sp, #4]
 800b0f0:	f1b8 0300 	subs.w	r3, r8, #0
 800b0f4:	d023      	beq.n	800b13e <__d2b+0x82>
 800b0f6:	4668      	mov	r0, sp
 800b0f8:	9300      	str	r3, [sp, #0]
 800b0fa:	f7ff fd0c 	bl	800ab16 <__lo0bits>
 800b0fe:	e9dd 1200 	ldrd	r1, r2, [sp]
 800b102:	b1d0      	cbz	r0, 800b13a <__d2b+0x7e>
 800b104:	f1c0 0320 	rsb	r3, r0, #32
 800b108:	fa02 f303 	lsl.w	r3, r2, r3
 800b10c:	430b      	orrs	r3, r1
 800b10e:	40c2      	lsrs	r2, r0
 800b110:	6163      	str	r3, [r4, #20]
 800b112:	9201      	str	r2, [sp, #4]
 800b114:	9b01      	ldr	r3, [sp, #4]
 800b116:	61a3      	str	r3, [r4, #24]
 800b118:	2b00      	cmp	r3, #0
 800b11a:	bf0c      	ite	eq
 800b11c:	2201      	moveq	r2, #1
 800b11e:	2202      	movne	r2, #2
 800b120:	6122      	str	r2, [r4, #16]
 800b122:	b1a5      	cbz	r5, 800b14e <__d2b+0x92>
 800b124:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800b128:	4405      	add	r5, r0
 800b12a:	603d      	str	r5, [r7, #0]
 800b12c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800b130:	6030      	str	r0, [r6, #0]
 800b132:	4620      	mov	r0, r4
 800b134:	b003      	add	sp, #12
 800b136:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b13a:	6161      	str	r1, [r4, #20]
 800b13c:	e7ea      	b.n	800b114 <__d2b+0x58>
 800b13e:	a801      	add	r0, sp, #4
 800b140:	f7ff fce9 	bl	800ab16 <__lo0bits>
 800b144:	9b01      	ldr	r3, [sp, #4]
 800b146:	6163      	str	r3, [r4, #20]
 800b148:	3020      	adds	r0, #32
 800b14a:	2201      	movs	r2, #1
 800b14c:	e7e8      	b.n	800b120 <__d2b+0x64>
 800b14e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b152:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800b156:	6038      	str	r0, [r7, #0]
 800b158:	6918      	ldr	r0, [r3, #16]
 800b15a:	f7ff fcbd 	bl	800aad8 <__hi0bits>
 800b15e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b162:	e7e5      	b.n	800b130 <__d2b+0x74>
 800b164:	0800d5be 	.word	0x0800d5be
 800b168:	0800d62f 	.word	0x0800d62f

0800b16c <__ratio>:
 800b16c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b170:	b085      	sub	sp, #20
 800b172:	e9cd 1000 	strd	r1, r0, [sp]
 800b176:	a902      	add	r1, sp, #8
 800b178:	f7ff ff56 	bl	800b028 <__b2d>
 800b17c:	9800      	ldr	r0, [sp, #0]
 800b17e:	a903      	add	r1, sp, #12
 800b180:	ec55 4b10 	vmov	r4, r5, d0
 800b184:	f7ff ff50 	bl	800b028 <__b2d>
 800b188:	9b01      	ldr	r3, [sp, #4]
 800b18a:	6919      	ldr	r1, [r3, #16]
 800b18c:	9b00      	ldr	r3, [sp, #0]
 800b18e:	691b      	ldr	r3, [r3, #16]
 800b190:	1ac9      	subs	r1, r1, r3
 800b192:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800b196:	1a9b      	subs	r3, r3, r2
 800b198:	ec5b ab10 	vmov	sl, fp, d0
 800b19c:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800b1a0:	2b00      	cmp	r3, #0
 800b1a2:	bfce      	itee	gt
 800b1a4:	462a      	movgt	r2, r5
 800b1a6:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800b1aa:	465a      	movle	r2, fp
 800b1ac:	462f      	mov	r7, r5
 800b1ae:	46d9      	mov	r9, fp
 800b1b0:	bfcc      	ite	gt
 800b1b2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800b1b6:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800b1ba:	464b      	mov	r3, r9
 800b1bc:	4652      	mov	r2, sl
 800b1be:	4620      	mov	r0, r4
 800b1c0:	4639      	mov	r1, r7
 800b1c2:	f7f5 fb53 	bl	800086c <__aeabi_ddiv>
 800b1c6:	ec41 0b10 	vmov	d0, r0, r1
 800b1ca:	b005      	add	sp, #20
 800b1cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b1d0 <__copybits>:
 800b1d0:	3901      	subs	r1, #1
 800b1d2:	b570      	push	{r4, r5, r6, lr}
 800b1d4:	1149      	asrs	r1, r1, #5
 800b1d6:	6914      	ldr	r4, [r2, #16]
 800b1d8:	3101      	adds	r1, #1
 800b1da:	f102 0314 	add.w	r3, r2, #20
 800b1de:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b1e2:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b1e6:	1f05      	subs	r5, r0, #4
 800b1e8:	42a3      	cmp	r3, r4
 800b1ea:	d30c      	bcc.n	800b206 <__copybits+0x36>
 800b1ec:	1aa3      	subs	r3, r4, r2
 800b1ee:	3b11      	subs	r3, #17
 800b1f0:	f023 0303 	bic.w	r3, r3, #3
 800b1f4:	3211      	adds	r2, #17
 800b1f6:	42a2      	cmp	r2, r4
 800b1f8:	bf88      	it	hi
 800b1fa:	2300      	movhi	r3, #0
 800b1fc:	4418      	add	r0, r3
 800b1fe:	2300      	movs	r3, #0
 800b200:	4288      	cmp	r0, r1
 800b202:	d305      	bcc.n	800b210 <__copybits+0x40>
 800b204:	bd70      	pop	{r4, r5, r6, pc}
 800b206:	f853 6b04 	ldr.w	r6, [r3], #4
 800b20a:	f845 6f04 	str.w	r6, [r5, #4]!
 800b20e:	e7eb      	b.n	800b1e8 <__copybits+0x18>
 800b210:	f840 3b04 	str.w	r3, [r0], #4
 800b214:	e7f4      	b.n	800b200 <__copybits+0x30>

0800b216 <__any_on>:
 800b216:	f100 0214 	add.w	r2, r0, #20
 800b21a:	6900      	ldr	r0, [r0, #16]
 800b21c:	114b      	asrs	r3, r1, #5
 800b21e:	4298      	cmp	r0, r3
 800b220:	b510      	push	{r4, lr}
 800b222:	db11      	blt.n	800b248 <__any_on+0x32>
 800b224:	dd0a      	ble.n	800b23c <__any_on+0x26>
 800b226:	f011 011f 	ands.w	r1, r1, #31
 800b22a:	d007      	beq.n	800b23c <__any_on+0x26>
 800b22c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800b230:	fa24 f001 	lsr.w	r0, r4, r1
 800b234:	fa00 f101 	lsl.w	r1, r0, r1
 800b238:	428c      	cmp	r4, r1
 800b23a:	d10b      	bne.n	800b254 <__any_on+0x3e>
 800b23c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b240:	4293      	cmp	r3, r2
 800b242:	d803      	bhi.n	800b24c <__any_on+0x36>
 800b244:	2000      	movs	r0, #0
 800b246:	bd10      	pop	{r4, pc}
 800b248:	4603      	mov	r3, r0
 800b24a:	e7f7      	b.n	800b23c <__any_on+0x26>
 800b24c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b250:	2900      	cmp	r1, #0
 800b252:	d0f5      	beq.n	800b240 <__any_on+0x2a>
 800b254:	2001      	movs	r0, #1
 800b256:	e7f6      	b.n	800b246 <__any_on+0x30>

0800b258 <_strtoul_l.constprop.0>:
 800b258:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b25c:	4e34      	ldr	r6, [pc, #208]	@ (800b330 <_strtoul_l.constprop.0+0xd8>)
 800b25e:	4686      	mov	lr, r0
 800b260:	460d      	mov	r5, r1
 800b262:	4628      	mov	r0, r5
 800b264:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b268:	5d37      	ldrb	r7, [r6, r4]
 800b26a:	f017 0708 	ands.w	r7, r7, #8
 800b26e:	d1f8      	bne.n	800b262 <_strtoul_l.constprop.0+0xa>
 800b270:	2c2d      	cmp	r4, #45	@ 0x2d
 800b272:	d12f      	bne.n	800b2d4 <_strtoul_l.constprop.0+0x7c>
 800b274:	782c      	ldrb	r4, [r5, #0]
 800b276:	2701      	movs	r7, #1
 800b278:	1c85      	adds	r5, r0, #2
 800b27a:	f033 0010 	bics.w	r0, r3, #16
 800b27e:	d109      	bne.n	800b294 <_strtoul_l.constprop.0+0x3c>
 800b280:	2c30      	cmp	r4, #48	@ 0x30
 800b282:	d12c      	bne.n	800b2de <_strtoul_l.constprop.0+0x86>
 800b284:	7828      	ldrb	r0, [r5, #0]
 800b286:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 800b28a:	2858      	cmp	r0, #88	@ 0x58
 800b28c:	d127      	bne.n	800b2de <_strtoul_l.constprop.0+0x86>
 800b28e:	786c      	ldrb	r4, [r5, #1]
 800b290:	2310      	movs	r3, #16
 800b292:	3502      	adds	r5, #2
 800b294:	f04f 38ff 	mov.w	r8, #4294967295
 800b298:	2600      	movs	r6, #0
 800b29a:	fbb8 f8f3 	udiv	r8, r8, r3
 800b29e:	fb03 f908 	mul.w	r9, r3, r8
 800b2a2:	ea6f 0909 	mvn.w	r9, r9
 800b2a6:	4630      	mov	r0, r6
 800b2a8:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 800b2ac:	f1bc 0f09 	cmp.w	ip, #9
 800b2b0:	d81c      	bhi.n	800b2ec <_strtoul_l.constprop.0+0x94>
 800b2b2:	4664      	mov	r4, ip
 800b2b4:	42a3      	cmp	r3, r4
 800b2b6:	dd2a      	ble.n	800b30e <_strtoul_l.constprop.0+0xb6>
 800b2b8:	f1b6 3fff 	cmp.w	r6, #4294967295
 800b2bc:	d007      	beq.n	800b2ce <_strtoul_l.constprop.0+0x76>
 800b2be:	4580      	cmp	r8, r0
 800b2c0:	d322      	bcc.n	800b308 <_strtoul_l.constprop.0+0xb0>
 800b2c2:	d101      	bne.n	800b2c8 <_strtoul_l.constprop.0+0x70>
 800b2c4:	45a1      	cmp	r9, r4
 800b2c6:	db1f      	blt.n	800b308 <_strtoul_l.constprop.0+0xb0>
 800b2c8:	fb00 4003 	mla	r0, r0, r3, r4
 800b2cc:	2601      	movs	r6, #1
 800b2ce:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b2d2:	e7e9      	b.n	800b2a8 <_strtoul_l.constprop.0+0x50>
 800b2d4:	2c2b      	cmp	r4, #43	@ 0x2b
 800b2d6:	bf04      	itt	eq
 800b2d8:	782c      	ldrbeq	r4, [r5, #0]
 800b2da:	1c85      	addeq	r5, r0, #2
 800b2dc:	e7cd      	b.n	800b27a <_strtoul_l.constprop.0+0x22>
 800b2de:	2b00      	cmp	r3, #0
 800b2e0:	d1d8      	bne.n	800b294 <_strtoul_l.constprop.0+0x3c>
 800b2e2:	2c30      	cmp	r4, #48	@ 0x30
 800b2e4:	bf0c      	ite	eq
 800b2e6:	2308      	moveq	r3, #8
 800b2e8:	230a      	movne	r3, #10
 800b2ea:	e7d3      	b.n	800b294 <_strtoul_l.constprop.0+0x3c>
 800b2ec:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 800b2f0:	f1bc 0f19 	cmp.w	ip, #25
 800b2f4:	d801      	bhi.n	800b2fa <_strtoul_l.constprop.0+0xa2>
 800b2f6:	3c37      	subs	r4, #55	@ 0x37
 800b2f8:	e7dc      	b.n	800b2b4 <_strtoul_l.constprop.0+0x5c>
 800b2fa:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 800b2fe:	f1bc 0f19 	cmp.w	ip, #25
 800b302:	d804      	bhi.n	800b30e <_strtoul_l.constprop.0+0xb6>
 800b304:	3c57      	subs	r4, #87	@ 0x57
 800b306:	e7d5      	b.n	800b2b4 <_strtoul_l.constprop.0+0x5c>
 800b308:	f04f 36ff 	mov.w	r6, #4294967295
 800b30c:	e7df      	b.n	800b2ce <_strtoul_l.constprop.0+0x76>
 800b30e:	1c73      	adds	r3, r6, #1
 800b310:	d106      	bne.n	800b320 <_strtoul_l.constprop.0+0xc8>
 800b312:	2322      	movs	r3, #34	@ 0x22
 800b314:	f8ce 3000 	str.w	r3, [lr]
 800b318:	4630      	mov	r0, r6
 800b31a:	b932      	cbnz	r2, 800b32a <_strtoul_l.constprop.0+0xd2>
 800b31c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b320:	b107      	cbz	r7, 800b324 <_strtoul_l.constprop.0+0xcc>
 800b322:	4240      	negs	r0, r0
 800b324:	2a00      	cmp	r2, #0
 800b326:	d0f9      	beq.n	800b31c <_strtoul_l.constprop.0+0xc4>
 800b328:	b106      	cbz	r6, 800b32c <_strtoul_l.constprop.0+0xd4>
 800b32a:	1e69      	subs	r1, r5, #1
 800b32c:	6011      	str	r1, [r2, #0]
 800b32e:	e7f5      	b.n	800b31c <_strtoul_l.constprop.0+0xc4>
 800b330:	0800d789 	.word	0x0800d789

0800b334 <_strtoul_r>:
 800b334:	f7ff bf90 	b.w	800b258 <_strtoul_l.constprop.0>

0800b338 <strtoul>:
 800b338:	4613      	mov	r3, r2
 800b33a:	460a      	mov	r2, r1
 800b33c:	4601      	mov	r1, r0
 800b33e:	4802      	ldr	r0, [pc, #8]	@ (800b348 <strtoul+0x10>)
 800b340:	6800      	ldr	r0, [r0, #0]
 800b342:	f7ff bf89 	b.w	800b258 <_strtoul_l.constprop.0>
 800b346:	bf00      	nop
 800b348:	20000198 	.word	0x20000198

0800b34c <__ascii_wctomb>:
 800b34c:	4603      	mov	r3, r0
 800b34e:	4608      	mov	r0, r1
 800b350:	b141      	cbz	r1, 800b364 <__ascii_wctomb+0x18>
 800b352:	2aff      	cmp	r2, #255	@ 0xff
 800b354:	d904      	bls.n	800b360 <__ascii_wctomb+0x14>
 800b356:	228a      	movs	r2, #138	@ 0x8a
 800b358:	601a      	str	r2, [r3, #0]
 800b35a:	f04f 30ff 	mov.w	r0, #4294967295
 800b35e:	4770      	bx	lr
 800b360:	700a      	strb	r2, [r1, #0]
 800b362:	2001      	movs	r0, #1
 800b364:	4770      	bx	lr

0800b366 <__ssputs_r>:
 800b366:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b36a:	688e      	ldr	r6, [r1, #8]
 800b36c:	461f      	mov	r7, r3
 800b36e:	42be      	cmp	r6, r7
 800b370:	680b      	ldr	r3, [r1, #0]
 800b372:	4682      	mov	sl, r0
 800b374:	460c      	mov	r4, r1
 800b376:	4690      	mov	r8, r2
 800b378:	d82d      	bhi.n	800b3d6 <__ssputs_r+0x70>
 800b37a:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b37e:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800b382:	d026      	beq.n	800b3d2 <__ssputs_r+0x6c>
 800b384:	6965      	ldr	r5, [r4, #20]
 800b386:	6909      	ldr	r1, [r1, #16]
 800b388:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b38c:	eba3 0901 	sub.w	r9, r3, r1
 800b390:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b394:	1c7b      	adds	r3, r7, #1
 800b396:	444b      	add	r3, r9
 800b398:	106d      	asrs	r5, r5, #1
 800b39a:	429d      	cmp	r5, r3
 800b39c:	bf38      	it	cc
 800b39e:	461d      	movcc	r5, r3
 800b3a0:	0553      	lsls	r3, r2, #21
 800b3a2:	d527      	bpl.n	800b3f4 <__ssputs_r+0x8e>
 800b3a4:	4629      	mov	r1, r5
 800b3a6:	f7fb fdc3 	bl	8006f30 <_malloc_r>
 800b3aa:	4606      	mov	r6, r0
 800b3ac:	b360      	cbz	r0, 800b408 <__ssputs_r+0xa2>
 800b3ae:	6921      	ldr	r1, [r4, #16]
 800b3b0:	464a      	mov	r2, r9
 800b3b2:	f7fe f85a 	bl	800946a <memcpy>
 800b3b6:	89a3      	ldrh	r3, [r4, #12]
 800b3b8:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800b3bc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b3c0:	81a3      	strh	r3, [r4, #12]
 800b3c2:	6126      	str	r6, [r4, #16]
 800b3c4:	6165      	str	r5, [r4, #20]
 800b3c6:	444e      	add	r6, r9
 800b3c8:	eba5 0509 	sub.w	r5, r5, r9
 800b3cc:	6026      	str	r6, [r4, #0]
 800b3ce:	60a5      	str	r5, [r4, #8]
 800b3d0:	463e      	mov	r6, r7
 800b3d2:	42be      	cmp	r6, r7
 800b3d4:	d900      	bls.n	800b3d8 <__ssputs_r+0x72>
 800b3d6:	463e      	mov	r6, r7
 800b3d8:	6820      	ldr	r0, [r4, #0]
 800b3da:	4632      	mov	r2, r6
 800b3dc:	4641      	mov	r1, r8
 800b3de:	f000 fd52 	bl	800be86 <memmove>
 800b3e2:	68a3      	ldr	r3, [r4, #8]
 800b3e4:	1b9b      	subs	r3, r3, r6
 800b3e6:	60a3      	str	r3, [r4, #8]
 800b3e8:	6823      	ldr	r3, [r4, #0]
 800b3ea:	4433      	add	r3, r6
 800b3ec:	6023      	str	r3, [r4, #0]
 800b3ee:	2000      	movs	r0, #0
 800b3f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b3f4:	462a      	mov	r2, r5
 800b3f6:	f000 fda3 	bl	800bf40 <_realloc_r>
 800b3fa:	4606      	mov	r6, r0
 800b3fc:	2800      	cmp	r0, #0
 800b3fe:	d1e0      	bne.n	800b3c2 <__ssputs_r+0x5c>
 800b400:	6921      	ldr	r1, [r4, #16]
 800b402:	4650      	mov	r0, sl
 800b404:	f7fe fe9c 	bl	800a140 <_free_r>
 800b408:	230c      	movs	r3, #12
 800b40a:	f8ca 3000 	str.w	r3, [sl]
 800b40e:	89a3      	ldrh	r3, [r4, #12]
 800b410:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b414:	81a3      	strh	r3, [r4, #12]
 800b416:	f04f 30ff 	mov.w	r0, #4294967295
 800b41a:	e7e9      	b.n	800b3f0 <__ssputs_r+0x8a>

0800b41c <_svfiprintf_r>:
 800b41c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b420:	4698      	mov	r8, r3
 800b422:	898b      	ldrh	r3, [r1, #12]
 800b424:	061b      	lsls	r3, r3, #24
 800b426:	b09d      	sub	sp, #116	@ 0x74
 800b428:	4607      	mov	r7, r0
 800b42a:	460d      	mov	r5, r1
 800b42c:	4614      	mov	r4, r2
 800b42e:	d510      	bpl.n	800b452 <_svfiprintf_r+0x36>
 800b430:	690b      	ldr	r3, [r1, #16]
 800b432:	b973      	cbnz	r3, 800b452 <_svfiprintf_r+0x36>
 800b434:	2140      	movs	r1, #64	@ 0x40
 800b436:	f7fb fd7b 	bl	8006f30 <_malloc_r>
 800b43a:	6028      	str	r0, [r5, #0]
 800b43c:	6128      	str	r0, [r5, #16]
 800b43e:	b930      	cbnz	r0, 800b44e <_svfiprintf_r+0x32>
 800b440:	230c      	movs	r3, #12
 800b442:	603b      	str	r3, [r7, #0]
 800b444:	f04f 30ff 	mov.w	r0, #4294967295
 800b448:	b01d      	add	sp, #116	@ 0x74
 800b44a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b44e:	2340      	movs	r3, #64	@ 0x40
 800b450:	616b      	str	r3, [r5, #20]
 800b452:	2300      	movs	r3, #0
 800b454:	9309      	str	r3, [sp, #36]	@ 0x24
 800b456:	2320      	movs	r3, #32
 800b458:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b45c:	f8cd 800c 	str.w	r8, [sp, #12]
 800b460:	2330      	movs	r3, #48	@ 0x30
 800b462:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800b600 <_svfiprintf_r+0x1e4>
 800b466:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b46a:	f04f 0901 	mov.w	r9, #1
 800b46e:	4623      	mov	r3, r4
 800b470:	469a      	mov	sl, r3
 800b472:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b476:	b10a      	cbz	r2, 800b47c <_svfiprintf_r+0x60>
 800b478:	2a25      	cmp	r2, #37	@ 0x25
 800b47a:	d1f9      	bne.n	800b470 <_svfiprintf_r+0x54>
 800b47c:	ebba 0b04 	subs.w	fp, sl, r4
 800b480:	d00b      	beq.n	800b49a <_svfiprintf_r+0x7e>
 800b482:	465b      	mov	r3, fp
 800b484:	4622      	mov	r2, r4
 800b486:	4629      	mov	r1, r5
 800b488:	4638      	mov	r0, r7
 800b48a:	f7ff ff6c 	bl	800b366 <__ssputs_r>
 800b48e:	3001      	adds	r0, #1
 800b490:	f000 80a7 	beq.w	800b5e2 <_svfiprintf_r+0x1c6>
 800b494:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b496:	445a      	add	r2, fp
 800b498:	9209      	str	r2, [sp, #36]	@ 0x24
 800b49a:	f89a 3000 	ldrb.w	r3, [sl]
 800b49e:	2b00      	cmp	r3, #0
 800b4a0:	f000 809f 	beq.w	800b5e2 <_svfiprintf_r+0x1c6>
 800b4a4:	2300      	movs	r3, #0
 800b4a6:	f04f 32ff 	mov.w	r2, #4294967295
 800b4aa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b4ae:	f10a 0a01 	add.w	sl, sl, #1
 800b4b2:	9304      	str	r3, [sp, #16]
 800b4b4:	9307      	str	r3, [sp, #28]
 800b4b6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b4ba:	931a      	str	r3, [sp, #104]	@ 0x68
 800b4bc:	4654      	mov	r4, sl
 800b4be:	2205      	movs	r2, #5
 800b4c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b4c4:	484e      	ldr	r0, [pc, #312]	@ (800b600 <_svfiprintf_r+0x1e4>)
 800b4c6:	f7f4 fe93 	bl	80001f0 <memchr>
 800b4ca:	9a04      	ldr	r2, [sp, #16]
 800b4cc:	b9d8      	cbnz	r0, 800b506 <_svfiprintf_r+0xea>
 800b4ce:	06d0      	lsls	r0, r2, #27
 800b4d0:	bf44      	itt	mi
 800b4d2:	2320      	movmi	r3, #32
 800b4d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b4d8:	0711      	lsls	r1, r2, #28
 800b4da:	bf44      	itt	mi
 800b4dc:	232b      	movmi	r3, #43	@ 0x2b
 800b4de:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b4e2:	f89a 3000 	ldrb.w	r3, [sl]
 800b4e6:	2b2a      	cmp	r3, #42	@ 0x2a
 800b4e8:	d015      	beq.n	800b516 <_svfiprintf_r+0xfa>
 800b4ea:	9a07      	ldr	r2, [sp, #28]
 800b4ec:	4654      	mov	r4, sl
 800b4ee:	2000      	movs	r0, #0
 800b4f0:	f04f 0c0a 	mov.w	ip, #10
 800b4f4:	4621      	mov	r1, r4
 800b4f6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b4fa:	3b30      	subs	r3, #48	@ 0x30
 800b4fc:	2b09      	cmp	r3, #9
 800b4fe:	d94b      	bls.n	800b598 <_svfiprintf_r+0x17c>
 800b500:	b1b0      	cbz	r0, 800b530 <_svfiprintf_r+0x114>
 800b502:	9207      	str	r2, [sp, #28]
 800b504:	e014      	b.n	800b530 <_svfiprintf_r+0x114>
 800b506:	eba0 0308 	sub.w	r3, r0, r8
 800b50a:	fa09 f303 	lsl.w	r3, r9, r3
 800b50e:	4313      	orrs	r3, r2
 800b510:	9304      	str	r3, [sp, #16]
 800b512:	46a2      	mov	sl, r4
 800b514:	e7d2      	b.n	800b4bc <_svfiprintf_r+0xa0>
 800b516:	9b03      	ldr	r3, [sp, #12]
 800b518:	1d19      	adds	r1, r3, #4
 800b51a:	681b      	ldr	r3, [r3, #0]
 800b51c:	9103      	str	r1, [sp, #12]
 800b51e:	2b00      	cmp	r3, #0
 800b520:	bfbb      	ittet	lt
 800b522:	425b      	neglt	r3, r3
 800b524:	f042 0202 	orrlt.w	r2, r2, #2
 800b528:	9307      	strge	r3, [sp, #28]
 800b52a:	9307      	strlt	r3, [sp, #28]
 800b52c:	bfb8      	it	lt
 800b52e:	9204      	strlt	r2, [sp, #16]
 800b530:	7823      	ldrb	r3, [r4, #0]
 800b532:	2b2e      	cmp	r3, #46	@ 0x2e
 800b534:	d10a      	bne.n	800b54c <_svfiprintf_r+0x130>
 800b536:	7863      	ldrb	r3, [r4, #1]
 800b538:	2b2a      	cmp	r3, #42	@ 0x2a
 800b53a:	d132      	bne.n	800b5a2 <_svfiprintf_r+0x186>
 800b53c:	9b03      	ldr	r3, [sp, #12]
 800b53e:	1d1a      	adds	r2, r3, #4
 800b540:	681b      	ldr	r3, [r3, #0]
 800b542:	9203      	str	r2, [sp, #12]
 800b544:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b548:	3402      	adds	r4, #2
 800b54a:	9305      	str	r3, [sp, #20]
 800b54c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800b610 <_svfiprintf_r+0x1f4>
 800b550:	7821      	ldrb	r1, [r4, #0]
 800b552:	2203      	movs	r2, #3
 800b554:	4650      	mov	r0, sl
 800b556:	f7f4 fe4b 	bl	80001f0 <memchr>
 800b55a:	b138      	cbz	r0, 800b56c <_svfiprintf_r+0x150>
 800b55c:	9b04      	ldr	r3, [sp, #16]
 800b55e:	eba0 000a 	sub.w	r0, r0, sl
 800b562:	2240      	movs	r2, #64	@ 0x40
 800b564:	4082      	lsls	r2, r0
 800b566:	4313      	orrs	r3, r2
 800b568:	3401      	adds	r4, #1
 800b56a:	9304      	str	r3, [sp, #16]
 800b56c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b570:	4824      	ldr	r0, [pc, #144]	@ (800b604 <_svfiprintf_r+0x1e8>)
 800b572:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b576:	2206      	movs	r2, #6
 800b578:	f7f4 fe3a 	bl	80001f0 <memchr>
 800b57c:	2800      	cmp	r0, #0
 800b57e:	d036      	beq.n	800b5ee <_svfiprintf_r+0x1d2>
 800b580:	4b21      	ldr	r3, [pc, #132]	@ (800b608 <_svfiprintf_r+0x1ec>)
 800b582:	bb1b      	cbnz	r3, 800b5cc <_svfiprintf_r+0x1b0>
 800b584:	9b03      	ldr	r3, [sp, #12]
 800b586:	3307      	adds	r3, #7
 800b588:	f023 0307 	bic.w	r3, r3, #7
 800b58c:	3308      	adds	r3, #8
 800b58e:	9303      	str	r3, [sp, #12]
 800b590:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b592:	4433      	add	r3, r6
 800b594:	9309      	str	r3, [sp, #36]	@ 0x24
 800b596:	e76a      	b.n	800b46e <_svfiprintf_r+0x52>
 800b598:	fb0c 3202 	mla	r2, ip, r2, r3
 800b59c:	460c      	mov	r4, r1
 800b59e:	2001      	movs	r0, #1
 800b5a0:	e7a8      	b.n	800b4f4 <_svfiprintf_r+0xd8>
 800b5a2:	2300      	movs	r3, #0
 800b5a4:	3401      	adds	r4, #1
 800b5a6:	9305      	str	r3, [sp, #20]
 800b5a8:	4619      	mov	r1, r3
 800b5aa:	f04f 0c0a 	mov.w	ip, #10
 800b5ae:	4620      	mov	r0, r4
 800b5b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b5b4:	3a30      	subs	r2, #48	@ 0x30
 800b5b6:	2a09      	cmp	r2, #9
 800b5b8:	d903      	bls.n	800b5c2 <_svfiprintf_r+0x1a6>
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	d0c6      	beq.n	800b54c <_svfiprintf_r+0x130>
 800b5be:	9105      	str	r1, [sp, #20]
 800b5c0:	e7c4      	b.n	800b54c <_svfiprintf_r+0x130>
 800b5c2:	fb0c 2101 	mla	r1, ip, r1, r2
 800b5c6:	4604      	mov	r4, r0
 800b5c8:	2301      	movs	r3, #1
 800b5ca:	e7f0      	b.n	800b5ae <_svfiprintf_r+0x192>
 800b5cc:	ab03      	add	r3, sp, #12
 800b5ce:	9300      	str	r3, [sp, #0]
 800b5d0:	462a      	mov	r2, r5
 800b5d2:	4b0e      	ldr	r3, [pc, #56]	@ (800b60c <_svfiprintf_r+0x1f0>)
 800b5d4:	a904      	add	r1, sp, #16
 800b5d6:	4638      	mov	r0, r7
 800b5d8:	f7fc fbe6 	bl	8007da8 <_printf_float>
 800b5dc:	1c42      	adds	r2, r0, #1
 800b5de:	4606      	mov	r6, r0
 800b5e0:	d1d6      	bne.n	800b590 <_svfiprintf_r+0x174>
 800b5e2:	89ab      	ldrh	r3, [r5, #12]
 800b5e4:	065b      	lsls	r3, r3, #25
 800b5e6:	f53f af2d 	bmi.w	800b444 <_svfiprintf_r+0x28>
 800b5ea:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b5ec:	e72c      	b.n	800b448 <_svfiprintf_r+0x2c>
 800b5ee:	ab03      	add	r3, sp, #12
 800b5f0:	9300      	str	r3, [sp, #0]
 800b5f2:	462a      	mov	r2, r5
 800b5f4:	4b05      	ldr	r3, [pc, #20]	@ (800b60c <_svfiprintf_r+0x1f0>)
 800b5f6:	a904      	add	r1, sp, #16
 800b5f8:	4638      	mov	r0, r7
 800b5fa:	f7fc fe6d 	bl	80082d8 <_printf_i>
 800b5fe:	e7ed      	b.n	800b5dc <_svfiprintf_r+0x1c0>
 800b600:	0800d889 	.word	0x0800d889
 800b604:	0800d893 	.word	0x0800d893
 800b608:	08007da9 	.word	0x08007da9
 800b60c:	0800b367 	.word	0x0800b367
 800b610:	0800d88f 	.word	0x0800d88f

0800b614 <_sungetc_r>:
 800b614:	b538      	push	{r3, r4, r5, lr}
 800b616:	1c4b      	adds	r3, r1, #1
 800b618:	4614      	mov	r4, r2
 800b61a:	d103      	bne.n	800b624 <_sungetc_r+0x10>
 800b61c:	f04f 35ff 	mov.w	r5, #4294967295
 800b620:	4628      	mov	r0, r5
 800b622:	bd38      	pop	{r3, r4, r5, pc}
 800b624:	8993      	ldrh	r3, [r2, #12]
 800b626:	f023 0320 	bic.w	r3, r3, #32
 800b62a:	8193      	strh	r3, [r2, #12]
 800b62c:	6853      	ldr	r3, [r2, #4]
 800b62e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800b630:	b2cd      	uxtb	r5, r1
 800b632:	b18a      	cbz	r2, 800b658 <_sungetc_r+0x44>
 800b634:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800b636:	429a      	cmp	r2, r3
 800b638:	dd08      	ble.n	800b64c <_sungetc_r+0x38>
 800b63a:	6823      	ldr	r3, [r4, #0]
 800b63c:	1e5a      	subs	r2, r3, #1
 800b63e:	6022      	str	r2, [r4, #0]
 800b640:	f803 5c01 	strb.w	r5, [r3, #-1]
 800b644:	6863      	ldr	r3, [r4, #4]
 800b646:	3301      	adds	r3, #1
 800b648:	6063      	str	r3, [r4, #4]
 800b64a:	e7e9      	b.n	800b620 <_sungetc_r+0xc>
 800b64c:	4621      	mov	r1, r4
 800b64e:	f000 fbe0 	bl	800be12 <__submore>
 800b652:	2800      	cmp	r0, #0
 800b654:	d0f1      	beq.n	800b63a <_sungetc_r+0x26>
 800b656:	e7e1      	b.n	800b61c <_sungetc_r+0x8>
 800b658:	6921      	ldr	r1, [r4, #16]
 800b65a:	6822      	ldr	r2, [r4, #0]
 800b65c:	b141      	cbz	r1, 800b670 <_sungetc_r+0x5c>
 800b65e:	4291      	cmp	r1, r2
 800b660:	d206      	bcs.n	800b670 <_sungetc_r+0x5c>
 800b662:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 800b666:	42a9      	cmp	r1, r5
 800b668:	d102      	bne.n	800b670 <_sungetc_r+0x5c>
 800b66a:	3a01      	subs	r2, #1
 800b66c:	6022      	str	r2, [r4, #0]
 800b66e:	e7ea      	b.n	800b646 <_sungetc_r+0x32>
 800b670:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 800b674:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b678:	6363      	str	r3, [r4, #52]	@ 0x34
 800b67a:	2303      	movs	r3, #3
 800b67c:	63a3      	str	r3, [r4, #56]	@ 0x38
 800b67e:	4623      	mov	r3, r4
 800b680:	f803 5f46 	strb.w	r5, [r3, #70]!
 800b684:	6023      	str	r3, [r4, #0]
 800b686:	2301      	movs	r3, #1
 800b688:	e7de      	b.n	800b648 <_sungetc_r+0x34>

0800b68a <__ssrefill_r>:
 800b68a:	b510      	push	{r4, lr}
 800b68c:	460c      	mov	r4, r1
 800b68e:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800b690:	b169      	cbz	r1, 800b6ae <__ssrefill_r+0x24>
 800b692:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b696:	4299      	cmp	r1, r3
 800b698:	d001      	beq.n	800b69e <__ssrefill_r+0x14>
 800b69a:	f7fe fd51 	bl	800a140 <_free_r>
 800b69e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b6a0:	6063      	str	r3, [r4, #4]
 800b6a2:	2000      	movs	r0, #0
 800b6a4:	6360      	str	r0, [r4, #52]	@ 0x34
 800b6a6:	b113      	cbz	r3, 800b6ae <__ssrefill_r+0x24>
 800b6a8:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800b6aa:	6023      	str	r3, [r4, #0]
 800b6ac:	bd10      	pop	{r4, pc}
 800b6ae:	6923      	ldr	r3, [r4, #16]
 800b6b0:	6023      	str	r3, [r4, #0]
 800b6b2:	2300      	movs	r3, #0
 800b6b4:	6063      	str	r3, [r4, #4]
 800b6b6:	89a3      	ldrh	r3, [r4, #12]
 800b6b8:	f043 0320 	orr.w	r3, r3, #32
 800b6bc:	81a3      	strh	r3, [r4, #12]
 800b6be:	f04f 30ff 	mov.w	r0, #4294967295
 800b6c2:	e7f3      	b.n	800b6ac <__ssrefill_r+0x22>

0800b6c4 <__ssvfiscanf_r>:
 800b6c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b6c8:	460c      	mov	r4, r1
 800b6ca:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 800b6ce:	2100      	movs	r1, #0
 800b6d0:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 800b6d4:	49a5      	ldr	r1, [pc, #660]	@ (800b96c <__ssvfiscanf_r+0x2a8>)
 800b6d6:	91a0      	str	r1, [sp, #640]	@ 0x280
 800b6d8:	f10d 0804 	add.w	r8, sp, #4
 800b6dc:	49a4      	ldr	r1, [pc, #656]	@ (800b970 <__ssvfiscanf_r+0x2ac>)
 800b6de:	4fa5      	ldr	r7, [pc, #660]	@ (800b974 <__ssvfiscanf_r+0x2b0>)
 800b6e0:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 800b6e4:	4606      	mov	r6, r0
 800b6e6:	91a1      	str	r1, [sp, #644]	@ 0x284
 800b6e8:	9300      	str	r3, [sp, #0]
 800b6ea:	7813      	ldrb	r3, [r2, #0]
 800b6ec:	2b00      	cmp	r3, #0
 800b6ee:	f000 8158 	beq.w	800b9a2 <__ssvfiscanf_r+0x2de>
 800b6f2:	5cf9      	ldrb	r1, [r7, r3]
 800b6f4:	f011 0108 	ands.w	r1, r1, #8
 800b6f8:	f102 0501 	add.w	r5, r2, #1
 800b6fc:	d019      	beq.n	800b732 <__ssvfiscanf_r+0x6e>
 800b6fe:	6863      	ldr	r3, [r4, #4]
 800b700:	2b00      	cmp	r3, #0
 800b702:	dd0f      	ble.n	800b724 <__ssvfiscanf_r+0x60>
 800b704:	6823      	ldr	r3, [r4, #0]
 800b706:	781a      	ldrb	r2, [r3, #0]
 800b708:	5cba      	ldrb	r2, [r7, r2]
 800b70a:	0712      	lsls	r2, r2, #28
 800b70c:	d401      	bmi.n	800b712 <__ssvfiscanf_r+0x4e>
 800b70e:	462a      	mov	r2, r5
 800b710:	e7eb      	b.n	800b6ea <__ssvfiscanf_r+0x26>
 800b712:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800b714:	3201      	adds	r2, #1
 800b716:	9245      	str	r2, [sp, #276]	@ 0x114
 800b718:	6862      	ldr	r2, [r4, #4]
 800b71a:	3301      	adds	r3, #1
 800b71c:	3a01      	subs	r2, #1
 800b71e:	6062      	str	r2, [r4, #4]
 800b720:	6023      	str	r3, [r4, #0]
 800b722:	e7ec      	b.n	800b6fe <__ssvfiscanf_r+0x3a>
 800b724:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800b726:	4621      	mov	r1, r4
 800b728:	4630      	mov	r0, r6
 800b72a:	4798      	blx	r3
 800b72c:	2800      	cmp	r0, #0
 800b72e:	d0e9      	beq.n	800b704 <__ssvfiscanf_r+0x40>
 800b730:	e7ed      	b.n	800b70e <__ssvfiscanf_r+0x4a>
 800b732:	2b25      	cmp	r3, #37	@ 0x25
 800b734:	d012      	beq.n	800b75c <__ssvfiscanf_r+0x98>
 800b736:	4699      	mov	r9, r3
 800b738:	6863      	ldr	r3, [r4, #4]
 800b73a:	2b00      	cmp	r3, #0
 800b73c:	f340 8093 	ble.w	800b866 <__ssvfiscanf_r+0x1a2>
 800b740:	6822      	ldr	r2, [r4, #0]
 800b742:	7813      	ldrb	r3, [r2, #0]
 800b744:	454b      	cmp	r3, r9
 800b746:	f040 812c 	bne.w	800b9a2 <__ssvfiscanf_r+0x2de>
 800b74a:	6863      	ldr	r3, [r4, #4]
 800b74c:	3b01      	subs	r3, #1
 800b74e:	6063      	str	r3, [r4, #4]
 800b750:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 800b752:	3201      	adds	r2, #1
 800b754:	3301      	adds	r3, #1
 800b756:	6022      	str	r2, [r4, #0]
 800b758:	9345      	str	r3, [sp, #276]	@ 0x114
 800b75a:	e7d8      	b.n	800b70e <__ssvfiscanf_r+0x4a>
 800b75c:	9141      	str	r1, [sp, #260]	@ 0x104
 800b75e:	9143      	str	r1, [sp, #268]	@ 0x10c
 800b760:	7853      	ldrb	r3, [r2, #1]
 800b762:	2b2a      	cmp	r3, #42	@ 0x2a
 800b764:	bf02      	ittt	eq
 800b766:	2310      	moveq	r3, #16
 800b768:	1c95      	addeq	r5, r2, #2
 800b76a:	9341      	streq	r3, [sp, #260]	@ 0x104
 800b76c:	220a      	movs	r2, #10
 800b76e:	46a9      	mov	r9, r5
 800b770:	f819 1b01 	ldrb.w	r1, [r9], #1
 800b774:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 800b778:	2b09      	cmp	r3, #9
 800b77a:	d91e      	bls.n	800b7ba <__ssvfiscanf_r+0xf6>
 800b77c:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 800b978 <__ssvfiscanf_r+0x2b4>
 800b780:	2203      	movs	r2, #3
 800b782:	4650      	mov	r0, sl
 800b784:	f7f4 fd34 	bl	80001f0 <memchr>
 800b788:	b138      	cbz	r0, 800b79a <__ssvfiscanf_r+0xd6>
 800b78a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800b78c:	eba0 000a 	sub.w	r0, r0, sl
 800b790:	2301      	movs	r3, #1
 800b792:	4083      	lsls	r3, r0
 800b794:	4313      	orrs	r3, r2
 800b796:	9341      	str	r3, [sp, #260]	@ 0x104
 800b798:	464d      	mov	r5, r9
 800b79a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800b79e:	2b78      	cmp	r3, #120	@ 0x78
 800b7a0:	d806      	bhi.n	800b7b0 <__ssvfiscanf_r+0xec>
 800b7a2:	2b57      	cmp	r3, #87	@ 0x57
 800b7a4:	d810      	bhi.n	800b7c8 <__ssvfiscanf_r+0x104>
 800b7a6:	2b25      	cmp	r3, #37	@ 0x25
 800b7a8:	d0c5      	beq.n	800b736 <__ssvfiscanf_r+0x72>
 800b7aa:	d857      	bhi.n	800b85c <__ssvfiscanf_r+0x198>
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	d065      	beq.n	800b87c <__ssvfiscanf_r+0x1b8>
 800b7b0:	2303      	movs	r3, #3
 800b7b2:	9347      	str	r3, [sp, #284]	@ 0x11c
 800b7b4:	230a      	movs	r3, #10
 800b7b6:	9342      	str	r3, [sp, #264]	@ 0x108
 800b7b8:	e078      	b.n	800b8ac <__ssvfiscanf_r+0x1e8>
 800b7ba:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 800b7bc:	fb02 1103 	mla	r1, r2, r3, r1
 800b7c0:	3930      	subs	r1, #48	@ 0x30
 800b7c2:	9143      	str	r1, [sp, #268]	@ 0x10c
 800b7c4:	464d      	mov	r5, r9
 800b7c6:	e7d2      	b.n	800b76e <__ssvfiscanf_r+0xaa>
 800b7c8:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 800b7cc:	2a20      	cmp	r2, #32
 800b7ce:	d8ef      	bhi.n	800b7b0 <__ssvfiscanf_r+0xec>
 800b7d0:	a101      	add	r1, pc, #4	@ (adr r1, 800b7d8 <__ssvfiscanf_r+0x114>)
 800b7d2:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800b7d6:	bf00      	nop
 800b7d8:	0800b88b 	.word	0x0800b88b
 800b7dc:	0800b7b1 	.word	0x0800b7b1
 800b7e0:	0800b7b1 	.word	0x0800b7b1
 800b7e4:	0800b8e5 	.word	0x0800b8e5
 800b7e8:	0800b7b1 	.word	0x0800b7b1
 800b7ec:	0800b7b1 	.word	0x0800b7b1
 800b7f0:	0800b7b1 	.word	0x0800b7b1
 800b7f4:	0800b7b1 	.word	0x0800b7b1
 800b7f8:	0800b7b1 	.word	0x0800b7b1
 800b7fc:	0800b7b1 	.word	0x0800b7b1
 800b800:	0800b7b1 	.word	0x0800b7b1
 800b804:	0800b8fb 	.word	0x0800b8fb
 800b808:	0800b8e1 	.word	0x0800b8e1
 800b80c:	0800b863 	.word	0x0800b863
 800b810:	0800b863 	.word	0x0800b863
 800b814:	0800b863 	.word	0x0800b863
 800b818:	0800b7b1 	.word	0x0800b7b1
 800b81c:	0800b89d 	.word	0x0800b89d
 800b820:	0800b7b1 	.word	0x0800b7b1
 800b824:	0800b7b1 	.word	0x0800b7b1
 800b828:	0800b7b1 	.word	0x0800b7b1
 800b82c:	0800b7b1 	.word	0x0800b7b1
 800b830:	0800b90b 	.word	0x0800b90b
 800b834:	0800b8a5 	.word	0x0800b8a5
 800b838:	0800b883 	.word	0x0800b883
 800b83c:	0800b7b1 	.word	0x0800b7b1
 800b840:	0800b7b1 	.word	0x0800b7b1
 800b844:	0800b907 	.word	0x0800b907
 800b848:	0800b7b1 	.word	0x0800b7b1
 800b84c:	0800b8e1 	.word	0x0800b8e1
 800b850:	0800b7b1 	.word	0x0800b7b1
 800b854:	0800b7b1 	.word	0x0800b7b1
 800b858:	0800b88b 	.word	0x0800b88b
 800b85c:	3b45      	subs	r3, #69	@ 0x45
 800b85e:	2b02      	cmp	r3, #2
 800b860:	d8a6      	bhi.n	800b7b0 <__ssvfiscanf_r+0xec>
 800b862:	2305      	movs	r3, #5
 800b864:	e021      	b.n	800b8aa <__ssvfiscanf_r+0x1e6>
 800b866:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800b868:	4621      	mov	r1, r4
 800b86a:	4630      	mov	r0, r6
 800b86c:	4798      	blx	r3
 800b86e:	2800      	cmp	r0, #0
 800b870:	f43f af66 	beq.w	800b740 <__ssvfiscanf_r+0x7c>
 800b874:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800b876:	2800      	cmp	r0, #0
 800b878:	f040 808b 	bne.w	800b992 <__ssvfiscanf_r+0x2ce>
 800b87c:	f04f 30ff 	mov.w	r0, #4294967295
 800b880:	e08b      	b.n	800b99a <__ssvfiscanf_r+0x2d6>
 800b882:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800b884:	f042 0220 	orr.w	r2, r2, #32
 800b888:	9241      	str	r2, [sp, #260]	@ 0x104
 800b88a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800b88c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b890:	9241      	str	r2, [sp, #260]	@ 0x104
 800b892:	2210      	movs	r2, #16
 800b894:	2b6e      	cmp	r3, #110	@ 0x6e
 800b896:	9242      	str	r2, [sp, #264]	@ 0x108
 800b898:	d902      	bls.n	800b8a0 <__ssvfiscanf_r+0x1dc>
 800b89a:	e005      	b.n	800b8a8 <__ssvfiscanf_r+0x1e4>
 800b89c:	2300      	movs	r3, #0
 800b89e:	9342      	str	r3, [sp, #264]	@ 0x108
 800b8a0:	2303      	movs	r3, #3
 800b8a2:	e002      	b.n	800b8aa <__ssvfiscanf_r+0x1e6>
 800b8a4:	2308      	movs	r3, #8
 800b8a6:	9342      	str	r3, [sp, #264]	@ 0x108
 800b8a8:	2304      	movs	r3, #4
 800b8aa:	9347      	str	r3, [sp, #284]	@ 0x11c
 800b8ac:	6863      	ldr	r3, [r4, #4]
 800b8ae:	2b00      	cmp	r3, #0
 800b8b0:	dd39      	ble.n	800b926 <__ssvfiscanf_r+0x262>
 800b8b2:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800b8b4:	0659      	lsls	r1, r3, #25
 800b8b6:	d404      	bmi.n	800b8c2 <__ssvfiscanf_r+0x1fe>
 800b8b8:	6823      	ldr	r3, [r4, #0]
 800b8ba:	781a      	ldrb	r2, [r3, #0]
 800b8bc:	5cba      	ldrb	r2, [r7, r2]
 800b8be:	0712      	lsls	r2, r2, #28
 800b8c0:	d438      	bmi.n	800b934 <__ssvfiscanf_r+0x270>
 800b8c2:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 800b8c4:	2b02      	cmp	r3, #2
 800b8c6:	dc47      	bgt.n	800b958 <__ssvfiscanf_r+0x294>
 800b8c8:	466b      	mov	r3, sp
 800b8ca:	4622      	mov	r2, r4
 800b8cc:	a941      	add	r1, sp, #260	@ 0x104
 800b8ce:	4630      	mov	r0, r6
 800b8d0:	f000 f86c 	bl	800b9ac <_scanf_chars>
 800b8d4:	2801      	cmp	r0, #1
 800b8d6:	d064      	beq.n	800b9a2 <__ssvfiscanf_r+0x2de>
 800b8d8:	2802      	cmp	r0, #2
 800b8da:	f47f af18 	bne.w	800b70e <__ssvfiscanf_r+0x4a>
 800b8de:	e7c9      	b.n	800b874 <__ssvfiscanf_r+0x1b0>
 800b8e0:	220a      	movs	r2, #10
 800b8e2:	e7d7      	b.n	800b894 <__ssvfiscanf_r+0x1d0>
 800b8e4:	4629      	mov	r1, r5
 800b8e6:	4640      	mov	r0, r8
 800b8e8:	f000 fa5a 	bl	800bda0 <__sccl>
 800b8ec:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800b8ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b8f2:	9341      	str	r3, [sp, #260]	@ 0x104
 800b8f4:	4605      	mov	r5, r0
 800b8f6:	2301      	movs	r3, #1
 800b8f8:	e7d7      	b.n	800b8aa <__ssvfiscanf_r+0x1e6>
 800b8fa:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800b8fc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b900:	9341      	str	r3, [sp, #260]	@ 0x104
 800b902:	2300      	movs	r3, #0
 800b904:	e7d1      	b.n	800b8aa <__ssvfiscanf_r+0x1e6>
 800b906:	2302      	movs	r3, #2
 800b908:	e7cf      	b.n	800b8aa <__ssvfiscanf_r+0x1e6>
 800b90a:	9841      	ldr	r0, [sp, #260]	@ 0x104
 800b90c:	06c3      	lsls	r3, r0, #27
 800b90e:	f53f aefe 	bmi.w	800b70e <__ssvfiscanf_r+0x4a>
 800b912:	9b00      	ldr	r3, [sp, #0]
 800b914:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800b916:	1d19      	adds	r1, r3, #4
 800b918:	9100      	str	r1, [sp, #0]
 800b91a:	681b      	ldr	r3, [r3, #0]
 800b91c:	07c0      	lsls	r0, r0, #31
 800b91e:	bf4c      	ite	mi
 800b920:	801a      	strhmi	r2, [r3, #0]
 800b922:	601a      	strpl	r2, [r3, #0]
 800b924:	e6f3      	b.n	800b70e <__ssvfiscanf_r+0x4a>
 800b926:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800b928:	4621      	mov	r1, r4
 800b92a:	4630      	mov	r0, r6
 800b92c:	4798      	blx	r3
 800b92e:	2800      	cmp	r0, #0
 800b930:	d0bf      	beq.n	800b8b2 <__ssvfiscanf_r+0x1ee>
 800b932:	e79f      	b.n	800b874 <__ssvfiscanf_r+0x1b0>
 800b934:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800b936:	3201      	adds	r2, #1
 800b938:	9245      	str	r2, [sp, #276]	@ 0x114
 800b93a:	6862      	ldr	r2, [r4, #4]
 800b93c:	3a01      	subs	r2, #1
 800b93e:	2a00      	cmp	r2, #0
 800b940:	6062      	str	r2, [r4, #4]
 800b942:	dd02      	ble.n	800b94a <__ssvfiscanf_r+0x286>
 800b944:	3301      	adds	r3, #1
 800b946:	6023      	str	r3, [r4, #0]
 800b948:	e7b6      	b.n	800b8b8 <__ssvfiscanf_r+0x1f4>
 800b94a:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800b94c:	4621      	mov	r1, r4
 800b94e:	4630      	mov	r0, r6
 800b950:	4798      	blx	r3
 800b952:	2800      	cmp	r0, #0
 800b954:	d0b0      	beq.n	800b8b8 <__ssvfiscanf_r+0x1f4>
 800b956:	e78d      	b.n	800b874 <__ssvfiscanf_r+0x1b0>
 800b958:	2b04      	cmp	r3, #4
 800b95a:	dc0f      	bgt.n	800b97c <__ssvfiscanf_r+0x2b8>
 800b95c:	466b      	mov	r3, sp
 800b95e:	4622      	mov	r2, r4
 800b960:	a941      	add	r1, sp, #260	@ 0x104
 800b962:	4630      	mov	r0, r6
 800b964:	f000 f87c 	bl	800ba60 <_scanf_i>
 800b968:	e7b4      	b.n	800b8d4 <__ssvfiscanf_r+0x210>
 800b96a:	bf00      	nop
 800b96c:	0800b615 	.word	0x0800b615
 800b970:	0800b68b 	.word	0x0800b68b
 800b974:	0800d789 	.word	0x0800d789
 800b978:	0800d88f 	.word	0x0800d88f
 800b97c:	4b0a      	ldr	r3, [pc, #40]	@ (800b9a8 <__ssvfiscanf_r+0x2e4>)
 800b97e:	2b00      	cmp	r3, #0
 800b980:	f43f aec5 	beq.w	800b70e <__ssvfiscanf_r+0x4a>
 800b984:	466b      	mov	r3, sp
 800b986:	4622      	mov	r2, r4
 800b988:	a941      	add	r1, sp, #260	@ 0x104
 800b98a:	4630      	mov	r0, r6
 800b98c:	f3af 8000 	nop.w
 800b990:	e7a0      	b.n	800b8d4 <__ssvfiscanf_r+0x210>
 800b992:	89a3      	ldrh	r3, [r4, #12]
 800b994:	065b      	lsls	r3, r3, #25
 800b996:	f53f af71 	bmi.w	800b87c <__ssvfiscanf_r+0x1b8>
 800b99a:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 800b99e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b9a2:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800b9a4:	e7f9      	b.n	800b99a <__ssvfiscanf_r+0x2d6>
 800b9a6:	bf00      	nop
 800b9a8:	00000000 	.word	0x00000000

0800b9ac <_scanf_chars>:
 800b9ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b9b0:	4615      	mov	r5, r2
 800b9b2:	688a      	ldr	r2, [r1, #8]
 800b9b4:	4680      	mov	r8, r0
 800b9b6:	460c      	mov	r4, r1
 800b9b8:	b932      	cbnz	r2, 800b9c8 <_scanf_chars+0x1c>
 800b9ba:	698a      	ldr	r2, [r1, #24]
 800b9bc:	2a00      	cmp	r2, #0
 800b9be:	bf14      	ite	ne
 800b9c0:	f04f 32ff 	movne.w	r2, #4294967295
 800b9c4:	2201      	moveq	r2, #1
 800b9c6:	608a      	str	r2, [r1, #8]
 800b9c8:	6822      	ldr	r2, [r4, #0]
 800b9ca:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 800ba5c <_scanf_chars+0xb0>
 800b9ce:	06d1      	lsls	r1, r2, #27
 800b9d0:	bf5f      	itttt	pl
 800b9d2:	681a      	ldrpl	r2, [r3, #0]
 800b9d4:	1d11      	addpl	r1, r2, #4
 800b9d6:	6019      	strpl	r1, [r3, #0]
 800b9d8:	6816      	ldrpl	r6, [r2, #0]
 800b9da:	2700      	movs	r7, #0
 800b9dc:	69a0      	ldr	r0, [r4, #24]
 800b9de:	b188      	cbz	r0, 800ba04 <_scanf_chars+0x58>
 800b9e0:	2801      	cmp	r0, #1
 800b9e2:	d107      	bne.n	800b9f4 <_scanf_chars+0x48>
 800b9e4:	682b      	ldr	r3, [r5, #0]
 800b9e6:	781a      	ldrb	r2, [r3, #0]
 800b9e8:	6963      	ldr	r3, [r4, #20]
 800b9ea:	5c9b      	ldrb	r3, [r3, r2]
 800b9ec:	b953      	cbnz	r3, 800ba04 <_scanf_chars+0x58>
 800b9ee:	2f00      	cmp	r7, #0
 800b9f0:	d031      	beq.n	800ba56 <_scanf_chars+0xaa>
 800b9f2:	e022      	b.n	800ba3a <_scanf_chars+0x8e>
 800b9f4:	2802      	cmp	r0, #2
 800b9f6:	d120      	bne.n	800ba3a <_scanf_chars+0x8e>
 800b9f8:	682b      	ldr	r3, [r5, #0]
 800b9fa:	781b      	ldrb	r3, [r3, #0]
 800b9fc:	f819 3003 	ldrb.w	r3, [r9, r3]
 800ba00:	071b      	lsls	r3, r3, #28
 800ba02:	d41a      	bmi.n	800ba3a <_scanf_chars+0x8e>
 800ba04:	6823      	ldr	r3, [r4, #0]
 800ba06:	06da      	lsls	r2, r3, #27
 800ba08:	bf5e      	ittt	pl
 800ba0a:	682b      	ldrpl	r3, [r5, #0]
 800ba0c:	781b      	ldrbpl	r3, [r3, #0]
 800ba0e:	f806 3b01 	strbpl.w	r3, [r6], #1
 800ba12:	682a      	ldr	r2, [r5, #0]
 800ba14:	686b      	ldr	r3, [r5, #4]
 800ba16:	3201      	adds	r2, #1
 800ba18:	602a      	str	r2, [r5, #0]
 800ba1a:	68a2      	ldr	r2, [r4, #8]
 800ba1c:	3b01      	subs	r3, #1
 800ba1e:	3a01      	subs	r2, #1
 800ba20:	606b      	str	r3, [r5, #4]
 800ba22:	3701      	adds	r7, #1
 800ba24:	60a2      	str	r2, [r4, #8]
 800ba26:	b142      	cbz	r2, 800ba3a <_scanf_chars+0x8e>
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	dcd7      	bgt.n	800b9dc <_scanf_chars+0x30>
 800ba2c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800ba30:	4629      	mov	r1, r5
 800ba32:	4640      	mov	r0, r8
 800ba34:	4798      	blx	r3
 800ba36:	2800      	cmp	r0, #0
 800ba38:	d0d0      	beq.n	800b9dc <_scanf_chars+0x30>
 800ba3a:	6823      	ldr	r3, [r4, #0]
 800ba3c:	f013 0310 	ands.w	r3, r3, #16
 800ba40:	d105      	bne.n	800ba4e <_scanf_chars+0xa2>
 800ba42:	68e2      	ldr	r2, [r4, #12]
 800ba44:	3201      	adds	r2, #1
 800ba46:	60e2      	str	r2, [r4, #12]
 800ba48:	69a2      	ldr	r2, [r4, #24]
 800ba4a:	b102      	cbz	r2, 800ba4e <_scanf_chars+0xa2>
 800ba4c:	7033      	strb	r3, [r6, #0]
 800ba4e:	6923      	ldr	r3, [r4, #16]
 800ba50:	443b      	add	r3, r7
 800ba52:	6123      	str	r3, [r4, #16]
 800ba54:	2000      	movs	r0, #0
 800ba56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ba5a:	bf00      	nop
 800ba5c:	0800d789 	.word	0x0800d789

0800ba60 <_scanf_i>:
 800ba60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba64:	4698      	mov	r8, r3
 800ba66:	4b74      	ldr	r3, [pc, #464]	@ (800bc38 <_scanf_i+0x1d8>)
 800ba68:	460c      	mov	r4, r1
 800ba6a:	4682      	mov	sl, r0
 800ba6c:	4616      	mov	r6, r2
 800ba6e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800ba72:	b087      	sub	sp, #28
 800ba74:	ab03      	add	r3, sp, #12
 800ba76:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800ba7a:	4b70      	ldr	r3, [pc, #448]	@ (800bc3c <_scanf_i+0x1dc>)
 800ba7c:	69a1      	ldr	r1, [r4, #24]
 800ba7e:	4a70      	ldr	r2, [pc, #448]	@ (800bc40 <_scanf_i+0x1e0>)
 800ba80:	2903      	cmp	r1, #3
 800ba82:	bf08      	it	eq
 800ba84:	461a      	moveq	r2, r3
 800ba86:	68a3      	ldr	r3, [r4, #8]
 800ba88:	9201      	str	r2, [sp, #4]
 800ba8a:	1e5a      	subs	r2, r3, #1
 800ba8c:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800ba90:	bf88      	it	hi
 800ba92:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800ba96:	4627      	mov	r7, r4
 800ba98:	bf82      	ittt	hi
 800ba9a:	eb03 0905 	addhi.w	r9, r3, r5
 800ba9e:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800baa2:	60a3      	strhi	r3, [r4, #8]
 800baa4:	f857 3b1c 	ldr.w	r3, [r7], #28
 800baa8:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 800baac:	bf98      	it	ls
 800baae:	f04f 0900 	movls.w	r9, #0
 800bab2:	6023      	str	r3, [r4, #0]
 800bab4:	463d      	mov	r5, r7
 800bab6:	f04f 0b00 	mov.w	fp, #0
 800baba:	6831      	ldr	r1, [r6, #0]
 800babc:	ab03      	add	r3, sp, #12
 800babe:	7809      	ldrb	r1, [r1, #0]
 800bac0:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800bac4:	2202      	movs	r2, #2
 800bac6:	f7f4 fb93 	bl	80001f0 <memchr>
 800baca:	b328      	cbz	r0, 800bb18 <_scanf_i+0xb8>
 800bacc:	f1bb 0f01 	cmp.w	fp, #1
 800bad0:	d159      	bne.n	800bb86 <_scanf_i+0x126>
 800bad2:	6862      	ldr	r2, [r4, #4]
 800bad4:	b92a      	cbnz	r2, 800bae2 <_scanf_i+0x82>
 800bad6:	6822      	ldr	r2, [r4, #0]
 800bad8:	2108      	movs	r1, #8
 800bada:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800bade:	6061      	str	r1, [r4, #4]
 800bae0:	6022      	str	r2, [r4, #0]
 800bae2:	6822      	ldr	r2, [r4, #0]
 800bae4:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 800bae8:	6022      	str	r2, [r4, #0]
 800baea:	68a2      	ldr	r2, [r4, #8]
 800baec:	1e51      	subs	r1, r2, #1
 800baee:	60a1      	str	r1, [r4, #8]
 800baf0:	b192      	cbz	r2, 800bb18 <_scanf_i+0xb8>
 800baf2:	6832      	ldr	r2, [r6, #0]
 800baf4:	1c51      	adds	r1, r2, #1
 800baf6:	6031      	str	r1, [r6, #0]
 800baf8:	7812      	ldrb	r2, [r2, #0]
 800bafa:	f805 2b01 	strb.w	r2, [r5], #1
 800bafe:	6872      	ldr	r2, [r6, #4]
 800bb00:	3a01      	subs	r2, #1
 800bb02:	2a00      	cmp	r2, #0
 800bb04:	6072      	str	r2, [r6, #4]
 800bb06:	dc07      	bgt.n	800bb18 <_scanf_i+0xb8>
 800bb08:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 800bb0c:	4631      	mov	r1, r6
 800bb0e:	4650      	mov	r0, sl
 800bb10:	4790      	blx	r2
 800bb12:	2800      	cmp	r0, #0
 800bb14:	f040 8085 	bne.w	800bc22 <_scanf_i+0x1c2>
 800bb18:	f10b 0b01 	add.w	fp, fp, #1
 800bb1c:	f1bb 0f03 	cmp.w	fp, #3
 800bb20:	d1cb      	bne.n	800baba <_scanf_i+0x5a>
 800bb22:	6863      	ldr	r3, [r4, #4]
 800bb24:	b90b      	cbnz	r3, 800bb2a <_scanf_i+0xca>
 800bb26:	230a      	movs	r3, #10
 800bb28:	6063      	str	r3, [r4, #4]
 800bb2a:	6863      	ldr	r3, [r4, #4]
 800bb2c:	4945      	ldr	r1, [pc, #276]	@ (800bc44 <_scanf_i+0x1e4>)
 800bb2e:	6960      	ldr	r0, [r4, #20]
 800bb30:	1ac9      	subs	r1, r1, r3
 800bb32:	f000 f935 	bl	800bda0 <__sccl>
 800bb36:	f04f 0b00 	mov.w	fp, #0
 800bb3a:	68a3      	ldr	r3, [r4, #8]
 800bb3c:	6822      	ldr	r2, [r4, #0]
 800bb3e:	2b00      	cmp	r3, #0
 800bb40:	d03d      	beq.n	800bbbe <_scanf_i+0x15e>
 800bb42:	6831      	ldr	r1, [r6, #0]
 800bb44:	6960      	ldr	r0, [r4, #20]
 800bb46:	f891 c000 	ldrb.w	ip, [r1]
 800bb4a:	f810 000c 	ldrb.w	r0, [r0, ip]
 800bb4e:	2800      	cmp	r0, #0
 800bb50:	d035      	beq.n	800bbbe <_scanf_i+0x15e>
 800bb52:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 800bb56:	d124      	bne.n	800bba2 <_scanf_i+0x142>
 800bb58:	0510      	lsls	r0, r2, #20
 800bb5a:	d522      	bpl.n	800bba2 <_scanf_i+0x142>
 800bb5c:	f10b 0b01 	add.w	fp, fp, #1
 800bb60:	f1b9 0f00 	cmp.w	r9, #0
 800bb64:	d003      	beq.n	800bb6e <_scanf_i+0x10e>
 800bb66:	3301      	adds	r3, #1
 800bb68:	f109 39ff 	add.w	r9, r9, #4294967295
 800bb6c:	60a3      	str	r3, [r4, #8]
 800bb6e:	6873      	ldr	r3, [r6, #4]
 800bb70:	3b01      	subs	r3, #1
 800bb72:	2b00      	cmp	r3, #0
 800bb74:	6073      	str	r3, [r6, #4]
 800bb76:	dd1b      	ble.n	800bbb0 <_scanf_i+0x150>
 800bb78:	6833      	ldr	r3, [r6, #0]
 800bb7a:	3301      	adds	r3, #1
 800bb7c:	6033      	str	r3, [r6, #0]
 800bb7e:	68a3      	ldr	r3, [r4, #8]
 800bb80:	3b01      	subs	r3, #1
 800bb82:	60a3      	str	r3, [r4, #8]
 800bb84:	e7d9      	b.n	800bb3a <_scanf_i+0xda>
 800bb86:	f1bb 0f02 	cmp.w	fp, #2
 800bb8a:	d1ae      	bne.n	800baea <_scanf_i+0x8a>
 800bb8c:	6822      	ldr	r2, [r4, #0]
 800bb8e:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 800bb92:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 800bb96:	d1bf      	bne.n	800bb18 <_scanf_i+0xb8>
 800bb98:	2110      	movs	r1, #16
 800bb9a:	6061      	str	r1, [r4, #4]
 800bb9c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800bba0:	e7a2      	b.n	800bae8 <_scanf_i+0x88>
 800bba2:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 800bba6:	6022      	str	r2, [r4, #0]
 800bba8:	780b      	ldrb	r3, [r1, #0]
 800bbaa:	f805 3b01 	strb.w	r3, [r5], #1
 800bbae:	e7de      	b.n	800bb6e <_scanf_i+0x10e>
 800bbb0:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800bbb4:	4631      	mov	r1, r6
 800bbb6:	4650      	mov	r0, sl
 800bbb8:	4798      	blx	r3
 800bbba:	2800      	cmp	r0, #0
 800bbbc:	d0df      	beq.n	800bb7e <_scanf_i+0x11e>
 800bbbe:	6823      	ldr	r3, [r4, #0]
 800bbc0:	05d9      	lsls	r1, r3, #23
 800bbc2:	d50d      	bpl.n	800bbe0 <_scanf_i+0x180>
 800bbc4:	42bd      	cmp	r5, r7
 800bbc6:	d909      	bls.n	800bbdc <_scanf_i+0x17c>
 800bbc8:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800bbcc:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800bbd0:	4632      	mov	r2, r6
 800bbd2:	4650      	mov	r0, sl
 800bbd4:	4798      	blx	r3
 800bbd6:	f105 39ff 	add.w	r9, r5, #4294967295
 800bbda:	464d      	mov	r5, r9
 800bbdc:	42bd      	cmp	r5, r7
 800bbde:	d028      	beq.n	800bc32 <_scanf_i+0x1d2>
 800bbe0:	6822      	ldr	r2, [r4, #0]
 800bbe2:	f012 0210 	ands.w	r2, r2, #16
 800bbe6:	d113      	bne.n	800bc10 <_scanf_i+0x1b0>
 800bbe8:	702a      	strb	r2, [r5, #0]
 800bbea:	6863      	ldr	r3, [r4, #4]
 800bbec:	9e01      	ldr	r6, [sp, #4]
 800bbee:	4639      	mov	r1, r7
 800bbf0:	4650      	mov	r0, sl
 800bbf2:	47b0      	blx	r6
 800bbf4:	f8d8 3000 	ldr.w	r3, [r8]
 800bbf8:	6821      	ldr	r1, [r4, #0]
 800bbfa:	1d1a      	adds	r2, r3, #4
 800bbfc:	f8c8 2000 	str.w	r2, [r8]
 800bc00:	f011 0f20 	tst.w	r1, #32
 800bc04:	681b      	ldr	r3, [r3, #0]
 800bc06:	d00f      	beq.n	800bc28 <_scanf_i+0x1c8>
 800bc08:	6018      	str	r0, [r3, #0]
 800bc0a:	68e3      	ldr	r3, [r4, #12]
 800bc0c:	3301      	adds	r3, #1
 800bc0e:	60e3      	str	r3, [r4, #12]
 800bc10:	6923      	ldr	r3, [r4, #16]
 800bc12:	1bed      	subs	r5, r5, r7
 800bc14:	445d      	add	r5, fp
 800bc16:	442b      	add	r3, r5
 800bc18:	6123      	str	r3, [r4, #16]
 800bc1a:	2000      	movs	r0, #0
 800bc1c:	b007      	add	sp, #28
 800bc1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc22:	f04f 0b00 	mov.w	fp, #0
 800bc26:	e7ca      	b.n	800bbbe <_scanf_i+0x15e>
 800bc28:	07ca      	lsls	r2, r1, #31
 800bc2a:	bf4c      	ite	mi
 800bc2c:	8018      	strhmi	r0, [r3, #0]
 800bc2e:	6018      	strpl	r0, [r3, #0]
 800bc30:	e7eb      	b.n	800bc0a <_scanf_i+0x1aa>
 800bc32:	2001      	movs	r0, #1
 800bc34:	e7f2      	b.n	800bc1c <_scanf_i+0x1bc>
 800bc36:	bf00      	nop
 800bc38:	0800c884 	.word	0x0800c884
 800bc3c:	0800c091 	.word	0x0800c091
 800bc40:	0800b335 	.word	0x0800b335
 800bc44:	0800d8aa 	.word	0x0800d8aa

0800bc48 <__sflush_r>:
 800bc48:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800bc4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bc50:	0716      	lsls	r6, r2, #28
 800bc52:	4605      	mov	r5, r0
 800bc54:	460c      	mov	r4, r1
 800bc56:	d454      	bmi.n	800bd02 <__sflush_r+0xba>
 800bc58:	684b      	ldr	r3, [r1, #4]
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	dc02      	bgt.n	800bc64 <__sflush_r+0x1c>
 800bc5e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800bc60:	2b00      	cmp	r3, #0
 800bc62:	dd48      	ble.n	800bcf6 <__sflush_r+0xae>
 800bc64:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800bc66:	2e00      	cmp	r6, #0
 800bc68:	d045      	beq.n	800bcf6 <__sflush_r+0xae>
 800bc6a:	2300      	movs	r3, #0
 800bc6c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800bc70:	682f      	ldr	r7, [r5, #0]
 800bc72:	6a21      	ldr	r1, [r4, #32]
 800bc74:	602b      	str	r3, [r5, #0]
 800bc76:	d030      	beq.n	800bcda <__sflush_r+0x92>
 800bc78:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800bc7a:	89a3      	ldrh	r3, [r4, #12]
 800bc7c:	0759      	lsls	r1, r3, #29
 800bc7e:	d505      	bpl.n	800bc8c <__sflush_r+0x44>
 800bc80:	6863      	ldr	r3, [r4, #4]
 800bc82:	1ad2      	subs	r2, r2, r3
 800bc84:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800bc86:	b10b      	cbz	r3, 800bc8c <__sflush_r+0x44>
 800bc88:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800bc8a:	1ad2      	subs	r2, r2, r3
 800bc8c:	2300      	movs	r3, #0
 800bc8e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800bc90:	6a21      	ldr	r1, [r4, #32]
 800bc92:	4628      	mov	r0, r5
 800bc94:	47b0      	blx	r6
 800bc96:	1c43      	adds	r3, r0, #1
 800bc98:	89a3      	ldrh	r3, [r4, #12]
 800bc9a:	d106      	bne.n	800bcaa <__sflush_r+0x62>
 800bc9c:	6829      	ldr	r1, [r5, #0]
 800bc9e:	291d      	cmp	r1, #29
 800bca0:	d82b      	bhi.n	800bcfa <__sflush_r+0xb2>
 800bca2:	4a2a      	ldr	r2, [pc, #168]	@ (800bd4c <__sflush_r+0x104>)
 800bca4:	410a      	asrs	r2, r1
 800bca6:	07d6      	lsls	r6, r2, #31
 800bca8:	d427      	bmi.n	800bcfa <__sflush_r+0xb2>
 800bcaa:	2200      	movs	r2, #0
 800bcac:	6062      	str	r2, [r4, #4]
 800bcae:	04d9      	lsls	r1, r3, #19
 800bcb0:	6922      	ldr	r2, [r4, #16]
 800bcb2:	6022      	str	r2, [r4, #0]
 800bcb4:	d504      	bpl.n	800bcc0 <__sflush_r+0x78>
 800bcb6:	1c42      	adds	r2, r0, #1
 800bcb8:	d101      	bne.n	800bcbe <__sflush_r+0x76>
 800bcba:	682b      	ldr	r3, [r5, #0]
 800bcbc:	b903      	cbnz	r3, 800bcc0 <__sflush_r+0x78>
 800bcbe:	6560      	str	r0, [r4, #84]	@ 0x54
 800bcc0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bcc2:	602f      	str	r7, [r5, #0]
 800bcc4:	b1b9      	cbz	r1, 800bcf6 <__sflush_r+0xae>
 800bcc6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800bcca:	4299      	cmp	r1, r3
 800bccc:	d002      	beq.n	800bcd4 <__sflush_r+0x8c>
 800bcce:	4628      	mov	r0, r5
 800bcd0:	f7fe fa36 	bl	800a140 <_free_r>
 800bcd4:	2300      	movs	r3, #0
 800bcd6:	6363      	str	r3, [r4, #52]	@ 0x34
 800bcd8:	e00d      	b.n	800bcf6 <__sflush_r+0xae>
 800bcda:	2301      	movs	r3, #1
 800bcdc:	4628      	mov	r0, r5
 800bcde:	47b0      	blx	r6
 800bce0:	4602      	mov	r2, r0
 800bce2:	1c50      	adds	r0, r2, #1
 800bce4:	d1c9      	bne.n	800bc7a <__sflush_r+0x32>
 800bce6:	682b      	ldr	r3, [r5, #0]
 800bce8:	2b00      	cmp	r3, #0
 800bcea:	d0c6      	beq.n	800bc7a <__sflush_r+0x32>
 800bcec:	2b1d      	cmp	r3, #29
 800bcee:	d001      	beq.n	800bcf4 <__sflush_r+0xac>
 800bcf0:	2b16      	cmp	r3, #22
 800bcf2:	d11e      	bne.n	800bd32 <__sflush_r+0xea>
 800bcf4:	602f      	str	r7, [r5, #0]
 800bcf6:	2000      	movs	r0, #0
 800bcf8:	e022      	b.n	800bd40 <__sflush_r+0xf8>
 800bcfa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bcfe:	b21b      	sxth	r3, r3
 800bd00:	e01b      	b.n	800bd3a <__sflush_r+0xf2>
 800bd02:	690f      	ldr	r7, [r1, #16]
 800bd04:	2f00      	cmp	r7, #0
 800bd06:	d0f6      	beq.n	800bcf6 <__sflush_r+0xae>
 800bd08:	0793      	lsls	r3, r2, #30
 800bd0a:	680e      	ldr	r6, [r1, #0]
 800bd0c:	bf08      	it	eq
 800bd0e:	694b      	ldreq	r3, [r1, #20]
 800bd10:	600f      	str	r7, [r1, #0]
 800bd12:	bf18      	it	ne
 800bd14:	2300      	movne	r3, #0
 800bd16:	eba6 0807 	sub.w	r8, r6, r7
 800bd1a:	608b      	str	r3, [r1, #8]
 800bd1c:	f1b8 0f00 	cmp.w	r8, #0
 800bd20:	dde9      	ble.n	800bcf6 <__sflush_r+0xae>
 800bd22:	6a21      	ldr	r1, [r4, #32]
 800bd24:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800bd26:	4643      	mov	r3, r8
 800bd28:	463a      	mov	r2, r7
 800bd2a:	4628      	mov	r0, r5
 800bd2c:	47b0      	blx	r6
 800bd2e:	2800      	cmp	r0, #0
 800bd30:	dc08      	bgt.n	800bd44 <__sflush_r+0xfc>
 800bd32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bd36:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bd3a:	81a3      	strh	r3, [r4, #12]
 800bd3c:	f04f 30ff 	mov.w	r0, #4294967295
 800bd40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bd44:	4407      	add	r7, r0
 800bd46:	eba8 0800 	sub.w	r8, r8, r0
 800bd4a:	e7e7      	b.n	800bd1c <__sflush_r+0xd4>
 800bd4c:	dfbffffe 	.word	0xdfbffffe

0800bd50 <_fflush_r>:
 800bd50:	b538      	push	{r3, r4, r5, lr}
 800bd52:	690b      	ldr	r3, [r1, #16]
 800bd54:	4605      	mov	r5, r0
 800bd56:	460c      	mov	r4, r1
 800bd58:	b913      	cbnz	r3, 800bd60 <_fflush_r+0x10>
 800bd5a:	2500      	movs	r5, #0
 800bd5c:	4628      	mov	r0, r5
 800bd5e:	bd38      	pop	{r3, r4, r5, pc}
 800bd60:	b118      	cbz	r0, 800bd6a <_fflush_r+0x1a>
 800bd62:	6a03      	ldr	r3, [r0, #32]
 800bd64:	b90b      	cbnz	r3, 800bd6a <_fflush_r+0x1a>
 800bd66:	f7fc fc63 	bl	8008630 <__sinit>
 800bd6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bd6e:	2b00      	cmp	r3, #0
 800bd70:	d0f3      	beq.n	800bd5a <_fflush_r+0xa>
 800bd72:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800bd74:	07d0      	lsls	r0, r2, #31
 800bd76:	d404      	bmi.n	800bd82 <_fflush_r+0x32>
 800bd78:	0599      	lsls	r1, r3, #22
 800bd7a:	d402      	bmi.n	800bd82 <_fflush_r+0x32>
 800bd7c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bd7e:	f7fd fb69 	bl	8009454 <__retarget_lock_acquire_recursive>
 800bd82:	4628      	mov	r0, r5
 800bd84:	4621      	mov	r1, r4
 800bd86:	f7ff ff5f 	bl	800bc48 <__sflush_r>
 800bd8a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800bd8c:	07da      	lsls	r2, r3, #31
 800bd8e:	4605      	mov	r5, r0
 800bd90:	d4e4      	bmi.n	800bd5c <_fflush_r+0xc>
 800bd92:	89a3      	ldrh	r3, [r4, #12]
 800bd94:	059b      	lsls	r3, r3, #22
 800bd96:	d4e1      	bmi.n	800bd5c <_fflush_r+0xc>
 800bd98:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bd9a:	f7fd fb5d 	bl	8009458 <__retarget_lock_release_recursive>
 800bd9e:	e7dd      	b.n	800bd5c <_fflush_r+0xc>

0800bda0 <__sccl>:
 800bda0:	b570      	push	{r4, r5, r6, lr}
 800bda2:	780b      	ldrb	r3, [r1, #0]
 800bda4:	4604      	mov	r4, r0
 800bda6:	2b5e      	cmp	r3, #94	@ 0x5e
 800bda8:	bf0b      	itete	eq
 800bdaa:	784b      	ldrbeq	r3, [r1, #1]
 800bdac:	1c4a      	addne	r2, r1, #1
 800bdae:	1c8a      	addeq	r2, r1, #2
 800bdb0:	2100      	movne	r1, #0
 800bdb2:	bf08      	it	eq
 800bdb4:	2101      	moveq	r1, #1
 800bdb6:	3801      	subs	r0, #1
 800bdb8:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 800bdbc:	f800 1f01 	strb.w	r1, [r0, #1]!
 800bdc0:	42a8      	cmp	r0, r5
 800bdc2:	d1fb      	bne.n	800bdbc <__sccl+0x1c>
 800bdc4:	b90b      	cbnz	r3, 800bdca <__sccl+0x2a>
 800bdc6:	1e50      	subs	r0, r2, #1
 800bdc8:	bd70      	pop	{r4, r5, r6, pc}
 800bdca:	f081 0101 	eor.w	r1, r1, #1
 800bdce:	54e1      	strb	r1, [r4, r3]
 800bdd0:	4610      	mov	r0, r2
 800bdd2:	4602      	mov	r2, r0
 800bdd4:	f812 5b01 	ldrb.w	r5, [r2], #1
 800bdd8:	2d2d      	cmp	r5, #45	@ 0x2d
 800bdda:	d005      	beq.n	800bde8 <__sccl+0x48>
 800bddc:	2d5d      	cmp	r5, #93	@ 0x5d
 800bdde:	d016      	beq.n	800be0e <__sccl+0x6e>
 800bde0:	2d00      	cmp	r5, #0
 800bde2:	d0f1      	beq.n	800bdc8 <__sccl+0x28>
 800bde4:	462b      	mov	r3, r5
 800bde6:	e7f2      	b.n	800bdce <__sccl+0x2e>
 800bde8:	7846      	ldrb	r6, [r0, #1]
 800bdea:	2e5d      	cmp	r6, #93	@ 0x5d
 800bdec:	d0fa      	beq.n	800bde4 <__sccl+0x44>
 800bdee:	42b3      	cmp	r3, r6
 800bdf0:	dcf8      	bgt.n	800bde4 <__sccl+0x44>
 800bdf2:	3002      	adds	r0, #2
 800bdf4:	461a      	mov	r2, r3
 800bdf6:	3201      	adds	r2, #1
 800bdf8:	4296      	cmp	r6, r2
 800bdfa:	54a1      	strb	r1, [r4, r2]
 800bdfc:	dcfb      	bgt.n	800bdf6 <__sccl+0x56>
 800bdfe:	1af2      	subs	r2, r6, r3
 800be00:	3a01      	subs	r2, #1
 800be02:	1c5d      	adds	r5, r3, #1
 800be04:	42b3      	cmp	r3, r6
 800be06:	bfa8      	it	ge
 800be08:	2200      	movge	r2, #0
 800be0a:	18ab      	adds	r3, r5, r2
 800be0c:	e7e1      	b.n	800bdd2 <__sccl+0x32>
 800be0e:	4610      	mov	r0, r2
 800be10:	e7da      	b.n	800bdc8 <__sccl+0x28>

0800be12 <__submore>:
 800be12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800be16:	460c      	mov	r4, r1
 800be18:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800be1a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800be1e:	4299      	cmp	r1, r3
 800be20:	d11d      	bne.n	800be5e <__submore+0x4c>
 800be22:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800be26:	f7fb f883 	bl	8006f30 <_malloc_r>
 800be2a:	b918      	cbnz	r0, 800be34 <__submore+0x22>
 800be2c:	f04f 30ff 	mov.w	r0, #4294967295
 800be30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800be34:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800be38:	63a3      	str	r3, [r4, #56]	@ 0x38
 800be3a:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 800be3e:	6360      	str	r0, [r4, #52]	@ 0x34
 800be40:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 800be44:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800be48:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 800be4c:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800be50:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 800be54:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 800be58:	6020      	str	r0, [r4, #0]
 800be5a:	2000      	movs	r0, #0
 800be5c:	e7e8      	b.n	800be30 <__submore+0x1e>
 800be5e:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 800be60:	0077      	lsls	r7, r6, #1
 800be62:	463a      	mov	r2, r7
 800be64:	f000 f86c 	bl	800bf40 <_realloc_r>
 800be68:	4605      	mov	r5, r0
 800be6a:	2800      	cmp	r0, #0
 800be6c:	d0de      	beq.n	800be2c <__submore+0x1a>
 800be6e:	eb00 0806 	add.w	r8, r0, r6
 800be72:	4601      	mov	r1, r0
 800be74:	4632      	mov	r2, r6
 800be76:	4640      	mov	r0, r8
 800be78:	f7fd faf7 	bl	800946a <memcpy>
 800be7c:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 800be80:	f8c4 8000 	str.w	r8, [r4]
 800be84:	e7e9      	b.n	800be5a <__submore+0x48>

0800be86 <memmove>:
 800be86:	4288      	cmp	r0, r1
 800be88:	b510      	push	{r4, lr}
 800be8a:	eb01 0402 	add.w	r4, r1, r2
 800be8e:	d902      	bls.n	800be96 <memmove+0x10>
 800be90:	4284      	cmp	r4, r0
 800be92:	4623      	mov	r3, r4
 800be94:	d807      	bhi.n	800bea6 <memmove+0x20>
 800be96:	1e43      	subs	r3, r0, #1
 800be98:	42a1      	cmp	r1, r4
 800be9a:	d008      	beq.n	800beae <memmove+0x28>
 800be9c:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bea0:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bea4:	e7f8      	b.n	800be98 <memmove+0x12>
 800bea6:	4402      	add	r2, r0
 800bea8:	4601      	mov	r1, r0
 800beaa:	428a      	cmp	r2, r1
 800beac:	d100      	bne.n	800beb0 <memmove+0x2a>
 800beae:	bd10      	pop	{r4, pc}
 800beb0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800beb4:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800beb8:	e7f7      	b.n	800beaa <memmove+0x24>
	...

0800bebc <__gettzinfo>:
 800bebc:	4800      	ldr	r0, [pc, #0]	@ (800bec0 <__gettzinfo+0x4>)
 800bebe:	4770      	bx	lr
 800bec0:	200001e8 	.word	0x200001e8

0800bec4 <__assert_func>:
 800bec4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bec6:	4614      	mov	r4, r2
 800bec8:	461a      	mov	r2, r3
 800beca:	4b09      	ldr	r3, [pc, #36]	@ (800bef0 <__assert_func+0x2c>)
 800becc:	681b      	ldr	r3, [r3, #0]
 800bece:	4605      	mov	r5, r0
 800bed0:	68d8      	ldr	r0, [r3, #12]
 800bed2:	b954      	cbnz	r4, 800beea <__assert_func+0x26>
 800bed4:	4b07      	ldr	r3, [pc, #28]	@ (800bef4 <__assert_func+0x30>)
 800bed6:	461c      	mov	r4, r3
 800bed8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800bedc:	9100      	str	r1, [sp, #0]
 800bede:	462b      	mov	r3, r5
 800bee0:	4905      	ldr	r1, [pc, #20]	@ (800bef8 <__assert_func+0x34>)
 800bee2:	f000 f8d7 	bl	800c094 <fiprintf>
 800bee6:	f000 f8e7 	bl	800c0b8 <abort>
 800beea:	4b04      	ldr	r3, [pc, #16]	@ (800befc <__assert_func+0x38>)
 800beec:	e7f4      	b.n	800bed8 <__assert_func+0x14>
 800beee:	bf00      	nop
 800bef0:	20000198 	.word	0x20000198
 800bef4:	0800c979 	.word	0x0800c979
 800bef8:	0800d925 	.word	0x0800d925
 800befc:	0800d918 	.word	0x0800d918

0800bf00 <_calloc_r>:
 800bf00:	b570      	push	{r4, r5, r6, lr}
 800bf02:	fba1 5402 	umull	r5, r4, r1, r2
 800bf06:	b93c      	cbnz	r4, 800bf18 <_calloc_r+0x18>
 800bf08:	4629      	mov	r1, r5
 800bf0a:	f7fb f811 	bl	8006f30 <_malloc_r>
 800bf0e:	4606      	mov	r6, r0
 800bf10:	b928      	cbnz	r0, 800bf1e <_calloc_r+0x1e>
 800bf12:	2600      	movs	r6, #0
 800bf14:	4630      	mov	r0, r6
 800bf16:	bd70      	pop	{r4, r5, r6, pc}
 800bf18:	220c      	movs	r2, #12
 800bf1a:	6002      	str	r2, [r0, #0]
 800bf1c:	e7f9      	b.n	800bf12 <_calloc_r+0x12>
 800bf1e:	462a      	mov	r2, r5
 800bf20:	4621      	mov	r1, r4
 800bf22:	f7fc fc7e 	bl	8008822 <memset>
 800bf26:	e7f5      	b.n	800bf14 <_calloc_r+0x14>

0800bf28 <__env_lock>:
 800bf28:	4801      	ldr	r0, [pc, #4]	@ (800bf30 <__env_lock+0x8>)
 800bf2a:	f7fd ba93 	b.w	8009454 <__retarget_lock_acquire_recursive>
 800bf2e:	bf00      	nop
 800bf30:	20004c29 	.word	0x20004c29

0800bf34 <__env_unlock>:
 800bf34:	4801      	ldr	r0, [pc, #4]	@ (800bf3c <__env_unlock+0x8>)
 800bf36:	f7fd ba8f 	b.w	8009458 <__retarget_lock_release_recursive>
 800bf3a:	bf00      	nop
 800bf3c:	20004c29 	.word	0x20004c29

0800bf40 <_realloc_r>:
 800bf40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bf44:	4680      	mov	r8, r0
 800bf46:	4615      	mov	r5, r2
 800bf48:	460c      	mov	r4, r1
 800bf4a:	b921      	cbnz	r1, 800bf56 <_realloc_r+0x16>
 800bf4c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bf50:	4611      	mov	r1, r2
 800bf52:	f7fa bfed 	b.w	8006f30 <_malloc_r>
 800bf56:	b92a      	cbnz	r2, 800bf64 <_realloc_r+0x24>
 800bf58:	f7fe f8f2 	bl	800a140 <_free_r>
 800bf5c:	2400      	movs	r4, #0
 800bf5e:	4620      	mov	r0, r4
 800bf60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bf64:	f000 f8af 	bl	800c0c6 <_malloc_usable_size_r>
 800bf68:	4285      	cmp	r5, r0
 800bf6a:	4606      	mov	r6, r0
 800bf6c:	d802      	bhi.n	800bf74 <_realloc_r+0x34>
 800bf6e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800bf72:	d8f4      	bhi.n	800bf5e <_realloc_r+0x1e>
 800bf74:	4629      	mov	r1, r5
 800bf76:	4640      	mov	r0, r8
 800bf78:	f7fa ffda 	bl	8006f30 <_malloc_r>
 800bf7c:	4607      	mov	r7, r0
 800bf7e:	2800      	cmp	r0, #0
 800bf80:	d0ec      	beq.n	800bf5c <_realloc_r+0x1c>
 800bf82:	42b5      	cmp	r5, r6
 800bf84:	462a      	mov	r2, r5
 800bf86:	4621      	mov	r1, r4
 800bf88:	bf28      	it	cs
 800bf8a:	4632      	movcs	r2, r6
 800bf8c:	f7fd fa6d 	bl	800946a <memcpy>
 800bf90:	4621      	mov	r1, r4
 800bf92:	4640      	mov	r0, r8
 800bf94:	f7fe f8d4 	bl	800a140 <_free_r>
 800bf98:	463c      	mov	r4, r7
 800bf9a:	e7e0      	b.n	800bf5e <_realloc_r+0x1e>

0800bf9c <_strtol_l.constprop.0>:
 800bf9c:	2b24      	cmp	r3, #36	@ 0x24
 800bf9e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bfa2:	4686      	mov	lr, r0
 800bfa4:	4690      	mov	r8, r2
 800bfa6:	d801      	bhi.n	800bfac <_strtol_l.constprop.0+0x10>
 800bfa8:	2b01      	cmp	r3, #1
 800bfaa:	d106      	bne.n	800bfba <_strtol_l.constprop.0+0x1e>
 800bfac:	f7fd fa26 	bl	80093fc <__errno>
 800bfb0:	2316      	movs	r3, #22
 800bfb2:	6003      	str	r3, [r0, #0]
 800bfb4:	2000      	movs	r0, #0
 800bfb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bfba:	4834      	ldr	r0, [pc, #208]	@ (800c08c <_strtol_l.constprop.0+0xf0>)
 800bfbc:	460d      	mov	r5, r1
 800bfbe:	462a      	mov	r2, r5
 800bfc0:	f815 4b01 	ldrb.w	r4, [r5], #1
 800bfc4:	5d06      	ldrb	r6, [r0, r4]
 800bfc6:	f016 0608 	ands.w	r6, r6, #8
 800bfca:	d1f8      	bne.n	800bfbe <_strtol_l.constprop.0+0x22>
 800bfcc:	2c2d      	cmp	r4, #45	@ 0x2d
 800bfce:	d12d      	bne.n	800c02c <_strtol_l.constprop.0+0x90>
 800bfd0:	782c      	ldrb	r4, [r5, #0]
 800bfd2:	2601      	movs	r6, #1
 800bfd4:	1c95      	adds	r5, r2, #2
 800bfd6:	f033 0210 	bics.w	r2, r3, #16
 800bfda:	d109      	bne.n	800bff0 <_strtol_l.constprop.0+0x54>
 800bfdc:	2c30      	cmp	r4, #48	@ 0x30
 800bfde:	d12a      	bne.n	800c036 <_strtol_l.constprop.0+0x9a>
 800bfe0:	782a      	ldrb	r2, [r5, #0]
 800bfe2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800bfe6:	2a58      	cmp	r2, #88	@ 0x58
 800bfe8:	d125      	bne.n	800c036 <_strtol_l.constprop.0+0x9a>
 800bfea:	786c      	ldrb	r4, [r5, #1]
 800bfec:	2310      	movs	r3, #16
 800bfee:	3502      	adds	r5, #2
 800bff0:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800bff4:	f10c 3cff 	add.w	ip, ip, #4294967295
 800bff8:	2200      	movs	r2, #0
 800bffa:	fbbc f9f3 	udiv	r9, ip, r3
 800bffe:	4610      	mov	r0, r2
 800c000:	fb03 ca19 	mls	sl, r3, r9, ip
 800c004:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800c008:	2f09      	cmp	r7, #9
 800c00a:	d81b      	bhi.n	800c044 <_strtol_l.constprop.0+0xa8>
 800c00c:	463c      	mov	r4, r7
 800c00e:	42a3      	cmp	r3, r4
 800c010:	dd27      	ble.n	800c062 <_strtol_l.constprop.0+0xc6>
 800c012:	1c57      	adds	r7, r2, #1
 800c014:	d007      	beq.n	800c026 <_strtol_l.constprop.0+0x8a>
 800c016:	4581      	cmp	r9, r0
 800c018:	d320      	bcc.n	800c05c <_strtol_l.constprop.0+0xc0>
 800c01a:	d101      	bne.n	800c020 <_strtol_l.constprop.0+0x84>
 800c01c:	45a2      	cmp	sl, r4
 800c01e:	db1d      	blt.n	800c05c <_strtol_l.constprop.0+0xc0>
 800c020:	fb00 4003 	mla	r0, r0, r3, r4
 800c024:	2201      	movs	r2, #1
 800c026:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c02a:	e7eb      	b.n	800c004 <_strtol_l.constprop.0+0x68>
 800c02c:	2c2b      	cmp	r4, #43	@ 0x2b
 800c02e:	bf04      	itt	eq
 800c030:	782c      	ldrbeq	r4, [r5, #0]
 800c032:	1c95      	addeq	r5, r2, #2
 800c034:	e7cf      	b.n	800bfd6 <_strtol_l.constprop.0+0x3a>
 800c036:	2b00      	cmp	r3, #0
 800c038:	d1da      	bne.n	800bff0 <_strtol_l.constprop.0+0x54>
 800c03a:	2c30      	cmp	r4, #48	@ 0x30
 800c03c:	bf0c      	ite	eq
 800c03e:	2308      	moveq	r3, #8
 800c040:	230a      	movne	r3, #10
 800c042:	e7d5      	b.n	800bff0 <_strtol_l.constprop.0+0x54>
 800c044:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800c048:	2f19      	cmp	r7, #25
 800c04a:	d801      	bhi.n	800c050 <_strtol_l.constprop.0+0xb4>
 800c04c:	3c37      	subs	r4, #55	@ 0x37
 800c04e:	e7de      	b.n	800c00e <_strtol_l.constprop.0+0x72>
 800c050:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800c054:	2f19      	cmp	r7, #25
 800c056:	d804      	bhi.n	800c062 <_strtol_l.constprop.0+0xc6>
 800c058:	3c57      	subs	r4, #87	@ 0x57
 800c05a:	e7d8      	b.n	800c00e <_strtol_l.constprop.0+0x72>
 800c05c:	f04f 32ff 	mov.w	r2, #4294967295
 800c060:	e7e1      	b.n	800c026 <_strtol_l.constprop.0+0x8a>
 800c062:	1c53      	adds	r3, r2, #1
 800c064:	d108      	bne.n	800c078 <_strtol_l.constprop.0+0xdc>
 800c066:	2322      	movs	r3, #34	@ 0x22
 800c068:	f8ce 3000 	str.w	r3, [lr]
 800c06c:	4660      	mov	r0, ip
 800c06e:	f1b8 0f00 	cmp.w	r8, #0
 800c072:	d0a0      	beq.n	800bfb6 <_strtol_l.constprop.0+0x1a>
 800c074:	1e69      	subs	r1, r5, #1
 800c076:	e006      	b.n	800c086 <_strtol_l.constprop.0+0xea>
 800c078:	b106      	cbz	r6, 800c07c <_strtol_l.constprop.0+0xe0>
 800c07a:	4240      	negs	r0, r0
 800c07c:	f1b8 0f00 	cmp.w	r8, #0
 800c080:	d099      	beq.n	800bfb6 <_strtol_l.constprop.0+0x1a>
 800c082:	2a00      	cmp	r2, #0
 800c084:	d1f6      	bne.n	800c074 <_strtol_l.constprop.0+0xd8>
 800c086:	f8c8 1000 	str.w	r1, [r8]
 800c08a:	e794      	b.n	800bfb6 <_strtol_l.constprop.0+0x1a>
 800c08c:	0800d789 	.word	0x0800d789

0800c090 <_strtol_r>:
 800c090:	f7ff bf84 	b.w	800bf9c <_strtol_l.constprop.0>

0800c094 <fiprintf>:
 800c094:	b40e      	push	{r1, r2, r3}
 800c096:	b503      	push	{r0, r1, lr}
 800c098:	4601      	mov	r1, r0
 800c09a:	ab03      	add	r3, sp, #12
 800c09c:	4805      	ldr	r0, [pc, #20]	@ (800c0b4 <fiprintf+0x20>)
 800c09e:	f853 2b04 	ldr.w	r2, [r3], #4
 800c0a2:	6800      	ldr	r0, [r0, #0]
 800c0a4:	9301      	str	r3, [sp, #4]
 800c0a6:	f000 f83f 	bl	800c128 <_vfiprintf_r>
 800c0aa:	b002      	add	sp, #8
 800c0ac:	f85d eb04 	ldr.w	lr, [sp], #4
 800c0b0:	b003      	add	sp, #12
 800c0b2:	4770      	bx	lr
 800c0b4:	20000198 	.word	0x20000198

0800c0b8 <abort>:
 800c0b8:	b508      	push	{r3, lr}
 800c0ba:	2006      	movs	r0, #6
 800c0bc:	f000 fa08 	bl	800c4d0 <raise>
 800c0c0:	2001      	movs	r0, #1
 800c0c2:	f7f7 f92b 	bl	800331c <_exit>

0800c0c6 <_malloc_usable_size_r>:
 800c0c6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c0ca:	1f18      	subs	r0, r3, #4
 800c0cc:	2b00      	cmp	r3, #0
 800c0ce:	bfbc      	itt	lt
 800c0d0:	580b      	ldrlt	r3, [r1, r0]
 800c0d2:	18c0      	addlt	r0, r0, r3
 800c0d4:	4770      	bx	lr

0800c0d6 <__sfputc_r>:
 800c0d6:	6893      	ldr	r3, [r2, #8]
 800c0d8:	3b01      	subs	r3, #1
 800c0da:	2b00      	cmp	r3, #0
 800c0dc:	b410      	push	{r4}
 800c0de:	6093      	str	r3, [r2, #8]
 800c0e0:	da08      	bge.n	800c0f4 <__sfputc_r+0x1e>
 800c0e2:	6994      	ldr	r4, [r2, #24]
 800c0e4:	42a3      	cmp	r3, r4
 800c0e6:	db01      	blt.n	800c0ec <__sfputc_r+0x16>
 800c0e8:	290a      	cmp	r1, #10
 800c0ea:	d103      	bne.n	800c0f4 <__sfputc_r+0x1e>
 800c0ec:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c0f0:	f000 b932 	b.w	800c358 <__swbuf_r>
 800c0f4:	6813      	ldr	r3, [r2, #0]
 800c0f6:	1c58      	adds	r0, r3, #1
 800c0f8:	6010      	str	r0, [r2, #0]
 800c0fa:	7019      	strb	r1, [r3, #0]
 800c0fc:	4608      	mov	r0, r1
 800c0fe:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c102:	4770      	bx	lr

0800c104 <__sfputs_r>:
 800c104:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c106:	4606      	mov	r6, r0
 800c108:	460f      	mov	r7, r1
 800c10a:	4614      	mov	r4, r2
 800c10c:	18d5      	adds	r5, r2, r3
 800c10e:	42ac      	cmp	r4, r5
 800c110:	d101      	bne.n	800c116 <__sfputs_r+0x12>
 800c112:	2000      	movs	r0, #0
 800c114:	e007      	b.n	800c126 <__sfputs_r+0x22>
 800c116:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c11a:	463a      	mov	r2, r7
 800c11c:	4630      	mov	r0, r6
 800c11e:	f7ff ffda 	bl	800c0d6 <__sfputc_r>
 800c122:	1c43      	adds	r3, r0, #1
 800c124:	d1f3      	bne.n	800c10e <__sfputs_r+0xa>
 800c126:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c128 <_vfiprintf_r>:
 800c128:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c12c:	460d      	mov	r5, r1
 800c12e:	b09d      	sub	sp, #116	@ 0x74
 800c130:	4614      	mov	r4, r2
 800c132:	4698      	mov	r8, r3
 800c134:	4606      	mov	r6, r0
 800c136:	b118      	cbz	r0, 800c140 <_vfiprintf_r+0x18>
 800c138:	6a03      	ldr	r3, [r0, #32]
 800c13a:	b90b      	cbnz	r3, 800c140 <_vfiprintf_r+0x18>
 800c13c:	f7fc fa78 	bl	8008630 <__sinit>
 800c140:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c142:	07d9      	lsls	r1, r3, #31
 800c144:	d405      	bmi.n	800c152 <_vfiprintf_r+0x2a>
 800c146:	89ab      	ldrh	r3, [r5, #12]
 800c148:	059a      	lsls	r2, r3, #22
 800c14a:	d402      	bmi.n	800c152 <_vfiprintf_r+0x2a>
 800c14c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c14e:	f7fd f981 	bl	8009454 <__retarget_lock_acquire_recursive>
 800c152:	89ab      	ldrh	r3, [r5, #12]
 800c154:	071b      	lsls	r3, r3, #28
 800c156:	d501      	bpl.n	800c15c <_vfiprintf_r+0x34>
 800c158:	692b      	ldr	r3, [r5, #16]
 800c15a:	b99b      	cbnz	r3, 800c184 <_vfiprintf_r+0x5c>
 800c15c:	4629      	mov	r1, r5
 800c15e:	4630      	mov	r0, r6
 800c160:	f000 f938 	bl	800c3d4 <__swsetup_r>
 800c164:	b170      	cbz	r0, 800c184 <_vfiprintf_r+0x5c>
 800c166:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c168:	07dc      	lsls	r4, r3, #31
 800c16a:	d504      	bpl.n	800c176 <_vfiprintf_r+0x4e>
 800c16c:	f04f 30ff 	mov.w	r0, #4294967295
 800c170:	b01d      	add	sp, #116	@ 0x74
 800c172:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c176:	89ab      	ldrh	r3, [r5, #12]
 800c178:	0598      	lsls	r0, r3, #22
 800c17a:	d4f7      	bmi.n	800c16c <_vfiprintf_r+0x44>
 800c17c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c17e:	f7fd f96b 	bl	8009458 <__retarget_lock_release_recursive>
 800c182:	e7f3      	b.n	800c16c <_vfiprintf_r+0x44>
 800c184:	2300      	movs	r3, #0
 800c186:	9309      	str	r3, [sp, #36]	@ 0x24
 800c188:	2320      	movs	r3, #32
 800c18a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c18e:	f8cd 800c 	str.w	r8, [sp, #12]
 800c192:	2330      	movs	r3, #48	@ 0x30
 800c194:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800c344 <_vfiprintf_r+0x21c>
 800c198:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c19c:	f04f 0901 	mov.w	r9, #1
 800c1a0:	4623      	mov	r3, r4
 800c1a2:	469a      	mov	sl, r3
 800c1a4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c1a8:	b10a      	cbz	r2, 800c1ae <_vfiprintf_r+0x86>
 800c1aa:	2a25      	cmp	r2, #37	@ 0x25
 800c1ac:	d1f9      	bne.n	800c1a2 <_vfiprintf_r+0x7a>
 800c1ae:	ebba 0b04 	subs.w	fp, sl, r4
 800c1b2:	d00b      	beq.n	800c1cc <_vfiprintf_r+0xa4>
 800c1b4:	465b      	mov	r3, fp
 800c1b6:	4622      	mov	r2, r4
 800c1b8:	4629      	mov	r1, r5
 800c1ba:	4630      	mov	r0, r6
 800c1bc:	f7ff ffa2 	bl	800c104 <__sfputs_r>
 800c1c0:	3001      	adds	r0, #1
 800c1c2:	f000 80a7 	beq.w	800c314 <_vfiprintf_r+0x1ec>
 800c1c6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c1c8:	445a      	add	r2, fp
 800c1ca:	9209      	str	r2, [sp, #36]	@ 0x24
 800c1cc:	f89a 3000 	ldrb.w	r3, [sl]
 800c1d0:	2b00      	cmp	r3, #0
 800c1d2:	f000 809f 	beq.w	800c314 <_vfiprintf_r+0x1ec>
 800c1d6:	2300      	movs	r3, #0
 800c1d8:	f04f 32ff 	mov.w	r2, #4294967295
 800c1dc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c1e0:	f10a 0a01 	add.w	sl, sl, #1
 800c1e4:	9304      	str	r3, [sp, #16]
 800c1e6:	9307      	str	r3, [sp, #28]
 800c1e8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c1ec:	931a      	str	r3, [sp, #104]	@ 0x68
 800c1ee:	4654      	mov	r4, sl
 800c1f0:	2205      	movs	r2, #5
 800c1f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c1f6:	4853      	ldr	r0, [pc, #332]	@ (800c344 <_vfiprintf_r+0x21c>)
 800c1f8:	f7f3 fffa 	bl	80001f0 <memchr>
 800c1fc:	9a04      	ldr	r2, [sp, #16]
 800c1fe:	b9d8      	cbnz	r0, 800c238 <_vfiprintf_r+0x110>
 800c200:	06d1      	lsls	r1, r2, #27
 800c202:	bf44      	itt	mi
 800c204:	2320      	movmi	r3, #32
 800c206:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c20a:	0713      	lsls	r3, r2, #28
 800c20c:	bf44      	itt	mi
 800c20e:	232b      	movmi	r3, #43	@ 0x2b
 800c210:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c214:	f89a 3000 	ldrb.w	r3, [sl]
 800c218:	2b2a      	cmp	r3, #42	@ 0x2a
 800c21a:	d015      	beq.n	800c248 <_vfiprintf_r+0x120>
 800c21c:	9a07      	ldr	r2, [sp, #28]
 800c21e:	4654      	mov	r4, sl
 800c220:	2000      	movs	r0, #0
 800c222:	f04f 0c0a 	mov.w	ip, #10
 800c226:	4621      	mov	r1, r4
 800c228:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c22c:	3b30      	subs	r3, #48	@ 0x30
 800c22e:	2b09      	cmp	r3, #9
 800c230:	d94b      	bls.n	800c2ca <_vfiprintf_r+0x1a2>
 800c232:	b1b0      	cbz	r0, 800c262 <_vfiprintf_r+0x13a>
 800c234:	9207      	str	r2, [sp, #28]
 800c236:	e014      	b.n	800c262 <_vfiprintf_r+0x13a>
 800c238:	eba0 0308 	sub.w	r3, r0, r8
 800c23c:	fa09 f303 	lsl.w	r3, r9, r3
 800c240:	4313      	orrs	r3, r2
 800c242:	9304      	str	r3, [sp, #16]
 800c244:	46a2      	mov	sl, r4
 800c246:	e7d2      	b.n	800c1ee <_vfiprintf_r+0xc6>
 800c248:	9b03      	ldr	r3, [sp, #12]
 800c24a:	1d19      	adds	r1, r3, #4
 800c24c:	681b      	ldr	r3, [r3, #0]
 800c24e:	9103      	str	r1, [sp, #12]
 800c250:	2b00      	cmp	r3, #0
 800c252:	bfbb      	ittet	lt
 800c254:	425b      	neglt	r3, r3
 800c256:	f042 0202 	orrlt.w	r2, r2, #2
 800c25a:	9307      	strge	r3, [sp, #28]
 800c25c:	9307      	strlt	r3, [sp, #28]
 800c25e:	bfb8      	it	lt
 800c260:	9204      	strlt	r2, [sp, #16]
 800c262:	7823      	ldrb	r3, [r4, #0]
 800c264:	2b2e      	cmp	r3, #46	@ 0x2e
 800c266:	d10a      	bne.n	800c27e <_vfiprintf_r+0x156>
 800c268:	7863      	ldrb	r3, [r4, #1]
 800c26a:	2b2a      	cmp	r3, #42	@ 0x2a
 800c26c:	d132      	bne.n	800c2d4 <_vfiprintf_r+0x1ac>
 800c26e:	9b03      	ldr	r3, [sp, #12]
 800c270:	1d1a      	adds	r2, r3, #4
 800c272:	681b      	ldr	r3, [r3, #0]
 800c274:	9203      	str	r2, [sp, #12]
 800c276:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c27a:	3402      	adds	r4, #2
 800c27c:	9305      	str	r3, [sp, #20]
 800c27e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800c354 <_vfiprintf_r+0x22c>
 800c282:	7821      	ldrb	r1, [r4, #0]
 800c284:	2203      	movs	r2, #3
 800c286:	4650      	mov	r0, sl
 800c288:	f7f3 ffb2 	bl	80001f0 <memchr>
 800c28c:	b138      	cbz	r0, 800c29e <_vfiprintf_r+0x176>
 800c28e:	9b04      	ldr	r3, [sp, #16]
 800c290:	eba0 000a 	sub.w	r0, r0, sl
 800c294:	2240      	movs	r2, #64	@ 0x40
 800c296:	4082      	lsls	r2, r0
 800c298:	4313      	orrs	r3, r2
 800c29a:	3401      	adds	r4, #1
 800c29c:	9304      	str	r3, [sp, #16]
 800c29e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c2a2:	4829      	ldr	r0, [pc, #164]	@ (800c348 <_vfiprintf_r+0x220>)
 800c2a4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c2a8:	2206      	movs	r2, #6
 800c2aa:	f7f3 ffa1 	bl	80001f0 <memchr>
 800c2ae:	2800      	cmp	r0, #0
 800c2b0:	d03f      	beq.n	800c332 <_vfiprintf_r+0x20a>
 800c2b2:	4b26      	ldr	r3, [pc, #152]	@ (800c34c <_vfiprintf_r+0x224>)
 800c2b4:	bb1b      	cbnz	r3, 800c2fe <_vfiprintf_r+0x1d6>
 800c2b6:	9b03      	ldr	r3, [sp, #12]
 800c2b8:	3307      	adds	r3, #7
 800c2ba:	f023 0307 	bic.w	r3, r3, #7
 800c2be:	3308      	adds	r3, #8
 800c2c0:	9303      	str	r3, [sp, #12]
 800c2c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c2c4:	443b      	add	r3, r7
 800c2c6:	9309      	str	r3, [sp, #36]	@ 0x24
 800c2c8:	e76a      	b.n	800c1a0 <_vfiprintf_r+0x78>
 800c2ca:	fb0c 3202 	mla	r2, ip, r2, r3
 800c2ce:	460c      	mov	r4, r1
 800c2d0:	2001      	movs	r0, #1
 800c2d2:	e7a8      	b.n	800c226 <_vfiprintf_r+0xfe>
 800c2d4:	2300      	movs	r3, #0
 800c2d6:	3401      	adds	r4, #1
 800c2d8:	9305      	str	r3, [sp, #20]
 800c2da:	4619      	mov	r1, r3
 800c2dc:	f04f 0c0a 	mov.w	ip, #10
 800c2e0:	4620      	mov	r0, r4
 800c2e2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c2e6:	3a30      	subs	r2, #48	@ 0x30
 800c2e8:	2a09      	cmp	r2, #9
 800c2ea:	d903      	bls.n	800c2f4 <_vfiprintf_r+0x1cc>
 800c2ec:	2b00      	cmp	r3, #0
 800c2ee:	d0c6      	beq.n	800c27e <_vfiprintf_r+0x156>
 800c2f0:	9105      	str	r1, [sp, #20]
 800c2f2:	e7c4      	b.n	800c27e <_vfiprintf_r+0x156>
 800c2f4:	fb0c 2101 	mla	r1, ip, r1, r2
 800c2f8:	4604      	mov	r4, r0
 800c2fa:	2301      	movs	r3, #1
 800c2fc:	e7f0      	b.n	800c2e0 <_vfiprintf_r+0x1b8>
 800c2fe:	ab03      	add	r3, sp, #12
 800c300:	9300      	str	r3, [sp, #0]
 800c302:	462a      	mov	r2, r5
 800c304:	4b12      	ldr	r3, [pc, #72]	@ (800c350 <_vfiprintf_r+0x228>)
 800c306:	a904      	add	r1, sp, #16
 800c308:	4630      	mov	r0, r6
 800c30a:	f7fb fd4d 	bl	8007da8 <_printf_float>
 800c30e:	4607      	mov	r7, r0
 800c310:	1c78      	adds	r0, r7, #1
 800c312:	d1d6      	bne.n	800c2c2 <_vfiprintf_r+0x19a>
 800c314:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c316:	07d9      	lsls	r1, r3, #31
 800c318:	d405      	bmi.n	800c326 <_vfiprintf_r+0x1fe>
 800c31a:	89ab      	ldrh	r3, [r5, #12]
 800c31c:	059a      	lsls	r2, r3, #22
 800c31e:	d402      	bmi.n	800c326 <_vfiprintf_r+0x1fe>
 800c320:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c322:	f7fd f899 	bl	8009458 <__retarget_lock_release_recursive>
 800c326:	89ab      	ldrh	r3, [r5, #12]
 800c328:	065b      	lsls	r3, r3, #25
 800c32a:	f53f af1f 	bmi.w	800c16c <_vfiprintf_r+0x44>
 800c32e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c330:	e71e      	b.n	800c170 <_vfiprintf_r+0x48>
 800c332:	ab03      	add	r3, sp, #12
 800c334:	9300      	str	r3, [sp, #0]
 800c336:	462a      	mov	r2, r5
 800c338:	4b05      	ldr	r3, [pc, #20]	@ (800c350 <_vfiprintf_r+0x228>)
 800c33a:	a904      	add	r1, sp, #16
 800c33c:	4630      	mov	r0, r6
 800c33e:	f7fb ffcb 	bl	80082d8 <_printf_i>
 800c342:	e7e4      	b.n	800c30e <_vfiprintf_r+0x1e6>
 800c344:	0800d889 	.word	0x0800d889
 800c348:	0800d893 	.word	0x0800d893
 800c34c:	08007da9 	.word	0x08007da9
 800c350:	0800c105 	.word	0x0800c105
 800c354:	0800d88f 	.word	0x0800d88f

0800c358 <__swbuf_r>:
 800c358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c35a:	460e      	mov	r6, r1
 800c35c:	4614      	mov	r4, r2
 800c35e:	4605      	mov	r5, r0
 800c360:	b118      	cbz	r0, 800c36a <__swbuf_r+0x12>
 800c362:	6a03      	ldr	r3, [r0, #32]
 800c364:	b90b      	cbnz	r3, 800c36a <__swbuf_r+0x12>
 800c366:	f7fc f963 	bl	8008630 <__sinit>
 800c36a:	69a3      	ldr	r3, [r4, #24]
 800c36c:	60a3      	str	r3, [r4, #8]
 800c36e:	89a3      	ldrh	r3, [r4, #12]
 800c370:	071a      	lsls	r2, r3, #28
 800c372:	d501      	bpl.n	800c378 <__swbuf_r+0x20>
 800c374:	6923      	ldr	r3, [r4, #16]
 800c376:	b943      	cbnz	r3, 800c38a <__swbuf_r+0x32>
 800c378:	4621      	mov	r1, r4
 800c37a:	4628      	mov	r0, r5
 800c37c:	f000 f82a 	bl	800c3d4 <__swsetup_r>
 800c380:	b118      	cbz	r0, 800c38a <__swbuf_r+0x32>
 800c382:	f04f 37ff 	mov.w	r7, #4294967295
 800c386:	4638      	mov	r0, r7
 800c388:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c38a:	6823      	ldr	r3, [r4, #0]
 800c38c:	6922      	ldr	r2, [r4, #16]
 800c38e:	1a98      	subs	r0, r3, r2
 800c390:	6963      	ldr	r3, [r4, #20]
 800c392:	b2f6      	uxtb	r6, r6
 800c394:	4283      	cmp	r3, r0
 800c396:	4637      	mov	r7, r6
 800c398:	dc05      	bgt.n	800c3a6 <__swbuf_r+0x4e>
 800c39a:	4621      	mov	r1, r4
 800c39c:	4628      	mov	r0, r5
 800c39e:	f7ff fcd7 	bl	800bd50 <_fflush_r>
 800c3a2:	2800      	cmp	r0, #0
 800c3a4:	d1ed      	bne.n	800c382 <__swbuf_r+0x2a>
 800c3a6:	68a3      	ldr	r3, [r4, #8]
 800c3a8:	3b01      	subs	r3, #1
 800c3aa:	60a3      	str	r3, [r4, #8]
 800c3ac:	6823      	ldr	r3, [r4, #0]
 800c3ae:	1c5a      	adds	r2, r3, #1
 800c3b0:	6022      	str	r2, [r4, #0]
 800c3b2:	701e      	strb	r6, [r3, #0]
 800c3b4:	6962      	ldr	r2, [r4, #20]
 800c3b6:	1c43      	adds	r3, r0, #1
 800c3b8:	429a      	cmp	r2, r3
 800c3ba:	d004      	beq.n	800c3c6 <__swbuf_r+0x6e>
 800c3bc:	89a3      	ldrh	r3, [r4, #12]
 800c3be:	07db      	lsls	r3, r3, #31
 800c3c0:	d5e1      	bpl.n	800c386 <__swbuf_r+0x2e>
 800c3c2:	2e0a      	cmp	r6, #10
 800c3c4:	d1df      	bne.n	800c386 <__swbuf_r+0x2e>
 800c3c6:	4621      	mov	r1, r4
 800c3c8:	4628      	mov	r0, r5
 800c3ca:	f7ff fcc1 	bl	800bd50 <_fflush_r>
 800c3ce:	2800      	cmp	r0, #0
 800c3d0:	d0d9      	beq.n	800c386 <__swbuf_r+0x2e>
 800c3d2:	e7d6      	b.n	800c382 <__swbuf_r+0x2a>

0800c3d4 <__swsetup_r>:
 800c3d4:	b538      	push	{r3, r4, r5, lr}
 800c3d6:	4b29      	ldr	r3, [pc, #164]	@ (800c47c <__swsetup_r+0xa8>)
 800c3d8:	4605      	mov	r5, r0
 800c3da:	6818      	ldr	r0, [r3, #0]
 800c3dc:	460c      	mov	r4, r1
 800c3de:	b118      	cbz	r0, 800c3e8 <__swsetup_r+0x14>
 800c3e0:	6a03      	ldr	r3, [r0, #32]
 800c3e2:	b90b      	cbnz	r3, 800c3e8 <__swsetup_r+0x14>
 800c3e4:	f7fc f924 	bl	8008630 <__sinit>
 800c3e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c3ec:	0719      	lsls	r1, r3, #28
 800c3ee:	d422      	bmi.n	800c436 <__swsetup_r+0x62>
 800c3f0:	06da      	lsls	r2, r3, #27
 800c3f2:	d407      	bmi.n	800c404 <__swsetup_r+0x30>
 800c3f4:	2209      	movs	r2, #9
 800c3f6:	602a      	str	r2, [r5, #0]
 800c3f8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c3fc:	81a3      	strh	r3, [r4, #12]
 800c3fe:	f04f 30ff 	mov.w	r0, #4294967295
 800c402:	e033      	b.n	800c46c <__swsetup_r+0x98>
 800c404:	0758      	lsls	r0, r3, #29
 800c406:	d512      	bpl.n	800c42e <__swsetup_r+0x5a>
 800c408:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c40a:	b141      	cbz	r1, 800c41e <__swsetup_r+0x4a>
 800c40c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c410:	4299      	cmp	r1, r3
 800c412:	d002      	beq.n	800c41a <__swsetup_r+0x46>
 800c414:	4628      	mov	r0, r5
 800c416:	f7fd fe93 	bl	800a140 <_free_r>
 800c41a:	2300      	movs	r3, #0
 800c41c:	6363      	str	r3, [r4, #52]	@ 0x34
 800c41e:	89a3      	ldrh	r3, [r4, #12]
 800c420:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800c424:	81a3      	strh	r3, [r4, #12]
 800c426:	2300      	movs	r3, #0
 800c428:	6063      	str	r3, [r4, #4]
 800c42a:	6923      	ldr	r3, [r4, #16]
 800c42c:	6023      	str	r3, [r4, #0]
 800c42e:	89a3      	ldrh	r3, [r4, #12]
 800c430:	f043 0308 	orr.w	r3, r3, #8
 800c434:	81a3      	strh	r3, [r4, #12]
 800c436:	6923      	ldr	r3, [r4, #16]
 800c438:	b94b      	cbnz	r3, 800c44e <__swsetup_r+0x7a>
 800c43a:	89a3      	ldrh	r3, [r4, #12]
 800c43c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800c440:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c444:	d003      	beq.n	800c44e <__swsetup_r+0x7a>
 800c446:	4621      	mov	r1, r4
 800c448:	4628      	mov	r0, r5
 800c44a:	f000 f883 	bl	800c554 <__smakebuf_r>
 800c44e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c452:	f013 0201 	ands.w	r2, r3, #1
 800c456:	d00a      	beq.n	800c46e <__swsetup_r+0x9a>
 800c458:	2200      	movs	r2, #0
 800c45a:	60a2      	str	r2, [r4, #8]
 800c45c:	6962      	ldr	r2, [r4, #20]
 800c45e:	4252      	negs	r2, r2
 800c460:	61a2      	str	r2, [r4, #24]
 800c462:	6922      	ldr	r2, [r4, #16]
 800c464:	b942      	cbnz	r2, 800c478 <__swsetup_r+0xa4>
 800c466:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800c46a:	d1c5      	bne.n	800c3f8 <__swsetup_r+0x24>
 800c46c:	bd38      	pop	{r3, r4, r5, pc}
 800c46e:	0799      	lsls	r1, r3, #30
 800c470:	bf58      	it	pl
 800c472:	6962      	ldrpl	r2, [r4, #20]
 800c474:	60a2      	str	r2, [r4, #8]
 800c476:	e7f4      	b.n	800c462 <__swsetup_r+0x8e>
 800c478:	2000      	movs	r0, #0
 800c47a:	e7f7      	b.n	800c46c <__swsetup_r+0x98>
 800c47c:	20000198 	.word	0x20000198

0800c480 <_raise_r>:
 800c480:	291f      	cmp	r1, #31
 800c482:	b538      	push	{r3, r4, r5, lr}
 800c484:	4605      	mov	r5, r0
 800c486:	460c      	mov	r4, r1
 800c488:	d904      	bls.n	800c494 <_raise_r+0x14>
 800c48a:	2316      	movs	r3, #22
 800c48c:	6003      	str	r3, [r0, #0]
 800c48e:	f04f 30ff 	mov.w	r0, #4294967295
 800c492:	bd38      	pop	{r3, r4, r5, pc}
 800c494:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800c496:	b112      	cbz	r2, 800c49e <_raise_r+0x1e>
 800c498:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c49c:	b94b      	cbnz	r3, 800c4b2 <_raise_r+0x32>
 800c49e:	4628      	mov	r0, r5
 800c4a0:	f000 f830 	bl	800c504 <_getpid_r>
 800c4a4:	4622      	mov	r2, r4
 800c4a6:	4601      	mov	r1, r0
 800c4a8:	4628      	mov	r0, r5
 800c4aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c4ae:	f000 b817 	b.w	800c4e0 <_kill_r>
 800c4b2:	2b01      	cmp	r3, #1
 800c4b4:	d00a      	beq.n	800c4cc <_raise_r+0x4c>
 800c4b6:	1c59      	adds	r1, r3, #1
 800c4b8:	d103      	bne.n	800c4c2 <_raise_r+0x42>
 800c4ba:	2316      	movs	r3, #22
 800c4bc:	6003      	str	r3, [r0, #0]
 800c4be:	2001      	movs	r0, #1
 800c4c0:	e7e7      	b.n	800c492 <_raise_r+0x12>
 800c4c2:	2100      	movs	r1, #0
 800c4c4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800c4c8:	4620      	mov	r0, r4
 800c4ca:	4798      	blx	r3
 800c4cc:	2000      	movs	r0, #0
 800c4ce:	e7e0      	b.n	800c492 <_raise_r+0x12>

0800c4d0 <raise>:
 800c4d0:	4b02      	ldr	r3, [pc, #8]	@ (800c4dc <raise+0xc>)
 800c4d2:	4601      	mov	r1, r0
 800c4d4:	6818      	ldr	r0, [r3, #0]
 800c4d6:	f7ff bfd3 	b.w	800c480 <_raise_r>
 800c4da:	bf00      	nop
 800c4dc:	20000198 	.word	0x20000198

0800c4e0 <_kill_r>:
 800c4e0:	b538      	push	{r3, r4, r5, lr}
 800c4e2:	4d07      	ldr	r5, [pc, #28]	@ (800c500 <_kill_r+0x20>)
 800c4e4:	2300      	movs	r3, #0
 800c4e6:	4604      	mov	r4, r0
 800c4e8:	4608      	mov	r0, r1
 800c4ea:	4611      	mov	r1, r2
 800c4ec:	602b      	str	r3, [r5, #0]
 800c4ee:	f7f6 ff0d 	bl	800330c <_kill>
 800c4f2:	1c43      	adds	r3, r0, #1
 800c4f4:	d102      	bne.n	800c4fc <_kill_r+0x1c>
 800c4f6:	682b      	ldr	r3, [r5, #0]
 800c4f8:	b103      	cbz	r3, 800c4fc <_kill_r+0x1c>
 800c4fa:	6023      	str	r3, [r4, #0]
 800c4fc:	bd38      	pop	{r3, r4, r5, pc}
 800c4fe:	bf00      	nop
 800c500:	20004c24 	.word	0x20004c24

0800c504 <_getpid_r>:
 800c504:	f7f6 bf00 	b.w	8003308 <_getpid>

0800c508 <__swhatbuf_r>:
 800c508:	b570      	push	{r4, r5, r6, lr}
 800c50a:	460c      	mov	r4, r1
 800c50c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c510:	2900      	cmp	r1, #0
 800c512:	b096      	sub	sp, #88	@ 0x58
 800c514:	4615      	mov	r5, r2
 800c516:	461e      	mov	r6, r3
 800c518:	da0d      	bge.n	800c536 <__swhatbuf_r+0x2e>
 800c51a:	89a3      	ldrh	r3, [r4, #12]
 800c51c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800c520:	f04f 0100 	mov.w	r1, #0
 800c524:	bf14      	ite	ne
 800c526:	2340      	movne	r3, #64	@ 0x40
 800c528:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800c52c:	2000      	movs	r0, #0
 800c52e:	6031      	str	r1, [r6, #0]
 800c530:	602b      	str	r3, [r5, #0]
 800c532:	b016      	add	sp, #88	@ 0x58
 800c534:	bd70      	pop	{r4, r5, r6, pc}
 800c536:	466a      	mov	r2, sp
 800c538:	f000 f848 	bl	800c5cc <_fstat_r>
 800c53c:	2800      	cmp	r0, #0
 800c53e:	dbec      	blt.n	800c51a <__swhatbuf_r+0x12>
 800c540:	9901      	ldr	r1, [sp, #4]
 800c542:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800c546:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800c54a:	4259      	negs	r1, r3
 800c54c:	4159      	adcs	r1, r3
 800c54e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c552:	e7eb      	b.n	800c52c <__swhatbuf_r+0x24>

0800c554 <__smakebuf_r>:
 800c554:	898b      	ldrh	r3, [r1, #12]
 800c556:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c558:	079d      	lsls	r5, r3, #30
 800c55a:	4606      	mov	r6, r0
 800c55c:	460c      	mov	r4, r1
 800c55e:	d507      	bpl.n	800c570 <__smakebuf_r+0x1c>
 800c560:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800c564:	6023      	str	r3, [r4, #0]
 800c566:	6123      	str	r3, [r4, #16]
 800c568:	2301      	movs	r3, #1
 800c56a:	6163      	str	r3, [r4, #20]
 800c56c:	b003      	add	sp, #12
 800c56e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c570:	ab01      	add	r3, sp, #4
 800c572:	466a      	mov	r2, sp
 800c574:	f7ff ffc8 	bl	800c508 <__swhatbuf_r>
 800c578:	9f00      	ldr	r7, [sp, #0]
 800c57a:	4605      	mov	r5, r0
 800c57c:	4639      	mov	r1, r7
 800c57e:	4630      	mov	r0, r6
 800c580:	f7fa fcd6 	bl	8006f30 <_malloc_r>
 800c584:	b948      	cbnz	r0, 800c59a <__smakebuf_r+0x46>
 800c586:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c58a:	059a      	lsls	r2, r3, #22
 800c58c:	d4ee      	bmi.n	800c56c <__smakebuf_r+0x18>
 800c58e:	f023 0303 	bic.w	r3, r3, #3
 800c592:	f043 0302 	orr.w	r3, r3, #2
 800c596:	81a3      	strh	r3, [r4, #12]
 800c598:	e7e2      	b.n	800c560 <__smakebuf_r+0xc>
 800c59a:	89a3      	ldrh	r3, [r4, #12]
 800c59c:	6020      	str	r0, [r4, #0]
 800c59e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c5a2:	81a3      	strh	r3, [r4, #12]
 800c5a4:	9b01      	ldr	r3, [sp, #4]
 800c5a6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800c5aa:	b15b      	cbz	r3, 800c5c4 <__smakebuf_r+0x70>
 800c5ac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c5b0:	4630      	mov	r0, r6
 800c5b2:	f000 f81d 	bl	800c5f0 <_isatty_r>
 800c5b6:	b128      	cbz	r0, 800c5c4 <__smakebuf_r+0x70>
 800c5b8:	89a3      	ldrh	r3, [r4, #12]
 800c5ba:	f023 0303 	bic.w	r3, r3, #3
 800c5be:	f043 0301 	orr.w	r3, r3, #1
 800c5c2:	81a3      	strh	r3, [r4, #12]
 800c5c4:	89a3      	ldrh	r3, [r4, #12]
 800c5c6:	431d      	orrs	r5, r3
 800c5c8:	81a5      	strh	r5, [r4, #12]
 800c5ca:	e7cf      	b.n	800c56c <__smakebuf_r+0x18>

0800c5cc <_fstat_r>:
 800c5cc:	b538      	push	{r3, r4, r5, lr}
 800c5ce:	4d07      	ldr	r5, [pc, #28]	@ (800c5ec <_fstat_r+0x20>)
 800c5d0:	2300      	movs	r3, #0
 800c5d2:	4604      	mov	r4, r0
 800c5d4:	4608      	mov	r0, r1
 800c5d6:	4611      	mov	r1, r2
 800c5d8:	602b      	str	r3, [r5, #0]
 800c5da:	f7f6 fec4 	bl	8003366 <_fstat>
 800c5de:	1c43      	adds	r3, r0, #1
 800c5e0:	d102      	bne.n	800c5e8 <_fstat_r+0x1c>
 800c5e2:	682b      	ldr	r3, [r5, #0]
 800c5e4:	b103      	cbz	r3, 800c5e8 <_fstat_r+0x1c>
 800c5e6:	6023      	str	r3, [r4, #0]
 800c5e8:	bd38      	pop	{r3, r4, r5, pc}
 800c5ea:	bf00      	nop
 800c5ec:	20004c24 	.word	0x20004c24

0800c5f0 <_isatty_r>:
 800c5f0:	b538      	push	{r3, r4, r5, lr}
 800c5f2:	4d06      	ldr	r5, [pc, #24]	@ (800c60c <_isatty_r+0x1c>)
 800c5f4:	2300      	movs	r3, #0
 800c5f6:	4604      	mov	r4, r0
 800c5f8:	4608      	mov	r0, r1
 800c5fa:	602b      	str	r3, [r5, #0]
 800c5fc:	f7f6 feb8 	bl	8003370 <_isatty>
 800c600:	1c43      	adds	r3, r0, #1
 800c602:	d102      	bne.n	800c60a <_isatty_r+0x1a>
 800c604:	682b      	ldr	r3, [r5, #0]
 800c606:	b103      	cbz	r3, 800c60a <_isatty_r+0x1a>
 800c608:	6023      	str	r3, [r4, #0]
 800c60a:	bd38      	pop	{r3, r4, r5, pc}
 800c60c:	20004c24 	.word	0x20004c24

0800c610 <floor>:
 800c610:	ec51 0b10 	vmov	r0, r1, d0
 800c614:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800c618:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c61c:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 800c620:	2e13      	cmp	r6, #19
 800c622:	460c      	mov	r4, r1
 800c624:	4605      	mov	r5, r0
 800c626:	4680      	mov	r8, r0
 800c628:	dc34      	bgt.n	800c694 <floor+0x84>
 800c62a:	2e00      	cmp	r6, #0
 800c62c:	da17      	bge.n	800c65e <floor+0x4e>
 800c62e:	a332      	add	r3, pc, #200	@ (adr r3, 800c6f8 <floor+0xe8>)
 800c630:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c634:	f7f3 fe3a 	bl	80002ac <__adddf3>
 800c638:	2200      	movs	r2, #0
 800c63a:	2300      	movs	r3, #0
 800c63c:	f7f4 fa7c 	bl	8000b38 <__aeabi_dcmpgt>
 800c640:	b150      	cbz	r0, 800c658 <floor+0x48>
 800c642:	2c00      	cmp	r4, #0
 800c644:	da55      	bge.n	800c6f2 <floor+0xe2>
 800c646:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 800c64a:	432c      	orrs	r4, r5
 800c64c:	2500      	movs	r5, #0
 800c64e:	42ac      	cmp	r4, r5
 800c650:	4c2b      	ldr	r4, [pc, #172]	@ (800c700 <floor+0xf0>)
 800c652:	bf08      	it	eq
 800c654:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 800c658:	4621      	mov	r1, r4
 800c65a:	4628      	mov	r0, r5
 800c65c:	e023      	b.n	800c6a6 <floor+0x96>
 800c65e:	4f29      	ldr	r7, [pc, #164]	@ (800c704 <floor+0xf4>)
 800c660:	4137      	asrs	r7, r6
 800c662:	ea01 0307 	and.w	r3, r1, r7
 800c666:	4303      	orrs	r3, r0
 800c668:	d01d      	beq.n	800c6a6 <floor+0x96>
 800c66a:	a323      	add	r3, pc, #140	@ (adr r3, 800c6f8 <floor+0xe8>)
 800c66c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c670:	f7f3 fe1c 	bl	80002ac <__adddf3>
 800c674:	2200      	movs	r2, #0
 800c676:	2300      	movs	r3, #0
 800c678:	f7f4 fa5e 	bl	8000b38 <__aeabi_dcmpgt>
 800c67c:	2800      	cmp	r0, #0
 800c67e:	d0eb      	beq.n	800c658 <floor+0x48>
 800c680:	2c00      	cmp	r4, #0
 800c682:	bfbe      	ittt	lt
 800c684:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 800c688:	4133      	asrlt	r3, r6
 800c68a:	18e4      	addlt	r4, r4, r3
 800c68c:	ea24 0407 	bic.w	r4, r4, r7
 800c690:	2500      	movs	r5, #0
 800c692:	e7e1      	b.n	800c658 <floor+0x48>
 800c694:	2e33      	cmp	r6, #51	@ 0x33
 800c696:	dd0a      	ble.n	800c6ae <floor+0x9e>
 800c698:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 800c69c:	d103      	bne.n	800c6a6 <floor+0x96>
 800c69e:	4602      	mov	r2, r0
 800c6a0:	460b      	mov	r3, r1
 800c6a2:	f7f3 fe03 	bl	80002ac <__adddf3>
 800c6a6:	ec41 0b10 	vmov	d0, r0, r1
 800c6aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c6ae:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 800c6b2:	f04f 37ff 	mov.w	r7, #4294967295
 800c6b6:	40df      	lsrs	r7, r3
 800c6b8:	4207      	tst	r7, r0
 800c6ba:	d0f4      	beq.n	800c6a6 <floor+0x96>
 800c6bc:	a30e      	add	r3, pc, #56	@ (adr r3, 800c6f8 <floor+0xe8>)
 800c6be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6c2:	f7f3 fdf3 	bl	80002ac <__adddf3>
 800c6c6:	2200      	movs	r2, #0
 800c6c8:	2300      	movs	r3, #0
 800c6ca:	f7f4 fa35 	bl	8000b38 <__aeabi_dcmpgt>
 800c6ce:	2800      	cmp	r0, #0
 800c6d0:	d0c2      	beq.n	800c658 <floor+0x48>
 800c6d2:	2c00      	cmp	r4, #0
 800c6d4:	da0a      	bge.n	800c6ec <floor+0xdc>
 800c6d6:	2e14      	cmp	r6, #20
 800c6d8:	d101      	bne.n	800c6de <floor+0xce>
 800c6da:	3401      	adds	r4, #1
 800c6dc:	e006      	b.n	800c6ec <floor+0xdc>
 800c6de:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 800c6e2:	2301      	movs	r3, #1
 800c6e4:	40b3      	lsls	r3, r6
 800c6e6:	441d      	add	r5, r3
 800c6e8:	4545      	cmp	r5, r8
 800c6ea:	d3f6      	bcc.n	800c6da <floor+0xca>
 800c6ec:	ea25 0507 	bic.w	r5, r5, r7
 800c6f0:	e7b2      	b.n	800c658 <floor+0x48>
 800c6f2:	2500      	movs	r5, #0
 800c6f4:	462c      	mov	r4, r5
 800c6f6:	e7af      	b.n	800c658 <floor+0x48>
 800c6f8:	8800759c 	.word	0x8800759c
 800c6fc:	7e37e43c 	.word	0x7e37e43c
 800c700:	bff00000 	.word	0xbff00000
 800c704:	000fffff 	.word	0x000fffff

0800c708 <round>:
 800c708:	ec51 0b10 	vmov	r0, r1, d0
 800c70c:	b570      	push	{r4, r5, r6, lr}
 800c70e:	f3c1 540a 	ubfx	r4, r1, #20, #11
 800c712:	f2a4 32ff 	subw	r2, r4, #1023	@ 0x3ff
 800c716:	2a13      	cmp	r2, #19
 800c718:	460b      	mov	r3, r1
 800c71a:	4605      	mov	r5, r0
 800c71c:	dc1b      	bgt.n	800c756 <round+0x4e>
 800c71e:	2a00      	cmp	r2, #0
 800c720:	da0b      	bge.n	800c73a <round+0x32>
 800c722:	f001 4300 	and.w	r3, r1, #2147483648	@ 0x80000000
 800c726:	3201      	adds	r2, #1
 800c728:	bf04      	itt	eq
 800c72a:	f043 537f 	orreq.w	r3, r3, #1069547520	@ 0x3fc00000
 800c72e:	f443 1340 	orreq.w	r3, r3, #3145728	@ 0x300000
 800c732:	2200      	movs	r2, #0
 800c734:	4619      	mov	r1, r3
 800c736:	4610      	mov	r0, r2
 800c738:	e015      	b.n	800c766 <round+0x5e>
 800c73a:	4c15      	ldr	r4, [pc, #84]	@ (800c790 <round+0x88>)
 800c73c:	4114      	asrs	r4, r2
 800c73e:	ea04 0601 	and.w	r6, r4, r1
 800c742:	4306      	orrs	r6, r0
 800c744:	d00f      	beq.n	800c766 <round+0x5e>
 800c746:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 800c74a:	fa41 f202 	asr.w	r2, r1, r2
 800c74e:	4413      	add	r3, r2
 800c750:	ea23 0304 	bic.w	r3, r3, r4
 800c754:	e7ed      	b.n	800c732 <round+0x2a>
 800c756:	2a33      	cmp	r2, #51	@ 0x33
 800c758:	dd08      	ble.n	800c76c <round+0x64>
 800c75a:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 800c75e:	d102      	bne.n	800c766 <round+0x5e>
 800c760:	4602      	mov	r2, r0
 800c762:	f7f3 fda3 	bl	80002ac <__adddf3>
 800c766:	ec41 0b10 	vmov	d0, r0, r1
 800c76a:	bd70      	pop	{r4, r5, r6, pc}
 800c76c:	f2a4 4613 	subw	r6, r4, #1043	@ 0x413
 800c770:	f04f 34ff 	mov.w	r4, #4294967295
 800c774:	40f4      	lsrs	r4, r6
 800c776:	4204      	tst	r4, r0
 800c778:	d0f5      	beq.n	800c766 <round+0x5e>
 800c77a:	f1c2 0133 	rsb	r1, r2, #51	@ 0x33
 800c77e:	2201      	movs	r2, #1
 800c780:	408a      	lsls	r2, r1
 800c782:	1952      	adds	r2, r2, r5
 800c784:	bf28      	it	cs
 800c786:	3301      	addcs	r3, #1
 800c788:	ea22 0204 	bic.w	r2, r2, r4
 800c78c:	e7d2      	b.n	800c734 <round+0x2c>
 800c78e:	bf00      	nop
 800c790:	000fffff 	.word	0x000fffff

0800c794 <_init>:
 800c794:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c796:	bf00      	nop
 800c798:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c79a:	bc08      	pop	{r3}
 800c79c:	469e      	mov	lr, r3
 800c79e:	4770      	bx	lr

0800c7a0 <_fini>:
 800c7a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c7a2:	bf00      	nop
 800c7a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c7a6:	bc08      	pop	{r3}
 800c7a8:	469e      	mov	lr, r3
 800c7aa:	4770      	bx	lr
