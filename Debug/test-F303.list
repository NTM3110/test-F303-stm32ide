
test-F303.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011404  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002c18  08011598  08011598  00012598  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080141b0  080141b0  00016260  2**0
                  CONTENTS
  4 .ARM          00000008  080141b0  080141b0  000151b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080141b8  080141b8  00016260  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080141b8  080141b8  000151b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080141bc  080141bc  000151bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000260  20000000  080141c0  00016000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00016260  2**0
                  CONTENTS
 10 .bss          00009738  20000260  20000260  00016260  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20009998  20009998  00016260  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00016260  2**0
                  CONTENTS, READONLY
 13 .debug_info   000368b5  00000000  00000000  00016290  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00006cc1  00000000  00000000  0004cb45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loclists 000128d7  00000000  00000000  00053806  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001db8  00000000  00000000  000660e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000210c  00000000  00000000  00067e98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00024ea6  00000000  00000000  00069fa4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000324d2  00000000  00000000  0008ee4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d88e2  00000000  00000000  000c131c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  00199bfe  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00007104  00000000  00000000  00199c44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000051  00000000  00000000  001a0d48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000260 	.word	0x20000260
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801157c 	.word	0x0801157c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000264 	.word	0x20000264
 80001cc:	0801157c 	.word	0x0801157c

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_d2lz>:
 8000ca8:	b538      	push	{r3, r4, r5, lr}
 8000caa:	2200      	movs	r2, #0
 8000cac:	2300      	movs	r3, #0
 8000cae:	4604      	mov	r4, r0
 8000cb0:	460d      	mov	r5, r1
 8000cb2:	f7ff ff23 	bl	8000afc <__aeabi_dcmplt>
 8000cb6:	b928      	cbnz	r0, 8000cc4 <__aeabi_d2lz+0x1c>
 8000cb8:	4620      	mov	r0, r4
 8000cba:	4629      	mov	r1, r5
 8000cbc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cc0:	f000 b80a 	b.w	8000cd8 <__aeabi_d2ulz>
 8000cc4:	4620      	mov	r0, r4
 8000cc6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cca:	f000 f805 	bl	8000cd8 <__aeabi_d2ulz>
 8000cce:	4240      	negs	r0, r0
 8000cd0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cd4:	bd38      	pop	{r3, r4, r5, pc}
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_d2ulz>:
 8000cd8:	b5d0      	push	{r4, r6, r7, lr}
 8000cda:	4b0c      	ldr	r3, [pc, #48]	@ (8000d0c <__aeabi_d2ulz+0x34>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	4606      	mov	r6, r0
 8000ce0:	460f      	mov	r7, r1
 8000ce2:	f7ff fc99 	bl	8000618 <__aeabi_dmul>
 8000ce6:	f7ff ff6f 	bl	8000bc8 <__aeabi_d2uiz>
 8000cea:	4604      	mov	r4, r0
 8000cec:	f7ff fc1a 	bl	8000524 <__aeabi_ui2d>
 8000cf0:	4b07      	ldr	r3, [pc, #28]	@ (8000d10 <__aeabi_d2ulz+0x38>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	f7ff fc90 	bl	8000618 <__aeabi_dmul>
 8000cf8:	4602      	mov	r2, r0
 8000cfa:	460b      	mov	r3, r1
 8000cfc:	4630      	mov	r0, r6
 8000cfe:	4639      	mov	r1, r7
 8000d00:	f7ff fad2 	bl	80002a8 <__aeabi_dsub>
 8000d04:	f7ff ff60 	bl	8000bc8 <__aeabi_d2uiz>
 8000d08:	4621      	mov	r1, r4
 8000d0a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d0c:	3df00000 	.word	0x3df00000
 8000d10:	41f00000 	.word	0x41f00000
 8000d14:	00000000 	.word	0x00000000

08000d18 <haversine>:
int daychange = 0;

int getRMC_time = 0;

// Haversine formula to calculate distance between two lat/lon points
double haversine(double lat1, double lon1, double lat2, double lon2) {
 8000d18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000d1c:	ed2d 8b02 	vpush	{d8}
 8000d20:	ec51 0b10 	vmov	r0, r1, d0
 8000d24:	b085      	sub	sp, #20
    // Convert degrees to radians
    lat1 = DEG_TO_RAD(lat1);
 8000d26:	a35c      	add	r3, pc, #368	@ (adr r3, 8000e98 <haversine+0x180>)
 8000d28:	e9d3 2300 	ldrd	r2, r3, [r3]
double haversine(double lat1, double lon1, double lat2, double lon2) {
 8000d2c:	ec57 6b12 	vmov	r6, r7, d2
 8000d30:	ec55 4b13 	vmov	r4, r5, d3
 8000d34:	ec59 8b11 	vmov	r8, r9, d1
    lat1 = DEG_TO_RAD(lat1);
 8000d38:	f7ff fc6e 	bl	8000618 <__aeabi_dmul>
 8000d3c:	4b5a      	ldr	r3, [pc, #360]	@ (8000ea8 <haversine+0x190>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	f7ff fd94 	bl	800086c <__aeabi_ddiv>
    lon1 = DEG_TO_RAD(lon1);
 8000d44:	a354      	add	r3, pc, #336	@ (adr r3, 8000e98 <haversine+0x180>)
 8000d46:	e9d3 2300 	ldrd	r2, r3, [r3]
    lat1 = DEG_TO_RAD(lat1);
 8000d4a:	4682      	mov	sl, r0
 8000d4c:	468b      	mov	fp, r1
    lon1 = DEG_TO_RAD(lon1);
 8000d4e:	4640      	mov	r0, r8
 8000d50:	4649      	mov	r1, r9
 8000d52:	f7ff fc61 	bl	8000618 <__aeabi_dmul>
    lat2 = DEG_TO_RAD(lat2);
 8000d56:	a350      	add	r3, pc, #320	@ (adr r3, 8000e98 <haversine+0x180>)
 8000d58:	e9d3 2300 	ldrd	r2, r3, [r3]
    lon1 = DEG_TO_RAD(lon1);
 8000d5c:	4680      	mov	r8, r0
 8000d5e:	4689      	mov	r9, r1
    lat2 = DEG_TO_RAD(lat2);
 8000d60:	4630      	mov	r0, r6
 8000d62:	4639      	mov	r1, r7
 8000d64:	f7ff fc58 	bl	8000618 <__aeabi_dmul>
 8000d68:	4b4f      	ldr	r3, [pc, #316]	@ (8000ea8 <haversine+0x190>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	f7ff fd7e 	bl	800086c <__aeabi_ddiv>
    lon2 = DEG_TO_RAD(lon2);
 8000d70:	a349      	add	r3, pc, #292	@ (adr r3, 8000e98 <haversine+0x180>)
 8000d72:	e9d3 2300 	ldrd	r2, r3, [r3]
    lat2 = DEG_TO_RAD(lat2);
 8000d76:	e9cd 0100 	strd	r0, r1, [sp]
    lon2 = DEG_TO_RAD(lon2);
 8000d7a:	4620      	mov	r0, r4
 8000d7c:	4629      	mov	r1, r5
 8000d7e:	f7ff fc4b 	bl	8000618 <__aeabi_dmul>

    // Haversine formula
    double dlat = lat2 - lat1;
 8000d82:	4652      	mov	r2, sl
    lon2 = DEG_TO_RAD(lon2);
 8000d84:	4606      	mov	r6, r0
 8000d86:	460f      	mov	r7, r1
    double dlat = lat2 - lat1;
 8000d88:	465b      	mov	r3, fp
 8000d8a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8000d8e:	f7ff fa8b 	bl	80002a8 <__aeabi_dsub>
    double dlon = lon2 - lon1;
    double a = sin(dlat / 2) * sin(dlat / 2) +
 8000d92:	4b46      	ldr	r3, [pc, #280]	@ (8000eac <haversine+0x194>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	f7ff fc3f 	bl	8000618 <__aeabi_dmul>
 8000d9a:	ec41 0b10 	vmov	d0, r0, r1
 8000d9e:	f00f f83b 	bl	800fe18 <sin>
 8000da2:	ed8d 0b02 	vstr	d0, [sp, #8]
               cos(lat1) * cos(lat2) * sin(dlon / 2) * sin(dlon / 2);
 8000da6:	ec4b ab10 	vmov	d0, sl, fp
 8000daa:	f00e ffe1 	bl	800fd70 <cos>
 8000dae:	ec5b ab10 	vmov	sl, fp, d0
 8000db2:	ed9d 0b00 	vldr	d0, [sp]
 8000db6:	f00e ffdb 	bl	800fd70 <cos>
    lon2 = DEG_TO_RAD(lon2);
 8000dba:	4b3b      	ldr	r3, [pc, #236]	@ (8000ea8 <haversine+0x190>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	4630      	mov	r0, r6
 8000dc0:	4639      	mov	r1, r7
               cos(lat1) * cos(lat2) * sin(dlon / 2) * sin(dlon / 2);
 8000dc2:	ec55 4b10 	vmov	r4, r5, d0
    lon2 = DEG_TO_RAD(lon2);
 8000dc6:	f7ff fd51 	bl	800086c <__aeabi_ddiv>
    lon1 = DEG_TO_RAD(lon1);
 8000dca:	4b37      	ldr	r3, [pc, #220]	@ (8000ea8 <haversine+0x190>)
    lon2 = DEG_TO_RAD(lon2);
 8000dcc:	4606      	mov	r6, r0
 8000dce:	460f      	mov	r7, r1
    lon1 = DEG_TO_RAD(lon1);
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	4640      	mov	r0, r8
 8000dd4:	4649      	mov	r1, r9
 8000dd6:	f7ff fd49 	bl	800086c <__aeabi_ddiv>
 8000dda:	4602      	mov	r2, r0
 8000ddc:	460b      	mov	r3, r1
    double dlon = lon2 - lon1;
 8000dde:	4630      	mov	r0, r6
 8000de0:	4639      	mov	r1, r7
 8000de2:	f7ff fa61 	bl	80002a8 <__aeabi_dsub>
               cos(lat1) * cos(lat2) * sin(dlon / 2) * sin(dlon / 2);
 8000de6:	4b31      	ldr	r3, [pc, #196]	@ (8000eac <haversine+0x194>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	f7ff fc15 	bl	8000618 <__aeabi_dmul>
 8000dee:	ec41 0b10 	vmov	d0, r0, r1
 8000df2:	f00f f811 	bl	800fe18 <sin>
 8000df6:	ec57 6b10 	vmov	r6, r7, d0
 8000dfa:	4622      	mov	r2, r4
 8000dfc:	462b      	mov	r3, r5
 8000dfe:	4650      	mov	r0, sl
 8000e00:	4659      	mov	r1, fp
 8000e02:	f7ff fc09 	bl	8000618 <__aeabi_dmul>
 8000e06:	4632      	mov	r2, r6
 8000e08:	463b      	mov	r3, r7
 8000e0a:	f7ff fc05 	bl	8000618 <__aeabi_dmul>
 8000e0e:	4632      	mov	r2, r6
 8000e10:	463b      	mov	r3, r7
 8000e12:	f7ff fc01 	bl	8000618 <__aeabi_dmul>
    double a = sin(dlat / 2) * sin(dlat / 2) +
 8000e16:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
               cos(lat1) * cos(lat2) * sin(dlon / 2) * sin(dlon / 2);
 8000e1a:	4604      	mov	r4, r0
 8000e1c:	460d      	mov	r5, r1
    double a = sin(dlat / 2) * sin(dlat / 2) +
 8000e1e:	4610      	mov	r0, r2
 8000e20:	4619      	mov	r1, r3
 8000e22:	f7ff fbf9 	bl	8000618 <__aeabi_dmul>
 8000e26:	4602      	mov	r2, r0
 8000e28:	460b      	mov	r3, r1
 8000e2a:	4620      	mov	r0, r4
 8000e2c:	4629      	mov	r1, r5
 8000e2e:	f7ff fa3d 	bl	80002ac <__adddf3>
 8000e32:	4604      	mov	r4, r0
 8000e34:	460d      	mov	r5, r1
    double c = 2 * atan2(sqrt(a), sqrt(1 - a));
 8000e36:	ec45 4b10 	vmov	d0, r4, r5
 8000e3a:	f00e ff6b 	bl	800fd14 <sqrt>
 8000e3e:	4622      	mov	r2, r4
 8000e40:	462b      	mov	r3, r5
 8000e42:	491b      	ldr	r1, [pc, #108]	@ (8000eb0 <haversine+0x198>)
 8000e44:	eeb0 8a40 	vmov.f32	s16, s0
 8000e48:	eef0 8a60 	vmov.f32	s17, s1
 8000e4c:	2000      	movs	r0, #0
 8000e4e:	f7ff fa2b 	bl	80002a8 <__aeabi_dsub>
 8000e52:	ec41 0b10 	vmov	d0, r0, r1
 8000e56:	f00e ff5d 	bl	800fd14 <sqrt>
 8000e5a:	eeb0 1a40 	vmov.f32	s2, s0
 8000e5e:	eef0 1a60 	vmov.f32	s3, s1
 8000e62:	eeb0 0a48 	vmov.f32	s0, s16
 8000e66:	eef0 0a68 	vmov.f32	s1, s17
 8000e6a:	f00e ff51 	bl	800fd10 <atan2>
 8000e6e:	ec53 2b10 	vmov	r2, r3, d0
 8000e72:	4610      	mov	r0, r2
 8000e74:	4619      	mov	r1, r3
 8000e76:	f7ff fa19 	bl	80002ac <__adddf3>
    return EARTH_RADIUS_KM * c;  // Distance in kilometers
 8000e7a:	a309      	add	r3, pc, #36	@ (adr r3, 8000ea0 <haversine+0x188>)
 8000e7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e80:	f7ff fbca 	bl	8000618 <__aeabi_dmul>
}
 8000e84:	ec41 0b10 	vmov	d0, r0, r1
 8000e88:	b005      	add	sp, #20
 8000e8a:	ecbd 8b02 	vpop	{d8}
 8000e8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000e92:	bf00      	nop
 8000e94:	f3af 8000 	nop.w
 8000e98:	54442d18 	.word	0x54442d18
 8000e9c:	400921fb 	.word	0x400921fb
 8000ea0:	00000000 	.word	0x00000000
 8000ea4:	40b8e300 	.word	0x40b8e300
 8000ea8:	40668000 	.word	0x40668000
 8000eac:	3fe00000 	.word	0x3fe00000
 8000eb0:	3ff00000 	.word	0x3ff00000

08000eb4 <copy_RMC>:
		des[i] = src[i];
	}
}

void copy_RMC(RMCSTRUCT *rmc_src, RMCSTRUCT *rmc_dest){
	rmc_src->tim.hour = rmc_dest->tim.hour;
 8000eb4:	680b      	ldr	r3, [r1, #0]
 8000eb6:	6003      	str	r3, [r0, #0]
	rmc_src->tim.min = rmc_dest->tim.min;
 8000eb8:	684b      	ldr	r3, [r1, #4]
 8000eba:	6043      	str	r3, [r0, #4]
	rmc_src->tim.sec = rmc_dest->tim.sec;
 8000ebc:	688b      	ldr	r3, [r1, #8]
 8000ebe:	6083      	str	r3, [r0, #8]
	rmc_src->date.Day = rmc_dest->date.Day;
 8000ec0:	690b      	ldr	r3, [r1, #16]
 8000ec2:	6103      	str	r3, [r0, #16]
	rmc_src->date.Mon = rmc_dest->date.Mon;
 8000ec4:	694b      	ldr	r3, [r1, #20]
 8000ec6:	6143      	str	r3, [r0, #20]
	rmc_src->date.Yr = rmc_dest->date.Yr;
 8000ec8:	698b      	ldr	r3, [r1, #24]
 8000eca:	6183      	str	r3, [r0, #24]
	rmc_src->lcation.latitude = rmc_dest->lcation.latitude;
 8000ecc:	e9d1 230e 	ldrd	r2, r3, [r1, #56]	@ 0x38
 8000ed0:	e9c0 230e 	strd	r2, r3, [r0, #56]	@ 0x38
	rmc_src->lcation.longitude = rmc_dest->lcation.longitude;
 8000ed4:	e9d1 2312 	ldrd	r2, r3, [r1, #72]	@ 0x48
 8000ed8:	e9c0 2312 	strd	r2, r3, [r0, #72]	@ 0x48
	rmc_src->lcation.NS = rmc_dest->lcation.NS;
 8000edc:	f891 3040 	ldrb.w	r3, [r1, #64]	@ 0x40
 8000ee0:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
	rmc_src->lcation.EW = rmc_dest->lcation.EW;
 8000ee4:	f891 3050 	ldrb.w	r3, [r1, #80]	@ 0x50
 8000ee8:	f880 3050 	strb.w	r3, [r0, #80]	@ 0x50
	rmc_src->speed = rmc_dest->speed;
 8000eec:	6a8b      	ldr	r3, [r1, #40]	@ 0x28
 8000eee:	6283      	str	r3, [r0, #40]	@ 0x28
	rmc_src->course = rmc_dest->course;
 8000ef0:	6acb      	ldr	r3, [r1, #44]	@ 0x2c
 8000ef2:	62c3      	str	r3, [r0, #44]	@ 0x2c
	rmc_src->isValid = rmc_dest->isValid;
 8000ef4:	6b0b      	ldr	r3, [r1, #48]	@ 0x30
 8000ef6:	6303      	str	r3, [r0, #48]	@ 0x30
}
 8000ef8:	4770      	bx	lr
	...

08000efc <validateChecksum>:
void coldStart(void){
	HAL_UART_Transmit(&huart2, (uint8_t*)"$PMTK104*37\r\n", strlen("$PMTK104*37\r\n"), 2000);
}

// Function to validate the checksum of an NMEA sentence
int validateChecksum(uint8_t *nmeaSentence, size_t len) {
 8000efc:	b538      	push	{r3, r4, r5, lr}
 8000efe:	4401      	add	r1, r0
 8000f00:	4603      	mov	r3, r0
    const uint8_t *start = nmeaSentence;  // Start of the sentence (after '$')
    const uint8_t *checksumStart = NULL;

    // Find the checksum part (after '*')
    for (size_t i = 0; i < len; i++) {
 8000f02:	4299      	cmp	r1, r3
 8000f04:	d101      	bne.n	8000f0a <validateChecksum+0xe>
            break;
        }
    }

    if (!checksumStart) {
        return 0;  // Invalid sentence format
 8000f06:	2000      	movs	r0, #0
 8000f08:	e021      	b.n	8000f4e <validateChecksum+0x52>
        if (nmeaSentence[i] == '*') {
 8000f0a:	461c      	mov	r4, r3
 8000f0c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000f10:	2a2a      	cmp	r2, #42	@ 0x2a
 8000f12:	d1f6      	bne.n	8000f02 <validateChecksum+0x6>
    }

    uint8_t calculatedChecksum = 0;

    // XOR all characters between '$' and '*', excluding both symbols
    for (const uint8_t *p = start + 1; p < checksumStart; ++p) {
 8000f14:	3001      	adds	r0, #1
    uint8_t calculatedChecksum = 0;
 8000f16:	2500      	movs	r5, #0
    for (const uint8_t *p = start + 1; p < checksumStart; ++p) {
 8000f18:	e002      	b.n	8000f20 <validateChecksum+0x24>
        calculatedChecksum ^= *p;
 8000f1a:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000f1e:	405d      	eors	r5, r3
    for (const uint8_t *p = start + 1; p < checksumStart; ++p) {
 8000f20:	4284      	cmp	r4, r0
 8000f22:	d8fa      	bhi.n	8000f1a <validateChecksum+0x1e>
    }

    // Extract the received checksum (after '*')
    if (checksumStart + 2 < nmeaSentence + len) {
 8000f24:	1ca3      	adds	r3, r4, #2
 8000f26:	428b      	cmp	r3, r1
 8000f28:	d2ed      	bcs.n	8000f06 <validateChecksum+0xa>
        uint8_t receivedChecksum = (uint8_t)strtol((char *)(checksumStart + 1), NULL, 16);
 8000f2a:	2210      	movs	r2, #16
 8000f2c:	2100      	movs	r1, #0
 8000f2e:	1c60      	adds	r0, r4, #1
 8000f30:	f00a f808 	bl	800af44 <strtol>
 8000f34:	4604      	mov	r4, r0

        // Debugging: Print calculated and received checksums
        Debug_printf("Calculated checksum: %02x\n", calculatedChecksum);
 8000f36:	4629      	mov	r1, r5
 8000f38:	4805      	ldr	r0, [pc, #20]	@ (8000f50 <validateChecksum+0x54>)
        Debug_printf("Received checksum: %02x\n", receivedChecksum);
 8000f3a:	b2e4      	uxtb	r4, r4
        Debug_printf("Calculated checksum: %02x\n", calculatedChecksum);
 8000f3c:	f004 f90c 	bl	8005158 <Debug_printf>
        Debug_printf("Received checksum: %02x\n", receivedChecksum);
 8000f40:	4804      	ldr	r0, [pc, #16]	@ (8000f54 <validateChecksum+0x58>)
 8000f42:	4621      	mov	r1, r4
 8000f44:	f004 f908 	bl	8005158 <Debug_printf>

        // Compare the calculated checksum with the received checksum
        return calculatedChecksum == receivedChecksum;
 8000f48:	1b63      	subs	r3, r4, r5
 8000f4a:	4258      	negs	r0, r3
 8000f4c:	4158      	adcs	r0, r3
    }

    return 0; // Invalid checksum
}
 8000f4e:	bd38      	pop	{r3, r4, r5, pc}
 8000f50:	08011674 	.word	0x08011674
 8000f54:	0801168f 	.word	0x0801168f

08000f58 <display_rmc_data>:

void display_rmc_data(UART_HandleTypeDef *huart) {
 8000f58:	b513      	push	{r0, r1, r4, lr}

    Debug_printf("Time: %02d:%02d:%02d\r\n", rmc.tim.hour, rmc.tim.min, rmc.tim.sec);
 8000f5a:	4c1d      	ldr	r4, [pc, #116]	@ (8000fd0 <display_rmc_data+0x78>)
 8000f5c:	481d      	ldr	r0, [pc, #116]	@ (8000fd4 <display_rmc_data+0x7c>)
 8000f5e:	6821      	ldr	r1, [r4, #0]
 8000f60:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 8000f64:	f004 f8f8 	bl	8005158 <Debug_printf>

    Debug_printf("Date: %02d/%02d/20%02d\r\n", rmc.date.Day, rmc.date.Mon, rmc.date.Yr);
 8000f68:	6921      	ldr	r1, [r4, #16]
 8000f6a:	481b      	ldr	r0, [pc, #108]	@ (8000fd8 <display_rmc_data+0x80>)
 8000f6c:	e9d4 2305 	ldrd	r2, r3, [r4, #20]
 8000f70:	f004 f8f2 	bl	8005158 <Debug_printf>
	
    Debug_printf("Latitude: %.6f %c\r\n", rmc.lcation.latitude, rmc.lcation.NS);
 8000f74:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 8000f78:	9300      	str	r3, [sp, #0]
 8000f7a:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	@ 0x38
 8000f7e:	4817      	ldr	r0, [pc, #92]	@ (8000fdc <display_rmc_data+0x84>)
 8000f80:	f004 f8ea 	bl	8005158 <Debug_printf>

    Debug_printf("Longitude: %.6f %c\r\n", rmc.lcation.longitude, rmc.lcation.EW);
 8000f84:	f894 3050 	ldrb.w	r3, [r4, #80]	@ 0x50
 8000f88:	9300      	str	r3, [sp, #0]
 8000f8a:	e9d4 2312 	ldrd	r2, r3, [r4, #72]	@ 0x48
 8000f8e:	4814      	ldr	r0, [pc, #80]	@ (8000fe0 <display_rmc_data+0x88>)
 8000f90:	f004 f8e2 	bl	8005158 <Debug_printf>

    Debug_printf("Speed: %.1f knots\r\n", rmc.speed);
 8000f94:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8000f96:	f7ff fae7 	bl	8000568 <__aeabi_f2d>
 8000f9a:	4602      	mov	r2, r0
 8000f9c:	460b      	mov	r3, r1
 8000f9e:	4811      	ldr	r0, [pc, #68]	@ (8000fe4 <display_rmc_data+0x8c>)
 8000fa0:	f004 f8da 	bl	8005158 <Debug_printf>

    Debug_printf("Course: %.1f\r\n", rmc.course);
 8000fa4:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8000fa6:	f7ff fadf 	bl	8000568 <__aeabi_f2d>
 8000faa:	4602      	mov	r2, r0
 8000fac:	460b      	mov	r3, r1
 8000fae:	480e      	ldr	r0, [pc, #56]	@ (8000fe8 <display_rmc_data+0x90>)
 8000fb0:	f004 f8d2 	bl	8005158 <Debug_printf>

    Debug_printf("Validity: %s\r\n", rmc.isValid ? "Valid" : "Invalid");
 8000fb4:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8000fb6:	4a0d      	ldr	r2, [pc, #52]	@ (8000fec <display_rmc_data+0x94>)
 8000fb8:	4b0d      	ldr	r3, [pc, #52]	@ (8000ff0 <display_rmc_data+0x98>)
 8000fba:	480e      	ldr	r0, [pc, #56]	@ (8000ff4 <display_rmc_data+0x9c>)
 8000fbc:	2900      	cmp	r1, #0
 8000fbe:	bf0c      	ite	eq
 8000fc0:	4611      	moveq	r1, r2
 8000fc2:	4619      	movne	r1, r3
}
 8000fc4:	b002      	add	sp, #8
 8000fc6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Debug_printf("Validity: %s\r\n", rmc.isValid ? "Valid" : "Invalid");
 8000fca:	f004 b8c5 	b.w	8005158 <Debug_printf>
 8000fce:	bf00      	nop
 8000fd0:	200002e0 	.word	0x200002e0
 8000fd4:	080116b6 	.word	0x080116b6
 8000fd8:	080116cd 	.word	0x080116cd
 8000fdc:	080116e6 	.word	0x080116e6
 8000fe0:	080116fa 	.word	0x080116fa
 8000fe4:	0801170f 	.word	0x0801170f
 8000fe8:	08011723 	.word	0x08011723
 8000fec:	080116ae 	.word	0x080116ae
 8000ff0:	080116a8 	.word	0x080116a8
 8000ff4:	08011732 	.word	0x08011732

08000ff8 <convertToEpoch>:

time_t convertToEpoch(int year, int month, int day, int hour, int min, int sec) {
 8000ff8:	b500      	push	{lr}
 8000ffa:	b08b      	sub	sp, #44	@ 0x2c
    struct tm timeinfo;

    // Set timeinfo fields
    timeinfo.tm_year = year + 100; // Year since 1900
 8000ffc:	3064      	adds	r0, #100	@ 0x64
    timeinfo.tm_mon = month - 1;    // Month (0-11, so subtract 1)
    timeinfo.tm_mday = day;         // Day of the month
    timeinfo.tm_hour = hour;        // Hour (0-23)
 8000ffe:	9303      	str	r3, [sp, #12]
    timeinfo.tm_min = min;          // Minute (0-59)
 8001000:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8001002:	9302      	str	r3, [sp, #8]
    timeinfo.tm_sec = sec;          // Second (0-59)
 8001004:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
    timeinfo.tm_year = year + 100; // Year since 1900
 8001006:	9006      	str	r0, [sp, #24]
    timeinfo.tm_sec = sec;          // Second (0-59)
 8001008:	9301      	str	r3, [sp, #4]
    timeinfo.tm_mon = month - 1;    // Month (0-11, so subtract 1)
 800100a:	3901      	subs	r1, #1
    timeinfo.tm_isdst = -1;         // Automatically determine Daylight Saving Time
 800100c:	f04f 33ff 	mov.w	r3, #4294967295

    // Convert to epoch time (seconds since 1970-01-01 00:00:00 UTC)
    time_t epoch = mktime(&timeinfo);
 8001010:	a801      	add	r0, sp, #4
    timeinfo.tm_mday = day;         // Day of the month
 8001012:	e9cd 2104 	strd	r2, r1, [sp, #16]
    timeinfo.tm_isdst = -1;         // Automatically determine Daylight Saving Time
 8001016:	9309      	str	r3, [sp, #36]	@ 0x24
    time_t epoch = mktime(&timeinfo);
 8001018:	f00b f902 	bl	800c220 <mktime>

    return epoch;
}
 800101c:	b00b      	add	sp, #44	@ 0x2c
 800101e:	f85d fb04 	ldr.w	pc, [sp], #4
 8001022:	0000      	movs	r0, r0
 8001024:	0000      	movs	r0, r0
	...

08001028 <parse_rmc>:

void parse_rmc(uint8_t *rmc_sentence) {
 8001028:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800102c:	ed2d 8b02 	vpush	{d8}
    int field = 0;
//    uint8_t str_cpy[128];
//    strcpy(str_cpy, rmc_sentence);
    HAL_UART_Transmit(&huart1, rmc_sentence, 128,1000);
 8001030:	4601      	mov	r1, r0
void parse_rmc(uint8_t *rmc_sentence) {
 8001032:	b083      	sub	sp, #12
 8001034:	4604      	mov	r4, r0
    HAL_UART_Transmit(&huart1, rmc_sentence, 128,1000);
 8001036:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800103a:	2280      	movs	r2, #128	@ 0x80
 800103c:	4880      	ldr	r0, [pc, #512]	@ (8001240 <parse_rmc+0x218>)
 800103e:	f006 ffe3 	bl	8008008 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, (uint8_t*)"\r\n",1, 1000);
 8001042:	4980      	ldr	r1, [pc, #512]	@ (8001244 <parse_rmc+0x21c>)
 8001044:	487e      	ldr	r0, [pc, #504]	@ (8001240 <parse_rmc+0x218>)
 8001046:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800104a:	2201      	movs	r2, #1
 800104c:	f006 ffdc 	bl	8008008 <HAL_UART_Transmit>

	if(validateChecksum(rmc_sentence, 128) == 0){
 8001050:	2180      	movs	r1, #128	@ 0x80
 8001052:	4620      	mov	r0, r4
 8001054:	f7ff ff52 	bl	8000efc <validateChecksum>
 8001058:	b1a8      	cbz	r0, 8001086 <parse_rmc+0x5e>
    int field = 0;
 800105a:	2600      	movs	r6, #0
 800105c:	4625      	mov	r5, r4

    uint8_t *ptr = rmc_sentence;

    while (*ptr) {
        if (*ptr == ',' || *ptr == '*') {
            *ptr = '\0';
 800105e:	4637      	mov	r7, r6
    while (*ptr) {
 8001060:	f815 3b01 	ldrb.w	r3, [r5], #1
 8001064:	b9a3      	cbnz	r3, 8001090 <parse_rmc+0x68>
            rmc_sentence = ptr + 1;
            field++;
        }
        ptr++;
    }
	if(rmc.isValid == 1)
 8001066:	4c78      	ldr	r4, [pc, #480]	@ (8001248 <parse_rmc+0x220>)
 8001068:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800106a:	2b01      	cmp	r3, #1
 800106c:	d10b      	bne.n	8001086 <parse_rmc+0x5e>
		rmc.date.epoch = convertToEpoch(rmc.date.Yr, rmc.date.Mon, rmc.date.Day, rmc.tim.hour, rmc.tim.min, rmc.tim.sec);
 800106e:	68a3      	ldr	r3, [r4, #8]
 8001070:	9301      	str	r3, [sp, #4]
 8001072:	6863      	ldr	r3, [r4, #4]
 8001074:	9300      	str	r3, [sp, #0]
 8001076:	e9d4 2104 	ldrd	r2, r1, [r4, #16]
 800107a:	6823      	ldr	r3, [r4, #0]
 800107c:	69a0      	ldr	r0, [r4, #24]
 800107e:	f7ff ffbb 	bl	8000ff8 <convertToEpoch>
 8001082:	e9c4 0108 	strd	r0, r1, [r4, #32]
}
 8001086:	b003      	add	sp, #12
 8001088:	ecbd 8b02 	vpop	{d8}
 800108c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (*ptr == ',' || *ptr == '*') {
 8001090:	2b2c      	cmp	r3, #44	@ 0x2c
 8001092:	d001      	beq.n	8001098 <parse_rmc+0x70>
 8001094:	2b2a      	cmp	r3, #42	@ 0x2a
 8001096:	d1e3      	bne.n	8001060 <parse_rmc+0x38>
            switch (field) {
 8001098:	1e73      	subs	r3, r6, #1
            *ptr = '\0';
 800109a:	f805 7c01 	strb.w	r7, [r5, #-1]
            switch (field) {
 800109e:	2b08      	cmp	r3, #8
 80010a0:	d81d      	bhi.n	80010de <parse_rmc+0xb6>
 80010a2:	e8df f003 	tbb	[pc, r3]
 80010a6:	1f05      	.short	0x1f05
 80010a8:	98625d27 	.word	0x98625d27
 80010ac:	a79d      	.short	0xa79d
 80010ae:	b1          	.byte	0xb1
 80010af:	00          	.byte	0x00
                    rmc.tim.hour = (rmc_sentence[0] - '0') * 10 + (rmc_sentence[1] - '0');
 80010b0:	7820      	ldrb	r0, [r4, #0]
 80010b2:	7863      	ldrb	r3, [r4, #1]
 80010b4:	4a64      	ldr	r2, [pc, #400]	@ (8001248 <parse_rmc+0x220>)
 80010b6:	210a      	movs	r1, #10
 80010b8:	3830      	subs	r0, #48	@ 0x30
 80010ba:	3b30      	subs	r3, #48	@ 0x30
 80010bc:	fb01 3300 	mla	r3, r1, r0, r3
 80010c0:	6013      	str	r3, [r2, #0]
                    rmc.tim.min = (rmc_sentence[2] - '0') * 10 + (rmc_sentence[3] - '0');
 80010c2:	78a0      	ldrb	r0, [r4, #2]
 80010c4:	78e3      	ldrb	r3, [r4, #3]
 80010c6:	3830      	subs	r0, #48	@ 0x30
 80010c8:	3b30      	subs	r3, #48	@ 0x30
 80010ca:	fb01 3300 	mla	r3, r1, r0, r3
 80010ce:	6053      	str	r3, [r2, #4]
                    rmc.tim.sec = (rmc_sentence[4] - '0') * 10 + (rmc_sentence[5] - '0');
 80010d0:	7920      	ldrb	r0, [r4, #4]
 80010d2:	7963      	ldrb	r3, [r4, #5]
 80010d4:	3830      	subs	r0, #48	@ 0x30
 80010d6:	3b30      	subs	r3, #48	@ 0x30
 80010d8:	fb01 3300 	mla	r3, r1, r0, r3
 80010dc:	6093      	str	r3, [r2, #8]
            field++;
 80010de:	3601      	adds	r6, #1
            rmc_sentence = ptr + 1;
 80010e0:	462c      	mov	r4, r5
        ptr++;
 80010e2:	e7bd      	b.n	8001060 <parse_rmc+0x38>
                    rmc.isValid = (rmc_sentence[0] == 'A') ? 1 : 0;
 80010e4:	7823      	ldrb	r3, [r4, #0]
 80010e6:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 80010ea:	4253      	negs	r3, r2
 80010ec:	4153      	adcs	r3, r2
 80010ee:	4a56      	ldr	r2, [pc, #344]	@ (8001248 <parse_rmc+0x220>)
 80010f0:	6313      	str	r3, [r2, #48]	@ 0x30
                    break;
 80010f2:	e7f4      	b.n	80010de <parse_rmc+0xb6>
                    rmc.lcation.latitude = (atof((char *)rmc_sentence) )/100;
 80010f4:	4620      	mov	r0, r4
 80010f6:	f008 ffcd 	bl	800a094 <atof>
 80010fa:	4b54      	ldr	r3, [pc, #336]	@ (800124c <parse_rmc+0x224>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	ec51 0b10 	vmov	r0, r1, d0
 8001102:	f7ff fbb3 	bl	800086c <__aeabi_ddiv>
 8001106:	4680      	mov	r8, r0
 8001108:	4689      	mov	r9, r1
                    int lati_int = (int)floor(rmc.lcation.latitude);
 800110a:	ec49 8b10 	vmov	d0, r8, r9
 800110e:	f00e ffb3 	bl	8010078 <floor>
 8001112:	ec51 0b10 	vmov	r0, r1, d0
 8001116:	f7ff fd2f 	bl	8000b78 <__aeabi_d2iz>
 800111a:	ee08 0a10 	vmov	s16, r0
					float lati_float = rmc.lcation.latitude - lati_int;
 800111e:	f7ff fa11 	bl	8000544 <__aeabi_i2d>
 8001122:	4602      	mov	r2, r0
 8001124:	460b      	mov	r3, r1
 8001126:	4640      	mov	r0, r8
 8001128:	4649      	mov	r1, r9
 800112a:	f7ff f8bd 	bl	80002a8 <__aeabi_dsub>
 800112e:	f7ff fd6b 	bl	8000c08 <__aeabi_d2f>
					lati_float = lati_float/0.6;
 8001132:	f7ff fa19 	bl	8000568 <__aeabi_f2d>
 8001136:	a340      	add	r3, pc, #256	@ (adr r3, 8001238 <parse_rmc+0x210>)
 8001138:	e9d3 2300 	ldrd	r2, r3, [r3]
 800113c:	f7ff fb96 	bl	800086c <__aeabi_ddiv>
 8001140:	f7ff fd62 	bl	8000c08 <__aeabi_d2f>
					rmc.lcation.latitude = lati_int + lati_float;
 8001144:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
					lati_float = lati_float/0.6;
 8001148:	ee07 0a90 	vmov	s15, r0
					rmc.lcation.latitude = lati_int + lati_float;
 800114c:	ee78 7a27 	vadd.f32	s15, s16, s15
 8001150:	ee17 0a90 	vmov	r0, s15
 8001154:	f7ff fa08 	bl	8000568 <__aeabi_f2d>
 8001158:	4b3b      	ldr	r3, [pc, #236]	@ (8001248 <parse_rmc+0x220>)
 800115a:	e9c3 010e 	strd	r0, r1, [r3, #56]	@ 0x38
                    break;
 800115e:	e7be      	b.n	80010de <parse_rmc+0xb6>
                    rmc.lcation.NS = rmc_sentence[0];
 8001160:	4b39      	ldr	r3, [pc, #228]	@ (8001248 <parse_rmc+0x220>)
 8001162:	7822      	ldrb	r2, [r4, #0]
 8001164:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
                    break;
 8001168:	e7b9      	b.n	80010de <parse_rmc+0xb6>
                    rmc.lcation.longitude = (atof((char *)rmc_sentence))/100;
 800116a:	4620      	mov	r0, r4
 800116c:	f008 ff92 	bl	800a094 <atof>
 8001170:	4b36      	ldr	r3, [pc, #216]	@ (800124c <parse_rmc+0x224>)
 8001172:	2200      	movs	r2, #0
 8001174:	ec51 0b10 	vmov	r0, r1, d0
 8001178:	f7ff fb78 	bl	800086c <__aeabi_ddiv>
 800117c:	4680      	mov	r8, r0
 800117e:	4689      	mov	r9, r1
                    int longi_int = (int)floor(rmc.lcation.longitude);
 8001180:	ec49 8b10 	vmov	d0, r8, r9
 8001184:	f00e ff78 	bl	8010078 <floor>
 8001188:	ec51 0b10 	vmov	r0, r1, d0
 800118c:	f7ff fcf4 	bl	8000b78 <__aeabi_d2iz>
 8001190:	ee08 0a10 	vmov	s16, r0
					float longi_float = rmc.lcation.longitude - longi_int;
 8001194:	f7ff f9d6 	bl	8000544 <__aeabi_i2d>
 8001198:	4602      	mov	r2, r0
 800119a:	460b      	mov	r3, r1
 800119c:	4640      	mov	r0, r8
 800119e:	4649      	mov	r1, r9
 80011a0:	f7ff f882 	bl	80002a8 <__aeabi_dsub>
 80011a4:	f7ff fd30 	bl	8000c08 <__aeabi_d2f>
					longi_float = longi_float / 0.6;
 80011a8:	f7ff f9de 	bl	8000568 <__aeabi_f2d>
 80011ac:	a322      	add	r3, pc, #136	@ (adr r3, 8001238 <parse_rmc+0x210>)
 80011ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011b2:	f7ff fb5b 	bl	800086c <__aeabi_ddiv>
 80011b6:	f7ff fd27 	bl	8000c08 <__aeabi_d2f>
					rmc.lcation.longitude = longi_int + longi_float;
 80011ba:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
					longi_float = longi_float / 0.6;
 80011be:	ee07 0a90 	vmov	s15, r0
					rmc.lcation.longitude = longi_int + longi_float;
 80011c2:	ee78 7a27 	vadd.f32	s15, s16, s15
 80011c6:	ee17 0a90 	vmov	r0, s15
 80011ca:	f7ff f9cd 	bl	8000568 <__aeabi_f2d>
 80011ce:	4b1e      	ldr	r3, [pc, #120]	@ (8001248 <parse_rmc+0x220>)
 80011d0:	e9c3 0112 	strd	r0, r1, [r3, #72]	@ 0x48
                    break;
 80011d4:	e783      	b.n	80010de <parse_rmc+0xb6>
                    rmc.lcation.EW = rmc_sentence[0];
 80011d6:	4b1c      	ldr	r3, [pc, #112]	@ (8001248 <parse_rmc+0x220>)
 80011d8:	7822      	ldrb	r2, [r4, #0]
 80011da:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
                    break;
 80011de:	e77e      	b.n	80010de <parse_rmc+0xb6>
                    rmc.speed = atof((char *)rmc_sentence);
 80011e0:	4620      	mov	r0, r4
 80011e2:	f008 ff57 	bl	800a094 <atof>
 80011e6:	ec51 0b10 	vmov	r0, r1, d0
 80011ea:	f7ff fd0d 	bl	8000c08 <__aeabi_d2f>
 80011ee:	4b16      	ldr	r3, [pc, #88]	@ (8001248 <parse_rmc+0x220>)
 80011f0:	6298      	str	r0, [r3, #40]	@ 0x28
                    break;
 80011f2:	e774      	b.n	80010de <parse_rmc+0xb6>
                    rmc.course = atof((char *)rmc_sentence);
 80011f4:	4620      	mov	r0, r4
 80011f6:	f008 ff4d 	bl	800a094 <atof>
 80011fa:	ec51 0b10 	vmov	r0, r1, d0
 80011fe:	f7ff fd03 	bl	8000c08 <__aeabi_d2f>
 8001202:	4b11      	ldr	r3, [pc, #68]	@ (8001248 <parse_rmc+0x220>)
 8001204:	62d8      	str	r0, [r3, #44]	@ 0x2c
                    break;
 8001206:	e76a      	b.n	80010de <parse_rmc+0xb6>
                    rmc.date.Day = (rmc_sentence[0] - '0') * 10 + (rmc_sentence[1] - '0');
 8001208:	7820      	ldrb	r0, [r4, #0]
 800120a:	7863      	ldrb	r3, [r4, #1]
 800120c:	4a0e      	ldr	r2, [pc, #56]	@ (8001248 <parse_rmc+0x220>)
 800120e:	210a      	movs	r1, #10
 8001210:	3830      	subs	r0, #48	@ 0x30
 8001212:	3b30      	subs	r3, #48	@ 0x30
 8001214:	fb01 3300 	mla	r3, r1, r0, r3
 8001218:	6113      	str	r3, [r2, #16]
                    rmc.date.Mon = (rmc_sentence[2] - '0') * 10 + (rmc_sentence[3] - '0');
 800121a:	78a0      	ldrb	r0, [r4, #2]
 800121c:	78e3      	ldrb	r3, [r4, #3]
 800121e:	3830      	subs	r0, #48	@ 0x30
 8001220:	3b30      	subs	r3, #48	@ 0x30
 8001222:	fb01 3300 	mla	r3, r1, r0, r3
 8001226:	6153      	str	r3, [r2, #20]
                    rmc.date.Yr = (rmc_sentence[4] - '0') * 10 + (rmc_sentence[5] - '0');
 8001228:	7920      	ldrb	r0, [r4, #4]
 800122a:	7963      	ldrb	r3, [r4, #5]
 800122c:	3830      	subs	r0, #48	@ 0x30
 800122e:	3b30      	subs	r3, #48	@ 0x30
 8001230:	fb01 3300 	mla	r3, r1, r0, r3
 8001234:	6193      	str	r3, [r2, #24]
                    break;
 8001236:	e752      	b.n	80010de <parse_rmc+0xb6>
 8001238:	33333333 	.word	0x33333333
 800123c:	3fe33333 	.word	0x3fe33333
 8001240:	20001240 	.word	0x20001240
 8001244:	08011d56 	.word	0x08011d56
 8001248:	200002e0 	.word	0x200002e0
 800124c:	40590000 	.word	0x40590000

08001250 <sendRMCDataToFlash>:


void sendRMCDataToFlash(RMCSTRUCT *rmcData) {
 8001250:	b510      	push	{r4, lr}
	HAL_UART_Transmit(&huart1, (uint8_t*) "SENDING RMC TO FLASH\n",  strlen("SENDING RMC\n") , HAL_MAX_DELAY);
 8001252:	490c      	ldr	r1, [pc, #48]	@ (8001284 <sendRMCDataToFlash+0x34>)
void sendRMCDataToFlash(RMCSTRUCT *rmcData) {
 8001254:	4604      	mov	r4, r0
	HAL_UART_Transmit(&huart1, (uint8_t*) "SENDING RMC TO FLASH\n",  strlen("SENDING RMC\n") , HAL_MAX_DELAY);
 8001256:	f04f 33ff 	mov.w	r3, #4294967295
 800125a:	220c      	movs	r2, #12
 800125c:	480a      	ldr	r0, [pc, #40]	@ (8001288 <sendRMCDataToFlash+0x38>)
 800125e:	f006 fed3 	bl	8008008 <HAL_UART_Transmit>
	osStatus_t status = osMessageQueuePut(RMC_MailQFLASHId, rmcData, 0, 1000);
 8001262:	480a      	ldr	r0, [pc, #40]	@ (800128c <sendRMCDataToFlash+0x3c>)
 8001264:	4621      	mov	r1, r4
 8001266:	6800      	ldr	r0, [r0, #0]
 8001268:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800126c:	2200      	movs	r2, #0
 800126e:	f007 f961 	bl	8008534 <osMessageQueuePut>
	if (status != osOK) {
 8001272:	4601      	mov	r1, r0
 8001274:	b120      	cbz	r0, 8001280 <sendRMCDataToFlash+0x30>
	   Debug_printf("\n\n-------------------------Failed to send message: %d ------------------------\n\n", status);
 8001276:	4806      	ldr	r0, [pc, #24]	@ (8001290 <sendRMCDataToFlash+0x40>)
	}
	else{
		Debug_printf("\n\n-------------------------SEND message successfullly at GPS: %d ------------------------\n\n", status);

	}
}
 8001278:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		Debug_printf("\n\n-------------------------SEND message successfullly at GPS: %d ------------------------\n\n", status);
 800127c:	f003 bf6c 	b.w	8005158 <Debug_printf>
 8001280:	4804      	ldr	r0, [pc, #16]	@ (8001294 <sendRMCDataToFlash+0x44>)
 8001282:	e7f9      	b.n	8001278 <sendRMCDataToFlash+0x28>
 8001284:	08011741 	.word	0x08011741
 8001288:	20001240 	.word	0x20001240
 800128c:	200027c8 	.word	0x200027c8
 8001290:	08011757 	.word	0x08011757
 8001294:	080117a8 	.word	0x080117a8

08001298 <getRMC>:


void getRMC(){
 8001298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int idx = 0;
	getRMC_time++;
 800129a:	4c52      	ldr	r4, [pc, #328]	@ (80013e4 <getRMC+0x14c>)
 800129c:	6823      	ldr	r3, [r4, #0]
 800129e:	3301      	adds	r3, #1
 80012a0:	6023      	str	r3, [r4, #0]
	int length = 0;
	for(size_t i = 0; i < GPS_STACK_SIZE; i++){
 80012a2:	4b51      	ldr	r3, [pc, #324]	@ (80013e8 <getRMC+0x150>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	461e      	mov	r6, r3
		if (gpsSentence[i] == '$' && gpsSentence[i+1] == 'G' && gpsSentence[i+2] == 'N' && gpsSentence[i+3] == 'R' && gpsSentence[i+4] == 'M' && gpsSentence[i+5] == 'C'
 80012a8:	f813 1b01 	ldrb.w	r1, [r3], #1
 80012ac:	2924      	cmp	r1, #36	@ 0x24
 80012ae:	4615      	mov	r5, r2
 80012b0:	f102 0201 	add.w	r2, r2, #1
 80012b4:	d16e      	bne.n	8001394 <getRMC+0xfc>
 80012b6:	7819      	ldrb	r1, [r3, #0]
 80012b8:	2947      	cmp	r1, #71	@ 0x47
 80012ba:	d16b      	bne.n	8001394 <getRMC+0xfc>
 80012bc:	7859      	ldrb	r1, [r3, #1]
 80012be:	294e      	cmp	r1, #78	@ 0x4e
 80012c0:	d168      	bne.n	8001394 <getRMC+0xfc>
 80012c2:	7899      	ldrb	r1, [r3, #2]
 80012c4:	2952      	cmp	r1, #82	@ 0x52
 80012c6:	d165      	bne.n	8001394 <getRMC+0xfc>
 80012c8:	78d9      	ldrb	r1, [r3, #3]
 80012ca:	294d      	cmp	r1, #77	@ 0x4d
 80012cc:	d162      	bne.n	8001394 <getRMC+0xfc>
 80012ce:	7919      	ldrb	r1, [r3, #4]
 80012d0:	2943      	cmp	r1, #67	@ 0x43
 80012d2:	d15f      	bne.n	8001394 <getRMC+0xfc>
			&& (GPS_STACK_SIZE -i) > 200 ){
 80012d4:	f5c2 6100 	rsb	r1, r2, #2048	@ 0x800
 80012d8:	3101      	adds	r1, #1
 80012da:	29c8      	cmp	r1, #200	@ 0xc8
 80012dc:	d95a      	bls.n	8001394 <getRMC+0xfc>
			isRMCExist = 1;
 80012de:	4b43      	ldr	r3, [pc, #268]	@ (80013ec <getRMC+0x154>)
			HAL_UART_Transmit(&huart1, (uint8_t *)"Getting RMC\n", strlen("Getting RMC\n"), 1000);
 80012e0:	4943      	ldr	r1, [pc, #268]	@ (80013f0 <getRMC+0x158>)
 80012e2:	4844      	ldr	r0, [pc, #272]	@ (80013f4 <getRMC+0x15c>)
			isRMCExist = 1;
 80012e4:	2201      	movs	r2, #1
 80012e6:	601a      	str	r2, [r3, #0]
			HAL_UART_Transmit(&huart1, (uint8_t *)"Getting RMC\n", strlen("Getting RMC\n"), 1000);
 80012e8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80012ec:	220c      	movs	r2, #12
 80012ee:	f006 fe8b 	bl	8008008 <HAL_UART_Transmit>
			while(gpsSentence[i+1] != 0x0A ){
 80012f2:	4a41      	ldr	r2, [pc, #260]	@ (80013f8 <getRMC+0x160>)
 80012f4:	1973      	adds	r3, r6, r5
	int idx = 0;
 80012f6:	2000      	movs	r0, #0
			while(gpsSentence[i+1] != 0x0A ){
 80012f8:	7859      	ldrb	r1, [r3, #1]
 80012fa:	290a      	cmp	r1, #10
 80012fc:	461d      	mov	r5, r3
 80012fe:	d143      	bne.n	8001388 <getRMC+0xf0>
			idx = 0;
			break;
		}
	 }
	for(size_t i = length; i < 128; i++){
		rmc_str[i] = 0;
 8001300:	4d3d      	ldr	r5, [pc, #244]	@ (80013f8 <getRMC+0x160>)
	}
	if(isRMCExist == 1){
 8001302:	4f3a      	ldr	r7, [pc, #232]	@ (80013ec <getRMC+0x154>)
		rmc_str[i] = 0;
 8001304:	f1c0 0280 	rsb	r2, r0, #128	@ 0x80
 8001308:	2100      	movs	r1, #0
 800130a:	4428      	add	r0, r5
 800130c:	f00a fe4e 	bl	800bfac <memset>
	if(isRMCExist == 1){
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	2b01      	cmp	r3, #1
 8001314:	d162      	bne.n	80013dc <getRMC+0x144>
		parse_rmc(rmc_str);
 8001316:	4628      	mov	r0, r5
		display_rmc_data(&huart1);
//		set_time(rmc.tim.hour, rmc.tim.min, rmc.tim.sec);
//		set_date(rmc.date.Yr, rmc.date.Mon, rmc.date.Day);
		get_RTC_time_date(&rmc);
 8001318:	4e38      	ldr	r6, [pc, #224]	@ (80013fc <getRMC+0x164>)
 800131a:	4d39      	ldr	r5, [pc, #228]	@ (8001400 <getRMC+0x168>)
		parse_rmc(rmc_str);
 800131c:	f7ff fe84 	bl	8001028 <parse_rmc>
		display_rmc_data(&huart1);
 8001320:	4834      	ldr	r0, [pc, #208]	@ (80013f4 <getRMC+0x15c>)
 8001322:	f7ff fe19 	bl	8000f58 <display_rmc_data>
		get_RTC_time_date(&rmc);
 8001326:	4630      	mov	r0, r6
 8001328:	f002 f998 	bl	800365c <get_RTC_time_date>
		if(rmc.isValid == 1 && (rmc_saved.isValid == 0 || isWithinThreshold(rmc_saved.lcation.latitude, rmc_saved.lcation.longitude, rmc.lcation.latitude, rmc.lcation.longitude, 1.0))){
 800132c:	6b33      	ldr	r3, [r6, #48]	@ 0x30
 800132e:	2b01      	cmp	r3, #1
 8001330:	d147      	bne.n	80013c2 <getRMC+0x12a>
 8001332:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8001334:	2b00      	cmp	r3, #0
 8001336:	d132      	bne.n	800139e <getRMC+0x106>
			Debug_printf("\n\n------------ Sending RMC at GPS------------\n\n");
 8001338:	4832      	ldr	r0, [pc, #200]	@ (8001404 <getRMC+0x16c>)
 800133a:	f003 ff0d 	bl	8005158 <Debug_printf>
			sendRMCDataToFlash(&rmc);
 800133e:	482f      	ldr	r0, [pc, #188]	@ (80013fc <getRMC+0x164>)
 8001340:	f7ff ff86 	bl	8001250 <sendRMCDataToFlash>
			getRMC_time = 0;
 8001344:	2300      	movs	r3, #0
			copy_RMC(&rmc_saved, &rmc);
 8001346:	492d      	ldr	r1, [pc, #180]	@ (80013fc <getRMC+0x164>)
 8001348:	482d      	ldr	r0, [pc, #180]	@ (8001400 <getRMC+0x168>)
			getRMC_time = 0;
 800134a:	6023      	str	r3, [r4, #0]
			copy_RMC(&rmc_saved, &rmc);
 800134c:	f7ff fdb2 	bl	8000eb4 <copy_RMC>
				get_RTC_time_date(&rmc_saved);
				sendRMCDataToFlash(&rmc_saved);
			}
		}

		isRMCExist = 0;
 8001350:	2300      	movs	r3, #0
 8001352:	603b      	str	r3, [r7, #0]

//	if(getRMC_time >= 150 && getRMC_time % 150 == 0){
//		Debug_printf("\n\n-------------------  COLD START GPS module -----------------------\n\n");
//		coldStart();
//	}
	if(getRMC_time >= 500){
 8001354:	6823      	ldr	r3, [r4, #0]
 8001356:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800135a:	db0f      	blt.n	800137c <getRMC+0xe4>
		GPS_DISABLE();
 800135c:	2201      	movs	r2, #1
 800135e:	2104      	movs	r1, #4
 8001360:	4829      	ldr	r0, [pc, #164]	@ (8001408 <getRMC+0x170>)
 8001362:	f004 fef9 	bl	8006158 <HAL_GPIO_WritePin>
		osDelay(500);
 8001366:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800136a:	f007 f83d 	bl	80083e8 <osDelay>
		GPS_ENABLE();
 800136e:	4826      	ldr	r0, [pc, #152]	@ (8001408 <getRMC+0x170>)
 8001370:	2200      	movs	r2, #0
 8001372:	2104      	movs	r1, #4
 8001374:	f004 fef0 	bl	8006158 <HAL_GPIO_WritePin>
		getRMC_time = 0;
 8001378:	2300      	movs	r3, #0
 800137a:	6023      	str	r3, [r4, #0]
	}
	Debug_printf("Elapsed Time blabla: %d\n", getRMC_time);
 800137c:	6821      	ldr	r1, [r4, #0]
 800137e:	4823      	ldr	r0, [pc, #140]	@ (800140c <getRMC+0x174>)
//	HAL_UART_Transmit(&huart1, rmc_str, 128,1000);
//	HAL_UART_Transmit(&huart1, (uint8_t*)"\n",1, 1000);
}
 8001380:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	Debug_printf("Elapsed Time blabla: %d\n", getRMC_time);
 8001384:	f003 bee8 	b.w	8005158 <Debug_printf>
				rmc_str[idx] = gpsSentence[i];
 8001388:	7829      	ldrb	r1, [r5, #0]
 800138a:	f802 1b01 	strb.w	r1, [r2], #1
				idx++;
 800138e:	3301      	adds	r3, #1
 8001390:	3001      	adds	r0, #1
				i++;
 8001392:	e7b1      	b.n	80012f8 <getRMC+0x60>
	for(size_t i = 0; i < GPS_STACK_SIZE; i++){
 8001394:	f5b2 6f00 	cmp.w	r2, #2048	@ 0x800
 8001398:	d186      	bne.n	80012a8 <getRMC+0x10>
	int length = 0;
 800139a:	2000      	movs	r0, #0
 800139c:	e7b0      	b.n	8001300 <getRMC+0x68>
    double distance = haversine(lat1, lon1, lat2, lon2);
 800139e:	ed96 3b12 	vldr	d3, [r6, #72]	@ 0x48
 80013a2:	ed96 2b0e 	vldr	d2, [r6, #56]	@ 0x38
 80013a6:	ed95 1b12 	vldr	d1, [r5, #72]	@ 0x48
 80013aa:	ed95 0b0e 	vldr	d0, [r5, #56]	@ 0x38
 80013ae:	f7ff fcb3 	bl	8000d18 <haversine>
		if(rmc.isValid == 1 && (rmc_saved.isValid == 0 || isWithinThreshold(rmc_saved.lcation.latitude, rmc_saved.lcation.longitude, rmc.lcation.latitude, rmc.lcation.longitude, 1.0))){
 80013b2:	4b17      	ldr	r3, [pc, #92]	@ (8001410 <getRMC+0x178>)
    double distance = haversine(lat1, lon1, lat2, lon2);
 80013b4:	ec51 0b10 	vmov	r0, r1, d0
		if(rmc.isValid == 1 && (rmc_saved.isValid == 0 || isWithinThreshold(rmc_saved.lcation.latitude, rmc_saved.lcation.longitude, rmc.lcation.latitude, rmc.lcation.longitude, 1.0))){
 80013b8:	2200      	movs	r2, #0
 80013ba:	f7ff fba9 	bl	8000b10 <__aeabi_dcmple>
 80013be:	2800      	cmp	r0, #0
 80013c0:	d1ba      	bne.n	8001338 <getRMC+0xa0>
			if(rmc_saved.isValid == 1){
 80013c2:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80013c4:	2b01      	cmp	r3, #1
 80013c6:	d1c3      	bne.n	8001350 <getRMC+0xb8>
				Debug_printf("\n\n------------ GPS BUG: Sending latest RMC at GPS------------\n\n");
 80013c8:	4812      	ldr	r0, [pc, #72]	@ (8001414 <getRMC+0x17c>)
 80013ca:	f003 fec5 	bl	8005158 <Debug_printf>
				get_RTC_time_date(&rmc_saved);
 80013ce:	480c      	ldr	r0, [pc, #48]	@ (8001400 <getRMC+0x168>)
 80013d0:	f002 f944 	bl	800365c <get_RTC_time_date>
				sendRMCDataToFlash(&rmc_saved);
 80013d4:	480a      	ldr	r0, [pc, #40]	@ (8001400 <getRMC+0x168>)
 80013d6:	f7ff ff3b 	bl	8001250 <sendRMCDataToFlash>
 80013da:	e7b9      	b.n	8001350 <getRMC+0xb8>
		Debug_printf("\n\n------------ GPS MODULE BUG: NO RMC FOUND ------------\n\n");
 80013dc:	480e      	ldr	r0, [pc, #56]	@ (8001418 <getRMC+0x180>)
 80013de:	f003 febb 	bl	8005158 <Debug_printf>
 80013e2:	e7b7      	b.n	8001354 <getRMC+0xbc>
 80013e4:	2000027c 	.word	0x2000027c
 80013e8:	20000338 	.word	0x20000338
 80013ec:	20000280 	.word	0x20000280
 80013f0:	08011804 	.word	0x08011804
 80013f4:	20001240 	.word	0x20001240
 80013f8:	20000b48 	.word	0x20000b48
 80013fc:	200002e0 	.word	0x200002e0
 8001400:	20000288 	.word	0x20000288
 8001404:	08011811 	.word	0x08011811
 8001408:	48000800 	.word	0x48000800
 800140c:	080118bc 	.word	0x080118bc
 8001410:	3ff00000 	.word	0x3ff00000
 8001414:	08011841 	.word	0x08011841
 8001418:	08011881 	.word	0x08011881

0800141c <StartGPS>:


void StartGPS(void const * argument)
{
 800141c:	b508      	push	{r3, lr}
	Debug_printf("\n\n--------------------STARTING GPS ---------------------\n\n");
 800141e:	4816      	ldr	r0, [pc, #88]	@ (8001478 <StartGPS+0x5c>)
	{
//		osThreadId_t thread1 = osThreadGetId();
//		uint32_t freeStack1 = osThreadGetStackSpace(thread1);
//
//		Debug_printf("Thread GPS %p is running low on stack: %04d bytes remaining\n", thread1, freeStack1);
		Debug_printf("\n\n----------------------- Inside GPS ------------------------\n\n");
 8001420:	4d16      	ldr	r5, [pc, #88]	@ (800147c <StartGPS+0x60>)
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 8001422:	4c17      	ldr	r4, [pc, #92]	@ (8001480 <StartGPS+0x64>)
	Debug_printf("\n\n--------------------STARTING GPS ---------------------\n\n");
 8001424:	f003 fe98 	bl	8005158 <Debug_printf>
	RingBufferDmaU8_initUSARTRx(&GPSRxDMARing, &huart2, gpsSentence, GPS_STACK_SIZE);
 8001428:	4a16      	ldr	r2, [pc, #88]	@ (8001484 <StartGPS+0x68>)
 800142a:	4917      	ldr	r1, [pc, #92]	@ (8001488 <StartGPS+0x6c>)
 800142c:	4817      	ldr	r0, [pc, #92]	@ (800148c <StartGPS+0x70>)
 800142e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001432:	f002 f8cf 	bl	80035d4 <RingBufferDmaU8_initUSARTRx>
	memset(gpsSentence, 0x00, GPS_STACK_SIZE);
 8001436:	4813      	ldr	r0, [pc, #76]	@ (8001484 <StartGPS+0x68>)
 8001438:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800143c:	2100      	movs	r1, #0
 800143e:	f00a fdb5 	bl	800bfac <memset>
		Debug_printf("\n\n----------------------- Inside GPS ------------------------\n\n");
 8001442:	4628      	mov	r0, r5
 8001444:	f003 fe88 	bl	8005158 <Debug_printf>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 8001448:	2201      	movs	r2, #1
 800144a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800144e:	4620      	mov	r0, r4
 8001450:	f004 fe82 	bl	8006158 <HAL_GPIO_WritePin>
		osDelay(500);
 8001454:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001458:	f006 ffc6 	bl	80083e8 <osDelay>
		getRMC();
 800145c:	f7ff ff1c 	bl	8001298 <getRMC>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 8001460:	4620      	mov	r0, r4
 8001462:	2200      	movs	r2, #0
 8001464:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001468:	f004 fe76 	bl	8006158 <HAL_GPIO_WritePin>
		osDelay(500);
 800146c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001470:	f006 ffba 	bl	80083e8 <osDelay>
	while(1)
 8001474:	e7e5      	b.n	8001442 <StartGPS+0x26>
 8001476:	bf00      	nop
 8001478:	080118d5 	.word	0x080118d5
 800147c:	08011910 	.word	0x08011910
 8001480:	48000800 	.word	0x48000800
 8001484:	20000338 	.word	0x20000338
 8001488:	200011b8 	.word	0x200011b8
 800148c:	20000b38 	.word	0x20000b38

08001490 <create_terminal_registration>:
RMCSTRUCT rmc_jt;
uint8_t terminal_phone_number[6] = {0};
GSM_MAIL_STRUCT receivedDataGSM;


JT808_TerminalRegistration create_terminal_registration(){
 8001490:	b5f0      	push	{r4, r5, r6, r7, lr}
	JT808_TerminalRegistration reg_msg = {
 8001492:	4b11      	ldr	r3, [pc, #68]	@ (80014d8 <create_terminal_registration+0x48>)
JT808_TerminalRegistration create_terminal_registration(){
 8001494:	b091      	sub	sp, #68	@ 0x44
	JT808_TerminalRegistration reg_msg = {
 8001496:	ac01      	add	r4, sp, #4
JT808_TerminalRegistration create_terminal_registration(){
 8001498:	4605      	mov	r5, r0
	JT808_TerminalRegistration reg_msg = {
 800149a:	f103 0738 	add.w	r7, r3, #56	@ 0x38
 800149e:	4622      	mov	r2, r4
 80014a0:	6818      	ldr	r0, [r3, #0]
 80014a2:	6859      	ldr	r1, [r3, #4]
 80014a4:	4626      	mov	r6, r4
 80014a6:	c603      	stmia	r6!, {r0, r1}
 80014a8:	3308      	adds	r3, #8
 80014aa:	42bb      	cmp	r3, r7
 80014ac:	4634      	mov	r4, r6
 80014ae:	d1f7      	bne.n	80014a0 <create_terminal_registration+0x10>
 80014b0:	6818      	ldr	r0, [r3, #0]
 80014b2:	6030      	str	r0, [r6, #0]
        .plate_no = {0x00, 0x00, 0x00, 0x00, 0x35, 0x36, 0x37, 0x38, 0x39, 0x31, 0x20, 0x32, 0x39, 0x4C, 0x31, 0x33, 0x34, 0x31, 0x35, 0x34},
        .check_sum = 0x00,  // Placeholder, will be set by the function
        .end_mask = 0x7E
    };

	return reg_msg;
 80014b4:	4613      	mov	r3, r2
 80014b6:	ae0f      	add	r6, sp, #60	@ 0x3c
 80014b8:	462a      	mov	r2, r5
 80014ba:	461c      	mov	r4, r3
 80014bc:	cc03      	ldmia	r4!, {r0, r1}
 80014be:	42b4      	cmp	r4, r6
 80014c0:	6010      	str	r0, [r2, #0]
 80014c2:	6051      	str	r1, [r2, #4]
 80014c4:	4623      	mov	r3, r4
 80014c6:	f102 0208 	add.w	r2, r2, #8
 80014ca:	d1f6      	bne.n	80014ba <create_terminal_registration+0x2a>
 80014cc:	6820      	ldr	r0, [r4, #0]
 80014ce:	6010      	str	r0, [r2, #0]
}
 80014d0:	4628      	mov	r0, r5
 80014d2:	b011      	add	sp, #68	@ 0x44
 80014d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014d6:	bf00      	nop
 80014d8:	08011598 	.word	0x08011598

080014dc <create_location_info_report>:


JT808_LocationInfoReport create_location_info_report() {
 80014dc:	b530      	push	{r4, r5, lr}
	JT808_LocationInfoReport location_info = {
 80014de:	2541      	movs	r5, #65	@ 0x41
JT808_LocationInfoReport create_location_info_report() {
 80014e0:	b093      	sub	sp, #76	@ 0x4c
 80014e2:	4604      	mov	r4, r0
	JT808_LocationInfoReport location_info = {
 80014e4:	462a      	mov	r2, r5
 80014e6:	4906      	ldr	r1, [pc, #24]	@ (8001500 <create_location_info_report+0x24>)
 80014e8:	a801      	add	r0, sp, #4
 80014ea:	f00b fbb3 	bl	800cc54 <memcpy>
        .signal = {0x31},                      // 31
        .additional = {0x01, 0x00, 0xFD, 0x04, 0x03, 0xF1, 0x00, 0x00, 0x0A}, // 01 00 FD 04 03 F1 00 00 0A
        .end_mask = 0x7E                       // 7E
    };
    
    return location_info;
 80014ee:	462a      	mov	r2, r5
 80014f0:	a901      	add	r1, sp, #4
 80014f2:	4620      	mov	r0, r4
 80014f4:	f00b fbae 	bl	800cc54 <memcpy>
}
 80014f8:	4620      	mov	r0, r4
 80014fa:	b013      	add	sp, #76	@ 0x4c
 80014fc:	bd30      	pop	{r4, r5, pc}
 80014fe:	bf00      	nop
 8001500:	080115d4 	.word	0x080115d4

08001504 <set_status_bit>:
void clearBit(uint8_t *status, int bitPosition) {
    *status &= ~(1 << bitPosition); // Clear the specific bit to 0
}

void set_status_bit(uint8_t *status_bit){
	if(rmc_jt.lcation.NS == 'N') clearBit(status_bit+3, 2);
 8001504:	4a0a      	ldr	r2, [pc, #40]	@ (8001530 <set_status_bit+0x2c>)
    *status &= ~(1 << bitPosition); // Clear the specific bit to 0
 8001506:	78c3      	ldrb	r3, [r0, #3]
	if(rmc_jt.lcation.NS == 'N') clearBit(status_bit+3, 2);
 8001508:	f892 1040 	ldrb.w	r1, [r2, #64]	@ 0x40
 800150c:	294e      	cmp	r1, #78	@ 0x4e
    *status &= ~(1 << bitPosition); // Clear the specific bit to 0
 800150e:	bf0c      	ite	eq
 8001510:	f003 03fb 	andeq.w	r3, r3, #251	@ 0xfb
    *status |= (1 << bitPosition);  // Set the specific bit to 1
 8001514:	f043 0304 	orrne.w	r3, r3, #4
 8001518:	70c3      	strb	r3, [r0, #3]
	else setBit(status_bit+3, 2);

	if(rmc_jt.lcation.EW == 'E') clearBit(status_bit+3, 3);
 800151a:	f892 2050 	ldrb.w	r2, [r2, #80]	@ 0x50
 800151e:	2a45      	cmp	r2, #69	@ 0x45
    *status &= ~(1 << bitPosition); // Clear the specific bit to 0
 8001520:	bf0c      	ite	eq
 8001522:	f003 03f7 	andeq.w	r3, r3, #247	@ 0xf7
    *status |= (1 << bitPosition);  // Set the specific bit to 1
 8001526:	f043 0308 	orrne.w	r3, r3, #8
 800152a:	70c3      	strb	r3, [r0, #3]
	else setBit(status_bit+3, 3);
}
 800152c:	4770      	bx	lr
 800152e:	bf00      	nop
 8001530:	20000c30 	.word	0x20000c30

08001534 <send_AT_command>:
    memcpy(message_array, location_info, *array_length);  // Copy struct data into message array

    return message_array;
}

void send_AT_command(const char *command) {
 8001534:	b510      	push	{r4, lr}
 8001536:	4604      	mov	r4, r0
    HAL_UART_Transmit(&huart3, (uint8_t *)command, strlen(command), HAL_MAX_DELAY);
 8001538:	f7fe feaa 	bl	8000290 <strlen>
 800153c:	4621      	mov	r1, r4
 800153e:	b282      	uxth	r2, r0
}
 8001540:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_UART_Transmit(&huart3, (uint8_t *)command, strlen(command), HAL_MAX_DELAY);
 8001544:	4802      	ldr	r0, [pc, #8]	@ (8001550 <send_AT_command+0x1c>)
 8001546:	f04f 33ff 	mov.w	r3, #4294967295
 800154a:	f006 bd5d 	b.w	8008008 <HAL_UART_Transmit>
 800154e:	bf00      	nop
 8001550:	20001130 	.word	0x20001130

08001554 <SIM_UART_ReInitializeRxDMA>:

void SIM_UART_ReInitializeRxDMA(void){
 8001554:	b510      	push	{r4, lr}
	HAL_StatusTypeDef ret = HAL_UART_Abort(&huart3);
 8001556:	4809      	ldr	r0, [pc, #36]	@ (800157c <SIM_UART_ReInitializeRxDMA+0x28>)
 8001558:	f006 fae9 	bl	8007b2e <HAL_UART_Abort>
	if(ret != HAL_OK)
 800155c:	b108      	cbz	r0, 8001562 <SIM_UART_ReInitializeRxDMA+0xe>
	{
		Error_Handler();			
 800155e:	f002 fb90 	bl	8003c82 <Error_Handler>
	}		
	osDelay(50);	//	50 is OK
 8001562:	2032      	movs	r0, #50	@ 0x32
 8001564:	f006 ff40 	bl	80083e8 <osDelay>
	//memset(gnssDmaRingBufferMemory, 0x20, sizeof(gnssDmaRingBufferMemory));	// insert buffer with space character	
	RingBufferDmaU8_initUSARTRx(&SIMRxDMARing, &huart3, response, SIM_RESPONSE_MAX_SIZE);
}
 8001568:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	RingBufferDmaU8_initUSARTRx(&SIMRxDMARing, &huart3, response, SIM_RESPONSE_MAX_SIZE);
 800156c:	4a04      	ldr	r2, [pc, #16]	@ (8001580 <SIM_UART_ReInitializeRxDMA+0x2c>)
 800156e:	4903      	ldr	r1, [pc, #12]	@ (800157c <SIM_UART_ReInitializeRxDMA+0x28>)
 8001570:	4804      	ldr	r0, [pc, #16]	@ (8001584 <SIM_UART_ReInitializeRxDMA+0x30>)
 8001572:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8001576:	f002 b82d 	b.w	80035d4 <RingBufferDmaU8_initUSARTRx>
 800157a:	bf00      	nop
 800157c:	20001130 	.word	0x20001130
 8001580:	20000ca8 	.word	0x20000ca8
 8001584:	20000c98 	.word	0x20000c98

08001588 <find_length>:

int find_length(uint8_t *str){
	int i = 0;
	while(str[i] != 0x00){
 8001588:	f7fe be82 	b.w	8000290 <strlen>

0800158c <receive_response>:
	}
	return i;
		
}

void receive_response(char *cmd_str) {
 800158c:	b530      	push	{r4, r5, lr}
	uint8_t output_buffer[128];
	snprintf((char *)output_buffer, 128, "Response at command: %s\n", cmd_str);
	uart_transmit_string(&huart1, output_buffer);
 800158e:	4c0e      	ldr	r4, [pc, #56]	@ (80015c8 <receive_response+0x3c>)
	snprintf((char *)output_buffer, 128, "Response at command: %s\n", cmd_str);
 8001590:	4a0e      	ldr	r2, [pc, #56]	@ (80015cc <receive_response+0x40>)
	//while(response[1] == '\0'){}

	HAL_UART_Transmit(&huart1, response, find_length(response), 1000);
 8001592:	4d0f      	ldr	r5, [pc, #60]	@ (80015d0 <receive_response+0x44>)
void receive_response(char *cmd_str) {
 8001594:	b0a1      	sub	sp, #132	@ 0x84
 8001596:	4603      	mov	r3, r0
	snprintf((char *)output_buffer, 128, "Response at command: %s\n", cmd_str);
 8001598:	2180      	movs	r1, #128	@ 0x80
 800159a:	4668      	mov	r0, sp
 800159c:	f00a fc0a 	bl	800bdb4 <sniprintf>
	uart_transmit_string(&huart1, output_buffer);
 80015a0:	4669      	mov	r1, sp
 80015a2:	4620      	mov	r0, r4
 80015a4:	f003 fdc8 	bl	8005138 <uart_transmit_string>
	HAL_UART_Transmit(&huart1, response, find_length(response), 1000);
 80015a8:	4628      	mov	r0, r5
 80015aa:	f7ff ffed 	bl	8001588 <find_length>
 80015ae:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80015b2:	b282      	uxth	r2, r0
 80015b4:	4629      	mov	r1, r5
 80015b6:	4620      	mov	r0, r4
 80015b8:	f006 fd26 	bl	8008008 <HAL_UART_Transmit>
	uart_transmit_string(&huart1, (uint8_t*)"\n");
 80015bc:	4905      	ldr	r1, [pc, #20]	@ (80015d4 <receive_response+0x48>)
 80015be:	4620      	mov	r0, r4
 80015c0:	f003 fdba 	bl	8005138 <uart_transmit_string>
//	osDelay(1000);
}
 80015c4:	b021      	add	sp, #132	@ 0x84
 80015c6:	bd30      	pop	{r4, r5, pc}
 80015c8:	20001240 	.word	0x20001240
 80015cc:	08011950 	.word	0x08011950
 80015d0:	20000ca8 	.word	0x20000ca8
 80015d4:	0801296a 	.word	0x0801296a

080015d8 <init_SIM_module>:

void init_SIM_module() {
 80015d8:	b510      	push	{r4, lr}
    
    // Check if module responds
	SIM_ENABLE();
 80015da:	4c0b      	ldr	r4, [pc, #44]	@ (8001608 <init_SIM_module+0x30>)
 80015dc:	2201      	movs	r2, #1
 80015de:	4611      	mov	r1, r2
 80015e0:	4620      	mov	r0, r4
 80015e2:	f004 fdb9 	bl	8006158 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 80015e6:	2200      	movs	r2, #0
 80015e8:	2102      	movs	r1, #2
 80015ea:	4620      	mov	r0, r4
 80015ec:	f004 fdb4 	bl	8006158 <HAL_GPIO_WritePin>
	osDelay(2000);
 80015f0:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80015f4:	f006 fef8 	bl	80083e8 <osDelay>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 80015f8:	4620      	mov	r0, r4
 80015fa:	2201      	movs	r2, #1
}
 80015fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 8001600:	2102      	movs	r1, #2
 8001602:	f004 bda9 	b.w	8006158 <HAL_GPIO_WritePin>
 8001606:	bf00      	nop
 8001608:	48000800 	.word	0x48000800

0800160c <reboot_SIM_module>:

void reboot_SIM_module(){
 800160c:	b510      	push	{r4, lr}
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 800160e:	4c11      	ldr	r4, [pc, #68]	@ (8001654 <reboot_SIM_module+0x48>)
 8001610:	2200      	movs	r2, #0
 8001612:	2102      	movs	r1, #2
 8001614:	4620      	mov	r0, r4
 8001616:	f004 fd9f 	bl	8006158 <HAL_GPIO_WritePin>
	osDelay(1500);
 800161a:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 800161e:	f006 fee3 	bl	80083e8 <osDelay>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 8001622:	2201      	movs	r2, #1
 8001624:	2102      	movs	r1, #2
 8001626:	4620      	mov	r0, r4
 8001628:	f004 fd96 	bl	8006158 <HAL_GPIO_WritePin>
	osDelay(10000);
 800162c:	f242 7010 	movw	r0, #10000	@ 0x2710
 8001630:	f006 feda 	bl	80083e8 <osDelay>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 8001634:	2200      	movs	r2, #0
 8001636:	2102      	movs	r1, #2
 8001638:	4620      	mov	r0, r4
 800163a:	f004 fd8d 	bl	8006158 <HAL_GPIO_WritePin>
	osDelay(1500);
 800163e:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8001642:	f006 fed1 	bl	80083e8 <osDelay>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 8001646:	4620      	mov	r0, r4
 8001648:	2201      	movs	r2, #1
}
 800164a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 800164e:	2102      	movs	r1, #2
 8001650:	f004 bd82 	b.w	8006158 <HAL_GPIO_WritePin>
 8001654:	48000800 	.word	0x48000800

08001658 <convert_dec_to_hex_value>:

int convert_dec_to_hex_value(int int_value){
    return (int_value /10*16) + (int_value%10);
 8001658:	220a      	movs	r2, #10
 800165a:	fb90 f3f2 	sdiv	r3, r0, r2
 800165e:	fb02 0013 	mls	r0, r2, r3, r0
}
 8001662:	eb00 1003 	add.w	r0, r0, r3, lsl #4
 8001666:	4770      	bx	lr

08001668 <save_rmc_to_location_info>:


void save_rmc_to_location_info(JT808_LocationInfoReport* location_info){
 8001668:	b570      	push	{r4, r5, r6, lr}
	location_info->timestamp[0] = (uint8_t)convert_dec_to_hex_value(rmc_jt.date.Yr);  // Assign year (0x23)
 800166a:	4d43      	ldr	r5, [pc, #268]	@ (8001778 <save_rmc_to_location_info+0x110>)
void save_rmc_to_location_info(JT808_LocationInfoReport* location_info){
 800166c:	4604      	mov	r4, r0
	location_info->timestamp[0] = (uint8_t)convert_dec_to_hex_value(rmc_jt.date.Yr);  // Assign year (0x23)
 800166e:	69a8      	ldr	r0, [r5, #24]
 8001670:	f7ff fff2 	bl	8001658 <convert_dec_to_hex_value>
 8001674:	f884 0023 	strb.w	r0, [r4, #35]	@ 0x23
	location_info->timestamp[1] = (uint8_t)convert_dec_to_hex_value(rmc_jt.date.Mon);          // Assign month (0x11)
 8001678:	6968      	ldr	r0, [r5, #20]
 800167a:	f7ff ffed 	bl	8001658 <convert_dec_to_hex_value>
 800167e:	f884 0024 	strb.w	r0, [r4, #36]	@ 0x24
	location_info->timestamp[2] = (uint8_t)convert_dec_to_hex_value(rmc_jt.date.Day);            // Assign day (0x08)
 8001682:	6928      	ldr	r0, [r5, #16]
 8001684:	f7ff ffe8 	bl	8001658 <convert_dec_to_hex_value>
 8001688:	f884 0025 	strb.w	r0, [r4, #37]	@ 0x25
	location_info->timestamp[3] = (uint8_t)convert_dec_to_hex_value(rmc_jt.tim.hour);           // Assign hour (0x14)
 800168c:	6828      	ldr	r0, [r5, #0]
 800168e:	f7ff ffe3 	bl	8001658 <convert_dec_to_hex_value>
 8001692:	f884 0026 	strb.w	r0, [r4, #38]	@ 0x26
	location_info->timestamp[4] = (uint8_t)convert_dec_to_hex_value(rmc_jt.tim.min);         // Assign minute (0x55)
 8001696:	6868      	ldr	r0, [r5, #4]
 8001698:	f7ff ffde 	bl	8001658 <convert_dec_to_hex_value>
 800169c:	f884 0027 	strb.w	r0, [r4, #39]	@ 0x27
	location_info->timestamp[5] = (uint8_t)convert_dec_to_hex_value(rmc_jt.tim.sec);  
 80016a0:	68a8      	ldr	r0, [r5, #8]
 80016a2:	f7ff ffd9 	bl	8001658 <convert_dec_to_hex_value>
 80016a6:	f884 0028 	strb.w	r0, [r4, #40]	@ 0x28
	double latitude = rmc_jt.lcation.latitude * 1000000;
 80016aa:	e9d5 010e 	ldrd	r0, r1, [r5, #56]	@ 0x38
 80016ae:	a32e      	add	r3, pc, #184	@ (adr r3, 8001768 <save_rmc_to_location_info+0x100>)
 80016b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016b4:	f7fe ffb0 	bl	8000618 <__aeabi_dmul>
	double longitude = rmc_jt.lcation.longitude * 1000000;
	int32_t latitude_int = (int32_t)round(latitude);  // Convert to integer, rounding if needed
 80016b8:	ec41 0b10 	vmov	d0, r0, r1
 80016bc:	f00e fd58 	bl	8010170 <round>
 80016c0:	ec51 0b10 	vmov	r0, r1, d0
 80016c4:	f7ff fa58 	bl	8000b78 <__aeabi_d2iz>
	double longitude = rmc_jt.lcation.longitude * 1000000;
 80016c8:	a327      	add	r3, pc, #156	@ (adr r3, 8001768 <save_rmc_to_location_info+0x100>)
 80016ca:	e9d3 2300 	ldrd	r2, r3, [r3]
	int32_t latitude_int = (int32_t)round(latitude);  // Convert to integer, rounding if needed
 80016ce:	4606      	mov	r6, r0
	double longitude = rmc_jt.lcation.longitude * 1000000;
 80016d0:	e9d5 0112 	ldrd	r0, r1, [r5, #72]	@ 0x48
 80016d4:	f7fe ffa0 	bl	8000618 <__aeabi_dmul>
	int32_t longitude_int = (int32_t)round(longitude);
 80016d8:	ec41 0b10 	vmov	d0, r0, r1
 80016dc:	f00e fd48 	bl	8010170 <round>
 80016e0:	ec51 0b10 	vmov	r0, r1, d0
 80016e4:	f7ff fa48 	bl	8000b78 <__aeabi_d2iz>
	
	location_info->latitude[0] = (latitude_int >> 24) & 0xFF;  // Most significant byte
 80016e8:	0e33      	lsrs	r3, r6, #24
 80016ea:	7563      	strb	r3, [r4, #21]
	location_info->latitude[1] = (latitude_int >> 16) & 0xFF;
 80016ec:	1433      	asrs	r3, r6, #16
 80016ee:	75a3      	strb	r3, [r4, #22]
	location_info->latitude[2] = (latitude_int >> 8) & 0xFF;
 80016f0:	1233      	asrs	r3, r6, #8
 80016f2:	75e3      	strb	r3, [r4, #23]
	location_info->latitude[3] = latitude_int & 0xFF;
	
	location_info->longitude[0] = (longitude_int >> 24) & 0xFF;  // Most significant byte
 80016f4:	0e03      	lsrs	r3, r0, #24
 80016f6:	7663      	strb	r3, [r4, #25]
	location_info->longitude[1] = (longitude_int >> 16) & 0xFF;
 80016f8:	1403      	asrs	r3, r0, #16
 80016fa:	76a3      	strb	r3, [r4, #26]
	location_info->longitude[2] = (longitude_int >> 8) & 0xFF;
 80016fc:	1203      	asrs	r3, r0, #8
 80016fe:	76e3      	strb	r3, [r4, #27]
	location_info->longitude[3] = longitude_int & 0xFF;
 8001700:	7720      	strb	r0, [r4, #28]
	location_info->latitude[3] = latitude_int & 0xFF;
 8001702:	7626      	strb	r6, [r4, #24]
	
	int speed = round(rmc_jt.speed * 10 * 1.852);
 8001704:	ed95 7a0a 	vldr	s14, [r5, #40]	@ 0x28
 8001708:	eef2 7a04 	vmov.f32	s15, #36	@ 0x41200000  10.0
 800170c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001710:	ee17 0a90 	vmov	r0, s15
 8001714:	f7fe ff28 	bl	8000568 <__aeabi_f2d>
 8001718:	a315      	add	r3, pc, #84	@ (adr r3, 8001770 <save_rmc_to_location_info+0x108>)
 800171a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800171e:	f7fe ff7b 	bl	8000618 <__aeabi_dmul>
 8001722:	ec41 0b10 	vmov	d0, r0, r1
 8001726:	f00e fd23 	bl	8010170 <round>
 800172a:	ec51 0b10 	vmov	r0, r1, d0
 800172e:	f7ff fa23 	bl	8000b78 <__aeabi_d2iz>
	location_info->speed[0] = (speed >> 8) & 0xFF;
 8001732:	1203      	asrs	r3, r0, #8
 8001734:	77e3      	strb	r3, [r4, #31]
	location_info->speed[1] =  speed & 0xFF;
 8001736:	f884 0020 	strb.w	r0, [r4, #32]
	
	int direction = round(rmc_jt.course);
 800173a:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 800173c:	f7fe ff14 	bl	8000568 <__aeabi_f2d>
 8001740:	ec41 0b10 	vmov	d0, r0, r1
 8001744:	f00e fd14 	bl	8010170 <round>
 8001748:	ec51 0b10 	vmov	r0, r1, d0
 800174c:	f7ff fa14 	bl	8000b78 <__aeabi_d2iz>
	location_info->direction[0] = (direction >> 8) & 0xFF;
 8001750:	1203      	asrs	r3, r0, #8
	location_info->direction[1] =  direction & 0xFF;
 8001752:	f884 0022 	strb.w	r0, [r4, #34]	@ 0x22
	location_info->direction[0] = (direction >> 8) & 0xFF;
 8001756:	f884 3021 	strb.w	r3, [r4, #33]	@ 0x21
	
	set_status_bit(location_info->status);
 800175a:	f104 0011 	add.w	r0, r4, #17
}
 800175e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	set_status_bit(location_info->status);
 8001762:	f7ff becf 	b.w	8001504 <set_status_bit>
 8001766:	bf00      	nop
 8001768:	00000000 	.word	0x00000000
 800176c:	412e8480 	.word	0x412e8480
 8001770:	c083126f 	.word	0xc083126f
 8001774:	3ffda1ca 	.word	0x3ffda1ca
 8001778:	20000c30 	.word	0x20000c30

0800177c <first_check_SIM>:

//AT
int first_check_SIM()
{
 800177c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 800177e:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8001782:	2100      	movs	r1, #0
 8001784:	4845      	ldr	r0, [pc, #276]	@ (800189c <first_check_SIM+0x120>)
	SIM_UART_ReInitializeRxDMA();
	const char *substring = "PB DONE";
	int count_check = 0;
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
	SIM_UART_ReInitializeRxDMA();
	while(strstr((char *) response, substring) == NULL)
 8001786:	4d46      	ldr	r5, [pc, #280]	@ (80018a0 <first_check_SIM+0x124>)
 8001788:	4c44      	ldr	r4, [pc, #272]	@ (800189c <first_check_SIM+0x120>)
	{
		receive_response("WAITING FOR SIM MODULE TO BE READY\n");
 800178a:	4e46      	ldr	r6, [pc, #280]	@ (80018a4 <first_check_SIM+0x128>)
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 800178c:	f00a fc0e 	bl	800bfac <memset>
	SIM_UART_ReInitializeRxDMA();
 8001790:	f7ff fee0 	bl	8001554 <SIM_UART_ReInitializeRxDMA>
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8001794:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8001798:	2100      	movs	r1, #0
 800179a:	4840      	ldr	r0, [pc, #256]	@ (800189c <first_check_SIM+0x120>)
 800179c:	f00a fc06 	bl	800bfac <memset>
	SIM_UART_ReInitializeRxDMA();
 80017a0:	f7ff fed8 	bl	8001554 <SIM_UART_ReInitializeRxDMA>
	while(strstr((char *) response, substring) == NULL)
 80017a4:	4629      	mov	r1, r5
 80017a6:	4620      	mov	r0, r4
 80017a8:	f00a fc50 	bl	800c04c <strstr>
 80017ac:	2800      	cmp	r0, #0
 80017ae:	d056      	beq.n	800185e <first_check_SIM+0xe2>
		osDelay(1000);
		if(count_check >= 40) return 0;
		osDelay(200);
	}
	receive_response("WAITING FOR SIM MODULE TO BE READY\n");
 80017b0:	483c      	ldr	r0, [pc, #240]	@ (80018a4 <first_check_SIM+0x128>)

	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
	SIM_UART_ReInitializeRxDMA();

	send_AT_command(FIRST_CHECK);
	while(strstr((char *) response, CHECK_RESPONSE) != NULL){
 80017b2:	4e3d      	ldr	r6, [pc, #244]	@ (80018a8 <first_check_SIM+0x12c>)
 80017b4:	4d39      	ldr	r5, [pc, #228]	@ (800189c <first_check_SIM+0x120>)
		receive_response("First check SIM MODULE\n");
 80017b6:	4f3d      	ldr	r7, [pc, #244]	@ (80018ac <first_check_SIM+0x130>)
	receive_response("WAITING FOR SIM MODULE TO BE READY\n");
 80017b8:	f7ff fee8 	bl	800158c <receive_response>
	osDelay(1000);
 80017bc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80017c0:	f006 fe12 	bl	80083e8 <osDelay>
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 80017c4:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 80017c8:	2100      	movs	r1, #0
 80017ca:	4834      	ldr	r0, [pc, #208]	@ (800189c <first_check_SIM+0x120>)
 80017cc:	f00a fbee 	bl	800bfac <memset>
	SIM_UART_ReInitializeRxDMA();
 80017d0:	f7ff fec0 	bl	8001554 <SIM_UART_ReInitializeRxDMA>
	send_AT_command(FIRST_CHECK);
 80017d4:	4836      	ldr	r0, [pc, #216]	@ (80018b0 <first_check_SIM+0x134>)
 80017d6:	f7ff fead 	bl	8001534 <send_AT_command>
	while(strstr((char *) response, CHECK_RESPONSE) != NULL){
 80017da:	4631      	mov	r1, r6
 80017dc:	4628      	mov	r0, r5
 80017de:	f00a fc35 	bl	800c04c <strstr>
 80017e2:	4604      	mov	r4, r0
 80017e4:	2800      	cmp	r0, #0
 80017e6:	d145      	bne.n	8001874 <first_check_SIM+0xf8>
	}
	receive_response("First check SIM MODULE\n");
 80017e8:	4830      	ldr	r0, [pc, #192]	@ (80018ac <first_check_SIM+0x130>)
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
	SIM_UART_ReInitializeRxDMA();

	send_AT_command("AT+CPAS\r\n");
	while(strstr((char *) response, CHECK_RESPONSE) != NULL){
 80017ea:	4e2f      	ldr	r6, [pc, #188]	@ (80018a8 <first_check_SIM+0x12c>)
 80017ec:	4d2b      	ldr	r5, [pc, #172]	@ (800189c <first_check_SIM+0x120>)
		receive_response("Check status of SIM MODULE\n");
 80017ee:	4f31      	ldr	r7, [pc, #196]	@ (80018b4 <first_check_SIM+0x138>)
	receive_response("First check SIM MODULE\n");
 80017f0:	f7ff fecc 	bl	800158c <receive_response>
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 80017f4:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 80017f8:	4621      	mov	r1, r4
 80017fa:	4828      	ldr	r0, [pc, #160]	@ (800189c <first_check_SIM+0x120>)
 80017fc:	f00a fbd6 	bl	800bfac <memset>
	SIM_UART_ReInitializeRxDMA();
 8001800:	f7ff fea8 	bl	8001554 <SIM_UART_ReInitializeRxDMA>
	send_AT_command("AT+CPAS\r\n");
 8001804:	482c      	ldr	r0, [pc, #176]	@ (80018b8 <first_check_SIM+0x13c>)
 8001806:	f7ff fe95 	bl	8001534 <send_AT_command>
	while(strstr((char *) response, CHECK_RESPONSE) != NULL){
 800180a:	4631      	mov	r1, r6
 800180c:	4628      	mov	r0, r5
 800180e:	f00a fc1d 	bl	800c04c <strstr>
 8001812:	4604      	mov	r4, r0
 8001814:	bb90      	cbnz	r0, 800187c <first_check_SIM+0x100>
		osDelay(1000);
	}
	receive_response("Check status of SIM MODULE\n");
 8001816:	4827      	ldr	r0, [pc, #156]	@ (80018b4 <first_check_SIM+0x138>)
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
	SIM_UART_ReInitializeRxDMA();

	send_AT_command("AT+CMEE=2\r\n");
	while(strstr((char *) response, CHECK_RESPONSE) != NULL){
 8001818:	4e23      	ldr	r6, [pc, #140]	@ (80018a8 <first_check_SIM+0x12c>)
 800181a:	4d20      	ldr	r5, [pc, #128]	@ (800189c <first_check_SIM+0x120>)
		receive_response("Check enable result code\n");
 800181c:	4f27      	ldr	r7, [pc, #156]	@ (80018bc <first_check_SIM+0x140>)
	receive_response("Check status of SIM MODULE\n");
 800181e:	f7ff feb5 	bl	800158c <receive_response>
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8001822:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8001826:	4621      	mov	r1, r4
 8001828:	481c      	ldr	r0, [pc, #112]	@ (800189c <first_check_SIM+0x120>)
 800182a:	f00a fbbf 	bl	800bfac <memset>
	SIM_UART_ReInitializeRxDMA();
 800182e:	f7ff fe91 	bl	8001554 <SIM_UART_ReInitializeRxDMA>
	send_AT_command("AT+CMEE=2\r\n");
 8001832:	4823      	ldr	r0, [pc, #140]	@ (80018c0 <first_check_SIM+0x144>)
 8001834:	f7ff fe7e 	bl	8001534 <send_AT_command>
	while(strstr((char *) response, CHECK_RESPONSE) != NULL){
 8001838:	4631      	mov	r1, r6
 800183a:	4628      	mov	r0, r5
 800183c:	f00a fc06 	bl	800c04c <strstr>
 8001840:	4604      	mov	r4, r0
 8001842:	bb18      	cbnz	r0, 800188c <first_check_SIM+0x110>
		osDelay(1000);
	}
	receive_response("Check enable result code\n");
 8001844:	481d      	ldr	r0, [pc, #116]	@ (80018bc <first_check_SIM+0x140>)
 8001846:	f7ff fea1 	bl	800158c <receive_response>
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 800184a:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 800184e:	4621      	mov	r1, r4
 8001850:	4812      	ldr	r0, [pc, #72]	@ (800189c <first_check_SIM+0x120>)
 8001852:	f00a fbab 	bl	800bfac <memset>
	SIM_UART_ReInitializeRxDMA();
 8001856:	f7ff fe7d 	bl	8001554 <SIM_UART_ReInitializeRxDMA>

	return 1;
}
 800185a:	2001      	movs	r0, #1
 800185c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		receive_response("WAITING FOR SIM MODULE TO BE READY\n");
 800185e:	4630      	mov	r0, r6
 8001860:	f7ff fe94 	bl	800158c <receive_response>
		osDelay(1000);
 8001864:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001868:	f006 fdbe 	bl	80083e8 <osDelay>
		osDelay(200);
 800186c:	20c8      	movs	r0, #200	@ 0xc8
 800186e:	f006 fdbb 	bl	80083e8 <osDelay>
 8001872:	e797      	b.n	80017a4 <first_check_SIM+0x28>
		receive_response("First check SIM MODULE\n");
 8001874:	4638      	mov	r0, r7
 8001876:	f7ff fe89 	bl	800158c <receive_response>
 800187a:	e7ae      	b.n	80017da <first_check_SIM+0x5e>
		receive_response("Check status of SIM MODULE\n");
 800187c:	4638      	mov	r0, r7
 800187e:	f7ff fe85 	bl	800158c <receive_response>
		osDelay(1000);
 8001882:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001886:	f006 fdaf 	bl	80083e8 <osDelay>
 800188a:	e7be      	b.n	800180a <first_check_SIM+0x8e>
		receive_response("Check enable result code\n");
 800188c:	4638      	mov	r0, r7
 800188e:	f7ff fe7d 	bl	800158c <receive_response>
		osDelay(1000);
 8001892:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001896:	f006 fda7 	bl	80083e8 <osDelay>
 800189a:	e7cd      	b.n	8001838 <first_check_SIM+0xbc>
 800189c:	20000ca8 	.word	0x20000ca8
 80018a0:	0801198d 	.word	0x0801198d
 80018a4:	08011969 	.word	0x08011969
 80018a8:	080119b2 	.word	0x080119b2
 80018ac:	0801199a 	.word	0x0801199a
 80018b0:	08011995 	.word	0x08011995
 80018b4:	080119bf 	.word	0x080119bf
 80018b8:	080119b5 	.word	0x080119b5
 80018bc:	080119e7 	.word	0x080119e7
 80018c0:	080119db 	.word	0x080119db

080018c4 <extract_last_12_digits_bcd>:


void extract_last_12_digits_bcd(const uint8_t *response, uint8_t *output) {
 80018c4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80018c6:	460d      	mov	r5, r1
	uint8_t output_buffer[10];
	const uint8_t *start = response;
	while (*start && !(start[0] == 'A' && start[1] == 'T' && start[2] == '+' &&
 80018c8:	4604      	mov	r4, r0
 80018ca:	f810 3b01 	ldrb.w	r3, [r0], #1
 80018ce:	b1cb      	cbz	r3, 8001904 <extract_last_12_digits_bcd+0x40>
 80018d0:	2b41      	cmp	r3, #65	@ 0x41
 80018d2:	d1f9      	bne.n	80018c8 <extract_last_12_digits_bcd+0x4>
 80018d4:	7803      	ldrb	r3, [r0, #0]
 80018d6:	2b54      	cmp	r3, #84	@ 0x54
 80018d8:	d1f6      	bne.n	80018c8 <extract_last_12_digits_bcd+0x4>
 80018da:	7843      	ldrb	r3, [r0, #1]
 80018dc:	2b2b      	cmp	r3, #43	@ 0x2b
 80018de:	d1f3      	bne.n	80018c8 <extract_last_12_digits_bcd+0x4>
 80018e0:	7883      	ldrb	r3, [r0, #2]
 80018e2:	2b43      	cmp	r3, #67	@ 0x43
 80018e4:	d1f0      	bne.n	80018c8 <extract_last_12_digits_bcd+0x4>
					   start[3] == 'C' && start[4] == 'G' && start[5] == 'S' &&
 80018e6:	78c3      	ldrb	r3, [r0, #3]
 80018e8:	2b47      	cmp	r3, #71	@ 0x47
 80018ea:	d1ed      	bne.n	80018c8 <extract_last_12_digits_bcd+0x4>
 80018ec:	7903      	ldrb	r3, [r0, #4]
 80018ee:	2b53      	cmp	r3, #83	@ 0x53
 80018f0:	d1ea      	bne.n	80018c8 <extract_last_12_digits_bcd+0x4>
 80018f2:	7943      	ldrb	r3, [r0, #5]
 80018f4:	2b4e      	cmp	r3, #78	@ 0x4e
 80018f6:	d1e7      	bne.n	80018c8 <extract_last_12_digits_bcd+0x4>
					   start[6] == 'N' && start[7] == '=' && start[8] == '1')) {
 80018f8:	7983      	ldrb	r3, [r0, #6]
 80018fa:	2b3d      	cmp	r3, #61	@ 0x3d
 80018fc:	d1e4      	bne.n	80018c8 <extract_last_12_digits_bcd+0x4>
	while (*start && !(start[0] == 'A' && start[1] == 'T' && start[2] == '+' &&
 80018fe:	79c3      	ldrb	r3, [r0, #7]
 8001900:	2b31      	cmp	r3, #49	@ 0x31
 8001902:	d1e1      	bne.n	80018c8 <extract_last_12_digits_bcd+0x4>
		start++;
	}
	uart_transmit_string(&huart1, (uint8_t *)"Inside Checking terminal Number: ");
 8001904:	4922      	ldr	r1, [pc, #136]	@ (8001990 <extract_last_12_digits_bcd+0xcc>)
 8001906:	4823      	ldr	r0, [pc, #140]	@ (8001994 <extract_last_12_digits_bcd+0xd0>)
 8001908:	f003 fc16 	bl	8005138 <uart_transmit_string>
	uart_transmit_string( &huart1,(uint8_t *) start);
 800190c:	4821      	ldr	r0, [pc, #132]	@ (8001994 <extract_last_12_digits_bcd+0xd0>)
 800190e:	4621      	mov	r1, r4
 8001910:	f003 fc12 	bl	8005138 <uart_transmit_string>
	// If "AT+CGSN=1" is found, move to the start of the number (skip "AT+CGSN=1 ")
	if (*start) {
 8001914:	7823      	ldrb	r3, [r4, #0]
 8001916:	b96b      	cbnz	r3, 8001934 <extract_last_12_digits_bcd+0x70>
			for (int i = 0; i < 6; i++) {
				output[i] = ((last_12[i * 2] - '0') << 4) | (last_12[i * 2 + 1] - '0');
			}
		}
	}
	uart_transmit_string(&huart1, (uint8_t *)" Check terminal Number-0: ");
 8001918:	491f      	ldr	r1, [pc, #124]	@ (8001998 <extract_last_12_digits_bcd+0xd4>)
 800191a:	481e      	ldr	r0, [pc, #120]	@ (8001994 <extract_last_12_digits_bcd+0xd0>)
 800191c:	f003 fc0c 	bl	8005138 <uart_transmit_string>
	uart_transmit_string(&huart1, output);
 8001920:	4629      	mov	r1, r5
 8001922:	481c      	ldr	r0, [pc, #112]	@ (8001994 <extract_last_12_digits_bcd+0xd0>)
 8001924:	f003 fc08 	bl	8005138 <uart_transmit_string>
	uart_transmit_string(&huart1, (uint8_t *)" \n");
 8001928:	491c      	ldr	r1, [pc, #112]	@ (800199c <extract_last_12_digits_bcd+0xd8>)
 800192a:	481a      	ldr	r0, [pc, #104]	@ (8001994 <extract_last_12_digits_bcd+0xd0>)
 800192c:	f003 fc04 	bl	8005138 <uart_transmit_string>
}
 8001930:	b004      	add	sp, #16
 8001932:	bd70      	pop	{r4, r5, r6, pc}
		start += 10;  // Move pointer past "AT+CGSN=1 "
 8001934:	340a      	adds	r4, #10
		while (*start && (*start < '0' || *start > '9')) {
 8001936:	7821      	ldrb	r1, [r4, #0]
 8001938:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800193c:	4623      	mov	r3, r4
 800193e:	b2d2      	uxtb	r2, r2
 8001940:	3401      	adds	r4, #1
 8001942:	b109      	cbz	r1, 8001948 <extract_last_12_digits_bcd+0x84>
 8001944:	2a09      	cmp	r2, #9
 8001946:	d8f6      	bhi.n	8001936 <extract_last_12_digits_bcd+0x72>
 8001948:	461a      	mov	r2, r3
		while (*end && (*end >= '0' && *end <= '9')) {
 800194a:	4616      	mov	r6, r2
 800194c:	f812 1b01 	ldrb.w	r1, [r2], #1
 8001950:	3930      	subs	r1, #48	@ 0x30
 8001952:	2909      	cmp	r1, #9
 8001954:	d9f9      	bls.n	800194a <extract_last_12_digits_bcd+0x86>
 8001956:	1af4      	subs	r4, r6, r3
		uart_transmit_string(&huart1, (uint8_t *)"Inside Checking terminal Number-2: LEN ");
 8001958:	4911      	ldr	r1, [pc, #68]	@ (80019a0 <extract_last_12_digits_bcd+0xdc>)
 800195a:	480e      	ldr	r0, [pc, #56]	@ (8001994 <extract_last_12_digits_bcd+0xd0>)
 800195c:	f003 fbec 	bl	8005138 <uart_transmit_string>
		snprintf((char*)output_buffer, 10, "%d", digit_count);
 8001960:	4a10      	ldr	r2, [pc, #64]	@ (80019a4 <extract_last_12_digits_bcd+0xe0>)
 8001962:	4623      	mov	r3, r4
 8001964:	210a      	movs	r1, #10
 8001966:	a801      	add	r0, sp, #4
 8001968:	f00a fa24 	bl	800bdb4 <sniprintf>
		if (digit_count >= 12) {
 800196c:	2c0b      	cmp	r4, #11
 800196e:	d9d3      	bls.n	8001918 <extract_last_12_digits_bcd+0x54>
			const uint8_t *last_12 = end - 12;
 8001970:	f1a6 030c 	sub.w	r3, r6, #12
 8001974:	1e68      	subs	r0, r5, #1
				output[i] = ((last_12[i * 2] - '0') << 4) | (last_12[i * 2 + 1] - '0');
 8001976:	7819      	ldrb	r1, [r3, #0]
 8001978:	785a      	ldrb	r2, [r3, #1]
 800197a:	3930      	subs	r1, #48	@ 0x30
 800197c:	3a30      	subs	r2, #48	@ 0x30
			for (int i = 0; i < 6; i++) {
 800197e:	3302      	adds	r3, #2
				output[i] = ((last_12[i * 2] - '0') << 4) | (last_12[i * 2 + 1] - '0');
 8001980:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
			for (int i = 0; i < 6; i++) {
 8001984:	429e      	cmp	r6, r3
				output[i] = ((last_12[i * 2] - '0') << 4) | (last_12[i * 2 + 1] - '0');
 8001986:	f800 2f01 	strb.w	r2, [r0, #1]!
			for (int i = 0; i < 6; i++) {
 800198a:	d1f4      	bne.n	8001976 <extract_last_12_digits_bcd+0xb2>
 800198c:	e7c4      	b.n	8001918 <extract_last_12_digits_bcd+0x54>
 800198e:	bf00      	nop
 8001990:	08011a01 	.word	0x08011a01
 8001994:	20001240 	.word	0x20001240
 8001998:	08011a23 	.word	0x08011a23
 800199c:	080121db 	.word	0x080121db
 80019a0:	08011a3e 	.word	0x08011a3e
 80019a4:	08012055 	.word	0x08012055

080019a8 <check_SIM_ready>:
        }
    }
    return -1; // Failure
}

int check_SIM_ready(){
 80019a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	const int TIME_LIMIT = 5;
	int count_check_sim = 0;
	//GET IMEI
	send_AT_command(GET_IMEI);
 80019aa:	489c      	ldr	r0, [pc, #624]	@ (8001c1c <check_SIM_ready+0x274>)
	while(strstr((char *) response, CHECK_RESPONSE) == NULL){
 80019ac:	4d9c      	ldr	r5, [pc, #624]	@ (8001c20 <check_SIM_ready+0x278>)
 80019ae:	4c9d      	ldr	r4, [pc, #628]	@ (8001c24 <check_SIM_ready+0x27c>)
		receive_response("Check IMEI-0:\n");
 80019b0:	4e9d      	ldr	r6, [pc, #628]	@ (8001c28 <check_SIM_ready+0x280>)
	send_AT_command(GET_IMEI);
 80019b2:	f7ff fdbf 	bl	8001534 <send_AT_command>
	while(strstr((char *) response, CHECK_RESPONSE) == NULL){
 80019b6:	4629      	mov	r1, r5
 80019b8:	4620      	mov	r0, r4
 80019ba:	f00a fb47 	bl	800c04c <strstr>
 80019be:	2800      	cmp	r0, #0
 80019c0:	f000 80f8 	beq.w	8001bb4 <check_SIM_ready+0x20c>
		osDelay(1000);
	}
	receive_response("Check IMEI-0:\n");
 80019c4:	4898      	ldr	r0, [pc, #608]	@ (8001c28 <check_SIM_ready+0x280>)
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
	SIM_UART_ReInitializeRxDMA();

	//GET MODEL IDENTIFICATION
	send_AT_command(GET_MODEL_IDENTI);
	while(strstr((char *) response, CHECK_RESPONSE) == NULL){
 80019c6:	4d96      	ldr	r5, [pc, #600]	@ (8001c20 <check_SIM_ready+0x278>)
 80019c8:	4c96      	ldr	r4, [pc, #600]	@ (8001c24 <check_SIM_ready+0x27c>)
		receive_response("Check MODEL IDENTIFICATION\n");
 80019ca:	4e98      	ldr	r6, [pc, #608]	@ (8001c2c <check_SIM_ready+0x284>)
	receive_response("Check IMEI-0:\n");
 80019cc:	f7ff fdde 	bl	800158c <receive_response>
	extract_last_12_digits_bcd(response, terminal_phone_number);
 80019d0:	4997      	ldr	r1, [pc, #604]	@ (8001c30 <check_SIM_ready+0x288>)
 80019d2:	4894      	ldr	r0, [pc, #592]	@ (8001c24 <check_SIM_ready+0x27c>)
 80019d4:	f7ff ff76 	bl	80018c4 <extract_last_12_digits_bcd>
	uart_transmit_string(&huart1, (uint8_t *)" Check terminal Number: ");
 80019d8:	4996      	ldr	r1, [pc, #600]	@ (8001c34 <check_SIM_ready+0x28c>)
 80019da:	4897      	ldr	r0, [pc, #604]	@ (8001c38 <check_SIM_ready+0x290>)
 80019dc:	f003 fbac 	bl	8005138 <uart_transmit_string>
	uart_transmit_string(&huart1, terminal_phone_number);
 80019e0:	4993      	ldr	r1, [pc, #588]	@ (8001c30 <check_SIM_ready+0x288>)
 80019e2:	4895      	ldr	r0, [pc, #596]	@ (8001c38 <check_SIM_ready+0x290>)
 80019e4:	f003 fba8 	bl	8005138 <uart_transmit_string>
	uart_transmit_string(&huart1, (uint8_t *)" \n");
 80019e8:	4994      	ldr	r1, [pc, #592]	@ (8001c3c <check_SIM_ready+0x294>)
 80019ea:	4893      	ldr	r0, [pc, #588]	@ (8001c38 <check_SIM_ready+0x290>)
 80019ec:	f003 fba4 	bl	8005138 <uart_transmit_string>
	osDelay(100);
 80019f0:	2064      	movs	r0, #100	@ 0x64
 80019f2:	f006 fcf9 	bl	80083e8 <osDelay>
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 80019f6:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 80019fa:	2100      	movs	r1, #0
 80019fc:	4889      	ldr	r0, [pc, #548]	@ (8001c24 <check_SIM_ready+0x27c>)
 80019fe:	f00a fad5 	bl	800bfac <memset>
	SIM_UART_ReInitializeRxDMA();
 8001a02:	f7ff fda7 	bl	8001554 <SIM_UART_ReInitializeRxDMA>
	send_AT_command(GET_MODEL_IDENTI);
 8001a06:	488e      	ldr	r0, [pc, #568]	@ (8001c40 <check_SIM_ready+0x298>)
 8001a08:	f7ff fd94 	bl	8001534 <send_AT_command>
	while(strstr((char *) response, CHECK_RESPONSE) == NULL){
 8001a0c:	4629      	mov	r1, r5
 8001a0e:	4620      	mov	r0, r4
 8001a10:	f00a fb1c 	bl	800c04c <strstr>
 8001a14:	2800      	cmp	r0, #0
 8001a16:	f000 80d5 	beq.w	8001bc4 <check_SIM_ready+0x21c>
		osDelay(1000);
	}
	receive_response("Check MODEL IDENTIFICATION\n");
 8001a1a:	4884      	ldr	r0, [pc, #528]	@ (8001c2c <check_SIM_ready+0x284>)


	// Check if SIM is ready
	send_AT_command(CHECK_SIM_READY);
	osDelay(100);
	while(strstr((char *) response, CHECK_RESPONSE) == NULL){
 8001a1c:	4e80      	ldr	r6, [pc, #512]	@ (8001c20 <check_SIM_ready+0x278>)
 8001a1e:	4d81      	ldr	r5, [pc, #516]	@ (8001c24 <check_SIM_ready+0x27c>)
		receive_response("Check SIM\n");
 8001a20:	4f88      	ldr	r7, [pc, #544]	@ (8001c44 <check_SIM_ready+0x29c>)
	receive_response("Check MODEL IDENTIFICATION\n");
 8001a22:	f7ff fdb3 	bl	800158c <receive_response>
	osDelay(100);
 8001a26:	2064      	movs	r0, #100	@ 0x64
 8001a28:	f006 fcde 	bl	80083e8 <osDelay>
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8001a2c:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8001a30:	2100      	movs	r1, #0
 8001a32:	487c      	ldr	r0, [pc, #496]	@ (8001c24 <check_SIM_ready+0x27c>)
 8001a34:	f00a faba 	bl	800bfac <memset>
	SIM_UART_ReInitializeRxDMA();
 8001a38:	f7ff fd8c 	bl	8001554 <SIM_UART_ReInitializeRxDMA>
	send_AT_command(CHECK_SIM_READY);
 8001a3c:	4882      	ldr	r0, [pc, #520]	@ (8001c48 <check_SIM_ready+0x2a0>)
 8001a3e:	f7ff fd79 	bl	8001534 <send_AT_command>
	osDelay(100);
 8001a42:	2064      	movs	r0, #100	@ 0x64
 8001a44:	f006 fcd0 	bl	80083e8 <osDelay>
	while(strstr((char *) response, CHECK_RESPONSE) == NULL){
 8001a48:	2405      	movs	r4, #5
 8001a4a:	4631      	mov	r1, r6
 8001a4c:	4628      	mov	r0, r5
 8001a4e:	f00a fafd 	bl	800c04c <strstr>
 8001a52:	2800      	cmp	r0, #0
 8001a54:	f000 80be 	beq.w	8001bd4 <check_SIM_ready+0x22c>
			memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
			SIM_UART_ReInitializeRxDMA();
			return 0;
		}
	}
	receive_response("Check SIM\n");
 8001a58:	487a      	ldr	r0, [pc, #488]	@ (8001c44 <check_SIM_ready+0x29c>)
	count_check_sim = 0;


	//GET SIM CCID
	send_AT_command(GET_SIM_CCID);
	while(strstr((char *) response, "+QCCID:") == NULL){
 8001a5a:	4e7c      	ldr	r6, [pc, #496]	@ (8001c4c <check_SIM_ready+0x2a4>)
 8001a5c:	4d71      	ldr	r5, [pc, #452]	@ (8001c24 <check_SIM_ready+0x27c>)
		receive_response("Check SIM CCID\n");
 8001a5e:	4f7c      	ldr	r7, [pc, #496]	@ (8001c50 <check_SIM_ready+0x2a8>)
	receive_response("Check SIM\n");
 8001a60:	f7ff fd94 	bl	800158c <receive_response>
	osDelay(100);
 8001a64:	2064      	movs	r0, #100	@ 0x64
 8001a66:	f006 fcbf 	bl	80083e8 <osDelay>
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8001a6a:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8001a6e:	2100      	movs	r1, #0
 8001a70:	486c      	ldr	r0, [pc, #432]	@ (8001c24 <check_SIM_ready+0x27c>)
 8001a72:	f00a fa9b 	bl	800bfac <memset>
	SIM_UART_ReInitializeRxDMA();
 8001a76:	f7ff fd6d 	bl	8001554 <SIM_UART_ReInitializeRxDMA>
	osDelay(100);
 8001a7a:	2064      	movs	r0, #100	@ 0x64
 8001a7c:	f006 fcb4 	bl	80083e8 <osDelay>
	send_AT_command(GET_SIM_CCID);
 8001a80:	4874      	ldr	r0, [pc, #464]	@ (8001c54 <check_SIM_ready+0x2ac>)
 8001a82:	f7ff fd57 	bl	8001534 <send_AT_command>
	while(strstr((char *) response, "+QCCID:") == NULL){
 8001a86:	2405      	movs	r4, #5
 8001a88:	4631      	mov	r1, r6
 8001a8a:	4628      	mov	r0, r5
 8001a8c:	f00a fade 	bl	800c04c <strstr>
 8001a90:	2800      	cmp	r0, #0
 8001a92:	f000 80b3 	beq.w	8001bfc <check_SIM_ready+0x254>
			memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
			SIM_UART_ReInitializeRxDMA();
			return 0;
		}
	}
	receive_response("Check SIM CCID\n");
 8001a96:	486e      	ldr	r0, [pc, #440]	@ (8001c50 <check_SIM_ready+0x2a8>)
	send_AT_command(CONFIGURE_CS_SERVICE);
	char *first_pointer = NULL;
	char *second_pointer = NULL;
	receive_response("Configuring Network Registration Status (CS Service)");
	while (first_pointer == NULL || second_pointer == NULL){
		send_AT_command("AT+CREG?\r\n");
 8001a98:	4d6f      	ldr	r5, [pc, #444]	@ (8001c58 <check_SIM_ready+0x2b0>)
		osDelay(150);
		receive_response("Check Network Registration Status (CS Service)\n");
 8001a9a:	4e70      	ldr	r6, [pc, #448]	@ (8001c5c <check_SIM_ready+0x2b4>)
		osDelay(1000);
		osDelay(300);
		first_pointer = strstr((char*)response, CHECK_RESPONSE);
 8001a9c:	4c60      	ldr	r4, [pc, #384]	@ (8001c20 <check_SIM_ready+0x278>)
	receive_response("Check SIM CCID\n");
 8001a9e:	f7ff fd75 	bl	800158c <receive_response>
	osDelay(100);
 8001aa2:	2064      	movs	r0, #100	@ 0x64
 8001aa4:	f006 fca0 	bl	80083e8 <osDelay>
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8001aa8:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8001aac:	2100      	movs	r1, #0
 8001aae:	485d      	ldr	r0, [pc, #372]	@ (8001c24 <check_SIM_ready+0x27c>)
 8001ab0:	f00a fa7c 	bl	800bfac <memset>
	SIM_UART_ReInitializeRxDMA();
 8001ab4:	f7ff fd4e 	bl	8001554 <SIM_UART_ReInitializeRxDMA>
	send_AT_command(CONFIGURE_CS_SERVICE);
 8001ab8:	4869      	ldr	r0, [pc, #420]	@ (8001c60 <check_SIM_ready+0x2b8>)
 8001aba:	f7ff fd3b 	bl	8001534 <send_AT_command>
	receive_response("Configuring Network Registration Status (CS Service)");
 8001abe:	4869      	ldr	r0, [pc, #420]	@ (8001c64 <check_SIM_ready+0x2bc>)
 8001ac0:	f7ff fd64 	bl	800158c <receive_response>
		send_AT_command("AT+CREG?\r\n");
 8001ac4:	4628      	mov	r0, r5
 8001ac6:	f7ff fd35 	bl	8001534 <send_AT_command>
		osDelay(150);
 8001aca:	2096      	movs	r0, #150	@ 0x96
 8001acc:	f006 fc8c 	bl	80083e8 <osDelay>
		receive_response("Check Network Registration Status (CS Service)\n");
 8001ad0:	4630      	mov	r0, r6
 8001ad2:	f7ff fd5b 	bl	800158c <receive_response>
		osDelay(1000);
 8001ad6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001ada:	f006 fc85 	bl	80083e8 <osDelay>
		osDelay(300);
 8001ade:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001ae2:	f006 fc81 	bl	80083e8 <osDelay>
		first_pointer = strstr((char*)response, CHECK_RESPONSE);
 8001ae6:	484f      	ldr	r0, [pc, #316]	@ (8001c24 <check_SIM_ready+0x27c>)
 8001ae8:	4621      	mov	r1, r4
 8001aea:	f00a faaf 	bl	800c04c <strstr>
		if(first_pointer != NULL){
 8001aee:	2800      	cmp	r0, #0
 8001af0:	d0e8      	beq.n	8001ac4 <check_SIM_ready+0x11c>
			second_pointer = strstr(first_pointer+1, CHECK_RESPONSE);
 8001af2:	4621      	mov	r1, r4
 8001af4:	3001      	adds	r0, #1
 8001af6:	f00a faa9 	bl	800c04c <strstr>
	while (first_pointer == NULL || second_pointer == NULL){
 8001afa:	2800      	cmp	r0, #0
 8001afc:	d0e2      	beq.n	8001ac4 <check_SIM_ready+0x11c>
			memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
			SIM_UART_ReInitializeRxDMA();
			return 0;
		}
	}
	osDelay(100);
 8001afe:	2064      	movs	r0, #100	@ 0x64
 8001b00:	f006 fc72 	bl	80083e8 <osDelay>
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8001b04:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8001b08:	2100      	movs	r1, #0
 8001b0a:	4846      	ldr	r0, [pc, #280]	@ (8001c24 <check_SIM_ready+0x27c>)
	send_AT_command(CONFIGURE_PS_SERVICE);
	first_pointer = NULL;
	second_pointer = NULL;
	receive_response("Configuring Network Registration Status (PS Service)");
	while (first_pointer == NULL || second_pointer == NULL){
		send_AT_command("AT+CGREG?\r\n");
 8001b0c:	4d56      	ldr	r5, [pc, #344]	@ (8001c68 <check_SIM_ready+0x2c0>)
		osDelay(150);
		receive_response("Check Network Registration Status (PS Service)\n");
 8001b0e:	4e57      	ldr	r6, [pc, #348]	@ (8001c6c <check_SIM_ready+0x2c4>)
		osDelay(1000);
		osDelay(300);
		first_pointer = strstr((char*)response, CHECK_RESPONSE);
 8001b10:	4c43      	ldr	r4, [pc, #268]	@ (8001c20 <check_SIM_ready+0x278>)
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8001b12:	f00a fa4b 	bl	800bfac <memset>
	SIM_UART_ReInitializeRxDMA();
 8001b16:	f7ff fd1d 	bl	8001554 <SIM_UART_ReInitializeRxDMA>
	send_AT_command(CONFIGURE_PS_SERVICE);
 8001b1a:	4855      	ldr	r0, [pc, #340]	@ (8001c70 <check_SIM_ready+0x2c8>)
 8001b1c:	f7ff fd0a 	bl	8001534 <send_AT_command>
	receive_response("Configuring Network Registration Status (PS Service)");
 8001b20:	4854      	ldr	r0, [pc, #336]	@ (8001c74 <check_SIM_ready+0x2cc>)
 8001b22:	f7ff fd33 	bl	800158c <receive_response>
		send_AT_command("AT+CGREG?\r\n");
 8001b26:	4628      	mov	r0, r5
 8001b28:	f7ff fd04 	bl	8001534 <send_AT_command>
		osDelay(150);
 8001b2c:	2096      	movs	r0, #150	@ 0x96
 8001b2e:	f006 fc5b 	bl	80083e8 <osDelay>
		receive_response("Check Network Registration Status (PS Service)\n");
 8001b32:	4630      	mov	r0, r6
 8001b34:	f7ff fd2a 	bl	800158c <receive_response>
		osDelay(1000);
 8001b38:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001b3c:	f006 fc54 	bl	80083e8 <osDelay>
		osDelay(300);
 8001b40:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001b44:	f006 fc50 	bl	80083e8 <osDelay>
		first_pointer = strstr((char*)response, CHECK_RESPONSE);
 8001b48:	4836      	ldr	r0, [pc, #216]	@ (8001c24 <check_SIM_ready+0x27c>)
 8001b4a:	4621      	mov	r1, r4
 8001b4c:	f00a fa7e 	bl	800c04c <strstr>
		if(first_pointer != NULL){
 8001b50:	2800      	cmp	r0, #0
 8001b52:	d0e8      	beq.n	8001b26 <check_SIM_ready+0x17e>
			second_pointer = strstr(first_pointer + 1, CHECK_RESPONSE);
 8001b54:	4621      	mov	r1, r4
 8001b56:	3001      	adds	r0, #1
 8001b58:	f00a fa78 	bl	800c04c <strstr>
	while (first_pointer == NULL || second_pointer == NULL){
 8001b5c:	2800      	cmp	r0, #0
 8001b5e:	d0e2      	beq.n	8001b26 <check_SIM_ready+0x17e>
			memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
			SIM_UART_ReInitializeRxDMA();
			return 0;
		}
	}
	osDelay(100);
 8001b60:	2064      	movs	r0, #100	@ 0x64
 8001b62:	f006 fc41 	bl	80083e8 <osDelay>
	receive_response("Check Network Registration Status (PS Service)\n");
 8001b66:	4841      	ldr	r0, [pc, #260]	@ (8001c6c <check_SIM_ready+0x2c4>)
	count_check_sim = 0;


	//CHECK SIGNAL QUALITY
	send_AT_command(CHECK_SIGNAL_QUALITY);
	while(strstr((char *) response, CHECK_RESPONSE) == NULL){
 8001b68:	4d2d      	ldr	r5, [pc, #180]	@ (8001c20 <check_SIM_ready+0x278>)
 8001b6a:	4c2e      	ldr	r4, [pc, #184]	@ (8001c24 <check_SIM_ready+0x27c>)
		receive_response("Check Signal Quality Report\n");
 8001b6c:	4e42      	ldr	r6, [pc, #264]	@ (8001c78 <check_SIM_ready+0x2d0>)
	receive_response("Check Network Registration Status (PS Service)\n");
 8001b6e:	f7ff fd0d 	bl	800158c <receive_response>
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8001b72:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8001b76:	2100      	movs	r1, #0
 8001b78:	482a      	ldr	r0, [pc, #168]	@ (8001c24 <check_SIM_ready+0x27c>)
 8001b7a:	f00a fa17 	bl	800bfac <memset>
	SIM_UART_ReInitializeRxDMA();
 8001b7e:	f7ff fce9 	bl	8001554 <SIM_UART_ReInitializeRxDMA>
	send_AT_command(CHECK_SIGNAL_QUALITY);
 8001b82:	483e      	ldr	r0, [pc, #248]	@ (8001c7c <check_SIM_ready+0x2d4>)
 8001b84:	f7ff fcd6 	bl	8001534 <send_AT_command>
	while(strstr((char *) response, CHECK_RESPONSE) == NULL){
 8001b88:	4629      	mov	r1, r5
 8001b8a:	4620      	mov	r0, r4
 8001b8c:	f00a fa5e 	bl	800c04c <strstr>
 8001b90:	2800      	cmp	r0, #0
 8001b92:	d03e      	beq.n	8001c12 <check_SIM_ready+0x26a>
	}
	receive_response("Check Signal Quality Report\n");
 8001b94:	4838      	ldr	r0, [pc, #224]	@ (8001c78 <check_SIM_ready+0x2d0>)
 8001b96:	f7ff fcf9 	bl	800158c <receive_response>
	osDelay(100);
 8001b9a:	2064      	movs	r0, #100	@ 0x64
 8001b9c:	f006 fc24 	bl	80083e8 <osDelay>
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8001ba0:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8001ba4:	2100      	movs	r1, #0
 8001ba6:	481f      	ldr	r0, [pc, #124]	@ (8001c24 <check_SIM_ready+0x27c>)
 8001ba8:	f00a fa00 	bl	800bfac <memset>
	SIM_UART_ReInitializeRxDMA();
 8001bac:	f7ff fcd2 	bl	8001554 <SIM_UART_ReInitializeRxDMA>
	


	return 1;
 8001bb0:	2001      	movs	r0, #1
 8001bb2:	e022      	b.n	8001bfa <check_SIM_ready+0x252>
		receive_response("Check IMEI-0:\n");
 8001bb4:	4630      	mov	r0, r6
 8001bb6:	f7ff fce9 	bl	800158c <receive_response>
		osDelay(1000);
 8001bba:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001bbe:	f006 fc13 	bl	80083e8 <osDelay>
 8001bc2:	e6f8      	b.n	80019b6 <check_SIM_ready+0xe>
		receive_response("Check MODEL IDENTIFICATION\n");
 8001bc4:	4630      	mov	r0, r6
 8001bc6:	f7ff fce1 	bl	800158c <receive_response>
		osDelay(1000);
 8001bca:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001bce:	f006 fc0b 	bl	80083e8 <osDelay>
 8001bd2:	e71b      	b.n	8001a0c <check_SIM_ready+0x64>
		receive_response("Check SIM\n");
 8001bd4:	4638      	mov	r0, r7
 8001bd6:	f7ff fcd9 	bl	800158c <receive_response>
		osDelay(1000);
 8001bda:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001bde:	f006 fc03 	bl	80083e8 <osDelay>
		if (count_check_sim >= 5){
 8001be2:	3c01      	subs	r4, #1
 8001be4:	f47f af31 	bne.w	8001a4a <check_SIM_ready+0xa2>
			memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8001be8:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8001bec:	2100      	movs	r1, #0
 8001bee:	480d      	ldr	r0, [pc, #52]	@ (8001c24 <check_SIM_ready+0x27c>)
 8001bf0:	f00a f9dc 	bl	800bfac <memset>
			SIM_UART_ReInitializeRxDMA();
 8001bf4:	f7ff fcae 	bl	8001554 <SIM_UART_ReInitializeRxDMA>
			return 0;
 8001bf8:	2000      	movs	r0, #0
}
 8001bfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		receive_response("Check SIM CCID\n");
 8001bfc:	4638      	mov	r0, r7
 8001bfe:	f7ff fcc5 	bl	800158c <receive_response>
		osDelay(1000);
 8001c02:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001c06:	f006 fbef 	bl	80083e8 <osDelay>
		if (count_check_sim >= TIME_LIMIT){
 8001c0a:	3c01      	subs	r4, #1
 8001c0c:	f47f af3c 	bne.w	8001a88 <check_SIM_ready+0xe0>
 8001c10:	e7ea      	b.n	8001be8 <check_SIM_ready+0x240>
		receive_response("Check Signal Quality Report\n");
 8001c12:	4630      	mov	r0, r6
 8001c14:	f7ff fcba 	bl	800158c <receive_response>
 8001c18:	e7b6      	b.n	8001b88 <check_SIM_ready+0x1e0>
 8001c1a:	bf00      	nop
 8001c1c:	08011a66 	.word	0x08011a66
 8001c20:	080119b2 	.word	0x080119b2
 8001c24:	20000ca8 	.word	0x20000ca8
 8001c28:	08011a72 	.word	0x08011a72
 8001c2c:	08011aa4 	.word	0x08011aa4
 8001c30:	20000c28 	.word	0x20000c28
 8001c34:	08011a81 	.word	0x08011a81
 8001c38:	20001240 	.word	0x20001240
 8001c3c:	080121db 	.word	0x080121db
 8001c40:	08011a9a 	.word	0x08011a9a
 8001c44:	08011acb 	.word	0x08011acb
 8001c48:	08011ac0 	.word	0x08011ac0
 8001c4c:	08011af1 	.word	0x08011af1
 8001c50:	08011ae1 	.word	0x08011ae1
 8001c54:	08011ad6 	.word	0x08011ad6
 8001c58:	08011b3a 	.word	0x08011b3a
 8001c5c:	08011b45 	.word	0x08011b45
 8001c60:	08011af9 	.word	0x08011af9
 8001c64:	08011b05 	.word	0x08011b05
 8001c68:	08011bb7 	.word	0x08011bb7
 8001c6c:	08011bc3 	.word	0x08011bc3
 8001c70:	08011b75 	.word	0x08011b75
 8001c74:	08011b82 	.word	0x08011b82
 8001c78:	08011bfc 	.word	0x08011bfc
 8001c7c:	08011bf3 	.word	0x08011bf3

08001c80 <check_configure_APN>:

void check_configure_APN(){
 8001c80:	b508      	push	{r3, lr}
	send_AT_command(CHECK_CONFIGURE_APN);
 8001c82:	4805      	ldr	r0, [pc, #20]	@ (8001c98 <check_configure_APN+0x18>)
 8001c84:	f7ff fc56 	bl	8001534 <send_AT_command>
	osDelay(150);
 8001c88:	2096      	movs	r0, #150	@ 0x96
 8001c8a:	f006 fbad 	bl	80083e8 <osDelay>
	receive_response("Check Configuring APN\n");
}
 8001c8e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	receive_response("Check Configuring APN\n");
 8001c92:	4802      	ldr	r0, [pc, #8]	@ (8001c9c <check_configure_APN+0x1c>)
 8001c94:	f7ff bc7a 	b.w	800158c <receive_response>
 8001c98:	08011c19 	.word	0x08011c19
 8001c9c:	08011c27 	.word	0x08011c27

08001ca0 <configure_APN>:

int configure_APN(int context_id){
 8001ca0:	b530      	push	{r4, r5, lr}
 8001ca2:	b0c7      	sub	sp, #284	@ 0x11c
	uint8_t command[256];
	snprintf((char *)command, sizeof(command), "AT+QICSGP=%d,%d,\"%s\",\"%s\",\"%s\",%d,0\r\n", context_id, 1, APN_NAME, APN_USERNAME, APN_PASSWD, APN_AUTHEN);
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	9204      	str	r2, [sp, #16]
 8001ca8:	4a16      	ldr	r2, [pc, #88]	@ (8001d04 <configure_APN+0x64>)
	char *first_pointer = NULL;
	char *second_pointer = NULL; 	
	while (first_pointer == NULL || second_pointer == NULL){
		check_configure_APN();
		osDelay(1300);
		first_pointer = strstr((char*)response, CHECK_RESPONSE);
 8001caa:	4c17      	ldr	r4, [pc, #92]	@ (8001d08 <configure_APN+0x68>)
 8001cac:	4d17      	ldr	r5, [pc, #92]	@ (8001d0c <configure_APN+0x6c>)
	snprintf((char *)command, sizeof(command), "AT+QICSGP=%d,%d,\"%s\",\"%s\",\"%s\",%d,0\r\n", context_id, 1, APN_NAME, APN_USERNAME, APN_PASSWD, APN_AUTHEN);
 8001cae:	e9cd 2202 	strd	r2, r2, [sp, #8]
 8001cb2:	4a17      	ldr	r2, [pc, #92]	@ (8001d10 <configure_APN+0x70>)
 8001cb4:	9201      	str	r2, [sp, #4]
 8001cb6:	2201      	movs	r2, #1
int configure_APN(int context_id){
 8001cb8:	4603      	mov	r3, r0
	snprintf((char *)command, sizeof(command), "AT+QICSGP=%d,%d,\"%s\",\"%s\",\"%s\",%d,0\r\n", context_id, 1, APN_NAME, APN_USERNAME, APN_PASSWD, APN_AUTHEN);
 8001cba:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001cbe:	9200      	str	r2, [sp, #0]
 8001cc0:	a806      	add	r0, sp, #24
 8001cc2:	4a14      	ldr	r2, [pc, #80]	@ (8001d14 <configure_APN+0x74>)
 8001cc4:	f00a f876 	bl	800bdb4 <sniprintf>
	send_AT_command((char*)command);
 8001cc8:	a806      	add	r0, sp, #24
 8001cca:	f7ff fc33 	bl	8001534 <send_AT_command>
	osDelay(150);
 8001cce:	2096      	movs	r0, #150	@ 0x96
 8001cd0:	f006 fb8a 	bl	80083e8 <osDelay>
	receive_response("CONFIGURE APN\n");
 8001cd4:	4810      	ldr	r0, [pc, #64]	@ (8001d18 <configure_APN+0x78>)
 8001cd6:	f7ff fc59 	bl	800158c <receive_response>
		check_configure_APN();
 8001cda:	f7ff ffd1 	bl	8001c80 <check_configure_APN>
		osDelay(1300);
 8001cde:	f240 5014 	movw	r0, #1300	@ 0x514
 8001ce2:	f006 fb81 	bl	80083e8 <osDelay>
		first_pointer = strstr((char*)response, CHECK_RESPONSE);
 8001ce6:	4908      	ldr	r1, [pc, #32]	@ (8001d08 <configure_APN+0x68>)
 8001ce8:	4628      	mov	r0, r5
 8001cea:	f00a f9af 	bl	800c04c <strstr>
		if(first_pointer != NULL){
 8001cee:	2800      	cmp	r0, #0
 8001cf0:	d0f3      	beq.n	8001cda <configure_APN+0x3a>
			second_pointer = strstr(first_pointer+1, CHECK_RESPONSE);
 8001cf2:	4621      	mov	r1, r4
 8001cf4:	3001      	adds	r0, #1
 8001cf6:	f00a f9a9 	bl	800c04c <strstr>
	while (first_pointer == NULL || second_pointer == NULL){
 8001cfa:	2800      	cmp	r0, #0
 8001cfc:	d0ed      	beq.n	8001cda <configure_APN+0x3a>
		}
	}
	return 1;
}
 8001cfe:	2001      	movs	r0, #1
 8001d00:	b047      	add	sp, #284	@ 0x11c
 8001d02:	bd30      	pop	{r4, r5, pc}
 8001d04:	0801296b 	.word	0x0801296b
 8001d08:	080119b2 	.word	0x080119b2
 8001d0c:	20000ca8 	.word	0x20000ca8
 8001d10:	08011c64 	.word	0x08011c64
 8001d14:	08011c3e 	.word	0x08011c3e
 8001d18:	08011c6e 	.word	0x08011c6e

08001d1c <check_activate_context>:

void check_activate_context(){
 8001d1c:	b500      	push	{lr}
 8001d1e:	b0a1      	sub	sp, #132	@ 0x84
	uint8_t command[128];
	snprintf((char *)command, sizeof(command), CHECK_ACTIVATE_CONTEXT);
 8001d20:	4906      	ldr	r1, [pc, #24]	@ (8001d3c <check_activate_context+0x20>)
 8001d22:	4668      	mov	r0, sp
 8001d24:	f00a ff8e 	bl	800cc44 <strcpy>
	send_AT_command((char*)command);
 8001d28:	4668      	mov	r0, sp
 8001d2a:	f7ff fc03 	bl	8001534 <send_AT_command>
	receive_response("CHECK Activate CONTEXT\n");
 8001d2e:	4804      	ldr	r0, [pc, #16]	@ (8001d40 <check_activate_context+0x24>)
 8001d30:	f7ff fc2c 	bl	800158c <receive_response>
}
 8001d34:	b021      	add	sp, #132	@ 0x84
 8001d36:	f85d fb04 	ldr.w	pc, [sp], #4
 8001d3a:	bf00      	nop
 8001d3c:	08011c7d 	.word	0x08011c7d
 8001d40:	08011c89 	.word	0x08011c89

08001d44 <activate_context>:
//		// Wait until the counter reaches 1000
//		while (__HAL_TIM_GET_COUNTER(&htim3) < 1000);
//	}
//	is_40s = 1;
//}
int activate_context(int context_id){
 8001d44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001d48:	b0a0      	sub	sp, #128	@ 0x80
 8001d4a:	4603      	mov	r3, r0
	uint8_t command[128];
	snprintf((char *)command, sizeof(command), "AT+QIACT=%d\r\n", context_id);
 8001d4c:	4a2c      	ldr	r2, [pc, #176]	@ (8001e00 <activate_context+0xbc>)
		if(count_check >= 50){
			count_check = 0;
//			return 0;
			break;
		}
		if (strstr((char*)response, "ERROR") != NULL){
 8001d4e:	4f2d      	ldr	r7, [pc, #180]	@ (8001e04 <activate_context+0xc0>)
 8001d50:	4e2d      	ldr	r6, [pc, #180]	@ (8001e08 <activate_context+0xc4>)
			count_error = 0;
//			return 0;
			break;
		}

		receive_response("Check Activate Context\r\n");
 8001d52:	f8df 80c0 	ldr.w	r8, [pc, #192]	@ 8001e14 <activate_context+0xd0>
	snprintf((char *)command, sizeof(command), "AT+QIACT=%d\r\n", context_id);
 8001d56:	2180      	movs	r1, #128	@ 0x80
 8001d58:	4668      	mov	r0, sp
 8001d5a:	f00a f82b 	bl	800bdb4 <sniprintf>
	send_AT_command((char*)command);
 8001d5e:	4668      	mov	r0, sp
 8001d60:	f7ff fbe8 	bl	8001534 <send_AT_command>
	osDelay(150);
 8001d64:	2096      	movs	r0, #150	@ 0x96
 8001d66:	f006 fb3f 	bl	80083e8 <osDelay>
	receive_response("Activate Context\r\n");
 8001d6a:	4828      	ldr	r0, [pc, #160]	@ (8001e0c <activate_context+0xc8>)
 8001d6c:	f7ff fc0e 	bl	800158c <receive_response>
 8001d70:	2533      	movs	r5, #51	@ 0x33
	int count_error = 0;
 8001d72:	2400      	movs	r4, #0
		check_activate_context();
 8001d74:	f7ff ffd2 	bl	8001d1c <check_activate_context>
		osDelay(300);
 8001d78:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001d7c:	f006 fb34 	bl	80083e8 <osDelay>
		if(count_check >= 50){
 8001d80:	3d01      	subs	r5, #1
 8001d82:	d021      	beq.n	8001dc8 <activate_context+0x84>
		if (strstr((char*)response, "ERROR") != NULL){
 8001d84:	4639      	mov	r1, r7
 8001d86:	4630      	mov	r0, r6
 8001d88:	f00a f960 	bl	800c04c <strstr>
 8001d8c:	b340      	cbz	r0, 8001de0 <activate_context+0x9c>
			osDelay(500);
 8001d8e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001d92:	f006 fb29 	bl	80083e8 <osDelay>
			memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8001d96:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8001d9a:	2100      	movs	r1, #0
 8001d9c:	4630      	mov	r0, r6
 8001d9e:	f00a f905 	bl	800bfac <memset>
			SIM_UART_ReInitializeRxDMA();
 8001da2:	f7ff fbd7 	bl	8001554 <SIM_UART_ReInitializeRxDMA>
			send_AT_command((char *) command);
 8001da6:	4668      	mov	r0, sp
 8001da8:	f7ff fbc4 	bl	8001534 <send_AT_command>
			count_error++;
 8001dac:	3401      	adds	r4, #1
			osDelay(200);
 8001dae:	20c8      	movs	r0, #200	@ 0xc8
 8001db0:	f006 fb1a 	bl	80083e8 <osDelay>
		if(count_error >= 3){
 8001db4:	2c03      	cmp	r4, #3
 8001db6:	d113      	bne.n	8001de0 <activate_context+0x9c>
			memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8001db8:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8001dbc:	2100      	movs	r1, #0
 8001dbe:	4812      	ldr	r0, [pc, #72]	@ (8001e08 <activate_context+0xc4>)
 8001dc0:	f00a f8f4 	bl	800bfac <memset>
			SIM_UART_ReInitializeRxDMA();
 8001dc4:	f7ff fbc6 	bl	8001554 <SIM_UART_ReInitializeRxDMA>
			second_pointer = strstr(first_pointer+1, CHECK_RESPONSE);
		}
		count_check++;
	}
//	HAL_TIM_Base_Start(&htim3);
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8001dc8:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8001dcc:	2100      	movs	r1, #0
 8001dce:	480e      	ldr	r0, [pc, #56]	@ (8001e08 <activate_context+0xc4>)
 8001dd0:	f00a f8ec 	bl	800bfac <memset>
	SIM_UART_ReInitializeRxDMA();
 8001dd4:	f7ff fbbe 	bl	8001554 <SIM_UART_ReInitializeRxDMA>
	return 1;
}
 8001dd8:	2001      	movs	r0, #1
 8001dda:	b020      	add	sp, #128	@ 0x80
 8001ddc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		receive_response("Check Activate Context\r\n");
 8001de0:	4640      	mov	r0, r8
 8001de2:	f7ff fbd3 	bl	800158c <receive_response>
		first_pointer = strstr((char*)response, CHECK_RESPONSE);
 8001de6:	490a      	ldr	r1, [pc, #40]	@ (8001e10 <activate_context+0xcc>)
 8001de8:	4630      	mov	r0, r6
 8001dea:	f00a f92f 	bl	800c04c <strstr>
		if(first_pointer != NULL){
 8001dee:	2800      	cmp	r0, #0
 8001df0:	d0c0      	beq.n	8001d74 <activate_context+0x30>
			second_pointer = strstr(first_pointer+1, CHECK_RESPONSE);
 8001df2:	4907      	ldr	r1, [pc, #28]	@ (8001e10 <activate_context+0xcc>)
 8001df4:	3001      	adds	r0, #1
 8001df6:	f00a f929 	bl	800c04c <strstr>
	while ((first_pointer == NULL || second_pointer == NULL)){
 8001dfa:	2800      	cmp	r0, #0
 8001dfc:	d0ba      	beq.n	8001d74 <activate_context+0x30>
 8001dfe:	e7e3      	b.n	8001dc8 <activate_context+0x84>
 8001e00:	08011ca1 	.word	0x08011ca1
 8001e04:	08011caf 	.word	0x08011caf
 8001e08:	20000ca8 	.word	0x20000ca8
 8001e0c:	08011cbb 	.word	0x08011cbb
 8001e10:	080119b2 	.word	0x080119b2
 8001e14:	08011cb5 	.word	0x08011cb5

08001e18 <deactivate_context>:

int deactivate_context(int context_id){
 8001e18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e1a:	4604      	mov	r4, r0
 8001e1c:	b0a1      	sub	sp, #132	@ 0x84
	uint8_t command[128];
	int count_check = 0;
	osDelay(100);
 8001e1e:	2064      	movs	r0, #100	@ 0x64
 8001e20:	f006 fae2 	bl	80083e8 <osDelay>
	snprintf((char *)command, sizeof(command), "AT+QIDEACT=%d\r\n", context_id);
 8001e24:	4623      	mov	r3, r4
 8001e26:	4a1d      	ldr	r2, [pc, #116]	@ (8001e9c <deactivate_context+0x84>)
	send_AT_command((char*)command);
	while(strstr((char *) response, CHECK_RESPONSE) == NULL){
 8001e28:	4e1d      	ldr	r6, [pc, #116]	@ (8001ea0 <deactivate_context+0x88>)
 8001e2a:	4d1e      	ldr	r5, [pc, #120]	@ (8001ea4 <deactivate_context+0x8c>)
		receive_response("DEACTIVATE CONTEXT\n");
 8001e2c:	4f1e      	ldr	r7, [pc, #120]	@ (8001ea8 <deactivate_context+0x90>)
	snprintf((char *)command, sizeof(command), "AT+QIDEACT=%d\r\n", context_id);
 8001e2e:	2180      	movs	r1, #128	@ 0x80
 8001e30:	4668      	mov	r0, sp
 8001e32:	f009 ffbf 	bl	800bdb4 <sniprintf>
	send_AT_command((char*)command);
 8001e36:	4668      	mov	r0, sp
 8001e38:	f7ff fb7c 	bl	8001534 <send_AT_command>
	while(strstr((char *) response, CHECK_RESPONSE) == NULL){
 8001e3c:	2415      	movs	r4, #21
 8001e3e:	4631      	mov	r1, r6
 8001e40:	4628      	mov	r0, r5
 8001e42:	f00a f903 	bl	800c04c <strstr>
 8001e46:	b178      	cbz	r0, 8001e68 <deactivate_context+0x50>
			return 0;
		}
		count_check++;
		osDelay(1200);
	}
	receive_response("DEACTIVATE CONTEXT\n");
 8001e48:	4817      	ldr	r0, [pc, #92]	@ (8001ea8 <deactivate_context+0x90>)
 8001e4a:	f7ff fb9f 	bl	800158c <receive_response>
	osDelay(100);
 8001e4e:	2064      	movs	r0, #100	@ 0x64
 8001e50:	f006 faca 	bl	80083e8 <osDelay>
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8001e54:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8001e58:	2100      	movs	r1, #0
 8001e5a:	4812      	ldr	r0, [pc, #72]	@ (8001ea4 <deactivate_context+0x8c>)
 8001e5c:	f00a f8a6 	bl	800bfac <memset>
	SIM_UART_ReInitializeRxDMA();
 8001e60:	f7ff fb78 	bl	8001554 <SIM_UART_ReInitializeRxDMA>
	return 1;
 8001e64:	2001      	movs	r0, #1
 8001e66:	e010      	b.n	8001e8a <deactivate_context+0x72>
		receive_response("DEACTIVATE CONTEXT\n");
 8001e68:	4638      	mov	r0, r7
 8001e6a:	f7ff fb8f 	bl	800158c <receive_response>
		if (strstr((char *) response, "ERROR") != NULL){
 8001e6e:	490f      	ldr	r1, [pc, #60]	@ (8001eac <deactivate_context+0x94>)
 8001e70:	4628      	mov	r0, r5
 8001e72:	f00a f8eb 	bl	800c04c <strstr>
 8001e76:	b150      	cbz	r0, 8001e8e <deactivate_context+0x76>
			memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8001e78:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8001e7c:	2100      	movs	r1, #0
 8001e7e:	4809      	ldr	r0, [pc, #36]	@ (8001ea4 <deactivate_context+0x8c>)
 8001e80:	f00a f894 	bl	800bfac <memset>
			SIM_UART_ReInitializeRxDMA();
 8001e84:	f7ff fb66 	bl	8001554 <SIM_UART_ReInitializeRxDMA>
			return 0;
 8001e88:	2000      	movs	r0, #0
}
 8001e8a:	b021      	add	sp, #132	@ 0x84
 8001e8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if(count_check >= 20){
 8001e8e:	3c01      	subs	r4, #1
 8001e90:	d0f2      	beq.n	8001e78 <deactivate_context+0x60>
		osDelay(1200);
 8001e92:	f44f 6096 	mov.w	r0, #1200	@ 0x4b0
 8001e96:	f006 faa7 	bl	80083e8 <osDelay>
 8001e9a:	e7d0      	b.n	8001e3e <deactivate_context+0x26>
 8001e9c:	08011cce 	.word	0x08011cce
 8001ea0:	080119b2 	.word	0x080119b2
 8001ea4:	20000ca8 	.word	0x20000ca8
 8001ea8:	08011cde 	.word	0x08011cde
 8001eac:	08011caf 	.word	0x08011caf

08001eb0 <open_socket_service>:


int open_socket_service(int context_id, int connect_id, int local_port, int access_mode){
 8001eb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001eb4:	b0e6      	sub	sp, #408	@ 0x198
	const int timeout_seconds = 50; // Receive response each second
	//TODO: CHANGE timeout to 150 after testing
	int elapsed_time_ms = 0;
	uint8_t command[256];
	snprintf((char *)command, sizeof(command), "AT+QIOPEN=%d,%d,\"%s\",\"%s\",%d,%d,%d\r\n",context_id, connect_id, SERVICE_TYPE, IP_ADDRESS, REMOTE_PORT, local_port, access_mode);
 8001eb6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001eba:	f241 3397 	movw	r3, #5015	@ 0x1397
 8001ebe:	9303      	str	r3, [sp, #12]
 8001ec0:	4b4c      	ldr	r3, [pc, #304]	@ (8001ff4 <open_socket_service+0x144>)
 8001ec2:	9302      	str	r3, [sp, #8]
 8001ec4:	4b4c      	ldr	r3, [pc, #304]	@ (8001ff8 <open_socket_service+0x148>)
 8001ec6:	4a4d      	ldr	r2, [pc, #308]	@ (8001ffc <open_socket_service+0x14c>)
	int count_error = 0;
	uart_transmit_string(&huart1, (uint8_t *) "Init start TIME\n");
//	while(elapsed_time_ms < timeout_seconds){
	while(first_pointer == NULL && elapsed_time_ms < timeout_seconds){
		char output_elapsed[128];
		receive_response("Check OPEN socket service: \r\n");
 8001ec8:	f8df 9148 	ldr.w	r9, [pc, #328]	@ 8002014 <open_socket_service+0x164>
		if (strstr((char *) response, "ERROR") != NULL){
 8001ecc:	f8df a154 	ldr.w	sl, [pc, #340]	@ 8002024 <open_socket_service+0x174>
 8001ed0:	f8df 8134 	ldr.w	r8, [pc, #308]	@ 8002008 <open_socket_service+0x158>
	snprintf((char *)command, sizeof(command), "AT+QIOPEN=%d,%d,\"%s\",\"%s\",%d,%d,%d\r\n",context_id, connect_id, SERVICE_TYPE, IP_ADDRESS, REMOTE_PORT, local_port, access_mode);
 8001ed4:	e9cd 1300 	strd	r1, r3, [sp]
int open_socket_service(int context_id, int connect_id, int local_port, int access_mode){
 8001ed8:	460c      	mov	r4, r1
	snprintf((char *)command, sizeof(command), "AT+QIOPEN=%d,%d,\"%s\",\"%s\",%d,%d,%d\r\n",context_id, connect_id, SERVICE_TYPE, IP_ADDRESS, REMOTE_PORT, local_port, access_mode);
 8001eda:	4603      	mov	r3, r0
 8001edc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001ee0:	a826      	add	r0, sp, #152	@ 0x98
 8001ee2:	f009 ff67 	bl	800bdb4 <sniprintf>
	send_AT_command((char *) command);
 8001ee6:	a826      	add	r0, sp, #152	@ 0x98
 8001ee8:	f7ff fb24 	bl	8001534 <send_AT_command>
	osDelay(100);
 8001eec:	2064      	movs	r0, #100	@ 0x64
 8001eee:	f006 fa7b 	bl	80083e8 <osDelay>
	uart_transmit_string(&huart1, (uint8_t *) "Init start TIME\n");
 8001ef2:	4943      	ldr	r1, [pc, #268]	@ (8002000 <open_socket_service+0x150>)
 8001ef4:	4843      	ldr	r0, [pc, #268]	@ (8002004 <open_socket_service+0x154>)
 8001ef6:	f003 f91f 	bl	8005138 <uart_transmit_string>
	int count_error = 0;
 8001efa:	2700      	movs	r7, #0
	int elapsed_time_ms = 0;
 8001efc:	463e      	mov	r6, r7
		receive_response("Check OPEN socket service: \r\n");
 8001efe:	4648      	mov	r0, r9
 8001f00:	f7ff fb44 	bl	800158c <receive_response>
		if (strstr((char *) response, "ERROR") != NULL){
 8001f04:	4651      	mov	r1, sl
 8001f06:	4640      	mov	r0, r8
 8001f08:	f00a f8a0 	bl	800c04c <strstr>
 8001f0c:	b1e8      	cbz	r0, 8001f4a <open_socket_service+0x9a>
			memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8001f0e:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8001f12:	2100      	movs	r1, #0
 8001f14:	4640      	mov	r0, r8
 8001f16:	f00a f849 	bl	800bfac <memset>
			SIM_UART_ReInitializeRxDMA();
 8001f1a:	f7ff fb1b 	bl	8001554 <SIM_UART_ReInitializeRxDMA>
			count_error++;
			osDelay(500);
 8001f1e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001f22:	f006 fa61 	bl	80083e8 <osDelay>
			count_error++;
 8001f26:	3701      	adds	r7, #1
			send_AT_command((char *) command);
 8001f28:	a826      	add	r0, sp, #152	@ 0x98
 8001f2a:	f7ff fb03 	bl	8001534 <send_AT_command>
		}
		if(count_error >= 6){
 8001f2e:	2f06      	cmp	r7, #6
 8001f30:	d10b      	bne.n	8001f4a <open_socket_service+0x9a>
			memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8001f32:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8001f36:	2100      	movs	r1, #0
		snprintf((char *)command, sizeof(command), "AT+QISTATE=1,%d\r\n",connect_id);
		send_AT_command((char*) command);
		while(strstr((char *) response, CHECK_RESPONSE) == NULL){
			receive_response("Check SOCKET CONNECTION\n");
			if (strstr((char *) response, "ERROR") != NULL){
				memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8001f38:	4833      	ldr	r0, [pc, #204]	@ (8002008 <open_socket_service+0x158>)
 8001f3a:	f00a f837 	bl	800bfac <memset>
				SIM_UART_ReInitializeRxDMA();
 8001f3e:	f7ff fb09 	bl	8001554 <SIM_UART_ReInitializeRxDMA>
			return 0;
 8001f42:	2000      	movs	r0, #0
		memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
		SIM_UART_ReInitializeRxDMA();
		return 1;
	}
	else return 0;
}
 8001f44:	b066      	add	sp, #408	@ 0x198
 8001f46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		first_pointer = strstr((char*)response, "+QIOPEN:");
 8001f4a:	4930      	ldr	r1, [pc, #192]	@ (800200c <open_socket_service+0x15c>)
 8001f4c:	4640      	mov	r0, r8
 8001f4e:	f00a f87d 	bl	800c04c <strstr>
		elapsed_time_ms++;
 8001f52:	3601      	adds	r6, #1
		snprintf(output_elapsed, 128, "Elapsed Time: %d\n", elapsed_time_ms);
 8001f54:	4a2e      	ldr	r2, [pc, #184]	@ (8002010 <open_socket_service+0x160>)
		first_pointer = strstr((char*)response, "+QIOPEN:");
 8001f56:	4605      	mov	r5, r0
		snprintf(output_elapsed, 128, "Elapsed Time: %d\n", elapsed_time_ms);
 8001f58:	4633      	mov	r3, r6
 8001f5a:	2180      	movs	r1, #128	@ 0x80
 8001f5c:	a806      	add	r0, sp, #24
 8001f5e:	f009 ff29 	bl	800bdb4 <sniprintf>
		uart_transmit_string(&huart1, (uint8_t *)output_elapsed);
 8001f62:	4828      	ldr	r0, [pc, #160]	@ (8002004 <open_socket_service+0x154>)
 8001f64:	a906      	add	r1, sp, #24
 8001f66:	f003 f8e7 	bl	8005138 <uart_transmit_string>
		osDelay(1000);
 8001f6a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001f6e:	f006 fa3b 	bl	80083e8 <osDelay>
	while(first_pointer == NULL && elapsed_time_ms < timeout_seconds){
 8001f72:	b90d      	cbnz	r5, 8001f78 <open_socket_service+0xc8>
 8001f74:	2e32      	cmp	r6, #50	@ 0x32
 8001f76:	d1c2      	bne.n	8001efe <open_socket_service+0x4e>
	receive_response("Check OPEN socket service: \r\n");
 8001f78:	4826      	ldr	r0, [pc, #152]	@ (8002014 <open_socket_service+0x164>)
 8001f7a:	f7ff fb07 	bl	800158c <receive_response>
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8001f7e:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8001f82:	2100      	movs	r1, #0
 8001f84:	4820      	ldr	r0, [pc, #128]	@ (8002008 <open_socket_service+0x158>)
 8001f86:	f00a f811 	bl	800bfac <memset>
	SIM_UART_ReInitializeRxDMA();
 8001f8a:	f7ff fae3 	bl	8001554 <SIM_UART_ReInitializeRxDMA>
	if(first_pointer != NULL)
 8001f8e:	2d00      	cmp	r5, #0
 8001f90:	d0d7      	beq.n	8001f42 <open_socket_service+0x92>
		snprintf((char *)command, sizeof(command), "AT+QISTATE=1,%d\r\n",connect_id);
 8001f92:	4a21      	ldr	r2, [pc, #132]	@ (8002018 <open_socket_service+0x168>)
		while(strstr((char *) response, CHECK_RESPONSE) == NULL){
 8001f94:	4e21      	ldr	r6, [pc, #132]	@ (800201c <open_socket_service+0x16c>)
 8001f96:	4d1c      	ldr	r5, [pc, #112]	@ (8002008 <open_socket_service+0x158>)
			receive_response("Check SOCKET CONNECTION\n");
 8001f98:	4f21      	ldr	r7, [pc, #132]	@ (8002020 <open_socket_service+0x170>)
		snprintf((char *)command, sizeof(command), "AT+QISTATE=1,%d\r\n",connect_id);
 8001f9a:	4623      	mov	r3, r4
 8001f9c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001fa0:	a826      	add	r0, sp, #152	@ 0x98
 8001fa2:	f009 ff07 	bl	800bdb4 <sniprintf>
		send_AT_command((char*) command);
 8001fa6:	a826      	add	r0, sp, #152	@ 0x98
 8001fa8:	f7ff fac4 	bl	8001534 <send_AT_command>
		while(strstr((char *) response, CHECK_RESPONSE) == NULL){
 8001fac:	4631      	mov	r1, r6
 8001fae:	4628      	mov	r0, r5
 8001fb0:	f00a f84c 	bl	800c04c <strstr>
 8001fb4:	4604      	mov	r4, r0
 8001fb6:	b160      	cbz	r0, 8001fd2 <open_socket_service+0x122>
		osDelay(100);
 8001fb8:	2064      	movs	r0, #100	@ 0x64
 8001fba:	f006 fa15 	bl	80083e8 <osDelay>
		memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8001fbe:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8001fc2:	2100      	movs	r1, #0
 8001fc4:	4810      	ldr	r0, [pc, #64]	@ (8002008 <open_socket_service+0x158>)
 8001fc6:	f009 fff1 	bl	800bfac <memset>
		SIM_UART_ReInitializeRxDMA();
 8001fca:	f7ff fac3 	bl	8001554 <SIM_UART_ReInitializeRxDMA>
		return 1;
 8001fce:	2001      	movs	r0, #1
 8001fd0:	e7b8      	b.n	8001f44 <open_socket_service+0x94>
			receive_response("Check SOCKET CONNECTION\n");
 8001fd2:	4638      	mov	r0, r7
 8001fd4:	f7ff fada 	bl	800158c <receive_response>
			if (strstr((char *) response, "ERROR") != NULL){
 8001fd8:	4912      	ldr	r1, [pc, #72]	@ (8002024 <open_socket_service+0x174>)
 8001fda:	4628      	mov	r0, r5
 8001fdc:	f00a f836 	bl	800c04c <strstr>
 8001fe0:	b118      	cbz	r0, 8001fea <open_socket_service+0x13a>
				memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8001fe2:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8001fe6:	4621      	mov	r1, r4
 8001fe8:	e7a6      	b.n	8001f38 <open_socket_service+0x88>
			osDelay(1000);
 8001fea:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001fee:	f006 f9fb 	bl	80083e8 <osDelay>
 8001ff2:	e7db      	b.n	8001fac <open_socket_service+0xfc>
 8001ff4:	08011d17 	.word	0x08011d17
 8001ff8:	08011d26 	.word	0x08011d26
 8001ffc:	08011cf2 	.word	0x08011cf2
 8002000:	08011d2a 	.word	0x08011d2a
 8002004:	20001240 	.word	0x20001240
 8002008:	20000ca8 	.word	0x20000ca8
 800200c:	08011d59 	.word	0x08011d59
 8002010:	08011d62 	.word	0x08011d62
 8002014:	08011d3b 	.word	0x08011d3b
 8002018:	08011d74 	.word	0x08011d74
 800201c:	080119b2 	.word	0x080119b2
 8002020:	08011d86 	.word	0x08011d86
 8002024:	08011caf 	.word	0x08011caf

08002028 <formatToHexString>:
	SIM_UART_ReInitializeRxDMA();
	return 1;
}

// Function to format data into a hex string
int formatToHexString( const uint8_t* data, int length, char* output, int max_len, int writeIndex) {
 8002028:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    for (int i = 0; i < length; i++) {
 800202c:	9c08      	ldr	r4, [sp, #32]
        if (writeIndex + 2 >= max_len) {
            // Prevent buffer overflow
            return -1;
        }
        sprintf(output + writeIndex, "%02X", data[i]);
 800202e:	f8df a034 	ldr.w	sl, [pc, #52]	@ 8002064 <formatToHexString+0x3c>
int formatToHexString( const uint8_t* data, int length, char* output, int max_len, int writeIndex) {
 8002032:	4607      	mov	r7, r0
 8002034:	460e      	mov	r6, r1
 8002036:	4698      	mov	r8, r3
    for (int i = 0; i < length; i++) {
 8002038:	2500      	movs	r5, #0
        sprintf(output + writeIndex, "%02X", data[i]);
 800203a:	f1a2 0902 	sub.w	r9, r2, #2
    for (int i = 0; i < length; i++) {
 800203e:	42b5      	cmp	r5, r6
 8002040:	db02      	blt.n	8002048 <formatToHexString+0x20>
        writeIndex += 2;
    }
    return writeIndex;
}
 8002042:	4620      	mov	r0, r4
 8002044:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        if (writeIndex + 2 >= max_len) {
 8002048:	3402      	adds	r4, #2
 800204a:	4544      	cmp	r4, r8
 800204c:	da07      	bge.n	800205e <formatToHexString+0x36>
        sprintf(output + writeIndex, "%02X", data[i]);
 800204e:	5d7a      	ldrb	r2, [r7, r5]
 8002050:	4651      	mov	r1, sl
 8002052:	eb09 0004 	add.w	r0, r9, r4
 8002056:	f009 fee1 	bl	800be1c <siprintf>
    for (int i = 0; i < length; i++) {
 800205a:	3501      	adds	r5, #1
 800205c:	e7ef      	b.n	800203e <formatToHexString+0x16>
            return -1;
 800205e:	f04f 34ff 	mov.w	r4, #4294967295
 8002062:	e7ee      	b.n	8002042 <formatToHexString+0x1a>
 8002064:	08012eb8 	.word	0x08012eb8

08002068 <generateRegistrationMessage>:

int generateRegistrationMessage(const JT808_TerminalRegistration *data, char *hexString, int max_len) {
 8002068:	b573      	push	{r0, r1, r4, r5, r6, lr}
    int writeIndex = 0;
    writeIndex = formatToHexString(&(data->start_mask), sizeof(data->start_mask), hexString, max_len, writeIndex);
 800206a:	2300      	movs	r3, #0
int generateRegistrationMessage(const JT808_TerminalRegistration *data, char *hexString, int max_len) {
 800206c:	460c      	mov	r4, r1
 800206e:	4615      	mov	r5, r2
    writeIndex = formatToHexString(&(data->start_mask), sizeof(data->start_mask), hexString, max_len, writeIndex);
 8002070:	9300      	str	r3, [sp, #0]
 8002072:	4613      	mov	r3, r2
 8002074:	460a      	mov	r2, r1
 8002076:	2101      	movs	r1, #1
int generateRegistrationMessage(const JT808_TerminalRegistration *data, char *hexString, int max_len) {
 8002078:	4606      	mov	r6, r0
    writeIndex = formatToHexString(&(data->start_mask), sizeof(data->start_mask), hexString, max_len, writeIndex);
 800207a:	f7ff ffd5 	bl	8002028 <formatToHexString>
    writeIndex = formatToHexString(data->message_type, sizeof(data->message_type), hexString, max_len, writeIndex);
 800207e:	462b      	mov	r3, r5
 8002080:	9000      	str	r0, [sp, #0]
 8002082:	4622      	mov	r2, r4
 8002084:	2102      	movs	r1, #2
 8002086:	1c70      	adds	r0, r6, #1
 8002088:	f7ff ffce 	bl	8002028 <formatToHexString>
    writeIndex = formatToHexString(data->message_length, sizeof(data->message_length), hexString, max_len, writeIndex);
 800208c:	462b      	mov	r3, r5
 800208e:	9000      	str	r0, [sp, #0]
 8002090:	4622      	mov	r2, r4
 8002092:	2102      	movs	r1, #2
 8002094:	1cf0      	adds	r0, r6, #3
 8002096:	f7ff ffc7 	bl	8002028 <formatToHexString>
    writeIndex = formatToHexString(data->terminal_phone_number, sizeof(data->terminal_phone_number), hexString, max_len, writeIndex);
 800209a:	462b      	mov	r3, r5
 800209c:	9000      	str	r0, [sp, #0]
 800209e:	4622      	mov	r2, r4
 80020a0:	2106      	movs	r1, #6
 80020a2:	1d70      	adds	r0, r6, #5
 80020a4:	f7ff ffc0 	bl	8002028 <formatToHexString>
    writeIndex = formatToHexString(data->message_serial_number, sizeof(data->message_serial_number), hexString, max_len, writeIndex);
 80020a8:	462b      	mov	r3, r5
 80020aa:	9000      	str	r0, [sp, #0]
 80020ac:	4622      	mov	r2, r4
 80020ae:	2102      	movs	r1, #2
 80020b0:	f106 000b 	add.w	r0, r6, #11
 80020b4:	f7ff ffb8 	bl	8002028 <formatToHexString>
    writeIndex = formatToHexString(data->province_ID, sizeof(data->province_ID), hexString, max_len, writeIndex);
 80020b8:	462b      	mov	r3, r5
 80020ba:	9000      	str	r0, [sp, #0]
 80020bc:	4622      	mov	r2, r4
 80020be:	2102      	movs	r1, #2
 80020c0:	f106 000d 	add.w	r0, r6, #13
 80020c4:	f7ff ffb0 	bl	8002028 <formatToHexString>
    writeIndex = formatToHexString(data->city_ID, sizeof(data->city_ID), hexString, max_len, writeIndex);
 80020c8:	462b      	mov	r3, r5
 80020ca:	9000      	str	r0, [sp, #0]
 80020cc:	4622      	mov	r2, r4
 80020ce:	2102      	movs	r1, #2
 80020d0:	f106 000f 	add.w	r0, r6, #15
 80020d4:	f7ff ffa8 	bl	8002028 <formatToHexString>
    writeIndex = formatToHexString(data->manufacturer_ID, sizeof(data->manufacturer_ID), hexString, max_len, writeIndex);
 80020d8:	462b      	mov	r3, r5
 80020da:	9000      	str	r0, [sp, #0]
 80020dc:	4622      	mov	r2, r4
 80020de:	2105      	movs	r1, #5
 80020e0:	f106 0011 	add.w	r0, r6, #17
 80020e4:	f7ff ffa0 	bl	8002028 <formatToHexString>
    writeIndex = formatToHexString(data->terminal_type, sizeof(data->terminal_type), hexString, max_len, writeIndex);
 80020e8:	462b      	mov	r3, r5
 80020ea:	9000      	str	r0, [sp, #0]
 80020ec:	4622      	mov	r2, r4
 80020ee:	2108      	movs	r1, #8
 80020f0:	f106 0016 	add.w	r0, r6, #22
 80020f4:	f7ff ff98 	bl	8002028 <formatToHexString>
    writeIndex = formatToHexString(data->terminal_ID, sizeof(data->terminal_ID), hexString, max_len, writeIndex);
 80020f8:	462b      	mov	r3, r5
 80020fa:	9000      	str	r0, [sp, #0]
 80020fc:	4622      	mov	r2, r4
 80020fe:	2107      	movs	r1, #7
 8002100:	f106 001e 	add.w	r0, r6, #30
 8002104:	f7ff ff90 	bl	8002028 <formatToHexString>
    writeIndex = formatToHexString(&(data->plate_color), sizeof(data->plate_color), hexString, max_len, writeIndex);
 8002108:	462b      	mov	r3, r5
 800210a:	9000      	str	r0, [sp, #0]
 800210c:	4622      	mov	r2, r4
 800210e:	2101      	movs	r1, #1
 8002110:	f106 0025 	add.w	r0, r6, #37	@ 0x25
 8002114:	f7ff ff88 	bl	8002028 <formatToHexString>
    writeIndex = formatToHexString(data->plate_no, sizeof(data->plate_no), hexString, max_len, writeIndex);
 8002118:	462b      	mov	r3, r5
 800211a:	9000      	str	r0, [sp, #0]
 800211c:	4622      	mov	r2, r4
 800211e:	2114      	movs	r1, #20
 8002120:	f106 0026 	add.w	r0, r6, #38	@ 0x26
 8002124:	f7ff ff80 	bl	8002028 <formatToHexString>
    writeIndex = formatToHexString(&(data->check_sum), sizeof(data->check_sum), hexString, max_len, writeIndex);
 8002128:	462b      	mov	r3, r5
 800212a:	9000      	str	r0, [sp, #0]
 800212c:	4622      	mov	r2, r4
 800212e:	2101      	movs	r1, #1
 8002130:	f106 003a 	add.w	r0, r6, #58	@ 0x3a
 8002134:	f7ff ff78 	bl	8002028 <formatToHexString>
    writeIndex = formatToHexString(&(data->end_mask), sizeof(data->end_mask), hexString, max_len, writeIndex);
 8002138:	462b      	mov	r3, r5
 800213a:	9000      	str	r0, [sp, #0]
 800213c:	4622      	mov	r2, r4
 800213e:	2101      	movs	r1, #1
 8002140:	f106 003b 	add.w	r0, r6, #59	@ 0x3b
 8002144:	f7ff ff70 	bl	8002028 <formatToHexString>
    if (writeIndex < 0) {
        // Handle error in formatting
        return -1;
    }
    return writeIndex;
}
 8002148:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 800214c:	b002      	add	sp, #8
 800214e:	bd70      	pop	{r4, r5, r6, pc}

08002150 <generateLocationInfoMessage>:

int generateLocationInfoMessage(const JT808_LocationInfoReport* report, char* hexString, int max_len) {
 8002150:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002154:	b0aa      	sub	sp, #168	@ 0xa8
   const uint8_t* fields[] = {
        &(report->start_mask), report->message_type, report->message_length,
 8002156:	1c43      	adds	r3, r0, #1
   const uint8_t* fields[] = {
 8002158:	9303      	str	r3, [sp, #12]
        &(report->start_mask), report->message_type, report->message_length,
 800215a:	1cc3      	adds	r3, r0, #3
   const uint8_t* fields[] = {
 800215c:	9304      	str	r3, [sp, #16]
        report->terminal_phone_number, report->terminal_serial_number, report->alarm,
 800215e:	1d43      	adds	r3, r0, #5
   const uint8_t* fields[] = {
 8002160:	9305      	str	r3, [sp, #20]
        report->terminal_phone_number, report->terminal_serial_number, report->alarm,
 8002162:	f100 030b 	add.w	r3, r0, #11
   const uint8_t* fields[] = {
 8002166:	9306      	str	r3, [sp, #24]
        report->terminal_phone_number, report->terminal_serial_number, report->alarm,
 8002168:	f100 030d 	add.w	r3, r0, #13
   const uint8_t* fields[] = {
 800216c:	9307      	str	r3, [sp, #28]
        report->status, report->latitude, report->longitude, report->altitude,
 800216e:	f100 0311 	add.w	r3, r0, #17
   const uint8_t* fields[] = {
 8002172:	9308      	str	r3, [sp, #32]
        report->status, report->latitude, report->longitude, report->altitude,
 8002174:	f100 0315 	add.w	r3, r0, #21
   const uint8_t* fields[] = {
 8002178:	9309      	str	r3, [sp, #36]	@ 0x24
        report->status, report->latitude, report->longitude, report->altitude,
 800217a:	f100 0319 	add.w	r3, r0, #25
   const uint8_t* fields[] = {
 800217e:	930a      	str	r3, [sp, #40]	@ 0x28
        report->status, report->latitude, report->longitude, report->altitude,
 8002180:	f100 031d 	add.w	r3, r0, #29
   const uint8_t* fields[] = {
 8002184:	930b      	str	r3, [sp, #44]	@ 0x2c
        report->speed, report->direction, report->timestamp, report->mileage,
 8002186:	f100 031f 	add.w	r3, r0, #31
   const uint8_t* fields[] = {
 800218a:	930c      	str	r3, [sp, #48]	@ 0x30
        report->speed, report->direction, report->timestamp, report->mileage,
 800218c:	f100 0321 	add.w	r3, r0, #33	@ 0x21
   const uint8_t* fields[] = {
 8002190:	930d      	str	r3, [sp, #52]	@ 0x34
        report->speed, report->direction, report->timestamp, report->mileage,
 8002192:	f100 0323 	add.w	r3, r0, #35	@ 0x23
   const uint8_t* fields[] = {
 8002196:	930e      	str	r3, [sp, #56]	@ 0x38
        report->speed, report->direction, report->timestamp, report->mileage,
 8002198:	f100 0329 	add.w	r3, r0, #41	@ 0x29
   const uint8_t* fields[] = {
 800219c:	930f      	str	r3, [sp, #60]	@ 0x3c
        report->oil, report->driving_record_speed, report->vehicle_id, report->signal,
 800219e:	f100 032f 	add.w	r3, r0, #47	@ 0x2f
   const uint8_t* fields[] = {
 80021a2:	9310      	str	r3, [sp, #64]	@ 0x40
        report->oil, report->driving_record_speed, report->vehicle_id, report->signal,
 80021a4:	f100 0331 	add.w	r3, r0, #49	@ 0x31
   const uint8_t* fields[] = {
 80021a8:	9311      	str	r3, [sp, #68]	@ 0x44
        report->oil, report->driving_record_speed, report->vehicle_id, report->signal,
 80021aa:	f100 0333 	add.w	r3, r0, #51	@ 0x33
   const uint8_t* fields[] = {
 80021ae:	9312      	str	r3, [sp, #72]	@ 0x48
        report->oil, report->driving_record_speed, report->vehicle_id, report->signal,
 80021b0:	f100 0336 	add.w	r3, r0, #54	@ 0x36
   const uint8_t* fields[] = {
 80021b4:	9002      	str	r0, [sp, #8]
 80021b6:	9313      	str	r3, [sp, #76]	@ 0x4c
        report->additional, &(report->end_mask)
    };
    int lengths[] = { 1, 2, 2, 6, 2, 4, 4, 4, 4, 2, 2, 2, 6, 6, 2, 2, 3, 1, 9, 1 };
 80021b8:	af16      	add	r7, sp, #88	@ 0x58
        report->additional, &(report->end_mask)
 80021ba:	f100 0337 	add.w	r3, r0, #55	@ 0x37
 80021be:	3040      	adds	r0, #64	@ 0x40
   const uint8_t* fields[] = {
 80021c0:	9015      	str	r0, [sp, #84]	@ 0x54
int generateLocationInfoMessage(const JT808_LocationInfoReport* report, char* hexString, int max_len) {
 80021c2:	460d      	mov	r5, r1
 80021c4:	4616      	mov	r6, r2
    int lengths[] = { 1, 2, 2, 6, 2, 4, 4, 4, 4, 2, 2, 2, 6, 6, 2, 2, 3, 1, 9, 1 };
 80021c6:	490f      	ldr	r1, [pc, #60]	@ (8002204 <generateLocationInfoMessage+0xb4>)
   const uint8_t* fields[] = {
 80021c8:	9314      	str	r3, [sp, #80]	@ 0x50
    int lengths[] = { 1, 2, 2, 6, 2, 4, 4, 4, 4, 2, 2, 2, 6, 6, 2, 2, 3, 1, 9, 1 };
 80021ca:	2250      	movs	r2, #80	@ 0x50
 80021cc:	4638      	mov	r0, r7

    int writeIndex = 0;
    for (int i = 0; i < sizeof(fields) / sizeof(fields[0]); i++) {
 80021ce:	2400      	movs	r4, #0
    int lengths[] = { 1, 2, 2, 6, 2, 4, 4, 4, 4, 2, 2, 2, 6, 6, 2, 2, 3, 1, 9, 1 };
 80021d0:	f00a fd40 	bl	800cc54 <memcpy>
        writeIndex = formatToHexString(fields[i], lengths[i], hexString, max_len, writeIndex);
 80021d4:	f10d 0808 	add.w	r8, sp, #8
    int writeIndex = 0;
 80021d8:	4620      	mov	r0, r4
        writeIndex = formatToHexString(fields[i], lengths[i], hexString, max_len, writeIndex);
 80021da:	9000      	str	r0, [sp, #0]
 80021dc:	f857 1024 	ldr.w	r1, [r7, r4, lsl #2]
 80021e0:	f858 0024 	ldr.w	r0, [r8, r4, lsl #2]
 80021e4:	4633      	mov	r3, r6
 80021e6:	462a      	mov	r2, r5
 80021e8:	f7ff ff1e 	bl	8002028 <formatToHexString>
        if (writeIndex < 0) return -1;
 80021ec:	2800      	cmp	r0, #0
 80021ee:	db05      	blt.n	80021fc <generateLocationInfoMessage+0xac>
    for (int i = 0; i < sizeof(fields) / sizeof(fields[0]); i++) {
 80021f0:	3401      	adds	r4, #1
 80021f2:	2c14      	cmp	r4, #20
 80021f4:	d1f1      	bne.n	80021da <generateLocationInfoMessage+0x8a>
    }
    return writeIndex;
}
 80021f6:	b02a      	add	sp, #168	@ 0xa8
 80021f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if (writeIndex < 0) return -1;
 80021fc:	f04f 30ff 	mov.w	r0, #4294967295
 8002200:	e7f9      	b.n	80021f6 <generateLocationInfoMessage+0xa6>
 8002202:	bf00      	nop
 8002204:	08011618 	.word	0x08011618

08002208 <login_to_server>:



int login_to_server(int connect_id, const JT808_TerminalRegistration *reg_msg){
 8002208:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800220c:	f5ad 7d02 	sub.w	sp, sp, #520	@ 0x208
	uint8_t command[256];  // Increased buffer size
	char hexString[128] = {0};
 8002210:	2400      	movs	r4, #0
int login_to_server(int connect_id, const JT808_TerminalRegistration *reg_msg){
 8002212:	460f      	mov	r7, r1
	char hexString[128] = {0};
 8002214:	ae02      	add	r6, sp, #8
 8002216:	227c      	movs	r2, #124	@ 0x7c
 8002218:	4621      	mov	r1, r4
int login_to_server(int connect_id, const JT808_TerminalRegistration *reg_msg){
 800221a:	4605      	mov	r5, r0
	char hexString[128] = {0};
 800221c:	a803      	add	r0, sp, #12
 800221e:	6034      	str	r4, [r6, #0]
 8002220:	f009 fec4 	bl	800bfac <memset>
	int count_check = 0;
	int result = generateRegistrationMessage(reg_msg, hexString, 128);
 8002224:	2280      	movs	r2, #128	@ 0x80
 8002226:	4631      	mov	r1, r6
 8002228:	4638      	mov	r0, r7
 800222a:	f7ff ff1d 	bl	8002068 <generateRegistrationMessage>
	if (result < 0) {
 800222e:	42a0      	cmp	r0, r4
 8002230:	da05      	bge.n	800223e <login_to_server+0x36>
		uart_transmit_string(&huart1,(uint8_t*) "ERROR: FAILED to generate message string\n");
 8002232:	4930      	ldr	r1, [pc, #192]	@ (80022f4 <login_to_server+0xec>)
 8002234:	4830      	ldr	r0, [pc, #192]	@ (80022f8 <login_to_server+0xf0>)
 8002236:	f002 ff7f 	bl	8005138 <uart_transmit_string>
		return 1;
 800223a:	2001      	movs	r0, #1
 800223c:	e02d      	b.n	800229a <login_to_server+0x92>
	}

	// Format the AT command with the hex message
	snprintf((char*)command, sizeof(command), "AT+QISENDEX=%d,\"%s\"\r\n", connect_id, hexString);
 800223e:	4a2f      	ldr	r2, [pc, #188]	@ (80022fc <login_to_server+0xf4>)
 8002240:	9600      	str	r6, [sp, #0]
 8002242:	462b      	mov	r3, r5
 8002244:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002248:	a842      	add	r0, sp, #264	@ 0x108
 800224a:	f009 fdb3 	bl	800bdb4 <sniprintf>
	//snprintf((char *)command, sizeof(command), "AT+QISENDEX=%d,\"%s\"\r\n", connect_id, message);
	send_AT_command((char*)command);
 800224e:	a842      	add	r0, sp, #264	@ 0x108
 8002250:	f7ff f970 	bl	8001534 <send_AT_command>

//	while(1){
	while(strstr((char *) response, "+QIURC") == NULL){
 8002254:	4f2a      	ldr	r7, [pc, #168]	@ (8002300 <login_to_server+0xf8>)
 8002256:	4e2b      	ldr	r6, [pc, #172]	@ (8002304 <login_to_server+0xfc>)
			count_check = 0;
			memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
			SIM_UART_ReInitializeRxDMA();
			return 0;
		}
		if (strstr((char*) response, "ERROR") != NULL){
 8002258:	f8df 80b8 	ldr.w	r8, [pc, #184]	@ 8002314 <login_to_server+0x10c>
	while(strstr((char *) response, "+QIURC") == NULL){
 800225c:	4639      	mov	r1, r7
 800225e:	4630      	mov	r0, r6
 8002260:	f009 fef4 	bl	800c04c <strstr>
 8002264:	b170      	cbz	r0, 8002284 <login_to_server+0x7c>
		snprintf(output_elapsed, 128, "Elapsed Time: %d\n", count_check);
		uart_transmit_string(&huart1, (uint8_t *)output_elapsed);
		receive_response("Check sending to server\n");
		osDelay(100);
	}
	receive_response("Check sending to server\n");
 8002266:	4828      	ldr	r0, [pc, #160]	@ (8002308 <login_to_server+0x100>)
 8002268:	f7ff f990 	bl	800158c <receive_response>
	osDelay(100);
 800226c:	2064      	movs	r0, #100	@ 0x64
 800226e:	f006 f8bb 	bl	80083e8 <osDelay>
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8002272:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8002276:	2100      	movs	r1, #0
 8002278:	4822      	ldr	r0, [pc, #136]	@ (8002304 <login_to_server+0xfc>)
 800227a:	f009 fe97 	bl	800bfac <memset>
	SIM_UART_ReInitializeRxDMA();
 800227e:	f7ff f969 	bl	8001554 <SIM_UART_ReInitializeRxDMA>
	return 1;
 8002282:	e7da      	b.n	800223a <login_to_server+0x32>
		if(count_check >= 50){
 8002284:	2c32      	cmp	r4, #50	@ 0x32
 8002286:	d10c      	bne.n	80022a2 <login_to_server+0x9a>
			memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8002288:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 800228c:	2100      	movs	r1, #0
 800228e:	481d      	ldr	r0, [pc, #116]	@ (8002304 <login_to_server+0xfc>)
 8002290:	f009 fe8c 	bl	800bfac <memset>
			SIM_UART_ReInitializeRxDMA();
 8002294:	f7ff f95e 	bl	8001554 <SIM_UART_ReInitializeRxDMA>
			return 0;
 8002298:	2000      	movs	r0, #0
}
 800229a:	f50d 7d02 	add.w	sp, sp, #520	@ 0x208
 800229e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (strstr((char*) response, "ERROR") != NULL){
 80022a2:	4641      	mov	r1, r8
 80022a4:	4630      	mov	r0, r6
 80022a6:	f009 fed1 	bl	800c04c <strstr>
 80022aa:	4605      	mov	r5, r0
 80022ac:	2800      	cmp	r0, #0
 80022ae:	d1eb      	bne.n	8002288 <login_to_server+0x80>
		if (strstr((char*)response, "closed") != NULL) {
 80022b0:	4916      	ldr	r1, [pc, #88]	@ (800230c <login_to_server+0x104>)
 80022b2:	4630      	mov	r0, r6
 80022b4:	f009 feca 	bl	800c04c <strstr>
 80022b8:	b148      	cbz	r0, 80022ce <login_to_server+0xc6>
			 memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 80022ba:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 80022be:	4629      	mov	r1, r5
 80022c0:	4810      	ldr	r0, [pc, #64]	@ (8002304 <login_to_server+0xfc>)
 80022c2:	f009 fe73 	bl	800bfac <memset>
			 SIM_UART_ReInitializeRxDMA();
 80022c6:	f7ff f945 	bl	8001554 <SIM_UART_ReInitializeRxDMA>
			 return 2;
 80022ca:	2002      	movs	r0, #2
 80022cc:	e7e5      	b.n	800229a <login_to_server+0x92>
		count_check++;
 80022ce:	3401      	adds	r4, #1
		snprintf(output_elapsed, 128, "Elapsed Time: %d\n", count_check);
 80022d0:	4a0f      	ldr	r2, [pc, #60]	@ (8002310 <login_to_server+0x108>)
 80022d2:	4623      	mov	r3, r4
 80022d4:	2180      	movs	r1, #128	@ 0x80
 80022d6:	a822      	add	r0, sp, #136	@ 0x88
 80022d8:	f009 fd6c 	bl	800bdb4 <sniprintf>
		uart_transmit_string(&huart1, (uint8_t *)output_elapsed);
 80022dc:	a922      	add	r1, sp, #136	@ 0x88
 80022de:	4806      	ldr	r0, [pc, #24]	@ (80022f8 <login_to_server+0xf0>)
 80022e0:	f002 ff2a 	bl	8005138 <uart_transmit_string>
		receive_response("Check sending to server\n");
 80022e4:	4808      	ldr	r0, [pc, #32]	@ (8002308 <login_to_server+0x100>)
 80022e6:	f7ff f951 	bl	800158c <receive_response>
		osDelay(100);
 80022ea:	2064      	movs	r0, #100	@ 0x64
 80022ec:	f006 f87c 	bl	80083e8 <osDelay>
 80022f0:	e7b4      	b.n	800225c <login_to_server+0x54>
 80022f2:	bf00      	nop
 80022f4:	08011d9f 	.word	0x08011d9f
 80022f8:	20001240 	.word	0x20001240
 80022fc:	08011dc9 	.word	0x08011dc9
 8002300:	08011dff 	.word	0x08011dff
 8002304:	20000ca8 	.word	0x20000ca8
 8002308:	08011de6 	.word	0x08011de6
 800230c:	08011ddf 	.word	0x08011ddf
 8002310:	08011d62 	.word	0x08011d62
 8002314:	08011caf 	.word	0x08011caf

08002318 <send_location_to_server>:

int send_location_to_server(int connect_id, const JT808_LocationInfoReport *location_info){
 8002318:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800231c:	f5ad 7d04 	sub.w	sp, sp, #528	@ 0x210
	uint8_t command[256];  // Increased buffer size
	char hexString[131] = {0};
 8002320:	2400      	movs	r4, #0
int send_location_to_server(int connect_id, const JT808_LocationInfoReport *location_info){
 8002322:	460f      	mov	r7, r1
	char hexString[131] = {0};
 8002324:	ae23      	add	r6, sp, #140	@ 0x8c
 8002326:	227f      	movs	r2, #127	@ 0x7f
 8002328:	4621      	mov	r1, r4
int send_location_to_server(int connect_id, const JT808_LocationInfoReport *location_info){
 800232a:	4605      	mov	r5, r0
	char hexString[131] = {0};
 800232c:	a824      	add	r0, sp, #144	@ 0x90
 800232e:	6034      	str	r4, [r6, #0]
 8002330:	f009 fe3c 	bl	800bfac <memset>
	int count_check = 0;

	int count_resend = 0;
	int result = generateLocationInfoMessage(location_info, hexString, 131);
 8002334:	2283      	movs	r2, #131	@ 0x83
 8002336:	4631      	mov	r1, r6
 8002338:	4638      	mov	r0, r7
 800233a:	f7ff ff09 	bl	8002150 <generateLocationInfoMessage>
	if (result < 0) {
 800233e:	42a0      	cmp	r0, r4
 8002340:	da05      	bge.n	800234e <send_location_to_server+0x36>
		uart_transmit_string(&huart1,(uint8_t*) "ERROR: FAILED to generate message string\n");
 8002342:	492e      	ldr	r1, [pc, #184]	@ (80023fc <send_location_to_server+0xe4>)
 8002344:	482e      	ldr	r0, [pc, #184]	@ (8002400 <send_location_to_server+0xe8>)
 8002346:	f002 fef7 	bl	8005138 <uart_transmit_string>
		return 1;
 800234a:	2001      	movs	r0, #1
 800234c:	e02d      	b.n	80023aa <send_location_to_server+0x92>
	}

		// Format the AT command with the hex message
	snprintf((char *) command, sizeof(command), "AT+QISENDEX=%d,\"%s\"\r\n", connect_id, hexString);
 800234e:	4a2d      	ldr	r2, [pc, #180]	@ (8002404 <send_location_to_server+0xec>)
 8002350:	9600      	str	r6, [sp, #0]
 8002352:	462b      	mov	r3, r5
 8002354:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002358:	a844      	add	r0, sp, #272	@ 0x110
 800235a:	f009 fd2b 	bl	800bdb4 <sniprintf>
	send_AT_command((char*)command);
 800235e:	a844      	add	r0, sp, #272	@ 0x110
 8002360:	f7ff f8e8 	bl	8001534 <send_AT_command>
	while(strstr((char *) response, "+QIURC") == NULL){
 8002364:	4f28      	ldr	r7, [pc, #160]	@ (8002408 <send_location_to_server+0xf0>)
 8002366:	4e29      	ldr	r6, [pc, #164]	@ (800240c <send_location_to_server+0xf4>)
			count_check = 0;
			memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
			SIM_UART_ReInitializeRxDMA();
			return 0;
		}
		if (strstr((char*) response, "ERROR") != NULL){
 8002368:	f8df 80b0 	ldr.w	r8, [pc, #176]	@ 800241c <send_location_to_server+0x104>
	while(strstr((char *) response, "+QIURC") == NULL){
 800236c:	4639      	mov	r1, r7
 800236e:	4630      	mov	r0, r6
 8002370:	f009 fe6c 	bl	800c04c <strstr>
 8002374:	b158      	cbz	r0, 800238e <send_location_to_server+0x76>
		count_check++;
		snprintf(output_elapsed, 128, "Elapsed Time: %d\n", count_check);
		uart_transmit_string(&huart1, (uint8_t *)output_elapsed);
		receive_response("Check sending to server\n");
	}
	receive_response("Check sending to server\n");
 8002376:	4826      	ldr	r0, [pc, #152]	@ (8002410 <send_location_to_server+0xf8>)
 8002378:	f7ff f908 	bl	800158c <receive_response>
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 800237c:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8002380:	2100      	movs	r1, #0
 8002382:	4822      	ldr	r0, [pc, #136]	@ (800240c <send_location_to_server+0xf4>)
 8002384:	f009 fe12 	bl	800bfac <memset>
	SIM_UART_ReInitializeRxDMA();
 8002388:	f7ff f8e4 	bl	8001554 <SIM_UART_ReInitializeRxDMA>
	return 1;
 800238c:	e7dd      	b.n	800234a <send_location_to_server+0x32>
		osDelay(100);
 800238e:	2064      	movs	r0, #100	@ 0x64
 8002390:	f006 f82a 	bl	80083e8 <osDelay>
		if(count_check >= 50){
 8002394:	2c32      	cmp	r4, #50	@ 0x32
 8002396:	d10c      	bne.n	80023b2 <send_location_to_server+0x9a>
			memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8002398:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 800239c:	2100      	movs	r1, #0
 800239e:	481b      	ldr	r0, [pc, #108]	@ (800240c <send_location_to_server+0xf4>)
 80023a0:	f009 fe04 	bl	800bfac <memset>
			SIM_UART_ReInitializeRxDMA();
 80023a4:	f7ff f8d6 	bl	8001554 <SIM_UART_ReInitializeRxDMA>
			return 0;
 80023a8:	2000      	movs	r0, #0
}
 80023aa:	f50d 7d04 	add.w	sp, sp, #528	@ 0x210
 80023ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (strstr((char*) response, "ERROR") != NULL){
 80023b2:	4641      	mov	r1, r8
 80023b4:	4630      	mov	r0, r6
 80023b6:	f009 fe49 	bl	800c04c <strstr>
 80023ba:	4605      	mov	r5, r0
 80023bc:	2800      	cmp	r0, #0
 80023be:	d1eb      	bne.n	8002398 <send_location_to_server+0x80>
		if (strstr((char*)response, "closed") != NULL) {
 80023c0:	4914      	ldr	r1, [pc, #80]	@ (8002414 <send_location_to_server+0xfc>)
 80023c2:	4630      	mov	r0, r6
 80023c4:	f009 fe42 	bl	800c04c <strstr>
 80023c8:	b148      	cbz	r0, 80023de <send_location_to_server+0xc6>
			 memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 80023ca:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 80023ce:	4629      	mov	r1, r5
 80023d0:	480e      	ldr	r0, [pc, #56]	@ (800240c <send_location_to_server+0xf4>)
 80023d2:	f009 fdeb 	bl	800bfac <memset>
			 SIM_UART_ReInitializeRxDMA();
 80023d6:	f7ff f8bd 	bl	8001554 <SIM_UART_ReInitializeRxDMA>
			 return 2;
 80023da:	2002      	movs	r0, #2
 80023dc:	e7e5      	b.n	80023aa <send_location_to_server+0x92>
		count_check++;
 80023de:	3401      	adds	r4, #1
		snprintf(output_elapsed, 128, "Elapsed Time: %d\n", count_check);
 80023e0:	4a0d      	ldr	r2, [pc, #52]	@ (8002418 <send_location_to_server+0x100>)
 80023e2:	4623      	mov	r3, r4
 80023e4:	2180      	movs	r1, #128	@ 0x80
 80023e6:	a803      	add	r0, sp, #12
 80023e8:	f009 fce4 	bl	800bdb4 <sniprintf>
		uart_transmit_string(&huart1, (uint8_t *)output_elapsed);
 80023ec:	4804      	ldr	r0, [pc, #16]	@ (8002400 <send_location_to_server+0xe8>)
 80023ee:	a903      	add	r1, sp, #12
 80023f0:	f002 fea2 	bl	8005138 <uart_transmit_string>
		receive_response("Check sending to server\n");
 80023f4:	4806      	ldr	r0, [pc, #24]	@ (8002410 <send_location_to_server+0xf8>)
 80023f6:	f7ff f8c9 	bl	800158c <receive_response>
 80023fa:	e7b7      	b.n	800236c <send_location_to_server+0x54>
 80023fc:	08011d9f 	.word	0x08011d9f
 8002400:	20001240 	.word	0x20001240
 8002404:	08011dc9 	.word	0x08011dc9
 8002408:	08011dff 	.word	0x08011dff
 800240c:	20000ca8 	.word	0x20000ca8
 8002410:	08011de6 	.word	0x08011de6
 8002414:	08011ddf 	.word	0x08011ddf
 8002418:	08011d62 	.word	0x08011d62
 800241c:	08011caf 	.word	0x08011caf

08002420 <check_data_sent_to_server>:


int check_data_sent_to_server(int connect_id){
 8002420:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002424:	4604      	mov	r4, r0
 8002426:	f5ad 7d05 	sub.w	sp, sp, #532	@ 0x214
	int count_check = 0;
	uint8_t output[128];
	int count_resend = 0;
	int is_sent_ok = 0;

	Debug_printf("\n\n---------------- IN QIRD: 0X1500h ------------------\n\n");
 800242a:	4886      	ldr	r0, [pc, #536]	@ (8002644 <check_data_sent_to_server+0x224>)
	while(count_resend < 5){
		snprintf((char *)command, sizeof(command), "AT+QIRD=%d,100\r\n", connect_id);
 800242c:	f8df 925c 	ldr.w	r9, [pc, #604]	@ 800268c <check_data_sent_to_server+0x26c>
		send_AT_command((char*)command);
		Debug_printf("\n\n---------------- IN QIRD:0X100 SENDING COUNT: %d ------------------\n\n", count_resend);
 8002430:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8002690 <check_data_sent_to_server+0x270>
	Debug_printf("\n\n---------------- IN QIRD: 0X1500h ------------------\n\n");
 8002434:	f002 fe90 	bl	8005158 <Debug_printf>
 8002438:	2501      	movs	r5, #1
		snprintf((char *)command, sizeof(command), "AT+QIRD=%d,100\r\n", connect_id);
 800243a:	4623      	mov	r3, r4
 800243c:	464a      	mov	r2, r9
 800243e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002442:	a844      	add	r0, sp, #272	@ 0x110
 8002444:	f009 fcb6 	bl	800bdb4 <sniprintf>
		send_AT_command((char*)command);
 8002448:	a844      	add	r0, sp, #272	@ 0x110
 800244a:	f7ff f873 	bl	8001534 <send_AT_command>
		Debug_printf("\n\n---------------- IN QIRD:0X100 SENDING COUNT: %d ------------------\n\n", count_resend);
 800244e:	1e69      	subs	r1, r5, #1
 8002450:	4650      	mov	r0, sl
 8002452:	f002 fe81 	bl	8005158 <Debug_printf>
		is_sent_ok = 1;
		while(strstr((char *) response, "+QIRD") == NULL){
 8002456:	f8df 81fc 	ldr.w	r8, [pc, #508]	@ 8002654 <check_data_sent_to_server+0x234>
			char output_elapsed[128];
			if (strstr((char*)response, "ERROR") != NULL){
 800245a:	f8df b238 	ldr.w	fp, [pc, #568]	@ 8002694 <check_data_sent_to_server+0x274>
		while(strstr((char *) response, "+QIRD") == NULL){
 800245e:	2700      	movs	r7, #0
 8002460:	4979      	ldr	r1, [pc, #484]	@ (8002648 <check_data_sent_to_server+0x228>)
 8002462:	4640      	mov	r0, r8
 8002464:	f009 fdf2 	bl	800c04c <strstr>
 8002468:	4606      	mov	r6, r0
 800246a:	b338      	cbz	r0, 80024bc <check_data_sent_to_server+0x9c>
			count_resend++;
			count_check = 0;
			osDelay(100);
			continue;
		}
		receive_response("Check received data from server\n");
 800246c:	4877      	ldr	r0, [pc, #476]	@ (800264c <check_data_sent_to_server+0x22c>)
 800246e:	f7ff f88d 	bl	800158c <receive_response>
		char *token = strstr((char*)response, "+QIRD: ");
 8002472:	4977      	ldr	r1, [pc, #476]	@ (8002650 <check_data_sent_to_server+0x230>)
 8002474:	4877      	ldr	r0, [pc, #476]	@ (8002654 <check_data_sent_to_server+0x234>)
 8002476:	f009 fde9 	bl	800c04c <strstr>
		int value = 0;

		if (token != NULL) {
 800247a:	b110      	cbz	r0, 8002482 <check_data_sent_to_server+0x62>
			value = atoi(token + 7);  // Move past "+QIRD: " and convert to integer
 800247c:	3007      	adds	r0, #7
 800247e:	f007 fe0c 	bl	800a09a <atoi>
		}
		snprintf((char*)output, 128, "\nNumber of character received: %d\n", value);
 8002482:	4603      	mov	r3, r0
 8002484:	4a74      	ldr	r2, [pc, #464]	@ (8002658 <check_data_sent_to_server+0x238>)
		int value = 0;
 8002486:	4606      	mov	r6, r0
		snprintf((char*)output, 128, "\nNumber of character received: %d\n", value);
 8002488:	2180      	movs	r1, #128	@ 0x80
 800248a:	a804      	add	r0, sp, #16
 800248c:	f009 fc92 	bl	800bdb4 <sniprintf>
		uart_transmit_string(&huart1, output);
 8002490:	4872      	ldr	r0, [pc, #456]	@ (800265c <check_data_sent_to_server+0x23c>)
 8002492:	a904      	add	r1, sp, #16
 8002494:	f002 fe50 	bl	8005138 <uart_transmit_string>

		uart_transmit_string(&huart1, (uint8_t*) "OUT OF receive data from server\n");
 8002498:	4971      	ldr	r1, [pc, #452]	@ (8002660 <check_data_sent_to_server+0x240>)
 800249a:	4870      	ldr	r0, [pc, #448]	@ (800265c <check_data_sent_to_server+0x23c>)
 800249c:	f002 fe4c 	bl	8005138 <uart_transmit_string>
		memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 80024a0:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 80024a4:	2100      	movs	r1, #0
 80024a6:	486b      	ldr	r0, [pc, #428]	@ (8002654 <check_data_sent_to_server+0x234>)
 80024a8:	f009 fd80 	bl	800bfac <memset>
		SIM_UART_ReInitializeRxDMA();
 80024ac:	f7ff f852 	bl	8001554 <SIM_UART_ReInitializeRxDMA>
		if(value == 0) {
 80024b0:	bb1e      	cbnz	r6, 80024fa <check_data_sent_to_server+0xda>
			count_resend++;
			count_check = 0;
			osDelay(100);
 80024b2:	2064      	movs	r0, #100	@ 0x64
 80024b4:	f005 ff98 	bl	80083e8 <osDelay>
		is_sent_ok = 1;
 80024b8:	2601      	movs	r6, #1
 80024ba:	e018      	b.n	80024ee <check_data_sent_to_server+0xce>
			if (strstr((char*)response, "ERROR") != NULL){
 80024bc:	4659      	mov	r1, fp
 80024be:	4640      	mov	r0, r8
 80024c0:	f009 fdc4 	bl	800c04c <strstr>
 80024c4:	4601      	mov	r1, r0
 80024c6:	2800      	cmp	r0, #0
 80024c8:	d066      	beq.n	8002598 <check_data_sent_to_server+0x178>
				Debug_printf("\n\n---------------- IN QIRD: 0X1500h: ERROR ------------------\n\n");
 80024ca:	4866      	ldr	r0, [pc, #408]	@ (8002664 <check_data_sent_to_server+0x244>)
 80024cc:	f002 fe44 	bl	8005158 <Debug_printf>
				memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 80024d0:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 80024d4:	4631      	mov	r1, r6
				memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 80024d6:	485f      	ldr	r0, [pc, #380]	@ (8002654 <check_data_sent_to_server+0x234>)
 80024d8:	f009 fd68 	bl	800bfac <memset>
				SIM_UART_ReInitializeRxDMA();
 80024dc:	f7ff f83a 	bl	8001554 <SIM_UART_ReInitializeRxDMA>
				send_AT_command((char*)command);
 80024e0:	a844      	add	r0, sp, #272	@ 0x110
 80024e2:	f7ff f827 	bl	8001534 <send_AT_command>
			osDelay(100);
 80024e6:	2064      	movs	r0, #100	@ 0x64
 80024e8:	f005 ff7e 	bl	80083e8 <osDelay>
			continue;
 80024ec:	2600      	movs	r6, #0
	while(count_resend < 5){
 80024ee:	3501      	adds	r5, #1
 80024f0:	2d06      	cmp	r5, #6
 80024f2:	d1a2      	bne.n	800243a <check_data_sent_to_server+0x1a>
		}
		else break;
	}
//	osDelay(50);
// --------------------------------------------------------------End of  QIRD ------------------------------------------------------------
	if(is_sent_ok == 1){
 80024f4:	2e00      	cmp	r6, #0
 80024f6:	f000 80a1 	beq.w	800263c <check_data_sent_to_server+0x21c>
//		memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
//		SIM_UART_ReInitializeRxDMA();
	//Reset value
		count_check = 0;
		count_resend = 0;
		Debug_printf("\n\n---------------- IN QISEND: 0X0 ------------------\n\n");
 80024fa:	485b      	ldr	r0, [pc, #364]	@ (8002668 <check_data_sent_to_server+0x248>)

		while(count_resend < 3){
			is_sent_ok = 1;
			snprintf((char *)command, sizeof(command), "AT+QISEND=%d,0\r\n", connect_id);
 80024fc:	f8df 9198 	ldr.w	r9, [pc, #408]	@ 8002698 <check_data_sent_to_server+0x278>
			send_AT_command((char*)command);
			Debug_printf("\n\n---------------- IN QISEND:0X0 SENDING COUNT: %d ------------------\n\n", count_resend);
 8002500:	f8df a198 	ldr.w	sl, [pc, #408]	@ 800269c <check_data_sent_to_server+0x27c>
		Debug_printf("\n\n---------------- IN QISEND: 0X0 ------------------\n\n");
 8002504:	f002 fe28 	bl	8005158 <Debug_printf>
		count_resend = 0;
 8002508:	2500      	movs	r5, #0
		count_check = 0;
 800250a:	462f      	mov	r7, r5
			snprintf((char *)command, sizeof(command), "AT+QISEND=%d,0\r\n", connect_id);
 800250c:	4623      	mov	r3, r4
 800250e:	464a      	mov	r2, r9
 8002510:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002514:	a844      	add	r0, sp, #272	@ 0x110
 8002516:	f009 fc4d 	bl	800bdb4 <sniprintf>
			send_AT_command((char*)command);
 800251a:	a844      	add	r0, sp, #272	@ 0x110
 800251c:	f7ff f80a 	bl	8001534 <send_AT_command>
			Debug_printf("\n\n---------------- IN QISEND:0X0 SENDING COUNT: %d ------------------\n\n", count_resend);
 8002520:	4629      	mov	r1, r5
 8002522:	4650      	mov	r0, sl
 8002524:	f002 fe18 	bl	8005158 <Debug_printf>
			while(strstr((char *) response, CHECK_RESPONSE) == NULL){
 8002528:	f8df 8128 	ldr.w	r8, [pc, #296]	@ 8002654 <check_data_sent_to_server+0x234>
					SIM_UART_ReInitializeRxDMA();
					send_AT_command((char*)command);
					is_sent_ok = 0;
					break;
				}
				if (strstr((char*) response, "ERROR") != NULL){
 800252c:	f8df b164 	ldr.w	fp, [pc, #356]	@ 8002694 <check_data_sent_to_server+0x274>
			while(strstr((char *) response, CHECK_RESPONSE) == NULL){
 8002530:	494e      	ldr	r1, [pc, #312]	@ (800266c <check_data_sent_to_server+0x24c>)
 8002532:	4640      	mov	r0, r8
 8002534:	f009 fd8a 	bl	800c04c <strstr>
 8002538:	4606      	mov	r6, r0
 800253a:	2800      	cmp	r0, #0
 800253c:	d043      	beq.n	80025c6 <check_data_sent_to_server+0x1a6>

			if(is_sent_ok == 0) {
				count_resend++;
				continue;
			}
			receive_response("Check sending to server\n");
 800253e:	484c      	ldr	r0, [pc, #304]	@ (8002670 <check_data_sent_to_server+0x250>)
			int sentBytes, ackedBytes, unackedBytes;

			int result = sscanf((char*)response, "AT+QISEND=0,0 +QISEND: %d,%d,%d", &sentBytes, &ackedBytes, &unackedBytes);
 8002540:	ae24      	add	r6, sp, #144	@ 0x90
			receive_response("Check sending to server\n");
 8002542:	f7ff f823 	bl	800158c <receive_response>
			int result = sscanf((char*)response, "AT+QISEND=0,0 +QISEND: %d,%d,%d", &sentBytes, &ackedBytes, &unackedBytes);
 8002546:	494b      	ldr	r1, [pc, #300]	@ (8002674 <check_data_sent_to_server+0x254>)
 8002548:	4842      	ldr	r0, [pc, #264]	@ (8002654 <check_data_sent_to_server+0x234>)
 800254a:	9600      	str	r6, [sp, #0]
 800254c:	ab03      	add	r3, sp, #12
 800254e:	aa02      	add	r2, sp, #8
 8002550:	f009 fc84 	bl	800be5c <siscanf>
			snprintf((char *)output, 128, "Lost Transmit BYTES: %d\n", unackedBytes);
 8002554:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8002556:	4a48      	ldr	r2, [pc, #288]	@ (8002678 <check_data_sent_to_server+0x258>)
			int result = sscanf((char*)response, "AT+QISEND=0,0 +QISEND: %d,%d,%d", &sentBytes, &ackedBytes, &unackedBytes);
 8002558:	4680      	mov	r8, r0
			snprintf((char *)output, 128, "Lost Transmit BYTES: %d\n", unackedBytes);
 800255a:	2180      	movs	r1, #128	@ 0x80
 800255c:	a804      	add	r0, sp, #16
 800255e:	f009 fc29 	bl	800bdb4 <sniprintf>
			uart_transmit_string(&huart1, output);
 8002562:	483e      	ldr	r0, [pc, #248]	@ (800265c <check_data_sent_to_server+0x23c>)
 8002564:	a904      	add	r1, sp, #16
 8002566:	f002 fde7 	bl	8005138 <uart_transmit_string>
			memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 800256a:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 800256e:	2100      	movs	r1, #0
 8002570:	4838      	ldr	r0, [pc, #224]	@ (8002654 <check_data_sent_to_server+0x234>)
 8002572:	f009 fd1b 	bl	800bfac <memset>
			SIM_UART_ReInitializeRxDMA();
 8002576:	f7fe ffed 	bl	8001554 <SIM_UART_ReInitializeRxDMA>
			if (result == 3) {
 800257a:	f1b8 0f03 	cmp.w	r8, #3
 800257e:	d15b      	bne.n	8002638 <check_data_sent_to_server+0x218>
				if (unackedBytes > 0) {
 8002580:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8002582:	2b00      	cmp	r3, #0
 8002584:	dc30      	bgt.n	80025e8 <check_data_sent_to_server+0x1c8>
					count_resend++;
					is_sent_ok = 0;
				}
				else{
					Debug_printf("NO DATA LOSS\n");
 8002586:	483d      	ldr	r0, [pc, #244]	@ (800267c <check_data_sent_to_server+0x25c>)
 8002588:	f002 fde6 	bl	8005158 <Debug_printf>
					break;
 800258c:	2601      	movs	r6, #1
	}
	else{
		Debug_printf("\n\n------------------QIRD ERROR SKIP QISEND0X0 ----------------------\n\n");
	}
	return is_sent_ok;
}
 800258e:	4630      	mov	r0, r6
 8002590:	f50d 7d05 	add.w	sp, sp, #532	@ 0x214
 8002594:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if(count_check >= 10){
 8002598:	2f0a      	cmp	r7, #10
 800259a:	d102      	bne.n	80025a2 <check_data_sent_to_server+0x182>
				memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 800259c:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 80025a0:	e799      	b.n	80024d6 <check_data_sent_to_server+0xb6>
			osDelay(100);
 80025a2:	2064      	movs	r0, #100	@ 0x64
 80025a4:	f005 ff20 	bl	80083e8 <osDelay>
			snprintf(output_elapsed, 128, "Elapsed Time +QISEND: 0,0: %d\n", count_check);
 80025a8:	463b      	mov	r3, r7
 80025aa:	4a35      	ldr	r2, [pc, #212]	@ (8002680 <check_data_sent_to_server+0x260>)
 80025ac:	2180      	movs	r1, #128	@ 0x80
 80025ae:	a824      	add	r0, sp, #144	@ 0x90
 80025b0:	f009 fc00 	bl	800bdb4 <sniprintf>
			uart_transmit_string(&huart1, (uint8_t *)output_elapsed);
 80025b4:	4829      	ldr	r0, [pc, #164]	@ (800265c <check_data_sent_to_server+0x23c>)
 80025b6:	a924      	add	r1, sp, #144	@ 0x90
 80025b8:	f002 fdbe 	bl	8005138 <uart_transmit_string>
			receive_response("Check received data from server\n");
 80025bc:	4823      	ldr	r0, [pc, #140]	@ (800264c <check_data_sent_to_server+0x22c>)
			count_check++;
 80025be:	3701      	adds	r7, #1
			receive_response("Check received data from server\n");
 80025c0:	f7fe ffe4 	bl	800158c <receive_response>
 80025c4:	e74c      	b.n	8002460 <check_data_sent_to_server+0x40>
				osDelay(100);
 80025c6:	2064      	movs	r0, #100	@ 0x64
 80025c8:	f005 ff0e 	bl	80083e8 <osDelay>
				if(count_check >= 50){
 80025cc:	2f31      	cmp	r7, #49	@ 0x31
 80025ce:	dd10      	ble.n	80025f2 <check_data_sent_to_server+0x1d2>
					memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 80025d0:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 80025d4:	4631      	mov	r1, r6
 80025d6:	481f      	ldr	r0, [pc, #124]	@ (8002654 <check_data_sent_to_server+0x234>)
 80025d8:	f009 fce8 	bl	800bfac <memset>
					SIM_UART_ReInitializeRxDMA();
 80025dc:	f7fe ffba 	bl	8001554 <SIM_UART_ReInitializeRxDMA>
					send_AT_command((char*)command);
 80025e0:	a844      	add	r0, sp, #272	@ 0x110
 80025e2:	f7fe ffa7 	bl	8001534 <send_AT_command>
					count_check = 0;
 80025e6:	4637      	mov	r7, r6
					count_resend++;
 80025e8:	3501      	adds	r5, #1
					is_sent_ok = 0;
 80025ea:	2600      	movs	r6, #0
		while(count_resend < 3){
 80025ec:	2d03      	cmp	r5, #3
 80025ee:	d18d      	bne.n	800250c <check_data_sent_to_server+0xec>
 80025f0:	e7cd      	b.n	800258e <check_data_sent_to_server+0x16e>
				if (strstr((char*) response, "ERROR") != NULL){
 80025f2:	4659      	mov	r1, fp
 80025f4:	4640      	mov	r0, r8
 80025f6:	f009 fd29 	bl	800c04c <strstr>
 80025fa:	b170      	cbz	r0, 800261a <check_data_sent_to_server+0x1fa>
					Debug_printf("\n\n---------------- IN QISEND: 0X0: ERROR ------------------\n\n");
 80025fc:	4821      	ldr	r0, [pc, #132]	@ (8002684 <check_data_sent_to_server+0x264>)
 80025fe:	f002 fdab 	bl	8005158 <Debug_printf>
					memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8002602:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8002606:	4631      	mov	r1, r6
 8002608:	4812      	ldr	r0, [pc, #72]	@ (8002654 <check_data_sent_to_server+0x234>)
 800260a:	f009 fccf 	bl	800bfac <memset>
					SIM_UART_ReInitializeRxDMA();
 800260e:	f7fe ffa1 	bl	8001554 <SIM_UART_ReInitializeRxDMA>
					send_AT_command((char*)command);
 8002612:	a844      	add	r0, sp, #272	@ 0x110
 8002614:	f7fe ff8e 	bl	8001534 <send_AT_command>
					break;
 8002618:	e7e6      	b.n	80025e8 <check_data_sent_to_server+0x1c8>
				count_check++;
 800261a:	3701      	adds	r7, #1
				snprintf(output_elapsed, 128, "Elapsed Time +QISEND: 0,0: %d\n", count_check);
 800261c:	4a18      	ldr	r2, [pc, #96]	@ (8002680 <check_data_sent_to_server+0x260>)
 800261e:	463b      	mov	r3, r7
 8002620:	2180      	movs	r1, #128	@ 0x80
 8002622:	a824      	add	r0, sp, #144	@ 0x90
 8002624:	f009 fbc6 	bl	800bdb4 <sniprintf>
				uart_transmit_string(&huart1, (uint8_t *)output_elapsed);
 8002628:	480c      	ldr	r0, [pc, #48]	@ (800265c <check_data_sent_to_server+0x23c>)
 800262a:	a924      	add	r1, sp, #144	@ 0x90
 800262c:	f002 fd84 	bl	8005138 <uart_transmit_string>
				receive_response("Check sending to server\n");
 8002630:	480f      	ldr	r0, [pc, #60]	@ (8002670 <check_data_sent_to_server+0x250>)
 8002632:	f7fe ffab 	bl	800158c <receive_response>
 8002636:	e77b      	b.n	8002530 <check_data_sent_to_server+0x110>
 8002638:	2601      	movs	r6, #1
 800263a:	e7d7      	b.n	80025ec <check_data_sent_to_server+0x1cc>
		Debug_printf("\n\n------------------QIRD ERROR SKIP QISEND0X0 ----------------------\n\n");
 800263c:	4812      	ldr	r0, [pc, #72]	@ (8002688 <check_data_sent_to_server+0x268>)
 800263e:	f002 fd8b 	bl	8005158 <Debug_printf>
	return is_sent_ok;
 8002642:	e7a4      	b.n	800258e <check_data_sent_to_server+0x16e>
 8002644:	08011e06 	.word	0x08011e06
 8002648:	08011f18 	.word	0x08011f18
 800264c:	08011ef7 	.word	0x08011ef7
 8002650:	08011f1e 	.word	0x08011f1e
 8002654:	20000ca8 	.word	0x20000ca8
 8002658:	08011f26 	.word	0x08011f26
 800265c:	20001240 	.word	0x20001240
 8002660:	08011f49 	.word	0x08011f49
 8002664:	08011e98 	.word	0x08011e98
 8002668:	08011f6a 	.word	0x08011f6a
 800266c:	080119b2 	.word	0x080119b2
 8002670:	08011de6 	.word	0x08011de6
 8002674:	08012038 	.word	0x08012038
 8002678:	08012058 	.word	0x08012058
 800267c:	08012071 	.word	0x08012071
 8002680:	08011ed8 	.word	0x08011ed8
 8002684:	08011ffa 	.word	0x08011ffa
 8002688:	0801207f 	.word	0x0801207f
 800268c:	08011e3f 	.word	0x08011e3f
 8002690:	08011e50 	.word	0x08011e50
 8002694:	08011caf 	.word	0x08011caf
 8002698:	08011fa1 	.word	0x08011fa1
 800269c:	08011fb2 	.word	0x08011fb2

080026a0 <close_connection>:


int close_connection(int connect_id){
 80026a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80026a2:	b0c1      	sub	sp, #260	@ 0x104
 80026a4:	4603      	mov	r3, r0
	uint8_t command[256];
	snprintf((char *)command, sizeof(command), "AT+QICLOSE=%d\r\n", connect_id);
 80026a6:	4a1e      	ldr	r2, [pc, #120]	@ (8002720 <close_connection+0x80>)
	send_AT_command((char*)command);
	int count_check = 0;
	while(strstr((char *) response, CHECK_RESPONSE) == NULL){
 80026a8:	4e1e      	ldr	r6, [pc, #120]	@ (8002724 <close_connection+0x84>)
 80026aa:	4d1f      	ldr	r5, [pc, #124]	@ (8002728 <close_connection+0x88>)
		receive_response("Check CLOSING to server\n");
 80026ac:	4f1f      	ldr	r7, [pc, #124]	@ (800272c <close_connection+0x8c>)
	snprintf((char *)command, sizeof(command), "AT+QICLOSE=%d\r\n", connect_id);
 80026ae:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80026b2:	4668      	mov	r0, sp
 80026b4:	f009 fb7e 	bl	800bdb4 <sniprintf>
	send_AT_command((char*)command);
 80026b8:	4668      	mov	r0, sp
 80026ba:	f7fe ff3b 	bl	8001534 <send_AT_command>
	while(strstr((char *) response, CHECK_RESPONSE) == NULL){
 80026be:	2406      	movs	r4, #6
 80026c0:	4631      	mov	r1, r6
 80026c2:	4628      	mov	r0, r5
 80026c4:	f009 fcc2 	bl	800c04c <strstr>
 80026c8:	b178      	cbz	r0, 80026ea <close_connection+0x4a>
			return 0;
		}
		osDelay(1000);
		count_check++;
	}
	receive_response("Check CLOSING to server\n");
 80026ca:	4818      	ldr	r0, [pc, #96]	@ (800272c <close_connection+0x8c>)
 80026cc:	f7fe ff5e 	bl	800158c <receive_response>
	osDelay(100);
 80026d0:	2064      	movs	r0, #100	@ 0x64
 80026d2:	f005 fe89 	bl	80083e8 <osDelay>
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 80026d6:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 80026da:	2100      	movs	r1, #0
 80026dc:	4812      	ldr	r0, [pc, #72]	@ (8002728 <close_connection+0x88>)
 80026de:	f009 fc65 	bl	800bfac <memset>
	SIM_UART_ReInitializeRxDMA();
 80026e2:	f7fe ff37 	bl	8001554 <SIM_UART_ReInitializeRxDMA>
	return 1;
 80026e6:	2001      	movs	r0, #1
 80026e8:	e010      	b.n	800270c <close_connection+0x6c>
		receive_response("Check CLOSING to server\n");
 80026ea:	4638      	mov	r0, r7
 80026ec:	f7fe ff4e 	bl	800158c <receive_response>
		if (strstr((char*)response, "ERROR") != NULL){
 80026f0:	490f      	ldr	r1, [pc, #60]	@ (8002730 <close_connection+0x90>)
 80026f2:	4628      	mov	r0, r5
 80026f4:	f009 fcaa 	bl	800c04c <strstr>
 80026f8:	b150      	cbz	r0, 8002710 <close_connection+0x70>
			memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 80026fa:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 80026fe:	2100      	movs	r1, #0
 8002700:	4809      	ldr	r0, [pc, #36]	@ (8002728 <close_connection+0x88>)
 8002702:	f009 fc53 	bl	800bfac <memset>
			SIM_UART_ReInitializeRxDMA();
 8002706:	f7fe ff25 	bl	8001554 <SIM_UART_ReInitializeRxDMA>
			return 0;
 800270a:	2000      	movs	r0, #0
}
 800270c:	b041      	add	sp, #260	@ 0x104
 800270e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if(count_check >= 5){
 8002710:	3c01      	subs	r4, #1
 8002712:	d0f2      	beq.n	80026fa <close_connection+0x5a>
		osDelay(1000);
 8002714:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002718:	f005 fe66 	bl	80083e8 <osDelay>
		count_check++;
 800271c:	e7d0      	b.n	80026c0 <close_connection+0x20>
 800271e:	bf00      	nop
 8002720:	080120c6 	.word	0x080120c6
 8002724:	080119b2 	.word	0x080119b2
 8002728:	20000ca8 	.word	0x20000ca8
 800272c:	080120d6 	.word	0x080120d6
 8002730:	08011caf 	.word	0x08011caf

08002734 <extract_time_CCLK>:


int extract_time_CCLK(uint8_t* message){
 8002734:	b510      	push	{r4, lr}
 8002736:	b0ae      	sub	sp, #184	@ 0xb8
	int year, month, day, hour, minute, second, timezone;
	uint8_t output_buffer[128];

	sscanf((char*) message, "AT+CCLK?\r\n+CCLK: \"%2d/%2d/%2d,%2d:%2d:%2d%2d\"",
 8002738:	ab0d      	add	r3, sp, #52	@ 0x34
 800273a:	9304      	str	r3, [sp, #16]
 800273c:	ab0c      	add	r3, sp, #48	@ 0x30
 800273e:	9303      	str	r3, [sp, #12]
 8002740:	ab0b      	add	r3, sp, #44	@ 0x2c
 8002742:	9302      	str	r3, [sp, #8]
 8002744:	ab0a      	add	r3, sp, #40	@ 0x28
 8002746:	9301      	str	r3, [sp, #4]
 8002748:	ab09      	add	r3, sp, #36	@ 0x24
 800274a:	9300      	str	r3, [sp, #0]
 800274c:	aa07      	add	r2, sp, #28
 800274e:	ab08      	add	r3, sp, #32
 8002750:	4925      	ldr	r1, [pc, #148]	@ (80027e8 <extract_time_CCLK+0xb4>)
 8002752:	f009 fb83 	bl	800be5c <siscanf>
						&year, &month, &day, &hour, &minute, &second, &timezone);
	hour += 1;
 8002756:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8002758:	1c5a      	adds	r2, r3, #1
	if (hour >= 24) {
 800275a:	2a17      	cmp	r2, #23
		hour -= 24;
 800275c:	bfc3      	ittte	gt
 800275e:	3b17      	subgt	r3, #23
 8002760:	930a      	strgt	r3, [sp, #40]	@ 0x28
		day += 1;
 8002762:	9b09      	ldrgt	r3, [sp, #36]	@ 0x24
	hour += 1;
 8002764:	920a      	strle	r2, [sp, #40]	@ 0x28
		day += 1;
 8002766:	bfc4      	itt	gt
 8002768:	3301      	addgt	r3, #1
 800276a:	9309      	strgt	r3, [sp, #36]	@ 0x24
		// Simplified example: Add code here to handle month/day overflow as needed
	}
	if(year < 24) return 0;
 800276c:	9b07      	ldr	r3, [sp, #28]
 800276e:	2b17      	cmp	r3, #23
 8002770:	dd37      	ble.n	80027e2 <extract_time_CCLK+0xae>
	rmc_jt.date.Yr = year;
 8002772:	4c1e      	ldr	r4, [pc, #120]	@ (80027ec <extract_time_CCLK+0xb8>)
	rmc_jt.date.Mon = month;
	rmc_jt.date.Day = day;
	rmc_jt.tim.hour = hour;
 8002774:	980a      	ldr	r0, [sp, #40]	@ 0x28
	rmc_jt.tim.min = minute;
 8002776:	990b      	ldr	r1, [sp, #44]	@ 0x2c
	rmc_jt.tim.sec = second;
 8002778:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
	rmc_jt.date.Yr = year;
 800277a:	61a3      	str	r3, [r4, #24]
	rmc_jt.date.Mon = month;
 800277c:	9b08      	ldr	r3, [sp, #32]
 800277e:	6163      	str	r3, [r4, #20]
	rmc_jt.tim.hour = hour;
 8002780:	6020      	str	r0, [r4, #0]
	rmc_jt.date.Day = day;
 8002782:	9b09      	ldr	r3, [sp, #36]	@ 0x24
	rmc_jt.tim.min = minute;
 8002784:	6061      	str	r1, [r4, #4]
	rmc_jt.tim.sec = second;
 8002786:	60a2      	str	r2, [r4, #8]
	set_time(hour, minute, second);
 8002788:	b2c9      	uxtb	r1, r1
 800278a:	b2d2      	uxtb	r2, r2
 800278c:	b2c0      	uxtb	r0, r0
	rmc_jt.date.Day = day;
 800278e:	6123      	str	r3, [r4, #16]
	set_time(hour, minute, second);
 8002790:	f000 ff2e 	bl	80035f0 <set_time>
	set_date(year, month, day);
 8002794:	f89d 2024 	ldrb.w	r2, [sp, #36]	@ 0x24
 8002798:	f89d 1020 	ldrb.w	r1, [sp, #32]
 800279c:	f89d 001c 	ldrb.w	r0, [sp, #28]
 80027a0:	f000 ff44 	bl	800362c <set_date>
	snprintf((char*)output_buffer, 128, "Adjusted time to GMT+8: 20%02d/%02d/%02d, %02d:%02d:%02d\n", rmc_jt.date.Yr, rmc_jt.date.Mon, rmc_jt.date.Day, rmc_jt.tim.hour, rmc_jt.tim.min, rmc_jt.tim.sec);
 80027a4:	68a3      	ldr	r3, [r4, #8]
 80027a6:	9304      	str	r3, [sp, #16]
 80027a8:	6863      	ldr	r3, [r4, #4]
 80027aa:	9303      	str	r3, [sp, #12]
 80027ac:	6823      	ldr	r3, [r4, #0]
 80027ae:	9302      	str	r3, [sp, #8]
 80027b0:	6923      	ldr	r3, [r4, #16]
 80027b2:	9301      	str	r3, [sp, #4]
 80027b4:	6963      	ldr	r3, [r4, #20]
 80027b6:	9300      	str	r3, [sp, #0]
 80027b8:	69a3      	ldr	r3, [r4, #24]
 80027ba:	4a0d      	ldr	r2, [pc, #52]	@ (80027f0 <extract_time_CCLK+0xbc>)
 80027bc:	2180      	movs	r1, #128	@ 0x80
 80027be:	a80e      	add	r0, sp, #56	@ 0x38
 80027c0:	f009 faf8 	bl	800bdb4 <sniprintf>
	uart_transmit_string(&huart1, (uint8_t*) "RTC Time: ");
 80027c4:	490b      	ldr	r1, [pc, #44]	@ (80027f4 <extract_time_CCLK+0xc0>)
 80027c6:	480c      	ldr	r0, [pc, #48]	@ (80027f8 <extract_time_CCLK+0xc4>)
 80027c8:	f002 fcb6 	bl	8005138 <uart_transmit_string>
	uart_transmit_string(&huart1, (uint8_t*) "\n");
 80027cc:	490b      	ldr	r1, [pc, #44]	@ (80027fc <extract_time_CCLK+0xc8>)
 80027ce:	480a      	ldr	r0, [pc, #40]	@ (80027f8 <extract_time_CCLK+0xc4>)
 80027d0:	f002 fcb2 	bl	8005138 <uart_transmit_string>
	uart_transmit_string(&huart1, output_buffer);
 80027d4:	4808      	ldr	r0, [pc, #32]	@ (80027f8 <extract_time_CCLK+0xc4>)
 80027d6:	a90e      	add	r1, sp, #56	@ 0x38
 80027d8:	f002 fcae 	bl	8005138 <uart_transmit_string>
	return 1;
 80027dc:	2001      	movs	r0, #1
}
 80027de:	b02e      	add	sp, #184	@ 0xb8
 80027e0:	bd10      	pop	{r4, pc}
	if(year < 24) return 0;
 80027e2:	2000      	movs	r0, #0
 80027e4:	e7fb      	b.n	80027de <extract_time_CCLK+0xaa>
 80027e6:	bf00      	nop
 80027e8:	080120ef 	.word	0x080120ef
 80027ec:	20000c30 	.word	0x20000c30
 80027f0:	0801211d 	.word	0x0801211d
 80027f4:	08012157 	.word	0x08012157
 80027f8:	20001240 	.word	0x20001240
 80027fc:	0801296a 	.word	0x0801296a

08002800 <getCurrentTime>:


int getCurrentTime(){
 8002800:	b570      	push	{r4, r5, r6, lr}
	int count_check = 0;
	send_AT_command("AT+CCLK?\r\n");
 8002802:	4818      	ldr	r0, [pc, #96]	@ (8002864 <getCurrentTime+0x64>)
	while(strstr((char *) response, CHECK_RESPONSE) == NULL){
 8002804:	4d18      	ldr	r5, [pc, #96]	@ (8002868 <getCurrentTime+0x68>)
			count_check = 0;
			memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
			SIM_UART_ReInitializeRxDMA();
			return 0;
		}
		receive_response("Get time\n");
 8002806:	4e19      	ldr	r6, [pc, #100]	@ (800286c <getCurrentTime+0x6c>)
	send_AT_command("AT+CCLK?\r\n");
 8002808:	f7fe fe94 	bl	8001534 <send_AT_command>
	while(strstr((char *) response, CHECK_RESPONSE) == NULL){
 800280c:	2404      	movs	r4, #4
 800280e:	4818      	ldr	r0, [pc, #96]	@ (8002870 <getCurrentTime+0x70>)
 8002810:	4629      	mov	r1, r5
 8002812:	f009 fc1b 	bl	800c04c <strstr>
 8002816:	b190      	cbz	r0, 800283e <getCurrentTime+0x3e>
		osDelay(100);
		count_check++;
	}
	receive_response("Get time\n");
 8002818:	4814      	ldr	r0, [pc, #80]	@ (800286c <getCurrentTime+0x6c>)
 800281a:	f7fe feb7 	bl	800158c <receive_response>
	int result_extract = extract_time_CCLK(response);
 800281e:	4814      	ldr	r0, [pc, #80]	@ (8002870 <getCurrentTime+0x70>)
 8002820:	f7ff ff88 	bl	8002734 <extract_time_CCLK>
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8002824:	f44f 72c0 	mov.w	r2, #384	@ 0x180
	int result_extract = extract_time_CCLK(response);
 8002828:	4604      	mov	r4, r0
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 800282a:	2100      	movs	r1, #0
 800282c:	4810      	ldr	r0, [pc, #64]	@ (8002870 <getCurrentTime+0x70>)
 800282e:	f009 fbbd 	bl	800bfac <memset>
	SIM_UART_ReInitializeRxDMA();
 8002832:	f7fe fe8f 	bl	8001554 <SIM_UART_ReInitializeRxDMA>
	if(result_extract)
 8002836:	1e20      	subs	r0, r4, #0
 8002838:	bf18      	it	ne
 800283a:	2001      	movne	r0, #1
 800283c:	e00a      	b.n	8002854 <getCurrentTime+0x54>
		if(count_check >= 3 ){
 800283e:	3c01      	subs	r4, #1
 8002840:	d109      	bne.n	8002856 <getCurrentTime+0x56>
			memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8002842:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8002846:	4621      	mov	r1, r4
 8002848:	4809      	ldr	r0, [pc, #36]	@ (8002870 <getCurrentTime+0x70>)
 800284a:	f009 fbaf 	bl	800bfac <memset>
			SIM_UART_ReInitializeRxDMA();
 800284e:	f7fe fe81 	bl	8001554 <SIM_UART_ReInitializeRxDMA>
			return 0;
 8002852:	4620      	mov	r0, r4
		return 1;
	else return 0;
}
 8002854:	bd70      	pop	{r4, r5, r6, pc}
		receive_response("Get time\n");
 8002856:	4630      	mov	r0, r6
 8002858:	f7fe fe98 	bl	800158c <receive_response>
		osDelay(100);
 800285c:	2064      	movs	r0, #100	@ 0x64
 800285e:	f005 fdc3 	bl	80083e8 <osDelay>
		count_check++;
 8002862:	e7d4      	b.n	800280e <getCurrentTime+0xe>
 8002864:	08012162 	.word	0x08012162
 8002868:	080119b2 	.word	0x080119b2
 800286c:	0801216d 	.word	0x0801216d
 8002870:	20000ca8 	.word	0x20000ca8

08002874 <receiveRMCDataWithAddrGSM>:


void receiveRMCDataWithAddrGSM(){
 8002874:	b530      	push	{r4, r5, lr}
	uint8_t output_buffer[70];
	uart_transmit_string(&huart1, (uint8_t*)"\\Inside Receiving Data at GSM\n\n");
 8002876:	495b      	ldr	r1, [pc, #364]	@ (80029e4 <receiveRMCDataWithAddrGSM+0x170>)
 8002878:	485b      	ldr	r0, [pc, #364]	@ (80029e8 <receiveRMCDataWithAddrGSM+0x174>)
	osStatus_t status = osMessageQueueGet(RMC_MailQGSMId, &receivedDataGSM, NULL, 3000); // Wait for mail
 800287a:	4d5c      	ldr	r5, [pc, #368]	@ (80029ec <receiveRMCDataWithAddrGSM+0x178>)
void receiveRMCDataWithAddrGSM(){
 800287c:	b09b      	sub	sp, #108	@ 0x6c
	uart_transmit_string(&huart1, (uint8_t*)"\\Inside Receiving Data at GSM\n\n");
 800287e:	f002 fc5b 	bl	8005138 <uart_transmit_string>
	osStatus_t status = osMessageQueueGet(RMC_MailQGSMId, &receivedDataGSM, NULL, 3000); // Wait for mail
 8002882:	485b      	ldr	r0, [pc, #364]	@ (80029f0 <receiveRMCDataWithAddrGSM+0x17c>)
 8002884:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8002888:	6800      	ldr	r0, [r0, #0]
 800288a:	2200      	movs	r2, #0
 800288c:	4629      	mov	r1, r5
 800288e:	f005 fe95 	bl	80085bc <osMessageQueueGet>
	if(status == osOK){
 8002892:	2800      	cmp	r0, #0
 8002894:	f040 8094 	bne.w	80029c0 <receiveRMCDataWithAddrGSM+0x14c>
		uart_transmit_string(&huart1, (uint8_t*)"\n\nReceived  ADDRESS Data at GSM: \n");
 8002898:	4956      	ldr	r1, [pc, #344]	@ (80029f4 <receiveRMCDataWithAddrGSM+0x180>)
 800289a:	4853      	ldr	r0, [pc, #332]	@ (80029e8 <receiveRMCDataWithAddrGSM+0x174>)
		uart_transmit_string(&huart1, (uint8_t*)"Address received from MAIL QUEUE: \n");
		current_addr_gsm = receivedDataGSM.address;
 800289c:	4c56      	ldr	r4, [pc, #344]	@ (80029f8 <receiveRMCDataWithAddrGSM+0x184>)
		uart_transmit_string(&huart1, (uint8_t*)"\n\nReceived  ADDRESS Data at GSM: \n");
 800289e:	f002 fc4b 	bl	8005138 <uart_transmit_string>
		uart_transmit_string(&huart1, (uint8_t*)"Address received from MAIL QUEUE: \n");
 80028a2:	4956      	ldr	r1, [pc, #344]	@ (80029fc <receiveRMCDataWithAddrGSM+0x188>)
 80028a4:	4850      	ldr	r0, [pc, #320]	@ (80029e8 <receiveRMCDataWithAddrGSM+0x174>)
 80028a6:	f002 fc47 	bl	8005138 <uart_transmit_string>
		current_addr_gsm = receivedDataGSM.address;
 80028aa:	6dab      	ldr	r3, [r5, #88]	@ 0x58
 80028ac:	6023      	str	r3, [r4, #0]
		if(checkAddrExistInQueue(current_addr_gsm, &result_addr_queue) == 0 || (current_addr_gsm >= end_addr_disconnect && current_addr_gsm <= (FLASH_END_ADDRESS - 0x100))){
 80028ae:	6820      	ldr	r0, [r4, #0]
 80028b0:	4953      	ldr	r1, [pc, #332]	@ (8002a00 <receiveRMCDataWithAddrGSM+0x18c>)
 80028b2:	f000 fe1f 	bl	80034f4 <checkAddrExistInQueue>
 80028b6:	b140      	cbz	r0, 80028ca <receiveRMCDataWithAddrGSM+0x56>
 80028b8:	4b52      	ldr	r3, [pc, #328]	@ (8002a04 <receiveRMCDataWithAddrGSM+0x190>)
 80028ba:	6822      	ldr	r2, [r4, #0]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	429a      	cmp	r2, r3
 80028c0:	d377      	bcc.n	80029b2 <receiveRMCDataWithAddrGSM+0x13e>
 80028c2:	6823      	ldr	r3, [r4, #0]
 80028c4:	f5b3 4f9e 	cmp.w	r3, #20224	@ 0x4f00
 80028c8:	d873      	bhi.n	80029b2 <receiveRMCDataWithAddrGSM+0x13e>
//			current_addr_gsm = receivedDataGSM->address;
			Debug_printf("Saving data to variable to send to the server\n");
 80028ca:	484f      	ldr	r0, [pc, #316]	@ (8002a08 <receiveRMCDataWithAddrGSM+0x194>)
 80028cc:	f002 fc44 	bl	8005158 <Debug_printf>
			Debug_printf("\n---------- Current data accepted at address: %08lx----------\n", current_addr_gsm);
 80028d0:	6821      	ldr	r1, [r4, #0]
 80028d2:	484e      	ldr	r0, [pc, #312]	@ (8002a0c <receiveRMCDataWithAddrGSM+0x198>)
			rmc_jt.lcation.latitude = receivedDataGSM.rmc.lcation.latitude;
 80028d4:	4c4e      	ldr	r4, [pc, #312]	@ (8002a10 <receiveRMCDataWithAddrGSM+0x19c>)
			Debug_printf("\n---------- Current data accepted at address: %08lx----------\n", current_addr_gsm);
 80028d6:	f002 fc3f 	bl	8005158 <Debug_printf>
			rmc_jt.lcation.latitude = receivedDataGSM.rmc.lcation.latitude;
 80028da:	e9d5 230e 	ldrd	r2, r3, [r5, #56]	@ 0x38
 80028de:	e9c4 230e 	strd	r2, r3, [r4, #56]	@ 0x38
			rmc_jt.lcation.longitude = receivedDataGSM.rmc.lcation.longitude;
 80028e2:	e9d5 2312 	ldrd	r2, r3, [r5, #72]	@ 0x48
 80028e6:	e9c4 2312 	strd	r2, r3, [r4, #72]	@ 0x48
			rmc_jt.speed = receivedDataGSM.rmc.speed;
 80028ea:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 80028ec:	62a3      	str	r3, [r4, #40]	@ 0x28
			rmc_jt.course = receivedDataGSM.rmc.course;
 80028ee:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 80028f0:	62e3      	str	r3, [r4, #44]	@ 0x2c
			rmc_jt.lcation.NS = receivedDataGSM.rmc.lcation.NS;
 80028f2:	f895 3040 	ldrb.w	r3, [r5, #64]	@ 0x40
 80028f6:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
			rmc_jt.lcation.EW = receivedDataGSM.rmc.lcation.EW;
 80028fa:	f895 3050 	ldrb.w	r3, [r5, #80]	@ 0x50
 80028fe:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
			rmc_jt.isValid = receivedDataGSM.rmc.isValid;
 8002902:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8002904:	6323      	str	r3, [r4, #48]	@ 0x30
			rmc_jt.date.Yr = receivedDataGSM.rmc.date.Yr;
 8002906:	69ab      	ldr	r3, [r5, #24]
 8002908:	61a3      	str	r3, [r4, #24]
			rmc_jt.date.Mon = receivedDataGSM.rmc.date.Mon;
 800290a:	696b      	ldr	r3, [r5, #20]
			rmc_jt.date.Day = receivedDataGSM.rmc.date.Day;
			rmc_jt.tim.hour = receivedDataGSM.rmc.tim.hour;
			rmc_jt.tim.min = receivedDataGSM.rmc.tim.min;
 800290c:	686a      	ldr	r2, [r5, #4]
			rmc_jt.tim.sec = receivedDataGSM.rmc.tim.sec;
 800290e:	68a9      	ldr	r1, [r5, #8]
			rmc_jt.date.Mon = receivedDataGSM.rmc.date.Mon;
 8002910:	6163      	str	r3, [r4, #20]
			rmc_jt.date.Day = receivedDataGSM.rmc.date.Day;
 8002912:	692b      	ldr	r3, [r5, #16]
 8002914:	6123      	str	r3, [r4, #16]
			rmc_jt.tim.hour = receivedDataGSM.rmc.tim.hour;
 8002916:	682b      	ldr	r3, [r5, #0]
 8002918:	6023      	str	r3, [r4, #0]
			rmc_jt.tim.min = receivedDataGSM.rmc.tim.min;
 800291a:	6062      	str	r2, [r4, #4]
			rmc_jt.tim.sec = receivedDataGSM.rmc.tim.sec;
 800291c:	60a1      	str	r1, [r4, #8]

			snprintf((char *)output_buffer, sizeof(output_buffer), "Time SENDING TO SERVER at GSM: %d:%d:%d\n", rmc_jt.tim.hour, rmc_jt.tim.min, rmc_jt.tim.sec);
 800291e:	a808      	add	r0, sp, #32
 8002920:	e9cd 2100 	strd	r2, r1, [sp]
 8002924:	4a3b      	ldr	r2, [pc, #236]	@ (8002a14 <receiveRMCDataWithAddrGSM+0x1a0>)
 8002926:	2146      	movs	r1, #70	@ 0x46
 8002928:	f009 fa44 	bl	800bdb4 <sniprintf>
			uart_transmit_string(&huart1, output_buffer);
 800292c:	482e      	ldr	r0, [pc, #184]	@ (80029e8 <receiveRMCDataWithAddrGSM+0x174>)
 800292e:	a908      	add	r1, sp, #32
 8002930:	f002 fc02 	bl	8005138 <uart_transmit_string>

			snprintf((char *)output_buffer, sizeof(output_buffer), "Date SENDING TO SERVER at GSM: %d/%d/%d\n", rmc_jt.date.Day, rmc_jt.date.Mon, rmc_jt.date.Yr);
 8002934:	69a3      	ldr	r3, [r4, #24]
 8002936:	9301      	str	r3, [sp, #4]
 8002938:	6963      	ldr	r3, [r4, #20]
 800293a:	9300      	str	r3, [sp, #0]
 800293c:	6923      	ldr	r3, [r4, #16]
 800293e:	4a36      	ldr	r2, [pc, #216]	@ (8002a18 <receiveRMCDataWithAddrGSM+0x1a4>)
 8002940:	2146      	movs	r1, #70	@ 0x46
 8002942:	a808      	add	r0, sp, #32
 8002944:	f009 fa36 	bl	800bdb4 <sniprintf>
			uart_transmit_string(&huart1, output_buffer);
 8002948:	4827      	ldr	r0, [pc, #156]	@ (80029e8 <receiveRMCDataWithAddrGSM+0x174>)
 800294a:	a908      	add	r1, sp, #32
 800294c:	f002 fbf4 	bl	8005138 <uart_transmit_string>

			snprintf((char *)output_buffer, sizeof(output_buffer), "Location SENDING TO SERVER at GSM: %.6f %c, %.6f %c\n", rmc_jt.lcation.latitude, rmc_jt.lcation.NS, rmc_jt.lcation.longitude, receivedDataGSM.rmc.lcation.EW);
 8002950:	f895 3050 	ldrb.w	r3, [r5, #80]	@ 0x50
 8002954:	9306      	str	r3, [sp, #24]
 8002956:	e9d4 2312 	ldrd	r2, r3, [r4, #72]	@ 0x48
 800295a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800295e:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 8002962:	9302      	str	r3, [sp, #8]
 8002964:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	@ 0x38
 8002968:	2146      	movs	r1, #70	@ 0x46
 800296a:	e9cd 2300 	strd	r2, r3, [sp]
 800296e:	a808      	add	r0, sp, #32
 8002970:	4a2a      	ldr	r2, [pc, #168]	@ (8002a1c <receiveRMCDataWithAddrGSM+0x1a8>)
 8002972:	f009 fa1f 	bl	800bdb4 <sniprintf>
			uart_transmit_string(&huart1, output_buffer);
 8002976:	481c      	ldr	r0, [pc, #112]	@ (80029e8 <receiveRMCDataWithAddrGSM+0x174>)
 8002978:	a908      	add	r1, sp, #32
 800297a:	f002 fbdd 	bl	8005138 <uart_transmit_string>

			snprintf((char *)output_buffer, sizeof(output_buffer),"Speed SENDING TO SERVER at GSM: %.2f, Course: %.2f, Valid: %d\n", rmc_jt.speed, rmc_jt.course, rmc_jt.isValid);
 800297e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8002980:	9304      	str	r3, [sp, #16]
 8002982:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8002984:	f7fd fdf0 	bl	8000568 <__aeabi_f2d>
 8002988:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800298c:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 800298e:	f7fd fdeb 	bl	8000568 <__aeabi_f2d>
 8002992:	4a23      	ldr	r2, [pc, #140]	@ (8002a20 <receiveRMCDataWithAddrGSM+0x1ac>)
 8002994:	e9cd 0100 	strd	r0, r1, [sp]
 8002998:	2146      	movs	r1, #70	@ 0x46
 800299a:	a808      	add	r0, sp, #32
 800299c:	f009 fa0a 	bl	800bdb4 <sniprintf>
			uart_transmit_string(&huart1, output_buffer);
 80029a0:	4811      	ldr	r0, [pc, #68]	@ (80029e8 <receiveRMCDataWithAddrGSM+0x174>)
 80029a2:	a908      	add	r1, sp, #32
 80029a4:	f002 fbc8 	bl	8005138 <uart_transmit_string>

			received_RMC = 1;
 80029a8:	4b1e      	ldr	r3, [pc, #120]	@ (8002a24 <receiveRMCDataWithAddrGSM+0x1b0>)
 80029aa:	2201      	movs	r2, #1
 80029ac:	601a      	str	r2, [r3, #0]
		if(is_disconnect == 0 && is_using_flash == 1 && is_keep_up == 0) {
			Debug_printf("----------------------KEEP UP WITH THE MOST CURRENT DATA ---------------------------");
			is_keep_up = 1;
		}
	}
}
 80029ae:	b01b      	add	sp, #108	@ 0x6c
 80029b0:	bd30      	pop	{r4, r5, pc}
			Debug_printf("\n----------------Have sent data in this address successfully already: %08lx ----------------\n", receivedDataGSM.address);
 80029b2:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 80029b4:	481c      	ldr	r0, [pc, #112]	@ (8002a28 <receiveRMCDataWithAddrGSM+0x1b4>)
}
 80029b6:	b01b      	add	sp, #108	@ 0x6c
 80029b8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
			Debug_printf("\n----------------Have sent data in this address successfully already: %08lx ----------------\n", receivedDataGSM.address);
 80029bc:	f002 bbcc 	b.w	8005158 <Debug_printf>
		Debug_printf("There is no address mail left\n");
 80029c0:	481a      	ldr	r0, [pc, #104]	@ (8002a2c <receiveRMCDataWithAddrGSM+0x1b8>)
 80029c2:	f002 fbc9 	bl	8005158 <Debug_printf>
		if(is_disconnect == 0 && is_using_flash == 1 && is_keep_up == 0) {
 80029c6:	4b1a      	ldr	r3, [pc, #104]	@ (8002a30 <receiveRMCDataWithAddrGSM+0x1bc>)
 80029c8:	681d      	ldr	r5, [r3, #0]
 80029ca:	2d01      	cmp	r5, #1
 80029cc:	d1ef      	bne.n	80029ae <receiveRMCDataWithAddrGSM+0x13a>
 80029ce:	4c19      	ldr	r4, [pc, #100]	@ (8002a34 <receiveRMCDataWithAddrGSM+0x1c0>)
 80029d0:	4b19      	ldr	r3, [pc, #100]	@ (8002a38 <receiveRMCDataWithAddrGSM+0x1c4>)
 80029d2:	6822      	ldr	r2, [r4, #0]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4313      	orrs	r3, r2
 80029d8:	d1e9      	bne.n	80029ae <receiveRMCDataWithAddrGSM+0x13a>
			Debug_printf("----------------------KEEP UP WITH THE MOST CURRENT DATA ---------------------------");
 80029da:	4818      	ldr	r0, [pc, #96]	@ (8002a3c <receiveRMCDataWithAddrGSM+0x1c8>)
 80029dc:	f002 fbbc 	bl	8005158 <Debug_printf>
			is_keep_up = 1;
 80029e0:	6025      	str	r5, [r4, #0]
}
 80029e2:	e7e4      	b.n	80029ae <receiveRMCDataWithAddrGSM+0x13a>
 80029e4:	08012177 	.word	0x08012177
 80029e8:	20001240 	.word	0x20001240
 80029ec:	20000bc8 	.word	0x20000bc8
 80029f0:	200027c4 	.word	0x200027c4
 80029f4:	08012197 	.word	0x08012197
 80029f8:	20000e2c 	.word	0x20000e2c
 80029fc:	080121ba 	.word	0x080121ba
 8002a00:	20000e4c 	.word	0x20000e4c
 8002a04:	20000e28 	.word	0x20000e28
 8002a08:	080121de 	.word	0x080121de
 8002a0c:	0801220d 	.word	0x0801220d
 8002a10:	20000c30 	.word	0x20000c30
 8002a14:	0801224c 	.word	0x0801224c
 8002a18:	08012275 	.word	0x08012275
 8002a1c:	0801229e 	.word	0x0801229e
 8002a20:	080122d3 	.word	0x080122d3
 8002a24:	20000c94 	.word	0x20000c94
 8002a28:	08012312 	.word	0x08012312
 8002a2c:	08012370 	.word	0x08012370
 8002a30:	20000e44 	.word	0x20000e44
 8002a34:	20000e40 	.word	0x20000e40
 8002a38:	20000e48 	.word	0x20000e48
 8002a3c:	0801238f 	.word	0x0801238f

08002a40 <processUploadDataToServer>:

int processUploadDataToServer(JT808_LocationInfoReport *location_info){
 8002a40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	int count_resend = 0;
	int count_check = 0;
	int result_send_location = 1;
	while(count_resend < 3){
		uint32_t freeStack1 = osThreadGetStackSpace(GSMHandle);
 8002a44:	4f39      	ldr	r7, [pc, #228]	@ (8002b2c <processUploadDataToServer+0xec>)
		Debug_printf("\n\n --------------Thread GSM %p is running low on stack: %04d bytes remaining----------\n\n",GSMHandle, freeStack1);
 8002a46:	f8df 8110 	ldr.w	r8, [pc, #272]	@ 8002b58 <processUploadDataToServer+0x118>
		Debug_printf(" \n\n--------------------------- GOING TO SEND DATA TO SERVER: RESEND COUNT %d -----------------------\n\n", count_resend);
 8002a4a:	f8df 9110 	ldr.w	r9, [pc, #272]	@ 8002b5c <processUploadDataToServer+0x11c>
int processUploadDataToServer(JT808_LocationInfoReport *location_info){
 8002a4e:	4606      	mov	r6, r0
 8002a50:	2401      	movs	r4, #1
		uint32_t freeStack1 = osThreadGetStackSpace(GSMHandle);
 8002a52:	6838      	ldr	r0, [r7, #0]
 8002a54:	f005 fcb4 	bl	80083c0 <osThreadGetStackSpace>
		Debug_printf("\n\n --------------Thread GSM %p is running low on stack: %04d bytes remaining----------\n\n",GSMHandle, freeStack1);
 8002a58:	6839      	ldr	r1, [r7, #0]
		uint32_t freeStack1 = osThreadGetStackSpace(GSMHandle);
 8002a5a:	4602      	mov	r2, r0
		Debug_printf("\n\n --------------Thread GSM %p is running low on stack: %04d bytes remaining----------\n\n",GSMHandle, freeStack1);
 8002a5c:	4640      	mov	r0, r8
 8002a5e:	f002 fb7b 	bl	8005158 <Debug_printf>
		Debug_printf(" \n\n--------------------------- GOING TO SEND DATA TO SERVER: RESEND COUNT %d -----------------------\n\n", count_resend);
 8002a62:	1e61      	subs	r1, r4, #1
 8002a64:	4648      	mov	r0, r9
 8002a66:	f002 fb77 	bl	8005158 <Debug_printf>
		result_send_location = send_location_to_server(0, location_info);
 8002a6a:	4631      	mov	r1, r6
 8002a6c:	2000      	movs	r0, #0
 8002a6e:	f7ff fc53 	bl	8002318 <send_location_to_server>

		if(result_send_location){
 8002a72:	4605      	mov	r5, r0
 8002a74:	2800      	cmp	r0, #0
 8002a76:	d042      	beq.n	8002afe <processUploadDataToServer+0xbe>
			uart_transmit_string(&huart1, (uint8_t *)"Inside process: Check Sending Location Report\r\n");
 8002a78:	492d      	ldr	r1, [pc, #180]	@ (8002b30 <processUploadDataToServer+0xf0>)
 8002a7a:	482e      	ldr	r0, [pc, #184]	@ (8002b34 <processUploadDataToServer+0xf4>)
 8002a7c:	f002 fb5c 	bl	8005138 <uart_transmit_string>
			int result_check = check_data_sent_to_server(0);
 8002a80:	2000      	movs	r0, #0
 8002a82:	f7ff fccd 	bl	8002420 <check_data_sent_to_server>
			if(result_check){
 8002a86:	4605      	mov	r5, r0
 8002a88:	b170      	cbz	r0, 8002aa8 <processUploadDataToServer+0x68>
				uart_transmit_string(&huart1, (uint8_t *)"Sending SUCCESS\n");
 8002a8a:	492b      	ldr	r1, [pc, #172]	@ (8002b38 <processUploadDataToServer+0xf8>)
 8002a8c:	4829      	ldr	r0, [pc, #164]	@ (8002b34 <processUploadDataToServer+0xf4>)
 8002a8e:	f002 fb53 	bl	8005138 <uart_transmit_string>
//				receive_response("Check location report\n");
				memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8002a92:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8002a96:	2100      	movs	r1, #0
 8002a98:	4828      	ldr	r0, [pc, #160]	@ (8002b3c <processUploadDataToServer+0xfc>)
 8002a9a:	f009 fa87 	bl	800bfac <memset>
				SIM_UART_ReInitializeRxDMA();
 8002a9e:	f7fe fd59 	bl	8001554 <SIM_UART_ReInitializeRxDMA>
				return 1;
 8002aa2:	2001      	movs	r0, #1
	}
	receive_response("First check SIM MODULE\n");
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
	SIM_UART_ReInitializeRxDMA();
	return 0;
}
 8002aa4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				uart_transmit_string(&huart1, (uint8_t *)"Sending ERROR (CHECKING SENDING RESULT ERROR)\n");
 8002aa8:	4925      	ldr	r1, [pc, #148]	@ (8002b40 <processUploadDataToServer+0x100>)
			uart_transmit_string(&huart1, (uint8_t *)"\n\n---------------------  Sending ERROR (SENDING ERROR)  -------------------\n\n");
 8002aaa:	4822      	ldr	r0, [pc, #136]	@ (8002b34 <processUploadDataToServer+0xf4>)
 8002aac:	f002 fb44 	bl	8005138 <uart_transmit_string>
			memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8002ab0:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8002ab4:	4629      	mov	r1, r5
 8002ab6:	4821      	ldr	r0, [pc, #132]	@ (8002b3c <processUploadDataToServer+0xfc>)
 8002ab8:	f009 fa78 	bl	800bfac <memset>
	while(count_resend < 3){
 8002abc:	3401      	adds	r4, #1
			SIM_UART_ReInitializeRxDMA();
 8002abe:	f7fe fd49 	bl	8001554 <SIM_UART_ReInitializeRxDMA>
		osDelay(200);
 8002ac2:	20c8      	movs	r0, #200	@ 0xc8
 8002ac4:	f005 fc90 	bl	80083e8 <osDelay>
	while(count_resend < 3){
 8002ac8:	2c04      	cmp	r4, #4
 8002aca:	d1c2      	bne.n	8002a52 <processUploadDataToServer+0x12>
	send_AT_command(FIRST_CHECK);
 8002acc:	481d      	ldr	r0, [pc, #116]	@ (8002b44 <processUploadDataToServer+0x104>)
	while(strstr((char *) response, CHECK_RESPONSE) != NULL){
 8002ace:	4e1e      	ldr	r6, [pc, #120]	@ (8002b48 <processUploadDataToServer+0x108>)
		receive_response("First check SIM MODULE\n");
 8002ad0:	4f1e      	ldr	r7, [pc, #120]	@ (8002b4c <processUploadDataToServer+0x10c>)
	send_AT_command(FIRST_CHECK);
 8002ad2:	f7fe fd2f 	bl	8001534 <send_AT_command>
	while(strstr((char *) response, CHECK_RESPONSE) != NULL){
 8002ad6:	250c      	movs	r5, #12
 8002ad8:	4818      	ldr	r0, [pc, #96]	@ (8002b3c <processUploadDataToServer+0xfc>)
 8002ada:	4631      	mov	r1, r6
 8002adc:	f009 fab6 	bl	800c04c <strstr>
 8002ae0:	4604      	mov	r4, r0
 8002ae2:	b970      	cbnz	r0, 8002b02 <processUploadDataToServer+0xc2>
	receive_response("First check SIM MODULE\n");
 8002ae4:	4819      	ldr	r0, [pc, #100]	@ (8002b4c <processUploadDataToServer+0x10c>)
 8002ae6:	f7fe fd51 	bl	800158c <receive_response>
	memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8002aea:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8002aee:	4621      	mov	r1, r4
 8002af0:	4812      	ldr	r0, [pc, #72]	@ (8002b3c <processUploadDataToServer+0xfc>)
 8002af2:	f009 fa5b 	bl	800bfac <memset>
	SIM_UART_ReInitializeRxDMA();
 8002af6:	f7fe fd2d 	bl	8001554 <SIM_UART_ReInitializeRxDMA>
	return 0;
 8002afa:	4620      	mov	r0, r4
 8002afc:	e7d2      	b.n	8002aa4 <processUploadDataToServer+0x64>
			uart_transmit_string(&huart1, (uint8_t *)"\n\n---------------------  Sending ERROR (SENDING ERROR)  -------------------\n\n");
 8002afe:	4914      	ldr	r1, [pc, #80]	@ (8002b50 <processUploadDataToServer+0x110>)
 8002b00:	e7d3      	b.n	8002aaa <processUploadDataToServer+0x6a>
		receive_response("First check SIM MODULE\n");
 8002b02:	4638      	mov	r0, r7
 8002b04:	f7fe fd42 	bl	800158c <receive_response>
		if(count_check > 10){
 8002b08:	3d01      	subs	r5, #1
 8002b0a:	d10a      	bne.n	8002b22 <processUploadDataToServer+0xe2>
			Debug_printf("SIM MODULE BUG");
 8002b0c:	4811      	ldr	r0, [pc, #68]	@ (8002b54 <processUploadDataToServer+0x114>)
 8002b0e:	f002 fb23 	bl	8005158 <Debug_printf>
			memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8002b12:	480a      	ldr	r0, [pc, #40]	@ (8002b3c <processUploadDataToServer+0xfc>)
 8002b14:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8002b18:	4629      	mov	r1, r5
 8002b1a:	f009 fa47 	bl	800bfac <memset>
			return 2;
 8002b1e:	2002      	movs	r0, #2
 8002b20:	e7c0      	b.n	8002aa4 <processUploadDataToServer+0x64>
		osDelay(100);
 8002b22:	2064      	movs	r0, #100	@ 0x64
 8002b24:	f005 fc60 	bl	80083e8 <osDelay>
 8002b28:	e7d6      	b.n	8002ad8 <processUploadDataToServer+0x98>
 8002b2a:	bf00      	nop
 8002b2c:	20001058 	.word	0x20001058
 8002b30:	080124a4 	.word	0x080124a4
 8002b34:	20001240 	.word	0x20001240
 8002b38:	080124d4 	.word	0x080124d4
 8002b3c:	20000ca8 	.word	0x20000ca8
 8002b40:	080124e5 	.word	0x080124e5
 8002b44:	08011995 	.word	0x08011995
 8002b48:	080119b2 	.word	0x080119b2
 8002b4c:	0801199a 	.word	0x0801199a
 8002b50:	08012514 	.word	0x08012514
 8002b54:	08012562 	.word	0x08012562
 8002b58:	080123e4 	.word	0x080123e4
 8002b5c:	0801243d 	.word	0x0801243d

08002b60 <StartGSM>:

void StartGSM(void const * argument)
{
 8002b60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  /* USER CODE BEGIN StartGSM */
	Debug_printf("------------------------ Starting GSM: Pushing data to Server ------------------------");
 8002b64:	487a      	ldr	r0, [pc, #488]	@ (8002d50 <StartGSM+0x1f0>)
 8002b66:	4c7b      	ldr	r4, [pc, #492]	@ (8002d54 <StartGSM+0x1f4>)
					if(received_RMC == 1){
						received_RMC = 0;
						uart_transmit_string(&huart1, (uint8_t *)"RECEIVED RMC DATA AT GSM MODULE\n");
						save_rmc_to_location_info(&location_info);
						Debug_printf("Current stack address to be sent to the server: \n");
						Debug_printf("Address going to send to server at GSM:(STACK FROM MAIL QUEUE)  %08lx\n", current_addr_gsm);
 8002b68:	4e7b      	ldr	r6, [pc, #492]	@ (8002d58 <StartGSM+0x1f8>)
{
 8002b6a:	b0a1      	sub	sp, #132	@ 0x84
	Debug_printf("------------------------ Starting GSM: Pushing data to Server ------------------------");
 8002b6c:	f002 faf4 	bl	8005158 <Debug_printf>
	RingBufferDmaU8_initUSARTRx(&SIMRxDMARing, &huart3, response, SIM_RESPONSE_MAX_SIZE);
 8002b70:	4a7a      	ldr	r2, [pc, #488]	@ (8002d5c <StartGSM+0x1fc>)
 8002b72:	497b      	ldr	r1, [pc, #492]	@ (8002d60 <StartGSM+0x200>)
 8002b74:	487b      	ldr	r0, [pc, #492]	@ (8002d64 <StartGSM+0x204>)
 8002b76:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8002b7a:	f000 fd2b 	bl	80035d4 <RingBufferDmaU8_initUSARTRx>
	JT808_TerminalRegistration reg_msg = create_terminal_registration();
 8002b7e:	4668      	mov	r0, sp
 8002b80:	f7fe fc86 	bl	8001490 <create_terminal_registration>
	JT808_LocationInfoReport location_info = create_location_info_report();
 8002b84:	a80f      	add	r0, sp, #60	@ 0x3c
 8002b86:	f7fe fca9 	bl	80014dc <create_location_info_report>
	initQueue_GSM(&result_addr_queue);
 8002b8a:	4877      	ldr	r0, [pc, #476]	@ (8002d68 <StartGSM+0x208>)
 8002b8c:	f000 fc46 	bl	800341c <initQueue_GSM>
	init_SIM_module();
 8002b90:	f7fe fd22 	bl	80015d8 <init_SIM_module>
	int is_set_uniqueID = 0;
 8002b94:	2500      	movs	r5, #0
	int process = 0;
 8002b96:	462f      	mov	r7, r5
		osDelay(300);
 8002b98:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8002b9c:	f005 fc24 	bl	80083e8 <osDelay>
		switch(process){
 8002ba0:	2f08      	cmp	r7, #8
 8002ba2:	d868      	bhi.n	8002c76 <StartGSM+0x116>
 8002ba4:	e8df f017 	tbh	[pc, r7, lsl #1]
 8002ba8:	00210009 	.word	0x00210009
 8002bac:	0075004f 	.word	0x0075004f
 8002bb0:	00b800a4 	.word	0x00b800a4
 8002bb4:	010200c5 	.word	0x010200c5
 8002bb8:	040c      	.short	0x040c
				uart_transmit_string(&huart1, (uint8_t *)"First CHECK\r\n");
 8002bba:	496c      	ldr	r1, [pc, #432]	@ (8002d6c <StartGSM+0x20c>)
 8002bbc:	486c      	ldr	r0, [pc, #432]	@ (8002d70 <StartGSM+0x210>)
 8002bbe:	f002 fabb 	bl	8005138 <uart_transmit_string>
				isReady = first_check_SIM();
 8002bc2:	f7fe fddb 	bl	800177c <first_check_SIM>
				if(isReady) process++;
 8002bc6:	4601      	mov	r1, r0
 8002bc8:	2800      	cmp	r0, #0
 8002bca:	f040 808f 	bne.w	8002cec <StartGSM+0x18c>
					memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8002bce:	f44f 72c0 	mov.w	r2, #384	@ 0x180
						uart_transmit_string(&huart1,(uint8_t*) "REOPEN CONNECTION TO SERVER\n");
						process = 4;
					}
				}
				else{
					memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8002bd2:	4862      	ldr	r0, [pc, #392]	@ (8002d5c <StartGSM+0x1fc>)
 8002bd4:	f009 f9ea 	bl	800bfac <memset>
					SIM_UART_ReInitializeRxDMA();
 8002bd8:	f7fe fcbc 	bl	8001554 <SIM_UART_ReInitializeRxDMA>
					uart_transmit_string(&huart1,(uint8_t*) "Rebooting SIM module\n");
 8002bdc:	4965      	ldr	r1, [pc, #404]	@ (8002d74 <StartGSM+0x214>)
 8002bde:	4864      	ldr	r0, [pc, #400]	@ (8002d70 <StartGSM+0x210>)
 8002be0:	f002 faaa 	bl	8005138 <uart_transmit_string>
					reboot_SIM_module();
 8002be4:	f7fe fd12 	bl	800160c <reboot_SIM_module>
					process = 0;
 8002be8:	e02b      	b.n	8002c42 <StartGSM+0xe2>
				uart_transmit_string(&huart1, (uint8_t *)"Check EVERYTHING READY\r\n");
 8002bea:	4963      	ldr	r1, [pc, #396]	@ (8002d78 <StartGSM+0x218>)
 8002bec:	4860      	ldr	r0, [pc, #384]	@ (8002d70 <StartGSM+0x210>)
 8002bee:	f002 faa3 	bl	8005138 <uart_transmit_string>
				osDelay(100);
 8002bf2:	2064      	movs	r0, #100	@ 0x64
 8002bf4:	f005 fbf8 	bl	80083e8 <osDelay>
				int check_SIM = check_SIM_ready();
 8002bf8:	f7fe fed6 	bl	80019a8 <check_SIM_ready>
 8002bfc:	4680      	mov	r8, r0
				if(is_set_uniqueID == 0){
 8002bfe:	b955      	cbnz	r5, 8002c16 <StartGSM+0xb6>
					memcpy(reg_msg.terminal_phone_number, terminal_phone_number, sizeof(terminal_phone_number));
 8002c00:	4b5e      	ldr	r3, [pc, #376]	@ (8002d7c <StartGSM+0x21c>)
 8002c02:	681a      	ldr	r2, [r3, #0]
 8002c04:	889b      	ldrh	r3, [r3, #4]
 8002c06:	f8cd 2005 	str.w	r2, [sp, #5]
 8002c0a:	f8ad 3009 	strh.w	r3, [sp, #9]
					memcpy(location_info.terminal_phone_number, terminal_phone_number, sizeof(terminal_phone_number));
 8002c0e:	f8cd 2041 	str.w	r2, [sp, #65]	@ 0x41
 8002c12:	f8ad 3045 	strh.w	r3, [sp, #69]	@ 0x45
				osDelay(150);
 8002c16:	2096      	movs	r0, #150	@ 0x96
 8002c18:	f005 fbe6 	bl	80083e8 <osDelay>
				if (check_SIM == 0){
 8002c1c:	f1b8 0f00 	cmp.w	r8, #0
 8002c20:	f040 83eb 	bne.w	80033fa <StartGSM+0x89a>
					memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8002c24:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8002c28:	4641      	mov	r1, r8
 8002c2a:	484c      	ldr	r0, [pc, #304]	@ (8002d5c <StartGSM+0x1fc>)
 8002c2c:	f009 f9be 	bl	800bfac <memset>
					SIM_UART_ReInitializeRxDMA();
 8002c30:	f7fe fc90 	bl	8001554 <SIM_UART_ReInitializeRxDMA>
					uart_transmit_string(&huart1,(uint8_t*) "Rebooting SIM module");
 8002c34:	4952      	ldr	r1, [pc, #328]	@ (8002d80 <StartGSM+0x220>)
 8002c36:	484e      	ldr	r0, [pc, #312]	@ (8002d70 <StartGSM+0x210>)
 8002c38:	f002 fa7e 	bl	8005138 <uart_transmit_string>
					reboot_SIM_module();
 8002c3c:	f7fe fce6 	bl	800160c <reboot_SIM_module>
					process = 0;
 8002c40:	463d      	mov	r5, r7
									process++;
 8002c42:	2700      	movs	r7, #0
 8002c44:	e017      	b.n	8002c76 <StartGSM+0x116>
				uart_transmit_string(&huart1, (uint8_t *)"Inside process: Configure PDP context\r\n");
 8002c46:	494f      	ldr	r1, [pc, #316]	@ (8002d84 <StartGSM+0x224>)
 8002c48:	4849      	ldr	r0, [pc, #292]	@ (8002d70 <StartGSM+0x210>)
 8002c4a:	f002 fa75 	bl	8005138 <uart_transmit_string>
				memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8002c4e:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8002c52:	2100      	movs	r1, #0
 8002c54:	4841      	ldr	r0, [pc, #260]	@ (8002d5c <StartGSM+0x1fc>)
 8002c56:	f009 f9a9 	bl	800bfac <memset>
				SIM_UART_ReInitializeRxDMA();
 8002c5a:	f7fe fc7b 	bl	8001554 <SIM_UART_ReInitializeRxDMA>
				configure_APN(1);
 8002c5e:	2001      	movs	r0, #1
 8002c60:	f7ff f81e 	bl	8001ca0 <configure_APN>
				memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8002c64:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8002c68:	2100      	movs	r1, #0
 8002c6a:	483c      	ldr	r0, [pc, #240]	@ (8002d5c <StartGSM+0x1fc>)
 8002c6c:	f009 f99e 	bl	800bfac <memset>
				SIM_UART_ReInitializeRxDMA();
 8002c70:	f7fe fc70 	bl	8001554 <SIM_UART_ReInitializeRxDMA>
				process++;
 8002c74:	2703      	movs	r7, #3
				}
				break;
		}
		if(is_in_sending == 0 && is_disconnect == 1){
 8002c76:	6823      	ldr	r3, [r4, #0]
 8002c78:	b92b      	cbnz	r3, 8002c86 <StartGSM+0x126>
 8002c7a:	4b43      	ldr	r3, [pc, #268]	@ (8002d88 <StartGSM+0x228>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	2b01      	cmp	r3, #1
 8002c80:	d18a      	bne.n	8002b98 <StartGSM+0x38>
			receiveRMCDataWithAddrGSM();
 8002c82:	f7ff fdf7 	bl	8002874 <receiveRMCDataWithAddrGSM>
		}
		if(is_in_sending == 1){
 8002c86:	6823      	ldr	r3, [r4, #0]
 8002c88:	2b01      	cmp	r3, #1
 8002c8a:	d185      	bne.n	8002b98 <StartGSM+0x38>
			is_in_sending = 0;
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	6023      	str	r3, [r4, #0]
 8002c90:	e782      	b.n	8002b98 <StartGSM+0x38>
				uart_transmit_string(&huart1, (uint8_t *)"Inside process: Activate PDP context\r\n");
 8002c92:	493e      	ldr	r1, [pc, #248]	@ (8002d8c <StartGSM+0x22c>)
 8002c94:	4836      	ldr	r0, [pc, #216]	@ (8002d70 <StartGSM+0x210>)
 8002c96:	f002 fa4f 	bl	8005138 <uart_transmit_string>
				int receive_activate = activate_context(1);
 8002c9a:	2001      	movs	r0, #1
 8002c9c:	f7ff f852 	bl	8001d44 <activate_context>
				if(receive_activate){
 8002ca0:	4680      	mov	r8, r0
 8002ca2:	b190      	cbz	r0, 8002cca <StartGSM+0x16a>
					getCurrentTime();
 8002ca4:	f7ff fdac 	bl	8002800 <getCurrentTime>
					uart_transmit_string(&huart1, (uint8_t*) "Activate PDP context successfully\n");
 8002ca8:	4939      	ldr	r1, [pc, #228]	@ (8002d90 <StartGSM+0x230>)
 8002caa:	4831      	ldr	r0, [pc, #196]	@ (8002d70 <StartGSM+0x210>)
 8002cac:	f002 fa44 	bl	8005138 <uart_transmit_string>
					osDelay(200);
 8002cb0:	20c8      	movs	r0, #200	@ 0xc8
 8002cb2:	f005 fb99 	bl	80083e8 <osDelay>
					memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8002cb6:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8002cba:	2100      	movs	r1, #0
 8002cbc:	4827      	ldr	r0, [pc, #156]	@ (8002d5c <StartGSM+0x1fc>)
 8002cbe:	f009 f975 	bl	800bfac <memset>
					SIM_UART_ReInitializeRxDMA();
 8002cc2:	f7fe fc47 	bl	8001554 <SIM_UART_ReInitializeRxDMA>
					process++;
 8002cc6:	2704      	movs	r7, #4
 8002cc8:	e7d5      	b.n	8002c76 <StartGSM+0x116>
					uart_transmit_string(&huart1, (uint8_t*) "Activate PDP Context Failed\n");
 8002cca:	4932      	ldr	r1, [pc, #200]	@ (8002d94 <StartGSM+0x234>)
					uart_transmit_string(&huart1, (uint8_t*) "Connect to Server Failed\n");
 8002ccc:	4828      	ldr	r0, [pc, #160]	@ (8002d70 <StartGSM+0x210>)
 8002cce:	f002 fa33 	bl	8005138 <uart_transmit_string>
					int receive_deactivate = deactivate_context(1);
 8002cd2:	2001      	movs	r0, #1
 8002cd4:	f7ff f8a0 	bl	8001e18 <deactivate_context>
					memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8002cd8:	f44f 72c0 	mov.w	r2, #384	@ 0x180
					int receive_deactivate = deactivate_context(1);
 8002cdc:	4607      	mov	r7, r0
					memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8002cde:	4641      	mov	r1, r8
 8002ce0:	481e      	ldr	r0, [pc, #120]	@ (8002d5c <StartGSM+0x1fc>)
 8002ce2:	f009 f963 	bl	800bfac <memset>
					SIM_UART_ReInitializeRxDMA();
 8002ce6:	f7fe fc35 	bl	8001554 <SIM_UART_ReInitializeRxDMA>
					if (receive_deactivate) process = 1;
 8002cea:	b18f      	cbz	r7, 8002d10 <StartGSM+0x1b0>
					if (receive_deactivate) process = 1;
 8002cec:	2701      	movs	r7, #1
 8002cee:	e7c2      	b.n	8002c76 <StartGSM+0x116>
				uart_transmit_string(&huart1, (uint8_t *)"Inside process: OPEN SOCKET SERVICE\r\n");
 8002cf0:	4929      	ldr	r1, [pc, #164]	@ (8002d98 <StartGSM+0x238>)
 8002cf2:	481f      	ldr	r0, [pc, #124]	@ (8002d70 <StartGSM+0x210>)
 8002cf4:	f002 fa20 	bl	8005138 <uart_transmit_string>
				int received_res = open_socket_service(1, 0, 0, 0);
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	461a      	mov	r2, r3
 8002cfc:	4619      	mov	r1, r3
 8002cfe:	2001      	movs	r0, #1
 8002d00:	f7ff f8d6 	bl	8001eb0 <open_socket_service>
				if(received_res){
 8002d04:	4680      	mov	r8, r0
 8002d06:	2800      	cmp	r0, #0
 8002d08:	f040 837a 	bne.w	8003400 <StartGSM+0x8a0>
					uart_transmit_string(&huart1, (uint8_t*) "Connect to Server Failed\n");
 8002d0c:	4923      	ldr	r1, [pc, #140]	@ (8002d9c <StartGSM+0x23c>)
 8002d0e:	e7dd      	b.n	8002ccc <StartGSM+0x16c>
						memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8002d10:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8002d14:	4639      	mov	r1, r7
 8002d16:	e75c      	b.n	8002bd2 <StartGSM+0x72>
				uart_transmit_string(&huart1, (uint8_t *)"Inside process: Register/Login to the server.\r\n");
 8002d18:	4921      	ldr	r1, [pc, #132]	@ (8002da0 <StartGSM+0x240>)
 8002d1a:	4815      	ldr	r0, [pc, #84]	@ (8002d70 <StartGSM+0x210>)
 8002d1c:	f002 fa0c 	bl	8005138 <uart_transmit_string>
				int result_send_login = login_to_server(0,&reg_msg);
 8002d20:	4669      	mov	r1, sp
 8002d22:	2000      	movs	r0, #0
 8002d24:	f7ff fa70 	bl	8002208 <login_to_server>
				if(result_send_login){
 8002d28:	2800      	cmp	r0, #0
 8002d2a:	f040 836b 	bne.w	8003404 <StartGSM+0x8a4>
				else process = 8;
 8002d2e:	2708      	movs	r7, #8
 8002d30:	e7a1      	b.n	8002c76 <StartGSM+0x116>
				uart_transmit_string(&huart1, (uint8_t *)"Inside process: Check Register/Login\r\n");
 8002d32:	480f      	ldr	r0, [pc, #60]	@ (8002d70 <StartGSM+0x210>)
 8002d34:	491b      	ldr	r1, [pc, #108]	@ (8002da4 <StartGSM+0x244>)
 8002d36:	f002 f9ff 	bl	8005138 <uart_transmit_string>
				int result_check_login = check_data_sent_to_server(0);
 8002d3a:	2000      	movs	r0, #0
 8002d3c:	f7ff fb70 	bl	8002420 <check_data_sent_to_server>
				if(result_check_login){
 8002d40:	2800      	cmp	r0, #0
 8002d42:	d0f4      	beq.n	8002d2e <StartGSM+0x1ce>
					receive_response("Check terminal register\n");
 8002d44:	4818      	ldr	r0, [pc, #96]	@ (8002da8 <StartGSM+0x248>)
 8002d46:	f7fe fc21 	bl	800158c <receive_response>
					process++;
 8002d4a:	2707      	movs	r7, #7
 8002d4c:	e793      	b.n	8002c76 <StartGSM+0x116>
 8002d4e:	bf00      	nop
 8002d50:	08012571 	.word	0x08012571
 8002d54:	20000c90 	.word	0x20000c90
 8002d58:	20000e2c 	.word	0x20000e2c
 8002d5c:	20000ca8 	.word	0x20000ca8
 8002d60:	20001130 	.word	0x20001130
 8002d64:	20000c98 	.word	0x20000c98
 8002d68:	20000e4c 	.word	0x20000e4c
 8002d6c:	080125c8 	.word	0x080125c8
 8002d70:	20001240 	.word	0x20001240
 8002d74:	080125d6 	.word	0x080125d6
 8002d78:	080125ec 	.word	0x080125ec
 8002d7c:	20000c28 	.word	0x20000c28
 8002d80:	08012605 	.word	0x08012605
 8002d84:	0801261a 	.word	0x0801261a
 8002d88:	20000e48 	.word	0x20000e48
 8002d8c:	08012642 	.word	0x08012642
 8002d90:	08012669 	.word	0x08012669
 8002d94:	0801268c 	.word	0x0801268c
 8002d98:	080126a9 	.word	0x080126a9
 8002d9c:	080126cf 	.word	0x080126cf
 8002da0:	080126e9 	.word	0x080126e9
 8002da4:	08012719 	.word	0x08012719
 8002da8:	08012740 	.word	0x08012740
				is_in_sending = 1;
 8002dac:	2301      	movs	r3, #1
				uart_transmit_string(&huart1, (uint8_t *)"Inside process: Send Location\r\n");
 8002dae:	4992      	ldr	r1, [pc, #584]	@ (8002ff8 <StartGSM+0x498>)
 8002db0:	4892      	ldr	r0, [pc, #584]	@ (8002ffc <StartGSM+0x49c>)
				is_in_sending = 1;
 8002db2:	6023      	str	r3, [r4, #0]
				uart_transmit_string(&huart1, (uint8_t *)"Inside process: Send Location\r\n");
 8002db4:	f002 f9c0 	bl	8005138 <uart_transmit_string>
				int result_get_current = getCurrentTime();
 8002db8:	f7ff fd22 	bl	8002800 <getCurrentTime>
				if(result_get_current == 0){
 8002dbc:	2800      	cmp	r0, #0
 8002dbe:	d0b6      	beq.n	8002d2e <StartGSM+0x1ce>
					if(received_RMC == 1){
 8002dc0:	f8df 92b0 	ldr.w	r9, [pc, #688]	@ 8003074 <StartGSM+0x514>
					receiveRMCDataWithAddrGSM();
 8002dc4:	f7ff fd56 	bl	8002874 <receiveRMCDataWithAddrGSM>
					if(received_RMC == 1){
 8002dc8:	f8d9 3000 	ldr.w	r3, [r9]
 8002dcc:	2b01      	cmp	r3, #1
 8002dce:	d1f9      	bne.n	8002dc4 <StartGSM+0x264>
						uart_transmit_string(&huart1, (uint8_t *)"RECEIVED RMC DATA AT GSM MODULE\n");
 8002dd0:	498b      	ldr	r1, [pc, #556]	@ (8003000 <StartGSM+0x4a0>)
 8002dd2:	488a      	ldr	r0, [pc, #552]	@ (8002ffc <StartGSM+0x49c>)
						HAL_TIM_Base_Start(&htim3);
 8002dd4:	f8df 82a0 	ldr.w	r8, [pc, #672]	@ 8003078 <StartGSM+0x518>
							result_final = processUploadDataToServer(&location_info);
 8002dd8:	f8df a2a0 	ldr.w	sl, [pc, #672]	@ 800307c <StartGSM+0x51c>
 8002ddc:	4f89      	ldr	r7, [pc, #548]	@ (8003004 <StartGSM+0x4a4>)
						received_RMC = 0;
 8002dde:	f04f 0b00 	mov.w	fp, #0
 8002de2:	f8c9 b000 	str.w	fp, [r9]
						uart_transmit_string(&huart1, (uint8_t *)"RECEIVED RMC DATA AT GSM MODULE\n");
 8002de6:	f002 f9a7 	bl	8005138 <uart_transmit_string>
						save_rmc_to_location_info(&location_info);
 8002dea:	a80f      	add	r0, sp, #60	@ 0x3c
 8002dec:	f7fe fc3c 	bl	8001668 <save_rmc_to_location_info>
						Debug_printf("Current stack address to be sent to the server: \n");
 8002df0:	4885      	ldr	r0, [pc, #532]	@ (8003008 <StartGSM+0x4a8>)
 8002df2:	f002 f9b1 	bl	8005158 <Debug_printf>
						Debug_printf("Address going to send to server at GSM:(STACK FROM MAIL QUEUE)  %08lx\n", current_addr_gsm);
 8002df6:	6831      	ldr	r1, [r6, #0]
 8002df8:	4884      	ldr	r0, [pc, #528]	@ (800300c <StartGSM+0x4ac>)
 8002dfa:	f002 f9ad 	bl	8005158 <Debug_printf>
						HAL_TIM_Base_Start(&htim3);
 8002dfe:	4640      	mov	r0, r8
 8002e00:	f004 fbe4 	bl	80075cc <HAL_TIM_Base_Start>
						__HAL_TIM_SET_COUNTER(&htim3, 0);
 8002e04:	f8d8 3000 	ldr.w	r3, [r8]
							result_final = processUploadDataToServer(&location_info);
 8002e08:	a80f      	add	r0, sp, #60	@ 0x3c
						__HAL_TIM_SET_COUNTER(&htim3, 0);
 8002e0a:	f8c3 b024 	str.w	fp, [r3, #36]	@ 0x24
							result_final = processUploadDataToServer(&location_info);
 8002e0e:	f7ff fe17 	bl	8002a40 <processUploadDataToServer>
							if(result_final == 1){
 8002e12:	2801      	cmp	r0, #1
							result_final = processUploadDataToServer(&location_info);
 8002e14:	f8ca 0000 	str.w	r0, [sl]
							if(result_final == 1){
 8002e18:	f040 8134 	bne.w	8003084 <StartGSM+0x524>
								uart_transmit_string(&huart1, (uint8_t *)"Sending SUCCESS\n");
 8002e1c:	497c      	ldr	r1, [pc, #496]	@ (8003010 <StartGSM+0x4b0>)
 8002e1e:	4877      	ldr	r0, [pc, #476]	@ (8002ffc <StartGSM+0x49c>)
 8002e20:	f002 f98a 	bl	8005138 <uart_transmit_string>
								receive_response("Check location report\n");
 8002e24:	487b      	ldr	r0, [pc, #492]	@ (8003014 <StartGSM+0x4b4>)
 8002e26:	f7fe fbb1 	bl	800158c <receive_response>
								memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8002e2a:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8002e2e:	4659      	mov	r1, fp
 8002e30:	4879      	ldr	r0, [pc, #484]	@ (8003018 <StartGSM+0x4b8>)
 8002e32:	f009 f8bb 	bl	800bfac <memset>
								SIM_UART_ReInitializeRxDMA();
 8002e36:	f7fe fb8d 	bl	8001554 <SIM_UART_ReInitializeRxDMA>
								if(is_disconnect == 1 || is_using_flash == 1){
 8002e3a:	683a      	ldr	r2, [r7, #0]
 8002e3c:	2a01      	cmp	r2, #1
 8002e3e:	d05c      	beq.n	8002efa <StartGSM+0x39a>
 8002e40:	4b76      	ldr	r3, [pc, #472]	@ (800301c <StartGSM+0x4bc>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	2b01      	cmp	r3, #1
 8002e46:	f040 80c0 	bne.w	8002fca <StartGSM+0x46a>
									enqueue_GSM(&result_addr_queue, current_addr_gsm);
 8002e4a:	f8df a1e4 	ldr.w	sl, [pc, #484]	@ 8003030 <StartGSM+0x4d0>
									Debug_printf("\n-----------ADDING current address to the result queue----------\n");
 8002e4e:	4874      	ldr	r0, [pc, #464]	@ (8003020 <StartGSM+0x4c0>)
 8002e50:	f002 f982 	bl	8005158 <Debug_printf>
									enqueue_GSM(&result_addr_queue, current_addr_gsm);
 8002e54:	6831      	ldr	r1, [r6, #0]
 8002e56:	4650      	mov	r0, sl
 8002e58:	f000 fae8 	bl	800342c <enqueue_GSM>
									if(is_keep_up == 0) num_in_mail_sent++;
 8002e5c:	4b71      	ldr	r3, [pc, #452]	@ (8003024 <StartGSM+0x4c4>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d154      	bne.n	8002f0e <StartGSM+0x3ae>
 8002e64:	4a70      	ldr	r2, [pc, #448]	@ (8003028 <StartGSM+0x4c8>)
 8002e66:	6813      	ldr	r3, [r2, #0]
 8002e68:	3301      	adds	r3, #1
 8002e6a:	6013      	str	r3, [r2, #0]
									Debug_printf("\n--------------RESULT ADDRESS QUEUE----------------\n");
 8002e6c:	486f      	ldr	r0, [pc, #444]	@ (800302c <StartGSM+0x4cc>)
									if(start_addr_disconnect >= end_addr_disconnect - 128 && checkAddrExistInQueue(end_addr_disconnect - 128, &result_addr_queue)){
 8002e6e:	f8df a1dc 	ldr.w	sl, [pc, #476]	@ 800304c <StartGSM+0x4ec>
 8002e72:	f8df b1e4 	ldr.w	fp, [pc, #484]	@ 8003058 <StartGSM+0x4f8>
									Debug_printf("\n--------------RESULT ADDRESS QUEUE----------------\n");
 8002e76:	f002 f96f 	bl	8005158 <Debug_printf>
									printQueue_GSM(&result_addr_queue);
 8002e7a:	486d      	ldr	r0, [pc, #436]	@ (8003030 <StartGSM+0x4d0>)
 8002e7c:	f000 fb06 	bl	800348c <printQueue_GSM>
									if(start_addr_disconnect >= end_addr_disconnect - 128 && checkAddrExistInQueue(end_addr_disconnect - 128, &result_addr_queue)){
 8002e80:	f8da 3000 	ldr.w	r3, [sl]
 8002e84:	f8db 1000 	ldr.w	r1, [fp]
 8002e88:	3b80      	subs	r3, #128	@ 0x80
 8002e8a:	428b      	cmp	r3, r1
 8002e8c:	f200 80ad 	bhi.w	8002fea <StartGSM+0x48a>
 8002e90:	f8da 0000 	ldr.w	r0, [sl]
 8002e94:	4966      	ldr	r1, [pc, #408]	@ (8003030 <StartGSM+0x4d0>)
 8002e96:	3880      	subs	r0, #128	@ 0x80
 8002e98:	f000 fb2c 	bl	80034f4 <checkAddrExistInQueue>
 8002e9c:	2800      	cmp	r0, #0
 8002e9e:	f000 80a4 	beq.w	8002fea <StartGSM+0x48a>
										Debug_printf("\n\n\n\n---------------END GETTING FROM FLASH-------------\n\n\n\n");
 8002ea2:	4864      	ldr	r0, [pc, #400]	@ (8003034 <StartGSM+0x4d4>)
 8002ea4:	f002 f958 	bl	8005158 <Debug_printf>
										is_using_flash = 0;
 8002ea8:	4a5c      	ldr	r2, [pc, #368]	@ (800301c <StartGSM+0x4bc>)
										clearQueue_GSM(&result_addr_queue);
 8002eaa:	4861      	ldr	r0, [pc, #388]	@ (8003030 <StartGSM+0x4d0>)
										is_using_flash = 0;
 8002eac:	2300      	movs	r3, #0
 8002eae:	6013      	str	r3, [r2, #0]
										clearQueue_GSM(&result_addr_queue);
 8002eb0:	f000 fadc 	bl	800346c <clearQueue_GSM>
										count_shiftleft = 0;
 8002eb4:	4a60      	ldr	r2, [pc, #384]	@ (8003038 <StartGSM+0x4d8>)
										Debug_printf("\n\n---------------- CLEAR THE MAIL QUEUE ---------------------\n\n");
 8002eb6:	4861      	ldr	r0, [pc, #388]	@ (800303c <StartGSM+0x4dc>)
										start_addr_disconnect = 0;
 8002eb8:	2300      	movs	r3, #0
										count_shiftleft = 0;
 8002eba:	7013      	strb	r3, [r2, #0]
										is_keep_up = 0;
 8002ebc:	4a59      	ldr	r2, [pc, #356]	@ (8003024 <StartGSM+0x4c4>)
										start_addr_disconnect = 0;
 8002ebe:	f8cb 3000 	str.w	r3, [fp]
										is_keep_up = 0;
 8002ec2:	6013      	str	r3, [r2, #0]
										end_addr_disconnect = 0;
 8002ec4:	f8ca 3000 	str.w	r3, [sl]
										Debug_printf("\n\n---------------- CLEAR THE MAIL QUEUE ---------------------\n\n");
 8002ec8:	f002 f946 	bl	8005158 <Debug_printf>
											osStatus_t status = osMessageQueueGet(RMC_MailQGSMId, &receivedDataGSM, NULL, 3000); // Wait for mail
 8002ecc:	f8df a174 	ldr.w	sl, [pc, #372]	@ 8003044 <StartGSM+0x4e4>
 8002ed0:	f8df b1ac 	ldr.w	fp, [pc, #428]	@ 8003080 <StartGSM+0x520>
											Debug_printf("Receiving MAIL\n");
 8002ed4:	485a      	ldr	r0, [pc, #360]	@ (8003040 <StartGSM+0x4e0>)
 8002ed6:	f002 f93f 	bl	8005158 <Debug_printf>
											osStatus_t status = osMessageQueueGet(RMC_MailQGSMId, &receivedDataGSM, NULL, 3000); // Wait for mail
 8002eda:	495a      	ldr	r1, [pc, #360]	@ (8003044 <StartGSM+0x4e4>)
 8002edc:	f8db 0000 	ldr.w	r0, [fp]
 8002ee0:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	f005 fb69 	bl	80085bc <osMessageQueueGet>
											if(status == osOK){
 8002eea:	2800      	cmp	r0, #0
 8002eec:	d168      	bne.n	8002fc0 <StartGSM+0x460>
												Debug_printf("Receiving MAIL For CLEARING: %08lx\n", receivedDataGSM.address);
 8002eee:	f8da 1058 	ldr.w	r1, [sl, #88]	@ 0x58
 8002ef2:	4855      	ldr	r0, [pc, #340]	@ (8003048 <StartGSM+0x4e8>)
 8002ef4:	f002 f930 	bl	8005158 <Debug_printf>
										while(1){
 8002ef8:	e7ec      	b.n	8002ed4 <StartGSM+0x374>
										end_addr_disconnect = current_addr_gsm;
 8002efa:	4b54      	ldr	r3, [pc, #336]	@ (800304c <StartGSM+0x4ec>)
 8002efc:	6831      	ldr	r1, [r6, #0]
 8002efe:	6019      	str	r1, [r3, #0]
										in_getting_mail_stack = 1;
 8002f00:	4953      	ldr	r1, [pc, #332]	@ (8003050 <StartGSM+0x4f0>)
										Debug_printf("End address of network outage. RECONNECTED SUCCESSFULLY: %08x\n", end_addr_disconnect);
 8002f02:	4854      	ldr	r0, [pc, #336]	@ (8003054 <StartGSM+0x4f4>)
										in_getting_mail_stack = 1;
 8002f04:	600a      	str	r2, [r1, #0]
										Debug_printf("End address of network outage. RECONNECTED SUCCESSFULLY: %08x\n", end_addr_disconnect);
 8002f06:	6819      	ldr	r1, [r3, #0]
 8002f08:	f002 f926 	bl	8005158 <Debug_printf>
 8002f0c:	e79d      	b.n	8002e4a <StartGSM+0x2ea>
									if(is_keep_up == 1 && in_getting_mail_stack == 1){
 8002f0e:	2b01      	cmp	r3, #1
 8002f10:	d1ac      	bne.n	8002e6c <StartGSM+0x30c>
 8002f12:	4b4f      	ldr	r3, [pc, #316]	@ (8003050 <StartGSM+0x4f0>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	2b01      	cmp	r3, #1
 8002f18:	d1a8      	bne.n	8002e6c <StartGSM+0x30c>
										for (int i = 0; i < result_addr_queue.size-1; i++) {
 8002f1a:	f8da 0208 	ldr.w	r0, [sl, #520]	@ 0x208
											int idx = (result_addr_queue.front + i) % MAX_SIZE;
 8002f1e:	f8da c200 	ldr.w	ip, [sl, #512]	@ 0x200
										for (int i = 0; i < result_addr_queue.size-1; i++) {
 8002f22:	f04f 0e00 	mov.w	lr, #0
 8002f26:	3801      	subs	r0, #1
										int count_stack = 0;
 8002f28:	4672      	mov	r2, lr
										for (int i = 0; i < result_addr_queue.size-1; i++) {
 8002f2a:	4570      	cmp	r0, lr
 8002f2c:	dc12      	bgt.n	8002f54 <StartGSM+0x3f4>
										for (int i = 0; i < result_addr_queue.size-1; i++) {
 8002f2e:	f04f 0e00 	mov.w	lr, #0
 8002f32:	4570      	cmp	r0, lr
 8002f34:	dc26      	bgt.n	8002f84 <StartGSM+0x424>
										start_addr_disconnect -= count_shiftleft * 128;
 8002f36:	4948      	ldr	r1, [pc, #288]	@ (8003058 <StartGSM+0x4f8>)
 8002f38:	4a3f      	ldr	r2, [pc, #252]	@ (8003038 <StartGSM+0x4d8>)
 8002f3a:	680b      	ldr	r3, [r1, #0]
 8002f3c:	7810      	ldrb	r0, [r2, #0]
 8002f3e:	eba3 13c0 	sub.w	r3, r3, r0, lsl #7
 8002f42:	600b      	str	r3, [r1, #0]
										count_shiftleft = 0;
 8002f44:	2300      	movs	r3, #0
 8002f46:	7013      	strb	r3, [r2, #0]
										in_getting_mail_stack = 0;
 8002f48:	4a41      	ldr	r2, [pc, #260]	@ (8003050 <StartGSM+0x4f0>)
										Debug_printf("\n\n-------------- HAVE SENT ALL THE STACKED DATA IN MAIL QUEUE ----------------\n\n");
 8002f4a:	4844      	ldr	r0, [pc, #272]	@ (800305c <StartGSM+0x4fc>)
										in_getting_mail_stack = 0;
 8002f4c:	6013      	str	r3, [r2, #0]
										Debug_printf("\n\n-------------- HAVE SENT ALL THE STACKED DATA IN MAIL QUEUE ----------------\n\n");
 8002f4e:	f002 f903 	bl	8005158 <Debug_printf>
 8002f52:	e78b      	b.n	8002e6c <StartGSM+0x30c>
											int idx = (result_addr_queue.front + i) % MAX_SIZE;
 8002f54:	eb0c 030e 	add.w	r3, ip, lr
 8002f58:	4259      	negs	r1, r3
 8002f5a:	f001 017f 	and.w	r1, r1, #127	@ 0x7f
 8002f5e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002f62:	bf58      	it	pl
 8002f64:	424b      	negpl	r3, r1
											if(result_addr_queue.data[idx] == (FLASH_END_ADDRESS - 0x100) && result_addr_queue.data[idx+1] == (FLASH_END_ADDRESS - 0x100)){
 8002f66:	f85a 1023 	ldr.w	r1, [sl, r3, lsl #2]
 8002f6a:	f5b1 4f9e 	cmp.w	r1, #20224	@ 0x4f00
 8002f6e:	d106      	bne.n	8002f7e <StartGSM+0x41e>
 8002f70:	3301      	adds	r3, #1
 8002f72:	f85a 3023 	ldr.w	r3, [sl, r3, lsl #2]
 8002f76:	f5b3 4f9e 	cmp.w	r3, #20224	@ 0x4f00
												count_stack++;
 8002f7a:	bf08      	it	eq
 8002f7c:	3201      	addeq	r2, #1
										for (int i = 0; i < result_addr_queue.size-1; i++) {
 8002f7e:	f10e 0e01 	add.w	lr, lr, #1
 8002f82:	e7d2      	b.n	8002f2a <StartGSM+0x3ca>
											int idx = (result_addr_queue.front + i) % MAX_SIZE;
 8002f84:	eb0c 010e 	add.w	r1, ip, lr
 8002f88:	424b      	negs	r3, r1
 8002f8a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002f8e:	f001 017f 	and.w	r1, r1, #127	@ 0x7f
 8002f92:	bf58      	it	pl
 8002f94:	4259      	negpl	r1, r3
											if(result_addr_queue.data[idx] == (FLASH_END_ADDRESS - 0x100) && result_addr_queue.data[idx+1] == (FLASH_END_ADDRESS - 0x100)){
 8002f96:	f85a 3021 	ldr.w	r3, [sl, r1, lsl #2]
 8002f9a:	f5b3 4f9e 	cmp.w	r3, #20224	@ 0x4f00
 8002f9e:	d10c      	bne.n	8002fba <StartGSM+0x45a>
 8002fa0:	1c4b      	adds	r3, r1, #1
 8002fa2:	f85a 3023 	ldr.w	r3, [sl, r3, lsl #2]
 8002fa6:	f5b3 4f9e 	cmp.w	r3, #20224	@ 0x4f00
												result_addr_queue.data[idx] -= 128 * count_stack;
 8002faa:	bf01      	itttt	eq
 8002fac:	01d3      	lsleq	r3, r2, #7
 8002fae:	f5c3 439e 	rsbeq	r3, r3, #20224	@ 0x4f00
 8002fb2:	f84a 3021 	streq.w	r3, [sl, r1, lsl #2]
												count_stack--;
 8002fb6:	f102 32ff 	addeq.w	r2, r2, #4294967295
										for (int i = 0; i < result_addr_queue.size-1; i++) {
 8002fba:	f10e 0e01 	add.w	lr, lr, #1
 8002fbe:	e7b8      	b.n	8002f32 <StartGSM+0x3d2>
												Debug_printf("Have cleared out all mail queue\n");
 8002fc0:	4827      	ldr	r0, [pc, #156]	@ (8003060 <StartGSM+0x500>)
 8002fc2:	f002 f8c9 	bl	8005158 <Debug_printf>
									is_disconnect = 0;
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	603b      	str	r3, [r7, #0]
								is_pushing_data = 0;
 8002fca:	4b26      	ldr	r3, [pc, #152]	@ (8003064 <StartGSM+0x504>)
							Debug_printf("\n--------------------Sending to SERVER takes %d -----------------------\n\n",period);
 8002fcc:	4826      	ldr	r0, [pc, #152]	@ (8003068 <StartGSM+0x508>)
								is_pushing_data = 0;
 8002fce:	2200      	movs	r2, #0
 8002fd0:	601a      	str	r2, [r3, #0]
							int period = __HAL_TIM_GET_COUNTER(&htim3);
 8002fd2:	f8d8 3000 	ldr.w	r3, [r8]
 8002fd6:	6a59      	ldr	r1, [r3, #36]	@ 0x24
							Debug_printf("\n--------------------Sending to SERVER takes %d -----------------------\n\n",period);
 8002fd8:	f002 f8be 	bl	8005158 <Debug_printf>
							Debug_printf("\n--------------------END OF SENDING SERVER --------------------------\n\n");
 8002fdc:	4823      	ldr	r0, [pc, #140]	@ (800306c <StartGSM+0x50c>)
 8002fde:	f002 f8bb 	bl	8005158 <Debug_printf>
							osDelay(200);
 8002fe2:	20c8      	movs	r0, #200	@ 0xc8
 8002fe4:	f005 fa00 	bl	80083e8 <osDelay>
 8002fe8:	e6ec      	b.n	8002dc4 <StartGSM+0x264>
										Debug_printf("\n\n------------------ USING FLASH TO PUSH TO SERVER -----------------\n\n");
 8002fea:	4821      	ldr	r0, [pc, #132]	@ (8003070 <StartGSM+0x510>)
 8002fec:	f002 f8b4 	bl	8005158 <Debug_printf>
										is_using_flash = 1;
 8002ff0:	4a0a      	ldr	r2, [pc, #40]	@ (800301c <StartGSM+0x4bc>)
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	6013      	str	r3, [r2, #0]
 8002ff6:	e7e6      	b.n	8002fc6 <StartGSM+0x466>
 8002ff8:	08012759 	.word	0x08012759
 8002ffc:	20001240 	.word	0x20001240
 8003000:	08012779 	.word	0x08012779
 8003004:	20000e48 	.word	0x20000e48
 8003008:	0801279a 	.word	0x0801279a
 800300c:	080127cc 	.word	0x080127cc
 8003010:	080124d4 	.word	0x080124d4
 8003014:	08012813 	.word	0x08012813
 8003018:	20000ca8 	.word	0x20000ca8
 800301c:	20000e44 	.word	0x20000e44
 8003020:	08012869 	.word	0x08012869
 8003024:	20000e40 	.word	0x20000e40
 8003028:	20000c88 	.word	0x20000c88
 800302c:	080128fc 	.word	0x080128fc
 8003030:	20000e4c 	.word	0x20000e4c
 8003034:	08012931 	.word	0x08012931
 8003038:	20000e3c 	.word	0x20000e3c
 800303c:	0801296c 	.word	0x0801296c
 8003040:	080129ac 	.word	0x080129ac
 8003044:	20000bc8 	.word	0x20000bc8
 8003048:	080129bc 	.word	0x080129bc
 800304c:	20000e28 	.word	0x20000e28
 8003050:	20000c8c 	.word	0x20000c8c
 8003054:	0801282a 	.word	0x0801282a
 8003058:	20000e30 	.word	0x20000e30
 800305c:	080128ab 	.word	0x080128ab
 8003060:	080129e0 	.word	0x080129e0
 8003064:	20000e38 	.word	0x20000e38
 8003068:	08012a48 	.word	0x08012a48
 800306c:	08012a92 	.word	0x08012a92
 8003070:	08012a01 	.word	0x08012a01
 8003074:	20000c94 	.word	0x20000c94
 8003078:	200012c8 	.word	0x200012c8
 800307c:	20000000 	.word	0x20000000
 8003080:	200027c4 	.word	0x200027c4
								uart_transmit_string(&huart1, (uint8_t *)"Sending ERROR\n");
 8003084:	49b5      	ldr	r1, [pc, #724]	@ (800335c <StartGSM+0x7fc>)
 8003086:	48b6      	ldr	r0, [pc, #728]	@ (8003360 <StartGSM+0x800>)
 8003088:	f8df 832c 	ldr.w	r8, [pc, #812]	@ 80033b8 <StartGSM+0x858>
 800308c:	f002 f854 	bl	8005138 <uart_transmit_string>
								memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 8003090:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8003094:	4659      	mov	r1, fp
 8003096:	48b3      	ldr	r0, [pc, #716]	@ (8003364 <StartGSM+0x804>)
 8003098:	f008 ff88 	bl	800bfac <memset>
								SIM_UART_ReInitializeRxDMA();
 800309c:	f7fe fa5a 	bl	8001554 <SIM_UART_ReInitializeRxDMA>
								if(is_disconnect == 0){
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	b95b      	cbnz	r3, 80030bc <StartGSM+0x55c>
									if(is_using_flash == 0){
 80030a4:	f8d8 3000 	ldr.w	r3, [r8]
 80030a8:	b933      	cbnz	r3, 80030b8 <StartGSM+0x558>
										start_addr_disconnect = current_addr_gsm;
 80030aa:	4baf      	ldr	r3, [pc, #700]	@ (8003368 <StartGSM+0x808>)
 80030ac:	6832      	ldr	r2, [r6, #0]
 80030ae:	601a      	str	r2, [r3, #0]
										Debug_printf("Saving start address of connection outage: %08x\n", start_addr_disconnect);
 80030b0:	6819      	ldr	r1, [r3, #0]
 80030b2:	48ae      	ldr	r0, [pc, #696]	@ (800336c <StartGSM+0x80c>)
 80030b4:	f002 f850 	bl	8005158 <Debug_printf>
									is_disconnect = 1;
 80030b8:	2301      	movs	r3, #1
 80030ba:	603b      	str	r3, [r7, #0]
								if(is_using_flash == 1){
 80030bc:	f8d8 3000 	ldr.w	r3, [r8]
 80030c0:	2b01      	cmp	r3, #1
 80030c2:	f040 810f 	bne.w	80032e4 <StartGSM+0x784>
									if(is_keep_up){
 80030c6:	4baa      	ldr	r3, [pc, #680]	@ (8003370 <StartGSM+0x810>)
 80030c8:	4faa      	ldr	r7, [pc, #680]	@ (8003374 <StartGSM+0x814>)
 80030ca:	681a      	ldr	r2, [r3, #0]
 80030cc:	bb4a      	cbnz	r2, 8003122 <StartGSM+0x5c2>
										for (int i = 0; i < result_addr_queue.size-1; i++) {
 80030ce:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
											int idx = (result_addr_queue.front + i) % MAX_SIZE;
 80030d2:	f8d7 e200 	ldr.w	lr, [r7, #512]	@ 0x200
										for (int i = 0; i < result_addr_queue.size-1; i++) {
 80030d6:	f103 3cff 	add.w	ip, r3, #4294967295
 80030da:	4691      	mov	r9, r2
										int count_stack = 0;
 80030dc:	4611      	mov	r1, r2
										for (int i = 0; i < result_addr_queue.size-1; i++) {
 80030de:	45cc      	cmp	ip, r9
 80030e0:	f300 80c2 	bgt.w	8003268 <StartGSM+0x708>
										for (int i = 0; i < result_addr_queue.size-1; i++) {
 80030e4:	4594      	cmp	ip, r2
 80030e6:	dd37      	ble.n	8003158 <StartGSM+0x5f8>
											int idx = (result_addr_queue.front + i) % MAX_SIZE;
 80030e8:	eb02 000e 	add.w	r0, r2, lr
 80030ec:	4243      	negs	r3, r0
 80030ee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80030f2:	f000 007f 	and.w	r0, r0, #127	@ 0x7f
 80030f6:	bf58      	it	pl
 80030f8:	4258      	negpl	r0, r3
											if(result_addr_queue.data[idx] == (FLASH_END_ADDRESS - 0x100) && result_addr_queue.data[idx+1] == (FLASH_END_ADDRESS - 0x100)){
 80030fa:	f857 3020 	ldr.w	r3, [r7, r0, lsl #2]
 80030fe:	f5b3 4f9e 	cmp.w	r3, #20224	@ 0x4f00
 8003102:	d10c      	bne.n	800311e <StartGSM+0x5be>
 8003104:	1c43      	adds	r3, r0, #1
 8003106:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 800310a:	f5b3 4f9e 	cmp.w	r3, #20224	@ 0x4f00
												result_addr_queue.data[idx] -= 128 * count_stack;
 800310e:	bf01      	itttt	eq
 8003110:	01cb      	lsleq	r3, r1, #7
 8003112:	f5c3 439e 	rsbeq	r3, r3, #20224	@ 0x4f00
 8003116:	f847 3020 	streq.w	r3, [r7, r0, lsl #2]
												count_stack--;
 800311a:	f101 31ff 	addeq.w	r1, r1, #4294967295
										for (int i = 0; i < result_addr_queue.size-1; i++) {
 800311e:	3201      	adds	r2, #1
 8003120:	e7e0      	b.n	80030e4 <StartGSM+0x584>
										Debug_printf("\n-----------------BEFORE update the result address data: GSM --------------\n");
 8003122:	4895      	ldr	r0, [pc, #596]	@ (8003378 <StartGSM+0x818>)
 8003124:	f002 f818 	bl	8005158 <Debug_printf>
										printQueue_GSM(&result_addr_queue);
 8003128:	4638      	mov	r0, r7
 800312a:	f000 f9af 	bl	800348c <printQueue_GSM>
										Debug_printf("\n--------------- Update the result address data: GSM --------------\n");
 800312e:	4893      	ldr	r0, [pc, #588]	@ (800337c <StartGSM+0x81c>)
 8003130:	f002 f812 	bl	8005158 <Debug_printf>
											if(result_addr_queue.data[idx] < start_addr_disconnect){
 8003134:	4b8c      	ldr	r3, [pc, #560]	@ (8003368 <StartGSM+0x808>)
										for (int i = 0; i < result_addr_queue.size; i++) {
 8003136:	f04f 0b00 	mov.w	fp, #0
 800313a:	f8d7 0208 	ldr.w	r0, [r7, #520]	@ 0x208
											int idx = (result_addr_queue.front + i) % MAX_SIZE;
 800313e:	f8d7 1200 	ldr.w	r1, [r7, #512]	@ 0x200
										for (int i = 0; i < result_addr_queue.size; i++) {
 8003142:	4558      	cmp	r0, fp
 8003144:	dc59      	bgt.n	80031fa <StartGSM+0x69a>
										int count_shiftleft_dub = count_shiftleft;
 8003146:	4b8e      	ldr	r3, [pc, #568]	@ (8003380 <StartGSM+0x820>)
 8003148:	f893 9000 	ldrb.w	r9, [r3]
										for (int i = 0; i < result_addr_queue.size; i++){
 800314c:	f04f 0c00 	mov.w	ip, #0
												result_addr_queue.data[idx] -= 128 * count_shiftleft;
 8003150:	ea4f 1ec9 	mov.w	lr, r9, lsl #7
										for (int i = 0; i < result_addr_queue.size; i++){
 8003154:	4560      	cmp	r0, ip
 8003156:	dc6b      	bgt.n	8003230 <StartGSM+0x6d0>
									printQueue_GSM(&result_addr_queue);
 8003158:	4886      	ldr	r0, [pc, #536]	@ (8003374 <StartGSM+0x814>)
 800315a:	f000 f997 	bl	800348c <printQueue_GSM>
									start_addr_disconnect -= 128 * count_shiftleft;
 800315e:	4b82      	ldr	r3, [pc, #520]	@ (8003368 <StartGSM+0x808>)
 8003160:	4987      	ldr	r1, [pc, #540]	@ (8003380 <StartGSM+0x820>)
 8003162:	681a      	ldr	r2, [r3, #0]
 8003164:	7808      	ldrb	r0, [r1, #0]
 8003166:	eba2 12c0 	sub.w	r2, r2, r0, lsl #7
 800316a:	601a      	str	r2, [r3, #0]
									if(start_addr_disconnect < 0x3000) start_addr_disconnect = 0x3000;
 800316c:	681a      	ldr	r2, [r3, #0]
 800316e:	f5b2 5f40 	cmp.w	r2, #12288	@ 0x3000
									start_addr_disconnect -= 128 * count_shiftleft;
 8003172:	ea4f 1cc0 	mov.w	ip, r0, lsl #7
									if(start_addr_disconnect < 0x3000) start_addr_disconnect = 0x3000;
 8003176:	f0c0 808f 	bcc.w	8003298 <StartGSM+0x738>
									end_addr_disconnect -= 128 *count_shiftleft;
 800317a:	4a82      	ldr	r2, [pc, #520]	@ (8003384 <StartGSM+0x824>)
									Debug_printf("\n\n---------------- CLEAR THE MAIL QUEUE ---------------------\n\n");
 800317c:	4882      	ldr	r0, [pc, #520]	@ (8003388 <StartGSM+0x828>)
									end_addr_disconnect -= 128 *count_shiftleft;
 800317e:	6813      	ldr	r3, [r2, #0]
										osStatus_t status = osMessageQueueGet(RMC_MailQGSMId, &receivedDataGSM, NULL, 3000); // Wait for mail
 8003180:	f8df 920c 	ldr.w	r9, [pc, #524]	@ 8003390 <StartGSM+0x830>
 8003184:	f8df b234 	ldr.w	fp, [pc, #564]	@ 80033bc <StartGSM+0x85c>
									end_addr_disconnect -= 128 *count_shiftleft;
 8003188:	eba3 030c 	sub.w	r3, r3, ip
 800318c:	6013      	str	r3, [r2, #0]
									count_shiftleft = 0;
 800318e:	2300      	movs	r3, #0
 8003190:	700b      	strb	r3, [r1, #0]
									Debug_printf("\n\n---------------- CLEAR THE MAIL QUEUE ---------------------\n\n");
 8003192:	f001 ffe1 	bl	8005158 <Debug_printf>
										Debug_printf("Receiving MAIL\n");
 8003196:	487d      	ldr	r0, [pc, #500]	@ (800338c <StartGSM+0x82c>)
 8003198:	f001 ffde 	bl	8005158 <Debug_printf>
										osStatus_t status = osMessageQueueGet(RMC_MailQGSMId, &receivedDataGSM, NULL, 3000); // Wait for mail
 800319c:	497c      	ldr	r1, [pc, #496]	@ (8003390 <StartGSM+0x830>)
 800319e:	f8db 0000 	ldr.w	r0, [fp]
 80031a2:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 80031a6:	2200      	movs	r2, #0
 80031a8:	f005 fa08 	bl	80085bc <osMessageQueueGet>
										if(status == osOK){
 80031ac:	2800      	cmp	r0, #0
 80031ae:	d177      	bne.n	80032a0 <StartGSM+0x740>
											Debug_printf("Receiving MAIL: %08lx\n", receivedDataGSM.address);
 80031b0:	f8d9 1058 	ldr.w	r1, [r9, #88]	@ 0x58
 80031b4:	4877      	ldr	r0, [pc, #476]	@ (8003394 <StartGSM+0x834>)
 80031b6:	f001 ffcf 	bl	8005158 <Debug_printf>
											if(is_keep_up == 0 && receivedDataGSM.address == 0x4F00){
 80031ba:	4b6d      	ldr	r3, [pc, #436]	@ (8003370 <StartGSM+0x810>)
 80031bc:	681a      	ldr	r2, [r3, #0]
 80031be:	2a00      	cmp	r2, #0
 80031c0:	d1e9      	bne.n	8003196 <StartGSM+0x636>
 80031c2:	f8d9 3058 	ldr.w	r3, [r9, #88]	@ 0x58
 80031c6:	f5b3 4f9e 	cmp.w	r3, #20224	@ 0x4f00
 80031ca:	d1e4      	bne.n	8003196 <StartGSM+0x636>
												for (int i = 0; i < num_in_mail_sent; i++) {
 80031cc:	4b72      	ldr	r3, [pc, #456]	@ (8003398 <StartGSM+0x838>)
													int idx = (result_addr_queue.rear - i + MAX_SIZE) % MAX_SIZE; // Calculate the index in reverse
 80031ce:	f8d7 1204 	ldr.w	r1, [r7, #516]	@ 0x204
												for (int i = 0; i < num_in_mail_sent; i++) {
 80031d2:	f8d3 c000 	ldr.w	ip, [r3]
													int idx = (result_addr_queue.rear - i + MAX_SIZE) % MAX_SIZE; // Calculate the index in reverse
 80031d6:	3180      	adds	r1, #128	@ 0x80
												for (int i = 0; i < num_in_mail_sent; i++) {
 80031d8:	4594      	cmp	ip, r2
 80031da:	dddc      	ble.n	8003196 <StartGSM+0x636>
													int idx = (result_addr_queue.rear - i + MAX_SIZE) % MAX_SIZE; // Calculate the index in reverse
 80031dc:	1a8b      	subs	r3, r1, r2
 80031de:	4258      	negs	r0, r3
 80031e0:	f000 007f 	and.w	r0, r0, #127	@ 0x7f
 80031e4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80031e8:	bf58      	it	pl
 80031ea:	4243      	negpl	r3, r0
												for (int i = 0; i < num_in_mail_sent; i++) {
 80031ec:	3201      	adds	r2, #1
													result_addr_queue.data[idx] -= 128;
 80031ee:	f857 0023 	ldr.w	r0, [r7, r3, lsl #2]
 80031f2:	3880      	subs	r0, #128	@ 0x80
 80031f4:	f847 0023 	str.w	r0, [r7, r3, lsl #2]
												for (int i = 0; i < num_in_mail_sent; i++) {
 80031f8:	e7ee      	b.n	80031d8 <StartGSM+0x678>
											int idx = (result_addr_queue.front + i) % MAX_SIZE;
 80031fa:	4459      	add	r1, fp
 80031fc:	4248      	negs	r0, r1
 80031fe:	f001 097f 	and.w	r9, r1, #127	@ 0x7f
 8003202:	f000 017f 	and.w	r1, r0, #127	@ 0x7f
 8003206:	bf58      	it	pl
 8003208:	f1c1 0900 	rsbpl	r9, r1, #0
											if(result_addr_queue.data[idx] < start_addr_disconnect){
 800320c:	6818      	ldr	r0, [r3, #0]
 800320e:	f857 1029 	ldr.w	r1, [r7, r9, lsl #2]
 8003212:	4281      	cmp	r1, r0
 8003214:	d209      	bcs.n	800322a <StartGSM+0x6ca>
												Debug_printf("CURRENT INDEX TO CHECK DELETING: %08lx", result_addr_queue.data[idx]);
 8003216:	4861      	ldr	r0, [pc, #388]	@ (800339c <StartGSM+0x83c>)
 8003218:	f001 ff9e 	bl	8005158 <Debug_printf>
												deleteMiddle_GSM(&result_addr_queue, idx);
 800321c:	4649      	mov	r1, r9
 800321e:	4638      	mov	r0, r7
 8003220:	f000 f98e 	bl	8003540 <deleteMiddle_GSM>
												i--;
 8003224:	4b50      	ldr	r3, [pc, #320]	@ (8003368 <StartGSM+0x808>)
 8003226:	f10b 3bff 	add.w	fp, fp, #4294967295
										for (int i = 0; i < result_addr_queue.size; i++) {
 800322a:	f10b 0b01 	add.w	fp, fp, #1
 800322e:	e784      	b.n	800313a <StartGSM+0x5da>
											int idx = (result_addr_queue.front + i) % MAX_SIZE;
 8003230:	eb0c 0301 	add.w	r3, ip, r1
 8003234:	425a      	negs	r2, r3
 8003236:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800323a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800323e:	bf58      	it	pl
 8003240:	4253      	negpl	r3, r2
										for (int i = 0; i < result_addr_queue.size; i++){
 8003242:	f10c 0c01 	add.w	ip, ip, #1
											if(result_addr_queue.data[idx] == FLASH_END_ADDRESS-0x100){
 8003246:	f857 2023 	ldr.w	r2, [r7, r3, lsl #2]
 800324a:	f5b2 4f9e 	cmp.w	r2, #20224	@ 0x4f00
												result_addr_queue.data[idx] -= 128 * count_shiftleft_dub;
 800324e:	bf06      	itte	eq
 8003250:	ea4f 12c9 	moveq.w	r2, r9, lsl #7
 8003254:	f5c2 429e 	rsbeq	r2, r2, #20224	@ 0x4f00
												result_addr_queue.data[idx] -= 128 * count_shiftleft;
 8003258:	eba2 020e 	subne.w	r2, r2, lr
 800325c:	f847 2023 	str.w	r2, [r7, r3, lsl #2]
												count_shiftleft_dub -= 1;
 8003260:	bf08      	it	eq
 8003262:	f109 39ff 	addeq.w	r9, r9, #4294967295
										for (int i = 0; i < result_addr_queue.size; i++){
 8003266:	e775      	b.n	8003154 <StartGSM+0x5f4>
											int idx = (result_addr_queue.front + i) % MAX_SIZE;
 8003268:	eb09 030e 	add.w	r3, r9, lr
 800326c:	4258      	negs	r0, r3
 800326e:	f000 007f 	and.w	r0, r0, #127	@ 0x7f
 8003272:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003276:	bf58      	it	pl
 8003278:	4243      	negpl	r3, r0
											if(result_addr_queue.data[idx] == (FLASH_END_ADDRESS - 0x100) && result_addr_queue.data[idx+1] == (FLASH_END_ADDRESS - 0x100)){
 800327a:	f857 0023 	ldr.w	r0, [r7, r3, lsl #2]
 800327e:	f5b0 4f9e 	cmp.w	r0, #20224	@ 0x4f00
 8003282:	d106      	bne.n	8003292 <StartGSM+0x732>
 8003284:	3301      	adds	r3, #1
 8003286:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 800328a:	f5b3 4f9e 	cmp.w	r3, #20224	@ 0x4f00
												count_stack++;
 800328e:	bf08      	it	eq
 8003290:	3101      	addeq	r1, #1
										for (int i = 0; i < result_addr_queue.size-1; i++) {
 8003292:	f109 0901 	add.w	r9, r9, #1
 8003296:	e722      	b.n	80030de <StartGSM+0x57e>
									if(start_addr_disconnect < 0x3000) start_addr_disconnect = 0x3000;
 8003298:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
 800329c:	601a      	str	r2, [r3, #0]
 800329e:	e76c      	b.n	800317a <StartGSM+0x61a>
											Debug_printf("Have cleared out all mail queue\n");
 80032a0:	483f      	ldr	r0, [pc, #252]	@ (80033a0 <StartGSM+0x840>)
 80032a2:	f001 ff59 	bl	8005158 <Debug_printf>
									is_using_flash = 0;
 80032a6:	2300      	movs	r3, #0
 80032a8:	f8c8 3000 	str.w	r3, [r8]
								is_pushing_data = 0;
 80032ac:	4b3d      	ldr	r3, [pc, #244]	@ (80033a4 <StartGSM+0x844>)
 80032ae:	2700      	movs	r7, #0
 80032b0:	601f      	str	r7, [r3, #0]
								if(result_final == 2){
 80032b2:	f8da 3000 	ldr.w	r3, [sl]
 80032b6:	2b02      	cmp	r3, #2
 80032b8:	d14b      	bne.n	8003352 <StartGSM+0x7f2>
									Debug_printf("---------------------SIM ERROR ----------------------\n");
 80032ba:	483b      	ldr	r0, [pc, #236]	@ (80033a8 <StartGSM+0x848>)
 80032bc:	f001 ff4c 	bl	8005158 <Debug_printf>
									memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 80032c0:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 80032c4:	4639      	mov	r1, r7
 80032c6:	4827      	ldr	r0, [pc, #156]	@ (8003364 <StartGSM+0x804>)
 80032c8:	f008 fe70 	bl	800bfac <memset>
									SIM_UART_ReInitializeRxDMA();
 80032cc:	f7fe f942 	bl	8001554 <SIM_UART_ReInitializeRxDMA>
									uart_transmit_string(&huart1,(uint8_t*) "Rebooting SIM module\n");
 80032d0:	4936      	ldr	r1, [pc, #216]	@ (80033ac <StartGSM+0x84c>)
 80032d2:	4823      	ldr	r0, [pc, #140]	@ (8003360 <StartGSM+0x800>)
 80032d4:	f001 ff30 	bl	8005138 <uart_transmit_string>
									reboot_SIM_module();
 80032d8:	f7fe f998 	bl	800160c <reboot_SIM_module>
				Debug_printf("\n--------------------END OF CASE 7 --------------------------\n\n");
 80032dc:	4834      	ldr	r0, [pc, #208]	@ (80033b0 <StartGSM+0x850>)
 80032de:	f001 ff3b 	bl	8005158 <Debug_printf>
				break;
 80032e2:	e4c8      	b.n	8002c76 <StartGSM+0x116>
									Debug_printf("\n\n---------------- CLEAR THE MAIL QUEUE ---------------------\n\n");
 80032e4:	4828      	ldr	r0, [pc, #160]	@ (8003388 <StartGSM+0x828>)
										Debug_printf("Receiving MAIL\n");
 80032e6:	f8df b0a4 	ldr.w	fp, [pc, #164]	@ 800338c <StartGSM+0x82c>
										osStatus_t status = osMessageQueueGet(RMC_MailQGSMId, &receivedDataGSM, NULL, 3000); // Wait for mail
 80032ea:	f8df 80a4 	ldr.w	r8, [pc, #164]	@ 8003390 <StartGSM+0x830>
 80032ee:	f8df 90cc 	ldr.w	r9, [pc, #204]	@ 80033bc <StartGSM+0x85c>
									Debug_printf("\n\n---------------- CLEAR THE MAIL QUEUE ---------------------\n\n");
 80032f2:	f001 ff31 	bl	8005158 <Debug_printf>
									int count_mail_end_addr = 0;
 80032f6:	2700      	movs	r7, #0
										Debug_printf("Receiving MAIL\n");
 80032f8:	4658      	mov	r0, fp
 80032fa:	f001 ff2d 	bl	8005158 <Debug_printf>
										osStatus_t status = osMessageQueueGet(RMC_MailQGSMId, &receivedDataGSM, NULL, 3000); // Wait for mail
 80032fe:	4924      	ldr	r1, [pc, #144]	@ (8003390 <StartGSM+0x830>)
 8003300:	f8d9 0000 	ldr.w	r0, [r9]
 8003304:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8003308:	2200      	movs	r2, #0
 800330a:	f005 f957 	bl	80085bc <osMessageQueueGet>
										if(status == osOK){
 800330e:	b958      	cbnz	r0, 8003328 <StartGSM+0x7c8>
											Debug_printf("Receiving MAIL: %08lx\n", receivedDataGSM.address);
 8003310:	f8d8 1058 	ldr.w	r1, [r8, #88]	@ 0x58
 8003314:	481f      	ldr	r0, [pc, #124]	@ (8003394 <StartGSM+0x834>)
 8003316:	f001 ff1f 	bl	8005158 <Debug_printf>
											if(receivedDataGSM.address == (FLASH_END_ADDRESS - 0X100)){
 800331a:	f8d8 3058 	ldr.w	r3, [r8, #88]	@ 0x58
 800331e:	f5b3 4f9e 	cmp.w	r3, #20224	@ 0x4f00
 8003322:	d1e9      	bne.n	80032f8 <StartGSM+0x798>
												count_mail_end_addr++;
 8003324:	3701      	adds	r7, #1
 8003326:	e7e7      	b.n	80032f8 <StartGSM+0x798>
											Debug_printf("Have cleared out all mail queue\n");
 8003328:	481d      	ldr	r0, [pc, #116]	@ (80033a0 <StartGSM+0x840>)
 800332a:	f001 ff15 	bl	8005158 <Debug_printf>
									if(count_mail_end_addr > 0){
 800332e:	2f00      	cmp	r7, #0
 8003330:	d0bc      	beq.n	80032ac <StartGSM+0x74c>
										if(start_addr_disconnect == (FLASH_END_ADDRESS - 0x100)){
 8003332:	4a0d      	ldr	r2, [pc, #52]	@ (8003368 <StartGSM+0x808>)
 8003334:	6813      	ldr	r3, [r2, #0]
 8003336:	f5b3 4f9e 	cmp.w	r3, #20224	@ 0x4f00
											start_addr_disconnect -= count_mail_end_addr * 128;
 800333a:	bf0d      	iteet	eq
 800333c:	6813      	ldreq	r3, [r2, #0]
											start_addr_disconnect -= (count_mail_end_addr - 1) * 128;
 800333e:	6811      	ldrne	r1, [r2, #0]
 8003340:	f107 33ff 	addne.w	r3, r7, #4294967295
											start_addr_disconnect -= count_mail_end_addr * 128;
 8003344:	eba3 13c7 	subeq.w	r3, r3, r7, lsl #7
											start_addr_disconnect -= (count_mail_end_addr - 1) * 128;
 8003348:	bf18      	it	ne
 800334a:	eba1 13c3 	subne.w	r3, r1, r3, lsl #7
 800334e:	6013      	str	r3, [r2, #0]
 8003350:	e7ac      	b.n	80032ac <StartGSM+0x74c>
									Debug_printf("\n--------------------SENDING ERROR -----------------------\n");
 8003352:	4818      	ldr	r0, [pc, #96]	@ (80033b4 <StartGSM+0x854>)
 8003354:	f001 ff00 	bl	8005158 <Debug_printf>
									process++;
 8003358:	2708      	movs	r7, #8
									break;
 800335a:	e7bf      	b.n	80032dc <StartGSM+0x77c>
 800335c:	08012ada 	.word	0x08012ada
 8003360:	20001240 	.word	0x20001240
 8003364:	20000ca8 	.word	0x20000ca8
 8003368:	20000e30 	.word	0x20000e30
 800336c:	08012ae9 	.word	0x08012ae9
 8003370:	20000e40 	.word	0x20000e40
 8003374:	20000e4c 	.word	0x20000e4c
 8003378:	08012b1a 	.word	0x08012b1a
 800337c:	08012b67 	.word	0x08012b67
 8003380:	20000e3c 	.word	0x20000e3c
 8003384:	20000e28 	.word	0x20000e28
 8003388:	0801296c 	.word	0x0801296c
 800338c:	080129ac 	.word	0x080129ac
 8003390:	20000bc8 	.word	0x20000bc8
 8003394:	08012bd3 	.word	0x08012bd3
 8003398:	20000c88 	.word	0x20000c88
 800339c:	08012bac 	.word	0x08012bac
 80033a0:	080129e0 	.word	0x080129e0
 80033a4:	20000e38 	.word	0x20000e38
 80033a8:	08012bea 	.word	0x08012bea
 80033ac:	080125d6 	.word	0x080125d6
 80033b0:	08012c5d 	.word	0x08012c5d
 80033b4:	08012c21 	.word	0x08012c21
 80033b8:	20000e44 	.word	0x20000e44
 80033bc:	200027c4 	.word	0x200027c4
				uint32_t freeStack1 = osThreadGetStackSpace(GSMHandle);
 80033c0:	4f11      	ldr	r7, [pc, #68]	@ (8003408 <StartGSM+0x8a8>)
 80033c2:	6838      	ldr	r0, [r7, #0]
 80033c4:	f004 fffc 	bl	80083c0 <osThreadGetStackSpace>
				Debug_printf("\n\n --------------Thread GSM %p is running low on stack: %04d bytes remaining----------\n\n",GSMHandle, freeStack1);
 80033c8:	6839      	ldr	r1, [r7, #0]
				uint32_t freeStack1 = osThreadGetStackSpace(GSMHandle);
 80033ca:	4602      	mov	r2, r0
				Debug_printf("\n\n --------------Thread GSM %p is running low on stack: %04d bytes remaining----------\n\n",GSMHandle, freeStack1);
 80033cc:	480f      	ldr	r0, [pc, #60]	@ (800340c <StartGSM+0x8ac>)
 80033ce:	f001 fec3 	bl	8005158 <Debug_printf>
				int result_close = close_connection(0);
 80033d2:	2000      	movs	r0, #0
 80033d4:	f7ff f964 	bl	80026a0 <close_connection>
					memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 80033d8:	f44f 72c0 	mov.w	r2, #384	@ 0x180
				if(result_close){
 80033dc:	4601      	mov	r1, r0
 80033de:	2800      	cmp	r0, #0
 80033e0:	f43f abf7 	beq.w	8002bd2 <StartGSM+0x72>
					memset(response, 0x00, SIM_RESPONSE_MAX_SIZE);
 80033e4:	2100      	movs	r1, #0
 80033e6:	480a      	ldr	r0, [pc, #40]	@ (8003410 <StartGSM+0x8b0>)
 80033e8:	f008 fde0 	bl	800bfac <memset>
					SIM_UART_ReInitializeRxDMA();
 80033ec:	f7fe f8b2 	bl	8001554 <SIM_UART_ReInitializeRxDMA>
						uart_transmit_string(&huart1,(uint8_t*) "REOPEN CONNECTION TO SERVER\n");
 80033f0:	4908      	ldr	r1, [pc, #32]	@ (8003414 <StartGSM+0x8b4>)
 80033f2:	4809      	ldr	r0, [pc, #36]	@ (8003418 <StartGSM+0x8b8>)
 80033f4:	f001 fea0 	bl	8005138 <uart_transmit_string>
						process = 4;
 80033f8:	e465      	b.n	8002cc6 <StartGSM+0x166>
 80033fa:	463d      	mov	r5, r7
				else process++;
 80033fc:	2702      	movs	r7, #2
 80033fe:	e43a      	b.n	8002c76 <StartGSM+0x116>
						process++;
 8003400:	2705      	movs	r7, #5
 8003402:	e438      	b.n	8002c76 <StartGSM+0x116>
					process++;
 8003404:	2706      	movs	r7, #6
 8003406:	e436      	b.n	8002c76 <StartGSM+0x116>
 8003408:	20001058 	.word	0x20001058
 800340c:	080123e4 	.word	0x080123e4
 8003410:	20000ca8 	.word	0x20000ca8
 8003414:	08012c9d 	.word	0x08012c9d
 8003418:	20001240 	.word	0x20001240

0800341c <initQueue_GSM>:


// Function to initialize the Queue_GSM
void initQueue_GSM(Queue_GSM* q) {
    q->front = 0;
    q->rear = -1;
 800341c:	2300      	movs	r3, #0
 800341e:	f04f 32ff 	mov.w	r2, #4294967295
 8003422:	e9c0 3280 	strd	r3, r2, [r0, #512]	@ 0x200
    q->size = 0;
 8003426:	f8c0 3208 	str.w	r3, [r0, #520]	@ 0x208
}
 800342a:	4770      	bx	lr

0800342c <enqueue_GSM>:
    return q->size == 0;
}

// Function to check if the Queue_GSM is full
int isFull_GSM(Queue_GSM* q) {
    return q->size == MAX_SIZE;
 800342c:	f8d0 2208 	ldr.w	r2, [r0, #520]	@ 0x208
}

// Function to enqueue (add) a uint32_t value to the Queue_GSM
void enqueue_GSM(Queue_GSM* q, uint32_t value) {
    if (isFull_GSM(q)) {
 8003430:	2a80      	cmp	r2, #128	@ 0x80
void enqueue_GSM(Queue_GSM* q, uint32_t value) {
 8003432:	b410      	push	{r4}
    if (isFull_GSM(q)) {
 8003434:	d104      	bne.n	8003440 <enqueue_GSM+0x14>
        Debug_printf("Queue_GSM is full\n");
 8003436:	480c      	ldr	r0, [pc, #48]	@ (8003468 <enqueue_GSM+0x3c>)
        return;
    }
    q->rear = (q->rear + 1) % MAX_SIZE; // Circular increment
    q->data[q->rear] = value;
    q->size++;
}
 8003438:	f85d 4b04 	ldr.w	r4, [sp], #4
        Debug_printf("Queue_GSM is full\n");
 800343c:	f001 be8c 	b.w	8005158 <Debug_printf>
    q->rear = (q->rear + 1) % MAX_SIZE; // Circular increment
 8003440:	f8d0 3204 	ldr.w	r3, [r0, #516]	@ 0x204
 8003444:	3301      	adds	r3, #1
 8003446:	425c      	negs	r4, r3
 8003448:	f004 047f 	and.w	r4, r4, #127	@ 0x7f
 800344c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003450:	bf58      	it	pl
 8003452:	4263      	negpl	r3, r4
    q->size++;
 8003454:	3201      	adds	r2, #1
    q->rear = (q->rear + 1) % MAX_SIZE; // Circular increment
 8003456:	f8c0 3204 	str.w	r3, [r0, #516]	@ 0x204
}
 800345a:	f85d 4b04 	ldr.w	r4, [sp], #4
    q->data[q->rear] = value;
 800345e:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
    q->size++;
 8003462:	f8c0 2208 	str.w	r2, [r0, #520]	@ 0x208
}
 8003466:	4770      	bx	lr
 8003468:	08012cba 	.word	0x08012cba

0800346c <clearQueue_GSM>:
    }
    return q->data[q->front];
}

// Function to clear the entire Queue_GSM
void clearQueue_GSM(Queue_GSM* q) {
 800346c:	b510      	push	{r4, lr}
	for (int i = 0; i < MAX_SIZE; i++) {
		q->data[i] = 0; // Clear the data explicitly
 800346e:	f44f 7200 	mov.w	r2, #512	@ 0x200
void clearQueue_GSM(Queue_GSM* q) {
 8003472:	4604      	mov	r4, r0
		q->data[i] = 0; // Clear the data explicitly
 8003474:	2100      	movs	r1, #0
 8003476:	f008 fd99 	bl	800bfac <memset>
	}
    q->front = 0;
    q->rear = -1;
 800347a:	2300      	movs	r3, #0
 800347c:	f04f 32ff 	mov.w	r2, #4294967295
 8003480:	e9c4 3280 	strd	r3, r2, [r4, #512]	@ 0x200
    q->size = 0;
 8003484:	f8c4 3208 	str.w	r3, [r4, #520]	@ 0x208
}
 8003488:	bd10      	pop	{r4, pc}
	...

0800348c <printQueue_GSM>:

// Function to print the Queue_GSM contents (for debugging)
int printQueue_GSM(Queue_GSM* q) {
 800348c:	b570      	push	{r4, r5, r6, lr}
    return q->size == 0;
 800348e:	f8d0 5208 	ldr.w	r5, [r0, #520]	@ 0x208
int printQueue_GSM(Queue_GSM* q) {
 8003492:	4604      	mov	r4, r0
    if (isEmpty_GSM(q)) {
 8003494:	b925      	cbnz	r5, 80034a0 <printQueue_GSM+0x14>
        Debug_printf("Queue_GSM is empty\n");
 8003496:	4813      	ldr	r0, [pc, #76]	@ (80034e4 <printQueue_GSM+0x58>)
 8003498:	f001 fe5e 	bl	8005158 <Debug_printf>
        int idx = (q->front + i) % MAX_SIZE;
        Debug_printf("Index %d: %08x\n", i, q->data[idx]);
    }
    Debug_printf("\n");
    return q->size;
}
 800349c:	4628      	mov	r0, r5
 800349e:	bd70      	pop	{r4, r5, r6, pc}
    Debug_printf("Queue_GSM contents: \n");
 80034a0:	4811      	ldr	r0, [pc, #68]	@ (80034e8 <printQueue_GSM+0x5c>)
        Debug_printf("Index %d: %08x\n", i, q->data[idx]);
 80034a2:	4e12      	ldr	r6, [pc, #72]	@ (80034ec <printQueue_GSM+0x60>)
    Debug_printf("Queue_GSM contents: \n");
 80034a4:	f001 fe58 	bl	8005158 <Debug_printf>
    for (int i = 0; i < q->size; i++) {
 80034a8:	2500      	movs	r5, #0
 80034aa:	f8d4 3208 	ldr.w	r3, [r4, #520]	@ 0x208
 80034ae:	42ab      	cmp	r3, r5
 80034b0:	dc05      	bgt.n	80034be <printQueue_GSM+0x32>
    Debug_printf("\n");
 80034b2:	480f      	ldr	r0, [pc, #60]	@ (80034f0 <printQueue_GSM+0x64>)
 80034b4:	f001 fe50 	bl	8005158 <Debug_printf>
    return q->size;
 80034b8:	f8d4 5208 	ldr.w	r5, [r4, #520]	@ 0x208
 80034bc:	e7ee      	b.n	800349c <printQueue_GSM+0x10>
        int idx = (q->front + i) % MAX_SIZE;
 80034be:	f8d4 3200 	ldr.w	r3, [r4, #512]	@ 0x200
 80034c2:	442b      	add	r3, r5
 80034c4:	425a      	negs	r2, r3
 80034c6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80034ca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80034ce:	bf58      	it	pl
 80034d0:	4253      	negpl	r3, r2
        Debug_printf("Index %d: %08x\n", i, q->data[idx]);
 80034d2:	4629      	mov	r1, r5
 80034d4:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
 80034d8:	4630      	mov	r0, r6
 80034da:	f001 fe3d 	bl	8005158 <Debug_printf>
    for (int i = 0; i < q->size; i++) {
 80034de:	3501      	adds	r5, #1
 80034e0:	e7e3      	b.n	80034aa <printQueue_GSM+0x1e>
 80034e2:	bf00      	nop
 80034e4:	08012ccd 	.word	0x08012ccd
 80034e8:	08012ce1 	.word	0x08012ce1
 80034ec:	08012cf7 	.word	0x08012cf7
 80034f0:	0801296a 	.word	0x0801296a

080034f4 <checkAddrExistInQueue>:

// Function to check if an address exists in the Queue_GSM
int checkAddrExistInQueue(uint32_t addr, Queue_GSM* q) {
 80034f4:	b538      	push	{r3, r4, r5, lr}
    for (int i = 0; i < q->size; i++) {
 80034f6:	f8d1 5208 	ldr.w	r5, [r1, #520]	@ 0x208
 80034fa:	2200      	movs	r2, #0
 80034fc:	4295      	cmp	r5, r2
 80034fe:	dc05      	bgt.n	800350c <checkAddrExistInQueue+0x18>
        }
//        if(addr > q->data[idx] && addr < end_addr){
//        	Debug_printf("INVALID ADDRESS: %08lx\n", addr);
//        }
    }
    Debug_printf("NOT FOUND ADDRESS: %08lx\n", addr);
 8003500:	4601      	mov	r1, r0
 8003502:	480d      	ldr	r0, [pc, #52]	@ (8003538 <checkAddrExistInQueue+0x44>)
 8003504:	f001 fe28 	bl	8005158 <Debug_printf>
    return 0;
 8003508:	2000      	movs	r0, #0
 800350a:	e012      	b.n	8003532 <checkAddrExistInQueue+0x3e>
        int idx = (q->front + i) % MAX_SIZE;
 800350c:	f8d1 3200 	ldr.w	r3, [r1, #512]	@ 0x200
 8003510:	4413      	add	r3, r2
 8003512:	425c      	negs	r4, r3
 8003514:	f004 047f 	and.w	r4, r4, #127	@ 0x7f
 8003518:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800351c:	bf58      	it	pl
 800351e:	4263      	negpl	r3, r4
        if (q->data[idx] == addr) {
 8003520:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003524:	4283      	cmp	r3, r0
 8003526:	d105      	bne.n	8003534 <checkAddrExistInQueue+0x40>
            Debug_printf("FOUND ADDRESS: %08lx\n", addr);
 8003528:	4601      	mov	r1, r0
 800352a:	4804      	ldr	r0, [pc, #16]	@ (800353c <checkAddrExistInQueue+0x48>)
 800352c:	f001 fe14 	bl	8005158 <Debug_printf>
            return 1;
 8003530:	2001      	movs	r0, #1
}
 8003532:	bd38      	pop	{r3, r4, r5, pc}
    for (int i = 0; i < q->size; i++) {
 8003534:	3201      	adds	r2, #1
 8003536:	e7e1      	b.n	80034fc <checkAddrExistInQueue+0x8>
 8003538:	08012d07 	.word	0x08012d07
 800353c:	08012d0b 	.word	0x08012d0b

08003540 <deleteMiddle_GSM>:

// Function to delete a parameter in the middle of the Queue_GSM
void deleteMiddle_GSM(Queue_GSM* q, int indexToDelete) {
 8003540:	b4f0      	push	{r4, r5, r6, r7}
    return q->size == 0;
 8003542:	f8d0 5208 	ldr.w	r5, [r0, #520]	@ 0x208
    if (isEmpty_GSM(q)) {
 8003546:	b91d      	cbnz	r5, 8003550 <deleteMiddle_GSM+0x10>
        Debug_printf("Queue_GSM is empty. Nothing to delete.\n");
 8003548:	481f      	ldr	r0, [pc, #124]	@ (80035c8 <deleteMiddle_GSM+0x88>)

    // Update rear and size
    q->rear = (q->rear - 1 + MAX_SIZE) % MAX_SIZE;
    q->size--;
    Debug_printf("Element at index %d deleted successfully.\n", indexToDelete);
}
 800354a:	bcf0      	pop	{r4, r5, r6, r7}
        Debug_printf("Invalid index. Cannot delete.\n");
 800354c:	f001 be04 	b.w	8005158 <Debug_printf>
    if (indexToDelete < 0 || indexToDelete >= q->size) {
 8003550:	2900      	cmp	r1, #0
 8003552:	db01      	blt.n	8003558 <deleteMiddle_GSM+0x18>
 8003554:	428d      	cmp	r5, r1
 8003556:	dc01      	bgt.n	800355c <deleteMiddle_GSM+0x1c>
        Debug_printf("Invalid index. Cannot delete.\n");
 8003558:	481c      	ldr	r0, [pc, #112]	@ (80035cc <deleteMiddle_GSM+0x8c>)
 800355a:	e7f6      	b.n	800354a <deleteMiddle_GSM+0xa>
    int actualIndex = (q->front + indexToDelete) % MAX_SIZE;
 800355c:	f8d0 3200 	ldr.w	r3, [r0, #512]	@ 0x200
 8003560:	440b      	add	r3, r1
 8003562:	425a      	negs	r2, r3
 8003564:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003568:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
    for (int i = 0; i < q->size - 1; i++) {
 800356c:	f04f 0600 	mov.w	r6, #0
    int actualIndex = (q->front + indexToDelete) % MAX_SIZE;
 8003570:	bf58      	it	pl
 8003572:	4253      	negpl	r3, r2
    for (int i = 0; i < q->size - 1; i++) {
 8003574:	3d01      	subs	r5, #1
 8003576:	42b5      	cmp	r5, r6
 8003578:	dc0f      	bgt.n	800359a <deleteMiddle_GSM+0x5a>
    q->rear = (q->rear - 1 + MAX_SIZE) % MAX_SIZE;
 800357a:	f8d0 3204 	ldr.w	r3, [r0, #516]	@ 0x204
 800357e:	337f      	adds	r3, #127	@ 0x7f
 8003580:	425a      	negs	r2, r3
 8003582:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003586:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800358a:	bf58      	it	pl
 800358c:	4253      	negpl	r3, r2
    q->size--;
 800358e:	e9c0 3581 	strd	r3, r5, [r0, #516]	@ 0x204
}
 8003592:	bcf0      	pop	{r4, r5, r6, r7}
    Debug_printf("Element at index %d deleted successfully.\n", indexToDelete);
 8003594:	480e      	ldr	r0, [pc, #56]	@ (80035d0 <deleteMiddle_GSM+0x90>)
 8003596:	f001 bddf 	b.w	8005158 <Debug_printf>
        int currentIdx = (actualIndex + i) % MAX_SIZE;
 800359a:	199a      	adds	r2, r3, r6
 800359c:	4254      	negs	r4, r2
 800359e:	f004 047f 	and.w	r4, r4, #127	@ 0x7f
 80035a2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80035a6:	bf58      	it	pl
 80035a8:	4262      	negpl	r2, r4
        int nextIdx = (currentIdx + 1) % MAX_SIZE;
 80035aa:	1c54      	adds	r4, r2, #1
 80035ac:	4267      	negs	r7, r4
 80035ae:	f007 077f 	and.w	r7, r7, #127	@ 0x7f
 80035b2:	f004 047f 	and.w	r4, r4, #127	@ 0x7f
 80035b6:	bf58      	it	pl
 80035b8:	427c      	negpl	r4, r7
    for (int i = 0; i < q->size - 1; i++) {
 80035ba:	3601      	adds	r6, #1
        q->data[currentIdx] = q->data[nextIdx];
 80035bc:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
 80035c0:	f840 4022 	str.w	r4, [r0, r2, lsl #2]
    for (int i = 0; i < q->size - 1; i++) {
 80035c4:	e7d7      	b.n	8003576 <deleteMiddle_GSM+0x36>
 80035c6:	bf00      	nop
 80035c8:	08012d21 	.word	0x08012d21
 80035cc:	08012d49 	.word	0x08012d49
 80035d0:	08012d68 	.word	0x08012d68

080035d4 <RingBufferDmaU8_initUSARTRx>:
// int daychange = 0;

uint8_t message1[] = "Hello from DSS\n";

void RingBufferDmaU8_initUSARTRx(RingBufferDmaU8_TypeDef* ring, UART_HandleTypeDef* husart, uint8_t* buffer, uint16_t size) // cai dat dma
{
 80035d4:	b410      	push	{r4}
 80035d6:	4604      	mov	r4, r0
 80035d8:	4608      	mov	r0, r1
  ring->buffer = buffer;
  ring->size = size;
 80035da:	80a3      	strh	r3, [r4, #4]
{
 80035dc:	4611      	mov	r1, r2
 80035de:	461a      	mov	r2, r3
  ring->tailPtr = buffer;
  ring->dmaHandle = husart->hdmarx;
 80035e0:	6f43      	ldr	r3, [r0, #116]	@ 0x74
  ring->buffer = buffer;
 80035e2:	6021      	str	r1, [r4, #0]
  ring->tailPtr = buffer;
 80035e4:	60a1      	str	r1, [r4, #8]
  ring->dmaHandle = husart->hdmarx;
 80035e6:	60e3      	str	r3, [r4, #12]
  HAL_UART_Receive_DMA(husart, buffer, size);
}
 80035e8:	f85d 4b04 	ldr.w	r4, [sp], #4
  HAL_UART_Receive_DMA(husart, buffer, size);
 80035ec:	f004 be32 	b.w	8008254 <HAL_UART_Receive_DMA>

080035f0 <set_time>:
#include "RTC.h"
#include "system_management.h"
#include "spi_flash.h"

void set_time (uint8_t hr, uint8_t min, uint8_t sec)
{
 80035f0:	b570      	push	{r4, r5, r6, lr}
 80035f2:	b086      	sub	sp, #24
 80035f4:	4606      	mov	r6, r0
 80035f6:	460d      	mov	r5, r1
 80035f8:	4614      	mov	r4, r2
	RTC_TimeTypeDef sTime = {0};
 80035fa:	2100      	movs	r1, #0
 80035fc:	2211      	movs	r2, #17
 80035fe:	f10d 0007 	add.w	r0, sp, #7
 8003602:	f008 fcd3 	bl	800bfac <memset>
	sTime.Hours = hr;
	sTime.Minutes = min;
	sTime.Seconds = sec;
	sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
	sTime.StoreOperation = RTC_STOREOPERATION_RESET;
	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8003606:	4808      	ldr	r0, [pc, #32]	@ (8003628 <set_time+0x38>)
	sTime.Hours = hr;
 8003608:	f88d 6004 	strb.w	r6, [sp, #4]
	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 800360c:	2200      	movs	r2, #0
 800360e:	a901      	add	r1, sp, #4
	sTime.Minutes = min;
 8003610:	f88d 5005 	strb.w	r5, [sp, #5]
	sTime.Seconds = sec;
 8003614:	f88d 4006 	strb.w	r4, [sp, #6]
	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8003618:	f003 fac0 	bl	8006b9c <HAL_RTC_SetTime>
 800361c:	b108      	cbz	r0, 8003622 <set_time+0x32>
	{
		Error_Handler();
 800361e:	f000 fb30 	bl	8003c82 <Error_Handler>
	}
}
 8003622:	b006      	add	sp, #24
 8003624:	bd70      	pop	{r4, r5, r6, pc}
 8003626:	bf00      	nop
 8003628:	200013dc 	.word	0x200013dc

0800362c <set_date>:

void set_date (uint8_t year, uint8_t month, uint8_t date)  // monday = 1
{
 800362c:	b507      	push	{r0, r1, r2, lr}
	RTC_DateTypeDef sDate = {0};
 800362e:	2300      	movs	r3, #0
	sDate.Month = month;
 8003630:	f88d 1005 	strb.w	r1, [sp, #5]
	sDate.Date = date;
 8003634:	f88d 2006 	strb.w	r2, [sp, #6]
	sDate.Year = year;
 8003638:	f88d 0007 	strb.w	r0, [sp, #7]
	if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 800363c:	461a      	mov	r2, r3
 800363e:	4806      	ldr	r0, [pc, #24]	@ (8003658 <set_date+0x2c>)
	RTC_DateTypeDef sDate = {0};
 8003640:	f88d 3004 	strb.w	r3, [sp, #4]
	if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8003644:	a901      	add	r1, sp, #4
 8003646:	f003 fb03 	bl	8006c50 <HAL_RTC_SetDate>
 800364a:	b108      	cbz	r0, 8003650 <set_date+0x24>
	{
		Error_Handler();
 800364c:	f000 fb19 	bl	8003c82 <Error_Handler>
	}
}
 8003650:	b003      	add	sp, #12
 8003652:	f85d fb04 	ldr.w	pc, [sp], #4
 8003656:	bf00      	nop
 8003658:	200013dc 	.word	0x200013dc

0800365c <get_RTC_time_date>:

void get_RTC_time_date(RMCSTRUCT *rmc)
{
 800365c:	b5f0      	push	{r4, r5, r6, r7, lr}
	char date[12]; // "YYYY-MM-DD" format, 10 characters + null terminator
	RTC_DateTypeDef gDate;
	RTC_TimeTypeDef gTime;

	  /* Get the RTC current Time */
	HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BIN);
 800365e:	4d29      	ldr	r5, [pc, #164]	@ (8003704 <get_RTC_time_date+0xa8>)
{
 8003660:	b0b3      	sub	sp, #204	@ 0xcc
 8003662:	4604      	mov	r4, r0
	HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BIN);
 8003664:	a90d      	add	r1, sp, #52	@ 0x34
 8003666:	2200      	movs	r2, #0
 8003668:	4628      	mov	r0, r5
 800366a:	f003 fb41 	bl	8006cf0 <HAL_RTC_GetTime>
	/* Get the RTC current Date */
	HAL_RTC_GetDate(&hrtc, &gDate, RTC_FORMAT_BIN);
 800366e:	a906      	add	r1, sp, #24
 8003670:	2200      	movs	r2, #0
 8003672:	4628      	mov	r0, r5
 8003674:	f003 fb5f 	bl	8006d36 <HAL_RTC_GetDate>

  /* Display time Format: hh:mm:ss */
  /* Format time as "HH:MM:SS" */
	snprintf(time, sizeof(time), "%02d:%02d:%02d\n", gTime.Hours, gTime.Minutes, gTime.Seconds);
 8003678:	f89d 3036 	ldrb.w	r3, [sp, #54]	@ 0x36
	uart_transmit_string(&huart1,(uint8_t*) time);
 800367c:	4d22      	ldr	r5, [pc, #136]	@ (8003708 <get_RTC_time_date+0xac>)
	snprintf(time, sizeof(time), "%02d:%02d:%02d\n", gTime.Hours, gTime.Minutes, gTime.Seconds);
 800367e:	9301      	str	r3, [sp, #4]
 8003680:	f89d 3035 	ldrb.w	r3, [sp, #53]	@ 0x35
 8003684:	4a21      	ldr	r2, [pc, #132]	@ (800370c <get_RTC_time_date+0xb0>)
 8003686:	9300      	str	r3, [sp, #0]
 8003688:	210a      	movs	r1, #10
 800368a:	f89d 3034 	ldrb.w	r3, [sp, #52]	@ 0x34
 800368e:	a807      	add	r0, sp, #28
 8003690:	f008 fb90 	bl	800bdb4 <sniprintf>
	uart_transmit_string(&huart1,(uint8_t*) time);
 8003694:	a907      	add	r1, sp, #28
 8003696:	4628      	mov	r0, r5
 8003698:	f001 fd4e 	bl	8005138 <uart_transmit_string>

	/* Format date as "YYYY-MM-DD" */
	snprintf(date, sizeof(date), "20%02d-%02d-%02d\n", gDate.Year, gDate.Month, gDate.Date);
 800369c:	f89d 301a 	ldrb.w	r3, [sp, #26]
 80036a0:	9301      	str	r3, [sp, #4]
 80036a2:	f89d 3019 	ldrb.w	r3, [sp, #25]
 80036a6:	4a1a      	ldr	r2, [pc, #104]	@ (8003710 <get_RTC_time_date+0xb4>)
 80036a8:	9300      	str	r3, [sp, #0]
 80036aa:	210c      	movs	r1, #12
 80036ac:	f89d 301b 	ldrb.w	r3, [sp, #27]
 80036b0:	a80a      	add	r0, sp, #40	@ 0x28
 80036b2:	f008 fb7f 	bl	800bdb4 <sniprintf>
	uart_transmit_string(&huart1,(uint8_t*) date);
 80036b6:	a90a      	add	r1, sp, #40	@ 0x28
 80036b8:	4628      	mov	r0, r5
 80036ba:	f001 fd3d 	bl	8005138 <uart_transmit_string>

	rmc->date.Yr = gDate.Year;
	rmc->date.Mon = gDate.Month;
	rmc->date.Day = gDate.Date;
 80036be:	f89d 101a 	ldrb.w	r1, [sp, #26]
	rmc->tim.hour = gTime.Hours;
 80036c2:	f89d 0034 	ldrb.w	r0, [sp, #52]	@ 0x34
	rmc->tim.min = gTime.Minutes;
 80036c6:	f89d 6035 	ldrb.w	r6, [sp, #53]	@ 0x35
	rmc->tim.sec = gTime.Seconds;
 80036ca:	f89d 7036 	ldrb.w	r7, [sp, #54]	@ 0x36
	rmc->date.Mon = gDate.Month;
 80036ce:	f89d 2019 	ldrb.w	r2, [sp, #25]
	rmc->date.Yr = gDate.Year;
 80036d2:	f89d 301b 	ldrb.w	r3, [sp, #27]
 80036d6:	61a3      	str	r3, [r4, #24]
	rmc->date.Mon = gDate.Month;
 80036d8:	6162      	str	r2, [r4, #20]
	rmc->date.Day = gDate.Date;
 80036da:	6121      	str	r1, [r4, #16]
	rmc->tim.hour = gTime.Hours;
 80036dc:	6020      	str	r0, [r4, #0]
	rmc->tim.min = gTime.Minutes;
 80036de:	6066      	str	r6, [r4, #4]
	rmc->tim.sec = gTime.Seconds;
 80036e0:	60a7      	str	r7, [r4, #8]

	//save_rmc_to_location_info(location_info);
	snprintf((char*)output_buffer, 128, "Time to GMT+8 saved to RMC: 20%02d/%02d/%02d, %02d:%02d:%02d\n", rmc->date.Yr, rmc->date.Mon, rmc->date.Day, rmc->tim.hour, rmc->tim.min, rmc->tim.sec);
 80036e2:	e9cd 1001 	strd	r1, r0, [sp, #4]
 80036e6:	9200      	str	r2, [sp, #0]
 80036e8:	e9cd 6703 	strd	r6, r7, [sp, #12]
 80036ec:	4a09      	ldr	r2, [pc, #36]	@ (8003714 <get_RTC_time_date+0xb8>)
 80036ee:	2180      	movs	r1, #128	@ 0x80
 80036f0:	a812      	add	r0, sp, #72	@ 0x48
 80036f2:	f008 fb5f 	bl	800bdb4 <sniprintf>
	uart_transmit_string(&huart1, (uint8_t*) output_buffer);
 80036f6:	a912      	add	r1, sp, #72	@ 0x48
 80036f8:	4628      	mov	r0, r5
 80036fa:	f001 fd1d 	bl	8005138 <uart_transmit_string>
}
 80036fe:	b033      	add	sp, #204	@ 0xcc
 8003700:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003702:	bf00      	nop
 8003704:	200013dc 	.word	0x200013dc
 8003708:	20001240 	.word	0x20001240
 800370c:	08012147 	.word	0x08012147
 8003710:	08012d93 	.word	0x08012d93
 8003714:	08012da5 	.word	0x08012da5

08003718 <vApplicationStackOverflowHook>:
    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

void vApplicationStackOverflowHook(osThreadId_t xTask, signed char *pcTaskName) {
 8003718:	b508      	push	{r3, lr}
    // Log the error
    Debug_printf("Stack overflow detected in task: %s\n", pcTaskName);
 800371a:	4805      	ldr	r0, [pc, #20]	@ (8003730 <vApplicationStackOverflowHook+0x18>)
//    osThreadId_t taskID = (osThreadId_t)xTask;
//    osThreadTerminate(taskID);

    while (1) {
        // Infinite loop for debugging
    	Debug_printf("Stack overflow detected in task: %s\n", pcTaskName);
 800371c:	4d04      	ldr	r5, [pc, #16]	@ (8003730 <vApplicationStackOverflowHook+0x18>)
void vApplicationStackOverflowHook(osThreadId_t xTask, signed char *pcTaskName) {
 800371e:	460c      	mov	r4, r1
    Debug_printf("Stack overflow detected in task: %s\n", pcTaskName);
 8003720:	f001 fd1a 	bl	8005158 <Debug_printf>
    	Debug_printf("Stack overflow detected in task: %s\n", pcTaskName);
 8003724:	4621      	mov	r1, r4
 8003726:	4628      	mov	r0, r5
 8003728:	f001 fd16 	bl	8005158 <Debug_printf>
    while (1) {
 800372c:	e7fa      	b.n	8003724 <vApplicationStackOverflowHook+0xc>
 800372e:	bf00      	nop
 8003730:	08012de3 	.word	0x08012de3

08003734 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003734:	b500      	push	{lr}
 8003736:	b09f      	sub	sp, #124	@ 0x7c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003738:	2228      	movs	r2, #40	@ 0x28
 800373a:	2100      	movs	r1, #0
 800373c:	a805      	add	r0, sp, #20
 800373e:	f008 fc35 	bl	800bfac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003742:	2214      	movs	r2, #20
 8003744:	2100      	movs	r1, #0
 8003746:	4668      	mov	r0, sp
 8003748:	f008 fc30 	bl	800bfac <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800374c:	223c      	movs	r2, #60	@ 0x3c
 800374e:	2100      	movs	r1, #0
 8003750:	eb0d 0002 	add.w	r0, sp, r2
 8003754:	f008 fc2a 	bl	800bfac <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8003758:	f002 fd04 	bl	8006164 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800375c:	4a1d      	ldr	r2, [pc, #116]	@ (80037d4 <SystemClock_Config+0xa0>)
 800375e:	6a13      	ldr	r3, [r2, #32]
 8003760:	f023 0318 	bic.w	r3, r3, #24
 8003764:	6213      	str	r3, [r2, #32]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 8003766:	2306      	movs	r3, #6
 8003768:	9305      	str	r3, [sp, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800376a:	2301      	movs	r3, #1
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800376c:	e9cd 3308 	strd	r3, r3, [sp, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003770:	2310      	movs	r3, #16
 8003772:	930a      	str	r3, [sp, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003774:	2002      	movs	r0, #2
 8003776:	2300      	movs	r3, #0
 8003778:	e9cd 030c 	strd	r0, r3, [sp, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 800377c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003780:	a805      	add	r0, sp, #20
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 8003782:	930e      	str	r3, [sp, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003784:	f002 fcf6 	bl	8006174 <HAL_RCC_OscConfig>
 8003788:	4601      	mov	r1, r0
 800378a:	b108      	cbz	r0, 8003790 <SystemClock_Config+0x5c>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800378c:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800378e:	e7fe      	b.n	800378e <SystemClock_Config+0x5a>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003790:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8003792:	e9cd 3000 	strd	r3, r0, [sp]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003796:	e9cd 0002 	strd	r0, r0, [sp, #8]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800379a:	9004      	str	r0, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800379c:	4668      	mov	r0, sp
 800379e:	f002 ff69 	bl	8006674 <HAL_RCC_ClockConfig>
 80037a2:	b108      	cbz	r0, 80037a8 <SystemClock_Config+0x74>
 80037a4:	b672      	cpsid	i
  while (1)
 80037a6:	e7fe      	b.n	80037a6 <SystemClock_Config+0x72>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 80037a8:	4b0b      	ldr	r3, [pc, #44]	@ (80037d8 <SystemClock_Config+0xa4>)
 80037aa:	930f      	str	r3, [sp, #60]	@ 0x3c
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80037ac:	e9cd 0011 	strd	r0, r0, [sp, #68]	@ 0x44
  PeriphClkInit.Adc34ClockSelection = RCC_ADC34PLLCLK_DIV1;
 80037b0:	f44f 7380 	mov.w	r3, #256	@ 0x100
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80037b4:	9013      	str	r0, [sp, #76]	@ 0x4c
  PeriphClkInit.Adc34ClockSelection = RCC_ADC34PLLCLK_DIV1;
 80037b6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80037ba:	a80f      	add	r0, sp, #60	@ 0x3c
  PeriphClkInit.Adc34ClockSelection = RCC_ADC34PLLCLK_DIV1;
 80037bc:	e9cd 3218 	strd	r3, r2, [sp, #96]	@ 0x60
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80037c0:	9310      	str	r3, [sp, #64]	@ 0x40
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80037c2:	f003 f84d 	bl	8006860 <HAL_RCCEx_PeriphCLKConfig>
 80037c6:	b108      	cbz	r0, 80037cc <SystemClock_Config+0x98>
 80037c8:	b672      	cpsid	i
  while (1)
 80037ca:	e7fe      	b.n	80037ca <SystemClock_Config+0x96>
}
 80037cc:	b01f      	add	sp, #124	@ 0x7c
 80037ce:	f85d fb04 	ldr.w	pc, [sp], #4
 80037d2:	bf00      	nop
 80037d4:	40021000 	.word	0x40021000
 80037d8:	00010187 	.word	0x00010187

080037dc <main>:
{
 80037dc:	b580      	push	{r7, lr}
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80037de:	4db8      	ldr	r5, [pc, #736]	@ (8003ac0 <main+0x2e4>)
{
 80037e0:	b08e      	sub	sp, #56	@ 0x38
  HAL_Init();
 80037e2:	f001 fd5b 	bl	800529c <HAL_Init>
  SystemClock_Config();
 80037e6:	f7ff ffa5 	bl	8003734 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037ea:	2214      	movs	r2, #20
 80037ec:	2100      	movs	r1, #0
 80037ee:	a808      	add	r0, sp, #32
 80037f0:	f008 fbdc 	bl	800bfac <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80037f4:	696b      	ldr	r3, [r5, #20]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
 80037f6:	48b3      	ldr	r0, [pc, #716]	@ (8003ac4 <main+0x2e8>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80037f8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80037fc:	616b      	str	r3, [r5, #20]
 80037fe:	696b      	ldr	r3, [r5, #20]
 8003800:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003804:	9302      	str	r3, [sp, #8]
 8003806:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003808:	696b      	ldr	r3, [r5, #20]
 800380a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800380e:	616b      	str	r3, [r5, #20]
 8003810:	696b      	ldr	r3, [r5, #20]
 8003812:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003816:	9303      	str	r3, [sp, #12]
 8003818:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800381a:	696b      	ldr	r3, [r5, #20]
 800381c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003820:	616b      	str	r3, [r5, #20]
 8003822:	696b      	ldr	r3, [r5, #20]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
 8003824:	2201      	movs	r2, #1
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003826:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
 800382a:	4611      	mov	r1, r2
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800382c:	9304      	str	r3, [sp, #16]
 800382e:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
 8003830:	f002 fc92 	bl	8006158 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_6
 8003834:	48a3      	ldr	r0, [pc, #652]	@ (8003ac4 <main+0x2e8>)
 8003836:	2200      	movs	r2, #0
 8003838:	f240 2156 	movw	r1, #598	@ 0x256
 800383c:	f002 fc8c 	bl	8006158 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 8003840:	48a1      	ldr	r0, [pc, #644]	@ (8003ac8 <main+0x2ec>)
 8003842:	2200      	movs	r2, #0
 8003844:	2104      	movs	r1, #4
 8003846:	f002 fc87 	bl	8006158 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 800384a:	489f      	ldr	r0, [pc, #636]	@ (8003ac8 <main+0x2ec>)
 800384c:	2201      	movs	r2, #1
 800384e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003852:	f002 fc81 	bl	8006158 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
 8003856:	2201      	movs	r2, #1
 8003858:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800385c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003860:	2400      	movs	r4, #0
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
 8003862:	f002 fc79 	bl	8006158 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003866:	2701      	movs	r7, #1
 8003868:	f240 2303 	movw	r3, #515	@ 0x203
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800386c:	4895      	ldr	r0, [pc, #596]	@ (8003ac4 <main+0x2e8>)
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800386e:	970a      	str	r7, [sp, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003870:	a908      	add	r1, sp, #32
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003872:	e9cd 3708 	strd	r3, r7, [sp, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003876:	940b      	str	r4, [sp, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003878:	f002 fbaa 	bl	8005fd0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_6;
 800387c:	2354      	movs	r3, #84	@ 0x54
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800387e:	4891      	ldr	r0, [pc, #580]	@ (8003ac4 <main+0x2e8>)
 8003880:	a908      	add	r1, sp, #32
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003882:	e9cd 3708 	strd	r3, r7, [sp, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003886:	e9cd 440a 	strd	r4, r4, [sp, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800388a:	f002 fba1 	bl	8005fd0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 800388e:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003890:	488d      	ldr	r0, [pc, #564]	@ (8003ac8 <main+0x2ec>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003892:	940a      	str	r4, [sp, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003894:	a908      	add	r1, sp, #32
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003896:	e9cd 3408 	strd	r3, r4, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800389a:	f002 fb99 	bl	8005fd0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800389e:	2304      	movs	r3, #4
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80038a0:	4889      	ldr	r0, [pc, #548]	@ (8003ac8 <main+0x2ec>)
 80038a2:	a908      	add	r1, sp, #32
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80038a4:	e9cd 3708 	strd	r3, r7, [sp, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80038a8:	f04f 0803 	mov.w	r8, #3
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038ac:	e9cd 440a 	strd	r4, r4, [sp, #40]	@ 0x28
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80038b0:	f44f 5680 	mov.w	r6, #4096	@ 0x1000
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80038b4:	f002 fb8c 	bl	8005fd0 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80038b8:	4883      	ldr	r0, [pc, #524]	@ (8003ac8 <main+0x2ec>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80038ba:	f8cd 802c 	str.w	r8, [sp, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80038be:	a908      	add	r1, sp, #32
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80038c0:	e9cd 6708 	strd	r6, r7, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80038c4:	970a      	str	r7, [sp, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80038c6:	f002 fb83 	bl	8005fd0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80038ca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038ce:	a908      	add	r1, sp, #32
 80038d0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80038d4:	e9cd 3708 	strd	r3, r7, [sp, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80038d8:	e9cd 780a 	strd	r7, r8, [sp, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038dc:	f002 fb78 	bl	8005fd0 <HAL_GPIO_Init>
  __HAL_RCC_DMA1_CLK_ENABLE();
 80038e0:	696b      	ldr	r3, [r5, #20]
 80038e2:	433b      	orrs	r3, r7
 80038e4:	616b      	str	r3, [r5, #20]
 80038e6:	696b      	ldr	r3, [r5, #20]
 80038e8:	403b      	ands	r3, r7
 80038ea:	9300      	str	r3, [sp, #0]
 80038ec:	9b00      	ldr	r3, [sp, #0]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80038ee:	696b      	ldr	r3, [r5, #20]
 80038f0:	f043 0302 	orr.w	r3, r3, #2
 80038f4:	616b      	str	r3, [r5, #20]
 80038f6:	696b      	ldr	r3, [r5, #20]
  hrtc.Instance = RTC;
 80038f8:	4d74      	ldr	r5, [pc, #464]	@ (8003acc <main+0x2f0>)
  __HAL_RCC_DMA2_CLK_ENABLE();
 80038fa:	f003 0302 	and.w	r3, r3, #2
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 5, 0);
 80038fe:	4622      	mov	r2, r4
 8003900:	2105      	movs	r1, #5
  __HAL_RCC_DMA2_CLK_ENABLE();
 8003902:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 5, 0);
 8003904:	200d      	movs	r0, #13
  __HAL_RCC_DMA2_CLK_ENABLE();
 8003906:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 5, 0);
 8003908:	f002 fa3e 	bl	8005d88 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 800390c:	200d      	movs	r0, #13
 800390e:	f002 fa6d 	bl	8005dec <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 5, 0);
 8003912:	4622      	mov	r2, r4
 8003914:	2105      	movs	r1, #5
 8003916:	200f      	movs	r0, #15
 8003918:	f002 fa36 	bl	8005d88 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 800391c:	200f      	movs	r0, #15
 800391e:	f002 fa65 	bl	8005dec <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 5, 0);
 8003922:	4622      	mov	r2, r4
 8003924:	2105      	movs	r1, #5
 8003926:	2010      	movs	r0, #16
 8003928:	f002 fa2e 	bl	8005d88 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 800392c:	2010      	movs	r0, #16
 800392e:	f002 fa5d 	bl	8005dec <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Channel1_IRQn, 5, 0);
 8003932:	4622      	mov	r2, r4
 8003934:	2105      	movs	r1, #5
 8003936:	2038      	movs	r0, #56	@ 0x38
 8003938:	f002 fa26 	bl	8005d88 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 800393c:	2038      	movs	r0, #56	@ 0x38
 800393e:	f002 fa55 	bl	8005dec <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Channel5_IRQn, 5, 0);
 8003942:	4622      	mov	r2, r4
 8003944:	2105      	movs	r1, #5
 8003946:	203c      	movs	r0, #60	@ 0x3c
 8003948:	f002 fa1e 	bl	8005d88 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel5_IRQn);
 800394c:	203c      	movs	r0, #60	@ 0x3c
 800394e:	f002 fa4d 	bl	8005dec <HAL_NVIC_EnableIRQ>
  RTC_TimeTypeDef sTime = {0};
 8003952:	2214      	movs	r2, #20
 8003954:	4621      	mov	r1, r4
 8003956:	a808      	add	r0, sp, #32
 8003958:	f008 fb28 	bl	800bfac <memset>
  hrtc.Instance = RTC;
 800395c:	4b5c      	ldr	r3, [pc, #368]	@ (8003ad0 <main+0x2f4>)
  RTC_DateTypeDef sDate = {0};
 800395e:	9405      	str	r4, [sp, #20]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8003960:	e9c5 3400 	strd	r3, r4, [r5]
  hrtc.Init.SynchPrediv = 255;
 8003964:	f04f 087f 	mov.w	r8, #127	@ 0x7f
 8003968:	23ff      	movs	r3, #255	@ 0xff
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800396a:	4628      	mov	r0, r5
  hrtc.Init.SynchPrediv = 255;
 800396c:	e9c5 8302 	strd	r8, r3, [r5, #8]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8003970:	e9c5 4404 	strd	r4, r4, [r5, #16]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8003974:	61ac      	str	r4, [r5, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8003976:	f003 f8be 	bl	8006af6 <HAL_RTC_Init>
 800397a:	4602      	mov	r2, r0
 800397c:	b108      	cbz	r0, 8003982 <main+0x1a6>
 800397e:	b672      	cpsid	i
  while (1)
 8003980:	e7fe      	b.n	8003980 <main+0x1a4>
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8003982:	e9cd 000b 	strd	r0, r0, [sp, #44]	@ 0x2c
  sTime.Hours = 0;
 8003986:	f8ad 0020 	strh.w	r0, [sp, #32]
  sTime.Seconds = 0;
 800398a:	f88d 0022 	strb.w	r0, [sp, #34]	@ 0x22
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 800398e:	a908      	add	r1, sp, #32
 8003990:	4628      	mov	r0, r5
 8003992:	f003 f903 	bl	8006b9c <HAL_RTC_SetTime>
 8003996:	4602      	mov	r2, r0
 8003998:	b108      	cbz	r0, 800399e <main+0x1c2>
 800399a:	b672      	cpsid	i
  while (1)
 800399c:	e7fe      	b.n	800399c <main+0x1c0>
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800399e:	4b4d      	ldr	r3, [pc, #308]	@ (8003ad4 <main+0x2f8>)
 80039a0:	9305      	str	r3, [sp, #20]
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 80039a2:	a905      	add	r1, sp, #20
 80039a4:	4628      	mov	r0, r5
 80039a6:	f003 f953 	bl	8006c50 <HAL_RTC_SetDate>
 80039aa:	4603      	mov	r3, r0
 80039ac:	b108      	cbz	r0, 80039b2 <main+0x1d6>
 80039ae:	b672      	cpsid	i
  while (1)
 80039b0:	e7fe      	b.n	80039b0 <main+0x1d4>
  hspi1.Instance = SPI1;
 80039b2:	4849      	ldr	r0, [pc, #292]	@ (8003ad8 <main+0x2fc>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80039b4:	f8df e140 	ldr.w	lr, [pc, #320]	@ 8003af8 <main+0x31c>
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80039b8:	6083      	str	r3, [r0, #8]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80039ba:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80039be:	e9c0 e200 	strd	lr, r2, [r0]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80039c2:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80039c6:	e9c0 2303 	strd	r2, r3, [r0, #12]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80039ca:	2510      	movs	r5, #16
 80039cc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80039d0:	e9c0 2506 	strd	r2, r5, [r0, #24]
  hspi1.Init.CRCPolynomial = 7;
 80039d4:	2207      	movs	r2, #7
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80039d6:	e9c0 3308 	strd	r3, r3, [r0, #32]
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80039da:	e9c0 230b 	strd	r2, r3, [r0, #44]	@ 0x2c
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80039de:	6143      	str	r3, [r0, #20]
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80039e0:	6283      	str	r3, [r0, #40]	@ 0x28
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80039e2:	2308      	movs	r3, #8
 80039e4:	6343      	str	r3, [r0, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80039e6:	f003 fad2 	bl	8006f8e <HAL_SPI_Init>
 80039ea:	4603      	mov	r3, r0
 80039ec:	b108      	cbz	r0, 80039f2 <main+0x216>
 80039ee:	b672      	cpsid	i
  while (1)
 80039f0:	e7fe      	b.n	80039f0 <main+0x214>
  huart1.Instance = USART1;
 80039f2:	483a      	ldr	r0, [pc, #232]	@ (8003adc <main+0x300>)
  huart1.Init.BaudRate = 115200;
 80039f4:	4a3a      	ldr	r2, [pc, #232]	@ (8003ae0 <main+0x304>)
  huart1.Init.Parity = UART_PARITY_NONE;
 80039f6:	6103      	str	r3, [r0, #16]
  huart1.Init.BaudRate = 115200;
 80039f8:	f44f 34e1 	mov.w	r4, #115200	@ 0x1c200
  huart1.Init.Mode = UART_MODE_TX_RX;
 80039fc:	270c      	movs	r7, #12
  huart1.Init.StopBits = UART_STOPBITS_1;
 80039fe:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003a02:	e9c0 7305 	strd	r7, r3, [r0, #20]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003a06:	e9c0 3307 	strd	r3, r3, [r0, #28]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003a0a:	6243      	str	r3, [r0, #36]	@ 0x24
  huart1.Init.BaudRate = 115200;
 8003a0c:	e9c0 2400 	strd	r2, r4, [r0]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003a10:	f004 fba4 	bl	800815c <HAL_UART_Init>
 8003a14:	4603      	mov	r3, r0
 8003a16:	b108      	cbz	r0, 8003a1c <main+0x240>
 8003a18:	b672      	cpsid	i
  while (1)
 8003a1a:	e7fe      	b.n	8003a1a <main+0x23e>
  huart2.Instance = USART2;
 8003a1c:	4831      	ldr	r0, [pc, #196]	@ (8003ae4 <main+0x308>)
  huart2.Init.BaudRate = 9600;
 8003a1e:	f8df c0dc 	ldr.w	ip, [pc, #220]	@ 8003afc <main+0x320>
 8003a22:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003a26:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003a2a:	e9c0 3704 	strd	r3, r7, [r0, #16]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003a2e:	e9c0 3306 	strd	r3, r3, [r0, #24]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003a32:	e9c0 3308 	strd	r3, r3, [r0, #32]
  huart2.Init.BaudRate = 9600;
 8003a36:	e9c0 c200 	strd	ip, r2, [r0]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003a3a:	f004 fb8f 	bl	800815c <HAL_UART_Init>
 8003a3e:	4603      	mov	r3, r0
 8003a40:	b108      	cbz	r0, 8003a46 <main+0x26a>
 8003a42:	b672      	cpsid	i
  while (1)
 8003a44:	e7fe      	b.n	8003a44 <main+0x268>
  huart3.Instance = USART3;
 8003a46:	4828      	ldr	r0, [pc, #160]	@ (8003ae8 <main+0x30c>)
 8003a48:	4a28      	ldr	r2, [pc, #160]	@ (8003aec <main+0x310>)
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003a4a:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart3.Init.BaudRate = 115200;
 8003a4e:	e9c0 2400 	strd	r2, r4, [r0]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003a52:	e9c0 3704 	strd	r3, r7, [r0, #16]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003a56:	e9c0 3306 	strd	r3, r3, [r0, #24]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003a5a:	e9c0 3308 	strd	r3, r3, [r0, #32]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8003a5e:	f004 fb7d 	bl	800815c <HAL_UART_Init>
 8003a62:	4604      	mov	r4, r0
 8003a64:	b108      	cbz	r0, 8003a6a <main+0x28e>
 8003a66:	b672      	cpsid	i
  while (1)
 8003a68:	e7fe      	b.n	8003a68 <main+0x28c>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003a6a:	462a      	mov	r2, r5
 8003a6c:	4601      	mov	r1, r0
 8003a6e:	a808      	add	r0, sp, #32
 8003a70:	f008 fa9c 	bl	800bfac <memset>
  htim3.Instance = TIM3;
 8003a74:	4d1e      	ldr	r5, [pc, #120]	@ (8003af0 <main+0x314>)
  htim3.Init.Prescaler = 8000;
 8003a76:	481f      	ldr	r0, [pc, #124]	@ (8003af4 <main+0x318>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003a78:	9407      	str	r4, [sp, #28]
  htim3.Init.Prescaler = 8000;
 8003a7a:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8003a7e:	e9c5 0300 	strd	r0, r3, [r5]
  htim3.Init.Period = 65535;
 8003a82:	f64f 73ff 	movw	r3, #65535	@ 0xffff
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003a86:	4628      	mov	r0, r5
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003a88:	e9cd 4405 	strd	r4, r4, [sp, #20]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003a8c:	e9c5 3403 	strd	r3, r4, [r5, #12]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003a90:	60ac      	str	r4, [r5, #8]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003a92:	61ac      	str	r4, [r5, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003a94:	f003 ff0a 	bl	80078ac <HAL_TIM_Base_Init>
 8003a98:	b108      	cbz	r0, 8003a9e <main+0x2c2>
 8003a9a:	b672      	cpsid	i
  while (1)
 8003a9c:	e7fe      	b.n	8003a9c <main+0x2c0>
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003a9e:	a908      	add	r1, sp, #32
 8003aa0:	4628      	mov	r0, r5
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003aa2:	9608      	str	r6, [sp, #32]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003aa4:	f003 ff3c 	bl	8007920 <HAL_TIM_ConfigClockSource>
 8003aa8:	b108      	cbz	r0, 8003aae <main+0x2d2>
 8003aaa:	b672      	cpsid	i
  while (1)
 8003aac:	e7fe      	b.n	8003aac <main+0x2d0>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003aae:	9005      	str	r0, [sp, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003ab0:	9007      	str	r0, [sp, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003ab2:	a905      	add	r1, sp, #20
 8003ab4:	4628      	mov	r0, r5
 8003ab6:	f003 ffcd 	bl	8007a54 <HAL_TIMEx_MasterConfigSynchronization>
 8003aba:	b308      	cbz	r0, 8003b00 <main+0x324>
 8003abc:	b672      	cpsid	i
  while (1)
 8003abe:	e7fe      	b.n	8003abe <main+0x2e2>
 8003ac0:	40021000 	.word	0x40021000
 8003ac4:	48000800 	.word	0x48000800
 8003ac8:	48000400 	.word	0x48000400
 8003acc:	200013dc 	.word	0x200013dc
 8003ad0:	40002800 	.word	0x40002800
 8003ad4:	00010101 	.word	0x00010101
 8003ad8:	20001378 	.word	0x20001378
 8003adc:	20001240 	.word	0x20001240
 8003ae0:	40013800 	.word	0x40013800
 8003ae4:	200011b8 	.word	0x200011b8
 8003ae8:	20001130 	.word	0x20001130
 8003aec:	40004800 	.word	0x40004800
 8003af0:	200012c8 	.word	0x200012c8
 8003af4:	40000400 	.word	0x40000400
 8003af8:	40013000 	.word	0x40013000
 8003afc:	40004400 	.word	0x40004400
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8003b00:	4c4d      	ldr	r4, [pc, #308]	@ (8003c38 <main+0x45c>)
  ADC_ChannelConfTypeDef sConfig = {0};
 8003b02:	2218      	movs	r2, #24
 8003b04:	2100      	movs	r1, #0
 8003b06:	a808      	add	r0, sp, #32
 8003b08:	f008 fa50 	bl	800bfac <memset>
  hadc2.Instance = ADC2;
 8003b0c:	4a4b      	ldr	r2, [pc, #300]	@ (8003c3c <main+0x460>)
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8003b0e:	2300      	movs	r3, #0
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003b10:	2601      	movs	r6, #1
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003b12:	2704      	movs	r7, #4
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8003b14:	4620      	mov	r0, r4
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8003b16:	e9c4 2300 	strd	r2, r3, [r4]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003b1a:	e9c4 3302 	strd	r3, r3, [r4, #8]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8003b1e:	f884 3020 	strb.w	r3, [r4, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003b22:	62e3      	str	r3, [r4, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003b24:	62a6      	str	r6, [r4, #40]	@ 0x28
  hadc2.Init.NbrOfConversion = 1;
 8003b26:	61e6      	str	r6, [r4, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8003b28:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8003b2c:	6123      	str	r3, [r4, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003b2e:	6167      	str	r7, [r4, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8003b30:	8323      	strh	r3, [r4, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8003b32:	6363      	str	r3, [r4, #52]	@ 0x34
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8003b34:	f001 fc0c 	bl	8005350 <HAL_ADC_Init>
 8003b38:	b108      	cbz	r0, 8003b3e <main+0x362>
 8003b3a:	b672      	cpsid	i
  while (1)
 8003b3c:	e7fe      	b.n	8003b3c <main+0x360>
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8003b3e:	e9cd 000a 	strd	r0, r0, [sp, #40]	@ 0x28
  sConfig.Offset = 0;
 8003b42:	e9cd 000c 	strd	r0, r0, [sp, #48]	@ 0x30
  sConfig.Channel = ADC_CHANNEL_2;
 8003b46:	2302      	movs	r3, #2
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003b48:	a908      	add	r1, sp, #32
 8003b4a:	4620      	mov	r0, r4
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003b4c:	e9cd 3608 	strd	r3, r6, [sp, #32]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003b50:	f001 ff00 	bl	8005954 <HAL_ADC_ConfigChannel>
 8003b54:	4605      	mov	r5, r0
 8003b56:	b108      	cbz	r0, 8003b5c <main+0x380>
 8003b58:	b672      	cpsid	i
  while (1)
 8003b5a:	e7fe      	b.n	8003b5a <main+0x37e>
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8003b5c:	4c38      	ldr	r4, [pc, #224]	@ (8003c40 <main+0x464>)
  ADC_MultiModeTypeDef multimode = {0};
 8003b5e:	9007      	str	r0, [sp, #28]
 8003b60:	e9cd 0005 	strd	r0, r0, [sp, #20]
  ADC_ChannelConfTypeDef sConfig = {0};
 8003b64:	4601      	mov	r1, r0
 8003b66:	2218      	movs	r2, #24
 8003b68:	a808      	add	r0, sp, #32
 8003b6a:	f008 fa1f 	bl	800bfac <memset>
  hadc3.Instance = ADC3;
 8003b6e:	4b35      	ldr	r3, [pc, #212]	@ (8003c44 <main+0x468>)
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8003b70:	f884 5020 	strb.w	r5, [r4, #32]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8003b74:	4620      	mov	r0, r4
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003b76:	e9c4 650a 	strd	r6, r5, [r4, #40]	@ 0x28
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8003b7a:	e9c4 3500 	strd	r3, r5, [r4]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003b7e:	e9c4 5502 	strd	r5, r5, [r4, #8]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003b82:	e9c4 5704 	strd	r5, r7, [r4, #16]
  hadc3.Init.NbrOfConversion = 1;
 8003b86:	61e6      	str	r6, [r4, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8003b88:	f884 5030 	strb.w	r5, [r4, #48]	@ 0x30
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8003b8c:	8325      	strh	r5, [r4, #24]
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8003b8e:	6365      	str	r5, [r4, #52]	@ 0x34
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8003b90:	f001 fbde 	bl	8005350 <HAL_ADC_Init>
 8003b94:	b108      	cbz	r0, 8003b9a <main+0x3be>
 8003b96:	b672      	cpsid	i
  while (1)
 8003b98:	e7fe      	b.n	8003b98 <main+0x3bc>
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8003b9a:	9005      	str	r0, [sp, #20]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 8003b9c:	a905      	add	r1, sp, #20
 8003b9e:	4620      	mov	r0, r4
 8003ba0:	f002 f85c 	bl	8005c5c <HAL_ADCEx_MultiModeConfigChannel>
 8003ba4:	b108      	cbz	r0, 8003baa <main+0x3ce>
 8003ba6:	b672      	cpsid	i
  while (1)
 8003ba8:	e7fe      	b.n	8003ba8 <main+0x3cc>
  sConfig.Channel = ADC_CHANNEL_12;
 8003baa:	230c      	movs	r3, #12
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8003bac:	e9cd 000a 	strd	r0, r0, [sp, #40]	@ 0x28
  sConfig.Offset = 0;
 8003bb0:	e9cd 000c 	strd	r0, r0, [sp, #48]	@ 0x30
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8003bb4:	a908      	add	r1, sp, #32
 8003bb6:	4620      	mov	r0, r4
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003bb8:	e9cd 3608 	strd	r3, r6, [sp, #32]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8003bbc:	f001 feca 	bl	8005954 <HAL_ADC_ConfigChannel>
 8003bc0:	4603      	mov	r3, r0
 8003bc2:	b108      	cbz	r0, 8003bc8 <main+0x3ec>
 8003bc4:	b672      	cpsid	i
  while (1)
 8003bc6:	e7fe      	b.n	8003bc6 <main+0x3ea>
  hspi2.Instance = SPI2;
 8003bc8:	481f      	ldr	r0, [pc, #124]	@ (8003c48 <main+0x46c>)
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8003bca:	4920      	ldr	r1, [pc, #128]	@ (8003c4c <main+0x470>)
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8003bcc:	6083      	str	r3, [r0, #8]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8003bce:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003bd2:	e9c0 1200 	strd	r1, r2, [r0]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8003bd6:	f44f 7240 	mov.w	r2, #768	@ 0x300
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003bda:	e9c0 2303 	strd	r2, r3, [r0, #12]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8003bde:	f44f 7200 	mov.w	r2, #512	@ 0x200
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003be2:	e9c0 2306 	strd	r2, r3, [r0, #24]
  hspi2.Init.CRCPolynomial = 7;
 8003be6:	2207      	movs	r2, #7
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8003be8:	e9c0 3308 	strd	r3, r3, [r0, #32]
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8003bec:	e9c0 230b 	strd	r2, r3, [r0, #44]	@ 0x2c
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003bf0:	6143      	str	r3, [r0, #20]
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003bf2:	6283      	str	r3, [r0, #40]	@ 0x28
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8003bf4:	2308      	movs	r3, #8
 8003bf6:	6343      	str	r3, [r0, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8003bf8:	f003 f9c9 	bl	8006f8e <HAL_SPI_Init>
 8003bfc:	4604      	mov	r4, r0
 8003bfe:	b108      	cbz	r0, 8003c04 <main+0x428>
 8003c00:	b672      	cpsid	i
  while (1)
 8003c02:	e7fe      	b.n	8003c02 <main+0x426>
  osKernelInitialize();
 8003c04:	f004 fb44 	bl	8008290 <osKernelInitialize>
  GPSHandle = osThreadNew(StartGPS, NULL, &GPS_attributes);
 8003c08:	4a11      	ldr	r2, [pc, #68]	@ (8003c50 <main+0x474>)
 8003c0a:	4812      	ldr	r0, [pc, #72]	@ (8003c54 <main+0x478>)
 8003c0c:	4621      	mov	r1, r4
 8003c0e:	f004 fb7b 	bl	8008308 <osThreadNew>
 8003c12:	4b11      	ldr	r3, [pc, #68]	@ (8003c58 <main+0x47c>)
  SpiFlashHandle = osThreadNew(StartSpiFlash, NULL, &SpiFlash_attributes);
 8003c14:	4a11      	ldr	r2, [pc, #68]	@ (8003c5c <main+0x480>)
  GPSHandle = osThreadNew(StartGPS, NULL, &GPS_attributes);
 8003c16:	6018      	str	r0, [r3, #0]
  SpiFlashHandle = osThreadNew(StartSpiFlash, NULL, &SpiFlash_attributes);
 8003c18:	4621      	mov	r1, r4
 8003c1a:	4811      	ldr	r0, [pc, #68]	@ (8003c60 <main+0x484>)
 8003c1c:	f004 fb74 	bl	8008308 <osThreadNew>
 8003c20:	4b10      	ldr	r3, [pc, #64]	@ (8003c64 <main+0x488>)
  GSMHandle = osThreadNew(StartGSM, NULL, &GSM_attributes);
 8003c22:	4a11      	ldr	r2, [pc, #68]	@ (8003c68 <main+0x48c>)
  SpiFlashHandle = osThreadNew(StartSpiFlash, NULL, &SpiFlash_attributes);
 8003c24:	6018      	str	r0, [r3, #0]
  GSMHandle = osThreadNew(StartGSM, NULL, &GSM_attributes);
 8003c26:	4621      	mov	r1, r4
 8003c28:	4810      	ldr	r0, [pc, #64]	@ (8003c6c <main+0x490>)
 8003c2a:	f004 fb6d 	bl	8008308 <osThreadNew>
 8003c2e:	4b10      	ldr	r3, [pc, #64]	@ (8003c70 <main+0x494>)
 8003c30:	6018      	str	r0, [r3, #0]
  osKernelStart();
 8003c32:	f004 fb49 	bl	80082c8 <osKernelStart>
  while (1)
 8003c36:	e7fe      	b.n	8003c36 <main+0x45a>
 8003c38:	200014d4 	.word	0x200014d4
 8003c3c:	50000100 	.word	0x50000100
 8003c40:	20001484 	.word	0x20001484
 8003c44:	50000400 	.word	0x50000400
 8003c48:	20001314 	.word	0x20001314
 8003c4c:	40003800 	.word	0x40003800
 8003c50:	08012e64 	.word	0x08012e64
 8003c54:	0800141d 	.word	0x0800141d
 8003c58:	2000105c 	.word	0x2000105c
 8003c5c:	08012e88 	.word	0x08012e88
 8003c60:	08004a69 	.word	0x08004a69
 8003c64:	20001060 	.word	0x20001060
 8003c68:	08012e40 	.word	0x08012e40
 8003c6c:	08002b61 	.word	0x08002b61
 8003c70:	20001058 	.word	0x20001058

08003c74 <HAL_TIM_PeriodElapsedCallback>:
  if (htim->Instance == TIM2) {
 8003c74:	6803      	ldr	r3, [r0, #0]
 8003c76:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c7a:	d101      	bne.n	8003c80 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
 8003c7c:	f001 bb20 	b.w	80052c0 <HAL_IncTick>
}
 8003c80:	4770      	bx	lr

08003c82 <Error_Handler>:
 8003c82:	b672      	cpsid	i
  while (1)
 8003c84:	e7fe      	b.n	8003c84 <Error_Handler+0x2>
	...

08003c88 <W25_ReadStatusReg1>:
	W25_CS_DISABLE();
	W25_DelayWhileBusy(CHIP_ERASE_TIMEOUT);
	return retval;
} // W25_ChipErase()

uint8_t W25_ReadStatusReg1(void) {
 8003c88:	b513      	push	{r0, r1, r4, lr}
	uint8_t cmd = W25_CMD_READ_STATUS_REG_1;
 8003c8a:	2305      	movs	r3, #5
	uint8_t status_reg1;
	int retval;
	W25_CS_ENABLE(); // Drive Winbond chip select, /CS low
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003c92:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
	uint8_t cmd = W25_CMD_READ_STATUS_REG_1;
 8003c96:	f88d 3006 	strb.w	r3, [sp, #6]
	W25_CS_ENABLE(); // Drive Winbond chip select, /CS low
 8003c9a:	f002 fa5d 	bl	8006158 <HAL_GPIO_WritePin>
	retval = HAL_SPI_Transmit(&hspi1, &cmd , sizeof(cmd), TIMEOUT); // Send Read Status Reg 1 command
 8003c9e:	4810      	ldr	r0, [pc, #64]	@ (8003ce0 <W25_ReadStatusReg1+0x58>)
 8003ca0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003ca4:	2201      	movs	r2, #1
 8003ca6:	f10d 0106 	add.w	r1, sp, #6
 8003caa:	f003 f9de 	bl	800706a <HAL_SPI_Transmit>
	if(retval == HAL_OK)
 8003cae:	4604      	mov	r4, r0
 8003cb0:	b940      	cbnz	r0, 8003cc4 <W25_ReadStatusReg1+0x3c>
	retval = HAL_SPI_Receive(&hspi1, &status_reg1, sizeof(status_reg1), TIMEOUT);
 8003cb2:	480b      	ldr	r0, [pc, #44]	@ (8003ce0 <W25_ReadStatusReg1+0x58>)
 8003cb4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003cb8:	2201      	movs	r2, #1
 8003cba:	f10d 0107 	add.w	r1, sp, #7
 8003cbe:	f003 fbce 	bl	800745e <HAL_SPI_Receive>
 8003cc2:	4604      	mov	r4, r0
	W25_CS_DISABLE();
 8003cc4:	2201      	movs	r2, #1
 8003cc6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003cca:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003cce:	f002 fa43 	bl	8006158 <HAL_GPIO_WritePin>
	return retval == HAL_OK ? status_reg1:0xFF; // return 0xFF if error
 8003cd2:	b91c      	cbnz	r4, 8003cdc <W25_ReadStatusReg1+0x54>
 8003cd4:	f89d 0007 	ldrb.w	r0, [sp, #7]
} // W25_ReadStatusReg1()
 8003cd8:	b002      	add	sp, #8
 8003cda:	bd10      	pop	{r4, pc}
	return retval == HAL_OK ? status_reg1:0xFF; // return 0xFF if error
 8003cdc:	20ff      	movs	r0, #255	@ 0xff
 8003cde:	e7fb      	b.n	8003cd8 <W25_ReadStatusReg1+0x50>
 8003ce0:	20001378 	.word	0x20001378

08003ce4 <W25_Busy>:

int W25_Busy(void)
{
 8003ce4:	b508      	push	{r3, lr}
	return (W25_ReadStatusReg1() & W25_STATUS1_BUSY);
 8003ce6:	f7ff ffcf 	bl	8003c88 <W25_ReadStatusReg1>
}
 8003cea:	f000 0001 	and.w	r0, r0, #1
 8003cee:	bd08      	pop	{r3, pc}

08003cf0 <W25_DelayWhileBusy>:

int W25_DelayWhileBusy(uint32_t msTimeout)
{
 8003cf0:	b570      	push	{r4, r5, r6, lr}
 8003cf2:	4605      	mov	r5, r0
	uint32_t initial_count = HAL_GetTick();
 8003cf4:	f001 faf0 	bl	80052d8 <HAL_GetTick>
 8003cf8:	4606      	mov	r6, r0
	int busy;
	uint32_t deltaticks;
	uint32_t count = 0;
	do {
	busy = W25_Busy();
 8003cfa:	f7ff fff3 	bl	8003ce4 <W25_Busy>
 8003cfe:	4604      	mov	r4, r0
	deltaticks = HAL_GetTick() - initial_count;
 8003d00:	f001 faea 	bl	80052d8 <HAL_GetTick>
 8003d04:	1b83      	subs	r3, r0, r6
	count++;
	} while(busy && deltaticks < msTimeout);
 8003d06:	b114      	cbz	r4, 8003d0e <W25_DelayWhileBusy+0x1e>
 8003d08:	42ab      	cmp	r3, r5
 8003d0a:	d3f6      	bcc.n	8003cfa <W25_DelayWhileBusy+0xa>
	int retval = busy ? HAL_TIMEOUT:HAL_OK;
 8003d0c:	2403      	movs	r4, #3
	return retval;
}
 8003d0e:	4620      	mov	r0, r4
 8003d10:	bd70      	pop	{r4, r5, r6, pc}

08003d12 <W25_Reset>:
void W25_Reset(){
 8003d12:	b508      	push	{r3, lr}
	W25_CS_ENABLE();
 8003d14:	2200      	movs	r2, #0
 8003d16:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003d1a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003d1e:	f002 fa1b 	bl	8006158 <HAL_GPIO_WritePin>
	W25_CS_DISABLE();
 8003d22:	2201      	movs	r2, #1
 8003d24:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003d28:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003d2c:	f002 fa14 	bl	8006158 <HAL_GPIO_WritePin>
	W25_CS_ENABLE();
 8003d30:	2200      	movs	r2, #0
 8003d32:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003d36:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003d3a:	f002 fa0d 	bl	8006158 <HAL_GPIO_WritePin>
	W25_CS_DISABLE();
 8003d3e:	2201      	movs	r2, #1
 8003d40:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003d44:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003d48:	f002 fa06 	bl	8006158 <HAL_GPIO_WritePin>
	W25_CS_ENABLE();
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003d52:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003d56:	f002 f9ff 	bl	8006158 <HAL_GPIO_WritePin>
	W25_CS_DISABLE();
}
 8003d5a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	W25_CS_DISABLE();
 8003d5e:	2201      	movs	r2, #1
 8003d60:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003d64:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003d68:	f002 b9f6 	b.w	8006158 <HAL_GPIO_WritePin>

08003d6c <W25_ReadJedecID>:

int W25_ReadJedecID() {
 8003d6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d6e:	b08d      	sub	sp, #52	@ 0x34
	int retval;
	uint8_t idcmd = W25_CMD_READ_JEDEC_ID;
 8003d70:	239f      	movs	r3, #159	@ 0x9f
	uint8_t jdec_id[4];
	char result[11];
	W25_CS_ENABLE(); // Drive Winbond chip select, /CS low
 8003d72:	2200      	movs	r2, #0
 8003d74:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003d78:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
	uint8_t idcmd = W25_CMD_READ_JEDEC_ID;
 8003d7c:	f88d 300b 	strb.w	r3, [sp, #11]
	W25_CS_ENABLE(); // Drive Winbond chip select, /CS low
 8003d80:	f002 f9ea 	bl	8006158 <HAL_GPIO_WritePin>
	retval = HAL_SPI_TransmitReceive(&hspi1, &idcmd, jdec_id, 4, 4000);
 8003d84:	f44f 637a 	mov.w	r3, #4000	@ 0xfa0
 8003d88:	9300      	str	r3, [sp, #0]
 8003d8a:	aa03      	add	r2, sp, #12
 8003d8c:	2304      	movs	r3, #4
 8003d8e:	f10d 010b 	add.w	r1, sp, #11
 8003d92:	4820      	ldr	r0, [pc, #128]	@ (8003e14 <W25_ReadJedecID+0xa8>)
 8003d94:	f003 fa33 	bl	80071fe <HAL_SPI_TransmitReceive>
	W25_CS_DISABLE();
 8003d98:	2201      	movs	r2, #1
	retval = HAL_SPI_TransmitReceive(&hspi1, &idcmd, jdec_id, 4, 4000);
 8003d9a:	4605      	mov	r5, r0
	W25_CS_DISABLE();
 8003d9c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003da0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003da4:	f002 f9d8 	bl	8006158 <HAL_GPIO_WritePin>
	char spi_flash_intro[] = "Flash ID received: ";
 8003da8:	4b1b      	ldr	r3, [pc, #108]	@ (8003e18 <W25_ReadJedecID+0xac>)
 8003daa:	aa07      	add	r2, sp, #28
 8003dac:	f103 0710 	add.w	r7, r3, #16
 8003db0:	4616      	mov	r6, r2
 8003db2:	6818      	ldr	r0, [r3, #0]
 8003db4:	6859      	ldr	r1, [r3, #4]
 8003db6:	4614      	mov	r4, r2
 8003db8:	c403      	stmia	r4!, {r0, r1}
 8003dba:	3308      	adds	r3, #8
 8003dbc:	42bb      	cmp	r3, r7
 8003dbe:	4622      	mov	r2, r4
 8003dc0:	d1f7      	bne.n	8003db2 <W25_ReadJedecID+0x46>
 8003dc2:	6818      	ldr	r0, [r3, #0]
 8003dc4:	6020      	str	r0, [r4, #0]
	HAL_UART_Transmit(&huart1, (uint8_t*) spi_flash_intro, strlen(spi_flash_intro), 1000);
 8003dc6:	4630      	mov	r0, r6
 8003dc8:	f7fc fa62 	bl	8000290 <strlen>
 8003dcc:	4631      	mov	r1, r6
 8003dce:	b282      	uxth	r2, r0
 8003dd0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003dd4:	4811      	ldr	r0, [pc, #68]	@ (8003e1c <W25_ReadJedecID+0xb0>)
 8003dd6:	f004 f917 	bl	8008008 <HAL_UART_Transmit>

	sprintf(result, "%02X, %02X, %02X", jdec_id[1], jdec_id[2], jdec_id[3]);
 8003dda:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8003dde:	f89d 200d 	ldrb.w	r2, [sp, #13]
 8003de2:	9300      	str	r3, [sp, #0]
 8003de4:	490e      	ldr	r1, [pc, #56]	@ (8003e20 <W25_ReadJedecID+0xb4>)
 8003de6:	f89d 300e 	ldrb.w	r3, [sp, #14]
 8003dea:	a804      	add	r0, sp, #16
 8003dec:	f008 f816 	bl	800be1c <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*) result, 11, 1000);
 8003df0:	a904      	add	r1, sp, #16
 8003df2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003df6:	220b      	movs	r2, #11
 8003df8:	4808      	ldr	r0, [pc, #32]	@ (8003e1c <W25_ReadJedecID+0xb0>)
 8003dfa:	f004 f905 	bl	8008008 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, (uint8_t*)"\r", 1, 1000);
 8003dfe:	4909      	ldr	r1, [pc, #36]	@ (8003e24 <W25_ReadJedecID+0xb8>)
 8003e00:	4806      	ldr	r0, [pc, #24]	@ (8003e1c <W25_ReadJedecID+0xb0>)
 8003e02:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003e06:	2201      	movs	r2, #1
 8003e08:	f004 f8fe 	bl	8008008 <HAL_UART_Transmit>
	return retval;
} // W25_ReadJEDECID()
 8003e0c:	4628      	mov	r0, r5
 8003e0e:	b00d      	add	sp, #52	@ 0x34
 8003e10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003e12:	bf00      	nop
 8003e14:	20001378 	.word	0x20001378
 8003e18:	08012ebf 	.word	0x08012ebf
 8003e1c:	20001240 	.word	0x20001240
 8003e20:	08012eac 	.word	0x08012eac
 8003e24:	08012ebd 	.word	0x08012ebd

08003e28 <W25_WriteEnable>:

	return retval;
} // W25_ReadUniqueID()


int W25_WriteEnable(void) {
 8003e28:	b513      	push	{r0, r1, r4, lr}
	uint8_t cmd = W25_CMD_WRITE_ENABLE;
 8003e2a:	2306      	movs	r3, #6
	W25_CS_ENABLE(); // Drive Winbond chip select, /CS low
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003e32:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
	uint8_t cmd = W25_CMD_WRITE_ENABLE;
 8003e36:	f88d 3007 	strb.w	r3, [sp, #7]
	W25_CS_ENABLE(); // Drive Winbond chip select, /CS low
 8003e3a:	f002 f98d 	bl	8006158 <HAL_GPIO_WritePin>
	int retval = HAL_SPI_Transmit(&hspi1, &cmd , sizeof(cmd), TIMEOUT); // Send Write Enable command
 8003e3e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003e42:	f10d 0107 	add.w	r1, sp, #7
 8003e46:	2201      	movs	r2, #1
 8003e48:	4806      	ldr	r0, [pc, #24]	@ (8003e64 <W25_WriteEnable+0x3c>)
 8003e4a:	f003 f90e 	bl	800706a <HAL_SPI_Transmit>
	W25_CS_DISABLE();
 8003e4e:	2201      	movs	r2, #1
	int retval = HAL_SPI_Transmit(&hspi1, &cmd , sizeof(cmd), TIMEOUT); // Send Write Enable command
 8003e50:	4604      	mov	r4, r0
	W25_CS_DISABLE();
 8003e52:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003e56:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003e5a:	f002 f97d 	bl	8006158 <HAL_GPIO_WritePin>
	return retval;
} // W25_WriteEnable()
 8003e5e:	4620      	mov	r0, r4
 8003e60:	b002      	add	sp, #8
 8003e62:	bd10      	pop	{r4, pc}
 8003e64:	20001378 	.word	0x20001378

08003e68 <W25_SectorErase>:

int W25_SectorErase(uint32_t address)
{
 8003e68:	b513      	push	{r0, r1, r4, lr}
	int retval;
	uint8_t cmdaddr[4] = {W25_CMD_SECTOR_ERASE,address>>16,address>>8,address};
 8003e6a:	2320      	movs	r3, #32
 8003e6c:	f88d 3004 	strb.w	r3, [sp, #4]
 8003e70:	0c03      	lsrs	r3, r0, #16
 8003e72:	ba40      	rev16	r0, r0
 8003e74:	f88d 3005 	strb.w	r3, [sp, #5]
 8003e78:	f8ad 0006 	strh.w	r0, [sp, #6]
	W25_WriteEnable(); // Make sure we can write...
 8003e7c:	f7ff ffd4 	bl	8003e28 <W25_WriteEnable>
	W25_CS_ENABLE(); // Drive Winbond chip select, /CS low
 8003e80:	2200      	movs	r2, #0
 8003e82:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003e86:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003e8a:	f002 f965 	bl	8006158 <HAL_GPIO_WritePin>
	retval = HAL_SPI_Transmit(&hspi1, cmdaddr , sizeof(cmdaddr ), TIMEOUT); // Send Sector Erase command with address
 8003e8e:	2204      	movs	r2, #4
 8003e90:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003e94:	eb0d 0102 	add.w	r1, sp, r2
 8003e98:	4808      	ldr	r0, [pc, #32]	@ (8003ebc <W25_SectorErase+0x54>)
 8003e9a:	f003 f8e6 	bl	800706a <HAL_SPI_Transmit>
	W25_CS_DISABLE();
 8003e9e:	2201      	movs	r2, #1
	retval = HAL_SPI_Transmit(&hspi1, cmdaddr , sizeof(cmdaddr ), TIMEOUT); // Send Sector Erase command with address
 8003ea0:	4604      	mov	r4, r0
	W25_CS_DISABLE();
 8003ea2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003ea6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003eaa:	f002 f955 	bl	8006158 <HAL_GPIO_WritePin>
	W25_DelayWhileBusy(SECTOR_ERASE_TIMEOUT);
 8003eae:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003eb2:	f7ff ff1d 	bl	8003cf0 <W25_DelayWhileBusy>
	return retval;
} // W25_SectorErase()
 8003eb6:	4620      	mov	r0, r4
 8003eb8:	b002      	add	sp, #8
 8003eba:	bd10      	pop	{r4, pc}
 8003ebc:	20001378 	.word	0x20001378

08003ec0 <W25_PageProgram>:

int W25_PageProgram(uint32_t address, uint8_t *buf, uint32_t count)
{
 8003ec0:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8003ec4:	4606      	mov	r6, r0
 8003ec6:	4688      	mov	r8, r1
 8003ec8:	4617      	mov	r7, r2
	int retval = HAL_OK;
	W25_WriteEnable(); // Make sure we can write...
 8003eca:	f7ff ffad 	bl	8003e28 <W25_WriteEnable>
	while(count) {
		uint8_t cmdaddr[4] = {W25_CMD_PAGE_PROGRAM,address>>16,address>>8,address};
		uint32_t space_left_in_page = 0x100 - (address & 0xFF);
		uint32_t count_this_pass = count <= space_left_in_page? count:space_left_in_page;
		W25_CS_ENABLE(); // Drive Winbond chip select, /CS low
		retval = HAL_SPI_Transmit(&hspi1, cmdaddr , sizeof(cmdaddr ), TIMEOUT); // Send Page Program command with address
 8003ece:	f8df a080 	ldr.w	sl, [pc, #128]	@ 8003f50 <W25_PageProgram+0x90>
	int retval = HAL_OK;
 8003ed2:	2400      	movs	r4, #0
		uint8_t cmdaddr[4] = {W25_CMD_PAGE_PROGRAM,address>>16,address>>8,address};
 8003ed4:	f04f 0902 	mov.w	r9, #2
	while(count) {
 8003ed8:	b91f      	cbnz	r7, 8003ee2 <W25_PageProgram+0x22>
		address += count_this_pass;
		buf += count_this_pass;
		W25_DelayWhileBusy(PAGE_PROGRAM_TIMEOUT);
	}
	return retval;
} 
 8003eda:	4620      	mov	r0, r4
 8003edc:	b002      	add	sp, #8
 8003ede:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		uint32_t space_left_in_page = 0x100 - (address & 0xFF);
 8003ee2:	b2f5      	uxtb	r5, r6
		uint8_t cmdaddr[4] = {W25_CMD_PAGE_PROGRAM,address>>16,address>>8,address};
 8003ee4:	0c33      	lsrs	r3, r6, #16
		uint32_t space_left_in_page = 0x100 - (address & 0xFF);
 8003ee6:	f5c5 7580 	rsb	r5, r5, #256	@ 0x100
		uint32_t count_this_pass = count <= space_left_in_page? count:space_left_in_page;
 8003eea:	42bd      	cmp	r5, r7
		uint8_t cmdaddr[4] = {W25_CMD_PAGE_PROGRAM,address>>16,address>>8,address};
 8003eec:	f88d 3005 	strb.w	r3, [sp, #5]
		W25_CS_ENABLE(); // Drive Winbond chip select, /CS low
 8003ef0:	f04f 0200 	mov.w	r2, #0
		uint8_t cmdaddr[4] = {W25_CMD_PAGE_PROGRAM,address>>16,address>>8,address};
 8003ef4:	ba73      	rev16	r3, r6
		W25_CS_ENABLE(); // Drive Winbond chip select, /CS low
 8003ef6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003efa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
		uint8_t cmdaddr[4] = {W25_CMD_PAGE_PROGRAM,address>>16,address>>8,address};
 8003efe:	f8ad 3006 	strh.w	r3, [sp, #6]
		uint32_t count_this_pass = count <= space_left_in_page? count:space_left_in_page;
 8003f02:	bf28      	it	cs
 8003f04:	463d      	movcs	r5, r7
		uint8_t cmdaddr[4] = {W25_CMD_PAGE_PROGRAM,address>>16,address>>8,address};
 8003f06:	f88d 9004 	strb.w	r9, [sp, #4]
		W25_CS_ENABLE(); // Drive Winbond chip select, /CS low
 8003f0a:	f002 f925 	bl	8006158 <HAL_GPIO_WritePin>
		retval = HAL_SPI_Transmit(&hspi1, cmdaddr , sizeof(cmdaddr ), TIMEOUT); // Send Page Program command with address
 8003f0e:	2204      	movs	r2, #4
 8003f10:	480f      	ldr	r0, [pc, #60]	@ (8003f50 <W25_PageProgram+0x90>)
 8003f12:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003f16:	eb0d 0102 	add.w	r1, sp, r2
 8003f1a:	f003 f8a6 	bl	800706a <HAL_SPI_Transmit>
		if(retval == HAL_OK)
 8003f1e:	4604      	mov	r4, r0
 8003f20:	b938      	cbnz	r0, 8003f32 <W25_PageProgram+0x72>
		  retval = HAL_SPI_Transmit(&hspi1, buf, count_this_pass, TIMEOUT); // Write page data
 8003f22:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003f26:	b2aa      	uxth	r2, r5
 8003f28:	4641      	mov	r1, r8
 8003f2a:	4650      	mov	r0, sl
 8003f2c:	f003 f89d 	bl	800706a <HAL_SPI_Transmit>
 8003f30:	4604      	mov	r4, r0
		W25_CS_DISABLE();
 8003f32:	2201      	movs	r2, #1
 8003f34:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003f38:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003f3c:	f002 f90c 	bl	8006158 <HAL_GPIO_WritePin>
		W25_DelayWhileBusy(PAGE_PROGRAM_TIMEOUT);
 8003f40:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
		count -= count_this_pass;
 8003f44:	1b7f      	subs	r7, r7, r5
		address += count_this_pass;
 8003f46:	442e      	add	r6, r5
		buf += count_this_pass;
 8003f48:	44a8      	add	r8, r5
		W25_DelayWhileBusy(PAGE_PROGRAM_TIMEOUT);
 8003f4a:	f7ff fed1 	bl	8003cf0 <W25_DelayWhileBusy>
 8003f4e:	e7c3      	b.n	8003ed8 <W25_PageProgram+0x18>
 8003f50:	20001378 	.word	0x20001378

08003f54 <W25_ReadData>:

// Winbond 8.2.6 Read Data (03h)
// The only limit for quantity of data is memory / device size
int W25_ReadData(uint32_t address, uint8_t *buf, int bufSize)
{
 8003f54:	b573      	push	{r0, r1, r4, r5, r6, lr}
	int retval;
	uint8_t cmdaddr[4] = {W25_CMD_READ_DATA,address>>16,address>>8,address};
 8003f56:	2303      	movs	r3, #3
 8003f58:	f88d 3004 	strb.w	r3, [sp, #4]
 8003f5c:	0c03      	lsrs	r3, r0, #16
 8003f5e:	ba40      	rev16	r0, r0
 8003f60:	f8ad 0006 	strh.w	r0, [sp, #6]
{
 8003f64:	460d      	mov	r5, r1
	//printf("+%s(Addr 0x%06X, buf 0x%08X, Len 0x%04X)\r\n",__func__,address,buf,bufSize);
	W25_CS_ENABLE(); // Drive Winbond chip select, /CS low
 8003f66:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003f6a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
{
 8003f6e:	4616      	mov	r6, r2
	W25_CS_ENABLE(); // Drive Winbond chip select, /CS low
 8003f70:	2200      	movs	r2, #0
	uint8_t cmdaddr[4] = {W25_CMD_READ_DATA,address>>16,address>>8,address};
 8003f72:	f88d 3005 	strb.w	r3, [sp, #5]
	W25_CS_ENABLE(); // Drive Winbond chip select, /CS low
 8003f76:	f002 f8ef 	bl	8006158 <HAL_GPIO_WritePin>
	retval = HAL_SPI_Transmit(&hspi1, cmdaddr , sizeof(cmdaddr), 500); // Send Read Data command with address
 8003f7a:	2204      	movs	r2, #4
 8003f7c:	480d      	ldr	r0, [pc, #52]	@ (8003fb4 <W25_ReadData+0x60>)
 8003f7e:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8003f82:	eb0d 0102 	add.w	r1, sp, r2
 8003f86:	f003 f870 	bl	800706a <HAL_SPI_Transmit>
	if(retval != HAL_OK) {
 8003f8a:	4604      	mov	r4, r0
 8003f8c:	b978      	cbnz	r0, 8003fae <W25_ReadData+0x5a>
		return retval;
	}
	//memset(buf,0,bufSize); // Buffer is transmitted during receive
	retval = HAL_SPI_Receive(&hspi1, buf, bufSize, 2000); // need longer time-outs when using slow SPI clock
 8003f8e:	4809      	ldr	r0, [pc, #36]	@ (8003fb4 <W25_ReadData+0x60>)
 8003f90:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8003f94:	b2b2      	uxth	r2, r6
 8003f96:	4629      	mov	r1, r5
 8003f98:	f003 fa61 	bl	800745e <HAL_SPI_Receive>
	if(retval != HAL_OK)
 8003f9c:	4604      	mov	r4, r0
 8003f9e:	b130      	cbz	r0, 8003fae <W25_ReadData+0x5a>

	W25_CS_DISABLE();
 8003fa0:	2201      	movs	r2, #1
 8003fa2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003fa6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003faa:	f002 f8d5 	bl	8006158 <HAL_GPIO_WritePin>

	return retval;
} // W25_ReadData()
 8003fae:	4620      	mov	r0, r4
 8003fb0:	b002      	add	sp, #8
 8003fb2:	bd70      	pop	{r4, r5, r6, pc}
 8003fb4:	20001378 	.word	0x20001378

08003fb8 <IsPageValid>:


// Function to check if a page contains valid data
int IsPageValid(uint8_t *page) {
 8003fb8:	b510      	push	{r4, lr}
    char *last_semicolon = strrchr((char *)page, ';'); // Find the last semicolon
 8003fba:	213b      	movs	r1, #59	@ 0x3b
 8003fbc:	f008 f830 	bl	800c020 <strrchr>
    if (!last_semicolon) {
 8003fc0:	4604      	mov	r4, r0
 8003fc2:	b190      	cbz	r0, 8003fea <IsPageValid+0x32>
        return 0; // No semicolon found, invalid page
    }

    char *last_param = last_semicolon + 1; // Last parameter starts after the last semicolon
    size_t len = strlen(last_param);
 8003fc4:	3001      	adds	r0, #1
 8003fc6:	f7fc f963 	bl	8000290 <strlen>

    // Ensure the last parameter is exactly 6 characters and numeric
    if (len < 6) {
 8003fca:	2805      	cmp	r0, #5
 8003fcc:	d90d      	bls.n	8003fea <IsPageValid+0x32>
 8003fce:	1da2      	adds	r2, r4, #6
        return 0; // Too short to be valid
    }

    for (int i = 0; i < 6; ++i) {
        if ((last_param[i] < '0' || last_param[i] > '9' ) &&
 8003fd0:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8003fd4:	f1a3 0130 	sub.w	r1, r3, #48	@ 0x30
 8003fd8:	2909      	cmp	r1, #9
 8003fda:	d902      	bls.n	8003fe2 <IsPageValid+0x2a>
 8003fdc:	3b61      	subs	r3, #97	@ 0x61
 8003fde:	2b05      	cmp	r3, #5
 8003fe0:	d803      	bhi.n	8003fea <IsPageValid+0x32>
    for (int i = 0; i < 6; ++i) {
 8003fe2:	4294      	cmp	r4, r2
 8003fe4:	d1f4      	bne.n	8003fd0 <IsPageValid+0x18>
                (last_param[i] < 'a' || last_param[i] > 'f')) {
            return 0; // Not numeric
        }
    }

    return 1; // Page contains valid data
 8003fe6:	2001      	movs	r0, #1
}
 8003fe8:	bd10      	pop	{r4, pc}
        return 0; // No semicolon found, invalid page
 8003fea:	2000      	movs	r0, #0
 8003fec:	e7fc      	b.n	8003fe8 <IsPageValid+0x30>
	...

08003ff0 <UpdatePageAddress>:


// Function to update the last parameter of the page (address)
void UpdatePageAddress(uint8_t *page, uint32_t new_address) {
 8003ff0:	b513      	push	{r0, r1, r4, lr}
 8003ff2:	460b      	mov	r3, r1
 8003ff4:	4604      	mov	r4, r0
    char new_address_str[7];
    snprintf(new_address_str, sizeof(new_address_str), "%06lx", new_address);
 8003ff6:	4a08      	ldr	r2, [pc, #32]	@ (8004018 <UpdatePageAddress+0x28>)
 8003ff8:	2107      	movs	r1, #7
 8003ffa:	4668      	mov	r0, sp
 8003ffc:	f007 feda 	bl	800bdb4 <sniprintf>
    memcpy(page + strlen((char *)page) - 6, new_address_str, 6); // Overwrite last 6 characters
 8004000:	4620      	mov	r0, r4
 8004002:	f7fc f945 	bl	8000290 <strlen>
 8004006:	1f83      	subs	r3, r0, #6
 8004008:	9800      	ldr	r0, [sp, #0]
 800400a:	50e0      	str	r0, [r4, r3]
 800400c:	18e2      	adds	r2, r4, r3
 800400e:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8004012:	8093      	strh	r3, [r2, #4]
}
 8004014:	b002      	add	sp, #8
 8004016:	bd10      	pop	{r4, pc}
 8004018:	08012ed3 	.word	0x08012ed3

0800401c <W25_ShiftLeftFlashDataByPage>:

int W25_ShiftLeftFlashDataByPage(void) {
 800401c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint32_t current_sector_start = FLASH_START_ADDRESS;

    Debug_printf("\n\n ------------------------------ IN SHIFT LEFT: ----------------------------\n\n");
 8004020:	4894      	ldr	r0, [pc, #592]	@ (8004274 <W25_ShiftLeftFlashDataByPage+0x258>)
int W25_ShiftLeftFlashDataByPage(void) {
 8004022:	b08f      	sub	sp, #60	@ 0x3c
    Debug_printf("\n\n ------------------------------ IN SHIFT LEFT: ----------------------------\n\n");
 8004024:	f001 f898 	bl	8005158 <Debug_printf>
    uint32_t current_sector_start = FLASH_START_ADDRESS;
 8004028:	f44f 5640 	mov.w	r6, #12288	@ 0x3000
    while (current_sector_start < FLASH_END_ADDRESS) {
        uint32_t next_sector_start = current_sector_start + SECTOR_SIZE;

        W25_Reset();
 800402c:	f7ff fe71 	bl	8003d12 <W25_Reset>
        // Step 1: Read the entire current sector into the buffer
        if (W25_ReadData(current_sector_start, current_sector_buffer, SECTOR_SIZE) != HAL_OK) {
 8004030:	4991      	ldr	r1, [pc, #580]	@ (8004278 <W25_ShiftLeftFlashDataByPage+0x25c>)
 8004032:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8004036:	4630      	mov	r0, r6
        uint32_t next_sector_start = current_sector_start + SECTOR_SIZE;
 8004038:	f506 5980 	add.w	r9, r6, #4096	@ 0x1000
        if (W25_ReadData(current_sector_start, current_sector_buffer, SECTOR_SIZE) != HAL_OK) {
 800403c:	f7ff ff8a 	bl	8003f54 <W25_ReadData>
 8004040:	b138      	cbz	r0, 8004052 <W25_ShiftLeftFlashDataByPage+0x36>
        	Debug_printf("READING ALL THE SECTOR: ERROR\n");
 8004042:	488e      	ldr	r0, [pc, #568]	@ (800427c <W25_ShiftLeftFlashDataByPage+0x260>)

        // Step 2: Read the first page of the next sector (if exists)
        if (next_sector_start < FLASH_END_ADDRESS) {
        	W25_Reset();
            if (W25_ReadData(next_sector_start, next_page_buffer, PAGE_SIZE) != HAL_OK) {
            	Debug_printf("\nREADING FIRST PAGE OF THE NEXT SECTOR: ERROR\n");
 8004044:	f001 f888 	bl	8005158 <Debug_printf>
            return HAL_ERROR; // Exit if read fails
 8004048:	2401      	movs	r4, #1
        current_sector_start = next_sector_start;
    }

    Debug_printf("\n\n ----------------------END OF SHIFT LEFT -----------------------------\n\n");
    return HAL_OK;
}
 800404a:	4620      	mov	r0, r4
 800404c:	b00f      	add	sp, #60	@ 0x3c
 800404e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        	char spi_flash_data_intro[] = "\nFirst page of Flash DATA at Reading All Sector: \n";
 8004052:	4b8b      	ldr	r3, [pc, #556]	@ (8004280 <W25_ShiftLeftFlashDataByPage+0x264>)
 8004054:	aa01      	add	r2, sp, #4
 8004056:	f103 0730 	add.w	r7, r3, #48	@ 0x30
 800405a:	4614      	mov	r4, r2
 800405c:	6818      	ldr	r0, [r3, #0]
 800405e:	6859      	ldr	r1, [r3, #4]
 8004060:	4615      	mov	r5, r2
 8004062:	c503      	stmia	r5!, {r0, r1}
 8004064:	3308      	adds	r3, #8
 8004066:	42bb      	cmp	r3, r7
 8004068:	462a      	mov	r2, r5
 800406a:	d1f7      	bne.n	800405c <W25_ShiftLeftFlashDataByPage+0x40>
 800406c:	8819      	ldrh	r1, [r3, #0]
 800406e:	789b      	ldrb	r3, [r3, #2]
 8004070:	8029      	strh	r1, [r5, #0]
 8004072:	70ab      	strb	r3, [r5, #2]
			HAL_UART_Transmit(&huart1, (uint8_t*) spi_flash_data_intro, strlen(spi_flash_data_intro), 1000);
 8004074:	4620      	mov	r0, r4
 8004076:	f7fc f90b 	bl	8000290 <strlen>
 800407a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800407e:	b282      	uxth	r2, r0
 8004080:	4621      	mov	r1, r4
 8004082:	4880      	ldr	r0, [pc, #512]	@ (8004284 <W25_ShiftLeftFlashDataByPage+0x268>)
 8004084:	f003 ffc0 	bl	8008008 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart1, current_sector_buffer, 128, 1000);
 8004088:	497b      	ldr	r1, [pc, #492]	@ (8004278 <W25_ShiftLeftFlashDataByPage+0x25c>)
 800408a:	487e      	ldr	r0, [pc, #504]	@ (8004284 <W25_ShiftLeftFlashDataByPage+0x268>)
 800408c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004090:	2280      	movs	r2, #128	@ 0x80
 8004092:	f003 ffb9 	bl	8008008 <HAL_UART_Transmit>
			Debug_printf("\n\n");
 8004096:	487c      	ldr	r0, [pc, #496]	@ (8004288 <W25_ShiftLeftFlashDataByPage+0x26c>)
 8004098:	f001 f85e 	bl	8005158 <Debug_printf>
        if (next_sector_start < FLASH_END_ADDRESS) {
 800409c:	f5b9 4fa0 	cmp.w	r9, #20480	@ 0x5000
 80040a0:	d02e      	beq.n	8004100 <W25_ShiftLeftFlashDataByPage+0xe4>
        	W25_Reset();
 80040a2:	f7ff fe36 	bl	8003d12 <W25_Reset>
            if (W25_ReadData(next_sector_start, next_page_buffer, PAGE_SIZE) != HAL_OK) {
 80040a6:	4979      	ldr	r1, [pc, #484]	@ (800428c <W25_ShiftLeftFlashDataByPage+0x270>)
 80040a8:	2280      	movs	r2, #128	@ 0x80
 80040aa:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 80040ae:	f7ff ff51 	bl	8003f54 <W25_ReadData>
 80040b2:	b108      	cbz	r0, 80040b8 <W25_ShiftLeftFlashDataByPage+0x9c>
            	Debug_printf("\nREADING FIRST PAGE OF THE NEXT SECTOR: ERROR\n");
 80040b4:	4876      	ldr	r0, [pc, #472]	@ (8004290 <W25_ShiftLeftFlashDataByPage+0x274>)
 80040b6:	e7c5      	b.n	8004044 <W25_ShiftLeftFlashDataByPage+0x28>
            	char spi_flash_data_intro[] = "First page of Flash DATA at reading NEXT SECTOR: \n";
 80040b8:	4b76      	ldr	r3, [pc, #472]	@ (8004294 <W25_ShiftLeftFlashDataByPage+0x278>)
 80040ba:	4622      	mov	r2, r4
 80040bc:	f103 0730 	add.w	r7, r3, #48	@ 0x30
 80040c0:	6818      	ldr	r0, [r3, #0]
 80040c2:	6859      	ldr	r1, [r3, #4]
 80040c4:	4615      	mov	r5, r2
 80040c6:	c503      	stmia	r5!, {r0, r1}
 80040c8:	3308      	adds	r3, #8
 80040ca:	42bb      	cmp	r3, r7
 80040cc:	462a      	mov	r2, r5
 80040ce:	d1f7      	bne.n	80040c0 <W25_ShiftLeftFlashDataByPage+0xa4>
 80040d0:	8819      	ldrh	r1, [r3, #0]
 80040d2:	789b      	ldrb	r3, [r3, #2]
 80040d4:	8029      	strh	r1, [r5, #0]
 80040d6:	70ab      	strb	r3, [r5, #2]
				HAL_UART_Transmit(&huart1, (uint8_t*) spi_flash_data_intro, strlen(spi_flash_data_intro), 1000);
 80040d8:	4620      	mov	r0, r4
 80040da:	f7fc f8d9 	bl	8000290 <strlen>
 80040de:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80040e2:	b282      	uxth	r2, r0
 80040e4:	4621      	mov	r1, r4
 80040e6:	4867      	ldr	r0, [pc, #412]	@ (8004284 <W25_ShiftLeftFlashDataByPage+0x268>)
 80040e8:	f003 ff8e 	bl	8008008 <HAL_UART_Transmit>
				HAL_UART_Transmit(&huart1, next_page_buffer, 128, 1000);
 80040ec:	4967      	ldr	r1, [pc, #412]	@ (800428c <W25_ShiftLeftFlashDataByPage+0x270>)
 80040ee:	4865      	ldr	r0, [pc, #404]	@ (8004284 <W25_ShiftLeftFlashDataByPage+0x268>)
 80040f0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80040f4:	2280      	movs	r2, #128	@ 0x80
 80040f6:	f003 ff87 	bl	8008008 <HAL_UART_Transmit>
				Debug_printf("\n\n");
 80040fa:	4863      	ldr	r0, [pc, #396]	@ (8004288 <W25_ShiftLeftFlashDataByPage+0x26c>)
 80040fc:	f001 f82c 	bl	8005158 <Debug_printf>
        for (uint32_t offset = 0; offset < SECTOR_SIZE - PAGE_SIZE; offset += PAGE_SIZE) {
 8004100:	f8df b174 	ldr.w	fp, [pc, #372]	@ 8004278 <W25_ShiftLeftFlashDataByPage+0x25c>
				HAL_UART_Transmit(&huart1, (uint8_t*) spi_flash_data_intro, strlen(spi_flash_data_intro), 1000);
 8004104:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 8004284 <W25_ShiftLeftFlashDataByPage+0x268>
    uint32_t current_sector_start = FLASH_START_ADDRESS;
 8004108:	465d      	mov	r5, fp
 800410a:	2700      	movs	r7, #0
            if (IsPageValid(current_sector_buffer + offset + PAGE_SIZE)) {
 800410c:	46aa      	mov	sl, r5
 800410e:	3580      	adds	r5, #128	@ 0x80
 8004110:	4628      	mov	r0, r5
 8004112:	f7ff ff51 	bl	8003fb8 <IsPageValid>
 8004116:	3780      	adds	r7, #128	@ 0x80
            	Debug_printf("\n\n------VALID PAGE at %08lx-------\n", offset+PAGE_SIZE);
 8004118:	4639      	mov	r1, r7
            if (IsPageValid(current_sector_buffer + offset + PAGE_SIZE)) {
 800411a:	2800      	cmp	r0, #0
 800411c:	d052      	beq.n	80041c4 <W25_ShiftLeftFlashDataByPage+0x1a8>
            	Debug_printf("\n\n------VALID PAGE at %08lx-------\n", offset+PAGE_SIZE);
 800411e:	485e      	ldr	r0, [pc, #376]	@ (8004298 <W25_ShiftLeftFlashDataByPage+0x27c>)
 8004120:	f001 f81a 	bl	8005158 <Debug_printf>
            	char spi_flash_data_intro[] = "Valid Page Data: \n";
 8004124:	4b5d      	ldr	r3, [pc, #372]	@ (800429c <W25_ShiftLeftFlashDataByPage+0x280>)
 8004126:	4622      	mov	r2, r4
 8004128:	f103 0e10 	add.w	lr, r3, #16
 800412c:	6818      	ldr	r0, [r3, #0]
 800412e:	6859      	ldr	r1, [r3, #4]
 8004130:	4694      	mov	ip, r2
 8004132:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8004136:	3308      	adds	r3, #8
 8004138:	4573      	cmp	r3, lr
 800413a:	4662      	mov	r2, ip
 800413c:	d1f6      	bne.n	800412c <W25_ShiftLeftFlashDataByPage+0x110>
 800413e:	8819      	ldrh	r1, [r3, #0]
 8004140:	789b      	ldrb	r3, [r3, #2]
 8004142:	f8ac 1000 	strh.w	r1, [ip]
 8004146:	f88c 3002 	strb.w	r3, [ip, #2]
				HAL_UART_Transmit(&huart1, (uint8_t*) spi_flash_data_intro, strlen(spi_flash_data_intro), 1000);
 800414a:	4620      	mov	r0, r4
 800414c:	f7fc f8a0 	bl	8000290 <strlen>
 8004150:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004154:	b282      	uxth	r2, r0
 8004156:	4621      	mov	r1, r4
 8004158:	4640      	mov	r0, r8
 800415a:	f003 ff55 	bl	8008008 <HAL_UART_Transmit>
				HAL_UART_Transmit(&huart1, current_sector_buffer + offset+ PAGE_SIZE, 128, 1000);
 800415e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004162:	2280      	movs	r2, #128	@ 0x80
 8004164:	4629      	mov	r1, r5
 8004166:	4640      	mov	r0, r8
 8004168:	f003 ff4e 	bl	8008008 <HAL_UART_Transmit>
				Debug_printf("\n\n");
 800416c:	4846      	ldr	r0, [pc, #280]	@ (8004288 <W25_ShiftLeftFlashDataByPage+0x26c>)
 800416e:	f000 fff3 	bl	8005158 <Debug_printf>
                memcpy(current_sector_buffer + offset, current_sector_buffer + offset + PAGE_SIZE, PAGE_SIZE);
 8004172:	4629      	mov	r1, r5
 8004174:	2280      	movs	r2, #128	@ 0x80
 8004176:	4650      	mov	r0, sl
 8004178:	f008 fd6c 	bl	800cc54 <memcpy>
                UpdatePageAddress(current_sector_buffer + offset, current_sector_start + offset);
 800417c:	f1a6 0180 	sub.w	r1, r6, #128	@ 0x80
 8004180:	4439      	add	r1, r7
 8004182:	4650      	mov	r0, sl
 8004184:	f7ff ff34 	bl	8003ff0 <UpdatePageAddress>
        for (uint32_t offset = 0; offset < SECTOR_SIZE - PAGE_SIZE; offset += PAGE_SIZE) {
 8004188:	f5b7 6f78 	cmp.w	r7, #3968	@ 0xf80
 800418c:	d1be      	bne.n	800410c <W25_ShiftLeftFlashDataByPage+0xf0>
        if (next_sector_start < FLASH_END_ADDRESS && IsPageValid(next_page_buffer)) {
 800418e:	f5b9 4fa0 	cmp.w	r9, #20480	@ 0x5000
 8004192:	d047      	beq.n	8004224 <W25_ShiftLeftFlashDataByPage+0x208>
 8004194:	483d      	ldr	r0, [pc, #244]	@ (800428c <W25_ShiftLeftFlashDataByPage+0x270>)
 8004196:	f7ff ff0f 	bl	8003fb8 <IsPageValid>
 800419a:	2800      	cmp	r0, #0
 800419c:	d042      	beq.n	8004224 <W25_ShiftLeftFlashDataByPage+0x208>
            memcpy(current_sector_buffer + (SECTOR_SIZE - PAGE_SIZE), next_page_buffer, PAGE_SIZE);
 800419e:	493b      	ldr	r1, [pc, #236]	@ (800428c <W25_ShiftLeftFlashDataByPage+0x270>)
 80041a0:	483f      	ldr	r0, [pc, #252]	@ (80042a0 <W25_ShiftLeftFlashDataByPage+0x284>)
 80041a2:	2280      	movs	r2, #128	@ 0x80
 80041a4:	f008 fd56 	bl	800cc54 <memcpy>
            UpdatePageAddress(current_sector_buffer + (SECTOR_SIZE - PAGE_SIZE), current_sector_start + (SECTOR_SIZE - PAGE_SIZE));
 80041a8:	483d      	ldr	r0, [pc, #244]	@ (80042a0 <W25_ShiftLeftFlashDataByPage+0x284>)
 80041aa:	f44f 517e 	mov.w	r1, #16256	@ 0x3f80
 80041ae:	f7ff ff1f 	bl	8003ff0 <UpdatePageAddress>
        W25_Reset();
 80041b2:	f7ff fdae 	bl	8003d12 <W25_Reset>
        if (W25_SectorErase(current_sector_start) != HAL_OK) {
 80041b6:	4630      	mov	r0, r6
 80041b8:	f7ff fe56 	bl	8003e68 <W25_SectorErase>
 80041bc:	4604      	mov	r4, r0
 80041be:	b3b8      	cbz	r0, 8004230 <W25_ShiftLeftFlashDataByPage+0x214>
        	Debug_printf("Erase ALL CURRENT SECTOR: ERROR\n");
 80041c0:	4838      	ldr	r0, [pc, #224]	@ (80042a4 <W25_ShiftLeftFlashDataByPage+0x288>)
 80041c2:	e73f      	b.n	8004044 <W25_ShiftLeftFlashDataByPage+0x28>
            	Debug_printf("\n-------INVALID PAGE at %08lx-------\n", offset+PAGE_SIZE);
 80041c4:	4838      	ldr	r0, [pc, #224]	@ (80042a8 <W25_ShiftLeftFlashDataByPage+0x28c>)
 80041c6:	f000 ffc7 	bl	8005158 <Debug_printf>
            	char spi_flash_data_intro[] = "Invalid Page Data: \n";
 80041ca:	4b38      	ldr	r3, [pc, #224]	@ (80042ac <W25_ShiftLeftFlashDataByPage+0x290>)
 80041cc:	4622      	mov	r2, r4
 80041ce:	f103 0e10 	add.w	lr, r3, #16
 80041d2:	6818      	ldr	r0, [r3, #0]
 80041d4:	6859      	ldr	r1, [r3, #4]
 80041d6:	4694      	mov	ip, r2
 80041d8:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 80041dc:	3308      	adds	r3, #8
 80041de:	4573      	cmp	r3, lr
 80041e0:	4662      	mov	r2, ip
 80041e2:	d1f6      	bne.n	80041d2 <W25_ShiftLeftFlashDataByPage+0x1b6>
 80041e4:	6818      	ldr	r0, [r3, #0]
 80041e6:	791b      	ldrb	r3, [r3, #4]
 80041e8:	f8cc 0000 	str.w	r0, [ip]
 80041ec:	f88c 3004 	strb.w	r3, [ip, #4]
				HAL_UART_Transmit(&huart1, (uint8_t*) spi_flash_data_intro, strlen(spi_flash_data_intro), 1000);
 80041f0:	4620      	mov	r0, r4
 80041f2:	f7fc f84d 	bl	8000290 <strlen>
 80041f6:	4621      	mov	r1, r4
 80041f8:	b282      	uxth	r2, r0
 80041fa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80041fe:	4640      	mov	r0, r8
 8004200:	f003 ff02 	bl	8008008 <HAL_UART_Transmit>
				HAL_UART_Transmit(&huart1, current_sector_buffer + offset +PAGE_SIZE, 128, 1000);
 8004204:	4629      	mov	r1, r5
 8004206:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800420a:	2280      	movs	r2, #128	@ 0x80
 800420c:	4640      	mov	r0, r8
 800420e:	f003 fefb 	bl	8008008 <HAL_UART_Transmit>
				Debug_printf("\n\n");
 8004212:	481d      	ldr	r0, [pc, #116]	@ (8004288 <W25_ShiftLeftFlashDataByPage+0x26c>)
 8004214:	f000 ffa0 	bl	8005158 <Debug_printf>
                memset(current_sector_buffer + offset, 0xFF, PAGE_SIZE); // Invalidate the page
 8004218:	2280      	movs	r2, #128	@ 0x80
 800421a:	21ff      	movs	r1, #255	@ 0xff
 800421c:	4650      	mov	r0, sl
 800421e:	f007 fec5 	bl	800bfac <memset>
 8004222:	e7b1      	b.n	8004188 <W25_ShiftLeftFlashDataByPage+0x16c>
        	memset(current_sector_buffer + (SECTOR_SIZE - PAGE_SIZE), 0xFF, PAGE_SIZE); // Invalidate the last page
 8004224:	2280      	movs	r2, #128	@ 0x80
 8004226:	21ff      	movs	r1, #255	@ 0xff
 8004228:	481d      	ldr	r0, [pc, #116]	@ (80042a0 <W25_ShiftLeftFlashDataByPage+0x284>)
 800422a:	f007 febf 	bl	800bfac <memset>
 800422e:	e7c0      	b.n	80041b2 <W25_ShiftLeftFlashDataByPage+0x196>
        for (uint32_t offset = 0; offset < SECTOR_SIZE; offset += PAGE_SIZE) {
 8004230:	4605      	mov	r5, r0
        	uint8_t *page_data = current_sector_buffer + offset;
 8004232:	eb0b 0705 	add.w	r7, fp, r5
        	W25_Reset();
 8004236:	f7ff fd6c 	bl	8003d12 <W25_Reset>
        	if (IsPageValid(page_data)) {
 800423a:	4638      	mov	r0, r7
 800423c:	f7ff febc 	bl	8003fb8 <IsPageValid>
 8004240:	b150      	cbz	r0, 8004258 <W25_ShiftLeftFlashDataByPage+0x23c>
        		if (W25_PageProgram(current_sector_start + offset, current_sector_buffer + offset, PAGE_SIZE) != HAL_OK) {
 8004242:	2280      	movs	r2, #128	@ 0x80
 8004244:	4639      	mov	r1, r7
 8004246:	19a8      	adds	r0, r5, r6
 8004248:	f7ff fe3a 	bl	8003ec0 <W25_PageProgram>
 800424c:	b120      	cbz	r0, 8004258 <W25_ShiftLeftFlashDataByPage+0x23c>
					Debug_printf("PAGE PROGRAM: ERROR at page offset %08lx\n", offset);
 800424e:	4818      	ldr	r0, [pc, #96]	@ (80042b0 <W25_ShiftLeftFlashDataByPage+0x294>)
 8004250:	4629      	mov	r1, r5
 8004252:	f000 ff81 	bl	8005158 <Debug_printf>
					return HAL_ERROR; // Exit if write fails
 8004256:	e6f7      	b.n	8004048 <W25_ShiftLeftFlashDataByPage+0x2c>
        for (uint32_t offset = 0; offset < SECTOR_SIZE; offset += PAGE_SIZE) {
 8004258:	3580      	adds	r5, #128	@ 0x80
 800425a:	f5b5 5f80 	cmp.w	r5, #4096	@ 0x1000
 800425e:	d1e8      	bne.n	8004232 <W25_ShiftLeftFlashDataByPage+0x216>
    while (current_sector_start < FLASH_END_ADDRESS) {
 8004260:	f5b9 4fa0 	cmp.w	r9, #20480	@ 0x5000
        uint32_t next_sector_start = current_sector_start + SECTOR_SIZE;
 8004264:	f44f 4680 	mov.w	r6, #16384	@ 0x4000
    while (current_sector_start < FLASH_END_ADDRESS) {
 8004268:	f47f aee0 	bne.w	800402c <W25_ShiftLeftFlashDataByPage+0x10>
    Debug_printf("\n\n ----------------------END OF SHIFT LEFT -----------------------------\n\n");
 800426c:	4811      	ldr	r0, [pc, #68]	@ (80042b4 <W25_ShiftLeftFlashDataByPage+0x298>)
 800426e:	f000 ff73 	bl	8005158 <Debug_printf>
    return HAL_OK;
 8004272:	e6ea      	b.n	800404a <W25_ShiftLeftFlashDataByPage+0x2e>
 8004274:	08012ed9 	.word	0x08012ed9
 8004278:	200016c0 	.word	0x200016c0
 800427c:	08012f29 	.word	0x08012f29
 8004280:	08013057 	.word	0x08013057
 8004284:	20001240 	.word	0x20001240
 8004288:	08012969 	.word	0x08012969
 800428c:	20001640 	.word	0x20001640
 8004290:	08012f48 	.word	0x08012f48
 8004294:	0801308a 	.word	0x0801308a
 8004298:	08012f77 	.word	0x08012f77
 800429c:	080130bd 	.word	0x080130bd
 80042a0:	20002640 	.word	0x20002640
 80042a4:	08012fc1 	.word	0x08012fc1
 80042a8:	08012f9b 	.word	0x08012f9b
 80042ac:	080130d0 	.word	0x080130d0
 80042b0:	08012fe2 	.word	0x08012fe2
 80042b4:	0801300c 	.word	0x0801300c

080042b8 <calculate_epoch_time_utc>:
		osDelay(1000);
		memset(flashBufferTaxReceived, 0x00,128);
	}
}

uint32_t calculate_epoch_time_utc(DATE *date, TIME *time) {
 80042b8:	b500      	push	{lr}
    struct tm timeinfo;
    // Set up time structure
    timeinfo.tm_year = date->Yr - 1900; // - 1900 + 2000
 80042ba:	6883      	ldr	r3, [r0, #8]
uint32_t calculate_epoch_time_utc(DATE *date, TIME *time) {
 80042bc:	b08b      	sub	sp, #44	@ 0x2c
    timeinfo.tm_year = date->Yr - 1900; // - 1900 + 2000
 80042be:	f2a3 736c 	subw	r3, r3, #1900	@ 0x76c
 80042c2:	9306      	str	r3, [sp, #24]
    timeinfo.tm_mon = date->Mon - 1;
 80042c4:	6843      	ldr	r3, [r0, #4]
 80042c6:	3b01      	subs	r3, #1
 80042c8:	9305      	str	r3, [sp, #20]
    timeinfo.tm_mday = date->Day;
 80042ca:	6803      	ldr	r3, [r0, #0]
 80042cc:	9304      	str	r3, [sp, #16]
    timeinfo.tm_hour = time->hour;
 80042ce:	680b      	ldr	r3, [r1, #0]
 80042d0:	9303      	str	r3, [sp, #12]
    timeinfo.tm_min = time->min;
 80042d2:	684b      	ldr	r3, [r1, #4]
 80042d4:	9302      	str	r3, [sp, #8]
    timeinfo.tm_sec = time->sec;
 80042d6:	688b      	ldr	r3, [r1, #8]
 80042d8:	9301      	str	r3, [sp, #4]
    timeinfo.tm_isdst = -1; // Let mktime determine DST if necessary

    // Get the local epoch time and then adjust for timezone offset
    time_t local_epoch = mktime(&timeinfo);
 80042da:	a801      	add	r0, sp, #4
    timeinfo.tm_isdst = -1; // Let mktime determine DST if necessary
 80042dc:	f04f 33ff 	mov.w	r3, #4294967295
 80042e0:	9309      	str	r3, [sp, #36]	@ 0x24
    time_t local_epoch = mktime(&timeinfo);
 80042e2:	f007 ff9d 	bl	800c220 <mktime>
    return (uint32_t)(local_epoch + 25200); // Subtract timezone offset
}
 80042e6:	f500 40c4 	add.w	r0, r0, #25088	@ 0x6200
 80042ea:	3070      	adds	r0, #112	@ 0x70
 80042ec:	b00b      	add	sp, #44	@ 0x2c
 80042ee:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080042f4 <format_rmc_data>:

void format_rmc_data(RMCSTRUCT *rmc_data, char *output_buffer, size_t buffer_size) {
 80042f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80042f8:	ed2d 8b04 	vpush	{d8-d9}
 80042fc:	4604      	mov	r4, r0
 80042fe:	b09b      	sub	sp, #108	@ 0x6c
 8004300:	e9cd 1218 	strd	r1, r2, [sp, #96]	@ 0x60
	//uart_transmit_string(&huart1, (uint8_t*) "Format RMC data");
    uint32_t epoch_time = calculate_epoch_time_utc(&rmc_data->date, &rmc_data->tim);
 8004304:	4601      	mov	r1, r0
 8004306:	3010      	adds	r0, #16
 8004308:	f7ff ffd6 	bl	80042b8 <calculate_epoch_time_utc>

    // Format all fields in a single line with semicolon separation, including date
    snprintf(output_buffer, buffer_size, "%d;%d;%d;%d;%d;%d;%.6f;%c;%.6f;%c;%.1f;%.1f;%s;%lu", rmc_data->date.Yr, rmc_data->date.Mon, rmc_data->date.Day, rmc_data->tim.hour, rmc_data->tim.min, rmc_data->tim.sec, rmc_data->lcation.latitude, rmc_data->lcation.NS, rmc_data->lcation.longitude, rmc_data->lcation.EW, rmc_data->speed, rmc_data->course, rmc_data->isValid ? "Valid" : "Invalid", epoch_time);
 800430c:	69a3      	ldr	r3, [r4, #24]
 800430e:	9314      	str	r3, [sp, #80]	@ 0x50
 8004310:	e9d4 3504 	ldrd	r3, r5, [r4, #16]
    uint32_t epoch_time = calculate_epoch_time_utc(&rmc_data->date, &rmc_data->tim);
 8004314:	4607      	mov	r7, r0
    snprintf(output_buffer, buffer_size, "%d;%d;%d;%d;%d;%d;%.6f;%c;%.6f;%c;%.1f;%.1f;%s;%lu", rmc_data->date.Yr, rmc_data->date.Mon, rmc_data->date.Day, rmc_data->tim.hour, rmc_data->tim.min, rmc_data->tim.sec, rmc_data->lcation.latitude, rmc_data->lcation.NS, rmc_data->lcation.longitude, rmc_data->lcation.EW, rmc_data->speed, rmc_data->course, rmc_data->isValid ? "Valid" : "Invalid", epoch_time);
 8004316:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8004318:	9315      	str	r3, [sp, #84]	@ 0x54
 800431a:	f7fc f925 	bl	8000568 <__aeabi_f2d>
 800431e:	e9cd 0116 	strd	r0, r1, [sp, #88]	@ 0x58
 8004322:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8004324:	f8d4 b008 	ldr.w	fp, [r4, #8]
 8004328:	f894 6040 	ldrb.w	r6, [r4, #64]	@ 0x40
 800432c:	f894 8050 	ldrb.w	r8, [r4, #80]	@ 0x50
 8004330:	f7fc f91a 	bl	8000568 <__aeabi_f2d>
 8004334:	e9d4 9a00 	ldrd	r9, sl, [r4]
 8004338:	ed94 8b0e 	vldr	d8, [r4, #56]	@ 0x38
 800433c:	ed94 9b12 	vldr	d9, [r4, #72]	@ 0x48
 8004340:	ed9d 7b16 	vldr	d7, [sp, #88]	@ 0x58
 8004344:	6b24      	ldr	r4, [r4, #48]	@ 0x30
 8004346:	f8cd 8030 	str.w	r8, [sp, #48]	@ 0x30
 800434a:	4602      	mov	r2, r0
 800434c:	460b      	mov	r3, r1
 800434e:	4811      	ldr	r0, [pc, #68]	@ (8004394 <format_rmc_data+0xa0>)
 8004350:	4911      	ldr	r1, [pc, #68]	@ (8004398 <format_rmc_data+0xa4>)
 8004352:	9608      	str	r6, [sp, #32]
 8004354:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8004358:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800435a:	4a10      	ldr	r2, [pc, #64]	@ (800439c <format_rmc_data+0xa8>)
 800435c:	f8cd 9008 	str.w	r9, [sp, #8]
 8004360:	2c00      	cmp	r4, #0
 8004362:	bf08      	it	eq
 8004364:	4601      	moveq	r1, r0
 8004366:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800436a:	e9cd 5300 	strd	r5, r3, [sp]
 800436e:	e9cd 1712 	strd	r1, r7, [sp, #72]	@ 0x48
 8004372:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8004374:	ed8d 9b0a 	vstr	d9, [sp, #40]	@ 0x28
 8004378:	ed8d 8b06 	vstr	d8, [sp, #24]
 800437c:	e9cd ab03 	strd	sl, fp, [sp, #12]
 8004380:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	@ 0x60
 8004384:	f007 fd16 	bl	800bdb4 <sniprintf>
}
 8004388:	b01b      	add	sp, #108	@ 0x6c
 800438a:	ecbd 8b04 	vpop	{d8-d9}
 800438e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004392:	bf00      	nop
 8004394:	080116ae 	.word	0x080116ae
 8004398:	080116a8 	.word	0x080116a8
 800439c:	08013118 	.word	0x08013118

080043a0 <saveRMC>:


void saveRMC(){
 80043a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	Debug_printf("\n\n Inside SAVING RMC TO FLASH \n\n");
	int k = 0;
	int j = 0;
	W25_Reset();
	if (is_erased_rmc == 0){
 80043a4:	4c8a      	ldr	r4, [pc, #552]	@ (80045d0 <saveRMC+0x230>)
	Debug_printf("\n\n Inside SAVING RMC TO FLASH \n\n");
 80043a6:	488b      	ldr	r0, [pc, #556]	@ (80045d4 <saveRMC+0x234>)
void saveRMC(){
 80043a8:	b085      	sub	sp, #20
	Debug_printf("\n\n Inside SAVING RMC TO FLASH \n\n");
 80043aa:	f000 fed5 	bl	8005158 <Debug_printf>
	W25_Reset();
 80043ae:	f7ff fcb0 	bl	8003d12 <W25_Reset>
	if (is_erased_rmc == 0){
 80043b2:	6823      	ldr	r3, [r4, #0]
 80043b4:	b92b      	cbnz	r3, 80043c2 <saveRMC+0x22>
		W25_SectorErase(address_rmc);
 80043b6:	4b88      	ldr	r3, [pc, #544]	@ (80045d8 <saveRMC+0x238>)
 80043b8:	6818      	ldr	r0, [r3, #0]
 80043ba:	f7ff fd55 	bl	8003e68 <W25_SectorErase>
		is_erased_rmc = 1;
 80043be:	2301      	movs	r3, #1
 80043c0:	6023      	str	r3, [r4, #0]
	}
	
	for(size_t i = 0; i < 128; i++){
 80043c2:	4a86      	ldr	r2, [pc, #536]	@ (80045dc <saveRMC+0x23c>)
 80043c4:	2300      	movs	r3, #0
 80043c6:	4616      	mov	r6, r2
		if(rmcBufferDemo[i] != 0x00 && rmcBufferDemo[i+1] == 0x00){
 80043c8:	f812 1b01 	ldrb.w	r1, [r2], #1
 80043cc:	461d      	mov	r5, r3
 80043ce:	3301      	adds	r3, #1
 80043d0:	b109      	cbz	r1, 80043d6 <saveRMC+0x36>
 80043d2:	7811      	ldrb	r1, [r2, #0]
 80043d4:	b111      	cbz	r1, 80043dc <saveRMC+0x3c>
	for(size_t i = 0; i < 128; i++){
 80043d6:	2b80      	cmp	r3, #128	@ 0x80
 80043d8:	d1f6      	bne.n	80043c8 <saveRMC+0x28>
	int k = 0;
 80043da:	2500      	movs	r5, #0
			k = i;
			break;
		}
	}
	char addr_out[10];
	sprintf(addr_out, "%08lx", address_rmc);
 80043dc:	4c7e      	ldr	r4, [pc, #504]	@ (80045d8 <saveRMC+0x238>)
 80043de:	4980      	ldr	r1, [pc, #512]	@ (80045e0 <saveRMC+0x240>)
 80043e0:	6822      	ldr	r2, [r4, #0]
 80043e2:	a801      	add	r0, sp, #4
 80043e4:	f007 fd1a 	bl	800be1c <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*) addr_out, 8, 1000);
 80043e8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80043ec:	2208      	movs	r2, #8
 80043ee:	a901      	add	r1, sp, #4
 80043f0:	487c      	ldr	r0, [pc, #496]	@ (80045e4 <saveRMC+0x244>)
 80043f2:	f003 fe09 	bl	8008008 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, (uint8_t*)"\r\n", 1, 1000);
 80043f6:	497c      	ldr	r1, [pc, #496]	@ (80045e8 <saveRMC+0x248>)
 80043f8:	487a      	ldr	r0, [pc, #488]	@ (80045e4 <saveRMC+0x244>)
 80043fa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80043fe:	2201      	movs	r2, #1
 8004400:	f003 fe02 	bl	8008008 <HAL_UART_Transmit>
	
	k++;
	rmcBufferDemo[k] = ';';
 8004404:	1973      	adds	r3, r6, r5
 8004406:	223b      	movs	r2, #59	@ 0x3b
 8004408:	705a      	strb	r2, [r3, #1]
	for(size_t idx = 6; idx > 0 ; idx--){
		k++;
		rmcBufferDemo[k] = addr_out[8 - idx];
 800440a:	1cab      	adds	r3, r5, #2
 800440c:	f8dd 1006 	ldr.w	r1, [sp, #6]
 8004410:	50f1      	str	r1, [r6, r3]
 8004412:	18f2      	adds	r2, r6, r3
 8004414:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8004418:	8093      	strh	r3, [r2, #4]
	}
	
	for (j=0;j<110-k-1;j++)
	{
		rmcBufferDemo[j+k+1]=0x00;
 800441a:	f105 0008 	add.w	r0, r5, #8
 800441e:	f1c5 0266 	rsb	r2, r5, #102	@ 0x66
 8004422:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 8004426:	2100      	movs	r1, #0
 8004428:	4430      	add	r0, r6
 800442a:	f007 fdbf 	bl	800bfac <memset>
	}

	if(address_rmc % 0x1000 == 0x0000){
 800442e:	6823      	ldr	r3, [r4, #0]
 8004430:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004434:	b92b      	cbnz	r3, 8004442 <saveRMC+0xa2>
		Debug_printf("\n\nErasing SECTOR IN ADVANCE\n");
 8004436:	486d      	ldr	r0, [pc, #436]	@ (80045ec <saveRMC+0x24c>)
 8004438:	f000 fe8e 	bl	8005158 <Debug_printf>
		W25_SectorErase(address_rmc);
 800443c:	6820      	ldr	r0, [r4, #0]
 800443e:	f7ff fd13 	bl	8003e68 <W25_SectorErase>
	}

	W25_Reset();
 8004442:	f7ff fc66 	bl	8003d12 <W25_Reset>
	W25_PageProgram(address_rmc, rmcBufferDemo, 128);
 8004446:	2280      	movs	r2, #128	@ 0x80
 8004448:	4964      	ldr	r1, [pc, #400]	@ (80045dc <saveRMC+0x23c>)
 800444a:	6820      	ldr	r0, [r4, #0]
	uart_transmit_string(&huart1, (uint8_t*) "Buffer before saving to FLASH: ");
	uart_transmit_string(&huart1, rmcBufferDemo);
	current_addr = address_rmc;
 800444c:	4e68      	ldr	r6, [pc, #416]	@ (80045f0 <saveRMC+0x250>)
	W25_PageProgram(address_rmc, rmcBufferDemo, 128);
 800444e:	f7ff fd37 	bl	8003ec0 <W25_PageProgram>
	uart_transmit_string(&huart1, (uint8_t*) "Buffer before saving to FLASH: ");
 8004452:	4968      	ldr	r1, [pc, #416]	@ (80045f4 <saveRMC+0x254>)
 8004454:	4863      	ldr	r0, [pc, #396]	@ (80045e4 <saveRMC+0x244>)
 8004456:	f000 fe6f 	bl	8005138 <uart_transmit_string>
	uart_transmit_string(&huart1, rmcBufferDemo);
 800445a:	4960      	ldr	r1, [pc, #384]	@ (80045dc <saveRMC+0x23c>)
 800445c:	4861      	ldr	r0, [pc, #388]	@ (80045e4 <saveRMC+0x244>)
 800445e:	f000 fe6b 	bl	8005138 <uart_transmit_string>
	current_addr = address_rmc;
 8004462:	6821      	ldr	r1, [r4, #0]
 8004464:	4b64      	ldr	r3, [pc, #400]	@ (80045f8 <saveRMC+0x258>)
 8004466:	6031      	str	r1, [r6, #0]
	if(address_rmc == FLASH_END_ADDRESS-128){
 8004468:	f5b1 4f9f 	cmp.w	r1, #20352	@ 0x4f80
 800446c:	f040 80ad 	bne.w	80045ca <saveRMC+0x22a>
		is_flash_overflow = 1;
 8004470:	2201      	movs	r2, #1
		Debug_printf(" ADDRESS RMC before SHIFT LEFT BY ONE PAGE: %08lx", address_rmc);
 8004472:	4862      	ldr	r0, [pc, #392]	@ (80045fc <saveRMC+0x25c>)
		is_flash_overflow = 1;
 8004474:	601a      	str	r2, [r3, #0]
		Debug_printf(" ADDRESS RMC before SHIFT LEFT BY ONE PAGE: %08lx", address_rmc);
 8004476:	f000 fe6f 	bl	8005158 <Debug_printf>
		W25_Reset();
 800447a:	f7ff fc4a 	bl	8003d12 <W25_Reset>
		W25_ReadData(address_rmc, flashBufferRMCReceived, 128);
 800447e:	4960      	ldr	r1, [pc, #384]	@ (8004600 <saveRMC+0x260>)
 8004480:	6820      	ldr	r0, [r4, #0]
 8004482:	4f60      	ldr	r7, [pc, #384]	@ (8004604 <saveRMC+0x264>)
 8004484:	2280      	movs	r2, #128	@ 0x80
 8004486:	f7ff fd65 	bl	8003f54 <W25_ReadData>
		HAL_UART_Transmit(&huart1, flashBufferRMCReceived, sizeof(flashBufferRMCReceived), 1000);
 800448a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800448e:	495c      	ldr	r1, [pc, #368]	@ (8004600 <saveRMC+0x260>)
 8004490:	4854      	ldr	r0, [pc, #336]	@ (80045e4 <saveRMC+0x244>)
 8004492:	2280      	movs	r2, #128	@ 0x80
 8004494:	f003 fdb8 	bl	8008008 <HAL_UART_Transmit>

		W25_ShiftLeftFlashDataByPage();
 8004498:	f7ff fdc0 	bl	800401c <W25_ShiftLeftFlashDataByPage>
		address_rmc -= 128;
 800449c:	6823      	ldr	r3, [r4, #0]
 800449e:	3b80      	subs	r3, #128	@ 0x80
 80044a0:	6023      	str	r3, [r4, #0]
		if(is_using_flash == 0){
 80044a2:	4b59      	ldr	r3, [pc, #356]	@ (8004608 <saveRMC+0x268>)
 80044a4:	f8d3 8000 	ldr.w	r8, [r3]
 80044a8:	f1b8 0f00 	cmp.w	r8, #0
 80044ac:	f040 8088 	bne.w	80045c0 <saveRMC+0x220>
			if(start_addr_disconnect > FLASH_START_ADDRESS)
 80044b0:	683b      	ldr	r3, [r7, #0]
				start_addr_disconnect -= 128;
			Debug_printf("\n-----------------BEFORE update the result address data --------------\n");
			printQueue_GSM(&result_addr_queue);
 80044b2:	4d56      	ldr	r5, [pc, #344]	@ (800460c <saveRMC+0x26c>)
			Debug_printf("\n-----------------BEFORE update the result address data --------------\n");
 80044b4:	4856      	ldr	r0, [pc, #344]	@ (8004610 <saveRMC+0x270>)
			if(start_addr_disconnect > FLASH_START_ADDRESS)
 80044b6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
				start_addr_disconnect -= 128;
 80044ba:	bf82      	ittt	hi
 80044bc:	683b      	ldrhi	r3, [r7, #0]
 80044be:	3b80      	subhi	r3, #128	@ 0x80
 80044c0:	603b      	strhi	r3, [r7, #0]
			Debug_printf("\n-----------------BEFORE update the result address data --------------\n");
 80044c2:	f000 fe49 	bl	8005158 <Debug_printf>
			printQueue_GSM(&result_addr_queue);
 80044c6:	4628      	mov	r0, r5
 80044c8:	f7fe ffe0 	bl	800348c <printQueue_GSM>
			Debug_printf("\n---------------Update the result address data--------------\n");
 80044cc:	4851      	ldr	r0, [pc, #324]	@ (8004614 <saveRMC+0x274>)
 80044ce:	f000 fe43 	bl	8005158 <Debug_printf>
			for (int i = 0; i < result_addr_queue.size; i++) {
 80044d2:	f8d5 0208 	ldr.w	r0, [r5, #520]	@ 0x208
				int idx = (result_addr_queue.front + i) % MAX_SIZE;
 80044d6:	f8d5 c200 	ldr.w	ip, [r5, #512]	@ 0x200
			for (int i = 0; i < result_addr_queue.size; i++) {
 80044da:	2200      	movs	r2, #0
 80044dc:	4290      	cmp	r0, r2
 80044de:	dc47      	bgt.n	8004570 <saveRMC+0x1d0>
					result_addr_queue.data[idx] -= 128;
			}
			for (int i = 0; i < result_addr_queue.size; i++) {
				int idx = (result_addr_queue.front + i) % MAX_SIZE;
				if(result_addr_queue.data[idx] < 0x3000)
					deleteMiddle_GSM(&result_addr_queue, idx);
 80044e0:	f8df 9128 	ldr.w	r9, [pc, #296]	@ 800460c <saveRMC+0x26c>
			for (int i = 0; i < result_addr_queue.size; i++) {
 80044e4:	f8d5 3208 	ldr.w	r3, [r5, #520]	@ 0x208
 80044e8:	4543      	cmp	r3, r8
 80044ea:	dc54      	bgt.n	8004596 <saveRMC+0x1f6>
			}
			printQueue_GSM(&result_addr_queue);
 80044ec:	4847      	ldr	r0, [pc, #284]	@ (800460c <saveRMC+0x26c>)
 80044ee:	f7fe ffcd 	bl	800348c <printQueue_GSM>
			if(end_addr_disconnect > start_addr_disconnect)
 80044f2:	4b49      	ldr	r3, [pc, #292]	@ (8004618 <saveRMC+0x278>)
 80044f4:	6819      	ldr	r1, [r3, #0]
 80044f6:	683a      	ldr	r2, [r7, #0]
 80044f8:	4291      	cmp	r1, r2
 80044fa:	d902      	bls.n	8004502 <saveRMC+0x162>
				end_addr_disconnect -= 128;
 80044fc:	681a      	ldr	r2, [r3, #0]
 80044fe:	3a80      	subs	r2, #128	@ 0x80
 8004500:	601a      	str	r2, [r3, #0]
		}
		else{
			count_shiftleft++;
		}
		Debug_printf("\n\n------------------ CURRENT START ADDRESS DISCONNECT: %08lx---------------\n\n", start_addr_disconnect);
 8004502:	6839      	ldr	r1, [r7, #0]
 8004504:	4845      	ldr	r0, [pc, #276]	@ (800461c <saveRMC+0x27c>)
 8004506:	f000 fe27 	bl	8005158 <Debug_printf>
		Debug_printf("\n--------------SHIFT LEFT COUNT: %d-------------\n", count_shiftleft);
 800450a:	4b45      	ldr	r3, [pc, #276]	@ (8004620 <saveRMC+0x280>)
 800450c:	4845      	ldr	r0, [pc, #276]	@ (8004624 <saveRMC+0x284>)
 800450e:	7819      	ldrb	r1, [r3, #0]
 8004510:	f000 fe22 	bl	8005158 <Debug_printf>
		current_addr -= 128;
 8004514:	6833      	ldr	r3, [r6, #0]
	    Debug_printf("\n");
 8004516:	4844      	ldr	r0, [pc, #272]	@ (8004628 <saveRMC+0x288>)
		current_addr -= 128;
 8004518:	3b80      	subs	r3, #128	@ 0x80
 800451a:	6033      	str	r3, [r6, #0]
	    Debug_printf("\n");
 800451c:	f000 fe1c 	bl	8005158 <Debug_printf>
		Debug_printf(" ADDRESS RMC after SHIFT LEFT BY ONE PAGE: %08lx", address_rmc);
 8004520:	6821      	ldr	r1, [r4, #0]
 8004522:	4842      	ldr	r0, [pc, #264]	@ (800462c <saveRMC+0x28c>)
 8004524:	f000 fe18 	bl	8005158 <Debug_printf>
		W25_Reset();
 8004528:	f7ff fbf3 	bl	8003d12 <W25_Reset>
		W25_ReadData(address_rmc, flashBufferRMCReceived, 128);
 800452c:	4934      	ldr	r1, [pc, #208]	@ (8004600 <saveRMC+0x260>)
 800452e:	6820      	ldr	r0, [r4, #0]
 8004530:	2280      	movs	r2, #128	@ 0x80
 8004532:	f7ff fd0f 	bl	8003f54 <W25_ReadData>
		HAL_UART_Transmit(&huart1, flashBufferRMCReceived, sizeof(flashBufferRMCReceived), 1000);
 8004536:	4932      	ldr	r1, [pc, #200]	@ (8004600 <saveRMC+0x260>)
 8004538:	482a      	ldr	r0, [pc, #168]	@ (80045e4 <saveRMC+0x244>)
 800453a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800453e:	2280      	movs	r2, #128	@ 0x80
 8004540:	f003 fd62 	bl	8008008 <HAL_UART_Transmit>
	}
	else {
		is_flash_overflow = 0;
	}
	if(address_rmc < FLASH_END_ADDRESS-128)
 8004544:	6823      	ldr	r3, [r4, #0]
 8004546:	f5b3 4f9f 	cmp.w	r3, #20352	@ 0x4f80
		address_rmc += 128;
 800454a:	bf38      	it	cc
 800454c:	3380      	addcc	r3, #128	@ 0x80
	osDelay(1000);
 800454e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
		address_rmc += 128;
 8004552:	bf38      	it	cc
 8004554:	6023      	strcc	r3, [r4, #0]
	osDelay(1000);
 8004556:	f003 ff47 	bl	80083e8 <osDelay>
	Debug_printf("\n");
 800455a:	4833      	ldr	r0, [pc, #204]	@ (8004628 <saveRMC+0x288>)
 800455c:	f000 fdfc 	bl	8005158 <Debug_printf>
	memset(flashBufferRMCReceived, 0x00,128);
 8004560:	4827      	ldr	r0, [pc, #156]	@ (8004600 <saveRMC+0x260>)
 8004562:	2280      	movs	r2, #128	@ 0x80
 8004564:	2100      	movs	r1, #0
}
 8004566:	b005      	add	sp, #20
 8004568:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	memset(flashBufferRMCReceived, 0x00,128);
 800456c:	f007 bd1e 	b.w	800bfac <memset>
				int idx = (result_addr_queue.front + i) % MAX_SIZE;
 8004570:	eb02 030c 	add.w	r3, r2, ip
 8004574:	4259      	negs	r1, r3
 8004576:	f001 017f 	and.w	r1, r1, #127	@ 0x7f
 800457a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800457e:	bf58      	it	pl
 8004580:	424b      	negpl	r3, r1
			for (int i = 0; i < result_addr_queue.size; i++) {
 8004582:	3201      	adds	r2, #1
				if(result_addr_queue.data[idx] >= 0x3000)
 8004584:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
 8004588:	f5b1 5f40 	cmp.w	r1, #12288	@ 0x3000
					result_addr_queue.data[idx] -= 128;
 800458c:	bf24      	itt	cs
 800458e:	3980      	subcs	r1, #128	@ 0x80
 8004590:	f845 1023 	strcs.w	r1, [r5, r3, lsl #2]
			for (int i = 0; i < result_addr_queue.size; i++) {
 8004594:	e7a2      	b.n	80044dc <saveRMC+0x13c>
				int idx = (result_addr_queue.front + i) % MAX_SIZE;
 8004596:	f8d5 1200 	ldr.w	r1, [r5, #512]	@ 0x200
 800459a:	4441      	add	r1, r8
 800459c:	424b      	negs	r3, r1
 800459e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80045a2:	f001 017f 	and.w	r1, r1, #127	@ 0x7f
 80045a6:	bf58      	it	pl
 80045a8:	4259      	negpl	r1, r3
				if(result_addr_queue.data[idx] < 0x3000)
 80045aa:	f855 3021 	ldr.w	r3, [r5, r1, lsl #2]
 80045ae:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80045b2:	d202      	bcs.n	80045ba <saveRMC+0x21a>
					deleteMiddle_GSM(&result_addr_queue, idx);
 80045b4:	4648      	mov	r0, r9
 80045b6:	f7fe ffc3 	bl	8003540 <deleteMiddle_GSM>
			for (int i = 0; i < result_addr_queue.size; i++) {
 80045ba:	f108 0801 	add.w	r8, r8, #1
 80045be:	e791      	b.n	80044e4 <saveRMC+0x144>
			count_shiftleft++;
 80045c0:	4a17      	ldr	r2, [pc, #92]	@ (8004620 <saveRMC+0x280>)
 80045c2:	7813      	ldrb	r3, [r2, #0]
 80045c4:	3301      	adds	r3, #1
 80045c6:	7013      	strb	r3, [r2, #0]
 80045c8:	e79b      	b.n	8004502 <saveRMC+0x162>
		is_flash_overflow = 0;
 80045ca:	2200      	movs	r2, #0
 80045cc:	601a      	str	r2, [r3, #0]
 80045ce:	e7b9      	b.n	8004544 <saveRMC+0x1a4>
 80045d0:	200027c0 	.word	0x200027c0
 80045d4:	0801314b 	.word	0x0801314b
 80045d8:	2000000c 	.word	0x2000000c
 80045dc:	200026c0 	.word	0x200026c0
 80045e0:	080131d5 	.word	0x080131d5
 80045e4:	20001240 	.word	0x20001240
 80045e8:	08011d56 	.word	0x08011d56
 80045ec:	0801316c 	.word	0x0801316c
 80045f0:	20000008 	.word	0x20000008
 80045f4:	08013189 	.word	0x08013189
 80045f8:	20000e34 	.word	0x20000e34
 80045fc:	080131a9 	.word	0x080131a9
 8004600:	20002740 	.word	0x20002740
 8004604:	20000e30 	.word	0x20000e30
 8004608:	20000e44 	.word	0x20000e44
 800460c:	20000e4c 	.word	0x20000e4c
 8004610:	080131db 	.word	0x080131db
 8004614:	08013223 	.word	0x08013223
 8004618:	20000e28 	.word	0x20000e28
 800461c:	08013261 	.word	0x08013261
 8004620:	20000e3c 	.word	0x20000e3c
 8004624:	080132af 	.word	0x080132af
 8004628:	0801296a 	.word	0x0801296a
 800462c:	080132e1 	.word	0x080132e1

08004630 <sendRMCDataWithAddrToGSM>:


void sendRMCDataWithAddrToGSM(GSM_MAIL_STRUCT *mail_data){
	if(mail_data->rmc.date.Yr >= 24){
 8004630:	6983      	ldr	r3, [r0, #24]
 8004632:	2b17      	cmp	r3, #23
void sendRMCDataWithAddrToGSM(GSM_MAIL_STRUCT *mail_data){
 8004634:	b510      	push	{r4, lr}
 8004636:	4604      	mov	r4, r0
	if(mail_data->rmc.date.Yr >= 24){
 8004638:	dd10      	ble.n	800465c <sendRMCDataWithAddrToGSM+0x2c>
		HAL_UART_Transmit(&huart1, (uint8_t*) "\n\n\nSENDING RMC with Addr TO GSM\n\n",  strlen("\n\n\nSENDING RMC with Addr TO GSM\n\n") , HAL_MAX_DELAY);
 800463a:	4909      	ldr	r1, [pc, #36]	@ (8004660 <sendRMCDataWithAddrToGSM+0x30>)
 800463c:	4809      	ldr	r0, [pc, #36]	@ (8004664 <sendRMCDataWithAddrToGSM+0x34>)
 800463e:	f04f 33ff 	mov.w	r3, #4294967295
 8004642:	2221      	movs	r2, #33	@ 0x21
 8004644:	f003 fce0 	bl	8008008 <HAL_UART_Transmit>
		osMessageQueuePut(RMC_MailQGSMId, mail_data, 0, 1000);
 8004648:	4807      	ldr	r0, [pc, #28]	@ (8004668 <sendRMCDataWithAddrToGSM+0x38>)
 800464a:	4621      	mov	r1, r4
 800464c:	6800      	ldr	r0, [r0, #0]
	}
}
 800464e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		osMessageQueuePut(RMC_MailQGSMId, mail_data, 0, 1000);
 8004652:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004656:	2200      	movs	r2, #0
 8004658:	f003 bf6c 	b.w	8008534 <osMessageQueuePut>
}
 800465c:	bd10      	pop	{r4, pc}
 800465e:	bf00      	nop
 8004660:	08013312 	.word	0x08013312
 8004664:	20001240 	.word	0x20001240
 8004668:	200027c4 	.word	0x200027c4

0800466c <parseRMCString>:

void parseRMCString(uint8_t *str, RMCSTRUCT *rmc) {
 800466c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004670:	b0d4      	sub	sp, #336	@ 0x150
 8004672:	460c      	mov	r4, r1
    // Cast the uint8_t* to char* for string operations
    char buffer[256];
    strncpy(buffer, (char*)str, sizeof(buffer));
 8004674:	22ff      	movs	r2, #255	@ 0xff
 8004676:	4601      	mov	r1, r0
 8004678:	a814      	add	r0, sp, #80	@ 0x50
 800467a:	f007 fcbe 	bl	800bffa <strncpy>
    buffer[sizeof(buffer) - 1] = '\0'; // Ensure null termination
 800467e:	2500      	movs	r5, #0

    // Remove the last parameter by locating the last ';'
    char *lastSemicolon = strrchr(buffer, ';');
 8004680:	213b      	movs	r1, #59	@ 0x3b
 8004682:	a814      	add	r0, sp, #80	@ 0x50
    buffer[sizeof(buffer) - 1] = '\0'; // Ensure null termination
 8004684:	f88d 514f 	strb.w	r5, [sp, #335]	@ 0x14f
    char *lastSemicolon = strrchr(buffer, ';');
 8004688:	f007 fcca 	bl	800c020 <strrchr>
    if (lastSemicolon) {
 800468c:	b100      	cbz	r0, 8004690 <parseRMCString+0x24>
        *lastSemicolon = '\0'; // Terminate the string here to exclude the last parameter
 800468e:	7005      	strb	r5, [r0, #0]

    // Parse the string (now excluding the last parameter)
    char validStr[10];
   // unsigned long long epoch;
    int epoch0, epoch1, epoch2;
    sscanf(buffer, "%d;%d;%d;%d;%d;%d;%lf;%c;%lf;%c;%f;%f;%9[^;];%04d%04d%02d",
 8004690:	f104 032c 	add.w	r3, r4, #44	@ 0x2c
 8004694:	9309      	str	r3, [sp, #36]	@ 0x24
 8004696:	f104 0328 	add.w	r3, r4, #40	@ 0x28
 800469a:	9308      	str	r3, [sp, #32]
 800469c:	f104 0350 	add.w	r3, r4, #80	@ 0x50
 80046a0:	9307      	str	r3, [sp, #28]
 80046a2:	f104 0348 	add.w	r3, r4, #72	@ 0x48
 80046a6:	9306      	str	r3, [sp, #24]
 80046a8:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 80046ac:	9305      	str	r3, [sp, #20]
 80046ae:	f104 0338 	add.w	r3, r4, #56	@ 0x38
 80046b2:	9304      	str	r3, [sp, #16]
 80046b4:	f104 0308 	add.w	r3, r4, #8
 80046b8:	9303      	str	r3, [sp, #12]
 80046ba:	1d23      	adds	r3, r4, #4
 80046bc:	e9cd 4301 	strd	r4, r3, [sp, #4]
 80046c0:	f10d 0844 	add.w	r8, sp, #68	@ 0x44
 80046c4:	f104 0310 	add.w	r3, r4, #16
 80046c8:	ad10      	add	r5, sp, #64	@ 0x40
 80046ca:	ae0f      	add	r6, sp, #60	@ 0x3c
 80046cc:	af0e      	add	r7, sp, #56	@ 0x38
 80046ce:	f104 0218 	add.w	r2, r4, #24
 80046d2:	9300      	str	r3, [sp, #0]
 80046d4:	4911      	ldr	r1, [pc, #68]	@ (800471c <parseRMCString+0xb0>)
 80046d6:	950d      	str	r5, [sp, #52]	@ 0x34
 80046d8:	f104 0314 	add.w	r3, r4, #20
 80046dc:	960c      	str	r6, [sp, #48]	@ 0x30
 80046de:	970b      	str	r7, [sp, #44]	@ 0x2c
 80046e0:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 80046e4:	a814      	add	r0, sp, #80	@ 0x50
 80046e6:	f007 fbb9 	bl	800be5c <siscanf>
		   &epoch1,
		   &epoch2// Epoch time
    );

    // Set validity as an integer (1 for "Valid", 0 for others)
    rmc->isValid = (strcmp(validStr, "Valid") == 0) ? 1 : 0;
 80046ea:	490d      	ldr	r1, [pc, #52]	@ (8004720 <parseRMCString+0xb4>)
 80046ec:	4640      	mov	r0, r8
 80046ee:	f7fb fd6f 	bl	80001d0 <strcmp>

    // Store the epoch value
    rmc->date.epoch = ((uint64_t)epoch0 << 32) | ((uint64_t)epoch1 << 16) | (uint64_t)epoch2;
 80046f2:	e9dd 320e 	ldrd	r3, r2, [sp, #56]	@ 0x38
 80046f6:	17d1      	asrs	r1, r2, #31
 80046f8:	0409      	lsls	r1, r1, #16
 80046fa:	ea41 4112 	orr.w	r1, r1, r2, lsr #16
 80046fe:	430b      	orrs	r3, r1
 8004700:	9910      	ldr	r1, [sp, #64]	@ 0x40
    rmc->isValid = (strcmp(validStr, "Valid") == 0) ? 1 : 0;
 8004702:	fab0 f080 	clz	r0, r0
 8004706:	0940      	lsrs	r0, r0, #5
    rmc->date.epoch = ((uint64_t)epoch0 << 32) | ((uint64_t)epoch1 << 16) | (uint64_t)epoch2;
 8004708:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 800470c:	ea43 73e1 	orr.w	r3, r3, r1, asr #31
 8004710:	e9c4 2308 	strd	r2, r3, [r4, #32]
    rmc->isValid = (strcmp(validStr, "Valid") == 0) ? 1 : 0;
 8004714:	6320      	str	r0, [r4, #48]	@ 0x30
}
 8004716:	b054      	add	sp, #336	@ 0x150
 8004718:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800471c:	08013334 	.word	0x08013334
 8004720:	080116a8 	.word	0x080116a8

08004724 <readFlash>:

RMCSTRUCT readFlash(uint32_t addr){
 8004724:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004726:	460d      	mov	r5, r1
 8004728:	b0a9      	sub	sp, #164	@ 0xa4
 800472a:	4604      	mov	r4, r0
//	char addr_out[10];
	Debug_printf("Address received from FLASH: %08lx \n", addr);
 800472c:	483c      	ldr	r0, [pc, #240]	@ (8004820 <readFlash+0xfc>)
 800472e:	f000 fd13 	bl	8005158 <Debug_printf>
	W25_Reset();
 8004732:	f7ff faee 	bl	8003d12 <W25_Reset>
	W25_ReadData(addr, flashBufferRMCReceived, 128);
 8004736:	2280      	movs	r2, #128	@ 0x80
 8004738:	493a      	ldr	r1, [pc, #232]	@ (8004824 <readFlash+0x100>)
 800473a:	4628      	mov	r0, r5
 800473c:	f7ff fc0a 	bl	8003f54 <W25_ReadData>
	char spi_flash_data_intro[] = "Flash DATA at CONTROLLING LED received: ";
 8004740:	4b39      	ldr	r3, [pc, #228]	@ (8004828 <readFlash+0x104>)
 8004742:	aa07      	add	r2, sp, #28
 8004744:	f103 0728 	add.w	r7, r3, #40	@ 0x28
 8004748:	4616      	mov	r6, r2
 800474a:	6818      	ldr	r0, [r3, #0]
 800474c:	6859      	ldr	r1, [r3, #4]
 800474e:	4615      	mov	r5, r2
 8004750:	c503      	stmia	r5!, {r0, r1}
 8004752:	3308      	adds	r3, #8
 8004754:	42bb      	cmp	r3, r7
 8004756:	462a      	mov	r2, r5
 8004758:	d1f7      	bne.n	800474a <readFlash+0x26>
 800475a:	781b      	ldrb	r3, [r3, #0]
 800475c:	702b      	strb	r3, [r5, #0]
	HAL_UART_Transmit(&huart1, (uint8_t*) spi_flash_data_intro, strlen(spi_flash_data_intro), 1000);
 800475e:	4630      	mov	r0, r6
 8004760:	f7fb fd96 	bl	8000290 <strlen>
 8004764:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004768:	b282      	uxth	r2, r0
 800476a:	4631      	mov	r1, r6
 800476c:	482f      	ldr	r0, [pc, #188]	@ (800482c <readFlash+0x108>)
 800476e:	f003 fc4b 	bl	8008008 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, flashBufferRMCReceived, sizeof(flashBufferRMCReceived), 1000);
 8004772:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004776:	2280      	movs	r2, #128	@ 0x80
 8004778:	492a      	ldr	r1, [pc, #168]	@ (8004824 <readFlash+0x100>)
 800477a:	482c      	ldr	r0, [pc, #176]	@ (800482c <readFlash+0x108>)
 800477c:	f003 fc44 	bl	8008008 <HAL_UART_Transmit>

	RMCSTRUCT rmc;
	parseRMCString(flashBufferRMCReceived, &rmc);
 8004780:	4828      	ldr	r0, [pc, #160]	@ (8004824 <readFlash+0x100>)
 8004782:	a912      	add	r1, sp, #72	@ 0x48
 8004784:	f7ff ff72 	bl	800466c <parseRMCString>

	if(IsPageValid(flashBufferRMCReceived) == 0){
 8004788:	4826      	ldr	r0, [pc, #152]	@ (8004824 <readFlash+0x100>)
 800478a:	f7ff fc15 	bl	8003fb8 <IsPageValid>
 800478e:	4b28      	ldr	r3, [pc, #160]	@ (8004830 <readFlash+0x10c>)
 8004790:	2800      	cmp	r0, #0
 8004792:	d140      	bne.n	8004816 <readFlash+0xf2>
		is_read_flash_valid = 0;
 8004794:	6018      	str	r0, [r3, #0]
		Debug_printf("\n\n--------------------- READING FLASH (RMC) ERROR ----------------------------\n\n");
 8004796:	4827      	ldr	r0, [pc, #156]	@ (8004834 <readFlash+0x110>)
	}
	else{
		is_read_flash_valid = 1;
		Debug_printf("\n\n--------------------- READING FLASH (RMC) SUCCESSFULLY ----------------------------\n\n");
 8004798:	f000 fcde 	bl	8005158 <Debug_printf>
	}

	Debug_printf("Date: %02d-%02d-%02d\n", rmc.date.Yr, rmc.date.Mon, rmc.date.Day);
 800479c:	e9dd 3216 	ldrd	r3, r2, [sp, #88]	@ 0x58
 80047a0:	9918      	ldr	r1, [sp, #96]	@ 0x60
 80047a2:	4825      	ldr	r0, [pc, #148]	@ (8004838 <readFlash+0x114>)
 80047a4:	f000 fcd8 	bl	8005158 <Debug_printf>

	Debug_printf("Time: %02d:%02d:%02d\n", rmc.tim.hour, rmc.tim.min, rmc.tim.sec);
 80047a8:	e9dd 2313 	ldrd	r2, r3, [sp, #76]	@ 0x4c
 80047ac:	9912      	ldr	r1, [sp, #72]	@ 0x48
 80047ae:	4823      	ldr	r0, [pc, #140]	@ (800483c <readFlash+0x118>)
 80047b0:	f000 fcd2 	bl	8005158 <Debug_printf>

	Debug_printf("Location: %.6f %c, %.6f %c\n", rmc.lcation.latitude, rmc.lcation.NS,
 80047b4:	f89d 3098 	ldrb.w	r3, [sp, #152]	@ 0x98
 80047b8:	9304      	str	r3, [sp, #16]
 80047ba:	e9dd 2324 	ldrd	r2, r3, [sp, #144]	@ 0x90
 80047be:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80047c2:	f89d 3088 	ldrb.w	r3, [sp, #136]	@ 0x88
 80047c6:	9300      	str	r3, [sp, #0]
 80047c8:	481d      	ldr	r0, [pc, #116]	@ (8004840 <readFlash+0x11c>)
 80047ca:	e9dd 2320 	ldrd	r2, r3, [sp, #128]	@ 0x80
 80047ce:	f000 fcc3 	bl	8005158 <Debug_printf>
		   rmc.lcation.longitude, rmc.lcation.EW);

	Debug_printf("Speed: %.2f\n", rmc.speed);
 80047d2:	981c      	ldr	r0, [sp, #112]	@ 0x70
 80047d4:	f7fb fec8 	bl	8000568 <__aeabi_f2d>
 80047d8:	4602      	mov	r2, r0
 80047da:	460b      	mov	r3, r1
 80047dc:	4819      	ldr	r0, [pc, #100]	@ (8004844 <readFlash+0x120>)
 80047de:	f000 fcbb 	bl	8005158 <Debug_printf>

	Debug_printf("Course: %.2f\n", rmc.course);
 80047e2:	981d      	ldr	r0, [sp, #116]	@ 0x74
 80047e4:	f7fb fec0 	bl	8000568 <__aeabi_f2d>
 80047e8:	4602      	mov	r2, r0
 80047ea:	460b      	mov	r3, r1
 80047ec:	4816      	ldr	r0, [pc, #88]	@ (8004848 <readFlash+0x124>)
 80047ee:	f000 fcb3 	bl	8005158 <Debug_printf>

	Debug_printf("Validity: %s\n", rmc.isValid ? "Valid" : "Invalid");
 80047f2:	4b16      	ldr	r3, [pc, #88]	@ (800484c <readFlash+0x128>)
 80047f4:	991e      	ldr	r1, [sp, #120]	@ 0x78
 80047f6:	4a16      	ldr	r2, [pc, #88]	@ (8004850 <readFlash+0x12c>)
 80047f8:	4816      	ldr	r0, [pc, #88]	@ (8004854 <readFlash+0x130>)
 80047fa:	2900      	cmp	r1, #0
 80047fc:	bf0c      	ite	eq
 80047fe:	4611      	moveq	r1, r2
 8004800:	4619      	movne	r1, r3
 8004802:	f000 fca9 	bl	8005158 <Debug_printf>

	return rmc;
 8004806:	2258      	movs	r2, #88	@ 0x58
 8004808:	a912      	add	r1, sp, #72	@ 0x48
 800480a:	4620      	mov	r0, r4
 800480c:	f008 fa22 	bl	800cc54 <memcpy>
}
 8004810:	4620      	mov	r0, r4
 8004812:	b029      	add	sp, #164	@ 0xa4
 8004814:	bdf0      	pop	{r4, r5, r6, r7, pc}
		is_read_flash_valid = 1;
 8004816:	2201      	movs	r2, #1
		Debug_printf("\n\n--------------------- READING FLASH (RMC) SUCCESSFULLY ----------------------------\n\n");
 8004818:	480f      	ldr	r0, [pc, #60]	@ (8004858 <readFlash+0x134>)
		is_read_flash_valid = 1;
 800481a:	601a      	str	r2, [r3, #0]
		Debug_printf("\n\n--------------------- READING FLASH (RMC) SUCCESSFULLY ----------------------------\n\n");
 800481c:	e7bc      	b.n	8004798 <readFlash+0x74>
 800481e:	bf00      	nop
 8004820:	0801336e 	.word	0x0801336e
 8004824:	20002740 	.word	0x20002740
 8004828:	080134ad 	.word	0x080134ad
 800482c:	20001240 	.word	0x20001240
 8004830:	20000004 	.word	0x20000004
 8004834:	08013393 	.word	0x08013393
 8004838:	0801343c 	.word	0x0801343c
 800483c:	08013452 	.word	0x08013452
 8004840:	08013468 	.word	0x08013468
 8004844:	08013484 	.word	0x08013484
 8004848:	08013491 	.word	0x08013491
 800484c:	080116a8 	.word	0x080116a8
 8004850:	080116ae 	.word	0x080116ae
 8004854:	0801349f 	.word	0x0801349f
 8004858:	080133e4 	.word	0x080133e4

0800485c <receiveRMCDataFromGPS>:


void receiveRMCDataFromGPS(void) {
 800485c:	b5f0      	push	{r4, r5, r6, r7, lr}
	static int countRMCReceived = 0;
//	uint8_t output_buffer[70];

	// Wait until there are at least 10 messages in the queue
//	Debug_printf("Inside Receiving RMC Data SPI FLASH\n");
	osStatus_t status = osMessageQueueGet(RMC_MailQFLASHId, &receivedDataRMCFLASH, NULL, 1000); // Wait for mail
 800485e:	4869      	ldr	r0, [pc, #420]	@ (8004a04 <receiveRMCDataFromGPS+0x1a8>)
 8004860:	4d69      	ldr	r5, [pc, #420]	@ (8004a08 <receiveRMCDataFromGPS+0x1ac>)
 8004862:	6800      	ldr	r0, [r0, #0]
void receiveRMCDataFromGPS(void) {
 8004864:	b097      	sub	sp, #92	@ 0x5c
	osStatus_t status = osMessageQueueGet(RMC_MailQFLASHId, &receivedDataRMCFLASH, NULL, 1000); // Wait for mail
 8004866:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800486a:	2200      	movs	r2, #0
 800486c:	4629      	mov	r1, r5
 800486e:	f003 fea5 	bl	80085bc <osMessageQueueGet>
	if(status == osOK){
 8004872:	4606      	mov	r6, r0
 8004874:	2800      	cmp	r0, #0
 8004876:	f040 80be 	bne.w	80049f6 <receiveRMCDataFromGPS+0x19a>
		uart_transmit_string(&huart1, (uint8_t*)"\nReceived  RMC Data SPI FLASH: \n");
 800487a:	4964      	ldr	r1, [pc, #400]	@ (8004a0c <receiveRMCDataFromGPS+0x1b0>)
 800487c:	4864      	ldr	r0, [pc, #400]	@ (8004a10 <receiveRMCDataFromGPS+0x1b4>)
		//Sending DATA to GSM
		rmc_flash.lcation.latitude = receivedDataRMCFLASH.lcation.latitude;
 800487e:	4c65      	ldr	r4, [pc, #404]	@ (8004a14 <receiveRMCDataFromGPS+0x1b8>)
		uart_transmit_string(&huart1, (uint8_t*)"\nReceived  RMC Data SPI FLASH: \n");
 8004880:	f000 fc5a 	bl	8005138 <uart_transmit_string>
		rmc_flash.lcation.latitude = receivedDataRMCFLASH.lcation.latitude;
 8004884:	e9d5 230e 	ldrd	r2, r3, [r5, #56]	@ 0x38
 8004888:	e9c4 230e 	strd	r2, r3, [r4, #56]	@ 0x38
		rmc_flash.lcation.longitude = receivedDataRMCFLASH.lcation.longitude;
 800488c:	e9d5 2312 	ldrd	r2, r3, [r5, #72]	@ 0x48
 8004890:	e9c4 2312 	strd	r2, r3, [r4, #72]	@ 0x48
		rmc_flash.speed = receivedDataRMCFLASH.speed;
 8004894:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 8004896:	62a3      	str	r3, [r4, #40]	@ 0x28
		rmc_flash.course = receivedDataRMCFLASH.course;
 8004898:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800489a:	62e3      	str	r3, [r4, #44]	@ 0x2c
		rmc_flash.lcation.NS = receivedDataRMCFLASH.lcation.NS;
 800489c:	f895 3040 	ldrb.w	r3, [r5, #64]	@ 0x40
 80048a0:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
		rmc_flash.lcation.EW = receivedDataRMCFLASH.lcation.EW;
 80048a4:	f895 3050 	ldrb.w	r3, [r5, #80]	@ 0x50
 80048a8:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
		rmc_flash.isValid = receivedDataRMCFLASH.isValid;
 80048ac:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80048ae:	6323      	str	r3, [r4, #48]	@ 0x30
		rmc_flash.tim.hour = receivedDataRMCFLASH.tim.hour;
 80048b0:	682b      	ldr	r3, [r5, #0]
 80048b2:	6023      	str	r3, [r4, #0]
		rmc_flash.tim.min = receivedDataRMCFLASH.tim.min;
 80048b4:	686b      	ldr	r3, [r5, #4]
 80048b6:	6063      	str	r3, [r4, #4]
		rmc_flash.tim.sec = receivedDataRMCFLASH.tim.sec;
 80048b8:	68ab      	ldr	r3, [r5, #8]
 80048ba:	60a3      	str	r3, [r4, #8]
		rmc_flash.date.Yr = receivedDataRMCFLASH.date.Yr;
 80048bc:	69ab      	ldr	r3, [r5, #24]
		rmc_flash.date.Mon = receivedDataRMCFLASH.date.Mon;
 80048be:	696a      	ldr	r2, [r5, #20]
 80048c0:	6162      	str	r2, [r4, #20]
		rmc_flash.date.Day = receivedDataRMCFLASH.date.Day;

		if(rmc_flash.date.Yr >= 24){
 80048c2:	2b17      	cmp	r3, #23
		rmc_flash.date.Day = receivedDataRMCFLASH.date.Day;
 80048c4:	692a      	ldr	r2, [r5, #16]
		rmc_flash.date.Yr = receivedDataRMCFLASH.date.Yr;
 80048c6:	61a3      	str	r3, [r4, #24]
		rmc_flash.date.Day = receivedDataRMCFLASH.date.Day;
 80048c8:	6122      	str	r2, [r4, #16]
		if(rmc_flash.date.Yr >= 24){
 80048ca:	dd46      	ble.n	800495a <receiveRMCDataFromGPS+0xfe>
			countRMCReceived++;
 80048cc:	4f52      	ldr	r7, [pc, #328]	@ (8004a18 <receiveRMCDataFromGPS+0x1bc>)
			Debug_printf("\n\n--------------- COUNT RMC RECEIVED AT SPI FLASH is %d\n ---------------------\n", countRMCReceived);
 80048ce:	4853      	ldr	r0, [pc, #332]	@ (8004a1c <receiveRMCDataFromGPS+0x1c0>)
			countRMCReceived++;
 80048d0:	6839      	ldr	r1, [r7, #0]
 80048d2:	3101      	adds	r1, #1
 80048d4:	6039      	str	r1, [r7, #0]
			Debug_printf("\n\n--------------- COUNT RMC RECEIVED AT SPI FLASH is %d\n ---------------------\n", countRMCReceived);
 80048d6:	f000 fc3f 	bl	8005158 <Debug_printf>


			Debug_printf("Time Received from GPS AT SPI FLASH: %d:%d:%d\n", rmc_flash.tim.hour, rmc_flash.tim.min, rmc_flash.tim.sec);
 80048da:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 80048de:	6821      	ldr	r1, [r4, #0]
 80048e0:	484f      	ldr	r0, [pc, #316]	@ (8004a20 <receiveRMCDataFromGPS+0x1c4>)
 80048e2:	f000 fc39 	bl	8005158 <Debug_printf>
//
//		Debug_printf("Location Received FROM GPS AT SPI FLASH: %.6f %c, %.6f %c\n", rmc_flash.lcation.latitude, rmc_flash.lcation.NS, rmc_flash.lcation.longitude, rmc_flash.lcation.EW);
//
//		Debug_printf("Speed FROM GPS AT SPI FLASH: %.2f, Course: %.2f, Valid: %d\n\n\n", rmc_flash.speed, rmc_flash.course, rmc_flash.isValid);

			format_rmc_data(&rmc_flash,(char*) rmcBufferDemo, 128);
 80048e6:	494f      	ldr	r1, [pc, #316]	@ (8004a24 <receiveRMCDataFromGPS+0x1c8>)
 80048e8:	2280      	movs	r2, #128	@ 0x80
 80048ea:	4620      	mov	r0, r4
 80048ec:	f7ff fd02 	bl	80042f4 <format_rmc_data>

			if(countRMCReceived == 29){
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	2b1d      	cmp	r3, #29
 80048f4:	d133      	bne.n	800495e <receiveRMCDataFromGPS+0x102>

				saveRMC();
 80048f6:	f7ff fd53 	bl	80043a0 <saveRMC>
				Debug_printf("---------------------Sending the current data----------------");
 80048fa:	484b      	ldr	r0, [pc, #300]	@ (8004a28 <receiveRMCDataFromGPS+0x1cc>)
				mail_gsm.rmc.lcation.latitude = rmc_flash.lcation.latitude;
 80048fc:	4d4b      	ldr	r5, [pc, #300]	@ (8004a2c <receiveRMCDataFromGPS+0x1d0>)
				Debug_printf("---------------------Sending the current data----------------");
 80048fe:	f000 fc2b 	bl	8005158 <Debug_printf>
				mail_gsm.rmc.lcation.latitude = rmc_flash.lcation.latitude;
 8004902:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	@ 0x38
 8004906:	e9c5 230e 	strd	r2, r3, [r5, #56]	@ 0x38
				mail_gsm.rmc.lcation.longitude = rmc_flash.lcation.longitude;
 800490a:	e9d4 2312 	ldrd	r2, r3, [r4, #72]	@ 0x48
 800490e:	e9c5 2312 	strd	r2, r3, [r5, #72]	@ 0x48
				mail_gsm.rmc.speed = rmc_flash.speed;
 8004912:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8004914:	62ab      	str	r3, [r5, #40]	@ 0x28
				mail_gsm.rmc.course = rmc_flash.course;
 8004916:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8004918:	62eb      	str	r3, [r5, #44]	@ 0x2c
				mail_gsm.rmc.lcation.NS = rmc_flash.lcation.NS;
 800491a:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 800491e:	f885 3040 	strb.w	r3, [r5, #64]	@ 0x40
				mail_gsm.rmc.lcation.EW = rmc_flash.lcation.EW;
 8004922:	f894 3050 	ldrb.w	r3, [r4, #80]	@ 0x50
 8004926:	f885 3050 	strb.w	r3, [r5, #80]	@ 0x50
				mail_gsm.rmc.isValid = rmc_flash.isValid;
 800492a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800492c:	632b      	str	r3, [r5, #48]	@ 0x30
				mail_gsm.rmc.tim.hour = rmc_flash.tim.hour;
 800492e:	6823      	ldr	r3, [r4, #0]
 8004930:	602b      	str	r3, [r5, #0]
				mail_gsm.rmc.tim.min = rmc_flash.tim.min;
 8004932:	6863      	ldr	r3, [r4, #4]
 8004934:	606b      	str	r3, [r5, #4]
				mail_gsm.rmc.tim.sec = rmc_flash.tim.sec;
 8004936:	68a3      	ldr	r3, [r4, #8]
 8004938:	60ab      	str	r3, [r5, #8]
				mail_gsm.rmc.date.Yr = rmc_flash.date.Yr;
 800493a:	69a3      	ldr	r3, [r4, #24]
 800493c:	61ab      	str	r3, [r5, #24]
				mail_gsm.rmc.date.Mon = rmc_flash.date.Mon;
 800493e:	6963      	ldr	r3, [r4, #20]
 8004940:	616b      	str	r3, [r5, #20]
				mail_gsm.rmc.date.Day = rmc_flash.date.Day;
 8004942:	6923      	ldr	r3, [r4, #16]
 8004944:	612b      	str	r3, [r5, #16]
				mail_gsm.address = current_addr;
 8004946:	4b3a      	ldr	r3, [pc, #232]	@ (8004a30 <receiveRMCDataFromGPS+0x1d4>)
				Debug_printf("-------------------SENDING CURRENT ADDR DATA: %08lx----------------------", mail_gsm.address);
 8004948:	483a      	ldr	r0, [pc, #232]	@ (8004a34 <receiveRMCDataFromGPS+0x1d8>)
				mail_gsm.address = current_addr;
 800494a:	6819      	ldr	r1, [r3, #0]
 800494c:	65a9      	str	r1, [r5, #88]	@ 0x58
				Debug_printf("-------------------SENDING CURRENT ADDR DATA: %08lx----------------------", mail_gsm.address);
 800494e:	f000 fc03 	bl	8005158 <Debug_printf>
				sendRMCDataWithAddrToGSM(&mail_gsm);
 8004952:	4628      	mov	r0, r5
 8004954:	f7ff fe6c 	bl	8004630 <sendRMCDataWithAddrToGSM>
				countRMCReceived = 0;
 8004958:	603e      	str	r6, [r7, #0]
		// Free memory after use
	}
	else{
		Debug_printf("\n\n-------------------------- RECEIVED MAIL FROM GPS FAILED: %d ------------------------\n\n",status);
	}
}
 800495a:	b017      	add	sp, #92	@ 0x5c
 800495c:	bdf0      	pop	{r4, r5, r6, r7, pc}
				Debug_printf("\n\n ---------------------------- There is no mail in SPI FLASH FROM GPS ------------------\n\n");
 800495e:	4836      	ldr	r0, [pc, #216]	@ (8004a38 <receiveRMCDataFromGPS+0x1dc>)
 8004960:	f000 fbfa 	bl	8005158 <Debug_printf>
				if(is_using_flash == 1 && is_disconnect == 0 && is_keep_up == 1 && start_addr_disconnect <= current_addr){
 8004964:	4b35      	ldr	r3, [pc, #212]	@ (8004a3c <receiveRMCDataFromGPS+0x1e0>)
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	2b01      	cmp	r3, #1
 800496a:	d1f6      	bne.n	800495a <receiveRMCDataFromGPS+0xfe>
 800496c:	4b34      	ldr	r3, [pc, #208]	@ (8004a40 <receiveRMCDataFromGPS+0x1e4>)
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	2b00      	cmp	r3, #0
 8004972:	d1f2      	bne.n	800495a <receiveRMCDataFromGPS+0xfe>
 8004974:	4b33      	ldr	r3, [pc, #204]	@ (8004a44 <receiveRMCDataFromGPS+0x1e8>)
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	2b01      	cmp	r3, #1
 800497a:	d1ee      	bne.n	800495a <receiveRMCDataFromGPS+0xfe>
 800497c:	4c32      	ldr	r4, [pc, #200]	@ (8004a48 <receiveRMCDataFromGPS+0x1ec>)
 800497e:	4b2c      	ldr	r3, [pc, #176]	@ (8004a30 <receiveRMCDataFromGPS+0x1d4>)
 8004980:	6822      	ldr	r2, [r4, #0]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	429a      	cmp	r2, r3
 8004986:	d8e8      	bhi.n	800495a <receiveRMCDataFromGPS+0xfe>
					if(checkAddrExistInQueue(start_addr_disconnect, &result_addr_queue) && (start_addr_disconnect <= (FLASH_END_ADDRESS - 0x100))){
 8004988:	6820      	ldr	r0, [r4, #0]
 800498a:	4930      	ldr	r1, [pc, #192]	@ (8004a4c <receiveRMCDataFromGPS+0x1f0>)
 800498c:	f7fe fdb2 	bl	80034f4 <checkAddrExistInQueue>
 8004990:	b158      	cbz	r0, 80049aa <receiveRMCDataFromGPS+0x14e>
 8004992:	6823      	ldr	r3, [r4, #0]
 8004994:	f5b3 4f9e 	cmp.w	r3, #20224	@ 0x4f00
 8004998:	d807      	bhi.n	80049aa <receiveRMCDataFromGPS+0x14e>
						Debug_printf("\n-------SKIPPING address cause it was sent already: %08lx--------\n", start_addr_disconnect);
 800499a:	6821      	ldr	r1, [r4, #0]
 800499c:	482c      	ldr	r0, [pc, #176]	@ (8004a50 <receiveRMCDataFromGPS+0x1f4>)
 800499e:	f000 fbdb 	bl	8005158 <Debug_printf>
						start_addr_disconnect +=128;
 80049a2:	6823      	ldr	r3, [r4, #0]
 80049a4:	3380      	adds	r3, #128	@ 0x80
 80049a6:	6023      	str	r3, [r4, #0]
 80049a8:	e7d7      	b.n	800495a <receiveRMCDataFromGPS+0xfe>
						addr_to_get_from_FLASH = start_addr_disconnect - (count_shiftleft * 128);
 80049aa:	4a2a      	ldr	r2, [pc, #168]	@ (8004a54 <receiveRMCDataFromGPS+0x1f8>)
 80049ac:	6823      	ldr	r3, [r4, #0]
 80049ae:	7812      	ldrb	r2, [r2, #0]
 80049b0:	4e29      	ldr	r6, [pc, #164]	@ (8004a58 <receiveRMCDataFromGPS+0x1fc>)
						Debug_printf("\n---------------- Sending data in disconnected phase to GSM: %08lx -------------------\n", start_addr_disconnect);
 80049b2:	6821      	ldr	r1, [r4, #0]
 80049b4:	4829      	ldr	r0, [pc, #164]	@ (8004a5c <receiveRMCDataFromGPS+0x200>)
						mail_gsm.rmc = readFlash(addr_to_get_from_FLASH);
 80049b6:	4d1d      	ldr	r5, [pc, #116]	@ (8004a2c <receiveRMCDataFromGPS+0x1d0>)
						addr_to_get_from_FLASH = start_addr_disconnect - (count_shiftleft * 128);
 80049b8:	eba3 13c2 	sub.w	r3, r3, r2, lsl #7
						if(addr_to_get_from_FLASH < FLASH_START_ADDRESS) addr_to_get_from_FLASH = FLASH_START_ADDRESS;
 80049bc:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80049c0:	bf38      	it	cc
 80049c2:	f44f 5340 	movcc.w	r3, #12288	@ 0x3000
						addr_to_get_from_FLASH = start_addr_disconnect - (count_shiftleft * 128);
 80049c6:	6033      	str	r3, [r6, #0]
						Debug_printf("\n---------------- Sending data in disconnected phase to GSM: %08lx -------------------\n", start_addr_disconnect);
 80049c8:	f000 fbc6 	bl	8005158 <Debug_printf>
						mail_gsm.rmc = readFlash(addr_to_get_from_FLASH);
 80049cc:	6831      	ldr	r1, [r6, #0]
 80049ce:	4668      	mov	r0, sp
 80049d0:	f7ff fea8 	bl	8004724 <readFlash>
 80049d4:	2258      	movs	r2, #88	@ 0x58
 80049d6:	4669      	mov	r1, sp
 80049d8:	4628      	mov	r0, r5
 80049da:	f008 f93b 	bl	800cc54 <memcpy>
						mail_gsm.address = start_addr_disconnect;
 80049de:	6823      	ldr	r3, [r4, #0]
 80049e0:	65ab      	str	r3, [r5, #88]	@ 0x58
						if(is_read_flash_valid == 1)
 80049e2:	4b1f      	ldr	r3, [pc, #124]	@ (8004a60 <receiveRMCDataFromGPS+0x204>)
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	2b01      	cmp	r3, #1
 80049e8:	d1b7      	bne.n	800495a <receiveRMCDataFromGPS+0xfe>
							sendRMCDataWithAddrToGSM(&mail_gsm);
 80049ea:	4628      	mov	r0, r5
}
 80049ec:	b017      	add	sp, #92	@ 0x5c
 80049ee:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
							sendRMCDataWithAddrToGSM(&mail_gsm);
 80049f2:	f7ff be1d 	b.w	8004630 <sendRMCDataWithAddrToGSM>
		Debug_printf("\n\n-------------------------- RECEIVED MAIL FROM GPS FAILED: %d ------------------------\n\n",status);
 80049f6:	4601      	mov	r1, r0
 80049f8:	481a      	ldr	r0, [pc, #104]	@ (8004a64 <receiveRMCDataFromGPS+0x208>)
}
 80049fa:	b017      	add	sp, #92	@ 0x5c
 80049fc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		Debug_printf("\n\n-------------------------- RECEIVED MAIL FROM GPS FAILED: %d ------------------------\n\n",status);
 8004a00:	f000 bbaa 	b.w	8005158 <Debug_printf>
 8004a04:	200027c8 	.word	0x200027c8
 8004a08:	20001530 	.word	0x20001530
 8004a0c:	080134d6 	.word	0x080134d6
 8004a10:	20001240 	.word	0x20001240
 8004a14:	200015e8 	.word	0x200015e8
 8004a18:	20001528 	.word	0x20001528
 8004a1c:	080134f7 	.word	0x080134f7
 8004a20:	08013547 	.word	0x08013547
 8004a24:	200026c0 	.word	0x200026c0
 8004a28:	08013576 	.word	0x08013576
 8004a2c:	20001588 	.word	0x20001588
 8004a30:	20000008 	.word	0x20000008
 8004a34:	080135b4 	.word	0x080135b4
 8004a38:	080135fe 	.word	0x080135fe
 8004a3c:	20000e44 	.word	0x20000e44
 8004a40:	20000e48 	.word	0x20000e48
 8004a44:	20000e40 	.word	0x20000e40
 8004a48:	20000e30 	.word	0x20000e30
 8004a4c:	20000e4c 	.word	0x20000e4c
 8004a50:	0801365a 	.word	0x0801365a
 8004a54:	20000e3c 	.word	0x20000e3c
 8004a58:	200027cc 	.word	0x200027cc
 8004a5c:	0801369d 	.word	0x0801369d
 8004a60:	20000004 	.word	0x20000004
 8004a64:	080136f5 	.word	0x080136f5

08004a68 <StartSpiFlash>:


void StartSpiFlash(void const * argument)
{
 8004a68:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  /* USER CODE BEGIN StartSpiFlash */
  /* Infinite loop */
	Debug_printf("\n\n\n------------------------------- STARTING SPI FLASH ------------------------------\n\n\n");
 8004a6c:	483d      	ldr	r0, [pc, #244]	@ (8004b64 <StartSpiFlash+0xfc>)
	current_addr = address_rmc;
 8004a6e:	4e3e      	ldr	r6, [pc, #248]	@ (8004b68 <StartSpiFlash+0x100>)
{
 8004a70:	b087      	sub	sp, #28
	Debug_printf("\n\n\n------------------------------- STARTING SPI FLASH ------------------------------\n\n\n");
 8004a72:	f000 fb71 	bl	8005158 <Debug_printf>
	current_addr = address_rmc;
 8004a76:	4b3d      	ldr	r3, [pc, #244]	@ (8004b6c <StartSpiFlash+0x104>)


	RMC_MailQFLASHId = osMessageQueueNew(11, sizeof(RMCSTRUCT), NULL);
 8004a78:	2200      	movs	r2, #0
	current_addr = address_rmc;
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	6033      	str	r3, [r6, #0]
	RMC_MailQFLASHId = osMessageQueueNew(11, sizeof(RMCSTRUCT), NULL);
 8004a7e:	2158      	movs	r1, #88	@ 0x58
 8004a80:	200b      	movs	r0, #11
 8004a82:	f003 fd0f 	bl	80084a4 <osMessageQueueNew>
 8004a86:	4b3a      	ldr	r3, [pc, #232]	@ (8004b70 <StartSpiFlash+0x108>)
 8004a88:	6018      	str	r0, [r3, #0]
	if (RMC_MailQFLASHId == NULL) {
 8004a8a:	2800      	cmp	r0, #0
 8004a8c:	d165      	bne.n	8004b5a <StartSpiFlash+0xf2>
		Debug_printf("\n\n --------------------Failed to create message queue ----------------\n\n");
 8004a8e:	4839      	ldr	r0, [pc, #228]	@ (8004b74 <StartSpiFlash+0x10c>)
 8004a90:	f000 fb62 	bl	8005158 <Debug_printf>
	}
	else{
		Debug_printf("\n\n --------------------Create MESSAGE QUEUE FROM GPS TO FLASH SUCCESSFULLY: %d ----------------\n\n", sizeof(RMC_MailQFLASHId));
	}

	RMC_MailQGSMId = osMessageQueueNew(64, sizeof(GSM_MAIL_STRUCT), NULL);
 8004a94:	2200      	movs	r2, #0
 8004a96:	2160      	movs	r1, #96	@ 0x60
 8004a98:	2040      	movs	r0, #64	@ 0x40
 8004a9a:	f003 fd03 	bl	80084a4 <osMessageQueueNew>
 8004a9e:	4b36      	ldr	r3, [pc, #216]	@ (8004b78 <StartSpiFlash+0x110>)
 8004aa0:	6018      	str	r0, [r3, #0]
	myMutex = osMutexNew(NULL);  // NULL means default attributes
 8004aa2:	2000      	movs	r0, #0
 8004aa4:	f003 fcba 	bl	800841c <osMutexNew>
 8004aa8:	4b34      	ldr	r3, [pc, #208]	@ (8004b7c <StartSpiFlash+0x114>)
 8004aaa:	6018      	str	r0, [r3, #0]
	if (myMutex == NULL) {
 8004aac:	b910      	cbnz	r0, 8004ab4 <StartSpiFlash+0x4c>
		Debug_printf("\n\n ----------------- Failed to create mutex -----------------\n\n");
 8004aae:	4834      	ldr	r0, [pc, #208]	@ (8004b80 <StartSpiFlash+0x118>)
 8004ab0:	f000 fb52 	bl	8005158 <Debug_printf>
	}
	Debug_printf("\n\n --------------------Creating a MESSAGE QUEUE --------------------- \n\n");
 8004ab4:	4833      	ldr	r0, [pc, #204]	@ (8004b84 <StartSpiFlash+0x11c>)

	for(;;){
//		if(osMutexAcquire(myMutex, osWaitForever) == osOK) {

		uint32_t freeStack2 = osThreadGetStackSpace(SpiFlashHandle);
 8004ab6:	f8df 90f0 	ldr.w	r9, [pc, #240]	@ 8004ba8 <StartSpiFlash+0x140>

		Debug_printf("\n\n --------------Thread SPI FLASH %p is running low on stack: %04d bytes remaining----------\n\n", SpiFlashHandle, freeStack2);
		osDelay(125);
		uart_transmit_string(&huart1, (uint8_t*) "\n\n--------------------- INSIDE SPI FLASH ------------------------\n\n");
 8004aba:	4c33      	ldr	r4, [pc, #204]	@ (8004b88 <StartSpiFlash+0x120>)
		W25_Reset();
		W25_ReadJedecID();
		W25_Reset();
		W25_ReadData(current_addr, flashBufferRMCReceived, 128);
 8004abc:	4f33      	ldr	r7, [pc, #204]	@ (8004b8c <StartSpiFlash+0x124>)
	Debug_printf("\n\n --------------------Creating a MESSAGE QUEUE --------------------- \n\n");
 8004abe:	f000 fb4b 	bl	8005158 <Debug_printf>
		uint32_t freeStack2 = osThreadGetStackSpace(SpiFlashHandle);
 8004ac2:	f8d9 0000 	ldr.w	r0, [r9]
 8004ac6:	f003 fc7b 	bl	80083c0 <osThreadGetStackSpace>
		Debug_printf("\n\n --------------Thread SPI FLASH %p is running low on stack: %04d bytes remaining----------\n\n", SpiFlashHandle, freeStack2);
 8004aca:	f8d9 1000 	ldr.w	r1, [r9]
		uint32_t freeStack2 = osThreadGetStackSpace(SpiFlashHandle);
 8004ace:	4602      	mov	r2, r0
		Debug_printf("\n\n --------------Thread SPI FLASH %p is running low on stack: %04d bytes remaining----------\n\n", SpiFlashHandle, freeStack2);
 8004ad0:	482f      	ldr	r0, [pc, #188]	@ (8004b90 <StartSpiFlash+0x128>)
 8004ad2:	f000 fb41 	bl	8005158 <Debug_printf>
		osDelay(125);
 8004ad6:	207d      	movs	r0, #125	@ 0x7d
 8004ad8:	f003 fc86 	bl	80083e8 <osDelay>
		uart_transmit_string(&huart1, (uint8_t*) "\n\n--------------------- INSIDE SPI FLASH ------------------------\n\n");
 8004adc:	492d      	ldr	r1, [pc, #180]	@ (8004b94 <StartSpiFlash+0x12c>)
 8004ade:	4620      	mov	r0, r4
 8004ae0:	f000 fb2a 	bl	8005138 <uart_transmit_string>
		W25_Reset();
 8004ae4:	f7ff f915 	bl	8003d12 <W25_Reset>
		W25_ReadJedecID();
 8004ae8:	f7ff f940 	bl	8003d6c <W25_ReadJedecID>
		W25_Reset();
 8004aec:	f7ff f911 	bl	8003d12 <W25_Reset>
		W25_ReadData(current_addr, flashBufferRMCReceived, 128);
 8004af0:	2280      	movs	r2, #128	@ 0x80
 8004af2:	6830      	ldr	r0, [r6, #0]
 8004af4:	4639      	mov	r1, r7
 8004af6:	f7ff fa2d 	bl	8003f54 <W25_ReadData>
		char spi_flash_data_intro[] = "Flash DATA received: ";
 8004afa:	4b27      	ldr	r3, [pc, #156]	@ (8004b98 <StartSpiFlash+0x130>)
 8004afc:	466a      	mov	r2, sp
 8004afe:	f103 0c10 	add.w	ip, r3, #16
 8004b02:	4690      	mov	r8, r2
 8004b04:	6818      	ldr	r0, [r3, #0]
 8004b06:	6859      	ldr	r1, [r3, #4]
 8004b08:	4615      	mov	r5, r2
 8004b0a:	c503      	stmia	r5!, {r0, r1}
 8004b0c:	3308      	adds	r3, #8
 8004b0e:	4563      	cmp	r3, ip
 8004b10:	462a      	mov	r2, r5
 8004b12:	d1f7      	bne.n	8004b04 <StartSpiFlash+0x9c>
 8004b14:	6818      	ldr	r0, [r3, #0]
 8004b16:	889b      	ldrh	r3, [r3, #4]
 8004b18:	6028      	str	r0, [r5, #0]
 8004b1a:	80ab      	strh	r3, [r5, #4]
		HAL_UART_Transmit(&huart1, (uint8_t*) spi_flash_data_intro, strlen(spi_flash_data_intro), 1000);
 8004b1c:	4640      	mov	r0, r8
 8004b1e:	f7fb fbb7 	bl	8000290 <strlen>
 8004b22:	4641      	mov	r1, r8
 8004b24:	b282      	uxth	r2, r0
 8004b26:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004b2a:	4620      	mov	r0, r4
 8004b2c:	f003 fa6c 	bl	8008008 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart1, flashBufferRMCReceived, sizeof(flashBufferRMCReceived), 1000);
 8004b30:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004b34:	2280      	movs	r2, #128	@ 0x80
 8004b36:	4639      	mov	r1, r7
 8004b38:	4620      	mov	r0, r4
 8004b3a:	f003 fa65 	bl	8008008 <HAL_UART_Transmit>
		Debug_printf("\n------------- Current address FLASH: %08lx -------------\n", current_addr);
 8004b3e:	6831      	ldr	r1, [r6, #0]
 8004b40:	4816      	ldr	r0, [pc, #88]	@ (8004b9c <StartSpiFlash+0x134>)
 8004b42:	f000 fb09 	bl	8005158 <Debug_printf>
		//receiveTaxData();
		receiveRMCDataFromGPS();
 8004b46:	f7ff fe89 	bl	800485c <receiveRMCDataFromGPS>
		uart_transmit_string(&huart1,(uint8_t*) "\n\n");
 8004b4a:	4620      	mov	r0, r4
 8004b4c:	4914      	ldr	r1, [pc, #80]	@ (8004ba0 <StartSpiFlash+0x138>)
 8004b4e:	f000 faf3 	bl	8005138 <uart_transmit_string>
		osDelay(125);
 8004b52:	207d      	movs	r0, #125	@ 0x7d
 8004b54:	f003 fc48 	bl	80083e8 <osDelay>
	for(;;){
 8004b58:	e7b3      	b.n	8004ac2 <StartSpiFlash+0x5a>
		Debug_printf("\n\n --------------------Create MESSAGE QUEUE FROM GPS TO FLASH SUCCESSFULLY: %d ----------------\n\n", sizeof(RMC_MailQFLASHId));
 8004b5a:	4812      	ldr	r0, [pc, #72]	@ (8004ba4 <StartSpiFlash+0x13c>)
 8004b5c:	2104      	movs	r1, #4
 8004b5e:	f000 fafb 	bl	8005158 <Debug_printf>
 8004b62:	e797      	b.n	8004a94 <StartSpiFlash+0x2c>
 8004b64:	0801374f 	.word	0x0801374f
 8004b68:	20000008 	.word	0x20000008
 8004b6c:	2000000c 	.word	0x2000000c
 8004b70:	200027c8 	.word	0x200027c8
 8004b74:	080137a7 	.word	0x080137a7
 8004b78:	200027c4 	.word	0x200027c4
 8004b7c:	20001524 	.word	0x20001524
 8004b80:	08013852 	.word	0x08013852
 8004b84:	08013892 	.word	0x08013892
 8004b88:	20001240 	.word	0x20001240
 8004b8c:	20002740 	.word	0x20002740
 8004b90:	080138db 	.word	0x080138db
 8004b94:	0801393a 	.word	0x0801393a
 8004b98:	080139b9 	.word	0x080139b9
 8004b9c:	0801397e 	.word	0x0801397e
 8004ba0:	08012969 	.word	0x08012969
 8004ba4:	080137f0 	.word	0x080137f0
 8004ba8:	20001060 	.word	0x20001060

08004bac <HAL_MspInit>:

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004bac:	4b0d      	ldr	r3, [pc, #52]	@ (8004be4 <HAL_MspInit+0x38>)
 8004bae:	699a      	ldr	r2, [r3, #24]
 8004bb0:	f042 0201 	orr.w	r2, r2, #1
 8004bb4:	619a      	str	r2, [r3, #24]
 8004bb6:	699a      	ldr	r2, [r3, #24]
{
 8004bb8:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004bba:	f002 0201 	and.w	r2, r2, #1
 8004bbe:	9200      	str	r2, [sp, #0]
 8004bc0:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004bc2:	69da      	ldr	r2, [r3, #28]
 8004bc4:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8004bc8:	61da      	str	r2, [r3, #28]
 8004bca:	69db      	ldr	r3, [r3, #28]
 8004bcc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004bd0:	9301      	str	r3, [sp, #4]
 8004bd2:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	210f      	movs	r1, #15
 8004bd8:	f06f 0001 	mvn.w	r0, #1

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004bdc:	b002      	add	sp, #8
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8004bde:	f001 b8d3 	b.w	8005d88 <HAL_NVIC_SetPriority>
 8004be2:	bf00      	nop
 8004be4:	40021000 	.word	0x40021000

08004be8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004be8:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004bea:	2214      	movs	r2, #20
{
 8004bec:	b08a      	sub	sp, #40	@ 0x28
 8004bee:	4605      	mov	r5, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004bf0:	2100      	movs	r1, #0
 8004bf2:	eb0d 0002 	add.w	r0, sp, r2
 8004bf6:	f007 f9d9 	bl	800bfac <memset>
  if(hadc->Instance==ADC2)
 8004bfa:	682b      	ldr	r3, [r5, #0]
 8004bfc:	4a3d      	ldr	r2, [pc, #244]	@ (8004cf4 <HAL_ADC_MspInit+0x10c>)
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d137      	bne.n	8004c72 <HAL_ADC_MspInit+0x8a>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8004c02:	4b3d      	ldr	r3, [pc, #244]	@ (8004cf8 <HAL_ADC_MspInit+0x110>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA2_Channel1;
 8004c04:	4c3d      	ldr	r4, [pc, #244]	@ (8004cfc <HAL_ADC_MspInit+0x114>)
    __HAL_RCC_ADC12_CLK_ENABLE();
 8004c06:	695a      	ldr	r2, [r3, #20]
 8004c08:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8004c0c:	615a      	str	r2, [r3, #20]
 8004c0e:	695a      	ldr	r2, [r3, #20]
 8004c10:	f002 5280 	and.w	r2, r2, #268435456	@ 0x10000000
 8004c14:	9201      	str	r2, [sp, #4]
 8004c16:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004c18:	695a      	ldr	r2, [r3, #20]
 8004c1a:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8004c1e:	615a      	str	r2, [r3, #20]
 8004c20:	695b      	ldr	r3, [r3, #20]
 8004c22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c26:	9302      	str	r3, [sp, #8]
 8004c28:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004c2a:	2620      	movs	r6, #32
 8004c2c:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004c2e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004c32:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004c34:	e9cd 6305 	strd	r6, r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004c38:	f001 f9ca 	bl	8005fd0 <HAL_GPIO_Init>
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004c3c:	f44f 7280 	mov.w	r2, #256	@ 0x100
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004c40:	f8df c0cc 	ldr.w	ip, [pc, #204]	@ 8004d10 <HAL_ADC_MspInit+0x128>
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004c44:	f04f 0e80 	mov.w	lr, #128	@ 0x80
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004c48:	2300      	movs	r3, #0
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004c4a:	e9c4 e203 	strd	lr, r2, [r4, #12]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8004c4e:	4620      	mov	r0, r4
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004c50:	f44f 6280 	mov.w	r2, #1024	@ 0x400
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004c54:	e9c4 c300 	strd	ip, r3, [r4]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8004c58:	e9c4 2605 	strd	r2, r6, [r4, #20]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8004c5c:	60a3      	str	r3, [r4, #8]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8004c5e:	61e3      	str	r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8004c60:	f001 f8f2 	bl	8005e48 <HAL_DMA_Init>
 8004c64:	b108      	cbz	r0, 8004c6a <HAL_ADC_MspInit+0x82>
    {
      Error_Handler();
 8004c66:	f7ff f80c 	bl	8003c82 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8004c6a:	63ac      	str	r4, [r5, #56]	@ 0x38
 8004c6c:	6265      	str	r5, [r4, #36]	@ 0x24
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8004c6e:	b00a      	add	sp, #40	@ 0x28
 8004c70:	bd70      	pop	{r4, r5, r6, pc}
  else if(hadc->Instance==ADC3)
 8004c72:	4a23      	ldr	r2, [pc, #140]	@ (8004d00 <HAL_ADC_MspInit+0x118>)
 8004c74:	4293      	cmp	r3, r2
 8004c76:	d1fa      	bne.n	8004c6e <HAL_ADC_MspInit+0x86>
    __HAL_RCC_ADC34_CLK_ENABLE();
 8004c78:	4b1f      	ldr	r3, [pc, #124]	@ (8004cf8 <HAL_ADC_MspInit+0x110>)
    hdma_adc3.Instance = DMA2_Channel5;
 8004c7a:	4c22      	ldr	r4, [pc, #136]	@ (8004d04 <HAL_ADC_MspInit+0x11c>)
    __HAL_RCC_ADC34_CLK_ENABLE();
 8004c7c:	695a      	ldr	r2, [r3, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004c7e:	4822      	ldr	r0, [pc, #136]	@ (8004d08 <HAL_ADC_MspInit+0x120>)
    __HAL_RCC_ADC34_CLK_ENABLE();
 8004c80:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 8004c84:	615a      	str	r2, [r3, #20]
 8004c86:	695a      	ldr	r2, [r3, #20]
 8004c88:	f002 5200 	and.w	r2, r2, #536870912	@ 0x20000000
 8004c8c:	9203      	str	r2, [sp, #12]
 8004c8e:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004c90:	695a      	ldr	r2, [r3, #20]
 8004c92:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8004c96:	615a      	str	r2, [r3, #20]
 8004c98:	695b      	ldr	r3, [r3, #20]
 8004c9a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004c9e:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004ca0:	2201      	movs	r2, #1
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004ca2:	9b04      	ldr	r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004ca4:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004ca6:	2303      	movs	r3, #3
 8004ca8:	e9cd 2305 	strd	r2, r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004cac:	f001 f990 	bl	8005fd0 <HAL_GPIO_Init>
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004cb0:	2080      	movs	r0, #128	@ 0x80
 8004cb2:	f44f 7280 	mov.w	r2, #256	@ 0x100
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004cb6:	4915      	ldr	r1, [pc, #84]	@ (8004d0c <HAL_ADC_MspInit+0x124>)
 8004cb8:	2300      	movs	r3, #0
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004cba:	e9c4 0203 	strd	r0, r2, [r4, #12]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8004cbe:	f44f 6680 	mov.w	r6, #1024	@ 0x400
 8004cc2:	2220      	movs	r2, #32
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8004cc4:	4620      	mov	r0, r4
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004cc6:	e9c4 1300 	strd	r1, r3, [r4]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8004cca:	e9c4 6205 	strd	r6, r2, [r4, #20]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8004cce:	60a3      	str	r3, [r4, #8]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8004cd0:	61e3      	str	r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8004cd2:	f001 f8b9 	bl	8005e48 <HAL_DMA_Init>
 8004cd6:	b108      	cbz	r0, 8004cdc <HAL_ADC_MspInit+0xf4>
      Error_Handler();
 8004cd8:	f7fe ffd3 	bl	8003c82 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8004cdc:	63ac      	str	r4, [r5, #56]	@ 0x38
    HAL_NVIC_SetPriority(ADC3_IRQn, 5, 0);
 8004cde:	2200      	movs	r2, #0
 8004ce0:	2105      	movs	r1, #5
 8004ce2:	202f      	movs	r0, #47	@ 0x2f
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8004ce4:	6265      	str	r5, [r4, #36]	@ 0x24
    HAL_NVIC_SetPriority(ADC3_IRQn, 5, 0);
 8004ce6:	f001 f84f 	bl	8005d88 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC3_IRQn);
 8004cea:	202f      	movs	r0, #47	@ 0x2f
 8004cec:	f001 f87e 	bl	8005dec <HAL_NVIC_EnableIRQ>
}
 8004cf0:	e7bd      	b.n	8004c6e <HAL_ADC_MspInit+0x86>
 8004cf2:	bf00      	nop
 8004cf4:	50000100 	.word	0x50000100
 8004cf8:	40021000 	.word	0x40021000
 8004cfc:	20001440 	.word	0x20001440
 8004d00:	50000400 	.word	0x50000400
 8004d04:	200013fc 	.word	0x200013fc
 8004d08:	48000400 	.word	0x48000400
 8004d0c:	40020458 	.word	0x40020458
 8004d10:	40020408 	.word	0x40020408

08004d14 <HAL_RTC_MspInit>:
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
  if(hrtc->Instance==RTC)
 8004d14:	6802      	ldr	r2, [r0, #0]
 8004d16:	4b07      	ldr	r3, [pc, #28]	@ (8004d34 <HAL_RTC_MspInit+0x20>)
 8004d18:	429a      	cmp	r2, r3
 8004d1a:	d10a      	bne.n	8004d32 <HAL_RTC_MspInit+0x1e>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d1c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8004d20:	fa92 f2a2 	rbit	r2, r2
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8004d24:	4b04      	ldr	r3, [pc, #16]	@ (8004d38 <HAL_RTC_MspInit+0x24>)
 8004d26:	fab2 f282 	clz	r2, r2
 8004d2a:	4413      	add	r3, r2
 8004d2c:	009b      	lsls	r3, r3, #2
 8004d2e:	2201      	movs	r2, #1
 8004d30:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTC_MspInit 1 */

  }

}
 8004d32:	4770      	bx	lr
 8004d34:	40002800 	.word	0x40002800
 8004d38:	10908100 	.word	0x10908100

08004d3c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004d3c:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004d3e:	2214      	movs	r2, #20
{
 8004d40:	b08a      	sub	sp, #40	@ 0x28
 8004d42:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004d44:	2100      	movs	r1, #0
 8004d46:	eb0d 0002 	add.w	r0, sp, r2
 8004d4a:	f007 f92f 	bl	800bfac <memset>
  if(hspi->Instance==SPI1)
 8004d4e:	6823      	ldr	r3, [r4, #0]
 8004d50:	4a1e      	ldr	r2, [pc, #120]	@ (8004dcc <HAL_SPI_MspInit+0x90>)
 8004d52:	4293      	cmp	r3, r2
 8004d54:	d120      	bne.n	8004d98 <HAL_SPI_MspInit+0x5c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004d56:	4b1e      	ldr	r3, [pc, #120]	@ (8004dd0 <HAL_SPI_MspInit+0x94>)
 8004d58:	699a      	ldr	r2, [r3, #24]
 8004d5a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004d5e:	619a      	str	r2, [r3, #24]
 8004d60:	699a      	ldr	r2, [r3, #24]
 8004d62:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8004d66:	9201      	str	r2, [sp, #4]
 8004d68:	9a01      	ldr	r2, [sp, #4]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004d6a:	695a      	ldr	r2, [r3, #20]
 8004d6c:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8004d70:	615a      	str	r2, [r3, #20]
 8004d72:	695b      	ldr	r3, [r3, #20]
 8004d74:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004d78:	9302      	str	r3, [sp, #8]
 8004d7a:	9b02      	ldr	r3, [sp, #8]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8004d7c:	2338      	movs	r3, #56	@ 0x38
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8004d7e:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d80:	2302      	movs	r3, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004d82:	2103      	movs	r1, #3
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d84:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004d86:	2305      	movs	r3, #5
 8004d88:	e9cd 1308 	strd	r1, r3, [sp, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004d8c:	4811      	ldr	r0, [pc, #68]	@ (8004dd4 <HAL_SPI_MspInit+0x98>)
 8004d8e:	a905      	add	r1, sp, #20
 8004d90:	f001 f91e 	bl	8005fd0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8004d94:	b00a      	add	sp, #40	@ 0x28
 8004d96:	bd10      	pop	{r4, pc}
  else if(hspi->Instance==SPI2)
 8004d98:	4a0f      	ldr	r2, [pc, #60]	@ (8004dd8 <HAL_SPI_MspInit+0x9c>)
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d1fa      	bne.n	8004d94 <HAL_SPI_MspInit+0x58>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8004d9e:	4b0c      	ldr	r3, [pc, #48]	@ (8004dd0 <HAL_SPI_MspInit+0x94>)
 8004da0:	69da      	ldr	r2, [r3, #28]
 8004da2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004da6:	61da      	str	r2, [r3, #28]
 8004da8:	69da      	ldr	r2, [r3, #28]
 8004daa:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8004dae:	9203      	str	r2, [sp, #12]
 8004db0:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004db2:	695a      	ldr	r2, [r3, #20]
 8004db4:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8004db8:	615a      	str	r2, [r3, #20]
 8004dba:	695b      	ldr	r3, [r3, #20]
 8004dbc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004dc0:	9304      	str	r3, [sp, #16]
 8004dc2:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8004dc4:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8004dc8:	e7d9      	b.n	8004d7e <HAL_SPI_MspInit+0x42>
 8004dca:	bf00      	nop
 8004dcc:	40013000 	.word	0x40013000
 8004dd0:	40021000 	.word	0x40021000
 8004dd4:	48000400 	.word	0x48000400
 8004dd8:	40003800 	.word	0x40003800

08004ddc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004ddc:	b507      	push	{r0, r1, r2, lr}
  if(htim_base->Instance==TIM3)
 8004dde:	4b0e      	ldr	r3, [pc, #56]	@ (8004e18 <HAL_TIM_Base_MspInit+0x3c>)
 8004de0:	6802      	ldr	r2, [r0, #0]
 8004de2:	429a      	cmp	r2, r3
 8004de4:	d115      	bne.n	8004e12 <HAL_TIM_Base_MspInit+0x36>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004de6:	f503 3303 	add.w	r3, r3, #134144	@ 0x20c00
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8004dea:	2105      	movs	r1, #5
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004dec:	69da      	ldr	r2, [r3, #28]
 8004dee:	f042 0202 	orr.w	r2, r2, #2
 8004df2:	61da      	str	r2, [r3, #28]
 8004df4:	69db      	ldr	r3, [r3, #28]
 8004df6:	f003 0302 	and.w	r3, r3, #2
 8004dfa:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	201d      	movs	r0, #29
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004e00:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8004e02:	f000 ffc1 	bl	8005d88 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8004e06:	201d      	movs	r0, #29

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 8004e08:	b003      	add	sp, #12
 8004e0a:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8004e0e:	f000 bfed 	b.w	8005dec <HAL_NVIC_EnableIRQ>
}
 8004e12:	b003      	add	sp, #12
 8004e14:	f85d fb04 	ldr.w	pc, [sp], #4
 8004e18:	40000400 	.word	0x40000400

08004e1c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004e1c:	b530      	push	{r4, r5, lr}
 8004e1e:	4605      	mov	r5, r0
 8004e20:	b08d      	sub	sp, #52	@ 0x34
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004e22:	2214      	movs	r2, #20
 8004e24:	2100      	movs	r1, #0
 8004e26:	a807      	add	r0, sp, #28
 8004e28:	f007 f8c0 	bl	800bfac <memset>
  if(huart->Instance==USART1)
 8004e2c:	682b      	ldr	r3, [r5, #0]
 8004e2e:	4a4a      	ldr	r2, [pc, #296]	@ (8004f58 <HAL_UART_MspInit+0x13c>)
 8004e30:	4293      	cmp	r3, r2
 8004e32:	d137      	bne.n	8004ea4 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004e34:	4b49      	ldr	r3, [pc, #292]	@ (8004f5c <HAL_UART_MspInit+0x140>)
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8004e36:	4c4a      	ldr	r4, [pc, #296]	@ (8004f60 <HAL_UART_MspInit+0x144>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8004e38:	699a      	ldr	r2, [r3, #24]
 8004e3a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004e3e:	619a      	str	r2, [r3, #24]
 8004e40:	699a      	ldr	r2, [r3, #24]
 8004e42:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8004e46:	9201      	str	r2, [sp, #4]
 8004e48:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004e4a:	695a      	ldr	r2, [r3, #20]
 8004e4c:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8004e50:	615a      	str	r2, [r3, #20]
 8004e52:	695b      	ldr	r3, [r3, #20]
 8004e54:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e58:	9302      	str	r3, [sp, #8]
 8004e5a:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e5c:	f44f 6ec0 	mov.w	lr, #1536	@ 0x600
 8004e60:	2302      	movs	r3, #2
 8004e62:	e9cd e307 	strd	lr, r3, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004e66:	2203      	movs	r2, #3
 8004e68:	2307      	movs	r3, #7
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004e6a:	a907      	add	r1, sp, #28
 8004e6c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004e70:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004e74:	f001 f8ac 	bl	8005fd0 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8004e78:	4b3a      	ldr	r3, [pc, #232]	@ (8004f64 <HAL_UART_MspInit+0x148>)
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8004e7a:	6023      	str	r3, [r4, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004e7c:	2300      	movs	r3, #0
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004e7e:	2280      	movs	r2, #128	@ 0x80
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004e80:	e9c4 3301 	strd	r3, r3, [r4, #4]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004e84:	e9c4 2303 	strd	r2, r3, [r4, #12]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8004e88:	2220      	movs	r2, #32
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004e8a:	6163      	str	r3, [r4, #20]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8004e8c:	61a2      	str	r2, [r4, #24]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8004e8e:	61e3      	str	r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8004e90:	4620      	mov	r0, r4
 8004e92:	f000 ffd9 	bl	8005e48 <HAL_DMA_Init>
 8004e96:	b108      	cbz	r0, 8004e9c <HAL_UART_MspInit+0x80>
    {
      Error_Handler();
 8004e98:	f7fe fef3 	bl	8003c82 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8004e9c:	676c      	str	r4, [r5, #116]	@ 0x74
 8004e9e:	6265      	str	r5, [r4, #36]	@ 0x24
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8004ea0:	b00d      	add	sp, #52	@ 0x34
 8004ea2:	bd30      	pop	{r4, r5, pc}
  else if(huart->Instance==USART2)
 8004ea4:	4a30      	ldr	r2, [pc, #192]	@ (8004f68 <HAL_UART_MspInit+0x14c>)
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	d123      	bne.n	8004ef2 <HAL_UART_MspInit+0xd6>
    __HAL_RCC_USART2_CLK_ENABLE();
 8004eaa:	4b2c      	ldr	r3, [pc, #176]	@ (8004f5c <HAL_UART_MspInit+0x140>)
 8004eac:	69da      	ldr	r2, [r3, #28]
 8004eae:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8004eb2:	61da      	str	r2, [r3, #28]
 8004eb4:	69da      	ldr	r2, [r3, #28]
 8004eb6:	f402 3200 	and.w	r2, r2, #131072	@ 0x20000
 8004eba:	9203      	str	r2, [sp, #12]
 8004ebc:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004ebe:	695a      	ldr	r2, [r3, #20]
 8004ec0:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8004ec4:	615a      	str	r2, [r3, #20]
 8004ec6:	695b      	ldr	r3, [r3, #20]
 8004ec8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ecc:	9304      	str	r3, [sp, #16]
 8004ece:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ed0:	240c      	movs	r4, #12
 8004ed2:	2302      	movs	r3, #2
 8004ed4:	e9cd 4307 	strd	r4, r3, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004ed8:	f04f 0c03 	mov.w	ip, #3
 8004edc:	2307      	movs	r3, #7
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004ede:	a907      	add	r1, sp, #28
 8004ee0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004ee4:	e9cd c30a 	strd	ip, r3, [sp, #40]	@ 0x28
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8004ee8:	4c20      	ldr	r4, [pc, #128]	@ (8004f6c <HAL_UART_MspInit+0x150>)
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004eea:	f001 f871 	bl	8005fd0 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8004eee:	4b20      	ldr	r3, [pc, #128]	@ (8004f70 <HAL_UART_MspInit+0x154>)
 8004ef0:	e7c3      	b.n	8004e7a <HAL_UART_MspInit+0x5e>
  else if(huart->Instance==USART3)
 8004ef2:	4a20      	ldr	r2, [pc, #128]	@ (8004f74 <HAL_UART_MspInit+0x158>)
 8004ef4:	4293      	cmp	r3, r2
 8004ef6:	d1d3      	bne.n	8004ea0 <HAL_UART_MspInit+0x84>
    __HAL_RCC_USART3_CLK_ENABLE();
 8004ef8:	4b18      	ldr	r3, [pc, #96]	@ (8004f5c <HAL_UART_MspInit+0x140>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004efa:	481f      	ldr	r0, [pc, #124]	@ (8004f78 <HAL_UART_MspInit+0x15c>)
    __HAL_RCC_USART3_CLK_ENABLE();
 8004efc:	69da      	ldr	r2, [r3, #28]
    hdma_usart3_rx.Instance = DMA1_Channel3;
 8004efe:	4c1f      	ldr	r4, [pc, #124]	@ (8004f7c <HAL_UART_MspInit+0x160>)
    __HAL_RCC_USART3_CLK_ENABLE();
 8004f00:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8004f04:	61da      	str	r2, [r3, #28]
 8004f06:	69da      	ldr	r2, [r3, #28]
 8004f08:	f402 2280 	and.w	r2, r2, #262144	@ 0x40000
 8004f0c:	9205      	str	r2, [sp, #20]
 8004f0e:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004f10:	695a      	ldr	r2, [r3, #20]
 8004f12:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8004f16:	615a      	str	r2, [r3, #20]
 8004f18:	695b      	ldr	r3, [r3, #20]
 8004f1a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004f1e:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f20:	f44f 6240 	mov.w	r2, #3072	@ 0xc00
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004f24:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f26:	2302      	movs	r3, #2
 8004f28:	e9cd 2307 	strd	r2, r3, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8004f2c:	2103      	movs	r1, #3
 8004f2e:	2307      	movs	r3, #7
 8004f30:	e9cd 130a 	strd	r1, r3, [sp, #40]	@ 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004f34:	a907      	add	r1, sp, #28
 8004f36:	f001 f84b 	bl	8005fd0 <HAL_GPIO_Init>
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004f3a:	4811      	ldr	r0, [pc, #68]	@ (8004f80 <HAL_UART_MspInit+0x164>)
 8004f3c:	2300      	movs	r3, #0
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004f3e:	2280      	movs	r2, #128	@ 0x80
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004f40:	e9c4 0300 	strd	r0, r3, [r4]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004f44:	e9c4 2303 	strd	r2, r3, [r4, #12]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004f48:	60a3      	str	r3, [r4, #8]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004f4a:	6163      	str	r3, [r4, #20]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8004f4c:	2320      	movs	r3, #32
 8004f4e:	61a3      	str	r3, [r4, #24]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8004f50:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004f54:	e79b      	b.n	8004e8e <HAL_UART_MspInit+0x72>
 8004f56:	bf00      	nop
 8004f58:	40013800 	.word	0x40013800
 8004f5c:	40021000 	.word	0x40021000
 8004f60:	200010ec 	.word	0x200010ec
 8004f64:	40020058 	.word	0x40020058
 8004f68:	40004400 	.word	0x40004400
 8004f6c:	200010a8 	.word	0x200010a8
 8004f70:	4002006c 	.word	0x4002006c
 8004f74:	40004800 	.word	0x40004800
 8004f78:	48000400 	.word	0x48000400
 8004f7c:	20001064 	.word	0x20001064
 8004f80:	40020030 	.word	0x40020030

08004f84 <HAL_InitTick>:
  uint32_t              uwPrescalerValue = 0U;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8004f84:	4b21      	ldr	r3, [pc, #132]	@ (800500c <HAL_InitTick+0x88>)
{
 8004f86:	b570      	push	{r4, r5, r6, lr}
  __HAL_RCC_TIM2_CLK_ENABLE();
 8004f88:	69da      	ldr	r2, [r3, #28]
 8004f8a:	f042 0201 	orr.w	r2, r2, #1
 8004f8e:	61da      	str	r2, [r3, #28]
 8004f90:	69db      	ldr	r3, [r3, #28]
{
 8004f92:	b088      	sub	sp, #32
  __HAL_RCC_TIM2_CLK_ENABLE();
 8004f94:	f003 0301 	and.w	r3, r3, #1
 8004f98:	9302      	str	r3, [sp, #8]
{
 8004f9a:	4605      	mov	r5, r0
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8004f9c:	a901      	add	r1, sp, #4
 8004f9e:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM2_CLK_ENABLE();
 8004fa0:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8004fa2:	f001 fc3f 	bl	8006824 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8004fa6:	9b06      	ldr	r3, [sp, #24]
 8004fa8:	bb53      	cbnz	r3, 8005000 <HAL_InitTick+0x7c>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8004faa:	f001 fc0b 	bl	80067c4 <HAL_RCC_GetPCLK1Freq>

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8004fae:	4e18      	ldr	r6, [pc, #96]	@ (8005010 <HAL_InitTick+0x8c>)
 8004fb0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8004fb4:	6033      	str	r3, [r6, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8004fb6:	f240 33e7 	movw	r3, #999	@ 0x3e7
 8004fba:	60f3      	str	r3, [r6, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8004fbc:	4b15      	ldr	r3, [pc, #84]	@ (8005014 <HAL_InitTick+0x90>)
 8004fbe:	fbb0 f3f3 	udiv	r3, r0, r3
 8004fc2:	3b01      	subs	r3, #1
  htim2.Init.Prescaler = uwPrescalerValue;
 8004fc4:	6073      	str	r3, [r6, #4]
  htim2.Init.ClockDivision = 0;
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;

  status = HAL_TIM_Base_Init(&htim2);
 8004fc6:	4630      	mov	r0, r6
  htim2.Init.ClockDivision = 0;
 8004fc8:	2300      	movs	r3, #0
 8004fca:	6133      	str	r3, [r6, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004fcc:	60b3      	str	r3, [r6, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004fce:	61b3      	str	r3, [r6, #24]
  status = HAL_TIM_Base_Init(&htim2);
 8004fd0:	f002 fc6c 	bl	80078ac <HAL_TIM_Base_Init>
  if (status == HAL_OK)
 8004fd4:	4604      	mov	r4, r0
 8004fd6:	b980      	cbnz	r0, 8004ffa <HAL_InitTick+0x76>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 8004fd8:	4630      	mov	r0, r6
 8004fda:	f002 fb29 	bl	8007630 <HAL_TIM_Base_Start_IT>
    if (status == HAL_OK)
 8004fde:	4604      	mov	r4, r0
 8004fe0:	b958      	cbnz	r0, 8004ffa <HAL_InitTick+0x76>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004fe2:	201c      	movs	r0, #28
 8004fe4:	f000 ff02 	bl	8005dec <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004fe8:	2d0f      	cmp	r5, #15
 8004fea:	d80d      	bhi.n	8005008 <HAL_InitTick+0x84>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 8004fec:	4622      	mov	r2, r4
 8004fee:	4629      	mov	r1, r5
 8004ff0:	201c      	movs	r0, #28
 8004ff2:	f000 fec9 	bl	8005d88 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004ff6:	4b08      	ldr	r3, [pc, #32]	@ (8005018 <HAL_InitTick+0x94>)
 8004ff8:	601d      	str	r5, [r3, #0]
    }
  }

 /* Return function status */
  return status;
}
 8004ffa:	4620      	mov	r0, r4
 8004ffc:	b008      	add	sp, #32
 8004ffe:	bd70      	pop	{r4, r5, r6, pc}
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8005000:	f001 fbe0 	bl	80067c4 <HAL_RCC_GetPCLK1Freq>
 8005004:	0040      	lsls	r0, r0, #1
 8005006:	e7d2      	b.n	8004fae <HAL_InitTick+0x2a>
        status = HAL_ERROR;
 8005008:	2401      	movs	r4, #1
 800500a:	e7f6      	b.n	8004ffa <HAL_InitTick+0x76>
 800500c:	40021000 	.word	0x40021000
 8005010:	200027d0 	.word	0x200027d0
 8005014:	000f4240 	.word	0x000f4240
 8005018:	2000001c 	.word	0x2000001c

0800501c <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800501c:	e7fe      	b.n	800501c <NMI_Handler>

0800501e <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800501e:	e7fe      	b.n	800501e <HardFault_Handler>

08005020 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005020:	e7fe      	b.n	8005020 <MemManage_Handler>

08005022 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005022:	e7fe      	b.n	8005022 <BusFault_Handler>

08005024 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005024:	e7fe      	b.n	8005024 <UsageFault_Handler>

08005026 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005026:	4770      	bx	lr

08005028 <DMA1_Channel3_IRQHandler>:
void DMA1_Channel3_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8005028:	4801      	ldr	r0, [pc, #4]	@ (8005030 <DMA1_Channel3_IRQHandler+0x8>)
 800502a:	f000 bf89 	b.w	8005f40 <HAL_DMA_IRQHandler>
 800502e:	bf00      	nop
 8005030:	20001064 	.word	0x20001064

08005034 <DMA1_Channel5_IRQHandler>:
void DMA1_Channel5_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8005034:	4801      	ldr	r0, [pc, #4]	@ (800503c <DMA1_Channel5_IRQHandler+0x8>)
 8005036:	f000 bf83 	b.w	8005f40 <HAL_DMA_IRQHandler>
 800503a:	bf00      	nop
 800503c:	200010ec 	.word	0x200010ec

08005040 <DMA1_Channel6_IRQHandler>:
void DMA1_Channel6_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8005040:	4801      	ldr	r0, [pc, #4]	@ (8005048 <DMA1_Channel6_IRQHandler+0x8>)
 8005042:	f000 bf7d 	b.w	8005f40 <HAL_DMA_IRQHandler>
 8005046:	bf00      	nop
 8005048:	200010a8 	.word	0x200010a8

0800504c <TIM2_IRQHandler>:
void TIM2_IRQHandler(void)
{
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800504c:	4801      	ldr	r0, [pc, #4]	@ (8005054 <TIM2_IRQHandler+0x8>)
 800504e:	f002 bb29 	b.w	80076a4 <HAL_TIM_IRQHandler>
 8005052:	bf00      	nop
 8005054:	200027d0 	.word	0x200027d0

08005058 <TIM3_IRQHandler>:
void TIM3_IRQHandler(void)
{
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8005058:	4801      	ldr	r0, [pc, #4]	@ (8005060 <TIM3_IRQHandler+0x8>)
 800505a:	f002 bb23 	b.w	80076a4 <HAL_TIM_IRQHandler>
 800505e:	bf00      	nop
 8005060:	200012c8 	.word	0x200012c8

08005064 <ADC3_IRQHandler>:
void ADC3_IRQHandler(void)
{
  /* USER CODE BEGIN ADC3_IRQn 0 */

  /* USER CODE END ADC3_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc3);
 8005064:	4801      	ldr	r0, [pc, #4]	@ (800506c <ADC3_IRQHandler+0x8>)
 8005066:	f000 ba93 	b.w	8005590 <HAL_ADC_IRQHandler>
 800506a:	bf00      	nop
 800506c:	20001484 	.word	0x20001484

08005070 <DMA2_Channel1_IRQHandler>:
void DMA2_Channel1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Channel1_IRQn 0 */

  /* USER CODE END DMA2_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8005070:	4801      	ldr	r0, [pc, #4]	@ (8005078 <DMA2_Channel1_IRQHandler+0x8>)
 8005072:	f000 bf65 	b.w	8005f40 <HAL_DMA_IRQHandler>
 8005076:	bf00      	nop
 8005078:	20001440 	.word	0x20001440

0800507c <DMA2_Channel5_IRQHandler>:
void DMA2_Channel5_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Channel5_IRQn 0 */

  /* USER CODE END DMA2_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 800507c:	4801      	ldr	r0, [pc, #4]	@ (8005084 <DMA2_Channel5_IRQHandler+0x8>)
 800507e:	f000 bf5f 	b.w	8005f40 <HAL_DMA_IRQHandler>
 8005082:	bf00      	nop
 8005084:	200013fc 	.word	0x200013fc

08005088 <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 8005088:	2001      	movs	r0, #1
 800508a:	4770      	bx	lr

0800508c <_kill>:

int _kill(int pid, int sig)
{
 800508c:	b508      	push	{r3, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800508e:	f007 fdaf 	bl	800cbf0 <__errno>
 8005092:	2316      	movs	r3, #22
 8005094:	6003      	str	r3, [r0, #0]
  return -1;
}
 8005096:	f04f 30ff 	mov.w	r0, #4294967295
 800509a:	bd08      	pop	{r3, pc}

0800509c <_exit>:

void _exit (int status)
{
 800509c:	b508      	push	{r3, lr}
  errno = EINVAL;
 800509e:	f007 fda7 	bl	800cbf0 <__errno>
 80050a2:	2316      	movs	r3, #22
 80050a4:	6003      	str	r3, [r0, #0]
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
 80050a6:	e7fe      	b.n	80050a6 <_exit+0xa>

080050a8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80050a8:	b570      	push	{r4, r5, r6, lr}
 80050aa:	460d      	mov	r5, r1
 80050ac:	4614      	mov	r4, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80050ae:	460e      	mov	r6, r1
 80050b0:	1b73      	subs	r3, r6, r5
 80050b2:	429c      	cmp	r4, r3
 80050b4:	dc01      	bgt.n	80050ba <_read+0x12>
  {
    *ptr++ = __io_getchar();
  }

  return len;
}
 80050b6:	4620      	mov	r0, r4
 80050b8:	bd70      	pop	{r4, r5, r6, pc}
    *ptr++ = __io_getchar();
 80050ba:	f3af 8000 	nop.w
 80050be:	f806 0b01 	strb.w	r0, [r6], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80050c2:	e7f5      	b.n	80050b0 <_read+0x8>

080050c4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80050c4:	b570      	push	{r4, r5, r6, lr}
 80050c6:	460d      	mov	r5, r1
 80050c8:	4614      	mov	r4, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80050ca:	460e      	mov	r6, r1
 80050cc:	1b73      	subs	r3, r6, r5
 80050ce:	429c      	cmp	r4, r3
 80050d0:	dc01      	bgt.n	80050d6 <_write+0x12>
  {
    __io_putchar(*ptr++);
  }
  return len;
}
 80050d2:	4620      	mov	r0, r4
 80050d4:	bd70      	pop	{r4, r5, r6, pc}
    __io_putchar(*ptr++);
 80050d6:	f816 0b01 	ldrb.w	r0, [r6], #1
 80050da:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80050de:	e7f5      	b.n	80050cc <_write+0x8>

080050e0 <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 80050e0:	f04f 30ff 	mov.w	r0, #4294967295
 80050e4:	4770      	bx	lr

080050e6 <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 80050e6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80050ea:	604b      	str	r3, [r1, #4]
  return 0;
}
 80050ec:	2000      	movs	r0, #0
 80050ee:	4770      	bx	lr

080050f0 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 80050f0:	2001      	movs	r0, #1
 80050f2:	4770      	bx	lr

080050f4 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 80050f4:	2000      	movs	r0, #0
 80050f6:	4770      	bx	lr

080050f8 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80050f8:	4a0b      	ldr	r2, [pc, #44]	@ (8005128 <_sbrk+0x30>)
 80050fa:	6811      	ldr	r1, [r2, #0]
{
 80050fc:	b510      	push	{r4, lr}
 80050fe:	4603      	mov	r3, r0
  if (NULL == __sbrk_heap_end)
 8005100:	b909      	cbnz	r1, 8005106 <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 8005102:	490a      	ldr	r1, [pc, #40]	@ (800512c <_sbrk+0x34>)
 8005104:	6011      	str	r1, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005106:	6810      	ldr	r0, [r2, #0]
 8005108:	4909      	ldr	r1, [pc, #36]	@ (8005130 <_sbrk+0x38>)
 800510a:	4c0a      	ldr	r4, [pc, #40]	@ (8005134 <_sbrk+0x3c>)
 800510c:	4403      	add	r3, r0
 800510e:	1b09      	subs	r1, r1, r4
 8005110:	428b      	cmp	r3, r1
 8005112:	d906      	bls.n	8005122 <_sbrk+0x2a>
  {
    errno = ENOMEM;
 8005114:	f007 fd6c 	bl	800cbf0 <__errno>
 8005118:	230c      	movs	r3, #12
 800511a:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 800511c:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 8005120:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 8005122:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 8005124:	e7fc      	b.n	8005120 <_sbrk+0x28>
 8005126:	bf00      	nop
 8005128:	20002820 	.word	0x20002820
 800512c:	20009998 	.word	0x20009998
 8005130:	2000a000 	.word	0x2000a000
 8005134:	00000400 	.word	0x00000400

08005138 <uart_transmit_string>:
#include "system_management.h"
#include <stdio.h>
#include <stdarg.h>
#include <string.h>

void uart_transmit_string(UART_HandleTypeDef *huart, uint8_t *string) {
 8005138:	b570      	push	{r4, r5, r6, lr}
 800513a:	4605      	mov	r5, r0
    HAL_UART_Transmit(huart, string, strlen((char *)string), 1000);
 800513c:	4608      	mov	r0, r1
void uart_transmit_string(UART_HandleTypeDef *huart, uint8_t *string) {
 800513e:	460c      	mov	r4, r1
    HAL_UART_Transmit(huart, string, strlen((char *)string), 1000);
 8005140:	f7fb f8a6 	bl	8000290 <strlen>
 8005144:	4621      	mov	r1, r4
 8005146:	b282      	uxth	r2, r0
 8005148:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800514c:	4628      	mov	r0, r5
}
 800514e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UART_Transmit(huart, string, strlen((char *)string), 1000);
 8005152:	f002 bf59 	b.w	8008008 <HAL_UART_Transmit>
	...

08005158 <Debug_printf>:


void Debug_printf(const char *format, ...) {
 8005158:	b40f      	push	{r0, r1, r2, r3}
 800515a:	b500      	push	{lr}
 800515c:	b0c3      	sub	sp, #268	@ 0x10c
 800515e:	ab44      	add	r3, sp, #272	@ 0x110

    // Start processing the variadic arguments
    va_start(args, format);

    // Format the string
    vsnprintf(output_buffer, sizeof(output_buffer), format, args);
 8005160:	f44f 7180 	mov.w	r1, #256	@ 0x100
void Debug_printf(const char *format, ...) {
 8005164:	f853 2b04 	ldr.w	r2, [r3], #4
    va_start(args, format);
 8005168:	9301      	str	r3, [sp, #4]
    vsnprintf(output_buffer, sizeof(output_buffer), format, args);
 800516a:	a802      	add	r0, sp, #8
 800516c:	f006 ff10 	bl	800bf90 <vsniprintf>

    // End processing the arguments
    va_end(args);

    // Transmit the formatted string over UART
    uart_transmit_string(&huart1,(uint8_t*) output_buffer);
 8005170:	4804      	ldr	r0, [pc, #16]	@ (8005184 <Debug_printf+0x2c>)
 8005172:	a902      	add	r1, sp, #8
 8005174:	f7ff ffe0 	bl	8005138 <uart_transmit_string>
}
 8005178:	b043      	add	sp, #268	@ 0x10c
 800517a:	f85d eb04 	ldr.w	lr, [sp], #4
 800517e:	b004      	add	sp, #16
 8005180:	4770      	bx	lr
 8005182:	bf00      	nop
 8005184:	20001240 	.word	0x20001240

08005188 <SystemInit>:
  */
void SystemInit(void)
{
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005188:	4a03      	ldr	r2, [pc, #12]	@ (8005198 <SystemInit+0x10>)
 800518a:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 800518e:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005192:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005196:	4770      	bx	lr
 8005198:	e000ed00 	.word	0xe000ed00

0800519c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800519c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80051d4 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80051a0:	f7ff fff2 	bl	8005188 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80051a4:	480c      	ldr	r0, [pc, #48]	@ (80051d8 <LoopForever+0x6>)
  ldr r1, =_edata
 80051a6:	490d      	ldr	r1, [pc, #52]	@ (80051dc <LoopForever+0xa>)
  ldr r2, =_sidata
 80051a8:	4a0d      	ldr	r2, [pc, #52]	@ (80051e0 <LoopForever+0xe>)
  movs r3, #0
 80051aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80051ac:	e002      	b.n	80051b4 <LoopCopyDataInit>

080051ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80051ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80051b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80051b2:	3304      	adds	r3, #4

080051b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80051b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80051b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80051b8:	d3f9      	bcc.n	80051ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80051ba:	4a0a      	ldr	r2, [pc, #40]	@ (80051e4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80051bc:	4c0a      	ldr	r4, [pc, #40]	@ (80051e8 <LoopForever+0x16>)
  movs r3, #0
 80051be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80051c0:	e001      	b.n	80051c6 <LoopFillZerobss>

080051c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80051c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80051c4:	3204      	adds	r2, #4

080051c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80051c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80051c8:	d3fb      	bcc.n	80051c2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80051ca:	f007 fd17 	bl	800cbfc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80051ce:	f7fe fb05 	bl	80037dc <main>

080051d2 <LoopForever>:

LoopForever:
    b LoopForever
 80051d2:	e7fe      	b.n	80051d2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80051d4:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 80051d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80051dc:	20000260 	.word	0x20000260
  ldr r2, =_sidata
 80051e0:	080141c0 	.word	0x080141c0
  ldr r2, =_sbss
 80051e4:	20000260 	.word	0x20000260
  ldr r4, =_ebss
 80051e8:	20009998 	.word	0x20009998

080051ec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80051ec:	e7fe      	b.n	80051ec <ADC1_2_IRQHandler>

080051ee <__cxa_guard_abort.part.0>:

/**
  * @brief Acquire STM32 lock
  * @param lock The lock to acquire
  */
static inline void stm32_lock_acquire(LockingData_t *lock)
 80051ee:	b508      	push	{r3, lr}
  __ASM volatile ("cpsid i" : : : "memory");
 80051f0:	b672      	cpsid	i
{
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 80051f2:	f7fe fd46 	bl	8003c82 <Error_Handler>
 80051f6:	e7fe      	b.n	80051f6 <__cxa_guard_abort.part.0+0x8>

080051f8 <stm32_lock_acquire>:
{
 80051f8:	b508      	push	{r3, lr}
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 80051fa:	7a03      	ldrb	r3, [r0, #8]
 80051fc:	2b01      	cmp	r3, #1
 80051fe:	d903      	bls.n	8005208 <stm32_lock_acquire+0x10>
 8005200:	b672      	cpsid	i
 8005202:	f7fe fd3e 	bl	8003c82 <Error_Handler>
 8005206:	e7fe      	b.n	8005206 <stm32_lock_acquire+0xe>
  lock->basepri[lock->nesting_level++] = taskENTER_CRITICAL_FROM_ISR();
 8005208:	1c5a      	adds	r2, r3, #1
 800520a:	7202      	strb	r2, [r0, #8]

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800520c:	f3ef 8211 	mrs	r2, BASEPRI
 8005210:	f04f 0150 	mov.w	r1, #80	@ 0x50
 8005214:	f381 8811 	msr	BASEPRI, r1
 8005218:	f3bf 8f6f 	isb	sy
 800521c:	f3bf 8f4f 	dsb	sy
 8005220:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8005224:	bd08      	pop	{r3, pc}

08005226 <stm32_lock_release>:
/**
  * @brief Release STM32 lock
  * @param lock The lock to release
  */
static inline void stm32_lock_release(LockingData_t *lock)
{
 8005226:	b508      	push	{r3, lr}
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
  lock->nesting_level--;
 8005228:	7a03      	ldrb	r3, [r0, #8]
 800522a:	3b01      	subs	r3, #1
 800522c:	b2db      	uxtb	r3, r3
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 800522e:	2b01      	cmp	r3, #1
  lock->nesting_level--;
 8005230:	7203      	strb	r3, [r0, #8]
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 8005232:	d903      	bls.n	800523c <stm32_lock_release+0x16>
 8005234:	b672      	cpsid	i
 8005236:	f7fe fd24 	bl	8003c82 <Error_Handler>
 800523a:	e7fe      	b.n	800523a <stm32_lock_release+0x14>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800523c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8005240:	f383 8811 	msr	BASEPRI, r3
  taskEXIT_CRITICAL_FROM_ISR(lock->basepri[lock->nesting_level]);
}
 8005244:	bd08      	pop	{r3, pc}

08005246 <__retarget_lock_init_recursive>:
/**
  * @brief Initialize recursive lock
  * @param lock The lock
  */
void __retarget_lock_init_recursive(_LOCK_T *lock)
{
 8005246:	b510      	push	{r4, lr}
  if (lock == NULL)
 8005248:	4604      	mov	r4, r0
 800524a:	b920      	cbnz	r0, 8005256 <__retarget_lock_init_recursive+0x10>
  {
    errno = EINVAL;
 800524c:	f007 fcd0 	bl	800cbf0 <__errno>
 8005250:	2316      	movs	r3, #22
 8005252:	6003      	str	r3, [r0, #0]
    return;
  }

  /* Unable to allocate memory */
  STM32_LOCK_BLOCK();
}
 8005254:	bd10      	pop	{r4, pc}
  *lock = (_LOCK_T)malloc(sizeof(struct __lock));
 8005256:	200c      	movs	r0, #12
 8005258:	f004 ff24 	bl	800a0a4 <malloc>
 800525c:	6020      	str	r0, [r4, #0]
  if (*lock != NULL)
 800525e:	b120      	cbz	r0, 800526a <__retarget_lock_init_recursive+0x24>
    lock->basepri[i] = 0;
 8005260:	2300      	movs	r3, #0
 8005262:	e9c0 3300 	strd	r3, r3, [r0]
  lock->nesting_level = 0;
 8005266:	7203      	strb	r3, [r0, #8]
}
 8005268:	e7f4      	b.n	8005254 <__retarget_lock_init_recursive+0xe>
 800526a:	f7ff ffc0 	bl	80051ee <__cxa_guard_abort.part.0>

0800526e <__retarget_lock_acquire>:
/**
  * @brief Acquire lock
  * @param lock The lock
  */
void __retarget_lock_acquire(_LOCK_T lock)
{
 800526e:	b508      	push	{r3, lr}
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8005270:	b908      	cbnz	r0, 8005276 <__retarget_lock_acquire+0x8>
 8005272:	f7ff ffbc 	bl	80051ee <__cxa_guard_abort.part.0>
  stm32_lock_acquire(STM32_LOCK_PARAMETER(lock));
}
 8005276:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  stm32_lock_acquire(STM32_LOCK_PARAMETER(lock));
 800527a:	f7ff bfbd 	b.w	80051f8 <stm32_lock_acquire>

0800527e <__retarget_lock_acquire_recursive>:
#define __lock_close(lock) __retarget_lock_close(lock)
extern void __retarget_lock_close_recursive(_LOCK_T lock);
#define __lock_close_recursive(lock) __retarget_lock_close_recursive(lock)
extern void __retarget_lock_acquire(_LOCK_T lock);
#define __lock_acquire(lock) __retarget_lock_acquire(lock)
extern void __retarget_lock_acquire_recursive(_LOCK_T lock);
 800527e:	f7ff bff6 	b.w	800526e <__retarget_lock_acquire>

08005282 <__retarget_lock_release>:
/**
  * @brief Release lock
  * @param lock The lock
  */
void __retarget_lock_release(_LOCK_T lock)
{
 8005282:	b508      	push	{r3, lr}
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8005284:	b918      	cbnz	r0, 800528e <__retarget_lock_release+0xc>
 8005286:	b672      	cpsid	i
 8005288:	f7fe fcfb 	bl	8003c82 <Error_Handler>
 800528c:	e7fe      	b.n	800528c <__retarget_lock_release+0xa>
  stm32_lock_release(STM32_LOCK_PARAMETER(lock));
}
 800528e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  stm32_lock_release(STM32_LOCK_PARAMETER(lock));
 8005292:	f7ff bfc8 	b.w	8005226 <stm32_lock_release>

08005296 <__retarget_lock_release_recursive>:
extern int __retarget_lock_try_acquire_recursive(_LOCK_T lock);
#define __lock_try_acquire_recursive(lock) \
  __retarget_lock_try_acquire_recursive(lock)
extern void __retarget_lock_release(_LOCK_T lock);
#define __lock_release(lock) __retarget_lock_release(lock)
extern void __retarget_lock_release_recursive(_LOCK_T lock);
 8005296:	f7ff bff4 	b.w	8005282 <__retarget_lock_release>
	...

0800529c <HAL_Init>:
  */
HAL_StatusTypeDef HAL_Init(void)
{
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800529c:	4a07      	ldr	r2, [pc, #28]	@ (80052bc <HAL_Init+0x20>)
{
 800529e:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80052a0:	6813      	ldr	r3, [r2, #0]
 80052a2:	f043 0310 	orr.w	r3, r3, #16
 80052a6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80052a8:	2003      	movs	r0, #3
 80052aa:	f000 fd5b 	bl	8005d64 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80052ae:	200f      	movs	r0, #15
 80052b0:	f7ff fe68 	bl	8004f84 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80052b4:	f7ff fc7a 	bl	8004bac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 80052b8:	2000      	movs	r0, #0
 80052ba:	bd08      	pop	{r3, pc}
 80052bc:	40022000 	.word	0x40022000

080052c0 <HAL_IncTick>:
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80052c0:	4a03      	ldr	r2, [pc, #12]	@ (80052d0 <HAL_IncTick+0x10>)
 80052c2:	4b04      	ldr	r3, [pc, #16]	@ (80052d4 <HAL_IncTick+0x14>)
 80052c4:	6811      	ldr	r1, [r2, #0]
 80052c6:	781b      	ldrb	r3, [r3, #0]
 80052c8:	440b      	add	r3, r1
 80052ca:	6013      	str	r3, [r2, #0]
}
 80052cc:	4770      	bx	lr
 80052ce:	bf00      	nop
 80052d0:	20002854 	.word	0x20002854
 80052d4:	20000018 	.word	0x20000018

080052d8 <HAL_GetTick>:
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;  
 80052d8:	4b01      	ldr	r3, [pc, #4]	@ (80052e0 <HAL_GetTick+0x8>)
 80052da:	6818      	ldr	r0, [r3, #0]
}
 80052dc:	4770      	bx	lr
 80052de:	bf00      	nop
 80052e0:	20002854 	.word	0x20002854

080052e4 <HAL_ADC_ConvCpltCallback>:
/**
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
 80052e4:	4770      	bx	lr

080052e6 <HAL_ADC_LevelOutOfWindowCallback>:
/**
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
 80052e6:	4770      	bx	lr

080052e8 <HAL_ADC_ErrorCallback>:
  * @brief  ADC error callback in non blocking mode
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
 80052e8:	4770      	bx	lr

080052ea <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 80052ea:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 80052ec:	6803      	ldr	r3, [r0, #0]
 80052ee:	689a      	ldr	r2, [r3, #8]
 80052f0:	f002 0203 	and.w	r2, r2, #3
 80052f4:	2a01      	cmp	r2, #1
{
 80052f6:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET )
 80052f8:	d001      	beq.n	80052fe <ADC_Disable+0x14>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80052fa:	2000      	movs	r0, #0
}
 80052fc:	bd38      	pop	{r3, r4, r5, pc}
  if (ADC_IS_ENABLE(hadc) != RESET )
 80052fe:	681a      	ldr	r2, [r3, #0]
 8005300:	07d1      	lsls	r1, r2, #31
 8005302:	d5fa      	bpl.n	80052fa <ADC_Disable+0x10>
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8005304:	689a      	ldr	r2, [r3, #8]
 8005306:	f002 020d 	and.w	r2, r2, #13
 800530a:	2a01      	cmp	r2, #1
 800530c:	d115      	bne.n	800533a <ADC_Disable+0x50>
      __HAL_ADC_DISABLE(hadc);
 800530e:	689a      	ldr	r2, [r3, #8]
 8005310:	f042 0202 	orr.w	r2, r2, #2
 8005314:	609a      	str	r2, [r3, #8]
 8005316:	2203      	movs	r2, #3
 8005318:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 800531a:	f7ff ffdd 	bl	80052d8 <HAL_GetTick>
 800531e:	4605      	mov	r5, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8005320:	6823      	ldr	r3, [r4, #0]
 8005322:	689b      	ldr	r3, [r3, #8]
 8005324:	07db      	lsls	r3, r3, #31
 8005326:	d5e8      	bpl.n	80052fa <ADC_Disable+0x10>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8005328:	f7ff ffd6 	bl	80052d8 <HAL_GetTick>
 800532c:	1b40      	subs	r0, r0, r5
 800532e:	2802      	cmp	r0, #2
 8005330:	d9f6      	bls.n	8005320 <ADC_Disable+0x36>
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8005332:	6823      	ldr	r3, [r4, #0]
 8005334:	689b      	ldr	r3, [r3, #8]
 8005336:	07da      	lsls	r2, r3, #31
 8005338:	d5f2      	bpl.n	8005320 <ADC_Disable+0x36>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800533a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800533c:	f043 0310 	orr.w	r3, r3, #16
 8005340:	6423      	str	r3, [r4, #64]	@ 0x40
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005342:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8005344:	f043 0301 	orr.w	r3, r3, #1
 8005348:	6463      	str	r3, [r4, #68]	@ 0x44
      return HAL_ERROR;
 800534a:	2001      	movs	r0, #1
 800534c:	e7d6      	b.n	80052fc <ADC_Disable+0x12>
	...

08005350 <HAL_ADC_Init>:
{
 8005350:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __IO uint32_t wait_loop_index = 0U;
 8005352:	2300      	movs	r3, #0
 8005354:	9301      	str	r3, [sp, #4]
  if(hadc == NULL)
 8005356:	4604      	mov	r4, r0
 8005358:	2800      	cmp	r0, #0
 800535a:	f000 8103 	beq.w	8005564 <HAL_ADC_Init+0x214>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800535e:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 8005360:	06d5      	lsls	r5, r2, #27
 8005362:	d46a      	bmi.n	800543a <HAL_ADC_Init+0xea>
    if (hadc->State == HAL_ADC_STATE_RESET)
 8005364:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8005366:	2b00      	cmp	r3, #0
 8005368:	d035      	beq.n	80053d6 <HAL_ADC_Init+0x86>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800536a:	2000      	movs	r0, #0
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 800536c:	6823      	ldr	r3, [r4, #0]
 800536e:	689a      	ldr	r2, [r3, #8]
 8005370:	00d2      	lsls	r2, r2, #3
 8005372:	d502      	bpl.n	800537a <HAL_ADC_Init+0x2a>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8005374:	689b      	ldr	r3, [r3, #8]
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8005376:	009d      	lsls	r5, r3, #2
 8005378:	d50a      	bpl.n	8005390 <HAL_ADC_Init+0x40>
      ADC_STATE_CLR_SET(hadc->State,
 800537a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800537c:	f023 0312 	bic.w	r3, r3, #18
 8005380:	f043 0310 	orr.w	r3, r3, #16
 8005384:	6423      	str	r3, [r4, #64]	@ 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005386:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8005388:	f043 0301 	orr.w	r3, r3, #1
 800538c:	6463      	str	r3, [r4, #68]	@ 0x44
      tmp_hal_status = HAL_ERROR;
 800538e:	2001      	movs	r0, #1
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8005390:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005392:	06d9      	lsls	r1, r3, #27
 8005394:	f100 80e0 	bmi.w	8005558 <HAL_ADC_Init+0x208>
 8005398:	2800      	cmp	r0, #0
 800539a:	f040 80dd 	bne.w	8005558 <HAL_ADC_Init+0x208>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 800539e:	6823      	ldr	r3, [r4, #0]
 80053a0:	689a      	ldr	r2, [r3, #8]
      (tmp_hal_status == HAL_OK)                                &&
 80053a2:	0752      	lsls	r2, r2, #29
 80053a4:	f100 80d8 	bmi.w	8005558 <HAL_ADC_Init+0x208>
    ADC_STATE_CLR_SET(hadc->State,
 80053a8:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 80053aa:	f422 7281 	bic.w	r2, r2, #258	@ 0x102
 80053ae:	f042 0202 	orr.w	r2, r2, #2
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80053b2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
    ADC_STATE_CLR_SET(hadc->State,
 80053b6:	6422      	str	r2, [r4, #64]	@ 0x40
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80053b8:	4a6b      	ldr	r2, [pc, #428]	@ (8005568 <HAL_ADC_Init+0x218>)
 80053ba:	d042      	beq.n	8005442 <HAL_ADC_Init+0xf2>
 80053bc:	4293      	cmp	r3, r2
 80053be:	d03e      	beq.n	800543e <HAL_ADC_Init+0xee>
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80053c0:	f502 7240 	add.w	r2, r2, #768	@ 0x300
 80053c4:	4293      	cmp	r3, r2
 80053c6:	4969      	ldr	r1, [pc, #420]	@ (800556c <HAL_ADC_Init+0x21c>)
 80053c8:	f000 80b3 	beq.w	8005532 <HAL_ADC_Init+0x1e2>
 80053cc:	428b      	cmp	r3, r1
 80053ce:	bf18      	it	ne
 80053d0:	2200      	movne	r2, #0
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80053d2:	4967      	ldr	r1, [pc, #412]	@ (8005570 <HAL_ADC_Init+0x220>)
 80053d4:	e036      	b.n	8005444 <HAL_ADC_Init+0xf4>
      hadc->InjectionConfig.ContextQueue = 0U;
 80053d6:	e9c0 3312 	strd	r3, r3, [r0, #72]	@ 0x48
      ADC_CLEAR_ERRORCODE(hadc);
 80053da:	6443      	str	r3, [r0, #68]	@ 0x44
      hadc->Lock = HAL_UNLOCKED;
 80053dc:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_ADC_MspInit(hadc);
 80053e0:	f7ff fc02 	bl	8004be8 <HAL_ADC_MspInit>
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 80053e4:	6823      	ldr	r3, [r4, #0]
 80053e6:	689b      	ldr	r3, [r3, #8]
 80053e8:	00d8      	lsls	r0, r3, #3
 80053ea:	d4be      	bmi.n	800536a <HAL_ADC_Init+0x1a>
        tmp_hal_status = ADC_Disable(hadc);
 80053ec:	4620      	mov	r0, r4
 80053ee:	f7ff ff7c 	bl	80052ea <ADC_Disable>
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80053f2:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 80053f4:	06d1      	lsls	r1, r2, #27
 80053f6:	d4b9      	bmi.n	800536c <HAL_ADC_Init+0x1c>
 80053f8:	2800      	cmp	r0, #0
 80053fa:	d1b7      	bne.n	800536c <HAL_ADC_Init+0x1c>
          ADC_STATE_CLR_SET(hadc->State,
 80053fc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 80053fe:	6822      	ldr	r2, [r4, #0]
          ADC_STATE_CLR_SET(hadc->State,
 8005400:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8005404:	f023 0302 	bic.w	r3, r3, #2
 8005408:	f043 0302 	orr.w	r3, r3, #2
 800540c:	6423      	str	r3, [r4, #64]	@ 0x40
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 800540e:	6893      	ldr	r3, [r2, #8]
 8005410:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
 8005414:	6093      	str	r3, [r2, #8]
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8005416:	6893      	ldr	r3, [r2, #8]
 8005418:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800541c:	6093      	str	r3, [r2, #8]
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800541e:	4b55      	ldr	r3, [pc, #340]	@ (8005574 <HAL_ADC_Init+0x224>)
 8005420:	4a55      	ldr	r2, [pc, #340]	@ (8005578 <HAL_ADC_Init+0x228>)
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	fbb3 f3f2 	udiv	r3, r3, r2
 8005428:	220a      	movs	r2, #10
 800542a:	4353      	muls	r3, r2
            wait_loop_index--;
 800542c:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 800542e:	9b01      	ldr	r3, [sp, #4]
 8005430:	2b00      	cmp	r3, #0
 8005432:	d09a      	beq.n	800536a <HAL_ADC_Init+0x1a>
            wait_loop_index--;
 8005434:	9b01      	ldr	r3, [sp, #4]
 8005436:	3b01      	subs	r3, #1
 8005438:	e7f8      	b.n	800542c <HAL_ADC_Init+0xdc>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800543a:	4618      	mov	r0, r3
 800543c:	e7a8      	b.n	8005390 <HAL_ADC_Init+0x40>
 800543e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005442:	494e      	ldr	r1, [pc, #312]	@ (800557c <HAL_ADC_Init+0x22c>)
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8005444:	689d      	ldr	r5, [r3, #8]
 8005446:	f005 0503 	and.w	r5, r5, #3
 800544a:	2d01      	cmp	r5, #1
 800544c:	d102      	bne.n	8005454 <HAL_ADC_Init+0x104>
 800544e:	681d      	ldr	r5, [r3, #0]
 8005450:	07ed      	lsls	r5, r5, #31
 8005452:	d40e      	bmi.n	8005472 <HAL_ADC_Init+0x122>
 8005454:	b13a      	cbz	r2, 8005466 <HAL_ADC_Init+0x116>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8005456:	6895      	ldr	r5, [r2, #8]
 8005458:	f005 0503 	and.w	r5, r5, #3
 800545c:	2d01      	cmp	r5, #1
 800545e:	d102      	bne.n	8005466 <HAL_ADC_Init+0x116>
 8005460:	6812      	ldr	r2, [r2, #0]
 8005462:	07d2      	lsls	r2, r2, #31
 8005464:	d405      	bmi.n	8005472 <HAL_ADC_Init+0x122>
      MODIFY_REG(tmpADC_Common->CCR       ,
 8005466:	688a      	ldr	r2, [r1, #8]
 8005468:	6865      	ldr	r5, [r4, #4]
 800546a:	f422 3240 	bic.w	r2, r2, #196608	@ 0x30000
 800546e:	432a      	orrs	r2, r5
 8005470:	608a      	str	r2, [r1, #8]
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8005472:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 8005476:	430a      	orrs	r2, r1
 8005478:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800547a:	7e65      	ldrb	r5, [r4, #25]
 800547c:	3901      	subs	r1, #1
 800547e:	bf18      	it	ne
 8005480:	2101      	movne	r1, #1
 8005482:	ea42 3245 	orr.w	r2, r2, r5, lsl #13
 8005486:	ea42 3201 	orr.w	r2, r2, r1, lsl #12
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800548a:	f894 1020 	ldrb.w	r1, [r4, #32]
 800548e:	2901      	cmp	r1, #1
 8005490:	d107      	bne.n	80054a2 <HAL_ADC_Init+0x152>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8005492:	2d00      	cmp	r5, #0
 8005494:	d14f      	bne.n	8005536 <HAL_ADC_Init+0x1e6>
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8005496:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8005498:	3901      	subs	r1, #1
 800549a:	ea42 4141 	orr.w	r1, r2, r1, lsl #17
 800549e:	f441 3280 	orr.w	r2, r1, #65536	@ 0x10000
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80054a2:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 80054a4:	2901      	cmp	r1, #1
 80054a6:	d015      	beq.n	80054d4 <HAL_ADC_Init+0x184>
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 80054a8:	4d35      	ldr	r5, [pc, #212]	@ (8005580 <HAL_ADC_Init+0x230>)
 80054aa:	42ab      	cmp	r3, r5
 80054ac:	d003      	beq.n	80054b6 <HAL_ADC_Init+0x166>
 80054ae:	f505 7580 	add.w	r5, r5, #256	@ 0x100
 80054b2:	42ab      	cmp	r3, r5
 80054b4:	d10a      	bne.n	80054cc <HAL_ADC_Init+0x17c>
 80054b6:	f5b1 7f30 	cmp.w	r1, #704	@ 0x2c0
 80054ba:	d047      	beq.n	800554c <HAL_ADC_Init+0x1fc>
 80054bc:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 80054c0:	d047      	beq.n	8005552 <HAL_ADC_Init+0x202>
 80054c2:	f5b1 7fe0 	cmp.w	r1, #448	@ 0x1c0
 80054c6:	bf08      	it	eq
 80054c8:	f44f 7180 	moveq.w	r1, #256	@ 0x100
 80054cc:	6ae5      	ldr	r5, [r4, #44]	@ 0x2c
 80054ce:	4315      	orrs	r5, r2
 80054d0:	ea45 0201 	orr.w	r2, r5, r1
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80054d4:	6899      	ldr	r1, [r3, #8]
 80054d6:	f011 0f0c 	tst.w	r1, #12
 80054da:	d10c      	bne.n	80054f6 <HAL_ADC_Init+0x1a6>
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 80054dc:	68d9      	ldr	r1, [r3, #12]
 80054de:	f421 4180 	bic.w	r1, r1, #16384	@ 0x4000
 80054e2:	f021 0102 	bic.w	r1, r1, #2
 80054e6:	60d9      	str	r1, [r3, #12]
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 80054e8:	f894 1030 	ldrb.w	r1, [r4, #48]	@ 0x30
 80054ec:	7e25      	ldrb	r5, [r4, #24]
 80054ee:	0049      	lsls	r1, r1, #1
 80054f0:	ea41 3185 	orr.w	r1, r1, r5, lsl #14
 80054f4:	430a      	orrs	r2, r1
    MODIFY_REG(hadc->Instance->CFGR,
 80054f6:	68dd      	ldr	r5, [r3, #12]
 80054f8:	4922      	ldr	r1, [pc, #136]	@ (8005584 <HAL_ADC_Init+0x234>)
 80054fa:	4029      	ands	r1, r5
 80054fc:	4311      	orrs	r1, r2
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80054fe:	6922      	ldr	r2, [r4, #16]
    MODIFY_REG(hadc->Instance->CFGR,
 8005500:	60d9      	str	r1, [r3, #12]
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8005502:	2a01      	cmp	r2, #1
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8005504:	bf05      	ittet	eq
 8005506:	6b19      	ldreq	r1, [r3, #48]	@ 0x30
 8005508:	69e2      	ldreq	r2, [r4, #28]
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800550a:	6b1a      	ldrne	r2, [r3, #48]	@ 0x30
      MODIFY_REG(hadc->Instance->SQR1                     ,
 800550c:	f102 32ff 	addeq.w	r2, r2, #4294967295
 8005510:	bf06      	itte	eq
 8005512:	f021 010f 	biceq.w	r1, r1, #15
 8005516:	430a      	orreq	r2, r1
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8005518:	f022 020f 	bicne.w	r2, r2, #15
 800551c:	631a      	str	r2, [r3, #48]	@ 0x30
    ADC_CLEAR_ERRORCODE(hadc);
 800551e:	2300      	movs	r3, #0
 8005520:	6463      	str	r3, [r4, #68]	@ 0x44
    ADC_STATE_CLR_SET(hadc->State,
 8005522:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005524:	f023 0303 	bic.w	r3, r3, #3
 8005528:	f043 0301 	orr.w	r3, r3, #1
 800552c:	6423      	str	r3, [r4, #64]	@ 0x40
}
 800552e:	b003      	add	sp, #12
 8005530:	bd30      	pop	{r4, r5, pc}
 8005532:	460a      	mov	r2, r1
 8005534:	e74d      	b.n	80053d2 <HAL_ADC_Init+0x82>
        ADC_STATE_CLR_SET(hadc->State,
 8005536:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 8005538:	f021 0122 	bic.w	r1, r1, #34	@ 0x22
 800553c:	f041 0120 	orr.w	r1, r1, #32
 8005540:	6421      	str	r1, [r4, #64]	@ 0x40
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005542:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8005544:	f041 0101 	orr.w	r1, r1, #1
 8005548:	6461      	str	r1, [r4, #68]	@ 0x44
 800554a:	e7aa      	b.n	80054a2 <HAL_ADC_Init+0x152>
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 800554c:	f44f 71e0 	mov.w	r1, #448	@ 0x1c0
 8005550:	e7bc      	b.n	80054cc <HAL_ADC_Init+0x17c>
 8005552:	f44f 7130 	mov.w	r1, #704	@ 0x2c0
 8005556:	e7b9      	b.n	80054cc <HAL_ADC_Init+0x17c>
    ADC_STATE_CLR_SET(hadc->State,
 8005558:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800555a:	f023 0312 	bic.w	r3, r3, #18
 800555e:	f043 0310 	orr.w	r3, r3, #16
 8005562:	6423      	str	r3, [r4, #64]	@ 0x40
    return HAL_ERROR;
 8005564:	2001      	movs	r0, #1
 8005566:	e7e2      	b.n	800552e <HAL_ADC_Init+0x1de>
 8005568:	50000100 	.word	0x50000100
 800556c:	50000500 	.word	0x50000500
 8005570:	50000700 	.word	0x50000700
 8005574:	20000014 	.word	0x20000014
 8005578:	000f4240 	.word	0x000f4240
 800557c:	50000300 	.word	0x50000300
 8005580:	50000400 	.word	0x50000400
 8005584:	fff0c007 	.word	0xfff0c007

08005588 <HAL_ADCEx_InjectedConvCpltCallback>:
}
 8005588:	4770      	bx	lr

0800558a <HAL_ADCEx_InjectedQueueOverflowCallback>:
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef* hadc)
 800558a:	4770      	bx	lr

0800558c <HAL_ADCEx_LevelOutOfWindow2Callback>:
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef* hadc)
 800558c:	4770      	bx	lr

0800558e <HAL_ADCEx_LevelOutOfWindow3Callback>:
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef* hadc)
 800558e:	4770      	bx	lr

08005590 <HAL_ADC_IRQHandler>:
  uint32_t tmp_isr = hadc->Instance->ISR;
 8005590:	6803      	ldr	r3, [r0, #0]
{
 8005592:	b570      	push	{r4, r5, r6, lr}
  uint32_t tmp_isr = hadc->Instance->ISR;
 8005594:	681d      	ldr	r5, [r3, #0]
  uint32_t tmp_ier = hadc->Instance->IER;
 8005596:	685e      	ldr	r6, [r3, #4]
  if( (((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8005598:	076a      	lsls	r2, r5, #29
{
 800559a:	4604      	mov	r4, r0
  if( (((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800559c:	d501      	bpl.n	80055a2 <HAL_ADC_IRQHandler+0x12>
 800559e:	0770      	lsls	r0, r6, #29
 80055a0:	d403      	bmi.n	80055aa <HAL_ADC_IRQHandler+0x1a>
 80055a2:	0729      	lsls	r1, r5, #28
 80055a4:	d543      	bpl.n	800562e <HAL_ADC_IRQHandler+0x9e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))   )
 80055a6:	0732      	lsls	r2, r6, #28
 80055a8:	d541      	bpl.n	800562e <HAL_ADC_IRQHandler+0x9e>
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80055aa:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 80055ac:	06d0      	lsls	r0, r2, #27
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80055ae:	bf5e      	ittt	pl
 80055b0:	6c22      	ldrpl	r2, [r4, #64]	@ 0x40
 80055b2:	f442 7200 	orrpl.w	r2, r2, #512	@ 0x200
 80055b6:	6422      	strpl	r2, [r4, #64]	@ 0x40
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 80055b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80055bc:	d003      	beq.n	80055c6 <HAL_ADC_IRQHandler+0x36>
 80055be:	4a90      	ldr	r2, [pc, #576]	@ (8005800 <HAL_ADC_IRQHandler+0x270>)
 80055c0:	4293      	cmp	r3, r2
 80055c2:	f040 8105 	bne.w	80057d0 <HAL_ADC_IRQHandler+0x240>
 80055c6:	4a8f      	ldr	r2, [pc, #572]	@ (8005804 <HAL_ADC_IRQHandler+0x274>)
 80055c8:	6891      	ldr	r1, [r2, #8]
 80055ca:	06c9      	lsls	r1, r1, #27
 80055cc:	d00c      	beq.n	80055e8 <HAL_ADC_IRQHandler+0x58>
 80055ce:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80055d2:	d003      	beq.n	80055dc <HAL_ADC_IRQHandler+0x4c>
 80055d4:	498a      	ldr	r1, [pc, #552]	@ (8005800 <HAL_ADC_IRQHandler+0x270>)
 80055d6:	428b      	cmp	r3, r1
 80055d8:	f040 80ff 	bne.w	80057da <HAL_ADC_IRQHandler+0x24a>
 80055dc:	6892      	ldr	r2, [r2, #8]
 80055de:	f002 021f 	and.w	r2, r2, #31
 80055e2:	2a05      	cmp	r2, #5
 80055e4:	f040 8114 	bne.w	8005810 <HAL_ADC_IRQHandler+0x280>
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 80055e8:	68da      	ldr	r2, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 80055ea:	68d9      	ldr	r1, [r3, #12]
       (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == RESET)  )
 80055ec:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 80055f0:	f401 6140 	and.w	r1, r1, #3072	@ 0xc00
 80055f4:	4311      	orrs	r1, r2
 80055f6:	d114      	bne.n	8005622 <HAL_ADC_IRQHandler+0x92>
      if((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS)
 80055f8:	0729      	lsls	r1, r5, #28
 80055fa:	d512      	bpl.n	8005622 <HAL_ADC_IRQHandler+0x92>
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80055fc:	689a      	ldr	r2, [r3, #8]
 80055fe:	0752      	lsls	r2, r2, #29
 8005600:	f100 8122 	bmi.w	8005848 <HAL_ADC_IRQHandler+0x2b8>
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8005604:	685a      	ldr	r2, [r3, #4]
 8005606:	f022 020c 	bic.w	r2, r2, #12
 800560a:	605a      	str	r2, [r3, #4]
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800560c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800560e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005612:	6423      	str	r3, [r4, #64]	@ 0x40
          if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005614:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005616:	04d8      	lsls	r0, r3, #19
 8005618:	d403      	bmi.n	8005622 <HAL_ADC_IRQHandler+0x92>
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800561a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800561c:	f043 0301 	orr.w	r3, r3, #1
 8005620:	6423      	str	r3, [r4, #64]	@ 0x40
      HAL_ADC_ConvCpltCallback(hadc);
 8005622:	4620      	mov	r0, r4
 8005624:	f7ff fe5e 	bl	80052e4 <HAL_ADC_ConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 8005628:	6823      	ldr	r3, [r4, #0]
 800562a:	220c      	movs	r2, #12
 800562c:	601a      	str	r2, [r3, #0]
  if( (((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800562e:	06a9      	lsls	r1, r5, #26
 8005630:	d501      	bpl.n	8005636 <HAL_ADC_IRQHandler+0xa6>
 8005632:	06b2      	lsls	r2, r6, #26
 8005634:	d403      	bmi.n	800563e <HAL_ADC_IRQHandler+0xae>
 8005636:	066b      	lsls	r3, r5, #25
 8005638:	d562      	bpl.n	8005700 <HAL_ADC_IRQHandler+0x170>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS))   )
 800563a:	0670      	lsls	r0, r6, #25
 800563c:	d560      	bpl.n	8005700 <HAL_ADC_IRQHandler+0x170>
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800563e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005640:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8005644:	6423      	str	r3, [r4, #64]	@ 0x40
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8005646:	6823      	ldr	r3, [r4, #0]
 8005648:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800564c:	d003      	beq.n	8005656 <HAL_ADC_IRQHandler+0xc6>
 800564e:	4a6c      	ldr	r2, [pc, #432]	@ (8005800 <HAL_ADC_IRQHandler+0x270>)
 8005650:	4293      	cmp	r3, r2
 8005652:	f040 8102 	bne.w	800585a <HAL_ADC_IRQHandler+0x2ca>
 8005656:	4a6b      	ldr	r2, [pc, #428]	@ (8005804 <HAL_ADC_IRQHandler+0x274>)
 8005658:	6891      	ldr	r1, [r2, #8]
 800565a:	06c9      	lsls	r1, r1, #27
 800565c:	d00c      	beq.n	8005678 <HAL_ADC_IRQHandler+0xe8>
 800565e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005662:	d003      	beq.n	800566c <HAL_ADC_IRQHandler+0xdc>
 8005664:	4966      	ldr	r1, [pc, #408]	@ (8005800 <HAL_ADC_IRQHandler+0x270>)
 8005666:	428b      	cmp	r3, r1
 8005668:	f040 80fc 	bne.w	8005864 <HAL_ADC_IRQHandler+0x2d4>
 800566c:	6892      	ldr	r2, [r2, #8]
 800566e:	f002 021f 	and.w	r2, r2, #31
 8005672:	2a05      	cmp	r2, #5
 8005674:	f040 8108 	bne.w	8005888 <HAL_ADC_IRQHandler+0x2f8>
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8005678:	68da      	ldr	r2, [r3, #12]
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc))
 800567a:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 800567c:	f011 0fc0 	tst.w	r1, #192	@ 0xc0
 8005680:	d138      	bne.n	80056f4 <HAL_ADC_IRQHandler+0x164>
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 8005682:	0191      	lsls	r1, r2, #6
 8005684:	d506      	bpl.n	8005694 <HAL_ADC_IRQHandler+0x104>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 8005686:	68d9      	ldr	r1, [r3, #12]
          (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )   )
 8005688:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 800568c:	f401 6140 	and.w	r1, r1, #3072	@ 0xc00
 8005690:	4311      	orrs	r1, r2
 8005692:	d12f      	bne.n	80056f4 <HAL_ADC_IRQHandler+0x164>
        if((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS)
 8005694:	0668      	lsls	r0, r5, #25
 8005696:	d52d      	bpl.n	80056f4 <HAL_ADC_IRQHandler+0x164>
          if (ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc))
 8005698:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800569c:	d003      	beq.n	80056a6 <HAL_ADC_IRQHandler+0x116>
 800569e:	4a58      	ldr	r2, [pc, #352]	@ (8005800 <HAL_ADC_IRQHandler+0x270>)
 80056a0:	4293      	cmp	r3, r2
 80056a2:	f040 810d 	bne.w	80058c0 <HAL_ADC_IRQHandler+0x330>
 80056a6:	4a57      	ldr	r2, [pc, #348]	@ (8005804 <HAL_ADC_IRQHandler+0x274>)
 80056a8:	6891      	ldr	r1, [r2, #8]
 80056aa:	06c9      	lsls	r1, r1, #27
 80056ac:	d00c      	beq.n	80056c8 <HAL_ADC_IRQHandler+0x138>
 80056ae:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80056b2:	d003      	beq.n	80056bc <HAL_ADC_IRQHandler+0x12c>
 80056b4:	4952      	ldr	r1, [pc, #328]	@ (8005800 <HAL_ADC_IRQHandler+0x270>)
 80056b6:	428b      	cmp	r3, r1
 80056b8:	f040 8107 	bne.w	80058ca <HAL_ADC_IRQHandler+0x33a>
 80056bc:	6892      	ldr	r2, [r2, #8]
 80056be:	f002 021f 	and.w	r2, r2, #31
 80056c2:	2a06      	cmp	r2, #6
 80056c4:	f040 8113 	bne.w	80058ee <HAL_ADC_IRQHandler+0x35e>
            tmp_cfgr_jqm = READ_REG(hadc->Instance->CFGR); 
 80056c8:	68da      	ldr	r2, [r3, #12]
          if(READ_BIT(tmp_cfgr_jqm, ADC_CFGR_JQM) == RESET)
 80056ca:	0291      	lsls	r1, r2, #10
 80056cc:	d412      	bmi.n	80056f4 <HAL_ADC_IRQHandler+0x164>
            if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 80056ce:	689a      	ldr	r2, [r3, #8]
 80056d0:	0712      	lsls	r2, r2, #28
 80056d2:	f100 8128 	bmi.w	8005926 <HAL_ADC_IRQHandler+0x396>
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80056d6:	685a      	ldr	r2, [r3, #4]
 80056d8:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80056dc:	605a      	str	r2, [r3, #4]
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80056de:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80056e0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80056e4:	6423      	str	r3, [r4, #64]	@ 0x40
              if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80056e6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80056e8:	05d8      	lsls	r0, r3, #23
 80056ea:	d403      	bmi.n	80056f4 <HAL_ADC_IRQHandler+0x164>
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80056ec:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80056ee:	f043 0301 	orr.w	r3, r3, #1
 80056f2:	6423      	str	r3, [r4, #64]	@ 0x40
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80056f4:	4620      	mov	r0, r4
 80056f6:	f7ff ff47 	bl	8005588 <HAL_ADCEx_InjectedConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80056fa:	6823      	ldr	r3, [r4, #0]
 80056fc:	2260      	movs	r2, #96	@ 0x60
 80056fe:	601a      	str	r2, [r3, #0]
  if(((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8005700:	0629      	lsls	r1, r5, #24
 8005702:	d50b      	bpl.n	800571c <HAL_ADC_IRQHandler+0x18c>
 8005704:	0632      	lsls	r2, r6, #24
 8005706:	d509      	bpl.n	800571c <HAL_ADC_IRQHandler+0x18c>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8005708:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800570a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800570e:	6423      	str	r3, [r4, #64]	@ 0x40
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8005710:	4620      	mov	r0, r4
 8005712:	f7ff fde8 	bl	80052e6 <HAL_ADC_LevelOutOfWindowCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8005716:	6823      	ldr	r3, [r4, #0]
 8005718:	2280      	movs	r2, #128	@ 0x80
 800571a:	601a      	str	r2, [r3, #0]
  if(((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 800571c:	05eb      	lsls	r3, r5, #23
 800571e:	d50c      	bpl.n	800573a <HAL_ADC_IRQHandler+0x1aa>
 8005720:	05f0      	lsls	r0, r6, #23
 8005722:	d50a      	bpl.n	800573a <HAL_ADC_IRQHandler+0x1aa>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8005724:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005726:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800572a:	6423      	str	r3, [r4, #64]	@ 0x40
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 800572c:	4620      	mov	r0, r4
 800572e:	f7ff ff2d 	bl	800558c <HAL_ADCEx_LevelOutOfWindow2Callback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8005732:	6823      	ldr	r3, [r4, #0]
 8005734:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005738:	601a      	str	r2, [r3, #0]
  if(((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 800573a:	05a9      	lsls	r1, r5, #22
 800573c:	d50c      	bpl.n	8005758 <HAL_ADC_IRQHandler+0x1c8>
 800573e:	05b2      	lsls	r2, r6, #22
 8005740:	d50a      	bpl.n	8005758 <HAL_ADC_IRQHandler+0x1c8>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8005742:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005744:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005748:	6423      	str	r3, [r4, #64]	@ 0x40
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 800574a:	4620      	mov	r0, r4
 800574c:	f7ff ff1f 	bl	800558e <HAL_ADCEx_LevelOutOfWindow3Callback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8005750:	6823      	ldr	r3, [r4, #0]
 8005752:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005756:	601a      	str	r2, [r3, #0]
  if(((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8005758:	06eb      	lsls	r3, r5, #27
 800575a:	d525      	bpl.n	80057a8 <HAL_ADC_IRQHandler+0x218>
 800575c:	06f0      	lsls	r0, r6, #27
 800575e:	d523      	bpl.n	80057a8 <HAL_ADC_IRQHandler+0x218>
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8005760:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005762:	2b01      	cmp	r3, #1
 8005764:	d012      	beq.n	800578c <HAL_ADC_IRQHandler+0x1fc>
      tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005766:	6822      	ldr	r2, [r4, #0]
 8005768:	f1b2 4fa0 	cmp.w	r2, #1342177280	@ 0x50000000
 800576c:	f000 80e4 	beq.w	8005938 <HAL_ADC_IRQHandler+0x3a8>
 8005770:	4823      	ldr	r0, [pc, #140]	@ (8005800 <HAL_ADC_IRQHandler+0x270>)
 8005772:	4b25      	ldr	r3, [pc, #148]	@ (8005808 <HAL_ADC_IRQHandler+0x278>)
 8005774:	4923      	ldr	r1, [pc, #140]	@ (8005804 <HAL_ADC_IRQHandler+0x274>)
 8005776:	4282      	cmp	r2, r0
 8005778:	bf08      	it	eq
 800577a:	460b      	moveq	r3, r1
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 800577c:	6899      	ldr	r1, [r3, #8]
 800577e:	06c9      	lsls	r1, r1, #27
 8005780:	f040 80dc 	bne.w	800593c <HAL_ADC_IRQHandler+0x3ac>
        if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8005784:	68d3      	ldr	r3, [r2, #12]
 8005786:	f013 0f01 	tst.w	r3, #1
        if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 800578a:	d00a      	beq.n	80057a2 <HAL_ADC_IRQHandler+0x212>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 800578c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800578e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005792:	6423      	str	r3, [r4, #64]	@ 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8005794:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8005796:	f043 0302 	orr.w	r3, r3, #2
 800579a:	6463      	str	r3, [r4, #68]	@ 0x44
      HAL_ADC_ErrorCallback(hadc);
 800579c:	4620      	mov	r0, r4
 800579e:	f7ff fda3 	bl	80052e8 <HAL_ADC_ErrorCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80057a2:	6823      	ldr	r3, [r4, #0]
 80057a4:	2210      	movs	r2, #16
 80057a6:	601a      	str	r2, [r3, #0]
  if(((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 80057a8:	056a      	lsls	r2, r5, #21
 80057aa:	d510      	bpl.n	80057ce <HAL_ADC_IRQHandler+0x23e>
 80057ac:	0573      	lsls	r3, r6, #21
 80057ae:	d50e      	bpl.n	80057ce <HAL_ADC_IRQHandler+0x23e>
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80057b0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80057b2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80057b6:	6423      	str	r3, [r4, #64]	@ 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80057b8:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 80057ba:	f043 0308 	orr.w	r3, r3, #8
 80057be:	6463      	str	r3, [r4, #68]	@ 0x44
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80057c0:	6823      	ldr	r3, [r4, #0]
 80057c2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80057c6:	601a      	str	r2, [r3, #0]
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80057c8:	4620      	mov	r0, r4
 80057ca:	f7ff fede 	bl	800558a <HAL_ADCEx_InjectedQueueOverflowCallback>
}
 80057ce:	bd70      	pop	{r4, r5, r6, pc}
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 80057d0:	4a0d      	ldr	r2, [pc, #52]	@ (8005808 <HAL_ADC_IRQHandler+0x278>)
 80057d2:	6892      	ldr	r2, [r2, #8]
 80057d4:	06d0      	lsls	r0, r2, #27
 80057d6:	f43f af07 	beq.w	80055e8 <HAL_ADC_IRQHandler+0x58>
 80057da:	4a0b      	ldr	r2, [pc, #44]	@ (8005808 <HAL_ADC_IRQHandler+0x278>)
 80057dc:	6892      	ldr	r2, [r2, #8]
 80057de:	f002 021f 	and.w	r2, r2, #31
 80057e2:	2a05      	cmp	r2, #5
 80057e4:	f43f af00 	beq.w	80055e8 <HAL_ADC_IRQHandler+0x58>
 80057e8:	4a07      	ldr	r2, [pc, #28]	@ (8005808 <HAL_ADC_IRQHandler+0x278>)
 80057ea:	6892      	ldr	r2, [r2, #8]
 80057ec:	f002 021f 	and.w	r2, r2, #31
 80057f0:	2a09      	cmp	r2, #9
 80057f2:	f43f aef9 	beq.w	80055e8 <HAL_ADC_IRQHandler+0x58>
 80057f6:	4a05      	ldr	r2, [pc, #20]	@ (800580c <HAL_ADC_IRQHandler+0x27c>)
 80057f8:	4293      	cmp	r3, r2
 80057fa:	d123      	bne.n	8005844 <HAL_ADC_IRQHandler+0x2b4>
 80057fc:	e6f4      	b.n	80055e8 <HAL_ADC_IRQHandler+0x58>
 80057fe:	bf00      	nop
 8005800:	50000100 	.word	0x50000100
 8005804:	50000300 	.word	0x50000300
 8005808:	50000700 	.word	0x50000700
 800580c:	50000400 	.word	0x50000400
 8005810:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005814:	d002      	beq.n	800581c <HAL_ADC_IRQHandler+0x28c>
 8005816:	4a4b      	ldr	r2, [pc, #300]	@ (8005944 <HAL_ADC_IRQHandler+0x3b4>)
 8005818:	4293      	cmp	r3, r2
 800581a:	d1e5      	bne.n	80057e8 <HAL_ADC_IRQHandler+0x258>
 800581c:	4a4a      	ldr	r2, [pc, #296]	@ (8005948 <HAL_ADC_IRQHandler+0x3b8>)
 800581e:	6892      	ldr	r2, [r2, #8]
 8005820:	f002 021f 	and.w	r2, r2, #31
 8005824:	2a09      	cmp	r2, #9
 8005826:	f43f aedf 	beq.w	80055e8 <HAL_ADC_IRQHandler+0x58>
 800582a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800582e:	f43f aedb 	beq.w	80055e8 <HAL_ADC_IRQHandler+0x58>
 8005832:	4a46      	ldr	r2, [pc, #280]	@ (800594c <HAL_ADC_IRQHandler+0x3bc>)
 8005834:	4293      	cmp	r3, r2
 8005836:	f43f aed7 	beq.w	80055e8 <HAL_ADC_IRQHandler+0x58>
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 800583a:	4942      	ldr	r1, [pc, #264]	@ (8005944 <HAL_ADC_IRQHandler+0x3b4>)
 800583c:	428b      	cmp	r3, r1
 800583e:	bf08      	it	eq
 8005840:	f04f 42a0 	moveq.w	r2, #1342177280	@ 0x50000000
 8005844:	68d2      	ldr	r2, [r2, #12]
 8005846:	e6d0      	b.n	80055ea <HAL_ADC_IRQHandler+0x5a>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005848:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800584a:	f043 0310 	orr.w	r3, r3, #16
 800584e:	6423      	str	r3, [r4, #64]	@ 0x40
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005850:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8005852:	f043 0301 	orr.w	r3, r3, #1
 8005856:	6463      	str	r3, [r4, #68]	@ 0x44
 8005858:	e6e3      	b.n	8005622 <HAL_ADC_IRQHandler+0x92>
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 800585a:	4a3d      	ldr	r2, [pc, #244]	@ (8005950 <HAL_ADC_IRQHandler+0x3c0>)
 800585c:	6892      	ldr	r2, [r2, #8]
 800585e:	06d0      	lsls	r0, r2, #27
 8005860:	f43f af0a 	beq.w	8005678 <HAL_ADC_IRQHandler+0xe8>
 8005864:	4a3a      	ldr	r2, [pc, #232]	@ (8005950 <HAL_ADC_IRQHandler+0x3c0>)
 8005866:	6892      	ldr	r2, [r2, #8]
 8005868:	f002 021f 	and.w	r2, r2, #31
 800586c:	2a05      	cmp	r2, #5
 800586e:	f43f af03 	beq.w	8005678 <HAL_ADC_IRQHandler+0xe8>
 8005872:	4a37      	ldr	r2, [pc, #220]	@ (8005950 <HAL_ADC_IRQHandler+0x3c0>)
 8005874:	6892      	ldr	r2, [r2, #8]
 8005876:	f002 021f 	and.w	r2, r2, #31
 800587a:	2a09      	cmp	r2, #9
 800587c:	f43f aefc 	beq.w	8005678 <HAL_ADC_IRQHandler+0xe8>
 8005880:	4a32      	ldr	r2, [pc, #200]	@ (800594c <HAL_ADC_IRQHandler+0x3bc>)
 8005882:	4293      	cmp	r3, r2
 8005884:	d11a      	bne.n	80058bc <HAL_ADC_IRQHandler+0x32c>
 8005886:	e6f7      	b.n	8005678 <HAL_ADC_IRQHandler+0xe8>
 8005888:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800588c:	d002      	beq.n	8005894 <HAL_ADC_IRQHandler+0x304>
 800588e:	4a2d      	ldr	r2, [pc, #180]	@ (8005944 <HAL_ADC_IRQHandler+0x3b4>)
 8005890:	4293      	cmp	r3, r2
 8005892:	d1ee      	bne.n	8005872 <HAL_ADC_IRQHandler+0x2e2>
 8005894:	4a2c      	ldr	r2, [pc, #176]	@ (8005948 <HAL_ADC_IRQHandler+0x3b8>)
 8005896:	6892      	ldr	r2, [r2, #8]
 8005898:	f002 021f 	and.w	r2, r2, #31
 800589c:	2a09      	cmp	r2, #9
 800589e:	f43f aeeb 	beq.w	8005678 <HAL_ADC_IRQHandler+0xe8>
 80058a2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80058a6:	f43f aee7 	beq.w	8005678 <HAL_ADC_IRQHandler+0xe8>
 80058aa:	4a28      	ldr	r2, [pc, #160]	@ (800594c <HAL_ADC_IRQHandler+0x3bc>)
 80058ac:	4293      	cmp	r3, r2
 80058ae:	f43f aee3 	beq.w	8005678 <HAL_ADC_IRQHandler+0xe8>
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 80058b2:	4924      	ldr	r1, [pc, #144]	@ (8005944 <HAL_ADC_IRQHandler+0x3b4>)
 80058b4:	428b      	cmp	r3, r1
 80058b6:	bf08      	it	eq
 80058b8:	f04f 42a0 	moveq.w	r2, #1342177280	@ 0x50000000
 80058bc:	68d2      	ldr	r2, [r2, #12]
 80058be:	e6dc      	b.n	800567a <HAL_ADC_IRQHandler+0xea>
          if (ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc))
 80058c0:	4a23      	ldr	r2, [pc, #140]	@ (8005950 <HAL_ADC_IRQHandler+0x3c0>)
 80058c2:	6892      	ldr	r2, [r2, #8]
 80058c4:	06d0      	lsls	r0, r2, #27
 80058c6:	f43f aeff 	beq.w	80056c8 <HAL_ADC_IRQHandler+0x138>
 80058ca:	4a21      	ldr	r2, [pc, #132]	@ (8005950 <HAL_ADC_IRQHandler+0x3c0>)
 80058cc:	6892      	ldr	r2, [r2, #8]
 80058ce:	f002 021f 	and.w	r2, r2, #31
 80058d2:	2a06      	cmp	r2, #6
 80058d4:	f43f aef8 	beq.w	80056c8 <HAL_ADC_IRQHandler+0x138>
 80058d8:	4a1d      	ldr	r2, [pc, #116]	@ (8005950 <HAL_ADC_IRQHandler+0x3c0>)
 80058da:	6892      	ldr	r2, [r2, #8]
 80058dc:	f002 021f 	and.w	r2, r2, #31
 80058e0:	2a07      	cmp	r2, #7
 80058e2:	f43f aef1 	beq.w	80056c8 <HAL_ADC_IRQHandler+0x138>
 80058e6:	4a19      	ldr	r2, [pc, #100]	@ (800594c <HAL_ADC_IRQHandler+0x3bc>)
 80058e8:	4293      	cmp	r3, r2
 80058ea:	d11a      	bne.n	8005922 <HAL_ADC_IRQHandler+0x392>
 80058ec:	e6ec      	b.n	80056c8 <HAL_ADC_IRQHandler+0x138>
 80058ee:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80058f2:	d002      	beq.n	80058fa <HAL_ADC_IRQHandler+0x36a>
 80058f4:	4a13      	ldr	r2, [pc, #76]	@ (8005944 <HAL_ADC_IRQHandler+0x3b4>)
 80058f6:	4293      	cmp	r3, r2
 80058f8:	d1ee      	bne.n	80058d8 <HAL_ADC_IRQHandler+0x348>
 80058fa:	4a13      	ldr	r2, [pc, #76]	@ (8005948 <HAL_ADC_IRQHandler+0x3b8>)
 80058fc:	6892      	ldr	r2, [r2, #8]
 80058fe:	f002 021f 	and.w	r2, r2, #31
 8005902:	2a07      	cmp	r2, #7
 8005904:	f43f aee0 	beq.w	80056c8 <HAL_ADC_IRQHandler+0x138>
 8005908:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800590c:	f43f aedc 	beq.w	80056c8 <HAL_ADC_IRQHandler+0x138>
 8005910:	4a0e      	ldr	r2, [pc, #56]	@ (800594c <HAL_ADC_IRQHandler+0x3bc>)
 8005912:	4293      	cmp	r3, r2
 8005914:	f43f aed8 	beq.w	80056c8 <HAL_ADC_IRQHandler+0x138>
            tmp_cfgr_jqm = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8005918:	490a      	ldr	r1, [pc, #40]	@ (8005944 <HAL_ADC_IRQHandler+0x3b4>)
 800591a:	428b      	cmp	r3, r1
 800591c:	bf08      	it	eq
 800591e:	f04f 42a0 	moveq.w	r2, #1342177280	@ 0x50000000
 8005922:	68d2      	ldr	r2, [r2, #12]
 8005924:	e6d1      	b.n	80056ca <HAL_ADC_IRQHandler+0x13a>
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005926:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005928:	f043 0310 	orr.w	r3, r3, #16
 800592c:	6423      	str	r3, [r4, #64]	@ 0x40
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800592e:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8005930:	f043 0301 	orr.w	r3, r3, #1
 8005934:	6463      	str	r3, [r4, #68]	@ 0x44
 8005936:	e6dd      	b.n	80056f4 <HAL_ADC_IRQHandler+0x164>
      tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005938:	4b03      	ldr	r3, [pc, #12]	@ (8005948 <HAL_ADC_IRQHandler+0x3b8>)
 800593a:	e71f      	b.n	800577c <HAL_ADC_IRQHandler+0x1ec>
        if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 800593c:	689b      	ldr	r3, [r3, #8]
 800593e:	f413 4f40 	tst.w	r3, #49152	@ 0xc000
 8005942:	e722      	b.n	800578a <HAL_ADC_IRQHandler+0x1fa>
 8005944:	50000100 	.word	0x50000100
 8005948:	50000300 	.word	0x50000300
 800594c:	50000400 	.word	0x50000400
 8005950:	50000700 	.word	0x50000700

08005954 <HAL_ADC_ConfigChannel>:
{
 8005954:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005956:	4605      	mov	r5, r0
  __IO uint32_t wait_loop_index = 0U;
 8005958:	2300      	movs	r3, #0
 800595a:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 800595c:	f895 303c 	ldrb.w	r3, [r5, #60]	@ 0x3c
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8005960:	68c8      	ldr	r0, [r1, #12]
  __HAL_LOCK(hadc);
 8005962:	2b01      	cmp	r3, #1
 8005964:	f000 816a 	beq.w	8005c3c <HAL_ADC_ConfigChannel+0x2e8>
 8005968:	2301      	movs	r3, #1
 800596a:	f885 303c 	strb.w	r3, [r5, #60]	@ 0x3c
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800596e:	682b      	ldr	r3, [r5, #0]
 8005970:	689a      	ldr	r2, [r3, #8]
 8005972:	0757      	lsls	r7, r2, #29
 8005974:	f100 815c 	bmi.w	8005c30 <HAL_ADC_ConfigChannel+0x2dc>
    if (sConfig->Rank < 5U)
 8005978:	684e      	ldr	r6, [r1, #4]
      MODIFY_REG(hadc->Instance->SQR1,
 800597a:	680c      	ldr	r4, [r1, #0]
 800597c:	2206      	movs	r2, #6
    if (sConfig->Rank < 5U)
 800597e:	2e04      	cmp	r6, #4
      MODIFY_REG(hadc->Instance->SQR1,
 8005980:	fb06 f202 	mul.w	r2, r6, r2
    if (sConfig->Rank < 5U)
 8005984:	d82c      	bhi.n	80059e0 <HAL_ADC_ConfigChannel+0x8c>
      MODIFY_REG(hadc->Instance->SQR1,
 8005986:	6b1e      	ldr	r6, [r3, #48]	@ 0x30
 8005988:	271f      	movs	r7, #31
 800598a:	4097      	lsls	r7, r2
 800598c:	ea26 0607 	bic.w	r6, r6, r7
 8005990:	fa04 f202 	lsl.w	r2, r4, r2
 8005994:	4332      	orrs	r2, r6
 8005996:	631a      	str	r2, [r3, #48]	@ 0x30
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8005998:	689a      	ldr	r2, [r3, #8]
 800599a:	f012 0f0c 	tst.w	r2, #12
 800599e:	d158      	bne.n	8005a52 <HAL_ADC_ConfigChannel+0xfe>
    if (sConfig->Channel >= ADC_CHANNEL_10)
 80059a0:	2c09      	cmp	r4, #9
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 80059a2:	f8d1 c008 	ldr.w	ip, [r1, #8]
 80059a6:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 80059aa:	f04f 0607 	mov.w	r6, #7
    if (sConfig->Channel >= ADC_CHANNEL_10)
 80059ae:	d93c      	bls.n	8005a2a <HAL_ADC_ConfigChannel+0xd6>
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 80059b0:	699f      	ldr	r7, [r3, #24]
 80059b2:	3a1e      	subs	r2, #30
 80059b4:	4096      	lsls	r6, r2
 80059b6:	ea27 0606 	bic.w	r6, r7, r6
 80059ba:	fa0c f202 	lsl.w	r2, ip, r2
 80059be:	4332      	orrs	r2, r6
 80059c0:	619a      	str	r2, [r3, #24]
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 80059c2:	68da      	ldr	r2, [r3, #12]
 80059c4:	694e      	ldr	r6, [r1, #20]
 80059c6:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 80059ca:	0052      	lsls	r2, r2, #1
 80059cc:	4096      	lsls	r6, r2
    switch (sConfig->OffsetNumber)
 80059ce:	690a      	ldr	r2, [r1, #16]
 80059d0:	3a01      	subs	r2, #1
      MODIFY_REG(hadc->Instance->OFR1               ,
 80059d2:	06a7      	lsls	r7, r4, #26
    switch (sConfig->OffsetNumber)
 80059d4:	2a03      	cmp	r2, #3
 80059d6:	d86b      	bhi.n	8005ab0 <HAL_ADC_ConfigChannel+0x15c>
 80059d8:	e8df f002 	tbb	[pc, r2]
 80059dc:	5f544931 	.word	0x5f544931
    else if (sConfig->Rank < 10U)
 80059e0:	2e09      	cmp	r6, #9
 80059e2:	d80a      	bhi.n	80059fa <HAL_ADC_ConfigChannel+0xa6>
      MODIFY_REG(hadc->Instance->SQR2,
 80059e4:	6b5e      	ldr	r6, [r3, #52]	@ 0x34
 80059e6:	3a1e      	subs	r2, #30
 80059e8:	271f      	movs	r7, #31
 80059ea:	4097      	lsls	r7, r2
 80059ec:	ea26 0607 	bic.w	r6, r6, r7
 80059f0:	fa04 f202 	lsl.w	r2, r4, r2
 80059f4:	4332      	orrs	r2, r6
 80059f6:	635a      	str	r2, [r3, #52]	@ 0x34
 80059f8:	e7ce      	b.n	8005998 <HAL_ADC_ConfigChannel+0x44>
    else if (sConfig->Rank < 15U)
 80059fa:	2e0e      	cmp	r6, #14
 80059fc:	f04f 061f 	mov.w	r6, #31
 8005a00:	d809      	bhi.n	8005a16 <HAL_ADC_ConfigChannel+0xc2>
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8005a02:	6b9f      	ldr	r7, [r3, #56]	@ 0x38
 8005a04:	3a3c      	subs	r2, #60	@ 0x3c
 8005a06:	4096      	lsls	r6, r2
 8005a08:	ea27 0606 	bic.w	r6, r7, r6
 8005a0c:	fa04 f202 	lsl.w	r2, r4, r2
 8005a10:	4332      	orrs	r2, r6
 8005a12:	639a      	str	r2, [r3, #56]	@ 0x38
 8005a14:	e7c0      	b.n	8005998 <HAL_ADC_ConfigChannel+0x44>
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8005a16:	6bdf      	ldr	r7, [r3, #60]	@ 0x3c
 8005a18:	3a5a      	subs	r2, #90	@ 0x5a
 8005a1a:	4096      	lsls	r6, r2
 8005a1c:	ea27 0606 	bic.w	r6, r7, r6
 8005a20:	fa04 f202 	lsl.w	r2, r4, r2
 8005a24:	4332      	orrs	r2, r6
 8005a26:	63da      	str	r2, [r3, #60]	@ 0x3c
 8005a28:	e7b6      	b.n	8005998 <HAL_ADC_ConfigChannel+0x44>
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8005a2a:	695f      	ldr	r7, [r3, #20]
 8005a2c:	4096      	lsls	r6, r2
 8005a2e:	ea27 0606 	bic.w	r6, r7, r6
 8005a32:	fa0c fc02 	lsl.w	ip, ip, r2
 8005a36:	ea46 060c 	orr.w	r6, r6, ip
 8005a3a:	615e      	str	r6, [r3, #20]
 8005a3c:	e7c1      	b.n	80059c2 <HAL_ADC_ConfigChannel+0x6e>
      MODIFY_REG(hadc->Instance->OFR1               ,
 8005a3e:	f8d3 c060 	ldr.w	ip, [r3, #96]	@ 0x60
 8005a42:	4a7f      	ldr	r2, [pc, #508]	@ (8005c40 <HAL_ADC_ConfigChannel+0x2ec>)
 8005a44:	ea0c 0202 	and.w	r2, ip, r2
 8005a48:	433a      	orrs	r2, r7
 8005a4a:	4332      	orrs	r2, r6
 8005a4c:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8005a50:	661a      	str	r2, [r3, #96]	@ 0x60
  if (ADC_IS_ENABLE(hadc) == RESET)
 8005a52:	689a      	ldr	r2, [r3, #8]
 8005a54:	f002 0203 	and.w	r2, r2, #3
 8005a58:	2a01      	cmp	r2, #1
 8005a5a:	d14d      	bne.n	8005af8 <HAL_ADC_ConfigChannel+0x1a4>
 8005a5c:	681a      	ldr	r2, [r3, #0]
 8005a5e:	07d6      	lsls	r6, r2, #31
 8005a60:	d54a      	bpl.n	8005af8 <HAL_ADC_ConfigChannel+0x1a4>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005a62:	2000      	movs	r0, #0
  __HAL_UNLOCK(hadc);
 8005a64:	2300      	movs	r3, #0
 8005a66:	f885 303c 	strb.w	r3, [r5, #60]	@ 0x3c
}
 8005a6a:	b003      	add	sp, #12
 8005a6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      MODIFY_REG(hadc->Instance->OFR2               ,
 8005a6e:	f8d3 c064 	ldr.w	ip, [r3, #100]	@ 0x64
 8005a72:	4a73      	ldr	r2, [pc, #460]	@ (8005c40 <HAL_ADC_ConfigChannel+0x2ec>)
 8005a74:	ea0c 0202 	and.w	r2, ip, r2
 8005a78:	433a      	orrs	r2, r7
 8005a7a:	4332      	orrs	r2, r6
 8005a7c:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8005a80:	665a      	str	r2, [r3, #100]	@ 0x64
      break;
 8005a82:	e7e6      	b.n	8005a52 <HAL_ADC_ConfigChannel+0xfe>
      MODIFY_REG(hadc->Instance->OFR3               ,
 8005a84:	f8d3 c068 	ldr.w	ip, [r3, #104]	@ 0x68
 8005a88:	4a6d      	ldr	r2, [pc, #436]	@ (8005c40 <HAL_ADC_ConfigChannel+0x2ec>)
 8005a8a:	ea0c 0202 	and.w	r2, ip, r2
 8005a8e:	433a      	orrs	r2, r7
 8005a90:	4332      	orrs	r2, r6
 8005a92:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8005a96:	669a      	str	r2, [r3, #104]	@ 0x68
      break;
 8005a98:	e7db      	b.n	8005a52 <HAL_ADC_ConfigChannel+0xfe>
      MODIFY_REG(hadc->Instance->OFR4               ,
 8005a9a:	f8d3 c06c 	ldr.w	ip, [r3, #108]	@ 0x6c
 8005a9e:	4a68      	ldr	r2, [pc, #416]	@ (8005c40 <HAL_ADC_ConfigChannel+0x2ec>)
 8005aa0:	ea0c 0202 	and.w	r2, ip, r2
 8005aa4:	433a      	orrs	r2, r7
 8005aa6:	4332      	orrs	r2, r6
 8005aa8:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8005aac:	66da      	str	r2, [r3, #108]	@ 0x6c
 8005aae:	e7d0      	b.n	8005a52 <HAL_ADC_ConfigChannel+0xfe>
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005ab0:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8005ab2:	f002 42f8 	and.w	r2, r2, #2080374784	@ 0x7c000000
 8005ab6:	42ba      	cmp	r2, r7
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8005ab8:	bf02      	ittt	eq
 8005aba:	6e1a      	ldreq	r2, [r3, #96]	@ 0x60
 8005abc:	f022 4200 	biceq.w	r2, r2, #2147483648	@ 0x80000000
 8005ac0:	661a      	streq	r2, [r3, #96]	@ 0x60
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005ac2:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8005ac4:	f002 42f8 	and.w	r2, r2, #2080374784	@ 0x7c000000
 8005ac8:	42ba      	cmp	r2, r7
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8005aca:	bf02      	ittt	eq
 8005acc:	6e5a      	ldreq	r2, [r3, #100]	@ 0x64
 8005ace:	f022 4200 	biceq.w	r2, r2, #2147483648	@ 0x80000000
 8005ad2:	665a      	streq	r2, [r3, #100]	@ 0x64
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005ad4:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8005ad6:	f002 42f8 	and.w	r2, r2, #2080374784	@ 0x7c000000
 8005ada:	42ba      	cmp	r2, r7
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8005adc:	bf02      	ittt	eq
 8005ade:	6e9a      	ldreq	r2, [r3, #104]	@ 0x68
 8005ae0:	f022 4200 	biceq.w	r2, r2, #2147483648	@ 0x80000000
 8005ae4:	669a      	streq	r2, [r3, #104]	@ 0x68
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005ae6:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8005ae8:	f002 42f8 	and.w	r2, r2, #2080374784	@ 0x7c000000
 8005aec:	42ba      	cmp	r2, r7
 8005aee:	d1b0      	bne.n	8005a52 <HAL_ADC_ConfigChannel+0xfe>
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8005af0:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8005af2:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8005af6:	e7d9      	b.n	8005aac <HAL_ADC_ConfigChannel+0x158>
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8005af8:	2201      	movs	r2, #1
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8005afa:	2801      	cmp	r0, #1
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8005afc:	fa02 f204 	lsl.w	r2, r2, r4
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8005b00:	d047      	beq.n	8005b92 <HAL_ADC_ConfigChannel+0x23e>
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8005b02:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 8005b06:	ea21 0202 	bic.w	r2, r1, r2
 8005b0a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005b0e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005b12:	d164      	bne.n	8005bde <HAL_ADC_ConfigChannel+0x28a>
 8005b14:	494b      	ldr	r1, [pc, #300]	@ (8005c44 <HAL_ADC_ConfigChannel+0x2f0>)
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8005b16:	2c10      	cmp	r4, #16
 8005b18:	d166      	bne.n	8005be8 <HAL_ADC_ConfigChannel+0x294>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8005b1a:	688a      	ldr	r2, [r1, #8]
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8005b1c:	f412 0f00 	tst.w	r2, #8388608	@ 0x800000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8005b20:	d19f      	bne.n	8005a62 <HAL_ADC_ConfigChannel+0x10e>
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8005b22:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005b26:	4a48      	ldr	r2, [pc, #288]	@ (8005c48 <HAL_ADC_ConfigChannel+0x2f4>)
 8005b28:	d009      	beq.n	8005b3e <HAL_ADC_ConfigChannel+0x1ea>
 8005b2a:	4293      	cmp	r3, r2
 8005b2c:	d069      	beq.n	8005c02 <HAL_ADC_ConfigChannel+0x2ae>
 8005b2e:	f502 7240 	add.w	r2, r2, #768	@ 0x300
 8005b32:	4293      	cmp	r3, r2
 8005b34:	4845      	ldr	r0, [pc, #276]	@ (8005c4c <HAL_ADC_ConfigChannel+0x2f8>)
 8005b36:	d067      	beq.n	8005c08 <HAL_ADC_ConfigChannel+0x2b4>
 8005b38:	4283      	cmp	r3, r0
 8005b3a:	bf18      	it	ne
 8005b3c:	2200      	movne	r2, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8005b3e:	6898      	ldr	r0, [r3, #8]
 8005b40:	f000 0003 	and.w	r0, r0, #3
 8005b44:	2801      	cmp	r0, #1
 8005b46:	d102      	bne.n	8005b4e <HAL_ADC_ConfigChannel+0x1fa>
 8005b48:	6818      	ldr	r0, [r3, #0]
 8005b4a:	07c0      	lsls	r0, r0, #31
 8005b4c:	d470      	bmi.n	8005c30 <HAL_ADC_ConfigChannel+0x2dc>
 8005b4e:	b13a      	cbz	r2, 8005b60 <HAL_ADC_ConfigChannel+0x20c>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8005b50:	6890      	ldr	r0, [r2, #8]
 8005b52:	f000 0003 	and.w	r0, r0, #3
 8005b56:	2801      	cmp	r0, #1
 8005b58:	d102      	bne.n	8005b60 <HAL_ADC_ConfigChannel+0x20c>
 8005b5a:	6812      	ldr	r2, [r2, #0]
 8005b5c:	07d2      	lsls	r2, r2, #31
 8005b5e:	d467      	bmi.n	8005c30 <HAL_ADC_ConfigChannel+0x2dc>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8005b60:	2c10      	cmp	r4, #16
 8005b62:	d153      	bne.n	8005c0c <HAL_ADC_ConfigChannel+0x2b8>
 8005b64:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005b68:	f47f af7b 	bne.w	8005a62 <HAL_ADC_ConfigChannel+0x10e>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8005b6c:	688b      	ldr	r3, [r1, #8]
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8005b6e:	4a38      	ldr	r2, [pc, #224]	@ (8005c50 <HAL_ADC_ConfigChannel+0x2fc>)
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8005b70:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005b74:	608b      	str	r3, [r1, #8]
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8005b76:	4b37      	ldr	r3, [pc, #220]	@ (8005c54 <HAL_ADC_ConfigChannel+0x300>)
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	fbb3 f3f2 	udiv	r3, r3, r2
 8005b7e:	220a      	movs	r2, #10
 8005b80:	4353      	muls	r3, r2
            wait_loop_index--;
 8005b82:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 8005b84:	9b01      	ldr	r3, [sp, #4]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	f43f af6b 	beq.w	8005a62 <HAL_ADC_ConfigChannel+0x10e>
            wait_loop_index--;
 8005b8c:	9b01      	ldr	r3, [sp, #4]
 8005b8e:	3b01      	subs	r3, #1
 8005b90:	e7f7      	b.n	8005b82 <HAL_ADC_ConfigChannel+0x22e>
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8005b92:	f8d3 00b0 	ldr.w	r0, [r3, #176]	@ 0xb0
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8005b96:	2c09      	cmp	r4, #9
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8005b98:	ea42 0200 	orr.w	r2, r2, r0
 8005b9c:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8005ba0:	6888      	ldr	r0, [r1, #8]
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8005ba2:	d90c      	bls.n	8005bbe <HAL_ADC_ConfigChannel+0x26a>
        MODIFY_REG(hadc->Instance->SMPR2,
 8005ba4:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 8005ba8:	6999      	ldr	r1, [r3, #24]
 8005baa:	3a1b      	subs	r2, #27
 8005bac:	2607      	movs	r6, #7
 8005bae:	4096      	lsls	r6, r2
 8005bb0:	ea21 0106 	bic.w	r1, r1, r6
 8005bb4:	fa00 f202 	lsl.w	r2, r0, r2
 8005bb8:	430a      	orrs	r2, r1
 8005bba:	619a      	str	r2, [r3, #24]
 8005bbc:	e7a7      	b.n	8005b0e <HAL_ADC_ConfigChannel+0x1ba>
        MODIFY_REG(hadc->Instance->SMPR1,
 8005bbe:	1c61      	adds	r1, r4, #1
 8005bc0:	695a      	ldr	r2, [r3, #20]
 8005bc2:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8005bc6:	2607      	movs	r6, #7
 8005bc8:	408e      	lsls	r6, r1
 8005bca:	ea22 0206 	bic.w	r2, r2, r6
 8005bce:	fa00 f101 	lsl.w	r1, r0, r1
 8005bd2:	430a      	orrs	r2, r1
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005bd4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
        MODIFY_REG(hadc->Instance->SMPR1,
 8005bd8:	615a      	str	r2, [r3, #20]
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005bda:	f43f af42 	beq.w	8005a62 <HAL_ADC_ConfigChannel+0x10e>
 8005bde:	4a1a      	ldr	r2, [pc, #104]	@ (8005c48 <HAL_ADC_ConfigChannel+0x2f4>)
 8005be0:	4293      	cmp	r3, r2
 8005be2:	d097      	beq.n	8005b14 <HAL_ADC_ConfigChannel+0x1c0>
 8005be4:	491c      	ldr	r1, [pc, #112]	@ (8005c58 <HAL_ADC_ConfigChannel+0x304>)
 8005be6:	e796      	b.n	8005b16 <HAL_ADC_ConfigChannel+0x1c2>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8005be8:	2c11      	cmp	r4, #17
 8005bea:	d103      	bne.n	8005bf4 <HAL_ADC_ConfigChannel+0x2a0>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8005bec:	688a      	ldr	r2, [r1, #8]
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8005bee:	f012 7f80 	tst.w	r2, #16777216	@ 0x1000000
 8005bf2:	e795      	b.n	8005b20 <HAL_ADC_ConfigChannel+0x1cc>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8005bf4:	2c12      	cmp	r4, #18
 8005bf6:	f47f af34 	bne.w	8005a62 <HAL_ADC_ConfigChannel+0x10e>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8005bfa:	688a      	ldr	r2, [r1, #8]
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8005bfc:	f412 0f80 	tst.w	r2, #4194304	@ 0x400000
 8005c00:	e78e      	b.n	8005b20 <HAL_ADC_ConfigChannel+0x1cc>
 8005c02:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8005c06:	e79a      	b.n	8005b3e <HAL_ADC_ConfigChannel+0x1ea>
 8005c08:	4602      	mov	r2, r0
 8005c0a:	e798      	b.n	8005b3e <HAL_ADC_ConfigChannel+0x1ea>
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8005c0c:	2c11      	cmp	r4, #17
 8005c0e:	d108      	bne.n	8005c22 <HAL_ADC_ConfigChannel+0x2ce>
 8005c10:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005c14:	f47f af25 	bne.w	8005a62 <HAL_ADC_ConfigChannel+0x10e>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8005c18:	688b      	ldr	r3, [r1, #8]
 8005c1a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8005c1e:	608b      	str	r3, [r1, #8]
 8005c20:	e71f      	b.n	8005a62 <HAL_ADC_ConfigChannel+0x10e>
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8005c22:	2c12      	cmp	r4, #18
 8005c24:	f47f af1d 	bne.w	8005a62 <HAL_ADC_ConfigChannel+0x10e>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8005c28:	688b      	ldr	r3, [r1, #8]
 8005c2a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8005c2e:	e7f6      	b.n	8005c1e <HAL_ADC_ConfigChannel+0x2ca>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005c30:	6c2b      	ldr	r3, [r5, #64]	@ 0x40
 8005c32:	f043 0320 	orr.w	r3, r3, #32
 8005c36:	642b      	str	r3, [r5, #64]	@ 0x40
    tmp_hal_status = HAL_ERROR;
 8005c38:	2001      	movs	r0, #1
 8005c3a:	e713      	b.n	8005a64 <HAL_ADC_ConfigChannel+0x110>
  __HAL_LOCK(hadc);
 8005c3c:	2002      	movs	r0, #2
 8005c3e:	e714      	b.n	8005a6a <HAL_ADC_ConfigChannel+0x116>
 8005c40:	83fff000 	.word	0x83fff000
 8005c44:	50000300 	.word	0x50000300
 8005c48:	50000100 	.word	0x50000100
 8005c4c:	50000500 	.word	0x50000500
 8005c50:	000f4240 	.word	0x000f4240
 8005c54:	20000014 	.word	0x20000014
 8005c58:	50000700 	.word	0x50000700

08005c5c <HAL_ADCEx_MultiModeConfigChannel>:
{
 8005c5c:	b5f0      	push	{r4, r5, r6, r7, lr}
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8005c5e:	6804      	ldr	r4, [r0, #0]
 8005c60:	4b3c      	ldr	r3, [pc, #240]	@ (8005d54 <HAL_ADCEx_MultiModeConfigChannel+0xf8>)
 8005c62:	f1b4 4fa0 	cmp.w	r4, #1342177280	@ 0x50000000
{
 8005c66:	4605      	mov	r5, r0
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8005c68:	d009      	beq.n	8005c7e <HAL_ADCEx_MultiModeConfigChannel+0x22>
 8005c6a:	429c      	cmp	r4, r3
 8005c6c:	d047      	beq.n	8005cfe <HAL_ADCEx_MultiModeConfigChannel+0xa2>
 8005c6e:	4a3a      	ldr	r2, [pc, #232]	@ (8005d58 <HAL_ADCEx_MultiModeConfigChannel+0xfc>)
 8005c70:	4294      	cmp	r4, r2
 8005c72:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005c76:	d002      	beq.n	8005c7e <HAL_ADCEx_MultiModeConfigChannel+0x22>
 8005c78:	429c      	cmp	r4, r3
 8005c7a:	d166      	bne.n	8005d4a <HAL_ADCEx_MultiModeConfigChannel+0xee>
 8005c7c:	4613      	mov	r3, r2
  __HAL_LOCK(hadc);
 8005c7e:	f895 203c 	ldrb.w	r2, [r5, #60]	@ 0x3c
 8005c82:	2a01      	cmp	r2, #1
 8005c84:	d063      	beq.n	8005d4e <HAL_ADCEx_MultiModeConfigChannel+0xf2>
 8005c86:	2201      	movs	r2, #1
  if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8005c88:	6808      	ldr	r0, [r1, #0]
  __HAL_LOCK(hadc);
 8005c8a:	f885 203c 	strb.w	r2, [r5, #60]	@ 0x3c
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8005c8e:	68a2      	ldr	r2, [r4, #8]
 8005c90:	0752      	lsls	r2, r2, #29
 8005c92:	d454      	bmi.n	8005d3e <HAL_ADCEx_MultiModeConfigChannel+0xe2>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8005c94:	689a      	ldr	r2, [r3, #8]
 8005c96:	0757      	lsls	r7, r2, #29
 8005c98:	d451      	bmi.n	8005d3e <HAL_ADCEx_MultiModeConfigChannel+0xe2>
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005c9a:	f1b4 4fa0 	cmp.w	r4, #1342177280	@ 0x50000000
 8005c9e:	d031      	beq.n	8005d04 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8005ca0:	4f2c      	ldr	r7, [pc, #176]	@ (8005d54 <HAL_ADCEx_MultiModeConfigChannel+0xf8>)
 8005ca2:	4a2e      	ldr	r2, [pc, #184]	@ (8005d5c <HAL_ADCEx_MultiModeConfigChannel+0x100>)
 8005ca4:	4e2e      	ldr	r6, [pc, #184]	@ (8005d60 <HAL_ADCEx_MultiModeConfigChannel+0x104>)
 8005ca6:	42bc      	cmp	r4, r7
 8005ca8:	bf08      	it	eq
 8005caa:	4632      	moveq	r2, r6
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8005cac:	b360      	cbz	r0, 8005d08 <HAL_ADCEx_MultiModeConfigChannel+0xac>
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8005cae:	6897      	ldr	r7, [r2, #8]
 8005cb0:	f895 c030 	ldrb.w	ip, [r5, #48]	@ 0x30
 8005cb4:	684e      	ldr	r6, [r1, #4]
 8005cb6:	f427 4760 	bic.w	r7, r7, #57344	@ 0xe000
 8005cba:	ea46 364c 	orr.w	r6, r6, ip, lsl #13
 8005cbe:	433e      	orrs	r6, r7
 8005cc0:	6096      	str	r6, [r2, #8]
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8005cc2:	68a6      	ldr	r6, [r4, #8]
 8005cc4:	f006 0603 	and.w	r6, r6, #3
 8005cc8:	2e01      	cmp	r6, #1
 8005cca:	d102      	bne.n	8005cd2 <HAL_ADCEx_MultiModeConfigChannel+0x76>
 8005ccc:	6824      	ldr	r4, [r4, #0]
 8005cce:	07e6      	lsls	r6, r4, #31
 8005cd0:	d410      	bmi.n	8005cf4 <HAL_ADCEx_MultiModeConfigChannel+0x98>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8005cd2:	689c      	ldr	r4, [r3, #8]
 8005cd4:	f004 0403 	and.w	r4, r4, #3
 8005cd8:	2c01      	cmp	r4, #1
 8005cda:	d102      	bne.n	8005ce2 <HAL_ADCEx_MultiModeConfigChannel+0x86>
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	07dc      	lsls	r4, r3, #31
 8005ce0:	d408      	bmi.n	8005cf4 <HAL_ADCEx_MultiModeConfigChannel+0x98>
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8005ce2:	6893      	ldr	r3, [r2, #8]
 8005ce4:	6889      	ldr	r1, [r1, #8]
 8005ce6:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8005cea:	4308      	orrs	r0, r1
 8005cec:	f023 030f 	bic.w	r3, r3, #15
 8005cf0:	4318      	orrs	r0, r3
 8005cf2:	6090      	str	r0, [r2, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005cf4:	2000      	movs	r0, #0
  __HAL_UNLOCK(hadc);
 8005cf6:	2300      	movs	r3, #0
 8005cf8:	f885 303c 	strb.w	r3, [r5, #60]	@ 0x3c
} 
 8005cfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005cfe:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8005d02:	e7bc      	b.n	8005c7e <HAL_ADCEx_MultiModeConfigChannel+0x22>
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005d04:	4a16      	ldr	r2, [pc, #88]	@ (8005d60 <HAL_ADCEx_MultiModeConfigChannel+0x104>)
 8005d06:	e7d1      	b.n	8005cac <HAL_ADCEx_MultiModeConfigChannel+0x50>
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8005d08:	6891      	ldr	r1, [r2, #8]
 8005d0a:	f421 4160 	bic.w	r1, r1, #57344	@ 0xe000
 8005d0e:	6091      	str	r1, [r2, #8]
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8005d10:	68a1      	ldr	r1, [r4, #8]
 8005d12:	f001 0103 	and.w	r1, r1, #3
 8005d16:	2901      	cmp	r1, #1
 8005d18:	d102      	bne.n	8005d20 <HAL_ADCEx_MultiModeConfigChannel+0xc4>
 8005d1a:	6821      	ldr	r1, [r4, #0]
 8005d1c:	07c9      	lsls	r1, r1, #31
 8005d1e:	d4e9      	bmi.n	8005cf4 <HAL_ADCEx_MultiModeConfigChannel+0x98>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8005d20:	6899      	ldr	r1, [r3, #8]
 8005d22:	f001 0103 	and.w	r1, r1, #3
 8005d26:	2901      	cmp	r1, #1
 8005d28:	d102      	bne.n	8005d30 <HAL_ADCEx_MultiModeConfigChannel+0xd4>
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	07db      	lsls	r3, r3, #31
 8005d2e:	d4e1      	bmi.n	8005cf4 <HAL_ADCEx_MultiModeConfigChannel+0x98>
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8005d30:	6893      	ldr	r3, [r2, #8]
 8005d32:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8005d36:	f023 030f 	bic.w	r3, r3, #15
 8005d3a:	6093      	str	r3, [r2, #8]
 8005d3c:	e7da      	b.n	8005cf4 <HAL_ADCEx_MultiModeConfigChannel+0x98>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005d3e:	6c2b      	ldr	r3, [r5, #64]	@ 0x40
 8005d40:	f043 0320 	orr.w	r3, r3, #32
 8005d44:	642b      	str	r3, [r5, #64]	@ 0x40
    tmp_hal_status = HAL_ERROR;
 8005d46:	2001      	movs	r0, #1
 8005d48:	e7d5      	b.n	8005cf6 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
    return HAL_ERROR;
 8005d4a:	2001      	movs	r0, #1
 8005d4c:	e7d6      	b.n	8005cfc <HAL_ADCEx_MultiModeConfigChannel+0xa0>
  __HAL_LOCK(hadc);
 8005d4e:	2002      	movs	r0, #2
 8005d50:	e7d4      	b.n	8005cfc <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 8005d52:	bf00      	nop
 8005d54:	50000100 	.word	0x50000100
 8005d58:	50000400 	.word	0x50000400
 8005d5c:	50000700 	.word	0x50000700
 8005d60:	50000300 	.word	0x50000300

08005d64 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005d64:	4907      	ldr	r1, [pc, #28]	@ (8005d84 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8005d66:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005d68:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005d6c:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005d6e:	0412      	lsls	r2, r2, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005d70:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005d74:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005d76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005d78:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8005d7c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8005d80:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8005d82:	4770      	bx	lr
 8005d84:	e000ed00 	.word	0xe000ed00

08005d88 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005d88:	4b16      	ldr	r3, [pc, #88]	@ (8005de4 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005d8a:	b530      	push	{r4, r5, lr}
 8005d8c:	68dc      	ldr	r4, [r3, #12]
 8005d8e:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005d92:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005d96:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005d98:	2b04      	cmp	r3, #4
 8005d9a:	bf28      	it	cs
 8005d9c:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005d9e:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005da0:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005da4:	bf8c      	ite	hi
 8005da6:	3c03      	subhi	r4, #3
 8005da8:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005daa:	fa05 f303 	lsl.w	r3, r5, r3
 8005dae:	ea21 0303 	bic.w	r3, r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005db2:	40a5      	lsls	r5, r4
 8005db4:	ea22 0205 	bic.w	r2, r2, r5
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005db8:	40a3      	lsls	r3, r4
  if ((int32_t)(IRQn) >= 0)
 8005dba:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005dbc:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005dc0:	bfac      	ite	ge
 8005dc2:	f100 4060 	addge.w	r0, r0, #3758096384	@ 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005dc6:	4a08      	ldrlt	r2, [pc, #32]	@ (8005de8 <HAL_NVIC_SetPriority+0x60>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005dc8:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005dcc:	bfb8      	it	lt
 8005dce:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005dd2:	b2db      	uxtb	r3, r3
 8005dd4:	bfaa      	itet	ge
 8005dd6:	f500 4061 	addge.w	r0, r0, #57600	@ 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005dda:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005ddc:	f880 3300 	strbge.w	r3, [r0, #768]	@ 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8005de0:	bd30      	pop	{r4, r5, pc}
 8005de2:	bf00      	nop
 8005de4:	e000ed00 	.word	0xe000ed00
 8005de8:	e000ed14 	.word	0xe000ed14

08005dec <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8005dec:	2800      	cmp	r0, #0
 8005dee:	db07      	blt.n	8005e00 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005df0:	0941      	lsrs	r1, r0, #5
 8005df2:	4a04      	ldr	r2, [pc, #16]	@ (8005e04 <HAL_NVIC_EnableIRQ+0x18>)
 8005df4:	f000 001f 	and.w	r0, r0, #31
 8005df8:	2301      	movs	r3, #1
 8005dfa:	4083      	lsls	r3, r0
 8005dfc:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8005e00:	4770      	bx	lr
 8005e02:	bf00      	nop
 8005e04:	e000e100 	.word	0xe000e100

08005e08 <DMA_CalcBaseAndBitshift>:
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8005e08:	6802      	ldr	r2, [r0, #0]
 8005e0a:	4b0a      	ldr	r3, [pc, #40]	@ (8005e34 <DMA_CalcBaseAndBitshift+0x2c>)
 8005e0c:	429a      	cmp	r2, r3
 8005e0e:	f04f 0114 	mov.w	r1, #20
 8005e12:	d808      	bhi.n	8005e26 <DMA_CalcBaseAndBitshift+0x1e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8005e14:	4b08      	ldr	r3, [pc, #32]	@ (8005e38 <DMA_CalcBaseAndBitshift+0x30>)
 8005e16:	4413      	add	r3, r2
 8005e18:	4a08      	ldr	r2, [pc, #32]	@ (8005e3c <DMA_CalcBaseAndBitshift+0x34>)
 8005e1a:	fbb3 f3f1 	udiv	r3, r3, r1
 8005e1e:	009b      	lsls	r3, r3, #2
    hdma->DmaBaseAddress = DMA1;
 8005e20:	e9c0 230f 	strd	r2, r3, [r0, #60]	@ 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 8005e24:	4770      	bx	lr
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8005e26:	4b06      	ldr	r3, [pc, #24]	@ (8005e40 <DMA_CalcBaseAndBitshift+0x38>)
 8005e28:	4413      	add	r3, r2
 8005e2a:	4a06      	ldr	r2, [pc, #24]	@ (8005e44 <DMA_CalcBaseAndBitshift+0x3c>)
 8005e2c:	fbb3 f3f1 	udiv	r3, r3, r1
 8005e30:	009b      	lsls	r3, r3, #2
    hdma->DmaBaseAddress = DMA2;
 8005e32:	e7f5      	b.n	8005e20 <DMA_CalcBaseAndBitshift+0x18>
 8005e34:	40020407 	.word	0x40020407
 8005e38:	bffdfff8 	.word	0xbffdfff8
 8005e3c:	40020000 	.word	0x40020000
 8005e40:	bffdfbf8 	.word	0xbffdfbf8
 8005e44:	40020400 	.word	0x40020400

08005e48 <HAL_DMA_Init>:
{
 8005e48:	b538      	push	{r3, r4, r5, lr}
  if(NULL == hdma)
 8005e4a:	4604      	mov	r4, r0
 8005e4c:	b1e0      	cbz	r0, 8005e88 <HAL_DMA_Init+0x40>
  tmp |=  hdma->Init.Direction        |
 8005e4e:	e9d0 3501 	ldrd	r3, r5, [r0, #4]
 8005e52:	432b      	orrs	r3, r5
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005e54:	68c5      	ldr	r5, [r0, #12]
  tmp = hdma->Instance->CCR;
 8005e56:	6801      	ldr	r1, [r0, #0]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005e58:	432b      	orrs	r3, r5
 8005e5a:	6905      	ldr	r5, [r0, #16]
  tmp = hdma->Instance->CCR;
 8005e5c:	680a      	ldr	r2, [r1, #0]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005e5e:	432b      	orrs	r3, r5
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005e60:	6945      	ldr	r5, [r0, #20]
 8005e62:	432b      	orrs	r3, r5
 8005e64:	6985      	ldr	r5, [r0, #24]
 8005e66:	432b      	orrs	r3, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 8005e68:	69c5      	ldr	r5, [r0, #28]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8005e6a:	f422 527f 	bic.w	r2, r2, #16320	@ 0x3fc0
 8005e6e:	f022 0230 	bic.w	r2, r2, #48	@ 0x30
          hdma->Init.Mode                | hdma->Init.Priority;
 8005e72:	432b      	orrs	r3, r5
  tmp |=  hdma->Init.Direction        |
 8005e74:	4313      	orrs	r3, r2
  hdma->Instance->CCR = tmp;
 8005e76:	600b      	str	r3, [r1, #0]
  DMA_CalcBaseAndBitshift(hdma);
 8005e78:	f7ff ffc6 	bl	8005e08 <DMA_CalcBaseAndBitshift>
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005e7c:	2000      	movs	r0, #0
  hdma->Lock = HAL_UNLOCKED;
 8005e7e:	f44f 7380 	mov.w	r3, #256	@ 0x100
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005e82:	63a0      	str	r0, [r4, #56]	@ 0x38
  hdma->Lock = HAL_UNLOCKED;
 8005e84:	8423      	strh	r3, [r4, #32]
}
 8005e86:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8005e88:	2001      	movs	r0, #1
 8005e8a:	e7fc      	b.n	8005e86 <HAL_DMA_Init+0x3e>

08005e8c <HAL_DMA_Start_IT>:
{
 8005e8c:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hdma);
 8005e8e:	f890 4020 	ldrb.w	r4, [r0, #32]
 8005e92:	2c01      	cmp	r4, #1
 8005e94:	d033      	beq.n	8005efe <HAL_DMA_Start_IT+0x72>
  if(HAL_DMA_STATE_READY == hdma->State)
 8005e96:	f890 5021 	ldrb.w	r5, [r0, #33]	@ 0x21
  __HAL_LOCK(hdma);
 8005e9a:	2401      	movs	r4, #1
  if(HAL_DMA_STATE_READY == hdma->State)
 8005e9c:	42a5      	cmp	r5, r4
  __HAL_LOCK(hdma);
 8005e9e:	f880 4020 	strb.w	r4, [r0, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 8005ea2:	f04f 0400 	mov.w	r4, #0
 8005ea6:	d128      	bne.n	8005efa <HAL_DMA_Start_IT+0x6e>
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005ea8:	6384      	str	r4, [r0, #56]	@ 0x38
    hdma->State = HAL_DMA_STATE_BUSY;
 8005eaa:	2602      	movs	r6, #2
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8005eac:	6804      	ldr	r4, [r0, #0]
    hdma->State = HAL_DMA_STATE_BUSY;
 8005eae:	f880 6021 	strb.w	r6, [r0, #33]	@ 0x21
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8005eb2:	6826      	ldr	r6, [r4, #0]
 8005eb4:	f026 0601 	bic.w	r6, r6, #1
 8005eb8:	6026      	str	r6, [r4, #0]
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8005eba:	e9d0 670f 	ldrd	r6, r7, [r0, #60]	@ 0x3c
 8005ebe:	40bd      	lsls	r5, r7
 8005ec0:	6075      	str	r5, [r6, #4]
  hdma->Instance->CNDTR = DataLength;
 8005ec2:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005ec4:	6843      	ldr	r3, [r0, #4]
 8005ec6:	2b10      	cmp	r3, #16
    if(NULL != hdma->XferHalfCpltCallback )
 8005ec8:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
    hdma->Instance->CPAR = DstAddress;
 8005eca:	bf0b      	itete	eq
 8005ecc:	60a2      	streq	r2, [r4, #8]
    hdma->Instance->CPAR = SrcAddress;
 8005ece:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 8005ed0:	60e1      	streq	r1, [r4, #12]
    hdma->Instance->CMAR = DstAddress;
 8005ed2:	60e2      	strne	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback )
 8005ed4:	b14b      	cbz	r3, 8005eea <HAL_DMA_Start_IT+0x5e>
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8005ed6:	6823      	ldr	r3, [r4, #0]
 8005ed8:	f043 030e 	orr.w	r3, r3, #14
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8005edc:	6023      	str	r3, [r4, #0]
    hdma->Instance->CCR |= DMA_CCR_EN;
 8005ede:	6823      	ldr	r3, [r4, #0]
 8005ee0:	f043 0301 	orr.w	r3, r3, #1
 8005ee4:	6023      	str	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005ee6:	2000      	movs	r0, #0
}
 8005ee8:	bdf0      	pop	{r4, r5, r6, r7, pc}
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8005eea:	6823      	ldr	r3, [r4, #0]
 8005eec:	f043 030a 	orr.w	r3, r3, #10
 8005ef0:	6023      	str	r3, [r4, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8005ef2:	6823      	ldr	r3, [r4, #0]
 8005ef4:	f023 0304 	bic.w	r3, r3, #4
 8005ef8:	e7f0      	b.n	8005edc <HAL_DMA_Start_IT+0x50>
    __HAL_UNLOCK(hdma);
 8005efa:	f880 4020 	strb.w	r4, [r0, #32]
  __HAL_LOCK(hdma);
 8005efe:	2002      	movs	r0, #2
 8005f00:	e7f2      	b.n	8005ee8 <HAL_DMA_Start_IT+0x5c>

08005f02 <HAL_DMA_Abort>:
  if(NULL == hdma)
 8005f02:	b140      	cbz	r0, 8005f16 <HAL_DMA_Abort+0x14>
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005f04:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 8005f08:	2b02      	cmp	r3, #2
 8005f0a:	d006      	beq.n	8005f1a <HAL_DMA_Abort+0x18>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005f0c:	2304      	movs	r3, #4
 8005f0e:	6383      	str	r3, [r0, #56]	@ 0x38
    __HAL_UNLOCK(hdma);
 8005f10:	2300      	movs	r3, #0
 8005f12:	f880 3020 	strb.w	r3, [r0, #32]
    return HAL_ERROR;
 8005f16:	2001      	movs	r0, #1
 8005f18:	4770      	bx	lr
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8005f1a:	6803      	ldr	r3, [r0, #0]
 8005f1c:	681a      	ldr	r2, [r3, #0]
 8005f1e:	f022 020e 	bic.w	r2, r2, #14
 8005f22:	601a      	str	r2, [r3, #0]
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8005f24:	681a      	ldr	r2, [r3, #0]
 8005f26:	f022 0201 	bic.w	r2, r2, #1
 8005f2a:	601a      	str	r2, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8005f2c:	e9d0 210f 	ldrd	r2, r1, [r0, #60]	@ 0x3c
 8005f30:	2301      	movs	r3, #1
 8005f32:	408b      	lsls	r3, r1
 8005f34:	6053      	str	r3, [r2, #4]
  __HAL_UNLOCK(hdma);
 8005f36:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005f3a:	8403      	strh	r3, [r0, #32]
  return HAL_OK;
 8005f3c:	2000      	movs	r0, #0
}
 8005f3e:	4770      	bx	lr

08005f40 <HAL_DMA_IRQHandler>:
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005f40:	6bc1      	ldr	r1, [r0, #60]	@ 0x3c
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8005f42:	6c02      	ldr	r2, [r0, #64]	@ 0x40
  uint32_t source_it = hdma->Instance->CCR;
 8005f44:	6803      	ldr	r3, [r0, #0]
{
 8005f46:	b470      	push	{r4, r5, r6}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005f48:	680e      	ldr	r6, [r1, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8005f4a:	681d      	ldr	r5, [r3, #0]
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8005f4c:	2404      	movs	r4, #4
 8005f4e:	4094      	lsls	r4, r2
 8005f50:	4234      	tst	r4, r6
 8005f52:	d00e      	beq.n	8005f72 <HAL_DMA_IRQHandler+0x32>
 8005f54:	f015 0f04 	tst.w	r5, #4
 8005f58:	d00b      	beq.n	8005f72 <HAL_DMA_IRQHandler+0x32>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005f5a:	681a      	ldr	r2, [r3, #0]
 8005f5c:	0692      	lsls	r2, r2, #26
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8005f5e:	bf5e      	ittt	pl
 8005f60:	681a      	ldrpl	r2, [r3, #0]
 8005f62:	f022 0204 	bicpl.w	r2, r2, #4
 8005f66:	601a      	strpl	r2, [r3, #0]
    if(hdma->XferHalfCpltCallback != NULL)
 8005f68:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8005f6a:	604c      	str	r4, [r1, #4]
    if(hdma->XferErrorCallback != NULL)
 8005f6c:	b363      	cbz	r3, 8005fc8 <HAL_DMA_IRQHandler+0x88>
}
 8005f6e:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 8005f70:	4718      	bx	r3
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8005f72:	2402      	movs	r4, #2
 8005f74:	4094      	lsls	r4, r2
 8005f76:	4234      	tst	r4, r6
 8005f78:	d012      	beq.n	8005fa0 <HAL_DMA_IRQHandler+0x60>
 8005f7a:	f015 0f02 	tst.w	r5, #2
 8005f7e:	d00f      	beq.n	8005fa0 <HAL_DMA_IRQHandler+0x60>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005f80:	681a      	ldr	r2, [r3, #0]
 8005f82:	0695      	lsls	r5, r2, #26
 8005f84:	d406      	bmi.n	8005f94 <HAL_DMA_IRQHandler+0x54>
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8005f86:	681a      	ldr	r2, [r3, #0]
 8005f88:	f022 020a 	bic.w	r2, r2, #10
 8005f8c:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8005f8e:	2301      	movs	r3, #1
 8005f90:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
    __HAL_UNLOCK(hdma);
 8005f94:	2300      	movs	r3, #0
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8005f96:	604c      	str	r4, [r1, #4]
    __HAL_UNLOCK(hdma);
 8005f98:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 8005f9c:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8005f9e:	e7e5      	b.n	8005f6c <HAL_DMA_IRQHandler+0x2c>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8005fa0:	2408      	movs	r4, #8
 8005fa2:	4094      	lsls	r4, r2
 8005fa4:	4234      	tst	r4, r6
 8005fa6:	d00f      	beq.n	8005fc8 <HAL_DMA_IRQHandler+0x88>
 8005fa8:	072c      	lsls	r4, r5, #28
 8005faa:	d50d      	bpl.n	8005fc8 <HAL_DMA_IRQHandler+0x88>
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8005fac:	681c      	ldr	r4, [r3, #0]
 8005fae:	f024 040e 	bic.w	r4, r4, #14
 8005fb2:	601c      	str	r4, [r3, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8005fb4:	2301      	movs	r3, #1
 8005fb6:	fa03 f202 	lsl.w	r2, r3, r2
 8005fba:	604a      	str	r2, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005fbc:	6383      	str	r3, [r0, #56]	@ 0x38
    __HAL_UNLOCK(hdma);
 8005fbe:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005fc2:	8403      	strh	r3, [r0, #32]
    if(hdma->XferErrorCallback != NULL)
 8005fc4:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8005fc6:	e7d1      	b.n	8005f6c <HAL_DMA_IRQHandler+0x2c>
}
 8005fc8:	bc70      	pop	{r4, r5, r6}
 8005fca:	4770      	bx	lr

08005fcc <HAL_DMA_GetError>:
  return hdma->ErrorCode;
 8005fcc:	6b80      	ldr	r0, [r0, #56]	@ 0x38
}
 8005fce:	4770      	bx	lr

08005fd0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005fd0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005fd4:	f8df 917c 	ldr.w	r9, [pc, #380]	@ 8006154 <HAL_GPIO_Init+0x184>
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005fd8:	4c5c      	ldr	r4, [pc, #368]	@ (800614c <HAL_GPIO_Init+0x17c>)
  uint32_t position = 0x00u;
 8005fda:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005fdc:	680a      	ldr	r2, [r1, #0]
 8005fde:	fa32 f503 	lsrs.w	r5, r2, r3
 8005fe2:	d102      	bne.n	8005fea <HAL_GPIO_Init+0x1a>
      }
    }

    position++;
  }
}
 8005fe4:	b003      	add	sp, #12
 8005fe6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005fea:	2501      	movs	r5, #1
 8005fec:	fa05 f803 	lsl.w	r8, r5, r3
    if (iocurrent != 0x00u)
 8005ff0:	ea18 0202 	ands.w	r2, r8, r2
 8005ff4:	f000 80a0 	beq.w	8006138 <HAL_GPIO_Init+0x168>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005ff8:	684e      	ldr	r6, [r1, #4]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8005ffa:	2703      	movs	r7, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005ffc:	f006 0503 	and.w	r5, r6, #3
 8006000:	ea4f 0e43 	mov.w	lr, r3, lsl #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8006004:	fa07 fc0e 	lsl.w	ip, r7, lr
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006008:	1e6f      	subs	r7, r5, #1
 800600a:	2f01      	cmp	r7, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800600c:	ea6f 0c0c 	mvn.w	ip, ip
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006010:	d834      	bhi.n	800607c <HAL_GPIO_Init+0xac>
        temp = GPIOx->OSPEEDR;
 8006012:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8006014:	ea07 0a0c 	and.w	sl, r7, ip
        temp |= (GPIO_Init->Speed << (position * 2u));
 8006018:	68cf      	ldr	r7, [r1, #12]
 800601a:	fa07 f70e 	lsl.w	r7, r7, lr
 800601e:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
 8006022:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8006024:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006026:	ea27 0808 	bic.w	r8, r7, r8
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800602a:	f3c6 1700 	ubfx	r7, r6, #4, #1
 800602e:	409f      	lsls	r7, r3
 8006030:	ea47 0708 	orr.w	r7, r7, r8
        GPIOx->OTYPER = temp;
 8006034:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 8006036:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8006038:	ea07 080c 	and.w	r8, r7, ip
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800603c:	688f      	ldr	r7, [r1, #8]
 800603e:	fa07 f70e 	lsl.w	r7, r7, lr
 8006042:	ea47 0708 	orr.w	r7, r7, r8
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006046:	2d02      	cmp	r5, #2
        GPIOx->PUPDR = temp;
 8006048:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800604a:	d119      	bne.n	8006080 <HAL_GPIO_Init+0xb0>
        temp = GPIOx->AFR[position >> 3u];
 800604c:	ea4f 08d3 	mov.w	r8, r3, lsr #3
 8006050:	eb00 0888 	add.w	r8, r0, r8, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8006054:	f003 0a07 	and.w	sl, r3, #7
        temp = GPIOx->AFR[position >> 3u];
 8006058:	f8d8 7020 	ldr.w	r7, [r8, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800605c:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 8006060:	f04f 0b0f 	mov.w	fp, #15
 8006064:	fa0b fb0a 	lsl.w	fp, fp, sl
 8006068:	ea27 0b0b 	bic.w	fp, r7, fp
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800606c:	690f      	ldr	r7, [r1, #16]
 800606e:	fa07 f70a 	lsl.w	r7, r7, sl
 8006072:	ea47 070b 	orr.w	r7, r7, fp
        GPIOx->AFR[position >> 3u] = temp;
 8006076:	f8c8 7020 	str.w	r7, [r8, #32]
 800607a:	e001      	b.n	8006080 <HAL_GPIO_Init+0xb0>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800607c:	2d03      	cmp	r5, #3
 800607e:	d1da      	bne.n	8006036 <HAL_GPIO_Init+0x66>
      temp = GPIOx->MODER;
 8006080:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8006082:	fa05 f50e 	lsl.w	r5, r5, lr
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8006086:	ea07 070c 	and.w	r7, r7, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800608a:	433d      	orrs	r5, r7
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800608c:	f416 3f40 	tst.w	r6, #196608	@ 0x30000
      GPIOx->MODER = temp;
 8006090:	6005      	str	r5, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006092:	d051      	beq.n	8006138 <HAL_GPIO_Init+0x168>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006094:	f8d9 5018 	ldr.w	r5, [r9, #24]
 8006098:	f045 0501 	orr.w	r5, r5, #1
 800609c:	f8c9 5018 	str.w	r5, [r9, #24]
 80060a0:	f8d9 5018 	ldr.w	r5, [r9, #24]
 80060a4:	f023 0703 	bic.w	r7, r3, #3
 80060a8:	f107 4780 	add.w	r7, r7, #1073741824	@ 0x40000000
 80060ac:	f005 0501 	and.w	r5, r5, #1
 80060b0:	f507 3780 	add.w	r7, r7, #65536	@ 0x10000
 80060b4:	9501      	str	r5, [sp, #4]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80060b6:	f003 0c03 	and.w	ip, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80060ba:	9d01      	ldr	r5, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2u];
 80060bc:	68bd      	ldr	r5, [r7, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80060be:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 80060c2:	f04f 0e0f 	mov.w	lr, #15
 80060c6:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80060ca:	f1b0 4f90 	cmp.w	r0, #1207959552	@ 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80060ce:	ea25 0e0e 	bic.w	lr, r5, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80060d2:	d033      	beq.n	800613c <HAL_GPIO_Init+0x16c>
 80060d4:	4d1e      	ldr	r5, [pc, #120]	@ (8006150 <HAL_GPIO_Init+0x180>)
 80060d6:	42a8      	cmp	r0, r5
 80060d8:	d032      	beq.n	8006140 <HAL_GPIO_Init+0x170>
 80060da:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 80060de:	42a8      	cmp	r0, r5
 80060e0:	d030      	beq.n	8006144 <HAL_GPIO_Init+0x174>
 80060e2:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 80060e6:	42a8      	cmp	r0, r5
 80060e8:	d02e      	beq.n	8006148 <HAL_GPIO_Init+0x178>
 80060ea:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 80060ee:	42a8      	cmp	r0, r5
 80060f0:	bf14      	ite	ne
 80060f2:	2505      	movne	r5, #5
 80060f4:	2504      	moveq	r5, #4
 80060f6:	fa05 f50c 	lsl.w	r5, r5, ip
 80060fa:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2u] = temp;
 80060fe:	60bd      	str	r5, [r7, #8]
        temp = EXTI->RTSR;
 8006100:	68a5      	ldr	r5, [r4, #8]
        temp &= ~(iocurrent);
 8006102:	43d7      	mvns	r7, r2
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8006104:	f416 1f80 	tst.w	r6, #1048576	@ 0x100000
        temp &= ~(iocurrent);
 8006108:	bf0c      	ite	eq
 800610a:	403d      	andeq	r5, r7
          temp |= iocurrent;
 800610c:	4315      	orrne	r5, r2
        EXTI->RTSR = temp;
 800610e:	60a5      	str	r5, [r4, #8]
        temp = EXTI->FTSR;
 8006110:	68e5      	ldr	r5, [r4, #12]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8006112:	f416 1f00 	tst.w	r6, #2097152	@ 0x200000
        temp &= ~(iocurrent);
 8006116:	bf0c      	ite	eq
 8006118:	403d      	andeq	r5, r7
          temp |= iocurrent;
 800611a:	4315      	orrne	r5, r2
        EXTI->FTSR = temp;
 800611c:	60e5      	str	r5, [r4, #12]
        temp = EXTI->EMR;
 800611e:	6865      	ldr	r5, [r4, #4]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8006120:	f416 3f00 	tst.w	r6, #131072	@ 0x20000
        temp &= ~(iocurrent);
 8006124:	bf0c      	ite	eq
 8006126:	403d      	andeq	r5, r7
          temp |= iocurrent;
 8006128:	4315      	orrne	r5, r2
        EXTI->EMR = temp;
 800612a:	6065      	str	r5, [r4, #4]
        temp = EXTI->IMR;
 800612c:	6825      	ldr	r5, [r4, #0]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800612e:	03f6      	lsls	r6, r6, #15
        temp &= ~(iocurrent);
 8006130:	bf54      	ite	pl
 8006132:	403d      	andpl	r5, r7
          temp |= iocurrent;
 8006134:	4315      	orrmi	r5, r2
        EXTI->IMR = temp;
 8006136:	6025      	str	r5, [r4, #0]
    position++;
 8006138:	3301      	adds	r3, #1
 800613a:	e74f      	b.n	8005fdc <HAL_GPIO_Init+0xc>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800613c:	2500      	movs	r5, #0
 800613e:	e7da      	b.n	80060f6 <HAL_GPIO_Init+0x126>
 8006140:	2501      	movs	r5, #1
 8006142:	e7d8      	b.n	80060f6 <HAL_GPIO_Init+0x126>
 8006144:	2502      	movs	r5, #2
 8006146:	e7d6      	b.n	80060f6 <HAL_GPIO_Init+0x126>
 8006148:	2503      	movs	r5, #3
 800614a:	e7d4      	b.n	80060f6 <HAL_GPIO_Init+0x126>
 800614c:	40010400 	.word	0x40010400
 8006150:	48000400 	.word	0x48000400
 8006154:	40021000 	.word	0x40021000

08006158 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006158:	b10a      	cbz	r2, 800615e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800615a:	6181      	str	r1, [r0, #24]
 800615c:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800615e:	6281      	str	r1, [r0, #40]	@ 0x28
  }
}
 8006160:	4770      	bx	lr
	...

08006164 <HAL_PWR_EnableBkUpAccess>:
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  SET_BIT(PWR->CR, PWR_CR_DBP);  
 8006164:	4a02      	ldr	r2, [pc, #8]	@ (8006170 <HAL_PWR_EnableBkUpAccess+0xc>)
 8006166:	6813      	ldr	r3, [r2, #0]
 8006168:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800616c:	6013      	str	r3, [r2, #0]
}
 800616e:	4770      	bx	lr
 8006170:	40007000 	.word	0x40007000

08006174 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006174:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006178:	4605      	mov	r5, r0
 800617a:	2800      	cmp	r0, #0
 800617c:	d033      	beq.n	80061e6 <HAL_RCC_OscConfig+0x72>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800617e:	6803      	ldr	r3, [r0, #0]
 8006180:	07da      	lsls	r2, r3, #31
 8006182:	d411      	bmi.n	80061a8 <HAL_RCC_OscConfig+0x34>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006184:	682b      	ldr	r3, [r5, #0]
 8006186:	079b      	lsls	r3, r3, #30
 8006188:	f100 8081 	bmi.w	800628e <HAL_RCC_OscConfig+0x11a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800618c:	682b      	ldr	r3, [r5, #0]
 800618e:	071c      	lsls	r4, r3, #28
 8006190:	f100 80eb 	bmi.w	800636a <HAL_RCC_OscConfig+0x1f6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006194:	682b      	ldr	r3, [r5, #0]
 8006196:	0758      	lsls	r0, r3, #29
 8006198:	f100 8130 	bmi.w	80063fc <HAL_RCC_OscConfig+0x288>
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800619c:	69eb      	ldr	r3, [r5, #28]
 800619e:	2b00      	cmp	r3, #0
 80061a0:	f040 81b5 	bne.w	800650e <HAL_RCC_OscConfig+0x39a>
        }
      }
    }
  }

  return HAL_OK;
 80061a4:	2000      	movs	r0, #0
 80061a6:	e047      	b.n	8006238 <HAL_RCC_OscConfig+0xc4>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80061a8:	4cb0      	ldr	r4, [pc, #704]	@ (800646c <HAL_RCC_OscConfig+0x2f8>)
 80061aa:	6863      	ldr	r3, [r4, #4]
 80061ac:	f003 030c 	and.w	r3, r3, #12
 80061b0:	2b04      	cmp	r3, #4
 80061b2:	d007      	beq.n	80061c4 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80061b4:	6863      	ldr	r3, [r4, #4]
 80061b6:	f003 030c 	and.w	r3, r3, #12
 80061ba:	2b08      	cmp	r3, #8
 80061bc:	d115      	bne.n	80061ea <HAL_RCC_OscConfig+0x76>
 80061be:	6863      	ldr	r3, [r4, #4]
 80061c0:	03df      	lsls	r7, r3, #15
 80061c2:	d512      	bpl.n	80061ea <HAL_RCC_OscConfig+0x76>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80061c4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80061c8:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80061cc:	6821      	ldr	r1, [r4, #0]
 80061ce:	fa93 f3a3 	rbit	r3, r3
 80061d2:	2201      	movs	r2, #1
 80061d4:	fab3 f383 	clz	r3, r3
 80061d8:	fa02 f303 	lsl.w	r3, r2, r3
 80061dc:	420b      	tst	r3, r1
 80061de:	d0d1      	beq.n	8006184 <HAL_RCC_OscConfig+0x10>
 80061e0:	686b      	ldr	r3, [r5, #4]
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d1ce      	bne.n	8006184 <HAL_RCC_OscConfig+0x10>
    return HAL_ERROR;
 80061e6:	2001      	movs	r0, #1
 80061e8:	e026      	b.n	8006238 <HAL_RCC_OscConfig+0xc4>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80061ea:	686a      	ldr	r2, [r5, #4]
 80061ec:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 80061f0:	d125      	bne.n	800623e <HAL_RCC_OscConfig+0xca>
 80061f2:	6823      	ldr	r3, [r4, #0]
 80061f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80061f8:	6023      	str	r3, [r4, #0]
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80061fa:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80061fc:	68a9      	ldr	r1, [r5, #8]
 80061fe:	f023 030f 	bic.w	r3, r3, #15
 8006202:	430b      	orrs	r3, r1
 8006204:	62e3      	str	r3, [r4, #44]	@ 0x2c
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006206:	b352      	cbz	r2, 800625e <HAL_RCC_OscConfig+0xea>
        tickstart = HAL_GetTick();
 8006208:	f7ff f866 	bl	80052d8 <HAL_GetTick>
 800620c:	f44f 3700 	mov.w	r7, #131072	@ 0x20000
 8006210:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006212:	f04f 0801 	mov.w	r8, #1
 8006216:	fa97 f3a7 	rbit	r3, r7
 800621a:	6822      	ldr	r2, [r4, #0]
 800621c:	fa97 f3a7 	rbit	r3, r7
 8006220:	fab3 f383 	clz	r3, r3
 8006224:	fa08 f303 	lsl.w	r3, r8, r3
 8006228:	4213      	tst	r3, r2
 800622a:	d1ab      	bne.n	8006184 <HAL_RCC_OscConfig+0x10>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800622c:	f7ff f854 	bl	80052d8 <HAL_GetTick>
 8006230:	1b80      	subs	r0, r0, r6
 8006232:	2864      	cmp	r0, #100	@ 0x64
 8006234:	d9ef      	bls.n	8006216 <HAL_RCC_OscConfig+0xa2>
            return HAL_TIMEOUT;
 8006236:	2003      	movs	r0, #3
}
 8006238:	b002      	add	sp, #8
 800623a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800623e:	6823      	ldr	r3, [r4, #0]
 8006240:	b932      	cbnz	r2, 8006250 <HAL_RCC_OscConfig+0xdc>
 8006242:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006246:	6023      	str	r3, [r4, #0]
 8006248:	6823      	ldr	r3, [r4, #0]
 800624a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800624e:	e7d3      	b.n	80061f8 <HAL_RCC_OscConfig+0x84>
 8006250:	f5b2 2fa0 	cmp.w	r2, #327680	@ 0x50000
 8006254:	d1f5      	bne.n	8006242 <HAL_RCC_OscConfig+0xce>
 8006256:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800625a:	6023      	str	r3, [r4, #0]
 800625c:	e7c9      	b.n	80061f2 <HAL_RCC_OscConfig+0x7e>
        tickstart = HAL_GetTick();
 800625e:	f7ff f83b 	bl	80052d8 <HAL_GetTick>
 8006262:	f44f 3700 	mov.w	r7, #131072	@ 0x20000
 8006266:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006268:	f04f 0801 	mov.w	r8, #1
 800626c:	fa97 f3a7 	rbit	r3, r7
 8006270:	6822      	ldr	r2, [r4, #0]
 8006272:	fa97 f3a7 	rbit	r3, r7
 8006276:	fab3 f383 	clz	r3, r3
 800627a:	fa08 f303 	lsl.w	r3, r8, r3
 800627e:	4213      	tst	r3, r2
 8006280:	d080      	beq.n	8006184 <HAL_RCC_OscConfig+0x10>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006282:	f7ff f829 	bl	80052d8 <HAL_GetTick>
 8006286:	1b80      	subs	r0, r0, r6
 8006288:	2864      	cmp	r0, #100	@ 0x64
 800628a:	d9ef      	bls.n	800626c <HAL_RCC_OscConfig+0xf8>
 800628c:	e7d3      	b.n	8006236 <HAL_RCC_OscConfig+0xc2>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800628e:	4c77      	ldr	r4, [pc, #476]	@ (800646c <HAL_RCC_OscConfig+0x2f8>)
 8006290:	6863      	ldr	r3, [r4, #4]
 8006292:	f013 0f0c 	tst.w	r3, #12
 8006296:	d007      	beq.n	80062a8 <HAL_RCC_OscConfig+0x134>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8006298:	6863      	ldr	r3, [r4, #4]
 800629a:	f003 030c 	and.w	r3, r3, #12
 800629e:	2b08      	cmp	r3, #8
 80062a0:	d11f      	bne.n	80062e2 <HAL_RCC_OscConfig+0x16e>
 80062a2:	6863      	ldr	r3, [r4, #4]
 80062a4:	03de      	lsls	r6, r3, #15
 80062a6:	d41c      	bmi.n	80062e2 <HAL_RCC_OscConfig+0x16e>
 80062a8:	2302      	movs	r3, #2
 80062aa:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80062ae:	6821      	ldr	r1, [r4, #0]
 80062b0:	fa93 f3a3 	rbit	r3, r3
 80062b4:	2201      	movs	r2, #1
 80062b6:	fab3 f383 	clz	r3, r3
 80062ba:	fa02 f303 	lsl.w	r3, r2, r3
 80062be:	420b      	tst	r3, r1
 80062c0:	d002      	beq.n	80062c8 <HAL_RCC_OscConfig+0x154>
 80062c2:	692b      	ldr	r3, [r5, #16]
 80062c4:	4293      	cmp	r3, r2
 80062c6:	d18e      	bne.n	80061e6 <HAL_RCC_OscConfig+0x72>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80062c8:	6821      	ldr	r1, [r4, #0]
 80062ca:	22f8      	movs	r2, #248	@ 0xf8
 80062cc:	fa92 f2a2 	rbit	r2, r2
 80062d0:	696b      	ldr	r3, [r5, #20]
 80062d2:	fab2 f282 	clz	r2, r2
 80062d6:	4093      	lsls	r3, r2
 80062d8:	f021 02f8 	bic.w	r2, r1, #248	@ 0xf8
 80062dc:	4313      	orrs	r3, r2
 80062de:	6023      	str	r3, [r4, #0]
 80062e0:	e754      	b.n	800618c <HAL_RCC_OscConfig+0x18>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80062e2:	692a      	ldr	r2, [r5, #16]
 80062e4:	2601      	movs	r6, #1
 80062e6:	b1fa      	cbz	r2, 8006328 <HAL_RCC_OscConfig+0x1b4>
 80062e8:	fa96 f3a6 	rbit	r3, r6
        __HAL_RCC_HSI_ENABLE();
 80062ec:	fab3 f383 	clz	r3, r3
 80062f0:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80062f4:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80062f8:	009b      	lsls	r3, r3, #2
 80062fa:	f04f 0802 	mov.w	r8, #2
 80062fe:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 8006300:	f7fe ffea 	bl	80052d8 <HAL_GetTick>
 8006304:	4607      	mov	r7, r0
 8006306:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800630a:	6822      	ldr	r2, [r4, #0]
 800630c:	fa98 f3a8 	rbit	r3, r8
 8006310:	fab3 f383 	clz	r3, r3
 8006314:	fa06 f303 	lsl.w	r3, r6, r3
 8006318:	4213      	tst	r3, r2
 800631a:	d1d5      	bne.n	80062c8 <HAL_RCC_OscConfig+0x154>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800631c:	f7fe ffdc 	bl	80052d8 <HAL_GetTick>
 8006320:	1bc0      	subs	r0, r0, r7
 8006322:	2802      	cmp	r0, #2
 8006324:	d9ef      	bls.n	8006306 <HAL_RCC_OscConfig+0x192>
 8006326:	e786      	b.n	8006236 <HAL_RCC_OscConfig+0xc2>
 8006328:	fa96 f3a6 	rbit	r3, r6
        __HAL_RCC_HSI_DISABLE();
 800632c:	fab3 f383 	clz	r3, r3
 8006330:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8006334:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8006338:	009b      	lsls	r3, r3, #2
 800633a:	f04f 0802 	mov.w	r8, #2
 800633e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8006340:	f7fe ffca 	bl	80052d8 <HAL_GetTick>
 8006344:	4607      	mov	r7, r0
 8006346:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800634a:	6822      	ldr	r2, [r4, #0]
 800634c:	fa98 f3a8 	rbit	r3, r8
 8006350:	fab3 f383 	clz	r3, r3
 8006354:	fa06 f303 	lsl.w	r3, r6, r3
 8006358:	4213      	tst	r3, r2
 800635a:	f43f af17 	beq.w	800618c <HAL_RCC_OscConfig+0x18>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800635e:	f7fe ffbb 	bl	80052d8 <HAL_GetTick>
 8006362:	1bc0      	subs	r0, r0, r7
 8006364:	2802      	cmp	r0, #2
 8006366:	d9ee      	bls.n	8006346 <HAL_RCC_OscConfig+0x1d2>
 8006368:	e765      	b.n	8006236 <HAL_RCC_OscConfig+0xc2>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800636a:	69aa      	ldr	r2, [r5, #24]
 800636c:	4e3f      	ldr	r6, [pc, #252]	@ (800646c <HAL_RCC_OscConfig+0x2f8>)
 800636e:	4940      	ldr	r1, [pc, #256]	@ (8006470 <HAL_RCC_OscConfig+0x2fc>)
 8006370:	2401      	movs	r4, #1
 8006372:	b30a      	cbz	r2, 80063b8 <HAL_RCC_OscConfig+0x244>
 8006374:	fa94 f3a4 	rbit	r3, r4
      __HAL_RCC_LSI_ENABLE();
 8006378:	fab3 f383 	clz	r3, r3
 800637c:	440b      	add	r3, r1
 800637e:	009b      	lsls	r3, r3, #2
 8006380:	2702      	movs	r7, #2
 8006382:	601c      	str	r4, [r3, #0]
      tickstart = HAL_GetTick();
 8006384:	f7fe ffa8 	bl	80052d8 <HAL_GetTick>
 8006388:	4680      	mov	r8, r0
 800638a:	fa97 f3a7 	rbit	r3, r7
 800638e:	fa97 f3a7 	rbit	r3, r7
 8006392:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006396:	6a72      	ldr	r2, [r6, #36]	@ 0x24
 8006398:	fa97 f3a7 	rbit	r3, r7
 800639c:	fab3 f383 	clz	r3, r3
 80063a0:	fa04 f303 	lsl.w	r3, r4, r3
 80063a4:	4213      	tst	r3, r2
 80063a6:	f47f aef5 	bne.w	8006194 <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80063aa:	f7fe ff95 	bl	80052d8 <HAL_GetTick>
 80063ae:	eba0 0008 	sub.w	r0, r0, r8
 80063b2:	2802      	cmp	r0, #2
 80063b4:	d9e9      	bls.n	800638a <HAL_RCC_OscConfig+0x216>
 80063b6:	e73e      	b.n	8006236 <HAL_RCC_OscConfig+0xc2>
 80063b8:	fa94 f3a4 	rbit	r3, r4
      __HAL_RCC_LSI_DISABLE();
 80063bc:	fab3 f383 	clz	r3, r3
 80063c0:	440b      	add	r3, r1
 80063c2:	009b      	lsls	r3, r3, #2
 80063c4:	2702      	movs	r7, #2
 80063c6:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80063c8:	f7fe ff86 	bl	80052d8 <HAL_GetTick>
 80063cc:	4680      	mov	r8, r0
 80063ce:	fa97 f3a7 	rbit	r3, r7
 80063d2:	fa97 f3a7 	rbit	r3, r7
 80063d6:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80063da:	6a72      	ldr	r2, [r6, #36]	@ 0x24
 80063dc:	fa97 f3a7 	rbit	r3, r7
 80063e0:	fab3 f383 	clz	r3, r3
 80063e4:	fa04 f303 	lsl.w	r3, r4, r3
 80063e8:	4213      	tst	r3, r2
 80063ea:	f43f aed3 	beq.w	8006194 <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80063ee:	f7fe ff73 	bl	80052d8 <HAL_GetTick>
 80063f2:	eba0 0008 	sub.w	r0, r0, r8
 80063f6:	2802      	cmp	r0, #2
 80063f8:	d9e9      	bls.n	80063ce <HAL_RCC_OscConfig+0x25a>
 80063fa:	e71c      	b.n	8006236 <HAL_RCC_OscConfig+0xc2>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80063fc:	4c1b      	ldr	r4, [pc, #108]	@ (800646c <HAL_RCC_OscConfig+0x2f8>)
 80063fe:	69e3      	ldr	r3, [r4, #28]
 8006400:	00d9      	lsls	r1, r3, #3
 8006402:	d431      	bmi.n	8006468 <HAL_RCC_OscConfig+0x2f4>
      __HAL_RCC_PWR_CLK_ENABLE();
 8006404:	69e3      	ldr	r3, [r4, #28]
 8006406:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800640a:	61e3      	str	r3, [r4, #28]
 800640c:	69e3      	ldr	r3, [r4, #28]
 800640e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006412:	9301      	str	r3, [sp, #4]
 8006414:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8006416:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006418:	4f16      	ldr	r7, [pc, #88]	@ (8006474 <HAL_RCC_OscConfig+0x300>)
 800641a:	683b      	ldr	r3, [r7, #0]
 800641c:	05da      	lsls	r2, r3, #23
 800641e:	d52b      	bpl.n	8006478 <HAL_RCC_OscConfig+0x304>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006420:	68eb      	ldr	r3, [r5, #12]
 8006422:	2b01      	cmp	r3, #1
 8006424:	d139      	bne.n	800649a <HAL_RCC_OscConfig+0x326>
 8006426:	6a23      	ldr	r3, [r4, #32]
 8006428:	f043 0301 	orr.w	r3, r3, #1
 800642c:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 800642e:	f7fe ff53 	bl	80052d8 <HAL_GetTick>
 8006432:	2702      	movs	r7, #2
 8006434:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006436:	f04f 0901 	mov.w	r9, #1
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800643a:	f241 3a88 	movw	sl, #5000	@ 0x1388
 800643e:	fa97 f3a7 	rbit	r3, r7
 8006442:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006446:	6a22      	ldr	r2, [r4, #32]
 8006448:	fa97 f3a7 	rbit	r3, r7
 800644c:	fab3 f383 	clz	r3, r3
 8006450:	fa09 f303 	lsl.w	r3, r9, r3
 8006454:	4213      	tst	r3, r2
 8006456:	d053      	beq.n	8006500 <HAL_RCC_OscConfig+0x38c>
    if(pwrclkchanged == SET)
 8006458:	2e00      	cmp	r6, #0
 800645a:	f43f ae9f 	beq.w	800619c <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 800645e:	69e3      	ldr	r3, [r4, #28]
 8006460:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006464:	61e3      	str	r3, [r4, #28]
 8006466:	e699      	b.n	800619c <HAL_RCC_OscConfig+0x28>
    FlagStatus       pwrclkchanged = RESET;
 8006468:	2600      	movs	r6, #0
 800646a:	e7d5      	b.n	8006418 <HAL_RCC_OscConfig+0x2a4>
 800646c:	40021000 	.word	0x40021000
 8006470:	10908120 	.word	0x10908120
 8006474:	40007000 	.word	0x40007000
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006478:	683b      	ldr	r3, [r7, #0]
 800647a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800647e:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8006480:	f7fe ff2a 	bl	80052d8 <HAL_GetTick>
 8006484:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006486:	683b      	ldr	r3, [r7, #0]
 8006488:	05db      	lsls	r3, r3, #23
 800648a:	d4c9      	bmi.n	8006420 <HAL_RCC_OscConfig+0x2ac>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800648c:	f7fe ff24 	bl	80052d8 <HAL_GetTick>
 8006490:	eba0 0008 	sub.w	r0, r0, r8
 8006494:	2864      	cmp	r0, #100	@ 0x64
 8006496:	d9f6      	bls.n	8006486 <HAL_RCC_OscConfig+0x312>
 8006498:	e6cd      	b.n	8006236 <HAL_RCC_OscConfig+0xc2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800649a:	bb1b      	cbnz	r3, 80064e4 <HAL_RCC_OscConfig+0x370>
 800649c:	6a23      	ldr	r3, [r4, #32]
 800649e:	f023 0301 	bic.w	r3, r3, #1
 80064a2:	6223      	str	r3, [r4, #32]
 80064a4:	6a23      	ldr	r3, [r4, #32]
 80064a6:	f023 0304 	bic.w	r3, r3, #4
 80064aa:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80064ac:	f7fe ff14 	bl	80052d8 <HAL_GetTick>
 80064b0:	2702      	movs	r7, #2
 80064b2:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80064b4:	f04f 0901 	mov.w	r9, #1
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80064b8:	f241 3a88 	movw	sl, #5000	@ 0x1388
 80064bc:	fa97 f3a7 	rbit	r3, r7
 80064c0:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80064c4:	6a22      	ldr	r2, [r4, #32]
 80064c6:	fa97 f3a7 	rbit	r3, r7
 80064ca:	fab3 f383 	clz	r3, r3
 80064ce:	fa09 f303 	lsl.w	r3, r9, r3
 80064d2:	4213      	tst	r3, r2
 80064d4:	d0c0      	beq.n	8006458 <HAL_RCC_OscConfig+0x2e4>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80064d6:	f7fe feff 	bl	80052d8 <HAL_GetTick>
 80064da:	eba0 0008 	sub.w	r0, r0, r8
 80064de:	4550      	cmp	r0, sl
 80064e0:	d9ec      	bls.n	80064bc <HAL_RCC_OscConfig+0x348>
 80064e2:	e6a8      	b.n	8006236 <HAL_RCC_OscConfig+0xc2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80064e4:	2b05      	cmp	r3, #5
 80064e6:	6a23      	ldr	r3, [r4, #32]
 80064e8:	d103      	bne.n	80064f2 <HAL_RCC_OscConfig+0x37e>
 80064ea:	f043 0304 	orr.w	r3, r3, #4
 80064ee:	6223      	str	r3, [r4, #32]
 80064f0:	e799      	b.n	8006426 <HAL_RCC_OscConfig+0x2b2>
 80064f2:	f023 0301 	bic.w	r3, r3, #1
 80064f6:	6223      	str	r3, [r4, #32]
 80064f8:	6a23      	ldr	r3, [r4, #32]
 80064fa:	f023 0304 	bic.w	r3, r3, #4
 80064fe:	e795      	b.n	800642c <HAL_RCC_OscConfig+0x2b8>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006500:	f7fe feea 	bl	80052d8 <HAL_GetTick>
 8006504:	eba0 0008 	sub.w	r0, r0, r8
 8006508:	4550      	cmp	r0, sl
 800650a:	d998      	bls.n	800643e <HAL_RCC_OscConfig+0x2ca>
 800650c:	e693      	b.n	8006236 <HAL_RCC_OscConfig+0xc2>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800650e:	4c46      	ldr	r4, [pc, #280]	@ (8006628 <HAL_RCC_OscConfig+0x4b4>)
 8006510:	6862      	ldr	r2, [r4, #4]
 8006512:	f002 020c 	and.w	r2, r2, #12
 8006516:	2a08      	cmp	r2, #8
 8006518:	d074      	beq.n	8006604 <HAL_RCC_OscConfig+0x490>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800651a:	2b02      	cmp	r3, #2
 800651c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006520:	d14d      	bne.n	80065be <HAL_RCC_OscConfig+0x44a>
 8006522:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8006526:	fab3 f383 	clz	r3, r3
 800652a:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800652e:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8006532:	009b      	lsls	r3, r3, #2
 8006534:	2200      	movs	r2, #0
 8006536:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8006538:	f7fe fece 	bl	80052d8 <HAL_GetTick>
 800653c:	f04f 7800 	mov.w	r8, #33554432	@ 0x2000000
 8006540:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006542:	2601      	movs	r6, #1
 8006544:	fa98 f3a8 	rbit	r3, r8
 8006548:	6822      	ldr	r2, [r4, #0]
 800654a:	fa98 f3a8 	rbit	r3, r8
 800654e:	fab3 f383 	clz	r3, r3
 8006552:	fa06 f303 	lsl.w	r3, r6, r3
 8006556:	4213      	tst	r3, r2
 8006558:	d12b      	bne.n	80065b2 <HAL_RCC_OscConfig+0x43e>
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800655a:	e9d5 1308 	ldrd	r1, r3, [r5, #32]
 800655e:	6862      	ldr	r2, [r4, #4]
 8006560:	430b      	orrs	r3, r1
 8006562:	f422 1274 	bic.w	r2, r2, #3997696	@ 0x3d0000
 8006566:	4313      	orrs	r3, r2
 8006568:	6063      	str	r3, [r4, #4]
 800656a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800656e:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 8006572:	fab3 f383 	clz	r3, r3
 8006576:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800657a:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800657e:	009b      	lsls	r3, r3, #2
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006580:	2701      	movs	r7, #1
        __HAL_RCC_PLL_ENABLE();
 8006582:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 8006584:	f7fe fea8 	bl	80052d8 <HAL_GetTick>
 8006588:	f04f 7600 	mov.w	r6, #33554432	@ 0x2000000
 800658c:	4605      	mov	r5, r0
 800658e:	fa96 f3a6 	rbit	r3, r6
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006592:	6822      	ldr	r2, [r4, #0]
 8006594:	fa96 f3a6 	rbit	r3, r6
 8006598:	fab3 f383 	clz	r3, r3
 800659c:	fa07 f303 	lsl.w	r3, r7, r3
 80065a0:	4213      	tst	r3, r2
 80065a2:	f47f adff 	bne.w	80061a4 <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80065a6:	f7fe fe97 	bl	80052d8 <HAL_GetTick>
 80065aa:	1b40      	subs	r0, r0, r5
 80065ac:	2802      	cmp	r0, #2
 80065ae:	d9ee      	bls.n	800658e <HAL_RCC_OscConfig+0x41a>
 80065b0:	e641      	b.n	8006236 <HAL_RCC_OscConfig+0xc2>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80065b2:	f7fe fe91 	bl	80052d8 <HAL_GetTick>
 80065b6:	1bc0      	subs	r0, r0, r7
 80065b8:	2802      	cmp	r0, #2
 80065ba:	d9c3      	bls.n	8006544 <HAL_RCC_OscConfig+0x3d0>
 80065bc:	e63b      	b.n	8006236 <HAL_RCC_OscConfig+0xc2>
 80065be:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 80065c2:	fab3 f383 	clz	r3, r3
 80065c6:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80065ca:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80065ce:	009b      	lsls	r3, r3, #2
 80065d0:	2200      	movs	r2, #0
 80065d2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80065d4:	f7fe fe80 	bl	80052d8 <HAL_GetTick>
 80065d8:	f04f 7600 	mov.w	r6, #33554432	@ 0x2000000
 80065dc:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80065de:	2701      	movs	r7, #1
 80065e0:	fa96 f3a6 	rbit	r3, r6
 80065e4:	6822      	ldr	r2, [r4, #0]
 80065e6:	fa96 f3a6 	rbit	r3, r6
 80065ea:	fab3 f383 	clz	r3, r3
 80065ee:	fa07 f303 	lsl.w	r3, r7, r3
 80065f2:	4213      	tst	r3, r2
 80065f4:	f43f add6 	beq.w	80061a4 <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80065f8:	f7fe fe6e 	bl	80052d8 <HAL_GetTick>
 80065fc:	1b40      	subs	r0, r0, r5
 80065fe:	2802      	cmp	r0, #2
 8006600:	d9ee      	bls.n	80065e0 <HAL_RCC_OscConfig+0x46c>
 8006602:	e618      	b.n	8006236 <HAL_RCC_OscConfig+0xc2>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006604:	2b01      	cmp	r3, #1
 8006606:	f43f adee 	beq.w	80061e6 <HAL_RCC_OscConfig+0x72>
        pll_config = RCC->CFGR;
 800660a:	6860      	ldr	r0, [r4, #4]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800660c:	6a2b      	ldr	r3, [r5, #32]
 800660e:	f400 3280 	and.w	r2, r0, #65536	@ 0x10000
 8006612:	429a      	cmp	r2, r3
 8006614:	f47f ade7 	bne.w	80061e6 <HAL_RCC_OscConfig+0x72>
 8006618:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800661a:	f400 1070 	and.w	r0, r0, #3932160	@ 0x3c0000
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800661e:	1ac0      	subs	r0, r0, r3
 8006620:	bf18      	it	ne
 8006622:	2001      	movne	r0, #1
 8006624:	e608      	b.n	8006238 <HAL_RCC_OscConfig+0xc4>
 8006626:	bf00      	nop
 8006628:	40021000 	.word	0x40021000

0800662c <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 800662c:	4b0c      	ldr	r3, [pc, #48]	@ (8006660 <HAL_RCC_GetSysClockFreq+0x34>)
 800662e:	685a      	ldr	r2, [r3, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006630:	f002 010c 	and.w	r1, r2, #12
 8006634:	2908      	cmp	r1, #8
 8006636:	d111      	bne.n	800665c <HAL_RCC_GetSysClockFreq+0x30>
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8006638:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800663a:	480a      	ldr	r0, [pc, #40]	@ (8006664 <HAL_RCC_GetSysClockFreq+0x38>)
 800663c:	f3c2 4183 	ubfx	r1, r2, #18, #4
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8006640:	03d2      	lsls	r2, r2, #15
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8006642:	bf44      	itt	mi
 8006644:	f003 030f 	andmi.w	r3, r3, #15
 8006648:	4a07      	ldrmi	r2, [pc, #28]	@ (8006668 <HAL_RCC_GetSysClockFreq+0x3c>)
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800664a:	5c40      	ldrb	r0, [r0, r1]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 800664c:	bf49      	itett	mi
 800664e:	5cd2      	ldrbmi	r2, [r2, r3]
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8006650:	4b06      	ldrpl	r3, [pc, #24]	@ (800666c <HAL_RCC_GetSysClockFreq+0x40>)
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8006652:	4b07      	ldrmi	r3, [pc, #28]	@ (8006670 <HAL_RCC_GetSysClockFreq+0x44>)
 8006654:	fbb3 f3f2 	udivmi	r3, r3, r2
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8006658:	4358      	muls	r0, r3
 800665a:	4770      	bx	lr
      sysclockfreq = HSE_VALUE;
 800665c:	4804      	ldr	r0, [pc, #16]	@ (8006670 <HAL_RCC_GetSysClockFreq+0x44>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 800665e:	4770      	bx	lr
 8006660:	40021000 	.word	0x40021000
 8006664:	080139f7 	.word	0x080139f7
 8006668:	080139e7 	.word	0x080139e7
 800666c:	003d0900 	.word	0x003d0900
 8006670:	007a1200 	.word	0x007a1200

08006674 <HAL_RCC_ClockConfig>:
{
 8006674:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006678:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 800667a:	4604      	mov	r4, r0
 800667c:	b910      	cbnz	r0, 8006684 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 800667e:	2001      	movs	r0, #1
}
 8006680:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006684:	4a4a      	ldr	r2, [pc, #296]	@ (80067b0 <HAL_RCC_ClockConfig+0x13c>)
 8006686:	6813      	ldr	r3, [r2, #0]
 8006688:	f003 0307 	and.w	r3, r3, #7
 800668c:	428b      	cmp	r3, r1
 800668e:	d32e      	bcc.n	80066ee <HAL_RCC_ClockConfig+0x7a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006690:	6822      	ldr	r2, [r4, #0]
 8006692:	0791      	lsls	r1, r2, #30
 8006694:	d436      	bmi.n	8006704 <HAL_RCC_ClockConfig+0x90>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006696:	07d2      	lsls	r2, r2, #31
 8006698:	d43c      	bmi.n	8006714 <HAL_RCC_ClockConfig+0xa0>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800669a:	4a45      	ldr	r2, [pc, #276]	@ (80067b0 <HAL_RCC_ClockConfig+0x13c>)
 800669c:	6813      	ldr	r3, [r2, #0]
 800669e:	f003 0307 	and.w	r3, r3, #7
 80066a2:	42ab      	cmp	r3, r5
 80066a4:	d870      	bhi.n	8006788 <HAL_RCC_ClockConfig+0x114>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80066a6:	6822      	ldr	r2, [r4, #0]
 80066a8:	4d42      	ldr	r5, [pc, #264]	@ (80067b4 <HAL_RCC_ClockConfig+0x140>)
 80066aa:	f012 0f04 	tst.w	r2, #4
 80066ae:	d177      	bne.n	80067a0 <HAL_RCC_ClockConfig+0x12c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80066b0:	0713      	lsls	r3, r2, #28
 80066b2:	d506      	bpl.n	80066c2 <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80066b4:	686b      	ldr	r3, [r5, #4]
 80066b6:	6922      	ldr	r2, [r4, #16]
 80066b8:	f423 5360 	bic.w	r3, r3, #14336	@ 0x3800
 80066bc:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80066c0:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80066c2:	f7ff ffb3 	bl	800662c <HAL_RCC_GetSysClockFreq>
 80066c6:	686b      	ldr	r3, [r5, #4]
 80066c8:	22f0      	movs	r2, #240	@ 0xf0
 80066ca:	fa92 f2a2 	rbit	r2, r2
 80066ce:	fab2 f282 	clz	r2, r2
 80066d2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80066d6:	40d3      	lsrs	r3, r2
 80066d8:	4a37      	ldr	r2, [pc, #220]	@ (80067b8 <HAL_RCC_ClockConfig+0x144>)
 80066da:	5cd3      	ldrb	r3, [r2, r3]
 80066dc:	40d8      	lsrs	r0, r3
 80066de:	4b37      	ldr	r3, [pc, #220]	@ (80067bc <HAL_RCC_ClockConfig+0x148>)
 80066e0:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 80066e2:	4b37      	ldr	r3, [pc, #220]	@ (80067c0 <HAL_RCC_ClockConfig+0x14c>)
 80066e4:	6818      	ldr	r0, [r3, #0]
 80066e6:	f7fe fc4d 	bl	8004f84 <HAL_InitTick>
  return HAL_OK;
 80066ea:	2000      	movs	r0, #0
 80066ec:	e7c8      	b.n	8006680 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80066ee:	6813      	ldr	r3, [r2, #0]
 80066f0:	f023 0307 	bic.w	r3, r3, #7
 80066f4:	430b      	orrs	r3, r1
 80066f6:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80066f8:	6813      	ldr	r3, [r2, #0]
 80066fa:	f003 0307 	and.w	r3, r3, #7
 80066fe:	428b      	cmp	r3, r1
 8006700:	d1bd      	bne.n	800667e <HAL_RCC_ClockConfig+0xa>
 8006702:	e7c5      	b.n	8006690 <HAL_RCC_ClockConfig+0x1c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006704:	492b      	ldr	r1, [pc, #172]	@ (80067b4 <HAL_RCC_ClockConfig+0x140>)
 8006706:	68a0      	ldr	r0, [r4, #8]
 8006708:	684b      	ldr	r3, [r1, #4]
 800670a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800670e:	4303      	orrs	r3, r0
 8006710:	604b      	str	r3, [r1, #4]
 8006712:	e7c0      	b.n	8006696 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006714:	6862      	ldr	r2, [r4, #4]
 8006716:	4e27      	ldr	r6, [pc, #156]	@ (80067b4 <HAL_RCC_ClockConfig+0x140>)
 8006718:	2a01      	cmp	r2, #1
 800671a:	d124      	bne.n	8006766 <HAL_RCC_ClockConfig+0xf2>
 800671c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8006720:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006724:	6831      	ldr	r1, [r6, #0]
 8006726:	fa93 f3a3 	rbit	r3, r3
 800672a:	fab3 f383 	clz	r3, r3
 800672e:	fa02 f303 	lsl.w	r3, r2, r3
 8006732:	420b      	tst	r3, r1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006734:	d0a3      	beq.n	800667e <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006736:	6873      	ldr	r3, [r6, #4]
 8006738:	f023 0303 	bic.w	r3, r3, #3
 800673c:	4313      	orrs	r3, r2
 800673e:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8006740:	f7fe fdca 	bl	80052d8 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006744:	f241 3888 	movw	r8, #5000	@ 0x1388
    tickstart = HAL_GetTick();
 8006748:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800674a:	6873      	ldr	r3, [r6, #4]
 800674c:	6862      	ldr	r2, [r4, #4]
 800674e:	f003 030c 	and.w	r3, r3, #12
 8006752:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8006756:	d0a0      	beq.n	800669a <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006758:	f7fe fdbe 	bl	80052d8 <HAL_GetTick>
 800675c:	1bc0      	subs	r0, r0, r7
 800675e:	4540      	cmp	r0, r8
 8006760:	d9f3      	bls.n	800674a <HAL_RCC_ClockConfig+0xd6>
        return HAL_TIMEOUT;
 8006762:	2003      	movs	r0, #3
 8006764:	e78c      	b.n	8006680 <HAL_RCC_ClockConfig+0xc>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006766:	2a02      	cmp	r2, #2
 8006768:	bf0c      	ite	eq
 800676a:	f04f 7300 	moveq.w	r3, #33554432	@ 0x2000000
 800676e:	2302      	movne	r3, #2
 8006770:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006774:	6830      	ldr	r0, [r6, #0]
 8006776:	fa93 f3a3 	rbit	r3, r3
 800677a:	2101      	movs	r1, #1
 800677c:	fab3 f383 	clz	r3, r3
 8006780:	fa01 f303 	lsl.w	r3, r1, r3
 8006784:	4203      	tst	r3, r0
 8006786:	e7d5      	b.n	8006734 <HAL_RCC_ClockConfig+0xc0>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006788:	6813      	ldr	r3, [r2, #0]
 800678a:	f023 0307 	bic.w	r3, r3, #7
 800678e:	432b      	orrs	r3, r5
 8006790:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006792:	6813      	ldr	r3, [r2, #0]
 8006794:	f003 0307 	and.w	r3, r3, #7
 8006798:	42ab      	cmp	r3, r5
 800679a:	f47f af70 	bne.w	800667e <HAL_RCC_ClockConfig+0xa>
 800679e:	e782      	b.n	80066a6 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80067a0:	686b      	ldr	r3, [r5, #4]
 80067a2:	68e1      	ldr	r1, [r4, #12]
 80067a4:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80067a8:	430b      	orrs	r3, r1
 80067aa:	606b      	str	r3, [r5, #4]
 80067ac:	e780      	b.n	80066b0 <HAL_RCC_ClockConfig+0x3c>
 80067ae:	bf00      	nop
 80067b0:	40022000 	.word	0x40022000
 80067b4:	40021000 	.word	0x40021000
 80067b8:	080139d7 	.word	0x080139d7
 80067bc:	20000014 	.word	0x20000014
 80067c0:	2000001c 	.word	0x2000001c

080067c4 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80067c4:	4b08      	ldr	r3, [pc, #32]	@ (80067e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80067c6:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80067ca:	685b      	ldr	r3, [r3, #4]
 80067cc:	fa92 f2a2 	rbit	r2, r2
 80067d0:	fab2 f282 	clz	r2, r2
 80067d4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80067d8:	40d3      	lsrs	r3, r2
 80067da:	4a04      	ldr	r2, [pc, #16]	@ (80067ec <HAL_RCC_GetPCLK1Freq+0x28>)
 80067dc:	5cd3      	ldrb	r3, [r2, r3]
 80067de:	4a04      	ldr	r2, [pc, #16]	@ (80067f0 <HAL_RCC_GetPCLK1Freq+0x2c>)
 80067e0:	6810      	ldr	r0, [r2, #0]
}    
 80067e2:	40d8      	lsrs	r0, r3
 80067e4:	4770      	bx	lr
 80067e6:	bf00      	nop
 80067e8:	40021000 	.word	0x40021000
 80067ec:	080139cf 	.word	0x080139cf
 80067f0:	20000014 	.word	0x20000014

080067f4 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80067f4:	4b08      	ldr	r3, [pc, #32]	@ (8006818 <HAL_RCC_GetPCLK2Freq+0x24>)
 80067f6:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 80067fa:	685b      	ldr	r3, [r3, #4]
 80067fc:	fa92 f2a2 	rbit	r2, r2
 8006800:	fab2 f282 	clz	r2, r2
 8006804:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8006808:	40d3      	lsrs	r3, r2
 800680a:	4a04      	ldr	r2, [pc, #16]	@ (800681c <HAL_RCC_GetPCLK2Freq+0x28>)
 800680c:	5cd3      	ldrb	r3, [r2, r3]
 800680e:	4a04      	ldr	r2, [pc, #16]	@ (8006820 <HAL_RCC_GetPCLK2Freq+0x2c>)
 8006810:	6810      	ldr	r0, [r2, #0]
} 
 8006812:	40d8      	lsrs	r0, r3
 8006814:	4770      	bx	lr
 8006816:	bf00      	nop
 8006818:	40021000 	.word	0x40021000
 800681c:	080139cf 	.word	0x080139cf
 8006820:	20000014 	.word	0x20000014

08006824 <HAL_RCC_GetClockConfig>:
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006824:	230f      	movs	r3, #15
 8006826:	6003      	str	r3, [r0, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006828:	4b0b      	ldr	r3, [pc, #44]	@ (8006858 <HAL_RCC_GetClockConfig+0x34>)
 800682a:	685a      	ldr	r2, [r3, #4]
 800682c:	f002 0203 	and.w	r2, r2, #3
 8006830:	6042      	str	r2, [r0, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8006832:	685a      	ldr	r2, [r3, #4]
 8006834:	f002 02f0 	and.w	r2, r2, #240	@ 0xf0
 8006838:	6082      	str	r2, [r0, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 800683a:	685a      	ldr	r2, [r3, #4]
 800683c:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
 8006840:	60c2      	str	r2, [r0, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8006842:	685b      	ldr	r3, [r3, #4]
 8006844:	08db      	lsrs	r3, r3, #3
 8006846:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800684a:	6103      	str	r3, [r0, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 800684c:	4b03      	ldr	r3, [pc, #12]	@ (800685c <HAL_RCC_GetClockConfig+0x38>)
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	f003 0307 	and.w	r3, r3, #7
 8006854:	600b      	str	r3, [r1, #0]
}
 8006856:	4770      	bx	lr
 8006858:	40021000 	.word	0x40021000
 800685c:	40022000 	.word	0x40022000

08006860 <HAL_RCCEx_PeriphCLKConfig>:
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006860:	6803      	ldr	r3, [r0, #0]
{
 8006862:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006866:	03dd      	lsls	r5, r3, #15
{
 8006868:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800686a:	d524      	bpl.n	80068b6 <HAL_RCCEx_PeriphCLKConfig+0x56>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800686c:	4d78      	ldr	r5, [pc, #480]	@ (8006a50 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 800686e:	69eb      	ldr	r3, [r5, #28]
 8006870:	00d8      	lsls	r0, r3, #3
 8006872:	f100 8091 	bmi.w	8006998 <HAL_RCCEx_PeriphCLKConfig+0x138>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006876:	69eb      	ldr	r3, [r5, #28]
 8006878:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800687c:	61eb      	str	r3, [r5, #28]
 800687e:	69eb      	ldr	r3, [r5, #28]
 8006880:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006884:	9301      	str	r3, [sp, #4]
 8006886:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8006888:	2601      	movs	r6, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800688a:	4f72      	ldr	r7, [pc, #456]	@ (8006a54 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 800688c:	683b      	ldr	r3, [r7, #0]
 800688e:	05d9      	lsls	r1, r3, #23
 8006890:	f140 8084 	bpl.w	800699c <HAL_RCCEx_PeriphCLKConfig+0x13c>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006894:	6a2b      	ldr	r3, [r5, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006896:	6862      	ldr	r2, [r4, #4]
 8006898:	f413 7340 	ands.w	r3, r3, #768	@ 0x300
 800689c:	f040 8093 	bne.w	80069c6 <HAL_RCCEx_PeriphCLKConfig+0x166>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80068a0:	6a2b      	ldr	r3, [r5, #32]
 80068a2:	6862      	ldr	r2, [r4, #4]
 80068a4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80068a8:	4313      	orrs	r3, r2
 80068aa:	622b      	str	r3, [r5, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80068ac:	b11e      	cbz	r6, 80068b6 <HAL_RCCEx_PeriphCLKConfig+0x56>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80068ae:	69eb      	ldr	r3, [r5, #28]
 80068b0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80068b4:	61eb      	str	r3, [r5, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80068b6:	6823      	ldr	r3, [r4, #0]
 80068b8:	07df      	lsls	r7, r3, #31
 80068ba:	d506      	bpl.n	80068ca <HAL_RCCEx_PeriphCLKConfig+0x6a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80068bc:	4964      	ldr	r1, [pc, #400]	@ (8006a50 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 80068be:	68a0      	ldr	r0, [r4, #8]
 80068c0:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 80068c2:	f022 0203 	bic.w	r2, r2, #3
 80068c6:	4302      	orrs	r2, r0
 80068c8:	630a      	str	r2, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80068ca:	079e      	lsls	r6, r3, #30
 80068cc:	d506      	bpl.n	80068dc <HAL_RCCEx_PeriphCLKConfig+0x7c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80068ce:	4960      	ldr	r1, [pc, #384]	@ (8006a50 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 80068d0:	68e0      	ldr	r0, [r4, #12]
 80068d2:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 80068d4:	f422 3240 	bic.w	r2, r2, #196608	@ 0x30000
 80068d8:	4302      	orrs	r2, r0
 80068da:	630a      	str	r2, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80068dc:	075d      	lsls	r5, r3, #29
 80068de:	d506      	bpl.n	80068ee <HAL_RCCEx_PeriphCLKConfig+0x8e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80068e0:	495b      	ldr	r1, [pc, #364]	@ (8006a50 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 80068e2:	6920      	ldr	r0, [r4, #16]
 80068e4:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 80068e6:	f422 2240 	bic.w	r2, r2, #786432	@ 0xc0000
 80068ea:	4302      	orrs	r2, r0
 80068ec:	630a      	str	r2, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80068ee:	0698      	lsls	r0, r3, #26
 80068f0:	d506      	bpl.n	8006900 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80068f2:	4957      	ldr	r1, [pc, #348]	@ (8006a50 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 80068f4:	69e0      	ldr	r0, [r4, #28]
 80068f6:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 80068f8:	f022 0210 	bic.w	r2, r2, #16
 80068fc:	4302      	orrs	r2, r0
 80068fe:	630a      	str	r2, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006900:	0399      	lsls	r1, r3, #14
 8006902:	d506      	bpl.n	8006912 <HAL_RCCEx_PeriphCLKConfig+0xb2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8006904:	4952      	ldr	r1, [pc, #328]	@ (8006a50 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8006906:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8006908:	684a      	ldr	r2, [r1, #4]
 800690a:	f422 0280 	bic.w	r2, r2, #4194304	@ 0x400000
 800690e:	4302      	orrs	r2, r0
 8006910:	604a      	str	r2, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006912:	065a      	lsls	r2, r3, #25
 8006914:	d506      	bpl.n	8006924 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006916:	494e      	ldr	r1, [pc, #312]	@ (8006a50 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8006918:	6a20      	ldr	r0, [r4, #32]
 800691a:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 800691c:	f022 0220 	bic.w	r2, r2, #32
 8006920:	4302      	orrs	r2, r0
 8006922:	630a      	str	r2, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006924:	071f      	lsls	r7, r3, #28
 8006926:	d506      	bpl.n	8006936 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006928:	4949      	ldr	r1, [pc, #292]	@ (8006a50 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 800692a:	6960      	ldr	r0, [r4, #20]
 800692c:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 800692e:	f422 1240 	bic.w	r2, r2, #3145728	@ 0x300000
 8006932:	4302      	orrs	r2, r0
 8006934:	630a      	str	r2, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006936:	06de      	lsls	r6, r3, #27
 8006938:	d506      	bpl.n	8006948 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800693a:	4945      	ldr	r1, [pc, #276]	@ (8006a50 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 800693c:	69a0      	ldr	r0, [r4, #24]
 800693e:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 8006940:	f422 0240 	bic.w	r2, r2, #12582912	@ 0xc00000
 8006944:	4302      	orrs	r2, r0
 8006946:	630a      	str	r2, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8006948:	059d      	lsls	r5, r3, #22
 800694a:	d506      	bpl.n	800695a <HAL_RCCEx_PeriphCLKConfig+0xfa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800694c:	4940      	ldr	r1, [pc, #256]	@ (8006a50 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 800694e:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8006950:	684a      	ldr	r2, [r1, #4]
 8006952:	f422 0200 	bic.w	r2, r2, #8388608	@ 0x800000
 8006956:	4302      	orrs	r2, r0
 8006958:	604a      	str	r2, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800695a:	0618      	lsls	r0, r3, #24
 800695c:	d506      	bpl.n	800696c <HAL_RCCEx_PeriphCLKConfig+0x10c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800695e:	493c      	ldr	r1, [pc, #240]	@ (8006a50 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8006960:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8006962:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 8006964:	f422 72f8 	bic.w	r2, r2, #496	@ 0x1f0
 8006968:	4302      	orrs	r2, r0
 800696a:	62ca      	str	r2, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 800696c:	05d9      	lsls	r1, r3, #23
 800696e:	d506      	bpl.n	800697e <HAL_RCCEx_PeriphCLKConfig+0x11e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8006970:	4937      	ldr	r1, [pc, #220]	@ (8006a50 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8006972:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8006974:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 8006976:	f422 5278 	bic.w	r2, r2, #15872	@ 0x3e00
 800697a:	4302      	orrs	r2, r0
 800697c:	62ca      	str	r2, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800697e:	04da      	lsls	r2, r3, #19
 8006980:	d506      	bpl.n	8006990 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8006982:	4933      	ldr	r1, [pc, #204]	@ (8006a50 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8006984:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8006986:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 8006988:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800698c:	4302      	orrs	r2, r0
 800698e:	630a      	str	r2, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8006990:	049b      	lsls	r3, r3, #18
 8006992:	d454      	bmi.n	8006a3e <HAL_RCCEx_PeriphCLKConfig+0x1de>
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8006994:	2000      	movs	r0, #0
 8006996:	e013      	b.n	80069c0 <HAL_RCCEx_PeriphCLKConfig+0x160>
  FlagStatus       pwrclkchanged = RESET;
 8006998:	2600      	movs	r6, #0
 800699a:	e776      	b.n	800688a <HAL_RCCEx_PeriphCLKConfig+0x2a>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800699c:	683b      	ldr	r3, [r7, #0]
 800699e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80069a2:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 80069a4:	f7fe fc98 	bl	80052d8 <HAL_GetTick>
 80069a8:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80069aa:	683b      	ldr	r3, [r7, #0]
 80069ac:	05da      	lsls	r2, r3, #23
 80069ae:	f53f af71 	bmi.w	8006894 <HAL_RCCEx_PeriphCLKConfig+0x34>
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80069b2:	f7fe fc91 	bl	80052d8 <HAL_GetTick>
 80069b6:	eba0 0008 	sub.w	r0, r0, r8
 80069ba:	2864      	cmp	r0, #100	@ 0x64
 80069bc:	d9f5      	bls.n	80069aa <HAL_RCCEx_PeriphCLKConfig+0x14a>
          return HAL_TIMEOUT;
 80069be:	2003      	movs	r0, #3
}
 80069c0:	b002      	add	sp, #8
 80069c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80069c6:	f402 7240 	and.w	r2, r2, #768	@ 0x300
 80069ca:	429a      	cmp	r2, r3
 80069cc:	f43f af68 	beq.w	80068a0 <HAL_RCCEx_PeriphCLKConfig+0x40>
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80069d0:	6a29      	ldr	r1, [r5, #32]
 80069d2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80069d6:	f421 7040 	bic.w	r0, r1, #768	@ 0x300
 80069da:	fa93 f2a3 	rbit	r2, r3
      __HAL_RCC_BACKUPRESET_FORCE();
 80069de:	f8df c078 	ldr.w	ip, [pc, #120]	@ 8006a58 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80069e2:	fab2 f282 	clz	r2, r2
 80069e6:	4462      	add	r2, ip
 80069e8:	0092      	lsls	r2, r2, #2
 80069ea:	2701      	movs	r7, #1
 80069ec:	6017      	str	r7, [r2, #0]
 80069ee:	fa93 f3a3 	rbit	r3, r3
      __HAL_RCC_BACKUPRESET_RELEASE();
 80069f2:	fab3 f383 	clz	r3, r3
 80069f6:	4463      	add	r3, ip
 80069f8:	009b      	lsls	r3, r3, #2
 80069fa:	2200      	movs	r2, #0
 80069fc:	601a      	str	r2, [r3, #0]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80069fe:	07cb      	lsls	r3, r1, #31
      RCC->BDCR = temp_reg;
 8006a00:	6228      	str	r0, [r5, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8006a02:	f57f af4d 	bpl.w	80068a0 <HAL_RCCEx_PeriphCLKConfig+0x40>
        tickstart = HAL_GetTick();
 8006a06:	f7fe fc67 	bl	80052d8 <HAL_GetTick>
 8006a0a:	f04f 0802 	mov.w	r8, #2
 8006a0e:	4681      	mov	r9, r0
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006a10:	f241 3a88 	movw	sl, #5000	@ 0x1388
 8006a14:	fa98 f3a8 	rbit	r3, r8
 8006a18:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006a1c:	6a2a      	ldr	r2, [r5, #32]
 8006a1e:	fa98 f3a8 	rbit	r3, r8
 8006a22:	fab3 f383 	clz	r3, r3
 8006a26:	fa07 f303 	lsl.w	r3, r7, r3
 8006a2a:	4213      	tst	r3, r2
 8006a2c:	f47f af38 	bne.w	80068a0 <HAL_RCCEx_PeriphCLKConfig+0x40>
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006a30:	f7fe fc52 	bl	80052d8 <HAL_GetTick>
 8006a34:	eba0 0009 	sub.w	r0, r0, r9
 8006a38:	4550      	cmp	r0, sl
 8006a3a:	d9eb      	bls.n	8006a14 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 8006a3c:	e7bf      	b.n	80069be <HAL_RCCEx_PeriphCLKConfig+0x15e>
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8006a3e:	4a04      	ldr	r2, [pc, #16]	@ (8006a50 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8006a40:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006a42:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8006a44:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006a48:	430b      	orrs	r3, r1
 8006a4a:	6313      	str	r3, [r2, #48]	@ 0x30
 8006a4c:	e7a2      	b.n	8006994 <HAL_RCCEx_PeriphCLKConfig+0x134>
 8006a4e:	bf00      	nop
 8006a50:	40021000 	.word	0x40021000
 8006a54:	40007000 	.word	0x40007000
 8006a58:	10908100 	.word	0x10908100

08006a5c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8006a5c:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8006a5e:	6803      	ldr	r3, [r0, #0]
 8006a60:	4a09      	ldr	r2, [pc, #36]	@ (8006a88 <HAL_RTC_WaitForSynchro+0x2c>)
 8006a62:	60da      	str	r2, [r3, #12]
{
 8006a64:	4604      	mov	r4, r0

  /* Get tick */
  tickstart = HAL_GetTick();
 8006a66:	f7fe fc37 	bl	80052d8 <HAL_GetTick>
 8006a6a:	4605      	mov	r5, r0

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006a6c:	6823      	ldr	r3, [r4, #0]
 8006a6e:	68db      	ldr	r3, [r3, #12]
 8006a70:	069b      	lsls	r3, r3, #26
 8006a72:	d501      	bpl.n	8006a78 <HAL_RTC_WaitForSynchro+0x1c>
    {
      return HAL_TIMEOUT;
    }
  }

  return HAL_OK;
 8006a74:	2000      	movs	r0, #0
}
 8006a76:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006a78:	f7fe fc2e 	bl	80052d8 <HAL_GetTick>
 8006a7c:	1b40      	subs	r0, r0, r5
 8006a7e:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8006a82:	d9f3      	bls.n	8006a6c <HAL_RTC_WaitForSynchro+0x10>
      return HAL_TIMEOUT;
 8006a84:	2003      	movs	r0, #3
 8006a86:	e7f6      	b.n	8006a76 <HAL_RTC_WaitForSynchro+0x1a>
 8006a88:	0001ff5f 	.word	0x0001ff5f

08006a8c <RTC_EnterInitMode>:
{
  uint32_t tickstart = 0U;
  HAL_StatusTypeDef status = HAL_OK;

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8006a8c:	6803      	ldr	r3, [r0, #0]
{
 8006a8e:	b570      	push	{r4, r5, r6, lr}
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8006a90:	68dc      	ldr	r4, [r3, #12]
 8006a92:	f014 0440 	ands.w	r4, r4, #64	@ 0x40
{
 8006a96:	4605      	mov	r5, r0
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8006a98:	d117      	bne.n	8006aca <RTC_EnterInitMode+0x3e>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8006a9a:	68da      	ldr	r2, [r3, #12]
 8006a9c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8006aa0:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006aa2:	f7fe fc19 	bl	80052d8 <HAL_GetTick>
 8006aa6:	4606      	mov	r6, r0

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8006aa8:	682b      	ldr	r3, [r5, #0]
 8006aaa:	68db      	ldr	r3, [r3, #12]
 8006aac:	065b      	lsls	r3, r3, #25
 8006aae:	d400      	bmi.n	8006ab2 <RTC_EnterInitMode+0x26>
 8006ab0:	b10c      	cbz	r4, 8006ab6 <RTC_EnterInitMode+0x2a>
      }
    }
  }

  return status;
}
 8006ab2:	4620      	mov	r0, r4
 8006ab4:	bd70      	pop	{r4, r5, r6, pc}
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006ab6:	f7fe fc0f 	bl	80052d8 <HAL_GetTick>
 8006aba:	1b80      	subs	r0, r0, r6
 8006abc:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
        hrtc->State = HAL_RTC_STATE_ERROR;
 8006ac0:	bf82      	ittt	hi
 8006ac2:	2304      	movhi	r3, #4
 8006ac4:	776b      	strbhi	r3, [r5, #29]
        status = HAL_ERROR;
 8006ac6:	2401      	movhi	r4, #1
 8006ac8:	e7ee      	b.n	8006aa8 <RTC_EnterInitMode+0x1c>
  HAL_StatusTypeDef status = HAL_OK;
 8006aca:	2400      	movs	r4, #0
 8006acc:	e7f1      	b.n	8006ab2 <RTC_EnterInitMode+0x26>

08006ace <RTC_ExitInitMode>:
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
  HAL_StatusTypeDef status = HAL_OK;

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8006ace:	6803      	ldr	r3, [r0, #0]
 8006ad0:	68da      	ldr	r2, [r3, #12]
 8006ad2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
{
 8006ad6:	b510      	push	{r4, lr}
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8006ad8:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8006ada:	689b      	ldr	r3, [r3, #8]
 8006adc:	069b      	lsls	r3, r3, #26
{
 8006ade:	4604      	mov	r4, r0
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8006ae0:	d501      	bpl.n	8006ae6 <RTC_ExitInitMode+0x18>
  HAL_StatusTypeDef status = HAL_OK;
 8006ae2:	2000      	movs	r0, #0
      status = HAL_ERROR;
    }
  }

  return status;
}
 8006ae4:	bd10      	pop	{r4, pc}
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006ae6:	f7ff ffb9 	bl	8006a5c <HAL_RTC_WaitForSynchro>
 8006aea:	2800      	cmp	r0, #0
 8006aec:	d0f9      	beq.n	8006ae2 <RTC_ExitInitMode+0x14>
      hrtc->State = HAL_RTC_STATE_ERROR;
 8006aee:	2304      	movs	r3, #4
 8006af0:	7763      	strb	r3, [r4, #29]
      status = HAL_ERROR;
 8006af2:	2001      	movs	r0, #1
 8006af4:	e7f6      	b.n	8006ae4 <RTC_ExitInitMode+0x16>

08006af6 <HAL_RTC_Init>:
{
 8006af6:	b510      	push	{r4, lr}
  if (hrtc == NULL)
 8006af8:	4604      	mov	r4, r0
 8006afa:	2800      	cmp	r0, #0
 8006afc:	d041      	beq.n	8006b82 <HAL_RTC_Init+0x8c>
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8006afe:	7f43      	ldrb	r3, [r0, #29]
 8006b00:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8006b04:	b913      	cbnz	r3, 8006b0c <HAL_RTC_Init+0x16>
    hrtc->Lock = HAL_UNLOCKED;
 8006b06:	7702      	strb	r2, [r0, #28]
    HAL_RTC_MspInit(hrtc);
 8006b08:	f7fe f904 	bl	8004d14 <HAL_RTC_MspInit>
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006b0c:	2302      	movs	r3, #2
 8006b0e:	7763      	strb	r3, [r4, #29]
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8006b10:	6823      	ldr	r3, [r4, #0]
 8006b12:	68da      	ldr	r2, [r3, #12]
 8006b14:	06d2      	lsls	r2, r2, #27
 8006b16:	d503      	bpl.n	8006b20 <HAL_RTC_Init+0x2a>
    hrtc->State = HAL_RTC_STATE_READY;
 8006b18:	2301      	movs	r3, #1
 8006b1a:	7763      	strb	r3, [r4, #29]
 8006b1c:	2000      	movs	r0, #0
}
 8006b1e:	bd10      	pop	{r4, pc}
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006b20:	22ca      	movs	r2, #202	@ 0xca
 8006b22:	625a      	str	r2, [r3, #36]	@ 0x24
 8006b24:	2253      	movs	r2, #83	@ 0x53
 8006b26:	625a      	str	r2, [r3, #36]	@ 0x24
    status = RTC_EnterInitMode(hrtc);
 8006b28:	4620      	mov	r0, r4
 8006b2a:	f7ff ffaf 	bl	8006a8c <RTC_EnterInitMode>
    if (status == HAL_OK)
 8006b2e:	bb10      	cbnz	r0, 8006b76 <HAL_RTC_Init+0x80>
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8006b30:	6823      	ldr	r3, [r4, #0]
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8006b32:	6920      	ldr	r0, [r4, #16]
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8006b34:	689a      	ldr	r2, [r3, #8]
 8006b36:	f422 02e0 	bic.w	r2, r2, #7340032	@ 0x700000
 8006b3a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006b3e:	609a      	str	r2, [r3, #8]
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8006b40:	6862      	ldr	r2, [r4, #4]
 8006b42:	6899      	ldr	r1, [r3, #8]
 8006b44:	4302      	orrs	r2, r0
 8006b46:	6960      	ldr	r0, [r4, #20]
 8006b48:	4302      	orrs	r2, r0
 8006b4a:	430a      	orrs	r2, r1
 8006b4c:	609a      	str	r2, [r3, #8]
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8006b4e:	68e2      	ldr	r2, [r4, #12]
 8006b50:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8006b52:	691a      	ldr	r2, [r3, #16]
 8006b54:	68a1      	ldr	r1, [r4, #8]
 8006b56:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8006b5a:	611a      	str	r2, [r3, #16]
      status = RTC_ExitInitMode(hrtc);
 8006b5c:	4620      	mov	r0, r4
 8006b5e:	f7ff ffb6 	bl	8006ace <RTC_ExitInitMode>
    if (status == HAL_OK)
 8006b62:	b940      	cbnz	r0, 8006b76 <HAL_RTC_Init+0x80>
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8006b64:	6823      	ldr	r3, [r4, #0]
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8006b66:	69a1      	ldr	r1, [r4, #24]
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8006b68:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006b6a:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8006b6e:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8006b70:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006b72:	430a      	orrs	r2, r1
 8006b74:	641a      	str	r2, [r3, #64]	@ 0x40
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006b76:	6823      	ldr	r3, [r4, #0]
 8006b78:	22ff      	movs	r2, #255	@ 0xff
 8006b7a:	625a      	str	r2, [r3, #36]	@ 0x24
  if (status == HAL_OK)
 8006b7c:	2800      	cmp	r0, #0
 8006b7e:	d0cb      	beq.n	8006b18 <HAL_RTC_Init+0x22>
 8006b80:	e7cd      	b.n	8006b1e <HAL_RTC_Init+0x28>
    return HAL_ERROR;
 8006b82:	2001      	movs	r0, #1
 8006b84:	e7cb      	b.n	8006b1e <HAL_RTC_Init+0x28>

08006b86 <RTC_ByteToBcd2>:
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
  uint32_t bcdhigh = 0U;
 8006b86:	2300      	movs	r3, #0

  while (number >= 10U)
 8006b88:	2809      	cmp	r0, #9
 8006b8a:	d803      	bhi.n	8006b94 <RTC_ByteToBcd2+0xe>
  {
    bcdhigh++;
    number -= 10U;
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8006b8c:	ea40 1003 	orr.w	r0, r0, r3, lsl #4
}
 8006b90:	b2c0      	uxtb	r0, r0
 8006b92:	4770      	bx	lr
    number -= 10U;
 8006b94:	380a      	subs	r0, #10
    bcdhigh++;
 8006b96:	3301      	adds	r3, #1
    number -= 10U;
 8006b98:	b2c0      	uxtb	r0, r0
 8006b9a:	e7f5      	b.n	8006b88 <RTC_ByteToBcd2+0x2>

08006b9c <HAL_RTC_SetTime>:
{
 8006b9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(hrtc);
 8006ba0:	7f03      	ldrb	r3, [r0, #28]
 8006ba2:	2b01      	cmp	r3, #1
{
 8006ba4:	4606      	mov	r6, r0
 8006ba6:	460f      	mov	r7, r1
 8006ba8:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(hrtc);
 8006bac:	d041      	beq.n	8006c32 <HAL_RTC_SetTime+0x96>
 8006bae:	2301      	movs	r3, #1
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006bb0:	6831      	ldr	r1, [r6, #0]
  __HAL_LOCK(hrtc);
 8006bb2:	7733      	strb	r3, [r6, #28]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006bb4:	7770      	strb	r0, [r6, #29]
  if (Format == RTC_FORMAT_BIN)
 8006bb6:	7838      	ldrb	r0, [r7, #0]
 8006bb8:	787d      	ldrb	r5, [r7, #1]
 8006bba:	78bc      	ldrb	r4, [r7, #2]
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006bbc:	688b      	ldr	r3, [r1, #8]
  if (Format == RTC_FORMAT_BIN)
 8006bbe:	2a00      	cmp	r2, #0
 8006bc0:	d139      	bne.n	8006c36 <HAL_RTC_SetTime+0x9a>
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006bc2:	f013 0340 	ands.w	r3, r3, #64	@ 0x40
      sTime->TimeFormat = 0x00U;
 8006bc6:	bf08      	it	eq
 8006bc8:	70fb      	strbeq	r3, [r7, #3]
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8006bca:	f7ff ffdc 	bl	8006b86 <RTC_ByteToBcd2>
 8006bce:	4680      	mov	r8, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006bd0:	4628      	mov	r0, r5
 8006bd2:	f7ff ffd8 	bl	8006b86 <RTC_ByteToBcd2>
 8006bd6:	4602      	mov	r2, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8006bd8:	4620      	mov	r0, r4
 8006bda:	f7ff ffd4 	bl	8006b86 <RTC_ByteToBcd2>
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8006bde:	78fb      	ldrb	r3, [r7, #3]
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8006be0:	ea40 5383 	orr.w	r3, r0, r3, lsl #22
 8006be4:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8006be8:	ea43 2402 	orr.w	r4, r3, r2, lsl #8
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006bec:	23ca      	movs	r3, #202	@ 0xca
 8006bee:	624b      	str	r3, [r1, #36]	@ 0x24
 8006bf0:	2353      	movs	r3, #83	@ 0x53
 8006bf2:	624b      	str	r3, [r1, #36]	@ 0x24
  status = RTC_EnterInitMode(hrtc);
 8006bf4:	4630      	mov	r0, r6
 8006bf6:	f7ff ff49 	bl	8006a8c <RTC_EnterInitMode>
  if (status == HAL_OK)
 8006bfa:	b9a8      	cbnz	r0, 8006c28 <HAL_RTC_SetTime+0x8c>
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8006bfc:	6832      	ldr	r2, [r6, #0]
 8006bfe:	f004 347f 	and.w	r4, r4, #2139062143	@ 0x7f7f7f7f
 8006c02:	f024 44fe 	bic.w	r4, r4, #2130706432	@ 0x7f000000
 8006c06:	6014      	str	r4, [r2, #0]
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8006c08:	6893      	ldr	r3, [r2, #8]
 8006c0a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006c0e:	6093      	str	r3, [r2, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8006c10:	e9d7 3003 	ldrd	r3, r0, [r7, #12]
 8006c14:	6891      	ldr	r1, [r2, #8]
 8006c16:	4303      	orrs	r3, r0
 8006c18:	430b      	orrs	r3, r1
 8006c1a:	6093      	str	r3, [r2, #8]
    status = RTC_ExitInitMode(hrtc);
 8006c1c:	4630      	mov	r0, r6
 8006c1e:	f7ff ff56 	bl	8006ace <RTC_ExitInitMode>
  if (status == HAL_OK)
 8006c22:	b908      	cbnz	r0, 8006c28 <HAL_RTC_SetTime+0x8c>
    hrtc->State = HAL_RTC_STATE_READY;
 8006c24:	2301      	movs	r3, #1
 8006c26:	7773      	strb	r3, [r6, #29]
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006c28:	6833      	ldr	r3, [r6, #0]
 8006c2a:	22ff      	movs	r2, #255	@ 0xff
 8006c2c:	625a      	str	r2, [r3, #36]	@ 0x24
  __HAL_UNLOCK(hrtc);
 8006c2e:	2300      	movs	r3, #0
 8006c30:	7733      	strb	r3, [r6, #28]
}
 8006c32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006c36:	f013 0340 	ands.w	r3, r3, #64	@ 0x40
      sTime->TimeFormat = 0x00U;
 8006c3a:	bf08      	it	eq
 8006c3c:	70fb      	strbeq	r3, [r7, #3]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8006c3e:	022d      	lsls	r5, r5, #8
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8006c40:	78fa      	ldrb	r2, [r7, #3]
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8006c42:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8006c46:	ea45 0304 	orr.w	r3, r5, r4
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8006c4a:	ea43 5482 	orr.w	r4, r3, r2, lsl #22
 8006c4e:	e7cd      	b.n	8006bec <HAL_RTC_SetTime+0x50>

08006c50 <HAL_RTC_SetDate>:
{
 8006c50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hrtc);
 8006c52:	7f03      	ldrb	r3, [r0, #28]
 8006c54:	2b01      	cmp	r3, #1
{
 8006c56:	4605      	mov	r5, r0
 8006c58:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(hrtc);
 8006c5c:	d027      	beq.n	8006cae <HAL_RTC_SetDate+0x5e>
 8006c5e:	2301      	movs	r3, #1
 8006c60:	772b      	strb	r3, [r5, #28]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006c62:	7768      	strb	r0, [r5, #29]
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8006c64:	780e      	ldrb	r6, [r1, #0]
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8006c66:	78c8      	ldrb	r0, [r1, #3]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8006c68:	784c      	ldrb	r4, [r1, #1]
                  ((uint32_t) sDate->Date)                      | \
 8006c6a:	788f      	ldrb	r7, [r1, #2]
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8006c6c:	0376      	lsls	r6, r6, #13
  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8006c6e:	b1fa      	cbz	r2, 8006cb0 <HAL_RTC_SetDate+0x60>
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8006c70:	ea46 4300 	orr.w	r3, r6, r0, lsl #16
 8006c74:	433b      	orrs	r3, r7
 8006c76:	ea43 2404 	orr.w	r4, r3, r4, lsl #8
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006c7a:	682b      	ldr	r3, [r5, #0]
 8006c7c:	22ca      	movs	r2, #202	@ 0xca
 8006c7e:	625a      	str	r2, [r3, #36]	@ 0x24
 8006c80:	2253      	movs	r2, #83	@ 0x53
 8006c82:	625a      	str	r2, [r3, #36]	@ 0x24
  status = RTC_EnterInitMode(hrtc);
 8006c84:	4628      	mov	r0, r5
 8006c86:	f7ff ff01 	bl	8006a8c <RTC_EnterInitMode>
  if (status == HAL_OK)
 8006c8a:	b958      	cbnz	r0, 8006ca4 <HAL_RTC_SetDate+0x54>
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8006c8c:	682a      	ldr	r2, [r5, #0]
 8006c8e:	f024 447f 	bic.w	r4, r4, #4278190080	@ 0xff000000
 8006c92:	f024 04c0 	bic.w	r4, r4, #192	@ 0xc0
 8006c96:	6054      	str	r4, [r2, #4]
    status = RTC_ExitInitMode(hrtc);
 8006c98:	4628      	mov	r0, r5
 8006c9a:	f7ff ff18 	bl	8006ace <RTC_ExitInitMode>
  if (status == HAL_OK)
 8006c9e:	b908      	cbnz	r0, 8006ca4 <HAL_RTC_SetDate+0x54>
    hrtc->State = HAL_RTC_STATE_READY;
 8006ca0:	2301      	movs	r3, #1
 8006ca2:	776b      	strb	r3, [r5, #29]
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006ca4:	682b      	ldr	r3, [r5, #0]
 8006ca6:	22ff      	movs	r2, #255	@ 0xff
 8006ca8:	625a      	str	r2, [r3, #36]	@ 0x24
  __HAL_UNLOCK(hrtc);
 8006caa:	2300      	movs	r3, #0
 8006cac:	772b      	strb	r3, [r5, #28]
}
 8006cae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8006cb0:	06e3      	lsls	r3, r4, #27
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8006cb2:	bf42      	ittt	mi
 8006cb4:	f024 0410 	bicmi.w	r4, r4, #16
 8006cb8:	340a      	addmi	r4, #10
 8006cba:	704c      	strbmi	r4, [r1, #1]
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8006cbc:	f7ff ff63 	bl	8006b86 <RTC_ByteToBcd2>
 8006cc0:	4604      	mov	r4, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8006cc2:	7848      	ldrb	r0, [r1, #1]
 8006cc4:	f7ff ff5f 	bl	8006b86 <RTC_ByteToBcd2>
 8006cc8:	4602      	mov	r2, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8006cca:	4638      	mov	r0, r7
 8006ccc:	f7ff ff5b 	bl	8006b86 <RTC_ByteToBcd2>
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8006cd0:	ea40 0306 	orr.w	r3, r0, r6
 8006cd4:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8006cd8:	ea43 2402 	orr.w	r4, r3, r2, lsl #8
 8006cdc:	e7cd      	b.n	8006c7a <HAL_RTC_SetDate+0x2a>

08006cde <RTC_Bcd2ToByte>:
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
  uint32_t tens = 0U;
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 8006cde:	0903      	lsrs	r3, r0, #4
 8006ce0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 8006ce4:	f000 000f 	and.w	r0, r0, #15
 8006ce8:	eb00 0043 	add.w	r0, r0, r3, lsl #1
}
 8006cec:	b2c0      	uxtb	r0, r0
 8006cee:	4770      	bx	lr

08006cf0 <HAL_RTC_GetTime>:
{
 8006cf0:	b538      	push	{r3, r4, r5, lr}
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8006cf2:	6803      	ldr	r3, [r0, #0]
 8006cf4:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8006cf6:	6048      	str	r0, [r1, #4]
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8006cf8:	6918      	ldr	r0, [r3, #16]
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8006cfa:	681b      	ldr	r3, [r3, #0]
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8006cfc:	f3c0 000e 	ubfx	r0, r0, #0, #15
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8006d00:	f3c3 2506 	ubfx	r5, r3, #8, #7
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8006d04:	f003 047f 	and.w	r4, r3, #127	@ 0x7f
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8006d08:	6088      	str	r0, [r1, #8]
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8006d0a:	f3c3 4005 	ubfx	r0, r3, #16, #6
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8006d0e:	f3c3 5380 	ubfx	r3, r3, #22, #1
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8006d12:	7008      	strb	r0, [r1, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8006d14:	704d      	strb	r5, [r1, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8006d16:	708c      	strb	r4, [r1, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8006d18:	70cb      	strb	r3, [r1, #3]
  if (Format == RTC_FORMAT_BIN)
 8006d1a:	b952      	cbnz	r2, 8006d32 <HAL_RTC_GetTime+0x42>
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8006d1c:	f7ff ffdf 	bl	8006cde <RTC_Bcd2ToByte>
 8006d20:	7008      	strb	r0, [r1, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8006d22:	4628      	mov	r0, r5
 8006d24:	f7ff ffdb 	bl	8006cde <RTC_Bcd2ToByte>
 8006d28:	7048      	strb	r0, [r1, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8006d2a:	4620      	mov	r0, r4
 8006d2c:	f7ff ffd7 	bl	8006cde <RTC_Bcd2ToByte>
 8006d30:	7088      	strb	r0, [r1, #2]
}
 8006d32:	2000      	movs	r0, #0
 8006d34:	bd38      	pop	{r3, r4, r5, pc}

08006d36 <HAL_RTC_GetDate>:
{
 8006d36:	b538      	push	{r3, r4, r5, lr}
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8006d38:	6803      	ldr	r3, [r0, #0]
 8006d3a:	685b      	ldr	r3, [r3, #4]
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8006d3c:	f3c3 4007 	ubfx	r0, r3, #16, #8
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8006d40:	f3c3 2504 	ubfx	r5, r3, #8, #5
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8006d44:	f003 043f 	and.w	r4, r3, #63	@ 0x3f
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8006d48:	f3c3 3342 	ubfx	r3, r3, #13, #3
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8006d4c:	70c8      	strb	r0, [r1, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8006d4e:	704d      	strb	r5, [r1, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8006d50:	708c      	strb	r4, [r1, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8006d52:	700b      	strb	r3, [r1, #0]
  if (Format == RTC_FORMAT_BIN)
 8006d54:	b952      	cbnz	r2, 8006d6c <HAL_RTC_GetDate+0x36>
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8006d56:	f7ff ffc2 	bl	8006cde <RTC_Bcd2ToByte>
 8006d5a:	70c8      	strb	r0, [r1, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8006d5c:	4628      	mov	r0, r5
 8006d5e:	f7ff ffbe 	bl	8006cde <RTC_Bcd2ToByte>
 8006d62:	7048      	strb	r0, [r1, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8006d64:	4620      	mov	r0, r4
 8006d66:	f7ff ffba 	bl	8006cde <RTC_Bcd2ToByte>
 8006d6a:	7088      	strb	r0, [r1, #2]
}
 8006d6c:	2000      	movs	r0, #0
 8006d6e:	bd38      	pop	{r3, r4, r5, pc}

08006d70 <SPI_WaitFlagStateUntilTimeout.constprop.0>:
  * @param  State flag state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 8006d70:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006d72:	460e      	mov	r6, r1
 8006d74:	4614      	mov	r4, r2
 8006d76:	4605      	mov	r5, r0
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006d78:	f7fe faae 	bl	80052d8 <HAL_GetTick>
 8006d7c:	4434      	add	r4, r6
 8006d7e:	1a24      	subs	r4, r4, r0
  tmp_tickstart = HAL_GetTick();
 8006d80:	f7fe faaa 	bl	80052d8 <HAL_GetTick>

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006d84:	4b22      	ldr	r3, [pc, #136]	@ (8006e10 <SPI_WaitFlagStateUntilTimeout.constprop.0+0xa0>)
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 8006d8c:	4363      	muls	r3, r4
  tmp_tickstart = HAL_GetTick();
 8006d8e:	4607      	mov	r7, r0
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006d90:	9301      	str	r3, [sp, #4]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006d92:	682a      	ldr	r2, [r5, #0]
 8006d94:	6890      	ldr	r0, [r2, #8]
 8006d96:	f010 0080 	ands.w	r0, r0, #128	@ 0x80
 8006d9a:	d02d      	beq.n	8006df8 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x88>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006d9c:	1c73      	adds	r3, r6, #1
 8006d9e:	d0f9      	beq.n	8006d94 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x24>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006da0:	f7fe fa9a 	bl	80052d8 <HAL_GetTick>
 8006da4:	1bc0      	subs	r0, r0, r7
 8006da6:	42a0      	cmp	r0, r4
 8006da8:	d328      	bcc.n	8006dfc <SPI_WaitFlagStateUntilTimeout.constprop.0+0x8c>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006daa:	682b      	ldr	r3, [r5, #0]
 8006dac:	685a      	ldr	r2, [r3, #4]
 8006dae:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006db2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006db4:	686a      	ldr	r2, [r5, #4]
 8006db6:	f5b2 7f82 	cmp.w	r2, #260	@ 0x104
 8006dba:	d10a      	bne.n	8006dd2 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x62>
 8006dbc:	68aa      	ldr	r2, [r5, #8]
 8006dbe:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
 8006dc2:	d002      	beq.n	8006dca <SPI_WaitFlagStateUntilTimeout.constprop.0+0x5a>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006dc4:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 8006dc8:	d103      	bne.n	8006dd2 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x62>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006dca:	681a      	ldr	r2, [r3, #0]
 8006dcc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006dd0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006dd2:	6aaa      	ldr	r2, [r5, #40]	@ 0x28
 8006dd4:	f5b2 5f00 	cmp.w	r2, #8192	@ 0x2000
 8006dd8:	d107      	bne.n	8006dea <SPI_WaitFlagStateUntilTimeout.constprop.0+0x7a>
        {
          SPI_RESET_CRC(hspi);
 8006dda:	681a      	ldr	r2, [r3, #0]
 8006ddc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006de0:	601a      	str	r2, [r3, #0]
 8006de2:	681a      	ldr	r2, [r3, #0]
 8006de4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006de8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006dea:	2301      	movs	r3, #1
 8006dec:	f885 305d 	strb.w	r3, [r5, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006df0:	2300      	movs	r3, #0
 8006df2:	f885 305c 	strb.w	r3, [r5, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8006df6:	2003      	movs	r0, #3
      count--;
    }
  }

  return HAL_OK;
}
 8006df8:	b003      	add	sp, #12
 8006dfa:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (count == 0U)
 8006dfc:	9a01      	ldr	r2, [sp, #4]
      count--;
 8006dfe:	9b01      	ldr	r3, [sp, #4]
      if (count == 0U)
 8006e00:	2a00      	cmp	r2, #0
      count--;
 8006e02:	f103 33ff 	add.w	r3, r3, #4294967295
 8006e06:	9301      	str	r3, [sp, #4]
 8006e08:	bf08      	it	eq
 8006e0a:	4614      	moveq	r4, r2
 8006e0c:	e7c1      	b.n	8006d92 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x22>
 8006e0e:	bf00      	nop
 8006e10:	20000014 	.word	0x20000014

08006e14 <SPI_WaitFifoStateUntilTimeout.constprop.0>:
  * @param  State Fifo state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8006e14:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006e18:	461c      	mov	r4, r3
{
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8006e1a:	2300      	movs	r3, #0
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8006e1c:	4617      	mov	r7, r2
  __IO uint8_t  tmpreg8 = 0;
 8006e1e:	f88d 3003 	strb.w	r3, [sp, #3]
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8006e22:	4605      	mov	r5, r0
 8006e24:	460e      	mov	r6, r1

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8006e26:	f7fe fa57 	bl	80052d8 <HAL_GetTick>
 8006e2a:	443c      	add	r4, r7
 8006e2c:	1a24      	subs	r4, r4, r0
  tmp_tickstart = HAL_GetTick();
 8006e2e:	f7fe fa53 	bl	80052d8 <HAL_GetTick>

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006e32:	4b29      	ldr	r3, [pc, #164]	@ (8006ed8 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xc4>)
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8006e34:	f8d5 9000 	ldr.w	r9, [r5]
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	2223      	movs	r2, #35	@ 0x23
 8006e3c:	4353      	muls	r3, r2
 8006e3e:	0d1b      	lsrs	r3, r3, #20
 8006e40:	4363      	muls	r3, r4
  tmp_tickstart = HAL_GetTick();
 8006e42:	4680      	mov	r8, r0
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006e44:	9301      	str	r3, [sp, #4]

  while ((hspi->Instance->SR & Fifo) != State)
 8006e46:	682a      	ldr	r2, [r5, #0]
 8006e48:	6890      	ldr	r0, [r2, #8]
 8006e4a:	4030      	ands	r0, r6
 8006e4c:	d038      	beq.n	8006ec0 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xac>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8006e4e:	f5b6 6fc0 	cmp.w	r6, #1536	@ 0x600
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8006e52:	bf01      	itttt	eq
 8006e54:	f899 300c 	ldrbeq.w	r3, [r9, #12]
 8006e58:	b2db      	uxtbeq	r3, r3
 8006e5a:	f88d 3003 	strbeq.w	r3, [sp, #3]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8006e5e:	f89d 3003 	ldrbeq.w	r3, [sp, #3]
    }

    if (Timeout != HAL_MAX_DELAY)
 8006e62:	1c7b      	adds	r3, r7, #1
 8006e64:	d0f0      	beq.n	8006e48 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x34>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006e66:	f7fe fa37 	bl	80052d8 <HAL_GetTick>
 8006e6a:	eba0 0008 	sub.w	r0, r0, r8
 8006e6e:	42a0      	cmp	r0, r4
 8006e70:	d329      	bcc.n	8006ec6 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xb2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006e72:	682b      	ldr	r3, [r5, #0]
 8006e74:	685a      	ldr	r2, [r3, #4]
 8006e76:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006e7a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006e7c:	686a      	ldr	r2, [r5, #4]
 8006e7e:	f5b2 7f82 	cmp.w	r2, #260	@ 0x104
 8006e82:	d10a      	bne.n	8006e9a <SPI_WaitFifoStateUntilTimeout.constprop.0+0x86>
 8006e84:	68aa      	ldr	r2, [r5, #8]
 8006e86:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
 8006e8a:	d002      	beq.n	8006e92 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x7e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006e8c:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 8006e90:	d103      	bne.n	8006e9a <SPI_WaitFifoStateUntilTimeout.constprop.0+0x86>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006e92:	681a      	ldr	r2, [r3, #0]
 8006e94:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006e98:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006e9a:	6aaa      	ldr	r2, [r5, #40]	@ 0x28
 8006e9c:	f5b2 5f00 	cmp.w	r2, #8192	@ 0x2000
 8006ea0:	d107      	bne.n	8006eb2 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x9e>
        {
          SPI_RESET_CRC(hspi);
 8006ea2:	681a      	ldr	r2, [r3, #0]
 8006ea4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006ea8:	601a      	str	r2, [r3, #0]
 8006eaa:	681a      	ldr	r2, [r3, #0]
 8006eac:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006eb0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006eb2:	2301      	movs	r3, #1
 8006eb4:	f885 305d 	strb.w	r3, [r5, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006eb8:	2300      	movs	r3, #0
 8006eba:	f885 305c 	strb.w	r3, [r5, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8006ebe:	2003      	movs	r0, #3
      count--;
    }
  }

  return HAL_OK;
}
 8006ec0:	b003      	add	sp, #12
 8006ec2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      if (count == 0U)
 8006ec6:	9a01      	ldr	r2, [sp, #4]
      count--;
 8006ec8:	9b01      	ldr	r3, [sp, #4]
      if (count == 0U)
 8006eca:	2a00      	cmp	r2, #0
      count--;
 8006ecc:	f103 33ff 	add.w	r3, r3, #4294967295
 8006ed0:	9301      	str	r3, [sp, #4]
 8006ed2:	bf08      	it	eq
 8006ed4:	4614      	moveq	r4, r2
 8006ed6:	e7b6      	b.n	8006e46 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x32>
 8006ed8:	20000014 	.word	0x20000014

08006edc <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006edc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006ede:	6843      	ldr	r3, [r0, #4]
 8006ee0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
{
 8006ee4:	4604      	mov	r4, r0
 8006ee6:	460e      	mov	r6, r1
 8006ee8:	4617      	mov	r7, r2
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006eea:	d10b      	bne.n	8006f04 <SPI_EndRxTransaction+0x28>
 8006eec:	6883      	ldr	r3, [r0, #8]
 8006eee:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006ef2:	d002      	beq.n	8006efa <SPI_EndRxTransaction+0x1e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006ef4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006ef8:	d104      	bne.n	8006f04 <SPI_EndRxTransaction+0x28>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006efa:	6822      	ldr	r2, [r4, #0]
 8006efc:	6813      	ldr	r3, [r2, #0]
 8006efe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006f02:	6013      	str	r3, [r2, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006f04:	463a      	mov	r2, r7
 8006f06:	4631      	mov	r1, r6
 8006f08:	4620      	mov	r0, r4
 8006f0a:	f7ff ff31 	bl	8006d70 <SPI_WaitFlagStateUntilTimeout.constprop.0>
 8006f0e:	4605      	mov	r5, r0
 8006f10:	b128      	cbz	r0, 8006f1e <SPI_EndRxTransaction+0x42>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006f12:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8006f14:	f043 0320 	orr.w	r3, r3, #32
 8006f18:	6623      	str	r3, [r4, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006f1a:	2503      	movs	r5, #3
 8006f1c:	e013      	b.n	8006f46 <SPI_EndRxTransaction+0x6a>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006f1e:	6863      	ldr	r3, [r4, #4]
 8006f20:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006f24:	d10f      	bne.n	8006f46 <SPI_EndRxTransaction+0x6a>
 8006f26:	68a3      	ldr	r3, [r4, #8]
 8006f28:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006f2c:	d002      	beq.n	8006f34 <SPI_EndRxTransaction+0x58>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006f2e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006f32:	d108      	bne.n	8006f46 <SPI_EndRxTransaction+0x6a>
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006f34:	463b      	mov	r3, r7
 8006f36:	4632      	mov	r2, r6
 8006f38:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8006f3c:	4620      	mov	r0, r4
 8006f3e:	f7ff ff69 	bl	8006e14 <SPI_WaitFifoStateUntilTimeout.constprop.0>
 8006f42:	2800      	cmp	r0, #0
 8006f44:	d1e5      	bne.n	8006f12 <SPI_EndRxTransaction+0x36>
      return HAL_TIMEOUT;
    }
  }
  return HAL_OK;
}
 8006f46:	4628      	mov	r0, r5
 8006f48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006f4a <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006f4a:	b570      	push	{r4, r5, r6, lr}
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006f4c:	4613      	mov	r3, r2
{
 8006f4e:	460d      	mov	r5, r1
 8006f50:	4616      	mov	r6, r2
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006f52:	460a      	mov	r2, r1
 8006f54:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
{
 8006f58:	4604      	mov	r4, r0
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006f5a:	f7ff ff5b 	bl	8006e14 <SPI_WaitFifoStateUntilTimeout.constprop.0>
 8006f5e:	b128      	cbz	r0, 8006f6c <SPI_EndRxTxTransaction+0x22>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006f60:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8006f62:	f043 0320 	orr.w	r3, r3, #32
 8006f66:	6623      	str	r3, [r4, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006f68:	2003      	movs	r0, #3
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  return HAL_OK;
}
 8006f6a:	bd70      	pop	{r4, r5, r6, pc}
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006f6c:	4632      	mov	r2, r6
 8006f6e:	4629      	mov	r1, r5
 8006f70:	4620      	mov	r0, r4
 8006f72:	f7ff fefd 	bl	8006d70 <SPI_WaitFlagStateUntilTimeout.constprop.0>
 8006f76:	2800      	cmp	r0, #0
 8006f78:	d1f2      	bne.n	8006f60 <SPI_EndRxTxTransaction+0x16>
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006f7a:	4633      	mov	r3, r6
 8006f7c:	462a      	mov	r2, r5
 8006f7e:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8006f82:	4620      	mov	r0, r4
 8006f84:	f7ff ff46 	bl	8006e14 <SPI_WaitFifoStateUntilTimeout.constprop.0>
 8006f88:	2800      	cmp	r0, #0
 8006f8a:	d0ee      	beq.n	8006f6a <SPI_EndRxTxTransaction+0x20>
 8006f8c:	e7e8      	b.n	8006f60 <SPI_EndRxTxTransaction+0x16>

08006f8e <HAL_SPI_Init>:
{
 8006f8e:	b570      	push	{r4, r5, r6, lr}
  if (hspi == NULL)
 8006f90:	4604      	mov	r4, r0
 8006f92:	2800      	cmp	r0, #0
 8006f94:	d067      	beq.n	8007066 <HAL_SPI_Init+0xd8>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006f96:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d15d      	bne.n	8007058 <HAL_SPI_Init+0xca>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006f9c:	6842      	ldr	r2, [r0, #4]
 8006f9e:	f5b2 7f82 	cmp.w	r2, #260	@ 0x104
 8006fa2:	d000      	beq.n	8006fa6 <HAL_SPI_Init+0x18>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006fa4:	61c3      	str	r3, [r0, #28]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006fa6:	2300      	movs	r3, #0
 8006fa8:	62a3      	str	r3, [r4, #40]	@ 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8006faa:	f894 305d 	ldrb.w	r3, [r4, #93]	@ 0x5d
 8006fae:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8006fb2:	b923      	cbnz	r3, 8006fbe <HAL_SPI_Init+0x30>
    hspi->Lock = HAL_UNLOCKED;
 8006fb4:	f884 205c 	strb.w	r2, [r4, #92]	@ 0x5c
    HAL_SPI_MspInit(hspi);
 8006fb8:	4620      	mov	r0, r4
 8006fba:	f7fd febf 	bl	8004d3c <HAL_SPI_MspInit>
  __HAL_SPI_DISABLE(hspi);
 8006fbe:	6822      	ldr	r2, [r4, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006fc0:	68e0      	ldr	r0, [r4, #12]
  hspi->State = HAL_SPI_STATE_BUSY;
 8006fc2:	2302      	movs	r3, #2
 8006fc4:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
  __HAL_SPI_DISABLE(hspi);
 8006fc8:	6813      	ldr	r3, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006fca:	f5b0 6fe0 	cmp.w	r0, #1792	@ 0x700
  __HAL_SPI_DISABLE(hspi);
 8006fce:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006fd2:	6013      	str	r3, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006fd4:	f04f 0300 	mov.w	r3, #0
 8006fd8:	d942      	bls.n	8007060 <HAL_SPI_Init+0xd2>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006fda:	461d      	mov	r5, r3
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006fdc:	f5b0 6f70 	cmp.w	r0, #3840	@ 0xf00
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006fe0:	bf18      	it	ne
 8006fe2:	62a3      	strne	r3, [r4, #40]	@ 0x28
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006fe4:	68a6      	ldr	r6, [r4, #8]
 8006fe6:	6863      	ldr	r3, [r4, #4]
 8006fe8:	69a1      	ldr	r1, [r4, #24]
 8006fea:	f406 4604 	and.w	r6, r6, #33792	@ 0x8400
 8006fee:	f403 7382 	and.w	r3, r3, #260	@ 0x104
 8006ff2:	4333      	orrs	r3, r6
 8006ff4:	6926      	ldr	r6, [r4, #16]
 8006ff6:	f006 0602 	and.w	r6, r6, #2
 8006ffa:	4333      	orrs	r3, r6
 8006ffc:	6966      	ldr	r6, [r4, #20]
 8006ffe:	f006 0601 	and.w	r6, r6, #1
 8007002:	4333      	orrs	r3, r6
 8007004:	f401 7600 	and.w	r6, r1, #512	@ 0x200
 8007008:	4333      	orrs	r3, r6
 800700a:	69e6      	ldr	r6, [r4, #28]
 800700c:	f006 0638 	and.w	r6, r6, #56	@ 0x38
 8007010:	4333      	orrs	r3, r6
 8007012:	6a26      	ldr	r6, [r4, #32]
 8007014:	f006 0680 	and.w	r6, r6, #128	@ 0x80
 8007018:	4333      	orrs	r3, r6
 800701a:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800701c:	f406 5600 	and.w	r6, r6, #8192	@ 0x2000
 8007020:	4333      	orrs	r3, r6
 8007022:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007024:	6b66      	ldr	r6, [r4, #52]	@ 0x34
 8007026:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8007028:	f006 0608 	and.w	r6, r6, #8
 800702c:	f003 0310 	and.w	r3, r3, #16
 8007030:	f400 6070 	and.w	r0, r0, #3840	@ 0xf00
 8007034:	4333      	orrs	r3, r6
 8007036:	0c09      	lsrs	r1, r1, #16
 8007038:	4303      	orrs	r3, r0
 800703a:	f001 0104 	and.w	r1, r1, #4
 800703e:	430b      	orrs	r3, r1
 8007040:	432b      	orrs	r3, r5
 8007042:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007044:	69d3      	ldr	r3, [r2, #28]
 8007046:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800704a:	61d3      	str	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800704c:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 800704e:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007050:	6620      	str	r0, [r4, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007052:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
}
 8007056:	bd70      	pop	{r4, r5, r6, pc}
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007058:	2300      	movs	r3, #0
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800705a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800705e:	e7a2      	b.n	8006fa6 <HAL_SPI_Init+0x18>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8007060:	f44f 5580 	mov.w	r5, #4096	@ 0x1000
 8007064:	e7bc      	b.n	8006fe0 <HAL_SPI_Init+0x52>
    return HAL_ERROR;
 8007066:	2001      	movs	r0, #1
 8007068:	e7f5      	b.n	8007056 <HAL_SPI_Init+0xc8>

0800706a <HAL_SPI_Transmit>:
{
 800706a:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 800706e:	461f      	mov	r7, r3
  __HAL_LOCK(hspi);
 8007070:	f890 305c 	ldrb.w	r3, [r0, #92]	@ 0x5c
 8007074:	2b01      	cmp	r3, #1
{
 8007076:	4604      	mov	r4, r0
 8007078:	460d      	mov	r5, r1
 800707a:	4690      	mov	r8, r2
  __HAL_LOCK(hspi);
 800707c:	f000 80bc 	beq.w	80071f8 <HAL_SPI_Transmit+0x18e>
 8007080:	2301      	movs	r3, #1
 8007082:	f880 305c 	strb.w	r3, [r0, #92]	@ 0x5c
  tickstart = HAL_GetTick();
 8007086:	f7fe f927 	bl	80052d8 <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 800708a:	f894 305d 	ldrb.w	r3, [r4, #93]	@ 0x5d
 800708e:	2b01      	cmp	r3, #1
  tickstart = HAL_GetTick();
 8007090:	4682      	mov	sl, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8007092:	fa5f f983 	uxtb.w	r9, r3
 8007096:	f040 80ac 	bne.w	80071f2 <HAL_SPI_Transmit+0x188>
  if ((pData == NULL) || (Size == 0U))
 800709a:	2d00      	cmp	r5, #0
 800709c:	d069      	beq.n	8007172 <HAL_SPI_Transmit+0x108>
 800709e:	f1b8 0f00 	cmp.w	r8, #0
 80070a2:	d066      	beq.n	8007172 <HAL_SPI_Transmit+0x108>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80070a4:	2303      	movs	r3, #3
 80070a6:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80070aa:	2300      	movs	r3, #0
 80070ac:	6623      	str	r3, [r4, #96]	@ 0x60
  hspi->RxISR       = NULL;
 80070ae:	e9c4 3313 	strd	r3, r3, [r4, #76]	@ 0x4c
  hspi->TxXferCount = Size;
 80070b2:	f8a4 803e 	strh.w	r8, [r4, #62]	@ 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80070b6:	6423      	str	r3, [r4, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 80070b8:	f8a4 3044 	strh.w	r3, [r4, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 80070bc:	f8a4 3046 	strh.w	r3, [r4, #70]	@ 0x46
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80070c0:	68a3      	ldr	r3, [r4, #8]
    __HAL_SPI_DISABLE(hspi);
 80070c2:	6826      	ldr	r6, [r4, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80070c4:	63a5      	str	r5, [r4, #56]	@ 0x38
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80070c6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
  hspi->TxXferSize  = Size;
 80070ca:	f8a4 803c 	strh.w	r8, [r4, #60]	@ 0x3c
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80070ce:	d107      	bne.n	80070e0 <HAL_SPI_Transmit+0x76>
    __HAL_SPI_DISABLE(hspi);
 80070d0:	6833      	ldr	r3, [r6, #0]
 80070d2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80070d6:	6033      	str	r3, [r6, #0]
    SPI_1LINE_TX(hspi);
 80070d8:	6833      	ldr	r3, [r6, #0]
 80070da:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80070de:	6033      	str	r3, [r6, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80070e0:	6833      	ldr	r3, [r6, #0]
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80070e2:	6862      	ldr	r2, [r4, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80070e4:	065b      	lsls	r3, r3, #25
    __HAL_SPI_ENABLE(hspi);
 80070e6:	bf5e      	ittt	pl
 80070e8:	6833      	ldrpl	r3, [r6, #0]
 80070ea:	f043 0340 	orrpl.w	r3, r3, #64	@ 0x40
 80070ee:	6033      	strpl	r3, [r6, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80070f0:	68e3      	ldr	r3, [r4, #12]
 80070f2:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80070f6:	d943      	bls.n	8007180 <HAL_SPI_Transmit+0x116>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80070f8:	b112      	cbz	r2, 8007100 <HAL_SPI_Transmit+0x96>
 80070fa:	f1b8 0f01 	cmp.w	r8, #1
 80070fe:	d107      	bne.n	8007110 <HAL_SPI_Transmit+0xa6>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007100:	f835 3b02 	ldrh.w	r3, [r5], #2
 8007104:	60f3      	str	r3, [r6, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007106:	63a5      	str	r5, [r4, #56]	@ 0x38
        hspi->TxXferCount--;
 8007108:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 800710a:	3b01      	subs	r3, #1
 800710c:	b29b      	uxth	r3, r3
 800710e:	87e3      	strh	r3, [r4, #62]	@ 0x3e
    while (hspi->TxXferCount > 0U)
 8007110:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8007112:	b29b      	uxth	r3, r3
 8007114:	b9b3      	cbnz	r3, 8007144 <HAL_SPI_Transmit+0xda>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007116:	4652      	mov	r2, sl
 8007118:	4639      	mov	r1, r7
 800711a:	4620      	mov	r0, r4
 800711c:	f7ff ff15 	bl	8006f4a <SPI_EndRxTxTransaction>
 8007120:	2800      	cmp	r0, #0
 8007122:	d163      	bne.n	80071ec <HAL_SPI_Transmit+0x182>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007124:	68a3      	ldr	r3, [r4, #8]
 8007126:	b933      	cbnz	r3, 8007136 <HAL_SPI_Transmit+0xcc>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007128:	9301      	str	r3, [sp, #4]
 800712a:	6823      	ldr	r3, [r4, #0]
 800712c:	68da      	ldr	r2, [r3, #12]
 800712e:	9201      	str	r2, [sp, #4]
 8007130:	689b      	ldr	r3, [r3, #8]
 8007132:	9301      	str	r3, [sp, #4]
 8007134:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007136:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8007138:	b9db      	cbnz	r3, 8007172 <HAL_SPI_Transmit+0x108>
    hspi->State = HAL_SPI_STATE_READY;
 800713a:	2201      	movs	r2, #1
 800713c:	f884 205d 	strb.w	r2, [r4, #93]	@ 0x5d
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007140:	4699      	mov	r9, r3
 8007142:	e016      	b.n	8007172 <HAL_SPI_Transmit+0x108>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007144:	6822      	ldr	r2, [r4, #0]
 8007146:	6893      	ldr	r3, [r2, #8]
 8007148:	079d      	lsls	r5, r3, #30
 800714a:	d505      	bpl.n	8007158 <HAL_SPI_Transmit+0xee>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800714c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800714e:	f833 1b02 	ldrh.w	r1, [r3], #2
 8007152:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007154:	63a3      	str	r3, [r4, #56]	@ 0x38
 8007156:	e7d7      	b.n	8007108 <HAL_SPI_Transmit+0x9e>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007158:	f7fe f8be 	bl	80052d8 <HAL_GetTick>
 800715c:	eba0 000a 	sub.w	r0, r0, sl
 8007160:	42b8      	cmp	r0, r7
 8007162:	d3d5      	bcc.n	8007110 <HAL_SPI_Transmit+0xa6>
 8007164:	1c78      	adds	r0, r7, #1
 8007166:	d0d3      	beq.n	8007110 <HAL_SPI_Transmit+0xa6>
          hspi->State = HAL_SPI_STATE_READY;
 8007168:	2301      	movs	r3, #1
 800716a:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
          errorcode = HAL_TIMEOUT;
 800716e:	f04f 0903 	mov.w	r9, #3
  __HAL_UNLOCK(hspi);
 8007172:	2300      	movs	r3, #0
 8007174:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
}
 8007178:	4648      	mov	r0, r9
 800717a:	b002      	add	sp, #8
 800717c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007180:	b112      	cbz	r2, 8007188 <HAL_SPI_Transmit+0x11e>
 8007182:	f1b8 0f01 	cmp.w	r8, #1
 8007186:	d113      	bne.n	80071b0 <HAL_SPI_Transmit+0x146>
      if (hspi->TxXferCount > 1U)
 8007188:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 800718a:	b29b      	uxth	r3, r3
 800718c:	2b01      	cmp	r3, #1
 800718e:	d906      	bls.n	800719e <HAL_SPI_Transmit+0x134>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007190:	f835 3b02 	ldrh.w	r3, [r5], #2
 8007194:	60f3      	str	r3, [r6, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007196:	63a5      	str	r5, [r4, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8007198:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 800719a:	3b02      	subs	r3, #2
 800719c:	e006      	b.n	80071ac <HAL_SPI_Transmit+0x142>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800719e:	782b      	ldrb	r3, [r5, #0]
 80071a0:	7333      	strb	r3, [r6, #12]
        hspi->pTxBuffPtr ++;
 80071a2:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80071a4:	3301      	adds	r3, #1
 80071a6:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->TxXferCount--;
 80071a8:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80071aa:	3b01      	subs	r3, #1
 80071ac:	b29b      	uxth	r3, r3
 80071ae:	87e3      	strh	r3, [r4, #62]	@ 0x3e
    while (hspi->TxXferCount > 0U)
 80071b0:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80071b2:	b29b      	uxth	r3, r3
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d0ae      	beq.n	8007116 <HAL_SPI_Transmit+0xac>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80071b8:	6822      	ldr	r2, [r4, #0]
 80071ba:	6893      	ldr	r3, [r2, #8]
 80071bc:	0799      	lsls	r1, r3, #30
 80071be:	d50c      	bpl.n	80071da <HAL_SPI_Transmit+0x170>
        if (hspi->TxXferCount > 1U)
 80071c0:	8fe1      	ldrh	r1, [r4, #62]	@ 0x3e
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80071c2:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
        if (hspi->TxXferCount > 1U)
 80071c4:	b289      	uxth	r1, r1
 80071c6:	2901      	cmp	r1, #1
 80071c8:	d904      	bls.n	80071d4 <HAL_SPI_Transmit+0x16a>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80071ca:	f833 1b02 	ldrh.w	r1, [r3], #2
 80071ce:	60d1      	str	r1, [r2, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80071d0:	63a3      	str	r3, [r4, #56]	@ 0x38
 80071d2:	e7e1      	b.n	8007198 <HAL_SPI_Transmit+0x12e>
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80071d4:	781b      	ldrb	r3, [r3, #0]
 80071d6:	7313      	strb	r3, [r2, #12]
          hspi->pTxBuffPtr++;
 80071d8:	e7e3      	b.n	80071a2 <HAL_SPI_Transmit+0x138>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80071da:	f7fe f87d 	bl	80052d8 <HAL_GetTick>
 80071de:	eba0 000a 	sub.w	r0, r0, sl
 80071e2:	42b8      	cmp	r0, r7
 80071e4:	d3e4      	bcc.n	80071b0 <HAL_SPI_Transmit+0x146>
 80071e6:	1c7b      	adds	r3, r7, #1
 80071e8:	d0e2      	beq.n	80071b0 <HAL_SPI_Transmit+0x146>
 80071ea:	e7bd      	b.n	8007168 <HAL_SPI_Transmit+0xfe>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80071ec:	2320      	movs	r3, #32
 80071ee:	6623      	str	r3, [r4, #96]	@ 0x60
 80071f0:	e798      	b.n	8007124 <HAL_SPI_Transmit+0xba>
    errorcode = HAL_BUSY;
 80071f2:	f04f 0902 	mov.w	r9, #2
 80071f6:	e7bc      	b.n	8007172 <HAL_SPI_Transmit+0x108>
  __HAL_LOCK(hspi);
 80071f8:	f04f 0902 	mov.w	r9, #2
 80071fc:	e7bc      	b.n	8007178 <HAL_SPI_Transmit+0x10e>

080071fe <HAL_SPI_TransmitReceive>:
{
 80071fe:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007202:	461e      	mov	r6, r3
  __HAL_LOCK(hspi);
 8007204:	f890 305c 	ldrb.w	r3, [r0, #92]	@ 0x5c
{
 8007208:	9f08      	ldr	r7, [sp, #32]
  __HAL_LOCK(hspi);
 800720a:	2b01      	cmp	r3, #1
{
 800720c:	4604      	mov	r4, r0
 800720e:	460d      	mov	r5, r1
 8007210:	4691      	mov	r9, r2
  __HAL_LOCK(hspi);
 8007212:	f000 8122 	beq.w	800745a <HAL_SPI_TransmitReceive+0x25c>
 8007216:	2301      	movs	r3, #1
 8007218:	f880 305c 	strb.w	r3, [r0, #92]	@ 0x5c
  tickstart = HAL_GetTick();
 800721c:	f7fe f85c 	bl	80052d8 <HAL_GetTick>
  tmp_state           = hspi->State;
 8007220:	f894 205d 	ldrb.w	r2, [r4, #93]	@ 0x5d
  tmp_mode            = hspi->Init.Mode;
 8007224:	6863      	ldr	r3, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007226:	2a01      	cmp	r2, #1
  tickstart = HAL_GetTick();
 8007228:	4680      	mov	r8, r0
  tmp_state           = hspi->State;
 800722a:	b2d1      	uxtb	r1, r2
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800722c:	d00a      	beq.n	8007244 <HAL_SPI_TransmitReceive+0x46>
 800722e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007232:	f040 8110 	bne.w	8007456 <HAL_SPI_TransmitReceive+0x258>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007236:	68a2      	ldr	r2, [r4, #8]
 8007238:	2a00      	cmp	r2, #0
 800723a:	f040 810c 	bne.w	8007456 <HAL_SPI_TransmitReceive+0x258>
 800723e:	2904      	cmp	r1, #4
 8007240:	f040 8109 	bne.w	8007456 <HAL_SPI_TransmitReceive+0x258>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007244:	b92d      	cbnz	r5, 8007252 <HAL_SPI_TransmitReceive+0x54>
    errorcode = HAL_ERROR;
 8007246:	2001      	movs	r0, #1
  __HAL_UNLOCK(hspi);
 8007248:	2300      	movs	r3, #0
 800724a:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
}
 800724e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007252:	f1b9 0f00 	cmp.w	r9, #0
 8007256:	d0f6      	beq.n	8007246 <HAL_SPI_TransmitReceive+0x48>
 8007258:	2e00      	cmp	r6, #0
 800725a:	d0f4      	beq.n	8007246 <HAL_SPI_TransmitReceive+0x48>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800725c:	f894 205d 	ldrb.w	r2, [r4, #93]	@ 0x5d
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8007260:	68e0      	ldr	r0, [r4, #12]
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007262:	6821      	ldr	r1, [r4, #0]
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007264:	f8c4 9040 	str.w	r9, [r4, #64]	@ 0x40
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007268:	2a04      	cmp	r2, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800726a:	bf1c      	itt	ne
 800726c:	2205      	movne	r2, #5
 800726e:	f884 205d 	strbne.w	r2, [r4, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007272:	2200      	movs	r2, #0
 8007274:	6622      	str	r2, [r4, #96]	@ 0x60
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8007276:	f5b0 6fe0 	cmp.w	r0, #1792	@ 0x700
  hspi->RxXferCount = Size;
 800727a:	f8a4 6046 	strh.w	r6, [r4, #70]	@ 0x46
  hspi->TxXferCount = Size;
 800727e:	87e6      	strh	r6, [r4, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8007280:	e9c4 2213 	strd	r2, r2, [r4, #76]	@ 0x4c
  hspi->RxXferSize  = Size;
 8007284:	f8a4 6044 	strh.w	r6, [r4, #68]	@ 0x44
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007288:	684a      	ldr	r2, [r1, #4]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800728a:	63a5      	str	r5, [r4, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800728c:	87a6      	strh	r6, [r4, #60]	@ 0x3c
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800728e:	d801      	bhi.n	8007294 <HAL_SPI_TransmitReceive+0x96>
 8007290:	2e01      	cmp	r6, #1
 8007292:	d02e      	beq.n	80072f2 <HAL_SPI_TransmitReceive+0xf4>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007294:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007298:	604a      	str	r2, [r1, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800729a:	680a      	ldr	r2, [r1, #0]
 800729c:	0652      	lsls	r2, r2, #25
    __HAL_SPI_ENABLE(hspi);
 800729e:	bf5e      	ittt	pl
 80072a0:	680a      	ldrpl	r2, [r1, #0]
 80072a2:	f042 0240 	orrpl.w	r2, r2, #64	@ 0x40
 80072a6:	600a      	strpl	r2, [r1, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80072a8:	f5b0 6fe0 	cmp.w	r0, #1792	@ 0x700
 80072ac:	d957      	bls.n	800735e <HAL_SPI_TransmitReceive+0x160>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80072ae:	b10b      	cbz	r3, 80072b4 <HAL_SPI_TransmitReceive+0xb6>
 80072b0:	2e01      	cmp	r6, #1
 80072b2:	d107      	bne.n	80072c4 <HAL_SPI_TransmitReceive+0xc6>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80072b4:	f835 3b02 	ldrh.w	r3, [r5], #2
 80072b8:	60cb      	str	r3, [r1, #12]
      hspi->TxXferCount--;
 80072ba:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80072bc:	63a5      	str	r5, [r4, #56]	@ 0x38
      hspi->TxXferCount--;
 80072be:	3b01      	subs	r3, #1
 80072c0:	b29b      	uxth	r3, r3
 80072c2:	87e3      	strh	r3, [r4, #62]	@ 0x3e
        txallowed = 1U;
 80072c4:	2501      	movs	r5, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80072c6:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80072c8:	b29b      	uxth	r3, r3
 80072ca:	b9ab      	cbnz	r3, 80072f8 <HAL_SPI_TransmitReceive+0xfa>
 80072cc:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 80072d0:	b29b      	uxth	r3, r3
 80072d2:	b98b      	cbnz	r3, 80072f8 <HAL_SPI_TransmitReceive+0xfa>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80072d4:	4642      	mov	r2, r8
 80072d6:	4639      	mov	r1, r7
 80072d8:	4620      	mov	r0, r4
 80072da:	f7ff fe36 	bl	8006f4a <SPI_EndRxTxTransaction>
 80072de:	2800      	cmp	r0, #0
 80072e0:	f040 80b5 	bne.w	800744e <HAL_SPI_TransmitReceive+0x250>
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80072e4:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d1ad      	bne.n	8007246 <HAL_SPI_TransmitReceive+0x48>
    hspi->State = HAL_SPI_STATE_READY;
 80072ea:	2301      	movs	r3, #1
 80072ec:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
 80072f0:	e7aa      	b.n	8007248 <HAL_SPI_TransmitReceive+0x4a>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80072f2:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80072f6:	e7cf      	b.n	8007298 <HAL_SPI_TransmitReceive+0x9a>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80072f8:	6821      	ldr	r1, [r4, #0]
 80072fa:	688b      	ldr	r3, [r1, #8]
 80072fc:	079e      	lsls	r6, r3, #30
 80072fe:	d50d      	bpl.n	800731c <HAL_SPI_TransmitReceive+0x11e>
 8007300:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8007302:	b29b      	uxth	r3, r3
 8007304:	b153      	cbz	r3, 800731c <HAL_SPI_TransmitReceive+0x11e>
 8007306:	b145      	cbz	r5, 800731a <HAL_SPI_TransmitReceive+0x11c>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007308:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800730a:	f833 2b02 	ldrh.w	r2, [r3], #2
 800730e:	60ca      	str	r2, [r1, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007310:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->TxXferCount--;
 8007312:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8007314:	3b01      	subs	r3, #1
 8007316:	b29b      	uxth	r3, r3
 8007318:	87e3      	strh	r3, [r4, #62]	@ 0x3e
        txallowed = 0U;
 800731a:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800731c:	688a      	ldr	r2, [r1, #8]
 800731e:	f012 0201 	ands.w	r2, r2, #1
 8007322:	d00f      	beq.n	8007344 <HAL_SPI_TransmitReceive+0x146>
 8007324:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 8007328:	b29b      	uxth	r3, r3
 800732a:	b15b      	cbz	r3, 8007344 <HAL_SPI_TransmitReceive+0x146>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800732c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800732e:	68c9      	ldr	r1, [r1, #12]
 8007330:	f823 1b02 	strh.w	r1, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007334:	6423      	str	r3, [r4, #64]	@ 0x40
        hspi->RxXferCount--;
 8007336:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 800733a:	3b01      	subs	r3, #1
 800733c:	b29b      	uxth	r3, r3
 800733e:	f8a4 3046 	strh.w	r3, [r4, #70]	@ 0x46
        txallowed = 1U;
 8007342:	4615      	mov	r5, r2
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007344:	f7fd ffc8 	bl	80052d8 <HAL_GetTick>
 8007348:	eba0 0008 	sub.w	r0, r0, r8
 800734c:	42b8      	cmp	r0, r7
 800734e:	d3ba      	bcc.n	80072c6 <HAL_SPI_TransmitReceive+0xc8>
 8007350:	1c78      	adds	r0, r7, #1
 8007352:	d0b8      	beq.n	80072c6 <HAL_SPI_TransmitReceive+0xc8>
        hspi->State = HAL_SPI_STATE_READY;
 8007354:	2301      	movs	r3, #1
 8007356:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
        errorcode = HAL_TIMEOUT;
 800735a:	2003      	movs	r0, #3
 800735c:	e774      	b.n	8007248 <HAL_SPI_TransmitReceive+0x4a>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800735e:	b10b      	cbz	r3, 8007364 <HAL_SPI_TransmitReceive+0x166>
 8007360:	2e01      	cmp	r6, #1
 8007362:	d10b      	bne.n	800737c <HAL_SPI_TransmitReceive+0x17e>
      if (hspi->TxXferCount > 1U)
 8007364:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8007366:	b29b      	uxth	r3, r3
 8007368:	2b01      	cmp	r3, #1
 800736a:	d909      	bls.n	8007380 <HAL_SPI_TransmitReceive+0x182>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800736c:	f835 3b02 	ldrh.w	r3, [r5], #2
 8007370:	60cb      	str	r3, [r1, #12]
        hspi->TxXferCount -= 2U;
 8007372:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007374:	63a5      	str	r5, [r4, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8007376:	3b02      	subs	r3, #2
        hspi->TxXferCount--;
 8007378:	b29b      	uxth	r3, r3
 800737a:	87e3      	strh	r3, [r4, #62]	@ 0x3e
        txallowed = 1U;
 800737c:	2501      	movs	r5, #1
 800737e:	e048      	b.n	8007412 <HAL_SPI_TransmitReceive+0x214>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007380:	782b      	ldrb	r3, [r5, #0]
 8007382:	730b      	strb	r3, [r1, #12]
        hspi->pTxBuffPtr++;
 8007384:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8007386:	3301      	adds	r3, #1
 8007388:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->TxXferCount--;
 800738a:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 800738c:	3b01      	subs	r3, #1
 800738e:	e7f3      	b.n	8007378 <HAL_SPI_TransmitReceive+0x17a>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007390:	6822      	ldr	r2, [r4, #0]
 8007392:	6893      	ldr	r3, [r2, #8]
 8007394:	0799      	lsls	r1, r3, #30
 8007396:	d511      	bpl.n	80073bc <HAL_SPI_TransmitReceive+0x1be>
 8007398:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 800739a:	b29b      	uxth	r3, r3
 800739c:	b173      	cbz	r3, 80073bc <HAL_SPI_TransmitReceive+0x1be>
 800739e:	b165      	cbz	r5, 80073ba <HAL_SPI_TransmitReceive+0x1bc>
        if (hspi->TxXferCount > 1U)
 80073a0:	8fe1      	ldrh	r1, [r4, #62]	@ 0x3e
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80073a2:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
        if (hspi->TxXferCount > 1U)
 80073a4:	b289      	uxth	r1, r1
 80073a6:	2901      	cmp	r1, #1
 80073a8:	d93d      	bls.n	8007426 <HAL_SPI_TransmitReceive+0x228>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80073aa:	f833 1b02 	ldrh.w	r1, [r3], #2
 80073ae:	60d1      	str	r1, [r2, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80073b0:	63a3      	str	r3, [r4, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80073b2:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80073b4:	3b02      	subs	r3, #2
 80073b6:	b29b      	uxth	r3, r3
 80073b8:	87e3      	strh	r3, [r4, #62]	@ 0x3e
        txallowed = 0U;
 80073ba:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80073bc:	6822      	ldr	r2, [r4, #0]
 80073be:	6891      	ldr	r1, [r2, #8]
 80073c0:	f011 0101 	ands.w	r1, r1, #1
 80073c4:	d01d      	beq.n	8007402 <HAL_SPI_TransmitReceive+0x204>
 80073c6:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 80073ca:	b29b      	uxth	r3, r3
 80073cc:	b1cb      	cbz	r3, 8007402 <HAL_SPI_TransmitReceive+0x204>
        if (hspi->RxXferCount > 1U)
 80073ce:	f8b4 0046 	ldrh.w	r0, [r4, #70]	@ 0x46
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80073d2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
        if (hspi->RxXferCount > 1U)
 80073d4:	b280      	uxth	r0, r0
 80073d6:	2801      	cmp	r0, #1
 80073d8:	d92d      	bls.n	8007436 <HAL_SPI_TransmitReceive+0x238>
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80073da:	68d0      	ldr	r0, [r2, #12]
 80073dc:	f823 0b02 	strh.w	r0, [r3], #2
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80073e0:	6423      	str	r3, [r4, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 80073e2:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 80073e6:	3b02      	subs	r3, #2
 80073e8:	b29b      	uxth	r3, r3
 80073ea:	f8a4 3046 	strh.w	r3, [r4, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 80073ee:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 80073f2:	b29b      	uxth	r3, r3
 80073f4:	2b01      	cmp	r3, #1
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80073f6:	bf9e      	ittt	ls
 80073f8:	6853      	ldrls	r3, [r2, #4]
 80073fa:	f443 5380 	orrls.w	r3, r3, #4096	@ 0x1000
 80073fe:	6053      	strls	r3, [r2, #4]
        txallowed = 1U;
 8007400:	460d      	mov	r5, r1
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007402:	f7fd ff69 	bl	80052d8 <HAL_GetTick>
 8007406:	eba0 0008 	sub.w	r0, r0, r8
 800740a:	42b8      	cmp	r0, r7
 800740c:	d301      	bcc.n	8007412 <HAL_SPI_TransmitReceive+0x214>
 800740e:	1c7b      	adds	r3, r7, #1
 8007410:	d1a0      	bne.n	8007354 <HAL_SPI_TransmitReceive+0x156>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007412:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8007414:	b29b      	uxth	r3, r3
 8007416:	2b00      	cmp	r3, #0
 8007418:	d1ba      	bne.n	8007390 <HAL_SPI_TransmitReceive+0x192>
 800741a:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 800741e:	b29b      	uxth	r3, r3
 8007420:	2b00      	cmp	r3, #0
 8007422:	d1b5      	bne.n	8007390 <HAL_SPI_TransmitReceive+0x192>
 8007424:	e756      	b.n	80072d4 <HAL_SPI_TransmitReceive+0xd6>
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007426:	781b      	ldrb	r3, [r3, #0]
 8007428:	7313      	strb	r3, [r2, #12]
          hspi->pTxBuffPtr++;
 800742a:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800742c:	3301      	adds	r3, #1
 800742e:	63a3      	str	r3, [r4, #56]	@ 0x38
          hspi->TxXferCount--;
 8007430:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8007432:	3b01      	subs	r3, #1
 8007434:	e7bf      	b.n	80073b6 <HAL_SPI_TransmitReceive+0x1b8>
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007436:	7b12      	ldrb	r2, [r2, #12]
 8007438:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800743a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800743c:	3301      	adds	r3, #1
 800743e:	6423      	str	r3, [r4, #64]	@ 0x40
          hspi->RxXferCount--;
 8007440:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 8007444:	3b01      	subs	r3, #1
 8007446:	b29b      	uxth	r3, r3
 8007448:	f8a4 3046 	strh.w	r3, [r4, #70]	@ 0x46
 800744c:	e7d8      	b.n	8007400 <HAL_SPI_TransmitReceive+0x202>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800744e:	2320      	movs	r3, #32
 8007450:	6623      	str	r3, [r4, #96]	@ 0x60
    errorcode = HAL_ERROR;
 8007452:	2001      	movs	r0, #1
 8007454:	e746      	b.n	80072e4 <HAL_SPI_TransmitReceive+0xe6>
    errorcode = HAL_BUSY;
 8007456:	2002      	movs	r0, #2
 8007458:	e6f6      	b.n	8007248 <HAL_SPI_TransmitReceive+0x4a>
  __HAL_LOCK(hspi);
 800745a:	2002      	movs	r0, #2
 800745c:	e6f7      	b.n	800724e <HAL_SPI_TransmitReceive+0x50>

0800745e <HAL_SPI_Receive>:
{
 800745e:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8007462:	461f      	mov	r7, r3
  if (hspi->State != HAL_SPI_STATE_READY)
 8007464:	f890 305d 	ldrb.w	r3, [r0, #93]	@ 0x5d
 8007468:	2b01      	cmp	r3, #1
{
 800746a:	4604      	mov	r4, r0
 800746c:	468a      	mov	sl, r1
 800746e:	4690      	mov	r8, r2
  if (hspi->State != HAL_SPI_STATE_READY)
 8007470:	b2de      	uxtb	r6, r3
 8007472:	f040 80a7 	bne.w	80075c4 <HAL_SPI_Receive+0x166>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8007476:	6843      	ldr	r3, [r0, #4]
 8007478:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800747c:	d10e      	bne.n	800749c <HAL_SPI_Receive+0x3e>
 800747e:	6883      	ldr	r3, [r0, #8]
 8007480:	b963      	cbnz	r3, 800749c <HAL_SPI_Receive+0x3e>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8007482:	2304      	movs	r3, #4
 8007484:	f880 305d 	strb.w	r3, [r0, #93]	@ 0x5d
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8007488:	4613      	mov	r3, r2
 800748a:	9700      	str	r7, [sp, #0]
 800748c:	460a      	mov	r2, r1
 800748e:	f7ff feb6 	bl	80071fe <HAL_SPI_TransmitReceive>
 8007492:	4606      	mov	r6, r0
}
 8007494:	4630      	mov	r0, r6
 8007496:	b002      	add	sp, #8
 8007498:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  __HAL_LOCK(hspi);
 800749c:	f894 305c 	ldrb.w	r3, [r4, #92]	@ 0x5c
 80074a0:	2b01      	cmp	r3, #1
 80074a2:	f000 8091 	beq.w	80075c8 <HAL_SPI_Receive+0x16a>
 80074a6:	2301      	movs	r3, #1
 80074a8:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
  tickstart = HAL_GetTick();
 80074ac:	f7fd ff14 	bl	80052d8 <HAL_GetTick>
 80074b0:	4681      	mov	r9, r0
  if ((pData == NULL) || (Size == 0U))
 80074b2:	f1ba 0f00 	cmp.w	sl, #0
 80074b6:	d075      	beq.n	80075a4 <HAL_SPI_Receive+0x146>
 80074b8:	f1b8 0f00 	cmp.w	r8, #0
 80074bc:	d072      	beq.n	80075a4 <HAL_SPI_Receive+0x146>
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80074be:	2500      	movs	r5, #0
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80074c0:	2304      	movs	r3, #4
 80074c2:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
  hspi->TxISR       = NULL;
 80074c6:	e9c4 5513 	strd	r5, r5, [r4, #76]	@ 0x4c
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80074ca:	6625      	str	r5, [r4, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80074cc:	63a5      	str	r5, [r4, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80074ce:	f8a4 8046 	strh.w	r8, [r4, #70]	@ 0x46
  hspi->TxXferSize  = 0U;
 80074d2:	87a5      	strh	r5, [r4, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 80074d4:	87e5      	strh	r5, [r4, #62]	@ 0x3e
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80074d6:	6825      	ldr	r5, [r4, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80074d8:	68e2      	ldr	r2, [r4, #12]
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80074da:	686b      	ldr	r3, [r5, #4]
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80074dc:	f8c4 a040 	str.w	sl, [r4, #64]	@ 0x40
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80074e0:	f5b2 6fe0 	cmp.w	r2, #1792	@ 0x700
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80074e4:	bf8c      	ite	hi
 80074e6:	f423 5380 	bichi.w	r3, r3, #4096	@ 0x1000
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80074ea:	f443 5380 	orrls.w	r3, r3, #4096	@ 0x1000
  hspi->RxXferSize  = Size;
 80074ee:	f8a4 8044 	strh.w	r8, [r4, #68]	@ 0x44
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80074f2:	606b      	str	r3, [r5, #4]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80074f4:	68a3      	ldr	r3, [r4, #8]
 80074f6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80074fa:	d107      	bne.n	800750c <HAL_SPI_Receive+0xae>
    __HAL_SPI_DISABLE(hspi);
 80074fc:	682b      	ldr	r3, [r5, #0]
 80074fe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007502:	602b      	str	r3, [r5, #0]
    SPI_1LINE_RX(hspi);
 8007504:	682b      	ldr	r3, [r5, #0]
 8007506:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800750a:	602b      	str	r3, [r5, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800750c:	682b      	ldr	r3, [r5, #0]
 800750e:	065b      	lsls	r3, r3, #25
    __HAL_SPI_ENABLE(hspi);
 8007510:	bf5e      	ittt	pl
 8007512:	682b      	ldrpl	r3, [r5, #0]
 8007514:	f043 0340 	orrpl.w	r3, r3, #64	@ 0x40
 8007518:	602b      	strpl	r3, [r5, #0]
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800751a:	f5b2 6fe0 	cmp.w	r2, #1792	@ 0x700
 800751e:	d923      	bls.n	8007568 <HAL_SPI_Receive+0x10a>
    while (hspi->RxXferCount > 0U)
 8007520:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 8007524:	b29b      	uxth	r3, r3
 8007526:	b323      	cbz	r3, 8007572 <HAL_SPI_Receive+0x114>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007528:	6823      	ldr	r3, [r4, #0]
 800752a:	689a      	ldr	r2, [r3, #8]
 800752c:	07d2      	lsls	r2, r2, #31
 800752e:	d53d      	bpl.n	80075ac <HAL_SPI_Receive+0x14e>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007530:	68da      	ldr	r2, [r3, #12]
 8007532:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007534:	f823 2b02 	strh.w	r2, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007538:	6423      	str	r3, [r4, #64]	@ 0x40
        hspi->RxXferCount--;
 800753a:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 800753e:	3b01      	subs	r3, #1
 8007540:	b29b      	uxth	r3, r3
 8007542:	f8a4 3046 	strh.w	r3, [r4, #70]	@ 0x46
 8007546:	e7eb      	b.n	8007520 <HAL_SPI_Receive+0xc2>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007548:	6823      	ldr	r3, [r4, #0]
 800754a:	689a      	ldr	r2, [r3, #8]
 800754c:	07d0      	lsls	r0, r2, #31
 800754e:	d51d      	bpl.n	800758c <HAL_SPI_Receive+0x12e>
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007550:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8007552:	7b1b      	ldrb	r3, [r3, #12]
 8007554:	7013      	strb	r3, [r2, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007556:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007558:	3301      	adds	r3, #1
 800755a:	6423      	str	r3, [r4, #64]	@ 0x40
        hspi->RxXferCount--;
 800755c:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 8007560:	3b01      	subs	r3, #1
 8007562:	b29b      	uxth	r3, r3
 8007564:	f8a4 3046 	strh.w	r3, [r4, #70]	@ 0x46
    while (hspi->RxXferCount > 0U)
 8007568:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 800756c:	b29b      	uxth	r3, r3
 800756e:	2b00      	cmp	r3, #0
 8007570:	d1ea      	bne.n	8007548 <HAL_SPI_Receive+0xea>
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007572:	464a      	mov	r2, r9
 8007574:	4639      	mov	r1, r7
 8007576:	4620      	mov	r0, r4
 8007578:	f7ff fcb0 	bl	8006edc <SPI_EndRxTransaction>
 800757c:	b9f8      	cbnz	r0, 80075be <HAL_SPI_Receive+0x160>
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800757e:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8007580:	b983      	cbnz	r3, 80075a4 <HAL_SPI_Receive+0x146>
    hspi->State = HAL_SPI_STATE_READY;
 8007582:	2201      	movs	r2, #1
 8007584:	f884 205d 	strb.w	r2, [r4, #93]	@ 0x5d
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007588:	461e      	mov	r6, r3
 800758a:	e00b      	b.n	80075a4 <HAL_SPI_Receive+0x146>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800758c:	f7fd fea4 	bl	80052d8 <HAL_GetTick>
 8007590:	eba0 0009 	sub.w	r0, r0, r9
 8007594:	42b8      	cmp	r0, r7
 8007596:	d3e7      	bcc.n	8007568 <HAL_SPI_Receive+0x10a>
 8007598:	1c79      	adds	r1, r7, #1
 800759a:	d0e5      	beq.n	8007568 <HAL_SPI_Receive+0x10a>
          hspi->State = HAL_SPI_STATE_READY;
 800759c:	2301      	movs	r3, #1
 800759e:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
          errorcode = HAL_TIMEOUT;
 80075a2:	2603      	movs	r6, #3
  __HAL_UNLOCK(hspi);
 80075a4:	2300      	movs	r3, #0
 80075a6:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
  return errorcode;
 80075aa:	e773      	b.n	8007494 <HAL_SPI_Receive+0x36>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80075ac:	f7fd fe94 	bl	80052d8 <HAL_GetTick>
 80075b0:	eba0 0009 	sub.w	r0, r0, r9
 80075b4:	42b8      	cmp	r0, r7
 80075b6:	d3b3      	bcc.n	8007520 <HAL_SPI_Receive+0xc2>
 80075b8:	1c7b      	adds	r3, r7, #1
 80075ba:	d0b1      	beq.n	8007520 <HAL_SPI_Receive+0xc2>
 80075bc:	e7ee      	b.n	800759c <HAL_SPI_Receive+0x13e>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80075be:	2320      	movs	r3, #32
 80075c0:	6623      	str	r3, [r4, #96]	@ 0x60
 80075c2:	e7dc      	b.n	800757e <HAL_SPI_Receive+0x120>
    errorcode = HAL_BUSY;
 80075c4:	2602      	movs	r6, #2
 80075c6:	e7ed      	b.n	80075a4 <HAL_SPI_Receive+0x146>
  __HAL_LOCK(hspi);
 80075c8:	2602      	movs	r6, #2
 80075ca:	e763      	b.n	8007494 <HAL_SPI_Receive+0x36>

080075cc <HAL_TIM_Base_Start>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80075cc:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 80075d0:	2b01      	cmp	r3, #1
 80075d2:	d127      	bne.n	8007624 <HAL_TIM_Base_Start+0x58>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80075d4:	2302      	movs	r3, #2

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80075d6:	4a14      	ldr	r2, [pc, #80]	@ (8007628 <HAL_TIM_Base_Start+0x5c>)
  htim->State = HAL_TIM_STATE_BUSY;
 80075d8:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80075dc:	6803      	ldr	r3, [r0, #0]
 80075de:	4293      	cmp	r3, r2
 80075e0:	d012      	beq.n	8007608 <HAL_TIM_Base_Start+0x3c>
 80075e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80075e6:	d00f      	beq.n	8007608 <HAL_TIM_Base_Start+0x3c>
 80075e8:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 80075ec:	4293      	cmp	r3, r2
 80075ee:	d00b      	beq.n	8007608 <HAL_TIM_Base_Start+0x3c>
 80075f0:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80075f4:	4293      	cmp	r3, r2
 80075f6:	d007      	beq.n	8007608 <HAL_TIM_Base_Start+0x3c>
 80075f8:	f502 3296 	add.w	r2, r2, #76800	@ 0x12c00
 80075fc:	4293      	cmp	r3, r2
 80075fe:	d003      	beq.n	8007608 <HAL_TIM_Base_Start+0x3c>
 8007600:	f502 6240 	add.w	r2, r2, #3072	@ 0xc00
 8007604:	4293      	cmp	r3, r2
 8007606:	d107      	bne.n	8007618 <HAL_TIM_Base_Start+0x4c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007608:	6899      	ldr	r1, [r3, #8]
 800760a:	4a08      	ldr	r2, [pc, #32]	@ (800762c <HAL_TIM_Base_Start+0x60>)
 800760c:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800760e:	2a06      	cmp	r2, #6
 8007610:	d006      	beq.n	8007620 <HAL_TIM_Base_Start+0x54>
 8007612:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 8007616:	d003      	beq.n	8007620 <HAL_TIM_Base_Start+0x54>
    {
      __HAL_TIM_ENABLE(htim);
 8007618:	681a      	ldr	r2, [r3, #0]
 800761a:	f042 0201 	orr.w	r2, r2, #1
 800761e:	601a      	str	r2, [r3, #0]
  {
    __HAL_TIM_ENABLE(htim);
  }

  /* Return function status */
  return HAL_OK;
 8007620:	2000      	movs	r0, #0
 8007622:	4770      	bx	lr
    return HAL_ERROR;
 8007624:	2001      	movs	r0, #1
}
 8007626:	4770      	bx	lr
 8007628:	40012c00 	.word	0x40012c00
 800762c:	00010007 	.word	0x00010007

08007630 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007630:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8007634:	2b01      	cmp	r3, #1
 8007636:	d12b      	bne.n	8007690 <HAL_TIM_Base_Start_IT+0x60>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007638:	2302      	movs	r3, #2
 800763a:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800763e:	6803      	ldr	r3, [r0, #0]
 8007640:	68da      	ldr	r2, [r3, #12]
 8007642:	f042 0201 	orr.w	r2, r2, #1
 8007646:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007648:	4a12      	ldr	r2, [pc, #72]	@ (8007694 <HAL_TIM_Base_Start_IT+0x64>)
 800764a:	4293      	cmp	r3, r2
 800764c:	d012      	beq.n	8007674 <HAL_TIM_Base_Start_IT+0x44>
 800764e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007652:	d00f      	beq.n	8007674 <HAL_TIM_Base_Start_IT+0x44>
 8007654:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 8007658:	4293      	cmp	r3, r2
 800765a:	d00b      	beq.n	8007674 <HAL_TIM_Base_Start_IT+0x44>
 800765c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8007660:	4293      	cmp	r3, r2
 8007662:	d007      	beq.n	8007674 <HAL_TIM_Base_Start_IT+0x44>
 8007664:	f502 3296 	add.w	r2, r2, #76800	@ 0x12c00
 8007668:	4293      	cmp	r3, r2
 800766a:	d003      	beq.n	8007674 <HAL_TIM_Base_Start_IT+0x44>
 800766c:	f502 6240 	add.w	r2, r2, #3072	@ 0xc00
 8007670:	4293      	cmp	r3, r2
 8007672:	d107      	bne.n	8007684 <HAL_TIM_Base_Start_IT+0x54>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007674:	6899      	ldr	r1, [r3, #8]
 8007676:	4a08      	ldr	r2, [pc, #32]	@ (8007698 <HAL_TIM_Base_Start_IT+0x68>)
 8007678:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800767a:	2a06      	cmp	r2, #6
 800767c:	d006      	beq.n	800768c <HAL_TIM_Base_Start_IT+0x5c>
 800767e:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 8007682:	d003      	beq.n	800768c <HAL_TIM_Base_Start_IT+0x5c>
    {
      __HAL_TIM_ENABLE(htim);
 8007684:	681a      	ldr	r2, [r3, #0]
 8007686:	f042 0201 	orr.w	r2, r2, #1
 800768a:	601a      	str	r2, [r3, #0]
  {
    __HAL_TIM_ENABLE(htim);
  }

  /* Return function status */
  return HAL_OK;
 800768c:	2000      	movs	r0, #0
 800768e:	4770      	bx	lr
    return HAL_ERROR;
 8007690:	2001      	movs	r0, #1
}
 8007692:	4770      	bx	lr
 8007694:	40012c00 	.word	0x40012c00
 8007698:	00010007 	.word	0x00010007

0800769c <HAL_TIM_OC_DelayElapsedCallback>:
/**
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
 800769c:	4770      	bx	lr

0800769e <HAL_TIM_IC_CaptureCallback>:
/**
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
 800769e:	4770      	bx	lr

080076a0 <HAL_TIM_PWM_PulseFinishedCallback>:
/**
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
 80076a0:	4770      	bx	lr

080076a2 <HAL_TIM_TriggerCallback>:
/**
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
 80076a2:	4770      	bx	lr

080076a4 <HAL_TIM_IRQHandler>:
  uint32_t itsource = htim->Instance->DIER;
 80076a4:	6803      	ldr	r3, [r0, #0]
{
 80076a6:	b570      	push	{r4, r5, r6, lr}
  uint32_t itsource = htim->Instance->DIER;
 80076a8:	68dd      	ldr	r5, [r3, #12]
  uint32_t itflag   = htim->Instance->SR;
 80076aa:	691e      	ldr	r6, [r3, #16]
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80076ac:	07b2      	lsls	r2, r6, #30
{
 80076ae:	4604      	mov	r4, r0
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80076b0:	d50d      	bpl.n	80076ce <HAL_TIM_IRQHandler+0x2a>
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80076b2:	07a9      	lsls	r1, r5, #30
 80076b4:	d50b      	bpl.n	80076ce <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80076b6:	f06f 0202 	mvn.w	r2, #2
 80076ba:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80076bc:	2201      	movs	r2, #1
 80076be:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80076c0:	699b      	ldr	r3, [r3, #24]
 80076c2:	079a      	lsls	r2, r3, #30
 80076c4:	d074      	beq.n	80077b0 <HAL_TIM_IRQHandler+0x10c>
          HAL_TIM_IC_CaptureCallback(htim);
 80076c6:	f7ff ffea 	bl	800769e <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80076ca:	2300      	movs	r3, #0
 80076cc:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80076ce:	0773      	lsls	r3, r6, #29
 80076d0:	d510      	bpl.n	80076f4 <HAL_TIM_IRQHandler+0x50>
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80076d2:	0768      	lsls	r0, r5, #29
 80076d4:	d50e      	bpl.n	80076f4 <HAL_TIM_IRQHandler+0x50>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80076d6:	6823      	ldr	r3, [r4, #0]
 80076d8:	f06f 0204 	mvn.w	r2, #4
 80076dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80076de:	2202      	movs	r2, #2
 80076e0:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80076e2:	699b      	ldr	r3, [r3, #24]
 80076e4:	f413 7f40 	tst.w	r3, #768	@ 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 80076e8:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80076ea:	d067      	beq.n	80077bc <HAL_TIM_IRQHandler+0x118>
        HAL_TIM_IC_CaptureCallback(htim);
 80076ec:	f7ff ffd7 	bl	800769e <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80076f0:	2300      	movs	r3, #0
 80076f2:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80076f4:	0731      	lsls	r1, r6, #28
 80076f6:	d50f      	bpl.n	8007718 <HAL_TIM_IRQHandler+0x74>
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80076f8:	072a      	lsls	r2, r5, #28
 80076fa:	d50d      	bpl.n	8007718 <HAL_TIM_IRQHandler+0x74>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80076fc:	6823      	ldr	r3, [r4, #0]
 80076fe:	f06f 0208 	mvn.w	r2, #8
 8007702:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007704:	2204      	movs	r2, #4
 8007706:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007708:	69db      	ldr	r3, [r3, #28]
 800770a:	079b      	lsls	r3, r3, #30
        HAL_TIM_IC_CaptureCallback(htim);
 800770c:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800770e:	d05b      	beq.n	80077c8 <HAL_TIM_IRQHandler+0x124>
        HAL_TIM_IC_CaptureCallback(htim);
 8007710:	f7ff ffc5 	bl	800769e <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007714:	2300      	movs	r3, #0
 8007716:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007718:	06f0      	lsls	r0, r6, #27
 800771a:	d510      	bpl.n	800773e <HAL_TIM_IRQHandler+0x9a>
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800771c:	06e9      	lsls	r1, r5, #27
 800771e:	d50e      	bpl.n	800773e <HAL_TIM_IRQHandler+0x9a>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007720:	6823      	ldr	r3, [r4, #0]
 8007722:	f06f 0210 	mvn.w	r2, #16
 8007726:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007728:	2208      	movs	r2, #8
 800772a:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800772c:	69db      	ldr	r3, [r3, #28]
 800772e:	f413 7f40 	tst.w	r3, #768	@ 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8007732:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007734:	d04e      	beq.n	80077d4 <HAL_TIM_IRQHandler+0x130>
        HAL_TIM_IC_CaptureCallback(htim);
 8007736:	f7ff ffb2 	bl	800769e <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800773a:	2300      	movs	r3, #0
 800773c:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800773e:	07f2      	lsls	r2, r6, #31
 8007740:	d508      	bpl.n	8007754 <HAL_TIM_IRQHandler+0xb0>
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007742:	07eb      	lsls	r3, r5, #31
 8007744:	d506      	bpl.n	8007754 <HAL_TIM_IRQHandler+0xb0>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007746:	6823      	ldr	r3, [r4, #0]
 8007748:	f06f 0201 	mvn.w	r2, #1
 800774c:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800774e:	4620      	mov	r0, r4
 8007750:	f7fc fa90 	bl	8003c74 <HAL_TIM_PeriodElapsedCallback>
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8007754:	0630      	lsls	r0, r6, #24
 8007756:	d508      	bpl.n	800776a <HAL_TIM_IRQHandler+0xc6>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007758:	0629      	lsls	r1, r5, #24
 800775a:	d506      	bpl.n	800776a <HAL_TIM_IRQHandler+0xc6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800775c:	6823      	ldr	r3, [r4, #0]
 800775e:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8007762:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8007764:	4620      	mov	r0, r4
 8007766:	f000 f9b8 	bl	8007ada <HAL_TIMEx_BreakCallback>
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800776a:	05f2      	lsls	r2, r6, #23
 800776c:	d508      	bpl.n	8007780 <HAL_TIM_IRQHandler+0xdc>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800776e:	062b      	lsls	r3, r5, #24
 8007770:	d506      	bpl.n	8007780 <HAL_TIM_IRQHandler+0xdc>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007772:	6823      	ldr	r3, [r4, #0]
 8007774:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8007778:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 800777a:	4620      	mov	r0, r4
 800777c:	f000 f9ae 	bl	8007adc <HAL_TIMEx_Break2Callback>
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007780:	0670      	lsls	r0, r6, #25
 8007782:	d508      	bpl.n	8007796 <HAL_TIM_IRQHandler+0xf2>
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007784:	0669      	lsls	r1, r5, #25
 8007786:	d506      	bpl.n	8007796 <HAL_TIM_IRQHandler+0xf2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007788:	6823      	ldr	r3, [r4, #0]
 800778a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800778e:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8007790:	4620      	mov	r0, r4
 8007792:	f7ff ff86 	bl	80076a2 <HAL_TIM_TriggerCallback>
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007796:	06b2      	lsls	r2, r6, #26
 8007798:	d522      	bpl.n	80077e0 <HAL_TIM_IRQHandler+0x13c>
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800779a:	06ab      	lsls	r3, r5, #26
 800779c:	d520      	bpl.n	80077e0 <HAL_TIM_IRQHandler+0x13c>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800779e:	6823      	ldr	r3, [r4, #0]
 80077a0:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 80077a4:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80077a6:	611a      	str	r2, [r3, #16]
}
 80077a8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      HAL_TIMEx_CommutCallback(htim);
 80077ac:	f000 b994 	b.w	8007ad8 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80077b0:	f7ff ff74 	bl	800769c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80077b4:	4620      	mov	r0, r4
 80077b6:	f7ff ff73 	bl	80076a0 <HAL_TIM_PWM_PulseFinishedCallback>
 80077ba:	e786      	b.n	80076ca <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80077bc:	f7ff ff6e 	bl	800769c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80077c0:	4620      	mov	r0, r4
 80077c2:	f7ff ff6d 	bl	80076a0 <HAL_TIM_PWM_PulseFinishedCallback>
 80077c6:	e793      	b.n	80076f0 <HAL_TIM_IRQHandler+0x4c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80077c8:	f7ff ff68 	bl	800769c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80077cc:	4620      	mov	r0, r4
 80077ce:	f7ff ff67 	bl	80076a0 <HAL_TIM_PWM_PulseFinishedCallback>
 80077d2:	e79f      	b.n	8007714 <HAL_TIM_IRQHandler+0x70>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80077d4:	f7ff ff62 	bl	800769c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80077d8:	4620      	mov	r0, r4
 80077da:	f7ff ff61 	bl	80076a0 <HAL_TIM_PWM_PulseFinishedCallback>
 80077de:	e7ac      	b.n	800773a <HAL_TIM_IRQHandler+0x96>
}
 80077e0:	bd70      	pop	{r4, r5, r6, pc}
	...

080077e4 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80077e4:	4a2f      	ldr	r2, [pc, #188]	@ (80078a4 <TIM_Base_SetConfig+0xc0>)
  tmpcr1 = TIMx->CR1;
 80077e6:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80077e8:	4290      	cmp	r0, r2
 80077ea:	d00e      	beq.n	800780a <TIM_Base_SetConfig+0x26>
 80077ec:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 80077f0:	d00b      	beq.n	800780a <TIM_Base_SetConfig+0x26>
 80077f2:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 80077f6:	4290      	cmp	r0, r2
 80077f8:	d007      	beq.n	800780a <TIM_Base_SetConfig+0x26>
 80077fa:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80077fe:	4290      	cmp	r0, r2
 8007800:	d003      	beq.n	800780a <TIM_Base_SetConfig+0x26>
 8007802:	f502 3296 	add.w	r2, r2, #76800	@ 0x12c00
 8007806:	4290      	cmp	r0, r2
 8007808:	d115      	bne.n	8007836 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 800780a:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800780c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8007810:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007812:	4a24      	ldr	r2, [pc, #144]	@ (80078a4 <TIM_Base_SetConfig+0xc0>)
 8007814:	4290      	cmp	r0, r2
 8007816:	d019      	beq.n	800784c <TIM_Base_SetConfig+0x68>
 8007818:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 800781c:	d016      	beq.n	800784c <TIM_Base_SetConfig+0x68>
 800781e:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 8007822:	4290      	cmp	r0, r2
 8007824:	d012      	beq.n	800784c <TIM_Base_SetConfig+0x68>
 8007826:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800782a:	4290      	cmp	r0, r2
 800782c:	d00e      	beq.n	800784c <TIM_Base_SetConfig+0x68>
 800782e:	f502 3296 	add.w	r2, r2, #76800	@ 0x12c00
 8007832:	4290      	cmp	r0, r2
 8007834:	d00a      	beq.n	800784c <TIM_Base_SetConfig+0x68>
 8007836:	4a1c      	ldr	r2, [pc, #112]	@ (80078a8 <TIM_Base_SetConfig+0xc4>)
 8007838:	4290      	cmp	r0, r2
 800783a:	d007      	beq.n	800784c <TIM_Base_SetConfig+0x68>
 800783c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8007840:	4290      	cmp	r0, r2
 8007842:	d003      	beq.n	800784c <TIM_Base_SetConfig+0x68>
 8007844:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8007848:	4290      	cmp	r0, r2
 800784a:	d103      	bne.n	8007854 <TIM_Base_SetConfig+0x70>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800784c:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 800784e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007852:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007854:	694a      	ldr	r2, [r1, #20]
 8007856:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800785a:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 800785c:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800785e:	688b      	ldr	r3, [r1, #8]
 8007860:	62c3      	str	r3, [r0, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007862:	680b      	ldr	r3, [r1, #0]
 8007864:	6283      	str	r3, [r0, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007866:	4b0f      	ldr	r3, [pc, #60]	@ (80078a4 <TIM_Base_SetConfig+0xc0>)
 8007868:	4298      	cmp	r0, r3
 800786a:	d00f      	beq.n	800788c <TIM_Base_SetConfig+0xa8>
 800786c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007870:	4298      	cmp	r0, r3
 8007872:	d00b      	beq.n	800788c <TIM_Base_SetConfig+0xa8>
 8007874:	f503 6340 	add.w	r3, r3, #3072	@ 0xc00
 8007878:	4298      	cmp	r0, r3
 800787a:	d007      	beq.n	800788c <TIM_Base_SetConfig+0xa8>
 800787c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007880:	4298      	cmp	r0, r3
 8007882:	d003      	beq.n	800788c <TIM_Base_SetConfig+0xa8>
 8007884:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007888:	4298      	cmp	r0, r3
 800788a:	d101      	bne.n	8007890 <TIM_Base_SetConfig+0xac>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800788c:	690b      	ldr	r3, [r1, #16]
 800788e:	6303      	str	r3, [r0, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007890:	2301      	movs	r3, #1
 8007892:	6143      	str	r3, [r0, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007894:	6903      	ldr	r3, [r0, #16]
 8007896:	07db      	lsls	r3, r3, #31
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007898:	bf42      	ittt	mi
 800789a:	6903      	ldrmi	r3, [r0, #16]
 800789c:	f023 0301 	bicmi.w	r3, r3, #1
 80078a0:	6103      	strmi	r3, [r0, #16]
  }
}
 80078a2:	4770      	bx	lr
 80078a4:	40012c00 	.word	0x40012c00
 80078a8:	40014000 	.word	0x40014000

080078ac <HAL_TIM_Base_Init>:
{
 80078ac:	b510      	push	{r4, lr}
  if (htim == NULL)
 80078ae:	4604      	mov	r4, r0
 80078b0:	b350      	cbz	r0, 8007908 <HAL_TIM_Base_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 80078b2:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 80078b6:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 80078ba:	b91b      	cbnz	r3, 80078c4 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 80078bc:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 80078c0:	f7fd fa8c 	bl	8004ddc <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 80078c4:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80078c6:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80078c8:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80078cc:	1d21      	adds	r1, r4, #4
 80078ce:	f7ff ff89 	bl	80077e4 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80078d2:	2301      	movs	r3, #1
 80078d4:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
  return HAL_OK;
 80078d8:	2000      	movs	r0, #0
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80078da:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 80078de:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 80078e2:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 80078e6:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 80078ea:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80078ee:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80078f2:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 80078f6:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 80078fa:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
 80078fe:	f884 3047 	strb.w	r3, [r4, #71]	@ 0x47
  htim->State = HAL_TIM_STATE_READY;
 8007902:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
}
 8007906:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8007908:	2001      	movs	r0, #1
 800790a:	e7fc      	b.n	8007906 <HAL_TIM_Base_Init+0x5a>

0800790c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800790c:	b510      	push	{r4, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800790e:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007910:	430a      	orrs	r2, r1
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007912:	f424 447f 	bic.w	r4, r4, #65280	@ 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007916:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 800791a:	4322      	orrs	r2, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800791c:	6082      	str	r2, [r0, #8]
}
 800791e:	bd10      	pop	{r4, pc}

08007920 <HAL_TIM_ConfigClockSource>:
{
 8007920:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8007922:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8007926:	2b01      	cmp	r3, #1
{
 8007928:	4604      	mov	r4, r0
 800792a:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 800792e:	f000 808c 	beq.w	8007a4a <HAL_TIM_ConfigClockSource+0x12a>
  htim->State = HAL_TIM_STATE_BUSY;
 8007932:	f884 003d 	strb.w	r0, [r4, #61]	@ 0x3d
  __HAL_LOCK(htim);
 8007936:	2201      	movs	r2, #1
  tmpsmcr = htim->Instance->SMCR;
 8007938:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(htim);
 800793a:	f884 203c 	strb.w	r2, [r4, #60]	@ 0x3c
  tmpsmcr = htim->Instance->SMCR;
 800793e:	6885      	ldr	r5, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007940:	4b43      	ldr	r3, [pc, #268]	@ (8007a50 <HAL_TIM_ConfigClockSource+0x130>)
 8007942:	402b      	ands	r3, r5
  htim->Instance->SMCR = tmpsmcr;
 8007944:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 8007946:	680b      	ldr	r3, [r1, #0]
 8007948:	2b60      	cmp	r3, #96	@ 0x60
 800794a:	d04f      	beq.n	80079ec <HAL_TIM_ConfigClockSource+0xcc>
 800794c:	d832      	bhi.n	80079b4 <HAL_TIM_ConfigClockSource+0x94>
 800794e:	2b40      	cmp	r3, #64	@ 0x40
 8007950:	d064      	beq.n	8007a1c <HAL_TIM_ConfigClockSource+0xfc>
 8007952:	d816      	bhi.n	8007982 <HAL_TIM_ConfigClockSource+0x62>
 8007954:	2b20      	cmp	r3, #32
 8007956:	d00d      	beq.n	8007974 <HAL_TIM_ConfigClockSource+0x54>
 8007958:	d80a      	bhi.n	8007970 <HAL_TIM_ConfigClockSource+0x50>
 800795a:	f033 0110 	bics.w	r1, r3, #16
 800795e:	d009      	beq.n	8007974 <HAL_TIM_ConfigClockSource+0x54>
  htim->State = HAL_TIM_STATE_READY;
 8007960:	2301      	movs	r3, #1
 8007962:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 8007966:	2300      	movs	r3, #0
 8007968:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 800796c:	4610      	mov	r0, r2
 800796e:	bd38      	pop	{r3, r4, r5, pc}
  switch (sClockSourceConfig->ClockSource)
 8007970:	2b30      	cmp	r3, #48	@ 0x30
 8007972:	d1f5      	bne.n	8007960 <HAL_TIM_ConfigClockSource+0x40>
  tmpsmcr = TIMx->SMCR;
 8007974:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8007976:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800797a:	4313      	orrs	r3, r2
 800797c:	f043 0307 	orr.w	r3, r3, #7
  TIMx->SMCR = tmpsmcr;
 8007980:	e028      	b.n	80079d4 <HAL_TIM_ConfigClockSource+0xb4>
  switch (sClockSourceConfig->ClockSource)
 8007982:	2b50      	cmp	r3, #80	@ 0x50
 8007984:	d1ec      	bne.n	8007960 <HAL_TIM_ConfigClockSource+0x40>
                               sClockSourceConfig->ClockPolarity,
 8007986:	684a      	ldr	r2, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8007988:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 800798a:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800798c:	6a03      	ldr	r3, [r0, #32]
 800798e:	f023 0301 	bic.w	r3, r3, #1
 8007992:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007994:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007996:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800799a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800799e:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccer |= TIM_ICPolarity;
 80079a2:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 80079a4:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 80079a6:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 80079a8:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80079aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80079ae:	f043 0357 	orr.w	r3, r3, #87	@ 0x57
  TIMx->SMCR = tmpsmcr;
 80079b2:	e00f      	b.n	80079d4 <HAL_TIM_ConfigClockSource+0xb4>
  switch (sClockSourceConfig->ClockSource)
 80079b4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80079b8:	d00d      	beq.n	80079d6 <HAL_TIM_ConfigClockSource+0xb6>
 80079ba:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80079be:	d00c      	beq.n	80079da <HAL_TIM_ConfigClockSource+0xba>
 80079c0:	2b70      	cmp	r3, #112	@ 0x70
 80079c2:	d1cd      	bne.n	8007960 <HAL_TIM_ConfigClockSource+0x40>
      TIM_ETR_SetConfig(htim->Instance,
 80079c4:	68cb      	ldr	r3, [r1, #12]
 80079c6:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 80079ca:	f7ff ff9f 	bl	800790c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80079ce:	6883      	ldr	r3, [r0, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80079d0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
      htim->Instance->SMCR = tmpsmcr;
 80079d4:	6083      	str	r3, [r0, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80079d6:	2200      	movs	r2, #0
 80079d8:	e7c2      	b.n	8007960 <HAL_TIM_ConfigClockSource+0x40>
      TIM_ETR_SetConfig(htim->Instance,
 80079da:	68cb      	ldr	r3, [r1, #12]
 80079dc:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 80079e0:	f7ff ff94 	bl	800790c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80079e4:	6883      	ldr	r3, [r0, #8]
 80079e6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80079ea:	e7f3      	b.n	80079d4 <HAL_TIM_ConfigClockSource+0xb4>
  tmpccer = TIMx->CCER;
 80079ec:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80079ee:	6a02      	ldr	r2, [r0, #32]
                               sClockSourceConfig->ClockPolarity,
 80079f0:	684d      	ldr	r5, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 80079f2:	68c9      	ldr	r1, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80079f4:	f022 0210 	bic.w	r2, r2, #16
 80079f8:	6202      	str	r2, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80079fa:	6982      	ldr	r2, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80079fc:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007a00:	f422 4270 	bic.w	r2, r2, #61440	@ 0xf000
  tmpccer |= (TIM_ICPolarity << 4U);
 8007a04:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007a08:	ea42 3201 	orr.w	r2, r2, r1, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8007a0c:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8007a0e:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8007a10:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8007a12:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007a16:	f043 0367 	orr.w	r3, r3, #103	@ 0x67
  TIMx->SMCR = tmpsmcr;
 8007a1a:	e7db      	b.n	80079d4 <HAL_TIM_ConfigClockSource+0xb4>
                               sClockSourceConfig->ClockPolarity,
 8007a1c:	684a      	ldr	r2, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8007a1e:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 8007a20:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007a22:	6a03      	ldr	r3, [r0, #32]
 8007a24:	f023 0301 	bic.w	r3, r3, #1
 8007a28:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007a2a:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007a2c:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007a30:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007a34:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccer |= TIM_ICPolarity;
 8007a38:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 8007a3a:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8007a3c:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8007a3e:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8007a40:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007a44:	f043 0347 	orr.w	r3, r3, #71	@ 0x47
  TIMx->SMCR = tmpsmcr;
 8007a48:	e7c4      	b.n	80079d4 <HAL_TIM_ConfigClockSource+0xb4>
  __HAL_LOCK(htim);
 8007a4a:	4602      	mov	r2, r0
 8007a4c:	e78e      	b.n	800796c <HAL_TIM_ConfigClockSource+0x4c>
 8007a4e:	bf00      	nop
 8007a50:	fffe0088 	.word	0xfffe0088

08007a54 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007a54:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007a56:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8007a5a:	2b01      	cmp	r3, #1
{
 8007a5c:	4604      	mov	r4, r0
 8007a5e:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 8007a62:	d032      	beq.n	8007aca <HAL_TIMEx_MasterConfigSynchronization+0x76>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007a64:	6823      	ldr	r3, [r4, #0]
  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007a66:	4d19      	ldr	r5, [pc, #100]	@ (8007acc <HAL_TIMEx_MasterConfigSynchronization+0x78>)
  htim->State = HAL_TIM_STATE_BUSY;
 8007a68:	f884 003d 	strb.w	r0, [r4, #61]	@ 0x3d
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007a6c:	42ab      	cmp	r3, r5
  tmpcr2 = htim->Instance->CR2;
 8007a6e:	685a      	ldr	r2, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;
 8007a70:	6898      	ldr	r0, [r3, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007a72:	d002      	beq.n	8007a7a <HAL_TIMEx_MasterConfigSynchronization+0x26>
 8007a74:	4e16      	ldr	r6, [pc, #88]	@ (8007ad0 <HAL_TIMEx_MasterConfigSynchronization+0x7c>)
 8007a76:	42b3      	cmp	r3, r6
 8007a78:	d103      	bne.n	8007a82 <HAL_TIMEx_MasterConfigSynchronization+0x2e>
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007a7a:	684e      	ldr	r6, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007a7c:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007a80:	4332      	orrs	r2, r6
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007a82:	680e      	ldr	r6, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 8007a84:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007a88:	4332      	orrs	r2, r6

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007a8a:	42ab      	cmp	r3, r5
  htim->Instance->CR2 = tmpcr2;
 8007a8c:	605a      	str	r2, [r3, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007a8e:	d011      	beq.n	8007ab4 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 8007a90:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007a94:	d00e      	beq.n	8007ab4 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 8007a96:	4a0f      	ldr	r2, [pc, #60]	@ (8007ad4 <HAL_TIMEx_MasterConfigSynchronization+0x80>)
 8007a98:	4293      	cmp	r3, r2
 8007a9a:	d00b      	beq.n	8007ab4 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 8007a9c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8007aa0:	4293      	cmp	r3, r2
 8007aa2:	d007      	beq.n	8007ab4 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 8007aa4:	f502 3296 	add.w	r2, r2, #76800	@ 0x12c00
 8007aa8:	4293      	cmp	r3, r2
 8007aaa:	d003      	beq.n	8007ab4 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 8007aac:	f502 6240 	add.w	r2, r2, #3072	@ 0xc00
 8007ab0:	4293      	cmp	r3, r2
 8007ab2:	d104      	bne.n	8007abe <HAL_TIMEx_MasterConfigSynchronization+0x6a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007ab4:	6889      	ldr	r1, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007ab6:	f020 0280 	bic.w	r2, r0, #128	@ 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007aba:	430a      	orrs	r2, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007abc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007abe:	2301      	movs	r3, #1

  __HAL_UNLOCK(htim);
 8007ac0:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8007ac2:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 8007ac6:	f884 003c 	strb.w	r0, [r4, #60]	@ 0x3c

  return HAL_OK;
}
 8007aca:	bd70      	pop	{r4, r5, r6, pc}
 8007acc:	40012c00 	.word	0x40012c00
 8007ad0:	40013400 	.word	0x40013400
 8007ad4:	40000400 	.word	0x40000400

08007ad8 <HAL_TIMEx_CommutCallback>:
/**
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
 8007ad8:	4770      	bx	lr

08007ada <HAL_TIMEx_BreakCallback>:
/**
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
 8007ada:	4770      	bx	lr

08007adc <HAL_TIMEx_Break2Callback>:
/**
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
 8007adc:	4770      	bx	lr

08007ade <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007ade:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ae0:	e852 3f00 	ldrex	r3, [r2]
 8007ae4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ae8:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 8007aec:	6802      	ldr	r2, [r0, #0]
 8007aee:	2900      	cmp	r1, #0
 8007af0:	d1f5      	bne.n	8007ade <UART_EndRxTransfer>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007af2:	f102 0308 	add.w	r3, r2, #8
 8007af6:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007afa:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007afe:	f102 0c08 	add.w	ip, r2, #8
 8007b02:	e84c 3100 	strex	r1, r3, [ip]
 8007b06:	2900      	cmp	r1, #0
 8007b08:	d1f3      	bne.n	8007af2 <UART_EndRxTransfer+0x14>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007b0a:	6e03      	ldr	r3, [r0, #96]	@ 0x60
 8007b0c:	2b01      	cmp	r3, #1
 8007b0e:	d107      	bne.n	8007b20 <UART_EndRxTransfer+0x42>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b10:	e852 3f00 	ldrex	r3, [r2]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b14:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b18:	e842 3100 	strex	r1, r3, [r2]
 8007b1c:	2900      	cmp	r1, #0
 8007b1e:	d1f7      	bne.n	8007b10 <UART_EndRxTransfer+0x32>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007b20:	2320      	movs	r3, #32
 8007b22:	f8c0 3080 	str.w	r3, [r0, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b26:	2300      	movs	r3, #0
 8007b28:	6603      	str	r3, [r0, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007b2a:	6683      	str	r3, [r0, #104]	@ 0x68
}
 8007b2c:	4770      	bx	lr

08007b2e <HAL_UART_Abort>:
{
 8007b2e:	b510      	push	{r4, lr}
 8007b30:	4604      	mov	r4, r0
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 8007b32:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b34:	e852 3f00 	ldrex	r3, [r2]
 8007b38:	f423 73f0 	bic.w	r3, r3, #480	@ 0x1e0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b3c:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 8007b40:	6823      	ldr	r3, [r4, #0]
 8007b42:	2900      	cmp	r1, #0
 8007b44:	d1f5      	bne.n	8007b32 <HAL_UART_Abort+0x4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b46:	f103 0208 	add.w	r2, r3, #8
 8007b4a:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b4e:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b52:	f103 0008 	add.w	r0, r3, #8
 8007b56:	e840 2100 	strex	r1, r2, [r0]
 8007b5a:	2900      	cmp	r1, #0
 8007b5c:	d1f3      	bne.n	8007b46 <HAL_UART_Abort+0x18>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007b5e:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 8007b60:	2a01      	cmp	r2, #1
 8007b62:	d107      	bne.n	8007b74 <HAL_UART_Abort+0x46>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b64:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8007b68:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b6c:	e843 2100 	strex	r1, r2, [r3]
 8007b70:	2900      	cmp	r1, #0
 8007b72:	d1f7      	bne.n	8007b64 <HAL_UART_Abort+0x36>
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8007b74:	689a      	ldr	r2, [r3, #8]
 8007b76:	0612      	lsls	r2, r2, #24
 8007b78:	d51b      	bpl.n	8007bb2 <HAL_UART_Abort+0x84>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b7a:	f103 0208 	add.w	r2, r3, #8
 8007b7e:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007b82:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b86:	f103 0008 	add.w	r0, r3, #8
 8007b8a:	e840 2100 	strex	r1, r2, [r0]
 8007b8e:	2900      	cmp	r1, #0
 8007b90:	d1f3      	bne.n	8007b7a <HAL_UART_Abort+0x4c>
    if (huart->hdmatx != NULL)
 8007b92:	6f20      	ldr	r0, [r4, #112]	@ 0x70
 8007b94:	b168      	cbz	r0, 8007bb2 <HAL_UART_Abort+0x84>
      huart->hdmatx->XferAbortCallback = NULL;
 8007b96:	6341      	str	r1, [r0, #52]	@ 0x34
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8007b98:	f7fe f9b3 	bl	8005f02 <HAL_DMA_Abort>
 8007b9c:	b148      	cbz	r0, 8007bb2 <HAL_UART_Abort+0x84>
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8007b9e:	6f20      	ldr	r0, [r4, #112]	@ 0x70
 8007ba0:	f7fe fa14 	bl	8005fcc <HAL_DMA_GetError>
 8007ba4:	2820      	cmp	r0, #32
 8007ba6:	d104      	bne.n	8007bb2 <HAL_UART_Abort+0x84>
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007ba8:	2310      	movs	r3, #16
 8007baa:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
          return HAL_TIMEOUT;
 8007bae:	2003      	movs	r0, #3
}
 8007bb0:	bd10      	pop	{r4, pc}
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007bb2:	6822      	ldr	r2, [r4, #0]
 8007bb4:	6893      	ldr	r3, [r2, #8]
 8007bb6:	065b      	lsls	r3, r3, #25
 8007bb8:	d516      	bpl.n	8007be8 <HAL_UART_Abort+0xba>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bba:	f102 0308 	add.w	r3, r2, #8
 8007bbe:	e853 3f00 	ldrex	r3, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007bc2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bc6:	f102 0008 	add.w	r0, r2, #8
 8007bca:	e840 3100 	strex	r1, r3, [r0]
 8007bce:	2900      	cmp	r1, #0
 8007bd0:	d1f3      	bne.n	8007bba <HAL_UART_Abort+0x8c>
    if (huart->hdmarx != NULL)
 8007bd2:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 8007bd4:	b140      	cbz	r0, 8007be8 <HAL_UART_Abort+0xba>
      huart->hdmarx->XferAbortCallback = NULL;
 8007bd6:	6341      	str	r1, [r0, #52]	@ 0x34
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8007bd8:	f7fe f993 	bl	8005f02 <HAL_DMA_Abort>
 8007bdc:	b120      	cbz	r0, 8007be8 <HAL_UART_Abort+0xba>
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8007bde:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 8007be0:	f7fe f9f4 	bl	8005fcc <HAL_DMA_GetError>
 8007be4:	2820      	cmp	r0, #32
 8007be6:	d0df      	beq.n	8007ba8 <HAL_UART_Abort+0x7a>
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8007be8:	6823      	ldr	r3, [r4, #0]
  huart->TxXferCount = 0U;
 8007bea:	2000      	movs	r0, #0
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8007bec:	220f      	movs	r2, #15
  huart->TxXferCount = 0U;
 8007bee:	f8a4 0052 	strh.w	r0, [r4, #82]	@ 0x52
  huart->RxXferCount = 0U;
 8007bf2:	f8a4 005a 	strh.w	r0, [r4, #90]	@ 0x5a
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8007bf6:	621a      	str	r2, [r3, #32]
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007bf8:	699a      	ldr	r2, [r3, #24]
 8007bfa:	f042 0208 	orr.w	r2, r2, #8
 8007bfe:	619a      	str	r2, [r3, #24]
  huart->gState  = HAL_UART_STATE_READY;
 8007c00:	2320      	movs	r3, #32
 8007c02:	67e3      	str	r3, [r4, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007c04:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c08:	6620      	str	r0, [r4, #96]	@ 0x60
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c0a:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
  return HAL_OK;
 8007c0e:	e7cf      	b.n	8007bb0 <HAL_UART_Abort+0x82>

08007c10 <HAL_UART_RxCpltCallback>:
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
 8007c10:	4770      	bx	lr

08007c12 <HAL_UART_RxHalfCpltCallback>:
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
 8007c12:	4770      	bx	lr

08007c14 <HAL_UART_ErrorCallback>:
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
 8007c14:	4770      	bx	lr

08007c16 <UART_DMAError>:
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007c16:	6a40      	ldr	r0, [r0, #36]	@ 0x24

  const HAL_UART_StateTypeDef gstate = huart->gState;
  const HAL_UART_StateTypeDef rxstate = huart->RxState;

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8007c18:	6803      	ldr	r3, [r0, #0]
  const HAL_UART_StateTypeDef gstate = huart->gState;
 8007c1a:	6fc2      	ldr	r2, [r0, #124]	@ 0x7c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8007c1c:	f8d0 1080 	ldr.w	r1, [r0, #128]	@ 0x80
{
 8007c20:	b510      	push	{r4, lr}
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8007c22:	689c      	ldr	r4, [r3, #8]
 8007c24:	0624      	lsls	r4, r4, #24
 8007c26:	d50e      	bpl.n	8007c46 <UART_DMAError+0x30>
 8007c28:	2a21      	cmp	r2, #33	@ 0x21
 8007c2a:	d10c      	bne.n	8007c46 <UART_DMAError+0x30>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8007c2c:	2200      	movs	r2, #0
 8007c2e:	f8a0 2052 	strh.w	r2, [r0, #82]	@ 0x52
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c32:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007c36:	f022 02c0 	bic.w	r2, r2, #192	@ 0xc0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c3a:	e843 2400 	strex	r4, r2, [r3]
 8007c3e:	2c00      	cmp	r4, #0
 8007c40:	d1f7      	bne.n	8007c32 <UART_DMAError+0x1c>
  huart->gState = HAL_UART_STATE_READY;
 8007c42:	2220      	movs	r2, #32
 8007c44:	67c2      	str	r2, [r0, #124]	@ 0x7c
    UART_EndTxTransfer(huart);
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8007c46:	689b      	ldr	r3, [r3, #8]
 8007c48:	065b      	lsls	r3, r3, #25
 8007c4a:	d506      	bpl.n	8007c5a <UART_DMAError+0x44>
 8007c4c:	2922      	cmp	r1, #34	@ 0x22
 8007c4e:	d104      	bne.n	8007c5a <UART_DMAError+0x44>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8007c50:	2300      	movs	r3, #0
 8007c52:	f8a0 305a 	strh.w	r3, [r0, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 8007c56:	f7ff ff42 	bl	8007ade <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007c5a:	f8d0 3084 	ldr.w	r3, [r0, #132]	@ 0x84
 8007c5e:	f043 0310 	orr.w	r3, r3, #16
 8007c62:	f8c0 3084 	str.w	r3, [r0, #132]	@ 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007c66:	f7ff ffd5 	bl	8007c14 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007c6a:	bd10      	pop	{r4, pc}

08007c6c <HAL_UARTEx_RxEventCallback>:
}
 8007c6c:	4770      	bx	lr

08007c6e <UART_DMARxHalfCplt>:
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007c6e:	6a40      	ldr	r0, [r0, #36]	@ 0x24
{
 8007c70:	b508      	push	{r3, lr}
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8007c72:	2301      	movs	r3, #1
 8007c74:	6643      	str	r3, [r0, #100]	@ 0x64
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c76:	6e03      	ldr	r3, [r0, #96]	@ 0x60
 8007c78:	2b01      	cmp	r3, #1
 8007c7a:	d105      	bne.n	8007c88 <UART_DMARxHalfCplt+0x1a>
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8007c7c:	f8b0 1058 	ldrh.w	r1, [r0, #88]	@ 0x58
 8007c80:	0849      	lsrs	r1, r1, #1
 8007c82:	f7ff fff3 	bl	8007c6c <HAL_UARTEx_RxEventCallback>
}
 8007c86:	bd08      	pop	{r3, pc}
    HAL_UART_RxHalfCpltCallback(huart);
 8007c88:	f7ff ffc3 	bl	8007c12 <HAL_UART_RxHalfCpltCallback>
}
 8007c8c:	e7fb      	b.n	8007c86 <UART_DMARxHalfCplt+0x18>

08007c8e <UART_DMAReceiveCplt>:
{
 8007c8e:	b508      	push	{r3, lr}
 8007c90:	4603      	mov	r3, r0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007c92:	6a40      	ldr	r0, [r0, #36]	@ 0x24
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8007c94:	699b      	ldr	r3, [r3, #24]
 8007c96:	2b20      	cmp	r3, #32
 8007c98:	d032      	beq.n	8007d00 <UART_DMAReceiveCplt+0x72>
    huart->RxXferCount = 0U;
 8007c9a:	2300      	movs	r3, #0
 8007c9c:	f8a0 305a 	strh.w	r3, [r0, #90]	@ 0x5a
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007ca0:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ca2:	e852 3f00 	ldrex	r3, [r2]
 8007ca6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007caa:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 8007cae:	6803      	ldr	r3, [r0, #0]
 8007cb0:	2900      	cmp	r1, #0
 8007cb2:	d1f5      	bne.n	8007ca0 <UART_DMAReceiveCplt+0x12>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cb4:	f103 0208 	add.w	r2, r3, #8
 8007cb8:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007cbc:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cc0:	f103 0c08 	add.w	ip, r3, #8
 8007cc4:	e84c 2100 	strex	r1, r2, [ip]
 8007cc8:	2900      	cmp	r1, #0
 8007cca:	d1f3      	bne.n	8007cb4 <UART_DMAReceiveCplt+0x26>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ccc:	f103 0208 	add.w	r2, r3, #8
 8007cd0:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007cd4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cd8:	f103 0c08 	add.w	ip, r3, #8
 8007cdc:	e84c 2100 	strex	r1, r2, [ip]
 8007ce0:	2900      	cmp	r1, #0
 8007ce2:	d1f3      	bne.n	8007ccc <UART_DMAReceiveCplt+0x3e>
    huart->RxState = HAL_UART_STATE_READY;
 8007ce4:	2220      	movs	r2, #32
 8007ce6:	f8c0 2080 	str.w	r2, [r0, #128]	@ 0x80
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007cea:	6e02      	ldr	r2, [r0, #96]	@ 0x60
 8007cec:	2a01      	cmp	r2, #1
 8007cee:	d107      	bne.n	8007d00 <UART_DMAReceiveCplt+0x72>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cf0:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007cf4:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cf8:	e843 2100 	strex	r1, r2, [r3]
 8007cfc:	2900      	cmp	r1, #0
 8007cfe:	d1f7      	bne.n	8007cf0 <UART_DMAReceiveCplt+0x62>
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007d00:	2300      	movs	r3, #0
 8007d02:	6643      	str	r3, [r0, #100]	@ 0x64
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007d04:	6e03      	ldr	r3, [r0, #96]	@ 0x60
 8007d06:	2b01      	cmp	r3, #1
 8007d08:	d104      	bne.n	8007d14 <UART_DMAReceiveCplt+0x86>
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007d0a:	f8b0 1058 	ldrh.w	r1, [r0, #88]	@ 0x58
 8007d0e:	f7ff ffad 	bl	8007c6c <HAL_UARTEx_RxEventCallback>
}
 8007d12:	bd08      	pop	{r3, pc}
    HAL_UART_RxCpltCallback(huart);
 8007d14:	f7ff ff7c 	bl	8007c10 <HAL_UART_RxCpltCallback>
}
 8007d18:	e7fb      	b.n	8007d12 <UART_DMAReceiveCplt+0x84>
	...

08007d1c <UART_SetConfig>:
{
 8007d1c:	b538      	push	{r3, r4, r5, lr}
 8007d1e:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007d20:	69c0      	ldr	r0, [r0, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007d22:	6823      	ldr	r3, [r4, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007d24:	6925      	ldr	r5, [r4, #16]
 8007d26:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007d28:	6819      	ldr	r1, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007d2a:	432a      	orrs	r2, r5
 8007d2c:	6965      	ldr	r5, [r4, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007d2e:	f421 4116 	bic.w	r1, r1, #38400	@ 0x9600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007d32:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007d34:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007d38:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007d3a:	430a      	orrs	r2, r1
 8007d3c:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007d3e:	685a      	ldr	r2, [r3, #4]
 8007d40:	68e1      	ldr	r1, [r4, #12]
  tmpreg |= huart->Init.OneBitSampling;
 8007d42:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007d44:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 8007d48:	430a      	orrs	r2, r1
 8007d4a:	605a      	str	r2, [r3, #4]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007d4c:	6899      	ldr	r1, [r3, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007d4e:	69a2      	ldr	r2, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007d50:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
  tmpreg |= huart->Init.OneBitSampling;
 8007d54:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007d56:	430a      	orrs	r2, r1
 8007d58:	609a      	str	r2, [r3, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007d5a:	4a56      	ldr	r2, [pc, #344]	@ (8007eb4 <UART_SetConfig+0x198>)
 8007d5c:	4293      	cmp	r3, r2
 8007d5e:	d112      	bne.n	8007d86 <UART_SetConfig+0x6a>
 8007d60:	4b55      	ldr	r3, [pc, #340]	@ (8007eb8 <UART_SetConfig+0x19c>)
 8007d62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d64:	f003 0303 	and.w	r3, r3, #3
 8007d68:	2b02      	cmp	r3, #2
 8007d6a:	f000 8091 	beq.w	8007e90 <UART_SetConfig+0x174>
 8007d6e:	2b03      	cmp	r3, #3
 8007d70:	d022      	beq.n	8007db8 <UART_SetConfig+0x9c>
 8007d72:	2b01      	cmp	r3, #1
 8007d74:	f040 8092 	bne.w	8007e9c <UART_SetConfig+0x180>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007d78:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8007d7c:	f040 8085 	bne.w	8007e8a <UART_SetConfig+0x16e>
        pclk = HAL_RCC_GetSysClockFreq();
 8007d80:	f7fe fc54 	bl	800662c <HAL_RCC_GetSysClockFreq>
        break;
 8007d84:	e06b      	b.n	8007e5e <UART_SetConfig+0x142>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007d86:	4a4d      	ldr	r2, [pc, #308]	@ (8007ebc <UART_SetConfig+0x1a0>)
 8007d88:	4293      	cmp	r3, r2
 8007d8a:	d12e      	bne.n	8007dea <UART_SetConfig+0xce>
 8007d8c:	4b4a      	ldr	r3, [pc, #296]	@ (8007eb8 <UART_SetConfig+0x19c>)
 8007d8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d90:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8007d94:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007d98:	d07a      	beq.n	8007e90 <UART_SetConfig+0x174>
 8007d9a:	d80a      	bhi.n	8007db2 <UART_SetConfig+0x96>
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	f000 8083 	beq.w	8007ea8 <UART_SetConfig+0x18c>
 8007da2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007da6:	d0e7      	beq.n	8007d78 <UART_SetConfig+0x5c>
        ret = HAL_ERROR;
 8007da8:	2001      	movs	r0, #1
  huart->RxISR = NULL;
 8007daa:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 8007dac:	e9c4 331a 	strd	r3, r3, [r4, #104]	@ 0x68
}
 8007db0:	bd38      	pop	{r3, r4, r5, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007db2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007db6:	d1f7      	bne.n	8007da8 <UART_SetConfig+0x8c>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007db8:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8007dbc:	4840      	ldr	r0, [pc, #256]	@ (8007ec0 <UART_SetConfig+0x1a4>)
 8007dbe:	d156      	bne.n	8007e6e <UART_SetConfig+0x152>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007dc0:	6862      	ldr	r2, [r4, #4]
 8007dc2:	0853      	lsrs	r3, r2, #1
 8007dc4:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8007dc8:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007dcc:	f64f 72ef 	movw	r2, #65519	@ 0xffef
 8007dd0:	f1a3 0110 	sub.w	r1, r3, #16
 8007dd4:	4291      	cmp	r1, r2
 8007dd6:	d8e7      	bhi.n	8007da8 <UART_SetConfig+0x8c>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007dd8:	f023 020f 	bic.w	r2, r3, #15
        huart->Instance->BRR = brrtemp;
 8007ddc:	6821      	ldr	r1, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007dde:	b292      	uxth	r2, r2
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007de0:	f3c3 0342 	ubfx	r3, r3, #1, #3
        huart->Instance->BRR = brrtemp;
 8007de4:	4313      	orrs	r3, r2
 8007de6:	60cb      	str	r3, [r1, #12]
 8007de8:	e03b      	b.n	8007e62 <UART_SetConfig+0x146>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007dea:	4a36      	ldr	r2, [pc, #216]	@ (8007ec4 <UART_SetConfig+0x1a8>)
 8007dec:	4293      	cmp	r3, r2
 8007dee:	d10f      	bne.n	8007e10 <UART_SetConfig+0xf4>
 8007df0:	4b31      	ldr	r3, [pc, #196]	@ (8007eb8 <UART_SetConfig+0x19c>)
 8007df2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007df4:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8007df8:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8007dfc:	d048      	beq.n	8007e90 <UART_SetConfig+0x174>
 8007dfe:	d804      	bhi.n	8007e0a <UART_SetConfig+0xee>
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d051      	beq.n	8007ea8 <UART_SetConfig+0x18c>
 8007e04:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007e08:	e7cd      	b.n	8007da6 <UART_SetConfig+0x8a>
 8007e0a:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8007e0e:	e7d2      	b.n	8007db6 <UART_SetConfig+0x9a>
 8007e10:	4a2d      	ldr	r2, [pc, #180]	@ (8007ec8 <UART_SetConfig+0x1ac>)
 8007e12:	4293      	cmp	r3, r2
 8007e14:	d10f      	bne.n	8007e36 <UART_SetConfig+0x11a>
 8007e16:	4b28      	ldr	r3, [pc, #160]	@ (8007eb8 <UART_SetConfig+0x19c>)
 8007e18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e1a:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8007e1e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007e22:	d035      	beq.n	8007e90 <UART_SetConfig+0x174>
 8007e24:	d804      	bhi.n	8007e30 <UART_SetConfig+0x114>
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d03e      	beq.n	8007ea8 <UART_SetConfig+0x18c>
 8007e2a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007e2e:	e7ba      	b.n	8007da6 <UART_SetConfig+0x8a>
 8007e30:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007e34:	e7bf      	b.n	8007db6 <UART_SetConfig+0x9a>
 8007e36:	4a25      	ldr	r2, [pc, #148]	@ (8007ecc <UART_SetConfig+0x1b0>)
 8007e38:	4293      	cmp	r3, r2
 8007e3a:	d1b5      	bne.n	8007da8 <UART_SetConfig+0x8c>
 8007e3c:	4b1e      	ldr	r3, [pc, #120]	@ (8007eb8 <UART_SetConfig+0x19c>)
 8007e3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e40:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8007e44:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007e48:	d022      	beq.n	8007e90 <UART_SetConfig+0x174>
 8007e4a:	d803      	bhi.n	8007e54 <UART_SetConfig+0x138>
 8007e4c:	b363      	cbz	r3, 8007ea8 <UART_SetConfig+0x18c>
 8007e4e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007e52:	e7a8      	b.n	8007da6 <UART_SetConfig+0x8a>
 8007e54:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8007e58:	e7ad      	b.n	8007db6 <UART_SetConfig+0x9a>
        pclk = HAL_RCC_GetPCLK2Freq();
 8007e5a:	f7fe fccb 	bl	80067f4 <HAL_RCC_GetPCLK2Freq>
    if (pclk != 0U)
 8007e5e:	2800      	cmp	r0, #0
 8007e60:	d1ae      	bne.n	8007dc0 <UART_SetConfig+0xa4>
        pclk = (uint32_t) HSI_VALUE;
 8007e62:	2000      	movs	r0, #0
 8007e64:	e7a1      	b.n	8007daa <UART_SetConfig+0x8e>
        pclk = HAL_RCC_GetPCLK1Freq();
 8007e66:	f7fe fcad 	bl	80067c4 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8007e6a:	2800      	cmp	r0, #0
 8007e6c:	d0f9      	beq.n	8007e62 <UART_SetConfig+0x146>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007e6e:	6862      	ldr	r2, [r4, #4]
 8007e70:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 8007e74:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007e78:	f64f 72ef 	movw	r2, #65519	@ 0xffef
 8007e7c:	f1a3 0110 	sub.w	r1, r3, #16
 8007e80:	4291      	cmp	r1, r2
 8007e82:	d891      	bhi.n	8007da8 <UART_SetConfig+0x8c>
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007e84:	6822      	ldr	r2, [r4, #0]
 8007e86:	60d3      	str	r3, [r2, #12]
 8007e88:	e7eb      	b.n	8007e62 <UART_SetConfig+0x146>
        pclk = HAL_RCC_GetSysClockFreq();
 8007e8a:	f7fe fbcf 	bl	800662c <HAL_RCC_GetSysClockFreq>
        break;
 8007e8e:	e7ec      	b.n	8007e6a <UART_SetConfig+0x14e>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007e90:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8007e94:	d094      	beq.n	8007dc0 <UART_SetConfig+0xa4>
 8007e96:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8007e9a:	e7e8      	b.n	8007e6e <UART_SetConfig+0x152>
 8007e9c:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8007ea0:	d0db      	beq.n	8007e5a <UART_SetConfig+0x13e>
        pclk = HAL_RCC_GetPCLK2Freq();
 8007ea2:	f7fe fca7 	bl	80067f4 <HAL_RCC_GetPCLK2Freq>
        break;
 8007ea6:	e7e0      	b.n	8007e6a <UART_SetConfig+0x14e>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007ea8:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8007eac:	d1db      	bne.n	8007e66 <UART_SetConfig+0x14a>
        pclk = HAL_RCC_GetPCLK1Freq();
 8007eae:	f7fe fc89 	bl	80067c4 <HAL_RCC_GetPCLK1Freq>
        break;
 8007eb2:	e7d4      	b.n	8007e5e <UART_SetConfig+0x142>
 8007eb4:	40013800 	.word	0x40013800
 8007eb8:	40021000 	.word	0x40021000
 8007ebc:	40004400 	.word	0x40004400
 8007ec0:	007a1200 	.word	0x007a1200
 8007ec4:	40004800 	.word	0x40004800
 8007ec8:	40004c00 	.word	0x40004c00
 8007ecc:	40005000 	.word	0x40005000

08007ed0 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007ed0:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8007ed2:	071a      	lsls	r2, r3, #28
{
 8007ed4:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007ed6:	d506      	bpl.n	8007ee6 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007ed8:	6801      	ldr	r1, [r0, #0]
 8007eda:	6b44      	ldr	r4, [r0, #52]	@ 0x34
 8007edc:	684a      	ldr	r2, [r1, #4]
 8007ede:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007ee2:	4322      	orrs	r2, r4
 8007ee4:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007ee6:	07dc      	lsls	r4, r3, #31
 8007ee8:	d506      	bpl.n	8007ef8 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007eea:	6801      	ldr	r1, [r0, #0]
 8007eec:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 8007eee:	684a      	ldr	r2, [r1, #4]
 8007ef0:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8007ef4:	4322      	orrs	r2, r4
 8007ef6:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007ef8:	0799      	lsls	r1, r3, #30
 8007efa:	d506      	bpl.n	8007f0a <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007efc:	6801      	ldr	r1, [r0, #0]
 8007efe:	6ac4      	ldr	r4, [r0, #44]	@ 0x2c
 8007f00:	684a      	ldr	r2, [r1, #4]
 8007f02:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8007f06:	4322      	orrs	r2, r4
 8007f08:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007f0a:	075a      	lsls	r2, r3, #29
 8007f0c:	d506      	bpl.n	8007f1c <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007f0e:	6801      	ldr	r1, [r0, #0]
 8007f10:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 8007f12:	684a      	ldr	r2, [r1, #4]
 8007f14:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8007f18:	4322      	orrs	r2, r4
 8007f1a:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007f1c:	06dc      	lsls	r4, r3, #27
 8007f1e:	d506      	bpl.n	8007f2e <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007f20:	6801      	ldr	r1, [r0, #0]
 8007f22:	6b84      	ldr	r4, [r0, #56]	@ 0x38
 8007f24:	688a      	ldr	r2, [r1, #8]
 8007f26:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8007f2a:	4322      	orrs	r2, r4
 8007f2c:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007f2e:	0699      	lsls	r1, r3, #26
 8007f30:	d506      	bpl.n	8007f40 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007f32:	6801      	ldr	r1, [r0, #0]
 8007f34:	6bc4      	ldr	r4, [r0, #60]	@ 0x3c
 8007f36:	688a      	ldr	r2, [r1, #8]
 8007f38:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007f3c:	4322      	orrs	r2, r4
 8007f3e:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007f40:	065a      	lsls	r2, r3, #25
 8007f42:	d50f      	bpl.n	8007f64 <UART_AdvFeatureConfig+0x94>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007f44:	6801      	ldr	r1, [r0, #0]
 8007f46:	6c04      	ldr	r4, [r0, #64]	@ 0x40
 8007f48:	684a      	ldr	r2, [r1, #4]
 8007f4a:	f422 1280 	bic.w	r2, r2, #1048576	@ 0x100000
 8007f4e:	4322      	orrs	r2, r4
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007f50:	f5b4 1f80 	cmp.w	r4, #1048576	@ 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007f54:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007f56:	d105      	bne.n	8007f64 <UART_AdvFeatureConfig+0x94>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007f58:	684a      	ldr	r2, [r1, #4]
 8007f5a:	6c44      	ldr	r4, [r0, #68]	@ 0x44
 8007f5c:	f422 02c0 	bic.w	r2, r2, #6291456	@ 0x600000
 8007f60:	4322      	orrs	r2, r4
 8007f62:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007f64:	061b      	lsls	r3, r3, #24
 8007f66:	d506      	bpl.n	8007f76 <UART_AdvFeatureConfig+0xa6>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007f68:	6802      	ldr	r2, [r0, #0]
 8007f6a:	6c81      	ldr	r1, [r0, #72]	@ 0x48
 8007f6c:	6853      	ldr	r3, [r2, #4]
 8007f6e:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 8007f72:	430b      	orrs	r3, r1
 8007f74:	6053      	str	r3, [r2, #4]
}
 8007f76:	bd10      	pop	{r4, pc}

08007f78 <UART_WaitOnFlagUntilTimeout>:
{
 8007f78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007f7c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007f80:	4604      	mov	r4, r0
 8007f82:	460d      	mov	r5, r1
 8007f84:	4617      	mov	r7, r2
 8007f86:	4698      	mov	r8, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007f88:	6822      	ldr	r2, [r4, #0]
 8007f8a:	69d3      	ldr	r3, [r2, #28]
 8007f8c:	ea35 0303 	bics.w	r3, r5, r3
 8007f90:	bf0c      	ite	eq
 8007f92:	2301      	moveq	r3, #1
 8007f94:	2300      	movne	r3, #0
 8007f96:	42bb      	cmp	r3, r7
 8007f98:	d001      	beq.n	8007f9e <UART_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
 8007f9a:	2000      	movs	r0, #0
 8007f9c:	e022      	b.n	8007fe4 <UART_WaitOnFlagUntilTimeout+0x6c>
    if (Timeout != HAL_MAX_DELAY)
 8007f9e:	f1b9 3fff 	cmp.w	r9, #4294967295
 8007fa2:	d0f2      	beq.n	8007f8a <UART_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007fa4:	f7fd f998 	bl	80052d8 <HAL_GetTick>
 8007fa8:	eba0 0008 	sub.w	r0, r0, r8
 8007fac:	4548      	cmp	r0, r9
 8007fae:	d829      	bhi.n	8008004 <UART_WaitOnFlagUntilTimeout+0x8c>
 8007fb0:	f1b9 0f00 	cmp.w	r9, #0
 8007fb4:	d026      	beq.n	8008004 <UART_WaitOnFlagUntilTimeout+0x8c>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007fb6:	6821      	ldr	r1, [r4, #0]
 8007fb8:	680b      	ldr	r3, [r1, #0]
 8007fba:	075a      	lsls	r2, r3, #29
 8007fbc:	d5e4      	bpl.n	8007f88 <UART_WaitOnFlagUntilTimeout+0x10>
 8007fbe:	2d80      	cmp	r5, #128	@ 0x80
 8007fc0:	d0e2      	beq.n	8007f88 <UART_WaitOnFlagUntilTimeout+0x10>
 8007fc2:	2d40      	cmp	r5, #64	@ 0x40
 8007fc4:	d0e0      	beq.n	8007f88 <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007fc6:	69ce      	ldr	r6, [r1, #28]
 8007fc8:	f016 0608 	ands.w	r6, r6, #8
 8007fcc:	d00c      	beq.n	8007fe8 <UART_WaitOnFlagUntilTimeout+0x70>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007fce:	2508      	movs	r5, #8
          UART_EndRxTransfer(huart);
 8007fd0:	4620      	mov	r0, r4
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007fd2:	620d      	str	r5, [r1, #32]
          UART_EndRxTransfer(huart);
 8007fd4:	f7ff fd83 	bl	8007ade <UART_EndRxTransfer>
          __HAL_UNLOCK(huart);
 8007fd8:	2300      	movs	r3, #0
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007fda:	f8c4 5084 	str.w	r5, [r4, #132]	@ 0x84
          __HAL_UNLOCK(huart);
 8007fde:	f884 3078 	strb.w	r3, [r4, #120]	@ 0x78
          return HAL_ERROR;
 8007fe2:	2001      	movs	r0, #1
}
 8007fe4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007fe8:	69cb      	ldr	r3, [r1, #28]
 8007fea:	051b      	lsls	r3, r3, #20
 8007fec:	d5cc      	bpl.n	8007f88 <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007fee:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8007ff2:	620b      	str	r3, [r1, #32]
          UART_EndRxTransfer(huart);
 8007ff4:	4620      	mov	r0, r4
 8007ff6:	f7ff fd72 	bl	8007ade <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007ffa:	2320      	movs	r3, #32
 8007ffc:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
          __HAL_UNLOCK(huart);
 8008000:	f884 6078 	strb.w	r6, [r4, #120]	@ 0x78
        return HAL_TIMEOUT;
 8008004:	2003      	movs	r0, #3
 8008006:	e7ed      	b.n	8007fe4 <UART_WaitOnFlagUntilTimeout+0x6c>

08008008 <HAL_UART_Transmit>:
{
 8008008:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800800c:	4698      	mov	r8, r3
  if (huart->gState == HAL_UART_STATE_READY)
 800800e:	6fc3      	ldr	r3, [r0, #124]	@ 0x7c
 8008010:	2b20      	cmp	r3, #32
{
 8008012:	4604      	mov	r4, r0
 8008014:	460e      	mov	r6, r1
 8008016:	4617      	mov	r7, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8008018:	d143      	bne.n	80080a2 <HAL_UART_Transmit+0x9a>
    if ((pData == NULL) || (Size == 0U))
 800801a:	2900      	cmp	r1, #0
 800801c:	d043      	beq.n	80080a6 <HAL_UART_Transmit+0x9e>
 800801e:	2a00      	cmp	r2, #0
 8008020:	d041      	beq.n	80080a6 <HAL_UART_Transmit+0x9e>
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008022:	2321      	movs	r3, #33	@ 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008024:	2500      	movs	r5, #0
 8008026:	f8c0 5084 	str.w	r5, [r0, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800802a:	67c3      	str	r3, [r0, #124]	@ 0x7c
    tickstart = HAL_GetTick();
 800802c:	f7fd f954 	bl	80052d8 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008030:	68a3      	ldr	r3, [r4, #8]
    huart->TxXferSize  = Size;
 8008032:	f8a4 7050 	strh.w	r7, [r4, #80]	@ 0x50
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008036:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
    tickstart = HAL_GetTick();
 800803a:	4681      	mov	r9, r0
    huart->TxXferCount = Size;
 800803c:	f8a4 7052 	strh.w	r7, [r4, #82]	@ 0x52
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008040:	d103      	bne.n	800804a <HAL_UART_Transmit+0x42>
 8008042:	6923      	ldr	r3, [r4, #16]
 8008044:	b90b      	cbnz	r3, 800804a <HAL_UART_Transmit+0x42>
 8008046:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 8008048:	461e      	mov	r6, r3
    while (huart->TxXferCount > 0U)
 800804a:	f8b4 2052 	ldrh.w	r2, [r4, #82]	@ 0x52
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800804e:	f8cd 8000 	str.w	r8, [sp]
    while (huart->TxXferCount > 0U)
 8008052:	b292      	uxth	r2, r2
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008054:	464b      	mov	r3, r9
    while (huart->TxXferCount > 0U)
 8008056:	b93a      	cbnz	r2, 8008068 <HAL_UART_Transmit+0x60>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008058:	2140      	movs	r1, #64	@ 0x40
 800805a:	4620      	mov	r0, r4
 800805c:	f7ff ff8c 	bl	8007f78 <UART_WaitOnFlagUntilTimeout>
 8008060:	2320      	movs	r3, #32
 8008062:	b940      	cbnz	r0, 8008076 <HAL_UART_Transmit+0x6e>
    huart->gState = HAL_UART_STATE_READY;
 8008064:	67e3      	str	r3, [r4, #124]	@ 0x7c
    return HAL_OK;
 8008066:	e008      	b.n	800807a <HAL_UART_Transmit+0x72>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008068:	2200      	movs	r2, #0
 800806a:	2180      	movs	r1, #128	@ 0x80
 800806c:	4620      	mov	r0, r4
 800806e:	f7ff ff83 	bl	8007f78 <UART_WaitOnFlagUntilTimeout>
 8008072:	b128      	cbz	r0, 8008080 <HAL_UART_Transmit+0x78>
        huart->gState = HAL_UART_STATE_READY;
 8008074:	2320      	movs	r3, #32
 8008076:	67e3      	str	r3, [r4, #124]	@ 0x7c
        return HAL_TIMEOUT;
 8008078:	2003      	movs	r0, #3
}
 800807a:	b003      	add	sp, #12
 800807c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008080:	6822      	ldr	r2, [r4, #0]
      if (pdata8bits == NULL)
 8008082:	b95e      	cbnz	r6, 800809c <HAL_UART_Transmit+0x94>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008084:	f835 3b02 	ldrh.w	r3, [r5], #2
 8008088:	f3c3 0308 	ubfx	r3, r3, #0, #9
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800808c:	8513      	strh	r3, [r2, #40]	@ 0x28
      huart->TxXferCount--;
 800808e:	f8b4 2052 	ldrh.w	r2, [r4, #82]	@ 0x52
 8008092:	3a01      	subs	r2, #1
 8008094:	b292      	uxth	r2, r2
 8008096:	f8a4 2052 	strh.w	r2, [r4, #82]	@ 0x52
 800809a:	e7d6      	b.n	800804a <HAL_UART_Transmit+0x42>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800809c:	f816 3b01 	ldrb.w	r3, [r6], #1
 80080a0:	e7f4      	b.n	800808c <HAL_UART_Transmit+0x84>
    return HAL_BUSY;
 80080a2:	2002      	movs	r0, #2
 80080a4:	e7e9      	b.n	800807a <HAL_UART_Transmit+0x72>
      return  HAL_ERROR;
 80080a6:	2001      	movs	r0, #1
 80080a8:	e7e7      	b.n	800807a <HAL_UART_Transmit+0x72>

080080aa <UART_CheckIdleState>:
{
 80080aa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80080ac:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80080ae:	2600      	movs	r6, #0
 80080b0:	f8c0 6084 	str.w	r6, [r0, #132]	@ 0x84
  tickstart = HAL_GetTick();
 80080b4:	f7fd f910 	bl	80052d8 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80080b8:	6823      	ldr	r3, [r4, #0]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	071a      	lsls	r2, r3, #28
  tickstart = HAL_GetTick();
 80080be:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80080c0:	d51b      	bpl.n	80080fa <UART_CheckIdleState+0x50>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80080c2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80080c6:	9300      	str	r3, [sp, #0]
 80080c8:	4632      	mov	r2, r6
 80080ca:	4603      	mov	r3, r0
 80080cc:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80080d0:	4620      	mov	r0, r4
 80080d2:	f7ff ff51 	bl	8007f78 <UART_WaitOnFlagUntilTimeout>
 80080d6:	b180      	cbz	r0, 80080fa <UART_CheckIdleState+0x50>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80080d8:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080da:	e852 3f00 	ldrex	r3, [r2]
 80080de:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080e2:	e842 3100 	strex	r1, r3, [r2]
 80080e6:	2900      	cmp	r1, #0
 80080e8:	d1f6      	bne.n	80080d8 <UART_CheckIdleState+0x2e>
      huart->gState = HAL_UART_STATE_READY;
 80080ea:	2320      	movs	r3, #32
 80080ec:	67e3      	str	r3, [r4, #124]	@ 0x7c
      return HAL_TIMEOUT;
 80080ee:	2003      	movs	r0, #3
      __HAL_UNLOCK(huart);
 80080f0:	2300      	movs	r3, #0
 80080f2:	f884 3078 	strb.w	r3, [r4, #120]	@ 0x78
}
 80080f6:	b002      	add	sp, #8
 80080f8:	bd70      	pop	{r4, r5, r6, pc}
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80080fa:	6823      	ldr	r3, [r4, #0]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	075b      	lsls	r3, r3, #29
 8008100:	d524      	bpl.n	800814c <UART_CheckIdleState+0xa2>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008102:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008106:	9300      	str	r3, [sp, #0]
 8008108:	2200      	movs	r2, #0
 800810a:	462b      	mov	r3, r5
 800810c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8008110:	4620      	mov	r0, r4
 8008112:	f7ff ff31 	bl	8007f78 <UART_WaitOnFlagUntilTimeout>
 8008116:	b1c8      	cbz	r0, 800814c <UART_CheckIdleState+0xa2>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008118:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800811a:	e852 3f00 	ldrex	r3, [r2]
 800811e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008122:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 8008126:	6822      	ldr	r2, [r4, #0]
 8008128:	2900      	cmp	r1, #0
 800812a:	d1f5      	bne.n	8008118 <UART_CheckIdleState+0x6e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800812c:	f102 0308 	add.w	r3, r2, #8
 8008130:	e853 3f00 	ldrex	r3, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008134:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008138:	f102 0008 	add.w	r0, r2, #8
 800813c:	e840 3100 	strex	r1, r3, [r0]
 8008140:	2900      	cmp	r1, #0
 8008142:	d1f3      	bne.n	800812c <UART_CheckIdleState+0x82>
      huart->RxState = HAL_UART_STATE_READY;
 8008144:	2320      	movs	r3, #32
 8008146:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
      return HAL_TIMEOUT;
 800814a:	e7d0      	b.n	80080ee <UART_CheckIdleState+0x44>
  huart->gState = HAL_UART_STATE_READY;
 800814c:	2320      	movs	r3, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800814e:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8008150:	67e3      	str	r3, [r4, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8008152:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008156:	6620      	str	r0, [r4, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008158:	6660      	str	r0, [r4, #100]	@ 0x64
  return HAL_OK;
 800815a:	e7c9      	b.n	80080f0 <UART_CheckIdleState+0x46>

0800815c <HAL_UART_Init>:
{
 800815c:	b510      	push	{r4, lr}
  if (huart == NULL)
 800815e:	4604      	mov	r4, r0
 8008160:	b340      	cbz	r0, 80081b4 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 8008162:	6fc3      	ldr	r3, [r0, #124]	@ 0x7c
 8008164:	b91b      	cbnz	r3, 800816e <HAL_UART_Init+0x12>
    huart->Lock = HAL_UNLOCKED;
 8008166:	f880 3078 	strb.w	r3, [r0, #120]	@ 0x78
    HAL_UART_MspInit(huart);
 800816a:	f7fc fe57 	bl	8004e1c <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 800816e:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8008170:	2324      	movs	r3, #36	@ 0x24
 8008172:	67e3      	str	r3, [r4, #124]	@ 0x7c
  __HAL_UART_DISABLE(huart);
 8008174:	6813      	ldr	r3, [r2, #0]
 8008176:	f023 0301 	bic.w	r3, r3, #1
 800817a:	6013      	str	r3, [r2, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800817c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800817e:	b113      	cbz	r3, 8008186 <HAL_UART_Init+0x2a>
    UART_AdvFeatureConfig(huart);
 8008180:	4620      	mov	r0, r4
 8008182:	f7ff fea5 	bl	8007ed0 <UART_AdvFeatureConfig>
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008186:	4620      	mov	r0, r4
 8008188:	f7ff fdc8 	bl	8007d1c <UART_SetConfig>
 800818c:	2801      	cmp	r0, #1
 800818e:	d011      	beq.n	80081b4 <HAL_UART_Init+0x58>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008190:	6823      	ldr	r3, [r4, #0]
 8008192:	685a      	ldr	r2, [r3, #4]
 8008194:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008198:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800819a:	689a      	ldr	r2, [r3, #8]
 800819c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80081a0:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 80081a2:	681a      	ldr	r2, [r3, #0]
 80081a4:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 80081a8:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 80081aa:	601a      	str	r2, [r3, #0]
}
 80081ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 80081b0:	f7ff bf7b 	b.w	80080aa <UART_CheckIdleState>
}
 80081b4:	2001      	movs	r0, #1
 80081b6:	bd10      	pop	{r4, pc}

080081b8 <UART_Start_Receive_DMA>:
{
 80081b8:	b570      	push	{r4, r5, r6, lr}
 80081ba:	4613      	mov	r3, r2
 80081bc:	4604      	mov	r4, r0
  huart->RxXferSize = Size;
 80081be:	f8a0 2058 	strh.w	r2, [r0, #88]	@ 0x58
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80081c2:	2200      	movs	r2, #0
  huart->pRxBuffPtr = pData;
 80081c4:	6541      	str	r1, [r0, #84]	@ 0x54
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80081c6:	f8c0 2084 	str.w	r2, [r0, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80081ca:	2022      	movs	r0, #34	@ 0x22
 80081cc:	f8c4 0080 	str.w	r0, [r4, #128]	@ 0x80
  if (huart->hdmarx != NULL)
 80081d0:	6f60      	ldr	r0, [r4, #116]	@ 0x74
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80081d2:	6825      	ldr	r5, [r4, #0]
  if (huart->hdmarx != NULL)
 80081d4:	b1a0      	cbz	r0, 8008200 <UART_Start_Receive_DMA+0x48>
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80081d6:	4e1c      	ldr	r6, [pc, #112]	@ (8008248 <UART_Start_Receive_DMA+0x90>)
 80081d8:	6286      	str	r6, [r0, #40]	@ 0x28
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80081da:	4e1c      	ldr	r6, [pc, #112]	@ (800824c <UART_Start_Receive_DMA+0x94>)
 80081dc:	62c6      	str	r6, [r0, #44]	@ 0x2c
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80081de:	4e1c      	ldr	r6, [pc, #112]	@ (8008250 <UART_Start_Receive_DMA+0x98>)
    huart->hdmarx->XferAbortCallback = NULL;
 80081e0:	e9c0 620c 	strd	r6, r2, [r0, #48]	@ 0x30
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80081e4:	460a      	mov	r2, r1
 80081e6:	f105 0124 	add.w	r1, r5, #36	@ 0x24
 80081ea:	f7fd fe4f 	bl	8005e8c <HAL_DMA_Start_IT>
 80081ee:	b138      	cbz	r0, 8008200 <UART_Start_Receive_DMA+0x48>
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80081f0:	2310      	movs	r3, #16
 80081f2:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
      huart->RxState = HAL_UART_STATE_READY;
 80081f6:	2320      	movs	r3, #32
 80081f8:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
      return HAL_ERROR;
 80081fc:	2001      	movs	r0, #1
}
 80081fe:	bd70      	pop	{r4, r5, r6, pc}
  if (huart->Init.Parity != UART_PARITY_NONE)
 8008200:	6922      	ldr	r2, [r4, #16]
 8008202:	6823      	ldr	r3, [r4, #0]
 8008204:	b13a      	cbz	r2, 8008216 <UART_Start_Receive_DMA+0x5e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008206:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800820a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800820e:	e843 2100 	strex	r1, r2, [r3]
 8008212:	2900      	cmp	r1, #0
 8008214:	d1f7      	bne.n	8008206 <UART_Start_Receive_DMA+0x4e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008216:	f103 0208 	add.w	r2, r3, #8
 800821a:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800821e:	f042 0201 	orr.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008222:	f103 0008 	add.w	r0, r3, #8
 8008226:	e840 2100 	strex	r1, r2, [r0]
 800822a:	2900      	cmp	r1, #0
 800822c:	d1f3      	bne.n	8008216 <UART_Start_Receive_DMA+0x5e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800822e:	f103 0208 	add.w	r2, r3, #8
 8008232:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008236:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800823a:	f103 0108 	add.w	r1, r3, #8
 800823e:	e841 2000 	strex	r0, r2, [r1]
 8008242:	2800      	cmp	r0, #0
 8008244:	d1f3      	bne.n	800822e <UART_Start_Receive_DMA+0x76>
 8008246:	e7da      	b.n	80081fe <UART_Start_Receive_DMA+0x46>
 8008248:	08007c8f 	.word	0x08007c8f
 800824c:	08007c6f 	.word	0x08007c6f
 8008250:	08007c17 	.word	0x08007c17

08008254 <HAL_UART_Receive_DMA>:
  if (huart->RxState == HAL_UART_STATE_READY)
 8008254:	f8d0 3080 	ldr.w	r3, [r0, #128]	@ 0x80
 8008258:	2b20      	cmp	r3, #32
{
 800825a:	b430      	push	{r4, r5}
  if (huart->RxState == HAL_UART_STATE_READY)
 800825c:	d112      	bne.n	8008284 <HAL_UART_Receive_DMA+0x30>
    if ((pData == NULL) || (Size == 0U))
 800825e:	b1a1      	cbz	r1, 800828a <HAL_UART_Receive_DMA+0x36>
 8008260:	b19a      	cbz	r2, 800828a <HAL_UART_Receive_DMA+0x36>
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008262:	2300      	movs	r3, #0
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008264:	6804      	ldr	r4, [r0, #0]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008266:	6603      	str	r3, [r0, #96]	@ 0x60
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008268:	6863      	ldr	r3, [r4, #4]
 800826a:	021b      	lsls	r3, r3, #8
 800826c:	d507      	bpl.n	800827e <HAL_UART_Receive_DMA+0x2a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800826e:	e854 3f00 	ldrex	r3, [r4]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008272:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008276:	e844 3500 	strex	r5, r3, [r4]
 800827a:	2d00      	cmp	r5, #0
 800827c:	d1f7      	bne.n	800826e <HAL_UART_Receive_DMA+0x1a>
}
 800827e:	bc30      	pop	{r4, r5}
    return (UART_Start_Receive_DMA(huart, pData, Size));
 8008280:	f7ff bf9a 	b.w	80081b8 <UART_Start_Receive_DMA>
    return HAL_BUSY;
 8008284:	2002      	movs	r0, #2
}
 8008286:	bc30      	pop	{r4, r5}
 8008288:	4770      	bx	lr
      return HAL_ERROR;
 800828a:	2001      	movs	r0, #1
 800828c:	e7fb      	b.n	8008286 <HAL_UART_Receive_DMA+0x32>
	...

08008290 <osKernelInitialize>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008290:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 8008294:	b113      	cbz	r3, 800829c <osKernelInitialize+0xc>
    stat = osErrorISR;
 8008296:	f06f 0005 	mvn.w	r0, #5
 800829a:	4770      	bx	lr
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800829c:	f3ef 8310 	mrs	r3, PRIMASK
  if (IS_IRQ()) {
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d1f8      	bne.n	8008296 <osKernelInitialize+0x6>
 80082a4:	4b07      	ldr	r3, [pc, #28]	@ (80082c4 <osKernelInitialize+0x34>)
 80082a6:	6818      	ldr	r0, [r3, #0]
 80082a8:	2802      	cmp	r0, #2
 80082aa:	d106      	bne.n	80082ba <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80082ac:	f3ef 8311 	mrs	r3, BASEPRI
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d1f0      	bne.n	8008296 <osKernelInitialize+0x6>
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
      stat = osOK;
    } else {
      stat = osError;
 80082b4:	f04f 30ff 	mov.w	r0, #4294967295
    }
  }

  return (stat);
}
 80082b8:	4770      	bx	lr
    if (KernelState == osKernelInactive) {
 80082ba:	2800      	cmp	r0, #0
 80082bc:	d1fa      	bne.n	80082b4 <osKernelInitialize+0x24>
      KernelState = osKernelReady;
 80082be:	2201      	movs	r2, #1
 80082c0:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80082c2:	4770      	bx	lr
 80082c4:	20002c10 	.word	0x20002c10

080082c8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80082c8:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80082ca:	f3ef 8305 	mrs	r3, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 80082ce:	b113      	cbz	r3, 80082d6 <osKernelStart+0xe>
    stat = osErrorISR;
 80082d0:	f06f 0005 	mvn.w	r0, #5
      stat = osError;
    }
  }

  return (stat);
}
 80082d4:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80082d6:	f3ef 8410 	mrs	r4, PRIMASK
  if (IS_IRQ()) {
 80082da:	2c00      	cmp	r4, #0
 80082dc:	d1f8      	bne.n	80082d0 <osKernelStart+0x8>
 80082de:	4b09      	ldr	r3, [pc, #36]	@ (8008304 <osKernelStart+0x3c>)
 80082e0:	681a      	ldr	r2, [r3, #0]
 80082e2:	2a02      	cmp	r2, #2
 80082e4:	d106      	bne.n	80082f4 <osKernelStart+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80082e6:	f3ef 8311 	mrs	r3, BASEPRI
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d1f0      	bne.n	80082d0 <osKernelStart+0x8>
      stat = osError;
 80082ee:	f04f 30ff 	mov.w	r0, #4294967295
  return (stat);
 80082f2:	e7ef      	b.n	80082d4 <osKernelStart+0xc>
    if (KernelState == osKernelReady) {
 80082f4:	2a01      	cmp	r2, #1
 80082f6:	d1fa      	bne.n	80082ee <osKernelStart+0x26>
      KernelState = osKernelRunning;
 80082f8:	2202      	movs	r2, #2
 80082fa:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 80082fc:	f000 ff58 	bl	80091b0 <vTaskStartScheduler>
      stat = osOK;
 8008300:	4620      	mov	r0, r4
 8008302:	e7e7      	b.n	80082d4 <osKernelStart+0xc>
 8008304:	20002c10 	.word	0x20002c10

08008308 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8008308:	b5f0      	push	{r4, r5, r6, r7, lr}
 800830a:	b087      	sub	sp, #28
 800830c:	4614      	mov	r4, r2
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800830e:	2200      	movs	r2, #0
osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8008310:	460b      	mov	r3, r1
  hTask = NULL;
 8008312:	9205      	str	r2, [sp, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008314:	f3ef 8205 	mrs	r2, IPSR

  if (!IS_IRQ() && (func != NULL)) {
 8008318:	bb52      	cbnz	r2, 8008370 <osThreadNew+0x68>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800831a:	f3ef 8210 	mrs	r2, PRIMASK
 800831e:	bb3a      	cbnz	r2, 8008370 <osThreadNew+0x68>
 8008320:	4a26      	ldr	r2, [pc, #152]	@ (80083bc <osThreadNew+0xb4>)
 8008322:	6812      	ldr	r2, [r2, #0]
 8008324:	2a02      	cmp	r2, #2
 8008326:	d102      	bne.n	800832e <osThreadNew+0x26>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008328:	f3ef 8211 	mrs	r2, BASEPRI
 800832c:	bb02      	cbnz	r2, 8008370 <osThreadNew+0x68>
 800832e:	b1f8      	cbz	r0, 8008370 <osThreadNew+0x68>
    stack = configMINIMAL_STACK_SIZE;
    prio  = (UBaseType_t)osPriorityNormal;

    empty = '\0';
 8008330:	2200      	movs	r2, #0
 8008332:	f88d 2013 	strb.w	r2, [sp, #19]
    name  = &empty;
    mem   = -1;

    if (attr != NULL) {
 8008336:	2c00      	cmp	r4, #0
 8008338:	d030      	beq.n	800839c <osThreadNew+0x94>
      if (attr->name != NULL) {
 800833a:	6821      	ldr	r1, [r4, #0]
 800833c:	b909      	cbnz	r1, 8008342 <osThreadNew+0x3a>
    name  = &empty;
 800833e:	f10d 0113 	add.w	r1, sp, #19
        name = attr->name;
      }
      if (attr->priority != osPriorityNone) {
 8008342:	69a5      	ldr	r5, [r4, #24]
 8008344:	2d00      	cmp	r5, #0
 8008346:	bf08      	it	eq
 8008348:	2518      	moveq	r5, #24
        prio = (UBaseType_t)attr->priority;
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800834a:	1e6a      	subs	r2, r5, #1
 800834c:	2a37      	cmp	r2, #55	@ 0x37
 800834e:	46ac      	mov	ip, r5
 8008350:	d82a      	bhi.n	80083a8 <osThreadNew+0xa0>
 8008352:	6862      	ldr	r2, [r4, #4]
 8008354:	07d2      	lsls	r2, r2, #31
 8008356:	d427      	bmi.n	80083a8 <osThreadNew+0xa0>
        return (NULL);
      }

      if (attr->stack_size > 0U) {
 8008358:	6966      	ldr	r6, [r4, #20]
 800835a:	b166      	cbz	r6, 8008376 <osThreadNew+0x6e>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800835c:	08b2      	lsrs	r2, r6, #2
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800835e:	e9d4 7e02 	ldrd	r7, lr, [r4, #8]
 8008362:	b157      	cbz	r7, 800837a <osThreadNew+0x72>
 8008364:	f1be 0f5b 	cmp.w	lr, #91	@ 0x5b
 8008368:	d902      	bls.n	8008370 <osThreadNew+0x68>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800836a:	6924      	ldr	r4, [r4, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800836c:	b104      	cbz	r4, 8008370 <osThreadNew+0x68>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800836e:	b9ee      	cbnz	r6, 80083ac <osThreadNew+0xa4>
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8008370:	9805      	ldr	r0, [sp, #20]
}
 8008372:	b007      	add	sp, #28
 8008374:	bdf0      	pop	{r4, r5, r6, r7, pc}
    stack = configMINIMAL_STACK_SIZE;
 8008376:	2240      	movs	r2, #64	@ 0x40
 8008378:	e7f1      	b.n	800835e <osThreadNew+0x56>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800837a:	f1be 0f00 	cmp.w	lr, #0
 800837e:	d1f7      	bne.n	8008370 <osThreadNew+0x68>
      if (mem == 0) {
 8008380:	6924      	ldr	r4, [r4, #16]
 8008382:	2c00      	cmp	r4, #0
 8008384:	d1f4      	bne.n	8008370 <osThreadNew+0x68>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8008386:	ac05      	add	r4, sp, #20
 8008388:	e9cd c400 	strd	ip, r4, [sp]
 800838c:	b292      	uxth	r2, r2
 800838e:	f000 fee1 	bl	8009154 <xTaskCreate>
 8008392:	2801      	cmp	r0, #1
          hTask = NULL;
 8008394:	bf1c      	itt	ne
 8008396:	2300      	movne	r3, #0
 8008398:	9305      	strne	r3, [sp, #20]
 800839a:	e7e9      	b.n	8008370 <osThreadNew+0x68>
    prio  = (UBaseType_t)osPriorityNormal;
 800839c:	f04f 0c18 	mov.w	ip, #24
    stack = configMINIMAL_STACK_SIZE;
 80083a0:	2240      	movs	r2, #64	@ 0x40
    name  = &empty;
 80083a2:	f10d 0113 	add.w	r1, sp, #19
 80083a6:	e7ee      	b.n	8008386 <osThreadNew+0x7e>
        return (NULL);
 80083a8:	2000      	movs	r0, #0
 80083aa:	e7e2      	b.n	8008372 <osThreadNew+0x6a>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80083ac:	e9cd 4701 	strd	r4, r7, [sp, #4]
 80083b0:	9500      	str	r5, [sp, #0]
 80083b2:	f000 fe98 	bl	80090e6 <xTaskCreateStatic>
 80083b6:	9005      	str	r0, [sp, #20]
 80083b8:	e7da      	b.n	8008370 <osThreadNew+0x68>
 80083ba:	bf00      	nop
 80083bc:	20002c10 	.word	0x20002c10

080083c0 <osThreadGetStackSpace>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80083c0:	f3ef 8305 	mrs	r3, IPSR

uint32_t osThreadGetStackSpace (osThreadId_t thread_id) {
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
  uint32_t sz;

  if (IS_IRQ() || (hTask == NULL)) {
 80083c4:	b963      	cbnz	r3, 80083e0 <osThreadGetStackSpace+0x20>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80083c6:	f3ef 8310 	mrs	r3, PRIMASK
 80083ca:	b94b      	cbnz	r3, 80083e0 <osThreadGetStackSpace+0x20>
 80083cc:	4b05      	ldr	r3, [pc, #20]	@ (80083e4 <osThreadGetStackSpace+0x24>)
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	2b02      	cmp	r3, #2
 80083d2:	d102      	bne.n	80083da <osThreadGetStackSpace+0x1a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80083d4:	f3ef 8311 	mrs	r3, BASEPRI
 80083d8:	b913      	cbnz	r3, 80083e0 <osThreadGetStackSpace+0x20>
 80083da:	b108      	cbz	r0, 80083e0 <osThreadGetStackSpace+0x20>
    sz = 0U;
  } else {
    sz = (uint32_t)uxTaskGetStackHighWaterMark (hTask);
 80083dc:	f001 b982 	b.w	80096e4 <uxTaskGetStackHighWaterMark>
  }

  return (sz);
}
 80083e0:	2000      	movs	r0, #0
 80083e2:	4770      	bx	lr
 80083e4:	20002c10 	.word	0x20002c10

080083e8 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80083e8:	b508      	push	{r3, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80083ea:	f3ef 8305 	mrs	r3, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 80083ee:	b113      	cbz	r3, 80083f6 <osDelay+0xe>
    stat = osErrorISR;
 80083f0:	f06f 0005 	mvn.w	r0, #5
      vTaskDelay(ticks);
    }
  }

  return (stat);
}
 80083f4:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80083f6:	f3ef 8310 	mrs	r3, PRIMASK
  if (IS_IRQ()) {
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d1f8      	bne.n	80083f0 <osDelay+0x8>
 80083fe:	4b06      	ldr	r3, [pc, #24]	@ (8008418 <osDelay+0x30>)
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	2b02      	cmp	r3, #2
 8008404:	d103      	bne.n	800840e <osDelay+0x26>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008406:	f3ef 8311 	mrs	r3, BASEPRI
 800840a:	2b00      	cmp	r3, #0
 800840c:	d1f0      	bne.n	80083f0 <osDelay+0x8>
    if (ticks != 0U) {
 800840e:	b108      	cbz	r0, 8008414 <osDelay+0x2c>
      vTaskDelay(ticks);
 8008410:	f001 f82c 	bl	800946c <vTaskDelay>
    stat = osOK;
 8008414:	2000      	movs	r0, #0
  return (stat);
 8008416:	e7ed      	b.n	80083f4 <osDelay+0xc>
 8008418:	20002c10 	.word	0x20002c10

0800841c <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800841c:	b570      	push	{r4, r5, r6, lr}
 800841e:	4605      	mov	r5, r0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008420:	f3ef 8305 	mrs	r3, IPSR
  const char *name;
  #endif

  hMutex = NULL;

  if (!IS_IRQ()) {
 8008424:	b113      	cbz	r3, 800842c <osMutexNew+0x10>
  hMutex = NULL;
 8008426:	2400      	movs	r4, #0
      }
    }
  }

  return ((osMutexId_t)hMutex);
}
 8008428:	4620      	mov	r0, r4
 800842a:	bd70      	pop	{r4, r5, r6, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800842c:	f3ef 8310 	mrs	r3, PRIMASK
  if (!IS_IRQ()) {
 8008430:	2b00      	cmp	r3, #0
 8008432:	d1f8      	bne.n	8008426 <osMutexNew+0xa>
 8008434:	4a1a      	ldr	r2, [pc, #104]	@ (80084a0 <osMutexNew+0x84>)
 8008436:	6812      	ldr	r2, [r2, #0]
 8008438:	2a02      	cmp	r2, #2
 800843a:	d103      	bne.n	8008444 <osMutexNew+0x28>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800843c:	f3ef 8211 	mrs	r2, BASEPRI
 8008440:	2a00      	cmp	r2, #0
 8008442:	d1f0      	bne.n	8008426 <osMutexNew+0xa>
    if (attr != NULL) {
 8008444:	b115      	cbz	r5, 800844c <osMutexNew+0x30>
      type = attr->attr_bits;
 8008446:	686b      	ldr	r3, [r5, #4]
    if ((type & osMutexRobust) != osMutexRobust) {
 8008448:	071a      	lsls	r2, r3, #28
 800844a:	d4ec      	bmi.n	8008426 <osMutexNew+0xa>
    if ((type & osMutexRecursive) == osMutexRecursive) {
 800844c:	f003 0601 	and.w	r6, r3, #1
      if (attr != NULL) {
 8008450:	b17d      	cbz	r5, 8008472 <osMutexNew+0x56>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8008452:	e9d5 1302 	ldrd	r1, r3, [r5, #8]
 8008456:	b151      	cbz	r1, 800846e <osMutexNew+0x52>
 8008458:	2b4f      	cmp	r3, #79	@ 0x4f
 800845a:	d9e4      	bls.n	8008426 <osMutexNew+0xa>
        if (rmtx != 0U) {
 800845c:	b1de      	cbz	r6, 8008496 <osMutexNew+0x7a>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800845e:	2004      	movs	r0, #4
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8008460:	f000 fb37 	bl	8008ad2 <xQueueCreateMutexStatic>
 8008464:	4604      	mov	r4, r0
      if (hMutex != NULL) {
 8008466:	2800      	cmp	r0, #0
 8008468:	d0dd      	beq.n	8008426 <osMutexNew+0xa>
          name = attr->name;
 800846a:	682d      	ldr	r5, [r5, #0]
 800846c:	e00a      	b.n	8008484 <osMutexNew+0x68>
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800846e:	2b00      	cmp	r3, #0
 8008470:	d1d9      	bne.n	8008426 <osMutexNew+0xa>
          if (rmtx != 0U) {
 8008472:	b196      	cbz	r6, 800849a <osMutexNew+0x7e>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 8008474:	2004      	movs	r0, #4
            hMutex = xSemaphoreCreateMutex ();
 8008476:	f000 fb41 	bl	8008afc <xQueueCreateMutex>
 800847a:	4604      	mov	r4, r0
      if (hMutex != NULL) {
 800847c:	2800      	cmp	r0, #0
 800847e:	d0d2      	beq.n	8008426 <osMutexNew+0xa>
        if (attr != NULL) {
 8008480:	2d00      	cmp	r5, #0
 8008482:	d1f2      	bne.n	800846a <osMutexNew+0x4e>
        vQueueAddToRegistry (hMutex, name);
 8008484:	4629      	mov	r1, r5
 8008486:	4620      	mov	r0, r4
 8008488:	f000 fc9c 	bl	8008dc4 <vQueueAddToRegistry>
      if ((hMutex != NULL) && (rmtx != 0U)) {
 800848c:	2e00      	cmp	r6, #0
 800848e:	d0cb      	beq.n	8008428 <osMutexNew+0xc>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8008490:	f044 0401 	orr.w	r4, r4, #1
  return ((osMutexId_t)hMutex);
 8008494:	e7c8      	b.n	8008428 <osMutexNew+0xc>
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8008496:	2001      	movs	r0, #1
 8008498:	e7e2      	b.n	8008460 <osMutexNew+0x44>
            hMutex = xSemaphoreCreateMutex ();
 800849a:	2001      	movs	r0, #1
 800849c:	e7eb      	b.n	8008476 <osMutexNew+0x5a>
 800849e:	bf00      	nop
 80084a0:	20002c10 	.word	0x20002c10

080084a4 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80084a4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80084a6:	4614      	mov	r4, r2
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80084a8:	f3ef 8305 	mrs	r3, IPSR
  const char *name;
  #endif

  hQueue = NULL;

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80084ac:	b11b      	cbz	r3, 80084b6 <osMessageQueueNew+0x12>
  hQueue = NULL;
 80084ae:	2500      	movs	r5, #0
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
}
 80084b0:	4628      	mov	r0, r5
 80084b2:	b002      	add	sp, #8
 80084b4:	bd70      	pop	{r4, r5, r6, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80084b6:	f3ef 8310 	mrs	r3, PRIMASK
  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d1f7      	bne.n	80084ae <osMessageQueueNew+0xa>
 80084be:	4b1c      	ldr	r3, [pc, #112]	@ (8008530 <osMessageQueueNew+0x8c>)
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	2b02      	cmp	r3, #2
 80084c4:	d103      	bne.n	80084ce <osMessageQueueNew+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80084c6:	f3ef 8311 	mrs	r3, BASEPRI
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d1ef      	bne.n	80084ae <osMessageQueueNew+0xa>
 80084ce:	2800      	cmp	r0, #0
 80084d0:	d0ed      	beq.n	80084ae <osMessageQueueNew+0xa>
 80084d2:	2900      	cmp	r1, #0
 80084d4:	d0eb      	beq.n	80084ae <osMessageQueueNew+0xa>
    if (attr != NULL) {
 80084d6:	b1ec      	cbz	r4, 8008514 <osMessageQueueNew+0x70>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80084d8:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
 80084dc:	b193      	cbz	r3, 8008504 <osMessageQueueNew+0x60>
 80084de:	2a4f      	cmp	r2, #79	@ 0x4f
 80084e0:	d9e5      	bls.n	80084ae <osMessageQueueNew+0xa>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80084e2:	6922      	ldr	r2, [r4, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80084e4:	2a00      	cmp	r2, #0
 80084e6:	d0e2      	beq.n	80084ae <osMessageQueueNew+0xa>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80084e8:	6966      	ldr	r6, [r4, #20]
 80084ea:	fb01 f500 	mul.w	r5, r1, r0
 80084ee:	42ae      	cmp	r6, r5
 80084f0:	d3dd      	bcc.n	80084ae <osMessageQueueNew+0xa>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80084f2:	2500      	movs	r5, #0
 80084f4:	9500      	str	r5, [sp, #0]
 80084f6:	f000 f9c6 	bl	8008886 <xQueueGenericCreateStatic>
    if (hQueue != NULL) {
 80084fa:	4605      	mov	r5, r0
 80084fc:	2800      	cmp	r0, #0
 80084fe:	d0d6      	beq.n	80084ae <osMessageQueueNew+0xa>
        name = attr->name;
 8008500:	6824      	ldr	r4, [r4, #0]
 8008502:	e00f      	b.n	8008524 <osMessageQueueNew+0x80>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8008504:	2a00      	cmp	r2, #0
 8008506:	d1d2      	bne.n	80084ae <osMessageQueueNew+0xa>
 8008508:	6923      	ldr	r3, [r4, #16]
 800850a:	2b00      	cmp	r3, #0
 800850c:	d1cf      	bne.n	80084ae <osMessageQueueNew+0xa>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800850e:	6963      	ldr	r3, [r4, #20]
 8008510:	2b00      	cmp	r3, #0
 8008512:	d1cc      	bne.n	80084ae <osMessageQueueNew+0xa>
        hQueue = xQueueCreate (msg_count, msg_size);
 8008514:	2200      	movs	r2, #0
 8008516:	f000 fa03 	bl	8008920 <xQueueGenericCreate>
    if (hQueue != NULL) {
 800851a:	4605      	mov	r5, r0
 800851c:	2800      	cmp	r0, #0
 800851e:	d0c6      	beq.n	80084ae <osMessageQueueNew+0xa>
      if (attr != NULL) {
 8008520:	2c00      	cmp	r4, #0
 8008522:	d1ed      	bne.n	8008500 <osMessageQueueNew+0x5c>
      vQueueAddToRegistry (hQueue, name);
 8008524:	4621      	mov	r1, r4
 8008526:	4628      	mov	r0, r5
 8008528:	f000 fc4c 	bl	8008dc4 <vQueueAddToRegistry>
  return ((osMessageQueueId_t)hQueue);
 800852c:	e7c0      	b.n	80084b0 <osMessageQueueNew+0xc>
 800852e:	bf00      	nop
 8008530:	20002c10 	.word	0x20002c10

08008534 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8008534:	b513      	push	{r0, r1, r4, lr}
 8008536:	461c      	mov	r4, r3
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008538:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 800853c:	b123      	cbz	r3, 8008548 <osMessageQueuePut+0x14>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800853e:	b9e8      	cbnz	r0, 800857c <osMessageQueuePut+0x48>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
      stat = osErrorParameter;
 8008540:	f06f 0003 	mvn.w	r0, #3
      }
    }
  }

  return (stat);
}
 8008544:	b002      	add	sp, #8
 8008546:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008548:	f3ef 8310 	mrs	r3, PRIMASK
  if (IS_IRQ()) {
 800854c:	2b00      	cmp	r3, #0
 800854e:	d1f6      	bne.n	800853e <osMessageQueuePut+0xa>
 8008550:	4b19      	ldr	r3, [pc, #100]	@ (80085b8 <osMessageQueuePut+0x84>)
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	2b02      	cmp	r3, #2
 8008556:	d103      	bne.n	8008560 <osMessageQueuePut+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008558:	f3ef 8311 	mrs	r3, BASEPRI
 800855c:	2b00      	cmp	r3, #0
 800855e:	d1ee      	bne.n	800853e <osMessageQueuePut+0xa>
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8008560:	2800      	cmp	r0, #0
 8008562:	d0ed      	beq.n	8008540 <osMessageQueuePut+0xc>
 8008564:	2900      	cmp	r1, #0
 8008566:	d0eb      	beq.n	8008540 <osMessageQueuePut+0xc>
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8008568:	2300      	movs	r3, #0
 800856a:	4622      	mov	r2, r4
 800856c:	f000 f9ff 	bl	800896e <xQueueGenericSend>
 8008570:	2801      	cmp	r0, #1
 8008572:	d013      	beq.n	800859c <osMessageQueuePut+0x68>
        if (timeout != 0U) {
 8008574:	b16c      	cbz	r4, 8008592 <osMessageQueuePut+0x5e>
          stat = osErrorTimeout;
 8008576:	f06f 0001 	mvn.w	r0, #1
  return (stat);
 800857a:	e7e3      	b.n	8008544 <osMessageQueuePut+0x10>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800857c:	2900      	cmp	r1, #0
 800857e:	d0df      	beq.n	8008540 <osMessageQueuePut+0xc>
 8008580:	2c00      	cmp	r4, #0
 8008582:	d1dd      	bne.n	8008540 <osMessageQueuePut+0xc>
      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8008584:	4623      	mov	r3, r4
 8008586:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 8008588:	9401      	str	r4, [sp, #4]
      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800858a:	f000 fad4 	bl	8008b36 <xQueueGenericSendFromISR>
 800858e:	2801      	cmp	r0, #1
 8008590:	d002      	beq.n	8008598 <osMessageQueuePut+0x64>
        stat = osErrorResource;
 8008592:	f06f 0002 	mvn.w	r0, #2
 8008596:	e7d5      	b.n	8008544 <osMessageQueuePut+0x10>
        portYIELD_FROM_ISR (yield);
 8008598:	9b01      	ldr	r3, [sp, #4]
 800859a:	b90b      	cbnz	r3, 80085a0 <osMessageQueuePut+0x6c>
  stat = osOK;
 800859c:	2000      	movs	r0, #0
 800859e:	e7d1      	b.n	8008544 <osMessageQueuePut+0x10>
        portYIELD_FROM_ISR (yield);
 80085a0:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80085a4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80085a8:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80085ac:	f3bf 8f4f 	dsb	sy
 80085b0:	f3bf 8f6f 	isb	sy
 80085b4:	e7f2      	b.n	800859c <osMessageQueuePut+0x68>
 80085b6:	bf00      	nop
 80085b8:	20002c10 	.word	0x20002c10

080085bc <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 80085bc:	b513      	push	{r0, r1, r4, lr}
 80085be:	461c      	mov	r4, r3
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80085c0:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 80085c4:	b123      	cbz	r3, 80085d0 <osMessageQueueGet+0x14>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80085c6:	b9e0      	cbnz	r0, 8008602 <osMessageQueueGet+0x46>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
      stat = osErrorParameter;
 80085c8:	f06f 0003 	mvn.w	r0, #3
      }
    }
  }

  return (stat);
}
 80085cc:	b002      	add	sp, #8
 80085ce:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80085d0:	f3ef 8310 	mrs	r3, PRIMASK
  if (IS_IRQ()) {
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d1f6      	bne.n	80085c6 <osMessageQueueGet+0xa>
 80085d8:	4b18      	ldr	r3, [pc, #96]	@ (800863c <osMessageQueueGet+0x80>)
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	2b02      	cmp	r3, #2
 80085de:	d103      	bne.n	80085e8 <osMessageQueueGet+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80085e0:	f3ef 8311 	mrs	r3, BASEPRI
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d1ee      	bne.n	80085c6 <osMessageQueueGet+0xa>
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80085e8:	2800      	cmp	r0, #0
 80085ea:	d0ed      	beq.n	80085c8 <osMessageQueueGet+0xc>
 80085ec:	2900      	cmp	r1, #0
 80085ee:	d0eb      	beq.n	80085c8 <osMessageQueueGet+0xc>
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80085f0:	4622      	mov	r2, r4
 80085f2:	f000 fafc 	bl	8008bee <xQueueReceive>
 80085f6:	2801      	cmp	r0, #1
 80085f8:	d012      	beq.n	8008620 <osMessageQueueGet+0x64>
        if (timeout != 0U) {
 80085fa:	b164      	cbz	r4, 8008616 <osMessageQueueGet+0x5a>
          stat = osErrorTimeout;
 80085fc:	f06f 0001 	mvn.w	r0, #1
  return (stat);
 8008600:	e7e4      	b.n	80085cc <osMessageQueueGet+0x10>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8008602:	2900      	cmp	r1, #0
 8008604:	d0e0      	beq.n	80085c8 <osMessageQueueGet+0xc>
 8008606:	2c00      	cmp	r4, #0
 8008608:	d1de      	bne.n	80085c8 <osMessageQueueGet+0xc>
      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800860a:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 800860c:	9401      	str	r4, [sp, #4]
      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800860e:	f000 fb8c 	bl	8008d2a <xQueueReceiveFromISR>
 8008612:	2801      	cmp	r0, #1
 8008614:	d002      	beq.n	800861c <osMessageQueueGet+0x60>
        stat = osErrorResource;
 8008616:	f06f 0002 	mvn.w	r0, #2
 800861a:	e7d7      	b.n	80085cc <osMessageQueueGet+0x10>
        portYIELD_FROM_ISR (yield);
 800861c:	9b01      	ldr	r3, [sp, #4]
 800861e:	b90b      	cbnz	r3, 8008624 <osMessageQueueGet+0x68>
  stat = osOK;
 8008620:	2000      	movs	r0, #0
 8008622:	e7d3      	b.n	80085cc <osMessageQueueGet+0x10>
        portYIELD_FROM_ISR (yield);
 8008624:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8008628:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800862c:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8008630:	f3bf 8f4f 	dsb	sy
 8008634:	f3bf 8f6f 	isb	sy
 8008638:	e7f2      	b.n	8008620 <osMessageQueueGet+0x64>
 800863a:	bf00      	nop
 800863c:	20002c10 	.word	0x20002c10

08008640 <vApplicationGetIdleTaskMemory>:
/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8008640:	4b03      	ldr	r3, [pc, #12]	@ (8008650 <vApplicationGetIdleTaskMemory+0x10>)
 8008642:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8008644:	4b03      	ldr	r3, [pc, #12]	@ (8008654 <vApplicationGetIdleTaskMemory+0x14>)
 8008646:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8008648:	2340      	movs	r3, #64	@ 0x40
 800864a:	6013      	str	r3, [r2, #0]
}
 800864c:	4770      	bx	lr
 800864e:	bf00      	nop
 8008650:	20002bb4 	.word	0x20002bb4
 8008654:	20002ab4 	.word	0x20002ab4

08008658 <vApplicationGetTimerTaskMemory>:
/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8008658:	4b03      	ldr	r3, [pc, #12]	@ (8008668 <vApplicationGetTimerTaskMemory+0x10>)
 800865a:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800865c:	4b03      	ldr	r3, [pc, #12]	@ (800866c <vApplicationGetTimerTaskMemory+0x14>)
 800865e:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8008660:	2380      	movs	r3, #128	@ 0x80
 8008662:	6013      	str	r3, [r2, #0]
}
 8008664:	4770      	bx	lr
 8008666:	bf00      	nop
 8008668:	20002a58 	.word	0x20002a58
 800866c:	20002858 	.word	0x20002858

08008670 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008670:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008674:	f04f 32ff 	mov.w	r2, #4294967295

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008678:	e9c0 2302 	strd	r2, r3, [r0, #8]
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800867c:	6043      	str	r3, [r0, #4]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800867e:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008680:	2300      	movs	r3, #0
 8008682:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008684:	4770      	bx	lr

08008686 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8008686:	2300      	movs	r3, #0
 8008688:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800868a:	4770      	bx	lr

0800868c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 800868c:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800868e:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008690:	689a      	ldr	r2, [r3, #8]
 8008692:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008694:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008696:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8008698:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 800869a:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 800869c:	3301      	adds	r3, #1
 800869e:	6003      	str	r3, [r0, #0]
}
 80086a0:	4770      	bx	lr

080086a2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80086a2:	b530      	push	{r4, r5, lr}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80086a4:	680c      	ldr	r4, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80086a6:	1c63      	adds	r3, r4, #1
 80086a8:	d10a      	bne.n	80086c0 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80086aa:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80086ac:	685a      	ldr	r2, [r3, #4]
 80086ae:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80086b0:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80086b2:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 80086b4:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 80086b6:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 80086b8:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 80086ba:	3301      	adds	r3, #1
 80086bc:	6003      	str	r3, [r0, #0]
}
 80086be:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80086c0:	f100 0208 	add.w	r2, r0, #8
 80086c4:	4613      	mov	r3, r2
 80086c6:	6852      	ldr	r2, [r2, #4]
 80086c8:	6815      	ldr	r5, [r2, #0]
 80086ca:	42a5      	cmp	r5, r4
 80086cc:	d9fa      	bls.n	80086c4 <vListInsert+0x22>
 80086ce:	e7ed      	b.n	80086ac <vListInsert+0xa>

080086d0 <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80086d0:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80086d4:	6903      	ldr	r3, [r0, #16]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80086d6:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80086d8:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80086da:	6859      	ldr	r1, [r3, #4]
 80086dc:	4281      	cmp	r1, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80086de:	bf08      	it	eq
 80086e0:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80086e2:	2200      	movs	r2, #0
 80086e4:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 80086e6:	681a      	ldr	r2, [r3, #0]
 80086e8:	3a01      	subs	r2, #1
 80086ea:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80086ec:	6818      	ldr	r0, [r3, #0]
}
 80086ee:	4770      	bx	lr

080086f0 <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80086f0:	b510      	push	{r4, lr}
 80086f2:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80086f4:	f001 fa9e 	bl	8009c34 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80086f8:	6ba4      	ldr	r4, [r4, #56]	@ 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 80086fa:	f001 fabb 	bl	8009c74 <vPortExitCritical>

	return xReturn;
}
 80086fe:	fab4 f084 	clz	r0, r4
 8008702:	0940      	lsrs	r0, r0, #5
 8008704:	bd10      	pop	{r4, pc}

08008706 <prvCopyDataToQueue>:
{
 8008706:	b570      	push	{r4, r5, r6, lr}
 8008708:	4616      	mov	r6, r2
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800870a:	6c02      	ldr	r2, [r0, #64]	@ 0x40
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800870c:	6b85      	ldr	r5, [r0, #56]	@ 0x38
{
 800870e:	4604      	mov	r4, r0
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008710:	b942      	cbnz	r2, 8008724 <prvCopyDataToQueue+0x1e>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008712:	6806      	ldr	r6, [r0, #0]
 8008714:	b99e      	cbnz	r6, 800873e <prvCopyDataToQueue+0x38>
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8008716:	6840      	ldr	r0, [r0, #4]
 8008718:	f001 f804 	bl	8009724 <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 800871c:	6066      	str	r6, [r4, #4]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800871e:	3501      	adds	r5, #1
 8008720:	63a5      	str	r5, [r4, #56]	@ 0x38
}
 8008722:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 8008724:	b96e      	cbnz	r6, 8008742 <prvCopyDataToQueue+0x3c>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8008726:	6880      	ldr	r0, [r0, #8]
 8008728:	f004 fa94 	bl	800cc54 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800872c:	68a3      	ldr	r3, [r4, #8]
 800872e:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8008730:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008732:	6862      	ldr	r2, [r4, #4]
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8008734:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008736:	4293      	cmp	r3, r2
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008738:	bf24      	itt	cs
 800873a:	6823      	ldrcs	r3, [r4, #0]
 800873c:	60a3      	strcs	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
 800873e:	2000      	movs	r0, #0
 8008740:	e7ed      	b.n	800871e <prvCopyDataToQueue+0x18>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008742:	68c0      	ldr	r0, [r0, #12]
 8008744:	f004 fa86 	bl	800cc54 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8008748:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 800874a:	68e3      	ldr	r3, [r4, #12]
 800874c:	4251      	negs	r1, r2
 800874e:	1a9b      	subs	r3, r3, r2
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008750:	6822      	ldr	r2, [r4, #0]
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8008752:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008754:	4293      	cmp	r3, r2
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8008756:	bf3e      	ittt	cc
 8008758:	6863      	ldrcc	r3, [r4, #4]
 800875a:	185b      	addcc	r3, r3, r1
 800875c:	60e3      	strcc	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 800875e:	2e02      	cmp	r6, #2
 8008760:	d1ed      	bne.n	800873e <prvCopyDataToQueue+0x38>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008762:	b10d      	cbz	r5, 8008768 <prvCopyDataToQueue+0x62>
				--uxMessagesWaiting;
 8008764:	3d01      	subs	r5, #1
 8008766:	e7ea      	b.n	800873e <prvCopyDataToQueue+0x38>
BaseType_t xReturn = pdFALSE;
 8008768:	4628      	mov	r0, r5
 800876a:	e7d8      	b.n	800871e <prvCopyDataToQueue+0x18>

0800876c <prvCopyDataFromQueue>:
{
 800876c:	4603      	mov	r3, r0
 800876e:	b410      	push	{r4}
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008770:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
{
 8008772:	4608      	mov	r0, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008774:	b16a      	cbz	r2, 8008792 <prvCopyDataFromQueue+0x26>
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8008776:	68dc      	ldr	r4, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008778:	6859      	ldr	r1, [r3, #4]
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800877a:	4414      	add	r4, r2
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800877c:	428c      	cmp	r4, r1
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800877e:	bf28      	it	cs
 8008780:	6819      	ldrcs	r1, [r3, #0]
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8008782:	60dc      	str	r4, [r3, #12]
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8008784:	bf28      	it	cs
 8008786:	60d9      	strcs	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8008788:	68d9      	ldr	r1, [r3, #12]
}
 800878a:	f85d 4b04 	ldr.w	r4, [sp], #4
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800878e:	f004 ba61 	b.w	800cc54 <memcpy>
}
 8008792:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008796:	4770      	bx	lr

08008798 <prvUnlockQueue>:
{
 8008798:	b570      	push	{r4, r5, r6, lr}
 800879a:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 800879c:	f001 fa4a 	bl	8009c34 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 80087a0:	f894 5045 	ldrb.w	r5, [r4, #69]	@ 0x45
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80087a4:	f104 0624 	add.w	r6, r4, #36	@ 0x24
		int8_t cTxLock = pxQueue->cTxLock;
 80087a8:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80087aa:	2d00      	cmp	r5, #0
 80087ac:	dc14      	bgt.n	80087d8 <prvUnlockQueue+0x40>
		pxQueue->cTxLock = queueUNLOCKED;
 80087ae:	23ff      	movs	r3, #255	@ 0xff
 80087b0:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
	taskEXIT_CRITICAL();
 80087b4:	f001 fa5e 	bl	8009c74 <vPortExitCritical>
	taskENTER_CRITICAL();
 80087b8:	f001 fa3c 	bl	8009c34 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 80087bc:	f894 5044 	ldrb.w	r5, [r4, #68]	@ 0x44
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80087c0:	f104 0610 	add.w	r6, r4, #16
		int8_t cRxLock = pxQueue->cRxLock;
 80087c4:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80087c6:	2d00      	cmp	r5, #0
 80087c8:	dc12      	bgt.n	80087f0 <prvUnlockQueue+0x58>
		pxQueue->cRxLock = queueUNLOCKED;
 80087ca:	23ff      	movs	r3, #255	@ 0xff
 80087cc:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
}
 80087d0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 80087d4:	f001 ba4e 	b.w	8009c74 <vPortExitCritical>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80087d8:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d0e7      	beq.n	80087ae <prvUnlockQueue+0x16>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80087de:	4630      	mov	r0, r6
 80087e0:	f000 fef2 	bl	80095c8 <xTaskRemoveFromEventList>
 80087e4:	b108      	cbz	r0, 80087ea <prvUnlockQueue+0x52>
						vTaskMissedYield();
 80087e6:	f000 ff77 	bl	80096d8 <vTaskMissedYield>
			--cTxLock;
 80087ea:	3d01      	subs	r5, #1
 80087ec:	b26d      	sxtb	r5, r5
 80087ee:	e7dc      	b.n	80087aa <prvUnlockQueue+0x12>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80087f0:	6923      	ldr	r3, [r4, #16]
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d0e9      	beq.n	80087ca <prvUnlockQueue+0x32>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80087f6:	4630      	mov	r0, r6
 80087f8:	f000 fee6 	bl	80095c8 <xTaskRemoveFromEventList>
 80087fc:	b108      	cbz	r0, 8008802 <prvUnlockQueue+0x6a>
					vTaskMissedYield();
 80087fe:	f000 ff6b 	bl	80096d8 <vTaskMissedYield>
				--cRxLock;
 8008802:	3d01      	subs	r5, #1
 8008804:	b26d      	sxtb	r5, r5
 8008806:	e7de      	b.n	80087c6 <prvUnlockQueue+0x2e>

08008808 <xQueueGenericReset>:
{
 8008808:	b538      	push	{r3, r4, r5, lr}
 800880a:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 800880c:	4604      	mov	r4, r0
 800880e:	b940      	cbnz	r0, 8008822 <xQueueGenericReset+0x1a>
	__asm volatile
 8008810:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008814:	f383 8811 	msr	BASEPRI, r3
 8008818:	f3bf 8f6f 	isb	sy
 800881c:	f3bf 8f4f 	dsb	sy
 8008820:	e7fe      	b.n	8008820 <xQueueGenericReset+0x18>
	taskENTER_CRITICAL();
 8008822:	f001 fa07 	bl	8009c34 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8008826:	e9d4 310f 	ldrd	r3, r1, [r4, #60]	@ 0x3c
 800882a:	6822      	ldr	r2, [r4, #0]
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800882c:	60a2      	str	r2, [r4, #8]
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800882e:	434b      	muls	r3, r1
 8008830:	18d0      	adds	r0, r2, r3
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8008832:	1a5b      	subs	r3, r3, r1
 8008834:	441a      	add	r2, r3
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8008836:	6060      	str	r0, [r4, #4]
		pxQueue->cRxLock = queueUNLOCKED;
 8008838:	23ff      	movs	r3, #255	@ 0xff
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800883a:	2000      	movs	r0, #0
 800883c:	63a0      	str	r0, [r4, #56]	@ 0x38
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800883e:	60e2      	str	r2, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008840:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008844:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
		if( xNewQueue == pdFALSE )
 8008848:	b9a5      	cbnz	r5, 8008874 <xQueueGenericReset+0x6c>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800884a:	6923      	ldr	r3, [r4, #16]
 800884c:	b173      	cbz	r3, 800886c <xQueueGenericReset+0x64>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800884e:	f104 0010 	add.w	r0, r4, #16
 8008852:	f000 feb9 	bl	80095c8 <xTaskRemoveFromEventList>
 8008856:	b148      	cbz	r0, 800886c <xQueueGenericReset+0x64>
					queueYIELD_IF_USING_PREEMPTION();
 8008858:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800885c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008860:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8008864:	f3bf 8f4f 	dsb	sy
 8008868:	f3bf 8f6f 	isb	sy
	taskEXIT_CRITICAL();
 800886c:	f001 fa02 	bl	8009c74 <vPortExitCritical>
}
 8008870:	2001      	movs	r0, #1
 8008872:	bd38      	pop	{r3, r4, r5, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008874:	f104 0010 	add.w	r0, r4, #16
 8008878:	f7ff fefa 	bl	8008670 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800887c:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8008880:	f7ff fef6 	bl	8008670 <vListInitialise>
 8008884:	e7f2      	b.n	800886c <xQueueGenericReset+0x64>

08008886 <xQueueGenericCreateStatic>:
	{
 8008886:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008888:	460d      	mov	r5, r1
 800888a:	461c      	mov	r4, r3
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800888c:	b940      	cbnz	r0, 80088a0 <xQueueGenericCreateStatic+0x1a>
 800888e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008892:	f383 8811 	msr	BASEPRI, r3
 8008896:	f3bf 8f6f 	isb	sy
 800889a:	f3bf 8f4f 	dsb	sy
 800889e:	e7fe      	b.n	800889e <xQueueGenericCreateStatic+0x18>
		configASSERT( pxStaticQueue != NULL );
 80088a0:	b943      	cbnz	r3, 80088b4 <xQueueGenericCreateStatic+0x2e>
 80088a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088a6:	f383 8811 	msr	BASEPRI, r3
 80088aa:	f3bf 8f6f 	isb	sy
 80088ae:	f3bf 8f4f 	dsb	sy
 80088b2:	e7fe      	b.n	80088b2 <xQueueGenericCreateStatic+0x2c>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80088b4:	b14a      	cbz	r2, 80088ca <xQueueGenericCreateStatic+0x44>
 80088b6:	b991      	cbnz	r1, 80088de <xQueueGenericCreateStatic+0x58>
 80088b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088bc:	f383 8811 	msr	BASEPRI, r3
 80088c0:	f3bf 8f6f 	isb	sy
 80088c4:	f3bf 8f4f 	dsb	sy
 80088c8:	e7fe      	b.n	80088c8 <xQueueGenericCreateStatic+0x42>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80088ca:	b141      	cbz	r1, 80088de <xQueueGenericCreateStatic+0x58>
 80088cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088d0:	f383 8811 	msr	BASEPRI, r3
 80088d4:	f3bf 8f6f 	isb	sy
 80088d8:	f3bf 8f4f 	dsb	sy
 80088dc:	e7fe      	b.n	80088dc <xQueueGenericCreateStatic+0x56>
			volatile size_t xSize = sizeof( StaticQueue_t );
 80088de:	2350      	movs	r3, #80	@ 0x50
 80088e0:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 80088e2:	9b01      	ldr	r3, [sp, #4]
 80088e4:	2b50      	cmp	r3, #80	@ 0x50
 80088e6:	d008      	beq.n	80088fa <xQueueGenericCreateStatic+0x74>
 80088e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088ec:	f383 8811 	msr	BASEPRI, r3
 80088f0:	f3bf 8f6f 	isb	sy
 80088f4:	f3bf 8f4f 	dsb	sy
 80088f8:	e7fe      	b.n	80088f8 <xQueueGenericCreateStatic+0x72>
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80088fa:	2101      	movs	r1, #1
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80088fc:	2d00      	cmp	r5, #0
 80088fe:	bf08      	it	eq
 8008900:	4622      	moveq	r2, r4
	pxNewQueue->uxItemSize = uxItemSize;
 8008902:	e9c4 050f 	strd	r0, r5, [r4, #60]	@ 0x3c
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008906:	f884 1046 	strb.w	r1, [r4, #70]	@ 0x46
	if( uxItemSize == ( UBaseType_t ) 0 )
 800890a:	6022      	str	r2, [r4, #0]
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800890c:	4620      	mov	r0, r4
 800890e:	f7ff ff7b 	bl	8008808 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 8008912:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8008916:	f884 304c 	strb.w	r3, [r4, #76]	@ 0x4c
	}
 800891a:	4620      	mov	r0, r4
 800891c:	b003      	add	sp, #12
 800891e:	bd30      	pop	{r4, r5, pc}

08008920 <xQueueGenericCreate>:
	{
 8008920:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008922:	460d      	mov	r5, r1
 8008924:	4617      	mov	r7, r2
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008926:	4606      	mov	r6, r0
 8008928:	b940      	cbnz	r0, 800893c <xQueueGenericCreate+0x1c>
 800892a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800892e:	f383 8811 	msr	BASEPRI, r3
 8008932:	f3bf 8f6f 	isb	sy
 8008936:	f3bf 8f4f 	dsb	sy
 800893a:	e7fe      	b.n	800893a <xQueueGenericCreate+0x1a>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800893c:	4348      	muls	r0, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800893e:	3050      	adds	r0, #80	@ 0x50
 8008940:	f001 fade 	bl	8009f00 <pvPortMalloc>
		if( pxNewQueue != NULL )
 8008944:	4604      	mov	r4, r0
 8008946:	b170      	cbz	r0, 8008966 <xQueueGenericCreate+0x46>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8008948:	2300      	movs	r3, #0
 800894a:	f880 3046 	strb.w	r3, [r0, #70]	@ 0x46
	if( uxItemSize == ( UBaseType_t ) 0 )
 800894e:	b165      	cbz	r5, 800896a <xQueueGenericCreate+0x4a>
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8008950:	f100 0350 	add.w	r3, r0, #80	@ 0x50
	pxNewQueue->uxItemSize = uxItemSize;
 8008954:	e9c4 650f 	strd	r6, r5, [r4, #60]	@ 0x3c
 8008958:	6023      	str	r3, [r4, #0]
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800895a:	2101      	movs	r1, #1
 800895c:	4620      	mov	r0, r4
 800895e:	f7ff ff53 	bl	8008808 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 8008962:	f884 704c 	strb.w	r7, [r4, #76]	@ 0x4c
	}
 8008966:	4620      	mov	r0, r4
 8008968:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800896a:	4603      	mov	r3, r0
 800896c:	e7f2      	b.n	8008954 <xQueueGenericCreate+0x34>

0800896e <xQueueGenericSend>:
{
 800896e:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8008972:	460f      	mov	r7, r1
 8008974:	9201      	str	r2, [sp, #4]
 8008976:	461e      	mov	r6, r3
	configASSERT( pxQueue );
 8008978:	4604      	mov	r4, r0
 800897a:	b940      	cbnz	r0, 800898e <xQueueGenericSend+0x20>
 800897c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008980:	f383 8811 	msr	BASEPRI, r3
 8008984:	f3bf 8f6f 	isb	sy
 8008988:	f3bf 8f4f 	dsb	sy
 800898c:	e7fe      	b.n	800898c <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800898e:	b951      	cbnz	r1, 80089a6 <xQueueGenericSend+0x38>
 8008990:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8008992:	b143      	cbz	r3, 80089a6 <xQueueGenericSend+0x38>
 8008994:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008998:	f383 8811 	msr	BASEPRI, r3
 800899c:	f3bf 8f6f 	isb	sy
 80089a0:	f3bf 8f4f 	dsb	sy
 80089a4:	e7fe      	b.n	80089a4 <xQueueGenericSend+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80089a6:	2e02      	cmp	r6, #2
 80089a8:	d10b      	bne.n	80089c2 <xQueueGenericSend+0x54>
 80089aa:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80089ac:	2b01      	cmp	r3, #1
 80089ae:	d008      	beq.n	80089c2 <xQueueGenericSend+0x54>
 80089b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089b4:	f383 8811 	msr	BASEPRI, r3
 80089b8:	f3bf 8f6f 	isb	sy
 80089bc:	f3bf 8f4f 	dsb	sy
 80089c0:	e7fe      	b.n	80089c0 <xQueueGenericSend+0x52>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80089c2:	f000 fe9f 	bl	8009704 <xTaskGetSchedulerState>
 80089c6:	4605      	mov	r5, r0
 80089c8:	b330      	cbz	r0, 8008a18 <xQueueGenericSend+0xaa>
 80089ca:	2500      	movs	r5, #0
		prvLockQueue( pxQueue );
 80089cc:	f04f 0800 	mov.w	r8, #0
		taskENTER_CRITICAL();
 80089d0:	f001 f930 	bl	8009c34 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80089d4:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80089d6:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80089d8:	429a      	cmp	r2, r3
 80089da:	d301      	bcc.n	80089e0 <xQueueGenericSend+0x72>
 80089dc:	2e02      	cmp	r6, #2
 80089de:	d127      	bne.n	8008a30 <xQueueGenericSend+0xc2>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80089e0:	4632      	mov	r2, r6
 80089e2:	4639      	mov	r1, r7
 80089e4:	4620      	mov	r0, r4
 80089e6:	f7ff fe8e 	bl	8008706 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80089ea:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80089ec:	b11b      	cbz	r3, 80089f6 <xQueueGenericSend+0x88>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80089ee:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 80089f2:	f000 fde9 	bl	80095c8 <xTaskRemoveFromEventList>
					else if( xYieldRequired != pdFALSE )
 80089f6:	b148      	cbz	r0, 8008a0c <xQueueGenericSend+0x9e>
						queueYIELD_IF_USING_PREEMPTION();
 80089f8:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80089fc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008a00:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8008a04:	f3bf 8f4f 	dsb	sy
 8008a08:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8008a0c:	f001 f932 	bl	8009c74 <vPortExitCritical>
				return pdPASS;
 8008a10:	2001      	movs	r0, #1
}
 8008a12:	b004      	add	sp, #16
 8008a14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008a18:	9b01      	ldr	r3, [sp, #4]
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d0d6      	beq.n	80089cc <xQueueGenericSend+0x5e>
 8008a1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a22:	f383 8811 	msr	BASEPRI, r3
 8008a26:	f3bf 8f6f 	isb	sy
 8008a2a:	f3bf 8f4f 	dsb	sy
 8008a2e:	e7fe      	b.n	8008a2e <xQueueGenericSend+0xc0>
				if( xTicksToWait == ( TickType_t ) 0 )
 8008a30:	9b01      	ldr	r3, [sp, #4]
 8008a32:	b91b      	cbnz	r3, 8008a3c <xQueueGenericSend+0xce>
					taskEXIT_CRITICAL();
 8008a34:	f001 f91e 	bl	8009c74 <vPortExitCritical>
					return errQUEUE_FULL;
 8008a38:	2000      	movs	r0, #0
 8008a3a:	e7ea      	b.n	8008a12 <xQueueGenericSend+0xa4>
				else if( xEntryTimeSet == pdFALSE )
 8008a3c:	b915      	cbnz	r5, 8008a44 <xQueueGenericSend+0xd6>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008a3e:	a802      	add	r0, sp, #8
 8008a40:	f000 fe02 	bl	8009648 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8008a44:	f001 f916 	bl	8009c74 <vPortExitCritical>
		vTaskSuspendAll();
 8008a48:	f000 fbf8 	bl	800923c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008a4c:	f001 f8f2 	bl	8009c34 <vPortEnterCritical>
 8008a50:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8008a54:	2bff      	cmp	r3, #255	@ 0xff
 8008a56:	bf08      	it	eq
 8008a58:	f884 8044 	strbeq.w	r8, [r4, #68]	@ 0x44
 8008a5c:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8008a60:	2bff      	cmp	r3, #255	@ 0xff
 8008a62:	bf08      	it	eq
 8008a64:	f884 8045 	strbeq.w	r8, [r4, #69]	@ 0x45
 8008a68:	f001 f904 	bl	8009c74 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008a6c:	a901      	add	r1, sp, #4
 8008a6e:	a802      	add	r0, sp, #8
 8008a70:	f000 fdf6 	bl	8009660 <xTaskCheckForTimeOut>
 8008a74:	bb38      	cbnz	r0, 8008ac6 <xQueueGenericSend+0x158>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008a76:	f001 f8dd 	bl	8009c34 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008a7a:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8008a7c:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8008a7e:	429a      	cmp	r2, r3
 8008a80:	d10e      	bne.n	8008aa0 <xQueueGenericSend+0x132>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8008a82:	f001 f8f7 	bl	8009c74 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008a86:	9901      	ldr	r1, [sp, #4]
 8008a88:	f104 0010 	add.w	r0, r4, #16
 8008a8c:	f000 fd64 	bl	8009558 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008a90:	4620      	mov	r0, r4
 8008a92:	f7ff fe81 	bl	8008798 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008a96:	f000 fc75 	bl	8009384 <xTaskResumeAll>
 8008a9a:	b148      	cbz	r0, 8008ab0 <xQueueGenericSend+0x142>
 8008a9c:	2501      	movs	r5, #1
 8008a9e:	e797      	b.n	80089d0 <xQueueGenericSend+0x62>
	taskEXIT_CRITICAL();
 8008aa0:	f001 f8e8 	bl	8009c74 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 8008aa4:	4620      	mov	r0, r4
 8008aa6:	f7ff fe77 	bl	8008798 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008aaa:	f000 fc6b 	bl	8009384 <xTaskResumeAll>
 8008aae:	e7f5      	b.n	8008a9c <xQueueGenericSend+0x12e>
					portYIELD_WITHIN_API();
 8008ab0:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8008ab4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008ab8:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8008abc:	f3bf 8f4f 	dsb	sy
 8008ac0:	f3bf 8f6f 	isb	sy
 8008ac4:	e7ea      	b.n	8008a9c <xQueueGenericSend+0x12e>
			prvUnlockQueue( pxQueue );
 8008ac6:	4620      	mov	r0, r4
 8008ac8:	f7ff fe66 	bl	8008798 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008acc:	f000 fc5a 	bl	8009384 <xTaskResumeAll>
			return errQUEUE_FULL;
 8008ad0:	e7b2      	b.n	8008a38 <xQueueGenericSend+0xca>

08008ad2 <xQueueCreateMutexStatic>:
	{
 8008ad2:	b513      	push	{r0, r1, r4, lr}
		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8008ad4:	2200      	movs	r2, #0
	{
 8008ad6:	460b      	mov	r3, r1
		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8008ad8:	9000      	str	r0, [sp, #0]
 8008ada:	4611      	mov	r1, r2
 8008adc:	2001      	movs	r0, #1
 8008ade:	f7ff fed2 	bl	8008886 <xQueueGenericCreateStatic>
		if( pxNewQueue != NULL )
 8008ae2:	4604      	mov	r4, r0
 8008ae4:	b138      	cbz	r0, 8008af6 <xQueueCreateMutexStatic+0x24>
			pxNewQueue->pxMutexHolder = NULL;
 8008ae6:	2300      	movs	r3, #0
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8008ae8:	e9c0 3300 	strd	r3, r3, [r0]
			pxNewQueue->u.uxRecursiveCallCount = 0;
 8008aec:	60c3      	str	r3, [r0, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8008aee:	461a      	mov	r2, r3
 8008af0:	4619      	mov	r1, r3
 8008af2:	f7ff ff3c 	bl	800896e <xQueueGenericSend>
	}
 8008af6:	4620      	mov	r0, r4
 8008af8:	b002      	add	sp, #8
 8008afa:	bd10      	pop	{r4, pc}

08008afc <xQueueCreateMutex>:
	{
 8008afc:	b570      	push	{r4, r5, r6, lr}
 8008afe:	4606      	mov	r6, r0
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8008b00:	2050      	movs	r0, #80	@ 0x50
 8008b02:	f001 f9fd 	bl	8009f00 <pvPortMalloc>
 8008b06:	4604      	mov	r4, r0
		if( pxNewQueue != NULL )
 8008b08:	b198      	cbz	r0, 8008b32 <xQueueCreateMutex+0x36>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8008b0a:	2500      	movs	r5, #0
	pxNewQueue->uxLength = uxQueueLength;
 8008b0c:	2101      	movs	r1, #1
	pxNewQueue->uxItemSize = uxItemSize;
 8008b0e:	e9c0 150f 	strd	r1, r5, [r0, #60]	@ 0x3c
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8008b12:	f880 5046 	strb.w	r5, [r0, #70]	@ 0x46
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008b16:	6000      	str	r0, [r0, #0]
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008b18:	f7ff fe76 	bl	8008808 <xQueueGenericReset>
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8008b1c:	e9c4 5500 	strd	r5, r5, [r4]
		pxNewQueue->ucQueueType = ucQueueType;
 8008b20:	f884 604c 	strb.w	r6, [r4, #76]	@ 0x4c
			pxNewQueue->u.uxRecursiveCallCount = 0;
 8008b24:	60e5      	str	r5, [r4, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8008b26:	462b      	mov	r3, r5
 8008b28:	462a      	mov	r2, r5
 8008b2a:	4629      	mov	r1, r5
 8008b2c:	4620      	mov	r0, r4
 8008b2e:	f7ff ff1e 	bl	800896e <xQueueGenericSend>
	}
 8008b32:	4620      	mov	r0, r4
 8008b34:	bd70      	pop	{r4, r5, r6, pc}

08008b36 <xQueueGenericSendFromISR>:
{
 8008b36:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008b3a:	4689      	mov	r9, r1
 8008b3c:	4617      	mov	r7, r2
 8008b3e:	461e      	mov	r6, r3
	configASSERT( pxQueue );
 8008b40:	4604      	mov	r4, r0
 8008b42:	b940      	cbnz	r0, 8008b56 <xQueueGenericSendFromISR+0x20>
 8008b44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b48:	f383 8811 	msr	BASEPRI, r3
 8008b4c:	f3bf 8f6f 	isb	sy
 8008b50:	f3bf 8f4f 	dsb	sy
 8008b54:	e7fe      	b.n	8008b54 <xQueueGenericSendFromISR+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008b56:	b951      	cbnz	r1, 8008b6e <xQueueGenericSendFromISR+0x38>
 8008b58:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8008b5a:	b143      	cbz	r3, 8008b6e <xQueueGenericSendFromISR+0x38>
 8008b5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b60:	f383 8811 	msr	BASEPRI, r3
 8008b64:	f3bf 8f6f 	isb	sy
 8008b68:	f3bf 8f4f 	dsb	sy
 8008b6c:	e7fe      	b.n	8008b6c <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008b6e:	2e02      	cmp	r6, #2
 8008b70:	d10b      	bne.n	8008b8a <xQueueGenericSendFromISR+0x54>
 8008b72:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8008b74:	2b01      	cmp	r3, #1
 8008b76:	d008      	beq.n	8008b8a <xQueueGenericSendFromISR+0x54>
 8008b78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b7c:	f383 8811 	msr	BASEPRI, r3
 8008b80:	f3bf 8f6f 	isb	sy
 8008b84:	f3bf 8f4f 	dsb	sy
 8008b88:	e7fe      	b.n	8008b88 <xQueueGenericSendFromISR+0x52>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008b8a:	f001 f965 	bl	8009e58 <vPortValidateInterruptPriority>
	__asm volatile
 8008b8e:	f3ef 8811 	mrs	r8, BASEPRI
 8008b92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b96:	f383 8811 	msr	BASEPRI, r3
 8008b9a:	f3bf 8f6f 	isb	sy
 8008b9e:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008ba2:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8008ba4:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8008ba6:	429a      	cmp	r2, r3
 8008ba8:	d301      	bcc.n	8008bae <xQueueGenericSendFromISR+0x78>
 8008baa:	2e02      	cmp	r6, #2
 8008bac:	d11d      	bne.n	8008bea <xQueueGenericSendFromISR+0xb4>
			const int8_t cTxLock = pxQueue->cTxLock;
 8008bae:	f894 5045 	ldrb.w	r5, [r4, #69]	@ 0x45
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008bb2:	4632      	mov	r2, r6
			const int8_t cTxLock = pxQueue->cTxLock;
 8008bb4:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008bb6:	4649      	mov	r1, r9
 8008bb8:	4620      	mov	r0, r4
 8008bba:	f7ff fda4 	bl	8008706 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 8008bbe:	1c6b      	adds	r3, r5, #1
 8008bc0:	d10e      	bne.n	8008be0 <xQueueGenericSendFromISR+0xaa>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008bc2:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8008bc4:	b13b      	cbz	r3, 8008bd6 <xQueueGenericSendFromISR+0xa0>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008bc6:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8008bca:	f000 fcfd 	bl	80095c8 <xTaskRemoveFromEventList>
 8008bce:	b110      	cbz	r0, 8008bd6 <xQueueGenericSendFromISR+0xa0>
							if( pxHigherPriorityTaskWoken != NULL )
 8008bd0:	b10f      	cbz	r7, 8008bd6 <xQueueGenericSendFromISR+0xa0>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008bd2:	2301      	movs	r3, #1
 8008bd4:	603b      	str	r3, [r7, #0]
			xReturn = pdPASS;
 8008bd6:	2001      	movs	r0, #1
	__asm volatile
 8008bd8:	f388 8811 	msr	BASEPRI, r8
}
 8008bdc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008be0:	3501      	adds	r5, #1
 8008be2:	b26d      	sxtb	r5, r5
 8008be4:	f884 5045 	strb.w	r5, [r4, #69]	@ 0x45
 8008be8:	e7f5      	b.n	8008bd6 <xQueueGenericSendFromISR+0xa0>
			xReturn = errQUEUE_FULL;
 8008bea:	2000      	movs	r0, #0
 8008bec:	e7f4      	b.n	8008bd8 <xQueueGenericSendFromISR+0xa2>

08008bee <xQueueReceive>:
{
 8008bee:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8008bf2:	460e      	mov	r6, r1
 8008bf4:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 8008bf6:	4604      	mov	r4, r0
 8008bf8:	b940      	cbnz	r0, 8008c0c <xQueueReceive+0x1e>
	__asm volatile
 8008bfa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008bfe:	f383 8811 	msr	BASEPRI, r3
 8008c02:	f3bf 8f6f 	isb	sy
 8008c06:	f3bf 8f4f 	dsb	sy
 8008c0a:	e7fe      	b.n	8008c0a <xQueueReceive+0x1c>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008c0c:	b951      	cbnz	r1, 8008c24 <xQueueReceive+0x36>
 8008c0e:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8008c10:	b143      	cbz	r3, 8008c24 <xQueueReceive+0x36>
 8008c12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c16:	f383 8811 	msr	BASEPRI, r3
 8008c1a:	f3bf 8f6f 	isb	sy
 8008c1e:	f3bf 8f4f 	dsb	sy
 8008c22:	e7fe      	b.n	8008c22 <xQueueReceive+0x34>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008c24:	f000 fd6e 	bl	8009704 <xTaskGetSchedulerState>
 8008c28:	4605      	mov	r5, r0
 8008c2a:	b318      	cbz	r0, 8008c74 <xQueueReceive+0x86>
 8008c2c:	2500      	movs	r5, #0
		prvLockQueue( pxQueue );
 8008c2e:	f04f 0800 	mov.w	r8, #0
		taskENTER_CRITICAL();
 8008c32:	f000 ffff 	bl	8009c34 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008c36:	6ba7      	ldr	r7, [r4, #56]	@ 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008c38:	b347      	cbz	r7, 8008c8c <xQueueReceive+0x9e>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008c3a:	4631      	mov	r1, r6
 8008c3c:	4620      	mov	r0, r4
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008c3e:	3f01      	subs	r7, #1
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008c40:	f7ff fd94 	bl	800876c <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008c44:	63a7      	str	r7, [r4, #56]	@ 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008c46:	6923      	ldr	r3, [r4, #16]
 8008c48:	b173      	cbz	r3, 8008c68 <xQueueReceive+0x7a>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008c4a:	f104 0010 	add.w	r0, r4, #16
 8008c4e:	f000 fcbb 	bl	80095c8 <xTaskRemoveFromEventList>
 8008c52:	b148      	cbz	r0, 8008c68 <xQueueReceive+0x7a>
						queueYIELD_IF_USING_PREEMPTION();
 8008c54:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8008c58:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008c5c:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8008c60:	f3bf 8f4f 	dsb	sy
 8008c64:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8008c68:	f001 f804 	bl	8009c74 <vPortExitCritical>
				return pdPASS;
 8008c6c:	2001      	movs	r0, #1
}
 8008c6e:	b004      	add	sp, #16
 8008c70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008c74:	9b01      	ldr	r3, [sp, #4]
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d0d9      	beq.n	8008c2e <xQueueReceive+0x40>
 8008c7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c7e:	f383 8811 	msr	BASEPRI, r3
 8008c82:	f3bf 8f6f 	isb	sy
 8008c86:	f3bf 8f4f 	dsb	sy
 8008c8a:	e7fe      	b.n	8008c8a <xQueueReceive+0x9c>
				if( xTicksToWait == ( TickType_t ) 0 )
 8008c8c:	9b01      	ldr	r3, [sp, #4]
 8008c8e:	b91b      	cbnz	r3, 8008c98 <xQueueReceive+0xaa>
					taskEXIT_CRITICAL();
 8008c90:	f000 fff0 	bl	8009c74 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8008c94:	2000      	movs	r0, #0
 8008c96:	e7ea      	b.n	8008c6e <xQueueReceive+0x80>
				else if( xEntryTimeSet == pdFALSE )
 8008c98:	b915      	cbnz	r5, 8008ca0 <xQueueReceive+0xb2>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008c9a:	a802      	add	r0, sp, #8
 8008c9c:	f000 fcd4 	bl	8009648 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8008ca0:	f000 ffe8 	bl	8009c74 <vPortExitCritical>
		vTaskSuspendAll();
 8008ca4:	f000 faca 	bl	800923c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008ca8:	f000 ffc4 	bl	8009c34 <vPortEnterCritical>
 8008cac:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8008cb0:	2bff      	cmp	r3, #255	@ 0xff
 8008cb2:	bf08      	it	eq
 8008cb4:	f884 8044 	strbeq.w	r8, [r4, #68]	@ 0x44
 8008cb8:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8008cbc:	2bff      	cmp	r3, #255	@ 0xff
 8008cbe:	bf08      	it	eq
 8008cc0:	f884 8045 	strbeq.w	r8, [r4, #69]	@ 0x45
 8008cc4:	f000 ffd6 	bl	8009c74 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008cc8:	a901      	add	r1, sp, #4
 8008cca:	a802      	add	r0, sp, #8
 8008ccc:	f000 fcc8 	bl	8009660 <xTaskCheckForTimeOut>
 8008cd0:	bb00      	cbnz	r0, 8008d14 <xQueueReceive+0x126>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008cd2:	4620      	mov	r0, r4
 8008cd4:	f7ff fd0c 	bl	80086f0 <prvIsQueueEmpty>
 8008cd8:	b1b0      	cbz	r0, 8008d08 <xQueueReceive+0x11a>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008cda:	9901      	ldr	r1, [sp, #4]
 8008cdc:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8008ce0:	f000 fc3a 	bl	8009558 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008ce4:	4620      	mov	r0, r4
 8008ce6:	f7ff fd57 	bl	8008798 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008cea:	f000 fb4b 	bl	8009384 <xTaskResumeAll>
 8008cee:	b948      	cbnz	r0, 8008d04 <xQueueReceive+0x116>
					portYIELD_WITHIN_API();
 8008cf0:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8008cf4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008cf8:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8008cfc:	f3bf 8f4f 	dsb	sy
 8008d00:	f3bf 8f6f 	isb	sy
 8008d04:	2501      	movs	r5, #1
 8008d06:	e794      	b.n	8008c32 <xQueueReceive+0x44>
				prvUnlockQueue( pxQueue );
 8008d08:	4620      	mov	r0, r4
 8008d0a:	f7ff fd45 	bl	8008798 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008d0e:	f000 fb39 	bl	8009384 <xTaskResumeAll>
 8008d12:	e7f7      	b.n	8008d04 <xQueueReceive+0x116>
			prvUnlockQueue( pxQueue );
 8008d14:	4620      	mov	r0, r4
 8008d16:	f7ff fd3f 	bl	8008798 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008d1a:	f000 fb33 	bl	8009384 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008d1e:	4620      	mov	r0, r4
 8008d20:	f7ff fce6 	bl	80086f0 <prvIsQueueEmpty>
 8008d24:	2800      	cmp	r0, #0
 8008d26:	d0ed      	beq.n	8008d04 <xQueueReceive+0x116>
 8008d28:	e7b4      	b.n	8008c94 <xQueueReceive+0xa6>

08008d2a <xQueueReceiveFromISR>:
{
 8008d2a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008d2e:	4689      	mov	r9, r1
 8008d30:	4690      	mov	r8, r2
	configASSERT( pxQueue );
 8008d32:	4604      	mov	r4, r0
 8008d34:	b940      	cbnz	r0, 8008d48 <xQueueReceiveFromISR+0x1e>
 8008d36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d3a:	f383 8811 	msr	BASEPRI, r3
 8008d3e:	f3bf 8f6f 	isb	sy
 8008d42:	f3bf 8f4f 	dsb	sy
 8008d46:	e7fe      	b.n	8008d46 <xQueueReceiveFromISR+0x1c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008d48:	b951      	cbnz	r1, 8008d60 <xQueueReceiveFromISR+0x36>
 8008d4a:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8008d4c:	b143      	cbz	r3, 8008d60 <xQueueReceiveFromISR+0x36>
 8008d4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d52:	f383 8811 	msr	BASEPRI, r3
 8008d56:	f3bf 8f6f 	isb	sy
 8008d5a:	f3bf 8f4f 	dsb	sy
 8008d5e:	e7fe      	b.n	8008d5e <xQueueReceiveFromISR+0x34>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008d60:	f001 f87a 	bl	8009e58 <vPortValidateInterruptPriority>
	__asm volatile
 8008d64:	f3ef 8711 	mrs	r7, BASEPRI
 8008d68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d6c:	f383 8811 	msr	BASEPRI, r3
 8008d70:	f3bf 8f6f 	isb	sy
 8008d74:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008d78:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008d7a:	b30d      	cbz	r5, 8008dc0 <xQueueReceiveFromISR+0x96>
			const int8_t cRxLock = pxQueue->cRxLock;
 8008d7c:	f894 6044 	ldrb.w	r6, [r4, #68]	@ 0x44
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008d80:	4649      	mov	r1, r9
			const int8_t cRxLock = pxQueue->cRxLock;
 8008d82:	b276      	sxtb	r6, r6
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008d84:	4620      	mov	r0, r4
 8008d86:	f7ff fcf1 	bl	800876c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008d8a:	3d01      	subs	r5, #1
			if( cRxLock == queueUNLOCKED )
 8008d8c:	1c73      	adds	r3, r6, #1
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008d8e:	63a5      	str	r5, [r4, #56]	@ 0x38
			if( cRxLock == queueUNLOCKED )
 8008d90:	d111      	bne.n	8008db6 <xQueueReceiveFromISR+0x8c>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008d92:	6923      	ldr	r3, [r4, #16]
 8008d94:	b153      	cbz	r3, 8008dac <xQueueReceiveFromISR+0x82>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008d96:	f104 0010 	add.w	r0, r4, #16
 8008d9a:	f000 fc15 	bl	80095c8 <xTaskRemoveFromEventList>
 8008d9e:	b128      	cbz	r0, 8008dac <xQueueReceiveFromISR+0x82>
						if( pxHigherPriorityTaskWoken != NULL )
 8008da0:	f1b8 0f00 	cmp.w	r8, #0
 8008da4:	d002      	beq.n	8008dac <xQueueReceiveFromISR+0x82>
							*pxHigherPriorityTaskWoken = pdTRUE;
 8008da6:	2301      	movs	r3, #1
 8008da8:	f8c8 3000 	str.w	r3, [r8]
			xReturn = pdPASS;
 8008dac:	2001      	movs	r0, #1
	__asm volatile
 8008dae:	f387 8811 	msr	BASEPRI, r7
}
 8008db2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8008db6:	3601      	adds	r6, #1
 8008db8:	b276      	sxtb	r6, r6
 8008dba:	f884 6044 	strb.w	r6, [r4, #68]	@ 0x44
 8008dbe:	e7f5      	b.n	8008dac <xQueueReceiveFromISR+0x82>
			xReturn = pdFAIL;
 8008dc0:	4628      	mov	r0, r5
 8008dc2:	e7f4      	b.n	8008dae <xQueueReceiveFromISR+0x84>

08008dc4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008dc4:	b530      	push	{r4, r5, lr}

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008dc6:	4a07      	ldr	r2, [pc, #28]	@ (8008de4 <vQueueAddToRegistry+0x20>)
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008dc8:	2300      	movs	r3, #0
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008dca:	f852 5033 	ldr.w	r5, [r2, r3, lsl #3]
 8008dce:	eb02 04c3 	add.w	r4, r2, r3, lsl #3
 8008dd2:	b91d      	cbnz	r5, 8008ddc <vQueueAddToRegistry+0x18>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008dd4:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008dd8:	6060      	str	r0, [r4, #4]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008dda:	bd30      	pop	{r4, r5, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008ddc:	3301      	adds	r3, #1
 8008dde:	2b08      	cmp	r3, #8
 8008de0:	d1f3      	bne.n	8008dca <vQueueAddToRegistry+0x6>
 8008de2:	e7fa      	b.n	8008dda <vQueueAddToRegistry+0x16>
 8008de4:	20002c14 	.word	0x20002c14

08008de8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008de8:	b570      	push	{r4, r5, r6, lr}
 8008dea:	4604      	mov	r4, r0
 8008dec:	460d      	mov	r5, r1
 8008dee:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008df0:	f000 ff20 	bl	8009c34 <vPortEnterCritical>
 8008df4:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8008df8:	2bff      	cmp	r3, #255	@ 0xff
 8008dfa:	bf04      	itt	eq
 8008dfc:	2300      	moveq	r3, #0
 8008dfe:	f884 3044 	strbeq.w	r3, [r4, #68]	@ 0x44
 8008e02:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8008e06:	2bff      	cmp	r3, #255	@ 0xff
 8008e08:	bf04      	itt	eq
 8008e0a:	2300      	moveq	r3, #0
 8008e0c:	f884 3045 	strbeq.w	r3, [r4, #69]	@ 0x45
 8008e10:	f000 ff30 	bl	8009c74 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008e14:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8008e16:	b92b      	cbnz	r3, 8008e24 <vQueueWaitForMessageRestricted+0x3c>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008e18:	4632      	mov	r2, r6
 8008e1a:	4629      	mov	r1, r5
 8008e1c:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8008e20:	f000 fbb4 	bl	800958c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008e24:	4620      	mov	r0, r4
	}
 8008e26:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		prvUnlockQueue( pxQueue );
 8008e2a:	f7ff bcb5 	b.w	8008798 <prvUnlockQueue>
	...

08008e30 <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008e30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e34:	4604      	mov	r4, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008e36:	f000 fefd 	bl	8009c34 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008e3a:	4b30      	ldr	r3, [pc, #192]	@ (8008efc <prvAddNewTaskToReadyList+0xcc>)
		if( pxCurrentTCB == NULL )
 8008e3c:	4e30      	ldr	r6, [pc, #192]	@ (8008f00 <prvAddNewTaskToReadyList+0xd0>)
		uxCurrentNumberOfTasks++;
 8008e3e:	681a      	ldr	r2, [r3, #0]
 8008e40:	4f30      	ldr	r7, [pc, #192]	@ (8008f04 <prvAddNewTaskToReadyList+0xd4>)
 8008e42:	3201      	adds	r2, #1
 8008e44:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8008e46:	6835      	ldr	r5, [r6, #0]
 8008e48:	2d00      	cmp	r5, #0
 8008e4a:	d14b      	bne.n	8008ee4 <prvAddNewTaskToReadyList+0xb4>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008e4c:	6034      	str	r4, [r6, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	2b01      	cmp	r3, #1
 8008e52:	d11f      	bne.n	8008e94 <prvAddNewTaskToReadyList+0x64>
 8008e54:	46b8      	mov	r8, r7
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008e56:	4640      	mov	r0, r8
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008e58:	3501      	adds	r5, #1
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008e5a:	f7ff fc09 	bl	8008670 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008e5e:	2d38      	cmp	r5, #56	@ 0x38
 8008e60:	f108 0814 	add.w	r8, r8, #20
 8008e64:	d1f7      	bne.n	8008e56 <prvAddNewTaskToReadyList+0x26>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008e66:	f8df 80c4 	ldr.w	r8, [pc, #196]	@ 8008f2c <prvAddNewTaskToReadyList+0xfc>
	vListInitialise( &xDelayedTaskList2 );
 8008e6a:	4d27      	ldr	r5, [pc, #156]	@ (8008f08 <prvAddNewTaskToReadyList+0xd8>)
	vListInitialise( &xDelayedTaskList1 );
 8008e6c:	4640      	mov	r0, r8
 8008e6e:	f7ff fbff 	bl	8008670 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008e72:	4628      	mov	r0, r5
 8008e74:	f7ff fbfc 	bl	8008670 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008e78:	4824      	ldr	r0, [pc, #144]	@ (8008f0c <prvAddNewTaskToReadyList+0xdc>)
 8008e7a:	f7ff fbf9 	bl	8008670 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008e7e:	4824      	ldr	r0, [pc, #144]	@ (8008f10 <prvAddNewTaskToReadyList+0xe0>)
 8008e80:	f7ff fbf6 	bl	8008670 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008e84:	4823      	ldr	r0, [pc, #140]	@ (8008f14 <prvAddNewTaskToReadyList+0xe4>)
 8008e86:	f7ff fbf3 	bl	8008670 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008e8a:	4b23      	ldr	r3, [pc, #140]	@ (8008f18 <prvAddNewTaskToReadyList+0xe8>)
 8008e8c:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008e90:	4b22      	ldr	r3, [pc, #136]	@ (8008f1c <prvAddNewTaskToReadyList+0xec>)
 8008e92:	601d      	str	r5, [r3, #0]
		uxTaskNumber++;
 8008e94:	4a22      	ldr	r2, [pc, #136]	@ (8008f20 <prvAddNewTaskToReadyList+0xf0>)
 8008e96:	6813      	ldr	r3, [r2, #0]
 8008e98:	3301      	adds	r3, #1
 8008e9a:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8008e9c:	4a21      	ldr	r2, [pc, #132]	@ (8008f24 <prvAddNewTaskToReadyList+0xf4>)
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008e9e:	6463      	str	r3, [r4, #68]	@ 0x44
		prvAddTaskToReadyList( pxNewTCB );
 8008ea0:	6811      	ldr	r1, [r2, #0]
 8008ea2:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8008ea4:	2014      	movs	r0, #20
 8008ea6:	428b      	cmp	r3, r1
 8008ea8:	fb00 7003 	mla	r0, r0, r3, r7
 8008eac:	f104 0104 	add.w	r1, r4, #4
 8008eb0:	bf88      	it	hi
 8008eb2:	6013      	strhi	r3, [r2, #0]
 8008eb4:	f7ff fbea 	bl	800868c <vListInsertEnd>
	taskEXIT_CRITICAL();
 8008eb8:	f000 fedc 	bl	8009c74 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8008ebc:	4b1a      	ldr	r3, [pc, #104]	@ (8008f28 <prvAddNewTaskToReadyList+0xf8>)
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	b173      	cbz	r3, 8008ee0 <prvAddNewTaskToReadyList+0xb0>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008ec2:	6833      	ldr	r3, [r6, #0]
 8008ec4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008ec6:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8008ec8:	429a      	cmp	r2, r3
 8008eca:	d209      	bcs.n	8008ee0 <prvAddNewTaskToReadyList+0xb0>
			taskYIELD_IF_USING_PREEMPTION();
 8008ecc:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8008ed0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008ed4:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8008ed8:	f3bf 8f4f 	dsb	sy
 8008edc:	f3bf 8f6f 	isb	sy
}
 8008ee0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( xSchedulerRunning == pdFALSE )
 8008ee4:	4b10      	ldr	r3, [pc, #64]	@ (8008f28 <prvAddNewTaskToReadyList+0xf8>)
 8008ee6:	681a      	ldr	r2, [r3, #0]
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008ee8:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
			if( xSchedulerRunning == pdFALSE )
 8008eea:	2a00      	cmp	r2, #0
 8008eec:	d1d2      	bne.n	8008e94 <prvAddNewTaskToReadyList+0x64>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008eee:	6832      	ldr	r2, [r6, #0]
 8008ef0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8008ef2:	429a      	cmp	r2, r3
					pxCurrentTCB = pxNewTCB;
 8008ef4:	bf98      	it	ls
 8008ef6:	6034      	strls	r4, [r6, #0]
 8008ef8:	e7cc      	b.n	8008e94 <prvAddNewTaskToReadyList+0x64>
 8008efa:	bf00      	nop
 8008efc:	20002c78 	.word	0x20002c78
 8008f00:	2000314c 	.word	0x2000314c
 8008f04:	20002cec 	.word	0x20002cec
 8008f08:	20002cc4 	.word	0x20002cc4
 8008f0c:	20002ca8 	.word	0x20002ca8
 8008f10:	20002c94 	.word	0x20002c94
 8008f14:	20002c7c 	.word	0x20002c7c
 8008f18:	20002cc0 	.word	0x20002cc0
 8008f1c:	20002cbc 	.word	0x20002cbc
 8008f20:	20002c5c 	.word	0x20002c5c
 8008f24:	20002c70 	.word	0x20002c70
 8008f28:	20002c6c 	.word	0x20002c6c
 8008f2c:	20002cd8 	.word	0x20002cd8

08008f30 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008f30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008f32:	4b15      	ldr	r3, [pc, #84]	@ (8008f88 <prvAddCurrentTaskToDelayedList+0x58>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008f34:	4d15      	ldr	r5, [pc, #84]	@ (8008f8c <prvAddCurrentTaskToDelayedList+0x5c>)
const TickType_t xConstTickCount = xTickCount;
 8008f36:	681c      	ldr	r4, [r3, #0]
{
 8008f38:	4606      	mov	r6, r0
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008f3a:	6828      	ldr	r0, [r5, #0]
 8008f3c:	3004      	adds	r0, #4
{
 8008f3e:	460f      	mov	r7, r1
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008f40:	f7ff fbc6 	bl	80086d0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008f44:	1c73      	adds	r3, r6, #1
 8008f46:	d107      	bne.n	8008f58 <prvAddCurrentTaskToDelayedList+0x28>
 8008f48:	b137      	cbz	r7, 8008f58 <prvAddCurrentTaskToDelayedList+0x28>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008f4a:	6829      	ldr	r1, [r5, #0]
 8008f4c:	4810      	ldr	r0, [pc, #64]	@ (8008f90 <prvAddCurrentTaskToDelayedList+0x60>)

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008f4e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008f52:	3104      	adds	r1, #4
 8008f54:	f7ff bb9a 	b.w	800868c <vListInsertEnd>
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008f58:	682b      	ldr	r3, [r5, #0]
 8008f5a:	19a4      	adds	r4, r4, r6
 8008f5c:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008f5e:	d307      	bcc.n	8008f70 <prvAddCurrentTaskToDelayedList+0x40>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008f60:	4b0c      	ldr	r3, [pc, #48]	@ (8008f94 <prvAddCurrentTaskToDelayedList+0x64>)
 8008f62:	6818      	ldr	r0, [r3, #0]
 8008f64:	6829      	ldr	r1, [r5, #0]
}
 8008f66:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008f6a:	3104      	adds	r1, #4
 8008f6c:	f7ff bb99 	b.w	80086a2 <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008f70:	4b09      	ldr	r3, [pc, #36]	@ (8008f98 <prvAddCurrentTaskToDelayedList+0x68>)
 8008f72:	6818      	ldr	r0, [r3, #0]
 8008f74:	6829      	ldr	r1, [r5, #0]
 8008f76:	3104      	adds	r1, #4
 8008f78:	f7ff fb93 	bl	80086a2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008f7c:	4b07      	ldr	r3, [pc, #28]	@ (8008f9c <prvAddCurrentTaskToDelayedList+0x6c>)
 8008f7e:	681a      	ldr	r2, [r3, #0]
 8008f80:	42a2      	cmp	r2, r4
					xNextTaskUnblockTime = xTimeToWake;
 8008f82:	bf88      	it	hi
 8008f84:	601c      	strhi	r4, [r3, #0]
}
 8008f86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008f88:	20002c74 	.word	0x20002c74
 8008f8c:	2000314c 	.word	0x2000314c
 8008f90:	20002c7c 	.word	0x20002c7c
 8008f94:	20002cbc 	.word	0x20002cbc
 8008f98:	20002cc0 	.word	0x20002cc0
 8008f9c:	20002c58 	.word	0x20002c58

08008fa0 <prvResetNextTaskUnblockTime>:
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008fa0:	4a06      	ldr	r2, [pc, #24]	@ (8008fbc <prvResetNextTaskUnblockTime+0x1c>)
 8008fa2:	6813      	ldr	r3, [r2, #0]
 8008fa4:	6819      	ldr	r1, [r3, #0]
 8008fa6:	4b06      	ldr	r3, [pc, #24]	@ (8008fc0 <prvResetNextTaskUnblockTime+0x20>)
 8008fa8:	b919      	cbnz	r1, 8008fb2 <prvResetNextTaskUnblockTime+0x12>
		xNextTaskUnblockTime = portMAX_DELAY;
 8008faa:	f04f 32ff 	mov.w	r2, #4294967295
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008fae:	601a      	str	r2, [r3, #0]
}
 8008fb0:	4770      	bx	lr
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8008fb2:	6812      	ldr	r2, [r2, #0]
 8008fb4:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008fb6:	68d2      	ldr	r2, [r2, #12]
 8008fb8:	6852      	ldr	r2, [r2, #4]
 8008fba:	e7f8      	b.n	8008fae <prvResetNextTaskUnblockTime+0xe>
 8008fbc:	20002cc0 	.word	0x20002cc0
 8008fc0:	20002c58 	.word	0x20002c58

08008fc4 <prvDeleteTCB>:
	{
 8008fc4:	b510      	push	{r4, lr}
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008fc6:	f890 3059 	ldrb.w	r3, [r0, #89]	@ 0x59
	{
 8008fca:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008fcc:	b93b      	cbnz	r3, 8008fde <prvDeleteTCB+0x1a>
				vPortFree( pxTCB->pxStack );
 8008fce:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 8008fd0:	f001 f828 	bl	800a024 <vPortFree>
				vPortFree( pxTCB );
 8008fd4:	4620      	mov	r0, r4
	}
 8008fd6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				vPortFree( pxTCB );
 8008fda:	f001 b823 	b.w	800a024 <vPortFree>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008fde:	2b01      	cmp	r3, #1
 8008fe0:	d0f9      	beq.n	8008fd6 <prvDeleteTCB+0x12>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008fe2:	2b02      	cmp	r3, #2
 8008fe4:	d008      	beq.n	8008ff8 <prvDeleteTCB+0x34>
	__asm volatile
 8008fe6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008fea:	f383 8811 	msr	BASEPRI, r3
 8008fee:	f3bf 8f6f 	isb	sy
 8008ff2:	f3bf 8f4f 	dsb	sy
 8008ff6:	e7fe      	b.n	8008ff6 <prvDeleteTCB+0x32>
	}
 8008ff8:	bd10      	pop	{r4, pc}
	...

08008ffc <prvIdleTask>:
{
 8008ffc:	b580      	push	{r7, lr}
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008ffe:	4c13      	ldr	r4, [pc, #76]	@ (800904c <prvIdleTask+0x50>)
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8009000:	4f13      	ldr	r7, [pc, #76]	@ (8009050 <prvIdleTask+0x54>)
				--uxCurrentNumberOfTasks;
 8009002:	4d14      	ldr	r5, [pc, #80]	@ (8009054 <prvIdleTask+0x58>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009004:	6823      	ldr	r3, [r4, #0]
 8009006:	b973      	cbnz	r3, 8009026 <prvIdleTask+0x2a>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009008:	4b13      	ldr	r3, [pc, #76]	@ (8009058 <prvIdleTask+0x5c>)
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	2b01      	cmp	r3, #1
 800900e:	d9f8      	bls.n	8009002 <prvIdleTask+0x6>
				taskYIELD();
 8009010:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8009014:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009018:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800901c:	f3bf 8f4f 	dsb	sy
 8009020:	f3bf 8f6f 	isb	sy
 8009024:	e7ed      	b.n	8009002 <prvIdleTask+0x6>
			taskENTER_CRITICAL();
 8009026:	f000 fe05 	bl	8009c34 <vPortEnterCritical>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	68de      	ldr	r6, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800902e:	1d30      	adds	r0, r6, #4
 8009030:	f7ff fb4e 	bl	80086d0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009034:	682b      	ldr	r3, [r5, #0]
 8009036:	3b01      	subs	r3, #1
 8009038:	602b      	str	r3, [r5, #0]
				--uxDeletedTasksWaitingCleanUp;
 800903a:	6823      	ldr	r3, [r4, #0]
 800903c:	3b01      	subs	r3, #1
 800903e:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 8009040:	f000 fe18 	bl	8009c74 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 8009044:	4630      	mov	r0, r6
 8009046:	f7ff ffbd 	bl	8008fc4 <prvDeleteTCB>
 800904a:	e7db      	b.n	8009004 <prvIdleTask+0x8>
 800904c:	20002c90 	.word	0x20002c90
 8009050:	20002c94 	.word	0x20002c94
 8009054:	20002c78 	.word	0x20002c78
 8009058:	20002cec 	.word	0x20002cec

0800905c <prvInitialiseNewTask.constprop.0>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800905c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009060:	e9dd 9409 	ldrd	r9, r4, [sp, #36]	@ 0x24
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009064:	0096      	lsls	r6, r2, #2
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8009066:	460d      	mov	r5, r1
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009068:	4632      	mov	r2, r6
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800906a:	4607      	mov	r7, r0
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800906c:	21a5      	movs	r1, #165	@ 0xa5
 800906e:	6b20      	ldr	r0, [r4, #48]	@ 0x30
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8009070:	4698      	mov	r8, r3
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009072:	f002 ff9b 	bl	800bfac <memset>
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8009076:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8009078:	3e04      	subs	r6, #4
 800907a:	441e      	add	r6, r3
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800907c:	f026 0607 	bic.w	r6, r6, #7
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009080:	1e6b      	subs	r3, r5, #1
 8009082:	f104 0233 	add.w	r2, r4, #51	@ 0x33
 8009086:	350f      	adds	r5, #15
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009088:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 800908c:	f802 1f01 	strb.w	r1, [r2, #1]!
		if( pcName[ x ] == 0x00 )
 8009090:	b109      	cbz	r1, 8009096 <prvInitialiseNewTask.constprop.0+0x3a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009092:	42ab      	cmp	r3, r5
 8009094:	d1f8      	bne.n	8009088 <prvInitialiseNewTask.constprop.0+0x2c>
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009096:	9d08      	ldr	r5, [sp, #32]
 8009098:	2d37      	cmp	r5, #55	@ 0x37
 800909a:	bf28      	it	cs
 800909c:	2537      	movcs	r5, #55	@ 0x37
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800909e:	f04f 0a00 	mov.w	sl, #0
		pxNewTCB->uxMutexesHeld = 0;
 80090a2:	e9c4 5a13 	strd	r5, sl, [r4, #76]	@ 0x4c
	pxNewTCB->uxPriority = uxPriority;
 80090a6:	62e5      	str	r5, [r4, #44]	@ 0x2c
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80090a8:	1d20      	adds	r0, r4, #4
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80090aa:	f884 a043 	strb.w	sl, [r4, #67]	@ 0x43
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80090ae:	f7ff faea 	bl	8008686 <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80090b2:	f1c5 0538 	rsb	r5, r5, #56	@ 0x38
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80090b6:	f104 0018 	add.w	r0, r4, #24
 80090ba:	f7ff fae4 	bl	8008686 <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 80090be:	f8c4 a054 	str.w	sl, [r4, #84]	@ 0x54
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80090c2:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80090c4:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80090c6:	6264      	str	r4, [r4, #36]	@ 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80090c8:	f884 a058 	strb.w	sl, [r4, #88]	@ 0x58
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80090cc:	4642      	mov	r2, r8
 80090ce:	4639      	mov	r1, r7
 80090d0:	4630      	mov	r0, r6
 80090d2:	f000 fd83 	bl	8009bdc <pxPortInitialiseStack>
 80090d6:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 80090d8:	f1b9 0f00 	cmp.w	r9, #0
 80090dc:	d001      	beq.n	80090e2 <prvInitialiseNewTask.constprop.0+0x86>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80090de:	f8c9 4000 	str.w	r4, [r9]
}
 80090e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080090e6 <xTaskCreateStatic>:
	{
 80090e6:	b570      	push	{r4, r5, r6, lr}
 80090e8:	b086      	sub	sp, #24
 80090ea:	e9dd 540b 	ldrd	r5, r4, [sp, #44]	@ 0x2c
		configASSERT( puxStackBuffer != NULL );
 80090ee:	b945      	cbnz	r5, 8009102 <xTaskCreateStatic+0x1c>
 80090f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090f4:	f383 8811 	msr	BASEPRI, r3
 80090f8:	f3bf 8f6f 	isb	sy
 80090fc:	f3bf 8f4f 	dsb	sy
 8009100:	e7fe      	b.n	8009100 <xTaskCreateStatic+0x1a>
		configASSERT( pxTaskBuffer != NULL );
 8009102:	b944      	cbnz	r4, 8009116 <xTaskCreateStatic+0x30>
 8009104:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009108:	f383 8811 	msr	BASEPRI, r3
 800910c:	f3bf 8f6f 	isb	sy
 8009110:	f3bf 8f4f 	dsb	sy
 8009114:	e7fe      	b.n	8009114 <xTaskCreateStatic+0x2e>
			volatile size_t xSize = sizeof( StaticTask_t );
 8009116:	265c      	movs	r6, #92	@ 0x5c
 8009118:	9605      	str	r6, [sp, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 800911a:	9e05      	ldr	r6, [sp, #20]
 800911c:	2e5c      	cmp	r6, #92	@ 0x5c
 800911e:	d008      	beq.n	8009132 <xTaskCreateStatic+0x4c>
 8009120:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009124:	f383 8811 	msr	BASEPRI, r3
 8009128:	f3bf 8f6f 	isb	sy
 800912c:	f3bf 8f4f 	dsb	sy
 8009130:	e7fe      	b.n	8009130 <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009132:	6325      	str	r5, [r4, #48]	@ 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009134:	2502      	movs	r5, #2
 8009136:	f884 5059 	strb.w	r5, [r4, #89]	@ 0x59
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800913a:	ad04      	add	r5, sp, #16
 800913c:	9501      	str	r5, [sp, #4]
 800913e:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8009140:	9402      	str	r4, [sp, #8]
 8009142:	9500      	str	r5, [sp, #0]
 8009144:	f7ff ff8a 	bl	800905c <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009148:	4620      	mov	r0, r4
 800914a:	f7ff fe71 	bl	8008e30 <prvAddNewTaskToReadyList>
	}
 800914e:	9804      	ldr	r0, [sp, #16]
 8009150:	b006      	add	sp, #24
 8009152:	bd70      	pop	{r4, r5, r6, pc}

08009154 <xTaskCreate>:
	{
 8009154:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009158:	4607      	mov	r7, r0
 800915a:	b085      	sub	sp, #20
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800915c:	0090      	lsls	r0, r2, #2
	{
 800915e:	4688      	mov	r8, r1
 8009160:	4616      	mov	r6, r2
 8009162:	4699      	mov	r9, r3
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009164:	f000 fecc 	bl	8009f00 <pvPortMalloc>
			if( pxStack != NULL )
 8009168:	4605      	mov	r5, r0
 800916a:	b920      	cbnz	r0, 8009176 <xTaskCreate+0x22>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800916c:	f04f 30ff 	mov.w	r0, #4294967295
	}
 8009170:	b005      	add	sp, #20
 8009172:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8009176:	205c      	movs	r0, #92	@ 0x5c
 8009178:	f000 fec2 	bl	8009f00 <pvPortMalloc>
				if( pxNewTCB != NULL )
 800917c:	4604      	mov	r4, r0
 800917e:	b198      	cbz	r0, 80091a8 <xTaskCreate+0x54>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009180:	2300      	movs	r3, #0
 8009182:	f880 3059 	strb.w	r3, [r0, #89]	@ 0x59
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009186:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
					pxNewTCB->pxStack = pxStack;
 8009188:	6305      	str	r5, [r0, #48]	@ 0x30
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800918a:	9301      	str	r3, [sp, #4]
 800918c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800918e:	9002      	str	r0, [sp, #8]
 8009190:	9300      	str	r3, [sp, #0]
 8009192:	4632      	mov	r2, r6
 8009194:	464b      	mov	r3, r9
 8009196:	4641      	mov	r1, r8
 8009198:	4638      	mov	r0, r7
 800919a:	f7ff ff5f 	bl	800905c <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 800919e:	4620      	mov	r0, r4
 80091a0:	f7ff fe46 	bl	8008e30 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80091a4:	2001      	movs	r0, #1
 80091a6:	e7e3      	b.n	8009170 <xTaskCreate+0x1c>
					vPortFree( pxStack );
 80091a8:	4628      	mov	r0, r5
 80091aa:	f000 ff3b 	bl	800a024 <vPortFree>
		if( pxNewTCB != NULL )
 80091ae:	e7dd      	b.n	800916c <xTaskCreate+0x18>

080091b0 <vTaskStartScheduler>:
{
 80091b0:	b510      	push	{r4, lr}
 80091b2:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80091b4:	2400      	movs	r4, #0
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80091b6:	aa07      	add	r2, sp, #28
 80091b8:	a906      	add	r1, sp, #24
 80091ba:	a805      	add	r0, sp, #20
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80091bc:	e9cd 4405 	strd	r4, r4, [sp, #20]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80091c0:	f7ff fa3e 	bl	8008640 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80091c4:	9b05      	ldr	r3, [sp, #20]
 80091c6:	9302      	str	r3, [sp, #8]
 80091c8:	9b06      	ldr	r3, [sp, #24]
 80091ca:	9a07      	ldr	r2, [sp, #28]
 80091cc:	4916      	ldr	r1, [pc, #88]	@ (8009228 <vTaskStartScheduler+0x78>)
 80091ce:	4817      	ldr	r0, [pc, #92]	@ (800922c <vTaskStartScheduler+0x7c>)
 80091d0:	e9cd 4300 	strd	r4, r3, [sp]
 80091d4:	4623      	mov	r3, r4
 80091d6:	f7ff ff86 	bl	80090e6 <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 80091da:	b318      	cbz	r0, 8009224 <vTaskStartScheduler+0x74>
			xReturn = xTimerCreateTimerTask();
 80091dc:	f000 fb36 	bl	800984c <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 80091e0:	2801      	cmp	r0, #1
 80091e2:	d114      	bne.n	800920e <vTaskStartScheduler+0x5e>
 80091e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091e8:	f383 8811 	msr	BASEPRI, r3
 80091ec:	f3bf 8f6f 	isb	sy
 80091f0:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 80091f4:	4b0e      	ldr	r3, [pc, #56]	@ (8009230 <vTaskStartScheduler+0x80>)
 80091f6:	f04f 32ff 	mov.w	r2, #4294967295
 80091fa:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80091fc:	4b0d      	ldr	r3, [pc, #52]	@ (8009234 <vTaskStartScheduler+0x84>)
 80091fe:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8009200:	4b0d      	ldr	r3, [pc, #52]	@ (8009238 <vTaskStartScheduler+0x88>)
 8009202:	601c      	str	r4, [r3, #0]
}
 8009204:	b008      	add	sp, #32
 8009206:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if( xPortStartScheduler() != pdFALSE )
 800920a:	f000 bda3 	b.w	8009d54 <xPortStartScheduler>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800920e:	3001      	adds	r0, #1
 8009210:	d108      	bne.n	8009224 <vTaskStartScheduler+0x74>
 8009212:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009216:	f383 8811 	msr	BASEPRI, r3
 800921a:	f3bf 8f6f 	isb	sy
 800921e:	f3bf 8f4f 	dsb	sy
 8009222:	e7fe      	b.n	8009222 <vTaskStartScheduler+0x72>
}
 8009224:	b008      	add	sp, #32
 8009226:	bd10      	pop	{r4, pc}
 8009228:	08013a07 	.word	0x08013a07
 800922c:	08008ffd 	.word	0x08008ffd
 8009230:	20002c58 	.word	0x20002c58
 8009234:	20002c6c 	.word	0x20002c6c
 8009238:	20002c74 	.word	0x20002c74

0800923c <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 800923c:	4a02      	ldr	r2, [pc, #8]	@ (8009248 <vTaskSuspendAll+0xc>)
 800923e:	6813      	ldr	r3, [r2, #0]
 8009240:	3301      	adds	r3, #1
 8009242:	6013      	str	r3, [r2, #0]
}
 8009244:	4770      	bx	lr
 8009246:	bf00      	nop
 8009248:	20002c54 	.word	0x20002c54

0800924c <xTaskGetTickCount>:
		xTicks = xTickCount;
 800924c:	4b01      	ldr	r3, [pc, #4]	@ (8009254 <xTaskGetTickCount+0x8>)
 800924e:	6818      	ldr	r0, [r3, #0]
}
 8009250:	4770      	bx	lr
 8009252:	bf00      	nop
 8009254:	20002c74 	.word	0x20002c74

08009258 <xTaskIncrementTick>:
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009258:	4b3f      	ldr	r3, [pc, #252]	@ (8009358 <xTaskIncrementTick+0x100>)
 800925a:	681b      	ldr	r3, [r3, #0]
{
 800925c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009260:	2b00      	cmp	r3, #0
 8009262:	d171      	bne.n	8009348 <xTaskIncrementTick+0xf0>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009264:	4b3d      	ldr	r3, [pc, #244]	@ (800935c <xTaskIncrementTick+0x104>)
 8009266:	681c      	ldr	r4, [r3, #0]
 8009268:	3401      	adds	r4, #1
		xTickCount = xConstTickCount;
 800926a:	601c      	str	r4, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800926c:	b9bc      	cbnz	r4, 800929e <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 800926e:	4b3c      	ldr	r3, [pc, #240]	@ (8009360 <xTaskIncrementTick+0x108>)
 8009270:	681a      	ldr	r2, [r3, #0]
 8009272:	6812      	ldr	r2, [r2, #0]
 8009274:	b142      	cbz	r2, 8009288 <xTaskIncrementTick+0x30>
 8009276:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800927a:	f383 8811 	msr	BASEPRI, r3
 800927e:	f3bf 8f6f 	isb	sy
 8009282:	f3bf 8f4f 	dsb	sy
 8009286:	e7fe      	b.n	8009286 <xTaskIncrementTick+0x2e>
 8009288:	4a36      	ldr	r2, [pc, #216]	@ (8009364 <xTaskIncrementTick+0x10c>)
 800928a:	6819      	ldr	r1, [r3, #0]
 800928c:	6810      	ldr	r0, [r2, #0]
 800928e:	6018      	str	r0, [r3, #0]
 8009290:	6011      	str	r1, [r2, #0]
 8009292:	4a35      	ldr	r2, [pc, #212]	@ (8009368 <xTaskIncrementTick+0x110>)
 8009294:	6813      	ldr	r3, [r2, #0]
 8009296:	3301      	adds	r3, #1
 8009298:	6013      	str	r3, [r2, #0]
 800929a:	f7ff fe81 	bl	8008fa0 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 800929e:	4d33      	ldr	r5, [pc, #204]	@ (800936c <xTaskIncrementTick+0x114>)
 80092a0:	4e33      	ldr	r6, [pc, #204]	@ (8009370 <xTaskIncrementTick+0x118>)
 80092a2:	682b      	ldr	r3, [r5, #0]
 80092a4:	4f33      	ldr	r7, [pc, #204]	@ (8009374 <xTaskIncrementTick+0x11c>)
 80092a6:	42a3      	cmp	r3, r4
BaseType_t xSwitchRequired = pdFALSE;
 80092a8:	f04f 0b00 	mov.w	fp, #0
		if( xConstTickCount >= xNextTaskUnblockTime )
 80092ac:	d911      	bls.n	80092d2 <xTaskIncrementTick+0x7a>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80092ae:	683a      	ldr	r2, [r7, #0]
 80092b0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80092b2:	2114      	movs	r1, #20
 80092b4:	434a      	muls	r2, r1
 80092b6:	58b2      	ldr	r2, [r6, r2]
				xSwitchRequired = pdTRUE;
 80092b8:	2a02      	cmp	r2, #2
 80092ba:	bf28      	it	cs
 80092bc:	f04f 0b01 	movcs.w	fp, #1
		if( xYieldPending != pdFALSE )
 80092c0:	4a2d      	ldr	r2, [pc, #180]	@ (8009378 <xTaskIncrementTick+0x120>)
 80092c2:	6812      	ldr	r2, [r2, #0]
			xSwitchRequired = pdTRUE;
 80092c4:	2a00      	cmp	r2, #0
}
 80092c6:	bf0c      	ite	eq
 80092c8:	4658      	moveq	r0, fp
 80092ca:	2001      	movne	r0, #1
 80092cc:	b003      	add	sp, #12
 80092ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80092d2:	f8df 908c 	ldr.w	r9, [pc, #140]	@ 8009360 <xTaskIncrementTick+0x108>
					prvAddTaskToReadyList( pxTCB );
 80092d6:	f8df a0a8 	ldr.w	sl, [pc, #168]	@ 8009380 <xTaskIncrementTick+0x128>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80092da:	f8d9 2000 	ldr.w	r2, [r9]
 80092de:	6812      	ldr	r2, [r2, #0]
 80092e0:	b91a      	cbnz	r2, 80092ea <xTaskIncrementTick+0x92>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80092e2:	f04f 32ff 	mov.w	r2, #4294967295
 80092e6:	602a      	str	r2, [r5, #0]
					break;
 80092e8:	e7e1      	b.n	80092ae <xTaskIncrementTick+0x56>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80092ea:	f8d9 2000 	ldr.w	r2, [r9]
 80092ee:	68d2      	ldr	r2, [r2, #12]
 80092f0:	f8d2 800c 	ldr.w	r8, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80092f4:	f8d8 1004 	ldr.w	r1, [r8, #4]
					if( xConstTickCount < xItemValue )
 80092f8:	428c      	cmp	r4, r1
 80092fa:	d201      	bcs.n	8009300 <xTaskIncrementTick+0xa8>
						xNextTaskUnblockTime = xItemValue;
 80092fc:	6029      	str	r1, [r5, #0]
						break;
 80092fe:	e7d6      	b.n	80092ae <xTaskIncrementTick+0x56>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009300:	f108 0304 	add.w	r3, r8, #4
 8009304:	4618      	mov	r0, r3
 8009306:	9301      	str	r3, [sp, #4]
 8009308:	f7ff f9e2 	bl	80086d0 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800930c:	f8d8 1028 	ldr.w	r1, [r8, #40]	@ 0x28
 8009310:	b119      	cbz	r1, 800931a <xTaskIncrementTick+0xc2>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009312:	f108 0018 	add.w	r0, r8, #24
 8009316:	f7ff f9db 	bl	80086d0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800931a:	f8d8 002c 	ldr.w	r0, [r8, #44]	@ 0x2c
 800931e:	f8da 1000 	ldr.w	r1, [sl]
 8009322:	2314      	movs	r3, #20
 8009324:	4288      	cmp	r0, r1
 8009326:	bf88      	it	hi
 8009328:	f8ca 0000 	strhi.w	r0, [sl]
 800932c:	9901      	ldr	r1, [sp, #4]
 800932e:	fb03 6000 	mla	r0, r3, r0, r6
 8009332:	f7ff f9ab 	bl	800868c <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009336:	6838      	ldr	r0, [r7, #0]
 8009338:	f8d8 102c 	ldr.w	r1, [r8, #44]	@ 0x2c
 800933c:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
							xSwitchRequired = pdTRUE;
 800933e:	4291      	cmp	r1, r2
 8009340:	bf28      	it	cs
 8009342:	f04f 0b01 	movcs.w	fp, #1
 8009346:	e7c8      	b.n	80092da <xTaskIncrementTick+0x82>
		++uxPendedTicks;
 8009348:	4a0c      	ldr	r2, [pc, #48]	@ (800937c <xTaskIncrementTick+0x124>)
 800934a:	6813      	ldr	r3, [r2, #0]
 800934c:	3301      	adds	r3, #1
 800934e:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 8009350:	f04f 0b00 	mov.w	fp, #0
 8009354:	e7b4      	b.n	80092c0 <xTaskIncrementTick+0x68>
 8009356:	bf00      	nop
 8009358:	20002c54 	.word	0x20002c54
 800935c:	20002c74 	.word	0x20002c74
 8009360:	20002cc0 	.word	0x20002cc0
 8009364:	20002cbc 	.word	0x20002cbc
 8009368:	20002c60 	.word	0x20002c60
 800936c:	20002c58 	.word	0x20002c58
 8009370:	20002cec 	.word	0x20002cec
 8009374:	2000314c 	.word	0x2000314c
 8009378:	20002c64 	.word	0x20002c64
 800937c:	20002c68 	.word	0x20002c68
 8009380:	20002c70 	.word	0x20002c70

08009384 <xTaskResumeAll>:
{
 8009384:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	configASSERT( uxSchedulerSuspended );
 8009388:	4c30      	ldr	r4, [pc, #192]	@ (800944c <xTaskResumeAll+0xc8>)
 800938a:	6823      	ldr	r3, [r4, #0]
 800938c:	b943      	cbnz	r3, 80093a0 <xTaskResumeAll+0x1c>
 800938e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009392:	f383 8811 	msr	BASEPRI, r3
 8009396:	f3bf 8f6f 	isb	sy
 800939a:	f3bf 8f4f 	dsb	sy
 800939e:	e7fe      	b.n	800939e <xTaskResumeAll+0x1a>
	taskENTER_CRITICAL();
 80093a0:	f000 fc48 	bl	8009c34 <vPortEnterCritical>
		--uxSchedulerSuspended;
 80093a4:	6823      	ldr	r3, [r4, #0]
 80093a6:	3b01      	subs	r3, #1
 80093a8:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80093aa:	6824      	ldr	r4, [r4, #0]
 80093ac:	b12c      	cbz	r4, 80093ba <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 80093ae:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 80093b0:	f000 fc60 	bl	8009c74 <vPortExitCritical>
}
 80093b4:	4620      	mov	r0, r4
 80093b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80093ba:	4b25      	ldr	r3, [pc, #148]	@ (8009450 <xTaskResumeAll+0xcc>)
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d0f5      	beq.n	80093ae <xTaskResumeAll+0x2a>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80093c2:	4d24      	ldr	r5, [pc, #144]	@ (8009454 <xTaskResumeAll+0xd0>)
					prvAddTaskToReadyList( pxTCB );
 80093c4:	4e24      	ldr	r6, [pc, #144]	@ (8009458 <xTaskResumeAll+0xd4>)
 80093c6:	f8df 80a0 	ldr.w	r8, [pc, #160]	@ 8009468 <xTaskResumeAll+0xe4>
 80093ca:	e01d      	b.n	8009408 <xTaskResumeAll+0x84>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80093cc:	68eb      	ldr	r3, [r5, #12]
 80093ce:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80093d0:	1d27      	adds	r7, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80093d2:	f104 0018 	add.w	r0, r4, #24
 80093d6:	f7ff f97b 	bl	80086d0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80093da:	4638      	mov	r0, r7
 80093dc:	f7ff f978 	bl	80086d0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80093e0:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80093e2:	6832      	ldr	r2, [r6, #0]
 80093e4:	2014      	movs	r0, #20
 80093e6:	4293      	cmp	r3, r2
 80093e8:	fb00 8003 	mla	r0, r0, r3, r8
 80093ec:	4639      	mov	r1, r7
 80093ee:	bf88      	it	hi
 80093f0:	6033      	strhi	r3, [r6, #0]
 80093f2:	f7ff f94b 	bl	800868c <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80093f6:	4b19      	ldr	r3, [pc, #100]	@ (800945c <xTaskResumeAll+0xd8>)
 80093f8:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80093fe:	429a      	cmp	r2, r3
 8009400:	d302      	bcc.n	8009408 <xTaskResumeAll+0x84>
						xYieldPending = pdTRUE;
 8009402:	4b17      	ldr	r3, [pc, #92]	@ (8009460 <xTaskResumeAll+0xdc>)
 8009404:	2201      	movs	r2, #1
 8009406:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009408:	682b      	ldr	r3, [r5, #0]
 800940a:	2b00      	cmp	r3, #0
 800940c:	d1de      	bne.n	80093cc <xTaskResumeAll+0x48>
				if( pxTCB != NULL )
 800940e:	b10c      	cbz	r4, 8009414 <xTaskResumeAll+0x90>
					prvResetNextTaskUnblockTime();
 8009410:	f7ff fdc6 	bl	8008fa0 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8009414:	4d13      	ldr	r5, [pc, #76]	@ (8009464 <xTaskResumeAll+0xe0>)
 8009416:	682c      	ldr	r4, [r5, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8009418:	b144      	cbz	r4, 800942c <xTaskResumeAll+0xa8>
								xYieldPending = pdTRUE;
 800941a:	4e11      	ldr	r6, [pc, #68]	@ (8009460 <xTaskResumeAll+0xdc>)
 800941c:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 800941e:	f7ff ff1b 	bl	8009258 <xTaskIncrementTick>
 8009422:	b100      	cbz	r0, 8009426 <xTaskResumeAll+0xa2>
								xYieldPending = pdTRUE;
 8009424:	6037      	str	r7, [r6, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8009426:	3c01      	subs	r4, #1
 8009428:	d1f9      	bne.n	800941e <xTaskResumeAll+0x9a>
						uxPendedTicks = 0;
 800942a:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 800942c:	4b0c      	ldr	r3, [pc, #48]	@ (8009460 <xTaskResumeAll+0xdc>)
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	2b00      	cmp	r3, #0
 8009432:	d0bc      	beq.n	80093ae <xTaskResumeAll+0x2a>
					taskYIELD_IF_USING_PREEMPTION();
 8009434:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8009438:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800943c:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8009440:	f3bf 8f4f 	dsb	sy
 8009444:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8009448:	2401      	movs	r4, #1
 800944a:	e7b1      	b.n	80093b0 <xTaskResumeAll+0x2c>
 800944c:	20002c54 	.word	0x20002c54
 8009450:	20002c78 	.word	0x20002c78
 8009454:	20002ca8 	.word	0x20002ca8
 8009458:	20002c70 	.word	0x20002c70
 800945c:	2000314c 	.word	0x2000314c
 8009460:	20002c64 	.word	0x20002c64
 8009464:	20002c68 	.word	0x20002c68
 8009468:	20002cec 	.word	0x20002cec

0800946c <vTaskDelay>:
	{
 800946c:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 800946e:	b950      	cbnz	r0, 8009486 <vTaskDelay+0x1a>
			portYIELD_WITHIN_API();
 8009470:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8009474:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009478:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800947c:	f3bf 8f4f 	dsb	sy
 8009480:	f3bf 8f6f 	isb	sy
	}
 8009484:	bd08      	pop	{r3, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 8009486:	4b0a      	ldr	r3, [pc, #40]	@ (80094b0 <vTaskDelay+0x44>)
 8009488:	6819      	ldr	r1, [r3, #0]
 800948a:	b141      	cbz	r1, 800949e <vTaskDelay+0x32>
 800948c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009490:	f383 8811 	msr	BASEPRI, r3
 8009494:	f3bf 8f6f 	isb	sy
 8009498:	f3bf 8f4f 	dsb	sy
 800949c:	e7fe      	b.n	800949c <vTaskDelay+0x30>
			vTaskSuspendAll();
 800949e:	f7ff fecd 	bl	800923c <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80094a2:	f7ff fd45 	bl	8008f30 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 80094a6:	f7ff ff6d 	bl	8009384 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 80094aa:	2800      	cmp	r0, #0
 80094ac:	d0e0      	beq.n	8009470 <vTaskDelay+0x4>
 80094ae:	e7e9      	b.n	8009484 <vTaskDelay+0x18>
 80094b0:	20002c54 	.word	0x20002c54

080094b4 <vTaskSwitchContext>:
{
 80094b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80094b6:	4b23      	ldr	r3, [pc, #140]	@ (8009544 <vTaskSwitchContext+0x90>)
 80094b8:	681a      	ldr	r2, [r3, #0]
 80094ba:	4b23      	ldr	r3, [pc, #140]	@ (8009548 <vTaskSwitchContext+0x94>)
 80094bc:	b112      	cbz	r2, 80094c4 <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 80094be:	2201      	movs	r2, #1
 80094c0:	601a      	str	r2, [r3, #0]
}
 80094c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		taskCHECK_FOR_STACK_OVERFLOW();
 80094c4:	4c21      	ldr	r4, [pc, #132]	@ (800954c <vTaskSwitchContext+0x98>)
		xYieldPending = pdFALSE;
 80094c6:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 80094c8:	6823      	ldr	r3, [r4, #0]
 80094ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80094cc:	681a      	ldr	r2, [r3, #0]
 80094ce:	f1b2 3fa5 	cmp.w	r2, #2779096485	@ 0xa5a5a5a5
 80094d2:	d10b      	bne.n	80094ec <vTaskSwitchContext+0x38>
 80094d4:	685a      	ldr	r2, [r3, #4]
 80094d6:	f1b2 3fa5 	cmp.w	r2, #2779096485	@ 0xa5a5a5a5
 80094da:	d107      	bne.n	80094ec <vTaskSwitchContext+0x38>
 80094dc:	689a      	ldr	r2, [r3, #8]
 80094de:	f1b2 3fa5 	cmp.w	r2, #2779096485	@ 0xa5a5a5a5
 80094e2:	d103      	bne.n	80094ec <vTaskSwitchContext+0x38>
 80094e4:	68db      	ldr	r3, [r3, #12]
 80094e6:	f1b3 3fa5 	cmp.w	r3, #2779096485	@ 0xa5a5a5a5
 80094ea:	d004      	beq.n	80094f6 <vTaskSwitchContext+0x42>
 80094ec:	6820      	ldr	r0, [r4, #0]
 80094ee:	6821      	ldr	r1, [r4, #0]
 80094f0:	3134      	adds	r1, #52	@ 0x34
 80094f2:	f7fa f911 	bl	8003718 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80094f6:	4e16      	ldr	r6, [pc, #88]	@ (8009550 <vTaskSwitchContext+0x9c>)
 80094f8:	4916      	ldr	r1, [pc, #88]	@ (8009554 <vTaskSwitchContext+0xa0>)
 80094fa:	6832      	ldr	r2, [r6, #0]
 80094fc:	2714      	movs	r7, #20
 80094fe:	fb07 f302 	mul.w	r3, r7, r2
 8009502:	18c8      	adds	r0, r1, r3
 8009504:	58cd      	ldr	r5, [r1, r3]
 8009506:	b185      	cbz	r5, 800952a <vTaskSwitchContext+0x76>
 8009508:	6845      	ldr	r5, [r0, #4]
 800950a:	3308      	adds	r3, #8
 800950c:	686d      	ldr	r5, [r5, #4]
 800950e:	6045      	str	r5, [r0, #4]
 8009510:	440b      	add	r3, r1
 8009512:	429d      	cmp	r5, r3
 8009514:	bf04      	itt	eq
 8009516:	686b      	ldreq	r3, [r5, #4]
 8009518:	6043      	streq	r3, [r0, #4]
 800951a:	2314      	movs	r3, #20
 800951c:	fb03 1102 	mla	r1, r3, r2, r1
 8009520:	684b      	ldr	r3, [r1, #4]
 8009522:	68db      	ldr	r3, [r3, #12]
 8009524:	6023      	str	r3, [r4, #0]
 8009526:	6032      	str	r2, [r6, #0]
}
 8009528:	e7cb      	b.n	80094c2 <vTaskSwitchContext+0xe>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800952a:	b942      	cbnz	r2, 800953e <vTaskSwitchContext+0x8a>
 800952c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009530:	f383 8811 	msr	BASEPRI, r3
 8009534:	f3bf 8f6f 	isb	sy
 8009538:	f3bf 8f4f 	dsb	sy
 800953c:	e7fe      	b.n	800953c <vTaskSwitchContext+0x88>
 800953e:	3a01      	subs	r2, #1
 8009540:	e7dd      	b.n	80094fe <vTaskSwitchContext+0x4a>
 8009542:	bf00      	nop
 8009544:	20002c54 	.word	0x20002c54
 8009548:	20002c64 	.word	0x20002c64
 800954c:	2000314c 	.word	0x2000314c
 8009550:	20002c70 	.word	0x20002c70
 8009554:	20002cec 	.word	0x20002cec

08009558 <vTaskPlaceOnEventList>:
{
 8009558:	b510      	push	{r4, lr}
 800955a:	460c      	mov	r4, r1
	configASSERT( pxEventList );
 800955c:	b940      	cbnz	r0, 8009570 <vTaskPlaceOnEventList+0x18>
 800955e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009562:	f383 8811 	msr	BASEPRI, r3
 8009566:	f3bf 8f6f 	isb	sy
 800956a:	f3bf 8f4f 	dsb	sy
 800956e:	e7fe      	b.n	800956e <vTaskPlaceOnEventList+0x16>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009570:	4b05      	ldr	r3, [pc, #20]	@ (8009588 <vTaskPlaceOnEventList+0x30>)
 8009572:	6819      	ldr	r1, [r3, #0]
 8009574:	3118      	adds	r1, #24
 8009576:	f7ff f894 	bl	80086a2 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800957a:	4620      	mov	r0, r4
 800957c:	2101      	movs	r1, #1
}
 800957e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009582:	f7ff bcd5 	b.w	8008f30 <prvAddCurrentTaskToDelayedList>
 8009586:	bf00      	nop
 8009588:	2000314c 	.word	0x2000314c

0800958c <vTaskPlaceOnEventListRestricted>:
	{
 800958c:	b538      	push	{r3, r4, r5, lr}
 800958e:	460d      	mov	r5, r1
 8009590:	4614      	mov	r4, r2
		configASSERT( pxEventList );
 8009592:	b940      	cbnz	r0, 80095a6 <vTaskPlaceOnEventListRestricted+0x1a>
 8009594:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009598:	f383 8811 	msr	BASEPRI, r3
 800959c:	f3bf 8f6f 	isb	sy
 80095a0:	f3bf 8f4f 	dsb	sy
 80095a4:	e7fe      	b.n	80095a4 <vTaskPlaceOnEventListRestricted+0x18>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80095a6:	4b07      	ldr	r3, [pc, #28]	@ (80095c4 <vTaskPlaceOnEventListRestricted+0x38>)
 80095a8:	6819      	ldr	r1, [r3, #0]
 80095aa:	3118      	adds	r1, #24
 80095ac:	f7ff f86e 	bl	800868c <vListInsertEnd>
			xTicksToWait = portMAX_DELAY;
 80095b0:	2c00      	cmp	r4, #0
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80095b2:	4621      	mov	r1, r4
 80095b4:	bf0c      	ite	eq
 80095b6:	4628      	moveq	r0, r5
 80095b8:	f04f 30ff 	movne.w	r0, #4294967295
	}
 80095bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80095c0:	f7ff bcb6 	b.w	8008f30 <prvAddCurrentTaskToDelayedList>
 80095c4:	2000314c 	.word	0x2000314c

080095c8 <xTaskRemoveFromEventList>:
{
 80095c8:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80095ca:	68c3      	ldr	r3, [r0, #12]
 80095cc:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 80095ce:	b944      	cbnz	r4, 80095e2 <xTaskRemoveFromEventList+0x1a>
 80095d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095d4:	f383 8811 	msr	BASEPRI, r3
 80095d8:	f3bf 8f6f 	isb	sy
 80095dc:	f3bf 8f4f 	dsb	sy
 80095e0:	e7fe      	b.n	80095e0 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80095e2:	f104 0518 	add.w	r5, r4, #24
 80095e6:	4628      	mov	r0, r5
 80095e8:	f7ff f872 	bl	80086d0 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80095ec:	4b10      	ldr	r3, [pc, #64]	@ (8009630 <xTaskRemoveFromEventList+0x68>)
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	b9db      	cbnz	r3, 800962a <xTaskRemoveFromEventList+0x62>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80095f2:	1d25      	adds	r5, r4, #4
 80095f4:	4628      	mov	r0, r5
 80095f6:	f7ff f86b 	bl	80086d0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80095fa:	4a0e      	ldr	r2, [pc, #56]	@ (8009634 <xTaskRemoveFromEventList+0x6c>)
 80095fc:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80095fe:	6811      	ldr	r1, [r2, #0]
 8009600:	428b      	cmp	r3, r1
 8009602:	bf88      	it	hi
 8009604:	6013      	strhi	r3, [r2, #0]
 8009606:	4a0c      	ldr	r2, [pc, #48]	@ (8009638 <xTaskRemoveFromEventList+0x70>)
 8009608:	2014      	movs	r0, #20
 800960a:	4629      	mov	r1, r5
 800960c:	fb00 2003 	mla	r0, r0, r3, r2
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009610:	f7ff f83c 	bl	800868c <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009614:	4b09      	ldr	r3, [pc, #36]	@ (800963c <xTaskRemoveFromEventList+0x74>)
 8009616:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800961c:	429a      	cmp	r2, r3
		xYieldPending = pdTRUE;
 800961e:	bf83      	ittte	hi
 8009620:	4b07      	ldrhi	r3, [pc, #28]	@ (8009640 <xTaskRemoveFromEventList+0x78>)
 8009622:	2001      	movhi	r0, #1
 8009624:	6018      	strhi	r0, [r3, #0]
		xReturn = pdFALSE;
 8009626:	2000      	movls	r0, #0
}
 8009628:	bd38      	pop	{r3, r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800962a:	4806      	ldr	r0, [pc, #24]	@ (8009644 <xTaskRemoveFromEventList+0x7c>)
 800962c:	4629      	mov	r1, r5
 800962e:	e7ef      	b.n	8009610 <xTaskRemoveFromEventList+0x48>
 8009630:	20002c54 	.word	0x20002c54
 8009634:	20002c70 	.word	0x20002c70
 8009638:	20002cec 	.word	0x20002cec
 800963c:	2000314c 	.word	0x2000314c
 8009640:	20002c64 	.word	0x20002c64
 8009644:	20002ca8 	.word	0x20002ca8

08009648 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009648:	4b03      	ldr	r3, [pc, #12]	@ (8009658 <vTaskInternalSetTimeOutState+0x10>)
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800964e:	4b03      	ldr	r3, [pc, #12]	@ (800965c <vTaskInternalSetTimeOutState+0x14>)
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	6043      	str	r3, [r0, #4]
}
 8009654:	4770      	bx	lr
 8009656:	bf00      	nop
 8009658:	20002c60 	.word	0x20002c60
 800965c:	20002c74 	.word	0x20002c74

08009660 <xTaskCheckForTimeOut>:
{
 8009660:	b570      	push	{r4, r5, r6, lr}
 8009662:	460c      	mov	r4, r1
	configASSERT( pxTimeOut );
 8009664:	4605      	mov	r5, r0
 8009666:	b940      	cbnz	r0, 800967a <xTaskCheckForTimeOut+0x1a>
 8009668:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800966c:	f383 8811 	msr	BASEPRI, r3
 8009670:	f3bf 8f6f 	isb	sy
 8009674:	f3bf 8f4f 	dsb	sy
 8009678:	e7fe      	b.n	8009678 <xTaskCheckForTimeOut+0x18>
	configASSERT( pxTicksToWait );
 800967a:	b941      	cbnz	r1, 800968e <xTaskCheckForTimeOut+0x2e>
 800967c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009680:	f383 8811 	msr	BASEPRI, r3
 8009684:	f3bf 8f6f 	isb	sy
 8009688:	f3bf 8f4f 	dsb	sy
 800968c:	e7fe      	b.n	800968c <xTaskCheckForTimeOut+0x2c>
	taskENTER_CRITICAL();
 800968e:	f000 fad1 	bl	8009c34 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 8009692:	4b0f      	ldr	r3, [pc, #60]	@ (80096d0 <xTaskCheckForTimeOut+0x70>)
 8009694:	6819      	ldr	r1, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 8009696:	6823      	ldr	r3, [r4, #0]
 8009698:	1c5a      	adds	r2, r3, #1
 800969a:	d010      	beq.n	80096be <xTaskCheckForTimeOut+0x5e>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800969c:	480d      	ldr	r0, [pc, #52]	@ (80096d4 <xTaskCheckForTimeOut+0x74>)
 800969e:	682e      	ldr	r6, [r5, #0]
 80096a0:	6800      	ldr	r0, [r0, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80096a2:	686a      	ldr	r2, [r5, #4]
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80096a4:	4286      	cmp	r6, r0
 80096a6:	d001      	beq.n	80096ac <xTaskCheckForTimeOut+0x4c>
 80096a8:	428a      	cmp	r2, r1
 80096aa:	d90f      	bls.n	80096cc <xTaskCheckForTimeOut+0x6c>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80096ac:	1a88      	subs	r0, r1, r2
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80096ae:	4283      	cmp	r3, r0
 80096b0:	d90a      	bls.n	80096c8 <xTaskCheckForTimeOut+0x68>
			*pxTicksToWait -= xElapsedTime;
 80096b2:	1a5b      	subs	r3, r3, r1
 80096b4:	4413      	add	r3, r2
 80096b6:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80096b8:	4628      	mov	r0, r5
 80096ba:	f7ff ffc5 	bl	8009648 <vTaskInternalSetTimeOutState>
				xReturn = pdFALSE;
 80096be:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 80096c0:	f000 fad8 	bl	8009c74 <vPortExitCritical>
}
 80096c4:	4620      	mov	r0, r4
 80096c6:	bd70      	pop	{r4, r5, r6, pc}
			*pxTicksToWait = 0;
 80096c8:	2300      	movs	r3, #0
 80096ca:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 80096cc:	2401      	movs	r4, #1
 80096ce:	e7f7      	b.n	80096c0 <xTaskCheckForTimeOut+0x60>
 80096d0:	20002c74 	.word	0x20002c74
 80096d4:	20002c60 	.word	0x20002c60

080096d8 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 80096d8:	4b01      	ldr	r3, [pc, #4]	@ (80096e0 <vTaskMissedYield+0x8>)
 80096da:	2201      	movs	r2, #1
 80096dc:	601a      	str	r2, [r3, #0]
}
 80096de:	4770      	bx	lr
 80096e0:	20002c64 	.word	0x20002c64

080096e4 <uxTaskGetStackHighWaterMark>:
		pxTCB = prvGetTCBFromHandle( xTask );
 80096e4:	b908      	cbnz	r0, 80096ea <uxTaskGetStackHighWaterMark+0x6>
 80096e6:	4b06      	ldr	r3, [pc, #24]	@ (8009700 <uxTaskGetStackHighWaterMark+0x1c>)
 80096e8:	6818      	ldr	r0, [r3, #0]
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 80096ea:	6b02      	ldr	r2, [r0, #48]	@ 0x30
	uint32_t ulCount = 0U;
 80096ec:	2000      	movs	r0, #0
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 80096ee:	5c13      	ldrb	r3, [r2, r0]
 80096f0:	2ba5      	cmp	r3, #165	@ 0xa5
 80096f2:	d002      	beq.n	80096fa <uxTaskGetStackHighWaterMark+0x16>
	}
 80096f4:	f3c0 008f 	ubfx	r0, r0, #2, #16
 80096f8:	4770      	bx	lr
			ulCount++;
 80096fa:	3001      	adds	r0, #1
 80096fc:	e7f7      	b.n	80096ee <uxTaskGetStackHighWaterMark+0xa>
 80096fe:	bf00      	nop
 8009700:	2000314c 	.word	0x2000314c

08009704 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8009704:	4b05      	ldr	r3, [pc, #20]	@ (800971c <xTaskGetSchedulerState+0x18>)
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	b133      	cbz	r3, 8009718 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800970a:	4b05      	ldr	r3, [pc, #20]	@ (8009720 <xTaskGetSchedulerState+0x1c>)
 800970c:	6818      	ldr	r0, [r3, #0]
 800970e:	fab0 f080 	clz	r0, r0
 8009712:	0940      	lsrs	r0, r0, #5
 8009714:	0040      	lsls	r0, r0, #1
 8009716:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009718:	2001      	movs	r0, #1
	}
 800971a:	4770      	bx	lr
 800971c:	20002c6c 	.word	0x20002c6c
 8009720:	20002c54 	.word	0x20002c54

08009724 <xTaskPriorityDisinherit>:
	{
 8009724:	b538      	push	{r3, r4, r5, lr}
		if( pxMutexHolder != NULL )
 8009726:	b908      	cbnz	r0, 800972c <xTaskPriorityDisinherit+0x8>
	BaseType_t xReturn = pdFALSE;
 8009728:	2000      	movs	r0, #0
	}
 800972a:	bd38      	pop	{r3, r4, r5, pc}
			configASSERT( pxTCB == pxCurrentTCB );
 800972c:	4b1b      	ldr	r3, [pc, #108]	@ (800979c <xTaskPriorityDisinherit+0x78>)
 800972e:	681c      	ldr	r4, [r3, #0]
 8009730:	4284      	cmp	r4, r0
 8009732:	d008      	beq.n	8009746 <xTaskPriorityDisinherit+0x22>
 8009734:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009738:	f383 8811 	msr	BASEPRI, r3
 800973c:	f3bf 8f6f 	isb	sy
 8009740:	f3bf 8f4f 	dsb	sy
 8009744:	e7fe      	b.n	8009744 <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
 8009746:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8009748:	b943      	cbnz	r3, 800975c <xTaskPriorityDisinherit+0x38>
 800974a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800974e:	f383 8811 	msr	BASEPRI, r3
 8009752:	f3bf 8f6f 	isb	sy
 8009756:	f3bf 8f4f 	dsb	sy
 800975a:	e7fe      	b.n	800975a <xTaskPriorityDisinherit+0x36>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800975c:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800975e:	6ce2      	ldr	r2, [r4, #76]	@ 0x4c
			( pxTCB->uxMutexesHeld )--;
 8009760:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009762:	4291      	cmp	r1, r2
			( pxTCB->uxMutexesHeld )--;
 8009764:	6523      	str	r3, [r4, #80]	@ 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009766:	d0df      	beq.n	8009728 <xTaskPriorityDisinherit+0x4>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009768:	2b00      	cmp	r3, #0
 800976a:	d1dd      	bne.n	8009728 <xTaskPriorityDisinherit+0x4>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800976c:	1d25      	adds	r5, r4, #4
 800976e:	4628      	mov	r0, r5
 8009770:	f7fe ffae 	bl	80086d0 <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009774:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8009776:	62e3      	str	r3, [r4, #44]	@ 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009778:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800977c:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 800977e:	4a08      	ldr	r2, [pc, #32]	@ (80097a0 <xTaskPriorityDisinherit+0x7c>)
 8009780:	6811      	ldr	r1, [r2, #0]
 8009782:	428b      	cmp	r3, r1
 8009784:	bf88      	it	hi
 8009786:	6013      	strhi	r3, [r2, #0]
 8009788:	4a06      	ldr	r2, [pc, #24]	@ (80097a4 <xTaskPriorityDisinherit+0x80>)
 800978a:	2014      	movs	r0, #20
 800978c:	fb00 2003 	mla	r0, r0, r3, r2
 8009790:	4629      	mov	r1, r5
 8009792:	f7fe ff7b 	bl	800868c <vListInsertEnd>
					xReturn = pdTRUE;
 8009796:	2001      	movs	r0, #1
		return xReturn;
 8009798:	e7c7      	b.n	800972a <xTaskPriorityDisinherit+0x6>
 800979a:	bf00      	nop
 800979c:	2000314c 	.word	0x2000314c
 80097a0:	20002c70 	.word	0x20002c70
 80097a4:	20002cec 	.word	0x20002cec

080097a8 <prvInsertTimerInActiveList>:
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );

	if( xNextExpiryTime <= xTimeNow )
 80097a8:	4291      	cmp	r1, r2
{
 80097aa:	b508      	push	{r3, lr}
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80097ac:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80097ae:	6100      	str	r0, [r0, #16]
	if( xNextExpiryTime <= xTimeNow )
 80097b0:	d80a      	bhi.n	80097c8 <prvInsertTimerInActiveList+0x20>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80097b2:	1ad2      	subs	r2, r2, r3
 80097b4:	6983      	ldr	r3, [r0, #24]
 80097b6:	429a      	cmp	r2, r3
 80097b8:	d20d      	bcs.n	80097d6 <prvInsertTimerInActiveList+0x2e>
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80097ba:	4b08      	ldr	r3, [pc, #32]	@ (80097dc <prvInsertTimerInActiveList+0x34>)
 80097bc:	1d01      	adds	r1, r0, #4
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80097be:	6818      	ldr	r0, [r3, #0]
 80097c0:	f7fe ff6f 	bl	80086a2 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 80097c4:	2000      	movs	r0, #0
		}
	}

	return xProcessTimerNow;
}
 80097c6:	bd08      	pop	{r3, pc}
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80097c8:	429a      	cmp	r2, r3
 80097ca:	d201      	bcs.n	80097d0 <prvInsertTimerInActiveList+0x28>
 80097cc:	4299      	cmp	r1, r3
 80097ce:	d202      	bcs.n	80097d6 <prvInsertTimerInActiveList+0x2e>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80097d0:	4b03      	ldr	r3, [pc, #12]	@ (80097e0 <prvInsertTimerInActiveList+0x38>)
 80097d2:	1d01      	adds	r1, r0, #4
 80097d4:	e7f3      	b.n	80097be <prvInsertTimerInActiveList+0x16>
			xProcessTimerNow = pdTRUE;
 80097d6:	2001      	movs	r0, #1
	return xProcessTimerNow;
 80097d8:	e7f5      	b.n	80097c6 <prvInsertTimerInActiveList+0x1e>
 80097da:	bf00      	nop
 80097dc:	2000324c 	.word	0x2000324c
 80097e0:	20003250 	.word	0x20003250

080097e4 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80097e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
 80097e6:	4c11      	ldr	r4, [pc, #68]	@ (800982c <prvCheckForValidListAndQueue+0x48>)
	taskENTER_CRITICAL();
 80097e8:	f000 fa24 	bl	8009c34 <vPortEnterCritical>
		if( xTimerQueue == NULL )
 80097ec:	6825      	ldr	r5, [r4, #0]
 80097ee:	b9bd      	cbnz	r5, 8009820 <prvCheckForValidListAndQueue+0x3c>
		{
			vListInitialise( &xActiveTimerList1 );
 80097f0:	4f0f      	ldr	r7, [pc, #60]	@ (8009830 <prvCheckForValidListAndQueue+0x4c>)
			vListInitialise( &xActiveTimerList2 );
 80097f2:	4e10      	ldr	r6, [pc, #64]	@ (8009834 <prvCheckForValidListAndQueue+0x50>)
			vListInitialise( &xActiveTimerList1 );
 80097f4:	4638      	mov	r0, r7
 80097f6:	f7fe ff3b 	bl	8008670 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80097fa:	4630      	mov	r0, r6
 80097fc:	f7fe ff38 	bl	8008670 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009800:	4b0d      	ldr	r3, [pc, #52]	@ (8009838 <prvCheckForValidListAndQueue+0x54>)
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009802:	4a0e      	ldr	r2, [pc, #56]	@ (800983c <prvCheckForValidListAndQueue+0x58>)
			pxCurrentTimerList = &xActiveTimerList1;
 8009804:	601f      	str	r7, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009806:	4b0e      	ldr	r3, [pc, #56]	@ (8009840 <prvCheckForValidListAndQueue+0x5c>)
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009808:	2110      	movs	r1, #16
			pxOverflowTimerList = &xActiveTimerList2;
 800980a:	601e      	str	r6, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800980c:	200a      	movs	r0, #10
 800980e:	4b0d      	ldr	r3, [pc, #52]	@ (8009844 <prvCheckForValidListAndQueue+0x60>)
 8009810:	9500      	str	r5, [sp, #0]
 8009812:	f7ff f838 	bl	8008886 <xQueueGenericCreateStatic>
 8009816:	6020      	str	r0, [r4, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009818:	b110      	cbz	r0, 8009820 <prvCheckForValidListAndQueue+0x3c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800981a:	490b      	ldr	r1, [pc, #44]	@ (8009848 <prvCheckForValidListAndQueue+0x64>)
 800981c:	f7ff fad2 	bl	8008dc4 <vQueueAddToRegistry>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
}
 8009820:	b003      	add	sp, #12
 8009822:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	taskEXIT_CRITICAL();
 8009826:	f000 ba25 	b.w	8009c74 <vPortExitCritical>
 800982a:	bf00      	nop
 800982c:	20003248 	.word	0x20003248
 8009830:	20003268 	.word	0x20003268
 8009834:	20003254 	.word	0x20003254
 8009838:	20003250 	.word	0x20003250
 800983c:	200031a0 	.word	0x200031a0
 8009840:	2000324c 	.word	0x2000324c
 8009844:	20003150 	.word	0x20003150
 8009848:	08013a0c 	.word	0x08013a0c

0800984c <xTimerCreateTimerTask>:
{
 800984c:	b510      	push	{r4, lr}
 800984e:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
 8009850:	f7ff ffc8 	bl	80097e4 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 8009854:	4b12      	ldr	r3, [pc, #72]	@ (80098a0 <xTimerCreateTimerTask+0x54>)
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	b1b3      	cbz	r3, 8009888 <xTimerCreateTimerTask+0x3c>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800985a:	2400      	movs	r4, #0
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800985c:	aa07      	add	r2, sp, #28
 800985e:	a906      	add	r1, sp, #24
 8009860:	a805      	add	r0, sp, #20
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009862:	e9cd 4405 	strd	r4, r4, [sp, #20]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009866:	f7fe fef7 	bl	8008658 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800986a:	9b05      	ldr	r3, [sp, #20]
 800986c:	9302      	str	r3, [sp, #8]
 800986e:	9b06      	ldr	r3, [sp, #24]
 8009870:	9301      	str	r3, [sp, #4]
 8009872:	2302      	movs	r3, #2
 8009874:	9300      	str	r3, [sp, #0]
 8009876:	9a07      	ldr	r2, [sp, #28]
 8009878:	490a      	ldr	r1, [pc, #40]	@ (80098a4 <xTimerCreateTimerTask+0x58>)
 800987a:	480b      	ldr	r0, [pc, #44]	@ (80098a8 <xTimerCreateTimerTask+0x5c>)
 800987c:	4623      	mov	r3, r4
 800987e:	f7ff fc32 	bl	80090e6 <xTaskCreateStatic>
 8009882:	4b0a      	ldr	r3, [pc, #40]	@ (80098ac <xTimerCreateTimerTask+0x60>)
 8009884:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 8009886:	b940      	cbnz	r0, 800989a <xTimerCreateTimerTask+0x4e>
 8009888:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800988c:	f383 8811 	msr	BASEPRI, r3
 8009890:	f3bf 8f6f 	isb	sy
 8009894:	f3bf 8f4f 	dsb	sy
	configASSERT( xReturn );
 8009898:	e7fe      	b.n	8009898 <xTimerCreateTimerTask+0x4c>
}
 800989a:	2001      	movs	r0, #1
 800989c:	b008      	add	sp, #32
 800989e:	bd10      	pop	{r4, pc}
 80098a0:	20003248 	.word	0x20003248
 80098a4:	08013a11 	.word	0x08013a11
 80098a8:	080099a9 	.word	0x080099a9
 80098ac:	20003244 	.word	0x20003244

080098b0 <xTimerGenericCommand>:
{
 80098b0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80098b2:	4616      	mov	r6, r2
	configASSERT( xTimer );
 80098b4:	4604      	mov	r4, r0
{
 80098b6:	461a      	mov	r2, r3
	configASSERT( xTimer );
 80098b8:	b940      	cbnz	r0, 80098cc <xTimerGenericCommand+0x1c>
 80098ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80098be:	f383 8811 	msr	BASEPRI, r3
 80098c2:	f3bf 8f6f 	isb	sy
 80098c6:	f3bf 8f4f 	dsb	sy
 80098ca:	e7fe      	b.n	80098ca <xTimerGenericCommand+0x1a>
	if( xTimerQueue != NULL )
 80098cc:	4d0d      	ldr	r5, [pc, #52]	@ (8009904 <xTimerGenericCommand+0x54>)
 80098ce:	6828      	ldr	r0, [r5, #0]
 80098d0:	b180      	cbz	r0, 80098f4 <xTimerGenericCommand+0x44>
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80098d2:	2905      	cmp	r1, #5
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80098d4:	e9cd 1600 	strd	r1, r6, [sp]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 80098d8:	9402      	str	r4, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80098da:	dc0d      	bgt.n	80098f8 <xTimerGenericCommand+0x48>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80098dc:	f7ff ff12 	bl	8009704 <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80098e0:	2300      	movs	r3, #0
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80098e2:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80098e4:	bf08      	it	eq
 80098e6:	9a08      	ldreq	r2, [sp, #32]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80098e8:	6828      	ldr	r0, [r5, #0]
 80098ea:	bf18      	it	ne
 80098ec:	461a      	movne	r2, r3
 80098ee:	4669      	mov	r1, sp
 80098f0:	f7ff f83d 	bl	800896e <xQueueGenericSend>
}
 80098f4:	b004      	add	sp, #16
 80098f6:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80098f8:	2300      	movs	r3, #0
 80098fa:	4669      	mov	r1, sp
 80098fc:	f7ff f91b 	bl	8008b36 <xQueueGenericSendFromISR>
 8009900:	e7f8      	b.n	80098f4 <xTimerGenericCommand+0x44>
 8009902:	bf00      	nop
 8009904:	20003248 	.word	0x20003248

08009908 <prvSampleTimeNow>:
{
 8009908:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	if( xTimeNow < xLastTime )
 800990c:	f8df 8094 	ldr.w	r8, [pc, #148]	@ 80099a4 <prvSampleTimeNow+0x9c>
{
 8009910:	4606      	mov	r6, r0
	xTimeNow = xTaskGetTickCount();
 8009912:	f7ff fc9b 	bl	800924c <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 8009916:	f8d8 3000 	ldr.w	r3, [r8]
 800991a:	4283      	cmp	r3, r0
	xTimeNow = xTaskGetTickCount();
 800991c:	4605      	mov	r5, r0
	if( xTimeNow < xLastTime )
 800991e:	d909      	bls.n	8009934 <prvSampleTimeNow+0x2c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009920:	4f1e      	ldr	r7, [pc, #120]	@ (800999c <prvSampleTimeNow+0x94>)
 8009922:	683b      	ldr	r3, [r7, #0]
 8009924:	681a      	ldr	r2, [r3, #0]
 8009926:	b96a      	cbnz	r2, 8009944 <prvSampleTimeNow+0x3c>
	pxCurrentTimerList = pxOverflowTimerList;
 8009928:	4a1d      	ldr	r2, [pc, #116]	@ (80099a0 <prvSampleTimeNow+0x98>)
 800992a:	6811      	ldr	r1, [r2, #0]
 800992c:	6039      	str	r1, [r7, #0]
	pxOverflowTimerList = pxTemp;
 800992e:	6013      	str	r3, [r2, #0]
		*pxTimerListsWereSwitched = pdTRUE;
 8009930:	2301      	movs	r3, #1
 8009932:	e000      	b.n	8009936 <prvSampleTimeNow+0x2e>
 8009934:	2300      	movs	r3, #0
}
 8009936:	4628      	mov	r0, r5
		*pxTimerListsWereSwitched = pdTRUE;
 8009938:	6033      	str	r3, [r6, #0]
	xLastTime = xTimeNow;
 800993a:	f8c8 5000 	str.w	r5, [r8]
}
 800993e:	b002      	add	sp, #8
 8009940:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009944:	68db      	ldr	r3, [r3, #12]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009946:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009948:	f8d3 9000 	ldr.w	r9, [r3]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800994c:	f104 0a04 	add.w	sl, r4, #4
 8009950:	4650      	mov	r0, sl
 8009952:	f7fe febd 	bl	80086d0 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009956:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8009958:	4620      	mov	r0, r4
 800995a:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800995c:	69e3      	ldr	r3, [r4, #28]
 800995e:	2b01      	cmp	r3, #1
 8009960:	d1df      	bne.n	8009922 <prvSampleTimeNow+0x1a>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009962:	69a3      	ldr	r3, [r4, #24]
 8009964:	444b      	add	r3, r9
			if( xReloadTime > xNextExpireTime )
 8009966:	4599      	cmp	r9, r3
 8009968:	d206      	bcs.n	8009978 <prvSampleTimeNow+0x70>
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800996a:	6838      	ldr	r0, [r7, #0]
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800996c:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800996e:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009970:	4651      	mov	r1, sl
 8009972:	f7fe fe96 	bl	80086a2 <vListInsert>
 8009976:	e7d4      	b.n	8009922 <prvSampleTimeNow+0x1a>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009978:	2300      	movs	r3, #0
 800997a:	9300      	str	r3, [sp, #0]
 800997c:	464a      	mov	r2, r9
 800997e:	4619      	mov	r1, r3
 8009980:	4620      	mov	r0, r4
 8009982:	f7ff ff95 	bl	80098b0 <xTimerGenericCommand>
				configASSERT( xResult );
 8009986:	2800      	cmp	r0, #0
 8009988:	d1cb      	bne.n	8009922 <prvSampleTimeNow+0x1a>
 800998a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800998e:	f383 8811 	msr	BASEPRI, r3
 8009992:	f3bf 8f6f 	isb	sy
 8009996:	f3bf 8f4f 	dsb	sy
 800999a:	e7fe      	b.n	800999a <prvSampleTimeNow+0x92>
 800999c:	20003250 	.word	0x20003250
 80099a0:	2000324c 	.word	0x2000324c
 80099a4:	20003240 	.word	0x20003240

080099a8 <prvTimerTask>:
{
 80099a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80099ac:	4e69      	ldr	r6, [pc, #420]	@ (8009b54 <prvTimerTask+0x1ac>)
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80099ae:	4f6a      	ldr	r7, [pc, #424]	@ (8009b58 <prvTimerTask+0x1b0>)
{
 80099b0:	b089      	sub	sp, #36	@ 0x24
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80099b2:	6833      	ldr	r3, [r6, #0]
 80099b4:	681d      	ldr	r5, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80099b6:	2d00      	cmp	r5, #0
 80099b8:	d033      	beq.n	8009a22 <prvTimerTask+0x7a>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80099ba:	68db      	ldr	r3, [r3, #12]
 80099bc:	f8d3 8000 	ldr.w	r8, [r3]
	vTaskSuspendAll();
 80099c0:	f7ff fc3c 	bl	800923c <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80099c4:	a804      	add	r0, sp, #16
 80099c6:	f7ff ff9f 	bl	8009908 <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
 80099ca:	9c04      	ldr	r4, [sp, #16]
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80099cc:	4681      	mov	r9, r0
		if( xTimerListsWereSwitched == pdFALSE )
 80099ce:	2c00      	cmp	r4, #0
 80099d0:	d175      	bne.n	8009abe <prvTimerTask+0x116>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80099d2:	2d00      	cmp	r5, #0
 80099d4:	d058      	beq.n	8009a88 <prvTimerTask+0xe0>
 80099d6:	4540      	cmp	r0, r8
 80099d8:	d35c      	bcc.n	8009a94 <prvTimerTask+0xec>
				( void ) xTaskResumeAll();
 80099da:	f7ff fcd3 	bl	8009384 <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80099de:	6833      	ldr	r3, [r6, #0]
 80099e0:	68db      	ldr	r3, [r3, #12]
 80099e2:	68dd      	ldr	r5, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80099e4:	1d28      	adds	r0, r5, #4
 80099e6:	f7fe fe73 	bl	80086d0 <uxListRemove>
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80099ea:	69eb      	ldr	r3, [r5, #28]
 80099ec:	2b01      	cmp	r3, #1
 80099ee:	d11a      	bne.n	8009a26 <prvTimerTask+0x7e>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80099f0:	69a9      	ldr	r1, [r5, #24]
 80099f2:	4643      	mov	r3, r8
 80099f4:	464a      	mov	r2, r9
 80099f6:	4441      	add	r1, r8
 80099f8:	4628      	mov	r0, r5
 80099fa:	f7ff fed5 	bl	80097a8 <prvInsertTimerInActiveList>
 80099fe:	b190      	cbz	r0, 8009a26 <prvTimerTask+0x7e>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009a00:	9400      	str	r4, [sp, #0]
 8009a02:	4623      	mov	r3, r4
 8009a04:	4642      	mov	r2, r8
 8009a06:	4621      	mov	r1, r4
 8009a08:	4628      	mov	r0, r5
 8009a0a:	f7ff ff51 	bl	80098b0 <xTimerGenericCommand>
			configASSERT( xResult );
 8009a0e:	b950      	cbnz	r0, 8009a26 <prvTimerTask+0x7e>
 8009a10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a14:	f383 8811 	msr	BASEPRI, r3
 8009a18:	f3bf 8f6f 	isb	sy
 8009a1c:	f3bf 8f4f 	dsb	sy
 8009a20:	e7fe      	b.n	8009a20 <prvTimerTask+0x78>
		xNextExpireTime = ( TickType_t ) 0U;
 8009a22:	46a8      	mov	r8, r5
 8009a24:	e7cc      	b.n	80099c0 <prvTimerTask+0x18>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009a26:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 8009a28:	4628      	mov	r0, r5
 8009a2a:	4798      	blx	r3
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009a2c:	6838      	ldr	r0, [r7, #0]
 8009a2e:	2200      	movs	r2, #0
 8009a30:	a904      	add	r1, sp, #16
 8009a32:	f7ff f8dc 	bl	8008bee <xQueueReceive>
 8009a36:	2800      	cmp	r0, #0
 8009a38:	d0bb      	beq.n	80099b2 <prvTimerTask+0xa>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009a3a:	9b04      	ldr	r3, [sp, #16]
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009a3c:	9806      	ldr	r0, [sp, #24]
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	db40      	blt.n	8009ac4 <prvTimerTask+0x11c>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009a42:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009a44:	6963      	ldr	r3, [r4, #20]
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d143      	bne.n	8009ad2 <prvTimerTask+0x12a>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009a4a:	a803      	add	r0, sp, #12
 8009a4c:	f7ff ff5c 	bl	8009908 <prvSampleTimeNow>
			switch( xMessage.xMessageID )
 8009a50:	9b04      	ldr	r3, [sp, #16]
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009a52:	4602      	mov	r2, r0
			switch( xMessage.xMessageID )
 8009a54:	2b09      	cmp	r3, #9
 8009a56:	d8e9      	bhi.n	8009a2c <prvTimerTask+0x84>
 8009a58:	a101      	add	r1, pc, #4	@ (adr r1, 8009a60 <prvTimerTask+0xb8>)
 8009a5a:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009a5e:	bf00      	nop
 8009a60:	08009adb 	.word	0x08009adb
 8009a64:	08009adb 	.word	0x08009adb
 8009a68:	08009adb 	.word	0x08009adb
 8009a6c:	08009a2d 	.word	0x08009a2d
 8009a70:	08009b1f 	.word	0x08009b1f
 8009a74:	08009b43 	.word	0x08009b43
 8009a78:	08009adb 	.word	0x08009adb
 8009a7c:	08009adb 	.word	0x08009adb
 8009a80:	08009a2d 	.word	0x08009a2d
 8009a84:	08009b1f 	.word	0x08009b1f
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009a88:	4b34      	ldr	r3, [pc, #208]	@ (8009b5c <prvTimerTask+0x1b4>)
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	681c      	ldr	r4, [r3, #0]
 8009a8e:	fab4 f484 	clz	r4, r4
 8009a92:	0964      	lsrs	r4, r4, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009a94:	6838      	ldr	r0, [r7, #0]
 8009a96:	4622      	mov	r2, r4
 8009a98:	eba8 0109 	sub.w	r1, r8, r9
 8009a9c:	f7ff f9a4 	bl	8008de8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009aa0:	f7ff fc70 	bl	8009384 <xTaskResumeAll>
 8009aa4:	2800      	cmp	r0, #0
 8009aa6:	d1c1      	bne.n	8009a2c <prvTimerTask+0x84>
					portYIELD_WITHIN_API();
 8009aa8:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8009aac:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009ab0:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8009ab4:	f3bf 8f4f 	dsb	sy
 8009ab8:	f3bf 8f6f 	isb	sy
 8009abc:	e7b6      	b.n	8009a2c <prvTimerTask+0x84>
			( void ) xTaskResumeAll();
 8009abe:	f7ff fc61 	bl	8009384 <xTaskResumeAll>
}
 8009ac2:	e7b3      	b.n	8009a2c <prvTimerTask+0x84>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009ac4:	9b05      	ldr	r3, [sp, #20]
 8009ac6:	9907      	ldr	r1, [sp, #28]
 8009ac8:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009aca:	9b04      	ldr	r3, [sp, #16]
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	dbad      	blt.n	8009a2c <prvTimerTask+0x84>
 8009ad0:	e7b7      	b.n	8009a42 <prvTimerTask+0x9a>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009ad2:	1d20      	adds	r0, r4, #4
 8009ad4:	f7fe fdfc 	bl	80086d0 <uxListRemove>
 8009ad8:	e7b7      	b.n	8009a4a <prvTimerTask+0xa2>
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009ada:	69a1      	ldr	r1, [r4, #24]
 8009adc:	9b05      	ldr	r3, [sp, #20]
 8009ade:	4620      	mov	r0, r4
 8009ae0:	4419      	add	r1, r3
 8009ae2:	f7ff fe61 	bl	80097a8 <prvInsertTimerInActiveList>
 8009ae6:	2800      	cmp	r0, #0
 8009ae8:	d0a0      	beq.n	8009a2c <prvTimerTask+0x84>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009aea:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8009aec:	4620      	mov	r0, r4
 8009aee:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8009af0:	69e3      	ldr	r3, [r4, #28]
 8009af2:	2b01      	cmp	r3, #1
 8009af4:	d19a      	bne.n	8009a2c <prvTimerTask+0x84>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009af6:	69a2      	ldr	r2, [r4, #24]
 8009af8:	9905      	ldr	r1, [sp, #20]
 8009afa:	2300      	movs	r3, #0
 8009afc:	440a      	add	r2, r1
 8009afe:	9300      	str	r3, [sp, #0]
 8009b00:	4619      	mov	r1, r3
 8009b02:	4620      	mov	r0, r4
 8009b04:	f7ff fed4 	bl	80098b0 <xTimerGenericCommand>
							configASSERT( xResult );
 8009b08:	2800      	cmp	r0, #0
 8009b0a:	d18f      	bne.n	8009a2c <prvTimerTask+0x84>
 8009b0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b10:	f383 8811 	msr	BASEPRI, r3
 8009b14:	f3bf 8f6f 	isb	sy
 8009b18:	f3bf 8f4f 	dsb	sy
 8009b1c:	e7fe      	b.n	8009b1c <prvTimerTask+0x174>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009b1e:	9905      	ldr	r1, [sp, #20]
 8009b20:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009b22:	b941      	cbnz	r1, 8009b36 <prvTimerTask+0x18e>
 8009b24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b28:	f383 8811 	msr	BASEPRI, r3
 8009b2c:	f3bf 8f6f 	isb	sy
 8009b30:	f3bf 8f4f 	dsb	sy
 8009b34:	e7fe      	b.n	8009b34 <prvTimerTask+0x18c>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009b36:	4603      	mov	r3, r0
 8009b38:	4401      	add	r1, r0
 8009b3a:	4620      	mov	r0, r4
 8009b3c:	f7ff fe34 	bl	80097a8 <prvInsertTimerInActiveList>
					break;
 8009b40:	e774      	b.n	8009a2c <prvTimerTask+0x84>
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8009b42:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	f47f af70 	bne.w	8009a2c <prvTimerTask+0x84>
							vPortFree( pxTimer );
 8009b4c:	4620      	mov	r0, r4
 8009b4e:	f000 fa69 	bl	800a024 <vPortFree>
 8009b52:	e76b      	b.n	8009a2c <prvTimerTask+0x84>
 8009b54:	20003250 	.word	0x20003250
 8009b58:	20003248 	.word	0x20003248
 8009b5c:	2000324c 	.word	0x2000324c

08009b60 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009b60:	4808      	ldr	r0, [pc, #32]	@ (8009b84 <prvPortStartFirstTask+0x24>)
 8009b62:	6800      	ldr	r0, [r0, #0]
 8009b64:	6800      	ldr	r0, [r0, #0]
 8009b66:	f380 8808 	msr	MSP, r0
 8009b6a:	f04f 0000 	mov.w	r0, #0
 8009b6e:	f380 8814 	msr	CONTROL, r0
 8009b72:	b662      	cpsie	i
 8009b74:	b661      	cpsie	f
 8009b76:	f3bf 8f4f 	dsb	sy
 8009b7a:	f3bf 8f6f 	isb	sy
 8009b7e:	df00      	svc	0
 8009b80:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009b82:	0000      	.short	0x0000
 8009b84:	e000ed08 	.word	0xe000ed08

08009b88 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009b88:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8009b98 <vPortEnableVFP+0x10>
 8009b8c:	6801      	ldr	r1, [r0, #0]
 8009b8e:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8009b92:	6001      	str	r1, [r0, #0]
 8009b94:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009b96:	0000      	.short	0x0000
 8009b98:	e000ed88 	.word	0xe000ed88

08009b9c <prvTaskExitError>:
{
 8009b9c:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 8009b9e:	2300      	movs	r3, #0
 8009ba0:	9301      	str	r3, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
 8009ba2:	4b0d      	ldr	r3, [pc, #52]	@ (8009bd8 <prvTaskExitError+0x3c>)
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	3301      	adds	r3, #1
 8009ba8:	d008      	beq.n	8009bbc <prvTaskExitError+0x20>
 8009baa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009bae:	f383 8811 	msr	BASEPRI, r3
 8009bb2:	f3bf 8f6f 	isb	sy
 8009bb6:	f3bf 8f4f 	dsb	sy
 8009bba:	e7fe      	b.n	8009bba <prvTaskExitError+0x1e>
 8009bbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009bc0:	f383 8811 	msr	BASEPRI, r3
 8009bc4:	f3bf 8f6f 	isb	sy
 8009bc8:	f3bf 8f4f 	dsb	sy
	while( ulDummy == 0 )
 8009bcc:	9b01      	ldr	r3, [sp, #4]
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d0fc      	beq.n	8009bcc <prvTaskExitError+0x30>
}
 8009bd2:	b002      	add	sp, #8
 8009bd4:	4770      	bx	lr
 8009bd6:	bf00      	nop
 8009bd8:	20000020 	.word	0x20000020

08009bdc <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009bdc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8009be0:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009be4:	4b07      	ldr	r3, [pc, #28]	@ (8009c04 <pxPortInitialiseStack+0x28>)
 8009be6:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009bea:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009bee:	f06f 0302 	mvn.w	r3, #2
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009bf2:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009bf6:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009bfa:	f840 3c24 	str.w	r3, [r0, #-36]
}
 8009bfe:	3844      	subs	r0, #68	@ 0x44
 8009c00:	4770      	bx	lr
 8009c02:	bf00      	nop
 8009c04:	08009b9d 	.word	0x08009b9d
	...

08009c10 <SVC_Handler>:
	__asm volatile (
 8009c10:	4b07      	ldr	r3, [pc, #28]	@ (8009c30 <pxCurrentTCBConst2>)
 8009c12:	6819      	ldr	r1, [r3, #0]
 8009c14:	6808      	ldr	r0, [r1, #0]
 8009c16:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c1a:	f380 8809 	msr	PSP, r0
 8009c1e:	f3bf 8f6f 	isb	sy
 8009c22:	f04f 0000 	mov.w	r0, #0
 8009c26:	f380 8811 	msr	BASEPRI, r0
 8009c2a:	4770      	bx	lr
 8009c2c:	f3af 8000 	nop.w

08009c30 <pxCurrentTCBConst2>:
 8009c30:	2000314c 	.word	0x2000314c

08009c34 <vPortEnterCritical>:
 8009c34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c38:	f383 8811 	msr	BASEPRI, r3
 8009c3c:	f3bf 8f6f 	isb	sy
 8009c40:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 8009c44:	4a0a      	ldr	r2, [pc, #40]	@ (8009c70 <vPortEnterCritical+0x3c>)
 8009c46:	6813      	ldr	r3, [r2, #0]
 8009c48:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 8009c4a:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 8009c4c:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 8009c4e:	d10e      	bne.n	8009c6e <vPortEnterCritical+0x3a>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009c50:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8009c54:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	@ 0xd04
 8009c58:	b2db      	uxtb	r3, r3
 8009c5a:	b143      	cbz	r3, 8009c6e <vPortEnterCritical+0x3a>
 8009c5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c60:	f383 8811 	msr	BASEPRI, r3
 8009c64:	f3bf 8f6f 	isb	sy
 8009c68:	f3bf 8f4f 	dsb	sy
 8009c6c:	e7fe      	b.n	8009c6c <vPortEnterCritical+0x38>
}
 8009c6e:	4770      	bx	lr
 8009c70:	20000020 	.word	0x20000020

08009c74 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8009c74:	4a08      	ldr	r2, [pc, #32]	@ (8009c98 <vPortExitCritical+0x24>)
 8009c76:	6813      	ldr	r3, [r2, #0]
 8009c78:	b943      	cbnz	r3, 8009c8c <vPortExitCritical+0x18>
 8009c7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c7e:	f383 8811 	msr	BASEPRI, r3
 8009c82:	f3bf 8f6f 	isb	sy
 8009c86:	f3bf 8f4f 	dsb	sy
 8009c8a:	e7fe      	b.n	8009c8a <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8009c8c:	3b01      	subs	r3, #1
 8009c8e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009c90:	b90b      	cbnz	r3, 8009c96 <vPortExitCritical+0x22>
	__asm volatile
 8009c92:	f383 8811 	msr	BASEPRI, r3
}
 8009c96:	4770      	bx	lr
 8009c98:	20000020 	.word	0x20000020
 8009c9c:	00000000 	.word	0x00000000

08009ca0 <PendSV_Handler>:
	__asm volatile
 8009ca0:	f3ef 8009 	mrs	r0, PSP
 8009ca4:	f3bf 8f6f 	isb	sy
 8009ca8:	4b15      	ldr	r3, [pc, #84]	@ (8009d00 <pxCurrentTCBConst>)
 8009caa:	681a      	ldr	r2, [r3, #0]
 8009cac:	f01e 0f10 	tst.w	lr, #16
 8009cb0:	bf08      	it	eq
 8009cb2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009cb6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009cba:	6010      	str	r0, [r2, #0]
 8009cbc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009cc0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8009cc4:	f380 8811 	msr	BASEPRI, r0
 8009cc8:	f3bf 8f4f 	dsb	sy
 8009ccc:	f3bf 8f6f 	isb	sy
 8009cd0:	f7ff fbf0 	bl	80094b4 <vTaskSwitchContext>
 8009cd4:	f04f 0000 	mov.w	r0, #0
 8009cd8:	f380 8811 	msr	BASEPRI, r0
 8009cdc:	bc09      	pop	{r0, r3}
 8009cde:	6819      	ldr	r1, [r3, #0]
 8009ce0:	6808      	ldr	r0, [r1, #0]
 8009ce2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ce6:	f01e 0f10 	tst.w	lr, #16
 8009cea:	bf08      	it	eq
 8009cec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009cf0:	f380 8809 	msr	PSP, r0
 8009cf4:	f3bf 8f6f 	isb	sy
 8009cf8:	4770      	bx	lr
 8009cfa:	bf00      	nop
 8009cfc:	f3af 8000 	nop.w

08009d00 <pxCurrentTCBConst>:
 8009d00:	2000314c 	.word	0x2000314c

08009d04 <SysTick_Handler>:
{
 8009d04:	b508      	push	{r3, lr}
	__asm volatile
 8009d06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d0a:	f383 8811 	msr	BASEPRI, r3
 8009d0e:	f3bf 8f6f 	isb	sy
 8009d12:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 8009d16:	f7ff fa9f 	bl	8009258 <xTaskIncrementTick>
 8009d1a:	b128      	cbz	r0, 8009d28 <SysTick_Handler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009d1c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8009d20:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009d24:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
	__asm volatile
 8009d28:	2300      	movs	r3, #0
 8009d2a:	f383 8811 	msr	BASEPRI, r3
}
 8009d2e:	bd08      	pop	{r3, pc}

08009d30 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009d30:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
 8009d34:	2300      	movs	r3, #0
 8009d36:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009d38:	6193      	str	r3, [r2, #24]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009d3a:	4b05      	ldr	r3, [pc, #20]	@ (8009d50 <vPortSetupTimerInterrupt+0x20>)
 8009d3c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	fbb3 f3f1 	udiv	r3, r3, r1
 8009d46:	3b01      	subs	r3, #1
 8009d48:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009d4a:	2307      	movs	r3, #7
 8009d4c:	6113      	str	r3, [r2, #16]
}
 8009d4e:	4770      	bx	lr
 8009d50:	20000014 	.word	0x20000014

08009d54 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009d54:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
{
 8009d58:	b537      	push	{r0, r1, r2, r4, r5, lr}
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009d5a:	f8d3 1d00 	ldr.w	r1, [r3, #3328]	@ 0xd00
 8009d5e:	4a38      	ldr	r2, [pc, #224]	@ (8009e40 <xPortStartScheduler+0xec>)
 8009d60:	4291      	cmp	r1, r2
 8009d62:	d108      	bne.n	8009d76 <xPortStartScheduler+0x22>
	__asm volatile
 8009d64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d68:	f383 8811 	msr	BASEPRI, r3
 8009d6c:	f3bf 8f6f 	isb	sy
 8009d70:	f3bf 8f4f 	dsb	sy
 8009d74:	e7fe      	b.n	8009d74 <xPortStartScheduler+0x20>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009d76:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 8009d7a:	4b32      	ldr	r3, [pc, #200]	@ (8009e44 <xPortStartScheduler+0xf0>)
 8009d7c:	429a      	cmp	r2, r3
 8009d7e:	d108      	bne.n	8009d92 <xPortStartScheduler+0x3e>
 8009d80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d84:	f383 8811 	msr	BASEPRI, r3
 8009d88:	f3bf 8f6f 	isb	sy
 8009d8c:	f3bf 8f4f 	dsb	sy
 8009d90:	e7fe      	b.n	8009d90 <xPortStartScheduler+0x3c>
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009d92:	4b2d      	ldr	r3, [pc, #180]	@ (8009e48 <xPortStartScheduler+0xf4>)
 8009d94:	781a      	ldrb	r2, [r3, #0]
 8009d96:	b2d2      	uxtb	r2, r2
 8009d98:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009d9a:	22ff      	movs	r2, #255	@ 0xff
 8009d9c:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009d9e:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009da0:	4a2a      	ldr	r2, [pc, #168]	@ (8009e4c <xPortStartScheduler+0xf8>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009da2:	b2db      	uxtb	r3, r3
 8009da4:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009da8:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8009dac:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8009db0:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009db2:	4a27      	ldr	r2, [pc, #156]	@ (8009e50 <xPortStartScheduler+0xfc>)
 8009db4:	2307      	movs	r3, #7
 8009db6:	6013      	str	r3, [r2, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009db8:	f89d 1003 	ldrb.w	r1, [sp, #3]
			ulMaxPRIGROUPValue--;
 8009dbc:	6813      	ldr	r3, [r2, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009dbe:	0609      	lsls	r1, r1, #24
 8009dc0:	d40a      	bmi.n	8009dd8 <xPortStartScheduler+0x84>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009dc2:	2b03      	cmp	r3, #3
 8009dc4:	d011      	beq.n	8009dea <xPortStartScheduler+0x96>
 8009dc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009dca:	f383 8811 	msr	BASEPRI, r3
 8009dce:	f3bf 8f6f 	isb	sy
 8009dd2:	f3bf 8f4f 	dsb	sy
 8009dd6:	e7fe      	b.n	8009dd6 <xPortStartScheduler+0x82>
			ulMaxPRIGROUPValue--;
 8009dd8:	3b01      	subs	r3, #1
 8009dda:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009ddc:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8009de0:	005b      	lsls	r3, r3, #1
 8009de2:	b2db      	uxtb	r3, r3
 8009de4:	f88d 3003 	strb.w	r3, [sp, #3]
 8009de8:	e7e6      	b.n	8009db8 <xPortStartScheduler+0x64>
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009dea:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8009dee:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009df0:	9b01      	ldr	r3, [sp, #4]
 8009df2:	4a15      	ldr	r2, [pc, #84]	@ (8009e48 <xPortStartScheduler+0xf4>)
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009df4:	f04f 24e0 	mov.w	r4, #3758153728	@ 0xe000e000
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009df8:	b2db      	uxtb	r3, r3
 8009dfa:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009dfc:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 8009e00:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8009e04:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009e08:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 8009e0c:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8009e10:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	vPortSetupTimerInterrupt();
 8009e14:	f7ff ff8c 	bl	8009d30 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8009e18:	4b0e      	ldr	r3, [pc, #56]	@ (8009e54 <xPortStartScheduler+0x100>)
 8009e1a:	2500      	movs	r5, #0
 8009e1c:	601d      	str	r5, [r3, #0]
	vPortEnableVFP();
 8009e1e:	f7ff feb3 	bl	8009b88 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009e22:	f8d4 3f34 	ldr.w	r3, [r4, #3892]	@ 0xf34
 8009e26:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8009e2a:	f8c4 3f34 	str.w	r3, [r4, #3892]	@ 0xf34
	prvPortStartFirstTask();
 8009e2e:	f7ff fe97 	bl	8009b60 <prvPortStartFirstTask>
	vTaskSwitchContext();
 8009e32:	f7ff fb3f 	bl	80094b4 <vTaskSwitchContext>
	prvTaskExitError();
 8009e36:	f7ff feb1 	bl	8009b9c <prvTaskExitError>
}
 8009e3a:	4628      	mov	r0, r5
 8009e3c:	b003      	add	sp, #12
 8009e3e:	bd30      	pop	{r4, r5, pc}
 8009e40:	410fc271 	.word	0x410fc271
 8009e44:	410fc270 	.word	0x410fc270
 8009e48:	e000e400 	.word	0xe000e400
 8009e4c:	20003280 	.word	0x20003280
 8009e50:	2000327c 	.word	0x2000327c
 8009e54:	20000020 	.word	0x20000020

08009e58 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009e58:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009e5c:	2b0f      	cmp	r3, #15
 8009e5e:	d90e      	bls.n	8009e7e <vPortValidateInterruptPriority+0x26>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009e60:	4a11      	ldr	r2, [pc, #68]	@ (8009ea8 <vPortValidateInterruptPriority+0x50>)
 8009e62:	5c9b      	ldrb	r3, [r3, r2]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009e64:	4a11      	ldr	r2, [pc, #68]	@ (8009eac <vPortValidateInterruptPriority+0x54>)
 8009e66:	7812      	ldrb	r2, [r2, #0]
 8009e68:	429a      	cmp	r2, r3
 8009e6a:	d908      	bls.n	8009e7e <vPortValidateInterruptPriority+0x26>
 8009e6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e70:	f383 8811 	msr	BASEPRI, r3
 8009e74:	f3bf 8f6f 	isb	sy
 8009e78:	f3bf 8f4f 	dsb	sy
 8009e7c:	e7fe      	b.n	8009e7c <vPortValidateInterruptPriority+0x24>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009e7e:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8009e82:	4a0b      	ldr	r2, [pc, #44]	@ (8009eb0 <vPortValidateInterruptPriority+0x58>)
 8009e84:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	@ 0xd0c
 8009e88:	6812      	ldr	r2, [r2, #0]
 8009e8a:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009e8e:	4293      	cmp	r3, r2
 8009e90:	d908      	bls.n	8009ea4 <vPortValidateInterruptPriority+0x4c>
 8009e92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e96:	f383 8811 	msr	BASEPRI, r3
 8009e9a:	f3bf 8f6f 	isb	sy
 8009e9e:	f3bf 8f4f 	dsb	sy
 8009ea2:	e7fe      	b.n	8009ea2 <vPortValidateInterruptPriority+0x4a>
	}
 8009ea4:	4770      	bx	lr
 8009ea6:	bf00      	nop
 8009ea8:	e000e3f0 	.word	0xe000e3f0
 8009eac:	20003280 	.word	0x20003280
 8009eb0:	2000327c 	.word	0x2000327c

08009eb4 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009eb4:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009eb6:	4b10      	ldr	r3, [pc, #64]	@ (8009ef8 <prvInsertBlockIntoFreeList+0x44>)
 8009eb8:	461a      	mov	r2, r3
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	4283      	cmp	r3, r0
 8009ebe:	d3fb      	bcc.n	8009eb8 <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009ec0:	6854      	ldr	r4, [r2, #4]
 8009ec2:	1911      	adds	r1, r2, r4
 8009ec4:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009ec6:	bf01      	itttt	eq
 8009ec8:	6841      	ldreq	r1, [r0, #4]
 8009eca:	4610      	moveq	r0, r2
 8009ecc:	1909      	addeq	r1, r1, r4
 8009ece:	6051      	streq	r1, [r2, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009ed0:	6844      	ldr	r4, [r0, #4]
 8009ed2:	1901      	adds	r1, r0, r4
 8009ed4:	428b      	cmp	r3, r1
 8009ed6:	d10c      	bne.n	8009ef2 <prvInsertBlockIntoFreeList+0x3e>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009ed8:	4908      	ldr	r1, [pc, #32]	@ (8009efc <prvInsertBlockIntoFreeList+0x48>)
 8009eda:	6809      	ldr	r1, [r1, #0]
 8009edc:	428b      	cmp	r3, r1
 8009ede:	d003      	beq.n	8009ee8 <prvInsertBlockIntoFreeList+0x34>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009ee0:	6859      	ldr	r1, [r3, #4]
 8009ee2:	4421      	add	r1, r4
 8009ee4:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009ee6:	6819      	ldr	r1, [r3, #0]
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009ee8:	6001      	str	r1, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009eea:	4290      	cmp	r0, r2
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009eec:	bf18      	it	ne
 8009eee:	6010      	strne	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009ef0:	bd10      	pop	{r4, pc}
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009ef2:	4619      	mov	r1, r3
 8009ef4:	e7f8      	b.n	8009ee8 <prvInsertBlockIntoFreeList+0x34>
 8009ef6:	bf00      	nop
 8009ef8:	20003294 	.word	0x20003294
 8009efc:	20003290 	.word	0x20003290

08009f00 <pvPortMalloc>:
{
 8009f00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f04:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8009f06:	f7ff f999 	bl	800923c <vTaskSuspendAll>
		if( pxEnd == NULL )
 8009f0a:	493f      	ldr	r1, [pc, #252]	@ (800a008 <pvPortMalloc+0x108>)
 8009f0c:	4d3f      	ldr	r5, [pc, #252]	@ (800a00c <pvPortMalloc+0x10c>)
 8009f0e:	680b      	ldr	r3, [r1, #0]
 8009f10:	b9fb      	cbnz	r3, 8009f52 <pvPortMalloc+0x52>
	uxAddress = ( size_t ) ucHeap;
 8009f12:	4a3f      	ldr	r2, [pc, #252]	@ (800a010 <pvPortMalloc+0x110>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009f14:	0756      	lsls	r6, r2, #29
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009f16:	bf1c      	itt	ne
 8009f18:	3207      	addne	r2, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009f1a:	4b3e      	ldrne	r3, [pc, #248]	@ (800a014 <pvPortMalloc+0x114>)
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009f1c:	4e3e      	ldr	r6, [pc, #248]	@ (800a018 <pvPortMalloc+0x118>)
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009f1e:	bf1a      	itte	ne
 8009f20:	f022 0207 	bicne.w	r2, r2, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009f24:	1a9b      	subne	r3, r3, r2
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009f26:	f246 5390 	movweq	r3, #26000	@ 0x6590
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009f2a:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 8009f2c:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009f2e:	f023 0307 	bic.w	r3, r3, #7
	xStart.xBlockSize = ( size_t ) 0;
 8009f32:	2000      	movs	r0, #0
 8009f34:	6070      	str	r0, [r6, #4]
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009f36:	6032      	str	r2, [r6, #0]
	pxEnd->pxNextFreeBlock = NULL;
 8009f38:	e9c3 0000 	strd	r0, r0, [r3]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009f3c:	1a98      	subs	r0, r3, r2
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009f3e:	e9c2 3000 	strd	r3, r0, [r2]
	pxEnd = ( void * ) uxAddress;
 8009f42:	600b      	str	r3, [r1, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009f44:	4b35      	ldr	r3, [pc, #212]	@ (800a01c <pvPortMalloc+0x11c>)
 8009f46:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009f48:	4b35      	ldr	r3, [pc, #212]	@ (800a020 <pvPortMalloc+0x120>)
 8009f4a:	6018      	str	r0, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009f4c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8009f50:	602b      	str	r3, [r5, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009f52:	682e      	ldr	r6, [r5, #0]
 8009f54:	4226      	tst	r6, r4
 8009f56:	d152      	bne.n	8009ffe <pvPortMalloc+0xfe>
			if( xWantedSize > 0 )
 8009f58:	2c00      	cmp	r4, #0
 8009f5a:	d043      	beq.n	8009fe4 <pvPortMalloc+0xe4>
				xWantedSize += xHeapStructSize;
 8009f5c:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009f60:	0760      	lsls	r0, r4, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009f62:	bf1c      	itt	ne
 8009f64:	f023 0307 	bicne.w	r3, r3, #7
 8009f68:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d047      	beq.n	8009ffe <pvPortMalloc+0xfe>
 8009f6e:	4f2c      	ldr	r7, [pc, #176]	@ (800a020 <pvPortMalloc+0x120>)
 8009f70:	683c      	ldr	r4, [r7, #0]
 8009f72:	429c      	cmp	r4, r3
 8009f74:	d343      	bcc.n	8009ffe <pvPortMalloc+0xfe>
				pxBlock = xStart.pxNextFreeBlock;
 8009f76:	4a28      	ldr	r2, [pc, #160]	@ (800a018 <pvPortMalloc+0x118>)
 8009f78:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009f7a:	6868      	ldr	r0, [r5, #4]
 8009f7c:	4298      	cmp	r0, r3
 8009f7e:	d204      	bcs.n	8009f8a <pvPortMalloc+0x8a>
 8009f80:	f8d5 c000 	ldr.w	ip, [r5]
 8009f84:	f1bc 0f00 	cmp.w	ip, #0
 8009f88:	d115      	bne.n	8009fb6 <pvPortMalloc+0xb6>
				if( pxBlock != pxEnd )
 8009f8a:	6809      	ldr	r1, [r1, #0]
 8009f8c:	42a9      	cmp	r1, r5
 8009f8e:	d036      	beq.n	8009ffe <pvPortMalloc+0xfe>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009f90:	6829      	ldr	r1, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009f92:	f8d2 8000 	ldr.w	r8, [r2]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009f96:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009f98:	1ac2      	subs	r2, r0, r3
 8009f9a:	2a10      	cmp	r2, #16
 8009f9c:	d912      	bls.n	8009fc4 <pvPortMalloc+0xc4>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009f9e:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009fa0:	0741      	lsls	r1, r0, #29
 8009fa2:	d00b      	beq.n	8009fbc <pvPortMalloc+0xbc>
 8009fa4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009fa8:	f383 8811 	msr	BASEPRI, r3
 8009fac:	f3bf 8f6f 	isb	sy
 8009fb0:	f3bf 8f4f 	dsb	sy
 8009fb4:	e7fe      	b.n	8009fb4 <pvPortMalloc+0xb4>
 8009fb6:	462a      	mov	r2, r5
 8009fb8:	4665      	mov	r5, ip
 8009fba:	e7de      	b.n	8009f7a <pvPortMalloc+0x7a>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009fbc:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009fbe:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009fc0:	f7ff ff78 	bl	8009eb4 <prvInsertBlockIntoFreeList>
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009fc4:	4915      	ldr	r1, [pc, #84]	@ (800a01c <pvPortMalloc+0x11c>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009fc6:	686a      	ldr	r2, [r5, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009fc8:	6808      	ldr	r0, [r1, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009fca:	1aa4      	subs	r4, r4, r2
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009fcc:	4284      	cmp	r4, r0
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009fce:	ea46 0602 	orr.w	r6, r6, r2
					pxBlock->pxNextFreeBlock = NULL;
 8009fd2:	f04f 0300 	mov.w	r3, #0
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009fd6:	603c      	str	r4, [r7, #0]
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009fd8:	bf38      	it	cc
 8009fda:	600c      	strcc	r4, [r1, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009fdc:	606e      	str	r6, [r5, #4]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009fde:	f108 0408 	add.w	r4, r8, #8
					pxBlock->pxNextFreeBlock = NULL;
 8009fe2:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
 8009fe4:	f7ff f9ce 	bl	8009384 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009fe8:	0763      	lsls	r3, r4, #29
 8009fea:	d00a      	beq.n	800a002 <pvPortMalloc+0x102>
 8009fec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ff0:	f383 8811 	msr	BASEPRI, r3
 8009ff4:	f3bf 8f6f 	isb	sy
 8009ff8:	f3bf 8f4f 	dsb	sy
 8009ffc:	e7fe      	b.n	8009ffc <pvPortMalloc+0xfc>
void *pvReturn = NULL;
 8009ffe:	2400      	movs	r4, #0
 800a000:	e7f0      	b.n	8009fe4 <pvPortMalloc+0xe4>
}
 800a002:	4620      	mov	r0, r4
 800a004:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a008:	20003290 	.word	0x20003290
 800a00c:	20003284 	.word	0x20003284
 800a010:	2000329c 	.word	0x2000329c
 800a014:	2000982c 	.word	0x2000982c
 800a018:	20003294 	.word	0x20003294
 800a01c:	20003288 	.word	0x20003288
 800a020:	2000328c 	.word	0x2000328c

0800a024 <vPortFree>:
{
 800a024:	b510      	push	{r4, lr}
	if( pv != NULL )
 800a026:	4604      	mov	r4, r0
 800a028:	b370      	cbz	r0, 800a088 <vPortFree+0x64>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a02a:	4a18      	ldr	r2, [pc, #96]	@ (800a08c <vPortFree+0x68>)
 800a02c:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800a030:	6812      	ldr	r2, [r2, #0]
 800a032:	4213      	tst	r3, r2
 800a034:	d108      	bne.n	800a048 <vPortFree+0x24>
 800a036:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a03a:	f383 8811 	msr	BASEPRI, r3
 800a03e:	f3bf 8f6f 	isb	sy
 800a042:	f3bf 8f4f 	dsb	sy
 800a046:	e7fe      	b.n	800a046 <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a048:	f850 1c08 	ldr.w	r1, [r0, #-8]
 800a04c:	b141      	cbz	r1, 800a060 <vPortFree+0x3c>
 800a04e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a052:	f383 8811 	msr	BASEPRI, r3
 800a056:	f3bf 8f6f 	isb	sy
 800a05a:	f3bf 8f4f 	dsb	sy
 800a05e:	e7fe      	b.n	800a05e <vPortFree+0x3a>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a060:	ea23 0302 	bic.w	r3, r3, r2
 800a064:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 800a068:	f7ff f8e8 	bl	800923c <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a06c:	4a08      	ldr	r2, [pc, #32]	@ (800a090 <vPortFree+0x6c>)
 800a06e:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800a072:	6811      	ldr	r1, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a074:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a078:	440b      	add	r3, r1
 800a07a:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a07c:	f7ff ff1a 	bl	8009eb4 <prvInsertBlockIntoFreeList>
}
 800a080:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 800a084:	f7ff b97e 	b.w	8009384 <xTaskResumeAll>
}
 800a088:	bd10      	pop	{r4, pc}
 800a08a:	bf00      	nop
 800a08c:	20003284 	.word	0x20003284
 800a090:	2000328c 	.word	0x2000328c

0800a094 <atof>:
 800a094:	2100      	movs	r1, #0
 800a096:	f000 becd 	b.w	800ae34 <strtod>

0800a09a <atoi>:
 800a09a:	220a      	movs	r2, #10
 800a09c:	2100      	movs	r1, #0
 800a09e:	f000 bf51 	b.w	800af44 <strtol>
	...

0800a0a4 <malloc>:
 800a0a4:	4b02      	ldr	r3, [pc, #8]	@ (800a0b0 <malloc+0xc>)
 800a0a6:	4601      	mov	r1, r0
 800a0a8:	6818      	ldr	r0, [r3, #0]
 800a0aa:	f000 b82d 	b.w	800a108 <_malloc_r>
 800a0ae:	bf00      	nop
 800a0b0:	200001a4 	.word	0x200001a4

0800a0b4 <free>:
 800a0b4:	4b02      	ldr	r3, [pc, #8]	@ (800a0c0 <free+0xc>)
 800a0b6:	4601      	mov	r1, r0
 800a0b8:	6818      	ldr	r0, [r3, #0]
 800a0ba:	f003 bc3d 	b.w	800d938 <_free_r>
 800a0be:	bf00      	nop
 800a0c0:	200001a4 	.word	0x200001a4

0800a0c4 <sbrk_aligned>:
 800a0c4:	b570      	push	{r4, r5, r6, lr}
 800a0c6:	4e0f      	ldr	r6, [pc, #60]	@ (800a104 <sbrk_aligned+0x40>)
 800a0c8:	460c      	mov	r4, r1
 800a0ca:	6831      	ldr	r1, [r6, #0]
 800a0cc:	4605      	mov	r5, r0
 800a0ce:	b911      	cbnz	r1, 800a0d6 <sbrk_aligned+0x12>
 800a0d0:	f002 fd6c 	bl	800cbac <_sbrk_r>
 800a0d4:	6030      	str	r0, [r6, #0]
 800a0d6:	4621      	mov	r1, r4
 800a0d8:	4628      	mov	r0, r5
 800a0da:	f002 fd67 	bl	800cbac <_sbrk_r>
 800a0de:	1c43      	adds	r3, r0, #1
 800a0e0:	d103      	bne.n	800a0ea <sbrk_aligned+0x26>
 800a0e2:	f04f 34ff 	mov.w	r4, #4294967295
 800a0e6:	4620      	mov	r0, r4
 800a0e8:	bd70      	pop	{r4, r5, r6, pc}
 800a0ea:	1cc4      	adds	r4, r0, #3
 800a0ec:	f024 0403 	bic.w	r4, r4, #3
 800a0f0:	42a0      	cmp	r0, r4
 800a0f2:	d0f8      	beq.n	800a0e6 <sbrk_aligned+0x22>
 800a0f4:	1a21      	subs	r1, r4, r0
 800a0f6:	4628      	mov	r0, r5
 800a0f8:	f002 fd58 	bl	800cbac <_sbrk_r>
 800a0fc:	3001      	adds	r0, #1
 800a0fe:	d1f2      	bne.n	800a0e6 <sbrk_aligned+0x22>
 800a100:	e7ef      	b.n	800a0e2 <sbrk_aligned+0x1e>
 800a102:	bf00      	nop
 800a104:	2000982c 	.word	0x2000982c

0800a108 <_malloc_r>:
 800a108:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a10c:	1ccd      	adds	r5, r1, #3
 800a10e:	f025 0503 	bic.w	r5, r5, #3
 800a112:	3508      	adds	r5, #8
 800a114:	2d0c      	cmp	r5, #12
 800a116:	bf38      	it	cc
 800a118:	250c      	movcc	r5, #12
 800a11a:	2d00      	cmp	r5, #0
 800a11c:	4606      	mov	r6, r0
 800a11e:	db01      	blt.n	800a124 <_malloc_r+0x1c>
 800a120:	42a9      	cmp	r1, r5
 800a122:	d904      	bls.n	800a12e <_malloc_r+0x26>
 800a124:	230c      	movs	r3, #12
 800a126:	6033      	str	r3, [r6, #0]
 800a128:	2000      	movs	r0, #0
 800a12a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a12e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a204 <_malloc_r+0xfc>
 800a132:	f000 f869 	bl	800a208 <__malloc_lock>
 800a136:	f8d8 3000 	ldr.w	r3, [r8]
 800a13a:	461c      	mov	r4, r3
 800a13c:	bb44      	cbnz	r4, 800a190 <_malloc_r+0x88>
 800a13e:	4629      	mov	r1, r5
 800a140:	4630      	mov	r0, r6
 800a142:	f7ff ffbf 	bl	800a0c4 <sbrk_aligned>
 800a146:	1c43      	adds	r3, r0, #1
 800a148:	4604      	mov	r4, r0
 800a14a:	d158      	bne.n	800a1fe <_malloc_r+0xf6>
 800a14c:	f8d8 4000 	ldr.w	r4, [r8]
 800a150:	4627      	mov	r7, r4
 800a152:	2f00      	cmp	r7, #0
 800a154:	d143      	bne.n	800a1de <_malloc_r+0xd6>
 800a156:	2c00      	cmp	r4, #0
 800a158:	d04b      	beq.n	800a1f2 <_malloc_r+0xea>
 800a15a:	6823      	ldr	r3, [r4, #0]
 800a15c:	4639      	mov	r1, r7
 800a15e:	4630      	mov	r0, r6
 800a160:	eb04 0903 	add.w	r9, r4, r3
 800a164:	f002 fd22 	bl	800cbac <_sbrk_r>
 800a168:	4581      	cmp	r9, r0
 800a16a:	d142      	bne.n	800a1f2 <_malloc_r+0xea>
 800a16c:	6821      	ldr	r1, [r4, #0]
 800a16e:	1a6d      	subs	r5, r5, r1
 800a170:	4629      	mov	r1, r5
 800a172:	4630      	mov	r0, r6
 800a174:	f7ff ffa6 	bl	800a0c4 <sbrk_aligned>
 800a178:	3001      	adds	r0, #1
 800a17a:	d03a      	beq.n	800a1f2 <_malloc_r+0xea>
 800a17c:	6823      	ldr	r3, [r4, #0]
 800a17e:	442b      	add	r3, r5
 800a180:	6023      	str	r3, [r4, #0]
 800a182:	f8d8 3000 	ldr.w	r3, [r8]
 800a186:	685a      	ldr	r2, [r3, #4]
 800a188:	bb62      	cbnz	r2, 800a1e4 <_malloc_r+0xdc>
 800a18a:	f8c8 7000 	str.w	r7, [r8]
 800a18e:	e00f      	b.n	800a1b0 <_malloc_r+0xa8>
 800a190:	6822      	ldr	r2, [r4, #0]
 800a192:	1b52      	subs	r2, r2, r5
 800a194:	d420      	bmi.n	800a1d8 <_malloc_r+0xd0>
 800a196:	2a0b      	cmp	r2, #11
 800a198:	d917      	bls.n	800a1ca <_malloc_r+0xc2>
 800a19a:	1961      	adds	r1, r4, r5
 800a19c:	42a3      	cmp	r3, r4
 800a19e:	6025      	str	r5, [r4, #0]
 800a1a0:	bf18      	it	ne
 800a1a2:	6059      	strne	r1, [r3, #4]
 800a1a4:	6863      	ldr	r3, [r4, #4]
 800a1a6:	bf08      	it	eq
 800a1a8:	f8c8 1000 	streq.w	r1, [r8]
 800a1ac:	5162      	str	r2, [r4, r5]
 800a1ae:	604b      	str	r3, [r1, #4]
 800a1b0:	4630      	mov	r0, r6
 800a1b2:	f000 f82f 	bl	800a214 <__malloc_unlock>
 800a1b6:	f104 000b 	add.w	r0, r4, #11
 800a1ba:	1d23      	adds	r3, r4, #4
 800a1bc:	f020 0007 	bic.w	r0, r0, #7
 800a1c0:	1ac2      	subs	r2, r0, r3
 800a1c2:	bf1c      	itt	ne
 800a1c4:	1a1b      	subne	r3, r3, r0
 800a1c6:	50a3      	strne	r3, [r4, r2]
 800a1c8:	e7af      	b.n	800a12a <_malloc_r+0x22>
 800a1ca:	6862      	ldr	r2, [r4, #4]
 800a1cc:	42a3      	cmp	r3, r4
 800a1ce:	bf0c      	ite	eq
 800a1d0:	f8c8 2000 	streq.w	r2, [r8]
 800a1d4:	605a      	strne	r2, [r3, #4]
 800a1d6:	e7eb      	b.n	800a1b0 <_malloc_r+0xa8>
 800a1d8:	4623      	mov	r3, r4
 800a1da:	6864      	ldr	r4, [r4, #4]
 800a1dc:	e7ae      	b.n	800a13c <_malloc_r+0x34>
 800a1de:	463c      	mov	r4, r7
 800a1e0:	687f      	ldr	r7, [r7, #4]
 800a1e2:	e7b6      	b.n	800a152 <_malloc_r+0x4a>
 800a1e4:	461a      	mov	r2, r3
 800a1e6:	685b      	ldr	r3, [r3, #4]
 800a1e8:	42a3      	cmp	r3, r4
 800a1ea:	d1fb      	bne.n	800a1e4 <_malloc_r+0xdc>
 800a1ec:	2300      	movs	r3, #0
 800a1ee:	6053      	str	r3, [r2, #4]
 800a1f0:	e7de      	b.n	800a1b0 <_malloc_r+0xa8>
 800a1f2:	230c      	movs	r3, #12
 800a1f4:	6033      	str	r3, [r6, #0]
 800a1f6:	4630      	mov	r0, r6
 800a1f8:	f000 f80c 	bl	800a214 <__malloc_unlock>
 800a1fc:	e794      	b.n	800a128 <_malloc_r+0x20>
 800a1fe:	6005      	str	r5, [r0, #0]
 800a200:	e7d6      	b.n	800a1b0 <_malloc_r+0xa8>
 800a202:	bf00      	nop
 800a204:	20009830 	.word	0x20009830

0800a208 <__malloc_lock>:
 800a208:	4801      	ldr	r0, [pc, #4]	@ (800a210 <__malloc_lock+0x8>)
 800a20a:	f7fb b838 	b.w	800527e <__retarget_lock_acquire_recursive>
 800a20e:	bf00      	nop
 800a210:	2000283c 	.word	0x2000283c

0800a214 <__malloc_unlock>:
 800a214:	4801      	ldr	r0, [pc, #4]	@ (800a21c <__malloc_unlock+0x8>)
 800a216:	f7fb b83e 	b.w	8005296 <__retarget_lock_release_recursive>
 800a21a:	bf00      	nop
 800a21c:	2000283c 	.word	0x2000283c

0800a220 <sulp>:
 800a220:	b570      	push	{r4, r5, r6, lr}
 800a222:	4604      	mov	r4, r0
 800a224:	460d      	mov	r5, r1
 800a226:	ec45 4b10 	vmov	d0, r4, r5
 800a22a:	4616      	mov	r6, r2
 800a22c:	f004 fad2 	bl	800e7d4 <__ulp>
 800a230:	ec51 0b10 	vmov	r0, r1, d0
 800a234:	b17e      	cbz	r6, 800a256 <sulp+0x36>
 800a236:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800a23a:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800a23e:	2b00      	cmp	r3, #0
 800a240:	dd09      	ble.n	800a256 <sulp+0x36>
 800a242:	051b      	lsls	r3, r3, #20
 800a244:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800a248:	2400      	movs	r4, #0
 800a24a:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800a24e:	4622      	mov	r2, r4
 800a250:	462b      	mov	r3, r5
 800a252:	f7f6 f9e1 	bl	8000618 <__aeabi_dmul>
 800a256:	ec41 0b10 	vmov	d0, r0, r1
 800a25a:	bd70      	pop	{r4, r5, r6, pc}
 800a25c:	0000      	movs	r0, r0
	...

0800a260 <_strtod_l>:
 800a260:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a264:	b09f      	sub	sp, #124	@ 0x7c
 800a266:	460c      	mov	r4, r1
 800a268:	9217      	str	r2, [sp, #92]	@ 0x5c
 800a26a:	2200      	movs	r2, #0
 800a26c:	921a      	str	r2, [sp, #104]	@ 0x68
 800a26e:	9005      	str	r0, [sp, #20]
 800a270:	f04f 0a00 	mov.w	sl, #0
 800a274:	f04f 0b00 	mov.w	fp, #0
 800a278:	460a      	mov	r2, r1
 800a27a:	9219      	str	r2, [sp, #100]	@ 0x64
 800a27c:	7811      	ldrb	r1, [r2, #0]
 800a27e:	292b      	cmp	r1, #43	@ 0x2b
 800a280:	d04a      	beq.n	800a318 <_strtod_l+0xb8>
 800a282:	d838      	bhi.n	800a2f6 <_strtod_l+0x96>
 800a284:	290d      	cmp	r1, #13
 800a286:	d832      	bhi.n	800a2ee <_strtod_l+0x8e>
 800a288:	2908      	cmp	r1, #8
 800a28a:	d832      	bhi.n	800a2f2 <_strtod_l+0x92>
 800a28c:	2900      	cmp	r1, #0
 800a28e:	d03b      	beq.n	800a308 <_strtod_l+0xa8>
 800a290:	2200      	movs	r2, #0
 800a292:	920b      	str	r2, [sp, #44]	@ 0x2c
 800a294:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800a296:	782a      	ldrb	r2, [r5, #0]
 800a298:	2a30      	cmp	r2, #48	@ 0x30
 800a29a:	f040 80b3 	bne.w	800a404 <_strtod_l+0x1a4>
 800a29e:	786a      	ldrb	r2, [r5, #1]
 800a2a0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800a2a4:	2a58      	cmp	r2, #88	@ 0x58
 800a2a6:	d16e      	bne.n	800a386 <_strtod_l+0x126>
 800a2a8:	9302      	str	r3, [sp, #8]
 800a2aa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a2ac:	9301      	str	r3, [sp, #4]
 800a2ae:	ab1a      	add	r3, sp, #104	@ 0x68
 800a2b0:	9300      	str	r3, [sp, #0]
 800a2b2:	4a8e      	ldr	r2, [pc, #568]	@ (800a4ec <_strtod_l+0x28c>)
 800a2b4:	9805      	ldr	r0, [sp, #20]
 800a2b6:	ab1b      	add	r3, sp, #108	@ 0x6c
 800a2b8:	a919      	add	r1, sp, #100	@ 0x64
 800a2ba:	f003 fbef 	bl	800da9c <__gethex>
 800a2be:	f010 060f 	ands.w	r6, r0, #15
 800a2c2:	4604      	mov	r4, r0
 800a2c4:	d005      	beq.n	800a2d2 <_strtod_l+0x72>
 800a2c6:	2e06      	cmp	r6, #6
 800a2c8:	d128      	bne.n	800a31c <_strtod_l+0xbc>
 800a2ca:	3501      	adds	r5, #1
 800a2cc:	2300      	movs	r3, #0
 800a2ce:	9519      	str	r5, [sp, #100]	@ 0x64
 800a2d0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a2d2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	f040 858e 	bne.w	800adf6 <_strtod_l+0xb96>
 800a2da:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a2dc:	b1cb      	cbz	r3, 800a312 <_strtod_l+0xb2>
 800a2de:	4652      	mov	r2, sl
 800a2e0:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800a2e4:	ec43 2b10 	vmov	d0, r2, r3
 800a2e8:	b01f      	add	sp, #124	@ 0x7c
 800a2ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2ee:	2920      	cmp	r1, #32
 800a2f0:	d1ce      	bne.n	800a290 <_strtod_l+0x30>
 800a2f2:	3201      	adds	r2, #1
 800a2f4:	e7c1      	b.n	800a27a <_strtod_l+0x1a>
 800a2f6:	292d      	cmp	r1, #45	@ 0x2d
 800a2f8:	d1ca      	bne.n	800a290 <_strtod_l+0x30>
 800a2fa:	2101      	movs	r1, #1
 800a2fc:	910b      	str	r1, [sp, #44]	@ 0x2c
 800a2fe:	1c51      	adds	r1, r2, #1
 800a300:	9119      	str	r1, [sp, #100]	@ 0x64
 800a302:	7852      	ldrb	r2, [r2, #1]
 800a304:	2a00      	cmp	r2, #0
 800a306:	d1c5      	bne.n	800a294 <_strtod_l+0x34>
 800a308:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800a30a:	9419      	str	r4, [sp, #100]	@ 0x64
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	f040 8570 	bne.w	800adf2 <_strtod_l+0xb92>
 800a312:	4652      	mov	r2, sl
 800a314:	465b      	mov	r3, fp
 800a316:	e7e5      	b.n	800a2e4 <_strtod_l+0x84>
 800a318:	2100      	movs	r1, #0
 800a31a:	e7ef      	b.n	800a2fc <_strtod_l+0x9c>
 800a31c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800a31e:	b13a      	cbz	r2, 800a330 <_strtod_l+0xd0>
 800a320:	2135      	movs	r1, #53	@ 0x35
 800a322:	a81c      	add	r0, sp, #112	@ 0x70
 800a324:	f004 fb50 	bl	800e9c8 <__copybits>
 800a328:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a32a:	9805      	ldr	r0, [sp, #20]
 800a32c:	f003 ff1e 	bl	800e16c <_Bfree>
 800a330:	3e01      	subs	r6, #1
 800a332:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800a334:	2e04      	cmp	r6, #4
 800a336:	d806      	bhi.n	800a346 <_strtod_l+0xe6>
 800a338:	e8df f006 	tbb	[pc, r6]
 800a33c:	201d0314 	.word	0x201d0314
 800a340:	14          	.byte	0x14
 800a341:	00          	.byte	0x00
 800a342:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800a346:	05e1      	lsls	r1, r4, #23
 800a348:	bf48      	it	mi
 800a34a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800a34e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a352:	0d1b      	lsrs	r3, r3, #20
 800a354:	051b      	lsls	r3, r3, #20
 800a356:	2b00      	cmp	r3, #0
 800a358:	d1bb      	bne.n	800a2d2 <_strtod_l+0x72>
 800a35a:	f002 fc49 	bl	800cbf0 <__errno>
 800a35e:	2322      	movs	r3, #34	@ 0x22
 800a360:	6003      	str	r3, [r0, #0]
 800a362:	e7b6      	b.n	800a2d2 <_strtod_l+0x72>
 800a364:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800a368:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800a36c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800a370:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800a374:	e7e7      	b.n	800a346 <_strtod_l+0xe6>
 800a376:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800a4f4 <_strtod_l+0x294>
 800a37a:	e7e4      	b.n	800a346 <_strtod_l+0xe6>
 800a37c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800a380:	f04f 3aff 	mov.w	sl, #4294967295
 800a384:	e7df      	b.n	800a346 <_strtod_l+0xe6>
 800a386:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a388:	1c5a      	adds	r2, r3, #1
 800a38a:	9219      	str	r2, [sp, #100]	@ 0x64
 800a38c:	785b      	ldrb	r3, [r3, #1]
 800a38e:	2b30      	cmp	r3, #48	@ 0x30
 800a390:	d0f9      	beq.n	800a386 <_strtod_l+0x126>
 800a392:	2b00      	cmp	r3, #0
 800a394:	d09d      	beq.n	800a2d2 <_strtod_l+0x72>
 800a396:	2301      	movs	r3, #1
 800a398:	9309      	str	r3, [sp, #36]	@ 0x24
 800a39a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a39c:	930c      	str	r3, [sp, #48]	@ 0x30
 800a39e:	2300      	movs	r3, #0
 800a3a0:	9308      	str	r3, [sp, #32]
 800a3a2:	930a      	str	r3, [sp, #40]	@ 0x28
 800a3a4:	461f      	mov	r7, r3
 800a3a6:	220a      	movs	r2, #10
 800a3a8:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800a3aa:	7805      	ldrb	r5, [r0, #0]
 800a3ac:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800a3b0:	b2d9      	uxtb	r1, r3
 800a3b2:	2909      	cmp	r1, #9
 800a3b4:	d928      	bls.n	800a408 <_strtod_l+0x1a8>
 800a3b6:	494e      	ldr	r1, [pc, #312]	@ (800a4f0 <_strtod_l+0x290>)
 800a3b8:	2201      	movs	r2, #1
 800a3ba:	f001 fe0c 	bl	800bfd6 <strncmp>
 800a3be:	2800      	cmp	r0, #0
 800a3c0:	d032      	beq.n	800a428 <_strtod_l+0x1c8>
 800a3c2:	2000      	movs	r0, #0
 800a3c4:	462a      	mov	r2, r5
 800a3c6:	4681      	mov	r9, r0
 800a3c8:	463d      	mov	r5, r7
 800a3ca:	4603      	mov	r3, r0
 800a3cc:	2a65      	cmp	r2, #101	@ 0x65
 800a3ce:	d001      	beq.n	800a3d4 <_strtod_l+0x174>
 800a3d0:	2a45      	cmp	r2, #69	@ 0x45
 800a3d2:	d114      	bne.n	800a3fe <_strtod_l+0x19e>
 800a3d4:	b91d      	cbnz	r5, 800a3de <_strtod_l+0x17e>
 800a3d6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a3d8:	4302      	orrs	r2, r0
 800a3da:	d095      	beq.n	800a308 <_strtod_l+0xa8>
 800a3dc:	2500      	movs	r5, #0
 800a3de:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800a3e0:	1c62      	adds	r2, r4, #1
 800a3e2:	9219      	str	r2, [sp, #100]	@ 0x64
 800a3e4:	7862      	ldrb	r2, [r4, #1]
 800a3e6:	2a2b      	cmp	r2, #43	@ 0x2b
 800a3e8:	d077      	beq.n	800a4da <_strtod_l+0x27a>
 800a3ea:	2a2d      	cmp	r2, #45	@ 0x2d
 800a3ec:	d07b      	beq.n	800a4e6 <_strtod_l+0x286>
 800a3ee:	f04f 0c00 	mov.w	ip, #0
 800a3f2:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800a3f6:	2909      	cmp	r1, #9
 800a3f8:	f240 8082 	bls.w	800a500 <_strtod_l+0x2a0>
 800a3fc:	9419      	str	r4, [sp, #100]	@ 0x64
 800a3fe:	f04f 0800 	mov.w	r8, #0
 800a402:	e0a2      	b.n	800a54a <_strtod_l+0x2ea>
 800a404:	2300      	movs	r3, #0
 800a406:	e7c7      	b.n	800a398 <_strtod_l+0x138>
 800a408:	2f08      	cmp	r7, #8
 800a40a:	bfd5      	itete	le
 800a40c:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800a40e:	9908      	ldrgt	r1, [sp, #32]
 800a410:	fb02 3301 	mlale	r3, r2, r1, r3
 800a414:	fb02 3301 	mlagt	r3, r2, r1, r3
 800a418:	f100 0001 	add.w	r0, r0, #1
 800a41c:	bfd4      	ite	le
 800a41e:	930a      	strle	r3, [sp, #40]	@ 0x28
 800a420:	9308      	strgt	r3, [sp, #32]
 800a422:	3701      	adds	r7, #1
 800a424:	9019      	str	r0, [sp, #100]	@ 0x64
 800a426:	e7bf      	b.n	800a3a8 <_strtod_l+0x148>
 800a428:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a42a:	1c5a      	adds	r2, r3, #1
 800a42c:	9219      	str	r2, [sp, #100]	@ 0x64
 800a42e:	785a      	ldrb	r2, [r3, #1]
 800a430:	b37f      	cbz	r7, 800a492 <_strtod_l+0x232>
 800a432:	4681      	mov	r9, r0
 800a434:	463d      	mov	r5, r7
 800a436:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800a43a:	2b09      	cmp	r3, #9
 800a43c:	d912      	bls.n	800a464 <_strtod_l+0x204>
 800a43e:	2301      	movs	r3, #1
 800a440:	e7c4      	b.n	800a3cc <_strtod_l+0x16c>
 800a442:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a444:	1c5a      	adds	r2, r3, #1
 800a446:	9219      	str	r2, [sp, #100]	@ 0x64
 800a448:	785a      	ldrb	r2, [r3, #1]
 800a44a:	3001      	adds	r0, #1
 800a44c:	2a30      	cmp	r2, #48	@ 0x30
 800a44e:	d0f8      	beq.n	800a442 <_strtod_l+0x1e2>
 800a450:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800a454:	2b08      	cmp	r3, #8
 800a456:	f200 84d3 	bhi.w	800ae00 <_strtod_l+0xba0>
 800a45a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a45c:	930c      	str	r3, [sp, #48]	@ 0x30
 800a45e:	4681      	mov	r9, r0
 800a460:	2000      	movs	r0, #0
 800a462:	4605      	mov	r5, r0
 800a464:	3a30      	subs	r2, #48	@ 0x30
 800a466:	f100 0301 	add.w	r3, r0, #1
 800a46a:	d02a      	beq.n	800a4c2 <_strtod_l+0x262>
 800a46c:	4499      	add	r9, r3
 800a46e:	eb00 0c05 	add.w	ip, r0, r5
 800a472:	462b      	mov	r3, r5
 800a474:	210a      	movs	r1, #10
 800a476:	4563      	cmp	r3, ip
 800a478:	d10d      	bne.n	800a496 <_strtod_l+0x236>
 800a47a:	1c69      	adds	r1, r5, #1
 800a47c:	4401      	add	r1, r0
 800a47e:	4428      	add	r0, r5
 800a480:	2808      	cmp	r0, #8
 800a482:	dc16      	bgt.n	800a4b2 <_strtod_l+0x252>
 800a484:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800a486:	230a      	movs	r3, #10
 800a488:	fb03 2300 	mla	r3, r3, r0, r2
 800a48c:	930a      	str	r3, [sp, #40]	@ 0x28
 800a48e:	2300      	movs	r3, #0
 800a490:	e018      	b.n	800a4c4 <_strtod_l+0x264>
 800a492:	4638      	mov	r0, r7
 800a494:	e7da      	b.n	800a44c <_strtod_l+0x1ec>
 800a496:	2b08      	cmp	r3, #8
 800a498:	f103 0301 	add.w	r3, r3, #1
 800a49c:	dc03      	bgt.n	800a4a6 <_strtod_l+0x246>
 800a49e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800a4a0:	434e      	muls	r6, r1
 800a4a2:	960a      	str	r6, [sp, #40]	@ 0x28
 800a4a4:	e7e7      	b.n	800a476 <_strtod_l+0x216>
 800a4a6:	2b10      	cmp	r3, #16
 800a4a8:	bfde      	ittt	le
 800a4aa:	9e08      	ldrle	r6, [sp, #32]
 800a4ac:	434e      	mulle	r6, r1
 800a4ae:	9608      	strle	r6, [sp, #32]
 800a4b0:	e7e1      	b.n	800a476 <_strtod_l+0x216>
 800a4b2:	280f      	cmp	r0, #15
 800a4b4:	dceb      	bgt.n	800a48e <_strtod_l+0x22e>
 800a4b6:	9808      	ldr	r0, [sp, #32]
 800a4b8:	230a      	movs	r3, #10
 800a4ba:	fb03 2300 	mla	r3, r3, r0, r2
 800a4be:	9308      	str	r3, [sp, #32]
 800a4c0:	e7e5      	b.n	800a48e <_strtod_l+0x22e>
 800a4c2:	4629      	mov	r1, r5
 800a4c4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a4c6:	1c50      	adds	r0, r2, #1
 800a4c8:	9019      	str	r0, [sp, #100]	@ 0x64
 800a4ca:	7852      	ldrb	r2, [r2, #1]
 800a4cc:	4618      	mov	r0, r3
 800a4ce:	460d      	mov	r5, r1
 800a4d0:	e7b1      	b.n	800a436 <_strtod_l+0x1d6>
 800a4d2:	f04f 0900 	mov.w	r9, #0
 800a4d6:	2301      	movs	r3, #1
 800a4d8:	e77d      	b.n	800a3d6 <_strtod_l+0x176>
 800a4da:	f04f 0c00 	mov.w	ip, #0
 800a4de:	1ca2      	adds	r2, r4, #2
 800a4e0:	9219      	str	r2, [sp, #100]	@ 0x64
 800a4e2:	78a2      	ldrb	r2, [r4, #2]
 800a4e4:	e785      	b.n	800a3f2 <_strtod_l+0x192>
 800a4e6:	f04f 0c01 	mov.w	ip, #1
 800a4ea:	e7f8      	b.n	800a4de <_strtod_l+0x27e>
 800a4ec:	08013a30 	.word	0x08013a30
 800a4f0:	08013a19 	.word	0x08013a19
 800a4f4:	7ff00000 	.word	0x7ff00000
 800a4f8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a4fa:	1c51      	adds	r1, r2, #1
 800a4fc:	9119      	str	r1, [sp, #100]	@ 0x64
 800a4fe:	7852      	ldrb	r2, [r2, #1]
 800a500:	2a30      	cmp	r2, #48	@ 0x30
 800a502:	d0f9      	beq.n	800a4f8 <_strtod_l+0x298>
 800a504:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800a508:	2908      	cmp	r1, #8
 800a50a:	f63f af78 	bhi.w	800a3fe <_strtod_l+0x19e>
 800a50e:	3a30      	subs	r2, #48	@ 0x30
 800a510:	920e      	str	r2, [sp, #56]	@ 0x38
 800a512:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a514:	920f      	str	r2, [sp, #60]	@ 0x3c
 800a516:	f04f 080a 	mov.w	r8, #10
 800a51a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a51c:	1c56      	adds	r6, r2, #1
 800a51e:	9619      	str	r6, [sp, #100]	@ 0x64
 800a520:	7852      	ldrb	r2, [r2, #1]
 800a522:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800a526:	f1be 0f09 	cmp.w	lr, #9
 800a52a:	d939      	bls.n	800a5a0 <_strtod_l+0x340>
 800a52c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800a52e:	1a76      	subs	r6, r6, r1
 800a530:	2e08      	cmp	r6, #8
 800a532:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800a536:	dc03      	bgt.n	800a540 <_strtod_l+0x2e0>
 800a538:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800a53a:	4588      	cmp	r8, r1
 800a53c:	bfa8      	it	ge
 800a53e:	4688      	movge	r8, r1
 800a540:	f1bc 0f00 	cmp.w	ip, #0
 800a544:	d001      	beq.n	800a54a <_strtod_l+0x2ea>
 800a546:	f1c8 0800 	rsb	r8, r8, #0
 800a54a:	2d00      	cmp	r5, #0
 800a54c:	d14e      	bne.n	800a5ec <_strtod_l+0x38c>
 800a54e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a550:	4308      	orrs	r0, r1
 800a552:	f47f aebe 	bne.w	800a2d2 <_strtod_l+0x72>
 800a556:	2b00      	cmp	r3, #0
 800a558:	f47f aed6 	bne.w	800a308 <_strtod_l+0xa8>
 800a55c:	2a69      	cmp	r2, #105	@ 0x69
 800a55e:	d028      	beq.n	800a5b2 <_strtod_l+0x352>
 800a560:	dc25      	bgt.n	800a5ae <_strtod_l+0x34e>
 800a562:	2a49      	cmp	r2, #73	@ 0x49
 800a564:	d025      	beq.n	800a5b2 <_strtod_l+0x352>
 800a566:	2a4e      	cmp	r2, #78	@ 0x4e
 800a568:	f47f aece 	bne.w	800a308 <_strtod_l+0xa8>
 800a56c:	499b      	ldr	r1, [pc, #620]	@ (800a7dc <_strtod_l+0x57c>)
 800a56e:	a819      	add	r0, sp, #100	@ 0x64
 800a570:	f003 fcb6 	bl	800dee0 <__match>
 800a574:	2800      	cmp	r0, #0
 800a576:	f43f aec7 	beq.w	800a308 <_strtod_l+0xa8>
 800a57a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a57c:	781b      	ldrb	r3, [r3, #0]
 800a57e:	2b28      	cmp	r3, #40	@ 0x28
 800a580:	d12e      	bne.n	800a5e0 <_strtod_l+0x380>
 800a582:	4997      	ldr	r1, [pc, #604]	@ (800a7e0 <_strtod_l+0x580>)
 800a584:	aa1c      	add	r2, sp, #112	@ 0x70
 800a586:	a819      	add	r0, sp, #100	@ 0x64
 800a588:	f003 fcbe 	bl	800df08 <__hexnan>
 800a58c:	2805      	cmp	r0, #5
 800a58e:	d127      	bne.n	800a5e0 <_strtod_l+0x380>
 800a590:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800a592:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800a596:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800a59a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800a59e:	e698      	b.n	800a2d2 <_strtod_l+0x72>
 800a5a0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800a5a2:	fb08 2101 	mla	r1, r8, r1, r2
 800a5a6:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800a5aa:	920e      	str	r2, [sp, #56]	@ 0x38
 800a5ac:	e7b5      	b.n	800a51a <_strtod_l+0x2ba>
 800a5ae:	2a6e      	cmp	r2, #110	@ 0x6e
 800a5b0:	e7da      	b.n	800a568 <_strtod_l+0x308>
 800a5b2:	498c      	ldr	r1, [pc, #560]	@ (800a7e4 <_strtod_l+0x584>)
 800a5b4:	a819      	add	r0, sp, #100	@ 0x64
 800a5b6:	f003 fc93 	bl	800dee0 <__match>
 800a5ba:	2800      	cmp	r0, #0
 800a5bc:	f43f aea4 	beq.w	800a308 <_strtod_l+0xa8>
 800a5c0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a5c2:	4989      	ldr	r1, [pc, #548]	@ (800a7e8 <_strtod_l+0x588>)
 800a5c4:	3b01      	subs	r3, #1
 800a5c6:	a819      	add	r0, sp, #100	@ 0x64
 800a5c8:	9319      	str	r3, [sp, #100]	@ 0x64
 800a5ca:	f003 fc89 	bl	800dee0 <__match>
 800a5ce:	b910      	cbnz	r0, 800a5d6 <_strtod_l+0x376>
 800a5d0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a5d2:	3301      	adds	r3, #1
 800a5d4:	9319      	str	r3, [sp, #100]	@ 0x64
 800a5d6:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800a7f8 <_strtod_l+0x598>
 800a5da:	f04f 0a00 	mov.w	sl, #0
 800a5de:	e678      	b.n	800a2d2 <_strtod_l+0x72>
 800a5e0:	4882      	ldr	r0, [pc, #520]	@ (800a7ec <_strtod_l+0x58c>)
 800a5e2:	f002 fb45 	bl	800cc70 <nan>
 800a5e6:	ec5b ab10 	vmov	sl, fp, d0
 800a5ea:	e672      	b.n	800a2d2 <_strtod_l+0x72>
 800a5ec:	eba8 0309 	sub.w	r3, r8, r9
 800a5f0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800a5f2:	9309      	str	r3, [sp, #36]	@ 0x24
 800a5f4:	2f00      	cmp	r7, #0
 800a5f6:	bf08      	it	eq
 800a5f8:	462f      	moveq	r7, r5
 800a5fa:	2d10      	cmp	r5, #16
 800a5fc:	462c      	mov	r4, r5
 800a5fe:	bfa8      	it	ge
 800a600:	2410      	movge	r4, #16
 800a602:	f7f5 ff8f 	bl	8000524 <__aeabi_ui2d>
 800a606:	2d09      	cmp	r5, #9
 800a608:	4682      	mov	sl, r0
 800a60a:	468b      	mov	fp, r1
 800a60c:	dc13      	bgt.n	800a636 <_strtod_l+0x3d6>
 800a60e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a610:	2b00      	cmp	r3, #0
 800a612:	f43f ae5e 	beq.w	800a2d2 <_strtod_l+0x72>
 800a616:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a618:	dd78      	ble.n	800a70c <_strtod_l+0x4ac>
 800a61a:	2b16      	cmp	r3, #22
 800a61c:	dc5f      	bgt.n	800a6de <_strtod_l+0x47e>
 800a61e:	4974      	ldr	r1, [pc, #464]	@ (800a7f0 <_strtod_l+0x590>)
 800a620:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a624:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a628:	4652      	mov	r2, sl
 800a62a:	465b      	mov	r3, fp
 800a62c:	f7f5 fff4 	bl	8000618 <__aeabi_dmul>
 800a630:	4682      	mov	sl, r0
 800a632:	468b      	mov	fp, r1
 800a634:	e64d      	b.n	800a2d2 <_strtod_l+0x72>
 800a636:	4b6e      	ldr	r3, [pc, #440]	@ (800a7f0 <_strtod_l+0x590>)
 800a638:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a63c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800a640:	f7f5 ffea 	bl	8000618 <__aeabi_dmul>
 800a644:	4682      	mov	sl, r0
 800a646:	9808      	ldr	r0, [sp, #32]
 800a648:	468b      	mov	fp, r1
 800a64a:	f7f5 ff6b 	bl	8000524 <__aeabi_ui2d>
 800a64e:	4602      	mov	r2, r0
 800a650:	460b      	mov	r3, r1
 800a652:	4650      	mov	r0, sl
 800a654:	4659      	mov	r1, fp
 800a656:	f7f5 fe29 	bl	80002ac <__adddf3>
 800a65a:	2d0f      	cmp	r5, #15
 800a65c:	4682      	mov	sl, r0
 800a65e:	468b      	mov	fp, r1
 800a660:	ddd5      	ble.n	800a60e <_strtod_l+0x3ae>
 800a662:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a664:	1b2c      	subs	r4, r5, r4
 800a666:	441c      	add	r4, r3
 800a668:	2c00      	cmp	r4, #0
 800a66a:	f340 8096 	ble.w	800a79a <_strtod_l+0x53a>
 800a66e:	f014 030f 	ands.w	r3, r4, #15
 800a672:	d00a      	beq.n	800a68a <_strtod_l+0x42a>
 800a674:	495e      	ldr	r1, [pc, #376]	@ (800a7f0 <_strtod_l+0x590>)
 800a676:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a67a:	4652      	mov	r2, sl
 800a67c:	465b      	mov	r3, fp
 800a67e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a682:	f7f5 ffc9 	bl	8000618 <__aeabi_dmul>
 800a686:	4682      	mov	sl, r0
 800a688:	468b      	mov	fp, r1
 800a68a:	f034 040f 	bics.w	r4, r4, #15
 800a68e:	d073      	beq.n	800a778 <_strtod_l+0x518>
 800a690:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800a694:	dd48      	ble.n	800a728 <_strtod_l+0x4c8>
 800a696:	2400      	movs	r4, #0
 800a698:	46a0      	mov	r8, r4
 800a69a:	940a      	str	r4, [sp, #40]	@ 0x28
 800a69c:	46a1      	mov	r9, r4
 800a69e:	9a05      	ldr	r2, [sp, #20]
 800a6a0:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800a7f8 <_strtod_l+0x598>
 800a6a4:	2322      	movs	r3, #34	@ 0x22
 800a6a6:	6013      	str	r3, [r2, #0]
 800a6a8:	f04f 0a00 	mov.w	sl, #0
 800a6ac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	f43f ae0f 	beq.w	800a2d2 <_strtod_l+0x72>
 800a6b4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a6b6:	9805      	ldr	r0, [sp, #20]
 800a6b8:	f003 fd58 	bl	800e16c <_Bfree>
 800a6bc:	9805      	ldr	r0, [sp, #20]
 800a6be:	4649      	mov	r1, r9
 800a6c0:	f003 fd54 	bl	800e16c <_Bfree>
 800a6c4:	9805      	ldr	r0, [sp, #20]
 800a6c6:	4641      	mov	r1, r8
 800a6c8:	f003 fd50 	bl	800e16c <_Bfree>
 800a6cc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a6ce:	9805      	ldr	r0, [sp, #20]
 800a6d0:	f003 fd4c 	bl	800e16c <_Bfree>
 800a6d4:	9805      	ldr	r0, [sp, #20]
 800a6d6:	4621      	mov	r1, r4
 800a6d8:	f003 fd48 	bl	800e16c <_Bfree>
 800a6dc:	e5f9      	b.n	800a2d2 <_strtod_l+0x72>
 800a6de:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a6e0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800a6e4:	4293      	cmp	r3, r2
 800a6e6:	dbbc      	blt.n	800a662 <_strtod_l+0x402>
 800a6e8:	4c41      	ldr	r4, [pc, #260]	@ (800a7f0 <_strtod_l+0x590>)
 800a6ea:	f1c5 050f 	rsb	r5, r5, #15
 800a6ee:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800a6f2:	4652      	mov	r2, sl
 800a6f4:	465b      	mov	r3, fp
 800a6f6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a6fa:	f7f5 ff8d 	bl	8000618 <__aeabi_dmul>
 800a6fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a700:	1b5d      	subs	r5, r3, r5
 800a702:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800a706:	e9d4 2300 	ldrd	r2, r3, [r4]
 800a70a:	e78f      	b.n	800a62c <_strtod_l+0x3cc>
 800a70c:	3316      	adds	r3, #22
 800a70e:	dba8      	blt.n	800a662 <_strtod_l+0x402>
 800a710:	4b37      	ldr	r3, [pc, #220]	@ (800a7f0 <_strtod_l+0x590>)
 800a712:	eba9 0808 	sub.w	r8, r9, r8
 800a716:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800a71a:	e9d8 2300 	ldrd	r2, r3, [r8]
 800a71e:	4650      	mov	r0, sl
 800a720:	4659      	mov	r1, fp
 800a722:	f7f6 f8a3 	bl	800086c <__aeabi_ddiv>
 800a726:	e783      	b.n	800a630 <_strtod_l+0x3d0>
 800a728:	4b32      	ldr	r3, [pc, #200]	@ (800a7f4 <_strtod_l+0x594>)
 800a72a:	9308      	str	r3, [sp, #32]
 800a72c:	2300      	movs	r3, #0
 800a72e:	1124      	asrs	r4, r4, #4
 800a730:	4650      	mov	r0, sl
 800a732:	4659      	mov	r1, fp
 800a734:	461e      	mov	r6, r3
 800a736:	2c01      	cmp	r4, #1
 800a738:	dc21      	bgt.n	800a77e <_strtod_l+0x51e>
 800a73a:	b10b      	cbz	r3, 800a740 <_strtod_l+0x4e0>
 800a73c:	4682      	mov	sl, r0
 800a73e:	468b      	mov	fp, r1
 800a740:	492c      	ldr	r1, [pc, #176]	@ (800a7f4 <_strtod_l+0x594>)
 800a742:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800a746:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800a74a:	4652      	mov	r2, sl
 800a74c:	465b      	mov	r3, fp
 800a74e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a752:	f7f5 ff61 	bl	8000618 <__aeabi_dmul>
 800a756:	4b28      	ldr	r3, [pc, #160]	@ (800a7f8 <_strtod_l+0x598>)
 800a758:	460a      	mov	r2, r1
 800a75a:	400b      	ands	r3, r1
 800a75c:	4927      	ldr	r1, [pc, #156]	@ (800a7fc <_strtod_l+0x59c>)
 800a75e:	428b      	cmp	r3, r1
 800a760:	4682      	mov	sl, r0
 800a762:	d898      	bhi.n	800a696 <_strtod_l+0x436>
 800a764:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800a768:	428b      	cmp	r3, r1
 800a76a:	bf86      	itte	hi
 800a76c:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800a800 <_strtod_l+0x5a0>
 800a770:	f04f 3aff 	movhi.w	sl, #4294967295
 800a774:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800a778:	2300      	movs	r3, #0
 800a77a:	9308      	str	r3, [sp, #32]
 800a77c:	e07a      	b.n	800a874 <_strtod_l+0x614>
 800a77e:	07e2      	lsls	r2, r4, #31
 800a780:	d505      	bpl.n	800a78e <_strtod_l+0x52e>
 800a782:	9b08      	ldr	r3, [sp, #32]
 800a784:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a788:	f7f5 ff46 	bl	8000618 <__aeabi_dmul>
 800a78c:	2301      	movs	r3, #1
 800a78e:	9a08      	ldr	r2, [sp, #32]
 800a790:	3208      	adds	r2, #8
 800a792:	3601      	adds	r6, #1
 800a794:	1064      	asrs	r4, r4, #1
 800a796:	9208      	str	r2, [sp, #32]
 800a798:	e7cd      	b.n	800a736 <_strtod_l+0x4d6>
 800a79a:	d0ed      	beq.n	800a778 <_strtod_l+0x518>
 800a79c:	4264      	negs	r4, r4
 800a79e:	f014 020f 	ands.w	r2, r4, #15
 800a7a2:	d00a      	beq.n	800a7ba <_strtod_l+0x55a>
 800a7a4:	4b12      	ldr	r3, [pc, #72]	@ (800a7f0 <_strtod_l+0x590>)
 800a7a6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a7aa:	4650      	mov	r0, sl
 800a7ac:	4659      	mov	r1, fp
 800a7ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7b2:	f7f6 f85b 	bl	800086c <__aeabi_ddiv>
 800a7b6:	4682      	mov	sl, r0
 800a7b8:	468b      	mov	fp, r1
 800a7ba:	1124      	asrs	r4, r4, #4
 800a7bc:	d0dc      	beq.n	800a778 <_strtod_l+0x518>
 800a7be:	2c1f      	cmp	r4, #31
 800a7c0:	dd20      	ble.n	800a804 <_strtod_l+0x5a4>
 800a7c2:	2400      	movs	r4, #0
 800a7c4:	46a0      	mov	r8, r4
 800a7c6:	940a      	str	r4, [sp, #40]	@ 0x28
 800a7c8:	46a1      	mov	r9, r4
 800a7ca:	9a05      	ldr	r2, [sp, #20]
 800a7cc:	2322      	movs	r3, #34	@ 0x22
 800a7ce:	f04f 0a00 	mov.w	sl, #0
 800a7d2:	f04f 0b00 	mov.w	fp, #0
 800a7d6:	6013      	str	r3, [r2, #0]
 800a7d8:	e768      	b.n	800a6ac <_strtod_l+0x44c>
 800a7da:	bf00      	nop
 800a7dc:	08013b7e 	.word	0x08013b7e
 800a7e0:	08013a1c 	.word	0x08013a1c
 800a7e4:	08013b76 	.word	0x08013b76
 800a7e8:	08013c5f 	.word	0x08013c5f
 800a7ec:	0801296b 	.word	0x0801296b
 800a7f0:	08013dd8 	.word	0x08013dd8
 800a7f4:	08013db0 	.word	0x08013db0
 800a7f8:	7ff00000 	.word	0x7ff00000
 800a7fc:	7ca00000 	.word	0x7ca00000
 800a800:	7fefffff 	.word	0x7fefffff
 800a804:	f014 0310 	ands.w	r3, r4, #16
 800a808:	bf18      	it	ne
 800a80a:	236a      	movne	r3, #106	@ 0x6a
 800a80c:	4ea9      	ldr	r6, [pc, #676]	@ (800aab4 <_strtod_l+0x854>)
 800a80e:	9308      	str	r3, [sp, #32]
 800a810:	4650      	mov	r0, sl
 800a812:	4659      	mov	r1, fp
 800a814:	2300      	movs	r3, #0
 800a816:	07e2      	lsls	r2, r4, #31
 800a818:	d504      	bpl.n	800a824 <_strtod_l+0x5c4>
 800a81a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a81e:	f7f5 fefb 	bl	8000618 <__aeabi_dmul>
 800a822:	2301      	movs	r3, #1
 800a824:	1064      	asrs	r4, r4, #1
 800a826:	f106 0608 	add.w	r6, r6, #8
 800a82a:	d1f4      	bne.n	800a816 <_strtod_l+0x5b6>
 800a82c:	b10b      	cbz	r3, 800a832 <_strtod_l+0x5d2>
 800a82e:	4682      	mov	sl, r0
 800a830:	468b      	mov	fp, r1
 800a832:	9b08      	ldr	r3, [sp, #32]
 800a834:	b1b3      	cbz	r3, 800a864 <_strtod_l+0x604>
 800a836:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800a83a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800a83e:	2b00      	cmp	r3, #0
 800a840:	4659      	mov	r1, fp
 800a842:	dd0f      	ble.n	800a864 <_strtod_l+0x604>
 800a844:	2b1f      	cmp	r3, #31
 800a846:	dd55      	ble.n	800a8f4 <_strtod_l+0x694>
 800a848:	2b34      	cmp	r3, #52	@ 0x34
 800a84a:	bfde      	ittt	le
 800a84c:	f04f 33ff 	movle.w	r3, #4294967295
 800a850:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800a854:	4093      	lslle	r3, r2
 800a856:	f04f 0a00 	mov.w	sl, #0
 800a85a:	bfcc      	ite	gt
 800a85c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800a860:	ea03 0b01 	andle.w	fp, r3, r1
 800a864:	2200      	movs	r2, #0
 800a866:	2300      	movs	r3, #0
 800a868:	4650      	mov	r0, sl
 800a86a:	4659      	mov	r1, fp
 800a86c:	f7f6 f93c 	bl	8000ae8 <__aeabi_dcmpeq>
 800a870:	2800      	cmp	r0, #0
 800a872:	d1a6      	bne.n	800a7c2 <_strtod_l+0x562>
 800a874:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a876:	9300      	str	r3, [sp, #0]
 800a878:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800a87a:	9805      	ldr	r0, [sp, #20]
 800a87c:	462b      	mov	r3, r5
 800a87e:	463a      	mov	r2, r7
 800a880:	f003 fcdc 	bl	800e23c <__s2b>
 800a884:	900a      	str	r0, [sp, #40]	@ 0x28
 800a886:	2800      	cmp	r0, #0
 800a888:	f43f af05 	beq.w	800a696 <_strtod_l+0x436>
 800a88c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a88e:	2a00      	cmp	r2, #0
 800a890:	eba9 0308 	sub.w	r3, r9, r8
 800a894:	bfa8      	it	ge
 800a896:	2300      	movge	r3, #0
 800a898:	9312      	str	r3, [sp, #72]	@ 0x48
 800a89a:	2400      	movs	r4, #0
 800a89c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800a8a0:	9316      	str	r3, [sp, #88]	@ 0x58
 800a8a2:	46a0      	mov	r8, r4
 800a8a4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a8a6:	9805      	ldr	r0, [sp, #20]
 800a8a8:	6859      	ldr	r1, [r3, #4]
 800a8aa:	f003 fc1f 	bl	800e0ec <_Balloc>
 800a8ae:	4681      	mov	r9, r0
 800a8b0:	2800      	cmp	r0, #0
 800a8b2:	f43f aef4 	beq.w	800a69e <_strtod_l+0x43e>
 800a8b6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a8b8:	691a      	ldr	r2, [r3, #16]
 800a8ba:	3202      	adds	r2, #2
 800a8bc:	f103 010c 	add.w	r1, r3, #12
 800a8c0:	0092      	lsls	r2, r2, #2
 800a8c2:	300c      	adds	r0, #12
 800a8c4:	f002 f9c6 	bl	800cc54 <memcpy>
 800a8c8:	ec4b ab10 	vmov	d0, sl, fp
 800a8cc:	9805      	ldr	r0, [sp, #20]
 800a8ce:	aa1c      	add	r2, sp, #112	@ 0x70
 800a8d0:	a91b      	add	r1, sp, #108	@ 0x6c
 800a8d2:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800a8d6:	f003 ffed 	bl	800e8b4 <__d2b>
 800a8da:	901a      	str	r0, [sp, #104]	@ 0x68
 800a8dc:	2800      	cmp	r0, #0
 800a8de:	f43f aede 	beq.w	800a69e <_strtod_l+0x43e>
 800a8e2:	9805      	ldr	r0, [sp, #20]
 800a8e4:	2101      	movs	r1, #1
 800a8e6:	f003 fd3f 	bl	800e368 <__i2b>
 800a8ea:	4680      	mov	r8, r0
 800a8ec:	b948      	cbnz	r0, 800a902 <_strtod_l+0x6a2>
 800a8ee:	f04f 0800 	mov.w	r8, #0
 800a8f2:	e6d4      	b.n	800a69e <_strtod_l+0x43e>
 800a8f4:	f04f 32ff 	mov.w	r2, #4294967295
 800a8f8:	fa02 f303 	lsl.w	r3, r2, r3
 800a8fc:	ea03 0a0a 	and.w	sl, r3, sl
 800a900:	e7b0      	b.n	800a864 <_strtod_l+0x604>
 800a902:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800a904:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800a906:	2d00      	cmp	r5, #0
 800a908:	bfab      	itete	ge
 800a90a:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800a90c:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800a90e:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800a910:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800a912:	bfac      	ite	ge
 800a914:	18ef      	addge	r7, r5, r3
 800a916:	1b5e      	sublt	r6, r3, r5
 800a918:	9b08      	ldr	r3, [sp, #32]
 800a91a:	1aed      	subs	r5, r5, r3
 800a91c:	4415      	add	r5, r2
 800a91e:	4b66      	ldr	r3, [pc, #408]	@ (800aab8 <_strtod_l+0x858>)
 800a920:	3d01      	subs	r5, #1
 800a922:	429d      	cmp	r5, r3
 800a924:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800a928:	da50      	bge.n	800a9cc <_strtod_l+0x76c>
 800a92a:	1b5b      	subs	r3, r3, r5
 800a92c:	2b1f      	cmp	r3, #31
 800a92e:	eba2 0203 	sub.w	r2, r2, r3
 800a932:	f04f 0101 	mov.w	r1, #1
 800a936:	dc3d      	bgt.n	800a9b4 <_strtod_l+0x754>
 800a938:	fa01 f303 	lsl.w	r3, r1, r3
 800a93c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a93e:	2300      	movs	r3, #0
 800a940:	9310      	str	r3, [sp, #64]	@ 0x40
 800a942:	18bd      	adds	r5, r7, r2
 800a944:	9b08      	ldr	r3, [sp, #32]
 800a946:	42af      	cmp	r7, r5
 800a948:	4416      	add	r6, r2
 800a94a:	441e      	add	r6, r3
 800a94c:	463b      	mov	r3, r7
 800a94e:	bfa8      	it	ge
 800a950:	462b      	movge	r3, r5
 800a952:	42b3      	cmp	r3, r6
 800a954:	bfa8      	it	ge
 800a956:	4633      	movge	r3, r6
 800a958:	2b00      	cmp	r3, #0
 800a95a:	bfc2      	ittt	gt
 800a95c:	1aed      	subgt	r5, r5, r3
 800a95e:	1af6      	subgt	r6, r6, r3
 800a960:	1aff      	subgt	r7, r7, r3
 800a962:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a964:	2b00      	cmp	r3, #0
 800a966:	dd16      	ble.n	800a996 <_strtod_l+0x736>
 800a968:	4641      	mov	r1, r8
 800a96a:	9805      	ldr	r0, [sp, #20]
 800a96c:	461a      	mov	r2, r3
 800a96e:	f003 fdbb 	bl	800e4e8 <__pow5mult>
 800a972:	4680      	mov	r8, r0
 800a974:	2800      	cmp	r0, #0
 800a976:	d0ba      	beq.n	800a8ee <_strtod_l+0x68e>
 800a978:	4601      	mov	r1, r0
 800a97a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800a97c:	9805      	ldr	r0, [sp, #20]
 800a97e:	f003 fd09 	bl	800e394 <__multiply>
 800a982:	900e      	str	r0, [sp, #56]	@ 0x38
 800a984:	2800      	cmp	r0, #0
 800a986:	f43f ae8a 	beq.w	800a69e <_strtod_l+0x43e>
 800a98a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a98c:	9805      	ldr	r0, [sp, #20]
 800a98e:	f003 fbed 	bl	800e16c <_Bfree>
 800a992:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a994:	931a      	str	r3, [sp, #104]	@ 0x68
 800a996:	2d00      	cmp	r5, #0
 800a998:	dc1d      	bgt.n	800a9d6 <_strtod_l+0x776>
 800a99a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	dd23      	ble.n	800a9e8 <_strtod_l+0x788>
 800a9a0:	4649      	mov	r1, r9
 800a9a2:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800a9a4:	9805      	ldr	r0, [sp, #20]
 800a9a6:	f003 fd9f 	bl	800e4e8 <__pow5mult>
 800a9aa:	4681      	mov	r9, r0
 800a9ac:	b9e0      	cbnz	r0, 800a9e8 <_strtod_l+0x788>
 800a9ae:	f04f 0900 	mov.w	r9, #0
 800a9b2:	e674      	b.n	800a69e <_strtod_l+0x43e>
 800a9b4:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800a9b8:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800a9bc:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800a9c0:	35e2      	adds	r5, #226	@ 0xe2
 800a9c2:	fa01 f305 	lsl.w	r3, r1, r5
 800a9c6:	9310      	str	r3, [sp, #64]	@ 0x40
 800a9c8:	9113      	str	r1, [sp, #76]	@ 0x4c
 800a9ca:	e7ba      	b.n	800a942 <_strtod_l+0x6e2>
 800a9cc:	2300      	movs	r3, #0
 800a9ce:	9310      	str	r3, [sp, #64]	@ 0x40
 800a9d0:	2301      	movs	r3, #1
 800a9d2:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a9d4:	e7b5      	b.n	800a942 <_strtod_l+0x6e2>
 800a9d6:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a9d8:	9805      	ldr	r0, [sp, #20]
 800a9da:	462a      	mov	r2, r5
 800a9dc:	f003 fdde 	bl	800e59c <__lshift>
 800a9e0:	901a      	str	r0, [sp, #104]	@ 0x68
 800a9e2:	2800      	cmp	r0, #0
 800a9e4:	d1d9      	bne.n	800a99a <_strtod_l+0x73a>
 800a9e6:	e65a      	b.n	800a69e <_strtod_l+0x43e>
 800a9e8:	2e00      	cmp	r6, #0
 800a9ea:	dd07      	ble.n	800a9fc <_strtod_l+0x79c>
 800a9ec:	4649      	mov	r1, r9
 800a9ee:	9805      	ldr	r0, [sp, #20]
 800a9f0:	4632      	mov	r2, r6
 800a9f2:	f003 fdd3 	bl	800e59c <__lshift>
 800a9f6:	4681      	mov	r9, r0
 800a9f8:	2800      	cmp	r0, #0
 800a9fa:	d0d8      	beq.n	800a9ae <_strtod_l+0x74e>
 800a9fc:	2f00      	cmp	r7, #0
 800a9fe:	dd08      	ble.n	800aa12 <_strtod_l+0x7b2>
 800aa00:	4641      	mov	r1, r8
 800aa02:	9805      	ldr	r0, [sp, #20]
 800aa04:	463a      	mov	r2, r7
 800aa06:	f003 fdc9 	bl	800e59c <__lshift>
 800aa0a:	4680      	mov	r8, r0
 800aa0c:	2800      	cmp	r0, #0
 800aa0e:	f43f ae46 	beq.w	800a69e <_strtod_l+0x43e>
 800aa12:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800aa14:	9805      	ldr	r0, [sp, #20]
 800aa16:	464a      	mov	r2, r9
 800aa18:	f003 fe48 	bl	800e6ac <__mdiff>
 800aa1c:	4604      	mov	r4, r0
 800aa1e:	2800      	cmp	r0, #0
 800aa20:	f43f ae3d 	beq.w	800a69e <_strtod_l+0x43e>
 800aa24:	68c3      	ldr	r3, [r0, #12]
 800aa26:	930f      	str	r3, [sp, #60]	@ 0x3c
 800aa28:	2300      	movs	r3, #0
 800aa2a:	60c3      	str	r3, [r0, #12]
 800aa2c:	4641      	mov	r1, r8
 800aa2e:	f003 fe21 	bl	800e674 <__mcmp>
 800aa32:	2800      	cmp	r0, #0
 800aa34:	da46      	bge.n	800aac4 <_strtod_l+0x864>
 800aa36:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800aa38:	ea53 030a 	orrs.w	r3, r3, sl
 800aa3c:	d16c      	bne.n	800ab18 <_strtod_l+0x8b8>
 800aa3e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	d168      	bne.n	800ab18 <_strtod_l+0x8b8>
 800aa46:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800aa4a:	0d1b      	lsrs	r3, r3, #20
 800aa4c:	051b      	lsls	r3, r3, #20
 800aa4e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800aa52:	d961      	bls.n	800ab18 <_strtod_l+0x8b8>
 800aa54:	6963      	ldr	r3, [r4, #20]
 800aa56:	b913      	cbnz	r3, 800aa5e <_strtod_l+0x7fe>
 800aa58:	6923      	ldr	r3, [r4, #16]
 800aa5a:	2b01      	cmp	r3, #1
 800aa5c:	dd5c      	ble.n	800ab18 <_strtod_l+0x8b8>
 800aa5e:	4621      	mov	r1, r4
 800aa60:	2201      	movs	r2, #1
 800aa62:	9805      	ldr	r0, [sp, #20]
 800aa64:	f003 fd9a 	bl	800e59c <__lshift>
 800aa68:	4641      	mov	r1, r8
 800aa6a:	4604      	mov	r4, r0
 800aa6c:	f003 fe02 	bl	800e674 <__mcmp>
 800aa70:	2800      	cmp	r0, #0
 800aa72:	dd51      	ble.n	800ab18 <_strtod_l+0x8b8>
 800aa74:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800aa78:	9a08      	ldr	r2, [sp, #32]
 800aa7a:	0d1b      	lsrs	r3, r3, #20
 800aa7c:	051b      	lsls	r3, r3, #20
 800aa7e:	2a00      	cmp	r2, #0
 800aa80:	d06b      	beq.n	800ab5a <_strtod_l+0x8fa>
 800aa82:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800aa86:	d868      	bhi.n	800ab5a <_strtod_l+0x8fa>
 800aa88:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800aa8c:	f67f ae9d 	bls.w	800a7ca <_strtod_l+0x56a>
 800aa90:	4b0a      	ldr	r3, [pc, #40]	@ (800aabc <_strtod_l+0x85c>)
 800aa92:	4650      	mov	r0, sl
 800aa94:	4659      	mov	r1, fp
 800aa96:	2200      	movs	r2, #0
 800aa98:	f7f5 fdbe 	bl	8000618 <__aeabi_dmul>
 800aa9c:	4b08      	ldr	r3, [pc, #32]	@ (800aac0 <_strtod_l+0x860>)
 800aa9e:	400b      	ands	r3, r1
 800aaa0:	4682      	mov	sl, r0
 800aaa2:	468b      	mov	fp, r1
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	f47f ae05 	bne.w	800a6b4 <_strtod_l+0x454>
 800aaaa:	9a05      	ldr	r2, [sp, #20]
 800aaac:	2322      	movs	r3, #34	@ 0x22
 800aaae:	6013      	str	r3, [r2, #0]
 800aab0:	e600      	b.n	800a6b4 <_strtod_l+0x454>
 800aab2:	bf00      	nop
 800aab4:	08013a48 	.word	0x08013a48
 800aab8:	fffffc02 	.word	0xfffffc02
 800aabc:	39500000 	.word	0x39500000
 800aac0:	7ff00000 	.word	0x7ff00000
 800aac4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800aac8:	d165      	bne.n	800ab96 <_strtod_l+0x936>
 800aaca:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800aacc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800aad0:	b35a      	cbz	r2, 800ab2a <_strtod_l+0x8ca>
 800aad2:	4a9f      	ldr	r2, [pc, #636]	@ (800ad50 <_strtod_l+0xaf0>)
 800aad4:	4293      	cmp	r3, r2
 800aad6:	d12b      	bne.n	800ab30 <_strtod_l+0x8d0>
 800aad8:	9b08      	ldr	r3, [sp, #32]
 800aada:	4651      	mov	r1, sl
 800aadc:	b303      	cbz	r3, 800ab20 <_strtod_l+0x8c0>
 800aade:	4b9d      	ldr	r3, [pc, #628]	@ (800ad54 <_strtod_l+0xaf4>)
 800aae0:	465a      	mov	r2, fp
 800aae2:	4013      	ands	r3, r2
 800aae4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800aae8:	f04f 32ff 	mov.w	r2, #4294967295
 800aaec:	d81b      	bhi.n	800ab26 <_strtod_l+0x8c6>
 800aaee:	0d1b      	lsrs	r3, r3, #20
 800aaf0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800aaf4:	fa02 f303 	lsl.w	r3, r2, r3
 800aaf8:	4299      	cmp	r1, r3
 800aafa:	d119      	bne.n	800ab30 <_strtod_l+0x8d0>
 800aafc:	4b96      	ldr	r3, [pc, #600]	@ (800ad58 <_strtod_l+0xaf8>)
 800aafe:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ab00:	429a      	cmp	r2, r3
 800ab02:	d102      	bne.n	800ab0a <_strtod_l+0x8aa>
 800ab04:	3101      	adds	r1, #1
 800ab06:	f43f adca 	beq.w	800a69e <_strtod_l+0x43e>
 800ab0a:	4b92      	ldr	r3, [pc, #584]	@ (800ad54 <_strtod_l+0xaf4>)
 800ab0c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ab0e:	401a      	ands	r2, r3
 800ab10:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800ab14:	f04f 0a00 	mov.w	sl, #0
 800ab18:	9b08      	ldr	r3, [sp, #32]
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	d1b8      	bne.n	800aa90 <_strtod_l+0x830>
 800ab1e:	e5c9      	b.n	800a6b4 <_strtod_l+0x454>
 800ab20:	f04f 33ff 	mov.w	r3, #4294967295
 800ab24:	e7e8      	b.n	800aaf8 <_strtod_l+0x898>
 800ab26:	4613      	mov	r3, r2
 800ab28:	e7e6      	b.n	800aaf8 <_strtod_l+0x898>
 800ab2a:	ea53 030a 	orrs.w	r3, r3, sl
 800ab2e:	d0a1      	beq.n	800aa74 <_strtod_l+0x814>
 800ab30:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800ab32:	b1db      	cbz	r3, 800ab6c <_strtod_l+0x90c>
 800ab34:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ab36:	4213      	tst	r3, r2
 800ab38:	d0ee      	beq.n	800ab18 <_strtod_l+0x8b8>
 800ab3a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ab3c:	9a08      	ldr	r2, [sp, #32]
 800ab3e:	4650      	mov	r0, sl
 800ab40:	4659      	mov	r1, fp
 800ab42:	b1bb      	cbz	r3, 800ab74 <_strtod_l+0x914>
 800ab44:	f7ff fb6c 	bl	800a220 <sulp>
 800ab48:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ab4c:	ec53 2b10 	vmov	r2, r3, d0
 800ab50:	f7f5 fbac 	bl	80002ac <__adddf3>
 800ab54:	4682      	mov	sl, r0
 800ab56:	468b      	mov	fp, r1
 800ab58:	e7de      	b.n	800ab18 <_strtod_l+0x8b8>
 800ab5a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800ab5e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800ab62:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800ab66:	f04f 3aff 	mov.w	sl, #4294967295
 800ab6a:	e7d5      	b.n	800ab18 <_strtod_l+0x8b8>
 800ab6c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800ab6e:	ea13 0f0a 	tst.w	r3, sl
 800ab72:	e7e1      	b.n	800ab38 <_strtod_l+0x8d8>
 800ab74:	f7ff fb54 	bl	800a220 <sulp>
 800ab78:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ab7c:	ec53 2b10 	vmov	r2, r3, d0
 800ab80:	f7f5 fb92 	bl	80002a8 <__aeabi_dsub>
 800ab84:	2200      	movs	r2, #0
 800ab86:	2300      	movs	r3, #0
 800ab88:	4682      	mov	sl, r0
 800ab8a:	468b      	mov	fp, r1
 800ab8c:	f7f5 ffac 	bl	8000ae8 <__aeabi_dcmpeq>
 800ab90:	2800      	cmp	r0, #0
 800ab92:	d0c1      	beq.n	800ab18 <_strtod_l+0x8b8>
 800ab94:	e619      	b.n	800a7ca <_strtod_l+0x56a>
 800ab96:	4641      	mov	r1, r8
 800ab98:	4620      	mov	r0, r4
 800ab9a:	f003 fee3 	bl	800e964 <__ratio>
 800ab9e:	ec57 6b10 	vmov	r6, r7, d0
 800aba2:	2200      	movs	r2, #0
 800aba4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800aba8:	4630      	mov	r0, r6
 800abaa:	4639      	mov	r1, r7
 800abac:	f7f5 ffb0 	bl	8000b10 <__aeabi_dcmple>
 800abb0:	2800      	cmp	r0, #0
 800abb2:	d06f      	beq.n	800ac94 <_strtod_l+0xa34>
 800abb4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	d17a      	bne.n	800acb0 <_strtod_l+0xa50>
 800abba:	f1ba 0f00 	cmp.w	sl, #0
 800abbe:	d158      	bne.n	800ac72 <_strtod_l+0xa12>
 800abc0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800abc2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	d15a      	bne.n	800ac80 <_strtod_l+0xa20>
 800abca:	4b64      	ldr	r3, [pc, #400]	@ (800ad5c <_strtod_l+0xafc>)
 800abcc:	2200      	movs	r2, #0
 800abce:	4630      	mov	r0, r6
 800abd0:	4639      	mov	r1, r7
 800abd2:	f7f5 ff93 	bl	8000afc <__aeabi_dcmplt>
 800abd6:	2800      	cmp	r0, #0
 800abd8:	d159      	bne.n	800ac8e <_strtod_l+0xa2e>
 800abda:	4630      	mov	r0, r6
 800abdc:	4639      	mov	r1, r7
 800abde:	4b60      	ldr	r3, [pc, #384]	@ (800ad60 <_strtod_l+0xb00>)
 800abe0:	2200      	movs	r2, #0
 800abe2:	f7f5 fd19 	bl	8000618 <__aeabi_dmul>
 800abe6:	4606      	mov	r6, r0
 800abe8:	460f      	mov	r7, r1
 800abea:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800abee:	9606      	str	r6, [sp, #24]
 800abf0:	9307      	str	r3, [sp, #28]
 800abf2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800abf6:	4d57      	ldr	r5, [pc, #348]	@ (800ad54 <_strtod_l+0xaf4>)
 800abf8:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800abfc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800abfe:	401d      	ands	r5, r3
 800ac00:	4b58      	ldr	r3, [pc, #352]	@ (800ad64 <_strtod_l+0xb04>)
 800ac02:	429d      	cmp	r5, r3
 800ac04:	f040 80b2 	bne.w	800ad6c <_strtod_l+0xb0c>
 800ac08:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ac0a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800ac0e:	ec4b ab10 	vmov	d0, sl, fp
 800ac12:	f003 fddf 	bl	800e7d4 <__ulp>
 800ac16:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ac1a:	ec51 0b10 	vmov	r0, r1, d0
 800ac1e:	f7f5 fcfb 	bl	8000618 <__aeabi_dmul>
 800ac22:	4652      	mov	r2, sl
 800ac24:	465b      	mov	r3, fp
 800ac26:	f7f5 fb41 	bl	80002ac <__adddf3>
 800ac2a:	460b      	mov	r3, r1
 800ac2c:	4949      	ldr	r1, [pc, #292]	@ (800ad54 <_strtod_l+0xaf4>)
 800ac2e:	4a4e      	ldr	r2, [pc, #312]	@ (800ad68 <_strtod_l+0xb08>)
 800ac30:	4019      	ands	r1, r3
 800ac32:	4291      	cmp	r1, r2
 800ac34:	4682      	mov	sl, r0
 800ac36:	d942      	bls.n	800acbe <_strtod_l+0xa5e>
 800ac38:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800ac3a:	4b47      	ldr	r3, [pc, #284]	@ (800ad58 <_strtod_l+0xaf8>)
 800ac3c:	429a      	cmp	r2, r3
 800ac3e:	d103      	bne.n	800ac48 <_strtod_l+0x9e8>
 800ac40:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ac42:	3301      	adds	r3, #1
 800ac44:	f43f ad2b 	beq.w	800a69e <_strtod_l+0x43e>
 800ac48:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800ad58 <_strtod_l+0xaf8>
 800ac4c:	f04f 3aff 	mov.w	sl, #4294967295
 800ac50:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ac52:	9805      	ldr	r0, [sp, #20]
 800ac54:	f003 fa8a 	bl	800e16c <_Bfree>
 800ac58:	9805      	ldr	r0, [sp, #20]
 800ac5a:	4649      	mov	r1, r9
 800ac5c:	f003 fa86 	bl	800e16c <_Bfree>
 800ac60:	9805      	ldr	r0, [sp, #20]
 800ac62:	4641      	mov	r1, r8
 800ac64:	f003 fa82 	bl	800e16c <_Bfree>
 800ac68:	9805      	ldr	r0, [sp, #20]
 800ac6a:	4621      	mov	r1, r4
 800ac6c:	f003 fa7e 	bl	800e16c <_Bfree>
 800ac70:	e618      	b.n	800a8a4 <_strtod_l+0x644>
 800ac72:	f1ba 0f01 	cmp.w	sl, #1
 800ac76:	d103      	bne.n	800ac80 <_strtod_l+0xa20>
 800ac78:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	f43f ada5 	beq.w	800a7ca <_strtod_l+0x56a>
 800ac80:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800ad30 <_strtod_l+0xad0>
 800ac84:	4f35      	ldr	r7, [pc, #212]	@ (800ad5c <_strtod_l+0xafc>)
 800ac86:	ed8d 7b06 	vstr	d7, [sp, #24]
 800ac8a:	2600      	movs	r6, #0
 800ac8c:	e7b1      	b.n	800abf2 <_strtod_l+0x992>
 800ac8e:	4f34      	ldr	r7, [pc, #208]	@ (800ad60 <_strtod_l+0xb00>)
 800ac90:	2600      	movs	r6, #0
 800ac92:	e7aa      	b.n	800abea <_strtod_l+0x98a>
 800ac94:	4b32      	ldr	r3, [pc, #200]	@ (800ad60 <_strtod_l+0xb00>)
 800ac96:	4630      	mov	r0, r6
 800ac98:	4639      	mov	r1, r7
 800ac9a:	2200      	movs	r2, #0
 800ac9c:	f7f5 fcbc 	bl	8000618 <__aeabi_dmul>
 800aca0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800aca2:	4606      	mov	r6, r0
 800aca4:	460f      	mov	r7, r1
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	d09f      	beq.n	800abea <_strtod_l+0x98a>
 800acaa:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800acae:	e7a0      	b.n	800abf2 <_strtod_l+0x992>
 800acb0:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800ad38 <_strtod_l+0xad8>
 800acb4:	ed8d 7b06 	vstr	d7, [sp, #24]
 800acb8:	ec57 6b17 	vmov	r6, r7, d7
 800acbc:	e799      	b.n	800abf2 <_strtod_l+0x992>
 800acbe:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800acc2:	9b08      	ldr	r3, [sp, #32]
 800acc4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800acc8:	2b00      	cmp	r3, #0
 800acca:	d1c1      	bne.n	800ac50 <_strtod_l+0x9f0>
 800accc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800acd0:	0d1b      	lsrs	r3, r3, #20
 800acd2:	051b      	lsls	r3, r3, #20
 800acd4:	429d      	cmp	r5, r3
 800acd6:	d1bb      	bne.n	800ac50 <_strtod_l+0x9f0>
 800acd8:	4630      	mov	r0, r6
 800acda:	4639      	mov	r1, r7
 800acdc:	f7f5 ffe4 	bl	8000ca8 <__aeabi_d2lz>
 800ace0:	f7f5 fc6c 	bl	80005bc <__aeabi_l2d>
 800ace4:	4602      	mov	r2, r0
 800ace6:	460b      	mov	r3, r1
 800ace8:	4630      	mov	r0, r6
 800acea:	4639      	mov	r1, r7
 800acec:	f7f5 fadc 	bl	80002a8 <__aeabi_dsub>
 800acf0:	460b      	mov	r3, r1
 800acf2:	4602      	mov	r2, r0
 800acf4:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800acf8:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800acfc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800acfe:	ea46 060a 	orr.w	r6, r6, sl
 800ad02:	431e      	orrs	r6, r3
 800ad04:	d06f      	beq.n	800ade6 <_strtod_l+0xb86>
 800ad06:	a30e      	add	r3, pc, #56	@ (adr r3, 800ad40 <_strtod_l+0xae0>)
 800ad08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad0c:	f7f5 fef6 	bl	8000afc <__aeabi_dcmplt>
 800ad10:	2800      	cmp	r0, #0
 800ad12:	f47f accf 	bne.w	800a6b4 <_strtod_l+0x454>
 800ad16:	a30c      	add	r3, pc, #48	@ (adr r3, 800ad48 <_strtod_l+0xae8>)
 800ad18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad1c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ad20:	f7f5 ff0a 	bl	8000b38 <__aeabi_dcmpgt>
 800ad24:	2800      	cmp	r0, #0
 800ad26:	d093      	beq.n	800ac50 <_strtod_l+0x9f0>
 800ad28:	e4c4      	b.n	800a6b4 <_strtod_l+0x454>
 800ad2a:	bf00      	nop
 800ad2c:	f3af 8000 	nop.w
 800ad30:	00000000 	.word	0x00000000
 800ad34:	bff00000 	.word	0xbff00000
 800ad38:	00000000 	.word	0x00000000
 800ad3c:	3ff00000 	.word	0x3ff00000
 800ad40:	94a03595 	.word	0x94a03595
 800ad44:	3fdfffff 	.word	0x3fdfffff
 800ad48:	35afe535 	.word	0x35afe535
 800ad4c:	3fe00000 	.word	0x3fe00000
 800ad50:	000fffff 	.word	0x000fffff
 800ad54:	7ff00000 	.word	0x7ff00000
 800ad58:	7fefffff 	.word	0x7fefffff
 800ad5c:	3ff00000 	.word	0x3ff00000
 800ad60:	3fe00000 	.word	0x3fe00000
 800ad64:	7fe00000 	.word	0x7fe00000
 800ad68:	7c9fffff 	.word	0x7c9fffff
 800ad6c:	9b08      	ldr	r3, [sp, #32]
 800ad6e:	b323      	cbz	r3, 800adba <_strtod_l+0xb5a>
 800ad70:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800ad74:	d821      	bhi.n	800adba <_strtod_l+0xb5a>
 800ad76:	a328      	add	r3, pc, #160	@ (adr r3, 800ae18 <_strtod_l+0xbb8>)
 800ad78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad7c:	4630      	mov	r0, r6
 800ad7e:	4639      	mov	r1, r7
 800ad80:	f7f5 fec6 	bl	8000b10 <__aeabi_dcmple>
 800ad84:	b1a0      	cbz	r0, 800adb0 <_strtod_l+0xb50>
 800ad86:	4639      	mov	r1, r7
 800ad88:	4630      	mov	r0, r6
 800ad8a:	f7f5 ff1d 	bl	8000bc8 <__aeabi_d2uiz>
 800ad8e:	2801      	cmp	r0, #1
 800ad90:	bf38      	it	cc
 800ad92:	2001      	movcc	r0, #1
 800ad94:	f7f5 fbc6 	bl	8000524 <__aeabi_ui2d>
 800ad98:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ad9a:	4606      	mov	r6, r0
 800ad9c:	460f      	mov	r7, r1
 800ad9e:	b9fb      	cbnz	r3, 800ade0 <_strtod_l+0xb80>
 800ada0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800ada4:	9014      	str	r0, [sp, #80]	@ 0x50
 800ada6:	9315      	str	r3, [sp, #84]	@ 0x54
 800ada8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800adac:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800adb0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800adb2:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800adb6:	1b5b      	subs	r3, r3, r5
 800adb8:	9311      	str	r3, [sp, #68]	@ 0x44
 800adba:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800adbe:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800adc2:	f003 fd07 	bl	800e7d4 <__ulp>
 800adc6:	4650      	mov	r0, sl
 800adc8:	ec53 2b10 	vmov	r2, r3, d0
 800adcc:	4659      	mov	r1, fp
 800adce:	f7f5 fc23 	bl	8000618 <__aeabi_dmul>
 800add2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800add6:	f7f5 fa69 	bl	80002ac <__adddf3>
 800adda:	4682      	mov	sl, r0
 800addc:	468b      	mov	fp, r1
 800adde:	e770      	b.n	800acc2 <_strtod_l+0xa62>
 800ade0:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800ade4:	e7e0      	b.n	800ada8 <_strtod_l+0xb48>
 800ade6:	a30e      	add	r3, pc, #56	@ (adr r3, 800ae20 <_strtod_l+0xbc0>)
 800ade8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adec:	f7f5 fe86 	bl	8000afc <__aeabi_dcmplt>
 800adf0:	e798      	b.n	800ad24 <_strtod_l+0xac4>
 800adf2:	2300      	movs	r3, #0
 800adf4:	930b      	str	r3, [sp, #44]	@ 0x2c
 800adf6:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800adf8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800adfa:	6013      	str	r3, [r2, #0]
 800adfc:	f7ff ba6d 	b.w	800a2da <_strtod_l+0x7a>
 800ae00:	2a65      	cmp	r2, #101	@ 0x65
 800ae02:	f43f ab66 	beq.w	800a4d2 <_strtod_l+0x272>
 800ae06:	2a45      	cmp	r2, #69	@ 0x45
 800ae08:	f43f ab63 	beq.w	800a4d2 <_strtod_l+0x272>
 800ae0c:	2301      	movs	r3, #1
 800ae0e:	f7ff bb9e 	b.w	800a54e <_strtod_l+0x2ee>
 800ae12:	bf00      	nop
 800ae14:	f3af 8000 	nop.w
 800ae18:	ffc00000 	.word	0xffc00000
 800ae1c:	41dfffff 	.word	0x41dfffff
 800ae20:	94a03595 	.word	0x94a03595
 800ae24:	3fcfffff 	.word	0x3fcfffff

0800ae28 <_strtod_r>:
 800ae28:	4b01      	ldr	r3, [pc, #4]	@ (800ae30 <_strtod_r+0x8>)
 800ae2a:	f7ff ba19 	b.w	800a260 <_strtod_l>
 800ae2e:	bf00      	nop
 800ae30:	20000038 	.word	0x20000038

0800ae34 <strtod>:
 800ae34:	460a      	mov	r2, r1
 800ae36:	4601      	mov	r1, r0
 800ae38:	4802      	ldr	r0, [pc, #8]	@ (800ae44 <strtod+0x10>)
 800ae3a:	4b03      	ldr	r3, [pc, #12]	@ (800ae48 <strtod+0x14>)
 800ae3c:	6800      	ldr	r0, [r0, #0]
 800ae3e:	f7ff ba0f 	b.w	800a260 <_strtod_l>
 800ae42:	bf00      	nop
 800ae44:	200001a4 	.word	0x200001a4
 800ae48:	20000038 	.word	0x20000038

0800ae4c <_strtol_l.constprop.0>:
 800ae4c:	2b24      	cmp	r3, #36	@ 0x24
 800ae4e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ae52:	4686      	mov	lr, r0
 800ae54:	4690      	mov	r8, r2
 800ae56:	d801      	bhi.n	800ae5c <_strtol_l.constprop.0+0x10>
 800ae58:	2b01      	cmp	r3, #1
 800ae5a:	d106      	bne.n	800ae6a <_strtol_l.constprop.0+0x1e>
 800ae5c:	f001 fec8 	bl	800cbf0 <__errno>
 800ae60:	2316      	movs	r3, #22
 800ae62:	6003      	str	r3, [r0, #0]
 800ae64:	2000      	movs	r0, #0
 800ae66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ae6a:	4834      	ldr	r0, [pc, #208]	@ (800af3c <_strtol_l.constprop.0+0xf0>)
 800ae6c:	460d      	mov	r5, r1
 800ae6e:	462a      	mov	r2, r5
 800ae70:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ae74:	5d06      	ldrb	r6, [r0, r4]
 800ae76:	f016 0608 	ands.w	r6, r6, #8
 800ae7a:	d1f8      	bne.n	800ae6e <_strtol_l.constprop.0+0x22>
 800ae7c:	2c2d      	cmp	r4, #45	@ 0x2d
 800ae7e:	d12d      	bne.n	800aedc <_strtol_l.constprop.0+0x90>
 800ae80:	782c      	ldrb	r4, [r5, #0]
 800ae82:	2601      	movs	r6, #1
 800ae84:	1c95      	adds	r5, r2, #2
 800ae86:	f033 0210 	bics.w	r2, r3, #16
 800ae8a:	d109      	bne.n	800aea0 <_strtol_l.constprop.0+0x54>
 800ae8c:	2c30      	cmp	r4, #48	@ 0x30
 800ae8e:	d12a      	bne.n	800aee6 <_strtol_l.constprop.0+0x9a>
 800ae90:	782a      	ldrb	r2, [r5, #0]
 800ae92:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800ae96:	2a58      	cmp	r2, #88	@ 0x58
 800ae98:	d125      	bne.n	800aee6 <_strtol_l.constprop.0+0x9a>
 800ae9a:	786c      	ldrb	r4, [r5, #1]
 800ae9c:	2310      	movs	r3, #16
 800ae9e:	3502      	adds	r5, #2
 800aea0:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800aea4:	f10c 3cff 	add.w	ip, ip, #4294967295
 800aea8:	2200      	movs	r2, #0
 800aeaa:	fbbc f9f3 	udiv	r9, ip, r3
 800aeae:	4610      	mov	r0, r2
 800aeb0:	fb03 ca19 	mls	sl, r3, r9, ip
 800aeb4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800aeb8:	2f09      	cmp	r7, #9
 800aeba:	d81b      	bhi.n	800aef4 <_strtol_l.constprop.0+0xa8>
 800aebc:	463c      	mov	r4, r7
 800aebe:	42a3      	cmp	r3, r4
 800aec0:	dd27      	ble.n	800af12 <_strtol_l.constprop.0+0xc6>
 800aec2:	1c57      	adds	r7, r2, #1
 800aec4:	d007      	beq.n	800aed6 <_strtol_l.constprop.0+0x8a>
 800aec6:	4581      	cmp	r9, r0
 800aec8:	d320      	bcc.n	800af0c <_strtol_l.constprop.0+0xc0>
 800aeca:	d101      	bne.n	800aed0 <_strtol_l.constprop.0+0x84>
 800aecc:	45a2      	cmp	sl, r4
 800aece:	db1d      	blt.n	800af0c <_strtol_l.constprop.0+0xc0>
 800aed0:	fb00 4003 	mla	r0, r0, r3, r4
 800aed4:	2201      	movs	r2, #1
 800aed6:	f815 4b01 	ldrb.w	r4, [r5], #1
 800aeda:	e7eb      	b.n	800aeb4 <_strtol_l.constprop.0+0x68>
 800aedc:	2c2b      	cmp	r4, #43	@ 0x2b
 800aede:	bf04      	itt	eq
 800aee0:	782c      	ldrbeq	r4, [r5, #0]
 800aee2:	1c95      	addeq	r5, r2, #2
 800aee4:	e7cf      	b.n	800ae86 <_strtol_l.constprop.0+0x3a>
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	d1da      	bne.n	800aea0 <_strtol_l.constprop.0+0x54>
 800aeea:	2c30      	cmp	r4, #48	@ 0x30
 800aeec:	bf0c      	ite	eq
 800aeee:	2308      	moveq	r3, #8
 800aef0:	230a      	movne	r3, #10
 800aef2:	e7d5      	b.n	800aea0 <_strtol_l.constprop.0+0x54>
 800aef4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800aef8:	2f19      	cmp	r7, #25
 800aefa:	d801      	bhi.n	800af00 <_strtol_l.constprop.0+0xb4>
 800aefc:	3c37      	subs	r4, #55	@ 0x37
 800aefe:	e7de      	b.n	800aebe <_strtol_l.constprop.0+0x72>
 800af00:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800af04:	2f19      	cmp	r7, #25
 800af06:	d804      	bhi.n	800af12 <_strtol_l.constprop.0+0xc6>
 800af08:	3c57      	subs	r4, #87	@ 0x57
 800af0a:	e7d8      	b.n	800aebe <_strtol_l.constprop.0+0x72>
 800af0c:	f04f 32ff 	mov.w	r2, #4294967295
 800af10:	e7e1      	b.n	800aed6 <_strtol_l.constprop.0+0x8a>
 800af12:	1c53      	adds	r3, r2, #1
 800af14:	d108      	bne.n	800af28 <_strtol_l.constprop.0+0xdc>
 800af16:	2322      	movs	r3, #34	@ 0x22
 800af18:	f8ce 3000 	str.w	r3, [lr]
 800af1c:	4660      	mov	r0, ip
 800af1e:	f1b8 0f00 	cmp.w	r8, #0
 800af22:	d0a0      	beq.n	800ae66 <_strtol_l.constprop.0+0x1a>
 800af24:	1e69      	subs	r1, r5, #1
 800af26:	e006      	b.n	800af36 <_strtol_l.constprop.0+0xea>
 800af28:	b106      	cbz	r6, 800af2c <_strtol_l.constprop.0+0xe0>
 800af2a:	4240      	negs	r0, r0
 800af2c:	f1b8 0f00 	cmp.w	r8, #0
 800af30:	d099      	beq.n	800ae66 <_strtol_l.constprop.0+0x1a>
 800af32:	2a00      	cmp	r2, #0
 800af34:	d1f6      	bne.n	800af24 <_strtol_l.constprop.0+0xd8>
 800af36:	f8c8 1000 	str.w	r1, [r8]
 800af3a:	e794      	b.n	800ae66 <_strtol_l.constprop.0+0x1a>
 800af3c:	08013a71 	.word	0x08013a71

0800af40 <_strtol_r>:
 800af40:	f7ff bf84 	b.w	800ae4c <_strtol_l.constprop.0>

0800af44 <strtol>:
 800af44:	4613      	mov	r3, r2
 800af46:	460a      	mov	r2, r1
 800af48:	4601      	mov	r1, r0
 800af4a:	4802      	ldr	r0, [pc, #8]	@ (800af54 <strtol+0x10>)
 800af4c:	6800      	ldr	r0, [r0, #0]
 800af4e:	f7ff bf7d 	b.w	800ae4c <_strtol_l.constprop.0>
 800af52:	bf00      	nop
 800af54:	200001a4 	.word	0x200001a4

0800af58 <__cvt>:
 800af58:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800af5c:	ec57 6b10 	vmov	r6, r7, d0
 800af60:	2f00      	cmp	r7, #0
 800af62:	460c      	mov	r4, r1
 800af64:	4619      	mov	r1, r3
 800af66:	463b      	mov	r3, r7
 800af68:	bfbb      	ittet	lt
 800af6a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800af6e:	461f      	movlt	r7, r3
 800af70:	2300      	movge	r3, #0
 800af72:	232d      	movlt	r3, #45	@ 0x2d
 800af74:	700b      	strb	r3, [r1, #0]
 800af76:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800af78:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800af7c:	4691      	mov	r9, r2
 800af7e:	f023 0820 	bic.w	r8, r3, #32
 800af82:	bfbc      	itt	lt
 800af84:	4632      	movlt	r2, r6
 800af86:	4616      	movlt	r6, r2
 800af88:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800af8c:	d005      	beq.n	800af9a <__cvt+0x42>
 800af8e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800af92:	d100      	bne.n	800af96 <__cvt+0x3e>
 800af94:	3401      	adds	r4, #1
 800af96:	2102      	movs	r1, #2
 800af98:	e000      	b.n	800af9c <__cvt+0x44>
 800af9a:	2103      	movs	r1, #3
 800af9c:	ab03      	add	r3, sp, #12
 800af9e:	9301      	str	r3, [sp, #4]
 800afa0:	ab02      	add	r3, sp, #8
 800afa2:	9300      	str	r3, [sp, #0]
 800afa4:	ec47 6b10 	vmov	d0, r6, r7
 800afa8:	4653      	mov	r3, sl
 800afaa:	4622      	mov	r2, r4
 800afac:	f001 ff00 	bl	800cdb0 <_dtoa_r>
 800afb0:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800afb4:	4605      	mov	r5, r0
 800afb6:	d119      	bne.n	800afec <__cvt+0x94>
 800afb8:	f019 0f01 	tst.w	r9, #1
 800afbc:	d00e      	beq.n	800afdc <__cvt+0x84>
 800afbe:	eb00 0904 	add.w	r9, r0, r4
 800afc2:	2200      	movs	r2, #0
 800afc4:	2300      	movs	r3, #0
 800afc6:	4630      	mov	r0, r6
 800afc8:	4639      	mov	r1, r7
 800afca:	f7f5 fd8d 	bl	8000ae8 <__aeabi_dcmpeq>
 800afce:	b108      	cbz	r0, 800afd4 <__cvt+0x7c>
 800afd0:	f8cd 900c 	str.w	r9, [sp, #12]
 800afd4:	2230      	movs	r2, #48	@ 0x30
 800afd6:	9b03      	ldr	r3, [sp, #12]
 800afd8:	454b      	cmp	r3, r9
 800afda:	d31e      	bcc.n	800b01a <__cvt+0xc2>
 800afdc:	9b03      	ldr	r3, [sp, #12]
 800afde:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800afe0:	1b5b      	subs	r3, r3, r5
 800afe2:	4628      	mov	r0, r5
 800afe4:	6013      	str	r3, [r2, #0]
 800afe6:	b004      	add	sp, #16
 800afe8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800afec:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800aff0:	eb00 0904 	add.w	r9, r0, r4
 800aff4:	d1e5      	bne.n	800afc2 <__cvt+0x6a>
 800aff6:	7803      	ldrb	r3, [r0, #0]
 800aff8:	2b30      	cmp	r3, #48	@ 0x30
 800affa:	d10a      	bne.n	800b012 <__cvt+0xba>
 800affc:	2200      	movs	r2, #0
 800affe:	2300      	movs	r3, #0
 800b000:	4630      	mov	r0, r6
 800b002:	4639      	mov	r1, r7
 800b004:	f7f5 fd70 	bl	8000ae8 <__aeabi_dcmpeq>
 800b008:	b918      	cbnz	r0, 800b012 <__cvt+0xba>
 800b00a:	f1c4 0401 	rsb	r4, r4, #1
 800b00e:	f8ca 4000 	str.w	r4, [sl]
 800b012:	f8da 3000 	ldr.w	r3, [sl]
 800b016:	4499      	add	r9, r3
 800b018:	e7d3      	b.n	800afc2 <__cvt+0x6a>
 800b01a:	1c59      	adds	r1, r3, #1
 800b01c:	9103      	str	r1, [sp, #12]
 800b01e:	701a      	strb	r2, [r3, #0]
 800b020:	e7d9      	b.n	800afd6 <__cvt+0x7e>

0800b022 <__exponent>:
 800b022:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b024:	2900      	cmp	r1, #0
 800b026:	bfba      	itte	lt
 800b028:	4249      	neglt	r1, r1
 800b02a:	232d      	movlt	r3, #45	@ 0x2d
 800b02c:	232b      	movge	r3, #43	@ 0x2b
 800b02e:	2909      	cmp	r1, #9
 800b030:	7002      	strb	r2, [r0, #0]
 800b032:	7043      	strb	r3, [r0, #1]
 800b034:	dd29      	ble.n	800b08a <__exponent+0x68>
 800b036:	f10d 0307 	add.w	r3, sp, #7
 800b03a:	461d      	mov	r5, r3
 800b03c:	270a      	movs	r7, #10
 800b03e:	461a      	mov	r2, r3
 800b040:	fbb1 f6f7 	udiv	r6, r1, r7
 800b044:	fb07 1416 	mls	r4, r7, r6, r1
 800b048:	3430      	adds	r4, #48	@ 0x30
 800b04a:	f802 4c01 	strb.w	r4, [r2, #-1]
 800b04e:	460c      	mov	r4, r1
 800b050:	2c63      	cmp	r4, #99	@ 0x63
 800b052:	f103 33ff 	add.w	r3, r3, #4294967295
 800b056:	4631      	mov	r1, r6
 800b058:	dcf1      	bgt.n	800b03e <__exponent+0x1c>
 800b05a:	3130      	adds	r1, #48	@ 0x30
 800b05c:	1e94      	subs	r4, r2, #2
 800b05e:	f803 1c01 	strb.w	r1, [r3, #-1]
 800b062:	1c41      	adds	r1, r0, #1
 800b064:	4623      	mov	r3, r4
 800b066:	42ab      	cmp	r3, r5
 800b068:	d30a      	bcc.n	800b080 <__exponent+0x5e>
 800b06a:	f10d 0309 	add.w	r3, sp, #9
 800b06e:	1a9b      	subs	r3, r3, r2
 800b070:	42ac      	cmp	r4, r5
 800b072:	bf88      	it	hi
 800b074:	2300      	movhi	r3, #0
 800b076:	3302      	adds	r3, #2
 800b078:	4403      	add	r3, r0
 800b07a:	1a18      	subs	r0, r3, r0
 800b07c:	b003      	add	sp, #12
 800b07e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b080:	f813 6b01 	ldrb.w	r6, [r3], #1
 800b084:	f801 6f01 	strb.w	r6, [r1, #1]!
 800b088:	e7ed      	b.n	800b066 <__exponent+0x44>
 800b08a:	2330      	movs	r3, #48	@ 0x30
 800b08c:	3130      	adds	r1, #48	@ 0x30
 800b08e:	7083      	strb	r3, [r0, #2]
 800b090:	70c1      	strb	r1, [r0, #3]
 800b092:	1d03      	adds	r3, r0, #4
 800b094:	e7f1      	b.n	800b07a <__exponent+0x58>
	...

0800b098 <_printf_float>:
 800b098:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b09c:	b08d      	sub	sp, #52	@ 0x34
 800b09e:	460c      	mov	r4, r1
 800b0a0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800b0a4:	4616      	mov	r6, r2
 800b0a6:	461f      	mov	r7, r3
 800b0a8:	4605      	mov	r5, r0
 800b0aa:	f001 fd47 	bl	800cb3c <_localeconv_r>
 800b0ae:	6803      	ldr	r3, [r0, #0]
 800b0b0:	9304      	str	r3, [sp, #16]
 800b0b2:	4618      	mov	r0, r3
 800b0b4:	f7f5 f8ec 	bl	8000290 <strlen>
 800b0b8:	2300      	movs	r3, #0
 800b0ba:	930a      	str	r3, [sp, #40]	@ 0x28
 800b0bc:	f8d8 3000 	ldr.w	r3, [r8]
 800b0c0:	9005      	str	r0, [sp, #20]
 800b0c2:	3307      	adds	r3, #7
 800b0c4:	f023 0307 	bic.w	r3, r3, #7
 800b0c8:	f103 0208 	add.w	r2, r3, #8
 800b0cc:	f894 a018 	ldrb.w	sl, [r4, #24]
 800b0d0:	f8d4 b000 	ldr.w	fp, [r4]
 800b0d4:	f8c8 2000 	str.w	r2, [r8]
 800b0d8:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b0dc:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800b0e0:	9307      	str	r3, [sp, #28]
 800b0e2:	f8cd 8018 	str.w	r8, [sp, #24]
 800b0e6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800b0ea:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b0ee:	4b9c      	ldr	r3, [pc, #624]	@ (800b360 <_printf_float+0x2c8>)
 800b0f0:	f04f 32ff 	mov.w	r2, #4294967295
 800b0f4:	f7f5 fd2a 	bl	8000b4c <__aeabi_dcmpun>
 800b0f8:	bb70      	cbnz	r0, 800b158 <_printf_float+0xc0>
 800b0fa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b0fe:	4b98      	ldr	r3, [pc, #608]	@ (800b360 <_printf_float+0x2c8>)
 800b100:	f04f 32ff 	mov.w	r2, #4294967295
 800b104:	f7f5 fd04 	bl	8000b10 <__aeabi_dcmple>
 800b108:	bb30      	cbnz	r0, 800b158 <_printf_float+0xc0>
 800b10a:	2200      	movs	r2, #0
 800b10c:	2300      	movs	r3, #0
 800b10e:	4640      	mov	r0, r8
 800b110:	4649      	mov	r1, r9
 800b112:	f7f5 fcf3 	bl	8000afc <__aeabi_dcmplt>
 800b116:	b110      	cbz	r0, 800b11e <_printf_float+0x86>
 800b118:	232d      	movs	r3, #45	@ 0x2d
 800b11a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b11e:	4a91      	ldr	r2, [pc, #580]	@ (800b364 <_printf_float+0x2cc>)
 800b120:	4b91      	ldr	r3, [pc, #580]	@ (800b368 <_printf_float+0x2d0>)
 800b122:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800b126:	bf94      	ite	ls
 800b128:	4690      	movls	r8, r2
 800b12a:	4698      	movhi	r8, r3
 800b12c:	2303      	movs	r3, #3
 800b12e:	6123      	str	r3, [r4, #16]
 800b130:	f02b 0304 	bic.w	r3, fp, #4
 800b134:	6023      	str	r3, [r4, #0]
 800b136:	f04f 0900 	mov.w	r9, #0
 800b13a:	9700      	str	r7, [sp, #0]
 800b13c:	4633      	mov	r3, r6
 800b13e:	aa0b      	add	r2, sp, #44	@ 0x2c
 800b140:	4621      	mov	r1, r4
 800b142:	4628      	mov	r0, r5
 800b144:	f000 f9d2 	bl	800b4ec <_printf_common>
 800b148:	3001      	adds	r0, #1
 800b14a:	f040 808d 	bne.w	800b268 <_printf_float+0x1d0>
 800b14e:	f04f 30ff 	mov.w	r0, #4294967295
 800b152:	b00d      	add	sp, #52	@ 0x34
 800b154:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b158:	4642      	mov	r2, r8
 800b15a:	464b      	mov	r3, r9
 800b15c:	4640      	mov	r0, r8
 800b15e:	4649      	mov	r1, r9
 800b160:	f7f5 fcf4 	bl	8000b4c <__aeabi_dcmpun>
 800b164:	b140      	cbz	r0, 800b178 <_printf_float+0xe0>
 800b166:	464b      	mov	r3, r9
 800b168:	2b00      	cmp	r3, #0
 800b16a:	bfbc      	itt	lt
 800b16c:	232d      	movlt	r3, #45	@ 0x2d
 800b16e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800b172:	4a7e      	ldr	r2, [pc, #504]	@ (800b36c <_printf_float+0x2d4>)
 800b174:	4b7e      	ldr	r3, [pc, #504]	@ (800b370 <_printf_float+0x2d8>)
 800b176:	e7d4      	b.n	800b122 <_printf_float+0x8a>
 800b178:	6863      	ldr	r3, [r4, #4]
 800b17a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800b17e:	9206      	str	r2, [sp, #24]
 800b180:	1c5a      	adds	r2, r3, #1
 800b182:	d13b      	bne.n	800b1fc <_printf_float+0x164>
 800b184:	2306      	movs	r3, #6
 800b186:	6063      	str	r3, [r4, #4]
 800b188:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800b18c:	2300      	movs	r3, #0
 800b18e:	6022      	str	r2, [r4, #0]
 800b190:	9303      	str	r3, [sp, #12]
 800b192:	ab0a      	add	r3, sp, #40	@ 0x28
 800b194:	e9cd a301 	strd	sl, r3, [sp, #4]
 800b198:	ab09      	add	r3, sp, #36	@ 0x24
 800b19a:	9300      	str	r3, [sp, #0]
 800b19c:	6861      	ldr	r1, [r4, #4]
 800b19e:	ec49 8b10 	vmov	d0, r8, r9
 800b1a2:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800b1a6:	4628      	mov	r0, r5
 800b1a8:	f7ff fed6 	bl	800af58 <__cvt>
 800b1ac:	9b06      	ldr	r3, [sp, #24]
 800b1ae:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b1b0:	2b47      	cmp	r3, #71	@ 0x47
 800b1b2:	4680      	mov	r8, r0
 800b1b4:	d129      	bne.n	800b20a <_printf_float+0x172>
 800b1b6:	1cc8      	adds	r0, r1, #3
 800b1b8:	db02      	blt.n	800b1c0 <_printf_float+0x128>
 800b1ba:	6863      	ldr	r3, [r4, #4]
 800b1bc:	4299      	cmp	r1, r3
 800b1be:	dd41      	ble.n	800b244 <_printf_float+0x1ac>
 800b1c0:	f1aa 0a02 	sub.w	sl, sl, #2
 800b1c4:	fa5f fa8a 	uxtb.w	sl, sl
 800b1c8:	3901      	subs	r1, #1
 800b1ca:	4652      	mov	r2, sl
 800b1cc:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800b1d0:	9109      	str	r1, [sp, #36]	@ 0x24
 800b1d2:	f7ff ff26 	bl	800b022 <__exponent>
 800b1d6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b1d8:	1813      	adds	r3, r2, r0
 800b1da:	2a01      	cmp	r2, #1
 800b1dc:	4681      	mov	r9, r0
 800b1de:	6123      	str	r3, [r4, #16]
 800b1e0:	dc02      	bgt.n	800b1e8 <_printf_float+0x150>
 800b1e2:	6822      	ldr	r2, [r4, #0]
 800b1e4:	07d2      	lsls	r2, r2, #31
 800b1e6:	d501      	bpl.n	800b1ec <_printf_float+0x154>
 800b1e8:	3301      	adds	r3, #1
 800b1ea:	6123      	str	r3, [r4, #16]
 800b1ec:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800b1f0:	2b00      	cmp	r3, #0
 800b1f2:	d0a2      	beq.n	800b13a <_printf_float+0xa2>
 800b1f4:	232d      	movs	r3, #45	@ 0x2d
 800b1f6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b1fa:	e79e      	b.n	800b13a <_printf_float+0xa2>
 800b1fc:	9a06      	ldr	r2, [sp, #24]
 800b1fe:	2a47      	cmp	r2, #71	@ 0x47
 800b200:	d1c2      	bne.n	800b188 <_printf_float+0xf0>
 800b202:	2b00      	cmp	r3, #0
 800b204:	d1c0      	bne.n	800b188 <_printf_float+0xf0>
 800b206:	2301      	movs	r3, #1
 800b208:	e7bd      	b.n	800b186 <_printf_float+0xee>
 800b20a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800b20e:	d9db      	bls.n	800b1c8 <_printf_float+0x130>
 800b210:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800b214:	d118      	bne.n	800b248 <_printf_float+0x1b0>
 800b216:	2900      	cmp	r1, #0
 800b218:	6863      	ldr	r3, [r4, #4]
 800b21a:	dd0b      	ble.n	800b234 <_printf_float+0x19c>
 800b21c:	6121      	str	r1, [r4, #16]
 800b21e:	b913      	cbnz	r3, 800b226 <_printf_float+0x18e>
 800b220:	6822      	ldr	r2, [r4, #0]
 800b222:	07d0      	lsls	r0, r2, #31
 800b224:	d502      	bpl.n	800b22c <_printf_float+0x194>
 800b226:	3301      	adds	r3, #1
 800b228:	440b      	add	r3, r1
 800b22a:	6123      	str	r3, [r4, #16]
 800b22c:	65a1      	str	r1, [r4, #88]	@ 0x58
 800b22e:	f04f 0900 	mov.w	r9, #0
 800b232:	e7db      	b.n	800b1ec <_printf_float+0x154>
 800b234:	b913      	cbnz	r3, 800b23c <_printf_float+0x1a4>
 800b236:	6822      	ldr	r2, [r4, #0]
 800b238:	07d2      	lsls	r2, r2, #31
 800b23a:	d501      	bpl.n	800b240 <_printf_float+0x1a8>
 800b23c:	3302      	adds	r3, #2
 800b23e:	e7f4      	b.n	800b22a <_printf_float+0x192>
 800b240:	2301      	movs	r3, #1
 800b242:	e7f2      	b.n	800b22a <_printf_float+0x192>
 800b244:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800b248:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b24a:	4299      	cmp	r1, r3
 800b24c:	db05      	blt.n	800b25a <_printf_float+0x1c2>
 800b24e:	6823      	ldr	r3, [r4, #0]
 800b250:	6121      	str	r1, [r4, #16]
 800b252:	07d8      	lsls	r0, r3, #31
 800b254:	d5ea      	bpl.n	800b22c <_printf_float+0x194>
 800b256:	1c4b      	adds	r3, r1, #1
 800b258:	e7e7      	b.n	800b22a <_printf_float+0x192>
 800b25a:	2900      	cmp	r1, #0
 800b25c:	bfd4      	ite	le
 800b25e:	f1c1 0202 	rsble	r2, r1, #2
 800b262:	2201      	movgt	r2, #1
 800b264:	4413      	add	r3, r2
 800b266:	e7e0      	b.n	800b22a <_printf_float+0x192>
 800b268:	6823      	ldr	r3, [r4, #0]
 800b26a:	055a      	lsls	r2, r3, #21
 800b26c:	d407      	bmi.n	800b27e <_printf_float+0x1e6>
 800b26e:	6923      	ldr	r3, [r4, #16]
 800b270:	4642      	mov	r2, r8
 800b272:	4631      	mov	r1, r6
 800b274:	4628      	mov	r0, r5
 800b276:	47b8      	blx	r7
 800b278:	3001      	adds	r0, #1
 800b27a:	d12b      	bne.n	800b2d4 <_printf_float+0x23c>
 800b27c:	e767      	b.n	800b14e <_printf_float+0xb6>
 800b27e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800b282:	f240 80dd 	bls.w	800b440 <_printf_float+0x3a8>
 800b286:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800b28a:	2200      	movs	r2, #0
 800b28c:	2300      	movs	r3, #0
 800b28e:	f7f5 fc2b 	bl	8000ae8 <__aeabi_dcmpeq>
 800b292:	2800      	cmp	r0, #0
 800b294:	d033      	beq.n	800b2fe <_printf_float+0x266>
 800b296:	4a37      	ldr	r2, [pc, #220]	@ (800b374 <_printf_float+0x2dc>)
 800b298:	2301      	movs	r3, #1
 800b29a:	4631      	mov	r1, r6
 800b29c:	4628      	mov	r0, r5
 800b29e:	47b8      	blx	r7
 800b2a0:	3001      	adds	r0, #1
 800b2a2:	f43f af54 	beq.w	800b14e <_printf_float+0xb6>
 800b2a6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800b2aa:	4543      	cmp	r3, r8
 800b2ac:	db02      	blt.n	800b2b4 <_printf_float+0x21c>
 800b2ae:	6823      	ldr	r3, [r4, #0]
 800b2b0:	07d8      	lsls	r0, r3, #31
 800b2b2:	d50f      	bpl.n	800b2d4 <_printf_float+0x23c>
 800b2b4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b2b8:	4631      	mov	r1, r6
 800b2ba:	4628      	mov	r0, r5
 800b2bc:	47b8      	blx	r7
 800b2be:	3001      	adds	r0, #1
 800b2c0:	f43f af45 	beq.w	800b14e <_printf_float+0xb6>
 800b2c4:	f04f 0900 	mov.w	r9, #0
 800b2c8:	f108 38ff 	add.w	r8, r8, #4294967295
 800b2cc:	f104 0a1a 	add.w	sl, r4, #26
 800b2d0:	45c8      	cmp	r8, r9
 800b2d2:	dc09      	bgt.n	800b2e8 <_printf_float+0x250>
 800b2d4:	6823      	ldr	r3, [r4, #0]
 800b2d6:	079b      	lsls	r3, r3, #30
 800b2d8:	f100 8103 	bmi.w	800b4e2 <_printf_float+0x44a>
 800b2dc:	68e0      	ldr	r0, [r4, #12]
 800b2de:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b2e0:	4298      	cmp	r0, r3
 800b2e2:	bfb8      	it	lt
 800b2e4:	4618      	movlt	r0, r3
 800b2e6:	e734      	b.n	800b152 <_printf_float+0xba>
 800b2e8:	2301      	movs	r3, #1
 800b2ea:	4652      	mov	r2, sl
 800b2ec:	4631      	mov	r1, r6
 800b2ee:	4628      	mov	r0, r5
 800b2f0:	47b8      	blx	r7
 800b2f2:	3001      	adds	r0, #1
 800b2f4:	f43f af2b 	beq.w	800b14e <_printf_float+0xb6>
 800b2f8:	f109 0901 	add.w	r9, r9, #1
 800b2fc:	e7e8      	b.n	800b2d0 <_printf_float+0x238>
 800b2fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b300:	2b00      	cmp	r3, #0
 800b302:	dc39      	bgt.n	800b378 <_printf_float+0x2e0>
 800b304:	4a1b      	ldr	r2, [pc, #108]	@ (800b374 <_printf_float+0x2dc>)
 800b306:	2301      	movs	r3, #1
 800b308:	4631      	mov	r1, r6
 800b30a:	4628      	mov	r0, r5
 800b30c:	47b8      	blx	r7
 800b30e:	3001      	adds	r0, #1
 800b310:	f43f af1d 	beq.w	800b14e <_printf_float+0xb6>
 800b314:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800b318:	ea59 0303 	orrs.w	r3, r9, r3
 800b31c:	d102      	bne.n	800b324 <_printf_float+0x28c>
 800b31e:	6823      	ldr	r3, [r4, #0]
 800b320:	07d9      	lsls	r1, r3, #31
 800b322:	d5d7      	bpl.n	800b2d4 <_printf_float+0x23c>
 800b324:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b328:	4631      	mov	r1, r6
 800b32a:	4628      	mov	r0, r5
 800b32c:	47b8      	blx	r7
 800b32e:	3001      	adds	r0, #1
 800b330:	f43f af0d 	beq.w	800b14e <_printf_float+0xb6>
 800b334:	f04f 0a00 	mov.w	sl, #0
 800b338:	f104 0b1a 	add.w	fp, r4, #26
 800b33c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b33e:	425b      	negs	r3, r3
 800b340:	4553      	cmp	r3, sl
 800b342:	dc01      	bgt.n	800b348 <_printf_float+0x2b0>
 800b344:	464b      	mov	r3, r9
 800b346:	e793      	b.n	800b270 <_printf_float+0x1d8>
 800b348:	2301      	movs	r3, #1
 800b34a:	465a      	mov	r2, fp
 800b34c:	4631      	mov	r1, r6
 800b34e:	4628      	mov	r0, r5
 800b350:	47b8      	blx	r7
 800b352:	3001      	adds	r0, #1
 800b354:	f43f aefb 	beq.w	800b14e <_printf_float+0xb6>
 800b358:	f10a 0a01 	add.w	sl, sl, #1
 800b35c:	e7ee      	b.n	800b33c <_printf_float+0x2a4>
 800b35e:	bf00      	nop
 800b360:	7fefffff 	.word	0x7fefffff
 800b364:	08013b71 	.word	0x08013b71
 800b368:	08013b75 	.word	0x08013b75
 800b36c:	08013b79 	.word	0x08013b79
 800b370:	08013b7d 	.word	0x08013b7d
 800b374:	08013ec7 	.word	0x08013ec7
 800b378:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800b37a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800b37e:	4553      	cmp	r3, sl
 800b380:	bfa8      	it	ge
 800b382:	4653      	movge	r3, sl
 800b384:	2b00      	cmp	r3, #0
 800b386:	4699      	mov	r9, r3
 800b388:	dc36      	bgt.n	800b3f8 <_printf_float+0x360>
 800b38a:	f04f 0b00 	mov.w	fp, #0
 800b38e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b392:	f104 021a 	add.w	r2, r4, #26
 800b396:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800b398:	9306      	str	r3, [sp, #24]
 800b39a:	eba3 0309 	sub.w	r3, r3, r9
 800b39e:	455b      	cmp	r3, fp
 800b3a0:	dc31      	bgt.n	800b406 <_printf_float+0x36e>
 800b3a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b3a4:	459a      	cmp	sl, r3
 800b3a6:	dc3a      	bgt.n	800b41e <_printf_float+0x386>
 800b3a8:	6823      	ldr	r3, [r4, #0]
 800b3aa:	07da      	lsls	r2, r3, #31
 800b3ac:	d437      	bmi.n	800b41e <_printf_float+0x386>
 800b3ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b3b0:	ebaa 0903 	sub.w	r9, sl, r3
 800b3b4:	9b06      	ldr	r3, [sp, #24]
 800b3b6:	ebaa 0303 	sub.w	r3, sl, r3
 800b3ba:	4599      	cmp	r9, r3
 800b3bc:	bfa8      	it	ge
 800b3be:	4699      	movge	r9, r3
 800b3c0:	f1b9 0f00 	cmp.w	r9, #0
 800b3c4:	dc33      	bgt.n	800b42e <_printf_float+0x396>
 800b3c6:	f04f 0800 	mov.w	r8, #0
 800b3ca:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b3ce:	f104 0b1a 	add.w	fp, r4, #26
 800b3d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b3d4:	ebaa 0303 	sub.w	r3, sl, r3
 800b3d8:	eba3 0309 	sub.w	r3, r3, r9
 800b3dc:	4543      	cmp	r3, r8
 800b3de:	f77f af79 	ble.w	800b2d4 <_printf_float+0x23c>
 800b3e2:	2301      	movs	r3, #1
 800b3e4:	465a      	mov	r2, fp
 800b3e6:	4631      	mov	r1, r6
 800b3e8:	4628      	mov	r0, r5
 800b3ea:	47b8      	blx	r7
 800b3ec:	3001      	adds	r0, #1
 800b3ee:	f43f aeae 	beq.w	800b14e <_printf_float+0xb6>
 800b3f2:	f108 0801 	add.w	r8, r8, #1
 800b3f6:	e7ec      	b.n	800b3d2 <_printf_float+0x33a>
 800b3f8:	4642      	mov	r2, r8
 800b3fa:	4631      	mov	r1, r6
 800b3fc:	4628      	mov	r0, r5
 800b3fe:	47b8      	blx	r7
 800b400:	3001      	adds	r0, #1
 800b402:	d1c2      	bne.n	800b38a <_printf_float+0x2f2>
 800b404:	e6a3      	b.n	800b14e <_printf_float+0xb6>
 800b406:	2301      	movs	r3, #1
 800b408:	4631      	mov	r1, r6
 800b40a:	4628      	mov	r0, r5
 800b40c:	9206      	str	r2, [sp, #24]
 800b40e:	47b8      	blx	r7
 800b410:	3001      	adds	r0, #1
 800b412:	f43f ae9c 	beq.w	800b14e <_printf_float+0xb6>
 800b416:	9a06      	ldr	r2, [sp, #24]
 800b418:	f10b 0b01 	add.w	fp, fp, #1
 800b41c:	e7bb      	b.n	800b396 <_printf_float+0x2fe>
 800b41e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b422:	4631      	mov	r1, r6
 800b424:	4628      	mov	r0, r5
 800b426:	47b8      	blx	r7
 800b428:	3001      	adds	r0, #1
 800b42a:	d1c0      	bne.n	800b3ae <_printf_float+0x316>
 800b42c:	e68f      	b.n	800b14e <_printf_float+0xb6>
 800b42e:	9a06      	ldr	r2, [sp, #24]
 800b430:	464b      	mov	r3, r9
 800b432:	4442      	add	r2, r8
 800b434:	4631      	mov	r1, r6
 800b436:	4628      	mov	r0, r5
 800b438:	47b8      	blx	r7
 800b43a:	3001      	adds	r0, #1
 800b43c:	d1c3      	bne.n	800b3c6 <_printf_float+0x32e>
 800b43e:	e686      	b.n	800b14e <_printf_float+0xb6>
 800b440:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800b444:	f1ba 0f01 	cmp.w	sl, #1
 800b448:	dc01      	bgt.n	800b44e <_printf_float+0x3b6>
 800b44a:	07db      	lsls	r3, r3, #31
 800b44c:	d536      	bpl.n	800b4bc <_printf_float+0x424>
 800b44e:	2301      	movs	r3, #1
 800b450:	4642      	mov	r2, r8
 800b452:	4631      	mov	r1, r6
 800b454:	4628      	mov	r0, r5
 800b456:	47b8      	blx	r7
 800b458:	3001      	adds	r0, #1
 800b45a:	f43f ae78 	beq.w	800b14e <_printf_float+0xb6>
 800b45e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b462:	4631      	mov	r1, r6
 800b464:	4628      	mov	r0, r5
 800b466:	47b8      	blx	r7
 800b468:	3001      	adds	r0, #1
 800b46a:	f43f ae70 	beq.w	800b14e <_printf_float+0xb6>
 800b46e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800b472:	2200      	movs	r2, #0
 800b474:	2300      	movs	r3, #0
 800b476:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b47a:	f7f5 fb35 	bl	8000ae8 <__aeabi_dcmpeq>
 800b47e:	b9c0      	cbnz	r0, 800b4b2 <_printf_float+0x41a>
 800b480:	4653      	mov	r3, sl
 800b482:	f108 0201 	add.w	r2, r8, #1
 800b486:	4631      	mov	r1, r6
 800b488:	4628      	mov	r0, r5
 800b48a:	47b8      	blx	r7
 800b48c:	3001      	adds	r0, #1
 800b48e:	d10c      	bne.n	800b4aa <_printf_float+0x412>
 800b490:	e65d      	b.n	800b14e <_printf_float+0xb6>
 800b492:	2301      	movs	r3, #1
 800b494:	465a      	mov	r2, fp
 800b496:	4631      	mov	r1, r6
 800b498:	4628      	mov	r0, r5
 800b49a:	47b8      	blx	r7
 800b49c:	3001      	adds	r0, #1
 800b49e:	f43f ae56 	beq.w	800b14e <_printf_float+0xb6>
 800b4a2:	f108 0801 	add.w	r8, r8, #1
 800b4a6:	45d0      	cmp	r8, sl
 800b4a8:	dbf3      	blt.n	800b492 <_printf_float+0x3fa>
 800b4aa:	464b      	mov	r3, r9
 800b4ac:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800b4b0:	e6df      	b.n	800b272 <_printf_float+0x1da>
 800b4b2:	f04f 0800 	mov.w	r8, #0
 800b4b6:	f104 0b1a 	add.w	fp, r4, #26
 800b4ba:	e7f4      	b.n	800b4a6 <_printf_float+0x40e>
 800b4bc:	2301      	movs	r3, #1
 800b4be:	4642      	mov	r2, r8
 800b4c0:	e7e1      	b.n	800b486 <_printf_float+0x3ee>
 800b4c2:	2301      	movs	r3, #1
 800b4c4:	464a      	mov	r2, r9
 800b4c6:	4631      	mov	r1, r6
 800b4c8:	4628      	mov	r0, r5
 800b4ca:	47b8      	blx	r7
 800b4cc:	3001      	adds	r0, #1
 800b4ce:	f43f ae3e 	beq.w	800b14e <_printf_float+0xb6>
 800b4d2:	f108 0801 	add.w	r8, r8, #1
 800b4d6:	68e3      	ldr	r3, [r4, #12]
 800b4d8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b4da:	1a5b      	subs	r3, r3, r1
 800b4dc:	4543      	cmp	r3, r8
 800b4de:	dcf0      	bgt.n	800b4c2 <_printf_float+0x42a>
 800b4e0:	e6fc      	b.n	800b2dc <_printf_float+0x244>
 800b4e2:	f04f 0800 	mov.w	r8, #0
 800b4e6:	f104 0919 	add.w	r9, r4, #25
 800b4ea:	e7f4      	b.n	800b4d6 <_printf_float+0x43e>

0800b4ec <_printf_common>:
 800b4ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b4f0:	4616      	mov	r6, r2
 800b4f2:	4698      	mov	r8, r3
 800b4f4:	688a      	ldr	r2, [r1, #8]
 800b4f6:	690b      	ldr	r3, [r1, #16]
 800b4f8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b4fc:	4293      	cmp	r3, r2
 800b4fe:	bfb8      	it	lt
 800b500:	4613      	movlt	r3, r2
 800b502:	6033      	str	r3, [r6, #0]
 800b504:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b508:	4607      	mov	r7, r0
 800b50a:	460c      	mov	r4, r1
 800b50c:	b10a      	cbz	r2, 800b512 <_printf_common+0x26>
 800b50e:	3301      	adds	r3, #1
 800b510:	6033      	str	r3, [r6, #0]
 800b512:	6823      	ldr	r3, [r4, #0]
 800b514:	0699      	lsls	r1, r3, #26
 800b516:	bf42      	ittt	mi
 800b518:	6833      	ldrmi	r3, [r6, #0]
 800b51a:	3302      	addmi	r3, #2
 800b51c:	6033      	strmi	r3, [r6, #0]
 800b51e:	6825      	ldr	r5, [r4, #0]
 800b520:	f015 0506 	ands.w	r5, r5, #6
 800b524:	d106      	bne.n	800b534 <_printf_common+0x48>
 800b526:	f104 0a19 	add.w	sl, r4, #25
 800b52a:	68e3      	ldr	r3, [r4, #12]
 800b52c:	6832      	ldr	r2, [r6, #0]
 800b52e:	1a9b      	subs	r3, r3, r2
 800b530:	42ab      	cmp	r3, r5
 800b532:	dc26      	bgt.n	800b582 <_printf_common+0x96>
 800b534:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b538:	6822      	ldr	r2, [r4, #0]
 800b53a:	3b00      	subs	r3, #0
 800b53c:	bf18      	it	ne
 800b53e:	2301      	movne	r3, #1
 800b540:	0692      	lsls	r2, r2, #26
 800b542:	d42b      	bmi.n	800b59c <_printf_common+0xb0>
 800b544:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b548:	4641      	mov	r1, r8
 800b54a:	4638      	mov	r0, r7
 800b54c:	47c8      	blx	r9
 800b54e:	3001      	adds	r0, #1
 800b550:	d01e      	beq.n	800b590 <_printf_common+0xa4>
 800b552:	6823      	ldr	r3, [r4, #0]
 800b554:	6922      	ldr	r2, [r4, #16]
 800b556:	f003 0306 	and.w	r3, r3, #6
 800b55a:	2b04      	cmp	r3, #4
 800b55c:	bf02      	ittt	eq
 800b55e:	68e5      	ldreq	r5, [r4, #12]
 800b560:	6833      	ldreq	r3, [r6, #0]
 800b562:	1aed      	subeq	r5, r5, r3
 800b564:	68a3      	ldr	r3, [r4, #8]
 800b566:	bf0c      	ite	eq
 800b568:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b56c:	2500      	movne	r5, #0
 800b56e:	4293      	cmp	r3, r2
 800b570:	bfc4      	itt	gt
 800b572:	1a9b      	subgt	r3, r3, r2
 800b574:	18ed      	addgt	r5, r5, r3
 800b576:	2600      	movs	r6, #0
 800b578:	341a      	adds	r4, #26
 800b57a:	42b5      	cmp	r5, r6
 800b57c:	d11a      	bne.n	800b5b4 <_printf_common+0xc8>
 800b57e:	2000      	movs	r0, #0
 800b580:	e008      	b.n	800b594 <_printf_common+0xa8>
 800b582:	2301      	movs	r3, #1
 800b584:	4652      	mov	r2, sl
 800b586:	4641      	mov	r1, r8
 800b588:	4638      	mov	r0, r7
 800b58a:	47c8      	blx	r9
 800b58c:	3001      	adds	r0, #1
 800b58e:	d103      	bne.n	800b598 <_printf_common+0xac>
 800b590:	f04f 30ff 	mov.w	r0, #4294967295
 800b594:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b598:	3501      	adds	r5, #1
 800b59a:	e7c6      	b.n	800b52a <_printf_common+0x3e>
 800b59c:	18e1      	adds	r1, r4, r3
 800b59e:	1c5a      	adds	r2, r3, #1
 800b5a0:	2030      	movs	r0, #48	@ 0x30
 800b5a2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b5a6:	4422      	add	r2, r4
 800b5a8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b5ac:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b5b0:	3302      	adds	r3, #2
 800b5b2:	e7c7      	b.n	800b544 <_printf_common+0x58>
 800b5b4:	2301      	movs	r3, #1
 800b5b6:	4622      	mov	r2, r4
 800b5b8:	4641      	mov	r1, r8
 800b5ba:	4638      	mov	r0, r7
 800b5bc:	47c8      	blx	r9
 800b5be:	3001      	adds	r0, #1
 800b5c0:	d0e6      	beq.n	800b590 <_printf_common+0xa4>
 800b5c2:	3601      	adds	r6, #1
 800b5c4:	e7d9      	b.n	800b57a <_printf_common+0x8e>
	...

0800b5c8 <_printf_i>:
 800b5c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b5cc:	7e0f      	ldrb	r7, [r1, #24]
 800b5ce:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b5d0:	2f78      	cmp	r7, #120	@ 0x78
 800b5d2:	4691      	mov	r9, r2
 800b5d4:	4680      	mov	r8, r0
 800b5d6:	460c      	mov	r4, r1
 800b5d8:	469a      	mov	sl, r3
 800b5da:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b5de:	d807      	bhi.n	800b5f0 <_printf_i+0x28>
 800b5e0:	2f62      	cmp	r7, #98	@ 0x62
 800b5e2:	d80a      	bhi.n	800b5fa <_printf_i+0x32>
 800b5e4:	2f00      	cmp	r7, #0
 800b5e6:	f000 80d2 	beq.w	800b78e <_printf_i+0x1c6>
 800b5ea:	2f58      	cmp	r7, #88	@ 0x58
 800b5ec:	f000 80b9 	beq.w	800b762 <_printf_i+0x19a>
 800b5f0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b5f4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b5f8:	e03a      	b.n	800b670 <_printf_i+0xa8>
 800b5fa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b5fe:	2b15      	cmp	r3, #21
 800b600:	d8f6      	bhi.n	800b5f0 <_printf_i+0x28>
 800b602:	a101      	add	r1, pc, #4	@ (adr r1, 800b608 <_printf_i+0x40>)
 800b604:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b608:	0800b661 	.word	0x0800b661
 800b60c:	0800b675 	.word	0x0800b675
 800b610:	0800b5f1 	.word	0x0800b5f1
 800b614:	0800b5f1 	.word	0x0800b5f1
 800b618:	0800b5f1 	.word	0x0800b5f1
 800b61c:	0800b5f1 	.word	0x0800b5f1
 800b620:	0800b675 	.word	0x0800b675
 800b624:	0800b5f1 	.word	0x0800b5f1
 800b628:	0800b5f1 	.word	0x0800b5f1
 800b62c:	0800b5f1 	.word	0x0800b5f1
 800b630:	0800b5f1 	.word	0x0800b5f1
 800b634:	0800b775 	.word	0x0800b775
 800b638:	0800b69f 	.word	0x0800b69f
 800b63c:	0800b72f 	.word	0x0800b72f
 800b640:	0800b5f1 	.word	0x0800b5f1
 800b644:	0800b5f1 	.word	0x0800b5f1
 800b648:	0800b797 	.word	0x0800b797
 800b64c:	0800b5f1 	.word	0x0800b5f1
 800b650:	0800b69f 	.word	0x0800b69f
 800b654:	0800b5f1 	.word	0x0800b5f1
 800b658:	0800b5f1 	.word	0x0800b5f1
 800b65c:	0800b737 	.word	0x0800b737
 800b660:	6833      	ldr	r3, [r6, #0]
 800b662:	1d1a      	adds	r2, r3, #4
 800b664:	681b      	ldr	r3, [r3, #0]
 800b666:	6032      	str	r2, [r6, #0]
 800b668:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b66c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b670:	2301      	movs	r3, #1
 800b672:	e09d      	b.n	800b7b0 <_printf_i+0x1e8>
 800b674:	6833      	ldr	r3, [r6, #0]
 800b676:	6820      	ldr	r0, [r4, #0]
 800b678:	1d19      	adds	r1, r3, #4
 800b67a:	6031      	str	r1, [r6, #0]
 800b67c:	0606      	lsls	r6, r0, #24
 800b67e:	d501      	bpl.n	800b684 <_printf_i+0xbc>
 800b680:	681d      	ldr	r5, [r3, #0]
 800b682:	e003      	b.n	800b68c <_printf_i+0xc4>
 800b684:	0645      	lsls	r5, r0, #25
 800b686:	d5fb      	bpl.n	800b680 <_printf_i+0xb8>
 800b688:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b68c:	2d00      	cmp	r5, #0
 800b68e:	da03      	bge.n	800b698 <_printf_i+0xd0>
 800b690:	232d      	movs	r3, #45	@ 0x2d
 800b692:	426d      	negs	r5, r5
 800b694:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b698:	4859      	ldr	r0, [pc, #356]	@ (800b800 <_printf_i+0x238>)
 800b69a:	230a      	movs	r3, #10
 800b69c:	e011      	b.n	800b6c2 <_printf_i+0xfa>
 800b69e:	6821      	ldr	r1, [r4, #0]
 800b6a0:	6833      	ldr	r3, [r6, #0]
 800b6a2:	0608      	lsls	r0, r1, #24
 800b6a4:	f853 5b04 	ldr.w	r5, [r3], #4
 800b6a8:	d402      	bmi.n	800b6b0 <_printf_i+0xe8>
 800b6aa:	0649      	lsls	r1, r1, #25
 800b6ac:	bf48      	it	mi
 800b6ae:	b2ad      	uxthmi	r5, r5
 800b6b0:	2f6f      	cmp	r7, #111	@ 0x6f
 800b6b2:	4853      	ldr	r0, [pc, #332]	@ (800b800 <_printf_i+0x238>)
 800b6b4:	6033      	str	r3, [r6, #0]
 800b6b6:	bf14      	ite	ne
 800b6b8:	230a      	movne	r3, #10
 800b6ba:	2308      	moveq	r3, #8
 800b6bc:	2100      	movs	r1, #0
 800b6be:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b6c2:	6866      	ldr	r6, [r4, #4]
 800b6c4:	60a6      	str	r6, [r4, #8]
 800b6c6:	2e00      	cmp	r6, #0
 800b6c8:	bfa2      	ittt	ge
 800b6ca:	6821      	ldrge	r1, [r4, #0]
 800b6cc:	f021 0104 	bicge.w	r1, r1, #4
 800b6d0:	6021      	strge	r1, [r4, #0]
 800b6d2:	b90d      	cbnz	r5, 800b6d8 <_printf_i+0x110>
 800b6d4:	2e00      	cmp	r6, #0
 800b6d6:	d04b      	beq.n	800b770 <_printf_i+0x1a8>
 800b6d8:	4616      	mov	r6, r2
 800b6da:	fbb5 f1f3 	udiv	r1, r5, r3
 800b6de:	fb03 5711 	mls	r7, r3, r1, r5
 800b6e2:	5dc7      	ldrb	r7, [r0, r7]
 800b6e4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b6e8:	462f      	mov	r7, r5
 800b6ea:	42bb      	cmp	r3, r7
 800b6ec:	460d      	mov	r5, r1
 800b6ee:	d9f4      	bls.n	800b6da <_printf_i+0x112>
 800b6f0:	2b08      	cmp	r3, #8
 800b6f2:	d10b      	bne.n	800b70c <_printf_i+0x144>
 800b6f4:	6823      	ldr	r3, [r4, #0]
 800b6f6:	07df      	lsls	r7, r3, #31
 800b6f8:	d508      	bpl.n	800b70c <_printf_i+0x144>
 800b6fa:	6923      	ldr	r3, [r4, #16]
 800b6fc:	6861      	ldr	r1, [r4, #4]
 800b6fe:	4299      	cmp	r1, r3
 800b700:	bfde      	ittt	le
 800b702:	2330      	movle	r3, #48	@ 0x30
 800b704:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b708:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b70c:	1b92      	subs	r2, r2, r6
 800b70e:	6122      	str	r2, [r4, #16]
 800b710:	f8cd a000 	str.w	sl, [sp]
 800b714:	464b      	mov	r3, r9
 800b716:	aa03      	add	r2, sp, #12
 800b718:	4621      	mov	r1, r4
 800b71a:	4640      	mov	r0, r8
 800b71c:	f7ff fee6 	bl	800b4ec <_printf_common>
 800b720:	3001      	adds	r0, #1
 800b722:	d14a      	bne.n	800b7ba <_printf_i+0x1f2>
 800b724:	f04f 30ff 	mov.w	r0, #4294967295
 800b728:	b004      	add	sp, #16
 800b72a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b72e:	6823      	ldr	r3, [r4, #0]
 800b730:	f043 0320 	orr.w	r3, r3, #32
 800b734:	6023      	str	r3, [r4, #0]
 800b736:	4833      	ldr	r0, [pc, #204]	@ (800b804 <_printf_i+0x23c>)
 800b738:	2778      	movs	r7, #120	@ 0x78
 800b73a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b73e:	6823      	ldr	r3, [r4, #0]
 800b740:	6831      	ldr	r1, [r6, #0]
 800b742:	061f      	lsls	r7, r3, #24
 800b744:	f851 5b04 	ldr.w	r5, [r1], #4
 800b748:	d402      	bmi.n	800b750 <_printf_i+0x188>
 800b74a:	065f      	lsls	r7, r3, #25
 800b74c:	bf48      	it	mi
 800b74e:	b2ad      	uxthmi	r5, r5
 800b750:	6031      	str	r1, [r6, #0]
 800b752:	07d9      	lsls	r1, r3, #31
 800b754:	bf44      	itt	mi
 800b756:	f043 0320 	orrmi.w	r3, r3, #32
 800b75a:	6023      	strmi	r3, [r4, #0]
 800b75c:	b11d      	cbz	r5, 800b766 <_printf_i+0x19e>
 800b75e:	2310      	movs	r3, #16
 800b760:	e7ac      	b.n	800b6bc <_printf_i+0xf4>
 800b762:	4827      	ldr	r0, [pc, #156]	@ (800b800 <_printf_i+0x238>)
 800b764:	e7e9      	b.n	800b73a <_printf_i+0x172>
 800b766:	6823      	ldr	r3, [r4, #0]
 800b768:	f023 0320 	bic.w	r3, r3, #32
 800b76c:	6023      	str	r3, [r4, #0]
 800b76e:	e7f6      	b.n	800b75e <_printf_i+0x196>
 800b770:	4616      	mov	r6, r2
 800b772:	e7bd      	b.n	800b6f0 <_printf_i+0x128>
 800b774:	6833      	ldr	r3, [r6, #0]
 800b776:	6825      	ldr	r5, [r4, #0]
 800b778:	6961      	ldr	r1, [r4, #20]
 800b77a:	1d18      	adds	r0, r3, #4
 800b77c:	6030      	str	r0, [r6, #0]
 800b77e:	062e      	lsls	r6, r5, #24
 800b780:	681b      	ldr	r3, [r3, #0]
 800b782:	d501      	bpl.n	800b788 <_printf_i+0x1c0>
 800b784:	6019      	str	r1, [r3, #0]
 800b786:	e002      	b.n	800b78e <_printf_i+0x1c6>
 800b788:	0668      	lsls	r0, r5, #25
 800b78a:	d5fb      	bpl.n	800b784 <_printf_i+0x1bc>
 800b78c:	8019      	strh	r1, [r3, #0]
 800b78e:	2300      	movs	r3, #0
 800b790:	6123      	str	r3, [r4, #16]
 800b792:	4616      	mov	r6, r2
 800b794:	e7bc      	b.n	800b710 <_printf_i+0x148>
 800b796:	6833      	ldr	r3, [r6, #0]
 800b798:	1d1a      	adds	r2, r3, #4
 800b79a:	6032      	str	r2, [r6, #0]
 800b79c:	681e      	ldr	r6, [r3, #0]
 800b79e:	6862      	ldr	r2, [r4, #4]
 800b7a0:	2100      	movs	r1, #0
 800b7a2:	4630      	mov	r0, r6
 800b7a4:	f7f4 fd24 	bl	80001f0 <memchr>
 800b7a8:	b108      	cbz	r0, 800b7ae <_printf_i+0x1e6>
 800b7aa:	1b80      	subs	r0, r0, r6
 800b7ac:	6060      	str	r0, [r4, #4]
 800b7ae:	6863      	ldr	r3, [r4, #4]
 800b7b0:	6123      	str	r3, [r4, #16]
 800b7b2:	2300      	movs	r3, #0
 800b7b4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b7b8:	e7aa      	b.n	800b710 <_printf_i+0x148>
 800b7ba:	6923      	ldr	r3, [r4, #16]
 800b7bc:	4632      	mov	r2, r6
 800b7be:	4649      	mov	r1, r9
 800b7c0:	4640      	mov	r0, r8
 800b7c2:	47d0      	blx	sl
 800b7c4:	3001      	adds	r0, #1
 800b7c6:	d0ad      	beq.n	800b724 <_printf_i+0x15c>
 800b7c8:	6823      	ldr	r3, [r4, #0]
 800b7ca:	079b      	lsls	r3, r3, #30
 800b7cc:	d413      	bmi.n	800b7f6 <_printf_i+0x22e>
 800b7ce:	68e0      	ldr	r0, [r4, #12]
 800b7d0:	9b03      	ldr	r3, [sp, #12]
 800b7d2:	4298      	cmp	r0, r3
 800b7d4:	bfb8      	it	lt
 800b7d6:	4618      	movlt	r0, r3
 800b7d8:	e7a6      	b.n	800b728 <_printf_i+0x160>
 800b7da:	2301      	movs	r3, #1
 800b7dc:	4632      	mov	r2, r6
 800b7de:	4649      	mov	r1, r9
 800b7e0:	4640      	mov	r0, r8
 800b7e2:	47d0      	blx	sl
 800b7e4:	3001      	adds	r0, #1
 800b7e6:	d09d      	beq.n	800b724 <_printf_i+0x15c>
 800b7e8:	3501      	adds	r5, #1
 800b7ea:	68e3      	ldr	r3, [r4, #12]
 800b7ec:	9903      	ldr	r1, [sp, #12]
 800b7ee:	1a5b      	subs	r3, r3, r1
 800b7f0:	42ab      	cmp	r3, r5
 800b7f2:	dcf2      	bgt.n	800b7da <_printf_i+0x212>
 800b7f4:	e7eb      	b.n	800b7ce <_printf_i+0x206>
 800b7f6:	2500      	movs	r5, #0
 800b7f8:	f104 0619 	add.w	r6, r4, #25
 800b7fc:	e7f5      	b.n	800b7ea <_printf_i+0x222>
 800b7fe:	bf00      	nop
 800b800:	08013b81 	.word	0x08013b81
 800b804:	08013b92 	.word	0x08013b92

0800b808 <_scanf_float>:
 800b808:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b80c:	b087      	sub	sp, #28
 800b80e:	4617      	mov	r7, r2
 800b810:	9303      	str	r3, [sp, #12]
 800b812:	688b      	ldr	r3, [r1, #8]
 800b814:	1e5a      	subs	r2, r3, #1
 800b816:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800b81a:	bf81      	itttt	hi
 800b81c:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800b820:	eb03 0b05 	addhi.w	fp, r3, r5
 800b824:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800b828:	608b      	strhi	r3, [r1, #8]
 800b82a:	680b      	ldr	r3, [r1, #0]
 800b82c:	460a      	mov	r2, r1
 800b82e:	f04f 0500 	mov.w	r5, #0
 800b832:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800b836:	f842 3b1c 	str.w	r3, [r2], #28
 800b83a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800b83e:	4680      	mov	r8, r0
 800b840:	460c      	mov	r4, r1
 800b842:	bf98      	it	ls
 800b844:	f04f 0b00 	movls.w	fp, #0
 800b848:	9201      	str	r2, [sp, #4]
 800b84a:	4616      	mov	r6, r2
 800b84c:	46aa      	mov	sl, r5
 800b84e:	46a9      	mov	r9, r5
 800b850:	9502      	str	r5, [sp, #8]
 800b852:	68a2      	ldr	r2, [r4, #8]
 800b854:	b152      	cbz	r2, 800b86c <_scanf_float+0x64>
 800b856:	683b      	ldr	r3, [r7, #0]
 800b858:	781b      	ldrb	r3, [r3, #0]
 800b85a:	2b4e      	cmp	r3, #78	@ 0x4e
 800b85c:	d864      	bhi.n	800b928 <_scanf_float+0x120>
 800b85e:	2b40      	cmp	r3, #64	@ 0x40
 800b860:	d83c      	bhi.n	800b8dc <_scanf_float+0xd4>
 800b862:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800b866:	b2c8      	uxtb	r0, r1
 800b868:	280e      	cmp	r0, #14
 800b86a:	d93a      	bls.n	800b8e2 <_scanf_float+0xda>
 800b86c:	f1b9 0f00 	cmp.w	r9, #0
 800b870:	d003      	beq.n	800b87a <_scanf_float+0x72>
 800b872:	6823      	ldr	r3, [r4, #0]
 800b874:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b878:	6023      	str	r3, [r4, #0]
 800b87a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b87e:	f1ba 0f01 	cmp.w	sl, #1
 800b882:	f200 8117 	bhi.w	800bab4 <_scanf_float+0x2ac>
 800b886:	9b01      	ldr	r3, [sp, #4]
 800b888:	429e      	cmp	r6, r3
 800b88a:	f200 8108 	bhi.w	800ba9e <_scanf_float+0x296>
 800b88e:	2001      	movs	r0, #1
 800b890:	b007      	add	sp, #28
 800b892:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b896:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800b89a:	2a0d      	cmp	r2, #13
 800b89c:	d8e6      	bhi.n	800b86c <_scanf_float+0x64>
 800b89e:	a101      	add	r1, pc, #4	@ (adr r1, 800b8a4 <_scanf_float+0x9c>)
 800b8a0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800b8a4:	0800b9eb 	.word	0x0800b9eb
 800b8a8:	0800b86d 	.word	0x0800b86d
 800b8ac:	0800b86d 	.word	0x0800b86d
 800b8b0:	0800b86d 	.word	0x0800b86d
 800b8b4:	0800ba4b 	.word	0x0800ba4b
 800b8b8:	0800ba23 	.word	0x0800ba23
 800b8bc:	0800b86d 	.word	0x0800b86d
 800b8c0:	0800b86d 	.word	0x0800b86d
 800b8c4:	0800b9f9 	.word	0x0800b9f9
 800b8c8:	0800b86d 	.word	0x0800b86d
 800b8cc:	0800b86d 	.word	0x0800b86d
 800b8d0:	0800b86d 	.word	0x0800b86d
 800b8d4:	0800b86d 	.word	0x0800b86d
 800b8d8:	0800b9b1 	.word	0x0800b9b1
 800b8dc:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800b8e0:	e7db      	b.n	800b89a <_scanf_float+0x92>
 800b8e2:	290e      	cmp	r1, #14
 800b8e4:	d8c2      	bhi.n	800b86c <_scanf_float+0x64>
 800b8e6:	a001      	add	r0, pc, #4	@ (adr r0, 800b8ec <_scanf_float+0xe4>)
 800b8e8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800b8ec:	0800b9a1 	.word	0x0800b9a1
 800b8f0:	0800b86d 	.word	0x0800b86d
 800b8f4:	0800b9a1 	.word	0x0800b9a1
 800b8f8:	0800ba37 	.word	0x0800ba37
 800b8fc:	0800b86d 	.word	0x0800b86d
 800b900:	0800b949 	.word	0x0800b949
 800b904:	0800b987 	.word	0x0800b987
 800b908:	0800b987 	.word	0x0800b987
 800b90c:	0800b987 	.word	0x0800b987
 800b910:	0800b987 	.word	0x0800b987
 800b914:	0800b987 	.word	0x0800b987
 800b918:	0800b987 	.word	0x0800b987
 800b91c:	0800b987 	.word	0x0800b987
 800b920:	0800b987 	.word	0x0800b987
 800b924:	0800b987 	.word	0x0800b987
 800b928:	2b6e      	cmp	r3, #110	@ 0x6e
 800b92a:	d809      	bhi.n	800b940 <_scanf_float+0x138>
 800b92c:	2b60      	cmp	r3, #96	@ 0x60
 800b92e:	d8b2      	bhi.n	800b896 <_scanf_float+0x8e>
 800b930:	2b54      	cmp	r3, #84	@ 0x54
 800b932:	d07b      	beq.n	800ba2c <_scanf_float+0x224>
 800b934:	2b59      	cmp	r3, #89	@ 0x59
 800b936:	d199      	bne.n	800b86c <_scanf_float+0x64>
 800b938:	2d07      	cmp	r5, #7
 800b93a:	d197      	bne.n	800b86c <_scanf_float+0x64>
 800b93c:	2508      	movs	r5, #8
 800b93e:	e02c      	b.n	800b99a <_scanf_float+0x192>
 800b940:	2b74      	cmp	r3, #116	@ 0x74
 800b942:	d073      	beq.n	800ba2c <_scanf_float+0x224>
 800b944:	2b79      	cmp	r3, #121	@ 0x79
 800b946:	e7f6      	b.n	800b936 <_scanf_float+0x12e>
 800b948:	6821      	ldr	r1, [r4, #0]
 800b94a:	05c8      	lsls	r0, r1, #23
 800b94c:	d51b      	bpl.n	800b986 <_scanf_float+0x17e>
 800b94e:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800b952:	6021      	str	r1, [r4, #0]
 800b954:	f109 0901 	add.w	r9, r9, #1
 800b958:	f1bb 0f00 	cmp.w	fp, #0
 800b95c:	d003      	beq.n	800b966 <_scanf_float+0x15e>
 800b95e:	3201      	adds	r2, #1
 800b960:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b964:	60a2      	str	r2, [r4, #8]
 800b966:	68a3      	ldr	r3, [r4, #8]
 800b968:	3b01      	subs	r3, #1
 800b96a:	60a3      	str	r3, [r4, #8]
 800b96c:	6923      	ldr	r3, [r4, #16]
 800b96e:	3301      	adds	r3, #1
 800b970:	6123      	str	r3, [r4, #16]
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	3b01      	subs	r3, #1
 800b976:	2b00      	cmp	r3, #0
 800b978:	607b      	str	r3, [r7, #4]
 800b97a:	f340 8087 	ble.w	800ba8c <_scanf_float+0x284>
 800b97e:	683b      	ldr	r3, [r7, #0]
 800b980:	3301      	adds	r3, #1
 800b982:	603b      	str	r3, [r7, #0]
 800b984:	e765      	b.n	800b852 <_scanf_float+0x4a>
 800b986:	eb1a 0105 	adds.w	r1, sl, r5
 800b98a:	f47f af6f 	bne.w	800b86c <_scanf_float+0x64>
 800b98e:	6822      	ldr	r2, [r4, #0]
 800b990:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800b994:	6022      	str	r2, [r4, #0]
 800b996:	460d      	mov	r5, r1
 800b998:	468a      	mov	sl, r1
 800b99a:	f806 3b01 	strb.w	r3, [r6], #1
 800b99e:	e7e2      	b.n	800b966 <_scanf_float+0x15e>
 800b9a0:	6822      	ldr	r2, [r4, #0]
 800b9a2:	0610      	lsls	r0, r2, #24
 800b9a4:	f57f af62 	bpl.w	800b86c <_scanf_float+0x64>
 800b9a8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800b9ac:	6022      	str	r2, [r4, #0]
 800b9ae:	e7f4      	b.n	800b99a <_scanf_float+0x192>
 800b9b0:	f1ba 0f00 	cmp.w	sl, #0
 800b9b4:	d10e      	bne.n	800b9d4 <_scanf_float+0x1cc>
 800b9b6:	f1b9 0f00 	cmp.w	r9, #0
 800b9ba:	d10e      	bne.n	800b9da <_scanf_float+0x1d2>
 800b9bc:	6822      	ldr	r2, [r4, #0]
 800b9be:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800b9c2:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800b9c6:	d108      	bne.n	800b9da <_scanf_float+0x1d2>
 800b9c8:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800b9cc:	6022      	str	r2, [r4, #0]
 800b9ce:	f04f 0a01 	mov.w	sl, #1
 800b9d2:	e7e2      	b.n	800b99a <_scanf_float+0x192>
 800b9d4:	f1ba 0f02 	cmp.w	sl, #2
 800b9d8:	d055      	beq.n	800ba86 <_scanf_float+0x27e>
 800b9da:	2d01      	cmp	r5, #1
 800b9dc:	d002      	beq.n	800b9e4 <_scanf_float+0x1dc>
 800b9de:	2d04      	cmp	r5, #4
 800b9e0:	f47f af44 	bne.w	800b86c <_scanf_float+0x64>
 800b9e4:	3501      	adds	r5, #1
 800b9e6:	b2ed      	uxtb	r5, r5
 800b9e8:	e7d7      	b.n	800b99a <_scanf_float+0x192>
 800b9ea:	f1ba 0f01 	cmp.w	sl, #1
 800b9ee:	f47f af3d 	bne.w	800b86c <_scanf_float+0x64>
 800b9f2:	f04f 0a02 	mov.w	sl, #2
 800b9f6:	e7d0      	b.n	800b99a <_scanf_float+0x192>
 800b9f8:	b97d      	cbnz	r5, 800ba1a <_scanf_float+0x212>
 800b9fa:	f1b9 0f00 	cmp.w	r9, #0
 800b9fe:	f47f af38 	bne.w	800b872 <_scanf_float+0x6a>
 800ba02:	6822      	ldr	r2, [r4, #0]
 800ba04:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800ba08:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800ba0c:	f040 8108 	bne.w	800bc20 <_scanf_float+0x418>
 800ba10:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800ba14:	6022      	str	r2, [r4, #0]
 800ba16:	2501      	movs	r5, #1
 800ba18:	e7bf      	b.n	800b99a <_scanf_float+0x192>
 800ba1a:	2d03      	cmp	r5, #3
 800ba1c:	d0e2      	beq.n	800b9e4 <_scanf_float+0x1dc>
 800ba1e:	2d05      	cmp	r5, #5
 800ba20:	e7de      	b.n	800b9e0 <_scanf_float+0x1d8>
 800ba22:	2d02      	cmp	r5, #2
 800ba24:	f47f af22 	bne.w	800b86c <_scanf_float+0x64>
 800ba28:	2503      	movs	r5, #3
 800ba2a:	e7b6      	b.n	800b99a <_scanf_float+0x192>
 800ba2c:	2d06      	cmp	r5, #6
 800ba2e:	f47f af1d 	bne.w	800b86c <_scanf_float+0x64>
 800ba32:	2507      	movs	r5, #7
 800ba34:	e7b1      	b.n	800b99a <_scanf_float+0x192>
 800ba36:	6822      	ldr	r2, [r4, #0]
 800ba38:	0591      	lsls	r1, r2, #22
 800ba3a:	f57f af17 	bpl.w	800b86c <_scanf_float+0x64>
 800ba3e:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800ba42:	6022      	str	r2, [r4, #0]
 800ba44:	f8cd 9008 	str.w	r9, [sp, #8]
 800ba48:	e7a7      	b.n	800b99a <_scanf_float+0x192>
 800ba4a:	6822      	ldr	r2, [r4, #0]
 800ba4c:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800ba50:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800ba54:	d006      	beq.n	800ba64 <_scanf_float+0x25c>
 800ba56:	0550      	lsls	r0, r2, #21
 800ba58:	f57f af08 	bpl.w	800b86c <_scanf_float+0x64>
 800ba5c:	f1b9 0f00 	cmp.w	r9, #0
 800ba60:	f000 80de 	beq.w	800bc20 <_scanf_float+0x418>
 800ba64:	0591      	lsls	r1, r2, #22
 800ba66:	bf58      	it	pl
 800ba68:	9902      	ldrpl	r1, [sp, #8]
 800ba6a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800ba6e:	bf58      	it	pl
 800ba70:	eba9 0101 	subpl.w	r1, r9, r1
 800ba74:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800ba78:	bf58      	it	pl
 800ba7a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800ba7e:	6022      	str	r2, [r4, #0]
 800ba80:	f04f 0900 	mov.w	r9, #0
 800ba84:	e789      	b.n	800b99a <_scanf_float+0x192>
 800ba86:	f04f 0a03 	mov.w	sl, #3
 800ba8a:	e786      	b.n	800b99a <_scanf_float+0x192>
 800ba8c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800ba90:	4639      	mov	r1, r7
 800ba92:	4640      	mov	r0, r8
 800ba94:	4798      	blx	r3
 800ba96:	2800      	cmp	r0, #0
 800ba98:	f43f aedb 	beq.w	800b852 <_scanf_float+0x4a>
 800ba9c:	e6e6      	b.n	800b86c <_scanf_float+0x64>
 800ba9e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800baa2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800baa6:	463a      	mov	r2, r7
 800baa8:	4640      	mov	r0, r8
 800baaa:	4798      	blx	r3
 800baac:	6923      	ldr	r3, [r4, #16]
 800baae:	3b01      	subs	r3, #1
 800bab0:	6123      	str	r3, [r4, #16]
 800bab2:	e6e8      	b.n	800b886 <_scanf_float+0x7e>
 800bab4:	1e6b      	subs	r3, r5, #1
 800bab6:	2b06      	cmp	r3, #6
 800bab8:	d824      	bhi.n	800bb04 <_scanf_float+0x2fc>
 800baba:	2d02      	cmp	r5, #2
 800babc:	d836      	bhi.n	800bb2c <_scanf_float+0x324>
 800babe:	9b01      	ldr	r3, [sp, #4]
 800bac0:	429e      	cmp	r6, r3
 800bac2:	f67f aee4 	bls.w	800b88e <_scanf_float+0x86>
 800bac6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800baca:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800bace:	463a      	mov	r2, r7
 800bad0:	4640      	mov	r0, r8
 800bad2:	4798      	blx	r3
 800bad4:	6923      	ldr	r3, [r4, #16]
 800bad6:	3b01      	subs	r3, #1
 800bad8:	6123      	str	r3, [r4, #16]
 800bada:	e7f0      	b.n	800babe <_scanf_float+0x2b6>
 800badc:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800bae0:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800bae4:	463a      	mov	r2, r7
 800bae6:	4640      	mov	r0, r8
 800bae8:	4798      	blx	r3
 800baea:	6923      	ldr	r3, [r4, #16]
 800baec:	3b01      	subs	r3, #1
 800baee:	6123      	str	r3, [r4, #16]
 800baf0:	f10a 3aff 	add.w	sl, sl, #4294967295
 800baf4:	fa5f fa8a 	uxtb.w	sl, sl
 800baf8:	f1ba 0f02 	cmp.w	sl, #2
 800bafc:	d1ee      	bne.n	800badc <_scanf_float+0x2d4>
 800bafe:	3d03      	subs	r5, #3
 800bb00:	b2ed      	uxtb	r5, r5
 800bb02:	1b76      	subs	r6, r6, r5
 800bb04:	6823      	ldr	r3, [r4, #0]
 800bb06:	05da      	lsls	r2, r3, #23
 800bb08:	d530      	bpl.n	800bb6c <_scanf_float+0x364>
 800bb0a:	055b      	lsls	r3, r3, #21
 800bb0c:	d511      	bpl.n	800bb32 <_scanf_float+0x32a>
 800bb0e:	9b01      	ldr	r3, [sp, #4]
 800bb10:	429e      	cmp	r6, r3
 800bb12:	f67f aebc 	bls.w	800b88e <_scanf_float+0x86>
 800bb16:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800bb1a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800bb1e:	463a      	mov	r2, r7
 800bb20:	4640      	mov	r0, r8
 800bb22:	4798      	blx	r3
 800bb24:	6923      	ldr	r3, [r4, #16]
 800bb26:	3b01      	subs	r3, #1
 800bb28:	6123      	str	r3, [r4, #16]
 800bb2a:	e7f0      	b.n	800bb0e <_scanf_float+0x306>
 800bb2c:	46aa      	mov	sl, r5
 800bb2e:	46b3      	mov	fp, r6
 800bb30:	e7de      	b.n	800baf0 <_scanf_float+0x2e8>
 800bb32:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800bb36:	6923      	ldr	r3, [r4, #16]
 800bb38:	2965      	cmp	r1, #101	@ 0x65
 800bb3a:	f103 33ff 	add.w	r3, r3, #4294967295
 800bb3e:	f106 35ff 	add.w	r5, r6, #4294967295
 800bb42:	6123      	str	r3, [r4, #16]
 800bb44:	d00c      	beq.n	800bb60 <_scanf_float+0x358>
 800bb46:	2945      	cmp	r1, #69	@ 0x45
 800bb48:	d00a      	beq.n	800bb60 <_scanf_float+0x358>
 800bb4a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800bb4e:	463a      	mov	r2, r7
 800bb50:	4640      	mov	r0, r8
 800bb52:	4798      	blx	r3
 800bb54:	6923      	ldr	r3, [r4, #16]
 800bb56:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800bb5a:	3b01      	subs	r3, #1
 800bb5c:	1eb5      	subs	r5, r6, #2
 800bb5e:	6123      	str	r3, [r4, #16]
 800bb60:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800bb64:	463a      	mov	r2, r7
 800bb66:	4640      	mov	r0, r8
 800bb68:	4798      	blx	r3
 800bb6a:	462e      	mov	r6, r5
 800bb6c:	6822      	ldr	r2, [r4, #0]
 800bb6e:	f012 0210 	ands.w	r2, r2, #16
 800bb72:	d001      	beq.n	800bb78 <_scanf_float+0x370>
 800bb74:	2000      	movs	r0, #0
 800bb76:	e68b      	b.n	800b890 <_scanf_float+0x88>
 800bb78:	7032      	strb	r2, [r6, #0]
 800bb7a:	6823      	ldr	r3, [r4, #0]
 800bb7c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800bb80:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800bb84:	d11c      	bne.n	800bbc0 <_scanf_float+0x3b8>
 800bb86:	9b02      	ldr	r3, [sp, #8]
 800bb88:	454b      	cmp	r3, r9
 800bb8a:	eba3 0209 	sub.w	r2, r3, r9
 800bb8e:	d123      	bne.n	800bbd8 <_scanf_float+0x3d0>
 800bb90:	9901      	ldr	r1, [sp, #4]
 800bb92:	2200      	movs	r2, #0
 800bb94:	4640      	mov	r0, r8
 800bb96:	f7ff f947 	bl	800ae28 <_strtod_r>
 800bb9a:	9b03      	ldr	r3, [sp, #12]
 800bb9c:	6821      	ldr	r1, [r4, #0]
 800bb9e:	681b      	ldr	r3, [r3, #0]
 800bba0:	f011 0f02 	tst.w	r1, #2
 800bba4:	ec57 6b10 	vmov	r6, r7, d0
 800bba8:	f103 0204 	add.w	r2, r3, #4
 800bbac:	d01f      	beq.n	800bbee <_scanf_float+0x3e6>
 800bbae:	9903      	ldr	r1, [sp, #12]
 800bbb0:	600a      	str	r2, [r1, #0]
 800bbb2:	681b      	ldr	r3, [r3, #0]
 800bbb4:	e9c3 6700 	strd	r6, r7, [r3]
 800bbb8:	68e3      	ldr	r3, [r4, #12]
 800bbba:	3301      	adds	r3, #1
 800bbbc:	60e3      	str	r3, [r4, #12]
 800bbbe:	e7d9      	b.n	800bb74 <_scanf_float+0x36c>
 800bbc0:	9b04      	ldr	r3, [sp, #16]
 800bbc2:	2b00      	cmp	r3, #0
 800bbc4:	d0e4      	beq.n	800bb90 <_scanf_float+0x388>
 800bbc6:	9905      	ldr	r1, [sp, #20]
 800bbc8:	230a      	movs	r3, #10
 800bbca:	3101      	adds	r1, #1
 800bbcc:	4640      	mov	r0, r8
 800bbce:	f7ff f9b7 	bl	800af40 <_strtol_r>
 800bbd2:	9b04      	ldr	r3, [sp, #16]
 800bbd4:	9e05      	ldr	r6, [sp, #20]
 800bbd6:	1ac2      	subs	r2, r0, r3
 800bbd8:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800bbdc:	429e      	cmp	r6, r3
 800bbde:	bf28      	it	cs
 800bbe0:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800bbe4:	4910      	ldr	r1, [pc, #64]	@ (800bc28 <_scanf_float+0x420>)
 800bbe6:	4630      	mov	r0, r6
 800bbe8:	f000 f918 	bl	800be1c <siprintf>
 800bbec:	e7d0      	b.n	800bb90 <_scanf_float+0x388>
 800bbee:	f011 0f04 	tst.w	r1, #4
 800bbf2:	9903      	ldr	r1, [sp, #12]
 800bbf4:	600a      	str	r2, [r1, #0]
 800bbf6:	d1dc      	bne.n	800bbb2 <_scanf_float+0x3aa>
 800bbf8:	681d      	ldr	r5, [r3, #0]
 800bbfa:	4632      	mov	r2, r6
 800bbfc:	463b      	mov	r3, r7
 800bbfe:	4630      	mov	r0, r6
 800bc00:	4639      	mov	r1, r7
 800bc02:	f7f4 ffa3 	bl	8000b4c <__aeabi_dcmpun>
 800bc06:	b128      	cbz	r0, 800bc14 <_scanf_float+0x40c>
 800bc08:	4808      	ldr	r0, [pc, #32]	@ (800bc2c <_scanf_float+0x424>)
 800bc0a:	f001 f839 	bl	800cc80 <nanf>
 800bc0e:	ed85 0a00 	vstr	s0, [r5]
 800bc12:	e7d1      	b.n	800bbb8 <_scanf_float+0x3b0>
 800bc14:	4630      	mov	r0, r6
 800bc16:	4639      	mov	r1, r7
 800bc18:	f7f4 fff6 	bl	8000c08 <__aeabi_d2f>
 800bc1c:	6028      	str	r0, [r5, #0]
 800bc1e:	e7cb      	b.n	800bbb8 <_scanf_float+0x3b0>
 800bc20:	f04f 0900 	mov.w	r9, #0
 800bc24:	e629      	b.n	800b87a <_scanf_float+0x72>
 800bc26:	bf00      	nop
 800bc28:	08013ba3 	.word	0x08013ba3
 800bc2c:	0801296b 	.word	0x0801296b

0800bc30 <std>:
 800bc30:	2300      	movs	r3, #0
 800bc32:	b510      	push	{r4, lr}
 800bc34:	4604      	mov	r4, r0
 800bc36:	e9c0 3300 	strd	r3, r3, [r0]
 800bc3a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800bc3e:	6083      	str	r3, [r0, #8]
 800bc40:	8181      	strh	r1, [r0, #12]
 800bc42:	6643      	str	r3, [r0, #100]	@ 0x64
 800bc44:	81c2      	strh	r2, [r0, #14]
 800bc46:	6183      	str	r3, [r0, #24]
 800bc48:	4619      	mov	r1, r3
 800bc4a:	2208      	movs	r2, #8
 800bc4c:	305c      	adds	r0, #92	@ 0x5c
 800bc4e:	f000 f9ad 	bl	800bfac <memset>
 800bc52:	4b0d      	ldr	r3, [pc, #52]	@ (800bc88 <std+0x58>)
 800bc54:	6263      	str	r3, [r4, #36]	@ 0x24
 800bc56:	4b0d      	ldr	r3, [pc, #52]	@ (800bc8c <std+0x5c>)
 800bc58:	62a3      	str	r3, [r4, #40]	@ 0x28
 800bc5a:	4b0d      	ldr	r3, [pc, #52]	@ (800bc90 <std+0x60>)
 800bc5c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800bc5e:	4b0d      	ldr	r3, [pc, #52]	@ (800bc94 <std+0x64>)
 800bc60:	6323      	str	r3, [r4, #48]	@ 0x30
 800bc62:	4b0d      	ldr	r3, [pc, #52]	@ (800bc98 <std+0x68>)
 800bc64:	6224      	str	r4, [r4, #32]
 800bc66:	429c      	cmp	r4, r3
 800bc68:	d006      	beq.n	800bc78 <std+0x48>
 800bc6a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800bc6e:	4294      	cmp	r4, r2
 800bc70:	d002      	beq.n	800bc78 <std+0x48>
 800bc72:	33d0      	adds	r3, #208	@ 0xd0
 800bc74:	429c      	cmp	r4, r3
 800bc76:	d105      	bne.n	800bc84 <std+0x54>
 800bc78:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800bc7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bc80:	f7f9 bae1 	b.w	8005246 <__retarget_lock_init_recursive>
 800bc84:	bd10      	pop	{r4, pc}
 800bc86:	bf00      	nop
 800bc88:	0800beb1 	.word	0x0800beb1
 800bc8c:	0800bed7 	.word	0x0800bed7
 800bc90:	0800bf0f 	.word	0x0800bf0f
 800bc94:	0800bf33 	.word	0x0800bf33
 800bc98:	20009834 	.word	0x20009834

0800bc9c <stdio_exit_handler>:
 800bc9c:	4a02      	ldr	r2, [pc, #8]	@ (800bca8 <stdio_exit_handler+0xc>)
 800bc9e:	4903      	ldr	r1, [pc, #12]	@ (800bcac <stdio_exit_handler+0x10>)
 800bca0:	4803      	ldr	r0, [pc, #12]	@ (800bcb0 <stdio_exit_handler+0x14>)
 800bca2:	f000 b869 	b.w	800bd78 <_fwalk_sglue>
 800bca6:	bf00      	nop
 800bca8:	20000024 	.word	0x20000024
 800bcac:	0800f549 	.word	0x0800f549
 800bcb0:	200001a8 	.word	0x200001a8

0800bcb4 <cleanup_stdio>:
 800bcb4:	6841      	ldr	r1, [r0, #4]
 800bcb6:	4b0c      	ldr	r3, [pc, #48]	@ (800bce8 <cleanup_stdio+0x34>)
 800bcb8:	4299      	cmp	r1, r3
 800bcba:	b510      	push	{r4, lr}
 800bcbc:	4604      	mov	r4, r0
 800bcbe:	d001      	beq.n	800bcc4 <cleanup_stdio+0x10>
 800bcc0:	f003 fc42 	bl	800f548 <_fflush_r>
 800bcc4:	68a1      	ldr	r1, [r4, #8]
 800bcc6:	4b09      	ldr	r3, [pc, #36]	@ (800bcec <cleanup_stdio+0x38>)
 800bcc8:	4299      	cmp	r1, r3
 800bcca:	d002      	beq.n	800bcd2 <cleanup_stdio+0x1e>
 800bccc:	4620      	mov	r0, r4
 800bcce:	f003 fc3b 	bl	800f548 <_fflush_r>
 800bcd2:	68e1      	ldr	r1, [r4, #12]
 800bcd4:	4b06      	ldr	r3, [pc, #24]	@ (800bcf0 <cleanup_stdio+0x3c>)
 800bcd6:	4299      	cmp	r1, r3
 800bcd8:	d004      	beq.n	800bce4 <cleanup_stdio+0x30>
 800bcda:	4620      	mov	r0, r4
 800bcdc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bce0:	f003 bc32 	b.w	800f548 <_fflush_r>
 800bce4:	bd10      	pop	{r4, pc}
 800bce6:	bf00      	nop
 800bce8:	20009834 	.word	0x20009834
 800bcec:	2000989c 	.word	0x2000989c
 800bcf0:	20009904 	.word	0x20009904

0800bcf4 <global_stdio_init.part.0>:
 800bcf4:	b510      	push	{r4, lr}
 800bcf6:	4b0b      	ldr	r3, [pc, #44]	@ (800bd24 <global_stdio_init.part.0+0x30>)
 800bcf8:	4c0b      	ldr	r4, [pc, #44]	@ (800bd28 <global_stdio_init.part.0+0x34>)
 800bcfa:	4a0c      	ldr	r2, [pc, #48]	@ (800bd2c <global_stdio_init.part.0+0x38>)
 800bcfc:	601a      	str	r2, [r3, #0]
 800bcfe:	4620      	mov	r0, r4
 800bd00:	2200      	movs	r2, #0
 800bd02:	2104      	movs	r1, #4
 800bd04:	f7ff ff94 	bl	800bc30 <std>
 800bd08:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800bd0c:	2201      	movs	r2, #1
 800bd0e:	2109      	movs	r1, #9
 800bd10:	f7ff ff8e 	bl	800bc30 <std>
 800bd14:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800bd18:	2202      	movs	r2, #2
 800bd1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bd1e:	2112      	movs	r1, #18
 800bd20:	f7ff bf86 	b.w	800bc30 <std>
 800bd24:	2000996c 	.word	0x2000996c
 800bd28:	20009834 	.word	0x20009834
 800bd2c:	0800bc9d 	.word	0x0800bc9d

0800bd30 <__sfp_lock_acquire>:
 800bd30:	4801      	ldr	r0, [pc, #4]	@ (800bd38 <__sfp_lock_acquire+0x8>)
 800bd32:	f7f9 baa4 	b.w	800527e <__retarget_lock_acquire_recursive>
 800bd36:	bf00      	nop
 800bd38:	20002848 	.word	0x20002848

0800bd3c <__sfp_lock_release>:
 800bd3c:	4801      	ldr	r0, [pc, #4]	@ (800bd44 <__sfp_lock_release+0x8>)
 800bd3e:	f7f9 baaa 	b.w	8005296 <__retarget_lock_release_recursive>
 800bd42:	bf00      	nop
 800bd44:	20002848 	.word	0x20002848

0800bd48 <__sinit>:
 800bd48:	b510      	push	{r4, lr}
 800bd4a:	4604      	mov	r4, r0
 800bd4c:	f7ff fff0 	bl	800bd30 <__sfp_lock_acquire>
 800bd50:	6a23      	ldr	r3, [r4, #32]
 800bd52:	b11b      	cbz	r3, 800bd5c <__sinit+0x14>
 800bd54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bd58:	f7ff bff0 	b.w	800bd3c <__sfp_lock_release>
 800bd5c:	4b04      	ldr	r3, [pc, #16]	@ (800bd70 <__sinit+0x28>)
 800bd5e:	6223      	str	r3, [r4, #32]
 800bd60:	4b04      	ldr	r3, [pc, #16]	@ (800bd74 <__sinit+0x2c>)
 800bd62:	681b      	ldr	r3, [r3, #0]
 800bd64:	2b00      	cmp	r3, #0
 800bd66:	d1f5      	bne.n	800bd54 <__sinit+0xc>
 800bd68:	f7ff ffc4 	bl	800bcf4 <global_stdio_init.part.0>
 800bd6c:	e7f2      	b.n	800bd54 <__sinit+0xc>
 800bd6e:	bf00      	nop
 800bd70:	0800bcb5 	.word	0x0800bcb5
 800bd74:	2000996c 	.word	0x2000996c

0800bd78 <_fwalk_sglue>:
 800bd78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bd7c:	4607      	mov	r7, r0
 800bd7e:	4688      	mov	r8, r1
 800bd80:	4614      	mov	r4, r2
 800bd82:	2600      	movs	r6, #0
 800bd84:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800bd88:	f1b9 0901 	subs.w	r9, r9, #1
 800bd8c:	d505      	bpl.n	800bd9a <_fwalk_sglue+0x22>
 800bd8e:	6824      	ldr	r4, [r4, #0]
 800bd90:	2c00      	cmp	r4, #0
 800bd92:	d1f7      	bne.n	800bd84 <_fwalk_sglue+0xc>
 800bd94:	4630      	mov	r0, r6
 800bd96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bd9a:	89ab      	ldrh	r3, [r5, #12]
 800bd9c:	2b01      	cmp	r3, #1
 800bd9e:	d907      	bls.n	800bdb0 <_fwalk_sglue+0x38>
 800bda0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800bda4:	3301      	adds	r3, #1
 800bda6:	d003      	beq.n	800bdb0 <_fwalk_sglue+0x38>
 800bda8:	4629      	mov	r1, r5
 800bdaa:	4638      	mov	r0, r7
 800bdac:	47c0      	blx	r8
 800bdae:	4306      	orrs	r6, r0
 800bdb0:	3568      	adds	r5, #104	@ 0x68
 800bdb2:	e7e9      	b.n	800bd88 <_fwalk_sglue+0x10>

0800bdb4 <sniprintf>:
 800bdb4:	b40c      	push	{r2, r3}
 800bdb6:	b530      	push	{r4, r5, lr}
 800bdb8:	4b17      	ldr	r3, [pc, #92]	@ (800be18 <sniprintf+0x64>)
 800bdba:	1e0c      	subs	r4, r1, #0
 800bdbc:	681d      	ldr	r5, [r3, #0]
 800bdbe:	b09d      	sub	sp, #116	@ 0x74
 800bdc0:	da08      	bge.n	800bdd4 <sniprintf+0x20>
 800bdc2:	238b      	movs	r3, #139	@ 0x8b
 800bdc4:	602b      	str	r3, [r5, #0]
 800bdc6:	f04f 30ff 	mov.w	r0, #4294967295
 800bdca:	b01d      	add	sp, #116	@ 0x74
 800bdcc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bdd0:	b002      	add	sp, #8
 800bdd2:	4770      	bx	lr
 800bdd4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800bdd8:	f8ad 3014 	strh.w	r3, [sp, #20]
 800bddc:	bf14      	ite	ne
 800bdde:	f104 33ff 	addne.w	r3, r4, #4294967295
 800bde2:	4623      	moveq	r3, r4
 800bde4:	9304      	str	r3, [sp, #16]
 800bde6:	9307      	str	r3, [sp, #28]
 800bde8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800bdec:	9002      	str	r0, [sp, #8]
 800bdee:	9006      	str	r0, [sp, #24]
 800bdf0:	f8ad 3016 	strh.w	r3, [sp, #22]
 800bdf4:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800bdf6:	ab21      	add	r3, sp, #132	@ 0x84
 800bdf8:	a902      	add	r1, sp, #8
 800bdfa:	4628      	mov	r0, r5
 800bdfc:	9301      	str	r3, [sp, #4]
 800bdfe:	f002 ff09 	bl	800ec14 <_svfiprintf_r>
 800be02:	1c43      	adds	r3, r0, #1
 800be04:	bfbc      	itt	lt
 800be06:	238b      	movlt	r3, #139	@ 0x8b
 800be08:	602b      	strlt	r3, [r5, #0]
 800be0a:	2c00      	cmp	r4, #0
 800be0c:	d0dd      	beq.n	800bdca <sniprintf+0x16>
 800be0e:	9b02      	ldr	r3, [sp, #8]
 800be10:	2200      	movs	r2, #0
 800be12:	701a      	strb	r2, [r3, #0]
 800be14:	e7d9      	b.n	800bdca <sniprintf+0x16>
 800be16:	bf00      	nop
 800be18:	200001a4 	.word	0x200001a4

0800be1c <siprintf>:
 800be1c:	b40e      	push	{r1, r2, r3}
 800be1e:	b500      	push	{lr}
 800be20:	b09c      	sub	sp, #112	@ 0x70
 800be22:	ab1d      	add	r3, sp, #116	@ 0x74
 800be24:	9002      	str	r0, [sp, #8]
 800be26:	9006      	str	r0, [sp, #24]
 800be28:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800be2c:	4809      	ldr	r0, [pc, #36]	@ (800be54 <siprintf+0x38>)
 800be2e:	9107      	str	r1, [sp, #28]
 800be30:	9104      	str	r1, [sp, #16]
 800be32:	4909      	ldr	r1, [pc, #36]	@ (800be58 <siprintf+0x3c>)
 800be34:	f853 2b04 	ldr.w	r2, [r3], #4
 800be38:	9105      	str	r1, [sp, #20]
 800be3a:	6800      	ldr	r0, [r0, #0]
 800be3c:	9301      	str	r3, [sp, #4]
 800be3e:	a902      	add	r1, sp, #8
 800be40:	f002 fee8 	bl	800ec14 <_svfiprintf_r>
 800be44:	9b02      	ldr	r3, [sp, #8]
 800be46:	2200      	movs	r2, #0
 800be48:	701a      	strb	r2, [r3, #0]
 800be4a:	b01c      	add	sp, #112	@ 0x70
 800be4c:	f85d eb04 	ldr.w	lr, [sp], #4
 800be50:	b003      	add	sp, #12
 800be52:	4770      	bx	lr
 800be54:	200001a4 	.word	0x200001a4
 800be58:	ffff0208 	.word	0xffff0208

0800be5c <siscanf>:
 800be5c:	b40e      	push	{r1, r2, r3}
 800be5e:	b530      	push	{r4, r5, lr}
 800be60:	b09c      	sub	sp, #112	@ 0x70
 800be62:	ac1f      	add	r4, sp, #124	@ 0x7c
 800be64:	f44f 7201 	mov.w	r2, #516	@ 0x204
 800be68:	f854 5b04 	ldr.w	r5, [r4], #4
 800be6c:	f8ad 2014 	strh.w	r2, [sp, #20]
 800be70:	9002      	str	r0, [sp, #8]
 800be72:	9006      	str	r0, [sp, #24]
 800be74:	f7f4 fa0c 	bl	8000290 <strlen>
 800be78:	4b0b      	ldr	r3, [pc, #44]	@ (800bea8 <siscanf+0x4c>)
 800be7a:	9003      	str	r0, [sp, #12]
 800be7c:	9007      	str	r0, [sp, #28]
 800be7e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800be80:	480a      	ldr	r0, [pc, #40]	@ (800beac <siscanf+0x50>)
 800be82:	9401      	str	r4, [sp, #4]
 800be84:	2300      	movs	r3, #0
 800be86:	930f      	str	r3, [sp, #60]	@ 0x3c
 800be88:	9314      	str	r3, [sp, #80]	@ 0x50
 800be8a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800be8e:	f8ad 3016 	strh.w	r3, [sp, #22]
 800be92:	462a      	mov	r2, r5
 800be94:	4623      	mov	r3, r4
 800be96:	a902      	add	r1, sp, #8
 800be98:	6800      	ldr	r0, [r0, #0]
 800be9a:	f003 f80f 	bl	800eebc <__ssvfiscanf_r>
 800be9e:	b01c      	add	sp, #112	@ 0x70
 800bea0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bea4:	b003      	add	sp, #12
 800bea6:	4770      	bx	lr
 800bea8:	0800bed3 	.word	0x0800bed3
 800beac:	200001a4 	.word	0x200001a4

0800beb0 <__sread>:
 800beb0:	b510      	push	{r4, lr}
 800beb2:	460c      	mov	r4, r1
 800beb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800beb8:	f000 fe66 	bl	800cb88 <_read_r>
 800bebc:	2800      	cmp	r0, #0
 800bebe:	bfab      	itete	ge
 800bec0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800bec2:	89a3      	ldrhlt	r3, [r4, #12]
 800bec4:	181b      	addge	r3, r3, r0
 800bec6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800beca:	bfac      	ite	ge
 800becc:	6563      	strge	r3, [r4, #84]	@ 0x54
 800bece:	81a3      	strhlt	r3, [r4, #12]
 800bed0:	bd10      	pop	{r4, pc}

0800bed2 <__seofread>:
 800bed2:	2000      	movs	r0, #0
 800bed4:	4770      	bx	lr

0800bed6 <__swrite>:
 800bed6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800beda:	461f      	mov	r7, r3
 800bedc:	898b      	ldrh	r3, [r1, #12]
 800bede:	05db      	lsls	r3, r3, #23
 800bee0:	4605      	mov	r5, r0
 800bee2:	460c      	mov	r4, r1
 800bee4:	4616      	mov	r6, r2
 800bee6:	d505      	bpl.n	800bef4 <__swrite+0x1e>
 800bee8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800beec:	2302      	movs	r3, #2
 800beee:	2200      	movs	r2, #0
 800bef0:	f000 fe38 	bl	800cb64 <_lseek_r>
 800bef4:	89a3      	ldrh	r3, [r4, #12]
 800bef6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800befa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800befe:	81a3      	strh	r3, [r4, #12]
 800bf00:	4632      	mov	r2, r6
 800bf02:	463b      	mov	r3, r7
 800bf04:	4628      	mov	r0, r5
 800bf06:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bf0a:	f000 be5f 	b.w	800cbcc <_write_r>

0800bf0e <__sseek>:
 800bf0e:	b510      	push	{r4, lr}
 800bf10:	460c      	mov	r4, r1
 800bf12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bf16:	f000 fe25 	bl	800cb64 <_lseek_r>
 800bf1a:	1c43      	adds	r3, r0, #1
 800bf1c:	89a3      	ldrh	r3, [r4, #12]
 800bf1e:	bf15      	itete	ne
 800bf20:	6560      	strne	r0, [r4, #84]	@ 0x54
 800bf22:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800bf26:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800bf2a:	81a3      	strheq	r3, [r4, #12]
 800bf2c:	bf18      	it	ne
 800bf2e:	81a3      	strhne	r3, [r4, #12]
 800bf30:	bd10      	pop	{r4, pc}

0800bf32 <__sclose>:
 800bf32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bf36:	f000 be05 	b.w	800cb44 <_close_r>

0800bf3a <_vsniprintf_r>:
 800bf3a:	b530      	push	{r4, r5, lr}
 800bf3c:	4614      	mov	r4, r2
 800bf3e:	2c00      	cmp	r4, #0
 800bf40:	b09b      	sub	sp, #108	@ 0x6c
 800bf42:	4605      	mov	r5, r0
 800bf44:	461a      	mov	r2, r3
 800bf46:	da05      	bge.n	800bf54 <_vsniprintf_r+0x1a>
 800bf48:	238b      	movs	r3, #139	@ 0x8b
 800bf4a:	6003      	str	r3, [r0, #0]
 800bf4c:	f04f 30ff 	mov.w	r0, #4294967295
 800bf50:	b01b      	add	sp, #108	@ 0x6c
 800bf52:	bd30      	pop	{r4, r5, pc}
 800bf54:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800bf58:	f8ad 300c 	strh.w	r3, [sp, #12]
 800bf5c:	bf14      	ite	ne
 800bf5e:	f104 33ff 	addne.w	r3, r4, #4294967295
 800bf62:	4623      	moveq	r3, r4
 800bf64:	9302      	str	r3, [sp, #8]
 800bf66:	9305      	str	r3, [sp, #20]
 800bf68:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800bf6c:	9100      	str	r1, [sp, #0]
 800bf6e:	9104      	str	r1, [sp, #16]
 800bf70:	f8ad 300e 	strh.w	r3, [sp, #14]
 800bf74:	4669      	mov	r1, sp
 800bf76:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800bf78:	f002 fe4c 	bl	800ec14 <_svfiprintf_r>
 800bf7c:	1c43      	adds	r3, r0, #1
 800bf7e:	bfbc      	itt	lt
 800bf80:	238b      	movlt	r3, #139	@ 0x8b
 800bf82:	602b      	strlt	r3, [r5, #0]
 800bf84:	2c00      	cmp	r4, #0
 800bf86:	d0e3      	beq.n	800bf50 <_vsniprintf_r+0x16>
 800bf88:	9b00      	ldr	r3, [sp, #0]
 800bf8a:	2200      	movs	r2, #0
 800bf8c:	701a      	strb	r2, [r3, #0]
 800bf8e:	e7df      	b.n	800bf50 <_vsniprintf_r+0x16>

0800bf90 <vsniprintf>:
 800bf90:	b507      	push	{r0, r1, r2, lr}
 800bf92:	9300      	str	r3, [sp, #0]
 800bf94:	4613      	mov	r3, r2
 800bf96:	460a      	mov	r2, r1
 800bf98:	4601      	mov	r1, r0
 800bf9a:	4803      	ldr	r0, [pc, #12]	@ (800bfa8 <vsniprintf+0x18>)
 800bf9c:	6800      	ldr	r0, [r0, #0]
 800bf9e:	f7ff ffcc 	bl	800bf3a <_vsniprintf_r>
 800bfa2:	b003      	add	sp, #12
 800bfa4:	f85d fb04 	ldr.w	pc, [sp], #4
 800bfa8:	200001a4 	.word	0x200001a4

0800bfac <memset>:
 800bfac:	4402      	add	r2, r0
 800bfae:	4603      	mov	r3, r0
 800bfb0:	4293      	cmp	r3, r2
 800bfb2:	d100      	bne.n	800bfb6 <memset+0xa>
 800bfb4:	4770      	bx	lr
 800bfb6:	f803 1b01 	strb.w	r1, [r3], #1
 800bfba:	e7f9      	b.n	800bfb0 <memset+0x4>

0800bfbc <strchr>:
 800bfbc:	b2c9      	uxtb	r1, r1
 800bfbe:	4603      	mov	r3, r0
 800bfc0:	4618      	mov	r0, r3
 800bfc2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bfc6:	b112      	cbz	r2, 800bfce <strchr+0x12>
 800bfc8:	428a      	cmp	r2, r1
 800bfca:	d1f9      	bne.n	800bfc0 <strchr+0x4>
 800bfcc:	4770      	bx	lr
 800bfce:	2900      	cmp	r1, #0
 800bfd0:	bf18      	it	ne
 800bfd2:	2000      	movne	r0, #0
 800bfd4:	4770      	bx	lr

0800bfd6 <strncmp>:
 800bfd6:	b510      	push	{r4, lr}
 800bfd8:	b16a      	cbz	r2, 800bff6 <strncmp+0x20>
 800bfda:	3901      	subs	r1, #1
 800bfdc:	1884      	adds	r4, r0, r2
 800bfde:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bfe2:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800bfe6:	429a      	cmp	r2, r3
 800bfe8:	d103      	bne.n	800bff2 <strncmp+0x1c>
 800bfea:	42a0      	cmp	r0, r4
 800bfec:	d001      	beq.n	800bff2 <strncmp+0x1c>
 800bfee:	2a00      	cmp	r2, #0
 800bff0:	d1f5      	bne.n	800bfde <strncmp+0x8>
 800bff2:	1ad0      	subs	r0, r2, r3
 800bff4:	bd10      	pop	{r4, pc}
 800bff6:	4610      	mov	r0, r2
 800bff8:	e7fc      	b.n	800bff4 <strncmp+0x1e>

0800bffa <strncpy>:
 800bffa:	b510      	push	{r4, lr}
 800bffc:	3901      	subs	r1, #1
 800bffe:	4603      	mov	r3, r0
 800c000:	b132      	cbz	r2, 800c010 <strncpy+0x16>
 800c002:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800c006:	f803 4b01 	strb.w	r4, [r3], #1
 800c00a:	3a01      	subs	r2, #1
 800c00c:	2c00      	cmp	r4, #0
 800c00e:	d1f7      	bne.n	800c000 <strncpy+0x6>
 800c010:	441a      	add	r2, r3
 800c012:	2100      	movs	r1, #0
 800c014:	4293      	cmp	r3, r2
 800c016:	d100      	bne.n	800c01a <strncpy+0x20>
 800c018:	bd10      	pop	{r4, pc}
 800c01a:	f803 1b01 	strb.w	r1, [r3], #1
 800c01e:	e7f9      	b.n	800c014 <strncpy+0x1a>

0800c020 <strrchr>:
 800c020:	b538      	push	{r3, r4, r5, lr}
 800c022:	f011 04ff 	ands.w	r4, r1, #255	@ 0xff
 800c026:	4603      	mov	r3, r0
 800c028:	d10e      	bne.n	800c048 <strrchr+0x28>
 800c02a:	4621      	mov	r1, r4
 800c02c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c030:	f7ff bfc4 	b.w	800bfbc <strchr>
 800c034:	1c43      	adds	r3, r0, #1
 800c036:	4605      	mov	r5, r0
 800c038:	4621      	mov	r1, r4
 800c03a:	4618      	mov	r0, r3
 800c03c:	f7ff ffbe 	bl	800bfbc <strchr>
 800c040:	2800      	cmp	r0, #0
 800c042:	d1f7      	bne.n	800c034 <strrchr+0x14>
 800c044:	4628      	mov	r0, r5
 800c046:	bd38      	pop	{r3, r4, r5, pc}
 800c048:	2500      	movs	r5, #0
 800c04a:	e7f5      	b.n	800c038 <strrchr+0x18>

0800c04c <strstr>:
 800c04c:	780a      	ldrb	r2, [r1, #0]
 800c04e:	b570      	push	{r4, r5, r6, lr}
 800c050:	b96a      	cbnz	r2, 800c06e <strstr+0x22>
 800c052:	bd70      	pop	{r4, r5, r6, pc}
 800c054:	429a      	cmp	r2, r3
 800c056:	d109      	bne.n	800c06c <strstr+0x20>
 800c058:	460c      	mov	r4, r1
 800c05a:	4605      	mov	r5, r0
 800c05c:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800c060:	2b00      	cmp	r3, #0
 800c062:	d0f6      	beq.n	800c052 <strstr+0x6>
 800c064:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800c068:	429e      	cmp	r6, r3
 800c06a:	d0f7      	beq.n	800c05c <strstr+0x10>
 800c06c:	3001      	adds	r0, #1
 800c06e:	7803      	ldrb	r3, [r0, #0]
 800c070:	2b00      	cmp	r3, #0
 800c072:	d1ef      	bne.n	800c054 <strstr+0x8>
 800c074:	4618      	mov	r0, r3
 800c076:	e7ec      	b.n	800c052 <strstr+0x6>

0800c078 <validate_structure>:
 800c078:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c07a:	6801      	ldr	r1, [r0, #0]
 800c07c:	293b      	cmp	r1, #59	@ 0x3b
 800c07e:	4604      	mov	r4, r0
 800c080:	d911      	bls.n	800c0a6 <validate_structure+0x2e>
 800c082:	223c      	movs	r2, #60	@ 0x3c
 800c084:	4668      	mov	r0, sp
 800c086:	f000 fe01 	bl	800cc8c <div>
 800c08a:	9a01      	ldr	r2, [sp, #4]
 800c08c:	6863      	ldr	r3, [r4, #4]
 800c08e:	9900      	ldr	r1, [sp, #0]
 800c090:	2a00      	cmp	r2, #0
 800c092:	440b      	add	r3, r1
 800c094:	6063      	str	r3, [r4, #4]
 800c096:	bfbb      	ittet	lt
 800c098:	323c      	addlt	r2, #60	@ 0x3c
 800c09a:	f103 33ff 	addlt.w	r3, r3, #4294967295
 800c09e:	6022      	strge	r2, [r4, #0]
 800c0a0:	6022      	strlt	r2, [r4, #0]
 800c0a2:	bfb8      	it	lt
 800c0a4:	6063      	strlt	r3, [r4, #4]
 800c0a6:	6861      	ldr	r1, [r4, #4]
 800c0a8:	293b      	cmp	r1, #59	@ 0x3b
 800c0aa:	d911      	bls.n	800c0d0 <validate_structure+0x58>
 800c0ac:	223c      	movs	r2, #60	@ 0x3c
 800c0ae:	4668      	mov	r0, sp
 800c0b0:	f000 fdec 	bl	800cc8c <div>
 800c0b4:	9a01      	ldr	r2, [sp, #4]
 800c0b6:	68a3      	ldr	r3, [r4, #8]
 800c0b8:	9900      	ldr	r1, [sp, #0]
 800c0ba:	2a00      	cmp	r2, #0
 800c0bc:	440b      	add	r3, r1
 800c0be:	60a3      	str	r3, [r4, #8]
 800c0c0:	bfbb      	ittet	lt
 800c0c2:	323c      	addlt	r2, #60	@ 0x3c
 800c0c4:	f103 33ff 	addlt.w	r3, r3, #4294967295
 800c0c8:	6062      	strge	r2, [r4, #4]
 800c0ca:	6062      	strlt	r2, [r4, #4]
 800c0cc:	bfb8      	it	lt
 800c0ce:	60a3      	strlt	r3, [r4, #8]
 800c0d0:	68a1      	ldr	r1, [r4, #8]
 800c0d2:	2917      	cmp	r1, #23
 800c0d4:	d911      	bls.n	800c0fa <validate_structure+0x82>
 800c0d6:	2218      	movs	r2, #24
 800c0d8:	4668      	mov	r0, sp
 800c0da:	f000 fdd7 	bl	800cc8c <div>
 800c0de:	9a01      	ldr	r2, [sp, #4]
 800c0e0:	68e3      	ldr	r3, [r4, #12]
 800c0e2:	9900      	ldr	r1, [sp, #0]
 800c0e4:	2a00      	cmp	r2, #0
 800c0e6:	440b      	add	r3, r1
 800c0e8:	60e3      	str	r3, [r4, #12]
 800c0ea:	bfbb      	ittet	lt
 800c0ec:	3218      	addlt	r2, #24
 800c0ee:	f103 33ff 	addlt.w	r3, r3, #4294967295
 800c0f2:	60a2      	strge	r2, [r4, #8]
 800c0f4:	60a2      	strlt	r2, [r4, #8]
 800c0f6:	bfb8      	it	lt
 800c0f8:	60e3      	strlt	r3, [r4, #12]
 800c0fa:	6921      	ldr	r1, [r4, #16]
 800c0fc:	290b      	cmp	r1, #11
 800c0fe:	d911      	bls.n	800c124 <validate_structure+0xac>
 800c100:	220c      	movs	r2, #12
 800c102:	4668      	mov	r0, sp
 800c104:	f000 fdc2 	bl	800cc8c <div>
 800c108:	9a01      	ldr	r2, [sp, #4]
 800c10a:	6963      	ldr	r3, [r4, #20]
 800c10c:	9900      	ldr	r1, [sp, #0]
 800c10e:	2a00      	cmp	r2, #0
 800c110:	440b      	add	r3, r1
 800c112:	6163      	str	r3, [r4, #20]
 800c114:	bfbb      	ittet	lt
 800c116:	320c      	addlt	r2, #12
 800c118:	f103 33ff 	addlt.w	r3, r3, #4294967295
 800c11c:	6122      	strge	r2, [r4, #16]
 800c11e:	6122      	strlt	r2, [r4, #16]
 800c120:	bfb8      	it	lt
 800c122:	6163      	strlt	r3, [r4, #20]
 800c124:	6963      	ldr	r3, [r4, #20]
 800c126:	079a      	lsls	r2, r3, #30
 800c128:	d11c      	bne.n	800c164 <validate_structure+0xec>
 800c12a:	2164      	movs	r1, #100	@ 0x64
 800c12c:	fb93 f2f1 	sdiv	r2, r3, r1
 800c130:	fb01 3212 	mls	r2, r1, r2, r3
 800c134:	b9c2      	cbnz	r2, 800c168 <validate_structure+0xf0>
 800c136:	f203 736c 	addw	r3, r3, #1900	@ 0x76c
 800c13a:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800c13e:	fb93 f1f2 	sdiv	r1, r3, r2
 800c142:	fb02 3311 	mls	r3, r2, r1, r3
 800c146:	2b00      	cmp	r3, #0
 800c148:	bf14      	ite	ne
 800c14a:	231c      	movne	r3, #28
 800c14c:	231d      	moveq	r3, #29
 800c14e:	68e2      	ldr	r2, [r4, #12]
 800c150:	2a00      	cmp	r2, #0
 800c152:	dc0b      	bgt.n	800c16c <validate_structure+0xf4>
 800c154:	4d31      	ldr	r5, [pc, #196]	@ (800c21c <validate_structure+0x1a4>)
 800c156:	200b      	movs	r0, #11
 800c158:	2164      	movs	r1, #100	@ 0x64
 800c15a:	68e6      	ldr	r6, [r4, #12]
 800c15c:	2e00      	cmp	r6, #0
 800c15e:	dd30      	ble.n	800c1c2 <validate_structure+0x14a>
 800c160:	b003      	add	sp, #12
 800c162:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c164:	231c      	movs	r3, #28
 800c166:	e7f2      	b.n	800c14e <validate_structure+0xd6>
 800c168:	231d      	movs	r3, #29
 800c16a:	e7f0      	b.n	800c14e <validate_structure+0xd6>
 800c16c:	4d2b      	ldr	r5, [pc, #172]	@ (800c21c <validate_structure+0x1a4>)
 800c16e:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
 800c172:	2a01      	cmp	r2, #1
 800c174:	bf14      	ite	ne
 800c176:	f855 0022 	ldrne.w	r0, [r5, r2, lsl #2]
 800c17a:	4618      	moveq	r0, r3
 800c17c:	4281      	cmp	r1, r0
 800c17e:	ddef      	ble.n	800c160 <validate_structure+0xe8>
 800c180:	3201      	adds	r2, #1
 800c182:	1a09      	subs	r1, r1, r0
 800c184:	2a0c      	cmp	r2, #12
 800c186:	60e1      	str	r1, [r4, #12]
 800c188:	6122      	str	r2, [r4, #16]
 800c18a:	d1f0      	bne.n	800c16e <validate_structure+0xf6>
 800c18c:	6963      	ldr	r3, [r4, #20]
 800c18e:	2100      	movs	r1, #0
 800c190:	1c5a      	adds	r2, r3, #1
 800c192:	6121      	str	r1, [r4, #16]
 800c194:	0791      	lsls	r1, r2, #30
 800c196:	6162      	str	r2, [r4, #20]
 800c198:	d13c      	bne.n	800c214 <validate_structure+0x19c>
 800c19a:	2164      	movs	r1, #100	@ 0x64
 800c19c:	fb92 f0f1 	sdiv	r0, r2, r1
 800c1a0:	fb01 2210 	mls	r2, r1, r0, r2
 800c1a4:	2a00      	cmp	r2, #0
 800c1a6:	d137      	bne.n	800c218 <validate_structure+0x1a0>
 800c1a8:	f203 736d 	addw	r3, r3, #1901	@ 0x76d
 800c1ac:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800c1b0:	fb93 f1f2 	sdiv	r1, r3, r2
 800c1b4:	fb02 3311 	mls	r3, r2, r1, r3
 800c1b8:	2b00      	cmp	r3, #0
 800c1ba:	bf14      	ite	ne
 800c1bc:	231c      	movne	r3, #28
 800c1be:	231d      	moveq	r3, #29
 800c1c0:	e7d5      	b.n	800c16e <validate_structure+0xf6>
 800c1c2:	6922      	ldr	r2, [r4, #16]
 800c1c4:	3a01      	subs	r2, #1
 800c1c6:	6122      	str	r2, [r4, #16]
 800c1c8:	3201      	adds	r2, #1
 800c1ca:	d116      	bne.n	800c1fa <validate_structure+0x182>
 800c1cc:	6963      	ldr	r3, [r4, #20]
 800c1ce:	1e5a      	subs	r2, r3, #1
 800c1d0:	0797      	lsls	r7, r2, #30
 800c1d2:	e9c4 0204 	strd	r0, r2, [r4, #16]
 800c1d6:	d119      	bne.n	800c20c <validate_structure+0x194>
 800c1d8:	fb92 f7f1 	sdiv	r7, r2, r1
 800c1dc:	fb01 2217 	mls	r2, r1, r7, r2
 800c1e0:	b9b2      	cbnz	r2, 800c210 <validate_structure+0x198>
 800c1e2:	f203 736b 	addw	r3, r3, #1899	@ 0x76b
 800c1e6:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800c1ea:	fb93 f7f2 	sdiv	r7, r3, r2
 800c1ee:	fb02 3317 	mls	r3, r2, r7, r3
 800c1f2:	2b00      	cmp	r3, #0
 800c1f4:	bf14      	ite	ne
 800c1f6:	231c      	movne	r3, #28
 800c1f8:	231d      	moveq	r3, #29
 800c1fa:	6922      	ldr	r2, [r4, #16]
 800c1fc:	2a01      	cmp	r2, #1
 800c1fe:	bf14      	ite	ne
 800c200:	f855 2022 	ldrne.w	r2, [r5, r2, lsl #2]
 800c204:	461a      	moveq	r2, r3
 800c206:	4432      	add	r2, r6
 800c208:	60e2      	str	r2, [r4, #12]
 800c20a:	e7a6      	b.n	800c15a <validate_structure+0xe2>
 800c20c:	231c      	movs	r3, #28
 800c20e:	e7f4      	b.n	800c1fa <validate_structure+0x182>
 800c210:	231d      	movs	r3, #29
 800c212:	e7f2      	b.n	800c1fa <validate_structure+0x182>
 800c214:	231c      	movs	r3, #28
 800c216:	e7aa      	b.n	800c16e <validate_structure+0xf6>
 800c218:	231d      	movs	r3, #29
 800c21a:	e7a8      	b.n	800c16e <validate_structure+0xf6>
 800c21c:	08013bd8 	.word	0x08013bd8

0800c220 <mktime>:
 800c220:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c224:	b085      	sub	sp, #20
 800c226:	4607      	mov	r7, r0
 800c228:	f003 fa44 	bl	800f6b4 <__gettzinfo>
 800c22c:	4681      	mov	r9, r0
 800c22e:	4638      	mov	r0, r7
 800c230:	f7ff ff22 	bl	800c078 <validate_structure>
 800c234:	e9d7 4300 	ldrd	r4, r3, [r7]
 800c238:	223c      	movs	r2, #60	@ 0x3c
 800c23a:	fb02 4403 	mla	r4, r2, r3, r4
 800c23e:	68bb      	ldr	r3, [r7, #8]
 800c240:	697d      	ldr	r5, [r7, #20]
 800c242:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 800c246:	fb02 4403 	mla	r4, r2, r3, r4
 800c24a:	e9d7 6303 	ldrd	r6, r3, [r7, #12]
 800c24e:	4ac1      	ldr	r2, [pc, #772]	@ (800c554 <mktime+0x334>)
 800c250:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800c254:	3e01      	subs	r6, #1
 800c256:	2b01      	cmp	r3, #1
 800c258:	4416      	add	r6, r2
 800c25a:	dd11      	ble.n	800c280 <mktime+0x60>
 800c25c:	07a9      	lsls	r1, r5, #30
 800c25e:	d10f      	bne.n	800c280 <mktime+0x60>
 800c260:	2264      	movs	r2, #100	@ 0x64
 800c262:	fb95 f3f2 	sdiv	r3, r5, r2
 800c266:	fb02 5313 	mls	r3, r2, r3, r5
 800c26a:	b943      	cbnz	r3, 800c27e <mktime+0x5e>
 800c26c:	f205 736c 	addw	r3, r5, #1900	@ 0x76c
 800c270:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800c274:	fb93 f1f2 	sdiv	r1, r3, r2
 800c278:	fb02 3311 	mls	r3, r2, r1, r3
 800c27c:	b903      	cbnz	r3, 800c280 <mktime+0x60>
 800c27e:	3601      	adds	r6, #1
 800c280:	f505 531c 	add.w	r3, r5, #9984	@ 0x2700
 800c284:	3310      	adds	r3, #16
 800c286:	f644 6220 	movw	r2, #20000	@ 0x4e20
 800c28a:	4293      	cmp	r3, r2
 800c28c:	61fe      	str	r6, [r7, #28]
 800c28e:	f200 8167 	bhi.w	800c560 <mktime+0x340>
 800c292:	2d46      	cmp	r5, #70	@ 0x46
 800c294:	f340 808e 	ble.w	800c3b4 <mktime+0x194>
 800c298:	2346      	movs	r3, #70	@ 0x46
 800c29a:	f240 1c6d 	movw	ip, #365	@ 0x16d
 800c29e:	2164      	movs	r1, #100	@ 0x64
 800c2a0:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 800c2a4:	079a      	lsls	r2, r3, #30
 800c2a6:	d17f      	bne.n	800c3a8 <mktime+0x188>
 800c2a8:	fb93 f2f1 	sdiv	r2, r3, r1
 800c2ac:	fb01 3212 	mls	r2, r1, r2, r3
 800c2b0:	2a00      	cmp	r2, #0
 800c2b2:	d17c      	bne.n	800c3ae <mktime+0x18e>
 800c2b4:	f203 726c 	addw	r2, r3, #1900	@ 0x76c
 800c2b8:	fb92 fef0 	sdiv	lr, r2, r0
 800c2bc:	fb00 221e 	mls	r2, r0, lr, r2
 800c2c0:	2a00      	cmp	r2, #0
 800c2c2:	bf14      	ite	ne
 800c2c4:	4662      	movne	r2, ip
 800c2c6:	f44f 72b7 	moveq.w	r2, #366	@ 0x16e
 800c2ca:	3301      	adds	r3, #1
 800c2cc:	429d      	cmp	r5, r3
 800c2ce:	4416      	add	r6, r2
 800c2d0:	d1e8      	bne.n	800c2a4 <mktime+0x84>
 800c2d2:	4ba1      	ldr	r3, [pc, #644]	@ (800c558 <mktime+0x338>)
 800c2d4:	ea4f 78e4 	mov.w	r8, r4, asr #31
 800c2d8:	fbc6 4803 	smlal	r4, r8, r6, r3
 800c2dc:	f000 f9fa 	bl	800c6d4 <__tz_lock>
 800c2e0:	f000 fa04 	bl	800c6ec <_tzset_unlocked>
 800c2e4:	4b9d      	ldr	r3, [pc, #628]	@ (800c55c <mktime+0x33c>)
 800c2e6:	681b      	ldr	r3, [r3, #0]
 800c2e8:	2b00      	cmp	r3, #0
 800c2ea:	f000 8140 	beq.w	800c56e <mktime+0x34e>
 800c2ee:	f8d7 a020 	ldr.w	sl, [r7, #32]
 800c2f2:	6978      	ldr	r0, [r7, #20]
 800c2f4:	4653      	mov	r3, sl
 800c2f6:	2b01      	cmp	r3, #1
 800c2f8:	bfa8      	it	ge
 800c2fa:	2301      	movge	r3, #1
 800c2fc:	9301      	str	r3, [sp, #4]
 800c2fe:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800c302:	f200 706c 	addw	r0, r0, #1900	@ 0x76c
 800c306:	4283      	cmp	r3, r0
 800c308:	f040 8096 	bne.w	800c438 <mktime+0x218>
 800c30c:	e9d9 2108 	ldrd	r2, r1, [r9, #32]
 800c310:	f8d9 0050 	ldr.w	r0, [r9, #80]	@ 0x50
 800c314:	f8d9 c04c 	ldr.w	ip, [r9, #76]	@ 0x4c
 800c318:	1a13      	subs	r3, r2, r0
 800c31a:	9303      	str	r3, [sp, #12]
 800c31c:	f8d9 3048 	ldr.w	r3, [r9, #72]	@ 0x48
 800c320:	9302      	str	r3, [sp, #8]
 800c322:	9a02      	ldr	r2, [sp, #8]
 800c324:	f8d9 3028 	ldr.w	r3, [r9, #40]	@ 0x28
 800c328:	eb61 7be0 	sbc.w	fp, r1, r0, asr #31
 800c32c:	ebb2 0e03 	subs.w	lr, r2, r3
 800c330:	eb6c 71e3 	sbc.w	r1, ip, r3, asr #31
 800c334:	4574      	cmp	r4, lr
 800c336:	eb78 0201 	sbcs.w	r2, r8, r1
 800c33a:	f280 8085 	bge.w	800c448 <mktime+0x228>
 800c33e:	f8d9 2000 	ldr.w	r2, [r9]
 800c342:	2a00      	cmp	r2, #0
 800c344:	f000 808d 	beq.w	800c462 <mktime+0x242>
 800c348:	9a03      	ldr	r2, [sp, #12]
 800c34a:	4294      	cmp	r4, r2
 800c34c:	eb78 020b 	sbcs.w	r2, r8, fp
 800c350:	f2c0 810a 	blt.w	800c568 <mktime+0x348>
 800c354:	4574      	cmp	r4, lr
 800c356:	eb78 0101 	sbcs.w	r1, r8, r1
 800c35a:	bfb4      	ite	lt
 800c35c:	f04f 0b01 	movlt.w	fp, #1
 800c360:	f04f 0b00 	movge.w	fp, #0
 800c364:	f1ba 0f00 	cmp.w	sl, #0
 800c368:	f280 8087 	bge.w	800c47a <mktime+0x25a>
 800c36c:	f1bb 0f01 	cmp.w	fp, #1
 800c370:	f040 80ff 	bne.w	800c572 <mktime+0x352>
 800c374:	f8d9 3050 	ldr.w	r3, [r9, #80]	@ 0x50
 800c378:	191c      	adds	r4, r3, r4
 800c37a:	eb48 78e3 	adc.w	r8, r8, r3, asr #31
 800c37e:	f04f 0b01 	mov.w	fp, #1
 800c382:	f000 f9ad 	bl	800c6e0 <__tz_unlock>
 800c386:	3604      	adds	r6, #4
 800c388:	2307      	movs	r3, #7
 800c38a:	fb96 f3f3 	sdiv	r3, r6, r3
 800c38e:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800c392:	1af6      	subs	r6, r6, r3
 800c394:	f100 80db 	bmi.w	800c54e <mktime+0x32e>
 800c398:	f8c7 b020 	str.w	fp, [r7, #32]
 800c39c:	61be      	str	r6, [r7, #24]
 800c39e:	4620      	mov	r0, r4
 800c3a0:	4641      	mov	r1, r8
 800c3a2:	b005      	add	sp, #20
 800c3a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c3a8:	f240 126d 	movw	r2, #365	@ 0x16d
 800c3ac:	e78d      	b.n	800c2ca <mktime+0xaa>
 800c3ae:	f44f 72b7 	mov.w	r2, #366	@ 0x16e
 800c3b2:	e78a      	b.n	800c2ca <mktime+0xaa>
 800c3b4:	d08d      	beq.n	800c2d2 <mktime+0xb2>
 800c3b6:	2345      	movs	r3, #69	@ 0x45
 800c3b8:	f240 1c6d 	movw	ip, #365	@ 0x16d
 800c3bc:	2164      	movs	r1, #100	@ 0x64
 800c3be:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 800c3c2:	e012      	b.n	800c3ea <mktime+0x1ca>
 800c3c4:	bb62      	cbnz	r2, 800c420 <mktime+0x200>
 800c3c6:	fb93 f2f1 	sdiv	r2, r3, r1
 800c3ca:	fb01 3212 	mls	r2, r1, r2, r3
 800c3ce:	bb52      	cbnz	r2, 800c426 <mktime+0x206>
 800c3d0:	f203 726c 	addw	r2, r3, #1900	@ 0x76c
 800c3d4:	fb92 fef0 	sdiv	lr, r2, r0
 800c3d8:	fb00 221e 	mls	r2, r0, lr, r2
 800c3dc:	2a00      	cmp	r2, #0
 800c3de:	bf14      	ite	ne
 800c3e0:	4662      	movne	r2, ip
 800c3e2:	f44f 72b7 	moveq.w	r2, #366	@ 0x16e
 800c3e6:	1ab6      	subs	r6, r6, r2
 800c3e8:	3b01      	subs	r3, #1
 800c3ea:	429d      	cmp	r5, r3
 800c3ec:	f003 0203 	and.w	r2, r3, #3
 800c3f0:	dbe8      	blt.n	800c3c4 <mktime+0x1a4>
 800c3f2:	b9da      	cbnz	r2, 800c42c <mktime+0x20c>
 800c3f4:	2264      	movs	r2, #100	@ 0x64
 800c3f6:	fb95 f3f2 	sdiv	r3, r5, r2
 800c3fa:	fb02 5313 	mls	r3, r2, r3, r5
 800c3fe:	b9c3      	cbnz	r3, 800c432 <mktime+0x212>
 800c400:	f205 736c 	addw	r3, r5, #1900	@ 0x76c
 800c404:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800c408:	fb93 f1f2 	sdiv	r1, r3, r2
 800c40c:	fb02 3311 	mls	r3, r2, r1, r3
 800c410:	2b00      	cmp	r3, #0
 800c412:	f240 136d 	movw	r3, #365	@ 0x16d
 800c416:	bf08      	it	eq
 800c418:	f44f 73b7 	moveq.w	r3, #366	@ 0x16e
 800c41c:	1af6      	subs	r6, r6, r3
 800c41e:	e758      	b.n	800c2d2 <mktime+0xb2>
 800c420:	f240 126d 	movw	r2, #365	@ 0x16d
 800c424:	e7df      	b.n	800c3e6 <mktime+0x1c6>
 800c426:	f44f 72b7 	mov.w	r2, #366	@ 0x16e
 800c42a:	e7dc      	b.n	800c3e6 <mktime+0x1c6>
 800c42c:	f240 136d 	movw	r3, #365	@ 0x16d
 800c430:	e7f4      	b.n	800c41c <mktime+0x1fc>
 800c432:	f44f 73b7 	mov.w	r3, #366	@ 0x16e
 800c436:	e7f1      	b.n	800c41c <mktime+0x1fc>
 800c438:	f000 f8a2 	bl	800c580 <__tzcalc_limits>
 800c43c:	2800      	cmp	r0, #0
 800c43e:	f47f af65 	bne.w	800c30c <mktime+0xec>
 800c442:	f8dd b004 	ldr.w	fp, [sp, #4]
 800c446:	e791      	b.n	800c36c <mktime+0x14c>
 800c448:	9a02      	ldr	r2, [sp, #8]
 800c44a:	1a12      	subs	r2, r2, r0
 800c44c:	9202      	str	r2, [sp, #8]
 800c44e:	ea4f 72e0 	mov.w	r2, r0, asr #31
 800c452:	eb6c 0c02 	sbc.w	ip, ip, r2
 800c456:	9a02      	ldr	r2, [sp, #8]
 800c458:	4294      	cmp	r4, r2
 800c45a:	eb78 0c0c 	sbcs.w	ip, r8, ip
 800c45e:	dbf0      	blt.n	800c442 <mktime+0x222>
 800c460:	e76d      	b.n	800c33e <mktime+0x11e>
 800c462:	9a03      	ldr	r2, [sp, #12]
 800c464:	4294      	cmp	r4, r2
 800c466:	eb78 020b 	sbcs.w	r2, r8, fp
 800c46a:	f6ff af73 	blt.w	800c354 <mktime+0x134>
 800c46e:	f1ba 0f00 	cmp.w	sl, #0
 800c472:	f6ff af7f 	blt.w	800c374 <mktime+0x154>
 800c476:	f04f 0b01 	mov.w	fp, #1
 800c47a:	9a01      	ldr	r2, [sp, #4]
 800c47c:	ea82 020b 	eor.w	r2, r2, fp
 800c480:	2a01      	cmp	r2, #1
 800c482:	f47f af73 	bne.w	800c36c <mktime+0x14c>
 800c486:	f1bb 0f00 	cmp.w	fp, #0
 800c48a:	d035      	beq.n	800c4f8 <mktime+0x2d8>
 800c48c:	1a1b      	subs	r3, r3, r0
 800c48e:	683a      	ldr	r2, [r7, #0]
 800c490:	f8d7 a00c 	ldr.w	sl, [r7, #12]
 800c494:	441a      	add	r2, r3
 800c496:	191c      	adds	r4, r3, r4
 800c498:	603a      	str	r2, [r7, #0]
 800c49a:	4638      	mov	r0, r7
 800c49c:	eb48 78e3 	adc.w	r8, r8, r3, asr #31
 800c4a0:	f7ff fdea 	bl	800c078 <validate_structure>
 800c4a4:	68fa      	ldr	r2, [r7, #12]
 800c4a6:	ebb2 020a 	subs.w	r2, r2, sl
 800c4aa:	f43f af5f 	beq.w	800c36c <mktime+0x14c>
 800c4ae:	2a01      	cmp	r2, #1
 800c4b0:	dc24      	bgt.n	800c4fc <mktime+0x2dc>
 800c4b2:	1c93      	adds	r3, r2, #2
 800c4b4:	bfd8      	it	le
 800c4b6:	2201      	movle	r2, #1
 800c4b8:	69fb      	ldr	r3, [r7, #28]
 800c4ba:	18d3      	adds	r3, r2, r3
 800c4bc:	d527      	bpl.n	800c50e <mktime+0x2ee>
 800c4be:	1e6b      	subs	r3, r5, #1
 800c4c0:	0798      	lsls	r0, r3, #30
 800c4c2:	d11e      	bne.n	800c502 <mktime+0x2e2>
 800c4c4:	2164      	movs	r1, #100	@ 0x64
 800c4c6:	fb93 f0f1 	sdiv	r0, r3, r1
 800c4ca:	fb01 3310 	mls	r3, r1, r0, r3
 800c4ce:	b9db      	cbnz	r3, 800c508 <mktime+0x2e8>
 800c4d0:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 800c4d4:	f205 756b 	addw	r5, r5, #1899	@ 0x76b
 800c4d8:	fb95 f1f3 	sdiv	r1, r5, r3
 800c4dc:	fb03 5511 	mls	r5, r3, r1, r5
 800c4e0:	2d00      	cmp	r5, #0
 800c4e2:	f240 136d 	movw	r3, #365	@ 0x16d
 800c4e6:	bf18      	it	ne
 800c4e8:	f44f 73b6 	movne.w	r3, #364	@ 0x16c
 800c4ec:	61fb      	str	r3, [r7, #28]
 800c4ee:	4416      	add	r6, r2
 800c4f0:	e73c      	b.n	800c36c <mktime+0x14c>
 800c4f2:	f04f 0b00 	mov.w	fp, #0
 800c4f6:	e7c0      	b.n	800c47a <mktime+0x25a>
 800c4f8:	1ac3      	subs	r3, r0, r3
 800c4fa:	e7c8      	b.n	800c48e <mktime+0x26e>
 800c4fc:	f04f 32ff 	mov.w	r2, #4294967295
 800c500:	e7da      	b.n	800c4b8 <mktime+0x298>
 800c502:	f44f 73b6 	mov.w	r3, #364	@ 0x16c
 800c506:	e7f1      	b.n	800c4ec <mktime+0x2cc>
 800c508:	f240 136d 	movw	r3, #365	@ 0x16d
 800c50c:	e7ee      	b.n	800c4ec <mktime+0x2cc>
 800c50e:	07a9      	lsls	r1, r5, #30
 800c510:	d117      	bne.n	800c542 <mktime+0x322>
 800c512:	2064      	movs	r0, #100	@ 0x64
 800c514:	fb95 f1f0 	sdiv	r1, r5, r0
 800c518:	fb00 5111 	mls	r1, r0, r1, r5
 800c51c:	b9a1      	cbnz	r1, 800c548 <mktime+0x328>
 800c51e:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 800c522:	f205 756c 	addw	r5, r5, #1900	@ 0x76c
 800c526:	fb95 f0f1 	sdiv	r0, r5, r1
 800c52a:	fb01 5510 	mls	r5, r1, r0, r5
 800c52e:	2d00      	cmp	r5, #0
 800c530:	f240 116d 	movw	r1, #365	@ 0x16d
 800c534:	bf08      	it	eq
 800c536:	f44f 71b7 	moveq.w	r1, #366	@ 0x16e
 800c53a:	428b      	cmp	r3, r1
 800c53c:	bfa8      	it	ge
 800c53e:	1a5b      	subge	r3, r3, r1
 800c540:	e7d4      	b.n	800c4ec <mktime+0x2cc>
 800c542:	f240 116d 	movw	r1, #365	@ 0x16d
 800c546:	e7f8      	b.n	800c53a <mktime+0x31a>
 800c548:	f44f 71b7 	mov.w	r1, #366	@ 0x16e
 800c54c:	e7f5      	b.n	800c53a <mktime+0x31a>
 800c54e:	3607      	adds	r6, #7
 800c550:	e722      	b.n	800c398 <mktime+0x178>
 800c552:	bf00      	nop
 800c554:	08013ba8 	.word	0x08013ba8
 800c558:	00015180 	.word	0x00015180
 800c55c:	20009990 	.word	0x20009990
 800c560:	f04f 34ff 	mov.w	r4, #4294967295
 800c564:	46a0      	mov	r8, r4
 800c566:	e71a      	b.n	800c39e <mktime+0x17e>
 800c568:	f1ba 0f00 	cmp.w	sl, #0
 800c56c:	dac1      	bge.n	800c4f2 <mktime+0x2d2>
 800c56e:	f04f 0b00 	mov.w	fp, #0
 800c572:	f8d9 3028 	ldr.w	r3, [r9, #40]	@ 0x28
 800c576:	191c      	adds	r4, r3, r4
 800c578:	eb48 78e3 	adc.w	r8, r8, r3, asr #31
 800c57c:	e701      	b.n	800c382 <mktime+0x162>
 800c57e:	bf00      	nop

0800c580 <__tzcalc_limits>:
 800c580:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c584:	4604      	mov	r4, r0
 800c586:	f003 f895 	bl	800f6b4 <__gettzinfo>
 800c58a:	f240 73b1 	movw	r3, #1969	@ 0x7b1
 800c58e:	429c      	cmp	r4, r3
 800c590:	f340 8099 	ble.w	800c6c6 <__tzcalc_limits+0x146>
 800c594:	f46f 67f6 	mvn.w	r7, #1968	@ 0x7b0
 800c598:	19e5      	adds	r5, r4, r7
 800c59a:	f2a4 73b2 	subw	r3, r4, #1970	@ 0x7b2
 800c59e:	f240 126d 	movw	r2, #365	@ 0x16d
 800c5a2:	10ad      	asrs	r5, r5, #2
 800c5a4:	fb02 5503 	mla	r5, r2, r3, r5
 800c5a8:	f46f 6cc8 	mvn.w	ip, #1600	@ 0x640
 800c5ac:	f06f 0263 	mvn.w	r2, #99	@ 0x63
 800c5b0:	f2a4 736d 	subw	r3, r4, #1901	@ 0x76d
 800c5b4:	4f45      	ldr	r7, [pc, #276]	@ (800c6cc <__tzcalc_limits+0x14c>)
 800c5b6:	fb93 f3f2 	sdiv	r3, r3, r2
 800c5ba:	441d      	add	r5, r3
 800c5bc:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800c5c0:	eb04 030c 	add.w	r3, r4, ip
 800c5c4:	6044      	str	r4, [r0, #4]
 800c5c6:	fbb3 f3f2 	udiv	r3, r3, r2
 800c5ca:	4601      	mov	r1, r0
 800c5cc:	441d      	add	r5, r3
 800c5ce:	f100 0c50 	add.w	ip, r0, #80	@ 0x50
 800c5d2:	7a0b      	ldrb	r3, [r1, #8]
 800c5d4:	694a      	ldr	r2, [r1, #20]
 800c5d6:	2b4a      	cmp	r3, #74	@ 0x4a
 800c5d8:	d133      	bne.n	800c642 <__tzcalc_limits+0xc2>
 800c5da:	07a6      	lsls	r6, r4, #30
 800c5dc:	eb05 0302 	add.w	r3, r5, r2
 800c5e0:	d106      	bne.n	800c5f0 <__tzcalc_limits+0x70>
 800c5e2:	f04f 0e64 	mov.w	lr, #100	@ 0x64
 800c5e6:	fb94 f6fe 	sdiv	r6, r4, lr
 800c5ea:	fb0e 4616 	mls	r6, lr, r6, r4
 800c5ee:	b936      	cbnz	r6, 800c5fe <__tzcalc_limits+0x7e>
 800c5f0:	f44f 7ec8 	mov.w	lr, #400	@ 0x190
 800c5f4:	fb94 f6fe 	sdiv	r6, r4, lr
 800c5f8:	fb0e 4616 	mls	r6, lr, r6, r4
 800c5fc:	b9fe      	cbnz	r6, 800c63e <__tzcalc_limits+0xbe>
 800c5fe:	2a3b      	cmp	r2, #59	@ 0x3b
 800c600:	bfd4      	ite	le
 800c602:	2200      	movle	r2, #0
 800c604:	2201      	movgt	r2, #1
 800c606:	4413      	add	r3, r2
 800c608:	3b01      	subs	r3, #1
 800c60a:	698a      	ldr	r2, [r1, #24]
 800c60c:	17d6      	asrs	r6, r2, #31
 800c60e:	fbc3 2607 	smlal	r2, r6, r3, r7
 800c612:	6a8b      	ldr	r3, [r1, #40]	@ 0x28
 800c614:	18d2      	adds	r2, r2, r3
 800c616:	eb46 73e3 	adc.w	r3, r6, r3, asr #31
 800c61a:	e9c1 2308 	strd	r2, r3, [r1, #32]
 800c61e:	3128      	adds	r1, #40	@ 0x28
 800c620:	458c      	cmp	ip, r1
 800c622:	d1d6      	bne.n	800c5d2 <__tzcalc_limits+0x52>
 800c624:	e9d0 4308 	ldrd	r4, r3, [r0, #32]
 800c628:	e9d0 1212 	ldrd	r1, r2, [r0, #72]	@ 0x48
 800c62c:	428c      	cmp	r4, r1
 800c62e:	4193      	sbcs	r3, r2
 800c630:	bfb4      	ite	lt
 800c632:	2301      	movlt	r3, #1
 800c634:	2300      	movge	r3, #0
 800c636:	6003      	str	r3, [r0, #0]
 800c638:	2001      	movs	r0, #1
 800c63a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c63e:	2200      	movs	r2, #0
 800c640:	e7e1      	b.n	800c606 <__tzcalc_limits+0x86>
 800c642:	2b44      	cmp	r3, #68	@ 0x44
 800c644:	d101      	bne.n	800c64a <__tzcalc_limits+0xca>
 800c646:	18ab      	adds	r3, r5, r2
 800c648:	e7df      	b.n	800c60a <__tzcalc_limits+0x8a>
 800c64a:	07a3      	lsls	r3, r4, #30
 800c64c:	d105      	bne.n	800c65a <__tzcalc_limits+0xda>
 800c64e:	2664      	movs	r6, #100	@ 0x64
 800c650:	fb94 f3f6 	sdiv	r3, r4, r6
 800c654:	fb06 4313 	mls	r3, r6, r3, r4
 800c658:	bb7b      	cbnz	r3, 800c6ba <__tzcalc_limits+0x13a>
 800c65a:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 800c65e:	fb94 f6f3 	sdiv	r6, r4, r3
 800c662:	fb03 4616 	mls	r6, r3, r6, r4
 800c666:	fab6 f686 	clz	r6, r6
 800c66a:	0976      	lsrs	r6, r6, #5
 800c66c:	f8df e060 	ldr.w	lr, [pc, #96]	@ 800c6d0 <__tzcalc_limits+0x150>
 800c670:	f8d1 900c 	ldr.w	r9, [r1, #12]
 800c674:	f04f 0a30 	mov.w	sl, #48	@ 0x30
 800c678:	462b      	mov	r3, r5
 800c67a:	f04f 0800 	mov.w	r8, #0
 800c67e:	fb0a e606 	mla	r6, sl, r6, lr
 800c682:	f108 0801 	add.w	r8, r8, #1
 800c686:	45c1      	cmp	r9, r8
 800c688:	f856 e028 	ldr.w	lr, [r6, r8, lsl #2]
 800c68c:	dc17      	bgt.n	800c6be <__tzcalc_limits+0x13e>
 800c68e:	f103 0804 	add.w	r8, r3, #4
 800c692:	2607      	movs	r6, #7
 800c694:	fb98 f6f6 	sdiv	r6, r8, r6
 800c698:	ebc6 06c6 	rsb	r6, r6, r6, lsl #3
 800c69c:	eba8 0606 	sub.w	r6, r8, r6
 800c6a0:	1b92      	subs	r2, r2, r6
 800c6a2:	690e      	ldr	r6, [r1, #16]
 800c6a4:	f106 36ff 	add.w	r6, r6, #4294967295
 800c6a8:	bf48      	it	mi
 800c6aa:	3207      	addmi	r2, #7
 800c6ac:	ebc6 06c6 	rsb	r6, r6, r6, lsl #3
 800c6b0:	4432      	add	r2, r6
 800c6b2:	4572      	cmp	r2, lr
 800c6b4:	da05      	bge.n	800c6c2 <__tzcalc_limits+0x142>
 800c6b6:	4413      	add	r3, r2
 800c6b8:	e7a7      	b.n	800c60a <__tzcalc_limits+0x8a>
 800c6ba:	2601      	movs	r6, #1
 800c6bc:	e7d6      	b.n	800c66c <__tzcalc_limits+0xec>
 800c6be:	4473      	add	r3, lr
 800c6c0:	e7df      	b.n	800c682 <__tzcalc_limits+0x102>
 800c6c2:	3a07      	subs	r2, #7
 800c6c4:	e7f5      	b.n	800c6b2 <__tzcalc_limits+0x132>
 800c6c6:	2000      	movs	r0, #0
 800c6c8:	e7b7      	b.n	800c63a <__tzcalc_limits+0xba>
 800c6ca:	bf00      	nop
 800c6cc:	00015180 	.word	0x00015180
 800c6d0:	08013ec8 	.word	0x08013ec8

0800c6d4 <__tz_lock>:
 800c6d4:	4801      	ldr	r0, [pc, #4]	@ (800c6dc <__tz_lock+0x8>)
 800c6d6:	f7f8 bdca 	b.w	800526e <__retarget_lock_acquire>
 800c6da:	bf00      	nop
 800c6dc:	20002824 	.word	0x20002824

0800c6e0 <__tz_unlock>:
 800c6e0:	4801      	ldr	r0, [pc, #4]	@ (800c6e8 <__tz_unlock+0x8>)
 800c6e2:	f7f8 bdce 	b.w	8005282 <__retarget_lock_release>
 800c6e6:	bf00      	nop
 800c6e8:	20002824 	.word	0x20002824

0800c6ec <_tzset_unlocked>:
 800c6ec:	4b01      	ldr	r3, [pc, #4]	@ (800c6f4 <_tzset_unlocked+0x8>)
 800c6ee:	6818      	ldr	r0, [r3, #0]
 800c6f0:	f000 b802 	b.w	800c6f8 <_tzset_unlocked_r>
 800c6f4:	200001a4 	.word	0x200001a4

0800c6f8 <_tzset_unlocked_r>:
 800c6f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6fc:	b08d      	sub	sp, #52	@ 0x34
 800c6fe:	4607      	mov	r7, r0
 800c700:	f002 ffd8 	bl	800f6b4 <__gettzinfo>
 800c704:	49bc      	ldr	r1, [pc, #752]	@ (800c9f8 <_tzset_unlocked_r+0x300>)
 800c706:	4dbd      	ldr	r5, [pc, #756]	@ (800c9fc <_tzset_unlocked_r+0x304>)
 800c708:	4604      	mov	r4, r0
 800c70a:	4638      	mov	r0, r7
 800c70c:	f001 fcd4 	bl	800e0b8 <_getenv_r>
 800c710:	4606      	mov	r6, r0
 800c712:	bb10      	cbnz	r0, 800c75a <_tzset_unlocked_r+0x62>
 800c714:	4bba      	ldr	r3, [pc, #744]	@ (800ca00 <_tzset_unlocked_r+0x308>)
 800c716:	4abb      	ldr	r2, [pc, #748]	@ (800ca04 <_tzset_unlocked_r+0x30c>)
 800c718:	6018      	str	r0, [r3, #0]
 800c71a:	4bbb      	ldr	r3, [pc, #748]	@ (800ca08 <_tzset_unlocked_r+0x310>)
 800c71c:	62a0      	str	r0, [r4, #40]	@ 0x28
 800c71e:	6018      	str	r0, [r3, #0]
 800c720:	4bba      	ldr	r3, [pc, #744]	@ (800ca0c <_tzset_unlocked_r+0x314>)
 800c722:	6520      	str	r0, [r4, #80]	@ 0x50
 800c724:	e9c3 2200 	strd	r2, r2, [r3]
 800c728:	214a      	movs	r1, #74	@ 0x4a
 800c72a:	2200      	movs	r2, #0
 800c72c:	2300      	movs	r3, #0
 800c72e:	e9c4 0003 	strd	r0, r0, [r4, #12]
 800c732:	e9c4 0005 	strd	r0, r0, [r4, #20]
 800c736:	e9c4 000d 	strd	r0, r0, [r4, #52]	@ 0x34
 800c73a:	e9c4 000f 	strd	r0, r0, [r4, #60]	@ 0x3c
 800c73e:	e9c4 2308 	strd	r2, r3, [r4, #32]
 800c742:	e9c4 2312 	strd	r2, r3, [r4, #72]	@ 0x48
 800c746:	6828      	ldr	r0, [r5, #0]
 800c748:	7221      	strb	r1, [r4, #8]
 800c74a:	f884 1030 	strb.w	r1, [r4, #48]	@ 0x30
 800c74e:	f7fd fcb1 	bl	800a0b4 <free>
 800c752:	602e      	str	r6, [r5, #0]
 800c754:	b00d      	add	sp, #52	@ 0x34
 800c756:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c75a:	6829      	ldr	r1, [r5, #0]
 800c75c:	2900      	cmp	r1, #0
 800c75e:	f040 808e 	bne.w	800c87e <_tzset_unlocked_r+0x186>
 800c762:	6828      	ldr	r0, [r5, #0]
 800c764:	f7fd fca6 	bl	800a0b4 <free>
 800c768:	4630      	mov	r0, r6
 800c76a:	f7f3 fd91 	bl	8000290 <strlen>
 800c76e:	1c41      	adds	r1, r0, #1
 800c770:	4638      	mov	r0, r7
 800c772:	f7fd fcc9 	bl	800a108 <_malloc_r>
 800c776:	6028      	str	r0, [r5, #0]
 800c778:	2800      	cmp	r0, #0
 800c77a:	f040 8086 	bne.w	800c88a <_tzset_unlocked_r+0x192>
 800c77e:	4aa2      	ldr	r2, [pc, #648]	@ (800ca08 <_tzset_unlocked_r+0x310>)
 800c780:	f8df 8288 	ldr.w	r8, [pc, #648]	@ 800ca0c <_tzset_unlocked_r+0x314>
 800c784:	f8df a278 	ldr.w	sl, [pc, #632]	@ 800ca00 <_tzset_unlocked_r+0x308>
 800c788:	2300      	movs	r3, #0
 800c78a:	6013      	str	r3, [r2, #0]
 800c78c:	4aa0      	ldr	r2, [pc, #640]	@ (800ca10 <_tzset_unlocked_r+0x318>)
 800c78e:	f8ca 3000 	str.w	r3, [sl]
 800c792:	2000      	movs	r0, #0
 800c794:	2100      	movs	r1, #0
 800c796:	e9c8 2200 	strd	r2, r2, [r8]
 800c79a:	e9c4 3303 	strd	r3, r3, [r4, #12]
 800c79e:	e9c4 3305 	strd	r3, r3, [r4, #20]
 800c7a2:	e9c4 0108 	strd	r0, r1, [r4, #32]
 800c7a6:	e9c4 330d 	strd	r3, r3, [r4, #52]	@ 0x34
 800c7aa:	e9c4 330f 	strd	r3, r3, [r4, #60]	@ 0x3c
 800c7ae:	e9c4 0112 	strd	r0, r1, [r4, #72]	@ 0x48
 800c7b2:	224a      	movs	r2, #74	@ 0x4a
 800c7b4:	7222      	strb	r2, [r4, #8]
 800c7b6:	62a3      	str	r3, [r4, #40]	@ 0x28
 800c7b8:	f884 2030 	strb.w	r2, [r4, #48]	@ 0x30
 800c7bc:	6523      	str	r3, [r4, #80]	@ 0x50
 800c7be:	7833      	ldrb	r3, [r6, #0]
 800c7c0:	2b3a      	cmp	r3, #58	@ 0x3a
 800c7c2:	bf08      	it	eq
 800c7c4:	3601      	addeq	r6, #1
 800c7c6:	7833      	ldrb	r3, [r6, #0]
 800c7c8:	2b3c      	cmp	r3, #60	@ 0x3c
 800c7ca:	d162      	bne.n	800c892 <_tzset_unlocked_r+0x19a>
 800c7cc:	1c75      	adds	r5, r6, #1
 800c7ce:	4a91      	ldr	r2, [pc, #580]	@ (800ca14 <_tzset_unlocked_r+0x31c>)
 800c7d0:	4991      	ldr	r1, [pc, #580]	@ (800ca18 <_tzset_unlocked_r+0x320>)
 800c7d2:	ab0a      	add	r3, sp, #40	@ 0x28
 800c7d4:	4628      	mov	r0, r5
 800c7d6:	f7ff fb41 	bl	800be5c <siscanf>
 800c7da:	2800      	cmp	r0, #0
 800c7dc:	ddba      	ble.n	800c754 <_tzset_unlocked_r+0x5c>
 800c7de:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c7e0:	1eda      	subs	r2, r3, #3
 800c7e2:	2a07      	cmp	r2, #7
 800c7e4:	d8b6      	bhi.n	800c754 <_tzset_unlocked_r+0x5c>
 800c7e6:	5ceb      	ldrb	r3, [r5, r3]
 800c7e8:	2b3e      	cmp	r3, #62	@ 0x3e
 800c7ea:	d1b3      	bne.n	800c754 <_tzset_unlocked_r+0x5c>
 800c7ec:	3602      	adds	r6, #2
 800c7ee:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c7f0:	18f5      	adds	r5, r6, r3
 800c7f2:	5cf3      	ldrb	r3, [r6, r3]
 800c7f4:	2b2d      	cmp	r3, #45	@ 0x2d
 800c7f6:	d15a      	bne.n	800c8ae <_tzset_unlocked_r+0x1b6>
 800c7f8:	3501      	adds	r5, #1
 800c7fa:	f04f 39ff 	mov.w	r9, #4294967295
 800c7fe:	2300      	movs	r3, #0
 800c800:	f8ad 301e 	strh.w	r3, [sp, #30]
 800c804:	f8ad 3020 	strh.w	r3, [sp, #32]
 800c808:	af08      	add	r7, sp, #32
 800c80a:	ab0a      	add	r3, sp, #40	@ 0x28
 800c80c:	e9cd 3701 	strd	r3, r7, [sp, #4]
 800c810:	9303      	str	r3, [sp, #12]
 800c812:	f10d 031e 	add.w	r3, sp, #30
 800c816:	9300      	str	r3, [sp, #0]
 800c818:	4980      	ldr	r1, [pc, #512]	@ (800ca1c <_tzset_unlocked_r+0x324>)
 800c81a:	ab0a      	add	r3, sp, #40	@ 0x28
 800c81c:	aa07      	add	r2, sp, #28
 800c81e:	4628      	mov	r0, r5
 800c820:	f7ff fb1c 	bl	800be5c <siscanf>
 800c824:	2800      	cmp	r0, #0
 800c826:	dd95      	ble.n	800c754 <_tzset_unlocked_r+0x5c>
 800c828:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 800c82c:	f8bd 6020 	ldrh.w	r6, [sp, #32]
 800c830:	223c      	movs	r2, #60	@ 0x3c
 800c832:	fb02 6603 	mla	r6, r2, r3, r6
 800c836:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 800c83a:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 800c83e:	fb02 6603 	mla	r6, r2, r3, r6
 800c842:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c844:	fb09 f606 	mul.w	r6, r9, r6
 800c848:	eb05 0903 	add.w	r9, r5, r3
 800c84c:	5ceb      	ldrb	r3, [r5, r3]
 800c84e:	2b3c      	cmp	r3, #60	@ 0x3c
 800c850:	f040 80ee 	bne.w	800ca30 <_tzset_unlocked_r+0x338>
 800c854:	f109 0501 	add.w	r5, r9, #1
 800c858:	4a71      	ldr	r2, [pc, #452]	@ (800ca20 <_tzset_unlocked_r+0x328>)
 800c85a:	496f      	ldr	r1, [pc, #444]	@ (800ca18 <_tzset_unlocked_r+0x320>)
 800c85c:	ab0a      	add	r3, sp, #40	@ 0x28
 800c85e:	4628      	mov	r0, r5
 800c860:	f7ff fafc 	bl	800be5c <siscanf>
 800c864:	2800      	cmp	r0, #0
 800c866:	dc28      	bgt.n	800c8ba <_tzset_unlocked_r+0x1c2>
 800c868:	f899 3001 	ldrb.w	r3, [r9, #1]
 800c86c:	2b3e      	cmp	r3, #62	@ 0x3e
 800c86e:	d124      	bne.n	800c8ba <_tzset_unlocked_r+0x1c2>
 800c870:	4b68      	ldr	r3, [pc, #416]	@ (800ca14 <_tzset_unlocked_r+0x31c>)
 800c872:	62a6      	str	r6, [r4, #40]	@ 0x28
 800c874:	e9c8 3300 	strd	r3, r3, [r8]
 800c878:	f8ca 6000 	str.w	r6, [sl]
 800c87c:	e76a      	b.n	800c754 <_tzset_unlocked_r+0x5c>
 800c87e:	f7f3 fca7 	bl	80001d0 <strcmp>
 800c882:	2800      	cmp	r0, #0
 800c884:	f47f af6d 	bne.w	800c762 <_tzset_unlocked_r+0x6a>
 800c888:	e764      	b.n	800c754 <_tzset_unlocked_r+0x5c>
 800c88a:	4631      	mov	r1, r6
 800c88c:	f000 f9da 	bl	800cc44 <strcpy>
 800c890:	e775      	b.n	800c77e <_tzset_unlocked_r+0x86>
 800c892:	4a60      	ldr	r2, [pc, #384]	@ (800ca14 <_tzset_unlocked_r+0x31c>)
 800c894:	4963      	ldr	r1, [pc, #396]	@ (800ca24 <_tzset_unlocked_r+0x32c>)
 800c896:	ab0a      	add	r3, sp, #40	@ 0x28
 800c898:	4630      	mov	r0, r6
 800c89a:	f7ff fadf 	bl	800be5c <siscanf>
 800c89e:	2800      	cmp	r0, #0
 800c8a0:	f77f af58 	ble.w	800c754 <_tzset_unlocked_r+0x5c>
 800c8a4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c8a6:	3b03      	subs	r3, #3
 800c8a8:	2b07      	cmp	r3, #7
 800c8aa:	d9a0      	bls.n	800c7ee <_tzset_unlocked_r+0xf6>
 800c8ac:	e752      	b.n	800c754 <_tzset_unlocked_r+0x5c>
 800c8ae:	2b2b      	cmp	r3, #43	@ 0x2b
 800c8b0:	bf08      	it	eq
 800c8b2:	3501      	addeq	r5, #1
 800c8b4:	f04f 0901 	mov.w	r9, #1
 800c8b8:	e7a1      	b.n	800c7fe <_tzset_unlocked_r+0x106>
 800c8ba:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c8bc:	1eda      	subs	r2, r3, #3
 800c8be:	2a07      	cmp	r2, #7
 800c8c0:	f63f af48 	bhi.w	800c754 <_tzset_unlocked_r+0x5c>
 800c8c4:	5ceb      	ldrb	r3, [r5, r3]
 800c8c6:	2b3e      	cmp	r3, #62	@ 0x3e
 800c8c8:	f47f af44 	bne.w	800c754 <_tzset_unlocked_r+0x5c>
 800c8cc:	f109 0902 	add.w	r9, r9, #2
 800c8d0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c8d2:	eb09 0503 	add.w	r5, r9, r3
 800c8d6:	f819 3003 	ldrb.w	r3, [r9, r3]
 800c8da:	2b2d      	cmp	r3, #45	@ 0x2d
 800c8dc:	f040 80b7 	bne.w	800ca4e <_tzset_unlocked_r+0x356>
 800c8e0:	3501      	adds	r5, #1
 800c8e2:	f04f 39ff 	mov.w	r9, #4294967295
 800c8e6:	2300      	movs	r3, #0
 800c8e8:	f8ad 301c 	strh.w	r3, [sp, #28]
 800c8ec:	f8ad 301e 	strh.w	r3, [sp, #30]
 800c8f0:	f8ad 3020 	strh.w	r3, [sp, #32]
 800c8f4:	930a      	str	r3, [sp, #40]	@ 0x28
 800c8f6:	ab0a      	add	r3, sp, #40	@ 0x28
 800c8f8:	e9cd 7302 	strd	r7, r3, [sp, #8]
 800c8fc:	9301      	str	r3, [sp, #4]
 800c8fe:	f10d 031e 	add.w	r3, sp, #30
 800c902:	9300      	str	r3, [sp, #0]
 800c904:	4945      	ldr	r1, [pc, #276]	@ (800ca1c <_tzset_unlocked_r+0x324>)
 800c906:	ab0a      	add	r3, sp, #40	@ 0x28
 800c908:	aa07      	add	r2, sp, #28
 800c90a:	4628      	mov	r0, r5
 800c90c:	f7ff faa6 	bl	800be5c <siscanf>
 800c910:	2800      	cmp	r0, #0
 800c912:	f300 80a2 	bgt.w	800ca5a <_tzset_unlocked_r+0x362>
 800c916:	f5a6 6361 	sub.w	r3, r6, #3600	@ 0xe10
 800c91a:	9304      	str	r3, [sp, #16]
 800c91c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c91e:	4627      	mov	r7, r4
 800c920:	441d      	add	r5, r3
 800c922:	f04f 0b00 	mov.w	fp, #0
 800c926:	782b      	ldrb	r3, [r5, #0]
 800c928:	2b2c      	cmp	r3, #44	@ 0x2c
 800c92a:	bf08      	it	eq
 800c92c:	3501      	addeq	r5, #1
 800c92e:	f895 9000 	ldrb.w	r9, [r5]
 800c932:	f1b9 0f4d 	cmp.w	r9, #77	@ 0x4d
 800c936:	f040 80a3 	bne.w	800ca80 <_tzset_unlocked_r+0x388>
 800c93a:	ab0a      	add	r3, sp, #40	@ 0x28
 800c93c:	f10d 0226 	add.w	r2, sp, #38	@ 0x26
 800c940:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800c944:	aa09      	add	r2, sp, #36	@ 0x24
 800c946:	9200      	str	r2, [sp, #0]
 800c948:	4937      	ldr	r1, [pc, #220]	@ (800ca28 <_tzset_unlocked_r+0x330>)
 800c94a:	9303      	str	r3, [sp, #12]
 800c94c:	f10d 0222 	add.w	r2, sp, #34	@ 0x22
 800c950:	4628      	mov	r0, r5
 800c952:	f7ff fa83 	bl	800be5c <siscanf>
 800c956:	2803      	cmp	r0, #3
 800c958:	f47f aefc 	bne.w	800c754 <_tzset_unlocked_r+0x5c>
 800c95c:	f8bd 1022 	ldrh.w	r1, [sp, #34]	@ 0x22
 800c960:	1e4b      	subs	r3, r1, #1
 800c962:	2b0b      	cmp	r3, #11
 800c964:	f63f aef6 	bhi.w	800c754 <_tzset_unlocked_r+0x5c>
 800c968:	f8bd 2024 	ldrh.w	r2, [sp, #36]	@ 0x24
 800c96c:	1e53      	subs	r3, r2, #1
 800c96e:	2b04      	cmp	r3, #4
 800c970:	f63f aef0 	bhi.w	800c754 <_tzset_unlocked_r+0x5c>
 800c974:	f8bd 3026 	ldrh.w	r3, [sp, #38]	@ 0x26
 800c978:	2b06      	cmp	r3, #6
 800c97a:	f63f aeeb 	bhi.w	800c754 <_tzset_unlocked_r+0x5c>
 800c97e:	e9c7 1203 	strd	r1, r2, [r7, #12]
 800c982:	f887 9008 	strb.w	r9, [r7, #8]
 800c986:	617b      	str	r3, [r7, #20]
 800c988:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c98a:	eb05 0903 	add.w	r9, r5, r3
 800c98e:	2500      	movs	r5, #0
 800c990:	f04f 0302 	mov.w	r3, #2
 800c994:	f8ad 301c 	strh.w	r3, [sp, #28]
 800c998:	f8ad 501e 	strh.w	r5, [sp, #30]
 800c99c:	f8ad 5020 	strh.w	r5, [sp, #32]
 800c9a0:	950a      	str	r5, [sp, #40]	@ 0x28
 800c9a2:	f899 3000 	ldrb.w	r3, [r9]
 800c9a6:	2b2f      	cmp	r3, #47	@ 0x2f
 800c9a8:	f040 8096 	bne.w	800cad8 <_tzset_unlocked_r+0x3e0>
 800c9ac:	ab0a      	add	r3, sp, #40	@ 0x28
 800c9ae:	aa08      	add	r2, sp, #32
 800c9b0:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800c9b4:	f10d 021e 	add.w	r2, sp, #30
 800c9b8:	9200      	str	r2, [sp, #0]
 800c9ba:	491c      	ldr	r1, [pc, #112]	@ (800ca2c <_tzset_unlocked_r+0x334>)
 800c9bc:	9303      	str	r3, [sp, #12]
 800c9be:	aa07      	add	r2, sp, #28
 800c9c0:	4648      	mov	r0, r9
 800c9c2:	f7ff fa4b 	bl	800be5c <siscanf>
 800c9c6:	42a8      	cmp	r0, r5
 800c9c8:	f300 8086 	bgt.w	800cad8 <_tzset_unlocked_r+0x3e0>
 800c9cc:	214a      	movs	r1, #74	@ 0x4a
 800c9ce:	2200      	movs	r2, #0
 800c9d0:	2300      	movs	r3, #0
 800c9d2:	e9c4 5503 	strd	r5, r5, [r4, #12]
 800c9d6:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800c9da:	e9c4 2308 	strd	r2, r3, [r4, #32]
 800c9de:	e9c4 550d 	strd	r5, r5, [r4, #52]	@ 0x34
 800c9e2:	e9c4 550f 	strd	r5, r5, [r4, #60]	@ 0x3c
 800c9e6:	e9c4 2312 	strd	r2, r3, [r4, #72]	@ 0x48
 800c9ea:	7221      	strb	r1, [r4, #8]
 800c9ec:	62a5      	str	r5, [r4, #40]	@ 0x28
 800c9ee:	f884 1030 	strb.w	r1, [r4, #48]	@ 0x30
 800c9f2:	6525      	str	r5, [r4, #80]	@ 0x50
 800c9f4:	e6ae      	b.n	800c754 <_tzset_unlocked_r+0x5c>
 800c9f6:	bf00      	nop
 800c9f8:	08013c08 	.word	0x08013c08
 800c9fc:	20009970 	.word	0x20009970
 800ca00:	2000998c 	.word	0x2000998c
 800ca04:	08013c0b 	.word	0x08013c0b
 800ca08:	20009990 	.word	0x20009990
 800ca0c:	20000030 	.word	0x20000030
 800ca10:	0801296b 	.word	0x0801296b
 800ca14:	20009980 	.word	0x20009980
 800ca18:	08013c0f 	.word	0x08013c0f
 800ca1c:	08013c44 	.word	0x08013c44
 800ca20:	20009974 	.word	0x20009974
 800ca24:	08013c22 	.word	0x08013c22
 800ca28:	08013c30 	.word	0x08013c30
 800ca2c:	08013c43 	.word	0x08013c43
 800ca30:	4a3e      	ldr	r2, [pc, #248]	@ (800cb2c <_tzset_unlocked_r+0x434>)
 800ca32:	493f      	ldr	r1, [pc, #252]	@ (800cb30 <_tzset_unlocked_r+0x438>)
 800ca34:	ab0a      	add	r3, sp, #40	@ 0x28
 800ca36:	4648      	mov	r0, r9
 800ca38:	f7ff fa10 	bl	800be5c <siscanf>
 800ca3c:	2800      	cmp	r0, #0
 800ca3e:	f77f af17 	ble.w	800c870 <_tzset_unlocked_r+0x178>
 800ca42:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ca44:	3b03      	subs	r3, #3
 800ca46:	2b07      	cmp	r3, #7
 800ca48:	f67f af42 	bls.w	800c8d0 <_tzset_unlocked_r+0x1d8>
 800ca4c:	e682      	b.n	800c754 <_tzset_unlocked_r+0x5c>
 800ca4e:	2b2b      	cmp	r3, #43	@ 0x2b
 800ca50:	bf08      	it	eq
 800ca52:	3501      	addeq	r5, #1
 800ca54:	f04f 0901 	mov.w	r9, #1
 800ca58:	e745      	b.n	800c8e6 <_tzset_unlocked_r+0x1ee>
 800ca5a:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 800ca5e:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 800ca62:	213c      	movs	r1, #60	@ 0x3c
 800ca64:	fb01 3302 	mla	r3, r1, r2, r3
 800ca68:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 800ca6c:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 800ca70:	fb01 3302 	mla	r3, r1, r2, r3
 800ca74:	fb09 f303 	mul.w	r3, r9, r3
 800ca78:	e74f      	b.n	800c91a <_tzset_unlocked_r+0x222>
 800ca7a:	f04f 0b01 	mov.w	fp, #1
 800ca7e:	e752      	b.n	800c926 <_tzset_unlocked_r+0x22e>
 800ca80:	f1b9 0f4a 	cmp.w	r9, #74	@ 0x4a
 800ca84:	bf06      	itte	eq
 800ca86:	3501      	addeq	r5, #1
 800ca88:	464b      	moveq	r3, r9
 800ca8a:	2344      	movne	r3, #68	@ 0x44
 800ca8c:	220a      	movs	r2, #10
 800ca8e:	a90b      	add	r1, sp, #44	@ 0x2c
 800ca90:	4628      	mov	r0, r5
 800ca92:	9305      	str	r3, [sp, #20]
 800ca94:	f002 f84c 	bl	800eb30 <strtoul>
 800ca98:	f8dd 902c 	ldr.w	r9, [sp, #44]	@ 0x2c
 800ca9c:	9b05      	ldr	r3, [sp, #20]
 800ca9e:	f8ad 0026 	strh.w	r0, [sp, #38]	@ 0x26
 800caa2:	45a9      	cmp	r9, r5
 800caa4:	d114      	bne.n	800cad0 <_tzset_unlocked_r+0x3d8>
 800caa6:	234d      	movs	r3, #77	@ 0x4d
 800caa8:	f1bb 0f00 	cmp.w	fp, #0
 800caac:	d107      	bne.n	800cabe <_tzset_unlocked_r+0x3c6>
 800caae:	7223      	strb	r3, [r4, #8]
 800cab0:	2103      	movs	r1, #3
 800cab2:	2302      	movs	r3, #2
 800cab4:	e9c4 1303 	strd	r1, r3, [r4, #12]
 800cab8:	f8c4 b014 	str.w	fp, [r4, #20]
 800cabc:	e767      	b.n	800c98e <_tzset_unlocked_r+0x296>
 800cabe:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
 800cac2:	220b      	movs	r2, #11
 800cac4:	2301      	movs	r3, #1
 800cac6:	e9c4 230d 	strd	r2, r3, [r4, #52]	@ 0x34
 800caca:	2300      	movs	r3, #0
 800cacc:	63e3      	str	r3, [r4, #60]	@ 0x3c
 800cace:	e75e      	b.n	800c98e <_tzset_unlocked_r+0x296>
 800cad0:	b280      	uxth	r0, r0
 800cad2:	723b      	strb	r3, [r7, #8]
 800cad4:	6178      	str	r0, [r7, #20]
 800cad6:	e75a      	b.n	800c98e <_tzset_unlocked_r+0x296>
 800cad8:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 800cadc:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 800cae0:	213c      	movs	r1, #60	@ 0x3c
 800cae2:	fb01 3302 	mla	r3, r1, r2, r3
 800cae6:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 800caea:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 800caee:	fb01 3302 	mla	r3, r1, r2, r3
 800caf2:	61bb      	str	r3, [r7, #24]
 800caf4:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 800caf6:	3728      	adds	r7, #40	@ 0x28
 800caf8:	444d      	add	r5, r9
 800cafa:	f1bb 0f00 	cmp.w	fp, #0
 800cafe:	d0bc      	beq.n	800ca7a <_tzset_unlocked_r+0x382>
 800cb00:	9b04      	ldr	r3, [sp, #16]
 800cb02:	6523      	str	r3, [r4, #80]	@ 0x50
 800cb04:	4b0b      	ldr	r3, [pc, #44]	@ (800cb34 <_tzset_unlocked_r+0x43c>)
 800cb06:	f8c8 3000 	str.w	r3, [r8]
 800cb0a:	6860      	ldr	r0, [r4, #4]
 800cb0c:	4b07      	ldr	r3, [pc, #28]	@ (800cb2c <_tzset_unlocked_r+0x434>)
 800cb0e:	62a6      	str	r6, [r4, #40]	@ 0x28
 800cb10:	f8c8 3004 	str.w	r3, [r8, #4]
 800cb14:	f7ff fd34 	bl	800c580 <__tzcalc_limits>
 800cb18:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800cb1a:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 800cb1c:	f8ca 2000 	str.w	r2, [sl]
 800cb20:	1a9b      	subs	r3, r3, r2
 800cb22:	4a05      	ldr	r2, [pc, #20]	@ (800cb38 <_tzset_unlocked_r+0x440>)
 800cb24:	bf18      	it	ne
 800cb26:	2301      	movne	r3, #1
 800cb28:	6013      	str	r3, [r2, #0]
 800cb2a:	e613      	b.n	800c754 <_tzset_unlocked_r+0x5c>
 800cb2c:	20009974 	.word	0x20009974
 800cb30:	08013c22 	.word	0x08013c22
 800cb34:	20009980 	.word	0x20009980
 800cb38:	20009990 	.word	0x20009990

0800cb3c <_localeconv_r>:
 800cb3c:	4800      	ldr	r0, [pc, #0]	@ (800cb40 <_localeconv_r+0x4>)
 800cb3e:	4770      	bx	lr
 800cb40:	20000128 	.word	0x20000128

0800cb44 <_close_r>:
 800cb44:	b538      	push	{r3, r4, r5, lr}
 800cb46:	4d06      	ldr	r5, [pc, #24]	@ (800cb60 <_close_r+0x1c>)
 800cb48:	2300      	movs	r3, #0
 800cb4a:	4604      	mov	r4, r0
 800cb4c:	4608      	mov	r0, r1
 800cb4e:	602b      	str	r3, [r5, #0]
 800cb50:	f7f8 fac6 	bl	80050e0 <_close>
 800cb54:	1c43      	adds	r3, r0, #1
 800cb56:	d102      	bne.n	800cb5e <_close_r+0x1a>
 800cb58:	682b      	ldr	r3, [r5, #0]
 800cb5a:	b103      	cbz	r3, 800cb5e <_close_r+0x1a>
 800cb5c:	6023      	str	r3, [r4, #0]
 800cb5e:	bd38      	pop	{r3, r4, r5, pc}
 800cb60:	20009994 	.word	0x20009994

0800cb64 <_lseek_r>:
 800cb64:	b538      	push	{r3, r4, r5, lr}
 800cb66:	4d07      	ldr	r5, [pc, #28]	@ (800cb84 <_lseek_r+0x20>)
 800cb68:	4604      	mov	r4, r0
 800cb6a:	4608      	mov	r0, r1
 800cb6c:	4611      	mov	r1, r2
 800cb6e:	2200      	movs	r2, #0
 800cb70:	602a      	str	r2, [r5, #0]
 800cb72:	461a      	mov	r2, r3
 800cb74:	f7f8 fabe 	bl	80050f4 <_lseek>
 800cb78:	1c43      	adds	r3, r0, #1
 800cb7a:	d102      	bne.n	800cb82 <_lseek_r+0x1e>
 800cb7c:	682b      	ldr	r3, [r5, #0]
 800cb7e:	b103      	cbz	r3, 800cb82 <_lseek_r+0x1e>
 800cb80:	6023      	str	r3, [r4, #0]
 800cb82:	bd38      	pop	{r3, r4, r5, pc}
 800cb84:	20009994 	.word	0x20009994

0800cb88 <_read_r>:
 800cb88:	b538      	push	{r3, r4, r5, lr}
 800cb8a:	4d07      	ldr	r5, [pc, #28]	@ (800cba8 <_read_r+0x20>)
 800cb8c:	4604      	mov	r4, r0
 800cb8e:	4608      	mov	r0, r1
 800cb90:	4611      	mov	r1, r2
 800cb92:	2200      	movs	r2, #0
 800cb94:	602a      	str	r2, [r5, #0]
 800cb96:	461a      	mov	r2, r3
 800cb98:	f7f8 fa86 	bl	80050a8 <_read>
 800cb9c:	1c43      	adds	r3, r0, #1
 800cb9e:	d102      	bne.n	800cba6 <_read_r+0x1e>
 800cba0:	682b      	ldr	r3, [r5, #0]
 800cba2:	b103      	cbz	r3, 800cba6 <_read_r+0x1e>
 800cba4:	6023      	str	r3, [r4, #0]
 800cba6:	bd38      	pop	{r3, r4, r5, pc}
 800cba8:	20009994 	.word	0x20009994

0800cbac <_sbrk_r>:
 800cbac:	b538      	push	{r3, r4, r5, lr}
 800cbae:	4d06      	ldr	r5, [pc, #24]	@ (800cbc8 <_sbrk_r+0x1c>)
 800cbb0:	2300      	movs	r3, #0
 800cbb2:	4604      	mov	r4, r0
 800cbb4:	4608      	mov	r0, r1
 800cbb6:	602b      	str	r3, [r5, #0]
 800cbb8:	f7f8 fa9e 	bl	80050f8 <_sbrk>
 800cbbc:	1c43      	adds	r3, r0, #1
 800cbbe:	d102      	bne.n	800cbc6 <_sbrk_r+0x1a>
 800cbc0:	682b      	ldr	r3, [r5, #0]
 800cbc2:	b103      	cbz	r3, 800cbc6 <_sbrk_r+0x1a>
 800cbc4:	6023      	str	r3, [r4, #0]
 800cbc6:	bd38      	pop	{r3, r4, r5, pc}
 800cbc8:	20009994 	.word	0x20009994

0800cbcc <_write_r>:
 800cbcc:	b538      	push	{r3, r4, r5, lr}
 800cbce:	4d07      	ldr	r5, [pc, #28]	@ (800cbec <_write_r+0x20>)
 800cbd0:	4604      	mov	r4, r0
 800cbd2:	4608      	mov	r0, r1
 800cbd4:	4611      	mov	r1, r2
 800cbd6:	2200      	movs	r2, #0
 800cbd8:	602a      	str	r2, [r5, #0]
 800cbda:	461a      	mov	r2, r3
 800cbdc:	f7f8 fa72 	bl	80050c4 <_write>
 800cbe0:	1c43      	adds	r3, r0, #1
 800cbe2:	d102      	bne.n	800cbea <_write_r+0x1e>
 800cbe4:	682b      	ldr	r3, [r5, #0]
 800cbe6:	b103      	cbz	r3, 800cbea <_write_r+0x1e>
 800cbe8:	6023      	str	r3, [r4, #0]
 800cbea:	bd38      	pop	{r3, r4, r5, pc}
 800cbec:	20009994 	.word	0x20009994

0800cbf0 <__errno>:
 800cbf0:	4b01      	ldr	r3, [pc, #4]	@ (800cbf8 <__errno+0x8>)
 800cbf2:	6818      	ldr	r0, [r3, #0]
 800cbf4:	4770      	bx	lr
 800cbf6:	bf00      	nop
 800cbf8:	200001a4 	.word	0x200001a4

0800cbfc <__libc_init_array>:
 800cbfc:	b570      	push	{r4, r5, r6, lr}
 800cbfe:	4d0d      	ldr	r5, [pc, #52]	@ (800cc34 <__libc_init_array+0x38>)
 800cc00:	4c0d      	ldr	r4, [pc, #52]	@ (800cc38 <__libc_init_array+0x3c>)
 800cc02:	1b64      	subs	r4, r4, r5
 800cc04:	10a4      	asrs	r4, r4, #2
 800cc06:	2600      	movs	r6, #0
 800cc08:	42a6      	cmp	r6, r4
 800cc0a:	d109      	bne.n	800cc20 <__libc_init_array+0x24>
 800cc0c:	4d0b      	ldr	r5, [pc, #44]	@ (800cc3c <__libc_init_array+0x40>)
 800cc0e:	4c0c      	ldr	r4, [pc, #48]	@ (800cc40 <__libc_init_array+0x44>)
 800cc10:	f004 fcb4 	bl	801157c <_init>
 800cc14:	1b64      	subs	r4, r4, r5
 800cc16:	10a4      	asrs	r4, r4, #2
 800cc18:	2600      	movs	r6, #0
 800cc1a:	42a6      	cmp	r6, r4
 800cc1c:	d105      	bne.n	800cc2a <__libc_init_array+0x2e>
 800cc1e:	bd70      	pop	{r4, r5, r6, pc}
 800cc20:	f855 3b04 	ldr.w	r3, [r5], #4
 800cc24:	4798      	blx	r3
 800cc26:	3601      	adds	r6, #1
 800cc28:	e7ee      	b.n	800cc08 <__libc_init_array+0xc>
 800cc2a:	f855 3b04 	ldr.w	r3, [r5], #4
 800cc2e:	4798      	blx	r3
 800cc30:	3601      	adds	r6, #1
 800cc32:	e7f2      	b.n	800cc1a <__libc_init_array+0x1e>
 800cc34:	080141b8 	.word	0x080141b8
 800cc38:	080141b8 	.word	0x080141b8
 800cc3c:	080141b8 	.word	0x080141b8
 800cc40:	080141bc 	.word	0x080141bc

0800cc44 <strcpy>:
 800cc44:	4603      	mov	r3, r0
 800cc46:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cc4a:	f803 2b01 	strb.w	r2, [r3], #1
 800cc4e:	2a00      	cmp	r2, #0
 800cc50:	d1f9      	bne.n	800cc46 <strcpy+0x2>
 800cc52:	4770      	bx	lr

0800cc54 <memcpy>:
 800cc54:	440a      	add	r2, r1
 800cc56:	4291      	cmp	r1, r2
 800cc58:	f100 33ff 	add.w	r3, r0, #4294967295
 800cc5c:	d100      	bne.n	800cc60 <memcpy+0xc>
 800cc5e:	4770      	bx	lr
 800cc60:	b510      	push	{r4, lr}
 800cc62:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cc66:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cc6a:	4291      	cmp	r1, r2
 800cc6c:	d1f9      	bne.n	800cc62 <memcpy+0xe>
 800cc6e:	bd10      	pop	{r4, pc}

0800cc70 <nan>:
 800cc70:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800cc78 <nan+0x8>
 800cc74:	4770      	bx	lr
 800cc76:	bf00      	nop
 800cc78:	00000000 	.word	0x00000000
 800cc7c:	7ff80000 	.word	0x7ff80000

0800cc80 <nanf>:
 800cc80:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800cc88 <nanf+0x8>
 800cc84:	4770      	bx	lr
 800cc86:	bf00      	nop
 800cc88:	7fc00000 	.word	0x7fc00000

0800cc8c <div>:
 800cc8c:	b510      	push	{r4, lr}
 800cc8e:	fb91 f4f2 	sdiv	r4, r1, r2
 800cc92:	fb02 1114 	mls	r1, r2, r4, r1
 800cc96:	6004      	str	r4, [r0, #0]
 800cc98:	6041      	str	r1, [r0, #4]
 800cc9a:	bd10      	pop	{r4, pc}

0800cc9c <quorem>:
 800cc9c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cca0:	6903      	ldr	r3, [r0, #16]
 800cca2:	690c      	ldr	r4, [r1, #16]
 800cca4:	42a3      	cmp	r3, r4
 800cca6:	4607      	mov	r7, r0
 800cca8:	db7e      	blt.n	800cda8 <quorem+0x10c>
 800ccaa:	3c01      	subs	r4, #1
 800ccac:	f101 0814 	add.w	r8, r1, #20
 800ccb0:	00a3      	lsls	r3, r4, #2
 800ccb2:	f100 0514 	add.w	r5, r0, #20
 800ccb6:	9300      	str	r3, [sp, #0]
 800ccb8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ccbc:	9301      	str	r3, [sp, #4]
 800ccbe:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800ccc2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ccc6:	3301      	adds	r3, #1
 800ccc8:	429a      	cmp	r2, r3
 800ccca:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800ccce:	fbb2 f6f3 	udiv	r6, r2, r3
 800ccd2:	d32e      	bcc.n	800cd32 <quorem+0x96>
 800ccd4:	f04f 0a00 	mov.w	sl, #0
 800ccd8:	46c4      	mov	ip, r8
 800ccda:	46ae      	mov	lr, r5
 800ccdc:	46d3      	mov	fp, sl
 800ccde:	f85c 3b04 	ldr.w	r3, [ip], #4
 800cce2:	b298      	uxth	r0, r3
 800cce4:	fb06 a000 	mla	r0, r6, r0, sl
 800cce8:	0c02      	lsrs	r2, r0, #16
 800ccea:	0c1b      	lsrs	r3, r3, #16
 800ccec:	fb06 2303 	mla	r3, r6, r3, r2
 800ccf0:	f8de 2000 	ldr.w	r2, [lr]
 800ccf4:	b280      	uxth	r0, r0
 800ccf6:	b292      	uxth	r2, r2
 800ccf8:	1a12      	subs	r2, r2, r0
 800ccfa:	445a      	add	r2, fp
 800ccfc:	f8de 0000 	ldr.w	r0, [lr]
 800cd00:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800cd04:	b29b      	uxth	r3, r3
 800cd06:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800cd0a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800cd0e:	b292      	uxth	r2, r2
 800cd10:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800cd14:	45e1      	cmp	r9, ip
 800cd16:	f84e 2b04 	str.w	r2, [lr], #4
 800cd1a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800cd1e:	d2de      	bcs.n	800ccde <quorem+0x42>
 800cd20:	9b00      	ldr	r3, [sp, #0]
 800cd22:	58eb      	ldr	r3, [r5, r3]
 800cd24:	b92b      	cbnz	r3, 800cd32 <quorem+0x96>
 800cd26:	9b01      	ldr	r3, [sp, #4]
 800cd28:	3b04      	subs	r3, #4
 800cd2a:	429d      	cmp	r5, r3
 800cd2c:	461a      	mov	r2, r3
 800cd2e:	d32f      	bcc.n	800cd90 <quorem+0xf4>
 800cd30:	613c      	str	r4, [r7, #16]
 800cd32:	4638      	mov	r0, r7
 800cd34:	f001 fc9e 	bl	800e674 <__mcmp>
 800cd38:	2800      	cmp	r0, #0
 800cd3a:	db25      	blt.n	800cd88 <quorem+0xec>
 800cd3c:	4629      	mov	r1, r5
 800cd3e:	2000      	movs	r0, #0
 800cd40:	f858 2b04 	ldr.w	r2, [r8], #4
 800cd44:	f8d1 c000 	ldr.w	ip, [r1]
 800cd48:	fa1f fe82 	uxth.w	lr, r2
 800cd4c:	fa1f f38c 	uxth.w	r3, ip
 800cd50:	eba3 030e 	sub.w	r3, r3, lr
 800cd54:	4403      	add	r3, r0
 800cd56:	0c12      	lsrs	r2, r2, #16
 800cd58:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800cd5c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800cd60:	b29b      	uxth	r3, r3
 800cd62:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cd66:	45c1      	cmp	r9, r8
 800cd68:	f841 3b04 	str.w	r3, [r1], #4
 800cd6c:	ea4f 4022 	mov.w	r0, r2, asr #16
 800cd70:	d2e6      	bcs.n	800cd40 <quorem+0xa4>
 800cd72:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800cd76:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800cd7a:	b922      	cbnz	r2, 800cd86 <quorem+0xea>
 800cd7c:	3b04      	subs	r3, #4
 800cd7e:	429d      	cmp	r5, r3
 800cd80:	461a      	mov	r2, r3
 800cd82:	d30b      	bcc.n	800cd9c <quorem+0x100>
 800cd84:	613c      	str	r4, [r7, #16]
 800cd86:	3601      	adds	r6, #1
 800cd88:	4630      	mov	r0, r6
 800cd8a:	b003      	add	sp, #12
 800cd8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd90:	6812      	ldr	r2, [r2, #0]
 800cd92:	3b04      	subs	r3, #4
 800cd94:	2a00      	cmp	r2, #0
 800cd96:	d1cb      	bne.n	800cd30 <quorem+0x94>
 800cd98:	3c01      	subs	r4, #1
 800cd9a:	e7c6      	b.n	800cd2a <quorem+0x8e>
 800cd9c:	6812      	ldr	r2, [r2, #0]
 800cd9e:	3b04      	subs	r3, #4
 800cda0:	2a00      	cmp	r2, #0
 800cda2:	d1ef      	bne.n	800cd84 <quorem+0xe8>
 800cda4:	3c01      	subs	r4, #1
 800cda6:	e7ea      	b.n	800cd7e <quorem+0xe2>
 800cda8:	2000      	movs	r0, #0
 800cdaa:	e7ee      	b.n	800cd8a <quorem+0xee>
 800cdac:	0000      	movs	r0, r0
	...

0800cdb0 <_dtoa_r>:
 800cdb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cdb4:	69c7      	ldr	r7, [r0, #28]
 800cdb6:	b099      	sub	sp, #100	@ 0x64
 800cdb8:	ed8d 0b02 	vstr	d0, [sp, #8]
 800cdbc:	ec55 4b10 	vmov	r4, r5, d0
 800cdc0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800cdc2:	9109      	str	r1, [sp, #36]	@ 0x24
 800cdc4:	4683      	mov	fp, r0
 800cdc6:	920e      	str	r2, [sp, #56]	@ 0x38
 800cdc8:	9313      	str	r3, [sp, #76]	@ 0x4c
 800cdca:	b97f      	cbnz	r7, 800cdec <_dtoa_r+0x3c>
 800cdcc:	2010      	movs	r0, #16
 800cdce:	f7fd f969 	bl	800a0a4 <malloc>
 800cdd2:	4602      	mov	r2, r0
 800cdd4:	f8cb 001c 	str.w	r0, [fp, #28]
 800cdd8:	b920      	cbnz	r0, 800cde4 <_dtoa_r+0x34>
 800cdda:	4ba7      	ldr	r3, [pc, #668]	@ (800d078 <_dtoa_r+0x2c8>)
 800cddc:	21ef      	movs	r1, #239	@ 0xef
 800cdde:	48a7      	ldr	r0, [pc, #668]	@ (800d07c <_dtoa_r+0x2cc>)
 800cde0:	f002 fc6c 	bl	800f6bc <__assert_func>
 800cde4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800cde8:	6007      	str	r7, [r0, #0]
 800cdea:	60c7      	str	r7, [r0, #12]
 800cdec:	f8db 301c 	ldr.w	r3, [fp, #28]
 800cdf0:	6819      	ldr	r1, [r3, #0]
 800cdf2:	b159      	cbz	r1, 800ce0c <_dtoa_r+0x5c>
 800cdf4:	685a      	ldr	r2, [r3, #4]
 800cdf6:	604a      	str	r2, [r1, #4]
 800cdf8:	2301      	movs	r3, #1
 800cdfa:	4093      	lsls	r3, r2
 800cdfc:	608b      	str	r3, [r1, #8]
 800cdfe:	4658      	mov	r0, fp
 800ce00:	f001 f9b4 	bl	800e16c <_Bfree>
 800ce04:	f8db 301c 	ldr.w	r3, [fp, #28]
 800ce08:	2200      	movs	r2, #0
 800ce0a:	601a      	str	r2, [r3, #0]
 800ce0c:	1e2b      	subs	r3, r5, #0
 800ce0e:	bfb9      	ittee	lt
 800ce10:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800ce14:	9303      	strlt	r3, [sp, #12]
 800ce16:	2300      	movge	r3, #0
 800ce18:	6033      	strge	r3, [r6, #0]
 800ce1a:	9f03      	ldr	r7, [sp, #12]
 800ce1c:	4b98      	ldr	r3, [pc, #608]	@ (800d080 <_dtoa_r+0x2d0>)
 800ce1e:	bfbc      	itt	lt
 800ce20:	2201      	movlt	r2, #1
 800ce22:	6032      	strlt	r2, [r6, #0]
 800ce24:	43bb      	bics	r3, r7
 800ce26:	d112      	bne.n	800ce4e <_dtoa_r+0x9e>
 800ce28:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800ce2a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800ce2e:	6013      	str	r3, [r2, #0]
 800ce30:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800ce34:	4323      	orrs	r3, r4
 800ce36:	f000 854d 	beq.w	800d8d4 <_dtoa_r+0xb24>
 800ce3a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800ce3c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800d094 <_dtoa_r+0x2e4>
 800ce40:	2b00      	cmp	r3, #0
 800ce42:	f000 854f 	beq.w	800d8e4 <_dtoa_r+0xb34>
 800ce46:	f10a 0303 	add.w	r3, sl, #3
 800ce4a:	f000 bd49 	b.w	800d8e0 <_dtoa_r+0xb30>
 800ce4e:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ce52:	2200      	movs	r2, #0
 800ce54:	ec51 0b17 	vmov	r0, r1, d7
 800ce58:	2300      	movs	r3, #0
 800ce5a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800ce5e:	f7f3 fe43 	bl	8000ae8 <__aeabi_dcmpeq>
 800ce62:	4680      	mov	r8, r0
 800ce64:	b158      	cbz	r0, 800ce7e <_dtoa_r+0xce>
 800ce66:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800ce68:	2301      	movs	r3, #1
 800ce6a:	6013      	str	r3, [r2, #0]
 800ce6c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800ce6e:	b113      	cbz	r3, 800ce76 <_dtoa_r+0xc6>
 800ce70:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800ce72:	4b84      	ldr	r3, [pc, #528]	@ (800d084 <_dtoa_r+0x2d4>)
 800ce74:	6013      	str	r3, [r2, #0]
 800ce76:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800d098 <_dtoa_r+0x2e8>
 800ce7a:	f000 bd33 	b.w	800d8e4 <_dtoa_r+0xb34>
 800ce7e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800ce82:	aa16      	add	r2, sp, #88	@ 0x58
 800ce84:	a917      	add	r1, sp, #92	@ 0x5c
 800ce86:	4658      	mov	r0, fp
 800ce88:	f001 fd14 	bl	800e8b4 <__d2b>
 800ce8c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800ce90:	4681      	mov	r9, r0
 800ce92:	2e00      	cmp	r6, #0
 800ce94:	d077      	beq.n	800cf86 <_dtoa_r+0x1d6>
 800ce96:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ce98:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800ce9c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800cea0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800cea4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800cea8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800ceac:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800ceb0:	4619      	mov	r1, r3
 800ceb2:	2200      	movs	r2, #0
 800ceb4:	4b74      	ldr	r3, [pc, #464]	@ (800d088 <_dtoa_r+0x2d8>)
 800ceb6:	f7f3 f9f7 	bl	80002a8 <__aeabi_dsub>
 800ceba:	a369      	add	r3, pc, #420	@ (adr r3, 800d060 <_dtoa_r+0x2b0>)
 800cebc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cec0:	f7f3 fbaa 	bl	8000618 <__aeabi_dmul>
 800cec4:	a368      	add	r3, pc, #416	@ (adr r3, 800d068 <_dtoa_r+0x2b8>)
 800cec6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ceca:	f7f3 f9ef 	bl	80002ac <__adddf3>
 800cece:	4604      	mov	r4, r0
 800ced0:	4630      	mov	r0, r6
 800ced2:	460d      	mov	r5, r1
 800ced4:	f7f3 fb36 	bl	8000544 <__aeabi_i2d>
 800ced8:	a365      	add	r3, pc, #404	@ (adr r3, 800d070 <_dtoa_r+0x2c0>)
 800ceda:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cede:	f7f3 fb9b 	bl	8000618 <__aeabi_dmul>
 800cee2:	4602      	mov	r2, r0
 800cee4:	460b      	mov	r3, r1
 800cee6:	4620      	mov	r0, r4
 800cee8:	4629      	mov	r1, r5
 800ceea:	f7f3 f9df 	bl	80002ac <__adddf3>
 800ceee:	4604      	mov	r4, r0
 800cef0:	460d      	mov	r5, r1
 800cef2:	f7f3 fe41 	bl	8000b78 <__aeabi_d2iz>
 800cef6:	2200      	movs	r2, #0
 800cef8:	4607      	mov	r7, r0
 800cefa:	2300      	movs	r3, #0
 800cefc:	4620      	mov	r0, r4
 800cefe:	4629      	mov	r1, r5
 800cf00:	f7f3 fdfc 	bl	8000afc <__aeabi_dcmplt>
 800cf04:	b140      	cbz	r0, 800cf18 <_dtoa_r+0x168>
 800cf06:	4638      	mov	r0, r7
 800cf08:	f7f3 fb1c 	bl	8000544 <__aeabi_i2d>
 800cf0c:	4622      	mov	r2, r4
 800cf0e:	462b      	mov	r3, r5
 800cf10:	f7f3 fdea 	bl	8000ae8 <__aeabi_dcmpeq>
 800cf14:	b900      	cbnz	r0, 800cf18 <_dtoa_r+0x168>
 800cf16:	3f01      	subs	r7, #1
 800cf18:	2f16      	cmp	r7, #22
 800cf1a:	d851      	bhi.n	800cfc0 <_dtoa_r+0x210>
 800cf1c:	4b5b      	ldr	r3, [pc, #364]	@ (800d08c <_dtoa_r+0x2dc>)
 800cf1e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800cf22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf26:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800cf2a:	f7f3 fde7 	bl	8000afc <__aeabi_dcmplt>
 800cf2e:	2800      	cmp	r0, #0
 800cf30:	d048      	beq.n	800cfc4 <_dtoa_r+0x214>
 800cf32:	3f01      	subs	r7, #1
 800cf34:	2300      	movs	r3, #0
 800cf36:	9312      	str	r3, [sp, #72]	@ 0x48
 800cf38:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800cf3a:	1b9b      	subs	r3, r3, r6
 800cf3c:	1e5a      	subs	r2, r3, #1
 800cf3e:	bf44      	itt	mi
 800cf40:	f1c3 0801 	rsbmi	r8, r3, #1
 800cf44:	2300      	movmi	r3, #0
 800cf46:	9208      	str	r2, [sp, #32]
 800cf48:	bf54      	ite	pl
 800cf4a:	f04f 0800 	movpl.w	r8, #0
 800cf4e:	9308      	strmi	r3, [sp, #32]
 800cf50:	2f00      	cmp	r7, #0
 800cf52:	db39      	blt.n	800cfc8 <_dtoa_r+0x218>
 800cf54:	9b08      	ldr	r3, [sp, #32]
 800cf56:	970f      	str	r7, [sp, #60]	@ 0x3c
 800cf58:	443b      	add	r3, r7
 800cf5a:	9308      	str	r3, [sp, #32]
 800cf5c:	2300      	movs	r3, #0
 800cf5e:	930a      	str	r3, [sp, #40]	@ 0x28
 800cf60:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cf62:	2b09      	cmp	r3, #9
 800cf64:	d864      	bhi.n	800d030 <_dtoa_r+0x280>
 800cf66:	2b05      	cmp	r3, #5
 800cf68:	bfc4      	itt	gt
 800cf6a:	3b04      	subgt	r3, #4
 800cf6c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800cf6e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cf70:	f1a3 0302 	sub.w	r3, r3, #2
 800cf74:	bfcc      	ite	gt
 800cf76:	2400      	movgt	r4, #0
 800cf78:	2401      	movle	r4, #1
 800cf7a:	2b03      	cmp	r3, #3
 800cf7c:	d863      	bhi.n	800d046 <_dtoa_r+0x296>
 800cf7e:	e8df f003 	tbb	[pc, r3]
 800cf82:	372a      	.short	0x372a
 800cf84:	5535      	.short	0x5535
 800cf86:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800cf8a:	441e      	add	r6, r3
 800cf8c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800cf90:	2b20      	cmp	r3, #32
 800cf92:	bfc1      	itttt	gt
 800cf94:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800cf98:	409f      	lslgt	r7, r3
 800cf9a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800cf9e:	fa24 f303 	lsrgt.w	r3, r4, r3
 800cfa2:	bfd6      	itet	le
 800cfa4:	f1c3 0320 	rsble	r3, r3, #32
 800cfa8:	ea47 0003 	orrgt.w	r0, r7, r3
 800cfac:	fa04 f003 	lslle.w	r0, r4, r3
 800cfb0:	f7f3 fab8 	bl	8000524 <__aeabi_ui2d>
 800cfb4:	2201      	movs	r2, #1
 800cfb6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800cfba:	3e01      	subs	r6, #1
 800cfbc:	9214      	str	r2, [sp, #80]	@ 0x50
 800cfbe:	e777      	b.n	800ceb0 <_dtoa_r+0x100>
 800cfc0:	2301      	movs	r3, #1
 800cfc2:	e7b8      	b.n	800cf36 <_dtoa_r+0x186>
 800cfc4:	9012      	str	r0, [sp, #72]	@ 0x48
 800cfc6:	e7b7      	b.n	800cf38 <_dtoa_r+0x188>
 800cfc8:	427b      	negs	r3, r7
 800cfca:	930a      	str	r3, [sp, #40]	@ 0x28
 800cfcc:	2300      	movs	r3, #0
 800cfce:	eba8 0807 	sub.w	r8, r8, r7
 800cfd2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800cfd4:	e7c4      	b.n	800cf60 <_dtoa_r+0x1b0>
 800cfd6:	2300      	movs	r3, #0
 800cfd8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800cfda:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cfdc:	2b00      	cmp	r3, #0
 800cfde:	dc35      	bgt.n	800d04c <_dtoa_r+0x29c>
 800cfe0:	2301      	movs	r3, #1
 800cfe2:	9300      	str	r3, [sp, #0]
 800cfe4:	9307      	str	r3, [sp, #28]
 800cfe6:	461a      	mov	r2, r3
 800cfe8:	920e      	str	r2, [sp, #56]	@ 0x38
 800cfea:	e00b      	b.n	800d004 <_dtoa_r+0x254>
 800cfec:	2301      	movs	r3, #1
 800cfee:	e7f3      	b.n	800cfd8 <_dtoa_r+0x228>
 800cff0:	2300      	movs	r3, #0
 800cff2:	930b      	str	r3, [sp, #44]	@ 0x2c
 800cff4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cff6:	18fb      	adds	r3, r7, r3
 800cff8:	9300      	str	r3, [sp, #0]
 800cffa:	3301      	adds	r3, #1
 800cffc:	2b01      	cmp	r3, #1
 800cffe:	9307      	str	r3, [sp, #28]
 800d000:	bfb8      	it	lt
 800d002:	2301      	movlt	r3, #1
 800d004:	f8db 001c 	ldr.w	r0, [fp, #28]
 800d008:	2100      	movs	r1, #0
 800d00a:	2204      	movs	r2, #4
 800d00c:	f102 0514 	add.w	r5, r2, #20
 800d010:	429d      	cmp	r5, r3
 800d012:	d91f      	bls.n	800d054 <_dtoa_r+0x2a4>
 800d014:	6041      	str	r1, [r0, #4]
 800d016:	4658      	mov	r0, fp
 800d018:	f001 f868 	bl	800e0ec <_Balloc>
 800d01c:	4682      	mov	sl, r0
 800d01e:	2800      	cmp	r0, #0
 800d020:	d13c      	bne.n	800d09c <_dtoa_r+0x2ec>
 800d022:	4b1b      	ldr	r3, [pc, #108]	@ (800d090 <_dtoa_r+0x2e0>)
 800d024:	4602      	mov	r2, r0
 800d026:	f240 11af 	movw	r1, #431	@ 0x1af
 800d02a:	e6d8      	b.n	800cdde <_dtoa_r+0x2e>
 800d02c:	2301      	movs	r3, #1
 800d02e:	e7e0      	b.n	800cff2 <_dtoa_r+0x242>
 800d030:	2401      	movs	r4, #1
 800d032:	2300      	movs	r3, #0
 800d034:	9309      	str	r3, [sp, #36]	@ 0x24
 800d036:	940b      	str	r4, [sp, #44]	@ 0x2c
 800d038:	f04f 33ff 	mov.w	r3, #4294967295
 800d03c:	9300      	str	r3, [sp, #0]
 800d03e:	9307      	str	r3, [sp, #28]
 800d040:	2200      	movs	r2, #0
 800d042:	2312      	movs	r3, #18
 800d044:	e7d0      	b.n	800cfe8 <_dtoa_r+0x238>
 800d046:	2301      	movs	r3, #1
 800d048:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d04a:	e7f5      	b.n	800d038 <_dtoa_r+0x288>
 800d04c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d04e:	9300      	str	r3, [sp, #0]
 800d050:	9307      	str	r3, [sp, #28]
 800d052:	e7d7      	b.n	800d004 <_dtoa_r+0x254>
 800d054:	3101      	adds	r1, #1
 800d056:	0052      	lsls	r2, r2, #1
 800d058:	e7d8      	b.n	800d00c <_dtoa_r+0x25c>
 800d05a:	bf00      	nop
 800d05c:	f3af 8000 	nop.w
 800d060:	636f4361 	.word	0x636f4361
 800d064:	3fd287a7 	.word	0x3fd287a7
 800d068:	8b60c8b3 	.word	0x8b60c8b3
 800d06c:	3fc68a28 	.word	0x3fc68a28
 800d070:	509f79fb 	.word	0x509f79fb
 800d074:	3fd34413 	.word	0x3fd34413
 800d078:	08013c69 	.word	0x08013c69
 800d07c:	08013c80 	.word	0x08013c80
 800d080:	7ff00000 	.word	0x7ff00000
 800d084:	08013ec8 	.word	0x08013ec8
 800d088:	3ff80000 	.word	0x3ff80000
 800d08c:	08013dd8 	.word	0x08013dd8
 800d090:	08013cd8 	.word	0x08013cd8
 800d094:	08013c65 	.word	0x08013c65
 800d098:	08013ec7 	.word	0x08013ec7
 800d09c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800d0a0:	6018      	str	r0, [r3, #0]
 800d0a2:	9b07      	ldr	r3, [sp, #28]
 800d0a4:	2b0e      	cmp	r3, #14
 800d0a6:	f200 80a4 	bhi.w	800d1f2 <_dtoa_r+0x442>
 800d0aa:	2c00      	cmp	r4, #0
 800d0ac:	f000 80a1 	beq.w	800d1f2 <_dtoa_r+0x442>
 800d0b0:	2f00      	cmp	r7, #0
 800d0b2:	dd33      	ble.n	800d11c <_dtoa_r+0x36c>
 800d0b4:	4bad      	ldr	r3, [pc, #692]	@ (800d36c <_dtoa_r+0x5bc>)
 800d0b6:	f007 020f 	and.w	r2, r7, #15
 800d0ba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d0be:	ed93 7b00 	vldr	d7, [r3]
 800d0c2:	05f8      	lsls	r0, r7, #23
 800d0c4:	ed8d 7b04 	vstr	d7, [sp, #16]
 800d0c8:	ea4f 1427 	mov.w	r4, r7, asr #4
 800d0cc:	d516      	bpl.n	800d0fc <_dtoa_r+0x34c>
 800d0ce:	4ba8      	ldr	r3, [pc, #672]	@ (800d370 <_dtoa_r+0x5c0>)
 800d0d0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d0d4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800d0d8:	f7f3 fbc8 	bl	800086c <__aeabi_ddiv>
 800d0dc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d0e0:	f004 040f 	and.w	r4, r4, #15
 800d0e4:	2603      	movs	r6, #3
 800d0e6:	4da2      	ldr	r5, [pc, #648]	@ (800d370 <_dtoa_r+0x5c0>)
 800d0e8:	b954      	cbnz	r4, 800d100 <_dtoa_r+0x350>
 800d0ea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d0ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d0f2:	f7f3 fbbb 	bl	800086c <__aeabi_ddiv>
 800d0f6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d0fa:	e028      	b.n	800d14e <_dtoa_r+0x39e>
 800d0fc:	2602      	movs	r6, #2
 800d0fe:	e7f2      	b.n	800d0e6 <_dtoa_r+0x336>
 800d100:	07e1      	lsls	r1, r4, #31
 800d102:	d508      	bpl.n	800d116 <_dtoa_r+0x366>
 800d104:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d108:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d10c:	f7f3 fa84 	bl	8000618 <__aeabi_dmul>
 800d110:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d114:	3601      	adds	r6, #1
 800d116:	1064      	asrs	r4, r4, #1
 800d118:	3508      	adds	r5, #8
 800d11a:	e7e5      	b.n	800d0e8 <_dtoa_r+0x338>
 800d11c:	f000 80d2 	beq.w	800d2c4 <_dtoa_r+0x514>
 800d120:	427c      	negs	r4, r7
 800d122:	4b92      	ldr	r3, [pc, #584]	@ (800d36c <_dtoa_r+0x5bc>)
 800d124:	4d92      	ldr	r5, [pc, #584]	@ (800d370 <_dtoa_r+0x5c0>)
 800d126:	f004 020f 	and.w	r2, r4, #15
 800d12a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d12e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d132:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d136:	f7f3 fa6f 	bl	8000618 <__aeabi_dmul>
 800d13a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d13e:	1124      	asrs	r4, r4, #4
 800d140:	2300      	movs	r3, #0
 800d142:	2602      	movs	r6, #2
 800d144:	2c00      	cmp	r4, #0
 800d146:	f040 80b2 	bne.w	800d2ae <_dtoa_r+0x4fe>
 800d14a:	2b00      	cmp	r3, #0
 800d14c:	d1d3      	bne.n	800d0f6 <_dtoa_r+0x346>
 800d14e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800d150:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800d154:	2b00      	cmp	r3, #0
 800d156:	f000 80b7 	beq.w	800d2c8 <_dtoa_r+0x518>
 800d15a:	4b86      	ldr	r3, [pc, #536]	@ (800d374 <_dtoa_r+0x5c4>)
 800d15c:	2200      	movs	r2, #0
 800d15e:	4620      	mov	r0, r4
 800d160:	4629      	mov	r1, r5
 800d162:	f7f3 fccb 	bl	8000afc <__aeabi_dcmplt>
 800d166:	2800      	cmp	r0, #0
 800d168:	f000 80ae 	beq.w	800d2c8 <_dtoa_r+0x518>
 800d16c:	9b07      	ldr	r3, [sp, #28]
 800d16e:	2b00      	cmp	r3, #0
 800d170:	f000 80aa 	beq.w	800d2c8 <_dtoa_r+0x518>
 800d174:	9b00      	ldr	r3, [sp, #0]
 800d176:	2b00      	cmp	r3, #0
 800d178:	dd37      	ble.n	800d1ea <_dtoa_r+0x43a>
 800d17a:	1e7b      	subs	r3, r7, #1
 800d17c:	9304      	str	r3, [sp, #16]
 800d17e:	4620      	mov	r0, r4
 800d180:	4b7d      	ldr	r3, [pc, #500]	@ (800d378 <_dtoa_r+0x5c8>)
 800d182:	2200      	movs	r2, #0
 800d184:	4629      	mov	r1, r5
 800d186:	f7f3 fa47 	bl	8000618 <__aeabi_dmul>
 800d18a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d18e:	9c00      	ldr	r4, [sp, #0]
 800d190:	3601      	adds	r6, #1
 800d192:	4630      	mov	r0, r6
 800d194:	f7f3 f9d6 	bl	8000544 <__aeabi_i2d>
 800d198:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d19c:	f7f3 fa3c 	bl	8000618 <__aeabi_dmul>
 800d1a0:	4b76      	ldr	r3, [pc, #472]	@ (800d37c <_dtoa_r+0x5cc>)
 800d1a2:	2200      	movs	r2, #0
 800d1a4:	f7f3 f882 	bl	80002ac <__adddf3>
 800d1a8:	4605      	mov	r5, r0
 800d1aa:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800d1ae:	2c00      	cmp	r4, #0
 800d1b0:	f040 808d 	bne.w	800d2ce <_dtoa_r+0x51e>
 800d1b4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d1b8:	4b71      	ldr	r3, [pc, #452]	@ (800d380 <_dtoa_r+0x5d0>)
 800d1ba:	2200      	movs	r2, #0
 800d1bc:	f7f3 f874 	bl	80002a8 <__aeabi_dsub>
 800d1c0:	4602      	mov	r2, r0
 800d1c2:	460b      	mov	r3, r1
 800d1c4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d1c8:	462a      	mov	r2, r5
 800d1ca:	4633      	mov	r3, r6
 800d1cc:	f7f3 fcb4 	bl	8000b38 <__aeabi_dcmpgt>
 800d1d0:	2800      	cmp	r0, #0
 800d1d2:	f040 828b 	bne.w	800d6ec <_dtoa_r+0x93c>
 800d1d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d1da:	462a      	mov	r2, r5
 800d1dc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800d1e0:	f7f3 fc8c 	bl	8000afc <__aeabi_dcmplt>
 800d1e4:	2800      	cmp	r0, #0
 800d1e6:	f040 8128 	bne.w	800d43a <_dtoa_r+0x68a>
 800d1ea:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800d1ee:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800d1f2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800d1f4:	2b00      	cmp	r3, #0
 800d1f6:	f2c0 815a 	blt.w	800d4ae <_dtoa_r+0x6fe>
 800d1fa:	2f0e      	cmp	r7, #14
 800d1fc:	f300 8157 	bgt.w	800d4ae <_dtoa_r+0x6fe>
 800d200:	4b5a      	ldr	r3, [pc, #360]	@ (800d36c <_dtoa_r+0x5bc>)
 800d202:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800d206:	ed93 7b00 	vldr	d7, [r3]
 800d20a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d20c:	2b00      	cmp	r3, #0
 800d20e:	ed8d 7b00 	vstr	d7, [sp]
 800d212:	da03      	bge.n	800d21c <_dtoa_r+0x46c>
 800d214:	9b07      	ldr	r3, [sp, #28]
 800d216:	2b00      	cmp	r3, #0
 800d218:	f340 8101 	ble.w	800d41e <_dtoa_r+0x66e>
 800d21c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800d220:	4656      	mov	r6, sl
 800d222:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d226:	4620      	mov	r0, r4
 800d228:	4629      	mov	r1, r5
 800d22a:	f7f3 fb1f 	bl	800086c <__aeabi_ddiv>
 800d22e:	f7f3 fca3 	bl	8000b78 <__aeabi_d2iz>
 800d232:	4680      	mov	r8, r0
 800d234:	f7f3 f986 	bl	8000544 <__aeabi_i2d>
 800d238:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d23c:	f7f3 f9ec 	bl	8000618 <__aeabi_dmul>
 800d240:	4602      	mov	r2, r0
 800d242:	460b      	mov	r3, r1
 800d244:	4620      	mov	r0, r4
 800d246:	4629      	mov	r1, r5
 800d248:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800d24c:	f7f3 f82c 	bl	80002a8 <__aeabi_dsub>
 800d250:	f806 4b01 	strb.w	r4, [r6], #1
 800d254:	9d07      	ldr	r5, [sp, #28]
 800d256:	eba6 040a 	sub.w	r4, r6, sl
 800d25a:	42a5      	cmp	r5, r4
 800d25c:	4602      	mov	r2, r0
 800d25e:	460b      	mov	r3, r1
 800d260:	f040 8117 	bne.w	800d492 <_dtoa_r+0x6e2>
 800d264:	f7f3 f822 	bl	80002ac <__adddf3>
 800d268:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d26c:	4604      	mov	r4, r0
 800d26e:	460d      	mov	r5, r1
 800d270:	f7f3 fc62 	bl	8000b38 <__aeabi_dcmpgt>
 800d274:	2800      	cmp	r0, #0
 800d276:	f040 80f9 	bne.w	800d46c <_dtoa_r+0x6bc>
 800d27a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d27e:	4620      	mov	r0, r4
 800d280:	4629      	mov	r1, r5
 800d282:	f7f3 fc31 	bl	8000ae8 <__aeabi_dcmpeq>
 800d286:	b118      	cbz	r0, 800d290 <_dtoa_r+0x4e0>
 800d288:	f018 0f01 	tst.w	r8, #1
 800d28c:	f040 80ee 	bne.w	800d46c <_dtoa_r+0x6bc>
 800d290:	4649      	mov	r1, r9
 800d292:	4658      	mov	r0, fp
 800d294:	f000 ff6a 	bl	800e16c <_Bfree>
 800d298:	2300      	movs	r3, #0
 800d29a:	7033      	strb	r3, [r6, #0]
 800d29c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800d29e:	3701      	adds	r7, #1
 800d2a0:	601f      	str	r7, [r3, #0]
 800d2a2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800d2a4:	2b00      	cmp	r3, #0
 800d2a6:	f000 831d 	beq.w	800d8e4 <_dtoa_r+0xb34>
 800d2aa:	601e      	str	r6, [r3, #0]
 800d2ac:	e31a      	b.n	800d8e4 <_dtoa_r+0xb34>
 800d2ae:	07e2      	lsls	r2, r4, #31
 800d2b0:	d505      	bpl.n	800d2be <_dtoa_r+0x50e>
 800d2b2:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d2b6:	f7f3 f9af 	bl	8000618 <__aeabi_dmul>
 800d2ba:	3601      	adds	r6, #1
 800d2bc:	2301      	movs	r3, #1
 800d2be:	1064      	asrs	r4, r4, #1
 800d2c0:	3508      	adds	r5, #8
 800d2c2:	e73f      	b.n	800d144 <_dtoa_r+0x394>
 800d2c4:	2602      	movs	r6, #2
 800d2c6:	e742      	b.n	800d14e <_dtoa_r+0x39e>
 800d2c8:	9c07      	ldr	r4, [sp, #28]
 800d2ca:	9704      	str	r7, [sp, #16]
 800d2cc:	e761      	b.n	800d192 <_dtoa_r+0x3e2>
 800d2ce:	4b27      	ldr	r3, [pc, #156]	@ (800d36c <_dtoa_r+0x5bc>)
 800d2d0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800d2d2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d2d6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800d2da:	4454      	add	r4, sl
 800d2dc:	2900      	cmp	r1, #0
 800d2de:	d053      	beq.n	800d388 <_dtoa_r+0x5d8>
 800d2e0:	4928      	ldr	r1, [pc, #160]	@ (800d384 <_dtoa_r+0x5d4>)
 800d2e2:	2000      	movs	r0, #0
 800d2e4:	f7f3 fac2 	bl	800086c <__aeabi_ddiv>
 800d2e8:	4633      	mov	r3, r6
 800d2ea:	462a      	mov	r2, r5
 800d2ec:	f7f2 ffdc 	bl	80002a8 <__aeabi_dsub>
 800d2f0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800d2f4:	4656      	mov	r6, sl
 800d2f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d2fa:	f7f3 fc3d 	bl	8000b78 <__aeabi_d2iz>
 800d2fe:	4605      	mov	r5, r0
 800d300:	f7f3 f920 	bl	8000544 <__aeabi_i2d>
 800d304:	4602      	mov	r2, r0
 800d306:	460b      	mov	r3, r1
 800d308:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d30c:	f7f2 ffcc 	bl	80002a8 <__aeabi_dsub>
 800d310:	3530      	adds	r5, #48	@ 0x30
 800d312:	4602      	mov	r2, r0
 800d314:	460b      	mov	r3, r1
 800d316:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d31a:	f806 5b01 	strb.w	r5, [r6], #1
 800d31e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800d322:	f7f3 fbeb 	bl	8000afc <__aeabi_dcmplt>
 800d326:	2800      	cmp	r0, #0
 800d328:	d171      	bne.n	800d40e <_dtoa_r+0x65e>
 800d32a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d32e:	4911      	ldr	r1, [pc, #68]	@ (800d374 <_dtoa_r+0x5c4>)
 800d330:	2000      	movs	r0, #0
 800d332:	f7f2 ffb9 	bl	80002a8 <__aeabi_dsub>
 800d336:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800d33a:	f7f3 fbdf 	bl	8000afc <__aeabi_dcmplt>
 800d33e:	2800      	cmp	r0, #0
 800d340:	f040 8095 	bne.w	800d46e <_dtoa_r+0x6be>
 800d344:	42a6      	cmp	r6, r4
 800d346:	f43f af50 	beq.w	800d1ea <_dtoa_r+0x43a>
 800d34a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800d34e:	4b0a      	ldr	r3, [pc, #40]	@ (800d378 <_dtoa_r+0x5c8>)
 800d350:	2200      	movs	r2, #0
 800d352:	f7f3 f961 	bl	8000618 <__aeabi_dmul>
 800d356:	4b08      	ldr	r3, [pc, #32]	@ (800d378 <_dtoa_r+0x5c8>)
 800d358:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800d35c:	2200      	movs	r2, #0
 800d35e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d362:	f7f3 f959 	bl	8000618 <__aeabi_dmul>
 800d366:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d36a:	e7c4      	b.n	800d2f6 <_dtoa_r+0x546>
 800d36c:	08013dd8 	.word	0x08013dd8
 800d370:	08013db0 	.word	0x08013db0
 800d374:	3ff00000 	.word	0x3ff00000
 800d378:	40240000 	.word	0x40240000
 800d37c:	401c0000 	.word	0x401c0000
 800d380:	40140000 	.word	0x40140000
 800d384:	3fe00000 	.word	0x3fe00000
 800d388:	4631      	mov	r1, r6
 800d38a:	4628      	mov	r0, r5
 800d38c:	f7f3 f944 	bl	8000618 <__aeabi_dmul>
 800d390:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800d394:	9415      	str	r4, [sp, #84]	@ 0x54
 800d396:	4656      	mov	r6, sl
 800d398:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d39c:	f7f3 fbec 	bl	8000b78 <__aeabi_d2iz>
 800d3a0:	4605      	mov	r5, r0
 800d3a2:	f7f3 f8cf 	bl	8000544 <__aeabi_i2d>
 800d3a6:	4602      	mov	r2, r0
 800d3a8:	460b      	mov	r3, r1
 800d3aa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d3ae:	f7f2 ff7b 	bl	80002a8 <__aeabi_dsub>
 800d3b2:	3530      	adds	r5, #48	@ 0x30
 800d3b4:	f806 5b01 	strb.w	r5, [r6], #1
 800d3b8:	4602      	mov	r2, r0
 800d3ba:	460b      	mov	r3, r1
 800d3bc:	42a6      	cmp	r6, r4
 800d3be:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d3c2:	f04f 0200 	mov.w	r2, #0
 800d3c6:	d124      	bne.n	800d412 <_dtoa_r+0x662>
 800d3c8:	4bac      	ldr	r3, [pc, #688]	@ (800d67c <_dtoa_r+0x8cc>)
 800d3ca:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800d3ce:	f7f2 ff6d 	bl	80002ac <__adddf3>
 800d3d2:	4602      	mov	r2, r0
 800d3d4:	460b      	mov	r3, r1
 800d3d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d3da:	f7f3 fbad 	bl	8000b38 <__aeabi_dcmpgt>
 800d3de:	2800      	cmp	r0, #0
 800d3e0:	d145      	bne.n	800d46e <_dtoa_r+0x6be>
 800d3e2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800d3e6:	49a5      	ldr	r1, [pc, #660]	@ (800d67c <_dtoa_r+0x8cc>)
 800d3e8:	2000      	movs	r0, #0
 800d3ea:	f7f2 ff5d 	bl	80002a8 <__aeabi_dsub>
 800d3ee:	4602      	mov	r2, r0
 800d3f0:	460b      	mov	r3, r1
 800d3f2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d3f6:	f7f3 fb81 	bl	8000afc <__aeabi_dcmplt>
 800d3fa:	2800      	cmp	r0, #0
 800d3fc:	f43f aef5 	beq.w	800d1ea <_dtoa_r+0x43a>
 800d400:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800d402:	1e73      	subs	r3, r6, #1
 800d404:	9315      	str	r3, [sp, #84]	@ 0x54
 800d406:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800d40a:	2b30      	cmp	r3, #48	@ 0x30
 800d40c:	d0f8      	beq.n	800d400 <_dtoa_r+0x650>
 800d40e:	9f04      	ldr	r7, [sp, #16]
 800d410:	e73e      	b.n	800d290 <_dtoa_r+0x4e0>
 800d412:	4b9b      	ldr	r3, [pc, #620]	@ (800d680 <_dtoa_r+0x8d0>)
 800d414:	f7f3 f900 	bl	8000618 <__aeabi_dmul>
 800d418:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d41c:	e7bc      	b.n	800d398 <_dtoa_r+0x5e8>
 800d41e:	d10c      	bne.n	800d43a <_dtoa_r+0x68a>
 800d420:	4b98      	ldr	r3, [pc, #608]	@ (800d684 <_dtoa_r+0x8d4>)
 800d422:	2200      	movs	r2, #0
 800d424:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d428:	f7f3 f8f6 	bl	8000618 <__aeabi_dmul>
 800d42c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d430:	f7f3 fb78 	bl	8000b24 <__aeabi_dcmpge>
 800d434:	2800      	cmp	r0, #0
 800d436:	f000 8157 	beq.w	800d6e8 <_dtoa_r+0x938>
 800d43a:	2400      	movs	r4, #0
 800d43c:	4625      	mov	r5, r4
 800d43e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d440:	43db      	mvns	r3, r3
 800d442:	9304      	str	r3, [sp, #16]
 800d444:	4656      	mov	r6, sl
 800d446:	2700      	movs	r7, #0
 800d448:	4621      	mov	r1, r4
 800d44a:	4658      	mov	r0, fp
 800d44c:	f000 fe8e 	bl	800e16c <_Bfree>
 800d450:	2d00      	cmp	r5, #0
 800d452:	d0dc      	beq.n	800d40e <_dtoa_r+0x65e>
 800d454:	b12f      	cbz	r7, 800d462 <_dtoa_r+0x6b2>
 800d456:	42af      	cmp	r7, r5
 800d458:	d003      	beq.n	800d462 <_dtoa_r+0x6b2>
 800d45a:	4639      	mov	r1, r7
 800d45c:	4658      	mov	r0, fp
 800d45e:	f000 fe85 	bl	800e16c <_Bfree>
 800d462:	4629      	mov	r1, r5
 800d464:	4658      	mov	r0, fp
 800d466:	f000 fe81 	bl	800e16c <_Bfree>
 800d46a:	e7d0      	b.n	800d40e <_dtoa_r+0x65e>
 800d46c:	9704      	str	r7, [sp, #16]
 800d46e:	4633      	mov	r3, r6
 800d470:	461e      	mov	r6, r3
 800d472:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d476:	2a39      	cmp	r2, #57	@ 0x39
 800d478:	d107      	bne.n	800d48a <_dtoa_r+0x6da>
 800d47a:	459a      	cmp	sl, r3
 800d47c:	d1f8      	bne.n	800d470 <_dtoa_r+0x6c0>
 800d47e:	9a04      	ldr	r2, [sp, #16]
 800d480:	3201      	adds	r2, #1
 800d482:	9204      	str	r2, [sp, #16]
 800d484:	2230      	movs	r2, #48	@ 0x30
 800d486:	f88a 2000 	strb.w	r2, [sl]
 800d48a:	781a      	ldrb	r2, [r3, #0]
 800d48c:	3201      	adds	r2, #1
 800d48e:	701a      	strb	r2, [r3, #0]
 800d490:	e7bd      	b.n	800d40e <_dtoa_r+0x65e>
 800d492:	4b7b      	ldr	r3, [pc, #492]	@ (800d680 <_dtoa_r+0x8d0>)
 800d494:	2200      	movs	r2, #0
 800d496:	f7f3 f8bf 	bl	8000618 <__aeabi_dmul>
 800d49a:	2200      	movs	r2, #0
 800d49c:	2300      	movs	r3, #0
 800d49e:	4604      	mov	r4, r0
 800d4a0:	460d      	mov	r5, r1
 800d4a2:	f7f3 fb21 	bl	8000ae8 <__aeabi_dcmpeq>
 800d4a6:	2800      	cmp	r0, #0
 800d4a8:	f43f aebb 	beq.w	800d222 <_dtoa_r+0x472>
 800d4ac:	e6f0      	b.n	800d290 <_dtoa_r+0x4e0>
 800d4ae:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800d4b0:	2a00      	cmp	r2, #0
 800d4b2:	f000 80db 	beq.w	800d66c <_dtoa_r+0x8bc>
 800d4b6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d4b8:	2a01      	cmp	r2, #1
 800d4ba:	f300 80bf 	bgt.w	800d63c <_dtoa_r+0x88c>
 800d4be:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800d4c0:	2a00      	cmp	r2, #0
 800d4c2:	f000 80b7 	beq.w	800d634 <_dtoa_r+0x884>
 800d4c6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800d4ca:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800d4cc:	4646      	mov	r6, r8
 800d4ce:	9a08      	ldr	r2, [sp, #32]
 800d4d0:	2101      	movs	r1, #1
 800d4d2:	441a      	add	r2, r3
 800d4d4:	4658      	mov	r0, fp
 800d4d6:	4498      	add	r8, r3
 800d4d8:	9208      	str	r2, [sp, #32]
 800d4da:	f000 ff45 	bl	800e368 <__i2b>
 800d4de:	4605      	mov	r5, r0
 800d4e0:	b15e      	cbz	r6, 800d4fa <_dtoa_r+0x74a>
 800d4e2:	9b08      	ldr	r3, [sp, #32]
 800d4e4:	2b00      	cmp	r3, #0
 800d4e6:	dd08      	ble.n	800d4fa <_dtoa_r+0x74a>
 800d4e8:	42b3      	cmp	r3, r6
 800d4ea:	9a08      	ldr	r2, [sp, #32]
 800d4ec:	bfa8      	it	ge
 800d4ee:	4633      	movge	r3, r6
 800d4f0:	eba8 0803 	sub.w	r8, r8, r3
 800d4f4:	1af6      	subs	r6, r6, r3
 800d4f6:	1ad3      	subs	r3, r2, r3
 800d4f8:	9308      	str	r3, [sp, #32]
 800d4fa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d4fc:	b1f3      	cbz	r3, 800d53c <_dtoa_r+0x78c>
 800d4fe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d500:	2b00      	cmp	r3, #0
 800d502:	f000 80b7 	beq.w	800d674 <_dtoa_r+0x8c4>
 800d506:	b18c      	cbz	r4, 800d52c <_dtoa_r+0x77c>
 800d508:	4629      	mov	r1, r5
 800d50a:	4622      	mov	r2, r4
 800d50c:	4658      	mov	r0, fp
 800d50e:	f000 ffeb 	bl	800e4e8 <__pow5mult>
 800d512:	464a      	mov	r2, r9
 800d514:	4601      	mov	r1, r0
 800d516:	4605      	mov	r5, r0
 800d518:	4658      	mov	r0, fp
 800d51a:	f000 ff3b 	bl	800e394 <__multiply>
 800d51e:	4649      	mov	r1, r9
 800d520:	9004      	str	r0, [sp, #16]
 800d522:	4658      	mov	r0, fp
 800d524:	f000 fe22 	bl	800e16c <_Bfree>
 800d528:	9b04      	ldr	r3, [sp, #16]
 800d52a:	4699      	mov	r9, r3
 800d52c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d52e:	1b1a      	subs	r2, r3, r4
 800d530:	d004      	beq.n	800d53c <_dtoa_r+0x78c>
 800d532:	4649      	mov	r1, r9
 800d534:	4658      	mov	r0, fp
 800d536:	f000 ffd7 	bl	800e4e8 <__pow5mult>
 800d53a:	4681      	mov	r9, r0
 800d53c:	2101      	movs	r1, #1
 800d53e:	4658      	mov	r0, fp
 800d540:	f000 ff12 	bl	800e368 <__i2b>
 800d544:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d546:	4604      	mov	r4, r0
 800d548:	2b00      	cmp	r3, #0
 800d54a:	f000 81cf 	beq.w	800d8ec <_dtoa_r+0xb3c>
 800d54e:	461a      	mov	r2, r3
 800d550:	4601      	mov	r1, r0
 800d552:	4658      	mov	r0, fp
 800d554:	f000 ffc8 	bl	800e4e8 <__pow5mult>
 800d558:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d55a:	2b01      	cmp	r3, #1
 800d55c:	4604      	mov	r4, r0
 800d55e:	f300 8095 	bgt.w	800d68c <_dtoa_r+0x8dc>
 800d562:	9b02      	ldr	r3, [sp, #8]
 800d564:	2b00      	cmp	r3, #0
 800d566:	f040 8087 	bne.w	800d678 <_dtoa_r+0x8c8>
 800d56a:	9b03      	ldr	r3, [sp, #12]
 800d56c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d570:	2b00      	cmp	r3, #0
 800d572:	f040 8089 	bne.w	800d688 <_dtoa_r+0x8d8>
 800d576:	9b03      	ldr	r3, [sp, #12]
 800d578:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800d57c:	0d1b      	lsrs	r3, r3, #20
 800d57e:	051b      	lsls	r3, r3, #20
 800d580:	b12b      	cbz	r3, 800d58e <_dtoa_r+0x7de>
 800d582:	9b08      	ldr	r3, [sp, #32]
 800d584:	3301      	adds	r3, #1
 800d586:	9308      	str	r3, [sp, #32]
 800d588:	f108 0801 	add.w	r8, r8, #1
 800d58c:	2301      	movs	r3, #1
 800d58e:	930a      	str	r3, [sp, #40]	@ 0x28
 800d590:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d592:	2b00      	cmp	r3, #0
 800d594:	f000 81b0 	beq.w	800d8f8 <_dtoa_r+0xb48>
 800d598:	6923      	ldr	r3, [r4, #16]
 800d59a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800d59e:	6918      	ldr	r0, [r3, #16]
 800d5a0:	f000 fe96 	bl	800e2d0 <__hi0bits>
 800d5a4:	f1c0 0020 	rsb	r0, r0, #32
 800d5a8:	9b08      	ldr	r3, [sp, #32]
 800d5aa:	4418      	add	r0, r3
 800d5ac:	f010 001f 	ands.w	r0, r0, #31
 800d5b0:	d077      	beq.n	800d6a2 <_dtoa_r+0x8f2>
 800d5b2:	f1c0 0320 	rsb	r3, r0, #32
 800d5b6:	2b04      	cmp	r3, #4
 800d5b8:	dd6b      	ble.n	800d692 <_dtoa_r+0x8e2>
 800d5ba:	9b08      	ldr	r3, [sp, #32]
 800d5bc:	f1c0 001c 	rsb	r0, r0, #28
 800d5c0:	4403      	add	r3, r0
 800d5c2:	4480      	add	r8, r0
 800d5c4:	4406      	add	r6, r0
 800d5c6:	9308      	str	r3, [sp, #32]
 800d5c8:	f1b8 0f00 	cmp.w	r8, #0
 800d5cc:	dd05      	ble.n	800d5da <_dtoa_r+0x82a>
 800d5ce:	4649      	mov	r1, r9
 800d5d0:	4642      	mov	r2, r8
 800d5d2:	4658      	mov	r0, fp
 800d5d4:	f000 ffe2 	bl	800e59c <__lshift>
 800d5d8:	4681      	mov	r9, r0
 800d5da:	9b08      	ldr	r3, [sp, #32]
 800d5dc:	2b00      	cmp	r3, #0
 800d5de:	dd05      	ble.n	800d5ec <_dtoa_r+0x83c>
 800d5e0:	4621      	mov	r1, r4
 800d5e2:	461a      	mov	r2, r3
 800d5e4:	4658      	mov	r0, fp
 800d5e6:	f000 ffd9 	bl	800e59c <__lshift>
 800d5ea:	4604      	mov	r4, r0
 800d5ec:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800d5ee:	2b00      	cmp	r3, #0
 800d5f0:	d059      	beq.n	800d6a6 <_dtoa_r+0x8f6>
 800d5f2:	4621      	mov	r1, r4
 800d5f4:	4648      	mov	r0, r9
 800d5f6:	f001 f83d 	bl	800e674 <__mcmp>
 800d5fa:	2800      	cmp	r0, #0
 800d5fc:	da53      	bge.n	800d6a6 <_dtoa_r+0x8f6>
 800d5fe:	1e7b      	subs	r3, r7, #1
 800d600:	9304      	str	r3, [sp, #16]
 800d602:	4649      	mov	r1, r9
 800d604:	2300      	movs	r3, #0
 800d606:	220a      	movs	r2, #10
 800d608:	4658      	mov	r0, fp
 800d60a:	f000 fdd1 	bl	800e1b0 <__multadd>
 800d60e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d610:	4681      	mov	r9, r0
 800d612:	2b00      	cmp	r3, #0
 800d614:	f000 8172 	beq.w	800d8fc <_dtoa_r+0xb4c>
 800d618:	2300      	movs	r3, #0
 800d61a:	4629      	mov	r1, r5
 800d61c:	220a      	movs	r2, #10
 800d61e:	4658      	mov	r0, fp
 800d620:	f000 fdc6 	bl	800e1b0 <__multadd>
 800d624:	9b00      	ldr	r3, [sp, #0]
 800d626:	2b00      	cmp	r3, #0
 800d628:	4605      	mov	r5, r0
 800d62a:	dc67      	bgt.n	800d6fc <_dtoa_r+0x94c>
 800d62c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d62e:	2b02      	cmp	r3, #2
 800d630:	dc41      	bgt.n	800d6b6 <_dtoa_r+0x906>
 800d632:	e063      	b.n	800d6fc <_dtoa_r+0x94c>
 800d634:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800d636:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800d63a:	e746      	b.n	800d4ca <_dtoa_r+0x71a>
 800d63c:	9b07      	ldr	r3, [sp, #28]
 800d63e:	1e5c      	subs	r4, r3, #1
 800d640:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d642:	42a3      	cmp	r3, r4
 800d644:	bfbf      	itttt	lt
 800d646:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800d648:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800d64a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800d64c:	1ae3      	sublt	r3, r4, r3
 800d64e:	bfb4      	ite	lt
 800d650:	18d2      	addlt	r2, r2, r3
 800d652:	1b1c      	subge	r4, r3, r4
 800d654:	9b07      	ldr	r3, [sp, #28]
 800d656:	bfbc      	itt	lt
 800d658:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800d65a:	2400      	movlt	r4, #0
 800d65c:	2b00      	cmp	r3, #0
 800d65e:	bfb5      	itete	lt
 800d660:	eba8 0603 	sublt.w	r6, r8, r3
 800d664:	9b07      	ldrge	r3, [sp, #28]
 800d666:	2300      	movlt	r3, #0
 800d668:	4646      	movge	r6, r8
 800d66a:	e730      	b.n	800d4ce <_dtoa_r+0x71e>
 800d66c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800d66e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800d670:	4646      	mov	r6, r8
 800d672:	e735      	b.n	800d4e0 <_dtoa_r+0x730>
 800d674:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d676:	e75c      	b.n	800d532 <_dtoa_r+0x782>
 800d678:	2300      	movs	r3, #0
 800d67a:	e788      	b.n	800d58e <_dtoa_r+0x7de>
 800d67c:	3fe00000 	.word	0x3fe00000
 800d680:	40240000 	.word	0x40240000
 800d684:	40140000 	.word	0x40140000
 800d688:	9b02      	ldr	r3, [sp, #8]
 800d68a:	e780      	b.n	800d58e <_dtoa_r+0x7de>
 800d68c:	2300      	movs	r3, #0
 800d68e:	930a      	str	r3, [sp, #40]	@ 0x28
 800d690:	e782      	b.n	800d598 <_dtoa_r+0x7e8>
 800d692:	d099      	beq.n	800d5c8 <_dtoa_r+0x818>
 800d694:	9a08      	ldr	r2, [sp, #32]
 800d696:	331c      	adds	r3, #28
 800d698:	441a      	add	r2, r3
 800d69a:	4498      	add	r8, r3
 800d69c:	441e      	add	r6, r3
 800d69e:	9208      	str	r2, [sp, #32]
 800d6a0:	e792      	b.n	800d5c8 <_dtoa_r+0x818>
 800d6a2:	4603      	mov	r3, r0
 800d6a4:	e7f6      	b.n	800d694 <_dtoa_r+0x8e4>
 800d6a6:	9b07      	ldr	r3, [sp, #28]
 800d6a8:	9704      	str	r7, [sp, #16]
 800d6aa:	2b00      	cmp	r3, #0
 800d6ac:	dc20      	bgt.n	800d6f0 <_dtoa_r+0x940>
 800d6ae:	9300      	str	r3, [sp, #0]
 800d6b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d6b2:	2b02      	cmp	r3, #2
 800d6b4:	dd1e      	ble.n	800d6f4 <_dtoa_r+0x944>
 800d6b6:	9b00      	ldr	r3, [sp, #0]
 800d6b8:	2b00      	cmp	r3, #0
 800d6ba:	f47f aec0 	bne.w	800d43e <_dtoa_r+0x68e>
 800d6be:	4621      	mov	r1, r4
 800d6c0:	2205      	movs	r2, #5
 800d6c2:	4658      	mov	r0, fp
 800d6c4:	f000 fd74 	bl	800e1b0 <__multadd>
 800d6c8:	4601      	mov	r1, r0
 800d6ca:	4604      	mov	r4, r0
 800d6cc:	4648      	mov	r0, r9
 800d6ce:	f000 ffd1 	bl	800e674 <__mcmp>
 800d6d2:	2800      	cmp	r0, #0
 800d6d4:	f77f aeb3 	ble.w	800d43e <_dtoa_r+0x68e>
 800d6d8:	4656      	mov	r6, sl
 800d6da:	2331      	movs	r3, #49	@ 0x31
 800d6dc:	f806 3b01 	strb.w	r3, [r6], #1
 800d6e0:	9b04      	ldr	r3, [sp, #16]
 800d6e2:	3301      	adds	r3, #1
 800d6e4:	9304      	str	r3, [sp, #16]
 800d6e6:	e6ae      	b.n	800d446 <_dtoa_r+0x696>
 800d6e8:	9c07      	ldr	r4, [sp, #28]
 800d6ea:	9704      	str	r7, [sp, #16]
 800d6ec:	4625      	mov	r5, r4
 800d6ee:	e7f3      	b.n	800d6d8 <_dtoa_r+0x928>
 800d6f0:	9b07      	ldr	r3, [sp, #28]
 800d6f2:	9300      	str	r3, [sp, #0]
 800d6f4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d6f6:	2b00      	cmp	r3, #0
 800d6f8:	f000 8104 	beq.w	800d904 <_dtoa_r+0xb54>
 800d6fc:	2e00      	cmp	r6, #0
 800d6fe:	dd05      	ble.n	800d70c <_dtoa_r+0x95c>
 800d700:	4629      	mov	r1, r5
 800d702:	4632      	mov	r2, r6
 800d704:	4658      	mov	r0, fp
 800d706:	f000 ff49 	bl	800e59c <__lshift>
 800d70a:	4605      	mov	r5, r0
 800d70c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d70e:	2b00      	cmp	r3, #0
 800d710:	d05a      	beq.n	800d7c8 <_dtoa_r+0xa18>
 800d712:	6869      	ldr	r1, [r5, #4]
 800d714:	4658      	mov	r0, fp
 800d716:	f000 fce9 	bl	800e0ec <_Balloc>
 800d71a:	4606      	mov	r6, r0
 800d71c:	b928      	cbnz	r0, 800d72a <_dtoa_r+0x97a>
 800d71e:	4b84      	ldr	r3, [pc, #528]	@ (800d930 <_dtoa_r+0xb80>)
 800d720:	4602      	mov	r2, r0
 800d722:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800d726:	f7ff bb5a 	b.w	800cdde <_dtoa_r+0x2e>
 800d72a:	692a      	ldr	r2, [r5, #16]
 800d72c:	3202      	adds	r2, #2
 800d72e:	0092      	lsls	r2, r2, #2
 800d730:	f105 010c 	add.w	r1, r5, #12
 800d734:	300c      	adds	r0, #12
 800d736:	f7ff fa8d 	bl	800cc54 <memcpy>
 800d73a:	2201      	movs	r2, #1
 800d73c:	4631      	mov	r1, r6
 800d73e:	4658      	mov	r0, fp
 800d740:	f000 ff2c 	bl	800e59c <__lshift>
 800d744:	f10a 0301 	add.w	r3, sl, #1
 800d748:	9307      	str	r3, [sp, #28]
 800d74a:	9b00      	ldr	r3, [sp, #0]
 800d74c:	4453      	add	r3, sl
 800d74e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d750:	9b02      	ldr	r3, [sp, #8]
 800d752:	f003 0301 	and.w	r3, r3, #1
 800d756:	462f      	mov	r7, r5
 800d758:	930a      	str	r3, [sp, #40]	@ 0x28
 800d75a:	4605      	mov	r5, r0
 800d75c:	9b07      	ldr	r3, [sp, #28]
 800d75e:	4621      	mov	r1, r4
 800d760:	3b01      	subs	r3, #1
 800d762:	4648      	mov	r0, r9
 800d764:	9300      	str	r3, [sp, #0]
 800d766:	f7ff fa99 	bl	800cc9c <quorem>
 800d76a:	4639      	mov	r1, r7
 800d76c:	9002      	str	r0, [sp, #8]
 800d76e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800d772:	4648      	mov	r0, r9
 800d774:	f000 ff7e 	bl	800e674 <__mcmp>
 800d778:	462a      	mov	r2, r5
 800d77a:	9008      	str	r0, [sp, #32]
 800d77c:	4621      	mov	r1, r4
 800d77e:	4658      	mov	r0, fp
 800d780:	f000 ff94 	bl	800e6ac <__mdiff>
 800d784:	68c2      	ldr	r2, [r0, #12]
 800d786:	4606      	mov	r6, r0
 800d788:	bb02      	cbnz	r2, 800d7cc <_dtoa_r+0xa1c>
 800d78a:	4601      	mov	r1, r0
 800d78c:	4648      	mov	r0, r9
 800d78e:	f000 ff71 	bl	800e674 <__mcmp>
 800d792:	4602      	mov	r2, r0
 800d794:	4631      	mov	r1, r6
 800d796:	4658      	mov	r0, fp
 800d798:	920e      	str	r2, [sp, #56]	@ 0x38
 800d79a:	f000 fce7 	bl	800e16c <_Bfree>
 800d79e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d7a0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d7a2:	9e07      	ldr	r6, [sp, #28]
 800d7a4:	ea43 0102 	orr.w	r1, r3, r2
 800d7a8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d7aa:	4319      	orrs	r1, r3
 800d7ac:	d110      	bne.n	800d7d0 <_dtoa_r+0xa20>
 800d7ae:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800d7b2:	d029      	beq.n	800d808 <_dtoa_r+0xa58>
 800d7b4:	9b08      	ldr	r3, [sp, #32]
 800d7b6:	2b00      	cmp	r3, #0
 800d7b8:	dd02      	ble.n	800d7c0 <_dtoa_r+0xa10>
 800d7ba:	9b02      	ldr	r3, [sp, #8]
 800d7bc:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800d7c0:	9b00      	ldr	r3, [sp, #0]
 800d7c2:	f883 8000 	strb.w	r8, [r3]
 800d7c6:	e63f      	b.n	800d448 <_dtoa_r+0x698>
 800d7c8:	4628      	mov	r0, r5
 800d7ca:	e7bb      	b.n	800d744 <_dtoa_r+0x994>
 800d7cc:	2201      	movs	r2, #1
 800d7ce:	e7e1      	b.n	800d794 <_dtoa_r+0x9e4>
 800d7d0:	9b08      	ldr	r3, [sp, #32]
 800d7d2:	2b00      	cmp	r3, #0
 800d7d4:	db04      	blt.n	800d7e0 <_dtoa_r+0xa30>
 800d7d6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800d7d8:	430b      	orrs	r3, r1
 800d7da:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d7dc:	430b      	orrs	r3, r1
 800d7de:	d120      	bne.n	800d822 <_dtoa_r+0xa72>
 800d7e0:	2a00      	cmp	r2, #0
 800d7e2:	dded      	ble.n	800d7c0 <_dtoa_r+0xa10>
 800d7e4:	4649      	mov	r1, r9
 800d7e6:	2201      	movs	r2, #1
 800d7e8:	4658      	mov	r0, fp
 800d7ea:	f000 fed7 	bl	800e59c <__lshift>
 800d7ee:	4621      	mov	r1, r4
 800d7f0:	4681      	mov	r9, r0
 800d7f2:	f000 ff3f 	bl	800e674 <__mcmp>
 800d7f6:	2800      	cmp	r0, #0
 800d7f8:	dc03      	bgt.n	800d802 <_dtoa_r+0xa52>
 800d7fa:	d1e1      	bne.n	800d7c0 <_dtoa_r+0xa10>
 800d7fc:	f018 0f01 	tst.w	r8, #1
 800d800:	d0de      	beq.n	800d7c0 <_dtoa_r+0xa10>
 800d802:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800d806:	d1d8      	bne.n	800d7ba <_dtoa_r+0xa0a>
 800d808:	9a00      	ldr	r2, [sp, #0]
 800d80a:	2339      	movs	r3, #57	@ 0x39
 800d80c:	7013      	strb	r3, [r2, #0]
 800d80e:	4633      	mov	r3, r6
 800d810:	461e      	mov	r6, r3
 800d812:	3b01      	subs	r3, #1
 800d814:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800d818:	2a39      	cmp	r2, #57	@ 0x39
 800d81a:	d052      	beq.n	800d8c2 <_dtoa_r+0xb12>
 800d81c:	3201      	adds	r2, #1
 800d81e:	701a      	strb	r2, [r3, #0]
 800d820:	e612      	b.n	800d448 <_dtoa_r+0x698>
 800d822:	2a00      	cmp	r2, #0
 800d824:	dd07      	ble.n	800d836 <_dtoa_r+0xa86>
 800d826:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800d82a:	d0ed      	beq.n	800d808 <_dtoa_r+0xa58>
 800d82c:	9a00      	ldr	r2, [sp, #0]
 800d82e:	f108 0301 	add.w	r3, r8, #1
 800d832:	7013      	strb	r3, [r2, #0]
 800d834:	e608      	b.n	800d448 <_dtoa_r+0x698>
 800d836:	9b07      	ldr	r3, [sp, #28]
 800d838:	9a07      	ldr	r2, [sp, #28]
 800d83a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800d83e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d840:	4293      	cmp	r3, r2
 800d842:	d028      	beq.n	800d896 <_dtoa_r+0xae6>
 800d844:	4649      	mov	r1, r9
 800d846:	2300      	movs	r3, #0
 800d848:	220a      	movs	r2, #10
 800d84a:	4658      	mov	r0, fp
 800d84c:	f000 fcb0 	bl	800e1b0 <__multadd>
 800d850:	42af      	cmp	r7, r5
 800d852:	4681      	mov	r9, r0
 800d854:	f04f 0300 	mov.w	r3, #0
 800d858:	f04f 020a 	mov.w	r2, #10
 800d85c:	4639      	mov	r1, r7
 800d85e:	4658      	mov	r0, fp
 800d860:	d107      	bne.n	800d872 <_dtoa_r+0xac2>
 800d862:	f000 fca5 	bl	800e1b0 <__multadd>
 800d866:	4607      	mov	r7, r0
 800d868:	4605      	mov	r5, r0
 800d86a:	9b07      	ldr	r3, [sp, #28]
 800d86c:	3301      	adds	r3, #1
 800d86e:	9307      	str	r3, [sp, #28]
 800d870:	e774      	b.n	800d75c <_dtoa_r+0x9ac>
 800d872:	f000 fc9d 	bl	800e1b0 <__multadd>
 800d876:	4629      	mov	r1, r5
 800d878:	4607      	mov	r7, r0
 800d87a:	2300      	movs	r3, #0
 800d87c:	220a      	movs	r2, #10
 800d87e:	4658      	mov	r0, fp
 800d880:	f000 fc96 	bl	800e1b0 <__multadd>
 800d884:	4605      	mov	r5, r0
 800d886:	e7f0      	b.n	800d86a <_dtoa_r+0xaba>
 800d888:	9b00      	ldr	r3, [sp, #0]
 800d88a:	2b00      	cmp	r3, #0
 800d88c:	bfcc      	ite	gt
 800d88e:	461e      	movgt	r6, r3
 800d890:	2601      	movle	r6, #1
 800d892:	4456      	add	r6, sl
 800d894:	2700      	movs	r7, #0
 800d896:	4649      	mov	r1, r9
 800d898:	2201      	movs	r2, #1
 800d89a:	4658      	mov	r0, fp
 800d89c:	f000 fe7e 	bl	800e59c <__lshift>
 800d8a0:	4621      	mov	r1, r4
 800d8a2:	4681      	mov	r9, r0
 800d8a4:	f000 fee6 	bl	800e674 <__mcmp>
 800d8a8:	2800      	cmp	r0, #0
 800d8aa:	dcb0      	bgt.n	800d80e <_dtoa_r+0xa5e>
 800d8ac:	d102      	bne.n	800d8b4 <_dtoa_r+0xb04>
 800d8ae:	f018 0f01 	tst.w	r8, #1
 800d8b2:	d1ac      	bne.n	800d80e <_dtoa_r+0xa5e>
 800d8b4:	4633      	mov	r3, r6
 800d8b6:	461e      	mov	r6, r3
 800d8b8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d8bc:	2a30      	cmp	r2, #48	@ 0x30
 800d8be:	d0fa      	beq.n	800d8b6 <_dtoa_r+0xb06>
 800d8c0:	e5c2      	b.n	800d448 <_dtoa_r+0x698>
 800d8c2:	459a      	cmp	sl, r3
 800d8c4:	d1a4      	bne.n	800d810 <_dtoa_r+0xa60>
 800d8c6:	9b04      	ldr	r3, [sp, #16]
 800d8c8:	3301      	adds	r3, #1
 800d8ca:	9304      	str	r3, [sp, #16]
 800d8cc:	2331      	movs	r3, #49	@ 0x31
 800d8ce:	f88a 3000 	strb.w	r3, [sl]
 800d8d2:	e5b9      	b.n	800d448 <_dtoa_r+0x698>
 800d8d4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800d8d6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800d934 <_dtoa_r+0xb84>
 800d8da:	b11b      	cbz	r3, 800d8e4 <_dtoa_r+0xb34>
 800d8dc:	f10a 0308 	add.w	r3, sl, #8
 800d8e0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800d8e2:	6013      	str	r3, [r2, #0]
 800d8e4:	4650      	mov	r0, sl
 800d8e6:	b019      	add	sp, #100	@ 0x64
 800d8e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d8ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d8ee:	2b01      	cmp	r3, #1
 800d8f0:	f77f ae37 	ble.w	800d562 <_dtoa_r+0x7b2>
 800d8f4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d8f6:	930a      	str	r3, [sp, #40]	@ 0x28
 800d8f8:	2001      	movs	r0, #1
 800d8fa:	e655      	b.n	800d5a8 <_dtoa_r+0x7f8>
 800d8fc:	9b00      	ldr	r3, [sp, #0]
 800d8fe:	2b00      	cmp	r3, #0
 800d900:	f77f aed6 	ble.w	800d6b0 <_dtoa_r+0x900>
 800d904:	4656      	mov	r6, sl
 800d906:	4621      	mov	r1, r4
 800d908:	4648      	mov	r0, r9
 800d90a:	f7ff f9c7 	bl	800cc9c <quorem>
 800d90e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800d912:	f806 8b01 	strb.w	r8, [r6], #1
 800d916:	9b00      	ldr	r3, [sp, #0]
 800d918:	eba6 020a 	sub.w	r2, r6, sl
 800d91c:	4293      	cmp	r3, r2
 800d91e:	ddb3      	ble.n	800d888 <_dtoa_r+0xad8>
 800d920:	4649      	mov	r1, r9
 800d922:	2300      	movs	r3, #0
 800d924:	220a      	movs	r2, #10
 800d926:	4658      	mov	r0, fp
 800d928:	f000 fc42 	bl	800e1b0 <__multadd>
 800d92c:	4681      	mov	r9, r0
 800d92e:	e7ea      	b.n	800d906 <_dtoa_r+0xb56>
 800d930:	08013cd8 	.word	0x08013cd8
 800d934:	08013c5c 	.word	0x08013c5c

0800d938 <_free_r>:
 800d938:	b538      	push	{r3, r4, r5, lr}
 800d93a:	4605      	mov	r5, r0
 800d93c:	2900      	cmp	r1, #0
 800d93e:	d041      	beq.n	800d9c4 <_free_r+0x8c>
 800d940:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d944:	1f0c      	subs	r4, r1, #4
 800d946:	2b00      	cmp	r3, #0
 800d948:	bfb8      	it	lt
 800d94a:	18e4      	addlt	r4, r4, r3
 800d94c:	f7fc fc5c 	bl	800a208 <__malloc_lock>
 800d950:	4a1d      	ldr	r2, [pc, #116]	@ (800d9c8 <_free_r+0x90>)
 800d952:	6813      	ldr	r3, [r2, #0]
 800d954:	b933      	cbnz	r3, 800d964 <_free_r+0x2c>
 800d956:	6063      	str	r3, [r4, #4]
 800d958:	6014      	str	r4, [r2, #0]
 800d95a:	4628      	mov	r0, r5
 800d95c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d960:	f7fc bc58 	b.w	800a214 <__malloc_unlock>
 800d964:	42a3      	cmp	r3, r4
 800d966:	d908      	bls.n	800d97a <_free_r+0x42>
 800d968:	6820      	ldr	r0, [r4, #0]
 800d96a:	1821      	adds	r1, r4, r0
 800d96c:	428b      	cmp	r3, r1
 800d96e:	bf01      	itttt	eq
 800d970:	6819      	ldreq	r1, [r3, #0]
 800d972:	685b      	ldreq	r3, [r3, #4]
 800d974:	1809      	addeq	r1, r1, r0
 800d976:	6021      	streq	r1, [r4, #0]
 800d978:	e7ed      	b.n	800d956 <_free_r+0x1e>
 800d97a:	461a      	mov	r2, r3
 800d97c:	685b      	ldr	r3, [r3, #4]
 800d97e:	b10b      	cbz	r3, 800d984 <_free_r+0x4c>
 800d980:	42a3      	cmp	r3, r4
 800d982:	d9fa      	bls.n	800d97a <_free_r+0x42>
 800d984:	6811      	ldr	r1, [r2, #0]
 800d986:	1850      	adds	r0, r2, r1
 800d988:	42a0      	cmp	r0, r4
 800d98a:	d10b      	bne.n	800d9a4 <_free_r+0x6c>
 800d98c:	6820      	ldr	r0, [r4, #0]
 800d98e:	4401      	add	r1, r0
 800d990:	1850      	adds	r0, r2, r1
 800d992:	4283      	cmp	r3, r0
 800d994:	6011      	str	r1, [r2, #0]
 800d996:	d1e0      	bne.n	800d95a <_free_r+0x22>
 800d998:	6818      	ldr	r0, [r3, #0]
 800d99a:	685b      	ldr	r3, [r3, #4]
 800d99c:	6053      	str	r3, [r2, #4]
 800d99e:	4408      	add	r0, r1
 800d9a0:	6010      	str	r0, [r2, #0]
 800d9a2:	e7da      	b.n	800d95a <_free_r+0x22>
 800d9a4:	d902      	bls.n	800d9ac <_free_r+0x74>
 800d9a6:	230c      	movs	r3, #12
 800d9a8:	602b      	str	r3, [r5, #0]
 800d9aa:	e7d6      	b.n	800d95a <_free_r+0x22>
 800d9ac:	6820      	ldr	r0, [r4, #0]
 800d9ae:	1821      	adds	r1, r4, r0
 800d9b0:	428b      	cmp	r3, r1
 800d9b2:	bf04      	itt	eq
 800d9b4:	6819      	ldreq	r1, [r3, #0]
 800d9b6:	685b      	ldreq	r3, [r3, #4]
 800d9b8:	6063      	str	r3, [r4, #4]
 800d9ba:	bf04      	itt	eq
 800d9bc:	1809      	addeq	r1, r1, r0
 800d9be:	6021      	streq	r1, [r4, #0]
 800d9c0:	6054      	str	r4, [r2, #4]
 800d9c2:	e7ca      	b.n	800d95a <_free_r+0x22>
 800d9c4:	bd38      	pop	{r3, r4, r5, pc}
 800d9c6:	bf00      	nop
 800d9c8:	20009830 	.word	0x20009830

0800d9cc <rshift>:
 800d9cc:	6903      	ldr	r3, [r0, #16]
 800d9ce:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800d9d2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d9d6:	ea4f 1261 	mov.w	r2, r1, asr #5
 800d9da:	f100 0414 	add.w	r4, r0, #20
 800d9de:	dd45      	ble.n	800da6c <rshift+0xa0>
 800d9e0:	f011 011f 	ands.w	r1, r1, #31
 800d9e4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800d9e8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800d9ec:	d10c      	bne.n	800da08 <rshift+0x3c>
 800d9ee:	f100 0710 	add.w	r7, r0, #16
 800d9f2:	4629      	mov	r1, r5
 800d9f4:	42b1      	cmp	r1, r6
 800d9f6:	d334      	bcc.n	800da62 <rshift+0x96>
 800d9f8:	1a9b      	subs	r3, r3, r2
 800d9fa:	009b      	lsls	r3, r3, #2
 800d9fc:	1eea      	subs	r2, r5, #3
 800d9fe:	4296      	cmp	r6, r2
 800da00:	bf38      	it	cc
 800da02:	2300      	movcc	r3, #0
 800da04:	4423      	add	r3, r4
 800da06:	e015      	b.n	800da34 <rshift+0x68>
 800da08:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800da0c:	f1c1 0820 	rsb	r8, r1, #32
 800da10:	40cf      	lsrs	r7, r1
 800da12:	f105 0e04 	add.w	lr, r5, #4
 800da16:	46a1      	mov	r9, r4
 800da18:	4576      	cmp	r6, lr
 800da1a:	46f4      	mov	ip, lr
 800da1c:	d815      	bhi.n	800da4a <rshift+0x7e>
 800da1e:	1a9a      	subs	r2, r3, r2
 800da20:	0092      	lsls	r2, r2, #2
 800da22:	3a04      	subs	r2, #4
 800da24:	3501      	adds	r5, #1
 800da26:	42ae      	cmp	r6, r5
 800da28:	bf38      	it	cc
 800da2a:	2200      	movcc	r2, #0
 800da2c:	18a3      	adds	r3, r4, r2
 800da2e:	50a7      	str	r7, [r4, r2]
 800da30:	b107      	cbz	r7, 800da34 <rshift+0x68>
 800da32:	3304      	adds	r3, #4
 800da34:	1b1a      	subs	r2, r3, r4
 800da36:	42a3      	cmp	r3, r4
 800da38:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800da3c:	bf08      	it	eq
 800da3e:	2300      	moveq	r3, #0
 800da40:	6102      	str	r2, [r0, #16]
 800da42:	bf08      	it	eq
 800da44:	6143      	streq	r3, [r0, #20]
 800da46:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800da4a:	f8dc c000 	ldr.w	ip, [ip]
 800da4e:	fa0c fc08 	lsl.w	ip, ip, r8
 800da52:	ea4c 0707 	orr.w	r7, ip, r7
 800da56:	f849 7b04 	str.w	r7, [r9], #4
 800da5a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800da5e:	40cf      	lsrs	r7, r1
 800da60:	e7da      	b.n	800da18 <rshift+0x4c>
 800da62:	f851 cb04 	ldr.w	ip, [r1], #4
 800da66:	f847 cf04 	str.w	ip, [r7, #4]!
 800da6a:	e7c3      	b.n	800d9f4 <rshift+0x28>
 800da6c:	4623      	mov	r3, r4
 800da6e:	e7e1      	b.n	800da34 <rshift+0x68>

0800da70 <__hexdig_fun>:
 800da70:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800da74:	2b09      	cmp	r3, #9
 800da76:	d802      	bhi.n	800da7e <__hexdig_fun+0xe>
 800da78:	3820      	subs	r0, #32
 800da7a:	b2c0      	uxtb	r0, r0
 800da7c:	4770      	bx	lr
 800da7e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800da82:	2b05      	cmp	r3, #5
 800da84:	d801      	bhi.n	800da8a <__hexdig_fun+0x1a>
 800da86:	3847      	subs	r0, #71	@ 0x47
 800da88:	e7f7      	b.n	800da7a <__hexdig_fun+0xa>
 800da8a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800da8e:	2b05      	cmp	r3, #5
 800da90:	d801      	bhi.n	800da96 <__hexdig_fun+0x26>
 800da92:	3827      	subs	r0, #39	@ 0x27
 800da94:	e7f1      	b.n	800da7a <__hexdig_fun+0xa>
 800da96:	2000      	movs	r0, #0
 800da98:	4770      	bx	lr
	...

0800da9c <__gethex>:
 800da9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800daa0:	b085      	sub	sp, #20
 800daa2:	468a      	mov	sl, r1
 800daa4:	9302      	str	r3, [sp, #8]
 800daa6:	680b      	ldr	r3, [r1, #0]
 800daa8:	9001      	str	r0, [sp, #4]
 800daaa:	4690      	mov	r8, r2
 800daac:	1c9c      	adds	r4, r3, #2
 800daae:	46a1      	mov	r9, r4
 800dab0:	f814 0b01 	ldrb.w	r0, [r4], #1
 800dab4:	2830      	cmp	r0, #48	@ 0x30
 800dab6:	d0fa      	beq.n	800daae <__gethex+0x12>
 800dab8:	eba9 0303 	sub.w	r3, r9, r3
 800dabc:	f1a3 0b02 	sub.w	fp, r3, #2
 800dac0:	f7ff ffd6 	bl	800da70 <__hexdig_fun>
 800dac4:	4605      	mov	r5, r0
 800dac6:	2800      	cmp	r0, #0
 800dac8:	d168      	bne.n	800db9c <__gethex+0x100>
 800daca:	49a0      	ldr	r1, [pc, #640]	@ (800dd4c <__gethex+0x2b0>)
 800dacc:	2201      	movs	r2, #1
 800dace:	4648      	mov	r0, r9
 800dad0:	f7fe fa81 	bl	800bfd6 <strncmp>
 800dad4:	4607      	mov	r7, r0
 800dad6:	2800      	cmp	r0, #0
 800dad8:	d167      	bne.n	800dbaa <__gethex+0x10e>
 800dada:	f899 0001 	ldrb.w	r0, [r9, #1]
 800dade:	4626      	mov	r6, r4
 800dae0:	f7ff ffc6 	bl	800da70 <__hexdig_fun>
 800dae4:	2800      	cmp	r0, #0
 800dae6:	d062      	beq.n	800dbae <__gethex+0x112>
 800dae8:	4623      	mov	r3, r4
 800daea:	7818      	ldrb	r0, [r3, #0]
 800daec:	2830      	cmp	r0, #48	@ 0x30
 800daee:	4699      	mov	r9, r3
 800daf0:	f103 0301 	add.w	r3, r3, #1
 800daf4:	d0f9      	beq.n	800daea <__gethex+0x4e>
 800daf6:	f7ff ffbb 	bl	800da70 <__hexdig_fun>
 800dafa:	fab0 f580 	clz	r5, r0
 800dafe:	096d      	lsrs	r5, r5, #5
 800db00:	f04f 0b01 	mov.w	fp, #1
 800db04:	464a      	mov	r2, r9
 800db06:	4616      	mov	r6, r2
 800db08:	3201      	adds	r2, #1
 800db0a:	7830      	ldrb	r0, [r6, #0]
 800db0c:	f7ff ffb0 	bl	800da70 <__hexdig_fun>
 800db10:	2800      	cmp	r0, #0
 800db12:	d1f8      	bne.n	800db06 <__gethex+0x6a>
 800db14:	498d      	ldr	r1, [pc, #564]	@ (800dd4c <__gethex+0x2b0>)
 800db16:	2201      	movs	r2, #1
 800db18:	4630      	mov	r0, r6
 800db1a:	f7fe fa5c 	bl	800bfd6 <strncmp>
 800db1e:	2800      	cmp	r0, #0
 800db20:	d13f      	bne.n	800dba2 <__gethex+0x106>
 800db22:	b944      	cbnz	r4, 800db36 <__gethex+0x9a>
 800db24:	1c74      	adds	r4, r6, #1
 800db26:	4622      	mov	r2, r4
 800db28:	4616      	mov	r6, r2
 800db2a:	3201      	adds	r2, #1
 800db2c:	7830      	ldrb	r0, [r6, #0]
 800db2e:	f7ff ff9f 	bl	800da70 <__hexdig_fun>
 800db32:	2800      	cmp	r0, #0
 800db34:	d1f8      	bne.n	800db28 <__gethex+0x8c>
 800db36:	1ba4      	subs	r4, r4, r6
 800db38:	00a7      	lsls	r7, r4, #2
 800db3a:	7833      	ldrb	r3, [r6, #0]
 800db3c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800db40:	2b50      	cmp	r3, #80	@ 0x50
 800db42:	d13e      	bne.n	800dbc2 <__gethex+0x126>
 800db44:	7873      	ldrb	r3, [r6, #1]
 800db46:	2b2b      	cmp	r3, #43	@ 0x2b
 800db48:	d033      	beq.n	800dbb2 <__gethex+0x116>
 800db4a:	2b2d      	cmp	r3, #45	@ 0x2d
 800db4c:	d034      	beq.n	800dbb8 <__gethex+0x11c>
 800db4e:	1c71      	adds	r1, r6, #1
 800db50:	2400      	movs	r4, #0
 800db52:	7808      	ldrb	r0, [r1, #0]
 800db54:	f7ff ff8c 	bl	800da70 <__hexdig_fun>
 800db58:	1e43      	subs	r3, r0, #1
 800db5a:	b2db      	uxtb	r3, r3
 800db5c:	2b18      	cmp	r3, #24
 800db5e:	d830      	bhi.n	800dbc2 <__gethex+0x126>
 800db60:	f1a0 0210 	sub.w	r2, r0, #16
 800db64:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800db68:	f7ff ff82 	bl	800da70 <__hexdig_fun>
 800db6c:	f100 3cff 	add.w	ip, r0, #4294967295
 800db70:	fa5f fc8c 	uxtb.w	ip, ip
 800db74:	f1bc 0f18 	cmp.w	ip, #24
 800db78:	f04f 030a 	mov.w	r3, #10
 800db7c:	d91e      	bls.n	800dbbc <__gethex+0x120>
 800db7e:	b104      	cbz	r4, 800db82 <__gethex+0xe6>
 800db80:	4252      	negs	r2, r2
 800db82:	4417      	add	r7, r2
 800db84:	f8ca 1000 	str.w	r1, [sl]
 800db88:	b1ed      	cbz	r5, 800dbc6 <__gethex+0x12a>
 800db8a:	f1bb 0f00 	cmp.w	fp, #0
 800db8e:	bf0c      	ite	eq
 800db90:	2506      	moveq	r5, #6
 800db92:	2500      	movne	r5, #0
 800db94:	4628      	mov	r0, r5
 800db96:	b005      	add	sp, #20
 800db98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800db9c:	2500      	movs	r5, #0
 800db9e:	462c      	mov	r4, r5
 800dba0:	e7b0      	b.n	800db04 <__gethex+0x68>
 800dba2:	2c00      	cmp	r4, #0
 800dba4:	d1c7      	bne.n	800db36 <__gethex+0x9a>
 800dba6:	4627      	mov	r7, r4
 800dba8:	e7c7      	b.n	800db3a <__gethex+0x9e>
 800dbaa:	464e      	mov	r6, r9
 800dbac:	462f      	mov	r7, r5
 800dbae:	2501      	movs	r5, #1
 800dbb0:	e7c3      	b.n	800db3a <__gethex+0x9e>
 800dbb2:	2400      	movs	r4, #0
 800dbb4:	1cb1      	adds	r1, r6, #2
 800dbb6:	e7cc      	b.n	800db52 <__gethex+0xb6>
 800dbb8:	2401      	movs	r4, #1
 800dbba:	e7fb      	b.n	800dbb4 <__gethex+0x118>
 800dbbc:	fb03 0002 	mla	r0, r3, r2, r0
 800dbc0:	e7ce      	b.n	800db60 <__gethex+0xc4>
 800dbc2:	4631      	mov	r1, r6
 800dbc4:	e7de      	b.n	800db84 <__gethex+0xe8>
 800dbc6:	eba6 0309 	sub.w	r3, r6, r9
 800dbca:	3b01      	subs	r3, #1
 800dbcc:	4629      	mov	r1, r5
 800dbce:	2b07      	cmp	r3, #7
 800dbd0:	dc0a      	bgt.n	800dbe8 <__gethex+0x14c>
 800dbd2:	9801      	ldr	r0, [sp, #4]
 800dbd4:	f000 fa8a 	bl	800e0ec <_Balloc>
 800dbd8:	4604      	mov	r4, r0
 800dbda:	b940      	cbnz	r0, 800dbee <__gethex+0x152>
 800dbdc:	4b5c      	ldr	r3, [pc, #368]	@ (800dd50 <__gethex+0x2b4>)
 800dbde:	4602      	mov	r2, r0
 800dbe0:	21e4      	movs	r1, #228	@ 0xe4
 800dbe2:	485c      	ldr	r0, [pc, #368]	@ (800dd54 <__gethex+0x2b8>)
 800dbe4:	f001 fd6a 	bl	800f6bc <__assert_func>
 800dbe8:	3101      	adds	r1, #1
 800dbea:	105b      	asrs	r3, r3, #1
 800dbec:	e7ef      	b.n	800dbce <__gethex+0x132>
 800dbee:	f100 0a14 	add.w	sl, r0, #20
 800dbf2:	2300      	movs	r3, #0
 800dbf4:	4655      	mov	r5, sl
 800dbf6:	469b      	mov	fp, r3
 800dbf8:	45b1      	cmp	r9, r6
 800dbfa:	d337      	bcc.n	800dc6c <__gethex+0x1d0>
 800dbfc:	f845 bb04 	str.w	fp, [r5], #4
 800dc00:	eba5 050a 	sub.w	r5, r5, sl
 800dc04:	10ad      	asrs	r5, r5, #2
 800dc06:	6125      	str	r5, [r4, #16]
 800dc08:	4658      	mov	r0, fp
 800dc0a:	f000 fb61 	bl	800e2d0 <__hi0bits>
 800dc0e:	016d      	lsls	r5, r5, #5
 800dc10:	f8d8 6000 	ldr.w	r6, [r8]
 800dc14:	1a2d      	subs	r5, r5, r0
 800dc16:	42b5      	cmp	r5, r6
 800dc18:	dd54      	ble.n	800dcc4 <__gethex+0x228>
 800dc1a:	1bad      	subs	r5, r5, r6
 800dc1c:	4629      	mov	r1, r5
 800dc1e:	4620      	mov	r0, r4
 800dc20:	f000 fef5 	bl	800ea0e <__any_on>
 800dc24:	4681      	mov	r9, r0
 800dc26:	b178      	cbz	r0, 800dc48 <__gethex+0x1ac>
 800dc28:	1e6b      	subs	r3, r5, #1
 800dc2a:	1159      	asrs	r1, r3, #5
 800dc2c:	f003 021f 	and.w	r2, r3, #31
 800dc30:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800dc34:	f04f 0901 	mov.w	r9, #1
 800dc38:	fa09 f202 	lsl.w	r2, r9, r2
 800dc3c:	420a      	tst	r2, r1
 800dc3e:	d003      	beq.n	800dc48 <__gethex+0x1ac>
 800dc40:	454b      	cmp	r3, r9
 800dc42:	dc36      	bgt.n	800dcb2 <__gethex+0x216>
 800dc44:	f04f 0902 	mov.w	r9, #2
 800dc48:	4629      	mov	r1, r5
 800dc4a:	4620      	mov	r0, r4
 800dc4c:	f7ff febe 	bl	800d9cc <rshift>
 800dc50:	442f      	add	r7, r5
 800dc52:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800dc56:	42bb      	cmp	r3, r7
 800dc58:	da42      	bge.n	800dce0 <__gethex+0x244>
 800dc5a:	9801      	ldr	r0, [sp, #4]
 800dc5c:	4621      	mov	r1, r4
 800dc5e:	f000 fa85 	bl	800e16c <_Bfree>
 800dc62:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800dc64:	2300      	movs	r3, #0
 800dc66:	6013      	str	r3, [r2, #0]
 800dc68:	25a3      	movs	r5, #163	@ 0xa3
 800dc6a:	e793      	b.n	800db94 <__gethex+0xf8>
 800dc6c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800dc70:	2a2e      	cmp	r2, #46	@ 0x2e
 800dc72:	d012      	beq.n	800dc9a <__gethex+0x1fe>
 800dc74:	2b20      	cmp	r3, #32
 800dc76:	d104      	bne.n	800dc82 <__gethex+0x1e6>
 800dc78:	f845 bb04 	str.w	fp, [r5], #4
 800dc7c:	f04f 0b00 	mov.w	fp, #0
 800dc80:	465b      	mov	r3, fp
 800dc82:	7830      	ldrb	r0, [r6, #0]
 800dc84:	9303      	str	r3, [sp, #12]
 800dc86:	f7ff fef3 	bl	800da70 <__hexdig_fun>
 800dc8a:	9b03      	ldr	r3, [sp, #12]
 800dc8c:	f000 000f 	and.w	r0, r0, #15
 800dc90:	4098      	lsls	r0, r3
 800dc92:	ea4b 0b00 	orr.w	fp, fp, r0
 800dc96:	3304      	adds	r3, #4
 800dc98:	e7ae      	b.n	800dbf8 <__gethex+0x15c>
 800dc9a:	45b1      	cmp	r9, r6
 800dc9c:	d8ea      	bhi.n	800dc74 <__gethex+0x1d8>
 800dc9e:	492b      	ldr	r1, [pc, #172]	@ (800dd4c <__gethex+0x2b0>)
 800dca0:	9303      	str	r3, [sp, #12]
 800dca2:	2201      	movs	r2, #1
 800dca4:	4630      	mov	r0, r6
 800dca6:	f7fe f996 	bl	800bfd6 <strncmp>
 800dcaa:	9b03      	ldr	r3, [sp, #12]
 800dcac:	2800      	cmp	r0, #0
 800dcae:	d1e1      	bne.n	800dc74 <__gethex+0x1d8>
 800dcb0:	e7a2      	b.n	800dbf8 <__gethex+0x15c>
 800dcb2:	1ea9      	subs	r1, r5, #2
 800dcb4:	4620      	mov	r0, r4
 800dcb6:	f000 feaa 	bl	800ea0e <__any_on>
 800dcba:	2800      	cmp	r0, #0
 800dcbc:	d0c2      	beq.n	800dc44 <__gethex+0x1a8>
 800dcbe:	f04f 0903 	mov.w	r9, #3
 800dcc2:	e7c1      	b.n	800dc48 <__gethex+0x1ac>
 800dcc4:	da09      	bge.n	800dcda <__gethex+0x23e>
 800dcc6:	1b75      	subs	r5, r6, r5
 800dcc8:	4621      	mov	r1, r4
 800dcca:	9801      	ldr	r0, [sp, #4]
 800dccc:	462a      	mov	r2, r5
 800dcce:	f000 fc65 	bl	800e59c <__lshift>
 800dcd2:	1b7f      	subs	r7, r7, r5
 800dcd4:	4604      	mov	r4, r0
 800dcd6:	f100 0a14 	add.w	sl, r0, #20
 800dcda:	f04f 0900 	mov.w	r9, #0
 800dcde:	e7b8      	b.n	800dc52 <__gethex+0x1b6>
 800dce0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800dce4:	42bd      	cmp	r5, r7
 800dce6:	dd6f      	ble.n	800ddc8 <__gethex+0x32c>
 800dce8:	1bed      	subs	r5, r5, r7
 800dcea:	42ae      	cmp	r6, r5
 800dcec:	dc34      	bgt.n	800dd58 <__gethex+0x2bc>
 800dcee:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800dcf2:	2b02      	cmp	r3, #2
 800dcf4:	d022      	beq.n	800dd3c <__gethex+0x2a0>
 800dcf6:	2b03      	cmp	r3, #3
 800dcf8:	d024      	beq.n	800dd44 <__gethex+0x2a8>
 800dcfa:	2b01      	cmp	r3, #1
 800dcfc:	d115      	bne.n	800dd2a <__gethex+0x28e>
 800dcfe:	42ae      	cmp	r6, r5
 800dd00:	d113      	bne.n	800dd2a <__gethex+0x28e>
 800dd02:	2e01      	cmp	r6, #1
 800dd04:	d10b      	bne.n	800dd1e <__gethex+0x282>
 800dd06:	9a02      	ldr	r2, [sp, #8]
 800dd08:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800dd0c:	6013      	str	r3, [r2, #0]
 800dd0e:	2301      	movs	r3, #1
 800dd10:	6123      	str	r3, [r4, #16]
 800dd12:	f8ca 3000 	str.w	r3, [sl]
 800dd16:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800dd18:	2562      	movs	r5, #98	@ 0x62
 800dd1a:	601c      	str	r4, [r3, #0]
 800dd1c:	e73a      	b.n	800db94 <__gethex+0xf8>
 800dd1e:	1e71      	subs	r1, r6, #1
 800dd20:	4620      	mov	r0, r4
 800dd22:	f000 fe74 	bl	800ea0e <__any_on>
 800dd26:	2800      	cmp	r0, #0
 800dd28:	d1ed      	bne.n	800dd06 <__gethex+0x26a>
 800dd2a:	9801      	ldr	r0, [sp, #4]
 800dd2c:	4621      	mov	r1, r4
 800dd2e:	f000 fa1d 	bl	800e16c <_Bfree>
 800dd32:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800dd34:	2300      	movs	r3, #0
 800dd36:	6013      	str	r3, [r2, #0]
 800dd38:	2550      	movs	r5, #80	@ 0x50
 800dd3a:	e72b      	b.n	800db94 <__gethex+0xf8>
 800dd3c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800dd3e:	2b00      	cmp	r3, #0
 800dd40:	d1f3      	bne.n	800dd2a <__gethex+0x28e>
 800dd42:	e7e0      	b.n	800dd06 <__gethex+0x26a>
 800dd44:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800dd46:	2b00      	cmp	r3, #0
 800dd48:	d1dd      	bne.n	800dd06 <__gethex+0x26a>
 800dd4a:	e7ee      	b.n	800dd2a <__gethex+0x28e>
 800dd4c:	08013a19 	.word	0x08013a19
 800dd50:	08013cd8 	.word	0x08013cd8
 800dd54:	08013ce9 	.word	0x08013ce9
 800dd58:	1e6f      	subs	r7, r5, #1
 800dd5a:	f1b9 0f00 	cmp.w	r9, #0
 800dd5e:	d130      	bne.n	800ddc2 <__gethex+0x326>
 800dd60:	b127      	cbz	r7, 800dd6c <__gethex+0x2d0>
 800dd62:	4639      	mov	r1, r7
 800dd64:	4620      	mov	r0, r4
 800dd66:	f000 fe52 	bl	800ea0e <__any_on>
 800dd6a:	4681      	mov	r9, r0
 800dd6c:	117a      	asrs	r2, r7, #5
 800dd6e:	2301      	movs	r3, #1
 800dd70:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800dd74:	f007 071f 	and.w	r7, r7, #31
 800dd78:	40bb      	lsls	r3, r7
 800dd7a:	4213      	tst	r3, r2
 800dd7c:	4629      	mov	r1, r5
 800dd7e:	4620      	mov	r0, r4
 800dd80:	bf18      	it	ne
 800dd82:	f049 0902 	orrne.w	r9, r9, #2
 800dd86:	f7ff fe21 	bl	800d9cc <rshift>
 800dd8a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800dd8e:	1b76      	subs	r6, r6, r5
 800dd90:	2502      	movs	r5, #2
 800dd92:	f1b9 0f00 	cmp.w	r9, #0
 800dd96:	d047      	beq.n	800de28 <__gethex+0x38c>
 800dd98:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800dd9c:	2b02      	cmp	r3, #2
 800dd9e:	d015      	beq.n	800ddcc <__gethex+0x330>
 800dda0:	2b03      	cmp	r3, #3
 800dda2:	d017      	beq.n	800ddd4 <__gethex+0x338>
 800dda4:	2b01      	cmp	r3, #1
 800dda6:	d109      	bne.n	800ddbc <__gethex+0x320>
 800dda8:	f019 0f02 	tst.w	r9, #2
 800ddac:	d006      	beq.n	800ddbc <__gethex+0x320>
 800ddae:	f8da 3000 	ldr.w	r3, [sl]
 800ddb2:	ea49 0903 	orr.w	r9, r9, r3
 800ddb6:	f019 0f01 	tst.w	r9, #1
 800ddba:	d10e      	bne.n	800ddda <__gethex+0x33e>
 800ddbc:	f045 0510 	orr.w	r5, r5, #16
 800ddc0:	e032      	b.n	800de28 <__gethex+0x38c>
 800ddc2:	f04f 0901 	mov.w	r9, #1
 800ddc6:	e7d1      	b.n	800dd6c <__gethex+0x2d0>
 800ddc8:	2501      	movs	r5, #1
 800ddca:	e7e2      	b.n	800dd92 <__gethex+0x2f6>
 800ddcc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ddce:	f1c3 0301 	rsb	r3, r3, #1
 800ddd2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800ddd4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ddd6:	2b00      	cmp	r3, #0
 800ddd8:	d0f0      	beq.n	800ddbc <__gethex+0x320>
 800ddda:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800ddde:	f104 0314 	add.w	r3, r4, #20
 800dde2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800dde6:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800ddea:	f04f 0c00 	mov.w	ip, #0
 800ddee:	4618      	mov	r0, r3
 800ddf0:	f853 2b04 	ldr.w	r2, [r3], #4
 800ddf4:	f1b2 3fff 	cmp.w	r2, #4294967295
 800ddf8:	d01b      	beq.n	800de32 <__gethex+0x396>
 800ddfa:	3201      	adds	r2, #1
 800ddfc:	6002      	str	r2, [r0, #0]
 800ddfe:	2d02      	cmp	r5, #2
 800de00:	f104 0314 	add.w	r3, r4, #20
 800de04:	d13c      	bne.n	800de80 <__gethex+0x3e4>
 800de06:	f8d8 2000 	ldr.w	r2, [r8]
 800de0a:	3a01      	subs	r2, #1
 800de0c:	42b2      	cmp	r2, r6
 800de0e:	d109      	bne.n	800de24 <__gethex+0x388>
 800de10:	1171      	asrs	r1, r6, #5
 800de12:	2201      	movs	r2, #1
 800de14:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800de18:	f006 061f 	and.w	r6, r6, #31
 800de1c:	fa02 f606 	lsl.w	r6, r2, r6
 800de20:	421e      	tst	r6, r3
 800de22:	d13a      	bne.n	800de9a <__gethex+0x3fe>
 800de24:	f045 0520 	orr.w	r5, r5, #32
 800de28:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800de2a:	601c      	str	r4, [r3, #0]
 800de2c:	9b02      	ldr	r3, [sp, #8]
 800de2e:	601f      	str	r7, [r3, #0]
 800de30:	e6b0      	b.n	800db94 <__gethex+0xf8>
 800de32:	4299      	cmp	r1, r3
 800de34:	f843 cc04 	str.w	ip, [r3, #-4]
 800de38:	d8d9      	bhi.n	800ddee <__gethex+0x352>
 800de3a:	68a3      	ldr	r3, [r4, #8]
 800de3c:	459b      	cmp	fp, r3
 800de3e:	db17      	blt.n	800de70 <__gethex+0x3d4>
 800de40:	6861      	ldr	r1, [r4, #4]
 800de42:	9801      	ldr	r0, [sp, #4]
 800de44:	3101      	adds	r1, #1
 800de46:	f000 f951 	bl	800e0ec <_Balloc>
 800de4a:	4681      	mov	r9, r0
 800de4c:	b918      	cbnz	r0, 800de56 <__gethex+0x3ba>
 800de4e:	4b1a      	ldr	r3, [pc, #104]	@ (800deb8 <__gethex+0x41c>)
 800de50:	4602      	mov	r2, r0
 800de52:	2184      	movs	r1, #132	@ 0x84
 800de54:	e6c5      	b.n	800dbe2 <__gethex+0x146>
 800de56:	6922      	ldr	r2, [r4, #16]
 800de58:	3202      	adds	r2, #2
 800de5a:	f104 010c 	add.w	r1, r4, #12
 800de5e:	0092      	lsls	r2, r2, #2
 800de60:	300c      	adds	r0, #12
 800de62:	f7fe fef7 	bl	800cc54 <memcpy>
 800de66:	4621      	mov	r1, r4
 800de68:	9801      	ldr	r0, [sp, #4]
 800de6a:	f000 f97f 	bl	800e16c <_Bfree>
 800de6e:	464c      	mov	r4, r9
 800de70:	6923      	ldr	r3, [r4, #16]
 800de72:	1c5a      	adds	r2, r3, #1
 800de74:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800de78:	6122      	str	r2, [r4, #16]
 800de7a:	2201      	movs	r2, #1
 800de7c:	615a      	str	r2, [r3, #20]
 800de7e:	e7be      	b.n	800ddfe <__gethex+0x362>
 800de80:	6922      	ldr	r2, [r4, #16]
 800de82:	455a      	cmp	r2, fp
 800de84:	dd0b      	ble.n	800de9e <__gethex+0x402>
 800de86:	2101      	movs	r1, #1
 800de88:	4620      	mov	r0, r4
 800de8a:	f7ff fd9f 	bl	800d9cc <rshift>
 800de8e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800de92:	3701      	adds	r7, #1
 800de94:	42bb      	cmp	r3, r7
 800de96:	f6ff aee0 	blt.w	800dc5a <__gethex+0x1be>
 800de9a:	2501      	movs	r5, #1
 800de9c:	e7c2      	b.n	800de24 <__gethex+0x388>
 800de9e:	f016 061f 	ands.w	r6, r6, #31
 800dea2:	d0fa      	beq.n	800de9a <__gethex+0x3fe>
 800dea4:	4453      	add	r3, sl
 800dea6:	f1c6 0620 	rsb	r6, r6, #32
 800deaa:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800deae:	f000 fa0f 	bl	800e2d0 <__hi0bits>
 800deb2:	42b0      	cmp	r0, r6
 800deb4:	dbe7      	blt.n	800de86 <__gethex+0x3ea>
 800deb6:	e7f0      	b.n	800de9a <__gethex+0x3fe>
 800deb8:	08013cd8 	.word	0x08013cd8

0800debc <L_shift>:
 800debc:	f1c2 0208 	rsb	r2, r2, #8
 800dec0:	0092      	lsls	r2, r2, #2
 800dec2:	b570      	push	{r4, r5, r6, lr}
 800dec4:	f1c2 0620 	rsb	r6, r2, #32
 800dec8:	6843      	ldr	r3, [r0, #4]
 800deca:	6804      	ldr	r4, [r0, #0]
 800decc:	fa03 f506 	lsl.w	r5, r3, r6
 800ded0:	432c      	orrs	r4, r5
 800ded2:	40d3      	lsrs	r3, r2
 800ded4:	6004      	str	r4, [r0, #0]
 800ded6:	f840 3f04 	str.w	r3, [r0, #4]!
 800deda:	4288      	cmp	r0, r1
 800dedc:	d3f4      	bcc.n	800dec8 <L_shift+0xc>
 800dede:	bd70      	pop	{r4, r5, r6, pc}

0800dee0 <__match>:
 800dee0:	b530      	push	{r4, r5, lr}
 800dee2:	6803      	ldr	r3, [r0, #0]
 800dee4:	3301      	adds	r3, #1
 800dee6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800deea:	b914      	cbnz	r4, 800def2 <__match+0x12>
 800deec:	6003      	str	r3, [r0, #0]
 800deee:	2001      	movs	r0, #1
 800def0:	bd30      	pop	{r4, r5, pc}
 800def2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800def6:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800defa:	2d19      	cmp	r5, #25
 800defc:	bf98      	it	ls
 800defe:	3220      	addls	r2, #32
 800df00:	42a2      	cmp	r2, r4
 800df02:	d0f0      	beq.n	800dee6 <__match+0x6>
 800df04:	2000      	movs	r0, #0
 800df06:	e7f3      	b.n	800def0 <__match+0x10>

0800df08 <__hexnan>:
 800df08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df0c:	680b      	ldr	r3, [r1, #0]
 800df0e:	6801      	ldr	r1, [r0, #0]
 800df10:	115e      	asrs	r6, r3, #5
 800df12:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800df16:	f013 031f 	ands.w	r3, r3, #31
 800df1a:	b087      	sub	sp, #28
 800df1c:	bf18      	it	ne
 800df1e:	3604      	addne	r6, #4
 800df20:	2500      	movs	r5, #0
 800df22:	1f37      	subs	r7, r6, #4
 800df24:	4682      	mov	sl, r0
 800df26:	4690      	mov	r8, r2
 800df28:	9301      	str	r3, [sp, #4]
 800df2a:	f846 5c04 	str.w	r5, [r6, #-4]
 800df2e:	46b9      	mov	r9, r7
 800df30:	463c      	mov	r4, r7
 800df32:	9502      	str	r5, [sp, #8]
 800df34:	46ab      	mov	fp, r5
 800df36:	784a      	ldrb	r2, [r1, #1]
 800df38:	1c4b      	adds	r3, r1, #1
 800df3a:	9303      	str	r3, [sp, #12]
 800df3c:	b342      	cbz	r2, 800df90 <__hexnan+0x88>
 800df3e:	4610      	mov	r0, r2
 800df40:	9105      	str	r1, [sp, #20]
 800df42:	9204      	str	r2, [sp, #16]
 800df44:	f7ff fd94 	bl	800da70 <__hexdig_fun>
 800df48:	2800      	cmp	r0, #0
 800df4a:	d151      	bne.n	800dff0 <__hexnan+0xe8>
 800df4c:	9a04      	ldr	r2, [sp, #16]
 800df4e:	9905      	ldr	r1, [sp, #20]
 800df50:	2a20      	cmp	r2, #32
 800df52:	d818      	bhi.n	800df86 <__hexnan+0x7e>
 800df54:	9b02      	ldr	r3, [sp, #8]
 800df56:	459b      	cmp	fp, r3
 800df58:	dd13      	ble.n	800df82 <__hexnan+0x7a>
 800df5a:	454c      	cmp	r4, r9
 800df5c:	d206      	bcs.n	800df6c <__hexnan+0x64>
 800df5e:	2d07      	cmp	r5, #7
 800df60:	dc04      	bgt.n	800df6c <__hexnan+0x64>
 800df62:	462a      	mov	r2, r5
 800df64:	4649      	mov	r1, r9
 800df66:	4620      	mov	r0, r4
 800df68:	f7ff ffa8 	bl	800debc <L_shift>
 800df6c:	4544      	cmp	r4, r8
 800df6e:	d952      	bls.n	800e016 <__hexnan+0x10e>
 800df70:	2300      	movs	r3, #0
 800df72:	f1a4 0904 	sub.w	r9, r4, #4
 800df76:	f844 3c04 	str.w	r3, [r4, #-4]
 800df7a:	f8cd b008 	str.w	fp, [sp, #8]
 800df7e:	464c      	mov	r4, r9
 800df80:	461d      	mov	r5, r3
 800df82:	9903      	ldr	r1, [sp, #12]
 800df84:	e7d7      	b.n	800df36 <__hexnan+0x2e>
 800df86:	2a29      	cmp	r2, #41	@ 0x29
 800df88:	d157      	bne.n	800e03a <__hexnan+0x132>
 800df8a:	3102      	adds	r1, #2
 800df8c:	f8ca 1000 	str.w	r1, [sl]
 800df90:	f1bb 0f00 	cmp.w	fp, #0
 800df94:	d051      	beq.n	800e03a <__hexnan+0x132>
 800df96:	454c      	cmp	r4, r9
 800df98:	d206      	bcs.n	800dfa8 <__hexnan+0xa0>
 800df9a:	2d07      	cmp	r5, #7
 800df9c:	dc04      	bgt.n	800dfa8 <__hexnan+0xa0>
 800df9e:	462a      	mov	r2, r5
 800dfa0:	4649      	mov	r1, r9
 800dfa2:	4620      	mov	r0, r4
 800dfa4:	f7ff ff8a 	bl	800debc <L_shift>
 800dfa8:	4544      	cmp	r4, r8
 800dfaa:	d936      	bls.n	800e01a <__hexnan+0x112>
 800dfac:	f1a8 0204 	sub.w	r2, r8, #4
 800dfb0:	4623      	mov	r3, r4
 800dfb2:	f853 1b04 	ldr.w	r1, [r3], #4
 800dfb6:	f842 1f04 	str.w	r1, [r2, #4]!
 800dfba:	429f      	cmp	r7, r3
 800dfbc:	d2f9      	bcs.n	800dfb2 <__hexnan+0xaa>
 800dfbe:	1b3b      	subs	r3, r7, r4
 800dfc0:	f023 0303 	bic.w	r3, r3, #3
 800dfc4:	3304      	adds	r3, #4
 800dfc6:	3401      	adds	r4, #1
 800dfc8:	3e03      	subs	r6, #3
 800dfca:	42b4      	cmp	r4, r6
 800dfcc:	bf88      	it	hi
 800dfce:	2304      	movhi	r3, #4
 800dfd0:	4443      	add	r3, r8
 800dfd2:	2200      	movs	r2, #0
 800dfd4:	f843 2b04 	str.w	r2, [r3], #4
 800dfd8:	429f      	cmp	r7, r3
 800dfda:	d2fb      	bcs.n	800dfd4 <__hexnan+0xcc>
 800dfdc:	683b      	ldr	r3, [r7, #0]
 800dfde:	b91b      	cbnz	r3, 800dfe8 <__hexnan+0xe0>
 800dfe0:	4547      	cmp	r7, r8
 800dfe2:	d128      	bne.n	800e036 <__hexnan+0x12e>
 800dfe4:	2301      	movs	r3, #1
 800dfe6:	603b      	str	r3, [r7, #0]
 800dfe8:	2005      	movs	r0, #5
 800dfea:	b007      	add	sp, #28
 800dfec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dff0:	3501      	adds	r5, #1
 800dff2:	2d08      	cmp	r5, #8
 800dff4:	f10b 0b01 	add.w	fp, fp, #1
 800dff8:	dd06      	ble.n	800e008 <__hexnan+0x100>
 800dffa:	4544      	cmp	r4, r8
 800dffc:	d9c1      	bls.n	800df82 <__hexnan+0x7a>
 800dffe:	2300      	movs	r3, #0
 800e000:	f844 3c04 	str.w	r3, [r4, #-4]
 800e004:	2501      	movs	r5, #1
 800e006:	3c04      	subs	r4, #4
 800e008:	6822      	ldr	r2, [r4, #0]
 800e00a:	f000 000f 	and.w	r0, r0, #15
 800e00e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800e012:	6020      	str	r0, [r4, #0]
 800e014:	e7b5      	b.n	800df82 <__hexnan+0x7a>
 800e016:	2508      	movs	r5, #8
 800e018:	e7b3      	b.n	800df82 <__hexnan+0x7a>
 800e01a:	9b01      	ldr	r3, [sp, #4]
 800e01c:	2b00      	cmp	r3, #0
 800e01e:	d0dd      	beq.n	800dfdc <__hexnan+0xd4>
 800e020:	f1c3 0320 	rsb	r3, r3, #32
 800e024:	f04f 32ff 	mov.w	r2, #4294967295
 800e028:	40da      	lsrs	r2, r3
 800e02a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800e02e:	4013      	ands	r3, r2
 800e030:	f846 3c04 	str.w	r3, [r6, #-4]
 800e034:	e7d2      	b.n	800dfdc <__hexnan+0xd4>
 800e036:	3f04      	subs	r7, #4
 800e038:	e7d0      	b.n	800dfdc <__hexnan+0xd4>
 800e03a:	2004      	movs	r0, #4
 800e03c:	e7d5      	b.n	800dfea <__hexnan+0xe2>
	...

0800e040 <_findenv_r>:
 800e040:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e044:	f8df a06c 	ldr.w	sl, [pc, #108]	@ 800e0b4 <_findenv_r+0x74>
 800e048:	4606      	mov	r6, r0
 800e04a:	4689      	mov	r9, r1
 800e04c:	4617      	mov	r7, r2
 800e04e:	f001 fb67 	bl	800f720 <__env_lock>
 800e052:	f8da 4000 	ldr.w	r4, [sl]
 800e056:	b134      	cbz	r4, 800e066 <_findenv_r+0x26>
 800e058:	464b      	mov	r3, r9
 800e05a:	4698      	mov	r8, r3
 800e05c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e060:	b13a      	cbz	r2, 800e072 <_findenv_r+0x32>
 800e062:	2a3d      	cmp	r2, #61	@ 0x3d
 800e064:	d1f9      	bne.n	800e05a <_findenv_r+0x1a>
 800e066:	4630      	mov	r0, r6
 800e068:	f001 fb60 	bl	800f72c <__env_unlock>
 800e06c:	2000      	movs	r0, #0
 800e06e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e072:	eba8 0809 	sub.w	r8, r8, r9
 800e076:	46a3      	mov	fp, r4
 800e078:	f854 0b04 	ldr.w	r0, [r4], #4
 800e07c:	2800      	cmp	r0, #0
 800e07e:	d0f2      	beq.n	800e066 <_findenv_r+0x26>
 800e080:	4642      	mov	r2, r8
 800e082:	4649      	mov	r1, r9
 800e084:	f7fd ffa7 	bl	800bfd6 <strncmp>
 800e088:	2800      	cmp	r0, #0
 800e08a:	d1f4      	bne.n	800e076 <_findenv_r+0x36>
 800e08c:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800e090:	eb03 0508 	add.w	r5, r3, r8
 800e094:	f813 3008 	ldrb.w	r3, [r3, r8]
 800e098:	2b3d      	cmp	r3, #61	@ 0x3d
 800e09a:	d1ec      	bne.n	800e076 <_findenv_r+0x36>
 800e09c:	f8da 3000 	ldr.w	r3, [sl]
 800e0a0:	ebab 0303 	sub.w	r3, fp, r3
 800e0a4:	109b      	asrs	r3, r3, #2
 800e0a6:	4630      	mov	r0, r6
 800e0a8:	603b      	str	r3, [r7, #0]
 800e0aa:	f001 fb3f 	bl	800f72c <__env_unlock>
 800e0ae:	1c68      	adds	r0, r5, #1
 800e0b0:	e7dd      	b.n	800e06e <_findenv_r+0x2e>
 800e0b2:	bf00      	nop
 800e0b4:	20000010 	.word	0x20000010

0800e0b8 <_getenv_r>:
 800e0b8:	b507      	push	{r0, r1, r2, lr}
 800e0ba:	aa01      	add	r2, sp, #4
 800e0bc:	f7ff ffc0 	bl	800e040 <_findenv_r>
 800e0c0:	b003      	add	sp, #12
 800e0c2:	f85d fb04 	ldr.w	pc, [sp], #4

0800e0c6 <__ascii_mbtowc>:
 800e0c6:	b082      	sub	sp, #8
 800e0c8:	b901      	cbnz	r1, 800e0cc <__ascii_mbtowc+0x6>
 800e0ca:	a901      	add	r1, sp, #4
 800e0cc:	b142      	cbz	r2, 800e0e0 <__ascii_mbtowc+0x1a>
 800e0ce:	b14b      	cbz	r3, 800e0e4 <__ascii_mbtowc+0x1e>
 800e0d0:	7813      	ldrb	r3, [r2, #0]
 800e0d2:	600b      	str	r3, [r1, #0]
 800e0d4:	7812      	ldrb	r2, [r2, #0]
 800e0d6:	1e10      	subs	r0, r2, #0
 800e0d8:	bf18      	it	ne
 800e0da:	2001      	movne	r0, #1
 800e0dc:	b002      	add	sp, #8
 800e0de:	4770      	bx	lr
 800e0e0:	4610      	mov	r0, r2
 800e0e2:	e7fb      	b.n	800e0dc <__ascii_mbtowc+0x16>
 800e0e4:	f06f 0001 	mvn.w	r0, #1
 800e0e8:	e7f8      	b.n	800e0dc <__ascii_mbtowc+0x16>
	...

0800e0ec <_Balloc>:
 800e0ec:	b570      	push	{r4, r5, r6, lr}
 800e0ee:	69c6      	ldr	r6, [r0, #28]
 800e0f0:	4604      	mov	r4, r0
 800e0f2:	460d      	mov	r5, r1
 800e0f4:	b976      	cbnz	r6, 800e114 <_Balloc+0x28>
 800e0f6:	2010      	movs	r0, #16
 800e0f8:	f7fb ffd4 	bl	800a0a4 <malloc>
 800e0fc:	4602      	mov	r2, r0
 800e0fe:	61e0      	str	r0, [r4, #28]
 800e100:	b920      	cbnz	r0, 800e10c <_Balloc+0x20>
 800e102:	4b18      	ldr	r3, [pc, #96]	@ (800e164 <_Balloc+0x78>)
 800e104:	4818      	ldr	r0, [pc, #96]	@ (800e168 <_Balloc+0x7c>)
 800e106:	216b      	movs	r1, #107	@ 0x6b
 800e108:	f001 fad8 	bl	800f6bc <__assert_func>
 800e10c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e110:	6006      	str	r6, [r0, #0]
 800e112:	60c6      	str	r6, [r0, #12]
 800e114:	69e6      	ldr	r6, [r4, #28]
 800e116:	68f3      	ldr	r3, [r6, #12]
 800e118:	b183      	cbz	r3, 800e13c <_Balloc+0x50>
 800e11a:	69e3      	ldr	r3, [r4, #28]
 800e11c:	68db      	ldr	r3, [r3, #12]
 800e11e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e122:	b9b8      	cbnz	r0, 800e154 <_Balloc+0x68>
 800e124:	2101      	movs	r1, #1
 800e126:	fa01 f605 	lsl.w	r6, r1, r5
 800e12a:	1d72      	adds	r2, r6, #5
 800e12c:	0092      	lsls	r2, r2, #2
 800e12e:	4620      	mov	r0, r4
 800e130:	f001 fae2 	bl	800f6f8 <_calloc_r>
 800e134:	b160      	cbz	r0, 800e150 <_Balloc+0x64>
 800e136:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800e13a:	e00e      	b.n	800e15a <_Balloc+0x6e>
 800e13c:	2221      	movs	r2, #33	@ 0x21
 800e13e:	2104      	movs	r1, #4
 800e140:	4620      	mov	r0, r4
 800e142:	f001 fad9 	bl	800f6f8 <_calloc_r>
 800e146:	69e3      	ldr	r3, [r4, #28]
 800e148:	60f0      	str	r0, [r6, #12]
 800e14a:	68db      	ldr	r3, [r3, #12]
 800e14c:	2b00      	cmp	r3, #0
 800e14e:	d1e4      	bne.n	800e11a <_Balloc+0x2e>
 800e150:	2000      	movs	r0, #0
 800e152:	bd70      	pop	{r4, r5, r6, pc}
 800e154:	6802      	ldr	r2, [r0, #0]
 800e156:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e15a:	2300      	movs	r3, #0
 800e15c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e160:	e7f7      	b.n	800e152 <_Balloc+0x66>
 800e162:	bf00      	nop
 800e164:	08013c69 	.word	0x08013c69
 800e168:	08013d49 	.word	0x08013d49

0800e16c <_Bfree>:
 800e16c:	b570      	push	{r4, r5, r6, lr}
 800e16e:	69c6      	ldr	r6, [r0, #28]
 800e170:	4605      	mov	r5, r0
 800e172:	460c      	mov	r4, r1
 800e174:	b976      	cbnz	r6, 800e194 <_Bfree+0x28>
 800e176:	2010      	movs	r0, #16
 800e178:	f7fb ff94 	bl	800a0a4 <malloc>
 800e17c:	4602      	mov	r2, r0
 800e17e:	61e8      	str	r0, [r5, #28]
 800e180:	b920      	cbnz	r0, 800e18c <_Bfree+0x20>
 800e182:	4b09      	ldr	r3, [pc, #36]	@ (800e1a8 <_Bfree+0x3c>)
 800e184:	4809      	ldr	r0, [pc, #36]	@ (800e1ac <_Bfree+0x40>)
 800e186:	218f      	movs	r1, #143	@ 0x8f
 800e188:	f001 fa98 	bl	800f6bc <__assert_func>
 800e18c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e190:	6006      	str	r6, [r0, #0]
 800e192:	60c6      	str	r6, [r0, #12]
 800e194:	b13c      	cbz	r4, 800e1a6 <_Bfree+0x3a>
 800e196:	69eb      	ldr	r3, [r5, #28]
 800e198:	6862      	ldr	r2, [r4, #4]
 800e19a:	68db      	ldr	r3, [r3, #12]
 800e19c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e1a0:	6021      	str	r1, [r4, #0]
 800e1a2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e1a6:	bd70      	pop	{r4, r5, r6, pc}
 800e1a8:	08013c69 	.word	0x08013c69
 800e1ac:	08013d49 	.word	0x08013d49

0800e1b0 <__multadd>:
 800e1b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e1b4:	690d      	ldr	r5, [r1, #16]
 800e1b6:	4607      	mov	r7, r0
 800e1b8:	460c      	mov	r4, r1
 800e1ba:	461e      	mov	r6, r3
 800e1bc:	f101 0c14 	add.w	ip, r1, #20
 800e1c0:	2000      	movs	r0, #0
 800e1c2:	f8dc 3000 	ldr.w	r3, [ip]
 800e1c6:	b299      	uxth	r1, r3
 800e1c8:	fb02 6101 	mla	r1, r2, r1, r6
 800e1cc:	0c1e      	lsrs	r6, r3, #16
 800e1ce:	0c0b      	lsrs	r3, r1, #16
 800e1d0:	fb02 3306 	mla	r3, r2, r6, r3
 800e1d4:	b289      	uxth	r1, r1
 800e1d6:	3001      	adds	r0, #1
 800e1d8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800e1dc:	4285      	cmp	r5, r0
 800e1de:	f84c 1b04 	str.w	r1, [ip], #4
 800e1e2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800e1e6:	dcec      	bgt.n	800e1c2 <__multadd+0x12>
 800e1e8:	b30e      	cbz	r6, 800e22e <__multadd+0x7e>
 800e1ea:	68a3      	ldr	r3, [r4, #8]
 800e1ec:	42ab      	cmp	r3, r5
 800e1ee:	dc19      	bgt.n	800e224 <__multadd+0x74>
 800e1f0:	6861      	ldr	r1, [r4, #4]
 800e1f2:	4638      	mov	r0, r7
 800e1f4:	3101      	adds	r1, #1
 800e1f6:	f7ff ff79 	bl	800e0ec <_Balloc>
 800e1fa:	4680      	mov	r8, r0
 800e1fc:	b928      	cbnz	r0, 800e20a <__multadd+0x5a>
 800e1fe:	4602      	mov	r2, r0
 800e200:	4b0c      	ldr	r3, [pc, #48]	@ (800e234 <__multadd+0x84>)
 800e202:	480d      	ldr	r0, [pc, #52]	@ (800e238 <__multadd+0x88>)
 800e204:	21ba      	movs	r1, #186	@ 0xba
 800e206:	f001 fa59 	bl	800f6bc <__assert_func>
 800e20a:	6922      	ldr	r2, [r4, #16]
 800e20c:	3202      	adds	r2, #2
 800e20e:	f104 010c 	add.w	r1, r4, #12
 800e212:	0092      	lsls	r2, r2, #2
 800e214:	300c      	adds	r0, #12
 800e216:	f7fe fd1d 	bl	800cc54 <memcpy>
 800e21a:	4621      	mov	r1, r4
 800e21c:	4638      	mov	r0, r7
 800e21e:	f7ff ffa5 	bl	800e16c <_Bfree>
 800e222:	4644      	mov	r4, r8
 800e224:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e228:	3501      	adds	r5, #1
 800e22a:	615e      	str	r6, [r3, #20]
 800e22c:	6125      	str	r5, [r4, #16]
 800e22e:	4620      	mov	r0, r4
 800e230:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e234:	08013cd8 	.word	0x08013cd8
 800e238:	08013d49 	.word	0x08013d49

0800e23c <__s2b>:
 800e23c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e240:	460c      	mov	r4, r1
 800e242:	4615      	mov	r5, r2
 800e244:	461f      	mov	r7, r3
 800e246:	2209      	movs	r2, #9
 800e248:	3308      	adds	r3, #8
 800e24a:	4606      	mov	r6, r0
 800e24c:	fb93 f3f2 	sdiv	r3, r3, r2
 800e250:	2100      	movs	r1, #0
 800e252:	2201      	movs	r2, #1
 800e254:	429a      	cmp	r2, r3
 800e256:	db09      	blt.n	800e26c <__s2b+0x30>
 800e258:	4630      	mov	r0, r6
 800e25a:	f7ff ff47 	bl	800e0ec <_Balloc>
 800e25e:	b940      	cbnz	r0, 800e272 <__s2b+0x36>
 800e260:	4602      	mov	r2, r0
 800e262:	4b19      	ldr	r3, [pc, #100]	@ (800e2c8 <__s2b+0x8c>)
 800e264:	4819      	ldr	r0, [pc, #100]	@ (800e2cc <__s2b+0x90>)
 800e266:	21d3      	movs	r1, #211	@ 0xd3
 800e268:	f001 fa28 	bl	800f6bc <__assert_func>
 800e26c:	0052      	lsls	r2, r2, #1
 800e26e:	3101      	adds	r1, #1
 800e270:	e7f0      	b.n	800e254 <__s2b+0x18>
 800e272:	9b08      	ldr	r3, [sp, #32]
 800e274:	6143      	str	r3, [r0, #20]
 800e276:	2d09      	cmp	r5, #9
 800e278:	f04f 0301 	mov.w	r3, #1
 800e27c:	6103      	str	r3, [r0, #16]
 800e27e:	dd16      	ble.n	800e2ae <__s2b+0x72>
 800e280:	f104 0909 	add.w	r9, r4, #9
 800e284:	46c8      	mov	r8, r9
 800e286:	442c      	add	r4, r5
 800e288:	f818 3b01 	ldrb.w	r3, [r8], #1
 800e28c:	4601      	mov	r1, r0
 800e28e:	3b30      	subs	r3, #48	@ 0x30
 800e290:	220a      	movs	r2, #10
 800e292:	4630      	mov	r0, r6
 800e294:	f7ff ff8c 	bl	800e1b0 <__multadd>
 800e298:	45a0      	cmp	r8, r4
 800e29a:	d1f5      	bne.n	800e288 <__s2b+0x4c>
 800e29c:	f1a5 0408 	sub.w	r4, r5, #8
 800e2a0:	444c      	add	r4, r9
 800e2a2:	1b2d      	subs	r5, r5, r4
 800e2a4:	1963      	adds	r3, r4, r5
 800e2a6:	42bb      	cmp	r3, r7
 800e2a8:	db04      	blt.n	800e2b4 <__s2b+0x78>
 800e2aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e2ae:	340a      	adds	r4, #10
 800e2b0:	2509      	movs	r5, #9
 800e2b2:	e7f6      	b.n	800e2a2 <__s2b+0x66>
 800e2b4:	f814 3b01 	ldrb.w	r3, [r4], #1
 800e2b8:	4601      	mov	r1, r0
 800e2ba:	3b30      	subs	r3, #48	@ 0x30
 800e2bc:	220a      	movs	r2, #10
 800e2be:	4630      	mov	r0, r6
 800e2c0:	f7ff ff76 	bl	800e1b0 <__multadd>
 800e2c4:	e7ee      	b.n	800e2a4 <__s2b+0x68>
 800e2c6:	bf00      	nop
 800e2c8:	08013cd8 	.word	0x08013cd8
 800e2cc:	08013d49 	.word	0x08013d49

0800e2d0 <__hi0bits>:
 800e2d0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800e2d4:	4603      	mov	r3, r0
 800e2d6:	bf36      	itet	cc
 800e2d8:	0403      	lslcc	r3, r0, #16
 800e2da:	2000      	movcs	r0, #0
 800e2dc:	2010      	movcc	r0, #16
 800e2de:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800e2e2:	bf3c      	itt	cc
 800e2e4:	021b      	lslcc	r3, r3, #8
 800e2e6:	3008      	addcc	r0, #8
 800e2e8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800e2ec:	bf3c      	itt	cc
 800e2ee:	011b      	lslcc	r3, r3, #4
 800e2f0:	3004      	addcc	r0, #4
 800e2f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e2f6:	bf3c      	itt	cc
 800e2f8:	009b      	lslcc	r3, r3, #2
 800e2fa:	3002      	addcc	r0, #2
 800e2fc:	2b00      	cmp	r3, #0
 800e2fe:	db05      	blt.n	800e30c <__hi0bits+0x3c>
 800e300:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800e304:	f100 0001 	add.w	r0, r0, #1
 800e308:	bf08      	it	eq
 800e30a:	2020      	moveq	r0, #32
 800e30c:	4770      	bx	lr

0800e30e <__lo0bits>:
 800e30e:	6803      	ldr	r3, [r0, #0]
 800e310:	4602      	mov	r2, r0
 800e312:	f013 0007 	ands.w	r0, r3, #7
 800e316:	d00b      	beq.n	800e330 <__lo0bits+0x22>
 800e318:	07d9      	lsls	r1, r3, #31
 800e31a:	d421      	bmi.n	800e360 <__lo0bits+0x52>
 800e31c:	0798      	lsls	r0, r3, #30
 800e31e:	bf49      	itett	mi
 800e320:	085b      	lsrmi	r3, r3, #1
 800e322:	089b      	lsrpl	r3, r3, #2
 800e324:	2001      	movmi	r0, #1
 800e326:	6013      	strmi	r3, [r2, #0]
 800e328:	bf5c      	itt	pl
 800e32a:	6013      	strpl	r3, [r2, #0]
 800e32c:	2002      	movpl	r0, #2
 800e32e:	4770      	bx	lr
 800e330:	b299      	uxth	r1, r3
 800e332:	b909      	cbnz	r1, 800e338 <__lo0bits+0x2a>
 800e334:	0c1b      	lsrs	r3, r3, #16
 800e336:	2010      	movs	r0, #16
 800e338:	b2d9      	uxtb	r1, r3
 800e33a:	b909      	cbnz	r1, 800e340 <__lo0bits+0x32>
 800e33c:	3008      	adds	r0, #8
 800e33e:	0a1b      	lsrs	r3, r3, #8
 800e340:	0719      	lsls	r1, r3, #28
 800e342:	bf04      	itt	eq
 800e344:	091b      	lsreq	r3, r3, #4
 800e346:	3004      	addeq	r0, #4
 800e348:	0799      	lsls	r1, r3, #30
 800e34a:	bf04      	itt	eq
 800e34c:	089b      	lsreq	r3, r3, #2
 800e34e:	3002      	addeq	r0, #2
 800e350:	07d9      	lsls	r1, r3, #31
 800e352:	d403      	bmi.n	800e35c <__lo0bits+0x4e>
 800e354:	085b      	lsrs	r3, r3, #1
 800e356:	f100 0001 	add.w	r0, r0, #1
 800e35a:	d003      	beq.n	800e364 <__lo0bits+0x56>
 800e35c:	6013      	str	r3, [r2, #0]
 800e35e:	4770      	bx	lr
 800e360:	2000      	movs	r0, #0
 800e362:	4770      	bx	lr
 800e364:	2020      	movs	r0, #32
 800e366:	4770      	bx	lr

0800e368 <__i2b>:
 800e368:	b510      	push	{r4, lr}
 800e36a:	460c      	mov	r4, r1
 800e36c:	2101      	movs	r1, #1
 800e36e:	f7ff febd 	bl	800e0ec <_Balloc>
 800e372:	4602      	mov	r2, r0
 800e374:	b928      	cbnz	r0, 800e382 <__i2b+0x1a>
 800e376:	4b05      	ldr	r3, [pc, #20]	@ (800e38c <__i2b+0x24>)
 800e378:	4805      	ldr	r0, [pc, #20]	@ (800e390 <__i2b+0x28>)
 800e37a:	f240 1145 	movw	r1, #325	@ 0x145
 800e37e:	f001 f99d 	bl	800f6bc <__assert_func>
 800e382:	2301      	movs	r3, #1
 800e384:	6144      	str	r4, [r0, #20]
 800e386:	6103      	str	r3, [r0, #16]
 800e388:	bd10      	pop	{r4, pc}
 800e38a:	bf00      	nop
 800e38c:	08013cd8 	.word	0x08013cd8
 800e390:	08013d49 	.word	0x08013d49

0800e394 <__multiply>:
 800e394:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e398:	4614      	mov	r4, r2
 800e39a:	690a      	ldr	r2, [r1, #16]
 800e39c:	6923      	ldr	r3, [r4, #16]
 800e39e:	429a      	cmp	r2, r3
 800e3a0:	bfa8      	it	ge
 800e3a2:	4623      	movge	r3, r4
 800e3a4:	460f      	mov	r7, r1
 800e3a6:	bfa4      	itt	ge
 800e3a8:	460c      	movge	r4, r1
 800e3aa:	461f      	movge	r7, r3
 800e3ac:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800e3b0:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800e3b4:	68a3      	ldr	r3, [r4, #8]
 800e3b6:	6861      	ldr	r1, [r4, #4]
 800e3b8:	eb0a 0609 	add.w	r6, sl, r9
 800e3bc:	42b3      	cmp	r3, r6
 800e3be:	b085      	sub	sp, #20
 800e3c0:	bfb8      	it	lt
 800e3c2:	3101      	addlt	r1, #1
 800e3c4:	f7ff fe92 	bl	800e0ec <_Balloc>
 800e3c8:	b930      	cbnz	r0, 800e3d8 <__multiply+0x44>
 800e3ca:	4602      	mov	r2, r0
 800e3cc:	4b44      	ldr	r3, [pc, #272]	@ (800e4e0 <__multiply+0x14c>)
 800e3ce:	4845      	ldr	r0, [pc, #276]	@ (800e4e4 <__multiply+0x150>)
 800e3d0:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800e3d4:	f001 f972 	bl	800f6bc <__assert_func>
 800e3d8:	f100 0514 	add.w	r5, r0, #20
 800e3dc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800e3e0:	462b      	mov	r3, r5
 800e3e2:	2200      	movs	r2, #0
 800e3e4:	4543      	cmp	r3, r8
 800e3e6:	d321      	bcc.n	800e42c <__multiply+0x98>
 800e3e8:	f107 0114 	add.w	r1, r7, #20
 800e3ec:	f104 0214 	add.w	r2, r4, #20
 800e3f0:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800e3f4:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800e3f8:	9302      	str	r3, [sp, #8]
 800e3fa:	1b13      	subs	r3, r2, r4
 800e3fc:	3b15      	subs	r3, #21
 800e3fe:	f023 0303 	bic.w	r3, r3, #3
 800e402:	3304      	adds	r3, #4
 800e404:	f104 0715 	add.w	r7, r4, #21
 800e408:	42ba      	cmp	r2, r7
 800e40a:	bf38      	it	cc
 800e40c:	2304      	movcc	r3, #4
 800e40e:	9301      	str	r3, [sp, #4]
 800e410:	9b02      	ldr	r3, [sp, #8]
 800e412:	9103      	str	r1, [sp, #12]
 800e414:	428b      	cmp	r3, r1
 800e416:	d80c      	bhi.n	800e432 <__multiply+0x9e>
 800e418:	2e00      	cmp	r6, #0
 800e41a:	dd03      	ble.n	800e424 <__multiply+0x90>
 800e41c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800e420:	2b00      	cmp	r3, #0
 800e422:	d05b      	beq.n	800e4dc <__multiply+0x148>
 800e424:	6106      	str	r6, [r0, #16]
 800e426:	b005      	add	sp, #20
 800e428:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e42c:	f843 2b04 	str.w	r2, [r3], #4
 800e430:	e7d8      	b.n	800e3e4 <__multiply+0x50>
 800e432:	f8b1 a000 	ldrh.w	sl, [r1]
 800e436:	f1ba 0f00 	cmp.w	sl, #0
 800e43a:	d024      	beq.n	800e486 <__multiply+0xf2>
 800e43c:	f104 0e14 	add.w	lr, r4, #20
 800e440:	46a9      	mov	r9, r5
 800e442:	f04f 0c00 	mov.w	ip, #0
 800e446:	f85e 7b04 	ldr.w	r7, [lr], #4
 800e44a:	f8d9 3000 	ldr.w	r3, [r9]
 800e44e:	fa1f fb87 	uxth.w	fp, r7
 800e452:	b29b      	uxth	r3, r3
 800e454:	fb0a 330b 	mla	r3, sl, fp, r3
 800e458:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800e45c:	f8d9 7000 	ldr.w	r7, [r9]
 800e460:	4463      	add	r3, ip
 800e462:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800e466:	fb0a c70b 	mla	r7, sl, fp, ip
 800e46a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800e46e:	b29b      	uxth	r3, r3
 800e470:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800e474:	4572      	cmp	r2, lr
 800e476:	f849 3b04 	str.w	r3, [r9], #4
 800e47a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800e47e:	d8e2      	bhi.n	800e446 <__multiply+0xb2>
 800e480:	9b01      	ldr	r3, [sp, #4]
 800e482:	f845 c003 	str.w	ip, [r5, r3]
 800e486:	9b03      	ldr	r3, [sp, #12]
 800e488:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800e48c:	3104      	adds	r1, #4
 800e48e:	f1b9 0f00 	cmp.w	r9, #0
 800e492:	d021      	beq.n	800e4d8 <__multiply+0x144>
 800e494:	682b      	ldr	r3, [r5, #0]
 800e496:	f104 0c14 	add.w	ip, r4, #20
 800e49a:	46ae      	mov	lr, r5
 800e49c:	f04f 0a00 	mov.w	sl, #0
 800e4a0:	f8bc b000 	ldrh.w	fp, [ip]
 800e4a4:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800e4a8:	fb09 770b 	mla	r7, r9, fp, r7
 800e4ac:	4457      	add	r7, sl
 800e4ae:	b29b      	uxth	r3, r3
 800e4b0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800e4b4:	f84e 3b04 	str.w	r3, [lr], #4
 800e4b8:	f85c 3b04 	ldr.w	r3, [ip], #4
 800e4bc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e4c0:	f8be 3000 	ldrh.w	r3, [lr]
 800e4c4:	fb09 330a 	mla	r3, r9, sl, r3
 800e4c8:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800e4cc:	4562      	cmp	r2, ip
 800e4ce:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e4d2:	d8e5      	bhi.n	800e4a0 <__multiply+0x10c>
 800e4d4:	9f01      	ldr	r7, [sp, #4]
 800e4d6:	51eb      	str	r3, [r5, r7]
 800e4d8:	3504      	adds	r5, #4
 800e4da:	e799      	b.n	800e410 <__multiply+0x7c>
 800e4dc:	3e01      	subs	r6, #1
 800e4de:	e79b      	b.n	800e418 <__multiply+0x84>
 800e4e0:	08013cd8 	.word	0x08013cd8
 800e4e4:	08013d49 	.word	0x08013d49

0800e4e8 <__pow5mult>:
 800e4e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e4ec:	4615      	mov	r5, r2
 800e4ee:	f012 0203 	ands.w	r2, r2, #3
 800e4f2:	4607      	mov	r7, r0
 800e4f4:	460e      	mov	r6, r1
 800e4f6:	d007      	beq.n	800e508 <__pow5mult+0x20>
 800e4f8:	4c25      	ldr	r4, [pc, #148]	@ (800e590 <__pow5mult+0xa8>)
 800e4fa:	3a01      	subs	r2, #1
 800e4fc:	2300      	movs	r3, #0
 800e4fe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e502:	f7ff fe55 	bl	800e1b0 <__multadd>
 800e506:	4606      	mov	r6, r0
 800e508:	10ad      	asrs	r5, r5, #2
 800e50a:	d03d      	beq.n	800e588 <__pow5mult+0xa0>
 800e50c:	69fc      	ldr	r4, [r7, #28]
 800e50e:	b97c      	cbnz	r4, 800e530 <__pow5mult+0x48>
 800e510:	2010      	movs	r0, #16
 800e512:	f7fb fdc7 	bl	800a0a4 <malloc>
 800e516:	4602      	mov	r2, r0
 800e518:	61f8      	str	r0, [r7, #28]
 800e51a:	b928      	cbnz	r0, 800e528 <__pow5mult+0x40>
 800e51c:	4b1d      	ldr	r3, [pc, #116]	@ (800e594 <__pow5mult+0xac>)
 800e51e:	481e      	ldr	r0, [pc, #120]	@ (800e598 <__pow5mult+0xb0>)
 800e520:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800e524:	f001 f8ca 	bl	800f6bc <__assert_func>
 800e528:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e52c:	6004      	str	r4, [r0, #0]
 800e52e:	60c4      	str	r4, [r0, #12]
 800e530:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800e534:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e538:	b94c      	cbnz	r4, 800e54e <__pow5mult+0x66>
 800e53a:	f240 2171 	movw	r1, #625	@ 0x271
 800e53e:	4638      	mov	r0, r7
 800e540:	f7ff ff12 	bl	800e368 <__i2b>
 800e544:	2300      	movs	r3, #0
 800e546:	f8c8 0008 	str.w	r0, [r8, #8]
 800e54a:	4604      	mov	r4, r0
 800e54c:	6003      	str	r3, [r0, #0]
 800e54e:	f04f 0900 	mov.w	r9, #0
 800e552:	07eb      	lsls	r3, r5, #31
 800e554:	d50a      	bpl.n	800e56c <__pow5mult+0x84>
 800e556:	4631      	mov	r1, r6
 800e558:	4622      	mov	r2, r4
 800e55a:	4638      	mov	r0, r7
 800e55c:	f7ff ff1a 	bl	800e394 <__multiply>
 800e560:	4631      	mov	r1, r6
 800e562:	4680      	mov	r8, r0
 800e564:	4638      	mov	r0, r7
 800e566:	f7ff fe01 	bl	800e16c <_Bfree>
 800e56a:	4646      	mov	r6, r8
 800e56c:	106d      	asrs	r5, r5, #1
 800e56e:	d00b      	beq.n	800e588 <__pow5mult+0xa0>
 800e570:	6820      	ldr	r0, [r4, #0]
 800e572:	b938      	cbnz	r0, 800e584 <__pow5mult+0x9c>
 800e574:	4622      	mov	r2, r4
 800e576:	4621      	mov	r1, r4
 800e578:	4638      	mov	r0, r7
 800e57a:	f7ff ff0b 	bl	800e394 <__multiply>
 800e57e:	6020      	str	r0, [r4, #0]
 800e580:	f8c0 9000 	str.w	r9, [r0]
 800e584:	4604      	mov	r4, r0
 800e586:	e7e4      	b.n	800e552 <__pow5mult+0x6a>
 800e588:	4630      	mov	r0, r6
 800e58a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e58e:	bf00      	nop
 800e590:	08013da4 	.word	0x08013da4
 800e594:	08013c69 	.word	0x08013c69
 800e598:	08013d49 	.word	0x08013d49

0800e59c <__lshift>:
 800e59c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e5a0:	460c      	mov	r4, r1
 800e5a2:	6849      	ldr	r1, [r1, #4]
 800e5a4:	6923      	ldr	r3, [r4, #16]
 800e5a6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e5aa:	68a3      	ldr	r3, [r4, #8]
 800e5ac:	4607      	mov	r7, r0
 800e5ae:	4691      	mov	r9, r2
 800e5b0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e5b4:	f108 0601 	add.w	r6, r8, #1
 800e5b8:	42b3      	cmp	r3, r6
 800e5ba:	db0b      	blt.n	800e5d4 <__lshift+0x38>
 800e5bc:	4638      	mov	r0, r7
 800e5be:	f7ff fd95 	bl	800e0ec <_Balloc>
 800e5c2:	4605      	mov	r5, r0
 800e5c4:	b948      	cbnz	r0, 800e5da <__lshift+0x3e>
 800e5c6:	4602      	mov	r2, r0
 800e5c8:	4b28      	ldr	r3, [pc, #160]	@ (800e66c <__lshift+0xd0>)
 800e5ca:	4829      	ldr	r0, [pc, #164]	@ (800e670 <__lshift+0xd4>)
 800e5cc:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800e5d0:	f001 f874 	bl	800f6bc <__assert_func>
 800e5d4:	3101      	adds	r1, #1
 800e5d6:	005b      	lsls	r3, r3, #1
 800e5d8:	e7ee      	b.n	800e5b8 <__lshift+0x1c>
 800e5da:	2300      	movs	r3, #0
 800e5dc:	f100 0114 	add.w	r1, r0, #20
 800e5e0:	f100 0210 	add.w	r2, r0, #16
 800e5e4:	4618      	mov	r0, r3
 800e5e6:	4553      	cmp	r3, sl
 800e5e8:	db33      	blt.n	800e652 <__lshift+0xb6>
 800e5ea:	6920      	ldr	r0, [r4, #16]
 800e5ec:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e5f0:	f104 0314 	add.w	r3, r4, #20
 800e5f4:	f019 091f 	ands.w	r9, r9, #31
 800e5f8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e5fc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800e600:	d02b      	beq.n	800e65a <__lshift+0xbe>
 800e602:	f1c9 0e20 	rsb	lr, r9, #32
 800e606:	468a      	mov	sl, r1
 800e608:	2200      	movs	r2, #0
 800e60a:	6818      	ldr	r0, [r3, #0]
 800e60c:	fa00 f009 	lsl.w	r0, r0, r9
 800e610:	4310      	orrs	r0, r2
 800e612:	f84a 0b04 	str.w	r0, [sl], #4
 800e616:	f853 2b04 	ldr.w	r2, [r3], #4
 800e61a:	459c      	cmp	ip, r3
 800e61c:	fa22 f20e 	lsr.w	r2, r2, lr
 800e620:	d8f3      	bhi.n	800e60a <__lshift+0x6e>
 800e622:	ebac 0304 	sub.w	r3, ip, r4
 800e626:	3b15      	subs	r3, #21
 800e628:	f023 0303 	bic.w	r3, r3, #3
 800e62c:	3304      	adds	r3, #4
 800e62e:	f104 0015 	add.w	r0, r4, #21
 800e632:	4584      	cmp	ip, r0
 800e634:	bf38      	it	cc
 800e636:	2304      	movcc	r3, #4
 800e638:	50ca      	str	r2, [r1, r3]
 800e63a:	b10a      	cbz	r2, 800e640 <__lshift+0xa4>
 800e63c:	f108 0602 	add.w	r6, r8, #2
 800e640:	3e01      	subs	r6, #1
 800e642:	4638      	mov	r0, r7
 800e644:	612e      	str	r6, [r5, #16]
 800e646:	4621      	mov	r1, r4
 800e648:	f7ff fd90 	bl	800e16c <_Bfree>
 800e64c:	4628      	mov	r0, r5
 800e64e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e652:	f842 0f04 	str.w	r0, [r2, #4]!
 800e656:	3301      	adds	r3, #1
 800e658:	e7c5      	b.n	800e5e6 <__lshift+0x4a>
 800e65a:	3904      	subs	r1, #4
 800e65c:	f853 2b04 	ldr.w	r2, [r3], #4
 800e660:	f841 2f04 	str.w	r2, [r1, #4]!
 800e664:	459c      	cmp	ip, r3
 800e666:	d8f9      	bhi.n	800e65c <__lshift+0xc0>
 800e668:	e7ea      	b.n	800e640 <__lshift+0xa4>
 800e66a:	bf00      	nop
 800e66c:	08013cd8 	.word	0x08013cd8
 800e670:	08013d49 	.word	0x08013d49

0800e674 <__mcmp>:
 800e674:	690a      	ldr	r2, [r1, #16]
 800e676:	4603      	mov	r3, r0
 800e678:	6900      	ldr	r0, [r0, #16]
 800e67a:	1a80      	subs	r0, r0, r2
 800e67c:	b530      	push	{r4, r5, lr}
 800e67e:	d10e      	bne.n	800e69e <__mcmp+0x2a>
 800e680:	3314      	adds	r3, #20
 800e682:	3114      	adds	r1, #20
 800e684:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800e688:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800e68c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800e690:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800e694:	4295      	cmp	r5, r2
 800e696:	d003      	beq.n	800e6a0 <__mcmp+0x2c>
 800e698:	d205      	bcs.n	800e6a6 <__mcmp+0x32>
 800e69a:	f04f 30ff 	mov.w	r0, #4294967295
 800e69e:	bd30      	pop	{r4, r5, pc}
 800e6a0:	42a3      	cmp	r3, r4
 800e6a2:	d3f3      	bcc.n	800e68c <__mcmp+0x18>
 800e6a4:	e7fb      	b.n	800e69e <__mcmp+0x2a>
 800e6a6:	2001      	movs	r0, #1
 800e6a8:	e7f9      	b.n	800e69e <__mcmp+0x2a>
	...

0800e6ac <__mdiff>:
 800e6ac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e6b0:	4689      	mov	r9, r1
 800e6b2:	4606      	mov	r6, r0
 800e6b4:	4611      	mov	r1, r2
 800e6b6:	4648      	mov	r0, r9
 800e6b8:	4614      	mov	r4, r2
 800e6ba:	f7ff ffdb 	bl	800e674 <__mcmp>
 800e6be:	1e05      	subs	r5, r0, #0
 800e6c0:	d112      	bne.n	800e6e8 <__mdiff+0x3c>
 800e6c2:	4629      	mov	r1, r5
 800e6c4:	4630      	mov	r0, r6
 800e6c6:	f7ff fd11 	bl	800e0ec <_Balloc>
 800e6ca:	4602      	mov	r2, r0
 800e6cc:	b928      	cbnz	r0, 800e6da <__mdiff+0x2e>
 800e6ce:	4b3f      	ldr	r3, [pc, #252]	@ (800e7cc <__mdiff+0x120>)
 800e6d0:	f240 2137 	movw	r1, #567	@ 0x237
 800e6d4:	483e      	ldr	r0, [pc, #248]	@ (800e7d0 <__mdiff+0x124>)
 800e6d6:	f000 fff1 	bl	800f6bc <__assert_func>
 800e6da:	2301      	movs	r3, #1
 800e6dc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800e6e0:	4610      	mov	r0, r2
 800e6e2:	b003      	add	sp, #12
 800e6e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e6e8:	bfbc      	itt	lt
 800e6ea:	464b      	movlt	r3, r9
 800e6ec:	46a1      	movlt	r9, r4
 800e6ee:	4630      	mov	r0, r6
 800e6f0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800e6f4:	bfba      	itte	lt
 800e6f6:	461c      	movlt	r4, r3
 800e6f8:	2501      	movlt	r5, #1
 800e6fa:	2500      	movge	r5, #0
 800e6fc:	f7ff fcf6 	bl	800e0ec <_Balloc>
 800e700:	4602      	mov	r2, r0
 800e702:	b918      	cbnz	r0, 800e70c <__mdiff+0x60>
 800e704:	4b31      	ldr	r3, [pc, #196]	@ (800e7cc <__mdiff+0x120>)
 800e706:	f240 2145 	movw	r1, #581	@ 0x245
 800e70a:	e7e3      	b.n	800e6d4 <__mdiff+0x28>
 800e70c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800e710:	6926      	ldr	r6, [r4, #16]
 800e712:	60c5      	str	r5, [r0, #12]
 800e714:	f109 0310 	add.w	r3, r9, #16
 800e718:	f109 0514 	add.w	r5, r9, #20
 800e71c:	f104 0e14 	add.w	lr, r4, #20
 800e720:	f100 0b14 	add.w	fp, r0, #20
 800e724:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800e728:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800e72c:	9301      	str	r3, [sp, #4]
 800e72e:	46d9      	mov	r9, fp
 800e730:	f04f 0c00 	mov.w	ip, #0
 800e734:	9b01      	ldr	r3, [sp, #4]
 800e736:	f85e 0b04 	ldr.w	r0, [lr], #4
 800e73a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800e73e:	9301      	str	r3, [sp, #4]
 800e740:	fa1f f38a 	uxth.w	r3, sl
 800e744:	4619      	mov	r1, r3
 800e746:	b283      	uxth	r3, r0
 800e748:	1acb      	subs	r3, r1, r3
 800e74a:	0c00      	lsrs	r0, r0, #16
 800e74c:	4463      	add	r3, ip
 800e74e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800e752:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800e756:	b29b      	uxth	r3, r3
 800e758:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800e75c:	4576      	cmp	r6, lr
 800e75e:	f849 3b04 	str.w	r3, [r9], #4
 800e762:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800e766:	d8e5      	bhi.n	800e734 <__mdiff+0x88>
 800e768:	1b33      	subs	r3, r6, r4
 800e76a:	3b15      	subs	r3, #21
 800e76c:	f023 0303 	bic.w	r3, r3, #3
 800e770:	3415      	adds	r4, #21
 800e772:	3304      	adds	r3, #4
 800e774:	42a6      	cmp	r6, r4
 800e776:	bf38      	it	cc
 800e778:	2304      	movcc	r3, #4
 800e77a:	441d      	add	r5, r3
 800e77c:	445b      	add	r3, fp
 800e77e:	461e      	mov	r6, r3
 800e780:	462c      	mov	r4, r5
 800e782:	4544      	cmp	r4, r8
 800e784:	d30e      	bcc.n	800e7a4 <__mdiff+0xf8>
 800e786:	f108 0103 	add.w	r1, r8, #3
 800e78a:	1b49      	subs	r1, r1, r5
 800e78c:	f021 0103 	bic.w	r1, r1, #3
 800e790:	3d03      	subs	r5, #3
 800e792:	45a8      	cmp	r8, r5
 800e794:	bf38      	it	cc
 800e796:	2100      	movcc	r1, #0
 800e798:	440b      	add	r3, r1
 800e79a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e79e:	b191      	cbz	r1, 800e7c6 <__mdiff+0x11a>
 800e7a0:	6117      	str	r7, [r2, #16]
 800e7a2:	e79d      	b.n	800e6e0 <__mdiff+0x34>
 800e7a4:	f854 1b04 	ldr.w	r1, [r4], #4
 800e7a8:	46e6      	mov	lr, ip
 800e7aa:	0c08      	lsrs	r0, r1, #16
 800e7ac:	fa1c fc81 	uxtah	ip, ip, r1
 800e7b0:	4471      	add	r1, lr
 800e7b2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800e7b6:	b289      	uxth	r1, r1
 800e7b8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800e7bc:	f846 1b04 	str.w	r1, [r6], #4
 800e7c0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800e7c4:	e7dd      	b.n	800e782 <__mdiff+0xd6>
 800e7c6:	3f01      	subs	r7, #1
 800e7c8:	e7e7      	b.n	800e79a <__mdiff+0xee>
 800e7ca:	bf00      	nop
 800e7cc:	08013cd8 	.word	0x08013cd8
 800e7d0:	08013d49 	.word	0x08013d49

0800e7d4 <__ulp>:
 800e7d4:	b082      	sub	sp, #8
 800e7d6:	ed8d 0b00 	vstr	d0, [sp]
 800e7da:	9a01      	ldr	r2, [sp, #4]
 800e7dc:	4b0f      	ldr	r3, [pc, #60]	@ (800e81c <__ulp+0x48>)
 800e7de:	4013      	ands	r3, r2
 800e7e0:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800e7e4:	2b00      	cmp	r3, #0
 800e7e6:	dc08      	bgt.n	800e7fa <__ulp+0x26>
 800e7e8:	425b      	negs	r3, r3
 800e7ea:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800e7ee:	ea4f 5223 	mov.w	r2, r3, asr #20
 800e7f2:	da04      	bge.n	800e7fe <__ulp+0x2a>
 800e7f4:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800e7f8:	4113      	asrs	r3, r2
 800e7fa:	2200      	movs	r2, #0
 800e7fc:	e008      	b.n	800e810 <__ulp+0x3c>
 800e7fe:	f1a2 0314 	sub.w	r3, r2, #20
 800e802:	2b1e      	cmp	r3, #30
 800e804:	bfda      	itte	le
 800e806:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800e80a:	40da      	lsrle	r2, r3
 800e80c:	2201      	movgt	r2, #1
 800e80e:	2300      	movs	r3, #0
 800e810:	4619      	mov	r1, r3
 800e812:	4610      	mov	r0, r2
 800e814:	ec41 0b10 	vmov	d0, r0, r1
 800e818:	b002      	add	sp, #8
 800e81a:	4770      	bx	lr
 800e81c:	7ff00000 	.word	0x7ff00000

0800e820 <__b2d>:
 800e820:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e824:	6906      	ldr	r6, [r0, #16]
 800e826:	f100 0814 	add.w	r8, r0, #20
 800e82a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800e82e:	1f37      	subs	r7, r6, #4
 800e830:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800e834:	4610      	mov	r0, r2
 800e836:	f7ff fd4b 	bl	800e2d0 <__hi0bits>
 800e83a:	f1c0 0320 	rsb	r3, r0, #32
 800e83e:	280a      	cmp	r0, #10
 800e840:	600b      	str	r3, [r1, #0]
 800e842:	491b      	ldr	r1, [pc, #108]	@ (800e8b0 <__b2d+0x90>)
 800e844:	dc15      	bgt.n	800e872 <__b2d+0x52>
 800e846:	f1c0 0c0b 	rsb	ip, r0, #11
 800e84a:	fa22 f30c 	lsr.w	r3, r2, ip
 800e84e:	45b8      	cmp	r8, r7
 800e850:	ea43 0501 	orr.w	r5, r3, r1
 800e854:	bf34      	ite	cc
 800e856:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800e85a:	2300      	movcs	r3, #0
 800e85c:	3015      	adds	r0, #21
 800e85e:	fa02 f000 	lsl.w	r0, r2, r0
 800e862:	fa23 f30c 	lsr.w	r3, r3, ip
 800e866:	4303      	orrs	r3, r0
 800e868:	461c      	mov	r4, r3
 800e86a:	ec45 4b10 	vmov	d0, r4, r5
 800e86e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e872:	45b8      	cmp	r8, r7
 800e874:	bf3a      	itte	cc
 800e876:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800e87a:	f1a6 0708 	subcc.w	r7, r6, #8
 800e87e:	2300      	movcs	r3, #0
 800e880:	380b      	subs	r0, #11
 800e882:	d012      	beq.n	800e8aa <__b2d+0x8a>
 800e884:	f1c0 0120 	rsb	r1, r0, #32
 800e888:	fa23 f401 	lsr.w	r4, r3, r1
 800e88c:	4082      	lsls	r2, r0
 800e88e:	4322      	orrs	r2, r4
 800e890:	4547      	cmp	r7, r8
 800e892:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800e896:	bf8c      	ite	hi
 800e898:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800e89c:	2200      	movls	r2, #0
 800e89e:	4083      	lsls	r3, r0
 800e8a0:	40ca      	lsrs	r2, r1
 800e8a2:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800e8a6:	4313      	orrs	r3, r2
 800e8a8:	e7de      	b.n	800e868 <__b2d+0x48>
 800e8aa:	ea42 0501 	orr.w	r5, r2, r1
 800e8ae:	e7db      	b.n	800e868 <__b2d+0x48>
 800e8b0:	3ff00000 	.word	0x3ff00000

0800e8b4 <__d2b>:
 800e8b4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e8b8:	460f      	mov	r7, r1
 800e8ba:	2101      	movs	r1, #1
 800e8bc:	ec59 8b10 	vmov	r8, r9, d0
 800e8c0:	4616      	mov	r6, r2
 800e8c2:	f7ff fc13 	bl	800e0ec <_Balloc>
 800e8c6:	4604      	mov	r4, r0
 800e8c8:	b930      	cbnz	r0, 800e8d8 <__d2b+0x24>
 800e8ca:	4602      	mov	r2, r0
 800e8cc:	4b23      	ldr	r3, [pc, #140]	@ (800e95c <__d2b+0xa8>)
 800e8ce:	4824      	ldr	r0, [pc, #144]	@ (800e960 <__d2b+0xac>)
 800e8d0:	f240 310f 	movw	r1, #783	@ 0x30f
 800e8d4:	f000 fef2 	bl	800f6bc <__assert_func>
 800e8d8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800e8dc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e8e0:	b10d      	cbz	r5, 800e8e6 <__d2b+0x32>
 800e8e2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800e8e6:	9301      	str	r3, [sp, #4]
 800e8e8:	f1b8 0300 	subs.w	r3, r8, #0
 800e8ec:	d023      	beq.n	800e936 <__d2b+0x82>
 800e8ee:	4668      	mov	r0, sp
 800e8f0:	9300      	str	r3, [sp, #0]
 800e8f2:	f7ff fd0c 	bl	800e30e <__lo0bits>
 800e8f6:	e9dd 1200 	ldrd	r1, r2, [sp]
 800e8fa:	b1d0      	cbz	r0, 800e932 <__d2b+0x7e>
 800e8fc:	f1c0 0320 	rsb	r3, r0, #32
 800e900:	fa02 f303 	lsl.w	r3, r2, r3
 800e904:	430b      	orrs	r3, r1
 800e906:	40c2      	lsrs	r2, r0
 800e908:	6163      	str	r3, [r4, #20]
 800e90a:	9201      	str	r2, [sp, #4]
 800e90c:	9b01      	ldr	r3, [sp, #4]
 800e90e:	61a3      	str	r3, [r4, #24]
 800e910:	2b00      	cmp	r3, #0
 800e912:	bf0c      	ite	eq
 800e914:	2201      	moveq	r2, #1
 800e916:	2202      	movne	r2, #2
 800e918:	6122      	str	r2, [r4, #16]
 800e91a:	b1a5      	cbz	r5, 800e946 <__d2b+0x92>
 800e91c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800e920:	4405      	add	r5, r0
 800e922:	603d      	str	r5, [r7, #0]
 800e924:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800e928:	6030      	str	r0, [r6, #0]
 800e92a:	4620      	mov	r0, r4
 800e92c:	b003      	add	sp, #12
 800e92e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e932:	6161      	str	r1, [r4, #20]
 800e934:	e7ea      	b.n	800e90c <__d2b+0x58>
 800e936:	a801      	add	r0, sp, #4
 800e938:	f7ff fce9 	bl	800e30e <__lo0bits>
 800e93c:	9b01      	ldr	r3, [sp, #4]
 800e93e:	6163      	str	r3, [r4, #20]
 800e940:	3020      	adds	r0, #32
 800e942:	2201      	movs	r2, #1
 800e944:	e7e8      	b.n	800e918 <__d2b+0x64>
 800e946:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e94a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800e94e:	6038      	str	r0, [r7, #0]
 800e950:	6918      	ldr	r0, [r3, #16]
 800e952:	f7ff fcbd 	bl	800e2d0 <__hi0bits>
 800e956:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800e95a:	e7e5      	b.n	800e928 <__d2b+0x74>
 800e95c:	08013cd8 	.word	0x08013cd8
 800e960:	08013d49 	.word	0x08013d49

0800e964 <__ratio>:
 800e964:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e968:	b085      	sub	sp, #20
 800e96a:	e9cd 1000 	strd	r1, r0, [sp]
 800e96e:	a902      	add	r1, sp, #8
 800e970:	f7ff ff56 	bl	800e820 <__b2d>
 800e974:	9800      	ldr	r0, [sp, #0]
 800e976:	a903      	add	r1, sp, #12
 800e978:	ec55 4b10 	vmov	r4, r5, d0
 800e97c:	f7ff ff50 	bl	800e820 <__b2d>
 800e980:	9b01      	ldr	r3, [sp, #4]
 800e982:	6919      	ldr	r1, [r3, #16]
 800e984:	9b00      	ldr	r3, [sp, #0]
 800e986:	691b      	ldr	r3, [r3, #16]
 800e988:	1ac9      	subs	r1, r1, r3
 800e98a:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800e98e:	1a9b      	subs	r3, r3, r2
 800e990:	ec5b ab10 	vmov	sl, fp, d0
 800e994:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800e998:	2b00      	cmp	r3, #0
 800e99a:	bfce      	itee	gt
 800e99c:	462a      	movgt	r2, r5
 800e99e:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800e9a2:	465a      	movle	r2, fp
 800e9a4:	462f      	mov	r7, r5
 800e9a6:	46d9      	mov	r9, fp
 800e9a8:	bfcc      	ite	gt
 800e9aa:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800e9ae:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800e9b2:	464b      	mov	r3, r9
 800e9b4:	4652      	mov	r2, sl
 800e9b6:	4620      	mov	r0, r4
 800e9b8:	4639      	mov	r1, r7
 800e9ba:	f7f1 ff57 	bl	800086c <__aeabi_ddiv>
 800e9be:	ec41 0b10 	vmov	d0, r0, r1
 800e9c2:	b005      	add	sp, #20
 800e9c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e9c8 <__copybits>:
 800e9c8:	3901      	subs	r1, #1
 800e9ca:	b570      	push	{r4, r5, r6, lr}
 800e9cc:	1149      	asrs	r1, r1, #5
 800e9ce:	6914      	ldr	r4, [r2, #16]
 800e9d0:	3101      	adds	r1, #1
 800e9d2:	f102 0314 	add.w	r3, r2, #20
 800e9d6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800e9da:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800e9de:	1f05      	subs	r5, r0, #4
 800e9e0:	42a3      	cmp	r3, r4
 800e9e2:	d30c      	bcc.n	800e9fe <__copybits+0x36>
 800e9e4:	1aa3      	subs	r3, r4, r2
 800e9e6:	3b11      	subs	r3, #17
 800e9e8:	f023 0303 	bic.w	r3, r3, #3
 800e9ec:	3211      	adds	r2, #17
 800e9ee:	42a2      	cmp	r2, r4
 800e9f0:	bf88      	it	hi
 800e9f2:	2300      	movhi	r3, #0
 800e9f4:	4418      	add	r0, r3
 800e9f6:	2300      	movs	r3, #0
 800e9f8:	4288      	cmp	r0, r1
 800e9fa:	d305      	bcc.n	800ea08 <__copybits+0x40>
 800e9fc:	bd70      	pop	{r4, r5, r6, pc}
 800e9fe:	f853 6b04 	ldr.w	r6, [r3], #4
 800ea02:	f845 6f04 	str.w	r6, [r5, #4]!
 800ea06:	e7eb      	b.n	800e9e0 <__copybits+0x18>
 800ea08:	f840 3b04 	str.w	r3, [r0], #4
 800ea0c:	e7f4      	b.n	800e9f8 <__copybits+0x30>

0800ea0e <__any_on>:
 800ea0e:	f100 0214 	add.w	r2, r0, #20
 800ea12:	6900      	ldr	r0, [r0, #16]
 800ea14:	114b      	asrs	r3, r1, #5
 800ea16:	4298      	cmp	r0, r3
 800ea18:	b510      	push	{r4, lr}
 800ea1a:	db11      	blt.n	800ea40 <__any_on+0x32>
 800ea1c:	dd0a      	ble.n	800ea34 <__any_on+0x26>
 800ea1e:	f011 011f 	ands.w	r1, r1, #31
 800ea22:	d007      	beq.n	800ea34 <__any_on+0x26>
 800ea24:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800ea28:	fa24 f001 	lsr.w	r0, r4, r1
 800ea2c:	fa00 f101 	lsl.w	r1, r0, r1
 800ea30:	428c      	cmp	r4, r1
 800ea32:	d10b      	bne.n	800ea4c <__any_on+0x3e>
 800ea34:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ea38:	4293      	cmp	r3, r2
 800ea3a:	d803      	bhi.n	800ea44 <__any_on+0x36>
 800ea3c:	2000      	movs	r0, #0
 800ea3e:	bd10      	pop	{r4, pc}
 800ea40:	4603      	mov	r3, r0
 800ea42:	e7f7      	b.n	800ea34 <__any_on+0x26>
 800ea44:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ea48:	2900      	cmp	r1, #0
 800ea4a:	d0f5      	beq.n	800ea38 <__any_on+0x2a>
 800ea4c:	2001      	movs	r0, #1
 800ea4e:	e7f6      	b.n	800ea3e <__any_on+0x30>

0800ea50 <_strtoul_l.constprop.0>:
 800ea50:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ea54:	4e34      	ldr	r6, [pc, #208]	@ (800eb28 <_strtoul_l.constprop.0+0xd8>)
 800ea56:	4686      	mov	lr, r0
 800ea58:	460d      	mov	r5, r1
 800ea5a:	4628      	mov	r0, r5
 800ea5c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ea60:	5d37      	ldrb	r7, [r6, r4]
 800ea62:	f017 0708 	ands.w	r7, r7, #8
 800ea66:	d1f8      	bne.n	800ea5a <_strtoul_l.constprop.0+0xa>
 800ea68:	2c2d      	cmp	r4, #45	@ 0x2d
 800ea6a:	d12f      	bne.n	800eacc <_strtoul_l.constprop.0+0x7c>
 800ea6c:	782c      	ldrb	r4, [r5, #0]
 800ea6e:	2701      	movs	r7, #1
 800ea70:	1c85      	adds	r5, r0, #2
 800ea72:	f033 0010 	bics.w	r0, r3, #16
 800ea76:	d109      	bne.n	800ea8c <_strtoul_l.constprop.0+0x3c>
 800ea78:	2c30      	cmp	r4, #48	@ 0x30
 800ea7a:	d12c      	bne.n	800ead6 <_strtoul_l.constprop.0+0x86>
 800ea7c:	7828      	ldrb	r0, [r5, #0]
 800ea7e:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 800ea82:	2858      	cmp	r0, #88	@ 0x58
 800ea84:	d127      	bne.n	800ead6 <_strtoul_l.constprop.0+0x86>
 800ea86:	786c      	ldrb	r4, [r5, #1]
 800ea88:	2310      	movs	r3, #16
 800ea8a:	3502      	adds	r5, #2
 800ea8c:	f04f 38ff 	mov.w	r8, #4294967295
 800ea90:	2600      	movs	r6, #0
 800ea92:	fbb8 f8f3 	udiv	r8, r8, r3
 800ea96:	fb03 f908 	mul.w	r9, r3, r8
 800ea9a:	ea6f 0909 	mvn.w	r9, r9
 800ea9e:	4630      	mov	r0, r6
 800eaa0:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 800eaa4:	f1bc 0f09 	cmp.w	ip, #9
 800eaa8:	d81c      	bhi.n	800eae4 <_strtoul_l.constprop.0+0x94>
 800eaaa:	4664      	mov	r4, ip
 800eaac:	42a3      	cmp	r3, r4
 800eaae:	dd2a      	ble.n	800eb06 <_strtoul_l.constprop.0+0xb6>
 800eab0:	f1b6 3fff 	cmp.w	r6, #4294967295
 800eab4:	d007      	beq.n	800eac6 <_strtoul_l.constprop.0+0x76>
 800eab6:	4580      	cmp	r8, r0
 800eab8:	d322      	bcc.n	800eb00 <_strtoul_l.constprop.0+0xb0>
 800eaba:	d101      	bne.n	800eac0 <_strtoul_l.constprop.0+0x70>
 800eabc:	45a1      	cmp	r9, r4
 800eabe:	db1f      	blt.n	800eb00 <_strtoul_l.constprop.0+0xb0>
 800eac0:	fb00 4003 	mla	r0, r0, r3, r4
 800eac4:	2601      	movs	r6, #1
 800eac6:	f815 4b01 	ldrb.w	r4, [r5], #1
 800eaca:	e7e9      	b.n	800eaa0 <_strtoul_l.constprop.0+0x50>
 800eacc:	2c2b      	cmp	r4, #43	@ 0x2b
 800eace:	bf04      	itt	eq
 800ead0:	782c      	ldrbeq	r4, [r5, #0]
 800ead2:	1c85      	addeq	r5, r0, #2
 800ead4:	e7cd      	b.n	800ea72 <_strtoul_l.constprop.0+0x22>
 800ead6:	2b00      	cmp	r3, #0
 800ead8:	d1d8      	bne.n	800ea8c <_strtoul_l.constprop.0+0x3c>
 800eada:	2c30      	cmp	r4, #48	@ 0x30
 800eadc:	bf0c      	ite	eq
 800eade:	2308      	moveq	r3, #8
 800eae0:	230a      	movne	r3, #10
 800eae2:	e7d3      	b.n	800ea8c <_strtoul_l.constprop.0+0x3c>
 800eae4:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 800eae8:	f1bc 0f19 	cmp.w	ip, #25
 800eaec:	d801      	bhi.n	800eaf2 <_strtoul_l.constprop.0+0xa2>
 800eaee:	3c37      	subs	r4, #55	@ 0x37
 800eaf0:	e7dc      	b.n	800eaac <_strtoul_l.constprop.0+0x5c>
 800eaf2:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 800eaf6:	f1bc 0f19 	cmp.w	ip, #25
 800eafa:	d804      	bhi.n	800eb06 <_strtoul_l.constprop.0+0xb6>
 800eafc:	3c57      	subs	r4, #87	@ 0x57
 800eafe:	e7d5      	b.n	800eaac <_strtoul_l.constprop.0+0x5c>
 800eb00:	f04f 36ff 	mov.w	r6, #4294967295
 800eb04:	e7df      	b.n	800eac6 <_strtoul_l.constprop.0+0x76>
 800eb06:	1c73      	adds	r3, r6, #1
 800eb08:	d106      	bne.n	800eb18 <_strtoul_l.constprop.0+0xc8>
 800eb0a:	2322      	movs	r3, #34	@ 0x22
 800eb0c:	f8ce 3000 	str.w	r3, [lr]
 800eb10:	4630      	mov	r0, r6
 800eb12:	b932      	cbnz	r2, 800eb22 <_strtoul_l.constprop.0+0xd2>
 800eb14:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800eb18:	b107      	cbz	r7, 800eb1c <_strtoul_l.constprop.0+0xcc>
 800eb1a:	4240      	negs	r0, r0
 800eb1c:	2a00      	cmp	r2, #0
 800eb1e:	d0f9      	beq.n	800eb14 <_strtoul_l.constprop.0+0xc4>
 800eb20:	b106      	cbz	r6, 800eb24 <_strtoul_l.constprop.0+0xd4>
 800eb22:	1e69      	subs	r1, r5, #1
 800eb24:	6011      	str	r1, [r2, #0]
 800eb26:	e7f5      	b.n	800eb14 <_strtoul_l.constprop.0+0xc4>
 800eb28:	08013a71 	.word	0x08013a71

0800eb2c <_strtoul_r>:
 800eb2c:	f7ff bf90 	b.w	800ea50 <_strtoul_l.constprop.0>

0800eb30 <strtoul>:
 800eb30:	4613      	mov	r3, r2
 800eb32:	460a      	mov	r2, r1
 800eb34:	4601      	mov	r1, r0
 800eb36:	4802      	ldr	r0, [pc, #8]	@ (800eb40 <strtoul+0x10>)
 800eb38:	6800      	ldr	r0, [r0, #0]
 800eb3a:	f7ff bf89 	b.w	800ea50 <_strtoul_l.constprop.0>
 800eb3e:	bf00      	nop
 800eb40:	200001a4 	.word	0x200001a4

0800eb44 <__ascii_wctomb>:
 800eb44:	4603      	mov	r3, r0
 800eb46:	4608      	mov	r0, r1
 800eb48:	b141      	cbz	r1, 800eb5c <__ascii_wctomb+0x18>
 800eb4a:	2aff      	cmp	r2, #255	@ 0xff
 800eb4c:	d904      	bls.n	800eb58 <__ascii_wctomb+0x14>
 800eb4e:	228a      	movs	r2, #138	@ 0x8a
 800eb50:	601a      	str	r2, [r3, #0]
 800eb52:	f04f 30ff 	mov.w	r0, #4294967295
 800eb56:	4770      	bx	lr
 800eb58:	700a      	strb	r2, [r1, #0]
 800eb5a:	2001      	movs	r0, #1
 800eb5c:	4770      	bx	lr

0800eb5e <__ssputs_r>:
 800eb5e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800eb62:	688e      	ldr	r6, [r1, #8]
 800eb64:	461f      	mov	r7, r3
 800eb66:	42be      	cmp	r6, r7
 800eb68:	680b      	ldr	r3, [r1, #0]
 800eb6a:	4682      	mov	sl, r0
 800eb6c:	460c      	mov	r4, r1
 800eb6e:	4690      	mov	r8, r2
 800eb70:	d82d      	bhi.n	800ebce <__ssputs_r+0x70>
 800eb72:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800eb76:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800eb7a:	d026      	beq.n	800ebca <__ssputs_r+0x6c>
 800eb7c:	6965      	ldr	r5, [r4, #20]
 800eb7e:	6909      	ldr	r1, [r1, #16]
 800eb80:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800eb84:	eba3 0901 	sub.w	r9, r3, r1
 800eb88:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800eb8c:	1c7b      	adds	r3, r7, #1
 800eb8e:	444b      	add	r3, r9
 800eb90:	106d      	asrs	r5, r5, #1
 800eb92:	429d      	cmp	r5, r3
 800eb94:	bf38      	it	cc
 800eb96:	461d      	movcc	r5, r3
 800eb98:	0553      	lsls	r3, r2, #21
 800eb9a:	d527      	bpl.n	800ebec <__ssputs_r+0x8e>
 800eb9c:	4629      	mov	r1, r5
 800eb9e:	f7fb fab3 	bl	800a108 <_malloc_r>
 800eba2:	4606      	mov	r6, r0
 800eba4:	b360      	cbz	r0, 800ec00 <__ssputs_r+0xa2>
 800eba6:	6921      	ldr	r1, [r4, #16]
 800eba8:	464a      	mov	r2, r9
 800ebaa:	f7fe f853 	bl	800cc54 <memcpy>
 800ebae:	89a3      	ldrh	r3, [r4, #12]
 800ebb0:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800ebb4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ebb8:	81a3      	strh	r3, [r4, #12]
 800ebba:	6126      	str	r6, [r4, #16]
 800ebbc:	6165      	str	r5, [r4, #20]
 800ebbe:	444e      	add	r6, r9
 800ebc0:	eba5 0509 	sub.w	r5, r5, r9
 800ebc4:	6026      	str	r6, [r4, #0]
 800ebc6:	60a5      	str	r5, [r4, #8]
 800ebc8:	463e      	mov	r6, r7
 800ebca:	42be      	cmp	r6, r7
 800ebcc:	d900      	bls.n	800ebd0 <__ssputs_r+0x72>
 800ebce:	463e      	mov	r6, r7
 800ebd0:	6820      	ldr	r0, [r4, #0]
 800ebd2:	4632      	mov	r2, r6
 800ebd4:	4641      	mov	r1, r8
 800ebd6:	f000 fd52 	bl	800f67e <memmove>
 800ebda:	68a3      	ldr	r3, [r4, #8]
 800ebdc:	1b9b      	subs	r3, r3, r6
 800ebde:	60a3      	str	r3, [r4, #8]
 800ebe0:	6823      	ldr	r3, [r4, #0]
 800ebe2:	4433      	add	r3, r6
 800ebe4:	6023      	str	r3, [r4, #0]
 800ebe6:	2000      	movs	r0, #0
 800ebe8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ebec:	462a      	mov	r2, r5
 800ebee:	f000 fda3 	bl	800f738 <_realloc_r>
 800ebf2:	4606      	mov	r6, r0
 800ebf4:	2800      	cmp	r0, #0
 800ebf6:	d1e0      	bne.n	800ebba <__ssputs_r+0x5c>
 800ebf8:	6921      	ldr	r1, [r4, #16]
 800ebfa:	4650      	mov	r0, sl
 800ebfc:	f7fe fe9c 	bl	800d938 <_free_r>
 800ec00:	230c      	movs	r3, #12
 800ec02:	f8ca 3000 	str.w	r3, [sl]
 800ec06:	89a3      	ldrh	r3, [r4, #12]
 800ec08:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ec0c:	81a3      	strh	r3, [r4, #12]
 800ec0e:	f04f 30ff 	mov.w	r0, #4294967295
 800ec12:	e7e9      	b.n	800ebe8 <__ssputs_r+0x8a>

0800ec14 <_svfiprintf_r>:
 800ec14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec18:	4698      	mov	r8, r3
 800ec1a:	898b      	ldrh	r3, [r1, #12]
 800ec1c:	061b      	lsls	r3, r3, #24
 800ec1e:	b09d      	sub	sp, #116	@ 0x74
 800ec20:	4607      	mov	r7, r0
 800ec22:	460d      	mov	r5, r1
 800ec24:	4614      	mov	r4, r2
 800ec26:	d510      	bpl.n	800ec4a <_svfiprintf_r+0x36>
 800ec28:	690b      	ldr	r3, [r1, #16]
 800ec2a:	b973      	cbnz	r3, 800ec4a <_svfiprintf_r+0x36>
 800ec2c:	2140      	movs	r1, #64	@ 0x40
 800ec2e:	f7fb fa6b 	bl	800a108 <_malloc_r>
 800ec32:	6028      	str	r0, [r5, #0]
 800ec34:	6128      	str	r0, [r5, #16]
 800ec36:	b930      	cbnz	r0, 800ec46 <_svfiprintf_r+0x32>
 800ec38:	230c      	movs	r3, #12
 800ec3a:	603b      	str	r3, [r7, #0]
 800ec3c:	f04f 30ff 	mov.w	r0, #4294967295
 800ec40:	b01d      	add	sp, #116	@ 0x74
 800ec42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ec46:	2340      	movs	r3, #64	@ 0x40
 800ec48:	616b      	str	r3, [r5, #20]
 800ec4a:	2300      	movs	r3, #0
 800ec4c:	9309      	str	r3, [sp, #36]	@ 0x24
 800ec4e:	2320      	movs	r3, #32
 800ec50:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ec54:	f8cd 800c 	str.w	r8, [sp, #12]
 800ec58:	2330      	movs	r3, #48	@ 0x30
 800ec5a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800edf8 <_svfiprintf_r+0x1e4>
 800ec5e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ec62:	f04f 0901 	mov.w	r9, #1
 800ec66:	4623      	mov	r3, r4
 800ec68:	469a      	mov	sl, r3
 800ec6a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ec6e:	b10a      	cbz	r2, 800ec74 <_svfiprintf_r+0x60>
 800ec70:	2a25      	cmp	r2, #37	@ 0x25
 800ec72:	d1f9      	bne.n	800ec68 <_svfiprintf_r+0x54>
 800ec74:	ebba 0b04 	subs.w	fp, sl, r4
 800ec78:	d00b      	beq.n	800ec92 <_svfiprintf_r+0x7e>
 800ec7a:	465b      	mov	r3, fp
 800ec7c:	4622      	mov	r2, r4
 800ec7e:	4629      	mov	r1, r5
 800ec80:	4638      	mov	r0, r7
 800ec82:	f7ff ff6c 	bl	800eb5e <__ssputs_r>
 800ec86:	3001      	adds	r0, #1
 800ec88:	f000 80a7 	beq.w	800edda <_svfiprintf_r+0x1c6>
 800ec8c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ec8e:	445a      	add	r2, fp
 800ec90:	9209      	str	r2, [sp, #36]	@ 0x24
 800ec92:	f89a 3000 	ldrb.w	r3, [sl]
 800ec96:	2b00      	cmp	r3, #0
 800ec98:	f000 809f 	beq.w	800edda <_svfiprintf_r+0x1c6>
 800ec9c:	2300      	movs	r3, #0
 800ec9e:	f04f 32ff 	mov.w	r2, #4294967295
 800eca2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800eca6:	f10a 0a01 	add.w	sl, sl, #1
 800ecaa:	9304      	str	r3, [sp, #16]
 800ecac:	9307      	str	r3, [sp, #28]
 800ecae:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ecb2:	931a      	str	r3, [sp, #104]	@ 0x68
 800ecb4:	4654      	mov	r4, sl
 800ecb6:	2205      	movs	r2, #5
 800ecb8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ecbc:	484e      	ldr	r0, [pc, #312]	@ (800edf8 <_svfiprintf_r+0x1e4>)
 800ecbe:	f7f1 fa97 	bl	80001f0 <memchr>
 800ecc2:	9a04      	ldr	r2, [sp, #16]
 800ecc4:	b9d8      	cbnz	r0, 800ecfe <_svfiprintf_r+0xea>
 800ecc6:	06d0      	lsls	r0, r2, #27
 800ecc8:	bf44      	itt	mi
 800ecca:	2320      	movmi	r3, #32
 800eccc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ecd0:	0711      	lsls	r1, r2, #28
 800ecd2:	bf44      	itt	mi
 800ecd4:	232b      	movmi	r3, #43	@ 0x2b
 800ecd6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ecda:	f89a 3000 	ldrb.w	r3, [sl]
 800ecde:	2b2a      	cmp	r3, #42	@ 0x2a
 800ece0:	d015      	beq.n	800ed0e <_svfiprintf_r+0xfa>
 800ece2:	9a07      	ldr	r2, [sp, #28]
 800ece4:	4654      	mov	r4, sl
 800ece6:	2000      	movs	r0, #0
 800ece8:	f04f 0c0a 	mov.w	ip, #10
 800ecec:	4621      	mov	r1, r4
 800ecee:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ecf2:	3b30      	subs	r3, #48	@ 0x30
 800ecf4:	2b09      	cmp	r3, #9
 800ecf6:	d94b      	bls.n	800ed90 <_svfiprintf_r+0x17c>
 800ecf8:	b1b0      	cbz	r0, 800ed28 <_svfiprintf_r+0x114>
 800ecfa:	9207      	str	r2, [sp, #28]
 800ecfc:	e014      	b.n	800ed28 <_svfiprintf_r+0x114>
 800ecfe:	eba0 0308 	sub.w	r3, r0, r8
 800ed02:	fa09 f303 	lsl.w	r3, r9, r3
 800ed06:	4313      	orrs	r3, r2
 800ed08:	9304      	str	r3, [sp, #16]
 800ed0a:	46a2      	mov	sl, r4
 800ed0c:	e7d2      	b.n	800ecb4 <_svfiprintf_r+0xa0>
 800ed0e:	9b03      	ldr	r3, [sp, #12]
 800ed10:	1d19      	adds	r1, r3, #4
 800ed12:	681b      	ldr	r3, [r3, #0]
 800ed14:	9103      	str	r1, [sp, #12]
 800ed16:	2b00      	cmp	r3, #0
 800ed18:	bfbb      	ittet	lt
 800ed1a:	425b      	neglt	r3, r3
 800ed1c:	f042 0202 	orrlt.w	r2, r2, #2
 800ed20:	9307      	strge	r3, [sp, #28]
 800ed22:	9307      	strlt	r3, [sp, #28]
 800ed24:	bfb8      	it	lt
 800ed26:	9204      	strlt	r2, [sp, #16]
 800ed28:	7823      	ldrb	r3, [r4, #0]
 800ed2a:	2b2e      	cmp	r3, #46	@ 0x2e
 800ed2c:	d10a      	bne.n	800ed44 <_svfiprintf_r+0x130>
 800ed2e:	7863      	ldrb	r3, [r4, #1]
 800ed30:	2b2a      	cmp	r3, #42	@ 0x2a
 800ed32:	d132      	bne.n	800ed9a <_svfiprintf_r+0x186>
 800ed34:	9b03      	ldr	r3, [sp, #12]
 800ed36:	1d1a      	adds	r2, r3, #4
 800ed38:	681b      	ldr	r3, [r3, #0]
 800ed3a:	9203      	str	r2, [sp, #12]
 800ed3c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ed40:	3402      	adds	r4, #2
 800ed42:	9305      	str	r3, [sp, #20]
 800ed44:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800ee08 <_svfiprintf_r+0x1f4>
 800ed48:	7821      	ldrb	r1, [r4, #0]
 800ed4a:	2203      	movs	r2, #3
 800ed4c:	4650      	mov	r0, sl
 800ed4e:	f7f1 fa4f 	bl	80001f0 <memchr>
 800ed52:	b138      	cbz	r0, 800ed64 <_svfiprintf_r+0x150>
 800ed54:	9b04      	ldr	r3, [sp, #16]
 800ed56:	eba0 000a 	sub.w	r0, r0, sl
 800ed5a:	2240      	movs	r2, #64	@ 0x40
 800ed5c:	4082      	lsls	r2, r0
 800ed5e:	4313      	orrs	r3, r2
 800ed60:	3401      	adds	r4, #1
 800ed62:	9304      	str	r3, [sp, #16]
 800ed64:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ed68:	4824      	ldr	r0, [pc, #144]	@ (800edfc <_svfiprintf_r+0x1e8>)
 800ed6a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ed6e:	2206      	movs	r2, #6
 800ed70:	f7f1 fa3e 	bl	80001f0 <memchr>
 800ed74:	2800      	cmp	r0, #0
 800ed76:	d036      	beq.n	800ede6 <_svfiprintf_r+0x1d2>
 800ed78:	4b21      	ldr	r3, [pc, #132]	@ (800ee00 <_svfiprintf_r+0x1ec>)
 800ed7a:	bb1b      	cbnz	r3, 800edc4 <_svfiprintf_r+0x1b0>
 800ed7c:	9b03      	ldr	r3, [sp, #12]
 800ed7e:	3307      	adds	r3, #7
 800ed80:	f023 0307 	bic.w	r3, r3, #7
 800ed84:	3308      	adds	r3, #8
 800ed86:	9303      	str	r3, [sp, #12]
 800ed88:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ed8a:	4433      	add	r3, r6
 800ed8c:	9309      	str	r3, [sp, #36]	@ 0x24
 800ed8e:	e76a      	b.n	800ec66 <_svfiprintf_r+0x52>
 800ed90:	fb0c 3202 	mla	r2, ip, r2, r3
 800ed94:	460c      	mov	r4, r1
 800ed96:	2001      	movs	r0, #1
 800ed98:	e7a8      	b.n	800ecec <_svfiprintf_r+0xd8>
 800ed9a:	2300      	movs	r3, #0
 800ed9c:	3401      	adds	r4, #1
 800ed9e:	9305      	str	r3, [sp, #20]
 800eda0:	4619      	mov	r1, r3
 800eda2:	f04f 0c0a 	mov.w	ip, #10
 800eda6:	4620      	mov	r0, r4
 800eda8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800edac:	3a30      	subs	r2, #48	@ 0x30
 800edae:	2a09      	cmp	r2, #9
 800edb0:	d903      	bls.n	800edba <_svfiprintf_r+0x1a6>
 800edb2:	2b00      	cmp	r3, #0
 800edb4:	d0c6      	beq.n	800ed44 <_svfiprintf_r+0x130>
 800edb6:	9105      	str	r1, [sp, #20]
 800edb8:	e7c4      	b.n	800ed44 <_svfiprintf_r+0x130>
 800edba:	fb0c 2101 	mla	r1, ip, r1, r2
 800edbe:	4604      	mov	r4, r0
 800edc0:	2301      	movs	r3, #1
 800edc2:	e7f0      	b.n	800eda6 <_svfiprintf_r+0x192>
 800edc4:	ab03      	add	r3, sp, #12
 800edc6:	9300      	str	r3, [sp, #0]
 800edc8:	462a      	mov	r2, r5
 800edca:	4b0e      	ldr	r3, [pc, #56]	@ (800ee04 <_svfiprintf_r+0x1f0>)
 800edcc:	a904      	add	r1, sp, #16
 800edce:	4638      	mov	r0, r7
 800edd0:	f7fc f962 	bl	800b098 <_printf_float>
 800edd4:	1c42      	adds	r2, r0, #1
 800edd6:	4606      	mov	r6, r0
 800edd8:	d1d6      	bne.n	800ed88 <_svfiprintf_r+0x174>
 800edda:	89ab      	ldrh	r3, [r5, #12]
 800eddc:	065b      	lsls	r3, r3, #25
 800edde:	f53f af2d 	bmi.w	800ec3c <_svfiprintf_r+0x28>
 800ede2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ede4:	e72c      	b.n	800ec40 <_svfiprintf_r+0x2c>
 800ede6:	ab03      	add	r3, sp, #12
 800ede8:	9300      	str	r3, [sp, #0]
 800edea:	462a      	mov	r2, r5
 800edec:	4b05      	ldr	r3, [pc, #20]	@ (800ee04 <_svfiprintf_r+0x1f0>)
 800edee:	a904      	add	r1, sp, #16
 800edf0:	4638      	mov	r0, r7
 800edf2:	f7fc fbe9 	bl	800b5c8 <_printf_i>
 800edf6:	e7ed      	b.n	800edd4 <_svfiprintf_r+0x1c0>
 800edf8:	08013ea0 	.word	0x08013ea0
 800edfc:	08013eaa 	.word	0x08013eaa
 800ee00:	0800b099 	.word	0x0800b099
 800ee04:	0800eb5f 	.word	0x0800eb5f
 800ee08:	08013ea6 	.word	0x08013ea6

0800ee0c <_sungetc_r>:
 800ee0c:	b538      	push	{r3, r4, r5, lr}
 800ee0e:	1c4b      	adds	r3, r1, #1
 800ee10:	4614      	mov	r4, r2
 800ee12:	d103      	bne.n	800ee1c <_sungetc_r+0x10>
 800ee14:	f04f 35ff 	mov.w	r5, #4294967295
 800ee18:	4628      	mov	r0, r5
 800ee1a:	bd38      	pop	{r3, r4, r5, pc}
 800ee1c:	8993      	ldrh	r3, [r2, #12]
 800ee1e:	f023 0320 	bic.w	r3, r3, #32
 800ee22:	8193      	strh	r3, [r2, #12]
 800ee24:	6853      	ldr	r3, [r2, #4]
 800ee26:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800ee28:	b2cd      	uxtb	r5, r1
 800ee2a:	b18a      	cbz	r2, 800ee50 <_sungetc_r+0x44>
 800ee2c:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800ee2e:	429a      	cmp	r2, r3
 800ee30:	dd08      	ble.n	800ee44 <_sungetc_r+0x38>
 800ee32:	6823      	ldr	r3, [r4, #0]
 800ee34:	1e5a      	subs	r2, r3, #1
 800ee36:	6022      	str	r2, [r4, #0]
 800ee38:	f803 5c01 	strb.w	r5, [r3, #-1]
 800ee3c:	6863      	ldr	r3, [r4, #4]
 800ee3e:	3301      	adds	r3, #1
 800ee40:	6063      	str	r3, [r4, #4]
 800ee42:	e7e9      	b.n	800ee18 <_sungetc_r+0xc>
 800ee44:	4621      	mov	r1, r4
 800ee46:	f000 fbe0 	bl	800f60a <__submore>
 800ee4a:	2800      	cmp	r0, #0
 800ee4c:	d0f1      	beq.n	800ee32 <_sungetc_r+0x26>
 800ee4e:	e7e1      	b.n	800ee14 <_sungetc_r+0x8>
 800ee50:	6921      	ldr	r1, [r4, #16]
 800ee52:	6822      	ldr	r2, [r4, #0]
 800ee54:	b141      	cbz	r1, 800ee68 <_sungetc_r+0x5c>
 800ee56:	4291      	cmp	r1, r2
 800ee58:	d206      	bcs.n	800ee68 <_sungetc_r+0x5c>
 800ee5a:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 800ee5e:	42a9      	cmp	r1, r5
 800ee60:	d102      	bne.n	800ee68 <_sungetc_r+0x5c>
 800ee62:	3a01      	subs	r2, #1
 800ee64:	6022      	str	r2, [r4, #0]
 800ee66:	e7ea      	b.n	800ee3e <_sungetc_r+0x32>
 800ee68:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 800ee6c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ee70:	6363      	str	r3, [r4, #52]	@ 0x34
 800ee72:	2303      	movs	r3, #3
 800ee74:	63a3      	str	r3, [r4, #56]	@ 0x38
 800ee76:	4623      	mov	r3, r4
 800ee78:	f803 5f46 	strb.w	r5, [r3, #70]!
 800ee7c:	6023      	str	r3, [r4, #0]
 800ee7e:	2301      	movs	r3, #1
 800ee80:	e7de      	b.n	800ee40 <_sungetc_r+0x34>

0800ee82 <__ssrefill_r>:
 800ee82:	b510      	push	{r4, lr}
 800ee84:	460c      	mov	r4, r1
 800ee86:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800ee88:	b169      	cbz	r1, 800eea6 <__ssrefill_r+0x24>
 800ee8a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ee8e:	4299      	cmp	r1, r3
 800ee90:	d001      	beq.n	800ee96 <__ssrefill_r+0x14>
 800ee92:	f7fe fd51 	bl	800d938 <_free_r>
 800ee96:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800ee98:	6063      	str	r3, [r4, #4]
 800ee9a:	2000      	movs	r0, #0
 800ee9c:	6360      	str	r0, [r4, #52]	@ 0x34
 800ee9e:	b113      	cbz	r3, 800eea6 <__ssrefill_r+0x24>
 800eea0:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800eea2:	6023      	str	r3, [r4, #0]
 800eea4:	bd10      	pop	{r4, pc}
 800eea6:	6923      	ldr	r3, [r4, #16]
 800eea8:	6023      	str	r3, [r4, #0]
 800eeaa:	2300      	movs	r3, #0
 800eeac:	6063      	str	r3, [r4, #4]
 800eeae:	89a3      	ldrh	r3, [r4, #12]
 800eeb0:	f043 0320 	orr.w	r3, r3, #32
 800eeb4:	81a3      	strh	r3, [r4, #12]
 800eeb6:	f04f 30ff 	mov.w	r0, #4294967295
 800eeba:	e7f3      	b.n	800eea4 <__ssrefill_r+0x22>

0800eebc <__ssvfiscanf_r>:
 800eebc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800eec0:	460c      	mov	r4, r1
 800eec2:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 800eec6:	2100      	movs	r1, #0
 800eec8:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 800eecc:	49a5      	ldr	r1, [pc, #660]	@ (800f164 <__ssvfiscanf_r+0x2a8>)
 800eece:	91a0      	str	r1, [sp, #640]	@ 0x280
 800eed0:	f10d 0804 	add.w	r8, sp, #4
 800eed4:	49a4      	ldr	r1, [pc, #656]	@ (800f168 <__ssvfiscanf_r+0x2ac>)
 800eed6:	4fa5      	ldr	r7, [pc, #660]	@ (800f16c <__ssvfiscanf_r+0x2b0>)
 800eed8:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 800eedc:	4606      	mov	r6, r0
 800eede:	91a1      	str	r1, [sp, #644]	@ 0x284
 800eee0:	9300      	str	r3, [sp, #0]
 800eee2:	7813      	ldrb	r3, [r2, #0]
 800eee4:	2b00      	cmp	r3, #0
 800eee6:	f000 8158 	beq.w	800f19a <__ssvfiscanf_r+0x2de>
 800eeea:	5cf9      	ldrb	r1, [r7, r3]
 800eeec:	f011 0108 	ands.w	r1, r1, #8
 800eef0:	f102 0501 	add.w	r5, r2, #1
 800eef4:	d019      	beq.n	800ef2a <__ssvfiscanf_r+0x6e>
 800eef6:	6863      	ldr	r3, [r4, #4]
 800eef8:	2b00      	cmp	r3, #0
 800eefa:	dd0f      	ble.n	800ef1c <__ssvfiscanf_r+0x60>
 800eefc:	6823      	ldr	r3, [r4, #0]
 800eefe:	781a      	ldrb	r2, [r3, #0]
 800ef00:	5cba      	ldrb	r2, [r7, r2]
 800ef02:	0712      	lsls	r2, r2, #28
 800ef04:	d401      	bmi.n	800ef0a <__ssvfiscanf_r+0x4e>
 800ef06:	462a      	mov	r2, r5
 800ef08:	e7eb      	b.n	800eee2 <__ssvfiscanf_r+0x26>
 800ef0a:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800ef0c:	3201      	adds	r2, #1
 800ef0e:	9245      	str	r2, [sp, #276]	@ 0x114
 800ef10:	6862      	ldr	r2, [r4, #4]
 800ef12:	3301      	adds	r3, #1
 800ef14:	3a01      	subs	r2, #1
 800ef16:	6062      	str	r2, [r4, #4]
 800ef18:	6023      	str	r3, [r4, #0]
 800ef1a:	e7ec      	b.n	800eef6 <__ssvfiscanf_r+0x3a>
 800ef1c:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800ef1e:	4621      	mov	r1, r4
 800ef20:	4630      	mov	r0, r6
 800ef22:	4798      	blx	r3
 800ef24:	2800      	cmp	r0, #0
 800ef26:	d0e9      	beq.n	800eefc <__ssvfiscanf_r+0x40>
 800ef28:	e7ed      	b.n	800ef06 <__ssvfiscanf_r+0x4a>
 800ef2a:	2b25      	cmp	r3, #37	@ 0x25
 800ef2c:	d012      	beq.n	800ef54 <__ssvfiscanf_r+0x98>
 800ef2e:	4699      	mov	r9, r3
 800ef30:	6863      	ldr	r3, [r4, #4]
 800ef32:	2b00      	cmp	r3, #0
 800ef34:	f340 8093 	ble.w	800f05e <__ssvfiscanf_r+0x1a2>
 800ef38:	6822      	ldr	r2, [r4, #0]
 800ef3a:	7813      	ldrb	r3, [r2, #0]
 800ef3c:	454b      	cmp	r3, r9
 800ef3e:	f040 812c 	bne.w	800f19a <__ssvfiscanf_r+0x2de>
 800ef42:	6863      	ldr	r3, [r4, #4]
 800ef44:	3b01      	subs	r3, #1
 800ef46:	6063      	str	r3, [r4, #4]
 800ef48:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 800ef4a:	3201      	adds	r2, #1
 800ef4c:	3301      	adds	r3, #1
 800ef4e:	6022      	str	r2, [r4, #0]
 800ef50:	9345      	str	r3, [sp, #276]	@ 0x114
 800ef52:	e7d8      	b.n	800ef06 <__ssvfiscanf_r+0x4a>
 800ef54:	9141      	str	r1, [sp, #260]	@ 0x104
 800ef56:	9143      	str	r1, [sp, #268]	@ 0x10c
 800ef58:	7853      	ldrb	r3, [r2, #1]
 800ef5a:	2b2a      	cmp	r3, #42	@ 0x2a
 800ef5c:	bf02      	ittt	eq
 800ef5e:	2310      	moveq	r3, #16
 800ef60:	1c95      	addeq	r5, r2, #2
 800ef62:	9341      	streq	r3, [sp, #260]	@ 0x104
 800ef64:	220a      	movs	r2, #10
 800ef66:	46a9      	mov	r9, r5
 800ef68:	f819 1b01 	ldrb.w	r1, [r9], #1
 800ef6c:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 800ef70:	2b09      	cmp	r3, #9
 800ef72:	d91e      	bls.n	800efb2 <__ssvfiscanf_r+0xf6>
 800ef74:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 800f170 <__ssvfiscanf_r+0x2b4>
 800ef78:	2203      	movs	r2, #3
 800ef7a:	4650      	mov	r0, sl
 800ef7c:	f7f1 f938 	bl	80001f0 <memchr>
 800ef80:	b138      	cbz	r0, 800ef92 <__ssvfiscanf_r+0xd6>
 800ef82:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800ef84:	eba0 000a 	sub.w	r0, r0, sl
 800ef88:	2301      	movs	r3, #1
 800ef8a:	4083      	lsls	r3, r0
 800ef8c:	4313      	orrs	r3, r2
 800ef8e:	9341      	str	r3, [sp, #260]	@ 0x104
 800ef90:	464d      	mov	r5, r9
 800ef92:	f815 3b01 	ldrb.w	r3, [r5], #1
 800ef96:	2b78      	cmp	r3, #120	@ 0x78
 800ef98:	d806      	bhi.n	800efa8 <__ssvfiscanf_r+0xec>
 800ef9a:	2b57      	cmp	r3, #87	@ 0x57
 800ef9c:	d810      	bhi.n	800efc0 <__ssvfiscanf_r+0x104>
 800ef9e:	2b25      	cmp	r3, #37	@ 0x25
 800efa0:	d0c5      	beq.n	800ef2e <__ssvfiscanf_r+0x72>
 800efa2:	d857      	bhi.n	800f054 <__ssvfiscanf_r+0x198>
 800efa4:	2b00      	cmp	r3, #0
 800efa6:	d065      	beq.n	800f074 <__ssvfiscanf_r+0x1b8>
 800efa8:	2303      	movs	r3, #3
 800efaa:	9347      	str	r3, [sp, #284]	@ 0x11c
 800efac:	230a      	movs	r3, #10
 800efae:	9342      	str	r3, [sp, #264]	@ 0x108
 800efb0:	e078      	b.n	800f0a4 <__ssvfiscanf_r+0x1e8>
 800efb2:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 800efb4:	fb02 1103 	mla	r1, r2, r3, r1
 800efb8:	3930      	subs	r1, #48	@ 0x30
 800efba:	9143      	str	r1, [sp, #268]	@ 0x10c
 800efbc:	464d      	mov	r5, r9
 800efbe:	e7d2      	b.n	800ef66 <__ssvfiscanf_r+0xaa>
 800efc0:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 800efc4:	2a20      	cmp	r2, #32
 800efc6:	d8ef      	bhi.n	800efa8 <__ssvfiscanf_r+0xec>
 800efc8:	a101      	add	r1, pc, #4	@ (adr r1, 800efd0 <__ssvfiscanf_r+0x114>)
 800efca:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800efce:	bf00      	nop
 800efd0:	0800f083 	.word	0x0800f083
 800efd4:	0800efa9 	.word	0x0800efa9
 800efd8:	0800efa9 	.word	0x0800efa9
 800efdc:	0800f0dd 	.word	0x0800f0dd
 800efe0:	0800efa9 	.word	0x0800efa9
 800efe4:	0800efa9 	.word	0x0800efa9
 800efe8:	0800efa9 	.word	0x0800efa9
 800efec:	0800efa9 	.word	0x0800efa9
 800eff0:	0800efa9 	.word	0x0800efa9
 800eff4:	0800efa9 	.word	0x0800efa9
 800eff8:	0800efa9 	.word	0x0800efa9
 800effc:	0800f0f3 	.word	0x0800f0f3
 800f000:	0800f0d9 	.word	0x0800f0d9
 800f004:	0800f05b 	.word	0x0800f05b
 800f008:	0800f05b 	.word	0x0800f05b
 800f00c:	0800f05b 	.word	0x0800f05b
 800f010:	0800efa9 	.word	0x0800efa9
 800f014:	0800f095 	.word	0x0800f095
 800f018:	0800efa9 	.word	0x0800efa9
 800f01c:	0800efa9 	.word	0x0800efa9
 800f020:	0800efa9 	.word	0x0800efa9
 800f024:	0800efa9 	.word	0x0800efa9
 800f028:	0800f103 	.word	0x0800f103
 800f02c:	0800f09d 	.word	0x0800f09d
 800f030:	0800f07b 	.word	0x0800f07b
 800f034:	0800efa9 	.word	0x0800efa9
 800f038:	0800efa9 	.word	0x0800efa9
 800f03c:	0800f0ff 	.word	0x0800f0ff
 800f040:	0800efa9 	.word	0x0800efa9
 800f044:	0800f0d9 	.word	0x0800f0d9
 800f048:	0800efa9 	.word	0x0800efa9
 800f04c:	0800efa9 	.word	0x0800efa9
 800f050:	0800f083 	.word	0x0800f083
 800f054:	3b45      	subs	r3, #69	@ 0x45
 800f056:	2b02      	cmp	r3, #2
 800f058:	d8a6      	bhi.n	800efa8 <__ssvfiscanf_r+0xec>
 800f05a:	2305      	movs	r3, #5
 800f05c:	e021      	b.n	800f0a2 <__ssvfiscanf_r+0x1e6>
 800f05e:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800f060:	4621      	mov	r1, r4
 800f062:	4630      	mov	r0, r6
 800f064:	4798      	blx	r3
 800f066:	2800      	cmp	r0, #0
 800f068:	f43f af66 	beq.w	800ef38 <__ssvfiscanf_r+0x7c>
 800f06c:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800f06e:	2800      	cmp	r0, #0
 800f070:	f040 808b 	bne.w	800f18a <__ssvfiscanf_r+0x2ce>
 800f074:	f04f 30ff 	mov.w	r0, #4294967295
 800f078:	e08b      	b.n	800f192 <__ssvfiscanf_r+0x2d6>
 800f07a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800f07c:	f042 0220 	orr.w	r2, r2, #32
 800f080:	9241      	str	r2, [sp, #260]	@ 0x104
 800f082:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800f084:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800f088:	9241      	str	r2, [sp, #260]	@ 0x104
 800f08a:	2210      	movs	r2, #16
 800f08c:	2b6e      	cmp	r3, #110	@ 0x6e
 800f08e:	9242      	str	r2, [sp, #264]	@ 0x108
 800f090:	d902      	bls.n	800f098 <__ssvfiscanf_r+0x1dc>
 800f092:	e005      	b.n	800f0a0 <__ssvfiscanf_r+0x1e4>
 800f094:	2300      	movs	r3, #0
 800f096:	9342      	str	r3, [sp, #264]	@ 0x108
 800f098:	2303      	movs	r3, #3
 800f09a:	e002      	b.n	800f0a2 <__ssvfiscanf_r+0x1e6>
 800f09c:	2308      	movs	r3, #8
 800f09e:	9342      	str	r3, [sp, #264]	@ 0x108
 800f0a0:	2304      	movs	r3, #4
 800f0a2:	9347      	str	r3, [sp, #284]	@ 0x11c
 800f0a4:	6863      	ldr	r3, [r4, #4]
 800f0a6:	2b00      	cmp	r3, #0
 800f0a8:	dd39      	ble.n	800f11e <__ssvfiscanf_r+0x262>
 800f0aa:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800f0ac:	0659      	lsls	r1, r3, #25
 800f0ae:	d404      	bmi.n	800f0ba <__ssvfiscanf_r+0x1fe>
 800f0b0:	6823      	ldr	r3, [r4, #0]
 800f0b2:	781a      	ldrb	r2, [r3, #0]
 800f0b4:	5cba      	ldrb	r2, [r7, r2]
 800f0b6:	0712      	lsls	r2, r2, #28
 800f0b8:	d438      	bmi.n	800f12c <__ssvfiscanf_r+0x270>
 800f0ba:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 800f0bc:	2b02      	cmp	r3, #2
 800f0be:	dc47      	bgt.n	800f150 <__ssvfiscanf_r+0x294>
 800f0c0:	466b      	mov	r3, sp
 800f0c2:	4622      	mov	r2, r4
 800f0c4:	a941      	add	r1, sp, #260	@ 0x104
 800f0c6:	4630      	mov	r0, r6
 800f0c8:	f000 f86c 	bl	800f1a4 <_scanf_chars>
 800f0cc:	2801      	cmp	r0, #1
 800f0ce:	d064      	beq.n	800f19a <__ssvfiscanf_r+0x2de>
 800f0d0:	2802      	cmp	r0, #2
 800f0d2:	f47f af18 	bne.w	800ef06 <__ssvfiscanf_r+0x4a>
 800f0d6:	e7c9      	b.n	800f06c <__ssvfiscanf_r+0x1b0>
 800f0d8:	220a      	movs	r2, #10
 800f0da:	e7d7      	b.n	800f08c <__ssvfiscanf_r+0x1d0>
 800f0dc:	4629      	mov	r1, r5
 800f0de:	4640      	mov	r0, r8
 800f0e0:	f000 fa5a 	bl	800f598 <__sccl>
 800f0e4:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800f0e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f0ea:	9341      	str	r3, [sp, #260]	@ 0x104
 800f0ec:	4605      	mov	r5, r0
 800f0ee:	2301      	movs	r3, #1
 800f0f0:	e7d7      	b.n	800f0a2 <__ssvfiscanf_r+0x1e6>
 800f0f2:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800f0f4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f0f8:	9341      	str	r3, [sp, #260]	@ 0x104
 800f0fa:	2300      	movs	r3, #0
 800f0fc:	e7d1      	b.n	800f0a2 <__ssvfiscanf_r+0x1e6>
 800f0fe:	2302      	movs	r3, #2
 800f100:	e7cf      	b.n	800f0a2 <__ssvfiscanf_r+0x1e6>
 800f102:	9841      	ldr	r0, [sp, #260]	@ 0x104
 800f104:	06c3      	lsls	r3, r0, #27
 800f106:	f53f aefe 	bmi.w	800ef06 <__ssvfiscanf_r+0x4a>
 800f10a:	9b00      	ldr	r3, [sp, #0]
 800f10c:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800f10e:	1d19      	adds	r1, r3, #4
 800f110:	9100      	str	r1, [sp, #0]
 800f112:	681b      	ldr	r3, [r3, #0]
 800f114:	07c0      	lsls	r0, r0, #31
 800f116:	bf4c      	ite	mi
 800f118:	801a      	strhmi	r2, [r3, #0]
 800f11a:	601a      	strpl	r2, [r3, #0]
 800f11c:	e6f3      	b.n	800ef06 <__ssvfiscanf_r+0x4a>
 800f11e:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800f120:	4621      	mov	r1, r4
 800f122:	4630      	mov	r0, r6
 800f124:	4798      	blx	r3
 800f126:	2800      	cmp	r0, #0
 800f128:	d0bf      	beq.n	800f0aa <__ssvfiscanf_r+0x1ee>
 800f12a:	e79f      	b.n	800f06c <__ssvfiscanf_r+0x1b0>
 800f12c:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800f12e:	3201      	adds	r2, #1
 800f130:	9245      	str	r2, [sp, #276]	@ 0x114
 800f132:	6862      	ldr	r2, [r4, #4]
 800f134:	3a01      	subs	r2, #1
 800f136:	2a00      	cmp	r2, #0
 800f138:	6062      	str	r2, [r4, #4]
 800f13a:	dd02      	ble.n	800f142 <__ssvfiscanf_r+0x286>
 800f13c:	3301      	adds	r3, #1
 800f13e:	6023      	str	r3, [r4, #0]
 800f140:	e7b6      	b.n	800f0b0 <__ssvfiscanf_r+0x1f4>
 800f142:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800f144:	4621      	mov	r1, r4
 800f146:	4630      	mov	r0, r6
 800f148:	4798      	blx	r3
 800f14a:	2800      	cmp	r0, #0
 800f14c:	d0b0      	beq.n	800f0b0 <__ssvfiscanf_r+0x1f4>
 800f14e:	e78d      	b.n	800f06c <__ssvfiscanf_r+0x1b0>
 800f150:	2b04      	cmp	r3, #4
 800f152:	dc0f      	bgt.n	800f174 <__ssvfiscanf_r+0x2b8>
 800f154:	466b      	mov	r3, sp
 800f156:	4622      	mov	r2, r4
 800f158:	a941      	add	r1, sp, #260	@ 0x104
 800f15a:	4630      	mov	r0, r6
 800f15c:	f000 f87c 	bl	800f258 <_scanf_i>
 800f160:	e7b4      	b.n	800f0cc <__ssvfiscanf_r+0x210>
 800f162:	bf00      	nop
 800f164:	0800ee0d 	.word	0x0800ee0d
 800f168:	0800ee83 	.word	0x0800ee83
 800f16c:	08013a71 	.word	0x08013a71
 800f170:	08013ea6 	.word	0x08013ea6
 800f174:	4b0a      	ldr	r3, [pc, #40]	@ (800f1a0 <__ssvfiscanf_r+0x2e4>)
 800f176:	2b00      	cmp	r3, #0
 800f178:	f43f aec5 	beq.w	800ef06 <__ssvfiscanf_r+0x4a>
 800f17c:	466b      	mov	r3, sp
 800f17e:	4622      	mov	r2, r4
 800f180:	a941      	add	r1, sp, #260	@ 0x104
 800f182:	4630      	mov	r0, r6
 800f184:	f7fc fb40 	bl	800b808 <_scanf_float>
 800f188:	e7a0      	b.n	800f0cc <__ssvfiscanf_r+0x210>
 800f18a:	89a3      	ldrh	r3, [r4, #12]
 800f18c:	065b      	lsls	r3, r3, #25
 800f18e:	f53f af71 	bmi.w	800f074 <__ssvfiscanf_r+0x1b8>
 800f192:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 800f196:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f19a:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800f19c:	e7f9      	b.n	800f192 <__ssvfiscanf_r+0x2d6>
 800f19e:	bf00      	nop
 800f1a0:	0800b809 	.word	0x0800b809

0800f1a4 <_scanf_chars>:
 800f1a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f1a8:	4615      	mov	r5, r2
 800f1aa:	688a      	ldr	r2, [r1, #8]
 800f1ac:	4680      	mov	r8, r0
 800f1ae:	460c      	mov	r4, r1
 800f1b0:	b932      	cbnz	r2, 800f1c0 <_scanf_chars+0x1c>
 800f1b2:	698a      	ldr	r2, [r1, #24]
 800f1b4:	2a00      	cmp	r2, #0
 800f1b6:	bf14      	ite	ne
 800f1b8:	f04f 32ff 	movne.w	r2, #4294967295
 800f1bc:	2201      	moveq	r2, #1
 800f1be:	608a      	str	r2, [r1, #8]
 800f1c0:	6822      	ldr	r2, [r4, #0]
 800f1c2:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 800f254 <_scanf_chars+0xb0>
 800f1c6:	06d1      	lsls	r1, r2, #27
 800f1c8:	bf5f      	itttt	pl
 800f1ca:	681a      	ldrpl	r2, [r3, #0]
 800f1cc:	1d11      	addpl	r1, r2, #4
 800f1ce:	6019      	strpl	r1, [r3, #0]
 800f1d0:	6816      	ldrpl	r6, [r2, #0]
 800f1d2:	2700      	movs	r7, #0
 800f1d4:	69a0      	ldr	r0, [r4, #24]
 800f1d6:	b188      	cbz	r0, 800f1fc <_scanf_chars+0x58>
 800f1d8:	2801      	cmp	r0, #1
 800f1da:	d107      	bne.n	800f1ec <_scanf_chars+0x48>
 800f1dc:	682b      	ldr	r3, [r5, #0]
 800f1de:	781a      	ldrb	r2, [r3, #0]
 800f1e0:	6963      	ldr	r3, [r4, #20]
 800f1e2:	5c9b      	ldrb	r3, [r3, r2]
 800f1e4:	b953      	cbnz	r3, 800f1fc <_scanf_chars+0x58>
 800f1e6:	2f00      	cmp	r7, #0
 800f1e8:	d031      	beq.n	800f24e <_scanf_chars+0xaa>
 800f1ea:	e022      	b.n	800f232 <_scanf_chars+0x8e>
 800f1ec:	2802      	cmp	r0, #2
 800f1ee:	d120      	bne.n	800f232 <_scanf_chars+0x8e>
 800f1f0:	682b      	ldr	r3, [r5, #0]
 800f1f2:	781b      	ldrb	r3, [r3, #0]
 800f1f4:	f819 3003 	ldrb.w	r3, [r9, r3]
 800f1f8:	071b      	lsls	r3, r3, #28
 800f1fa:	d41a      	bmi.n	800f232 <_scanf_chars+0x8e>
 800f1fc:	6823      	ldr	r3, [r4, #0]
 800f1fe:	06da      	lsls	r2, r3, #27
 800f200:	bf5e      	ittt	pl
 800f202:	682b      	ldrpl	r3, [r5, #0]
 800f204:	781b      	ldrbpl	r3, [r3, #0]
 800f206:	f806 3b01 	strbpl.w	r3, [r6], #1
 800f20a:	682a      	ldr	r2, [r5, #0]
 800f20c:	686b      	ldr	r3, [r5, #4]
 800f20e:	3201      	adds	r2, #1
 800f210:	602a      	str	r2, [r5, #0]
 800f212:	68a2      	ldr	r2, [r4, #8]
 800f214:	3b01      	subs	r3, #1
 800f216:	3a01      	subs	r2, #1
 800f218:	606b      	str	r3, [r5, #4]
 800f21a:	3701      	adds	r7, #1
 800f21c:	60a2      	str	r2, [r4, #8]
 800f21e:	b142      	cbz	r2, 800f232 <_scanf_chars+0x8e>
 800f220:	2b00      	cmp	r3, #0
 800f222:	dcd7      	bgt.n	800f1d4 <_scanf_chars+0x30>
 800f224:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800f228:	4629      	mov	r1, r5
 800f22a:	4640      	mov	r0, r8
 800f22c:	4798      	blx	r3
 800f22e:	2800      	cmp	r0, #0
 800f230:	d0d0      	beq.n	800f1d4 <_scanf_chars+0x30>
 800f232:	6823      	ldr	r3, [r4, #0]
 800f234:	f013 0310 	ands.w	r3, r3, #16
 800f238:	d105      	bne.n	800f246 <_scanf_chars+0xa2>
 800f23a:	68e2      	ldr	r2, [r4, #12]
 800f23c:	3201      	adds	r2, #1
 800f23e:	60e2      	str	r2, [r4, #12]
 800f240:	69a2      	ldr	r2, [r4, #24]
 800f242:	b102      	cbz	r2, 800f246 <_scanf_chars+0xa2>
 800f244:	7033      	strb	r3, [r6, #0]
 800f246:	6923      	ldr	r3, [r4, #16]
 800f248:	443b      	add	r3, r7
 800f24a:	6123      	str	r3, [r4, #16]
 800f24c:	2000      	movs	r0, #0
 800f24e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f252:	bf00      	nop
 800f254:	08013a71 	.word	0x08013a71

0800f258 <_scanf_i>:
 800f258:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f25c:	4698      	mov	r8, r3
 800f25e:	4b74      	ldr	r3, [pc, #464]	@ (800f430 <_scanf_i+0x1d8>)
 800f260:	460c      	mov	r4, r1
 800f262:	4682      	mov	sl, r0
 800f264:	4616      	mov	r6, r2
 800f266:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800f26a:	b087      	sub	sp, #28
 800f26c:	ab03      	add	r3, sp, #12
 800f26e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800f272:	4b70      	ldr	r3, [pc, #448]	@ (800f434 <_scanf_i+0x1dc>)
 800f274:	69a1      	ldr	r1, [r4, #24]
 800f276:	4a70      	ldr	r2, [pc, #448]	@ (800f438 <_scanf_i+0x1e0>)
 800f278:	2903      	cmp	r1, #3
 800f27a:	bf08      	it	eq
 800f27c:	461a      	moveq	r2, r3
 800f27e:	68a3      	ldr	r3, [r4, #8]
 800f280:	9201      	str	r2, [sp, #4]
 800f282:	1e5a      	subs	r2, r3, #1
 800f284:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800f288:	bf88      	it	hi
 800f28a:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800f28e:	4627      	mov	r7, r4
 800f290:	bf82      	ittt	hi
 800f292:	eb03 0905 	addhi.w	r9, r3, r5
 800f296:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800f29a:	60a3      	strhi	r3, [r4, #8]
 800f29c:	f857 3b1c 	ldr.w	r3, [r7], #28
 800f2a0:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 800f2a4:	bf98      	it	ls
 800f2a6:	f04f 0900 	movls.w	r9, #0
 800f2aa:	6023      	str	r3, [r4, #0]
 800f2ac:	463d      	mov	r5, r7
 800f2ae:	f04f 0b00 	mov.w	fp, #0
 800f2b2:	6831      	ldr	r1, [r6, #0]
 800f2b4:	ab03      	add	r3, sp, #12
 800f2b6:	7809      	ldrb	r1, [r1, #0]
 800f2b8:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800f2bc:	2202      	movs	r2, #2
 800f2be:	f7f0 ff97 	bl	80001f0 <memchr>
 800f2c2:	b328      	cbz	r0, 800f310 <_scanf_i+0xb8>
 800f2c4:	f1bb 0f01 	cmp.w	fp, #1
 800f2c8:	d159      	bne.n	800f37e <_scanf_i+0x126>
 800f2ca:	6862      	ldr	r2, [r4, #4]
 800f2cc:	b92a      	cbnz	r2, 800f2da <_scanf_i+0x82>
 800f2ce:	6822      	ldr	r2, [r4, #0]
 800f2d0:	2108      	movs	r1, #8
 800f2d2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800f2d6:	6061      	str	r1, [r4, #4]
 800f2d8:	6022      	str	r2, [r4, #0]
 800f2da:	6822      	ldr	r2, [r4, #0]
 800f2dc:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 800f2e0:	6022      	str	r2, [r4, #0]
 800f2e2:	68a2      	ldr	r2, [r4, #8]
 800f2e4:	1e51      	subs	r1, r2, #1
 800f2e6:	60a1      	str	r1, [r4, #8]
 800f2e8:	b192      	cbz	r2, 800f310 <_scanf_i+0xb8>
 800f2ea:	6832      	ldr	r2, [r6, #0]
 800f2ec:	1c51      	adds	r1, r2, #1
 800f2ee:	6031      	str	r1, [r6, #0]
 800f2f0:	7812      	ldrb	r2, [r2, #0]
 800f2f2:	f805 2b01 	strb.w	r2, [r5], #1
 800f2f6:	6872      	ldr	r2, [r6, #4]
 800f2f8:	3a01      	subs	r2, #1
 800f2fa:	2a00      	cmp	r2, #0
 800f2fc:	6072      	str	r2, [r6, #4]
 800f2fe:	dc07      	bgt.n	800f310 <_scanf_i+0xb8>
 800f300:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 800f304:	4631      	mov	r1, r6
 800f306:	4650      	mov	r0, sl
 800f308:	4790      	blx	r2
 800f30a:	2800      	cmp	r0, #0
 800f30c:	f040 8085 	bne.w	800f41a <_scanf_i+0x1c2>
 800f310:	f10b 0b01 	add.w	fp, fp, #1
 800f314:	f1bb 0f03 	cmp.w	fp, #3
 800f318:	d1cb      	bne.n	800f2b2 <_scanf_i+0x5a>
 800f31a:	6863      	ldr	r3, [r4, #4]
 800f31c:	b90b      	cbnz	r3, 800f322 <_scanf_i+0xca>
 800f31e:	230a      	movs	r3, #10
 800f320:	6063      	str	r3, [r4, #4]
 800f322:	6863      	ldr	r3, [r4, #4]
 800f324:	4945      	ldr	r1, [pc, #276]	@ (800f43c <_scanf_i+0x1e4>)
 800f326:	6960      	ldr	r0, [r4, #20]
 800f328:	1ac9      	subs	r1, r1, r3
 800f32a:	f000 f935 	bl	800f598 <__sccl>
 800f32e:	f04f 0b00 	mov.w	fp, #0
 800f332:	68a3      	ldr	r3, [r4, #8]
 800f334:	6822      	ldr	r2, [r4, #0]
 800f336:	2b00      	cmp	r3, #0
 800f338:	d03d      	beq.n	800f3b6 <_scanf_i+0x15e>
 800f33a:	6831      	ldr	r1, [r6, #0]
 800f33c:	6960      	ldr	r0, [r4, #20]
 800f33e:	f891 c000 	ldrb.w	ip, [r1]
 800f342:	f810 000c 	ldrb.w	r0, [r0, ip]
 800f346:	2800      	cmp	r0, #0
 800f348:	d035      	beq.n	800f3b6 <_scanf_i+0x15e>
 800f34a:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 800f34e:	d124      	bne.n	800f39a <_scanf_i+0x142>
 800f350:	0510      	lsls	r0, r2, #20
 800f352:	d522      	bpl.n	800f39a <_scanf_i+0x142>
 800f354:	f10b 0b01 	add.w	fp, fp, #1
 800f358:	f1b9 0f00 	cmp.w	r9, #0
 800f35c:	d003      	beq.n	800f366 <_scanf_i+0x10e>
 800f35e:	3301      	adds	r3, #1
 800f360:	f109 39ff 	add.w	r9, r9, #4294967295
 800f364:	60a3      	str	r3, [r4, #8]
 800f366:	6873      	ldr	r3, [r6, #4]
 800f368:	3b01      	subs	r3, #1
 800f36a:	2b00      	cmp	r3, #0
 800f36c:	6073      	str	r3, [r6, #4]
 800f36e:	dd1b      	ble.n	800f3a8 <_scanf_i+0x150>
 800f370:	6833      	ldr	r3, [r6, #0]
 800f372:	3301      	adds	r3, #1
 800f374:	6033      	str	r3, [r6, #0]
 800f376:	68a3      	ldr	r3, [r4, #8]
 800f378:	3b01      	subs	r3, #1
 800f37a:	60a3      	str	r3, [r4, #8]
 800f37c:	e7d9      	b.n	800f332 <_scanf_i+0xda>
 800f37e:	f1bb 0f02 	cmp.w	fp, #2
 800f382:	d1ae      	bne.n	800f2e2 <_scanf_i+0x8a>
 800f384:	6822      	ldr	r2, [r4, #0]
 800f386:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 800f38a:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 800f38e:	d1bf      	bne.n	800f310 <_scanf_i+0xb8>
 800f390:	2110      	movs	r1, #16
 800f392:	6061      	str	r1, [r4, #4]
 800f394:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800f398:	e7a2      	b.n	800f2e0 <_scanf_i+0x88>
 800f39a:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 800f39e:	6022      	str	r2, [r4, #0]
 800f3a0:	780b      	ldrb	r3, [r1, #0]
 800f3a2:	f805 3b01 	strb.w	r3, [r5], #1
 800f3a6:	e7de      	b.n	800f366 <_scanf_i+0x10e>
 800f3a8:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800f3ac:	4631      	mov	r1, r6
 800f3ae:	4650      	mov	r0, sl
 800f3b0:	4798      	blx	r3
 800f3b2:	2800      	cmp	r0, #0
 800f3b4:	d0df      	beq.n	800f376 <_scanf_i+0x11e>
 800f3b6:	6823      	ldr	r3, [r4, #0]
 800f3b8:	05d9      	lsls	r1, r3, #23
 800f3ba:	d50d      	bpl.n	800f3d8 <_scanf_i+0x180>
 800f3bc:	42bd      	cmp	r5, r7
 800f3be:	d909      	bls.n	800f3d4 <_scanf_i+0x17c>
 800f3c0:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800f3c4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f3c8:	4632      	mov	r2, r6
 800f3ca:	4650      	mov	r0, sl
 800f3cc:	4798      	blx	r3
 800f3ce:	f105 39ff 	add.w	r9, r5, #4294967295
 800f3d2:	464d      	mov	r5, r9
 800f3d4:	42bd      	cmp	r5, r7
 800f3d6:	d028      	beq.n	800f42a <_scanf_i+0x1d2>
 800f3d8:	6822      	ldr	r2, [r4, #0]
 800f3da:	f012 0210 	ands.w	r2, r2, #16
 800f3de:	d113      	bne.n	800f408 <_scanf_i+0x1b0>
 800f3e0:	702a      	strb	r2, [r5, #0]
 800f3e2:	6863      	ldr	r3, [r4, #4]
 800f3e4:	9e01      	ldr	r6, [sp, #4]
 800f3e6:	4639      	mov	r1, r7
 800f3e8:	4650      	mov	r0, sl
 800f3ea:	47b0      	blx	r6
 800f3ec:	f8d8 3000 	ldr.w	r3, [r8]
 800f3f0:	6821      	ldr	r1, [r4, #0]
 800f3f2:	1d1a      	adds	r2, r3, #4
 800f3f4:	f8c8 2000 	str.w	r2, [r8]
 800f3f8:	f011 0f20 	tst.w	r1, #32
 800f3fc:	681b      	ldr	r3, [r3, #0]
 800f3fe:	d00f      	beq.n	800f420 <_scanf_i+0x1c8>
 800f400:	6018      	str	r0, [r3, #0]
 800f402:	68e3      	ldr	r3, [r4, #12]
 800f404:	3301      	adds	r3, #1
 800f406:	60e3      	str	r3, [r4, #12]
 800f408:	6923      	ldr	r3, [r4, #16]
 800f40a:	1bed      	subs	r5, r5, r7
 800f40c:	445d      	add	r5, fp
 800f40e:	442b      	add	r3, r5
 800f410:	6123      	str	r3, [r4, #16]
 800f412:	2000      	movs	r0, #0
 800f414:	b007      	add	sp, #28
 800f416:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f41a:	f04f 0b00 	mov.w	fp, #0
 800f41e:	e7ca      	b.n	800f3b6 <_scanf_i+0x15e>
 800f420:	07ca      	lsls	r2, r1, #31
 800f422:	bf4c      	ite	mi
 800f424:	8018      	strhmi	r0, [r3, #0]
 800f426:	6018      	strpl	r0, [r3, #0]
 800f428:	e7eb      	b.n	800f402 <_scanf_i+0x1aa>
 800f42a:	2001      	movs	r0, #1
 800f42c:	e7f2      	b.n	800f414 <_scanf_i+0x1bc>
 800f42e:	bf00      	nop
 800f430:	08011668 	.word	0x08011668
 800f434:	0800af41 	.word	0x0800af41
 800f438:	0800eb2d 	.word	0x0800eb2d
 800f43c:	08013ec1 	.word	0x08013ec1

0800f440 <__sflush_r>:
 800f440:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800f444:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f448:	0716      	lsls	r6, r2, #28
 800f44a:	4605      	mov	r5, r0
 800f44c:	460c      	mov	r4, r1
 800f44e:	d454      	bmi.n	800f4fa <__sflush_r+0xba>
 800f450:	684b      	ldr	r3, [r1, #4]
 800f452:	2b00      	cmp	r3, #0
 800f454:	dc02      	bgt.n	800f45c <__sflush_r+0x1c>
 800f456:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800f458:	2b00      	cmp	r3, #0
 800f45a:	dd48      	ble.n	800f4ee <__sflush_r+0xae>
 800f45c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f45e:	2e00      	cmp	r6, #0
 800f460:	d045      	beq.n	800f4ee <__sflush_r+0xae>
 800f462:	2300      	movs	r3, #0
 800f464:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800f468:	682f      	ldr	r7, [r5, #0]
 800f46a:	6a21      	ldr	r1, [r4, #32]
 800f46c:	602b      	str	r3, [r5, #0]
 800f46e:	d030      	beq.n	800f4d2 <__sflush_r+0x92>
 800f470:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800f472:	89a3      	ldrh	r3, [r4, #12]
 800f474:	0759      	lsls	r1, r3, #29
 800f476:	d505      	bpl.n	800f484 <__sflush_r+0x44>
 800f478:	6863      	ldr	r3, [r4, #4]
 800f47a:	1ad2      	subs	r2, r2, r3
 800f47c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800f47e:	b10b      	cbz	r3, 800f484 <__sflush_r+0x44>
 800f480:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800f482:	1ad2      	subs	r2, r2, r3
 800f484:	2300      	movs	r3, #0
 800f486:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f488:	6a21      	ldr	r1, [r4, #32]
 800f48a:	4628      	mov	r0, r5
 800f48c:	47b0      	blx	r6
 800f48e:	1c43      	adds	r3, r0, #1
 800f490:	89a3      	ldrh	r3, [r4, #12]
 800f492:	d106      	bne.n	800f4a2 <__sflush_r+0x62>
 800f494:	6829      	ldr	r1, [r5, #0]
 800f496:	291d      	cmp	r1, #29
 800f498:	d82b      	bhi.n	800f4f2 <__sflush_r+0xb2>
 800f49a:	4a2a      	ldr	r2, [pc, #168]	@ (800f544 <__sflush_r+0x104>)
 800f49c:	410a      	asrs	r2, r1
 800f49e:	07d6      	lsls	r6, r2, #31
 800f4a0:	d427      	bmi.n	800f4f2 <__sflush_r+0xb2>
 800f4a2:	2200      	movs	r2, #0
 800f4a4:	6062      	str	r2, [r4, #4]
 800f4a6:	04d9      	lsls	r1, r3, #19
 800f4a8:	6922      	ldr	r2, [r4, #16]
 800f4aa:	6022      	str	r2, [r4, #0]
 800f4ac:	d504      	bpl.n	800f4b8 <__sflush_r+0x78>
 800f4ae:	1c42      	adds	r2, r0, #1
 800f4b0:	d101      	bne.n	800f4b6 <__sflush_r+0x76>
 800f4b2:	682b      	ldr	r3, [r5, #0]
 800f4b4:	b903      	cbnz	r3, 800f4b8 <__sflush_r+0x78>
 800f4b6:	6560      	str	r0, [r4, #84]	@ 0x54
 800f4b8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f4ba:	602f      	str	r7, [r5, #0]
 800f4bc:	b1b9      	cbz	r1, 800f4ee <__sflush_r+0xae>
 800f4be:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f4c2:	4299      	cmp	r1, r3
 800f4c4:	d002      	beq.n	800f4cc <__sflush_r+0x8c>
 800f4c6:	4628      	mov	r0, r5
 800f4c8:	f7fe fa36 	bl	800d938 <_free_r>
 800f4cc:	2300      	movs	r3, #0
 800f4ce:	6363      	str	r3, [r4, #52]	@ 0x34
 800f4d0:	e00d      	b.n	800f4ee <__sflush_r+0xae>
 800f4d2:	2301      	movs	r3, #1
 800f4d4:	4628      	mov	r0, r5
 800f4d6:	47b0      	blx	r6
 800f4d8:	4602      	mov	r2, r0
 800f4da:	1c50      	adds	r0, r2, #1
 800f4dc:	d1c9      	bne.n	800f472 <__sflush_r+0x32>
 800f4de:	682b      	ldr	r3, [r5, #0]
 800f4e0:	2b00      	cmp	r3, #0
 800f4e2:	d0c6      	beq.n	800f472 <__sflush_r+0x32>
 800f4e4:	2b1d      	cmp	r3, #29
 800f4e6:	d001      	beq.n	800f4ec <__sflush_r+0xac>
 800f4e8:	2b16      	cmp	r3, #22
 800f4ea:	d11e      	bne.n	800f52a <__sflush_r+0xea>
 800f4ec:	602f      	str	r7, [r5, #0]
 800f4ee:	2000      	movs	r0, #0
 800f4f0:	e022      	b.n	800f538 <__sflush_r+0xf8>
 800f4f2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f4f6:	b21b      	sxth	r3, r3
 800f4f8:	e01b      	b.n	800f532 <__sflush_r+0xf2>
 800f4fa:	690f      	ldr	r7, [r1, #16]
 800f4fc:	2f00      	cmp	r7, #0
 800f4fe:	d0f6      	beq.n	800f4ee <__sflush_r+0xae>
 800f500:	0793      	lsls	r3, r2, #30
 800f502:	680e      	ldr	r6, [r1, #0]
 800f504:	bf08      	it	eq
 800f506:	694b      	ldreq	r3, [r1, #20]
 800f508:	600f      	str	r7, [r1, #0]
 800f50a:	bf18      	it	ne
 800f50c:	2300      	movne	r3, #0
 800f50e:	eba6 0807 	sub.w	r8, r6, r7
 800f512:	608b      	str	r3, [r1, #8]
 800f514:	f1b8 0f00 	cmp.w	r8, #0
 800f518:	dde9      	ble.n	800f4ee <__sflush_r+0xae>
 800f51a:	6a21      	ldr	r1, [r4, #32]
 800f51c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800f51e:	4643      	mov	r3, r8
 800f520:	463a      	mov	r2, r7
 800f522:	4628      	mov	r0, r5
 800f524:	47b0      	blx	r6
 800f526:	2800      	cmp	r0, #0
 800f528:	dc08      	bgt.n	800f53c <__sflush_r+0xfc>
 800f52a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f52e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f532:	81a3      	strh	r3, [r4, #12]
 800f534:	f04f 30ff 	mov.w	r0, #4294967295
 800f538:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f53c:	4407      	add	r7, r0
 800f53e:	eba8 0800 	sub.w	r8, r8, r0
 800f542:	e7e7      	b.n	800f514 <__sflush_r+0xd4>
 800f544:	dfbffffe 	.word	0xdfbffffe

0800f548 <_fflush_r>:
 800f548:	b538      	push	{r3, r4, r5, lr}
 800f54a:	690b      	ldr	r3, [r1, #16]
 800f54c:	4605      	mov	r5, r0
 800f54e:	460c      	mov	r4, r1
 800f550:	b913      	cbnz	r3, 800f558 <_fflush_r+0x10>
 800f552:	2500      	movs	r5, #0
 800f554:	4628      	mov	r0, r5
 800f556:	bd38      	pop	{r3, r4, r5, pc}
 800f558:	b118      	cbz	r0, 800f562 <_fflush_r+0x1a>
 800f55a:	6a03      	ldr	r3, [r0, #32]
 800f55c:	b90b      	cbnz	r3, 800f562 <_fflush_r+0x1a>
 800f55e:	f7fc fbf3 	bl	800bd48 <__sinit>
 800f562:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f566:	2b00      	cmp	r3, #0
 800f568:	d0f3      	beq.n	800f552 <_fflush_r+0xa>
 800f56a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800f56c:	07d0      	lsls	r0, r2, #31
 800f56e:	d404      	bmi.n	800f57a <_fflush_r+0x32>
 800f570:	0599      	lsls	r1, r3, #22
 800f572:	d402      	bmi.n	800f57a <_fflush_r+0x32>
 800f574:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f576:	f7f5 fe82 	bl	800527e <__retarget_lock_acquire_recursive>
 800f57a:	4628      	mov	r0, r5
 800f57c:	4621      	mov	r1, r4
 800f57e:	f7ff ff5f 	bl	800f440 <__sflush_r>
 800f582:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f584:	07da      	lsls	r2, r3, #31
 800f586:	4605      	mov	r5, r0
 800f588:	d4e4      	bmi.n	800f554 <_fflush_r+0xc>
 800f58a:	89a3      	ldrh	r3, [r4, #12]
 800f58c:	059b      	lsls	r3, r3, #22
 800f58e:	d4e1      	bmi.n	800f554 <_fflush_r+0xc>
 800f590:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f592:	f7f5 fe80 	bl	8005296 <__retarget_lock_release_recursive>
 800f596:	e7dd      	b.n	800f554 <_fflush_r+0xc>

0800f598 <__sccl>:
 800f598:	b570      	push	{r4, r5, r6, lr}
 800f59a:	780b      	ldrb	r3, [r1, #0]
 800f59c:	4604      	mov	r4, r0
 800f59e:	2b5e      	cmp	r3, #94	@ 0x5e
 800f5a0:	bf0b      	itete	eq
 800f5a2:	784b      	ldrbeq	r3, [r1, #1]
 800f5a4:	1c4a      	addne	r2, r1, #1
 800f5a6:	1c8a      	addeq	r2, r1, #2
 800f5a8:	2100      	movne	r1, #0
 800f5aa:	bf08      	it	eq
 800f5ac:	2101      	moveq	r1, #1
 800f5ae:	3801      	subs	r0, #1
 800f5b0:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 800f5b4:	f800 1f01 	strb.w	r1, [r0, #1]!
 800f5b8:	42a8      	cmp	r0, r5
 800f5ba:	d1fb      	bne.n	800f5b4 <__sccl+0x1c>
 800f5bc:	b90b      	cbnz	r3, 800f5c2 <__sccl+0x2a>
 800f5be:	1e50      	subs	r0, r2, #1
 800f5c0:	bd70      	pop	{r4, r5, r6, pc}
 800f5c2:	f081 0101 	eor.w	r1, r1, #1
 800f5c6:	54e1      	strb	r1, [r4, r3]
 800f5c8:	4610      	mov	r0, r2
 800f5ca:	4602      	mov	r2, r0
 800f5cc:	f812 5b01 	ldrb.w	r5, [r2], #1
 800f5d0:	2d2d      	cmp	r5, #45	@ 0x2d
 800f5d2:	d005      	beq.n	800f5e0 <__sccl+0x48>
 800f5d4:	2d5d      	cmp	r5, #93	@ 0x5d
 800f5d6:	d016      	beq.n	800f606 <__sccl+0x6e>
 800f5d8:	2d00      	cmp	r5, #0
 800f5da:	d0f1      	beq.n	800f5c0 <__sccl+0x28>
 800f5dc:	462b      	mov	r3, r5
 800f5de:	e7f2      	b.n	800f5c6 <__sccl+0x2e>
 800f5e0:	7846      	ldrb	r6, [r0, #1]
 800f5e2:	2e5d      	cmp	r6, #93	@ 0x5d
 800f5e4:	d0fa      	beq.n	800f5dc <__sccl+0x44>
 800f5e6:	42b3      	cmp	r3, r6
 800f5e8:	dcf8      	bgt.n	800f5dc <__sccl+0x44>
 800f5ea:	3002      	adds	r0, #2
 800f5ec:	461a      	mov	r2, r3
 800f5ee:	3201      	adds	r2, #1
 800f5f0:	4296      	cmp	r6, r2
 800f5f2:	54a1      	strb	r1, [r4, r2]
 800f5f4:	dcfb      	bgt.n	800f5ee <__sccl+0x56>
 800f5f6:	1af2      	subs	r2, r6, r3
 800f5f8:	3a01      	subs	r2, #1
 800f5fa:	1c5d      	adds	r5, r3, #1
 800f5fc:	42b3      	cmp	r3, r6
 800f5fe:	bfa8      	it	ge
 800f600:	2200      	movge	r2, #0
 800f602:	18ab      	adds	r3, r5, r2
 800f604:	e7e1      	b.n	800f5ca <__sccl+0x32>
 800f606:	4610      	mov	r0, r2
 800f608:	e7da      	b.n	800f5c0 <__sccl+0x28>

0800f60a <__submore>:
 800f60a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f60e:	460c      	mov	r4, r1
 800f610:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800f612:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f616:	4299      	cmp	r1, r3
 800f618:	d11d      	bne.n	800f656 <__submore+0x4c>
 800f61a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800f61e:	f7fa fd73 	bl	800a108 <_malloc_r>
 800f622:	b918      	cbnz	r0, 800f62c <__submore+0x22>
 800f624:	f04f 30ff 	mov.w	r0, #4294967295
 800f628:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f62c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f630:	63a3      	str	r3, [r4, #56]	@ 0x38
 800f632:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 800f636:	6360      	str	r0, [r4, #52]	@ 0x34
 800f638:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 800f63c:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800f640:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 800f644:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800f648:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 800f64c:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 800f650:	6020      	str	r0, [r4, #0]
 800f652:	2000      	movs	r0, #0
 800f654:	e7e8      	b.n	800f628 <__submore+0x1e>
 800f656:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 800f658:	0077      	lsls	r7, r6, #1
 800f65a:	463a      	mov	r2, r7
 800f65c:	f000 f86c 	bl	800f738 <_realloc_r>
 800f660:	4605      	mov	r5, r0
 800f662:	2800      	cmp	r0, #0
 800f664:	d0de      	beq.n	800f624 <__submore+0x1a>
 800f666:	eb00 0806 	add.w	r8, r0, r6
 800f66a:	4601      	mov	r1, r0
 800f66c:	4632      	mov	r2, r6
 800f66e:	4640      	mov	r0, r8
 800f670:	f7fd faf0 	bl	800cc54 <memcpy>
 800f674:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 800f678:	f8c4 8000 	str.w	r8, [r4]
 800f67c:	e7e9      	b.n	800f652 <__submore+0x48>

0800f67e <memmove>:
 800f67e:	4288      	cmp	r0, r1
 800f680:	b510      	push	{r4, lr}
 800f682:	eb01 0402 	add.w	r4, r1, r2
 800f686:	d902      	bls.n	800f68e <memmove+0x10>
 800f688:	4284      	cmp	r4, r0
 800f68a:	4623      	mov	r3, r4
 800f68c:	d807      	bhi.n	800f69e <memmove+0x20>
 800f68e:	1e43      	subs	r3, r0, #1
 800f690:	42a1      	cmp	r1, r4
 800f692:	d008      	beq.n	800f6a6 <memmove+0x28>
 800f694:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f698:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f69c:	e7f8      	b.n	800f690 <memmove+0x12>
 800f69e:	4402      	add	r2, r0
 800f6a0:	4601      	mov	r1, r0
 800f6a2:	428a      	cmp	r2, r1
 800f6a4:	d100      	bne.n	800f6a8 <memmove+0x2a>
 800f6a6:	bd10      	pop	{r4, pc}
 800f6a8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f6ac:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f6b0:	e7f7      	b.n	800f6a2 <memmove+0x24>
	...

0800f6b4 <__gettzinfo>:
 800f6b4:	4800      	ldr	r0, [pc, #0]	@ (800f6b8 <__gettzinfo+0x4>)
 800f6b6:	4770      	bx	lr
 800f6b8:	200001f8 	.word	0x200001f8

0800f6bc <__assert_func>:
 800f6bc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f6be:	4614      	mov	r4, r2
 800f6c0:	461a      	mov	r2, r3
 800f6c2:	4b09      	ldr	r3, [pc, #36]	@ (800f6e8 <__assert_func+0x2c>)
 800f6c4:	681b      	ldr	r3, [r3, #0]
 800f6c6:	4605      	mov	r5, r0
 800f6c8:	68d8      	ldr	r0, [r3, #12]
 800f6ca:	b954      	cbnz	r4, 800f6e2 <__assert_func+0x26>
 800f6cc:	4b07      	ldr	r3, [pc, #28]	@ (800f6ec <__assert_func+0x30>)
 800f6ce:	461c      	mov	r4, r3
 800f6d0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f6d4:	9100      	str	r1, [sp, #0]
 800f6d6:	462b      	mov	r3, r5
 800f6d8:	4905      	ldr	r1, [pc, #20]	@ (800f6f0 <__assert_func+0x34>)
 800f6da:	f000 f85b 	bl	800f794 <fiprintf>
 800f6de:	f000 f86b 	bl	800f7b8 <abort>
 800f6e2:	4b04      	ldr	r3, [pc, #16]	@ (800f6f4 <__assert_func+0x38>)
 800f6e4:	e7f4      	b.n	800f6d0 <__assert_func+0x14>
 800f6e6:	bf00      	nop
 800f6e8:	200001a4 	.word	0x200001a4
 800f6ec:	0801296b 	.word	0x0801296b
 800f6f0:	08013f39 	.word	0x08013f39
 800f6f4:	08013f2c 	.word	0x08013f2c

0800f6f8 <_calloc_r>:
 800f6f8:	b570      	push	{r4, r5, r6, lr}
 800f6fa:	fba1 5402 	umull	r5, r4, r1, r2
 800f6fe:	b93c      	cbnz	r4, 800f710 <_calloc_r+0x18>
 800f700:	4629      	mov	r1, r5
 800f702:	f7fa fd01 	bl	800a108 <_malloc_r>
 800f706:	4606      	mov	r6, r0
 800f708:	b928      	cbnz	r0, 800f716 <_calloc_r+0x1e>
 800f70a:	2600      	movs	r6, #0
 800f70c:	4630      	mov	r0, r6
 800f70e:	bd70      	pop	{r4, r5, r6, pc}
 800f710:	220c      	movs	r2, #12
 800f712:	6002      	str	r2, [r0, #0]
 800f714:	e7f9      	b.n	800f70a <_calloc_r+0x12>
 800f716:	462a      	mov	r2, r5
 800f718:	4621      	mov	r1, r4
 800f71a:	f7fc fc47 	bl	800bfac <memset>
 800f71e:	e7f5      	b.n	800f70c <_calloc_r+0x14>

0800f720 <__env_lock>:
 800f720:	4801      	ldr	r0, [pc, #4]	@ (800f728 <__env_lock+0x8>)
 800f722:	f7f5 bdac 	b.w	800527e <__retarget_lock_acquire_recursive>
 800f726:	bf00      	nop
 800f728:	20002830 	.word	0x20002830

0800f72c <__env_unlock>:
 800f72c:	4801      	ldr	r0, [pc, #4]	@ (800f734 <__env_unlock+0x8>)
 800f72e:	f7f5 bdb2 	b.w	8005296 <__retarget_lock_release_recursive>
 800f732:	bf00      	nop
 800f734:	20002830 	.word	0x20002830

0800f738 <_realloc_r>:
 800f738:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f73c:	4680      	mov	r8, r0
 800f73e:	4615      	mov	r5, r2
 800f740:	460c      	mov	r4, r1
 800f742:	b921      	cbnz	r1, 800f74e <_realloc_r+0x16>
 800f744:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f748:	4611      	mov	r1, r2
 800f74a:	f7fa bcdd 	b.w	800a108 <_malloc_r>
 800f74e:	b92a      	cbnz	r2, 800f75c <_realloc_r+0x24>
 800f750:	f7fe f8f2 	bl	800d938 <_free_r>
 800f754:	2400      	movs	r4, #0
 800f756:	4620      	mov	r0, r4
 800f758:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f75c:	f000 f833 	bl	800f7c6 <_malloc_usable_size_r>
 800f760:	4285      	cmp	r5, r0
 800f762:	4606      	mov	r6, r0
 800f764:	d802      	bhi.n	800f76c <_realloc_r+0x34>
 800f766:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800f76a:	d8f4      	bhi.n	800f756 <_realloc_r+0x1e>
 800f76c:	4629      	mov	r1, r5
 800f76e:	4640      	mov	r0, r8
 800f770:	f7fa fcca 	bl	800a108 <_malloc_r>
 800f774:	4607      	mov	r7, r0
 800f776:	2800      	cmp	r0, #0
 800f778:	d0ec      	beq.n	800f754 <_realloc_r+0x1c>
 800f77a:	42b5      	cmp	r5, r6
 800f77c:	462a      	mov	r2, r5
 800f77e:	4621      	mov	r1, r4
 800f780:	bf28      	it	cs
 800f782:	4632      	movcs	r2, r6
 800f784:	f7fd fa66 	bl	800cc54 <memcpy>
 800f788:	4621      	mov	r1, r4
 800f78a:	4640      	mov	r0, r8
 800f78c:	f7fe f8d4 	bl	800d938 <_free_r>
 800f790:	463c      	mov	r4, r7
 800f792:	e7e0      	b.n	800f756 <_realloc_r+0x1e>

0800f794 <fiprintf>:
 800f794:	b40e      	push	{r1, r2, r3}
 800f796:	b503      	push	{r0, r1, lr}
 800f798:	4601      	mov	r1, r0
 800f79a:	ab03      	add	r3, sp, #12
 800f79c:	4805      	ldr	r0, [pc, #20]	@ (800f7b4 <fiprintf+0x20>)
 800f79e:	f853 2b04 	ldr.w	r2, [r3], #4
 800f7a2:	6800      	ldr	r0, [r0, #0]
 800f7a4:	9301      	str	r3, [sp, #4]
 800f7a6:	f000 f83f 	bl	800f828 <_vfiprintf_r>
 800f7aa:	b002      	add	sp, #8
 800f7ac:	f85d eb04 	ldr.w	lr, [sp], #4
 800f7b0:	b003      	add	sp, #12
 800f7b2:	4770      	bx	lr
 800f7b4:	200001a4 	.word	0x200001a4

0800f7b8 <abort>:
 800f7b8:	b508      	push	{r3, lr}
 800f7ba:	2006      	movs	r0, #6
 800f7bc:	f000 fa08 	bl	800fbd0 <raise>
 800f7c0:	2001      	movs	r0, #1
 800f7c2:	f7f5 fc6b 	bl	800509c <_exit>

0800f7c6 <_malloc_usable_size_r>:
 800f7c6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f7ca:	1f18      	subs	r0, r3, #4
 800f7cc:	2b00      	cmp	r3, #0
 800f7ce:	bfbc      	itt	lt
 800f7d0:	580b      	ldrlt	r3, [r1, r0]
 800f7d2:	18c0      	addlt	r0, r0, r3
 800f7d4:	4770      	bx	lr

0800f7d6 <__sfputc_r>:
 800f7d6:	6893      	ldr	r3, [r2, #8]
 800f7d8:	3b01      	subs	r3, #1
 800f7da:	2b00      	cmp	r3, #0
 800f7dc:	b410      	push	{r4}
 800f7de:	6093      	str	r3, [r2, #8]
 800f7e0:	da08      	bge.n	800f7f4 <__sfputc_r+0x1e>
 800f7e2:	6994      	ldr	r4, [r2, #24]
 800f7e4:	42a3      	cmp	r3, r4
 800f7e6:	db01      	blt.n	800f7ec <__sfputc_r+0x16>
 800f7e8:	290a      	cmp	r1, #10
 800f7ea:	d103      	bne.n	800f7f4 <__sfputc_r+0x1e>
 800f7ec:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f7f0:	f000 b932 	b.w	800fa58 <__swbuf_r>
 800f7f4:	6813      	ldr	r3, [r2, #0]
 800f7f6:	1c58      	adds	r0, r3, #1
 800f7f8:	6010      	str	r0, [r2, #0]
 800f7fa:	7019      	strb	r1, [r3, #0]
 800f7fc:	4608      	mov	r0, r1
 800f7fe:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f802:	4770      	bx	lr

0800f804 <__sfputs_r>:
 800f804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f806:	4606      	mov	r6, r0
 800f808:	460f      	mov	r7, r1
 800f80a:	4614      	mov	r4, r2
 800f80c:	18d5      	adds	r5, r2, r3
 800f80e:	42ac      	cmp	r4, r5
 800f810:	d101      	bne.n	800f816 <__sfputs_r+0x12>
 800f812:	2000      	movs	r0, #0
 800f814:	e007      	b.n	800f826 <__sfputs_r+0x22>
 800f816:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f81a:	463a      	mov	r2, r7
 800f81c:	4630      	mov	r0, r6
 800f81e:	f7ff ffda 	bl	800f7d6 <__sfputc_r>
 800f822:	1c43      	adds	r3, r0, #1
 800f824:	d1f3      	bne.n	800f80e <__sfputs_r+0xa>
 800f826:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800f828 <_vfiprintf_r>:
 800f828:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f82c:	460d      	mov	r5, r1
 800f82e:	b09d      	sub	sp, #116	@ 0x74
 800f830:	4614      	mov	r4, r2
 800f832:	4698      	mov	r8, r3
 800f834:	4606      	mov	r6, r0
 800f836:	b118      	cbz	r0, 800f840 <_vfiprintf_r+0x18>
 800f838:	6a03      	ldr	r3, [r0, #32]
 800f83a:	b90b      	cbnz	r3, 800f840 <_vfiprintf_r+0x18>
 800f83c:	f7fc fa84 	bl	800bd48 <__sinit>
 800f840:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f842:	07d9      	lsls	r1, r3, #31
 800f844:	d405      	bmi.n	800f852 <_vfiprintf_r+0x2a>
 800f846:	89ab      	ldrh	r3, [r5, #12]
 800f848:	059a      	lsls	r2, r3, #22
 800f84a:	d402      	bmi.n	800f852 <_vfiprintf_r+0x2a>
 800f84c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f84e:	f7f5 fd16 	bl	800527e <__retarget_lock_acquire_recursive>
 800f852:	89ab      	ldrh	r3, [r5, #12]
 800f854:	071b      	lsls	r3, r3, #28
 800f856:	d501      	bpl.n	800f85c <_vfiprintf_r+0x34>
 800f858:	692b      	ldr	r3, [r5, #16]
 800f85a:	b99b      	cbnz	r3, 800f884 <_vfiprintf_r+0x5c>
 800f85c:	4629      	mov	r1, r5
 800f85e:	4630      	mov	r0, r6
 800f860:	f000 f938 	bl	800fad4 <__swsetup_r>
 800f864:	b170      	cbz	r0, 800f884 <_vfiprintf_r+0x5c>
 800f866:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f868:	07dc      	lsls	r4, r3, #31
 800f86a:	d504      	bpl.n	800f876 <_vfiprintf_r+0x4e>
 800f86c:	f04f 30ff 	mov.w	r0, #4294967295
 800f870:	b01d      	add	sp, #116	@ 0x74
 800f872:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f876:	89ab      	ldrh	r3, [r5, #12]
 800f878:	0598      	lsls	r0, r3, #22
 800f87a:	d4f7      	bmi.n	800f86c <_vfiprintf_r+0x44>
 800f87c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f87e:	f7f5 fd0a 	bl	8005296 <__retarget_lock_release_recursive>
 800f882:	e7f3      	b.n	800f86c <_vfiprintf_r+0x44>
 800f884:	2300      	movs	r3, #0
 800f886:	9309      	str	r3, [sp, #36]	@ 0x24
 800f888:	2320      	movs	r3, #32
 800f88a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f88e:	f8cd 800c 	str.w	r8, [sp, #12]
 800f892:	2330      	movs	r3, #48	@ 0x30
 800f894:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800fa44 <_vfiprintf_r+0x21c>
 800f898:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f89c:	f04f 0901 	mov.w	r9, #1
 800f8a0:	4623      	mov	r3, r4
 800f8a2:	469a      	mov	sl, r3
 800f8a4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f8a8:	b10a      	cbz	r2, 800f8ae <_vfiprintf_r+0x86>
 800f8aa:	2a25      	cmp	r2, #37	@ 0x25
 800f8ac:	d1f9      	bne.n	800f8a2 <_vfiprintf_r+0x7a>
 800f8ae:	ebba 0b04 	subs.w	fp, sl, r4
 800f8b2:	d00b      	beq.n	800f8cc <_vfiprintf_r+0xa4>
 800f8b4:	465b      	mov	r3, fp
 800f8b6:	4622      	mov	r2, r4
 800f8b8:	4629      	mov	r1, r5
 800f8ba:	4630      	mov	r0, r6
 800f8bc:	f7ff ffa2 	bl	800f804 <__sfputs_r>
 800f8c0:	3001      	adds	r0, #1
 800f8c2:	f000 80a7 	beq.w	800fa14 <_vfiprintf_r+0x1ec>
 800f8c6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f8c8:	445a      	add	r2, fp
 800f8ca:	9209      	str	r2, [sp, #36]	@ 0x24
 800f8cc:	f89a 3000 	ldrb.w	r3, [sl]
 800f8d0:	2b00      	cmp	r3, #0
 800f8d2:	f000 809f 	beq.w	800fa14 <_vfiprintf_r+0x1ec>
 800f8d6:	2300      	movs	r3, #0
 800f8d8:	f04f 32ff 	mov.w	r2, #4294967295
 800f8dc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f8e0:	f10a 0a01 	add.w	sl, sl, #1
 800f8e4:	9304      	str	r3, [sp, #16]
 800f8e6:	9307      	str	r3, [sp, #28]
 800f8e8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800f8ec:	931a      	str	r3, [sp, #104]	@ 0x68
 800f8ee:	4654      	mov	r4, sl
 800f8f0:	2205      	movs	r2, #5
 800f8f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f8f6:	4853      	ldr	r0, [pc, #332]	@ (800fa44 <_vfiprintf_r+0x21c>)
 800f8f8:	f7f0 fc7a 	bl	80001f0 <memchr>
 800f8fc:	9a04      	ldr	r2, [sp, #16]
 800f8fe:	b9d8      	cbnz	r0, 800f938 <_vfiprintf_r+0x110>
 800f900:	06d1      	lsls	r1, r2, #27
 800f902:	bf44      	itt	mi
 800f904:	2320      	movmi	r3, #32
 800f906:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f90a:	0713      	lsls	r3, r2, #28
 800f90c:	bf44      	itt	mi
 800f90e:	232b      	movmi	r3, #43	@ 0x2b
 800f910:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f914:	f89a 3000 	ldrb.w	r3, [sl]
 800f918:	2b2a      	cmp	r3, #42	@ 0x2a
 800f91a:	d015      	beq.n	800f948 <_vfiprintf_r+0x120>
 800f91c:	9a07      	ldr	r2, [sp, #28]
 800f91e:	4654      	mov	r4, sl
 800f920:	2000      	movs	r0, #0
 800f922:	f04f 0c0a 	mov.w	ip, #10
 800f926:	4621      	mov	r1, r4
 800f928:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f92c:	3b30      	subs	r3, #48	@ 0x30
 800f92e:	2b09      	cmp	r3, #9
 800f930:	d94b      	bls.n	800f9ca <_vfiprintf_r+0x1a2>
 800f932:	b1b0      	cbz	r0, 800f962 <_vfiprintf_r+0x13a>
 800f934:	9207      	str	r2, [sp, #28]
 800f936:	e014      	b.n	800f962 <_vfiprintf_r+0x13a>
 800f938:	eba0 0308 	sub.w	r3, r0, r8
 800f93c:	fa09 f303 	lsl.w	r3, r9, r3
 800f940:	4313      	orrs	r3, r2
 800f942:	9304      	str	r3, [sp, #16]
 800f944:	46a2      	mov	sl, r4
 800f946:	e7d2      	b.n	800f8ee <_vfiprintf_r+0xc6>
 800f948:	9b03      	ldr	r3, [sp, #12]
 800f94a:	1d19      	adds	r1, r3, #4
 800f94c:	681b      	ldr	r3, [r3, #0]
 800f94e:	9103      	str	r1, [sp, #12]
 800f950:	2b00      	cmp	r3, #0
 800f952:	bfbb      	ittet	lt
 800f954:	425b      	neglt	r3, r3
 800f956:	f042 0202 	orrlt.w	r2, r2, #2
 800f95a:	9307      	strge	r3, [sp, #28]
 800f95c:	9307      	strlt	r3, [sp, #28]
 800f95e:	bfb8      	it	lt
 800f960:	9204      	strlt	r2, [sp, #16]
 800f962:	7823      	ldrb	r3, [r4, #0]
 800f964:	2b2e      	cmp	r3, #46	@ 0x2e
 800f966:	d10a      	bne.n	800f97e <_vfiprintf_r+0x156>
 800f968:	7863      	ldrb	r3, [r4, #1]
 800f96a:	2b2a      	cmp	r3, #42	@ 0x2a
 800f96c:	d132      	bne.n	800f9d4 <_vfiprintf_r+0x1ac>
 800f96e:	9b03      	ldr	r3, [sp, #12]
 800f970:	1d1a      	adds	r2, r3, #4
 800f972:	681b      	ldr	r3, [r3, #0]
 800f974:	9203      	str	r2, [sp, #12]
 800f976:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f97a:	3402      	adds	r4, #2
 800f97c:	9305      	str	r3, [sp, #20]
 800f97e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800fa54 <_vfiprintf_r+0x22c>
 800f982:	7821      	ldrb	r1, [r4, #0]
 800f984:	2203      	movs	r2, #3
 800f986:	4650      	mov	r0, sl
 800f988:	f7f0 fc32 	bl	80001f0 <memchr>
 800f98c:	b138      	cbz	r0, 800f99e <_vfiprintf_r+0x176>
 800f98e:	9b04      	ldr	r3, [sp, #16]
 800f990:	eba0 000a 	sub.w	r0, r0, sl
 800f994:	2240      	movs	r2, #64	@ 0x40
 800f996:	4082      	lsls	r2, r0
 800f998:	4313      	orrs	r3, r2
 800f99a:	3401      	adds	r4, #1
 800f99c:	9304      	str	r3, [sp, #16]
 800f99e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f9a2:	4829      	ldr	r0, [pc, #164]	@ (800fa48 <_vfiprintf_r+0x220>)
 800f9a4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800f9a8:	2206      	movs	r2, #6
 800f9aa:	f7f0 fc21 	bl	80001f0 <memchr>
 800f9ae:	2800      	cmp	r0, #0
 800f9b0:	d03f      	beq.n	800fa32 <_vfiprintf_r+0x20a>
 800f9b2:	4b26      	ldr	r3, [pc, #152]	@ (800fa4c <_vfiprintf_r+0x224>)
 800f9b4:	bb1b      	cbnz	r3, 800f9fe <_vfiprintf_r+0x1d6>
 800f9b6:	9b03      	ldr	r3, [sp, #12]
 800f9b8:	3307      	adds	r3, #7
 800f9ba:	f023 0307 	bic.w	r3, r3, #7
 800f9be:	3308      	adds	r3, #8
 800f9c0:	9303      	str	r3, [sp, #12]
 800f9c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f9c4:	443b      	add	r3, r7
 800f9c6:	9309      	str	r3, [sp, #36]	@ 0x24
 800f9c8:	e76a      	b.n	800f8a0 <_vfiprintf_r+0x78>
 800f9ca:	fb0c 3202 	mla	r2, ip, r2, r3
 800f9ce:	460c      	mov	r4, r1
 800f9d0:	2001      	movs	r0, #1
 800f9d2:	e7a8      	b.n	800f926 <_vfiprintf_r+0xfe>
 800f9d4:	2300      	movs	r3, #0
 800f9d6:	3401      	adds	r4, #1
 800f9d8:	9305      	str	r3, [sp, #20]
 800f9da:	4619      	mov	r1, r3
 800f9dc:	f04f 0c0a 	mov.w	ip, #10
 800f9e0:	4620      	mov	r0, r4
 800f9e2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f9e6:	3a30      	subs	r2, #48	@ 0x30
 800f9e8:	2a09      	cmp	r2, #9
 800f9ea:	d903      	bls.n	800f9f4 <_vfiprintf_r+0x1cc>
 800f9ec:	2b00      	cmp	r3, #0
 800f9ee:	d0c6      	beq.n	800f97e <_vfiprintf_r+0x156>
 800f9f0:	9105      	str	r1, [sp, #20]
 800f9f2:	e7c4      	b.n	800f97e <_vfiprintf_r+0x156>
 800f9f4:	fb0c 2101 	mla	r1, ip, r1, r2
 800f9f8:	4604      	mov	r4, r0
 800f9fa:	2301      	movs	r3, #1
 800f9fc:	e7f0      	b.n	800f9e0 <_vfiprintf_r+0x1b8>
 800f9fe:	ab03      	add	r3, sp, #12
 800fa00:	9300      	str	r3, [sp, #0]
 800fa02:	462a      	mov	r2, r5
 800fa04:	4b12      	ldr	r3, [pc, #72]	@ (800fa50 <_vfiprintf_r+0x228>)
 800fa06:	a904      	add	r1, sp, #16
 800fa08:	4630      	mov	r0, r6
 800fa0a:	f7fb fb45 	bl	800b098 <_printf_float>
 800fa0e:	4607      	mov	r7, r0
 800fa10:	1c78      	adds	r0, r7, #1
 800fa12:	d1d6      	bne.n	800f9c2 <_vfiprintf_r+0x19a>
 800fa14:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800fa16:	07d9      	lsls	r1, r3, #31
 800fa18:	d405      	bmi.n	800fa26 <_vfiprintf_r+0x1fe>
 800fa1a:	89ab      	ldrh	r3, [r5, #12]
 800fa1c:	059a      	lsls	r2, r3, #22
 800fa1e:	d402      	bmi.n	800fa26 <_vfiprintf_r+0x1fe>
 800fa20:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800fa22:	f7f5 fc38 	bl	8005296 <__retarget_lock_release_recursive>
 800fa26:	89ab      	ldrh	r3, [r5, #12]
 800fa28:	065b      	lsls	r3, r3, #25
 800fa2a:	f53f af1f 	bmi.w	800f86c <_vfiprintf_r+0x44>
 800fa2e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800fa30:	e71e      	b.n	800f870 <_vfiprintf_r+0x48>
 800fa32:	ab03      	add	r3, sp, #12
 800fa34:	9300      	str	r3, [sp, #0]
 800fa36:	462a      	mov	r2, r5
 800fa38:	4b05      	ldr	r3, [pc, #20]	@ (800fa50 <_vfiprintf_r+0x228>)
 800fa3a:	a904      	add	r1, sp, #16
 800fa3c:	4630      	mov	r0, r6
 800fa3e:	f7fb fdc3 	bl	800b5c8 <_printf_i>
 800fa42:	e7e4      	b.n	800fa0e <_vfiprintf_r+0x1e6>
 800fa44:	08013ea0 	.word	0x08013ea0
 800fa48:	08013eaa 	.word	0x08013eaa
 800fa4c:	0800b099 	.word	0x0800b099
 800fa50:	0800f805 	.word	0x0800f805
 800fa54:	08013ea6 	.word	0x08013ea6

0800fa58 <__swbuf_r>:
 800fa58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fa5a:	460e      	mov	r6, r1
 800fa5c:	4614      	mov	r4, r2
 800fa5e:	4605      	mov	r5, r0
 800fa60:	b118      	cbz	r0, 800fa6a <__swbuf_r+0x12>
 800fa62:	6a03      	ldr	r3, [r0, #32]
 800fa64:	b90b      	cbnz	r3, 800fa6a <__swbuf_r+0x12>
 800fa66:	f7fc f96f 	bl	800bd48 <__sinit>
 800fa6a:	69a3      	ldr	r3, [r4, #24]
 800fa6c:	60a3      	str	r3, [r4, #8]
 800fa6e:	89a3      	ldrh	r3, [r4, #12]
 800fa70:	071a      	lsls	r2, r3, #28
 800fa72:	d501      	bpl.n	800fa78 <__swbuf_r+0x20>
 800fa74:	6923      	ldr	r3, [r4, #16]
 800fa76:	b943      	cbnz	r3, 800fa8a <__swbuf_r+0x32>
 800fa78:	4621      	mov	r1, r4
 800fa7a:	4628      	mov	r0, r5
 800fa7c:	f000 f82a 	bl	800fad4 <__swsetup_r>
 800fa80:	b118      	cbz	r0, 800fa8a <__swbuf_r+0x32>
 800fa82:	f04f 37ff 	mov.w	r7, #4294967295
 800fa86:	4638      	mov	r0, r7
 800fa88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fa8a:	6823      	ldr	r3, [r4, #0]
 800fa8c:	6922      	ldr	r2, [r4, #16]
 800fa8e:	1a98      	subs	r0, r3, r2
 800fa90:	6963      	ldr	r3, [r4, #20]
 800fa92:	b2f6      	uxtb	r6, r6
 800fa94:	4283      	cmp	r3, r0
 800fa96:	4637      	mov	r7, r6
 800fa98:	dc05      	bgt.n	800faa6 <__swbuf_r+0x4e>
 800fa9a:	4621      	mov	r1, r4
 800fa9c:	4628      	mov	r0, r5
 800fa9e:	f7ff fd53 	bl	800f548 <_fflush_r>
 800faa2:	2800      	cmp	r0, #0
 800faa4:	d1ed      	bne.n	800fa82 <__swbuf_r+0x2a>
 800faa6:	68a3      	ldr	r3, [r4, #8]
 800faa8:	3b01      	subs	r3, #1
 800faaa:	60a3      	str	r3, [r4, #8]
 800faac:	6823      	ldr	r3, [r4, #0]
 800faae:	1c5a      	adds	r2, r3, #1
 800fab0:	6022      	str	r2, [r4, #0]
 800fab2:	701e      	strb	r6, [r3, #0]
 800fab4:	6962      	ldr	r2, [r4, #20]
 800fab6:	1c43      	adds	r3, r0, #1
 800fab8:	429a      	cmp	r2, r3
 800faba:	d004      	beq.n	800fac6 <__swbuf_r+0x6e>
 800fabc:	89a3      	ldrh	r3, [r4, #12]
 800fabe:	07db      	lsls	r3, r3, #31
 800fac0:	d5e1      	bpl.n	800fa86 <__swbuf_r+0x2e>
 800fac2:	2e0a      	cmp	r6, #10
 800fac4:	d1df      	bne.n	800fa86 <__swbuf_r+0x2e>
 800fac6:	4621      	mov	r1, r4
 800fac8:	4628      	mov	r0, r5
 800faca:	f7ff fd3d 	bl	800f548 <_fflush_r>
 800face:	2800      	cmp	r0, #0
 800fad0:	d0d9      	beq.n	800fa86 <__swbuf_r+0x2e>
 800fad2:	e7d6      	b.n	800fa82 <__swbuf_r+0x2a>

0800fad4 <__swsetup_r>:
 800fad4:	b538      	push	{r3, r4, r5, lr}
 800fad6:	4b29      	ldr	r3, [pc, #164]	@ (800fb7c <__swsetup_r+0xa8>)
 800fad8:	4605      	mov	r5, r0
 800fada:	6818      	ldr	r0, [r3, #0]
 800fadc:	460c      	mov	r4, r1
 800fade:	b118      	cbz	r0, 800fae8 <__swsetup_r+0x14>
 800fae0:	6a03      	ldr	r3, [r0, #32]
 800fae2:	b90b      	cbnz	r3, 800fae8 <__swsetup_r+0x14>
 800fae4:	f7fc f930 	bl	800bd48 <__sinit>
 800fae8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800faec:	0719      	lsls	r1, r3, #28
 800faee:	d422      	bmi.n	800fb36 <__swsetup_r+0x62>
 800faf0:	06da      	lsls	r2, r3, #27
 800faf2:	d407      	bmi.n	800fb04 <__swsetup_r+0x30>
 800faf4:	2209      	movs	r2, #9
 800faf6:	602a      	str	r2, [r5, #0]
 800faf8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fafc:	81a3      	strh	r3, [r4, #12]
 800fafe:	f04f 30ff 	mov.w	r0, #4294967295
 800fb02:	e033      	b.n	800fb6c <__swsetup_r+0x98>
 800fb04:	0758      	lsls	r0, r3, #29
 800fb06:	d512      	bpl.n	800fb2e <__swsetup_r+0x5a>
 800fb08:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800fb0a:	b141      	cbz	r1, 800fb1e <__swsetup_r+0x4a>
 800fb0c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800fb10:	4299      	cmp	r1, r3
 800fb12:	d002      	beq.n	800fb1a <__swsetup_r+0x46>
 800fb14:	4628      	mov	r0, r5
 800fb16:	f7fd ff0f 	bl	800d938 <_free_r>
 800fb1a:	2300      	movs	r3, #0
 800fb1c:	6363      	str	r3, [r4, #52]	@ 0x34
 800fb1e:	89a3      	ldrh	r3, [r4, #12]
 800fb20:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800fb24:	81a3      	strh	r3, [r4, #12]
 800fb26:	2300      	movs	r3, #0
 800fb28:	6063      	str	r3, [r4, #4]
 800fb2a:	6923      	ldr	r3, [r4, #16]
 800fb2c:	6023      	str	r3, [r4, #0]
 800fb2e:	89a3      	ldrh	r3, [r4, #12]
 800fb30:	f043 0308 	orr.w	r3, r3, #8
 800fb34:	81a3      	strh	r3, [r4, #12]
 800fb36:	6923      	ldr	r3, [r4, #16]
 800fb38:	b94b      	cbnz	r3, 800fb4e <__swsetup_r+0x7a>
 800fb3a:	89a3      	ldrh	r3, [r4, #12]
 800fb3c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800fb40:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800fb44:	d003      	beq.n	800fb4e <__swsetup_r+0x7a>
 800fb46:	4621      	mov	r1, r4
 800fb48:	4628      	mov	r0, r5
 800fb4a:	f000 f883 	bl	800fc54 <__smakebuf_r>
 800fb4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fb52:	f013 0201 	ands.w	r2, r3, #1
 800fb56:	d00a      	beq.n	800fb6e <__swsetup_r+0x9a>
 800fb58:	2200      	movs	r2, #0
 800fb5a:	60a2      	str	r2, [r4, #8]
 800fb5c:	6962      	ldr	r2, [r4, #20]
 800fb5e:	4252      	negs	r2, r2
 800fb60:	61a2      	str	r2, [r4, #24]
 800fb62:	6922      	ldr	r2, [r4, #16]
 800fb64:	b942      	cbnz	r2, 800fb78 <__swsetup_r+0xa4>
 800fb66:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800fb6a:	d1c5      	bne.n	800faf8 <__swsetup_r+0x24>
 800fb6c:	bd38      	pop	{r3, r4, r5, pc}
 800fb6e:	0799      	lsls	r1, r3, #30
 800fb70:	bf58      	it	pl
 800fb72:	6962      	ldrpl	r2, [r4, #20]
 800fb74:	60a2      	str	r2, [r4, #8]
 800fb76:	e7f4      	b.n	800fb62 <__swsetup_r+0x8e>
 800fb78:	2000      	movs	r0, #0
 800fb7a:	e7f7      	b.n	800fb6c <__swsetup_r+0x98>
 800fb7c:	200001a4 	.word	0x200001a4

0800fb80 <_raise_r>:
 800fb80:	291f      	cmp	r1, #31
 800fb82:	b538      	push	{r3, r4, r5, lr}
 800fb84:	4605      	mov	r5, r0
 800fb86:	460c      	mov	r4, r1
 800fb88:	d904      	bls.n	800fb94 <_raise_r+0x14>
 800fb8a:	2316      	movs	r3, #22
 800fb8c:	6003      	str	r3, [r0, #0]
 800fb8e:	f04f 30ff 	mov.w	r0, #4294967295
 800fb92:	bd38      	pop	{r3, r4, r5, pc}
 800fb94:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800fb96:	b112      	cbz	r2, 800fb9e <_raise_r+0x1e>
 800fb98:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800fb9c:	b94b      	cbnz	r3, 800fbb2 <_raise_r+0x32>
 800fb9e:	4628      	mov	r0, r5
 800fba0:	f000 f830 	bl	800fc04 <_getpid_r>
 800fba4:	4622      	mov	r2, r4
 800fba6:	4601      	mov	r1, r0
 800fba8:	4628      	mov	r0, r5
 800fbaa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fbae:	f000 b817 	b.w	800fbe0 <_kill_r>
 800fbb2:	2b01      	cmp	r3, #1
 800fbb4:	d00a      	beq.n	800fbcc <_raise_r+0x4c>
 800fbb6:	1c59      	adds	r1, r3, #1
 800fbb8:	d103      	bne.n	800fbc2 <_raise_r+0x42>
 800fbba:	2316      	movs	r3, #22
 800fbbc:	6003      	str	r3, [r0, #0]
 800fbbe:	2001      	movs	r0, #1
 800fbc0:	e7e7      	b.n	800fb92 <_raise_r+0x12>
 800fbc2:	2100      	movs	r1, #0
 800fbc4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800fbc8:	4620      	mov	r0, r4
 800fbca:	4798      	blx	r3
 800fbcc:	2000      	movs	r0, #0
 800fbce:	e7e0      	b.n	800fb92 <_raise_r+0x12>

0800fbd0 <raise>:
 800fbd0:	4b02      	ldr	r3, [pc, #8]	@ (800fbdc <raise+0xc>)
 800fbd2:	4601      	mov	r1, r0
 800fbd4:	6818      	ldr	r0, [r3, #0]
 800fbd6:	f7ff bfd3 	b.w	800fb80 <_raise_r>
 800fbda:	bf00      	nop
 800fbdc:	200001a4 	.word	0x200001a4

0800fbe0 <_kill_r>:
 800fbe0:	b538      	push	{r3, r4, r5, lr}
 800fbe2:	4d07      	ldr	r5, [pc, #28]	@ (800fc00 <_kill_r+0x20>)
 800fbe4:	2300      	movs	r3, #0
 800fbe6:	4604      	mov	r4, r0
 800fbe8:	4608      	mov	r0, r1
 800fbea:	4611      	mov	r1, r2
 800fbec:	602b      	str	r3, [r5, #0]
 800fbee:	f7f5 fa4d 	bl	800508c <_kill>
 800fbf2:	1c43      	adds	r3, r0, #1
 800fbf4:	d102      	bne.n	800fbfc <_kill_r+0x1c>
 800fbf6:	682b      	ldr	r3, [r5, #0]
 800fbf8:	b103      	cbz	r3, 800fbfc <_kill_r+0x1c>
 800fbfa:	6023      	str	r3, [r4, #0]
 800fbfc:	bd38      	pop	{r3, r4, r5, pc}
 800fbfe:	bf00      	nop
 800fc00:	20009994 	.word	0x20009994

0800fc04 <_getpid_r>:
 800fc04:	f7f5 ba40 	b.w	8005088 <_getpid>

0800fc08 <__swhatbuf_r>:
 800fc08:	b570      	push	{r4, r5, r6, lr}
 800fc0a:	460c      	mov	r4, r1
 800fc0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fc10:	2900      	cmp	r1, #0
 800fc12:	b096      	sub	sp, #88	@ 0x58
 800fc14:	4615      	mov	r5, r2
 800fc16:	461e      	mov	r6, r3
 800fc18:	da0d      	bge.n	800fc36 <__swhatbuf_r+0x2e>
 800fc1a:	89a3      	ldrh	r3, [r4, #12]
 800fc1c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800fc20:	f04f 0100 	mov.w	r1, #0
 800fc24:	bf14      	ite	ne
 800fc26:	2340      	movne	r3, #64	@ 0x40
 800fc28:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800fc2c:	2000      	movs	r0, #0
 800fc2e:	6031      	str	r1, [r6, #0]
 800fc30:	602b      	str	r3, [r5, #0]
 800fc32:	b016      	add	sp, #88	@ 0x58
 800fc34:	bd70      	pop	{r4, r5, r6, pc}
 800fc36:	466a      	mov	r2, sp
 800fc38:	f000 f848 	bl	800fccc <_fstat_r>
 800fc3c:	2800      	cmp	r0, #0
 800fc3e:	dbec      	blt.n	800fc1a <__swhatbuf_r+0x12>
 800fc40:	9901      	ldr	r1, [sp, #4]
 800fc42:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800fc46:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800fc4a:	4259      	negs	r1, r3
 800fc4c:	4159      	adcs	r1, r3
 800fc4e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800fc52:	e7eb      	b.n	800fc2c <__swhatbuf_r+0x24>

0800fc54 <__smakebuf_r>:
 800fc54:	898b      	ldrh	r3, [r1, #12]
 800fc56:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fc58:	079d      	lsls	r5, r3, #30
 800fc5a:	4606      	mov	r6, r0
 800fc5c:	460c      	mov	r4, r1
 800fc5e:	d507      	bpl.n	800fc70 <__smakebuf_r+0x1c>
 800fc60:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800fc64:	6023      	str	r3, [r4, #0]
 800fc66:	6123      	str	r3, [r4, #16]
 800fc68:	2301      	movs	r3, #1
 800fc6a:	6163      	str	r3, [r4, #20]
 800fc6c:	b003      	add	sp, #12
 800fc6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fc70:	ab01      	add	r3, sp, #4
 800fc72:	466a      	mov	r2, sp
 800fc74:	f7ff ffc8 	bl	800fc08 <__swhatbuf_r>
 800fc78:	9f00      	ldr	r7, [sp, #0]
 800fc7a:	4605      	mov	r5, r0
 800fc7c:	4639      	mov	r1, r7
 800fc7e:	4630      	mov	r0, r6
 800fc80:	f7fa fa42 	bl	800a108 <_malloc_r>
 800fc84:	b948      	cbnz	r0, 800fc9a <__smakebuf_r+0x46>
 800fc86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fc8a:	059a      	lsls	r2, r3, #22
 800fc8c:	d4ee      	bmi.n	800fc6c <__smakebuf_r+0x18>
 800fc8e:	f023 0303 	bic.w	r3, r3, #3
 800fc92:	f043 0302 	orr.w	r3, r3, #2
 800fc96:	81a3      	strh	r3, [r4, #12]
 800fc98:	e7e2      	b.n	800fc60 <__smakebuf_r+0xc>
 800fc9a:	89a3      	ldrh	r3, [r4, #12]
 800fc9c:	6020      	str	r0, [r4, #0]
 800fc9e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800fca2:	81a3      	strh	r3, [r4, #12]
 800fca4:	9b01      	ldr	r3, [sp, #4]
 800fca6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800fcaa:	b15b      	cbz	r3, 800fcc4 <__smakebuf_r+0x70>
 800fcac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fcb0:	4630      	mov	r0, r6
 800fcb2:	f000 f81d 	bl	800fcf0 <_isatty_r>
 800fcb6:	b128      	cbz	r0, 800fcc4 <__smakebuf_r+0x70>
 800fcb8:	89a3      	ldrh	r3, [r4, #12]
 800fcba:	f023 0303 	bic.w	r3, r3, #3
 800fcbe:	f043 0301 	orr.w	r3, r3, #1
 800fcc2:	81a3      	strh	r3, [r4, #12]
 800fcc4:	89a3      	ldrh	r3, [r4, #12]
 800fcc6:	431d      	orrs	r5, r3
 800fcc8:	81a5      	strh	r5, [r4, #12]
 800fcca:	e7cf      	b.n	800fc6c <__smakebuf_r+0x18>

0800fccc <_fstat_r>:
 800fccc:	b538      	push	{r3, r4, r5, lr}
 800fcce:	4d07      	ldr	r5, [pc, #28]	@ (800fcec <_fstat_r+0x20>)
 800fcd0:	2300      	movs	r3, #0
 800fcd2:	4604      	mov	r4, r0
 800fcd4:	4608      	mov	r0, r1
 800fcd6:	4611      	mov	r1, r2
 800fcd8:	602b      	str	r3, [r5, #0]
 800fcda:	f7f5 fa04 	bl	80050e6 <_fstat>
 800fcde:	1c43      	adds	r3, r0, #1
 800fce0:	d102      	bne.n	800fce8 <_fstat_r+0x1c>
 800fce2:	682b      	ldr	r3, [r5, #0]
 800fce4:	b103      	cbz	r3, 800fce8 <_fstat_r+0x1c>
 800fce6:	6023      	str	r3, [r4, #0]
 800fce8:	bd38      	pop	{r3, r4, r5, pc}
 800fcea:	bf00      	nop
 800fcec:	20009994 	.word	0x20009994

0800fcf0 <_isatty_r>:
 800fcf0:	b538      	push	{r3, r4, r5, lr}
 800fcf2:	4d06      	ldr	r5, [pc, #24]	@ (800fd0c <_isatty_r+0x1c>)
 800fcf4:	2300      	movs	r3, #0
 800fcf6:	4604      	mov	r4, r0
 800fcf8:	4608      	mov	r0, r1
 800fcfa:	602b      	str	r3, [r5, #0]
 800fcfc:	f7f5 f9f8 	bl	80050f0 <_isatty>
 800fd00:	1c43      	adds	r3, r0, #1
 800fd02:	d102      	bne.n	800fd0a <_isatty_r+0x1a>
 800fd04:	682b      	ldr	r3, [r5, #0]
 800fd06:	b103      	cbz	r3, 800fd0a <_isatty_r+0x1a>
 800fd08:	6023      	str	r3, [r4, #0]
 800fd0a:	bd38      	pop	{r3, r4, r5, pc}
 800fd0c:	20009994 	.word	0x20009994

0800fd10 <atan2>:
 800fd10:	f000 bbfa 	b.w	8010508 <__ieee754_atan2>

0800fd14 <sqrt>:
 800fd14:	b538      	push	{r3, r4, r5, lr}
 800fd16:	ed2d 8b02 	vpush	{d8}
 800fd1a:	ec55 4b10 	vmov	r4, r5, d0
 800fd1e:	f000 f8cf 	bl	800fec0 <__ieee754_sqrt>
 800fd22:	4622      	mov	r2, r4
 800fd24:	462b      	mov	r3, r5
 800fd26:	4620      	mov	r0, r4
 800fd28:	4629      	mov	r1, r5
 800fd2a:	eeb0 8a40 	vmov.f32	s16, s0
 800fd2e:	eef0 8a60 	vmov.f32	s17, s1
 800fd32:	f7f0 ff0b 	bl	8000b4c <__aeabi_dcmpun>
 800fd36:	b990      	cbnz	r0, 800fd5e <sqrt+0x4a>
 800fd38:	2200      	movs	r2, #0
 800fd3a:	2300      	movs	r3, #0
 800fd3c:	4620      	mov	r0, r4
 800fd3e:	4629      	mov	r1, r5
 800fd40:	f7f0 fedc 	bl	8000afc <__aeabi_dcmplt>
 800fd44:	b158      	cbz	r0, 800fd5e <sqrt+0x4a>
 800fd46:	f7fc ff53 	bl	800cbf0 <__errno>
 800fd4a:	2321      	movs	r3, #33	@ 0x21
 800fd4c:	6003      	str	r3, [r0, #0]
 800fd4e:	2200      	movs	r2, #0
 800fd50:	2300      	movs	r3, #0
 800fd52:	4610      	mov	r0, r2
 800fd54:	4619      	mov	r1, r3
 800fd56:	f7f0 fd89 	bl	800086c <__aeabi_ddiv>
 800fd5a:	ec41 0b18 	vmov	d8, r0, r1
 800fd5e:	eeb0 0a48 	vmov.f32	s0, s16
 800fd62:	eef0 0a68 	vmov.f32	s1, s17
 800fd66:	ecbd 8b02 	vpop	{d8}
 800fd6a:	bd38      	pop	{r3, r4, r5, pc}
 800fd6c:	0000      	movs	r0, r0
	...

0800fd70 <cos>:
 800fd70:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800fd72:	ec53 2b10 	vmov	r2, r3, d0
 800fd76:	4826      	ldr	r0, [pc, #152]	@ (800fe10 <cos+0xa0>)
 800fd78:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800fd7c:	4281      	cmp	r1, r0
 800fd7e:	d806      	bhi.n	800fd8e <cos+0x1e>
 800fd80:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 800fe08 <cos+0x98>
 800fd84:	b005      	add	sp, #20
 800fd86:	f85d eb04 	ldr.w	lr, [sp], #4
 800fd8a:	f000 ba39 	b.w	8010200 <__kernel_cos>
 800fd8e:	4821      	ldr	r0, [pc, #132]	@ (800fe14 <cos+0xa4>)
 800fd90:	4281      	cmp	r1, r0
 800fd92:	d908      	bls.n	800fda6 <cos+0x36>
 800fd94:	4610      	mov	r0, r2
 800fd96:	4619      	mov	r1, r3
 800fd98:	f7f0 fa86 	bl	80002a8 <__aeabi_dsub>
 800fd9c:	ec41 0b10 	vmov	d0, r0, r1
 800fda0:	b005      	add	sp, #20
 800fda2:	f85d fb04 	ldr.w	pc, [sp], #4
 800fda6:	4668      	mov	r0, sp
 800fda8:	f000 fc76 	bl	8010698 <__ieee754_rem_pio2>
 800fdac:	f000 0003 	and.w	r0, r0, #3
 800fdb0:	2801      	cmp	r0, #1
 800fdb2:	d00b      	beq.n	800fdcc <cos+0x5c>
 800fdb4:	2802      	cmp	r0, #2
 800fdb6:	d015      	beq.n	800fde4 <cos+0x74>
 800fdb8:	b9d8      	cbnz	r0, 800fdf2 <cos+0x82>
 800fdba:	ed9d 1b02 	vldr	d1, [sp, #8]
 800fdbe:	ed9d 0b00 	vldr	d0, [sp]
 800fdc2:	f000 fa1d 	bl	8010200 <__kernel_cos>
 800fdc6:	ec51 0b10 	vmov	r0, r1, d0
 800fdca:	e7e7      	b.n	800fd9c <cos+0x2c>
 800fdcc:	ed9d 1b02 	vldr	d1, [sp, #8]
 800fdd0:	ed9d 0b00 	vldr	d0, [sp]
 800fdd4:	f000 fadc 	bl	8010390 <__kernel_sin>
 800fdd8:	ec53 2b10 	vmov	r2, r3, d0
 800fddc:	4610      	mov	r0, r2
 800fdde:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800fde2:	e7db      	b.n	800fd9c <cos+0x2c>
 800fde4:	ed9d 1b02 	vldr	d1, [sp, #8]
 800fde8:	ed9d 0b00 	vldr	d0, [sp]
 800fdec:	f000 fa08 	bl	8010200 <__kernel_cos>
 800fdf0:	e7f2      	b.n	800fdd8 <cos+0x68>
 800fdf2:	ed9d 1b02 	vldr	d1, [sp, #8]
 800fdf6:	ed9d 0b00 	vldr	d0, [sp]
 800fdfa:	2001      	movs	r0, #1
 800fdfc:	f000 fac8 	bl	8010390 <__kernel_sin>
 800fe00:	e7e1      	b.n	800fdc6 <cos+0x56>
 800fe02:	bf00      	nop
 800fe04:	f3af 8000 	nop.w
	...
 800fe10:	3fe921fb 	.word	0x3fe921fb
 800fe14:	7fefffff 	.word	0x7fefffff

0800fe18 <sin>:
 800fe18:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800fe1a:	ec53 2b10 	vmov	r2, r3, d0
 800fe1e:	4826      	ldr	r0, [pc, #152]	@ (800feb8 <sin+0xa0>)
 800fe20:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800fe24:	4281      	cmp	r1, r0
 800fe26:	d807      	bhi.n	800fe38 <sin+0x20>
 800fe28:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 800feb0 <sin+0x98>
 800fe2c:	2000      	movs	r0, #0
 800fe2e:	b005      	add	sp, #20
 800fe30:	f85d eb04 	ldr.w	lr, [sp], #4
 800fe34:	f000 baac 	b.w	8010390 <__kernel_sin>
 800fe38:	4820      	ldr	r0, [pc, #128]	@ (800febc <sin+0xa4>)
 800fe3a:	4281      	cmp	r1, r0
 800fe3c:	d908      	bls.n	800fe50 <sin+0x38>
 800fe3e:	4610      	mov	r0, r2
 800fe40:	4619      	mov	r1, r3
 800fe42:	f7f0 fa31 	bl	80002a8 <__aeabi_dsub>
 800fe46:	ec41 0b10 	vmov	d0, r0, r1
 800fe4a:	b005      	add	sp, #20
 800fe4c:	f85d fb04 	ldr.w	pc, [sp], #4
 800fe50:	4668      	mov	r0, sp
 800fe52:	f000 fc21 	bl	8010698 <__ieee754_rem_pio2>
 800fe56:	f000 0003 	and.w	r0, r0, #3
 800fe5a:	2801      	cmp	r0, #1
 800fe5c:	d00c      	beq.n	800fe78 <sin+0x60>
 800fe5e:	2802      	cmp	r0, #2
 800fe60:	d011      	beq.n	800fe86 <sin+0x6e>
 800fe62:	b9e8      	cbnz	r0, 800fea0 <sin+0x88>
 800fe64:	ed9d 1b02 	vldr	d1, [sp, #8]
 800fe68:	ed9d 0b00 	vldr	d0, [sp]
 800fe6c:	2001      	movs	r0, #1
 800fe6e:	f000 fa8f 	bl	8010390 <__kernel_sin>
 800fe72:	ec51 0b10 	vmov	r0, r1, d0
 800fe76:	e7e6      	b.n	800fe46 <sin+0x2e>
 800fe78:	ed9d 1b02 	vldr	d1, [sp, #8]
 800fe7c:	ed9d 0b00 	vldr	d0, [sp]
 800fe80:	f000 f9be 	bl	8010200 <__kernel_cos>
 800fe84:	e7f5      	b.n	800fe72 <sin+0x5a>
 800fe86:	ed9d 1b02 	vldr	d1, [sp, #8]
 800fe8a:	ed9d 0b00 	vldr	d0, [sp]
 800fe8e:	2001      	movs	r0, #1
 800fe90:	f000 fa7e 	bl	8010390 <__kernel_sin>
 800fe94:	ec53 2b10 	vmov	r2, r3, d0
 800fe98:	4610      	mov	r0, r2
 800fe9a:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800fe9e:	e7d2      	b.n	800fe46 <sin+0x2e>
 800fea0:	ed9d 1b02 	vldr	d1, [sp, #8]
 800fea4:	ed9d 0b00 	vldr	d0, [sp]
 800fea8:	f000 f9aa 	bl	8010200 <__kernel_cos>
 800feac:	e7f2      	b.n	800fe94 <sin+0x7c>
 800feae:	bf00      	nop
	...
 800feb8:	3fe921fb 	.word	0x3fe921fb
 800febc:	7fefffff 	.word	0x7fefffff

0800fec0 <__ieee754_sqrt>:
 800fec0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fec4:	4a68      	ldr	r2, [pc, #416]	@ (8010068 <__ieee754_sqrt+0x1a8>)
 800fec6:	ec55 4b10 	vmov	r4, r5, d0
 800feca:	43aa      	bics	r2, r5
 800fecc:	462b      	mov	r3, r5
 800fece:	4621      	mov	r1, r4
 800fed0:	d110      	bne.n	800fef4 <__ieee754_sqrt+0x34>
 800fed2:	4622      	mov	r2, r4
 800fed4:	4620      	mov	r0, r4
 800fed6:	4629      	mov	r1, r5
 800fed8:	f7f0 fb9e 	bl	8000618 <__aeabi_dmul>
 800fedc:	4602      	mov	r2, r0
 800fede:	460b      	mov	r3, r1
 800fee0:	4620      	mov	r0, r4
 800fee2:	4629      	mov	r1, r5
 800fee4:	f7f0 f9e2 	bl	80002ac <__adddf3>
 800fee8:	4604      	mov	r4, r0
 800feea:	460d      	mov	r5, r1
 800feec:	ec45 4b10 	vmov	d0, r4, r5
 800fef0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fef4:	2d00      	cmp	r5, #0
 800fef6:	dc0e      	bgt.n	800ff16 <__ieee754_sqrt+0x56>
 800fef8:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800fefc:	4322      	orrs	r2, r4
 800fefe:	d0f5      	beq.n	800feec <__ieee754_sqrt+0x2c>
 800ff00:	b19d      	cbz	r5, 800ff2a <__ieee754_sqrt+0x6a>
 800ff02:	4622      	mov	r2, r4
 800ff04:	4620      	mov	r0, r4
 800ff06:	4629      	mov	r1, r5
 800ff08:	f7f0 f9ce 	bl	80002a8 <__aeabi_dsub>
 800ff0c:	4602      	mov	r2, r0
 800ff0e:	460b      	mov	r3, r1
 800ff10:	f7f0 fcac 	bl	800086c <__aeabi_ddiv>
 800ff14:	e7e8      	b.n	800fee8 <__ieee754_sqrt+0x28>
 800ff16:	152a      	asrs	r2, r5, #20
 800ff18:	d115      	bne.n	800ff46 <__ieee754_sqrt+0x86>
 800ff1a:	2000      	movs	r0, #0
 800ff1c:	e009      	b.n	800ff32 <__ieee754_sqrt+0x72>
 800ff1e:	0acb      	lsrs	r3, r1, #11
 800ff20:	3a15      	subs	r2, #21
 800ff22:	0549      	lsls	r1, r1, #21
 800ff24:	2b00      	cmp	r3, #0
 800ff26:	d0fa      	beq.n	800ff1e <__ieee754_sqrt+0x5e>
 800ff28:	e7f7      	b.n	800ff1a <__ieee754_sqrt+0x5a>
 800ff2a:	462a      	mov	r2, r5
 800ff2c:	e7fa      	b.n	800ff24 <__ieee754_sqrt+0x64>
 800ff2e:	005b      	lsls	r3, r3, #1
 800ff30:	3001      	adds	r0, #1
 800ff32:	02dc      	lsls	r4, r3, #11
 800ff34:	d5fb      	bpl.n	800ff2e <__ieee754_sqrt+0x6e>
 800ff36:	1e44      	subs	r4, r0, #1
 800ff38:	1b12      	subs	r2, r2, r4
 800ff3a:	f1c0 0420 	rsb	r4, r0, #32
 800ff3e:	fa21 f404 	lsr.w	r4, r1, r4
 800ff42:	4323      	orrs	r3, r4
 800ff44:	4081      	lsls	r1, r0
 800ff46:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ff4a:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 800ff4e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800ff52:	07d2      	lsls	r2, r2, #31
 800ff54:	bf5c      	itt	pl
 800ff56:	005b      	lslpl	r3, r3, #1
 800ff58:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800ff5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800ff60:	bf58      	it	pl
 800ff62:	0049      	lslpl	r1, r1, #1
 800ff64:	2600      	movs	r6, #0
 800ff66:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800ff6a:	106d      	asrs	r5, r5, #1
 800ff6c:	0049      	lsls	r1, r1, #1
 800ff6e:	2016      	movs	r0, #22
 800ff70:	4632      	mov	r2, r6
 800ff72:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800ff76:	1917      	adds	r7, r2, r4
 800ff78:	429f      	cmp	r7, r3
 800ff7a:	bfde      	ittt	le
 800ff7c:	193a      	addle	r2, r7, r4
 800ff7e:	1bdb      	suble	r3, r3, r7
 800ff80:	1936      	addle	r6, r6, r4
 800ff82:	0fcf      	lsrs	r7, r1, #31
 800ff84:	3801      	subs	r0, #1
 800ff86:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 800ff8a:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800ff8e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800ff92:	d1f0      	bne.n	800ff76 <__ieee754_sqrt+0xb6>
 800ff94:	4604      	mov	r4, r0
 800ff96:	2720      	movs	r7, #32
 800ff98:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800ff9c:	429a      	cmp	r2, r3
 800ff9e:	eb00 0e0c 	add.w	lr, r0, ip
 800ffa2:	db02      	blt.n	800ffaa <__ieee754_sqrt+0xea>
 800ffa4:	d113      	bne.n	800ffce <__ieee754_sqrt+0x10e>
 800ffa6:	458e      	cmp	lr, r1
 800ffa8:	d811      	bhi.n	800ffce <__ieee754_sqrt+0x10e>
 800ffaa:	f1be 0f00 	cmp.w	lr, #0
 800ffae:	eb0e 000c 	add.w	r0, lr, ip
 800ffb2:	da42      	bge.n	801003a <__ieee754_sqrt+0x17a>
 800ffb4:	2800      	cmp	r0, #0
 800ffb6:	db40      	blt.n	801003a <__ieee754_sqrt+0x17a>
 800ffb8:	f102 0801 	add.w	r8, r2, #1
 800ffbc:	1a9b      	subs	r3, r3, r2
 800ffbe:	458e      	cmp	lr, r1
 800ffc0:	bf88      	it	hi
 800ffc2:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800ffc6:	eba1 010e 	sub.w	r1, r1, lr
 800ffca:	4464      	add	r4, ip
 800ffcc:	4642      	mov	r2, r8
 800ffce:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800ffd2:	3f01      	subs	r7, #1
 800ffd4:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800ffd8:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800ffdc:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800ffe0:	d1dc      	bne.n	800ff9c <__ieee754_sqrt+0xdc>
 800ffe2:	4319      	orrs	r1, r3
 800ffe4:	d01b      	beq.n	801001e <__ieee754_sqrt+0x15e>
 800ffe6:	f8df a084 	ldr.w	sl, [pc, #132]	@ 801006c <__ieee754_sqrt+0x1ac>
 800ffea:	f8df b084 	ldr.w	fp, [pc, #132]	@ 8010070 <__ieee754_sqrt+0x1b0>
 800ffee:	e9da 0100 	ldrd	r0, r1, [sl]
 800fff2:	e9db 2300 	ldrd	r2, r3, [fp]
 800fff6:	f7f0 f957 	bl	80002a8 <__aeabi_dsub>
 800fffa:	e9da 8900 	ldrd	r8, r9, [sl]
 800fffe:	4602      	mov	r2, r0
 8010000:	460b      	mov	r3, r1
 8010002:	4640      	mov	r0, r8
 8010004:	4649      	mov	r1, r9
 8010006:	f7f0 fd83 	bl	8000b10 <__aeabi_dcmple>
 801000a:	b140      	cbz	r0, 801001e <__ieee754_sqrt+0x15e>
 801000c:	f1b4 3fff 	cmp.w	r4, #4294967295
 8010010:	e9da 0100 	ldrd	r0, r1, [sl]
 8010014:	e9db 2300 	ldrd	r2, r3, [fp]
 8010018:	d111      	bne.n	801003e <__ieee754_sqrt+0x17e>
 801001a:	3601      	adds	r6, #1
 801001c:	463c      	mov	r4, r7
 801001e:	1072      	asrs	r2, r6, #1
 8010020:	0863      	lsrs	r3, r4, #1
 8010022:	07f1      	lsls	r1, r6, #31
 8010024:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 8010028:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 801002c:	bf48      	it	mi
 801002e:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 8010032:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 8010036:	4618      	mov	r0, r3
 8010038:	e756      	b.n	800fee8 <__ieee754_sqrt+0x28>
 801003a:	4690      	mov	r8, r2
 801003c:	e7be      	b.n	800ffbc <__ieee754_sqrt+0xfc>
 801003e:	f7f0 f935 	bl	80002ac <__adddf3>
 8010042:	e9da 8900 	ldrd	r8, r9, [sl]
 8010046:	4602      	mov	r2, r0
 8010048:	460b      	mov	r3, r1
 801004a:	4640      	mov	r0, r8
 801004c:	4649      	mov	r1, r9
 801004e:	f7f0 fd55 	bl	8000afc <__aeabi_dcmplt>
 8010052:	b120      	cbz	r0, 801005e <__ieee754_sqrt+0x19e>
 8010054:	1ca0      	adds	r0, r4, #2
 8010056:	bf08      	it	eq
 8010058:	3601      	addeq	r6, #1
 801005a:	3402      	adds	r4, #2
 801005c:	e7df      	b.n	801001e <__ieee754_sqrt+0x15e>
 801005e:	1c63      	adds	r3, r4, #1
 8010060:	f023 0401 	bic.w	r4, r3, #1
 8010064:	e7db      	b.n	801001e <__ieee754_sqrt+0x15e>
 8010066:	bf00      	nop
 8010068:	7ff00000 	.word	0x7ff00000
 801006c:	20000258 	.word	0x20000258
 8010070:	20000250 	.word	0x20000250
 8010074:	00000000 	.word	0x00000000

08010078 <floor>:
 8010078:	ec51 0b10 	vmov	r0, r1, d0
 801007c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8010080:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010084:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 8010088:	2e13      	cmp	r6, #19
 801008a:	460c      	mov	r4, r1
 801008c:	4605      	mov	r5, r0
 801008e:	4680      	mov	r8, r0
 8010090:	dc34      	bgt.n	80100fc <floor+0x84>
 8010092:	2e00      	cmp	r6, #0
 8010094:	da17      	bge.n	80100c6 <floor+0x4e>
 8010096:	a332      	add	r3, pc, #200	@ (adr r3, 8010160 <floor+0xe8>)
 8010098:	e9d3 2300 	ldrd	r2, r3, [r3]
 801009c:	f7f0 f906 	bl	80002ac <__adddf3>
 80100a0:	2200      	movs	r2, #0
 80100a2:	2300      	movs	r3, #0
 80100a4:	f7f0 fd48 	bl	8000b38 <__aeabi_dcmpgt>
 80100a8:	b150      	cbz	r0, 80100c0 <floor+0x48>
 80100aa:	2c00      	cmp	r4, #0
 80100ac:	da55      	bge.n	801015a <floor+0xe2>
 80100ae:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 80100b2:	432c      	orrs	r4, r5
 80100b4:	2500      	movs	r5, #0
 80100b6:	42ac      	cmp	r4, r5
 80100b8:	4c2b      	ldr	r4, [pc, #172]	@ (8010168 <floor+0xf0>)
 80100ba:	bf08      	it	eq
 80100bc:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 80100c0:	4621      	mov	r1, r4
 80100c2:	4628      	mov	r0, r5
 80100c4:	e023      	b.n	801010e <floor+0x96>
 80100c6:	4f29      	ldr	r7, [pc, #164]	@ (801016c <floor+0xf4>)
 80100c8:	4137      	asrs	r7, r6
 80100ca:	ea01 0307 	and.w	r3, r1, r7
 80100ce:	4303      	orrs	r3, r0
 80100d0:	d01d      	beq.n	801010e <floor+0x96>
 80100d2:	a323      	add	r3, pc, #140	@ (adr r3, 8010160 <floor+0xe8>)
 80100d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100d8:	f7f0 f8e8 	bl	80002ac <__adddf3>
 80100dc:	2200      	movs	r2, #0
 80100de:	2300      	movs	r3, #0
 80100e0:	f7f0 fd2a 	bl	8000b38 <__aeabi_dcmpgt>
 80100e4:	2800      	cmp	r0, #0
 80100e6:	d0eb      	beq.n	80100c0 <floor+0x48>
 80100e8:	2c00      	cmp	r4, #0
 80100ea:	bfbe      	ittt	lt
 80100ec:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 80100f0:	4133      	asrlt	r3, r6
 80100f2:	18e4      	addlt	r4, r4, r3
 80100f4:	ea24 0407 	bic.w	r4, r4, r7
 80100f8:	2500      	movs	r5, #0
 80100fa:	e7e1      	b.n	80100c0 <floor+0x48>
 80100fc:	2e33      	cmp	r6, #51	@ 0x33
 80100fe:	dd0a      	ble.n	8010116 <floor+0x9e>
 8010100:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 8010104:	d103      	bne.n	801010e <floor+0x96>
 8010106:	4602      	mov	r2, r0
 8010108:	460b      	mov	r3, r1
 801010a:	f7f0 f8cf 	bl	80002ac <__adddf3>
 801010e:	ec41 0b10 	vmov	d0, r0, r1
 8010112:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010116:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 801011a:	f04f 37ff 	mov.w	r7, #4294967295
 801011e:	40df      	lsrs	r7, r3
 8010120:	4207      	tst	r7, r0
 8010122:	d0f4      	beq.n	801010e <floor+0x96>
 8010124:	a30e      	add	r3, pc, #56	@ (adr r3, 8010160 <floor+0xe8>)
 8010126:	e9d3 2300 	ldrd	r2, r3, [r3]
 801012a:	f7f0 f8bf 	bl	80002ac <__adddf3>
 801012e:	2200      	movs	r2, #0
 8010130:	2300      	movs	r3, #0
 8010132:	f7f0 fd01 	bl	8000b38 <__aeabi_dcmpgt>
 8010136:	2800      	cmp	r0, #0
 8010138:	d0c2      	beq.n	80100c0 <floor+0x48>
 801013a:	2c00      	cmp	r4, #0
 801013c:	da0a      	bge.n	8010154 <floor+0xdc>
 801013e:	2e14      	cmp	r6, #20
 8010140:	d101      	bne.n	8010146 <floor+0xce>
 8010142:	3401      	adds	r4, #1
 8010144:	e006      	b.n	8010154 <floor+0xdc>
 8010146:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 801014a:	2301      	movs	r3, #1
 801014c:	40b3      	lsls	r3, r6
 801014e:	441d      	add	r5, r3
 8010150:	4545      	cmp	r5, r8
 8010152:	d3f6      	bcc.n	8010142 <floor+0xca>
 8010154:	ea25 0507 	bic.w	r5, r5, r7
 8010158:	e7b2      	b.n	80100c0 <floor+0x48>
 801015a:	2500      	movs	r5, #0
 801015c:	462c      	mov	r4, r5
 801015e:	e7af      	b.n	80100c0 <floor+0x48>
 8010160:	8800759c 	.word	0x8800759c
 8010164:	7e37e43c 	.word	0x7e37e43c
 8010168:	bff00000 	.word	0xbff00000
 801016c:	000fffff 	.word	0x000fffff

08010170 <round>:
 8010170:	ec51 0b10 	vmov	r0, r1, d0
 8010174:	b570      	push	{r4, r5, r6, lr}
 8010176:	f3c1 540a 	ubfx	r4, r1, #20, #11
 801017a:	f2a4 32ff 	subw	r2, r4, #1023	@ 0x3ff
 801017e:	2a13      	cmp	r2, #19
 8010180:	460b      	mov	r3, r1
 8010182:	4605      	mov	r5, r0
 8010184:	dc1b      	bgt.n	80101be <round+0x4e>
 8010186:	2a00      	cmp	r2, #0
 8010188:	da0b      	bge.n	80101a2 <round+0x32>
 801018a:	f001 4300 	and.w	r3, r1, #2147483648	@ 0x80000000
 801018e:	3201      	adds	r2, #1
 8010190:	bf04      	itt	eq
 8010192:	f043 537f 	orreq.w	r3, r3, #1069547520	@ 0x3fc00000
 8010196:	f443 1340 	orreq.w	r3, r3, #3145728	@ 0x300000
 801019a:	2200      	movs	r2, #0
 801019c:	4619      	mov	r1, r3
 801019e:	4610      	mov	r0, r2
 80101a0:	e015      	b.n	80101ce <round+0x5e>
 80101a2:	4c15      	ldr	r4, [pc, #84]	@ (80101f8 <round+0x88>)
 80101a4:	4114      	asrs	r4, r2
 80101a6:	ea04 0601 	and.w	r6, r4, r1
 80101aa:	4306      	orrs	r6, r0
 80101ac:	d00f      	beq.n	80101ce <round+0x5e>
 80101ae:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 80101b2:	fa41 f202 	asr.w	r2, r1, r2
 80101b6:	4413      	add	r3, r2
 80101b8:	ea23 0304 	bic.w	r3, r3, r4
 80101bc:	e7ed      	b.n	801019a <round+0x2a>
 80101be:	2a33      	cmp	r2, #51	@ 0x33
 80101c0:	dd08      	ble.n	80101d4 <round+0x64>
 80101c2:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 80101c6:	d102      	bne.n	80101ce <round+0x5e>
 80101c8:	4602      	mov	r2, r0
 80101ca:	f7f0 f86f 	bl	80002ac <__adddf3>
 80101ce:	ec41 0b10 	vmov	d0, r0, r1
 80101d2:	bd70      	pop	{r4, r5, r6, pc}
 80101d4:	f2a4 4613 	subw	r6, r4, #1043	@ 0x413
 80101d8:	f04f 34ff 	mov.w	r4, #4294967295
 80101dc:	40f4      	lsrs	r4, r6
 80101de:	4204      	tst	r4, r0
 80101e0:	d0f5      	beq.n	80101ce <round+0x5e>
 80101e2:	f1c2 0133 	rsb	r1, r2, #51	@ 0x33
 80101e6:	2201      	movs	r2, #1
 80101e8:	408a      	lsls	r2, r1
 80101ea:	1952      	adds	r2, r2, r5
 80101ec:	bf28      	it	cs
 80101ee:	3301      	addcs	r3, #1
 80101f0:	ea22 0204 	bic.w	r2, r2, r4
 80101f4:	e7d2      	b.n	801019c <round+0x2c>
 80101f6:	bf00      	nop
 80101f8:	000fffff 	.word	0x000fffff
 80101fc:	00000000 	.word	0x00000000

08010200 <__kernel_cos>:
 8010200:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010204:	ec57 6b10 	vmov	r6, r7, d0
 8010208:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 801020c:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 8010210:	ed8d 1b00 	vstr	d1, [sp]
 8010214:	d206      	bcs.n	8010224 <__kernel_cos+0x24>
 8010216:	4630      	mov	r0, r6
 8010218:	4639      	mov	r1, r7
 801021a:	f7f0 fcad 	bl	8000b78 <__aeabi_d2iz>
 801021e:	2800      	cmp	r0, #0
 8010220:	f000 8088 	beq.w	8010334 <__kernel_cos+0x134>
 8010224:	4632      	mov	r2, r6
 8010226:	463b      	mov	r3, r7
 8010228:	4630      	mov	r0, r6
 801022a:	4639      	mov	r1, r7
 801022c:	f7f0 f9f4 	bl	8000618 <__aeabi_dmul>
 8010230:	4b51      	ldr	r3, [pc, #324]	@ (8010378 <__kernel_cos+0x178>)
 8010232:	2200      	movs	r2, #0
 8010234:	4604      	mov	r4, r0
 8010236:	460d      	mov	r5, r1
 8010238:	f7f0 f9ee 	bl	8000618 <__aeabi_dmul>
 801023c:	a340      	add	r3, pc, #256	@ (adr r3, 8010340 <__kernel_cos+0x140>)
 801023e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010242:	4682      	mov	sl, r0
 8010244:	468b      	mov	fp, r1
 8010246:	4620      	mov	r0, r4
 8010248:	4629      	mov	r1, r5
 801024a:	f7f0 f9e5 	bl	8000618 <__aeabi_dmul>
 801024e:	a33e      	add	r3, pc, #248	@ (adr r3, 8010348 <__kernel_cos+0x148>)
 8010250:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010254:	f7f0 f82a 	bl	80002ac <__adddf3>
 8010258:	4622      	mov	r2, r4
 801025a:	462b      	mov	r3, r5
 801025c:	f7f0 f9dc 	bl	8000618 <__aeabi_dmul>
 8010260:	a33b      	add	r3, pc, #236	@ (adr r3, 8010350 <__kernel_cos+0x150>)
 8010262:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010266:	f7f0 f81f 	bl	80002a8 <__aeabi_dsub>
 801026a:	4622      	mov	r2, r4
 801026c:	462b      	mov	r3, r5
 801026e:	f7f0 f9d3 	bl	8000618 <__aeabi_dmul>
 8010272:	a339      	add	r3, pc, #228	@ (adr r3, 8010358 <__kernel_cos+0x158>)
 8010274:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010278:	f7f0 f818 	bl	80002ac <__adddf3>
 801027c:	4622      	mov	r2, r4
 801027e:	462b      	mov	r3, r5
 8010280:	f7f0 f9ca 	bl	8000618 <__aeabi_dmul>
 8010284:	a336      	add	r3, pc, #216	@ (adr r3, 8010360 <__kernel_cos+0x160>)
 8010286:	e9d3 2300 	ldrd	r2, r3, [r3]
 801028a:	f7f0 f80d 	bl	80002a8 <__aeabi_dsub>
 801028e:	4622      	mov	r2, r4
 8010290:	462b      	mov	r3, r5
 8010292:	f7f0 f9c1 	bl	8000618 <__aeabi_dmul>
 8010296:	a334      	add	r3, pc, #208	@ (adr r3, 8010368 <__kernel_cos+0x168>)
 8010298:	e9d3 2300 	ldrd	r2, r3, [r3]
 801029c:	f7f0 f806 	bl	80002ac <__adddf3>
 80102a0:	4622      	mov	r2, r4
 80102a2:	462b      	mov	r3, r5
 80102a4:	f7f0 f9b8 	bl	8000618 <__aeabi_dmul>
 80102a8:	4622      	mov	r2, r4
 80102aa:	462b      	mov	r3, r5
 80102ac:	f7f0 f9b4 	bl	8000618 <__aeabi_dmul>
 80102b0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80102b4:	4604      	mov	r4, r0
 80102b6:	460d      	mov	r5, r1
 80102b8:	4630      	mov	r0, r6
 80102ba:	4639      	mov	r1, r7
 80102bc:	f7f0 f9ac 	bl	8000618 <__aeabi_dmul>
 80102c0:	460b      	mov	r3, r1
 80102c2:	4602      	mov	r2, r0
 80102c4:	4629      	mov	r1, r5
 80102c6:	4620      	mov	r0, r4
 80102c8:	f7ef ffee 	bl	80002a8 <__aeabi_dsub>
 80102cc:	4b2b      	ldr	r3, [pc, #172]	@ (801037c <__kernel_cos+0x17c>)
 80102ce:	4598      	cmp	r8, r3
 80102d0:	4606      	mov	r6, r0
 80102d2:	460f      	mov	r7, r1
 80102d4:	d810      	bhi.n	80102f8 <__kernel_cos+0xf8>
 80102d6:	4602      	mov	r2, r0
 80102d8:	460b      	mov	r3, r1
 80102da:	4650      	mov	r0, sl
 80102dc:	4659      	mov	r1, fp
 80102de:	f7ef ffe3 	bl	80002a8 <__aeabi_dsub>
 80102e2:	460b      	mov	r3, r1
 80102e4:	4926      	ldr	r1, [pc, #152]	@ (8010380 <__kernel_cos+0x180>)
 80102e6:	4602      	mov	r2, r0
 80102e8:	2000      	movs	r0, #0
 80102ea:	f7ef ffdd 	bl	80002a8 <__aeabi_dsub>
 80102ee:	ec41 0b10 	vmov	d0, r0, r1
 80102f2:	b003      	add	sp, #12
 80102f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80102f8:	4b22      	ldr	r3, [pc, #136]	@ (8010384 <__kernel_cos+0x184>)
 80102fa:	4921      	ldr	r1, [pc, #132]	@ (8010380 <__kernel_cos+0x180>)
 80102fc:	4598      	cmp	r8, r3
 80102fe:	bf8c      	ite	hi
 8010300:	4d21      	ldrhi	r5, [pc, #132]	@ (8010388 <__kernel_cos+0x188>)
 8010302:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 8010306:	2400      	movs	r4, #0
 8010308:	4622      	mov	r2, r4
 801030a:	462b      	mov	r3, r5
 801030c:	2000      	movs	r0, #0
 801030e:	f7ef ffcb 	bl	80002a8 <__aeabi_dsub>
 8010312:	4622      	mov	r2, r4
 8010314:	4680      	mov	r8, r0
 8010316:	4689      	mov	r9, r1
 8010318:	462b      	mov	r3, r5
 801031a:	4650      	mov	r0, sl
 801031c:	4659      	mov	r1, fp
 801031e:	f7ef ffc3 	bl	80002a8 <__aeabi_dsub>
 8010322:	4632      	mov	r2, r6
 8010324:	463b      	mov	r3, r7
 8010326:	f7ef ffbf 	bl	80002a8 <__aeabi_dsub>
 801032a:	4602      	mov	r2, r0
 801032c:	460b      	mov	r3, r1
 801032e:	4640      	mov	r0, r8
 8010330:	4649      	mov	r1, r9
 8010332:	e7da      	b.n	80102ea <__kernel_cos+0xea>
 8010334:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 8010370 <__kernel_cos+0x170>
 8010338:	e7db      	b.n	80102f2 <__kernel_cos+0xf2>
 801033a:	bf00      	nop
 801033c:	f3af 8000 	nop.w
 8010340:	be8838d4 	.word	0xbe8838d4
 8010344:	bda8fae9 	.word	0xbda8fae9
 8010348:	bdb4b1c4 	.word	0xbdb4b1c4
 801034c:	3e21ee9e 	.word	0x3e21ee9e
 8010350:	809c52ad 	.word	0x809c52ad
 8010354:	3e927e4f 	.word	0x3e927e4f
 8010358:	19cb1590 	.word	0x19cb1590
 801035c:	3efa01a0 	.word	0x3efa01a0
 8010360:	16c15177 	.word	0x16c15177
 8010364:	3f56c16c 	.word	0x3f56c16c
 8010368:	5555554c 	.word	0x5555554c
 801036c:	3fa55555 	.word	0x3fa55555
 8010370:	00000000 	.word	0x00000000
 8010374:	3ff00000 	.word	0x3ff00000
 8010378:	3fe00000 	.word	0x3fe00000
 801037c:	3fd33332 	.word	0x3fd33332
 8010380:	3ff00000 	.word	0x3ff00000
 8010384:	3fe90000 	.word	0x3fe90000
 8010388:	3fd20000 	.word	0x3fd20000
 801038c:	00000000 	.word	0x00000000

08010390 <__kernel_sin>:
 8010390:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010394:	ec55 4b10 	vmov	r4, r5, d0
 8010398:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 801039c:	b085      	sub	sp, #20
 801039e:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 80103a2:	ed8d 1b02 	vstr	d1, [sp, #8]
 80103a6:	4680      	mov	r8, r0
 80103a8:	d205      	bcs.n	80103b6 <__kernel_sin+0x26>
 80103aa:	4620      	mov	r0, r4
 80103ac:	4629      	mov	r1, r5
 80103ae:	f7f0 fbe3 	bl	8000b78 <__aeabi_d2iz>
 80103b2:	2800      	cmp	r0, #0
 80103b4:	d052      	beq.n	801045c <__kernel_sin+0xcc>
 80103b6:	4622      	mov	r2, r4
 80103b8:	462b      	mov	r3, r5
 80103ba:	4620      	mov	r0, r4
 80103bc:	4629      	mov	r1, r5
 80103be:	f7f0 f92b 	bl	8000618 <__aeabi_dmul>
 80103c2:	4682      	mov	sl, r0
 80103c4:	468b      	mov	fp, r1
 80103c6:	4602      	mov	r2, r0
 80103c8:	460b      	mov	r3, r1
 80103ca:	4620      	mov	r0, r4
 80103cc:	4629      	mov	r1, r5
 80103ce:	f7f0 f923 	bl	8000618 <__aeabi_dmul>
 80103d2:	a342      	add	r3, pc, #264	@ (adr r3, 80104dc <__kernel_sin+0x14c>)
 80103d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80103d8:	e9cd 0100 	strd	r0, r1, [sp]
 80103dc:	4650      	mov	r0, sl
 80103de:	4659      	mov	r1, fp
 80103e0:	f7f0 f91a 	bl	8000618 <__aeabi_dmul>
 80103e4:	a33f      	add	r3, pc, #252	@ (adr r3, 80104e4 <__kernel_sin+0x154>)
 80103e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80103ea:	f7ef ff5d 	bl	80002a8 <__aeabi_dsub>
 80103ee:	4652      	mov	r2, sl
 80103f0:	465b      	mov	r3, fp
 80103f2:	f7f0 f911 	bl	8000618 <__aeabi_dmul>
 80103f6:	a33d      	add	r3, pc, #244	@ (adr r3, 80104ec <__kernel_sin+0x15c>)
 80103f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80103fc:	f7ef ff56 	bl	80002ac <__adddf3>
 8010400:	4652      	mov	r2, sl
 8010402:	465b      	mov	r3, fp
 8010404:	f7f0 f908 	bl	8000618 <__aeabi_dmul>
 8010408:	a33a      	add	r3, pc, #232	@ (adr r3, 80104f4 <__kernel_sin+0x164>)
 801040a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801040e:	f7ef ff4b 	bl	80002a8 <__aeabi_dsub>
 8010412:	4652      	mov	r2, sl
 8010414:	465b      	mov	r3, fp
 8010416:	f7f0 f8ff 	bl	8000618 <__aeabi_dmul>
 801041a:	a338      	add	r3, pc, #224	@ (adr r3, 80104fc <__kernel_sin+0x16c>)
 801041c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010420:	f7ef ff44 	bl	80002ac <__adddf3>
 8010424:	4606      	mov	r6, r0
 8010426:	460f      	mov	r7, r1
 8010428:	f1b8 0f00 	cmp.w	r8, #0
 801042c:	d11b      	bne.n	8010466 <__kernel_sin+0xd6>
 801042e:	4602      	mov	r2, r0
 8010430:	460b      	mov	r3, r1
 8010432:	4650      	mov	r0, sl
 8010434:	4659      	mov	r1, fp
 8010436:	f7f0 f8ef 	bl	8000618 <__aeabi_dmul>
 801043a:	a325      	add	r3, pc, #148	@ (adr r3, 80104d0 <__kernel_sin+0x140>)
 801043c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010440:	f7ef ff32 	bl	80002a8 <__aeabi_dsub>
 8010444:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010448:	f7f0 f8e6 	bl	8000618 <__aeabi_dmul>
 801044c:	4602      	mov	r2, r0
 801044e:	460b      	mov	r3, r1
 8010450:	4620      	mov	r0, r4
 8010452:	4629      	mov	r1, r5
 8010454:	f7ef ff2a 	bl	80002ac <__adddf3>
 8010458:	4604      	mov	r4, r0
 801045a:	460d      	mov	r5, r1
 801045c:	ec45 4b10 	vmov	d0, r4, r5
 8010460:	b005      	add	sp, #20
 8010462:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010466:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801046a:	4b1b      	ldr	r3, [pc, #108]	@ (80104d8 <__kernel_sin+0x148>)
 801046c:	2200      	movs	r2, #0
 801046e:	f7f0 f8d3 	bl	8000618 <__aeabi_dmul>
 8010472:	4632      	mov	r2, r6
 8010474:	4680      	mov	r8, r0
 8010476:	4689      	mov	r9, r1
 8010478:	463b      	mov	r3, r7
 801047a:	e9dd 0100 	ldrd	r0, r1, [sp]
 801047e:	f7f0 f8cb 	bl	8000618 <__aeabi_dmul>
 8010482:	4602      	mov	r2, r0
 8010484:	460b      	mov	r3, r1
 8010486:	4640      	mov	r0, r8
 8010488:	4649      	mov	r1, r9
 801048a:	f7ef ff0d 	bl	80002a8 <__aeabi_dsub>
 801048e:	4652      	mov	r2, sl
 8010490:	465b      	mov	r3, fp
 8010492:	f7f0 f8c1 	bl	8000618 <__aeabi_dmul>
 8010496:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801049a:	f7ef ff05 	bl	80002a8 <__aeabi_dsub>
 801049e:	a30c      	add	r3, pc, #48	@ (adr r3, 80104d0 <__kernel_sin+0x140>)
 80104a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80104a4:	4606      	mov	r6, r0
 80104a6:	460f      	mov	r7, r1
 80104a8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80104ac:	f7f0 f8b4 	bl	8000618 <__aeabi_dmul>
 80104b0:	4602      	mov	r2, r0
 80104b2:	460b      	mov	r3, r1
 80104b4:	4630      	mov	r0, r6
 80104b6:	4639      	mov	r1, r7
 80104b8:	f7ef fef8 	bl	80002ac <__adddf3>
 80104bc:	4602      	mov	r2, r0
 80104be:	460b      	mov	r3, r1
 80104c0:	4620      	mov	r0, r4
 80104c2:	4629      	mov	r1, r5
 80104c4:	f7ef fef0 	bl	80002a8 <__aeabi_dsub>
 80104c8:	e7c6      	b.n	8010458 <__kernel_sin+0xc8>
 80104ca:	bf00      	nop
 80104cc:	f3af 8000 	nop.w
 80104d0:	55555549 	.word	0x55555549
 80104d4:	3fc55555 	.word	0x3fc55555
 80104d8:	3fe00000 	.word	0x3fe00000
 80104dc:	5acfd57c 	.word	0x5acfd57c
 80104e0:	3de5d93a 	.word	0x3de5d93a
 80104e4:	8a2b9ceb 	.word	0x8a2b9ceb
 80104e8:	3e5ae5e6 	.word	0x3e5ae5e6
 80104ec:	57b1fe7d 	.word	0x57b1fe7d
 80104f0:	3ec71de3 	.word	0x3ec71de3
 80104f4:	19c161d5 	.word	0x19c161d5
 80104f8:	3f2a01a0 	.word	0x3f2a01a0
 80104fc:	1110f8a6 	.word	0x1110f8a6
 8010500:	3f811111 	.word	0x3f811111
 8010504:	00000000 	.word	0x00000000

08010508 <__ieee754_atan2>:
 8010508:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801050c:	ec57 6b11 	vmov	r6, r7, d1
 8010510:	4273      	negs	r3, r6
 8010512:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 8010690 <__ieee754_atan2+0x188>
 8010516:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 801051a:	4333      	orrs	r3, r6
 801051c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8010520:	4543      	cmp	r3, r8
 8010522:	ec51 0b10 	vmov	r0, r1, d0
 8010526:	4635      	mov	r5, r6
 8010528:	d809      	bhi.n	801053e <__ieee754_atan2+0x36>
 801052a:	4244      	negs	r4, r0
 801052c:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8010530:	4304      	orrs	r4, r0
 8010532:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8010536:	4544      	cmp	r4, r8
 8010538:	468e      	mov	lr, r1
 801053a:	4681      	mov	r9, r0
 801053c:	d907      	bls.n	801054e <__ieee754_atan2+0x46>
 801053e:	4632      	mov	r2, r6
 8010540:	463b      	mov	r3, r7
 8010542:	f7ef feb3 	bl	80002ac <__adddf3>
 8010546:	ec41 0b10 	vmov	d0, r0, r1
 801054a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801054e:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 8010552:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 8010556:	4334      	orrs	r4, r6
 8010558:	d103      	bne.n	8010562 <__ieee754_atan2+0x5a>
 801055a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801055e:	f000 ba97 	b.w	8010a90 <atan>
 8010562:	17bc      	asrs	r4, r7, #30
 8010564:	f004 0402 	and.w	r4, r4, #2
 8010568:	ea53 0909 	orrs.w	r9, r3, r9
 801056c:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8010570:	d107      	bne.n	8010582 <__ieee754_atan2+0x7a>
 8010572:	2c02      	cmp	r4, #2
 8010574:	d05f      	beq.n	8010636 <__ieee754_atan2+0x12e>
 8010576:	2c03      	cmp	r4, #3
 8010578:	d1e5      	bne.n	8010546 <__ieee754_atan2+0x3e>
 801057a:	a141      	add	r1, pc, #260	@ (adr r1, 8010680 <__ieee754_atan2+0x178>)
 801057c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010580:	e7e1      	b.n	8010546 <__ieee754_atan2+0x3e>
 8010582:	4315      	orrs	r5, r2
 8010584:	d106      	bne.n	8010594 <__ieee754_atan2+0x8c>
 8010586:	f1be 0f00 	cmp.w	lr, #0
 801058a:	da5f      	bge.n	801064c <__ieee754_atan2+0x144>
 801058c:	a13e      	add	r1, pc, #248	@ (adr r1, 8010688 <__ieee754_atan2+0x180>)
 801058e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010592:	e7d8      	b.n	8010546 <__ieee754_atan2+0x3e>
 8010594:	4542      	cmp	r2, r8
 8010596:	d10f      	bne.n	80105b8 <__ieee754_atan2+0xb0>
 8010598:	4293      	cmp	r3, r2
 801059a:	f104 34ff 	add.w	r4, r4, #4294967295
 801059e:	d107      	bne.n	80105b0 <__ieee754_atan2+0xa8>
 80105a0:	2c02      	cmp	r4, #2
 80105a2:	d84c      	bhi.n	801063e <__ieee754_atan2+0x136>
 80105a4:	4b34      	ldr	r3, [pc, #208]	@ (8010678 <__ieee754_atan2+0x170>)
 80105a6:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80105aa:	e9d3 0100 	ldrd	r0, r1, [r3]
 80105ae:	e7ca      	b.n	8010546 <__ieee754_atan2+0x3e>
 80105b0:	2c02      	cmp	r4, #2
 80105b2:	d848      	bhi.n	8010646 <__ieee754_atan2+0x13e>
 80105b4:	4b31      	ldr	r3, [pc, #196]	@ (801067c <__ieee754_atan2+0x174>)
 80105b6:	e7f6      	b.n	80105a6 <__ieee754_atan2+0x9e>
 80105b8:	4543      	cmp	r3, r8
 80105ba:	d0e4      	beq.n	8010586 <__ieee754_atan2+0x7e>
 80105bc:	1a9b      	subs	r3, r3, r2
 80105be:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 80105c2:	ea4f 5223 	mov.w	r2, r3, asr #20
 80105c6:	da1e      	bge.n	8010606 <__ieee754_atan2+0xfe>
 80105c8:	2f00      	cmp	r7, #0
 80105ca:	da01      	bge.n	80105d0 <__ieee754_atan2+0xc8>
 80105cc:	323c      	adds	r2, #60	@ 0x3c
 80105ce:	db1e      	blt.n	801060e <__ieee754_atan2+0x106>
 80105d0:	4632      	mov	r2, r6
 80105d2:	463b      	mov	r3, r7
 80105d4:	f7f0 f94a 	bl	800086c <__aeabi_ddiv>
 80105d8:	ec41 0b10 	vmov	d0, r0, r1
 80105dc:	f000 fbf0 	bl	8010dc0 <fabs>
 80105e0:	f000 fa56 	bl	8010a90 <atan>
 80105e4:	ec51 0b10 	vmov	r0, r1, d0
 80105e8:	2c01      	cmp	r4, #1
 80105ea:	d013      	beq.n	8010614 <__ieee754_atan2+0x10c>
 80105ec:	2c02      	cmp	r4, #2
 80105ee:	d015      	beq.n	801061c <__ieee754_atan2+0x114>
 80105f0:	2c00      	cmp	r4, #0
 80105f2:	d0a8      	beq.n	8010546 <__ieee754_atan2+0x3e>
 80105f4:	a318      	add	r3, pc, #96	@ (adr r3, 8010658 <__ieee754_atan2+0x150>)
 80105f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80105fa:	f7ef fe55 	bl	80002a8 <__aeabi_dsub>
 80105fe:	a318      	add	r3, pc, #96	@ (adr r3, 8010660 <__ieee754_atan2+0x158>)
 8010600:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010604:	e014      	b.n	8010630 <__ieee754_atan2+0x128>
 8010606:	a118      	add	r1, pc, #96	@ (adr r1, 8010668 <__ieee754_atan2+0x160>)
 8010608:	e9d1 0100 	ldrd	r0, r1, [r1]
 801060c:	e7ec      	b.n	80105e8 <__ieee754_atan2+0xe0>
 801060e:	2000      	movs	r0, #0
 8010610:	2100      	movs	r1, #0
 8010612:	e7e9      	b.n	80105e8 <__ieee754_atan2+0xe0>
 8010614:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8010618:	4619      	mov	r1, r3
 801061a:	e794      	b.n	8010546 <__ieee754_atan2+0x3e>
 801061c:	a30e      	add	r3, pc, #56	@ (adr r3, 8010658 <__ieee754_atan2+0x150>)
 801061e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010622:	f7ef fe41 	bl	80002a8 <__aeabi_dsub>
 8010626:	4602      	mov	r2, r0
 8010628:	460b      	mov	r3, r1
 801062a:	a10d      	add	r1, pc, #52	@ (adr r1, 8010660 <__ieee754_atan2+0x158>)
 801062c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010630:	f7ef fe3a 	bl	80002a8 <__aeabi_dsub>
 8010634:	e787      	b.n	8010546 <__ieee754_atan2+0x3e>
 8010636:	a10a      	add	r1, pc, #40	@ (adr r1, 8010660 <__ieee754_atan2+0x158>)
 8010638:	e9d1 0100 	ldrd	r0, r1, [r1]
 801063c:	e783      	b.n	8010546 <__ieee754_atan2+0x3e>
 801063e:	a10c      	add	r1, pc, #48	@ (adr r1, 8010670 <__ieee754_atan2+0x168>)
 8010640:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010644:	e77f      	b.n	8010546 <__ieee754_atan2+0x3e>
 8010646:	2000      	movs	r0, #0
 8010648:	2100      	movs	r1, #0
 801064a:	e77c      	b.n	8010546 <__ieee754_atan2+0x3e>
 801064c:	a106      	add	r1, pc, #24	@ (adr r1, 8010668 <__ieee754_atan2+0x160>)
 801064e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010652:	e778      	b.n	8010546 <__ieee754_atan2+0x3e>
 8010654:	f3af 8000 	nop.w
 8010658:	33145c07 	.word	0x33145c07
 801065c:	3ca1a626 	.word	0x3ca1a626
 8010660:	54442d18 	.word	0x54442d18
 8010664:	400921fb 	.word	0x400921fb
 8010668:	54442d18 	.word	0x54442d18
 801066c:	3ff921fb 	.word	0x3ff921fb
 8010670:	54442d18 	.word	0x54442d18
 8010674:	3fe921fb 	.word	0x3fe921fb
 8010678:	08013f80 	.word	0x08013f80
 801067c:	08013f68 	.word	0x08013f68
 8010680:	54442d18 	.word	0x54442d18
 8010684:	c00921fb 	.word	0xc00921fb
 8010688:	54442d18 	.word	0x54442d18
 801068c:	bff921fb 	.word	0xbff921fb
 8010690:	7ff00000 	.word	0x7ff00000
 8010694:	00000000 	.word	0x00000000

08010698 <__ieee754_rem_pio2>:
 8010698:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801069c:	ec57 6b10 	vmov	r6, r7, d0
 80106a0:	4bc5      	ldr	r3, [pc, #788]	@ (80109b8 <__ieee754_rem_pio2+0x320>)
 80106a2:	b08d      	sub	sp, #52	@ 0x34
 80106a4:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 80106a8:	4598      	cmp	r8, r3
 80106aa:	4604      	mov	r4, r0
 80106ac:	9704      	str	r7, [sp, #16]
 80106ae:	d807      	bhi.n	80106c0 <__ieee754_rem_pio2+0x28>
 80106b0:	2200      	movs	r2, #0
 80106b2:	2300      	movs	r3, #0
 80106b4:	ed80 0b00 	vstr	d0, [r0]
 80106b8:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80106bc:	2500      	movs	r5, #0
 80106be:	e028      	b.n	8010712 <__ieee754_rem_pio2+0x7a>
 80106c0:	4bbe      	ldr	r3, [pc, #760]	@ (80109bc <__ieee754_rem_pio2+0x324>)
 80106c2:	4598      	cmp	r8, r3
 80106c4:	d878      	bhi.n	80107b8 <__ieee754_rem_pio2+0x120>
 80106c6:	9b04      	ldr	r3, [sp, #16]
 80106c8:	4dbd      	ldr	r5, [pc, #756]	@ (80109c0 <__ieee754_rem_pio2+0x328>)
 80106ca:	2b00      	cmp	r3, #0
 80106cc:	4630      	mov	r0, r6
 80106ce:	a3ac      	add	r3, pc, #688	@ (adr r3, 8010980 <__ieee754_rem_pio2+0x2e8>)
 80106d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80106d4:	4639      	mov	r1, r7
 80106d6:	dd38      	ble.n	801074a <__ieee754_rem_pio2+0xb2>
 80106d8:	f7ef fde6 	bl	80002a8 <__aeabi_dsub>
 80106dc:	45a8      	cmp	r8, r5
 80106de:	4606      	mov	r6, r0
 80106e0:	460f      	mov	r7, r1
 80106e2:	d01a      	beq.n	801071a <__ieee754_rem_pio2+0x82>
 80106e4:	a3a8      	add	r3, pc, #672	@ (adr r3, 8010988 <__ieee754_rem_pio2+0x2f0>)
 80106e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80106ea:	f7ef fddd 	bl	80002a8 <__aeabi_dsub>
 80106ee:	4602      	mov	r2, r0
 80106f0:	460b      	mov	r3, r1
 80106f2:	4680      	mov	r8, r0
 80106f4:	4689      	mov	r9, r1
 80106f6:	4630      	mov	r0, r6
 80106f8:	4639      	mov	r1, r7
 80106fa:	f7ef fdd5 	bl	80002a8 <__aeabi_dsub>
 80106fe:	a3a2      	add	r3, pc, #648	@ (adr r3, 8010988 <__ieee754_rem_pio2+0x2f0>)
 8010700:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010704:	f7ef fdd0 	bl	80002a8 <__aeabi_dsub>
 8010708:	e9c4 8900 	strd	r8, r9, [r4]
 801070c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8010710:	2501      	movs	r5, #1
 8010712:	4628      	mov	r0, r5
 8010714:	b00d      	add	sp, #52	@ 0x34
 8010716:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801071a:	a39d      	add	r3, pc, #628	@ (adr r3, 8010990 <__ieee754_rem_pio2+0x2f8>)
 801071c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010720:	f7ef fdc2 	bl	80002a8 <__aeabi_dsub>
 8010724:	a39c      	add	r3, pc, #624	@ (adr r3, 8010998 <__ieee754_rem_pio2+0x300>)
 8010726:	e9d3 2300 	ldrd	r2, r3, [r3]
 801072a:	4606      	mov	r6, r0
 801072c:	460f      	mov	r7, r1
 801072e:	f7ef fdbb 	bl	80002a8 <__aeabi_dsub>
 8010732:	4602      	mov	r2, r0
 8010734:	460b      	mov	r3, r1
 8010736:	4680      	mov	r8, r0
 8010738:	4689      	mov	r9, r1
 801073a:	4630      	mov	r0, r6
 801073c:	4639      	mov	r1, r7
 801073e:	f7ef fdb3 	bl	80002a8 <__aeabi_dsub>
 8010742:	a395      	add	r3, pc, #596	@ (adr r3, 8010998 <__ieee754_rem_pio2+0x300>)
 8010744:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010748:	e7dc      	b.n	8010704 <__ieee754_rem_pio2+0x6c>
 801074a:	f7ef fdaf 	bl	80002ac <__adddf3>
 801074e:	45a8      	cmp	r8, r5
 8010750:	4606      	mov	r6, r0
 8010752:	460f      	mov	r7, r1
 8010754:	d018      	beq.n	8010788 <__ieee754_rem_pio2+0xf0>
 8010756:	a38c      	add	r3, pc, #560	@ (adr r3, 8010988 <__ieee754_rem_pio2+0x2f0>)
 8010758:	e9d3 2300 	ldrd	r2, r3, [r3]
 801075c:	f7ef fda6 	bl	80002ac <__adddf3>
 8010760:	4602      	mov	r2, r0
 8010762:	460b      	mov	r3, r1
 8010764:	4680      	mov	r8, r0
 8010766:	4689      	mov	r9, r1
 8010768:	4630      	mov	r0, r6
 801076a:	4639      	mov	r1, r7
 801076c:	f7ef fd9c 	bl	80002a8 <__aeabi_dsub>
 8010770:	a385      	add	r3, pc, #532	@ (adr r3, 8010988 <__ieee754_rem_pio2+0x2f0>)
 8010772:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010776:	f7ef fd99 	bl	80002ac <__adddf3>
 801077a:	f04f 35ff 	mov.w	r5, #4294967295
 801077e:	e9c4 8900 	strd	r8, r9, [r4]
 8010782:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8010786:	e7c4      	b.n	8010712 <__ieee754_rem_pio2+0x7a>
 8010788:	a381      	add	r3, pc, #516	@ (adr r3, 8010990 <__ieee754_rem_pio2+0x2f8>)
 801078a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801078e:	f7ef fd8d 	bl	80002ac <__adddf3>
 8010792:	a381      	add	r3, pc, #516	@ (adr r3, 8010998 <__ieee754_rem_pio2+0x300>)
 8010794:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010798:	4606      	mov	r6, r0
 801079a:	460f      	mov	r7, r1
 801079c:	f7ef fd86 	bl	80002ac <__adddf3>
 80107a0:	4602      	mov	r2, r0
 80107a2:	460b      	mov	r3, r1
 80107a4:	4680      	mov	r8, r0
 80107a6:	4689      	mov	r9, r1
 80107a8:	4630      	mov	r0, r6
 80107aa:	4639      	mov	r1, r7
 80107ac:	f7ef fd7c 	bl	80002a8 <__aeabi_dsub>
 80107b0:	a379      	add	r3, pc, #484	@ (adr r3, 8010998 <__ieee754_rem_pio2+0x300>)
 80107b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80107b6:	e7de      	b.n	8010776 <__ieee754_rem_pio2+0xde>
 80107b8:	4b82      	ldr	r3, [pc, #520]	@ (80109c4 <__ieee754_rem_pio2+0x32c>)
 80107ba:	4598      	cmp	r8, r3
 80107bc:	f200 80d1 	bhi.w	8010962 <__ieee754_rem_pio2+0x2ca>
 80107c0:	f000 fafe 	bl	8010dc0 <fabs>
 80107c4:	ec57 6b10 	vmov	r6, r7, d0
 80107c8:	a375      	add	r3, pc, #468	@ (adr r3, 80109a0 <__ieee754_rem_pio2+0x308>)
 80107ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80107ce:	4630      	mov	r0, r6
 80107d0:	4639      	mov	r1, r7
 80107d2:	f7ef ff21 	bl	8000618 <__aeabi_dmul>
 80107d6:	4b7c      	ldr	r3, [pc, #496]	@ (80109c8 <__ieee754_rem_pio2+0x330>)
 80107d8:	2200      	movs	r2, #0
 80107da:	f7ef fd67 	bl	80002ac <__adddf3>
 80107de:	f7f0 f9cb 	bl	8000b78 <__aeabi_d2iz>
 80107e2:	4605      	mov	r5, r0
 80107e4:	f7ef feae 	bl	8000544 <__aeabi_i2d>
 80107e8:	4602      	mov	r2, r0
 80107ea:	460b      	mov	r3, r1
 80107ec:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80107f0:	a363      	add	r3, pc, #396	@ (adr r3, 8010980 <__ieee754_rem_pio2+0x2e8>)
 80107f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80107f6:	f7ef ff0f 	bl	8000618 <__aeabi_dmul>
 80107fa:	4602      	mov	r2, r0
 80107fc:	460b      	mov	r3, r1
 80107fe:	4630      	mov	r0, r6
 8010800:	4639      	mov	r1, r7
 8010802:	f7ef fd51 	bl	80002a8 <__aeabi_dsub>
 8010806:	a360      	add	r3, pc, #384	@ (adr r3, 8010988 <__ieee754_rem_pio2+0x2f0>)
 8010808:	e9d3 2300 	ldrd	r2, r3, [r3]
 801080c:	4682      	mov	sl, r0
 801080e:	468b      	mov	fp, r1
 8010810:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010814:	f7ef ff00 	bl	8000618 <__aeabi_dmul>
 8010818:	2d1f      	cmp	r5, #31
 801081a:	4606      	mov	r6, r0
 801081c:	460f      	mov	r7, r1
 801081e:	dc0c      	bgt.n	801083a <__ieee754_rem_pio2+0x1a2>
 8010820:	4b6a      	ldr	r3, [pc, #424]	@ (80109cc <__ieee754_rem_pio2+0x334>)
 8010822:	1e6a      	subs	r2, r5, #1
 8010824:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010828:	4543      	cmp	r3, r8
 801082a:	d006      	beq.n	801083a <__ieee754_rem_pio2+0x1a2>
 801082c:	4632      	mov	r2, r6
 801082e:	463b      	mov	r3, r7
 8010830:	4650      	mov	r0, sl
 8010832:	4659      	mov	r1, fp
 8010834:	f7ef fd38 	bl	80002a8 <__aeabi_dsub>
 8010838:	e00e      	b.n	8010858 <__ieee754_rem_pio2+0x1c0>
 801083a:	463b      	mov	r3, r7
 801083c:	4632      	mov	r2, r6
 801083e:	4650      	mov	r0, sl
 8010840:	4659      	mov	r1, fp
 8010842:	f7ef fd31 	bl	80002a8 <__aeabi_dsub>
 8010846:	ea4f 5328 	mov.w	r3, r8, asr #20
 801084a:	9305      	str	r3, [sp, #20]
 801084c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8010850:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8010854:	2b10      	cmp	r3, #16
 8010856:	dc02      	bgt.n	801085e <__ieee754_rem_pio2+0x1c6>
 8010858:	e9c4 0100 	strd	r0, r1, [r4]
 801085c:	e039      	b.n	80108d2 <__ieee754_rem_pio2+0x23a>
 801085e:	a34c      	add	r3, pc, #304	@ (adr r3, 8010990 <__ieee754_rem_pio2+0x2f8>)
 8010860:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010864:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010868:	f7ef fed6 	bl	8000618 <__aeabi_dmul>
 801086c:	4606      	mov	r6, r0
 801086e:	460f      	mov	r7, r1
 8010870:	4602      	mov	r2, r0
 8010872:	460b      	mov	r3, r1
 8010874:	4650      	mov	r0, sl
 8010876:	4659      	mov	r1, fp
 8010878:	f7ef fd16 	bl	80002a8 <__aeabi_dsub>
 801087c:	4602      	mov	r2, r0
 801087e:	460b      	mov	r3, r1
 8010880:	4680      	mov	r8, r0
 8010882:	4689      	mov	r9, r1
 8010884:	4650      	mov	r0, sl
 8010886:	4659      	mov	r1, fp
 8010888:	f7ef fd0e 	bl	80002a8 <__aeabi_dsub>
 801088c:	4632      	mov	r2, r6
 801088e:	463b      	mov	r3, r7
 8010890:	f7ef fd0a 	bl	80002a8 <__aeabi_dsub>
 8010894:	a340      	add	r3, pc, #256	@ (adr r3, 8010998 <__ieee754_rem_pio2+0x300>)
 8010896:	e9d3 2300 	ldrd	r2, r3, [r3]
 801089a:	4606      	mov	r6, r0
 801089c:	460f      	mov	r7, r1
 801089e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80108a2:	f7ef feb9 	bl	8000618 <__aeabi_dmul>
 80108a6:	4632      	mov	r2, r6
 80108a8:	463b      	mov	r3, r7
 80108aa:	f7ef fcfd 	bl	80002a8 <__aeabi_dsub>
 80108ae:	4602      	mov	r2, r0
 80108b0:	460b      	mov	r3, r1
 80108b2:	4606      	mov	r6, r0
 80108b4:	460f      	mov	r7, r1
 80108b6:	4640      	mov	r0, r8
 80108b8:	4649      	mov	r1, r9
 80108ba:	f7ef fcf5 	bl	80002a8 <__aeabi_dsub>
 80108be:	9a05      	ldr	r2, [sp, #20]
 80108c0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80108c4:	1ad3      	subs	r3, r2, r3
 80108c6:	2b31      	cmp	r3, #49	@ 0x31
 80108c8:	dc20      	bgt.n	801090c <__ieee754_rem_pio2+0x274>
 80108ca:	e9c4 0100 	strd	r0, r1, [r4]
 80108ce:	46c2      	mov	sl, r8
 80108d0:	46cb      	mov	fp, r9
 80108d2:	e9d4 8900 	ldrd	r8, r9, [r4]
 80108d6:	4650      	mov	r0, sl
 80108d8:	4642      	mov	r2, r8
 80108da:	464b      	mov	r3, r9
 80108dc:	4659      	mov	r1, fp
 80108de:	f7ef fce3 	bl	80002a8 <__aeabi_dsub>
 80108e2:	463b      	mov	r3, r7
 80108e4:	4632      	mov	r2, r6
 80108e6:	f7ef fcdf 	bl	80002a8 <__aeabi_dsub>
 80108ea:	9b04      	ldr	r3, [sp, #16]
 80108ec:	2b00      	cmp	r3, #0
 80108ee:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80108f2:	f6bf af0e 	bge.w	8010712 <__ieee754_rem_pio2+0x7a>
 80108f6:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 80108fa:	6063      	str	r3, [r4, #4]
 80108fc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8010900:	f8c4 8000 	str.w	r8, [r4]
 8010904:	60a0      	str	r0, [r4, #8]
 8010906:	60e3      	str	r3, [r4, #12]
 8010908:	426d      	negs	r5, r5
 801090a:	e702      	b.n	8010712 <__ieee754_rem_pio2+0x7a>
 801090c:	a326      	add	r3, pc, #152	@ (adr r3, 80109a8 <__ieee754_rem_pio2+0x310>)
 801090e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010912:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010916:	f7ef fe7f 	bl	8000618 <__aeabi_dmul>
 801091a:	4606      	mov	r6, r0
 801091c:	460f      	mov	r7, r1
 801091e:	4602      	mov	r2, r0
 8010920:	460b      	mov	r3, r1
 8010922:	4640      	mov	r0, r8
 8010924:	4649      	mov	r1, r9
 8010926:	f7ef fcbf 	bl	80002a8 <__aeabi_dsub>
 801092a:	4602      	mov	r2, r0
 801092c:	460b      	mov	r3, r1
 801092e:	4682      	mov	sl, r0
 8010930:	468b      	mov	fp, r1
 8010932:	4640      	mov	r0, r8
 8010934:	4649      	mov	r1, r9
 8010936:	f7ef fcb7 	bl	80002a8 <__aeabi_dsub>
 801093a:	4632      	mov	r2, r6
 801093c:	463b      	mov	r3, r7
 801093e:	f7ef fcb3 	bl	80002a8 <__aeabi_dsub>
 8010942:	a31b      	add	r3, pc, #108	@ (adr r3, 80109b0 <__ieee754_rem_pio2+0x318>)
 8010944:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010948:	4606      	mov	r6, r0
 801094a:	460f      	mov	r7, r1
 801094c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010950:	f7ef fe62 	bl	8000618 <__aeabi_dmul>
 8010954:	4632      	mov	r2, r6
 8010956:	463b      	mov	r3, r7
 8010958:	f7ef fca6 	bl	80002a8 <__aeabi_dsub>
 801095c:	4606      	mov	r6, r0
 801095e:	460f      	mov	r7, r1
 8010960:	e764      	b.n	801082c <__ieee754_rem_pio2+0x194>
 8010962:	4b1b      	ldr	r3, [pc, #108]	@ (80109d0 <__ieee754_rem_pio2+0x338>)
 8010964:	4598      	cmp	r8, r3
 8010966:	d935      	bls.n	80109d4 <__ieee754_rem_pio2+0x33c>
 8010968:	4632      	mov	r2, r6
 801096a:	463b      	mov	r3, r7
 801096c:	4630      	mov	r0, r6
 801096e:	4639      	mov	r1, r7
 8010970:	f7ef fc9a 	bl	80002a8 <__aeabi_dsub>
 8010974:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8010978:	e9c4 0100 	strd	r0, r1, [r4]
 801097c:	e69e      	b.n	80106bc <__ieee754_rem_pio2+0x24>
 801097e:	bf00      	nop
 8010980:	54400000 	.word	0x54400000
 8010984:	3ff921fb 	.word	0x3ff921fb
 8010988:	1a626331 	.word	0x1a626331
 801098c:	3dd0b461 	.word	0x3dd0b461
 8010990:	1a600000 	.word	0x1a600000
 8010994:	3dd0b461 	.word	0x3dd0b461
 8010998:	2e037073 	.word	0x2e037073
 801099c:	3ba3198a 	.word	0x3ba3198a
 80109a0:	6dc9c883 	.word	0x6dc9c883
 80109a4:	3fe45f30 	.word	0x3fe45f30
 80109a8:	2e000000 	.word	0x2e000000
 80109ac:	3ba3198a 	.word	0x3ba3198a
 80109b0:	252049c1 	.word	0x252049c1
 80109b4:	397b839a 	.word	0x397b839a
 80109b8:	3fe921fb 	.word	0x3fe921fb
 80109bc:	4002d97b 	.word	0x4002d97b
 80109c0:	3ff921fb 	.word	0x3ff921fb
 80109c4:	413921fb 	.word	0x413921fb
 80109c8:	3fe00000 	.word	0x3fe00000
 80109cc:	08013f98 	.word	0x08013f98
 80109d0:	7fefffff 	.word	0x7fefffff
 80109d4:	ea4f 5528 	mov.w	r5, r8, asr #20
 80109d8:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 80109dc:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 80109e0:	4630      	mov	r0, r6
 80109e2:	460f      	mov	r7, r1
 80109e4:	f7f0 f8c8 	bl	8000b78 <__aeabi_d2iz>
 80109e8:	f7ef fdac 	bl	8000544 <__aeabi_i2d>
 80109ec:	4602      	mov	r2, r0
 80109ee:	460b      	mov	r3, r1
 80109f0:	4630      	mov	r0, r6
 80109f2:	4639      	mov	r1, r7
 80109f4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80109f8:	f7ef fc56 	bl	80002a8 <__aeabi_dsub>
 80109fc:	4b22      	ldr	r3, [pc, #136]	@ (8010a88 <__ieee754_rem_pio2+0x3f0>)
 80109fe:	2200      	movs	r2, #0
 8010a00:	f7ef fe0a 	bl	8000618 <__aeabi_dmul>
 8010a04:	460f      	mov	r7, r1
 8010a06:	4606      	mov	r6, r0
 8010a08:	f7f0 f8b6 	bl	8000b78 <__aeabi_d2iz>
 8010a0c:	f7ef fd9a 	bl	8000544 <__aeabi_i2d>
 8010a10:	4602      	mov	r2, r0
 8010a12:	460b      	mov	r3, r1
 8010a14:	4630      	mov	r0, r6
 8010a16:	4639      	mov	r1, r7
 8010a18:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8010a1c:	f7ef fc44 	bl	80002a8 <__aeabi_dsub>
 8010a20:	4b19      	ldr	r3, [pc, #100]	@ (8010a88 <__ieee754_rem_pio2+0x3f0>)
 8010a22:	2200      	movs	r2, #0
 8010a24:	f7ef fdf8 	bl	8000618 <__aeabi_dmul>
 8010a28:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 8010a2c:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 8010a30:	f04f 0803 	mov.w	r8, #3
 8010a34:	2600      	movs	r6, #0
 8010a36:	2700      	movs	r7, #0
 8010a38:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8010a3c:	4632      	mov	r2, r6
 8010a3e:	463b      	mov	r3, r7
 8010a40:	46c2      	mov	sl, r8
 8010a42:	f108 38ff 	add.w	r8, r8, #4294967295
 8010a46:	f7f0 f84f 	bl	8000ae8 <__aeabi_dcmpeq>
 8010a4a:	2800      	cmp	r0, #0
 8010a4c:	d1f4      	bne.n	8010a38 <__ieee754_rem_pio2+0x3a0>
 8010a4e:	4b0f      	ldr	r3, [pc, #60]	@ (8010a8c <__ieee754_rem_pio2+0x3f4>)
 8010a50:	9301      	str	r3, [sp, #4]
 8010a52:	2302      	movs	r3, #2
 8010a54:	9300      	str	r3, [sp, #0]
 8010a56:	462a      	mov	r2, r5
 8010a58:	4653      	mov	r3, sl
 8010a5a:	4621      	mov	r1, r4
 8010a5c:	a806      	add	r0, sp, #24
 8010a5e:	f000 f9b7 	bl	8010dd0 <__kernel_rem_pio2>
 8010a62:	9b04      	ldr	r3, [sp, #16]
 8010a64:	2b00      	cmp	r3, #0
 8010a66:	4605      	mov	r5, r0
 8010a68:	f6bf ae53 	bge.w	8010712 <__ieee754_rem_pio2+0x7a>
 8010a6c:	e9d4 2100 	ldrd	r2, r1, [r4]
 8010a70:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8010a74:	e9c4 2300 	strd	r2, r3, [r4]
 8010a78:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 8010a7c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8010a80:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8010a84:	e740      	b.n	8010908 <__ieee754_rem_pio2+0x270>
 8010a86:	bf00      	nop
 8010a88:	41700000 	.word	0x41700000
 8010a8c:	08014018 	.word	0x08014018

08010a90 <atan>:
 8010a90:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010a94:	ec55 4b10 	vmov	r4, r5, d0
 8010a98:	4bbf      	ldr	r3, [pc, #764]	@ (8010d98 <atan+0x308>)
 8010a9a:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 8010a9e:	429e      	cmp	r6, r3
 8010aa0:	46ab      	mov	fp, r5
 8010aa2:	d918      	bls.n	8010ad6 <atan+0x46>
 8010aa4:	4bbd      	ldr	r3, [pc, #756]	@ (8010d9c <atan+0x30c>)
 8010aa6:	429e      	cmp	r6, r3
 8010aa8:	d801      	bhi.n	8010aae <atan+0x1e>
 8010aaa:	d109      	bne.n	8010ac0 <atan+0x30>
 8010aac:	b144      	cbz	r4, 8010ac0 <atan+0x30>
 8010aae:	4622      	mov	r2, r4
 8010ab0:	462b      	mov	r3, r5
 8010ab2:	4620      	mov	r0, r4
 8010ab4:	4629      	mov	r1, r5
 8010ab6:	f7ef fbf9 	bl	80002ac <__adddf3>
 8010aba:	4604      	mov	r4, r0
 8010abc:	460d      	mov	r5, r1
 8010abe:	e006      	b.n	8010ace <atan+0x3e>
 8010ac0:	f1bb 0f00 	cmp.w	fp, #0
 8010ac4:	f340 812b 	ble.w	8010d1e <atan+0x28e>
 8010ac8:	a597      	add	r5, pc, #604	@ (adr r5, 8010d28 <atan+0x298>)
 8010aca:	e9d5 4500 	ldrd	r4, r5, [r5]
 8010ace:	ec45 4b10 	vmov	d0, r4, r5
 8010ad2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010ad6:	4bb2      	ldr	r3, [pc, #712]	@ (8010da0 <atan+0x310>)
 8010ad8:	429e      	cmp	r6, r3
 8010ada:	d813      	bhi.n	8010b04 <atan+0x74>
 8010adc:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 8010ae0:	429e      	cmp	r6, r3
 8010ae2:	d80c      	bhi.n	8010afe <atan+0x6e>
 8010ae4:	a392      	add	r3, pc, #584	@ (adr r3, 8010d30 <atan+0x2a0>)
 8010ae6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010aea:	4620      	mov	r0, r4
 8010aec:	4629      	mov	r1, r5
 8010aee:	f7ef fbdd 	bl	80002ac <__adddf3>
 8010af2:	4bac      	ldr	r3, [pc, #688]	@ (8010da4 <atan+0x314>)
 8010af4:	2200      	movs	r2, #0
 8010af6:	f7f0 f81f 	bl	8000b38 <__aeabi_dcmpgt>
 8010afa:	2800      	cmp	r0, #0
 8010afc:	d1e7      	bne.n	8010ace <atan+0x3e>
 8010afe:	f04f 3aff 	mov.w	sl, #4294967295
 8010b02:	e029      	b.n	8010b58 <atan+0xc8>
 8010b04:	f000 f95c 	bl	8010dc0 <fabs>
 8010b08:	4ba7      	ldr	r3, [pc, #668]	@ (8010da8 <atan+0x318>)
 8010b0a:	429e      	cmp	r6, r3
 8010b0c:	ec55 4b10 	vmov	r4, r5, d0
 8010b10:	f200 80bc 	bhi.w	8010c8c <atan+0x1fc>
 8010b14:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 8010b18:	429e      	cmp	r6, r3
 8010b1a:	f200 809e 	bhi.w	8010c5a <atan+0x1ca>
 8010b1e:	4622      	mov	r2, r4
 8010b20:	462b      	mov	r3, r5
 8010b22:	4620      	mov	r0, r4
 8010b24:	4629      	mov	r1, r5
 8010b26:	f7ef fbc1 	bl	80002ac <__adddf3>
 8010b2a:	4b9e      	ldr	r3, [pc, #632]	@ (8010da4 <atan+0x314>)
 8010b2c:	2200      	movs	r2, #0
 8010b2e:	f7ef fbbb 	bl	80002a8 <__aeabi_dsub>
 8010b32:	2200      	movs	r2, #0
 8010b34:	4606      	mov	r6, r0
 8010b36:	460f      	mov	r7, r1
 8010b38:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8010b3c:	4620      	mov	r0, r4
 8010b3e:	4629      	mov	r1, r5
 8010b40:	f7ef fbb4 	bl	80002ac <__adddf3>
 8010b44:	4602      	mov	r2, r0
 8010b46:	460b      	mov	r3, r1
 8010b48:	4630      	mov	r0, r6
 8010b4a:	4639      	mov	r1, r7
 8010b4c:	f7ef fe8e 	bl	800086c <__aeabi_ddiv>
 8010b50:	f04f 0a00 	mov.w	sl, #0
 8010b54:	4604      	mov	r4, r0
 8010b56:	460d      	mov	r5, r1
 8010b58:	4622      	mov	r2, r4
 8010b5a:	462b      	mov	r3, r5
 8010b5c:	4620      	mov	r0, r4
 8010b5e:	4629      	mov	r1, r5
 8010b60:	f7ef fd5a 	bl	8000618 <__aeabi_dmul>
 8010b64:	4602      	mov	r2, r0
 8010b66:	460b      	mov	r3, r1
 8010b68:	4680      	mov	r8, r0
 8010b6a:	4689      	mov	r9, r1
 8010b6c:	f7ef fd54 	bl	8000618 <__aeabi_dmul>
 8010b70:	a371      	add	r3, pc, #452	@ (adr r3, 8010d38 <atan+0x2a8>)
 8010b72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b76:	4606      	mov	r6, r0
 8010b78:	460f      	mov	r7, r1
 8010b7a:	f7ef fd4d 	bl	8000618 <__aeabi_dmul>
 8010b7e:	a370      	add	r3, pc, #448	@ (adr r3, 8010d40 <atan+0x2b0>)
 8010b80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b84:	f7ef fb92 	bl	80002ac <__adddf3>
 8010b88:	4632      	mov	r2, r6
 8010b8a:	463b      	mov	r3, r7
 8010b8c:	f7ef fd44 	bl	8000618 <__aeabi_dmul>
 8010b90:	a36d      	add	r3, pc, #436	@ (adr r3, 8010d48 <atan+0x2b8>)
 8010b92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b96:	f7ef fb89 	bl	80002ac <__adddf3>
 8010b9a:	4632      	mov	r2, r6
 8010b9c:	463b      	mov	r3, r7
 8010b9e:	f7ef fd3b 	bl	8000618 <__aeabi_dmul>
 8010ba2:	a36b      	add	r3, pc, #428	@ (adr r3, 8010d50 <atan+0x2c0>)
 8010ba4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ba8:	f7ef fb80 	bl	80002ac <__adddf3>
 8010bac:	4632      	mov	r2, r6
 8010bae:	463b      	mov	r3, r7
 8010bb0:	f7ef fd32 	bl	8000618 <__aeabi_dmul>
 8010bb4:	a368      	add	r3, pc, #416	@ (adr r3, 8010d58 <atan+0x2c8>)
 8010bb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010bba:	f7ef fb77 	bl	80002ac <__adddf3>
 8010bbe:	4632      	mov	r2, r6
 8010bc0:	463b      	mov	r3, r7
 8010bc2:	f7ef fd29 	bl	8000618 <__aeabi_dmul>
 8010bc6:	a366      	add	r3, pc, #408	@ (adr r3, 8010d60 <atan+0x2d0>)
 8010bc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010bcc:	f7ef fb6e 	bl	80002ac <__adddf3>
 8010bd0:	4642      	mov	r2, r8
 8010bd2:	464b      	mov	r3, r9
 8010bd4:	f7ef fd20 	bl	8000618 <__aeabi_dmul>
 8010bd8:	a363      	add	r3, pc, #396	@ (adr r3, 8010d68 <atan+0x2d8>)
 8010bda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010bde:	4680      	mov	r8, r0
 8010be0:	4689      	mov	r9, r1
 8010be2:	4630      	mov	r0, r6
 8010be4:	4639      	mov	r1, r7
 8010be6:	f7ef fd17 	bl	8000618 <__aeabi_dmul>
 8010bea:	a361      	add	r3, pc, #388	@ (adr r3, 8010d70 <atan+0x2e0>)
 8010bec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010bf0:	f7ef fb5a 	bl	80002a8 <__aeabi_dsub>
 8010bf4:	4632      	mov	r2, r6
 8010bf6:	463b      	mov	r3, r7
 8010bf8:	f7ef fd0e 	bl	8000618 <__aeabi_dmul>
 8010bfc:	a35e      	add	r3, pc, #376	@ (adr r3, 8010d78 <atan+0x2e8>)
 8010bfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c02:	f7ef fb51 	bl	80002a8 <__aeabi_dsub>
 8010c06:	4632      	mov	r2, r6
 8010c08:	463b      	mov	r3, r7
 8010c0a:	f7ef fd05 	bl	8000618 <__aeabi_dmul>
 8010c0e:	a35c      	add	r3, pc, #368	@ (adr r3, 8010d80 <atan+0x2f0>)
 8010c10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c14:	f7ef fb48 	bl	80002a8 <__aeabi_dsub>
 8010c18:	4632      	mov	r2, r6
 8010c1a:	463b      	mov	r3, r7
 8010c1c:	f7ef fcfc 	bl	8000618 <__aeabi_dmul>
 8010c20:	a359      	add	r3, pc, #356	@ (adr r3, 8010d88 <atan+0x2f8>)
 8010c22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c26:	f7ef fb3f 	bl	80002a8 <__aeabi_dsub>
 8010c2a:	4632      	mov	r2, r6
 8010c2c:	463b      	mov	r3, r7
 8010c2e:	f7ef fcf3 	bl	8000618 <__aeabi_dmul>
 8010c32:	4602      	mov	r2, r0
 8010c34:	460b      	mov	r3, r1
 8010c36:	4640      	mov	r0, r8
 8010c38:	4649      	mov	r1, r9
 8010c3a:	f7ef fb37 	bl	80002ac <__adddf3>
 8010c3e:	4622      	mov	r2, r4
 8010c40:	462b      	mov	r3, r5
 8010c42:	f7ef fce9 	bl	8000618 <__aeabi_dmul>
 8010c46:	f1ba 3fff 	cmp.w	sl, #4294967295
 8010c4a:	4602      	mov	r2, r0
 8010c4c:	460b      	mov	r3, r1
 8010c4e:	d148      	bne.n	8010ce2 <atan+0x252>
 8010c50:	4620      	mov	r0, r4
 8010c52:	4629      	mov	r1, r5
 8010c54:	f7ef fb28 	bl	80002a8 <__aeabi_dsub>
 8010c58:	e72f      	b.n	8010aba <atan+0x2a>
 8010c5a:	4b52      	ldr	r3, [pc, #328]	@ (8010da4 <atan+0x314>)
 8010c5c:	2200      	movs	r2, #0
 8010c5e:	4620      	mov	r0, r4
 8010c60:	4629      	mov	r1, r5
 8010c62:	f7ef fb21 	bl	80002a8 <__aeabi_dsub>
 8010c66:	4b4f      	ldr	r3, [pc, #316]	@ (8010da4 <atan+0x314>)
 8010c68:	4606      	mov	r6, r0
 8010c6a:	460f      	mov	r7, r1
 8010c6c:	2200      	movs	r2, #0
 8010c6e:	4620      	mov	r0, r4
 8010c70:	4629      	mov	r1, r5
 8010c72:	f7ef fb1b 	bl	80002ac <__adddf3>
 8010c76:	4602      	mov	r2, r0
 8010c78:	460b      	mov	r3, r1
 8010c7a:	4630      	mov	r0, r6
 8010c7c:	4639      	mov	r1, r7
 8010c7e:	f7ef fdf5 	bl	800086c <__aeabi_ddiv>
 8010c82:	f04f 0a01 	mov.w	sl, #1
 8010c86:	4604      	mov	r4, r0
 8010c88:	460d      	mov	r5, r1
 8010c8a:	e765      	b.n	8010b58 <atan+0xc8>
 8010c8c:	4b47      	ldr	r3, [pc, #284]	@ (8010dac <atan+0x31c>)
 8010c8e:	429e      	cmp	r6, r3
 8010c90:	d21c      	bcs.n	8010ccc <atan+0x23c>
 8010c92:	4b47      	ldr	r3, [pc, #284]	@ (8010db0 <atan+0x320>)
 8010c94:	2200      	movs	r2, #0
 8010c96:	4620      	mov	r0, r4
 8010c98:	4629      	mov	r1, r5
 8010c9a:	f7ef fb05 	bl	80002a8 <__aeabi_dsub>
 8010c9e:	4b44      	ldr	r3, [pc, #272]	@ (8010db0 <atan+0x320>)
 8010ca0:	4606      	mov	r6, r0
 8010ca2:	460f      	mov	r7, r1
 8010ca4:	2200      	movs	r2, #0
 8010ca6:	4620      	mov	r0, r4
 8010ca8:	4629      	mov	r1, r5
 8010caa:	f7ef fcb5 	bl	8000618 <__aeabi_dmul>
 8010cae:	4b3d      	ldr	r3, [pc, #244]	@ (8010da4 <atan+0x314>)
 8010cb0:	2200      	movs	r2, #0
 8010cb2:	f7ef fafb 	bl	80002ac <__adddf3>
 8010cb6:	4602      	mov	r2, r0
 8010cb8:	460b      	mov	r3, r1
 8010cba:	4630      	mov	r0, r6
 8010cbc:	4639      	mov	r1, r7
 8010cbe:	f7ef fdd5 	bl	800086c <__aeabi_ddiv>
 8010cc2:	f04f 0a02 	mov.w	sl, #2
 8010cc6:	4604      	mov	r4, r0
 8010cc8:	460d      	mov	r5, r1
 8010cca:	e745      	b.n	8010b58 <atan+0xc8>
 8010ccc:	4622      	mov	r2, r4
 8010cce:	462b      	mov	r3, r5
 8010cd0:	4938      	ldr	r1, [pc, #224]	@ (8010db4 <atan+0x324>)
 8010cd2:	2000      	movs	r0, #0
 8010cd4:	f7ef fdca 	bl	800086c <__aeabi_ddiv>
 8010cd8:	f04f 0a03 	mov.w	sl, #3
 8010cdc:	4604      	mov	r4, r0
 8010cde:	460d      	mov	r5, r1
 8010ce0:	e73a      	b.n	8010b58 <atan+0xc8>
 8010ce2:	4b35      	ldr	r3, [pc, #212]	@ (8010db8 <atan+0x328>)
 8010ce4:	4e35      	ldr	r6, [pc, #212]	@ (8010dbc <atan+0x32c>)
 8010ce6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8010cea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010cee:	f7ef fadb 	bl	80002a8 <__aeabi_dsub>
 8010cf2:	4622      	mov	r2, r4
 8010cf4:	462b      	mov	r3, r5
 8010cf6:	f7ef fad7 	bl	80002a8 <__aeabi_dsub>
 8010cfa:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8010cfe:	4602      	mov	r2, r0
 8010d00:	460b      	mov	r3, r1
 8010d02:	e9d6 0100 	ldrd	r0, r1, [r6]
 8010d06:	f7ef facf 	bl	80002a8 <__aeabi_dsub>
 8010d0a:	f1bb 0f00 	cmp.w	fp, #0
 8010d0e:	4604      	mov	r4, r0
 8010d10:	460d      	mov	r5, r1
 8010d12:	f6bf aedc 	bge.w	8010ace <atan+0x3e>
 8010d16:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8010d1a:	461d      	mov	r5, r3
 8010d1c:	e6d7      	b.n	8010ace <atan+0x3e>
 8010d1e:	a51c      	add	r5, pc, #112	@ (adr r5, 8010d90 <atan+0x300>)
 8010d20:	e9d5 4500 	ldrd	r4, r5, [r5]
 8010d24:	e6d3      	b.n	8010ace <atan+0x3e>
 8010d26:	bf00      	nop
 8010d28:	54442d18 	.word	0x54442d18
 8010d2c:	3ff921fb 	.word	0x3ff921fb
 8010d30:	8800759c 	.word	0x8800759c
 8010d34:	7e37e43c 	.word	0x7e37e43c
 8010d38:	e322da11 	.word	0xe322da11
 8010d3c:	3f90ad3a 	.word	0x3f90ad3a
 8010d40:	24760deb 	.word	0x24760deb
 8010d44:	3fa97b4b 	.word	0x3fa97b4b
 8010d48:	a0d03d51 	.word	0xa0d03d51
 8010d4c:	3fb10d66 	.word	0x3fb10d66
 8010d50:	c54c206e 	.word	0xc54c206e
 8010d54:	3fb745cd 	.word	0x3fb745cd
 8010d58:	920083ff 	.word	0x920083ff
 8010d5c:	3fc24924 	.word	0x3fc24924
 8010d60:	5555550d 	.word	0x5555550d
 8010d64:	3fd55555 	.word	0x3fd55555
 8010d68:	2c6a6c2f 	.word	0x2c6a6c2f
 8010d6c:	bfa2b444 	.word	0xbfa2b444
 8010d70:	52defd9a 	.word	0x52defd9a
 8010d74:	3fadde2d 	.word	0x3fadde2d
 8010d78:	af749a6d 	.word	0xaf749a6d
 8010d7c:	3fb3b0f2 	.word	0x3fb3b0f2
 8010d80:	fe231671 	.word	0xfe231671
 8010d84:	3fbc71c6 	.word	0x3fbc71c6
 8010d88:	9998ebc4 	.word	0x9998ebc4
 8010d8c:	3fc99999 	.word	0x3fc99999
 8010d90:	54442d18 	.word	0x54442d18
 8010d94:	bff921fb 	.word	0xbff921fb
 8010d98:	440fffff 	.word	0x440fffff
 8010d9c:	7ff00000 	.word	0x7ff00000
 8010da0:	3fdbffff 	.word	0x3fdbffff
 8010da4:	3ff00000 	.word	0x3ff00000
 8010da8:	3ff2ffff 	.word	0x3ff2ffff
 8010dac:	40038000 	.word	0x40038000
 8010db0:	3ff80000 	.word	0x3ff80000
 8010db4:	bff00000 	.word	0xbff00000
 8010db8:	08014120 	.word	0x08014120
 8010dbc:	08014140 	.word	0x08014140

08010dc0 <fabs>:
 8010dc0:	ec51 0b10 	vmov	r0, r1, d0
 8010dc4:	4602      	mov	r2, r0
 8010dc6:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8010dca:	ec43 2b10 	vmov	d0, r2, r3
 8010dce:	4770      	bx	lr

08010dd0 <__kernel_rem_pio2>:
 8010dd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010dd4:	ed2d 8b02 	vpush	{d8}
 8010dd8:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 8010ddc:	f112 0f14 	cmn.w	r2, #20
 8010de0:	9306      	str	r3, [sp, #24]
 8010de2:	9104      	str	r1, [sp, #16]
 8010de4:	4bbe      	ldr	r3, [pc, #760]	@ (80110e0 <__kernel_rem_pio2+0x310>)
 8010de6:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 8010de8:	9008      	str	r0, [sp, #32]
 8010dea:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8010dee:	9300      	str	r3, [sp, #0]
 8010df0:	9b06      	ldr	r3, [sp, #24]
 8010df2:	f103 33ff 	add.w	r3, r3, #4294967295
 8010df6:	bfa8      	it	ge
 8010df8:	1ed4      	subge	r4, r2, #3
 8010dfa:	9305      	str	r3, [sp, #20]
 8010dfc:	bfb2      	itee	lt
 8010dfe:	2400      	movlt	r4, #0
 8010e00:	2318      	movge	r3, #24
 8010e02:	fb94 f4f3 	sdivge	r4, r4, r3
 8010e06:	f06f 0317 	mvn.w	r3, #23
 8010e0a:	fb04 3303 	mla	r3, r4, r3, r3
 8010e0e:	eb03 0b02 	add.w	fp, r3, r2
 8010e12:	9b00      	ldr	r3, [sp, #0]
 8010e14:	9a05      	ldr	r2, [sp, #20]
 8010e16:	ed9f 8bae 	vldr	d8, [pc, #696]	@ 80110d0 <__kernel_rem_pio2+0x300>
 8010e1a:	eb03 0802 	add.w	r8, r3, r2
 8010e1e:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8010e20:	1aa7      	subs	r7, r4, r2
 8010e22:	ae20      	add	r6, sp, #128	@ 0x80
 8010e24:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8010e28:	2500      	movs	r5, #0
 8010e2a:	4545      	cmp	r5, r8
 8010e2c:	dd13      	ble.n	8010e56 <__kernel_rem_pio2+0x86>
 8010e2e:	9b06      	ldr	r3, [sp, #24]
 8010e30:	aa20      	add	r2, sp, #128	@ 0x80
 8010e32:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8010e36:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 8010e3a:	f04f 0800 	mov.w	r8, #0
 8010e3e:	9b00      	ldr	r3, [sp, #0]
 8010e40:	4598      	cmp	r8, r3
 8010e42:	dc31      	bgt.n	8010ea8 <__kernel_rem_pio2+0xd8>
 8010e44:	ed9f 7ba2 	vldr	d7, [pc, #648]	@ 80110d0 <__kernel_rem_pio2+0x300>
 8010e48:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8010e4c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8010e50:	462f      	mov	r7, r5
 8010e52:	2600      	movs	r6, #0
 8010e54:	e01b      	b.n	8010e8e <__kernel_rem_pio2+0xbe>
 8010e56:	42ef      	cmn	r7, r5
 8010e58:	d407      	bmi.n	8010e6a <__kernel_rem_pio2+0x9a>
 8010e5a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8010e5e:	f7ef fb71 	bl	8000544 <__aeabi_i2d>
 8010e62:	e8e6 0102 	strd	r0, r1, [r6], #8
 8010e66:	3501      	adds	r5, #1
 8010e68:	e7df      	b.n	8010e2a <__kernel_rem_pio2+0x5a>
 8010e6a:	ec51 0b18 	vmov	r0, r1, d8
 8010e6e:	e7f8      	b.n	8010e62 <__kernel_rem_pio2+0x92>
 8010e70:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010e74:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8010e78:	f7ef fbce 	bl	8000618 <__aeabi_dmul>
 8010e7c:	4602      	mov	r2, r0
 8010e7e:	460b      	mov	r3, r1
 8010e80:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010e84:	f7ef fa12 	bl	80002ac <__adddf3>
 8010e88:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010e8c:	3601      	adds	r6, #1
 8010e8e:	9b05      	ldr	r3, [sp, #20]
 8010e90:	429e      	cmp	r6, r3
 8010e92:	f1a7 0708 	sub.w	r7, r7, #8
 8010e96:	ddeb      	ble.n	8010e70 <__kernel_rem_pio2+0xa0>
 8010e98:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010e9c:	f108 0801 	add.w	r8, r8, #1
 8010ea0:	ecaa 7b02 	vstmia	sl!, {d7}
 8010ea4:	3508      	adds	r5, #8
 8010ea6:	e7ca      	b.n	8010e3e <__kernel_rem_pio2+0x6e>
 8010ea8:	9b00      	ldr	r3, [sp, #0]
 8010eaa:	f8dd 8000 	ldr.w	r8, [sp]
 8010eae:	aa0c      	add	r2, sp, #48	@ 0x30
 8010eb0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8010eb4:	930a      	str	r3, [sp, #40]	@ 0x28
 8010eb6:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8010eb8:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8010ebc:	9309      	str	r3, [sp, #36]	@ 0x24
 8010ebe:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 8010ec2:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010ec4:	ab98      	add	r3, sp, #608	@ 0x260
 8010ec6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8010eca:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 8010ece:	ed8d 7b02 	vstr	d7, [sp, #8]
 8010ed2:	ac0c      	add	r4, sp, #48	@ 0x30
 8010ed4:	ab70      	add	r3, sp, #448	@ 0x1c0
 8010ed6:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 8010eda:	46a1      	mov	r9, r4
 8010edc:	46c2      	mov	sl, r8
 8010ede:	f1ba 0f00 	cmp.w	sl, #0
 8010ee2:	f1a5 0508 	sub.w	r5, r5, #8
 8010ee6:	dc77      	bgt.n	8010fd8 <__kernel_rem_pio2+0x208>
 8010ee8:	4658      	mov	r0, fp
 8010eea:	ed9d 0b02 	vldr	d0, [sp, #8]
 8010eee:	f000 fac7 	bl	8011480 <scalbn>
 8010ef2:	ec57 6b10 	vmov	r6, r7, d0
 8010ef6:	2200      	movs	r2, #0
 8010ef8:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 8010efc:	4630      	mov	r0, r6
 8010efe:	4639      	mov	r1, r7
 8010f00:	f7ef fb8a 	bl	8000618 <__aeabi_dmul>
 8010f04:	ec41 0b10 	vmov	d0, r0, r1
 8010f08:	f7ff f8b6 	bl	8010078 <floor>
 8010f0c:	4b75      	ldr	r3, [pc, #468]	@ (80110e4 <__kernel_rem_pio2+0x314>)
 8010f0e:	ec51 0b10 	vmov	r0, r1, d0
 8010f12:	2200      	movs	r2, #0
 8010f14:	f7ef fb80 	bl	8000618 <__aeabi_dmul>
 8010f18:	4602      	mov	r2, r0
 8010f1a:	460b      	mov	r3, r1
 8010f1c:	4630      	mov	r0, r6
 8010f1e:	4639      	mov	r1, r7
 8010f20:	f7ef f9c2 	bl	80002a8 <__aeabi_dsub>
 8010f24:	460f      	mov	r7, r1
 8010f26:	4606      	mov	r6, r0
 8010f28:	f7ef fe26 	bl	8000b78 <__aeabi_d2iz>
 8010f2c:	9002      	str	r0, [sp, #8]
 8010f2e:	f7ef fb09 	bl	8000544 <__aeabi_i2d>
 8010f32:	4602      	mov	r2, r0
 8010f34:	460b      	mov	r3, r1
 8010f36:	4630      	mov	r0, r6
 8010f38:	4639      	mov	r1, r7
 8010f3a:	f7ef f9b5 	bl	80002a8 <__aeabi_dsub>
 8010f3e:	f1bb 0f00 	cmp.w	fp, #0
 8010f42:	4606      	mov	r6, r0
 8010f44:	460f      	mov	r7, r1
 8010f46:	dd6c      	ble.n	8011022 <__kernel_rem_pio2+0x252>
 8010f48:	f108 31ff 	add.w	r1, r8, #4294967295
 8010f4c:	ab0c      	add	r3, sp, #48	@ 0x30
 8010f4e:	9d02      	ldr	r5, [sp, #8]
 8010f50:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8010f54:	f1cb 0018 	rsb	r0, fp, #24
 8010f58:	fa43 f200 	asr.w	r2, r3, r0
 8010f5c:	4415      	add	r5, r2
 8010f5e:	4082      	lsls	r2, r0
 8010f60:	1a9b      	subs	r3, r3, r2
 8010f62:	aa0c      	add	r2, sp, #48	@ 0x30
 8010f64:	9502      	str	r5, [sp, #8]
 8010f66:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8010f6a:	f1cb 0217 	rsb	r2, fp, #23
 8010f6e:	fa43 f902 	asr.w	r9, r3, r2
 8010f72:	f1b9 0f00 	cmp.w	r9, #0
 8010f76:	dd64      	ble.n	8011042 <__kernel_rem_pio2+0x272>
 8010f78:	9b02      	ldr	r3, [sp, #8]
 8010f7a:	2200      	movs	r2, #0
 8010f7c:	3301      	adds	r3, #1
 8010f7e:	9302      	str	r3, [sp, #8]
 8010f80:	4615      	mov	r5, r2
 8010f82:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 8010f86:	4590      	cmp	r8, r2
 8010f88:	f300 80b8 	bgt.w	80110fc <__kernel_rem_pio2+0x32c>
 8010f8c:	f1bb 0f00 	cmp.w	fp, #0
 8010f90:	dd07      	ble.n	8010fa2 <__kernel_rem_pio2+0x1d2>
 8010f92:	f1bb 0f01 	cmp.w	fp, #1
 8010f96:	f000 80bf 	beq.w	8011118 <__kernel_rem_pio2+0x348>
 8010f9a:	f1bb 0f02 	cmp.w	fp, #2
 8010f9e:	f000 80c6 	beq.w	801112e <__kernel_rem_pio2+0x35e>
 8010fa2:	f1b9 0f02 	cmp.w	r9, #2
 8010fa6:	d14c      	bne.n	8011042 <__kernel_rem_pio2+0x272>
 8010fa8:	4632      	mov	r2, r6
 8010faa:	463b      	mov	r3, r7
 8010fac:	494e      	ldr	r1, [pc, #312]	@ (80110e8 <__kernel_rem_pio2+0x318>)
 8010fae:	2000      	movs	r0, #0
 8010fb0:	f7ef f97a 	bl	80002a8 <__aeabi_dsub>
 8010fb4:	4606      	mov	r6, r0
 8010fb6:	460f      	mov	r7, r1
 8010fb8:	2d00      	cmp	r5, #0
 8010fba:	d042      	beq.n	8011042 <__kernel_rem_pio2+0x272>
 8010fbc:	4658      	mov	r0, fp
 8010fbe:	ed9f 0b46 	vldr	d0, [pc, #280]	@ 80110d8 <__kernel_rem_pio2+0x308>
 8010fc2:	f000 fa5d 	bl	8011480 <scalbn>
 8010fc6:	4630      	mov	r0, r6
 8010fc8:	4639      	mov	r1, r7
 8010fca:	ec53 2b10 	vmov	r2, r3, d0
 8010fce:	f7ef f96b 	bl	80002a8 <__aeabi_dsub>
 8010fd2:	4606      	mov	r6, r0
 8010fd4:	460f      	mov	r7, r1
 8010fd6:	e034      	b.n	8011042 <__kernel_rem_pio2+0x272>
 8010fd8:	4b44      	ldr	r3, [pc, #272]	@ (80110ec <__kernel_rem_pio2+0x31c>)
 8010fda:	2200      	movs	r2, #0
 8010fdc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010fe0:	f7ef fb1a 	bl	8000618 <__aeabi_dmul>
 8010fe4:	f7ef fdc8 	bl	8000b78 <__aeabi_d2iz>
 8010fe8:	f7ef faac 	bl	8000544 <__aeabi_i2d>
 8010fec:	4b40      	ldr	r3, [pc, #256]	@ (80110f0 <__kernel_rem_pio2+0x320>)
 8010fee:	2200      	movs	r2, #0
 8010ff0:	4606      	mov	r6, r0
 8010ff2:	460f      	mov	r7, r1
 8010ff4:	f7ef fb10 	bl	8000618 <__aeabi_dmul>
 8010ff8:	4602      	mov	r2, r0
 8010ffa:	460b      	mov	r3, r1
 8010ffc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011000:	f7ef f952 	bl	80002a8 <__aeabi_dsub>
 8011004:	f7ef fdb8 	bl	8000b78 <__aeabi_d2iz>
 8011008:	e9d5 2300 	ldrd	r2, r3, [r5]
 801100c:	f849 0b04 	str.w	r0, [r9], #4
 8011010:	4639      	mov	r1, r7
 8011012:	4630      	mov	r0, r6
 8011014:	f7ef f94a 	bl	80002ac <__adddf3>
 8011018:	f10a 3aff 	add.w	sl, sl, #4294967295
 801101c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011020:	e75d      	b.n	8010ede <__kernel_rem_pio2+0x10e>
 8011022:	d107      	bne.n	8011034 <__kernel_rem_pio2+0x264>
 8011024:	f108 33ff 	add.w	r3, r8, #4294967295
 8011028:	aa0c      	add	r2, sp, #48	@ 0x30
 801102a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801102e:	ea4f 59e3 	mov.w	r9, r3, asr #23
 8011032:	e79e      	b.n	8010f72 <__kernel_rem_pio2+0x1a2>
 8011034:	4b2f      	ldr	r3, [pc, #188]	@ (80110f4 <__kernel_rem_pio2+0x324>)
 8011036:	2200      	movs	r2, #0
 8011038:	f7ef fd74 	bl	8000b24 <__aeabi_dcmpge>
 801103c:	2800      	cmp	r0, #0
 801103e:	d143      	bne.n	80110c8 <__kernel_rem_pio2+0x2f8>
 8011040:	4681      	mov	r9, r0
 8011042:	2200      	movs	r2, #0
 8011044:	2300      	movs	r3, #0
 8011046:	4630      	mov	r0, r6
 8011048:	4639      	mov	r1, r7
 801104a:	f7ef fd4d 	bl	8000ae8 <__aeabi_dcmpeq>
 801104e:	2800      	cmp	r0, #0
 8011050:	f000 80bf 	beq.w	80111d2 <__kernel_rem_pio2+0x402>
 8011054:	f108 33ff 	add.w	r3, r8, #4294967295
 8011058:	2200      	movs	r2, #0
 801105a:	9900      	ldr	r1, [sp, #0]
 801105c:	428b      	cmp	r3, r1
 801105e:	da6e      	bge.n	801113e <__kernel_rem_pio2+0x36e>
 8011060:	2a00      	cmp	r2, #0
 8011062:	f000 8089 	beq.w	8011178 <__kernel_rem_pio2+0x3a8>
 8011066:	f108 38ff 	add.w	r8, r8, #4294967295
 801106a:	ab0c      	add	r3, sp, #48	@ 0x30
 801106c:	f1ab 0b18 	sub.w	fp, fp, #24
 8011070:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 8011074:	2b00      	cmp	r3, #0
 8011076:	d0f6      	beq.n	8011066 <__kernel_rem_pio2+0x296>
 8011078:	4658      	mov	r0, fp
 801107a:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 80110d8 <__kernel_rem_pio2+0x308>
 801107e:	f000 f9ff 	bl	8011480 <scalbn>
 8011082:	f108 0301 	add.w	r3, r8, #1
 8011086:	00da      	lsls	r2, r3, #3
 8011088:	9205      	str	r2, [sp, #20]
 801108a:	ec55 4b10 	vmov	r4, r5, d0
 801108e:	aa70      	add	r2, sp, #448	@ 0x1c0
 8011090:	f8df b058 	ldr.w	fp, [pc, #88]	@ 80110ec <__kernel_rem_pio2+0x31c>
 8011094:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 8011098:	4646      	mov	r6, r8
 801109a:	f04f 0a00 	mov.w	sl, #0
 801109e:	2e00      	cmp	r6, #0
 80110a0:	f280 80cf 	bge.w	8011242 <__kernel_rem_pio2+0x472>
 80110a4:	4644      	mov	r4, r8
 80110a6:	2c00      	cmp	r4, #0
 80110a8:	f2c0 80fd 	blt.w	80112a6 <__kernel_rem_pio2+0x4d6>
 80110ac:	4b12      	ldr	r3, [pc, #72]	@ (80110f8 <__kernel_rem_pio2+0x328>)
 80110ae:	461f      	mov	r7, r3
 80110b0:	ab70      	add	r3, sp, #448	@ 0x1c0
 80110b2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80110b6:	9306      	str	r3, [sp, #24]
 80110b8:	f04f 0a00 	mov.w	sl, #0
 80110bc:	f04f 0b00 	mov.w	fp, #0
 80110c0:	2600      	movs	r6, #0
 80110c2:	eba8 0504 	sub.w	r5, r8, r4
 80110c6:	e0e2      	b.n	801128e <__kernel_rem_pio2+0x4be>
 80110c8:	f04f 0902 	mov.w	r9, #2
 80110cc:	e754      	b.n	8010f78 <__kernel_rem_pio2+0x1a8>
 80110ce:	bf00      	nop
	...
 80110dc:	3ff00000 	.word	0x3ff00000
 80110e0:	080141a0 	.word	0x080141a0
 80110e4:	40200000 	.word	0x40200000
 80110e8:	3ff00000 	.word	0x3ff00000
 80110ec:	3e700000 	.word	0x3e700000
 80110f0:	41700000 	.word	0x41700000
 80110f4:	3fe00000 	.word	0x3fe00000
 80110f8:	08014160 	.word	0x08014160
 80110fc:	f854 3b04 	ldr.w	r3, [r4], #4
 8011100:	b945      	cbnz	r5, 8011114 <__kernel_rem_pio2+0x344>
 8011102:	b123      	cbz	r3, 801110e <__kernel_rem_pio2+0x33e>
 8011104:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 8011108:	f844 3c04 	str.w	r3, [r4, #-4]
 801110c:	2301      	movs	r3, #1
 801110e:	3201      	adds	r2, #1
 8011110:	461d      	mov	r5, r3
 8011112:	e738      	b.n	8010f86 <__kernel_rem_pio2+0x1b6>
 8011114:	1acb      	subs	r3, r1, r3
 8011116:	e7f7      	b.n	8011108 <__kernel_rem_pio2+0x338>
 8011118:	f108 32ff 	add.w	r2, r8, #4294967295
 801111c:	ab0c      	add	r3, sp, #48	@ 0x30
 801111e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011122:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8011126:	a90c      	add	r1, sp, #48	@ 0x30
 8011128:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 801112c:	e739      	b.n	8010fa2 <__kernel_rem_pio2+0x1d2>
 801112e:	f108 32ff 	add.w	r2, r8, #4294967295
 8011132:	ab0c      	add	r3, sp, #48	@ 0x30
 8011134:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011138:	f3c3 0315 	ubfx	r3, r3, #0, #22
 801113c:	e7f3      	b.n	8011126 <__kernel_rem_pio2+0x356>
 801113e:	a90c      	add	r1, sp, #48	@ 0x30
 8011140:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8011144:	3b01      	subs	r3, #1
 8011146:	430a      	orrs	r2, r1
 8011148:	e787      	b.n	801105a <__kernel_rem_pio2+0x28a>
 801114a:	3401      	adds	r4, #1
 801114c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8011150:	2a00      	cmp	r2, #0
 8011152:	d0fa      	beq.n	801114a <__kernel_rem_pio2+0x37a>
 8011154:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011156:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 801115a:	eb0d 0503 	add.w	r5, sp, r3
 801115e:	9b06      	ldr	r3, [sp, #24]
 8011160:	aa20      	add	r2, sp, #128	@ 0x80
 8011162:	4443      	add	r3, r8
 8011164:	f108 0701 	add.w	r7, r8, #1
 8011168:	3d98      	subs	r5, #152	@ 0x98
 801116a:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 801116e:	4444      	add	r4, r8
 8011170:	42bc      	cmp	r4, r7
 8011172:	da04      	bge.n	801117e <__kernel_rem_pio2+0x3ae>
 8011174:	46a0      	mov	r8, r4
 8011176:	e6a2      	b.n	8010ebe <__kernel_rem_pio2+0xee>
 8011178:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801117a:	2401      	movs	r4, #1
 801117c:	e7e6      	b.n	801114c <__kernel_rem_pio2+0x37c>
 801117e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011180:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 8011184:	f7ef f9de 	bl	8000544 <__aeabi_i2d>
 8011188:	ed9f 7bb1 	vldr	d7, [pc, #708]	@ 8011450 <__kernel_rem_pio2+0x680>
 801118c:	e8e6 0102 	strd	r0, r1, [r6], #8
 8011190:	ed8d 7b02 	vstr	d7, [sp, #8]
 8011194:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8011198:	46b2      	mov	sl, r6
 801119a:	f04f 0800 	mov.w	r8, #0
 801119e:	9b05      	ldr	r3, [sp, #20]
 80111a0:	4598      	cmp	r8, r3
 80111a2:	dd05      	ble.n	80111b0 <__kernel_rem_pio2+0x3e0>
 80111a4:	ed9d 7b02 	vldr	d7, [sp, #8]
 80111a8:	3701      	adds	r7, #1
 80111aa:	eca5 7b02 	vstmia	r5!, {d7}
 80111ae:	e7df      	b.n	8011170 <__kernel_rem_pio2+0x3a0>
 80111b0:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 80111b4:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 80111b8:	f7ef fa2e 	bl	8000618 <__aeabi_dmul>
 80111bc:	4602      	mov	r2, r0
 80111be:	460b      	mov	r3, r1
 80111c0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80111c4:	f7ef f872 	bl	80002ac <__adddf3>
 80111c8:	f108 0801 	add.w	r8, r8, #1
 80111cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80111d0:	e7e5      	b.n	801119e <__kernel_rem_pio2+0x3ce>
 80111d2:	f1cb 0000 	rsb	r0, fp, #0
 80111d6:	ec47 6b10 	vmov	d0, r6, r7
 80111da:	f000 f951 	bl	8011480 <scalbn>
 80111de:	ec55 4b10 	vmov	r4, r5, d0
 80111e2:	4b9d      	ldr	r3, [pc, #628]	@ (8011458 <__kernel_rem_pio2+0x688>)
 80111e4:	2200      	movs	r2, #0
 80111e6:	4620      	mov	r0, r4
 80111e8:	4629      	mov	r1, r5
 80111ea:	f7ef fc9b 	bl	8000b24 <__aeabi_dcmpge>
 80111ee:	b300      	cbz	r0, 8011232 <__kernel_rem_pio2+0x462>
 80111f0:	4b9a      	ldr	r3, [pc, #616]	@ (801145c <__kernel_rem_pio2+0x68c>)
 80111f2:	2200      	movs	r2, #0
 80111f4:	4620      	mov	r0, r4
 80111f6:	4629      	mov	r1, r5
 80111f8:	f7ef fa0e 	bl	8000618 <__aeabi_dmul>
 80111fc:	f7ef fcbc 	bl	8000b78 <__aeabi_d2iz>
 8011200:	4606      	mov	r6, r0
 8011202:	f7ef f99f 	bl	8000544 <__aeabi_i2d>
 8011206:	4b94      	ldr	r3, [pc, #592]	@ (8011458 <__kernel_rem_pio2+0x688>)
 8011208:	2200      	movs	r2, #0
 801120a:	f7ef fa05 	bl	8000618 <__aeabi_dmul>
 801120e:	460b      	mov	r3, r1
 8011210:	4602      	mov	r2, r0
 8011212:	4629      	mov	r1, r5
 8011214:	4620      	mov	r0, r4
 8011216:	f7ef f847 	bl	80002a8 <__aeabi_dsub>
 801121a:	f7ef fcad 	bl	8000b78 <__aeabi_d2iz>
 801121e:	ab0c      	add	r3, sp, #48	@ 0x30
 8011220:	f10b 0b18 	add.w	fp, fp, #24
 8011224:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8011228:	f108 0801 	add.w	r8, r8, #1
 801122c:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 8011230:	e722      	b.n	8011078 <__kernel_rem_pio2+0x2a8>
 8011232:	4620      	mov	r0, r4
 8011234:	4629      	mov	r1, r5
 8011236:	f7ef fc9f 	bl	8000b78 <__aeabi_d2iz>
 801123a:	ab0c      	add	r3, sp, #48	@ 0x30
 801123c:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8011240:	e71a      	b.n	8011078 <__kernel_rem_pio2+0x2a8>
 8011242:	ab0c      	add	r3, sp, #48	@ 0x30
 8011244:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8011248:	f7ef f97c 	bl	8000544 <__aeabi_i2d>
 801124c:	4622      	mov	r2, r4
 801124e:	462b      	mov	r3, r5
 8011250:	f7ef f9e2 	bl	8000618 <__aeabi_dmul>
 8011254:	4652      	mov	r2, sl
 8011256:	e967 0102 	strd	r0, r1, [r7, #-8]!
 801125a:	465b      	mov	r3, fp
 801125c:	4620      	mov	r0, r4
 801125e:	4629      	mov	r1, r5
 8011260:	f7ef f9da 	bl	8000618 <__aeabi_dmul>
 8011264:	3e01      	subs	r6, #1
 8011266:	4604      	mov	r4, r0
 8011268:	460d      	mov	r5, r1
 801126a:	e718      	b.n	801109e <__kernel_rem_pio2+0x2ce>
 801126c:	9906      	ldr	r1, [sp, #24]
 801126e:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 8011272:	9106      	str	r1, [sp, #24]
 8011274:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 8011278:	f7ef f9ce 	bl	8000618 <__aeabi_dmul>
 801127c:	4602      	mov	r2, r0
 801127e:	460b      	mov	r3, r1
 8011280:	4650      	mov	r0, sl
 8011282:	4659      	mov	r1, fp
 8011284:	f7ef f812 	bl	80002ac <__adddf3>
 8011288:	3601      	adds	r6, #1
 801128a:	4682      	mov	sl, r0
 801128c:	468b      	mov	fp, r1
 801128e:	9b00      	ldr	r3, [sp, #0]
 8011290:	429e      	cmp	r6, r3
 8011292:	dc01      	bgt.n	8011298 <__kernel_rem_pio2+0x4c8>
 8011294:	42b5      	cmp	r5, r6
 8011296:	dae9      	bge.n	801126c <__kernel_rem_pio2+0x49c>
 8011298:	ab48      	add	r3, sp, #288	@ 0x120
 801129a:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 801129e:	e9c5 ab00 	strd	sl, fp, [r5]
 80112a2:	3c01      	subs	r4, #1
 80112a4:	e6ff      	b.n	80110a6 <__kernel_rem_pio2+0x2d6>
 80112a6:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 80112a8:	2b02      	cmp	r3, #2
 80112aa:	dc0b      	bgt.n	80112c4 <__kernel_rem_pio2+0x4f4>
 80112ac:	2b00      	cmp	r3, #0
 80112ae:	dc39      	bgt.n	8011324 <__kernel_rem_pio2+0x554>
 80112b0:	d05d      	beq.n	801136e <__kernel_rem_pio2+0x59e>
 80112b2:	9b02      	ldr	r3, [sp, #8]
 80112b4:	f003 0007 	and.w	r0, r3, #7
 80112b8:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 80112bc:	ecbd 8b02 	vpop	{d8}
 80112c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80112c4:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 80112c6:	2b03      	cmp	r3, #3
 80112c8:	d1f3      	bne.n	80112b2 <__kernel_rem_pio2+0x4e2>
 80112ca:	9b05      	ldr	r3, [sp, #20]
 80112cc:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80112d0:	eb0d 0403 	add.w	r4, sp, r3
 80112d4:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 80112d8:	4625      	mov	r5, r4
 80112da:	46c2      	mov	sl, r8
 80112dc:	f1ba 0f00 	cmp.w	sl, #0
 80112e0:	f1a5 0508 	sub.w	r5, r5, #8
 80112e4:	dc6b      	bgt.n	80113be <__kernel_rem_pio2+0x5ee>
 80112e6:	4645      	mov	r5, r8
 80112e8:	2d01      	cmp	r5, #1
 80112ea:	f1a4 0408 	sub.w	r4, r4, #8
 80112ee:	f300 8087 	bgt.w	8011400 <__kernel_rem_pio2+0x630>
 80112f2:	9c05      	ldr	r4, [sp, #20]
 80112f4:	ab48      	add	r3, sp, #288	@ 0x120
 80112f6:	441c      	add	r4, r3
 80112f8:	2000      	movs	r0, #0
 80112fa:	2100      	movs	r1, #0
 80112fc:	f1b8 0f01 	cmp.w	r8, #1
 8011300:	f300 809c 	bgt.w	801143c <__kernel_rem_pio2+0x66c>
 8011304:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 8011308:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 801130c:	f1b9 0f00 	cmp.w	r9, #0
 8011310:	f040 80a6 	bne.w	8011460 <__kernel_rem_pio2+0x690>
 8011314:	9b04      	ldr	r3, [sp, #16]
 8011316:	e9c3 7800 	strd	r7, r8, [r3]
 801131a:	e9c3 5602 	strd	r5, r6, [r3, #8]
 801131e:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8011322:	e7c6      	b.n	80112b2 <__kernel_rem_pio2+0x4e2>
 8011324:	9d05      	ldr	r5, [sp, #20]
 8011326:	ab48      	add	r3, sp, #288	@ 0x120
 8011328:	441d      	add	r5, r3
 801132a:	4644      	mov	r4, r8
 801132c:	2000      	movs	r0, #0
 801132e:	2100      	movs	r1, #0
 8011330:	2c00      	cmp	r4, #0
 8011332:	da35      	bge.n	80113a0 <__kernel_rem_pio2+0x5d0>
 8011334:	f1b9 0f00 	cmp.w	r9, #0
 8011338:	d038      	beq.n	80113ac <__kernel_rem_pio2+0x5dc>
 801133a:	4602      	mov	r2, r0
 801133c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8011340:	9c04      	ldr	r4, [sp, #16]
 8011342:	e9c4 2300 	strd	r2, r3, [r4]
 8011346:	4602      	mov	r2, r0
 8011348:	460b      	mov	r3, r1
 801134a:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 801134e:	f7ee ffab 	bl	80002a8 <__aeabi_dsub>
 8011352:	ad4a      	add	r5, sp, #296	@ 0x128
 8011354:	2401      	movs	r4, #1
 8011356:	45a0      	cmp	r8, r4
 8011358:	da2b      	bge.n	80113b2 <__kernel_rem_pio2+0x5e2>
 801135a:	f1b9 0f00 	cmp.w	r9, #0
 801135e:	d002      	beq.n	8011366 <__kernel_rem_pio2+0x596>
 8011360:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8011364:	4619      	mov	r1, r3
 8011366:	9b04      	ldr	r3, [sp, #16]
 8011368:	e9c3 0102 	strd	r0, r1, [r3, #8]
 801136c:	e7a1      	b.n	80112b2 <__kernel_rem_pio2+0x4e2>
 801136e:	9c05      	ldr	r4, [sp, #20]
 8011370:	ab48      	add	r3, sp, #288	@ 0x120
 8011372:	441c      	add	r4, r3
 8011374:	2000      	movs	r0, #0
 8011376:	2100      	movs	r1, #0
 8011378:	f1b8 0f00 	cmp.w	r8, #0
 801137c:	da09      	bge.n	8011392 <__kernel_rem_pio2+0x5c2>
 801137e:	f1b9 0f00 	cmp.w	r9, #0
 8011382:	d002      	beq.n	801138a <__kernel_rem_pio2+0x5ba>
 8011384:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8011388:	4619      	mov	r1, r3
 801138a:	9b04      	ldr	r3, [sp, #16]
 801138c:	e9c3 0100 	strd	r0, r1, [r3]
 8011390:	e78f      	b.n	80112b2 <__kernel_rem_pio2+0x4e2>
 8011392:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8011396:	f7ee ff89 	bl	80002ac <__adddf3>
 801139a:	f108 38ff 	add.w	r8, r8, #4294967295
 801139e:	e7eb      	b.n	8011378 <__kernel_rem_pio2+0x5a8>
 80113a0:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 80113a4:	f7ee ff82 	bl	80002ac <__adddf3>
 80113a8:	3c01      	subs	r4, #1
 80113aa:	e7c1      	b.n	8011330 <__kernel_rem_pio2+0x560>
 80113ac:	4602      	mov	r2, r0
 80113ae:	460b      	mov	r3, r1
 80113b0:	e7c6      	b.n	8011340 <__kernel_rem_pio2+0x570>
 80113b2:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 80113b6:	f7ee ff79 	bl	80002ac <__adddf3>
 80113ba:	3401      	adds	r4, #1
 80113bc:	e7cb      	b.n	8011356 <__kernel_rem_pio2+0x586>
 80113be:	ed95 7b00 	vldr	d7, [r5]
 80113c2:	ed8d 7b00 	vstr	d7, [sp]
 80113c6:	ed95 7b02 	vldr	d7, [r5, #8]
 80113ca:	e9dd 0100 	ldrd	r0, r1, [sp]
 80113ce:	ec53 2b17 	vmov	r2, r3, d7
 80113d2:	ed8d 7b06 	vstr	d7, [sp, #24]
 80113d6:	f7ee ff69 	bl	80002ac <__adddf3>
 80113da:	4602      	mov	r2, r0
 80113dc:	460b      	mov	r3, r1
 80113de:	4606      	mov	r6, r0
 80113e0:	460f      	mov	r7, r1
 80113e2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80113e6:	f7ee ff5f 	bl	80002a8 <__aeabi_dsub>
 80113ea:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80113ee:	f7ee ff5d 	bl	80002ac <__adddf3>
 80113f2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80113f6:	e9c5 0102 	strd	r0, r1, [r5, #8]
 80113fa:	e9c5 6700 	strd	r6, r7, [r5]
 80113fe:	e76d      	b.n	80112dc <__kernel_rem_pio2+0x50c>
 8011400:	ed94 7b00 	vldr	d7, [r4]
 8011404:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 8011408:	ec51 0b17 	vmov	r0, r1, d7
 801140c:	4652      	mov	r2, sl
 801140e:	465b      	mov	r3, fp
 8011410:	ed8d 7b00 	vstr	d7, [sp]
 8011414:	f7ee ff4a 	bl	80002ac <__adddf3>
 8011418:	4602      	mov	r2, r0
 801141a:	460b      	mov	r3, r1
 801141c:	4606      	mov	r6, r0
 801141e:	460f      	mov	r7, r1
 8011420:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011424:	f7ee ff40 	bl	80002a8 <__aeabi_dsub>
 8011428:	4652      	mov	r2, sl
 801142a:	465b      	mov	r3, fp
 801142c:	f7ee ff3e 	bl	80002ac <__adddf3>
 8011430:	3d01      	subs	r5, #1
 8011432:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8011436:	e9c4 6700 	strd	r6, r7, [r4]
 801143a:	e755      	b.n	80112e8 <__kernel_rem_pio2+0x518>
 801143c:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8011440:	f7ee ff34 	bl	80002ac <__adddf3>
 8011444:	f108 38ff 	add.w	r8, r8, #4294967295
 8011448:	e758      	b.n	80112fc <__kernel_rem_pio2+0x52c>
 801144a:	bf00      	nop
 801144c:	f3af 8000 	nop.w
	...
 8011458:	41700000 	.word	0x41700000
 801145c:	3e700000 	.word	0x3e700000
 8011460:	9b04      	ldr	r3, [sp, #16]
 8011462:	9a04      	ldr	r2, [sp, #16]
 8011464:	601f      	str	r7, [r3, #0]
 8011466:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 801146a:	605c      	str	r4, [r3, #4]
 801146c:	609d      	str	r5, [r3, #8]
 801146e:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8011472:	60d3      	str	r3, [r2, #12]
 8011474:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8011478:	6110      	str	r0, [r2, #16]
 801147a:	6153      	str	r3, [r2, #20]
 801147c:	e719      	b.n	80112b2 <__kernel_rem_pio2+0x4e2>
 801147e:	bf00      	nop

08011480 <scalbn>:
 8011480:	b570      	push	{r4, r5, r6, lr}
 8011482:	ec55 4b10 	vmov	r4, r5, d0
 8011486:	f3c5 510a 	ubfx	r1, r5, #20, #11
 801148a:	4606      	mov	r6, r0
 801148c:	462b      	mov	r3, r5
 801148e:	b991      	cbnz	r1, 80114b6 <scalbn+0x36>
 8011490:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8011494:	4323      	orrs	r3, r4
 8011496:	d03d      	beq.n	8011514 <scalbn+0x94>
 8011498:	4b35      	ldr	r3, [pc, #212]	@ (8011570 <scalbn+0xf0>)
 801149a:	4620      	mov	r0, r4
 801149c:	4629      	mov	r1, r5
 801149e:	2200      	movs	r2, #0
 80114a0:	f7ef f8ba 	bl	8000618 <__aeabi_dmul>
 80114a4:	4b33      	ldr	r3, [pc, #204]	@ (8011574 <scalbn+0xf4>)
 80114a6:	429e      	cmp	r6, r3
 80114a8:	4604      	mov	r4, r0
 80114aa:	460d      	mov	r5, r1
 80114ac:	da0f      	bge.n	80114ce <scalbn+0x4e>
 80114ae:	a328      	add	r3, pc, #160	@ (adr r3, 8011550 <scalbn+0xd0>)
 80114b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80114b4:	e01e      	b.n	80114f4 <scalbn+0x74>
 80114b6:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 80114ba:	4291      	cmp	r1, r2
 80114bc:	d10b      	bne.n	80114d6 <scalbn+0x56>
 80114be:	4622      	mov	r2, r4
 80114c0:	4620      	mov	r0, r4
 80114c2:	4629      	mov	r1, r5
 80114c4:	f7ee fef2 	bl	80002ac <__adddf3>
 80114c8:	4604      	mov	r4, r0
 80114ca:	460d      	mov	r5, r1
 80114cc:	e022      	b.n	8011514 <scalbn+0x94>
 80114ce:	460b      	mov	r3, r1
 80114d0:	f3c1 510a 	ubfx	r1, r1, #20, #11
 80114d4:	3936      	subs	r1, #54	@ 0x36
 80114d6:	f24c 3250 	movw	r2, #50000	@ 0xc350
 80114da:	4296      	cmp	r6, r2
 80114dc:	dd0d      	ble.n	80114fa <scalbn+0x7a>
 80114de:	2d00      	cmp	r5, #0
 80114e0:	a11d      	add	r1, pc, #116	@ (adr r1, 8011558 <scalbn+0xd8>)
 80114e2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80114e6:	da02      	bge.n	80114ee <scalbn+0x6e>
 80114e8:	a11d      	add	r1, pc, #116	@ (adr r1, 8011560 <scalbn+0xe0>)
 80114ea:	e9d1 0100 	ldrd	r0, r1, [r1]
 80114ee:	a31a      	add	r3, pc, #104	@ (adr r3, 8011558 <scalbn+0xd8>)
 80114f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80114f4:	f7ef f890 	bl	8000618 <__aeabi_dmul>
 80114f8:	e7e6      	b.n	80114c8 <scalbn+0x48>
 80114fa:	1872      	adds	r2, r6, r1
 80114fc:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8011500:	428a      	cmp	r2, r1
 8011502:	dcec      	bgt.n	80114de <scalbn+0x5e>
 8011504:	2a00      	cmp	r2, #0
 8011506:	dd08      	ble.n	801151a <scalbn+0x9a>
 8011508:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 801150c:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8011510:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8011514:	ec45 4b10 	vmov	d0, r4, r5
 8011518:	bd70      	pop	{r4, r5, r6, pc}
 801151a:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 801151e:	da08      	bge.n	8011532 <scalbn+0xb2>
 8011520:	2d00      	cmp	r5, #0
 8011522:	a10b      	add	r1, pc, #44	@ (adr r1, 8011550 <scalbn+0xd0>)
 8011524:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011528:	dac1      	bge.n	80114ae <scalbn+0x2e>
 801152a:	a10f      	add	r1, pc, #60	@ (adr r1, 8011568 <scalbn+0xe8>)
 801152c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011530:	e7bd      	b.n	80114ae <scalbn+0x2e>
 8011532:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8011536:	3236      	adds	r2, #54	@ 0x36
 8011538:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 801153c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8011540:	4620      	mov	r0, r4
 8011542:	4b0d      	ldr	r3, [pc, #52]	@ (8011578 <scalbn+0xf8>)
 8011544:	4629      	mov	r1, r5
 8011546:	2200      	movs	r2, #0
 8011548:	e7d4      	b.n	80114f4 <scalbn+0x74>
 801154a:	bf00      	nop
 801154c:	f3af 8000 	nop.w
 8011550:	c2f8f359 	.word	0xc2f8f359
 8011554:	01a56e1f 	.word	0x01a56e1f
 8011558:	8800759c 	.word	0x8800759c
 801155c:	7e37e43c 	.word	0x7e37e43c
 8011560:	8800759c 	.word	0x8800759c
 8011564:	fe37e43c 	.word	0xfe37e43c
 8011568:	c2f8f359 	.word	0xc2f8f359
 801156c:	81a56e1f 	.word	0x81a56e1f
 8011570:	43500000 	.word	0x43500000
 8011574:	ffff3cb0 	.word	0xffff3cb0
 8011578:	3c900000 	.word	0x3c900000

0801157c <_init>:
 801157c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801157e:	bf00      	nop
 8011580:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011582:	bc08      	pop	{r3}
 8011584:	469e      	mov	lr, r3
 8011586:	4770      	bx	lr

08011588 <_fini>:
 8011588:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801158a:	bf00      	nop
 801158c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801158e:	bc08      	pop	{r3}
 8011590:	469e      	mov	lr, r3
 8011592:	4770      	bx	lr
