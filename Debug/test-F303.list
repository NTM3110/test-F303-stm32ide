
test-F303.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a150  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007b0  0800a2e0  0800a2e0  0000b2e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800aa90  0800aa90  0000c1d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800aa90  0800aa90  0000ba90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800aa98  0800aa98  0000c1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800aa98  0800aa98  0000ba98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800aa9c  0800aa9c  0000ba9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  0800aaa0  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000c1d8  2**0
                  CONTENTS
 10 .bss          000089a4  200001d8  200001d8  0000c1d8  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20008b7c  20008b7c  0000c1d8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000c1d8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002f42a  00000000  00000000  0000c208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00006071  00000000  00000000  0003b632  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loclists 0001142c  00000000  00000000  000416a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001c20  00000000  00000000  00052ad0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001d0c  00000000  00000000  000546f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00005f34  00000000  00000000  000563fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0002e239  00000000  00000000  0005c330  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d6eef  00000000  00000000  0008a569  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  00161458  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00006260  00000000  00000000  0016149c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000051  00000000  00000000  001676fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d8 	.word	0x200001d8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a2c8 	.word	0x0800a2c8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001dc 	.word	0x200001dc
 80001cc:	0800a2c8 	.word	0x0800a2c8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_d2lz>:
 8000c88:	b538      	push	{r3, r4, r5, lr}
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	4604      	mov	r4, r0
 8000c90:	460d      	mov	r5, r1
 8000c92:	f7ff ff23 	bl	8000adc <__aeabi_dcmplt>
 8000c96:	b928      	cbnz	r0, 8000ca4 <__aeabi_d2lz+0x1c>
 8000c98:	4620      	mov	r0, r4
 8000c9a:	4629      	mov	r1, r5
 8000c9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ca0:	f000 b80a 	b.w	8000cb8 <__aeabi_d2ulz>
 8000ca4:	4620      	mov	r0, r4
 8000ca6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000caa:	f000 f805 	bl	8000cb8 <__aeabi_d2ulz>
 8000cae:	4240      	negs	r0, r0
 8000cb0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cb4:	bd38      	pop	{r3, r4, r5, pc}
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_d2ulz>:
 8000cb8:	b5d0      	push	{r4, r6, r7, lr}
 8000cba:	4b0c      	ldr	r3, [pc, #48]	@ (8000cec <__aeabi_d2ulz+0x34>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	4606      	mov	r6, r0
 8000cc0:	460f      	mov	r7, r1
 8000cc2:	f7ff fc99 	bl	80005f8 <__aeabi_dmul>
 8000cc6:	f7ff ff6f 	bl	8000ba8 <__aeabi_d2uiz>
 8000cca:	4604      	mov	r4, r0
 8000ccc:	f7ff fc1a 	bl	8000504 <__aeabi_ui2d>
 8000cd0:	4b07      	ldr	r3, [pc, #28]	@ (8000cf0 <__aeabi_d2ulz+0x38>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	f7ff fc90 	bl	80005f8 <__aeabi_dmul>
 8000cd8:	4602      	mov	r2, r0
 8000cda:	460b      	mov	r3, r1
 8000cdc:	4630      	mov	r0, r6
 8000cde:	4639      	mov	r1, r7
 8000ce0:	f7ff fad2 	bl	8000288 <__aeabi_dsub>
 8000ce4:	f7ff ff60 	bl	8000ba8 <__aeabi_d2uiz>
 8000ce8:	4621      	mov	r1, r4
 8000cea:	bdd0      	pop	{r4, r6, r7, pc}
 8000cec:	3df00000 	.word	0x3df00000
 8000cf0:	41f00000 	.word	0x41f00000

08000cf4 <send_AT_command>:
    memcpy(message_array, location_info, *array_length);  // Copy struct data into message array

    return message_array;
}

void send_AT_command(const char *command) {
 8000cf4:	b510      	push	{r4, lr}
 8000cf6:	4604      	mov	r4, r0
    HAL_UART_Transmit(&huart3, (uint8_t *)command, strlen(command), HAL_MAX_DELAY);
 8000cf8:	f7ff faba 	bl	8000270 <strlen>
 8000cfc:	4621      	mov	r1, r4
 8000cfe:	b282      	uxth	r2, r0
}
 8000d00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_UART_Transmit(&huart3, (uint8_t *)command, strlen(command), HAL_MAX_DELAY);
 8000d04:	4802      	ldr	r0, [pc, #8]	@ (8000d10 <send_AT_command+0x1c>)
 8000d06:	f04f 33ff 	mov.w	r3, #4294967295
 8000d0a:	f003 b89f 	b.w	8003e4c <HAL_UART_Transmit>
 8000d0e:	bf00      	nop
 8000d10:	20000660 	.word	0x20000660

08000d14 <find_length>:
	RingBufferDmaU8_initUSARTRx(&SIMRxDMARing, &huart3, response, SIM_RESPONSE_MAX_SIZE);
}

int find_length(uint8_t *str){
	int i = 0;
	while(str[i] != 0x00){
 8000d14:	f7ff baac 	b.w	8000270 <strlen>

08000d18 <receive_response>:
	}
	return i;
		
}

void receive_response(char *cmd_str) {
 8000d18:	b530      	push	{r4, r5, lr}
	uint8_t output_buffer[128];
	snprintf((char *)output_buffer, 128, "Response at command: %s\n", cmd_str);
	uart_transmit_string(&huart1, output_buffer);
 8000d1a:	4c0e      	ldr	r4, [pc, #56]	@ (8000d54 <receive_response+0x3c>)
	snprintf((char *)output_buffer, 128, "Response at command: %s\n", cmd_str);
 8000d1c:	4a0e      	ldr	r2, [pc, #56]	@ (8000d58 <receive_response+0x40>)
	//while(response[1] == '\0'){}

	HAL_UART_Transmit(&huart1, response, find_length(response), 1000);
 8000d1e:	4d0f      	ldr	r5, [pc, #60]	@ (8000d5c <receive_response+0x44>)
void receive_response(char *cmd_str) {
 8000d20:	b0a1      	sub	sp, #132	@ 0x84
 8000d22:	4603      	mov	r3, r0
	snprintf((char *)output_buffer, 128, "Response at command: %s\n", cmd_str);
 8000d24:	2180      	movs	r1, #128	@ 0x80
 8000d26:	4668      	mov	r0, sp
 8000d28:	f006 fd4e 	bl	80077c8 <sniprintf>
	uart_transmit_string(&huart1, output_buffer);
 8000d2c:	4669      	mov	r1, sp
 8000d2e:	4620      	mov	r0, r4
 8000d30:	f000 fdf0 	bl	8001914 <uart_transmit_string>
	HAL_UART_Transmit(&huart1, response, find_length(response), 1000);
 8000d34:	4628      	mov	r0, r5
 8000d36:	f7ff ffed 	bl	8000d14 <find_length>
 8000d3a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d3e:	b282      	uxth	r2, r0
 8000d40:	4629      	mov	r1, r5
 8000d42:	4620      	mov	r0, r4
 8000d44:	f003 f882 	bl	8003e4c <HAL_UART_Transmit>
	uart_transmit_string(&huart1, (uint8_t*)"\n");
 8000d48:	4905      	ldr	r1, [pc, #20]	@ (8000d60 <receive_response+0x48>)
 8000d4a:	4620      	mov	r0, r4
 8000d4c:	f000 fde2 	bl	8001914 <uart_transmit_string>
//	osDelay(1000);
}
 8000d50:	b021      	add	sp, #132	@ 0x84
 8000d52:	bd30      	pop	{r4, r5, pc}
 8000d54:	20000770 	.word	0x20000770
 8000d58:	0800a2e0 	.word	0x0800a2e0
 8000d5c:	20000204 	.word	0x20000204
 8000d60:	0800a5ad 	.word	0x0800a5ad

08000d64 <init_SIM_module>:

void init_SIM_module() {
 8000d64:	b510      	push	{r4, lr}
    
    // Check if module responds
	SIM_ENABLE();
 8000d66:	4c0b      	ldr	r4, [pc, #44]	@ (8000d94 <init_SIM_module+0x30>)
 8000d68:	2201      	movs	r2, #1
 8000d6a:	4611      	mov	r1, r2
 8000d6c:	4620      	mov	r0, r4
 8000d6e:	f001 fdc1 	bl	80028f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 8000d72:	2200      	movs	r2, #0
 8000d74:	2102      	movs	r1, #2
 8000d76:	4620      	mov	r0, r4
 8000d78:	f001 fdbc 	bl	80028f4 <HAL_GPIO_WritePin>
	osDelay(2000);
 8000d7c:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000d80:	f003 fa40 	bl	8004204 <osDelay>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 8000d84:	4620      	mov	r0, r4
 8000d86:	2201      	movs	r2, #1
}
 8000d88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 8000d8c:	2102      	movs	r1, #2
 8000d8e:	f001 bdb1 	b.w	80028f4 <HAL_GPIO_WritePin>
 8000d92:	bf00      	nop
 8000d94:	48000800 	.word	0x48000800

08000d98 <StartGSM>:
	SIM_UART_ReInitializeRxDMA();
	return 0;
}

void StartGSM(void const * argument)
{
 8000d98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  /* USER CODE BEGIN StartGSM */
	Debug_printf("------------------------ Starting GSM: Pushing data to Server ------------------------");
 8000d9c:	481a      	ldr	r0, [pc, #104]	@ (8000e08 <StartGSM+0x70>)
//		}
//		if(is_in_sending == 1){
//			is_in_sending = 0;
//		}
	while(1){
		Debug_printf("\nHello from GSM\n");
 8000d9e:	4c1b      	ldr	r4, [pc, #108]	@ (8000e0c <StartGSM+0x74>)
		uart_transmit_string(&huart1,(uint8_t*) "\n\n");
 8000da0:	4d1b      	ldr	r5, [pc, #108]	@ (8000e10 <StartGSM+0x78>)
 8000da2:	4e1c      	ldr	r6, [pc, #112]	@ (8000e14 <StartGSM+0x7c>)
	Debug_printf("------------------------ Starting GSM: Pushing data to Server ------------------------");
 8000da4:	f000 fdc6 	bl	8001934 <Debug_printf>
	RingBufferDmaU8_initUSARTRx(&SIMRxDMARing, &huart3, response, SIM_RESPONSE_MAX_SIZE);
 8000da8:	4a1b      	ldr	r2, [pc, #108]	@ (8000e18 <StartGSM+0x80>)
 8000daa:	491c      	ldr	r1, [pc, #112]	@ (8000e1c <StartGSM+0x84>)
 8000dac:	481c      	ldr	r0, [pc, #112]	@ (8000e20 <StartGSM+0x88>)
 8000dae:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8000db2:	f000 f84b 	bl	8000e4c <RingBufferDmaU8_initUSARTRx>
	initQueue_GSM(&result_addr_queue);
 8000db6:	481b      	ldr	r0, [pc, #108]	@ (8000e24 <StartGSM+0x8c>)
 8000db8:	f000 f840 	bl	8000e3c <initQueue_GSM>
	init_SIM_module();
 8000dbc:	f7ff ffd2 	bl	8000d64 <init_SIM_module>
		Debug_printf("\nHello from GSM\n");
 8000dc0:	4620      	mov	r0, r4
 8000dc2:	f000 fdb7 	bl	8001934 <Debug_printf>
		uart_transmit_string(&huart1,(uint8_t*) "\n\n");
 8000dc6:	4629      	mov	r1, r5
 8000dc8:	4630      	mov	r0, r6
 8000dca:	f000 fda3 	bl	8001914 <uart_transmit_string>
		receive_response("Check auto log\n");
 8000dce:	4816      	ldr	r0, [pc, #88]	@ (8000e28 <StartGSM+0x90>)
		send_AT_command(FIRST_CHECK);
		while(strstr((char *) response, CHECK_RESPONSE) != NULL){
 8000dd0:	f8df 8060 	ldr.w	r8, [pc, #96]	@ 8000e34 <StartGSM+0x9c>
 8000dd4:	4f10      	ldr	r7, [pc, #64]	@ (8000e18 <StartGSM+0x80>)
			receive_response("First check SIM MODULE\n");
 8000dd6:	f8df 9060 	ldr.w	r9, [pc, #96]	@ 8000e38 <StartGSM+0xa0>
		receive_response("Check auto log\n");
 8000dda:	f7ff ff9d 	bl	8000d18 <receive_response>
		send_AT_command(FIRST_CHECK);
 8000dde:	4813      	ldr	r0, [pc, #76]	@ (8000e2c <StartGSM+0x94>)
 8000de0:	f7ff ff88 	bl	8000cf4 <send_AT_command>
		while(strstr((char *) response, CHECK_RESPONSE) != NULL){
 8000de4:	4641      	mov	r1, r8
 8000de6:	4638      	mov	r0, r7
 8000de8:	f006 fdd8 	bl	800799c <strstr>
 8000dec:	b938      	cbnz	r0, 8000dfe <StartGSM+0x66>
		}
		send_AT_command(CONFIGURE_CS_SERVICE);
 8000dee:	4810      	ldr	r0, [pc, #64]	@ (8000e30 <StartGSM+0x98>)
 8000df0:	f7ff ff80 	bl	8000cf4 <send_AT_command>

		osDelay(1000);
 8000df4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000df8:	f003 fa04 	bl	8004204 <osDelay>
		Debug_printf("\nHello from GSM\n");
 8000dfc:	e7e0      	b.n	8000dc0 <StartGSM+0x28>
			receive_response("First check SIM MODULE\n");
 8000dfe:	4648      	mov	r0, r9
 8000e00:	f7ff ff8a 	bl	8000d18 <receive_response>
 8000e04:	e7ee      	b.n	8000de4 <StartGSM+0x4c>
 8000e06:	bf00      	nop
 8000e08:	0800a544 	.word	0x0800a544
 8000e0c:	0800a59b 	.word	0x0800a59b
 8000e10:	0800a5ac 	.word	0x0800a5ac
 8000e14:	20000770 	.word	0x20000770
 8000e18:	20000204 	.word	0x20000204
 8000e1c:	20000660 	.word	0x20000660
 8000e20:	200001f4 	.word	0x200001f4
 8000e24:	20000384 	.word	0x20000384
 8000e28:	0800a5af 	.word	0x0800a5af
 8000e2c:	0800a325 	.word	0x0800a325
 8000e30:	0800a424 	.word	0x0800a424
 8000e34:	0800a342 	.word	0x0800a342
 8000e38:	0800a32a 	.word	0x0800a32a

08000e3c <initQueue_GSM>:


// Function to initialize the Queue_GSM
void initQueue_GSM(Queue_GSM* q) {
    q->front = 0;
    q->rear = -1;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	f04f 32ff 	mov.w	r2, #4294967295
 8000e42:	e9c0 3280 	strd	r3, r2, [r0, #512]	@ 0x200
    q->size = 0;
 8000e46:	f8c0 3208 	str.w	r3, [r0, #520]	@ 0x208
}
 8000e4a:	4770      	bx	lr

08000e4c <RingBufferDmaU8_initUSARTRx>:
// int daychange = 0;

uint8_t message1[] = "Hello from DSS\n";

void RingBufferDmaU8_initUSARTRx(RingBufferDmaU8_TypeDef* ring, UART_HandleTypeDef* husart, uint8_t* buffer, uint16_t size) // cai dat dma
{
 8000e4c:	b410      	push	{r4}
 8000e4e:	4604      	mov	r4, r0
 8000e50:	4608      	mov	r0, r1
  ring->buffer = buffer;
  ring->size = size;
 8000e52:	80a3      	strh	r3, [r4, #4]
{
 8000e54:	4611      	mov	r1, r2
 8000e56:	461a      	mov	r2, r3
  ring->tailPtr = buffer;
  ring->dmaHandle = husart->hdmarx;
 8000e58:	6f43      	ldr	r3, [r0, #116]	@ 0x74
  ring->buffer = buffer;
 8000e5a:	6021      	str	r1, [r4, #0]
  ring->tailPtr = buffer;
 8000e5c:	60a1      	str	r1, [r4, #8]
  ring->dmaHandle = husart->hdmarx;
 8000e5e:	60e3      	str	r3, [r4, #12]
  HAL_UART_Receive_DMA(husart, buffer, size);
}
 8000e60:	f85d 4b04 	ldr.w	r4, [sp], #4
  HAL_UART_Receive_DMA(husart, buffer, size);
 8000e64:	f003 b918 	b.w	8004098 <HAL_UART_Receive_DMA>

08000e68 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e68:	b500      	push	{lr}
 8000e6a:	b09f      	sub	sp, #124	@ 0x7c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e6c:	2228      	movs	r2, #40	@ 0x28
 8000e6e:	2100      	movs	r1, #0
 8000e70:	a805      	add	r0, sp, #20
 8000e72:	f006 fd79 	bl	8007968 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e76:	2214      	movs	r2, #20
 8000e78:	2100      	movs	r1, #0
 8000e7a:	4668      	mov	r0, sp
 8000e7c:	f006 fd74 	bl	8007968 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e80:	223c      	movs	r2, #60	@ 0x3c
 8000e82:	2100      	movs	r1, #0
 8000e84:	eb0d 0002 	add.w	r0, sp, r2
 8000e88:	f006 fd6e 	bl	8007968 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000e8c:	f001 fd38 	bl	8002900 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000e90:	4a1d      	ldr	r2, [pc, #116]	@ (8000f08 <SystemClock_Config+0xa0>)
 8000e92:	6a13      	ldr	r3, [r2, #32]
 8000e94:	f023 0318 	bic.w	r3, r3, #24
 8000e98:	6213      	str	r3, [r2, #32]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 8000e9a:	2306      	movs	r3, #6
 8000e9c:	9305      	str	r3, [sp, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000e9e:	2301      	movs	r3, #1
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ea0:	e9cd 3308 	strd	r3, r3, [sp, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ea4:	2310      	movs	r3, #16
 8000ea6:	930a      	str	r3, [sp, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ea8:	2002      	movs	r0, #2
 8000eaa:	2300      	movs	r3, #0
 8000eac:	e9cd 030c 	strd	r0, r3, [sp, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 8000eb0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000eb4:	a805      	add	r0, sp, #20
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 8000eb6:	930e      	str	r3, [sp, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000eb8:	f001 fd2a 	bl	8002910 <HAL_RCC_OscConfig>
 8000ebc:	4601      	mov	r1, r0
 8000ebe:	b108      	cbz	r0, 8000ec4 <SystemClock_Config+0x5c>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ec0:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ec2:	e7fe      	b.n	8000ec2 <SystemClock_Config+0x5a>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ec4:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000ec6:	e9cd 3000 	strd	r3, r0, [sp]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000eca:	e9cd 0002 	strd	r0, r0, [sp, #8]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ece:	9004      	str	r0, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000ed0:	4668      	mov	r0, sp
 8000ed2:	f001 ff9d 	bl	8002e10 <HAL_RCC_ClockConfig>
 8000ed6:	b108      	cbz	r0, 8000edc <SystemClock_Config+0x74>
 8000ed8:	b672      	cpsid	i
  while (1)
 8000eda:	e7fe      	b.n	8000eda <SystemClock_Config+0x72>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 8000edc:	4b0b      	ldr	r3, [pc, #44]	@ (8000f0c <SystemClock_Config+0xa4>)
 8000ede:	930f      	str	r3, [sp, #60]	@ 0x3c
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000ee0:	e9cd 0011 	strd	r0, r0, [sp, #68]	@ 0x44
  PeriphClkInit.Adc34ClockSelection = RCC_ADC34PLLCLK_DIV1;
 8000ee4:	f44f 7380 	mov.w	r3, #256	@ 0x100
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000ee8:	9013      	str	r0, [sp, #76]	@ 0x4c
  PeriphClkInit.Adc34ClockSelection = RCC_ADC34PLLCLK_DIV1;
 8000eea:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000eee:	a80f      	add	r0, sp, #60	@ 0x3c
  PeriphClkInit.Adc34ClockSelection = RCC_ADC34PLLCLK_DIV1;
 8000ef0:	e9cd 3218 	strd	r3, r2, [sp, #96]	@ 0x60
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000ef4:	9310      	str	r3, [sp, #64]	@ 0x40
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ef6:	f002 f881 	bl	8002ffc <HAL_RCCEx_PeriphCLKConfig>
 8000efa:	b108      	cbz	r0, 8000f00 <SystemClock_Config+0x98>
 8000efc:	b672      	cpsid	i
  while (1)
 8000efe:	e7fe      	b.n	8000efe <SystemClock_Config+0x96>
}
 8000f00:	b01f      	add	sp, #124	@ 0x7c
 8000f02:	f85d fb04 	ldr.w	pc, [sp], #4
 8000f06:	bf00      	nop
 8000f08:	40021000 	.word	0x40021000
 8000f0c:	00010187 	.word	0x00010187

08000f10 <main>:
{
 8000f10:	b580      	push	{r7, lr}
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f12:	4db8      	ldr	r5, [pc, #736]	@ (80011f4 <main+0x2e4>)
{
 8000f14:	b08e      	sub	sp, #56	@ 0x38
  HAL_Init();
 8000f16:	f000 fdaf 	bl	8001a78 <HAL_Init>
  SystemClock_Config();
 8000f1a:	f7ff ffa5 	bl	8000e68 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f1e:	2214      	movs	r2, #20
 8000f20:	2100      	movs	r1, #0
 8000f22:	a808      	add	r0, sp, #32
 8000f24:	f006 fd20 	bl	8007968 <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f28:	696b      	ldr	r3, [r5, #20]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
 8000f2a:	48b3      	ldr	r0, [pc, #716]	@ (80011f8 <main+0x2e8>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f2c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000f30:	616b      	str	r3, [r5, #20]
 8000f32:	696b      	ldr	r3, [r5, #20]
 8000f34:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000f38:	9302      	str	r3, [sp, #8]
 8000f3a:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f3c:	696b      	ldr	r3, [r5, #20]
 8000f3e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f42:	616b      	str	r3, [r5, #20]
 8000f44:	696b      	ldr	r3, [r5, #20]
 8000f46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f4a:	9303      	str	r3, [sp, #12]
 8000f4c:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f4e:	696b      	ldr	r3, [r5, #20]
 8000f50:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000f54:	616b      	str	r3, [r5, #20]
 8000f56:	696b      	ldr	r3, [r5, #20]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
 8000f58:	2201      	movs	r2, #1
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f5a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
 8000f5e:	4611      	mov	r1, r2
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f60:	9304      	str	r3, [sp, #16]
 8000f62:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
 8000f64:	f001 fcc6 	bl	80028f4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_6
 8000f68:	48a3      	ldr	r0, [pc, #652]	@ (80011f8 <main+0x2e8>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	f240 2156 	movw	r1, #598	@ 0x256
 8000f70:	f001 fcc0 	bl	80028f4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 8000f74:	48a1      	ldr	r0, [pc, #644]	@ (80011fc <main+0x2ec>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	2104      	movs	r1, #4
 8000f7a:	f001 fcbb 	bl	80028f4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8000f7e:	489f      	ldr	r0, [pc, #636]	@ (80011fc <main+0x2ec>)
 8000f80:	2201      	movs	r2, #1
 8000f82:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000f86:	f001 fcb5 	bl	80028f4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
 8000f8a:	2201      	movs	r2, #1
 8000f8c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000f90:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f94:	2400      	movs	r4, #0
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
 8000f96:	f001 fcad 	bl	80028f4 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f9a:	2701      	movs	r7, #1
 8000f9c:	f240 2303 	movw	r3, #515	@ 0x203
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fa0:	4895      	ldr	r0, [pc, #596]	@ (80011f8 <main+0x2e8>)
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000fa2:	970a      	str	r7, [sp, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fa4:	a908      	add	r1, sp, #32
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fa6:	e9cd 3708 	strd	r3, r7, [sp, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000faa:	940b      	str	r4, [sp, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fac:	f001 fbde 	bl	800276c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_6;
 8000fb0:	2354      	movs	r3, #84	@ 0x54
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fb2:	4891      	ldr	r0, [pc, #580]	@ (80011f8 <main+0x2e8>)
 8000fb4:	a908      	add	r1, sp, #32
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fb6:	e9cd 3708 	strd	r3, r7, [sp, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fba:	e9cd 440a 	strd	r4, r4, [sp, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fbe:	f001 fbd5 	bl	800276c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000fc2:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fc4:	488d      	ldr	r0, [pc, #564]	@ (80011fc <main+0x2ec>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc6:	940a      	str	r4, [sp, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fc8:	a908      	add	r1, sp, #32
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fca:	e9cd 3408 	strd	r3, r4, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fce:	f001 fbcd 	bl	800276c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000fd2:	2304      	movs	r3, #4
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fd4:	4889      	ldr	r0, [pc, #548]	@ (80011fc <main+0x2ec>)
 8000fd6:	a908      	add	r1, sp, #32
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fd8:	e9cd 3708 	strd	r3, r7, [sp, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000fdc:	f04f 0803 	mov.w	r8, #3
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fe0:	e9cd 440a 	strd	r4, r4, [sp, #40]	@ 0x28
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000fe4:	f44f 5680 	mov.w	r6, #4096	@ 0x1000
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fe8:	f001 fbc0 	bl	800276c <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fec:	4883      	ldr	r0, [pc, #524]	@ (80011fc <main+0x2ec>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000fee:	f8cd 802c 	str.w	r8, [sp, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ff2:	a908      	add	r1, sp, #32
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ff4:	e9cd 6708 	strd	r6, r7, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ff8:	970a      	str	r7, [sp, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ffa:	f001 fbb7 	bl	800276c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000ffe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001002:	a908      	add	r1, sp, #32
 8001004:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001008:	e9cd 3708 	strd	r3, r7, [sp, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800100c:	e9cd 780a 	strd	r7, r8, [sp, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001010:	f001 fbac 	bl	800276c <HAL_GPIO_Init>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001014:	696b      	ldr	r3, [r5, #20]
 8001016:	433b      	orrs	r3, r7
 8001018:	616b      	str	r3, [r5, #20]
 800101a:	696b      	ldr	r3, [r5, #20]
 800101c:	403b      	ands	r3, r7
 800101e:	9300      	str	r3, [sp, #0]
 8001020:	9b00      	ldr	r3, [sp, #0]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001022:	696b      	ldr	r3, [r5, #20]
 8001024:	f043 0302 	orr.w	r3, r3, #2
 8001028:	616b      	str	r3, [r5, #20]
 800102a:	696b      	ldr	r3, [r5, #20]
  hrtc.Instance = RTC;
 800102c:	4d74      	ldr	r5, [pc, #464]	@ (8001200 <main+0x2f0>)
  __HAL_RCC_DMA2_CLK_ENABLE();
 800102e:	f003 0302 	and.w	r3, r3, #2
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 5, 0);
 8001032:	4622      	mov	r2, r4
 8001034:	2105      	movs	r1, #5
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001036:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 5, 0);
 8001038:	200d      	movs	r0, #13
  __HAL_RCC_DMA2_CLK_ENABLE();
 800103a:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 5, 0);
 800103c:	f001 fa92 	bl	8002564 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001040:	200d      	movs	r0, #13
 8001042:	f001 fac1 	bl	80025c8 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 5, 0);
 8001046:	4622      	mov	r2, r4
 8001048:	2105      	movs	r1, #5
 800104a:	200f      	movs	r0, #15
 800104c:	f001 fa8a 	bl	8002564 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001050:	200f      	movs	r0, #15
 8001052:	f001 fab9 	bl	80025c8 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 5, 0);
 8001056:	4622      	mov	r2, r4
 8001058:	2105      	movs	r1, #5
 800105a:	2010      	movs	r0, #16
 800105c:	f001 fa82 	bl	8002564 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8001060:	2010      	movs	r0, #16
 8001062:	f001 fab1 	bl	80025c8 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Channel1_IRQn, 5, 0);
 8001066:	4622      	mov	r2, r4
 8001068:	2105      	movs	r1, #5
 800106a:	2038      	movs	r0, #56	@ 0x38
 800106c:	f001 fa7a 	bl	8002564 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 8001070:	2038      	movs	r0, #56	@ 0x38
 8001072:	f001 faa9 	bl	80025c8 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Channel5_IRQn, 5, 0);
 8001076:	4622      	mov	r2, r4
 8001078:	2105      	movs	r1, #5
 800107a:	203c      	movs	r0, #60	@ 0x3c
 800107c:	f001 fa72 	bl	8002564 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel5_IRQn);
 8001080:	203c      	movs	r0, #60	@ 0x3c
 8001082:	f001 faa1 	bl	80025c8 <HAL_NVIC_EnableIRQ>
  RTC_TimeTypeDef sTime = {0};
 8001086:	2214      	movs	r2, #20
 8001088:	4621      	mov	r1, r4
 800108a:	a808      	add	r0, sp, #32
 800108c:	f006 fc6c 	bl	8007968 <memset>
  hrtc.Instance = RTC;
 8001090:	4b5c      	ldr	r3, [pc, #368]	@ (8001204 <main+0x2f4>)
  RTC_DateTypeDef sDate = {0};
 8001092:	9405      	str	r4, [sp, #20]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001094:	e9c5 3400 	strd	r3, r4, [r5]
  hrtc.Init.SynchPrediv = 255;
 8001098:	f04f 087f 	mov.w	r8, #127	@ 0x7f
 800109c:	23ff      	movs	r3, #255	@ 0xff
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800109e:	4628      	mov	r0, r5
  hrtc.Init.SynchPrediv = 255;
 80010a0:	e9c5 8302 	strd	r8, r3, [r5, #8]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80010a4:	e9c5 4404 	strd	r4, r4, [r5, #16]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80010a8:	61ac      	str	r4, [r5, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80010aa:	f002 f8f2 	bl	8003292 <HAL_RTC_Init>
 80010ae:	4602      	mov	r2, r0
 80010b0:	b108      	cbz	r0, 80010b6 <main+0x1a6>
 80010b2:	b672      	cpsid	i
  while (1)
 80010b4:	e7fe      	b.n	80010b4 <main+0x1a4>
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80010b6:	e9cd 000b 	strd	r0, r0, [sp, #44]	@ 0x2c
  sTime.Hours = 0;
 80010ba:	f8ad 0020 	strh.w	r0, [sp, #32]
  sTime.Seconds = 0;
 80010be:	f88d 0022 	strb.w	r0, [sp, #34]	@ 0x22
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 80010c2:	a908      	add	r1, sp, #32
 80010c4:	4628      	mov	r0, r5
 80010c6:	f002 f937 	bl	8003338 <HAL_RTC_SetTime>
 80010ca:	4602      	mov	r2, r0
 80010cc:	b108      	cbz	r0, 80010d2 <main+0x1c2>
 80010ce:	b672      	cpsid	i
  while (1)
 80010d0:	e7fe      	b.n	80010d0 <main+0x1c0>
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80010d2:	4b4d      	ldr	r3, [pc, #308]	@ (8001208 <main+0x2f8>)
 80010d4:	9305      	str	r3, [sp, #20]
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 80010d6:	a905      	add	r1, sp, #20
 80010d8:	4628      	mov	r0, r5
 80010da:	f002 f987 	bl	80033ec <HAL_RTC_SetDate>
 80010de:	4603      	mov	r3, r0
 80010e0:	b108      	cbz	r0, 80010e6 <main+0x1d6>
 80010e2:	b672      	cpsid	i
  while (1)
 80010e4:	e7fe      	b.n	80010e4 <main+0x1d4>
  hspi1.Instance = SPI1;
 80010e6:	4849      	ldr	r0, [pc, #292]	@ (800120c <main+0x2fc>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80010e8:	f8df e140 	ldr.w	lr, [pc, #320]	@ 800122c <main+0x31c>
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80010ec:	6083      	str	r3, [r0, #8]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80010ee:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80010f2:	e9c0 e200 	strd	lr, r2, [r0]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80010f6:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80010fa:	e9c0 2303 	strd	r2, r3, [r0, #12]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80010fe:	2510      	movs	r5, #16
 8001100:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001104:	e9c0 2506 	strd	r2, r5, [r0, #24]
  hspi1.Init.CRCPolynomial = 7;
 8001108:	2207      	movs	r2, #7
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800110a:	e9c0 3308 	strd	r3, r3, [r0, #32]
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800110e:	e9c0 230b 	strd	r2, r3, [r0, #44]	@ 0x2c
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001112:	6143      	str	r3, [r0, #20]
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001114:	6283      	str	r3, [r0, #40]	@ 0x28
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001116:	2308      	movs	r3, #8
 8001118:	6343      	str	r3, [r0, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800111a:	f002 f9ae 	bl	800347a <HAL_SPI_Init>
 800111e:	4603      	mov	r3, r0
 8001120:	b108      	cbz	r0, 8001126 <main+0x216>
 8001122:	b672      	cpsid	i
  while (1)
 8001124:	e7fe      	b.n	8001124 <main+0x214>
  huart1.Instance = USART1;
 8001126:	483a      	ldr	r0, [pc, #232]	@ (8001210 <main+0x300>)
  huart1.Init.BaudRate = 115200;
 8001128:	4a3a      	ldr	r2, [pc, #232]	@ (8001214 <main+0x304>)
  huart1.Init.Parity = UART_PARITY_NONE;
 800112a:	6103      	str	r3, [r0, #16]
  huart1.Init.BaudRate = 115200;
 800112c:	f44f 34e1 	mov.w	r4, #115200	@ 0x1c200
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001130:	270c      	movs	r7, #12
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001132:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001136:	e9c0 7305 	strd	r7, r3, [r0, #20]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800113a:	e9c0 3307 	strd	r3, r3, [r0, #28]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800113e:	6243      	str	r3, [r0, #36]	@ 0x24
  huart1.Init.BaudRate = 115200;
 8001140:	e9c0 2400 	strd	r2, r4, [r0]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001144:	f002 ff2c 	bl	8003fa0 <HAL_UART_Init>
 8001148:	4603      	mov	r3, r0
 800114a:	b108      	cbz	r0, 8001150 <main+0x240>
 800114c:	b672      	cpsid	i
  while (1)
 800114e:	e7fe      	b.n	800114e <main+0x23e>
  huart2.Instance = USART2;
 8001150:	4831      	ldr	r0, [pc, #196]	@ (8001218 <main+0x308>)
  huart2.Init.BaudRate = 9600;
 8001152:	f8df c0dc 	ldr.w	ip, [pc, #220]	@ 8001230 <main+0x320>
 8001156:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
  huart2.Init.StopBits = UART_STOPBITS_1;
 800115a:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800115e:	e9c0 3704 	strd	r3, r7, [r0, #16]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001162:	e9c0 3306 	strd	r3, r3, [r0, #24]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001166:	e9c0 3308 	strd	r3, r3, [r0, #32]
  huart2.Init.BaudRate = 9600;
 800116a:	e9c0 c200 	strd	ip, r2, [r0]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800116e:	f002 ff17 	bl	8003fa0 <HAL_UART_Init>
 8001172:	4603      	mov	r3, r0
 8001174:	b108      	cbz	r0, 800117a <main+0x26a>
 8001176:	b672      	cpsid	i
  while (1)
 8001178:	e7fe      	b.n	8001178 <main+0x268>
  huart3.Instance = USART3;
 800117a:	4828      	ldr	r0, [pc, #160]	@ (800121c <main+0x30c>)
 800117c:	4a28      	ldr	r2, [pc, #160]	@ (8001220 <main+0x310>)
  huart3.Init.StopBits = UART_STOPBITS_1;
 800117e:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart3.Init.BaudRate = 115200;
 8001182:	e9c0 2400 	strd	r2, r4, [r0]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001186:	e9c0 3704 	strd	r3, r7, [r0, #16]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800118a:	e9c0 3306 	strd	r3, r3, [r0, #24]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800118e:	e9c0 3308 	strd	r3, r3, [r0, #32]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001192:	f002 ff05 	bl	8003fa0 <HAL_UART_Init>
 8001196:	4604      	mov	r4, r0
 8001198:	b108      	cbz	r0, 800119e <main+0x28e>
 800119a:	b672      	cpsid	i
  while (1)
 800119c:	e7fe      	b.n	800119c <main+0x28c>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800119e:	462a      	mov	r2, r5
 80011a0:	4601      	mov	r1, r0
 80011a2:	a808      	add	r0, sp, #32
 80011a4:	f006 fbe0 	bl	8007968 <memset>
  htim3.Instance = TIM3;
 80011a8:	4d1e      	ldr	r5, [pc, #120]	@ (8001224 <main+0x314>)
  htim3.Init.Prescaler = 8000;
 80011aa:	481f      	ldr	r0, [pc, #124]	@ (8001228 <main+0x318>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011ac:	9407      	str	r4, [sp, #28]
  htim3.Init.Prescaler = 8000;
 80011ae:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 80011b2:	e9c5 0300 	strd	r0, r3, [r5]
  htim3.Init.Period = 65535;
 80011b6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80011ba:	4628      	mov	r0, r5
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011bc:	e9cd 4405 	strd	r4, r4, [sp, #20]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011c0:	e9c5 3403 	strd	r3, r4, [r5, #12]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011c4:	60ac      	str	r4, [r5, #8]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011c6:	61ac      	str	r4, [r5, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80011c8:	f002 fb04 	bl	80037d4 <HAL_TIM_Base_Init>
 80011cc:	b108      	cbz	r0, 80011d2 <main+0x2c2>
 80011ce:	b672      	cpsid	i
  while (1)
 80011d0:	e7fe      	b.n	80011d0 <main+0x2c0>
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80011d2:	a908      	add	r1, sp, #32
 80011d4:	4628      	mov	r0, r5
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011d6:	9608      	str	r6, [sp, #32]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80011d8:	f002 fb36 	bl	8003848 <HAL_TIM_ConfigClockSource>
 80011dc:	b108      	cbz	r0, 80011e2 <main+0x2d2>
 80011de:	b672      	cpsid	i
  while (1)
 80011e0:	e7fe      	b.n	80011e0 <main+0x2d0>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011e2:	9005      	str	r0, [sp, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011e4:	9007      	str	r0, [sp, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80011e6:	a905      	add	r1, sp, #20
 80011e8:	4628      	mov	r0, r5
 80011ea:	f002 fbc7 	bl	800397c <HAL_TIMEx_MasterConfigSynchronization>
 80011ee:	b308      	cbz	r0, 8001234 <main+0x324>
 80011f0:	b672      	cpsid	i
  while (1)
 80011f2:	e7fe      	b.n	80011f2 <main+0x2e2>
 80011f4:	40021000 	.word	0x40021000
 80011f8:	48000800 	.word	0x48000800
 80011fc:	48000400 	.word	0x48000400
 8001200:	2000090c 	.word	0x2000090c
 8001204:	40002800 	.word	0x40002800
 8001208:	00010101 	.word	0x00010101
 800120c:	200008a8 	.word	0x200008a8
 8001210:	20000770 	.word	0x20000770
 8001214:	40013800 	.word	0x40013800
 8001218:	200006e8 	.word	0x200006e8
 800121c:	20000660 	.word	0x20000660
 8001220:	40004800 	.word	0x40004800
 8001224:	200007f8 	.word	0x200007f8
 8001228:	40000400 	.word	0x40000400
 800122c:	40013000 	.word	0x40013000
 8001230:	40004400 	.word	0x40004400
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001234:	4c46      	ldr	r4, [pc, #280]	@ (8001350 <main+0x440>)
  ADC_ChannelConfTypeDef sConfig = {0};
 8001236:	2218      	movs	r2, #24
 8001238:	2100      	movs	r1, #0
 800123a:	a808      	add	r0, sp, #32
 800123c:	f006 fb94 	bl	8007968 <memset>
  hadc2.Instance = ADC2;
 8001240:	4a44      	ldr	r2, [pc, #272]	@ (8001354 <main+0x444>)
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001242:	2300      	movs	r3, #0
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001244:	2601      	movs	r6, #1
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001246:	2704      	movs	r7, #4
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001248:	4620      	mov	r0, r4
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800124a:	e9c4 2300 	strd	r2, r3, [r4]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800124e:	e9c4 3302 	strd	r3, r3, [r4, #8]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001252:	f884 3020 	strb.w	r3, [r4, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001256:	62e3      	str	r3, [r4, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001258:	62a6      	str	r6, [r4, #40]	@ 0x28
  hadc2.Init.NbrOfConversion = 1;
 800125a:	61e6      	str	r6, [r4, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 800125c:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001260:	6123      	str	r3, [r4, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001262:	6167      	str	r7, [r4, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8001264:	8323      	strh	r3, [r4, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001266:	6363      	str	r3, [r4, #52]	@ 0x34
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001268:	f000 fc60 	bl	8001b2c <HAL_ADC_Init>
 800126c:	b108      	cbz	r0, 8001272 <main+0x362>
 800126e:	b672      	cpsid	i
  while (1)
 8001270:	e7fe      	b.n	8001270 <main+0x360>
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001272:	e9cd 000a 	strd	r0, r0, [sp, #40]	@ 0x28
  sConfig.Offset = 0;
 8001276:	e9cd 000c 	strd	r0, r0, [sp, #48]	@ 0x30
  sConfig.Channel = ADC_CHANNEL_2;
 800127a:	2302      	movs	r3, #2
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800127c:	a908      	add	r1, sp, #32
 800127e:	4620      	mov	r0, r4
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001280:	e9cd 3608 	strd	r3, r6, [sp, #32]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001284:	f000 ff54 	bl	8002130 <HAL_ADC_ConfigChannel>
 8001288:	4605      	mov	r5, r0
 800128a:	b108      	cbz	r0, 8001290 <main+0x380>
 800128c:	b672      	cpsid	i
  while (1)
 800128e:	e7fe      	b.n	800128e <main+0x37e>
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001290:	4c31      	ldr	r4, [pc, #196]	@ (8001358 <main+0x448>)
  ADC_MultiModeTypeDef multimode = {0};
 8001292:	9007      	str	r0, [sp, #28]
 8001294:	e9cd 0005 	strd	r0, r0, [sp, #20]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001298:	4601      	mov	r1, r0
 800129a:	2218      	movs	r2, #24
 800129c:	a808      	add	r0, sp, #32
 800129e:	f006 fb63 	bl	8007968 <memset>
  hadc3.Instance = ADC3;
 80012a2:	4b2e      	ldr	r3, [pc, #184]	@ (800135c <main+0x44c>)
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80012a4:	f884 5020 	strb.w	r5, [r4, #32]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80012a8:	4620      	mov	r0, r4
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80012aa:	e9c4 650a 	strd	r6, r5, [r4, #40]	@ 0x28
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80012ae:	e9c4 3500 	strd	r3, r5, [r4]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80012b2:	e9c4 5502 	strd	r5, r5, [r4, #8]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80012b6:	e9c4 5704 	strd	r5, r7, [r4, #16]
  hadc3.Init.NbrOfConversion = 1;
 80012ba:	61e6      	str	r6, [r4, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 80012bc:	f884 5030 	strb.w	r5, [r4, #48]	@ 0x30
  hadc3.Init.LowPowerAutoWait = DISABLE;
 80012c0:	8325      	strh	r5, [r4, #24]
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80012c2:	6365      	str	r5, [r4, #52]	@ 0x34
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80012c4:	f000 fc32 	bl	8001b2c <HAL_ADC_Init>
 80012c8:	b108      	cbz	r0, 80012ce <main+0x3be>
 80012ca:	b672      	cpsid	i
  while (1)
 80012cc:	e7fe      	b.n	80012cc <main+0x3bc>
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80012ce:	9005      	str	r0, [sp, #20]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 80012d0:	a905      	add	r1, sp, #20
 80012d2:	4620      	mov	r0, r4
 80012d4:	f001 f8b0 	bl	8002438 <HAL_ADCEx_MultiModeConfigChannel>
 80012d8:	b108      	cbz	r0, 80012de <main+0x3ce>
 80012da:	b672      	cpsid	i
  while (1)
 80012dc:	e7fe      	b.n	80012dc <main+0x3cc>
  sConfig.Channel = ADC_CHANNEL_12;
 80012de:	230c      	movs	r3, #12
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80012e0:	e9cd 000a 	strd	r0, r0, [sp, #40]	@ 0x28
  sConfig.Offset = 0;
 80012e4:	e9cd 000c 	strd	r0, r0, [sp, #48]	@ 0x30
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80012e8:	a908      	add	r1, sp, #32
 80012ea:	4620      	mov	r0, r4
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80012ec:	e9cd 3608 	strd	r3, r6, [sp, #32]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80012f0:	f000 ff1e 	bl	8002130 <HAL_ADC_ConfigChannel>
 80012f4:	4603      	mov	r3, r0
 80012f6:	b108      	cbz	r0, 80012fc <main+0x3ec>
 80012f8:	b672      	cpsid	i
  while (1)
 80012fa:	e7fe      	b.n	80012fa <main+0x3ea>
  hspi2.Instance = SPI2;
 80012fc:	4818      	ldr	r0, [pc, #96]	@ (8001360 <main+0x450>)
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80012fe:	4919      	ldr	r1, [pc, #100]	@ (8001364 <main+0x454>)
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001300:	6083      	str	r3, [r0, #8]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001302:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001306:	e9c0 1200 	strd	r1, r2, [r0]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 800130a:	f44f 7240 	mov.w	r2, #768	@ 0x300
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800130e:	e9c0 2303 	strd	r2, r3, [r0, #12]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001312:	f44f 7200 	mov.w	r2, #512	@ 0x200
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001316:	e9c0 2306 	strd	r2, r3, [r0, #24]
  hspi2.Init.CRCPolynomial = 7;
 800131a:	2207      	movs	r2, #7
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800131c:	e9c0 3308 	strd	r3, r3, [r0, #32]
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001320:	e9c0 230b 	strd	r2, r3, [r0, #44]	@ 0x2c
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001324:	6143      	str	r3, [r0, #20]
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001326:	6283      	str	r3, [r0, #40]	@ 0x28
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001328:	2308      	movs	r3, #8
 800132a:	6343      	str	r3, [r0, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800132c:	f002 f8a5 	bl	800347a <HAL_SPI_Init>
 8001330:	4604      	mov	r4, r0
 8001332:	b108      	cbz	r0, 8001338 <main+0x428>
 8001334:	b672      	cpsid	i
  while (1)
 8001336:	e7fe      	b.n	8001336 <main+0x426>
  osKernelInitialize();
 8001338:	f002 fecc 	bl	80040d4 <osKernelInitialize>
  GSMHandle = osThreadNew(StartGSM, NULL, &GSM_attributes);
 800133c:	4a0a      	ldr	r2, [pc, #40]	@ (8001368 <main+0x458>)
 800133e:	480b      	ldr	r0, [pc, #44]	@ (800136c <main+0x45c>)
 8001340:	4621      	mov	r1, r4
 8001342:	f002 ff03 	bl	800414c <osThreadNew>
 8001346:	4b0a      	ldr	r3, [pc, #40]	@ (8001370 <main+0x460>)
 8001348:	6018      	str	r0, [r3, #0]
  osKernelStart();
 800134a:	f002 fedf 	bl	800410c <osKernelStart>
  while (1)
 800134e:	e7fe      	b.n	800134e <main+0x43e>
 8001350:	20000a04 	.word	0x20000a04
 8001354:	50000100 	.word	0x50000100
 8001358:	200009b4 	.word	0x200009b4
 800135c:	50000400 	.word	0x50000400
 8001360:	20000844 	.word	0x20000844
 8001364:	40003800 	.word	0x40003800
 8001368:	0800a5f8 	.word	0x0800a5f8
 800136c:	08000d99 	.word	0x08000d99
 8001370:	20000590 	.word	0x20000590

08001374 <HAL_TIM_PeriodElapsedCallback>:
  if (htim->Instance == TIM2) {
 8001374:	6803      	ldr	r3, [r0, #0]
 8001376:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800137a:	d101      	bne.n	8001380 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
 800137c:	f000 bb8e 	b.w	8001a9c <HAL_IncTick>
}
 8001380:	4770      	bx	lr

08001382 <Error_Handler>:
 8001382:	b672      	cpsid	i
  while (1)
 8001384:	e7fe      	b.n	8001384 <Error_Handler+0x2>
	...

08001388 <HAL_MspInit>:

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001388:	4b0d      	ldr	r3, [pc, #52]	@ (80013c0 <HAL_MspInit+0x38>)
 800138a:	699a      	ldr	r2, [r3, #24]
 800138c:	f042 0201 	orr.w	r2, r2, #1
 8001390:	619a      	str	r2, [r3, #24]
 8001392:	699a      	ldr	r2, [r3, #24]
{
 8001394:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001396:	f002 0201 	and.w	r2, r2, #1
 800139a:	9200      	str	r2, [sp, #0]
 800139c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800139e:	69da      	ldr	r2, [r3, #28]
 80013a0:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80013a4:	61da      	str	r2, [r3, #28]
 80013a6:	69db      	ldr	r3, [r3, #28]
 80013a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013ac:	9301      	str	r3, [sp, #4]
 80013ae:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80013b0:	2200      	movs	r2, #0
 80013b2:	210f      	movs	r1, #15
 80013b4:	f06f 0001 	mvn.w	r0, #1

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013b8:	b002      	add	sp, #8
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80013ba:	f001 b8d3 	b.w	8002564 <HAL_NVIC_SetPriority>
 80013be:	bf00      	nop
 80013c0:	40021000 	.word	0x40021000

080013c4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80013c4:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013c6:	2214      	movs	r2, #20
{
 80013c8:	b08a      	sub	sp, #40	@ 0x28
 80013ca:	4605      	mov	r5, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013cc:	2100      	movs	r1, #0
 80013ce:	eb0d 0002 	add.w	r0, sp, r2
 80013d2:	f006 fac9 	bl	8007968 <memset>
  if(hadc->Instance==ADC2)
 80013d6:	682b      	ldr	r3, [r5, #0]
 80013d8:	4a3d      	ldr	r2, [pc, #244]	@ (80014d0 <HAL_ADC_MspInit+0x10c>)
 80013da:	4293      	cmp	r3, r2
 80013dc:	d137      	bne.n	800144e <HAL_ADC_MspInit+0x8a>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80013de:	4b3d      	ldr	r3, [pc, #244]	@ (80014d4 <HAL_ADC_MspInit+0x110>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA2_Channel1;
 80013e0:	4c3d      	ldr	r4, [pc, #244]	@ (80014d8 <HAL_ADC_MspInit+0x114>)
    __HAL_RCC_ADC12_CLK_ENABLE();
 80013e2:	695a      	ldr	r2, [r3, #20]
 80013e4:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80013e8:	615a      	str	r2, [r3, #20]
 80013ea:	695a      	ldr	r2, [r3, #20]
 80013ec:	f002 5280 	and.w	r2, r2, #268435456	@ 0x10000000
 80013f0:	9201      	str	r2, [sp, #4]
 80013f2:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013f4:	695a      	ldr	r2, [r3, #20]
 80013f6:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 80013fa:	615a      	str	r2, [r3, #20]
 80013fc:	695b      	ldr	r3, [r3, #20]
 80013fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001402:	9302      	str	r3, [sp, #8]
 8001404:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001406:	2620      	movs	r6, #32
 8001408:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800140a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800140e:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001410:	e9cd 6305 	strd	r6, r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001414:	f001 f9aa 	bl	800276c <HAL_GPIO_Init>
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001418:	f44f 7280 	mov.w	r2, #256	@ 0x100
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800141c:	f8df c0cc 	ldr.w	ip, [pc, #204]	@ 80014ec <HAL_ADC_MspInit+0x128>
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001420:	f04f 0e80 	mov.w	lr, #128	@ 0x80
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001424:	2300      	movs	r3, #0
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001426:	e9c4 e203 	strd	lr, r2, [r4, #12]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 800142a:	4620      	mov	r0, r4
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800142c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001430:	e9c4 c300 	strd	ip, r3, [r4]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8001434:	e9c4 2605 	strd	r2, r6, [r4, #20]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8001438:	60a3      	str	r3, [r4, #8]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 800143a:	61e3      	str	r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 800143c:	f001 f8f2 	bl	8002624 <HAL_DMA_Init>
 8001440:	b108      	cbz	r0, 8001446 <HAL_ADC_MspInit+0x82>
    {
      Error_Handler();
 8001442:	f7ff ff9e 	bl	8001382 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8001446:	63ac      	str	r4, [r5, #56]	@ 0x38
 8001448:	6265      	str	r5, [r4, #36]	@ 0x24
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 800144a:	b00a      	add	sp, #40	@ 0x28
 800144c:	bd70      	pop	{r4, r5, r6, pc}
  else if(hadc->Instance==ADC3)
 800144e:	4a23      	ldr	r2, [pc, #140]	@ (80014dc <HAL_ADC_MspInit+0x118>)
 8001450:	4293      	cmp	r3, r2
 8001452:	d1fa      	bne.n	800144a <HAL_ADC_MspInit+0x86>
    __HAL_RCC_ADC34_CLK_ENABLE();
 8001454:	4b1f      	ldr	r3, [pc, #124]	@ (80014d4 <HAL_ADC_MspInit+0x110>)
    hdma_adc3.Instance = DMA2_Channel5;
 8001456:	4c22      	ldr	r4, [pc, #136]	@ (80014e0 <HAL_ADC_MspInit+0x11c>)
    __HAL_RCC_ADC34_CLK_ENABLE();
 8001458:	695a      	ldr	r2, [r3, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800145a:	4822      	ldr	r0, [pc, #136]	@ (80014e4 <HAL_ADC_MspInit+0x120>)
    __HAL_RCC_ADC34_CLK_ENABLE();
 800145c:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 8001460:	615a      	str	r2, [r3, #20]
 8001462:	695a      	ldr	r2, [r3, #20]
 8001464:	f002 5200 	and.w	r2, r2, #536870912	@ 0x20000000
 8001468:	9203      	str	r2, [sp, #12]
 800146a:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800146c:	695a      	ldr	r2, [r3, #20]
 800146e:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8001472:	615a      	str	r2, [r3, #20]
 8001474:	695b      	ldr	r3, [r3, #20]
 8001476:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800147a:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800147c:	2201      	movs	r2, #1
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800147e:	9b04      	ldr	r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001480:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001482:	2303      	movs	r3, #3
 8001484:	e9cd 2305 	strd	r2, r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001488:	f001 f970 	bl	800276c <HAL_GPIO_Init>
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800148c:	2080      	movs	r0, #128	@ 0x80
 800148e:	f44f 7280 	mov.w	r2, #256	@ 0x100
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001492:	4915      	ldr	r1, [pc, #84]	@ (80014e8 <HAL_ADC_MspInit+0x124>)
 8001494:	2300      	movs	r3, #0
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001496:	e9c4 0203 	strd	r0, r2, [r4, #12]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 800149a:	f44f 6680 	mov.w	r6, #1024	@ 0x400
 800149e:	2220      	movs	r2, #32
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 80014a0:	4620      	mov	r0, r4
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80014a2:	e9c4 1300 	strd	r1, r3, [r4]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 80014a6:	e9c4 6205 	strd	r6, r2, [r4, #20]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 80014aa:	60a3      	str	r3, [r4, #8]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 80014ac:	61e3      	str	r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 80014ae:	f001 f8b9 	bl	8002624 <HAL_DMA_Init>
 80014b2:	b108      	cbz	r0, 80014b8 <HAL_ADC_MspInit+0xf4>
      Error_Handler();
 80014b4:	f7ff ff65 	bl	8001382 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 80014b8:	63ac      	str	r4, [r5, #56]	@ 0x38
    HAL_NVIC_SetPriority(ADC3_IRQn, 5, 0);
 80014ba:	2200      	movs	r2, #0
 80014bc:	2105      	movs	r1, #5
 80014be:	202f      	movs	r0, #47	@ 0x2f
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 80014c0:	6265      	str	r5, [r4, #36]	@ 0x24
    HAL_NVIC_SetPriority(ADC3_IRQn, 5, 0);
 80014c2:	f001 f84f 	bl	8002564 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC3_IRQn);
 80014c6:	202f      	movs	r0, #47	@ 0x2f
 80014c8:	f001 f87e 	bl	80025c8 <HAL_NVIC_EnableIRQ>
}
 80014cc:	e7bd      	b.n	800144a <HAL_ADC_MspInit+0x86>
 80014ce:	bf00      	nop
 80014d0:	50000100 	.word	0x50000100
 80014d4:	40021000 	.word	0x40021000
 80014d8:	20000970 	.word	0x20000970
 80014dc:	50000400 	.word	0x50000400
 80014e0:	2000092c 	.word	0x2000092c
 80014e4:	48000400 	.word	0x48000400
 80014e8:	40020458 	.word	0x40020458
 80014ec:	40020408 	.word	0x40020408

080014f0 <HAL_RTC_MspInit>:
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
  if(hrtc->Instance==RTC)
 80014f0:	6802      	ldr	r2, [r0, #0]
 80014f2:	4b07      	ldr	r3, [pc, #28]	@ (8001510 <HAL_RTC_MspInit+0x20>)
 80014f4:	429a      	cmp	r2, r3
 80014f6:	d10a      	bne.n	800150e <HAL_RTC_MspInit+0x1e>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014f8:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80014fc:	fa92 f2a2 	rbit	r2, r2
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001500:	4b04      	ldr	r3, [pc, #16]	@ (8001514 <HAL_RTC_MspInit+0x24>)
 8001502:	fab2 f282 	clz	r2, r2
 8001506:	4413      	add	r3, r2
 8001508:	009b      	lsls	r3, r3, #2
 800150a:	2201      	movs	r2, #1
 800150c:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTC_MspInit 1 */

  }

}
 800150e:	4770      	bx	lr
 8001510:	40002800 	.word	0x40002800
 8001514:	10908100 	.word	0x10908100

08001518 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001518:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800151a:	2214      	movs	r2, #20
{
 800151c:	b08a      	sub	sp, #40	@ 0x28
 800151e:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001520:	2100      	movs	r1, #0
 8001522:	eb0d 0002 	add.w	r0, sp, r2
 8001526:	f006 fa1f 	bl	8007968 <memset>
  if(hspi->Instance==SPI1)
 800152a:	6823      	ldr	r3, [r4, #0]
 800152c:	4a1e      	ldr	r2, [pc, #120]	@ (80015a8 <HAL_SPI_MspInit+0x90>)
 800152e:	4293      	cmp	r3, r2
 8001530:	d120      	bne.n	8001574 <HAL_SPI_MspInit+0x5c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001532:	4b1e      	ldr	r3, [pc, #120]	@ (80015ac <HAL_SPI_MspInit+0x94>)
 8001534:	699a      	ldr	r2, [r3, #24]
 8001536:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800153a:	619a      	str	r2, [r3, #24]
 800153c:	699a      	ldr	r2, [r3, #24]
 800153e:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8001542:	9201      	str	r2, [sp, #4]
 8001544:	9a01      	ldr	r2, [sp, #4]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001546:	695a      	ldr	r2, [r3, #20]
 8001548:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800154c:	615a      	str	r2, [r3, #20]
 800154e:	695b      	ldr	r3, [r3, #20]
 8001550:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001554:	9302      	str	r3, [sp, #8]
 8001556:	9b02      	ldr	r3, [sp, #8]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001558:	2338      	movs	r3, #56	@ 0x38
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800155a:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800155c:	2302      	movs	r3, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800155e:	2103      	movs	r1, #3
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001560:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001562:	2305      	movs	r3, #5
 8001564:	e9cd 1308 	strd	r1, r3, [sp, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001568:	4811      	ldr	r0, [pc, #68]	@ (80015b0 <HAL_SPI_MspInit+0x98>)
 800156a:	a905      	add	r1, sp, #20
 800156c:	f001 f8fe 	bl	800276c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001570:	b00a      	add	sp, #40	@ 0x28
 8001572:	bd10      	pop	{r4, pc}
  else if(hspi->Instance==SPI2)
 8001574:	4a0f      	ldr	r2, [pc, #60]	@ (80015b4 <HAL_SPI_MspInit+0x9c>)
 8001576:	4293      	cmp	r3, r2
 8001578:	d1fa      	bne.n	8001570 <HAL_SPI_MspInit+0x58>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800157a:	4b0c      	ldr	r3, [pc, #48]	@ (80015ac <HAL_SPI_MspInit+0x94>)
 800157c:	69da      	ldr	r2, [r3, #28]
 800157e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001582:	61da      	str	r2, [r3, #28]
 8001584:	69da      	ldr	r2, [r3, #28]
 8001586:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 800158a:	9203      	str	r2, [sp, #12]
 800158c:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800158e:	695a      	ldr	r2, [r3, #20]
 8001590:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8001594:	615a      	str	r2, [r3, #20]
 8001596:	695b      	ldr	r3, [r3, #20]
 8001598:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800159c:	9304      	str	r3, [sp, #16]
 800159e:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80015a0:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 80015a4:	e7d9      	b.n	800155a <HAL_SPI_MspInit+0x42>
 80015a6:	bf00      	nop
 80015a8:	40013000 	.word	0x40013000
 80015ac:	40021000 	.word	0x40021000
 80015b0:	48000400 	.word	0x48000400
 80015b4:	40003800 	.word	0x40003800

080015b8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80015b8:	b507      	push	{r0, r1, r2, lr}
  if(htim_base->Instance==TIM3)
 80015ba:	4b0e      	ldr	r3, [pc, #56]	@ (80015f4 <HAL_TIM_Base_MspInit+0x3c>)
 80015bc:	6802      	ldr	r2, [r0, #0]
 80015be:	429a      	cmp	r2, r3
 80015c0:	d115      	bne.n	80015ee <HAL_TIM_Base_MspInit+0x36>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80015c2:	f503 3303 	add.w	r3, r3, #134144	@ 0x20c00
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 80015c6:	2105      	movs	r1, #5
    __HAL_RCC_TIM3_CLK_ENABLE();
 80015c8:	69da      	ldr	r2, [r3, #28]
 80015ca:	f042 0202 	orr.w	r2, r2, #2
 80015ce:	61da      	str	r2, [r3, #28]
 80015d0:	69db      	ldr	r3, [r3, #28]
 80015d2:	f003 0302 	and.w	r3, r3, #2
 80015d6:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 80015d8:	2200      	movs	r2, #0
 80015da:	201d      	movs	r0, #29
    __HAL_RCC_TIM3_CLK_ENABLE();
 80015dc:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 80015de:	f000 ffc1 	bl	8002564 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80015e2:	201d      	movs	r0, #29

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 80015e4:	b003      	add	sp, #12
 80015e6:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80015ea:	f000 bfed 	b.w	80025c8 <HAL_NVIC_EnableIRQ>
}
 80015ee:	b003      	add	sp, #12
 80015f0:	f85d fb04 	ldr.w	pc, [sp], #4
 80015f4:	40000400 	.word	0x40000400

080015f8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80015f8:	b530      	push	{r4, r5, lr}
 80015fa:	4605      	mov	r5, r0
 80015fc:	b08d      	sub	sp, #52	@ 0x34
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015fe:	2214      	movs	r2, #20
 8001600:	2100      	movs	r1, #0
 8001602:	a807      	add	r0, sp, #28
 8001604:	f006 f9b0 	bl	8007968 <memset>
  if(huart->Instance==USART1)
 8001608:	682b      	ldr	r3, [r5, #0]
 800160a:	4a4a      	ldr	r2, [pc, #296]	@ (8001734 <HAL_UART_MspInit+0x13c>)
 800160c:	4293      	cmp	r3, r2
 800160e:	d137      	bne.n	8001680 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001610:	4b49      	ldr	r3, [pc, #292]	@ (8001738 <HAL_UART_MspInit+0x140>)
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8001612:	4c4a      	ldr	r4, [pc, #296]	@ (800173c <HAL_UART_MspInit+0x144>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8001614:	699a      	ldr	r2, [r3, #24]
 8001616:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800161a:	619a      	str	r2, [r3, #24]
 800161c:	699a      	ldr	r2, [r3, #24]
 800161e:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8001622:	9201      	str	r2, [sp, #4]
 8001624:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001626:	695a      	ldr	r2, [r3, #20]
 8001628:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800162c:	615a      	str	r2, [r3, #20]
 800162e:	695b      	ldr	r3, [r3, #20]
 8001630:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001634:	9302      	str	r3, [sp, #8]
 8001636:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001638:	f44f 6ec0 	mov.w	lr, #1536	@ 0x600
 800163c:	2302      	movs	r3, #2
 800163e:	e9cd e307 	strd	lr, r3, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001642:	2203      	movs	r2, #3
 8001644:	2307      	movs	r3, #7
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001646:	a907      	add	r1, sp, #28
 8001648:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800164c:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001650:	f001 f88c 	bl	800276c <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8001654:	4b3a      	ldr	r3, [pc, #232]	@ (8001740 <HAL_UART_MspInit+0x148>)
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8001656:	6023      	str	r3, [r4, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001658:	2300      	movs	r3, #0
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800165a:	2280      	movs	r2, #128	@ 0x80
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800165c:	e9c4 3301 	strd	r3, r3, [r4, #4]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001660:	e9c4 2303 	strd	r2, r3, [r4, #12]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8001664:	2220      	movs	r2, #32
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001666:	6163      	str	r3, [r4, #20]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8001668:	61a2      	str	r2, [r4, #24]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 800166a:	61e3      	str	r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 800166c:	4620      	mov	r0, r4
 800166e:	f000 ffd9 	bl	8002624 <HAL_DMA_Init>
 8001672:	b108      	cbz	r0, 8001678 <HAL_UART_MspInit+0x80>
    {
      Error_Handler();
 8001674:	f7ff fe85 	bl	8001382 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8001678:	676c      	str	r4, [r5, #116]	@ 0x74
 800167a:	6265      	str	r5, [r4, #36]	@ 0x24
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800167c:	b00d      	add	sp, #52	@ 0x34
 800167e:	bd30      	pop	{r4, r5, pc}
  else if(huart->Instance==USART2)
 8001680:	4a30      	ldr	r2, [pc, #192]	@ (8001744 <HAL_UART_MspInit+0x14c>)
 8001682:	4293      	cmp	r3, r2
 8001684:	d123      	bne.n	80016ce <HAL_UART_MspInit+0xd6>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001686:	4b2c      	ldr	r3, [pc, #176]	@ (8001738 <HAL_UART_MspInit+0x140>)
 8001688:	69da      	ldr	r2, [r3, #28]
 800168a:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800168e:	61da      	str	r2, [r3, #28]
 8001690:	69da      	ldr	r2, [r3, #28]
 8001692:	f402 3200 	and.w	r2, r2, #131072	@ 0x20000
 8001696:	9203      	str	r2, [sp, #12]
 8001698:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800169a:	695a      	ldr	r2, [r3, #20]
 800169c:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 80016a0:	615a      	str	r2, [r3, #20]
 80016a2:	695b      	ldr	r3, [r3, #20]
 80016a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016a8:	9304      	str	r3, [sp, #16]
 80016aa:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ac:	240c      	movs	r4, #12
 80016ae:	2302      	movs	r3, #2
 80016b0:	e9cd 4307 	strd	r4, r3, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80016b4:	f04f 0c03 	mov.w	ip, #3
 80016b8:	2307      	movs	r3, #7
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016ba:	a907      	add	r1, sp, #28
 80016bc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80016c0:	e9cd c30a 	strd	ip, r3, [sp, #40]	@ 0x28
    hdma_usart2_rx.Instance = DMA1_Channel6;
 80016c4:	4c20      	ldr	r4, [pc, #128]	@ (8001748 <HAL_UART_MspInit+0x150>)
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016c6:	f001 f851 	bl	800276c <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel6;
 80016ca:	4b20      	ldr	r3, [pc, #128]	@ (800174c <HAL_UART_MspInit+0x154>)
 80016cc:	e7c3      	b.n	8001656 <HAL_UART_MspInit+0x5e>
  else if(huart->Instance==USART3)
 80016ce:	4a20      	ldr	r2, [pc, #128]	@ (8001750 <HAL_UART_MspInit+0x158>)
 80016d0:	4293      	cmp	r3, r2
 80016d2:	d1d3      	bne.n	800167c <HAL_UART_MspInit+0x84>
    __HAL_RCC_USART3_CLK_ENABLE();
 80016d4:	4b18      	ldr	r3, [pc, #96]	@ (8001738 <HAL_UART_MspInit+0x140>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016d6:	481f      	ldr	r0, [pc, #124]	@ (8001754 <HAL_UART_MspInit+0x15c>)
    __HAL_RCC_USART3_CLK_ENABLE();
 80016d8:	69da      	ldr	r2, [r3, #28]
    hdma_usart3_rx.Instance = DMA1_Channel3;
 80016da:	4c1f      	ldr	r4, [pc, #124]	@ (8001758 <HAL_UART_MspInit+0x160>)
    __HAL_RCC_USART3_CLK_ENABLE();
 80016dc:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 80016e0:	61da      	str	r2, [r3, #28]
 80016e2:	69da      	ldr	r2, [r3, #28]
 80016e4:	f402 2280 	and.w	r2, r2, #262144	@ 0x40000
 80016e8:	9205      	str	r2, [sp, #20]
 80016ea:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016ec:	695a      	ldr	r2, [r3, #20]
 80016ee:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 80016f2:	615a      	str	r2, [r3, #20]
 80016f4:	695b      	ldr	r3, [r3, #20]
 80016f6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80016fa:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016fc:	f44f 6240 	mov.w	r2, #3072	@ 0xc00
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001700:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001702:	2302      	movs	r3, #2
 8001704:	e9cd 2307 	strd	r2, r3, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001708:	2103      	movs	r1, #3
 800170a:	2307      	movs	r3, #7
 800170c:	e9cd 130a 	strd	r1, r3, [sp, #40]	@ 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001710:	a907      	add	r1, sp, #28
 8001712:	f001 f82b 	bl	800276c <HAL_GPIO_Init>
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001716:	4811      	ldr	r0, [pc, #68]	@ (800175c <HAL_UART_MspInit+0x164>)
 8001718:	2300      	movs	r3, #0
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800171a:	2280      	movs	r2, #128	@ 0x80
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800171c:	e9c4 0300 	strd	r0, r3, [r4]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001720:	e9c4 2303 	strd	r2, r3, [r4, #12]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001724:	60a3      	str	r3, [r4, #8]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001726:	6163      	str	r3, [r4, #20]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8001728:	2320      	movs	r3, #32
 800172a:	61a3      	str	r3, [r4, #24]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 800172c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001730:	e79b      	b.n	800166a <HAL_UART_MspInit+0x72>
 8001732:	bf00      	nop
 8001734:	40013800 	.word	0x40013800
 8001738:	40021000 	.word	0x40021000
 800173c:	2000061c 	.word	0x2000061c
 8001740:	40020058 	.word	0x40020058
 8001744:	40004400 	.word	0x40004400
 8001748:	200005d8 	.word	0x200005d8
 800174c:	4002006c 	.word	0x4002006c
 8001750:	40004800 	.word	0x40004800
 8001754:	48000400 	.word	0x48000400
 8001758:	20000594 	.word	0x20000594
 800175c:	40020030 	.word	0x40020030

08001760 <HAL_InitTick>:
  uint32_t              uwPrescalerValue = 0U;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8001760:	4b21      	ldr	r3, [pc, #132]	@ (80017e8 <HAL_InitTick+0x88>)
{
 8001762:	b570      	push	{r4, r5, r6, lr}
  __HAL_RCC_TIM2_CLK_ENABLE();
 8001764:	69da      	ldr	r2, [r3, #28]
 8001766:	f042 0201 	orr.w	r2, r2, #1
 800176a:	61da      	str	r2, [r3, #28]
 800176c:	69db      	ldr	r3, [r3, #28]
{
 800176e:	b088      	sub	sp, #32
  __HAL_RCC_TIM2_CLK_ENABLE();
 8001770:	f003 0301 	and.w	r3, r3, #1
 8001774:	9302      	str	r3, [sp, #8]
{
 8001776:	4605      	mov	r5, r0
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001778:	a901      	add	r1, sp, #4
 800177a:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM2_CLK_ENABLE();
 800177c:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800177e:	f001 fc1f 	bl	8002fc0 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001782:	9b06      	ldr	r3, [sp, #24]
 8001784:	bb53      	cbnz	r3, 80017dc <HAL_InitTick+0x7c>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001786:	f001 fbeb 	bl	8002f60 <HAL_RCC_GetPCLK1Freq>

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 800178a:	4e18      	ldr	r6, [pc, #96]	@ (80017ec <HAL_InitTick+0x8c>)
 800178c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001790:	6033      	str	r3, [r6, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8001792:	f240 33e7 	movw	r3, #999	@ 0x3e7
 8001796:	60f3      	str	r3, [r6, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001798:	4b15      	ldr	r3, [pc, #84]	@ (80017f0 <HAL_InitTick+0x90>)
 800179a:	fbb0 f3f3 	udiv	r3, r0, r3
 800179e:	3b01      	subs	r3, #1
  htim2.Init.Prescaler = uwPrescalerValue;
 80017a0:	6073      	str	r3, [r6, #4]
  htim2.Init.ClockDivision = 0;
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;

  status = HAL_TIM_Base_Init(&htim2);
 80017a2:	4630      	mov	r0, r6
  htim2.Init.ClockDivision = 0;
 80017a4:	2300      	movs	r3, #0
 80017a6:	6133      	str	r3, [r6, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017a8:	60b3      	str	r3, [r6, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017aa:	61b3      	str	r3, [r6, #24]
  status = HAL_TIM_Base_Init(&htim2);
 80017ac:	f002 f812 	bl	80037d4 <HAL_TIM_Base_Init>
  if (status == HAL_OK)
 80017b0:	4604      	mov	r4, r0
 80017b2:	b980      	cbnz	r0, 80017d6 <HAL_InitTick+0x76>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 80017b4:	4630      	mov	r0, r6
 80017b6:	f001 fecf 	bl	8003558 <HAL_TIM_Base_Start_IT>
    if (status == HAL_OK)
 80017ba:	4604      	mov	r4, r0
 80017bc:	b958      	cbnz	r0, 80017d6 <HAL_InitTick+0x76>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80017be:	201c      	movs	r0, #28
 80017c0:	f000 ff02 	bl	80025c8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017c4:	2d0f      	cmp	r5, #15
 80017c6:	d80d      	bhi.n	80017e4 <HAL_InitTick+0x84>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 80017c8:	4622      	mov	r2, r4
 80017ca:	4629      	mov	r1, r5
 80017cc:	201c      	movs	r0, #28
 80017ce:	f000 fec9 	bl	8002564 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80017d2:	4b08      	ldr	r3, [pc, #32]	@ (80017f4 <HAL_InitTick+0x94>)
 80017d4:	601d      	str	r5, [r3, #0]
    }
  }

 /* Return function status */
  return status;
}
 80017d6:	4620      	mov	r0, r4
 80017d8:	b008      	add	sp, #32
 80017da:	bd70      	pop	{r4, r5, r6, pc}
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80017dc:	f001 fbc0 	bl	8002f60 <HAL_RCC_GetPCLK1Freq>
 80017e0:	0040      	lsls	r0, r0, #1
 80017e2:	e7d2      	b.n	800178a <HAL_InitTick+0x2a>
        status = HAL_ERROR;
 80017e4:	2401      	movs	r4, #1
 80017e6:	e7f6      	b.n	80017d6 <HAL_InitTick+0x76>
 80017e8:	40021000 	.word	0x40021000
 80017ec:	20000a54 	.word	0x20000a54
 80017f0:	000f4240 	.word	0x000f4240
 80017f4:	20000008 	.word	0x20000008

080017f8 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80017f8:	e7fe      	b.n	80017f8 <NMI_Handler>

080017fa <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017fa:	e7fe      	b.n	80017fa <HardFault_Handler>

080017fc <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017fc:	e7fe      	b.n	80017fc <MemManage_Handler>

080017fe <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017fe:	e7fe      	b.n	80017fe <BusFault_Handler>

08001800 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001800:	e7fe      	b.n	8001800 <UsageFault_Handler>

08001802 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001802:	4770      	bx	lr

08001804 <DMA1_Channel3_IRQHandler>:
void DMA1_Channel3_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8001804:	4801      	ldr	r0, [pc, #4]	@ (800180c <DMA1_Channel3_IRQHandler+0x8>)
 8001806:	f000 bf6a 	b.w	80026de <HAL_DMA_IRQHandler>
 800180a:	bf00      	nop
 800180c:	20000594 	.word	0x20000594

08001810 <DMA1_Channel5_IRQHandler>:
void DMA1_Channel5_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001810:	4801      	ldr	r0, [pc, #4]	@ (8001818 <DMA1_Channel5_IRQHandler+0x8>)
 8001812:	f000 bf64 	b.w	80026de <HAL_DMA_IRQHandler>
 8001816:	bf00      	nop
 8001818:	2000061c 	.word	0x2000061c

0800181c <DMA1_Channel6_IRQHandler>:
void DMA1_Channel6_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800181c:	4801      	ldr	r0, [pc, #4]	@ (8001824 <DMA1_Channel6_IRQHandler+0x8>)
 800181e:	f000 bf5e 	b.w	80026de <HAL_DMA_IRQHandler>
 8001822:	bf00      	nop
 8001824:	200005d8 	.word	0x200005d8

08001828 <TIM2_IRQHandler>:
void TIM2_IRQHandler(void)
{
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001828:	4801      	ldr	r0, [pc, #4]	@ (8001830 <TIM2_IRQHandler+0x8>)
 800182a:	f001 becf 	b.w	80035cc <HAL_TIM_IRQHandler>
 800182e:	bf00      	nop
 8001830:	20000a54 	.word	0x20000a54

08001834 <TIM3_IRQHandler>:
void TIM3_IRQHandler(void)
{
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001834:	4801      	ldr	r0, [pc, #4]	@ (800183c <TIM3_IRQHandler+0x8>)
 8001836:	f001 bec9 	b.w	80035cc <HAL_TIM_IRQHandler>
 800183a:	bf00      	nop
 800183c:	200007f8 	.word	0x200007f8

08001840 <ADC3_IRQHandler>:
void ADC3_IRQHandler(void)
{
  /* USER CODE BEGIN ADC3_IRQn 0 */

  /* USER CODE END ADC3_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc3);
 8001840:	4801      	ldr	r0, [pc, #4]	@ (8001848 <ADC3_IRQHandler+0x8>)
 8001842:	f000 ba93 	b.w	8001d6c <HAL_ADC_IRQHandler>
 8001846:	bf00      	nop
 8001848:	200009b4 	.word	0x200009b4

0800184c <DMA2_Channel1_IRQHandler>:
void DMA2_Channel1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Channel1_IRQn 0 */

  /* USER CODE END DMA2_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 800184c:	4801      	ldr	r0, [pc, #4]	@ (8001854 <DMA2_Channel1_IRQHandler+0x8>)
 800184e:	f000 bf46 	b.w	80026de <HAL_DMA_IRQHandler>
 8001852:	bf00      	nop
 8001854:	20000970 	.word	0x20000970

08001858 <DMA2_Channel5_IRQHandler>:
void DMA2_Channel5_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Channel5_IRQn 0 */

  /* USER CODE END DMA2_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8001858:	4801      	ldr	r0, [pc, #4]	@ (8001860 <DMA2_Channel5_IRQHandler+0x8>)
 800185a:	f000 bf40 	b.w	80026de <HAL_DMA_IRQHandler>
 800185e:	bf00      	nop
 8001860:	2000092c 	.word	0x2000092c

08001864 <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 8001864:	2001      	movs	r0, #1
 8001866:	4770      	bx	lr

08001868 <_kill>:

int _kill(int pid, int sig)
{
 8001868:	b508      	push	{r3, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800186a:	f006 f907 	bl	8007a7c <__errno>
 800186e:	2316      	movs	r3, #22
 8001870:	6003      	str	r3, [r0, #0]
  return -1;
}
 8001872:	f04f 30ff 	mov.w	r0, #4294967295
 8001876:	bd08      	pop	{r3, pc}

08001878 <_exit>:

void _exit (int status)
{
 8001878:	b508      	push	{r3, lr}
  errno = EINVAL;
 800187a:	f006 f8ff 	bl	8007a7c <__errno>
 800187e:	2316      	movs	r3, #22
 8001880:	6003      	str	r3, [r0, #0]
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
 8001882:	e7fe      	b.n	8001882 <_exit+0xa>

08001884 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001884:	b570      	push	{r4, r5, r6, lr}
 8001886:	460d      	mov	r5, r1
 8001888:	4614      	mov	r4, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800188a:	460e      	mov	r6, r1
 800188c:	1b73      	subs	r3, r6, r5
 800188e:	429c      	cmp	r4, r3
 8001890:	dc01      	bgt.n	8001896 <_read+0x12>
  {
    *ptr++ = __io_getchar();
  }

  return len;
}
 8001892:	4620      	mov	r0, r4
 8001894:	bd70      	pop	{r4, r5, r6, pc}
    *ptr++ = __io_getchar();
 8001896:	f3af 8000 	nop.w
 800189a:	f806 0b01 	strb.w	r0, [r6], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800189e:	e7f5      	b.n	800188c <_read+0x8>

080018a0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80018a0:	b570      	push	{r4, r5, r6, lr}
 80018a2:	460d      	mov	r5, r1
 80018a4:	4614      	mov	r4, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018a6:	460e      	mov	r6, r1
 80018a8:	1b73      	subs	r3, r6, r5
 80018aa:	429c      	cmp	r4, r3
 80018ac:	dc01      	bgt.n	80018b2 <_write+0x12>
  {
    __io_putchar(*ptr++);
  }
  return len;
}
 80018ae:	4620      	mov	r0, r4
 80018b0:	bd70      	pop	{r4, r5, r6, pc}
    __io_putchar(*ptr++);
 80018b2:	f816 0b01 	ldrb.w	r0, [r6], #1
 80018b6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018ba:	e7f5      	b.n	80018a8 <_write+0x8>

080018bc <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 80018bc:	f04f 30ff 	mov.w	r0, #4294967295
 80018c0:	4770      	bx	lr

080018c2 <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 80018c2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80018c6:	604b      	str	r3, [r1, #4]
  return 0;
}
 80018c8:	2000      	movs	r0, #0
 80018ca:	4770      	bx	lr

080018cc <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 80018cc:	2001      	movs	r0, #1
 80018ce:	4770      	bx	lr

080018d0 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 80018d0:	2000      	movs	r0, #0
 80018d2:	4770      	bx	lr

080018d4 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018d4:	4a0b      	ldr	r2, [pc, #44]	@ (8001904 <_sbrk+0x30>)
 80018d6:	6811      	ldr	r1, [r2, #0]
{
 80018d8:	b510      	push	{r4, lr}
 80018da:	4603      	mov	r3, r0
  if (NULL == __sbrk_heap_end)
 80018dc:	b909      	cbnz	r1, 80018e2 <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 80018de:	490a      	ldr	r1, [pc, #40]	@ (8001908 <_sbrk+0x34>)
 80018e0:	6011      	str	r1, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018e2:	6810      	ldr	r0, [r2, #0]
 80018e4:	4909      	ldr	r1, [pc, #36]	@ (800190c <_sbrk+0x38>)
 80018e6:	4c0a      	ldr	r4, [pc, #40]	@ (8001910 <_sbrk+0x3c>)
 80018e8:	4403      	add	r3, r0
 80018ea:	1b09      	subs	r1, r1, r4
 80018ec:	428b      	cmp	r3, r1
 80018ee:	d906      	bls.n	80018fe <_sbrk+0x2a>
  {
    errno = ENOMEM;
 80018f0:	f006 f8c4 	bl	8007a7c <__errno>
 80018f4:	230c      	movs	r3, #12
 80018f6:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 80018f8:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 80018fc:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 80018fe:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 8001900:	e7fc      	b.n	80018fc <_sbrk+0x28>
 8001902:	bf00      	nop
 8001904:	20000aa0 	.word	0x20000aa0
 8001908:	20008b80 	.word	0x20008b80
 800190c:	2000a000 	.word	0x2000a000
 8001910:	00000400 	.word	0x00000400

08001914 <uart_transmit_string>:
#include "system_management.h"
#include <stdio.h>
#include <stdarg.h>
#include <string.h>

void uart_transmit_string(UART_HandleTypeDef *huart, uint8_t *string) {
 8001914:	b570      	push	{r4, r5, r6, lr}
 8001916:	4605      	mov	r5, r0
    HAL_UART_Transmit(huart, string, strlen((char *)string), 1000);
 8001918:	4608      	mov	r0, r1
void uart_transmit_string(UART_HandleTypeDef *huart, uint8_t *string) {
 800191a:	460c      	mov	r4, r1
    HAL_UART_Transmit(huart, string, strlen((char *)string), 1000);
 800191c:	f7fe fca8 	bl	8000270 <strlen>
 8001920:	4621      	mov	r1, r4
 8001922:	b282      	uxth	r2, r0
 8001924:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001928:	4628      	mov	r0, r5
}
 800192a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UART_Transmit(huart, string, strlen((char *)string), 1000);
 800192e:	f002 ba8d 	b.w	8003e4c <HAL_UART_Transmit>
	...

08001934 <Debug_printf>:


void Debug_printf(const char *format, ...) {
 8001934:	b40f      	push	{r0, r1, r2, r3}
 8001936:	b500      	push	{lr}
 8001938:	b0c3      	sub	sp, #268	@ 0x10c
 800193a:	ab44      	add	r3, sp, #272	@ 0x110

    // Start processing the variadic arguments
    va_start(args, format);

    // Format the string
    vsnprintf(output_buffer, sizeof(output_buffer), format, args);
 800193c:	f44f 7180 	mov.w	r1, #256	@ 0x100
void Debug_printf(const char *format, ...) {
 8001940:	f853 2b04 	ldr.w	r2, [r3], #4
    va_start(args, format);
 8001944:	9301      	str	r3, [sp, #4]
    vsnprintf(output_buffer, sizeof(output_buffer), format, args);
 8001946:	a802      	add	r0, sp, #8
 8001948:	f006 f800 	bl	800794c <vsniprintf>

    // End processing the arguments
    va_end(args);

    // Transmit the formatted string over UART
    uart_transmit_string(&huart1,(uint8_t*) output_buffer);
 800194c:	4804      	ldr	r0, [pc, #16]	@ (8001960 <Debug_printf+0x2c>)
 800194e:	a902      	add	r1, sp, #8
 8001950:	f7ff ffe0 	bl	8001914 <uart_transmit_string>
}
 8001954:	b043      	add	sp, #268	@ 0x10c
 8001956:	f85d eb04 	ldr.w	lr, [sp], #4
 800195a:	b004      	add	sp, #16
 800195c:	4770      	bx	lr
 800195e:	bf00      	nop
 8001960:	20000770 	.word	0x20000770

08001964 <SystemInit>:
  */
void SystemInit(void)
{
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001964:	4a03      	ldr	r2, [pc, #12]	@ (8001974 <SystemInit+0x10>)
 8001966:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 800196a:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800196e:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001972:	4770      	bx	lr
 8001974:	e000ed00 	.word	0xe000ed00

08001978 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001978:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80019b0 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 800197c:	f7ff fff2 	bl	8001964 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001980:	480c      	ldr	r0, [pc, #48]	@ (80019b4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001982:	490d      	ldr	r1, [pc, #52]	@ (80019b8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001984:	4a0d      	ldr	r2, [pc, #52]	@ (80019bc <LoopForever+0xe>)
  movs r3, #0
 8001986:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001988:	e002      	b.n	8001990 <LoopCopyDataInit>

0800198a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800198a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800198c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800198e:	3304      	adds	r3, #4

08001990 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001990:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001992:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001994:	d3f9      	bcc.n	800198a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001996:	4a0a      	ldr	r2, [pc, #40]	@ (80019c0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001998:	4c0a      	ldr	r4, [pc, #40]	@ (80019c4 <LoopForever+0x16>)
  movs r3, #0
 800199a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800199c:	e001      	b.n	80019a2 <LoopFillZerobss>

0800199e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800199e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019a0:	3204      	adds	r2, #4

080019a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019a4:	d3fb      	bcc.n	800199e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80019a6:	f006 f86f 	bl	8007a88 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80019aa:	f7ff fab1 	bl	8000f10 <main>

080019ae <LoopForever>:

LoopForever:
    b LoopForever
 80019ae:	e7fe      	b.n	80019ae <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80019b0:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 80019b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019b8:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 80019bc:	0800aaa0 	.word	0x0800aaa0
  ldr r2, =_sbss
 80019c0:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 80019c4:	20008b7c 	.word	0x20008b7c

080019c8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80019c8:	e7fe      	b.n	80019c8 <ADC1_2_IRQHandler>

080019ca <__cxa_guard_abort.part.0>:

/**
  * @brief Acquire STM32 lock
  * @param lock The lock to acquire
  */
static inline void stm32_lock_acquire(LockingData_t *lock)
 80019ca:	b508      	push	{r3, lr}
  __ASM volatile ("cpsid i" : : : "memory");
 80019cc:	b672      	cpsid	i
{
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 80019ce:	f7ff fcd8 	bl	8001382 <Error_Handler>
 80019d2:	e7fe      	b.n	80019d2 <__cxa_guard_abort.part.0+0x8>

080019d4 <stm32_lock_acquire>:
{
 80019d4:	b508      	push	{r3, lr}
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 80019d6:	7a03      	ldrb	r3, [r0, #8]
 80019d8:	2b01      	cmp	r3, #1
 80019da:	d903      	bls.n	80019e4 <stm32_lock_acquire+0x10>
 80019dc:	b672      	cpsid	i
 80019de:	f7ff fcd0 	bl	8001382 <Error_Handler>
 80019e2:	e7fe      	b.n	80019e2 <stm32_lock_acquire+0xe>
  lock->basepri[lock->nesting_level++] = taskENTER_CRITICAL_FROM_ISR();
 80019e4:	1c5a      	adds	r2, r3, #1
 80019e6:	7202      	strb	r2, [r0, #8]

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80019e8:	f3ef 8211 	mrs	r2, BASEPRI
 80019ec:	f04f 0150 	mov.w	r1, #80	@ 0x50
 80019f0:	f381 8811 	msr	BASEPRI, r1
 80019f4:	f3bf 8f6f 	isb	sy
 80019f8:	f3bf 8f4f 	dsb	sy
 80019fc:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8001a00:	bd08      	pop	{r3, pc}

08001a02 <stm32_lock_release>:
/**
  * @brief Release STM32 lock
  * @param lock The lock to release
  */
static inline void stm32_lock_release(LockingData_t *lock)
{
 8001a02:	b508      	push	{r3, lr}
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
  lock->nesting_level--;
 8001a04:	7a03      	ldrb	r3, [r0, #8]
 8001a06:	3b01      	subs	r3, #1
 8001a08:	b2db      	uxtb	r3, r3
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 8001a0a:	2b01      	cmp	r3, #1
  lock->nesting_level--;
 8001a0c:	7203      	strb	r3, [r0, #8]
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 8001a0e:	d903      	bls.n	8001a18 <stm32_lock_release+0x16>
 8001a10:	b672      	cpsid	i
 8001a12:	f7ff fcb6 	bl	8001382 <Error_Handler>
 8001a16:	e7fe      	b.n	8001a16 <stm32_lock_release+0x14>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8001a18:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8001a1c:	f383 8811 	msr	BASEPRI, r3
  taskEXIT_CRITICAL_FROM_ISR(lock->basepri[lock->nesting_level]);
}
 8001a20:	bd08      	pop	{r3, pc}

08001a22 <__retarget_lock_init_recursive>:
/**
  * @brief Initialize recursive lock
  * @param lock The lock
  */
void __retarget_lock_init_recursive(_LOCK_T *lock)
{
 8001a22:	b510      	push	{r4, lr}
  if (lock == NULL)
 8001a24:	4604      	mov	r4, r0
 8001a26:	b920      	cbnz	r0, 8001a32 <__retarget_lock_init_recursive+0x10>
  {
    errno = EINVAL;
 8001a28:	f006 f828 	bl	8007a7c <__errno>
 8001a2c:	2316      	movs	r3, #22
 8001a2e:	6003      	str	r3, [r0, #0]
    return;
  }

  /* Unable to allocate memory */
  STM32_LOCK_BLOCK();
}
 8001a30:	bd10      	pop	{r4, pc}
  *lock = (_LOCK_T)malloc(sizeof(struct __lock));
 8001a32:	200c      	movs	r0, #12
 8001a34:	f004 f85e 	bl	8005af4 <malloc>
 8001a38:	6020      	str	r0, [r4, #0]
  if (*lock != NULL)
 8001a3a:	b120      	cbz	r0, 8001a46 <__retarget_lock_init_recursive+0x24>
    lock->basepri[i] = 0;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	e9c0 3300 	strd	r3, r3, [r0]
  lock->nesting_level = 0;
 8001a42:	7203      	strb	r3, [r0, #8]
}
 8001a44:	e7f4      	b.n	8001a30 <__retarget_lock_init_recursive+0xe>
 8001a46:	f7ff ffc0 	bl	80019ca <__cxa_guard_abort.part.0>

08001a4a <__retarget_lock_acquire>:
/**
  * @brief Acquire lock
  * @param lock The lock
  */
void __retarget_lock_acquire(_LOCK_T lock)
{
 8001a4a:	b508      	push	{r3, lr}
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8001a4c:	b908      	cbnz	r0, 8001a52 <__retarget_lock_acquire+0x8>
 8001a4e:	f7ff ffbc 	bl	80019ca <__cxa_guard_abort.part.0>
  stm32_lock_acquire(STM32_LOCK_PARAMETER(lock));
}
 8001a52:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  stm32_lock_acquire(STM32_LOCK_PARAMETER(lock));
 8001a56:	f7ff bfbd 	b.w	80019d4 <stm32_lock_acquire>

08001a5a <__retarget_lock_acquire_recursive>:
#define __lock_close(lock) __retarget_lock_close(lock)
extern void __retarget_lock_close_recursive(_LOCK_T lock);
#define __lock_close_recursive(lock) __retarget_lock_close_recursive(lock)
extern void __retarget_lock_acquire(_LOCK_T lock);
#define __lock_acquire(lock) __retarget_lock_acquire(lock)
extern void __retarget_lock_acquire_recursive(_LOCK_T lock);
 8001a5a:	f7ff bff6 	b.w	8001a4a <__retarget_lock_acquire>

08001a5e <__retarget_lock_release>:
/**
  * @brief Release lock
  * @param lock The lock
  */
void __retarget_lock_release(_LOCK_T lock)
{
 8001a5e:	b508      	push	{r3, lr}
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8001a60:	b918      	cbnz	r0, 8001a6a <__retarget_lock_release+0xc>
 8001a62:	b672      	cpsid	i
 8001a64:	f7ff fc8d 	bl	8001382 <Error_Handler>
 8001a68:	e7fe      	b.n	8001a68 <__retarget_lock_release+0xa>
  stm32_lock_release(STM32_LOCK_PARAMETER(lock));
}
 8001a6a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  stm32_lock_release(STM32_LOCK_PARAMETER(lock));
 8001a6e:	f7ff bfc8 	b.w	8001a02 <stm32_lock_release>

08001a72 <__retarget_lock_release_recursive>:
extern int __retarget_lock_try_acquire_recursive(_LOCK_T lock);
#define __lock_try_acquire_recursive(lock) \
  __retarget_lock_try_acquire_recursive(lock)
extern void __retarget_lock_release(_LOCK_T lock);
#define __lock_release(lock) __retarget_lock_release(lock)
extern void __retarget_lock_release_recursive(_LOCK_T lock);
 8001a72:	f7ff bff4 	b.w	8001a5e <__retarget_lock_release>
	...

08001a78 <HAL_Init>:
  */
HAL_StatusTypeDef HAL_Init(void)
{
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a78:	4a07      	ldr	r2, [pc, #28]	@ (8001a98 <HAL_Init+0x20>)
{
 8001a7a:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a7c:	6813      	ldr	r3, [r2, #0]
 8001a7e:	f043 0310 	orr.w	r3, r3, #16
 8001a82:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a84:	2003      	movs	r0, #3
 8001a86:	f000 fd5b 	bl	8002540 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a8a:	200f      	movs	r0, #15
 8001a8c:	f7ff fe68 	bl	8001760 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a90:	f7ff fc7a 	bl	8001388 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8001a94:	2000      	movs	r0, #0
 8001a96:	bd08      	pop	{r3, pc}
 8001a98:	40022000 	.word	0x40022000

08001a9c <HAL_IncTick>:
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001a9c:	4a03      	ldr	r2, [pc, #12]	@ (8001aac <HAL_IncTick+0x10>)
 8001a9e:	4b04      	ldr	r3, [pc, #16]	@ (8001ab0 <HAL_IncTick+0x14>)
 8001aa0:	6811      	ldr	r1, [r2, #0]
 8001aa2:	781b      	ldrb	r3, [r3, #0]
 8001aa4:	440b      	add	r3, r1
 8001aa6:	6013      	str	r3, [r2, #0]
}
 8001aa8:	4770      	bx	lr
 8001aaa:	bf00      	nop
 8001aac:	20000abc 	.word	0x20000abc
 8001ab0:	20000004 	.word	0x20000004

08001ab4 <HAL_GetTick>:
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;  
 8001ab4:	4b01      	ldr	r3, [pc, #4]	@ (8001abc <HAL_GetTick+0x8>)
 8001ab6:	6818      	ldr	r0, [r3, #0]
}
 8001ab8:	4770      	bx	lr
 8001aba:	bf00      	nop
 8001abc:	20000abc 	.word	0x20000abc

08001ac0 <HAL_ADC_ConvCpltCallback>:
/**
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
 8001ac0:	4770      	bx	lr

08001ac2 <HAL_ADC_LevelOutOfWindowCallback>:
/**
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
 8001ac2:	4770      	bx	lr

08001ac4 <HAL_ADC_ErrorCallback>:
  * @brief  ADC error callback in non blocking mode
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
 8001ac4:	4770      	bx	lr

08001ac6 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8001ac6:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8001ac8:	6803      	ldr	r3, [r0, #0]
 8001aca:	689a      	ldr	r2, [r3, #8]
 8001acc:	f002 0203 	and.w	r2, r2, #3
 8001ad0:	2a01      	cmp	r2, #1
{
 8001ad2:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET )
 8001ad4:	d001      	beq.n	8001ada <ADC_Disable+0x14>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001ad6:	2000      	movs	r0, #0
}
 8001ad8:	bd38      	pop	{r3, r4, r5, pc}
  if (ADC_IS_ENABLE(hadc) != RESET )
 8001ada:	681a      	ldr	r2, [r3, #0]
 8001adc:	07d1      	lsls	r1, r2, #31
 8001ade:	d5fa      	bpl.n	8001ad6 <ADC_Disable+0x10>
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8001ae0:	689a      	ldr	r2, [r3, #8]
 8001ae2:	f002 020d 	and.w	r2, r2, #13
 8001ae6:	2a01      	cmp	r2, #1
 8001ae8:	d115      	bne.n	8001b16 <ADC_Disable+0x50>
      __HAL_ADC_DISABLE(hadc);
 8001aea:	689a      	ldr	r2, [r3, #8]
 8001aec:	f042 0202 	orr.w	r2, r2, #2
 8001af0:	609a      	str	r2, [r3, #8]
 8001af2:	2203      	movs	r2, #3
 8001af4:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8001af6:	f7ff ffdd 	bl	8001ab4 <HAL_GetTick>
 8001afa:	4605      	mov	r5, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001afc:	6823      	ldr	r3, [r4, #0]
 8001afe:	689b      	ldr	r3, [r3, #8]
 8001b00:	07db      	lsls	r3, r3, #31
 8001b02:	d5e8      	bpl.n	8001ad6 <ADC_Disable+0x10>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001b04:	f7ff ffd6 	bl	8001ab4 <HAL_GetTick>
 8001b08:	1b40      	subs	r0, r0, r5
 8001b0a:	2802      	cmp	r0, #2
 8001b0c:	d9f6      	bls.n	8001afc <ADC_Disable+0x36>
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001b0e:	6823      	ldr	r3, [r4, #0]
 8001b10:	689b      	ldr	r3, [r3, #8]
 8001b12:	07da      	lsls	r2, r3, #31
 8001b14:	d5f2      	bpl.n	8001afc <ADC_Disable+0x36>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b16:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001b18:	f043 0310 	orr.w	r3, r3, #16
 8001b1c:	6423      	str	r3, [r4, #64]	@ 0x40
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b1e:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8001b20:	f043 0301 	orr.w	r3, r3, #1
 8001b24:	6463      	str	r3, [r4, #68]	@ 0x44
      return HAL_ERROR;
 8001b26:	2001      	movs	r0, #1
 8001b28:	e7d6      	b.n	8001ad8 <ADC_Disable+0x12>
	...

08001b2c <HAL_ADC_Init>:
{
 8001b2c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __IO uint32_t wait_loop_index = 0U;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	9301      	str	r3, [sp, #4]
  if(hadc == NULL)
 8001b32:	4604      	mov	r4, r0
 8001b34:	2800      	cmp	r0, #0
 8001b36:	f000 8103 	beq.w	8001d40 <HAL_ADC_Init+0x214>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001b3a:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 8001b3c:	06d5      	lsls	r5, r2, #27
 8001b3e:	d46a      	bmi.n	8001c16 <HAL_ADC_Init+0xea>
    if (hadc->State == HAL_ADC_STATE_RESET)
 8001b40:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d035      	beq.n	8001bb2 <HAL_ADC_Init+0x86>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b46:	2000      	movs	r0, #0
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001b48:	6823      	ldr	r3, [r4, #0]
 8001b4a:	689a      	ldr	r2, [r3, #8]
 8001b4c:	00d2      	lsls	r2, r2, #3
 8001b4e:	d502      	bpl.n	8001b56 <HAL_ADC_Init+0x2a>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8001b50:	689b      	ldr	r3, [r3, #8]
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001b52:	009d      	lsls	r5, r3, #2
 8001b54:	d50a      	bpl.n	8001b6c <HAL_ADC_Init+0x40>
      ADC_STATE_CLR_SET(hadc->State,
 8001b56:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001b58:	f023 0312 	bic.w	r3, r3, #18
 8001b5c:	f043 0310 	orr.w	r3, r3, #16
 8001b60:	6423      	str	r3, [r4, #64]	@ 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b62:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8001b64:	f043 0301 	orr.w	r3, r3, #1
 8001b68:	6463      	str	r3, [r4, #68]	@ 0x44
      tmp_hal_status = HAL_ERROR;
 8001b6a:	2001      	movs	r0, #1
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001b6c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001b6e:	06d9      	lsls	r1, r3, #27
 8001b70:	f100 80e0 	bmi.w	8001d34 <HAL_ADC_Init+0x208>
 8001b74:	2800      	cmp	r0, #0
 8001b76:	f040 80dd 	bne.w	8001d34 <HAL_ADC_Init+0x208>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001b7a:	6823      	ldr	r3, [r4, #0]
 8001b7c:	689a      	ldr	r2, [r3, #8]
      (tmp_hal_status == HAL_OK)                                &&
 8001b7e:	0752      	lsls	r2, r2, #29
 8001b80:	f100 80d8 	bmi.w	8001d34 <HAL_ADC_Init+0x208>
    ADC_STATE_CLR_SET(hadc->State,
 8001b84:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8001b86:	f422 7281 	bic.w	r2, r2, #258	@ 0x102
 8001b8a:	f042 0202 	orr.w	r2, r2, #2
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001b8e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
    ADC_STATE_CLR_SET(hadc->State,
 8001b92:	6422      	str	r2, [r4, #64]	@ 0x40
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001b94:	4a6b      	ldr	r2, [pc, #428]	@ (8001d44 <HAL_ADC_Init+0x218>)
 8001b96:	d042      	beq.n	8001c1e <HAL_ADC_Init+0xf2>
 8001b98:	4293      	cmp	r3, r2
 8001b9a:	d03e      	beq.n	8001c1a <HAL_ADC_Init+0xee>
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001b9c:	f502 7240 	add.w	r2, r2, #768	@ 0x300
 8001ba0:	4293      	cmp	r3, r2
 8001ba2:	4969      	ldr	r1, [pc, #420]	@ (8001d48 <HAL_ADC_Init+0x21c>)
 8001ba4:	f000 80b3 	beq.w	8001d0e <HAL_ADC_Init+0x1e2>
 8001ba8:	428b      	cmp	r3, r1
 8001baa:	bf18      	it	ne
 8001bac:	2200      	movne	r2, #0
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001bae:	4967      	ldr	r1, [pc, #412]	@ (8001d4c <HAL_ADC_Init+0x220>)
 8001bb0:	e036      	b.n	8001c20 <HAL_ADC_Init+0xf4>
      hadc->InjectionConfig.ContextQueue = 0U;
 8001bb2:	e9c0 3312 	strd	r3, r3, [r0, #72]	@ 0x48
      ADC_CLEAR_ERRORCODE(hadc);
 8001bb6:	6443      	str	r3, [r0, #68]	@ 0x44
      hadc->Lock = HAL_UNLOCKED;
 8001bb8:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_ADC_MspInit(hadc);
 8001bbc:	f7ff fc02 	bl	80013c4 <HAL_ADC_MspInit>
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8001bc0:	6823      	ldr	r3, [r4, #0]
 8001bc2:	689b      	ldr	r3, [r3, #8]
 8001bc4:	00d8      	lsls	r0, r3, #3
 8001bc6:	d4be      	bmi.n	8001b46 <HAL_ADC_Init+0x1a>
        tmp_hal_status = ADC_Disable(hadc);
 8001bc8:	4620      	mov	r0, r4
 8001bca:	f7ff ff7c 	bl	8001ac6 <ADC_Disable>
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001bce:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8001bd0:	06d1      	lsls	r1, r2, #27
 8001bd2:	d4b9      	bmi.n	8001b48 <HAL_ADC_Init+0x1c>
 8001bd4:	2800      	cmp	r0, #0
 8001bd6:	d1b7      	bne.n	8001b48 <HAL_ADC_Init+0x1c>
          ADC_STATE_CLR_SET(hadc->State,
 8001bd8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8001bda:	6822      	ldr	r2, [r4, #0]
          ADC_STATE_CLR_SET(hadc->State,
 8001bdc:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001be0:	f023 0302 	bic.w	r3, r3, #2
 8001be4:	f043 0302 	orr.w	r3, r3, #2
 8001be8:	6423      	str	r3, [r4, #64]	@ 0x40
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8001bea:	6893      	ldr	r3, [r2, #8]
 8001bec:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
 8001bf0:	6093      	str	r3, [r2, #8]
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8001bf2:	6893      	ldr	r3, [r2, #8]
 8001bf4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001bf8:	6093      	str	r3, [r2, #8]
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001bfa:	4b55      	ldr	r3, [pc, #340]	@ (8001d50 <HAL_ADC_Init+0x224>)
 8001bfc:	4a55      	ldr	r2, [pc, #340]	@ (8001d54 <HAL_ADC_Init+0x228>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	fbb3 f3f2 	udiv	r3, r3, r2
 8001c04:	220a      	movs	r2, #10
 8001c06:	4353      	muls	r3, r2
            wait_loop_index--;
 8001c08:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 8001c0a:	9b01      	ldr	r3, [sp, #4]
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d09a      	beq.n	8001b46 <HAL_ADC_Init+0x1a>
            wait_loop_index--;
 8001c10:	9b01      	ldr	r3, [sp, #4]
 8001c12:	3b01      	subs	r3, #1
 8001c14:	e7f8      	b.n	8001c08 <HAL_ADC_Init+0xdc>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c16:	4618      	mov	r0, r3
 8001c18:	e7a8      	b.n	8001b6c <HAL_ADC_Init+0x40>
 8001c1a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001c1e:	494e      	ldr	r1, [pc, #312]	@ (8001d58 <HAL_ADC_Init+0x22c>)
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001c20:	689d      	ldr	r5, [r3, #8]
 8001c22:	f005 0503 	and.w	r5, r5, #3
 8001c26:	2d01      	cmp	r5, #1
 8001c28:	d102      	bne.n	8001c30 <HAL_ADC_Init+0x104>
 8001c2a:	681d      	ldr	r5, [r3, #0]
 8001c2c:	07ed      	lsls	r5, r5, #31
 8001c2e:	d40e      	bmi.n	8001c4e <HAL_ADC_Init+0x122>
 8001c30:	b13a      	cbz	r2, 8001c42 <HAL_ADC_Init+0x116>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001c32:	6895      	ldr	r5, [r2, #8]
 8001c34:	f005 0503 	and.w	r5, r5, #3
 8001c38:	2d01      	cmp	r5, #1
 8001c3a:	d102      	bne.n	8001c42 <HAL_ADC_Init+0x116>
 8001c3c:	6812      	ldr	r2, [r2, #0]
 8001c3e:	07d2      	lsls	r2, r2, #31
 8001c40:	d405      	bmi.n	8001c4e <HAL_ADC_Init+0x122>
      MODIFY_REG(tmpADC_Common->CCR       ,
 8001c42:	688a      	ldr	r2, [r1, #8]
 8001c44:	6865      	ldr	r5, [r4, #4]
 8001c46:	f422 3240 	bic.w	r2, r2, #196608	@ 0x30000
 8001c4a:	432a      	orrs	r2, r5
 8001c4c:	608a      	str	r2, [r1, #8]
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8001c4e:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 8001c52:	430a      	orrs	r2, r1
 8001c54:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8001c56:	7e65      	ldrb	r5, [r4, #25]
 8001c58:	3901      	subs	r1, #1
 8001c5a:	bf18      	it	ne
 8001c5c:	2101      	movne	r1, #1
 8001c5e:	ea42 3245 	orr.w	r2, r2, r5, lsl #13
 8001c62:	ea42 3201 	orr.w	r2, r2, r1, lsl #12
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001c66:	f894 1020 	ldrb.w	r1, [r4, #32]
 8001c6a:	2901      	cmp	r1, #1
 8001c6c:	d107      	bne.n	8001c7e <HAL_ADC_Init+0x152>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001c6e:	2d00      	cmp	r5, #0
 8001c70:	d14f      	bne.n	8001d12 <HAL_ADC_Init+0x1e6>
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8001c72:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8001c74:	3901      	subs	r1, #1
 8001c76:	ea42 4141 	orr.w	r1, r2, r1, lsl #17
 8001c7a:	f441 3280 	orr.w	r2, r1, #65536	@ 0x10000
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001c7e:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8001c80:	2901      	cmp	r1, #1
 8001c82:	d015      	beq.n	8001cb0 <HAL_ADC_Init+0x184>
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8001c84:	4d35      	ldr	r5, [pc, #212]	@ (8001d5c <HAL_ADC_Init+0x230>)
 8001c86:	42ab      	cmp	r3, r5
 8001c88:	d003      	beq.n	8001c92 <HAL_ADC_Init+0x166>
 8001c8a:	f505 7580 	add.w	r5, r5, #256	@ 0x100
 8001c8e:	42ab      	cmp	r3, r5
 8001c90:	d10a      	bne.n	8001ca8 <HAL_ADC_Init+0x17c>
 8001c92:	f5b1 7f30 	cmp.w	r1, #704	@ 0x2c0
 8001c96:	d047      	beq.n	8001d28 <HAL_ADC_Init+0x1fc>
 8001c98:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 8001c9c:	d047      	beq.n	8001d2e <HAL_ADC_Init+0x202>
 8001c9e:	f5b1 7fe0 	cmp.w	r1, #448	@ 0x1c0
 8001ca2:	bf08      	it	eq
 8001ca4:	f44f 7180 	moveq.w	r1, #256	@ 0x100
 8001ca8:	6ae5      	ldr	r5, [r4, #44]	@ 0x2c
 8001caa:	4315      	orrs	r5, r2
 8001cac:	ea45 0201 	orr.w	r2, r5, r1
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001cb0:	6899      	ldr	r1, [r3, #8]
 8001cb2:	f011 0f0c 	tst.w	r1, #12
 8001cb6:	d10c      	bne.n	8001cd2 <HAL_ADC_Init+0x1a6>
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8001cb8:	68d9      	ldr	r1, [r3, #12]
 8001cba:	f421 4180 	bic.w	r1, r1, #16384	@ 0x4000
 8001cbe:	f021 0102 	bic.w	r1, r1, #2
 8001cc2:	60d9      	str	r1, [r3, #12]
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8001cc4:	f894 1030 	ldrb.w	r1, [r4, #48]	@ 0x30
 8001cc8:	7e25      	ldrb	r5, [r4, #24]
 8001cca:	0049      	lsls	r1, r1, #1
 8001ccc:	ea41 3185 	orr.w	r1, r1, r5, lsl #14
 8001cd0:	430a      	orrs	r2, r1
    MODIFY_REG(hadc->Instance->CFGR,
 8001cd2:	68dd      	ldr	r5, [r3, #12]
 8001cd4:	4922      	ldr	r1, [pc, #136]	@ (8001d60 <HAL_ADC_Init+0x234>)
 8001cd6:	4029      	ands	r1, r5
 8001cd8:	4311      	orrs	r1, r2
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001cda:	6922      	ldr	r2, [r4, #16]
    MODIFY_REG(hadc->Instance->CFGR,
 8001cdc:	60d9      	str	r1, [r3, #12]
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001cde:	2a01      	cmp	r2, #1
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8001ce0:	bf05      	ittet	eq
 8001ce2:	6b19      	ldreq	r1, [r3, #48]	@ 0x30
 8001ce4:	69e2      	ldreq	r2, [r4, #28]
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001ce6:	6b1a      	ldrne	r2, [r3, #48]	@ 0x30
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8001ce8:	f102 32ff 	addeq.w	r2, r2, #4294967295
 8001cec:	bf06      	itte	eq
 8001cee:	f021 010f 	biceq.w	r1, r1, #15
 8001cf2:	430a      	orreq	r2, r1
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001cf4:	f022 020f 	bicne.w	r2, r2, #15
 8001cf8:	631a      	str	r2, [r3, #48]	@ 0x30
    ADC_CLEAR_ERRORCODE(hadc);
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	6463      	str	r3, [r4, #68]	@ 0x44
    ADC_STATE_CLR_SET(hadc->State,
 8001cfe:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001d00:	f023 0303 	bic.w	r3, r3, #3
 8001d04:	f043 0301 	orr.w	r3, r3, #1
 8001d08:	6423      	str	r3, [r4, #64]	@ 0x40
}
 8001d0a:	b003      	add	sp, #12
 8001d0c:	bd30      	pop	{r4, r5, pc}
 8001d0e:	460a      	mov	r2, r1
 8001d10:	e74d      	b.n	8001bae <HAL_ADC_Init+0x82>
        ADC_STATE_CLR_SET(hadc->State,
 8001d12:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 8001d14:	f021 0122 	bic.w	r1, r1, #34	@ 0x22
 8001d18:	f041 0120 	orr.w	r1, r1, #32
 8001d1c:	6421      	str	r1, [r4, #64]	@ 0x40
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d1e:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8001d20:	f041 0101 	orr.w	r1, r1, #1
 8001d24:	6461      	str	r1, [r4, #68]	@ 0x44
 8001d26:	e7aa      	b.n	8001c7e <HAL_ADC_Init+0x152>
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8001d28:	f44f 71e0 	mov.w	r1, #448	@ 0x1c0
 8001d2c:	e7bc      	b.n	8001ca8 <HAL_ADC_Init+0x17c>
 8001d2e:	f44f 7130 	mov.w	r1, #704	@ 0x2c0
 8001d32:	e7b9      	b.n	8001ca8 <HAL_ADC_Init+0x17c>
    ADC_STATE_CLR_SET(hadc->State,
 8001d34:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001d36:	f023 0312 	bic.w	r3, r3, #18
 8001d3a:	f043 0310 	orr.w	r3, r3, #16
 8001d3e:	6423      	str	r3, [r4, #64]	@ 0x40
    return HAL_ERROR;
 8001d40:	2001      	movs	r0, #1
 8001d42:	e7e2      	b.n	8001d0a <HAL_ADC_Init+0x1de>
 8001d44:	50000100 	.word	0x50000100
 8001d48:	50000500 	.word	0x50000500
 8001d4c:	50000700 	.word	0x50000700
 8001d50:	20000000 	.word	0x20000000
 8001d54:	000f4240 	.word	0x000f4240
 8001d58:	50000300 	.word	0x50000300
 8001d5c:	50000400 	.word	0x50000400
 8001d60:	fff0c007 	.word	0xfff0c007

08001d64 <HAL_ADCEx_InjectedConvCpltCallback>:
}
 8001d64:	4770      	bx	lr

08001d66 <HAL_ADCEx_InjectedQueueOverflowCallback>:
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef* hadc)
 8001d66:	4770      	bx	lr

08001d68 <HAL_ADCEx_LevelOutOfWindow2Callback>:
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef* hadc)
 8001d68:	4770      	bx	lr

08001d6a <HAL_ADCEx_LevelOutOfWindow3Callback>:
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef* hadc)
 8001d6a:	4770      	bx	lr

08001d6c <HAL_ADC_IRQHandler>:
  uint32_t tmp_isr = hadc->Instance->ISR;
 8001d6c:	6803      	ldr	r3, [r0, #0]
{
 8001d6e:	b570      	push	{r4, r5, r6, lr}
  uint32_t tmp_isr = hadc->Instance->ISR;
 8001d70:	681d      	ldr	r5, [r3, #0]
  uint32_t tmp_ier = hadc->Instance->IER;
 8001d72:	685e      	ldr	r6, [r3, #4]
  if( (((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001d74:	076a      	lsls	r2, r5, #29
{
 8001d76:	4604      	mov	r4, r0
  if( (((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001d78:	d501      	bpl.n	8001d7e <HAL_ADC_IRQHandler+0x12>
 8001d7a:	0770      	lsls	r0, r6, #29
 8001d7c:	d403      	bmi.n	8001d86 <HAL_ADC_IRQHandler+0x1a>
 8001d7e:	0729      	lsls	r1, r5, #28
 8001d80:	d543      	bpl.n	8001e0a <HAL_ADC_IRQHandler+0x9e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))   )
 8001d82:	0732      	lsls	r2, r6, #28
 8001d84:	d541      	bpl.n	8001e0a <HAL_ADC_IRQHandler+0x9e>
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001d86:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8001d88:	06d0      	lsls	r0, r2, #27
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001d8a:	bf5e      	ittt	pl
 8001d8c:	6c22      	ldrpl	r2, [r4, #64]	@ 0x40
 8001d8e:	f442 7200 	orrpl.w	r2, r2, #512	@ 0x200
 8001d92:	6422      	strpl	r2, [r4, #64]	@ 0x40
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8001d94:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001d98:	d003      	beq.n	8001da2 <HAL_ADC_IRQHandler+0x36>
 8001d9a:	4a90      	ldr	r2, [pc, #576]	@ (8001fdc <HAL_ADC_IRQHandler+0x270>)
 8001d9c:	4293      	cmp	r3, r2
 8001d9e:	f040 8105 	bne.w	8001fac <HAL_ADC_IRQHandler+0x240>
 8001da2:	4a8f      	ldr	r2, [pc, #572]	@ (8001fe0 <HAL_ADC_IRQHandler+0x274>)
 8001da4:	6891      	ldr	r1, [r2, #8]
 8001da6:	06c9      	lsls	r1, r1, #27
 8001da8:	d00c      	beq.n	8001dc4 <HAL_ADC_IRQHandler+0x58>
 8001daa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001dae:	d003      	beq.n	8001db8 <HAL_ADC_IRQHandler+0x4c>
 8001db0:	498a      	ldr	r1, [pc, #552]	@ (8001fdc <HAL_ADC_IRQHandler+0x270>)
 8001db2:	428b      	cmp	r3, r1
 8001db4:	f040 80ff 	bne.w	8001fb6 <HAL_ADC_IRQHandler+0x24a>
 8001db8:	6892      	ldr	r2, [r2, #8]
 8001dba:	f002 021f 	and.w	r2, r2, #31
 8001dbe:	2a05      	cmp	r2, #5
 8001dc0:	f040 8114 	bne.w	8001fec <HAL_ADC_IRQHandler+0x280>
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8001dc4:	68da      	ldr	r2, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 8001dc6:	68d9      	ldr	r1, [r3, #12]
       (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == RESET)  )
 8001dc8:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 8001dcc:	f401 6140 	and.w	r1, r1, #3072	@ 0xc00
 8001dd0:	4311      	orrs	r1, r2
 8001dd2:	d114      	bne.n	8001dfe <HAL_ADC_IRQHandler+0x92>
      if((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS)
 8001dd4:	0729      	lsls	r1, r5, #28
 8001dd6:	d512      	bpl.n	8001dfe <HAL_ADC_IRQHandler+0x92>
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001dd8:	689a      	ldr	r2, [r3, #8]
 8001dda:	0752      	lsls	r2, r2, #29
 8001ddc:	f100 8122 	bmi.w	8002024 <HAL_ADC_IRQHandler+0x2b8>
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001de0:	685a      	ldr	r2, [r3, #4]
 8001de2:	f022 020c 	bic.w	r2, r2, #12
 8001de6:	605a      	str	r2, [r3, #4]
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001de8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001dea:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001dee:	6423      	str	r3, [r4, #64]	@ 0x40
          if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001df0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001df2:	04d8      	lsls	r0, r3, #19
 8001df4:	d403      	bmi.n	8001dfe <HAL_ADC_IRQHandler+0x92>
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001df6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001df8:	f043 0301 	orr.w	r3, r3, #1
 8001dfc:	6423      	str	r3, [r4, #64]	@ 0x40
      HAL_ADC_ConvCpltCallback(hadc);
 8001dfe:	4620      	mov	r0, r4
 8001e00:	f7ff fe5e 	bl	8001ac0 <HAL_ADC_ConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 8001e04:	6823      	ldr	r3, [r4, #0]
 8001e06:	220c      	movs	r2, #12
 8001e08:	601a      	str	r2, [r3, #0]
  if( (((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001e0a:	06a9      	lsls	r1, r5, #26
 8001e0c:	d501      	bpl.n	8001e12 <HAL_ADC_IRQHandler+0xa6>
 8001e0e:	06b2      	lsls	r2, r6, #26
 8001e10:	d403      	bmi.n	8001e1a <HAL_ADC_IRQHandler+0xae>
 8001e12:	066b      	lsls	r3, r5, #25
 8001e14:	d562      	bpl.n	8001edc <HAL_ADC_IRQHandler+0x170>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS))   )
 8001e16:	0670      	lsls	r0, r6, #25
 8001e18:	d560      	bpl.n	8001edc <HAL_ADC_IRQHandler+0x170>
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001e1a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001e1c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001e20:	6423      	str	r3, [r4, #64]	@ 0x40
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8001e22:	6823      	ldr	r3, [r4, #0]
 8001e24:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001e28:	d003      	beq.n	8001e32 <HAL_ADC_IRQHandler+0xc6>
 8001e2a:	4a6c      	ldr	r2, [pc, #432]	@ (8001fdc <HAL_ADC_IRQHandler+0x270>)
 8001e2c:	4293      	cmp	r3, r2
 8001e2e:	f040 8102 	bne.w	8002036 <HAL_ADC_IRQHandler+0x2ca>
 8001e32:	4a6b      	ldr	r2, [pc, #428]	@ (8001fe0 <HAL_ADC_IRQHandler+0x274>)
 8001e34:	6891      	ldr	r1, [r2, #8]
 8001e36:	06c9      	lsls	r1, r1, #27
 8001e38:	d00c      	beq.n	8001e54 <HAL_ADC_IRQHandler+0xe8>
 8001e3a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001e3e:	d003      	beq.n	8001e48 <HAL_ADC_IRQHandler+0xdc>
 8001e40:	4966      	ldr	r1, [pc, #408]	@ (8001fdc <HAL_ADC_IRQHandler+0x270>)
 8001e42:	428b      	cmp	r3, r1
 8001e44:	f040 80fc 	bne.w	8002040 <HAL_ADC_IRQHandler+0x2d4>
 8001e48:	6892      	ldr	r2, [r2, #8]
 8001e4a:	f002 021f 	and.w	r2, r2, #31
 8001e4e:	2a05      	cmp	r2, #5
 8001e50:	f040 8108 	bne.w	8002064 <HAL_ADC_IRQHandler+0x2f8>
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8001e54:	68da      	ldr	r2, [r3, #12]
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc))
 8001e56:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8001e58:	f011 0fc0 	tst.w	r1, #192	@ 0xc0
 8001e5c:	d138      	bne.n	8001ed0 <HAL_ADC_IRQHandler+0x164>
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 8001e5e:	0191      	lsls	r1, r2, #6
 8001e60:	d506      	bpl.n	8001e70 <HAL_ADC_IRQHandler+0x104>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 8001e62:	68d9      	ldr	r1, [r3, #12]
          (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )   )
 8001e64:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 8001e68:	f401 6140 	and.w	r1, r1, #3072	@ 0xc00
 8001e6c:	4311      	orrs	r1, r2
 8001e6e:	d12f      	bne.n	8001ed0 <HAL_ADC_IRQHandler+0x164>
        if((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS)
 8001e70:	0668      	lsls	r0, r5, #25
 8001e72:	d52d      	bpl.n	8001ed0 <HAL_ADC_IRQHandler+0x164>
          if (ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc))
 8001e74:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001e78:	d003      	beq.n	8001e82 <HAL_ADC_IRQHandler+0x116>
 8001e7a:	4a58      	ldr	r2, [pc, #352]	@ (8001fdc <HAL_ADC_IRQHandler+0x270>)
 8001e7c:	4293      	cmp	r3, r2
 8001e7e:	f040 810d 	bne.w	800209c <HAL_ADC_IRQHandler+0x330>
 8001e82:	4a57      	ldr	r2, [pc, #348]	@ (8001fe0 <HAL_ADC_IRQHandler+0x274>)
 8001e84:	6891      	ldr	r1, [r2, #8]
 8001e86:	06c9      	lsls	r1, r1, #27
 8001e88:	d00c      	beq.n	8001ea4 <HAL_ADC_IRQHandler+0x138>
 8001e8a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001e8e:	d003      	beq.n	8001e98 <HAL_ADC_IRQHandler+0x12c>
 8001e90:	4952      	ldr	r1, [pc, #328]	@ (8001fdc <HAL_ADC_IRQHandler+0x270>)
 8001e92:	428b      	cmp	r3, r1
 8001e94:	f040 8107 	bne.w	80020a6 <HAL_ADC_IRQHandler+0x33a>
 8001e98:	6892      	ldr	r2, [r2, #8]
 8001e9a:	f002 021f 	and.w	r2, r2, #31
 8001e9e:	2a06      	cmp	r2, #6
 8001ea0:	f040 8113 	bne.w	80020ca <HAL_ADC_IRQHandler+0x35e>
            tmp_cfgr_jqm = READ_REG(hadc->Instance->CFGR); 
 8001ea4:	68da      	ldr	r2, [r3, #12]
          if(READ_BIT(tmp_cfgr_jqm, ADC_CFGR_JQM) == RESET)
 8001ea6:	0291      	lsls	r1, r2, #10
 8001ea8:	d412      	bmi.n	8001ed0 <HAL_ADC_IRQHandler+0x164>
            if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 8001eaa:	689a      	ldr	r2, [r3, #8]
 8001eac:	0712      	lsls	r2, r2, #28
 8001eae:	f100 8128 	bmi.w	8002102 <HAL_ADC_IRQHandler+0x396>
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8001eb2:	685a      	ldr	r2, [r3, #4]
 8001eb4:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8001eb8:	605a      	str	r2, [r3, #4]
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8001eba:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001ebc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001ec0:	6423      	str	r3, [r4, #64]	@ 0x40
              if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001ec2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001ec4:	05d8      	lsls	r0, r3, #23
 8001ec6:	d403      	bmi.n	8001ed0 <HAL_ADC_IRQHandler+0x164>
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001ec8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001eca:	f043 0301 	orr.w	r3, r3, #1
 8001ece:	6423      	str	r3, [r4, #64]	@ 0x40
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001ed0:	4620      	mov	r0, r4
 8001ed2:	f7ff ff47 	bl	8001d64 <HAL_ADCEx_InjectedConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8001ed6:	6823      	ldr	r3, [r4, #0]
 8001ed8:	2260      	movs	r2, #96	@ 0x60
 8001eda:	601a      	str	r2, [r3, #0]
  if(((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8001edc:	0629      	lsls	r1, r5, #24
 8001ede:	d50b      	bpl.n	8001ef8 <HAL_ADC_IRQHandler+0x18c>
 8001ee0:	0632      	lsls	r2, r6, #24
 8001ee2:	d509      	bpl.n	8001ef8 <HAL_ADC_IRQHandler+0x18c>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001ee4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001ee6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001eea:	6423      	str	r3, [r4, #64]	@ 0x40
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001eec:	4620      	mov	r0, r4
 8001eee:	f7ff fde8 	bl	8001ac2 <HAL_ADC_LevelOutOfWindowCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8001ef2:	6823      	ldr	r3, [r4, #0]
 8001ef4:	2280      	movs	r2, #128	@ 0x80
 8001ef6:	601a      	str	r2, [r3, #0]
  if(((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8001ef8:	05eb      	lsls	r3, r5, #23
 8001efa:	d50c      	bpl.n	8001f16 <HAL_ADC_IRQHandler+0x1aa>
 8001efc:	05f0      	lsls	r0, r6, #23
 8001efe:	d50a      	bpl.n	8001f16 <HAL_ADC_IRQHandler+0x1aa>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8001f00:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001f02:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001f06:	6423      	str	r3, [r4, #64]	@ 0x40
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8001f08:	4620      	mov	r0, r4
 8001f0a:	f7ff ff2d 	bl	8001d68 <HAL_ADCEx_LevelOutOfWindow2Callback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8001f0e:	6823      	ldr	r3, [r4, #0]
 8001f10:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001f14:	601a      	str	r2, [r3, #0]
  if(((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8001f16:	05a9      	lsls	r1, r5, #22
 8001f18:	d50c      	bpl.n	8001f34 <HAL_ADC_IRQHandler+0x1c8>
 8001f1a:	05b2      	lsls	r2, r6, #22
 8001f1c:	d50a      	bpl.n	8001f34 <HAL_ADC_IRQHandler+0x1c8>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8001f1e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001f20:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001f24:	6423      	str	r3, [r4, #64]	@ 0x40
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8001f26:	4620      	mov	r0, r4
 8001f28:	f7ff ff1f 	bl	8001d6a <HAL_ADCEx_LevelOutOfWindow3Callback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8001f2c:	6823      	ldr	r3, [r4, #0]
 8001f2e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001f32:	601a      	str	r2, [r3, #0]
  if(((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8001f34:	06eb      	lsls	r3, r5, #27
 8001f36:	d525      	bpl.n	8001f84 <HAL_ADC_IRQHandler+0x218>
 8001f38:	06f0      	lsls	r0, r6, #27
 8001f3a:	d523      	bpl.n	8001f84 <HAL_ADC_IRQHandler+0x218>
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001f3c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8001f3e:	2b01      	cmp	r3, #1
 8001f40:	d012      	beq.n	8001f68 <HAL_ADC_IRQHandler+0x1fc>
      tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001f42:	6822      	ldr	r2, [r4, #0]
 8001f44:	f1b2 4fa0 	cmp.w	r2, #1342177280	@ 0x50000000
 8001f48:	f000 80e4 	beq.w	8002114 <HAL_ADC_IRQHandler+0x3a8>
 8001f4c:	4823      	ldr	r0, [pc, #140]	@ (8001fdc <HAL_ADC_IRQHandler+0x270>)
 8001f4e:	4b25      	ldr	r3, [pc, #148]	@ (8001fe4 <HAL_ADC_IRQHandler+0x278>)
 8001f50:	4923      	ldr	r1, [pc, #140]	@ (8001fe0 <HAL_ADC_IRQHandler+0x274>)
 8001f52:	4282      	cmp	r2, r0
 8001f54:	bf08      	it	eq
 8001f56:	460b      	moveq	r3, r1
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8001f58:	6899      	ldr	r1, [r3, #8]
 8001f5a:	06c9      	lsls	r1, r1, #27
 8001f5c:	f040 80dc 	bne.w	8002118 <HAL_ADC_IRQHandler+0x3ac>
        if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8001f60:	68d3      	ldr	r3, [r2, #12]
 8001f62:	f013 0f01 	tst.w	r3, #1
        if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 8001f66:	d00a      	beq.n	8001f7e <HAL_ADC_IRQHandler+0x212>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8001f68:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001f6a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001f6e:	6423      	str	r3, [r4, #64]	@ 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001f70:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8001f72:	f043 0302 	orr.w	r3, r3, #2
 8001f76:	6463      	str	r3, [r4, #68]	@ 0x44
      HAL_ADC_ErrorCallback(hadc);
 8001f78:	4620      	mov	r0, r4
 8001f7a:	f7ff fda3 	bl	8001ac4 <HAL_ADC_ErrorCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001f7e:	6823      	ldr	r3, [r4, #0]
 8001f80:	2210      	movs	r2, #16
 8001f82:	601a      	str	r2, [r3, #0]
  if(((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8001f84:	056a      	lsls	r2, r5, #21
 8001f86:	d510      	bpl.n	8001faa <HAL_ADC_IRQHandler+0x23e>
 8001f88:	0573      	lsls	r3, r6, #21
 8001f8a:	d50e      	bpl.n	8001faa <HAL_ADC_IRQHandler+0x23e>
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8001f8c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001f8e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001f92:	6423      	str	r3, [r4, #64]	@ 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8001f94:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8001f96:	f043 0308 	orr.w	r3, r3, #8
 8001f9a:	6463      	str	r3, [r4, #68]	@ 0x44
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8001f9c:	6823      	ldr	r3, [r4, #0]
 8001f9e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001fa2:	601a      	str	r2, [r3, #0]
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8001fa4:	4620      	mov	r0, r4
 8001fa6:	f7ff fede 	bl	8001d66 <HAL_ADCEx_InjectedQueueOverflowCallback>
}
 8001faa:	bd70      	pop	{r4, r5, r6, pc}
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8001fac:	4a0d      	ldr	r2, [pc, #52]	@ (8001fe4 <HAL_ADC_IRQHandler+0x278>)
 8001fae:	6892      	ldr	r2, [r2, #8]
 8001fb0:	06d0      	lsls	r0, r2, #27
 8001fb2:	f43f af07 	beq.w	8001dc4 <HAL_ADC_IRQHandler+0x58>
 8001fb6:	4a0b      	ldr	r2, [pc, #44]	@ (8001fe4 <HAL_ADC_IRQHandler+0x278>)
 8001fb8:	6892      	ldr	r2, [r2, #8]
 8001fba:	f002 021f 	and.w	r2, r2, #31
 8001fbe:	2a05      	cmp	r2, #5
 8001fc0:	f43f af00 	beq.w	8001dc4 <HAL_ADC_IRQHandler+0x58>
 8001fc4:	4a07      	ldr	r2, [pc, #28]	@ (8001fe4 <HAL_ADC_IRQHandler+0x278>)
 8001fc6:	6892      	ldr	r2, [r2, #8]
 8001fc8:	f002 021f 	and.w	r2, r2, #31
 8001fcc:	2a09      	cmp	r2, #9
 8001fce:	f43f aef9 	beq.w	8001dc4 <HAL_ADC_IRQHandler+0x58>
 8001fd2:	4a05      	ldr	r2, [pc, #20]	@ (8001fe8 <HAL_ADC_IRQHandler+0x27c>)
 8001fd4:	4293      	cmp	r3, r2
 8001fd6:	d123      	bne.n	8002020 <HAL_ADC_IRQHandler+0x2b4>
 8001fd8:	e6f4      	b.n	8001dc4 <HAL_ADC_IRQHandler+0x58>
 8001fda:	bf00      	nop
 8001fdc:	50000100 	.word	0x50000100
 8001fe0:	50000300 	.word	0x50000300
 8001fe4:	50000700 	.word	0x50000700
 8001fe8:	50000400 	.word	0x50000400
 8001fec:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001ff0:	d002      	beq.n	8001ff8 <HAL_ADC_IRQHandler+0x28c>
 8001ff2:	4a4b      	ldr	r2, [pc, #300]	@ (8002120 <HAL_ADC_IRQHandler+0x3b4>)
 8001ff4:	4293      	cmp	r3, r2
 8001ff6:	d1e5      	bne.n	8001fc4 <HAL_ADC_IRQHandler+0x258>
 8001ff8:	4a4a      	ldr	r2, [pc, #296]	@ (8002124 <HAL_ADC_IRQHandler+0x3b8>)
 8001ffa:	6892      	ldr	r2, [r2, #8]
 8001ffc:	f002 021f 	and.w	r2, r2, #31
 8002000:	2a09      	cmp	r2, #9
 8002002:	f43f aedf 	beq.w	8001dc4 <HAL_ADC_IRQHandler+0x58>
 8002006:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800200a:	f43f aedb 	beq.w	8001dc4 <HAL_ADC_IRQHandler+0x58>
 800200e:	4a46      	ldr	r2, [pc, #280]	@ (8002128 <HAL_ADC_IRQHandler+0x3bc>)
 8002010:	4293      	cmp	r3, r2
 8002012:	f43f aed7 	beq.w	8001dc4 <HAL_ADC_IRQHandler+0x58>
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8002016:	4942      	ldr	r1, [pc, #264]	@ (8002120 <HAL_ADC_IRQHandler+0x3b4>)
 8002018:	428b      	cmp	r3, r1
 800201a:	bf08      	it	eq
 800201c:	f04f 42a0 	moveq.w	r2, #1342177280	@ 0x50000000
 8002020:	68d2      	ldr	r2, [r2, #12]
 8002022:	e6d0      	b.n	8001dc6 <HAL_ADC_IRQHandler+0x5a>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002024:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002026:	f043 0310 	orr.w	r3, r3, #16
 800202a:	6423      	str	r3, [r4, #64]	@ 0x40
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800202c:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800202e:	f043 0301 	orr.w	r3, r3, #1
 8002032:	6463      	str	r3, [r4, #68]	@ 0x44
 8002034:	e6e3      	b.n	8001dfe <HAL_ADC_IRQHandler+0x92>
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8002036:	4a3d      	ldr	r2, [pc, #244]	@ (800212c <HAL_ADC_IRQHandler+0x3c0>)
 8002038:	6892      	ldr	r2, [r2, #8]
 800203a:	06d0      	lsls	r0, r2, #27
 800203c:	f43f af0a 	beq.w	8001e54 <HAL_ADC_IRQHandler+0xe8>
 8002040:	4a3a      	ldr	r2, [pc, #232]	@ (800212c <HAL_ADC_IRQHandler+0x3c0>)
 8002042:	6892      	ldr	r2, [r2, #8]
 8002044:	f002 021f 	and.w	r2, r2, #31
 8002048:	2a05      	cmp	r2, #5
 800204a:	f43f af03 	beq.w	8001e54 <HAL_ADC_IRQHandler+0xe8>
 800204e:	4a37      	ldr	r2, [pc, #220]	@ (800212c <HAL_ADC_IRQHandler+0x3c0>)
 8002050:	6892      	ldr	r2, [r2, #8]
 8002052:	f002 021f 	and.w	r2, r2, #31
 8002056:	2a09      	cmp	r2, #9
 8002058:	f43f aefc 	beq.w	8001e54 <HAL_ADC_IRQHandler+0xe8>
 800205c:	4a32      	ldr	r2, [pc, #200]	@ (8002128 <HAL_ADC_IRQHandler+0x3bc>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d11a      	bne.n	8002098 <HAL_ADC_IRQHandler+0x32c>
 8002062:	e6f7      	b.n	8001e54 <HAL_ADC_IRQHandler+0xe8>
 8002064:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002068:	d002      	beq.n	8002070 <HAL_ADC_IRQHandler+0x304>
 800206a:	4a2d      	ldr	r2, [pc, #180]	@ (8002120 <HAL_ADC_IRQHandler+0x3b4>)
 800206c:	4293      	cmp	r3, r2
 800206e:	d1ee      	bne.n	800204e <HAL_ADC_IRQHandler+0x2e2>
 8002070:	4a2c      	ldr	r2, [pc, #176]	@ (8002124 <HAL_ADC_IRQHandler+0x3b8>)
 8002072:	6892      	ldr	r2, [r2, #8]
 8002074:	f002 021f 	and.w	r2, r2, #31
 8002078:	2a09      	cmp	r2, #9
 800207a:	f43f aeeb 	beq.w	8001e54 <HAL_ADC_IRQHandler+0xe8>
 800207e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002082:	f43f aee7 	beq.w	8001e54 <HAL_ADC_IRQHandler+0xe8>
 8002086:	4a28      	ldr	r2, [pc, #160]	@ (8002128 <HAL_ADC_IRQHandler+0x3bc>)
 8002088:	4293      	cmp	r3, r2
 800208a:	f43f aee3 	beq.w	8001e54 <HAL_ADC_IRQHandler+0xe8>
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 800208e:	4924      	ldr	r1, [pc, #144]	@ (8002120 <HAL_ADC_IRQHandler+0x3b4>)
 8002090:	428b      	cmp	r3, r1
 8002092:	bf08      	it	eq
 8002094:	f04f 42a0 	moveq.w	r2, #1342177280	@ 0x50000000
 8002098:	68d2      	ldr	r2, [r2, #12]
 800209a:	e6dc      	b.n	8001e56 <HAL_ADC_IRQHandler+0xea>
          if (ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc))
 800209c:	4a23      	ldr	r2, [pc, #140]	@ (800212c <HAL_ADC_IRQHandler+0x3c0>)
 800209e:	6892      	ldr	r2, [r2, #8]
 80020a0:	06d0      	lsls	r0, r2, #27
 80020a2:	f43f aeff 	beq.w	8001ea4 <HAL_ADC_IRQHandler+0x138>
 80020a6:	4a21      	ldr	r2, [pc, #132]	@ (800212c <HAL_ADC_IRQHandler+0x3c0>)
 80020a8:	6892      	ldr	r2, [r2, #8]
 80020aa:	f002 021f 	and.w	r2, r2, #31
 80020ae:	2a06      	cmp	r2, #6
 80020b0:	f43f aef8 	beq.w	8001ea4 <HAL_ADC_IRQHandler+0x138>
 80020b4:	4a1d      	ldr	r2, [pc, #116]	@ (800212c <HAL_ADC_IRQHandler+0x3c0>)
 80020b6:	6892      	ldr	r2, [r2, #8]
 80020b8:	f002 021f 	and.w	r2, r2, #31
 80020bc:	2a07      	cmp	r2, #7
 80020be:	f43f aef1 	beq.w	8001ea4 <HAL_ADC_IRQHandler+0x138>
 80020c2:	4a19      	ldr	r2, [pc, #100]	@ (8002128 <HAL_ADC_IRQHandler+0x3bc>)
 80020c4:	4293      	cmp	r3, r2
 80020c6:	d11a      	bne.n	80020fe <HAL_ADC_IRQHandler+0x392>
 80020c8:	e6ec      	b.n	8001ea4 <HAL_ADC_IRQHandler+0x138>
 80020ca:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80020ce:	d002      	beq.n	80020d6 <HAL_ADC_IRQHandler+0x36a>
 80020d0:	4a13      	ldr	r2, [pc, #76]	@ (8002120 <HAL_ADC_IRQHandler+0x3b4>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d1ee      	bne.n	80020b4 <HAL_ADC_IRQHandler+0x348>
 80020d6:	4a13      	ldr	r2, [pc, #76]	@ (8002124 <HAL_ADC_IRQHandler+0x3b8>)
 80020d8:	6892      	ldr	r2, [r2, #8]
 80020da:	f002 021f 	and.w	r2, r2, #31
 80020de:	2a07      	cmp	r2, #7
 80020e0:	f43f aee0 	beq.w	8001ea4 <HAL_ADC_IRQHandler+0x138>
 80020e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80020e8:	f43f aedc 	beq.w	8001ea4 <HAL_ADC_IRQHandler+0x138>
 80020ec:	4a0e      	ldr	r2, [pc, #56]	@ (8002128 <HAL_ADC_IRQHandler+0x3bc>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	f43f aed8 	beq.w	8001ea4 <HAL_ADC_IRQHandler+0x138>
            tmp_cfgr_jqm = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 80020f4:	490a      	ldr	r1, [pc, #40]	@ (8002120 <HAL_ADC_IRQHandler+0x3b4>)
 80020f6:	428b      	cmp	r3, r1
 80020f8:	bf08      	it	eq
 80020fa:	f04f 42a0 	moveq.w	r2, #1342177280	@ 0x50000000
 80020fe:	68d2      	ldr	r2, [r2, #12]
 8002100:	e6d1      	b.n	8001ea6 <HAL_ADC_IRQHandler+0x13a>
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002102:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002104:	f043 0310 	orr.w	r3, r3, #16
 8002108:	6423      	str	r3, [r4, #64]	@ 0x40
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800210a:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800210c:	f043 0301 	orr.w	r3, r3, #1
 8002110:	6463      	str	r3, [r4, #68]	@ 0x44
 8002112:	e6dd      	b.n	8001ed0 <HAL_ADC_IRQHandler+0x164>
      tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002114:	4b03      	ldr	r3, [pc, #12]	@ (8002124 <HAL_ADC_IRQHandler+0x3b8>)
 8002116:	e71f      	b.n	8001f58 <HAL_ADC_IRQHandler+0x1ec>
        if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 8002118:	689b      	ldr	r3, [r3, #8]
 800211a:	f413 4f40 	tst.w	r3, #49152	@ 0xc000
 800211e:	e722      	b.n	8001f66 <HAL_ADC_IRQHandler+0x1fa>
 8002120:	50000100 	.word	0x50000100
 8002124:	50000300 	.word	0x50000300
 8002128:	50000400 	.word	0x50000400
 800212c:	50000700 	.word	0x50000700

08002130 <HAL_ADC_ConfigChannel>:
{
 8002130:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002132:	4605      	mov	r5, r0
  __IO uint32_t wait_loop_index = 0U;
 8002134:	2300      	movs	r3, #0
 8002136:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8002138:	f895 303c 	ldrb.w	r3, [r5, #60]	@ 0x3c
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 800213c:	68c8      	ldr	r0, [r1, #12]
  __HAL_LOCK(hadc);
 800213e:	2b01      	cmp	r3, #1
 8002140:	f000 816a 	beq.w	8002418 <HAL_ADC_ConfigChannel+0x2e8>
 8002144:	2301      	movs	r3, #1
 8002146:	f885 303c 	strb.w	r3, [r5, #60]	@ 0x3c
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800214a:	682b      	ldr	r3, [r5, #0]
 800214c:	689a      	ldr	r2, [r3, #8]
 800214e:	0757      	lsls	r7, r2, #29
 8002150:	f100 815c 	bmi.w	800240c <HAL_ADC_ConfigChannel+0x2dc>
    if (sConfig->Rank < 5U)
 8002154:	684e      	ldr	r6, [r1, #4]
      MODIFY_REG(hadc->Instance->SQR1,
 8002156:	680c      	ldr	r4, [r1, #0]
 8002158:	2206      	movs	r2, #6
    if (sConfig->Rank < 5U)
 800215a:	2e04      	cmp	r6, #4
      MODIFY_REG(hadc->Instance->SQR1,
 800215c:	fb06 f202 	mul.w	r2, r6, r2
    if (sConfig->Rank < 5U)
 8002160:	d82c      	bhi.n	80021bc <HAL_ADC_ConfigChannel+0x8c>
      MODIFY_REG(hadc->Instance->SQR1,
 8002162:	6b1e      	ldr	r6, [r3, #48]	@ 0x30
 8002164:	271f      	movs	r7, #31
 8002166:	4097      	lsls	r7, r2
 8002168:	ea26 0607 	bic.w	r6, r6, r7
 800216c:	fa04 f202 	lsl.w	r2, r4, r2
 8002170:	4332      	orrs	r2, r6
 8002172:	631a      	str	r2, [r3, #48]	@ 0x30
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002174:	689a      	ldr	r2, [r3, #8]
 8002176:	f012 0f0c 	tst.w	r2, #12
 800217a:	d158      	bne.n	800222e <HAL_ADC_ConfigChannel+0xfe>
    if (sConfig->Channel >= ADC_CHANNEL_10)
 800217c:	2c09      	cmp	r4, #9
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 800217e:	f8d1 c008 	ldr.w	ip, [r1, #8]
 8002182:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 8002186:	f04f 0607 	mov.w	r6, #7
    if (sConfig->Channel >= ADC_CHANNEL_10)
 800218a:	d93c      	bls.n	8002206 <HAL_ADC_ConfigChannel+0xd6>
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 800218c:	699f      	ldr	r7, [r3, #24]
 800218e:	3a1e      	subs	r2, #30
 8002190:	4096      	lsls	r6, r2
 8002192:	ea27 0606 	bic.w	r6, r7, r6
 8002196:	fa0c f202 	lsl.w	r2, ip, r2
 800219a:	4332      	orrs	r2, r6
 800219c:	619a      	str	r2, [r3, #24]
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 800219e:	68da      	ldr	r2, [r3, #12]
 80021a0:	694e      	ldr	r6, [r1, #20]
 80021a2:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 80021a6:	0052      	lsls	r2, r2, #1
 80021a8:	4096      	lsls	r6, r2
    switch (sConfig->OffsetNumber)
 80021aa:	690a      	ldr	r2, [r1, #16]
 80021ac:	3a01      	subs	r2, #1
      MODIFY_REG(hadc->Instance->OFR1               ,
 80021ae:	06a7      	lsls	r7, r4, #26
    switch (sConfig->OffsetNumber)
 80021b0:	2a03      	cmp	r2, #3
 80021b2:	d86b      	bhi.n	800228c <HAL_ADC_ConfigChannel+0x15c>
 80021b4:	e8df f002 	tbb	[pc, r2]
 80021b8:	5f544931 	.word	0x5f544931
    else if (sConfig->Rank < 10U)
 80021bc:	2e09      	cmp	r6, #9
 80021be:	d80a      	bhi.n	80021d6 <HAL_ADC_ConfigChannel+0xa6>
      MODIFY_REG(hadc->Instance->SQR2,
 80021c0:	6b5e      	ldr	r6, [r3, #52]	@ 0x34
 80021c2:	3a1e      	subs	r2, #30
 80021c4:	271f      	movs	r7, #31
 80021c6:	4097      	lsls	r7, r2
 80021c8:	ea26 0607 	bic.w	r6, r6, r7
 80021cc:	fa04 f202 	lsl.w	r2, r4, r2
 80021d0:	4332      	orrs	r2, r6
 80021d2:	635a      	str	r2, [r3, #52]	@ 0x34
 80021d4:	e7ce      	b.n	8002174 <HAL_ADC_ConfigChannel+0x44>
    else if (sConfig->Rank < 15U)
 80021d6:	2e0e      	cmp	r6, #14
 80021d8:	f04f 061f 	mov.w	r6, #31
 80021dc:	d809      	bhi.n	80021f2 <HAL_ADC_ConfigChannel+0xc2>
      MODIFY_REG(hadc->Instance->SQR3                        ,
 80021de:	6b9f      	ldr	r7, [r3, #56]	@ 0x38
 80021e0:	3a3c      	subs	r2, #60	@ 0x3c
 80021e2:	4096      	lsls	r6, r2
 80021e4:	ea27 0606 	bic.w	r6, r7, r6
 80021e8:	fa04 f202 	lsl.w	r2, r4, r2
 80021ec:	4332      	orrs	r2, r6
 80021ee:	639a      	str	r2, [r3, #56]	@ 0x38
 80021f0:	e7c0      	b.n	8002174 <HAL_ADC_ConfigChannel+0x44>
      MODIFY_REG(hadc->Instance->SQR4                        ,
 80021f2:	6bdf      	ldr	r7, [r3, #60]	@ 0x3c
 80021f4:	3a5a      	subs	r2, #90	@ 0x5a
 80021f6:	4096      	lsls	r6, r2
 80021f8:	ea27 0606 	bic.w	r6, r7, r6
 80021fc:	fa04 f202 	lsl.w	r2, r4, r2
 8002200:	4332      	orrs	r2, r6
 8002202:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002204:	e7b6      	b.n	8002174 <HAL_ADC_ConfigChannel+0x44>
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002206:	695f      	ldr	r7, [r3, #20]
 8002208:	4096      	lsls	r6, r2
 800220a:	ea27 0606 	bic.w	r6, r7, r6
 800220e:	fa0c fc02 	lsl.w	ip, ip, r2
 8002212:	ea46 060c 	orr.w	r6, r6, ip
 8002216:	615e      	str	r6, [r3, #20]
 8002218:	e7c1      	b.n	800219e <HAL_ADC_ConfigChannel+0x6e>
      MODIFY_REG(hadc->Instance->OFR1               ,
 800221a:	f8d3 c060 	ldr.w	ip, [r3, #96]	@ 0x60
 800221e:	4a7f      	ldr	r2, [pc, #508]	@ (800241c <HAL_ADC_ConfigChannel+0x2ec>)
 8002220:	ea0c 0202 	and.w	r2, ip, r2
 8002224:	433a      	orrs	r2, r7
 8002226:	4332      	orrs	r2, r6
 8002228:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800222c:	661a      	str	r2, [r3, #96]	@ 0x60
  if (ADC_IS_ENABLE(hadc) == RESET)
 800222e:	689a      	ldr	r2, [r3, #8]
 8002230:	f002 0203 	and.w	r2, r2, #3
 8002234:	2a01      	cmp	r2, #1
 8002236:	d14d      	bne.n	80022d4 <HAL_ADC_ConfigChannel+0x1a4>
 8002238:	681a      	ldr	r2, [r3, #0]
 800223a:	07d6      	lsls	r6, r2, #31
 800223c:	d54a      	bpl.n	80022d4 <HAL_ADC_ConfigChannel+0x1a4>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800223e:	2000      	movs	r0, #0
  __HAL_UNLOCK(hadc);
 8002240:	2300      	movs	r3, #0
 8002242:	f885 303c 	strb.w	r3, [r5, #60]	@ 0x3c
}
 8002246:	b003      	add	sp, #12
 8002248:	bdf0      	pop	{r4, r5, r6, r7, pc}
      MODIFY_REG(hadc->Instance->OFR2               ,
 800224a:	f8d3 c064 	ldr.w	ip, [r3, #100]	@ 0x64
 800224e:	4a73      	ldr	r2, [pc, #460]	@ (800241c <HAL_ADC_ConfigChannel+0x2ec>)
 8002250:	ea0c 0202 	and.w	r2, ip, r2
 8002254:	433a      	orrs	r2, r7
 8002256:	4332      	orrs	r2, r6
 8002258:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800225c:	665a      	str	r2, [r3, #100]	@ 0x64
      break;
 800225e:	e7e6      	b.n	800222e <HAL_ADC_ConfigChannel+0xfe>
      MODIFY_REG(hadc->Instance->OFR3               ,
 8002260:	f8d3 c068 	ldr.w	ip, [r3, #104]	@ 0x68
 8002264:	4a6d      	ldr	r2, [pc, #436]	@ (800241c <HAL_ADC_ConfigChannel+0x2ec>)
 8002266:	ea0c 0202 	and.w	r2, ip, r2
 800226a:	433a      	orrs	r2, r7
 800226c:	4332      	orrs	r2, r6
 800226e:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8002272:	669a      	str	r2, [r3, #104]	@ 0x68
      break;
 8002274:	e7db      	b.n	800222e <HAL_ADC_ConfigChannel+0xfe>
      MODIFY_REG(hadc->Instance->OFR4               ,
 8002276:	f8d3 c06c 	ldr.w	ip, [r3, #108]	@ 0x6c
 800227a:	4a68      	ldr	r2, [pc, #416]	@ (800241c <HAL_ADC_ConfigChannel+0x2ec>)
 800227c:	ea0c 0202 	and.w	r2, ip, r2
 8002280:	433a      	orrs	r2, r7
 8002282:	4332      	orrs	r2, r6
 8002284:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8002288:	66da      	str	r2, [r3, #108]	@ 0x6c
 800228a:	e7d0      	b.n	800222e <HAL_ADC_ConfigChannel+0xfe>
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800228c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800228e:	f002 42f8 	and.w	r2, r2, #2080374784	@ 0x7c000000
 8002292:	42ba      	cmp	r2, r7
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8002294:	bf02      	ittt	eq
 8002296:	6e1a      	ldreq	r2, [r3, #96]	@ 0x60
 8002298:	f022 4200 	biceq.w	r2, r2, #2147483648	@ 0x80000000
 800229c:	661a      	streq	r2, [r3, #96]	@ 0x60
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800229e:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80022a0:	f002 42f8 	and.w	r2, r2, #2080374784	@ 0x7c000000
 80022a4:	42ba      	cmp	r2, r7
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 80022a6:	bf02      	ittt	eq
 80022a8:	6e5a      	ldreq	r2, [r3, #100]	@ 0x64
 80022aa:	f022 4200 	biceq.w	r2, r2, #2147483648	@ 0x80000000
 80022ae:	665a      	streq	r2, [r3, #100]	@ 0x64
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80022b0:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80022b2:	f002 42f8 	and.w	r2, r2, #2080374784	@ 0x7c000000
 80022b6:	42ba      	cmp	r2, r7
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 80022b8:	bf02      	ittt	eq
 80022ba:	6e9a      	ldreq	r2, [r3, #104]	@ 0x68
 80022bc:	f022 4200 	biceq.w	r2, r2, #2147483648	@ 0x80000000
 80022c0:	669a      	streq	r2, [r3, #104]	@ 0x68
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80022c2:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80022c4:	f002 42f8 	and.w	r2, r2, #2080374784	@ 0x7c000000
 80022c8:	42ba      	cmp	r2, r7
 80022ca:	d1b0      	bne.n	800222e <HAL_ADC_ConfigChannel+0xfe>
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 80022cc:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80022ce:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80022d2:	e7d9      	b.n	8002288 <HAL_ADC_ConfigChannel+0x158>
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80022d4:	2201      	movs	r2, #1
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80022d6:	2801      	cmp	r0, #1
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80022d8:	fa02 f204 	lsl.w	r2, r2, r4
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80022dc:	d047      	beq.n	800236e <HAL_ADC_ConfigChannel+0x23e>
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80022de:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 80022e2:	ea21 0202 	bic.w	r2, r1, r2
 80022e6:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80022ea:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80022ee:	d164      	bne.n	80023ba <HAL_ADC_ConfigChannel+0x28a>
 80022f0:	494b      	ldr	r1, [pc, #300]	@ (8002420 <HAL_ADC_ConfigChannel+0x2f0>)
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80022f2:	2c10      	cmp	r4, #16
 80022f4:	d166      	bne.n	80023c4 <HAL_ADC_ConfigChannel+0x294>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80022f6:	688a      	ldr	r2, [r1, #8]
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80022f8:	f412 0f00 	tst.w	r2, #8388608	@ 0x800000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80022fc:	d19f      	bne.n	800223e <HAL_ADC_ConfigChannel+0x10e>
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80022fe:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002302:	4a48      	ldr	r2, [pc, #288]	@ (8002424 <HAL_ADC_ConfigChannel+0x2f4>)
 8002304:	d009      	beq.n	800231a <HAL_ADC_ConfigChannel+0x1ea>
 8002306:	4293      	cmp	r3, r2
 8002308:	d069      	beq.n	80023de <HAL_ADC_ConfigChannel+0x2ae>
 800230a:	f502 7240 	add.w	r2, r2, #768	@ 0x300
 800230e:	4293      	cmp	r3, r2
 8002310:	4845      	ldr	r0, [pc, #276]	@ (8002428 <HAL_ADC_ConfigChannel+0x2f8>)
 8002312:	d067      	beq.n	80023e4 <HAL_ADC_ConfigChannel+0x2b4>
 8002314:	4283      	cmp	r3, r0
 8002316:	bf18      	it	ne
 8002318:	2200      	movne	r2, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800231a:	6898      	ldr	r0, [r3, #8]
 800231c:	f000 0003 	and.w	r0, r0, #3
 8002320:	2801      	cmp	r0, #1
 8002322:	d102      	bne.n	800232a <HAL_ADC_ConfigChannel+0x1fa>
 8002324:	6818      	ldr	r0, [r3, #0]
 8002326:	07c0      	lsls	r0, r0, #31
 8002328:	d470      	bmi.n	800240c <HAL_ADC_ConfigChannel+0x2dc>
 800232a:	b13a      	cbz	r2, 800233c <HAL_ADC_ConfigChannel+0x20c>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800232c:	6890      	ldr	r0, [r2, #8]
 800232e:	f000 0003 	and.w	r0, r0, #3
 8002332:	2801      	cmp	r0, #1
 8002334:	d102      	bne.n	800233c <HAL_ADC_ConfigChannel+0x20c>
 8002336:	6812      	ldr	r2, [r2, #0]
 8002338:	07d2      	lsls	r2, r2, #31
 800233a:	d467      	bmi.n	800240c <HAL_ADC_ConfigChannel+0x2dc>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800233c:	2c10      	cmp	r4, #16
 800233e:	d153      	bne.n	80023e8 <HAL_ADC_ConfigChannel+0x2b8>
 8002340:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002344:	f47f af7b 	bne.w	800223e <HAL_ADC_ConfigChannel+0x10e>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8002348:	688b      	ldr	r3, [r1, #8]
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800234a:	4a38      	ldr	r2, [pc, #224]	@ (800242c <HAL_ADC_ConfigChannel+0x2fc>)
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 800234c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002350:	608b      	str	r3, [r1, #8]
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002352:	4b37      	ldr	r3, [pc, #220]	@ (8002430 <HAL_ADC_ConfigChannel+0x300>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	fbb3 f3f2 	udiv	r3, r3, r2
 800235a:	220a      	movs	r2, #10
 800235c:	4353      	muls	r3, r2
            wait_loop_index--;
 800235e:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 8002360:	9b01      	ldr	r3, [sp, #4]
 8002362:	2b00      	cmp	r3, #0
 8002364:	f43f af6b 	beq.w	800223e <HAL_ADC_ConfigChannel+0x10e>
            wait_loop_index--;
 8002368:	9b01      	ldr	r3, [sp, #4]
 800236a:	3b01      	subs	r3, #1
 800236c:	e7f7      	b.n	800235e <HAL_ADC_ConfigChannel+0x22e>
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800236e:	f8d3 00b0 	ldr.w	r0, [r3, #176]	@ 0xb0
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8002372:	2c09      	cmp	r4, #9
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002374:	ea42 0200 	orr.w	r2, r2, r0
 8002378:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 800237c:	6888      	ldr	r0, [r1, #8]
      if (sConfig->Channel >= ADC_CHANNEL_10)
 800237e:	d90c      	bls.n	800239a <HAL_ADC_ConfigChannel+0x26a>
        MODIFY_REG(hadc->Instance->SMPR2,
 8002380:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 8002384:	6999      	ldr	r1, [r3, #24]
 8002386:	3a1b      	subs	r2, #27
 8002388:	2607      	movs	r6, #7
 800238a:	4096      	lsls	r6, r2
 800238c:	ea21 0106 	bic.w	r1, r1, r6
 8002390:	fa00 f202 	lsl.w	r2, r0, r2
 8002394:	430a      	orrs	r2, r1
 8002396:	619a      	str	r2, [r3, #24]
 8002398:	e7a7      	b.n	80022ea <HAL_ADC_ConfigChannel+0x1ba>
        MODIFY_REG(hadc->Instance->SMPR1,
 800239a:	1c61      	adds	r1, r4, #1
 800239c:	695a      	ldr	r2, [r3, #20]
 800239e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80023a2:	2607      	movs	r6, #7
 80023a4:	408e      	lsls	r6, r1
 80023a6:	ea22 0206 	bic.w	r2, r2, r6
 80023aa:	fa00 f101 	lsl.w	r1, r0, r1
 80023ae:	430a      	orrs	r2, r1
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80023b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
        MODIFY_REG(hadc->Instance->SMPR1,
 80023b4:	615a      	str	r2, [r3, #20]
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80023b6:	f43f af42 	beq.w	800223e <HAL_ADC_ConfigChannel+0x10e>
 80023ba:	4a1a      	ldr	r2, [pc, #104]	@ (8002424 <HAL_ADC_ConfigChannel+0x2f4>)
 80023bc:	4293      	cmp	r3, r2
 80023be:	d097      	beq.n	80022f0 <HAL_ADC_ConfigChannel+0x1c0>
 80023c0:	491c      	ldr	r1, [pc, #112]	@ (8002434 <HAL_ADC_ConfigChannel+0x304>)
 80023c2:	e796      	b.n	80022f2 <HAL_ADC_ConfigChannel+0x1c2>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80023c4:	2c11      	cmp	r4, #17
 80023c6:	d103      	bne.n	80023d0 <HAL_ADC_ConfigChannel+0x2a0>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80023c8:	688a      	ldr	r2, [r1, #8]
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80023ca:	f012 7f80 	tst.w	r2, #16777216	@ 0x1000000
 80023ce:	e795      	b.n	80022fc <HAL_ADC_ConfigChannel+0x1cc>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80023d0:	2c12      	cmp	r4, #18
 80023d2:	f47f af34 	bne.w	800223e <HAL_ADC_ConfigChannel+0x10e>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 80023d6:	688a      	ldr	r2, [r1, #8]
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80023d8:	f412 0f80 	tst.w	r2, #4194304	@ 0x400000
 80023dc:	e78e      	b.n	80022fc <HAL_ADC_ConfigChannel+0x1cc>
 80023de:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80023e2:	e79a      	b.n	800231a <HAL_ADC_ConfigChannel+0x1ea>
 80023e4:	4602      	mov	r2, r0
 80023e6:	e798      	b.n	800231a <HAL_ADC_ConfigChannel+0x1ea>
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 80023e8:	2c11      	cmp	r4, #17
 80023ea:	d108      	bne.n	80023fe <HAL_ADC_ConfigChannel+0x2ce>
 80023ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80023f0:	f47f af25 	bne.w	800223e <HAL_ADC_ConfigChannel+0x10e>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 80023f4:	688b      	ldr	r3, [r1, #8]
 80023f6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 80023fa:	608b      	str	r3, [r1, #8]
 80023fc:	e71f      	b.n	800223e <HAL_ADC_ConfigChannel+0x10e>
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 80023fe:	2c12      	cmp	r4, #18
 8002400:	f47f af1d 	bne.w	800223e <HAL_ADC_ConfigChannel+0x10e>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8002404:	688b      	ldr	r3, [r1, #8]
 8002406:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800240a:	e7f6      	b.n	80023fa <HAL_ADC_ConfigChannel+0x2ca>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800240c:	6c2b      	ldr	r3, [r5, #64]	@ 0x40
 800240e:	f043 0320 	orr.w	r3, r3, #32
 8002412:	642b      	str	r3, [r5, #64]	@ 0x40
    tmp_hal_status = HAL_ERROR;
 8002414:	2001      	movs	r0, #1
 8002416:	e713      	b.n	8002240 <HAL_ADC_ConfigChannel+0x110>
  __HAL_LOCK(hadc);
 8002418:	2002      	movs	r0, #2
 800241a:	e714      	b.n	8002246 <HAL_ADC_ConfigChannel+0x116>
 800241c:	83fff000 	.word	0x83fff000
 8002420:	50000300 	.word	0x50000300
 8002424:	50000100 	.word	0x50000100
 8002428:	50000500 	.word	0x50000500
 800242c:	000f4240 	.word	0x000f4240
 8002430:	20000000 	.word	0x20000000
 8002434:	50000700 	.word	0x50000700

08002438 <HAL_ADCEx_MultiModeConfigChannel>:
{
 8002438:	b5f0      	push	{r4, r5, r6, r7, lr}
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800243a:	6804      	ldr	r4, [r0, #0]
 800243c:	4b3c      	ldr	r3, [pc, #240]	@ (8002530 <HAL_ADCEx_MultiModeConfigChannel+0xf8>)
 800243e:	f1b4 4fa0 	cmp.w	r4, #1342177280	@ 0x50000000
{
 8002442:	4605      	mov	r5, r0
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002444:	d009      	beq.n	800245a <HAL_ADCEx_MultiModeConfigChannel+0x22>
 8002446:	429c      	cmp	r4, r3
 8002448:	d047      	beq.n	80024da <HAL_ADCEx_MultiModeConfigChannel+0xa2>
 800244a:	4a3a      	ldr	r2, [pc, #232]	@ (8002534 <HAL_ADCEx_MultiModeConfigChannel+0xfc>)
 800244c:	4294      	cmp	r4, r2
 800244e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002452:	d002      	beq.n	800245a <HAL_ADCEx_MultiModeConfigChannel+0x22>
 8002454:	429c      	cmp	r4, r3
 8002456:	d166      	bne.n	8002526 <HAL_ADCEx_MultiModeConfigChannel+0xee>
 8002458:	4613      	mov	r3, r2
  __HAL_LOCK(hadc);
 800245a:	f895 203c 	ldrb.w	r2, [r5, #60]	@ 0x3c
 800245e:	2a01      	cmp	r2, #1
 8002460:	d063      	beq.n	800252a <HAL_ADCEx_MultiModeConfigChannel+0xf2>
 8002462:	2201      	movs	r2, #1
  if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002464:	6808      	ldr	r0, [r1, #0]
  __HAL_LOCK(hadc);
 8002466:	f885 203c 	strb.w	r2, [r5, #60]	@ 0x3c
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 800246a:	68a2      	ldr	r2, [r4, #8]
 800246c:	0752      	lsls	r2, r2, #29
 800246e:	d454      	bmi.n	800251a <HAL_ADCEx_MultiModeConfigChannel+0xe2>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8002470:	689a      	ldr	r2, [r3, #8]
 8002472:	0757      	lsls	r7, r2, #29
 8002474:	d451      	bmi.n	800251a <HAL_ADCEx_MultiModeConfigChannel+0xe2>
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002476:	f1b4 4fa0 	cmp.w	r4, #1342177280	@ 0x50000000
 800247a:	d031      	beq.n	80024e0 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800247c:	4f2c      	ldr	r7, [pc, #176]	@ (8002530 <HAL_ADCEx_MultiModeConfigChannel+0xf8>)
 800247e:	4a2e      	ldr	r2, [pc, #184]	@ (8002538 <HAL_ADCEx_MultiModeConfigChannel+0x100>)
 8002480:	4e2e      	ldr	r6, [pc, #184]	@ (800253c <HAL_ADCEx_MultiModeConfigChannel+0x104>)
 8002482:	42bc      	cmp	r4, r7
 8002484:	bf08      	it	eq
 8002486:	4632      	moveq	r2, r6
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002488:	b360      	cbz	r0, 80024e4 <HAL_ADCEx_MultiModeConfigChannel+0xac>
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 800248a:	6897      	ldr	r7, [r2, #8]
 800248c:	f895 c030 	ldrb.w	ip, [r5, #48]	@ 0x30
 8002490:	684e      	ldr	r6, [r1, #4]
 8002492:	f427 4760 	bic.w	r7, r7, #57344	@ 0xe000
 8002496:	ea46 364c 	orr.w	r6, r6, ip, lsl #13
 800249a:	433e      	orrs	r6, r7
 800249c:	6096      	str	r6, [r2, #8]
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800249e:	68a6      	ldr	r6, [r4, #8]
 80024a0:	f006 0603 	and.w	r6, r6, #3
 80024a4:	2e01      	cmp	r6, #1
 80024a6:	d102      	bne.n	80024ae <HAL_ADCEx_MultiModeConfigChannel+0x76>
 80024a8:	6824      	ldr	r4, [r4, #0]
 80024aa:	07e6      	lsls	r6, r4, #31
 80024ac:	d410      	bmi.n	80024d0 <HAL_ADCEx_MultiModeConfigChannel+0x98>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80024ae:	689c      	ldr	r4, [r3, #8]
 80024b0:	f004 0403 	and.w	r4, r4, #3
 80024b4:	2c01      	cmp	r4, #1
 80024b6:	d102      	bne.n	80024be <HAL_ADCEx_MultiModeConfigChannel+0x86>
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	07dc      	lsls	r4, r3, #31
 80024bc:	d408      	bmi.n	80024d0 <HAL_ADCEx_MultiModeConfigChannel+0x98>
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 80024be:	6893      	ldr	r3, [r2, #8]
 80024c0:	6889      	ldr	r1, [r1, #8]
 80024c2:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80024c6:	4308      	orrs	r0, r1
 80024c8:	f023 030f 	bic.w	r3, r3, #15
 80024cc:	4318      	orrs	r0, r3
 80024ce:	6090      	str	r0, [r2, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80024d0:	2000      	movs	r0, #0
  __HAL_UNLOCK(hadc);
 80024d2:	2300      	movs	r3, #0
 80024d4:	f885 303c 	strb.w	r3, [r5, #60]	@ 0x3c
} 
 80024d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80024da:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80024de:	e7bc      	b.n	800245a <HAL_ADCEx_MultiModeConfigChannel+0x22>
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80024e0:	4a16      	ldr	r2, [pc, #88]	@ (800253c <HAL_ADCEx_MultiModeConfigChannel+0x104>)
 80024e2:	e7d1      	b.n	8002488 <HAL_ADCEx_MultiModeConfigChannel+0x50>
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80024e4:	6891      	ldr	r1, [r2, #8]
 80024e6:	f421 4160 	bic.w	r1, r1, #57344	@ 0xe000
 80024ea:	6091      	str	r1, [r2, #8]
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80024ec:	68a1      	ldr	r1, [r4, #8]
 80024ee:	f001 0103 	and.w	r1, r1, #3
 80024f2:	2901      	cmp	r1, #1
 80024f4:	d102      	bne.n	80024fc <HAL_ADCEx_MultiModeConfigChannel+0xc4>
 80024f6:	6821      	ldr	r1, [r4, #0]
 80024f8:	07c9      	lsls	r1, r1, #31
 80024fa:	d4e9      	bmi.n	80024d0 <HAL_ADCEx_MultiModeConfigChannel+0x98>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80024fc:	6899      	ldr	r1, [r3, #8]
 80024fe:	f001 0103 	and.w	r1, r1, #3
 8002502:	2901      	cmp	r1, #1
 8002504:	d102      	bne.n	800250c <HAL_ADCEx_MultiModeConfigChannel+0xd4>
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	07db      	lsls	r3, r3, #31
 800250a:	d4e1      	bmi.n	80024d0 <HAL_ADCEx_MultiModeConfigChannel+0x98>
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 800250c:	6893      	ldr	r3, [r2, #8]
 800250e:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002512:	f023 030f 	bic.w	r3, r3, #15
 8002516:	6093      	str	r3, [r2, #8]
 8002518:	e7da      	b.n	80024d0 <HAL_ADCEx_MultiModeConfigChannel+0x98>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800251a:	6c2b      	ldr	r3, [r5, #64]	@ 0x40
 800251c:	f043 0320 	orr.w	r3, r3, #32
 8002520:	642b      	str	r3, [r5, #64]	@ 0x40
    tmp_hal_status = HAL_ERROR;
 8002522:	2001      	movs	r0, #1
 8002524:	e7d5      	b.n	80024d2 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
    return HAL_ERROR;
 8002526:	2001      	movs	r0, #1
 8002528:	e7d6      	b.n	80024d8 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
  __HAL_LOCK(hadc);
 800252a:	2002      	movs	r0, #2
 800252c:	e7d4      	b.n	80024d8 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 800252e:	bf00      	nop
 8002530:	50000100 	.word	0x50000100
 8002534:	50000400 	.word	0x50000400
 8002538:	50000700 	.word	0x50000700
 800253c:	50000300 	.word	0x50000300

08002540 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002540:	4907      	ldr	r1, [pc, #28]	@ (8002560 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8002542:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002544:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002548:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800254a:	0412      	lsls	r2, r2, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800254c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002550:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002552:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002554:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002558:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 800255c:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800255e:	4770      	bx	lr
 8002560:	e000ed00 	.word	0xe000ed00

08002564 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002564:	4b16      	ldr	r3, [pc, #88]	@ (80025c0 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002566:	b530      	push	{r4, r5, lr}
 8002568:	68dc      	ldr	r4, [r3, #12]
 800256a:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800256e:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002572:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002574:	2b04      	cmp	r3, #4
 8002576:	bf28      	it	cs
 8002578:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800257a:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800257c:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002580:	bf8c      	ite	hi
 8002582:	3c03      	subhi	r4, #3
 8002584:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002586:	fa05 f303 	lsl.w	r3, r5, r3
 800258a:	ea21 0303 	bic.w	r3, r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800258e:	40a5      	lsls	r5, r4
 8002590:	ea22 0205 	bic.w	r2, r2, r5
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002594:	40a3      	lsls	r3, r4
  if ((int32_t)(IRQn) >= 0)
 8002596:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002598:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800259c:	bfac      	ite	ge
 800259e:	f100 4060 	addge.w	r0, r0, #3758096384	@ 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025a2:	4a08      	ldrlt	r2, [pc, #32]	@ (80025c4 <HAL_NVIC_SetPriority+0x60>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025a4:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025a8:	bfb8      	it	lt
 80025aa:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025ae:	b2db      	uxtb	r3, r3
 80025b0:	bfaa      	itet	ge
 80025b2:	f500 4061 	addge.w	r0, r0, #57600	@ 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025b6:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025b8:	f880 3300 	strbge.w	r3, [r0, #768]	@ 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80025bc:	bd30      	pop	{r4, r5, pc}
 80025be:	bf00      	nop
 80025c0:	e000ed00 	.word	0xe000ed00
 80025c4:	e000ed14 	.word	0xe000ed14

080025c8 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80025c8:	2800      	cmp	r0, #0
 80025ca:	db07      	blt.n	80025dc <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025cc:	0941      	lsrs	r1, r0, #5
 80025ce:	4a04      	ldr	r2, [pc, #16]	@ (80025e0 <HAL_NVIC_EnableIRQ+0x18>)
 80025d0:	f000 001f 	and.w	r0, r0, #31
 80025d4:	2301      	movs	r3, #1
 80025d6:	4083      	lsls	r3, r0
 80025d8:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80025dc:	4770      	bx	lr
 80025de:	bf00      	nop
 80025e0:	e000e100 	.word	0xe000e100

080025e4 <DMA_CalcBaseAndBitshift>:
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80025e4:	6802      	ldr	r2, [r0, #0]
 80025e6:	4b0a      	ldr	r3, [pc, #40]	@ (8002610 <DMA_CalcBaseAndBitshift+0x2c>)
 80025e8:	429a      	cmp	r2, r3
 80025ea:	f04f 0114 	mov.w	r1, #20
 80025ee:	d808      	bhi.n	8002602 <DMA_CalcBaseAndBitshift+0x1e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80025f0:	4b08      	ldr	r3, [pc, #32]	@ (8002614 <DMA_CalcBaseAndBitshift+0x30>)
 80025f2:	4413      	add	r3, r2
 80025f4:	4a08      	ldr	r2, [pc, #32]	@ (8002618 <DMA_CalcBaseAndBitshift+0x34>)
 80025f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80025fa:	009b      	lsls	r3, r3, #2
    hdma->DmaBaseAddress = DMA1;
 80025fc:	e9c0 230f 	strd	r2, r3, [r0, #60]	@ 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 8002600:	4770      	bx	lr
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002602:	4b06      	ldr	r3, [pc, #24]	@ (800261c <DMA_CalcBaseAndBitshift+0x38>)
 8002604:	4413      	add	r3, r2
 8002606:	4a06      	ldr	r2, [pc, #24]	@ (8002620 <DMA_CalcBaseAndBitshift+0x3c>)
 8002608:	fbb3 f3f1 	udiv	r3, r3, r1
 800260c:	009b      	lsls	r3, r3, #2
    hdma->DmaBaseAddress = DMA2;
 800260e:	e7f5      	b.n	80025fc <DMA_CalcBaseAndBitshift+0x18>
 8002610:	40020407 	.word	0x40020407
 8002614:	bffdfff8 	.word	0xbffdfff8
 8002618:	40020000 	.word	0x40020000
 800261c:	bffdfbf8 	.word	0xbffdfbf8
 8002620:	40020400 	.word	0x40020400

08002624 <HAL_DMA_Init>:
{
 8002624:	b538      	push	{r3, r4, r5, lr}
  if(NULL == hdma)
 8002626:	4604      	mov	r4, r0
 8002628:	b1e0      	cbz	r0, 8002664 <HAL_DMA_Init+0x40>
  tmp |=  hdma->Init.Direction        |
 800262a:	e9d0 3501 	ldrd	r3, r5, [r0, #4]
 800262e:	432b      	orrs	r3, r5
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002630:	68c5      	ldr	r5, [r0, #12]
  tmp = hdma->Instance->CCR;
 8002632:	6801      	ldr	r1, [r0, #0]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002634:	432b      	orrs	r3, r5
 8002636:	6905      	ldr	r5, [r0, #16]
  tmp = hdma->Instance->CCR;
 8002638:	680a      	ldr	r2, [r1, #0]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800263a:	432b      	orrs	r3, r5
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800263c:	6945      	ldr	r5, [r0, #20]
 800263e:	432b      	orrs	r3, r5
 8002640:	6985      	ldr	r5, [r0, #24]
 8002642:	432b      	orrs	r3, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 8002644:	69c5      	ldr	r5, [r0, #28]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002646:	f422 527f 	bic.w	r2, r2, #16320	@ 0x3fc0
 800264a:	f022 0230 	bic.w	r2, r2, #48	@ 0x30
          hdma->Init.Mode                | hdma->Init.Priority;
 800264e:	432b      	orrs	r3, r5
  tmp |=  hdma->Init.Direction        |
 8002650:	4313      	orrs	r3, r2
  hdma->Instance->CCR = tmp;
 8002652:	600b      	str	r3, [r1, #0]
  DMA_CalcBaseAndBitshift(hdma);
 8002654:	f7ff ffc6 	bl	80025e4 <DMA_CalcBaseAndBitshift>
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002658:	2000      	movs	r0, #0
  hdma->Lock = HAL_UNLOCKED;
 800265a:	f44f 7380 	mov.w	r3, #256	@ 0x100
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800265e:	63a0      	str	r0, [r4, #56]	@ 0x38
  hdma->Lock = HAL_UNLOCKED;
 8002660:	8423      	strh	r3, [r4, #32]
}
 8002662:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8002664:	2001      	movs	r0, #1
 8002666:	e7fc      	b.n	8002662 <HAL_DMA_Init+0x3e>

08002668 <HAL_DMA_Start_IT>:
{
 8002668:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hdma);
 800266a:	f890 4020 	ldrb.w	r4, [r0, #32]
 800266e:	2c01      	cmp	r4, #1
 8002670:	d033      	beq.n	80026da <HAL_DMA_Start_IT+0x72>
  if(HAL_DMA_STATE_READY == hdma->State)
 8002672:	f890 5021 	ldrb.w	r5, [r0, #33]	@ 0x21
  __HAL_LOCK(hdma);
 8002676:	2401      	movs	r4, #1
  if(HAL_DMA_STATE_READY == hdma->State)
 8002678:	42a5      	cmp	r5, r4
  __HAL_LOCK(hdma);
 800267a:	f880 4020 	strb.w	r4, [r0, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 800267e:	f04f 0400 	mov.w	r4, #0
 8002682:	d128      	bne.n	80026d6 <HAL_DMA_Start_IT+0x6e>
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002684:	6384      	str	r4, [r0, #56]	@ 0x38
    hdma->State = HAL_DMA_STATE_BUSY;
 8002686:	2602      	movs	r6, #2
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002688:	6804      	ldr	r4, [r0, #0]
    hdma->State = HAL_DMA_STATE_BUSY;
 800268a:	f880 6021 	strb.w	r6, [r0, #33]	@ 0x21
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800268e:	6826      	ldr	r6, [r4, #0]
 8002690:	f026 0601 	bic.w	r6, r6, #1
 8002694:	6026      	str	r6, [r4, #0]
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002696:	e9d0 670f 	ldrd	r6, r7, [r0, #60]	@ 0x3c
 800269a:	40bd      	lsls	r5, r7
 800269c:	6075      	str	r5, [r6, #4]
  hdma->Instance->CNDTR = DataLength;
 800269e:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80026a0:	6843      	ldr	r3, [r0, #4]
 80026a2:	2b10      	cmp	r3, #16
    if(NULL != hdma->XferHalfCpltCallback )
 80026a4:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
    hdma->Instance->CPAR = DstAddress;
 80026a6:	bf0b      	itete	eq
 80026a8:	60a2      	streq	r2, [r4, #8]
    hdma->Instance->CPAR = SrcAddress;
 80026aa:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 80026ac:	60e1      	streq	r1, [r4, #12]
    hdma->Instance->CMAR = DstAddress;
 80026ae:	60e2      	strne	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback )
 80026b0:	b14b      	cbz	r3, 80026c6 <HAL_DMA_Start_IT+0x5e>
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80026b2:	6823      	ldr	r3, [r4, #0]
 80026b4:	f043 030e 	orr.w	r3, r3, #14
      hdma->Instance->CCR &= ~DMA_IT_HT;
 80026b8:	6023      	str	r3, [r4, #0]
    hdma->Instance->CCR |= DMA_CCR_EN;
 80026ba:	6823      	ldr	r3, [r4, #0]
 80026bc:	f043 0301 	orr.w	r3, r3, #1
 80026c0:	6023      	str	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80026c2:	2000      	movs	r0, #0
}
 80026c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 80026c6:	6823      	ldr	r3, [r4, #0]
 80026c8:	f043 030a 	orr.w	r3, r3, #10
 80026cc:	6023      	str	r3, [r4, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 80026ce:	6823      	ldr	r3, [r4, #0]
 80026d0:	f023 0304 	bic.w	r3, r3, #4
 80026d4:	e7f0      	b.n	80026b8 <HAL_DMA_Start_IT+0x50>
    __HAL_UNLOCK(hdma);
 80026d6:	f880 4020 	strb.w	r4, [r0, #32]
  __HAL_LOCK(hdma);
 80026da:	2002      	movs	r0, #2
 80026dc:	e7f2      	b.n	80026c4 <HAL_DMA_Start_IT+0x5c>

080026de <HAL_DMA_IRQHandler>:
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80026de:	6bc1      	ldr	r1, [r0, #60]	@ 0x3c
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80026e0:	6c02      	ldr	r2, [r0, #64]	@ 0x40
  uint32_t source_it = hdma->Instance->CCR;
 80026e2:	6803      	ldr	r3, [r0, #0]
{
 80026e4:	b470      	push	{r4, r5, r6}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80026e6:	680e      	ldr	r6, [r1, #0]
  uint32_t source_it = hdma->Instance->CCR;
 80026e8:	681d      	ldr	r5, [r3, #0]
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80026ea:	2404      	movs	r4, #4
 80026ec:	4094      	lsls	r4, r2
 80026ee:	4234      	tst	r4, r6
 80026f0:	d00e      	beq.n	8002710 <HAL_DMA_IRQHandler+0x32>
 80026f2:	f015 0f04 	tst.w	r5, #4
 80026f6:	d00b      	beq.n	8002710 <HAL_DMA_IRQHandler+0x32>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80026f8:	681a      	ldr	r2, [r3, #0]
 80026fa:	0692      	lsls	r2, r2, #26
      hdma->Instance->CCR &= ~DMA_IT_HT;
 80026fc:	bf5e      	ittt	pl
 80026fe:	681a      	ldrpl	r2, [r3, #0]
 8002700:	f022 0204 	bicpl.w	r2, r2, #4
 8002704:	601a      	strpl	r2, [r3, #0]
    if(hdma->XferHalfCpltCallback != NULL)
 8002706:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8002708:	604c      	str	r4, [r1, #4]
    if(hdma->XferErrorCallback != NULL)
 800270a:	b363      	cbz	r3, 8002766 <HAL_DMA_IRQHandler+0x88>
}
 800270c:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 800270e:	4718      	bx	r3
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8002710:	2402      	movs	r4, #2
 8002712:	4094      	lsls	r4, r2
 8002714:	4234      	tst	r4, r6
 8002716:	d012      	beq.n	800273e <HAL_DMA_IRQHandler+0x60>
 8002718:	f015 0f02 	tst.w	r5, #2
 800271c:	d00f      	beq.n	800273e <HAL_DMA_IRQHandler+0x60>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800271e:	681a      	ldr	r2, [r3, #0]
 8002720:	0695      	lsls	r5, r2, #26
 8002722:	d406      	bmi.n	8002732 <HAL_DMA_IRQHandler+0x54>
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8002724:	681a      	ldr	r2, [r3, #0]
 8002726:	f022 020a 	bic.w	r2, r2, #10
 800272a:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 800272c:	2301      	movs	r3, #1
 800272e:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
    __HAL_UNLOCK(hdma);
 8002732:	2300      	movs	r3, #0
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8002734:	604c      	str	r4, [r1, #4]
    __HAL_UNLOCK(hdma);
 8002736:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 800273a:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800273c:	e7e5      	b.n	800270a <HAL_DMA_IRQHandler+0x2c>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800273e:	2408      	movs	r4, #8
 8002740:	4094      	lsls	r4, r2
 8002742:	4234      	tst	r4, r6
 8002744:	d00f      	beq.n	8002766 <HAL_DMA_IRQHandler+0x88>
 8002746:	072c      	lsls	r4, r5, #28
 8002748:	d50d      	bpl.n	8002766 <HAL_DMA_IRQHandler+0x88>
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800274a:	681c      	ldr	r4, [r3, #0]
 800274c:	f024 040e 	bic.w	r4, r4, #14
 8002750:	601c      	str	r4, [r3, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002752:	2301      	movs	r3, #1
 8002754:	fa03 f202 	lsl.w	r2, r3, r2
 8002758:	604a      	str	r2, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800275a:	6383      	str	r3, [r0, #56]	@ 0x38
    __HAL_UNLOCK(hdma);
 800275c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002760:	8403      	strh	r3, [r0, #32]
    if(hdma->XferErrorCallback != NULL)
 8002762:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8002764:	e7d1      	b.n	800270a <HAL_DMA_IRQHandler+0x2c>
}
 8002766:	bc70      	pop	{r4, r5, r6}
 8002768:	4770      	bx	lr
	...

0800276c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800276c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002770:	f8df 917c 	ldr.w	r9, [pc, #380]	@ 80028f0 <HAL_GPIO_Init+0x184>
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002774:	4c5c      	ldr	r4, [pc, #368]	@ (80028e8 <HAL_GPIO_Init+0x17c>)
  uint32_t position = 0x00u;
 8002776:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002778:	680a      	ldr	r2, [r1, #0]
 800277a:	fa32 f503 	lsrs.w	r5, r2, r3
 800277e:	d102      	bne.n	8002786 <HAL_GPIO_Init+0x1a>
      }
    }

    position++;
  }
}
 8002780:	b003      	add	sp, #12
 8002782:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002786:	2501      	movs	r5, #1
 8002788:	fa05 f803 	lsl.w	r8, r5, r3
    if (iocurrent != 0x00u)
 800278c:	ea18 0202 	ands.w	r2, r8, r2
 8002790:	f000 80a0 	beq.w	80028d4 <HAL_GPIO_Init+0x168>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002794:	684e      	ldr	r6, [r1, #4]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002796:	2703      	movs	r7, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002798:	f006 0503 	and.w	r5, r6, #3
 800279c:	ea4f 0e43 	mov.w	lr, r3, lsl #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80027a0:	fa07 fc0e 	lsl.w	ip, r7, lr
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80027a4:	1e6f      	subs	r7, r5, #1
 80027a6:	2f01      	cmp	r7, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80027a8:	ea6f 0c0c 	mvn.w	ip, ip
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80027ac:	d834      	bhi.n	8002818 <HAL_GPIO_Init+0xac>
        temp = GPIOx->OSPEEDR;
 80027ae:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80027b0:	ea07 0a0c 	and.w	sl, r7, ip
        temp |= (GPIO_Init->Speed << (position * 2u));
 80027b4:	68cf      	ldr	r7, [r1, #12]
 80027b6:	fa07 f70e 	lsl.w	r7, r7, lr
 80027ba:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
 80027be:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 80027c0:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80027c2:	ea27 0808 	bic.w	r8, r7, r8
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80027c6:	f3c6 1700 	ubfx	r7, r6, #4, #1
 80027ca:	409f      	lsls	r7, r3
 80027cc:	ea47 0708 	orr.w	r7, r7, r8
        GPIOx->OTYPER = temp;
 80027d0:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 80027d2:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80027d4:	ea07 080c 	and.w	r8, r7, ip
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80027d8:	688f      	ldr	r7, [r1, #8]
 80027da:	fa07 f70e 	lsl.w	r7, r7, lr
 80027de:	ea47 0708 	orr.w	r7, r7, r8
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027e2:	2d02      	cmp	r5, #2
        GPIOx->PUPDR = temp;
 80027e4:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027e6:	d119      	bne.n	800281c <HAL_GPIO_Init+0xb0>
        temp = GPIOx->AFR[position >> 3u];
 80027e8:	ea4f 08d3 	mov.w	r8, r3, lsr #3
 80027ec:	eb00 0888 	add.w	r8, r0, r8, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80027f0:	f003 0a07 	and.w	sl, r3, #7
        temp = GPIOx->AFR[position >> 3u];
 80027f4:	f8d8 7020 	ldr.w	r7, [r8, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80027f8:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 80027fc:	f04f 0b0f 	mov.w	fp, #15
 8002800:	fa0b fb0a 	lsl.w	fp, fp, sl
 8002804:	ea27 0b0b 	bic.w	fp, r7, fp
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002808:	690f      	ldr	r7, [r1, #16]
 800280a:	fa07 f70a 	lsl.w	r7, r7, sl
 800280e:	ea47 070b 	orr.w	r7, r7, fp
        GPIOx->AFR[position >> 3u] = temp;
 8002812:	f8c8 7020 	str.w	r7, [r8, #32]
 8002816:	e001      	b.n	800281c <HAL_GPIO_Init+0xb0>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002818:	2d03      	cmp	r5, #3
 800281a:	d1da      	bne.n	80027d2 <HAL_GPIO_Init+0x66>
      temp = GPIOx->MODER;
 800281c:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800281e:	fa05 f50e 	lsl.w	r5, r5, lr
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002822:	ea07 070c 	and.w	r7, r7, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002826:	433d      	orrs	r5, r7
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002828:	f416 3f40 	tst.w	r6, #196608	@ 0x30000
      GPIOx->MODER = temp;
 800282c:	6005      	str	r5, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800282e:	d051      	beq.n	80028d4 <HAL_GPIO_Init+0x168>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002830:	f8d9 5018 	ldr.w	r5, [r9, #24]
 8002834:	f045 0501 	orr.w	r5, r5, #1
 8002838:	f8c9 5018 	str.w	r5, [r9, #24]
 800283c:	f8d9 5018 	ldr.w	r5, [r9, #24]
 8002840:	f023 0703 	bic.w	r7, r3, #3
 8002844:	f107 4780 	add.w	r7, r7, #1073741824	@ 0x40000000
 8002848:	f005 0501 	and.w	r5, r5, #1
 800284c:	f507 3780 	add.w	r7, r7, #65536	@ 0x10000
 8002850:	9501      	str	r5, [sp, #4]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002852:	f003 0c03 	and.w	ip, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002856:	9d01      	ldr	r5, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2u];
 8002858:	68bd      	ldr	r5, [r7, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800285a:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 800285e:	f04f 0e0f 	mov.w	lr, #15
 8002862:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002866:	f1b0 4f90 	cmp.w	r0, #1207959552	@ 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800286a:	ea25 0e0e 	bic.w	lr, r5, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800286e:	d033      	beq.n	80028d8 <HAL_GPIO_Init+0x16c>
 8002870:	4d1e      	ldr	r5, [pc, #120]	@ (80028ec <HAL_GPIO_Init+0x180>)
 8002872:	42a8      	cmp	r0, r5
 8002874:	d032      	beq.n	80028dc <HAL_GPIO_Init+0x170>
 8002876:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 800287a:	42a8      	cmp	r0, r5
 800287c:	d030      	beq.n	80028e0 <HAL_GPIO_Init+0x174>
 800287e:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8002882:	42a8      	cmp	r0, r5
 8002884:	d02e      	beq.n	80028e4 <HAL_GPIO_Init+0x178>
 8002886:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 800288a:	42a8      	cmp	r0, r5
 800288c:	bf14      	ite	ne
 800288e:	2505      	movne	r5, #5
 8002890:	2504      	moveq	r5, #4
 8002892:	fa05 f50c 	lsl.w	r5, r5, ip
 8002896:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2u] = temp;
 800289a:	60bd      	str	r5, [r7, #8]
        temp = EXTI->RTSR;
 800289c:	68a5      	ldr	r5, [r4, #8]
        temp &= ~(iocurrent);
 800289e:	43d7      	mvns	r7, r2
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80028a0:	f416 1f80 	tst.w	r6, #1048576	@ 0x100000
        temp &= ~(iocurrent);
 80028a4:	bf0c      	ite	eq
 80028a6:	403d      	andeq	r5, r7
          temp |= iocurrent;
 80028a8:	4315      	orrne	r5, r2
        EXTI->RTSR = temp;
 80028aa:	60a5      	str	r5, [r4, #8]
        temp = EXTI->FTSR;
 80028ac:	68e5      	ldr	r5, [r4, #12]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80028ae:	f416 1f00 	tst.w	r6, #2097152	@ 0x200000
        temp &= ~(iocurrent);
 80028b2:	bf0c      	ite	eq
 80028b4:	403d      	andeq	r5, r7
          temp |= iocurrent;
 80028b6:	4315      	orrne	r5, r2
        EXTI->FTSR = temp;
 80028b8:	60e5      	str	r5, [r4, #12]
        temp = EXTI->EMR;
 80028ba:	6865      	ldr	r5, [r4, #4]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80028bc:	f416 3f00 	tst.w	r6, #131072	@ 0x20000
        temp &= ~(iocurrent);
 80028c0:	bf0c      	ite	eq
 80028c2:	403d      	andeq	r5, r7
          temp |= iocurrent;
 80028c4:	4315      	orrne	r5, r2
        EXTI->EMR = temp;
 80028c6:	6065      	str	r5, [r4, #4]
        temp = EXTI->IMR;
 80028c8:	6825      	ldr	r5, [r4, #0]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80028ca:	03f6      	lsls	r6, r6, #15
        temp &= ~(iocurrent);
 80028cc:	bf54      	ite	pl
 80028ce:	403d      	andpl	r5, r7
          temp |= iocurrent;
 80028d0:	4315      	orrmi	r5, r2
        EXTI->IMR = temp;
 80028d2:	6025      	str	r5, [r4, #0]
    position++;
 80028d4:	3301      	adds	r3, #1
 80028d6:	e74f      	b.n	8002778 <HAL_GPIO_Init+0xc>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80028d8:	2500      	movs	r5, #0
 80028da:	e7da      	b.n	8002892 <HAL_GPIO_Init+0x126>
 80028dc:	2501      	movs	r5, #1
 80028de:	e7d8      	b.n	8002892 <HAL_GPIO_Init+0x126>
 80028e0:	2502      	movs	r5, #2
 80028e2:	e7d6      	b.n	8002892 <HAL_GPIO_Init+0x126>
 80028e4:	2503      	movs	r5, #3
 80028e6:	e7d4      	b.n	8002892 <HAL_GPIO_Init+0x126>
 80028e8:	40010400 	.word	0x40010400
 80028ec:	48000400 	.word	0x48000400
 80028f0:	40021000 	.word	0x40021000

080028f4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80028f4:	b10a      	cbz	r2, 80028fa <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80028f6:	6181      	str	r1, [r0, #24]
 80028f8:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80028fa:	6281      	str	r1, [r0, #40]	@ 0x28
  }
}
 80028fc:	4770      	bx	lr
	...

08002900 <HAL_PWR_EnableBkUpAccess>:
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  SET_BIT(PWR->CR, PWR_CR_DBP);  
 8002900:	4a02      	ldr	r2, [pc, #8]	@ (800290c <HAL_PWR_EnableBkUpAccess+0xc>)
 8002902:	6813      	ldr	r3, [r2, #0]
 8002904:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002908:	6013      	str	r3, [r2, #0]
}
 800290a:	4770      	bx	lr
 800290c:	40007000 	.word	0x40007000

08002910 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002910:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002914:	4605      	mov	r5, r0
 8002916:	2800      	cmp	r0, #0
 8002918:	d033      	beq.n	8002982 <HAL_RCC_OscConfig+0x72>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800291a:	6803      	ldr	r3, [r0, #0]
 800291c:	07da      	lsls	r2, r3, #31
 800291e:	d411      	bmi.n	8002944 <HAL_RCC_OscConfig+0x34>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002920:	682b      	ldr	r3, [r5, #0]
 8002922:	079b      	lsls	r3, r3, #30
 8002924:	f100 8081 	bmi.w	8002a2a <HAL_RCC_OscConfig+0x11a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002928:	682b      	ldr	r3, [r5, #0]
 800292a:	071c      	lsls	r4, r3, #28
 800292c:	f100 80eb 	bmi.w	8002b06 <HAL_RCC_OscConfig+0x1f6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002930:	682b      	ldr	r3, [r5, #0]
 8002932:	0758      	lsls	r0, r3, #29
 8002934:	f100 8130 	bmi.w	8002b98 <HAL_RCC_OscConfig+0x288>
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002938:	69eb      	ldr	r3, [r5, #28]
 800293a:	2b00      	cmp	r3, #0
 800293c:	f040 81b5 	bne.w	8002caa <HAL_RCC_OscConfig+0x39a>
        }
      }
    }
  }

  return HAL_OK;
 8002940:	2000      	movs	r0, #0
 8002942:	e047      	b.n	80029d4 <HAL_RCC_OscConfig+0xc4>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002944:	4cb0      	ldr	r4, [pc, #704]	@ (8002c08 <HAL_RCC_OscConfig+0x2f8>)
 8002946:	6863      	ldr	r3, [r4, #4]
 8002948:	f003 030c 	and.w	r3, r3, #12
 800294c:	2b04      	cmp	r3, #4
 800294e:	d007      	beq.n	8002960 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002950:	6863      	ldr	r3, [r4, #4]
 8002952:	f003 030c 	and.w	r3, r3, #12
 8002956:	2b08      	cmp	r3, #8
 8002958:	d115      	bne.n	8002986 <HAL_RCC_OscConfig+0x76>
 800295a:	6863      	ldr	r3, [r4, #4]
 800295c:	03df      	lsls	r7, r3, #15
 800295e:	d512      	bpl.n	8002986 <HAL_RCC_OscConfig+0x76>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002960:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002964:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002968:	6821      	ldr	r1, [r4, #0]
 800296a:	fa93 f3a3 	rbit	r3, r3
 800296e:	2201      	movs	r2, #1
 8002970:	fab3 f383 	clz	r3, r3
 8002974:	fa02 f303 	lsl.w	r3, r2, r3
 8002978:	420b      	tst	r3, r1
 800297a:	d0d1      	beq.n	8002920 <HAL_RCC_OscConfig+0x10>
 800297c:	686b      	ldr	r3, [r5, #4]
 800297e:	2b00      	cmp	r3, #0
 8002980:	d1ce      	bne.n	8002920 <HAL_RCC_OscConfig+0x10>
    return HAL_ERROR;
 8002982:	2001      	movs	r0, #1
 8002984:	e026      	b.n	80029d4 <HAL_RCC_OscConfig+0xc4>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002986:	686a      	ldr	r2, [r5, #4]
 8002988:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 800298c:	d125      	bne.n	80029da <HAL_RCC_OscConfig+0xca>
 800298e:	6823      	ldr	r3, [r4, #0]
 8002990:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002994:	6023      	str	r3, [r4, #0]
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002996:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8002998:	68a9      	ldr	r1, [r5, #8]
 800299a:	f023 030f 	bic.w	r3, r3, #15
 800299e:	430b      	orrs	r3, r1
 80029a0:	62e3      	str	r3, [r4, #44]	@ 0x2c
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80029a2:	b352      	cbz	r2, 80029fa <HAL_RCC_OscConfig+0xea>
        tickstart = HAL_GetTick();
 80029a4:	f7ff f886 	bl	8001ab4 <HAL_GetTick>
 80029a8:	f44f 3700 	mov.w	r7, #131072	@ 0x20000
 80029ac:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029ae:	f04f 0801 	mov.w	r8, #1
 80029b2:	fa97 f3a7 	rbit	r3, r7
 80029b6:	6822      	ldr	r2, [r4, #0]
 80029b8:	fa97 f3a7 	rbit	r3, r7
 80029bc:	fab3 f383 	clz	r3, r3
 80029c0:	fa08 f303 	lsl.w	r3, r8, r3
 80029c4:	4213      	tst	r3, r2
 80029c6:	d1ab      	bne.n	8002920 <HAL_RCC_OscConfig+0x10>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80029c8:	f7ff f874 	bl	8001ab4 <HAL_GetTick>
 80029cc:	1b80      	subs	r0, r0, r6
 80029ce:	2864      	cmp	r0, #100	@ 0x64
 80029d0:	d9ef      	bls.n	80029b2 <HAL_RCC_OscConfig+0xa2>
            return HAL_TIMEOUT;
 80029d2:	2003      	movs	r0, #3
}
 80029d4:	b002      	add	sp, #8
 80029d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029da:	6823      	ldr	r3, [r4, #0]
 80029dc:	b932      	cbnz	r2, 80029ec <HAL_RCC_OscConfig+0xdc>
 80029de:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80029e2:	6023      	str	r3, [r4, #0]
 80029e4:	6823      	ldr	r3, [r4, #0]
 80029e6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80029ea:	e7d3      	b.n	8002994 <HAL_RCC_OscConfig+0x84>
 80029ec:	f5b2 2fa0 	cmp.w	r2, #327680	@ 0x50000
 80029f0:	d1f5      	bne.n	80029de <HAL_RCC_OscConfig+0xce>
 80029f2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80029f6:	6023      	str	r3, [r4, #0]
 80029f8:	e7c9      	b.n	800298e <HAL_RCC_OscConfig+0x7e>
        tickstart = HAL_GetTick();
 80029fa:	f7ff f85b 	bl	8001ab4 <HAL_GetTick>
 80029fe:	f44f 3700 	mov.w	r7, #131072	@ 0x20000
 8002a02:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a04:	f04f 0801 	mov.w	r8, #1
 8002a08:	fa97 f3a7 	rbit	r3, r7
 8002a0c:	6822      	ldr	r2, [r4, #0]
 8002a0e:	fa97 f3a7 	rbit	r3, r7
 8002a12:	fab3 f383 	clz	r3, r3
 8002a16:	fa08 f303 	lsl.w	r3, r8, r3
 8002a1a:	4213      	tst	r3, r2
 8002a1c:	d080      	beq.n	8002920 <HAL_RCC_OscConfig+0x10>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a1e:	f7ff f849 	bl	8001ab4 <HAL_GetTick>
 8002a22:	1b80      	subs	r0, r0, r6
 8002a24:	2864      	cmp	r0, #100	@ 0x64
 8002a26:	d9ef      	bls.n	8002a08 <HAL_RCC_OscConfig+0xf8>
 8002a28:	e7d3      	b.n	80029d2 <HAL_RCC_OscConfig+0xc2>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002a2a:	4c77      	ldr	r4, [pc, #476]	@ (8002c08 <HAL_RCC_OscConfig+0x2f8>)
 8002a2c:	6863      	ldr	r3, [r4, #4]
 8002a2e:	f013 0f0c 	tst.w	r3, #12
 8002a32:	d007      	beq.n	8002a44 <HAL_RCC_OscConfig+0x134>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002a34:	6863      	ldr	r3, [r4, #4]
 8002a36:	f003 030c 	and.w	r3, r3, #12
 8002a3a:	2b08      	cmp	r3, #8
 8002a3c:	d11f      	bne.n	8002a7e <HAL_RCC_OscConfig+0x16e>
 8002a3e:	6863      	ldr	r3, [r4, #4]
 8002a40:	03de      	lsls	r6, r3, #15
 8002a42:	d41c      	bmi.n	8002a7e <HAL_RCC_OscConfig+0x16e>
 8002a44:	2302      	movs	r3, #2
 8002a46:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a4a:	6821      	ldr	r1, [r4, #0]
 8002a4c:	fa93 f3a3 	rbit	r3, r3
 8002a50:	2201      	movs	r2, #1
 8002a52:	fab3 f383 	clz	r3, r3
 8002a56:	fa02 f303 	lsl.w	r3, r2, r3
 8002a5a:	420b      	tst	r3, r1
 8002a5c:	d002      	beq.n	8002a64 <HAL_RCC_OscConfig+0x154>
 8002a5e:	692b      	ldr	r3, [r5, #16]
 8002a60:	4293      	cmp	r3, r2
 8002a62:	d18e      	bne.n	8002982 <HAL_RCC_OscConfig+0x72>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a64:	6821      	ldr	r1, [r4, #0]
 8002a66:	22f8      	movs	r2, #248	@ 0xf8
 8002a68:	fa92 f2a2 	rbit	r2, r2
 8002a6c:	696b      	ldr	r3, [r5, #20]
 8002a6e:	fab2 f282 	clz	r2, r2
 8002a72:	4093      	lsls	r3, r2
 8002a74:	f021 02f8 	bic.w	r2, r1, #248	@ 0xf8
 8002a78:	4313      	orrs	r3, r2
 8002a7a:	6023      	str	r3, [r4, #0]
 8002a7c:	e754      	b.n	8002928 <HAL_RCC_OscConfig+0x18>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002a7e:	692a      	ldr	r2, [r5, #16]
 8002a80:	2601      	movs	r6, #1
 8002a82:	b1fa      	cbz	r2, 8002ac4 <HAL_RCC_OscConfig+0x1b4>
 8002a84:	fa96 f3a6 	rbit	r3, r6
        __HAL_RCC_HSI_ENABLE();
 8002a88:	fab3 f383 	clz	r3, r3
 8002a8c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002a90:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002a94:	009b      	lsls	r3, r3, #2
 8002a96:	f04f 0802 	mov.w	r8, #2
 8002a9a:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 8002a9c:	f7ff f80a 	bl	8001ab4 <HAL_GetTick>
 8002aa0:	4607      	mov	r7, r0
 8002aa2:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002aa6:	6822      	ldr	r2, [r4, #0]
 8002aa8:	fa98 f3a8 	rbit	r3, r8
 8002aac:	fab3 f383 	clz	r3, r3
 8002ab0:	fa06 f303 	lsl.w	r3, r6, r3
 8002ab4:	4213      	tst	r3, r2
 8002ab6:	d1d5      	bne.n	8002a64 <HAL_RCC_OscConfig+0x154>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ab8:	f7fe fffc 	bl	8001ab4 <HAL_GetTick>
 8002abc:	1bc0      	subs	r0, r0, r7
 8002abe:	2802      	cmp	r0, #2
 8002ac0:	d9ef      	bls.n	8002aa2 <HAL_RCC_OscConfig+0x192>
 8002ac2:	e786      	b.n	80029d2 <HAL_RCC_OscConfig+0xc2>
 8002ac4:	fa96 f3a6 	rbit	r3, r6
        __HAL_RCC_HSI_DISABLE();
 8002ac8:	fab3 f383 	clz	r3, r3
 8002acc:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002ad0:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002ad4:	009b      	lsls	r3, r3, #2
 8002ad6:	f04f 0802 	mov.w	r8, #2
 8002ada:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002adc:	f7fe ffea 	bl	8001ab4 <HAL_GetTick>
 8002ae0:	4607      	mov	r7, r0
 8002ae2:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ae6:	6822      	ldr	r2, [r4, #0]
 8002ae8:	fa98 f3a8 	rbit	r3, r8
 8002aec:	fab3 f383 	clz	r3, r3
 8002af0:	fa06 f303 	lsl.w	r3, r6, r3
 8002af4:	4213      	tst	r3, r2
 8002af6:	f43f af17 	beq.w	8002928 <HAL_RCC_OscConfig+0x18>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002afa:	f7fe ffdb 	bl	8001ab4 <HAL_GetTick>
 8002afe:	1bc0      	subs	r0, r0, r7
 8002b00:	2802      	cmp	r0, #2
 8002b02:	d9ee      	bls.n	8002ae2 <HAL_RCC_OscConfig+0x1d2>
 8002b04:	e765      	b.n	80029d2 <HAL_RCC_OscConfig+0xc2>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002b06:	69aa      	ldr	r2, [r5, #24]
 8002b08:	4e3f      	ldr	r6, [pc, #252]	@ (8002c08 <HAL_RCC_OscConfig+0x2f8>)
 8002b0a:	4940      	ldr	r1, [pc, #256]	@ (8002c0c <HAL_RCC_OscConfig+0x2fc>)
 8002b0c:	2401      	movs	r4, #1
 8002b0e:	b30a      	cbz	r2, 8002b54 <HAL_RCC_OscConfig+0x244>
 8002b10:	fa94 f3a4 	rbit	r3, r4
      __HAL_RCC_LSI_ENABLE();
 8002b14:	fab3 f383 	clz	r3, r3
 8002b18:	440b      	add	r3, r1
 8002b1a:	009b      	lsls	r3, r3, #2
 8002b1c:	2702      	movs	r7, #2
 8002b1e:	601c      	str	r4, [r3, #0]
      tickstart = HAL_GetTick();
 8002b20:	f7fe ffc8 	bl	8001ab4 <HAL_GetTick>
 8002b24:	4680      	mov	r8, r0
 8002b26:	fa97 f3a7 	rbit	r3, r7
 8002b2a:	fa97 f3a7 	rbit	r3, r7
 8002b2e:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b32:	6a72      	ldr	r2, [r6, #36]	@ 0x24
 8002b34:	fa97 f3a7 	rbit	r3, r7
 8002b38:	fab3 f383 	clz	r3, r3
 8002b3c:	fa04 f303 	lsl.w	r3, r4, r3
 8002b40:	4213      	tst	r3, r2
 8002b42:	f47f aef5 	bne.w	8002930 <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b46:	f7fe ffb5 	bl	8001ab4 <HAL_GetTick>
 8002b4a:	eba0 0008 	sub.w	r0, r0, r8
 8002b4e:	2802      	cmp	r0, #2
 8002b50:	d9e9      	bls.n	8002b26 <HAL_RCC_OscConfig+0x216>
 8002b52:	e73e      	b.n	80029d2 <HAL_RCC_OscConfig+0xc2>
 8002b54:	fa94 f3a4 	rbit	r3, r4
      __HAL_RCC_LSI_DISABLE();
 8002b58:	fab3 f383 	clz	r3, r3
 8002b5c:	440b      	add	r3, r1
 8002b5e:	009b      	lsls	r3, r3, #2
 8002b60:	2702      	movs	r7, #2
 8002b62:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8002b64:	f7fe ffa6 	bl	8001ab4 <HAL_GetTick>
 8002b68:	4680      	mov	r8, r0
 8002b6a:	fa97 f3a7 	rbit	r3, r7
 8002b6e:	fa97 f3a7 	rbit	r3, r7
 8002b72:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b76:	6a72      	ldr	r2, [r6, #36]	@ 0x24
 8002b78:	fa97 f3a7 	rbit	r3, r7
 8002b7c:	fab3 f383 	clz	r3, r3
 8002b80:	fa04 f303 	lsl.w	r3, r4, r3
 8002b84:	4213      	tst	r3, r2
 8002b86:	f43f aed3 	beq.w	8002930 <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b8a:	f7fe ff93 	bl	8001ab4 <HAL_GetTick>
 8002b8e:	eba0 0008 	sub.w	r0, r0, r8
 8002b92:	2802      	cmp	r0, #2
 8002b94:	d9e9      	bls.n	8002b6a <HAL_RCC_OscConfig+0x25a>
 8002b96:	e71c      	b.n	80029d2 <HAL_RCC_OscConfig+0xc2>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b98:	4c1b      	ldr	r4, [pc, #108]	@ (8002c08 <HAL_RCC_OscConfig+0x2f8>)
 8002b9a:	69e3      	ldr	r3, [r4, #28]
 8002b9c:	00d9      	lsls	r1, r3, #3
 8002b9e:	d431      	bmi.n	8002c04 <HAL_RCC_OscConfig+0x2f4>
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ba0:	69e3      	ldr	r3, [r4, #28]
 8002ba2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002ba6:	61e3      	str	r3, [r4, #28]
 8002ba8:	69e3      	ldr	r3, [r4, #28]
 8002baa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002bae:	9301      	str	r3, [sp, #4]
 8002bb0:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002bb2:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bb4:	4f16      	ldr	r7, [pc, #88]	@ (8002c10 <HAL_RCC_OscConfig+0x300>)
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	05da      	lsls	r2, r3, #23
 8002bba:	d52b      	bpl.n	8002c14 <HAL_RCC_OscConfig+0x304>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002bbc:	68eb      	ldr	r3, [r5, #12]
 8002bbe:	2b01      	cmp	r3, #1
 8002bc0:	d139      	bne.n	8002c36 <HAL_RCC_OscConfig+0x326>
 8002bc2:	6a23      	ldr	r3, [r4, #32]
 8002bc4:	f043 0301 	orr.w	r3, r3, #1
 8002bc8:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8002bca:	f7fe ff73 	bl	8001ab4 <HAL_GetTick>
 8002bce:	2702      	movs	r7, #2
 8002bd0:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bd2:	f04f 0901 	mov.w	r9, #1
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002bd6:	f241 3a88 	movw	sl, #5000	@ 0x1388
 8002bda:	fa97 f3a7 	rbit	r3, r7
 8002bde:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002be2:	6a22      	ldr	r2, [r4, #32]
 8002be4:	fa97 f3a7 	rbit	r3, r7
 8002be8:	fab3 f383 	clz	r3, r3
 8002bec:	fa09 f303 	lsl.w	r3, r9, r3
 8002bf0:	4213      	tst	r3, r2
 8002bf2:	d053      	beq.n	8002c9c <HAL_RCC_OscConfig+0x38c>
    if(pwrclkchanged == SET)
 8002bf4:	2e00      	cmp	r6, #0
 8002bf6:	f43f ae9f 	beq.w	8002938 <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bfa:	69e3      	ldr	r3, [r4, #28]
 8002bfc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002c00:	61e3      	str	r3, [r4, #28]
 8002c02:	e699      	b.n	8002938 <HAL_RCC_OscConfig+0x28>
    FlagStatus       pwrclkchanged = RESET;
 8002c04:	2600      	movs	r6, #0
 8002c06:	e7d5      	b.n	8002bb4 <HAL_RCC_OscConfig+0x2a4>
 8002c08:	40021000 	.word	0x40021000
 8002c0c:	10908120 	.word	0x10908120
 8002c10:	40007000 	.word	0x40007000
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c1a:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8002c1c:	f7fe ff4a 	bl	8001ab4 <HAL_GetTick>
 8002c20:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	05db      	lsls	r3, r3, #23
 8002c26:	d4c9      	bmi.n	8002bbc <HAL_RCC_OscConfig+0x2ac>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c28:	f7fe ff44 	bl	8001ab4 <HAL_GetTick>
 8002c2c:	eba0 0008 	sub.w	r0, r0, r8
 8002c30:	2864      	cmp	r0, #100	@ 0x64
 8002c32:	d9f6      	bls.n	8002c22 <HAL_RCC_OscConfig+0x312>
 8002c34:	e6cd      	b.n	80029d2 <HAL_RCC_OscConfig+0xc2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c36:	bb1b      	cbnz	r3, 8002c80 <HAL_RCC_OscConfig+0x370>
 8002c38:	6a23      	ldr	r3, [r4, #32]
 8002c3a:	f023 0301 	bic.w	r3, r3, #1
 8002c3e:	6223      	str	r3, [r4, #32]
 8002c40:	6a23      	ldr	r3, [r4, #32]
 8002c42:	f023 0304 	bic.w	r3, r3, #4
 8002c46:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8002c48:	f7fe ff34 	bl	8001ab4 <HAL_GetTick>
 8002c4c:	2702      	movs	r7, #2
 8002c4e:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c50:	f04f 0901 	mov.w	r9, #1
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c54:	f241 3a88 	movw	sl, #5000	@ 0x1388
 8002c58:	fa97 f3a7 	rbit	r3, r7
 8002c5c:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c60:	6a22      	ldr	r2, [r4, #32]
 8002c62:	fa97 f3a7 	rbit	r3, r7
 8002c66:	fab3 f383 	clz	r3, r3
 8002c6a:	fa09 f303 	lsl.w	r3, r9, r3
 8002c6e:	4213      	tst	r3, r2
 8002c70:	d0c0      	beq.n	8002bf4 <HAL_RCC_OscConfig+0x2e4>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c72:	f7fe ff1f 	bl	8001ab4 <HAL_GetTick>
 8002c76:	eba0 0008 	sub.w	r0, r0, r8
 8002c7a:	4550      	cmp	r0, sl
 8002c7c:	d9ec      	bls.n	8002c58 <HAL_RCC_OscConfig+0x348>
 8002c7e:	e6a8      	b.n	80029d2 <HAL_RCC_OscConfig+0xc2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c80:	2b05      	cmp	r3, #5
 8002c82:	6a23      	ldr	r3, [r4, #32]
 8002c84:	d103      	bne.n	8002c8e <HAL_RCC_OscConfig+0x37e>
 8002c86:	f043 0304 	orr.w	r3, r3, #4
 8002c8a:	6223      	str	r3, [r4, #32]
 8002c8c:	e799      	b.n	8002bc2 <HAL_RCC_OscConfig+0x2b2>
 8002c8e:	f023 0301 	bic.w	r3, r3, #1
 8002c92:	6223      	str	r3, [r4, #32]
 8002c94:	6a23      	ldr	r3, [r4, #32]
 8002c96:	f023 0304 	bic.w	r3, r3, #4
 8002c9a:	e795      	b.n	8002bc8 <HAL_RCC_OscConfig+0x2b8>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c9c:	f7fe ff0a 	bl	8001ab4 <HAL_GetTick>
 8002ca0:	eba0 0008 	sub.w	r0, r0, r8
 8002ca4:	4550      	cmp	r0, sl
 8002ca6:	d998      	bls.n	8002bda <HAL_RCC_OscConfig+0x2ca>
 8002ca8:	e693      	b.n	80029d2 <HAL_RCC_OscConfig+0xc2>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002caa:	4c46      	ldr	r4, [pc, #280]	@ (8002dc4 <HAL_RCC_OscConfig+0x4b4>)
 8002cac:	6862      	ldr	r2, [r4, #4]
 8002cae:	f002 020c 	and.w	r2, r2, #12
 8002cb2:	2a08      	cmp	r2, #8
 8002cb4:	d074      	beq.n	8002da0 <HAL_RCC_OscConfig+0x490>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002cb6:	2b02      	cmp	r3, #2
 8002cb8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002cbc:	d14d      	bne.n	8002d5a <HAL_RCC_OscConfig+0x44a>
 8002cbe:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8002cc2:	fab3 f383 	clz	r3, r3
 8002cc6:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002cca:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002cce:	009b      	lsls	r3, r3, #2
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002cd4:	f7fe feee 	bl	8001ab4 <HAL_GetTick>
 8002cd8:	f04f 7800 	mov.w	r8, #33554432	@ 0x2000000
 8002cdc:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002cde:	2601      	movs	r6, #1
 8002ce0:	fa98 f3a8 	rbit	r3, r8
 8002ce4:	6822      	ldr	r2, [r4, #0]
 8002ce6:	fa98 f3a8 	rbit	r3, r8
 8002cea:	fab3 f383 	clz	r3, r3
 8002cee:	fa06 f303 	lsl.w	r3, r6, r3
 8002cf2:	4213      	tst	r3, r2
 8002cf4:	d12b      	bne.n	8002d4e <HAL_RCC_OscConfig+0x43e>
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002cf6:	e9d5 1308 	ldrd	r1, r3, [r5, #32]
 8002cfa:	6862      	ldr	r2, [r4, #4]
 8002cfc:	430b      	orrs	r3, r1
 8002cfe:	f422 1274 	bic.w	r2, r2, #3997696	@ 0x3d0000
 8002d02:	4313      	orrs	r3, r2
 8002d04:	6063      	str	r3, [r4, #4]
 8002d06:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002d0a:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 8002d0e:	fab3 f383 	clz	r3, r3
 8002d12:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002d16:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002d1a:	009b      	lsls	r3, r3, #2
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002d1c:	2701      	movs	r7, #1
        __HAL_RCC_PLL_ENABLE();
 8002d1e:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 8002d20:	f7fe fec8 	bl	8001ab4 <HAL_GetTick>
 8002d24:	f04f 7600 	mov.w	r6, #33554432	@ 0x2000000
 8002d28:	4605      	mov	r5, r0
 8002d2a:	fa96 f3a6 	rbit	r3, r6
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002d2e:	6822      	ldr	r2, [r4, #0]
 8002d30:	fa96 f3a6 	rbit	r3, r6
 8002d34:	fab3 f383 	clz	r3, r3
 8002d38:	fa07 f303 	lsl.w	r3, r7, r3
 8002d3c:	4213      	tst	r3, r2
 8002d3e:	f47f adff 	bne.w	8002940 <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d42:	f7fe feb7 	bl	8001ab4 <HAL_GetTick>
 8002d46:	1b40      	subs	r0, r0, r5
 8002d48:	2802      	cmp	r0, #2
 8002d4a:	d9ee      	bls.n	8002d2a <HAL_RCC_OscConfig+0x41a>
 8002d4c:	e641      	b.n	80029d2 <HAL_RCC_OscConfig+0xc2>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d4e:	f7fe feb1 	bl	8001ab4 <HAL_GetTick>
 8002d52:	1bc0      	subs	r0, r0, r7
 8002d54:	2802      	cmp	r0, #2
 8002d56:	d9c3      	bls.n	8002ce0 <HAL_RCC_OscConfig+0x3d0>
 8002d58:	e63b      	b.n	80029d2 <HAL_RCC_OscConfig+0xc2>
 8002d5a:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8002d5e:	fab3 f383 	clz	r3, r3
 8002d62:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002d66:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002d6a:	009b      	lsls	r3, r3, #2
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002d70:	f7fe fea0 	bl	8001ab4 <HAL_GetTick>
 8002d74:	f04f 7600 	mov.w	r6, #33554432	@ 0x2000000
 8002d78:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d7a:	2701      	movs	r7, #1
 8002d7c:	fa96 f3a6 	rbit	r3, r6
 8002d80:	6822      	ldr	r2, [r4, #0]
 8002d82:	fa96 f3a6 	rbit	r3, r6
 8002d86:	fab3 f383 	clz	r3, r3
 8002d8a:	fa07 f303 	lsl.w	r3, r7, r3
 8002d8e:	4213      	tst	r3, r2
 8002d90:	f43f add6 	beq.w	8002940 <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d94:	f7fe fe8e 	bl	8001ab4 <HAL_GetTick>
 8002d98:	1b40      	subs	r0, r0, r5
 8002d9a:	2802      	cmp	r0, #2
 8002d9c:	d9ee      	bls.n	8002d7c <HAL_RCC_OscConfig+0x46c>
 8002d9e:	e618      	b.n	80029d2 <HAL_RCC_OscConfig+0xc2>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002da0:	2b01      	cmp	r3, #1
 8002da2:	f43f adee 	beq.w	8002982 <HAL_RCC_OscConfig+0x72>
        pll_config = RCC->CFGR;
 8002da6:	6860      	ldr	r0, [r4, #4]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002da8:	6a2b      	ldr	r3, [r5, #32]
 8002daa:	f400 3280 	and.w	r2, r0, #65536	@ 0x10000
 8002dae:	429a      	cmp	r2, r3
 8002db0:	f47f ade7 	bne.w	8002982 <HAL_RCC_OscConfig+0x72>
 8002db4:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002db6:	f400 1070 	and.w	r0, r0, #3932160	@ 0x3c0000
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002dba:	1ac0      	subs	r0, r0, r3
 8002dbc:	bf18      	it	ne
 8002dbe:	2001      	movne	r0, #1
 8002dc0:	e608      	b.n	80029d4 <HAL_RCC_OscConfig+0xc4>
 8002dc2:	bf00      	nop
 8002dc4:	40021000 	.word	0x40021000

08002dc8 <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 8002dc8:	4b0c      	ldr	r3, [pc, #48]	@ (8002dfc <HAL_RCC_GetSysClockFreq+0x34>)
 8002dca:	685a      	ldr	r2, [r3, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002dcc:	f002 010c 	and.w	r1, r2, #12
 8002dd0:	2908      	cmp	r1, #8
 8002dd2:	d111      	bne.n	8002df8 <HAL_RCC_GetSysClockFreq+0x30>
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8002dd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002dd6:	480a      	ldr	r0, [pc, #40]	@ (8002e00 <HAL_RCC_GetSysClockFreq+0x38>)
 8002dd8:	f3c2 4183 	ubfx	r1, r2, #18, #4
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002ddc:	03d2      	lsls	r2, r2, #15
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8002dde:	bf44      	itt	mi
 8002de0:	f003 030f 	andmi.w	r3, r3, #15
 8002de4:	4a07      	ldrmi	r2, [pc, #28]	@ (8002e04 <HAL_RCC_GetSysClockFreq+0x3c>)
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002de6:	5c40      	ldrb	r0, [r0, r1]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8002de8:	bf49      	itett	mi
 8002dea:	5cd2      	ldrbmi	r2, [r2, r3]
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002dec:	4b06      	ldrpl	r3, [pc, #24]	@ (8002e08 <HAL_RCC_GetSysClockFreq+0x40>)
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002dee:	4b07      	ldrmi	r3, [pc, #28]	@ (8002e0c <HAL_RCC_GetSysClockFreq+0x44>)
 8002df0:	fbb3 f3f2 	udivmi	r3, r3, r2
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002df4:	4358      	muls	r0, r3
 8002df6:	4770      	bx	lr
      sysclockfreq = HSE_VALUE;
 8002df8:	4804      	ldr	r0, [pc, #16]	@ (8002e0c <HAL_RCC_GetSysClockFreq+0x44>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8002dfa:	4770      	bx	lr
 8002dfc:	40021000 	.word	0x40021000
 8002e00:	0800a644 	.word	0x0800a644
 8002e04:	0800a634 	.word	0x0800a634
 8002e08:	003d0900 	.word	0x003d0900
 8002e0c:	007a1200 	.word	0x007a1200

08002e10 <HAL_RCC_ClockConfig>:
{
 8002e10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002e14:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8002e16:	4604      	mov	r4, r0
 8002e18:	b910      	cbnz	r0, 8002e20 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8002e1a:	2001      	movs	r0, #1
}
 8002e1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002e20:	4a4a      	ldr	r2, [pc, #296]	@ (8002f4c <HAL_RCC_ClockConfig+0x13c>)
 8002e22:	6813      	ldr	r3, [r2, #0]
 8002e24:	f003 0307 	and.w	r3, r3, #7
 8002e28:	428b      	cmp	r3, r1
 8002e2a:	d32e      	bcc.n	8002e8a <HAL_RCC_ClockConfig+0x7a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e2c:	6822      	ldr	r2, [r4, #0]
 8002e2e:	0791      	lsls	r1, r2, #30
 8002e30:	d436      	bmi.n	8002ea0 <HAL_RCC_ClockConfig+0x90>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e32:	07d2      	lsls	r2, r2, #31
 8002e34:	d43c      	bmi.n	8002eb0 <HAL_RCC_ClockConfig+0xa0>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002e36:	4a45      	ldr	r2, [pc, #276]	@ (8002f4c <HAL_RCC_ClockConfig+0x13c>)
 8002e38:	6813      	ldr	r3, [r2, #0]
 8002e3a:	f003 0307 	and.w	r3, r3, #7
 8002e3e:	42ab      	cmp	r3, r5
 8002e40:	d870      	bhi.n	8002f24 <HAL_RCC_ClockConfig+0x114>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e42:	6822      	ldr	r2, [r4, #0]
 8002e44:	4d42      	ldr	r5, [pc, #264]	@ (8002f50 <HAL_RCC_ClockConfig+0x140>)
 8002e46:	f012 0f04 	tst.w	r2, #4
 8002e4a:	d177      	bne.n	8002f3c <HAL_RCC_ClockConfig+0x12c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e4c:	0713      	lsls	r3, r2, #28
 8002e4e:	d506      	bpl.n	8002e5e <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e50:	686b      	ldr	r3, [r5, #4]
 8002e52:	6922      	ldr	r2, [r4, #16]
 8002e54:	f423 5360 	bic.w	r3, r3, #14336	@ 0x3800
 8002e58:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8002e5c:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002e5e:	f7ff ffb3 	bl	8002dc8 <HAL_RCC_GetSysClockFreq>
 8002e62:	686b      	ldr	r3, [r5, #4]
 8002e64:	22f0      	movs	r2, #240	@ 0xf0
 8002e66:	fa92 f2a2 	rbit	r2, r2
 8002e6a:	fab2 f282 	clz	r2, r2
 8002e6e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002e72:	40d3      	lsrs	r3, r2
 8002e74:	4a37      	ldr	r2, [pc, #220]	@ (8002f54 <HAL_RCC_ClockConfig+0x144>)
 8002e76:	5cd3      	ldrb	r3, [r2, r3]
 8002e78:	40d8      	lsrs	r0, r3
 8002e7a:	4b37      	ldr	r3, [pc, #220]	@ (8002f58 <HAL_RCC_ClockConfig+0x148>)
 8002e7c:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 8002e7e:	4b37      	ldr	r3, [pc, #220]	@ (8002f5c <HAL_RCC_ClockConfig+0x14c>)
 8002e80:	6818      	ldr	r0, [r3, #0]
 8002e82:	f7fe fc6d 	bl	8001760 <HAL_InitTick>
  return HAL_OK;
 8002e86:	2000      	movs	r0, #0
 8002e88:	e7c8      	b.n	8002e1c <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e8a:	6813      	ldr	r3, [r2, #0]
 8002e8c:	f023 0307 	bic.w	r3, r3, #7
 8002e90:	430b      	orrs	r3, r1
 8002e92:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e94:	6813      	ldr	r3, [r2, #0]
 8002e96:	f003 0307 	and.w	r3, r3, #7
 8002e9a:	428b      	cmp	r3, r1
 8002e9c:	d1bd      	bne.n	8002e1a <HAL_RCC_ClockConfig+0xa>
 8002e9e:	e7c5      	b.n	8002e2c <HAL_RCC_ClockConfig+0x1c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ea0:	492b      	ldr	r1, [pc, #172]	@ (8002f50 <HAL_RCC_ClockConfig+0x140>)
 8002ea2:	68a0      	ldr	r0, [r4, #8]
 8002ea4:	684b      	ldr	r3, [r1, #4]
 8002ea6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002eaa:	4303      	orrs	r3, r0
 8002eac:	604b      	str	r3, [r1, #4]
 8002eae:	e7c0      	b.n	8002e32 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002eb0:	6862      	ldr	r2, [r4, #4]
 8002eb2:	4e27      	ldr	r6, [pc, #156]	@ (8002f50 <HAL_RCC_ClockConfig+0x140>)
 8002eb4:	2a01      	cmp	r2, #1
 8002eb6:	d124      	bne.n	8002f02 <HAL_RCC_ClockConfig+0xf2>
 8002eb8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002ebc:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ec0:	6831      	ldr	r1, [r6, #0]
 8002ec2:	fa93 f3a3 	rbit	r3, r3
 8002ec6:	fab3 f383 	clz	r3, r3
 8002eca:	fa02 f303 	lsl.w	r3, r2, r3
 8002ece:	420b      	tst	r3, r1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ed0:	d0a3      	beq.n	8002e1a <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ed2:	6873      	ldr	r3, [r6, #4]
 8002ed4:	f023 0303 	bic.w	r3, r3, #3
 8002ed8:	4313      	orrs	r3, r2
 8002eda:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8002edc:	f7fe fdea 	bl	8001ab4 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ee0:	f241 3888 	movw	r8, #5000	@ 0x1388
    tickstart = HAL_GetTick();
 8002ee4:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ee6:	6873      	ldr	r3, [r6, #4]
 8002ee8:	6862      	ldr	r2, [r4, #4]
 8002eea:	f003 030c 	and.w	r3, r3, #12
 8002eee:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8002ef2:	d0a0      	beq.n	8002e36 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ef4:	f7fe fdde 	bl	8001ab4 <HAL_GetTick>
 8002ef8:	1bc0      	subs	r0, r0, r7
 8002efa:	4540      	cmp	r0, r8
 8002efc:	d9f3      	bls.n	8002ee6 <HAL_RCC_ClockConfig+0xd6>
        return HAL_TIMEOUT;
 8002efe:	2003      	movs	r0, #3
 8002f00:	e78c      	b.n	8002e1c <HAL_RCC_ClockConfig+0xc>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f02:	2a02      	cmp	r2, #2
 8002f04:	bf0c      	ite	eq
 8002f06:	f04f 7300 	moveq.w	r3, #33554432	@ 0x2000000
 8002f0a:	2302      	movne	r3, #2
 8002f0c:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f10:	6830      	ldr	r0, [r6, #0]
 8002f12:	fa93 f3a3 	rbit	r3, r3
 8002f16:	2101      	movs	r1, #1
 8002f18:	fab3 f383 	clz	r3, r3
 8002f1c:	fa01 f303 	lsl.w	r3, r1, r3
 8002f20:	4203      	tst	r3, r0
 8002f22:	e7d5      	b.n	8002ed0 <HAL_RCC_ClockConfig+0xc0>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f24:	6813      	ldr	r3, [r2, #0]
 8002f26:	f023 0307 	bic.w	r3, r3, #7
 8002f2a:	432b      	orrs	r3, r5
 8002f2c:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f2e:	6813      	ldr	r3, [r2, #0]
 8002f30:	f003 0307 	and.w	r3, r3, #7
 8002f34:	42ab      	cmp	r3, r5
 8002f36:	f47f af70 	bne.w	8002e1a <HAL_RCC_ClockConfig+0xa>
 8002f3a:	e782      	b.n	8002e42 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f3c:	686b      	ldr	r3, [r5, #4]
 8002f3e:	68e1      	ldr	r1, [r4, #12]
 8002f40:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8002f44:	430b      	orrs	r3, r1
 8002f46:	606b      	str	r3, [r5, #4]
 8002f48:	e780      	b.n	8002e4c <HAL_RCC_ClockConfig+0x3c>
 8002f4a:	bf00      	nop
 8002f4c:	40022000 	.word	0x40022000
 8002f50:	40021000 	.word	0x40021000
 8002f54:	0800a624 	.word	0x0800a624
 8002f58:	20000000 	.word	0x20000000
 8002f5c:	20000008 	.word	0x20000008

08002f60 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002f60:	4b08      	ldr	r3, [pc, #32]	@ (8002f84 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f62:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	fa92 f2a2 	rbit	r2, r2
 8002f6c:	fab2 f282 	clz	r2, r2
 8002f70:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002f74:	40d3      	lsrs	r3, r2
 8002f76:	4a04      	ldr	r2, [pc, #16]	@ (8002f88 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002f78:	5cd3      	ldrb	r3, [r2, r3]
 8002f7a:	4a04      	ldr	r2, [pc, #16]	@ (8002f8c <HAL_RCC_GetPCLK1Freq+0x2c>)
 8002f7c:	6810      	ldr	r0, [r2, #0]
}    
 8002f7e:	40d8      	lsrs	r0, r3
 8002f80:	4770      	bx	lr
 8002f82:	bf00      	nop
 8002f84:	40021000 	.word	0x40021000
 8002f88:	0800a61c 	.word	0x0800a61c
 8002f8c:	20000000 	.word	0x20000000

08002f90 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002f90:	4b08      	ldr	r3, [pc, #32]	@ (8002fb4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002f92:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	fa92 f2a2 	rbit	r2, r2
 8002f9c:	fab2 f282 	clz	r2, r2
 8002fa0:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8002fa4:	40d3      	lsrs	r3, r2
 8002fa6:	4a04      	ldr	r2, [pc, #16]	@ (8002fb8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002fa8:	5cd3      	ldrb	r3, [r2, r3]
 8002faa:	4a04      	ldr	r2, [pc, #16]	@ (8002fbc <HAL_RCC_GetPCLK2Freq+0x2c>)
 8002fac:	6810      	ldr	r0, [r2, #0]
} 
 8002fae:	40d8      	lsrs	r0, r3
 8002fb0:	4770      	bx	lr
 8002fb2:	bf00      	nop
 8002fb4:	40021000 	.word	0x40021000
 8002fb8:	0800a61c 	.word	0x0800a61c
 8002fbc:	20000000 	.word	0x20000000

08002fc0 <HAL_RCC_GetClockConfig>:
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002fc0:	230f      	movs	r3, #15
 8002fc2:	6003      	str	r3, [r0, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002fc4:	4b0b      	ldr	r3, [pc, #44]	@ (8002ff4 <HAL_RCC_GetClockConfig+0x34>)
 8002fc6:	685a      	ldr	r2, [r3, #4]
 8002fc8:	f002 0203 	and.w	r2, r2, #3
 8002fcc:	6042      	str	r2, [r0, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8002fce:	685a      	ldr	r2, [r3, #4]
 8002fd0:	f002 02f0 	and.w	r2, r2, #240	@ 0xf0
 8002fd4:	6082      	str	r2, [r0, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 8002fd6:	685a      	ldr	r2, [r3, #4]
 8002fd8:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
 8002fdc:	60c2      	str	r2, [r0, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002fde:	685b      	ldr	r3, [r3, #4]
 8002fe0:	08db      	lsrs	r3, r3, #3
 8002fe2:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002fe6:	6103      	str	r3, [r0, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 8002fe8:	4b03      	ldr	r3, [pc, #12]	@ (8002ff8 <HAL_RCC_GetClockConfig+0x38>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f003 0307 	and.w	r3, r3, #7
 8002ff0:	600b      	str	r3, [r1, #0]
}
 8002ff2:	4770      	bx	lr
 8002ff4:	40021000 	.word	0x40021000
 8002ff8:	40022000 	.word	0x40022000

08002ffc <HAL_RCCEx_PeriphCLKConfig>:
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002ffc:	6803      	ldr	r3, [r0, #0]
{
 8002ffe:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003002:	03dd      	lsls	r5, r3, #15
{
 8003004:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003006:	d524      	bpl.n	8003052 <HAL_RCCEx_PeriphCLKConfig+0x56>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003008:	4d78      	ldr	r5, [pc, #480]	@ (80031ec <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 800300a:	69eb      	ldr	r3, [r5, #28]
 800300c:	00d8      	lsls	r0, r3, #3
 800300e:	f100 8091 	bmi.w	8003134 <HAL_RCCEx_PeriphCLKConfig+0x138>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003012:	69eb      	ldr	r3, [r5, #28]
 8003014:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003018:	61eb      	str	r3, [r5, #28]
 800301a:	69eb      	ldr	r3, [r5, #28]
 800301c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003020:	9301      	str	r3, [sp, #4]
 8003022:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8003024:	2601      	movs	r6, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003026:	4f72      	ldr	r7, [pc, #456]	@ (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	05d9      	lsls	r1, r3, #23
 800302c:	f140 8084 	bpl.w	8003138 <HAL_RCCEx_PeriphCLKConfig+0x13c>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003030:	6a2b      	ldr	r3, [r5, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003032:	6862      	ldr	r2, [r4, #4]
 8003034:	f413 7340 	ands.w	r3, r3, #768	@ 0x300
 8003038:	f040 8093 	bne.w	8003162 <HAL_RCCEx_PeriphCLKConfig+0x166>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800303c:	6a2b      	ldr	r3, [r5, #32]
 800303e:	6862      	ldr	r2, [r4, #4]
 8003040:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003044:	4313      	orrs	r3, r2
 8003046:	622b      	str	r3, [r5, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003048:	b11e      	cbz	r6, 8003052 <HAL_RCCEx_PeriphCLKConfig+0x56>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800304a:	69eb      	ldr	r3, [r5, #28]
 800304c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003050:	61eb      	str	r3, [r5, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003052:	6823      	ldr	r3, [r4, #0]
 8003054:	07df      	lsls	r7, r3, #31
 8003056:	d506      	bpl.n	8003066 <HAL_RCCEx_PeriphCLKConfig+0x6a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003058:	4964      	ldr	r1, [pc, #400]	@ (80031ec <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 800305a:	68a0      	ldr	r0, [r4, #8]
 800305c:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 800305e:	f022 0203 	bic.w	r2, r2, #3
 8003062:	4302      	orrs	r2, r0
 8003064:	630a      	str	r2, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003066:	079e      	lsls	r6, r3, #30
 8003068:	d506      	bpl.n	8003078 <HAL_RCCEx_PeriphCLKConfig+0x7c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800306a:	4960      	ldr	r1, [pc, #384]	@ (80031ec <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 800306c:	68e0      	ldr	r0, [r4, #12]
 800306e:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 8003070:	f422 3240 	bic.w	r2, r2, #196608	@ 0x30000
 8003074:	4302      	orrs	r2, r0
 8003076:	630a      	str	r2, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003078:	075d      	lsls	r5, r3, #29
 800307a:	d506      	bpl.n	800308a <HAL_RCCEx_PeriphCLKConfig+0x8e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800307c:	495b      	ldr	r1, [pc, #364]	@ (80031ec <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 800307e:	6920      	ldr	r0, [r4, #16]
 8003080:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 8003082:	f422 2240 	bic.w	r2, r2, #786432	@ 0xc0000
 8003086:	4302      	orrs	r2, r0
 8003088:	630a      	str	r2, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800308a:	0698      	lsls	r0, r3, #26
 800308c:	d506      	bpl.n	800309c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800308e:	4957      	ldr	r1, [pc, #348]	@ (80031ec <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8003090:	69e0      	ldr	r0, [r4, #28]
 8003092:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 8003094:	f022 0210 	bic.w	r2, r2, #16
 8003098:	4302      	orrs	r2, r0
 800309a:	630a      	str	r2, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800309c:	0399      	lsls	r1, r3, #14
 800309e:	d506      	bpl.n	80030ae <HAL_RCCEx_PeriphCLKConfig+0xb2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80030a0:	4952      	ldr	r1, [pc, #328]	@ (80031ec <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 80030a2:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 80030a4:	684a      	ldr	r2, [r1, #4]
 80030a6:	f422 0280 	bic.w	r2, r2, #4194304	@ 0x400000
 80030aa:	4302      	orrs	r2, r0
 80030ac:	604a      	str	r2, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80030ae:	065a      	lsls	r2, r3, #25
 80030b0:	d506      	bpl.n	80030c0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80030b2:	494e      	ldr	r1, [pc, #312]	@ (80031ec <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 80030b4:	6a20      	ldr	r0, [r4, #32]
 80030b6:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 80030b8:	f022 0220 	bic.w	r2, r2, #32
 80030bc:	4302      	orrs	r2, r0
 80030be:	630a      	str	r2, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80030c0:	071f      	lsls	r7, r3, #28
 80030c2:	d506      	bpl.n	80030d2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80030c4:	4949      	ldr	r1, [pc, #292]	@ (80031ec <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 80030c6:	6960      	ldr	r0, [r4, #20]
 80030c8:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 80030ca:	f422 1240 	bic.w	r2, r2, #3145728	@ 0x300000
 80030ce:	4302      	orrs	r2, r0
 80030d0:	630a      	str	r2, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80030d2:	06de      	lsls	r6, r3, #27
 80030d4:	d506      	bpl.n	80030e4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80030d6:	4945      	ldr	r1, [pc, #276]	@ (80031ec <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 80030d8:	69a0      	ldr	r0, [r4, #24]
 80030da:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 80030dc:	f422 0240 	bic.w	r2, r2, #12582912	@ 0xc00000
 80030e0:	4302      	orrs	r2, r0
 80030e2:	630a      	str	r2, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80030e4:	059d      	lsls	r5, r3, #22
 80030e6:	d506      	bpl.n	80030f6 <HAL_RCCEx_PeriphCLKConfig+0xfa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80030e8:	4940      	ldr	r1, [pc, #256]	@ (80031ec <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 80030ea:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 80030ec:	684a      	ldr	r2, [r1, #4]
 80030ee:	f422 0200 	bic.w	r2, r2, #8388608	@ 0x800000
 80030f2:	4302      	orrs	r2, r0
 80030f4:	604a      	str	r2, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80030f6:	0618      	lsls	r0, r3, #24
 80030f8:	d506      	bpl.n	8003108 <HAL_RCCEx_PeriphCLKConfig+0x10c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80030fa:	493c      	ldr	r1, [pc, #240]	@ (80031ec <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 80030fc:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 80030fe:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 8003100:	f422 72f8 	bic.w	r2, r2, #496	@ 0x1f0
 8003104:	4302      	orrs	r2, r0
 8003106:	62ca      	str	r2, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8003108:	05d9      	lsls	r1, r3, #23
 800310a:	d506      	bpl.n	800311a <HAL_RCCEx_PeriphCLKConfig+0x11e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 800310c:	4937      	ldr	r1, [pc, #220]	@ (80031ec <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 800310e:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8003110:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 8003112:	f422 5278 	bic.w	r2, r2, #15872	@ 0x3e00
 8003116:	4302      	orrs	r2, r0
 8003118:	62ca      	str	r2, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800311a:	04da      	lsls	r2, r3, #19
 800311c:	d506      	bpl.n	800312c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800311e:	4933      	ldr	r1, [pc, #204]	@ (80031ec <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8003120:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8003122:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 8003124:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003128:	4302      	orrs	r2, r0
 800312a:	630a      	str	r2, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 800312c:	049b      	lsls	r3, r3, #18
 800312e:	d454      	bmi.n	80031da <HAL_RCCEx_PeriphCLKConfig+0x1de>
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003130:	2000      	movs	r0, #0
 8003132:	e013      	b.n	800315c <HAL_RCCEx_PeriphCLKConfig+0x160>
  FlagStatus       pwrclkchanged = RESET;
 8003134:	2600      	movs	r6, #0
 8003136:	e776      	b.n	8003026 <HAL_RCCEx_PeriphCLKConfig+0x2a>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800313e:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8003140:	f7fe fcb8 	bl	8001ab4 <HAL_GetTick>
 8003144:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	05da      	lsls	r2, r3, #23
 800314a:	f53f af71 	bmi.w	8003030 <HAL_RCCEx_PeriphCLKConfig+0x34>
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800314e:	f7fe fcb1 	bl	8001ab4 <HAL_GetTick>
 8003152:	eba0 0008 	sub.w	r0, r0, r8
 8003156:	2864      	cmp	r0, #100	@ 0x64
 8003158:	d9f5      	bls.n	8003146 <HAL_RCCEx_PeriphCLKConfig+0x14a>
          return HAL_TIMEOUT;
 800315a:	2003      	movs	r0, #3
}
 800315c:	b002      	add	sp, #8
 800315e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003162:	f402 7240 	and.w	r2, r2, #768	@ 0x300
 8003166:	429a      	cmp	r2, r3
 8003168:	f43f af68 	beq.w	800303c <HAL_RCCEx_PeriphCLKConfig+0x40>
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800316c:	6a29      	ldr	r1, [r5, #32]
 800316e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003172:	f421 7040 	bic.w	r0, r1, #768	@ 0x300
 8003176:	fa93 f2a3 	rbit	r2, r3
      __HAL_RCC_BACKUPRESET_FORCE();
 800317a:	f8df c078 	ldr.w	ip, [pc, #120]	@ 80031f4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 800317e:	fab2 f282 	clz	r2, r2
 8003182:	4462      	add	r2, ip
 8003184:	0092      	lsls	r2, r2, #2
 8003186:	2701      	movs	r7, #1
 8003188:	6017      	str	r7, [r2, #0]
 800318a:	fa93 f3a3 	rbit	r3, r3
      __HAL_RCC_BACKUPRESET_RELEASE();
 800318e:	fab3 f383 	clz	r3, r3
 8003192:	4463      	add	r3, ip
 8003194:	009b      	lsls	r3, r3, #2
 8003196:	2200      	movs	r2, #0
 8003198:	601a      	str	r2, [r3, #0]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800319a:	07cb      	lsls	r3, r1, #31
      RCC->BDCR = temp_reg;
 800319c:	6228      	str	r0, [r5, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800319e:	f57f af4d 	bpl.w	800303c <HAL_RCCEx_PeriphCLKConfig+0x40>
        tickstart = HAL_GetTick();
 80031a2:	f7fe fc87 	bl	8001ab4 <HAL_GetTick>
 80031a6:	f04f 0802 	mov.w	r8, #2
 80031aa:	4681      	mov	r9, r0
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031ac:	f241 3a88 	movw	sl, #5000	@ 0x1388
 80031b0:	fa98 f3a8 	rbit	r3, r8
 80031b4:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031b8:	6a2a      	ldr	r2, [r5, #32]
 80031ba:	fa98 f3a8 	rbit	r3, r8
 80031be:	fab3 f383 	clz	r3, r3
 80031c2:	fa07 f303 	lsl.w	r3, r7, r3
 80031c6:	4213      	tst	r3, r2
 80031c8:	f47f af38 	bne.w	800303c <HAL_RCCEx_PeriphCLKConfig+0x40>
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031cc:	f7fe fc72 	bl	8001ab4 <HAL_GetTick>
 80031d0:	eba0 0009 	sub.w	r0, r0, r9
 80031d4:	4550      	cmp	r0, sl
 80031d6:	d9eb      	bls.n	80031b0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 80031d8:	e7bf      	b.n	800315a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80031da:	4a04      	ldr	r2, [pc, #16]	@ (80031ec <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 80031dc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80031de:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 80031e0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80031e4:	430b      	orrs	r3, r1
 80031e6:	6313      	str	r3, [r2, #48]	@ 0x30
 80031e8:	e7a2      	b.n	8003130 <HAL_RCCEx_PeriphCLKConfig+0x134>
 80031ea:	bf00      	nop
 80031ec:	40021000 	.word	0x40021000
 80031f0:	40007000 	.word	0x40007000
 80031f4:	10908100 	.word	0x10908100

080031f8 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80031f8:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 80031fa:	6803      	ldr	r3, [r0, #0]
 80031fc:	4a09      	ldr	r2, [pc, #36]	@ (8003224 <HAL_RTC_WaitForSynchro+0x2c>)
 80031fe:	60da      	str	r2, [r3, #12]
{
 8003200:	4604      	mov	r4, r0

  /* Get tick */
  tickstart = HAL_GetTick();
 8003202:	f7fe fc57 	bl	8001ab4 <HAL_GetTick>
 8003206:	4605      	mov	r5, r0

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003208:	6823      	ldr	r3, [r4, #0]
 800320a:	68db      	ldr	r3, [r3, #12]
 800320c:	069b      	lsls	r3, r3, #26
 800320e:	d501      	bpl.n	8003214 <HAL_RTC_WaitForSynchro+0x1c>
    {
      return HAL_TIMEOUT;
    }
  }

  return HAL_OK;
 8003210:	2000      	movs	r0, #0
}
 8003212:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003214:	f7fe fc4e 	bl	8001ab4 <HAL_GetTick>
 8003218:	1b40      	subs	r0, r0, r5
 800321a:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 800321e:	d9f3      	bls.n	8003208 <HAL_RTC_WaitForSynchro+0x10>
      return HAL_TIMEOUT;
 8003220:	2003      	movs	r0, #3
 8003222:	e7f6      	b.n	8003212 <HAL_RTC_WaitForSynchro+0x1a>
 8003224:	0001ff5f 	.word	0x0001ff5f

08003228 <RTC_EnterInitMode>:
{
  uint32_t tickstart = 0U;
  HAL_StatusTypeDef status = HAL_OK;

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8003228:	6803      	ldr	r3, [r0, #0]
{
 800322a:	b570      	push	{r4, r5, r6, lr}
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 800322c:	68dc      	ldr	r4, [r3, #12]
 800322e:	f014 0440 	ands.w	r4, r4, #64	@ 0x40
{
 8003232:	4605      	mov	r5, r0
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8003234:	d117      	bne.n	8003266 <RTC_EnterInitMode+0x3e>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8003236:	68da      	ldr	r2, [r3, #12]
 8003238:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800323c:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800323e:	f7fe fc39 	bl	8001ab4 <HAL_GetTick>
 8003242:	4606      	mov	r6, r0

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8003244:	682b      	ldr	r3, [r5, #0]
 8003246:	68db      	ldr	r3, [r3, #12]
 8003248:	065b      	lsls	r3, r3, #25
 800324a:	d400      	bmi.n	800324e <RTC_EnterInitMode+0x26>
 800324c:	b10c      	cbz	r4, 8003252 <RTC_EnterInitMode+0x2a>
      }
    }
  }

  return status;
}
 800324e:	4620      	mov	r0, r4
 8003250:	bd70      	pop	{r4, r5, r6, pc}
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003252:	f7fe fc2f 	bl	8001ab4 <HAL_GetTick>
 8003256:	1b80      	subs	r0, r0, r6
 8003258:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
        hrtc->State = HAL_RTC_STATE_ERROR;
 800325c:	bf82      	ittt	hi
 800325e:	2304      	movhi	r3, #4
 8003260:	776b      	strbhi	r3, [r5, #29]
        status = HAL_ERROR;
 8003262:	2401      	movhi	r4, #1
 8003264:	e7ee      	b.n	8003244 <RTC_EnterInitMode+0x1c>
  HAL_StatusTypeDef status = HAL_OK;
 8003266:	2400      	movs	r4, #0
 8003268:	e7f1      	b.n	800324e <RTC_EnterInitMode+0x26>

0800326a <RTC_ExitInitMode>:
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
  HAL_StatusTypeDef status = HAL_OK;

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800326a:	6803      	ldr	r3, [r0, #0]
 800326c:	68da      	ldr	r2, [r3, #12]
 800326e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
{
 8003272:	b510      	push	{r4, lr}
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8003274:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8003276:	689b      	ldr	r3, [r3, #8]
 8003278:	069b      	lsls	r3, r3, #26
{
 800327a:	4604      	mov	r4, r0
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800327c:	d501      	bpl.n	8003282 <RTC_ExitInitMode+0x18>
  HAL_StatusTypeDef status = HAL_OK;
 800327e:	2000      	movs	r0, #0
      status = HAL_ERROR;
    }
  }

  return status;
}
 8003280:	bd10      	pop	{r4, pc}
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003282:	f7ff ffb9 	bl	80031f8 <HAL_RTC_WaitForSynchro>
 8003286:	2800      	cmp	r0, #0
 8003288:	d0f9      	beq.n	800327e <RTC_ExitInitMode+0x14>
      hrtc->State = HAL_RTC_STATE_ERROR;
 800328a:	2304      	movs	r3, #4
 800328c:	7763      	strb	r3, [r4, #29]
      status = HAL_ERROR;
 800328e:	2001      	movs	r0, #1
 8003290:	e7f6      	b.n	8003280 <RTC_ExitInitMode+0x16>

08003292 <HAL_RTC_Init>:
{
 8003292:	b510      	push	{r4, lr}
  if (hrtc == NULL)
 8003294:	4604      	mov	r4, r0
 8003296:	2800      	cmp	r0, #0
 8003298:	d041      	beq.n	800331e <HAL_RTC_Init+0x8c>
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800329a:	7f43      	ldrb	r3, [r0, #29]
 800329c:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 80032a0:	b913      	cbnz	r3, 80032a8 <HAL_RTC_Init+0x16>
    hrtc->Lock = HAL_UNLOCKED;
 80032a2:	7702      	strb	r2, [r0, #28]
    HAL_RTC_MspInit(hrtc);
 80032a4:	f7fe f924 	bl	80014f0 <HAL_RTC_MspInit>
  hrtc->State = HAL_RTC_STATE_BUSY;
 80032a8:	2302      	movs	r3, #2
 80032aa:	7763      	strb	r3, [r4, #29]
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80032ac:	6823      	ldr	r3, [r4, #0]
 80032ae:	68da      	ldr	r2, [r3, #12]
 80032b0:	06d2      	lsls	r2, r2, #27
 80032b2:	d503      	bpl.n	80032bc <HAL_RTC_Init+0x2a>
    hrtc->State = HAL_RTC_STATE_READY;
 80032b4:	2301      	movs	r3, #1
 80032b6:	7763      	strb	r3, [r4, #29]
 80032b8:	2000      	movs	r0, #0
}
 80032ba:	bd10      	pop	{r4, pc}
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80032bc:	22ca      	movs	r2, #202	@ 0xca
 80032be:	625a      	str	r2, [r3, #36]	@ 0x24
 80032c0:	2253      	movs	r2, #83	@ 0x53
 80032c2:	625a      	str	r2, [r3, #36]	@ 0x24
    status = RTC_EnterInitMode(hrtc);
 80032c4:	4620      	mov	r0, r4
 80032c6:	f7ff ffaf 	bl	8003228 <RTC_EnterInitMode>
    if (status == HAL_OK)
 80032ca:	bb10      	cbnz	r0, 8003312 <HAL_RTC_Init+0x80>
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80032cc:	6823      	ldr	r3, [r4, #0]
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80032ce:	6920      	ldr	r0, [r4, #16]
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80032d0:	689a      	ldr	r2, [r3, #8]
 80032d2:	f422 02e0 	bic.w	r2, r2, #7340032	@ 0x700000
 80032d6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80032da:	609a      	str	r2, [r3, #8]
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80032dc:	6862      	ldr	r2, [r4, #4]
 80032de:	6899      	ldr	r1, [r3, #8]
 80032e0:	4302      	orrs	r2, r0
 80032e2:	6960      	ldr	r0, [r4, #20]
 80032e4:	4302      	orrs	r2, r0
 80032e6:	430a      	orrs	r2, r1
 80032e8:	609a      	str	r2, [r3, #8]
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80032ea:	68e2      	ldr	r2, [r4, #12]
 80032ec:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80032ee:	691a      	ldr	r2, [r3, #16]
 80032f0:	68a1      	ldr	r1, [r4, #8]
 80032f2:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80032f6:	611a      	str	r2, [r3, #16]
      status = RTC_ExitInitMode(hrtc);
 80032f8:	4620      	mov	r0, r4
 80032fa:	f7ff ffb6 	bl	800326a <RTC_ExitInitMode>
    if (status == HAL_OK)
 80032fe:	b940      	cbnz	r0, 8003312 <HAL_RTC_Init+0x80>
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8003300:	6823      	ldr	r3, [r4, #0]
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8003302:	69a1      	ldr	r1, [r4, #24]
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8003304:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003306:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800330a:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800330c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800330e:	430a      	orrs	r2, r1
 8003310:	641a      	str	r2, [r3, #64]	@ 0x40
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003312:	6823      	ldr	r3, [r4, #0]
 8003314:	22ff      	movs	r2, #255	@ 0xff
 8003316:	625a      	str	r2, [r3, #36]	@ 0x24
  if (status == HAL_OK)
 8003318:	2800      	cmp	r0, #0
 800331a:	d0cb      	beq.n	80032b4 <HAL_RTC_Init+0x22>
 800331c:	e7cd      	b.n	80032ba <HAL_RTC_Init+0x28>
    return HAL_ERROR;
 800331e:	2001      	movs	r0, #1
 8003320:	e7cb      	b.n	80032ba <HAL_RTC_Init+0x28>

08003322 <RTC_ByteToBcd2>:
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
  uint32_t bcdhigh = 0U;
 8003322:	2300      	movs	r3, #0

  while (number >= 10U)
 8003324:	2809      	cmp	r0, #9
 8003326:	d803      	bhi.n	8003330 <RTC_ByteToBcd2+0xe>
  {
    bcdhigh++;
    number -= 10U;
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8003328:	ea40 1003 	orr.w	r0, r0, r3, lsl #4
}
 800332c:	b2c0      	uxtb	r0, r0
 800332e:	4770      	bx	lr
    number -= 10U;
 8003330:	380a      	subs	r0, #10
    bcdhigh++;
 8003332:	3301      	adds	r3, #1
    number -= 10U;
 8003334:	b2c0      	uxtb	r0, r0
 8003336:	e7f5      	b.n	8003324 <RTC_ByteToBcd2+0x2>

08003338 <HAL_RTC_SetTime>:
{
 8003338:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(hrtc);
 800333c:	7f03      	ldrb	r3, [r0, #28]
 800333e:	2b01      	cmp	r3, #1
{
 8003340:	4606      	mov	r6, r0
 8003342:	460f      	mov	r7, r1
 8003344:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(hrtc);
 8003348:	d041      	beq.n	80033ce <HAL_RTC_SetTime+0x96>
 800334a:	2301      	movs	r3, #1
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800334c:	6831      	ldr	r1, [r6, #0]
  __HAL_LOCK(hrtc);
 800334e:	7733      	strb	r3, [r6, #28]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003350:	7770      	strb	r0, [r6, #29]
  if (Format == RTC_FORMAT_BIN)
 8003352:	7838      	ldrb	r0, [r7, #0]
 8003354:	787d      	ldrb	r5, [r7, #1]
 8003356:	78bc      	ldrb	r4, [r7, #2]
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003358:	688b      	ldr	r3, [r1, #8]
  if (Format == RTC_FORMAT_BIN)
 800335a:	2a00      	cmp	r2, #0
 800335c:	d139      	bne.n	80033d2 <HAL_RTC_SetTime+0x9a>
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800335e:	f013 0340 	ands.w	r3, r3, #64	@ 0x40
      sTime->TimeFormat = 0x00U;
 8003362:	bf08      	it	eq
 8003364:	70fb      	strbeq	r3, [r7, #3]
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8003366:	f7ff ffdc 	bl	8003322 <RTC_ByteToBcd2>
 800336a:	4680      	mov	r8, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800336c:	4628      	mov	r0, r5
 800336e:	f7ff ffd8 	bl	8003322 <RTC_ByteToBcd2>
 8003372:	4602      	mov	r2, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8003374:	4620      	mov	r0, r4
 8003376:	f7ff ffd4 	bl	8003322 <RTC_ByteToBcd2>
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 800337a:	78fb      	ldrb	r3, [r7, #3]
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800337c:	ea40 5383 	orr.w	r3, r0, r3, lsl #22
 8003380:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8003384:	ea43 2402 	orr.w	r4, r3, r2, lsl #8
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003388:	23ca      	movs	r3, #202	@ 0xca
 800338a:	624b      	str	r3, [r1, #36]	@ 0x24
 800338c:	2353      	movs	r3, #83	@ 0x53
 800338e:	624b      	str	r3, [r1, #36]	@ 0x24
  status = RTC_EnterInitMode(hrtc);
 8003390:	4630      	mov	r0, r6
 8003392:	f7ff ff49 	bl	8003228 <RTC_EnterInitMode>
  if (status == HAL_OK)
 8003396:	b9a8      	cbnz	r0, 80033c4 <HAL_RTC_SetTime+0x8c>
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8003398:	6832      	ldr	r2, [r6, #0]
 800339a:	f004 347f 	and.w	r4, r4, #2139062143	@ 0x7f7f7f7f
 800339e:	f024 44fe 	bic.w	r4, r4, #2130706432	@ 0x7f000000
 80033a2:	6014      	str	r4, [r2, #0]
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 80033a4:	6893      	ldr	r3, [r2, #8]
 80033a6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80033aa:	6093      	str	r3, [r2, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80033ac:	e9d7 3003 	ldrd	r3, r0, [r7, #12]
 80033b0:	6891      	ldr	r1, [r2, #8]
 80033b2:	4303      	orrs	r3, r0
 80033b4:	430b      	orrs	r3, r1
 80033b6:	6093      	str	r3, [r2, #8]
    status = RTC_ExitInitMode(hrtc);
 80033b8:	4630      	mov	r0, r6
 80033ba:	f7ff ff56 	bl	800326a <RTC_ExitInitMode>
  if (status == HAL_OK)
 80033be:	b908      	cbnz	r0, 80033c4 <HAL_RTC_SetTime+0x8c>
    hrtc->State = HAL_RTC_STATE_READY;
 80033c0:	2301      	movs	r3, #1
 80033c2:	7773      	strb	r3, [r6, #29]
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80033c4:	6833      	ldr	r3, [r6, #0]
 80033c6:	22ff      	movs	r2, #255	@ 0xff
 80033c8:	625a      	str	r2, [r3, #36]	@ 0x24
  __HAL_UNLOCK(hrtc);
 80033ca:	2300      	movs	r3, #0
 80033cc:	7733      	strb	r3, [r6, #28]
}
 80033ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80033d2:	f013 0340 	ands.w	r3, r3, #64	@ 0x40
      sTime->TimeFormat = 0x00U;
 80033d6:	bf08      	it	eq
 80033d8:	70fb      	strbeq	r3, [r7, #3]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80033da:	022d      	lsls	r5, r5, #8
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80033dc:	78fa      	ldrb	r2, [r7, #3]
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80033de:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80033e2:	ea45 0304 	orr.w	r3, r5, r4
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80033e6:	ea43 5482 	orr.w	r4, r3, r2, lsl #22
 80033ea:	e7cd      	b.n	8003388 <HAL_RTC_SetTime+0x50>

080033ec <HAL_RTC_SetDate>:
{
 80033ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hrtc);
 80033ee:	7f03      	ldrb	r3, [r0, #28]
 80033f0:	2b01      	cmp	r3, #1
{
 80033f2:	4605      	mov	r5, r0
 80033f4:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(hrtc);
 80033f8:	d027      	beq.n	800344a <HAL_RTC_SetDate+0x5e>
 80033fa:	2301      	movs	r3, #1
 80033fc:	772b      	strb	r3, [r5, #28]
  hrtc->State = HAL_RTC_STATE_BUSY;
 80033fe:	7768      	strb	r0, [r5, #29]
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8003400:	780e      	ldrb	r6, [r1, #0]
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8003402:	78c8      	ldrb	r0, [r1, #3]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8003404:	784c      	ldrb	r4, [r1, #1]
                  ((uint32_t) sDate->Date)                      | \
 8003406:	788f      	ldrb	r7, [r1, #2]
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8003408:	0376      	lsls	r6, r6, #13
  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800340a:	b1fa      	cbz	r2, 800344c <HAL_RTC_SetDate+0x60>
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800340c:	ea46 4300 	orr.w	r3, r6, r0, lsl #16
 8003410:	433b      	orrs	r3, r7
 8003412:	ea43 2404 	orr.w	r4, r3, r4, lsl #8
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003416:	682b      	ldr	r3, [r5, #0]
 8003418:	22ca      	movs	r2, #202	@ 0xca
 800341a:	625a      	str	r2, [r3, #36]	@ 0x24
 800341c:	2253      	movs	r2, #83	@ 0x53
 800341e:	625a      	str	r2, [r3, #36]	@ 0x24
  status = RTC_EnterInitMode(hrtc);
 8003420:	4628      	mov	r0, r5
 8003422:	f7ff ff01 	bl	8003228 <RTC_EnterInitMode>
  if (status == HAL_OK)
 8003426:	b958      	cbnz	r0, 8003440 <HAL_RTC_SetDate+0x54>
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8003428:	682a      	ldr	r2, [r5, #0]
 800342a:	f024 447f 	bic.w	r4, r4, #4278190080	@ 0xff000000
 800342e:	f024 04c0 	bic.w	r4, r4, #192	@ 0xc0
 8003432:	6054      	str	r4, [r2, #4]
    status = RTC_ExitInitMode(hrtc);
 8003434:	4628      	mov	r0, r5
 8003436:	f7ff ff18 	bl	800326a <RTC_ExitInitMode>
  if (status == HAL_OK)
 800343a:	b908      	cbnz	r0, 8003440 <HAL_RTC_SetDate+0x54>
    hrtc->State = HAL_RTC_STATE_READY;
 800343c:	2301      	movs	r3, #1
 800343e:	776b      	strb	r3, [r5, #29]
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003440:	682b      	ldr	r3, [r5, #0]
 8003442:	22ff      	movs	r2, #255	@ 0xff
 8003444:	625a      	str	r2, [r3, #36]	@ 0x24
  __HAL_UNLOCK(hrtc);
 8003446:	2300      	movs	r3, #0
 8003448:	772b      	strb	r3, [r5, #28]
}
 800344a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800344c:	06e3      	lsls	r3, r4, #27
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800344e:	bf42      	ittt	mi
 8003450:	f024 0410 	bicmi.w	r4, r4, #16
 8003454:	340a      	addmi	r4, #10
 8003456:	704c      	strbmi	r4, [r1, #1]
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8003458:	f7ff ff63 	bl	8003322 <RTC_ByteToBcd2>
 800345c:	4604      	mov	r4, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800345e:	7848      	ldrb	r0, [r1, #1]
 8003460:	f7ff ff5f 	bl	8003322 <RTC_ByteToBcd2>
 8003464:	4602      	mov	r2, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8003466:	4638      	mov	r0, r7
 8003468:	f7ff ff5b 	bl	8003322 <RTC_ByteToBcd2>
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800346c:	ea40 0306 	orr.w	r3, r0, r6
 8003470:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8003474:	ea43 2402 	orr.w	r4, r3, r2, lsl #8
 8003478:	e7cd      	b.n	8003416 <HAL_RTC_SetDate+0x2a>

0800347a <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800347a:	b570      	push	{r4, r5, r6, lr}
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800347c:	4604      	mov	r4, r0
 800347e:	2800      	cmp	r0, #0
 8003480:	d067      	beq.n	8003552 <HAL_SPI_Init+0xd8>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003482:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8003484:	2b00      	cmp	r3, #0
 8003486:	d15d      	bne.n	8003544 <HAL_SPI_Init+0xca>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003488:	6842      	ldr	r2, [r0, #4]
 800348a:	f5b2 7f82 	cmp.w	r2, #260	@ 0x104
 800348e:	d000      	beq.n	8003492 <HAL_SPI_Init+0x18>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003490:	61c3      	str	r3, [r0, #28]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003492:	2300      	movs	r3, #0
 8003494:	62a3      	str	r3, [r4, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003496:	f894 305d 	ldrb.w	r3, [r4, #93]	@ 0x5d
 800349a:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800349e:	b923      	cbnz	r3, 80034aa <HAL_SPI_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80034a0:	f884 205c 	strb.w	r2, [r4, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80034a4:	4620      	mov	r0, r4
 80034a6:	f7fe f837 	bl	8001518 <HAL_SPI_MspInit>
  }

  hspi->State = HAL_SPI_STATE_BUSY;

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80034aa:	6822      	ldr	r2, [r4, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80034ac:	68e0      	ldr	r0, [r4, #12]
  hspi->State = HAL_SPI_STATE_BUSY;
 80034ae:	2302      	movs	r3, #2
 80034b0:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
  __HAL_SPI_DISABLE(hspi);
 80034b4:	6813      	ldr	r3, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80034b6:	f5b0 6fe0 	cmp.w	r0, #1792	@ 0x700
  __HAL_SPI_DISABLE(hspi);
 80034ba:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80034be:	6013      	str	r3, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80034c0:	f04f 0300 	mov.w	r3, #0
 80034c4:	d942      	bls.n	800354c <HAL_SPI_Init+0xd2>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80034c6:	461d      	mov	r5, r3
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80034c8:	f5b0 6f70 	cmp.w	r0, #3840	@ 0xf00
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80034cc:	bf18      	it	ne
 80034ce:	62a3      	strne	r3, [r4, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80034d0:	68a6      	ldr	r6, [r4, #8]
 80034d2:	6863      	ldr	r3, [r4, #4]
 80034d4:	69a1      	ldr	r1, [r4, #24]
 80034d6:	f406 4604 	and.w	r6, r6, #33792	@ 0x8400
 80034da:	f403 7382 	and.w	r3, r3, #260	@ 0x104
 80034de:	4333      	orrs	r3, r6
 80034e0:	6926      	ldr	r6, [r4, #16]
 80034e2:	f006 0602 	and.w	r6, r6, #2
 80034e6:	4333      	orrs	r3, r6
 80034e8:	6966      	ldr	r6, [r4, #20]
 80034ea:	f006 0601 	and.w	r6, r6, #1
 80034ee:	4333      	orrs	r3, r6
 80034f0:	f401 7600 	and.w	r6, r1, #512	@ 0x200
 80034f4:	4333      	orrs	r3, r6
 80034f6:	69e6      	ldr	r6, [r4, #28]
 80034f8:	f006 0638 	and.w	r6, r6, #56	@ 0x38
 80034fc:	4333      	orrs	r3, r6
 80034fe:	6a26      	ldr	r6, [r4, #32]
 8003500:	f006 0680 	and.w	r6, r6, #128	@ 0x80
 8003504:	4333      	orrs	r3, r6
 8003506:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8003508:	f406 5600 	and.w	r6, r6, #8192	@ 0x2000
 800350c:	4333      	orrs	r3, r6
 800350e:	6013      	str	r3, [r2, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003510:	6b66      	ldr	r6, [r4, #52]	@ 0x34
 8003512:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8003514:	f006 0608 	and.w	r6, r6, #8
 8003518:	f003 0310 	and.w	r3, r3, #16
 800351c:	f400 6070 	and.w	r0, r0, #3840	@ 0xf00
 8003520:	4333      	orrs	r3, r6
 8003522:	0c09      	lsrs	r1, r1, #16
 8003524:	4303      	orrs	r3, r0
 8003526:	f001 0104 	and.w	r1, r1, #4
 800352a:	430b      	orrs	r3, r1
 800352c:	432b      	orrs	r3, r5
 800352e:	6053      	str	r3, [r2, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003530:	69d3      	ldr	r3, [r2, #28]
 8003532:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003536:	61d3      	str	r3, [r2, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003538:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 800353a:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800353c:	6620      	str	r0, [r4, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800353e:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d

  return HAL_OK;
}
 8003542:	bd70      	pop	{r4, r5, r6, pc}
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003544:	2300      	movs	r3, #0
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003546:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800354a:	e7a2      	b.n	8003492 <HAL_SPI_Init+0x18>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800354c:	f44f 5580 	mov.w	r5, #4096	@ 0x1000
 8003550:	e7bc      	b.n	80034cc <HAL_SPI_Init+0x52>
    return HAL_ERROR;
 8003552:	2001      	movs	r0, #1
 8003554:	e7f5      	b.n	8003542 <HAL_SPI_Init+0xc8>
	...

08003558 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003558:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800355c:	2b01      	cmp	r3, #1
 800355e:	d12b      	bne.n	80035b8 <HAL_TIM_Base_Start_IT+0x60>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003560:	2302      	movs	r3, #2
 8003562:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003566:	6803      	ldr	r3, [r0, #0]
 8003568:	68da      	ldr	r2, [r3, #12]
 800356a:	f042 0201 	orr.w	r2, r2, #1
 800356e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003570:	4a12      	ldr	r2, [pc, #72]	@ (80035bc <HAL_TIM_Base_Start_IT+0x64>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d012      	beq.n	800359c <HAL_TIM_Base_Start_IT+0x44>
 8003576:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800357a:	d00f      	beq.n	800359c <HAL_TIM_Base_Start_IT+0x44>
 800357c:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 8003580:	4293      	cmp	r3, r2
 8003582:	d00b      	beq.n	800359c <HAL_TIM_Base_Start_IT+0x44>
 8003584:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8003588:	4293      	cmp	r3, r2
 800358a:	d007      	beq.n	800359c <HAL_TIM_Base_Start_IT+0x44>
 800358c:	f502 3296 	add.w	r2, r2, #76800	@ 0x12c00
 8003590:	4293      	cmp	r3, r2
 8003592:	d003      	beq.n	800359c <HAL_TIM_Base_Start_IT+0x44>
 8003594:	f502 6240 	add.w	r2, r2, #3072	@ 0xc00
 8003598:	4293      	cmp	r3, r2
 800359a:	d107      	bne.n	80035ac <HAL_TIM_Base_Start_IT+0x54>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800359c:	6899      	ldr	r1, [r3, #8]
 800359e:	4a08      	ldr	r2, [pc, #32]	@ (80035c0 <HAL_TIM_Base_Start_IT+0x68>)
 80035a0:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035a2:	2a06      	cmp	r2, #6
 80035a4:	d006      	beq.n	80035b4 <HAL_TIM_Base_Start_IT+0x5c>
 80035a6:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 80035aa:	d003      	beq.n	80035b4 <HAL_TIM_Base_Start_IT+0x5c>
    {
      __HAL_TIM_ENABLE(htim);
 80035ac:	681a      	ldr	r2, [r3, #0]
 80035ae:	f042 0201 	orr.w	r2, r2, #1
 80035b2:	601a      	str	r2, [r3, #0]
  {
    __HAL_TIM_ENABLE(htim);
  }

  /* Return function status */
  return HAL_OK;
 80035b4:	2000      	movs	r0, #0
 80035b6:	4770      	bx	lr
    return HAL_ERROR;
 80035b8:	2001      	movs	r0, #1
}
 80035ba:	4770      	bx	lr
 80035bc:	40012c00 	.word	0x40012c00
 80035c0:	00010007 	.word	0x00010007

080035c4 <HAL_TIM_OC_DelayElapsedCallback>:
/**
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
 80035c4:	4770      	bx	lr

080035c6 <HAL_TIM_IC_CaptureCallback>:
/**
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
 80035c6:	4770      	bx	lr

080035c8 <HAL_TIM_PWM_PulseFinishedCallback>:
/**
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
 80035c8:	4770      	bx	lr

080035ca <HAL_TIM_TriggerCallback>:
/**
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
 80035ca:	4770      	bx	lr

080035cc <HAL_TIM_IRQHandler>:
  uint32_t itsource = htim->Instance->DIER;
 80035cc:	6803      	ldr	r3, [r0, #0]
{
 80035ce:	b570      	push	{r4, r5, r6, lr}
  uint32_t itsource = htim->Instance->DIER;
 80035d0:	68dd      	ldr	r5, [r3, #12]
  uint32_t itflag   = htim->Instance->SR;
 80035d2:	691e      	ldr	r6, [r3, #16]
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80035d4:	07b2      	lsls	r2, r6, #30
{
 80035d6:	4604      	mov	r4, r0
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80035d8:	d50d      	bpl.n	80035f6 <HAL_TIM_IRQHandler+0x2a>
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80035da:	07a9      	lsls	r1, r5, #30
 80035dc:	d50b      	bpl.n	80035f6 <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80035de:	f06f 0202 	mvn.w	r2, #2
 80035e2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80035e4:	2201      	movs	r2, #1
 80035e6:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80035e8:	699b      	ldr	r3, [r3, #24]
 80035ea:	079a      	lsls	r2, r3, #30
 80035ec:	d074      	beq.n	80036d8 <HAL_TIM_IRQHandler+0x10c>
          HAL_TIM_IC_CaptureCallback(htim);
 80035ee:	f7ff ffea 	bl	80035c6 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035f2:	2300      	movs	r3, #0
 80035f4:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80035f6:	0773      	lsls	r3, r6, #29
 80035f8:	d510      	bpl.n	800361c <HAL_TIM_IRQHandler+0x50>
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80035fa:	0768      	lsls	r0, r5, #29
 80035fc:	d50e      	bpl.n	800361c <HAL_TIM_IRQHandler+0x50>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80035fe:	6823      	ldr	r3, [r4, #0]
 8003600:	f06f 0204 	mvn.w	r2, #4
 8003604:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003606:	2202      	movs	r2, #2
 8003608:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800360a:	699b      	ldr	r3, [r3, #24]
 800360c:	f413 7f40 	tst.w	r3, #768	@ 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8003610:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003612:	d067      	beq.n	80036e4 <HAL_TIM_IRQHandler+0x118>
        HAL_TIM_IC_CaptureCallback(htim);
 8003614:	f7ff ffd7 	bl	80035c6 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003618:	2300      	movs	r3, #0
 800361a:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800361c:	0731      	lsls	r1, r6, #28
 800361e:	d50f      	bpl.n	8003640 <HAL_TIM_IRQHandler+0x74>
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003620:	072a      	lsls	r2, r5, #28
 8003622:	d50d      	bpl.n	8003640 <HAL_TIM_IRQHandler+0x74>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003624:	6823      	ldr	r3, [r4, #0]
 8003626:	f06f 0208 	mvn.w	r2, #8
 800362a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800362c:	2204      	movs	r2, #4
 800362e:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003630:	69db      	ldr	r3, [r3, #28]
 8003632:	079b      	lsls	r3, r3, #30
        HAL_TIM_IC_CaptureCallback(htim);
 8003634:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003636:	d05b      	beq.n	80036f0 <HAL_TIM_IRQHandler+0x124>
        HAL_TIM_IC_CaptureCallback(htim);
 8003638:	f7ff ffc5 	bl	80035c6 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800363c:	2300      	movs	r3, #0
 800363e:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003640:	06f0      	lsls	r0, r6, #27
 8003642:	d510      	bpl.n	8003666 <HAL_TIM_IRQHandler+0x9a>
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003644:	06e9      	lsls	r1, r5, #27
 8003646:	d50e      	bpl.n	8003666 <HAL_TIM_IRQHandler+0x9a>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003648:	6823      	ldr	r3, [r4, #0]
 800364a:	f06f 0210 	mvn.w	r2, #16
 800364e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003650:	2208      	movs	r2, #8
 8003652:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003654:	69db      	ldr	r3, [r3, #28]
 8003656:	f413 7f40 	tst.w	r3, #768	@ 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 800365a:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800365c:	d04e      	beq.n	80036fc <HAL_TIM_IRQHandler+0x130>
        HAL_TIM_IC_CaptureCallback(htim);
 800365e:	f7ff ffb2 	bl	80035c6 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003662:	2300      	movs	r3, #0
 8003664:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003666:	07f2      	lsls	r2, r6, #31
 8003668:	d508      	bpl.n	800367c <HAL_TIM_IRQHandler+0xb0>
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800366a:	07eb      	lsls	r3, r5, #31
 800366c:	d506      	bpl.n	800367c <HAL_TIM_IRQHandler+0xb0>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800366e:	6823      	ldr	r3, [r4, #0]
 8003670:	f06f 0201 	mvn.w	r2, #1
 8003674:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8003676:	4620      	mov	r0, r4
 8003678:	f7fd fe7c 	bl	8001374 <HAL_TIM_PeriodElapsedCallback>
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800367c:	0630      	lsls	r0, r6, #24
 800367e:	d508      	bpl.n	8003692 <HAL_TIM_IRQHandler+0xc6>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003680:	0629      	lsls	r1, r5, #24
 8003682:	d506      	bpl.n	8003692 <HAL_TIM_IRQHandler+0xc6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003684:	6823      	ldr	r3, [r4, #0]
 8003686:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800368a:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800368c:	4620      	mov	r0, r4
 800368e:	f000 f9b8 	bl	8003a02 <HAL_TIMEx_BreakCallback>
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8003692:	05f2      	lsls	r2, r6, #23
 8003694:	d508      	bpl.n	80036a8 <HAL_TIM_IRQHandler+0xdc>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003696:	062b      	lsls	r3, r5, #24
 8003698:	d506      	bpl.n	80036a8 <HAL_TIM_IRQHandler+0xdc>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800369a:	6823      	ldr	r3, [r4, #0]
 800369c:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80036a0:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 80036a2:	4620      	mov	r0, r4
 80036a4:	f000 f9ae 	bl	8003a04 <HAL_TIMEx_Break2Callback>
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80036a8:	0670      	lsls	r0, r6, #25
 80036aa:	d508      	bpl.n	80036be <HAL_TIM_IRQHandler+0xf2>
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80036ac:	0669      	lsls	r1, r5, #25
 80036ae:	d506      	bpl.n	80036be <HAL_TIM_IRQHandler+0xf2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80036b0:	6823      	ldr	r3, [r4, #0]
 80036b2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80036b6:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80036b8:	4620      	mov	r0, r4
 80036ba:	f7ff ff86 	bl	80035ca <HAL_TIM_TriggerCallback>
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80036be:	06b2      	lsls	r2, r6, #26
 80036c0:	d522      	bpl.n	8003708 <HAL_TIM_IRQHandler+0x13c>
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80036c2:	06ab      	lsls	r3, r5, #26
 80036c4:	d520      	bpl.n	8003708 <HAL_TIM_IRQHandler+0x13c>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80036c6:	6823      	ldr	r3, [r4, #0]
 80036c8:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 80036cc:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80036ce:	611a      	str	r2, [r3, #16]
}
 80036d0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      HAL_TIMEx_CommutCallback(htim);
 80036d4:	f000 b994 	b.w	8003a00 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80036d8:	f7ff ff74 	bl	80035c4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036dc:	4620      	mov	r0, r4
 80036de:	f7ff ff73 	bl	80035c8 <HAL_TIM_PWM_PulseFinishedCallback>
 80036e2:	e786      	b.n	80035f2 <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036e4:	f7ff ff6e 	bl	80035c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036e8:	4620      	mov	r0, r4
 80036ea:	f7ff ff6d 	bl	80035c8 <HAL_TIM_PWM_PulseFinishedCallback>
 80036ee:	e793      	b.n	8003618 <HAL_TIM_IRQHandler+0x4c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036f0:	f7ff ff68 	bl	80035c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036f4:	4620      	mov	r0, r4
 80036f6:	f7ff ff67 	bl	80035c8 <HAL_TIM_PWM_PulseFinishedCallback>
 80036fa:	e79f      	b.n	800363c <HAL_TIM_IRQHandler+0x70>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036fc:	f7ff ff62 	bl	80035c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003700:	4620      	mov	r0, r4
 8003702:	f7ff ff61 	bl	80035c8 <HAL_TIM_PWM_PulseFinishedCallback>
 8003706:	e7ac      	b.n	8003662 <HAL_TIM_IRQHandler+0x96>
}
 8003708:	bd70      	pop	{r4, r5, r6, pc}
	...

0800370c <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800370c:	4a2f      	ldr	r2, [pc, #188]	@ (80037cc <TIM_Base_SetConfig+0xc0>)
  tmpcr1 = TIMx->CR1;
 800370e:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003710:	4290      	cmp	r0, r2
 8003712:	d00e      	beq.n	8003732 <TIM_Base_SetConfig+0x26>
 8003714:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8003718:	d00b      	beq.n	8003732 <TIM_Base_SetConfig+0x26>
 800371a:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 800371e:	4290      	cmp	r0, r2
 8003720:	d007      	beq.n	8003732 <TIM_Base_SetConfig+0x26>
 8003722:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8003726:	4290      	cmp	r0, r2
 8003728:	d003      	beq.n	8003732 <TIM_Base_SetConfig+0x26>
 800372a:	f502 3296 	add.w	r2, r2, #76800	@ 0x12c00
 800372e:	4290      	cmp	r0, r2
 8003730:	d115      	bne.n	800375e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8003732:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003734:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8003738:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800373a:	4a24      	ldr	r2, [pc, #144]	@ (80037cc <TIM_Base_SetConfig+0xc0>)
 800373c:	4290      	cmp	r0, r2
 800373e:	d019      	beq.n	8003774 <TIM_Base_SetConfig+0x68>
 8003740:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8003744:	d016      	beq.n	8003774 <TIM_Base_SetConfig+0x68>
 8003746:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 800374a:	4290      	cmp	r0, r2
 800374c:	d012      	beq.n	8003774 <TIM_Base_SetConfig+0x68>
 800374e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8003752:	4290      	cmp	r0, r2
 8003754:	d00e      	beq.n	8003774 <TIM_Base_SetConfig+0x68>
 8003756:	f502 3296 	add.w	r2, r2, #76800	@ 0x12c00
 800375a:	4290      	cmp	r0, r2
 800375c:	d00a      	beq.n	8003774 <TIM_Base_SetConfig+0x68>
 800375e:	4a1c      	ldr	r2, [pc, #112]	@ (80037d0 <TIM_Base_SetConfig+0xc4>)
 8003760:	4290      	cmp	r0, r2
 8003762:	d007      	beq.n	8003774 <TIM_Base_SetConfig+0x68>
 8003764:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8003768:	4290      	cmp	r0, r2
 800376a:	d003      	beq.n	8003774 <TIM_Base_SetConfig+0x68>
 800376c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8003770:	4290      	cmp	r0, r2
 8003772:	d103      	bne.n	800377c <TIM_Base_SetConfig+0x70>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003774:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8003776:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800377a:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800377c:	694a      	ldr	r2, [r1, #20]
 800377e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003782:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8003784:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003786:	688b      	ldr	r3, [r1, #8]
 8003788:	62c3      	str	r3, [r0, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800378a:	680b      	ldr	r3, [r1, #0]
 800378c:	6283      	str	r3, [r0, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800378e:	4b0f      	ldr	r3, [pc, #60]	@ (80037cc <TIM_Base_SetConfig+0xc0>)
 8003790:	4298      	cmp	r0, r3
 8003792:	d00f      	beq.n	80037b4 <TIM_Base_SetConfig+0xa8>
 8003794:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003798:	4298      	cmp	r0, r3
 800379a:	d00b      	beq.n	80037b4 <TIM_Base_SetConfig+0xa8>
 800379c:	f503 6340 	add.w	r3, r3, #3072	@ 0xc00
 80037a0:	4298      	cmp	r0, r3
 80037a2:	d007      	beq.n	80037b4 <TIM_Base_SetConfig+0xa8>
 80037a4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80037a8:	4298      	cmp	r0, r3
 80037aa:	d003      	beq.n	80037b4 <TIM_Base_SetConfig+0xa8>
 80037ac:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80037b0:	4298      	cmp	r0, r3
 80037b2:	d101      	bne.n	80037b8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80037b4:	690b      	ldr	r3, [r1, #16]
 80037b6:	6303      	str	r3, [r0, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80037b8:	2301      	movs	r3, #1
 80037ba:	6143      	str	r3, [r0, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80037bc:	6903      	ldr	r3, [r0, #16]
 80037be:	07db      	lsls	r3, r3, #31
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80037c0:	bf42      	ittt	mi
 80037c2:	6903      	ldrmi	r3, [r0, #16]
 80037c4:	f023 0301 	bicmi.w	r3, r3, #1
 80037c8:	6103      	strmi	r3, [r0, #16]
  }
}
 80037ca:	4770      	bx	lr
 80037cc:	40012c00 	.word	0x40012c00
 80037d0:	40014000 	.word	0x40014000

080037d4 <HAL_TIM_Base_Init>:
{
 80037d4:	b510      	push	{r4, lr}
  if (htim == NULL)
 80037d6:	4604      	mov	r4, r0
 80037d8:	b350      	cbz	r0, 8003830 <HAL_TIM_Base_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 80037da:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 80037de:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 80037e2:	b91b      	cbnz	r3, 80037ec <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 80037e4:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 80037e8:	f7fd fee6 	bl	80015b8 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 80037ec:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80037ee:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80037f0:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80037f4:	1d21      	adds	r1, r4, #4
 80037f6:	f7ff ff89 	bl	800370c <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80037fa:	2301      	movs	r3, #1
 80037fc:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
  return HAL_OK;
 8003800:	2000      	movs	r0, #0
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003802:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8003806:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 800380a:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 800380e:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 8003812:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003816:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800381a:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 800381e:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 8003822:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
 8003826:	f884 3047 	strb.w	r3, [r4, #71]	@ 0x47
  htim->State = HAL_TIM_STATE_READY;
 800382a:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
}
 800382e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8003830:	2001      	movs	r0, #1
 8003832:	e7fc      	b.n	800382e <HAL_TIM_Base_Init+0x5a>

08003834 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003834:	b510      	push	{r4, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003836:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003838:	430a      	orrs	r2, r1
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800383a:	f424 447f 	bic.w	r4, r4, #65280	@ 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800383e:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8003842:	4322      	orrs	r2, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003844:	6082      	str	r2, [r0, #8]
}
 8003846:	bd10      	pop	{r4, pc}

08003848 <HAL_TIM_ConfigClockSource>:
{
 8003848:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 800384a:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 800384e:	2b01      	cmp	r3, #1
{
 8003850:	4604      	mov	r4, r0
 8003852:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 8003856:	f000 808c 	beq.w	8003972 <HAL_TIM_ConfigClockSource+0x12a>
  htim->State = HAL_TIM_STATE_BUSY;
 800385a:	f884 003d 	strb.w	r0, [r4, #61]	@ 0x3d
  __HAL_LOCK(htim);
 800385e:	2201      	movs	r2, #1
  tmpsmcr = htim->Instance->SMCR;
 8003860:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(htim);
 8003862:	f884 203c 	strb.w	r2, [r4, #60]	@ 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8003866:	6885      	ldr	r5, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003868:	4b43      	ldr	r3, [pc, #268]	@ (8003978 <HAL_TIM_ConfigClockSource+0x130>)
 800386a:	402b      	ands	r3, r5
  htim->Instance->SMCR = tmpsmcr;
 800386c:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 800386e:	680b      	ldr	r3, [r1, #0]
 8003870:	2b60      	cmp	r3, #96	@ 0x60
 8003872:	d04f      	beq.n	8003914 <HAL_TIM_ConfigClockSource+0xcc>
 8003874:	d832      	bhi.n	80038dc <HAL_TIM_ConfigClockSource+0x94>
 8003876:	2b40      	cmp	r3, #64	@ 0x40
 8003878:	d064      	beq.n	8003944 <HAL_TIM_ConfigClockSource+0xfc>
 800387a:	d816      	bhi.n	80038aa <HAL_TIM_ConfigClockSource+0x62>
 800387c:	2b20      	cmp	r3, #32
 800387e:	d00d      	beq.n	800389c <HAL_TIM_ConfigClockSource+0x54>
 8003880:	d80a      	bhi.n	8003898 <HAL_TIM_ConfigClockSource+0x50>
 8003882:	f033 0110 	bics.w	r1, r3, #16
 8003886:	d009      	beq.n	800389c <HAL_TIM_ConfigClockSource+0x54>
  htim->State = HAL_TIM_STATE_READY;
 8003888:	2301      	movs	r3, #1
 800388a:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 800388e:	2300      	movs	r3, #0
 8003890:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 8003894:	4610      	mov	r0, r2
 8003896:	bd38      	pop	{r3, r4, r5, pc}
  switch (sClockSourceConfig->ClockSource)
 8003898:	2b30      	cmp	r3, #48	@ 0x30
 800389a:	d1f5      	bne.n	8003888 <HAL_TIM_ConfigClockSource+0x40>
  tmpsmcr = TIMx->SMCR;
 800389c:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800389e:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80038a2:	4313      	orrs	r3, r2
 80038a4:	f043 0307 	orr.w	r3, r3, #7
  TIMx->SMCR = tmpsmcr;
 80038a8:	e028      	b.n	80038fc <HAL_TIM_ConfigClockSource+0xb4>
  switch (sClockSourceConfig->ClockSource)
 80038aa:	2b50      	cmp	r3, #80	@ 0x50
 80038ac:	d1ec      	bne.n	8003888 <HAL_TIM_ConfigClockSource+0x40>
                               sClockSourceConfig->ClockPolarity,
 80038ae:	684a      	ldr	r2, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 80038b0:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 80038b2:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80038b4:	6a03      	ldr	r3, [r0, #32]
 80038b6:	f023 0301 	bic.w	r3, r3, #1
 80038ba:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80038bc:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80038be:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80038c2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80038c6:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccer |= TIM_ICPolarity;
 80038ca:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 80038cc:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 80038ce:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 80038d0:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80038d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80038d6:	f043 0357 	orr.w	r3, r3, #87	@ 0x57
  TIMx->SMCR = tmpsmcr;
 80038da:	e00f      	b.n	80038fc <HAL_TIM_ConfigClockSource+0xb4>
  switch (sClockSourceConfig->ClockSource)
 80038dc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80038e0:	d00d      	beq.n	80038fe <HAL_TIM_ConfigClockSource+0xb6>
 80038e2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80038e6:	d00c      	beq.n	8003902 <HAL_TIM_ConfigClockSource+0xba>
 80038e8:	2b70      	cmp	r3, #112	@ 0x70
 80038ea:	d1cd      	bne.n	8003888 <HAL_TIM_ConfigClockSource+0x40>
      TIM_ETR_SetConfig(htim->Instance,
 80038ec:	68cb      	ldr	r3, [r1, #12]
 80038ee:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 80038f2:	f7ff ff9f 	bl	8003834 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80038f6:	6883      	ldr	r3, [r0, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80038f8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
      htim->Instance->SMCR = tmpsmcr;
 80038fc:	6083      	str	r3, [r0, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80038fe:	2200      	movs	r2, #0
 8003900:	e7c2      	b.n	8003888 <HAL_TIM_ConfigClockSource+0x40>
      TIM_ETR_SetConfig(htim->Instance,
 8003902:	68cb      	ldr	r3, [r1, #12]
 8003904:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8003908:	f7ff ff94 	bl	8003834 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800390c:	6883      	ldr	r3, [r0, #8]
 800390e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003912:	e7f3      	b.n	80038fc <HAL_TIM_ConfigClockSource+0xb4>
  tmpccer = TIMx->CCER;
 8003914:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003916:	6a02      	ldr	r2, [r0, #32]
                               sClockSourceConfig->ClockPolarity,
 8003918:	684d      	ldr	r5, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 800391a:	68c9      	ldr	r1, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800391c:	f022 0210 	bic.w	r2, r2, #16
 8003920:	6202      	str	r2, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003922:	6982      	ldr	r2, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003924:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003928:	f422 4270 	bic.w	r2, r2, #61440	@ 0xf000
  tmpccer |= (TIM_ICPolarity << 4U);
 800392c:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003930:	ea42 3201 	orr.w	r2, r2, r1, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8003934:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8003936:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8003938:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800393a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800393e:	f043 0367 	orr.w	r3, r3, #103	@ 0x67
  TIMx->SMCR = tmpsmcr;
 8003942:	e7db      	b.n	80038fc <HAL_TIM_ConfigClockSource+0xb4>
                               sClockSourceConfig->ClockPolarity,
 8003944:	684a      	ldr	r2, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8003946:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 8003948:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800394a:	6a03      	ldr	r3, [r0, #32]
 800394c:	f023 0301 	bic.w	r3, r3, #1
 8003950:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003952:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003954:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003958:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800395c:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccer |= TIM_ICPolarity;
 8003960:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 8003962:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8003964:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8003966:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003968:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800396c:	f043 0347 	orr.w	r3, r3, #71	@ 0x47
  TIMx->SMCR = tmpsmcr;
 8003970:	e7c4      	b.n	80038fc <HAL_TIM_ConfigClockSource+0xb4>
  __HAL_LOCK(htim);
 8003972:	4602      	mov	r2, r0
 8003974:	e78e      	b.n	8003894 <HAL_TIM_ConfigClockSource+0x4c>
 8003976:	bf00      	nop
 8003978:	fffe0088 	.word	0xfffe0088

0800397c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800397c:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800397e:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8003982:	2b01      	cmp	r3, #1
{
 8003984:	4604      	mov	r4, r0
 8003986:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 800398a:	d032      	beq.n	80039f2 <HAL_TIMEx_MasterConfigSynchronization+0x76>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800398c:	6823      	ldr	r3, [r4, #0]
  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800398e:	4d19      	ldr	r5, [pc, #100]	@ (80039f4 <HAL_TIMEx_MasterConfigSynchronization+0x78>)
  htim->State = HAL_TIM_STATE_BUSY;
 8003990:	f884 003d 	strb.w	r0, [r4, #61]	@ 0x3d
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003994:	42ab      	cmp	r3, r5
  tmpcr2 = htim->Instance->CR2;
 8003996:	685a      	ldr	r2, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;
 8003998:	6898      	ldr	r0, [r3, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800399a:	d002      	beq.n	80039a2 <HAL_TIMEx_MasterConfigSynchronization+0x26>
 800399c:	4e16      	ldr	r6, [pc, #88]	@ (80039f8 <HAL_TIMEx_MasterConfigSynchronization+0x7c>)
 800399e:	42b3      	cmp	r3, r6
 80039a0:	d103      	bne.n	80039aa <HAL_TIMEx_MasterConfigSynchronization+0x2e>
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80039a2:	684e      	ldr	r6, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 80039a4:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80039a8:	4332      	orrs	r2, r6
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80039aa:	680e      	ldr	r6, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 80039ac:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80039b0:	4332      	orrs	r2, r6

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80039b2:	42ab      	cmp	r3, r5
  htim->Instance->CR2 = tmpcr2;
 80039b4:	605a      	str	r2, [r3, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80039b6:	d011      	beq.n	80039dc <HAL_TIMEx_MasterConfigSynchronization+0x60>
 80039b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80039bc:	d00e      	beq.n	80039dc <HAL_TIMEx_MasterConfigSynchronization+0x60>
 80039be:	4a0f      	ldr	r2, [pc, #60]	@ (80039fc <HAL_TIMEx_MasterConfigSynchronization+0x80>)
 80039c0:	4293      	cmp	r3, r2
 80039c2:	d00b      	beq.n	80039dc <HAL_TIMEx_MasterConfigSynchronization+0x60>
 80039c4:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d007      	beq.n	80039dc <HAL_TIMEx_MasterConfigSynchronization+0x60>
 80039cc:	f502 3296 	add.w	r2, r2, #76800	@ 0x12c00
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d003      	beq.n	80039dc <HAL_TIMEx_MasterConfigSynchronization+0x60>
 80039d4:	f502 6240 	add.w	r2, r2, #3072	@ 0xc00
 80039d8:	4293      	cmp	r3, r2
 80039da:	d104      	bne.n	80039e6 <HAL_TIMEx_MasterConfigSynchronization+0x6a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80039dc:	6889      	ldr	r1, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 80039de:	f020 0280 	bic.w	r2, r0, #128	@ 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80039e2:	430a      	orrs	r2, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80039e4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80039e6:	2301      	movs	r3, #1

  __HAL_UNLOCK(htim);
 80039e8:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80039ea:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 80039ee:	f884 003c 	strb.w	r0, [r4, #60]	@ 0x3c

  return HAL_OK;
}
 80039f2:	bd70      	pop	{r4, r5, r6, pc}
 80039f4:	40012c00 	.word	0x40012c00
 80039f8:	40013400 	.word	0x40013400
 80039fc:	40000400 	.word	0x40000400

08003a00 <HAL_TIMEx_CommutCallback>:
/**
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
 8003a00:	4770      	bx	lr

08003a02 <HAL_TIMEx_BreakCallback>:
/**
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
 8003a02:	4770      	bx	lr

08003a04 <HAL_TIMEx_Break2Callback>:
/**
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
 8003a04:	4770      	bx	lr

08003a06 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a06:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a08:	e852 3f00 	ldrex	r3, [r2]
 8003a0c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a10:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 8003a14:	6802      	ldr	r2, [r0, #0]
 8003a16:	2900      	cmp	r1, #0
 8003a18:	d1f5      	bne.n	8003a06 <UART_EndRxTransfer>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a1a:	f102 0308 	add.w	r3, r2, #8
 8003a1e:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a22:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a26:	f102 0c08 	add.w	ip, r2, #8
 8003a2a:	e84c 3100 	strex	r1, r3, [ip]
 8003a2e:	2900      	cmp	r1, #0
 8003a30:	d1f3      	bne.n	8003a1a <UART_EndRxTransfer+0x14>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a32:	6e03      	ldr	r3, [r0, #96]	@ 0x60
 8003a34:	2b01      	cmp	r3, #1
 8003a36:	d107      	bne.n	8003a48 <UART_EndRxTransfer+0x42>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a38:	e852 3f00 	ldrex	r3, [r2]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a3c:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a40:	e842 3100 	strex	r1, r3, [r2]
 8003a44:	2900      	cmp	r1, #0
 8003a46:	d1f7      	bne.n	8003a38 <UART_EndRxTransfer+0x32>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003a48:	2320      	movs	r3, #32
 8003a4a:	f8c0 3080 	str.w	r3, [r0, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a4e:	2300      	movs	r3, #0
 8003a50:	6603      	str	r3, [r0, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003a52:	6683      	str	r3, [r0, #104]	@ 0x68
}
 8003a54:	4770      	bx	lr

08003a56 <HAL_UART_RxCpltCallback>:
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
 8003a56:	4770      	bx	lr

08003a58 <HAL_UART_RxHalfCpltCallback>:
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
 8003a58:	4770      	bx	lr

08003a5a <HAL_UART_ErrorCallback>:
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
 8003a5a:	4770      	bx	lr

08003a5c <UART_DMAError>:
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003a5c:	6a40      	ldr	r0, [r0, #36]	@ 0x24

  const HAL_UART_StateTypeDef gstate = huart->gState;
  const HAL_UART_StateTypeDef rxstate = huart->RxState;

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8003a5e:	6803      	ldr	r3, [r0, #0]
  const HAL_UART_StateTypeDef gstate = huart->gState;
 8003a60:	6fc2      	ldr	r2, [r0, #124]	@ 0x7c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8003a62:	f8d0 1080 	ldr.w	r1, [r0, #128]	@ 0x80
{
 8003a66:	b510      	push	{r4, lr}
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8003a68:	689c      	ldr	r4, [r3, #8]
 8003a6a:	0624      	lsls	r4, r4, #24
 8003a6c:	d50e      	bpl.n	8003a8c <UART_DMAError+0x30>
 8003a6e:	2a21      	cmp	r2, #33	@ 0x21
 8003a70:	d10c      	bne.n	8003a8c <UART_DMAError+0x30>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8003a72:	2200      	movs	r2, #0
 8003a74:	f8a0 2052 	strh.w	r2, [r0, #82]	@ 0x52
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a78:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003a7c:	f022 02c0 	bic.w	r2, r2, #192	@ 0xc0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a80:	e843 2400 	strex	r4, r2, [r3]
 8003a84:	2c00      	cmp	r4, #0
 8003a86:	d1f7      	bne.n	8003a78 <UART_DMAError+0x1c>
  huart->gState = HAL_UART_STATE_READY;
 8003a88:	2220      	movs	r2, #32
 8003a8a:	67c2      	str	r2, [r0, #124]	@ 0x7c
    UART_EndTxTransfer(huart);
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8003a8c:	689b      	ldr	r3, [r3, #8]
 8003a8e:	065b      	lsls	r3, r3, #25
 8003a90:	d506      	bpl.n	8003aa0 <UART_DMAError+0x44>
 8003a92:	2922      	cmp	r1, #34	@ 0x22
 8003a94:	d104      	bne.n	8003aa0 <UART_DMAError+0x44>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8003a96:	2300      	movs	r3, #0
 8003a98:	f8a0 305a 	strh.w	r3, [r0, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 8003a9c:	f7ff ffb3 	bl	8003a06 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003aa0:	f8d0 3084 	ldr.w	r3, [r0, #132]	@ 0x84
 8003aa4:	f043 0310 	orr.w	r3, r3, #16
 8003aa8:	f8c0 3084 	str.w	r3, [r0, #132]	@ 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003aac:	f7ff ffd5 	bl	8003a5a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003ab0:	bd10      	pop	{r4, pc}

08003ab2 <HAL_UARTEx_RxEventCallback>:
}
 8003ab2:	4770      	bx	lr

08003ab4 <UART_DMARxHalfCplt>:
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003ab4:	6a40      	ldr	r0, [r0, #36]	@ 0x24
{
 8003ab6:	b508      	push	{r3, lr}
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8003ab8:	2301      	movs	r3, #1
 8003aba:	6643      	str	r3, [r0, #100]	@ 0x64
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003abc:	6e03      	ldr	r3, [r0, #96]	@ 0x60
 8003abe:	2b01      	cmp	r3, #1
 8003ac0:	d105      	bne.n	8003ace <UART_DMARxHalfCplt+0x1a>
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8003ac2:	f8b0 1058 	ldrh.w	r1, [r0, #88]	@ 0x58
 8003ac6:	0849      	lsrs	r1, r1, #1
 8003ac8:	f7ff fff3 	bl	8003ab2 <HAL_UARTEx_RxEventCallback>
}
 8003acc:	bd08      	pop	{r3, pc}
    HAL_UART_RxHalfCpltCallback(huart);
 8003ace:	f7ff ffc3 	bl	8003a58 <HAL_UART_RxHalfCpltCallback>
}
 8003ad2:	e7fb      	b.n	8003acc <UART_DMARxHalfCplt+0x18>

08003ad4 <UART_DMAReceiveCplt>:
{
 8003ad4:	b508      	push	{r3, lr}
 8003ad6:	4603      	mov	r3, r0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003ad8:	6a40      	ldr	r0, [r0, #36]	@ 0x24
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8003ada:	699b      	ldr	r3, [r3, #24]
 8003adc:	2b20      	cmp	r3, #32
 8003ade:	d032      	beq.n	8003b46 <UART_DMAReceiveCplt+0x72>
    huart->RxXferCount = 0U;
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	f8a0 305a 	strh.w	r3, [r0, #90]	@ 0x5a
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003ae6:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ae8:	e852 3f00 	ldrex	r3, [r2]
 8003aec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003af0:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 8003af4:	6803      	ldr	r3, [r0, #0]
 8003af6:	2900      	cmp	r1, #0
 8003af8:	d1f5      	bne.n	8003ae6 <UART_DMAReceiveCplt+0x12>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003afa:	f103 0208 	add.w	r2, r3, #8
 8003afe:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b02:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b06:	f103 0c08 	add.w	ip, r3, #8
 8003b0a:	e84c 2100 	strex	r1, r2, [ip]
 8003b0e:	2900      	cmp	r1, #0
 8003b10:	d1f3      	bne.n	8003afa <UART_DMAReceiveCplt+0x26>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b12:	f103 0208 	add.w	r2, r3, #8
 8003b16:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003b1a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b1e:	f103 0c08 	add.w	ip, r3, #8
 8003b22:	e84c 2100 	strex	r1, r2, [ip]
 8003b26:	2900      	cmp	r1, #0
 8003b28:	d1f3      	bne.n	8003b12 <UART_DMAReceiveCplt+0x3e>
    huart->RxState = HAL_UART_STATE_READY;
 8003b2a:	2220      	movs	r2, #32
 8003b2c:	f8c0 2080 	str.w	r2, [r0, #128]	@ 0x80
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b30:	6e02      	ldr	r2, [r0, #96]	@ 0x60
 8003b32:	2a01      	cmp	r2, #1
 8003b34:	d107      	bne.n	8003b46 <UART_DMAReceiveCplt+0x72>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b36:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b3a:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b3e:	e843 2100 	strex	r1, r2, [r3]
 8003b42:	2900      	cmp	r1, #0
 8003b44:	d1f7      	bne.n	8003b36 <UART_DMAReceiveCplt+0x62>
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003b46:	2300      	movs	r3, #0
 8003b48:	6643      	str	r3, [r0, #100]	@ 0x64
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b4a:	6e03      	ldr	r3, [r0, #96]	@ 0x60
 8003b4c:	2b01      	cmp	r3, #1
 8003b4e:	d104      	bne.n	8003b5a <UART_DMAReceiveCplt+0x86>
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003b50:	f8b0 1058 	ldrh.w	r1, [r0, #88]	@ 0x58
 8003b54:	f7ff ffad 	bl	8003ab2 <HAL_UARTEx_RxEventCallback>
}
 8003b58:	bd08      	pop	{r3, pc}
    HAL_UART_RxCpltCallback(huart);
 8003b5a:	f7ff ff7c 	bl	8003a56 <HAL_UART_RxCpltCallback>
}
 8003b5e:	e7fb      	b.n	8003b58 <UART_DMAReceiveCplt+0x84>

08003b60 <UART_SetConfig>:
{
 8003b60:	b538      	push	{r3, r4, r5, lr}
 8003b62:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003b64:	69c0      	ldr	r0, [r0, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003b66:	6823      	ldr	r3, [r4, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003b68:	6925      	ldr	r5, [r4, #16]
 8003b6a:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003b6c:	6819      	ldr	r1, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003b6e:	432a      	orrs	r2, r5
 8003b70:	6965      	ldr	r5, [r4, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003b72:	f421 4116 	bic.w	r1, r1, #38400	@ 0x9600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003b76:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003b78:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003b7c:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003b7e:	430a      	orrs	r2, r1
 8003b80:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b82:	685a      	ldr	r2, [r3, #4]
 8003b84:	68e1      	ldr	r1, [r4, #12]
  tmpreg |= huart->Init.OneBitSampling;
 8003b86:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b88:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 8003b8c:	430a      	orrs	r2, r1
 8003b8e:	605a      	str	r2, [r3, #4]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003b90:	6899      	ldr	r1, [r3, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003b92:	69a2      	ldr	r2, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003b94:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
  tmpreg |= huart->Init.OneBitSampling;
 8003b98:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003b9a:	430a      	orrs	r2, r1
 8003b9c:	609a      	str	r2, [r3, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003b9e:	4a56      	ldr	r2, [pc, #344]	@ (8003cf8 <UART_SetConfig+0x198>)
 8003ba0:	4293      	cmp	r3, r2
 8003ba2:	d112      	bne.n	8003bca <UART_SetConfig+0x6a>
 8003ba4:	4b55      	ldr	r3, [pc, #340]	@ (8003cfc <UART_SetConfig+0x19c>)
 8003ba6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ba8:	f003 0303 	and.w	r3, r3, #3
 8003bac:	2b02      	cmp	r3, #2
 8003bae:	f000 8091 	beq.w	8003cd4 <UART_SetConfig+0x174>
 8003bb2:	2b03      	cmp	r3, #3
 8003bb4:	d022      	beq.n	8003bfc <UART_SetConfig+0x9c>
 8003bb6:	2b01      	cmp	r3, #1
 8003bb8:	f040 8092 	bne.w	8003ce0 <UART_SetConfig+0x180>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003bbc:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8003bc0:	f040 8085 	bne.w	8003cce <UART_SetConfig+0x16e>
        pclk = HAL_RCC_GetSysClockFreq();
 8003bc4:	f7ff f900 	bl	8002dc8 <HAL_RCC_GetSysClockFreq>
        break;
 8003bc8:	e06b      	b.n	8003ca2 <UART_SetConfig+0x142>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003bca:	4a4d      	ldr	r2, [pc, #308]	@ (8003d00 <UART_SetConfig+0x1a0>)
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d12e      	bne.n	8003c2e <UART_SetConfig+0xce>
 8003bd0:	4b4a      	ldr	r3, [pc, #296]	@ (8003cfc <UART_SetConfig+0x19c>)
 8003bd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bd4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003bd8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003bdc:	d07a      	beq.n	8003cd4 <UART_SetConfig+0x174>
 8003bde:	d80a      	bhi.n	8003bf6 <UART_SetConfig+0x96>
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	f000 8083 	beq.w	8003cec <UART_SetConfig+0x18c>
 8003be6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003bea:	d0e7      	beq.n	8003bbc <UART_SetConfig+0x5c>
        ret = HAL_ERROR;
 8003bec:	2001      	movs	r0, #1
  huart->RxISR = NULL;
 8003bee:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 8003bf0:	e9c4 331a 	strd	r3, r3, [r4, #104]	@ 0x68
}
 8003bf4:	bd38      	pop	{r3, r4, r5, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003bf6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003bfa:	d1f7      	bne.n	8003bec <UART_SetConfig+0x8c>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003bfc:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8003c00:	4840      	ldr	r0, [pc, #256]	@ (8003d04 <UART_SetConfig+0x1a4>)
 8003c02:	d156      	bne.n	8003cb2 <UART_SetConfig+0x152>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003c04:	6862      	ldr	r2, [r4, #4]
 8003c06:	0853      	lsrs	r3, r2, #1
 8003c08:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8003c0c:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003c10:	f64f 72ef 	movw	r2, #65519	@ 0xffef
 8003c14:	f1a3 0110 	sub.w	r1, r3, #16
 8003c18:	4291      	cmp	r1, r2
 8003c1a:	d8e7      	bhi.n	8003bec <UART_SetConfig+0x8c>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003c1c:	f023 020f 	bic.w	r2, r3, #15
        huart->Instance->BRR = brrtemp;
 8003c20:	6821      	ldr	r1, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003c22:	b292      	uxth	r2, r2
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003c24:	f3c3 0342 	ubfx	r3, r3, #1, #3
        huart->Instance->BRR = brrtemp;
 8003c28:	4313      	orrs	r3, r2
 8003c2a:	60cb      	str	r3, [r1, #12]
 8003c2c:	e03b      	b.n	8003ca6 <UART_SetConfig+0x146>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003c2e:	4a36      	ldr	r2, [pc, #216]	@ (8003d08 <UART_SetConfig+0x1a8>)
 8003c30:	4293      	cmp	r3, r2
 8003c32:	d10f      	bne.n	8003c54 <UART_SetConfig+0xf4>
 8003c34:	4b31      	ldr	r3, [pc, #196]	@ (8003cfc <UART_SetConfig+0x19c>)
 8003c36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c38:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8003c3c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003c40:	d048      	beq.n	8003cd4 <UART_SetConfig+0x174>
 8003c42:	d804      	bhi.n	8003c4e <UART_SetConfig+0xee>
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d051      	beq.n	8003cec <UART_SetConfig+0x18c>
 8003c48:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003c4c:	e7cd      	b.n	8003bea <UART_SetConfig+0x8a>
 8003c4e:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003c52:	e7d2      	b.n	8003bfa <UART_SetConfig+0x9a>
 8003c54:	4a2d      	ldr	r2, [pc, #180]	@ (8003d0c <UART_SetConfig+0x1ac>)
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d10f      	bne.n	8003c7a <UART_SetConfig+0x11a>
 8003c5a:	4b28      	ldr	r3, [pc, #160]	@ (8003cfc <UART_SetConfig+0x19c>)
 8003c5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c5e:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8003c62:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003c66:	d035      	beq.n	8003cd4 <UART_SetConfig+0x174>
 8003c68:	d804      	bhi.n	8003c74 <UART_SetConfig+0x114>
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d03e      	beq.n	8003cec <UART_SetConfig+0x18c>
 8003c6e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003c72:	e7ba      	b.n	8003bea <UART_SetConfig+0x8a>
 8003c74:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003c78:	e7bf      	b.n	8003bfa <UART_SetConfig+0x9a>
 8003c7a:	4a25      	ldr	r2, [pc, #148]	@ (8003d10 <UART_SetConfig+0x1b0>)
 8003c7c:	4293      	cmp	r3, r2
 8003c7e:	d1b5      	bne.n	8003bec <UART_SetConfig+0x8c>
 8003c80:	4b1e      	ldr	r3, [pc, #120]	@ (8003cfc <UART_SetConfig+0x19c>)
 8003c82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c84:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8003c88:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003c8c:	d022      	beq.n	8003cd4 <UART_SetConfig+0x174>
 8003c8e:	d803      	bhi.n	8003c98 <UART_SetConfig+0x138>
 8003c90:	b363      	cbz	r3, 8003cec <UART_SetConfig+0x18c>
 8003c92:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003c96:	e7a8      	b.n	8003bea <UART_SetConfig+0x8a>
 8003c98:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003c9c:	e7ad      	b.n	8003bfa <UART_SetConfig+0x9a>
        pclk = HAL_RCC_GetPCLK2Freq();
 8003c9e:	f7ff f977 	bl	8002f90 <HAL_RCC_GetPCLK2Freq>
    if (pclk != 0U)
 8003ca2:	2800      	cmp	r0, #0
 8003ca4:	d1ae      	bne.n	8003c04 <UART_SetConfig+0xa4>
        pclk = (uint32_t) HSI_VALUE;
 8003ca6:	2000      	movs	r0, #0
 8003ca8:	e7a1      	b.n	8003bee <UART_SetConfig+0x8e>
        pclk = HAL_RCC_GetPCLK1Freq();
 8003caa:	f7ff f959 	bl	8002f60 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8003cae:	2800      	cmp	r0, #0
 8003cb0:	d0f9      	beq.n	8003ca6 <UART_SetConfig+0x146>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003cb2:	6862      	ldr	r2, [r4, #4]
 8003cb4:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 8003cb8:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003cbc:	f64f 72ef 	movw	r2, #65519	@ 0xffef
 8003cc0:	f1a3 0110 	sub.w	r1, r3, #16
 8003cc4:	4291      	cmp	r1, r2
 8003cc6:	d891      	bhi.n	8003bec <UART_SetConfig+0x8c>
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003cc8:	6822      	ldr	r2, [r4, #0]
 8003cca:	60d3      	str	r3, [r2, #12]
 8003ccc:	e7eb      	b.n	8003ca6 <UART_SetConfig+0x146>
        pclk = HAL_RCC_GetSysClockFreq();
 8003cce:	f7ff f87b 	bl	8002dc8 <HAL_RCC_GetSysClockFreq>
        break;
 8003cd2:	e7ec      	b.n	8003cae <UART_SetConfig+0x14e>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003cd4:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8003cd8:	d094      	beq.n	8003c04 <UART_SetConfig+0xa4>
 8003cda:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8003cde:	e7e8      	b.n	8003cb2 <UART_SetConfig+0x152>
 8003ce0:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8003ce4:	d0db      	beq.n	8003c9e <UART_SetConfig+0x13e>
        pclk = HAL_RCC_GetPCLK2Freq();
 8003ce6:	f7ff f953 	bl	8002f90 <HAL_RCC_GetPCLK2Freq>
        break;
 8003cea:	e7e0      	b.n	8003cae <UART_SetConfig+0x14e>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003cec:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8003cf0:	d1db      	bne.n	8003caa <UART_SetConfig+0x14a>
        pclk = HAL_RCC_GetPCLK1Freq();
 8003cf2:	f7ff f935 	bl	8002f60 <HAL_RCC_GetPCLK1Freq>
        break;
 8003cf6:	e7d4      	b.n	8003ca2 <UART_SetConfig+0x142>
 8003cf8:	40013800 	.word	0x40013800
 8003cfc:	40021000 	.word	0x40021000
 8003d00:	40004400 	.word	0x40004400
 8003d04:	007a1200 	.word	0x007a1200
 8003d08:	40004800 	.word	0x40004800
 8003d0c:	40004c00 	.word	0x40004c00
 8003d10:	40005000 	.word	0x40005000

08003d14 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003d14:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8003d16:	071a      	lsls	r2, r3, #28
{
 8003d18:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003d1a:	d506      	bpl.n	8003d2a <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003d1c:	6801      	ldr	r1, [r0, #0]
 8003d1e:	6b44      	ldr	r4, [r0, #52]	@ 0x34
 8003d20:	684a      	ldr	r2, [r1, #4]
 8003d22:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003d26:	4322      	orrs	r2, r4
 8003d28:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003d2a:	07dc      	lsls	r4, r3, #31
 8003d2c:	d506      	bpl.n	8003d3c <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003d2e:	6801      	ldr	r1, [r0, #0]
 8003d30:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 8003d32:	684a      	ldr	r2, [r1, #4]
 8003d34:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8003d38:	4322      	orrs	r2, r4
 8003d3a:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003d3c:	0799      	lsls	r1, r3, #30
 8003d3e:	d506      	bpl.n	8003d4e <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003d40:	6801      	ldr	r1, [r0, #0]
 8003d42:	6ac4      	ldr	r4, [r0, #44]	@ 0x2c
 8003d44:	684a      	ldr	r2, [r1, #4]
 8003d46:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8003d4a:	4322      	orrs	r2, r4
 8003d4c:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003d4e:	075a      	lsls	r2, r3, #29
 8003d50:	d506      	bpl.n	8003d60 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003d52:	6801      	ldr	r1, [r0, #0]
 8003d54:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 8003d56:	684a      	ldr	r2, [r1, #4]
 8003d58:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003d5c:	4322      	orrs	r2, r4
 8003d5e:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003d60:	06dc      	lsls	r4, r3, #27
 8003d62:	d506      	bpl.n	8003d72 <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003d64:	6801      	ldr	r1, [r0, #0]
 8003d66:	6b84      	ldr	r4, [r0, #56]	@ 0x38
 8003d68:	688a      	ldr	r2, [r1, #8]
 8003d6a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003d6e:	4322      	orrs	r2, r4
 8003d70:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003d72:	0699      	lsls	r1, r3, #26
 8003d74:	d506      	bpl.n	8003d84 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003d76:	6801      	ldr	r1, [r0, #0]
 8003d78:	6bc4      	ldr	r4, [r0, #60]	@ 0x3c
 8003d7a:	688a      	ldr	r2, [r1, #8]
 8003d7c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003d80:	4322      	orrs	r2, r4
 8003d82:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003d84:	065a      	lsls	r2, r3, #25
 8003d86:	d50f      	bpl.n	8003da8 <UART_AdvFeatureConfig+0x94>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003d88:	6801      	ldr	r1, [r0, #0]
 8003d8a:	6c04      	ldr	r4, [r0, #64]	@ 0x40
 8003d8c:	684a      	ldr	r2, [r1, #4]
 8003d8e:	f422 1280 	bic.w	r2, r2, #1048576	@ 0x100000
 8003d92:	4322      	orrs	r2, r4
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003d94:	f5b4 1f80 	cmp.w	r4, #1048576	@ 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003d98:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003d9a:	d105      	bne.n	8003da8 <UART_AdvFeatureConfig+0x94>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003d9c:	684a      	ldr	r2, [r1, #4]
 8003d9e:	6c44      	ldr	r4, [r0, #68]	@ 0x44
 8003da0:	f422 02c0 	bic.w	r2, r2, #6291456	@ 0x600000
 8003da4:	4322      	orrs	r2, r4
 8003da6:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003da8:	061b      	lsls	r3, r3, #24
 8003daa:	d506      	bpl.n	8003dba <UART_AdvFeatureConfig+0xa6>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003dac:	6802      	ldr	r2, [r0, #0]
 8003dae:	6c81      	ldr	r1, [r0, #72]	@ 0x48
 8003db0:	6853      	ldr	r3, [r2, #4]
 8003db2:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 8003db6:	430b      	orrs	r3, r1
 8003db8:	6053      	str	r3, [r2, #4]
}
 8003dba:	bd10      	pop	{r4, pc}

08003dbc <UART_WaitOnFlagUntilTimeout>:
{
 8003dbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003dc0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003dc4:	4604      	mov	r4, r0
 8003dc6:	460d      	mov	r5, r1
 8003dc8:	4617      	mov	r7, r2
 8003dca:	4698      	mov	r8, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003dcc:	6822      	ldr	r2, [r4, #0]
 8003dce:	69d3      	ldr	r3, [r2, #28]
 8003dd0:	ea35 0303 	bics.w	r3, r5, r3
 8003dd4:	bf0c      	ite	eq
 8003dd6:	2301      	moveq	r3, #1
 8003dd8:	2300      	movne	r3, #0
 8003dda:	42bb      	cmp	r3, r7
 8003ddc:	d001      	beq.n	8003de2 <UART_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
 8003dde:	2000      	movs	r0, #0
 8003de0:	e022      	b.n	8003e28 <UART_WaitOnFlagUntilTimeout+0x6c>
    if (Timeout != HAL_MAX_DELAY)
 8003de2:	f1b9 3fff 	cmp.w	r9, #4294967295
 8003de6:	d0f2      	beq.n	8003dce <UART_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003de8:	f7fd fe64 	bl	8001ab4 <HAL_GetTick>
 8003dec:	eba0 0008 	sub.w	r0, r0, r8
 8003df0:	4548      	cmp	r0, r9
 8003df2:	d829      	bhi.n	8003e48 <UART_WaitOnFlagUntilTimeout+0x8c>
 8003df4:	f1b9 0f00 	cmp.w	r9, #0
 8003df8:	d026      	beq.n	8003e48 <UART_WaitOnFlagUntilTimeout+0x8c>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003dfa:	6821      	ldr	r1, [r4, #0]
 8003dfc:	680b      	ldr	r3, [r1, #0]
 8003dfe:	075a      	lsls	r2, r3, #29
 8003e00:	d5e4      	bpl.n	8003dcc <UART_WaitOnFlagUntilTimeout+0x10>
 8003e02:	2d80      	cmp	r5, #128	@ 0x80
 8003e04:	d0e2      	beq.n	8003dcc <UART_WaitOnFlagUntilTimeout+0x10>
 8003e06:	2d40      	cmp	r5, #64	@ 0x40
 8003e08:	d0e0      	beq.n	8003dcc <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003e0a:	69ce      	ldr	r6, [r1, #28]
 8003e0c:	f016 0608 	ands.w	r6, r6, #8
 8003e10:	d00c      	beq.n	8003e2c <UART_WaitOnFlagUntilTimeout+0x70>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003e12:	2508      	movs	r5, #8
          UART_EndRxTransfer(huart);
 8003e14:	4620      	mov	r0, r4
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003e16:	620d      	str	r5, [r1, #32]
          UART_EndRxTransfer(huart);
 8003e18:	f7ff fdf5 	bl	8003a06 <UART_EndRxTransfer>
          __HAL_UNLOCK(huart);
 8003e1c:	2300      	movs	r3, #0
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003e1e:	f8c4 5084 	str.w	r5, [r4, #132]	@ 0x84
          __HAL_UNLOCK(huart);
 8003e22:	f884 3078 	strb.w	r3, [r4, #120]	@ 0x78
          return HAL_ERROR;
 8003e26:	2001      	movs	r0, #1
}
 8003e28:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003e2c:	69cb      	ldr	r3, [r1, #28]
 8003e2e:	051b      	lsls	r3, r3, #20
 8003e30:	d5cc      	bpl.n	8003dcc <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003e32:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003e36:	620b      	str	r3, [r1, #32]
          UART_EndRxTransfer(huart);
 8003e38:	4620      	mov	r0, r4
 8003e3a:	f7ff fde4 	bl	8003a06 <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003e3e:	2320      	movs	r3, #32
 8003e40:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
          __HAL_UNLOCK(huart);
 8003e44:	f884 6078 	strb.w	r6, [r4, #120]	@ 0x78
        return HAL_TIMEOUT;
 8003e48:	2003      	movs	r0, #3
 8003e4a:	e7ed      	b.n	8003e28 <UART_WaitOnFlagUntilTimeout+0x6c>

08003e4c <HAL_UART_Transmit>:
{
 8003e4c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8003e50:	4698      	mov	r8, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8003e52:	6fc3      	ldr	r3, [r0, #124]	@ 0x7c
 8003e54:	2b20      	cmp	r3, #32
{
 8003e56:	4604      	mov	r4, r0
 8003e58:	460e      	mov	r6, r1
 8003e5a:	4617      	mov	r7, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8003e5c:	d143      	bne.n	8003ee6 <HAL_UART_Transmit+0x9a>
    if ((pData == NULL) || (Size == 0U))
 8003e5e:	2900      	cmp	r1, #0
 8003e60:	d043      	beq.n	8003eea <HAL_UART_Transmit+0x9e>
 8003e62:	2a00      	cmp	r2, #0
 8003e64:	d041      	beq.n	8003eea <HAL_UART_Transmit+0x9e>
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003e66:	2321      	movs	r3, #33	@ 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e68:	2500      	movs	r5, #0
 8003e6a:	f8c0 5084 	str.w	r5, [r0, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003e6e:	67c3      	str	r3, [r0, #124]	@ 0x7c
    tickstart = HAL_GetTick();
 8003e70:	f7fd fe20 	bl	8001ab4 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e74:	68a3      	ldr	r3, [r4, #8]
    huart->TxXferSize  = Size;
 8003e76:	f8a4 7050 	strh.w	r7, [r4, #80]	@ 0x50
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e7a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
    tickstart = HAL_GetTick();
 8003e7e:	4681      	mov	r9, r0
    huart->TxXferCount = Size;
 8003e80:	f8a4 7052 	strh.w	r7, [r4, #82]	@ 0x52
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e84:	d103      	bne.n	8003e8e <HAL_UART_Transmit+0x42>
 8003e86:	6923      	ldr	r3, [r4, #16]
 8003e88:	b90b      	cbnz	r3, 8003e8e <HAL_UART_Transmit+0x42>
 8003e8a:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 8003e8c:	461e      	mov	r6, r3
    while (huart->TxXferCount > 0U)
 8003e8e:	f8b4 2052 	ldrh.w	r2, [r4, #82]	@ 0x52
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003e92:	f8cd 8000 	str.w	r8, [sp]
    while (huart->TxXferCount > 0U)
 8003e96:	b292      	uxth	r2, r2
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003e98:	464b      	mov	r3, r9
    while (huart->TxXferCount > 0U)
 8003e9a:	b93a      	cbnz	r2, 8003eac <HAL_UART_Transmit+0x60>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003e9c:	2140      	movs	r1, #64	@ 0x40
 8003e9e:	4620      	mov	r0, r4
 8003ea0:	f7ff ff8c 	bl	8003dbc <UART_WaitOnFlagUntilTimeout>
 8003ea4:	2320      	movs	r3, #32
 8003ea6:	b940      	cbnz	r0, 8003eba <HAL_UART_Transmit+0x6e>
    huart->gState = HAL_UART_STATE_READY;
 8003ea8:	67e3      	str	r3, [r4, #124]	@ 0x7c
    return HAL_OK;
 8003eaa:	e008      	b.n	8003ebe <HAL_UART_Transmit+0x72>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003eac:	2200      	movs	r2, #0
 8003eae:	2180      	movs	r1, #128	@ 0x80
 8003eb0:	4620      	mov	r0, r4
 8003eb2:	f7ff ff83 	bl	8003dbc <UART_WaitOnFlagUntilTimeout>
 8003eb6:	b128      	cbz	r0, 8003ec4 <HAL_UART_Transmit+0x78>
        huart->gState = HAL_UART_STATE_READY;
 8003eb8:	2320      	movs	r3, #32
 8003eba:	67e3      	str	r3, [r4, #124]	@ 0x7c
        return HAL_TIMEOUT;
 8003ebc:	2003      	movs	r0, #3
}
 8003ebe:	b003      	add	sp, #12
 8003ec0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003ec4:	6822      	ldr	r2, [r4, #0]
      if (pdata8bits == NULL)
 8003ec6:	b95e      	cbnz	r6, 8003ee0 <HAL_UART_Transmit+0x94>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003ec8:	f835 3b02 	ldrh.w	r3, [r5], #2
 8003ecc:	f3c3 0308 	ubfx	r3, r3, #0, #9
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003ed0:	8513      	strh	r3, [r2, #40]	@ 0x28
      huart->TxXferCount--;
 8003ed2:	f8b4 2052 	ldrh.w	r2, [r4, #82]	@ 0x52
 8003ed6:	3a01      	subs	r2, #1
 8003ed8:	b292      	uxth	r2, r2
 8003eda:	f8a4 2052 	strh.w	r2, [r4, #82]	@ 0x52
 8003ede:	e7d6      	b.n	8003e8e <HAL_UART_Transmit+0x42>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003ee0:	f816 3b01 	ldrb.w	r3, [r6], #1
 8003ee4:	e7f4      	b.n	8003ed0 <HAL_UART_Transmit+0x84>
    return HAL_BUSY;
 8003ee6:	2002      	movs	r0, #2
 8003ee8:	e7e9      	b.n	8003ebe <HAL_UART_Transmit+0x72>
      return  HAL_ERROR;
 8003eea:	2001      	movs	r0, #1
 8003eec:	e7e7      	b.n	8003ebe <HAL_UART_Transmit+0x72>

08003eee <UART_CheckIdleState>:
{
 8003eee:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003ef0:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ef2:	2600      	movs	r6, #0
 8003ef4:	f8c0 6084 	str.w	r6, [r0, #132]	@ 0x84
  tickstart = HAL_GetTick();
 8003ef8:	f7fd fddc 	bl	8001ab4 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003efc:	6823      	ldr	r3, [r4, #0]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	071a      	lsls	r2, r3, #28
  tickstart = HAL_GetTick();
 8003f02:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003f04:	d51b      	bpl.n	8003f3e <UART_CheckIdleState+0x50>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003f06:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003f0a:	9300      	str	r3, [sp, #0]
 8003f0c:	4632      	mov	r2, r6
 8003f0e:	4603      	mov	r3, r0
 8003f10:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003f14:	4620      	mov	r0, r4
 8003f16:	f7ff ff51 	bl	8003dbc <UART_WaitOnFlagUntilTimeout>
 8003f1a:	b180      	cbz	r0, 8003f3e <UART_CheckIdleState+0x50>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003f1c:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f1e:	e852 3f00 	ldrex	r3, [r2]
 8003f22:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f26:	e842 3100 	strex	r1, r3, [r2]
 8003f2a:	2900      	cmp	r1, #0
 8003f2c:	d1f6      	bne.n	8003f1c <UART_CheckIdleState+0x2e>
      huart->gState = HAL_UART_STATE_READY;
 8003f2e:	2320      	movs	r3, #32
 8003f30:	67e3      	str	r3, [r4, #124]	@ 0x7c
      return HAL_TIMEOUT;
 8003f32:	2003      	movs	r0, #3
      __HAL_UNLOCK(huart);
 8003f34:	2300      	movs	r3, #0
 8003f36:	f884 3078 	strb.w	r3, [r4, #120]	@ 0x78
}
 8003f3a:	b002      	add	sp, #8
 8003f3c:	bd70      	pop	{r4, r5, r6, pc}
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003f3e:	6823      	ldr	r3, [r4, #0]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	075b      	lsls	r3, r3, #29
 8003f44:	d524      	bpl.n	8003f90 <UART_CheckIdleState+0xa2>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003f46:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003f4a:	9300      	str	r3, [sp, #0]
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	462b      	mov	r3, r5
 8003f50:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003f54:	4620      	mov	r0, r4
 8003f56:	f7ff ff31 	bl	8003dbc <UART_WaitOnFlagUntilTimeout>
 8003f5a:	b1c8      	cbz	r0, 8003f90 <UART_CheckIdleState+0xa2>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f5c:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f5e:	e852 3f00 	ldrex	r3, [r2]
 8003f62:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f66:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 8003f6a:	6822      	ldr	r2, [r4, #0]
 8003f6c:	2900      	cmp	r1, #0
 8003f6e:	d1f5      	bne.n	8003f5c <UART_CheckIdleState+0x6e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f70:	f102 0308 	add.w	r3, r2, #8
 8003f74:	e853 3f00 	ldrex	r3, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f78:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f7c:	f102 0008 	add.w	r0, r2, #8
 8003f80:	e840 3100 	strex	r1, r3, [r0]
 8003f84:	2900      	cmp	r1, #0
 8003f86:	d1f3      	bne.n	8003f70 <UART_CheckIdleState+0x82>
      huart->RxState = HAL_UART_STATE_READY;
 8003f88:	2320      	movs	r3, #32
 8003f8a:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
      return HAL_TIMEOUT;
 8003f8e:	e7d0      	b.n	8003f32 <UART_CheckIdleState+0x44>
  huart->gState = HAL_UART_STATE_READY;
 8003f90:	2320      	movs	r3, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f92:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8003f94:	67e3      	str	r3, [r4, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003f96:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f9a:	6620      	str	r0, [r4, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003f9c:	6660      	str	r0, [r4, #100]	@ 0x64
  return HAL_OK;
 8003f9e:	e7c9      	b.n	8003f34 <UART_CheckIdleState+0x46>

08003fa0 <HAL_UART_Init>:
{
 8003fa0:	b510      	push	{r4, lr}
  if (huart == NULL)
 8003fa2:	4604      	mov	r4, r0
 8003fa4:	b340      	cbz	r0, 8003ff8 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 8003fa6:	6fc3      	ldr	r3, [r0, #124]	@ 0x7c
 8003fa8:	b91b      	cbnz	r3, 8003fb2 <HAL_UART_Init+0x12>
    huart->Lock = HAL_UNLOCKED;
 8003faa:	f880 3078 	strb.w	r3, [r0, #120]	@ 0x78
    HAL_UART_MspInit(huart);
 8003fae:	f7fd fb23 	bl	80015f8 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8003fb2:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8003fb4:	2324      	movs	r3, #36	@ 0x24
 8003fb6:	67e3      	str	r3, [r4, #124]	@ 0x7c
  __HAL_UART_DISABLE(huart);
 8003fb8:	6813      	ldr	r3, [r2, #0]
 8003fba:	f023 0301 	bic.w	r3, r3, #1
 8003fbe:	6013      	str	r3, [r2, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003fc0:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8003fc2:	b113      	cbz	r3, 8003fca <HAL_UART_Init+0x2a>
    UART_AdvFeatureConfig(huart);
 8003fc4:	4620      	mov	r0, r4
 8003fc6:	f7ff fea5 	bl	8003d14 <UART_AdvFeatureConfig>
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003fca:	4620      	mov	r0, r4
 8003fcc:	f7ff fdc8 	bl	8003b60 <UART_SetConfig>
 8003fd0:	2801      	cmp	r0, #1
 8003fd2:	d011      	beq.n	8003ff8 <HAL_UART_Init+0x58>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003fd4:	6823      	ldr	r3, [r4, #0]
 8003fd6:	685a      	ldr	r2, [r3, #4]
 8003fd8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003fdc:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003fde:	689a      	ldr	r2, [r3, #8]
 8003fe0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003fe4:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8003fe6:	681a      	ldr	r2, [r3, #0]
 8003fe8:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 8003fec:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 8003fee:	601a      	str	r2, [r3, #0]
}
 8003ff0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 8003ff4:	f7ff bf7b 	b.w	8003eee <UART_CheckIdleState>
}
 8003ff8:	2001      	movs	r0, #1
 8003ffa:	bd10      	pop	{r4, pc}

08003ffc <UART_Start_Receive_DMA>:
{
 8003ffc:	b570      	push	{r4, r5, r6, lr}
 8003ffe:	4613      	mov	r3, r2
 8004000:	4604      	mov	r4, r0
  huart->RxXferSize = Size;
 8004002:	f8a0 2058 	strh.w	r2, [r0, #88]	@ 0x58
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004006:	2200      	movs	r2, #0
  huart->pRxBuffPtr = pData;
 8004008:	6541      	str	r1, [r0, #84]	@ 0x54
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800400a:	f8c0 2084 	str.w	r2, [r0, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800400e:	2022      	movs	r0, #34	@ 0x22
 8004010:	f8c4 0080 	str.w	r0, [r4, #128]	@ 0x80
  if (huart->hdmarx != NULL)
 8004014:	6f60      	ldr	r0, [r4, #116]	@ 0x74
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8004016:	6825      	ldr	r5, [r4, #0]
  if (huart->hdmarx != NULL)
 8004018:	b1a0      	cbz	r0, 8004044 <UART_Start_Receive_DMA+0x48>
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800401a:	4e1c      	ldr	r6, [pc, #112]	@ (800408c <UART_Start_Receive_DMA+0x90>)
 800401c:	6286      	str	r6, [r0, #40]	@ 0x28
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800401e:	4e1c      	ldr	r6, [pc, #112]	@ (8004090 <UART_Start_Receive_DMA+0x94>)
 8004020:	62c6      	str	r6, [r0, #44]	@ 0x2c
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004022:	4e1c      	ldr	r6, [pc, #112]	@ (8004094 <UART_Start_Receive_DMA+0x98>)
    huart->hdmarx->XferAbortCallback = NULL;
 8004024:	e9c0 620c 	strd	r6, r2, [r0, #48]	@ 0x30
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8004028:	460a      	mov	r2, r1
 800402a:	f105 0124 	add.w	r1, r5, #36	@ 0x24
 800402e:	f7fe fb1b 	bl	8002668 <HAL_DMA_Start_IT>
 8004032:	b138      	cbz	r0, 8004044 <UART_Start_Receive_DMA+0x48>
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004034:	2310      	movs	r3, #16
 8004036:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
      huart->RxState = HAL_UART_STATE_READY;
 800403a:	2320      	movs	r3, #32
 800403c:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
      return HAL_ERROR;
 8004040:	2001      	movs	r0, #1
}
 8004042:	bd70      	pop	{r4, r5, r6, pc}
  if (huart->Init.Parity != UART_PARITY_NONE)
 8004044:	6922      	ldr	r2, [r4, #16]
 8004046:	6823      	ldr	r3, [r4, #0]
 8004048:	b13a      	cbz	r2, 800405a <UART_Start_Receive_DMA+0x5e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800404a:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800404e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004052:	e843 2100 	strex	r1, r2, [r3]
 8004056:	2900      	cmp	r1, #0
 8004058:	d1f7      	bne.n	800404a <UART_Start_Receive_DMA+0x4e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800405a:	f103 0208 	add.w	r2, r3, #8
 800405e:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004062:	f042 0201 	orr.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004066:	f103 0008 	add.w	r0, r3, #8
 800406a:	e840 2100 	strex	r1, r2, [r0]
 800406e:	2900      	cmp	r1, #0
 8004070:	d1f3      	bne.n	800405a <UART_Start_Receive_DMA+0x5e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004072:	f103 0208 	add.w	r2, r3, #8
 8004076:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800407a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800407e:	f103 0108 	add.w	r1, r3, #8
 8004082:	e841 2000 	strex	r0, r2, [r1]
 8004086:	2800      	cmp	r0, #0
 8004088:	d1f3      	bne.n	8004072 <UART_Start_Receive_DMA+0x76>
 800408a:	e7da      	b.n	8004042 <UART_Start_Receive_DMA+0x46>
 800408c:	08003ad5 	.word	0x08003ad5
 8004090:	08003ab5 	.word	0x08003ab5
 8004094:	08003a5d 	.word	0x08003a5d

08004098 <HAL_UART_Receive_DMA>:
  if (huart->RxState == HAL_UART_STATE_READY)
 8004098:	f8d0 3080 	ldr.w	r3, [r0, #128]	@ 0x80
 800409c:	2b20      	cmp	r3, #32
{
 800409e:	b430      	push	{r4, r5}
  if (huart->RxState == HAL_UART_STATE_READY)
 80040a0:	d112      	bne.n	80040c8 <HAL_UART_Receive_DMA+0x30>
    if ((pData == NULL) || (Size == 0U))
 80040a2:	b1a1      	cbz	r1, 80040ce <HAL_UART_Receive_DMA+0x36>
 80040a4:	b19a      	cbz	r2, 80040ce <HAL_UART_Receive_DMA+0x36>
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040a6:	2300      	movs	r3, #0
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80040a8:	6804      	ldr	r4, [r0, #0]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040aa:	6603      	str	r3, [r0, #96]	@ 0x60
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80040ac:	6863      	ldr	r3, [r4, #4]
 80040ae:	021b      	lsls	r3, r3, #8
 80040b0:	d507      	bpl.n	80040c2 <HAL_UART_Receive_DMA+0x2a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040b2:	e854 3f00 	ldrex	r3, [r4]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80040b6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040ba:	e844 3500 	strex	r5, r3, [r4]
 80040be:	2d00      	cmp	r5, #0
 80040c0:	d1f7      	bne.n	80040b2 <HAL_UART_Receive_DMA+0x1a>
}
 80040c2:	bc30      	pop	{r4, r5}
    return (UART_Start_Receive_DMA(huart, pData, Size));
 80040c4:	f7ff bf9a 	b.w	8003ffc <UART_Start_Receive_DMA>
    return HAL_BUSY;
 80040c8:	2002      	movs	r0, #2
}
 80040ca:	bc30      	pop	{r4, r5}
 80040cc:	4770      	bx	lr
      return HAL_ERROR;
 80040ce:	2001      	movs	r0, #1
 80040d0:	e7fb      	b.n	80040ca <HAL_UART_Receive_DMA+0x32>
	...

080040d4 <osKernelInitialize>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80040d4:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 80040d8:	b113      	cbz	r3, 80040e0 <osKernelInitialize+0xc>
    stat = osErrorISR;
 80040da:	f06f 0005 	mvn.w	r0, #5
 80040de:	4770      	bx	lr
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80040e0:	f3ef 8310 	mrs	r3, PRIMASK
  if (IS_IRQ()) {
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d1f8      	bne.n	80040da <osKernelInitialize+0x6>
 80040e8:	4b07      	ldr	r3, [pc, #28]	@ (8004108 <osKernelInitialize+0x34>)
 80040ea:	6818      	ldr	r0, [r3, #0]
 80040ec:	2802      	cmp	r0, #2
 80040ee:	d106      	bne.n	80040fe <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80040f0:	f3ef 8311 	mrs	r3, BASEPRI
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d1f0      	bne.n	80040da <osKernelInitialize+0x6>
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
      stat = osOK;
    } else {
      stat = osError;
 80040f8:	f04f 30ff 	mov.w	r0, #4294967295
    }
  }

  return (stat);
}
 80040fc:	4770      	bx	lr
    if (KernelState == osKernelInactive) {
 80040fe:	2800      	cmp	r0, #0
 8004100:	d1fa      	bne.n	80040f8 <osKernelInitialize+0x24>
      KernelState = osKernelReady;
 8004102:	2201      	movs	r2, #1
 8004104:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004106:	4770      	bx	lr
 8004108:	20000e78 	.word	0x20000e78

0800410c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800410c:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800410e:	f3ef 8305 	mrs	r3, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 8004112:	b113      	cbz	r3, 800411a <osKernelStart+0xe>
    stat = osErrorISR;
 8004114:	f06f 0005 	mvn.w	r0, #5
      stat = osError;
    }
  }

  return (stat);
}
 8004118:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800411a:	f3ef 8410 	mrs	r4, PRIMASK
  if (IS_IRQ()) {
 800411e:	2c00      	cmp	r4, #0
 8004120:	d1f8      	bne.n	8004114 <osKernelStart+0x8>
 8004122:	4b09      	ldr	r3, [pc, #36]	@ (8004148 <osKernelStart+0x3c>)
 8004124:	681a      	ldr	r2, [r3, #0]
 8004126:	2a02      	cmp	r2, #2
 8004128:	d106      	bne.n	8004138 <osKernelStart+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800412a:	f3ef 8311 	mrs	r3, BASEPRI
 800412e:	2b00      	cmp	r3, #0
 8004130:	d1f0      	bne.n	8004114 <osKernelStart+0x8>
      stat = osError;
 8004132:	f04f 30ff 	mov.w	r0, #4294967295
  return (stat);
 8004136:	e7ef      	b.n	8004118 <osKernelStart+0xc>
    if (KernelState == osKernelReady) {
 8004138:	2a01      	cmp	r2, #1
 800413a:	d1fa      	bne.n	8004132 <osKernelStart+0x26>
      KernelState = osKernelRunning;
 800413c:	2202      	movs	r2, #2
 800413e:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8004140:	f000 fd8c 	bl	8004c5c <vTaskStartScheduler>
      stat = osOK;
 8004144:	4620      	mov	r0, r4
 8004146:	e7e7      	b.n	8004118 <osKernelStart+0xc>
 8004148:	20000e78 	.word	0x20000e78

0800414c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800414c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800414e:	b087      	sub	sp, #28
 8004150:	4614      	mov	r4, r2
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004152:	2200      	movs	r2, #0
osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004154:	460b      	mov	r3, r1
  hTask = NULL;
 8004156:	9205      	str	r2, [sp, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004158:	f3ef 8205 	mrs	r2, IPSR

  if (!IS_IRQ() && (func != NULL)) {
 800415c:	bb52      	cbnz	r2, 80041b4 <osThreadNew+0x68>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800415e:	f3ef 8210 	mrs	r2, PRIMASK
 8004162:	bb3a      	cbnz	r2, 80041b4 <osThreadNew+0x68>
 8004164:	4a26      	ldr	r2, [pc, #152]	@ (8004200 <osThreadNew+0xb4>)
 8004166:	6812      	ldr	r2, [r2, #0]
 8004168:	2a02      	cmp	r2, #2
 800416a:	d102      	bne.n	8004172 <osThreadNew+0x26>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800416c:	f3ef 8211 	mrs	r2, BASEPRI
 8004170:	bb02      	cbnz	r2, 80041b4 <osThreadNew+0x68>
 8004172:	b1f8      	cbz	r0, 80041b4 <osThreadNew+0x68>
    stack = configMINIMAL_STACK_SIZE;
    prio  = (UBaseType_t)osPriorityNormal;

    empty = '\0';
 8004174:	2200      	movs	r2, #0
 8004176:	f88d 2013 	strb.w	r2, [sp, #19]
    name  = &empty;
    mem   = -1;

    if (attr != NULL) {
 800417a:	2c00      	cmp	r4, #0
 800417c:	d030      	beq.n	80041e0 <osThreadNew+0x94>
      if (attr->name != NULL) {
 800417e:	6821      	ldr	r1, [r4, #0]
 8004180:	b909      	cbnz	r1, 8004186 <osThreadNew+0x3a>
    name  = &empty;
 8004182:	f10d 0113 	add.w	r1, sp, #19
        name = attr->name;
      }
      if (attr->priority != osPriorityNone) {
 8004186:	69a5      	ldr	r5, [r4, #24]
 8004188:	2d00      	cmp	r5, #0
 800418a:	bf08      	it	eq
 800418c:	2518      	moveq	r5, #24
        prio = (UBaseType_t)attr->priority;
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800418e:	1e6a      	subs	r2, r5, #1
 8004190:	2a37      	cmp	r2, #55	@ 0x37
 8004192:	46ac      	mov	ip, r5
 8004194:	d82a      	bhi.n	80041ec <osThreadNew+0xa0>
 8004196:	6862      	ldr	r2, [r4, #4]
 8004198:	07d2      	lsls	r2, r2, #31
 800419a:	d427      	bmi.n	80041ec <osThreadNew+0xa0>
        return (NULL);
      }

      if (attr->stack_size > 0U) {
 800419c:	6966      	ldr	r6, [r4, #20]
 800419e:	b166      	cbz	r6, 80041ba <osThreadNew+0x6e>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80041a0:	08b2      	lsrs	r2, r6, #2
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80041a2:	e9d4 7e02 	ldrd	r7, lr, [r4, #8]
 80041a6:	b157      	cbz	r7, 80041be <osThreadNew+0x72>
 80041a8:	f1be 0f5b 	cmp.w	lr, #91	@ 0x5b
 80041ac:	d902      	bls.n	80041b4 <osThreadNew+0x68>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80041ae:	6924      	ldr	r4, [r4, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80041b0:	b104      	cbz	r4, 80041b4 <osThreadNew+0x68>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80041b2:	b9ee      	cbnz	r6, 80041f0 <osThreadNew+0xa4>
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80041b4:	9805      	ldr	r0, [sp, #20]
}
 80041b6:	b007      	add	sp, #28
 80041b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    stack = configMINIMAL_STACK_SIZE;
 80041ba:	2240      	movs	r2, #64	@ 0x40
 80041bc:	e7f1      	b.n	80041a2 <osThreadNew+0x56>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80041be:	f1be 0f00 	cmp.w	lr, #0
 80041c2:	d1f7      	bne.n	80041b4 <osThreadNew+0x68>
      if (mem == 0) {
 80041c4:	6924      	ldr	r4, [r4, #16]
 80041c6:	2c00      	cmp	r4, #0
 80041c8:	d1f4      	bne.n	80041b4 <osThreadNew+0x68>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80041ca:	ac05      	add	r4, sp, #20
 80041cc:	e9cd c400 	strd	ip, r4, [sp]
 80041d0:	b292      	uxth	r2, r2
 80041d2:	f000 fd15 	bl	8004c00 <xTaskCreate>
 80041d6:	2801      	cmp	r0, #1
          hTask = NULL;
 80041d8:	bf1c      	itt	ne
 80041da:	2300      	movne	r3, #0
 80041dc:	9305      	strne	r3, [sp, #20]
 80041de:	e7e9      	b.n	80041b4 <osThreadNew+0x68>
    prio  = (UBaseType_t)osPriorityNormal;
 80041e0:	f04f 0c18 	mov.w	ip, #24
    stack = configMINIMAL_STACK_SIZE;
 80041e4:	2240      	movs	r2, #64	@ 0x40
    name  = &empty;
 80041e6:	f10d 0113 	add.w	r1, sp, #19
 80041ea:	e7ee      	b.n	80041ca <osThreadNew+0x7e>
        return (NULL);
 80041ec:	2000      	movs	r0, #0
 80041ee:	e7e2      	b.n	80041b6 <osThreadNew+0x6a>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80041f0:	e9cd 4701 	strd	r4, r7, [sp, #4]
 80041f4:	9500      	str	r5, [sp, #0]
 80041f6:	f000 fccc 	bl	8004b92 <xTaskCreateStatic>
 80041fa:	9005      	str	r0, [sp, #20]
 80041fc:	e7da      	b.n	80041b4 <osThreadNew+0x68>
 80041fe:	bf00      	nop
 8004200:	20000e78 	.word	0x20000e78

08004204 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8004204:	b508      	push	{r3, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004206:	f3ef 8305 	mrs	r3, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 800420a:	b113      	cbz	r3, 8004212 <osDelay+0xe>
    stat = osErrorISR;
 800420c:	f06f 0005 	mvn.w	r0, #5
      vTaskDelay(ticks);
    }
  }

  return (stat);
}
 8004210:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004212:	f3ef 8310 	mrs	r3, PRIMASK
  if (IS_IRQ()) {
 8004216:	2b00      	cmp	r3, #0
 8004218:	d1f8      	bne.n	800420c <osDelay+0x8>
 800421a:	4b06      	ldr	r3, [pc, #24]	@ (8004234 <osDelay+0x30>)
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	2b02      	cmp	r3, #2
 8004220:	d103      	bne.n	800422a <osDelay+0x26>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004222:	f3ef 8311 	mrs	r3, BASEPRI
 8004226:	2b00      	cmp	r3, #0
 8004228:	d1f0      	bne.n	800420c <osDelay+0x8>
    if (ticks != 0U) {
 800422a:	b108      	cbz	r0, 8004230 <osDelay+0x2c>
      vTaskDelay(ticks);
 800422c:	f000 fe74 	bl	8004f18 <vTaskDelay>
    stat = osOK;
 8004230:	2000      	movs	r0, #0
  return (stat);
 8004232:	e7ed      	b.n	8004210 <osDelay+0xc>
 8004234:	20000e78 	.word	0x20000e78

08004238 <vApplicationGetIdleTaskMemory>:
/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004238:	4b03      	ldr	r3, [pc, #12]	@ (8004248 <vApplicationGetIdleTaskMemory+0x10>)
 800423a:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800423c:	4b03      	ldr	r3, [pc, #12]	@ (800424c <vApplicationGetIdleTaskMemory+0x14>)
 800423e:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004240:	2340      	movs	r3, #64	@ 0x40
 8004242:	6013      	str	r3, [r2, #0]
}
 8004244:	4770      	bx	lr
 8004246:	bf00      	nop
 8004248:	20000e1c 	.word	0x20000e1c
 800424c:	20000d1c 	.word	0x20000d1c

08004250 <vApplicationGetTimerTaskMemory>:
/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004250:	4b03      	ldr	r3, [pc, #12]	@ (8004260 <vApplicationGetTimerTaskMemory+0x10>)
 8004252:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004254:	4b03      	ldr	r3, [pc, #12]	@ (8004264 <vApplicationGetTimerTaskMemory+0x14>)
 8004256:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004258:	2380      	movs	r3, #128	@ 0x80
 800425a:	6013      	str	r3, [r2, #0]
}
 800425c:	4770      	bx	lr
 800425e:	bf00      	nop
 8004260:	20000cc0 	.word	0x20000cc0
 8004264:	20000ac0 	.word	0x20000ac0

08004268 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004268:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800426c:	f04f 32ff 	mov.w	r2, #4294967295

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004270:	e9c0 2302 	strd	r2, r3, [r0, #8]
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004274:	6043      	str	r3, [r0, #4]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004276:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004278:	2300      	movs	r3, #0
 800427a:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800427c:	4770      	bx	lr

0800427e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800427e:	2300      	movs	r3, #0
 8004280:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004282:	4770      	bx	lr

08004284 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8004284:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004286:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004288:	689a      	ldr	r2, [r3, #8]
 800428a:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800428c:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800428e:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8004290:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004292:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8004294:	3301      	adds	r3, #1
 8004296:	6003      	str	r3, [r0, #0]
}
 8004298:	4770      	bx	lr

0800429a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800429a:	b530      	push	{r4, r5, lr}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800429c:	680c      	ldr	r4, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800429e:	1c63      	adds	r3, r4, #1
 80042a0:	d10a      	bne.n	80042b8 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80042a2:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80042a4:	685a      	ldr	r2, [r3, #4]
 80042a6:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80042a8:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80042aa:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 80042ac:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 80042ae:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 80042b0:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 80042b2:	3301      	adds	r3, #1
 80042b4:	6003      	str	r3, [r0, #0]
}
 80042b6:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80042b8:	f100 0208 	add.w	r2, r0, #8
 80042bc:	4613      	mov	r3, r2
 80042be:	6852      	ldr	r2, [r2, #4]
 80042c0:	6815      	ldr	r5, [r2, #0]
 80042c2:	42a5      	cmp	r5, r4
 80042c4:	d9fa      	bls.n	80042bc <vListInsert+0x22>
 80042c6:	e7ed      	b.n	80042a4 <vListInsert+0xa>

080042c8 <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80042c8:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80042cc:	6903      	ldr	r3, [r0, #16]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80042ce:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80042d0:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80042d2:	6859      	ldr	r1, [r3, #4]
 80042d4:	4281      	cmp	r1, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80042d6:	bf08      	it	eq
 80042d8:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80042da:	2200      	movs	r2, #0
 80042dc:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 80042de:	681a      	ldr	r2, [r3, #0]
 80042e0:	3a01      	subs	r2, #1
 80042e2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80042e4:	6818      	ldr	r0, [r3, #0]
}
 80042e6:	4770      	bx	lr

080042e8 <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80042e8:	b510      	push	{r4, lr}
 80042ea:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80042ec:	f001 f9d2 	bl	8005694 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80042f0:	6ba4      	ldr	r4, [r4, #56]	@ 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 80042f2:	f001 f9ef 	bl	80056d4 <vPortExitCritical>

	return xReturn;
}
 80042f6:	fab4 f084 	clz	r0, r4
 80042fa:	0940      	lsrs	r0, r0, #5
 80042fc:	bd10      	pop	{r4, pc}

080042fe <prvCopyDataToQueue>:
{
 80042fe:	b570      	push	{r4, r5, r6, lr}
 8004300:	4616      	mov	r6, r2
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004302:	6c02      	ldr	r2, [r0, #64]	@ 0x40
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004304:	6b85      	ldr	r5, [r0, #56]	@ 0x38
{
 8004306:	4604      	mov	r4, r0
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004308:	b942      	cbnz	r2, 800431c <prvCopyDataToQueue+0x1e>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800430a:	6806      	ldr	r6, [r0, #0]
 800430c:	b99e      	cbnz	r6, 8004336 <prvCopyDataToQueue+0x38>
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800430e:	6840      	ldr	r0, [r0, #4]
 8004310:	f000 ff36 	bl	8005180 <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 8004314:	6066      	str	r6, [r4, #4]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004316:	3501      	adds	r5, #1
 8004318:	63a5      	str	r5, [r4, #56]	@ 0x38
}
 800431a:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 800431c:	b96e      	cbnz	r6, 800433a <prvCopyDataToQueue+0x3c>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800431e:	6880      	ldr	r0, [r0, #8]
 8004320:	f003 fbd6 	bl	8007ad0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8004324:	68a3      	ldr	r3, [r4, #8]
 8004326:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8004328:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800432a:	6862      	ldr	r2, [r4, #4]
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800432c:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800432e:	4293      	cmp	r3, r2
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004330:	bf24      	itt	cs
 8004332:	6823      	ldrcs	r3, [r4, #0]
 8004334:	60a3      	strcs	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
 8004336:	2000      	movs	r0, #0
 8004338:	e7ed      	b.n	8004316 <prvCopyDataToQueue+0x18>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800433a:	68c0      	ldr	r0, [r0, #12]
 800433c:	f003 fbc8 	bl	8007ad0 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8004340:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8004342:	68e3      	ldr	r3, [r4, #12]
 8004344:	4251      	negs	r1, r2
 8004346:	1a9b      	subs	r3, r3, r2
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004348:	6822      	ldr	r2, [r4, #0]
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800434a:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800434c:	4293      	cmp	r3, r2
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800434e:	bf3e      	ittt	cc
 8004350:	6863      	ldrcc	r3, [r4, #4]
 8004352:	185b      	addcc	r3, r3, r1
 8004354:	60e3      	strcc	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 8004356:	2e02      	cmp	r6, #2
 8004358:	d1ed      	bne.n	8004336 <prvCopyDataToQueue+0x38>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800435a:	b10d      	cbz	r5, 8004360 <prvCopyDataToQueue+0x62>
				--uxMessagesWaiting;
 800435c:	3d01      	subs	r5, #1
 800435e:	e7ea      	b.n	8004336 <prvCopyDataToQueue+0x38>
BaseType_t xReturn = pdFALSE;
 8004360:	4628      	mov	r0, r5
 8004362:	e7d8      	b.n	8004316 <prvCopyDataToQueue+0x18>

08004364 <prvCopyDataFromQueue>:
{
 8004364:	4603      	mov	r3, r0
 8004366:	b410      	push	{r4}
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004368:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
{
 800436a:	4608      	mov	r0, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800436c:	b16a      	cbz	r2, 800438a <prvCopyDataFromQueue+0x26>
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800436e:	68dc      	ldr	r4, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004370:	6859      	ldr	r1, [r3, #4]
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8004372:	4414      	add	r4, r2
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004374:	428c      	cmp	r4, r1
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8004376:	bf28      	it	cs
 8004378:	6819      	ldrcs	r1, [r3, #0]
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800437a:	60dc      	str	r4, [r3, #12]
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800437c:	bf28      	it	cs
 800437e:	60d9      	strcs	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8004380:	68d9      	ldr	r1, [r3, #12]
}
 8004382:	f85d 4b04 	ldr.w	r4, [sp], #4
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8004386:	f003 bba3 	b.w	8007ad0 <memcpy>
}
 800438a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800438e:	4770      	bx	lr

08004390 <prvUnlockQueue>:
{
 8004390:	b570      	push	{r4, r5, r6, lr}
 8004392:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8004394:	f001 f97e 	bl	8005694 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8004398:	f894 5045 	ldrb.w	r5, [r4, #69]	@ 0x45
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800439c:	f104 0624 	add.w	r6, r4, #36	@ 0x24
		int8_t cTxLock = pxQueue->cTxLock;
 80043a0:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80043a2:	2d00      	cmp	r5, #0
 80043a4:	dc14      	bgt.n	80043d0 <prvUnlockQueue+0x40>
		pxQueue->cTxLock = queueUNLOCKED;
 80043a6:	23ff      	movs	r3, #255	@ 0xff
 80043a8:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
	taskEXIT_CRITICAL();
 80043ac:	f001 f992 	bl	80056d4 <vPortExitCritical>
	taskENTER_CRITICAL();
 80043b0:	f001 f970 	bl	8005694 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 80043b4:	f894 5044 	ldrb.w	r5, [r4, #68]	@ 0x44
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80043b8:	f104 0610 	add.w	r6, r4, #16
		int8_t cRxLock = pxQueue->cRxLock;
 80043bc:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80043be:	2d00      	cmp	r5, #0
 80043c0:	dc12      	bgt.n	80043e8 <prvUnlockQueue+0x58>
		pxQueue->cRxLock = queueUNLOCKED;
 80043c2:	23ff      	movs	r3, #255	@ 0xff
 80043c4:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
}
 80043c8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 80043cc:	f001 b982 	b.w	80056d4 <vPortExitCritical>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80043d0:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d0e7      	beq.n	80043a6 <prvUnlockQueue+0x16>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80043d6:	4630      	mov	r0, r6
 80043d8:	f000 fe34 	bl	8005044 <xTaskRemoveFromEventList>
 80043dc:	b108      	cbz	r0, 80043e2 <prvUnlockQueue+0x52>
						vTaskMissedYield();
 80043de:	f000 feb9 	bl	8005154 <vTaskMissedYield>
			--cTxLock;
 80043e2:	3d01      	subs	r5, #1
 80043e4:	b26d      	sxtb	r5, r5
 80043e6:	e7dc      	b.n	80043a2 <prvUnlockQueue+0x12>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80043e8:	6923      	ldr	r3, [r4, #16]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d0e9      	beq.n	80043c2 <prvUnlockQueue+0x32>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80043ee:	4630      	mov	r0, r6
 80043f0:	f000 fe28 	bl	8005044 <xTaskRemoveFromEventList>
 80043f4:	b108      	cbz	r0, 80043fa <prvUnlockQueue+0x6a>
					vTaskMissedYield();
 80043f6:	f000 fead 	bl	8005154 <vTaskMissedYield>
				--cRxLock;
 80043fa:	3d01      	subs	r5, #1
 80043fc:	b26d      	sxtb	r5, r5
 80043fe:	e7de      	b.n	80043be <prvUnlockQueue+0x2e>

08004400 <xQueueGenericReset>:
{
 8004400:	b538      	push	{r3, r4, r5, lr}
 8004402:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 8004404:	4604      	mov	r4, r0
 8004406:	b940      	cbnz	r0, 800441a <xQueueGenericReset+0x1a>
	__asm volatile
 8004408:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800440c:	f383 8811 	msr	BASEPRI, r3
 8004410:	f3bf 8f6f 	isb	sy
 8004414:	f3bf 8f4f 	dsb	sy
 8004418:	e7fe      	b.n	8004418 <xQueueGenericReset+0x18>
	taskENTER_CRITICAL();
 800441a:	f001 f93b 	bl	8005694 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800441e:	e9d4 310f 	ldrd	r3, r1, [r4, #60]	@ 0x3c
 8004422:	6822      	ldr	r2, [r4, #0]
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004424:	60a2      	str	r2, [r4, #8]
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8004426:	434b      	muls	r3, r1
 8004428:	18d0      	adds	r0, r2, r3
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800442a:	1a5b      	subs	r3, r3, r1
 800442c:	441a      	add	r2, r3
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800442e:	6060      	str	r0, [r4, #4]
		pxQueue->cRxLock = queueUNLOCKED;
 8004430:	23ff      	movs	r3, #255	@ 0xff
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004432:	2000      	movs	r0, #0
 8004434:	63a0      	str	r0, [r4, #56]	@ 0x38
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8004436:	60e2      	str	r2, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004438:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800443c:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
		if( xNewQueue == pdFALSE )
 8004440:	b9a5      	cbnz	r5, 800446c <xQueueGenericReset+0x6c>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004442:	6923      	ldr	r3, [r4, #16]
 8004444:	b173      	cbz	r3, 8004464 <xQueueGenericReset+0x64>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004446:	f104 0010 	add.w	r0, r4, #16
 800444a:	f000 fdfb 	bl	8005044 <xTaskRemoveFromEventList>
 800444e:	b148      	cbz	r0, 8004464 <xQueueGenericReset+0x64>
					queueYIELD_IF_USING_PREEMPTION();
 8004450:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8004454:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004458:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800445c:	f3bf 8f4f 	dsb	sy
 8004460:	f3bf 8f6f 	isb	sy
	taskEXIT_CRITICAL();
 8004464:	f001 f936 	bl	80056d4 <vPortExitCritical>
}
 8004468:	2001      	movs	r0, #1
 800446a:	bd38      	pop	{r3, r4, r5, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800446c:	f104 0010 	add.w	r0, r4, #16
 8004470:	f7ff fefa 	bl	8004268 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004474:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8004478:	f7ff fef6 	bl	8004268 <vListInitialise>
 800447c:	e7f2      	b.n	8004464 <xQueueGenericReset+0x64>

0800447e <xQueueGenericCreateStatic>:
	{
 800447e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004480:	460d      	mov	r5, r1
 8004482:	461c      	mov	r4, r3
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004484:	b940      	cbnz	r0, 8004498 <xQueueGenericCreateStatic+0x1a>
 8004486:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800448a:	f383 8811 	msr	BASEPRI, r3
 800448e:	f3bf 8f6f 	isb	sy
 8004492:	f3bf 8f4f 	dsb	sy
 8004496:	e7fe      	b.n	8004496 <xQueueGenericCreateStatic+0x18>
		configASSERT( pxStaticQueue != NULL );
 8004498:	b943      	cbnz	r3, 80044ac <xQueueGenericCreateStatic+0x2e>
 800449a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800449e:	f383 8811 	msr	BASEPRI, r3
 80044a2:	f3bf 8f6f 	isb	sy
 80044a6:	f3bf 8f4f 	dsb	sy
 80044aa:	e7fe      	b.n	80044aa <xQueueGenericCreateStatic+0x2c>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80044ac:	b14a      	cbz	r2, 80044c2 <xQueueGenericCreateStatic+0x44>
 80044ae:	b991      	cbnz	r1, 80044d6 <xQueueGenericCreateStatic+0x58>
 80044b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044b4:	f383 8811 	msr	BASEPRI, r3
 80044b8:	f3bf 8f6f 	isb	sy
 80044bc:	f3bf 8f4f 	dsb	sy
 80044c0:	e7fe      	b.n	80044c0 <xQueueGenericCreateStatic+0x42>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80044c2:	b141      	cbz	r1, 80044d6 <xQueueGenericCreateStatic+0x58>
 80044c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044c8:	f383 8811 	msr	BASEPRI, r3
 80044cc:	f3bf 8f6f 	isb	sy
 80044d0:	f3bf 8f4f 	dsb	sy
 80044d4:	e7fe      	b.n	80044d4 <xQueueGenericCreateStatic+0x56>
			volatile size_t xSize = sizeof( StaticQueue_t );
 80044d6:	2350      	movs	r3, #80	@ 0x50
 80044d8:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 80044da:	9b01      	ldr	r3, [sp, #4]
 80044dc:	2b50      	cmp	r3, #80	@ 0x50
 80044de:	d008      	beq.n	80044f2 <xQueueGenericCreateStatic+0x74>
 80044e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044e4:	f383 8811 	msr	BASEPRI, r3
 80044e8:	f3bf 8f6f 	isb	sy
 80044ec:	f3bf 8f4f 	dsb	sy
 80044f0:	e7fe      	b.n	80044f0 <xQueueGenericCreateStatic+0x72>
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80044f2:	2101      	movs	r1, #1
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80044f4:	2d00      	cmp	r5, #0
 80044f6:	bf08      	it	eq
 80044f8:	4622      	moveq	r2, r4
	pxNewQueue->uxItemSize = uxItemSize;
 80044fa:	e9c4 050f 	strd	r0, r5, [r4, #60]	@ 0x3c
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80044fe:	f884 1046 	strb.w	r1, [r4, #70]	@ 0x46
	if( uxItemSize == ( UBaseType_t ) 0 )
 8004502:	6022      	str	r2, [r4, #0]
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004504:	4620      	mov	r0, r4
 8004506:	f7ff ff7b 	bl	8004400 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 800450a:	f89d 3018 	ldrb.w	r3, [sp, #24]
 800450e:	f884 304c 	strb.w	r3, [r4, #76]	@ 0x4c
	}
 8004512:	4620      	mov	r0, r4
 8004514:	b003      	add	sp, #12
 8004516:	bd30      	pop	{r4, r5, pc}

08004518 <xQueueGenericSend>:
{
 8004518:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800451c:	460f      	mov	r7, r1
 800451e:	9201      	str	r2, [sp, #4]
 8004520:	461e      	mov	r6, r3
	configASSERT( pxQueue );
 8004522:	4604      	mov	r4, r0
 8004524:	b940      	cbnz	r0, 8004538 <xQueueGenericSend+0x20>
 8004526:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800452a:	f383 8811 	msr	BASEPRI, r3
 800452e:	f3bf 8f6f 	isb	sy
 8004532:	f3bf 8f4f 	dsb	sy
 8004536:	e7fe      	b.n	8004536 <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004538:	b951      	cbnz	r1, 8004550 <xQueueGenericSend+0x38>
 800453a:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800453c:	b143      	cbz	r3, 8004550 <xQueueGenericSend+0x38>
 800453e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004542:	f383 8811 	msr	BASEPRI, r3
 8004546:	f3bf 8f6f 	isb	sy
 800454a:	f3bf 8f4f 	dsb	sy
 800454e:	e7fe      	b.n	800454e <xQueueGenericSend+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004550:	2e02      	cmp	r6, #2
 8004552:	d10b      	bne.n	800456c <xQueueGenericSend+0x54>
 8004554:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8004556:	2b01      	cmp	r3, #1
 8004558:	d008      	beq.n	800456c <xQueueGenericSend+0x54>
 800455a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800455e:	f383 8811 	msr	BASEPRI, r3
 8004562:	f3bf 8f6f 	isb	sy
 8004566:	f3bf 8f4f 	dsb	sy
 800456a:	e7fe      	b.n	800456a <xQueueGenericSend+0x52>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800456c:	f000 fdf8 	bl	8005160 <xTaskGetSchedulerState>
 8004570:	4605      	mov	r5, r0
 8004572:	b330      	cbz	r0, 80045c2 <xQueueGenericSend+0xaa>
 8004574:	2500      	movs	r5, #0
		prvLockQueue( pxQueue );
 8004576:	f04f 0800 	mov.w	r8, #0
		taskENTER_CRITICAL();
 800457a:	f001 f88b 	bl	8005694 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800457e:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8004580:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8004582:	429a      	cmp	r2, r3
 8004584:	d301      	bcc.n	800458a <xQueueGenericSend+0x72>
 8004586:	2e02      	cmp	r6, #2
 8004588:	d127      	bne.n	80045da <xQueueGenericSend+0xc2>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800458a:	4632      	mov	r2, r6
 800458c:	4639      	mov	r1, r7
 800458e:	4620      	mov	r0, r4
 8004590:	f7ff feb5 	bl	80042fe <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004594:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8004596:	b11b      	cbz	r3, 80045a0 <xQueueGenericSend+0x88>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004598:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800459c:	f000 fd52 	bl	8005044 <xTaskRemoveFromEventList>
					else if( xYieldRequired != pdFALSE )
 80045a0:	b148      	cbz	r0, 80045b6 <xQueueGenericSend+0x9e>
						queueYIELD_IF_USING_PREEMPTION();
 80045a2:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80045a6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80045aa:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80045ae:	f3bf 8f4f 	dsb	sy
 80045b2:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 80045b6:	f001 f88d 	bl	80056d4 <vPortExitCritical>
				return pdPASS;
 80045ba:	2001      	movs	r0, #1
}
 80045bc:	b004      	add	sp, #16
 80045be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80045c2:	9b01      	ldr	r3, [sp, #4]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d0d6      	beq.n	8004576 <xQueueGenericSend+0x5e>
 80045c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045cc:	f383 8811 	msr	BASEPRI, r3
 80045d0:	f3bf 8f6f 	isb	sy
 80045d4:	f3bf 8f4f 	dsb	sy
 80045d8:	e7fe      	b.n	80045d8 <xQueueGenericSend+0xc0>
				if( xTicksToWait == ( TickType_t ) 0 )
 80045da:	9b01      	ldr	r3, [sp, #4]
 80045dc:	b91b      	cbnz	r3, 80045e6 <xQueueGenericSend+0xce>
					taskEXIT_CRITICAL();
 80045de:	f001 f879 	bl	80056d4 <vPortExitCritical>
					return errQUEUE_FULL;
 80045e2:	2000      	movs	r0, #0
 80045e4:	e7ea      	b.n	80045bc <xQueueGenericSend+0xa4>
				else if( xEntryTimeSet == pdFALSE )
 80045e6:	b915      	cbnz	r5, 80045ee <xQueueGenericSend+0xd6>
					vTaskInternalSetTimeOutState( &xTimeOut );
 80045e8:	a802      	add	r0, sp, #8
 80045ea:	f000 fd6b 	bl	80050c4 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 80045ee:	f001 f871 	bl	80056d4 <vPortExitCritical>
		vTaskSuspendAll();
 80045f2:	f000 fb79 	bl	8004ce8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80045f6:	f001 f84d 	bl	8005694 <vPortEnterCritical>
 80045fa:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 80045fe:	2bff      	cmp	r3, #255	@ 0xff
 8004600:	bf08      	it	eq
 8004602:	f884 8044 	strbeq.w	r8, [r4, #68]	@ 0x44
 8004606:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800460a:	2bff      	cmp	r3, #255	@ 0xff
 800460c:	bf08      	it	eq
 800460e:	f884 8045 	strbeq.w	r8, [r4, #69]	@ 0x45
 8004612:	f001 f85f 	bl	80056d4 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004616:	a901      	add	r1, sp, #4
 8004618:	a802      	add	r0, sp, #8
 800461a:	f000 fd5f 	bl	80050dc <xTaskCheckForTimeOut>
 800461e:	bb38      	cbnz	r0, 8004670 <xQueueGenericSend+0x158>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004620:	f001 f838 	bl	8005694 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004624:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8004626:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8004628:	429a      	cmp	r2, r3
 800462a:	d10e      	bne.n	800464a <xQueueGenericSend+0x132>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 800462c:	f001 f852 	bl	80056d4 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004630:	9901      	ldr	r1, [sp, #4]
 8004632:	f104 0010 	add.w	r0, r4, #16
 8004636:	f000 fccd 	bl	8004fd4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800463a:	4620      	mov	r0, r4
 800463c:	f7ff fea8 	bl	8004390 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004640:	f000 fbf6 	bl	8004e30 <xTaskResumeAll>
 8004644:	b148      	cbz	r0, 800465a <xQueueGenericSend+0x142>
 8004646:	2501      	movs	r5, #1
 8004648:	e797      	b.n	800457a <xQueueGenericSend+0x62>
	taskEXIT_CRITICAL();
 800464a:	f001 f843 	bl	80056d4 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 800464e:	4620      	mov	r0, r4
 8004650:	f7ff fe9e 	bl	8004390 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004654:	f000 fbec 	bl	8004e30 <xTaskResumeAll>
 8004658:	e7f5      	b.n	8004646 <xQueueGenericSend+0x12e>
					portYIELD_WITHIN_API();
 800465a:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800465e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004662:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8004666:	f3bf 8f4f 	dsb	sy
 800466a:	f3bf 8f6f 	isb	sy
 800466e:	e7ea      	b.n	8004646 <xQueueGenericSend+0x12e>
			prvUnlockQueue( pxQueue );
 8004670:	4620      	mov	r0, r4
 8004672:	f7ff fe8d 	bl	8004390 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004676:	f000 fbdb 	bl	8004e30 <xTaskResumeAll>
			return errQUEUE_FULL;
 800467a:	e7b2      	b.n	80045e2 <xQueueGenericSend+0xca>

0800467c <xQueueGenericSendFromISR>:
{
 800467c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004680:	4689      	mov	r9, r1
 8004682:	4617      	mov	r7, r2
 8004684:	461e      	mov	r6, r3
	configASSERT( pxQueue );
 8004686:	4604      	mov	r4, r0
 8004688:	b940      	cbnz	r0, 800469c <xQueueGenericSendFromISR+0x20>
 800468a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800468e:	f383 8811 	msr	BASEPRI, r3
 8004692:	f3bf 8f6f 	isb	sy
 8004696:	f3bf 8f4f 	dsb	sy
 800469a:	e7fe      	b.n	800469a <xQueueGenericSendFromISR+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800469c:	b951      	cbnz	r1, 80046b4 <xQueueGenericSendFromISR+0x38>
 800469e:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 80046a0:	b143      	cbz	r3, 80046b4 <xQueueGenericSendFromISR+0x38>
 80046a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046a6:	f383 8811 	msr	BASEPRI, r3
 80046aa:	f3bf 8f6f 	isb	sy
 80046ae:	f3bf 8f4f 	dsb	sy
 80046b2:	e7fe      	b.n	80046b2 <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80046b4:	2e02      	cmp	r6, #2
 80046b6:	d10b      	bne.n	80046d0 <xQueueGenericSendFromISR+0x54>
 80046b8:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80046ba:	2b01      	cmp	r3, #1
 80046bc:	d008      	beq.n	80046d0 <xQueueGenericSendFromISR+0x54>
 80046be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046c2:	f383 8811 	msr	BASEPRI, r3
 80046c6:	f3bf 8f6f 	isb	sy
 80046ca:	f3bf 8f4f 	dsb	sy
 80046ce:	e7fe      	b.n	80046ce <xQueueGenericSendFromISR+0x52>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80046d0:	f001 f8f2 	bl	80058b8 <vPortValidateInterruptPriority>
	__asm volatile
 80046d4:	f3ef 8811 	mrs	r8, BASEPRI
 80046d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046dc:	f383 8811 	msr	BASEPRI, r3
 80046e0:	f3bf 8f6f 	isb	sy
 80046e4:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80046e8:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80046ea:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80046ec:	429a      	cmp	r2, r3
 80046ee:	d301      	bcc.n	80046f4 <xQueueGenericSendFromISR+0x78>
 80046f0:	2e02      	cmp	r6, #2
 80046f2:	d11d      	bne.n	8004730 <xQueueGenericSendFromISR+0xb4>
			const int8_t cTxLock = pxQueue->cTxLock;
 80046f4:	f894 5045 	ldrb.w	r5, [r4, #69]	@ 0x45
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80046f8:	4632      	mov	r2, r6
			const int8_t cTxLock = pxQueue->cTxLock;
 80046fa:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80046fc:	4649      	mov	r1, r9
 80046fe:	4620      	mov	r0, r4
 8004700:	f7ff fdfd 	bl	80042fe <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 8004704:	1c6b      	adds	r3, r5, #1
 8004706:	d10e      	bne.n	8004726 <xQueueGenericSendFromISR+0xaa>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004708:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800470a:	b13b      	cbz	r3, 800471c <xQueueGenericSendFromISR+0xa0>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800470c:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8004710:	f000 fc98 	bl	8005044 <xTaskRemoveFromEventList>
 8004714:	b110      	cbz	r0, 800471c <xQueueGenericSendFromISR+0xa0>
							if( pxHigherPriorityTaskWoken != NULL )
 8004716:	b10f      	cbz	r7, 800471c <xQueueGenericSendFromISR+0xa0>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004718:	2301      	movs	r3, #1
 800471a:	603b      	str	r3, [r7, #0]
			xReturn = pdPASS;
 800471c:	2001      	movs	r0, #1
	__asm volatile
 800471e:	f388 8811 	msr	BASEPRI, r8
}
 8004722:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004726:	3501      	adds	r5, #1
 8004728:	b26d      	sxtb	r5, r5
 800472a:	f884 5045 	strb.w	r5, [r4, #69]	@ 0x45
 800472e:	e7f5      	b.n	800471c <xQueueGenericSendFromISR+0xa0>
			xReturn = errQUEUE_FULL;
 8004730:	2000      	movs	r0, #0
 8004732:	e7f4      	b.n	800471e <xQueueGenericSendFromISR+0xa2>

08004734 <xQueueReceive>:
{
 8004734:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8004738:	460e      	mov	r6, r1
 800473a:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 800473c:	4604      	mov	r4, r0
 800473e:	b940      	cbnz	r0, 8004752 <xQueueReceive+0x1e>
	__asm volatile
 8004740:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004744:	f383 8811 	msr	BASEPRI, r3
 8004748:	f3bf 8f6f 	isb	sy
 800474c:	f3bf 8f4f 	dsb	sy
 8004750:	e7fe      	b.n	8004750 <xQueueReceive+0x1c>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004752:	b951      	cbnz	r1, 800476a <xQueueReceive+0x36>
 8004754:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8004756:	b143      	cbz	r3, 800476a <xQueueReceive+0x36>
 8004758:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800475c:	f383 8811 	msr	BASEPRI, r3
 8004760:	f3bf 8f6f 	isb	sy
 8004764:	f3bf 8f4f 	dsb	sy
 8004768:	e7fe      	b.n	8004768 <xQueueReceive+0x34>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800476a:	f000 fcf9 	bl	8005160 <xTaskGetSchedulerState>
 800476e:	4605      	mov	r5, r0
 8004770:	b318      	cbz	r0, 80047ba <xQueueReceive+0x86>
 8004772:	2500      	movs	r5, #0
		prvLockQueue( pxQueue );
 8004774:	f04f 0800 	mov.w	r8, #0
		taskENTER_CRITICAL();
 8004778:	f000 ff8c 	bl	8005694 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800477c:	6ba7      	ldr	r7, [r4, #56]	@ 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800477e:	b347      	cbz	r7, 80047d2 <xQueueReceive+0x9e>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004780:	4631      	mov	r1, r6
 8004782:	4620      	mov	r0, r4
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004784:	3f01      	subs	r7, #1
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004786:	f7ff fded 	bl	8004364 <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800478a:	63a7      	str	r7, [r4, #56]	@ 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800478c:	6923      	ldr	r3, [r4, #16]
 800478e:	b173      	cbz	r3, 80047ae <xQueueReceive+0x7a>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004790:	f104 0010 	add.w	r0, r4, #16
 8004794:	f000 fc56 	bl	8005044 <xTaskRemoveFromEventList>
 8004798:	b148      	cbz	r0, 80047ae <xQueueReceive+0x7a>
						queueYIELD_IF_USING_PREEMPTION();
 800479a:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800479e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80047a2:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80047a6:	f3bf 8f4f 	dsb	sy
 80047aa:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 80047ae:	f000 ff91 	bl	80056d4 <vPortExitCritical>
				return pdPASS;
 80047b2:	2001      	movs	r0, #1
}
 80047b4:	b004      	add	sp, #16
 80047b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80047ba:	9b01      	ldr	r3, [sp, #4]
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d0d9      	beq.n	8004774 <xQueueReceive+0x40>
 80047c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047c4:	f383 8811 	msr	BASEPRI, r3
 80047c8:	f3bf 8f6f 	isb	sy
 80047cc:	f3bf 8f4f 	dsb	sy
 80047d0:	e7fe      	b.n	80047d0 <xQueueReceive+0x9c>
				if( xTicksToWait == ( TickType_t ) 0 )
 80047d2:	9b01      	ldr	r3, [sp, #4]
 80047d4:	b91b      	cbnz	r3, 80047de <xQueueReceive+0xaa>
					taskEXIT_CRITICAL();
 80047d6:	f000 ff7d 	bl	80056d4 <vPortExitCritical>
					return errQUEUE_EMPTY;
 80047da:	2000      	movs	r0, #0
 80047dc:	e7ea      	b.n	80047b4 <xQueueReceive+0x80>
				else if( xEntryTimeSet == pdFALSE )
 80047de:	b915      	cbnz	r5, 80047e6 <xQueueReceive+0xb2>
					vTaskInternalSetTimeOutState( &xTimeOut );
 80047e0:	a802      	add	r0, sp, #8
 80047e2:	f000 fc6f 	bl	80050c4 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 80047e6:	f000 ff75 	bl	80056d4 <vPortExitCritical>
		vTaskSuspendAll();
 80047ea:	f000 fa7d 	bl	8004ce8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80047ee:	f000 ff51 	bl	8005694 <vPortEnterCritical>
 80047f2:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 80047f6:	2bff      	cmp	r3, #255	@ 0xff
 80047f8:	bf08      	it	eq
 80047fa:	f884 8044 	strbeq.w	r8, [r4, #68]	@ 0x44
 80047fe:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8004802:	2bff      	cmp	r3, #255	@ 0xff
 8004804:	bf08      	it	eq
 8004806:	f884 8045 	strbeq.w	r8, [r4, #69]	@ 0x45
 800480a:	f000 ff63 	bl	80056d4 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800480e:	a901      	add	r1, sp, #4
 8004810:	a802      	add	r0, sp, #8
 8004812:	f000 fc63 	bl	80050dc <xTaskCheckForTimeOut>
 8004816:	bb00      	cbnz	r0, 800485a <xQueueReceive+0x126>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004818:	4620      	mov	r0, r4
 800481a:	f7ff fd65 	bl	80042e8 <prvIsQueueEmpty>
 800481e:	b1b0      	cbz	r0, 800484e <xQueueReceive+0x11a>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004820:	9901      	ldr	r1, [sp, #4]
 8004822:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8004826:	f000 fbd5 	bl	8004fd4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800482a:	4620      	mov	r0, r4
 800482c:	f7ff fdb0 	bl	8004390 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004830:	f000 fafe 	bl	8004e30 <xTaskResumeAll>
 8004834:	b948      	cbnz	r0, 800484a <xQueueReceive+0x116>
					portYIELD_WITHIN_API();
 8004836:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800483a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800483e:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8004842:	f3bf 8f4f 	dsb	sy
 8004846:	f3bf 8f6f 	isb	sy
 800484a:	2501      	movs	r5, #1
 800484c:	e794      	b.n	8004778 <xQueueReceive+0x44>
				prvUnlockQueue( pxQueue );
 800484e:	4620      	mov	r0, r4
 8004850:	f7ff fd9e 	bl	8004390 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004854:	f000 faec 	bl	8004e30 <xTaskResumeAll>
 8004858:	e7f7      	b.n	800484a <xQueueReceive+0x116>
			prvUnlockQueue( pxQueue );
 800485a:	4620      	mov	r0, r4
 800485c:	f7ff fd98 	bl	8004390 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004860:	f000 fae6 	bl	8004e30 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004864:	4620      	mov	r0, r4
 8004866:	f7ff fd3f 	bl	80042e8 <prvIsQueueEmpty>
 800486a:	2800      	cmp	r0, #0
 800486c:	d0ed      	beq.n	800484a <xQueueReceive+0x116>
 800486e:	e7b4      	b.n	80047da <xQueueReceive+0xa6>

08004870 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004870:	b530      	push	{r4, r5, lr}

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004872:	4a07      	ldr	r2, [pc, #28]	@ (8004890 <vQueueAddToRegistry+0x20>)
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004874:	2300      	movs	r3, #0
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004876:	f852 5033 	ldr.w	r5, [r2, r3, lsl #3]
 800487a:	eb02 04c3 	add.w	r4, r2, r3, lsl #3
 800487e:	b91d      	cbnz	r5, 8004888 <vQueueAddToRegistry+0x18>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004880:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004884:	6060      	str	r0, [r4, #4]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004886:	bd30      	pop	{r4, r5, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004888:	3301      	adds	r3, #1
 800488a:	2b08      	cmp	r3, #8
 800488c:	d1f3      	bne.n	8004876 <vQueueAddToRegistry+0x6>
 800488e:	e7fa      	b.n	8004886 <vQueueAddToRegistry+0x16>
 8004890:	20000e7c 	.word	0x20000e7c

08004894 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004894:	b570      	push	{r4, r5, r6, lr}
 8004896:	4604      	mov	r4, r0
 8004898:	460d      	mov	r5, r1
 800489a:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800489c:	f000 fefa 	bl	8005694 <vPortEnterCritical>
 80048a0:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 80048a4:	2bff      	cmp	r3, #255	@ 0xff
 80048a6:	bf04      	itt	eq
 80048a8:	2300      	moveq	r3, #0
 80048aa:	f884 3044 	strbeq.w	r3, [r4, #68]	@ 0x44
 80048ae:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 80048b2:	2bff      	cmp	r3, #255	@ 0xff
 80048b4:	bf04      	itt	eq
 80048b6:	2300      	moveq	r3, #0
 80048b8:	f884 3045 	strbeq.w	r3, [r4, #69]	@ 0x45
 80048bc:	f000 ff0a 	bl	80056d4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80048c0:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80048c2:	b92b      	cbnz	r3, 80048d0 <vQueueWaitForMessageRestricted+0x3c>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80048c4:	4632      	mov	r2, r6
 80048c6:	4629      	mov	r1, r5
 80048c8:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 80048cc:	f000 fb9c 	bl	8005008 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80048d0:	4620      	mov	r0, r4
	}
 80048d2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		prvUnlockQueue( pxQueue );
 80048d6:	f7ff bd5b 	b.w	8004390 <prvUnlockQueue>
	...

080048dc <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80048dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80048e0:	4604      	mov	r4, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80048e2:	f000 fed7 	bl	8005694 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80048e6:	4b30      	ldr	r3, [pc, #192]	@ (80049a8 <prvAddNewTaskToReadyList+0xcc>)
		if( pxCurrentTCB == NULL )
 80048e8:	4e30      	ldr	r6, [pc, #192]	@ (80049ac <prvAddNewTaskToReadyList+0xd0>)
		uxCurrentNumberOfTasks++;
 80048ea:	681a      	ldr	r2, [r3, #0]
 80048ec:	4f30      	ldr	r7, [pc, #192]	@ (80049b0 <prvAddNewTaskToReadyList+0xd4>)
 80048ee:	3201      	adds	r2, #1
 80048f0:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 80048f2:	6835      	ldr	r5, [r6, #0]
 80048f4:	2d00      	cmp	r5, #0
 80048f6:	d14b      	bne.n	8004990 <prvAddNewTaskToReadyList+0xb4>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80048f8:	6034      	str	r4, [r6, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	2b01      	cmp	r3, #1
 80048fe:	d11f      	bne.n	8004940 <prvAddNewTaskToReadyList+0x64>
 8004900:	46b8      	mov	r8, r7
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004902:	4640      	mov	r0, r8
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004904:	3501      	adds	r5, #1
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004906:	f7ff fcaf 	bl	8004268 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800490a:	2d38      	cmp	r5, #56	@ 0x38
 800490c:	f108 0814 	add.w	r8, r8, #20
 8004910:	d1f7      	bne.n	8004902 <prvAddNewTaskToReadyList+0x26>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004912:	f8df 80c4 	ldr.w	r8, [pc, #196]	@ 80049d8 <prvAddNewTaskToReadyList+0xfc>
	vListInitialise( &xDelayedTaskList2 );
 8004916:	4d27      	ldr	r5, [pc, #156]	@ (80049b4 <prvAddNewTaskToReadyList+0xd8>)
	vListInitialise( &xDelayedTaskList1 );
 8004918:	4640      	mov	r0, r8
 800491a:	f7ff fca5 	bl	8004268 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800491e:	4628      	mov	r0, r5
 8004920:	f7ff fca2 	bl	8004268 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004924:	4824      	ldr	r0, [pc, #144]	@ (80049b8 <prvAddNewTaskToReadyList+0xdc>)
 8004926:	f7ff fc9f 	bl	8004268 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800492a:	4824      	ldr	r0, [pc, #144]	@ (80049bc <prvAddNewTaskToReadyList+0xe0>)
 800492c:	f7ff fc9c 	bl	8004268 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004930:	4823      	ldr	r0, [pc, #140]	@ (80049c0 <prvAddNewTaskToReadyList+0xe4>)
 8004932:	f7ff fc99 	bl	8004268 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004936:	4b23      	ldr	r3, [pc, #140]	@ (80049c4 <prvAddNewTaskToReadyList+0xe8>)
 8004938:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800493c:	4b22      	ldr	r3, [pc, #136]	@ (80049c8 <prvAddNewTaskToReadyList+0xec>)
 800493e:	601d      	str	r5, [r3, #0]
		uxTaskNumber++;
 8004940:	4a22      	ldr	r2, [pc, #136]	@ (80049cc <prvAddNewTaskToReadyList+0xf0>)
 8004942:	6813      	ldr	r3, [r2, #0]
 8004944:	3301      	adds	r3, #1
 8004946:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8004948:	4a21      	ldr	r2, [pc, #132]	@ (80049d0 <prvAddNewTaskToReadyList+0xf4>)
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800494a:	6463      	str	r3, [r4, #68]	@ 0x44
		prvAddTaskToReadyList( pxNewTCB );
 800494c:	6811      	ldr	r1, [r2, #0]
 800494e:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8004950:	2014      	movs	r0, #20
 8004952:	428b      	cmp	r3, r1
 8004954:	fb00 7003 	mla	r0, r0, r3, r7
 8004958:	f104 0104 	add.w	r1, r4, #4
 800495c:	bf88      	it	hi
 800495e:	6013      	strhi	r3, [r2, #0]
 8004960:	f7ff fc90 	bl	8004284 <vListInsertEnd>
	taskEXIT_CRITICAL();
 8004964:	f000 feb6 	bl	80056d4 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8004968:	4b1a      	ldr	r3, [pc, #104]	@ (80049d4 <prvAddNewTaskToReadyList+0xf8>)
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	b173      	cbz	r3, 800498c <prvAddNewTaskToReadyList+0xb0>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800496e:	6833      	ldr	r3, [r6, #0]
 8004970:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004972:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8004974:	429a      	cmp	r2, r3
 8004976:	d209      	bcs.n	800498c <prvAddNewTaskToReadyList+0xb0>
			taskYIELD_IF_USING_PREEMPTION();
 8004978:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800497c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004980:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8004984:	f3bf 8f4f 	dsb	sy
 8004988:	f3bf 8f6f 	isb	sy
}
 800498c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( xSchedulerRunning == pdFALSE )
 8004990:	4b10      	ldr	r3, [pc, #64]	@ (80049d4 <prvAddNewTaskToReadyList+0xf8>)
 8004992:	681a      	ldr	r2, [r3, #0]
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004994:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
			if( xSchedulerRunning == pdFALSE )
 8004996:	2a00      	cmp	r2, #0
 8004998:	d1d2      	bne.n	8004940 <prvAddNewTaskToReadyList+0x64>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800499a:	6832      	ldr	r2, [r6, #0]
 800499c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800499e:	429a      	cmp	r2, r3
					pxCurrentTCB = pxNewTCB;
 80049a0:	bf98      	it	ls
 80049a2:	6034      	strls	r4, [r6, #0]
 80049a4:	e7cc      	b.n	8004940 <prvAddNewTaskToReadyList+0x64>
 80049a6:	bf00      	nop
 80049a8:	20000ee0 	.word	0x20000ee0
 80049ac:	200013b4 	.word	0x200013b4
 80049b0:	20000f54 	.word	0x20000f54
 80049b4:	20000f2c 	.word	0x20000f2c
 80049b8:	20000f10 	.word	0x20000f10
 80049bc:	20000efc 	.word	0x20000efc
 80049c0:	20000ee4 	.word	0x20000ee4
 80049c4:	20000f28 	.word	0x20000f28
 80049c8:	20000f24 	.word	0x20000f24
 80049cc:	20000ec4 	.word	0x20000ec4
 80049d0:	20000ed8 	.word	0x20000ed8
 80049d4:	20000ed4 	.word	0x20000ed4
 80049d8:	20000f40 	.word	0x20000f40

080049dc <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80049dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80049de:	4b15      	ldr	r3, [pc, #84]	@ (8004a34 <prvAddCurrentTaskToDelayedList+0x58>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80049e0:	4d15      	ldr	r5, [pc, #84]	@ (8004a38 <prvAddCurrentTaskToDelayedList+0x5c>)
const TickType_t xConstTickCount = xTickCount;
 80049e2:	681c      	ldr	r4, [r3, #0]
{
 80049e4:	4606      	mov	r6, r0
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80049e6:	6828      	ldr	r0, [r5, #0]
 80049e8:	3004      	adds	r0, #4
{
 80049ea:	460f      	mov	r7, r1
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80049ec:	f7ff fc6c 	bl	80042c8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80049f0:	1c73      	adds	r3, r6, #1
 80049f2:	d107      	bne.n	8004a04 <prvAddCurrentTaskToDelayedList+0x28>
 80049f4:	b137      	cbz	r7, 8004a04 <prvAddCurrentTaskToDelayedList+0x28>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80049f6:	6829      	ldr	r1, [r5, #0]
 80049f8:	4810      	ldr	r0, [pc, #64]	@ (8004a3c <prvAddCurrentTaskToDelayedList+0x60>)

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80049fa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80049fe:	3104      	adds	r1, #4
 8004a00:	f7ff bc40 	b.w	8004284 <vListInsertEnd>
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004a04:	682b      	ldr	r3, [r5, #0]
 8004a06:	19a4      	adds	r4, r4, r6
 8004a08:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004a0a:	d307      	bcc.n	8004a1c <prvAddCurrentTaskToDelayedList+0x40>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004a0c:	4b0c      	ldr	r3, [pc, #48]	@ (8004a40 <prvAddCurrentTaskToDelayedList+0x64>)
 8004a0e:	6818      	ldr	r0, [r3, #0]
 8004a10:	6829      	ldr	r1, [r5, #0]
}
 8004a12:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004a16:	3104      	adds	r1, #4
 8004a18:	f7ff bc3f 	b.w	800429a <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004a1c:	4b09      	ldr	r3, [pc, #36]	@ (8004a44 <prvAddCurrentTaskToDelayedList+0x68>)
 8004a1e:	6818      	ldr	r0, [r3, #0]
 8004a20:	6829      	ldr	r1, [r5, #0]
 8004a22:	3104      	adds	r1, #4
 8004a24:	f7ff fc39 	bl	800429a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004a28:	4b07      	ldr	r3, [pc, #28]	@ (8004a48 <prvAddCurrentTaskToDelayedList+0x6c>)
 8004a2a:	681a      	ldr	r2, [r3, #0]
 8004a2c:	42a2      	cmp	r2, r4
					xNextTaskUnblockTime = xTimeToWake;
 8004a2e:	bf88      	it	hi
 8004a30:	601c      	strhi	r4, [r3, #0]
}
 8004a32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004a34:	20000edc 	.word	0x20000edc
 8004a38:	200013b4 	.word	0x200013b4
 8004a3c:	20000ee4 	.word	0x20000ee4
 8004a40:	20000f24 	.word	0x20000f24
 8004a44:	20000f28 	.word	0x20000f28
 8004a48:	20000ec0 	.word	0x20000ec0

08004a4c <prvResetNextTaskUnblockTime>:
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004a4c:	4a06      	ldr	r2, [pc, #24]	@ (8004a68 <prvResetNextTaskUnblockTime+0x1c>)
 8004a4e:	6813      	ldr	r3, [r2, #0]
 8004a50:	6819      	ldr	r1, [r3, #0]
 8004a52:	4b06      	ldr	r3, [pc, #24]	@ (8004a6c <prvResetNextTaskUnblockTime+0x20>)
 8004a54:	b919      	cbnz	r1, 8004a5e <prvResetNextTaskUnblockTime+0x12>
		xNextTaskUnblockTime = portMAX_DELAY;
 8004a56:	f04f 32ff 	mov.w	r2, #4294967295
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004a5a:	601a      	str	r2, [r3, #0]
}
 8004a5c:	4770      	bx	lr
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004a5e:	6812      	ldr	r2, [r2, #0]
 8004a60:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004a62:	68d2      	ldr	r2, [r2, #12]
 8004a64:	6852      	ldr	r2, [r2, #4]
 8004a66:	e7f8      	b.n	8004a5a <prvResetNextTaskUnblockTime+0xe>
 8004a68:	20000f28 	.word	0x20000f28
 8004a6c:	20000ec0 	.word	0x20000ec0

08004a70 <prvDeleteTCB>:
	{
 8004a70:	b510      	push	{r4, lr}
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004a72:	f890 3059 	ldrb.w	r3, [r0, #89]	@ 0x59
	{
 8004a76:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004a78:	b93b      	cbnz	r3, 8004a8a <prvDeleteTCB+0x1a>
				vPortFree( pxTCB->pxStack );
 8004a7a:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 8004a7c:	f001 f802 	bl	8005a84 <vPortFree>
				vPortFree( pxTCB );
 8004a80:	4620      	mov	r0, r4
	}
 8004a82:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				vPortFree( pxTCB );
 8004a86:	f000 bffd 	b.w	8005a84 <vPortFree>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004a8a:	2b01      	cmp	r3, #1
 8004a8c:	d0f9      	beq.n	8004a82 <prvDeleteTCB+0x12>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004a8e:	2b02      	cmp	r3, #2
 8004a90:	d008      	beq.n	8004aa4 <prvDeleteTCB+0x34>
 8004a92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a96:	f383 8811 	msr	BASEPRI, r3
 8004a9a:	f3bf 8f6f 	isb	sy
 8004a9e:	f3bf 8f4f 	dsb	sy
 8004aa2:	e7fe      	b.n	8004aa2 <prvDeleteTCB+0x32>
	}
 8004aa4:	bd10      	pop	{r4, pc}
	...

08004aa8 <prvIdleTask>:
{
 8004aa8:	b580      	push	{r7, lr}
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004aaa:	4c13      	ldr	r4, [pc, #76]	@ (8004af8 <prvIdleTask+0x50>)
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8004aac:	4f13      	ldr	r7, [pc, #76]	@ (8004afc <prvIdleTask+0x54>)
				--uxCurrentNumberOfTasks;
 8004aae:	4d14      	ldr	r5, [pc, #80]	@ (8004b00 <prvIdleTask+0x58>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004ab0:	6823      	ldr	r3, [r4, #0]
 8004ab2:	b973      	cbnz	r3, 8004ad2 <prvIdleTask+0x2a>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004ab4:	4b13      	ldr	r3, [pc, #76]	@ (8004b04 <prvIdleTask+0x5c>)
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	2b01      	cmp	r3, #1
 8004aba:	d9f8      	bls.n	8004aae <prvIdleTask+0x6>
				taskYIELD();
 8004abc:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8004ac0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004ac4:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8004ac8:	f3bf 8f4f 	dsb	sy
 8004acc:	f3bf 8f6f 	isb	sy
 8004ad0:	e7ed      	b.n	8004aae <prvIdleTask+0x6>
			taskENTER_CRITICAL();
 8004ad2:	f000 fddf 	bl	8005694 <vPortEnterCritical>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	68de      	ldr	r6, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004ada:	1d30      	adds	r0, r6, #4
 8004adc:	f7ff fbf4 	bl	80042c8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004ae0:	682b      	ldr	r3, [r5, #0]
 8004ae2:	3b01      	subs	r3, #1
 8004ae4:	602b      	str	r3, [r5, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004ae6:	6823      	ldr	r3, [r4, #0]
 8004ae8:	3b01      	subs	r3, #1
 8004aea:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 8004aec:	f000 fdf2 	bl	80056d4 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 8004af0:	4630      	mov	r0, r6
 8004af2:	f7ff ffbd 	bl	8004a70 <prvDeleteTCB>
 8004af6:	e7db      	b.n	8004ab0 <prvIdleTask+0x8>
 8004af8:	20000ef8 	.word	0x20000ef8
 8004afc:	20000efc 	.word	0x20000efc
 8004b00:	20000ee0 	.word	0x20000ee0
 8004b04:	20000f54 	.word	0x20000f54

08004b08 <prvInitialiseNewTask.constprop.0>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8004b08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004b0c:	e9dd 9409 	ldrd	r9, r4, [sp, #36]	@ 0x24
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004b10:	0096      	lsls	r6, r2, #2
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8004b12:	460d      	mov	r5, r1
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004b14:	4632      	mov	r2, r6
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8004b16:	4607      	mov	r7, r0
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004b18:	21a5      	movs	r1, #165	@ 0xa5
 8004b1a:	6b20      	ldr	r0, [r4, #48]	@ 0x30
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8004b1c:	4698      	mov	r8, r3
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004b1e:	f002 ff23 	bl	8007968 <memset>
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8004b22:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8004b24:	3e04      	subs	r6, #4
 8004b26:	441e      	add	r6, r3
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8004b28:	f026 0607 	bic.w	r6, r6, #7
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004b2c:	1e6b      	subs	r3, r5, #1
 8004b2e:	f104 0233 	add.w	r2, r4, #51	@ 0x33
 8004b32:	350f      	adds	r5, #15
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004b34:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8004b38:	f802 1f01 	strb.w	r1, [r2, #1]!
		if( pcName[ x ] == 0x00 )
 8004b3c:	b109      	cbz	r1, 8004b42 <prvInitialiseNewTask.constprop.0+0x3a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004b3e:	42ab      	cmp	r3, r5
 8004b40:	d1f8      	bne.n	8004b34 <prvInitialiseNewTask.constprop.0+0x2c>
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004b42:	9d08      	ldr	r5, [sp, #32]
 8004b44:	2d37      	cmp	r5, #55	@ 0x37
 8004b46:	bf28      	it	cs
 8004b48:	2537      	movcs	r5, #55	@ 0x37
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004b4a:	f04f 0a00 	mov.w	sl, #0
		pxNewTCB->uxMutexesHeld = 0;
 8004b4e:	e9c4 5a13 	strd	r5, sl, [r4, #76]	@ 0x4c
	pxNewTCB->uxPriority = uxPriority;
 8004b52:	62e5      	str	r5, [r4, #44]	@ 0x2c
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004b54:	1d20      	adds	r0, r4, #4
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004b56:	f884 a043 	strb.w	sl, [r4, #67]	@ 0x43
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004b5a:	f7ff fb90 	bl	800427e <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004b5e:	f1c5 0538 	rsb	r5, r5, #56	@ 0x38
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004b62:	f104 0018 	add.w	r0, r4, #24
 8004b66:	f7ff fb8a 	bl	800427e <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 8004b6a:	f8c4 a054 	str.w	sl, [r4, #84]	@ 0x54
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004b6e:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004b70:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004b72:	6264      	str	r4, [r4, #36]	@ 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004b74:	f884 a058 	strb.w	sl, [r4, #88]	@ 0x58
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004b78:	4642      	mov	r2, r8
 8004b7a:	4639      	mov	r1, r7
 8004b7c:	4630      	mov	r0, r6
 8004b7e:	f000 fd5b 	bl	8005638 <pxPortInitialiseStack>
 8004b82:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 8004b84:	f1b9 0f00 	cmp.w	r9, #0
 8004b88:	d001      	beq.n	8004b8e <prvInitialiseNewTask.constprop.0+0x86>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004b8a:	f8c9 4000 	str.w	r4, [r9]
}
 8004b8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08004b92 <xTaskCreateStatic>:
	{
 8004b92:	b570      	push	{r4, r5, r6, lr}
 8004b94:	b086      	sub	sp, #24
 8004b96:	e9dd 540b 	ldrd	r5, r4, [sp, #44]	@ 0x2c
		configASSERT( puxStackBuffer != NULL );
 8004b9a:	b945      	cbnz	r5, 8004bae <xTaskCreateStatic+0x1c>
 8004b9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ba0:	f383 8811 	msr	BASEPRI, r3
 8004ba4:	f3bf 8f6f 	isb	sy
 8004ba8:	f3bf 8f4f 	dsb	sy
 8004bac:	e7fe      	b.n	8004bac <xTaskCreateStatic+0x1a>
		configASSERT( pxTaskBuffer != NULL );
 8004bae:	b944      	cbnz	r4, 8004bc2 <xTaskCreateStatic+0x30>
 8004bb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bb4:	f383 8811 	msr	BASEPRI, r3
 8004bb8:	f3bf 8f6f 	isb	sy
 8004bbc:	f3bf 8f4f 	dsb	sy
 8004bc0:	e7fe      	b.n	8004bc0 <xTaskCreateStatic+0x2e>
			volatile size_t xSize = sizeof( StaticTask_t );
 8004bc2:	265c      	movs	r6, #92	@ 0x5c
 8004bc4:	9605      	str	r6, [sp, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004bc6:	9e05      	ldr	r6, [sp, #20]
 8004bc8:	2e5c      	cmp	r6, #92	@ 0x5c
 8004bca:	d008      	beq.n	8004bde <xTaskCreateStatic+0x4c>
 8004bcc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bd0:	f383 8811 	msr	BASEPRI, r3
 8004bd4:	f3bf 8f6f 	isb	sy
 8004bd8:	f3bf 8f4f 	dsb	sy
 8004bdc:	e7fe      	b.n	8004bdc <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004bde:	6325      	str	r5, [r4, #48]	@ 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004be0:	2502      	movs	r5, #2
 8004be2:	f884 5059 	strb.w	r5, [r4, #89]	@ 0x59
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004be6:	ad04      	add	r5, sp, #16
 8004be8:	9501      	str	r5, [sp, #4]
 8004bea:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8004bec:	9402      	str	r4, [sp, #8]
 8004bee:	9500      	str	r5, [sp, #0]
 8004bf0:	f7ff ff8a 	bl	8004b08 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004bf4:	4620      	mov	r0, r4
 8004bf6:	f7ff fe71 	bl	80048dc <prvAddNewTaskToReadyList>
	}
 8004bfa:	9804      	ldr	r0, [sp, #16]
 8004bfc:	b006      	add	sp, #24
 8004bfe:	bd70      	pop	{r4, r5, r6, pc}

08004c00 <xTaskCreate>:
	{
 8004c00:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004c04:	4607      	mov	r7, r0
 8004c06:	b085      	sub	sp, #20
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004c08:	0090      	lsls	r0, r2, #2
	{
 8004c0a:	4688      	mov	r8, r1
 8004c0c:	4616      	mov	r6, r2
 8004c0e:	4699      	mov	r9, r3
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004c10:	f000 fea6 	bl	8005960 <pvPortMalloc>
			if( pxStack != NULL )
 8004c14:	4605      	mov	r5, r0
 8004c16:	b920      	cbnz	r0, 8004c22 <xTaskCreate+0x22>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004c18:	f04f 30ff 	mov.w	r0, #4294967295
	}
 8004c1c:	b005      	add	sp, #20
 8004c1e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8004c22:	205c      	movs	r0, #92	@ 0x5c
 8004c24:	f000 fe9c 	bl	8005960 <pvPortMalloc>
				if( pxNewTCB != NULL )
 8004c28:	4604      	mov	r4, r0
 8004c2a:	b198      	cbz	r0, 8004c54 <xTaskCreate+0x54>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004c2c:	2300      	movs	r3, #0
 8004c2e:	f880 3059 	strb.w	r3, [r0, #89]	@ 0x59
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004c32:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
					pxNewTCB->pxStack = pxStack;
 8004c34:	6305      	str	r5, [r0, #48]	@ 0x30
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004c36:	9301      	str	r3, [sp, #4]
 8004c38:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8004c3a:	9002      	str	r0, [sp, #8]
 8004c3c:	9300      	str	r3, [sp, #0]
 8004c3e:	4632      	mov	r2, r6
 8004c40:	464b      	mov	r3, r9
 8004c42:	4641      	mov	r1, r8
 8004c44:	4638      	mov	r0, r7
 8004c46:	f7ff ff5f 	bl	8004b08 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004c4a:	4620      	mov	r0, r4
 8004c4c:	f7ff fe46 	bl	80048dc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004c50:	2001      	movs	r0, #1
 8004c52:	e7e3      	b.n	8004c1c <xTaskCreate+0x1c>
					vPortFree( pxStack );
 8004c54:	4628      	mov	r0, r5
 8004c56:	f000 ff15 	bl	8005a84 <vPortFree>
		if( pxNewTCB != NULL )
 8004c5a:	e7dd      	b.n	8004c18 <xTaskCreate+0x18>

08004c5c <vTaskStartScheduler>:
{
 8004c5c:	b510      	push	{r4, lr}
 8004c5e:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004c60:	2400      	movs	r4, #0
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004c62:	aa07      	add	r2, sp, #28
 8004c64:	a906      	add	r1, sp, #24
 8004c66:	a805      	add	r0, sp, #20
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004c68:	e9cd 4405 	strd	r4, r4, [sp, #20]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004c6c:	f7ff fae4 	bl	8004238 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004c70:	9b05      	ldr	r3, [sp, #20]
 8004c72:	9302      	str	r3, [sp, #8]
 8004c74:	9b06      	ldr	r3, [sp, #24]
 8004c76:	9a07      	ldr	r2, [sp, #28]
 8004c78:	4916      	ldr	r1, [pc, #88]	@ (8004cd4 <vTaskStartScheduler+0x78>)
 8004c7a:	4817      	ldr	r0, [pc, #92]	@ (8004cd8 <vTaskStartScheduler+0x7c>)
 8004c7c:	e9cd 4300 	strd	r4, r3, [sp]
 8004c80:	4623      	mov	r3, r4
 8004c82:	f7ff ff86 	bl	8004b92 <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 8004c86:	b318      	cbz	r0, 8004cd0 <vTaskStartScheduler+0x74>
			xReturn = xTimerCreateTimerTask();
 8004c88:	f000 fb0e 	bl	80052a8 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 8004c8c:	2801      	cmp	r0, #1
 8004c8e:	d114      	bne.n	8004cba <vTaskStartScheduler+0x5e>
 8004c90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c94:	f383 8811 	msr	BASEPRI, r3
 8004c98:	f3bf 8f6f 	isb	sy
 8004c9c:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 8004ca0:	4b0e      	ldr	r3, [pc, #56]	@ (8004cdc <vTaskStartScheduler+0x80>)
 8004ca2:	f04f 32ff 	mov.w	r2, #4294967295
 8004ca6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004ca8:	4b0d      	ldr	r3, [pc, #52]	@ (8004ce0 <vTaskStartScheduler+0x84>)
 8004caa:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8004cac:	4b0d      	ldr	r3, [pc, #52]	@ (8004ce4 <vTaskStartScheduler+0x88>)
 8004cae:	601c      	str	r4, [r3, #0]
}
 8004cb0:	b008      	add	sp, #32
 8004cb2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if( xPortStartScheduler() != pdFALSE )
 8004cb6:	f000 bd7d 	b.w	80057b4 <xPortStartScheduler>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004cba:	3001      	adds	r0, #1
 8004cbc:	d108      	bne.n	8004cd0 <vTaskStartScheduler+0x74>
 8004cbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cc2:	f383 8811 	msr	BASEPRI, r3
 8004cc6:	f3bf 8f6f 	isb	sy
 8004cca:	f3bf 8f4f 	dsb	sy
 8004cce:	e7fe      	b.n	8004cce <vTaskStartScheduler+0x72>
}
 8004cd0:	b008      	add	sp, #32
 8004cd2:	bd10      	pop	{r4, pc}
 8004cd4:	0800a654 	.word	0x0800a654
 8004cd8:	08004aa9 	.word	0x08004aa9
 8004cdc:	20000ec0 	.word	0x20000ec0
 8004ce0:	20000ed4 	.word	0x20000ed4
 8004ce4:	20000edc 	.word	0x20000edc

08004ce8 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8004ce8:	4a02      	ldr	r2, [pc, #8]	@ (8004cf4 <vTaskSuspendAll+0xc>)
 8004cea:	6813      	ldr	r3, [r2, #0]
 8004cec:	3301      	adds	r3, #1
 8004cee:	6013      	str	r3, [r2, #0]
}
 8004cf0:	4770      	bx	lr
 8004cf2:	bf00      	nop
 8004cf4:	20000ebc 	.word	0x20000ebc

08004cf8 <xTaskGetTickCount>:
		xTicks = xTickCount;
 8004cf8:	4b01      	ldr	r3, [pc, #4]	@ (8004d00 <xTaskGetTickCount+0x8>)
 8004cfa:	6818      	ldr	r0, [r3, #0]
}
 8004cfc:	4770      	bx	lr
 8004cfe:	bf00      	nop
 8004d00:	20000edc 	.word	0x20000edc

08004d04 <xTaskIncrementTick>:
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004d04:	4b3f      	ldr	r3, [pc, #252]	@ (8004e04 <xTaskIncrementTick+0x100>)
 8004d06:	681b      	ldr	r3, [r3, #0]
{
 8004d08:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d171      	bne.n	8004df4 <xTaskIncrementTick+0xf0>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004d10:	4b3d      	ldr	r3, [pc, #244]	@ (8004e08 <xTaskIncrementTick+0x104>)
 8004d12:	681c      	ldr	r4, [r3, #0]
 8004d14:	3401      	adds	r4, #1
		xTickCount = xConstTickCount;
 8004d16:	601c      	str	r4, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004d18:	b9bc      	cbnz	r4, 8004d4a <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 8004d1a:	4b3c      	ldr	r3, [pc, #240]	@ (8004e0c <xTaskIncrementTick+0x108>)
 8004d1c:	681a      	ldr	r2, [r3, #0]
 8004d1e:	6812      	ldr	r2, [r2, #0]
 8004d20:	b142      	cbz	r2, 8004d34 <xTaskIncrementTick+0x30>
 8004d22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d26:	f383 8811 	msr	BASEPRI, r3
 8004d2a:	f3bf 8f6f 	isb	sy
 8004d2e:	f3bf 8f4f 	dsb	sy
 8004d32:	e7fe      	b.n	8004d32 <xTaskIncrementTick+0x2e>
 8004d34:	4a36      	ldr	r2, [pc, #216]	@ (8004e10 <xTaskIncrementTick+0x10c>)
 8004d36:	6819      	ldr	r1, [r3, #0]
 8004d38:	6810      	ldr	r0, [r2, #0]
 8004d3a:	6018      	str	r0, [r3, #0]
 8004d3c:	6011      	str	r1, [r2, #0]
 8004d3e:	4a35      	ldr	r2, [pc, #212]	@ (8004e14 <xTaskIncrementTick+0x110>)
 8004d40:	6813      	ldr	r3, [r2, #0]
 8004d42:	3301      	adds	r3, #1
 8004d44:	6013      	str	r3, [r2, #0]
 8004d46:	f7ff fe81 	bl	8004a4c <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004d4a:	4d33      	ldr	r5, [pc, #204]	@ (8004e18 <xTaskIncrementTick+0x114>)
 8004d4c:	4e33      	ldr	r6, [pc, #204]	@ (8004e1c <xTaskIncrementTick+0x118>)
 8004d4e:	682b      	ldr	r3, [r5, #0]
 8004d50:	4f33      	ldr	r7, [pc, #204]	@ (8004e20 <xTaskIncrementTick+0x11c>)
 8004d52:	42a3      	cmp	r3, r4
BaseType_t xSwitchRequired = pdFALSE;
 8004d54:	f04f 0b00 	mov.w	fp, #0
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004d58:	d911      	bls.n	8004d7e <xTaskIncrementTick+0x7a>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004d5a:	683a      	ldr	r2, [r7, #0]
 8004d5c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004d5e:	2114      	movs	r1, #20
 8004d60:	434a      	muls	r2, r1
 8004d62:	58b2      	ldr	r2, [r6, r2]
				xSwitchRequired = pdTRUE;
 8004d64:	2a02      	cmp	r2, #2
 8004d66:	bf28      	it	cs
 8004d68:	f04f 0b01 	movcs.w	fp, #1
		if( xYieldPending != pdFALSE )
 8004d6c:	4a2d      	ldr	r2, [pc, #180]	@ (8004e24 <xTaskIncrementTick+0x120>)
 8004d6e:	6812      	ldr	r2, [r2, #0]
			xSwitchRequired = pdTRUE;
 8004d70:	2a00      	cmp	r2, #0
}
 8004d72:	bf0c      	ite	eq
 8004d74:	4658      	moveq	r0, fp
 8004d76:	2001      	movne	r0, #1
 8004d78:	b003      	add	sp, #12
 8004d7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004d7e:	f8df 908c 	ldr.w	r9, [pc, #140]	@ 8004e0c <xTaskIncrementTick+0x108>
					prvAddTaskToReadyList( pxTCB );
 8004d82:	f8df a0a8 	ldr.w	sl, [pc, #168]	@ 8004e2c <xTaskIncrementTick+0x128>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004d86:	f8d9 2000 	ldr.w	r2, [r9]
 8004d8a:	6812      	ldr	r2, [r2, #0]
 8004d8c:	b91a      	cbnz	r2, 8004d96 <xTaskIncrementTick+0x92>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004d8e:	f04f 32ff 	mov.w	r2, #4294967295
 8004d92:	602a      	str	r2, [r5, #0]
					break;
 8004d94:	e7e1      	b.n	8004d5a <xTaskIncrementTick+0x56>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004d96:	f8d9 2000 	ldr.w	r2, [r9]
 8004d9a:	68d2      	ldr	r2, [r2, #12]
 8004d9c:	f8d2 800c 	ldr.w	r8, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004da0:	f8d8 1004 	ldr.w	r1, [r8, #4]
					if( xConstTickCount < xItemValue )
 8004da4:	428c      	cmp	r4, r1
 8004da6:	d201      	bcs.n	8004dac <xTaskIncrementTick+0xa8>
						xNextTaskUnblockTime = xItemValue;
 8004da8:	6029      	str	r1, [r5, #0]
						break;
 8004daa:	e7d6      	b.n	8004d5a <xTaskIncrementTick+0x56>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004dac:	f108 0304 	add.w	r3, r8, #4
 8004db0:	4618      	mov	r0, r3
 8004db2:	9301      	str	r3, [sp, #4]
 8004db4:	f7ff fa88 	bl	80042c8 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004db8:	f8d8 1028 	ldr.w	r1, [r8, #40]	@ 0x28
 8004dbc:	b119      	cbz	r1, 8004dc6 <xTaskIncrementTick+0xc2>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004dbe:	f108 0018 	add.w	r0, r8, #24
 8004dc2:	f7ff fa81 	bl	80042c8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004dc6:	f8d8 002c 	ldr.w	r0, [r8, #44]	@ 0x2c
 8004dca:	f8da 1000 	ldr.w	r1, [sl]
 8004dce:	2314      	movs	r3, #20
 8004dd0:	4288      	cmp	r0, r1
 8004dd2:	bf88      	it	hi
 8004dd4:	f8ca 0000 	strhi.w	r0, [sl]
 8004dd8:	9901      	ldr	r1, [sp, #4]
 8004dda:	fb03 6000 	mla	r0, r3, r0, r6
 8004dde:	f7ff fa51 	bl	8004284 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004de2:	6838      	ldr	r0, [r7, #0]
 8004de4:	f8d8 102c 	ldr.w	r1, [r8, #44]	@ 0x2c
 8004de8:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
							xSwitchRequired = pdTRUE;
 8004dea:	4291      	cmp	r1, r2
 8004dec:	bf28      	it	cs
 8004dee:	f04f 0b01 	movcs.w	fp, #1
 8004df2:	e7c8      	b.n	8004d86 <xTaskIncrementTick+0x82>
		++uxPendedTicks;
 8004df4:	4a0c      	ldr	r2, [pc, #48]	@ (8004e28 <xTaskIncrementTick+0x124>)
 8004df6:	6813      	ldr	r3, [r2, #0]
 8004df8:	3301      	adds	r3, #1
 8004dfa:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 8004dfc:	f04f 0b00 	mov.w	fp, #0
 8004e00:	e7b4      	b.n	8004d6c <xTaskIncrementTick+0x68>
 8004e02:	bf00      	nop
 8004e04:	20000ebc 	.word	0x20000ebc
 8004e08:	20000edc 	.word	0x20000edc
 8004e0c:	20000f28 	.word	0x20000f28
 8004e10:	20000f24 	.word	0x20000f24
 8004e14:	20000ec8 	.word	0x20000ec8
 8004e18:	20000ec0 	.word	0x20000ec0
 8004e1c:	20000f54 	.word	0x20000f54
 8004e20:	200013b4 	.word	0x200013b4
 8004e24:	20000ecc 	.word	0x20000ecc
 8004e28:	20000ed0 	.word	0x20000ed0
 8004e2c:	20000ed8 	.word	0x20000ed8

08004e30 <xTaskResumeAll>:
{
 8004e30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	configASSERT( uxSchedulerSuspended );
 8004e34:	4c30      	ldr	r4, [pc, #192]	@ (8004ef8 <xTaskResumeAll+0xc8>)
 8004e36:	6823      	ldr	r3, [r4, #0]
 8004e38:	b943      	cbnz	r3, 8004e4c <xTaskResumeAll+0x1c>
 8004e3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e3e:	f383 8811 	msr	BASEPRI, r3
 8004e42:	f3bf 8f6f 	isb	sy
 8004e46:	f3bf 8f4f 	dsb	sy
 8004e4a:	e7fe      	b.n	8004e4a <xTaskResumeAll+0x1a>
	taskENTER_CRITICAL();
 8004e4c:	f000 fc22 	bl	8005694 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8004e50:	6823      	ldr	r3, [r4, #0]
 8004e52:	3b01      	subs	r3, #1
 8004e54:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004e56:	6824      	ldr	r4, [r4, #0]
 8004e58:	b12c      	cbz	r4, 8004e66 <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 8004e5a:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8004e5c:	f000 fc3a 	bl	80056d4 <vPortExitCritical>
}
 8004e60:	4620      	mov	r0, r4
 8004e62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004e66:	4b25      	ldr	r3, [pc, #148]	@ (8004efc <xTaskResumeAll+0xcc>)
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d0f5      	beq.n	8004e5a <xTaskResumeAll+0x2a>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004e6e:	4d24      	ldr	r5, [pc, #144]	@ (8004f00 <xTaskResumeAll+0xd0>)
					prvAddTaskToReadyList( pxTCB );
 8004e70:	4e24      	ldr	r6, [pc, #144]	@ (8004f04 <xTaskResumeAll+0xd4>)
 8004e72:	f8df 80a0 	ldr.w	r8, [pc, #160]	@ 8004f14 <xTaskResumeAll+0xe4>
 8004e76:	e01d      	b.n	8004eb4 <xTaskResumeAll+0x84>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8004e78:	68eb      	ldr	r3, [r5, #12]
 8004e7a:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004e7c:	1d27      	adds	r7, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004e7e:	f104 0018 	add.w	r0, r4, #24
 8004e82:	f7ff fa21 	bl	80042c8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004e86:	4638      	mov	r0, r7
 8004e88:	f7ff fa1e 	bl	80042c8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004e8c:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8004e8e:	6832      	ldr	r2, [r6, #0]
 8004e90:	2014      	movs	r0, #20
 8004e92:	4293      	cmp	r3, r2
 8004e94:	fb00 8003 	mla	r0, r0, r3, r8
 8004e98:	4639      	mov	r1, r7
 8004e9a:	bf88      	it	hi
 8004e9c:	6033      	strhi	r3, [r6, #0]
 8004e9e:	f7ff f9f1 	bl	8004284 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004ea2:	4b19      	ldr	r3, [pc, #100]	@ (8004f08 <xTaskResumeAll+0xd8>)
 8004ea4:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004eaa:	429a      	cmp	r2, r3
 8004eac:	d302      	bcc.n	8004eb4 <xTaskResumeAll+0x84>
						xYieldPending = pdTRUE;
 8004eae:	4b17      	ldr	r3, [pc, #92]	@ (8004f0c <xTaskResumeAll+0xdc>)
 8004eb0:	2201      	movs	r2, #1
 8004eb2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004eb4:	682b      	ldr	r3, [r5, #0]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d1de      	bne.n	8004e78 <xTaskResumeAll+0x48>
				if( pxTCB != NULL )
 8004eba:	b10c      	cbz	r4, 8004ec0 <xTaskResumeAll+0x90>
					prvResetNextTaskUnblockTime();
 8004ebc:	f7ff fdc6 	bl	8004a4c <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004ec0:	4d13      	ldr	r5, [pc, #76]	@ (8004f10 <xTaskResumeAll+0xe0>)
 8004ec2:	682c      	ldr	r4, [r5, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8004ec4:	b144      	cbz	r4, 8004ed8 <xTaskResumeAll+0xa8>
								xYieldPending = pdTRUE;
 8004ec6:	4e11      	ldr	r6, [pc, #68]	@ (8004f0c <xTaskResumeAll+0xdc>)
 8004ec8:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 8004eca:	f7ff ff1b 	bl	8004d04 <xTaskIncrementTick>
 8004ece:	b100      	cbz	r0, 8004ed2 <xTaskResumeAll+0xa2>
								xYieldPending = pdTRUE;
 8004ed0:	6037      	str	r7, [r6, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004ed2:	3c01      	subs	r4, #1
 8004ed4:	d1f9      	bne.n	8004eca <xTaskResumeAll+0x9a>
						uxPendedTicks = 0;
 8004ed6:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 8004ed8:	4b0c      	ldr	r3, [pc, #48]	@ (8004f0c <xTaskResumeAll+0xdc>)
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d0bc      	beq.n	8004e5a <xTaskResumeAll+0x2a>
					taskYIELD_IF_USING_PREEMPTION();
 8004ee0:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8004ee4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004ee8:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8004eec:	f3bf 8f4f 	dsb	sy
 8004ef0:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8004ef4:	2401      	movs	r4, #1
 8004ef6:	e7b1      	b.n	8004e5c <xTaskResumeAll+0x2c>
 8004ef8:	20000ebc 	.word	0x20000ebc
 8004efc:	20000ee0 	.word	0x20000ee0
 8004f00:	20000f10 	.word	0x20000f10
 8004f04:	20000ed8 	.word	0x20000ed8
 8004f08:	200013b4 	.word	0x200013b4
 8004f0c:	20000ecc 	.word	0x20000ecc
 8004f10:	20000ed0 	.word	0x20000ed0
 8004f14:	20000f54 	.word	0x20000f54

08004f18 <vTaskDelay>:
	{
 8004f18:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004f1a:	b950      	cbnz	r0, 8004f32 <vTaskDelay+0x1a>
			portYIELD_WITHIN_API();
 8004f1c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8004f20:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004f24:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8004f28:	f3bf 8f4f 	dsb	sy
 8004f2c:	f3bf 8f6f 	isb	sy
	}
 8004f30:	bd08      	pop	{r3, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 8004f32:	4b0a      	ldr	r3, [pc, #40]	@ (8004f5c <vTaskDelay+0x44>)
 8004f34:	6819      	ldr	r1, [r3, #0]
 8004f36:	b141      	cbz	r1, 8004f4a <vTaskDelay+0x32>
 8004f38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f3c:	f383 8811 	msr	BASEPRI, r3
 8004f40:	f3bf 8f6f 	isb	sy
 8004f44:	f3bf 8f4f 	dsb	sy
 8004f48:	e7fe      	b.n	8004f48 <vTaskDelay+0x30>
			vTaskSuspendAll();
 8004f4a:	f7ff fecd 	bl	8004ce8 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004f4e:	f7ff fd45 	bl	80049dc <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 8004f52:	f7ff ff6d 	bl	8004e30 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8004f56:	2800      	cmp	r0, #0
 8004f58:	d0e0      	beq.n	8004f1c <vTaskDelay+0x4>
 8004f5a:	e7e9      	b.n	8004f30 <vTaskDelay+0x18>
 8004f5c:	20000ebc 	.word	0x20000ebc

08004f60 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004f60:	4b17      	ldr	r3, [pc, #92]	@ (8004fc0 <vTaskSwitchContext+0x60>)
 8004f62:	681a      	ldr	r2, [r3, #0]
 8004f64:	4b17      	ldr	r3, [pc, #92]	@ (8004fc4 <vTaskSwitchContext+0x64>)
{
 8004f66:	b570      	push	{r4, r5, r6, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004f68:	b112      	cbz	r2, 8004f70 <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 8004f6a:	2201      	movs	r2, #1
 8004f6c:	601a      	str	r2, [r3, #0]
}
 8004f6e:	bd70      	pop	{r4, r5, r6, pc}
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8004f70:	4d15      	ldr	r5, [pc, #84]	@ (8004fc8 <vTaskSwitchContext+0x68>)
		xYieldPending = pdFALSE;
 8004f72:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8004f74:	682a      	ldr	r2, [r5, #0]
 8004f76:	4915      	ldr	r1, [pc, #84]	@ (8004fcc <vTaskSwitchContext+0x6c>)
 8004f78:	2614      	movs	r6, #20
 8004f7a:	fb06 f302 	mul.w	r3, r6, r2
 8004f7e:	18c8      	adds	r0, r1, r3
 8004f80:	58cc      	ldr	r4, [r1, r3]
 8004f82:	b18c      	cbz	r4, 8004fa8 <vTaskSwitchContext+0x48>
 8004f84:	6844      	ldr	r4, [r0, #4]
 8004f86:	3308      	adds	r3, #8
 8004f88:	6864      	ldr	r4, [r4, #4]
 8004f8a:	6044      	str	r4, [r0, #4]
 8004f8c:	440b      	add	r3, r1
 8004f8e:	429c      	cmp	r4, r3
 8004f90:	bf04      	itt	eq
 8004f92:	6863      	ldreq	r3, [r4, #4]
 8004f94:	6043      	streq	r3, [r0, #4]
 8004f96:	2314      	movs	r3, #20
 8004f98:	fb03 1102 	mla	r1, r3, r2, r1
 8004f9c:	684b      	ldr	r3, [r1, #4]
 8004f9e:	68d9      	ldr	r1, [r3, #12]
 8004fa0:	4b0b      	ldr	r3, [pc, #44]	@ (8004fd0 <vTaskSwitchContext+0x70>)
 8004fa2:	6019      	str	r1, [r3, #0]
 8004fa4:	602a      	str	r2, [r5, #0]
}
 8004fa6:	e7e2      	b.n	8004f6e <vTaskSwitchContext+0xe>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8004fa8:	b942      	cbnz	r2, 8004fbc <vTaskSwitchContext+0x5c>
 8004faa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fae:	f383 8811 	msr	BASEPRI, r3
 8004fb2:	f3bf 8f6f 	isb	sy
 8004fb6:	f3bf 8f4f 	dsb	sy
 8004fba:	e7fe      	b.n	8004fba <vTaskSwitchContext+0x5a>
 8004fbc:	3a01      	subs	r2, #1
 8004fbe:	e7dc      	b.n	8004f7a <vTaskSwitchContext+0x1a>
 8004fc0:	20000ebc 	.word	0x20000ebc
 8004fc4:	20000ecc 	.word	0x20000ecc
 8004fc8:	20000ed8 	.word	0x20000ed8
 8004fcc:	20000f54 	.word	0x20000f54
 8004fd0:	200013b4 	.word	0x200013b4

08004fd4 <vTaskPlaceOnEventList>:
{
 8004fd4:	b510      	push	{r4, lr}
 8004fd6:	460c      	mov	r4, r1
	configASSERT( pxEventList );
 8004fd8:	b940      	cbnz	r0, 8004fec <vTaskPlaceOnEventList+0x18>
 8004fda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fde:	f383 8811 	msr	BASEPRI, r3
 8004fe2:	f3bf 8f6f 	isb	sy
 8004fe6:	f3bf 8f4f 	dsb	sy
 8004fea:	e7fe      	b.n	8004fea <vTaskPlaceOnEventList+0x16>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004fec:	4b05      	ldr	r3, [pc, #20]	@ (8005004 <vTaskPlaceOnEventList+0x30>)
 8004fee:	6819      	ldr	r1, [r3, #0]
 8004ff0:	3118      	adds	r1, #24
 8004ff2:	f7ff f952 	bl	800429a <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004ff6:	4620      	mov	r0, r4
 8004ff8:	2101      	movs	r1, #1
}
 8004ffa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004ffe:	f7ff bced 	b.w	80049dc <prvAddCurrentTaskToDelayedList>
 8005002:	bf00      	nop
 8005004:	200013b4 	.word	0x200013b4

08005008 <vTaskPlaceOnEventListRestricted>:
	{
 8005008:	b538      	push	{r3, r4, r5, lr}
 800500a:	460d      	mov	r5, r1
 800500c:	4614      	mov	r4, r2
		configASSERT( pxEventList );
 800500e:	b940      	cbnz	r0, 8005022 <vTaskPlaceOnEventListRestricted+0x1a>
 8005010:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005014:	f383 8811 	msr	BASEPRI, r3
 8005018:	f3bf 8f6f 	isb	sy
 800501c:	f3bf 8f4f 	dsb	sy
 8005020:	e7fe      	b.n	8005020 <vTaskPlaceOnEventListRestricted+0x18>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005022:	4b07      	ldr	r3, [pc, #28]	@ (8005040 <vTaskPlaceOnEventListRestricted+0x38>)
 8005024:	6819      	ldr	r1, [r3, #0]
 8005026:	3118      	adds	r1, #24
 8005028:	f7ff f92c 	bl	8004284 <vListInsertEnd>
			xTicksToWait = portMAX_DELAY;
 800502c:	2c00      	cmp	r4, #0
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800502e:	4621      	mov	r1, r4
 8005030:	bf0c      	ite	eq
 8005032:	4628      	moveq	r0, r5
 8005034:	f04f 30ff 	movne.w	r0, #4294967295
	}
 8005038:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800503c:	f7ff bcce 	b.w	80049dc <prvAddCurrentTaskToDelayedList>
 8005040:	200013b4 	.word	0x200013b4

08005044 <xTaskRemoveFromEventList>:
{
 8005044:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8005046:	68c3      	ldr	r3, [r0, #12]
 8005048:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 800504a:	b944      	cbnz	r4, 800505e <xTaskRemoveFromEventList+0x1a>
 800504c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005050:	f383 8811 	msr	BASEPRI, r3
 8005054:	f3bf 8f6f 	isb	sy
 8005058:	f3bf 8f4f 	dsb	sy
 800505c:	e7fe      	b.n	800505c <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800505e:	f104 0518 	add.w	r5, r4, #24
 8005062:	4628      	mov	r0, r5
 8005064:	f7ff f930 	bl	80042c8 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005068:	4b10      	ldr	r3, [pc, #64]	@ (80050ac <xTaskRemoveFromEventList+0x68>)
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	b9db      	cbnz	r3, 80050a6 <xTaskRemoveFromEventList+0x62>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800506e:	1d25      	adds	r5, r4, #4
 8005070:	4628      	mov	r0, r5
 8005072:	f7ff f929 	bl	80042c8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005076:	4a0e      	ldr	r2, [pc, #56]	@ (80050b0 <xTaskRemoveFromEventList+0x6c>)
 8005078:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800507a:	6811      	ldr	r1, [r2, #0]
 800507c:	428b      	cmp	r3, r1
 800507e:	bf88      	it	hi
 8005080:	6013      	strhi	r3, [r2, #0]
 8005082:	4a0c      	ldr	r2, [pc, #48]	@ (80050b4 <xTaskRemoveFromEventList+0x70>)
 8005084:	2014      	movs	r0, #20
 8005086:	4629      	mov	r1, r5
 8005088:	fb00 2003 	mla	r0, r0, r3, r2
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800508c:	f7ff f8fa 	bl	8004284 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005090:	4b09      	ldr	r3, [pc, #36]	@ (80050b8 <xTaskRemoveFromEventList+0x74>)
 8005092:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005098:	429a      	cmp	r2, r3
		xYieldPending = pdTRUE;
 800509a:	bf83      	ittte	hi
 800509c:	4b07      	ldrhi	r3, [pc, #28]	@ (80050bc <xTaskRemoveFromEventList+0x78>)
 800509e:	2001      	movhi	r0, #1
 80050a0:	6018      	strhi	r0, [r3, #0]
		xReturn = pdFALSE;
 80050a2:	2000      	movls	r0, #0
}
 80050a4:	bd38      	pop	{r3, r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80050a6:	4806      	ldr	r0, [pc, #24]	@ (80050c0 <xTaskRemoveFromEventList+0x7c>)
 80050a8:	4629      	mov	r1, r5
 80050aa:	e7ef      	b.n	800508c <xTaskRemoveFromEventList+0x48>
 80050ac:	20000ebc 	.word	0x20000ebc
 80050b0:	20000ed8 	.word	0x20000ed8
 80050b4:	20000f54 	.word	0x20000f54
 80050b8:	200013b4 	.word	0x200013b4
 80050bc:	20000ecc 	.word	0x20000ecc
 80050c0:	20000f10 	.word	0x20000f10

080050c4 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80050c4:	4b03      	ldr	r3, [pc, #12]	@ (80050d4 <vTaskInternalSetTimeOutState+0x10>)
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80050ca:	4b03      	ldr	r3, [pc, #12]	@ (80050d8 <vTaskInternalSetTimeOutState+0x14>)
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	6043      	str	r3, [r0, #4]
}
 80050d0:	4770      	bx	lr
 80050d2:	bf00      	nop
 80050d4:	20000ec8 	.word	0x20000ec8
 80050d8:	20000edc 	.word	0x20000edc

080050dc <xTaskCheckForTimeOut>:
{
 80050dc:	b570      	push	{r4, r5, r6, lr}
 80050de:	460c      	mov	r4, r1
	configASSERT( pxTimeOut );
 80050e0:	4605      	mov	r5, r0
 80050e2:	b940      	cbnz	r0, 80050f6 <xTaskCheckForTimeOut+0x1a>
 80050e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050e8:	f383 8811 	msr	BASEPRI, r3
 80050ec:	f3bf 8f6f 	isb	sy
 80050f0:	f3bf 8f4f 	dsb	sy
 80050f4:	e7fe      	b.n	80050f4 <xTaskCheckForTimeOut+0x18>
	configASSERT( pxTicksToWait );
 80050f6:	b941      	cbnz	r1, 800510a <xTaskCheckForTimeOut+0x2e>
 80050f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050fc:	f383 8811 	msr	BASEPRI, r3
 8005100:	f3bf 8f6f 	isb	sy
 8005104:	f3bf 8f4f 	dsb	sy
 8005108:	e7fe      	b.n	8005108 <xTaskCheckForTimeOut+0x2c>
	taskENTER_CRITICAL();
 800510a:	f000 fac3 	bl	8005694 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 800510e:	4b0f      	ldr	r3, [pc, #60]	@ (800514c <xTaskCheckForTimeOut+0x70>)
 8005110:	6819      	ldr	r1, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 8005112:	6823      	ldr	r3, [r4, #0]
 8005114:	1c5a      	adds	r2, r3, #1
 8005116:	d010      	beq.n	800513a <xTaskCheckForTimeOut+0x5e>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005118:	480d      	ldr	r0, [pc, #52]	@ (8005150 <xTaskCheckForTimeOut+0x74>)
 800511a:	682e      	ldr	r6, [r5, #0]
 800511c:	6800      	ldr	r0, [r0, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800511e:	686a      	ldr	r2, [r5, #4]
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005120:	4286      	cmp	r6, r0
 8005122:	d001      	beq.n	8005128 <xTaskCheckForTimeOut+0x4c>
 8005124:	428a      	cmp	r2, r1
 8005126:	d90f      	bls.n	8005148 <xTaskCheckForTimeOut+0x6c>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005128:	1a88      	subs	r0, r1, r2
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800512a:	4283      	cmp	r3, r0
 800512c:	d90a      	bls.n	8005144 <xTaskCheckForTimeOut+0x68>
			*pxTicksToWait -= xElapsedTime;
 800512e:	1a5b      	subs	r3, r3, r1
 8005130:	4413      	add	r3, r2
 8005132:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005134:	4628      	mov	r0, r5
 8005136:	f7ff ffc5 	bl	80050c4 <vTaskInternalSetTimeOutState>
				xReturn = pdFALSE;
 800513a:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800513c:	f000 faca 	bl	80056d4 <vPortExitCritical>
}
 8005140:	4620      	mov	r0, r4
 8005142:	bd70      	pop	{r4, r5, r6, pc}
			*pxTicksToWait = 0;
 8005144:	2300      	movs	r3, #0
 8005146:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 8005148:	2401      	movs	r4, #1
 800514a:	e7f7      	b.n	800513c <xTaskCheckForTimeOut+0x60>
 800514c:	20000edc 	.word	0x20000edc
 8005150:	20000ec8 	.word	0x20000ec8

08005154 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8005154:	4b01      	ldr	r3, [pc, #4]	@ (800515c <vTaskMissedYield+0x8>)
 8005156:	2201      	movs	r2, #1
 8005158:	601a      	str	r2, [r3, #0]
}
 800515a:	4770      	bx	lr
 800515c:	20000ecc 	.word	0x20000ecc

08005160 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8005160:	4b05      	ldr	r3, [pc, #20]	@ (8005178 <xTaskGetSchedulerState+0x18>)
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	b133      	cbz	r3, 8005174 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005166:	4b05      	ldr	r3, [pc, #20]	@ (800517c <xTaskGetSchedulerState+0x1c>)
 8005168:	6818      	ldr	r0, [r3, #0]
 800516a:	fab0 f080 	clz	r0, r0
 800516e:	0940      	lsrs	r0, r0, #5
 8005170:	0040      	lsls	r0, r0, #1
 8005172:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005174:	2001      	movs	r0, #1
	}
 8005176:	4770      	bx	lr
 8005178:	20000ed4 	.word	0x20000ed4
 800517c:	20000ebc 	.word	0x20000ebc

08005180 <xTaskPriorityDisinherit>:
	{
 8005180:	b538      	push	{r3, r4, r5, lr}
		if( pxMutexHolder != NULL )
 8005182:	b908      	cbnz	r0, 8005188 <xTaskPriorityDisinherit+0x8>
	BaseType_t xReturn = pdFALSE;
 8005184:	2000      	movs	r0, #0
	}
 8005186:	bd38      	pop	{r3, r4, r5, pc}
			configASSERT( pxTCB == pxCurrentTCB );
 8005188:	4b1b      	ldr	r3, [pc, #108]	@ (80051f8 <xTaskPriorityDisinherit+0x78>)
 800518a:	681c      	ldr	r4, [r3, #0]
 800518c:	4284      	cmp	r4, r0
 800518e:	d008      	beq.n	80051a2 <xTaskPriorityDisinherit+0x22>
 8005190:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005194:	f383 8811 	msr	BASEPRI, r3
 8005198:	f3bf 8f6f 	isb	sy
 800519c:	f3bf 8f4f 	dsb	sy
 80051a0:	e7fe      	b.n	80051a0 <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
 80051a2:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 80051a4:	b943      	cbnz	r3, 80051b8 <xTaskPriorityDisinherit+0x38>
 80051a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051aa:	f383 8811 	msr	BASEPRI, r3
 80051ae:	f3bf 8f6f 	isb	sy
 80051b2:	f3bf 8f4f 	dsb	sy
 80051b6:	e7fe      	b.n	80051b6 <xTaskPriorityDisinherit+0x36>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80051b8:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80051ba:	6ce2      	ldr	r2, [r4, #76]	@ 0x4c
			( pxTCB->uxMutexesHeld )--;
 80051bc:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80051be:	4291      	cmp	r1, r2
			( pxTCB->uxMutexesHeld )--;
 80051c0:	6523      	str	r3, [r4, #80]	@ 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80051c2:	d0df      	beq.n	8005184 <xTaskPriorityDisinherit+0x4>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d1dd      	bne.n	8005184 <xTaskPriorityDisinherit+0x4>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80051c8:	1d25      	adds	r5, r4, #4
 80051ca:	4628      	mov	r0, r5
 80051cc:	f7ff f87c 	bl	80042c8 <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80051d0:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 80051d2:	62e3      	str	r3, [r4, #44]	@ 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80051d4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80051d8:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 80051da:	4a08      	ldr	r2, [pc, #32]	@ (80051fc <xTaskPriorityDisinherit+0x7c>)
 80051dc:	6811      	ldr	r1, [r2, #0]
 80051de:	428b      	cmp	r3, r1
 80051e0:	bf88      	it	hi
 80051e2:	6013      	strhi	r3, [r2, #0]
 80051e4:	4a06      	ldr	r2, [pc, #24]	@ (8005200 <xTaskPriorityDisinherit+0x80>)
 80051e6:	2014      	movs	r0, #20
 80051e8:	fb00 2003 	mla	r0, r0, r3, r2
 80051ec:	4629      	mov	r1, r5
 80051ee:	f7ff f849 	bl	8004284 <vListInsertEnd>
					xReturn = pdTRUE;
 80051f2:	2001      	movs	r0, #1
		return xReturn;
 80051f4:	e7c7      	b.n	8005186 <xTaskPriorityDisinherit+0x6>
 80051f6:	bf00      	nop
 80051f8:	200013b4 	.word	0x200013b4
 80051fc:	20000ed8 	.word	0x20000ed8
 8005200:	20000f54 	.word	0x20000f54

08005204 <prvInsertTimerInActiveList>:
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );

	if( xNextExpiryTime <= xTimeNow )
 8005204:	4291      	cmp	r1, r2
{
 8005206:	b508      	push	{r3, lr}
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005208:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800520a:	6100      	str	r0, [r0, #16]
	if( xNextExpiryTime <= xTimeNow )
 800520c:	d80a      	bhi.n	8005224 <prvInsertTimerInActiveList+0x20>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800520e:	1ad2      	subs	r2, r2, r3
 8005210:	6983      	ldr	r3, [r0, #24]
 8005212:	429a      	cmp	r2, r3
 8005214:	d20d      	bcs.n	8005232 <prvInsertTimerInActiveList+0x2e>
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005216:	4b08      	ldr	r3, [pc, #32]	@ (8005238 <prvInsertTimerInActiveList+0x34>)
 8005218:	1d01      	adds	r1, r0, #4
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800521a:	6818      	ldr	r0, [r3, #0]
 800521c:	f7ff f83d 	bl	800429a <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 8005220:	2000      	movs	r0, #0
		}
	}

	return xProcessTimerNow;
}
 8005222:	bd08      	pop	{r3, pc}
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005224:	429a      	cmp	r2, r3
 8005226:	d201      	bcs.n	800522c <prvInsertTimerInActiveList+0x28>
 8005228:	4299      	cmp	r1, r3
 800522a:	d202      	bcs.n	8005232 <prvInsertTimerInActiveList+0x2e>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800522c:	4b03      	ldr	r3, [pc, #12]	@ (800523c <prvInsertTimerInActiveList+0x38>)
 800522e:	1d01      	adds	r1, r0, #4
 8005230:	e7f3      	b.n	800521a <prvInsertTimerInActiveList+0x16>
			xProcessTimerNow = pdTRUE;
 8005232:	2001      	movs	r0, #1
	return xProcessTimerNow;
 8005234:	e7f5      	b.n	8005222 <prvInsertTimerInActiveList+0x1e>
 8005236:	bf00      	nop
 8005238:	200014b4 	.word	0x200014b4
 800523c:	200014b8 	.word	0x200014b8

08005240 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005240:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
 8005242:	4c11      	ldr	r4, [pc, #68]	@ (8005288 <prvCheckForValidListAndQueue+0x48>)
	taskENTER_CRITICAL();
 8005244:	f000 fa26 	bl	8005694 <vPortEnterCritical>
		if( xTimerQueue == NULL )
 8005248:	6825      	ldr	r5, [r4, #0]
 800524a:	b9bd      	cbnz	r5, 800527c <prvCheckForValidListAndQueue+0x3c>
		{
			vListInitialise( &xActiveTimerList1 );
 800524c:	4f0f      	ldr	r7, [pc, #60]	@ (800528c <prvCheckForValidListAndQueue+0x4c>)
			vListInitialise( &xActiveTimerList2 );
 800524e:	4e10      	ldr	r6, [pc, #64]	@ (8005290 <prvCheckForValidListAndQueue+0x50>)
			vListInitialise( &xActiveTimerList1 );
 8005250:	4638      	mov	r0, r7
 8005252:	f7ff f809 	bl	8004268 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005256:	4630      	mov	r0, r6
 8005258:	f7ff f806 	bl	8004268 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800525c:	4b0d      	ldr	r3, [pc, #52]	@ (8005294 <prvCheckForValidListAndQueue+0x54>)
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800525e:	4a0e      	ldr	r2, [pc, #56]	@ (8005298 <prvCheckForValidListAndQueue+0x58>)
			pxCurrentTimerList = &xActiveTimerList1;
 8005260:	601f      	str	r7, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005262:	4b0e      	ldr	r3, [pc, #56]	@ (800529c <prvCheckForValidListAndQueue+0x5c>)
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005264:	2110      	movs	r1, #16
			pxOverflowTimerList = &xActiveTimerList2;
 8005266:	601e      	str	r6, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005268:	200a      	movs	r0, #10
 800526a:	4b0d      	ldr	r3, [pc, #52]	@ (80052a0 <prvCheckForValidListAndQueue+0x60>)
 800526c:	9500      	str	r5, [sp, #0]
 800526e:	f7ff f906 	bl	800447e <xQueueGenericCreateStatic>
 8005272:	6020      	str	r0, [r4, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005274:	b110      	cbz	r0, 800527c <prvCheckForValidListAndQueue+0x3c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005276:	490b      	ldr	r1, [pc, #44]	@ (80052a4 <prvCheckForValidListAndQueue+0x64>)
 8005278:	f7ff fafa 	bl	8004870 <vQueueAddToRegistry>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
}
 800527c:	b003      	add	sp, #12
 800527e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	taskEXIT_CRITICAL();
 8005282:	f000 ba27 	b.w	80056d4 <vPortExitCritical>
 8005286:	bf00      	nop
 8005288:	200014b0 	.word	0x200014b0
 800528c:	200014d0 	.word	0x200014d0
 8005290:	200014bc 	.word	0x200014bc
 8005294:	200014b8 	.word	0x200014b8
 8005298:	20001408 	.word	0x20001408
 800529c:	200014b4 	.word	0x200014b4
 80052a0:	200013b8 	.word	0x200013b8
 80052a4:	0800a659 	.word	0x0800a659

080052a8 <xTimerCreateTimerTask>:
{
 80052a8:	b510      	push	{r4, lr}
 80052aa:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
 80052ac:	f7ff ffc8 	bl	8005240 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 80052b0:	4b12      	ldr	r3, [pc, #72]	@ (80052fc <xTimerCreateTimerTask+0x54>)
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	b1b3      	cbz	r3, 80052e4 <xTimerCreateTimerTask+0x3c>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80052b6:	2400      	movs	r4, #0
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80052b8:	aa07      	add	r2, sp, #28
 80052ba:	a906      	add	r1, sp, #24
 80052bc:	a805      	add	r0, sp, #20
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80052be:	e9cd 4405 	strd	r4, r4, [sp, #20]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80052c2:	f7fe ffc5 	bl	8004250 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80052c6:	9b05      	ldr	r3, [sp, #20]
 80052c8:	9302      	str	r3, [sp, #8]
 80052ca:	9b06      	ldr	r3, [sp, #24]
 80052cc:	9301      	str	r3, [sp, #4]
 80052ce:	2302      	movs	r3, #2
 80052d0:	9300      	str	r3, [sp, #0]
 80052d2:	9a07      	ldr	r2, [sp, #28]
 80052d4:	490a      	ldr	r1, [pc, #40]	@ (8005300 <xTimerCreateTimerTask+0x58>)
 80052d6:	480b      	ldr	r0, [pc, #44]	@ (8005304 <xTimerCreateTimerTask+0x5c>)
 80052d8:	4623      	mov	r3, r4
 80052da:	f7ff fc5a 	bl	8004b92 <xTaskCreateStatic>
 80052de:	4b0a      	ldr	r3, [pc, #40]	@ (8005308 <xTimerCreateTimerTask+0x60>)
 80052e0:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 80052e2:	b940      	cbnz	r0, 80052f6 <xTimerCreateTimerTask+0x4e>
 80052e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052e8:	f383 8811 	msr	BASEPRI, r3
 80052ec:	f3bf 8f6f 	isb	sy
 80052f0:	f3bf 8f4f 	dsb	sy
	configASSERT( xReturn );
 80052f4:	e7fe      	b.n	80052f4 <xTimerCreateTimerTask+0x4c>
}
 80052f6:	2001      	movs	r0, #1
 80052f8:	b008      	add	sp, #32
 80052fa:	bd10      	pop	{r4, pc}
 80052fc:	200014b0 	.word	0x200014b0
 8005300:	0800a65e 	.word	0x0800a65e
 8005304:	08005405 	.word	0x08005405
 8005308:	200014ac 	.word	0x200014ac

0800530c <xTimerGenericCommand>:
{
 800530c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800530e:	4616      	mov	r6, r2
	configASSERT( xTimer );
 8005310:	4604      	mov	r4, r0
{
 8005312:	461a      	mov	r2, r3
	configASSERT( xTimer );
 8005314:	b940      	cbnz	r0, 8005328 <xTimerGenericCommand+0x1c>
 8005316:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800531a:	f383 8811 	msr	BASEPRI, r3
 800531e:	f3bf 8f6f 	isb	sy
 8005322:	f3bf 8f4f 	dsb	sy
 8005326:	e7fe      	b.n	8005326 <xTimerGenericCommand+0x1a>
	if( xTimerQueue != NULL )
 8005328:	4d0d      	ldr	r5, [pc, #52]	@ (8005360 <xTimerGenericCommand+0x54>)
 800532a:	6828      	ldr	r0, [r5, #0]
 800532c:	b180      	cbz	r0, 8005350 <xTimerGenericCommand+0x44>
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800532e:	2905      	cmp	r1, #5
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005330:	e9cd 1600 	strd	r1, r6, [sp]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8005334:	9402      	str	r4, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005336:	dc0d      	bgt.n	8005354 <xTimerGenericCommand+0x48>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005338:	f7ff ff12 	bl	8005160 <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800533c:	2300      	movs	r3, #0
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800533e:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005340:	bf08      	it	eq
 8005342:	9a08      	ldreq	r2, [sp, #32]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005344:	6828      	ldr	r0, [r5, #0]
 8005346:	bf18      	it	ne
 8005348:	461a      	movne	r2, r3
 800534a:	4669      	mov	r1, sp
 800534c:	f7ff f8e4 	bl	8004518 <xQueueGenericSend>
}
 8005350:	b004      	add	sp, #16
 8005352:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005354:	2300      	movs	r3, #0
 8005356:	4669      	mov	r1, sp
 8005358:	f7ff f990 	bl	800467c <xQueueGenericSendFromISR>
 800535c:	e7f8      	b.n	8005350 <xTimerGenericCommand+0x44>
 800535e:	bf00      	nop
 8005360:	200014b0 	.word	0x200014b0

08005364 <prvSampleTimeNow>:
{
 8005364:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	if( xTimeNow < xLastTime )
 8005368:	f8df 8094 	ldr.w	r8, [pc, #148]	@ 8005400 <prvSampleTimeNow+0x9c>
{
 800536c:	4606      	mov	r6, r0
	xTimeNow = xTaskGetTickCount();
 800536e:	f7ff fcc3 	bl	8004cf8 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 8005372:	f8d8 3000 	ldr.w	r3, [r8]
 8005376:	4283      	cmp	r3, r0
	xTimeNow = xTaskGetTickCount();
 8005378:	4605      	mov	r5, r0
	if( xTimeNow < xLastTime )
 800537a:	d909      	bls.n	8005390 <prvSampleTimeNow+0x2c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800537c:	4f1e      	ldr	r7, [pc, #120]	@ (80053f8 <prvSampleTimeNow+0x94>)
 800537e:	683b      	ldr	r3, [r7, #0]
 8005380:	681a      	ldr	r2, [r3, #0]
 8005382:	b96a      	cbnz	r2, 80053a0 <prvSampleTimeNow+0x3c>
	pxCurrentTimerList = pxOverflowTimerList;
 8005384:	4a1d      	ldr	r2, [pc, #116]	@ (80053fc <prvSampleTimeNow+0x98>)
 8005386:	6811      	ldr	r1, [r2, #0]
 8005388:	6039      	str	r1, [r7, #0]
	pxOverflowTimerList = pxTemp;
 800538a:	6013      	str	r3, [r2, #0]
		*pxTimerListsWereSwitched = pdTRUE;
 800538c:	2301      	movs	r3, #1
 800538e:	e000      	b.n	8005392 <prvSampleTimeNow+0x2e>
 8005390:	2300      	movs	r3, #0
}
 8005392:	4628      	mov	r0, r5
		*pxTimerListsWereSwitched = pdTRUE;
 8005394:	6033      	str	r3, [r6, #0]
	xLastTime = xTimeNow;
 8005396:	f8c8 5000 	str.w	r5, [r8]
}
 800539a:	b002      	add	sp, #8
 800539c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80053a0:	68db      	ldr	r3, [r3, #12]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80053a2:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80053a4:	f8d3 9000 	ldr.w	r9, [r3]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80053a8:	f104 0a04 	add.w	sl, r4, #4
 80053ac:	4650      	mov	r0, sl
 80053ae:	f7fe ff8b 	bl	80042c8 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80053b2:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80053b4:	4620      	mov	r0, r4
 80053b6:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80053b8:	69e3      	ldr	r3, [r4, #28]
 80053ba:	2b01      	cmp	r3, #1
 80053bc:	d1df      	bne.n	800537e <prvSampleTimeNow+0x1a>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80053be:	69a3      	ldr	r3, [r4, #24]
 80053c0:	444b      	add	r3, r9
			if( xReloadTime > xNextExpireTime )
 80053c2:	4599      	cmp	r9, r3
 80053c4:	d206      	bcs.n	80053d4 <prvSampleTimeNow+0x70>
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80053c6:	6838      	ldr	r0, [r7, #0]
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80053c8:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80053ca:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80053cc:	4651      	mov	r1, sl
 80053ce:	f7fe ff64 	bl	800429a <vListInsert>
 80053d2:	e7d4      	b.n	800537e <prvSampleTimeNow+0x1a>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80053d4:	2300      	movs	r3, #0
 80053d6:	9300      	str	r3, [sp, #0]
 80053d8:	464a      	mov	r2, r9
 80053da:	4619      	mov	r1, r3
 80053dc:	4620      	mov	r0, r4
 80053de:	f7ff ff95 	bl	800530c <xTimerGenericCommand>
				configASSERT( xResult );
 80053e2:	2800      	cmp	r0, #0
 80053e4:	d1cb      	bne.n	800537e <prvSampleTimeNow+0x1a>
 80053e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053ea:	f383 8811 	msr	BASEPRI, r3
 80053ee:	f3bf 8f6f 	isb	sy
 80053f2:	f3bf 8f4f 	dsb	sy
 80053f6:	e7fe      	b.n	80053f6 <prvSampleTimeNow+0x92>
 80053f8:	200014b8 	.word	0x200014b8
 80053fc:	200014b4 	.word	0x200014b4
 8005400:	200014a8 	.word	0x200014a8

08005404 <prvTimerTask>:
{
 8005404:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005408:	4e69      	ldr	r6, [pc, #420]	@ (80055b0 <prvTimerTask+0x1ac>)
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800540a:	4f6a      	ldr	r7, [pc, #424]	@ (80055b4 <prvTimerTask+0x1b0>)
{
 800540c:	b089      	sub	sp, #36	@ 0x24
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800540e:	6833      	ldr	r3, [r6, #0]
 8005410:	681d      	ldr	r5, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005412:	2d00      	cmp	r5, #0
 8005414:	d033      	beq.n	800547e <prvTimerTask+0x7a>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005416:	68db      	ldr	r3, [r3, #12]
 8005418:	f8d3 8000 	ldr.w	r8, [r3]
	vTaskSuspendAll();
 800541c:	f7ff fc64 	bl	8004ce8 <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005420:	a804      	add	r0, sp, #16
 8005422:	f7ff ff9f 	bl	8005364 <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
 8005426:	9c04      	ldr	r4, [sp, #16]
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005428:	4681      	mov	r9, r0
		if( xTimerListsWereSwitched == pdFALSE )
 800542a:	2c00      	cmp	r4, #0
 800542c:	d175      	bne.n	800551a <prvTimerTask+0x116>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800542e:	2d00      	cmp	r5, #0
 8005430:	d058      	beq.n	80054e4 <prvTimerTask+0xe0>
 8005432:	4540      	cmp	r0, r8
 8005434:	d35c      	bcc.n	80054f0 <prvTimerTask+0xec>
				( void ) xTaskResumeAll();
 8005436:	f7ff fcfb 	bl	8004e30 <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800543a:	6833      	ldr	r3, [r6, #0]
 800543c:	68db      	ldr	r3, [r3, #12]
 800543e:	68dd      	ldr	r5, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005440:	1d28      	adds	r0, r5, #4
 8005442:	f7fe ff41 	bl	80042c8 <uxListRemove>
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8005446:	69eb      	ldr	r3, [r5, #28]
 8005448:	2b01      	cmp	r3, #1
 800544a:	d11a      	bne.n	8005482 <prvTimerTask+0x7e>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800544c:	69a9      	ldr	r1, [r5, #24]
 800544e:	4643      	mov	r3, r8
 8005450:	464a      	mov	r2, r9
 8005452:	4441      	add	r1, r8
 8005454:	4628      	mov	r0, r5
 8005456:	f7ff fed5 	bl	8005204 <prvInsertTimerInActiveList>
 800545a:	b190      	cbz	r0, 8005482 <prvTimerTask+0x7e>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800545c:	9400      	str	r4, [sp, #0]
 800545e:	4623      	mov	r3, r4
 8005460:	4642      	mov	r2, r8
 8005462:	4621      	mov	r1, r4
 8005464:	4628      	mov	r0, r5
 8005466:	f7ff ff51 	bl	800530c <xTimerGenericCommand>
			configASSERT( xResult );
 800546a:	b950      	cbnz	r0, 8005482 <prvTimerTask+0x7e>
 800546c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005470:	f383 8811 	msr	BASEPRI, r3
 8005474:	f3bf 8f6f 	isb	sy
 8005478:	f3bf 8f4f 	dsb	sy
 800547c:	e7fe      	b.n	800547c <prvTimerTask+0x78>
		xNextExpireTime = ( TickType_t ) 0U;
 800547e:	46a8      	mov	r8, r5
 8005480:	e7cc      	b.n	800541c <prvTimerTask+0x18>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005482:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 8005484:	4628      	mov	r0, r5
 8005486:	4798      	blx	r3
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005488:	6838      	ldr	r0, [r7, #0]
 800548a:	2200      	movs	r2, #0
 800548c:	a904      	add	r1, sp, #16
 800548e:	f7ff f951 	bl	8004734 <xQueueReceive>
 8005492:	2800      	cmp	r0, #0
 8005494:	d0bb      	beq.n	800540e <prvTimerTask+0xa>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005496:	9b04      	ldr	r3, [sp, #16]
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005498:	9806      	ldr	r0, [sp, #24]
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800549a:	2b00      	cmp	r3, #0
 800549c:	db40      	blt.n	8005520 <prvTimerTask+0x11c>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800549e:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80054a0:	6963      	ldr	r3, [r4, #20]
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d143      	bne.n	800552e <prvTimerTask+0x12a>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80054a6:	a803      	add	r0, sp, #12
 80054a8:	f7ff ff5c 	bl	8005364 <prvSampleTimeNow>
			switch( xMessage.xMessageID )
 80054ac:	9b04      	ldr	r3, [sp, #16]
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80054ae:	4602      	mov	r2, r0
			switch( xMessage.xMessageID )
 80054b0:	2b09      	cmp	r3, #9
 80054b2:	d8e9      	bhi.n	8005488 <prvTimerTask+0x84>
 80054b4:	a101      	add	r1, pc, #4	@ (adr r1, 80054bc <prvTimerTask+0xb8>)
 80054b6:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80054ba:	bf00      	nop
 80054bc:	08005537 	.word	0x08005537
 80054c0:	08005537 	.word	0x08005537
 80054c4:	08005537 	.word	0x08005537
 80054c8:	08005489 	.word	0x08005489
 80054cc:	0800557b 	.word	0x0800557b
 80054d0:	0800559f 	.word	0x0800559f
 80054d4:	08005537 	.word	0x08005537
 80054d8:	08005537 	.word	0x08005537
 80054dc:	08005489 	.word	0x08005489
 80054e0:	0800557b 	.word	0x0800557b
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80054e4:	4b34      	ldr	r3, [pc, #208]	@ (80055b8 <prvTimerTask+0x1b4>)
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	681c      	ldr	r4, [r3, #0]
 80054ea:	fab4 f484 	clz	r4, r4
 80054ee:	0964      	lsrs	r4, r4, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80054f0:	6838      	ldr	r0, [r7, #0]
 80054f2:	4622      	mov	r2, r4
 80054f4:	eba8 0109 	sub.w	r1, r8, r9
 80054f8:	f7ff f9cc 	bl	8004894 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80054fc:	f7ff fc98 	bl	8004e30 <xTaskResumeAll>
 8005500:	2800      	cmp	r0, #0
 8005502:	d1c1      	bne.n	8005488 <prvTimerTask+0x84>
					portYIELD_WITHIN_API();
 8005504:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8005508:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800550c:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8005510:	f3bf 8f4f 	dsb	sy
 8005514:	f3bf 8f6f 	isb	sy
 8005518:	e7b6      	b.n	8005488 <prvTimerTask+0x84>
			( void ) xTaskResumeAll();
 800551a:	f7ff fc89 	bl	8004e30 <xTaskResumeAll>
}
 800551e:	e7b3      	b.n	8005488 <prvTimerTask+0x84>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005520:	9b05      	ldr	r3, [sp, #20]
 8005522:	9907      	ldr	r1, [sp, #28]
 8005524:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005526:	9b04      	ldr	r3, [sp, #16]
 8005528:	2b00      	cmp	r3, #0
 800552a:	dbad      	blt.n	8005488 <prvTimerTask+0x84>
 800552c:	e7b7      	b.n	800549e <prvTimerTask+0x9a>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800552e:	1d20      	adds	r0, r4, #4
 8005530:	f7fe feca 	bl	80042c8 <uxListRemove>
 8005534:	e7b7      	b.n	80054a6 <prvTimerTask+0xa2>
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005536:	69a1      	ldr	r1, [r4, #24]
 8005538:	9b05      	ldr	r3, [sp, #20]
 800553a:	4620      	mov	r0, r4
 800553c:	4419      	add	r1, r3
 800553e:	f7ff fe61 	bl	8005204 <prvInsertTimerInActiveList>
 8005542:	2800      	cmp	r0, #0
 8005544:	d0a0      	beq.n	8005488 <prvTimerTask+0x84>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005546:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8005548:	4620      	mov	r0, r4
 800554a:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800554c:	69e3      	ldr	r3, [r4, #28]
 800554e:	2b01      	cmp	r3, #1
 8005550:	d19a      	bne.n	8005488 <prvTimerTask+0x84>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005552:	69a2      	ldr	r2, [r4, #24]
 8005554:	9905      	ldr	r1, [sp, #20]
 8005556:	2300      	movs	r3, #0
 8005558:	440a      	add	r2, r1
 800555a:	9300      	str	r3, [sp, #0]
 800555c:	4619      	mov	r1, r3
 800555e:	4620      	mov	r0, r4
 8005560:	f7ff fed4 	bl	800530c <xTimerGenericCommand>
							configASSERT( xResult );
 8005564:	2800      	cmp	r0, #0
 8005566:	d18f      	bne.n	8005488 <prvTimerTask+0x84>
 8005568:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800556c:	f383 8811 	msr	BASEPRI, r3
 8005570:	f3bf 8f6f 	isb	sy
 8005574:	f3bf 8f4f 	dsb	sy
 8005578:	e7fe      	b.n	8005578 <prvTimerTask+0x174>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800557a:	9905      	ldr	r1, [sp, #20]
 800557c:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800557e:	b941      	cbnz	r1, 8005592 <prvTimerTask+0x18e>
 8005580:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005584:	f383 8811 	msr	BASEPRI, r3
 8005588:	f3bf 8f6f 	isb	sy
 800558c:	f3bf 8f4f 	dsb	sy
 8005590:	e7fe      	b.n	8005590 <prvTimerTask+0x18c>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005592:	4603      	mov	r3, r0
 8005594:	4401      	add	r1, r0
 8005596:	4620      	mov	r0, r4
 8005598:	f7ff fe34 	bl	8005204 <prvInsertTimerInActiveList>
					break;
 800559c:	e774      	b.n	8005488 <prvTimerTask+0x84>
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800559e:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	f47f af70 	bne.w	8005488 <prvTimerTask+0x84>
							vPortFree( pxTimer );
 80055a8:	4620      	mov	r0, r4
 80055aa:	f000 fa6b 	bl	8005a84 <vPortFree>
 80055ae:	e76b      	b.n	8005488 <prvTimerTask+0x84>
 80055b0:	200014b8 	.word	0x200014b8
 80055b4:	200014b0 	.word	0x200014b0
 80055b8:	200014b4 	.word	0x200014b4

080055bc <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80055bc:	4808      	ldr	r0, [pc, #32]	@ (80055e0 <prvPortStartFirstTask+0x24>)
 80055be:	6800      	ldr	r0, [r0, #0]
 80055c0:	6800      	ldr	r0, [r0, #0]
 80055c2:	f380 8808 	msr	MSP, r0
 80055c6:	f04f 0000 	mov.w	r0, #0
 80055ca:	f380 8814 	msr	CONTROL, r0
 80055ce:	b662      	cpsie	i
 80055d0:	b661      	cpsie	f
 80055d2:	f3bf 8f4f 	dsb	sy
 80055d6:	f3bf 8f6f 	isb	sy
 80055da:	df00      	svc	0
 80055dc:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80055de:	0000      	.short	0x0000
 80055e0:	e000ed08 	.word	0xe000ed08

080055e4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80055e4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80055f4 <vPortEnableVFP+0x10>
 80055e8:	6801      	ldr	r1, [r0, #0]
 80055ea:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80055ee:	6001      	str	r1, [r0, #0]
 80055f0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80055f2:	0000      	.short	0x0000
 80055f4:	e000ed88 	.word	0xe000ed88

080055f8 <prvTaskExitError>:
{
 80055f8:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 80055fa:	2300      	movs	r3, #0
 80055fc:	9301      	str	r3, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
 80055fe:	4b0d      	ldr	r3, [pc, #52]	@ (8005634 <prvTaskExitError+0x3c>)
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	3301      	adds	r3, #1
 8005604:	d008      	beq.n	8005618 <prvTaskExitError+0x20>
 8005606:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800560a:	f383 8811 	msr	BASEPRI, r3
 800560e:	f3bf 8f6f 	isb	sy
 8005612:	f3bf 8f4f 	dsb	sy
 8005616:	e7fe      	b.n	8005616 <prvTaskExitError+0x1e>
 8005618:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800561c:	f383 8811 	msr	BASEPRI, r3
 8005620:	f3bf 8f6f 	isb	sy
 8005624:	f3bf 8f4f 	dsb	sy
	while( ulDummy == 0 )
 8005628:	9b01      	ldr	r3, [sp, #4]
 800562a:	2b00      	cmp	r3, #0
 800562c:	d0fc      	beq.n	8005628 <prvTaskExitError+0x30>
}
 800562e:	b002      	add	sp, #8
 8005630:	4770      	bx	lr
 8005632:	bf00      	nop
 8005634:	2000000c 	.word	0x2000000c

08005638 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005638:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800563c:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005640:	4b07      	ldr	r3, [pc, #28]	@ (8005660 <pxPortInitialiseStack+0x28>)
 8005642:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005646:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800564a:	f06f 0302 	mvn.w	r3, #2
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800564e:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005652:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005656:	f840 3c24 	str.w	r3, [r0, #-36]
}
 800565a:	3844      	subs	r0, #68	@ 0x44
 800565c:	4770      	bx	lr
 800565e:	bf00      	nop
 8005660:	080055f9 	.word	0x080055f9
	...

08005670 <SVC_Handler>:
	__asm volatile (
 8005670:	4b07      	ldr	r3, [pc, #28]	@ (8005690 <pxCurrentTCBConst2>)
 8005672:	6819      	ldr	r1, [r3, #0]
 8005674:	6808      	ldr	r0, [r1, #0]
 8005676:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800567a:	f380 8809 	msr	PSP, r0
 800567e:	f3bf 8f6f 	isb	sy
 8005682:	f04f 0000 	mov.w	r0, #0
 8005686:	f380 8811 	msr	BASEPRI, r0
 800568a:	4770      	bx	lr
 800568c:	f3af 8000 	nop.w

08005690 <pxCurrentTCBConst2>:
 8005690:	200013b4 	.word	0x200013b4

08005694 <vPortEnterCritical>:
 8005694:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005698:	f383 8811 	msr	BASEPRI, r3
 800569c:	f3bf 8f6f 	isb	sy
 80056a0:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 80056a4:	4a0a      	ldr	r2, [pc, #40]	@ (80056d0 <vPortEnterCritical+0x3c>)
 80056a6:	6813      	ldr	r3, [r2, #0]
 80056a8:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 80056aa:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 80056ac:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 80056ae:	d10e      	bne.n	80056ce <vPortEnterCritical+0x3a>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80056b0:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80056b4:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	@ 0xd04
 80056b8:	b2db      	uxtb	r3, r3
 80056ba:	b143      	cbz	r3, 80056ce <vPortEnterCritical+0x3a>
 80056bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056c0:	f383 8811 	msr	BASEPRI, r3
 80056c4:	f3bf 8f6f 	isb	sy
 80056c8:	f3bf 8f4f 	dsb	sy
 80056cc:	e7fe      	b.n	80056cc <vPortEnterCritical+0x38>
}
 80056ce:	4770      	bx	lr
 80056d0:	2000000c 	.word	0x2000000c

080056d4 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 80056d4:	4a08      	ldr	r2, [pc, #32]	@ (80056f8 <vPortExitCritical+0x24>)
 80056d6:	6813      	ldr	r3, [r2, #0]
 80056d8:	b943      	cbnz	r3, 80056ec <vPortExitCritical+0x18>
 80056da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056de:	f383 8811 	msr	BASEPRI, r3
 80056e2:	f3bf 8f6f 	isb	sy
 80056e6:	f3bf 8f4f 	dsb	sy
 80056ea:	e7fe      	b.n	80056ea <vPortExitCritical+0x16>
	uxCriticalNesting--;
 80056ec:	3b01      	subs	r3, #1
 80056ee:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80056f0:	b90b      	cbnz	r3, 80056f6 <vPortExitCritical+0x22>
	__asm volatile
 80056f2:	f383 8811 	msr	BASEPRI, r3
}
 80056f6:	4770      	bx	lr
 80056f8:	2000000c 	.word	0x2000000c
 80056fc:	00000000 	.word	0x00000000

08005700 <PendSV_Handler>:
	__asm volatile
 8005700:	f3ef 8009 	mrs	r0, PSP
 8005704:	f3bf 8f6f 	isb	sy
 8005708:	4b15      	ldr	r3, [pc, #84]	@ (8005760 <pxCurrentTCBConst>)
 800570a:	681a      	ldr	r2, [r3, #0]
 800570c:	f01e 0f10 	tst.w	lr, #16
 8005710:	bf08      	it	eq
 8005712:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005716:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800571a:	6010      	str	r0, [r2, #0]
 800571c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005720:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8005724:	f380 8811 	msr	BASEPRI, r0
 8005728:	f3bf 8f4f 	dsb	sy
 800572c:	f3bf 8f6f 	isb	sy
 8005730:	f7ff fc16 	bl	8004f60 <vTaskSwitchContext>
 8005734:	f04f 0000 	mov.w	r0, #0
 8005738:	f380 8811 	msr	BASEPRI, r0
 800573c:	bc09      	pop	{r0, r3}
 800573e:	6819      	ldr	r1, [r3, #0]
 8005740:	6808      	ldr	r0, [r1, #0]
 8005742:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005746:	f01e 0f10 	tst.w	lr, #16
 800574a:	bf08      	it	eq
 800574c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005750:	f380 8809 	msr	PSP, r0
 8005754:	f3bf 8f6f 	isb	sy
 8005758:	4770      	bx	lr
 800575a:	bf00      	nop
 800575c:	f3af 8000 	nop.w

08005760 <pxCurrentTCBConst>:
 8005760:	200013b4 	.word	0x200013b4

08005764 <SysTick_Handler>:
{
 8005764:	b508      	push	{r3, lr}
	__asm volatile
 8005766:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800576a:	f383 8811 	msr	BASEPRI, r3
 800576e:	f3bf 8f6f 	isb	sy
 8005772:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 8005776:	f7ff fac5 	bl	8004d04 <xTaskIncrementTick>
 800577a:	b128      	cbz	r0, 8005788 <SysTick_Handler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800577c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8005780:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005784:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
	__asm volatile
 8005788:	2300      	movs	r3, #0
 800578a:	f383 8811 	msr	BASEPRI, r3
}
 800578e:	bd08      	pop	{r3, pc}

08005790 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005790:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
 8005794:	2300      	movs	r3, #0
 8005796:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005798:	6193      	str	r3, [r2, #24]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800579a:	4b05      	ldr	r3, [pc, #20]	@ (80057b0 <vPortSetupTimerInterrupt+0x20>)
 800579c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80057a6:	3b01      	subs	r3, #1
 80057a8:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80057aa:	2307      	movs	r3, #7
 80057ac:	6113      	str	r3, [r2, #16]
}
 80057ae:	4770      	bx	lr
 80057b0:	20000000 	.word	0x20000000

080057b4 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80057b4:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
{
 80057b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80057ba:	f8d3 1d00 	ldr.w	r1, [r3, #3328]	@ 0xd00
 80057be:	4a38      	ldr	r2, [pc, #224]	@ (80058a0 <xPortStartScheduler+0xec>)
 80057c0:	4291      	cmp	r1, r2
 80057c2:	d108      	bne.n	80057d6 <xPortStartScheduler+0x22>
	__asm volatile
 80057c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057c8:	f383 8811 	msr	BASEPRI, r3
 80057cc:	f3bf 8f6f 	isb	sy
 80057d0:	f3bf 8f4f 	dsb	sy
 80057d4:	e7fe      	b.n	80057d4 <xPortStartScheduler+0x20>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80057d6:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 80057da:	4b32      	ldr	r3, [pc, #200]	@ (80058a4 <xPortStartScheduler+0xf0>)
 80057dc:	429a      	cmp	r2, r3
 80057de:	d108      	bne.n	80057f2 <xPortStartScheduler+0x3e>
 80057e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057e4:	f383 8811 	msr	BASEPRI, r3
 80057e8:	f3bf 8f6f 	isb	sy
 80057ec:	f3bf 8f4f 	dsb	sy
 80057f0:	e7fe      	b.n	80057f0 <xPortStartScheduler+0x3c>
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80057f2:	4b2d      	ldr	r3, [pc, #180]	@ (80058a8 <xPortStartScheduler+0xf4>)
 80057f4:	781a      	ldrb	r2, [r3, #0]
 80057f6:	b2d2      	uxtb	r2, r2
 80057f8:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80057fa:	22ff      	movs	r2, #255	@ 0xff
 80057fc:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80057fe:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005800:	4a2a      	ldr	r2, [pc, #168]	@ (80058ac <xPortStartScheduler+0xf8>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005802:	b2db      	uxtb	r3, r3
 8005804:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005808:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800580c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8005810:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005812:	4a27      	ldr	r2, [pc, #156]	@ (80058b0 <xPortStartScheduler+0xfc>)
 8005814:	2307      	movs	r3, #7
 8005816:	6013      	str	r3, [r2, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005818:	f89d 1003 	ldrb.w	r1, [sp, #3]
			ulMaxPRIGROUPValue--;
 800581c:	6813      	ldr	r3, [r2, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800581e:	0609      	lsls	r1, r1, #24
 8005820:	d40a      	bmi.n	8005838 <xPortStartScheduler+0x84>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005822:	2b03      	cmp	r3, #3
 8005824:	d011      	beq.n	800584a <xPortStartScheduler+0x96>
 8005826:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800582a:	f383 8811 	msr	BASEPRI, r3
 800582e:	f3bf 8f6f 	isb	sy
 8005832:	f3bf 8f4f 	dsb	sy
 8005836:	e7fe      	b.n	8005836 <xPortStartScheduler+0x82>
			ulMaxPRIGROUPValue--;
 8005838:	3b01      	subs	r3, #1
 800583a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800583c:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8005840:	005b      	lsls	r3, r3, #1
 8005842:	b2db      	uxtb	r3, r3
 8005844:	f88d 3003 	strb.w	r3, [sp, #3]
 8005848:	e7e6      	b.n	8005818 <xPortStartScheduler+0x64>
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800584a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800584e:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005850:	9b01      	ldr	r3, [sp, #4]
 8005852:	4a15      	ldr	r2, [pc, #84]	@ (80058a8 <xPortStartScheduler+0xf4>)
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005854:	f04f 24e0 	mov.w	r4, #3758153728	@ 0xe000e000
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005858:	b2db      	uxtb	r3, r3
 800585a:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800585c:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 8005860:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005864:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005868:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 800586c:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8005870:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	vPortSetupTimerInterrupt();
 8005874:	f7ff ff8c 	bl	8005790 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8005878:	4b0e      	ldr	r3, [pc, #56]	@ (80058b4 <xPortStartScheduler+0x100>)
 800587a:	2500      	movs	r5, #0
 800587c:	601d      	str	r5, [r3, #0]
	vPortEnableVFP();
 800587e:	f7ff feb1 	bl	80055e4 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005882:	f8d4 3f34 	ldr.w	r3, [r4, #3892]	@ 0xf34
 8005886:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800588a:	f8c4 3f34 	str.w	r3, [r4, #3892]	@ 0xf34
	prvPortStartFirstTask();
 800588e:	f7ff fe95 	bl	80055bc <prvPortStartFirstTask>
	vTaskSwitchContext();
 8005892:	f7ff fb65 	bl	8004f60 <vTaskSwitchContext>
	prvTaskExitError();
 8005896:	f7ff feaf 	bl	80055f8 <prvTaskExitError>
}
 800589a:	4628      	mov	r0, r5
 800589c:	b003      	add	sp, #12
 800589e:	bd30      	pop	{r4, r5, pc}
 80058a0:	410fc271 	.word	0x410fc271
 80058a4:	410fc270 	.word	0x410fc270
 80058a8:	e000e400 	.word	0xe000e400
 80058ac:	200014e8 	.word	0x200014e8
 80058b0:	200014e4 	.word	0x200014e4
 80058b4:	2000000c 	.word	0x2000000c

080058b8 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80058b8:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80058bc:	2b0f      	cmp	r3, #15
 80058be:	d90e      	bls.n	80058de <vPortValidateInterruptPriority+0x26>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80058c0:	4a11      	ldr	r2, [pc, #68]	@ (8005908 <vPortValidateInterruptPriority+0x50>)
 80058c2:	5c9b      	ldrb	r3, [r3, r2]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80058c4:	4a11      	ldr	r2, [pc, #68]	@ (800590c <vPortValidateInterruptPriority+0x54>)
 80058c6:	7812      	ldrb	r2, [r2, #0]
 80058c8:	429a      	cmp	r2, r3
 80058ca:	d908      	bls.n	80058de <vPortValidateInterruptPriority+0x26>
 80058cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058d0:	f383 8811 	msr	BASEPRI, r3
 80058d4:	f3bf 8f6f 	isb	sy
 80058d8:	f3bf 8f4f 	dsb	sy
 80058dc:	e7fe      	b.n	80058dc <vPortValidateInterruptPriority+0x24>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80058de:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80058e2:	4a0b      	ldr	r2, [pc, #44]	@ (8005910 <vPortValidateInterruptPriority+0x58>)
 80058e4:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	@ 0xd0c
 80058e8:	6812      	ldr	r2, [r2, #0]
 80058ea:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80058ee:	4293      	cmp	r3, r2
 80058f0:	d908      	bls.n	8005904 <vPortValidateInterruptPriority+0x4c>
 80058f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058f6:	f383 8811 	msr	BASEPRI, r3
 80058fa:	f3bf 8f6f 	isb	sy
 80058fe:	f3bf 8f4f 	dsb	sy
 8005902:	e7fe      	b.n	8005902 <vPortValidateInterruptPriority+0x4a>
	}
 8005904:	4770      	bx	lr
 8005906:	bf00      	nop
 8005908:	e000e3f0 	.word	0xe000e3f0
 800590c:	200014e8 	.word	0x200014e8
 8005910:	200014e4 	.word	0x200014e4

08005914 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005914:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005916:	4b10      	ldr	r3, [pc, #64]	@ (8005958 <prvInsertBlockIntoFreeList+0x44>)
 8005918:	461a      	mov	r2, r3
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	4283      	cmp	r3, r0
 800591e:	d3fb      	bcc.n	8005918 <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005920:	6854      	ldr	r4, [r2, #4]
 8005922:	1911      	adds	r1, r2, r4
 8005924:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005926:	bf01      	itttt	eq
 8005928:	6841      	ldreq	r1, [r0, #4]
 800592a:	4610      	moveq	r0, r2
 800592c:	1909      	addeq	r1, r1, r4
 800592e:	6051      	streq	r1, [r2, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005930:	6844      	ldr	r4, [r0, #4]
 8005932:	1901      	adds	r1, r0, r4
 8005934:	428b      	cmp	r3, r1
 8005936:	d10c      	bne.n	8005952 <prvInsertBlockIntoFreeList+0x3e>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005938:	4908      	ldr	r1, [pc, #32]	@ (800595c <prvInsertBlockIntoFreeList+0x48>)
 800593a:	6809      	ldr	r1, [r1, #0]
 800593c:	428b      	cmp	r3, r1
 800593e:	d003      	beq.n	8005948 <prvInsertBlockIntoFreeList+0x34>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005940:	6859      	ldr	r1, [r3, #4]
 8005942:	4421      	add	r1, r4
 8005944:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005946:	6819      	ldr	r1, [r3, #0]
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005948:	6001      	str	r1, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800594a:	4290      	cmp	r0, r2
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800594c:	bf18      	it	ne
 800594e:	6010      	strne	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005950:	bd10      	pop	{r4, pc}
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005952:	4619      	mov	r1, r3
 8005954:	e7f8      	b.n	8005948 <prvInsertBlockIntoFreeList+0x34>
 8005956:	bf00      	nop
 8005958:	200014fc 	.word	0x200014fc
 800595c:	200014f8 	.word	0x200014f8

08005960 <pvPortMalloc>:
{
 8005960:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005964:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8005966:	f7ff f9bf 	bl	8004ce8 <vTaskSuspendAll>
		if( pxEnd == NULL )
 800596a:	493f      	ldr	r1, [pc, #252]	@ (8005a68 <pvPortMalloc+0x108>)
 800596c:	4d3f      	ldr	r5, [pc, #252]	@ (8005a6c <pvPortMalloc+0x10c>)
 800596e:	680b      	ldr	r3, [r1, #0]
 8005970:	b9fb      	cbnz	r3, 80059b2 <pvPortMalloc+0x52>
	uxAddress = ( size_t ) ucHeap;
 8005972:	4a3f      	ldr	r2, [pc, #252]	@ (8005a70 <pvPortMalloc+0x110>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005974:	0756      	lsls	r6, r2, #29
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005976:	bf1c      	itt	ne
 8005978:	3207      	addne	r2, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800597a:	4b3e      	ldrne	r3, [pc, #248]	@ (8005a74 <pvPortMalloc+0x114>)
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800597c:	4e3e      	ldr	r6, [pc, #248]	@ (8005a78 <pvPortMalloc+0x118>)
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800597e:	bf1a      	itte	ne
 8005980:	f022 0207 	bicne.w	r2, r2, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005984:	1a9b      	subne	r3, r3, r2
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005986:	f247 5330 	movweq	r3, #30000	@ 0x7530
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800598a:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 800598c:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800598e:	f023 0307 	bic.w	r3, r3, #7
	xStart.xBlockSize = ( size_t ) 0;
 8005992:	2000      	movs	r0, #0
 8005994:	6070      	str	r0, [r6, #4]
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005996:	6032      	str	r2, [r6, #0]
	pxEnd->pxNextFreeBlock = NULL;
 8005998:	e9c3 0000 	strd	r0, r0, [r3]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800599c:	1a98      	subs	r0, r3, r2
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800599e:	e9c2 3000 	strd	r3, r0, [r2]
	pxEnd = ( void * ) uxAddress;
 80059a2:	600b      	str	r3, [r1, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80059a4:	4b35      	ldr	r3, [pc, #212]	@ (8005a7c <pvPortMalloc+0x11c>)
 80059a6:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80059a8:	4b35      	ldr	r3, [pc, #212]	@ (8005a80 <pvPortMalloc+0x120>)
 80059aa:	6018      	str	r0, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80059ac:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80059b0:	602b      	str	r3, [r5, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80059b2:	682e      	ldr	r6, [r5, #0]
 80059b4:	4226      	tst	r6, r4
 80059b6:	d152      	bne.n	8005a5e <pvPortMalloc+0xfe>
			if( xWantedSize > 0 )
 80059b8:	2c00      	cmp	r4, #0
 80059ba:	d043      	beq.n	8005a44 <pvPortMalloc+0xe4>
				xWantedSize += xHeapStructSize;
 80059bc:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80059c0:	0760      	lsls	r0, r4, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80059c2:	bf1c      	itt	ne
 80059c4:	f023 0307 	bicne.w	r3, r3, #7
 80059c8:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d047      	beq.n	8005a5e <pvPortMalloc+0xfe>
 80059ce:	4f2c      	ldr	r7, [pc, #176]	@ (8005a80 <pvPortMalloc+0x120>)
 80059d0:	683c      	ldr	r4, [r7, #0]
 80059d2:	429c      	cmp	r4, r3
 80059d4:	d343      	bcc.n	8005a5e <pvPortMalloc+0xfe>
				pxBlock = xStart.pxNextFreeBlock;
 80059d6:	4a28      	ldr	r2, [pc, #160]	@ (8005a78 <pvPortMalloc+0x118>)
 80059d8:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80059da:	6868      	ldr	r0, [r5, #4]
 80059dc:	4298      	cmp	r0, r3
 80059de:	d204      	bcs.n	80059ea <pvPortMalloc+0x8a>
 80059e0:	f8d5 c000 	ldr.w	ip, [r5]
 80059e4:	f1bc 0f00 	cmp.w	ip, #0
 80059e8:	d115      	bne.n	8005a16 <pvPortMalloc+0xb6>
				if( pxBlock != pxEnd )
 80059ea:	6809      	ldr	r1, [r1, #0]
 80059ec:	42a9      	cmp	r1, r5
 80059ee:	d036      	beq.n	8005a5e <pvPortMalloc+0xfe>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80059f0:	6829      	ldr	r1, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80059f2:	f8d2 8000 	ldr.w	r8, [r2]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80059f6:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80059f8:	1ac2      	subs	r2, r0, r3
 80059fa:	2a10      	cmp	r2, #16
 80059fc:	d912      	bls.n	8005a24 <pvPortMalloc+0xc4>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80059fe:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005a00:	0741      	lsls	r1, r0, #29
 8005a02:	d00b      	beq.n	8005a1c <pvPortMalloc+0xbc>
 8005a04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a08:	f383 8811 	msr	BASEPRI, r3
 8005a0c:	f3bf 8f6f 	isb	sy
 8005a10:	f3bf 8f4f 	dsb	sy
 8005a14:	e7fe      	b.n	8005a14 <pvPortMalloc+0xb4>
 8005a16:	462a      	mov	r2, r5
 8005a18:	4665      	mov	r5, ip
 8005a1a:	e7de      	b.n	80059da <pvPortMalloc+0x7a>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005a1c:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005a1e:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005a20:	f7ff ff78 	bl	8005914 <prvInsertBlockIntoFreeList>
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005a24:	4915      	ldr	r1, [pc, #84]	@ (8005a7c <pvPortMalloc+0x11c>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005a26:	686a      	ldr	r2, [r5, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005a28:	6808      	ldr	r0, [r1, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005a2a:	1aa4      	subs	r4, r4, r2
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005a2c:	4284      	cmp	r4, r0
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005a2e:	ea46 0602 	orr.w	r6, r6, r2
					pxBlock->pxNextFreeBlock = NULL;
 8005a32:	f04f 0300 	mov.w	r3, #0
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005a36:	603c      	str	r4, [r7, #0]
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005a38:	bf38      	it	cc
 8005a3a:	600c      	strcc	r4, [r1, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005a3c:	606e      	str	r6, [r5, #4]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005a3e:	f108 0408 	add.w	r4, r8, #8
					pxBlock->pxNextFreeBlock = NULL;
 8005a42:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
 8005a44:	f7ff f9f4 	bl	8004e30 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005a48:	0763      	lsls	r3, r4, #29
 8005a4a:	d00a      	beq.n	8005a62 <pvPortMalloc+0x102>
 8005a4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a50:	f383 8811 	msr	BASEPRI, r3
 8005a54:	f3bf 8f6f 	isb	sy
 8005a58:	f3bf 8f4f 	dsb	sy
 8005a5c:	e7fe      	b.n	8005a5c <pvPortMalloc+0xfc>
void *pvReturn = NULL;
 8005a5e:	2400      	movs	r4, #0
 8005a60:	e7f0      	b.n	8005a44 <pvPortMalloc+0xe4>
}
 8005a62:	4620      	mov	r0, r4
 8005a64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005a68:	200014f8 	.word	0x200014f8
 8005a6c:	200014ec 	.word	0x200014ec
 8005a70:	20001504 	.word	0x20001504
 8005a74:	20008a34 	.word	0x20008a34
 8005a78:	200014fc 	.word	0x200014fc
 8005a7c:	200014f0 	.word	0x200014f0
 8005a80:	200014f4 	.word	0x200014f4

08005a84 <vPortFree>:
{
 8005a84:	b510      	push	{r4, lr}
	if( pv != NULL )
 8005a86:	4604      	mov	r4, r0
 8005a88:	b370      	cbz	r0, 8005ae8 <vPortFree+0x64>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005a8a:	4a18      	ldr	r2, [pc, #96]	@ (8005aec <vPortFree+0x68>)
 8005a8c:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8005a90:	6812      	ldr	r2, [r2, #0]
 8005a92:	4213      	tst	r3, r2
 8005a94:	d108      	bne.n	8005aa8 <vPortFree+0x24>
 8005a96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a9a:	f383 8811 	msr	BASEPRI, r3
 8005a9e:	f3bf 8f6f 	isb	sy
 8005aa2:	f3bf 8f4f 	dsb	sy
 8005aa6:	e7fe      	b.n	8005aa6 <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005aa8:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8005aac:	b141      	cbz	r1, 8005ac0 <vPortFree+0x3c>
 8005aae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ab2:	f383 8811 	msr	BASEPRI, r3
 8005ab6:	f3bf 8f6f 	isb	sy
 8005aba:	f3bf 8f4f 	dsb	sy
 8005abe:	e7fe      	b.n	8005abe <vPortFree+0x3a>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005ac0:	ea23 0302 	bic.w	r3, r3, r2
 8005ac4:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 8005ac8:	f7ff f90e 	bl	8004ce8 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005acc:	4a08      	ldr	r2, [pc, #32]	@ (8005af0 <vPortFree+0x6c>)
 8005ace:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8005ad2:	6811      	ldr	r1, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005ad4:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005ad8:	440b      	add	r3, r1
 8005ada:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005adc:	f7ff ff1a 	bl	8005914 <prvInsertBlockIntoFreeList>
}
 8005ae0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 8005ae4:	f7ff b9a4 	b.w	8004e30 <xTaskResumeAll>
}
 8005ae8:	bd10      	pop	{r4, pc}
 8005aea:	bf00      	nop
 8005aec:	200014ec 	.word	0x200014ec
 8005af0:	200014f4 	.word	0x200014f4

08005af4 <malloc>:
 8005af4:	4b02      	ldr	r3, [pc, #8]	@ (8005b00 <malloc+0xc>)
 8005af6:	4601      	mov	r1, r0
 8005af8:	6818      	ldr	r0, [r3, #0]
 8005afa:	f000 b825 	b.w	8005b48 <_malloc_r>
 8005afe:	bf00      	nop
 8005b00:	20000188 	.word	0x20000188

08005b04 <sbrk_aligned>:
 8005b04:	b570      	push	{r4, r5, r6, lr}
 8005b06:	4e0f      	ldr	r6, [pc, #60]	@ (8005b44 <sbrk_aligned+0x40>)
 8005b08:	460c      	mov	r4, r1
 8005b0a:	6831      	ldr	r1, [r6, #0]
 8005b0c:	4605      	mov	r5, r0
 8005b0e:	b911      	cbnz	r1, 8005b16 <sbrk_aligned+0x12>
 8005b10:	f001 ff92 	bl	8007a38 <_sbrk_r>
 8005b14:	6030      	str	r0, [r6, #0]
 8005b16:	4621      	mov	r1, r4
 8005b18:	4628      	mov	r0, r5
 8005b1a:	f001 ff8d 	bl	8007a38 <_sbrk_r>
 8005b1e:	1c43      	adds	r3, r0, #1
 8005b20:	d103      	bne.n	8005b2a <sbrk_aligned+0x26>
 8005b22:	f04f 34ff 	mov.w	r4, #4294967295
 8005b26:	4620      	mov	r0, r4
 8005b28:	bd70      	pop	{r4, r5, r6, pc}
 8005b2a:	1cc4      	adds	r4, r0, #3
 8005b2c:	f024 0403 	bic.w	r4, r4, #3
 8005b30:	42a0      	cmp	r0, r4
 8005b32:	d0f8      	beq.n	8005b26 <sbrk_aligned+0x22>
 8005b34:	1a21      	subs	r1, r4, r0
 8005b36:	4628      	mov	r0, r5
 8005b38:	f001 ff7e 	bl	8007a38 <_sbrk_r>
 8005b3c:	3001      	adds	r0, #1
 8005b3e:	d1f2      	bne.n	8005b26 <sbrk_aligned+0x22>
 8005b40:	e7ef      	b.n	8005b22 <sbrk_aligned+0x1e>
 8005b42:	bf00      	nop
 8005b44:	20008a34 	.word	0x20008a34

08005b48 <_malloc_r>:
 8005b48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005b4c:	1ccd      	adds	r5, r1, #3
 8005b4e:	f025 0503 	bic.w	r5, r5, #3
 8005b52:	3508      	adds	r5, #8
 8005b54:	2d0c      	cmp	r5, #12
 8005b56:	bf38      	it	cc
 8005b58:	250c      	movcc	r5, #12
 8005b5a:	2d00      	cmp	r5, #0
 8005b5c:	4606      	mov	r6, r0
 8005b5e:	db01      	blt.n	8005b64 <_malloc_r+0x1c>
 8005b60:	42a9      	cmp	r1, r5
 8005b62:	d904      	bls.n	8005b6e <_malloc_r+0x26>
 8005b64:	230c      	movs	r3, #12
 8005b66:	6033      	str	r3, [r6, #0]
 8005b68:	2000      	movs	r0, #0
 8005b6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005b6e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005c44 <_malloc_r+0xfc>
 8005b72:	f000 f869 	bl	8005c48 <__malloc_lock>
 8005b76:	f8d8 3000 	ldr.w	r3, [r8]
 8005b7a:	461c      	mov	r4, r3
 8005b7c:	bb44      	cbnz	r4, 8005bd0 <_malloc_r+0x88>
 8005b7e:	4629      	mov	r1, r5
 8005b80:	4630      	mov	r0, r6
 8005b82:	f7ff ffbf 	bl	8005b04 <sbrk_aligned>
 8005b86:	1c43      	adds	r3, r0, #1
 8005b88:	4604      	mov	r4, r0
 8005b8a:	d158      	bne.n	8005c3e <_malloc_r+0xf6>
 8005b8c:	f8d8 4000 	ldr.w	r4, [r8]
 8005b90:	4627      	mov	r7, r4
 8005b92:	2f00      	cmp	r7, #0
 8005b94:	d143      	bne.n	8005c1e <_malloc_r+0xd6>
 8005b96:	2c00      	cmp	r4, #0
 8005b98:	d04b      	beq.n	8005c32 <_malloc_r+0xea>
 8005b9a:	6823      	ldr	r3, [r4, #0]
 8005b9c:	4639      	mov	r1, r7
 8005b9e:	4630      	mov	r0, r6
 8005ba0:	eb04 0903 	add.w	r9, r4, r3
 8005ba4:	f001 ff48 	bl	8007a38 <_sbrk_r>
 8005ba8:	4581      	cmp	r9, r0
 8005baa:	d142      	bne.n	8005c32 <_malloc_r+0xea>
 8005bac:	6821      	ldr	r1, [r4, #0]
 8005bae:	1a6d      	subs	r5, r5, r1
 8005bb0:	4629      	mov	r1, r5
 8005bb2:	4630      	mov	r0, r6
 8005bb4:	f7ff ffa6 	bl	8005b04 <sbrk_aligned>
 8005bb8:	3001      	adds	r0, #1
 8005bba:	d03a      	beq.n	8005c32 <_malloc_r+0xea>
 8005bbc:	6823      	ldr	r3, [r4, #0]
 8005bbe:	442b      	add	r3, r5
 8005bc0:	6023      	str	r3, [r4, #0]
 8005bc2:	f8d8 3000 	ldr.w	r3, [r8]
 8005bc6:	685a      	ldr	r2, [r3, #4]
 8005bc8:	bb62      	cbnz	r2, 8005c24 <_malloc_r+0xdc>
 8005bca:	f8c8 7000 	str.w	r7, [r8]
 8005bce:	e00f      	b.n	8005bf0 <_malloc_r+0xa8>
 8005bd0:	6822      	ldr	r2, [r4, #0]
 8005bd2:	1b52      	subs	r2, r2, r5
 8005bd4:	d420      	bmi.n	8005c18 <_malloc_r+0xd0>
 8005bd6:	2a0b      	cmp	r2, #11
 8005bd8:	d917      	bls.n	8005c0a <_malloc_r+0xc2>
 8005bda:	1961      	adds	r1, r4, r5
 8005bdc:	42a3      	cmp	r3, r4
 8005bde:	6025      	str	r5, [r4, #0]
 8005be0:	bf18      	it	ne
 8005be2:	6059      	strne	r1, [r3, #4]
 8005be4:	6863      	ldr	r3, [r4, #4]
 8005be6:	bf08      	it	eq
 8005be8:	f8c8 1000 	streq.w	r1, [r8]
 8005bec:	5162      	str	r2, [r4, r5]
 8005bee:	604b      	str	r3, [r1, #4]
 8005bf0:	4630      	mov	r0, r6
 8005bf2:	f000 f82f 	bl	8005c54 <__malloc_unlock>
 8005bf6:	f104 000b 	add.w	r0, r4, #11
 8005bfa:	1d23      	adds	r3, r4, #4
 8005bfc:	f020 0007 	bic.w	r0, r0, #7
 8005c00:	1ac2      	subs	r2, r0, r3
 8005c02:	bf1c      	itt	ne
 8005c04:	1a1b      	subne	r3, r3, r0
 8005c06:	50a3      	strne	r3, [r4, r2]
 8005c08:	e7af      	b.n	8005b6a <_malloc_r+0x22>
 8005c0a:	6862      	ldr	r2, [r4, #4]
 8005c0c:	42a3      	cmp	r3, r4
 8005c0e:	bf0c      	ite	eq
 8005c10:	f8c8 2000 	streq.w	r2, [r8]
 8005c14:	605a      	strne	r2, [r3, #4]
 8005c16:	e7eb      	b.n	8005bf0 <_malloc_r+0xa8>
 8005c18:	4623      	mov	r3, r4
 8005c1a:	6864      	ldr	r4, [r4, #4]
 8005c1c:	e7ae      	b.n	8005b7c <_malloc_r+0x34>
 8005c1e:	463c      	mov	r4, r7
 8005c20:	687f      	ldr	r7, [r7, #4]
 8005c22:	e7b6      	b.n	8005b92 <_malloc_r+0x4a>
 8005c24:	461a      	mov	r2, r3
 8005c26:	685b      	ldr	r3, [r3, #4]
 8005c28:	42a3      	cmp	r3, r4
 8005c2a:	d1fb      	bne.n	8005c24 <_malloc_r+0xdc>
 8005c2c:	2300      	movs	r3, #0
 8005c2e:	6053      	str	r3, [r2, #4]
 8005c30:	e7de      	b.n	8005bf0 <_malloc_r+0xa8>
 8005c32:	230c      	movs	r3, #12
 8005c34:	6033      	str	r3, [r6, #0]
 8005c36:	4630      	mov	r0, r6
 8005c38:	f000 f80c 	bl	8005c54 <__malloc_unlock>
 8005c3c:	e794      	b.n	8005b68 <_malloc_r+0x20>
 8005c3e:	6005      	str	r5, [r0, #0]
 8005c40:	e7d6      	b.n	8005bf0 <_malloc_r+0xa8>
 8005c42:	bf00      	nop
 8005c44:	20008a38 	.word	0x20008a38

08005c48 <__malloc_lock>:
 8005c48:	4801      	ldr	r0, [pc, #4]	@ (8005c50 <__malloc_lock+0x8>)
 8005c4a:	f7fb bf06 	b.w	8001a5a <__retarget_lock_acquire_recursive>
 8005c4e:	bf00      	nop
 8005c50:	20000aa4 	.word	0x20000aa4

08005c54 <__malloc_unlock>:
 8005c54:	4801      	ldr	r0, [pc, #4]	@ (8005c5c <__malloc_unlock+0x8>)
 8005c56:	f7fb bf0c 	b.w	8001a72 <__retarget_lock_release_recursive>
 8005c5a:	bf00      	nop
 8005c5c:	20000aa4 	.word	0x20000aa4

08005c60 <sulp>:
 8005c60:	b570      	push	{r4, r5, r6, lr}
 8005c62:	4604      	mov	r4, r0
 8005c64:	460d      	mov	r5, r1
 8005c66:	ec45 4b10 	vmov	d0, r4, r5
 8005c6a:	4616      	mov	r6, r2
 8005c6c:	f003 fca6 	bl	80095bc <__ulp>
 8005c70:	ec51 0b10 	vmov	r0, r1, d0
 8005c74:	b17e      	cbz	r6, 8005c96 <sulp+0x36>
 8005c76:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8005c7a:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	dd09      	ble.n	8005c96 <sulp+0x36>
 8005c82:	051b      	lsls	r3, r3, #20
 8005c84:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8005c88:	2400      	movs	r4, #0
 8005c8a:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8005c8e:	4622      	mov	r2, r4
 8005c90:	462b      	mov	r3, r5
 8005c92:	f7fa fcb1 	bl	80005f8 <__aeabi_dmul>
 8005c96:	ec41 0b10 	vmov	d0, r0, r1
 8005c9a:	bd70      	pop	{r4, r5, r6, pc}
 8005c9c:	0000      	movs	r0, r0
	...

08005ca0 <_strtod_l>:
 8005ca0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ca4:	b09f      	sub	sp, #124	@ 0x7c
 8005ca6:	460c      	mov	r4, r1
 8005ca8:	9217      	str	r2, [sp, #92]	@ 0x5c
 8005caa:	2200      	movs	r2, #0
 8005cac:	921a      	str	r2, [sp, #104]	@ 0x68
 8005cae:	9005      	str	r0, [sp, #20]
 8005cb0:	f04f 0a00 	mov.w	sl, #0
 8005cb4:	f04f 0b00 	mov.w	fp, #0
 8005cb8:	460a      	mov	r2, r1
 8005cba:	9219      	str	r2, [sp, #100]	@ 0x64
 8005cbc:	7811      	ldrb	r1, [r2, #0]
 8005cbe:	292b      	cmp	r1, #43	@ 0x2b
 8005cc0:	d04a      	beq.n	8005d58 <_strtod_l+0xb8>
 8005cc2:	d838      	bhi.n	8005d36 <_strtod_l+0x96>
 8005cc4:	290d      	cmp	r1, #13
 8005cc6:	d832      	bhi.n	8005d2e <_strtod_l+0x8e>
 8005cc8:	2908      	cmp	r1, #8
 8005cca:	d832      	bhi.n	8005d32 <_strtod_l+0x92>
 8005ccc:	2900      	cmp	r1, #0
 8005cce:	d03b      	beq.n	8005d48 <_strtod_l+0xa8>
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	920b      	str	r2, [sp, #44]	@ 0x2c
 8005cd4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8005cd6:	782a      	ldrb	r2, [r5, #0]
 8005cd8:	2a30      	cmp	r2, #48	@ 0x30
 8005cda:	f040 80b3 	bne.w	8005e44 <_strtod_l+0x1a4>
 8005cde:	786a      	ldrb	r2, [r5, #1]
 8005ce0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8005ce4:	2a58      	cmp	r2, #88	@ 0x58
 8005ce6:	d16e      	bne.n	8005dc6 <_strtod_l+0x126>
 8005ce8:	9302      	str	r3, [sp, #8]
 8005cea:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005cec:	9301      	str	r3, [sp, #4]
 8005cee:	ab1a      	add	r3, sp, #104	@ 0x68
 8005cf0:	9300      	str	r3, [sp, #0]
 8005cf2:	4a8e      	ldr	r2, [pc, #568]	@ (8005f2c <_strtod_l+0x28c>)
 8005cf4:	9805      	ldr	r0, [sp, #20]
 8005cf6:	ab1b      	add	r3, sp, #108	@ 0x6c
 8005cf8:	a919      	add	r1, sp, #100	@ 0x64
 8005cfa:	f002 fe07 	bl	800890c <__gethex>
 8005cfe:	f010 060f 	ands.w	r6, r0, #15
 8005d02:	4604      	mov	r4, r0
 8005d04:	d005      	beq.n	8005d12 <_strtod_l+0x72>
 8005d06:	2e06      	cmp	r6, #6
 8005d08:	d128      	bne.n	8005d5c <_strtod_l+0xbc>
 8005d0a:	3501      	adds	r5, #1
 8005d0c:	2300      	movs	r3, #0
 8005d0e:	9519      	str	r5, [sp, #100]	@ 0x64
 8005d10:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005d12:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	f040 858e 	bne.w	8006836 <_strtod_l+0xb96>
 8005d1a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005d1c:	b1cb      	cbz	r3, 8005d52 <_strtod_l+0xb2>
 8005d1e:	4652      	mov	r2, sl
 8005d20:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8005d24:	ec43 2b10 	vmov	d0, r2, r3
 8005d28:	b01f      	add	sp, #124	@ 0x7c
 8005d2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d2e:	2920      	cmp	r1, #32
 8005d30:	d1ce      	bne.n	8005cd0 <_strtod_l+0x30>
 8005d32:	3201      	adds	r2, #1
 8005d34:	e7c1      	b.n	8005cba <_strtod_l+0x1a>
 8005d36:	292d      	cmp	r1, #45	@ 0x2d
 8005d38:	d1ca      	bne.n	8005cd0 <_strtod_l+0x30>
 8005d3a:	2101      	movs	r1, #1
 8005d3c:	910b      	str	r1, [sp, #44]	@ 0x2c
 8005d3e:	1c51      	adds	r1, r2, #1
 8005d40:	9119      	str	r1, [sp, #100]	@ 0x64
 8005d42:	7852      	ldrb	r2, [r2, #1]
 8005d44:	2a00      	cmp	r2, #0
 8005d46:	d1c5      	bne.n	8005cd4 <_strtod_l+0x34>
 8005d48:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8005d4a:	9419      	str	r4, [sp, #100]	@ 0x64
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	f040 8570 	bne.w	8006832 <_strtod_l+0xb92>
 8005d52:	4652      	mov	r2, sl
 8005d54:	465b      	mov	r3, fp
 8005d56:	e7e5      	b.n	8005d24 <_strtod_l+0x84>
 8005d58:	2100      	movs	r1, #0
 8005d5a:	e7ef      	b.n	8005d3c <_strtod_l+0x9c>
 8005d5c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8005d5e:	b13a      	cbz	r2, 8005d70 <_strtod_l+0xd0>
 8005d60:	2135      	movs	r1, #53	@ 0x35
 8005d62:	a81c      	add	r0, sp, #112	@ 0x70
 8005d64:	f003 fd24 	bl	80097b0 <__copybits>
 8005d68:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8005d6a:	9805      	ldr	r0, [sp, #20]
 8005d6c:	f003 f8f2 	bl	8008f54 <_Bfree>
 8005d70:	3e01      	subs	r6, #1
 8005d72:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8005d74:	2e04      	cmp	r6, #4
 8005d76:	d806      	bhi.n	8005d86 <_strtod_l+0xe6>
 8005d78:	e8df f006 	tbb	[pc, r6]
 8005d7c:	201d0314 	.word	0x201d0314
 8005d80:	14          	.byte	0x14
 8005d81:	00          	.byte	0x00
 8005d82:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8005d86:	05e1      	lsls	r1, r4, #23
 8005d88:	bf48      	it	mi
 8005d8a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8005d8e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8005d92:	0d1b      	lsrs	r3, r3, #20
 8005d94:	051b      	lsls	r3, r3, #20
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d1bb      	bne.n	8005d12 <_strtod_l+0x72>
 8005d9a:	f001 fe6f 	bl	8007a7c <__errno>
 8005d9e:	2322      	movs	r3, #34	@ 0x22
 8005da0:	6003      	str	r3, [r0, #0]
 8005da2:	e7b6      	b.n	8005d12 <_strtod_l+0x72>
 8005da4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8005da8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8005dac:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8005db0:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8005db4:	e7e7      	b.n	8005d86 <_strtod_l+0xe6>
 8005db6:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8005f34 <_strtod_l+0x294>
 8005dba:	e7e4      	b.n	8005d86 <_strtod_l+0xe6>
 8005dbc:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8005dc0:	f04f 3aff 	mov.w	sl, #4294967295
 8005dc4:	e7df      	b.n	8005d86 <_strtod_l+0xe6>
 8005dc6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005dc8:	1c5a      	adds	r2, r3, #1
 8005dca:	9219      	str	r2, [sp, #100]	@ 0x64
 8005dcc:	785b      	ldrb	r3, [r3, #1]
 8005dce:	2b30      	cmp	r3, #48	@ 0x30
 8005dd0:	d0f9      	beq.n	8005dc6 <_strtod_l+0x126>
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d09d      	beq.n	8005d12 <_strtod_l+0x72>
 8005dd6:	2301      	movs	r3, #1
 8005dd8:	9309      	str	r3, [sp, #36]	@ 0x24
 8005dda:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005ddc:	930c      	str	r3, [sp, #48]	@ 0x30
 8005dde:	2300      	movs	r3, #0
 8005de0:	9308      	str	r3, [sp, #32]
 8005de2:	930a      	str	r3, [sp, #40]	@ 0x28
 8005de4:	461f      	mov	r7, r3
 8005de6:	220a      	movs	r2, #10
 8005de8:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8005dea:	7805      	ldrb	r5, [r0, #0]
 8005dec:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8005df0:	b2d9      	uxtb	r1, r3
 8005df2:	2909      	cmp	r1, #9
 8005df4:	d928      	bls.n	8005e48 <_strtod_l+0x1a8>
 8005df6:	494e      	ldr	r1, [pc, #312]	@ (8005f30 <_strtod_l+0x290>)
 8005df8:	2201      	movs	r2, #1
 8005dfa:	f001 fdbd 	bl	8007978 <strncmp>
 8005dfe:	2800      	cmp	r0, #0
 8005e00:	d032      	beq.n	8005e68 <_strtod_l+0x1c8>
 8005e02:	2000      	movs	r0, #0
 8005e04:	462a      	mov	r2, r5
 8005e06:	4681      	mov	r9, r0
 8005e08:	463d      	mov	r5, r7
 8005e0a:	4603      	mov	r3, r0
 8005e0c:	2a65      	cmp	r2, #101	@ 0x65
 8005e0e:	d001      	beq.n	8005e14 <_strtod_l+0x174>
 8005e10:	2a45      	cmp	r2, #69	@ 0x45
 8005e12:	d114      	bne.n	8005e3e <_strtod_l+0x19e>
 8005e14:	b91d      	cbnz	r5, 8005e1e <_strtod_l+0x17e>
 8005e16:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005e18:	4302      	orrs	r2, r0
 8005e1a:	d095      	beq.n	8005d48 <_strtod_l+0xa8>
 8005e1c:	2500      	movs	r5, #0
 8005e1e:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8005e20:	1c62      	adds	r2, r4, #1
 8005e22:	9219      	str	r2, [sp, #100]	@ 0x64
 8005e24:	7862      	ldrb	r2, [r4, #1]
 8005e26:	2a2b      	cmp	r2, #43	@ 0x2b
 8005e28:	d077      	beq.n	8005f1a <_strtod_l+0x27a>
 8005e2a:	2a2d      	cmp	r2, #45	@ 0x2d
 8005e2c:	d07b      	beq.n	8005f26 <_strtod_l+0x286>
 8005e2e:	f04f 0c00 	mov.w	ip, #0
 8005e32:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8005e36:	2909      	cmp	r1, #9
 8005e38:	f240 8082 	bls.w	8005f40 <_strtod_l+0x2a0>
 8005e3c:	9419      	str	r4, [sp, #100]	@ 0x64
 8005e3e:	f04f 0800 	mov.w	r8, #0
 8005e42:	e0a2      	b.n	8005f8a <_strtod_l+0x2ea>
 8005e44:	2300      	movs	r3, #0
 8005e46:	e7c7      	b.n	8005dd8 <_strtod_l+0x138>
 8005e48:	2f08      	cmp	r7, #8
 8005e4a:	bfd5      	itete	le
 8005e4c:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8005e4e:	9908      	ldrgt	r1, [sp, #32]
 8005e50:	fb02 3301 	mlale	r3, r2, r1, r3
 8005e54:	fb02 3301 	mlagt	r3, r2, r1, r3
 8005e58:	f100 0001 	add.w	r0, r0, #1
 8005e5c:	bfd4      	ite	le
 8005e5e:	930a      	strle	r3, [sp, #40]	@ 0x28
 8005e60:	9308      	strgt	r3, [sp, #32]
 8005e62:	3701      	adds	r7, #1
 8005e64:	9019      	str	r0, [sp, #100]	@ 0x64
 8005e66:	e7bf      	b.n	8005de8 <_strtod_l+0x148>
 8005e68:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005e6a:	1c5a      	adds	r2, r3, #1
 8005e6c:	9219      	str	r2, [sp, #100]	@ 0x64
 8005e6e:	785a      	ldrb	r2, [r3, #1]
 8005e70:	b37f      	cbz	r7, 8005ed2 <_strtod_l+0x232>
 8005e72:	4681      	mov	r9, r0
 8005e74:	463d      	mov	r5, r7
 8005e76:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8005e7a:	2b09      	cmp	r3, #9
 8005e7c:	d912      	bls.n	8005ea4 <_strtod_l+0x204>
 8005e7e:	2301      	movs	r3, #1
 8005e80:	e7c4      	b.n	8005e0c <_strtod_l+0x16c>
 8005e82:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005e84:	1c5a      	adds	r2, r3, #1
 8005e86:	9219      	str	r2, [sp, #100]	@ 0x64
 8005e88:	785a      	ldrb	r2, [r3, #1]
 8005e8a:	3001      	adds	r0, #1
 8005e8c:	2a30      	cmp	r2, #48	@ 0x30
 8005e8e:	d0f8      	beq.n	8005e82 <_strtod_l+0x1e2>
 8005e90:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8005e94:	2b08      	cmp	r3, #8
 8005e96:	f200 84d3 	bhi.w	8006840 <_strtod_l+0xba0>
 8005e9a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005e9c:	930c      	str	r3, [sp, #48]	@ 0x30
 8005e9e:	4681      	mov	r9, r0
 8005ea0:	2000      	movs	r0, #0
 8005ea2:	4605      	mov	r5, r0
 8005ea4:	3a30      	subs	r2, #48	@ 0x30
 8005ea6:	f100 0301 	add.w	r3, r0, #1
 8005eaa:	d02a      	beq.n	8005f02 <_strtod_l+0x262>
 8005eac:	4499      	add	r9, r3
 8005eae:	eb00 0c05 	add.w	ip, r0, r5
 8005eb2:	462b      	mov	r3, r5
 8005eb4:	210a      	movs	r1, #10
 8005eb6:	4563      	cmp	r3, ip
 8005eb8:	d10d      	bne.n	8005ed6 <_strtod_l+0x236>
 8005eba:	1c69      	adds	r1, r5, #1
 8005ebc:	4401      	add	r1, r0
 8005ebe:	4428      	add	r0, r5
 8005ec0:	2808      	cmp	r0, #8
 8005ec2:	dc16      	bgt.n	8005ef2 <_strtod_l+0x252>
 8005ec4:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8005ec6:	230a      	movs	r3, #10
 8005ec8:	fb03 2300 	mla	r3, r3, r0, r2
 8005ecc:	930a      	str	r3, [sp, #40]	@ 0x28
 8005ece:	2300      	movs	r3, #0
 8005ed0:	e018      	b.n	8005f04 <_strtod_l+0x264>
 8005ed2:	4638      	mov	r0, r7
 8005ed4:	e7da      	b.n	8005e8c <_strtod_l+0x1ec>
 8005ed6:	2b08      	cmp	r3, #8
 8005ed8:	f103 0301 	add.w	r3, r3, #1
 8005edc:	dc03      	bgt.n	8005ee6 <_strtod_l+0x246>
 8005ede:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8005ee0:	434e      	muls	r6, r1
 8005ee2:	960a      	str	r6, [sp, #40]	@ 0x28
 8005ee4:	e7e7      	b.n	8005eb6 <_strtod_l+0x216>
 8005ee6:	2b10      	cmp	r3, #16
 8005ee8:	bfde      	ittt	le
 8005eea:	9e08      	ldrle	r6, [sp, #32]
 8005eec:	434e      	mulle	r6, r1
 8005eee:	9608      	strle	r6, [sp, #32]
 8005ef0:	e7e1      	b.n	8005eb6 <_strtod_l+0x216>
 8005ef2:	280f      	cmp	r0, #15
 8005ef4:	dceb      	bgt.n	8005ece <_strtod_l+0x22e>
 8005ef6:	9808      	ldr	r0, [sp, #32]
 8005ef8:	230a      	movs	r3, #10
 8005efa:	fb03 2300 	mla	r3, r3, r0, r2
 8005efe:	9308      	str	r3, [sp, #32]
 8005f00:	e7e5      	b.n	8005ece <_strtod_l+0x22e>
 8005f02:	4629      	mov	r1, r5
 8005f04:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8005f06:	1c50      	adds	r0, r2, #1
 8005f08:	9019      	str	r0, [sp, #100]	@ 0x64
 8005f0a:	7852      	ldrb	r2, [r2, #1]
 8005f0c:	4618      	mov	r0, r3
 8005f0e:	460d      	mov	r5, r1
 8005f10:	e7b1      	b.n	8005e76 <_strtod_l+0x1d6>
 8005f12:	f04f 0900 	mov.w	r9, #0
 8005f16:	2301      	movs	r3, #1
 8005f18:	e77d      	b.n	8005e16 <_strtod_l+0x176>
 8005f1a:	f04f 0c00 	mov.w	ip, #0
 8005f1e:	1ca2      	adds	r2, r4, #2
 8005f20:	9219      	str	r2, [sp, #100]	@ 0x64
 8005f22:	78a2      	ldrb	r2, [r4, #2]
 8005f24:	e785      	b.n	8005e32 <_strtod_l+0x192>
 8005f26:	f04f 0c01 	mov.w	ip, #1
 8005f2a:	e7f8      	b.n	8005f1e <_strtod_l+0x27e>
 8005f2c:	0800a67c 	.word	0x0800a67c
 8005f30:	0800a666 	.word	0x0800a666
 8005f34:	7ff00000 	.word	0x7ff00000
 8005f38:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8005f3a:	1c51      	adds	r1, r2, #1
 8005f3c:	9119      	str	r1, [sp, #100]	@ 0x64
 8005f3e:	7852      	ldrb	r2, [r2, #1]
 8005f40:	2a30      	cmp	r2, #48	@ 0x30
 8005f42:	d0f9      	beq.n	8005f38 <_strtod_l+0x298>
 8005f44:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8005f48:	2908      	cmp	r1, #8
 8005f4a:	f63f af78 	bhi.w	8005e3e <_strtod_l+0x19e>
 8005f4e:	3a30      	subs	r2, #48	@ 0x30
 8005f50:	920e      	str	r2, [sp, #56]	@ 0x38
 8005f52:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8005f54:	920f      	str	r2, [sp, #60]	@ 0x3c
 8005f56:	f04f 080a 	mov.w	r8, #10
 8005f5a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8005f5c:	1c56      	adds	r6, r2, #1
 8005f5e:	9619      	str	r6, [sp, #100]	@ 0x64
 8005f60:	7852      	ldrb	r2, [r2, #1]
 8005f62:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8005f66:	f1be 0f09 	cmp.w	lr, #9
 8005f6a:	d939      	bls.n	8005fe0 <_strtod_l+0x340>
 8005f6c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8005f6e:	1a76      	subs	r6, r6, r1
 8005f70:	2e08      	cmp	r6, #8
 8005f72:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8005f76:	dc03      	bgt.n	8005f80 <_strtod_l+0x2e0>
 8005f78:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8005f7a:	4588      	cmp	r8, r1
 8005f7c:	bfa8      	it	ge
 8005f7e:	4688      	movge	r8, r1
 8005f80:	f1bc 0f00 	cmp.w	ip, #0
 8005f84:	d001      	beq.n	8005f8a <_strtod_l+0x2ea>
 8005f86:	f1c8 0800 	rsb	r8, r8, #0
 8005f8a:	2d00      	cmp	r5, #0
 8005f8c:	d14e      	bne.n	800602c <_strtod_l+0x38c>
 8005f8e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005f90:	4308      	orrs	r0, r1
 8005f92:	f47f aebe 	bne.w	8005d12 <_strtod_l+0x72>
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	f47f aed6 	bne.w	8005d48 <_strtod_l+0xa8>
 8005f9c:	2a69      	cmp	r2, #105	@ 0x69
 8005f9e:	d028      	beq.n	8005ff2 <_strtod_l+0x352>
 8005fa0:	dc25      	bgt.n	8005fee <_strtod_l+0x34e>
 8005fa2:	2a49      	cmp	r2, #73	@ 0x49
 8005fa4:	d025      	beq.n	8005ff2 <_strtod_l+0x352>
 8005fa6:	2a4e      	cmp	r2, #78	@ 0x4e
 8005fa8:	f47f aece 	bne.w	8005d48 <_strtod_l+0xa8>
 8005fac:	499b      	ldr	r1, [pc, #620]	@ (800621c <_strtod_l+0x57c>)
 8005fae:	a819      	add	r0, sp, #100	@ 0x64
 8005fb0:	f002 fece 	bl	8008d50 <__match>
 8005fb4:	2800      	cmp	r0, #0
 8005fb6:	f43f aec7 	beq.w	8005d48 <_strtod_l+0xa8>
 8005fba:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005fbc:	781b      	ldrb	r3, [r3, #0]
 8005fbe:	2b28      	cmp	r3, #40	@ 0x28
 8005fc0:	d12e      	bne.n	8006020 <_strtod_l+0x380>
 8005fc2:	4997      	ldr	r1, [pc, #604]	@ (8006220 <_strtod_l+0x580>)
 8005fc4:	aa1c      	add	r2, sp, #112	@ 0x70
 8005fc6:	a819      	add	r0, sp, #100	@ 0x64
 8005fc8:	f002 fed6 	bl	8008d78 <__hexnan>
 8005fcc:	2805      	cmp	r0, #5
 8005fce:	d127      	bne.n	8006020 <_strtod_l+0x380>
 8005fd0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8005fd2:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8005fd6:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8005fda:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8005fde:	e698      	b.n	8005d12 <_strtod_l+0x72>
 8005fe0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8005fe2:	fb08 2101 	mla	r1, r8, r1, r2
 8005fe6:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8005fea:	920e      	str	r2, [sp, #56]	@ 0x38
 8005fec:	e7b5      	b.n	8005f5a <_strtod_l+0x2ba>
 8005fee:	2a6e      	cmp	r2, #110	@ 0x6e
 8005ff0:	e7da      	b.n	8005fa8 <_strtod_l+0x308>
 8005ff2:	498c      	ldr	r1, [pc, #560]	@ (8006224 <_strtod_l+0x584>)
 8005ff4:	a819      	add	r0, sp, #100	@ 0x64
 8005ff6:	f002 feab 	bl	8008d50 <__match>
 8005ffa:	2800      	cmp	r0, #0
 8005ffc:	f43f aea4 	beq.w	8005d48 <_strtod_l+0xa8>
 8006000:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006002:	4989      	ldr	r1, [pc, #548]	@ (8006228 <_strtod_l+0x588>)
 8006004:	3b01      	subs	r3, #1
 8006006:	a819      	add	r0, sp, #100	@ 0x64
 8006008:	9319      	str	r3, [sp, #100]	@ 0x64
 800600a:	f002 fea1 	bl	8008d50 <__match>
 800600e:	b910      	cbnz	r0, 8006016 <_strtod_l+0x376>
 8006010:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006012:	3301      	adds	r3, #1
 8006014:	9319      	str	r3, [sp, #100]	@ 0x64
 8006016:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8006238 <_strtod_l+0x598>
 800601a:	f04f 0a00 	mov.w	sl, #0
 800601e:	e678      	b.n	8005d12 <_strtod_l+0x72>
 8006020:	4882      	ldr	r0, [pc, #520]	@ (800622c <_strtod_l+0x58c>)
 8006022:	f001 fd65 	bl	8007af0 <nan>
 8006026:	ec5b ab10 	vmov	sl, fp, d0
 800602a:	e672      	b.n	8005d12 <_strtod_l+0x72>
 800602c:	eba8 0309 	sub.w	r3, r8, r9
 8006030:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8006032:	9309      	str	r3, [sp, #36]	@ 0x24
 8006034:	2f00      	cmp	r7, #0
 8006036:	bf08      	it	eq
 8006038:	462f      	moveq	r7, r5
 800603a:	2d10      	cmp	r5, #16
 800603c:	462c      	mov	r4, r5
 800603e:	bfa8      	it	ge
 8006040:	2410      	movge	r4, #16
 8006042:	f7fa fa5f 	bl	8000504 <__aeabi_ui2d>
 8006046:	2d09      	cmp	r5, #9
 8006048:	4682      	mov	sl, r0
 800604a:	468b      	mov	fp, r1
 800604c:	dc13      	bgt.n	8006076 <_strtod_l+0x3d6>
 800604e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006050:	2b00      	cmp	r3, #0
 8006052:	f43f ae5e 	beq.w	8005d12 <_strtod_l+0x72>
 8006056:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006058:	dd78      	ble.n	800614c <_strtod_l+0x4ac>
 800605a:	2b16      	cmp	r3, #22
 800605c:	dc5f      	bgt.n	800611e <_strtod_l+0x47e>
 800605e:	4974      	ldr	r1, [pc, #464]	@ (8006230 <_strtod_l+0x590>)
 8006060:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006064:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006068:	4652      	mov	r2, sl
 800606a:	465b      	mov	r3, fp
 800606c:	f7fa fac4 	bl	80005f8 <__aeabi_dmul>
 8006070:	4682      	mov	sl, r0
 8006072:	468b      	mov	fp, r1
 8006074:	e64d      	b.n	8005d12 <_strtod_l+0x72>
 8006076:	4b6e      	ldr	r3, [pc, #440]	@ (8006230 <_strtod_l+0x590>)
 8006078:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800607c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8006080:	f7fa faba 	bl	80005f8 <__aeabi_dmul>
 8006084:	4682      	mov	sl, r0
 8006086:	9808      	ldr	r0, [sp, #32]
 8006088:	468b      	mov	fp, r1
 800608a:	f7fa fa3b 	bl	8000504 <__aeabi_ui2d>
 800608e:	4602      	mov	r2, r0
 8006090:	460b      	mov	r3, r1
 8006092:	4650      	mov	r0, sl
 8006094:	4659      	mov	r1, fp
 8006096:	f7fa f8f9 	bl	800028c <__adddf3>
 800609a:	2d0f      	cmp	r5, #15
 800609c:	4682      	mov	sl, r0
 800609e:	468b      	mov	fp, r1
 80060a0:	ddd5      	ble.n	800604e <_strtod_l+0x3ae>
 80060a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80060a4:	1b2c      	subs	r4, r5, r4
 80060a6:	441c      	add	r4, r3
 80060a8:	2c00      	cmp	r4, #0
 80060aa:	f340 8096 	ble.w	80061da <_strtod_l+0x53a>
 80060ae:	f014 030f 	ands.w	r3, r4, #15
 80060b2:	d00a      	beq.n	80060ca <_strtod_l+0x42a>
 80060b4:	495e      	ldr	r1, [pc, #376]	@ (8006230 <_strtod_l+0x590>)
 80060b6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80060ba:	4652      	mov	r2, sl
 80060bc:	465b      	mov	r3, fp
 80060be:	e9d1 0100 	ldrd	r0, r1, [r1]
 80060c2:	f7fa fa99 	bl	80005f8 <__aeabi_dmul>
 80060c6:	4682      	mov	sl, r0
 80060c8:	468b      	mov	fp, r1
 80060ca:	f034 040f 	bics.w	r4, r4, #15
 80060ce:	d073      	beq.n	80061b8 <_strtod_l+0x518>
 80060d0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 80060d4:	dd48      	ble.n	8006168 <_strtod_l+0x4c8>
 80060d6:	2400      	movs	r4, #0
 80060d8:	46a0      	mov	r8, r4
 80060da:	940a      	str	r4, [sp, #40]	@ 0x28
 80060dc:	46a1      	mov	r9, r4
 80060de:	9a05      	ldr	r2, [sp, #20]
 80060e0:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8006238 <_strtod_l+0x598>
 80060e4:	2322      	movs	r3, #34	@ 0x22
 80060e6:	6013      	str	r3, [r2, #0]
 80060e8:	f04f 0a00 	mov.w	sl, #0
 80060ec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	f43f ae0f 	beq.w	8005d12 <_strtod_l+0x72>
 80060f4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80060f6:	9805      	ldr	r0, [sp, #20]
 80060f8:	f002 ff2c 	bl	8008f54 <_Bfree>
 80060fc:	9805      	ldr	r0, [sp, #20]
 80060fe:	4649      	mov	r1, r9
 8006100:	f002 ff28 	bl	8008f54 <_Bfree>
 8006104:	9805      	ldr	r0, [sp, #20]
 8006106:	4641      	mov	r1, r8
 8006108:	f002 ff24 	bl	8008f54 <_Bfree>
 800610c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800610e:	9805      	ldr	r0, [sp, #20]
 8006110:	f002 ff20 	bl	8008f54 <_Bfree>
 8006114:	9805      	ldr	r0, [sp, #20]
 8006116:	4621      	mov	r1, r4
 8006118:	f002 ff1c 	bl	8008f54 <_Bfree>
 800611c:	e5f9      	b.n	8005d12 <_strtod_l+0x72>
 800611e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006120:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8006124:	4293      	cmp	r3, r2
 8006126:	dbbc      	blt.n	80060a2 <_strtod_l+0x402>
 8006128:	4c41      	ldr	r4, [pc, #260]	@ (8006230 <_strtod_l+0x590>)
 800612a:	f1c5 050f 	rsb	r5, r5, #15
 800612e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8006132:	4652      	mov	r2, sl
 8006134:	465b      	mov	r3, fp
 8006136:	e9d1 0100 	ldrd	r0, r1, [r1]
 800613a:	f7fa fa5d 	bl	80005f8 <__aeabi_dmul>
 800613e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006140:	1b5d      	subs	r5, r3, r5
 8006142:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8006146:	e9d4 2300 	ldrd	r2, r3, [r4]
 800614a:	e78f      	b.n	800606c <_strtod_l+0x3cc>
 800614c:	3316      	adds	r3, #22
 800614e:	dba8      	blt.n	80060a2 <_strtod_l+0x402>
 8006150:	4b37      	ldr	r3, [pc, #220]	@ (8006230 <_strtod_l+0x590>)
 8006152:	eba9 0808 	sub.w	r8, r9, r8
 8006156:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800615a:	e9d8 2300 	ldrd	r2, r3, [r8]
 800615e:	4650      	mov	r0, sl
 8006160:	4659      	mov	r1, fp
 8006162:	f7fa fb73 	bl	800084c <__aeabi_ddiv>
 8006166:	e783      	b.n	8006070 <_strtod_l+0x3d0>
 8006168:	4b32      	ldr	r3, [pc, #200]	@ (8006234 <_strtod_l+0x594>)
 800616a:	9308      	str	r3, [sp, #32]
 800616c:	2300      	movs	r3, #0
 800616e:	1124      	asrs	r4, r4, #4
 8006170:	4650      	mov	r0, sl
 8006172:	4659      	mov	r1, fp
 8006174:	461e      	mov	r6, r3
 8006176:	2c01      	cmp	r4, #1
 8006178:	dc21      	bgt.n	80061be <_strtod_l+0x51e>
 800617a:	b10b      	cbz	r3, 8006180 <_strtod_l+0x4e0>
 800617c:	4682      	mov	sl, r0
 800617e:	468b      	mov	fp, r1
 8006180:	492c      	ldr	r1, [pc, #176]	@ (8006234 <_strtod_l+0x594>)
 8006182:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8006186:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800618a:	4652      	mov	r2, sl
 800618c:	465b      	mov	r3, fp
 800618e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006192:	f7fa fa31 	bl	80005f8 <__aeabi_dmul>
 8006196:	4b28      	ldr	r3, [pc, #160]	@ (8006238 <_strtod_l+0x598>)
 8006198:	460a      	mov	r2, r1
 800619a:	400b      	ands	r3, r1
 800619c:	4927      	ldr	r1, [pc, #156]	@ (800623c <_strtod_l+0x59c>)
 800619e:	428b      	cmp	r3, r1
 80061a0:	4682      	mov	sl, r0
 80061a2:	d898      	bhi.n	80060d6 <_strtod_l+0x436>
 80061a4:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 80061a8:	428b      	cmp	r3, r1
 80061aa:	bf86      	itte	hi
 80061ac:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8006240 <_strtod_l+0x5a0>
 80061b0:	f04f 3aff 	movhi.w	sl, #4294967295
 80061b4:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 80061b8:	2300      	movs	r3, #0
 80061ba:	9308      	str	r3, [sp, #32]
 80061bc:	e07a      	b.n	80062b4 <_strtod_l+0x614>
 80061be:	07e2      	lsls	r2, r4, #31
 80061c0:	d505      	bpl.n	80061ce <_strtod_l+0x52e>
 80061c2:	9b08      	ldr	r3, [sp, #32]
 80061c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061c8:	f7fa fa16 	bl	80005f8 <__aeabi_dmul>
 80061cc:	2301      	movs	r3, #1
 80061ce:	9a08      	ldr	r2, [sp, #32]
 80061d0:	3208      	adds	r2, #8
 80061d2:	3601      	adds	r6, #1
 80061d4:	1064      	asrs	r4, r4, #1
 80061d6:	9208      	str	r2, [sp, #32]
 80061d8:	e7cd      	b.n	8006176 <_strtod_l+0x4d6>
 80061da:	d0ed      	beq.n	80061b8 <_strtod_l+0x518>
 80061dc:	4264      	negs	r4, r4
 80061de:	f014 020f 	ands.w	r2, r4, #15
 80061e2:	d00a      	beq.n	80061fa <_strtod_l+0x55a>
 80061e4:	4b12      	ldr	r3, [pc, #72]	@ (8006230 <_strtod_l+0x590>)
 80061e6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80061ea:	4650      	mov	r0, sl
 80061ec:	4659      	mov	r1, fp
 80061ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061f2:	f7fa fb2b 	bl	800084c <__aeabi_ddiv>
 80061f6:	4682      	mov	sl, r0
 80061f8:	468b      	mov	fp, r1
 80061fa:	1124      	asrs	r4, r4, #4
 80061fc:	d0dc      	beq.n	80061b8 <_strtod_l+0x518>
 80061fe:	2c1f      	cmp	r4, #31
 8006200:	dd20      	ble.n	8006244 <_strtod_l+0x5a4>
 8006202:	2400      	movs	r4, #0
 8006204:	46a0      	mov	r8, r4
 8006206:	940a      	str	r4, [sp, #40]	@ 0x28
 8006208:	46a1      	mov	r9, r4
 800620a:	9a05      	ldr	r2, [sp, #20]
 800620c:	2322      	movs	r3, #34	@ 0x22
 800620e:	f04f 0a00 	mov.w	sl, #0
 8006212:	f04f 0b00 	mov.w	fp, #0
 8006216:	6013      	str	r3, [r2, #0]
 8006218:	e768      	b.n	80060ec <_strtod_l+0x44c>
 800621a:	bf00      	nop
 800621c:	0800a7c6 	.word	0x0800a7c6
 8006220:	0800a668 	.word	0x0800a668
 8006224:	0800a7be 	.word	0x0800a7be
 8006228:	0800a7fd 	.word	0x0800a7fd
 800622c:	0800a5ae 	.word	0x0800a5ae
 8006230:	0800a978 	.word	0x0800a978
 8006234:	0800a950 	.word	0x0800a950
 8006238:	7ff00000 	.word	0x7ff00000
 800623c:	7ca00000 	.word	0x7ca00000
 8006240:	7fefffff 	.word	0x7fefffff
 8006244:	f014 0310 	ands.w	r3, r4, #16
 8006248:	bf18      	it	ne
 800624a:	236a      	movne	r3, #106	@ 0x6a
 800624c:	4ea9      	ldr	r6, [pc, #676]	@ (80064f4 <_strtod_l+0x854>)
 800624e:	9308      	str	r3, [sp, #32]
 8006250:	4650      	mov	r0, sl
 8006252:	4659      	mov	r1, fp
 8006254:	2300      	movs	r3, #0
 8006256:	07e2      	lsls	r2, r4, #31
 8006258:	d504      	bpl.n	8006264 <_strtod_l+0x5c4>
 800625a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800625e:	f7fa f9cb 	bl	80005f8 <__aeabi_dmul>
 8006262:	2301      	movs	r3, #1
 8006264:	1064      	asrs	r4, r4, #1
 8006266:	f106 0608 	add.w	r6, r6, #8
 800626a:	d1f4      	bne.n	8006256 <_strtod_l+0x5b6>
 800626c:	b10b      	cbz	r3, 8006272 <_strtod_l+0x5d2>
 800626e:	4682      	mov	sl, r0
 8006270:	468b      	mov	fp, r1
 8006272:	9b08      	ldr	r3, [sp, #32]
 8006274:	b1b3      	cbz	r3, 80062a4 <_strtod_l+0x604>
 8006276:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800627a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800627e:	2b00      	cmp	r3, #0
 8006280:	4659      	mov	r1, fp
 8006282:	dd0f      	ble.n	80062a4 <_strtod_l+0x604>
 8006284:	2b1f      	cmp	r3, #31
 8006286:	dd55      	ble.n	8006334 <_strtod_l+0x694>
 8006288:	2b34      	cmp	r3, #52	@ 0x34
 800628a:	bfde      	ittt	le
 800628c:	f04f 33ff 	movle.w	r3, #4294967295
 8006290:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8006294:	4093      	lslle	r3, r2
 8006296:	f04f 0a00 	mov.w	sl, #0
 800629a:	bfcc      	ite	gt
 800629c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 80062a0:	ea03 0b01 	andle.w	fp, r3, r1
 80062a4:	2200      	movs	r2, #0
 80062a6:	2300      	movs	r3, #0
 80062a8:	4650      	mov	r0, sl
 80062aa:	4659      	mov	r1, fp
 80062ac:	f7fa fc0c 	bl	8000ac8 <__aeabi_dcmpeq>
 80062b0:	2800      	cmp	r0, #0
 80062b2:	d1a6      	bne.n	8006202 <_strtod_l+0x562>
 80062b4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80062b6:	9300      	str	r3, [sp, #0]
 80062b8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80062ba:	9805      	ldr	r0, [sp, #20]
 80062bc:	462b      	mov	r3, r5
 80062be:	463a      	mov	r2, r7
 80062c0:	f002 feb0 	bl	8009024 <__s2b>
 80062c4:	900a      	str	r0, [sp, #40]	@ 0x28
 80062c6:	2800      	cmp	r0, #0
 80062c8:	f43f af05 	beq.w	80060d6 <_strtod_l+0x436>
 80062cc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80062ce:	2a00      	cmp	r2, #0
 80062d0:	eba9 0308 	sub.w	r3, r9, r8
 80062d4:	bfa8      	it	ge
 80062d6:	2300      	movge	r3, #0
 80062d8:	9312      	str	r3, [sp, #72]	@ 0x48
 80062da:	2400      	movs	r4, #0
 80062dc:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80062e0:	9316      	str	r3, [sp, #88]	@ 0x58
 80062e2:	46a0      	mov	r8, r4
 80062e4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80062e6:	9805      	ldr	r0, [sp, #20]
 80062e8:	6859      	ldr	r1, [r3, #4]
 80062ea:	f002 fdf3 	bl	8008ed4 <_Balloc>
 80062ee:	4681      	mov	r9, r0
 80062f0:	2800      	cmp	r0, #0
 80062f2:	f43f aef4 	beq.w	80060de <_strtod_l+0x43e>
 80062f6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80062f8:	691a      	ldr	r2, [r3, #16]
 80062fa:	3202      	adds	r2, #2
 80062fc:	f103 010c 	add.w	r1, r3, #12
 8006300:	0092      	lsls	r2, r2, #2
 8006302:	300c      	adds	r0, #12
 8006304:	f001 fbe4 	bl	8007ad0 <memcpy>
 8006308:	ec4b ab10 	vmov	d0, sl, fp
 800630c:	9805      	ldr	r0, [sp, #20]
 800630e:	aa1c      	add	r2, sp, #112	@ 0x70
 8006310:	a91b      	add	r1, sp, #108	@ 0x6c
 8006312:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8006316:	f003 f9c1 	bl	800969c <__d2b>
 800631a:	901a      	str	r0, [sp, #104]	@ 0x68
 800631c:	2800      	cmp	r0, #0
 800631e:	f43f aede 	beq.w	80060de <_strtod_l+0x43e>
 8006322:	9805      	ldr	r0, [sp, #20]
 8006324:	2101      	movs	r1, #1
 8006326:	f002 ff13 	bl	8009150 <__i2b>
 800632a:	4680      	mov	r8, r0
 800632c:	b948      	cbnz	r0, 8006342 <_strtod_l+0x6a2>
 800632e:	f04f 0800 	mov.w	r8, #0
 8006332:	e6d4      	b.n	80060de <_strtod_l+0x43e>
 8006334:	f04f 32ff 	mov.w	r2, #4294967295
 8006338:	fa02 f303 	lsl.w	r3, r2, r3
 800633c:	ea03 0a0a 	and.w	sl, r3, sl
 8006340:	e7b0      	b.n	80062a4 <_strtod_l+0x604>
 8006342:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8006344:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8006346:	2d00      	cmp	r5, #0
 8006348:	bfab      	itete	ge
 800634a:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800634c:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800634e:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8006350:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8006352:	bfac      	ite	ge
 8006354:	18ef      	addge	r7, r5, r3
 8006356:	1b5e      	sublt	r6, r3, r5
 8006358:	9b08      	ldr	r3, [sp, #32]
 800635a:	1aed      	subs	r5, r5, r3
 800635c:	4415      	add	r5, r2
 800635e:	4b66      	ldr	r3, [pc, #408]	@ (80064f8 <_strtod_l+0x858>)
 8006360:	3d01      	subs	r5, #1
 8006362:	429d      	cmp	r5, r3
 8006364:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8006368:	da50      	bge.n	800640c <_strtod_l+0x76c>
 800636a:	1b5b      	subs	r3, r3, r5
 800636c:	2b1f      	cmp	r3, #31
 800636e:	eba2 0203 	sub.w	r2, r2, r3
 8006372:	f04f 0101 	mov.w	r1, #1
 8006376:	dc3d      	bgt.n	80063f4 <_strtod_l+0x754>
 8006378:	fa01 f303 	lsl.w	r3, r1, r3
 800637c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800637e:	2300      	movs	r3, #0
 8006380:	9310      	str	r3, [sp, #64]	@ 0x40
 8006382:	18bd      	adds	r5, r7, r2
 8006384:	9b08      	ldr	r3, [sp, #32]
 8006386:	42af      	cmp	r7, r5
 8006388:	4416      	add	r6, r2
 800638a:	441e      	add	r6, r3
 800638c:	463b      	mov	r3, r7
 800638e:	bfa8      	it	ge
 8006390:	462b      	movge	r3, r5
 8006392:	42b3      	cmp	r3, r6
 8006394:	bfa8      	it	ge
 8006396:	4633      	movge	r3, r6
 8006398:	2b00      	cmp	r3, #0
 800639a:	bfc2      	ittt	gt
 800639c:	1aed      	subgt	r5, r5, r3
 800639e:	1af6      	subgt	r6, r6, r3
 80063a0:	1aff      	subgt	r7, r7, r3
 80063a2:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	dd16      	ble.n	80063d6 <_strtod_l+0x736>
 80063a8:	4641      	mov	r1, r8
 80063aa:	9805      	ldr	r0, [sp, #20]
 80063ac:	461a      	mov	r2, r3
 80063ae:	f002 ff8f 	bl	80092d0 <__pow5mult>
 80063b2:	4680      	mov	r8, r0
 80063b4:	2800      	cmp	r0, #0
 80063b6:	d0ba      	beq.n	800632e <_strtod_l+0x68e>
 80063b8:	4601      	mov	r1, r0
 80063ba:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80063bc:	9805      	ldr	r0, [sp, #20]
 80063be:	f002 fedd 	bl	800917c <__multiply>
 80063c2:	900e      	str	r0, [sp, #56]	@ 0x38
 80063c4:	2800      	cmp	r0, #0
 80063c6:	f43f ae8a 	beq.w	80060de <_strtod_l+0x43e>
 80063ca:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80063cc:	9805      	ldr	r0, [sp, #20]
 80063ce:	f002 fdc1 	bl	8008f54 <_Bfree>
 80063d2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80063d4:	931a      	str	r3, [sp, #104]	@ 0x68
 80063d6:	2d00      	cmp	r5, #0
 80063d8:	dc1d      	bgt.n	8006416 <_strtod_l+0x776>
 80063da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80063dc:	2b00      	cmp	r3, #0
 80063de:	dd23      	ble.n	8006428 <_strtod_l+0x788>
 80063e0:	4649      	mov	r1, r9
 80063e2:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80063e4:	9805      	ldr	r0, [sp, #20]
 80063e6:	f002 ff73 	bl	80092d0 <__pow5mult>
 80063ea:	4681      	mov	r9, r0
 80063ec:	b9e0      	cbnz	r0, 8006428 <_strtod_l+0x788>
 80063ee:	f04f 0900 	mov.w	r9, #0
 80063f2:	e674      	b.n	80060de <_strtod_l+0x43e>
 80063f4:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 80063f8:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 80063fc:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8006400:	35e2      	adds	r5, #226	@ 0xe2
 8006402:	fa01 f305 	lsl.w	r3, r1, r5
 8006406:	9310      	str	r3, [sp, #64]	@ 0x40
 8006408:	9113      	str	r1, [sp, #76]	@ 0x4c
 800640a:	e7ba      	b.n	8006382 <_strtod_l+0x6e2>
 800640c:	2300      	movs	r3, #0
 800640e:	9310      	str	r3, [sp, #64]	@ 0x40
 8006410:	2301      	movs	r3, #1
 8006412:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006414:	e7b5      	b.n	8006382 <_strtod_l+0x6e2>
 8006416:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006418:	9805      	ldr	r0, [sp, #20]
 800641a:	462a      	mov	r2, r5
 800641c:	f002 ffb2 	bl	8009384 <__lshift>
 8006420:	901a      	str	r0, [sp, #104]	@ 0x68
 8006422:	2800      	cmp	r0, #0
 8006424:	d1d9      	bne.n	80063da <_strtod_l+0x73a>
 8006426:	e65a      	b.n	80060de <_strtod_l+0x43e>
 8006428:	2e00      	cmp	r6, #0
 800642a:	dd07      	ble.n	800643c <_strtod_l+0x79c>
 800642c:	4649      	mov	r1, r9
 800642e:	9805      	ldr	r0, [sp, #20]
 8006430:	4632      	mov	r2, r6
 8006432:	f002 ffa7 	bl	8009384 <__lshift>
 8006436:	4681      	mov	r9, r0
 8006438:	2800      	cmp	r0, #0
 800643a:	d0d8      	beq.n	80063ee <_strtod_l+0x74e>
 800643c:	2f00      	cmp	r7, #0
 800643e:	dd08      	ble.n	8006452 <_strtod_l+0x7b2>
 8006440:	4641      	mov	r1, r8
 8006442:	9805      	ldr	r0, [sp, #20]
 8006444:	463a      	mov	r2, r7
 8006446:	f002 ff9d 	bl	8009384 <__lshift>
 800644a:	4680      	mov	r8, r0
 800644c:	2800      	cmp	r0, #0
 800644e:	f43f ae46 	beq.w	80060de <_strtod_l+0x43e>
 8006452:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006454:	9805      	ldr	r0, [sp, #20]
 8006456:	464a      	mov	r2, r9
 8006458:	f003 f81c 	bl	8009494 <__mdiff>
 800645c:	4604      	mov	r4, r0
 800645e:	2800      	cmp	r0, #0
 8006460:	f43f ae3d 	beq.w	80060de <_strtod_l+0x43e>
 8006464:	68c3      	ldr	r3, [r0, #12]
 8006466:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006468:	2300      	movs	r3, #0
 800646a:	60c3      	str	r3, [r0, #12]
 800646c:	4641      	mov	r1, r8
 800646e:	f002 fff5 	bl	800945c <__mcmp>
 8006472:	2800      	cmp	r0, #0
 8006474:	da46      	bge.n	8006504 <_strtod_l+0x864>
 8006476:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006478:	ea53 030a 	orrs.w	r3, r3, sl
 800647c:	d16c      	bne.n	8006558 <_strtod_l+0x8b8>
 800647e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006482:	2b00      	cmp	r3, #0
 8006484:	d168      	bne.n	8006558 <_strtod_l+0x8b8>
 8006486:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800648a:	0d1b      	lsrs	r3, r3, #20
 800648c:	051b      	lsls	r3, r3, #20
 800648e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8006492:	d961      	bls.n	8006558 <_strtod_l+0x8b8>
 8006494:	6963      	ldr	r3, [r4, #20]
 8006496:	b913      	cbnz	r3, 800649e <_strtod_l+0x7fe>
 8006498:	6923      	ldr	r3, [r4, #16]
 800649a:	2b01      	cmp	r3, #1
 800649c:	dd5c      	ble.n	8006558 <_strtod_l+0x8b8>
 800649e:	4621      	mov	r1, r4
 80064a0:	2201      	movs	r2, #1
 80064a2:	9805      	ldr	r0, [sp, #20]
 80064a4:	f002 ff6e 	bl	8009384 <__lshift>
 80064a8:	4641      	mov	r1, r8
 80064aa:	4604      	mov	r4, r0
 80064ac:	f002 ffd6 	bl	800945c <__mcmp>
 80064b0:	2800      	cmp	r0, #0
 80064b2:	dd51      	ble.n	8006558 <_strtod_l+0x8b8>
 80064b4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80064b8:	9a08      	ldr	r2, [sp, #32]
 80064ba:	0d1b      	lsrs	r3, r3, #20
 80064bc:	051b      	lsls	r3, r3, #20
 80064be:	2a00      	cmp	r2, #0
 80064c0:	d06b      	beq.n	800659a <_strtod_l+0x8fa>
 80064c2:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80064c6:	d868      	bhi.n	800659a <_strtod_l+0x8fa>
 80064c8:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 80064cc:	f67f ae9d 	bls.w	800620a <_strtod_l+0x56a>
 80064d0:	4b0a      	ldr	r3, [pc, #40]	@ (80064fc <_strtod_l+0x85c>)
 80064d2:	4650      	mov	r0, sl
 80064d4:	4659      	mov	r1, fp
 80064d6:	2200      	movs	r2, #0
 80064d8:	f7fa f88e 	bl	80005f8 <__aeabi_dmul>
 80064dc:	4b08      	ldr	r3, [pc, #32]	@ (8006500 <_strtod_l+0x860>)
 80064de:	400b      	ands	r3, r1
 80064e0:	4682      	mov	sl, r0
 80064e2:	468b      	mov	fp, r1
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	f47f ae05 	bne.w	80060f4 <_strtod_l+0x454>
 80064ea:	9a05      	ldr	r2, [sp, #20]
 80064ec:	2322      	movs	r3, #34	@ 0x22
 80064ee:	6013      	str	r3, [r2, #0]
 80064f0:	e600      	b.n	80060f4 <_strtod_l+0x454>
 80064f2:	bf00      	nop
 80064f4:	0800a690 	.word	0x0800a690
 80064f8:	fffffc02 	.word	0xfffffc02
 80064fc:	39500000 	.word	0x39500000
 8006500:	7ff00000 	.word	0x7ff00000
 8006504:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8006508:	d165      	bne.n	80065d6 <_strtod_l+0x936>
 800650a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800650c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006510:	b35a      	cbz	r2, 800656a <_strtod_l+0x8ca>
 8006512:	4a9f      	ldr	r2, [pc, #636]	@ (8006790 <_strtod_l+0xaf0>)
 8006514:	4293      	cmp	r3, r2
 8006516:	d12b      	bne.n	8006570 <_strtod_l+0x8d0>
 8006518:	9b08      	ldr	r3, [sp, #32]
 800651a:	4651      	mov	r1, sl
 800651c:	b303      	cbz	r3, 8006560 <_strtod_l+0x8c0>
 800651e:	4b9d      	ldr	r3, [pc, #628]	@ (8006794 <_strtod_l+0xaf4>)
 8006520:	465a      	mov	r2, fp
 8006522:	4013      	ands	r3, r2
 8006524:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8006528:	f04f 32ff 	mov.w	r2, #4294967295
 800652c:	d81b      	bhi.n	8006566 <_strtod_l+0x8c6>
 800652e:	0d1b      	lsrs	r3, r3, #20
 8006530:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8006534:	fa02 f303 	lsl.w	r3, r2, r3
 8006538:	4299      	cmp	r1, r3
 800653a:	d119      	bne.n	8006570 <_strtod_l+0x8d0>
 800653c:	4b96      	ldr	r3, [pc, #600]	@ (8006798 <_strtod_l+0xaf8>)
 800653e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006540:	429a      	cmp	r2, r3
 8006542:	d102      	bne.n	800654a <_strtod_l+0x8aa>
 8006544:	3101      	adds	r1, #1
 8006546:	f43f adca 	beq.w	80060de <_strtod_l+0x43e>
 800654a:	4b92      	ldr	r3, [pc, #584]	@ (8006794 <_strtod_l+0xaf4>)
 800654c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800654e:	401a      	ands	r2, r3
 8006550:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8006554:	f04f 0a00 	mov.w	sl, #0
 8006558:	9b08      	ldr	r3, [sp, #32]
 800655a:	2b00      	cmp	r3, #0
 800655c:	d1b8      	bne.n	80064d0 <_strtod_l+0x830>
 800655e:	e5c9      	b.n	80060f4 <_strtod_l+0x454>
 8006560:	f04f 33ff 	mov.w	r3, #4294967295
 8006564:	e7e8      	b.n	8006538 <_strtod_l+0x898>
 8006566:	4613      	mov	r3, r2
 8006568:	e7e6      	b.n	8006538 <_strtod_l+0x898>
 800656a:	ea53 030a 	orrs.w	r3, r3, sl
 800656e:	d0a1      	beq.n	80064b4 <_strtod_l+0x814>
 8006570:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006572:	b1db      	cbz	r3, 80065ac <_strtod_l+0x90c>
 8006574:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006576:	4213      	tst	r3, r2
 8006578:	d0ee      	beq.n	8006558 <_strtod_l+0x8b8>
 800657a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800657c:	9a08      	ldr	r2, [sp, #32]
 800657e:	4650      	mov	r0, sl
 8006580:	4659      	mov	r1, fp
 8006582:	b1bb      	cbz	r3, 80065b4 <_strtod_l+0x914>
 8006584:	f7ff fb6c 	bl	8005c60 <sulp>
 8006588:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800658c:	ec53 2b10 	vmov	r2, r3, d0
 8006590:	f7f9 fe7c 	bl	800028c <__adddf3>
 8006594:	4682      	mov	sl, r0
 8006596:	468b      	mov	fp, r1
 8006598:	e7de      	b.n	8006558 <_strtod_l+0x8b8>
 800659a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800659e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80065a2:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80065a6:	f04f 3aff 	mov.w	sl, #4294967295
 80065aa:	e7d5      	b.n	8006558 <_strtod_l+0x8b8>
 80065ac:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80065ae:	ea13 0f0a 	tst.w	r3, sl
 80065b2:	e7e1      	b.n	8006578 <_strtod_l+0x8d8>
 80065b4:	f7ff fb54 	bl	8005c60 <sulp>
 80065b8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80065bc:	ec53 2b10 	vmov	r2, r3, d0
 80065c0:	f7f9 fe62 	bl	8000288 <__aeabi_dsub>
 80065c4:	2200      	movs	r2, #0
 80065c6:	2300      	movs	r3, #0
 80065c8:	4682      	mov	sl, r0
 80065ca:	468b      	mov	fp, r1
 80065cc:	f7fa fa7c 	bl	8000ac8 <__aeabi_dcmpeq>
 80065d0:	2800      	cmp	r0, #0
 80065d2:	d0c1      	beq.n	8006558 <_strtod_l+0x8b8>
 80065d4:	e619      	b.n	800620a <_strtod_l+0x56a>
 80065d6:	4641      	mov	r1, r8
 80065d8:	4620      	mov	r0, r4
 80065da:	f003 f8b7 	bl	800974c <__ratio>
 80065de:	ec57 6b10 	vmov	r6, r7, d0
 80065e2:	2200      	movs	r2, #0
 80065e4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80065e8:	4630      	mov	r0, r6
 80065ea:	4639      	mov	r1, r7
 80065ec:	f7fa fa80 	bl	8000af0 <__aeabi_dcmple>
 80065f0:	2800      	cmp	r0, #0
 80065f2:	d06f      	beq.n	80066d4 <_strtod_l+0xa34>
 80065f4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d17a      	bne.n	80066f0 <_strtod_l+0xa50>
 80065fa:	f1ba 0f00 	cmp.w	sl, #0
 80065fe:	d158      	bne.n	80066b2 <_strtod_l+0xa12>
 8006600:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006602:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006606:	2b00      	cmp	r3, #0
 8006608:	d15a      	bne.n	80066c0 <_strtod_l+0xa20>
 800660a:	4b64      	ldr	r3, [pc, #400]	@ (800679c <_strtod_l+0xafc>)
 800660c:	2200      	movs	r2, #0
 800660e:	4630      	mov	r0, r6
 8006610:	4639      	mov	r1, r7
 8006612:	f7fa fa63 	bl	8000adc <__aeabi_dcmplt>
 8006616:	2800      	cmp	r0, #0
 8006618:	d159      	bne.n	80066ce <_strtod_l+0xa2e>
 800661a:	4630      	mov	r0, r6
 800661c:	4639      	mov	r1, r7
 800661e:	4b60      	ldr	r3, [pc, #384]	@ (80067a0 <_strtod_l+0xb00>)
 8006620:	2200      	movs	r2, #0
 8006622:	f7f9 ffe9 	bl	80005f8 <__aeabi_dmul>
 8006626:	4606      	mov	r6, r0
 8006628:	460f      	mov	r7, r1
 800662a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800662e:	9606      	str	r6, [sp, #24]
 8006630:	9307      	str	r3, [sp, #28]
 8006632:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006636:	4d57      	ldr	r5, [pc, #348]	@ (8006794 <_strtod_l+0xaf4>)
 8006638:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800663c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800663e:	401d      	ands	r5, r3
 8006640:	4b58      	ldr	r3, [pc, #352]	@ (80067a4 <_strtod_l+0xb04>)
 8006642:	429d      	cmp	r5, r3
 8006644:	f040 80b2 	bne.w	80067ac <_strtod_l+0xb0c>
 8006648:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800664a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800664e:	ec4b ab10 	vmov	d0, sl, fp
 8006652:	f002 ffb3 	bl	80095bc <__ulp>
 8006656:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800665a:	ec51 0b10 	vmov	r0, r1, d0
 800665e:	f7f9 ffcb 	bl	80005f8 <__aeabi_dmul>
 8006662:	4652      	mov	r2, sl
 8006664:	465b      	mov	r3, fp
 8006666:	f7f9 fe11 	bl	800028c <__adddf3>
 800666a:	460b      	mov	r3, r1
 800666c:	4949      	ldr	r1, [pc, #292]	@ (8006794 <_strtod_l+0xaf4>)
 800666e:	4a4e      	ldr	r2, [pc, #312]	@ (80067a8 <_strtod_l+0xb08>)
 8006670:	4019      	ands	r1, r3
 8006672:	4291      	cmp	r1, r2
 8006674:	4682      	mov	sl, r0
 8006676:	d942      	bls.n	80066fe <_strtod_l+0xa5e>
 8006678:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800667a:	4b47      	ldr	r3, [pc, #284]	@ (8006798 <_strtod_l+0xaf8>)
 800667c:	429a      	cmp	r2, r3
 800667e:	d103      	bne.n	8006688 <_strtod_l+0x9e8>
 8006680:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006682:	3301      	adds	r3, #1
 8006684:	f43f ad2b 	beq.w	80060de <_strtod_l+0x43e>
 8006688:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8006798 <_strtod_l+0xaf8>
 800668c:	f04f 3aff 	mov.w	sl, #4294967295
 8006690:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006692:	9805      	ldr	r0, [sp, #20]
 8006694:	f002 fc5e 	bl	8008f54 <_Bfree>
 8006698:	9805      	ldr	r0, [sp, #20]
 800669a:	4649      	mov	r1, r9
 800669c:	f002 fc5a 	bl	8008f54 <_Bfree>
 80066a0:	9805      	ldr	r0, [sp, #20]
 80066a2:	4641      	mov	r1, r8
 80066a4:	f002 fc56 	bl	8008f54 <_Bfree>
 80066a8:	9805      	ldr	r0, [sp, #20]
 80066aa:	4621      	mov	r1, r4
 80066ac:	f002 fc52 	bl	8008f54 <_Bfree>
 80066b0:	e618      	b.n	80062e4 <_strtod_l+0x644>
 80066b2:	f1ba 0f01 	cmp.w	sl, #1
 80066b6:	d103      	bne.n	80066c0 <_strtod_l+0xa20>
 80066b8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	f43f ada5 	beq.w	800620a <_strtod_l+0x56a>
 80066c0:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8006770 <_strtod_l+0xad0>
 80066c4:	4f35      	ldr	r7, [pc, #212]	@ (800679c <_strtod_l+0xafc>)
 80066c6:	ed8d 7b06 	vstr	d7, [sp, #24]
 80066ca:	2600      	movs	r6, #0
 80066cc:	e7b1      	b.n	8006632 <_strtod_l+0x992>
 80066ce:	4f34      	ldr	r7, [pc, #208]	@ (80067a0 <_strtod_l+0xb00>)
 80066d0:	2600      	movs	r6, #0
 80066d2:	e7aa      	b.n	800662a <_strtod_l+0x98a>
 80066d4:	4b32      	ldr	r3, [pc, #200]	@ (80067a0 <_strtod_l+0xb00>)
 80066d6:	4630      	mov	r0, r6
 80066d8:	4639      	mov	r1, r7
 80066da:	2200      	movs	r2, #0
 80066dc:	f7f9 ff8c 	bl	80005f8 <__aeabi_dmul>
 80066e0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80066e2:	4606      	mov	r6, r0
 80066e4:	460f      	mov	r7, r1
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d09f      	beq.n	800662a <_strtod_l+0x98a>
 80066ea:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80066ee:	e7a0      	b.n	8006632 <_strtod_l+0x992>
 80066f0:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8006778 <_strtod_l+0xad8>
 80066f4:	ed8d 7b06 	vstr	d7, [sp, #24]
 80066f8:	ec57 6b17 	vmov	r6, r7, d7
 80066fc:	e799      	b.n	8006632 <_strtod_l+0x992>
 80066fe:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8006702:	9b08      	ldr	r3, [sp, #32]
 8006704:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8006708:	2b00      	cmp	r3, #0
 800670a:	d1c1      	bne.n	8006690 <_strtod_l+0x9f0>
 800670c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8006710:	0d1b      	lsrs	r3, r3, #20
 8006712:	051b      	lsls	r3, r3, #20
 8006714:	429d      	cmp	r5, r3
 8006716:	d1bb      	bne.n	8006690 <_strtod_l+0x9f0>
 8006718:	4630      	mov	r0, r6
 800671a:	4639      	mov	r1, r7
 800671c:	f7fa fab4 	bl	8000c88 <__aeabi_d2lz>
 8006720:	f7f9 ff3c 	bl	800059c <__aeabi_l2d>
 8006724:	4602      	mov	r2, r0
 8006726:	460b      	mov	r3, r1
 8006728:	4630      	mov	r0, r6
 800672a:	4639      	mov	r1, r7
 800672c:	f7f9 fdac 	bl	8000288 <__aeabi_dsub>
 8006730:	460b      	mov	r3, r1
 8006732:	4602      	mov	r2, r0
 8006734:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8006738:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800673c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800673e:	ea46 060a 	orr.w	r6, r6, sl
 8006742:	431e      	orrs	r6, r3
 8006744:	d06f      	beq.n	8006826 <_strtod_l+0xb86>
 8006746:	a30e      	add	r3, pc, #56	@ (adr r3, 8006780 <_strtod_l+0xae0>)
 8006748:	e9d3 2300 	ldrd	r2, r3, [r3]
 800674c:	f7fa f9c6 	bl	8000adc <__aeabi_dcmplt>
 8006750:	2800      	cmp	r0, #0
 8006752:	f47f accf 	bne.w	80060f4 <_strtod_l+0x454>
 8006756:	a30c      	add	r3, pc, #48	@ (adr r3, 8006788 <_strtod_l+0xae8>)
 8006758:	e9d3 2300 	ldrd	r2, r3, [r3]
 800675c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006760:	f7fa f9da 	bl	8000b18 <__aeabi_dcmpgt>
 8006764:	2800      	cmp	r0, #0
 8006766:	d093      	beq.n	8006690 <_strtod_l+0x9f0>
 8006768:	e4c4      	b.n	80060f4 <_strtod_l+0x454>
 800676a:	bf00      	nop
 800676c:	f3af 8000 	nop.w
 8006770:	00000000 	.word	0x00000000
 8006774:	bff00000 	.word	0xbff00000
 8006778:	00000000 	.word	0x00000000
 800677c:	3ff00000 	.word	0x3ff00000
 8006780:	94a03595 	.word	0x94a03595
 8006784:	3fdfffff 	.word	0x3fdfffff
 8006788:	35afe535 	.word	0x35afe535
 800678c:	3fe00000 	.word	0x3fe00000
 8006790:	000fffff 	.word	0x000fffff
 8006794:	7ff00000 	.word	0x7ff00000
 8006798:	7fefffff 	.word	0x7fefffff
 800679c:	3ff00000 	.word	0x3ff00000
 80067a0:	3fe00000 	.word	0x3fe00000
 80067a4:	7fe00000 	.word	0x7fe00000
 80067a8:	7c9fffff 	.word	0x7c9fffff
 80067ac:	9b08      	ldr	r3, [sp, #32]
 80067ae:	b323      	cbz	r3, 80067fa <_strtod_l+0xb5a>
 80067b0:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 80067b4:	d821      	bhi.n	80067fa <_strtod_l+0xb5a>
 80067b6:	a328      	add	r3, pc, #160	@ (adr r3, 8006858 <_strtod_l+0xbb8>)
 80067b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067bc:	4630      	mov	r0, r6
 80067be:	4639      	mov	r1, r7
 80067c0:	f7fa f996 	bl	8000af0 <__aeabi_dcmple>
 80067c4:	b1a0      	cbz	r0, 80067f0 <_strtod_l+0xb50>
 80067c6:	4639      	mov	r1, r7
 80067c8:	4630      	mov	r0, r6
 80067ca:	f7fa f9ed 	bl	8000ba8 <__aeabi_d2uiz>
 80067ce:	2801      	cmp	r0, #1
 80067d0:	bf38      	it	cc
 80067d2:	2001      	movcc	r0, #1
 80067d4:	f7f9 fe96 	bl	8000504 <__aeabi_ui2d>
 80067d8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80067da:	4606      	mov	r6, r0
 80067dc:	460f      	mov	r7, r1
 80067de:	b9fb      	cbnz	r3, 8006820 <_strtod_l+0xb80>
 80067e0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80067e4:	9014      	str	r0, [sp, #80]	@ 0x50
 80067e6:	9315      	str	r3, [sp, #84]	@ 0x54
 80067e8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 80067ec:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80067f0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80067f2:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 80067f6:	1b5b      	subs	r3, r3, r5
 80067f8:	9311      	str	r3, [sp, #68]	@ 0x44
 80067fa:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80067fe:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8006802:	f002 fedb 	bl	80095bc <__ulp>
 8006806:	4650      	mov	r0, sl
 8006808:	ec53 2b10 	vmov	r2, r3, d0
 800680c:	4659      	mov	r1, fp
 800680e:	f7f9 fef3 	bl	80005f8 <__aeabi_dmul>
 8006812:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8006816:	f7f9 fd39 	bl	800028c <__adddf3>
 800681a:	4682      	mov	sl, r0
 800681c:	468b      	mov	fp, r1
 800681e:	e770      	b.n	8006702 <_strtod_l+0xa62>
 8006820:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8006824:	e7e0      	b.n	80067e8 <_strtod_l+0xb48>
 8006826:	a30e      	add	r3, pc, #56	@ (adr r3, 8006860 <_strtod_l+0xbc0>)
 8006828:	e9d3 2300 	ldrd	r2, r3, [r3]
 800682c:	f7fa f956 	bl	8000adc <__aeabi_dcmplt>
 8006830:	e798      	b.n	8006764 <_strtod_l+0xac4>
 8006832:	2300      	movs	r3, #0
 8006834:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006836:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8006838:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800683a:	6013      	str	r3, [r2, #0]
 800683c:	f7ff ba6d 	b.w	8005d1a <_strtod_l+0x7a>
 8006840:	2a65      	cmp	r2, #101	@ 0x65
 8006842:	f43f ab66 	beq.w	8005f12 <_strtod_l+0x272>
 8006846:	2a45      	cmp	r2, #69	@ 0x45
 8006848:	f43f ab63 	beq.w	8005f12 <_strtod_l+0x272>
 800684c:	2301      	movs	r3, #1
 800684e:	f7ff bb9e 	b.w	8005f8e <_strtod_l+0x2ee>
 8006852:	bf00      	nop
 8006854:	f3af 8000 	nop.w
 8006858:	ffc00000 	.word	0xffc00000
 800685c:	41dfffff 	.word	0x41dfffff
 8006860:	94a03595 	.word	0x94a03595
 8006864:	3fcfffff 	.word	0x3fcfffff

08006868 <_strtod_r>:
 8006868:	4b01      	ldr	r3, [pc, #4]	@ (8006870 <_strtod_r+0x8>)
 800686a:	f7ff ba19 	b.w	8005ca0 <_strtod_l>
 800686e:	bf00      	nop
 8006870:	2000001c 	.word	0x2000001c

08006874 <_strtol_l.constprop.0>:
 8006874:	2b24      	cmp	r3, #36	@ 0x24
 8006876:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800687a:	4686      	mov	lr, r0
 800687c:	4690      	mov	r8, r2
 800687e:	d801      	bhi.n	8006884 <_strtol_l.constprop.0+0x10>
 8006880:	2b01      	cmp	r3, #1
 8006882:	d106      	bne.n	8006892 <_strtol_l.constprop.0+0x1e>
 8006884:	f001 f8fa 	bl	8007a7c <__errno>
 8006888:	2316      	movs	r3, #22
 800688a:	6003      	str	r3, [r0, #0]
 800688c:	2000      	movs	r0, #0
 800688e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006892:	4834      	ldr	r0, [pc, #208]	@ (8006964 <_strtol_l.constprop.0+0xf0>)
 8006894:	460d      	mov	r5, r1
 8006896:	462a      	mov	r2, r5
 8006898:	f815 4b01 	ldrb.w	r4, [r5], #1
 800689c:	5d06      	ldrb	r6, [r0, r4]
 800689e:	f016 0608 	ands.w	r6, r6, #8
 80068a2:	d1f8      	bne.n	8006896 <_strtol_l.constprop.0+0x22>
 80068a4:	2c2d      	cmp	r4, #45	@ 0x2d
 80068a6:	d12d      	bne.n	8006904 <_strtol_l.constprop.0+0x90>
 80068a8:	782c      	ldrb	r4, [r5, #0]
 80068aa:	2601      	movs	r6, #1
 80068ac:	1c95      	adds	r5, r2, #2
 80068ae:	f033 0210 	bics.w	r2, r3, #16
 80068b2:	d109      	bne.n	80068c8 <_strtol_l.constprop.0+0x54>
 80068b4:	2c30      	cmp	r4, #48	@ 0x30
 80068b6:	d12a      	bne.n	800690e <_strtol_l.constprop.0+0x9a>
 80068b8:	782a      	ldrb	r2, [r5, #0]
 80068ba:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80068be:	2a58      	cmp	r2, #88	@ 0x58
 80068c0:	d125      	bne.n	800690e <_strtol_l.constprop.0+0x9a>
 80068c2:	786c      	ldrb	r4, [r5, #1]
 80068c4:	2310      	movs	r3, #16
 80068c6:	3502      	adds	r5, #2
 80068c8:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80068cc:	f10c 3cff 	add.w	ip, ip, #4294967295
 80068d0:	2200      	movs	r2, #0
 80068d2:	fbbc f9f3 	udiv	r9, ip, r3
 80068d6:	4610      	mov	r0, r2
 80068d8:	fb03 ca19 	mls	sl, r3, r9, ip
 80068dc:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80068e0:	2f09      	cmp	r7, #9
 80068e2:	d81b      	bhi.n	800691c <_strtol_l.constprop.0+0xa8>
 80068e4:	463c      	mov	r4, r7
 80068e6:	42a3      	cmp	r3, r4
 80068e8:	dd27      	ble.n	800693a <_strtol_l.constprop.0+0xc6>
 80068ea:	1c57      	adds	r7, r2, #1
 80068ec:	d007      	beq.n	80068fe <_strtol_l.constprop.0+0x8a>
 80068ee:	4581      	cmp	r9, r0
 80068f0:	d320      	bcc.n	8006934 <_strtol_l.constprop.0+0xc0>
 80068f2:	d101      	bne.n	80068f8 <_strtol_l.constprop.0+0x84>
 80068f4:	45a2      	cmp	sl, r4
 80068f6:	db1d      	blt.n	8006934 <_strtol_l.constprop.0+0xc0>
 80068f8:	fb00 4003 	mla	r0, r0, r3, r4
 80068fc:	2201      	movs	r2, #1
 80068fe:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006902:	e7eb      	b.n	80068dc <_strtol_l.constprop.0+0x68>
 8006904:	2c2b      	cmp	r4, #43	@ 0x2b
 8006906:	bf04      	itt	eq
 8006908:	782c      	ldrbeq	r4, [r5, #0]
 800690a:	1c95      	addeq	r5, r2, #2
 800690c:	e7cf      	b.n	80068ae <_strtol_l.constprop.0+0x3a>
 800690e:	2b00      	cmp	r3, #0
 8006910:	d1da      	bne.n	80068c8 <_strtol_l.constprop.0+0x54>
 8006912:	2c30      	cmp	r4, #48	@ 0x30
 8006914:	bf0c      	ite	eq
 8006916:	2308      	moveq	r3, #8
 8006918:	230a      	movne	r3, #10
 800691a:	e7d5      	b.n	80068c8 <_strtol_l.constprop.0+0x54>
 800691c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8006920:	2f19      	cmp	r7, #25
 8006922:	d801      	bhi.n	8006928 <_strtol_l.constprop.0+0xb4>
 8006924:	3c37      	subs	r4, #55	@ 0x37
 8006926:	e7de      	b.n	80068e6 <_strtol_l.constprop.0+0x72>
 8006928:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800692c:	2f19      	cmp	r7, #25
 800692e:	d804      	bhi.n	800693a <_strtol_l.constprop.0+0xc6>
 8006930:	3c57      	subs	r4, #87	@ 0x57
 8006932:	e7d8      	b.n	80068e6 <_strtol_l.constprop.0+0x72>
 8006934:	f04f 32ff 	mov.w	r2, #4294967295
 8006938:	e7e1      	b.n	80068fe <_strtol_l.constprop.0+0x8a>
 800693a:	1c53      	adds	r3, r2, #1
 800693c:	d108      	bne.n	8006950 <_strtol_l.constprop.0+0xdc>
 800693e:	2322      	movs	r3, #34	@ 0x22
 8006940:	f8ce 3000 	str.w	r3, [lr]
 8006944:	4660      	mov	r0, ip
 8006946:	f1b8 0f00 	cmp.w	r8, #0
 800694a:	d0a0      	beq.n	800688e <_strtol_l.constprop.0+0x1a>
 800694c:	1e69      	subs	r1, r5, #1
 800694e:	e006      	b.n	800695e <_strtol_l.constprop.0+0xea>
 8006950:	b106      	cbz	r6, 8006954 <_strtol_l.constprop.0+0xe0>
 8006952:	4240      	negs	r0, r0
 8006954:	f1b8 0f00 	cmp.w	r8, #0
 8006958:	d099      	beq.n	800688e <_strtol_l.constprop.0+0x1a>
 800695a:	2a00      	cmp	r2, #0
 800695c:	d1f6      	bne.n	800694c <_strtol_l.constprop.0+0xd8>
 800695e:	f8c8 1000 	str.w	r1, [r8]
 8006962:	e794      	b.n	800688e <_strtol_l.constprop.0+0x1a>
 8006964:	0800a6b9 	.word	0x0800a6b9

08006968 <_strtol_r>:
 8006968:	f7ff bf84 	b.w	8006874 <_strtol_l.constprop.0>

0800696c <__cvt>:
 800696c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006970:	ec57 6b10 	vmov	r6, r7, d0
 8006974:	2f00      	cmp	r7, #0
 8006976:	460c      	mov	r4, r1
 8006978:	4619      	mov	r1, r3
 800697a:	463b      	mov	r3, r7
 800697c:	bfbb      	ittet	lt
 800697e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8006982:	461f      	movlt	r7, r3
 8006984:	2300      	movge	r3, #0
 8006986:	232d      	movlt	r3, #45	@ 0x2d
 8006988:	700b      	strb	r3, [r1, #0]
 800698a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800698c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8006990:	4691      	mov	r9, r2
 8006992:	f023 0820 	bic.w	r8, r3, #32
 8006996:	bfbc      	itt	lt
 8006998:	4632      	movlt	r2, r6
 800699a:	4616      	movlt	r6, r2
 800699c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80069a0:	d005      	beq.n	80069ae <__cvt+0x42>
 80069a2:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80069a6:	d100      	bne.n	80069aa <__cvt+0x3e>
 80069a8:	3401      	adds	r4, #1
 80069aa:	2102      	movs	r1, #2
 80069ac:	e000      	b.n	80069b0 <__cvt+0x44>
 80069ae:	2103      	movs	r1, #3
 80069b0:	ab03      	add	r3, sp, #12
 80069b2:	9301      	str	r3, [sp, #4]
 80069b4:	ab02      	add	r3, sp, #8
 80069b6:	9300      	str	r3, [sp, #0]
 80069b8:	ec47 6b10 	vmov	d0, r6, r7
 80069bc:	4653      	mov	r3, sl
 80069be:	4622      	mov	r2, r4
 80069c0:	f001 f92e 	bl	8007c20 <_dtoa_r>
 80069c4:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80069c8:	4605      	mov	r5, r0
 80069ca:	d119      	bne.n	8006a00 <__cvt+0x94>
 80069cc:	f019 0f01 	tst.w	r9, #1
 80069d0:	d00e      	beq.n	80069f0 <__cvt+0x84>
 80069d2:	eb00 0904 	add.w	r9, r0, r4
 80069d6:	2200      	movs	r2, #0
 80069d8:	2300      	movs	r3, #0
 80069da:	4630      	mov	r0, r6
 80069dc:	4639      	mov	r1, r7
 80069de:	f7fa f873 	bl	8000ac8 <__aeabi_dcmpeq>
 80069e2:	b108      	cbz	r0, 80069e8 <__cvt+0x7c>
 80069e4:	f8cd 900c 	str.w	r9, [sp, #12]
 80069e8:	2230      	movs	r2, #48	@ 0x30
 80069ea:	9b03      	ldr	r3, [sp, #12]
 80069ec:	454b      	cmp	r3, r9
 80069ee:	d31e      	bcc.n	8006a2e <__cvt+0xc2>
 80069f0:	9b03      	ldr	r3, [sp, #12]
 80069f2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80069f4:	1b5b      	subs	r3, r3, r5
 80069f6:	4628      	mov	r0, r5
 80069f8:	6013      	str	r3, [r2, #0]
 80069fa:	b004      	add	sp, #16
 80069fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a00:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006a04:	eb00 0904 	add.w	r9, r0, r4
 8006a08:	d1e5      	bne.n	80069d6 <__cvt+0x6a>
 8006a0a:	7803      	ldrb	r3, [r0, #0]
 8006a0c:	2b30      	cmp	r3, #48	@ 0x30
 8006a0e:	d10a      	bne.n	8006a26 <__cvt+0xba>
 8006a10:	2200      	movs	r2, #0
 8006a12:	2300      	movs	r3, #0
 8006a14:	4630      	mov	r0, r6
 8006a16:	4639      	mov	r1, r7
 8006a18:	f7fa f856 	bl	8000ac8 <__aeabi_dcmpeq>
 8006a1c:	b918      	cbnz	r0, 8006a26 <__cvt+0xba>
 8006a1e:	f1c4 0401 	rsb	r4, r4, #1
 8006a22:	f8ca 4000 	str.w	r4, [sl]
 8006a26:	f8da 3000 	ldr.w	r3, [sl]
 8006a2a:	4499      	add	r9, r3
 8006a2c:	e7d3      	b.n	80069d6 <__cvt+0x6a>
 8006a2e:	1c59      	adds	r1, r3, #1
 8006a30:	9103      	str	r1, [sp, #12]
 8006a32:	701a      	strb	r2, [r3, #0]
 8006a34:	e7d9      	b.n	80069ea <__cvt+0x7e>

08006a36 <__exponent>:
 8006a36:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006a38:	2900      	cmp	r1, #0
 8006a3a:	bfba      	itte	lt
 8006a3c:	4249      	neglt	r1, r1
 8006a3e:	232d      	movlt	r3, #45	@ 0x2d
 8006a40:	232b      	movge	r3, #43	@ 0x2b
 8006a42:	2909      	cmp	r1, #9
 8006a44:	7002      	strb	r2, [r0, #0]
 8006a46:	7043      	strb	r3, [r0, #1]
 8006a48:	dd29      	ble.n	8006a9e <__exponent+0x68>
 8006a4a:	f10d 0307 	add.w	r3, sp, #7
 8006a4e:	461d      	mov	r5, r3
 8006a50:	270a      	movs	r7, #10
 8006a52:	461a      	mov	r2, r3
 8006a54:	fbb1 f6f7 	udiv	r6, r1, r7
 8006a58:	fb07 1416 	mls	r4, r7, r6, r1
 8006a5c:	3430      	adds	r4, #48	@ 0x30
 8006a5e:	f802 4c01 	strb.w	r4, [r2, #-1]
 8006a62:	460c      	mov	r4, r1
 8006a64:	2c63      	cmp	r4, #99	@ 0x63
 8006a66:	f103 33ff 	add.w	r3, r3, #4294967295
 8006a6a:	4631      	mov	r1, r6
 8006a6c:	dcf1      	bgt.n	8006a52 <__exponent+0x1c>
 8006a6e:	3130      	adds	r1, #48	@ 0x30
 8006a70:	1e94      	subs	r4, r2, #2
 8006a72:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006a76:	1c41      	adds	r1, r0, #1
 8006a78:	4623      	mov	r3, r4
 8006a7a:	42ab      	cmp	r3, r5
 8006a7c:	d30a      	bcc.n	8006a94 <__exponent+0x5e>
 8006a7e:	f10d 0309 	add.w	r3, sp, #9
 8006a82:	1a9b      	subs	r3, r3, r2
 8006a84:	42ac      	cmp	r4, r5
 8006a86:	bf88      	it	hi
 8006a88:	2300      	movhi	r3, #0
 8006a8a:	3302      	adds	r3, #2
 8006a8c:	4403      	add	r3, r0
 8006a8e:	1a18      	subs	r0, r3, r0
 8006a90:	b003      	add	sp, #12
 8006a92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006a94:	f813 6b01 	ldrb.w	r6, [r3], #1
 8006a98:	f801 6f01 	strb.w	r6, [r1, #1]!
 8006a9c:	e7ed      	b.n	8006a7a <__exponent+0x44>
 8006a9e:	2330      	movs	r3, #48	@ 0x30
 8006aa0:	3130      	adds	r1, #48	@ 0x30
 8006aa2:	7083      	strb	r3, [r0, #2]
 8006aa4:	70c1      	strb	r1, [r0, #3]
 8006aa6:	1d03      	adds	r3, r0, #4
 8006aa8:	e7f1      	b.n	8006a8e <__exponent+0x58>
	...

08006aac <_printf_float>:
 8006aac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ab0:	b08d      	sub	sp, #52	@ 0x34
 8006ab2:	460c      	mov	r4, r1
 8006ab4:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8006ab8:	4616      	mov	r6, r2
 8006aba:	461f      	mov	r7, r3
 8006abc:	4605      	mov	r5, r0
 8006abe:	f000 ff83 	bl	80079c8 <_localeconv_r>
 8006ac2:	6803      	ldr	r3, [r0, #0]
 8006ac4:	9304      	str	r3, [sp, #16]
 8006ac6:	4618      	mov	r0, r3
 8006ac8:	f7f9 fbd2 	bl	8000270 <strlen>
 8006acc:	2300      	movs	r3, #0
 8006ace:	930a      	str	r3, [sp, #40]	@ 0x28
 8006ad0:	f8d8 3000 	ldr.w	r3, [r8]
 8006ad4:	9005      	str	r0, [sp, #20]
 8006ad6:	3307      	adds	r3, #7
 8006ad8:	f023 0307 	bic.w	r3, r3, #7
 8006adc:	f103 0208 	add.w	r2, r3, #8
 8006ae0:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006ae4:	f8d4 b000 	ldr.w	fp, [r4]
 8006ae8:	f8c8 2000 	str.w	r2, [r8]
 8006aec:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006af0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8006af4:	9307      	str	r3, [sp, #28]
 8006af6:	f8cd 8018 	str.w	r8, [sp, #24]
 8006afa:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8006afe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006b02:	4b9c      	ldr	r3, [pc, #624]	@ (8006d74 <_printf_float+0x2c8>)
 8006b04:	f04f 32ff 	mov.w	r2, #4294967295
 8006b08:	f7fa f810 	bl	8000b2c <__aeabi_dcmpun>
 8006b0c:	bb70      	cbnz	r0, 8006b6c <_printf_float+0xc0>
 8006b0e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006b12:	4b98      	ldr	r3, [pc, #608]	@ (8006d74 <_printf_float+0x2c8>)
 8006b14:	f04f 32ff 	mov.w	r2, #4294967295
 8006b18:	f7f9 ffea 	bl	8000af0 <__aeabi_dcmple>
 8006b1c:	bb30      	cbnz	r0, 8006b6c <_printf_float+0xc0>
 8006b1e:	2200      	movs	r2, #0
 8006b20:	2300      	movs	r3, #0
 8006b22:	4640      	mov	r0, r8
 8006b24:	4649      	mov	r1, r9
 8006b26:	f7f9 ffd9 	bl	8000adc <__aeabi_dcmplt>
 8006b2a:	b110      	cbz	r0, 8006b32 <_printf_float+0x86>
 8006b2c:	232d      	movs	r3, #45	@ 0x2d
 8006b2e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006b32:	4a91      	ldr	r2, [pc, #580]	@ (8006d78 <_printf_float+0x2cc>)
 8006b34:	4b91      	ldr	r3, [pc, #580]	@ (8006d7c <_printf_float+0x2d0>)
 8006b36:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8006b3a:	bf94      	ite	ls
 8006b3c:	4690      	movls	r8, r2
 8006b3e:	4698      	movhi	r8, r3
 8006b40:	2303      	movs	r3, #3
 8006b42:	6123      	str	r3, [r4, #16]
 8006b44:	f02b 0304 	bic.w	r3, fp, #4
 8006b48:	6023      	str	r3, [r4, #0]
 8006b4a:	f04f 0900 	mov.w	r9, #0
 8006b4e:	9700      	str	r7, [sp, #0]
 8006b50:	4633      	mov	r3, r6
 8006b52:	aa0b      	add	r2, sp, #44	@ 0x2c
 8006b54:	4621      	mov	r1, r4
 8006b56:	4628      	mov	r0, r5
 8006b58:	f000 f9d2 	bl	8006f00 <_printf_common>
 8006b5c:	3001      	adds	r0, #1
 8006b5e:	f040 808d 	bne.w	8006c7c <_printf_float+0x1d0>
 8006b62:	f04f 30ff 	mov.w	r0, #4294967295
 8006b66:	b00d      	add	sp, #52	@ 0x34
 8006b68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b6c:	4642      	mov	r2, r8
 8006b6e:	464b      	mov	r3, r9
 8006b70:	4640      	mov	r0, r8
 8006b72:	4649      	mov	r1, r9
 8006b74:	f7f9 ffda 	bl	8000b2c <__aeabi_dcmpun>
 8006b78:	b140      	cbz	r0, 8006b8c <_printf_float+0xe0>
 8006b7a:	464b      	mov	r3, r9
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	bfbc      	itt	lt
 8006b80:	232d      	movlt	r3, #45	@ 0x2d
 8006b82:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8006b86:	4a7e      	ldr	r2, [pc, #504]	@ (8006d80 <_printf_float+0x2d4>)
 8006b88:	4b7e      	ldr	r3, [pc, #504]	@ (8006d84 <_printf_float+0x2d8>)
 8006b8a:	e7d4      	b.n	8006b36 <_printf_float+0x8a>
 8006b8c:	6863      	ldr	r3, [r4, #4]
 8006b8e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8006b92:	9206      	str	r2, [sp, #24]
 8006b94:	1c5a      	adds	r2, r3, #1
 8006b96:	d13b      	bne.n	8006c10 <_printf_float+0x164>
 8006b98:	2306      	movs	r3, #6
 8006b9a:	6063      	str	r3, [r4, #4]
 8006b9c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8006ba0:	2300      	movs	r3, #0
 8006ba2:	6022      	str	r2, [r4, #0]
 8006ba4:	9303      	str	r3, [sp, #12]
 8006ba6:	ab0a      	add	r3, sp, #40	@ 0x28
 8006ba8:	e9cd a301 	strd	sl, r3, [sp, #4]
 8006bac:	ab09      	add	r3, sp, #36	@ 0x24
 8006bae:	9300      	str	r3, [sp, #0]
 8006bb0:	6861      	ldr	r1, [r4, #4]
 8006bb2:	ec49 8b10 	vmov	d0, r8, r9
 8006bb6:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8006bba:	4628      	mov	r0, r5
 8006bbc:	f7ff fed6 	bl	800696c <__cvt>
 8006bc0:	9b06      	ldr	r3, [sp, #24]
 8006bc2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006bc4:	2b47      	cmp	r3, #71	@ 0x47
 8006bc6:	4680      	mov	r8, r0
 8006bc8:	d129      	bne.n	8006c1e <_printf_float+0x172>
 8006bca:	1cc8      	adds	r0, r1, #3
 8006bcc:	db02      	blt.n	8006bd4 <_printf_float+0x128>
 8006bce:	6863      	ldr	r3, [r4, #4]
 8006bd0:	4299      	cmp	r1, r3
 8006bd2:	dd41      	ble.n	8006c58 <_printf_float+0x1ac>
 8006bd4:	f1aa 0a02 	sub.w	sl, sl, #2
 8006bd8:	fa5f fa8a 	uxtb.w	sl, sl
 8006bdc:	3901      	subs	r1, #1
 8006bde:	4652      	mov	r2, sl
 8006be0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8006be4:	9109      	str	r1, [sp, #36]	@ 0x24
 8006be6:	f7ff ff26 	bl	8006a36 <__exponent>
 8006bea:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006bec:	1813      	adds	r3, r2, r0
 8006bee:	2a01      	cmp	r2, #1
 8006bf0:	4681      	mov	r9, r0
 8006bf2:	6123      	str	r3, [r4, #16]
 8006bf4:	dc02      	bgt.n	8006bfc <_printf_float+0x150>
 8006bf6:	6822      	ldr	r2, [r4, #0]
 8006bf8:	07d2      	lsls	r2, r2, #31
 8006bfa:	d501      	bpl.n	8006c00 <_printf_float+0x154>
 8006bfc:	3301      	adds	r3, #1
 8006bfe:	6123      	str	r3, [r4, #16]
 8006c00:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d0a2      	beq.n	8006b4e <_printf_float+0xa2>
 8006c08:	232d      	movs	r3, #45	@ 0x2d
 8006c0a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006c0e:	e79e      	b.n	8006b4e <_printf_float+0xa2>
 8006c10:	9a06      	ldr	r2, [sp, #24]
 8006c12:	2a47      	cmp	r2, #71	@ 0x47
 8006c14:	d1c2      	bne.n	8006b9c <_printf_float+0xf0>
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d1c0      	bne.n	8006b9c <_printf_float+0xf0>
 8006c1a:	2301      	movs	r3, #1
 8006c1c:	e7bd      	b.n	8006b9a <_printf_float+0xee>
 8006c1e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006c22:	d9db      	bls.n	8006bdc <_printf_float+0x130>
 8006c24:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8006c28:	d118      	bne.n	8006c5c <_printf_float+0x1b0>
 8006c2a:	2900      	cmp	r1, #0
 8006c2c:	6863      	ldr	r3, [r4, #4]
 8006c2e:	dd0b      	ble.n	8006c48 <_printf_float+0x19c>
 8006c30:	6121      	str	r1, [r4, #16]
 8006c32:	b913      	cbnz	r3, 8006c3a <_printf_float+0x18e>
 8006c34:	6822      	ldr	r2, [r4, #0]
 8006c36:	07d0      	lsls	r0, r2, #31
 8006c38:	d502      	bpl.n	8006c40 <_printf_float+0x194>
 8006c3a:	3301      	adds	r3, #1
 8006c3c:	440b      	add	r3, r1
 8006c3e:	6123      	str	r3, [r4, #16]
 8006c40:	65a1      	str	r1, [r4, #88]	@ 0x58
 8006c42:	f04f 0900 	mov.w	r9, #0
 8006c46:	e7db      	b.n	8006c00 <_printf_float+0x154>
 8006c48:	b913      	cbnz	r3, 8006c50 <_printf_float+0x1a4>
 8006c4a:	6822      	ldr	r2, [r4, #0]
 8006c4c:	07d2      	lsls	r2, r2, #31
 8006c4e:	d501      	bpl.n	8006c54 <_printf_float+0x1a8>
 8006c50:	3302      	adds	r3, #2
 8006c52:	e7f4      	b.n	8006c3e <_printf_float+0x192>
 8006c54:	2301      	movs	r3, #1
 8006c56:	e7f2      	b.n	8006c3e <_printf_float+0x192>
 8006c58:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8006c5c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006c5e:	4299      	cmp	r1, r3
 8006c60:	db05      	blt.n	8006c6e <_printf_float+0x1c2>
 8006c62:	6823      	ldr	r3, [r4, #0]
 8006c64:	6121      	str	r1, [r4, #16]
 8006c66:	07d8      	lsls	r0, r3, #31
 8006c68:	d5ea      	bpl.n	8006c40 <_printf_float+0x194>
 8006c6a:	1c4b      	adds	r3, r1, #1
 8006c6c:	e7e7      	b.n	8006c3e <_printf_float+0x192>
 8006c6e:	2900      	cmp	r1, #0
 8006c70:	bfd4      	ite	le
 8006c72:	f1c1 0202 	rsble	r2, r1, #2
 8006c76:	2201      	movgt	r2, #1
 8006c78:	4413      	add	r3, r2
 8006c7a:	e7e0      	b.n	8006c3e <_printf_float+0x192>
 8006c7c:	6823      	ldr	r3, [r4, #0]
 8006c7e:	055a      	lsls	r2, r3, #21
 8006c80:	d407      	bmi.n	8006c92 <_printf_float+0x1e6>
 8006c82:	6923      	ldr	r3, [r4, #16]
 8006c84:	4642      	mov	r2, r8
 8006c86:	4631      	mov	r1, r6
 8006c88:	4628      	mov	r0, r5
 8006c8a:	47b8      	blx	r7
 8006c8c:	3001      	adds	r0, #1
 8006c8e:	d12b      	bne.n	8006ce8 <_printf_float+0x23c>
 8006c90:	e767      	b.n	8006b62 <_printf_float+0xb6>
 8006c92:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006c96:	f240 80dd 	bls.w	8006e54 <_printf_float+0x3a8>
 8006c9a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006c9e:	2200      	movs	r2, #0
 8006ca0:	2300      	movs	r3, #0
 8006ca2:	f7f9 ff11 	bl	8000ac8 <__aeabi_dcmpeq>
 8006ca6:	2800      	cmp	r0, #0
 8006ca8:	d033      	beq.n	8006d12 <_printf_float+0x266>
 8006caa:	4a37      	ldr	r2, [pc, #220]	@ (8006d88 <_printf_float+0x2dc>)
 8006cac:	2301      	movs	r3, #1
 8006cae:	4631      	mov	r1, r6
 8006cb0:	4628      	mov	r0, r5
 8006cb2:	47b8      	blx	r7
 8006cb4:	3001      	adds	r0, #1
 8006cb6:	f43f af54 	beq.w	8006b62 <_printf_float+0xb6>
 8006cba:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8006cbe:	4543      	cmp	r3, r8
 8006cc0:	db02      	blt.n	8006cc8 <_printf_float+0x21c>
 8006cc2:	6823      	ldr	r3, [r4, #0]
 8006cc4:	07d8      	lsls	r0, r3, #31
 8006cc6:	d50f      	bpl.n	8006ce8 <_printf_float+0x23c>
 8006cc8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006ccc:	4631      	mov	r1, r6
 8006cce:	4628      	mov	r0, r5
 8006cd0:	47b8      	blx	r7
 8006cd2:	3001      	adds	r0, #1
 8006cd4:	f43f af45 	beq.w	8006b62 <_printf_float+0xb6>
 8006cd8:	f04f 0900 	mov.w	r9, #0
 8006cdc:	f108 38ff 	add.w	r8, r8, #4294967295
 8006ce0:	f104 0a1a 	add.w	sl, r4, #26
 8006ce4:	45c8      	cmp	r8, r9
 8006ce6:	dc09      	bgt.n	8006cfc <_printf_float+0x250>
 8006ce8:	6823      	ldr	r3, [r4, #0]
 8006cea:	079b      	lsls	r3, r3, #30
 8006cec:	f100 8103 	bmi.w	8006ef6 <_printf_float+0x44a>
 8006cf0:	68e0      	ldr	r0, [r4, #12]
 8006cf2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006cf4:	4298      	cmp	r0, r3
 8006cf6:	bfb8      	it	lt
 8006cf8:	4618      	movlt	r0, r3
 8006cfa:	e734      	b.n	8006b66 <_printf_float+0xba>
 8006cfc:	2301      	movs	r3, #1
 8006cfe:	4652      	mov	r2, sl
 8006d00:	4631      	mov	r1, r6
 8006d02:	4628      	mov	r0, r5
 8006d04:	47b8      	blx	r7
 8006d06:	3001      	adds	r0, #1
 8006d08:	f43f af2b 	beq.w	8006b62 <_printf_float+0xb6>
 8006d0c:	f109 0901 	add.w	r9, r9, #1
 8006d10:	e7e8      	b.n	8006ce4 <_printf_float+0x238>
 8006d12:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	dc39      	bgt.n	8006d8c <_printf_float+0x2e0>
 8006d18:	4a1b      	ldr	r2, [pc, #108]	@ (8006d88 <_printf_float+0x2dc>)
 8006d1a:	2301      	movs	r3, #1
 8006d1c:	4631      	mov	r1, r6
 8006d1e:	4628      	mov	r0, r5
 8006d20:	47b8      	blx	r7
 8006d22:	3001      	adds	r0, #1
 8006d24:	f43f af1d 	beq.w	8006b62 <_printf_float+0xb6>
 8006d28:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8006d2c:	ea59 0303 	orrs.w	r3, r9, r3
 8006d30:	d102      	bne.n	8006d38 <_printf_float+0x28c>
 8006d32:	6823      	ldr	r3, [r4, #0]
 8006d34:	07d9      	lsls	r1, r3, #31
 8006d36:	d5d7      	bpl.n	8006ce8 <_printf_float+0x23c>
 8006d38:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006d3c:	4631      	mov	r1, r6
 8006d3e:	4628      	mov	r0, r5
 8006d40:	47b8      	blx	r7
 8006d42:	3001      	adds	r0, #1
 8006d44:	f43f af0d 	beq.w	8006b62 <_printf_float+0xb6>
 8006d48:	f04f 0a00 	mov.w	sl, #0
 8006d4c:	f104 0b1a 	add.w	fp, r4, #26
 8006d50:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006d52:	425b      	negs	r3, r3
 8006d54:	4553      	cmp	r3, sl
 8006d56:	dc01      	bgt.n	8006d5c <_printf_float+0x2b0>
 8006d58:	464b      	mov	r3, r9
 8006d5a:	e793      	b.n	8006c84 <_printf_float+0x1d8>
 8006d5c:	2301      	movs	r3, #1
 8006d5e:	465a      	mov	r2, fp
 8006d60:	4631      	mov	r1, r6
 8006d62:	4628      	mov	r0, r5
 8006d64:	47b8      	blx	r7
 8006d66:	3001      	adds	r0, #1
 8006d68:	f43f aefb 	beq.w	8006b62 <_printf_float+0xb6>
 8006d6c:	f10a 0a01 	add.w	sl, sl, #1
 8006d70:	e7ee      	b.n	8006d50 <_printf_float+0x2a4>
 8006d72:	bf00      	nop
 8006d74:	7fefffff 	.word	0x7fefffff
 8006d78:	0800a7b9 	.word	0x0800a7b9
 8006d7c:	0800a7bd 	.word	0x0800a7bd
 8006d80:	0800a7c1 	.word	0x0800a7c1
 8006d84:	0800a7c5 	.word	0x0800a7c5
 8006d88:	0800a7c9 	.word	0x0800a7c9
 8006d8c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006d8e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006d92:	4553      	cmp	r3, sl
 8006d94:	bfa8      	it	ge
 8006d96:	4653      	movge	r3, sl
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	4699      	mov	r9, r3
 8006d9c:	dc36      	bgt.n	8006e0c <_printf_float+0x360>
 8006d9e:	f04f 0b00 	mov.w	fp, #0
 8006da2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006da6:	f104 021a 	add.w	r2, r4, #26
 8006daa:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006dac:	9306      	str	r3, [sp, #24]
 8006dae:	eba3 0309 	sub.w	r3, r3, r9
 8006db2:	455b      	cmp	r3, fp
 8006db4:	dc31      	bgt.n	8006e1a <_printf_float+0x36e>
 8006db6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006db8:	459a      	cmp	sl, r3
 8006dba:	dc3a      	bgt.n	8006e32 <_printf_float+0x386>
 8006dbc:	6823      	ldr	r3, [r4, #0]
 8006dbe:	07da      	lsls	r2, r3, #31
 8006dc0:	d437      	bmi.n	8006e32 <_printf_float+0x386>
 8006dc2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006dc4:	ebaa 0903 	sub.w	r9, sl, r3
 8006dc8:	9b06      	ldr	r3, [sp, #24]
 8006dca:	ebaa 0303 	sub.w	r3, sl, r3
 8006dce:	4599      	cmp	r9, r3
 8006dd0:	bfa8      	it	ge
 8006dd2:	4699      	movge	r9, r3
 8006dd4:	f1b9 0f00 	cmp.w	r9, #0
 8006dd8:	dc33      	bgt.n	8006e42 <_printf_float+0x396>
 8006dda:	f04f 0800 	mov.w	r8, #0
 8006dde:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006de2:	f104 0b1a 	add.w	fp, r4, #26
 8006de6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006de8:	ebaa 0303 	sub.w	r3, sl, r3
 8006dec:	eba3 0309 	sub.w	r3, r3, r9
 8006df0:	4543      	cmp	r3, r8
 8006df2:	f77f af79 	ble.w	8006ce8 <_printf_float+0x23c>
 8006df6:	2301      	movs	r3, #1
 8006df8:	465a      	mov	r2, fp
 8006dfa:	4631      	mov	r1, r6
 8006dfc:	4628      	mov	r0, r5
 8006dfe:	47b8      	blx	r7
 8006e00:	3001      	adds	r0, #1
 8006e02:	f43f aeae 	beq.w	8006b62 <_printf_float+0xb6>
 8006e06:	f108 0801 	add.w	r8, r8, #1
 8006e0a:	e7ec      	b.n	8006de6 <_printf_float+0x33a>
 8006e0c:	4642      	mov	r2, r8
 8006e0e:	4631      	mov	r1, r6
 8006e10:	4628      	mov	r0, r5
 8006e12:	47b8      	blx	r7
 8006e14:	3001      	adds	r0, #1
 8006e16:	d1c2      	bne.n	8006d9e <_printf_float+0x2f2>
 8006e18:	e6a3      	b.n	8006b62 <_printf_float+0xb6>
 8006e1a:	2301      	movs	r3, #1
 8006e1c:	4631      	mov	r1, r6
 8006e1e:	4628      	mov	r0, r5
 8006e20:	9206      	str	r2, [sp, #24]
 8006e22:	47b8      	blx	r7
 8006e24:	3001      	adds	r0, #1
 8006e26:	f43f ae9c 	beq.w	8006b62 <_printf_float+0xb6>
 8006e2a:	9a06      	ldr	r2, [sp, #24]
 8006e2c:	f10b 0b01 	add.w	fp, fp, #1
 8006e30:	e7bb      	b.n	8006daa <_printf_float+0x2fe>
 8006e32:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006e36:	4631      	mov	r1, r6
 8006e38:	4628      	mov	r0, r5
 8006e3a:	47b8      	blx	r7
 8006e3c:	3001      	adds	r0, #1
 8006e3e:	d1c0      	bne.n	8006dc2 <_printf_float+0x316>
 8006e40:	e68f      	b.n	8006b62 <_printf_float+0xb6>
 8006e42:	9a06      	ldr	r2, [sp, #24]
 8006e44:	464b      	mov	r3, r9
 8006e46:	4442      	add	r2, r8
 8006e48:	4631      	mov	r1, r6
 8006e4a:	4628      	mov	r0, r5
 8006e4c:	47b8      	blx	r7
 8006e4e:	3001      	adds	r0, #1
 8006e50:	d1c3      	bne.n	8006dda <_printf_float+0x32e>
 8006e52:	e686      	b.n	8006b62 <_printf_float+0xb6>
 8006e54:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006e58:	f1ba 0f01 	cmp.w	sl, #1
 8006e5c:	dc01      	bgt.n	8006e62 <_printf_float+0x3b6>
 8006e5e:	07db      	lsls	r3, r3, #31
 8006e60:	d536      	bpl.n	8006ed0 <_printf_float+0x424>
 8006e62:	2301      	movs	r3, #1
 8006e64:	4642      	mov	r2, r8
 8006e66:	4631      	mov	r1, r6
 8006e68:	4628      	mov	r0, r5
 8006e6a:	47b8      	blx	r7
 8006e6c:	3001      	adds	r0, #1
 8006e6e:	f43f ae78 	beq.w	8006b62 <_printf_float+0xb6>
 8006e72:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006e76:	4631      	mov	r1, r6
 8006e78:	4628      	mov	r0, r5
 8006e7a:	47b8      	blx	r7
 8006e7c:	3001      	adds	r0, #1
 8006e7e:	f43f ae70 	beq.w	8006b62 <_printf_float+0xb6>
 8006e82:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006e86:	2200      	movs	r2, #0
 8006e88:	2300      	movs	r3, #0
 8006e8a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006e8e:	f7f9 fe1b 	bl	8000ac8 <__aeabi_dcmpeq>
 8006e92:	b9c0      	cbnz	r0, 8006ec6 <_printf_float+0x41a>
 8006e94:	4653      	mov	r3, sl
 8006e96:	f108 0201 	add.w	r2, r8, #1
 8006e9a:	4631      	mov	r1, r6
 8006e9c:	4628      	mov	r0, r5
 8006e9e:	47b8      	blx	r7
 8006ea0:	3001      	adds	r0, #1
 8006ea2:	d10c      	bne.n	8006ebe <_printf_float+0x412>
 8006ea4:	e65d      	b.n	8006b62 <_printf_float+0xb6>
 8006ea6:	2301      	movs	r3, #1
 8006ea8:	465a      	mov	r2, fp
 8006eaa:	4631      	mov	r1, r6
 8006eac:	4628      	mov	r0, r5
 8006eae:	47b8      	blx	r7
 8006eb0:	3001      	adds	r0, #1
 8006eb2:	f43f ae56 	beq.w	8006b62 <_printf_float+0xb6>
 8006eb6:	f108 0801 	add.w	r8, r8, #1
 8006eba:	45d0      	cmp	r8, sl
 8006ebc:	dbf3      	blt.n	8006ea6 <_printf_float+0x3fa>
 8006ebe:	464b      	mov	r3, r9
 8006ec0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006ec4:	e6df      	b.n	8006c86 <_printf_float+0x1da>
 8006ec6:	f04f 0800 	mov.w	r8, #0
 8006eca:	f104 0b1a 	add.w	fp, r4, #26
 8006ece:	e7f4      	b.n	8006eba <_printf_float+0x40e>
 8006ed0:	2301      	movs	r3, #1
 8006ed2:	4642      	mov	r2, r8
 8006ed4:	e7e1      	b.n	8006e9a <_printf_float+0x3ee>
 8006ed6:	2301      	movs	r3, #1
 8006ed8:	464a      	mov	r2, r9
 8006eda:	4631      	mov	r1, r6
 8006edc:	4628      	mov	r0, r5
 8006ede:	47b8      	blx	r7
 8006ee0:	3001      	adds	r0, #1
 8006ee2:	f43f ae3e 	beq.w	8006b62 <_printf_float+0xb6>
 8006ee6:	f108 0801 	add.w	r8, r8, #1
 8006eea:	68e3      	ldr	r3, [r4, #12]
 8006eec:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006eee:	1a5b      	subs	r3, r3, r1
 8006ef0:	4543      	cmp	r3, r8
 8006ef2:	dcf0      	bgt.n	8006ed6 <_printf_float+0x42a>
 8006ef4:	e6fc      	b.n	8006cf0 <_printf_float+0x244>
 8006ef6:	f04f 0800 	mov.w	r8, #0
 8006efa:	f104 0919 	add.w	r9, r4, #25
 8006efe:	e7f4      	b.n	8006eea <_printf_float+0x43e>

08006f00 <_printf_common>:
 8006f00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f04:	4616      	mov	r6, r2
 8006f06:	4698      	mov	r8, r3
 8006f08:	688a      	ldr	r2, [r1, #8]
 8006f0a:	690b      	ldr	r3, [r1, #16]
 8006f0c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006f10:	4293      	cmp	r3, r2
 8006f12:	bfb8      	it	lt
 8006f14:	4613      	movlt	r3, r2
 8006f16:	6033      	str	r3, [r6, #0]
 8006f18:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006f1c:	4607      	mov	r7, r0
 8006f1e:	460c      	mov	r4, r1
 8006f20:	b10a      	cbz	r2, 8006f26 <_printf_common+0x26>
 8006f22:	3301      	adds	r3, #1
 8006f24:	6033      	str	r3, [r6, #0]
 8006f26:	6823      	ldr	r3, [r4, #0]
 8006f28:	0699      	lsls	r1, r3, #26
 8006f2a:	bf42      	ittt	mi
 8006f2c:	6833      	ldrmi	r3, [r6, #0]
 8006f2e:	3302      	addmi	r3, #2
 8006f30:	6033      	strmi	r3, [r6, #0]
 8006f32:	6825      	ldr	r5, [r4, #0]
 8006f34:	f015 0506 	ands.w	r5, r5, #6
 8006f38:	d106      	bne.n	8006f48 <_printf_common+0x48>
 8006f3a:	f104 0a19 	add.w	sl, r4, #25
 8006f3e:	68e3      	ldr	r3, [r4, #12]
 8006f40:	6832      	ldr	r2, [r6, #0]
 8006f42:	1a9b      	subs	r3, r3, r2
 8006f44:	42ab      	cmp	r3, r5
 8006f46:	dc26      	bgt.n	8006f96 <_printf_common+0x96>
 8006f48:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006f4c:	6822      	ldr	r2, [r4, #0]
 8006f4e:	3b00      	subs	r3, #0
 8006f50:	bf18      	it	ne
 8006f52:	2301      	movne	r3, #1
 8006f54:	0692      	lsls	r2, r2, #26
 8006f56:	d42b      	bmi.n	8006fb0 <_printf_common+0xb0>
 8006f58:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006f5c:	4641      	mov	r1, r8
 8006f5e:	4638      	mov	r0, r7
 8006f60:	47c8      	blx	r9
 8006f62:	3001      	adds	r0, #1
 8006f64:	d01e      	beq.n	8006fa4 <_printf_common+0xa4>
 8006f66:	6823      	ldr	r3, [r4, #0]
 8006f68:	6922      	ldr	r2, [r4, #16]
 8006f6a:	f003 0306 	and.w	r3, r3, #6
 8006f6e:	2b04      	cmp	r3, #4
 8006f70:	bf02      	ittt	eq
 8006f72:	68e5      	ldreq	r5, [r4, #12]
 8006f74:	6833      	ldreq	r3, [r6, #0]
 8006f76:	1aed      	subeq	r5, r5, r3
 8006f78:	68a3      	ldr	r3, [r4, #8]
 8006f7a:	bf0c      	ite	eq
 8006f7c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006f80:	2500      	movne	r5, #0
 8006f82:	4293      	cmp	r3, r2
 8006f84:	bfc4      	itt	gt
 8006f86:	1a9b      	subgt	r3, r3, r2
 8006f88:	18ed      	addgt	r5, r5, r3
 8006f8a:	2600      	movs	r6, #0
 8006f8c:	341a      	adds	r4, #26
 8006f8e:	42b5      	cmp	r5, r6
 8006f90:	d11a      	bne.n	8006fc8 <_printf_common+0xc8>
 8006f92:	2000      	movs	r0, #0
 8006f94:	e008      	b.n	8006fa8 <_printf_common+0xa8>
 8006f96:	2301      	movs	r3, #1
 8006f98:	4652      	mov	r2, sl
 8006f9a:	4641      	mov	r1, r8
 8006f9c:	4638      	mov	r0, r7
 8006f9e:	47c8      	blx	r9
 8006fa0:	3001      	adds	r0, #1
 8006fa2:	d103      	bne.n	8006fac <_printf_common+0xac>
 8006fa4:	f04f 30ff 	mov.w	r0, #4294967295
 8006fa8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006fac:	3501      	adds	r5, #1
 8006fae:	e7c6      	b.n	8006f3e <_printf_common+0x3e>
 8006fb0:	18e1      	adds	r1, r4, r3
 8006fb2:	1c5a      	adds	r2, r3, #1
 8006fb4:	2030      	movs	r0, #48	@ 0x30
 8006fb6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006fba:	4422      	add	r2, r4
 8006fbc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006fc0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006fc4:	3302      	adds	r3, #2
 8006fc6:	e7c7      	b.n	8006f58 <_printf_common+0x58>
 8006fc8:	2301      	movs	r3, #1
 8006fca:	4622      	mov	r2, r4
 8006fcc:	4641      	mov	r1, r8
 8006fce:	4638      	mov	r0, r7
 8006fd0:	47c8      	blx	r9
 8006fd2:	3001      	adds	r0, #1
 8006fd4:	d0e6      	beq.n	8006fa4 <_printf_common+0xa4>
 8006fd6:	3601      	adds	r6, #1
 8006fd8:	e7d9      	b.n	8006f8e <_printf_common+0x8e>
	...

08006fdc <_printf_i>:
 8006fdc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006fe0:	7e0f      	ldrb	r7, [r1, #24]
 8006fe2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006fe4:	2f78      	cmp	r7, #120	@ 0x78
 8006fe6:	4691      	mov	r9, r2
 8006fe8:	4680      	mov	r8, r0
 8006fea:	460c      	mov	r4, r1
 8006fec:	469a      	mov	sl, r3
 8006fee:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006ff2:	d807      	bhi.n	8007004 <_printf_i+0x28>
 8006ff4:	2f62      	cmp	r7, #98	@ 0x62
 8006ff6:	d80a      	bhi.n	800700e <_printf_i+0x32>
 8006ff8:	2f00      	cmp	r7, #0
 8006ffa:	f000 80d2 	beq.w	80071a2 <_printf_i+0x1c6>
 8006ffe:	2f58      	cmp	r7, #88	@ 0x58
 8007000:	f000 80b9 	beq.w	8007176 <_printf_i+0x19a>
 8007004:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007008:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800700c:	e03a      	b.n	8007084 <_printf_i+0xa8>
 800700e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007012:	2b15      	cmp	r3, #21
 8007014:	d8f6      	bhi.n	8007004 <_printf_i+0x28>
 8007016:	a101      	add	r1, pc, #4	@ (adr r1, 800701c <_printf_i+0x40>)
 8007018:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800701c:	08007075 	.word	0x08007075
 8007020:	08007089 	.word	0x08007089
 8007024:	08007005 	.word	0x08007005
 8007028:	08007005 	.word	0x08007005
 800702c:	08007005 	.word	0x08007005
 8007030:	08007005 	.word	0x08007005
 8007034:	08007089 	.word	0x08007089
 8007038:	08007005 	.word	0x08007005
 800703c:	08007005 	.word	0x08007005
 8007040:	08007005 	.word	0x08007005
 8007044:	08007005 	.word	0x08007005
 8007048:	08007189 	.word	0x08007189
 800704c:	080070b3 	.word	0x080070b3
 8007050:	08007143 	.word	0x08007143
 8007054:	08007005 	.word	0x08007005
 8007058:	08007005 	.word	0x08007005
 800705c:	080071ab 	.word	0x080071ab
 8007060:	08007005 	.word	0x08007005
 8007064:	080070b3 	.word	0x080070b3
 8007068:	08007005 	.word	0x08007005
 800706c:	08007005 	.word	0x08007005
 8007070:	0800714b 	.word	0x0800714b
 8007074:	6833      	ldr	r3, [r6, #0]
 8007076:	1d1a      	adds	r2, r3, #4
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	6032      	str	r2, [r6, #0]
 800707c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007080:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007084:	2301      	movs	r3, #1
 8007086:	e09d      	b.n	80071c4 <_printf_i+0x1e8>
 8007088:	6833      	ldr	r3, [r6, #0]
 800708a:	6820      	ldr	r0, [r4, #0]
 800708c:	1d19      	adds	r1, r3, #4
 800708e:	6031      	str	r1, [r6, #0]
 8007090:	0606      	lsls	r6, r0, #24
 8007092:	d501      	bpl.n	8007098 <_printf_i+0xbc>
 8007094:	681d      	ldr	r5, [r3, #0]
 8007096:	e003      	b.n	80070a0 <_printf_i+0xc4>
 8007098:	0645      	lsls	r5, r0, #25
 800709a:	d5fb      	bpl.n	8007094 <_printf_i+0xb8>
 800709c:	f9b3 5000 	ldrsh.w	r5, [r3]
 80070a0:	2d00      	cmp	r5, #0
 80070a2:	da03      	bge.n	80070ac <_printf_i+0xd0>
 80070a4:	232d      	movs	r3, #45	@ 0x2d
 80070a6:	426d      	negs	r5, r5
 80070a8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80070ac:	4859      	ldr	r0, [pc, #356]	@ (8007214 <_printf_i+0x238>)
 80070ae:	230a      	movs	r3, #10
 80070b0:	e011      	b.n	80070d6 <_printf_i+0xfa>
 80070b2:	6821      	ldr	r1, [r4, #0]
 80070b4:	6833      	ldr	r3, [r6, #0]
 80070b6:	0608      	lsls	r0, r1, #24
 80070b8:	f853 5b04 	ldr.w	r5, [r3], #4
 80070bc:	d402      	bmi.n	80070c4 <_printf_i+0xe8>
 80070be:	0649      	lsls	r1, r1, #25
 80070c0:	bf48      	it	mi
 80070c2:	b2ad      	uxthmi	r5, r5
 80070c4:	2f6f      	cmp	r7, #111	@ 0x6f
 80070c6:	4853      	ldr	r0, [pc, #332]	@ (8007214 <_printf_i+0x238>)
 80070c8:	6033      	str	r3, [r6, #0]
 80070ca:	bf14      	ite	ne
 80070cc:	230a      	movne	r3, #10
 80070ce:	2308      	moveq	r3, #8
 80070d0:	2100      	movs	r1, #0
 80070d2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80070d6:	6866      	ldr	r6, [r4, #4]
 80070d8:	60a6      	str	r6, [r4, #8]
 80070da:	2e00      	cmp	r6, #0
 80070dc:	bfa2      	ittt	ge
 80070de:	6821      	ldrge	r1, [r4, #0]
 80070e0:	f021 0104 	bicge.w	r1, r1, #4
 80070e4:	6021      	strge	r1, [r4, #0]
 80070e6:	b90d      	cbnz	r5, 80070ec <_printf_i+0x110>
 80070e8:	2e00      	cmp	r6, #0
 80070ea:	d04b      	beq.n	8007184 <_printf_i+0x1a8>
 80070ec:	4616      	mov	r6, r2
 80070ee:	fbb5 f1f3 	udiv	r1, r5, r3
 80070f2:	fb03 5711 	mls	r7, r3, r1, r5
 80070f6:	5dc7      	ldrb	r7, [r0, r7]
 80070f8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80070fc:	462f      	mov	r7, r5
 80070fe:	42bb      	cmp	r3, r7
 8007100:	460d      	mov	r5, r1
 8007102:	d9f4      	bls.n	80070ee <_printf_i+0x112>
 8007104:	2b08      	cmp	r3, #8
 8007106:	d10b      	bne.n	8007120 <_printf_i+0x144>
 8007108:	6823      	ldr	r3, [r4, #0]
 800710a:	07df      	lsls	r7, r3, #31
 800710c:	d508      	bpl.n	8007120 <_printf_i+0x144>
 800710e:	6923      	ldr	r3, [r4, #16]
 8007110:	6861      	ldr	r1, [r4, #4]
 8007112:	4299      	cmp	r1, r3
 8007114:	bfde      	ittt	le
 8007116:	2330      	movle	r3, #48	@ 0x30
 8007118:	f806 3c01 	strble.w	r3, [r6, #-1]
 800711c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007120:	1b92      	subs	r2, r2, r6
 8007122:	6122      	str	r2, [r4, #16]
 8007124:	f8cd a000 	str.w	sl, [sp]
 8007128:	464b      	mov	r3, r9
 800712a:	aa03      	add	r2, sp, #12
 800712c:	4621      	mov	r1, r4
 800712e:	4640      	mov	r0, r8
 8007130:	f7ff fee6 	bl	8006f00 <_printf_common>
 8007134:	3001      	adds	r0, #1
 8007136:	d14a      	bne.n	80071ce <_printf_i+0x1f2>
 8007138:	f04f 30ff 	mov.w	r0, #4294967295
 800713c:	b004      	add	sp, #16
 800713e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007142:	6823      	ldr	r3, [r4, #0]
 8007144:	f043 0320 	orr.w	r3, r3, #32
 8007148:	6023      	str	r3, [r4, #0]
 800714a:	4833      	ldr	r0, [pc, #204]	@ (8007218 <_printf_i+0x23c>)
 800714c:	2778      	movs	r7, #120	@ 0x78
 800714e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007152:	6823      	ldr	r3, [r4, #0]
 8007154:	6831      	ldr	r1, [r6, #0]
 8007156:	061f      	lsls	r7, r3, #24
 8007158:	f851 5b04 	ldr.w	r5, [r1], #4
 800715c:	d402      	bmi.n	8007164 <_printf_i+0x188>
 800715e:	065f      	lsls	r7, r3, #25
 8007160:	bf48      	it	mi
 8007162:	b2ad      	uxthmi	r5, r5
 8007164:	6031      	str	r1, [r6, #0]
 8007166:	07d9      	lsls	r1, r3, #31
 8007168:	bf44      	itt	mi
 800716a:	f043 0320 	orrmi.w	r3, r3, #32
 800716e:	6023      	strmi	r3, [r4, #0]
 8007170:	b11d      	cbz	r5, 800717a <_printf_i+0x19e>
 8007172:	2310      	movs	r3, #16
 8007174:	e7ac      	b.n	80070d0 <_printf_i+0xf4>
 8007176:	4827      	ldr	r0, [pc, #156]	@ (8007214 <_printf_i+0x238>)
 8007178:	e7e9      	b.n	800714e <_printf_i+0x172>
 800717a:	6823      	ldr	r3, [r4, #0]
 800717c:	f023 0320 	bic.w	r3, r3, #32
 8007180:	6023      	str	r3, [r4, #0]
 8007182:	e7f6      	b.n	8007172 <_printf_i+0x196>
 8007184:	4616      	mov	r6, r2
 8007186:	e7bd      	b.n	8007104 <_printf_i+0x128>
 8007188:	6833      	ldr	r3, [r6, #0]
 800718a:	6825      	ldr	r5, [r4, #0]
 800718c:	6961      	ldr	r1, [r4, #20]
 800718e:	1d18      	adds	r0, r3, #4
 8007190:	6030      	str	r0, [r6, #0]
 8007192:	062e      	lsls	r6, r5, #24
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	d501      	bpl.n	800719c <_printf_i+0x1c0>
 8007198:	6019      	str	r1, [r3, #0]
 800719a:	e002      	b.n	80071a2 <_printf_i+0x1c6>
 800719c:	0668      	lsls	r0, r5, #25
 800719e:	d5fb      	bpl.n	8007198 <_printf_i+0x1bc>
 80071a0:	8019      	strh	r1, [r3, #0]
 80071a2:	2300      	movs	r3, #0
 80071a4:	6123      	str	r3, [r4, #16]
 80071a6:	4616      	mov	r6, r2
 80071a8:	e7bc      	b.n	8007124 <_printf_i+0x148>
 80071aa:	6833      	ldr	r3, [r6, #0]
 80071ac:	1d1a      	adds	r2, r3, #4
 80071ae:	6032      	str	r2, [r6, #0]
 80071b0:	681e      	ldr	r6, [r3, #0]
 80071b2:	6862      	ldr	r2, [r4, #4]
 80071b4:	2100      	movs	r1, #0
 80071b6:	4630      	mov	r0, r6
 80071b8:	f7f9 f80a 	bl	80001d0 <memchr>
 80071bc:	b108      	cbz	r0, 80071c2 <_printf_i+0x1e6>
 80071be:	1b80      	subs	r0, r0, r6
 80071c0:	6060      	str	r0, [r4, #4]
 80071c2:	6863      	ldr	r3, [r4, #4]
 80071c4:	6123      	str	r3, [r4, #16]
 80071c6:	2300      	movs	r3, #0
 80071c8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80071cc:	e7aa      	b.n	8007124 <_printf_i+0x148>
 80071ce:	6923      	ldr	r3, [r4, #16]
 80071d0:	4632      	mov	r2, r6
 80071d2:	4649      	mov	r1, r9
 80071d4:	4640      	mov	r0, r8
 80071d6:	47d0      	blx	sl
 80071d8:	3001      	adds	r0, #1
 80071da:	d0ad      	beq.n	8007138 <_printf_i+0x15c>
 80071dc:	6823      	ldr	r3, [r4, #0]
 80071de:	079b      	lsls	r3, r3, #30
 80071e0:	d413      	bmi.n	800720a <_printf_i+0x22e>
 80071e2:	68e0      	ldr	r0, [r4, #12]
 80071e4:	9b03      	ldr	r3, [sp, #12]
 80071e6:	4298      	cmp	r0, r3
 80071e8:	bfb8      	it	lt
 80071ea:	4618      	movlt	r0, r3
 80071ec:	e7a6      	b.n	800713c <_printf_i+0x160>
 80071ee:	2301      	movs	r3, #1
 80071f0:	4632      	mov	r2, r6
 80071f2:	4649      	mov	r1, r9
 80071f4:	4640      	mov	r0, r8
 80071f6:	47d0      	blx	sl
 80071f8:	3001      	adds	r0, #1
 80071fa:	d09d      	beq.n	8007138 <_printf_i+0x15c>
 80071fc:	3501      	adds	r5, #1
 80071fe:	68e3      	ldr	r3, [r4, #12]
 8007200:	9903      	ldr	r1, [sp, #12]
 8007202:	1a5b      	subs	r3, r3, r1
 8007204:	42ab      	cmp	r3, r5
 8007206:	dcf2      	bgt.n	80071ee <_printf_i+0x212>
 8007208:	e7eb      	b.n	80071e2 <_printf_i+0x206>
 800720a:	2500      	movs	r5, #0
 800720c:	f104 0619 	add.w	r6, r4, #25
 8007210:	e7f5      	b.n	80071fe <_printf_i+0x222>
 8007212:	bf00      	nop
 8007214:	0800a7cb 	.word	0x0800a7cb
 8007218:	0800a7dc 	.word	0x0800a7dc

0800721c <_scanf_float>:
 800721c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007220:	b087      	sub	sp, #28
 8007222:	4617      	mov	r7, r2
 8007224:	9303      	str	r3, [sp, #12]
 8007226:	688b      	ldr	r3, [r1, #8]
 8007228:	1e5a      	subs	r2, r3, #1
 800722a:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800722e:	bf81      	itttt	hi
 8007230:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8007234:	eb03 0b05 	addhi.w	fp, r3, r5
 8007238:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800723c:	608b      	strhi	r3, [r1, #8]
 800723e:	680b      	ldr	r3, [r1, #0]
 8007240:	460a      	mov	r2, r1
 8007242:	f04f 0500 	mov.w	r5, #0
 8007246:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800724a:	f842 3b1c 	str.w	r3, [r2], #28
 800724e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8007252:	4680      	mov	r8, r0
 8007254:	460c      	mov	r4, r1
 8007256:	bf98      	it	ls
 8007258:	f04f 0b00 	movls.w	fp, #0
 800725c:	9201      	str	r2, [sp, #4]
 800725e:	4616      	mov	r6, r2
 8007260:	46aa      	mov	sl, r5
 8007262:	46a9      	mov	r9, r5
 8007264:	9502      	str	r5, [sp, #8]
 8007266:	68a2      	ldr	r2, [r4, #8]
 8007268:	b152      	cbz	r2, 8007280 <_scanf_float+0x64>
 800726a:	683b      	ldr	r3, [r7, #0]
 800726c:	781b      	ldrb	r3, [r3, #0]
 800726e:	2b4e      	cmp	r3, #78	@ 0x4e
 8007270:	d864      	bhi.n	800733c <_scanf_float+0x120>
 8007272:	2b40      	cmp	r3, #64	@ 0x40
 8007274:	d83c      	bhi.n	80072f0 <_scanf_float+0xd4>
 8007276:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800727a:	b2c8      	uxtb	r0, r1
 800727c:	280e      	cmp	r0, #14
 800727e:	d93a      	bls.n	80072f6 <_scanf_float+0xda>
 8007280:	f1b9 0f00 	cmp.w	r9, #0
 8007284:	d003      	beq.n	800728e <_scanf_float+0x72>
 8007286:	6823      	ldr	r3, [r4, #0]
 8007288:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800728c:	6023      	str	r3, [r4, #0]
 800728e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007292:	f1ba 0f01 	cmp.w	sl, #1
 8007296:	f200 8117 	bhi.w	80074c8 <_scanf_float+0x2ac>
 800729a:	9b01      	ldr	r3, [sp, #4]
 800729c:	429e      	cmp	r6, r3
 800729e:	f200 8108 	bhi.w	80074b2 <_scanf_float+0x296>
 80072a2:	2001      	movs	r0, #1
 80072a4:	b007      	add	sp, #28
 80072a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072aa:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 80072ae:	2a0d      	cmp	r2, #13
 80072b0:	d8e6      	bhi.n	8007280 <_scanf_float+0x64>
 80072b2:	a101      	add	r1, pc, #4	@ (adr r1, 80072b8 <_scanf_float+0x9c>)
 80072b4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80072b8:	080073ff 	.word	0x080073ff
 80072bc:	08007281 	.word	0x08007281
 80072c0:	08007281 	.word	0x08007281
 80072c4:	08007281 	.word	0x08007281
 80072c8:	0800745f 	.word	0x0800745f
 80072cc:	08007437 	.word	0x08007437
 80072d0:	08007281 	.word	0x08007281
 80072d4:	08007281 	.word	0x08007281
 80072d8:	0800740d 	.word	0x0800740d
 80072dc:	08007281 	.word	0x08007281
 80072e0:	08007281 	.word	0x08007281
 80072e4:	08007281 	.word	0x08007281
 80072e8:	08007281 	.word	0x08007281
 80072ec:	080073c5 	.word	0x080073c5
 80072f0:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 80072f4:	e7db      	b.n	80072ae <_scanf_float+0x92>
 80072f6:	290e      	cmp	r1, #14
 80072f8:	d8c2      	bhi.n	8007280 <_scanf_float+0x64>
 80072fa:	a001      	add	r0, pc, #4	@ (adr r0, 8007300 <_scanf_float+0xe4>)
 80072fc:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8007300:	080073b5 	.word	0x080073b5
 8007304:	08007281 	.word	0x08007281
 8007308:	080073b5 	.word	0x080073b5
 800730c:	0800744b 	.word	0x0800744b
 8007310:	08007281 	.word	0x08007281
 8007314:	0800735d 	.word	0x0800735d
 8007318:	0800739b 	.word	0x0800739b
 800731c:	0800739b 	.word	0x0800739b
 8007320:	0800739b 	.word	0x0800739b
 8007324:	0800739b 	.word	0x0800739b
 8007328:	0800739b 	.word	0x0800739b
 800732c:	0800739b 	.word	0x0800739b
 8007330:	0800739b 	.word	0x0800739b
 8007334:	0800739b 	.word	0x0800739b
 8007338:	0800739b 	.word	0x0800739b
 800733c:	2b6e      	cmp	r3, #110	@ 0x6e
 800733e:	d809      	bhi.n	8007354 <_scanf_float+0x138>
 8007340:	2b60      	cmp	r3, #96	@ 0x60
 8007342:	d8b2      	bhi.n	80072aa <_scanf_float+0x8e>
 8007344:	2b54      	cmp	r3, #84	@ 0x54
 8007346:	d07b      	beq.n	8007440 <_scanf_float+0x224>
 8007348:	2b59      	cmp	r3, #89	@ 0x59
 800734a:	d199      	bne.n	8007280 <_scanf_float+0x64>
 800734c:	2d07      	cmp	r5, #7
 800734e:	d197      	bne.n	8007280 <_scanf_float+0x64>
 8007350:	2508      	movs	r5, #8
 8007352:	e02c      	b.n	80073ae <_scanf_float+0x192>
 8007354:	2b74      	cmp	r3, #116	@ 0x74
 8007356:	d073      	beq.n	8007440 <_scanf_float+0x224>
 8007358:	2b79      	cmp	r3, #121	@ 0x79
 800735a:	e7f6      	b.n	800734a <_scanf_float+0x12e>
 800735c:	6821      	ldr	r1, [r4, #0]
 800735e:	05c8      	lsls	r0, r1, #23
 8007360:	d51b      	bpl.n	800739a <_scanf_float+0x17e>
 8007362:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8007366:	6021      	str	r1, [r4, #0]
 8007368:	f109 0901 	add.w	r9, r9, #1
 800736c:	f1bb 0f00 	cmp.w	fp, #0
 8007370:	d003      	beq.n	800737a <_scanf_float+0x15e>
 8007372:	3201      	adds	r2, #1
 8007374:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007378:	60a2      	str	r2, [r4, #8]
 800737a:	68a3      	ldr	r3, [r4, #8]
 800737c:	3b01      	subs	r3, #1
 800737e:	60a3      	str	r3, [r4, #8]
 8007380:	6923      	ldr	r3, [r4, #16]
 8007382:	3301      	adds	r3, #1
 8007384:	6123      	str	r3, [r4, #16]
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	3b01      	subs	r3, #1
 800738a:	2b00      	cmp	r3, #0
 800738c:	607b      	str	r3, [r7, #4]
 800738e:	f340 8087 	ble.w	80074a0 <_scanf_float+0x284>
 8007392:	683b      	ldr	r3, [r7, #0]
 8007394:	3301      	adds	r3, #1
 8007396:	603b      	str	r3, [r7, #0]
 8007398:	e765      	b.n	8007266 <_scanf_float+0x4a>
 800739a:	eb1a 0105 	adds.w	r1, sl, r5
 800739e:	f47f af6f 	bne.w	8007280 <_scanf_float+0x64>
 80073a2:	6822      	ldr	r2, [r4, #0]
 80073a4:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 80073a8:	6022      	str	r2, [r4, #0]
 80073aa:	460d      	mov	r5, r1
 80073ac:	468a      	mov	sl, r1
 80073ae:	f806 3b01 	strb.w	r3, [r6], #1
 80073b2:	e7e2      	b.n	800737a <_scanf_float+0x15e>
 80073b4:	6822      	ldr	r2, [r4, #0]
 80073b6:	0610      	lsls	r0, r2, #24
 80073b8:	f57f af62 	bpl.w	8007280 <_scanf_float+0x64>
 80073bc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80073c0:	6022      	str	r2, [r4, #0]
 80073c2:	e7f4      	b.n	80073ae <_scanf_float+0x192>
 80073c4:	f1ba 0f00 	cmp.w	sl, #0
 80073c8:	d10e      	bne.n	80073e8 <_scanf_float+0x1cc>
 80073ca:	f1b9 0f00 	cmp.w	r9, #0
 80073ce:	d10e      	bne.n	80073ee <_scanf_float+0x1d2>
 80073d0:	6822      	ldr	r2, [r4, #0]
 80073d2:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80073d6:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80073da:	d108      	bne.n	80073ee <_scanf_float+0x1d2>
 80073dc:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80073e0:	6022      	str	r2, [r4, #0]
 80073e2:	f04f 0a01 	mov.w	sl, #1
 80073e6:	e7e2      	b.n	80073ae <_scanf_float+0x192>
 80073e8:	f1ba 0f02 	cmp.w	sl, #2
 80073ec:	d055      	beq.n	800749a <_scanf_float+0x27e>
 80073ee:	2d01      	cmp	r5, #1
 80073f0:	d002      	beq.n	80073f8 <_scanf_float+0x1dc>
 80073f2:	2d04      	cmp	r5, #4
 80073f4:	f47f af44 	bne.w	8007280 <_scanf_float+0x64>
 80073f8:	3501      	adds	r5, #1
 80073fa:	b2ed      	uxtb	r5, r5
 80073fc:	e7d7      	b.n	80073ae <_scanf_float+0x192>
 80073fe:	f1ba 0f01 	cmp.w	sl, #1
 8007402:	f47f af3d 	bne.w	8007280 <_scanf_float+0x64>
 8007406:	f04f 0a02 	mov.w	sl, #2
 800740a:	e7d0      	b.n	80073ae <_scanf_float+0x192>
 800740c:	b97d      	cbnz	r5, 800742e <_scanf_float+0x212>
 800740e:	f1b9 0f00 	cmp.w	r9, #0
 8007412:	f47f af38 	bne.w	8007286 <_scanf_float+0x6a>
 8007416:	6822      	ldr	r2, [r4, #0]
 8007418:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800741c:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8007420:	f040 8108 	bne.w	8007634 <_scanf_float+0x418>
 8007424:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8007428:	6022      	str	r2, [r4, #0]
 800742a:	2501      	movs	r5, #1
 800742c:	e7bf      	b.n	80073ae <_scanf_float+0x192>
 800742e:	2d03      	cmp	r5, #3
 8007430:	d0e2      	beq.n	80073f8 <_scanf_float+0x1dc>
 8007432:	2d05      	cmp	r5, #5
 8007434:	e7de      	b.n	80073f4 <_scanf_float+0x1d8>
 8007436:	2d02      	cmp	r5, #2
 8007438:	f47f af22 	bne.w	8007280 <_scanf_float+0x64>
 800743c:	2503      	movs	r5, #3
 800743e:	e7b6      	b.n	80073ae <_scanf_float+0x192>
 8007440:	2d06      	cmp	r5, #6
 8007442:	f47f af1d 	bne.w	8007280 <_scanf_float+0x64>
 8007446:	2507      	movs	r5, #7
 8007448:	e7b1      	b.n	80073ae <_scanf_float+0x192>
 800744a:	6822      	ldr	r2, [r4, #0]
 800744c:	0591      	lsls	r1, r2, #22
 800744e:	f57f af17 	bpl.w	8007280 <_scanf_float+0x64>
 8007452:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8007456:	6022      	str	r2, [r4, #0]
 8007458:	f8cd 9008 	str.w	r9, [sp, #8]
 800745c:	e7a7      	b.n	80073ae <_scanf_float+0x192>
 800745e:	6822      	ldr	r2, [r4, #0]
 8007460:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8007464:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8007468:	d006      	beq.n	8007478 <_scanf_float+0x25c>
 800746a:	0550      	lsls	r0, r2, #21
 800746c:	f57f af08 	bpl.w	8007280 <_scanf_float+0x64>
 8007470:	f1b9 0f00 	cmp.w	r9, #0
 8007474:	f000 80de 	beq.w	8007634 <_scanf_float+0x418>
 8007478:	0591      	lsls	r1, r2, #22
 800747a:	bf58      	it	pl
 800747c:	9902      	ldrpl	r1, [sp, #8]
 800747e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8007482:	bf58      	it	pl
 8007484:	eba9 0101 	subpl.w	r1, r9, r1
 8007488:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800748c:	bf58      	it	pl
 800748e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8007492:	6022      	str	r2, [r4, #0]
 8007494:	f04f 0900 	mov.w	r9, #0
 8007498:	e789      	b.n	80073ae <_scanf_float+0x192>
 800749a:	f04f 0a03 	mov.w	sl, #3
 800749e:	e786      	b.n	80073ae <_scanf_float+0x192>
 80074a0:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80074a4:	4639      	mov	r1, r7
 80074a6:	4640      	mov	r0, r8
 80074a8:	4798      	blx	r3
 80074aa:	2800      	cmp	r0, #0
 80074ac:	f43f aedb 	beq.w	8007266 <_scanf_float+0x4a>
 80074b0:	e6e6      	b.n	8007280 <_scanf_float+0x64>
 80074b2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80074b6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80074ba:	463a      	mov	r2, r7
 80074bc:	4640      	mov	r0, r8
 80074be:	4798      	blx	r3
 80074c0:	6923      	ldr	r3, [r4, #16]
 80074c2:	3b01      	subs	r3, #1
 80074c4:	6123      	str	r3, [r4, #16]
 80074c6:	e6e8      	b.n	800729a <_scanf_float+0x7e>
 80074c8:	1e6b      	subs	r3, r5, #1
 80074ca:	2b06      	cmp	r3, #6
 80074cc:	d824      	bhi.n	8007518 <_scanf_float+0x2fc>
 80074ce:	2d02      	cmp	r5, #2
 80074d0:	d836      	bhi.n	8007540 <_scanf_float+0x324>
 80074d2:	9b01      	ldr	r3, [sp, #4]
 80074d4:	429e      	cmp	r6, r3
 80074d6:	f67f aee4 	bls.w	80072a2 <_scanf_float+0x86>
 80074da:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80074de:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80074e2:	463a      	mov	r2, r7
 80074e4:	4640      	mov	r0, r8
 80074e6:	4798      	blx	r3
 80074e8:	6923      	ldr	r3, [r4, #16]
 80074ea:	3b01      	subs	r3, #1
 80074ec:	6123      	str	r3, [r4, #16]
 80074ee:	e7f0      	b.n	80074d2 <_scanf_float+0x2b6>
 80074f0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80074f4:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 80074f8:	463a      	mov	r2, r7
 80074fa:	4640      	mov	r0, r8
 80074fc:	4798      	blx	r3
 80074fe:	6923      	ldr	r3, [r4, #16]
 8007500:	3b01      	subs	r3, #1
 8007502:	6123      	str	r3, [r4, #16]
 8007504:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007508:	fa5f fa8a 	uxtb.w	sl, sl
 800750c:	f1ba 0f02 	cmp.w	sl, #2
 8007510:	d1ee      	bne.n	80074f0 <_scanf_float+0x2d4>
 8007512:	3d03      	subs	r5, #3
 8007514:	b2ed      	uxtb	r5, r5
 8007516:	1b76      	subs	r6, r6, r5
 8007518:	6823      	ldr	r3, [r4, #0]
 800751a:	05da      	lsls	r2, r3, #23
 800751c:	d530      	bpl.n	8007580 <_scanf_float+0x364>
 800751e:	055b      	lsls	r3, r3, #21
 8007520:	d511      	bpl.n	8007546 <_scanf_float+0x32a>
 8007522:	9b01      	ldr	r3, [sp, #4]
 8007524:	429e      	cmp	r6, r3
 8007526:	f67f aebc 	bls.w	80072a2 <_scanf_float+0x86>
 800752a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800752e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007532:	463a      	mov	r2, r7
 8007534:	4640      	mov	r0, r8
 8007536:	4798      	blx	r3
 8007538:	6923      	ldr	r3, [r4, #16]
 800753a:	3b01      	subs	r3, #1
 800753c:	6123      	str	r3, [r4, #16]
 800753e:	e7f0      	b.n	8007522 <_scanf_float+0x306>
 8007540:	46aa      	mov	sl, r5
 8007542:	46b3      	mov	fp, r6
 8007544:	e7de      	b.n	8007504 <_scanf_float+0x2e8>
 8007546:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800754a:	6923      	ldr	r3, [r4, #16]
 800754c:	2965      	cmp	r1, #101	@ 0x65
 800754e:	f103 33ff 	add.w	r3, r3, #4294967295
 8007552:	f106 35ff 	add.w	r5, r6, #4294967295
 8007556:	6123      	str	r3, [r4, #16]
 8007558:	d00c      	beq.n	8007574 <_scanf_float+0x358>
 800755a:	2945      	cmp	r1, #69	@ 0x45
 800755c:	d00a      	beq.n	8007574 <_scanf_float+0x358>
 800755e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007562:	463a      	mov	r2, r7
 8007564:	4640      	mov	r0, r8
 8007566:	4798      	blx	r3
 8007568:	6923      	ldr	r3, [r4, #16]
 800756a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800756e:	3b01      	subs	r3, #1
 8007570:	1eb5      	subs	r5, r6, #2
 8007572:	6123      	str	r3, [r4, #16]
 8007574:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007578:	463a      	mov	r2, r7
 800757a:	4640      	mov	r0, r8
 800757c:	4798      	blx	r3
 800757e:	462e      	mov	r6, r5
 8007580:	6822      	ldr	r2, [r4, #0]
 8007582:	f012 0210 	ands.w	r2, r2, #16
 8007586:	d001      	beq.n	800758c <_scanf_float+0x370>
 8007588:	2000      	movs	r0, #0
 800758a:	e68b      	b.n	80072a4 <_scanf_float+0x88>
 800758c:	7032      	strb	r2, [r6, #0]
 800758e:	6823      	ldr	r3, [r4, #0]
 8007590:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8007594:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007598:	d11c      	bne.n	80075d4 <_scanf_float+0x3b8>
 800759a:	9b02      	ldr	r3, [sp, #8]
 800759c:	454b      	cmp	r3, r9
 800759e:	eba3 0209 	sub.w	r2, r3, r9
 80075a2:	d123      	bne.n	80075ec <_scanf_float+0x3d0>
 80075a4:	9901      	ldr	r1, [sp, #4]
 80075a6:	2200      	movs	r2, #0
 80075a8:	4640      	mov	r0, r8
 80075aa:	f7ff f95d 	bl	8006868 <_strtod_r>
 80075ae:	9b03      	ldr	r3, [sp, #12]
 80075b0:	6821      	ldr	r1, [r4, #0]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	f011 0f02 	tst.w	r1, #2
 80075b8:	ec57 6b10 	vmov	r6, r7, d0
 80075bc:	f103 0204 	add.w	r2, r3, #4
 80075c0:	d01f      	beq.n	8007602 <_scanf_float+0x3e6>
 80075c2:	9903      	ldr	r1, [sp, #12]
 80075c4:	600a      	str	r2, [r1, #0]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	e9c3 6700 	strd	r6, r7, [r3]
 80075cc:	68e3      	ldr	r3, [r4, #12]
 80075ce:	3301      	adds	r3, #1
 80075d0:	60e3      	str	r3, [r4, #12]
 80075d2:	e7d9      	b.n	8007588 <_scanf_float+0x36c>
 80075d4:	9b04      	ldr	r3, [sp, #16]
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d0e4      	beq.n	80075a4 <_scanf_float+0x388>
 80075da:	9905      	ldr	r1, [sp, #20]
 80075dc:	230a      	movs	r3, #10
 80075de:	3101      	adds	r1, #1
 80075e0:	4640      	mov	r0, r8
 80075e2:	f7ff f9c1 	bl	8006968 <_strtol_r>
 80075e6:	9b04      	ldr	r3, [sp, #16]
 80075e8:	9e05      	ldr	r6, [sp, #20]
 80075ea:	1ac2      	subs	r2, r0, r3
 80075ec:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 80075f0:	429e      	cmp	r6, r3
 80075f2:	bf28      	it	cs
 80075f4:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 80075f8:	4910      	ldr	r1, [pc, #64]	@ (800763c <_scanf_float+0x420>)
 80075fa:	4630      	mov	r0, r6
 80075fc:	f000 f918 	bl	8007830 <siprintf>
 8007600:	e7d0      	b.n	80075a4 <_scanf_float+0x388>
 8007602:	f011 0f04 	tst.w	r1, #4
 8007606:	9903      	ldr	r1, [sp, #12]
 8007608:	600a      	str	r2, [r1, #0]
 800760a:	d1dc      	bne.n	80075c6 <_scanf_float+0x3aa>
 800760c:	681d      	ldr	r5, [r3, #0]
 800760e:	4632      	mov	r2, r6
 8007610:	463b      	mov	r3, r7
 8007612:	4630      	mov	r0, r6
 8007614:	4639      	mov	r1, r7
 8007616:	f7f9 fa89 	bl	8000b2c <__aeabi_dcmpun>
 800761a:	b128      	cbz	r0, 8007628 <_scanf_float+0x40c>
 800761c:	4808      	ldr	r0, [pc, #32]	@ (8007640 <_scanf_float+0x424>)
 800761e:	f000 fa6f 	bl	8007b00 <nanf>
 8007622:	ed85 0a00 	vstr	s0, [r5]
 8007626:	e7d1      	b.n	80075cc <_scanf_float+0x3b0>
 8007628:	4630      	mov	r0, r6
 800762a:	4639      	mov	r1, r7
 800762c:	f7f9 fadc 	bl	8000be8 <__aeabi_d2f>
 8007630:	6028      	str	r0, [r5, #0]
 8007632:	e7cb      	b.n	80075cc <_scanf_float+0x3b0>
 8007634:	f04f 0900 	mov.w	r9, #0
 8007638:	e629      	b.n	800728e <_scanf_float+0x72>
 800763a:	bf00      	nop
 800763c:	0800a7ed 	.word	0x0800a7ed
 8007640:	0800a5ae 	.word	0x0800a5ae

08007644 <std>:
 8007644:	2300      	movs	r3, #0
 8007646:	b510      	push	{r4, lr}
 8007648:	4604      	mov	r4, r0
 800764a:	e9c0 3300 	strd	r3, r3, [r0]
 800764e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007652:	6083      	str	r3, [r0, #8]
 8007654:	8181      	strh	r1, [r0, #12]
 8007656:	6643      	str	r3, [r0, #100]	@ 0x64
 8007658:	81c2      	strh	r2, [r0, #14]
 800765a:	6183      	str	r3, [r0, #24]
 800765c:	4619      	mov	r1, r3
 800765e:	2208      	movs	r2, #8
 8007660:	305c      	adds	r0, #92	@ 0x5c
 8007662:	f000 f981 	bl	8007968 <memset>
 8007666:	4b0d      	ldr	r3, [pc, #52]	@ (800769c <std+0x58>)
 8007668:	6263      	str	r3, [r4, #36]	@ 0x24
 800766a:	4b0d      	ldr	r3, [pc, #52]	@ (80076a0 <std+0x5c>)
 800766c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800766e:	4b0d      	ldr	r3, [pc, #52]	@ (80076a4 <std+0x60>)
 8007670:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007672:	4b0d      	ldr	r3, [pc, #52]	@ (80076a8 <std+0x64>)
 8007674:	6323      	str	r3, [r4, #48]	@ 0x30
 8007676:	4b0d      	ldr	r3, [pc, #52]	@ (80076ac <std+0x68>)
 8007678:	6224      	str	r4, [r4, #32]
 800767a:	429c      	cmp	r4, r3
 800767c:	d006      	beq.n	800768c <std+0x48>
 800767e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007682:	4294      	cmp	r4, r2
 8007684:	d002      	beq.n	800768c <std+0x48>
 8007686:	33d0      	adds	r3, #208	@ 0xd0
 8007688:	429c      	cmp	r4, r3
 800768a:	d105      	bne.n	8007698 <std+0x54>
 800768c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007690:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007694:	f7fa b9c5 	b.w	8001a22 <__retarget_lock_init_recursive>
 8007698:	bd10      	pop	{r4, pc}
 800769a:	bf00      	nop
 800769c:	08007871 	.word	0x08007871
 80076a0:	08007893 	.word	0x08007893
 80076a4:	080078cb 	.word	0x080078cb
 80076a8:	080078ef 	.word	0x080078ef
 80076ac:	20008a3c 	.word	0x20008a3c

080076b0 <stdio_exit_handler>:
 80076b0:	4a02      	ldr	r2, [pc, #8]	@ (80076bc <stdio_exit_handler+0xc>)
 80076b2:	4903      	ldr	r1, [pc, #12]	@ (80076c0 <stdio_exit_handler+0x10>)
 80076b4:	4803      	ldr	r0, [pc, #12]	@ (80076c4 <stdio_exit_handler+0x14>)
 80076b6:	f000 b869 	b.w	800778c <_fwalk_sglue>
 80076ba:	bf00      	nop
 80076bc:	20000010 	.word	0x20000010
 80076c0:	08009c09 	.word	0x08009c09
 80076c4:	2000018c 	.word	0x2000018c

080076c8 <cleanup_stdio>:
 80076c8:	6841      	ldr	r1, [r0, #4]
 80076ca:	4b0c      	ldr	r3, [pc, #48]	@ (80076fc <cleanup_stdio+0x34>)
 80076cc:	4299      	cmp	r1, r3
 80076ce:	b510      	push	{r4, lr}
 80076d0:	4604      	mov	r4, r0
 80076d2:	d001      	beq.n	80076d8 <cleanup_stdio+0x10>
 80076d4:	f002 fa98 	bl	8009c08 <_fflush_r>
 80076d8:	68a1      	ldr	r1, [r4, #8]
 80076da:	4b09      	ldr	r3, [pc, #36]	@ (8007700 <cleanup_stdio+0x38>)
 80076dc:	4299      	cmp	r1, r3
 80076de:	d002      	beq.n	80076e6 <cleanup_stdio+0x1e>
 80076e0:	4620      	mov	r0, r4
 80076e2:	f002 fa91 	bl	8009c08 <_fflush_r>
 80076e6:	68e1      	ldr	r1, [r4, #12]
 80076e8:	4b06      	ldr	r3, [pc, #24]	@ (8007704 <cleanup_stdio+0x3c>)
 80076ea:	4299      	cmp	r1, r3
 80076ec:	d004      	beq.n	80076f8 <cleanup_stdio+0x30>
 80076ee:	4620      	mov	r0, r4
 80076f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80076f4:	f002 ba88 	b.w	8009c08 <_fflush_r>
 80076f8:	bd10      	pop	{r4, pc}
 80076fa:	bf00      	nop
 80076fc:	20008a3c 	.word	0x20008a3c
 8007700:	20008aa4 	.word	0x20008aa4
 8007704:	20008b0c 	.word	0x20008b0c

08007708 <global_stdio_init.part.0>:
 8007708:	b510      	push	{r4, lr}
 800770a:	4b0b      	ldr	r3, [pc, #44]	@ (8007738 <global_stdio_init.part.0+0x30>)
 800770c:	4c0b      	ldr	r4, [pc, #44]	@ (800773c <global_stdio_init.part.0+0x34>)
 800770e:	4a0c      	ldr	r2, [pc, #48]	@ (8007740 <global_stdio_init.part.0+0x38>)
 8007710:	601a      	str	r2, [r3, #0]
 8007712:	4620      	mov	r0, r4
 8007714:	2200      	movs	r2, #0
 8007716:	2104      	movs	r1, #4
 8007718:	f7ff ff94 	bl	8007644 <std>
 800771c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007720:	2201      	movs	r2, #1
 8007722:	2109      	movs	r1, #9
 8007724:	f7ff ff8e 	bl	8007644 <std>
 8007728:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800772c:	2202      	movs	r2, #2
 800772e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007732:	2112      	movs	r1, #18
 8007734:	f7ff bf86 	b.w	8007644 <std>
 8007738:	20008b74 	.word	0x20008b74
 800773c:	20008a3c 	.word	0x20008a3c
 8007740:	080076b1 	.word	0x080076b1

08007744 <__sfp_lock_acquire>:
 8007744:	4801      	ldr	r0, [pc, #4]	@ (800774c <__sfp_lock_acquire+0x8>)
 8007746:	f7fa b988 	b.w	8001a5a <__retarget_lock_acquire_recursive>
 800774a:	bf00      	nop
 800774c:	20000ab0 	.word	0x20000ab0

08007750 <__sfp_lock_release>:
 8007750:	4801      	ldr	r0, [pc, #4]	@ (8007758 <__sfp_lock_release+0x8>)
 8007752:	f7fa b98e 	b.w	8001a72 <__retarget_lock_release_recursive>
 8007756:	bf00      	nop
 8007758:	20000ab0 	.word	0x20000ab0

0800775c <__sinit>:
 800775c:	b510      	push	{r4, lr}
 800775e:	4604      	mov	r4, r0
 8007760:	f7ff fff0 	bl	8007744 <__sfp_lock_acquire>
 8007764:	6a23      	ldr	r3, [r4, #32]
 8007766:	b11b      	cbz	r3, 8007770 <__sinit+0x14>
 8007768:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800776c:	f7ff bff0 	b.w	8007750 <__sfp_lock_release>
 8007770:	4b04      	ldr	r3, [pc, #16]	@ (8007784 <__sinit+0x28>)
 8007772:	6223      	str	r3, [r4, #32]
 8007774:	4b04      	ldr	r3, [pc, #16]	@ (8007788 <__sinit+0x2c>)
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	2b00      	cmp	r3, #0
 800777a:	d1f5      	bne.n	8007768 <__sinit+0xc>
 800777c:	f7ff ffc4 	bl	8007708 <global_stdio_init.part.0>
 8007780:	e7f2      	b.n	8007768 <__sinit+0xc>
 8007782:	bf00      	nop
 8007784:	080076c9 	.word	0x080076c9
 8007788:	20008b74 	.word	0x20008b74

0800778c <_fwalk_sglue>:
 800778c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007790:	4607      	mov	r7, r0
 8007792:	4688      	mov	r8, r1
 8007794:	4614      	mov	r4, r2
 8007796:	2600      	movs	r6, #0
 8007798:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800779c:	f1b9 0901 	subs.w	r9, r9, #1
 80077a0:	d505      	bpl.n	80077ae <_fwalk_sglue+0x22>
 80077a2:	6824      	ldr	r4, [r4, #0]
 80077a4:	2c00      	cmp	r4, #0
 80077a6:	d1f7      	bne.n	8007798 <_fwalk_sglue+0xc>
 80077a8:	4630      	mov	r0, r6
 80077aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80077ae:	89ab      	ldrh	r3, [r5, #12]
 80077b0:	2b01      	cmp	r3, #1
 80077b2:	d907      	bls.n	80077c4 <_fwalk_sglue+0x38>
 80077b4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80077b8:	3301      	adds	r3, #1
 80077ba:	d003      	beq.n	80077c4 <_fwalk_sglue+0x38>
 80077bc:	4629      	mov	r1, r5
 80077be:	4638      	mov	r0, r7
 80077c0:	47c0      	blx	r8
 80077c2:	4306      	orrs	r6, r0
 80077c4:	3568      	adds	r5, #104	@ 0x68
 80077c6:	e7e9      	b.n	800779c <_fwalk_sglue+0x10>

080077c8 <sniprintf>:
 80077c8:	b40c      	push	{r2, r3}
 80077ca:	b530      	push	{r4, r5, lr}
 80077cc:	4b17      	ldr	r3, [pc, #92]	@ (800782c <sniprintf+0x64>)
 80077ce:	1e0c      	subs	r4, r1, #0
 80077d0:	681d      	ldr	r5, [r3, #0]
 80077d2:	b09d      	sub	sp, #116	@ 0x74
 80077d4:	da08      	bge.n	80077e8 <sniprintf+0x20>
 80077d6:	238b      	movs	r3, #139	@ 0x8b
 80077d8:	602b      	str	r3, [r5, #0]
 80077da:	f04f 30ff 	mov.w	r0, #4294967295
 80077de:	b01d      	add	sp, #116	@ 0x74
 80077e0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80077e4:	b002      	add	sp, #8
 80077e6:	4770      	bx	lr
 80077e8:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80077ec:	f8ad 3014 	strh.w	r3, [sp, #20]
 80077f0:	bf14      	ite	ne
 80077f2:	f104 33ff 	addne.w	r3, r4, #4294967295
 80077f6:	4623      	moveq	r3, r4
 80077f8:	9304      	str	r3, [sp, #16]
 80077fa:	9307      	str	r3, [sp, #28]
 80077fc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007800:	9002      	str	r0, [sp, #8]
 8007802:	9006      	str	r0, [sp, #24]
 8007804:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007808:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800780a:	ab21      	add	r3, sp, #132	@ 0x84
 800780c:	a902      	add	r1, sp, #8
 800780e:	4628      	mov	r0, r5
 8007810:	9301      	str	r3, [sp, #4]
 8007812:	f002 f879 	bl	8009908 <_svfiprintf_r>
 8007816:	1c43      	adds	r3, r0, #1
 8007818:	bfbc      	itt	lt
 800781a:	238b      	movlt	r3, #139	@ 0x8b
 800781c:	602b      	strlt	r3, [r5, #0]
 800781e:	2c00      	cmp	r4, #0
 8007820:	d0dd      	beq.n	80077de <sniprintf+0x16>
 8007822:	9b02      	ldr	r3, [sp, #8]
 8007824:	2200      	movs	r2, #0
 8007826:	701a      	strb	r2, [r3, #0]
 8007828:	e7d9      	b.n	80077de <sniprintf+0x16>
 800782a:	bf00      	nop
 800782c:	20000188 	.word	0x20000188

08007830 <siprintf>:
 8007830:	b40e      	push	{r1, r2, r3}
 8007832:	b500      	push	{lr}
 8007834:	b09c      	sub	sp, #112	@ 0x70
 8007836:	ab1d      	add	r3, sp, #116	@ 0x74
 8007838:	9002      	str	r0, [sp, #8]
 800783a:	9006      	str	r0, [sp, #24]
 800783c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007840:	4809      	ldr	r0, [pc, #36]	@ (8007868 <siprintf+0x38>)
 8007842:	9107      	str	r1, [sp, #28]
 8007844:	9104      	str	r1, [sp, #16]
 8007846:	4909      	ldr	r1, [pc, #36]	@ (800786c <siprintf+0x3c>)
 8007848:	f853 2b04 	ldr.w	r2, [r3], #4
 800784c:	9105      	str	r1, [sp, #20]
 800784e:	6800      	ldr	r0, [r0, #0]
 8007850:	9301      	str	r3, [sp, #4]
 8007852:	a902      	add	r1, sp, #8
 8007854:	f002 f858 	bl	8009908 <_svfiprintf_r>
 8007858:	9b02      	ldr	r3, [sp, #8]
 800785a:	2200      	movs	r2, #0
 800785c:	701a      	strb	r2, [r3, #0]
 800785e:	b01c      	add	sp, #112	@ 0x70
 8007860:	f85d eb04 	ldr.w	lr, [sp], #4
 8007864:	b003      	add	sp, #12
 8007866:	4770      	bx	lr
 8007868:	20000188 	.word	0x20000188
 800786c:	ffff0208 	.word	0xffff0208

08007870 <__sread>:
 8007870:	b510      	push	{r4, lr}
 8007872:	460c      	mov	r4, r1
 8007874:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007878:	f000 f8cc 	bl	8007a14 <_read_r>
 800787c:	2800      	cmp	r0, #0
 800787e:	bfab      	itete	ge
 8007880:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007882:	89a3      	ldrhlt	r3, [r4, #12]
 8007884:	181b      	addge	r3, r3, r0
 8007886:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800788a:	bfac      	ite	ge
 800788c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800788e:	81a3      	strhlt	r3, [r4, #12]
 8007890:	bd10      	pop	{r4, pc}

08007892 <__swrite>:
 8007892:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007896:	461f      	mov	r7, r3
 8007898:	898b      	ldrh	r3, [r1, #12]
 800789a:	05db      	lsls	r3, r3, #23
 800789c:	4605      	mov	r5, r0
 800789e:	460c      	mov	r4, r1
 80078a0:	4616      	mov	r6, r2
 80078a2:	d505      	bpl.n	80078b0 <__swrite+0x1e>
 80078a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80078a8:	2302      	movs	r3, #2
 80078aa:	2200      	movs	r2, #0
 80078ac:	f000 f8a0 	bl	80079f0 <_lseek_r>
 80078b0:	89a3      	ldrh	r3, [r4, #12]
 80078b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80078b6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80078ba:	81a3      	strh	r3, [r4, #12]
 80078bc:	4632      	mov	r2, r6
 80078be:	463b      	mov	r3, r7
 80078c0:	4628      	mov	r0, r5
 80078c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80078c6:	f000 b8c7 	b.w	8007a58 <_write_r>

080078ca <__sseek>:
 80078ca:	b510      	push	{r4, lr}
 80078cc:	460c      	mov	r4, r1
 80078ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80078d2:	f000 f88d 	bl	80079f0 <_lseek_r>
 80078d6:	1c43      	adds	r3, r0, #1
 80078d8:	89a3      	ldrh	r3, [r4, #12]
 80078da:	bf15      	itete	ne
 80078dc:	6560      	strne	r0, [r4, #84]	@ 0x54
 80078de:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80078e2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80078e6:	81a3      	strheq	r3, [r4, #12]
 80078e8:	bf18      	it	ne
 80078ea:	81a3      	strhne	r3, [r4, #12]
 80078ec:	bd10      	pop	{r4, pc}

080078ee <__sclose>:
 80078ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80078f2:	f000 b86d 	b.w	80079d0 <_close_r>

080078f6 <_vsniprintf_r>:
 80078f6:	b530      	push	{r4, r5, lr}
 80078f8:	4614      	mov	r4, r2
 80078fa:	2c00      	cmp	r4, #0
 80078fc:	b09b      	sub	sp, #108	@ 0x6c
 80078fe:	4605      	mov	r5, r0
 8007900:	461a      	mov	r2, r3
 8007902:	da05      	bge.n	8007910 <_vsniprintf_r+0x1a>
 8007904:	238b      	movs	r3, #139	@ 0x8b
 8007906:	6003      	str	r3, [r0, #0]
 8007908:	f04f 30ff 	mov.w	r0, #4294967295
 800790c:	b01b      	add	sp, #108	@ 0x6c
 800790e:	bd30      	pop	{r4, r5, pc}
 8007910:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8007914:	f8ad 300c 	strh.w	r3, [sp, #12]
 8007918:	bf14      	ite	ne
 800791a:	f104 33ff 	addne.w	r3, r4, #4294967295
 800791e:	4623      	moveq	r3, r4
 8007920:	9302      	str	r3, [sp, #8]
 8007922:	9305      	str	r3, [sp, #20]
 8007924:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007928:	9100      	str	r1, [sp, #0]
 800792a:	9104      	str	r1, [sp, #16]
 800792c:	f8ad 300e 	strh.w	r3, [sp, #14]
 8007930:	4669      	mov	r1, sp
 8007932:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8007934:	f001 ffe8 	bl	8009908 <_svfiprintf_r>
 8007938:	1c43      	adds	r3, r0, #1
 800793a:	bfbc      	itt	lt
 800793c:	238b      	movlt	r3, #139	@ 0x8b
 800793e:	602b      	strlt	r3, [r5, #0]
 8007940:	2c00      	cmp	r4, #0
 8007942:	d0e3      	beq.n	800790c <_vsniprintf_r+0x16>
 8007944:	9b00      	ldr	r3, [sp, #0]
 8007946:	2200      	movs	r2, #0
 8007948:	701a      	strb	r2, [r3, #0]
 800794a:	e7df      	b.n	800790c <_vsniprintf_r+0x16>

0800794c <vsniprintf>:
 800794c:	b507      	push	{r0, r1, r2, lr}
 800794e:	9300      	str	r3, [sp, #0]
 8007950:	4613      	mov	r3, r2
 8007952:	460a      	mov	r2, r1
 8007954:	4601      	mov	r1, r0
 8007956:	4803      	ldr	r0, [pc, #12]	@ (8007964 <vsniprintf+0x18>)
 8007958:	6800      	ldr	r0, [r0, #0]
 800795a:	f7ff ffcc 	bl	80078f6 <_vsniprintf_r>
 800795e:	b003      	add	sp, #12
 8007960:	f85d fb04 	ldr.w	pc, [sp], #4
 8007964:	20000188 	.word	0x20000188

08007968 <memset>:
 8007968:	4402      	add	r2, r0
 800796a:	4603      	mov	r3, r0
 800796c:	4293      	cmp	r3, r2
 800796e:	d100      	bne.n	8007972 <memset+0xa>
 8007970:	4770      	bx	lr
 8007972:	f803 1b01 	strb.w	r1, [r3], #1
 8007976:	e7f9      	b.n	800796c <memset+0x4>

08007978 <strncmp>:
 8007978:	b510      	push	{r4, lr}
 800797a:	b16a      	cbz	r2, 8007998 <strncmp+0x20>
 800797c:	3901      	subs	r1, #1
 800797e:	1884      	adds	r4, r0, r2
 8007980:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007984:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8007988:	429a      	cmp	r2, r3
 800798a:	d103      	bne.n	8007994 <strncmp+0x1c>
 800798c:	42a0      	cmp	r0, r4
 800798e:	d001      	beq.n	8007994 <strncmp+0x1c>
 8007990:	2a00      	cmp	r2, #0
 8007992:	d1f5      	bne.n	8007980 <strncmp+0x8>
 8007994:	1ad0      	subs	r0, r2, r3
 8007996:	bd10      	pop	{r4, pc}
 8007998:	4610      	mov	r0, r2
 800799a:	e7fc      	b.n	8007996 <strncmp+0x1e>

0800799c <strstr>:
 800799c:	780a      	ldrb	r2, [r1, #0]
 800799e:	b570      	push	{r4, r5, r6, lr}
 80079a0:	b96a      	cbnz	r2, 80079be <strstr+0x22>
 80079a2:	bd70      	pop	{r4, r5, r6, pc}
 80079a4:	429a      	cmp	r2, r3
 80079a6:	d109      	bne.n	80079bc <strstr+0x20>
 80079a8:	460c      	mov	r4, r1
 80079aa:	4605      	mov	r5, r0
 80079ac:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d0f6      	beq.n	80079a2 <strstr+0x6>
 80079b4:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 80079b8:	429e      	cmp	r6, r3
 80079ba:	d0f7      	beq.n	80079ac <strstr+0x10>
 80079bc:	3001      	adds	r0, #1
 80079be:	7803      	ldrb	r3, [r0, #0]
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d1ef      	bne.n	80079a4 <strstr+0x8>
 80079c4:	4618      	mov	r0, r3
 80079c6:	e7ec      	b.n	80079a2 <strstr+0x6>

080079c8 <_localeconv_r>:
 80079c8:	4800      	ldr	r0, [pc, #0]	@ (80079cc <_localeconv_r+0x4>)
 80079ca:	4770      	bx	lr
 80079cc:	2000010c 	.word	0x2000010c

080079d0 <_close_r>:
 80079d0:	b538      	push	{r3, r4, r5, lr}
 80079d2:	4d06      	ldr	r5, [pc, #24]	@ (80079ec <_close_r+0x1c>)
 80079d4:	2300      	movs	r3, #0
 80079d6:	4604      	mov	r4, r0
 80079d8:	4608      	mov	r0, r1
 80079da:	602b      	str	r3, [r5, #0]
 80079dc:	f7f9 ff6e 	bl	80018bc <_close>
 80079e0:	1c43      	adds	r3, r0, #1
 80079e2:	d102      	bne.n	80079ea <_close_r+0x1a>
 80079e4:	682b      	ldr	r3, [r5, #0]
 80079e6:	b103      	cbz	r3, 80079ea <_close_r+0x1a>
 80079e8:	6023      	str	r3, [r4, #0]
 80079ea:	bd38      	pop	{r3, r4, r5, pc}
 80079ec:	20008b78 	.word	0x20008b78

080079f0 <_lseek_r>:
 80079f0:	b538      	push	{r3, r4, r5, lr}
 80079f2:	4d07      	ldr	r5, [pc, #28]	@ (8007a10 <_lseek_r+0x20>)
 80079f4:	4604      	mov	r4, r0
 80079f6:	4608      	mov	r0, r1
 80079f8:	4611      	mov	r1, r2
 80079fa:	2200      	movs	r2, #0
 80079fc:	602a      	str	r2, [r5, #0]
 80079fe:	461a      	mov	r2, r3
 8007a00:	f7f9 ff66 	bl	80018d0 <_lseek>
 8007a04:	1c43      	adds	r3, r0, #1
 8007a06:	d102      	bne.n	8007a0e <_lseek_r+0x1e>
 8007a08:	682b      	ldr	r3, [r5, #0]
 8007a0a:	b103      	cbz	r3, 8007a0e <_lseek_r+0x1e>
 8007a0c:	6023      	str	r3, [r4, #0]
 8007a0e:	bd38      	pop	{r3, r4, r5, pc}
 8007a10:	20008b78 	.word	0x20008b78

08007a14 <_read_r>:
 8007a14:	b538      	push	{r3, r4, r5, lr}
 8007a16:	4d07      	ldr	r5, [pc, #28]	@ (8007a34 <_read_r+0x20>)
 8007a18:	4604      	mov	r4, r0
 8007a1a:	4608      	mov	r0, r1
 8007a1c:	4611      	mov	r1, r2
 8007a1e:	2200      	movs	r2, #0
 8007a20:	602a      	str	r2, [r5, #0]
 8007a22:	461a      	mov	r2, r3
 8007a24:	f7f9 ff2e 	bl	8001884 <_read>
 8007a28:	1c43      	adds	r3, r0, #1
 8007a2a:	d102      	bne.n	8007a32 <_read_r+0x1e>
 8007a2c:	682b      	ldr	r3, [r5, #0]
 8007a2e:	b103      	cbz	r3, 8007a32 <_read_r+0x1e>
 8007a30:	6023      	str	r3, [r4, #0]
 8007a32:	bd38      	pop	{r3, r4, r5, pc}
 8007a34:	20008b78 	.word	0x20008b78

08007a38 <_sbrk_r>:
 8007a38:	b538      	push	{r3, r4, r5, lr}
 8007a3a:	4d06      	ldr	r5, [pc, #24]	@ (8007a54 <_sbrk_r+0x1c>)
 8007a3c:	2300      	movs	r3, #0
 8007a3e:	4604      	mov	r4, r0
 8007a40:	4608      	mov	r0, r1
 8007a42:	602b      	str	r3, [r5, #0]
 8007a44:	f7f9 ff46 	bl	80018d4 <_sbrk>
 8007a48:	1c43      	adds	r3, r0, #1
 8007a4a:	d102      	bne.n	8007a52 <_sbrk_r+0x1a>
 8007a4c:	682b      	ldr	r3, [r5, #0]
 8007a4e:	b103      	cbz	r3, 8007a52 <_sbrk_r+0x1a>
 8007a50:	6023      	str	r3, [r4, #0]
 8007a52:	bd38      	pop	{r3, r4, r5, pc}
 8007a54:	20008b78 	.word	0x20008b78

08007a58 <_write_r>:
 8007a58:	b538      	push	{r3, r4, r5, lr}
 8007a5a:	4d07      	ldr	r5, [pc, #28]	@ (8007a78 <_write_r+0x20>)
 8007a5c:	4604      	mov	r4, r0
 8007a5e:	4608      	mov	r0, r1
 8007a60:	4611      	mov	r1, r2
 8007a62:	2200      	movs	r2, #0
 8007a64:	602a      	str	r2, [r5, #0]
 8007a66:	461a      	mov	r2, r3
 8007a68:	f7f9 ff1a 	bl	80018a0 <_write>
 8007a6c:	1c43      	adds	r3, r0, #1
 8007a6e:	d102      	bne.n	8007a76 <_write_r+0x1e>
 8007a70:	682b      	ldr	r3, [r5, #0]
 8007a72:	b103      	cbz	r3, 8007a76 <_write_r+0x1e>
 8007a74:	6023      	str	r3, [r4, #0]
 8007a76:	bd38      	pop	{r3, r4, r5, pc}
 8007a78:	20008b78 	.word	0x20008b78

08007a7c <__errno>:
 8007a7c:	4b01      	ldr	r3, [pc, #4]	@ (8007a84 <__errno+0x8>)
 8007a7e:	6818      	ldr	r0, [r3, #0]
 8007a80:	4770      	bx	lr
 8007a82:	bf00      	nop
 8007a84:	20000188 	.word	0x20000188

08007a88 <__libc_init_array>:
 8007a88:	b570      	push	{r4, r5, r6, lr}
 8007a8a:	4d0d      	ldr	r5, [pc, #52]	@ (8007ac0 <__libc_init_array+0x38>)
 8007a8c:	4c0d      	ldr	r4, [pc, #52]	@ (8007ac4 <__libc_init_array+0x3c>)
 8007a8e:	1b64      	subs	r4, r4, r5
 8007a90:	10a4      	asrs	r4, r4, #2
 8007a92:	2600      	movs	r6, #0
 8007a94:	42a6      	cmp	r6, r4
 8007a96:	d109      	bne.n	8007aac <__libc_init_array+0x24>
 8007a98:	4d0b      	ldr	r5, [pc, #44]	@ (8007ac8 <__libc_init_array+0x40>)
 8007a9a:	4c0c      	ldr	r4, [pc, #48]	@ (8007acc <__libc_init_array+0x44>)
 8007a9c:	f002 fc14 	bl	800a2c8 <_init>
 8007aa0:	1b64      	subs	r4, r4, r5
 8007aa2:	10a4      	asrs	r4, r4, #2
 8007aa4:	2600      	movs	r6, #0
 8007aa6:	42a6      	cmp	r6, r4
 8007aa8:	d105      	bne.n	8007ab6 <__libc_init_array+0x2e>
 8007aaa:	bd70      	pop	{r4, r5, r6, pc}
 8007aac:	f855 3b04 	ldr.w	r3, [r5], #4
 8007ab0:	4798      	blx	r3
 8007ab2:	3601      	adds	r6, #1
 8007ab4:	e7ee      	b.n	8007a94 <__libc_init_array+0xc>
 8007ab6:	f855 3b04 	ldr.w	r3, [r5], #4
 8007aba:	4798      	blx	r3
 8007abc:	3601      	adds	r6, #1
 8007abe:	e7f2      	b.n	8007aa6 <__libc_init_array+0x1e>
 8007ac0:	0800aa98 	.word	0x0800aa98
 8007ac4:	0800aa98 	.word	0x0800aa98
 8007ac8:	0800aa98 	.word	0x0800aa98
 8007acc:	0800aa9c 	.word	0x0800aa9c

08007ad0 <memcpy>:
 8007ad0:	440a      	add	r2, r1
 8007ad2:	4291      	cmp	r1, r2
 8007ad4:	f100 33ff 	add.w	r3, r0, #4294967295
 8007ad8:	d100      	bne.n	8007adc <memcpy+0xc>
 8007ada:	4770      	bx	lr
 8007adc:	b510      	push	{r4, lr}
 8007ade:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007ae2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007ae6:	4291      	cmp	r1, r2
 8007ae8:	d1f9      	bne.n	8007ade <memcpy+0xe>
 8007aea:	bd10      	pop	{r4, pc}
 8007aec:	0000      	movs	r0, r0
	...

08007af0 <nan>:
 8007af0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8007af8 <nan+0x8>
 8007af4:	4770      	bx	lr
 8007af6:	bf00      	nop
 8007af8:	00000000 	.word	0x00000000
 8007afc:	7ff80000 	.word	0x7ff80000

08007b00 <nanf>:
 8007b00:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8007b08 <nanf+0x8>
 8007b04:	4770      	bx	lr
 8007b06:	bf00      	nop
 8007b08:	7fc00000 	.word	0x7fc00000

08007b0c <quorem>:
 8007b0c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b10:	6903      	ldr	r3, [r0, #16]
 8007b12:	690c      	ldr	r4, [r1, #16]
 8007b14:	42a3      	cmp	r3, r4
 8007b16:	4607      	mov	r7, r0
 8007b18:	db7e      	blt.n	8007c18 <quorem+0x10c>
 8007b1a:	3c01      	subs	r4, #1
 8007b1c:	f101 0814 	add.w	r8, r1, #20
 8007b20:	00a3      	lsls	r3, r4, #2
 8007b22:	f100 0514 	add.w	r5, r0, #20
 8007b26:	9300      	str	r3, [sp, #0]
 8007b28:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007b2c:	9301      	str	r3, [sp, #4]
 8007b2e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007b32:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007b36:	3301      	adds	r3, #1
 8007b38:	429a      	cmp	r2, r3
 8007b3a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007b3e:	fbb2 f6f3 	udiv	r6, r2, r3
 8007b42:	d32e      	bcc.n	8007ba2 <quorem+0x96>
 8007b44:	f04f 0a00 	mov.w	sl, #0
 8007b48:	46c4      	mov	ip, r8
 8007b4a:	46ae      	mov	lr, r5
 8007b4c:	46d3      	mov	fp, sl
 8007b4e:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007b52:	b298      	uxth	r0, r3
 8007b54:	fb06 a000 	mla	r0, r6, r0, sl
 8007b58:	0c02      	lsrs	r2, r0, #16
 8007b5a:	0c1b      	lsrs	r3, r3, #16
 8007b5c:	fb06 2303 	mla	r3, r6, r3, r2
 8007b60:	f8de 2000 	ldr.w	r2, [lr]
 8007b64:	b280      	uxth	r0, r0
 8007b66:	b292      	uxth	r2, r2
 8007b68:	1a12      	subs	r2, r2, r0
 8007b6a:	445a      	add	r2, fp
 8007b6c:	f8de 0000 	ldr.w	r0, [lr]
 8007b70:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007b74:	b29b      	uxth	r3, r3
 8007b76:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8007b7a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8007b7e:	b292      	uxth	r2, r2
 8007b80:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007b84:	45e1      	cmp	r9, ip
 8007b86:	f84e 2b04 	str.w	r2, [lr], #4
 8007b8a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8007b8e:	d2de      	bcs.n	8007b4e <quorem+0x42>
 8007b90:	9b00      	ldr	r3, [sp, #0]
 8007b92:	58eb      	ldr	r3, [r5, r3]
 8007b94:	b92b      	cbnz	r3, 8007ba2 <quorem+0x96>
 8007b96:	9b01      	ldr	r3, [sp, #4]
 8007b98:	3b04      	subs	r3, #4
 8007b9a:	429d      	cmp	r5, r3
 8007b9c:	461a      	mov	r2, r3
 8007b9e:	d32f      	bcc.n	8007c00 <quorem+0xf4>
 8007ba0:	613c      	str	r4, [r7, #16]
 8007ba2:	4638      	mov	r0, r7
 8007ba4:	f001 fc5a 	bl	800945c <__mcmp>
 8007ba8:	2800      	cmp	r0, #0
 8007baa:	db25      	blt.n	8007bf8 <quorem+0xec>
 8007bac:	4629      	mov	r1, r5
 8007bae:	2000      	movs	r0, #0
 8007bb0:	f858 2b04 	ldr.w	r2, [r8], #4
 8007bb4:	f8d1 c000 	ldr.w	ip, [r1]
 8007bb8:	fa1f fe82 	uxth.w	lr, r2
 8007bbc:	fa1f f38c 	uxth.w	r3, ip
 8007bc0:	eba3 030e 	sub.w	r3, r3, lr
 8007bc4:	4403      	add	r3, r0
 8007bc6:	0c12      	lsrs	r2, r2, #16
 8007bc8:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8007bcc:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8007bd0:	b29b      	uxth	r3, r3
 8007bd2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007bd6:	45c1      	cmp	r9, r8
 8007bd8:	f841 3b04 	str.w	r3, [r1], #4
 8007bdc:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007be0:	d2e6      	bcs.n	8007bb0 <quorem+0xa4>
 8007be2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007be6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007bea:	b922      	cbnz	r2, 8007bf6 <quorem+0xea>
 8007bec:	3b04      	subs	r3, #4
 8007bee:	429d      	cmp	r5, r3
 8007bf0:	461a      	mov	r2, r3
 8007bf2:	d30b      	bcc.n	8007c0c <quorem+0x100>
 8007bf4:	613c      	str	r4, [r7, #16]
 8007bf6:	3601      	adds	r6, #1
 8007bf8:	4630      	mov	r0, r6
 8007bfa:	b003      	add	sp, #12
 8007bfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c00:	6812      	ldr	r2, [r2, #0]
 8007c02:	3b04      	subs	r3, #4
 8007c04:	2a00      	cmp	r2, #0
 8007c06:	d1cb      	bne.n	8007ba0 <quorem+0x94>
 8007c08:	3c01      	subs	r4, #1
 8007c0a:	e7c6      	b.n	8007b9a <quorem+0x8e>
 8007c0c:	6812      	ldr	r2, [r2, #0]
 8007c0e:	3b04      	subs	r3, #4
 8007c10:	2a00      	cmp	r2, #0
 8007c12:	d1ef      	bne.n	8007bf4 <quorem+0xe8>
 8007c14:	3c01      	subs	r4, #1
 8007c16:	e7ea      	b.n	8007bee <quorem+0xe2>
 8007c18:	2000      	movs	r0, #0
 8007c1a:	e7ee      	b.n	8007bfa <quorem+0xee>
 8007c1c:	0000      	movs	r0, r0
	...

08007c20 <_dtoa_r>:
 8007c20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c24:	69c7      	ldr	r7, [r0, #28]
 8007c26:	b099      	sub	sp, #100	@ 0x64
 8007c28:	ed8d 0b02 	vstr	d0, [sp, #8]
 8007c2c:	ec55 4b10 	vmov	r4, r5, d0
 8007c30:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8007c32:	9109      	str	r1, [sp, #36]	@ 0x24
 8007c34:	4683      	mov	fp, r0
 8007c36:	920e      	str	r2, [sp, #56]	@ 0x38
 8007c38:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007c3a:	b97f      	cbnz	r7, 8007c5c <_dtoa_r+0x3c>
 8007c3c:	2010      	movs	r0, #16
 8007c3e:	f7fd ff59 	bl	8005af4 <malloc>
 8007c42:	4602      	mov	r2, r0
 8007c44:	f8cb 001c 	str.w	r0, [fp, #28]
 8007c48:	b920      	cbnz	r0, 8007c54 <_dtoa_r+0x34>
 8007c4a:	4ba7      	ldr	r3, [pc, #668]	@ (8007ee8 <_dtoa_r+0x2c8>)
 8007c4c:	21ef      	movs	r1, #239	@ 0xef
 8007c4e:	48a7      	ldr	r0, [pc, #668]	@ (8007eec <_dtoa_r+0x2cc>)
 8007c50:	f002 f81c 	bl	8009c8c <__assert_func>
 8007c54:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007c58:	6007      	str	r7, [r0, #0]
 8007c5a:	60c7      	str	r7, [r0, #12]
 8007c5c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007c60:	6819      	ldr	r1, [r3, #0]
 8007c62:	b159      	cbz	r1, 8007c7c <_dtoa_r+0x5c>
 8007c64:	685a      	ldr	r2, [r3, #4]
 8007c66:	604a      	str	r2, [r1, #4]
 8007c68:	2301      	movs	r3, #1
 8007c6a:	4093      	lsls	r3, r2
 8007c6c:	608b      	str	r3, [r1, #8]
 8007c6e:	4658      	mov	r0, fp
 8007c70:	f001 f970 	bl	8008f54 <_Bfree>
 8007c74:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007c78:	2200      	movs	r2, #0
 8007c7a:	601a      	str	r2, [r3, #0]
 8007c7c:	1e2b      	subs	r3, r5, #0
 8007c7e:	bfb9      	ittee	lt
 8007c80:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8007c84:	9303      	strlt	r3, [sp, #12]
 8007c86:	2300      	movge	r3, #0
 8007c88:	6033      	strge	r3, [r6, #0]
 8007c8a:	9f03      	ldr	r7, [sp, #12]
 8007c8c:	4b98      	ldr	r3, [pc, #608]	@ (8007ef0 <_dtoa_r+0x2d0>)
 8007c8e:	bfbc      	itt	lt
 8007c90:	2201      	movlt	r2, #1
 8007c92:	6032      	strlt	r2, [r6, #0]
 8007c94:	43bb      	bics	r3, r7
 8007c96:	d112      	bne.n	8007cbe <_dtoa_r+0x9e>
 8007c98:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8007c9a:	f242 730f 	movw	r3, #9999	@ 0x270f
 8007c9e:	6013      	str	r3, [r2, #0]
 8007ca0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007ca4:	4323      	orrs	r3, r4
 8007ca6:	f000 854d 	beq.w	8008744 <_dtoa_r+0xb24>
 8007caa:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007cac:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8007f04 <_dtoa_r+0x2e4>
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	f000 854f 	beq.w	8008754 <_dtoa_r+0xb34>
 8007cb6:	f10a 0303 	add.w	r3, sl, #3
 8007cba:	f000 bd49 	b.w	8008750 <_dtoa_r+0xb30>
 8007cbe:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007cc2:	2200      	movs	r2, #0
 8007cc4:	ec51 0b17 	vmov	r0, r1, d7
 8007cc8:	2300      	movs	r3, #0
 8007cca:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8007cce:	f7f8 fefb 	bl	8000ac8 <__aeabi_dcmpeq>
 8007cd2:	4680      	mov	r8, r0
 8007cd4:	b158      	cbz	r0, 8007cee <_dtoa_r+0xce>
 8007cd6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8007cd8:	2301      	movs	r3, #1
 8007cda:	6013      	str	r3, [r2, #0]
 8007cdc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007cde:	b113      	cbz	r3, 8007ce6 <_dtoa_r+0xc6>
 8007ce0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8007ce2:	4b84      	ldr	r3, [pc, #528]	@ (8007ef4 <_dtoa_r+0x2d4>)
 8007ce4:	6013      	str	r3, [r2, #0]
 8007ce6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8007f08 <_dtoa_r+0x2e8>
 8007cea:	f000 bd33 	b.w	8008754 <_dtoa_r+0xb34>
 8007cee:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8007cf2:	aa16      	add	r2, sp, #88	@ 0x58
 8007cf4:	a917      	add	r1, sp, #92	@ 0x5c
 8007cf6:	4658      	mov	r0, fp
 8007cf8:	f001 fcd0 	bl	800969c <__d2b>
 8007cfc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8007d00:	4681      	mov	r9, r0
 8007d02:	2e00      	cmp	r6, #0
 8007d04:	d077      	beq.n	8007df6 <_dtoa_r+0x1d6>
 8007d06:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007d08:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8007d0c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007d10:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007d14:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8007d18:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8007d1c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8007d20:	4619      	mov	r1, r3
 8007d22:	2200      	movs	r2, #0
 8007d24:	4b74      	ldr	r3, [pc, #464]	@ (8007ef8 <_dtoa_r+0x2d8>)
 8007d26:	f7f8 faaf 	bl	8000288 <__aeabi_dsub>
 8007d2a:	a369      	add	r3, pc, #420	@ (adr r3, 8007ed0 <_dtoa_r+0x2b0>)
 8007d2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d30:	f7f8 fc62 	bl	80005f8 <__aeabi_dmul>
 8007d34:	a368      	add	r3, pc, #416	@ (adr r3, 8007ed8 <_dtoa_r+0x2b8>)
 8007d36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d3a:	f7f8 faa7 	bl	800028c <__adddf3>
 8007d3e:	4604      	mov	r4, r0
 8007d40:	4630      	mov	r0, r6
 8007d42:	460d      	mov	r5, r1
 8007d44:	f7f8 fbee 	bl	8000524 <__aeabi_i2d>
 8007d48:	a365      	add	r3, pc, #404	@ (adr r3, 8007ee0 <_dtoa_r+0x2c0>)
 8007d4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d4e:	f7f8 fc53 	bl	80005f8 <__aeabi_dmul>
 8007d52:	4602      	mov	r2, r0
 8007d54:	460b      	mov	r3, r1
 8007d56:	4620      	mov	r0, r4
 8007d58:	4629      	mov	r1, r5
 8007d5a:	f7f8 fa97 	bl	800028c <__adddf3>
 8007d5e:	4604      	mov	r4, r0
 8007d60:	460d      	mov	r5, r1
 8007d62:	f7f8 fef9 	bl	8000b58 <__aeabi_d2iz>
 8007d66:	2200      	movs	r2, #0
 8007d68:	4607      	mov	r7, r0
 8007d6a:	2300      	movs	r3, #0
 8007d6c:	4620      	mov	r0, r4
 8007d6e:	4629      	mov	r1, r5
 8007d70:	f7f8 feb4 	bl	8000adc <__aeabi_dcmplt>
 8007d74:	b140      	cbz	r0, 8007d88 <_dtoa_r+0x168>
 8007d76:	4638      	mov	r0, r7
 8007d78:	f7f8 fbd4 	bl	8000524 <__aeabi_i2d>
 8007d7c:	4622      	mov	r2, r4
 8007d7e:	462b      	mov	r3, r5
 8007d80:	f7f8 fea2 	bl	8000ac8 <__aeabi_dcmpeq>
 8007d84:	b900      	cbnz	r0, 8007d88 <_dtoa_r+0x168>
 8007d86:	3f01      	subs	r7, #1
 8007d88:	2f16      	cmp	r7, #22
 8007d8a:	d851      	bhi.n	8007e30 <_dtoa_r+0x210>
 8007d8c:	4b5b      	ldr	r3, [pc, #364]	@ (8007efc <_dtoa_r+0x2dc>)
 8007d8e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007d92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d96:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007d9a:	f7f8 fe9f 	bl	8000adc <__aeabi_dcmplt>
 8007d9e:	2800      	cmp	r0, #0
 8007da0:	d048      	beq.n	8007e34 <_dtoa_r+0x214>
 8007da2:	3f01      	subs	r7, #1
 8007da4:	2300      	movs	r3, #0
 8007da6:	9312      	str	r3, [sp, #72]	@ 0x48
 8007da8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8007daa:	1b9b      	subs	r3, r3, r6
 8007dac:	1e5a      	subs	r2, r3, #1
 8007dae:	bf44      	itt	mi
 8007db0:	f1c3 0801 	rsbmi	r8, r3, #1
 8007db4:	2300      	movmi	r3, #0
 8007db6:	9208      	str	r2, [sp, #32]
 8007db8:	bf54      	ite	pl
 8007dba:	f04f 0800 	movpl.w	r8, #0
 8007dbe:	9308      	strmi	r3, [sp, #32]
 8007dc0:	2f00      	cmp	r7, #0
 8007dc2:	db39      	blt.n	8007e38 <_dtoa_r+0x218>
 8007dc4:	9b08      	ldr	r3, [sp, #32]
 8007dc6:	970f      	str	r7, [sp, #60]	@ 0x3c
 8007dc8:	443b      	add	r3, r7
 8007dca:	9308      	str	r3, [sp, #32]
 8007dcc:	2300      	movs	r3, #0
 8007dce:	930a      	str	r3, [sp, #40]	@ 0x28
 8007dd0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007dd2:	2b09      	cmp	r3, #9
 8007dd4:	d864      	bhi.n	8007ea0 <_dtoa_r+0x280>
 8007dd6:	2b05      	cmp	r3, #5
 8007dd8:	bfc4      	itt	gt
 8007dda:	3b04      	subgt	r3, #4
 8007ddc:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8007dde:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007de0:	f1a3 0302 	sub.w	r3, r3, #2
 8007de4:	bfcc      	ite	gt
 8007de6:	2400      	movgt	r4, #0
 8007de8:	2401      	movle	r4, #1
 8007dea:	2b03      	cmp	r3, #3
 8007dec:	d863      	bhi.n	8007eb6 <_dtoa_r+0x296>
 8007dee:	e8df f003 	tbb	[pc, r3]
 8007df2:	372a      	.short	0x372a
 8007df4:	5535      	.short	0x5535
 8007df6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8007dfa:	441e      	add	r6, r3
 8007dfc:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8007e00:	2b20      	cmp	r3, #32
 8007e02:	bfc1      	itttt	gt
 8007e04:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8007e08:	409f      	lslgt	r7, r3
 8007e0a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8007e0e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8007e12:	bfd6      	itet	le
 8007e14:	f1c3 0320 	rsble	r3, r3, #32
 8007e18:	ea47 0003 	orrgt.w	r0, r7, r3
 8007e1c:	fa04 f003 	lslle.w	r0, r4, r3
 8007e20:	f7f8 fb70 	bl	8000504 <__aeabi_ui2d>
 8007e24:	2201      	movs	r2, #1
 8007e26:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8007e2a:	3e01      	subs	r6, #1
 8007e2c:	9214      	str	r2, [sp, #80]	@ 0x50
 8007e2e:	e777      	b.n	8007d20 <_dtoa_r+0x100>
 8007e30:	2301      	movs	r3, #1
 8007e32:	e7b8      	b.n	8007da6 <_dtoa_r+0x186>
 8007e34:	9012      	str	r0, [sp, #72]	@ 0x48
 8007e36:	e7b7      	b.n	8007da8 <_dtoa_r+0x188>
 8007e38:	427b      	negs	r3, r7
 8007e3a:	930a      	str	r3, [sp, #40]	@ 0x28
 8007e3c:	2300      	movs	r3, #0
 8007e3e:	eba8 0807 	sub.w	r8, r8, r7
 8007e42:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007e44:	e7c4      	b.n	8007dd0 <_dtoa_r+0x1b0>
 8007e46:	2300      	movs	r3, #0
 8007e48:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007e4a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	dc35      	bgt.n	8007ebc <_dtoa_r+0x29c>
 8007e50:	2301      	movs	r3, #1
 8007e52:	9300      	str	r3, [sp, #0]
 8007e54:	9307      	str	r3, [sp, #28]
 8007e56:	461a      	mov	r2, r3
 8007e58:	920e      	str	r2, [sp, #56]	@ 0x38
 8007e5a:	e00b      	b.n	8007e74 <_dtoa_r+0x254>
 8007e5c:	2301      	movs	r3, #1
 8007e5e:	e7f3      	b.n	8007e48 <_dtoa_r+0x228>
 8007e60:	2300      	movs	r3, #0
 8007e62:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007e64:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007e66:	18fb      	adds	r3, r7, r3
 8007e68:	9300      	str	r3, [sp, #0]
 8007e6a:	3301      	adds	r3, #1
 8007e6c:	2b01      	cmp	r3, #1
 8007e6e:	9307      	str	r3, [sp, #28]
 8007e70:	bfb8      	it	lt
 8007e72:	2301      	movlt	r3, #1
 8007e74:	f8db 001c 	ldr.w	r0, [fp, #28]
 8007e78:	2100      	movs	r1, #0
 8007e7a:	2204      	movs	r2, #4
 8007e7c:	f102 0514 	add.w	r5, r2, #20
 8007e80:	429d      	cmp	r5, r3
 8007e82:	d91f      	bls.n	8007ec4 <_dtoa_r+0x2a4>
 8007e84:	6041      	str	r1, [r0, #4]
 8007e86:	4658      	mov	r0, fp
 8007e88:	f001 f824 	bl	8008ed4 <_Balloc>
 8007e8c:	4682      	mov	sl, r0
 8007e8e:	2800      	cmp	r0, #0
 8007e90:	d13c      	bne.n	8007f0c <_dtoa_r+0x2ec>
 8007e92:	4b1b      	ldr	r3, [pc, #108]	@ (8007f00 <_dtoa_r+0x2e0>)
 8007e94:	4602      	mov	r2, r0
 8007e96:	f240 11af 	movw	r1, #431	@ 0x1af
 8007e9a:	e6d8      	b.n	8007c4e <_dtoa_r+0x2e>
 8007e9c:	2301      	movs	r3, #1
 8007e9e:	e7e0      	b.n	8007e62 <_dtoa_r+0x242>
 8007ea0:	2401      	movs	r4, #1
 8007ea2:	2300      	movs	r3, #0
 8007ea4:	9309      	str	r3, [sp, #36]	@ 0x24
 8007ea6:	940b      	str	r4, [sp, #44]	@ 0x2c
 8007ea8:	f04f 33ff 	mov.w	r3, #4294967295
 8007eac:	9300      	str	r3, [sp, #0]
 8007eae:	9307      	str	r3, [sp, #28]
 8007eb0:	2200      	movs	r2, #0
 8007eb2:	2312      	movs	r3, #18
 8007eb4:	e7d0      	b.n	8007e58 <_dtoa_r+0x238>
 8007eb6:	2301      	movs	r3, #1
 8007eb8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007eba:	e7f5      	b.n	8007ea8 <_dtoa_r+0x288>
 8007ebc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007ebe:	9300      	str	r3, [sp, #0]
 8007ec0:	9307      	str	r3, [sp, #28]
 8007ec2:	e7d7      	b.n	8007e74 <_dtoa_r+0x254>
 8007ec4:	3101      	adds	r1, #1
 8007ec6:	0052      	lsls	r2, r2, #1
 8007ec8:	e7d8      	b.n	8007e7c <_dtoa_r+0x25c>
 8007eca:	bf00      	nop
 8007ecc:	f3af 8000 	nop.w
 8007ed0:	636f4361 	.word	0x636f4361
 8007ed4:	3fd287a7 	.word	0x3fd287a7
 8007ed8:	8b60c8b3 	.word	0x8b60c8b3
 8007edc:	3fc68a28 	.word	0x3fc68a28
 8007ee0:	509f79fb 	.word	0x509f79fb
 8007ee4:	3fd34413 	.word	0x3fd34413
 8007ee8:	0800a807 	.word	0x0800a807
 8007eec:	0800a81e 	.word	0x0800a81e
 8007ef0:	7ff00000 	.word	0x7ff00000
 8007ef4:	0800a7ca 	.word	0x0800a7ca
 8007ef8:	3ff80000 	.word	0x3ff80000
 8007efc:	0800a978 	.word	0x0800a978
 8007f00:	0800a876 	.word	0x0800a876
 8007f04:	0800a803 	.word	0x0800a803
 8007f08:	0800a7c9 	.word	0x0800a7c9
 8007f0c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007f10:	6018      	str	r0, [r3, #0]
 8007f12:	9b07      	ldr	r3, [sp, #28]
 8007f14:	2b0e      	cmp	r3, #14
 8007f16:	f200 80a4 	bhi.w	8008062 <_dtoa_r+0x442>
 8007f1a:	2c00      	cmp	r4, #0
 8007f1c:	f000 80a1 	beq.w	8008062 <_dtoa_r+0x442>
 8007f20:	2f00      	cmp	r7, #0
 8007f22:	dd33      	ble.n	8007f8c <_dtoa_r+0x36c>
 8007f24:	4bad      	ldr	r3, [pc, #692]	@ (80081dc <_dtoa_r+0x5bc>)
 8007f26:	f007 020f 	and.w	r2, r7, #15
 8007f2a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007f2e:	ed93 7b00 	vldr	d7, [r3]
 8007f32:	05f8      	lsls	r0, r7, #23
 8007f34:	ed8d 7b04 	vstr	d7, [sp, #16]
 8007f38:	ea4f 1427 	mov.w	r4, r7, asr #4
 8007f3c:	d516      	bpl.n	8007f6c <_dtoa_r+0x34c>
 8007f3e:	4ba8      	ldr	r3, [pc, #672]	@ (80081e0 <_dtoa_r+0x5c0>)
 8007f40:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007f44:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007f48:	f7f8 fc80 	bl	800084c <__aeabi_ddiv>
 8007f4c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007f50:	f004 040f 	and.w	r4, r4, #15
 8007f54:	2603      	movs	r6, #3
 8007f56:	4da2      	ldr	r5, [pc, #648]	@ (80081e0 <_dtoa_r+0x5c0>)
 8007f58:	b954      	cbnz	r4, 8007f70 <_dtoa_r+0x350>
 8007f5a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007f5e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007f62:	f7f8 fc73 	bl	800084c <__aeabi_ddiv>
 8007f66:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007f6a:	e028      	b.n	8007fbe <_dtoa_r+0x39e>
 8007f6c:	2602      	movs	r6, #2
 8007f6e:	e7f2      	b.n	8007f56 <_dtoa_r+0x336>
 8007f70:	07e1      	lsls	r1, r4, #31
 8007f72:	d508      	bpl.n	8007f86 <_dtoa_r+0x366>
 8007f74:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007f78:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007f7c:	f7f8 fb3c 	bl	80005f8 <__aeabi_dmul>
 8007f80:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007f84:	3601      	adds	r6, #1
 8007f86:	1064      	asrs	r4, r4, #1
 8007f88:	3508      	adds	r5, #8
 8007f8a:	e7e5      	b.n	8007f58 <_dtoa_r+0x338>
 8007f8c:	f000 80d2 	beq.w	8008134 <_dtoa_r+0x514>
 8007f90:	427c      	negs	r4, r7
 8007f92:	4b92      	ldr	r3, [pc, #584]	@ (80081dc <_dtoa_r+0x5bc>)
 8007f94:	4d92      	ldr	r5, [pc, #584]	@ (80081e0 <_dtoa_r+0x5c0>)
 8007f96:	f004 020f 	and.w	r2, r4, #15
 8007f9a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007f9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fa2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007fa6:	f7f8 fb27 	bl	80005f8 <__aeabi_dmul>
 8007faa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007fae:	1124      	asrs	r4, r4, #4
 8007fb0:	2300      	movs	r3, #0
 8007fb2:	2602      	movs	r6, #2
 8007fb4:	2c00      	cmp	r4, #0
 8007fb6:	f040 80b2 	bne.w	800811e <_dtoa_r+0x4fe>
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d1d3      	bne.n	8007f66 <_dtoa_r+0x346>
 8007fbe:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007fc0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	f000 80b7 	beq.w	8008138 <_dtoa_r+0x518>
 8007fca:	4b86      	ldr	r3, [pc, #536]	@ (80081e4 <_dtoa_r+0x5c4>)
 8007fcc:	2200      	movs	r2, #0
 8007fce:	4620      	mov	r0, r4
 8007fd0:	4629      	mov	r1, r5
 8007fd2:	f7f8 fd83 	bl	8000adc <__aeabi_dcmplt>
 8007fd6:	2800      	cmp	r0, #0
 8007fd8:	f000 80ae 	beq.w	8008138 <_dtoa_r+0x518>
 8007fdc:	9b07      	ldr	r3, [sp, #28]
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	f000 80aa 	beq.w	8008138 <_dtoa_r+0x518>
 8007fe4:	9b00      	ldr	r3, [sp, #0]
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	dd37      	ble.n	800805a <_dtoa_r+0x43a>
 8007fea:	1e7b      	subs	r3, r7, #1
 8007fec:	9304      	str	r3, [sp, #16]
 8007fee:	4620      	mov	r0, r4
 8007ff0:	4b7d      	ldr	r3, [pc, #500]	@ (80081e8 <_dtoa_r+0x5c8>)
 8007ff2:	2200      	movs	r2, #0
 8007ff4:	4629      	mov	r1, r5
 8007ff6:	f7f8 faff 	bl	80005f8 <__aeabi_dmul>
 8007ffa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007ffe:	9c00      	ldr	r4, [sp, #0]
 8008000:	3601      	adds	r6, #1
 8008002:	4630      	mov	r0, r6
 8008004:	f7f8 fa8e 	bl	8000524 <__aeabi_i2d>
 8008008:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800800c:	f7f8 faf4 	bl	80005f8 <__aeabi_dmul>
 8008010:	4b76      	ldr	r3, [pc, #472]	@ (80081ec <_dtoa_r+0x5cc>)
 8008012:	2200      	movs	r2, #0
 8008014:	f7f8 f93a 	bl	800028c <__adddf3>
 8008018:	4605      	mov	r5, r0
 800801a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800801e:	2c00      	cmp	r4, #0
 8008020:	f040 808d 	bne.w	800813e <_dtoa_r+0x51e>
 8008024:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008028:	4b71      	ldr	r3, [pc, #452]	@ (80081f0 <_dtoa_r+0x5d0>)
 800802a:	2200      	movs	r2, #0
 800802c:	f7f8 f92c 	bl	8000288 <__aeabi_dsub>
 8008030:	4602      	mov	r2, r0
 8008032:	460b      	mov	r3, r1
 8008034:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008038:	462a      	mov	r2, r5
 800803a:	4633      	mov	r3, r6
 800803c:	f7f8 fd6c 	bl	8000b18 <__aeabi_dcmpgt>
 8008040:	2800      	cmp	r0, #0
 8008042:	f040 828b 	bne.w	800855c <_dtoa_r+0x93c>
 8008046:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800804a:	462a      	mov	r2, r5
 800804c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8008050:	f7f8 fd44 	bl	8000adc <__aeabi_dcmplt>
 8008054:	2800      	cmp	r0, #0
 8008056:	f040 8128 	bne.w	80082aa <_dtoa_r+0x68a>
 800805a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800805e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8008062:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008064:	2b00      	cmp	r3, #0
 8008066:	f2c0 815a 	blt.w	800831e <_dtoa_r+0x6fe>
 800806a:	2f0e      	cmp	r7, #14
 800806c:	f300 8157 	bgt.w	800831e <_dtoa_r+0x6fe>
 8008070:	4b5a      	ldr	r3, [pc, #360]	@ (80081dc <_dtoa_r+0x5bc>)
 8008072:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008076:	ed93 7b00 	vldr	d7, [r3]
 800807a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800807c:	2b00      	cmp	r3, #0
 800807e:	ed8d 7b00 	vstr	d7, [sp]
 8008082:	da03      	bge.n	800808c <_dtoa_r+0x46c>
 8008084:	9b07      	ldr	r3, [sp, #28]
 8008086:	2b00      	cmp	r3, #0
 8008088:	f340 8101 	ble.w	800828e <_dtoa_r+0x66e>
 800808c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8008090:	4656      	mov	r6, sl
 8008092:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008096:	4620      	mov	r0, r4
 8008098:	4629      	mov	r1, r5
 800809a:	f7f8 fbd7 	bl	800084c <__aeabi_ddiv>
 800809e:	f7f8 fd5b 	bl	8000b58 <__aeabi_d2iz>
 80080a2:	4680      	mov	r8, r0
 80080a4:	f7f8 fa3e 	bl	8000524 <__aeabi_i2d>
 80080a8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80080ac:	f7f8 faa4 	bl	80005f8 <__aeabi_dmul>
 80080b0:	4602      	mov	r2, r0
 80080b2:	460b      	mov	r3, r1
 80080b4:	4620      	mov	r0, r4
 80080b6:	4629      	mov	r1, r5
 80080b8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80080bc:	f7f8 f8e4 	bl	8000288 <__aeabi_dsub>
 80080c0:	f806 4b01 	strb.w	r4, [r6], #1
 80080c4:	9d07      	ldr	r5, [sp, #28]
 80080c6:	eba6 040a 	sub.w	r4, r6, sl
 80080ca:	42a5      	cmp	r5, r4
 80080cc:	4602      	mov	r2, r0
 80080ce:	460b      	mov	r3, r1
 80080d0:	f040 8117 	bne.w	8008302 <_dtoa_r+0x6e2>
 80080d4:	f7f8 f8da 	bl	800028c <__adddf3>
 80080d8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80080dc:	4604      	mov	r4, r0
 80080de:	460d      	mov	r5, r1
 80080e0:	f7f8 fd1a 	bl	8000b18 <__aeabi_dcmpgt>
 80080e4:	2800      	cmp	r0, #0
 80080e6:	f040 80f9 	bne.w	80082dc <_dtoa_r+0x6bc>
 80080ea:	e9dd 2300 	ldrd	r2, r3, [sp]
 80080ee:	4620      	mov	r0, r4
 80080f0:	4629      	mov	r1, r5
 80080f2:	f7f8 fce9 	bl	8000ac8 <__aeabi_dcmpeq>
 80080f6:	b118      	cbz	r0, 8008100 <_dtoa_r+0x4e0>
 80080f8:	f018 0f01 	tst.w	r8, #1
 80080fc:	f040 80ee 	bne.w	80082dc <_dtoa_r+0x6bc>
 8008100:	4649      	mov	r1, r9
 8008102:	4658      	mov	r0, fp
 8008104:	f000 ff26 	bl	8008f54 <_Bfree>
 8008108:	2300      	movs	r3, #0
 800810a:	7033      	strb	r3, [r6, #0]
 800810c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800810e:	3701      	adds	r7, #1
 8008110:	601f      	str	r7, [r3, #0]
 8008112:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008114:	2b00      	cmp	r3, #0
 8008116:	f000 831d 	beq.w	8008754 <_dtoa_r+0xb34>
 800811a:	601e      	str	r6, [r3, #0]
 800811c:	e31a      	b.n	8008754 <_dtoa_r+0xb34>
 800811e:	07e2      	lsls	r2, r4, #31
 8008120:	d505      	bpl.n	800812e <_dtoa_r+0x50e>
 8008122:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008126:	f7f8 fa67 	bl	80005f8 <__aeabi_dmul>
 800812a:	3601      	adds	r6, #1
 800812c:	2301      	movs	r3, #1
 800812e:	1064      	asrs	r4, r4, #1
 8008130:	3508      	adds	r5, #8
 8008132:	e73f      	b.n	8007fb4 <_dtoa_r+0x394>
 8008134:	2602      	movs	r6, #2
 8008136:	e742      	b.n	8007fbe <_dtoa_r+0x39e>
 8008138:	9c07      	ldr	r4, [sp, #28]
 800813a:	9704      	str	r7, [sp, #16]
 800813c:	e761      	b.n	8008002 <_dtoa_r+0x3e2>
 800813e:	4b27      	ldr	r3, [pc, #156]	@ (80081dc <_dtoa_r+0x5bc>)
 8008140:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008142:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008146:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800814a:	4454      	add	r4, sl
 800814c:	2900      	cmp	r1, #0
 800814e:	d053      	beq.n	80081f8 <_dtoa_r+0x5d8>
 8008150:	4928      	ldr	r1, [pc, #160]	@ (80081f4 <_dtoa_r+0x5d4>)
 8008152:	2000      	movs	r0, #0
 8008154:	f7f8 fb7a 	bl	800084c <__aeabi_ddiv>
 8008158:	4633      	mov	r3, r6
 800815a:	462a      	mov	r2, r5
 800815c:	f7f8 f894 	bl	8000288 <__aeabi_dsub>
 8008160:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008164:	4656      	mov	r6, sl
 8008166:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800816a:	f7f8 fcf5 	bl	8000b58 <__aeabi_d2iz>
 800816e:	4605      	mov	r5, r0
 8008170:	f7f8 f9d8 	bl	8000524 <__aeabi_i2d>
 8008174:	4602      	mov	r2, r0
 8008176:	460b      	mov	r3, r1
 8008178:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800817c:	f7f8 f884 	bl	8000288 <__aeabi_dsub>
 8008180:	3530      	adds	r5, #48	@ 0x30
 8008182:	4602      	mov	r2, r0
 8008184:	460b      	mov	r3, r1
 8008186:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800818a:	f806 5b01 	strb.w	r5, [r6], #1
 800818e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008192:	f7f8 fca3 	bl	8000adc <__aeabi_dcmplt>
 8008196:	2800      	cmp	r0, #0
 8008198:	d171      	bne.n	800827e <_dtoa_r+0x65e>
 800819a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800819e:	4911      	ldr	r1, [pc, #68]	@ (80081e4 <_dtoa_r+0x5c4>)
 80081a0:	2000      	movs	r0, #0
 80081a2:	f7f8 f871 	bl	8000288 <__aeabi_dsub>
 80081a6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80081aa:	f7f8 fc97 	bl	8000adc <__aeabi_dcmplt>
 80081ae:	2800      	cmp	r0, #0
 80081b0:	f040 8095 	bne.w	80082de <_dtoa_r+0x6be>
 80081b4:	42a6      	cmp	r6, r4
 80081b6:	f43f af50 	beq.w	800805a <_dtoa_r+0x43a>
 80081ba:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80081be:	4b0a      	ldr	r3, [pc, #40]	@ (80081e8 <_dtoa_r+0x5c8>)
 80081c0:	2200      	movs	r2, #0
 80081c2:	f7f8 fa19 	bl	80005f8 <__aeabi_dmul>
 80081c6:	4b08      	ldr	r3, [pc, #32]	@ (80081e8 <_dtoa_r+0x5c8>)
 80081c8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80081cc:	2200      	movs	r2, #0
 80081ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80081d2:	f7f8 fa11 	bl	80005f8 <__aeabi_dmul>
 80081d6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80081da:	e7c4      	b.n	8008166 <_dtoa_r+0x546>
 80081dc:	0800a978 	.word	0x0800a978
 80081e0:	0800a950 	.word	0x0800a950
 80081e4:	3ff00000 	.word	0x3ff00000
 80081e8:	40240000 	.word	0x40240000
 80081ec:	401c0000 	.word	0x401c0000
 80081f0:	40140000 	.word	0x40140000
 80081f4:	3fe00000 	.word	0x3fe00000
 80081f8:	4631      	mov	r1, r6
 80081fa:	4628      	mov	r0, r5
 80081fc:	f7f8 f9fc 	bl	80005f8 <__aeabi_dmul>
 8008200:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008204:	9415      	str	r4, [sp, #84]	@ 0x54
 8008206:	4656      	mov	r6, sl
 8008208:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800820c:	f7f8 fca4 	bl	8000b58 <__aeabi_d2iz>
 8008210:	4605      	mov	r5, r0
 8008212:	f7f8 f987 	bl	8000524 <__aeabi_i2d>
 8008216:	4602      	mov	r2, r0
 8008218:	460b      	mov	r3, r1
 800821a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800821e:	f7f8 f833 	bl	8000288 <__aeabi_dsub>
 8008222:	3530      	adds	r5, #48	@ 0x30
 8008224:	f806 5b01 	strb.w	r5, [r6], #1
 8008228:	4602      	mov	r2, r0
 800822a:	460b      	mov	r3, r1
 800822c:	42a6      	cmp	r6, r4
 800822e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008232:	f04f 0200 	mov.w	r2, #0
 8008236:	d124      	bne.n	8008282 <_dtoa_r+0x662>
 8008238:	4bac      	ldr	r3, [pc, #688]	@ (80084ec <_dtoa_r+0x8cc>)
 800823a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800823e:	f7f8 f825 	bl	800028c <__adddf3>
 8008242:	4602      	mov	r2, r0
 8008244:	460b      	mov	r3, r1
 8008246:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800824a:	f7f8 fc65 	bl	8000b18 <__aeabi_dcmpgt>
 800824e:	2800      	cmp	r0, #0
 8008250:	d145      	bne.n	80082de <_dtoa_r+0x6be>
 8008252:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008256:	49a5      	ldr	r1, [pc, #660]	@ (80084ec <_dtoa_r+0x8cc>)
 8008258:	2000      	movs	r0, #0
 800825a:	f7f8 f815 	bl	8000288 <__aeabi_dsub>
 800825e:	4602      	mov	r2, r0
 8008260:	460b      	mov	r3, r1
 8008262:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008266:	f7f8 fc39 	bl	8000adc <__aeabi_dcmplt>
 800826a:	2800      	cmp	r0, #0
 800826c:	f43f aef5 	beq.w	800805a <_dtoa_r+0x43a>
 8008270:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8008272:	1e73      	subs	r3, r6, #1
 8008274:	9315      	str	r3, [sp, #84]	@ 0x54
 8008276:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800827a:	2b30      	cmp	r3, #48	@ 0x30
 800827c:	d0f8      	beq.n	8008270 <_dtoa_r+0x650>
 800827e:	9f04      	ldr	r7, [sp, #16]
 8008280:	e73e      	b.n	8008100 <_dtoa_r+0x4e0>
 8008282:	4b9b      	ldr	r3, [pc, #620]	@ (80084f0 <_dtoa_r+0x8d0>)
 8008284:	f7f8 f9b8 	bl	80005f8 <__aeabi_dmul>
 8008288:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800828c:	e7bc      	b.n	8008208 <_dtoa_r+0x5e8>
 800828e:	d10c      	bne.n	80082aa <_dtoa_r+0x68a>
 8008290:	4b98      	ldr	r3, [pc, #608]	@ (80084f4 <_dtoa_r+0x8d4>)
 8008292:	2200      	movs	r2, #0
 8008294:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008298:	f7f8 f9ae 	bl	80005f8 <__aeabi_dmul>
 800829c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80082a0:	f7f8 fc30 	bl	8000b04 <__aeabi_dcmpge>
 80082a4:	2800      	cmp	r0, #0
 80082a6:	f000 8157 	beq.w	8008558 <_dtoa_r+0x938>
 80082aa:	2400      	movs	r4, #0
 80082ac:	4625      	mov	r5, r4
 80082ae:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80082b0:	43db      	mvns	r3, r3
 80082b2:	9304      	str	r3, [sp, #16]
 80082b4:	4656      	mov	r6, sl
 80082b6:	2700      	movs	r7, #0
 80082b8:	4621      	mov	r1, r4
 80082ba:	4658      	mov	r0, fp
 80082bc:	f000 fe4a 	bl	8008f54 <_Bfree>
 80082c0:	2d00      	cmp	r5, #0
 80082c2:	d0dc      	beq.n	800827e <_dtoa_r+0x65e>
 80082c4:	b12f      	cbz	r7, 80082d2 <_dtoa_r+0x6b2>
 80082c6:	42af      	cmp	r7, r5
 80082c8:	d003      	beq.n	80082d2 <_dtoa_r+0x6b2>
 80082ca:	4639      	mov	r1, r7
 80082cc:	4658      	mov	r0, fp
 80082ce:	f000 fe41 	bl	8008f54 <_Bfree>
 80082d2:	4629      	mov	r1, r5
 80082d4:	4658      	mov	r0, fp
 80082d6:	f000 fe3d 	bl	8008f54 <_Bfree>
 80082da:	e7d0      	b.n	800827e <_dtoa_r+0x65e>
 80082dc:	9704      	str	r7, [sp, #16]
 80082de:	4633      	mov	r3, r6
 80082e0:	461e      	mov	r6, r3
 80082e2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80082e6:	2a39      	cmp	r2, #57	@ 0x39
 80082e8:	d107      	bne.n	80082fa <_dtoa_r+0x6da>
 80082ea:	459a      	cmp	sl, r3
 80082ec:	d1f8      	bne.n	80082e0 <_dtoa_r+0x6c0>
 80082ee:	9a04      	ldr	r2, [sp, #16]
 80082f0:	3201      	adds	r2, #1
 80082f2:	9204      	str	r2, [sp, #16]
 80082f4:	2230      	movs	r2, #48	@ 0x30
 80082f6:	f88a 2000 	strb.w	r2, [sl]
 80082fa:	781a      	ldrb	r2, [r3, #0]
 80082fc:	3201      	adds	r2, #1
 80082fe:	701a      	strb	r2, [r3, #0]
 8008300:	e7bd      	b.n	800827e <_dtoa_r+0x65e>
 8008302:	4b7b      	ldr	r3, [pc, #492]	@ (80084f0 <_dtoa_r+0x8d0>)
 8008304:	2200      	movs	r2, #0
 8008306:	f7f8 f977 	bl	80005f8 <__aeabi_dmul>
 800830a:	2200      	movs	r2, #0
 800830c:	2300      	movs	r3, #0
 800830e:	4604      	mov	r4, r0
 8008310:	460d      	mov	r5, r1
 8008312:	f7f8 fbd9 	bl	8000ac8 <__aeabi_dcmpeq>
 8008316:	2800      	cmp	r0, #0
 8008318:	f43f aebb 	beq.w	8008092 <_dtoa_r+0x472>
 800831c:	e6f0      	b.n	8008100 <_dtoa_r+0x4e0>
 800831e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8008320:	2a00      	cmp	r2, #0
 8008322:	f000 80db 	beq.w	80084dc <_dtoa_r+0x8bc>
 8008326:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008328:	2a01      	cmp	r2, #1
 800832a:	f300 80bf 	bgt.w	80084ac <_dtoa_r+0x88c>
 800832e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8008330:	2a00      	cmp	r2, #0
 8008332:	f000 80b7 	beq.w	80084a4 <_dtoa_r+0x884>
 8008336:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800833a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800833c:	4646      	mov	r6, r8
 800833e:	9a08      	ldr	r2, [sp, #32]
 8008340:	2101      	movs	r1, #1
 8008342:	441a      	add	r2, r3
 8008344:	4658      	mov	r0, fp
 8008346:	4498      	add	r8, r3
 8008348:	9208      	str	r2, [sp, #32]
 800834a:	f000 ff01 	bl	8009150 <__i2b>
 800834e:	4605      	mov	r5, r0
 8008350:	b15e      	cbz	r6, 800836a <_dtoa_r+0x74a>
 8008352:	9b08      	ldr	r3, [sp, #32]
 8008354:	2b00      	cmp	r3, #0
 8008356:	dd08      	ble.n	800836a <_dtoa_r+0x74a>
 8008358:	42b3      	cmp	r3, r6
 800835a:	9a08      	ldr	r2, [sp, #32]
 800835c:	bfa8      	it	ge
 800835e:	4633      	movge	r3, r6
 8008360:	eba8 0803 	sub.w	r8, r8, r3
 8008364:	1af6      	subs	r6, r6, r3
 8008366:	1ad3      	subs	r3, r2, r3
 8008368:	9308      	str	r3, [sp, #32]
 800836a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800836c:	b1f3      	cbz	r3, 80083ac <_dtoa_r+0x78c>
 800836e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008370:	2b00      	cmp	r3, #0
 8008372:	f000 80b7 	beq.w	80084e4 <_dtoa_r+0x8c4>
 8008376:	b18c      	cbz	r4, 800839c <_dtoa_r+0x77c>
 8008378:	4629      	mov	r1, r5
 800837a:	4622      	mov	r2, r4
 800837c:	4658      	mov	r0, fp
 800837e:	f000 ffa7 	bl	80092d0 <__pow5mult>
 8008382:	464a      	mov	r2, r9
 8008384:	4601      	mov	r1, r0
 8008386:	4605      	mov	r5, r0
 8008388:	4658      	mov	r0, fp
 800838a:	f000 fef7 	bl	800917c <__multiply>
 800838e:	4649      	mov	r1, r9
 8008390:	9004      	str	r0, [sp, #16]
 8008392:	4658      	mov	r0, fp
 8008394:	f000 fdde 	bl	8008f54 <_Bfree>
 8008398:	9b04      	ldr	r3, [sp, #16]
 800839a:	4699      	mov	r9, r3
 800839c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800839e:	1b1a      	subs	r2, r3, r4
 80083a0:	d004      	beq.n	80083ac <_dtoa_r+0x78c>
 80083a2:	4649      	mov	r1, r9
 80083a4:	4658      	mov	r0, fp
 80083a6:	f000 ff93 	bl	80092d0 <__pow5mult>
 80083aa:	4681      	mov	r9, r0
 80083ac:	2101      	movs	r1, #1
 80083ae:	4658      	mov	r0, fp
 80083b0:	f000 fece 	bl	8009150 <__i2b>
 80083b4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80083b6:	4604      	mov	r4, r0
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	f000 81cf 	beq.w	800875c <_dtoa_r+0xb3c>
 80083be:	461a      	mov	r2, r3
 80083c0:	4601      	mov	r1, r0
 80083c2:	4658      	mov	r0, fp
 80083c4:	f000 ff84 	bl	80092d0 <__pow5mult>
 80083c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80083ca:	2b01      	cmp	r3, #1
 80083cc:	4604      	mov	r4, r0
 80083ce:	f300 8095 	bgt.w	80084fc <_dtoa_r+0x8dc>
 80083d2:	9b02      	ldr	r3, [sp, #8]
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	f040 8087 	bne.w	80084e8 <_dtoa_r+0x8c8>
 80083da:	9b03      	ldr	r3, [sp, #12]
 80083dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	f040 8089 	bne.w	80084f8 <_dtoa_r+0x8d8>
 80083e6:	9b03      	ldr	r3, [sp, #12]
 80083e8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80083ec:	0d1b      	lsrs	r3, r3, #20
 80083ee:	051b      	lsls	r3, r3, #20
 80083f0:	b12b      	cbz	r3, 80083fe <_dtoa_r+0x7de>
 80083f2:	9b08      	ldr	r3, [sp, #32]
 80083f4:	3301      	adds	r3, #1
 80083f6:	9308      	str	r3, [sp, #32]
 80083f8:	f108 0801 	add.w	r8, r8, #1
 80083fc:	2301      	movs	r3, #1
 80083fe:	930a      	str	r3, [sp, #40]	@ 0x28
 8008400:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008402:	2b00      	cmp	r3, #0
 8008404:	f000 81b0 	beq.w	8008768 <_dtoa_r+0xb48>
 8008408:	6923      	ldr	r3, [r4, #16]
 800840a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800840e:	6918      	ldr	r0, [r3, #16]
 8008410:	f000 fe52 	bl	80090b8 <__hi0bits>
 8008414:	f1c0 0020 	rsb	r0, r0, #32
 8008418:	9b08      	ldr	r3, [sp, #32]
 800841a:	4418      	add	r0, r3
 800841c:	f010 001f 	ands.w	r0, r0, #31
 8008420:	d077      	beq.n	8008512 <_dtoa_r+0x8f2>
 8008422:	f1c0 0320 	rsb	r3, r0, #32
 8008426:	2b04      	cmp	r3, #4
 8008428:	dd6b      	ble.n	8008502 <_dtoa_r+0x8e2>
 800842a:	9b08      	ldr	r3, [sp, #32]
 800842c:	f1c0 001c 	rsb	r0, r0, #28
 8008430:	4403      	add	r3, r0
 8008432:	4480      	add	r8, r0
 8008434:	4406      	add	r6, r0
 8008436:	9308      	str	r3, [sp, #32]
 8008438:	f1b8 0f00 	cmp.w	r8, #0
 800843c:	dd05      	ble.n	800844a <_dtoa_r+0x82a>
 800843e:	4649      	mov	r1, r9
 8008440:	4642      	mov	r2, r8
 8008442:	4658      	mov	r0, fp
 8008444:	f000 ff9e 	bl	8009384 <__lshift>
 8008448:	4681      	mov	r9, r0
 800844a:	9b08      	ldr	r3, [sp, #32]
 800844c:	2b00      	cmp	r3, #0
 800844e:	dd05      	ble.n	800845c <_dtoa_r+0x83c>
 8008450:	4621      	mov	r1, r4
 8008452:	461a      	mov	r2, r3
 8008454:	4658      	mov	r0, fp
 8008456:	f000 ff95 	bl	8009384 <__lshift>
 800845a:	4604      	mov	r4, r0
 800845c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800845e:	2b00      	cmp	r3, #0
 8008460:	d059      	beq.n	8008516 <_dtoa_r+0x8f6>
 8008462:	4621      	mov	r1, r4
 8008464:	4648      	mov	r0, r9
 8008466:	f000 fff9 	bl	800945c <__mcmp>
 800846a:	2800      	cmp	r0, #0
 800846c:	da53      	bge.n	8008516 <_dtoa_r+0x8f6>
 800846e:	1e7b      	subs	r3, r7, #1
 8008470:	9304      	str	r3, [sp, #16]
 8008472:	4649      	mov	r1, r9
 8008474:	2300      	movs	r3, #0
 8008476:	220a      	movs	r2, #10
 8008478:	4658      	mov	r0, fp
 800847a:	f000 fd8d 	bl	8008f98 <__multadd>
 800847e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008480:	4681      	mov	r9, r0
 8008482:	2b00      	cmp	r3, #0
 8008484:	f000 8172 	beq.w	800876c <_dtoa_r+0xb4c>
 8008488:	2300      	movs	r3, #0
 800848a:	4629      	mov	r1, r5
 800848c:	220a      	movs	r2, #10
 800848e:	4658      	mov	r0, fp
 8008490:	f000 fd82 	bl	8008f98 <__multadd>
 8008494:	9b00      	ldr	r3, [sp, #0]
 8008496:	2b00      	cmp	r3, #0
 8008498:	4605      	mov	r5, r0
 800849a:	dc67      	bgt.n	800856c <_dtoa_r+0x94c>
 800849c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800849e:	2b02      	cmp	r3, #2
 80084a0:	dc41      	bgt.n	8008526 <_dtoa_r+0x906>
 80084a2:	e063      	b.n	800856c <_dtoa_r+0x94c>
 80084a4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80084a6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80084aa:	e746      	b.n	800833a <_dtoa_r+0x71a>
 80084ac:	9b07      	ldr	r3, [sp, #28]
 80084ae:	1e5c      	subs	r4, r3, #1
 80084b0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80084b2:	42a3      	cmp	r3, r4
 80084b4:	bfbf      	itttt	lt
 80084b6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80084b8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 80084ba:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80084bc:	1ae3      	sublt	r3, r4, r3
 80084be:	bfb4      	ite	lt
 80084c0:	18d2      	addlt	r2, r2, r3
 80084c2:	1b1c      	subge	r4, r3, r4
 80084c4:	9b07      	ldr	r3, [sp, #28]
 80084c6:	bfbc      	itt	lt
 80084c8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 80084ca:	2400      	movlt	r4, #0
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	bfb5      	itete	lt
 80084d0:	eba8 0603 	sublt.w	r6, r8, r3
 80084d4:	9b07      	ldrge	r3, [sp, #28]
 80084d6:	2300      	movlt	r3, #0
 80084d8:	4646      	movge	r6, r8
 80084da:	e730      	b.n	800833e <_dtoa_r+0x71e>
 80084dc:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80084de:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80084e0:	4646      	mov	r6, r8
 80084e2:	e735      	b.n	8008350 <_dtoa_r+0x730>
 80084e4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80084e6:	e75c      	b.n	80083a2 <_dtoa_r+0x782>
 80084e8:	2300      	movs	r3, #0
 80084ea:	e788      	b.n	80083fe <_dtoa_r+0x7de>
 80084ec:	3fe00000 	.word	0x3fe00000
 80084f0:	40240000 	.word	0x40240000
 80084f4:	40140000 	.word	0x40140000
 80084f8:	9b02      	ldr	r3, [sp, #8]
 80084fa:	e780      	b.n	80083fe <_dtoa_r+0x7de>
 80084fc:	2300      	movs	r3, #0
 80084fe:	930a      	str	r3, [sp, #40]	@ 0x28
 8008500:	e782      	b.n	8008408 <_dtoa_r+0x7e8>
 8008502:	d099      	beq.n	8008438 <_dtoa_r+0x818>
 8008504:	9a08      	ldr	r2, [sp, #32]
 8008506:	331c      	adds	r3, #28
 8008508:	441a      	add	r2, r3
 800850a:	4498      	add	r8, r3
 800850c:	441e      	add	r6, r3
 800850e:	9208      	str	r2, [sp, #32]
 8008510:	e792      	b.n	8008438 <_dtoa_r+0x818>
 8008512:	4603      	mov	r3, r0
 8008514:	e7f6      	b.n	8008504 <_dtoa_r+0x8e4>
 8008516:	9b07      	ldr	r3, [sp, #28]
 8008518:	9704      	str	r7, [sp, #16]
 800851a:	2b00      	cmp	r3, #0
 800851c:	dc20      	bgt.n	8008560 <_dtoa_r+0x940>
 800851e:	9300      	str	r3, [sp, #0]
 8008520:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008522:	2b02      	cmp	r3, #2
 8008524:	dd1e      	ble.n	8008564 <_dtoa_r+0x944>
 8008526:	9b00      	ldr	r3, [sp, #0]
 8008528:	2b00      	cmp	r3, #0
 800852a:	f47f aec0 	bne.w	80082ae <_dtoa_r+0x68e>
 800852e:	4621      	mov	r1, r4
 8008530:	2205      	movs	r2, #5
 8008532:	4658      	mov	r0, fp
 8008534:	f000 fd30 	bl	8008f98 <__multadd>
 8008538:	4601      	mov	r1, r0
 800853a:	4604      	mov	r4, r0
 800853c:	4648      	mov	r0, r9
 800853e:	f000 ff8d 	bl	800945c <__mcmp>
 8008542:	2800      	cmp	r0, #0
 8008544:	f77f aeb3 	ble.w	80082ae <_dtoa_r+0x68e>
 8008548:	4656      	mov	r6, sl
 800854a:	2331      	movs	r3, #49	@ 0x31
 800854c:	f806 3b01 	strb.w	r3, [r6], #1
 8008550:	9b04      	ldr	r3, [sp, #16]
 8008552:	3301      	adds	r3, #1
 8008554:	9304      	str	r3, [sp, #16]
 8008556:	e6ae      	b.n	80082b6 <_dtoa_r+0x696>
 8008558:	9c07      	ldr	r4, [sp, #28]
 800855a:	9704      	str	r7, [sp, #16]
 800855c:	4625      	mov	r5, r4
 800855e:	e7f3      	b.n	8008548 <_dtoa_r+0x928>
 8008560:	9b07      	ldr	r3, [sp, #28]
 8008562:	9300      	str	r3, [sp, #0]
 8008564:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008566:	2b00      	cmp	r3, #0
 8008568:	f000 8104 	beq.w	8008774 <_dtoa_r+0xb54>
 800856c:	2e00      	cmp	r6, #0
 800856e:	dd05      	ble.n	800857c <_dtoa_r+0x95c>
 8008570:	4629      	mov	r1, r5
 8008572:	4632      	mov	r2, r6
 8008574:	4658      	mov	r0, fp
 8008576:	f000 ff05 	bl	8009384 <__lshift>
 800857a:	4605      	mov	r5, r0
 800857c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800857e:	2b00      	cmp	r3, #0
 8008580:	d05a      	beq.n	8008638 <_dtoa_r+0xa18>
 8008582:	6869      	ldr	r1, [r5, #4]
 8008584:	4658      	mov	r0, fp
 8008586:	f000 fca5 	bl	8008ed4 <_Balloc>
 800858a:	4606      	mov	r6, r0
 800858c:	b928      	cbnz	r0, 800859a <_dtoa_r+0x97a>
 800858e:	4b84      	ldr	r3, [pc, #528]	@ (80087a0 <_dtoa_r+0xb80>)
 8008590:	4602      	mov	r2, r0
 8008592:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8008596:	f7ff bb5a 	b.w	8007c4e <_dtoa_r+0x2e>
 800859a:	692a      	ldr	r2, [r5, #16]
 800859c:	3202      	adds	r2, #2
 800859e:	0092      	lsls	r2, r2, #2
 80085a0:	f105 010c 	add.w	r1, r5, #12
 80085a4:	300c      	adds	r0, #12
 80085a6:	f7ff fa93 	bl	8007ad0 <memcpy>
 80085aa:	2201      	movs	r2, #1
 80085ac:	4631      	mov	r1, r6
 80085ae:	4658      	mov	r0, fp
 80085b0:	f000 fee8 	bl	8009384 <__lshift>
 80085b4:	f10a 0301 	add.w	r3, sl, #1
 80085b8:	9307      	str	r3, [sp, #28]
 80085ba:	9b00      	ldr	r3, [sp, #0]
 80085bc:	4453      	add	r3, sl
 80085be:	930b      	str	r3, [sp, #44]	@ 0x2c
 80085c0:	9b02      	ldr	r3, [sp, #8]
 80085c2:	f003 0301 	and.w	r3, r3, #1
 80085c6:	462f      	mov	r7, r5
 80085c8:	930a      	str	r3, [sp, #40]	@ 0x28
 80085ca:	4605      	mov	r5, r0
 80085cc:	9b07      	ldr	r3, [sp, #28]
 80085ce:	4621      	mov	r1, r4
 80085d0:	3b01      	subs	r3, #1
 80085d2:	4648      	mov	r0, r9
 80085d4:	9300      	str	r3, [sp, #0]
 80085d6:	f7ff fa99 	bl	8007b0c <quorem>
 80085da:	4639      	mov	r1, r7
 80085dc:	9002      	str	r0, [sp, #8]
 80085de:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80085e2:	4648      	mov	r0, r9
 80085e4:	f000 ff3a 	bl	800945c <__mcmp>
 80085e8:	462a      	mov	r2, r5
 80085ea:	9008      	str	r0, [sp, #32]
 80085ec:	4621      	mov	r1, r4
 80085ee:	4658      	mov	r0, fp
 80085f0:	f000 ff50 	bl	8009494 <__mdiff>
 80085f4:	68c2      	ldr	r2, [r0, #12]
 80085f6:	4606      	mov	r6, r0
 80085f8:	bb02      	cbnz	r2, 800863c <_dtoa_r+0xa1c>
 80085fa:	4601      	mov	r1, r0
 80085fc:	4648      	mov	r0, r9
 80085fe:	f000 ff2d 	bl	800945c <__mcmp>
 8008602:	4602      	mov	r2, r0
 8008604:	4631      	mov	r1, r6
 8008606:	4658      	mov	r0, fp
 8008608:	920e      	str	r2, [sp, #56]	@ 0x38
 800860a:	f000 fca3 	bl	8008f54 <_Bfree>
 800860e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008610:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008612:	9e07      	ldr	r6, [sp, #28]
 8008614:	ea43 0102 	orr.w	r1, r3, r2
 8008618:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800861a:	4319      	orrs	r1, r3
 800861c:	d110      	bne.n	8008640 <_dtoa_r+0xa20>
 800861e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008622:	d029      	beq.n	8008678 <_dtoa_r+0xa58>
 8008624:	9b08      	ldr	r3, [sp, #32]
 8008626:	2b00      	cmp	r3, #0
 8008628:	dd02      	ble.n	8008630 <_dtoa_r+0xa10>
 800862a:	9b02      	ldr	r3, [sp, #8]
 800862c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8008630:	9b00      	ldr	r3, [sp, #0]
 8008632:	f883 8000 	strb.w	r8, [r3]
 8008636:	e63f      	b.n	80082b8 <_dtoa_r+0x698>
 8008638:	4628      	mov	r0, r5
 800863a:	e7bb      	b.n	80085b4 <_dtoa_r+0x994>
 800863c:	2201      	movs	r2, #1
 800863e:	e7e1      	b.n	8008604 <_dtoa_r+0x9e4>
 8008640:	9b08      	ldr	r3, [sp, #32]
 8008642:	2b00      	cmp	r3, #0
 8008644:	db04      	blt.n	8008650 <_dtoa_r+0xa30>
 8008646:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008648:	430b      	orrs	r3, r1
 800864a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800864c:	430b      	orrs	r3, r1
 800864e:	d120      	bne.n	8008692 <_dtoa_r+0xa72>
 8008650:	2a00      	cmp	r2, #0
 8008652:	dded      	ble.n	8008630 <_dtoa_r+0xa10>
 8008654:	4649      	mov	r1, r9
 8008656:	2201      	movs	r2, #1
 8008658:	4658      	mov	r0, fp
 800865a:	f000 fe93 	bl	8009384 <__lshift>
 800865e:	4621      	mov	r1, r4
 8008660:	4681      	mov	r9, r0
 8008662:	f000 fefb 	bl	800945c <__mcmp>
 8008666:	2800      	cmp	r0, #0
 8008668:	dc03      	bgt.n	8008672 <_dtoa_r+0xa52>
 800866a:	d1e1      	bne.n	8008630 <_dtoa_r+0xa10>
 800866c:	f018 0f01 	tst.w	r8, #1
 8008670:	d0de      	beq.n	8008630 <_dtoa_r+0xa10>
 8008672:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008676:	d1d8      	bne.n	800862a <_dtoa_r+0xa0a>
 8008678:	9a00      	ldr	r2, [sp, #0]
 800867a:	2339      	movs	r3, #57	@ 0x39
 800867c:	7013      	strb	r3, [r2, #0]
 800867e:	4633      	mov	r3, r6
 8008680:	461e      	mov	r6, r3
 8008682:	3b01      	subs	r3, #1
 8008684:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8008688:	2a39      	cmp	r2, #57	@ 0x39
 800868a:	d052      	beq.n	8008732 <_dtoa_r+0xb12>
 800868c:	3201      	adds	r2, #1
 800868e:	701a      	strb	r2, [r3, #0]
 8008690:	e612      	b.n	80082b8 <_dtoa_r+0x698>
 8008692:	2a00      	cmp	r2, #0
 8008694:	dd07      	ble.n	80086a6 <_dtoa_r+0xa86>
 8008696:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800869a:	d0ed      	beq.n	8008678 <_dtoa_r+0xa58>
 800869c:	9a00      	ldr	r2, [sp, #0]
 800869e:	f108 0301 	add.w	r3, r8, #1
 80086a2:	7013      	strb	r3, [r2, #0]
 80086a4:	e608      	b.n	80082b8 <_dtoa_r+0x698>
 80086a6:	9b07      	ldr	r3, [sp, #28]
 80086a8:	9a07      	ldr	r2, [sp, #28]
 80086aa:	f803 8c01 	strb.w	r8, [r3, #-1]
 80086ae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80086b0:	4293      	cmp	r3, r2
 80086b2:	d028      	beq.n	8008706 <_dtoa_r+0xae6>
 80086b4:	4649      	mov	r1, r9
 80086b6:	2300      	movs	r3, #0
 80086b8:	220a      	movs	r2, #10
 80086ba:	4658      	mov	r0, fp
 80086bc:	f000 fc6c 	bl	8008f98 <__multadd>
 80086c0:	42af      	cmp	r7, r5
 80086c2:	4681      	mov	r9, r0
 80086c4:	f04f 0300 	mov.w	r3, #0
 80086c8:	f04f 020a 	mov.w	r2, #10
 80086cc:	4639      	mov	r1, r7
 80086ce:	4658      	mov	r0, fp
 80086d0:	d107      	bne.n	80086e2 <_dtoa_r+0xac2>
 80086d2:	f000 fc61 	bl	8008f98 <__multadd>
 80086d6:	4607      	mov	r7, r0
 80086d8:	4605      	mov	r5, r0
 80086da:	9b07      	ldr	r3, [sp, #28]
 80086dc:	3301      	adds	r3, #1
 80086de:	9307      	str	r3, [sp, #28]
 80086e0:	e774      	b.n	80085cc <_dtoa_r+0x9ac>
 80086e2:	f000 fc59 	bl	8008f98 <__multadd>
 80086e6:	4629      	mov	r1, r5
 80086e8:	4607      	mov	r7, r0
 80086ea:	2300      	movs	r3, #0
 80086ec:	220a      	movs	r2, #10
 80086ee:	4658      	mov	r0, fp
 80086f0:	f000 fc52 	bl	8008f98 <__multadd>
 80086f4:	4605      	mov	r5, r0
 80086f6:	e7f0      	b.n	80086da <_dtoa_r+0xaba>
 80086f8:	9b00      	ldr	r3, [sp, #0]
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	bfcc      	ite	gt
 80086fe:	461e      	movgt	r6, r3
 8008700:	2601      	movle	r6, #1
 8008702:	4456      	add	r6, sl
 8008704:	2700      	movs	r7, #0
 8008706:	4649      	mov	r1, r9
 8008708:	2201      	movs	r2, #1
 800870a:	4658      	mov	r0, fp
 800870c:	f000 fe3a 	bl	8009384 <__lshift>
 8008710:	4621      	mov	r1, r4
 8008712:	4681      	mov	r9, r0
 8008714:	f000 fea2 	bl	800945c <__mcmp>
 8008718:	2800      	cmp	r0, #0
 800871a:	dcb0      	bgt.n	800867e <_dtoa_r+0xa5e>
 800871c:	d102      	bne.n	8008724 <_dtoa_r+0xb04>
 800871e:	f018 0f01 	tst.w	r8, #1
 8008722:	d1ac      	bne.n	800867e <_dtoa_r+0xa5e>
 8008724:	4633      	mov	r3, r6
 8008726:	461e      	mov	r6, r3
 8008728:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800872c:	2a30      	cmp	r2, #48	@ 0x30
 800872e:	d0fa      	beq.n	8008726 <_dtoa_r+0xb06>
 8008730:	e5c2      	b.n	80082b8 <_dtoa_r+0x698>
 8008732:	459a      	cmp	sl, r3
 8008734:	d1a4      	bne.n	8008680 <_dtoa_r+0xa60>
 8008736:	9b04      	ldr	r3, [sp, #16]
 8008738:	3301      	adds	r3, #1
 800873a:	9304      	str	r3, [sp, #16]
 800873c:	2331      	movs	r3, #49	@ 0x31
 800873e:	f88a 3000 	strb.w	r3, [sl]
 8008742:	e5b9      	b.n	80082b8 <_dtoa_r+0x698>
 8008744:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008746:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80087a4 <_dtoa_r+0xb84>
 800874a:	b11b      	cbz	r3, 8008754 <_dtoa_r+0xb34>
 800874c:	f10a 0308 	add.w	r3, sl, #8
 8008750:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8008752:	6013      	str	r3, [r2, #0]
 8008754:	4650      	mov	r0, sl
 8008756:	b019      	add	sp, #100	@ 0x64
 8008758:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800875c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800875e:	2b01      	cmp	r3, #1
 8008760:	f77f ae37 	ble.w	80083d2 <_dtoa_r+0x7b2>
 8008764:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008766:	930a      	str	r3, [sp, #40]	@ 0x28
 8008768:	2001      	movs	r0, #1
 800876a:	e655      	b.n	8008418 <_dtoa_r+0x7f8>
 800876c:	9b00      	ldr	r3, [sp, #0]
 800876e:	2b00      	cmp	r3, #0
 8008770:	f77f aed6 	ble.w	8008520 <_dtoa_r+0x900>
 8008774:	4656      	mov	r6, sl
 8008776:	4621      	mov	r1, r4
 8008778:	4648      	mov	r0, r9
 800877a:	f7ff f9c7 	bl	8007b0c <quorem>
 800877e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008782:	f806 8b01 	strb.w	r8, [r6], #1
 8008786:	9b00      	ldr	r3, [sp, #0]
 8008788:	eba6 020a 	sub.w	r2, r6, sl
 800878c:	4293      	cmp	r3, r2
 800878e:	ddb3      	ble.n	80086f8 <_dtoa_r+0xad8>
 8008790:	4649      	mov	r1, r9
 8008792:	2300      	movs	r3, #0
 8008794:	220a      	movs	r2, #10
 8008796:	4658      	mov	r0, fp
 8008798:	f000 fbfe 	bl	8008f98 <__multadd>
 800879c:	4681      	mov	r9, r0
 800879e:	e7ea      	b.n	8008776 <_dtoa_r+0xb56>
 80087a0:	0800a876 	.word	0x0800a876
 80087a4:	0800a7fa 	.word	0x0800a7fa

080087a8 <_free_r>:
 80087a8:	b538      	push	{r3, r4, r5, lr}
 80087aa:	4605      	mov	r5, r0
 80087ac:	2900      	cmp	r1, #0
 80087ae:	d041      	beq.n	8008834 <_free_r+0x8c>
 80087b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80087b4:	1f0c      	subs	r4, r1, #4
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	bfb8      	it	lt
 80087ba:	18e4      	addlt	r4, r4, r3
 80087bc:	f7fd fa44 	bl	8005c48 <__malloc_lock>
 80087c0:	4a1d      	ldr	r2, [pc, #116]	@ (8008838 <_free_r+0x90>)
 80087c2:	6813      	ldr	r3, [r2, #0]
 80087c4:	b933      	cbnz	r3, 80087d4 <_free_r+0x2c>
 80087c6:	6063      	str	r3, [r4, #4]
 80087c8:	6014      	str	r4, [r2, #0]
 80087ca:	4628      	mov	r0, r5
 80087cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80087d0:	f7fd ba40 	b.w	8005c54 <__malloc_unlock>
 80087d4:	42a3      	cmp	r3, r4
 80087d6:	d908      	bls.n	80087ea <_free_r+0x42>
 80087d8:	6820      	ldr	r0, [r4, #0]
 80087da:	1821      	adds	r1, r4, r0
 80087dc:	428b      	cmp	r3, r1
 80087de:	bf01      	itttt	eq
 80087e0:	6819      	ldreq	r1, [r3, #0]
 80087e2:	685b      	ldreq	r3, [r3, #4]
 80087e4:	1809      	addeq	r1, r1, r0
 80087e6:	6021      	streq	r1, [r4, #0]
 80087e8:	e7ed      	b.n	80087c6 <_free_r+0x1e>
 80087ea:	461a      	mov	r2, r3
 80087ec:	685b      	ldr	r3, [r3, #4]
 80087ee:	b10b      	cbz	r3, 80087f4 <_free_r+0x4c>
 80087f0:	42a3      	cmp	r3, r4
 80087f2:	d9fa      	bls.n	80087ea <_free_r+0x42>
 80087f4:	6811      	ldr	r1, [r2, #0]
 80087f6:	1850      	adds	r0, r2, r1
 80087f8:	42a0      	cmp	r0, r4
 80087fa:	d10b      	bne.n	8008814 <_free_r+0x6c>
 80087fc:	6820      	ldr	r0, [r4, #0]
 80087fe:	4401      	add	r1, r0
 8008800:	1850      	adds	r0, r2, r1
 8008802:	4283      	cmp	r3, r0
 8008804:	6011      	str	r1, [r2, #0]
 8008806:	d1e0      	bne.n	80087ca <_free_r+0x22>
 8008808:	6818      	ldr	r0, [r3, #0]
 800880a:	685b      	ldr	r3, [r3, #4]
 800880c:	6053      	str	r3, [r2, #4]
 800880e:	4408      	add	r0, r1
 8008810:	6010      	str	r0, [r2, #0]
 8008812:	e7da      	b.n	80087ca <_free_r+0x22>
 8008814:	d902      	bls.n	800881c <_free_r+0x74>
 8008816:	230c      	movs	r3, #12
 8008818:	602b      	str	r3, [r5, #0]
 800881a:	e7d6      	b.n	80087ca <_free_r+0x22>
 800881c:	6820      	ldr	r0, [r4, #0]
 800881e:	1821      	adds	r1, r4, r0
 8008820:	428b      	cmp	r3, r1
 8008822:	bf04      	itt	eq
 8008824:	6819      	ldreq	r1, [r3, #0]
 8008826:	685b      	ldreq	r3, [r3, #4]
 8008828:	6063      	str	r3, [r4, #4]
 800882a:	bf04      	itt	eq
 800882c:	1809      	addeq	r1, r1, r0
 800882e:	6021      	streq	r1, [r4, #0]
 8008830:	6054      	str	r4, [r2, #4]
 8008832:	e7ca      	b.n	80087ca <_free_r+0x22>
 8008834:	bd38      	pop	{r3, r4, r5, pc}
 8008836:	bf00      	nop
 8008838:	20008a38 	.word	0x20008a38

0800883c <rshift>:
 800883c:	6903      	ldr	r3, [r0, #16]
 800883e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8008842:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008846:	ea4f 1261 	mov.w	r2, r1, asr #5
 800884a:	f100 0414 	add.w	r4, r0, #20
 800884e:	dd45      	ble.n	80088dc <rshift+0xa0>
 8008850:	f011 011f 	ands.w	r1, r1, #31
 8008854:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8008858:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800885c:	d10c      	bne.n	8008878 <rshift+0x3c>
 800885e:	f100 0710 	add.w	r7, r0, #16
 8008862:	4629      	mov	r1, r5
 8008864:	42b1      	cmp	r1, r6
 8008866:	d334      	bcc.n	80088d2 <rshift+0x96>
 8008868:	1a9b      	subs	r3, r3, r2
 800886a:	009b      	lsls	r3, r3, #2
 800886c:	1eea      	subs	r2, r5, #3
 800886e:	4296      	cmp	r6, r2
 8008870:	bf38      	it	cc
 8008872:	2300      	movcc	r3, #0
 8008874:	4423      	add	r3, r4
 8008876:	e015      	b.n	80088a4 <rshift+0x68>
 8008878:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800887c:	f1c1 0820 	rsb	r8, r1, #32
 8008880:	40cf      	lsrs	r7, r1
 8008882:	f105 0e04 	add.w	lr, r5, #4
 8008886:	46a1      	mov	r9, r4
 8008888:	4576      	cmp	r6, lr
 800888a:	46f4      	mov	ip, lr
 800888c:	d815      	bhi.n	80088ba <rshift+0x7e>
 800888e:	1a9a      	subs	r2, r3, r2
 8008890:	0092      	lsls	r2, r2, #2
 8008892:	3a04      	subs	r2, #4
 8008894:	3501      	adds	r5, #1
 8008896:	42ae      	cmp	r6, r5
 8008898:	bf38      	it	cc
 800889a:	2200      	movcc	r2, #0
 800889c:	18a3      	adds	r3, r4, r2
 800889e:	50a7      	str	r7, [r4, r2]
 80088a0:	b107      	cbz	r7, 80088a4 <rshift+0x68>
 80088a2:	3304      	adds	r3, #4
 80088a4:	1b1a      	subs	r2, r3, r4
 80088a6:	42a3      	cmp	r3, r4
 80088a8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80088ac:	bf08      	it	eq
 80088ae:	2300      	moveq	r3, #0
 80088b0:	6102      	str	r2, [r0, #16]
 80088b2:	bf08      	it	eq
 80088b4:	6143      	streq	r3, [r0, #20]
 80088b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80088ba:	f8dc c000 	ldr.w	ip, [ip]
 80088be:	fa0c fc08 	lsl.w	ip, ip, r8
 80088c2:	ea4c 0707 	orr.w	r7, ip, r7
 80088c6:	f849 7b04 	str.w	r7, [r9], #4
 80088ca:	f85e 7b04 	ldr.w	r7, [lr], #4
 80088ce:	40cf      	lsrs	r7, r1
 80088d0:	e7da      	b.n	8008888 <rshift+0x4c>
 80088d2:	f851 cb04 	ldr.w	ip, [r1], #4
 80088d6:	f847 cf04 	str.w	ip, [r7, #4]!
 80088da:	e7c3      	b.n	8008864 <rshift+0x28>
 80088dc:	4623      	mov	r3, r4
 80088de:	e7e1      	b.n	80088a4 <rshift+0x68>

080088e0 <__hexdig_fun>:
 80088e0:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 80088e4:	2b09      	cmp	r3, #9
 80088e6:	d802      	bhi.n	80088ee <__hexdig_fun+0xe>
 80088e8:	3820      	subs	r0, #32
 80088ea:	b2c0      	uxtb	r0, r0
 80088ec:	4770      	bx	lr
 80088ee:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 80088f2:	2b05      	cmp	r3, #5
 80088f4:	d801      	bhi.n	80088fa <__hexdig_fun+0x1a>
 80088f6:	3847      	subs	r0, #71	@ 0x47
 80088f8:	e7f7      	b.n	80088ea <__hexdig_fun+0xa>
 80088fa:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 80088fe:	2b05      	cmp	r3, #5
 8008900:	d801      	bhi.n	8008906 <__hexdig_fun+0x26>
 8008902:	3827      	subs	r0, #39	@ 0x27
 8008904:	e7f1      	b.n	80088ea <__hexdig_fun+0xa>
 8008906:	2000      	movs	r0, #0
 8008908:	4770      	bx	lr
	...

0800890c <__gethex>:
 800890c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008910:	b085      	sub	sp, #20
 8008912:	468a      	mov	sl, r1
 8008914:	9302      	str	r3, [sp, #8]
 8008916:	680b      	ldr	r3, [r1, #0]
 8008918:	9001      	str	r0, [sp, #4]
 800891a:	4690      	mov	r8, r2
 800891c:	1c9c      	adds	r4, r3, #2
 800891e:	46a1      	mov	r9, r4
 8008920:	f814 0b01 	ldrb.w	r0, [r4], #1
 8008924:	2830      	cmp	r0, #48	@ 0x30
 8008926:	d0fa      	beq.n	800891e <__gethex+0x12>
 8008928:	eba9 0303 	sub.w	r3, r9, r3
 800892c:	f1a3 0b02 	sub.w	fp, r3, #2
 8008930:	f7ff ffd6 	bl	80088e0 <__hexdig_fun>
 8008934:	4605      	mov	r5, r0
 8008936:	2800      	cmp	r0, #0
 8008938:	d168      	bne.n	8008a0c <__gethex+0x100>
 800893a:	49a0      	ldr	r1, [pc, #640]	@ (8008bbc <__gethex+0x2b0>)
 800893c:	2201      	movs	r2, #1
 800893e:	4648      	mov	r0, r9
 8008940:	f7ff f81a 	bl	8007978 <strncmp>
 8008944:	4607      	mov	r7, r0
 8008946:	2800      	cmp	r0, #0
 8008948:	d167      	bne.n	8008a1a <__gethex+0x10e>
 800894a:	f899 0001 	ldrb.w	r0, [r9, #1]
 800894e:	4626      	mov	r6, r4
 8008950:	f7ff ffc6 	bl	80088e0 <__hexdig_fun>
 8008954:	2800      	cmp	r0, #0
 8008956:	d062      	beq.n	8008a1e <__gethex+0x112>
 8008958:	4623      	mov	r3, r4
 800895a:	7818      	ldrb	r0, [r3, #0]
 800895c:	2830      	cmp	r0, #48	@ 0x30
 800895e:	4699      	mov	r9, r3
 8008960:	f103 0301 	add.w	r3, r3, #1
 8008964:	d0f9      	beq.n	800895a <__gethex+0x4e>
 8008966:	f7ff ffbb 	bl	80088e0 <__hexdig_fun>
 800896a:	fab0 f580 	clz	r5, r0
 800896e:	096d      	lsrs	r5, r5, #5
 8008970:	f04f 0b01 	mov.w	fp, #1
 8008974:	464a      	mov	r2, r9
 8008976:	4616      	mov	r6, r2
 8008978:	3201      	adds	r2, #1
 800897a:	7830      	ldrb	r0, [r6, #0]
 800897c:	f7ff ffb0 	bl	80088e0 <__hexdig_fun>
 8008980:	2800      	cmp	r0, #0
 8008982:	d1f8      	bne.n	8008976 <__gethex+0x6a>
 8008984:	498d      	ldr	r1, [pc, #564]	@ (8008bbc <__gethex+0x2b0>)
 8008986:	2201      	movs	r2, #1
 8008988:	4630      	mov	r0, r6
 800898a:	f7fe fff5 	bl	8007978 <strncmp>
 800898e:	2800      	cmp	r0, #0
 8008990:	d13f      	bne.n	8008a12 <__gethex+0x106>
 8008992:	b944      	cbnz	r4, 80089a6 <__gethex+0x9a>
 8008994:	1c74      	adds	r4, r6, #1
 8008996:	4622      	mov	r2, r4
 8008998:	4616      	mov	r6, r2
 800899a:	3201      	adds	r2, #1
 800899c:	7830      	ldrb	r0, [r6, #0]
 800899e:	f7ff ff9f 	bl	80088e0 <__hexdig_fun>
 80089a2:	2800      	cmp	r0, #0
 80089a4:	d1f8      	bne.n	8008998 <__gethex+0x8c>
 80089a6:	1ba4      	subs	r4, r4, r6
 80089a8:	00a7      	lsls	r7, r4, #2
 80089aa:	7833      	ldrb	r3, [r6, #0]
 80089ac:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 80089b0:	2b50      	cmp	r3, #80	@ 0x50
 80089b2:	d13e      	bne.n	8008a32 <__gethex+0x126>
 80089b4:	7873      	ldrb	r3, [r6, #1]
 80089b6:	2b2b      	cmp	r3, #43	@ 0x2b
 80089b8:	d033      	beq.n	8008a22 <__gethex+0x116>
 80089ba:	2b2d      	cmp	r3, #45	@ 0x2d
 80089bc:	d034      	beq.n	8008a28 <__gethex+0x11c>
 80089be:	1c71      	adds	r1, r6, #1
 80089c0:	2400      	movs	r4, #0
 80089c2:	7808      	ldrb	r0, [r1, #0]
 80089c4:	f7ff ff8c 	bl	80088e0 <__hexdig_fun>
 80089c8:	1e43      	subs	r3, r0, #1
 80089ca:	b2db      	uxtb	r3, r3
 80089cc:	2b18      	cmp	r3, #24
 80089ce:	d830      	bhi.n	8008a32 <__gethex+0x126>
 80089d0:	f1a0 0210 	sub.w	r2, r0, #16
 80089d4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80089d8:	f7ff ff82 	bl	80088e0 <__hexdig_fun>
 80089dc:	f100 3cff 	add.w	ip, r0, #4294967295
 80089e0:	fa5f fc8c 	uxtb.w	ip, ip
 80089e4:	f1bc 0f18 	cmp.w	ip, #24
 80089e8:	f04f 030a 	mov.w	r3, #10
 80089ec:	d91e      	bls.n	8008a2c <__gethex+0x120>
 80089ee:	b104      	cbz	r4, 80089f2 <__gethex+0xe6>
 80089f0:	4252      	negs	r2, r2
 80089f2:	4417      	add	r7, r2
 80089f4:	f8ca 1000 	str.w	r1, [sl]
 80089f8:	b1ed      	cbz	r5, 8008a36 <__gethex+0x12a>
 80089fa:	f1bb 0f00 	cmp.w	fp, #0
 80089fe:	bf0c      	ite	eq
 8008a00:	2506      	moveq	r5, #6
 8008a02:	2500      	movne	r5, #0
 8008a04:	4628      	mov	r0, r5
 8008a06:	b005      	add	sp, #20
 8008a08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a0c:	2500      	movs	r5, #0
 8008a0e:	462c      	mov	r4, r5
 8008a10:	e7b0      	b.n	8008974 <__gethex+0x68>
 8008a12:	2c00      	cmp	r4, #0
 8008a14:	d1c7      	bne.n	80089a6 <__gethex+0x9a>
 8008a16:	4627      	mov	r7, r4
 8008a18:	e7c7      	b.n	80089aa <__gethex+0x9e>
 8008a1a:	464e      	mov	r6, r9
 8008a1c:	462f      	mov	r7, r5
 8008a1e:	2501      	movs	r5, #1
 8008a20:	e7c3      	b.n	80089aa <__gethex+0x9e>
 8008a22:	2400      	movs	r4, #0
 8008a24:	1cb1      	adds	r1, r6, #2
 8008a26:	e7cc      	b.n	80089c2 <__gethex+0xb6>
 8008a28:	2401      	movs	r4, #1
 8008a2a:	e7fb      	b.n	8008a24 <__gethex+0x118>
 8008a2c:	fb03 0002 	mla	r0, r3, r2, r0
 8008a30:	e7ce      	b.n	80089d0 <__gethex+0xc4>
 8008a32:	4631      	mov	r1, r6
 8008a34:	e7de      	b.n	80089f4 <__gethex+0xe8>
 8008a36:	eba6 0309 	sub.w	r3, r6, r9
 8008a3a:	3b01      	subs	r3, #1
 8008a3c:	4629      	mov	r1, r5
 8008a3e:	2b07      	cmp	r3, #7
 8008a40:	dc0a      	bgt.n	8008a58 <__gethex+0x14c>
 8008a42:	9801      	ldr	r0, [sp, #4]
 8008a44:	f000 fa46 	bl	8008ed4 <_Balloc>
 8008a48:	4604      	mov	r4, r0
 8008a4a:	b940      	cbnz	r0, 8008a5e <__gethex+0x152>
 8008a4c:	4b5c      	ldr	r3, [pc, #368]	@ (8008bc0 <__gethex+0x2b4>)
 8008a4e:	4602      	mov	r2, r0
 8008a50:	21e4      	movs	r1, #228	@ 0xe4
 8008a52:	485c      	ldr	r0, [pc, #368]	@ (8008bc4 <__gethex+0x2b8>)
 8008a54:	f001 f91a 	bl	8009c8c <__assert_func>
 8008a58:	3101      	adds	r1, #1
 8008a5a:	105b      	asrs	r3, r3, #1
 8008a5c:	e7ef      	b.n	8008a3e <__gethex+0x132>
 8008a5e:	f100 0a14 	add.w	sl, r0, #20
 8008a62:	2300      	movs	r3, #0
 8008a64:	4655      	mov	r5, sl
 8008a66:	469b      	mov	fp, r3
 8008a68:	45b1      	cmp	r9, r6
 8008a6a:	d337      	bcc.n	8008adc <__gethex+0x1d0>
 8008a6c:	f845 bb04 	str.w	fp, [r5], #4
 8008a70:	eba5 050a 	sub.w	r5, r5, sl
 8008a74:	10ad      	asrs	r5, r5, #2
 8008a76:	6125      	str	r5, [r4, #16]
 8008a78:	4658      	mov	r0, fp
 8008a7a:	f000 fb1d 	bl	80090b8 <__hi0bits>
 8008a7e:	016d      	lsls	r5, r5, #5
 8008a80:	f8d8 6000 	ldr.w	r6, [r8]
 8008a84:	1a2d      	subs	r5, r5, r0
 8008a86:	42b5      	cmp	r5, r6
 8008a88:	dd54      	ble.n	8008b34 <__gethex+0x228>
 8008a8a:	1bad      	subs	r5, r5, r6
 8008a8c:	4629      	mov	r1, r5
 8008a8e:	4620      	mov	r0, r4
 8008a90:	f000 feb1 	bl	80097f6 <__any_on>
 8008a94:	4681      	mov	r9, r0
 8008a96:	b178      	cbz	r0, 8008ab8 <__gethex+0x1ac>
 8008a98:	1e6b      	subs	r3, r5, #1
 8008a9a:	1159      	asrs	r1, r3, #5
 8008a9c:	f003 021f 	and.w	r2, r3, #31
 8008aa0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8008aa4:	f04f 0901 	mov.w	r9, #1
 8008aa8:	fa09 f202 	lsl.w	r2, r9, r2
 8008aac:	420a      	tst	r2, r1
 8008aae:	d003      	beq.n	8008ab8 <__gethex+0x1ac>
 8008ab0:	454b      	cmp	r3, r9
 8008ab2:	dc36      	bgt.n	8008b22 <__gethex+0x216>
 8008ab4:	f04f 0902 	mov.w	r9, #2
 8008ab8:	4629      	mov	r1, r5
 8008aba:	4620      	mov	r0, r4
 8008abc:	f7ff febe 	bl	800883c <rshift>
 8008ac0:	442f      	add	r7, r5
 8008ac2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008ac6:	42bb      	cmp	r3, r7
 8008ac8:	da42      	bge.n	8008b50 <__gethex+0x244>
 8008aca:	9801      	ldr	r0, [sp, #4]
 8008acc:	4621      	mov	r1, r4
 8008ace:	f000 fa41 	bl	8008f54 <_Bfree>
 8008ad2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008ad4:	2300      	movs	r3, #0
 8008ad6:	6013      	str	r3, [r2, #0]
 8008ad8:	25a3      	movs	r5, #163	@ 0xa3
 8008ada:	e793      	b.n	8008a04 <__gethex+0xf8>
 8008adc:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8008ae0:	2a2e      	cmp	r2, #46	@ 0x2e
 8008ae2:	d012      	beq.n	8008b0a <__gethex+0x1fe>
 8008ae4:	2b20      	cmp	r3, #32
 8008ae6:	d104      	bne.n	8008af2 <__gethex+0x1e6>
 8008ae8:	f845 bb04 	str.w	fp, [r5], #4
 8008aec:	f04f 0b00 	mov.w	fp, #0
 8008af0:	465b      	mov	r3, fp
 8008af2:	7830      	ldrb	r0, [r6, #0]
 8008af4:	9303      	str	r3, [sp, #12]
 8008af6:	f7ff fef3 	bl	80088e0 <__hexdig_fun>
 8008afa:	9b03      	ldr	r3, [sp, #12]
 8008afc:	f000 000f 	and.w	r0, r0, #15
 8008b00:	4098      	lsls	r0, r3
 8008b02:	ea4b 0b00 	orr.w	fp, fp, r0
 8008b06:	3304      	adds	r3, #4
 8008b08:	e7ae      	b.n	8008a68 <__gethex+0x15c>
 8008b0a:	45b1      	cmp	r9, r6
 8008b0c:	d8ea      	bhi.n	8008ae4 <__gethex+0x1d8>
 8008b0e:	492b      	ldr	r1, [pc, #172]	@ (8008bbc <__gethex+0x2b0>)
 8008b10:	9303      	str	r3, [sp, #12]
 8008b12:	2201      	movs	r2, #1
 8008b14:	4630      	mov	r0, r6
 8008b16:	f7fe ff2f 	bl	8007978 <strncmp>
 8008b1a:	9b03      	ldr	r3, [sp, #12]
 8008b1c:	2800      	cmp	r0, #0
 8008b1e:	d1e1      	bne.n	8008ae4 <__gethex+0x1d8>
 8008b20:	e7a2      	b.n	8008a68 <__gethex+0x15c>
 8008b22:	1ea9      	subs	r1, r5, #2
 8008b24:	4620      	mov	r0, r4
 8008b26:	f000 fe66 	bl	80097f6 <__any_on>
 8008b2a:	2800      	cmp	r0, #0
 8008b2c:	d0c2      	beq.n	8008ab4 <__gethex+0x1a8>
 8008b2e:	f04f 0903 	mov.w	r9, #3
 8008b32:	e7c1      	b.n	8008ab8 <__gethex+0x1ac>
 8008b34:	da09      	bge.n	8008b4a <__gethex+0x23e>
 8008b36:	1b75      	subs	r5, r6, r5
 8008b38:	4621      	mov	r1, r4
 8008b3a:	9801      	ldr	r0, [sp, #4]
 8008b3c:	462a      	mov	r2, r5
 8008b3e:	f000 fc21 	bl	8009384 <__lshift>
 8008b42:	1b7f      	subs	r7, r7, r5
 8008b44:	4604      	mov	r4, r0
 8008b46:	f100 0a14 	add.w	sl, r0, #20
 8008b4a:	f04f 0900 	mov.w	r9, #0
 8008b4e:	e7b8      	b.n	8008ac2 <__gethex+0x1b6>
 8008b50:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8008b54:	42bd      	cmp	r5, r7
 8008b56:	dd6f      	ble.n	8008c38 <__gethex+0x32c>
 8008b58:	1bed      	subs	r5, r5, r7
 8008b5a:	42ae      	cmp	r6, r5
 8008b5c:	dc34      	bgt.n	8008bc8 <__gethex+0x2bc>
 8008b5e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008b62:	2b02      	cmp	r3, #2
 8008b64:	d022      	beq.n	8008bac <__gethex+0x2a0>
 8008b66:	2b03      	cmp	r3, #3
 8008b68:	d024      	beq.n	8008bb4 <__gethex+0x2a8>
 8008b6a:	2b01      	cmp	r3, #1
 8008b6c:	d115      	bne.n	8008b9a <__gethex+0x28e>
 8008b6e:	42ae      	cmp	r6, r5
 8008b70:	d113      	bne.n	8008b9a <__gethex+0x28e>
 8008b72:	2e01      	cmp	r6, #1
 8008b74:	d10b      	bne.n	8008b8e <__gethex+0x282>
 8008b76:	9a02      	ldr	r2, [sp, #8]
 8008b78:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8008b7c:	6013      	str	r3, [r2, #0]
 8008b7e:	2301      	movs	r3, #1
 8008b80:	6123      	str	r3, [r4, #16]
 8008b82:	f8ca 3000 	str.w	r3, [sl]
 8008b86:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008b88:	2562      	movs	r5, #98	@ 0x62
 8008b8a:	601c      	str	r4, [r3, #0]
 8008b8c:	e73a      	b.n	8008a04 <__gethex+0xf8>
 8008b8e:	1e71      	subs	r1, r6, #1
 8008b90:	4620      	mov	r0, r4
 8008b92:	f000 fe30 	bl	80097f6 <__any_on>
 8008b96:	2800      	cmp	r0, #0
 8008b98:	d1ed      	bne.n	8008b76 <__gethex+0x26a>
 8008b9a:	9801      	ldr	r0, [sp, #4]
 8008b9c:	4621      	mov	r1, r4
 8008b9e:	f000 f9d9 	bl	8008f54 <_Bfree>
 8008ba2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008ba4:	2300      	movs	r3, #0
 8008ba6:	6013      	str	r3, [r2, #0]
 8008ba8:	2550      	movs	r5, #80	@ 0x50
 8008baa:	e72b      	b.n	8008a04 <__gethex+0xf8>
 8008bac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d1f3      	bne.n	8008b9a <__gethex+0x28e>
 8008bb2:	e7e0      	b.n	8008b76 <__gethex+0x26a>
 8008bb4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d1dd      	bne.n	8008b76 <__gethex+0x26a>
 8008bba:	e7ee      	b.n	8008b9a <__gethex+0x28e>
 8008bbc:	0800a666 	.word	0x0800a666
 8008bc0:	0800a876 	.word	0x0800a876
 8008bc4:	0800a887 	.word	0x0800a887
 8008bc8:	1e6f      	subs	r7, r5, #1
 8008bca:	f1b9 0f00 	cmp.w	r9, #0
 8008bce:	d130      	bne.n	8008c32 <__gethex+0x326>
 8008bd0:	b127      	cbz	r7, 8008bdc <__gethex+0x2d0>
 8008bd2:	4639      	mov	r1, r7
 8008bd4:	4620      	mov	r0, r4
 8008bd6:	f000 fe0e 	bl	80097f6 <__any_on>
 8008bda:	4681      	mov	r9, r0
 8008bdc:	117a      	asrs	r2, r7, #5
 8008bde:	2301      	movs	r3, #1
 8008be0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8008be4:	f007 071f 	and.w	r7, r7, #31
 8008be8:	40bb      	lsls	r3, r7
 8008bea:	4213      	tst	r3, r2
 8008bec:	4629      	mov	r1, r5
 8008bee:	4620      	mov	r0, r4
 8008bf0:	bf18      	it	ne
 8008bf2:	f049 0902 	orrne.w	r9, r9, #2
 8008bf6:	f7ff fe21 	bl	800883c <rshift>
 8008bfa:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8008bfe:	1b76      	subs	r6, r6, r5
 8008c00:	2502      	movs	r5, #2
 8008c02:	f1b9 0f00 	cmp.w	r9, #0
 8008c06:	d047      	beq.n	8008c98 <__gethex+0x38c>
 8008c08:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008c0c:	2b02      	cmp	r3, #2
 8008c0e:	d015      	beq.n	8008c3c <__gethex+0x330>
 8008c10:	2b03      	cmp	r3, #3
 8008c12:	d017      	beq.n	8008c44 <__gethex+0x338>
 8008c14:	2b01      	cmp	r3, #1
 8008c16:	d109      	bne.n	8008c2c <__gethex+0x320>
 8008c18:	f019 0f02 	tst.w	r9, #2
 8008c1c:	d006      	beq.n	8008c2c <__gethex+0x320>
 8008c1e:	f8da 3000 	ldr.w	r3, [sl]
 8008c22:	ea49 0903 	orr.w	r9, r9, r3
 8008c26:	f019 0f01 	tst.w	r9, #1
 8008c2a:	d10e      	bne.n	8008c4a <__gethex+0x33e>
 8008c2c:	f045 0510 	orr.w	r5, r5, #16
 8008c30:	e032      	b.n	8008c98 <__gethex+0x38c>
 8008c32:	f04f 0901 	mov.w	r9, #1
 8008c36:	e7d1      	b.n	8008bdc <__gethex+0x2d0>
 8008c38:	2501      	movs	r5, #1
 8008c3a:	e7e2      	b.n	8008c02 <__gethex+0x2f6>
 8008c3c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008c3e:	f1c3 0301 	rsb	r3, r3, #1
 8008c42:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008c44:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d0f0      	beq.n	8008c2c <__gethex+0x320>
 8008c4a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8008c4e:	f104 0314 	add.w	r3, r4, #20
 8008c52:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8008c56:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8008c5a:	f04f 0c00 	mov.w	ip, #0
 8008c5e:	4618      	mov	r0, r3
 8008c60:	f853 2b04 	ldr.w	r2, [r3], #4
 8008c64:	f1b2 3fff 	cmp.w	r2, #4294967295
 8008c68:	d01b      	beq.n	8008ca2 <__gethex+0x396>
 8008c6a:	3201      	adds	r2, #1
 8008c6c:	6002      	str	r2, [r0, #0]
 8008c6e:	2d02      	cmp	r5, #2
 8008c70:	f104 0314 	add.w	r3, r4, #20
 8008c74:	d13c      	bne.n	8008cf0 <__gethex+0x3e4>
 8008c76:	f8d8 2000 	ldr.w	r2, [r8]
 8008c7a:	3a01      	subs	r2, #1
 8008c7c:	42b2      	cmp	r2, r6
 8008c7e:	d109      	bne.n	8008c94 <__gethex+0x388>
 8008c80:	1171      	asrs	r1, r6, #5
 8008c82:	2201      	movs	r2, #1
 8008c84:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008c88:	f006 061f 	and.w	r6, r6, #31
 8008c8c:	fa02 f606 	lsl.w	r6, r2, r6
 8008c90:	421e      	tst	r6, r3
 8008c92:	d13a      	bne.n	8008d0a <__gethex+0x3fe>
 8008c94:	f045 0520 	orr.w	r5, r5, #32
 8008c98:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008c9a:	601c      	str	r4, [r3, #0]
 8008c9c:	9b02      	ldr	r3, [sp, #8]
 8008c9e:	601f      	str	r7, [r3, #0]
 8008ca0:	e6b0      	b.n	8008a04 <__gethex+0xf8>
 8008ca2:	4299      	cmp	r1, r3
 8008ca4:	f843 cc04 	str.w	ip, [r3, #-4]
 8008ca8:	d8d9      	bhi.n	8008c5e <__gethex+0x352>
 8008caa:	68a3      	ldr	r3, [r4, #8]
 8008cac:	459b      	cmp	fp, r3
 8008cae:	db17      	blt.n	8008ce0 <__gethex+0x3d4>
 8008cb0:	6861      	ldr	r1, [r4, #4]
 8008cb2:	9801      	ldr	r0, [sp, #4]
 8008cb4:	3101      	adds	r1, #1
 8008cb6:	f000 f90d 	bl	8008ed4 <_Balloc>
 8008cba:	4681      	mov	r9, r0
 8008cbc:	b918      	cbnz	r0, 8008cc6 <__gethex+0x3ba>
 8008cbe:	4b1a      	ldr	r3, [pc, #104]	@ (8008d28 <__gethex+0x41c>)
 8008cc0:	4602      	mov	r2, r0
 8008cc2:	2184      	movs	r1, #132	@ 0x84
 8008cc4:	e6c5      	b.n	8008a52 <__gethex+0x146>
 8008cc6:	6922      	ldr	r2, [r4, #16]
 8008cc8:	3202      	adds	r2, #2
 8008cca:	f104 010c 	add.w	r1, r4, #12
 8008cce:	0092      	lsls	r2, r2, #2
 8008cd0:	300c      	adds	r0, #12
 8008cd2:	f7fe fefd 	bl	8007ad0 <memcpy>
 8008cd6:	4621      	mov	r1, r4
 8008cd8:	9801      	ldr	r0, [sp, #4]
 8008cda:	f000 f93b 	bl	8008f54 <_Bfree>
 8008cde:	464c      	mov	r4, r9
 8008ce0:	6923      	ldr	r3, [r4, #16]
 8008ce2:	1c5a      	adds	r2, r3, #1
 8008ce4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008ce8:	6122      	str	r2, [r4, #16]
 8008cea:	2201      	movs	r2, #1
 8008cec:	615a      	str	r2, [r3, #20]
 8008cee:	e7be      	b.n	8008c6e <__gethex+0x362>
 8008cf0:	6922      	ldr	r2, [r4, #16]
 8008cf2:	455a      	cmp	r2, fp
 8008cf4:	dd0b      	ble.n	8008d0e <__gethex+0x402>
 8008cf6:	2101      	movs	r1, #1
 8008cf8:	4620      	mov	r0, r4
 8008cfa:	f7ff fd9f 	bl	800883c <rshift>
 8008cfe:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008d02:	3701      	adds	r7, #1
 8008d04:	42bb      	cmp	r3, r7
 8008d06:	f6ff aee0 	blt.w	8008aca <__gethex+0x1be>
 8008d0a:	2501      	movs	r5, #1
 8008d0c:	e7c2      	b.n	8008c94 <__gethex+0x388>
 8008d0e:	f016 061f 	ands.w	r6, r6, #31
 8008d12:	d0fa      	beq.n	8008d0a <__gethex+0x3fe>
 8008d14:	4453      	add	r3, sl
 8008d16:	f1c6 0620 	rsb	r6, r6, #32
 8008d1a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8008d1e:	f000 f9cb 	bl	80090b8 <__hi0bits>
 8008d22:	42b0      	cmp	r0, r6
 8008d24:	dbe7      	blt.n	8008cf6 <__gethex+0x3ea>
 8008d26:	e7f0      	b.n	8008d0a <__gethex+0x3fe>
 8008d28:	0800a876 	.word	0x0800a876

08008d2c <L_shift>:
 8008d2c:	f1c2 0208 	rsb	r2, r2, #8
 8008d30:	0092      	lsls	r2, r2, #2
 8008d32:	b570      	push	{r4, r5, r6, lr}
 8008d34:	f1c2 0620 	rsb	r6, r2, #32
 8008d38:	6843      	ldr	r3, [r0, #4]
 8008d3a:	6804      	ldr	r4, [r0, #0]
 8008d3c:	fa03 f506 	lsl.w	r5, r3, r6
 8008d40:	432c      	orrs	r4, r5
 8008d42:	40d3      	lsrs	r3, r2
 8008d44:	6004      	str	r4, [r0, #0]
 8008d46:	f840 3f04 	str.w	r3, [r0, #4]!
 8008d4a:	4288      	cmp	r0, r1
 8008d4c:	d3f4      	bcc.n	8008d38 <L_shift+0xc>
 8008d4e:	bd70      	pop	{r4, r5, r6, pc}

08008d50 <__match>:
 8008d50:	b530      	push	{r4, r5, lr}
 8008d52:	6803      	ldr	r3, [r0, #0]
 8008d54:	3301      	adds	r3, #1
 8008d56:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008d5a:	b914      	cbnz	r4, 8008d62 <__match+0x12>
 8008d5c:	6003      	str	r3, [r0, #0]
 8008d5e:	2001      	movs	r0, #1
 8008d60:	bd30      	pop	{r4, r5, pc}
 8008d62:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008d66:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8008d6a:	2d19      	cmp	r5, #25
 8008d6c:	bf98      	it	ls
 8008d6e:	3220      	addls	r2, #32
 8008d70:	42a2      	cmp	r2, r4
 8008d72:	d0f0      	beq.n	8008d56 <__match+0x6>
 8008d74:	2000      	movs	r0, #0
 8008d76:	e7f3      	b.n	8008d60 <__match+0x10>

08008d78 <__hexnan>:
 8008d78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d7c:	680b      	ldr	r3, [r1, #0]
 8008d7e:	6801      	ldr	r1, [r0, #0]
 8008d80:	115e      	asrs	r6, r3, #5
 8008d82:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8008d86:	f013 031f 	ands.w	r3, r3, #31
 8008d8a:	b087      	sub	sp, #28
 8008d8c:	bf18      	it	ne
 8008d8e:	3604      	addne	r6, #4
 8008d90:	2500      	movs	r5, #0
 8008d92:	1f37      	subs	r7, r6, #4
 8008d94:	4682      	mov	sl, r0
 8008d96:	4690      	mov	r8, r2
 8008d98:	9301      	str	r3, [sp, #4]
 8008d9a:	f846 5c04 	str.w	r5, [r6, #-4]
 8008d9e:	46b9      	mov	r9, r7
 8008da0:	463c      	mov	r4, r7
 8008da2:	9502      	str	r5, [sp, #8]
 8008da4:	46ab      	mov	fp, r5
 8008da6:	784a      	ldrb	r2, [r1, #1]
 8008da8:	1c4b      	adds	r3, r1, #1
 8008daa:	9303      	str	r3, [sp, #12]
 8008dac:	b342      	cbz	r2, 8008e00 <__hexnan+0x88>
 8008dae:	4610      	mov	r0, r2
 8008db0:	9105      	str	r1, [sp, #20]
 8008db2:	9204      	str	r2, [sp, #16]
 8008db4:	f7ff fd94 	bl	80088e0 <__hexdig_fun>
 8008db8:	2800      	cmp	r0, #0
 8008dba:	d151      	bne.n	8008e60 <__hexnan+0xe8>
 8008dbc:	9a04      	ldr	r2, [sp, #16]
 8008dbe:	9905      	ldr	r1, [sp, #20]
 8008dc0:	2a20      	cmp	r2, #32
 8008dc2:	d818      	bhi.n	8008df6 <__hexnan+0x7e>
 8008dc4:	9b02      	ldr	r3, [sp, #8]
 8008dc6:	459b      	cmp	fp, r3
 8008dc8:	dd13      	ble.n	8008df2 <__hexnan+0x7a>
 8008dca:	454c      	cmp	r4, r9
 8008dcc:	d206      	bcs.n	8008ddc <__hexnan+0x64>
 8008dce:	2d07      	cmp	r5, #7
 8008dd0:	dc04      	bgt.n	8008ddc <__hexnan+0x64>
 8008dd2:	462a      	mov	r2, r5
 8008dd4:	4649      	mov	r1, r9
 8008dd6:	4620      	mov	r0, r4
 8008dd8:	f7ff ffa8 	bl	8008d2c <L_shift>
 8008ddc:	4544      	cmp	r4, r8
 8008dde:	d952      	bls.n	8008e86 <__hexnan+0x10e>
 8008de0:	2300      	movs	r3, #0
 8008de2:	f1a4 0904 	sub.w	r9, r4, #4
 8008de6:	f844 3c04 	str.w	r3, [r4, #-4]
 8008dea:	f8cd b008 	str.w	fp, [sp, #8]
 8008dee:	464c      	mov	r4, r9
 8008df0:	461d      	mov	r5, r3
 8008df2:	9903      	ldr	r1, [sp, #12]
 8008df4:	e7d7      	b.n	8008da6 <__hexnan+0x2e>
 8008df6:	2a29      	cmp	r2, #41	@ 0x29
 8008df8:	d157      	bne.n	8008eaa <__hexnan+0x132>
 8008dfa:	3102      	adds	r1, #2
 8008dfc:	f8ca 1000 	str.w	r1, [sl]
 8008e00:	f1bb 0f00 	cmp.w	fp, #0
 8008e04:	d051      	beq.n	8008eaa <__hexnan+0x132>
 8008e06:	454c      	cmp	r4, r9
 8008e08:	d206      	bcs.n	8008e18 <__hexnan+0xa0>
 8008e0a:	2d07      	cmp	r5, #7
 8008e0c:	dc04      	bgt.n	8008e18 <__hexnan+0xa0>
 8008e0e:	462a      	mov	r2, r5
 8008e10:	4649      	mov	r1, r9
 8008e12:	4620      	mov	r0, r4
 8008e14:	f7ff ff8a 	bl	8008d2c <L_shift>
 8008e18:	4544      	cmp	r4, r8
 8008e1a:	d936      	bls.n	8008e8a <__hexnan+0x112>
 8008e1c:	f1a8 0204 	sub.w	r2, r8, #4
 8008e20:	4623      	mov	r3, r4
 8008e22:	f853 1b04 	ldr.w	r1, [r3], #4
 8008e26:	f842 1f04 	str.w	r1, [r2, #4]!
 8008e2a:	429f      	cmp	r7, r3
 8008e2c:	d2f9      	bcs.n	8008e22 <__hexnan+0xaa>
 8008e2e:	1b3b      	subs	r3, r7, r4
 8008e30:	f023 0303 	bic.w	r3, r3, #3
 8008e34:	3304      	adds	r3, #4
 8008e36:	3401      	adds	r4, #1
 8008e38:	3e03      	subs	r6, #3
 8008e3a:	42b4      	cmp	r4, r6
 8008e3c:	bf88      	it	hi
 8008e3e:	2304      	movhi	r3, #4
 8008e40:	4443      	add	r3, r8
 8008e42:	2200      	movs	r2, #0
 8008e44:	f843 2b04 	str.w	r2, [r3], #4
 8008e48:	429f      	cmp	r7, r3
 8008e4a:	d2fb      	bcs.n	8008e44 <__hexnan+0xcc>
 8008e4c:	683b      	ldr	r3, [r7, #0]
 8008e4e:	b91b      	cbnz	r3, 8008e58 <__hexnan+0xe0>
 8008e50:	4547      	cmp	r7, r8
 8008e52:	d128      	bne.n	8008ea6 <__hexnan+0x12e>
 8008e54:	2301      	movs	r3, #1
 8008e56:	603b      	str	r3, [r7, #0]
 8008e58:	2005      	movs	r0, #5
 8008e5a:	b007      	add	sp, #28
 8008e5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e60:	3501      	adds	r5, #1
 8008e62:	2d08      	cmp	r5, #8
 8008e64:	f10b 0b01 	add.w	fp, fp, #1
 8008e68:	dd06      	ble.n	8008e78 <__hexnan+0x100>
 8008e6a:	4544      	cmp	r4, r8
 8008e6c:	d9c1      	bls.n	8008df2 <__hexnan+0x7a>
 8008e6e:	2300      	movs	r3, #0
 8008e70:	f844 3c04 	str.w	r3, [r4, #-4]
 8008e74:	2501      	movs	r5, #1
 8008e76:	3c04      	subs	r4, #4
 8008e78:	6822      	ldr	r2, [r4, #0]
 8008e7a:	f000 000f 	and.w	r0, r0, #15
 8008e7e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8008e82:	6020      	str	r0, [r4, #0]
 8008e84:	e7b5      	b.n	8008df2 <__hexnan+0x7a>
 8008e86:	2508      	movs	r5, #8
 8008e88:	e7b3      	b.n	8008df2 <__hexnan+0x7a>
 8008e8a:	9b01      	ldr	r3, [sp, #4]
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d0dd      	beq.n	8008e4c <__hexnan+0xd4>
 8008e90:	f1c3 0320 	rsb	r3, r3, #32
 8008e94:	f04f 32ff 	mov.w	r2, #4294967295
 8008e98:	40da      	lsrs	r2, r3
 8008e9a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8008e9e:	4013      	ands	r3, r2
 8008ea0:	f846 3c04 	str.w	r3, [r6, #-4]
 8008ea4:	e7d2      	b.n	8008e4c <__hexnan+0xd4>
 8008ea6:	3f04      	subs	r7, #4
 8008ea8:	e7d0      	b.n	8008e4c <__hexnan+0xd4>
 8008eaa:	2004      	movs	r0, #4
 8008eac:	e7d5      	b.n	8008e5a <__hexnan+0xe2>

08008eae <__ascii_mbtowc>:
 8008eae:	b082      	sub	sp, #8
 8008eb0:	b901      	cbnz	r1, 8008eb4 <__ascii_mbtowc+0x6>
 8008eb2:	a901      	add	r1, sp, #4
 8008eb4:	b142      	cbz	r2, 8008ec8 <__ascii_mbtowc+0x1a>
 8008eb6:	b14b      	cbz	r3, 8008ecc <__ascii_mbtowc+0x1e>
 8008eb8:	7813      	ldrb	r3, [r2, #0]
 8008eba:	600b      	str	r3, [r1, #0]
 8008ebc:	7812      	ldrb	r2, [r2, #0]
 8008ebe:	1e10      	subs	r0, r2, #0
 8008ec0:	bf18      	it	ne
 8008ec2:	2001      	movne	r0, #1
 8008ec4:	b002      	add	sp, #8
 8008ec6:	4770      	bx	lr
 8008ec8:	4610      	mov	r0, r2
 8008eca:	e7fb      	b.n	8008ec4 <__ascii_mbtowc+0x16>
 8008ecc:	f06f 0001 	mvn.w	r0, #1
 8008ed0:	e7f8      	b.n	8008ec4 <__ascii_mbtowc+0x16>
	...

08008ed4 <_Balloc>:
 8008ed4:	b570      	push	{r4, r5, r6, lr}
 8008ed6:	69c6      	ldr	r6, [r0, #28]
 8008ed8:	4604      	mov	r4, r0
 8008eda:	460d      	mov	r5, r1
 8008edc:	b976      	cbnz	r6, 8008efc <_Balloc+0x28>
 8008ede:	2010      	movs	r0, #16
 8008ee0:	f7fc fe08 	bl	8005af4 <malloc>
 8008ee4:	4602      	mov	r2, r0
 8008ee6:	61e0      	str	r0, [r4, #28]
 8008ee8:	b920      	cbnz	r0, 8008ef4 <_Balloc+0x20>
 8008eea:	4b18      	ldr	r3, [pc, #96]	@ (8008f4c <_Balloc+0x78>)
 8008eec:	4818      	ldr	r0, [pc, #96]	@ (8008f50 <_Balloc+0x7c>)
 8008eee:	216b      	movs	r1, #107	@ 0x6b
 8008ef0:	f000 fecc 	bl	8009c8c <__assert_func>
 8008ef4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008ef8:	6006      	str	r6, [r0, #0]
 8008efa:	60c6      	str	r6, [r0, #12]
 8008efc:	69e6      	ldr	r6, [r4, #28]
 8008efe:	68f3      	ldr	r3, [r6, #12]
 8008f00:	b183      	cbz	r3, 8008f24 <_Balloc+0x50>
 8008f02:	69e3      	ldr	r3, [r4, #28]
 8008f04:	68db      	ldr	r3, [r3, #12]
 8008f06:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008f0a:	b9b8      	cbnz	r0, 8008f3c <_Balloc+0x68>
 8008f0c:	2101      	movs	r1, #1
 8008f0e:	fa01 f605 	lsl.w	r6, r1, r5
 8008f12:	1d72      	adds	r2, r6, #5
 8008f14:	0092      	lsls	r2, r2, #2
 8008f16:	4620      	mov	r0, r4
 8008f18:	f000 fed6 	bl	8009cc8 <_calloc_r>
 8008f1c:	b160      	cbz	r0, 8008f38 <_Balloc+0x64>
 8008f1e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008f22:	e00e      	b.n	8008f42 <_Balloc+0x6e>
 8008f24:	2221      	movs	r2, #33	@ 0x21
 8008f26:	2104      	movs	r1, #4
 8008f28:	4620      	mov	r0, r4
 8008f2a:	f000 fecd 	bl	8009cc8 <_calloc_r>
 8008f2e:	69e3      	ldr	r3, [r4, #28]
 8008f30:	60f0      	str	r0, [r6, #12]
 8008f32:	68db      	ldr	r3, [r3, #12]
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d1e4      	bne.n	8008f02 <_Balloc+0x2e>
 8008f38:	2000      	movs	r0, #0
 8008f3a:	bd70      	pop	{r4, r5, r6, pc}
 8008f3c:	6802      	ldr	r2, [r0, #0]
 8008f3e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008f42:	2300      	movs	r3, #0
 8008f44:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008f48:	e7f7      	b.n	8008f3a <_Balloc+0x66>
 8008f4a:	bf00      	nop
 8008f4c:	0800a807 	.word	0x0800a807
 8008f50:	0800a8e7 	.word	0x0800a8e7

08008f54 <_Bfree>:
 8008f54:	b570      	push	{r4, r5, r6, lr}
 8008f56:	69c6      	ldr	r6, [r0, #28]
 8008f58:	4605      	mov	r5, r0
 8008f5a:	460c      	mov	r4, r1
 8008f5c:	b976      	cbnz	r6, 8008f7c <_Bfree+0x28>
 8008f5e:	2010      	movs	r0, #16
 8008f60:	f7fc fdc8 	bl	8005af4 <malloc>
 8008f64:	4602      	mov	r2, r0
 8008f66:	61e8      	str	r0, [r5, #28]
 8008f68:	b920      	cbnz	r0, 8008f74 <_Bfree+0x20>
 8008f6a:	4b09      	ldr	r3, [pc, #36]	@ (8008f90 <_Bfree+0x3c>)
 8008f6c:	4809      	ldr	r0, [pc, #36]	@ (8008f94 <_Bfree+0x40>)
 8008f6e:	218f      	movs	r1, #143	@ 0x8f
 8008f70:	f000 fe8c 	bl	8009c8c <__assert_func>
 8008f74:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008f78:	6006      	str	r6, [r0, #0]
 8008f7a:	60c6      	str	r6, [r0, #12]
 8008f7c:	b13c      	cbz	r4, 8008f8e <_Bfree+0x3a>
 8008f7e:	69eb      	ldr	r3, [r5, #28]
 8008f80:	6862      	ldr	r2, [r4, #4]
 8008f82:	68db      	ldr	r3, [r3, #12]
 8008f84:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008f88:	6021      	str	r1, [r4, #0]
 8008f8a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008f8e:	bd70      	pop	{r4, r5, r6, pc}
 8008f90:	0800a807 	.word	0x0800a807
 8008f94:	0800a8e7 	.word	0x0800a8e7

08008f98 <__multadd>:
 8008f98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f9c:	690d      	ldr	r5, [r1, #16]
 8008f9e:	4607      	mov	r7, r0
 8008fa0:	460c      	mov	r4, r1
 8008fa2:	461e      	mov	r6, r3
 8008fa4:	f101 0c14 	add.w	ip, r1, #20
 8008fa8:	2000      	movs	r0, #0
 8008faa:	f8dc 3000 	ldr.w	r3, [ip]
 8008fae:	b299      	uxth	r1, r3
 8008fb0:	fb02 6101 	mla	r1, r2, r1, r6
 8008fb4:	0c1e      	lsrs	r6, r3, #16
 8008fb6:	0c0b      	lsrs	r3, r1, #16
 8008fb8:	fb02 3306 	mla	r3, r2, r6, r3
 8008fbc:	b289      	uxth	r1, r1
 8008fbe:	3001      	adds	r0, #1
 8008fc0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008fc4:	4285      	cmp	r5, r0
 8008fc6:	f84c 1b04 	str.w	r1, [ip], #4
 8008fca:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008fce:	dcec      	bgt.n	8008faa <__multadd+0x12>
 8008fd0:	b30e      	cbz	r6, 8009016 <__multadd+0x7e>
 8008fd2:	68a3      	ldr	r3, [r4, #8]
 8008fd4:	42ab      	cmp	r3, r5
 8008fd6:	dc19      	bgt.n	800900c <__multadd+0x74>
 8008fd8:	6861      	ldr	r1, [r4, #4]
 8008fda:	4638      	mov	r0, r7
 8008fdc:	3101      	adds	r1, #1
 8008fde:	f7ff ff79 	bl	8008ed4 <_Balloc>
 8008fe2:	4680      	mov	r8, r0
 8008fe4:	b928      	cbnz	r0, 8008ff2 <__multadd+0x5a>
 8008fe6:	4602      	mov	r2, r0
 8008fe8:	4b0c      	ldr	r3, [pc, #48]	@ (800901c <__multadd+0x84>)
 8008fea:	480d      	ldr	r0, [pc, #52]	@ (8009020 <__multadd+0x88>)
 8008fec:	21ba      	movs	r1, #186	@ 0xba
 8008fee:	f000 fe4d 	bl	8009c8c <__assert_func>
 8008ff2:	6922      	ldr	r2, [r4, #16]
 8008ff4:	3202      	adds	r2, #2
 8008ff6:	f104 010c 	add.w	r1, r4, #12
 8008ffa:	0092      	lsls	r2, r2, #2
 8008ffc:	300c      	adds	r0, #12
 8008ffe:	f7fe fd67 	bl	8007ad0 <memcpy>
 8009002:	4621      	mov	r1, r4
 8009004:	4638      	mov	r0, r7
 8009006:	f7ff ffa5 	bl	8008f54 <_Bfree>
 800900a:	4644      	mov	r4, r8
 800900c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009010:	3501      	adds	r5, #1
 8009012:	615e      	str	r6, [r3, #20]
 8009014:	6125      	str	r5, [r4, #16]
 8009016:	4620      	mov	r0, r4
 8009018:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800901c:	0800a876 	.word	0x0800a876
 8009020:	0800a8e7 	.word	0x0800a8e7

08009024 <__s2b>:
 8009024:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009028:	460c      	mov	r4, r1
 800902a:	4615      	mov	r5, r2
 800902c:	461f      	mov	r7, r3
 800902e:	2209      	movs	r2, #9
 8009030:	3308      	adds	r3, #8
 8009032:	4606      	mov	r6, r0
 8009034:	fb93 f3f2 	sdiv	r3, r3, r2
 8009038:	2100      	movs	r1, #0
 800903a:	2201      	movs	r2, #1
 800903c:	429a      	cmp	r2, r3
 800903e:	db09      	blt.n	8009054 <__s2b+0x30>
 8009040:	4630      	mov	r0, r6
 8009042:	f7ff ff47 	bl	8008ed4 <_Balloc>
 8009046:	b940      	cbnz	r0, 800905a <__s2b+0x36>
 8009048:	4602      	mov	r2, r0
 800904a:	4b19      	ldr	r3, [pc, #100]	@ (80090b0 <__s2b+0x8c>)
 800904c:	4819      	ldr	r0, [pc, #100]	@ (80090b4 <__s2b+0x90>)
 800904e:	21d3      	movs	r1, #211	@ 0xd3
 8009050:	f000 fe1c 	bl	8009c8c <__assert_func>
 8009054:	0052      	lsls	r2, r2, #1
 8009056:	3101      	adds	r1, #1
 8009058:	e7f0      	b.n	800903c <__s2b+0x18>
 800905a:	9b08      	ldr	r3, [sp, #32]
 800905c:	6143      	str	r3, [r0, #20]
 800905e:	2d09      	cmp	r5, #9
 8009060:	f04f 0301 	mov.w	r3, #1
 8009064:	6103      	str	r3, [r0, #16]
 8009066:	dd16      	ble.n	8009096 <__s2b+0x72>
 8009068:	f104 0909 	add.w	r9, r4, #9
 800906c:	46c8      	mov	r8, r9
 800906e:	442c      	add	r4, r5
 8009070:	f818 3b01 	ldrb.w	r3, [r8], #1
 8009074:	4601      	mov	r1, r0
 8009076:	3b30      	subs	r3, #48	@ 0x30
 8009078:	220a      	movs	r2, #10
 800907a:	4630      	mov	r0, r6
 800907c:	f7ff ff8c 	bl	8008f98 <__multadd>
 8009080:	45a0      	cmp	r8, r4
 8009082:	d1f5      	bne.n	8009070 <__s2b+0x4c>
 8009084:	f1a5 0408 	sub.w	r4, r5, #8
 8009088:	444c      	add	r4, r9
 800908a:	1b2d      	subs	r5, r5, r4
 800908c:	1963      	adds	r3, r4, r5
 800908e:	42bb      	cmp	r3, r7
 8009090:	db04      	blt.n	800909c <__s2b+0x78>
 8009092:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009096:	340a      	adds	r4, #10
 8009098:	2509      	movs	r5, #9
 800909a:	e7f6      	b.n	800908a <__s2b+0x66>
 800909c:	f814 3b01 	ldrb.w	r3, [r4], #1
 80090a0:	4601      	mov	r1, r0
 80090a2:	3b30      	subs	r3, #48	@ 0x30
 80090a4:	220a      	movs	r2, #10
 80090a6:	4630      	mov	r0, r6
 80090a8:	f7ff ff76 	bl	8008f98 <__multadd>
 80090ac:	e7ee      	b.n	800908c <__s2b+0x68>
 80090ae:	bf00      	nop
 80090b0:	0800a876 	.word	0x0800a876
 80090b4:	0800a8e7 	.word	0x0800a8e7

080090b8 <__hi0bits>:
 80090b8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80090bc:	4603      	mov	r3, r0
 80090be:	bf36      	itet	cc
 80090c0:	0403      	lslcc	r3, r0, #16
 80090c2:	2000      	movcs	r0, #0
 80090c4:	2010      	movcc	r0, #16
 80090c6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80090ca:	bf3c      	itt	cc
 80090cc:	021b      	lslcc	r3, r3, #8
 80090ce:	3008      	addcc	r0, #8
 80090d0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80090d4:	bf3c      	itt	cc
 80090d6:	011b      	lslcc	r3, r3, #4
 80090d8:	3004      	addcc	r0, #4
 80090da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80090de:	bf3c      	itt	cc
 80090e0:	009b      	lslcc	r3, r3, #2
 80090e2:	3002      	addcc	r0, #2
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	db05      	blt.n	80090f4 <__hi0bits+0x3c>
 80090e8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80090ec:	f100 0001 	add.w	r0, r0, #1
 80090f0:	bf08      	it	eq
 80090f2:	2020      	moveq	r0, #32
 80090f4:	4770      	bx	lr

080090f6 <__lo0bits>:
 80090f6:	6803      	ldr	r3, [r0, #0]
 80090f8:	4602      	mov	r2, r0
 80090fa:	f013 0007 	ands.w	r0, r3, #7
 80090fe:	d00b      	beq.n	8009118 <__lo0bits+0x22>
 8009100:	07d9      	lsls	r1, r3, #31
 8009102:	d421      	bmi.n	8009148 <__lo0bits+0x52>
 8009104:	0798      	lsls	r0, r3, #30
 8009106:	bf49      	itett	mi
 8009108:	085b      	lsrmi	r3, r3, #1
 800910a:	089b      	lsrpl	r3, r3, #2
 800910c:	2001      	movmi	r0, #1
 800910e:	6013      	strmi	r3, [r2, #0]
 8009110:	bf5c      	itt	pl
 8009112:	6013      	strpl	r3, [r2, #0]
 8009114:	2002      	movpl	r0, #2
 8009116:	4770      	bx	lr
 8009118:	b299      	uxth	r1, r3
 800911a:	b909      	cbnz	r1, 8009120 <__lo0bits+0x2a>
 800911c:	0c1b      	lsrs	r3, r3, #16
 800911e:	2010      	movs	r0, #16
 8009120:	b2d9      	uxtb	r1, r3
 8009122:	b909      	cbnz	r1, 8009128 <__lo0bits+0x32>
 8009124:	3008      	adds	r0, #8
 8009126:	0a1b      	lsrs	r3, r3, #8
 8009128:	0719      	lsls	r1, r3, #28
 800912a:	bf04      	itt	eq
 800912c:	091b      	lsreq	r3, r3, #4
 800912e:	3004      	addeq	r0, #4
 8009130:	0799      	lsls	r1, r3, #30
 8009132:	bf04      	itt	eq
 8009134:	089b      	lsreq	r3, r3, #2
 8009136:	3002      	addeq	r0, #2
 8009138:	07d9      	lsls	r1, r3, #31
 800913a:	d403      	bmi.n	8009144 <__lo0bits+0x4e>
 800913c:	085b      	lsrs	r3, r3, #1
 800913e:	f100 0001 	add.w	r0, r0, #1
 8009142:	d003      	beq.n	800914c <__lo0bits+0x56>
 8009144:	6013      	str	r3, [r2, #0]
 8009146:	4770      	bx	lr
 8009148:	2000      	movs	r0, #0
 800914a:	4770      	bx	lr
 800914c:	2020      	movs	r0, #32
 800914e:	4770      	bx	lr

08009150 <__i2b>:
 8009150:	b510      	push	{r4, lr}
 8009152:	460c      	mov	r4, r1
 8009154:	2101      	movs	r1, #1
 8009156:	f7ff febd 	bl	8008ed4 <_Balloc>
 800915a:	4602      	mov	r2, r0
 800915c:	b928      	cbnz	r0, 800916a <__i2b+0x1a>
 800915e:	4b05      	ldr	r3, [pc, #20]	@ (8009174 <__i2b+0x24>)
 8009160:	4805      	ldr	r0, [pc, #20]	@ (8009178 <__i2b+0x28>)
 8009162:	f240 1145 	movw	r1, #325	@ 0x145
 8009166:	f000 fd91 	bl	8009c8c <__assert_func>
 800916a:	2301      	movs	r3, #1
 800916c:	6144      	str	r4, [r0, #20]
 800916e:	6103      	str	r3, [r0, #16]
 8009170:	bd10      	pop	{r4, pc}
 8009172:	bf00      	nop
 8009174:	0800a876 	.word	0x0800a876
 8009178:	0800a8e7 	.word	0x0800a8e7

0800917c <__multiply>:
 800917c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009180:	4614      	mov	r4, r2
 8009182:	690a      	ldr	r2, [r1, #16]
 8009184:	6923      	ldr	r3, [r4, #16]
 8009186:	429a      	cmp	r2, r3
 8009188:	bfa8      	it	ge
 800918a:	4623      	movge	r3, r4
 800918c:	460f      	mov	r7, r1
 800918e:	bfa4      	itt	ge
 8009190:	460c      	movge	r4, r1
 8009192:	461f      	movge	r7, r3
 8009194:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8009198:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800919c:	68a3      	ldr	r3, [r4, #8]
 800919e:	6861      	ldr	r1, [r4, #4]
 80091a0:	eb0a 0609 	add.w	r6, sl, r9
 80091a4:	42b3      	cmp	r3, r6
 80091a6:	b085      	sub	sp, #20
 80091a8:	bfb8      	it	lt
 80091aa:	3101      	addlt	r1, #1
 80091ac:	f7ff fe92 	bl	8008ed4 <_Balloc>
 80091b0:	b930      	cbnz	r0, 80091c0 <__multiply+0x44>
 80091b2:	4602      	mov	r2, r0
 80091b4:	4b44      	ldr	r3, [pc, #272]	@ (80092c8 <__multiply+0x14c>)
 80091b6:	4845      	ldr	r0, [pc, #276]	@ (80092cc <__multiply+0x150>)
 80091b8:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80091bc:	f000 fd66 	bl	8009c8c <__assert_func>
 80091c0:	f100 0514 	add.w	r5, r0, #20
 80091c4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80091c8:	462b      	mov	r3, r5
 80091ca:	2200      	movs	r2, #0
 80091cc:	4543      	cmp	r3, r8
 80091ce:	d321      	bcc.n	8009214 <__multiply+0x98>
 80091d0:	f107 0114 	add.w	r1, r7, #20
 80091d4:	f104 0214 	add.w	r2, r4, #20
 80091d8:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80091dc:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80091e0:	9302      	str	r3, [sp, #8]
 80091e2:	1b13      	subs	r3, r2, r4
 80091e4:	3b15      	subs	r3, #21
 80091e6:	f023 0303 	bic.w	r3, r3, #3
 80091ea:	3304      	adds	r3, #4
 80091ec:	f104 0715 	add.w	r7, r4, #21
 80091f0:	42ba      	cmp	r2, r7
 80091f2:	bf38      	it	cc
 80091f4:	2304      	movcc	r3, #4
 80091f6:	9301      	str	r3, [sp, #4]
 80091f8:	9b02      	ldr	r3, [sp, #8]
 80091fa:	9103      	str	r1, [sp, #12]
 80091fc:	428b      	cmp	r3, r1
 80091fe:	d80c      	bhi.n	800921a <__multiply+0x9e>
 8009200:	2e00      	cmp	r6, #0
 8009202:	dd03      	ble.n	800920c <__multiply+0x90>
 8009204:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009208:	2b00      	cmp	r3, #0
 800920a:	d05b      	beq.n	80092c4 <__multiply+0x148>
 800920c:	6106      	str	r6, [r0, #16]
 800920e:	b005      	add	sp, #20
 8009210:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009214:	f843 2b04 	str.w	r2, [r3], #4
 8009218:	e7d8      	b.n	80091cc <__multiply+0x50>
 800921a:	f8b1 a000 	ldrh.w	sl, [r1]
 800921e:	f1ba 0f00 	cmp.w	sl, #0
 8009222:	d024      	beq.n	800926e <__multiply+0xf2>
 8009224:	f104 0e14 	add.w	lr, r4, #20
 8009228:	46a9      	mov	r9, r5
 800922a:	f04f 0c00 	mov.w	ip, #0
 800922e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009232:	f8d9 3000 	ldr.w	r3, [r9]
 8009236:	fa1f fb87 	uxth.w	fp, r7
 800923a:	b29b      	uxth	r3, r3
 800923c:	fb0a 330b 	mla	r3, sl, fp, r3
 8009240:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8009244:	f8d9 7000 	ldr.w	r7, [r9]
 8009248:	4463      	add	r3, ip
 800924a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800924e:	fb0a c70b 	mla	r7, sl, fp, ip
 8009252:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8009256:	b29b      	uxth	r3, r3
 8009258:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800925c:	4572      	cmp	r2, lr
 800925e:	f849 3b04 	str.w	r3, [r9], #4
 8009262:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8009266:	d8e2      	bhi.n	800922e <__multiply+0xb2>
 8009268:	9b01      	ldr	r3, [sp, #4]
 800926a:	f845 c003 	str.w	ip, [r5, r3]
 800926e:	9b03      	ldr	r3, [sp, #12]
 8009270:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8009274:	3104      	adds	r1, #4
 8009276:	f1b9 0f00 	cmp.w	r9, #0
 800927a:	d021      	beq.n	80092c0 <__multiply+0x144>
 800927c:	682b      	ldr	r3, [r5, #0]
 800927e:	f104 0c14 	add.w	ip, r4, #20
 8009282:	46ae      	mov	lr, r5
 8009284:	f04f 0a00 	mov.w	sl, #0
 8009288:	f8bc b000 	ldrh.w	fp, [ip]
 800928c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8009290:	fb09 770b 	mla	r7, r9, fp, r7
 8009294:	4457      	add	r7, sl
 8009296:	b29b      	uxth	r3, r3
 8009298:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800929c:	f84e 3b04 	str.w	r3, [lr], #4
 80092a0:	f85c 3b04 	ldr.w	r3, [ip], #4
 80092a4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80092a8:	f8be 3000 	ldrh.w	r3, [lr]
 80092ac:	fb09 330a 	mla	r3, r9, sl, r3
 80092b0:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80092b4:	4562      	cmp	r2, ip
 80092b6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80092ba:	d8e5      	bhi.n	8009288 <__multiply+0x10c>
 80092bc:	9f01      	ldr	r7, [sp, #4]
 80092be:	51eb      	str	r3, [r5, r7]
 80092c0:	3504      	adds	r5, #4
 80092c2:	e799      	b.n	80091f8 <__multiply+0x7c>
 80092c4:	3e01      	subs	r6, #1
 80092c6:	e79b      	b.n	8009200 <__multiply+0x84>
 80092c8:	0800a876 	.word	0x0800a876
 80092cc:	0800a8e7 	.word	0x0800a8e7

080092d0 <__pow5mult>:
 80092d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80092d4:	4615      	mov	r5, r2
 80092d6:	f012 0203 	ands.w	r2, r2, #3
 80092da:	4607      	mov	r7, r0
 80092dc:	460e      	mov	r6, r1
 80092de:	d007      	beq.n	80092f0 <__pow5mult+0x20>
 80092e0:	4c25      	ldr	r4, [pc, #148]	@ (8009378 <__pow5mult+0xa8>)
 80092e2:	3a01      	subs	r2, #1
 80092e4:	2300      	movs	r3, #0
 80092e6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80092ea:	f7ff fe55 	bl	8008f98 <__multadd>
 80092ee:	4606      	mov	r6, r0
 80092f0:	10ad      	asrs	r5, r5, #2
 80092f2:	d03d      	beq.n	8009370 <__pow5mult+0xa0>
 80092f4:	69fc      	ldr	r4, [r7, #28]
 80092f6:	b97c      	cbnz	r4, 8009318 <__pow5mult+0x48>
 80092f8:	2010      	movs	r0, #16
 80092fa:	f7fc fbfb 	bl	8005af4 <malloc>
 80092fe:	4602      	mov	r2, r0
 8009300:	61f8      	str	r0, [r7, #28]
 8009302:	b928      	cbnz	r0, 8009310 <__pow5mult+0x40>
 8009304:	4b1d      	ldr	r3, [pc, #116]	@ (800937c <__pow5mult+0xac>)
 8009306:	481e      	ldr	r0, [pc, #120]	@ (8009380 <__pow5mult+0xb0>)
 8009308:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800930c:	f000 fcbe 	bl	8009c8c <__assert_func>
 8009310:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009314:	6004      	str	r4, [r0, #0]
 8009316:	60c4      	str	r4, [r0, #12]
 8009318:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800931c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009320:	b94c      	cbnz	r4, 8009336 <__pow5mult+0x66>
 8009322:	f240 2171 	movw	r1, #625	@ 0x271
 8009326:	4638      	mov	r0, r7
 8009328:	f7ff ff12 	bl	8009150 <__i2b>
 800932c:	2300      	movs	r3, #0
 800932e:	f8c8 0008 	str.w	r0, [r8, #8]
 8009332:	4604      	mov	r4, r0
 8009334:	6003      	str	r3, [r0, #0]
 8009336:	f04f 0900 	mov.w	r9, #0
 800933a:	07eb      	lsls	r3, r5, #31
 800933c:	d50a      	bpl.n	8009354 <__pow5mult+0x84>
 800933e:	4631      	mov	r1, r6
 8009340:	4622      	mov	r2, r4
 8009342:	4638      	mov	r0, r7
 8009344:	f7ff ff1a 	bl	800917c <__multiply>
 8009348:	4631      	mov	r1, r6
 800934a:	4680      	mov	r8, r0
 800934c:	4638      	mov	r0, r7
 800934e:	f7ff fe01 	bl	8008f54 <_Bfree>
 8009352:	4646      	mov	r6, r8
 8009354:	106d      	asrs	r5, r5, #1
 8009356:	d00b      	beq.n	8009370 <__pow5mult+0xa0>
 8009358:	6820      	ldr	r0, [r4, #0]
 800935a:	b938      	cbnz	r0, 800936c <__pow5mult+0x9c>
 800935c:	4622      	mov	r2, r4
 800935e:	4621      	mov	r1, r4
 8009360:	4638      	mov	r0, r7
 8009362:	f7ff ff0b 	bl	800917c <__multiply>
 8009366:	6020      	str	r0, [r4, #0]
 8009368:	f8c0 9000 	str.w	r9, [r0]
 800936c:	4604      	mov	r4, r0
 800936e:	e7e4      	b.n	800933a <__pow5mult+0x6a>
 8009370:	4630      	mov	r0, r6
 8009372:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009376:	bf00      	nop
 8009378:	0800a940 	.word	0x0800a940
 800937c:	0800a807 	.word	0x0800a807
 8009380:	0800a8e7 	.word	0x0800a8e7

08009384 <__lshift>:
 8009384:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009388:	460c      	mov	r4, r1
 800938a:	6849      	ldr	r1, [r1, #4]
 800938c:	6923      	ldr	r3, [r4, #16]
 800938e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009392:	68a3      	ldr	r3, [r4, #8]
 8009394:	4607      	mov	r7, r0
 8009396:	4691      	mov	r9, r2
 8009398:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800939c:	f108 0601 	add.w	r6, r8, #1
 80093a0:	42b3      	cmp	r3, r6
 80093a2:	db0b      	blt.n	80093bc <__lshift+0x38>
 80093a4:	4638      	mov	r0, r7
 80093a6:	f7ff fd95 	bl	8008ed4 <_Balloc>
 80093aa:	4605      	mov	r5, r0
 80093ac:	b948      	cbnz	r0, 80093c2 <__lshift+0x3e>
 80093ae:	4602      	mov	r2, r0
 80093b0:	4b28      	ldr	r3, [pc, #160]	@ (8009454 <__lshift+0xd0>)
 80093b2:	4829      	ldr	r0, [pc, #164]	@ (8009458 <__lshift+0xd4>)
 80093b4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80093b8:	f000 fc68 	bl	8009c8c <__assert_func>
 80093bc:	3101      	adds	r1, #1
 80093be:	005b      	lsls	r3, r3, #1
 80093c0:	e7ee      	b.n	80093a0 <__lshift+0x1c>
 80093c2:	2300      	movs	r3, #0
 80093c4:	f100 0114 	add.w	r1, r0, #20
 80093c8:	f100 0210 	add.w	r2, r0, #16
 80093cc:	4618      	mov	r0, r3
 80093ce:	4553      	cmp	r3, sl
 80093d0:	db33      	blt.n	800943a <__lshift+0xb6>
 80093d2:	6920      	ldr	r0, [r4, #16]
 80093d4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80093d8:	f104 0314 	add.w	r3, r4, #20
 80093dc:	f019 091f 	ands.w	r9, r9, #31
 80093e0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80093e4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80093e8:	d02b      	beq.n	8009442 <__lshift+0xbe>
 80093ea:	f1c9 0e20 	rsb	lr, r9, #32
 80093ee:	468a      	mov	sl, r1
 80093f0:	2200      	movs	r2, #0
 80093f2:	6818      	ldr	r0, [r3, #0]
 80093f4:	fa00 f009 	lsl.w	r0, r0, r9
 80093f8:	4310      	orrs	r0, r2
 80093fa:	f84a 0b04 	str.w	r0, [sl], #4
 80093fe:	f853 2b04 	ldr.w	r2, [r3], #4
 8009402:	459c      	cmp	ip, r3
 8009404:	fa22 f20e 	lsr.w	r2, r2, lr
 8009408:	d8f3      	bhi.n	80093f2 <__lshift+0x6e>
 800940a:	ebac 0304 	sub.w	r3, ip, r4
 800940e:	3b15      	subs	r3, #21
 8009410:	f023 0303 	bic.w	r3, r3, #3
 8009414:	3304      	adds	r3, #4
 8009416:	f104 0015 	add.w	r0, r4, #21
 800941a:	4584      	cmp	ip, r0
 800941c:	bf38      	it	cc
 800941e:	2304      	movcc	r3, #4
 8009420:	50ca      	str	r2, [r1, r3]
 8009422:	b10a      	cbz	r2, 8009428 <__lshift+0xa4>
 8009424:	f108 0602 	add.w	r6, r8, #2
 8009428:	3e01      	subs	r6, #1
 800942a:	4638      	mov	r0, r7
 800942c:	612e      	str	r6, [r5, #16]
 800942e:	4621      	mov	r1, r4
 8009430:	f7ff fd90 	bl	8008f54 <_Bfree>
 8009434:	4628      	mov	r0, r5
 8009436:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800943a:	f842 0f04 	str.w	r0, [r2, #4]!
 800943e:	3301      	adds	r3, #1
 8009440:	e7c5      	b.n	80093ce <__lshift+0x4a>
 8009442:	3904      	subs	r1, #4
 8009444:	f853 2b04 	ldr.w	r2, [r3], #4
 8009448:	f841 2f04 	str.w	r2, [r1, #4]!
 800944c:	459c      	cmp	ip, r3
 800944e:	d8f9      	bhi.n	8009444 <__lshift+0xc0>
 8009450:	e7ea      	b.n	8009428 <__lshift+0xa4>
 8009452:	bf00      	nop
 8009454:	0800a876 	.word	0x0800a876
 8009458:	0800a8e7 	.word	0x0800a8e7

0800945c <__mcmp>:
 800945c:	690a      	ldr	r2, [r1, #16]
 800945e:	4603      	mov	r3, r0
 8009460:	6900      	ldr	r0, [r0, #16]
 8009462:	1a80      	subs	r0, r0, r2
 8009464:	b530      	push	{r4, r5, lr}
 8009466:	d10e      	bne.n	8009486 <__mcmp+0x2a>
 8009468:	3314      	adds	r3, #20
 800946a:	3114      	adds	r1, #20
 800946c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009470:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009474:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009478:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800947c:	4295      	cmp	r5, r2
 800947e:	d003      	beq.n	8009488 <__mcmp+0x2c>
 8009480:	d205      	bcs.n	800948e <__mcmp+0x32>
 8009482:	f04f 30ff 	mov.w	r0, #4294967295
 8009486:	bd30      	pop	{r4, r5, pc}
 8009488:	42a3      	cmp	r3, r4
 800948a:	d3f3      	bcc.n	8009474 <__mcmp+0x18>
 800948c:	e7fb      	b.n	8009486 <__mcmp+0x2a>
 800948e:	2001      	movs	r0, #1
 8009490:	e7f9      	b.n	8009486 <__mcmp+0x2a>
	...

08009494 <__mdiff>:
 8009494:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009498:	4689      	mov	r9, r1
 800949a:	4606      	mov	r6, r0
 800949c:	4611      	mov	r1, r2
 800949e:	4648      	mov	r0, r9
 80094a0:	4614      	mov	r4, r2
 80094a2:	f7ff ffdb 	bl	800945c <__mcmp>
 80094a6:	1e05      	subs	r5, r0, #0
 80094a8:	d112      	bne.n	80094d0 <__mdiff+0x3c>
 80094aa:	4629      	mov	r1, r5
 80094ac:	4630      	mov	r0, r6
 80094ae:	f7ff fd11 	bl	8008ed4 <_Balloc>
 80094b2:	4602      	mov	r2, r0
 80094b4:	b928      	cbnz	r0, 80094c2 <__mdiff+0x2e>
 80094b6:	4b3f      	ldr	r3, [pc, #252]	@ (80095b4 <__mdiff+0x120>)
 80094b8:	f240 2137 	movw	r1, #567	@ 0x237
 80094bc:	483e      	ldr	r0, [pc, #248]	@ (80095b8 <__mdiff+0x124>)
 80094be:	f000 fbe5 	bl	8009c8c <__assert_func>
 80094c2:	2301      	movs	r3, #1
 80094c4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80094c8:	4610      	mov	r0, r2
 80094ca:	b003      	add	sp, #12
 80094cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094d0:	bfbc      	itt	lt
 80094d2:	464b      	movlt	r3, r9
 80094d4:	46a1      	movlt	r9, r4
 80094d6:	4630      	mov	r0, r6
 80094d8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80094dc:	bfba      	itte	lt
 80094de:	461c      	movlt	r4, r3
 80094e0:	2501      	movlt	r5, #1
 80094e2:	2500      	movge	r5, #0
 80094e4:	f7ff fcf6 	bl	8008ed4 <_Balloc>
 80094e8:	4602      	mov	r2, r0
 80094ea:	b918      	cbnz	r0, 80094f4 <__mdiff+0x60>
 80094ec:	4b31      	ldr	r3, [pc, #196]	@ (80095b4 <__mdiff+0x120>)
 80094ee:	f240 2145 	movw	r1, #581	@ 0x245
 80094f2:	e7e3      	b.n	80094bc <__mdiff+0x28>
 80094f4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80094f8:	6926      	ldr	r6, [r4, #16]
 80094fa:	60c5      	str	r5, [r0, #12]
 80094fc:	f109 0310 	add.w	r3, r9, #16
 8009500:	f109 0514 	add.w	r5, r9, #20
 8009504:	f104 0e14 	add.w	lr, r4, #20
 8009508:	f100 0b14 	add.w	fp, r0, #20
 800950c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8009510:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8009514:	9301      	str	r3, [sp, #4]
 8009516:	46d9      	mov	r9, fp
 8009518:	f04f 0c00 	mov.w	ip, #0
 800951c:	9b01      	ldr	r3, [sp, #4]
 800951e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8009522:	f853 af04 	ldr.w	sl, [r3, #4]!
 8009526:	9301      	str	r3, [sp, #4]
 8009528:	fa1f f38a 	uxth.w	r3, sl
 800952c:	4619      	mov	r1, r3
 800952e:	b283      	uxth	r3, r0
 8009530:	1acb      	subs	r3, r1, r3
 8009532:	0c00      	lsrs	r0, r0, #16
 8009534:	4463      	add	r3, ip
 8009536:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800953a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800953e:	b29b      	uxth	r3, r3
 8009540:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8009544:	4576      	cmp	r6, lr
 8009546:	f849 3b04 	str.w	r3, [r9], #4
 800954a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800954e:	d8e5      	bhi.n	800951c <__mdiff+0x88>
 8009550:	1b33      	subs	r3, r6, r4
 8009552:	3b15      	subs	r3, #21
 8009554:	f023 0303 	bic.w	r3, r3, #3
 8009558:	3415      	adds	r4, #21
 800955a:	3304      	adds	r3, #4
 800955c:	42a6      	cmp	r6, r4
 800955e:	bf38      	it	cc
 8009560:	2304      	movcc	r3, #4
 8009562:	441d      	add	r5, r3
 8009564:	445b      	add	r3, fp
 8009566:	461e      	mov	r6, r3
 8009568:	462c      	mov	r4, r5
 800956a:	4544      	cmp	r4, r8
 800956c:	d30e      	bcc.n	800958c <__mdiff+0xf8>
 800956e:	f108 0103 	add.w	r1, r8, #3
 8009572:	1b49      	subs	r1, r1, r5
 8009574:	f021 0103 	bic.w	r1, r1, #3
 8009578:	3d03      	subs	r5, #3
 800957a:	45a8      	cmp	r8, r5
 800957c:	bf38      	it	cc
 800957e:	2100      	movcc	r1, #0
 8009580:	440b      	add	r3, r1
 8009582:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009586:	b191      	cbz	r1, 80095ae <__mdiff+0x11a>
 8009588:	6117      	str	r7, [r2, #16]
 800958a:	e79d      	b.n	80094c8 <__mdiff+0x34>
 800958c:	f854 1b04 	ldr.w	r1, [r4], #4
 8009590:	46e6      	mov	lr, ip
 8009592:	0c08      	lsrs	r0, r1, #16
 8009594:	fa1c fc81 	uxtah	ip, ip, r1
 8009598:	4471      	add	r1, lr
 800959a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800959e:	b289      	uxth	r1, r1
 80095a0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80095a4:	f846 1b04 	str.w	r1, [r6], #4
 80095a8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80095ac:	e7dd      	b.n	800956a <__mdiff+0xd6>
 80095ae:	3f01      	subs	r7, #1
 80095b0:	e7e7      	b.n	8009582 <__mdiff+0xee>
 80095b2:	bf00      	nop
 80095b4:	0800a876 	.word	0x0800a876
 80095b8:	0800a8e7 	.word	0x0800a8e7

080095bc <__ulp>:
 80095bc:	b082      	sub	sp, #8
 80095be:	ed8d 0b00 	vstr	d0, [sp]
 80095c2:	9a01      	ldr	r2, [sp, #4]
 80095c4:	4b0f      	ldr	r3, [pc, #60]	@ (8009604 <__ulp+0x48>)
 80095c6:	4013      	ands	r3, r2
 80095c8:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	dc08      	bgt.n	80095e2 <__ulp+0x26>
 80095d0:	425b      	negs	r3, r3
 80095d2:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 80095d6:	ea4f 5223 	mov.w	r2, r3, asr #20
 80095da:	da04      	bge.n	80095e6 <__ulp+0x2a>
 80095dc:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80095e0:	4113      	asrs	r3, r2
 80095e2:	2200      	movs	r2, #0
 80095e4:	e008      	b.n	80095f8 <__ulp+0x3c>
 80095e6:	f1a2 0314 	sub.w	r3, r2, #20
 80095ea:	2b1e      	cmp	r3, #30
 80095ec:	bfda      	itte	le
 80095ee:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 80095f2:	40da      	lsrle	r2, r3
 80095f4:	2201      	movgt	r2, #1
 80095f6:	2300      	movs	r3, #0
 80095f8:	4619      	mov	r1, r3
 80095fa:	4610      	mov	r0, r2
 80095fc:	ec41 0b10 	vmov	d0, r0, r1
 8009600:	b002      	add	sp, #8
 8009602:	4770      	bx	lr
 8009604:	7ff00000 	.word	0x7ff00000

08009608 <__b2d>:
 8009608:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800960c:	6906      	ldr	r6, [r0, #16]
 800960e:	f100 0814 	add.w	r8, r0, #20
 8009612:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8009616:	1f37      	subs	r7, r6, #4
 8009618:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800961c:	4610      	mov	r0, r2
 800961e:	f7ff fd4b 	bl	80090b8 <__hi0bits>
 8009622:	f1c0 0320 	rsb	r3, r0, #32
 8009626:	280a      	cmp	r0, #10
 8009628:	600b      	str	r3, [r1, #0]
 800962a:	491b      	ldr	r1, [pc, #108]	@ (8009698 <__b2d+0x90>)
 800962c:	dc15      	bgt.n	800965a <__b2d+0x52>
 800962e:	f1c0 0c0b 	rsb	ip, r0, #11
 8009632:	fa22 f30c 	lsr.w	r3, r2, ip
 8009636:	45b8      	cmp	r8, r7
 8009638:	ea43 0501 	orr.w	r5, r3, r1
 800963c:	bf34      	ite	cc
 800963e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8009642:	2300      	movcs	r3, #0
 8009644:	3015      	adds	r0, #21
 8009646:	fa02 f000 	lsl.w	r0, r2, r0
 800964a:	fa23 f30c 	lsr.w	r3, r3, ip
 800964e:	4303      	orrs	r3, r0
 8009650:	461c      	mov	r4, r3
 8009652:	ec45 4b10 	vmov	d0, r4, r5
 8009656:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800965a:	45b8      	cmp	r8, r7
 800965c:	bf3a      	itte	cc
 800965e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8009662:	f1a6 0708 	subcc.w	r7, r6, #8
 8009666:	2300      	movcs	r3, #0
 8009668:	380b      	subs	r0, #11
 800966a:	d012      	beq.n	8009692 <__b2d+0x8a>
 800966c:	f1c0 0120 	rsb	r1, r0, #32
 8009670:	fa23 f401 	lsr.w	r4, r3, r1
 8009674:	4082      	lsls	r2, r0
 8009676:	4322      	orrs	r2, r4
 8009678:	4547      	cmp	r7, r8
 800967a:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800967e:	bf8c      	ite	hi
 8009680:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8009684:	2200      	movls	r2, #0
 8009686:	4083      	lsls	r3, r0
 8009688:	40ca      	lsrs	r2, r1
 800968a:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800968e:	4313      	orrs	r3, r2
 8009690:	e7de      	b.n	8009650 <__b2d+0x48>
 8009692:	ea42 0501 	orr.w	r5, r2, r1
 8009696:	e7db      	b.n	8009650 <__b2d+0x48>
 8009698:	3ff00000 	.word	0x3ff00000

0800969c <__d2b>:
 800969c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80096a0:	460f      	mov	r7, r1
 80096a2:	2101      	movs	r1, #1
 80096a4:	ec59 8b10 	vmov	r8, r9, d0
 80096a8:	4616      	mov	r6, r2
 80096aa:	f7ff fc13 	bl	8008ed4 <_Balloc>
 80096ae:	4604      	mov	r4, r0
 80096b0:	b930      	cbnz	r0, 80096c0 <__d2b+0x24>
 80096b2:	4602      	mov	r2, r0
 80096b4:	4b23      	ldr	r3, [pc, #140]	@ (8009744 <__d2b+0xa8>)
 80096b6:	4824      	ldr	r0, [pc, #144]	@ (8009748 <__d2b+0xac>)
 80096b8:	f240 310f 	movw	r1, #783	@ 0x30f
 80096bc:	f000 fae6 	bl	8009c8c <__assert_func>
 80096c0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80096c4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80096c8:	b10d      	cbz	r5, 80096ce <__d2b+0x32>
 80096ca:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80096ce:	9301      	str	r3, [sp, #4]
 80096d0:	f1b8 0300 	subs.w	r3, r8, #0
 80096d4:	d023      	beq.n	800971e <__d2b+0x82>
 80096d6:	4668      	mov	r0, sp
 80096d8:	9300      	str	r3, [sp, #0]
 80096da:	f7ff fd0c 	bl	80090f6 <__lo0bits>
 80096de:	e9dd 1200 	ldrd	r1, r2, [sp]
 80096e2:	b1d0      	cbz	r0, 800971a <__d2b+0x7e>
 80096e4:	f1c0 0320 	rsb	r3, r0, #32
 80096e8:	fa02 f303 	lsl.w	r3, r2, r3
 80096ec:	430b      	orrs	r3, r1
 80096ee:	40c2      	lsrs	r2, r0
 80096f0:	6163      	str	r3, [r4, #20]
 80096f2:	9201      	str	r2, [sp, #4]
 80096f4:	9b01      	ldr	r3, [sp, #4]
 80096f6:	61a3      	str	r3, [r4, #24]
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	bf0c      	ite	eq
 80096fc:	2201      	moveq	r2, #1
 80096fe:	2202      	movne	r2, #2
 8009700:	6122      	str	r2, [r4, #16]
 8009702:	b1a5      	cbz	r5, 800972e <__d2b+0x92>
 8009704:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8009708:	4405      	add	r5, r0
 800970a:	603d      	str	r5, [r7, #0]
 800970c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8009710:	6030      	str	r0, [r6, #0]
 8009712:	4620      	mov	r0, r4
 8009714:	b003      	add	sp, #12
 8009716:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800971a:	6161      	str	r1, [r4, #20]
 800971c:	e7ea      	b.n	80096f4 <__d2b+0x58>
 800971e:	a801      	add	r0, sp, #4
 8009720:	f7ff fce9 	bl	80090f6 <__lo0bits>
 8009724:	9b01      	ldr	r3, [sp, #4]
 8009726:	6163      	str	r3, [r4, #20]
 8009728:	3020      	adds	r0, #32
 800972a:	2201      	movs	r2, #1
 800972c:	e7e8      	b.n	8009700 <__d2b+0x64>
 800972e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009732:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8009736:	6038      	str	r0, [r7, #0]
 8009738:	6918      	ldr	r0, [r3, #16]
 800973a:	f7ff fcbd 	bl	80090b8 <__hi0bits>
 800973e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009742:	e7e5      	b.n	8009710 <__d2b+0x74>
 8009744:	0800a876 	.word	0x0800a876
 8009748:	0800a8e7 	.word	0x0800a8e7

0800974c <__ratio>:
 800974c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009750:	b085      	sub	sp, #20
 8009752:	e9cd 1000 	strd	r1, r0, [sp]
 8009756:	a902      	add	r1, sp, #8
 8009758:	f7ff ff56 	bl	8009608 <__b2d>
 800975c:	9800      	ldr	r0, [sp, #0]
 800975e:	a903      	add	r1, sp, #12
 8009760:	ec55 4b10 	vmov	r4, r5, d0
 8009764:	f7ff ff50 	bl	8009608 <__b2d>
 8009768:	9b01      	ldr	r3, [sp, #4]
 800976a:	6919      	ldr	r1, [r3, #16]
 800976c:	9b00      	ldr	r3, [sp, #0]
 800976e:	691b      	ldr	r3, [r3, #16]
 8009770:	1ac9      	subs	r1, r1, r3
 8009772:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8009776:	1a9b      	subs	r3, r3, r2
 8009778:	ec5b ab10 	vmov	sl, fp, d0
 800977c:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8009780:	2b00      	cmp	r3, #0
 8009782:	bfce      	itee	gt
 8009784:	462a      	movgt	r2, r5
 8009786:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800978a:	465a      	movle	r2, fp
 800978c:	462f      	mov	r7, r5
 800978e:	46d9      	mov	r9, fp
 8009790:	bfcc      	ite	gt
 8009792:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8009796:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800979a:	464b      	mov	r3, r9
 800979c:	4652      	mov	r2, sl
 800979e:	4620      	mov	r0, r4
 80097a0:	4639      	mov	r1, r7
 80097a2:	f7f7 f853 	bl	800084c <__aeabi_ddiv>
 80097a6:	ec41 0b10 	vmov	d0, r0, r1
 80097aa:	b005      	add	sp, #20
 80097ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080097b0 <__copybits>:
 80097b0:	3901      	subs	r1, #1
 80097b2:	b570      	push	{r4, r5, r6, lr}
 80097b4:	1149      	asrs	r1, r1, #5
 80097b6:	6914      	ldr	r4, [r2, #16]
 80097b8:	3101      	adds	r1, #1
 80097ba:	f102 0314 	add.w	r3, r2, #20
 80097be:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80097c2:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80097c6:	1f05      	subs	r5, r0, #4
 80097c8:	42a3      	cmp	r3, r4
 80097ca:	d30c      	bcc.n	80097e6 <__copybits+0x36>
 80097cc:	1aa3      	subs	r3, r4, r2
 80097ce:	3b11      	subs	r3, #17
 80097d0:	f023 0303 	bic.w	r3, r3, #3
 80097d4:	3211      	adds	r2, #17
 80097d6:	42a2      	cmp	r2, r4
 80097d8:	bf88      	it	hi
 80097da:	2300      	movhi	r3, #0
 80097dc:	4418      	add	r0, r3
 80097de:	2300      	movs	r3, #0
 80097e0:	4288      	cmp	r0, r1
 80097e2:	d305      	bcc.n	80097f0 <__copybits+0x40>
 80097e4:	bd70      	pop	{r4, r5, r6, pc}
 80097e6:	f853 6b04 	ldr.w	r6, [r3], #4
 80097ea:	f845 6f04 	str.w	r6, [r5, #4]!
 80097ee:	e7eb      	b.n	80097c8 <__copybits+0x18>
 80097f0:	f840 3b04 	str.w	r3, [r0], #4
 80097f4:	e7f4      	b.n	80097e0 <__copybits+0x30>

080097f6 <__any_on>:
 80097f6:	f100 0214 	add.w	r2, r0, #20
 80097fa:	6900      	ldr	r0, [r0, #16]
 80097fc:	114b      	asrs	r3, r1, #5
 80097fe:	4298      	cmp	r0, r3
 8009800:	b510      	push	{r4, lr}
 8009802:	db11      	blt.n	8009828 <__any_on+0x32>
 8009804:	dd0a      	ble.n	800981c <__any_on+0x26>
 8009806:	f011 011f 	ands.w	r1, r1, #31
 800980a:	d007      	beq.n	800981c <__any_on+0x26>
 800980c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009810:	fa24 f001 	lsr.w	r0, r4, r1
 8009814:	fa00 f101 	lsl.w	r1, r0, r1
 8009818:	428c      	cmp	r4, r1
 800981a:	d10b      	bne.n	8009834 <__any_on+0x3e>
 800981c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009820:	4293      	cmp	r3, r2
 8009822:	d803      	bhi.n	800982c <__any_on+0x36>
 8009824:	2000      	movs	r0, #0
 8009826:	bd10      	pop	{r4, pc}
 8009828:	4603      	mov	r3, r0
 800982a:	e7f7      	b.n	800981c <__any_on+0x26>
 800982c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009830:	2900      	cmp	r1, #0
 8009832:	d0f5      	beq.n	8009820 <__any_on+0x2a>
 8009834:	2001      	movs	r0, #1
 8009836:	e7f6      	b.n	8009826 <__any_on+0x30>

08009838 <__ascii_wctomb>:
 8009838:	4603      	mov	r3, r0
 800983a:	4608      	mov	r0, r1
 800983c:	b141      	cbz	r1, 8009850 <__ascii_wctomb+0x18>
 800983e:	2aff      	cmp	r2, #255	@ 0xff
 8009840:	d904      	bls.n	800984c <__ascii_wctomb+0x14>
 8009842:	228a      	movs	r2, #138	@ 0x8a
 8009844:	601a      	str	r2, [r3, #0]
 8009846:	f04f 30ff 	mov.w	r0, #4294967295
 800984a:	4770      	bx	lr
 800984c:	700a      	strb	r2, [r1, #0]
 800984e:	2001      	movs	r0, #1
 8009850:	4770      	bx	lr

08009852 <__ssputs_r>:
 8009852:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009856:	688e      	ldr	r6, [r1, #8]
 8009858:	461f      	mov	r7, r3
 800985a:	42be      	cmp	r6, r7
 800985c:	680b      	ldr	r3, [r1, #0]
 800985e:	4682      	mov	sl, r0
 8009860:	460c      	mov	r4, r1
 8009862:	4690      	mov	r8, r2
 8009864:	d82d      	bhi.n	80098c2 <__ssputs_r+0x70>
 8009866:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800986a:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800986e:	d026      	beq.n	80098be <__ssputs_r+0x6c>
 8009870:	6965      	ldr	r5, [r4, #20]
 8009872:	6909      	ldr	r1, [r1, #16]
 8009874:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009878:	eba3 0901 	sub.w	r9, r3, r1
 800987c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009880:	1c7b      	adds	r3, r7, #1
 8009882:	444b      	add	r3, r9
 8009884:	106d      	asrs	r5, r5, #1
 8009886:	429d      	cmp	r5, r3
 8009888:	bf38      	it	cc
 800988a:	461d      	movcc	r5, r3
 800988c:	0553      	lsls	r3, r2, #21
 800988e:	d527      	bpl.n	80098e0 <__ssputs_r+0x8e>
 8009890:	4629      	mov	r1, r5
 8009892:	f7fc f959 	bl	8005b48 <_malloc_r>
 8009896:	4606      	mov	r6, r0
 8009898:	b360      	cbz	r0, 80098f4 <__ssputs_r+0xa2>
 800989a:	6921      	ldr	r1, [r4, #16]
 800989c:	464a      	mov	r2, r9
 800989e:	f7fe f917 	bl	8007ad0 <memcpy>
 80098a2:	89a3      	ldrh	r3, [r4, #12]
 80098a4:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80098a8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80098ac:	81a3      	strh	r3, [r4, #12]
 80098ae:	6126      	str	r6, [r4, #16]
 80098b0:	6165      	str	r5, [r4, #20]
 80098b2:	444e      	add	r6, r9
 80098b4:	eba5 0509 	sub.w	r5, r5, r9
 80098b8:	6026      	str	r6, [r4, #0]
 80098ba:	60a5      	str	r5, [r4, #8]
 80098bc:	463e      	mov	r6, r7
 80098be:	42be      	cmp	r6, r7
 80098c0:	d900      	bls.n	80098c4 <__ssputs_r+0x72>
 80098c2:	463e      	mov	r6, r7
 80098c4:	6820      	ldr	r0, [r4, #0]
 80098c6:	4632      	mov	r2, r6
 80098c8:	4641      	mov	r1, r8
 80098ca:	f000 f9c5 	bl	8009c58 <memmove>
 80098ce:	68a3      	ldr	r3, [r4, #8]
 80098d0:	1b9b      	subs	r3, r3, r6
 80098d2:	60a3      	str	r3, [r4, #8]
 80098d4:	6823      	ldr	r3, [r4, #0]
 80098d6:	4433      	add	r3, r6
 80098d8:	6023      	str	r3, [r4, #0]
 80098da:	2000      	movs	r0, #0
 80098dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80098e0:	462a      	mov	r2, r5
 80098e2:	f000 fa05 	bl	8009cf0 <_realloc_r>
 80098e6:	4606      	mov	r6, r0
 80098e8:	2800      	cmp	r0, #0
 80098ea:	d1e0      	bne.n	80098ae <__ssputs_r+0x5c>
 80098ec:	6921      	ldr	r1, [r4, #16]
 80098ee:	4650      	mov	r0, sl
 80098f0:	f7fe ff5a 	bl	80087a8 <_free_r>
 80098f4:	230c      	movs	r3, #12
 80098f6:	f8ca 3000 	str.w	r3, [sl]
 80098fa:	89a3      	ldrh	r3, [r4, #12]
 80098fc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009900:	81a3      	strh	r3, [r4, #12]
 8009902:	f04f 30ff 	mov.w	r0, #4294967295
 8009906:	e7e9      	b.n	80098dc <__ssputs_r+0x8a>

08009908 <_svfiprintf_r>:
 8009908:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800990c:	4698      	mov	r8, r3
 800990e:	898b      	ldrh	r3, [r1, #12]
 8009910:	061b      	lsls	r3, r3, #24
 8009912:	b09d      	sub	sp, #116	@ 0x74
 8009914:	4607      	mov	r7, r0
 8009916:	460d      	mov	r5, r1
 8009918:	4614      	mov	r4, r2
 800991a:	d510      	bpl.n	800993e <_svfiprintf_r+0x36>
 800991c:	690b      	ldr	r3, [r1, #16]
 800991e:	b973      	cbnz	r3, 800993e <_svfiprintf_r+0x36>
 8009920:	2140      	movs	r1, #64	@ 0x40
 8009922:	f7fc f911 	bl	8005b48 <_malloc_r>
 8009926:	6028      	str	r0, [r5, #0]
 8009928:	6128      	str	r0, [r5, #16]
 800992a:	b930      	cbnz	r0, 800993a <_svfiprintf_r+0x32>
 800992c:	230c      	movs	r3, #12
 800992e:	603b      	str	r3, [r7, #0]
 8009930:	f04f 30ff 	mov.w	r0, #4294967295
 8009934:	b01d      	add	sp, #116	@ 0x74
 8009936:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800993a:	2340      	movs	r3, #64	@ 0x40
 800993c:	616b      	str	r3, [r5, #20]
 800993e:	2300      	movs	r3, #0
 8009940:	9309      	str	r3, [sp, #36]	@ 0x24
 8009942:	2320      	movs	r3, #32
 8009944:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009948:	f8cd 800c 	str.w	r8, [sp, #12]
 800994c:	2330      	movs	r3, #48	@ 0x30
 800994e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8009aec <_svfiprintf_r+0x1e4>
 8009952:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009956:	f04f 0901 	mov.w	r9, #1
 800995a:	4623      	mov	r3, r4
 800995c:	469a      	mov	sl, r3
 800995e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009962:	b10a      	cbz	r2, 8009968 <_svfiprintf_r+0x60>
 8009964:	2a25      	cmp	r2, #37	@ 0x25
 8009966:	d1f9      	bne.n	800995c <_svfiprintf_r+0x54>
 8009968:	ebba 0b04 	subs.w	fp, sl, r4
 800996c:	d00b      	beq.n	8009986 <_svfiprintf_r+0x7e>
 800996e:	465b      	mov	r3, fp
 8009970:	4622      	mov	r2, r4
 8009972:	4629      	mov	r1, r5
 8009974:	4638      	mov	r0, r7
 8009976:	f7ff ff6c 	bl	8009852 <__ssputs_r>
 800997a:	3001      	adds	r0, #1
 800997c:	f000 80a7 	beq.w	8009ace <_svfiprintf_r+0x1c6>
 8009980:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009982:	445a      	add	r2, fp
 8009984:	9209      	str	r2, [sp, #36]	@ 0x24
 8009986:	f89a 3000 	ldrb.w	r3, [sl]
 800998a:	2b00      	cmp	r3, #0
 800998c:	f000 809f 	beq.w	8009ace <_svfiprintf_r+0x1c6>
 8009990:	2300      	movs	r3, #0
 8009992:	f04f 32ff 	mov.w	r2, #4294967295
 8009996:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800999a:	f10a 0a01 	add.w	sl, sl, #1
 800999e:	9304      	str	r3, [sp, #16]
 80099a0:	9307      	str	r3, [sp, #28]
 80099a2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80099a6:	931a      	str	r3, [sp, #104]	@ 0x68
 80099a8:	4654      	mov	r4, sl
 80099aa:	2205      	movs	r2, #5
 80099ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80099b0:	484e      	ldr	r0, [pc, #312]	@ (8009aec <_svfiprintf_r+0x1e4>)
 80099b2:	f7f6 fc0d 	bl	80001d0 <memchr>
 80099b6:	9a04      	ldr	r2, [sp, #16]
 80099b8:	b9d8      	cbnz	r0, 80099f2 <_svfiprintf_r+0xea>
 80099ba:	06d0      	lsls	r0, r2, #27
 80099bc:	bf44      	itt	mi
 80099be:	2320      	movmi	r3, #32
 80099c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80099c4:	0711      	lsls	r1, r2, #28
 80099c6:	bf44      	itt	mi
 80099c8:	232b      	movmi	r3, #43	@ 0x2b
 80099ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80099ce:	f89a 3000 	ldrb.w	r3, [sl]
 80099d2:	2b2a      	cmp	r3, #42	@ 0x2a
 80099d4:	d015      	beq.n	8009a02 <_svfiprintf_r+0xfa>
 80099d6:	9a07      	ldr	r2, [sp, #28]
 80099d8:	4654      	mov	r4, sl
 80099da:	2000      	movs	r0, #0
 80099dc:	f04f 0c0a 	mov.w	ip, #10
 80099e0:	4621      	mov	r1, r4
 80099e2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80099e6:	3b30      	subs	r3, #48	@ 0x30
 80099e8:	2b09      	cmp	r3, #9
 80099ea:	d94b      	bls.n	8009a84 <_svfiprintf_r+0x17c>
 80099ec:	b1b0      	cbz	r0, 8009a1c <_svfiprintf_r+0x114>
 80099ee:	9207      	str	r2, [sp, #28]
 80099f0:	e014      	b.n	8009a1c <_svfiprintf_r+0x114>
 80099f2:	eba0 0308 	sub.w	r3, r0, r8
 80099f6:	fa09 f303 	lsl.w	r3, r9, r3
 80099fa:	4313      	orrs	r3, r2
 80099fc:	9304      	str	r3, [sp, #16]
 80099fe:	46a2      	mov	sl, r4
 8009a00:	e7d2      	b.n	80099a8 <_svfiprintf_r+0xa0>
 8009a02:	9b03      	ldr	r3, [sp, #12]
 8009a04:	1d19      	adds	r1, r3, #4
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	9103      	str	r1, [sp, #12]
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	bfbb      	ittet	lt
 8009a0e:	425b      	neglt	r3, r3
 8009a10:	f042 0202 	orrlt.w	r2, r2, #2
 8009a14:	9307      	strge	r3, [sp, #28]
 8009a16:	9307      	strlt	r3, [sp, #28]
 8009a18:	bfb8      	it	lt
 8009a1a:	9204      	strlt	r2, [sp, #16]
 8009a1c:	7823      	ldrb	r3, [r4, #0]
 8009a1e:	2b2e      	cmp	r3, #46	@ 0x2e
 8009a20:	d10a      	bne.n	8009a38 <_svfiprintf_r+0x130>
 8009a22:	7863      	ldrb	r3, [r4, #1]
 8009a24:	2b2a      	cmp	r3, #42	@ 0x2a
 8009a26:	d132      	bne.n	8009a8e <_svfiprintf_r+0x186>
 8009a28:	9b03      	ldr	r3, [sp, #12]
 8009a2a:	1d1a      	adds	r2, r3, #4
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	9203      	str	r2, [sp, #12]
 8009a30:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009a34:	3402      	adds	r4, #2
 8009a36:	9305      	str	r3, [sp, #20]
 8009a38:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8009afc <_svfiprintf_r+0x1f4>
 8009a3c:	7821      	ldrb	r1, [r4, #0]
 8009a3e:	2203      	movs	r2, #3
 8009a40:	4650      	mov	r0, sl
 8009a42:	f7f6 fbc5 	bl	80001d0 <memchr>
 8009a46:	b138      	cbz	r0, 8009a58 <_svfiprintf_r+0x150>
 8009a48:	9b04      	ldr	r3, [sp, #16]
 8009a4a:	eba0 000a 	sub.w	r0, r0, sl
 8009a4e:	2240      	movs	r2, #64	@ 0x40
 8009a50:	4082      	lsls	r2, r0
 8009a52:	4313      	orrs	r3, r2
 8009a54:	3401      	adds	r4, #1
 8009a56:	9304      	str	r3, [sp, #16]
 8009a58:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a5c:	4824      	ldr	r0, [pc, #144]	@ (8009af0 <_svfiprintf_r+0x1e8>)
 8009a5e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009a62:	2206      	movs	r2, #6
 8009a64:	f7f6 fbb4 	bl	80001d0 <memchr>
 8009a68:	2800      	cmp	r0, #0
 8009a6a:	d036      	beq.n	8009ada <_svfiprintf_r+0x1d2>
 8009a6c:	4b21      	ldr	r3, [pc, #132]	@ (8009af4 <_svfiprintf_r+0x1ec>)
 8009a6e:	bb1b      	cbnz	r3, 8009ab8 <_svfiprintf_r+0x1b0>
 8009a70:	9b03      	ldr	r3, [sp, #12]
 8009a72:	3307      	adds	r3, #7
 8009a74:	f023 0307 	bic.w	r3, r3, #7
 8009a78:	3308      	adds	r3, #8
 8009a7a:	9303      	str	r3, [sp, #12]
 8009a7c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009a7e:	4433      	add	r3, r6
 8009a80:	9309      	str	r3, [sp, #36]	@ 0x24
 8009a82:	e76a      	b.n	800995a <_svfiprintf_r+0x52>
 8009a84:	fb0c 3202 	mla	r2, ip, r2, r3
 8009a88:	460c      	mov	r4, r1
 8009a8a:	2001      	movs	r0, #1
 8009a8c:	e7a8      	b.n	80099e0 <_svfiprintf_r+0xd8>
 8009a8e:	2300      	movs	r3, #0
 8009a90:	3401      	adds	r4, #1
 8009a92:	9305      	str	r3, [sp, #20]
 8009a94:	4619      	mov	r1, r3
 8009a96:	f04f 0c0a 	mov.w	ip, #10
 8009a9a:	4620      	mov	r0, r4
 8009a9c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009aa0:	3a30      	subs	r2, #48	@ 0x30
 8009aa2:	2a09      	cmp	r2, #9
 8009aa4:	d903      	bls.n	8009aae <_svfiprintf_r+0x1a6>
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d0c6      	beq.n	8009a38 <_svfiprintf_r+0x130>
 8009aaa:	9105      	str	r1, [sp, #20]
 8009aac:	e7c4      	b.n	8009a38 <_svfiprintf_r+0x130>
 8009aae:	fb0c 2101 	mla	r1, ip, r1, r2
 8009ab2:	4604      	mov	r4, r0
 8009ab4:	2301      	movs	r3, #1
 8009ab6:	e7f0      	b.n	8009a9a <_svfiprintf_r+0x192>
 8009ab8:	ab03      	add	r3, sp, #12
 8009aba:	9300      	str	r3, [sp, #0]
 8009abc:	462a      	mov	r2, r5
 8009abe:	4b0e      	ldr	r3, [pc, #56]	@ (8009af8 <_svfiprintf_r+0x1f0>)
 8009ac0:	a904      	add	r1, sp, #16
 8009ac2:	4638      	mov	r0, r7
 8009ac4:	f7fc fff2 	bl	8006aac <_printf_float>
 8009ac8:	1c42      	adds	r2, r0, #1
 8009aca:	4606      	mov	r6, r0
 8009acc:	d1d6      	bne.n	8009a7c <_svfiprintf_r+0x174>
 8009ace:	89ab      	ldrh	r3, [r5, #12]
 8009ad0:	065b      	lsls	r3, r3, #25
 8009ad2:	f53f af2d 	bmi.w	8009930 <_svfiprintf_r+0x28>
 8009ad6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009ad8:	e72c      	b.n	8009934 <_svfiprintf_r+0x2c>
 8009ada:	ab03      	add	r3, sp, #12
 8009adc:	9300      	str	r3, [sp, #0]
 8009ade:	462a      	mov	r2, r5
 8009ae0:	4b05      	ldr	r3, [pc, #20]	@ (8009af8 <_svfiprintf_r+0x1f0>)
 8009ae2:	a904      	add	r1, sp, #16
 8009ae4:	4638      	mov	r0, r7
 8009ae6:	f7fd fa79 	bl	8006fdc <_printf_i>
 8009aea:	e7ed      	b.n	8009ac8 <_svfiprintf_r+0x1c0>
 8009aec:	0800aa40 	.word	0x0800aa40
 8009af0:	0800aa4a 	.word	0x0800aa4a
 8009af4:	08006aad 	.word	0x08006aad
 8009af8:	08009853 	.word	0x08009853
 8009afc:	0800aa46 	.word	0x0800aa46

08009b00 <__sflush_r>:
 8009b00:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009b04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b08:	0716      	lsls	r6, r2, #28
 8009b0a:	4605      	mov	r5, r0
 8009b0c:	460c      	mov	r4, r1
 8009b0e:	d454      	bmi.n	8009bba <__sflush_r+0xba>
 8009b10:	684b      	ldr	r3, [r1, #4]
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	dc02      	bgt.n	8009b1c <__sflush_r+0x1c>
 8009b16:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	dd48      	ble.n	8009bae <__sflush_r+0xae>
 8009b1c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009b1e:	2e00      	cmp	r6, #0
 8009b20:	d045      	beq.n	8009bae <__sflush_r+0xae>
 8009b22:	2300      	movs	r3, #0
 8009b24:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009b28:	682f      	ldr	r7, [r5, #0]
 8009b2a:	6a21      	ldr	r1, [r4, #32]
 8009b2c:	602b      	str	r3, [r5, #0]
 8009b2e:	d030      	beq.n	8009b92 <__sflush_r+0x92>
 8009b30:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009b32:	89a3      	ldrh	r3, [r4, #12]
 8009b34:	0759      	lsls	r1, r3, #29
 8009b36:	d505      	bpl.n	8009b44 <__sflush_r+0x44>
 8009b38:	6863      	ldr	r3, [r4, #4]
 8009b3a:	1ad2      	subs	r2, r2, r3
 8009b3c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009b3e:	b10b      	cbz	r3, 8009b44 <__sflush_r+0x44>
 8009b40:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009b42:	1ad2      	subs	r2, r2, r3
 8009b44:	2300      	movs	r3, #0
 8009b46:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009b48:	6a21      	ldr	r1, [r4, #32]
 8009b4a:	4628      	mov	r0, r5
 8009b4c:	47b0      	blx	r6
 8009b4e:	1c43      	adds	r3, r0, #1
 8009b50:	89a3      	ldrh	r3, [r4, #12]
 8009b52:	d106      	bne.n	8009b62 <__sflush_r+0x62>
 8009b54:	6829      	ldr	r1, [r5, #0]
 8009b56:	291d      	cmp	r1, #29
 8009b58:	d82b      	bhi.n	8009bb2 <__sflush_r+0xb2>
 8009b5a:	4a2a      	ldr	r2, [pc, #168]	@ (8009c04 <__sflush_r+0x104>)
 8009b5c:	410a      	asrs	r2, r1
 8009b5e:	07d6      	lsls	r6, r2, #31
 8009b60:	d427      	bmi.n	8009bb2 <__sflush_r+0xb2>
 8009b62:	2200      	movs	r2, #0
 8009b64:	6062      	str	r2, [r4, #4]
 8009b66:	04d9      	lsls	r1, r3, #19
 8009b68:	6922      	ldr	r2, [r4, #16]
 8009b6a:	6022      	str	r2, [r4, #0]
 8009b6c:	d504      	bpl.n	8009b78 <__sflush_r+0x78>
 8009b6e:	1c42      	adds	r2, r0, #1
 8009b70:	d101      	bne.n	8009b76 <__sflush_r+0x76>
 8009b72:	682b      	ldr	r3, [r5, #0]
 8009b74:	b903      	cbnz	r3, 8009b78 <__sflush_r+0x78>
 8009b76:	6560      	str	r0, [r4, #84]	@ 0x54
 8009b78:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009b7a:	602f      	str	r7, [r5, #0]
 8009b7c:	b1b9      	cbz	r1, 8009bae <__sflush_r+0xae>
 8009b7e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009b82:	4299      	cmp	r1, r3
 8009b84:	d002      	beq.n	8009b8c <__sflush_r+0x8c>
 8009b86:	4628      	mov	r0, r5
 8009b88:	f7fe fe0e 	bl	80087a8 <_free_r>
 8009b8c:	2300      	movs	r3, #0
 8009b8e:	6363      	str	r3, [r4, #52]	@ 0x34
 8009b90:	e00d      	b.n	8009bae <__sflush_r+0xae>
 8009b92:	2301      	movs	r3, #1
 8009b94:	4628      	mov	r0, r5
 8009b96:	47b0      	blx	r6
 8009b98:	4602      	mov	r2, r0
 8009b9a:	1c50      	adds	r0, r2, #1
 8009b9c:	d1c9      	bne.n	8009b32 <__sflush_r+0x32>
 8009b9e:	682b      	ldr	r3, [r5, #0]
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d0c6      	beq.n	8009b32 <__sflush_r+0x32>
 8009ba4:	2b1d      	cmp	r3, #29
 8009ba6:	d001      	beq.n	8009bac <__sflush_r+0xac>
 8009ba8:	2b16      	cmp	r3, #22
 8009baa:	d11e      	bne.n	8009bea <__sflush_r+0xea>
 8009bac:	602f      	str	r7, [r5, #0]
 8009bae:	2000      	movs	r0, #0
 8009bb0:	e022      	b.n	8009bf8 <__sflush_r+0xf8>
 8009bb2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009bb6:	b21b      	sxth	r3, r3
 8009bb8:	e01b      	b.n	8009bf2 <__sflush_r+0xf2>
 8009bba:	690f      	ldr	r7, [r1, #16]
 8009bbc:	2f00      	cmp	r7, #0
 8009bbe:	d0f6      	beq.n	8009bae <__sflush_r+0xae>
 8009bc0:	0793      	lsls	r3, r2, #30
 8009bc2:	680e      	ldr	r6, [r1, #0]
 8009bc4:	bf08      	it	eq
 8009bc6:	694b      	ldreq	r3, [r1, #20]
 8009bc8:	600f      	str	r7, [r1, #0]
 8009bca:	bf18      	it	ne
 8009bcc:	2300      	movne	r3, #0
 8009bce:	eba6 0807 	sub.w	r8, r6, r7
 8009bd2:	608b      	str	r3, [r1, #8]
 8009bd4:	f1b8 0f00 	cmp.w	r8, #0
 8009bd8:	dde9      	ble.n	8009bae <__sflush_r+0xae>
 8009bda:	6a21      	ldr	r1, [r4, #32]
 8009bdc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8009bde:	4643      	mov	r3, r8
 8009be0:	463a      	mov	r2, r7
 8009be2:	4628      	mov	r0, r5
 8009be4:	47b0      	blx	r6
 8009be6:	2800      	cmp	r0, #0
 8009be8:	dc08      	bgt.n	8009bfc <__sflush_r+0xfc>
 8009bea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009bee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009bf2:	81a3      	strh	r3, [r4, #12]
 8009bf4:	f04f 30ff 	mov.w	r0, #4294967295
 8009bf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009bfc:	4407      	add	r7, r0
 8009bfe:	eba8 0800 	sub.w	r8, r8, r0
 8009c02:	e7e7      	b.n	8009bd4 <__sflush_r+0xd4>
 8009c04:	dfbffffe 	.word	0xdfbffffe

08009c08 <_fflush_r>:
 8009c08:	b538      	push	{r3, r4, r5, lr}
 8009c0a:	690b      	ldr	r3, [r1, #16]
 8009c0c:	4605      	mov	r5, r0
 8009c0e:	460c      	mov	r4, r1
 8009c10:	b913      	cbnz	r3, 8009c18 <_fflush_r+0x10>
 8009c12:	2500      	movs	r5, #0
 8009c14:	4628      	mov	r0, r5
 8009c16:	bd38      	pop	{r3, r4, r5, pc}
 8009c18:	b118      	cbz	r0, 8009c22 <_fflush_r+0x1a>
 8009c1a:	6a03      	ldr	r3, [r0, #32]
 8009c1c:	b90b      	cbnz	r3, 8009c22 <_fflush_r+0x1a>
 8009c1e:	f7fd fd9d 	bl	800775c <__sinit>
 8009c22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d0f3      	beq.n	8009c12 <_fflush_r+0xa>
 8009c2a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009c2c:	07d0      	lsls	r0, r2, #31
 8009c2e:	d404      	bmi.n	8009c3a <_fflush_r+0x32>
 8009c30:	0599      	lsls	r1, r3, #22
 8009c32:	d402      	bmi.n	8009c3a <_fflush_r+0x32>
 8009c34:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009c36:	f7f7 ff10 	bl	8001a5a <__retarget_lock_acquire_recursive>
 8009c3a:	4628      	mov	r0, r5
 8009c3c:	4621      	mov	r1, r4
 8009c3e:	f7ff ff5f 	bl	8009b00 <__sflush_r>
 8009c42:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009c44:	07da      	lsls	r2, r3, #31
 8009c46:	4605      	mov	r5, r0
 8009c48:	d4e4      	bmi.n	8009c14 <_fflush_r+0xc>
 8009c4a:	89a3      	ldrh	r3, [r4, #12]
 8009c4c:	059b      	lsls	r3, r3, #22
 8009c4e:	d4e1      	bmi.n	8009c14 <_fflush_r+0xc>
 8009c50:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009c52:	f7f7 ff0e 	bl	8001a72 <__retarget_lock_release_recursive>
 8009c56:	e7dd      	b.n	8009c14 <_fflush_r+0xc>

08009c58 <memmove>:
 8009c58:	4288      	cmp	r0, r1
 8009c5a:	b510      	push	{r4, lr}
 8009c5c:	eb01 0402 	add.w	r4, r1, r2
 8009c60:	d902      	bls.n	8009c68 <memmove+0x10>
 8009c62:	4284      	cmp	r4, r0
 8009c64:	4623      	mov	r3, r4
 8009c66:	d807      	bhi.n	8009c78 <memmove+0x20>
 8009c68:	1e43      	subs	r3, r0, #1
 8009c6a:	42a1      	cmp	r1, r4
 8009c6c:	d008      	beq.n	8009c80 <memmove+0x28>
 8009c6e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009c72:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009c76:	e7f8      	b.n	8009c6a <memmove+0x12>
 8009c78:	4402      	add	r2, r0
 8009c7a:	4601      	mov	r1, r0
 8009c7c:	428a      	cmp	r2, r1
 8009c7e:	d100      	bne.n	8009c82 <memmove+0x2a>
 8009c80:	bd10      	pop	{r4, pc}
 8009c82:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009c86:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009c8a:	e7f7      	b.n	8009c7c <memmove+0x24>

08009c8c <__assert_func>:
 8009c8c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009c8e:	4614      	mov	r4, r2
 8009c90:	461a      	mov	r2, r3
 8009c92:	4b09      	ldr	r3, [pc, #36]	@ (8009cb8 <__assert_func+0x2c>)
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	4605      	mov	r5, r0
 8009c98:	68d8      	ldr	r0, [r3, #12]
 8009c9a:	b954      	cbnz	r4, 8009cb2 <__assert_func+0x26>
 8009c9c:	4b07      	ldr	r3, [pc, #28]	@ (8009cbc <__assert_func+0x30>)
 8009c9e:	461c      	mov	r4, r3
 8009ca0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009ca4:	9100      	str	r1, [sp, #0]
 8009ca6:	462b      	mov	r3, r5
 8009ca8:	4905      	ldr	r1, [pc, #20]	@ (8009cc0 <__assert_func+0x34>)
 8009caa:	f000 f84f 	bl	8009d4c <fiprintf>
 8009cae:	f000 f85f 	bl	8009d70 <abort>
 8009cb2:	4b04      	ldr	r3, [pc, #16]	@ (8009cc4 <__assert_func+0x38>)
 8009cb4:	e7f4      	b.n	8009ca0 <__assert_func+0x14>
 8009cb6:	bf00      	nop
 8009cb8:	20000188 	.word	0x20000188
 8009cbc:	0800a5ae 	.word	0x0800a5ae
 8009cc0:	0800aa5e 	.word	0x0800aa5e
 8009cc4:	0800aa51 	.word	0x0800aa51

08009cc8 <_calloc_r>:
 8009cc8:	b570      	push	{r4, r5, r6, lr}
 8009cca:	fba1 5402 	umull	r5, r4, r1, r2
 8009cce:	b93c      	cbnz	r4, 8009ce0 <_calloc_r+0x18>
 8009cd0:	4629      	mov	r1, r5
 8009cd2:	f7fb ff39 	bl	8005b48 <_malloc_r>
 8009cd6:	4606      	mov	r6, r0
 8009cd8:	b928      	cbnz	r0, 8009ce6 <_calloc_r+0x1e>
 8009cda:	2600      	movs	r6, #0
 8009cdc:	4630      	mov	r0, r6
 8009cde:	bd70      	pop	{r4, r5, r6, pc}
 8009ce0:	220c      	movs	r2, #12
 8009ce2:	6002      	str	r2, [r0, #0]
 8009ce4:	e7f9      	b.n	8009cda <_calloc_r+0x12>
 8009ce6:	462a      	mov	r2, r5
 8009ce8:	4621      	mov	r1, r4
 8009cea:	f7fd fe3d 	bl	8007968 <memset>
 8009cee:	e7f5      	b.n	8009cdc <_calloc_r+0x14>

08009cf0 <_realloc_r>:
 8009cf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009cf4:	4680      	mov	r8, r0
 8009cf6:	4615      	mov	r5, r2
 8009cf8:	460c      	mov	r4, r1
 8009cfa:	b921      	cbnz	r1, 8009d06 <_realloc_r+0x16>
 8009cfc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009d00:	4611      	mov	r1, r2
 8009d02:	f7fb bf21 	b.w	8005b48 <_malloc_r>
 8009d06:	b92a      	cbnz	r2, 8009d14 <_realloc_r+0x24>
 8009d08:	f7fe fd4e 	bl	80087a8 <_free_r>
 8009d0c:	2400      	movs	r4, #0
 8009d0e:	4620      	mov	r0, r4
 8009d10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009d14:	f000 f833 	bl	8009d7e <_malloc_usable_size_r>
 8009d18:	4285      	cmp	r5, r0
 8009d1a:	4606      	mov	r6, r0
 8009d1c:	d802      	bhi.n	8009d24 <_realloc_r+0x34>
 8009d1e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8009d22:	d8f4      	bhi.n	8009d0e <_realloc_r+0x1e>
 8009d24:	4629      	mov	r1, r5
 8009d26:	4640      	mov	r0, r8
 8009d28:	f7fb ff0e 	bl	8005b48 <_malloc_r>
 8009d2c:	4607      	mov	r7, r0
 8009d2e:	2800      	cmp	r0, #0
 8009d30:	d0ec      	beq.n	8009d0c <_realloc_r+0x1c>
 8009d32:	42b5      	cmp	r5, r6
 8009d34:	462a      	mov	r2, r5
 8009d36:	4621      	mov	r1, r4
 8009d38:	bf28      	it	cs
 8009d3a:	4632      	movcs	r2, r6
 8009d3c:	f7fd fec8 	bl	8007ad0 <memcpy>
 8009d40:	4621      	mov	r1, r4
 8009d42:	4640      	mov	r0, r8
 8009d44:	f7fe fd30 	bl	80087a8 <_free_r>
 8009d48:	463c      	mov	r4, r7
 8009d4a:	e7e0      	b.n	8009d0e <_realloc_r+0x1e>

08009d4c <fiprintf>:
 8009d4c:	b40e      	push	{r1, r2, r3}
 8009d4e:	b503      	push	{r0, r1, lr}
 8009d50:	4601      	mov	r1, r0
 8009d52:	ab03      	add	r3, sp, #12
 8009d54:	4805      	ldr	r0, [pc, #20]	@ (8009d6c <fiprintf+0x20>)
 8009d56:	f853 2b04 	ldr.w	r2, [r3], #4
 8009d5a:	6800      	ldr	r0, [r0, #0]
 8009d5c:	9301      	str	r3, [sp, #4]
 8009d5e:	f000 f83f 	bl	8009de0 <_vfiprintf_r>
 8009d62:	b002      	add	sp, #8
 8009d64:	f85d eb04 	ldr.w	lr, [sp], #4
 8009d68:	b003      	add	sp, #12
 8009d6a:	4770      	bx	lr
 8009d6c:	20000188 	.word	0x20000188

08009d70 <abort>:
 8009d70:	b508      	push	{r3, lr}
 8009d72:	2006      	movs	r0, #6
 8009d74:	f000 fa08 	bl	800a188 <raise>
 8009d78:	2001      	movs	r0, #1
 8009d7a:	f7f7 fd7d 	bl	8001878 <_exit>

08009d7e <_malloc_usable_size_r>:
 8009d7e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009d82:	1f18      	subs	r0, r3, #4
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	bfbc      	itt	lt
 8009d88:	580b      	ldrlt	r3, [r1, r0]
 8009d8a:	18c0      	addlt	r0, r0, r3
 8009d8c:	4770      	bx	lr

08009d8e <__sfputc_r>:
 8009d8e:	6893      	ldr	r3, [r2, #8]
 8009d90:	3b01      	subs	r3, #1
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	b410      	push	{r4}
 8009d96:	6093      	str	r3, [r2, #8]
 8009d98:	da08      	bge.n	8009dac <__sfputc_r+0x1e>
 8009d9a:	6994      	ldr	r4, [r2, #24]
 8009d9c:	42a3      	cmp	r3, r4
 8009d9e:	db01      	blt.n	8009da4 <__sfputc_r+0x16>
 8009da0:	290a      	cmp	r1, #10
 8009da2:	d103      	bne.n	8009dac <__sfputc_r+0x1e>
 8009da4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009da8:	f000 b932 	b.w	800a010 <__swbuf_r>
 8009dac:	6813      	ldr	r3, [r2, #0]
 8009dae:	1c58      	adds	r0, r3, #1
 8009db0:	6010      	str	r0, [r2, #0]
 8009db2:	7019      	strb	r1, [r3, #0]
 8009db4:	4608      	mov	r0, r1
 8009db6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009dba:	4770      	bx	lr

08009dbc <__sfputs_r>:
 8009dbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009dbe:	4606      	mov	r6, r0
 8009dc0:	460f      	mov	r7, r1
 8009dc2:	4614      	mov	r4, r2
 8009dc4:	18d5      	adds	r5, r2, r3
 8009dc6:	42ac      	cmp	r4, r5
 8009dc8:	d101      	bne.n	8009dce <__sfputs_r+0x12>
 8009dca:	2000      	movs	r0, #0
 8009dcc:	e007      	b.n	8009dde <__sfputs_r+0x22>
 8009dce:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009dd2:	463a      	mov	r2, r7
 8009dd4:	4630      	mov	r0, r6
 8009dd6:	f7ff ffda 	bl	8009d8e <__sfputc_r>
 8009dda:	1c43      	adds	r3, r0, #1
 8009ddc:	d1f3      	bne.n	8009dc6 <__sfputs_r+0xa>
 8009dde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009de0 <_vfiprintf_r>:
 8009de0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009de4:	460d      	mov	r5, r1
 8009de6:	b09d      	sub	sp, #116	@ 0x74
 8009de8:	4614      	mov	r4, r2
 8009dea:	4698      	mov	r8, r3
 8009dec:	4606      	mov	r6, r0
 8009dee:	b118      	cbz	r0, 8009df8 <_vfiprintf_r+0x18>
 8009df0:	6a03      	ldr	r3, [r0, #32]
 8009df2:	b90b      	cbnz	r3, 8009df8 <_vfiprintf_r+0x18>
 8009df4:	f7fd fcb2 	bl	800775c <__sinit>
 8009df8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009dfa:	07d9      	lsls	r1, r3, #31
 8009dfc:	d405      	bmi.n	8009e0a <_vfiprintf_r+0x2a>
 8009dfe:	89ab      	ldrh	r3, [r5, #12]
 8009e00:	059a      	lsls	r2, r3, #22
 8009e02:	d402      	bmi.n	8009e0a <_vfiprintf_r+0x2a>
 8009e04:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009e06:	f7f7 fe28 	bl	8001a5a <__retarget_lock_acquire_recursive>
 8009e0a:	89ab      	ldrh	r3, [r5, #12]
 8009e0c:	071b      	lsls	r3, r3, #28
 8009e0e:	d501      	bpl.n	8009e14 <_vfiprintf_r+0x34>
 8009e10:	692b      	ldr	r3, [r5, #16]
 8009e12:	b99b      	cbnz	r3, 8009e3c <_vfiprintf_r+0x5c>
 8009e14:	4629      	mov	r1, r5
 8009e16:	4630      	mov	r0, r6
 8009e18:	f000 f938 	bl	800a08c <__swsetup_r>
 8009e1c:	b170      	cbz	r0, 8009e3c <_vfiprintf_r+0x5c>
 8009e1e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009e20:	07dc      	lsls	r4, r3, #31
 8009e22:	d504      	bpl.n	8009e2e <_vfiprintf_r+0x4e>
 8009e24:	f04f 30ff 	mov.w	r0, #4294967295
 8009e28:	b01d      	add	sp, #116	@ 0x74
 8009e2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e2e:	89ab      	ldrh	r3, [r5, #12]
 8009e30:	0598      	lsls	r0, r3, #22
 8009e32:	d4f7      	bmi.n	8009e24 <_vfiprintf_r+0x44>
 8009e34:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009e36:	f7f7 fe1c 	bl	8001a72 <__retarget_lock_release_recursive>
 8009e3a:	e7f3      	b.n	8009e24 <_vfiprintf_r+0x44>
 8009e3c:	2300      	movs	r3, #0
 8009e3e:	9309      	str	r3, [sp, #36]	@ 0x24
 8009e40:	2320      	movs	r3, #32
 8009e42:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009e46:	f8cd 800c 	str.w	r8, [sp, #12]
 8009e4a:	2330      	movs	r3, #48	@ 0x30
 8009e4c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009ffc <_vfiprintf_r+0x21c>
 8009e50:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009e54:	f04f 0901 	mov.w	r9, #1
 8009e58:	4623      	mov	r3, r4
 8009e5a:	469a      	mov	sl, r3
 8009e5c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009e60:	b10a      	cbz	r2, 8009e66 <_vfiprintf_r+0x86>
 8009e62:	2a25      	cmp	r2, #37	@ 0x25
 8009e64:	d1f9      	bne.n	8009e5a <_vfiprintf_r+0x7a>
 8009e66:	ebba 0b04 	subs.w	fp, sl, r4
 8009e6a:	d00b      	beq.n	8009e84 <_vfiprintf_r+0xa4>
 8009e6c:	465b      	mov	r3, fp
 8009e6e:	4622      	mov	r2, r4
 8009e70:	4629      	mov	r1, r5
 8009e72:	4630      	mov	r0, r6
 8009e74:	f7ff ffa2 	bl	8009dbc <__sfputs_r>
 8009e78:	3001      	adds	r0, #1
 8009e7a:	f000 80a7 	beq.w	8009fcc <_vfiprintf_r+0x1ec>
 8009e7e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009e80:	445a      	add	r2, fp
 8009e82:	9209      	str	r2, [sp, #36]	@ 0x24
 8009e84:	f89a 3000 	ldrb.w	r3, [sl]
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	f000 809f 	beq.w	8009fcc <_vfiprintf_r+0x1ec>
 8009e8e:	2300      	movs	r3, #0
 8009e90:	f04f 32ff 	mov.w	r2, #4294967295
 8009e94:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009e98:	f10a 0a01 	add.w	sl, sl, #1
 8009e9c:	9304      	str	r3, [sp, #16]
 8009e9e:	9307      	str	r3, [sp, #28]
 8009ea0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009ea4:	931a      	str	r3, [sp, #104]	@ 0x68
 8009ea6:	4654      	mov	r4, sl
 8009ea8:	2205      	movs	r2, #5
 8009eaa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009eae:	4853      	ldr	r0, [pc, #332]	@ (8009ffc <_vfiprintf_r+0x21c>)
 8009eb0:	f7f6 f98e 	bl	80001d0 <memchr>
 8009eb4:	9a04      	ldr	r2, [sp, #16]
 8009eb6:	b9d8      	cbnz	r0, 8009ef0 <_vfiprintf_r+0x110>
 8009eb8:	06d1      	lsls	r1, r2, #27
 8009eba:	bf44      	itt	mi
 8009ebc:	2320      	movmi	r3, #32
 8009ebe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009ec2:	0713      	lsls	r3, r2, #28
 8009ec4:	bf44      	itt	mi
 8009ec6:	232b      	movmi	r3, #43	@ 0x2b
 8009ec8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009ecc:	f89a 3000 	ldrb.w	r3, [sl]
 8009ed0:	2b2a      	cmp	r3, #42	@ 0x2a
 8009ed2:	d015      	beq.n	8009f00 <_vfiprintf_r+0x120>
 8009ed4:	9a07      	ldr	r2, [sp, #28]
 8009ed6:	4654      	mov	r4, sl
 8009ed8:	2000      	movs	r0, #0
 8009eda:	f04f 0c0a 	mov.w	ip, #10
 8009ede:	4621      	mov	r1, r4
 8009ee0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009ee4:	3b30      	subs	r3, #48	@ 0x30
 8009ee6:	2b09      	cmp	r3, #9
 8009ee8:	d94b      	bls.n	8009f82 <_vfiprintf_r+0x1a2>
 8009eea:	b1b0      	cbz	r0, 8009f1a <_vfiprintf_r+0x13a>
 8009eec:	9207      	str	r2, [sp, #28]
 8009eee:	e014      	b.n	8009f1a <_vfiprintf_r+0x13a>
 8009ef0:	eba0 0308 	sub.w	r3, r0, r8
 8009ef4:	fa09 f303 	lsl.w	r3, r9, r3
 8009ef8:	4313      	orrs	r3, r2
 8009efa:	9304      	str	r3, [sp, #16]
 8009efc:	46a2      	mov	sl, r4
 8009efe:	e7d2      	b.n	8009ea6 <_vfiprintf_r+0xc6>
 8009f00:	9b03      	ldr	r3, [sp, #12]
 8009f02:	1d19      	adds	r1, r3, #4
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	9103      	str	r1, [sp, #12]
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	bfbb      	ittet	lt
 8009f0c:	425b      	neglt	r3, r3
 8009f0e:	f042 0202 	orrlt.w	r2, r2, #2
 8009f12:	9307      	strge	r3, [sp, #28]
 8009f14:	9307      	strlt	r3, [sp, #28]
 8009f16:	bfb8      	it	lt
 8009f18:	9204      	strlt	r2, [sp, #16]
 8009f1a:	7823      	ldrb	r3, [r4, #0]
 8009f1c:	2b2e      	cmp	r3, #46	@ 0x2e
 8009f1e:	d10a      	bne.n	8009f36 <_vfiprintf_r+0x156>
 8009f20:	7863      	ldrb	r3, [r4, #1]
 8009f22:	2b2a      	cmp	r3, #42	@ 0x2a
 8009f24:	d132      	bne.n	8009f8c <_vfiprintf_r+0x1ac>
 8009f26:	9b03      	ldr	r3, [sp, #12]
 8009f28:	1d1a      	adds	r2, r3, #4
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	9203      	str	r2, [sp, #12]
 8009f2e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009f32:	3402      	adds	r4, #2
 8009f34:	9305      	str	r3, [sp, #20]
 8009f36:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800a00c <_vfiprintf_r+0x22c>
 8009f3a:	7821      	ldrb	r1, [r4, #0]
 8009f3c:	2203      	movs	r2, #3
 8009f3e:	4650      	mov	r0, sl
 8009f40:	f7f6 f946 	bl	80001d0 <memchr>
 8009f44:	b138      	cbz	r0, 8009f56 <_vfiprintf_r+0x176>
 8009f46:	9b04      	ldr	r3, [sp, #16]
 8009f48:	eba0 000a 	sub.w	r0, r0, sl
 8009f4c:	2240      	movs	r2, #64	@ 0x40
 8009f4e:	4082      	lsls	r2, r0
 8009f50:	4313      	orrs	r3, r2
 8009f52:	3401      	adds	r4, #1
 8009f54:	9304      	str	r3, [sp, #16]
 8009f56:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009f5a:	4829      	ldr	r0, [pc, #164]	@ (800a000 <_vfiprintf_r+0x220>)
 8009f5c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009f60:	2206      	movs	r2, #6
 8009f62:	f7f6 f935 	bl	80001d0 <memchr>
 8009f66:	2800      	cmp	r0, #0
 8009f68:	d03f      	beq.n	8009fea <_vfiprintf_r+0x20a>
 8009f6a:	4b26      	ldr	r3, [pc, #152]	@ (800a004 <_vfiprintf_r+0x224>)
 8009f6c:	bb1b      	cbnz	r3, 8009fb6 <_vfiprintf_r+0x1d6>
 8009f6e:	9b03      	ldr	r3, [sp, #12]
 8009f70:	3307      	adds	r3, #7
 8009f72:	f023 0307 	bic.w	r3, r3, #7
 8009f76:	3308      	adds	r3, #8
 8009f78:	9303      	str	r3, [sp, #12]
 8009f7a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009f7c:	443b      	add	r3, r7
 8009f7e:	9309      	str	r3, [sp, #36]	@ 0x24
 8009f80:	e76a      	b.n	8009e58 <_vfiprintf_r+0x78>
 8009f82:	fb0c 3202 	mla	r2, ip, r2, r3
 8009f86:	460c      	mov	r4, r1
 8009f88:	2001      	movs	r0, #1
 8009f8a:	e7a8      	b.n	8009ede <_vfiprintf_r+0xfe>
 8009f8c:	2300      	movs	r3, #0
 8009f8e:	3401      	adds	r4, #1
 8009f90:	9305      	str	r3, [sp, #20]
 8009f92:	4619      	mov	r1, r3
 8009f94:	f04f 0c0a 	mov.w	ip, #10
 8009f98:	4620      	mov	r0, r4
 8009f9a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009f9e:	3a30      	subs	r2, #48	@ 0x30
 8009fa0:	2a09      	cmp	r2, #9
 8009fa2:	d903      	bls.n	8009fac <_vfiprintf_r+0x1cc>
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d0c6      	beq.n	8009f36 <_vfiprintf_r+0x156>
 8009fa8:	9105      	str	r1, [sp, #20]
 8009faa:	e7c4      	b.n	8009f36 <_vfiprintf_r+0x156>
 8009fac:	fb0c 2101 	mla	r1, ip, r1, r2
 8009fb0:	4604      	mov	r4, r0
 8009fb2:	2301      	movs	r3, #1
 8009fb4:	e7f0      	b.n	8009f98 <_vfiprintf_r+0x1b8>
 8009fb6:	ab03      	add	r3, sp, #12
 8009fb8:	9300      	str	r3, [sp, #0]
 8009fba:	462a      	mov	r2, r5
 8009fbc:	4b12      	ldr	r3, [pc, #72]	@ (800a008 <_vfiprintf_r+0x228>)
 8009fbe:	a904      	add	r1, sp, #16
 8009fc0:	4630      	mov	r0, r6
 8009fc2:	f7fc fd73 	bl	8006aac <_printf_float>
 8009fc6:	4607      	mov	r7, r0
 8009fc8:	1c78      	adds	r0, r7, #1
 8009fca:	d1d6      	bne.n	8009f7a <_vfiprintf_r+0x19a>
 8009fcc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009fce:	07d9      	lsls	r1, r3, #31
 8009fd0:	d405      	bmi.n	8009fde <_vfiprintf_r+0x1fe>
 8009fd2:	89ab      	ldrh	r3, [r5, #12]
 8009fd4:	059a      	lsls	r2, r3, #22
 8009fd6:	d402      	bmi.n	8009fde <_vfiprintf_r+0x1fe>
 8009fd8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009fda:	f7f7 fd4a 	bl	8001a72 <__retarget_lock_release_recursive>
 8009fde:	89ab      	ldrh	r3, [r5, #12]
 8009fe0:	065b      	lsls	r3, r3, #25
 8009fe2:	f53f af1f 	bmi.w	8009e24 <_vfiprintf_r+0x44>
 8009fe6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009fe8:	e71e      	b.n	8009e28 <_vfiprintf_r+0x48>
 8009fea:	ab03      	add	r3, sp, #12
 8009fec:	9300      	str	r3, [sp, #0]
 8009fee:	462a      	mov	r2, r5
 8009ff0:	4b05      	ldr	r3, [pc, #20]	@ (800a008 <_vfiprintf_r+0x228>)
 8009ff2:	a904      	add	r1, sp, #16
 8009ff4:	4630      	mov	r0, r6
 8009ff6:	f7fc fff1 	bl	8006fdc <_printf_i>
 8009ffa:	e7e4      	b.n	8009fc6 <_vfiprintf_r+0x1e6>
 8009ffc:	0800aa40 	.word	0x0800aa40
 800a000:	0800aa4a 	.word	0x0800aa4a
 800a004:	08006aad 	.word	0x08006aad
 800a008:	08009dbd 	.word	0x08009dbd
 800a00c:	0800aa46 	.word	0x0800aa46

0800a010 <__swbuf_r>:
 800a010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a012:	460e      	mov	r6, r1
 800a014:	4614      	mov	r4, r2
 800a016:	4605      	mov	r5, r0
 800a018:	b118      	cbz	r0, 800a022 <__swbuf_r+0x12>
 800a01a:	6a03      	ldr	r3, [r0, #32]
 800a01c:	b90b      	cbnz	r3, 800a022 <__swbuf_r+0x12>
 800a01e:	f7fd fb9d 	bl	800775c <__sinit>
 800a022:	69a3      	ldr	r3, [r4, #24]
 800a024:	60a3      	str	r3, [r4, #8]
 800a026:	89a3      	ldrh	r3, [r4, #12]
 800a028:	071a      	lsls	r2, r3, #28
 800a02a:	d501      	bpl.n	800a030 <__swbuf_r+0x20>
 800a02c:	6923      	ldr	r3, [r4, #16]
 800a02e:	b943      	cbnz	r3, 800a042 <__swbuf_r+0x32>
 800a030:	4621      	mov	r1, r4
 800a032:	4628      	mov	r0, r5
 800a034:	f000 f82a 	bl	800a08c <__swsetup_r>
 800a038:	b118      	cbz	r0, 800a042 <__swbuf_r+0x32>
 800a03a:	f04f 37ff 	mov.w	r7, #4294967295
 800a03e:	4638      	mov	r0, r7
 800a040:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a042:	6823      	ldr	r3, [r4, #0]
 800a044:	6922      	ldr	r2, [r4, #16]
 800a046:	1a98      	subs	r0, r3, r2
 800a048:	6963      	ldr	r3, [r4, #20]
 800a04a:	b2f6      	uxtb	r6, r6
 800a04c:	4283      	cmp	r3, r0
 800a04e:	4637      	mov	r7, r6
 800a050:	dc05      	bgt.n	800a05e <__swbuf_r+0x4e>
 800a052:	4621      	mov	r1, r4
 800a054:	4628      	mov	r0, r5
 800a056:	f7ff fdd7 	bl	8009c08 <_fflush_r>
 800a05a:	2800      	cmp	r0, #0
 800a05c:	d1ed      	bne.n	800a03a <__swbuf_r+0x2a>
 800a05e:	68a3      	ldr	r3, [r4, #8]
 800a060:	3b01      	subs	r3, #1
 800a062:	60a3      	str	r3, [r4, #8]
 800a064:	6823      	ldr	r3, [r4, #0]
 800a066:	1c5a      	adds	r2, r3, #1
 800a068:	6022      	str	r2, [r4, #0]
 800a06a:	701e      	strb	r6, [r3, #0]
 800a06c:	6962      	ldr	r2, [r4, #20]
 800a06e:	1c43      	adds	r3, r0, #1
 800a070:	429a      	cmp	r2, r3
 800a072:	d004      	beq.n	800a07e <__swbuf_r+0x6e>
 800a074:	89a3      	ldrh	r3, [r4, #12]
 800a076:	07db      	lsls	r3, r3, #31
 800a078:	d5e1      	bpl.n	800a03e <__swbuf_r+0x2e>
 800a07a:	2e0a      	cmp	r6, #10
 800a07c:	d1df      	bne.n	800a03e <__swbuf_r+0x2e>
 800a07e:	4621      	mov	r1, r4
 800a080:	4628      	mov	r0, r5
 800a082:	f7ff fdc1 	bl	8009c08 <_fflush_r>
 800a086:	2800      	cmp	r0, #0
 800a088:	d0d9      	beq.n	800a03e <__swbuf_r+0x2e>
 800a08a:	e7d6      	b.n	800a03a <__swbuf_r+0x2a>

0800a08c <__swsetup_r>:
 800a08c:	b538      	push	{r3, r4, r5, lr}
 800a08e:	4b29      	ldr	r3, [pc, #164]	@ (800a134 <__swsetup_r+0xa8>)
 800a090:	4605      	mov	r5, r0
 800a092:	6818      	ldr	r0, [r3, #0]
 800a094:	460c      	mov	r4, r1
 800a096:	b118      	cbz	r0, 800a0a0 <__swsetup_r+0x14>
 800a098:	6a03      	ldr	r3, [r0, #32]
 800a09a:	b90b      	cbnz	r3, 800a0a0 <__swsetup_r+0x14>
 800a09c:	f7fd fb5e 	bl	800775c <__sinit>
 800a0a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a0a4:	0719      	lsls	r1, r3, #28
 800a0a6:	d422      	bmi.n	800a0ee <__swsetup_r+0x62>
 800a0a8:	06da      	lsls	r2, r3, #27
 800a0aa:	d407      	bmi.n	800a0bc <__swsetup_r+0x30>
 800a0ac:	2209      	movs	r2, #9
 800a0ae:	602a      	str	r2, [r5, #0]
 800a0b0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a0b4:	81a3      	strh	r3, [r4, #12]
 800a0b6:	f04f 30ff 	mov.w	r0, #4294967295
 800a0ba:	e033      	b.n	800a124 <__swsetup_r+0x98>
 800a0bc:	0758      	lsls	r0, r3, #29
 800a0be:	d512      	bpl.n	800a0e6 <__swsetup_r+0x5a>
 800a0c0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a0c2:	b141      	cbz	r1, 800a0d6 <__swsetup_r+0x4a>
 800a0c4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a0c8:	4299      	cmp	r1, r3
 800a0ca:	d002      	beq.n	800a0d2 <__swsetup_r+0x46>
 800a0cc:	4628      	mov	r0, r5
 800a0ce:	f7fe fb6b 	bl	80087a8 <_free_r>
 800a0d2:	2300      	movs	r3, #0
 800a0d4:	6363      	str	r3, [r4, #52]	@ 0x34
 800a0d6:	89a3      	ldrh	r3, [r4, #12]
 800a0d8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800a0dc:	81a3      	strh	r3, [r4, #12]
 800a0de:	2300      	movs	r3, #0
 800a0e0:	6063      	str	r3, [r4, #4]
 800a0e2:	6923      	ldr	r3, [r4, #16]
 800a0e4:	6023      	str	r3, [r4, #0]
 800a0e6:	89a3      	ldrh	r3, [r4, #12]
 800a0e8:	f043 0308 	orr.w	r3, r3, #8
 800a0ec:	81a3      	strh	r3, [r4, #12]
 800a0ee:	6923      	ldr	r3, [r4, #16]
 800a0f0:	b94b      	cbnz	r3, 800a106 <__swsetup_r+0x7a>
 800a0f2:	89a3      	ldrh	r3, [r4, #12]
 800a0f4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800a0f8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a0fc:	d003      	beq.n	800a106 <__swsetup_r+0x7a>
 800a0fe:	4621      	mov	r1, r4
 800a100:	4628      	mov	r0, r5
 800a102:	f000 f883 	bl	800a20c <__smakebuf_r>
 800a106:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a10a:	f013 0201 	ands.w	r2, r3, #1
 800a10e:	d00a      	beq.n	800a126 <__swsetup_r+0x9a>
 800a110:	2200      	movs	r2, #0
 800a112:	60a2      	str	r2, [r4, #8]
 800a114:	6962      	ldr	r2, [r4, #20]
 800a116:	4252      	negs	r2, r2
 800a118:	61a2      	str	r2, [r4, #24]
 800a11a:	6922      	ldr	r2, [r4, #16]
 800a11c:	b942      	cbnz	r2, 800a130 <__swsetup_r+0xa4>
 800a11e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800a122:	d1c5      	bne.n	800a0b0 <__swsetup_r+0x24>
 800a124:	bd38      	pop	{r3, r4, r5, pc}
 800a126:	0799      	lsls	r1, r3, #30
 800a128:	bf58      	it	pl
 800a12a:	6962      	ldrpl	r2, [r4, #20]
 800a12c:	60a2      	str	r2, [r4, #8]
 800a12e:	e7f4      	b.n	800a11a <__swsetup_r+0x8e>
 800a130:	2000      	movs	r0, #0
 800a132:	e7f7      	b.n	800a124 <__swsetup_r+0x98>
 800a134:	20000188 	.word	0x20000188

0800a138 <_raise_r>:
 800a138:	291f      	cmp	r1, #31
 800a13a:	b538      	push	{r3, r4, r5, lr}
 800a13c:	4605      	mov	r5, r0
 800a13e:	460c      	mov	r4, r1
 800a140:	d904      	bls.n	800a14c <_raise_r+0x14>
 800a142:	2316      	movs	r3, #22
 800a144:	6003      	str	r3, [r0, #0]
 800a146:	f04f 30ff 	mov.w	r0, #4294967295
 800a14a:	bd38      	pop	{r3, r4, r5, pc}
 800a14c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800a14e:	b112      	cbz	r2, 800a156 <_raise_r+0x1e>
 800a150:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a154:	b94b      	cbnz	r3, 800a16a <_raise_r+0x32>
 800a156:	4628      	mov	r0, r5
 800a158:	f000 f830 	bl	800a1bc <_getpid_r>
 800a15c:	4622      	mov	r2, r4
 800a15e:	4601      	mov	r1, r0
 800a160:	4628      	mov	r0, r5
 800a162:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a166:	f000 b817 	b.w	800a198 <_kill_r>
 800a16a:	2b01      	cmp	r3, #1
 800a16c:	d00a      	beq.n	800a184 <_raise_r+0x4c>
 800a16e:	1c59      	adds	r1, r3, #1
 800a170:	d103      	bne.n	800a17a <_raise_r+0x42>
 800a172:	2316      	movs	r3, #22
 800a174:	6003      	str	r3, [r0, #0]
 800a176:	2001      	movs	r0, #1
 800a178:	e7e7      	b.n	800a14a <_raise_r+0x12>
 800a17a:	2100      	movs	r1, #0
 800a17c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800a180:	4620      	mov	r0, r4
 800a182:	4798      	blx	r3
 800a184:	2000      	movs	r0, #0
 800a186:	e7e0      	b.n	800a14a <_raise_r+0x12>

0800a188 <raise>:
 800a188:	4b02      	ldr	r3, [pc, #8]	@ (800a194 <raise+0xc>)
 800a18a:	4601      	mov	r1, r0
 800a18c:	6818      	ldr	r0, [r3, #0]
 800a18e:	f7ff bfd3 	b.w	800a138 <_raise_r>
 800a192:	bf00      	nop
 800a194:	20000188 	.word	0x20000188

0800a198 <_kill_r>:
 800a198:	b538      	push	{r3, r4, r5, lr}
 800a19a:	4d07      	ldr	r5, [pc, #28]	@ (800a1b8 <_kill_r+0x20>)
 800a19c:	2300      	movs	r3, #0
 800a19e:	4604      	mov	r4, r0
 800a1a0:	4608      	mov	r0, r1
 800a1a2:	4611      	mov	r1, r2
 800a1a4:	602b      	str	r3, [r5, #0]
 800a1a6:	f7f7 fb5f 	bl	8001868 <_kill>
 800a1aa:	1c43      	adds	r3, r0, #1
 800a1ac:	d102      	bne.n	800a1b4 <_kill_r+0x1c>
 800a1ae:	682b      	ldr	r3, [r5, #0]
 800a1b0:	b103      	cbz	r3, 800a1b4 <_kill_r+0x1c>
 800a1b2:	6023      	str	r3, [r4, #0]
 800a1b4:	bd38      	pop	{r3, r4, r5, pc}
 800a1b6:	bf00      	nop
 800a1b8:	20008b78 	.word	0x20008b78

0800a1bc <_getpid_r>:
 800a1bc:	f7f7 bb52 	b.w	8001864 <_getpid>

0800a1c0 <__swhatbuf_r>:
 800a1c0:	b570      	push	{r4, r5, r6, lr}
 800a1c2:	460c      	mov	r4, r1
 800a1c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a1c8:	2900      	cmp	r1, #0
 800a1ca:	b096      	sub	sp, #88	@ 0x58
 800a1cc:	4615      	mov	r5, r2
 800a1ce:	461e      	mov	r6, r3
 800a1d0:	da0d      	bge.n	800a1ee <__swhatbuf_r+0x2e>
 800a1d2:	89a3      	ldrh	r3, [r4, #12]
 800a1d4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a1d8:	f04f 0100 	mov.w	r1, #0
 800a1dc:	bf14      	ite	ne
 800a1de:	2340      	movne	r3, #64	@ 0x40
 800a1e0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a1e4:	2000      	movs	r0, #0
 800a1e6:	6031      	str	r1, [r6, #0]
 800a1e8:	602b      	str	r3, [r5, #0]
 800a1ea:	b016      	add	sp, #88	@ 0x58
 800a1ec:	bd70      	pop	{r4, r5, r6, pc}
 800a1ee:	466a      	mov	r2, sp
 800a1f0:	f000 f848 	bl	800a284 <_fstat_r>
 800a1f4:	2800      	cmp	r0, #0
 800a1f6:	dbec      	blt.n	800a1d2 <__swhatbuf_r+0x12>
 800a1f8:	9901      	ldr	r1, [sp, #4]
 800a1fa:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a1fe:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a202:	4259      	negs	r1, r3
 800a204:	4159      	adcs	r1, r3
 800a206:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a20a:	e7eb      	b.n	800a1e4 <__swhatbuf_r+0x24>

0800a20c <__smakebuf_r>:
 800a20c:	898b      	ldrh	r3, [r1, #12]
 800a20e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a210:	079d      	lsls	r5, r3, #30
 800a212:	4606      	mov	r6, r0
 800a214:	460c      	mov	r4, r1
 800a216:	d507      	bpl.n	800a228 <__smakebuf_r+0x1c>
 800a218:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a21c:	6023      	str	r3, [r4, #0]
 800a21e:	6123      	str	r3, [r4, #16]
 800a220:	2301      	movs	r3, #1
 800a222:	6163      	str	r3, [r4, #20]
 800a224:	b003      	add	sp, #12
 800a226:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a228:	ab01      	add	r3, sp, #4
 800a22a:	466a      	mov	r2, sp
 800a22c:	f7ff ffc8 	bl	800a1c0 <__swhatbuf_r>
 800a230:	9f00      	ldr	r7, [sp, #0]
 800a232:	4605      	mov	r5, r0
 800a234:	4639      	mov	r1, r7
 800a236:	4630      	mov	r0, r6
 800a238:	f7fb fc86 	bl	8005b48 <_malloc_r>
 800a23c:	b948      	cbnz	r0, 800a252 <__smakebuf_r+0x46>
 800a23e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a242:	059a      	lsls	r2, r3, #22
 800a244:	d4ee      	bmi.n	800a224 <__smakebuf_r+0x18>
 800a246:	f023 0303 	bic.w	r3, r3, #3
 800a24a:	f043 0302 	orr.w	r3, r3, #2
 800a24e:	81a3      	strh	r3, [r4, #12]
 800a250:	e7e2      	b.n	800a218 <__smakebuf_r+0xc>
 800a252:	89a3      	ldrh	r3, [r4, #12]
 800a254:	6020      	str	r0, [r4, #0]
 800a256:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a25a:	81a3      	strh	r3, [r4, #12]
 800a25c:	9b01      	ldr	r3, [sp, #4]
 800a25e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a262:	b15b      	cbz	r3, 800a27c <__smakebuf_r+0x70>
 800a264:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a268:	4630      	mov	r0, r6
 800a26a:	f000 f81d 	bl	800a2a8 <_isatty_r>
 800a26e:	b128      	cbz	r0, 800a27c <__smakebuf_r+0x70>
 800a270:	89a3      	ldrh	r3, [r4, #12]
 800a272:	f023 0303 	bic.w	r3, r3, #3
 800a276:	f043 0301 	orr.w	r3, r3, #1
 800a27a:	81a3      	strh	r3, [r4, #12]
 800a27c:	89a3      	ldrh	r3, [r4, #12]
 800a27e:	431d      	orrs	r5, r3
 800a280:	81a5      	strh	r5, [r4, #12]
 800a282:	e7cf      	b.n	800a224 <__smakebuf_r+0x18>

0800a284 <_fstat_r>:
 800a284:	b538      	push	{r3, r4, r5, lr}
 800a286:	4d07      	ldr	r5, [pc, #28]	@ (800a2a4 <_fstat_r+0x20>)
 800a288:	2300      	movs	r3, #0
 800a28a:	4604      	mov	r4, r0
 800a28c:	4608      	mov	r0, r1
 800a28e:	4611      	mov	r1, r2
 800a290:	602b      	str	r3, [r5, #0]
 800a292:	f7f7 fb16 	bl	80018c2 <_fstat>
 800a296:	1c43      	adds	r3, r0, #1
 800a298:	d102      	bne.n	800a2a0 <_fstat_r+0x1c>
 800a29a:	682b      	ldr	r3, [r5, #0]
 800a29c:	b103      	cbz	r3, 800a2a0 <_fstat_r+0x1c>
 800a29e:	6023      	str	r3, [r4, #0]
 800a2a0:	bd38      	pop	{r3, r4, r5, pc}
 800a2a2:	bf00      	nop
 800a2a4:	20008b78 	.word	0x20008b78

0800a2a8 <_isatty_r>:
 800a2a8:	b538      	push	{r3, r4, r5, lr}
 800a2aa:	4d06      	ldr	r5, [pc, #24]	@ (800a2c4 <_isatty_r+0x1c>)
 800a2ac:	2300      	movs	r3, #0
 800a2ae:	4604      	mov	r4, r0
 800a2b0:	4608      	mov	r0, r1
 800a2b2:	602b      	str	r3, [r5, #0]
 800a2b4:	f7f7 fb0a 	bl	80018cc <_isatty>
 800a2b8:	1c43      	adds	r3, r0, #1
 800a2ba:	d102      	bne.n	800a2c2 <_isatty_r+0x1a>
 800a2bc:	682b      	ldr	r3, [r5, #0]
 800a2be:	b103      	cbz	r3, 800a2c2 <_isatty_r+0x1a>
 800a2c0:	6023      	str	r3, [r4, #0]
 800a2c2:	bd38      	pop	{r3, r4, r5, pc}
 800a2c4:	20008b78 	.word	0x20008b78

0800a2c8 <_init>:
 800a2c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2ca:	bf00      	nop
 800a2cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a2ce:	bc08      	pop	{r3}
 800a2d0:	469e      	mov	lr, r3
 800a2d2:	4770      	bx	lr

0800a2d4 <_fini>:
 800a2d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2d6:	bf00      	nop
 800a2d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a2da:	bc08      	pop	{r3}
 800a2dc:	469e      	mov	lr, r3
 800a2de:	4770      	bx	lr
